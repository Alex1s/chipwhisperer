
ChipWhisperer-Nano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a18  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000007a8  20000000  00405a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000190b0  200007a8  004061c0  000207a8  2**2
                  ALLOC
  3 .stack        00003000  20019858  0041f270  000207a8  2**0
                  ALLOC
  4 .mpssemem     000000d0  2001c858  00422270  000207a8  2**2
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000207a8  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  000207d1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a44e  00000000  00000000  0002081a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00005090  00000000  00000000  0003ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c5b4  00000000  00000000  0003fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001028  00000000  00000000  0004c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00004140  00000000  00000000  0004d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001a1af  00000000  00000000  00051414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0001f009  00000000  00000000  0006b5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005b2e8  00000000  00000000  0008a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00003014  00000000  00000000  000e58b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 c8 01 20 2d 31 40 00 29 31 40 00 21 06 40 00     X.. -1@.)1@.!.@.
  400010:	29 31 40 00 29 31 40 00 29 31 40 00 00 00 00 00     )1@.)1@.)1@.....
  400020:	00 00 00 00 00 00 00 00 00 00 00 00 29 31 40 00     ............)1@.
  400030:	29 31 40 00 00 00 00 00 29 31 40 00 29 31 40 00     )1@.....)1@.)1@.
  400040:	29 31 40 00 29 31 40 00 29 31 40 00 29 31 40 00     )1@.)1@.)1@.)1@.
  400050:	29 31 40 00 29 31 40 00 29 31 40 00 29 31 40 00     )1@.)1@.)1@.)1@.
  400060:	29 31 40 00 29 31 40 00 00 00 00 00 91 28 40 00     )1@.)1@......(@.
  400070:	a1 28 40 00 00 00 00 00 29 31 40 00 91 17 40 00     .(@.....)1@...@.
  400080:	00 00 00 00 00 00 00 00 29 31 40 00 29 31 40 00     ........)1@.)1@.
  400090:	29 31 40 00 29 31 40 00 29 31 40 00 29 31 40 00     )1@.)1@.)1@.)1@.
  4000a0:	29 31 40 00 29 31 40 00 00 00 00 00 00 00 00 00     )1@.)1@.........
  4000b0:	00 00 00 00 29 31 40 00 29 31 40 00 29 31 40 00     ....)1@.)1@.)1@.
  4000c0:	29 31 40 00 29 31 40 00 75 36 40 00                 )1@.)1@.u6@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200007a8 	.word	0x200007a8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405a18 	.word	0x00405a18

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b03      	ldr	r3, [pc, #12]	; (400100 <frame_dummy+0x10>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4903      	ldr	r1, [pc, #12]	; (400104 <frame_dummy+0x14>)
  4000f8:	4803      	ldr	r0, [pc, #12]	; (400108 <frame_dummy+0x18>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	bd08      	pop	{r3, pc}
  400100:	00000000 	.word	0x00000000
  400104:	200007ac 	.word	0x200007ac
  400108:	00405a18 	.word	0x00405a18

0040010c <capture_handler>:
 */
static void capture_handler(Pio *p_pio)
{
	uint32_t dummy_data;
	
	if (p_pio->PIO_PCISR & PIO_PCIDR_RXBUFF){
  40010c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
  400110:	071b      	lsls	r3, r3, #28
  400112:	d400      	bmi.n	400116 <capture_handler+0xa>
  400114:	4770      	bx	lr
{
  400116:	b510      	push	{r4, lr}

		pio_capture_disable_interrupt(p_pio, PIO_PCIDR_RXBUFF);
  400118:	2108      	movs	r1, #8
{
  40011a:	b082      	sub	sp, #8
		pio_capture_disable_interrupt(p_pio, PIO_PCIDR_RXBUFF);
  40011c:	4b0d      	ldr	r3, [pc, #52]	; (400154 <capture_handler+0x48>)
  40011e:	4798      	blx	r3
		/* Disable PDC transfer. */
		pdc_disable_transfer(p_pdc, PERIPH_PTCR_RXTEN);
  400120:	4b0d      	ldr	r3, [pc, #52]	; (400158 <capture_handler+0x4c>)
  400122:	2101      	movs	r1, #1
  400124:	6818      	ldr	r0, [r3, #0]
  400126:	4b0d      	ldr	r3, [pc, #52]	; (40015c <capture_handler+0x50>)
  400128:	4798      	blx	r3
		/* Clear any unwanted data */
		pio_capture_read(PIOA, &dummy_data);
  40012a:	a901      	add	r1, sp, #4
  40012c:	4b0c      	ldr	r3, [pc, #48]	; (400160 <capture_handler+0x54>)
  40012e:	480d      	ldr	r0, [pc, #52]	; (400164 <capture_handler+0x58>)
  400130:	4798      	blx	r3
	
		/* Disable capture */
		gpio_set_pin_high(PIO_CAPTURELATCH_nSET);
  400132:	2007      	movs	r0, #7
  400134:	4b0c      	ldr	r3, [pc, #48]	; (400168 <capture_handler+0x5c>)
  400136:	4798      	blx	r3
		gpio_set_pin_low(PIO_CAPTURELATCH_nRESET);
  400138:	2009      	movs	r0, #9
  40013a:	4b0c      	ldr	r3, [pc, #48]	; (40016c <capture_handler+0x60>)
  40013c:	4798      	blx	r3

		g_uc_cbk_received = 1;
  40013e:	2201      	movs	r2, #1
  400140:	4b0b      	ldr	r3, [pc, #44]	; (400170 <capture_handler+0x64>)
		
		LED_Off(LED2_GPIO);
  400142:	4c0c      	ldr	r4, [pc, #48]	; (400174 <capture_handler+0x68>)
  400144:	2022      	movs	r0, #34	; 0x22
		g_uc_cbk_received = 1;
  400146:	701a      	strb	r2, [r3, #0]
		LED_Off(LED2_GPIO);
  400148:	47a0      	blx	r4
		LED_Off(LED3_GPIO);
  40014a:	2023      	movs	r0, #35	; 0x23
  40014c:	47a0      	blx	r4
	}
}
  40014e:	b002      	add	sp, #8
  400150:	bd10      	pop	{r4, pc}
  400152:	bf00      	nop
  400154:	00403119 	.word	0x00403119
  400158:	200007c8 	.word	0x200007c8
  40015c:	00404ff9 	.word	0x00404ff9
  400160:	004030f9 	.word	0x004030f9
  400164:	400e0e00 	.word	0x400e0e00
  400168:	00402f05 	.word	0x00402f05
  40016c:	00402f21 	.word	0x00402f21
  400170:	200007c4 	.word	0x200007c4
  400174:	00402a11 	.word	0x00402a11

00400178 <pin_edge_handler>:

/* Handler for all PIOA events */
void pin_edge_handler(const uint32_t id, const uint32_t mask)
{
	if ((id == ID_PIOA) && (mask == PIO_CAPTURE_EN2_MASK)){
  400178:	280b      	cmp	r0, #11
  40017a:	d000      	beq.n	40017e <pin_edge_handler+0x6>
  40017c:	4770      	bx	lr
  40017e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  400182:	d1fb      	bne.n	40017c <pin_edge_handler+0x4>
{
  400184:	b500      	push	{lr}
	
		/* Force output high */
		gpio_set_pin_low(PIO_CAPTURELATCH_nSET);
  400186:	2007      	movs	r0, #7
{
  400188:	b083      	sub	sp, #12
		gpio_set_pin_low(PIO_CAPTURELATCH_nSET);
  40018a:	4b06      	ldr	r3, [pc, #24]	; (4001a4 <pin_edge_handler+0x2c>)
  40018c:	9101      	str	r1, [sp, #4]
  40018e:	4798      	blx	r3
		
		/* Disable interrupt now */
		pio_disable_interrupt(PIOA, PIO_CAPTURE_EN2_MASK);
  400190:	9901      	ldr	r1, [sp, #4]
  400192:	4805      	ldr	r0, [pc, #20]	; (4001a8 <pin_edge_handler+0x30>)
  400194:	4b05      	ldr	r3, [pc, #20]	; (4001ac <pin_edge_handler+0x34>)
  400196:	4798      	blx	r3
		
		LED_On(LED3_GPIO);
  400198:	2023      	movs	r0, #35	; 0x23
  40019a:	4b05      	ldr	r3, [pc, #20]	; (4001b0 <pin_edge_handler+0x38>)
	}
}
  40019c:	b003      	add	sp, #12
  40019e:	f85d eb04 	ldr.w	lr, [sp], #4
		LED_On(LED3_GPIO);
  4001a2:	4718      	bx	r3
  4001a4:	00402f21 	.word	0x00402f21
  4001a8:	400e0e00 	.word	0x400e0e00
  4001ac:	00402edd 	.word	0x00402edd
  4001b0:	00402a59 	.word	0x00402a59

004001b4 <cwnano_adc_init>:
{
  4001b4:	b510      	push	{r4, lr}
	pio_capture_set_mode(PIOA, PIO_PCMR_DSIZE_BYTE);
  4001b6:	4c06      	ldr	r4, [pc, #24]	; (4001d0 <cwnano_adc_init+0x1c>)
	pio_capture_handler_set(capture_handler);
  4001b8:	4806      	ldr	r0, [pc, #24]	; (4001d4 <cwnano_adc_init+0x20>)
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <cwnano_adc_init+0x24>)
  4001bc:	4798      	blx	r3
	pio_capture_set_mode(PIOA, PIO_PCMR_DSIZE_BYTE);
  4001be:	4620      	mov	r0, r4
  4001c0:	4b06      	ldr	r3, [pc, #24]	; (4001dc <cwnano_adc_init+0x28>)
  4001c2:	2100      	movs	r1, #0
  4001c4:	4798      	blx	r3
	pio_capture_enable(PIOA);
  4001c6:	4620      	mov	r0, r4
}
  4001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	pio_capture_enable(PIOA);
  4001cc:	4b04      	ldr	r3, [pc, #16]	; (4001e0 <cwnano_adc_init+0x2c>)
  4001ce:	4718      	bx	r3
  4001d0:	400e0e00 	.word	0x400e0e00
  4001d4:	0040010d 	.word	0x0040010d
  4001d8:	00402885 	.word	0x00402885
  4001dc:	004030d5 	.word	0x004030d5
  4001e0:	004030e1 	.word	0x004030e1

004001e4 <adc_capture_start>:

uint32_t capture_req_length = SIZE_BUFF_RECEPT;

void adc_capture_start(void)
{
  4001e4:	b570      	push	{r4, r5, r6, lr}
	
	static pdc_packet_t * packet0p;
	static pdc_packet_t * packet1p;
	
	LED_On(LED2_GPIO);
  4001e6:	2022      	movs	r0, #34	; 0x22
  4001e8:	4b31      	ldr	r3, [pc, #196]	; (4002b0 <adc_capture_start+0xcc>)
{
  4001ea:	b082      	sub	sp, #8
	LED_On(LED2_GPIO);
  4001ec:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4001ee:	2640      	movs	r6, #64	; 0x40
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4001f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
	NVIC_DisableIRQ(PIOA_IRQn);
	NVIC_ClearPendingIRQ(PIOA_IRQn);
	NVIC_SetPriority(PIOA_IRQn, PIO_IRQ_PRI);
	NVIC_EnableIRQ(PIOA_IRQn);

	g_uc_cbk_received = 0;
  4001f4:	2000      	movs	r0, #0
  4001f6:	4b2f      	ldr	r3, [pc, #188]	; (4002b4 <adc_capture_start+0xd0>)
	
	if (capture_req_length > SIZE_BUFF_RECEPT){
  4001f8:	4d2f      	ldr	r5, [pc, #188]	; (4002b8 <adc_capture_start+0xd4>)
  4001fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4001fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400202:	f883 630b 	strb.w	r6, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400206:	601a      	str	r2, [r3, #0]
  400208:	492c      	ldr	r1, [pc, #176]	; (4002bc <adc_capture_start+0xd8>)
  40020a:	682b      	ldr	r3, [r5, #0]
	g_uc_cbk_received = 0;
  40020c:	4c2c      	ldr	r4, [pc, #176]	; (4002c0 <adc_capture_start+0xdc>)
	if (capture_req_length > SIZE_BUFF_RECEPT){
  40020e:	428b      	cmp	r3, r1
	g_uc_cbk_received = 0;
  400210:	7020      	strb	r0, [r4, #0]
		capture_req_length = SIZE_BUFF_RECEPT;
	}
	
	packet0p = &packet0;
  400212:	4a2c      	ldr	r2, [pc, #176]	; (4002c4 <adc_capture_start+0xe0>)
  400214:	4c2c      	ldr	r4, [pc, #176]	; (4002c8 <adc_capture_start+0xe4>)
	if (capture_req_length > SIZE_BUFF_RECEPT){
  400216:	d93f      	bls.n	400298 <adc_capture_start+0xb4>
	packet0p = &packet0;
  400218:	460b      	mov	r3, r1
  40021a:	4e2c      	ldr	r6, [pc, #176]	; (4002cc <adc_capture_start+0xe8>)
		capture_req_length = SIZE_BUFF_RECEPT;
  40021c:	6029      	str	r1, [r5, #0]
	packet0p = &packet0;
  40021e:	6022      	str	r2, [r4, #0]
		/* Set up PDC receive buffer */
		packet0.ul_addr = (uint32_t) pio_rx_buffer;
		packet0.ul_size = capture_req_length;
	} else {
		packet0.ul_addr = (uint32_t) pio_rx_buffer;
		packet0.ul_size = (uint16_t)0xFFFF;
  400220:	f64f 70ff 	movw	r0, #65535	; 0xffff
		packet0.ul_addr = (uint32_t) pio_rx_buffer;
  400224:	492a      	ldr	r1, [pc, #168]	; (4002d0 <adc_capture_start+0xec>)
		packet1.ul_addr = (uint32_t) (pio_rx_buffer + (uint32_t)0xFFFF);
		packet1.ul_size = capture_req_length - (uint32_t)0xFFFF;
  400226:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
		packet0.ul_addr = (uint32_t) pio_rx_buffer;
  40022a:	6011      	str	r1, [r2, #0]
		packet1.ul_addr = (uint32_t) (pio_rx_buffer + (uint32_t)0xFFFF);
  40022c:	4929      	ldr	r1, [pc, #164]	; (4002d4 <adc_capture_start+0xf0>)
		packet1.ul_size = capture_req_length - (uint32_t)0xFFFF;
  40022e:	3bff      	subs	r3, #255	; 0xff
  400230:	604b      	str	r3, [r1, #4]
		packet1.ul_addr = (uint32_t) (pio_rx_buffer + (uint32_t)0xFFFF);
  400232:	4b29      	ldr	r3, [pc, #164]	; (4002d8 <adc_capture_start+0xf4>)
		packet1p = &packet1;
  400234:	6031      	str	r1, [r6, #0]
		packet1.ul_addr = (uint32_t) (pio_rx_buffer + (uint32_t)0xFFFF);
  400236:	600b      	str	r3, [r1, #0]
		packet0.ul_size = (uint16_t)0xFFFF;
  400238:	6050      	str	r0, [r2, #4]
	}
		
		
	p_pdc = pio_capture_get_pdc_base(PIOA);
  40023a:	4b28      	ldr	r3, [pc, #160]	; (4002dc <adc_capture_start+0xf8>)
  40023c:	4828      	ldr	r0, [pc, #160]	; (4002e0 <adc_capture_start+0xfc>)
  40023e:	4798      	blx	r3
  400240:	4d28      	ldr	r5, [pc, #160]	; (4002e4 <adc_capture_start+0x100>)
	pdc_rx_init(p_pdc, packet0p, packet1p);
  400242:	6832      	ldr	r2, [r6, #0]
  400244:	6821      	ldr	r1, [r4, #0]
  400246:	4b28      	ldr	r3, [pc, #160]	; (4002e8 <adc_capture_start+0x104>)
	p_pdc = pio_capture_get_pdc_base(PIOA);
  400248:	6028      	str	r0, [r5, #0]
	pdc_rx_init(p_pdc, packet0p, packet1p);
  40024a:	4798      	blx	r3

	/* Enable PDC transfer. */
	pdc_enable_transfer(p_pdc, PERIPH_PTCR_RXTEN);
  40024c:	2101      	movs	r1, #1
  40024e:	6828      	ldr	r0, [r5, #0]
  400250:	4b26      	ldr	r3, [pc, #152]	; (4002ec <adc_capture_start+0x108>)
  400252:	4798      	blx	r3
	
	/* Enable external pin interrupt too */	
	pio_get_interrupt_status(PIOA);
  400254:	4b26      	ldr	r3, [pc, #152]	; (4002f0 <adc_capture_start+0x10c>)
  400256:	4822      	ldr	r0, [pc, #136]	; (4002e0 <adc_capture_start+0xfc>)
  400258:	4798      	blx	r3
	pio_enable_pin_interrupt(PIO_CAPTURE_EN2_IDX);
  40025a:	2010      	movs	r0, #16
  40025c:	4b25      	ldr	r3, [pc, #148]	; (4002f4 <adc_capture_start+0x110>)
  40025e:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIO_CAPTURE_EN2_MASK, PIO_IT_RISE_EDGE, pin_edge_handler);
  400260:	4825      	ldr	r0, [pc, #148]	; (4002f8 <adc_capture_start+0x114>)
  400262:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400266:	9000      	str	r0, [sp, #0]
  400268:	2370      	movs	r3, #112	; 0x70
  40026a:	210b      	movs	r1, #11
  40026c:	4d23      	ldr	r5, [pc, #140]	; (4002fc <adc_capture_start+0x118>)
  40026e:	481c      	ldr	r0, [pc, #112]	; (4002e0 <adc_capture_start+0xfc>)
  400270:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIO_CAPTURE_EN2_MASK);
  400272:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400276:	481a      	ldr	r0, [pc, #104]	; (4002e0 <adc_capture_start+0xfc>)
  400278:	4b21      	ldr	r3, [pc, #132]	; (400300 <adc_capture_start+0x11c>)
  40027a:	4798      	blx	r3
	
	/* Configure the PIO capture interrupt mask. */
	pio_capture_enable_interrupt(PIOA, (PIO_PCIER_RXBUFF));
  40027c:	2108      	movs	r1, #8
  40027e:	4b21      	ldr	r3, [pc, #132]	; (400304 <adc_capture_start+0x120>)
  400280:	4817      	ldr	r0, [pc, #92]	; (4002e0 <adc_capture_start+0xfc>)
  400282:	4798      	blx	r3
	
	gpio_set_pin_high(PIO_CAPTURELATCH_nSET);
  400284:	4c20      	ldr	r4, [pc, #128]	; (400308 <adc_capture_start+0x124>)
  400286:	2007      	movs	r0, #7
  400288:	47a0      	blx	r4
	gpio_set_pin_high(PIO_CAPTURELATCH_nRESET);
  40028a:	2009      	movs	r0, #9
  40028c:	47a0      	blx	r4
	
	cwnano_glitch_enable();
  40028e:	4b1f      	ldr	r3, [pc, #124]	; (40030c <adc_capture_start+0x128>)
}
  400290:	b002      	add	sp, #8
  400292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cwnano_glitch_enable();
  400296:	4718      	bx	r3
	if (capture_req_length < (uint32_t)0xFFFF){
  400298:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	packet1p = NULL;
  40029c:	4e0b      	ldr	r6, [pc, #44]	; (4002cc <adc_capture_start+0xe8>)
	if (capture_req_length < (uint32_t)0xFFFF){
  40029e:	428b      	cmp	r3, r1
	packet0p = &packet0;
  4002a0:	6022      	str	r2, [r4, #0]
	packet1p = NULL;
  4002a2:	6030      	str	r0, [r6, #0]
	if (capture_req_length < (uint32_t)0xFFFF){
  4002a4:	d8bc      	bhi.n	400220 <adc_capture_start+0x3c>
		packet0.ul_addr = (uint32_t) pio_rx_buffer;
  4002a6:	490a      	ldr	r1, [pc, #40]	; (4002d0 <adc_capture_start+0xec>)
  4002a8:	e9c2 1300 	strd	r1, r3, [r2]
		packet0.ul_size = capture_req_length;
  4002ac:	e7c5      	b.n	40023a <adc_capture_start+0x56>
  4002ae:	bf00      	nop
  4002b0:	00402a59 	.word	0x00402a59
  4002b4:	e000e100 	.word	0xe000e100
  4002b8:	200000a4 	.word	0x200000a4
  4002bc:	000186a0 	.word	0x000186a0
  4002c0:	200007c4 	.word	0x200007c4
  4002c4:	200007cc 	.word	0x200007cc
  4002c8:	200007d4 	.word	0x200007d4
  4002cc:	200007e0 	.word	0x200007e0
  4002d0:	200007e4 	.word	0x200007e4
  4002d4:	200007d8 	.word	0x200007d8
  4002d8:	200107e3 	.word	0x200107e3
  4002dc:	00403121 	.word	0x00403121
  4002e0:	400e0e00 	.word	0x400e0e00
  4002e4:	200007c8 	.word	0x200007c8
  4002e8:	00404fd5 	.word	0x00404fd5
  4002ec:	00404fed 	.word	0x00404fed
  4002f0:	00402ee1 	.word	0x00402ee1
  4002f4:	004030b9 	.word	0x004030b9
  4002f8:	00400179 	.word	0x00400179
  4002fc:	004027fd 	.word	0x004027fd
  400300:	00402ed9 	.word	0x00402ed9
  400304:	0040310d 	.word	0x0040310d
  400308:	00402f05 	.word	0x00402f05
  40030c:	0040034d 	.word	0x0040034d

00400310 <adc_capture_done>:

unsigned int adc_capture_done(void)
{	
	return g_uc_cbk_received;	
  400310:	4b01      	ldr	r3, [pc, #4]	; (400318 <adc_capture_done+0x8>)
  400312:	7818      	ldrb	r0, [r3, #0]
}
  400314:	4770      	bx	lr
  400316:	bf00      	nop
  400318:	200007c4 	.word	0x200007c4

0040031c <adc_set_clksrc>:

void adc_set_clksrc(unsigned int src)
{
	if (src){
  40031c:	b110      	cbz	r0, 400324 <adc_set_clksrc+0x8>
		gpio_set_pin_high(ADCCLK_SRC_IDX);
  40031e:	2014      	movs	r0, #20
  400320:	4b02      	ldr	r3, [pc, #8]	; (40032c <adc_set_clksrc+0x10>)
  400322:	4718      	bx	r3
	} else {
		gpio_set_pin_low(ADCCLK_SRC_IDX);
  400324:	2014      	movs	r0, #20
  400326:	4b02      	ldr	r3, [pc, #8]	; (400330 <adc_set_clksrc+0x14>)
  400328:	4718      	bx	r3
  40032a:	bf00      	nop
  40032c:	00402f05 	.word	0x00402f05
  400330:	00402f21 	.word	0x00402f21

00400334 <adc_set_clken>:
	}
}

void adc_set_clken(unsigned int en)
{
	if (en){
  400334:	b110      	cbz	r0, 40033c <adc_set_clken+0x8>
		gpio_set_pin_high(ADCCLK_EN_IDX);
  400336:	2013      	movs	r0, #19
  400338:	4b02      	ldr	r3, [pc, #8]	; (400344 <adc_set_clken+0x10>)
  40033a:	4718      	bx	r3
	} else {
		gpio_set_pin_low(ADCCLK_EN_IDX);
  40033c:	2013      	movs	r0, #19
  40033e:	4b02      	ldr	r3, [pc, #8]	; (400348 <adc_set_clken+0x14>)
  400340:	4718      	bx	r3
  400342:	bf00      	nop
  400344:	00402f05 	.word	0x00402f05
  400348:	00402f21 	.word	0x00402f21

0040034c <cwnano_glitch_enable>:
	}
}


void cwnano_glitch_enable(void)
{
  40034c:	b530      	push	{r4, r5, lr}
	/* Enable external pin interrupt too */
	pio_get_interrupt_status(PIOA);
  40034e:	4c0c      	ldr	r4, [pc, #48]	; (400380 <cwnano_glitch_enable+0x34>)
{
  400350:	b083      	sub	sp, #12
	pio_get_interrupt_status(PIOA);
  400352:	4620      	mov	r0, r4
  400354:	4b0b      	ldr	r3, [pc, #44]	; (400384 <cwnano_glitch_enable+0x38>)
  400356:	4798      	blx	r3
	pio_enable_pin_interrupt(PIN_TARGET_GPIO4_MSK);
  400358:	2002      	movs	r0, #2
  40035a:	4b0b      	ldr	r3, [pc, #44]	; (400388 <cwnano_glitch_enable+0x3c>)
  40035c:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIN_TARGET_GPIO4_MSK, PIO_IT_RISE_EDGE, pin_trigglitch_handler);
  40035e:	480b      	ldr	r0, [pc, #44]	; (40038c <cwnano_glitch_enable+0x40>)
  400360:	2202      	movs	r2, #2
  400362:	9000      	str	r0, [sp, #0]
  400364:	2370      	movs	r3, #112	; 0x70
  400366:	210b      	movs	r1, #11
  400368:	4620      	mov	r0, r4
  40036a:	4d09      	ldr	r5, [pc, #36]	; (400390 <cwnano_glitch_enable+0x44>)
  40036c:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIN_TARGET_GPIO4_MSK);
  40036e:	2102      	movs	r1, #2
  400370:	4620      	mov	r0, r4
  400372:	4b08      	ldr	r3, [pc, #32]	; (400394 <cwnano_glitch_enable+0x48>)
  400374:	4798      	blx	r3
	glitch_enabled = 1;
  400376:	2201      	movs	r2, #1
  400378:	4b07      	ldr	r3, [pc, #28]	; (400398 <cwnano_glitch_enable+0x4c>)
  40037a:	601a      	str	r2, [r3, #0]
}
  40037c:	b003      	add	sp, #12
  40037e:	bd30      	pop	{r4, r5, pc}
  400380:	400e0e00 	.word	0x400e0e00
  400384:	00402ee1 	.word	0x00402ee1
  400388:	004030b9 	.word	0x004030b9
  40038c:	004004e5 	.word	0x004004e5
  400390:	004027fd 	.word	0x004027fd
  400394:	00402ed9 	.word	0x00402ed9
  400398:	20018e84 	.word	0x20018e84

0040039c <cwnano_glitch_init>:

/* Init the glitch pin (drive low) */
void cwnano_glitch_init(void)
{
	gpio_configure_pin(PIN_GLITCH_IDX, PIO_OUTPUT_0 | PIO_DEFAULT);
  40039c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4003a0:	2000      	movs	r0, #0
  4003a2:	4b01      	ldr	r3, [pc, #4]	; (4003a8 <cwnano_glitch_init+0xc>)
  4003a4:	4718      	bx	r3
  4003a6:	bf00      	nop
  4003a8:	00402f61 	.word	0x00402f61

004003ac <cwnano_setup_glitch>:
static uint32_t glitch_offset_cnt;

/* Configure the glitch code, must be called before calling insert */
void cwnano_setup_glitch(unsigned int offset, unsigned int length)
{
	glitch_width_cnt = length / 3;
  4003ac:	4b0b      	ldr	r3, [pc, #44]	; (4003dc <cwnano_setup_glitch+0x30>)
{
  4003ae:	b4f0      	push	{r4, r5, r6, r7}
	glitch_width_cnt = length / 3;
  4003b0:	fba3 c201 	umull	ip, r2, r3, r1
	glitch_width_case = length % 3;
	
	glitch_offset_cnt = offset / 3;
  4003b4:	fba3 c300 	umull	ip, r3, r3, r0
	glitch_width_cnt = length / 3;
  4003b8:	4f09      	ldr	r7, [pc, #36]	; (4003e0 <cwnano_setup_glitch+0x34>)
	glitch_offset_cnt = offset / 3;
  4003ba:	4e0a      	ldr	r6, [pc, #40]	; (4003e4 <cwnano_setup_glitch+0x38>)
	glitch_width_cnt = length / 3;
  4003bc:	0852      	lsrs	r2, r2, #1
	glitch_offset_cnt = offset / 3;
  4003be:	085b      	lsrs	r3, r3, #1
	glitch_width_case = length % 3;
  4003c0:	4d09      	ldr	r5, [pc, #36]	; (4003e8 <cwnano_setup_glitch+0x3c>)
	glitch_offset_case = offset % 3;
  4003c2:	4c0a      	ldr	r4, [pc, #40]	; (4003ec <cwnano_setup_glitch+0x40>)
	glitch_width_cnt = length / 3;
  4003c4:	603a      	str	r2, [r7, #0]
	glitch_offset_cnt = offset / 3;
  4003c6:	6033      	str	r3, [r6, #0]
	glitch_width_case = length % 3;
  4003c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	glitch_offset_case = offset % 3;
  4003cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	glitch_width_case = length % 3;
  4003d0:	1a8a      	subs	r2, r1, r2
	glitch_offset_case = offset % 3;
  4003d2:	1ac3      	subs	r3, r0, r3
	glitch_width_case = length % 3;
  4003d4:	602a      	str	r2, [r5, #0]
	glitch_offset_case = offset % 3;
  4003d6:	6023      	str	r3, [r4, #0]
}
  4003d8:	bcf0      	pop	{r4, r5, r6, r7}
  4003da:	4770      	bx	lr
  4003dc:	aaaaaaab 	.word	0xaaaaaaab
  4003e0:	20018e94 	.word	0x20018e94
  4003e4:	20018e8c 	.word	0x20018e8c
  4003e8:	20018e90 	.word	0x20018e90
  4003ec:	20018e88 	.word	0x20018e88

004003f0 <cwnano_glitch_insert>:
#pragma GCC optimize ("O1")

/* Insert the glitch by driving pin */
void cwnano_glitch_insert(void)
{
	if (glitch_width_case | glitch_width_cnt){
  4003f0:	4b38      	ldr	r3, [pc, #224]	; (4004d4 <cwnano_glitch_insert+0xe4>)
  4003f2:	681a      	ldr	r2, [r3, #0]
  4003f4:	4b38      	ldr	r3, [pc, #224]	; (4004d8 <cwnano_glitch_insert+0xe8>)
  4003f6:	681b      	ldr	r3, [r3, #0]
  4003f8:	4313      	orrs	r3, r2
  4003fa:	d019      	beq.n	400430 <cwnano_glitch_insert+0x40>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003fc:	b672      	cpsid	i
		__disable_irq();
		asm("push {r5-r6}");
  4003fe:	b460      	push	{r5, r6}
		asm volatile(
  400400:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  400404:	f445 2560 	orr.w	r5, r5, #917504	; 0xe0000
  400408:	f445 6560 	orr.w	r5, r5, #3584	; 0xe00
  40040c:	2601      	movs	r6, #1
		  
		  4) The choice of r5/r6 is just verified in debugger for now. Should actually do entire thing as assembly function
		     at some point.	 
		*/
		 
		switch(glitch_offset_case){
  40040e:	4b33      	ldr	r3, [pc, #204]	; (4004dc <cwnano_glitch_insert+0xec>)
  400410:	681b      	ldr	r3, [r3, #0]
  400412:	2b01      	cmp	r3, #1
  400414:	d00d      	beq.n	400432 <cwnano_glitch_insert+0x42>
  400416:	2b02      	cmp	r3, #2
  400418:	d04f      	beq.n	4004ba <cwnano_glitch_insert+0xca>
  40041a:	2b00      	cmp	r3, #0
  40041c:	d041      	beq.n	4004a2 <cwnano_glitch_insert+0xb2>
				asm volatile("str	r6, [r5, #52]");
				asm volatile("isb");
				break;
		}
		 
		 switch(glitch_width_case){
  40041e:	4b2d      	ldr	r3, [pc, #180]	; (4004d4 <cwnano_glitch_insert+0xe4>)
  400420:	681b      	ldr	r3, [r3, #0]
  400422:	2b01      	cmp	r3, #1
  400424:	d016      	beq.n	400454 <cwnano_glitch_insert+0x64>
  400426:	2b02      	cmp	r3, #2
  400428:	d02e      	beq.n	400488 <cwnano_glitch_insert+0x98>
  40042a:	b30b      	cbz	r3, 400470 <cwnano_glitch_insert+0x80>
				asm volatile("str	r6, [r5, #48]");
				asm volatile("str	r6, [r5, #52]");
				asm volatile("isb");
				break;
		 }		 
		asm("pop {r5-r6}");
  40042c:	bc60      	pop	{r5, r6}
  __ASM volatile ("cpsie i" : : : "memory");
  40042e:	b662      	cpsie	i
		__enable_irq();
	}
}
  400430:	4770      	bx	lr
				asm volatile("isb");
  400432:	f3bf 8f6f 	isb	sy
				asm volatile("str	r6, [r5, #52]");
  400436:	636e      	str	r6, [r5, #52]	; 0x34
				for(unsigned int i = glitch_offset_cnt; i != 0; i--);
  400438:	4b29      	ldr	r3, [pc, #164]	; (4004e0 <cwnano_glitch_insert+0xf0>)
  40043a:	681b      	ldr	r3, [r3, #0]
  40043c:	b10b      	cbz	r3, 400442 <cwnano_glitch_insert+0x52>
  40043e:	3b01      	subs	r3, #1
  400440:	d1fd      	bne.n	40043e <cwnano_glitch_insert+0x4e>
				asm volatile("dsb");
  400442:	f3bf 8f4f 	dsb	sy
				asm volatile("str	r6, [r5, #52]");
  400446:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("isb");
  400448:	f3bf 8f6f 	isb	sy
		 switch(glitch_width_case){
  40044c:	4b21      	ldr	r3, [pc, #132]	; (4004d4 <cwnano_glitch_insert+0xe4>)
  40044e:	681b      	ldr	r3, [r3, #0]
  400450:	2b01      	cmp	r3, #1
  400452:	d1e8      	bne.n	400426 <cwnano_glitch_insert+0x36>
				asm volatile("isb");
  400454:	f3bf 8f6f 	isb	sy
				asm volatile("str	r6, [r5, #48]");
  400458:	632e      	str	r6, [r5, #48]	; 0x30
				for(unsigned int i = glitch_width_cnt; i != 0; i--);
  40045a:	4b1f      	ldr	r3, [pc, #124]	; (4004d8 <cwnano_glitch_insert+0xe8>)
  40045c:	681b      	ldr	r3, [r3, #0]
  40045e:	b10b      	cbz	r3, 400464 <cwnano_glitch_insert+0x74>
  400460:	3b01      	subs	r3, #1
  400462:	d1fd      	bne.n	400460 <cwnano_glitch_insert+0x70>
				asm volatile("dsb");
  400464:	f3bf 8f4f 	dsb	sy
				asm volatile("str	r6, [r5, #52]");
  400468:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("isb");
  40046a:	f3bf 8f6f 	isb	sy
				break;
  40046e:	e7dd      	b.n	40042c <cwnano_glitch_insert+0x3c>
				 asm volatile("isb");
  400470:	f3bf 8f6f 	isb	sy
				 asm volatile("str	r6, [r5, #48]");
  400474:	632e      	str	r6, [r5, #48]	; 0x30
				 for(unsigned int i = glitch_width_cnt; i != 0; i--);
  400476:	4b18      	ldr	r3, [pc, #96]	; (4004d8 <cwnano_glitch_insert+0xe8>)
  400478:	681b      	ldr	r3, [r3, #0]
  40047a:	b10b      	cbz	r3, 400480 <cwnano_glitch_insert+0x90>
  40047c:	3b01      	subs	r3, #1
  40047e:	d1fd      	bne.n	40047c <cwnano_glitch_insert+0x8c>
				 asm volatile("str	r6, [r5, #52]");
  400480:	636e      	str	r6, [r5, #52]	; 0x34
				 asm volatile("isb");
  400482:	f3bf 8f6f 	isb	sy
				 break;
  400486:	e7d1      	b.n	40042c <cwnano_glitch_insert+0x3c>
				asm volatile("isb");
  400488:	f3bf 8f6f 	isb	sy
				asm volatile("str	r6, [r5, #48]");
  40048c:	632e      	str	r6, [r5, #48]	; 0x30
				for(unsigned int i = glitch_width_cnt; i != 0; i--);
  40048e:	4b12      	ldr	r3, [pc, #72]	; (4004d8 <cwnano_glitch_insert+0xe8>)
  400490:	681b      	ldr	r3, [r3, #0]
  400492:	b10b      	cbz	r3, 400498 <cwnano_glitch_insert+0xa8>
  400494:	3b01      	subs	r3, #1
  400496:	d1fd      	bne.n	400494 <cwnano_glitch_insert+0xa4>
				asm volatile("str	r6, [r5, #48]");
  400498:	632e      	str	r6, [r5, #48]	; 0x30
				asm volatile("str	r6, [r5, #52]");
  40049a:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("isb");
  40049c:	f3bf 8f6f 	isb	sy
				break;
  4004a0:	e7c4      	b.n	40042c <cwnano_glitch_insert+0x3c>
				asm volatile("isb");
  4004a2:	f3bf 8f6f 	isb	sy
				asm volatile("str	r6, [r5, #52]");
  4004a6:	636e      	str	r6, [r5, #52]	; 0x34
				for(unsigned int i = glitch_offset_cnt; i != 0; i--);
  4004a8:	4b0d      	ldr	r3, [pc, #52]	; (4004e0 <cwnano_glitch_insert+0xf0>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	b10b      	cbz	r3, 4004b2 <cwnano_glitch_insert+0xc2>
  4004ae:	3b01      	subs	r3, #1
  4004b0:	d1fd      	bne.n	4004ae <cwnano_glitch_insert+0xbe>
				asm volatile("str	r6, [r5, #52]");
  4004b2:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("isb");
  4004b4:	f3bf 8f6f 	isb	sy
				break;
  4004b8:	e7b1      	b.n	40041e <cwnano_glitch_insert+0x2e>
				asm volatile("isb");
  4004ba:	f3bf 8f6f 	isb	sy
				asm volatile("str	r6, [r5, #52]");
  4004be:	636e      	str	r6, [r5, #52]	; 0x34
				for(unsigned int i = glitch_offset_cnt; i != 0; i--);
  4004c0:	4b07      	ldr	r3, [pc, #28]	; (4004e0 <cwnano_glitch_insert+0xf0>)
  4004c2:	681b      	ldr	r3, [r3, #0]
  4004c4:	b10b      	cbz	r3, 4004ca <cwnano_glitch_insert+0xda>
  4004c6:	3b01      	subs	r3, #1
  4004c8:	d1fd      	bne.n	4004c6 <cwnano_glitch_insert+0xd6>
				asm volatile("str	r6, [r5, #52]");
  4004ca:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("str	r6, [r5, #52]");
  4004cc:	636e      	str	r6, [r5, #52]	; 0x34
				asm volatile("isb");
  4004ce:	f3bf 8f6f 	isb	sy
				break;
  4004d2:	e7a4      	b.n	40041e <cwnano_glitch_insert+0x2e>
  4004d4:	20018e90 	.word	0x20018e90
  4004d8:	20018e94 	.word	0x20018e94
  4004dc:	20018e88 	.word	0x20018e88
  4004e0:	20018e8c 	.word	0x20018e8c

004004e4 <pin_trigglitch_handler>:
	if ((id == ID_PIOA) && (mask == PIN_TARGET_GPIO4_MSK)){
  4004e4:	280b      	cmp	r0, #11
  4004e6:	d000      	beq.n	4004ea <pin_trigglitch_handler+0x6>
  4004e8:	4770      	bx	lr
  4004ea:	2902      	cmp	r1, #2
  4004ec:	d1fc      	bne.n	4004e8 <pin_trigglitch_handler+0x4>
		pio_disable_interrupt(PIOA, PIN_TARGET_GPIO4_MSK);
  4004ee:	4b07      	ldr	r3, [pc, #28]	; (40050c <pin_trigglitch_handler+0x28>)
{
  4004f0:	b510      	push	{r4, lr}
		pio_disable_interrupt(PIOA, PIN_TARGET_GPIO4_MSK);
  4004f2:	4807      	ldr	r0, [pc, #28]	; (400510 <pin_trigglitch_handler+0x2c>)
  4004f4:	4798      	blx	r3
		if(glitch_width && glitch_enabled){
  4004f6:	4b07      	ldr	r3, [pc, #28]	; (400514 <pin_trigglitch_handler+0x30>)
  4004f8:	681b      	ldr	r3, [r3, #0]
  4004fa:	b133      	cbz	r3, 40050a <pin_trigglitch_handler+0x26>
  4004fc:	4c06      	ldr	r4, [pc, #24]	; (400518 <pin_trigglitch_handler+0x34>)
  4004fe:	6823      	ldr	r3, [r4, #0]
  400500:	b11b      	cbz	r3, 40050a <pin_trigglitch_handler+0x26>
			cwnano_glitch_insert();
  400502:	4b06      	ldr	r3, [pc, #24]	; (40051c <pin_trigglitch_handler+0x38>)
  400504:	4798      	blx	r3
			glitch_enabled = 0;
  400506:	2300      	movs	r3, #0
  400508:	6023      	str	r3, [r4, #0]
}
  40050a:	bd10      	pop	{r4, pc}
  40050c:	00402edd 	.word	0x00402edd
  400510:	400e0e00 	.word	0x400e0e00
  400514:	20018eb4 	.word	0x20018eb4
  400518:	20018e84 	.word	0x20018e84
  40051c:	004003f1 	.word	0x004003f1

00400520 <main>:
char usb_serial_number[33] = "000000000000DEADBEEF";

void cwnano_glitch_insert2(void);

int main (void)
{
  400520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400524:	b085      	sub	sp, #20
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM4S. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
  400526:	2110      	movs	r1, #16
  400528:	4b1c      	ldr	r3, [pc, #112]	; (40059c <main+0x7c>)
  40052a:	4668      	mov	r0, sp
  40052c:	4798      	blx	r3
	
	/* Initialize the system */
	sysclk_init();
  40052e:	4b1c      	ldr	r3, [pc, #112]	; (4005a0 <main+0x80>)
  400530:	4798      	blx	r3
	board_init();
  400532:	4b1c      	ldr	r3, [pc, #112]	; (4005a4 <main+0x84>)
  400534:	4798      	blx	r3
	cwnano_glitch_init();
  400536:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4005a8 <main+0x88>
  40053a:	4b1c      	ldr	r3, [pc, #112]	; (4005ac <main+0x8c>)
  40053c:	4798      	blx	r3
	init_gpio_as_input();
  40053e:	4b1c      	ldr	r3, [pc, #112]	; (4005b0 <main+0x90>)
  400540:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
  400542:	466c      	mov	r4, sp
  400544:	464d      	mov	r5, r9
  400546:	4f1b      	ldr	r7, [pc, #108]	; (4005b4 <main+0x94>)
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
  400548:	4e1b      	ldr	r6, [pc, #108]	; (4005b8 <main+0x98>)
  40054a:	f10d 0810 	add.w	r8, sp, #16
  40054e:	f854 2b04 	ldr.w	r2, [r4], #4
  400552:	4628      	mov	r0, r5
  400554:	4631      	mov	r1, r6
  400556:	47b8      	blx	r7
	for(unsigned int i = 0; i < 4; i++){
  400558:	4544      	cmp	r4, r8
  40055a:	f105 0508 	add.w	r5, r5, #8
  40055e:	d1f6      	bne.n	40054e <main+0x2e>
	}
	usb_serial_number[32] = 0;
  400560:	2200      	movs	r2, #0

	/* Insert application code here, after the board has been initialized. */
	LED_On(LED0_GPIO);
  400562:	2020      	movs	r0, #32
	usb_serial_number[32] = 0;
  400564:	f889 2020 	strb.w	r2, [r9, #32]
	LED_On(LED0_GPIO);
  400568:	4b14      	ldr	r3, [pc, #80]	; (4005bc <main+0x9c>)
  40056a:	4798      	blx	r3
	udc_start();
  40056c:	4b14      	ldr	r3, [pc, #80]	; (4005c0 <main+0xa0>)
  40056e:	4798      	blx	r3
	
	/* Parallel capture setup */
	cwnano_adc_init();
  400570:	4b14      	ldr	r3, [pc, #80]	; (4005c4 <main+0xa4>)
  400572:	4798      	blx	r3
	
	cpu_irq_enable();
  400574:	2201      	movs	r2, #1
  400576:	4b14      	ldr	r3, [pc, #80]	; (4005c8 <main+0xa8>)
  400578:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40057a:	f3bf 8f5f 	dmb	sy
  40057e:	b662      	cpsie	i
	
	naeusb_register_handlers();
  400580:	4b12      	ldr	r3, [pc, #72]	; (4005cc <main+0xac>)
  400582:	4798      	blx	r3
	naeusart_register_handlers();
  400584:	4b12      	ldr	r3, [pc, #72]	; (4005d0 <main+0xb0>)
  400586:	4798      	blx	r3
	nano_register_handlers();
  400588:	4b12      	ldr	r3, [pc, #72]	; (4005d4 <main+0xb4>)
  40058a:	4798      	blx	r3
	mpsse_register_handlers();
  40058c:	4b12      	ldr	r3, [pc, #72]	; (4005d8 <main+0xb8>)
  40058e:	4798      	blx	r3
  400590:	4d12      	ldr	r5, [pc, #72]	; (4005dc <main+0xbc>)
  400592:	4c13      	ldr	r4, [pc, #76]	; (4005e0 <main+0xc0>)

	while (true) {
		//sleepmgr_enter_sleep();
		cdc_send_to_pc();
  400594:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
  400596:	47a0      	blx	r4
	while (true) {
  400598:	e7fc      	b.n	400594 <main+0x74>
  40059a:	bf00      	nop
  40059c:	00402625 	.word	0x00402625
  4005a0:	00402af5 	.word	0x00402af5
  4005a4:	004047a5 	.word	0x004047a5
  4005a8:	200000a8 	.word	0x200000a8
  4005ac:	0040039d 	.word	0x0040039d
  4005b0:	00400ae9 	.word	0x00400ae9
  4005b4:	00405079 	.word	0x00405079
  4005b8:	00405984 	.word	0x00405984
  4005bc:	00402a59 	.word	0x00402a59
  4005c0:	0040205d 	.word	0x0040205d
  4005c4:	004001b5 	.word	0x004001b5
  4005c8:	20000718 	.word	0x20000718
  4005cc:	00400ce1 	.word	0x00400ce1
  4005d0:	00401ab9 	.word	0x00401ab9
  4005d4:	00400b19 	.word	0x00400b19
  4005d8:	004015a9 	.word	0x004015a9
  4005dc:	00401d49 	.word	0x00401d49
  4005e0:	004015cd 	.word	0x004015cd

004005e4 <ui_powerdown>:
void ui_powerdown(void)
{
	return;
	LED_Off(LED0_GPIO);
	LED_Off(LED1_GPIO);		
}
  4005e4:	4770      	bx	lr
  4005e6:	bf00      	nop

004005e8 <ui_wakeup>:
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop

004005ec <ui_process>:
	}
}

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
  4005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4005f0:	4b08      	ldr	r3, [pc, #32]	; (400614 <ui_process+0x28>)
  4005f2:	fba3 1300 	umull	r1, r3, r3, r0
  4005f6:	099b      	lsrs	r3, r3, #6
  4005f8:	fb02 0013 	mls	r0, r2, r3, r0
  4005fc:	b280      	uxth	r0, r0
  4005fe:	b130      	cbz	r0, 40060e <ui_process+0x22>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
  400600:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  400604:	d000      	beq.n	400608 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
	}
}
  400606:	4770      	bx	lr
		LED_Off(LED0_GPIO);
  400608:	2020      	movs	r0, #32
  40060a:	4b03      	ldr	r3, [pc, #12]	; (400618 <ui_process+0x2c>)
  40060c:	4718      	bx	r3
		LED_On(LED0_GPIO);
  40060e:	2020      	movs	r0, #32
  400610:	4b02      	ldr	r3, [pc, #8]	; (40061c <ui_process+0x30>)
  400612:	4718      	bx	r3
  400614:	10624dd3 	.word	0x10624dd3
  400618:	00402a11 	.word	0x00402a11
  40061c:	00402a59 	.word	0x00402a59

00400620 <HardFault_Handler>:

/* The fault handler implementation calls a function called
prvGetRegistersFromStack(). */
void HardFault_Handler(void)
{
	__asm volatile
  400620:	f01e 0f04 	tst.w	lr, #4
  400624:	bf0c      	ite	eq
  400626:	f3ef 8008 	mrseq	r0, MSP
  40062a:	f3ef 8009 	mrsne	r0, PSP
  40062e:	6981      	ldr	r1, [r0, #24]
  400630:	4a00      	ldr	r2, [pc, #0]	; (400634 <handler2_address_const>)
  400632:	4710      	bx	r2

00400634 <handler2_address_const>:
  400634:	00400639 	.word	0x00400639

00400638 <prvGetRegistersFromStack>:
	" handler2_address_const: .word prvGetRegistersFromStack    \n"
	);
}

void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
  400638:	b088      	sub	sp, #32
	volatile uint32_t lr; /* Link register. */
	volatile uint32_t pc; /* Program counter. */
	volatile uint32_t psr;/* Program status register. */

	r0 = pulFaultStackAddress[ 0 ];
	r1 = pulFaultStackAddress[ 1 ];
  40063a:	e9d0 4100 	ldrd	r4, r1, [r0]
	r2 = pulFaultStackAddress[ 2 ];
	r3 = pulFaultStackAddress[ 3 ];
  40063e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	r0 = pulFaultStackAddress[ 0 ];
  400642:	9400      	str	r4, [sp, #0]
	r1 = pulFaultStackAddress[ 1 ];
  400644:	9101      	str	r1, [sp, #4]
	r2 = pulFaultStackAddress[ 2 ];
  400646:	9202      	str	r2, [sp, #8]

	r12 = pulFaultStackAddress[ 4 ];
	lr = pulFaultStackAddress[ 5 ];
  400648:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
	r3 = pulFaultStackAddress[ 3 ];
  40064c:	9303      	str	r3, [sp, #12]
	r12 = pulFaultStackAddress[ 4 ];
  40064e:	9404      	str	r4, [sp, #16]
	pc = pulFaultStackAddress[ 6 ];
	psr = pulFaultStackAddress[ 7 ];
  400650:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
	lr = pulFaultStackAddress[ 5 ];
  400654:	9105      	str	r1, [sp, #20]
	pc = pulFaultStackAddress[ 6 ];
  400656:	9206      	str	r2, [sp, #24]
	psr = pulFaultStackAddress[ 7 ];
  400658:	9307      	str	r3, [sp, #28]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
  40065a:	e7fe      	b.n	40065a <prvGetRegistersFromStack+0x22>

0040065c <ctrl_samples_cb>:
}

static void ctrl_samples_cb(void)
{
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  40065c:	4b06      	ldr	r3, [pc, #24]	; (400678 <ctrl_samples_cb+0x1c>)
  40065e:	88da      	ldrh	r2, [r3, #6]
  400660:	899b      	ldrh	r3, [r3, #12]
  400662:	4293      	cmp	r3, r2
  400664:	d301      	bcc.n	40066a <ctrl_samples_cb+0xe>
		return;
	}
	
	if (udd_g_ctrlreq.req.wLength != 4){
  400666:	2a04      	cmp	r2, #4
  400668:	d000      	beq.n	40066c <ctrl_samples_cb+0x10>
		return;
	}
	
	capture_req_length  = *(CTRLBUFFER_WORDPTR);
}
  40066a:	4770      	bx	lr
	capture_req_length  = *(CTRLBUFFER_WORDPTR);
  40066c:	4a03      	ldr	r2, [pc, #12]	; (40067c <ctrl_samples_cb+0x20>)
  40066e:	4b04      	ldr	r3, [pc, #16]	; (400680 <ctrl_samples_cb+0x24>)
  400670:	6812      	ldr	r2, [r2, #0]
  400672:	601a      	str	r2, [r3, #0]
}
  400674:	4770      	bx	lr
  400676:	bf00      	nop
  400678:	200196ec 	.word	0x200196ec
  40067c:	200190bc 	.word	0x200190bc
  400680:	200000a4 	.word	0x200000a4

00400684 <main_vendor_bulk_in_received>:

	if (UDD_EP_TRANSFER_OK != status) {
		return; // Transfer aborted/error
	}

}
  400684:	4770      	bx	lr
  400686:	bf00      	nop

00400688 <nano_readmem_ctrl>:
	);
}


void nano_readmem_ctrl(void){
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
  400688:	4b05      	ldr	r3, [pc, #20]	; (4006a0 <nano_readmem_ctrl+0x18>)
	
	/* Do memory read */
	ctrlmemread_buf = pio_rx_buffer;
	
	/* Set size to read */
	ctrlmemread_size = buflen;
  40068a:	4a06      	ldr	r2, [pc, #24]	; (4006a4 <nano_readmem_ctrl+0x1c>)
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
  40068c:	681b      	ldr	r3, [r3, #0]
	ctrlmemread_buf = pio_rx_buffer;
  40068e:	4906      	ldr	r1, [pc, #24]	; (4006a8 <nano_readmem_ctrl+0x20>)
	ctrlmemread_size = buflen;
  400690:	4293      	cmp	r3, r2
  400692:	bf28      	it	cs
  400694:	4613      	movcs	r3, r2
	ctrlmemread_buf = pio_rx_buffer;
  400696:	4805      	ldr	r0, [pc, #20]	; (4006ac <nano_readmem_ctrl+0x24>)
	ctrlmemread_size = buflen;
  400698:	4a05      	ldr	r2, [pc, #20]	; (4006b0 <nano_readmem_ctrl+0x28>)
	ctrlmemread_buf = pio_rx_buffer;
  40069a:	6008      	str	r0, [r1, #0]
	ctrlmemread_size = buflen;
  40069c:	6013      	str	r3, [r2, #0]
	
	/* Start Transaction */
}
  40069e:	4770      	bx	lr
  4006a0:	200190bc 	.word	0x200190bc
  4006a4:	000186a0 	.word	0x000186a0
  4006a8:	20018ea4 	.word	0x20018ea4
  4006ac:	200007e4 	.word	0x200007e4
  4006b0:	20018ea8 	.word	0x20018ea8

004006b4 <nano_setup_out_received>:

bool nano_setup_out_received(void)
{
	switch (udd_g_ctrlreq.req.bRequest) {
  4006b4:	4a1d      	ldr	r2, [pc, #116]	; (40072c <nano_setup_out_received+0x78>)
  4006b6:	7853      	ldrb	r3, [r2, #1]
  4006b8:	3b10      	subs	r3, #16
  4006ba:	2b1d      	cmp	r3, #29
  4006bc:	d810      	bhi.n	4006e0 <nano_setup_out_received+0x2c>
  4006be:	e8df f003 	tbb	[pc, r3]
  4006c2:	0f15      	.short	0x0f15
  4006c4:	0f0f0f19 	.word	0x0f0f0f19
  4006c8:	0f0f0f0f 	.word	0x0f0f0f0f
  4006cc:	0f0f0f0f 	.word	0x0f0f0f0f
  4006d0:	0f0f0f0f 	.word	0x0f0f0f0f
  4006d4:	1d0f0f0f 	.word	0x1d0f0f0f
  4006d8:	2925210f 	.word	0x2925210f
  4006dc:	11310f2d 	.word	0x11310f2d
  4006e0:	2000      	movs	r0, #0
			case REQ_GLITCHGO:
			udd_g_ctrlreq.callback = cwnano_glitch_insert;
			return true;
	}
	return false;
}
  4006e2:	4770      	bx	lr
			udd_g_ctrlreq.callback = cwnano_glitch_insert;
  4006e4:	4b12      	ldr	r3, [pc, #72]	; (400730 <nano_setup_out_received+0x7c>)
			return true;
  4006e6:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = cwnano_glitch_insert;
  4006e8:	6113      	str	r3, [r2, #16]
			return true;
  4006ea:	4770      	bx	lr
				udd_g_ctrlreq.callback = nano_readmem_bulk;
  4006ec:	4b11      	ldr	r3, [pc, #68]	; (400734 <nano_setup_out_received+0x80>)
				return true;
  4006ee:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = nano_readmem_bulk;
  4006f0:	6113      	str	r3, [r2, #16]
				return true;
  4006f2:	4770      	bx	lr
				udd_g_ctrlreq.callback = nano_readmem_ctrl;
  4006f4:	4b10      	ldr	r3, [pc, #64]	; (400738 <nano_setup_out_received+0x84>)
				return true;
  4006f6:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = nano_readmem_ctrl;
  4006f8:	6113      	str	r3, [r2, #16]
				return true;
  4006fa:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_gpio_out_cb;
  4006fc:	4b0f      	ldr	r3, [pc, #60]	; (40073c <nano_setup_out_received+0x88>)
			return true;
  4006fe:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_gpio_out_cb;
  400700:	6113      	str	r3, [r2, #16]
			return true;
  400702:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_clk_out_cb;
  400704:	4b0e      	ldr	r3, [pc, #56]	; (400740 <nano_setup_out_received+0x8c>)
			return true;
  400706:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_clk_out_cb;
  400708:	6113      	str	r3, [r2, #16]
			return true;
  40070a:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_adcclk_out_cb;
  40070c:	4b0d      	ldr	r3, [pc, #52]	; (400744 <nano_setup_out_received+0x90>)
			return true;
  40070e:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_adcclk_out_cb;
  400710:	6113      	str	r3, [r2, #16]
			return true;
  400712:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_arm_cb;
  400714:	4b0c      	ldr	r3, [pc, #48]	; (400748 <nano_setup_out_received+0x94>)
			return true;
  400716:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_arm_cb;
  400718:	6113      	str	r3, [r2, #16]
			return true;
  40071a:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_samples_cb;
  40071c:	4b0b      	ldr	r3, [pc, #44]	; (40074c <nano_setup_out_received+0x98>)
			return true;
  40071e:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_samples_cb;
  400720:	6113      	str	r3, [r2, #16]
			return true;
  400722:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_glitch_settings;
  400724:	4b0a      	ldr	r3, [pc, #40]	; (400750 <nano_setup_out_received+0x9c>)
			return true;
  400726:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_glitch_settings;
  400728:	6113      	str	r3, [r2, #16]
			return true;
  40072a:	4770      	bx	lr
  40072c:	200196ec 	.word	0x200196ec
  400730:	004003f1 	.word	0x004003f1
  400734:	00400755 	.word	0x00400755
  400738:	00400689 	.word	0x00400689
  40073c:	00400929 	.word	0x00400929
  400740:	00400895 	.word	0x00400895
  400744:	004007d9 	.word	0x004007d9
  400748:	0040077d 	.word	0x0040077d
  40074c:	0040065d 	.word	0x0040065d
  400750:	00400795 	.word	0x00400795

00400754 <nano_readmem_bulk>:
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
  400754:	4a04      	ldr	r2, [pc, #16]	; (400768 <nano_readmem_bulk+0x14>)
	udi_vendor_bulk_in_run(
  400756:	4b05      	ldr	r3, [pc, #20]	; (40076c <nano_readmem_bulk+0x18>)
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
  400758:	6811      	ldr	r1, [r2, #0]
	udi_vendor_bulk_in_run(
  40075a:	4805      	ldr	r0, [pc, #20]	; (400770 <nano_readmem_bulk+0x1c>)
  40075c:	4299      	cmp	r1, r3
  40075e:	bf28      	it	cs
  400760:	4619      	movcs	r1, r3
  400762:	4a04      	ldr	r2, [pc, #16]	; (400774 <nano_readmem_bulk+0x20>)
  400764:	4b04      	ldr	r3, [pc, #16]	; (400778 <nano_readmem_bulk+0x24>)
  400766:	4718      	bx	r3
  400768:	200190bc 	.word	0x200190bc
  40076c:	000186a0 	.word	0x000186a0
  400770:	200007e4 	.word	0x200007e4
  400774:	00400685 	.word	0x00400685
  400778:	00402df5 	.word	0x00402df5

0040077c <ctrl_arm_cb>:
	if(udd_g_ctrlreq.req.wValue == 1){
  40077c:	4b03      	ldr	r3, [pc, #12]	; (40078c <ctrl_arm_cb+0x10>)
  40077e:	885b      	ldrh	r3, [r3, #2]
  400780:	2b01      	cmp	r3, #1
  400782:	d000      	beq.n	400786 <ctrl_arm_cb+0xa>
}
  400784:	4770      	bx	lr
		adc_capture_start();
  400786:	4b02      	ldr	r3, [pc, #8]	; (400790 <ctrl_arm_cb+0x14>)
  400788:	4718      	bx	r3
  40078a:	bf00      	nop
  40078c:	200196ec 	.word	0x200196ec
  400790:	004001e5 	.word	0x004001e5

00400794 <ctrl_glitch_settings>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  400794:	4b0a      	ldr	r3, [pc, #40]	; (4007c0 <ctrl_glitch_settings+0x2c>)
  400796:	88da      	ldrh	r2, [r3, #6]
  400798:	899b      	ldrh	r3, [r3, #12]
  40079a:	429a      	cmp	r2, r3
  40079c:	d900      	bls.n	4007a0 <ctrl_glitch_settings+0xc>
  40079e:	4770      	bx	lr
{
  4007a0:	b570      	push	{r4, r5, r6, lr}
	glitch_offset = *(CTRLBUFFER_WORDPTR);
  4007a2:	4b08      	ldr	r3, [pc, #32]	; (4007c4 <ctrl_glitch_settings+0x30>)
  4007a4:	4c08      	ldr	r4, [pc, #32]	; (4007c8 <ctrl_glitch_settings+0x34>)
  4007a6:	6819      	ldr	r1, [r3, #0]
	glitch_width = *(CTRLBUFFER_WORDPTR + 1);
  4007a8:	4d08      	ldr	r5, [pc, #32]	; (4007cc <ctrl_glitch_settings+0x38>)
  4007aa:	685a      	ldr	r2, [r3, #4]
	cwnano_glitch_init();
  4007ac:	4b08      	ldr	r3, [pc, #32]	; (4007d0 <ctrl_glitch_settings+0x3c>)
	glitch_offset = *(CTRLBUFFER_WORDPTR);
  4007ae:	6021      	str	r1, [r4, #0]
	glitch_width = *(CTRLBUFFER_WORDPTR + 1);
  4007b0:	602a      	str	r2, [r5, #0]
	cwnano_glitch_init();
  4007b2:	4798      	blx	r3
	cwnano_setup_glitch(glitch_offset, glitch_width);
  4007b4:	6829      	ldr	r1, [r5, #0]
  4007b6:	6820      	ldr	r0, [r4, #0]
  4007b8:	4b06      	ldr	r3, [pc, #24]	; (4007d4 <ctrl_glitch_settings+0x40>)
}
  4007ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cwnano_setup_glitch(glitch_offset, glitch_width);
  4007be:	4718      	bx	r3
  4007c0:	200196ec 	.word	0x200196ec
  4007c4:	200190bc 	.word	0x200190bc
  4007c8:	20018eb0 	.word	0x20018eb0
  4007cc:	20018eb4 	.word	0x20018eb4
  4007d0:	0040039d 	.word	0x0040039d
  4007d4:	004003ad 	.word	0x004003ad

004007d8 <ctrl_adcclk_out_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  4007d8:	4b25      	ldr	r3, [pc, #148]	; (400870 <ctrl_adcclk_out_cb+0x98>)
  4007da:	88d9      	ldrh	r1, [r3, #6]
  4007dc:	899a      	ldrh	r2, [r3, #12]
  4007de:	4291      	cmp	r1, r2
  4007e0:	d82d      	bhi.n	40083e <ctrl_adcclk_out_cb+0x66>
{
  4007e2:	b570      	push	{r4, r5, r6, lr}
	unsigned int pclk_out_div = udd_g_ctrlreq.payload[0];
  4007e4:	689a      	ldr	r2, [r3, #8]
	adcclk_en  = udd_g_ctrlreq.payload[4];
  4007e6:	4d23      	ldr	r5, [pc, #140]	; (400874 <ctrl_adcclk_out_cb+0x9c>)
	adcclk_src = udd_g_ctrlreq.payload[3];
  4007e8:	78d1      	ldrb	r1, [r2, #3]
	unsigned int pclk_out_div = udd_g_ctrlreq.payload[0];
  4007ea:	7813      	ldrb	r3, [r2, #0]
	adcclk_en  = udd_g_ctrlreq.payload[4];
  4007ec:	7912      	ldrb	r2, [r2, #4]
	adcclk_src = udd_g_ctrlreq.payload[3];
  4007ee:	4c22      	ldr	r4, [pc, #136]	; (400878 <ctrl_adcclk_out_cb+0xa0>)
	adcclk_en  = udd_g_ctrlreq.payload[4];
  4007f0:	602a      	str	r2, [r5, #0]
	adcclk_tout_div = pclk_out_div;
  4007f2:	4a22      	ldr	r2, [pc, #136]	; (40087c <ctrl_adcclk_out_cb+0xa4>)
	adcclk_src = udd_g_ctrlreq.payload[3];
  4007f4:	6021      	str	r1, [r4, #0]
	adcclk_tout_div = pclk_out_div;
  4007f6:	6013      	str	r3, [r2, #0]
	if(pclk_out_div){
  4007f8:	b1a3      	cbz	r3, 400824 <ctrl_adcclk_out_cb+0x4c>
		switch(pclk_out_div){
  4007fa:	3b01      	subs	r3, #1
  4007fc:	2b1f      	cmp	r3, #31
  4007fe:	d81f      	bhi.n	400840 <ctrl_adcclk_out_cb+0x68>
  400800:	e8df f003 	tbb	[pc, r3]
  400804:	301e3432 	.word	0x301e3432
  400808:	2e1e1e1e 	.word	0x2e1e1e1e
  40080c:	1e1e1e1e 	.word	0x1e1e1e1e
  400810:	2c1e1e1e 	.word	0x2c1e1e1e
  400814:	1e1e1e1e 	.word	0x1e1e1e1e
  400818:	1e1e1e1e 	.word	0x1e1e1e1e
  40081c:	1e1e1e1e 	.word	0x1e1e1e1e
  400820:	2a1e1e1e 	.word	0x2a1e1e1e
		gpio_configure_pin(PIN_PCK1, (PIO_OUTPUT_0 | PIO_DEFAULT));
  400824:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400828:	2011      	movs	r0, #17
  40082a:	4b15      	ldr	r3, [pc, #84]	; (400880 <ctrl_adcclk_out_cb+0xa8>)
  40082c:	4798      	blx	r3
	adc_set_clken(adcclk_en);
  40082e:	6828      	ldr	r0, [r5, #0]
  400830:	4b14      	ldr	r3, [pc, #80]	; (400884 <ctrl_adcclk_out_cb+0xac>)
  400832:	4798      	blx	r3
	adc_set_clksrc(adcclk_src);
  400834:	6820      	ldr	r0, [r4, #0]
  400836:	4b14      	ldr	r3, [pc, #80]	; (400888 <ctrl_adcclk_out_cb+0xb0>)
}
  400838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_set_clksrc(adcclk_src);
  40083c:	4718      	bx	r3
  40083e:	4770      	bx	lr
			case 64: pclk_out_div = PMC_PCK_PRES_CLK_64; break;
  400840:	2262      	movs	r2, #98	; 0x62

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg, uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
  400842:	4b12      	ldr	r3, [pc, #72]	; (40088c <ctrl_adcclk_out_cb+0xb4>)
	pmc_enable_pck(ul_id);
  400844:	2001      	movs	r0, #1
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
  400846:	645a      	str	r2, [r3, #68]	; 0x44
	pmc_enable_pck(ul_id);
  400848:	4b11      	ldr	r3, [pc, #68]	; (400890 <ctrl_adcclk_out_cb+0xb8>)
  40084a:	4798      	blx	r3
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
  40084c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400850:	4b0b      	ldr	r3, [pc, #44]	; (400880 <ctrl_adcclk_out_cb+0xa8>)
  400852:	2011      	movs	r0, #17
  400854:	4798      	blx	r3
  400856:	e7ea      	b.n	40082e <ctrl_adcclk_out_cb+0x56>
			case 32: pclk_out_div = PMC_PCK_PRES_CLK_32; break;
  400858:	2252      	movs	r2, #82	; 0x52
  40085a:	e7f2      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
			case 16: pclk_out_div = PMC_PCK_PRES_CLK_16; break;
  40085c:	2242      	movs	r2, #66	; 0x42
  40085e:	e7f0      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
			case 8: pclk_out_div = PMC_PCK_PRES_CLK_8; break;
  400860:	2232      	movs	r2, #50	; 0x32
  400862:	e7ee      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
			case 4: pclk_out_div = PMC_PCK_PRES_CLK_4; break;
  400864:	2222      	movs	r2, #34	; 0x22
  400866:	e7ec      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
		switch(pclk_out_div){
  400868:	2202      	movs	r2, #2
  40086a:	e7ea      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
  40086c:	2212      	movs	r2, #18
  40086e:	e7e8      	b.n	400842 <ctrl_adcclk_out_cb+0x6a>
  400870:	200196ec 	.word	0x200196ec
  400874:	20018e98 	.word	0x20018e98
  400878:	20018e9c 	.word	0x20018e9c
  40087c:	20018ea0 	.word	0x20018ea0
  400880:	00402f61 	.word	0x00402f61
  400884:	00400335 	.word	0x00400335
  400888:	0040031d 	.word	0x0040031d
  40088c:	400e0400 	.word	0x400e0400
  400890:	00402d39 	.word	0x00402d39

00400894 <ctrl_clk_out_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  400894:	4b1f      	ldr	r3, [pc, #124]	; (400914 <ctrl_clk_out_cb+0x80>)
  400896:	88d9      	ldrh	r1, [r3, #6]
  400898:	899a      	ldrh	r2, [r3, #12]
  40089a:	4291      	cmp	r1, r2
  40089c:	d81f      	bhi.n	4008de <ctrl_clk_out_cb+0x4a>
	unsigned int pclk_out_div = udd_g_ctrlreq.payload[0];
  40089e:	689b      	ldr	r3, [r3, #8]
	genclk_tout_div = pclk_out_div;
  4008a0:	4a1d      	ldr	r2, [pc, #116]	; (400918 <ctrl_clk_out_cb+0x84>)
	unsigned int pclk_out_div = udd_g_ctrlreq.payload[0];
  4008a2:	781b      	ldrb	r3, [r3, #0]
	genclk_tout_div = pclk_out_div;
  4008a4:	6013      	str	r3, [r2, #0]
	if(pclk_out_div){
  4008a6:	b1ab      	cbz	r3, 4008d4 <ctrl_clk_out_cb+0x40>
		switch(pclk_out_div){
  4008a8:	3b01      	subs	r3, #1
{
  4008aa:	b510      	push	{r4, lr}
		switch(pclk_out_div){
  4008ac:	2b1f      	cmp	r3, #31
  4008ae:	d817      	bhi.n	4008e0 <ctrl_clk_out_cb+0x4c>
  4008b0:	e8df f003 	tbb	[pc, r3]
  4008b4:	29162d2b 	.word	0x29162d2b
  4008b8:	27161616 	.word	0x27161616
  4008bc:	16161616 	.word	0x16161616
  4008c0:	25161616 	.word	0x25161616
  4008c4:	16161616 	.word	0x16161616
  4008c8:	16161616 	.word	0x16161616
  4008cc:	16161616 	.word	0x16161616
  4008d0:	23161616 	.word	0x23161616
		gpio_configure_pin(PIN_TARGET_CLKOUT, (PIO_INPUT | PIO_DEFAULT));
  4008d4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008d8:	2012      	movs	r0, #18
  4008da:	4b10      	ldr	r3, [pc, #64]	; (40091c <ctrl_clk_out_cb+0x88>)
  4008dc:	4718      	bx	r3
  4008de:	4770      	bx	lr
			case 64: pclk_out_div = PMC_PCK_PRES_CLK_64; break;
  4008e0:	2162      	movs	r1, #98	; 0x62
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
  4008e2:	4a0f      	ldr	r2, [pc, #60]	; (400920 <ctrl_clk_out_cb+0x8c>)
	pmc_enable_pck(ul_id);
  4008e4:	2002      	movs	r0, #2
  4008e6:	4b0f      	ldr	r3, [pc, #60]	; (400924 <ctrl_clk_out_cb+0x90>)
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
  4008e8:	6491      	str	r1, [r2, #72]	; 0x48
	pmc_enable_pck(ul_id);
  4008ea:	4798      	blx	r3
}
  4008ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gpio_configure_pin(PIN_TARGET_CLKOUT, PIN_TARGET_CLKOUT_FLAGS);
  4008f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008f4:	2012      	movs	r0, #18
  4008f6:	4b09      	ldr	r3, [pc, #36]	; (40091c <ctrl_clk_out_cb+0x88>)
  4008f8:	4718      	bx	r3
			case 32: pclk_out_div = PMC_PCK_PRES_CLK_32; break;
  4008fa:	2152      	movs	r1, #82	; 0x52
  4008fc:	e7f1      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
			case 16: pclk_out_div = PMC_PCK_PRES_CLK_16; break;
  4008fe:	2142      	movs	r1, #66	; 0x42
  400900:	e7ef      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
			case 8: pclk_out_div = PMC_PCK_PRES_CLK_8; break;
  400902:	2132      	movs	r1, #50	; 0x32
  400904:	e7ed      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
			case 4: pclk_out_div = PMC_PCK_PRES_CLK_4; break;
  400906:	2122      	movs	r1, #34	; 0x22
  400908:	e7eb      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
		switch(pclk_out_div){
  40090a:	2102      	movs	r1, #2
  40090c:	e7e9      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
  40090e:	2112      	movs	r1, #18
  400910:	e7e7      	b.n	4008e2 <ctrl_clk_out_cb+0x4e>
  400912:	bf00      	nop
  400914:	200196ec 	.word	0x200196ec
  400918:	20018eac 	.word	0x20018eac
  40091c:	00402f61 	.word	0x00402f61
  400920:	400e0400 	.word	0x400e0400
  400924:	00402d39 	.word	0x00402d39

00400928 <ctrl_gpio_out_cb>:
{
  400928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  40092c:	4d23      	ldr	r5, [pc, #140]	; (4009bc <ctrl_gpio_out_cb+0x94>)
  40092e:	89ab      	ldrh	r3, [r5, #12]
  400930:	88ea      	ldrh	r2, [r5, #6]
  400932:	429a      	cmp	r2, r3
  400934:	d81c      	bhi.n	400970 <ctrl_gpio_out_cb+0x48>
	if (udd_g_ctrlreq.payload_size > 0){
  400936:	b1db      	cbz	r3, 400970 <ctrl_gpio_out_cb+0x48>
  400938:	4c21      	ldr	r4, [pc, #132]	; (4009c0 <ctrl_gpio_out_cb+0x98>)
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_PERIPH_B | PIO_DEFAULT);
  40093a:	4e22      	ldr	r6, [pc, #136]	; (4009c4 <ctrl_gpio_out_cb+0x9c>)
					gpio_set_pin_high(gpio_mask_list[i].gpio_idx);
  40093c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4009c8 <ctrl_gpio_out_cb+0xa0>
					gpio_set_pin_low(gpio_mask_list[i].gpio_idx);
  400940:	4f22      	ldr	r7, [pc, #136]	; (4009cc <ctrl_gpio_out_cb+0xa4>)
  400942:	f104 0960 	add.w	r9, r4, #96	; 0x60
			if (udd_g_ctrlreq.payload[0] & gpio_mask_list[i].gpio_mask) {
  400946:	68aa      	ldr	r2, [r5, #8]
  400948:	6823      	ldr	r3, [r4, #0]
  40094a:	7812      	ldrb	r2, [r2, #0]
  40094c:	421a      	tst	r2, r3
  40094e:	d00c      	beq.n	40096a <ctrl_gpio_out_cb+0x42>
				switch(udd_g_ctrlreq.req.wValue & 0xFF) {
  400950:	78ab      	ldrb	r3, [r5, #2]
  400952:	3b01      	subs	r3, #1
  400954:	2b05      	cmp	r3, #5
  400956:	d808      	bhi.n	40096a <ctrl_gpio_out_cb+0x42>
  400958:	e8df f003 	tbb	[pc, r3]
  40095c:	141a2027 	.word	0x141a2027
  400960:	030c      	.short	0x030c
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_PERIPH_B | PIO_DEFAULT);
  400962:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400966:	6860      	ldr	r0, [r4, #4]
  400968:	47b0      	blx	r6
		for (int i = 0; i < 8; i++){
  40096a:	340c      	adds	r4, #12
  40096c:	454c      	cmp	r4, r9
  40096e:	d1ea      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
}
  400970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_PERIPH_A | PIO_DEFAULT);
  400974:	6860      	ldr	r0, [r4, #4]
  400976:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
		for (int i = 0; i < 8; i++){
  40097a:	340c      	adds	r4, #12
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_PERIPH_A | PIO_DEFAULT);
  40097c:	47b0      	blx	r6
		for (int i = 0; i < 8; i++){
  40097e:	454c      	cmp	r4, r9
  400980:	d1e1      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
  400982:	e7f5      	b.n	400970 <ctrl_gpio_out_cb+0x48>
					gpio_set_pin_high(gpio_mask_list[i].gpio_idx);
  400984:	6860      	ldr	r0, [r4, #4]
		for (int i = 0; i < 8; i++){
  400986:	340c      	adds	r4, #12
					gpio_set_pin_high(gpio_mask_list[i].gpio_idx);
  400988:	47c0      	blx	r8
		for (int i = 0; i < 8; i++){
  40098a:	454c      	cmp	r4, r9
  40098c:	d1db      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
  40098e:	e7ef      	b.n	400970 <ctrl_gpio_out_cb+0x48>
					gpio_set_pin_low(gpio_mask_list[i].gpio_idx);
  400990:	6860      	ldr	r0, [r4, #4]
		for (int i = 0; i < 8; i++){
  400992:	340c      	adds	r4, #12
					gpio_set_pin_low(gpio_mask_list[i].gpio_idx);
  400994:	47b8      	blx	r7
		for (int i = 0; i < 8; i++){
  400996:	454c      	cmp	r4, r9
  400998:	d1d5      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
  40099a:	e7e9      	b.n	400970 <ctrl_gpio_out_cb+0x48>
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, gpio_mask_list[i].gpio_input_flag);
  40099c:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
		for (int i = 0; i < 8; i++){
  4009a0:	340c      	adds	r4, #12
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, gpio_mask_list[i].gpio_input_flag);
  4009a2:	47b0      	blx	r6
		for (int i = 0; i < 8; i++){
  4009a4:	454c      	cmp	r4, r9
  4009a6:	d1ce      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
  4009a8:	e7e2      	b.n	400970 <ctrl_gpio_out_cb+0x48>
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_OUTPUT_0 | PIO_DEFAULT);
  4009aa:	6860      	ldr	r0, [r4, #4]
  4009ac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
		for (int i = 0; i < 8; i++){
  4009b0:	340c      	adds	r4, #12
					gpio_configure_pin(gpio_mask_list[i].gpio_idx, PIO_OUTPUT_0 | PIO_DEFAULT);
  4009b2:	47b0      	blx	r6
		for (int i = 0; i < 8; i++){
  4009b4:	454c      	cmp	r4, r9
  4009b6:	d1c6      	bne.n	400946 <ctrl_gpio_out_cb+0x1e>
  4009b8:	e7da      	b.n	400970 <ctrl_gpio_out_cb+0x48>
  4009ba:	bf00      	nop
  4009bc:	200196ec 	.word	0x200196ec
  4009c0:	200000cc 	.word	0x200000cc
  4009c4:	00402f61 	.word	0x00402f61
  4009c8:	00402f05 	.word	0x00402f05
  4009cc:	00402f21 	.word	0x00402f21

004009d0 <nano_setup_in_received>:

bool nano_setup_in_received(void)
{
  4009d0:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
  4009d2:	4c32      	ldr	r4, [pc, #200]	; (400a9c <nano_setup_in_received+0xcc>)
  4009d4:	88e3      	ldrh	r3, [r4, #6]
  4009d6:	2b40      	cmp	r3, #64	; 0x40
  4009d8:	d813      	bhi.n	400a02 <nano_setup_in_received+0x32>
		return false;
	}

	switch(udd_g_ctrlreq.req.bRequest){
  4009da:	7863      	ldrb	r3, [r4, #1]
  4009dc:	3b12      	subs	r3, #18
  4009de:	2b1a      	cmp	r3, #26
  4009e0:	d80f      	bhi.n	400a02 <nano_setup_in_received+0x32>
  4009e2:	e8df f003 	tbb	[pc, r3]
  4009e6:	0e51      	.short	0x0e51
  4009e8:	0e0e0e0e 	.word	0x0e0e0e0e
  4009ec:	0e0e0e0e 	.word	0x0e0e0e0e
  4009f0:	0e0e0e0e 	.word	0x0e0e0e0e
  4009f4:	0e0e0e0e 	.word	0x0e0e0e0e
  4009f8:	12100e10 	.word	0x12100e10
  4009fc:	3f39301e 	.word	0x3f39301e
  400a00:	45          	.byte	0x45
  400a01:	00          	.byte	0x00
		return false;
  400a02:	2000      	movs	r0, #0
		return true;
		break;
		
	}
	return false;
}
  400a04:	bd38      	pop	{r3, r4, r5, pc}
		return true;
  400a06:	2001      	movs	r0, #1
}
  400a08:	bd38      	pop	{r3, r4, r5, pc}
		respbuf[1] = 0;
  400a0a:	2200      	movs	r2, #0
		udd_g_ctrlreq.payload_size = 3;
  400a0c:	2103      	movs	r1, #3
		respbuf[0] = genclk_tout_div;
  400a0e:	4824      	ldr	r0, [pc, #144]	; (400aa0 <nano_setup_in_received+0xd0>)
  400a10:	4b24      	ldr	r3, [pc, #144]	; (400aa4 <nano_setup_in_received+0xd4>)
  400a12:	6800      	ldr	r0, [r0, #0]
		respbuf[1] = 0;
  400a14:	705a      	strb	r2, [r3, #1]
		respbuf[0] = genclk_tout_div;
  400a16:	7018      	strb	r0, [r3, #0]
		respbuf[2] = 0;
  400a18:	709a      	strb	r2, [r3, #2]
		return true;
  400a1a:	2001      	movs	r0, #1
		udd_g_ctrlreq.payload = respbuf;
  400a1c:	60a3      	str	r3, [r4, #8]
		udd_g_ctrlreq.payload_size = 3;
  400a1e:	81a1      	strh	r1, [r4, #12]
}
  400a20:	bd38      	pop	{r3, r4, r5, pc}
		respbuf[1] = 0;
  400a22:	2200      	movs	r2, #0
		udd_g_ctrlreq.payload_size = 5;
  400a24:	2105      	movs	r1, #5
		respbuf[3] = adcclk_src;
  400a26:	4820      	ldr	r0, [pc, #128]	; (400aa8 <nano_setup_in_received+0xd8>)
		respbuf[0] = adcclk_tout_div;
  400a28:	4b1e      	ldr	r3, [pc, #120]	; (400aa4 <nano_setup_in_received+0xd4>)
		respbuf[3] = adcclk_src;
  400a2a:	6800      	ldr	r0, [r0, #0]
		respbuf[0] = adcclk_tout_div;
  400a2c:	4d1f      	ldr	r5, [pc, #124]	; (400aac <nano_setup_in_received+0xdc>)
		respbuf[3] = adcclk_src;
  400a2e:	70d8      	strb	r0, [r3, #3]
		respbuf[4] = adcclk_en;
  400a30:	481f      	ldr	r0, [pc, #124]	; (400ab0 <nano_setup_in_received+0xe0>)
		respbuf[0] = adcclk_tout_div;
  400a32:	682d      	ldr	r5, [r5, #0]
		respbuf[4] = adcclk_en;
  400a34:	6800      	ldr	r0, [r0, #0]
		respbuf[0] = adcclk_tout_div;
  400a36:	701d      	strb	r5, [r3, #0]
		respbuf[4] = adcclk_en;
  400a38:	7118      	strb	r0, [r3, #4]
		respbuf[1] = 0;
  400a3a:	705a      	strb	r2, [r3, #1]
		respbuf[2] = 0;
  400a3c:	709a      	strb	r2, [r3, #2]
		return true;
  400a3e:	2001      	movs	r0, #1
		udd_g_ctrlreq.payload = respbuf;
  400a40:	60a3      	str	r3, [r4, #8]
		udd_g_ctrlreq.payload_size = 5;
  400a42:	81a1      	strh	r1, [r4, #12]
}
  400a44:	bd38      	pop	{r3, r4, r5, pc}
		respbuf[0] = adc_capture_done();
  400a46:	4b1b      	ldr	r3, [pc, #108]	; (400ab4 <nano_setup_in_received+0xe4>)
  400a48:	4798      	blx	r3
		udd_g_ctrlreq.payload_size = 1;
  400a4a:	2301      	movs	r3, #1
		respbuf[0] = adc_capture_done();
  400a4c:	4a15      	ldr	r2, [pc, #84]	; (400aa4 <nano_setup_in_received+0xd4>)
		udd_g_ctrlreq.payload_size = 1;
  400a4e:	81a3      	strh	r3, [r4, #12]
		respbuf[0] = adc_capture_done();
  400a50:	7010      	strb	r0, [r2, #0]
		udd_g_ctrlreq.payload = respbuf;
  400a52:	60a2      	str	r2, [r4, #8]
		return true;
  400a54:	4618      	mov	r0, r3
}
  400a56:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload_size = sizeof(capture_req_length);
  400a58:	2304      	movs	r3, #4
		udd_g_ctrlreq.payload = (uint8_t *)&capture_req_length;
  400a5a:	4a17      	ldr	r2, [pc, #92]	; (400ab8 <nano_setup_in_received+0xe8>)
		return true;
  400a5c:	2001      	movs	r0, #1
		udd_g_ctrlreq.payload = (uint8_t *)&capture_req_length;
  400a5e:	60a2      	str	r2, [r4, #8]
		udd_g_ctrlreq.payload_size = sizeof(capture_req_length);
  400a60:	81a3      	strh	r3, [r4, #12]
}
  400a62:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload_size = sizeof(max_buffer_size);
  400a64:	2304      	movs	r3, #4
		udd_g_ctrlreq.payload = (uint8_t *)&max_buffer_size;
  400a66:	4a15      	ldr	r2, [pc, #84]	; (400abc <nano_setup_in_received+0xec>)
		return true;
  400a68:	2001      	movs	r0, #1
		udd_g_ctrlreq.payload = (uint8_t *)&max_buffer_size;
  400a6a:	60a2      	str	r2, [r4, #8]
		udd_g_ctrlreq.payload_size = sizeof(max_buffer_size);
  400a6c:	81a3      	strh	r3, [r4, #12]
}
  400a6e:	bd38      	pop	{r3, r4, r5, pc}
		udd_g_ctrlreq.payload_size = 8;
  400a70:	2208      	movs	r2, #8
		*((uint32_t *)respbuf) = glitch_offset;
  400a72:	4813      	ldr	r0, [pc, #76]	; (400ac0 <nano_setup_in_received+0xf0>)
		*(((uint32_t *)respbuf)+1) = glitch_width;
  400a74:	4913      	ldr	r1, [pc, #76]	; (400ac4 <nano_setup_in_received+0xf4>)
		*((uint32_t *)respbuf) = glitch_offset;
  400a76:	4b0b      	ldr	r3, [pc, #44]	; (400aa4 <nano_setup_in_received+0xd4>)
  400a78:	6800      	ldr	r0, [r0, #0]
		*(((uint32_t *)respbuf)+1) = glitch_width;
  400a7a:	6809      	ldr	r1, [r1, #0]
		udd_g_ctrlreq.payload = respbuf;
  400a7c:	60a3      	str	r3, [r4, #8]
		*(((uint32_t *)respbuf)+1) = glitch_width;
  400a7e:	e9c3 0100 	strd	r0, r1, [r3]
		udd_g_ctrlreq.payload_size = 8;
  400a82:	81a2      	strh	r2, [r4, #12]
		return true;
  400a84:	2001      	movs	r0, #1
}
  400a86:	bd38      	pop	{r3, r4, r5, pc}
		ctrlmemread_size = 0;
  400a88:	2200      	movs	r2, #0
		udd_g_ctrlreq.payload_size = ctrlmemread_size;
  400a8a:	4b0f      	ldr	r3, [pc, #60]	; (400ac8 <nano_setup_in_received+0xf8>)
		udd_g_ctrlreq.payload = ctrlmemread_buf;
  400a8c:	490f      	ldr	r1, [pc, #60]	; (400acc <nano_setup_in_received+0xfc>)
		udd_g_ctrlreq.payload_size = ctrlmemread_size;
  400a8e:	6818      	ldr	r0, [r3, #0]
		udd_g_ctrlreq.payload = ctrlmemread_buf;
  400a90:	6809      	ldr	r1, [r1, #0]
		ctrlmemread_size = 0;
  400a92:	601a      	str	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = ctrlmemread_size;
  400a94:	81a0      	strh	r0, [r4, #12]
		udd_g_ctrlreq.payload = ctrlmemread_buf;
  400a96:	60a1      	str	r1, [r4, #8]
		return true;
  400a98:	2001      	movs	r0, #1
}
  400a9a:	bd38      	pop	{r3, r4, r5, pc}
  400a9c:	200196ec 	.word	0x200196ec
  400aa0:	20018eac 	.word	0x20018eac
  400aa4:	20019580 	.word	0x20019580
  400aa8:	20018e9c 	.word	0x20018e9c
  400aac:	20018ea0 	.word	0x20018ea0
  400ab0:	20018e98 	.word	0x20018e98
  400ab4:	00400311 	.word	0x00400311
  400ab8:	200000a4 	.word	0x200000a4
  400abc:	2000012c 	.word	0x2000012c
  400ac0:	20018eb0 	.word	0x20018eb0
  400ac4:	20018eb4 	.word	0x20018eb4
  400ac8:	20018ea8 	.word	0x20018ea8
  400acc:	20018ea4 	.word	0x20018ea4

00400ad0 <main_vendor_bulk_out_received>:
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
		// Transfer aborted
		
		//restart
		udi_vendor_bulk_out_run(
  400ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400ad4:	4a01      	ldr	r2, [pc, #4]	; (400adc <main_vendor_bulk_out_received+0xc>)
  400ad6:	4802      	ldr	r0, [pc, #8]	; (400ae0 <main_vendor_bulk_out_received+0x10>)
  400ad8:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <main_vendor_bulk_out_received+0x14>)
  400ada:	4718      	bx	r3
  400adc:	00400ad1 	.word	0x00400ad1
  400ae0:	200190fc 	.word	0x200190fc
  400ae4:	00402e15 	.word	0x00402e15

00400ae8 <init_gpio_as_input>:
{
  400ae8:	b570      	push	{r4, r5, r6, lr}
  400aea:	4c09      	ldr	r4, [pc, #36]	; (400b10 <init_gpio_as_input+0x28>)
			gpio_configure_pin(gpio_mask_list[i].gpio_idx, gpio_mask_list[i].gpio_input_flag);
  400aec:	4e09      	ldr	r6, [pc, #36]	; (400b14 <init_gpio_as_input+0x2c>)
  400aee:	f104 0560 	add.w	r5, r4, #96	; 0x60
  400af2:	e002      	b.n	400afa <init_gpio_as_input+0x12>
	for (unsigned int i = 0; i < NUM_GPIO_PINS; i++){
  400af4:	340c      	adds	r4, #12
  400af6:	42ac      	cmp	r4, r5
  400af8:	d008      	beq.n	400b0c <init_gpio_as_input+0x24>
		if (gpio_mask_list[i].gpio_mask) {
  400afa:	6823      	ldr	r3, [r4, #0]
  400afc:	2b00      	cmp	r3, #0
  400afe:	d0f9      	beq.n	400af4 <init_gpio_as_input+0xc>
			gpio_configure_pin(gpio_mask_list[i].gpio_idx, gpio_mask_list[i].gpio_input_flag);
  400b00:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
	for (unsigned int i = 0; i < NUM_GPIO_PINS; i++){
  400b04:	340c      	adds	r4, #12
			gpio_configure_pin(gpio_mask_list[i].gpio_idx, gpio_mask_list[i].gpio_input_flag);
  400b06:	47b0      	blx	r6
	for (unsigned int i = 0; i < NUM_GPIO_PINS; i++){
  400b08:	42ac      	cmp	r4, r5
  400b0a:	d1f6      	bne.n	400afa <init_gpio_as_input+0x12>
}
  400b0c:	bd70      	pop	{r4, r5, r6, pc}
  400b0e:	bf00      	nop
  400b10:	200000cc 	.word	0x200000cc
  400b14:	00402f61 	.word	0x00402f61

00400b18 <nano_register_handlers>:
{
  400b18:	b510      	push	{r4, lr}
	naeusb_add_in_handler(nano_setup_in_received);
  400b1a:	4b04      	ldr	r3, [pc, #16]	; (400b2c <nano_register_handlers+0x14>)
  400b1c:	4804      	ldr	r0, [pc, #16]	; (400b30 <nano_register_handlers+0x18>)
  400b1e:	4798      	blx	r3
}
  400b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	naeusb_add_out_handler(nano_setup_out_received);
  400b24:	4803      	ldr	r0, [pc, #12]	; (400b34 <nano_register_handlers+0x1c>)
  400b26:	4b04      	ldr	r3, [pc, #16]	; (400b38 <nano_register_handlers+0x20>)
  400b28:	4718      	bx	r3
  400b2a:	bf00      	nop
  400b2c:	00401db5 	.word	0x00401db5
  400b30:	004009d1 	.word	0x004009d1
  400b34:	004006b5 	.word	0x004006b5
  400b38:	00401ddd 	.word	0x00401ddd

00400b3c <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
  400b3c:	2300      	movs	r3, #0
  400b3e:	6043      	str	r3, [r0, #4]
  400b40:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
  400b42:	6083      	str	r3, [r0, #8]
}
  400b44:	4770      	bx	lr
  400b46:	bf00      	nop

00400b48 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
  400b48:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
  400b4a:	6804      	ldr	r4, [r0, #0]
    newhead++;
  400b4c:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
  400b4e:	2cc8      	cmp	r4, #200	; 0xc8
  400b50:	bf28      	it	cs
  400b52:	2400      	movcs	r4, #0
  400b54:	e000      	b.n	400b58 <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
  400b56:	b142      	cbz	r2, 400b6a <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
  400b58:	6843      	ldr	r3, [r0, #4]
  400b5a:	42a3      	cmp	r3, r4
  400b5c:	d0fb      	beq.n	400b56 <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
  400b5e:	6803      	ldr	r3, [r0, #0]
  400b60:	4403      	add	r3, r0
  400b62:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
  400b64:	6004      	str	r4, [r0, #0]
}
  400b66:	bc10      	pop	{r4}
  400b68:	4770      	bx	lr
            cbuf->dropped++;
  400b6a:	6883      	ldr	r3, [r0, #8]
}
  400b6c:	bc10      	pop	{r4}
            cbuf->dropped++;
  400b6e:	3301      	adds	r3, #1
  400b70:	6083      	str	r3, [r0, #8]
}
  400b72:	4770      	bx	lr

00400b74 <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
  400b74:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
  400b76:	6801      	ldr	r1, [r0, #0]
{
  400b78:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
  400b7a:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
  400b7c:	4418      	add	r0, r3
  400b7e:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
  400b80:	d005      	beq.n	400b8e <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
  400b82:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
  400b84:	2bc8      	cmp	r3, #200	; 0xc8
  400b86:	bf28      	it	cs
  400b88:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
  400b8a:	6053      	str	r3, [r2, #4]

    return retval;
  400b8c:	4770      	bx	lr
        return SERIAL_ERR;
  400b8e:	20ff      	movs	r0, #255	; 0xff
}
  400b90:	4770      	bx	lr
  400b92:	bf00      	nop

00400b94 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
  400b94:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
  400b96:	6840      	ldr	r0, [r0, #4]
}
  400b98:	1ac0      	subs	r0, r0, r3
  400b9a:	bf18      	it	ne
  400b9c:	2001      	movne	r0, #1
  400b9e:	4770      	bx	lr

00400ba0 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
  400ba0:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
  400ba2:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
  400ba4:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
  400ba6:	bf48      	it	mi
  400ba8:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
  400baa:	4770      	bx	lr

00400bac <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
  400bac:	4b04      	ldr	r3, [pc, #16]	; (400bc0 <naeusb_setup_out_received+0x14>)
  400bae:	785a      	ldrb	r2, [r3, #1]
  400bb0:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
  400bb2:	bf03      	ittte	eq
  400bb4:	4a03      	ldreq	r2, [pc, #12]	; (400bc4 <naeusb_setup_out_received+0x18>)
            return true;
  400bb6:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
  400bb8:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
  400bba:	2000      	movne	r0, #0
}
  400bbc:	4770      	bx	lr
  400bbe:	bf00      	nop
  400bc0:	200196ec 	.word	0x200196ec
  400bc4:	00400bc9 	.word	0x00400bc9

00400bc8 <naeusb_sam_cfg_out>:
{
  400bc8:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
  400bca:	4b20      	ldr	r3, [pc, #128]	; (400c4c <naeusb_sam_cfg_out+0x84>)
  400bcc:	789b      	ldrb	r3, [r3, #2]
  400bce:	3b01      	subs	r3, #1
  400bd0:	2b0f      	cmp	r3, #15
  400bd2:	d809      	bhi.n	400be8 <naeusb_sam_cfg_out+0x20>
  400bd4:	e8df f003 	tbb	[pc, r3]
  400bd8:	0816282d 	.word	0x0816282d
  400bdc:	08080808 	.word	0x08080808
  400be0:	08080808 	.word	0x08080808
  400be4:	09080808 	.word	0x09080808
}
  400be8:	bd10      	pop	{r4, pc}
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
  400bea:	4b19      	ldr	r3, [pc, #100]	; (400c50 <naeusb_sam_cfg_out+0x88>)
  400bec:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
  400bee:	4a19      	ldr	r2, [pc, #100]	; (400c54 <naeusb_sam_cfg_out+0x8c>)
  400bf0:	6853      	ldr	r3, [r2, #4]
  400bf2:	039b      	lsls	r3, r3, #14
  400bf4:	d4fc      	bmi.n	400bf0 <naeusb_sam_cfg_out+0x28>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
  400bf6:	6813      	ldr	r3, [r2, #0]
  400bf8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400bfc:	f043 0305 	orr.w	r3, r3, #5
  400c00:	6013      	str	r3, [r2, #0]
        while(1);
  400c02:	e7fe      	b.n	400c02 <naeusb_sam_cfg_out+0x3a>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
  400c04:	2201      	movs	r2, #1
  400c06:	210c      	movs	r1, #12
  400c08:	4b13      	ldr	r3, [pc, #76]	; (400c58 <naeusb_sam_cfg_out+0x90>)
  400c0a:	4814      	ldr	r0, [pc, #80]	; (400c5c <naeusb_sam_cfg_out+0x94>)
  400c0c:	4798      	blx	r3
  400c0e:	4b10      	ldr	r3, [pc, #64]	; (400c50 <naeusb_sam_cfg_out+0x88>)
  400c10:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
  400c12:	4a10      	ldr	r2, [pc, #64]	; (400c54 <naeusb_sam_cfg_out+0x8c>)
  400c14:	6853      	ldr	r3, [r2, #4]
  400c16:	0399      	lsls	r1, r3, #14
  400c18:	d4fc      	bmi.n	400c14 <naeusb_sam_cfg_out+0x4c>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
  400c1a:	6813      	ldr	r3, [r2, #0]
  400c1c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400c20:	f043 0305 	orr.w	r3, r3, #5
  400c24:	6013      	str	r3, [r2, #0]
        while(1);
  400c26:	e7fe      	b.n	400c26 <naeusb_sam_cfg_out+0x5e>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c28:	2010      	movs	r0, #16
}
  400c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400c2e:	4b0c      	ldr	r3, [pc, #48]	; (400c60 <naeusb_sam_cfg_out+0x98>)
  400c30:	4718      	bx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c32:	213e      	movs	r1, #62	; 0x3e
  400c34:	2000      	movs	r0, #0
  400c36:	4b0b      	ldr	r3, [pc, #44]	; (400c64 <naeusb_sam_cfg_out+0x9c>)
  400c38:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400c3a:	4c0b      	ldr	r4, [pc, #44]	; (400c68 <naeusb_sam_cfg_out+0xa0>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c3c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c3e:	2800      	cmp	r0, #0
  400c40:	d0fc      	beq.n	400c3c <naeusb_sam_cfg_out+0x74>
}
  400c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
  400c46:	2010      	movs	r0, #16
  400c48:	4b08      	ldr	r3, [pc, #32]	; (400c6c <naeusb_sam_cfg_out+0xa4>)
  400c4a:	4718      	bx	r3
  400c4c:	200196ec 	.word	0x200196ec
  400c50:	00404169 	.word	0x00404169
  400c54:	400e1400 	.word	0x400e1400
  400c58:	00402e51 	.word	0x00402e51
  400c5c:	400e0a00 	.word	0x400e0a00
  400c60:	00402bb9 	.word	0x00402bb9
  400c64:	00402c15 	.word	0x00402c15
  400c68:	00402c65 	.word	0x00402c65
  400c6c:	00402b5d 	.word	0x00402b5d

00400c70 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
  400c70:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
  400c72:	4c15      	ldr	r4, [pc, #84]	; (400cc8 <naeusb_setup_in_received+0x58>)
  400c74:	7863      	ldrb	r3, [r4, #1]
  400c76:	2b17      	cmp	r3, #23
  400c78:	d01b      	beq.n	400cb2 <naeusb_setup_in_received+0x42>
  400c7a:	2b40      	cmp	r3, #64	; 0x40
  400c7c:	d117      	bne.n	400cae <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
  400c7e:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
  400c82:	4d12      	ldr	r5, [pc, #72]	; (400ccc <naeusb_setup_in_received+0x5c>)
  400c84:	4b12      	ldr	r3, [pc, #72]	; (400cd0 <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
  400c86:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
  400c88:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
  400c8c:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
  400c90:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
  400c94:	4b0f      	ldr	r3, [pc, #60]	; (400cd4 <naeusb_setup_in_received+0x64>)
  400c96:	4910      	ldr	r1, [pc, #64]	; (400cd8 <naeusb_setup_in_received+0x68>)
  400c98:	f105 0009 	add.w	r0, r5, #9
  400c9c:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
  400c9e:	4628      	mov	r0, r5
  400ca0:	4b0e      	ldr	r3, [pc, #56]	; (400cdc <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
  400ca2:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
  400ca4:	4798      	blx	r3
  400ca6:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
  400ca8:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
  400caa:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
  400cac:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
  400cae:	2000      	movs	r0, #0
}
  400cb0:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
  400cb2:	f44f 5578 	mov.w	r5, #15872	; 0x3e00
    respbuf[2] = FW_VER_DEBUG;
  400cb6:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
  400cb8:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
  400cba:	4b04      	ldr	r3, [pc, #16]	; (400ccc <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
  400cbc:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
  400cbe:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
  400cc0:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
  400cc2:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
  400cc4:	81a2      	strh	r2, [r4, #12]
}
  400cc6:	bd38      	pop	{r3, r4, r5, pc}
  400cc8:	200196ec 	.word	0x200196ec
  400ccc:	20019580 	.word	0x20019580
  400cd0:	00405998 	.word	0x00405998
  400cd4:	004050c9 	.word	0x004050c9
  400cd8:	0040598c 	.word	0x0040598c
  400cdc:	004050b9 	.word	0x004050b9

00400ce0 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
  400ce0:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
  400ce2:	4b04      	ldr	r3, [pc, #16]	; (400cf4 <naeusb_register_handlers+0x14>)
  400ce4:	4804      	ldr	r0, [pc, #16]	; (400cf8 <naeusb_register_handlers+0x18>)
  400ce6:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
  400ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
  400cec:	4803      	ldr	r0, [pc, #12]	; (400cfc <naeusb_register_handlers+0x1c>)
  400cee:	4b04      	ldr	r3, [pc, #16]	; (400d00 <naeusb_register_handlers+0x20>)
  400cf0:	4718      	bx	r3
  400cf2:	bf00      	nop
  400cf4:	00401db5 	.word	0x00401db5
  400cf8:	00400c71 	.word	0x00400c71
  400cfc:	00400bad 	.word	0x00400bad
  400d00:	00401ddd 	.word	0x00401ddd

00400d04 <mpsse_setup_in_received>:
}

/* Handle ctrl transfer on interface 1/2. Mostly used for debug purposes */
bool mpsse_setup_in_received(void)
{
    if (udd_g_ctrlreq.req.bRequest == REQ_SAM_STATUS) {
  400d04:	4b39      	ldr	r3, [pc, #228]	; (400dec <mpsse_setup_in_received+0xe8>)
  400d06:	785a      	ldrb	r2, [r3, #1]
  400d08:	2a22      	cmp	r2, #34	; 0x22
  400d0a:	d015      	beq.n	400d38 <mpsse_setup_in_received+0x34>
            udd_g_ctrlreq.payload_size = 1;
            return true;
        }
    }
    // don't handle if not sent to our interface
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
  400d0c:	8898      	ldrh	r0, [r3, #4]
  400d0e:	2801      	cmp	r0, #1
  400d10:	d110      	bne.n	400d34 <mpsse_setup_in_received+0x30>
        return false;
    }

    // For debug, reads a bunch of internal variables back. TODO: change to using a separate buf
    if (udd_g_ctrlreq.req.bRequest == 0xA0) {
  400d12:	2aa0      	cmp	r2, #160	; 0xa0
  400d14:	d025      	beq.n	400d62 <mpsse_setup_in_received+0x5e>
        return true;
    }

    // Debug commands for reading from internal buffers
    uint16_t wValue = udd_g_ctrlreq.req.wValue;
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
  400d16:	2aa1      	cmp	r2, #161	; 0xa1
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
  400d18:	8859      	ldrh	r1, [r3, #2]
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
  400d1a:	d017      	beq.n	400d4c <mpsse_setup_in_received+0x48>
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
  400d1c:	2aa2      	cmp	r2, #162	; 0xa2
  400d1e:	d11f      	bne.n	400d60 <mpsse_setup_in_received+0x5c>
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
  400d20:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
  400d24:	4a32      	ldr	r2, [pc, #200]	; (400df0 <mpsse_setup_in_received+0xec>)
        udd_g_ctrlreq.payload_size = 256;
  400d26:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
  400d2a:	440a      	add	r2, r1
        addr &= ~(0b11);
  400d2c:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
  400d30:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 256;
  400d32:	4770      	bx	lr
        return false;
  400d34:	2000      	movs	r0, #0
  400d36:	4770      	bx	lr
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
  400d38:	789a      	ldrb	r2, [r3, #2]
  400d3a:	2a42      	cmp	r2, #66	; 0x42
  400d3c:	d04c      	beq.n	400dd8 <mpsse_setup_in_received+0xd4>
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
  400d3e:	8898      	ldrh	r0, [r3, #4]
  400d40:	f1a0 0001 	sub.w	r0, r0, #1
  400d44:	fab0 f080 	clz	r0, r0
  400d48:	0940      	lsrs	r0, r0, #5
  400d4a:	4770      	bx	lr
        udd_g_ctrlreq.payload_size = 256;
  400d4c:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
  400d50:	4a28      	ldr	r2, [pc, #160]	; (400df4 <mpsse_setup_in_received+0xf0>)
        udd_g_ctrlreq.payload_size = 256;
  400d52:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
  400d56:	440a      	add	r2, r1
        addr &= ~(0b11);
  400d58:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
  400d5c:	609a      	str	r2, [r3, #8]
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
  400d5e:	4770      	bx	lr
    }
    return true;
}
  400d60:	4770      	bx	lr
{
  400d62:	b500      	push	{lr}
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
  400d64:	4924      	ldr	r1, [pc, #144]	; (400df8 <mpsse_setup_in_received+0xf4>)
  400d66:	4a23      	ldr	r2, [pc, #140]	; (400df4 <mpsse_setup_in_received+0xf0>)
  400d68:	f891 e000 	ldrb.w	lr, [r1]
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
  400d6c:	f9b1 c001 	ldrsh.w	ip, [r1, #1]
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
  400d70:	f882 e000 	strb.w	lr, [r2]
        udd_g_ctrlreq.payload_size = 11;
  400d74:	f04f 0e0b 	mov.w	lr, #11
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
  400d78:	fa5f fc8c 	uxtb.w	ip, ip
  400d7c:	f882 c001 	strb.w	ip, [r2, #1]
        MPSSE_RX_BUFFER[2] = mpsse_state.tx_bytes & 0xFF;
  400d80:	f9b1 c003 	ldrsh.w	ip, [r1, #3]
  400d84:	fa5f fc8c 	uxtb.w	ip, ip
  400d88:	f882 c002 	strb.w	ip, [r2, #2]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
  400d8c:	f9b1 c005 	ldrsh.w	ip, [r1, #5]
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
  400d90:	609a      	str	r2, [r3, #8]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
  400d92:	fa5f fc8c 	uxtb.w	ip, ip
  400d96:	f882 c003 	strb.w	ip, [r2, #3]
        MPSSE_RX_BUFFER[4] = mpsse_state.txn_len & 0xFF;
  400d9a:	f9b1 c007 	ldrsh.w	ip, [r1, #7]
  400d9e:	fa5f fc8c 	uxtb.w	ip, ip
  400da2:	f882 c004 	strb.w	ip, [r2, #4]
        MPSSE_RX_BUFFER[5] = mpsse_state.txn_lock;
  400da6:	f891 c00a 	ldrb.w	ip, [r1, #10]
  400daa:	f882 c005 	strb.w	ip, [r2, #5]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
  400dae:	f8d1 c00b 	ldr.w	ip, [r1, #11]
        udd_g_ctrlreq.payload_size = 11;
  400db2:	f8a3 e00c 	strh.w	lr, [r3, #12]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
  400db6:	fa5f f38c 	uxtb.w	r3, ip
  400dba:	7193      	strb	r3, [r2, #6]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
  400dbc:	7a49      	ldrb	r1, [r1, #9]
        MPSSE_RX_BUFFER[7] = (mpsse_state.n_processed_cmds >> 8) & 0xFF;
  400dbe:	f3cc 2307 	ubfx	r3, ip, #8, #8
  400dc2:	71d3      	strb	r3, [r2, #7]
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
  400dc4:	f3cc 4307 	ubfx	r3, ip, #16, #8
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
  400dc8:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
  400dcc:	7213      	strb	r3, [r2, #8]
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
  400dce:	f882 c009 	strb.w	ip, [r2, #9]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
  400dd2:	7291      	strb	r1, [r2, #10]
}
  400dd4:	f85d fb04 	ldr.w	pc, [sp], #4
            udd_g_ctrlreq.payload_size = 1;
  400dd8:	2201      	movs	r2, #1
            respbuf[0] = mpsse_state.enabled;
  400dda:	4807      	ldr	r0, [pc, #28]	; (400df8 <mpsse_setup_in_received+0xf4>)
  400ddc:	4907      	ldr	r1, [pc, #28]	; (400dfc <mpsse_setup_in_received+0xf8>)
  400dde:	7c80      	ldrb	r0, [r0, #18]
            udd_g_ctrlreq.payload = respbuf;
  400de0:	6099      	str	r1, [r3, #8]
            respbuf[0] = mpsse_state.enabled;
  400de2:	7008      	strb	r0, [r1, #0]
            udd_g_ctrlreq.payload_size = 1;
  400de4:	819a      	strh	r2, [r3, #12]
            return true;
  400de6:	4610      	mov	r0, r2
  400de8:	4770      	bx	lr
  400dea:	bf00      	nop
  400dec:	200196ec 	.word	0x200196ec
  400df0:	2001c898 	.word	0x2001c898
  400df4:	2001c858 	.word	0x2001c858
  400df8:	20000130 	.word	0x20000130
  400dfc:	20019580 	.word	0x20019580

00400e00 <mpsse_setup_out_received>:
{
  400e00:	b570      	push	{r4, r5, r6, lr}
    uint8_t wValue = udd_g_ctrlreq.req.wValue & 0xFF;
  400e02:	4a2c      	ldr	r2, [pc, #176]	; (400eb4 <mpsse_setup_out_received+0xb4>)
{
  400e04:	b082      	sub	sp, #8
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
  400e06:	7893      	ldrb	r3, [r2, #2]
  400e08:	2b42      	cmp	r3, #66	; 0x42
  400e0a:	d00c      	beq.n	400e26 <mpsse_setup_out_received+0x26>
    if ((udd_g_ctrlreq.req.wIndex != 0x01) && (udd_g_ctrlreq.req.wIndex != 0x02)) {
  400e0c:	8893      	ldrh	r3, [r2, #4]
  400e0e:	3b01      	subs	r3, #1
  400e10:	b29b      	uxth	r3, r3
  400e12:	2b01      	cmp	r3, #1
  400e14:	d804      	bhi.n	400e20 <mpsse_setup_out_received+0x20>
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
  400e16:	7855      	ldrb	r5, [r2, #1]
  400e18:	b1a5      	cbz	r5, 400e44 <mpsse_setup_out_received+0x44>
    return true;
  400e1a:	2001      	movs	r0, #1
}
  400e1c:	b002      	add	sp, #8
  400e1e:	bd70      	pop	{r4, r5, r6, pc}
        return false;
  400e20:	2000      	movs	r0, #0
}
  400e22:	b002      	add	sp, #8
  400e24:	bd70      	pop	{r4, r5, r6, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
  400e26:	7853      	ldrb	r3, [r2, #1]
  400e28:	2b22      	cmp	r3, #34	; 0x22
  400e2a:	d1ef      	bne.n	400e0c <mpsse_setup_out_received+0xc>
        mpsse_state.enabled = 1;
  400e2c:	2401      	movs	r4, #1
        udc_stop();
  400e2e:	4b22      	ldr	r3, [pc, #136]	; (400eb8 <mpsse_setup_out_received+0xb8>)
  400e30:	4798      	blx	r3
        switch_configurations(); 
  400e32:	4b22      	ldr	r3, [pc, #136]	; (400ebc <mpsse_setup_out_received+0xbc>)
  400e34:	4798      	blx	r3
        mpsse_state.enabled = 1;
  400e36:	4b22      	ldr	r3, [pc, #136]	; (400ec0 <mpsse_setup_out_received+0xc0>)
        udc_start();
  400e38:	4a22      	ldr	r2, [pc, #136]	; (400ec4 <mpsse_setup_out_received+0xc4>)
        mpsse_state.enabled = 1;
  400e3a:	749c      	strb	r4, [r3, #18]
        mpsse_state.txn_lock = 1;
  400e3c:	729c      	strb	r4, [r3, #10]
        udc_start();
  400e3e:	4790      	blx	r2
        return true;
  400e40:	4620      	mov	r0, r4
  400e42:	e7eb      	b.n	400e1c <mpsse_setup_out_received+0x1c>
        memset(MPSSE_RX_BUFFER, 0, sizeof(MPSSE_RX_BUFFER));
  400e44:	4c20      	ldr	r4, [pc, #128]	; (400ec8 <mpsse_setup_out_received+0xc8>)
  400e46:	4629      	mov	r1, r5
  400e48:	2240      	movs	r2, #64	; 0x40
  400e4a:	4820      	ldr	r0, [pc, #128]	; (400ecc <mpsse_setup_out_received+0xcc>)
  400e4c:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER, 0, sizeof(MPSSE_TX_BUFFER_BAK));
  400e4e:	4629      	mov	r1, r5
  400e50:	2240      	movs	r2, #64	; 0x40
  400e52:	481f      	ldr	r0, [pc, #124]	; (400ed0 <mpsse_setup_out_received+0xd0>)
  400e54:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER_BAK, 0, sizeof(MPSSE_TX_BUFFER_BAK));
  400e56:	2240      	movs	r2, #64	; 0x40
  400e58:	4629      	mov	r1, r5
  400e5a:	481e      	ldr	r0, [pc, #120]	; (400ed4 <mpsse_setup_out_received+0xd4>)
  400e5c:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
  400e5e:	4c1e      	ldr	r4, [pc, #120]	; (400ed8 <mpsse_setup_out_received+0xd8>)
  400e60:	2007      	movs	r0, #7
  400e62:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_IN);
  400e64:	2086      	movs	r0, #134	; 0x86
  400e66:	47a0      	blx	r4
        mpsse_state.enabled = 1;
  400e68:	2401      	movs	r4, #1
        gpio_configure_pin(MPSSE_DIN_GPIO, PIO_DEFAULT | PIO_TYPE_PIO_INPUT);
  400e6a:	4e1c      	ldr	r6, [pc, #112]	; (400edc <mpsse_setup_out_received+0xdc>)
  400e6c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400e70:	200c      	movs	r0, #12
  400e72:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_DOUT_GPIO, PIO_OUTPUT_0);
  400e74:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400e78:	200d      	movs	r0, #13
  400e7a:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_SCK_GPIO, PIO_OUTPUT_0);
  400e7c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400e80:	200e      	movs	r0, #14
  400e82:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_TMS_GPIO, PIO_OUTPUT_0);
  400e84:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400e88:	200b      	movs	r0, #11
  400e8a:	47b0      	blx	r6
        mpsse_state.enabled = 1;
  400e8c:	4a0c      	ldr	r2, [pc, #48]	; (400ec0 <mpsse_setup_out_received+0xc0>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
  400e8e:	4914      	ldr	r1, [pc, #80]	; (400ee0 <mpsse_setup_out_received+0xe0>)
  400e90:	2340      	movs	r3, #64	; 0x40
  400e92:	9100      	str	r1, [sp, #0]
  400e94:	2007      	movs	r0, #7
  400e96:	4629      	mov	r1, r5
        mpsse_state.n_processed_cmds = 0;
  400e98:	72d5      	strb	r5, [r2, #11]
  400e9a:	7315      	strb	r5, [r2, #12]
  400e9c:	7355      	strb	r5, [r2, #13]
  400e9e:	7395      	strb	r5, [r2, #14]
        mpsse_state.swd_mode = 0;
  400ea0:	7415      	strb	r5, [r2, #16]
        mpsse_state.enabled = 1;
  400ea2:	7494      	strb	r4, [r2, #18]
        mpsse_state.txn_lock = 1;
  400ea4:	7294      	strb	r4, [r2, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
  400ea6:	4d0f      	ldr	r5, [pc, #60]	; (400ee4 <mpsse_setup_out_received+0xe4>)
  400ea8:	4a09      	ldr	r2, [pc, #36]	; (400ed0 <mpsse_setup_out_received+0xd0>)
  400eaa:	47a8      	blx	r5
  400eac:	4620      	mov	r0, r4
}
  400eae:	b002      	add	sp, #8
  400eb0:	bd70      	pop	{r4, r5, r6, pc}
  400eb2:	bf00      	nop
  400eb4:	200196ec 	.word	0x200196ec
  400eb8:	00402065 	.word	0x00402065
  400ebc:	00402e35 	.word	0x00402e35
  400ec0:	20000130 	.word	0x20000130
  400ec4:	0040205d 	.word	0x0040205d
  400ec8:	00405069 	.word	0x00405069
  400ecc:	2001c858 	.word	0x2001c858
  400ed0:	2001c898 	.word	0x2001c898
  400ed4:	2001c8e8 	.word	0x2001c8e8
  400ed8:	00404649 	.word	0x00404649
  400edc:	00402f61 	.word	0x00402f61
  400ee0:	00400ee9 	.word	0x00400ee9
  400ee4:	00404505 	.word	0x00404505

00400ee8 <mpsse_vendor_bulk_out_received>:
}


void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
  400ee8:	b570      	push	{r4, r5, r6, lr}
    // we just receive stuff here, then handle in main()
    if (UDD_EP_TRANSFER_OK != status) {
        // restart
        if (mpsse_state.tx_req) {
  400eea:	4c25      	ldr	r4, [pc, #148]	; (400f80 <mpsse_vendor_bulk_out_received+0x98>)
{
  400eec:	b082      	sub	sp, #8
        if (mpsse_state.tx_req) {
  400eee:	7be3      	ldrb	r3, [r4, #15]
    if (UDD_EP_TRANSFER_OK != status) {
  400ef0:	bb38      	cbnz	r0, 400f42 <mpsse_vendor_bulk_out_received+0x5a>
            sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        mpsse_state.txn_lock = 1;
        return;
    }

    if (mpsse_state.tx_req) {
  400ef2:	b1eb      	cbz	r3, 400f30 <mpsse_vendor_bulk_out_received+0x48>
        // we read into the backup buffer, move the data over to the usual one
        // extra room in the normal buffer so we always read the same amount

        // reading unususal sizes breaks USB, so don't change this
        for (uint16_t i = 0; i < nb_transfered; i++) {
  400ef4:	2900      	cmp	r1, #0
  400ef6:	d039      	beq.n	400f6c <mpsse_vendor_bulk_out_received+0x84>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  400ef8:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
  400efc:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
  400f00:	4d20      	ldr	r5, [pc, #128]	; (400f84 <mpsse_vendor_bulk_out_received+0x9c>)
  400f02:	ebac 0c03 	sub.w	ip, ip, r3
  400f06:	fa1f fe8c 	uxth.w	lr, ip
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
  400f0a:	fa0f fc8c 	sxth.w	ip, ip
  400f0e:	182b      	adds	r3, r5, r0
  400f10:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
  400f14:	eb00 030c 	add.w	r3, r0, ip
        for (uint16_t i = 0; i < nb_transfered; i++) {
  400f18:	3001      	adds	r0, #1
  400f1a:	b280      	uxth	r0, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
  400f1c:	b2d2      	uxtb	r2, r2
  400f1e:	442b      	add	r3, r5
        for (uint16_t i = 0; i < nb_transfered; i++) {
  400f20:	4281      	cmp	r1, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
  400f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        for (uint16_t i = 0; i < nb_transfered; i++) {
  400f26:	d8f2      	bhi.n	400f0e <mpsse_vendor_bulk_out_received+0x26>
        }
        mpsse_state.tx_bytes = mpsse_tx_buffer_remaining() + nb_transfered;
  400f28:	4471      	add	r1, lr
  400f2a:	f8a4 1003 	strh.w	r1, [r4, #3]
  400f2e:	e001      	b.n	400f34 <mpsse_vendor_bulk_out_received+0x4c>
    } else {
        mpsse_state.tx_bytes = nb_transfered;
  400f30:	f8a4 1003 	strh.w	r1, [r4, #3]
    }
    mpsse_state.tx_req = 0;
  400f34:	2300      	movs	r3, #0
  400f36:	73e3      	strb	r3, [r4, #15]
    mpsse_state.tx_idx = 0;
  400f38:	7063      	strb	r3, [r4, #1]
  400f3a:	70a3      	strb	r3, [r4, #2]
    mpsse_state.txn_lock = 0;
  400f3c:	72a3      	strb	r3, [r4, #10]
}
  400f3e:	b002      	add	sp, #8
  400f40:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
  400f42:	4e11      	ldr	r6, [pc, #68]	; (400f88 <mpsse_vendor_bulk_out_received+0xa0>)
        if (mpsse_state.tx_req) {
  400f44:	b953      	cbnz	r3, 400f5c <mpsse_vendor_bulk_out_received+0x74>
  400f46:	4d11      	ldr	r5, [pc, #68]	; (400f8c <mpsse_vendor_bulk_out_received+0xa4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 
  400f48:	2340      	movs	r3, #64	; 0x40
  400f4a:	2100      	movs	r1, #0
  400f4c:	4a10      	ldr	r2, [pc, #64]	; (400f90 <mpsse_vendor_bulk_out_received+0xa8>)
  400f4e:	9600      	str	r6, [sp, #0]
  400f50:	2007      	movs	r0, #7
  400f52:	47a8      	blx	r5
        mpsse_state.txn_lock = 1;
  400f54:	2301      	movs	r3, #1
  400f56:	72a3      	strb	r3, [r4, #10]
}
  400f58:	b002      	add	sp, #8
  400f5a:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
  400f5c:	2340      	movs	r3, #64	; 0x40
  400f5e:	2100      	movs	r1, #0
  400f60:	4a0c      	ldr	r2, [pc, #48]	; (400f94 <mpsse_vendor_bulk_out_received+0xac>)
  400f62:	4d0a      	ldr	r5, [pc, #40]	; (400f8c <mpsse_vendor_bulk_out_received+0xa4>)
  400f64:	9600      	str	r6, [sp, #0]
  400f66:	2007      	movs	r0, #7
  400f68:	47a8      	blx	r5
  400f6a:	e7ed      	b.n	400f48 <mpsse_vendor_bulk_out_received+0x60>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  400f6c:	f9b4 e003 	ldrsh.w	lr, [r4, #3]
  400f70:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
  400f74:	ebae 0e03 	sub.w	lr, lr, r3
  400f78:	fa1f fe8e 	uxth.w	lr, lr
  400f7c:	e7d4      	b.n	400f28 <mpsse_vendor_bulk_out_received+0x40>
  400f7e:	bf00      	nop
  400f80:	20000130 	.word	0x20000130
  400f84:	2001c858 	.word	0x2001c858
  400f88:	00400ee9 	.word	0x00400ee9
  400f8c:	00404505 	.word	0x00404505
  400f90:	2001c898 	.word	0x2001c898
  400f94:	2001c8e8 	.word	0x2001c8e8

00400f98 <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
  400f98:	b530      	push	{r4, r5, lr}
  400f9a:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
  400f9c:	bb48      	cbnz	r0, 400ff2 <mpsse_vendor_bulk_in_received+0x5a>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
  400f9e:	4d18      	ldr	r5, [pc, #96]	; (401000 <mpsse_vendor_bulk_in_received+0x68>)
  400fa0:	f9b5 4005 	ldrsh.w	r4, [r5, #5]
  400fa4:	ebb4 0e01 	subs.w	lr, r4, r1
  400fa8:	d00c      	beq.n	400fc4 <mpsse_vendor_bulk_in_received+0x2c>
  400faa:	4603      	mov	r3, r0
  400fac:	4a15      	ldr	r2, [pc, #84]	; (401004 <mpsse_vendor_bulk_in_received+0x6c>)
        // if we haven't finished sending, move the rest of the stuff to the start of the buffer
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
  400fae:	440b      	add	r3, r1
  400fb0:	5cd3      	ldrb	r3, [r2, r3]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
  400fb2:	f100 0c01 	add.w	ip, r0, #1
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
  400fb6:	b2db      	uxtb	r3, r3
  400fb8:	5413      	strb	r3, [r2, r0]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
  400fba:	fa1f f08c 	uxth.w	r0, ip
  400fbe:	4570      	cmp	r0, lr
  400fc0:	4603      	mov	r3, r0
  400fc2:	d3f4      	bcc.n	400fae <mpsse_vendor_bulk_in_received+0x16>
    }
    mpsse_state.rx_bytes -= nb_transferred;
  400fc4:	1a61      	subs	r1, r4, r1
  400fc6:	b20b      	sxth	r3, r1
  400fc8:	f8a5 1005 	strh.w	r1, [r5, #5]
    
    if (mpsse_state.rx_bytes) {
  400fcc:	b943      	cbnz	r3, 400fe0 <mpsse_vendor_bulk_in_received+0x48>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
    } else {
        // always have 2 bytes for status
        mpsse_state.rx_bytes = 2;
  400fce:	2102      	movs	r1, #2
        MPSSE_RX_BUFFER[0] = 0x00;
  400fd0:	4a0c      	ldr	r2, [pc, #48]	; (401004 <mpsse_vendor_bulk_in_received+0x6c>)
        mpsse_state.rx_bytes = 2;
  400fd2:	71ab      	strb	r3, [r5, #6]
        MPSSE_RX_BUFFER[0] = 0x00;
  400fd4:	7013      	strb	r3, [r2, #0]
        MPSSE_RX_BUFFER[1] = 0x00;
        mpsse_state.txn_lock = 0;
  400fd6:	72ab      	strb	r3, [r5, #10]
        MPSSE_RX_BUFFER[1] = 0x00;
  400fd8:	7053      	strb	r3, [r2, #1]
        mpsse_state.rx_bytes = 2;
  400fda:	7169      	strb	r1, [r5, #5]
    }

}
  400fdc:	b003      	add	sp, #12
  400fde:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  400fe0:	2100      	movs	r1, #0
  400fe2:	4809      	ldr	r0, [pc, #36]	; (401008 <mpsse_vendor_bulk_in_received+0x70>)
  400fe4:	9000      	str	r0, [sp, #0]
  400fe6:	4a07      	ldr	r2, [pc, #28]	; (401004 <mpsse_vendor_bulk_in_received+0x6c>)
  400fe8:	4c08      	ldr	r4, [pc, #32]	; (40100c <mpsse_vendor_bulk_in_received+0x74>)
  400fea:	2086      	movs	r0, #134	; 0x86
  400fec:	47a0      	blx	r4
}
  400fee:	b003      	add	sp, #12
  400ff0:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  400ff2:	4b03      	ldr	r3, [pc, #12]	; (401000 <mpsse_vendor_bulk_in_received+0x68>)
  400ff4:	2100      	movs	r1, #0
  400ff6:	4804      	ldr	r0, [pc, #16]	; (401008 <mpsse_vendor_bulk_in_received+0x70>)
  400ff8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
  400ffc:	e7f2      	b.n	400fe4 <mpsse_vendor_bulk_in_received+0x4c>
  400ffe:	bf00      	nop
  401000:	20000130 	.word	0x20000130
  401004:	2001c858 	.word	0x2001c858
  401008:	00400f99 	.word	0x00400f99
  40100c:	00404505 	.word	0x00404505

00401010 <mpsse_enabled>:
    return mpsse_state.enabled;
  401010:	4b01      	ldr	r3, [pc, #4]	; (401018 <mpsse_enabled+0x8>)
}
  401012:	7c98      	ldrb	r0, [r3, #18]
  401014:	4770      	bx	lr
  401016:	bf00      	nop
  401018:	20000130 	.word	0x20000130

0040101c <mpsse_send_bit>:
{
  40101c:	b530      	push	{r4, r5, lr}
    if (mpsse_state.loopback_en) {
  40101e:	4b0f      	ldr	r3, [pc, #60]	; (40105c <mpsse_send_bit+0x40>)
{
  401020:	b083      	sub	sp, #12
    if (mpsse_state.loopback_en) {
  401022:	7a5b      	ldrb	r3, [r3, #9]
    value &= 0x01;
  401024:	f000 0401 	and.w	r4, r0, #1
    if (mpsse_state.loopback_en) {
  401028:	b993      	cbnz	r3, 401050 <mpsse_send_bit+0x34>
        gpio_set_pin_high(dpin);
  40102a:	200d      	movs	r0, #13
    if (value) {
  40102c:	b99c      	cbnz	r4, 401056 <mpsse_send_bit+0x3a>
        gpio_set_pin_low(dpin);
  40102e:	4b0c      	ldr	r3, [pc, #48]	; (401060 <mpsse_send_bit+0x44>)
  401030:	4798      	blx	r3
    volatile uint8_t i = 0;
  401032:	2300      	movs	r3, #0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  401034:	200e      	movs	r0, #14
  401036:	4d0b      	ldr	r5, [pc, #44]	; (401064 <mpsse_send_bit+0x48>)
    volatile uint8_t i = 0;
  401038:	f88d 3007 	strb.w	r3, [sp, #7]
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  40103c:	47a8      	blx	r5
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
  40103e:	200c      	movs	r0, #12
  401040:	4b09      	ldr	r3, [pc, #36]	; (401068 <mpsse_send_bit+0x4c>)
  401042:	4798      	blx	r3
  401044:	4604      	mov	r4, r0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  401046:	200e      	movs	r0, #14
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
  401048:	3c00      	subs	r4, #0
  40104a:	bf18      	it	ne
  40104c:	2401      	movne	r4, #1
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  40104e:	47a8      	blx	r5
}
  401050:	4620      	mov	r0, r4
  401052:	b003      	add	sp, #12
  401054:	bd30      	pop	{r4, r5, pc}
        gpio_set_pin_high(dpin);
  401056:	4b05      	ldr	r3, [pc, #20]	; (40106c <mpsse_send_bit+0x50>)
  401058:	4798      	blx	r3
  40105a:	e7ea      	b.n	401032 <mpsse_send_bit+0x16>
  40105c:	20000130 	.word	0x20000130
  401060:	00402f21 	.word	0x00402f21
  401064:	00402f3d 	.word	0x00402f3d
  401068:	00402ee9 	.word	0x00402ee9
  40106c:	00402f05 	.word	0x00402f05

00401070 <mpsse_swd_send_bit>:
{
  401070:	b530      	push	{r4, r5, lr}
    dpin = mpsse_state.pins[3];
  401072:	4c12      	ldr	r4, [pc, #72]	; (4010bc <mpsse_swd_send_bit+0x4c>)
{
  401074:	b083      	sub	sp, #12
    if (mpsse_state.swd_out_en) {
  401076:	7c63      	ldrb	r3, [r4, #17]
    dpin = mpsse_state.pins[3];
  401078:	f8d4 501f 	ldr.w	r5, [r4, #31]
    if (mpsse_state.swd_out_en) {
  40107c:	b943      	cbnz	r3, 401090 <mpsse_swd_send_bit+0x20>
    volatile uint8_t i = 0;
  40107e:	f88d 3007 	strb.w	r3, [sp, #7]
        read_value = gpio_pin_is_high(dpin);
  401082:	4628      	mov	r0, r5
  401084:	4b0e      	ldr	r3, [pc, #56]	; (4010c0 <mpsse_swd_send_bit+0x50>)
  401086:	4798      	blx	r3
  401088:	1e04      	subs	r4, r0, #0
  40108a:	bf18      	it	ne
  40108c:	2401      	movne	r4, #1
  40108e:	e00d      	b.n	4010ac <mpsse_swd_send_bit+0x3c>
        if (value) {
  401090:	f010 0f01 	tst.w	r0, #1
            gpio_set_pin_high(dpin);
  401094:	bf14      	ite	ne
  401096:	4b0b      	ldrne	r3, [pc, #44]	; (4010c4 <mpsse_swd_send_bit+0x54>)
            gpio_set_pin_low(dpin);
  401098:	4b0b      	ldreq	r3, [pc, #44]	; (4010c8 <mpsse_swd_send_bit+0x58>)
            gpio_set_pin_high(dpin);
  40109a:	4628      	mov	r0, r5
            gpio_set_pin_low(dpin);
  40109c:	4798      	blx	r3
    volatile uint8_t i = 0;
  40109e:	2300      	movs	r3, #0
    if (!mpsse_state.swd_out_en)
  4010a0:	7c62      	ldrb	r2, [r4, #17]
    volatile uint8_t i = 0;
  4010a2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t read_value = 0;
  4010a6:	461c      	mov	r4, r3
    if (!mpsse_state.swd_out_en)
  4010a8:	2a00      	cmp	r2, #0
  4010aa:	d0ea      	beq.n	401082 <mpsse_swd_send_bit+0x12>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  4010ac:	4d07      	ldr	r5, [pc, #28]	; (4010cc <mpsse_swd_send_bit+0x5c>)
  4010ae:	200e      	movs	r0, #14
  4010b0:	47a8      	blx	r5
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  4010b2:	200e      	movs	r0, #14
  4010b4:	47a8      	blx	r5
}
  4010b6:	4620      	mov	r0, r4
  4010b8:	b003      	add	sp, #12
  4010ba:	bd30      	pop	{r4, r5, pc}
  4010bc:	20000130 	.word	0x20000130
  4010c0:	00402ee9 	.word	0x00402ee9
  4010c4:	00402f05 	.word	0x00402f05
  4010c8:	00402f21 	.word	0x00402f21
  4010cc:	00402f3d 	.word	0x00402f3d

004010d0 <mpsse_send_bits>:
{
  4010d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (uint8_t i = 0; i < num_bits; i++) {
  4010d4:	2900      	cmp	r1, #0
  4010d6:	d044      	beq.n	401162 <mpsse_send_bits+0x92>
  4010d8:	1e4e      	subs	r6, r1, #1
  4010da:	b2f6      	uxtb	r6, r6
  4010dc:	4681      	mov	r9, r0
  4010de:	2407      	movs	r4, #7
    uint8_t read_value = 0;
  4010e0:	2500      	movs	r5, #0
  4010e2:	f8df a088 	ldr.w	sl, [pc, #136]	; 40116c <mpsse_send_bits+0x9c>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  4010e6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 401170 <mpsse_send_bits+0xa0>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  4010ea:	4f22      	ldr	r7, [pc, #136]	; (401174 <mpsse_send_bits+0xa4>)
  4010ec:	f1c6 0606 	rsb	r6, r6, #6
  4010f0:	e010      	b.n	401114 <mpsse_send_bits+0x44>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
  4010f2:	f1c4 0007 	rsb	r0, r4, #7
            if (mpsse_state.swd_mode)
  4010f6:	f89a 2010 	ldrb.w	r2, [sl, #16]
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
  4010fa:	fa49 f000 	asr.w	r0, r9, r0
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
  4010fe:	4603      	mov	r3, r0
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
  401100:	f000 0001 	and.w	r0, r0, #1
            if (mpsse_state.swd_mode)
  401104:	b1fa      	cbz	r2, 401146 <mpsse_send_bits+0x76>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
  401106:	47b8      	blx	r7
  401108:	ea4b 15c0 	orr.w	r5, fp, r0, lsl #7
  40110c:	b2ed      	uxtb	r5, r5
    for (uint8_t i = 0; i < num_bits; i++) {
  40110e:	3c01      	subs	r4, #1
  401110:	42a6      	cmp	r6, r4
  401112:	d015      	beq.n	401140 <mpsse_send_bits+0x70>
        if (mpsse_state.cur_cmd.b.lendian) {
  401114:	f89a 3000 	ldrb.w	r3, [sl]
            read_value >>= 1;
  401118:	ea4f 0b55 	mov.w	fp, r5, lsr #1
        if (mpsse_state.cur_cmd.b.lendian) {
  40111c:	071b      	lsls	r3, r3, #28
  40111e:	d4e8      	bmi.n	4010f2 <mpsse_send_bits+0x22>
            if (mpsse_state.swd_mode)
  401120:	f89a 3010 	ldrb.w	r3, [sl, #16]
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  401124:	fa49 f004 	asr.w	r0, r9, r4
  401128:	f000 0001 	and.w	r0, r0, #1
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  40112c:	fa49 f204 	asr.w	r2, r9, r4
            if (mpsse_state.swd_mode)
  401130:	b183      	cbz	r3, 401154 <mpsse_send_bits+0x84>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  401132:	47b8      	blx	r7
  401134:	40a0      	lsls	r0, r4
    for (uint8_t i = 0; i < num_bits; i++) {
  401136:	3c01      	subs	r4, #1
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  401138:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i < num_bits; i++) {
  40113a:	42a6      	cmp	r6, r4
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  40113c:	b2ed      	uxtb	r5, r5
    for (uint8_t i = 0; i < num_bits; i++) {
  40113e:	d1e9      	bne.n	401114 <mpsse_send_bits+0x44>
}
  401140:	4628      	mov	r0, r5
  401142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
  401146:	f003 0001 	and.w	r0, r3, #1
  40114a:	47c0      	blx	r8
  40114c:	ea4b 15c0 	orr.w	r5, fp, r0, lsl #7
  401150:	b2ed      	uxtb	r5, r5
  401152:	e7dc      	b.n	40110e <mpsse_send_bits+0x3e>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
  401154:	f002 0001 	and.w	r0, r2, #1
  401158:	47c0      	blx	r8
  40115a:	40a0      	lsls	r0, r4
  40115c:	4305      	orrs	r5, r0
  40115e:	b2ed      	uxtb	r5, r5
  401160:	e7d5      	b.n	40110e <mpsse_send_bits+0x3e>
    uint8_t read_value = 0;
  401162:	460d      	mov	r5, r1
}
  401164:	4628      	mov	r0, r5
  401166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40116a:	bf00      	nop
  40116c:	20000130 	.word	0x20000130
  401170:	0040101d 	.word	0x0040101d
  401174:	00401071 	.word	0x00401071

00401178 <mpsse_tms_bit_send>:
{
  401178:	b530      	push	{r4, r5, lr}
    if (value) {
  40117a:	f010 0f01 	tst.w	r0, #1
{
  40117e:	b083      	sub	sp, #12
        gpio_set_pin_high(dpin);
  401180:	bf14      	ite	ne
  401182:	4b0b      	ldrne	r3, [pc, #44]	; (4011b0 <mpsse_tms_bit_send+0x38>)
        gpio_set_pin_low(dpin);
  401184:	4b0b      	ldreq	r3, [pc, #44]	; (4011b4 <mpsse_tms_bit_send+0x3c>)
        gpio_set_pin_high(dpin);
  401186:	200b      	movs	r0, #11
        gpio_set_pin_low(dpin);
  401188:	4798      	blx	r3
    volatile uint8_t i = 0;
  40118a:	2300      	movs	r3, #0
    read_value = gpio_pin_is_high(dpin);
  40118c:	4c0a      	ldr	r4, [pc, #40]	; (4011b8 <mpsse_tms_bit_send+0x40>)
  40118e:	200b      	movs	r0, #11
    volatile uint8_t i = 0;
  401190:	f88d 3007 	strb.w	r3, [sp, #7]
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  401194:	4d09      	ldr	r5, [pc, #36]	; (4011bc <mpsse_tms_bit_send+0x44>)
    read_value = gpio_pin_is_high(dpin);
  401196:	47a0      	blx	r4
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  401198:	200e      	movs	r0, #14
  40119a:	47a8      	blx	r5
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
  40119c:	200c      	movs	r0, #12
  40119e:	47a0      	blx	r4
  4011a0:	4604      	mov	r4, r0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
  4011a2:	200e      	movs	r0, #14
  4011a4:	47a8      	blx	r5
}
  4011a6:	1e20      	subs	r0, r4, #0
  4011a8:	bf18      	it	ne
  4011aa:	2001      	movne	r0, #1
  4011ac:	b003      	add	sp, #12
  4011ae:	bd30      	pop	{r4, r5, pc}
  4011b0:	00402f05 	.word	0x00402f05
  4011b4:	00402f21 	.word	0x00402f21
  4011b8:	00402ee9 	.word	0x00402ee9
  4011bc:	00402f3d 	.word	0x00402f3d

004011c0 <mpsse_tms_send>:
{
  4011c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4011c4:	460d      	mov	r5, r1
    if (num_bits == 7) {
  4011c6:	f1a5 0407 	sub.w	r4, r5, #7
  4011ca:	fab4 f484 	clz	r4, r4
    if (bitval) {
  4011ce:	09c3      	lsrs	r3, r0, #7
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
  4011d0:	bf14      	ite	ne
  4011d2:	4b1e      	ldrne	r3, [pc, #120]	; (40124c <mpsse_tms_send+0x8c>)
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
  4011d4:	4b1e      	ldreq	r3, [pc, #120]	; (401250 <mpsse_tms_send+0x90>)
{
  4011d6:	4680      	mov	r8, r0
    if (num_bits == 7) {
  4011d8:	0964      	lsrs	r4, r4, #5
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
  4011da:	200d      	movs	r0, #13
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
  4011dc:	4798      	blx	r3
    for (; i < num_bits; i++) {
  4011de:	42a5      	cmp	r5, r4
  4011e0:	d92f      	bls.n	401242 <mpsse_tms_send+0x82>
  4011e2:	3d01      	subs	r5, #1
  4011e4:	1b2d      	subs	r5, r5, r4
  4011e6:	f1c4 0306 	rsb	r3, r4, #6
  4011ea:	b2ed      	uxtb	r5, r5
  4011ec:	f04f 0900 	mov.w	r9, #0
  4011f0:	4f18      	ldr	r7, [pc, #96]	; (401254 <mpsse_tms_send+0x94>)
  4011f2:	4e19      	ldr	r6, [pc, #100]	; (401258 <mpsse_tms_send+0x98>)
  4011f4:	f1c4 0407 	rsb	r4, r4, #7
  4011f8:	1b5d      	subs	r5, r3, r5
  4011fa:	e008      	b.n	40120e <mpsse_tms_send+0x4e>
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
  4011fc:	47b0      	blx	r6
  4011fe:	40a0      	lsls	r0, r4
    for (; i < num_bits; i++) {
  401200:	3c01      	subs	r4, #1
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
  401202:	ea40 0359 	orr.w	r3, r0, r9, lsr #1
    for (; i < num_bits; i++) {
  401206:	42ac      	cmp	r4, r5
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
  401208:	fa5f f983 	uxtb.w	r9, r3
    for (; i < num_bits; i++) {
  40120c:	d016      	beq.n	40123c <mpsse_tms_send+0x7c>
        if (mpsse_state.cur_cmd.b.lendian) {
  40120e:	783b      	ldrb	r3, [r7, #0]
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
  401210:	f1c4 0007 	rsb	r0, r4, #7
  401214:	fa48 f000 	asr.w	r0, r8, r0
        if (mpsse_state.cur_cmd.b.lendian) {
  401218:	071b      	lsls	r3, r3, #28
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
  40121a:	f000 0001 	and.w	r0, r0, #1
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
  40121e:	fa48 f204 	asr.w	r2, r8, r4
        if (mpsse_state.cur_cmd.b.lendian) {
  401222:	d4eb      	bmi.n	4011fc <mpsse_tms_send+0x3c>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
  401224:	f002 0001 	and.w	r0, r2, #1
  401228:	47b0      	blx	r6
  40122a:	fa00 f304 	lsl.w	r3, r0, r4
    for (; i < num_bits; i++) {
  40122e:	3c01      	subs	r4, #1
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
  401230:	ea43 0309 	orr.w	r3, r3, r9
    for (; i < num_bits; i++) {
  401234:	42ac      	cmp	r4, r5
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
  401236:	fa5f f983 	uxtb.w	r9, r3
    for (; i < num_bits; i++) {
  40123a:	d1e8      	bne.n	40120e <mpsse_tms_send+0x4e>
}
  40123c:	4648      	mov	r0, r9
  40123e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (; i < num_bits; i++) {
  401242:	f04f 0900 	mov.w	r9, #0
}
  401246:	4648      	mov	r0, r9
  401248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40124c:	00402f05 	.word	0x00402f05
  401250:	00402f21 	.word	0x00402f21
  401254:	20000130 	.word	0x20000130
  401258:	00401179 	.word	0x00401179

0040125c <mpsse_handle_transmission>:
{
  40125c:	b530      	push	{r4, r5, lr}
    if (mpsse_state.txn_len == 0) { 
  40125e:	4c57      	ldr	r4, [pc, #348]	; (4013bc <mpsse_handle_transmission+0x160>)
{
  401260:	b083      	sub	sp, #12
    if (mpsse_state.txn_len == 0) { 
  401262:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401266:	f9b4 1001 	ldrsh.w	r1, [r4, #1]
    if (mpsse_state.txn_len == 0) { 
  40126a:	bb5b      	cbnz	r3, 4012c4 <mpsse_handle_transmission+0x68>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  40126c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
  401270:	b28a      	uxth	r2, r1
  401272:	1a98      	subs	r0, r3, r2
        if (mpsse_tx_buffer_remaining() < 2) {
  401274:	b200      	sxth	r0, r0
  401276:	2801      	cmp	r0, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401278:	b209      	sxth	r1, r1
        if (mpsse_tx_buffer_remaining() < 2) {
  40127a:	dd1f      	ble.n	4012bc <mpsse_handle_transmission+0x60>
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40127c:	4d50      	ldr	r5, [pc, #320]	; (4013c0 <mpsse_handle_transmission+0x164>)
  40127e:	1c50      	adds	r0, r2, #1
  401280:	f8a4 0001 	strh.w	r0, [r4, #1]
  401284:	fa0f fc80 	sxth.w	ip, r0
  401288:	4429      	add	r1, r5
        if (!mpsse_state.cur_cmd.b.bit_mode) {
  40128a:	7820      	ldrb	r0, [r4, #0]
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40128c:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        if (!mpsse_state.cur_cmd.b.bit_mode) {
  401290:	f010 0f02 	tst.w	r0, #2
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401294:	b2c9      	uxtb	r1, r1
        if (!mpsse_state.cur_cmd.b.bit_mode) {
  401296:	d149      	bne.n	40132c <mpsse_handle_transmission+0xd0>
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
  401298:	eb05 000c 	add.w	r0, r5, ip
  40129c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  4012a0:	3202      	adds	r2, #2
  4012a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
            mpsse_state.txn_len++; //0x00 sends 1 byte, 0x01 sends 2, etc
  4012a6:	3101      	adds	r1, #1
  4012a8:	f8a4 1007 	strh.w	r1, [r4, #7]
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
  4012ac:	b291      	uxth	r1, r2
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  4012ae:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
  4012b0:	b21b      	sxth	r3, r3
  4012b2:	2b00      	cmp	r3, #0
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
  4012b4:	f8a4 2001 	strh.w	r2, [r4, #1]
  4012b8:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() < 1) {
  4012ba:	dc0b      	bgt.n	4012d4 <mpsse_handle_transmission+0x78>
            mpsse_state.tx_req = 1;
  4012bc:	2301      	movs	r3, #1
  4012be:	73e3      	strb	r3, [r4, #15]
}
  4012c0:	b003      	add	sp, #12
  4012c2:	bd30      	pop	{r4, r5, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  4012c4:	f8b4 3003 	ldrh.w	r3, [r4, #3]
  4012c8:	b20a      	sxth	r2, r1
  4012ca:	b289      	uxth	r1, r1
  4012cc:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
  4012ce:	b21b      	sxth	r3, r3
  4012d0:	2b00      	cmp	r3, #0
  4012d2:	ddf3      	ble.n	4012bc <mpsse_handle_transmission+0x60>
    if (mpsse_state.cur_cmd.b.wtdi) {
  4012d4:	7820      	ldrb	r0, [r4, #0]
  4012d6:	f010 0010 	ands.w	r0, r0, #16
  4012da:	d11c      	bne.n	401316 <mpsse_handle_transmission+0xba>
    return mpsse_send_bits(value, 8);
  4012dc:	2108      	movs	r1, #8
  4012de:	4b39      	ldr	r3, [pc, #228]	; (4013c4 <mpsse_handle_transmission+0x168>)
  4012e0:	4798      	blx	r3
    if (mpsse_state.cur_cmd.b.rtdo) {
  4012e2:	7823      	ldrb	r3, [r4, #0]
  4012e4:	069b      	lsls	r3, r3, #26
  4012e6:	d50b      	bpl.n	401300 <mpsse_handle_transmission+0xa4>
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
  4012e8:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
  4012ec:	4a34      	ldr	r2, [pc, #208]	; (4013c0 <mpsse_handle_transmission+0x164>)
  4012ee:	1c4b      	adds	r3, r1, #1
  4012f0:	f8a4 3005 	strh.w	r3, [r4, #5]
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
  4012f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
        if (mpsse_rx_buffer_remaining() > 0) {
  4012f8:	b21b      	sxth	r3, r3
  4012fa:	2b00      	cmp	r3, #0
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
  4012fc:	5450      	strb	r0, [r2, r1]
        if (mpsse_rx_buffer_remaining() > 0) {
  4012fe:	dd3d      	ble.n	40137c <mpsse_handle_transmission+0x120>
    if (--mpsse_state.txn_len == 0) {
  401300:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
  401304:	3b01      	subs	r3, #1
  401306:	b21a      	sxth	r2, r3
  401308:	f8a4 3007 	strh.w	r3, [r4, #7]
  40130c:	b90a      	cbnz	r2, 401312 <mpsse_handle_transmission+0xb6>
            mpsse_state.cur_cmd.u8 = 0;
  40130e:	2300      	movs	r3, #0
  401310:	7023      	strb	r3, [r4, #0]
}
  401312:	b003      	add	sp, #12
  401314:	bd30      	pop	{r4, r5, pc}
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
  401316:	482a      	ldr	r0, [pc, #168]	; (4013c0 <mpsse_handle_transmission+0x164>)
  401318:	1c4b      	adds	r3, r1, #1
  40131a:	4402      	add	r2, r0
    return mpsse_send_bits(value, 8);
  40131c:	2108      	movs	r1, #8
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
  40131e:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    return mpsse_send_bits(value, 8);
  401322:	4a28      	ldr	r2, [pc, #160]	; (4013c4 <mpsse_handle_transmission+0x168>)
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
  401324:	f8a4 3001 	strh.w	r3, [r4, #1]
    return mpsse_send_bits(value, 8);
  401328:	4790      	blx	r2
  40132a:	e7da      	b.n	4012e2 <mpsse_handle_transmission+0x86>
            mpsse_state.txn_len++; //0x00 sends 1 bit
  40132c:	3101      	adds	r1, #1
            if (mpsse_state.cur_cmd.b.wtms) {
  40132e:	0643      	lsls	r3, r0, #25
            mpsse_state.txn_len++; //0x00 sends 1 bit
  401330:	f8a4 1007 	strh.w	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.wtms) {
  401334:	d437      	bmi.n	4013a6 <mpsse_handle_transmission+0x14a>
                if (mpsse_state.cur_cmd.b.wtdi) // if we're writing, read a byte from the buffer
  401336:	f010 0010 	ands.w	r0, r0, #16
  40133a:	d12b      	bne.n	401394 <mpsse_handle_transmission+0x138>
                read_val = mpsse_send_bits(value, mpsse_state.txn_len);
  40133c:	4b21      	ldr	r3, [pc, #132]	; (4013c4 <mpsse_handle_transmission+0x168>)
  40133e:	b2c9      	uxtb	r1, r1
  401340:	4798      	blx	r3
            mpsse_state.txn_len = 0;
  401342:	2100      	movs	r1, #0
            if (mpsse_state.cur_cmd.b.rtdo) {
  401344:	7823      	ldrb	r3, [r4, #0]
            mpsse_state.txn_len = 0;
  401346:	71e1      	strb	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.rtdo) {
  401348:	069a      	lsls	r2, r3, #26
            mpsse_state.txn_len = 0;
  40134a:	7221      	strb	r1, [r4, #8]
            if (mpsse_state.cur_cmd.b.rtdo) {
  40134c:	d5df      	bpl.n	40130e <mpsse_handle_transmission+0xb2>
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
  40134e:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
  401352:	54e8      	strb	r0, [r5, r3]
  401354:	3301      	adds	r3, #1
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
  401356:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
  40135a:	f8a4 3005 	strh.w	r3, [r4, #5]
                if (mpsse_rx_buffer_remaining() > 0) {
  40135e:	b213      	sxth	r3, r2
  401360:	428b      	cmp	r3, r1
  401362:	dcd4      	bgt.n	40130e <mpsse_handle_transmission+0xb2>
                    mpsse_state.txn_lock = 1;
  401364:	f04f 0c01 	mov.w	ip, #1
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
  401368:	4a17      	ldr	r2, [pc, #92]	; (4013c8 <mpsse_handle_transmission+0x16c>)
  40136a:	2340      	movs	r3, #64	; 0x40
  40136c:	9200      	str	r2, [sp, #0]
  40136e:	4d17      	ldr	r5, [pc, #92]	; (4013cc <mpsse_handle_transmission+0x170>)
  401370:	4a13      	ldr	r2, [pc, #76]	; (4013c0 <mpsse_handle_transmission+0x164>)
  401372:	2086      	movs	r0, #134	; 0x86
                    mpsse_state.txn_lock = 1;
  401374:	f884 c00a 	strb.w	ip, [r4, #10]
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
  401378:	47a8      	blx	r5
  40137a:	e7c8      	b.n	40130e <mpsse_handle_transmission+0xb2>
            mpsse_state.txn_lock = 1;
  40137c:	f04f 0c01 	mov.w	ip, #1
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
  401380:	4911      	ldr	r1, [pc, #68]	; (4013c8 <mpsse_handle_transmission+0x16c>)
  401382:	2340      	movs	r3, #64	; 0x40
  401384:	9100      	str	r1, [sp, #0]
  401386:	4d11      	ldr	r5, [pc, #68]	; (4013cc <mpsse_handle_transmission+0x170>)
  401388:	2100      	movs	r1, #0
  40138a:	2086      	movs	r0, #134	; 0x86
            mpsse_state.txn_lock = 1;
  40138c:	f884 c00a 	strb.w	ip, [r4, #10]
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
  401390:	47a8      	blx	r5
  401392:	e7b5      	b.n	401300 <mpsse_handle_transmission+0xa4>
                     value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401394:	eb05 000c 	add.w	r0, r5, ip
  401398:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  40139c:	3202      	adds	r2, #2
  40139e:	f8a4 2001 	strh.w	r2, [r4, #1]
  4013a2:	b2c0      	uxtb	r0, r0
  4013a4:	e7ca      	b.n	40133c <mpsse_handle_transmission+0xe0>
                read_val = mpsse_tms_send(MPSSE_TX_BUFFER[mpsse_state.tx_idx++], mpsse_state.txn_len);
  4013a6:	eb05 000c 	add.w	r0, r5, ip
  4013aa:	3202      	adds	r2, #2
  4013ac:	4b08      	ldr	r3, [pc, #32]	; (4013d0 <mpsse_handle_transmission+0x174>)
  4013ae:	b2c9      	uxtb	r1, r1
  4013b0:	f8a4 2001 	strh.w	r2, [r4, #1]
  4013b4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
  4013b8:	4798      	blx	r3
                mpsse_state.txn_len = 0;
  4013ba:	e7c2      	b.n	401342 <mpsse_handle_transmission+0xe6>
  4013bc:	20000130 	.word	0x20000130
  4013c0:	2001c858 	.word	0x2001c858
  4013c4:	004010d1 	.word	0x004010d1
  4013c8:	00400f99 	.word	0x00400f99
  4013cc:	00404505 	.word	0x00404505
  4013d0:	004011c1 	.word	0x004011c1

004013d4 <mpsse_handle_special>:
{
  4013d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (mpsse_state.cur_cmd.u8) {
  4013d8:	4c6d      	ldr	r4, [pc, #436]	; (401590 <mpsse_handle_special+0x1bc>)
{
  4013da:	b082      	sub	sp, #8
    switch (mpsse_state.cur_cmd.u8) {
  4013dc:	7823      	ldrb	r3, [r4, #0]
  4013de:	3b80      	subs	r3, #128	; 0x80
  4013e0:	2b07      	cmp	r3, #7
  4013e2:	f200 80bc 	bhi.w	40155e <mpsse_handle_special+0x18a>
  4013e6:	e8df f003 	tbb	[pc, r3]
  4013ea:	7e13      	.short	0x7e13
  4013ec:	6e67568f 	.word	0x6e67568f
  4013f0:	0474      	.short	0x0474
        mpsse_state.cur_cmd.u8 = 0x00;
  4013f2:	2100      	movs	r1, #0
        mpsse_state.txn_lock = 1;
  4013f4:	2601      	movs	r6, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  4013f6:	4a67      	ldr	r2, [pc, #412]	; (401594 <mpsse_handle_special+0x1c0>)
  4013f8:	2086      	movs	r0, #134	; 0x86
  4013fa:	9200      	str	r2, [sp, #0]
  4013fc:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
  401400:	4a65      	ldr	r2, [pc, #404]	; (401598 <mpsse_handle_special+0x1c4>)
  401402:	4d66      	ldr	r5, [pc, #408]	; (40159c <mpsse_handle_special+0x1c8>)
        mpsse_state.cur_cmd.u8 = 0x00;
  401404:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
  401406:	72a6      	strb	r6, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  401408:	47a8      	blx	r5
}
  40140a:	b002      	add	sp, #8
  40140c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401410:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
  401414:	f9b4 1003 	ldrsh.w	r1, [r4, #3]
  401418:	b293      	uxth	r3, r2
  40141a:	1ac9      	subs	r1, r1, r3
        if (mpsse_tx_buffer_remaining() < 2) {
  40141c:	b209      	sxth	r1, r1
  40141e:	2901      	cmp	r1, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401420:	b212      	sxth	r2, r2
        if (mpsse_tx_buffer_remaining() < 2) {
  401422:	f340 80a3 	ble.w	40156c <mpsse_handle_special+0x198>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401426:	495c      	ldr	r1, [pc, #368]	; (401598 <mpsse_handle_special+0x1c4>)
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401428:	1c98      	adds	r0, r3, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40142a:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40142c:	b21b      	sxth	r3, r3
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40142e:	440a      	add	r2, r1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401430:	440b      	add	r3, r1
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401432:	f892 8040 	ldrb.w	r8, [r2, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401436:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
  40143a:	2601      	movs	r6, #1
  40143c:	2500      	movs	r5, #0
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
  40143e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 4015a0 <mpsse_handle_special+0x1cc>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
  401442:	f8df a160 	ldr.w	sl, [pc, #352]	; 4015a4 <mpsse_handle_special+0x1d0>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401446:	fa5f f888 	uxtb.w	r8, r8
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40144a:	f8a4 0001 	strh.w	r0, [r4, #1]
  40144e:	b2ff      	uxtb	r7, r7
        for (uint8_t i = 0; i < 8; i++) {
  401450:	e010      	b.n	401474 <mpsse_handle_special+0xa0>
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
  401452:	07d3      	lsls	r3, r2, #31
  401454:	d403      	bmi.n	40145e <mpsse_handle_special+0x8a>
  401456:	7c23      	ldrb	r3, [r4, #16]
  401458:	2b00      	cmp	r3, #0
  40145a:	f040 8083 	bne.w	401564 <mpsse_handle_special+0x190>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_1);
  40145e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401462:	47c8      	blx	r9
                    if (i == 0) 
  401464:	2d00      	cmp	r5, #0
  401466:	f000 8086 	beq.w	401576 <mpsse_handle_special+0x1a2>
        for (uint8_t i = 0; i < 8; i++) {
  40146a:	2e08      	cmp	r6, #8
  40146c:	d077      	beq.n	40155e <mpsse_handle_special+0x18a>
  40146e:	3601      	adds	r6, #1
  401470:	3501      	adds	r5, #1
  401472:	b2f6      	uxtb	r6, r6
            if (!mpsse_state.pins[i])
  401474:	1d2b      	adds	r3, r5, #4
  401476:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40147a:	f8d3 0003 	ldr.w	r0, [r3, #3]
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
  40147e:	fa48 f205 	asr.w	r2, r8, r5
            if (direction & (1 << i)) {
  401482:	fa47 f305 	asr.w	r3, r7, r5
            if (!mpsse_state.pins[i])
  401486:	2800      	cmp	r0, #0
  401488:	d0ef      	beq.n	40146a <mpsse_handle_special+0x96>
            if (direction & (1 << i)) {
  40148a:	07d9      	lsls	r1, r3, #31
  40148c:	d4e1      	bmi.n	401452 <mpsse_handle_special+0x7e>
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
  40148e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401492:	47c8      	blx	r9
  401494:	e7e9      	b.n	40146a <mpsse_handle_special+0x96>
        MPSSE_RX_BUFFER[2] = 0x01;
  401496:	2501      	movs	r5, #1
        mpsse_state.cur_cmd.u8 = 0x00;
  401498:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
  40149a:	2303      	movs	r3, #3
        MPSSE_RX_BUFFER[2] = 0x01;
  40149c:	4a3e      	ldr	r2, [pc, #248]	; (401598 <mpsse_handle_special+0x1c4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  40149e:	483d      	ldr	r0, [pc, #244]	; (401594 <mpsse_handle_special+0x1c0>)
  4014a0:	4e3e      	ldr	r6, [pc, #248]	; (40159c <mpsse_handle_special+0x1c8>)
  4014a2:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x01;
  4014a4:	7095      	strb	r5, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  4014a6:	2086      	movs	r0, #134	; 0x86
        mpsse_state.cur_cmd.u8 = 0x00;
  4014a8:	7021      	strb	r1, [r4, #0]
        mpsse_state.rx_bytes = 3;
  4014aa:	7163      	strb	r3, [r4, #5]
        mpsse_state.txn_lock = 1;
  4014ac:	72a5      	strb	r5, [r4, #10]
        mpsse_state.rx_bytes = 3;
  4014ae:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  4014b0:	47b0      	blx	r6
}
  4014b2:	b002      	add	sp, #8
  4014b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 1;
  4014b8:	2201      	movs	r2, #1
        mpsse_state.cur_cmd.u8 = 0x00;
  4014ba:	2300      	movs	r3, #0
        mpsse_state.loopback_en = 1;
  4014bc:	7262      	strb	r2, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
  4014be:	7023      	strb	r3, [r4, #0]
}
  4014c0:	b002      	add	sp, #8
  4014c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 0;
  4014c6:	2300      	movs	r3, #0
  4014c8:	7263      	strb	r3, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
  4014ca:	7023      	strb	r3, [r4, #0]
}
  4014cc:	b002      	add	sp, #8
  4014ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
  4014d2:	2200      	movs	r2, #0
        mpsse_state.tx_idx += 2;
  4014d4:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
  4014d8:	7022      	strb	r2, [r4, #0]
        mpsse_state.tx_idx += 2;
  4014da:	3302      	adds	r3, #2
  4014dc:	f8a4 3001 	strh.w	r3, [r4, #1]
}
  4014e0:	b002      	add	sp, #8
  4014e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
  4014e6:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
  4014e8:	2303      	movs	r3, #3
        mpsse_state.txn_lock = 1;
  4014ea:	2601      	movs	r6, #1
        MPSSE_RX_BUFFER[2] = 0x00;
  4014ec:	4a2a      	ldr	r2, [pc, #168]	; (401598 <mpsse_handle_special+0x1c4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  4014ee:	4829      	ldr	r0, [pc, #164]	; (401594 <mpsse_handle_special+0x1c0>)
  4014f0:	4d2a      	ldr	r5, [pc, #168]	; (40159c <mpsse_handle_special+0x1c8>)
  4014f2:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x00;
  4014f4:	7091      	strb	r1, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  4014f6:	2086      	movs	r0, #134	; 0x86
        mpsse_state.cur_cmd.u8 = 0x00;
  4014f8:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
  4014fa:	72a6      	strb	r6, [r4, #10]
        mpsse_state.rx_bytes = 3;
  4014fc:	7163      	strb	r3, [r4, #5]
  4014fe:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
  401500:	47a8      	blx	r5
}
  401502:	b002      	add	sp, #8
  401504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401508:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
  40150c:	f9b4 2003 	ldrsh.w	r2, [r4, #3]
  401510:	b299      	uxth	r1, r3
  401512:	1a52      	subs	r2, r2, r1
        if (mpsse_tx_buffer_remaining() < 2) {
  401514:	b212      	sxth	r2, r2
  401516:	2a01      	cmp	r2, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401518:	b21b      	sxth	r3, r3
        if (mpsse_tx_buffer_remaining() < 2) {
  40151a:	dd27      	ble.n	40156c <mpsse_handle_special+0x198>
        mpsse_state.cur_cmd.u8 = 0x00;
  40151c:	2500      	movs	r5, #0
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40151e:	4a1e      	ldr	r2, [pc, #120]	; (401598 <mpsse_handle_special+0x1c4>)
  401520:	1c48      	adds	r0, r1, #1
  401522:	4413      	add	r3, r2
  401524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401528:	b200      	sxth	r0, r0
  40152a:	4402      	add	r2, r0
  40152c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
  401530:	3102      	adds	r1, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401532:	b2da      	uxtb	r2, r3
        if ((value & 1)) {
  401534:	f013 0301 	ands.w	r3, r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401538:	f8a4 1001 	strh.w	r1, [r4, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
  40153c:	7025      	strb	r5, [r4, #0]
        if ((value & 1)) {
  40153e:	d018      	beq.n	401572 <mpsse_handle_special+0x19e>
            mpsse_state.swd_mode = 1;
  401540:	2301      	movs	r3, #1
            if (value & 2) {
  401542:	f012 0502 	ands.w	r5, r2, #2
            mpsse_state.swd_mode = 1;
  401546:	7423      	strb	r3, [r4, #16]
            if (value & 2) {
  401548:	d019      	beq.n	40157e <mpsse_handle_special+0x1aa>
                gpio_configure_pin(mpsse_state.pins[3], PIO_OUTPUT_1);
  40154a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40154e:	f8d4 001f 	ldr.w	r0, [r4, #31]
  401552:	4a13      	ldr	r2, [pc, #76]	; (4015a0 <mpsse_handle_special+0x1cc>)
                mpsse_state.swd_out_en = 1;
  401554:	7463      	strb	r3, [r4, #17]
}
  401556:	b002      	add	sp, #8
  401558:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpio_configure_pin(mpsse_state.pins[3], PIO_OUTPUT_1);
  40155c:	4710      	bx	r2
        mpsse_state.cur_cmd.u8 = 0x00;
  40155e:	2300      	movs	r3, #0
  401560:	7023      	strb	r3, [r4, #0]
        break;
  401562:	e752      	b.n	40140a <mpsse_handle_special+0x36>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_0);
  401564:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401568:	47c8      	blx	r9
  40156a:	e77e      	b.n	40146a <mpsse_handle_special+0x96>
            mpsse_state.tx_req = 1;
  40156c:	2301      	movs	r3, #1
  40156e:	73e3      	strb	r3, [r4, #15]
            return;
  401570:	e74b      	b.n	40140a <mpsse_handle_special+0x36>
            mpsse_state.swd_mode = 0;
  401572:	7423      	strb	r3, [r4, #16]
  401574:	e749      	b.n	40140a <mpsse_handle_special+0x36>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
  401576:	f8d4 0013 	ldr.w	r0, [r4, #19]
  40157a:	47d0      	blx	sl
        for (uint8_t i = 0; i < 8; i++) {
  40157c:	e777      	b.n	40146e <mpsse_handle_special+0x9a>
                gpio_configure_pin(mpsse_state.pins[3], PIO_INPUT);
  40157e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401582:	f8d4 001f 	ldr.w	r0, [r4, #31]
  401586:	4b06      	ldr	r3, [pc, #24]	; (4015a0 <mpsse_handle_special+0x1cc>)
  401588:	4798      	blx	r3
                mpsse_state.swd_out_en = 0;
  40158a:	7465      	strb	r5, [r4, #17]
  40158c:	e73d      	b.n	40140a <mpsse_handle_special+0x36>
  40158e:	bf00      	nop
  401590:	20000130 	.word	0x20000130
  401594:	00400f99 	.word	0x00400f99
  401598:	2001c858 	.word	0x2001c858
  40159c:	00404505 	.word	0x00404505
  4015a0:	00402f61 	.word	0x00402f61
  4015a4:	00402f3d 	.word	0x00402f3d

004015a8 <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
  4015a8:	b510      	push	{r4, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
  4015aa:	4b04      	ldr	r3, [pc, #16]	; (4015bc <mpsse_register_handlers+0x14>)
  4015ac:	4804      	ldr	r0, [pc, #16]	; (4015c0 <mpsse_register_handlers+0x18>)
  4015ae:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
}
  4015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_in_handler(mpsse_setup_in_received);
  4015b4:	4803      	ldr	r0, [pc, #12]	; (4015c4 <mpsse_register_handlers+0x1c>)
  4015b6:	4b04      	ldr	r3, [pc, #16]	; (4015c8 <mpsse_register_handlers+0x20>)
  4015b8:	4718      	bx	r3
  4015ba:	bf00      	nop
  4015bc:	00401ddd 	.word	0x00401ddd
  4015c0:	00400e01 	.word	0x00400e01
  4015c4:	00400d05 	.word	0x00400d05
  4015c8:	00401db5 	.word	0x00401db5

004015cc <MPSSE_main_sendrecv_byte>:

// TODO: do writing here as we have time
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
  4015cc:	b530      	push	{r4, r5, lr}
	if (!mpsse_state.enabled) return;
  4015ce:	4c30      	ldr	r4, [pc, #192]	; (401690 <MPSSE_main_sendrecv_byte+0xc4>)
{
  4015d0:	b083      	sub	sp, #12
	if (!mpsse_state.enabled) return;
  4015d2:	7ca3      	ldrb	r3, [r4, #18]
  4015d4:	2b00      	cmp	r3, #0
  4015d6:	d04d      	beq.n	401674 <MPSSE_main_sendrecv_byte+0xa8>

    if (mpsse_state.txn_lock) {
  4015d8:	7aa3      	ldrb	r3, [r4, #10]
  4015da:	2b00      	cmp	r3, #0
  4015dc:	d14a      	bne.n	401674 <MPSSE_main_sendrecv_byte+0xa8>
        // waiting on a USB transaction to/from the PC, so wait for that to be done
        // before doing anything else
        return;
    }

    if (mpsse_state.tx_req) {
  4015de:	7be1      	ldrb	r1, [r4, #15]
  4015e0:	bb09      	cbnz	r1, 401626 <MPSSE_main_sendrecv_byte+0x5a>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  4015e2:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
  4015e6:	f9b4 3003 	ldrsh.w	r3, [r4, #3]
  4015ea:	b290      	uxth	r0, r2
  4015ec:	1a1b      	subs	r3, r3, r0
            mpsse_vendor_bulk_out_received);
        return;
    }

    // we're at end of the TX buffer, so read more in
    if (mpsse_tx_buffer_remaining() <= 0) {
  4015ee:	b21b      	sxth	r3, r3
  4015f0:	2b00      	cmp	r3, #0
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  4015f2:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() <= 0) {
  4015f4:	dd40      	ble.n	401678 <MPSSE_main_sendrecv_byte+0xac>
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        return;
    }

    // finished processing the last command, so read a new one
    if (mpsse_state.cur_cmd.u8 == 0x00) {
  4015f6:	7823      	ldrb	r3, [r4, #0]
  4015f8:	b96b      	cbnz	r3, 401616 <MPSSE_main_sendrecv_byte+0x4a>
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  4015fa:	4b26      	ldr	r3, [pc, #152]	; (401694 <MPSSE_main_sendrecv_byte+0xc8>)
        mpsse_state.n_processed_cmds++;
  4015fc:	f8d4 100b 	ldr.w	r1, [r4, #11]
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  401600:	441a      	add	r2, r3
  401602:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
  401606:	3001      	adds	r0, #1
  401608:	b2db      	uxtb	r3, r3
        mpsse_state.n_processed_cmds++;
  40160a:	1c4a      	adds	r2, r1, #1
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
  40160c:	f8a4 0001 	strh.w	r0, [r4, #1]
  401610:	7023      	strb	r3, [r4, #0]
        mpsse_state.n_processed_cmds++;
  401612:	f8c4 200b 	str.w	r2, [r4, #11]
    }

    if (mpsse_state.cur_cmd.b.special) {
  401616:	061b      	lsls	r3, r3, #24
        mpsse_handle_special();
  401618:	bf4c      	ite	mi
  40161a:	4b1f      	ldrmi	r3, [pc, #124]	; (401698 <MPSSE_main_sendrecv_byte+0xcc>)
    } else {
        mpsse_handle_transmission();
  40161c:	4b1f      	ldrpl	r3, [pc, #124]	; (40169c <MPSSE_main_sendrecv_byte+0xd0>)
    }

  40161e:	b003      	add	sp, #12
  401620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        mpsse_handle_transmission();
  401624:	4718      	bx	r3
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
  401626:	f9b4 e001 	ldrsh.w	lr, [r4, #1]
  40162a:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
  40162e:	ebac 0c0e 	sub.w	ip, ip, lr
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
  401632:	fa0f fc8c 	sxth.w	ip, ip
  401636:	f1bc 0f00 	cmp.w	ip, #0
  40163a:	dd0f      	ble.n	40165c <MPSSE_main_sendrecv_byte+0x90>
  40163c:	461a      	mov	r2, r3
  40163e:	4815      	ldr	r0, [pc, #84]	; (401694 <MPSSE_main_sendrecv_byte+0xc8>)
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
  401640:	eb0e 0102 	add.w	r1, lr, r2
  401644:	4401      	add	r1, r0
  401646:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
  40164a:	3301      	adds	r3, #1
  40164c:	b29b      	uxth	r3, r3
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
  40164e:	4402      	add	r2, r0
  401650:	b2c9      	uxtb	r1, r1
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
  401652:	4563      	cmp	r3, ip
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
  401654:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
  401658:	461a      	mov	r2, r3
  40165a:	dbf1      	blt.n	401640 <MPSSE_main_sendrecv_byte+0x74>
        mpsse_state.txn_lock = 1;
  40165c:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
  401660:	490f      	ldr	r1, [pc, #60]	; (4016a0 <MPSSE_main_sendrecv_byte+0xd4>)
  401662:	2340      	movs	r3, #64	; 0x40
  401664:	9100      	str	r1, [sp, #0]
  401666:	2007      	movs	r0, #7
  401668:	2100      	movs	r1, #0
  40166a:	4a0e      	ldr	r2, [pc, #56]	; (4016a4 <MPSSE_main_sendrecv_byte+0xd8>)
  40166c:	4d0e      	ldr	r5, [pc, #56]	; (4016a8 <MPSSE_main_sendrecv_byte+0xdc>)
        mpsse_state.txn_lock = 1;
  40166e:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
  401672:	47a8      	blx	r5
  401674:	b003      	add	sp, #12
  401676:	bd30      	pop	{r4, r5, pc}
        mpsse_state.txn_lock = 1;
  401678:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
  40167c:	4a08      	ldr	r2, [pc, #32]	; (4016a0 <MPSSE_main_sendrecv_byte+0xd4>)
  40167e:	2340      	movs	r3, #64	; 0x40
  401680:	9200      	str	r2, [sp, #0]
  401682:	4d09      	ldr	r5, [pc, #36]	; (4016a8 <MPSSE_main_sendrecv_byte+0xdc>)
  401684:	4a09      	ldr	r2, [pc, #36]	; (4016ac <MPSSE_main_sendrecv_byte+0xe0>)
  401686:	2007      	movs	r0, #7
        mpsse_state.txn_lock = 1;
  401688:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
  40168c:	47a8      	blx	r5
        return;
  40168e:	e7f1      	b.n	401674 <MPSSE_main_sendrecv_byte+0xa8>
  401690:	20000130 	.word	0x20000130
  401694:	2001c858 	.word	0x2001c858
  401698:	004013d5 	.word	0x004013d5
  40169c:	0040125d 	.word	0x0040125d
  4016a0:	00400ee9 	.word	0x00400ee9
  4016a4:	2001c8e8 	.word	0x2001c8e8
  4016a8:	00404505 	.word	0x00404505
  4016ac:	2001c898 	.word	0x2001c898

004016b0 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
  4016b0:	4a0a      	ldr	r2, [pc, #40]	; (4016dc <usart_setup_out_received+0x2c>)
  4016b2:	7853      	ldrb	r3, [r2, #1]
  4016b4:	2b1b      	cmp	r3, #27
  4016b6:	d005      	beq.n	4016c4 <usart_setup_out_received+0x14>
  4016b8:	2b31      	cmp	r3, #49	; 0x31
  4016ba:	d00b      	beq.n	4016d4 <usart_setup_out_received+0x24>
  4016bc:	2b1a      	cmp	r3, #26
  4016be:	d005      	beq.n	4016cc <usart_setup_out_received+0x1c>
  4016c0:	2000      	movs	r0, #0
  4016c2:	4770      	bx	lr
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
  4016c4:	4b06      	ldr	r3, [pc, #24]	; (4016e0 <usart_setup_out_received+0x30>)
        return true;
  4016c6:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
  4016c8:	6113      	str	r3, [r2, #16]
        return true;
  4016ca:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
  4016cc:	4b05      	ldr	r3, [pc, #20]	; (4016e4 <usart_setup_out_received+0x34>)
        return true;
  4016ce:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
  4016d0:	6113      	str	r3, [r2, #16]
        return true;
  4016d2:	4770      	bx	lr
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
        return true;
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
  4016d4:	4b04      	ldr	r3, [pc, #16]	; (4016e8 <usart_setup_out_received+0x38>)
        return true;
  4016d6:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
  4016d8:	6113      	str	r3, [r2, #16]
        break;
    }
    return false;
}
  4016da:	4770      	bx	lr
  4016dc:	200196ec 	.word	0x200196ec
  4016e0:	00401a19 	.word	0x00401a19
  4016e4:	00401a7d 	.word	0x00401a7d
  4016e8:	004016ed 	.word	0x004016ed

004016ec <naeusb_cdc_settings_out>:
    for (uint8_t i = 0; i < 4; i++) {
  4016ec:	4b04      	ldr	r3, [pc, #16]	; (401700 <naeusb_cdc_settings_out+0x14>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
  4016ee:	4905      	ldr	r1, [pc, #20]	; (401704 <naeusb_cdc_settings_out+0x18>)
  4016f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  4016f4:	8849      	ldrh	r1, [r1, #2]
  4016f6:	f361 02c3 	bfi	r2, r1, #3, #1
  4016fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
  4016fe:	4770      	bx	lr
  401700:	20000174 	.word	0x20000174
  401704:	200196ec 	.word	0x200196ec

00401708 <generic_isr>:
{
  401708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
  40170c:	4b1a      	ldr	r3, [pc, #104]	; (401778 <generic_isr+0x70>)
{
  40170e:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
  401710:	6800      	ldr	r0, [r0, #0]
  401712:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
  401714:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
  401716:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
  401718:	d403      	bmi.n	401722 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
  40171a:	07ab      	lsls	r3, r5, #30
  40171c:	d415      	bmi.n	40174a <generic_isr+0x42>
}
  40171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
  401722:	4620      	mov	r0, r4
  401724:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
  401728:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
  40172a:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
  40172c:	4f13      	ldr	r7, [pc, #76]	; (40177c <generic_isr+0x74>)
  40172e:	b2f6      	uxtb	r6, r6
  401730:	4631      	mov	r1, r6
  401732:	47b8      	blx	r7
        if (driver->cdc_enabled)
  401734:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
  401738:	075a      	lsls	r2, r3, #29
  40173a:	d5ee      	bpl.n	40171a <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
  40173c:	2200      	movs	r2, #0
  40173e:	4631      	mov	r1, r6
  401740:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
  401744:	47b8      	blx	r7
	if (status & US_CSR_TXRDY){
  401746:	07ab      	lsls	r3, r5, #30
  401748:	d5e9      	bpl.n	40171e <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
  40174a:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
  40174e:	4628      	mov	r0, r5
  401750:	4b0b      	ldr	r3, [pc, #44]	; (401780 <generic_isr+0x78>)
  401752:	4798      	blx	r3
  401754:	b148      	cbz	r0, 40176a <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
  401756:	4628      	mov	r0, r5
  401758:	4b0a      	ldr	r3, [pc, #40]	; (401784 <generic_isr+0x7c>)
  40175a:	6824      	ldr	r4, [r4, #0]
  40175c:	4798      	blx	r3
  40175e:	4b0a      	ldr	r3, [pc, #40]	; (401788 <generic_isr+0x80>)
  401760:	4601      	mov	r1, r0
  401762:	4620      	mov	r0, r4
}
  401764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
  401768:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
  40176a:	6820      	ldr	r0, [r4, #0]
  40176c:	2102      	movs	r1, #2
}
  40176e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
  401772:	4b06      	ldr	r3, [pc, #24]	; (40178c <generic_isr+0x84>)
  401774:	4718      	bx	r3
  401776:	bf00      	nop
  401778:	00402771 	.word	0x00402771
  40177c:	00400b49 	.word	0x00400b49
  401780:	00400b95 	.word	0x00400b95
  401784:	00400b75 	.word	0x00400b75
  401788:	00402775 	.word	0x00402775
  40178c:	00402769 	.word	0x00402769

00401790 <USART1_Handler>:
	generic_isr(&usart1_driver);
  401790:	4801      	ldr	r0, [pc, #4]	; (401798 <USART1_Handler+0x8>)
  401792:	4b02      	ldr	r3, [pc, #8]	; (40179c <USART1_Handler+0xc>)
  401794:	4718      	bx	r3
  401796:	bf00      	nop
  401798:	20000174 	.word	0x20000174
  40179c:	00401709 	.word	0x00401709

004017a0 <ctrl_usart_in>:
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
  4017a0:	4a13      	ldr	r2, [pc, #76]	; (4017f0 <ctrl_usart_in+0x50>)
  4017a2:	8850      	ldrh	r0, [r2, #2]
		if (port == 0) break;
  4017a4:	0a03      	lsrs	r3, r0, #8
  4017a6:	d001      	beq.n	4017ac <ctrl_usart_in+0xc>
        return false;
  4017a8:	2000      	movs	r0, #0
}
  4017aa:	4770      	bx	lr
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
  4017ac:	2814      	cmp	r0, #20
{
  4017ae:	b510      	push	{r4, lr}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
  4017b0:	d00c      	beq.n	4017cc <ctrl_usart_in+0x2c>
  4017b2:	2818      	cmp	r0, #24
  4017b4:	d005      	beq.n	4017c2 <ctrl_usart_in+0x22>
  4017b6:	f1a0 0010 	sub.w	r0, r0, #16
  4017ba:	fab0 f080 	clz	r0, r0
  4017be:	0940      	lsrs	r0, r0, #5
}
  4017c0:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
  4017c2:	88d1      	ldrh	r1, [r2, #6]
  4017c4:	2903      	cmp	r1, #3
  4017c6:	d80f      	bhi.n	4017e8 <ctrl_usart_in+0x48>
        return false;
  4017c8:	4618      	mov	r0, r3
}
  4017ca:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
  4017cc:	88d1      	ldrh	r1, [r2, #6]
  4017ce:	2903      	cmp	r1, #3
  4017d0:	d9fa      	bls.n	4017c8 <ctrl_usart_in+0x28>
        udd_g_ctrlreq.payload_size = 4;
  4017d2:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
  4017d4:	4c07      	ldr	r4, [pc, #28]	; (4017f4 <ctrl_usart_in+0x54>)
        cnt = circ_buf_count(&driver->rxbuf);
  4017d6:	4808      	ldr	r0, [pc, #32]	; (4017f8 <ctrl_usart_in+0x58>)
        cnt = circ_buf_count(&driver->txbuf);
  4017d8:	4b08      	ldr	r3, [pc, #32]	; (4017fc <ctrl_usart_in+0x5c>)
        udd_g_ctrlreq.payload = respbuf;
  4017da:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
  4017dc:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
  4017de:	4798      	blx	r3
  4017e0:	4603      	mov	r3, r0
        return true;
  4017e2:	2001      	movs	r0, #1
        word2buf(respbuf, cnt);
  4017e4:	6023      	str	r3, [r4, #0]
}
  4017e6:	bd10      	pop	{r4, pc}
        udd_g_ctrlreq.payload_size = 4;
  4017e8:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
  4017ea:	4c02      	ldr	r4, [pc, #8]	; (4017f4 <ctrl_usart_in+0x54>)
        cnt = circ_buf_count(&driver->txbuf);
  4017ec:	4804      	ldr	r0, [pc, #16]	; (401800 <ctrl_usart_in+0x60>)
  4017ee:	e7f3      	b.n	4017d8 <ctrl_usart_in+0x38>
  4017f0:	200196ec 	.word	0x200196ec
  4017f4:	20019580 	.word	0x20019580
  4017f8:	20000190 	.word	0x20000190
  4017fc:	00400ba1 	.word	0x00400ba1
  401800:	20000264 	.word	0x20000264

00401804 <configure_usart>:
{
  401804:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
  401806:	2a01      	cmp	r2, #1
{
  401808:	4604      	mov	r4, r0
  40180a:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
  40180e:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
  401810:	d00e      	beq.n	401830 <configure_usart+0x2c>
  401812:	2a02      	cmp	r2, #2
  401814:	d008      	beq.n	401828 <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
  401816:	2200      	movs	r2, #0
  401818:	6102      	str	r2, [r0, #16]
    switch(parity)
  40181a:	3b01      	subs	r3, #1
  40181c:	2b03      	cmp	r3, #3
  40181e:	d863      	bhi.n	4018e8 <configure_usart+0xe4>
  401820:	e8df f003 	tbb	[pc, r3]
  401824:	0a585533 	.word	0x0a585533
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
  401828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40182c:	6102      	str	r2, [r0, #16]
            break;
  40182e:	e7f4      	b.n	40181a <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
  401830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401834:	6102      	str	r2, [r0, #16]
            break;
  401836:	e7f0      	b.n	40181a <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
  401838:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40183c:	60e3      	str	r3, [r4, #12]
    switch(dbits)
  40183e:	2d06      	cmp	r5, #6
  401840:	d028      	beq.n	401894 <configure_usart+0x90>
  401842:	2d07      	cmp	r5, #7
  401844:	d04d      	beq.n	4018e2 <configure_usart+0xde>
  401846:	2d05      	cmp	r5, #5
  401848:	d048      	beq.n	4018dc <configure_usart+0xd8>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
  40184a:	23c0      	movs	r3, #192	; 0xc0
  40184c:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
  40184e:	2200      	movs	r2, #0
    } else if (driver->usart_id == 1) {
  401850:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
  401854:	6162      	str	r2, [r4, #20]
    } else if (driver->usart_id == 1) {
  401856:	2b01      	cmp	r3, #1
  401858:	d024      	beq.n	4018a4 <configure_usart+0xa0>
    driver->enabled = 1;
  40185a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
  40185e:	4d24      	ldr	r5, [pc, #144]	; (4018f0 <configure_usart+0xec>)
    driver->enabled = 1;
  401860:	f043 0302 	orr.w	r3, r3, #2
  401864:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
  401868:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
  40186c:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
  40186e:	f104 001c 	add.w	r0, r4, #28
  401872:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
  401874:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
  401878:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
  40187a:	4621      	mov	r1, r4
  40187c:	4a1d      	ldr	r2, [pc, #116]	; (4018f4 <configure_usart+0xf0>)
  40187e:	4b1e      	ldr	r3, [pc, #120]	; (4018f8 <configure_usart+0xf4>)
  401880:	f851 0b04 	ldr.w	r0, [r1], #4
  401884:	4798      	blx	r3
}
  401886:	2001      	movs	r0, #1
  401888:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
  40188a:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
  40188e:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
  401890:	60e3      	str	r3, [r4, #12]
    switch(dbits)
  401892:	d1d6      	bne.n	401842 <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
  401894:	2340      	movs	r3, #64	; 0x40
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
  401896:	2200      	movs	r2, #0
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
  401898:	60a3      	str	r3, [r4, #8]
    } else if (driver->usart_id == 1) {
  40189a:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
  40189e:	6162      	str	r2, [r4, #20]
    } else if (driver->usart_id == 1) {
  4018a0:	2b01      	cmp	r3, #1
  4018a2:	d1da      	bne.n	40185a <configure_usart+0x56>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4018a4:	4b15      	ldr	r3, [pc, #84]	; (4018fc <configure_usart+0xf8>)
  4018a6:	200f      	movs	r0, #15
  4018a8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4018aa:	4d15      	ldr	r5, [pc, #84]	; (401900 <configure_usart+0xfc>)
  4018ac:	4915      	ldr	r1, [pc, #84]	; (401904 <configure_usart+0x100>)
  4018ae:	2015      	movs	r0, #21
  4018b0:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4018b2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018b6:	2016      	movs	r0, #22
  4018b8:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4018ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4018be:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4018c0:	4b11      	ldr	r3, [pc, #68]	; (401908 <configure_usart+0x104>)
  4018c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4018c6:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4018ca:	601a      	str	r2, [r3, #0]
}
  4018cc:	e7c5      	b.n	40185a <configure_usart+0x56>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
  4018ce:	2300      	movs	r3, #0
  4018d0:	60e3      	str	r3, [r4, #12]
            break;
  4018d2:	e7b4      	b.n	40183e <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
  4018d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  4018d8:	60e3      	str	r3, [r4, #12]
            break;
  4018da:	e7b0      	b.n	40183e <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
  4018dc:	2300      	movs	r3, #0
  4018de:	60a3      	str	r3, [r4, #8]
            break;
  4018e0:	e7b5      	b.n	40184e <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
  4018e2:	2380      	movs	r3, #128	; 0x80
  4018e4:	60a3      	str	r3, [r4, #8]
            break;
  4018e6:	e7b2      	b.n	40184e <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_NO;
  4018e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4018ec:	60e3      	str	r3, [r4, #12]
            break;
  4018ee:	e7a6      	b.n	40183e <configure_usart+0x3a>
  4018f0:	00400b3d 	.word	0x00400b3d
  4018f4:	07270e00 	.word	0x07270e00
  4018f8:	004026cd 	.word	0x004026cd
  4018fc:	00402cb1 	.word	0x00402cb1
  401900:	00402f61 	.word	0x00402f61
  401904:	08000001 	.word	0x08000001
  401908:	e000e100 	.word	0xe000e100

0040190c <ctrl_usart_out>:
{
  40190c:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
  40190e:	4c35      	ldr	r4, [pc, #212]	; (4019e4 <ctrl_usart_out+0xd8>)
{
  401910:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
  401912:	8863      	ldrh	r3, [r4, #2]
		if (port == 0) break;
  401914:	0a1a      	lsrs	r2, r3, #8
  401916:	d001      	beq.n	40191c <ctrl_usart_out+0x10>
}
  401918:	b002      	add	sp, #8
  40191a:	bd70      	pop	{r4, r5, r6, pc}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
  40191c:	2b11      	cmp	r3, #17
  40191e:	d024      	beq.n	40196a <ctrl_usart_out+0x5e>
  401920:	2b12      	cmp	r3, #18
  401922:	d014      	beq.n	40194e <ctrl_usart_out+0x42>
  401924:	2b10      	cmp	r3, #16
  401926:	d1f7      	bne.n	401918 <ctrl_usart_out+0xc>
        if (udd_g_ctrlreq.req.wLength != 7) return;
  401928:	88e3      	ldrh	r3, [r4, #6]
  40192a:	2b07      	cmp	r3, #7
  40192c:	d1f4      	bne.n	401918 <ctrl_usart_out+0xc>
    if (driver->usart_id == 0) {
  40192e:	4b2e      	ldr	r3, [pc, #184]	; (4019e8 <ctrl_usart_out+0xdc>)
        buf2word(baud, udd_g_ctrlreq.payload);
  401930:	68a1      	ldr	r1, [r4, #8]
    } else if (driver->usart_id == 1) {
  401932:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
        buf2word(baud, udd_g_ctrlreq.payload);
  401936:	680d      	ldr	r5, [r1, #0]
    } else if (driver->usart_id == 1) {
  401938:	2b01      	cmp	r3, #1
  40193a:	d03d      	beq.n	4019b8 <ctrl_usart_out+0xac>
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
  40193c:	7988      	ldrb	r0, [r1, #6]
  40193e:	794b      	ldrb	r3, [r1, #5]
  401940:	790a      	ldrb	r2, [r1, #4]
  401942:	4c2a      	ldr	r4, [pc, #168]	; (4019ec <ctrl_usart_out+0xe0>)
  401944:	9000      	str	r0, [sp, #0]
  401946:	4629      	mov	r1, r5
  401948:	4827      	ldr	r0, [pc, #156]	; (4019e8 <ctrl_usart_out+0xdc>)
  40194a:	47a0      	blx	r4
        return ;
  40194c:	e7e4      	b.n	401918 <ctrl_usart_out+0xc>
        usart_disable_rx(driver->usart);
  40194e:	4c26      	ldr	r4, [pc, #152]	; (4019e8 <ctrl_usart_out+0xdc>)
  401950:	4b27      	ldr	r3, [pc, #156]	; (4019f0 <ctrl_usart_out+0xe4>)
  401952:	6820      	ldr	r0, [r4, #0]
  401954:	4798      	blx	r3
        usart_disable_tx(driver->usart);
  401956:	6820      	ldr	r0, [r4, #0]
  401958:	4b26      	ldr	r3, [pc, #152]	; (4019f4 <ctrl_usart_out+0xe8>)
  40195a:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
  40195c:	2103      	movs	r1, #3
  40195e:	6820      	ldr	r0, [r4, #0]
  401960:	4b25      	ldr	r3, [pc, #148]	; (4019f8 <ctrl_usart_out+0xec>)
}
  401962:	b002      	add	sp, #8
  401964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
  401968:	4718      	bx	r3
    if (driver->usart_id == 0) {
  40196a:	4c1f      	ldr	r4, [pc, #124]	; (4019e8 <ctrl_usart_out+0xdc>)
    } else if (driver->usart_id == 1) {
  40196c:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
  401970:	2b01      	cmp	r3, #1
  401972:	d00c      	beq.n	40198e <ctrl_usart_out+0x82>
        usart_enable_rx(driver->usart);
  401974:	6820      	ldr	r0, [r4, #0]
  401976:	4b21      	ldr	r3, [pc, #132]	; (4019fc <ctrl_usart_out+0xf0>)
  401978:	4798      	blx	r3
        usart_enable_tx(driver->usart);
  40197a:	6820      	ldr	r0, [r4, #0]
  40197c:	4b20      	ldr	r3, [pc, #128]	; (401a00 <ctrl_usart_out+0xf4>)
  40197e:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
  401980:	2101      	movs	r1, #1
  401982:	6820      	ldr	r0, [r4, #0]
  401984:	4b1f      	ldr	r3, [pc, #124]	; (401a04 <ctrl_usart_out+0xf8>)
}
  401986:	b002      	add	sp, #8
  401988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
  40198c:	4718      	bx	r3
  40198e:	4b1e      	ldr	r3, [pc, #120]	; (401a08 <ctrl_usart_out+0xfc>)
  401990:	200f      	movs	r0, #15
  401992:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  401994:	4d1d      	ldr	r5, [pc, #116]	; (401a0c <ctrl_usart_out+0x100>)
  401996:	491e      	ldr	r1, [pc, #120]	; (401a10 <ctrl_usart_out+0x104>)
  401998:	2015      	movs	r0, #21
  40199a:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  40199c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019a0:	2016      	movs	r0, #22
  4019a2:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4019a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4019a8:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4019aa:	4b1a      	ldr	r3, [pc, #104]	; (401a14 <ctrl_usart_out+0x108>)
  4019ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4019b0:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4019b4:	601a      	str	r2, [r3, #0]
}
  4019b6:	e7dd      	b.n	401974 <ctrl_usart_out+0x68>
  4019b8:	4b13      	ldr	r3, [pc, #76]	; (401a08 <ctrl_usart_out+0xfc>)
  4019ba:	200f      	movs	r0, #15
  4019bc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4019be:	4e13      	ldr	r6, [pc, #76]	; (401a0c <ctrl_usart_out+0x100>)
  4019c0:	4913      	ldr	r1, [pc, #76]	; (401a10 <ctrl_usart_out+0x104>)
  4019c2:	2015      	movs	r0, #21
  4019c4:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4019c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4019ca:	2016      	movs	r0, #22
  4019cc:	47b0      	blx	r6
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4019ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4019d2:	2030      	movs	r0, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4019d4:	4b0f      	ldr	r3, [pc, #60]	; (401a14 <ctrl_usart_out+0x108>)
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
  4019d6:	68a1      	ldr	r1, [r4, #8]
  4019d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4019dc:	f883 030f 	strb.w	r0, [r3, #783]	; 0x30f
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4019e0:	601a      	str	r2, [r3, #0]
}
  4019e2:	e7ab      	b.n	40193c <ctrl_usart_out+0x30>
  4019e4:	200196ec 	.word	0x200196ec
  4019e8:	20000174 	.word	0x20000174
  4019ec:	00401805 	.word	0x00401805
  4019f0:	0040275d 	.word	0x0040275d
  4019f4:	0040274d 	.word	0x0040274d
  4019f8:	00402769 	.word	0x00402769
  4019fc:	00402755 	.word	0x00402755
  401a00:	00402745 	.word	0x00402745
  401a04:	00402765 	.word	0x00402765
  401a08:	00402cb1 	.word	0x00402cb1
  401a0c:	00402f61 	.word	0x00402f61
  401a10:	08000001 	.word	0x08000001
  401a14:	e000e100 	.word	0xe000e100

00401a18 <ctrl_usart_cb>:
	ctrl_usart_out();
  401a18:	4b00      	ldr	r3, [pc, #0]	; (401a1c <ctrl_usart_cb+0x4>)
  401a1a:	4718      	bx	r3
  401a1c:	0040190d 	.word	0x0040190d

00401a20 <usart_driver_putchar>:
{
  401a20:	b570      	push	{r4, r5, r6, lr}
  401a22:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
  401a24:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
  401a28:	2200      	movs	r2, #0
  401a2a:	4628      	mov	r0, r5
  401a2c:	4b0d      	ldr	r3, [pc, #52]	; (401a64 <usart_driver_putchar+0x44>)
  401a2e:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
  401a30:	6820      	ldr	r0, [r4, #0]
  401a32:	4b0d      	ldr	r3, [pc, #52]	; (401a68 <usart_driver_putchar+0x48>)
  401a34:	4798      	blx	r3
  401a36:	0782      	lsls	r2, r0, #30
  401a38:	d500      	bpl.n	401a3c <usart_driver_putchar+0x1c>
}
  401a3a:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
  401a3c:	4b0b      	ldr	r3, [pc, #44]	; (401a6c <usart_driver_putchar+0x4c>)
  401a3e:	6820      	ldr	r0, [r4, #0]
  401a40:	4798      	blx	r3
  401a42:	0783      	lsls	r3, r0, #30
  401a44:	d405      	bmi.n	401a52 <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
  401a46:	6820      	ldr	r0, [r4, #0]
  401a48:	2102      	movs	r1, #2
}
  401a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
  401a4e:	4b08      	ldr	r3, [pc, #32]	; (401a70 <usart_driver_putchar+0x50>)
  401a50:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
  401a52:	4628      	mov	r0, r5
  401a54:	4b07      	ldr	r3, [pc, #28]	; (401a74 <usart_driver_putchar+0x54>)
  401a56:	6825      	ldr	r5, [r4, #0]
  401a58:	4798      	blx	r3
  401a5a:	4b07      	ldr	r3, [pc, #28]	; (401a78 <usart_driver_putchar+0x58>)
  401a5c:	4601      	mov	r1, r0
  401a5e:	4628      	mov	r0, r5
  401a60:	4798      	blx	r3
  401a62:	e7f0      	b.n	401a46 <usart_driver_putchar+0x26>
  401a64:	00400b49 	.word	0x00400b49
  401a68:	0040276d 	.word	0x0040276d
  401a6c:	00402771 	.word	0x00402771
  401a70:	00402765 	.word	0x00402765
  401a74:	00400b75 	.word	0x00400b75
  401a78:	00402775 	.word	0x00402775

00401a7c <ctrl_usart_cb_data>:
{		
  401a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
  401a7e:	4d0b      	ldr	r5, [pc, #44]	; (401aac <ctrl_usart_cb_data+0x30>)
  401a80:	886c      	ldrh	r4, [r5, #2]
		if (port == 0) break;
  401a82:	0a24      	lsrs	r4, r4, #8
  401a84:	d000      	beq.n	401a88 <ctrl_usart_cb_data+0xc>
}
  401a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
  401a88:	88eb      	ldrh	r3, [r5, #6]
  401a8a:	89aa      	ldrh	r2, [r5, #12]
  401a8c:	429a      	cmp	r2, r3
  401a8e:	d3fa      	bcc.n	401a86 <ctrl_usart_cb_data+0xa>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
  401a90:	2b00      	cmp	r3, #0
  401a92:	d0f8      	beq.n	401a86 <ctrl_usart_cb_data+0xa>
  401a94:	4f06      	ldr	r7, [pc, #24]	; (401ab0 <ctrl_usart_cb_data+0x34>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
  401a96:	4e07      	ldr	r6, [pc, #28]	; (401ab4 <ctrl_usart_cb_data+0x38>)
  401a98:	68ab      	ldr	r3, [r5, #8]
  401a9a:	4630      	mov	r0, r6
  401a9c:	5d19      	ldrb	r1, [r3, r4]
  401a9e:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
  401aa0:	88eb      	ldrh	r3, [r5, #6]
  401aa2:	3401      	adds	r4, #1
  401aa4:	42a3      	cmp	r3, r4
  401aa6:	dcf7      	bgt.n	401a98 <ctrl_usart_cb_data+0x1c>
}
  401aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401aaa:	bf00      	nop
  401aac:	200196ec 	.word	0x200196ec
  401ab0:	00401a21 	.word	0x00401a21
  401ab4:	20000174 	.word	0x20000174

00401ab8 <naeusart_register_handlers>:
{
  401ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401abc:	2401      	movs	r4, #1
    if (driver->usart_id == 0) {
  401abe:	4d16      	ldr	r5, [pc, #88]	; (401b18 <naeusart_register_handlers+0x60>)
  401ac0:	4f16      	ldr	r7, [pc, #88]	; (401b1c <naeusart_register_handlers+0x64>)
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  401ac2:	4e17      	ldr	r6, [pc, #92]	; (401b20 <naeusart_register_handlers+0x68>)
		if (port == 0) break;
  401ac4:	2c01      	cmp	r4, #1
  401ac6:	d009      	beq.n	401adc <naeusart_register_handlers+0x24>
	for (uint8_t i = 0; i < 4; i++) {
  401ac8:	2c04      	cmp	r4, #4
  401aca:	d10b      	bne.n	401ae4 <naeusart_register_handlers+0x2c>
    naeusb_add_in_handler(usart_setup_in_received);
  401acc:	4b15      	ldr	r3, [pc, #84]	; (401b24 <naeusart_register_handlers+0x6c>)
  401ace:	4816      	ldr	r0, [pc, #88]	; (401b28 <naeusart_register_handlers+0x70>)
  401ad0:	4798      	blx	r3
}
  401ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
  401ad6:	4815      	ldr	r0, [pc, #84]	; (401b2c <naeusart_register_handlers+0x74>)
  401ad8:	4b15      	ldr	r3, [pc, #84]	; (401b30 <naeusart_register_handlers+0x78>)
  401ada:	4718      	bx	r3
    } else if (driver->usart_id == 1) {
  401adc:	f8d5 3298 	ldr.w	r3, [r5, #664]	; 0x298
  401ae0:	2b01      	cmp	r3, #1
  401ae2:	d002      	beq.n	401aea <naeusart_register_handlers+0x32>
  401ae4:	3401      	adds	r4, #1
  401ae6:	b2e4      	uxtb	r4, r4
  401ae8:	e7ec      	b.n	401ac4 <naeusart_register_handlers+0xc>
  401aea:	200f      	movs	r0, #15
  401aec:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  401aee:	f8df 8044 	ldr.w	r8, [pc, #68]	; 401b34 <naeusart_register_handlers+0x7c>
  401af2:	4631      	mov	r1, r6
  401af4:	2015      	movs	r0, #21
  401af6:	47c0      	blx	r8
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  401af8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401afc:	2016      	movs	r0, #22
  401afe:	47c0      	blx	r8
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401b00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401b04:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401b06:	4b0c      	ldr	r3, [pc, #48]	; (401b38 <naeusart_register_handlers+0x80>)
  401b08:	3401      	adds	r4, #1
  401b0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  401b0e:	b2e4      	uxtb	r4, r4
  401b10:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401b14:	601a      	str	r2, [r3, #0]
	irq_register_handler(USART1_IRQn, 3);
  401b16:	e7d5      	b.n	401ac4 <naeusart_register_handlers+0xc>
  401b18:	20000174 	.word	0x20000174
  401b1c:	00402cb1 	.word	0x00402cb1
  401b20:	08000001 	.word	0x08000001
  401b24:	00401db5 	.word	0x00401db5
  401b28:	00401b75 	.word	0x00401b75
  401b2c:	004016b1 	.word	0x004016b1
  401b30:	00401ddd 	.word	0x00401ddd
  401b34:	00402f61 	.word	0x00402f61
  401b38:	e000e100 	.word	0xe000e100

00401b3c <naeusb_cdc_settings_in>:
    udd_g_ctrlreq.payload = respbuf;
  401b3c:	4a0a      	ldr	r2, [pc, #40]	; (401b68 <naeusb_cdc_settings_in+0x2c>)
		respbuf[i] = 0;
  401b3e:	f04f 0c00 	mov.w	ip, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
  401b42:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
  401b44:	4b09      	ldr	r3, [pc, #36]	; (401b6c <naeusb_cdc_settings_in+0x30>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
  401b46:	2904      	cmp	r1, #4
  401b48:	bf28      	it	cs
  401b4a:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
  401b4c:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
  401b50:	4b07      	ldr	r3, [pc, #28]	; (401b70 <naeusb_cdc_settings_in+0x34>)
  401b52:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  401b56:	7018      	strb	r0, [r3, #0]
    udd_g_ctrlreq.payload = respbuf;
  401b58:	6093      	str	r3, [r2, #8]
}
  401b5a:	2001      	movs	r0, #1
		respbuf[i] = 0;
  401b5c:	f883 c001 	strb.w	ip, [r3, #1]
  401b60:	f8a3 c002 	strh.w	ip, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
  401b64:	8191      	strh	r1, [r2, #12]
}
  401b66:	4770      	bx	lr
  401b68:	200196ec 	.word	0x200196ec
  401b6c:	20000174 	.word	0x20000174
  401b70:	20019580 	.word	0x20019580

00401b74 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
  401b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
  401b78:	4d16      	ldr	r5, [pc, #88]	; (401bd4 <usart_setup_in_received+0x60>)
  401b7a:	786b      	ldrb	r3, [r5, #1]
  401b7c:	2b1b      	cmp	r3, #27
  401b7e:	d006      	beq.n	401b8e <usart_setup_in_received+0x1a>
  401b80:	2b31      	cmp	r3, #49	; 0x31
  401b82:	d023      	beq.n	401bcc <usart_setup_in_received+0x58>
  401b84:	2b1a      	cmp	r3, #26
  401b86:	d006      	beq.n	401b96 <usart_setup_in_received+0x22>
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
		if (!driver) return false;
  401b88:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
  401b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ctrl_usart_in();
  401b8e:	4b12      	ldr	r3, [pc, #72]	; (401bd8 <usart_setup_in_received+0x64>)
}
  401b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
  401b94:	4718      	bx	r3
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
  401b96:	886c      	ldrh	r4, [r5, #2]
		if (port == 0) break;
  401b98:	0a23      	lsrs	r3, r4, #8
  401b9a:	d1f5      	bne.n	401b88 <usart_setup_in_received+0x14>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
  401b9c:	88ec      	ldrh	r4, [r5, #6]
  401b9e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 401bdc <usart_setup_in_received+0x68>
  401ba2:	b16c      	cbz	r4, 401bc0 <usart_setup_in_received+0x4c>
  401ba4:	461c      	mov	r4, r3
  401ba6:	4646      	mov	r6, r8
  401ba8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 401be0 <usart_setup_in_received+0x6c>
    return get_from_circ_buf(&driver->rxbuf);
  401bac:	4f0d      	ldr	r7, [pc, #52]	; (401be4 <usart_setup_in_received+0x70>)
  401bae:	4638      	mov	r0, r7
  401bb0:	47c8      	blx	r9
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
  401bb2:	88eb      	ldrh	r3, [r5, #6]
  401bb4:	3401      	adds	r4, #1
  401bb6:	429c      	cmp	r4, r3
            respbuf[cnt] = usart_driver_getchar(driver);
  401bb8:	f806 0b01 	strb.w	r0, [r6], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
  401bbc:	d3f7      	bcc.n	401bae <usart_setup_in_received+0x3a>
        udd_g_ctrlreq.payload_size = cnt;
  401bbe:	b2a4      	uxth	r4, r4
        return true;
  401bc0:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
  401bc2:	f8c5 8008 	str.w	r8, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
  401bc6:	81ac      	strh	r4, [r5, #12]
}
  401bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return naeusb_cdc_settings_in();
  401bcc:	4b06      	ldr	r3, [pc, #24]	; (401be8 <usart_setup_in_received+0x74>)
}
  401bce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
  401bd2:	4718      	bx	r3
  401bd4:	200196ec 	.word	0x200196ec
  401bd8:	004017a1 	.word	0x004017a1
  401bdc:	20019580 	.word	0x20019580
  401be0:	00400b75 	.word	0x00400b75
  401be4:	20000190 	.word	0x20000190
  401be8:	00401b3d 	.word	0x00401b3d

00401bec <cdc_enable>:
		if (port == 0) break;
  401bec:	b940      	cbnz	r0, 401c00 <cdc_enable+0x14>
    driver->cdc_enabled = 1;
  401bee:	4a08      	ldr	r2, [pc, #32]	; (401c10 <cdc_enable+0x24>)
}
  401bf0:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
  401bf2:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
  401bf6:	f043 0304 	orr.w	r3, r3, #4
  401bfa:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
}
  401bfe:	4770      	bx	lr
    driver->cdc_enabled = 1;
  401c00:	2200      	movs	r2, #0
  401c02:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
  401c06:	f362 0382 	bfi	r3, r2, #2, #1
  401c0a:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
  401c0e:	deff      	udf	#255	; 0xff
  401c10:	20000174 	.word	0x20000174

00401c14 <cdc_disable>:
		if (port == 0) break;
  401c14:	b948      	cbnz	r0, 401c2a <cdc_disable+0x16>
    driver->cdc_enabled = 0;
  401c16:	4b09      	ldr	r3, [pc, #36]	; (401c3c <cdc_disable+0x28>)
    NAEUSB_CDC_IS_RUNNING = false;
  401c18:	4909      	ldr	r1, [pc, #36]	; (401c40 <cdc_disable+0x2c>)
    driver->cdc_enabled = 0;
  401c1a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
  401c1e:	7008      	strb	r0, [r1, #0]
    driver->cdc_enabled = 0;
  401c20:	f360 0282 	bfi	r2, r0, #2, #1
  401c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
  401c28:	4770      	bx	lr
    driver->cdc_enabled = 0;
  401c2a:	2200      	movs	r2, #0
  401c2c:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
  401c30:	f362 0382 	bfi	r3, r2, #2, #1
  401c34:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
  401c38:	deff      	udf	#255	; 0xff
  401c3a:	bf00      	nop
  401c3c:	20000174 	.word	0x20000174
  401c40:	20018eb8 	.word	0x20018eb8

00401c44 <my_callback_rx_notify>:
		if (port == 0) break;
  401c44:	bb80      	cbnz	r0, 401ca8 <my_callback_rx_notify+0x64>
    NAEUSB_CDC_IS_RUNNING = true;
  401c46:	2101      	movs	r1, #1
{
  401c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (driver->cdc_enabled && driver->enabled) {
  401c4c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 401cb8 <my_callback_rx_notify+0x74>
    NAEUSB_CDC_IS_RUNNING = true;
  401c50:	4a1a      	ldr	r2, [pc, #104]	; (401cbc <my_callback_rx_notify+0x78>)
    if (driver->cdc_enabled && driver->enabled) {
  401c52:	f898 329c 	ldrb.w	r3, [r8, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
  401c56:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
  401c58:	f003 0306 	and.w	r3, r3, #6
  401c5c:	2b06      	cmp	r3, #6
  401c5e:	d001      	beq.n	401c64 <my_callback_rx_notify+0x20>
}
  401c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
  401c64:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401cc0 <my_callback_rx_notify+0x7c>
  401c68:	47c8      	blx	r9
        while (num_char > 0) {
  401c6a:	4605      	mov	r5, r0
  401c6c:	2800      	cmp	r0, #0
  401c6e:	d0f7      	beq.n	401c60 <my_callback_rx_notify+0x1c>
  401c70:	f8df a050 	ldr.w	sl, [pc, #80]	; 401cc4 <my_callback_rx_notify+0x80>
  401c74:	4e14      	ldr	r6, [pc, #80]	; (401cc8 <my_callback_rx_notify+0x84>)
  401c76:	4f15      	ldr	r7, [pc, #84]	; (401ccc <my_callback_rx_notify+0x88>)
            num_char = (num_char > 512) ? 512 : num_char;
  401c78:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  401c7c:	bf28      	it	cs
  401c7e:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
  401c82:	2000      	movs	r0, #0
  401c84:	4631      	mov	r1, r6
  401c86:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
  401c88:	4604      	mov	r4, r0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
  401c8a:	47d0      	blx	sl
                usart_driver_putchar(driver, uart_buf[i]);
  401c8c:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
  401c8e:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
  401c90:	4640      	mov	r0, r8
            for (uint16_t i = 0; i < num_char; i++) {
  401c92:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
  401c94:	47b8      	blx	r7
            for (uint16_t i = 0; i < num_char; i++) {
  401c96:	42ac      	cmp	r4, r5
  401c98:	d3f8      	bcc.n	401c8c <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
  401c9a:	2000      	movs	r0, #0
  401c9c:	47c8      	blx	r9
        while (num_char > 0) {
  401c9e:	4605      	mov	r5, r0
  401ca0:	2800      	cmp	r0, #0
  401ca2:	d1e9      	bne.n	401c78 <my_callback_rx_notify+0x34>
}
  401ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NAEUSB_CDC_IS_RUNNING = true;
  401ca8:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
  401caa:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
  401cac:	4a03      	ldr	r2, [pc, #12]	; (401cbc <my_callback_rx_notify+0x78>)
  401cae:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
  401cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  401cb4:	deff      	udf	#255	; 0xff
  401cb6:	bf00      	nop
  401cb8:	20000174 	.word	0x20000174
  401cbc:	20018eb8 	.word	0x20018eb8
  401cc0:	00404d19 	.word	0x00404d19
  401cc4:	00404d71 	.word	0x00404d71
  401cc8:	20018ebc 	.word	0x20018ebc
  401ccc:	00401a21 	.word	0x00401a21

00401cd0 <my_callback_config>:
		if (port == 0) break;
  401cd0:	2800      	cmp	r0, #0
  401cd2:	d128      	bne.n	401d26 <my_callback_config+0x56>
{
  401cd4:	b530      	push	{r4, r5, lr}
    if (driver->cdc_enabled) {
  401cd6:	4c16      	ldr	r4, [pc, #88]	; (401d30 <my_callback_config+0x60>)
{
  401cd8:	b083      	sub	sp, #12
    if (driver->cdc_enabled) {
  401cda:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
  401cde:	0752      	lsls	r2, r2, #29
  401ce0:	d502      	bpl.n	401ce8 <my_callback_config+0x18>
        switch(cfg->bParityType) {
  401ce2:	794a      	ldrb	r2, [r1, #5]
  401ce4:	2a04      	cmp	r2, #4
  401ce6:	d901      	bls.n	401cec <my_callback_config+0x1c>
}
  401ce8:	b003      	add	sp, #12
  401cea:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
  401cec:	4603      	mov	r3, r0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
  401cee:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
  401cf0:	4d10      	ldr	r5, [pc, #64]	; (401d34 <my_callback_config+0x64>)
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
  401cf2:	1f50      	subs	r0, r2, #5
  401cf4:	0180      	lsls	r0, r0, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
  401cf6:	b2c0      	uxtb	r0, r0
  401cf8:	461a      	mov	r2, r3
  401cfa:	6809      	ldr	r1, [r1, #0]
  401cfc:	9000      	str	r0, [sp, #0]
  401cfe:	4620      	mov	r0, r4
  401d00:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
  401d02:	4b0d      	ldr	r3, [pc, #52]	; (401d38 <my_callback_config+0x68>)
  401d04:	6820      	ldr	r0, [r4, #0]
  401d06:	4798      	blx	r3
  401d08:	07c3      	lsls	r3, r0, #31
  401d0a:	d4ed      	bmi.n	401ce8 <my_callback_config+0x18>
			usart_enable_rx(driver->usart);
  401d0c:	6820      	ldr	r0, [r4, #0]
  401d0e:	4b0b      	ldr	r3, [pc, #44]	; (401d3c <my_callback_config+0x6c>)
  401d10:	4798      	blx	r3
			usart_enable_tx(driver->usart);
  401d12:	6820      	ldr	r0, [r4, #0]
  401d14:	4b0a      	ldr	r3, [pc, #40]	; (401d40 <my_callback_config+0x70>)
  401d16:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
  401d18:	2101      	movs	r1, #1
  401d1a:	6820      	ldr	r0, [r4, #0]
  401d1c:	4b09      	ldr	r3, [pc, #36]	; (401d44 <my_callback_config+0x74>)
}
  401d1e:	b003      	add	sp, #12
  401d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
  401d24:	4718      	bx	r3
    if (driver->cdc_enabled) {
  401d26:	2300      	movs	r3, #0
  401d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  401d2c:	deff      	udf	#255	; 0xff
  401d2e:	bf00      	nop
  401d30:	20000174 	.word	0x20000174
  401d34:	00401805 	.word	0x00401805
  401d38:	0040276d 	.word	0x0040276d
  401d3c:	00402755 	.word	0x00402755
  401d40:	00402745 	.word	0x00402745
  401d44:	00402765 	.word	0x00402765

00401d48 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
  401d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d4c:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
  401d4e:	4d13      	ldr	r5, [pc, #76]	; (401d9c <cdc_send_to_pc+0x54>)
  401d50:	f8df 804c 	ldr.w	r8, [pc, #76]	; 401da0 <cdc_send_to_pc+0x58>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
  401d54:	4f13      	ldr	r7, [pc, #76]	; (401da4 <cdc_send_to_pc+0x5c>)
  401d56:	4e14      	ldr	r6, [pc, #80]	; (401da8 <cdc_send_to_pc+0x60>)
		if (port == 0) break;
  401d58:	2c01      	cmp	r4, #1
  401d5a:	d003      	beq.n	401d64 <cdc_send_to_pc+0x1c>
	for (uint8_t i = 0; i < 4; i++) {
  401d5c:	2c04      	cmp	r4, #4
  401d5e:	d107      	bne.n	401d70 <cdc_send_to_pc+0x28>
			}
		}

	}
	
}
  401d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
  401d64:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
  401d68:	f003 0306 	and.w	r3, r3, #6
  401d6c:	2b06      	cmp	r3, #6
  401d6e:	d002      	beq.n	401d76 <cdc_send_to_pc+0x2e>
  401d70:	3401      	adds	r4, #1
  401d72:	b2e4      	uxtb	r4, r4
  401d74:	e7f0      	b.n	401d58 <cdc_send_to_pc+0x10>
  401d76:	2000      	movs	r0, #0
  401d78:	47c0      	blx	r8
  401d7a:	2800      	cmp	r0, #0
  401d7c:	d0f8      	beq.n	401d70 <cdc_send_to_pc+0x28>
  401d7e:	f8df a02c 	ldr.w	sl, [pc, #44]	; 401dac <cdc_send_to_pc+0x64>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
  401d82:	f8df 902c 	ldr.w	r9, [pc, #44]	; 401db0 <cdc_send_to_pc+0x68>
  401d86:	e004      	b.n	401d92 <cdc_send_to_pc+0x4a>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
  401d88:	4648      	mov	r0, r9
  401d8a:	47b8      	blx	r7
  401d8c:	4601      	mov	r1, r0
  401d8e:	2000      	movs	r0, #0
  401d90:	47b0      	blx	r6
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
  401d92:	4648      	mov	r0, r9
  401d94:	47d0      	blx	sl
  401d96:	2800      	cmp	r0, #0
  401d98:	d1f6      	bne.n	401d88 <cdc_send_to_pc+0x40>
  401d9a:	e7e9      	b.n	401d70 <cdc_send_to_pc+0x28>
  401d9c:	20000174 	.word	0x20000174
  401da0:	00404eb1 	.word	0x00404eb1
  401da4:	00400b75 	.word	0x00400b75
  401da8:	00404f2d 	.word	0x00404f2d
  401dac:	00400b95 	.word	0x00400b95
  401db0:	20000338 	.word	0x20000338

00401db4 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
  401db4:	4907      	ldr	r1, [pc, #28]	; (401dd4 <naeusb_add_in_handler+0x20>)
  401db6:	780a      	ldrb	r2, [r1, #0]
  401db8:	2a0f      	cmp	r2, #15
  401dba:	d901      	bls.n	401dc0 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
  401dbc:	2000      	movs	r0, #0
    
}
  401dbe:	4770      	bx	lr
  401dc0:	4603      	mov	r3, r0
{
  401dc2:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
  401dc4:	1c50      	adds	r0, r2, #1
  401dc6:	4c04      	ldr	r4, [pc, #16]	; (401dd8 <naeusb_add_in_handler+0x24>)
  401dc8:	7008      	strb	r0, [r1, #0]
  401dca:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
  401dce:	2001      	movs	r0, #1
}
  401dd0:	bc10      	pop	{r4}
  401dd2:	4770      	bx	lr
  401dd4:	2001953c 	.word	0x2001953c
  401dd8:	200194fc 	.word	0x200194fc

00401ddc <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
  401ddc:	4907      	ldr	r1, [pc, #28]	; (401dfc <naeusb_add_out_handler+0x20>)
  401dde:	780a      	ldrb	r2, [r1, #0]
  401de0:	2a0f      	cmp	r2, #15
  401de2:	d901      	bls.n	401de8 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
  401de4:	2000      	movs	r0, #0
    
}
  401de6:	4770      	bx	lr
  401de8:	4603      	mov	r3, r0
{
  401dea:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
  401dec:	1c50      	adds	r0, r2, #1
  401dee:	4c04      	ldr	r4, [pc, #16]	; (401e00 <naeusb_add_out_handler+0x24>)
  401df0:	7008      	strb	r0, [r1, #0]
  401df2:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
  401df6:	2001      	movs	r0, #1
}
  401df8:	bc10      	pop	{r4}
  401dfa:	4770      	bx	lr
  401dfc:	2001953d 	.word	0x2001953d
  401e00:	20019540 	.word	0x20019540

00401e04 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
  401e04:	4b00      	ldr	r3, [pc, #0]	; (401e08 <main_suspend_action+0x4>)
  401e06:	4718      	bx	r3
  401e08:	004005e5 	.word	0x004005e5

00401e0c <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
  401e0c:	4b00      	ldr	r3, [pc, #0]	; (401e10 <main_resume_action+0x4>)
  401e0e:	4718      	bx	r3
  401e10:	004005e9 	.word	0x004005e9

00401e14 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
  401e14:	4b05      	ldr	r3, [pc, #20]	; (401e2c <main_sof_action+0x18>)
  401e16:	781b      	ldrb	r3, [r3, #0]
  401e18:	b903      	cbnz	r3, 401e1c <main_sof_action+0x8>
  401e1a:	4770      	bx	lr
{
  401e1c:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
  401e1e:	4b04      	ldr	r3, [pc, #16]	; (401e30 <main_sof_action+0x1c>)
  401e20:	4798      	blx	r3
}
  401e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
  401e26:	4b03      	ldr	r3, [pc, #12]	; (401e34 <main_sof_action+0x20>)
  401e28:	4718      	bx	r3
  401e2a:	bf00      	nop
  401e2c:	20000414 	.word	0x20000414
  401e30:	004041d5 	.word	0x004041d5
  401e34:	004005ed 	.word	0x004005ed

00401e38 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
  401e38:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
  401e3a:	2401      	movs	r4, #1
  401e3c:	4d04      	ldr	r5, [pc, #16]	; (401e50 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
  401e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  401e42:	4a04      	ldr	r2, [pc, #16]	; (401e54 <main_vendor_enable+0x1c>)
  401e44:	4b04      	ldr	r3, [pc, #16]	; (401e58 <main_vendor_enable+0x20>)
  401e46:	4805      	ldr	r0, [pc, #20]	; (401e5c <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
  401e48:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
  401e4a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
  401e4c:	4620      	mov	r0, r4
  401e4e:	bd38      	pop	{r3, r4, r5, pc}
  401e50:	20000414 	.word	0x20000414
  401e54:	00400ad1 	.word	0x00400ad1
  401e58:	00402e15 	.word	0x00402e15
  401e5c:	200190fc 	.word	0x200190fc

00401e60 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
  401e60:	2200      	movs	r2, #0
  401e62:	4b01      	ldr	r3, [pc, #4]	; (401e68 <main_vendor_disable+0x8>)
  401e64:	701a      	strb	r2, [r3, #0]
}
  401e66:	4770      	bx	lr
  401e68:	20000414 	.word	0x20000414

00401e6c <main_setup_out_received>:

bool main_setup_out_received(void)
{
  401e6c:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
  401e6e:	4b0f      	ldr	r3, [pc, #60]	; (401eac <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
  401e70:	4a0f      	ldr	r2, [pc, #60]	; (401eb0 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
  401e72:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
  401e74:	480f      	ldr	r0, [pc, #60]	; (401eb4 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
  401e76:	2940      	cmp	r1, #64	; 0x40
  401e78:	bf28      	it	cs
  401e7a:	2140      	movcs	r1, #64	; 0x40
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
  401e7c:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
  401e7e:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
  401e80:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
  401e82:	b18a      	cbz	r2, 401ea8 <main_setup_out_received+0x3c>
  401e84:	4c0c      	ldr	r4, [pc, #48]	; (401eb8 <main_setup_out_received+0x4c>)
  401e86:	1e55      	subs	r5, r2, #1
  401e88:	b2ed      	uxtb	r5, r5
  401e8a:	1b53      	subs	r3, r2, r5
  401e8c:	1f25      	subs	r5, r4, #4
  401e8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401e92:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  401e96:	e001      	b.n	401e9c <main_setup_out_received+0x30>
  401e98:	42ac      	cmp	r4, r5
  401e9a:	d005      	beq.n	401ea8 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
  401e9c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  401ea0:	4798      	blx	r3
        if (handler_status == true) {
  401ea2:	2800      	cmp	r0, #0
  401ea4:	d0f8      	beq.n	401e98 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
  401ea6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
  401ea8:	2000      	movs	r0, #0
}
  401eaa:	bd38      	pop	{r3, r4, r5, pc}
  401eac:	200196ec 	.word	0x200196ec
  401eb0:	2001953d 	.word	0x2001953d
  401eb4:	200190bc 	.word	0x200190bc
  401eb8:	20019540 	.word	0x20019540

00401ebc <main_setup_in_received>:

bool main_setup_in_received(void)
{
  401ebc:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
  401ebe:	4b0b      	ldr	r3, [pc, #44]	; (401eec <main_setup_in_received+0x30>)
  401ec0:	781a      	ldrb	r2, [r3, #0]
  401ec2:	b18a      	cbz	r2, 401ee8 <main_setup_in_received+0x2c>
  401ec4:	4c0a      	ldr	r4, [pc, #40]	; (401ef0 <main_setup_in_received+0x34>)
  401ec6:	1e55      	subs	r5, r2, #1
  401ec8:	b2ed      	uxtb	r5, r5
  401eca:	1b53      	subs	r3, r2, r5
  401ecc:	1f25      	subs	r5, r4, #4
  401ece:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401ed2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  401ed6:	e001      	b.n	401edc <main_setup_in_received+0x20>
  401ed8:	42ac      	cmp	r4, r5
  401eda:	d005      	beq.n	401ee8 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
  401edc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  401ee0:	4798      	blx	r3
        if (handler_status == true) {
  401ee2:	2800      	cmp	r0, #0
  401ee4:	d0f8      	beq.n	401ed8 <main_setup_in_received+0x1c>
        }
    }

    return false;

  401ee6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
  401ee8:	2000      	movs	r0, #0
  401eea:	bd38      	pop	{r3, r4, r5, pc}
  401eec:	2001953c 	.word	0x2001953c
  401ef0:	200194fc 	.word	0x200194fc

00401ef4 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  401ef4:	4a02      	ldr	r2, [pc, #8]	; (401f00 <udc_valid_address+0xc>)
  401ef6:	4b03      	ldr	r3, [pc, #12]	; (401f04 <udc_valid_address+0x10>)
  401ef8:	8850      	ldrh	r0, [r2, #2]
  401efa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401efe:	4718      	bx	r3
  401f00:	200196ec 	.word	0x200196ec
  401f04:	00404185 	.word	0x00404185

00401f08 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401f08:	4b15      	ldr	r3, [pc, #84]	; (401f60 <udc_update_iface_desc.part.0+0x58>)
  401f0a:	681b      	ldr	r3, [r3, #0]
  401f0c:	681b      	ldr	r3, [r3, #0]
  401f0e:	791a      	ldrb	r2, [r3, #4]
  401f10:	4282      	cmp	r2, r0
  401f12:	d922      	bls.n	401f5a <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
  401f14:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  401f16:	4c13      	ldr	r4, [pc, #76]	; (401f64 <udc_update_iface_desc.part.0+0x5c>)
  401f18:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401f1a:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401f1e:	449c      	add	ip, r3
	while (ptr_end_desc >
  401f20:	4563      	cmp	r3, ip
  401f22:	d217      	bcs.n	401f54 <udc_update_iface_desc.part.0+0x4c>
  401f24:	2500      	movs	r5, #0
  401f26:	e004      	b.n	401f32 <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
  401f28:	781a      	ldrb	r2, [r3, #0]
  401f2a:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401f2c:	4413      	add	r3, r2
	while (ptr_end_desc >
  401f2e:	459c      	cmp	ip, r3
  401f30:	d90c      	bls.n	401f4c <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  401f32:	785a      	ldrb	r2, [r3, #1]
  401f34:	2a04      	cmp	r2, #4
  401f36:	d1f7      	bne.n	401f28 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  401f38:	789a      	ldrb	r2, [r3, #2]
  401f3a:	4282      	cmp	r2, r0
  401f3c:	d1f4      	bne.n	401f28 <udc_update_iface_desc.part.0+0x20>
  401f3e:	78da      	ldrb	r2, [r3, #3]
  401f40:	428a      	cmp	r2, r1
  401f42:	d1f1      	bne.n	401f28 <udc_update_iface_desc.part.0+0x20>
  401f44:	b105      	cbz	r5, 401f48 <udc_update_iface_desc.part.0+0x40>
  401f46:	6023      	str	r3, [r4, #0]
				return true; // Interface found
  401f48:	2001      	movs	r0, #1
  401f4a:	e001      	b.n	401f50 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
  401f4c:	2000      	movs	r0, #0
  401f4e:	6023      	str	r3, [r4, #0]
}
  401f50:	bc30      	pop	{r4, r5}
  401f52:	4770      	bx	lr
		return false;
  401f54:	2000      	movs	r0, #0
}
  401f56:	bc30      	pop	{r4, r5}
  401f58:	4770      	bx	lr
		return false;
  401f5a:	2000      	movs	r0, #0
}
  401f5c:	4770      	bx	lr
  401f5e:	bf00      	nop
  401f60:	200195c8 	.word	0x200195c8
  401f64:	200195cc 	.word	0x200195cc

00401f68 <udc_iface_disable>:
{
  401f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
  401f6c:	4c1c      	ldr	r4, [pc, #112]	; (401fe0 <udc_iface_disable+0x78>)
  401f6e:	7823      	ldrb	r3, [r4, #0]
  401f70:	b37b      	cbz	r3, 401fd2 <udc_iface_disable+0x6a>
  401f72:	2100      	movs	r1, #0
  401f74:	4e1b      	ldr	r6, [pc, #108]	; (401fe4 <udc_iface_disable+0x7c>)
  401f76:	4605      	mov	r5, r0
  401f78:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
  401f7a:	b350      	cbz	r0, 401fd2 <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401f7c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 401fe8 <udc_iface_disable+0x80>
  401f80:	f8d8 3000 	ldr.w	r3, [r8]
  401f84:	685b      	ldr	r3, [r3, #4]
  401f86:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401f8a:	68fb      	ldr	r3, [r7, #12]
  401f8c:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  401f8e:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401f90:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
  401f92:	b1f3      	cbz	r3, 401fd2 <udc_iface_disable+0x6a>
  401f94:	4628      	mov	r0, r5
  401f96:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401f98:	4605      	mov	r5, r0
  401f9a:	b1d0      	cbz	r0, 401fd2 <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401f9c:	4b13      	ldr	r3, [pc, #76]	; (401fec <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
  401f9e:	4e14      	ldr	r6, [pc, #80]	; (401ff0 <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401fa0:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
  401fa2:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
  401fa6:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
  401fa8:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401faa:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401fac:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401fae:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
  401fb0:	42a2      	cmp	r2, r4
  401fb2:	d806      	bhi.n	401fc2 <udc_iface_disable+0x5a>
  401fb4:	e008      	b.n	401fc8 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
  401fb6:	2b05      	cmp	r3, #5
  401fb8:	d00f      	beq.n	401fda <udc_iface_disable+0x72>
				desc->bLength);
  401fba:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401fbc:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
  401fbe:	42a2      	cmp	r2, r4
  401fc0:	d902      	bls.n	401fc8 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401fc2:	7863      	ldrb	r3, [r4, #1]
  401fc4:	2b04      	cmp	r3, #4
  401fc6:	d1f6      	bne.n	401fb6 <udc_iface_disable+0x4e>
	udi_api->disable();
  401fc8:	687b      	ldr	r3, [r7, #4]
  401fca:	4798      	blx	r3
}
  401fcc:	4628      	mov	r0, r5
  401fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
  401fd2:	2500      	movs	r5, #0
}
  401fd4:	4628      	mov	r0, r5
  401fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
  401fda:	78a0      	ldrb	r0, [r4, #2]
  401fdc:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401fde:	e7e0      	b.n	401fa2 <udc_iface_disable+0x3a>
  401fe0:	200195c5 	.word	0x200195c5
  401fe4:	00401f09 	.word	0x00401f09
  401fe8:	200195c8 	.word	0x200195c8
  401fec:	200195cc 	.word	0x200195cc
  401ff0:	004042e9 	.word	0x004042e9

00401ff4 <udc_iface_enable.part.0>:
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
  401ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401ff8:	4607      	mov	r7, r0
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401ffa:	4b12      	ldr	r3, [pc, #72]	; (402044 <udc_iface_enable.part.0+0x50>)
  401ffc:	4d12      	ldr	r5, [pc, #72]	; (402048 <udc_iface_enable.part.0+0x54>)
  401ffe:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402000:	4e12      	ldr	r6, [pc, #72]	; (40204c <udc_iface_enable.part.0+0x58>)
			udc_ptr_conf->desc +
  402002:	6829      	ldr	r1, [r5, #0]
			desc->bLength);
  402004:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
  402006:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402008:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40200a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40200c:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
  40200e:	42a2      	cmp	r2, r4
  402010:	d806      	bhi.n	402020 <udc_iface_enable.part.0+0x2c>
  402012:	e008      	b.n	402026 <udc_iface_enable.part.0+0x32>
		if (desc_id == desc->bDescriptorType) {
  402014:	2b05      	cmp	r3, #5
  402016:	d00d      	beq.n	402034 <udc_iface_enable.part.0+0x40>
				desc->bLength);
  402018:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  40201a:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
  40201c:	42a2      	cmp	r2, r4
  40201e:	d902      	bls.n	402026 <udc_iface_enable.part.0+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402020:	7863      	ldrb	r3, [r4, #1]
  402022:	2b04      	cmp	r3, #4
  402024:	d1f6      	bne.n	402014 <udc_iface_enable.part.0+0x20>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  402026:	684b      	ldr	r3, [r1, #4]
  402028:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
}
  40202c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  402030:	681b      	ldr	r3, [r3, #0]
  402032:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  402034:	88a2      	ldrh	r2, [r4, #4]
  402036:	78e1      	ldrb	r1, [r4, #3]
  402038:	78a0      	ldrb	r0, [r4, #2]
  40203a:	47b0      	blx	r6
  40203c:	2800      	cmp	r0, #0
  40203e:	d1e0      	bne.n	402002 <udc_iface_enable.part.0+0xe>
}
  402040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402044:	200195cc 	.word	0x200195cc
  402048:	200195c8 	.word	0x200195c8
  40204c:	004041f5 	.word	0x004041f5

00402050 <udc_get_interface_desc>:
	return udc_ptr_iface;
  402050:	4b01      	ldr	r3, [pc, #4]	; (402058 <udc_get_interface_desc+0x8>)
}
  402052:	6818      	ldr	r0, [r3, #0]
  402054:	4770      	bx	lr
  402056:	bf00      	nop
  402058:	200195cc 	.word	0x200195cc

0040205c <udc_start>:
	udd_enable();
  40205c:	4b00      	ldr	r3, [pc, #0]	; (402060 <udc_start+0x4>)
  40205e:	4718      	bx	r3
  402060:	004040e1 	.word	0x004040e1

00402064 <udc_stop>:
{
  402064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
  402066:	4f0d      	ldr	r7, [pc, #52]	; (40209c <udc_stop+0x38>)
	udd_disable();
  402068:	4b0d      	ldr	r3, [pc, #52]	; (4020a0 <udc_stop+0x3c>)
  40206a:	4798      	blx	r3
	if (udc_num_configuration) {
  40206c:	783b      	ldrb	r3, [r7, #0]
  40206e:	b17b      	cbz	r3, 402090 <udc_stop+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402070:	4d0c      	ldr	r5, [pc, #48]	; (4020a4 <udc_stop+0x40>)
  402072:	682b      	ldr	r3, [r5, #0]
  402074:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402076:	791b      	ldrb	r3, [r3, #4]
  402078:	b153      	cbz	r3, 402090 <udc_stop+0x2c>
  40207a:	2400      	movs	r4, #0
  40207c:	4620      	mov	r0, r4
  40207e:	4e0a      	ldr	r6, [pc, #40]	; (4020a8 <udc_stop+0x44>)
			udc_iface_disable(iface_num);
  402080:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402082:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
  402084:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402086:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  402088:	b2e0      	uxtb	r0, r4
  40208a:	791b      	ldrb	r3, [r3, #4]
  40208c:	4283      	cmp	r3, r0
  40208e:	d8f7      	bhi.n	402080 <udc_stop+0x1c>
	udc_num_configuration = 0;
  402090:	2300      	movs	r3, #0
	udc_device_status =
  402092:	4a06      	ldr	r2, [pc, #24]	; (4020ac <udc_stop+0x48>)
	udc_num_configuration = 0;
  402094:	703b      	strb	r3, [r7, #0]
	udc_device_status =
  402096:	8013      	strh	r3, [r2, #0]
}
  402098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40209a:	bf00      	nop
  40209c:	200195c5 	.word	0x200195c5
  4020a0:	00404029 	.word	0x00404029
  4020a4:	200195c8 	.word	0x200195c8
  4020a8:	00401f69 	.word	0x00401f69
  4020ac:	200195c0 	.word	0x200195c0

004020b0 <udc_reset>:
{
  4020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
  4020b2:	4f0c      	ldr	r7, [pc, #48]	; (4020e4 <udc_reset+0x34>)
  4020b4:	783b      	ldrb	r3, [r7, #0]
  4020b6:	b17b      	cbz	r3, 4020d8 <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4020b8:	4d0b      	ldr	r5, [pc, #44]	; (4020e8 <udc_reset+0x38>)
  4020ba:	682b      	ldr	r3, [r5, #0]
  4020bc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4020be:	791b      	ldrb	r3, [r3, #4]
  4020c0:	b153      	cbz	r3, 4020d8 <udc_reset+0x28>
  4020c2:	2400      	movs	r4, #0
  4020c4:	4620      	mov	r0, r4
  4020c6:	4e09      	ldr	r6, [pc, #36]	; (4020ec <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4020c8:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4020ca:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
  4020cc:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4020ce:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4020d0:	b2e0      	uxtb	r0, r4
  4020d2:	791b      	ldrb	r3, [r3, #4]
  4020d4:	4283      	cmp	r3, r0
  4020d6:	d8f7      	bhi.n	4020c8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4020d8:	2300      	movs	r3, #0
	udc_device_status =
  4020da:	4a05      	ldr	r2, [pc, #20]	; (4020f0 <udc_reset+0x40>)
	udc_num_configuration = 0;
  4020dc:	703b      	strb	r3, [r7, #0]
	udc_device_status =
  4020de:	8013      	strh	r3, [r2, #0]
}
  4020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020e2:	bf00      	nop
  4020e4:	200195c5 	.word	0x200195c5
  4020e8:	200195c8 	.word	0x200195c8
  4020ec:	00401f69 	.word	0x00401f69
  4020f0:	200195c0 	.word	0x200195c0

004020f4 <udc_sof_notify>:
{
  4020f4:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4020f6:	4b0c      	ldr	r3, [pc, #48]	; (402128 <udc_sof_notify+0x34>)
  4020f8:	781b      	ldrb	r3, [r3, #0]
  4020fa:	b19b      	cbz	r3, 402124 <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4020fc:	4d0b      	ldr	r5, [pc, #44]	; (40212c <udc_sof_notify+0x38>)
  4020fe:	682b      	ldr	r3, [r5, #0]
  402100:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  402102:	7912      	ldrb	r2, [r2, #4]
  402104:	b172      	cbz	r2, 402124 <udc_sof_notify+0x30>
  402106:	2400      	movs	r4, #0
  402108:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40210a:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
  40210c:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402112:	691b      	ldr	r3, [r3, #16]
  402114:	b103      	cbz	r3, 402118 <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  402116:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402118:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
  40211a:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40211c:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
  40211e:	7909      	ldrb	r1, [r1, #4]
  402120:	4291      	cmp	r1, r2
  402122:	d8f2      	bhi.n	40210a <udc_sof_notify+0x16>
}
  402124:	bd38      	pop	{r3, r4, r5, pc}
  402126:	bf00      	nop
  402128:	200195c5 	.word	0x200195c5
  40212c:	200195c8 	.word	0x200195c8

00402130 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  402130:	2300      	movs	r3, #0
{
  402132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
  402136:	4c83      	ldr	r4, [pc, #524]	; (402344 <udc_process_setup+0x214>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
  402138:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
  40213a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
  40213e:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
  402142:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
  402144:	f000 80c7 	beq.w	4022d6 <udc_process_setup+0x1a6>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
  402148:	f994 2000 	ldrsb.w	r2, [r4]
  40214c:	7823      	ldrb	r3, [r4, #0]
  40214e:	2a00      	cmp	r2, #0
  402150:	db4c      	blt.n	4021ec <udc_process_setup+0xbc>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402152:	f013 0f60 	tst.w	r3, #96	; 0x60
  402156:	d07a      	beq.n	40224e <udc_process_setup+0x11e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
  402158:	f013 0f1e 	tst.w	r3, #30
  40215c:	d11a      	bne.n	402194 <udc_process_setup+0x64>
		if (udd_g_ctrlreq.req.wIndex == 2) {
  40215e:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
  402160:	4d79      	ldr	r5, [pc, #484]	; (402348 <udc_process_setup+0x218>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
  402162:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
  402164:	bf04      	itt	eq
  402166:	2301      	moveq	r3, #1
  402168:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
  40216a:	782b      	ldrb	r3, [r5, #0]
  40216c:	b16b      	cbz	r3, 40218a <udc_process_setup+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40216e:	4e77      	ldr	r6, [pc, #476]	; (40234c <udc_process_setup+0x21c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402170:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402174:	6837      	ldr	r7, [r6, #0]
  402176:	683b      	ldr	r3, [r7, #0]
  402178:	791b      	ldrb	r3, [r3, #4]
  40217a:	4598      	cmp	r8, r3
  40217c:	f0c0 8084 	bcc.w	402288 <udc_process_setup+0x158>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402180:	7822      	ldrb	r2, [r4, #0]
  402182:	f002 021f 	and.w	r2, r2, #31
  402186:	2a02      	cmp	r2, #2
  402188:	d010      	beq.n	4021ac <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  40218a:	2500      	movs	r5, #0
#endif
}
  40218c:	4628      	mov	r0, r5
  40218e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402192:	7823      	ldrb	r3, [r4, #0]
  402194:	f003 031f 	and.w	r3, r3, #31
  402198:	2b02      	cmp	r3, #2
  40219a:	d1f6      	bne.n	40218a <udc_process_setup+0x5a>
	if (0 == udc_num_configuration) {
  40219c:	4d6a      	ldr	r5, [pc, #424]	; (402348 <udc_process_setup+0x218>)
  40219e:	782b      	ldrb	r3, [r5, #0]
  4021a0:	2b00      	cmp	r3, #0
  4021a2:	d0f2      	beq.n	40218a <udc_process_setup+0x5a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4021a4:	4e69      	ldr	r6, [pc, #420]	; (40234c <udc_process_setup+0x21c>)
  4021a6:	6837      	ldr	r7, [r6, #0]
  4021a8:	683b      	ldr	r3, [r7, #0]
  4021aa:	791b      	ldrb	r3, [r3, #4]
  4021ac:	2b00      	cmp	r3, #0
  4021ae:	d0ec      	beq.n	40218a <udc_process_setup+0x5a>
  4021b0:	2400      	movs	r4, #0
  4021b2:	46a0      	mov	r8, r4
  4021b4:	f8df 9198 	ldr.w	r9, [pc, #408]	; 402350 <udc_process_setup+0x220>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4021b8:	687b      	ldr	r3, [r7, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4021ba:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4021bc:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4021c0:	68fb      	ldr	r3, [r7, #12]
  4021c2:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  4021c4:	782b      	ldrb	r3, [r5, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4021c6:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d0de      	beq.n	40218a <udc_process_setup+0x5a>
  4021cc:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4021ce:	fa5f f884 	uxtb.w	r8, r4
  4021d2:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4021d4:	2800      	cmp	r0, #0
  4021d6:	d0d8      	beq.n	40218a <udc_process_setup+0x5a>
		if (udi_api->setup()) {
  4021d8:	68bb      	ldr	r3, [r7, #8]
  4021da:	4798      	blx	r3
  4021dc:	2800      	cmp	r0, #0
  4021de:	d16e      	bne.n	4022be <udc_process_setup+0x18e>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4021e0:	6837      	ldr	r7, [r6, #0]
  4021e2:	683b      	ldr	r3, [r7, #0]
  4021e4:	791b      	ldrb	r3, [r3, #4]
  4021e6:	4543      	cmp	r3, r8
  4021e8:	d8e6      	bhi.n	4021b8 <udc_process_setup+0x88>
  4021ea:	e7ce      	b.n	40218a <udc_process_setup+0x5a>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4021ec:	88e5      	ldrh	r5, [r4, #6]
  4021ee:	2d00      	cmp	r5, #0
  4021f0:	d0cb      	beq.n	40218a <udc_process_setup+0x5a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4021f2:	f013 0f60 	tst.w	r3, #96	; 0x60
  4021f6:	d1af      	bne.n	402158 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4021f8:	f013 021f 	ands.w	r2, r3, #31
  4021fc:	f000 8121 	beq.w	402442 <udc_process_setup+0x312>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  402200:	2a01      	cmp	r2, #1
  402202:	f040 808c 	bne.w	40231e <udc_process_setup+0x1ee>
			switch (udd_g_ctrlreq.req.bRequest) {
  402206:	7862      	ldrb	r2, [r4, #1]
  402208:	2a0a      	cmp	r2, #10
  40220a:	d15f      	bne.n	4022cc <udc_process_setup+0x19c>
	if (udd_g_ctrlreq.req.wLength != 1) {
  40220c:	2d01      	cmp	r5, #1
  40220e:	d15d      	bne.n	4022cc <udc_process_setup+0x19c>
	if (!udc_num_configuration) {
  402210:	4a4d      	ldr	r2, [pc, #308]	; (402348 <udc_process_setup+0x218>)
  402212:	7812      	ldrb	r2, [r2, #0]
  402214:	2a00      	cmp	r2, #0
  402216:	d059      	beq.n	4022cc <udc_process_setup+0x19c>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402218:	4a4c      	ldr	r2, [pc, #304]	; (40234c <udc_process_setup+0x21c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40221a:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40221c:	6817      	ldr	r7, [r2, #0]
  40221e:	683a      	ldr	r2, [r7, #0]
  402220:	7912      	ldrb	r2, [r2, #4]
  402222:	42b2      	cmp	r2, r6
  402224:	d952      	bls.n	4022cc <udc_process_setup+0x19c>
	if (0 == udc_num_configuration) {
  402226:	2100      	movs	r1, #0
  402228:	4630      	mov	r0, r6
  40222a:	4b49      	ldr	r3, [pc, #292]	; (402350 <udc_process_setup+0x220>)
  40222c:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
  40222e:	4605      	mov	r5, r0
  402230:	2800      	cmp	r0, #0
  402232:	f000 80ee 	beq.w	402412 <udc_process_setup+0x2e2>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402236:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
  402238:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
  40223c:	68db      	ldr	r3, [r3, #12]
  40223e:	4798      	blx	r3
  402240:	4602      	mov	r2, r0
  402242:	4844      	ldr	r0, [pc, #272]	; (402354 <udc_process_setup+0x224>)
	udd_set_setup_payload(&udc_iface_setting,1);
  402244:	2101      	movs	r1, #1
  402246:	4b44      	ldr	r3, [pc, #272]	; (402358 <udc_process_setup+0x228>)
	udc_iface_setting = udi_api->getsetting();
  402248:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  40224a:	4798      	blx	r3
	return true;
  40224c:	e79e      	b.n	40218c <udc_process_setup+0x5c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40224e:	f013 071f 	ands.w	r7, r3, #31
  402252:	d136      	bne.n	4022c2 <udc_process_setup+0x192>
			switch (udd_g_ctrlreq.req.bRequest) {
  402254:	7862      	ldrb	r2, [r4, #1]
  402256:	3a01      	subs	r2, #1
  402258:	2a08      	cmp	r2, #8
  40225a:	d837      	bhi.n	4022cc <udc_process_setup+0x19c>
  40225c:	a101      	add	r1, pc, #4	; (adr r1, 402264 <udc_process_setup+0x134>)
  40225e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
  402262:	bf00      	nop
  402264:	00402427 	.word	0x00402427
  402268:	004022cd 	.word	0x004022cd
  40226c:	00402159 	.word	0x00402159
  402270:	004022cd 	.word	0x004022cd
  402274:	00402417 	.word	0x00402417
  402278:	004022cd 	.word	0x004022cd
  40227c:	004022cd 	.word	0x004022cd
  402280:	004022cd 	.word	0x004022cd
  402284:	0040236d 	.word	0x0040236d
	if (0 == udc_num_configuration) {
  402288:	2100      	movs	r1, #0
  40228a:	4640      	mov	r0, r8
  40228c:	4e30      	ldr	r6, [pc, #192]	; (402350 <udc_process_setup+0x220>)
  40228e:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
  402290:	2800      	cmp	r0, #0
  402292:	f43f af7e 	beq.w	402192 <udc_process_setup+0x62>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402296:	687b      	ldr	r3, [r7, #4]
  402298:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40229c:	68fb      	ldr	r3, [r7, #12]
  40229e:	4798      	blx	r3
	if (0 == udc_num_configuration) {
  4022a0:	782b      	ldrb	r3, [r5, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4022a2:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	f43f af70 	beq.w	40218a <udc_process_setup+0x5a>
  4022aa:	4640      	mov	r0, r8
  4022ac:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4022ae:	2800      	cmp	r0, #0
  4022b0:	f43f af6f 	beq.w	402192 <udc_process_setup+0x62>
	return udi_api->setup();
  4022b4:	68bb      	ldr	r3, [r7, #8]
  4022b6:	4798      	blx	r3
		if (udc_req_iface()) {
  4022b8:	2800      	cmp	r0, #0
  4022ba:	f43f af6a 	beq.w	402192 <udc_process_setup+0x62>
			return true;
  4022be:	2501      	movs	r5, #1
  4022c0:	e764      	b.n	40218c <udc_process_setup+0x5c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4022c2:	2f01      	cmp	r7, #1
  4022c4:	f000 80ce 	beq.w	402464 <udc_process_setup+0x334>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4022c8:	2f02      	cmp	r7, #2
  4022ca:	d016      	beq.n	4022fa <udc_process_setup+0x1ca>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
  4022cc:	f013 0f1e 	tst.w	r3, #30
  4022d0:	f43f af45 	beq.w	40215e <udc_process_setup+0x2e>
  4022d4:	e759      	b.n	40218a <udc_process_setup+0x5a>
		if (!mpsse_enabled()) {
  4022d6:	4b21      	ldr	r3, [pc, #132]	; (40235c <udc_process_setup+0x22c>)
  4022d8:	4798      	blx	r3
  4022da:	4602      	mov	r2, r0
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
  4022dc:	2a00      	cmp	r2, #0
  4022de:	bf0c      	ite	eq
  4022e0:	224d      	moveq	r2, #77	; 0x4d
  4022e2:	2257      	movne	r2, #87	; 0x57
		return true;
  4022e4:	2501      	movs	r5, #1
  4022e6:	481e      	ldr	r0, [pc, #120]	; (402360 <udc_process_setup+0x230>)
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
  4022e8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
  4022ec:	f880 20b6 	strb.w	r2, [r0, #182]	; 0xb6
  4022f0:	4b19      	ldr	r3, [pc, #100]	; (402358 <udc_process_setup+0x228>)
  4022f2:	4798      	blx	r3
}
  4022f4:	4628      	mov	r0, r5
  4022f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (udd_g_ctrlreq.req.bRequest) {
  4022fa:	7862      	ldrb	r2, [r4, #1]
  4022fc:	2a01      	cmp	r2, #1
  4022fe:	f000 80d5 	beq.w	4024ac <udc_process_setup+0x37c>
  402302:	2a03      	cmp	r2, #3
  402304:	d106      	bne.n	402314 <udc_process_setup+0x1e4>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  402306:	88e2      	ldrh	r2, [r4, #6]
  402308:	8861      	ldrh	r1, [r4, #2]
  40230a:	430a      	orrs	r2, r1
  40230c:	b292      	uxth	r2, r2
  40230e:	2a00      	cmp	r2, #0
  402310:	f000 8157 	beq.w	4025c2 <udc_process_setup+0x492>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
  402314:	f013 0f1e 	tst.w	r3, #30
  402318:	f47f af40 	bne.w	40219c <udc_process_setup+0x6c>
  40231c:	e71f      	b.n	40215e <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40231e:	2a02      	cmp	r2, #2
  402320:	d1d4      	bne.n	4022cc <udc_process_setup+0x19c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402322:	7862      	ldrb	r2, [r4, #1]
  402324:	2a00      	cmp	r2, #0
  402326:	d1f5      	bne.n	402314 <udc_process_setup+0x1e4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  402328:	2d02      	cmp	r5, #2
  40232a:	d1f3      	bne.n	402314 <udc_process_setup+0x1e4>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  40232c:	7920      	ldrb	r0, [r4, #4]
  40232e:	4b0d      	ldr	r3, [pc, #52]	; (402364 <udc_process_setup+0x234>)
  402330:	4798      	blx	r3
  402332:	4602      	mov	r2, r0
  402334:	480c      	ldr	r0, [pc, #48]	; (402368 <udc_process_setup+0x238>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  402336:	4629      	mov	r1, r5
  402338:	4b07      	ldr	r3, [pc, #28]	; (402358 <udc_process_setup+0x228>)
			return true;
  40233a:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  40233c:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40233e:	4798      	blx	r3
	return true;
  402340:	e724      	b.n	40218c <udc_process_setup+0x5c>
  402342:	bf00      	nop
  402344:	200196ec 	.word	0x200196ec
  402348:	200195c5 	.word	0x200195c5
  40234c:	200195c8 	.word	0x200195c8
  402350:	00401f09 	.word	0x00401f09
  402354:	200195c4 	.word	0x200195c4
  402358:	004041e9 	.word	0x004041e9
  40235c:	00401011 	.word	0x00401011
  402360:	2000043c 	.word	0x2000043c
  402364:	00404341 	.word	0x00404341
  402368:	200195c2 	.word	0x200195c2
	if (udd_g_ctrlreq.req.wLength) {
  40236c:	f8b4 8006 	ldrh.w	r8, [r4, #6]
  402370:	f1b8 0f00 	cmp.w	r8, #0
  402374:	d1aa      	bne.n	4022cc <udc_process_setup+0x19c>
	if (!udd_getaddress()) {
  402376:	4b98      	ldr	r3, [pc, #608]	; (4025d8 <udc_process_setup+0x4a8>)
  402378:	4798      	blx	r3
  40237a:	2800      	cmp	r0, #0
  40237c:	d049      	beq.n	402412 <udc_process_setup+0x2e2>
				udc_config.confdev_lsfs->bNumConfigurations) {
  40237e:	f8df 925c 	ldr.w	r9, [pc, #604]	; 4025dc <udc_process_setup+0x4ac>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402382:	78a3      	ldrb	r3, [r4, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  402384:	f8d9 2000 	ldr.w	r2, [r9]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  402388:	7c52      	ldrb	r2, [r2, #17]
  40238a:	429a      	cmp	r2, r3
  40238c:	d341      	bcc.n	402412 <udc_process_setup+0x2e2>
	if (udc_num_configuration) {
  40238e:	4d94      	ldr	r5, [pc, #592]	; (4025e0 <udc_process_setup+0x4b0>)
  402390:	782a      	ldrb	r2, [r5, #0]
  402392:	b192      	cbz	r2, 4023ba <udc_process_setup+0x28a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402394:	4e93      	ldr	r6, [pc, #588]	; (4025e4 <udc_process_setup+0x4b4>)
  402396:	6832      	ldr	r2, [r6, #0]
  402398:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
  40239a:	7912      	ldrb	r2, [r2, #4]
  40239c:	b16a      	cbz	r2, 4023ba <udc_process_setup+0x28a>
  40239e:	4640      	mov	r0, r8
  4023a0:	f8df a244 	ldr.w	sl, [pc, #580]	; 4025e8 <udc_process_setup+0x4b8>
			udc_iface_disable(iface_num);
  4023a4:	47d0      	blx	sl
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4023a6:	6833      	ldr	r3, [r6, #0]
		for (iface_num = 0;
  4023a8:	f108 0801 	add.w	r8, r8, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4023ac:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4023ae:	fa5f f088 	uxtb.w	r0, r8
  4023b2:	791b      	ldrb	r3, [r3, #4]
  4023b4:	4283      	cmp	r3, r0
  4023b6:	d8f5      	bhi.n	4023a4 <udc_process_setup+0x274>
  4023b8:	78a3      	ldrb	r3, [r4, #2]
	udc_device_status =
  4023ba:	2100      	movs	r1, #0
  4023bc:	4a8b      	ldr	r2, [pc, #556]	; (4025ec <udc_process_setup+0x4bc>)
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4023be:	702b      	strb	r3, [r5, #0]
	udc_device_status =
  4023c0:	8011      	strh	r1, [r2, #0]
	if (udc_num_configuration == 0) {
  4023c2:	2b00      	cmp	r3, #0
  4023c4:	f43f af7b 	beq.w	4022be <udc_process_setup+0x18e>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4023c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4023cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4023d0:	3b01      	subs	r3, #1
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4023d2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4023d6:	4e83      	ldr	r6, [pc, #524]	; (4025e4 <udc_process_setup+0x4b4>)
  4023d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4023dc:	790a      	ldrb	r2, [r1, #4]
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4023de:	6033      	str	r3, [r6, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4023e0:	2a00      	cmp	r2, #0
  4023e2:	f43f af6c 	beq.w	4022be <udc_process_setup+0x18e>
  4023e6:	f8df 8208 	ldr.w	r8, [pc, #520]	; 4025f0 <udc_process_setup+0x4c0>
  4023ea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 4025f4 <udc_process_setup+0x4c4>
  4023ee:	2100      	movs	r1, #0
  4023f0:	4638      	mov	r0, r7
  4023f2:	47c0      	blx	r8
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4023f4:	b168      	cbz	r0, 402412 <udc_process_setup+0x2e2>
  4023f6:	4638      	mov	r0, r7
  4023f8:	47c8      	blx	r9
			iface_num++) {
  4023fa:	3701      	adds	r7, #1
  4023fc:	b2ff      	uxtb	r7, r7
		if (!udc_iface_enable(iface_num, 0)) {
  4023fe:	b140      	cbz	r0, 402412 <udc_process_setup+0x2e2>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402400:	6833      	ldr	r3, [r6, #0]
  402402:	681b      	ldr	r3, [r3, #0]
  402404:	791b      	ldrb	r3, [r3, #4]
  402406:	42bb      	cmp	r3, r7
  402408:	f67f af59 	bls.w	4022be <udc_process_setup+0x18e>
	if (0 == udc_num_configuration) {
  40240c:	782b      	ldrb	r3, [r5, #0]
  40240e:	2b00      	cmp	r3, #0
  402410:	d1ed      	bne.n	4023ee <udc_process_setup+0x2be>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
  402412:	7823      	ldrb	r3, [r4, #0]
  402414:	e6a0      	b.n	402158 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
  402416:	88e2      	ldrh	r2, [r4, #6]
  402418:	2a00      	cmp	r2, #0
  40241a:	f47f af57 	bne.w	4022cc <udc_process_setup+0x19c>
	udd_g_ctrlreq.callback = udc_valid_address;
  40241e:	4b76      	ldr	r3, [pc, #472]	; (4025f8 <udc_process_setup+0x4c8>)
			return true;
  402420:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
  402422:	6123      	str	r3, [r4, #16]
	return true;
  402424:	e6b2      	b.n	40218c <udc_process_setup+0x5c>
	if (udd_g_ctrlreq.req.wLength) {
  402426:	88e2      	ldrh	r2, [r4, #6]
  402428:	2a00      	cmp	r2, #0
  40242a:	f47f af4f 	bne.w	4022cc <udc_process_setup+0x19c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40242e:	8865      	ldrh	r5, [r4, #2]
  402430:	2d01      	cmp	r5, #1
  402432:	f47f af4b 	bne.w	4022cc <udc_process_setup+0x19c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  402436:	4a6d      	ldr	r2, [pc, #436]	; (4025ec <udc_process_setup+0x4bc>)
  402438:	8813      	ldrh	r3, [r2, #0]
  40243a:	f023 0302 	bic.w	r3, r3, #2
  40243e:	8013      	strh	r3, [r2, #0]
		return true;
  402440:	e6a4      	b.n	40218c <udc_process_setup+0x5c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402442:	7862      	ldrb	r2, [r4, #1]
  402444:	2a06      	cmp	r2, #6
  402446:	d047      	beq.n	4024d8 <udc_process_setup+0x3a8>
  402448:	2a08      	cmp	r2, #8
  40244a:	d03d      	beq.n	4024c8 <udc_process_setup+0x398>
  40244c:	2a00      	cmp	r2, #0
  40244e:	f47f af3d 	bne.w	4022cc <udc_process_setup+0x19c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  402452:	2d02      	cmp	r5, #2
  402454:	f47f af3a 	bne.w	4022cc <udc_process_setup+0x19c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  402458:	4629      	mov	r1, r5
  40245a:	4864      	ldr	r0, [pc, #400]	; (4025ec <udc_process_setup+0x4bc>)
  40245c:	4b67      	ldr	r3, [pc, #412]	; (4025fc <udc_process_setup+0x4cc>)
  40245e:	4798      	blx	r3
			return true;
  402460:	2501      	movs	r5, #1
  402462:	e693      	b.n	40218c <udc_process_setup+0x5c>
			switch (udd_g_ctrlreq.req.bRequest) {
  402464:	7862      	ldrb	r2, [r4, #1]
  402466:	2a0b      	cmp	r2, #11
  402468:	f47f af30 	bne.w	4022cc <udc_process_setup+0x19c>
	if (udd_g_ctrlreq.req.wLength) {
  40246c:	88e2      	ldrh	r2, [r4, #6]
  40246e:	2a00      	cmp	r2, #0
  402470:	f47f af2c 	bne.w	4022cc <udc_process_setup+0x19c>
	if (!udc_num_configuration) {
  402474:	4d5a      	ldr	r5, [pc, #360]	; (4025e0 <udc_process_setup+0x4b0>)
  402476:	782a      	ldrb	r2, [r5, #0]
  402478:	2a00      	cmp	r2, #0
  40247a:	f43f af27 	beq.w	4022cc <udc_process_setup+0x19c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40247e:	7926      	ldrb	r6, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
  402480:	4b59      	ldr	r3, [pc, #356]	; (4025e8 <udc_process_setup+0x4b8>)
  402482:	4630      	mov	r0, r6
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  402484:	8867      	ldrh	r7, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
  402486:	4798      	blx	r3
  402488:	2800      	cmp	r0, #0
  40248a:	d0c2      	beq.n	402412 <udc_process_setup+0x2e2>
	if (0 == udc_num_configuration) {
  40248c:	782b      	ldrb	r3, [r5, #0]
  40248e:	2b00      	cmp	r3, #0
  402490:	d0bf      	beq.n	402412 <udc_process_setup+0x2e2>
  402492:	4630      	mov	r0, r6
  402494:	4b56      	ldr	r3, [pc, #344]	; (4025f0 <udc_process_setup+0x4c0>)
  402496:	b2f9      	uxtb	r1, r7
  402498:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40249a:	2800      	cmp	r0, #0
  40249c:	d0b9      	beq.n	402412 <udc_process_setup+0x2e2>
  40249e:	4630      	mov	r0, r6
  4024a0:	4b54      	ldr	r3, [pc, #336]	; (4025f4 <udc_process_setup+0x4c4>)
  4024a2:	4798      	blx	r3
		if (udc_reqstd()) {
  4024a4:	2800      	cmp	r0, #0
  4024a6:	f47f af0a 	bne.w	4022be <udc_process_setup+0x18e>
  4024aa:	e7b2      	b.n	402412 <udc_process_setup+0x2e2>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4024ac:	88e2      	ldrh	r2, [r4, #6]
  4024ae:	8861      	ldrh	r1, [r4, #2]
  4024b0:	430a      	orrs	r2, r1
  4024b2:	b292      	uxth	r2, r2
  4024b4:	2a00      	cmp	r2, #0
  4024b6:	f47f af2d 	bne.w	402314 <udc_process_setup+0x1e4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4024ba:	7920      	ldrb	r0, [r4, #4]
  4024bc:	4b50      	ldr	r3, [pc, #320]	; (402600 <udc_process_setup+0x4d0>)
  4024be:	4798      	blx	r3
		if (udc_reqstd()) {
  4024c0:	2800      	cmp	r0, #0
  4024c2:	f47f aefc 	bne.w	4022be <udc_process_setup+0x18e>
  4024c6:	e7a4      	b.n	402412 <udc_process_setup+0x2e2>
	if (udd_g_ctrlreq.req.wLength != 1) {
  4024c8:	2d01      	cmp	r5, #1
  4024ca:	f47f aeff 	bne.w	4022cc <udc_process_setup+0x19c>
	udd_set_setup_payload(&udc_num_configuration,1);
  4024ce:	4629      	mov	r1, r5
  4024d0:	4843      	ldr	r0, [pc, #268]	; (4025e0 <udc_process_setup+0x4b0>)
  4024d2:	4b4a      	ldr	r3, [pc, #296]	; (4025fc <udc_process_setup+0x4cc>)
  4024d4:	4798      	blx	r3
	return true;
  4024d6:	e659      	b.n	40218c <udc_process_setup+0x5c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4024d8:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4024da:	0a0a      	lsrs	r2, r1, #8
  4024dc:	3a01      	subs	r2, #1
  4024de:	2a0e      	cmp	r2, #14
  4024e0:	f63f ae3a 	bhi.w	402158 <udc_process_setup+0x28>
  4024e4:	a001      	add	r0, pc, #4	; (adr r0, 4024ec <udc_process_setup+0x3bc>)
  4024e6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
  4024ea:	bf00      	nop
  4024ec:	00402573 	.word	0x00402573
  4024f0:	00402551 	.word	0x00402551
  4024f4:	00402541 	.word	0x00402541
  4024f8:	00402159 	.word	0x00402159
  4024fc:	00402159 	.word	0x00402159
  402500:	00402159 	.word	0x00402159
  402504:	00402159 	.word	0x00402159
  402508:	00402159 	.word	0x00402159
  40250c:	00402159 	.word	0x00402159
  402510:	00402159 	.word	0x00402159
  402514:	00402159 	.word	0x00402159
  402518:	00402159 	.word	0x00402159
  40251c:	00402159 	.word	0x00402159
  402520:	00402159 	.word	0x00402159
  402524:	00402529 	.word	0x00402529
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
  402528:	2121      	movs	r1, #33	; 0x21
  40252a:	4836      	ldr	r0, [pc, #216]	; (402604 <udc_process_setup+0x4d4>)
  40252c:	4b33      	ldr	r3, [pc, #204]	; (4025fc <udc_process_setup+0x4cc>)
  40252e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  402530:	88e3      	ldrh	r3, [r4, #6]
  402532:	89a2      	ldrh	r2, [r4, #12]
  402534:	429a      	cmp	r2, r3
  402536:	f67f aec2 	bls.w	4022be <udc_process_setup+0x18e>
			return true;
  40253a:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40253c:	81a3      	strh	r3, [r4, #12]
  40253e:	e625      	b.n	40218c <udc_process_setup+0x5c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  402540:	b2c9      	uxtb	r1, r1
  402542:	2903      	cmp	r1, #3
  402544:	f63f ae08 	bhi.w	402158 <udc_process_setup+0x28>
  402548:	e8df f001 	tbb	[pc, r1]
  40254c:	1e303336 	.word	0x1e303336
			if (conf_num >= udc_config.confdev_lsfs->
  402550:	4a22      	ldr	r2, [pc, #136]	; (4025dc <udc_process_setup+0x4ac>)
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  402552:	b2c9      	uxtb	r1, r1
			if (conf_num >= udc_config.confdev_lsfs->
  402554:	6810      	ldr	r0, [r2, #0]
  402556:	7c40      	ldrb	r0, [r0, #17]
  402558:	4288      	cmp	r0, r1
  40255a:	f67f aeb7 	bls.w	4022cc <udc_process_setup+0x19c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  40255e:	6852      	ldr	r2, [r2, #4]
			udd_set_setup_payload(
  402560:	4b26      	ldr	r3, [pc, #152]	; (4025fc <udc_process_setup+0x4cc>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  402562:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
			udd_set_setup_payload(
  402566:	8841      	ldrh	r1, [r0, #2]
  402568:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  40256a:	2202      	movs	r2, #2
  40256c:	68a3      	ldr	r3, [r4, #8]
  40256e:	705a      	strb	r2, [r3, #1]
		break;
  402570:	e7de      	b.n	402530 <udc_process_setup+0x400>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
  402572:	2010      	movs	r0, #16
  402574:	2102      	movs	r1, #2
  402576:	4b19      	ldr	r3, [pc, #100]	; (4025dc <udc_process_setup+0x4ac>)
			udd_set_setup_payload(
  402578:	4d20      	ldr	r5, [pc, #128]	; (4025fc <udc_process_setup+0x4cc>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
  40257a:	681a      	ldr	r2, [r3, #0]
  40257c:	7090      	strb	r0, [r2, #2]
  40257e:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
  402580:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  402582:	7801      	ldrb	r1, [r0, #0]
  402584:	47a8      	blx	r5
		break;
  402586:	e7d3      	b.n	402530 <udc_process_setup+0x400>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  402588:	2020      	movs	r0, #32
  40258a:	4b1f      	ldr	r3, [pc, #124]	; (402608 <udc_process_setup+0x4d8>)
		for(i = 0; i < str_length; i++) {
  40258c:	4e1f      	ldr	r6, [pc, #124]	; (40260c <udc_process_setup+0x4dc>)
  40258e:	181d      	adds	r5, r3, r0
  402590:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  402592:	f813 1b01 	ldrb.w	r1, [r3], #1
		for(i = 0; i < str_length; i++) {
  402596:	429d      	cmp	r5, r3
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  402598:	f822 1f02 	strh.w	r1, [r2, #2]!
		for(i = 0; i < str_length; i++) {
  40259c:	d1f9      	bne.n	402592 <udc_process_setup+0x462>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  40259e:	0041      	lsls	r1, r0, #1
  4025a0:	3102      	adds	r1, #2
		udd_set_setup_payload(
  4025a2:	481a      	ldr	r0, [pc, #104]	; (40260c <udc_process_setup+0x4dc>)
  4025a4:	4b15      	ldr	r3, [pc, #84]	; (4025fc <udc_process_setup+0x4cc>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4025a6:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
  4025a8:	4798      	blx	r3
  4025aa:	e7c1      	b.n	402530 <udc_process_setup+0x400>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  4025ac:	2012      	movs	r0, #18
		str = udc_string_product_name;
  4025ae:	4b18      	ldr	r3, [pc, #96]	; (402610 <udc_process_setup+0x4e0>)
  4025b0:	e7ec      	b.n	40258c <udc_process_setup+0x45c>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  4025b2:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
  4025b4:	4b17      	ldr	r3, [pc, #92]	; (402614 <udc_process_setup+0x4e4>)
  4025b6:	e7e9      	b.n	40258c <udc_process_setup+0x45c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4025b8:	2104      	movs	r1, #4
  4025ba:	4817      	ldr	r0, [pc, #92]	; (402618 <udc_process_setup+0x4e8>)
  4025bc:	4b0f      	ldr	r3, [pc, #60]	; (4025fc <udc_process_setup+0x4cc>)
  4025be:	4798      	blx	r3
	if (str_length) {
  4025c0:	e7b6      	b.n	402530 <udc_process_setup+0x400>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4025c2:	7920      	ldrb	r0, [r4, #4]
  4025c4:	4b15      	ldr	r3, [pc, #84]	; (40261c <udc_process_setup+0x4ec>)
  4025c6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4025c8:	7920      	ldrb	r0, [r4, #4]
  4025ca:	4b15      	ldr	r3, [pc, #84]	; (402620 <udc_process_setup+0x4f0>)
  4025cc:	4798      	blx	r3
		if (udc_reqstd()) {
  4025ce:	2800      	cmp	r0, #0
  4025d0:	f47f ae75 	bne.w	4022be <udc_process_setup+0x18e>
  4025d4:	e71d      	b.n	402412 <udc_process_setup+0x2e2>
  4025d6:	bf00      	nop
  4025d8:	004041bd 	.word	0x004041bd
  4025dc:	2000061c 	.word	0x2000061c
  4025e0:	200195c5 	.word	0x200195c5
  4025e4:	200195c8 	.word	0x200195c8
  4025e8:	00401f69 	.word	0x00401f69
  4025ec:	200195c0 	.word	0x200195c0
  4025f0:	00401f09 	.word	0x00401f09
  4025f4:	00401ff5 	.word	0x00401ff5
  4025f8:	00401ef5 	.word	0x00401ef5
  4025fc:	004041e9 	.word	0x004041e9
  402600:	00404445 	.word	0x00404445
  402604:	20000418 	.word	0x20000418
  402608:	200000a8 	.word	0x200000a8
  40260c:	20000588 	.word	0x20000588
  402610:	200005e8 	.word	0x200005e8
  402614:	200005d0 	.word	0x200005d0
  402618:	200005cc 	.word	0x200005cc
  40261c:	00404649 	.word	0x00404649
  402620:	00404381 	.word	0x00404381

00402624 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  402624:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  402626:	2604      	movs	r6, #4
{
  402628:	b087      	sub	sp, #28
  40262a:	4604      	mov	r4, r0
  40262c:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  40262e:	220f      	movs	r2, #15
  402630:	210e      	movs	r1, #14
  402632:	480c      	ldr	r0, [pc, #48]	; (402664 <flash_read_unique_id+0x40>)
  402634:	4f0c      	ldr	r7, [pc, #48]	; (402668 <flash_read_unique_id+0x44>)
  402636:	ab02      	add	r3, sp, #8
  402638:	9600      	str	r6, [sp, #0]
  40263a:	47b8      	blx	r7
  40263c:	b970      	cbnz	r0, 40265c <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
  40263e:	2d04      	cmp	r5, #4
  402640:	4626      	mov	r6, r4
  402642:	462a      	mov	r2, r5
  402644:	4604      	mov	r4, r0
  402646:	bf28      	it	cs
  402648:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  40264a:	b125      	cbz	r5, 402656 <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
  40264c:	4630      	mov	r0, r6
  40264e:	4b07      	ldr	r3, [pc, #28]	; (40266c <flash_read_unique_id+0x48>)
  402650:	a902      	add	r1, sp, #8
  402652:	0092      	lsls	r2, r2, #2
  402654:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
  402656:	4620      	mov	r0, r4
  402658:	b007      	add	sp, #28
  40265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
  40265c:	2410      	movs	r4, #16
}
  40265e:	4620      	mov	r0, r4
  402660:	b007      	add	sp, #28
  402662:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402664:	400e0a00 	.word	0x400e0a00
  402668:	20000001 	.word	0x20000001
  40266c:	0040504d 	.word	0x0040504d

00402670 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402670:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
  402674:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  402676:	ea4f 1001 	mov.w	r0, r1, lsl #4
  40267a:	d312      	bcc.n	4026a2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40267c:	0843      	lsrs	r3, r0, #1
  40267e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  402682:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  402686:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
  40268a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40268c:	1e58      	subs	r0, r3, #1
  40268e:	4288      	cmp	r0, r1
  402690:	d813      	bhi.n	4026ba <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  402692:	0412      	lsls	r2, r2, #16
  402694:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  402698:	431a      	orrs	r2, r3

	return 0;
  40269a:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40269c:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
  4026a0:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4026a2:	00c9      	lsls	r1, r1, #3
  4026a4:	084b      	lsrs	r3, r1, #1
  4026a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4026aa:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4026ae:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
  4026b2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4026b4:	1e58      	subs	r0, r3, #1
  4026b6:	4288      	cmp	r0, r1
  4026b8:	d901      	bls.n	4026be <usart_set_async_baudrate+0x4e>
		return 1;
  4026ba:	2001      	movs	r0, #1
}
  4026bc:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
  4026be:	f8dc 1004 	ldr.w	r1, [ip, #4]
  4026c2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4026c6:	f8cc 1004 	str.w	r1, [ip, #4]
  4026ca:	e7e2      	b.n	402692 <usart_set_async_baudrate+0x22>

004026cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4026cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p_usart->US_MR = 0;
  4026d0:	2300      	movs	r3, #0
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4026d2:	f04f 0988 	mov.w	r9, #136	; 0x88
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4026d6:	f04f 0824 	mov.w	r8, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  4026da:	f44f 7e80 	mov.w	lr, #256	; 0x100
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  4026de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
	p_usart->US_CR = US_CR_DTRDIS;
  4026e2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4026e6:	f8df a050 	ldr.w	sl, [pc, #80]	; 402738 <usart_init_rs232+0x6c>
	ul_reg_val = 0;
  4026ea:	4e14      	ldr	r6, [pc, #80]	; (40273c <usart_init_rs232+0x70>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4026ec:	f8c0 a0e4 	str.w	sl, [r0, #228]	; 0xe4
	ul_reg_val = 0;
  4026f0:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
  4026f2:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4026f4:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4026f6:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4026f8:	f8c0 9000 	str.w	r9, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4026fc:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
  402700:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
  402704:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_DTRDIS;
  402708:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40270a:	b191      	cbz	r1, 402732 <usart_init_rs232+0x66>
  40270c:	460d      	mov	r5, r1
  40270e:	4b0c      	ldr	r3, [pc, #48]	; (402740 <usart_init_rs232+0x74>)
  402710:	6809      	ldr	r1, [r1, #0]
  402712:	4604      	mov	r4, r0
  402714:	4798      	blx	r3
  402716:	b960      	cbnz	r0, 402732 <usart_init_rs232+0x66>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402718:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
  40271c:	4313      	orrs	r3, r2
  40271e:	692a      	ldr	r2, [r5, #16]
  402720:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  402722:	68ea      	ldr	r2, [r5, #12]
  402724:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
  402726:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  402728:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
  40272a:	4313      	orrs	r3, r2
  40272c:	6063      	str	r3, [r4, #4]
}
  40272e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;
  402732:	2001      	movs	r0, #1
}
  402734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402738:	55534100 	.word	0x55534100
  40273c:	200195d0 	.word	0x200195d0
  402740:	00402671 	.word	0x00402671

00402744 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402744:	2340      	movs	r3, #64	; 0x40
  402746:	6003      	str	r3, [r0, #0]
}
  402748:	4770      	bx	lr
  40274a:	bf00      	nop

0040274c <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
  40274c:	2380      	movs	r3, #128	; 0x80
  40274e:	6003      	str	r3, [r0, #0]
}
  402750:	4770      	bx	lr
  402752:	bf00      	nop

00402754 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  402754:	2310      	movs	r3, #16
  402756:	6003      	str	r3, [r0, #0]
}
  402758:	4770      	bx	lr
  40275a:	bf00      	nop

0040275c <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
  40275c:	2320      	movs	r3, #32
  40275e:	6003      	str	r3, [r0, #0]
}
  402760:	4770      	bx	lr
  402762:	bf00      	nop

00402764 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  402764:	6081      	str	r1, [r0, #8]
}
  402766:	4770      	bx	lr

00402768 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  402768:	60c1      	str	r1, [r0, #12]
}
  40276a:	4770      	bx	lr

0040276c <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
  40276c:	6900      	ldr	r0, [r0, #16]
}
  40276e:	4770      	bx	lr

00402770 <usart_get_status>:
	return p_usart->US_CSR;
  402770:	6940      	ldr	r0, [r0, #20]
}
  402772:	4770      	bx	lr

00402774 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402774:	6943      	ldr	r3, [r0, #20]
  402776:	079b      	lsls	r3, r3, #30
  402778:	d5fc      	bpl.n	402774 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
  40277a:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40277e:	61c1      	str	r1, [r0, #28]
}
  402780:	2000      	movs	r0, #0
  402782:	4770      	bx	lr

00402784 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402788:	4b17      	ldr	r3, [pc, #92]	; (4027e8 <pio_handler_process+0x64>)
{
  40278a:	4607      	mov	r7, r0
  40278c:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
  40278e:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
  402790:	4b16      	ldr	r3, [pc, #88]	; (4027ec <pio_handler_process+0x68>)
	status = pio_get_interrupt_status(p_pio);
  402792:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402794:	4638      	mov	r0, r7
  402796:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402798:	4005      	ands	r5, r0
  40279a:	d019      	beq.n	4027d0 <pio_handler_process+0x4c>
  40279c:	4c14      	ldr	r4, [pc, #80]	; (4027f0 <pio_handler_process+0x6c>)
  40279e:	f104 0860 	add.w	r8, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4027a2:	6823      	ldr	r3, [r4, #0]
  4027a4:	42b3      	cmp	r3, r6
  4027a6:	d005      	beq.n	4027b4 <pio_handler_process+0x30>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4027a8:	4544      	cmp	r4, r8
  4027aa:	d011      	beq.n	4027d0 <pio_handler_process+0x4c>
			if (gs_interrupt_sources[i].id == ul_id) {
  4027ac:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
  4027ae:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
  4027b0:	42b3      	cmp	r3, r6
  4027b2:	d1f9      	bne.n	4027a8 <pio_handler_process+0x24>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4027b4:	6861      	ldr	r1, [r4, #4]
  4027b6:	4229      	tst	r1, r5
  4027b8:	d0f6      	beq.n	4027a8 <pio_handler_process+0x24>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4027ba:	68e3      	ldr	r3, [r4, #12]
  4027bc:	4630      	mov	r0, r6
  4027be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4027c0:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4027c2:	4544      	cmp	r4, r8
					status &= ~(gs_interrupt_sources[i].mask);
  4027c4:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
  4027c8:	d002      	beq.n	4027d0 <pio_handler_process+0x4c>
		while (status != 0) {
  4027ca:	3410      	adds	r4, #16
  4027cc:	2d00      	cmp	r5, #0
  4027ce:	d1e8      	bne.n	4027a2 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4027d0:	4b08      	ldr	r3, [pc, #32]	; (4027f4 <pio_handler_process+0x70>)
  4027d2:	681b      	ldr	r3, [r3, #0]
  4027d4:	b133      	cbz	r3, 4027e4 <pio_handler_process+0x60>
		if (pio_capture_handler) {
  4027d6:	4b08      	ldr	r3, [pc, #32]	; (4027f8 <pio_handler_process+0x74>)
  4027d8:	681b      	ldr	r3, [r3, #0]
  4027da:	b11b      	cbz	r3, 4027e4 <pio_handler_process+0x60>
			pio_capture_handler(p_pio);
  4027dc:	4638      	mov	r0, r7
		}
	}
#endif
}
  4027de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			pio_capture_handler(p_pio);
  4027e2:	4718      	bx	r3
}
  4027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4027e8:	00402ee1 	.word	0x00402ee1
  4027ec:	00402ee5 	.word	0x00402ee5
  4027f0:	200195d4 	.word	0x200195d4
  4027f4:	20019650 	.word	0x20019650
  4027f8:	20019648 	.word	0x20019648

004027fc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4027fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402800:	4f1d      	ldr	r7, [pc, #116]	; (402878 <pio_handler_set+0x7c>)
  402802:	683e      	ldr	r6, [r7, #0]
  402804:	2e06      	cmp	r6, #6
  402806:	d828      	bhi.n	40285a <pio_handler_set+0x5e>
  402808:	460d      	mov	r5, r1
  40280a:	4611      	mov	r1, r2
  40280c:	461a      	mov	r2, r3
  40280e:	4b1b      	ldr	r3, [pc, #108]	; (40287c <pio_handler_set+0x80>)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402810:	f04f 0e00 	mov.w	lr, #0
  402814:	469c      	mov	ip, r3
  402816:	f106 0801 	add.w	r8, r6, #1
  40281a:	e004      	b.n	402826 <pio_handler_set+0x2a>
  40281c:	4576      	cmp	r6, lr
  40281e:	f10c 0c10 	add.w	ip, ip, #16
  402822:	d01d      	beq.n	402860 <pio_handler_set+0x64>
  402824:	46a6      	mov	lr, r4
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402826:	f8dc 9000 	ldr.w	r9, [ip]
  40282a:	f10e 0401 	add.w	r4, lr, #1
  40282e:	45a9      	cmp	r9, r5
  402830:	d1f4      	bne.n	40281c <pio_handler_set+0x20>
  402832:	f8dc 9004 	ldr.w	r9, [ip, #4]
  402836:	4589      	cmp	r9, r1
  402838:	d1f0      	bne.n	40281c <pio_handler_set+0x20>

	/* Define new source */
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
  40283a:	9e08      	ldr	r6, [sp, #32]
	pSource->id = ul_id;
  40283c:	eb03 140e 	add.w	r4, r3, lr, lsl #4
	pSource->attr = ul_attr;
  402840:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
  402844:	60e6      	str	r6, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  402846:	45f0      	cmp	r8, lr
	pSource->id = ul_id;
  402848:	ea4f 140e 	mov.w	r4, lr, lsl #4
  40284c:	511d      	str	r5, [r3, r4]
	if (i == gs_ul_nb_sources + 1) {
  40284e:	d00f      	beq.n	402870 <pio_handler_set+0x74>
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402850:	4b0b      	ldr	r3, [pc, #44]	; (402880 <pio_handler_set+0x84>)
  402852:	4798      	blx	r3

	return 0;
  402854:	2000      	movs	r0, #0
}
  402856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
  40285a:	2001      	movs	r0, #1
}
  40285c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pSource->id = ul_id;
  402860:	eb03 1406 	add.w	r4, r3, r6, lsl #4
  402864:	0136      	lsls	r6, r6, #4
  402866:	519d      	str	r5, [r3, r6]
	pSource->attr = ul_attr;
  402868:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
  40286c:	9b08      	ldr	r3, [sp, #32]
  40286e:	60e3      	str	r3, [r4, #12]
		gs_ul_nb_sources++;
  402870:	f8c7 8000 	str.w	r8, [r7]
  402874:	e7ec      	b.n	402850 <pio_handler_set+0x54>
  402876:	bf00      	nop
  402878:	20019644 	.word	0x20019644
  40287c:	200195d4 	.word	0x200195d4
  402880:	00402eb1 	.word	0x00402eb1

00402884 <pio_capture_handler_set>:
 * \param p_handler Interrupt handler function pointer.
 *
 */
void pio_capture_handler_set(void (*p_handler)(Pio *))
{
	pio_capture_handler = p_handler;
  402884:	4b01      	ldr	r3, [pc, #4]	; (40288c <pio_capture_handler_set+0x8>)
  402886:	6018      	str	r0, [r3, #0]
}
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	20019648 	.word	0x20019648

00402890 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
  402890:	210b      	movs	r1, #11
  402892:	4801      	ldr	r0, [pc, #4]	; (402898 <PIOA_Handler+0x8>)
  402894:	4b01      	ldr	r3, [pc, #4]	; (40289c <PIOA_Handler+0xc>)
  402896:	4718      	bx	r3
  402898:	400e0e00 	.word	0x400e0e00
  40289c:	00402785 	.word	0x00402785

004028a0 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
  4028a0:	210c      	movs	r1, #12
  4028a2:	4801      	ldr	r0, [pc, #4]	; (4028a8 <PIOB_Handler+0x8>)
  4028a4:	4b01      	ldr	r3, [pc, #4]	; (4028ac <PIOB_Handler+0xc>)
  4028a6:	4718      	bx	r3
  4028a8:	400e1000 	.word	0x400e1000
  4028ac:	00402785 	.word	0x00402785

004028b0 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4028b0:	4a2d      	ldr	r2, [pc, #180]	; (402968 <SystemCoreClockUpdate+0xb8>)
  4028b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4028b4:	f003 0303 	and.w	r3, r3, #3
  4028b8:	2b01      	cmp	r3, #1
  4028ba:	d041      	beq.n	402940 <SystemCoreClockUpdate+0x90>
  4028bc:	3b02      	subs	r3, #2
  4028be:	2b01      	cmp	r3, #1
  4028c0:	d834      	bhi.n	40292c <SystemCoreClockUpdate+0x7c>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028c2:	6a13      	ldr	r3, [r2, #32]
  4028c4:	01d9      	lsls	r1, r3, #7
  4028c6:	d40a      	bmi.n	4028de <SystemCoreClockUpdate+0x2e>
				SystemCoreClock = CHIP_FREQ_XTAL;
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028c8:	6a12      	ldr	r2, [r2, #32]
  4028ca:	f002 0270 	and.w	r2, r2, #112	; 0x70
  4028ce:	2a10      	cmp	r2, #16
  4028d0:	d046      	beq.n	402960 <SystemCoreClockUpdate+0xb0>
  4028d2:	4b26      	ldr	r3, [pc, #152]	; (40296c <SystemCoreClockUpdate+0xbc>)
  4028d4:	4926      	ldr	r1, [pc, #152]	; (402970 <SystemCoreClockUpdate+0xc0>)
  4028d6:	2a20      	cmp	r2, #32
  4028d8:	bf18      	it	ne
  4028da:	460b      	movne	r3, r1
  4028dc:	e000      	b.n	4028e0 <SystemCoreClockUpdate+0x30>
  4028de:	4b23      	ldr	r3, [pc, #140]	; (40296c <SystemCoreClockUpdate+0xbc>)
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4028e0:	4a21      	ldr	r2, [pc, #132]	; (402968 <SystemCoreClockUpdate+0xb8>)
  4028e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
  4028e4:	f001 0103 	and.w	r1, r1, #3
  4028e8:	2902      	cmp	r1, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4028ea:	bf0a      	itet	eq
  4028ec:	6a91      	ldreq	r1, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4028ee:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4028f0:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4028f2:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4028f6:	fb01 3303 	mla	r3, r1, r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4028fa:	bf18      	it	ne
  4028fc:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4028fe:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402900:	fbb3 f3f2 	udiv	r3, r3, r2
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402904:	4918      	ldr	r1, [pc, #96]	; (402968 <SystemCoreClockUpdate+0xb8>)
  402906:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402908:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40290c:	2a70      	cmp	r2, #112	; 0x70
  40290e:	d006      	beq.n	40291e <SystemCoreClockUpdate+0x6e>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402910:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402912:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  402916:	40d3      	lsrs	r3, r2
  402918:	4a16      	ldr	r2, [pc, #88]	; (402974 <SystemCoreClockUpdate+0xc4>)
  40291a:	6013      	str	r3, [r2, #0]
	}
}
  40291c:	4770      	bx	lr
		SystemCoreClock /= 3U;
  40291e:	4a16      	ldr	r2, [pc, #88]	; (402978 <SystemCoreClockUpdate+0xc8>)
  402920:	fba2 2303 	umull	r2, r3, r2, r3
  402924:	4a13      	ldr	r2, [pc, #76]	; (402974 <SystemCoreClockUpdate+0xc4>)
  402926:	085b      	lsrs	r3, r3, #1
  402928:	6013      	str	r3, [r2, #0]
}
  40292a:	4770      	bx	lr
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40292c:	4b13      	ldr	r3, [pc, #76]	; (40297c <SystemCoreClockUpdate+0xcc>)
  40292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402930:	f013 0f80 	tst.w	r3, #128	; 0x80
  402934:	bf0c      	ite	eq
  402936:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
  40293a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
  40293e:	e7e1      	b.n	402904 <SystemCoreClockUpdate+0x54>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402940:	6a13      	ldr	r3, [r2, #32]
  402942:	01db      	lsls	r3, r3, #7
  402944:	d40a      	bmi.n	40295c <SystemCoreClockUpdate+0xac>
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402946:	6a12      	ldr	r2, [r2, #32]
  402948:	f002 0270 	and.w	r2, r2, #112	; 0x70
  40294c:	2a10      	cmp	r2, #16
  40294e:	d009      	beq.n	402964 <SystemCoreClockUpdate+0xb4>
  402950:	4b06      	ldr	r3, [pc, #24]	; (40296c <SystemCoreClockUpdate+0xbc>)
  402952:	4907      	ldr	r1, [pc, #28]	; (402970 <SystemCoreClockUpdate+0xc0>)
  402954:	2a20      	cmp	r2, #32
  402956:	bf18      	it	ne
  402958:	460b      	movne	r3, r1
  40295a:	e7d3      	b.n	402904 <SystemCoreClockUpdate+0x54>
  40295c:	4b03      	ldr	r3, [pc, #12]	; (40296c <SystemCoreClockUpdate+0xbc>)
  40295e:	e7d1      	b.n	402904 <SystemCoreClockUpdate+0x54>
  402960:	4b07      	ldr	r3, [pc, #28]	; (402980 <SystemCoreClockUpdate+0xd0>)
  402962:	e7bd      	b.n	4028e0 <SystemCoreClockUpdate+0x30>
  402964:	4b06      	ldr	r3, [pc, #24]	; (402980 <SystemCoreClockUpdate+0xd0>)
  402966:	e7cd      	b.n	402904 <SystemCoreClockUpdate+0x54>
  402968:	400e0400 	.word	0x400e0400
  40296c:	00b71b00 	.word	0x00b71b00
  402970:	003d0900 	.word	0x003d0900
  402974:	200005fc 	.word	0x200005fc
  402978:	aaaaaaab 	.word	0xaaaaaaab
  40297c:	400e1400 	.word	0x400e1400
  402980:	007a1200 	.word	0x007a1200

00402984 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402984:	4b17      	ldr	r3, [pc, #92]	; (4029e4 <system_init_flash+0x60>)
  402986:	4298      	cmp	r0, r3
  402988:	d806      	bhi.n	402998 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40298a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40298e:	4916      	ldr	r1, [pc, #88]	; (4029e8 <system_init_flash+0x64>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402990:	4a16      	ldr	r2, [pc, #88]	; (4029ec <system_init_flash+0x68>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402992:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402994:	6013      	str	r3, [r2, #0]
  402996:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402998:	4b15      	ldr	r3, [pc, #84]	; (4029f0 <system_init_flash+0x6c>)
  40299a:	4298      	cmp	r0, r3
  40299c:	d205      	bcs.n	4029aa <system_init_flash+0x26>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40299e:	4b15      	ldr	r3, [pc, #84]	; (4029f4 <system_init_flash+0x70>)
  4029a0:	4911      	ldr	r1, [pc, #68]	; (4029e8 <system_init_flash+0x64>)
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4029a2:	4a12      	ldr	r2, [pc, #72]	; (4029ec <system_init_flash+0x68>)
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4029a4:	600b      	str	r3, [r1, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4029a6:	6013      	str	r3, [r2, #0]
  4029a8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4029aa:	4b13      	ldr	r3, [pc, #76]	; (4029f8 <system_init_flash+0x74>)
  4029ac:	4298      	cmp	r0, r3
  4029ae:	d308      	bcc.n	4029c2 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4029b0:	4b12      	ldr	r3, [pc, #72]	; (4029fc <system_init_flash+0x78>)
  4029b2:	4298      	cmp	r0, r3
  4029b4:	d80b      	bhi.n	4029ce <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029b6:	4b12      	ldr	r3, [pc, #72]	; (402a00 <system_init_flash+0x7c>)
  4029b8:	490b      	ldr	r1, [pc, #44]	; (4029e8 <system_init_flash+0x64>)
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029ba:	4a0c      	ldr	r2, [pc, #48]	; (4029ec <system_init_flash+0x68>)
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029bc:	600b      	str	r3, [r1, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029be:	6013      	str	r3, [r2, #0]
  4029c0:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029c2:	4b10      	ldr	r3, [pc, #64]	; (402a04 <system_init_flash+0x80>)
  4029c4:	4908      	ldr	r1, [pc, #32]	; (4029e8 <system_init_flash+0x64>)
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029c6:	4a09      	ldr	r2, [pc, #36]	; (4029ec <system_init_flash+0x68>)
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029c8:	600b      	str	r3, [r1, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4029ca:	6013      	str	r3, [r2, #0]
  4029cc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4029ce:	4b0e      	ldr	r3, [pc, #56]	; (402a08 <system_init_flash+0x84>)
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029d0:	4905      	ldr	r1, [pc, #20]	; (4029e8 <system_init_flash+0x64>)
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4029d2:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4029d4:	bf94      	ite	ls
  4029d6:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029da:	4b0c      	ldrhi	r3, [pc, #48]	; (402a0c <system_init_flash+0x88>)
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029dc:	4a03      	ldr	r2, [pc, #12]	; (4029ec <system_init_flash+0x68>)
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029de:	600b      	str	r3, [r1, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4029e0:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
#endif
}
  4029e2:	4770      	bx	lr
  4029e4:	01312cff 	.word	0x01312cff
  4029e8:	400e0a00 	.word	0x400e0a00
  4029ec:	400e0c00 	.word	0x400e0c00
  4029f0:	02625a00 	.word	0x02625a00
  4029f4:	04000100 	.word	0x04000100
  4029f8:	03938700 	.word	0x03938700
  4029fc:	04c4b3ff 	.word	0x04c4b3ff
  402a00:	04000300 	.word	0x04000300
  402a04:	04000200 	.word	0x04000200
  402a08:	05f5e0ff 	.word	0x05f5e0ff
  402a0c:	04000500 	.word	0x04000500

00402a10 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
  402a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a14:	2320      	movs	r3, #32
  402a16:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a18:	4c0c      	ldr	r4, [pc, #48]	; (402a4c <LED_Off+0x3c>)
  402a1a:	42ab      	cmp	r3, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
  402a1c:	4f0c      	ldr	r7, [pc, #48]	; (402a50 <LED_Off+0x40>)
				gpio_set_pin_low(led_gpio);
  402a1e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 402a54 <LED_Off+0x44>
  402a22:	f104 0618 	add.w	r6, r4, #24
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a26:	d005      	beq.n	402a34 <LED_Off+0x24>
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  402a28:	42b4      	cmp	r4, r6
  402a2a:	d00a      	beq.n	402a42 <LED_Off+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a2c:	f854 3f08 	ldr.w	r3, [r4, #8]!
  402a30:	42ab      	cmp	r3, r5
  402a32:	d1f9      	bne.n	402a28 <LED_Off+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  402a34:	6863      	ldr	r3, [r4, #4]
				gpio_set_pin_low(led_gpio);
  402a36:	4628      	mov	r0, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  402a38:	2b01      	cmp	r3, #1
  402a3a:	d004      	beq.n	402a46 <LED_Off+0x36>
				gpio_set_pin_high(led_gpio);
  402a3c:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  402a3e:	42b4      	cmp	r4, r6
  402a40:	d1f4      	bne.n	402a2c <LED_Off+0x1c>
			}
		}
	}
}
  402a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gpio_set_pin_low(led_gpio);
  402a46:	47c0      	blx	r8
  402a48:	e7ee      	b.n	402a28 <LED_Off+0x18>
  402a4a:	bf00      	nop
  402a4c:	004059a4 	.word	0x004059a4
  402a50:	00402f05 	.word	0x00402f05
  402a54:	00402f21 	.word	0x00402f21

00402a58 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
  402a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a5c:	2320      	movs	r3, #32
  402a5e:	4605      	mov	r5, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a60:	4c0c      	ldr	r4, [pc, #48]	; (402a94 <LED_On+0x3c>)
  402a62:	42ab      	cmp	r3, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
  402a64:	4f0c      	ldr	r7, [pc, #48]	; (402a98 <LED_On+0x40>)
				gpio_set_pin_high(led_gpio);
  402a66:	f8df 8034 	ldr.w	r8, [pc, #52]	; 402a9c <LED_On+0x44>
  402a6a:	f104 0618 	add.w	r6, r4, #24
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a6e:	d005      	beq.n	402a7c <LED_On+0x24>
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  402a70:	42b4      	cmp	r4, r6
  402a72:	d00a      	beq.n	402a8a <LED_On+0x32>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  402a74:	f854 3f08 	ldr.w	r3, [r4, #8]!
  402a78:	42ab      	cmp	r3, r5
  402a7a:	d1f9      	bne.n	402a70 <LED_On+0x18>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  402a7c:	6863      	ldr	r3, [r4, #4]
				gpio_set_pin_high(led_gpio);
  402a7e:	4628      	mov	r0, r5
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  402a80:	2b01      	cmp	r3, #1
  402a82:	d004      	beq.n	402a8e <LED_On+0x36>
				gpio_set_pin_low(led_gpio);
  402a84:	47b8      	blx	r7
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  402a86:	42b4      	cmp	r4, r6
  402a88:	d1f4      	bne.n	402a74 <LED_On+0x1c>
			}
		}
	}
}
  402a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				gpio_set_pin_high(led_gpio);
  402a8e:	47c0      	blx	r8
  402a90:	e7ee      	b.n	402a70 <LED_On+0x18>
  402a92:	bf00      	nop
  402a94:	004059a4 	.word	0x004059a4
  402a98:	00402f21 	.word	0x00402f21
  402a9c:	00402f05 	.word	0x00402f05

00402aa0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402aa0:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402aa2:	213e      	movs	r1, #62	; 0x3e
  402aa4:	2000      	movs	r0, #0
  402aa6:	4b0b      	ldr	r3, [pc, #44]	; (402ad4 <sysclk_enable_usb+0x34>)
  402aa8:	4798      	blx	r3
		break;
  402aaa:	4c0b      	ldr	r4, [pc, #44]	; (402ad8 <sysclk_enable_usb+0x38>)
		return pmc_osc_is_ready_mainck();
  402aac:	47a0      	blx	r4
  402aae:	2800      	cmp	r0, #0
  402ab0:	d0fc      	beq.n	402aac <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402ab2:	4b0a      	ldr	r3, [pc, #40]	; (402adc <sysclk_enable_usb+0x3c>)
  402ab4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402ab6:	4b0a      	ldr	r3, [pc, #40]	; (402ae0 <sysclk_enable_usb+0x40>)
  402ab8:	4a0a      	ldr	r2, [pc, #40]	; (402ae4 <sysclk_enable_usb+0x44>)
  402aba:	4c0b      	ldr	r4, [pc, #44]	; (402ae8 <sysclk_enable_usb+0x48>)
  402abc:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402abe:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402ac0:	2800      	cmp	r0, #0
  402ac2:	d0fc      	beq.n	402abe <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402ac4:	4b09      	ldr	r3, [pc, #36]	; (402aec <sysclk_enable_usb+0x4c>)
  402ac6:	2001      	movs	r0, #1
  402ac8:	4798      	blx	r3
		pmc_enable_udpck();
		return;
	}
#endif
}
  402aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pmc_enable_udpck();
  402ace:	4b08      	ldr	r3, [pc, #32]	; (402af0 <sysclk_enable_usb+0x50>)
  402ad0:	4718      	bx	r3
  402ad2:	bf00      	nop
  402ad4:	00402c15 	.word	0x00402c15
  402ad8:	00402c65 	.word	0x00402c65
  402adc:	00402c95 	.word	0x00402c95
  402ae0:	400e0400 	.word	0x400e0400
  402ae4:	000f3f02 	.word	0x000f3f02
  402ae8:	00402ca1 	.word	0x00402ca1
  402aec:	00402d49 	.word	0x00402d49
  402af0:	00402d5d 	.word	0x00402d5d

00402af4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402af4:	b570      	push	{r4, r5, r6, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402af6:	480f      	ldr	r0, [pc, #60]	; (402b34 <sysclk_init+0x40>)
  402af8:	4d0f      	ldr	r5, [pc, #60]	; (402b38 <sysclk_init+0x44>)
  402afa:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402afc:	213e      	movs	r1, #62	; 0x3e
  402afe:	2000      	movs	r0, #0
  402b00:	4b0e      	ldr	r3, [pc, #56]	; (402b3c <sysclk_init+0x48>)
  402b02:	4798      	blx	r3
		break;
  402b04:	4c0e      	ldr	r4, [pc, #56]	; (402b40 <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
  402b06:	47a0      	blx	r4
  402b08:	2800      	cmp	r0, #0
  402b0a:	d0fc      	beq.n	402b06 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  402b0c:	4b0d      	ldr	r3, [pc, #52]	; (402b44 <sysclk_init+0x50>)
  402b0e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402b10:	4b0d      	ldr	r3, [pc, #52]	; (402b48 <sysclk_init+0x54>)
  402b12:	4a0e      	ldr	r2, [pc, #56]	; (402b4c <sysclk_init+0x58>)
  402b14:	4c0e      	ldr	r4, [pc, #56]	; (402b50 <sysclk_init+0x5c>)
  402b16:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  402b18:	47a0      	blx	r4
  402b1a:	2800      	cmp	r0, #0
  402b1c:	d0fc      	beq.n	402b18 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402b1e:	4b0d      	ldr	r3, [pc, #52]	; (402b54 <sysclk_init+0x60>)
  402b20:	2010      	movs	r0, #16
  402b22:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402b24:	4b0c      	ldr	r3, [pc, #48]	; (402b58 <sysclk_init+0x64>)
  402b26:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402b28:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  402b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
  402b2e:	4801      	ldr	r0, [pc, #4]	; (402b34 <sysclk_init+0x40>)
  402b30:	4718      	bx	r3
  402b32:	bf00      	nop
  402b34:	07270e00 	.word	0x07270e00
  402b38:	00402985 	.word	0x00402985
  402b3c:	00402c15 	.word	0x00402c15
  402b40:	00402c65 	.word	0x00402c65
  402b44:	00402c75 	.word	0x00402c75
  402b48:	400e0400 	.word	0x400e0400
  402b4c:	20133f01 	.word	0x20133f01
  402b50:	00402c85 	.word	0x00402c85
  402b54:	00402bb9 	.word	0x00402bb9
  402b58:	004028b1 	.word	0x004028b1

00402b5c <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402b5c:	4915      	ldr	r1, [pc, #84]	; (402bb4 <pmc_switch_mck_to_mainck+0x58>)
  402b5e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402b60:	f023 0303 	bic.w	r3, r3, #3
  402b64:	f043 0301 	orr.w	r3, r3, #1
  402b68:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b6a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402b6c:	071b      	lsls	r3, r3, #28
  402b6e:	bf58      	it	pl
  402b70:	f44f 6300 	movpl.w	r3, #2048	; 0x800
  402b74:	d502      	bpl.n	402b7c <pmc_switch_mck_to_mainck+0x20>
  402b76:	e004      	b.n	402b82 <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402b78:	3b01      	subs	r3, #1
  402b7a:	d016      	beq.n	402baa <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b7c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402b7e:	0712      	lsls	r2, r2, #28
  402b80:	d5fa      	bpl.n	402b78 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402b82:	490c      	ldr	r1, [pc, #48]	; (402bb4 <pmc_switch_mck_to_mainck+0x58>)
  402b84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402b8a:	4303      	orrs	r3, r0
  402b8c:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402b8e:	6e88      	ldr	r0, [r1, #104]	; 0x68
  402b90:	f010 0008 	ands.w	r0, r0, #8
  402b94:	bf08      	it	eq
  402b96:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  402b9a:	d002      	beq.n	402ba2 <pmc_switch_mck_to_mainck+0x46>
  402b9c:	e007      	b.n	402bae <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402b9e:	3b01      	subs	r3, #1
  402ba0:	d003      	beq.n	402baa <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ba2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402ba4:	0712      	lsls	r2, r2, #28
  402ba6:	d5fa      	bpl.n	402b9e <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
  402ba8:	4770      	bx	lr
			return 1;
  402baa:	2001      	movs	r0, #1
  402bac:	4770      	bx	lr
	return 0;
  402bae:	2000      	movs	r0, #0
  402bb0:	4770      	bx	lr
  402bb2:	bf00      	nop
  402bb4:	400e0400 	.word	0x400e0400

00402bb8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402bb8:	4915      	ldr	r1, [pc, #84]	; (402c10 <pmc_switch_mck_to_pllack+0x58>)
  402bba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402bc0:	4303      	orrs	r3, r0
  402bc2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402bc4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  402bc6:	071b      	lsls	r3, r3, #28
  402bc8:	bf58      	it	pl
  402bca:	f44f 6300 	movpl.w	r3, #2048	; 0x800
  402bce:	d502      	bpl.n	402bd6 <pmc_switch_mck_to_pllack+0x1e>
  402bd0:	e004      	b.n	402bdc <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402bd2:	3b01      	subs	r3, #1
  402bd4:	d017      	beq.n	402c06 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402bd6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402bd8:	0710      	lsls	r0, r2, #28
  402bda:	d5fa      	bpl.n	402bd2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402bdc:	490c      	ldr	r1, [pc, #48]	; (402c10 <pmc_switch_mck_to_pllack+0x58>)
  402bde:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402be0:	f023 0303 	bic.w	r3, r3, #3
  402be4:	f043 0302 	orr.w	r3, r3, #2
  402be8:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402bea:	6e88      	ldr	r0, [r1, #104]	; 0x68
  402bec:	f010 0008 	ands.w	r0, r0, #8
  402bf0:	bf08      	it	eq
  402bf2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  402bf6:	d002      	beq.n	402bfe <pmc_switch_mck_to_pllack+0x46>
  402bf8:	e007      	b.n	402c0a <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402bfa:	3b01      	subs	r3, #1
  402bfc:	d003      	beq.n	402c06 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402bfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402c00:	0712      	lsls	r2, r2, #28
  402c02:	d5fa      	bpl.n	402bfa <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
  402c04:	4770      	bx	lr
			return 1;
  402c06:	2001      	movs	r0, #1
  402c08:	4770      	bx	lr
	return 0;
  402c0a:	2000      	movs	r0, #0
  402c0c:	4770      	bx	lr
  402c0e:	bf00      	nop
  402c10:	400e0400 	.word	0x400e0400

00402c14 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402c14:	b138      	cbz	r0, 402c26 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402c16:	4910      	ldr	r1, [pc, #64]	; (402c58 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402c18:	4a10      	ldr	r2, [pc, #64]	; (402c5c <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402c1a:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402c1c:	4b10      	ldr	r3, [pc, #64]	; (402c60 <pmc_switch_mainck_to_xtal+0x4c>)
  402c1e:	4002      	ands	r2, r0
  402c20:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402c22:	620b      	str	r3, [r1, #32]
  402c24:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402c26:	4a0c      	ldr	r2, [pc, #48]	; (402c58 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402c28:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402c2a:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402c2c:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402c2e:	f420 115c 	bic.w	r1, r0, #3604480	; 0x370000
  402c32:	f021 0103 	bic.w	r1, r1, #3
  402c36:	430b      	orrs	r3, r1
  402c38:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402c3c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402c40:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402c42:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402c44:	07db      	lsls	r3, r3, #31
  402c46:	d5fc      	bpl.n	402c42 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402c48:	6a13      	ldr	r3, [r2, #32]
  402c4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402c52:	6213      	str	r3, [r2, #32]
	}
}
  402c54:	4770      	bx	lr
  402c56:	bf00      	nop
  402c58:	400e0400 	.word	0x400e0400
  402c5c:	fec8fffc 	.word	0xfec8fffc
  402c60:	01370002 	.word	0x01370002

00402c64 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402c64:	4b02      	ldr	r3, [pc, #8]	; (402c70 <pmc_osc_is_ready_mainck+0xc>)
  402c66:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402c68:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402c6c:	4770      	bx	lr
  402c6e:	bf00      	nop
  402c70:	400e0400 	.word	0x400e0400

00402c74 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402c74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402c78:	4b01      	ldr	r3, [pc, #4]	; (402c80 <pmc_disable_pllack+0xc>)
  402c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402c7c:	4770      	bx	lr
  402c7e:	bf00      	nop
  402c80:	400e0400 	.word	0x400e0400

00402c84 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402c84:	4b02      	ldr	r3, [pc, #8]	; (402c90 <pmc_is_locked_pllack+0xc>)
  402c86:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402c88:	f000 0002 	and.w	r0, r0, #2
  402c8c:	4770      	bx	lr
  402c8e:	bf00      	nop
  402c90:	400e0400 	.word	0x400e0400

00402c94 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402c94:	2200      	movs	r2, #0
  402c96:	4b01      	ldr	r3, [pc, #4]	; (402c9c <pmc_disable_pllbck+0x8>)
  402c98:	62da      	str	r2, [r3, #44]	; 0x2c
}
  402c9a:	4770      	bx	lr
  402c9c:	400e0400 	.word	0x400e0400

00402ca0 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402ca0:	4b02      	ldr	r3, [pc, #8]	; (402cac <pmc_is_locked_pllbck+0xc>)
  402ca2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402ca4:	f000 0004 	and.w	r0, r0, #4
  402ca8:	4770      	bx	lr
  402caa:	bf00      	nop
  402cac:	400e0400 	.word	0x400e0400

00402cb0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402cb0:	2822      	cmp	r0, #34	; 0x22
  402cb2:	d819      	bhi.n	402ce8 <pmc_enable_periph_clk+0x38>
		return 1;
	}

	if (ul_id < 32) {
  402cb4:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402cb6:	f04f 0301 	mov.w	r3, #1
  402cba:	4a0d      	ldr	r2, [pc, #52]	; (402cf0 <pmc_enable_periph_clk+0x40>)
	if (ul_id < 32) {
  402cbc:	d808      	bhi.n	402cd0 <pmc_enable_periph_clk+0x20>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402cbe:	6991      	ldr	r1, [r2, #24]
  402cc0:	4083      	lsls	r3, r0
  402cc2:	ea33 0101 	bics.w	r1, r3, r1
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402cc6:	f04f 0000 	mov.w	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402cca:	d010      	beq.n	402cee <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
  402ccc:	6113      	str	r3, [r2, #16]
  402cce:	4770      	bx	lr
		ul_id -= 32;
  402cd0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402cd2:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
  402cd6:	4083      	lsls	r3, r0
  402cd8:	ea33 0101 	bics.w	r1, r3, r1
	return 0;
  402cdc:	f04f 0000 	mov.w	r0, #0
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402ce0:	d004      	beq.n	402cec <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER1 = 1 << ul_id;
  402ce2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  402ce6:	4770      	bx	lr
		return 1;
  402ce8:	2001      	movs	r0, #1
  402cea:	4770      	bx	lr
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402cec:	4770      	bx	lr
  402cee:	4770      	bx	lr
  402cf0:	400e0400 	.word	0x400e0400

00402cf4 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402cf4:	2822      	cmp	r0, #34	; 0x22
  402cf6:	d816      	bhi.n	402d26 <pmc_disable_periph_clk+0x32>
		return 1;
	}

	if (ul_id < 32) {
  402cf8:	281f      	cmp	r0, #31
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402cfa:	f04f 0301 	mov.w	r3, #1
  402cfe:	4a0d      	ldr	r2, [pc, #52]	; (402d34 <pmc_disable_periph_clk+0x40>)
	if (ul_id < 32) {
  402d00:	d807      	bhi.n	402d12 <pmc_disable_periph_clk+0x1e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402d02:	6991      	ldr	r1, [r2, #24]
  402d04:	4083      	lsls	r3, r0
  402d06:	ea33 0101 	bics.w	r1, r3, r1
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402d0a:	f04f 0000 	mov.w	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402d0e:	d00f      	beq.n	402d30 <pmc_disable_periph_clk+0x3c>
  402d10:	4770      	bx	lr
		ul_id -= 32;
  402d12:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402d14:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
  402d18:	4083      	lsls	r3, r0
  402d1a:	ea33 0101 	bics.w	r1, r3, r1
	return 0;
  402d1e:	f04f 0000 	mov.w	r0, #0
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402d22:	d002      	beq.n	402d2a <pmc_disable_periph_clk+0x36>
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402d24:	4770      	bx	lr
		return 1;
  402d26:	2001      	movs	r0, #1
  402d28:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  402d2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  402d2e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  402d30:	6153      	str	r3, [r2, #20]
  402d32:	4770      	bx	lr
  402d34:	400e0400 	.word	0x400e0400

00402d38 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  402d38:	f44f 7380 	mov.w	r3, #256	; 0x100
  402d3c:	4a01      	ldr	r2, [pc, #4]	; (402d44 <pmc_enable_pck+0xc>)
  402d3e:	4083      	lsls	r3, r0
  402d40:	6013      	str	r3, [r2, #0]
}
  402d42:	4770      	bx	lr
  402d44:	400e0400 	.word	0x400e0400

00402d48 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  402d48:	0200      	lsls	r0, r0, #8
  402d4a:	4b03      	ldr	r3, [pc, #12]	; (402d58 <pmc_switch_udpck_to_pllbck+0x10>)
  402d4c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  402d50:	f040 0001 	orr.w	r0, r0, #1
  402d54:	6398      	str	r0, [r3, #56]	; 0x38
}
  402d56:	4770      	bx	lr
  402d58:	400e0400 	.word	0x400e0400

00402d5c <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  402d5c:	2280      	movs	r2, #128	; 0x80
  402d5e:	4b01      	ldr	r3, [pc, #4]	; (402d64 <pmc_enable_udpck+0x8>)
  402d60:	601a      	str	r2, [r3, #0]
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  402d62:	4770      	bx	lr
  402d64:	400e0400 	.word	0x400e0400

00402d68 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  402d68:	4b03      	ldr	r3, [pc, #12]	; (402d78 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402d6a:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  402d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402d70:	4310      	orrs	r0, r2
  402d72:	6718      	str	r0, [r3, #112]	; 0x70
}
  402d74:	4770      	bx	lr
  402d76:	bf00      	nop
  402d78:	400e0400 	.word	0x400e0400

00402d7c <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
  402d7c:	4b01      	ldr	r3, [pc, #4]	; (402d84 <udi_vendor_getsetting+0x8>)
}
  402d7e:	7818      	ldrb	r0, [r3, #0]
  402d80:	4770      	bx	lr
  402d82:	bf00      	nop
  402d84:	2001964c 	.word	0x2001964c

00402d88 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
  402d88:	4b02      	ldr	r3, [pc, #8]	; (402d94 <udi_vendor_disable+0xc>)
  402d8a:	781b      	ldrb	r3, [r3, #0]
  402d8c:	b103      	cbz	r3, 402d90 <udi_vendor_disable+0x8>
}
  402d8e:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
  402d90:	4b01      	ldr	r3, [pc, #4]	; (402d98 <udi_vendor_disable+0x10>)
  402d92:	4718      	bx	r3
  402d94:	2001964c 	.word	0x2001964c
  402d98:	00401e61 	.word	0x00401e61

00402d9c <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
  402d9c:	4b08      	ldr	r3, [pc, #32]	; (402dc0 <udi_vendor_setup+0x24>)
  402d9e:	f993 2000 	ldrsb.w	r2, [r3]
  402da2:	781b      	ldrb	r3, [r3, #0]
  402da4:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
  402da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
  402daa:	db03      	blt.n	402db4 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
  402dac:	2b40      	cmp	r3, #64	; 0x40
  402dae:	d005      	beq.n	402dbc <udi_vendor_setup+0x20>
}
  402db0:	2000      	movs	r0, #0
  402db2:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
  402db4:	2b40      	cmp	r3, #64	; 0x40
  402db6:	d1fb      	bne.n	402db0 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
  402db8:	4b02      	ldr	r3, [pc, #8]	; (402dc4 <udi_vendor_setup+0x28>)
  402dba:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
  402dbc:	4b02      	ldr	r3, [pc, #8]	; (402dc8 <udi_vendor_setup+0x2c>)
  402dbe:	4718      	bx	r3
  402dc0:	200196ec 	.word	0x200196ec
  402dc4:	00401ebd 	.word	0x00401ebd
  402dc8:	00401e6d 	.word	0x00401e6d

00402dcc <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  402dcc:	4b06      	ldr	r3, [pc, #24]	; (402de8 <udi_vendor_enable+0x1c>)
{
  402dce:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
  402dd0:	4798      	blx	r3
  402dd2:	4a06      	ldr	r2, [pc, #24]	; (402dec <udi_vendor_enable+0x20>)
  402dd4:	78c3      	ldrb	r3, [r0, #3]
  402dd6:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
  402dd8:	b10b      	cbz	r3, 402dde <udi_vendor_enable+0x12>
}
  402dda:	2001      	movs	r0, #1
  402ddc:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  402dde:	4b04      	ldr	r3, [pc, #16]	; (402df0 <udi_vendor_enable+0x24>)
}
  402de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
  402de4:	4718      	bx	r3
  402de6:	bf00      	nop
  402de8:	00402051 	.word	0x00402051
  402dec:	2001964c 	.word	0x2001964c
  402df0:	00401e39 	.word	0x00401e39

00402df4 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402df4:	b530      	push	{r4, r5, lr}
  402df6:	4684      	mov	ip, r0
  402df8:	4615      	mov	r5, r2
  402dfa:	b083      	sub	sp, #12
  402dfc:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
  402dfe:	4662      	mov	r2, ip
  402e00:	2100      	movs	r1, #0
  402e02:	4c03      	ldr	r4, [pc, #12]	; (402e10 <udi_vendor_bulk_in_run+0x1c>)
  402e04:	9500      	str	r5, [sp, #0]
  402e06:	2081      	movs	r0, #129	; 0x81
  402e08:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402e0a:	b003      	add	sp, #12
  402e0c:	bd30      	pop	{r4, r5, pc}
  402e0e:	bf00      	nop
  402e10:	00404505 	.word	0x00404505

00402e14 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402e14:	b530      	push	{r4, r5, lr}
  402e16:	4684      	mov	ip, r0
  402e18:	4615      	mov	r5, r2
  402e1a:	b083      	sub	sp, #12
  402e1c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
  402e1e:	4662      	mov	r2, ip
  402e20:	2100      	movs	r1, #0
  402e22:	4c03      	ldr	r4, [pc, #12]	; (402e30 <udi_vendor_bulk_out_run+0x1c>)
  402e24:	9500      	str	r5, [sp, #0]
  402e26:	2002      	movs	r0, #2
  402e28:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
  402e2a:	b003      	add	sp, #12
  402e2c:	bd30      	pop	{r4, r5, pc}
  402e2e:	bf00      	nop
  402e30:	00404505 	.word	0x00404505

00402e34 <switch_configurations>:

// hack to get around windows being unable to handle multiple configurations
#if NAEUSB_MPSSE_SUPPORT == 1
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
  402e34:	4b03      	ldr	r3, [pc, #12]	; (402e44 <switch_configurations+0x10>)
  402e36:	4804      	ldr	r0, [pc, #16]	; (402e48 <switch_configurations+0x14>)
  402e38:	6859      	ldr	r1, [r3, #4]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
  402e3a:	4a04      	ldr	r2, [pc, #16]	; (402e4c <switch_configurations+0x18>)
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
  402e3c:	6008      	str	r0, [r1, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
  402e3e:	685b      	ldr	r3, [r3, #4]
  402e40:	605a      	str	r2, [r3, #4]
	#ifdef USB_DEVICE_HS_SUPPORT
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
	#endif
}
  402e42:	4770      	bx	lr
  402e44:	2000061c 	.word	0x2000061c
  402e48:	20000694 	.word	0x20000694
  402e4c:	20000614 	.word	0x20000614

00402e50 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  402e50:	f1a1 030e 	sub.w	r3, r1, #14
  402e54:	2b01      	cmp	r3, #1
  402e56:	d921      	bls.n	402e9c <efc_perform_command+0x4c>
{
  402e58:	b510      	push	{r4, lr}
  402e5a:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402e5c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402e60:	fab3 f383 	clz	r3, r3
  402e64:	095b      	lsrs	r3, r3, #5
  402e66:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402e68:	b672      	cpsid	i
  402e6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402e6e:	f04f 0c00 	mov.w	ip, #0
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  402e72:	4b0c      	ldr	r3, [pc, #48]	; (402ea4 <efc_perform_command+0x54>)
  402e74:	4c0c      	ldr	r4, [pc, #48]	; (402ea8 <efc_perform_command+0x58>)
  402e76:	ea03 2202 	and.w	r2, r3, r2, lsl #8
			EEFC_FCR_FCMD(ul_command));
  402e7a:	b2c9      	uxtb	r1, r1
  402e7c:	f884 c000 	strb.w	ip, [r4]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  402e80:	4311      	orrs	r1, r2
	return flags;
  402e82:	9a01      	ldr	r2, [sp, #4]
	result = efc_perform_fcr(p_efc,
  402e84:	4b09      	ldr	r3, [pc, #36]	; (402eac <efc_perform_command+0x5c>)
  402e86:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
  402e8a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402e8c:	b122      	cbz	r2, 402e98 <efc_perform_command+0x48>
		cpu_irq_enable();
  402e8e:	2301      	movs	r3, #1
  402e90:	7023      	strb	r3, [r4, #0]
  402e92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402e96:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
  402e98:	b002      	add	sp, #8
  402e9a:	bd10      	pop	{r4, pc}
		return EFC_RC_NOT_SUPPORT;
  402e9c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402ea0:	4770      	bx	lr
  402ea2:	bf00      	nop
  402ea4:	00ffff00 	.word	0x00ffff00
  402ea8:	20000718 	.word	0x20000718
  402eac:	2000008d 	.word	0x2000008d

00402eb0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402eb0:	06d3      	lsls	r3, r2, #27
  402eb2:	d50e      	bpl.n	402ed2 <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402eb4:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
  402eb6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402eba:	bf4c      	ite	mi
  402ebc:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402ec0:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402ec4:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402ec6:	bf4c      	ite	mi
  402ec8:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402ecc:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
  402ed0:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402ed2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	}
}
  402ed6:	4770      	bx	lr

00402ed8 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  402ed8:	6401      	str	r1, [r0, #64]	; 0x40
}
  402eda:	4770      	bx	lr

00402edc <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402edc:	6441      	str	r1, [r0, #68]	; 0x44
}
  402ede:	4770      	bx	lr

00402ee0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402ee0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402ee2:	4770      	bx	lr

00402ee4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402ee4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402ee6:	4770      	bx	lr

00402ee8 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ee8:	0943      	lsrs	r3, r0, #5
  402eea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402eee:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402ef2:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
  402ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  402ef6:	f000 001f 	and.w	r0, r0, #31
  402efa:	fa23 f000 	lsr.w	r0, r3, r0
}
  402efe:	f000 0001 	and.w	r0, r0, #1
  402f02:	4770      	bx	lr

00402f04 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402f04:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f06:	0943      	lsrs	r3, r0, #5
  402f08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402f0c:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402f10:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f14:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402f16:	fa02 f000 	lsl.w	r0, r2, r0
  402f1a:	6318      	str	r0, [r3, #48]	; 0x30
}
  402f1c:	4770      	bx	lr
  402f1e:	bf00      	nop

00402f20 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402f20:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f22:	0943      	lsrs	r3, r0, #5
  402f24:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402f28:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402f2c:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f30:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402f32:	fa02 f000 	lsl.w	r0, r2, r0
  402f36:	6358      	str	r0, [r3, #52]	; 0x34
}
  402f38:	4770      	bx	lr
  402f3a:	bf00      	nop

00402f3c <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  402f3c:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f3e:	0943      	lsrs	r3, r0, #5
  402f40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402f44:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402f48:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  402f4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
  402f4c:	f000 001f 	and.w	r0, r0, #31
  402f50:	fa02 f000 	lsl.w	r0, r2, r0
  402f54:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402f56:	bf14      	ite	ne
  402f58:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402f5a:	6318      	streq	r0, [r3, #48]	; 0x30
}
  402f5c:	4770      	bx	lr
  402f5e:	bf00      	nop

00402f60 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f60:	0943      	lsrs	r3, r0, #5
  402f62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
  402f66:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f6a:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
  402f6e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402f72:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
  402f76:	d07d      	beq.n	403074 <pio_configure_pin+0x114>
{
  402f78:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
  402f7a:	d81e      	bhi.n	402fba <pio_configure_pin+0x5a>
  402f7c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  402f80:	f000 808d 	beq.w	40309e <pio_configure_pin+0x13e>
  402f84:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
  402f88:	d138      	bne.n	402ffc <pio_configure_pin+0x9c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402f8a:	f04f 0c01 	mov.w	ip, #1
  402f8e:	f000 021f 	and.w	r2, r0, #31
  402f92:	fa0c f202 	lsl.w	r2, ip, r2
	p_pio->PIO_IDR = ul_mask;
  402f96:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  402f98:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402f9a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  402f9c:	4020      	ands	r0, r4
  402f9e:	ea20 0002 	bic.w	r0, r0, r2
  402fa2:	6718      	str	r0, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402fa4:	6f58      	ldr	r0, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402fa6:	4310      	orrs	r0, r2
  402fa8:	6758      	str	r0, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  402faa:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
  402fae:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  402fb0:	d13e      	bne.n	403030 <pio_configure_pin+0xd0>
		p_pio->PIO_PUDR = ul_mask;
  402fb2:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
  402fb4:	4660      	mov	r0, ip
}
  402fb6:	bc10      	pop	{r4}
  402fb8:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  402fba:	f001 4ce0 	and.w	ip, r1, #1879048192	; 0x70000000
  402fbe:	f1bc 5f40 	cmp.w	ip, #805306368	; 0x30000000
  402fc2:	d03e      	beq.n	403042 <pio_configure_pin+0xe2>
  402fc4:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
  402fc8:	d135      	bne.n	403036 <pio_configure_pin+0xd6>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402fca:	2201      	movs	r2, #1
  402fcc:	f000 001f 	and.w	r0, r0, #31
  402fd0:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
  402fd2:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
  402fd4:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
  402fd6:	bf4c      	ite	mi
  402fd8:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402fda:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402fdc:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
  402fe0:	bf14      	ite	ne
  402fe2:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
  402fe4:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402fe6:	078c      	lsls	r4, r1, #30
  402fe8:	d428      	bmi.n	40303c <pio_configure_pin+0xdc>
		if (ul_attribute & PIO_DEBOUNCE) {
  402fea:	0708      	lsls	r0, r1, #28
			p_pio->PIO_IFSCER = ul_mask;
  402fec:	bf48      	it	mi
  402fee:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  402ff2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402ff4:	601a      	str	r2, [r3, #0]
	return 1;
  402ff6:	2001      	movs	r0, #1
}
  402ff8:	bc10      	pop	{r4}
  402ffa:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  402ffc:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  403000:	d119      	bne.n	403036 <pio_configure_pin+0xd6>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  403002:	f04f 0c01 	mov.w	ip, #1
  403006:	f000 021f 	and.w	r2, r0, #31
  40300a:	fa0c f202 	lsl.w	r2, ip, r2
	p_pio->PIO_IDR = ul_mask;
  40300e:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  403010:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403012:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  403014:	4020      	ands	r0, r4
  403016:	ea20 0002 	bic.w	r0, r0, r2
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40301a:	6718      	str	r0, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40301c:	6f58      	ldr	r0, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40301e:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  403020:	4020      	ands	r0, r4
  403022:	ea20 0002 	bic.w	r0, r0, r2
  403026:	6758      	str	r0, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  403028:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
  40302c:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
  40302e:	d0c0      	beq.n	402fb2 <pio_configure_pin+0x52>
		p_pio->PIO_PUER = ul_mask;
  403030:	665a      	str	r2, [r3, #100]	; 0x64
}
  403032:	bc10      	pop	{r4}
  403034:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
  403036:	2000      	movs	r0, #0
}
  403038:	bc10      	pop	{r4}
  40303a:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  40303c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403040:	e7d7      	b.n	402ff2 <pio_configure_pin+0x92>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  403042:	2201      	movs	r2, #1
  403044:	f000 001f 	and.w	r0, r0, #31
  403048:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40304a:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40304e:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
  403052:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
  403054:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
  403056:	bf4c      	ite	mi
  403058:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40305a:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
  40305c:	b34c      	cbz	r4, 4030b2 <pio_configure_pin+0x152>
		p_pio->PIO_MDER = ul_mask;
  40305e:	651a      	str	r2, [r3, #80]	; 0x50
	if (ul_default_level) {
  403060:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
  403064:	bf0c      	ite	eq
  403066:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
  403068:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40306a:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40306c:	601a      	str	r2, [r3, #0]
	return 1;
  40306e:	2001      	movs	r0, #1
}
  403070:	bc10      	pop	{r4}
  403072:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  403074:	f04f 0c01 	mov.w	ip, #1
  403078:	f000 021f 	and.w	r2, r0, #31
  40307c:	fa0c f202 	lsl.w	r2, ip, r2
	p_pio->PIO_IDR = ul_mask;
  403080:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  403082:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403084:	4310      	orrs	r0, r2
  403086:	6718      	str	r0, [r3, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403088:	6f58      	ldr	r0, [r3, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40308a:	4310      	orrs	r0, r2
  40308c:	6758      	str	r0, [r3, #116]	; 0x74
	if (ul_pull_up_enable) {
  40308e:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
  403092:	605a      	str	r2, [r3, #4]
		p_pio->PIO_PUER = ul_mask;
  403094:	bf12      	itee	ne
  403096:	665a      	strne	r2, [r3, #100]	; 0x64
	return 1;
  403098:	4660      	moveq	r0, ip
		p_pio->PIO_PUDR = ul_mask;
  40309a:	661a      	streq	r2, [r3, #96]	; 0x60
}
  40309c:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40309e:	f04f 0c01 	mov.w	ip, #1
  4030a2:	f000 021f 	and.w	r2, r0, #31
  4030a6:	fa0c f202 	lsl.w	r2, ip, r2
	p_pio->PIO_IDR = ul_mask;
  4030aa:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABCDSR[0];
  4030ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4030ae:	4310      	orrs	r0, r2
  4030b0:	e7b3      	b.n	40301a <pio_configure_pin+0xba>
		p_pio->PIO_MDDR = ul_mask;
  4030b2:	655a      	str	r2, [r3, #84]	; 0x54
  4030b4:	e7d4      	b.n	403060 <pio_configure_pin+0x100>
  4030b6:	bf00      	nop

004030b8 <pio_enable_pin_interrupt>:
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  4030b8:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4030ba:	0943      	lsrs	r3, r0, #5
  4030bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4030c0:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  4030c4:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4030c8:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  4030ca:	fa02 f000 	lsl.w	r0, r2, r0
  4030ce:	6418      	str	r0, [r3, #64]	; 0x40
}
  4030d0:	4770      	bx	lr
  4030d2:	bf00      	nop

004030d4 <pio_capture_set_mode>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mode Bitmask of one or more modes.
 */
void pio_capture_set_mode(Pio *p_pio, uint32_t ul_mode)
{
	ul_mode &= (~PIO_PCMR_PCEN); /* Disable PIO capture mode */
  4030d4:	f021 0101 	bic.w	r1, r1, #1
	p_pio->PIO_PCMR = ul_mode;
  4030d8:	f8c0 1150 	str.w	r1, [r0, #336]	; 0x150
}
  4030dc:	4770      	bx	lr
  4030de:	bf00      	nop

004030e0 <pio_capture_enable>:
 * \param p_pio Pointer to a PIO instance.
 */
void pio_capture_enable(Pio *p_pio)
{
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
	pio_capture_enable_flag = true;
  4030e0:	2201      	movs	r2, #1
  4030e2:	4b04      	ldr	r3, [pc, #16]	; (4030f4 <pio_capture_enable+0x14>)
  4030e4:	601a      	str	r2, [r3, #0]
	p_pio->PIO_PCMR |= PIO_PCMR_PCEN;
  4030e6:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
  4030ea:	4313      	orrs	r3, r2
  4030ec:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
}
  4030f0:	4770      	bx	lr
  4030f2:	bf00      	nop
  4030f4:	20019650 	.word	0x20019650

004030f8 <pio_capture_read>:
 * \retval 1 I/O Failure, Capture data is not ready.
 */
uint32_t pio_capture_read(const Pio *p_pio, uint32_t *pul_data)
{
	/* Check if the data is ready */
	if ((p_pio->PIO_PCISR & PIO_PCISR_DRDY) == 0) {
  4030f8:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
  4030fc:	07db      	lsls	r3, r3, #31
		return 1;
	}

	/* Read data */
	*pul_data = p_pio->PIO_PCRHR;
  4030fe:	bf43      	ittte	mi
  403100:	f8d0 3164 	ldrmi.w	r3, [r0, #356]	; 0x164
	return 0;
  403104:	2000      	movmi	r0, #0
	*pul_data = p_pio->PIO_PCRHR;
  403106:	600b      	strmi	r3, [r1, #0]
		return 1;
  403108:	2001      	movpl	r0, #1
}
  40310a:	4770      	bx	lr

0040310c <pio_capture_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_capture_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_PCISR;
  40310c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
	p_pio->PIO_PCIER = ul_mask;
  403110:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
}
  403114:	4770      	bx	lr
  403116:	bf00      	nop

00403118 <pio_capture_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_capture_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_PCIDR = ul_mask;
  403118:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
}
  40311c:	4770      	bx	lr
  40311e:	bf00      	nop

00403120 <pio_capture_get_pdc_base>:
 */
Pdc *pio_capture_get_pdc_base(const Pio *p_pio)
{
	UNUSED(p_pio); /* Stop warning */
	return PDC_PIOA;
}
  403120:	4800      	ldr	r0, [pc, #0]	; (403124 <pio_capture_get_pdc_base+0x4>)
  403122:	4770      	bx	lr
  403124:	400e0f68 	.word	0x400e0f68

00403128 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
  403128:	e7fe      	b.n	403128 <Dummy_Handler>
  40312a:	bf00      	nop

0040312c <Reset_Handler>:
	if (pSrc > pDest) {
  40312c:	491a      	ldr	r1, [pc, #104]	; (403198 <Reset_Handler+0x6c>)
  40312e:	481b      	ldr	r0, [pc, #108]	; (40319c <Reset_Handler+0x70>)
{
  403130:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  403132:	4281      	cmp	r1, r0
  403134:	d91e      	bls.n	403174 <Reset_Handler+0x48>
		for (; pDest < &_erelocate;) {
  403136:	4a1a      	ldr	r2, [pc, #104]	; (4031a0 <Reset_Handler+0x74>)
  403138:	4290      	cmp	r0, r2
  40313a:	d206      	bcs.n	40314a <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
  40313c:	3a01      	subs	r2, #1
  40313e:	1a12      	subs	r2, r2, r0
  403140:	f022 0203 	bic.w	r2, r2, #3
  403144:	4b17      	ldr	r3, [pc, #92]	; (4031a4 <Reset_Handler+0x78>)
  403146:	3204      	adds	r2, #4
  403148:	4798      	blx	r3
  __ASM volatile ("nop");
  40314a:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40314c:	4816      	ldr	r0, [pc, #88]	; (4031a8 <Reset_Handler+0x7c>)
  40314e:	4a17      	ldr	r2, [pc, #92]	; (4031ac <Reset_Handler+0x80>)
  403150:	4290      	cmp	r0, r2
  403152:	d207      	bcs.n	403164 <Reset_Handler+0x38>
		*pDest++ = 0;
  403154:	3a01      	subs	r2, #1
  403156:	1a12      	subs	r2, r2, r0
  403158:	f022 0203 	bic.w	r2, r2, #3
  40315c:	2100      	movs	r1, #0
  40315e:	4b14      	ldr	r3, [pc, #80]	; (4031b0 <Reset_Handler+0x84>)
  403160:	3204      	adds	r2, #4
  403162:	4798      	blx	r3
	SCB->VTOR = ((uint32_t) pSrc);
  403164:	4913      	ldr	r1, [pc, #76]	; (4031b4 <Reset_Handler+0x88>)
  403166:	4a14      	ldr	r2, [pc, #80]	; (4031b8 <Reset_Handler+0x8c>)
	__libc_init_array();
  403168:	4b14      	ldr	r3, [pc, #80]	; (4031bc <Reset_Handler+0x90>)
	SCB->VTOR = ((uint32_t) pSrc);
  40316a:	6091      	str	r1, [r2, #8]
	__libc_init_array();
  40316c:	4798      	blx	r3
	main();
  40316e:	4b14      	ldr	r3, [pc, #80]	; (4031c0 <Reset_Handler+0x94>)
  403170:	4798      	blx	r3
	while (1);
  403172:	e7fe      	b.n	403172 <Reset_Handler+0x46>
	} else if (pSrc < pDest) {
  403174:	d2e9      	bcs.n	40314a <Reset_Handler+0x1e>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403176:	4a0a      	ldr	r2, [pc, #40]	; (4031a0 <Reset_Handler+0x74>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403178:	1f0b      	subs	r3, r1, #4
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40317a:	1a10      	subs	r0, r2, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40317c:	4403      	add	r3, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  40317e:	3a04      	subs	r2, #4
		for (;nb_bytes;nb_bytes -= 4) {
  403180:	2800      	cmp	r0, #0
  403182:	d0e2      	beq.n	40314a <Reset_Handler+0x1e>
  403184:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  403188:	4618      	mov	r0, r3
  40318a:	3b04      	subs	r3, #4
  40318c:	6800      	ldr	r0, [r0, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40318e:	42cb      	cmn	r3, r1
			*pDest-- = *pSrc--;
  403190:	f842 0904 	str.w	r0, [r2], #-4
		for (;nb_bytes;nb_bytes -= 4) {
  403194:	d1f8      	bne.n	403188 <Reset_Handler+0x5c>
  403196:	e7d8      	b.n	40314a <Reset_Handler+0x1e>
  403198:	00405a18 	.word	0x00405a18
  40319c:	20000000 	.word	0x20000000
  4031a0:	200007a8 	.word	0x200007a8
  4031a4:	0040504d 	.word	0x0040504d
  4031a8:	200007a8 	.word	0x200007a8
  4031ac:	20019858 	.word	0x20019858
  4031b0:	00405069 	.word	0x00405069
  4031b4:	00400000 	.word	0x00400000
  4031b8:	e000ed00 	.word	0xe000ed00
  4031bc:	00405005 	.word	0x00405005
  4031c0:	00400521 	.word	0x00400521

004031c4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4031c4:	4a0c      	ldr	r2, [pc, #48]	; (4031f8 <_sbrk+0x34>)
{
  4031c6:	4603      	mov	r3, r0
	if (heap == NULL) {
  4031c8:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
  4031ca:	490c      	ldr	r1, [pc, #48]	; (4031fc <_sbrk+0x38>)
	if (heap == NULL) {
  4031cc:	b130      	cbz	r0, 4031dc <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
  4031ce:	4403      	add	r3, r0
  4031d0:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
  4031d2:	bfcc      	ite	gt
  4031d4:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
  4031d8:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
  4031da:	4770      	bx	lr
{
  4031dc:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
  4031de:	4c08      	ldr	r4, [pc, #32]	; (403200 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
  4031e0:	4423      	add	r3, r4
  4031e2:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
  4031e4:	6014      	str	r4, [r2, #0]
	heap += incr;
  4031e6:	bfd8      	it	le
  4031e8:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
  4031ea:	4620      	mov	r0, r4
		return (caddr_t) -1;	
  4031ec:	bfc8      	it	gt
  4031ee:	f04f 30ff 	movgt.w	r0, #4294967295
}
  4031f2:	bc10      	pop	{r4}
  4031f4:	4770      	bx	lr
  4031f6:	bf00      	nop
  4031f8:	20019654 	.word	0x20019654
  4031fc:	20027ffc 	.word	0x20027ffc
  403200:	2001c928 	.word	0x2001c928

00403204 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  403204:	b530      	push	{r4, r5, lr}
  403206:	0082      	lsls	r2, r0, #2
  403208:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40320c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	bank0_received = Is_udd_bank0_received(ep);
  403210:	6b14      	ldr	r4, [r2, #48]	; 0x30
{
  403212:	b083      	sub	sp, #12
	bank1_received = Is_udd_bank1_received(ep);

	if (bank0_received && bank1_received) {
  403214:	f014 0f02 	tst.w	r4, #2
	bank1_received = Is_udd_bank1_received(ep);
  403218:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40321a:	4c30      	ldr	r4, [pc, #192]	; (4032dc <udd_ep_ack_out_received+0xd8>)
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40321c:	f100 31ff 	add.w	r1, r0, #4294967295
	if (bank0_received && bank1_received) {
  403220:	d148      	bne.n	4032b4 <udd_ep_ack_out_received+0xb0>
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  403222:	2501      	movs	r5, #1
  403224:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  403228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40322c:	f893 e011 	ldrb.w	lr, [r3, #17]
  403230:	ea4f 0c81 	mov.w	ip, r1, lsl #2
  403234:	f365 0e83 	bfi	lr, r5, #2, #2
  403238:	f883 e011 	strb.w	lr, [r3, #17]
	}
	if (ptr_job->bank == 0) {
  40323c:	eb0c 0301 	add.w	r3, ip, r1
  403240:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  403244:	7c5b      	ldrb	r3, [r3, #17]
  403246:	f013 0f0c 	tst.w	r3, #12
		udd_ack_bank0_received(ep);
  40324a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	if (ptr_job->bank == 0) {
  40324c:	d11a      	bne.n	403284 <udd_ep_ack_out_received+0x80>
		udd_ack_bank0_received(ep);
  40324e:	9300      	str	r3, [sp, #0]
  403250:	9b00      	ldr	r3, [sp, #0]
  403252:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403256:	9300      	str	r3, [sp, #0]
  403258:	9b00      	ldr	r3, [sp, #0]
  40325a:	f023 0302 	bic.w	r3, r3, #2
  40325e:	9300      	str	r3, [sp, #0]
  403260:	9b00      	ldr	r3, [sp, #0]
  403262:	6313      	str	r3, [r2, #48]	; 0x30
  403264:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403266:	079b      	lsls	r3, r3, #30
  403268:	d4fc      	bmi.n	403264 <udd_ep_ack_out_received+0x60>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40326a:	b148      	cbz	r0, 403280 <udd_ep_ack_out_received+0x7c>
  40326c:	2803      	cmp	r0, #3
  40326e:	d007      	beq.n	403280 <udd_ep_ack_out_received+0x7c>
			ptr_job->bank = 1;
  403270:	2201      	movs	r2, #1
  403272:	4461      	add	r1, ip
  403274:	eb04 0481 	add.w	r4, r4, r1, lsl #2
  403278:	7c63      	ldrb	r3, [r4, #17]
  40327a:	f362 0383 	bfi	r3, r2, #2, #2
  40327e:	7463      	strb	r3, [r4, #17]
		}
	} else {
		udd_ack_bank1_received(ep);
		ptr_job->bank = 0;
	}
}
  403280:	b003      	add	sp, #12
  403282:	bd30      	pop	{r4, r5, pc}
		udd_ack_bank1_received(ep);
  403284:	9301      	str	r3, [sp, #4]
  403286:	9b01      	ldr	r3, [sp, #4]
  403288:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40328c:	9301      	str	r3, [sp, #4]
  40328e:	9b01      	ldr	r3, [sp, #4]
  403290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403294:	9301      	str	r3, [sp, #4]
  403296:	9b01      	ldr	r3, [sp, #4]
  403298:	6313      	str	r3, [r2, #48]	; 0x30
  40329a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40329c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  4032a0:	d1fb      	bne.n	40329a <udd_ep_ack_out_received+0x96>
		ptr_job->bank = 0;
  4032a2:	4461      	add	r1, ip
  4032a4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
  4032a8:	7c62      	ldrb	r2, [r4, #17]
  4032aa:	f363 0283 	bfi	r2, r3, #2, #2
  4032ae:	7462      	strb	r2, [r4, #17]
}
  4032b0:	b003      	add	sp, #12
  4032b2:	bd30      	pop	{r4, r5, pc}
	if (bank0_received && bank1_received) {
  4032b4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  4032b8:	d002      	beq.n	4032c0 <udd_ep_ack_out_received+0xbc>
		ptr_job->bank = 0;
  4032ba:	ea4f 0c81 	mov.w	ip, r1, lsl #2
  4032be:	e7bd      	b.n	40323c <udd_ep_ack_out_received+0x38>
  4032c0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
  4032c4:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  4032c8:	f89c e011 	ldrb.w	lr, [ip, #17]
  4032cc:	f363 0e83 	bfi	lr, r3, #2, #2
  4032d0:	f88c e011 	strb.w	lr, [ip, #17]
  4032d4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
  4032d8:	e7b0      	b.n	40323c <udd_ep_ack_out_received+0x38>
  4032da:	bf00      	nop
  4032dc:	20019660 	.word	0x20019660

004032e0 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4032e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4032e4:	f100 3eff 	add.w	lr, r0, #4294967295

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4032e8:	4e5f      	ldr	r6, [pc, #380]	; (403468 <udd_ep_in_sent+0x188>)
  4032ea:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
  4032ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  4032f2:	7c5b      	ldrb	r3, [r3, #17]
{
  4032f4:	468a      	mov	sl, r1
  4032f6:	b082      	sub	sp, #8
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4032f8:	ea4f 088e 	mov.w	r8, lr, lsl #2
  4032fc:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403300:	2800      	cmp	r0, #0
  403302:	f000 80a1 	beq.w	403448 <udd_ep_in_sent+0x168>
  403306:	2803      	cmp	r0, #3
  403308:	bf0c      	ite	eq
  40330a:	2201      	moveq	r2, #1
  40330c:	2202      	movne	r2, #2
  40330e:	4293      	cmp	r3, r2
  403310:	f280 8096 	bge.w	403440 <udd_ep_in_sent+0x160>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  403314:	eb08 030e 	add.w	r3, r8, lr
  403318:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40331c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
  403320:	4291      	cmp	r1, r2
  403322:	d304      	bcc.n	40332e <udd_ep_in_sent+0x4e>
  403324:	7c5b      	ldrb	r3, [r3, #17]
  403326:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  40332a:	f000 8098 	beq.w	40345e <udd_ep_in_sent+0x17e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40332e:	eb08 040e 	add.w	r4, r8, lr
  403332:	eb06 0484 	add.w	r4, r6, r4, lsl #2
	uint32_t pkt_size = ptr_job->size;
  403336:	8a23      	ldrh	r3, [r4, #16]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403338:	1a55      	subs	r5, r2, r1
	uint32_t pkt_size = ptr_job->size;
  40333a:	f3c3 0309 	ubfx	r3, r3, #0, #10
	if (nb_remain < pkt_size) {
  40333e:	429d      	cmp	r5, r3
	ptr_job->buf_cnt += pkt_size;
  403340:	bf28      	it	cs
  403342:	461d      	movcs	r5, r3
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  403344:	6864      	ldr	r4, [r4, #4]
	ptr_job->buf_cnt += pkt_size;
  403346:	bf28      	it	cs
  403348:	18ca      	addcs	r2, r1, r3
  40334a:	eb08 030e 	add.w	r3, r8, lr
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40334e:	eb04 0c01 	add.w	ip, r4, r1
	ptr_job->buf_cnt += pkt_size;
  403352:	eb06 0383 	add.w	r3, r6, r3, lsl #2
	bool is_short_pkt = false;
  403356:	bf2c      	ite	cs
  403358:	2100      	movcs	r1, #0
		is_short_pkt = true;
  40335a:	2101      	movcc	r1, #1
	for (; pkt_size >= 8; pkt_size -= 8) {
  40335c:	2d07      	cmp	r5, #7
	ptr_job->buf_cnt += pkt_size;
  40335e:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  403360:	d930      	bls.n	4033c4 <udd_ep_in_sent+0xe4>
  403362:	f1a5 0908 	sub.w	r9, r5, #8
  403366:	0082      	lsls	r2, r0, #2
  403368:	f029 0307 	bic.w	r3, r9, #7
  40336c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  403370:	f10c 0710 	add.w	r7, ip, #16
  403374:	441f      	add	r7, r3
  403376:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  40337a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
  40337e:	f10c 0308 	add.w	r3, ip, #8
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403382:	f813 4c08 	ldrb.w	r4, [r3, #-8]
	for (; pkt_size >= 8; pkt_size -= 8) {
  403386:	3308      	adds	r3, #8
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403388:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40338a:	f813 4c0f 	ldrb.w	r4, [r3, #-15]
  40338e:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403390:	f813 4c0e 	ldrb.w	r4, [r3, #-14]
  403394:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  403396:	f813 4c0d 	ldrb.w	r4, [r3, #-13]
  40339a:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40339c:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
  4033a0:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033a2:	f813 4c0b 	ldrb.w	r4, [r3, #-11]
  4033a6:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033a8:	f813 4c0a 	ldrb.w	r4, [r3, #-10]
  4033ac:	6514      	str	r4, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033ae:	f813 4c09 	ldrb.w	r4, [r3, #-9]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4033b2:	42bb      	cmp	r3, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033b4:	6514      	str	r4, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  4033b6:	d1e4      	bne.n	403382 <udd_ep_in_sent+0xa2>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033b8:	f109 0901 	add.w	r9, r9, #1
  4033bc:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
	for (; pkt_size >= 8; pkt_size -= 8) {
  4033c0:	f005 0507 	and.w	r5, r5, #7
	for (; pkt_size; pkt_size--) {
  4033c4:	b14d      	cbz	r5, 4033da <udd_ep_in_sent+0xfa>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033c6:	4c29      	ldr	r4, [pc, #164]	; (40346c <udd_ep_in_sent+0x18c>)
  4033c8:	4465      	add	r5, ip
  4033ca:	f100 0214 	add.w	r2, r0, #20
  4033ce:	f81c 3b01 	ldrb.w	r3, [ip], #1
	for (; pkt_size; pkt_size--) {
  4033d2:	4565      	cmp	r5, ip
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4033d4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; pkt_size; pkt_size--) {
  4033d8:	d1f9      	bne.n	4033ce <udd_ep_in_sent+0xee>
	ptr_job->bank++;
  4033da:	eb08 020e 	add.w	r2, r8, lr
  4033de:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  4033e2:	7c53      	ldrb	r3, [r2, #17]
  4033e4:	461c      	mov	r4, r3
  4033e6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4033ea:	3301      	adds	r3, #1
  4033ec:	f363 0483 	bfi	r4, r3, #2, #2
  4033f0:	7454      	strb	r4, [r2, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4033f2:	f1ba 0f00 	cmp.w	sl, #0
  4033f6:	d013      	beq.n	403420 <udd_ep_in_sent+0x140>
		udd_set_transmit_ready(ep);
  4033f8:	0080      	lsls	r0, r0, #2
  4033fa:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4033fe:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
  403402:	6b03      	ldr	r3, [r0, #48]	; 0x30
  403404:	9301      	str	r3, [sp, #4]
  403406:	9b01      	ldr	r3, [sp, #4]
  403408:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40340c:	9301      	str	r3, [sp, #4]
  40340e:	9b01      	ldr	r3, [sp, #4]
  403410:	f043 0310 	orr.w	r3, r3, #16
  403414:	9301      	str	r3, [sp, #4]
  403416:	9b01      	ldr	r3, [sp, #4]
  403418:	6303      	str	r3, [r0, #48]	; 0x30
  40341a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40341c:	06db      	lsls	r3, r3, #27
  40341e:	d5fc      	bpl.n	40341a <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  403420:	b139      	cbz	r1, 403432 <udd_ep_in_sent+0x152>
		ptr_job->b_shortpacket = false;
  403422:	eb08 030e 	add.w	r3, r8, lr
  403426:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  40342a:	7c5a      	ldrb	r2, [r3, #17]
  40342c:	f36f 1286 	bfc	r2, #6, #1
  403430:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  403432:	44c6      	add	lr, r8
  403434:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  403438:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
  40343c:	429a      	cmp	r2, r3
  40343e:	d205      	bcs.n	40344c <udd_ep_in_sent+0x16c>
		return true; // Data pending
  403440:	2001      	movs	r0, #1
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
}
  403442:	b002      	add	sp, #8
  403444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  403448:	2201      	movs	r2, #1
  40344a:	e760      	b.n	40330e <udd_ep_in_sent+0x2e>
			&& (!ptr_job->b_shortpacket)) {
  40344c:	7c70      	ldrb	r0, [r6, #17]
  40344e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
  403452:	d1f5      	bne.n	403440 <udd_ep_in_sent+0x160>
		ptr_job->b_buf_end = true;
  403454:	7c73      	ldrb	r3, [r6, #17]
  403456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40345a:	7473      	strb	r3, [r6, #17]
		return false;
  40345c:	e7f1      	b.n	403442 <udd_ep_in_sent+0x162>
		return false;
  40345e:	4618      	mov	r0, r3
}
  403460:	b002      	add	sp, #8
  403462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403466:	bf00      	nop
  403468:	20019660 	.word	0x20019660
  40346c:	40034000 	.word	0x40034000

00403470 <udd_ep_finish_job>:
	if (ptr_job->busy == false) {
  403470:	7c43      	ldrb	r3, [r0, #17]
  403472:	f013 0f10 	tst.w	r3, #16
  403476:	d017      	beq.n	4034a8 <udd_ep_finish_job+0x38>
{
  403478:	b410      	push	{r4}
	if (NULL == ptr_job->call_trans) {
  40347a:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
  40347c:	f36f 1304 	bfc	r3, #4, #1
  403480:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  403482:	b17c      	cbz	r4, 4034a4 <udd_ep_finish_job+0x34>
		ep_num |= USB_EP_DIR_IN;
  403484:	468c      	mov	ip, r1
	if (Is_udd_endpoint_type_in(ep_num)) {
  403486:	4b09      	ldr	r3, [pc, #36]	; (4034ac <udd_ep_finish_job+0x3c>)
  403488:	f102 010c 	add.w	r1, r2, #12
  40348c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  403490:	6881      	ldr	r1, [r0, #8]
	if (Is_udd_endpoint_type_in(ep_num)) {
  403492:	055b      	lsls	r3, r3, #21
		ep_num |= USB_EP_DIR_IN;
  403494:	bf48      	it	mi
  403496:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40349a:	4623      	mov	r3, r4
  40349c:	fa5f f08c 	uxtb.w	r0, ip
}
  4034a0:	bc10      	pop	{r4}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4034a2:	4718      	bx	r3
}
  4034a4:	bc10      	pop	{r4}
  4034a6:	4770      	bx	lr
  4034a8:	4770      	bx	lr
  4034aa:	bf00      	nop
  4034ac:	40034000 	.word	0x40034000

004034b0 <udd_ctrl_in_sent>:
{
  4034b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4034b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 403658 <udd_ctrl_in_sent+0x1a8>
{
  4034b8:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4034ba:	f898 3000 	ldrb.w	r3, [r8]
  4034be:	2b03      	cmp	r3, #3
  4034c0:	d072      	beq.n	4035a8 <udd_ctrl_in_sent+0xf8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4034c2:	4d66      	ldr	r5, [pc, #408]	; (40365c <udd_ctrl_in_sent+0x1ac>)
  4034c4:	4e66      	ldr	r6, [pc, #408]	; (403660 <udd_ctrl_in_sent+0x1b0>)
  4034c6:	882a      	ldrh	r2, [r5, #0]
  4034c8:	89b4      	ldrh	r4, [r6, #12]
  4034ca:	1aa4      	subs	r4, r4, r2
  4034cc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4034ce:	2c00      	cmp	r4, #0
  4034d0:	d053      	beq.n	40357a <udd_ctrl_in_sent+0xca>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4034d2:	4611      	mov	r1, r2
  4034d4:	4f63      	ldr	r7, [pc, #396]	; (403664 <udd_ctrl_in_sent+0x1b4>)
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4034d6:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
  4034d8:	bf86      	itte	hi
  4034da:	2300      	movhi	r3, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4034dc:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
  4034de:	2301      	movls	r3, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4034e0:	68b2      	ldr	r2, [r6, #8]
  4034e2:	703b      	strb	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4034e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4034e8:	fab3 f383 	clz	r3, r3
  4034ec:	095b      	lsrs	r3, r3, #5
  4034ee:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  4034f0:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4034f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4034f6:	2300      	movs	r3, #0
  4034f8:	4e5b      	ldr	r6, [pc, #364]	; (403668 <udd_ctrl_in_sent+0x1b8>)
	if (Is_udd_bank0_received(0)) {
  4034fa:	f8df c170 	ldr.w	ip, [pc, #368]	; 40366c <udd_ctrl_in_sent+0x1bc>
  4034fe:	7033      	strb	r3, [r6, #0]
	return flags;
  403500:	9f05      	ldr	r7, [sp, #20]
  403502:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
  403506:	f013 0302 	ands.w	r3, r3, #2
  40350a:	d16a      	bne.n	4035e2 <udd_ctrl_in_sent+0x132>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40350c:	440a      	add	r2, r1
	for (i = 0; i < nb_remain; i++) {
  40350e:	b144      	cbz	r4, 403522 <udd_ctrl_in_sent+0x72>
  403510:	3301      	adds	r3, #1
  403512:	b2d9      	uxtb	r1, r3
		udd_endpoint_fifo_write(0, *ptr_src++);
  403514:	f812 0b01 	ldrb.w	r0, [r2], #1
	for (i = 0; i < nb_remain; i++) {
  403518:	42a1      	cmp	r1, r4
  40351a:	460b      	mov	r3, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  40351c:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  403520:	d3f6      	bcc.n	403510 <udd_ctrl_in_sent+0x60>
	udd_ctrl_payload_nb_trans += nb_remain;
  403522:	882b      	ldrh	r3, [r5, #0]
	udd_set_transmit_ready(0);
  403524:	4a51      	ldr	r2, [pc, #324]	; (40366c <udd_ctrl_in_sent+0x1bc>)
	udd_ctrl_payload_nb_trans += nb_remain;
  403526:	441c      	add	r4, r3
  403528:	802c      	strh	r4, [r5, #0]
	udd_set_transmit_ready(0);
  40352a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40352c:	9303      	str	r3, [sp, #12]
  40352e:	9b03      	ldr	r3, [sp, #12]
  403530:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403534:	9303      	str	r3, [sp, #12]
  403536:	9b03      	ldr	r3, [sp, #12]
  403538:	f043 0310 	orr.w	r3, r3, #16
  40353c:	9303      	str	r3, [sp, #12]
  40353e:	9b03      	ldr	r3, [sp, #12]
  403540:	6313      	str	r3, [r2, #48]	; 0x30
  403542:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403544:	06d9      	lsls	r1, r3, #27
  403546:	d5fc      	bpl.n	403542 <udd_ctrl_in_sent+0x92>
	udd_ack_in_sent(0);
  403548:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40354a:	4948      	ldr	r1, [pc, #288]	; (40366c <udd_ctrl_in_sent+0x1bc>)
  40354c:	9304      	str	r3, [sp, #16]
  40354e:	9b04      	ldr	r3, [sp, #16]
  403550:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403554:	9304      	str	r3, [sp, #16]
  403556:	9b04      	ldr	r3, [sp, #16]
  403558:	f023 0301 	bic.w	r3, r3, #1
  40355c:	9304      	str	r3, [sp, #16]
  40355e:	9b04      	ldr	r3, [sp, #16]
  403560:	6313      	str	r3, [r2, #48]	; 0x30
  403562:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403564:	07db      	lsls	r3, r3, #31
  403566:	d4fc      	bmi.n	403562 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  403568:	b127      	cbz	r7, 403574 <udd_ctrl_in_sent+0xc4>
		cpu_irq_enable();
  40356a:	2301      	movs	r3, #1
  40356c:	7033      	strb	r3, [r6, #0]
  40356e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403572:	b662      	cpsie	i
}
  403574:	b007      	add	sp, #28
  403576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40357a:	493d      	ldr	r1, [pc, #244]	; (403670 <udd_ctrl_in_sent+0x1c0>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40357c:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40357e:	880b      	ldrh	r3, [r1, #0]
  403580:	4413      	add	r3, r2
  403582:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  403584:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  403586:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  403588:	d04b      	beq.n	403622 <udd_ctrl_in_sent+0x172>
				|| b_shortpacket) {
  40358a:	4f36      	ldr	r7, [pc, #216]	; (403664 <udd_ctrl_in_sent+0x1b4>)
  40358c:	f897 9000 	ldrb.w	r9, [r7]
  403590:	f1b9 0f00 	cmp.w	r9, #0
  403594:	d145      	bne.n	403622 <udd_ctrl_in_sent+0x172>
		if ((!udd_g_ctrlreq.over_under_run)
  403596:	6973      	ldr	r3, [r6, #20]
  403598:	2b00      	cmp	r3, #0
  40359a:	d03f      	beq.n	40361c <udd_ctrl_in_sent+0x16c>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40359c:	4798      	blx	r3
  40359e:	2800      	cmp	r0, #0
  4035a0:	d155      	bne.n	40364e <udd_ctrl_in_sent+0x19e>
		b_shortpacket = true;
  4035a2:	2301      	movs	r3, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4035a4:	8829      	ldrh	r1, [r5, #0]
  4035a6:	e79b      	b.n	4034e0 <udd_ctrl_in_sent+0x30>
		udd_ack_in_sent(0);
  4035a8:	4a30      	ldr	r2, [pc, #192]	; (40366c <udd_ctrl_in_sent+0x1bc>)
  4035aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035ac:	9300      	str	r3, [sp, #0]
  4035ae:	9b00      	ldr	r3, [sp, #0]
  4035b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035b4:	9300      	str	r3, [sp, #0]
  4035b6:	9b00      	ldr	r3, [sp, #0]
  4035b8:	f023 0301 	bic.w	r3, r3, #1
  4035bc:	9300      	str	r3, [sp, #0]
  4035be:	9b00      	ldr	r3, [sp, #0]
  4035c0:	6313      	str	r3, [r2, #48]	; 0x30
  4035c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035c4:	07dd      	lsls	r5, r3, #31
  4035c6:	d4fc      	bmi.n	4035c2 <udd_ctrl_in_sent+0x112>
	if (udd_g_ctrlreq.callback) {
  4035c8:	4e25      	ldr	r6, [pc, #148]	; (403660 <udd_ctrl_in_sent+0x1b0>)
  4035ca:	6933      	ldr	r3, [r6, #16]
  4035cc:	b103      	cbz	r3, 4035d0 <udd_ctrl_in_sent+0x120>
		udd_g_ctrlreq.callback();
  4035ce:	4798      	blx	r3
	udd_g_ctrlreq.callback = NULL;
  4035d0:	2300      	movs	r3, #0
	udd_g_ctrlreq.over_under_run = NULL;
  4035d2:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
  4035d6:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4035d8:	f888 3000 	strb.w	r3, [r8]
}
  4035dc:	b007      	add	sp, #28
  4035de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
  4035e2:	b9af      	cbnz	r7, 403610 <udd_ctrl_in_sent+0x160>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4035e4:	2304      	movs	r3, #4
		udd_ack_in_sent(0);
  4035e6:	4a21      	ldr	r2, [pc, #132]	; (40366c <udd_ctrl_in_sent+0x1bc>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4035e8:	f888 3000 	strb.w	r3, [r8]
		udd_ack_in_sent(0);
  4035ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035ee:	9302      	str	r3, [sp, #8]
  4035f0:	9b02      	ldr	r3, [sp, #8]
  4035f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035f6:	9302      	str	r3, [sp, #8]
  4035f8:	9b02      	ldr	r3, [sp, #8]
  4035fa:	f023 0301 	bic.w	r3, r3, #1
  4035fe:	9302      	str	r3, [sp, #8]
  403600:	9b02      	ldr	r3, [sp, #8]
  403602:	6313      	str	r3, [r2, #48]	; 0x30
  403604:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403606:	07d8      	lsls	r0, r3, #31
  403608:	d4fc      	bmi.n	403604 <udd_ctrl_in_sent+0x154>
}
  40360a:	b007      	add	sp, #28
  40360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cpu_irq_enable();
  403610:	2301      	movs	r3, #1
  403612:	7033      	strb	r3, [r6, #0]
  403614:	f3bf 8f5f 	dmb	sy
  403618:	b662      	cpsie	i
}
  40361a:	e7e3      	b.n	4035e4 <udd_ctrl_in_sent+0x134>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40361c:	4611      	mov	r1, r2
		b_shortpacket = true;
  40361e:	2301      	movs	r3, #1
  403620:	e75e      	b.n	4034e0 <udd_ctrl_in_sent+0x30>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403622:	2304      	movs	r3, #4
			udd_ack_in_sent(0);
  403624:	4a11      	ldr	r2, [pc, #68]	; (40366c <udd_ctrl_in_sent+0x1bc>)
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  403626:	f888 3000 	strb.w	r3, [r8]
			udd_ack_in_sent(0);
  40362a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40362c:	9301      	str	r3, [sp, #4]
  40362e:	9b01      	ldr	r3, [sp, #4]
  403630:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403634:	9301      	str	r3, [sp, #4]
  403636:	9b01      	ldr	r3, [sp, #4]
  403638:	f023 0301 	bic.w	r3, r3, #1
  40363c:	9301      	str	r3, [sp, #4]
  40363e:	9b01      	ldr	r3, [sp, #4]
  403640:	6313      	str	r3, [r2, #48]	; 0x30
  403642:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403644:	07dc      	lsls	r4, r3, #31
  403646:	d4fc      	bmi.n	403642 <udd_ctrl_in_sent+0x192>
}
  403648:	b007      	add	sp, #28
  40364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			udd_ctrl_payload_nb_trans = 0;
  40364e:	802c      	strh	r4, [r5, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  403650:	4649      	mov	r1, r9
  403652:	89b4      	ldrh	r4, [r6, #12]
  403654:	e73f      	b.n	4034d6 <udd_ctrl_in_sent+0x26>
  403656:	bf00      	nop
  403658:	2001965e 	.word	0x2001965e
  40365c:	2001965a 	.word	0x2001965a
  403660:	200196ec 	.word	0x200196ec
  403664:	20019658 	.word	0x20019658
  403668:	20000718 	.word	0x20000718
  40366c:	40034000 	.word	0x40034000
  403670:	2001965c 	.word	0x2001965c

00403674 <UDP_Handler>:
{
  403674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	udd_enable_periph_ck();
  403678:	4b7f      	ldr	r3, [pc, #508]	; (403878 <UDP_Handler+0x204>)
  40367a:	2022      	movs	r0, #34	; 0x22
{
  40367c:	b0a5      	sub	sp, #148	; 0x94
	udd_enable_periph_ck();
  40367e:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  403680:	4b7e      	ldr	r3, [pc, #504]	; (40387c <UDP_Handler+0x208>)
  403682:	699a      	ldr	r2, [r3, #24]
  403684:	0514      	lsls	r4, r2, #20
  403686:	d503      	bpl.n	403690 <UDP_Handler+0x1c>
  403688:	69da      	ldr	r2, [r3, #28]
  40368a:	0510      	lsls	r0, r2, #20
  40368c:	f100 80b5 	bmi.w	4037fa <UDP_Handler+0x186>
	if (!Is_udd_endpoint_interrupt(0))
  403690:	4b7a      	ldr	r3, [pc, #488]	; (40387c <UDP_Handler+0x208>)
  403692:	69da      	ldr	r2, [r3, #28]
  403694:	07d1      	lsls	r1, r2, #31
  403696:	d50e      	bpl.n	4036b6 <UDP_Handler+0x42>
	if (Is_udd_setup_received(0)) {
  403698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40369a:	0752      	lsls	r2, r2, #29
  40369c:	d468      	bmi.n	403770 <UDP_Handler+0xfc>
	if (Is_udd_in_sent(0)) {
  40369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4036a0:	07d1      	lsls	r1, r2, #31
  4036a2:	f100 80b4 	bmi.w	40380e <UDP_Handler+0x19a>
	if (Is_udd_bank0_received(0)) {
  4036a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4036a8:	0792      	lsls	r2, r2, #30
  4036aa:	f100 80b5 	bmi.w	403818 <UDP_Handler+0x1a4>
	if (Is_udd_stall(0)) {
  4036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4036b0:	0714      	lsls	r4, r2, #28
  4036b2:	f100 8092 	bmi.w	4037da <UDP_Handler+0x166>
	for (i = 0; i < nb_data; i++) {
  4036b6:	2301      	movs	r3, #1
  4036b8:	4f71      	ldr	r7, [pc, #452]	; (403880 <UDP_Handler+0x20c>)
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4036ba:	4618      	mov	r0, r3
	for (i = 0; i < nb_data; i++) {
  4036bc:	46b8      	mov	r8, r7
  4036be:	463d      	mov	r5, r7
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4036c0:	4a6e      	ldr	r2, [pc, #440]	; (40387c <UDP_Handler+0x208>)
  4036c2:	6991      	ldr	r1, [r2, #24]
  4036c4:	009c      	lsls	r4, r3, #2
  4036c6:	fa00 f603 	lsl.w	r6, r0, r3
  4036ca:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4036ce:	4231      	tst	r1, r6
  4036d0:	fa5f fa83 	uxtb.w	sl, r3
  4036d4:	f103 39ff 	add.w	r9, r3, #4294967295

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4036d8:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4036dc:	f103 0301 	add.w	r3, r3, #1
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4036e0:	d00c      	beq.n	4036fc <UDP_Handler+0x88>
		if (Is_udd_any_bank_received(ep)) {
  4036e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4036e4:	f011 0f42 	tst.w	r1, #66	; 0x42
  4036e8:	f040 8179 	bne.w	4039de <UDP_Handler+0x36a>
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4036ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4036ee:	07c9      	lsls	r1, r1, #31
  4036f0:	f100 81a2 	bmi.w	403a38 <UDP_Handler+0x3c4>
				udd_ack_in_sent(ep);
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4036f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4036f6:	0709      	lsls	r1, r1, #28
  4036f8:	f100 81e9 	bmi.w	403ace <UDP_Handler+0x45a>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4036fc:	2b08      	cmp	r3, #8
  4036fe:	f105 0514 	add.w	r5, r5, #20
  403702:	d1de      	bne.n	4036c2 <UDP_Handler+0x4e>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  403704:	4b5d      	ldr	r3, [pc, #372]	; (40387c <UDP_Handler+0x208>)
  403706:	699a      	ldr	r2, [r3, #24]
  403708:	0492      	lsls	r2, r2, #18
  40370a:	d502      	bpl.n	403712 <UDP_Handler+0x9e>
  40370c:	69db      	ldr	r3, [r3, #28]
  40370e:	049b      	lsls	r3, r3, #18
  403710:	d41d      	bmi.n	40374e <UDP_Handler+0xda>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  403712:	4b5a      	ldr	r3, [pc, #360]	; (40387c <UDP_Handler+0x208>)
  403714:	699a      	ldr	r2, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  403716:	0596      	lsls	r6, r2, #22
  403718:	d416      	bmi.n	403748 <UDP_Handler+0xd4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  40371a:	4b58      	ldr	r3, [pc, #352]	; (40387c <UDP_Handler+0x208>)
  40371c:	699a      	ldr	r2, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40371e:	0554      	lsls	r4, r2, #21
  403720:	d502      	bpl.n	403728 <UDP_Handler+0xb4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  403722:	69db      	ldr	r3, [r3, #28]
  403724:	0558      	lsls	r0, r3, #21
  403726:	d412      	bmi.n	40374e <UDP_Handler+0xda>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  403728:	4b54      	ldr	r3, [pc, #336]	; (40387c <UDP_Handler+0x208>)
  40372a:	699a      	ldr	r2, [r3, #24]
  40372c:	05d1      	lsls	r1, r2, #23
  40372e:	d503      	bpl.n	403738 <UDP_Handler+0xc4>
  403730:	69da      	ldr	r2, [r3, #28]
  403732:	05d2      	lsls	r2, r2, #23
  403734:	f100 82ce 	bmi.w	403cd4 <UDP_Handler+0x660>
	if (Is_udd_reset()) {
  403738:	4d50      	ldr	r5, [pc, #320]	; (40387c <UDP_Handler+0x208>)
  40373a:	69eb      	ldr	r3, [r5, #28]
  40373c:	04db      	lsls	r3, r3, #19
  40373e:	f100 81f1 	bmi.w	403b24 <UDP_Handler+0x4b0>
}
  403742:	b025      	add	sp, #148	; 0x94
  403744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  403748:	69db      	ldr	r3, [r3, #28]
  40374a:	059d      	lsls	r5, r3, #22
  40374c:	d5e5      	bpl.n	40371a <UDP_Handler+0xa6>
		udd_ack_wakeups();
  40374e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  403752:	4c4a      	ldr	r4, [pc, #296]	; (40387c <UDP_Handler+0x208>)
		UDC_RESUME_EVENT();
  403754:	4a4b      	ldr	r2, [pc, #300]	; (403884 <UDP_Handler+0x210>)
		udd_ack_wakeups();
  403756:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  403758:	6163      	str	r3, [r4, #20]
		UDC_RESUME_EVENT();
  40375a:	4790      	blx	r2
		udd_ack_suspend();
  40375c:	f44f 7380 	mov.w	r3, #256	; 0x100
		udd_enable_sof_interrupt();
  403760:	f44f 6200 	mov.w	r2, #2048	; 0x800
		udd_ack_suspend();
  403764:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  403766:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  403768:	6122      	str	r2, [r4, #16]
}
  40376a:	b025      	add	sp, #148	; 0x94
  40376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  403770:	4d45      	ldr	r5, [pc, #276]	; (403888 <UDP_Handler+0x214>)
  403772:	782b      	ldrb	r3, [r5, #0]
  403774:	b143      	cbz	r3, 403788 <UDP_Handler+0x114>
	if (udd_g_ctrlreq.callback) {
  403776:	4e45      	ldr	r6, [pc, #276]	; (40388c <UDP_Handler+0x218>)
  403778:	6933      	ldr	r3, [r6, #16]
  40377a:	b103      	cbz	r3, 40377e <UDP_Handler+0x10a>
		udd_g_ctrlreq.callback();
  40377c:	4798      	blx	r3
	udd_g_ctrlreq.callback = NULL;
  40377e:	2300      	movs	r3, #0
	udd_g_ctrlreq.over_under_run = NULL;
  403780:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
  403784:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403786:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
  403788:	4c3c      	ldr	r4, [pc, #240]	; (40387c <UDP_Handler+0x208>)
  40378a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40378c:	f3c3 430a 	ubfx	r3, r3, #16, #11
  403790:	2b08      	cmp	r3, #8
  403792:	f000 8083 	beq.w	40389c <UDP_Handler+0x228>
		udd_ack_setup_received(0);
  403796:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403798:	9303      	str	r3, [sp, #12]
  40379a:	9b03      	ldr	r3, [sp, #12]
  40379c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4037a0:	9303      	str	r3, [sp, #12]
  4037a2:	9b03      	ldr	r3, [sp, #12]
  4037a4:	f023 0304 	bic.w	r3, r3, #4
  4037a8:	9303      	str	r3, [sp, #12]
  4037aa:	9b03      	ldr	r3, [sp, #12]
  4037ac:	6323      	str	r3, [r4, #48]	; 0x30
  4037ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4037b0:	075b      	lsls	r3, r3, #29
  4037b2:	d4fc      	bmi.n	4037ae <UDP_Handler+0x13a>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4037b4:	2305      	movs	r3, #5
  4037b6:	702b      	strb	r3, [r5, #0]
	udd_enable_stall_handshake(0);
  4037b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4037ba:	4a30      	ldr	r2, [pc, #192]	; (40387c <UDP_Handler+0x208>)
  4037bc:	9308      	str	r3, [sp, #32]
  4037be:	9b08      	ldr	r3, [sp, #32]
  4037c0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4037c4:	9308      	str	r3, [sp, #32]
  4037c6:	9b08      	ldr	r3, [sp, #32]
  4037c8:	f043 0320 	orr.w	r3, r3, #32
  4037cc:	9308      	str	r3, [sp, #32]
  4037ce:	9b08      	ldr	r3, [sp, #32]
  4037d0:	6323      	str	r3, [r4, #48]	; 0x30
  4037d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4037d4:	069f      	lsls	r7, r3, #26
  4037d6:	d5fc      	bpl.n	4037d2 <UDP_Handler+0x15e>
  4037d8:	e7b3      	b.n	403742 <UDP_Handler+0xce>
		udd_ack_stall(0);
  4037da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4037dc:	9202      	str	r2, [sp, #8]
  4037de:	9a02      	ldr	r2, [sp, #8]
  4037e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4037e4:	9202      	str	r2, [sp, #8]
  4037e6:	9a02      	ldr	r2, [sp, #8]
  4037e8:	f022 0208 	bic.w	r2, r2, #8
  4037ec:	9202      	str	r2, [sp, #8]
  4037ee:	9a02      	ldr	r2, [sp, #8]
  4037f0:	631a      	str	r2, [r3, #48]	; 0x30
  4037f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4037f4:	0710      	lsls	r0, r2, #28
  4037f6:	d4fc      	bmi.n	4037f2 <UDP_Handler+0x17e>
  4037f8:	e7a3      	b.n	403742 <UDP_Handler+0xce>
		udd_ack_sof();
  4037fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
		udc_sof_notify();
  4037fe:	4a24      	ldr	r2, [pc, #144]	; (403890 <UDP_Handler+0x21c>)
		udd_ack_sof();
  403800:	6219      	str	r1, [r3, #32]
		udc_sof_notify();
  403802:	4790      	blx	r2
		UDC_SOF_EVENT();
  403804:	4b23      	ldr	r3, [pc, #140]	; (403894 <UDP_Handler+0x220>)
}
  403806:	b025      	add	sp, #148	; 0x94
  403808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UDC_SUSPEND_EVENT();
  40380c:	4718      	bx	r3
		udd_ctrl_in_sent();
  40380e:	4b22      	ldr	r3, [pc, #136]	; (403898 <UDP_Handler+0x224>)
}
  403810:	b025      	add	sp, #148	; 0x94
  403812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent();
  403816:	4718      	bx	r3
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  403818:	4d1b      	ldr	r5, [pc, #108]	; (403888 <UDP_Handler+0x214>)
  40381a:	782a      	ldrb	r2, [r5, #0]
  40381c:	2a01      	cmp	r2, #1
  40381e:	d06b      	beq.n	4038f8 <UDP_Handler+0x284>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  403820:	2a02      	cmp	r2, #2
  403822:	f000 81fd 	beq.w	403c20 <UDP_Handler+0x5ac>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  403826:	2a04      	cmp	r2, #4
  403828:	f000 81fa 	beq.w	403c20 <UDP_Handler+0x5ac>
	udd_enable_stall_handshake(0);
  40382c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40382e:	9211      	str	r2, [sp, #68]	; 0x44
  403830:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403832:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403836:	9211      	str	r2, [sp, #68]	; 0x44
  403838:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40383a:	f042 0220 	orr.w	r2, r2, #32
  40383e:	9211      	str	r2, [sp, #68]	; 0x44
  403840:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403842:	631a      	str	r2, [r3, #48]	; 0x30
  403844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403846:	0697      	lsls	r7, r2, #26
  403848:	d5fc      	bpl.n	403844 <UDP_Handler+0x1d0>
  40384a:	4e10      	ldr	r6, [pc, #64]	; (40388c <UDP_Handler+0x218>)
		udd_ack_bank0_received(0);
  40384c:	4a0b      	ldr	r2, [pc, #44]	; (40387c <UDP_Handler+0x208>)
  40384e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403850:	930b      	str	r3, [sp, #44]	; 0x2c
  403852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403854:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403858:	930b      	str	r3, [sp, #44]	; 0x2c
  40385a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40385c:	f023 0302 	bic.w	r3, r3, #2
  403860:	930b      	str	r3, [sp, #44]	; 0x2c
  403862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403864:	6313      	str	r3, [r2, #48]	; 0x30
  403866:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403868:	f013 0302 	ands.w	r3, r3, #2
  40386c:	d1fb      	bne.n	403866 <UDP_Handler+0x1f2>
	udd_g_ctrlreq.over_under_run = NULL;
  40386e:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
  403872:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403874:	702b      	strb	r3, [r5, #0]
		return;
  403876:	e764      	b.n	403742 <UDP_Handler+0xce>
  403878:	00402cb1 	.word	0x00402cb1
  40387c:	40034000 	.word	0x40034000
  403880:	20019660 	.word	0x20019660
  403884:	00401e0d 	.word	0x00401e0d
  403888:	2001965e 	.word	0x2001965e
  40388c:	200196ec 	.word	0x200196ec
  403890:	004020f5 	.word	0x004020f5
  403894:	00401e15 	.word	0x00401e15
  403898:	004034b1 	.word	0x004034b1
  40389c:	4b98      	ldr	r3, [pc, #608]	; (403b00 <UDP_Handler+0x48c>)
  40389e:	f103 0108 	add.w	r1, r3, #8
			udd_endpoint_fifo_read(0);
  4038a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4038a4:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  4038a8:	428b      	cmp	r3, r1
  4038aa:	d1fa      	bne.n	4038a2 <UDP_Handler+0x22e>
	if (udc_process_setup() == false) {
  4038ac:	4b95      	ldr	r3, [pc, #596]	; (403b04 <UDP_Handler+0x490>)
  4038ae:	4798      	blx	r3
  4038b0:	2800      	cmp	r0, #0
  4038b2:	d071      	beq.n	403998 <UDP_Handler+0x324>
	if (Udd_setup_is_in()) {
  4038b4:	4e94      	ldr	r6, [pc, #592]	; (403b08 <UDP_Handler+0x494>)
		udd_set_endpoint_direction_in(0);
  4038b6:	4a95      	ldr	r2, [pc, #596]	; (403b0c <UDP_Handler+0x498>)
	if (Udd_setup_is_in()) {
  4038b8:	f996 3000 	ldrsb.w	r3, [r6]
  4038bc:	2b00      	cmp	r3, #0
		udd_set_endpoint_direction_in(0);
  4038be:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (Udd_setup_is_in()) {
  4038c0:	f2c0 821a 	blt.w	403cf8 <UDP_Handler+0x684>
		udd_ack_setup_received(0);
  4038c4:	9307      	str	r3, [sp, #28]
  4038c6:	9b07      	ldr	r3, [sp, #28]
  4038c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4038cc:	9307      	str	r3, [sp, #28]
  4038ce:	9b07      	ldr	r3, [sp, #28]
  4038d0:	f023 0304 	bic.w	r3, r3, #4
  4038d4:	9307      	str	r3, [sp, #28]
  4038d6:	9b07      	ldr	r3, [sp, #28]
  4038d8:	6323      	str	r3, [r4, #48]	; 0x30
  4038da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4038dc:	f013 0304 	ands.w	r3, r3, #4
  4038e0:	d1fb      	bne.n	4038da <UDP_Handler+0x266>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4038e2:	88f1      	ldrh	r1, [r6, #6]
  4038e4:	2900      	cmp	r1, #0
  4038e6:	f000 8301 	beq.w	403eec <UDP_Handler+0x878>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4038ea:	2201      	movs	r2, #1
		udd_ctrl_prev_payload_nb_trans = 0;
  4038ec:	4888      	ldr	r0, [pc, #544]	; (403b10 <UDP_Handler+0x49c>)
		udd_ctrl_payload_nb_trans = 0;
  4038ee:	4989      	ldr	r1, [pc, #548]	; (403b14 <UDP_Handler+0x4a0>)
		udd_ctrl_prev_payload_nb_trans = 0;
  4038f0:	8003      	strh	r3, [r0, #0]
		udd_ctrl_payload_nb_trans = 0;
  4038f2:	800b      	strh	r3, [r1, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4038f4:	702a      	strb	r2, [r5, #0]
  4038f6:	e724      	b.n	403742 <UDP_Handler+0xce>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4038f8:	4c86      	ldr	r4, [pc, #536]	; (403b14 <UDP_Handler+0x4a0>)
	nb_data = udd_byte_count(0);
  4038fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4038fc:	4e82      	ldr	r6, [pc, #520]	; (403b08 <UDP_Handler+0x494>)
  4038fe:	8823      	ldrh	r3, [r4, #0]
  403900:	f8b6 c00c 	ldrh.w	ip, [r6, #12]
	nb_data = udd_byte_count(0);
  403904:	f3c0 400a 	ubfx	r0, r0, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  403908:	181a      	adds	r2, r3, r0
  40390a:	4594      	cmp	ip, r2
	udd_ctrl_payload_nb_trans += nb_data;
  40390c:	bfac      	ite	ge
  40390e:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size -
  403912:	ebac 0003 	sublt.w	r0, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  403916:	68b2      	ldr	r2, [r6, #8]
		nb_data = udd_g_ctrlreq.payload_size -
  403918:	bfb8      	it	lt
  40391a:	b280      	uxthlt	r0, r0
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40391c:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
  40391e:	2800      	cmp	r0, #0
  403920:	f000 830c 	beq.w	403f3c <UDP_Handler+0x8c8>
  403924:	2300      	movs	r3, #0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  403926:	4f79      	ldr	r7, [pc, #484]	; (403b0c <UDP_Handler+0x498>)
  403928:	6d39      	ldr	r1, [r7, #80]	; 0x50
	for (i = 0; i < nb_data; i++) {
  40392a:	3301      	adds	r3, #1
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  40392c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
  403930:	b2d9      	uxtb	r1, r3
  403932:	4281      	cmp	r1, r0
  403934:	460b      	mov	r3, r1
  403936:	d3f7      	bcc.n	403928 <UDP_Handler+0x2b4>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403938:	2840      	cmp	r0, #64	; 0x40
	udd_ctrl_payload_nb_trans += nb_data;
  40393a:	f8a4 c000 	strh.w	ip, [r4]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40393e:	f000 8225 	beq.w	403d8c <UDP_Handler+0x718>
		if (NULL != udd_g_ctrlreq.over_under_run) {
  403942:	6973      	ldr	r3, [r6, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  403944:	f8a6 c00c 	strh.w	ip, [r6, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  403948:	b11b      	cbz	r3, 403952 <UDP_Handler+0x2de>
			if (!udd_g_ctrlreq.over_under_run()) {
  40394a:	4798      	blx	r3
  40394c:	2800      	cmp	r0, #0
  40394e:	f000 825b 	beq.w	403e08 <UDP_Handler+0x794>
		udd_ack_bank0_received(0);
  403952:	4a6e      	ldr	r2, [pc, #440]	; (403b0c <UDP_Handler+0x498>)
  403954:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403956:	930d      	str	r3, [sp, #52]	; 0x34
  403958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40395a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40395e:	930d      	str	r3, [sp, #52]	; 0x34
  403960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403962:	f023 0302 	bic.w	r3, r3, #2
  403966:	930d      	str	r3, [sp, #52]	; 0x34
  403968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40396a:	6313      	str	r3, [r2, #48]	; 0x30
  40396c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40396e:	079c      	lsls	r4, r3, #30
  403970:	d4fc      	bmi.n	40396c <UDP_Handler+0x2f8>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  403972:	2303      	movs	r3, #3
  403974:	702b      	strb	r3, [r5, #0]
	udd_set_transmit_ready(0);
  403976:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403978:	4964      	ldr	r1, [pc, #400]	; (403b0c <UDP_Handler+0x498>)
  40397a:	9313      	str	r3, [sp, #76]	; 0x4c
  40397c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40397e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403982:	9313      	str	r3, [sp, #76]	; 0x4c
  403984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403986:	f043 0310 	orr.w	r3, r3, #16
  40398a:	9313      	str	r3, [sp, #76]	; 0x4c
  40398c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40398e:	6313      	str	r3, [r2, #48]	; 0x30
  403990:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403992:	06d8      	lsls	r0, r3, #27
  403994:	d5fc      	bpl.n	403990 <UDP_Handler+0x31c>
  403996:	e6d4      	b.n	403742 <UDP_Handler+0xce>
		udd_ack_setup_received(0);
  403998:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40399a:	4a5c      	ldr	r2, [pc, #368]	; (403b0c <UDP_Handler+0x498>)
  40399c:	9304      	str	r3, [sp, #16]
  40399e:	9b04      	ldr	r3, [sp, #16]
  4039a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4039a4:	9304      	str	r3, [sp, #16]
  4039a6:	9b04      	ldr	r3, [sp, #16]
  4039a8:	f023 0304 	bic.w	r3, r3, #4
  4039ac:	9304      	str	r3, [sp, #16]
  4039ae:	9b04      	ldr	r3, [sp, #16]
  4039b0:	6323      	str	r3, [r4, #48]	; 0x30
  4039b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4039b4:	075e      	lsls	r6, r3, #29
  4039b6:	d4fc      	bmi.n	4039b2 <UDP_Handler+0x33e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4039b8:	2305      	movs	r3, #5
  4039ba:	702b      	strb	r3, [r5, #0]
	udd_enable_stall_handshake(0);
  4039bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4039be:	4953      	ldr	r1, [pc, #332]	; (403b0c <UDP_Handler+0x498>)
  4039c0:	9309      	str	r3, [sp, #36]	; 0x24
  4039c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039c4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4039c8:	9309      	str	r3, [sp, #36]	; 0x24
  4039ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039cc:	f043 0320 	orr.w	r3, r3, #32
  4039d0:	9309      	str	r3, [sp, #36]	; 0x24
  4039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039d4:	6313      	str	r3, [r2, #48]	; 0x30
  4039d6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4039d8:	069d      	lsls	r5, r3, #26
  4039da:	d5fc      	bpl.n	4039d6 <UDP_Handler+0x362>
  4039dc:	e6b1      	b.n	403742 <UDP_Handler+0xce>
	uint32_t pkt_size = ptr_job->size;
  4039de:	eb09 0389 	add.w	r3, r9, r9, lsl #2
	nb_data = udd_byte_count(ep);
  4039e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
	uint32_t pkt_size = ptr_job->size;
  4039e4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4039e8:	f8b3 b010 	ldrh.w	fp, [r3, #16]
	nb_data = udd_byte_count(ep);
  4039ec:	f3c2 420a 	ubfx	r2, r2, #16, #11
	uint32_t pkt_size = ptr_job->size;
  4039f0:	f3cb 0b09 	ubfx	fp, fp, #0, #10
  4039f4:	ea4f 0789 	mov.w	r7, r9, lsl #2
	if (nb_data > 0) {
  4039f8:	2a00      	cmp	r2, #0
  4039fa:	f040 8118 	bne.w	403c2e <UDP_Handler+0x5ba>
	udd_ep_ack_out_received(ep);
  4039fe:	4650      	mov	r0, sl
  403a00:	4b45      	ldr	r3, [pc, #276]	; (403b18 <UDP_Handler+0x4a4>)
  403a02:	9200      	str	r2, [sp, #0]
  403a04:	4798      	blx	r3
	if ((b_full || b_short) &&
  403a06:	9a00      	ldr	r2, [sp, #0]
  403a08:	4593      	cmp	fp, r2
  403a0a:	f67f ae9a 	bls.w	403742 <UDP_Handler+0xce>
			!Is_udd_endpoint_stall_requested(ep)) {
  403a0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  403a10:	f011 0120 	ands.w	r1, r1, #32
  403a14:	f47f ae95 	bne.w	403742 <UDP_Handler+0xce>
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403a18:	4652      	mov	r2, sl
  403a1a:	4628      	mov	r0, r5
		udd_disable_endpoint_interrupt(ep);
  403a1c:	4b3b      	ldr	r3, [pc, #236]	; (403b0c <UDP_Handler+0x498>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403a1e:	444f      	add	r7, r9
  403a20:	eb08 0887 	add.w	r8, r8, r7, lsl #2
		udd_disable_endpoint_interrupt(ep);
  403a24:	615e      	str	r6, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403a26:	f8d8 300c 	ldr.w	r3, [r8, #12]
  403a2a:	f8c8 3008 	str.w	r3, [r8, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403a2e:	4b3b      	ldr	r3, [pc, #236]	; (403b1c <UDP_Handler+0x4a8>)
}
  403a30:	b025      	add	sp, #148	; 0x94
  403a32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403a36:	4718      	bx	r3
			ptr_job->bank--;
  403a38:	eb09 0089 	add.w	r0, r9, r9, lsl #2
  403a3c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  403a40:	7c43      	ldrb	r3, [r0, #17]
  403a42:	f100 0c10 	add.w	ip, r0, #16
  403a46:	4619      	mov	r1, r3
  403a48:	f3c3 0381 	ubfx	r3, r3, #2, #2
  403a4c:	3303      	adds	r3, #3
  403a4e:	f363 0183 	bfi	r1, r3, #2, #2
  403a52:	f88c 1001 	strb.w	r1, [ip, #1]
			if (ptr_job->b_stall_requested) {
  403a56:	7c43      	ldrb	r3, [r0, #17]
			ptr_job->bank--;
  403a58:	ea4f 0789 	mov.w	r7, r9, lsl #2
			if (ptr_job->b_stall_requested) {
  403a5c:	f013 0120 	ands.w	r1, r3, #32
  403a60:	f040 8171 	bne.w	403d46 <UDP_Handler+0x6d2>
			if (ptr_job->b_buf_end) {
  403a64:	061b      	lsls	r3, r3, #24
  403a66:	f100 8233 	bmi.w	403ed0 <UDP_Handler+0x85c>
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  403a6a:	eb07 0109 	add.w	r1, r7, r9
  403a6e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
  403a72:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
  403a76:	429a      	cmp	r2, r3
  403a78:	f0c0 80fa 	bcc.w	403c70 <UDP_Handler+0x5fc>
					!ptr_job->b_shortpacket &&
  403a7c:	7c4b      	ldrb	r3, [r1, #17]
  403a7e:	f013 034c 	ands.w	r3, r3, #76	; 0x4c
  403a82:	f040 80f5 	bne.w	403c70 <UDP_Handler+0x5fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403a86:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403a8a:	fab2 f282 	clz	r2, r2
  403a8e:	0952      	lsrs	r2, r2, #5
  403a90:	921a      	str	r2, [sp, #104]	; 0x68
  __ASM volatile ("cpsid i" : : : "memory");
  403a92:	b672      	cpsid	i
  403a94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403a98:	4a21      	ldr	r2, [pc, #132]	; (403b20 <UDP_Handler+0x4ac>)
				udd_disable_endpoint_interrupt(ep);
  403a9a:	491c      	ldr	r1, [pc, #112]	; (403b0c <UDP_Handler+0x498>)
  403a9c:	7013      	strb	r3, [r2, #0]
	return flags;
  403a9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403aa0:	614e      	str	r6, [r1, #20]
	if (cpu_irq_is_enabled_flags(flags))
  403aa2:	b123      	cbz	r3, 403aae <UDP_Handler+0x43a>
		cpu_irq_enable();
  403aa4:	2301      	movs	r3, #1
  403aa6:	7013      	strb	r3, [r2, #0]
  403aa8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403aac:	b662      	cpsie	i
				udd_ack_in_sent(ep);
  403aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ab0:	931b      	str	r3, [sp, #108]	; 0x6c
  403ab2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403ab4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ab8:	931b      	str	r3, [sp, #108]	; 0x6c
  403aba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403abc:	f023 0301 	bic.w	r3, r3, #1
  403ac0:	931b      	str	r3, [sp, #108]	; 0x6c
  403ac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403ac4:	6323      	str	r3, [r4, #48]	; 0x30
  403ac6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ac8:	07de      	lsls	r6, r3, #31
  403aca:	d4fc      	bmi.n	403ac6 <UDP_Handler+0x452>
  403acc:	e639      	b.n	403742 <UDP_Handler+0xce>
			udd_ack_stall(ep);
  403ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ad0:	9320      	str	r3, [sp, #128]	; 0x80
  403ad2:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403ad4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ad8:	9320      	str	r3, [sp, #128]	; 0x80
  403ada:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403adc:	f023 0308 	bic.w	r3, r3, #8
  403ae0:	9320      	str	r3, [sp, #128]	; 0x80
  403ae2:	9b20      	ldr	r3, [sp, #128]	; 0x80
  403ae4:	6323      	str	r3, [r4, #48]	; 0x30
  403ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ae8:	071a      	lsls	r2, r3, #28
  403aea:	d4fc      	bmi.n	403ae6 <UDP_Handler+0x472>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  403aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403af6:	f43f ae24 	beq.w	403742 <UDP_Handler+0xce>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  403afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403afc:	e621      	b.n	403742 <UDP_Handler+0xce>
  403afe:	bf00      	nop
  403b00:	200196eb 	.word	0x200196eb
  403b04:	00402131 	.word	0x00402131
  403b08:	200196ec 	.word	0x200196ec
  403b0c:	40034000 	.word	0x40034000
  403b10:	2001965c 	.word	0x2001965c
  403b14:	2001965a 	.word	0x2001965a
  403b18:	00403205 	.word	0x00403205
  403b1c:	00403471 	.word	0x00403471
  403b20:	20000718 	.word	0x20000718
		udd_ack_reset();
  403b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  403b28:	2401      	movs	r4, #1
  403b2a:	622b      	str	r3, [r5, #32]
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  403b2c:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
  403b2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403b32:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403b36:	7c59      	ldrb	r1, [r3, #17]
  403b38:	b2e2      	uxtb	r2, r4
  403b3a:	06ce      	lsls	r6, r1, #27
	if (Is_udd_endpoint_type_in(ep_num)) {
  403b3c:	f104 000c 	add.w	r0, r4, #12
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403b40:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
  403b44:	d50d      	bpl.n	403b62 <UDP_Handler+0x4ee>
	ptr_job->busy = false;
  403b46:	f36f 1104 	bfc	r1, #4, #1
  403b4a:	7459      	strb	r1, [r3, #17]
	if (NULL == ptr_job->call_trans) {
  403b4c:	683b      	ldr	r3, [r7, #0]
  403b4e:	b143      	cbz	r3, 403b62 <UDP_Handler+0x4ee>
	if (Is_udd_endpoint_type_in(ep_num)) {
  403b50:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  403b54:	2001      	movs	r0, #1
	if (Is_udd_endpoint_type_in(ep_num)) {
  403b56:	054e      	lsls	r6, r1, #21
		ep_num |= USB_EP_DIR_IN;
  403b58:	bf48      	it	mi
  403b5a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  403b5e:	68b9      	ldr	r1, [r7, #8]
  403b60:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  403b62:	2c08      	cmp	r4, #8
  403b64:	f107 0714 	add.w	r7, r7, #20
  403b68:	d1e0      	bne.n	403b2c <UDP_Handler+0x4b8>
		udc_reset();
  403b6a:	4b9b      	ldr	r3, [pc, #620]	; (403dd8 <UDP_Handler+0x764>)
  403b6c:	4798      	blx	r3
		udd_disable_address_state();
  403b6e:	4b9b      	ldr	r3, [pc, #620]	; (403ddc <UDP_Handler+0x768>)
  403b70:	685a      	ldr	r2, [r3, #4]
  403b72:	f022 0201 	bic.w	r2, r2, #1
  403b76:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  403b78:	685a      	ldr	r2, [r3, #4]
  403b7a:	f022 0202 	bic.w	r2, r2, #2
  403b7e:	605a      	str	r2, [r3, #4]
	udd_enable_address();
  403b80:	689a      	ldr	r2, [r3, #8]
  403b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  403b86:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  403b88:	689a      	ldr	r2, [r3, #8]
  403b8a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  403b8e:	609a      	str	r2, [r3, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  403b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403b92:	9222      	str	r2, [sp, #136]	; 0x88
  403b94:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403b96:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403b9a:	9222      	str	r2, [sp, #136]	; 0x88
  403b9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403b9e:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  403ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  403ba6:	9222      	str	r2, [sp, #136]	; 0x88
  403ba8:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  403bae:	9222      	str	r2, [sp, #136]	; 0x88
  403bb0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403bb2:	631a      	str	r2, [r3, #48]	; 0x30
  403bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403bb6:	0410      	lsls	r0, r2, #16
  403bb8:	d5fc      	bpl.n	403bb4 <UDP_Handler+0x540>
	udd_enable_endpoint(0);
  403bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403bbc:	4a87      	ldr	r2, [pc, #540]	; (403ddc <UDP_Handler+0x768>)
  403bbe:	9123      	str	r1, [sp, #140]	; 0x8c
  403bc0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  403bc2:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  403bc6:	9123      	str	r1, [sp, #140]	; 0x8c
  403bc8:	9923      	ldr	r1, [sp, #140]	; 0x8c
  403bca:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  403bce:	9123      	str	r1, [sp, #140]	; 0x8c
  403bd0:	9923      	ldr	r1, [sp, #140]	; 0x8c
  403bd2:	6319      	str	r1, [r3, #48]	; 0x30
  403bd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403bd6:	0419      	lsls	r1, r3, #16
  403bd8:	d5fc      	bpl.n	403bd4 <UDP_Handler+0x560>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403bda:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403bde:	fab3 f383 	clz	r3, r3
  403be2:	095b      	lsrs	r3, r3, #5
  403be4:	9321      	str	r3, [sp, #132]	; 0x84
  __ASM volatile ("cpsid i" : : : "memory");
  403be6:	b672      	cpsid	i
  403be8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403bec:	2000      	movs	r0, #0
	udd_enable_endpoint_interrupt(0);
  403bee:	2101      	movs	r1, #1
  403bf0:	4b7b      	ldr	r3, [pc, #492]	; (403de0 <UDP_Handler+0x76c>)
  403bf2:	7018      	strb	r0, [r3, #0]
	return flags;
  403bf4:	9821      	ldr	r0, [sp, #132]	; 0x84
  403bf6:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  403bf8:	b118      	cbz	r0, 403c02 <UDP_Handler+0x58e>
		cpu_irq_enable();
  403bfa:	7019      	strb	r1, [r3, #0]
  403bfc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403c00:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
  403c02:	2300      	movs	r3, #0
		udd_enable_suspend_interrupt();
  403c04:	f44f 7480 	mov.w	r4, #256	; 0x100
		udd_enable_sof_interrupt();
  403c08:	f44f 6000 	mov.w	r0, #2048	; 0x800
	udd_g_ctrlreq.callback = NULL;
  403c0c:	4a75      	ldr	r2, [pc, #468]	; (403de4 <UDP_Handler+0x770>)
		udd_enable_suspend_interrupt();
  403c0e:	4973      	ldr	r1, [pc, #460]	; (403ddc <UDP_Handler+0x768>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  403c10:	4d75      	ldr	r5, [pc, #468]	; (403de8 <UDP_Handler+0x774>)
  403c12:	702b      	strb	r3, [r5, #0]
		udd_enable_suspend_interrupt();
  403c14:	610c      	str	r4, [r1, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403c16:	e9c2 3304 	strd	r3, r3, [r2, #16]
	udd_g_ctrlreq.payload_size = 0;
  403c1a:	8193      	strh	r3, [r2, #12]
		udd_enable_sof_interrupt();
  403c1c:	6108      	str	r0, [r1, #16]
	return;
  403c1e:	e590      	b.n	403742 <UDP_Handler+0xce>
	if (udd_g_ctrlreq.callback) {
  403c20:	4e70      	ldr	r6, [pc, #448]	; (403de4 <UDP_Handler+0x770>)
  403c22:	6933      	ldr	r3, [r6, #16]
  403c24:	2b00      	cmp	r3, #0
  403c26:	f43f ae11 	beq.w	40384c <UDP_Handler+0x1d8>
		udd_g_ctrlreq.callback();
  403c2a:	4798      	blx	r3
  403c2c:	e60e      	b.n	40384c <UDP_Handler+0x1d8>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  403c2e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
  403c32:	eba1 0c0e 	sub.w	ip, r1, lr
		if (nb_data >= nb_remain) {
  403c36:	4594      	cmp	ip, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  403c38:	6858      	ldr	r0, [r3, #4]
		if (nb_data >= nb_remain) {
  403c3a:	f200 80c5 	bhi.w	403dc8 <UDP_Handler+0x754>
		ptr_job->buf_cnt += nb_data;
  403c3e:	60d9      	str	r1, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  403c40:	f1bc 0f00 	cmp.w	ip, #0
  403c44:	f000 819c 	beq.w	403f80 <UDP_Handler+0x90c>
			b_full = true;
  403c48:	2301      	movs	r3, #1
  403c4a:	9300      	str	r3, [sp, #0]
		for (i = 0; i < nb_data; i++) {
  403c4c:	2300      	movs	r3, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  403c4e:	4470      	add	r0, lr
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  403c50:	6d21      	ldr	r1, [r4, #80]	; 0x50
		for (i = 0; i < nb_data; i++) {
  403c52:	3301      	adds	r3, #1
  403c54:	4563      	cmp	r3, ip
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  403c56:	f800 1b01 	strb.w	r1, [r0], #1
		for (i = 0; i < nb_data; i++) {
  403c5a:	d3f9      	bcc.n	403c50 <UDP_Handler+0x5dc>
	udd_ep_ack_out_received(ep);
  403c5c:	4b63      	ldr	r3, [pc, #396]	; (403dec <UDP_Handler+0x778>)
  403c5e:	4650      	mov	r0, sl
  403c60:	9201      	str	r2, [sp, #4]
  403c62:	4798      	blx	r3
	if ((b_full || b_short) &&
  403c64:	e9dd 3200 	ldrd	r3, r2, [sp]
  403c68:	2b00      	cmp	r3, #0
  403c6a:	f47f aed0 	bne.w	403a0e <UDP_Handler+0x39a>
  403c6e:	e6cb      	b.n	403a08 <UDP_Handler+0x394>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  403c70:	f1ba 0f03 	cmp.w	sl, #3
  403c74:	f000 814d 	beq.w	403f12 <UDP_Handler+0x89e>
					&& ptr_job->bank > 0) {
  403c78:	444f      	add	r7, r9
  403c7a:	eb08 0887 	add.w	r8, r8, r7, lsl #2
  403c7e:	f898 3011 	ldrb.w	r3, [r8, #17]
  403c82:	f013 0f0c 	tst.w	r3, #12
  403c86:	f000 80e2 	beq.w	403e4e <UDP_Handler+0x7da>
				udd_set_transmit_ready(ep);
  403c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403c8c:	931c      	str	r3, [sp, #112]	; 0x70
  403c8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403c90:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403c94:	931c      	str	r3, [sp, #112]	; 0x70
  403c96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403c98:	f043 0310 	orr.w	r3, r3, #16
  403c9c:	931c      	str	r3, [sp, #112]	; 0x70
  403c9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  403ca0:	6323      	str	r3, [r4, #48]	; 0x30
  403ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ca4:	06dd      	lsls	r5, r3, #27
  403ca6:	d5fc      	bpl.n	403ca2 <UDP_Handler+0x62e>
				udd_ack_in_sent(ep);
  403ca8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403caa:	931d      	str	r3, [sp, #116]	; 0x74
  403cac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403cb2:	931d      	str	r3, [sp, #116]	; 0x74
  403cb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cb6:	f023 0301 	bic.w	r3, r3, #1
  403cba:	931d      	str	r3, [sp, #116]	; 0x74
  403cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403cbe:	6323      	str	r3, [r4, #48]	; 0x30
  403cc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403cc2:	f011 0101 	ands.w	r1, r1, #1
  403cc6:	d1fb      	bne.n	403cc0 <UDP_Handler+0x64c>
				udd_ep_in_sent(ep, false);
  403cc8:	4650      	mov	r0, sl
  403cca:	4b49      	ldr	r3, [pc, #292]	; (403df0 <UDP_Handler+0x77c>)
}
  403ccc:	b025      	add	sp, #148	; 0x94
  403cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				udd_ep_in_sent(ep, false);
  403cd2:	4718      	bx	r3
		udd_ack_suspend();
  403cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
		udd_enable_wake_up_interrupt();
  403cd8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
		udd_enable_resume_interrupt();
  403cdc:	f44f 7500 	mov.w	r5, #512	; 0x200
		udd_enable_ext_resume_interrupt();
  403ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
		udd_ack_suspend();
  403ce4:	621a      	str	r2, [r3, #32]
		udd_disable_periph_ck();
  403ce6:	2022      	movs	r0, #34	; 0x22
		udd_disable_suspend_interrupt();
  403ce8:	615a      	str	r2, [r3, #20]
		udd_disable_periph_ck();
  403cea:	4942      	ldr	r1, [pc, #264]	; (403df4 <UDP_Handler+0x780>)
		udd_enable_wake_up_interrupt();
  403cec:	611e      	str	r6, [r3, #16]
		udd_enable_resume_interrupt();
  403cee:	611d      	str	r5, [r3, #16]
		udd_enable_ext_resume_interrupt();
  403cf0:	611c      	str	r4, [r3, #16]
		udd_disable_periph_ck();
  403cf2:	4788      	blx	r1
		UDC_SUSPEND_EVENT();
  403cf4:	4b40      	ldr	r3, [pc, #256]	; (403df8 <UDP_Handler+0x784>)
  403cf6:	e586      	b.n	403806 <UDP_Handler+0x192>
		udd_set_endpoint_direction_in(0);
  403cf8:	9305      	str	r3, [sp, #20]
  403cfa:	9b05      	ldr	r3, [sp, #20]
  403cfc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d00:	9305      	str	r3, [sp, #20]
  403d02:	9b05      	ldr	r3, [sp, #20]
  403d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d08:	9305      	str	r3, [sp, #20]
  403d0a:	9b05      	ldr	r3, [sp, #20]
  403d0c:	6323      	str	r3, [r4, #48]	; 0x30
  403d0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403d10:	061c      	lsls	r4, r3, #24
  403d12:	d5fc      	bpl.n	403d0e <UDP_Handler+0x69a>
		udd_ack_setup_received(0);
  403d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403d16:	4931      	ldr	r1, [pc, #196]	; (403ddc <UDP_Handler+0x768>)
  403d18:	9306      	str	r3, [sp, #24]
  403d1a:	9b06      	ldr	r3, [sp, #24]
  403d1c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d20:	9306      	str	r3, [sp, #24]
  403d22:	9b06      	ldr	r3, [sp, #24]
  403d24:	f023 0304 	bic.w	r3, r3, #4
  403d28:	9306      	str	r3, [sp, #24]
  403d2a:	9b06      	ldr	r3, [sp, #24]
  403d2c:	6313      	str	r3, [r2, #48]	; 0x30
  403d2e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403d30:	f013 0304 	ands.w	r3, r3, #4
  403d34:	d1fb      	bne.n	403d2e <UDP_Handler+0x6ba>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  403d36:	2202      	movs	r2, #2
		udd_ctrl_prev_payload_nb_trans = 0;
  403d38:	4830      	ldr	r0, [pc, #192]	; (403dfc <UDP_Handler+0x788>)
		udd_ctrl_payload_nb_trans = 0;
  403d3a:	4931      	ldr	r1, [pc, #196]	; (403e00 <UDP_Handler+0x78c>)
		udd_ctrl_prev_payload_nb_trans = 0;
  403d3c:	8003      	strh	r3, [r0, #0]
		udd_ctrl_payload_nb_trans = 0;
  403d3e:	800b      	strh	r3, [r1, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  403d40:	702a      	strb	r2, [r5, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  403d42:	4b30      	ldr	r3, [pc, #192]	; (403e04 <UDP_Handler+0x790>)
  403d44:	e564      	b.n	403810 <UDP_Handler+0x19c>
				if (ptr_job->bank) {
  403d46:	f013 0f0c 	tst.w	r3, #12
					udd_set_transmit_ready(ep);
  403d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
				if (ptr_job->bank) {
  403d4c:	f000 8099 	beq.w	403e82 <UDP_Handler+0x80e>
					udd_set_transmit_ready(ep);
  403d50:	9316      	str	r3, [sp, #88]	; 0x58
  403d52:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403d54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d58:	9316      	str	r3, [sp, #88]	; 0x58
  403d5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403d5c:	f043 0310 	orr.w	r3, r3, #16
  403d60:	9316      	str	r3, [sp, #88]	; 0x58
  403d62:	9b16      	ldr	r3, [sp, #88]	; 0x58
  403d64:	6323      	str	r3, [r4, #48]	; 0x30
  403d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403d68:	06dd      	lsls	r5, r3, #27
  403d6a:	d5fc      	bpl.n	403d66 <UDP_Handler+0x6f2>
					udd_ack_in_sent(ep);
  403d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403d6e:	9317      	str	r3, [sp, #92]	; 0x5c
  403d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403d72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d76:	9317      	str	r3, [sp, #92]	; 0x5c
  403d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403d7a:	f023 0301 	bic.w	r3, r3, #1
  403d7e:	9317      	str	r3, [sp, #92]	; 0x5c
  403d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403d82:	6323      	str	r3, [r4, #48]	; 0x30
  403d84:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403d86:	07d8      	lsls	r0, r3, #31
  403d88:	d4fc      	bmi.n	403d84 <UDP_Handler+0x710>
  403d8a:	e4da      	b.n	403742 <UDP_Handler+0xce>
			(udd_ctrl_prev_payload_nb_trans +
  403d8c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 403dfc <UDP_Handler+0x788>
			|| (udd_g_ctrlreq.req.wLength <=
  403d90:	88f2      	ldrh	r2, [r6, #6]
			(udd_ctrl_prev_payload_nb_trans +
  403d92:	f8b8 3000 	ldrh.w	r3, [r8]
  403d96:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
  403d98:	429a      	cmp	r2, r3
  403d9a:	f77f add2 	ble.w	403942 <UDP_Handler+0x2ce>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  403d9e:	89b3      	ldrh	r3, [r6, #12]
  403da0:	4563      	cmp	r3, ip
  403da2:	f000 80df 	beq.w	403f64 <UDP_Handler+0x8f0>
	udd_ack_bank0_received(0);
  403da6:	4a0d      	ldr	r2, [pc, #52]	; (403ddc <UDP_Handler+0x768>)
  403da8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403daa:	9310      	str	r3, [sp, #64]	; 0x40
  403dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403dae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403db2:	9310      	str	r3, [sp, #64]	; 0x40
  403db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403db6:	f023 0302 	bic.w	r3, r3, #2
  403dba:	9310      	str	r3, [sp, #64]	; 0x40
  403dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403dbe:	6313      	str	r3, [r2, #48]	; 0x30
  403dc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403dc2:	079d      	lsls	r5, r3, #30
  403dc4:	d4fc      	bmi.n	403dc0 <UDP_Handler+0x74c>
  403dc6:	e4bc      	b.n	403742 <UDP_Handler+0xce>
		ptr_job->buf_cnt += nb_data;
  403dc8:	eb0e 0102 	add.w	r1, lr, r2
  403dcc:	60d9      	str	r1, [r3, #12]
	bool b_full = false, b_short;
  403dce:	2300      	movs	r3, #0
		ptr_job->buf_cnt += nb_data;
  403dd0:	4694      	mov	ip, r2
	bool b_full = false, b_short;
  403dd2:	9300      	str	r3, [sp, #0]
  403dd4:	e73a      	b.n	403c4c <UDP_Handler+0x5d8>
  403dd6:	bf00      	nop
  403dd8:	004020b1 	.word	0x004020b1
  403ddc:	40034000 	.word	0x40034000
  403de0:	20000718 	.word	0x20000718
  403de4:	200196ec 	.word	0x200196ec
  403de8:	2001965e 	.word	0x2001965e
  403dec:	00403205 	.word	0x00403205
  403df0:	004032e1 	.word	0x004032e1
  403df4:	00402cf5 	.word	0x00402cf5
  403df8:	00401e05 	.word	0x00401e05
  403dfc:	2001965c 	.word	0x2001965c
  403e00:	2001965a 	.word	0x2001965a
  403e04:	004034b1 	.word	0x004034b1
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403e08:	2305      	movs	r3, #5
	udd_enable_stall_handshake(0);
  403e0a:	4a83      	ldr	r2, [pc, #524]	; (404018 <UDP_Handler+0x9a4>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403e0c:	702b      	strb	r3, [r5, #0]
	udd_enable_stall_handshake(0);
  403e0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403e10:	9312      	str	r3, [sp, #72]	; 0x48
  403e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403e18:	9312      	str	r3, [sp, #72]	; 0x48
  403e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e1c:	f043 0320 	orr.w	r3, r3, #32
  403e20:	9312      	str	r3, [sp, #72]	; 0x48
  403e22:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403e24:	6313      	str	r3, [r2, #48]	; 0x30
  403e26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403e28:	069e      	lsls	r6, r3, #26
  403e2a:	d5fc      	bpl.n	403e26 <UDP_Handler+0x7b2>
				udd_ack_bank0_received(0);
  403e2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403e2e:	497a      	ldr	r1, [pc, #488]	; (404018 <UDP_Handler+0x9a4>)
  403e30:	930c      	str	r3, [sp, #48]	; 0x30
  403e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403e38:	930c      	str	r3, [sp, #48]	; 0x30
  403e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e3c:	f023 0302 	bic.w	r3, r3, #2
  403e40:	930c      	str	r3, [sp, #48]	; 0x30
  403e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e44:	6313      	str	r3, [r2, #48]	; 0x30
  403e46:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403e48:	079d      	lsls	r5, r3, #30
  403e4a:	d4fc      	bmi.n	403e46 <UDP_Handler+0x7d2>
  403e4c:	e479      	b.n	403742 <UDP_Handler+0xce>
				if (!udd_ep_in_sent(ep, true)) {
  403e4e:	2101      	movs	r1, #1
  403e50:	4650      	mov	r0, sl
  403e52:	4f72      	ldr	r7, [pc, #456]	; (40401c <UDP_Handler+0x9a8>)
  403e54:	47b8      	blx	r7
  403e56:	4601      	mov	r1, r0
  403e58:	2800      	cmp	r0, #0
  403e5a:	d072      	beq.n	403f42 <UDP_Handler+0x8ce>
				udd_ack_in_sent(ep);
  403e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403e5e:	931e      	str	r3, [sp, #120]	; 0x78
  403e60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e62:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403e66:	931e      	str	r3, [sp, #120]	; 0x78
  403e68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e6a:	f023 0301 	bic.w	r3, r3, #1
  403e6e:	931e      	str	r3, [sp, #120]	; 0x78
  403e70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e72:	6323      	str	r3, [r4, #48]	; 0x30
  403e74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403e76:	f011 0101 	ands.w	r1, r1, #1
  403e7a:	d1fb      	bne.n	403e74 <UDP_Handler+0x800>
				udd_ep_in_sent(ep, false);
  403e7c:	4650      	mov	r0, sl
  403e7e:	463b      	mov	r3, r7
  403e80:	e724      	b.n	403ccc <UDP_Handler+0x658>
					udd_ack_in_sent(ep);
  403e82:	9318      	str	r3, [sp, #96]	; 0x60
  403e84:	9b18      	ldr	r3, [sp, #96]	; 0x60
  403e86:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403e8a:	9318      	str	r3, [sp, #96]	; 0x60
  403e8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  403e8e:	f023 0301 	bic.w	r3, r3, #1
  403e92:	9318      	str	r3, [sp, #96]	; 0x60
  403e94:	9b18      	ldr	r3, [sp, #96]	; 0x60
  403e96:	6323      	str	r3, [r4, #48]	; 0x30
  403e98:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403e9a:	07d9      	lsls	r1, r3, #31
  403e9c:	d4fc      	bmi.n	403e98 <UDP_Handler+0x824>
					udd_enable_stall_handshake(ep);
  403e9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403ea0:	9319      	str	r3, [sp, #100]	; 0x64
  403ea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ea4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ea8:	9319      	str	r3, [sp, #100]	; 0x64
  403eaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403eac:	f043 0320 	orr.w	r3, r3, #32
  403eb0:	9319      	str	r3, [sp, #100]	; 0x64
  403eb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403eb4:	6323      	str	r3, [r4, #48]	; 0x30
  403eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403eb8:	069a      	lsls	r2, r3, #26
  403eba:	d5fc      	bpl.n	403eb6 <UDP_Handler+0x842>
					ptr_job->b_stall_requested = false;
  403ebc:	444f      	add	r7, r9
  403ebe:	eb08 0887 	add.w	r8, r8, r7, lsl #2
  403ec2:	f898 3011 	ldrb.w	r3, [r8, #17]
  403ec6:	f36f 1345 	bfc	r3, #5, #1
  403eca:	f888 3011 	strb.w	r3, [r8, #17]
  403ece:	e438      	b.n	403742 <UDP_Handler+0xce>
				ptr_job->b_buf_end = false;
  403ed0:	f89c 3001 	ldrb.w	r3, [ip, #1]
  403ed4:	f361 13c7 	bfi	r3, r1, #7, #1
  403ed8:	f88c 3001 	strb.w	r3, [ip, #1]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403edc:	68c3      	ldr	r3, [r0, #12]
  403ede:	6083      	str	r3, [r0, #8]
                udd_disable_endpoint_interrupt(ep);
  403ee0:	6156      	str	r6, [r2, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403ee2:	4628      	mov	r0, r5
  403ee4:	4652      	mov	r2, sl
  403ee6:	4b4e      	ldr	r3, [pc, #312]	; (404020 <UDP_Handler+0x9ac>)
  403ee8:	4798      	blx	r3
  403eea:	e5be      	b.n	403a6a <UDP_Handler+0x3f6>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  403eec:	2303      	movs	r3, #3
  403eee:	702b      	strb	r3, [r5, #0]
	udd_set_transmit_ready(0);
  403ef0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403ef2:	4949      	ldr	r1, [pc, #292]	; (404018 <UDP_Handler+0x9a4>)
  403ef4:	930a      	str	r3, [sp, #40]	; 0x28
  403ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ef8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403efc:	930a      	str	r3, [sp, #40]	; 0x28
  403efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f00:	f043 0310 	orr.w	r3, r3, #16
  403f04:	930a      	str	r3, [sp, #40]	; 0x28
  403f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f08:	6313      	str	r3, [r2, #48]	; 0x30
  403f0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403f0c:	06d8      	lsls	r0, r3, #27
  403f0e:	d5fc      	bpl.n	403f0a <UDP_Handler+0x896>
  403f10:	e417      	b.n	403742 <UDP_Handler+0xce>
				udd_ep_in_sent(ep, true);
  403f12:	4b42      	ldr	r3, [pc, #264]	; (40401c <UDP_Handler+0x9a8>)
  403f14:	2101      	movs	r1, #1
  403f16:	4650      	mov	r0, sl
  403f18:	4798      	blx	r3
				udd_ack_in_sent(ep);
  403f1a:	4a3f      	ldr	r2, [pc, #252]	; (404018 <UDP_Handler+0x9a4>)
  403f1c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  403f1e:	931f      	str	r3, [sp, #124]	; 0x7c
  403f20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f22:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403f26:	931f      	str	r3, [sp, #124]	; 0x7c
  403f28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f2a:	f023 0301 	bic.w	r3, r3, #1
  403f2e:	931f      	str	r3, [sp, #124]	; 0x7c
  403f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f32:	63d3      	str	r3, [r2, #60]	; 0x3c
  403f34:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  403f36:	07d8      	lsls	r0, r3, #31
  403f38:	d4fc      	bmi.n	403f34 <UDP_Handler+0x8c0>
  403f3a:	e402      	b.n	403742 <UDP_Handler+0xce>
	udd_ctrl_payload_nb_trans += nb_data;
  403f3c:	f8a4 c000 	strh.w	ip, [r4]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  403f40:	e4ff      	b.n	403942 <UDP_Handler+0x2ce>
					ptr_job->b_buf_end = false;
  403f42:	f898 3011 	ldrb.w	r3, [r8, #17]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403f46:	4628      	mov	r0, r5
					ptr_job->b_buf_end = false;
  403f48:	f361 13c7 	bfi	r3, r1, #7, #1
  403f4c:	f888 3011 	strb.w	r3, [r8, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403f50:	f8d8 300c 	ldr.w	r3, [r8, #12]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403f54:	4652      	mov	r2, sl
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  403f56:	f8c8 3008 	str.w	r3, [r8, #8]
                    udd_disable_endpoint_interrupt(ep);
  403f5a:	4b2f      	ldr	r3, [pc, #188]	; (404018 <UDP_Handler+0x9a4>)
  403f5c:	615e      	str	r6, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  403f5e:	4b30      	ldr	r3, [pc, #192]	; (404020 <UDP_Handler+0x9ac>)
  403f60:	4798      	blx	r3
  403f62:	e77b      	b.n	403e5c <UDP_Handler+0x7e8>
		if (!udd_g_ctrlreq.over_under_run) {
  403f64:	6973      	ldr	r3, [r6, #20]
  403f66:	2b00      	cmp	r3, #0
  403f68:	d032      	beq.n	403fd0 <UDP_Handler+0x95c>
		if (!udd_g_ctrlreq.over_under_run()) {
  403f6a:	4798      	blx	r3
  403f6c:	b160      	cbz	r0, 403f88 <UDP_Handler+0x914>
		udd_ctrl_payload_nb_trans = 0;
  403f6e:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  403f70:	f8b8 3000 	ldrh.w	r3, [r8]
  403f74:	8821      	ldrh	r1, [r4, #0]
		udd_ctrl_payload_nb_trans = 0;
  403f76:	8022      	strh	r2, [r4, #0]
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  403f78:	440b      	add	r3, r1
  403f7a:	f8a8 3000 	strh.w	r3, [r8]
		udd_ctrl_payload_nb_trans = 0;
  403f7e:	e712      	b.n	403da6 <UDP_Handler+0x732>
	udd_ep_ack_out_received(ep);
  403f80:	4650      	mov	r0, sl
  403f82:	4b28      	ldr	r3, [pc, #160]	; (404024 <UDP_Handler+0x9b0>)
  403f84:	4798      	blx	r3
	if ((b_full || b_short) &&
  403f86:	e542      	b.n	403a0e <UDP_Handler+0x39a>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403f88:	2205      	movs	r2, #5
  403f8a:	702a      	strb	r2, [r5, #0]
	udd_enable_stall_handshake(0);
  403f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  403f8e:	4b22      	ldr	r3, [pc, #136]	; (404018 <UDP_Handler+0x9a4>)
  403f90:	9215      	str	r2, [sp, #84]	; 0x54
  403f92:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403f94:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403f98:	9215      	str	r2, [sp, #84]	; 0x54
  403f9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403f9c:	f042 0220 	orr.w	r2, r2, #32
  403fa0:	9215      	str	r2, [sp, #84]	; 0x54
  403fa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  403fa4:	633a      	str	r2, [r7, #48]	; 0x30
  403fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403fa8:	0697      	lsls	r7, r2, #26
  403faa:	d5fc      	bpl.n	403fa6 <UDP_Handler+0x932>
			udd_ack_bank0_received(0);
  403fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403fae:	491a      	ldr	r1, [pc, #104]	; (404018 <UDP_Handler+0x9a4>)
  403fb0:	920f      	str	r2, [sp, #60]	; 0x3c
  403fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fb4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403fb8:	920f      	str	r2, [sp, #60]	; 0x3c
  403fba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fbc:	f022 0202 	bic.w	r2, r2, #2
  403fc0:	920f      	str	r2, [sp, #60]	; 0x3c
  403fc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403fc4:	631a      	str	r2, [r3, #48]	; 0x30
  403fc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  403fc8:	079e      	lsls	r6, r3, #30
  403fca:	d4fc      	bmi.n	403fc6 <UDP_Handler+0x952>
  403fcc:	f7ff bbb9 	b.w	403742 <UDP_Handler+0xce>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  403fd0:	2205      	movs	r2, #5
  403fd2:	702a      	strb	r2, [r5, #0]
	udd_enable_stall_handshake(0);
  403fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  403fd6:	4b10      	ldr	r3, [pc, #64]	; (404018 <UDP_Handler+0x9a4>)
  403fd8:	9214      	str	r2, [sp, #80]	; 0x50
  403fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403fdc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403fe0:	9214      	str	r2, [sp, #80]	; 0x50
  403fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403fe4:	f042 0220 	orr.w	r2, r2, #32
  403fe8:	9214      	str	r2, [sp, #80]	; 0x50
  403fea:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403fec:	633a      	str	r2, [r7, #48]	; 0x30
  403fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403ff0:	0692      	lsls	r2, r2, #26
  403ff2:	d5fc      	bpl.n	403fee <UDP_Handler+0x97a>
			udd_ack_bank0_received(0);
  403ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403ff6:	4908      	ldr	r1, [pc, #32]	; (404018 <UDP_Handler+0x9a4>)
  403ff8:	920e      	str	r2, [sp, #56]	; 0x38
  403ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403ffc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  404000:	920e      	str	r2, [sp, #56]	; 0x38
  404002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404004:	f022 0202 	bic.w	r2, r2, #2
  404008:	920e      	str	r2, [sp, #56]	; 0x38
  40400a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40400c:	631a      	str	r2, [r3, #48]	; 0x30
  40400e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404010:	079b      	lsls	r3, r3, #30
  404012:	d4fc      	bmi.n	40400e <UDP_Handler+0x99a>
  404014:	f7ff bb95 	b.w	403742 <UDP_Handler+0xce>
  404018:	40034000 	.word	0x40034000
  40401c:	004032e1 	.word	0x004032e1
  404020:	00403471 	.word	0x00403471
  404024:	00403205 	.word	0x00403205

00404028 <udd_disable>:
{
  404028:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40402a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40402e:	fab3 f383 	clz	r3, r3
  404032:	095b      	lsrs	r3, r3, #5
  404034:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404036:	b672      	cpsid	i
  404038:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40403c:	2200      	movs	r2, #0
  40403e:	490a      	ldr	r1, [pc, #40]	; (404068 <udd_disable+0x40>)
	udd_disable_transceiver();
  404040:	4b0a      	ldr	r3, [pc, #40]	; (40406c <udd_disable+0x44>)
  404042:	700a      	strb	r2, [r1, #0]
	return flags;
  404044:	9801      	ldr	r0, [sp, #4]
  404046:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40404c:	675a      	str	r2, [r3, #116]	; 0x74
	udd_detach_device();
  40404e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404050:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404054:	675a      	str	r2, [r3, #116]	; 0x74
	if (cpu_irq_is_enabled_flags(flags))
  404056:	b120      	cbz	r0, 404062 <udd_disable+0x3a>
		cpu_irq_enable();
  404058:	2301      	movs	r3, #1
  40405a:	700b      	strb	r3, [r1, #0]
  40405c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404060:	b662      	cpsie	i
}
  404062:	b002      	add	sp, #8
  404064:	4770      	bx	lr
  404066:	bf00      	nop
  404068:	20000718 	.word	0x20000718
  40406c:	40034000 	.word	0x40034000

00404070 <udd_attach>:
{
  404070:	b5f0      	push	{r4, r5, r6, r7, lr}
  404072:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404074:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404078:	fab3 f383 	clz	r3, r3
  40407c:	095b      	lsrs	r3, r3, #5
  40407e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404080:	b672      	cpsid	i
  404082:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404086:	2200      	movs	r2, #0
  404088:	4c12      	ldr	r4, [pc, #72]	; (4040d4 <udd_attach+0x64>)
	udd_enable_resume_interrupt();
  40408a:	f44f 7600 	mov.w	r6, #512	; 0x200
  40408e:	7022      	strb	r2, [r4, #0]
	udd_enable_periph_ck();
  404090:	4b11      	ldr	r3, [pc, #68]	; (4040d8 <udd_attach+0x68>)
  404092:	2022      	movs	r0, #34	; 0x22
	udd_enable_wake_up_interrupt();
  404094:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	return flags;
  404098:	9d01      	ldr	r5, [sp, #4]
	udd_enable_periph_ck();
  40409a:	4798      	blx	r3
	udd_enable_suspend_interrupt();
  40409c:	f44f 7c80 	mov.w	ip, #256	; 0x100
	udd_enable_ext_resume_interrupt();
  4040a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
	udd_enable_sof_interrupt();
  4040a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
	udd_enable_transceiver();
  4040a8:	4b0c      	ldr	r3, [pc, #48]	; (4040dc <udd_attach+0x6c>)
  4040aa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4040ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4040b0:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  4040b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4040b4:	4332      	orrs	r2, r6
  4040b6:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  4040b8:	f8c3 c010 	str.w	ip, [r3, #16]
	udd_enable_wake_up_interrupt();
  4040bc:	611f      	str	r7, [r3, #16]
	udd_enable_resume_interrupt();
  4040be:	611e      	str	r6, [r3, #16]
	udd_enable_ext_resume_interrupt();
  4040c0:	6118      	str	r0, [r3, #16]
	udd_enable_sof_interrupt();
  4040c2:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4040c4:	b125      	cbz	r5, 4040d0 <udd_attach+0x60>
		cpu_irq_enable();
  4040c6:	2301      	movs	r3, #1
  4040c8:	7023      	strb	r3, [r4, #0]
  4040ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4040ce:	b662      	cpsie	i
}
  4040d0:	b003      	add	sp, #12
  4040d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4040d4:	20000718 	.word	0x20000718
  4040d8:	00402cb1 	.word	0x00402cb1
  4040dc:	40034000 	.word	0x40034000

004040e0 <udd_enable>:
{
  4040e0:	b570      	push	{r4, r5, r6, lr}
  4040e2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4040e4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4040e8:	fab3 f383 	clz	r3, r3
  4040ec:	095b      	lsrs	r3, r3, #5
  4040ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4040f0:	b672      	cpsid	i
  4040f2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4040f6:	2400      	movs	r4, #0
  4040f8:	4d14      	ldr	r5, [pc, #80]	; (40414c <udd_enable+0x6c>)
	udd_enable_periph_ck();
  4040fa:	4b15      	ldr	r3, [pc, #84]	; (404150 <udd_enable+0x70>)
  4040fc:	702c      	strb	r4, [r5, #0]
  4040fe:	2022      	movs	r0, #34	; 0x22
	return flags;
  404100:	9e01      	ldr	r6, [sp, #4]
  404102:	4798      	blx	r3
	sysclk_enable_usb();
  404104:	4b13      	ldr	r3, [pc, #76]	; (404154 <udd_enable+0x74>)
  404106:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  404108:	2050      	movs	r0, #80	; 0x50
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40410a:	2104      	movs	r1, #4
  40410c:	4623      	mov	r3, r4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40410e:	4a12      	ldr	r2, [pc, #72]	; (404158 <udd_enable+0x78>)
  404110:	f882 0322 	strb.w	r0, [r2, #802]	; 0x322
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404114:	4811      	ldr	r0, [pc, #68]	; (40415c <udd_enable+0x7c>)
  404116:	6051      	str	r1, [r2, #4]
		udd_ep_job[i].b_buf_end = false;
  404118:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40411c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
		udd_ep_job[i].bank = 0;
  404120:	7c51      	ldrb	r1, [r2, #17]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  404122:	3301      	adds	r3, #1
		udd_ep_job[i].bank = 0;
  404124:	f001 0103 	and.w	r1, r1, #3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  404128:	2b07      	cmp	r3, #7
		udd_ep_job[i].bank = 0;
  40412a:	7451      	strb	r1, [r2, #17]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40412c:	d1f4      	bne.n	404118 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  40412e:	4b0c      	ldr	r3, [pc, #48]	; (404160 <udd_enable+0x80>)
  404130:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  404134:	4798      	blx	r3
	udd_attach();
  404136:	4b0b      	ldr	r3, [pc, #44]	; (404164 <udd_enable+0x84>)
  404138:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  40413a:	b126      	cbz	r6, 404146 <udd_enable+0x66>
		cpu_irq_enable();
  40413c:	2301      	movs	r3, #1
  40413e:	702b      	strb	r3, [r5, #0]
  404140:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404144:	b662      	cpsie	i
}
  404146:	b002      	add	sp, #8
  404148:	bd70      	pop	{r4, r5, r6, pc}
  40414a:	bf00      	nop
  40414c:	20000718 	.word	0x20000718
  404150:	00402cb1 	.word	0x00402cb1
  404154:	00402aa1 	.word	0x00402aa1
  404158:	e000e100 	.word	0xe000e100
  40415c:	20019660 	.word	0x20019660
  404160:	00402d69 	.word	0x00402d69
  404164:	00404071 	.word	0x00404071

00404168 <udd_detach>:
	udd_disable_transceiver();
  404168:	4b04      	ldr	r3, [pc, #16]	; (40417c <udd_detach+0x14>)
  40416a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  404170:	675a      	str	r2, [r3, #116]	; 0x74
	udd_detach_device();
  404172:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  404178:	675a      	str	r2, [r3, #116]	; 0x74
}
  40417a:	4770      	bx	lr
  40417c:	40034000 	.word	0x40034000

00404180 <udd_is_high_speed>:
  404180:	2000      	movs	r0, #0
  404182:	4770      	bx	lr

00404184 <udd_set_address>:
	udd_disable_address_state();
  404184:	4b0c      	ldr	r3, [pc, #48]	; (4041b8 <udd_set_address+0x34>)
  404186:	685a      	ldr	r2, [r3, #4]
  404188:	f022 0201 	bic.w	r2, r2, #1
  40418c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40418e:	689a      	ldr	r2, [r3, #8]
  404190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  404194:	609a      	str	r2, [r3, #8]
	if (address) {
  404196:	b170      	cbz	r0, 4041b6 <udd_set_address+0x32>
		udd_configure_address(address);
  404198:	689a      	ldr	r2, [r3, #8]
  40419a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40419e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4041a2:	4310      	orrs	r0, r2
  4041a4:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  4041a6:	689a      	ldr	r2, [r3, #8]
  4041a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4041ac:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  4041ae:	685a      	ldr	r2, [r3, #4]
  4041b0:	f042 0201 	orr.w	r2, r2, #1
  4041b4:	605a      	str	r2, [r3, #4]
}
  4041b6:	4770      	bx	lr
  4041b8:	40034000 	.word	0x40034000

004041bc <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  4041bc:	4b04      	ldr	r3, [pc, #16]	; (4041d0 <udd_getaddress+0x14>)
  4041be:	6858      	ldr	r0, [r3, #4]
  4041c0:	f010 0001 	ands.w	r0, r0, #1
		return udd_get_configured_address();
  4041c4:	bf1c      	itt	ne
  4041c6:	6898      	ldrne	r0, [r3, #8]
  4041c8:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
}
  4041cc:	4770      	bx	lr
  4041ce:	bf00      	nop
  4041d0:	40034000 	.word	0x40034000

004041d4 <udd_get_frame_number>:
	return udd_frame_number();
  4041d4:	4b02      	ldr	r3, [pc, #8]	; (4041e0 <udd_get_frame_number+0xc>)
  4041d6:	6818      	ldr	r0, [r3, #0]
}
  4041d8:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4041dc:	4770      	bx	lr
  4041de:	bf00      	nop
  4041e0:	40034000 	.word	0x40034000

004041e4 <udd_get_micro_frame_number>:
}
  4041e4:	2000      	movs	r0, #0
  4041e6:	4770      	bx	lr

004041e8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4041e8:	4b01      	ldr	r3, [pc, #4]	; (4041f0 <udd_set_setup_payload+0x8>)
  4041ea:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4041ec:	8199      	strh	r1, [r3, #12]
}
  4041ee:	4770      	bx	lr
  4041f0:	200196ec 	.word	0x200196ec

004041f4 <udd_ep_alloc>:
{
  4041f4:	b510      	push	{r4, lr}
	if (ep > USB_DEVICE_MAX_EP) {
  4041f6:	f010 0e08 	ands.w	lr, r0, #8
{
  4041fa:	b082      	sub	sp, #8
	if (ep > USB_DEVICE_MAX_EP) {
  4041fc:	d165      	bne.n	4042ca <udd_ep_alloc+0xd6>
	ep = ep & USB_EP_ADDR_MASK;
  4041fe:	f000 030f 	and.w	r3, r0, #15
	if (Is_udd_endpoint_enabled(ep)) {
  404202:	ea4f 0c83 	mov.w	ip, r3, lsl #2
  404206:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
  40420a:	f50c 3c40 	add.w	ip, ip, #196608	; 0x30000
  40420e:	f8dc 4030 	ldr.w	r4, [ip, #48]	; 0x30
  404212:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
  404216:	d158      	bne.n	4042ca <udd_ep_alloc+0xd6>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  404218:	f001 0e03 	and.w	lr, r1, #3
  40421c:	f1be 0f01 	cmp.w	lr, #1
  404220:	d050      	beq.n	4042c4 <udd_ep_alloc+0xd0>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  404222:	1f1c      	subs	r4, r3, #4
  404224:	2c01      	cmp	r4, #1
  404226:	bf94      	ite	ls
  404228:	f44f 7400 	movls.w	r4, #512	; 0x200
  40422c:	2440      	movhi	r4, #64	; 0x40
  40422e:	42a2      	cmp	r2, r4
  404230:	dc4b      	bgt.n	4042ca <udd_ep_alloc+0xd6>
  404232:	4c2b      	ldr	r4, [pc, #172]	; (4042e0 <udd_ep_alloc+0xec>)
	ptr_job = &udd_ep_job[ep - 1];
  404234:	f103 3eff 	add.w	lr, r3, #4294967295
  404238:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  40423c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
	ptr_job->size = MaxEndpointSize;
  404240:	f8be 4010 	ldrh.w	r4, [lr, #16]
  404244:	f3c2 0209 	ubfx	r2, r2, #0, #10
  404248:	b240      	sxtb	r0, r0
  40424a:	f404 44b8 	and.w	r4, r4, #23552	; 0x5c00
  40424e:	4322      	orrs	r2, r4
	if (b_dir_in) {
  404250:	2800      	cmp	r0, #0
	ptr_job->size = MaxEndpointSize;
  404252:	f8ae 2010 	strh.w	r2, [lr, #16]
	if (b_dir_in) {
  404256:	db3b      	blt.n	4042d0 <udd_ep_alloc+0xdc>
	udd_reset_endpoint(ep);
  404258:	f04f 0e01 	mov.w	lr, #1
  40425c:	4c21      	ldr	r4, [pc, #132]	; (4042e4 <udd_ep_alloc+0xf0>)
  40425e:	fa0e fe03 	lsl.w	lr, lr, r3
  404262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  404264:	ea43 030e 	orr.w	r3, r3, lr
  404268:	62a3      	str	r3, [r4, #40]	; 0x28
  40426a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  40426c:	ea1e 0f02 	tst.w	lr, r2
  404270:	d0fb      	beq.n	40426a <udd_ep_alloc+0x76>
  404272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	udd_configure_endpoint(ep,
  404274:	2800      	cmp	r0, #0
	udd_reset_endpoint(ep);
  404276:	ea23 030e 	bic.w	r3, r3, lr
  40427a:	62a3      	str	r3, [r4, #40]	; 0x28
	udd_configure_endpoint(ep,
  40427c:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
  404280:	9301      	str	r3, [sp, #4]
  404282:	9b01      	ldr	r3, [sp, #4]
  404284:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404288:	9301      	str	r3, [sp, #4]
  40428a:	9b01      	ldr	r3, [sp, #4]
  40428c:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  404290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404294:	9301      	str	r3, [sp, #4]
  404296:	ea4f 2301 	mov.w	r3, r1, lsl #8
  40429a:	9a01      	ldr	r2, [sp, #4]
  40429c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4042a0:	bfb4      	ite	lt
  4042a2:	f443 4304 	orrlt.w	r3, r3, #33792	; 0x8400
  4042a6:	f443 4300 	orrge.w	r3, r3, #32768	; 0x8000
  4042aa:	431a      	orrs	r2, r3
  4042ac:	9201      	str	r2, [sp, #4]
  4042ae:	9a01      	ldr	r2, [sp, #4]
  4042b0:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  4042b4:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
  4042b8:	ea33 0202 	bics.w	r2, r3, r2
  4042bc:	d1fa      	bne.n	4042b4 <udd_ep_alloc+0xc0>
	return true;
  4042be:	2001      	movs	r0, #1
}
  4042c0:	b002      	add	sp, #8
  4042c2:	bd10      	pop	{r4, pc}
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4042c4:	b10b      	cbz	r3, 4042ca <udd_ep_alloc+0xd6>
  4042c6:	2b03      	cmp	r3, #3
  4042c8:	d1ab      	bne.n	404222 <udd_ep_alloc+0x2e>
		return false;
  4042ca:	2000      	movs	r0, #0
}
  4042cc:	b002      	add	sp, #8
  4042ce:	bd10      	pop	{r4, pc}
		ptr_job->bank = 0;
  4042d0:	f89e 2011 	ldrb.w	r2, [lr, #17]
  4042d4:	f36f 0283 	bfc	r2, #2, #2
  4042d8:	f88e 2011 	strb.w	r2, [lr, #17]
  4042dc:	e7bc      	b.n	404258 <udd_ep_alloc+0x64>
  4042de:	bf00      	nop
  4042e0:	20019660 	.word	0x20019660
  4042e4:	40034000 	.word	0x40034000

004042e8 <udd_ep_free>:
	if (USB_DEVICE_MAX_EP < ep_index) {
  4042e8:	0702      	lsls	r2, r0, #28
  4042ea:	d423      	bmi.n	404334 <udd_ep_free+0x4c>
{
  4042ec:	b410      	push	{r4}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4042ee:	f000 020f 	and.w	r2, r0, #15
	udd_disable_endpoint(ep_index);
  4042f2:	0091      	lsls	r1, r2, #2
  4042f4:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4042f8:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
  4042fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
{
  4042fe:	b083      	sub	sp, #12
	udd_disable_endpoint(ep_index);
  404300:	9301      	str	r3, [sp, #4]
  404302:	9b01      	ldr	r3, [sp, #4]
  404304:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404308:	9301      	str	r3, [sp, #4]
  40430a:	9b01      	ldr	r3, [sp, #4]
  40430c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404310:	9301      	str	r3, [sp, #4]
  404312:	9b01      	ldr	r3, [sp, #4]
  404314:	630b      	str	r3, [r1, #48]	; 0x30
  404316:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404318:	041b      	lsls	r3, r3, #16
  40431a:	d4fc      	bmi.n	404316 <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40431c:	4c06      	ldr	r4, [pc, #24]	; (404338 <udd_ep_free+0x50>)
  40431e:	1e53      	subs	r3, r2, #1
  404320:	4806      	ldr	r0, [pc, #24]	; (40433c <udd_ep_free+0x54>)
  404322:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404326:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  40432a:	2101      	movs	r1, #1
  40432c:	4623      	mov	r3, r4
}
  40432e:	b003      	add	sp, #12
  404330:	bc10      	pop	{r4}
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  404332:	4718      	bx	r3
  404334:	4770      	bx	lr
  404336:	bf00      	nop
  404338:	00403471 	.word	0x00403471
  40433c:	20019660 	.word	0x20019660

00404340 <udd_ep_is_halted>:
	if (USB_DEVICE_MAX_EP < ep_index) {
  404340:	0702      	lsls	r2, r0, #28
  404342:	d416      	bmi.n	404372 <udd_ep_is_halted+0x32>
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404344:	f000 000f 	and.w	r0, r0, #15
	return ptr_job->b_stall_requested ||
  404348:	4a0b      	ldr	r2, [pc, #44]	; (404378 <udd_ep_is_halted+0x38>)
  40434a:	1e43      	subs	r3, r0, #1
  40434c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  404354:	7c5b      	ldrb	r3, [r3, #17]
  404356:	069b      	lsls	r3, r3, #26
  404358:	d501      	bpl.n	40435e <udd_ep_is_halted+0x1e>
  40435a:	2001      	movs	r0, #1
  40435c:	4770      	bx	lr
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  40435e:	4b07      	ldr	r3, [pc, #28]	; (40437c <udd_ep_is_halted+0x3c>)
  404360:	300c      	adds	r0, #12
  404362:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  404366:	f013 0f28 	tst.w	r3, #40	; 0x28
  40436a:	bf14      	ite	ne
  40436c:	2001      	movne	r0, #1
  40436e:	2000      	moveq	r0, #0
  404370:	4770      	bx	lr
		return false;
  404372:	2000      	movs	r0, #0
}
  404374:	4770      	bx	lr
  404376:	bf00      	nop
  404378:	20019660 	.word	0x20019660
  40437c:	40034000 	.word	0x40034000

00404380 <udd_ep_set_halt>:
	if (USB_DEVICE_MAX_EP < ep_index) {
  404380:	f010 0208 	ands.w	r2, r0, #8
  404384:	d14d      	bne.n	404422 <udd_ep_set_halt+0xa2>
{
  404386:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404388:	f000 010f 	and.w	r1, r0, #15
{
  40438c:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40438e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404392:	fab3 f383 	clz	r3, r3
  404396:	095b      	lsrs	r3, r3, #5
  404398:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40439a:	b672      	cpsid	i
  40439c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4043a0:	4c25      	ldr	r4, [pc, #148]	; (404438 <udd_ep_set_halt+0xb8>)
  4043a2:	7022      	strb	r2, [r4, #0]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4043a4:	0602      	lsls	r2, r0, #24
	return flags;
  4043a6:	9d01      	ldr	r5, [sp, #4]
  4043a8:	d41d      	bmi.n	4043e6 <udd_ep_set_halt+0x66>
		udd_enable_stall_handshake(ep_index);
  4043aa:	008a      	lsls	r2, r1, #2
  4043ac:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4043b0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  4043b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4043b6:	9300      	str	r3, [sp, #0]
  4043b8:	9b00      	ldr	r3, [sp, #0]
  4043ba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4043be:	9300      	str	r3, [sp, #0]
  4043c0:	9b00      	ldr	r3, [sp, #0]
  4043c2:	f043 0320 	orr.w	r3, r3, #32
  4043c6:	9300      	str	r3, [sp, #0]
  4043c8:	9b00      	ldr	r3, [sp, #0]
  4043ca:	6313      	str	r3, [r2, #48]	; 0x30
  4043cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4043ce:	069b      	lsls	r3, r3, #26
  4043d0:	d5fc      	bpl.n	4043cc <udd_ep_set_halt+0x4c>
		udd_enable_endpoint_interrupt(ep_index);
  4043d2:	2001      	movs	r0, #1
  4043d4:	4b19      	ldr	r3, [pc, #100]	; (40443c <udd_ep_set_halt+0xbc>)
  4043d6:	fa00 f101 	lsl.w	r1, r0, r1
  4043da:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4043dc:	bb1d      	cbnz	r5, 404426 <udd_ep_set_halt+0xa6>
		return true;
  4043de:	2001      	movs	r0, #1
}
  4043e0:	b002      	add	sp, #8
  4043e2:	bc30      	pop	{r4, r5}
  4043e4:	4770      	bx	lr
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4043e6:	4b15      	ldr	r3, [pc, #84]	; (40443c <udd_ep_set_halt+0xbc>)
  4043e8:	f101 020c 	add.w	r2, r1, #12
  4043ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4043f0:	1e4a      	subs	r2, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4043f2:	f013 0f10 	tst.w	r3, #16
  4043f6:	4b12      	ldr	r3, [pc, #72]	; (404440 <udd_ep_set_halt+0xc0>)
  4043f8:	d11c      	bne.n	404434 <udd_ep_set_halt+0xb4>
				|| ptr_job->bank > 1)) {
  4043fa:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  4043fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  404402:	f890 c011 	ldrb.w	ip, [r0, #17]
  404406:	0090      	lsls	r0, r2, #2
  404408:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  40440c:	f1bc 0f01 	cmp.w	ip, #1
  404410:	d9cb      	bls.n	4043aa <udd_ep_set_halt+0x2a>
		ptr_job->b_stall_requested = true;
  404412:	4402      	add	r2, r0
  404414:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  404418:	7c5a      	ldrb	r2, [r3, #17]
  40441a:	f042 0220 	orr.w	r2, r2, #32
  40441e:	745a      	strb	r2, [r3, #17]
  404420:	e7d7      	b.n	4043d2 <udd_ep_set_halt+0x52>
		return false;
  404422:	2000      	movs	r0, #0
}
  404424:	4770      	bx	lr
		cpu_irq_enable();
  404426:	7020      	strb	r0, [r4, #0]
  404428:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40442c:	b662      	cpsie	i
  40442e:	b002      	add	sp, #8
  404430:	bc30      	pop	{r4, r5}
  404432:	4770      	bx	lr
  404434:	0090      	lsls	r0, r2, #2
  404436:	e7ec      	b.n	404412 <udd_ep_set_halt+0x92>
  404438:	20000718 	.word	0x20000718
  40443c:	40034000 	.word	0x40034000
  404440:	20019660 	.word	0x20019660

00404444 <udd_ep_clear_halt>:
	if (USB_DEVICE_MAX_EP < ep)
  404444:	f010 0108 	ands.w	r1, r0, #8
  404448:	d156      	bne.n	4044f8 <udd_ep_clear_halt+0xb4>
{
  40444a:	b510      	push	{r4, lr}
	ep &= USB_EP_ADDR_MASK;
  40444c:	f000 000f 	and.w	r0, r0, #15
	ptr_job = &udd_ep_job[ep - 1];
  404450:	f100 3cff 	add.w	ip, r0, #4294967295
	ptr_job->b_stall_requested = false;
  404454:	4c29      	ldr	r4, [pc, #164]	; (4044fc <udd_ep_clear_halt+0xb8>)
  404456:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
  40445a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40445e:	7c5a      	ldrb	r2, [r3, #17]
{
  404460:	b082      	sub	sp, #8
	ptr_job->b_stall_requested = false;
  404462:	f361 1245 	bfi	r2, r1, #5, #1
  404466:	745a      	strb	r2, [r3, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  404468:	0082      	lsls	r2, r0, #2
  40446a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40446e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
  404472:	6b13      	ldr	r3, [r2, #48]	; 0x30
	ptr_job->b_stall_requested = false;
  404474:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
	if (Is_udd_endpoint_stall_requested(ep)) {
  404478:	0699      	lsls	r1, r3, #26
  40447a:	d53a      	bpl.n	4044f2 <udd_ep_clear_halt+0xae>
		udd_disable_stall_handshake(ep);
  40447c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40447e:	9300      	str	r3, [sp, #0]
  404480:	9b00      	ldr	r3, [sp, #0]
  404482:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404486:	9300      	str	r3, [sp, #0]
  404488:	9b00      	ldr	r3, [sp, #0]
  40448a:	f023 0320 	bic.w	r3, r3, #32
  40448e:	9300      	str	r3, [sp, #0]
  404490:	9b00      	ldr	r3, [sp, #0]
  404492:	6313      	str	r3, [r2, #48]	; 0x30
  404494:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404496:	069b      	lsls	r3, r3, #26
  404498:	d4fc      	bmi.n	404494 <udd_ep_clear_halt+0x50>
		udd_reset_endpoint(ep);
  40449a:	2301      	movs	r3, #1
  40449c:	4918      	ldr	r1, [pc, #96]	; (404500 <udd_ep_clear_halt+0xbc>)
  40449e:	fa03 f000 	lsl.w	r0, r3, r0
  4044a2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4044a4:	4303      	orrs	r3, r0
  4044a6:	628b      	str	r3, [r1, #40]	; 0x28
  4044a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4044aa:	4218      	tst	r0, r3
  4044ac:	d0fc      	beq.n	4044a8 <udd_ep_clear_halt+0x64>
  4044ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4044b0:	ea23 0000 	bic.w	r0, r3, r0
  4044b4:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  4044b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4044b8:	9301      	str	r3, [sp, #4]
  4044ba:	9b01      	ldr	r3, [sp, #4]
  4044bc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4044c0:	9301      	str	r3, [sp, #4]
  4044c2:	9b01      	ldr	r3, [sp, #4]
  4044c4:	f023 0308 	bic.w	r3, r3, #8
  4044c8:	9301      	str	r3, [sp, #4]
  4044ca:	9b01      	ldr	r3, [sp, #4]
  4044cc:	6313      	str	r3, [r2, #48]	; 0x30
  4044ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4044d0:	f013 0308 	ands.w	r3, r3, #8
  4044d4:	d1fb      	bne.n	4044ce <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  4044d6:	44f4      	add	ip, lr
  4044d8:	eb04 028c 	add.w	r2, r4, ip, lsl #2
  4044dc:	7c51      	ldrb	r1, [r2, #17]
  4044de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
  4044e2:	06c8      	lsls	r0, r1, #27
  4044e4:	d505      	bpl.n	4044f2 <udd_ep_clear_halt+0xae>
			ptr_job->busy = false;
  4044e6:	f363 1104 	bfi	r1, r3, #4, #1
			ptr_job->call_nohalt();
  4044ea:	f854 000c 	ldr.w	r0, [r4, ip]
			ptr_job->busy = false;
  4044ee:	7451      	strb	r1, [r2, #17]
			ptr_job->call_nohalt();
  4044f0:	4780      	blx	r0
	return true;
  4044f2:	2001      	movs	r0, #1
}
  4044f4:	b002      	add	sp, #8
  4044f6:	bd10      	pop	{r4, pc}
		return false;
  4044f8:	2000      	movs	r0, #0
}
  4044fa:	4770      	bx	lr
  4044fc:	20019660 	.word	0x20019660
  404500:	40034000 	.word	0x40034000

00404504 <udd_ep_run>:
	if (USB_DEVICE_MAX_EP < ep) {
  404504:	f010 0f08 	tst.w	r0, #8
  404508:	d17e      	bne.n	404608 <udd_ep_run+0x104>
{
  40450a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep &= USB_EP_ADDR_MASK;
  40450e:	f000 060f 	and.w	r6, r0, #15
	if ((!Is_udd_endpoint_enabled(ep))
  404512:	ea4f 0c86 	mov.w	ip, r6, lsl #2
  404516:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
  40451a:	f50c 3c40 	add.w	ip, ip, #196608	; 0x30000
  40451e:	f8dc 4030 	ldr.w	r4, [ip, #48]	; 0x30
{
  404522:	b083      	sub	sp, #12
	if ((!Is_udd_endpoint_enabled(ep))
  404524:	0424      	lsls	r4, r4, #16
  404526:	d56b      	bpl.n	404600 <udd_ep_run+0xfc>
	ptr_job = &udd_ep_job[ep - 1];
  404528:	1e74      	subs	r4, r6, #1
			|| ptr_job->b_stall_requested
  40452a:	4d43      	ldr	r5, [pc, #268]	; (404638 <udd_ep_run+0x134>)
  40452c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
  404530:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
  404534:	f89e 7011 	ldrb.w	r7, [lr, #17]
  404538:	ea4f 0884 	mov.w	r8, r4, lsl #2
  40453c:	06bf      	lsls	r7, r7, #26
  40453e:	d45f      	bmi.n	404600 <udd_ep_run+0xfc>
			|| Is_udd_endpoint_stall_requested(ep)) {
  404540:	f8dc 7030 	ldr.w	r7, [ip, #48]	; 0x30
  404544:	f017 0920 	ands.w	r9, r7, #32
  404548:	d15a      	bne.n	404600 <udd_ep_run+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40454a:	f3ef 8710 	mrs	r7, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40454e:	fab7 f787 	clz	r7, r7
  404552:	097f      	lsrs	r7, r7, #5
  404554:	9700      	str	r7, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404556:	b672      	cpsid	i
  404558:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40455c:	4f37      	ldr	r7, [pc, #220]	; (40463c <udd_ep_run+0x138>)
  40455e:	f887 9000 	strb.w	r9, [r7]
	if (ptr_job->busy == true) {
  404562:	f89e b011 	ldrb.w	fp, [lr, #17]
	return flags;
  404566:	f8dd a000 	ldr.w	sl, [sp]
  40456a:	f01b 0f10 	tst.w	fp, #16
  40456e:	d144      	bne.n	4045fa <udd_ep_run+0xf6>
	ptr_job->busy = true;
  404570:	f89e 9011 	ldrb.w	r9, [lr, #17]
  404574:	f049 0910 	orr.w	r9, r9, #16
  404578:	f88e 9011 	strb.w	r9, [lr, #17]
	if (cpu_irq_is_enabled_flags(flags))
  40457c:	f1ba 0f00 	cmp.w	sl, #0
  404580:	d006      	beq.n	404590 <udd_ep_run+0x8c>
		cpu_irq_enable();
  404582:	f04f 0e01 	mov.w	lr, #1
  404586:	f887 e000 	strb.w	lr, [r7]
  40458a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40458e:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
  404590:	f04f 0900 	mov.w	r9, #0
	ptr_job->call_trans = callback;
  404594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	ptr_job->buf = buf;
  404598:	eb08 0e04 	add.w	lr, r8, r4
	ptr_job->call_trans = callback;
  40459c:	f845 a02e 	str.w	sl, [r5, lr, lsl #2]
	ptr_job->buf = buf;
  4045a0:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	ptr_job->buf_size = buf_size;
  4045a4:	e9ce 2301 	strd	r2, r3, [lr, #4]
	ptr_job->buf_cnt = 0;
  4045a8:	f8ce 900c 	str.w	r9, [lr, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4045ac:	b911      	cbnz	r1, 4045b4 <udd_ep_run+0xb0>
  4045ae:	fab3 f183 	clz	r1, r3
  4045b2:	0949      	lsrs	r1, r1, #5
	ptr_job->b_buf_end = false;
  4045b4:	4444      	add	r4, r8
  4045b6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4045ba:	7c6b      	ldrb	r3, [r5, #17]
  4045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4045c0:	ea43 1181 	orr.w	r1, r3, r1, lsl #6
  4045c4:	7469      	strb	r1, [r5, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4045c6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4045ca:	fab3 f383 	clz	r3, r3
  4045ce:	095b      	lsrs	r3, r3, #5
  4045d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4045d2:	b672      	cpsid	i
  4045d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4045d8:	2200      	movs	r2, #0
	udd_enable_endpoint_interrupt(ep);
  4045da:	2101      	movs	r1, #1
  4045dc:	4b18      	ldr	r3, [pc, #96]	; (404640 <udd_ep_run+0x13c>)
  4045de:	703a      	strb	r2, [r7, #0]
  4045e0:	fa01 f206 	lsl.w	r2, r1, r6
	return flags;
  4045e4:	9c01      	ldr	r4, [sp, #4]
  4045e6:	611a      	str	r2, [r3, #16]
	if (b_dir_in) {
  4045e8:	0603      	lsls	r3, r0, #24
  4045ea:	d40f      	bmi.n	40460c <udd_ep_run+0x108>
		cpu_irq_enable();
  4045ec:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
  4045ee:	b144      	cbz	r4, 404602 <udd_ep_run+0xfe>
		cpu_irq_enable();
  4045f0:	7038      	strb	r0, [r7, #0]
  4045f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4045f6:	b662      	cpsie	i
}
  4045f8:	e003      	b.n	404602 <udd_ep_run+0xfe>
	if (cpu_irq_is_enabled_flags(flags))
  4045fa:	f1ba 0f00 	cmp.w	sl, #0
  4045fe:	d114      	bne.n	40462a <udd_ep_run+0x126>
		return false;
  404600:	2000      	movs	r0, #0
}
  404602:	b003      	add	sp, #12
  404604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
  404608:	2000      	movs	r0, #0
}
  40460a:	4770      	bx	lr
		if (Is_udd_in_pending(ep)) {
  40460c:	f8dc 5030 	ldr.w	r5, [ip, #48]	; 0x30
  404610:	f015 0511 	ands.w	r5, r5, #17
  404614:	d1ea      	bne.n	4045ec <udd_ep_run+0xe8>
			if (udd_ep_in_sent(ep, true)) {
  404616:	4630      	mov	r0, r6
  404618:	f8df 8028 	ldr.w	r8, [pc, #40]	; 404644 <udd_ep_run+0x140>
  40461c:	47c0      	blx	r8
  40461e:	2800      	cmp	r0, #0
  404620:	d0e4      	beq.n	4045ec <udd_ep_run+0xe8>
				udd_ep_in_sent(ep, false);
  404622:	4629      	mov	r1, r5
  404624:	4630      	mov	r0, r6
  404626:	47c0      	blx	r8
  404628:	e7e0      	b.n	4045ec <udd_ep_run+0xe8>
		cpu_irq_enable();
  40462a:	2301      	movs	r3, #1
  40462c:	703b      	strb	r3, [r7, #0]
  40462e:	f3bf 8f5f 	dmb	sy
  404632:	b662      	cpsie	i
		return false; // Job already on going
  404634:	4648      	mov	r0, r9
}
  404636:	e7e4      	b.n	404602 <udd_ep_run+0xfe>
  404638:	20019660 	.word	0x20019660
  40463c:	20000718 	.word	0x20000718
  404640:	40034000 	.word	0x40034000
  404644:	004032e1 	.word	0x004032e1

00404648 <udd_ep_abort>:
	if (USB_DEVICE_MAX_EP < ep)
  404648:	f010 0208 	ands.w	r2, r0, #8
  40464c:	f040 809f 	bne.w	40478e <udd_ep_abort+0x146>
{
  404650:	b5f0      	push	{r4, r5, r6, r7, lr}
	ep &= USB_EP_ADDR_MASK;
  404652:	f000 050f 	and.w	r5, r0, #15
{
  404656:	b087      	sub	sp, #28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404658:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40465c:	fab3 f383 	clz	r3, r3
  404660:	095b      	lsrs	r3, r3, #5
  404662:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  404664:	b672      	cpsid	i
  404666:	f3bf 8f5f 	dmb	sy
	udd_disable_endpoint_interrupt(ep);
  40466a:	2101      	movs	r1, #1
	cpu_irq_disable();
  40466c:	4b48      	ldr	r3, [pc, #288]	; (404790 <udd_ep_abort+0x148>)
  40466e:	4e49      	ldr	r6, [pc, #292]	; (404794 <udd_ep_abort+0x14c>)
  404670:	701a      	strb	r2, [r3, #0]
	return flags;
  404672:	9a05      	ldr	r2, [sp, #20]
  404674:	fa01 f405 	lsl.w	r4, r1, r5
  404678:	6174      	str	r4, [r6, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40467a:	b11a      	cbz	r2, 404684 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  40467c:	7019      	strb	r1, [r3, #0]
  40467e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404682:	b662      	cpsie	i
	if (b_dir_in) {
  404684:	0602      	lsls	r2, r0, #24
  404686:	d428      	bmi.n	4046da <udd_ep_abort+0x92>
		while(Is_udd_any_bank_received(ep)) {
  404688:	00ae      	lsls	r6, r5, #2
  40468a:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  40468e:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
  404692:	6b33      	ldr	r3, [r6, #48]	; 0x30
  404694:	f013 0f42 	tst.w	r3, #66	; 0x42
  404698:	d006      	beq.n	4046a8 <udd_ep_abort+0x60>
  40469a:	4f3f      	ldr	r7, [pc, #252]	; (404798 <udd_ep_abort+0x150>)
			udd_ep_ack_out_received(ep);
  40469c:	4628      	mov	r0, r5
  40469e:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  4046a0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4046a2:	f013 0f42 	tst.w	r3, #66	; 0x42
  4046a6:	d1f9      	bne.n	40469c <udd_ep_abort+0x54>
		udd_ep_job[ep - 1].bank = 0;
  4046a8:	1e6e      	subs	r6, r5, #1
  4046aa:	483c      	ldr	r0, [pc, #240]	; (40479c <udd_ep_abort+0x154>)
  4046ac:	00b2      	lsls	r2, r6, #2
	udd_reset_endpoint(ep);
  4046ae:	4939      	ldr	r1, [pc, #228]	; (404794 <udd_ep_abort+0x14c>)
  4046b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4046b2:	4323      	orrs	r3, r4
  4046b4:	628b      	str	r3, [r1, #40]	; 0x28
  4046b6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4046b8:	421c      	tst	r4, r3
  4046ba:	d0fc      	beq.n	4046b6 <udd_ep_abort+0x6e>
  4046bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4046be:	4432      	add	r2, r6
  4046c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  4046c4:	462a      	mov	r2, r5
  4046c6:	4d36      	ldr	r5, [pc, #216]	; (4047a0 <udd_ep_abort+0x158>)
	udd_reset_endpoint(ep);
  4046c8:	ea23 0404 	bic.w	r4, r3, r4
  4046cc:	628c      	str	r4, [r1, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4046ce:	462b      	mov	r3, r5
  4046d0:	2101      	movs	r1, #1
}
  4046d2:	b007      	add	sp, #28
  4046d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4046d8:	4718      	bx	r3
		if (Is_udd_transmit_ready(ep)) {
  4046da:	00a9      	lsls	r1, r5, #2
  4046dc:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4046e0:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
  4046e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4046e6:	06db      	lsls	r3, r3, #27
  4046e8:	d535      	bpl.n	404756 <udd_ep_abort+0x10e>
			udd_kill_data_in_fifo(ep,
  4046ea:	b32d      	cbz	r5, 404738 <udd_ep_abort+0xf0>
  4046ec:	2d03      	cmp	r5, #3
  4046ee:	d023      	beq.n	404738 <udd_ep_abort+0xf0>
  4046f0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4046f2:	9301      	str	r3, [sp, #4]
  4046f4:	9b01      	ldr	r3, [sp, #4]
  4046f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4046fa:	9301      	str	r3, [sp, #4]
  4046fc:	9b01      	ldr	r3, [sp, #4]
  4046fe:	f023 0310 	bic.w	r3, r3, #16
  404702:	9301      	str	r3, [sp, #4]
  404704:	9b01      	ldr	r3, [sp, #4]
  404706:	630b      	str	r3, [r1, #48]	; 0x30
  404708:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40470a:	06df      	lsls	r7, r3, #27
  40470c:	d4fc      	bmi.n	404708 <udd_ep_abort+0xc0>
  40470e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404710:	06de      	lsls	r6, r3, #27
  404712:	d4fc      	bmi.n	40470e <udd_ep_abort+0xc6>
  404714:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404716:	9302      	str	r3, [sp, #8]
  404718:	9b02      	ldr	r3, [sp, #8]
  40471a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40471e:	9302      	str	r3, [sp, #8]
  404720:	9b02      	ldr	r3, [sp, #8]
  404722:	f043 0310 	orr.w	r3, r3, #16
  404726:	9302      	str	r3, [sp, #8]
  404728:	9b02      	ldr	r3, [sp, #8]
  40472a:	630b      	str	r3, [r1, #48]	; 0x30
  40472c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40472e:	06d8      	lsls	r0, r3, #27
  404730:	d5fc      	bpl.n	40472c <udd_ep_abort+0xe4>
  404732:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404734:	06da      	lsls	r2, r3, #27
  404736:	d5fc      	bpl.n	404732 <udd_ep_abort+0xea>
  404738:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40473a:	9303      	str	r3, [sp, #12]
  40473c:	9b03      	ldr	r3, [sp, #12]
  40473e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404742:	9303      	str	r3, [sp, #12]
  404744:	9b03      	ldr	r3, [sp, #12]
  404746:	f023 0310 	bic.w	r3, r3, #16
  40474a:	9303      	str	r3, [sp, #12]
  40474c:	9b03      	ldr	r3, [sp, #12]
  40474e:	630b      	str	r3, [r1, #48]	; 0x30
  404750:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404752:	06db      	lsls	r3, r3, #27
  404754:	d4fc      	bmi.n	404750 <udd_ep_abort+0x108>
		udd_ack_in_sent(ep);
  404756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404758:	9304      	str	r3, [sp, #16]
  40475a:	9b04      	ldr	r3, [sp, #16]
  40475c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404760:	9304      	str	r3, [sp, #16]
  404762:	9b04      	ldr	r3, [sp, #16]
  404764:	f023 0301 	bic.w	r3, r3, #1
  404768:	9304      	str	r3, [sp, #16]
  40476a:	9b04      	ldr	r3, [sp, #16]
  40476c:	630b      	str	r3, [r1, #48]	; 0x30
  40476e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  404770:	f013 0301 	ands.w	r3, r3, #1
  404774:	d1fb      	bne.n	40476e <udd_ep_abort+0x126>
		udd_ep_job[ep - 1].bank = 0;
  404776:	1e6e      	subs	r6, r5, #1
  404778:	4808      	ldr	r0, [pc, #32]	; (40479c <udd_ep_abort+0x154>)
  40477a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  40477e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  404782:	7c51      	ldrb	r1, [r2, #17]
  404784:	f363 0183 	bfi	r1, r3, #2, #2
  404788:	7451      	strb	r1, [r2, #17]
  40478a:	00b2      	lsls	r2, r6, #2
  40478c:	e78f      	b.n	4046ae <udd_ep_abort+0x66>
  40478e:	4770      	bx	lr
  404790:	20000718 	.word	0x20000718
  404794:	40034000 	.word	0x40034000
  404798:	00403205 	.word	0x00403205
  40479c:	20019660 	.word	0x20019660
  4047a0:	00403471 	.word	0x00403471

004047a4 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT 
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4047a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4047a8:	4b1d      	ldr	r3, [pc, #116]	; (404820 <board_init+0x7c>)
{
  4047aa:	b570      	push	{r4, r5, r6, lr}
  4047ac:	200b      	movs	r0, #11
	WDT->WDT_MR = WDT_MR_WDDIS;
  4047ae:	655a      	str	r2, [r3, #84]	; 0x54
  4047b0:	4e1c      	ldr	r6, [pc, #112]	; (404824 <board_init+0x80>)
  4047b2:	47b0      	blx	r6
  4047b4:	200c      	movs	r0, #12
  4047b6:	47b0      	blx	r6
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4047b8:	4c1b      	ldr	r4, [pc, #108]	; (404828 <board_init+0x84>)
  4047ba:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047be:	2020      	movs	r0, #32
  4047c0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4047c2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047c6:	2021      	movs	r0, #33	; 0x21
  4047c8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
  4047ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047ce:	2022      	movs	r0, #34	; 0x22
  4047d0:	47a0      	blx	r4
  4047d2:	4d16      	ldr	r5, [pc, #88]	; (40482c <board_init+0x88>)
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
  4047d4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047d8:	2023      	movs	r0, #35	; 0x23
  4047da:	47a0      	blx	r4
  4047dc:	47a8      	blx	r5
			osc_wait_ready(OSC_MAINCK_12M_RC);
		}
		break;

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
  4047de:	b1c0      	cbz	r0, 404812 <board_init+0x6e>
	
	genclk_enable_source(CONFIG_PLL0_SOURCE);	
	
	gpio_configure_pin(PIO_CAPTURE_ENCTR_IDX, PIO_OUTPUT_1 | PIO_DEFAULT);
  4047e0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4047e4:	200a      	movs	r0, #10
  4047e6:	47a0      	blx	r4
	gpio_configure_pin(ADCCLK_EN_IDX, PIO_OUTPUT_0 | PIO_DEFAULT);
  4047e8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047ec:	2013      	movs	r0, #19
  4047ee:	47a0      	blx	r4
	gpio_configure_pin(ADCCLK_SRC_IDX, PIO_OUTPUT_0 | PIO_DEFAULT);
  4047f0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4047f4:	2014      	movs	r0, #20
  4047f6:	47a0      	blx	r4
	
	gpio_configure_pin(PIO_CAPTURELATCH_nSET, PIO_OUTPUT_1| PIO_DEFAULT);
  4047f8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4047fc:	2007      	movs	r0, #7
  4047fe:	47a0      	blx	r4
	gpio_configure_pin(PIO_CAPTURELATCH_nRESET, PIO_OUTPUT_1| PIO_DEFAULT);
  404800:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  404804:	2009      	movs	r0, #9
  404806:	47a0      	blx	r4
	pio_configure_pin(MXT143E_XPLAINED_SDA, TWI0_DATA_FLAGS);
	pio_configure_pin(MXT143E_XPLAINED_SCL, TWI0_CLK_FLAGS);

	pmc_enable_periph_clk(ID_PIOB);
#endif
}
  404808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_set_pin_high(PIO_CAPTURE_ENCTR_IDX);
  40480c:	200a      	movs	r0, #10
  40480e:	4b08      	ldr	r3, [pc, #32]	; (404830 <board_init+0x8c>)
  404810:	4718      	bx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404812:	213e      	movs	r1, #62	; 0x3e
  404814:	4b07      	ldr	r3, [pc, #28]	; (404834 <board_init+0x90>)
  404816:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  404818:	47a8      	blx	r5
  40481a:	2800      	cmp	r0, #0
  40481c:	d0fc      	beq.n	404818 <board_init+0x74>
  40481e:	e7df      	b.n	4047e0 <board_init+0x3c>
  404820:	400e1400 	.word	0x400e1400
  404824:	00402cb1 	.word	0x00402cb1
  404828:	00402f61 	.word	0x00402f61
  40482c:	00402c65 	.word	0x00402c65
  404830:	00402f05 	.word	0x00402f05
  404834:	00402c15 	.word	0x00402c15

00404838 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  404838:	4a02      	ldr	r2, [pc, #8]	; (404844 <udi_cdc_comm_disable+0xc>)
  40483a:	7813      	ldrb	r3, [r2, #0]
  40483c:	3b01      	subs	r3, #1
  40483e:	b2db      	uxtb	r3, r3
  404840:	7013      	strb	r3, [r2, #0]
}
  404842:	4770      	bx	lr
  404844:	2001970f 	.word	0x2001970f

00404848 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  404848:	2000      	movs	r0, #0
  40484a:	4770      	bx	lr

0040484c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  40484c:	2000      	movs	r0, #0
  40484e:	4770      	bx	lr

00404850 <udi_cdc_line_coding_received>:
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
  404850:	2000      	movs	r0, #0
  404852:	4901      	ldr	r1, [pc, #4]	; (404858 <udi_cdc_line_coding_received+0x8>)
  404854:	4b01      	ldr	r3, [pc, #4]	; (40485c <udi_cdc_line_coding_received+0xc>)
  404856:	4718      	bx	r3
  404858:	20019708 	.word	0x20019708
  40485c:	00401cd1 	.word	0x00401cd1

00404860 <udi_cdc_data_disable>:
{
  404860:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
  404862:	4a06      	ldr	r2, [pc, #24]	; (40487c <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
  404864:	4906      	ldr	r1, [pc, #24]	; (404880 <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
  404866:	7813      	ldrb	r3, [r2, #0]
  404868:	3b01      	subs	r3, #1
  40486a:	b2db      	uxtb	r3, r3
  40486c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40486e:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
  404870:	4788      	blx	r1
	udi_cdc_data_running = false;
  404872:	2200      	movs	r2, #0
  404874:	4b03      	ldr	r3, [pc, #12]	; (404884 <udi_cdc_data_disable+0x24>)
  404876:	701a      	strb	r2, [r3, #0]
}
  404878:	bd08      	pop	{r3, pc}
  40487a:	bf00      	nop
  40487c:	20019710 	.word	0x20019710
  404880:	00401c15 	.word	0x00401c15
  404884:	20019706 	.word	0x20019706

00404888 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  404888:	4a16      	ldr	r2, [pc, #88]	; (4048e4 <udi_cdc_comm_setup+0x5c>)
  40488a:	f992 1000 	ldrsb.w	r1, [r2]
  40488e:	7813      	ldrb	r3, [r2, #0]
  404890:	2900      	cmp	r1, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  404892:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
  404896:	db03      	blt.n	4048a0 <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  404898:	2b20      	cmp	r3, #32
  40489a:	d00e      	beq.n	4048ba <udi_cdc_comm_setup+0x32>
	return false;  // request Not supported
  40489c:	2000      	movs	r0, #0
}
  40489e:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4048a0:	2b20      	cmp	r3, #32
  4048a2:	d1fb      	bne.n	40489c <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
  4048a4:	7853      	ldrb	r3, [r2, #1]
  4048a6:	2b21      	cmp	r3, #33	; 0x21
  4048a8:	d1f8      	bne.n	40489c <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
  4048aa:	88d3      	ldrh	r3, [r2, #6]
  4048ac:	2b07      	cmp	r3, #7
  4048ae:	d1f5      	bne.n	40489c <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.payload =
  4048b0:	490d      	ldr	r1, [pc, #52]	; (4048e8 <udi_cdc_comm_setup+0x60>)
				return true;
  4048b2:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload =
  4048b4:	6091      	str	r1, [r2, #8]
				udd_g_ctrlreq.payload_size =
  4048b6:	8193      	strh	r3, [r2, #12]
				return true;
  4048b8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4048ba:	7850      	ldrb	r0, [r2, #1]
  4048bc:	2820      	cmp	r0, #32
  4048be:	d005      	beq.n	4048cc <udi_cdc_comm_setup+0x44>
  4048c0:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
  4048c4:	fab0 f080 	clz	r0, r0
  4048c8:	0940      	lsrs	r0, r0, #5
  4048ca:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
  4048cc:	88d3      	ldrh	r3, [r2, #6]
  4048ce:	2b07      	cmp	r3, #7
  4048d0:	d1e4      	bne.n	40489c <udi_cdc_comm_setup+0x14>
{
  4048d2:	b410      	push	{r4}
				udd_g_ctrlreq.payload =
  4048d4:	4904      	ldr	r1, [pc, #16]	; (4048e8 <udi_cdc_comm_setup+0x60>)
				udd_g_ctrlreq.callback =
  4048d6:	4c05      	ldr	r4, [pc, #20]	; (4048ec <udi_cdc_comm_setup+0x64>)
				udd_g_ctrlreq.payload =
  4048d8:	6091      	str	r1, [r2, #8]
				udd_g_ctrlreq.callback =
  4048da:	6114      	str	r4, [r2, #16]
				udd_g_ctrlreq.payload_size =
  4048dc:	8193      	strh	r3, [r2, #12]
				return true;
  4048de:	2001      	movs	r0, #1
}
  4048e0:	bc10      	pop	{r4}
  4048e2:	4770      	bx	lr
  4048e4:	200196ec 	.word	0x200196ec
  4048e8:	20019708 	.word	0x20019708
  4048ec:	00404851 	.word	0x00404851

004048f0 <udi_cdc_comm_enable>:
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4048f0:	2208      	movs	r2, #8
{
  4048f2:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_comm_enabled = 0;
  4048f4:	2400      	movs	r4, #0
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4048f6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
	uid_cdc_state_msg[port].header.bmRequestType =
  4048fa:	f242 06a1 	movw	r6, #8353	; 0x20a1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4048fe:	490c      	ldr	r1, [pc, #48]	; (404930 <udi_cdc_comm_enable+0x40>)
	udi_cdc_nb_comm_enabled = 0;
  404900:	4d0c      	ldr	r5, [pc, #48]	; (404934 <udi_cdc_comm_enable+0x44>)
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  404902:	718a      	strb	r2, [r1, #6]
	udi_cdc_state[port] = CPU_TO_LE16(0);
  404904:	4a0c      	ldr	r2, [pc, #48]	; (404938 <udi_cdc_comm_enable+0x48>)
	uid_cdc_state_msg[port].header.bmRequestType =
  404906:	4b0d      	ldr	r3, [pc, #52]	; (40493c <udi_cdc_comm_enable+0x4c>)
	udi_cdc_nb_comm_enabled = 0;
  404908:	702c      	strb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40490a:	8014      	strh	r4, [r2, #0]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40490c:	4a0c      	ldr	r2, [pc, #48]	; (404940 <udi_cdc_comm_enable+0x50>)
	uid_cdc_state_msg[port].header.bmRequestType =
  40490e:	601e      	str	r6, [r3, #0]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  404910:	6008      	str	r0, [r1, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  404912:	811c      	strh	r4, [r3, #8]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
  404914:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  404916:	605a      	str	r2, [r3, #4]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  404918:	808c      	strh	r4, [r1, #4]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
  40491a:	4b0a      	ldr	r3, [pc, #40]	; (404944 <udi_cdc_comm_enable+0x54>)
  40491c:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
  40491e:	4620      	mov	r0, r4
  404920:	4b09      	ldr	r3, [pc, #36]	; (404948 <udi_cdc_comm_enable+0x58>)
  404922:	4798      	blx	r3
  404924:	b118      	cbz	r0, 40492e <udi_cdc_comm_enable+0x3e>
	udi_cdc_nb_comm_enabled++;
  404926:	782b      	ldrb	r3, [r5, #0]
  404928:	3301      	adds	r3, #1
  40492a:	b2db      	uxtb	r3, r3
  40492c:	702b      	strb	r3, [r5, #0]
}
  40492e:	bd70      	pop	{r4, r5, r6, pc}
  404930:	20019708 	.word	0x20019708
  404934:	2001970f 	.word	0x2001970f
  404938:	200197a4 	.word	0x200197a4
  40493c:	2001983c 	.word	0x2001983c
  404940:	00020001 	.word	0x00020001
  404944:	00401cd1 	.word	0x00401cd1
  404948:	00401bed 	.word	0x00401bed

0040494c <udi_cdc_tx_send.part.0>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
  40494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404950:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404952:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404956:	fab3 f383 	clz	r3, r3
  40495a:	095b      	lsrs	r3, r3, #5
  40495c:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40495e:	b672      	cpsid	i
  404960:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404964:	2300      	movs	r3, #0
  404966:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 404a44 <udi_cdc_tx_send.part.0+0xf8>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40496a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 404a48 <udi_cdc_tx_send.part.0+0xfc>
  40496e:	f888 3000 	strb.w	r3, [r8]
	return flags;
  404972:	f8dd a00c 	ldr.w	sl, [sp, #12]
  404976:	f899 4000 	ldrb.w	r4, [r9]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40497a:	4f34      	ldr	r7, [pc, #208]	; (404a4c <udi_cdc_tx_send.part.0+0x100>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40497c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40497e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
  404982:	4626      	mov	r6, r4
		sof_zlp_counter++;
  404984:	4d32      	ldr	r5, [pc, #200]	; (404a50 <udi_cdc_tx_send.part.0+0x104>)
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  404986:	2b00      	cmp	r3, #0
  404988:	d039      	beq.n	4049fe <udi_cdc_tx_send.part.0+0xb2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40498a:	2300      	movs	r3, #0
  40498c:	802b      	strh	r3, [r5, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  40498e:	4b31      	ldr	r3, [pc, #196]	; (404a54 <udi_cdc_tx_send.part.0+0x108>)
  404990:	781b      	ldrb	r3, [r3, #0]
  404992:	b353      	cbz	r3, 4049ea <udi_cdc_tx_send.part.0+0x9e>
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  404994:	fab4 f684 	clz	r6, r4
  404998:	0976      	lsrs	r6, r6, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  40499a:	2301      	movs	r3, #1
  40499c:	4a2e      	ldr	r2, [pc, #184]	; (404a58 <udi_cdc_tx_send.part.0+0x10c>)
  40499e:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4049a0:	f1ba 0f00 	cmp.w	sl, #0
  4049a4:	d004      	beq.n	4049b0 <udi_cdc_tx_send.part.0+0x64>
		cpu_irq_enable();
  4049a6:	f888 3000 	strb.w	r3, [r8]
  4049aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4049ae:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4049b0:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
  4049b4:	2b40      	cmp	r3, #64	; 0x40
  4049b6:	bf14      	ite	ne
  4049b8:	2401      	movne	r4, #1
  4049ba:	2400      	moveq	r4, #0
	if (b_short_packet) {
  4049bc:	d01b      	beq.n	4049f6 <udi_cdc_tx_send.part.0+0xaa>
		if (udd_is_high_speed()) {
  4049be:	4b27      	ldr	r3, [pc, #156]	; (404a5c <udi_cdc_tx_send.part.0+0x110>)
  4049c0:	4798      	blx	r3
  4049c2:	2800      	cmp	r0, #0
  4049c4:	d036      	beq.n	404a34 <udi_cdc_tx_send.part.0+0xe8>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4049c6:	4b26      	ldr	r3, [pc, #152]	; (404a60 <udi_cdc_tx_send.part.0+0x114>)
  4049c8:	4798      	blx	r3
  4049ca:	4a26      	ldr	r2, [pc, #152]	; (404a64 <udi_cdc_tx_send.part.0+0x118>)
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  4049cc:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4049d0:	8010      	strh	r0, [r2, #0]
	udd_ep_run( ep,
  4049d2:	4825      	ldr	r0, [pc, #148]	; (404a68 <udi_cdc_tx_send.part.0+0x11c>)
			udi_cdc_tx_buf[port][buf_sel_trans],
  4049d4:	4a25      	ldr	r2, [pc, #148]	; (404a6c <udi_cdc_tx_send.part.0+0x120>)
	udd_ep_run( ep,
  4049d6:	4621      	mov	r1, r4
  4049d8:	9000      	str	r0, [sp, #0]
  4049da:	4c25      	ldr	r4, [pc, #148]	; (404a70 <udi_cdc_tx_send.part.0+0x124>)
  4049dc:	2086      	movs	r0, #134	; 0x86
  4049de:	eb02 1286 	add.w	r2, r2, r6, lsl #6
  4049e2:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  4049e4:	b005      	add	sp, #20
  4049e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4049ea:	fab4 f484 	clz	r4, r4
  4049ee:	0964      	lsrs	r4, r4, #5
  4049f0:	f889 4000 	strb.w	r4, [r9]
  4049f4:	e7d1      	b.n	40499a <udi_cdc_tx_send.part.0+0x4e>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4049f6:	2100      	movs	r1, #0
  4049f8:	4a1a      	ldr	r2, [pc, #104]	; (404a64 <udi_cdc_tx_send.part.0+0x118>)
  4049fa:	8011      	strh	r1, [r2, #0]
  4049fc:	e7e9      	b.n	4049d2 <udi_cdc_tx_send.part.0+0x86>
		sof_zlp_counter++;
  4049fe:	882b      	ldrh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  404a00:	f8df b058 	ldr.w	fp, [pc, #88]	; 404a5c <udi_cdc_tx_send.part.0+0x110>
		sof_zlp_counter++;
  404a04:	3301      	adds	r3, #1
  404a06:	802b      	strh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  404a08:	47d8      	blx	fp
  404a0a:	b910      	cbnz	r0, 404a12 <udi_cdc_tx_send.part.0+0xc6>
  404a0c:	882b      	ldrh	r3, [r5, #0]
  404a0e:	2b63      	cmp	r3, #99	; 0x63
  404a10:	d906      	bls.n	404a20 <udi_cdc_tx_send.part.0+0xd4>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  404a12:	47d8      	blx	fp
  404a14:	2800      	cmp	r0, #0
  404a16:	d0b8      	beq.n	40498a <udi_cdc_tx_send.part.0+0x3e>
  404a18:	882b      	ldrh	r3, [r5, #0]
  404a1a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  404a1e:	d2b4      	bcs.n	40498a <udi_cdc_tx_send.part.0+0x3e>
	if (cpu_irq_is_enabled_flags(flags))
  404a20:	f1ba 0f00 	cmp.w	sl, #0
  404a24:	d0de      	beq.n	4049e4 <udi_cdc_tx_send.part.0+0x98>
		cpu_irq_enable();
  404a26:	2301      	movs	r3, #1
  404a28:	f888 3000 	strb.w	r3, [r8]
  404a2c:	f3bf 8f5f 	dmb	sy
  404a30:	b662      	cpsie	i
}
  404a32:	e7d7      	b.n	4049e4 <udi_cdc_tx_send.part.0+0x98>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  404a34:	4b0f      	ldr	r3, [pc, #60]	; (404a74 <udi_cdc_tx_send.part.0+0x128>)
  404a36:	4798      	blx	r3
  404a38:	4a0a      	ldr	r2, [pc, #40]	; (404a64 <udi_cdc_tx_send.part.0+0x118>)
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  404a3a:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  404a3e:	8010      	strh	r0, [r2, #0]
  404a40:	e7c7      	b.n	4049d2 <udi_cdc_tx_send.part.0+0x86>
  404a42:	bf00      	nop
  404a44:	20000718 	.word	0x20000718
  404a48:	20019830 	.word	0x20019830
  404a4c:	2001982c 	.word	0x2001982c
  404a50:	20019704 	.word	0x20019704
  404a54:	200197a8 	.word	0x200197a8
  404a58:	20019838 	.word	0x20019838
  404a5c:	00404181 	.word	0x00404181
  404a60:	004041e5 	.word	0x004041e5
  404a64:	20019834 	.word	0x20019834
  404a68:	00404ac1 	.word	0x00404ac1
  404a6c:	200197ac 	.word	0x200197ac
  404a70:	00404505 	.word	0x00404505
  404a74:	004041d5 	.word	0x004041d5

00404a78 <udi_cdc_tx_send.constprop.0>:
	if (udi_cdc_tx_trans_ongoing[port]) {
  404a78:	4b0b      	ldr	r3, [pc, #44]	; (404aa8 <udi_cdc_tx_send.constprop.0+0x30>)
  404a7a:	781b      	ldrb	r3, [r3, #0]
  404a7c:	b103      	cbz	r3, 404a80 <udi_cdc_tx_send.constprop.0+0x8>
  404a7e:	4770      	bx	lr
static void udi_cdc_tx_send(uint8_t port)
  404a80:	b510      	push	{r4, lr}
	if (udd_is_high_speed()) {
  404a82:	4b0a      	ldr	r3, [pc, #40]	; (404aac <udi_cdc_tx_send.constprop.0+0x34>)
  404a84:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  404a86:	4a0a      	ldr	r2, [pc, #40]	; (404ab0 <udi_cdc_tx_send.constprop.0+0x38>)
	if (udd_is_high_speed()) {
  404a88:	b140      	cbz	r0, 404a9c <udi_cdc_tx_send.constprop.0+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  404a8a:	4b0a      	ldr	r3, [pc, #40]	; (404ab4 <udi_cdc_tx_send.constprop.0+0x3c>)
  404a8c:	8814      	ldrh	r4, [r2, #0]
  404a8e:	4798      	blx	r3
  404a90:	4284      	cmp	r4, r0
  404a92:	d008      	beq.n	404aa6 <udi_cdc_tx_send.constprop.0+0x2e>
}
  404a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404a98:	4b07      	ldr	r3, [pc, #28]	; (404ab8 <udi_cdc_tx_send.constprop.0+0x40>)
  404a9a:	4718      	bx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  404a9c:	4b07      	ldr	r3, [pc, #28]	; (404abc <udi_cdc_tx_send.constprop.0+0x44>)
  404a9e:	8814      	ldrh	r4, [r2, #0]
  404aa0:	4798      	blx	r3
  404aa2:	4284      	cmp	r4, r0
  404aa4:	d1f6      	bne.n	404a94 <udi_cdc_tx_send.constprop.0+0x1c>
}
  404aa6:	bd10      	pop	{r4, pc}
  404aa8:	20019838 	.word	0x20019838
  404aac:	00404181 	.word	0x00404181
  404ab0:	20019834 	.word	0x20019834
  404ab4:	004041e5 	.word	0x004041e5
  404ab8:	0040494d 	.word	0x0040494d
  404abc:	004041d5 	.word	0x004041d5

00404ac0 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  404ac0:	b100      	cbz	r0, 404ac4 <udi_cdc_data_sent+0x4>
  404ac2:	4770      	bx	lr
{
  404ac4:	b410      	push	{r4}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  404ac6:	4b07      	ldr	r3, [pc, #28]	; (404ae4 <udi_cdc_data_sent+0x24>)
	udi_cdc_tx_both_buf_to_send[port] = false;
  404ac8:	4c07      	ldr	r4, [pc, #28]	; (404ae8 <udi_cdc_data_sent+0x28>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  404aca:	781b      	ldrb	r3, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  404acc:	4a07      	ldr	r2, [pc, #28]	; (404aec <udi_cdc_data_sent+0x2c>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  404ace:	fab3 f383 	clz	r3, r3
  404ad2:	4907      	ldr	r1, [pc, #28]	; (404af0 <udi_cdc_data_sent+0x30>)
  404ad4:	095b      	lsrs	r3, r3, #5
	udi_cdc_tx_both_buf_to_send[port] = false;
  404ad6:	7020      	strb	r0, [r4, #0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  404ad8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
  404adc:	7010      	strb	r0, [r2, #0]
}
  404ade:	bc10      	pop	{r4}
	udi_cdc_tx_send(port);
  404ae0:	4a04      	ldr	r2, [pc, #16]	; (404af4 <udi_cdc_data_sent+0x34>)
  404ae2:	4710      	bx	r2
  404ae4:	20019830 	.word	0x20019830
  404ae8:	200197a8 	.word	0x200197a8
  404aec:	20019838 	.word	0x20019838
  404af0:	2001982c 	.word	0x2001982c
  404af4:	00404a79 	.word	0x00404a79

00404af8 <udi_cdc_data_sof_notify>:
	if (udi_cdc_tx_trans_ongoing[port]) {
  404af8:	4b0b      	ldr	r3, [pc, #44]	; (404b28 <udi_cdc_data_sof_notify+0x30>)
  404afa:	781b      	ldrb	r3, [r3, #0]
  404afc:	b103      	cbz	r3, 404b00 <udi_cdc_data_sof_notify+0x8>
  404afe:	4770      	bx	lr
{
  404b00:	b510      	push	{r4, lr}
	if (udd_is_high_speed()) {
  404b02:	4b0a      	ldr	r3, [pc, #40]	; (404b2c <udi_cdc_data_sof_notify+0x34>)
  404b04:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  404b06:	4a0a      	ldr	r2, [pc, #40]	; (404b30 <udi_cdc_data_sof_notify+0x38>)
	if (udd_is_high_speed()) {
  404b08:	b140      	cbz	r0, 404b1c <udi_cdc_data_sof_notify+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  404b0a:	4b0a      	ldr	r3, [pc, #40]	; (404b34 <udi_cdc_data_sof_notify+0x3c>)
  404b0c:	8814      	ldrh	r4, [r2, #0]
  404b0e:	4798      	blx	r3
  404b10:	4284      	cmp	r4, r0
  404b12:	d008      	beq.n	404b26 <udi_cdc_data_sof_notify+0x2e>
}
  404b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404b18:	4b07      	ldr	r3, [pc, #28]	; (404b38 <udi_cdc_data_sof_notify+0x40>)
  404b1a:	4718      	bx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  404b1c:	4b07      	ldr	r3, [pc, #28]	; (404b3c <udi_cdc_data_sof_notify+0x44>)
  404b1e:	8814      	ldrh	r4, [r2, #0]
  404b20:	4798      	blx	r3
  404b22:	4284      	cmp	r4, r0
  404b24:	d1f6      	bne.n	404b14 <udi_cdc_data_sof_notify+0x1c>
}
  404b26:	bd10      	pop	{r4, pc}
  404b28:	20019838 	.word	0x20019838
  404b2c:	00404181 	.word	0x00404181
  404b30:	20019834 	.word	0x20019834
  404b34:	004041e5 	.word	0x004041e5
  404b38:	0040494d 	.word	0x0040494d
  404b3c:	004041d5 	.word	0x004041d5

00404b40 <udi_cdc_rx_start.constprop.0>:
static bool udi_cdc_rx_start(uint8_t port)
  404b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b42:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404b44:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404b48:	fab3 f383 	clz	r3, r3
  404b4c:	095b      	lsrs	r3, r3, #5
  404b4e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
  404b50:	b672      	cpsid	i
  404b52:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404b56:	2200      	movs	r2, #0
  404b58:	4b2d      	ldr	r3, [pc, #180]	; (404c10 <udi_cdc_rx_start.constprop.0+0xd0>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  404b5a:	492e      	ldr	r1, [pc, #184]	; (404c14 <udi_cdc_rx_start.constprop.0+0xd4>)
	if (udi_cdc_rx_trans_ongoing[port] ||
  404b5c:	4d2e      	ldr	r5, [pc, #184]	; (404c18 <udi_cdc_rx_start.constprop.0+0xd8>)
  404b5e:	701a      	strb	r2, [r3, #0]
	return flags;
  404b60:	9802      	ldr	r0, [sp, #8]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  404b62:	780c      	ldrb	r4, [r1, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  404b64:	782a      	ldrb	r2, [r5, #0]
  404b66:	2a00      	cmp	r2, #0
  404b68:	d144      	bne.n	404bf4 <udi_cdc_rx_start.constprop.0+0xb4>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  404b6a:	4e2c      	ldr	r6, [pc, #176]	; (404c1c <udi_cdc_rx_start.constprop.0+0xdc>)
  404b6c:	4f2c      	ldr	r7, [pc, #176]	; (404c20 <udi_cdc_rx_start.constprop.0+0xe0>)
  404b6e:	b2e4      	uxtb	r4, r4
  404b70:	f8b6 c000 	ldrh.w	ip, [r6]
  404b74:	f002 0eff 	and.w	lr, r2, #255	; 0xff
  404b78:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
  404b7c:	fa1f fc8c 	uxth.w	ip, ip
  404b80:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  404b82:	4594      	cmp	ip, r2
  404b84:	d336      	bcc.n	404bf4 <udi_cdc_rx_start.constprop.0+0xb4>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  404b86:	fab4 f284 	clz	r2, r4
	udi_cdc_rx_trans_ongoing[port] = true;
  404b8a:	f04f 0c01 	mov.w	ip, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  404b8e:	0952      	lsrs	r2, r2, #5
	udi_cdc_rx_pos[port] = 0;
  404b90:	f8a6 e000 	strh.w	lr, [r6]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  404b94:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  404b96:	f885 c000 	strb.w	ip, [r5]
	if (cpu_irq_is_enabled_flags(flags))
  404b9a:	b120      	cbz	r0, 404ba6 <udi_cdc_rx_start.constprop.0+0x66>
		cpu_irq_enable();
  404b9c:	f883 c000 	strb.w	ip, [r3]
  404ba0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404ba4:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404ba6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404baa:	fab2 f282 	clz	r2, r2
  404bae:	0952      	lsrs	r2, r2, #5
  404bb0:	9203      	str	r2, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  404bb2:	b672      	cpsid	i
  404bb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404bb8:	2200      	movs	r2, #0
  404bba:	701a      	strb	r2, [r3, #0]
	return flags;
  404bbc:	9d03      	ldr	r5, [sp, #12]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  404bbe:	8832      	ldrh	r2, [r6, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  404bc0:	7808      	ldrb	r0, [r1, #0]
	pos = udi_cdc_rx_pos[port];
  404bc2:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  404bc4:	b2c2      	uxtb	r2, r0
  404bc6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
  404bca:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
  404bcc:	b125      	cbz	r5, 404bd8 <udi_cdc_rx_start.constprop.0+0x98>
		cpu_irq_enable();
  404bce:	2001      	movs	r0, #1
  404bd0:	7018      	strb	r0, [r3, #0]
  404bd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404bd6:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  404bd8:	4291      	cmp	r1, r2
  404bda:	d115      	bne.n	404c08 <udi_cdc_rx_start.constprop.0+0xc8>
	return udd_ep_run(ep,
  404bdc:	4811      	ldr	r0, [pc, #68]	; (404c24 <udi_cdc_rx_start.constprop.0+0xe4>)
			udi_cdc_rx_buf[port][buf_sel_trans],
  404bde:	4a12      	ldr	r2, [pc, #72]	; (404c28 <udi_cdc_rx_start.constprop.0+0xe8>)
	return udd_ep_run(ep,
  404be0:	9000      	str	r0, [sp, #0]
  404be2:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  404be6:	2340      	movs	r3, #64	; 0x40
  404be8:	2101      	movs	r1, #1
  404bea:	2007      	movs	r0, #7
  404bec:	4c0f      	ldr	r4, [pc, #60]	; (404c2c <udi_cdc_rx_start.constprop.0+0xec>)
  404bee:	47a0      	blx	r4
}
  404bf0:	b005      	add	sp, #20
  404bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cpu_irq_is_enabled_flags(flags))
  404bf4:	2800      	cmp	r0, #0
  404bf6:	d0fb      	beq.n	404bf0 <udi_cdc_rx_start.constprop.0+0xb0>
		cpu_irq_enable();
  404bf8:	2201      	movs	r2, #1
  404bfa:	701a      	strb	r2, [r3, #0]
  404bfc:	f3bf 8f5f 	dmb	sy
  404c00:	b662      	cpsie	i
		return false;
  404c02:	2000      	movs	r0, #0
}
  404c04:	b005      	add	sp, #20
  404c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UDI_CDC_RX_NOTIFY(port);
  404c08:	2000      	movs	r0, #0
  404c0a:	4b09      	ldr	r3, [pc, #36]	; (404c30 <udi_cdc_rx_start.constprop.0+0xf0>)
  404c0c:	4798      	blx	r3
  404c0e:	e7e5      	b.n	404bdc <udi_cdc_rx_start.constprop.0+0x9c>
  404c10:	20000718 	.word	0x20000718
  404c14:	20019798 	.word	0x20019798
  404c18:	200197a0 	.word	0x200197a0
  404c1c:	2001979c 	.word	0x2001979c
  404c20:	20019794 	.word	0x20019794
  404c24:	00404cb9 	.word	0x00404cb9
  404c28:	20019714 	.word	0x20019714
  404c2c:	00404505 	.word	0x00404505
  404c30:	00401c45 	.word	0x00401c45

00404c34 <udi_cdc_data_enable>:
{
  404c34:	b538      	push	{r3, r4, r5, lr}
	udi_cdc_nb_data_enabled = 0;
  404c36:	2400      	movs	r4, #0
	udi_cdc_tx_trans_ongoing[port] = false;
  404c38:	4a12      	ldr	r2, [pc, #72]	; (404c84 <udi_cdc_data_enable+0x50>)
	udi_cdc_nb_data_enabled = 0;
  404c3a:	4d13      	ldr	r5, [pc, #76]	; (404c88 <udi_cdc_data_enable+0x54>)
	udi_cdc_tx_buf_sel[port] = 0;
  404c3c:	4913      	ldr	r1, [pc, #76]	; (404c8c <udi_cdc_data_enable+0x58>)
	udi_cdc_nb_data_enabled = 0;
  404c3e:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  404c40:	4b13      	ldr	r3, [pc, #76]	; (404c90 <udi_cdc_data_enable+0x5c>)
	udi_cdc_tx_trans_ongoing[port] = false;
  404c42:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  404c44:	4813      	ldr	r0, [pc, #76]	; (404c94 <udi_cdc_data_enable+0x60>)
	udi_cdc_tx_sof_num[port] = 0;
  404c46:	4a14      	ldr	r2, [pc, #80]	; (404c98 <udi_cdc_data_enable+0x64>)
	udi_cdc_tx_both_buf_to_send[port] = false;
  404c48:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
  404c4a:	8014      	strh	r4, [r2, #0]
	udi_cdc_tx_send(port);
  404c4c:	4b13      	ldr	r3, [pc, #76]	; (404c9c <udi_cdc_data_enable+0x68>)
	udi_cdc_tx_buf_sel[port] = 0;
  404c4e:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  404c50:	6004      	str	r4, [r0, #0]
	udi_cdc_tx_send(port);
  404c52:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  404c54:	4912      	ldr	r1, [pc, #72]	; (404ca0 <udi_cdc_data_enable+0x6c>)
	udi_cdc_rx_buf_nb[port][0] = 0;
  404c56:	4b13      	ldr	r3, [pc, #76]	; (404ca4 <udi_cdc_data_enable+0x70>)
	udi_cdc_rx_trans_ongoing[port] = false;
  404c58:	700c      	strb	r4, [r1, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  404c5a:	4a13      	ldr	r2, [pc, #76]	; (404ca8 <udi_cdc_data_enable+0x74>)
	udi_cdc_rx_pos[port] = 0;
  404c5c:	4913      	ldr	r1, [pc, #76]	; (404cac <udi_cdc_data_enable+0x78>)
	udi_cdc_rx_buf_sel[port] = 0;
  404c5e:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  404c60:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  404c62:	4a13      	ldr	r2, [pc, #76]	; (404cb0 <udi_cdc_data_enable+0x7c>)
	udi_cdc_rx_buf_nb[port][1] = 0;
  404c64:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  404c66:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
  404c68:	4790      	blx	r2
  404c6a:	b148      	cbz	r0, 404c80 <udi_cdc_data_enable+0x4c>
	udi_cdc_nb_data_enabled++;
  404c6c:	782b      	ldrb	r3, [r5, #0]
  404c6e:	3301      	adds	r3, #1
  404c70:	b2db      	uxtb	r3, r3
  404c72:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  404c74:	782b      	ldrb	r3, [r5, #0]
  404c76:	2b01      	cmp	r3, #1
  404c78:	b2da      	uxtb	r2, r3
		udi_cdc_data_running = true;
  404c7a:	bf04      	itt	eq
  404c7c:	4b0d      	ldreq	r3, [pc, #52]	; (404cb4 <udi_cdc_data_enable+0x80>)
  404c7e:	701a      	strbeq	r2, [r3, #0]
}
  404c80:	bd38      	pop	{r3, r4, r5, pc}
  404c82:	bf00      	nop
  404c84:	20019838 	.word	0x20019838
  404c88:	20019710 	.word	0x20019710
  404c8c:	20019830 	.word	0x20019830
  404c90:	200197a8 	.word	0x200197a8
  404c94:	2001982c 	.word	0x2001982c
  404c98:	20019834 	.word	0x20019834
  404c9c:	00404a79 	.word	0x00404a79
  404ca0:	200197a0 	.word	0x200197a0
  404ca4:	20019794 	.word	0x20019794
  404ca8:	20019798 	.word	0x20019798
  404cac:	2001979c 	.word	0x2001979c
  404cb0:	00404b41 	.word	0x00404b41
  404cb4:	20019706 	.word	0x20019706

00404cb8 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  404cb8:	b9f0      	cbnz	r0, 404cf8 <udi_cdc_data_received+0x40>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  404cba:	4603      	mov	r3, r0
  404cbc:	480f      	ldr	r0, [pc, #60]	; (404cfc <udi_cdc_data_received+0x44>)
  404cbe:	f890 c000 	ldrb.w	ip, [r0]
  404cc2:	fabc fc8c 	clz	ip, ip
  404cc6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	if (!n) {
  404cca:	b139      	cbz	r1, 404cdc <udi_cdc_data_received+0x24>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  404ccc:	4a0c      	ldr	r2, [pc, #48]	; (404d00 <udi_cdc_data_received+0x48>)
	udi_cdc_rx_trans_ongoing[port] = false;
  404cce:	480d      	ldr	r0, [pc, #52]	; (404d04 <udi_cdc_data_received+0x4c>)
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  404cd0:	b289      	uxth	r1, r1
  404cd2:	f822 101c 	strh.w	r1, [r2, ip, lsl #1]
	udi_cdc_rx_start(port);
  404cd6:	4a0c      	ldr	r2, [pc, #48]	; (404d08 <udi_cdc_data_received+0x50>)
	udi_cdc_rx_trans_ongoing[port] = false;
  404cd8:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_start(port);
  404cda:	4710      	bx	r2
{
  404cdc:	b510      	push	{r4, lr}
				udi_cdc_rx_buf[port][buf_sel_trans],
  404cde:	490b      	ldr	r1, [pc, #44]	; (404d0c <udi_cdc_data_received+0x54>)
		udd_ep_run( ep,
  404ce0:	4c0b      	ldr	r4, [pc, #44]	; (404d10 <udi_cdc_data_received+0x58>)
{
  404ce2:	b082      	sub	sp, #8
		udd_ep_run( ep,
  404ce4:	9400      	str	r4, [sp, #0]
  404ce6:	2340      	movs	r3, #64	; 0x40
  404ce8:	4610      	mov	r0, r2
  404cea:	4c0a      	ldr	r4, [pc, #40]	; (404d14 <udi_cdc_data_received+0x5c>)
  404cec:	eb01 128c 	add.w	r2, r1, ip, lsl #6
  404cf0:	2101      	movs	r1, #1
  404cf2:	47a0      	blx	r4
}
  404cf4:	b002      	add	sp, #8
  404cf6:	bd10      	pop	{r4, pc}
  404cf8:	4770      	bx	lr
  404cfa:	bf00      	nop
  404cfc:	20019798 	.word	0x20019798
  404d00:	20019794 	.word	0x20019794
  404d04:	200197a0 	.word	0x200197a0
  404d08:	00404b41 	.word	0x00404b41
  404d0c:	20019714 	.word	0x20019714
  404d10:	00404cb9 	.word	0x00404cb9
  404d14:	00404505 	.word	0x00404505

00404d18 <udi_cdc_multi_get_nb_received_data>:
{
  404d18:	b430      	push	{r4, r5}
  404d1a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404d1c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404d20:	fab3 f383 	clz	r3, r3
  404d24:	095b      	lsrs	r3, r3, #5
  404d26:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404d28:	b672      	cpsid	i
  404d2a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404d2e:	2000      	movs	r0, #0
  404d30:	490b      	ldr	r1, [pc, #44]	; (404d60 <udi_cdc_multi_get_nb_received_data+0x48>)
	pos = udi_cdc_rx_pos[port];
  404d32:	4a0c      	ldr	r2, [pc, #48]	; (404d64 <udi_cdc_multi_get_nb_received_data+0x4c>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  404d34:	4b0c      	ldr	r3, [pc, #48]	; (404d68 <udi_cdc_multi_get_nb_received_data+0x50>)
  404d36:	7008      	strb	r0, [r1, #0]
	return flags;
  404d38:	9c01      	ldr	r4, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  404d3a:	8810      	ldrh	r0, [r2, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  404d3c:	781a      	ldrb	r2, [r3, #0]
  404d3e:	4d0b      	ldr	r5, [pc, #44]	; (404d6c <udi_cdc_multi_get_nb_received_data+0x54>)
  404d40:	b2d2      	uxtb	r2, r2
	pos = udi_cdc_rx_pos[port];
  404d42:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  404d44:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
  404d48:	b280      	uxth	r0, r0
  404d4a:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  404d4c:	b124      	cbz	r4, 404d58 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  404d4e:	2301      	movs	r3, #1
  404d50:	700b      	strb	r3, [r1, #0]
  404d52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404d56:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  404d58:	b002      	add	sp, #8
  404d5a:	bc30      	pop	{r4, r5}
  404d5c:	4770      	bx	lr
  404d5e:	bf00      	nop
  404d60:	20000718 	.word	0x20000718
  404d64:	2001979c 	.word	0x2001979c
  404d68:	20019798 	.word	0x20019798
  404d6c:	20019794 	.word	0x20019794

00404d70 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
  404d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d74:	4688      	mov	r8, r1
  404d76:	4616      	mov	r6, r2
  404d78:	4d25      	ldr	r5, [pc, #148]	; (404e10 <udi_cdc_multi_read_buf+0xa0>)
  404d7a:	4c26      	ldr	r4, [pc, #152]	; (404e14 <udi_cdc_multi_read_buf+0xa4>)
  404d7c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404e18 <udi_cdc_multi_read_buf+0xa8>
  404d80:	4f26      	ldr	r7, [pc, #152]	; (404e1c <udi_cdc_multi_read_buf+0xac>)
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
  404d82:	f8df b09c 	ldr.w	fp, [pc, #156]	; 404e20 <udi_cdc_multi_read_buf+0xb0>
{
  404d86:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404d88:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404d8c:	fab3 f383 	clz	r3, r3
  404d90:	095b      	lsrs	r3, r3, #5
  404d92:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404d94:	b672      	cpsid	i
  404d96:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404d9a:	2300      	movs	r3, #0
  404d9c:	702b      	strb	r3, [r5, #0]
	return flags;
  404d9e:	9a01      	ldr	r2, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  404da0:	8820      	ldrh	r0, [r4, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
  404da2:	f899 1000 	ldrb.w	r1, [r9]
	pos = udi_cdc_rx_pos[port];
  404da6:	b280      	uxth	r0, r0
	buf_sel = udi_cdc_rx_buf_sel[port];
  404da8:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  404daa:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
  404dae:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
  404db0:	b122      	cbz	r2, 404dbc <udi_cdc_multi_read_buf+0x4c>
		cpu_irq_enable();
  404db2:	2201      	movs	r2, #1
  404db4:	702a      	strb	r2, [r5, #0]
  404db6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404dba:	b662      	cpsie	i
	while (again) {
  404dbc:	4283      	cmp	r3, r0
		if (!udi_cdc_data_running) {
  404dbe:	4a19      	ldr	r2, [pc, #100]	; (404e24 <udi_cdc_multi_read_buf+0xb4>)
	while (again) {
  404dc0:	d806      	bhi.n	404dd0 <udi_cdc_multi_read_buf+0x60>
		if (!udi_cdc_data_running) {
  404dc2:	7813      	ldrb	r3, [r2, #0]
  404dc4:	2b00      	cmp	r3, #0
  404dc6:	d1df      	bne.n	404d88 <udi_cdc_multi_read_buf+0x18>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
  404dc8:	4630      	mov	r0, r6
  404dca:	b003      	add	sp, #12
  404dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
  404dd0:	f837 a011 	ldrh.w	sl, [r7, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
  404dd4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
  404dd8:	fa1f fa8a 	uxth.w	sl, sl
  404ddc:	ebaa 0a00 	sub.w	sl, sl, r0
	if (copy_nb>size) {
  404de0:	45b2      	cmp	sl, r6
  404de2:	bf28      	it	cs
  404de4:	46b2      	movcs	sl, r6
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
  404de6:	4640      	mov	r0, r8
  404de8:	4b0f      	ldr	r3, [pc, #60]	; (404e28 <udi_cdc_multi_read_buf+0xb8>)
  404dea:	4652      	mov	r2, sl
  404dec:	4459      	add	r1, fp
  404dee:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
  404df0:	8823      	ldrh	r3, [r4, #0]
	size -= copy_nb;
  404df2:	eba6 060a 	sub.w	r6, r6, sl
	udi_cdc_rx_pos[port] += copy_nb;
  404df6:	4453      	add	r3, sl
  404df8:	b29b      	uxth	r3, r3
  404dfa:	8023      	strh	r3, [r4, #0]
	udi_cdc_rx_start(port);
  404dfc:	4b0b      	ldr	r3, [pc, #44]	; (404e2c <udi_cdc_multi_read_buf+0xbc>)
	ptr_buf += copy_nb;
  404dfe:	44d0      	add	r8, sl
	udi_cdc_rx_start(port);
  404e00:	4798      	blx	r3
	if (size) {
  404e02:	2e00      	cmp	r6, #0
  404e04:	d1c0      	bne.n	404d88 <udi_cdc_multi_read_buf+0x18>
}
  404e06:	4630      	mov	r0, r6
  404e08:	b003      	add	sp, #12
  404e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e0e:	bf00      	nop
  404e10:	20000718 	.word	0x20000718
  404e14:	2001979c 	.word	0x2001979c
  404e18:	20019798 	.word	0x20019798
  404e1c:	20019794 	.word	0x20019794
  404e20:	20019714 	.word	0x20019714
  404e24:	20019706 	.word	0x20019706
  404e28:	0040504d 	.word	0x0040504d
  404e2c:	00404b41 	.word	0x00404b41

00404e30 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  404e30:	b470      	push	{r4, r5, r6}
  404e32:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404e34:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404e38:	fab3 f383 	clz	r3, r3
  404e3c:	095b      	lsrs	r3, r3, #5
  404e3e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404e40:	b672      	cpsid	i
  404e42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404e46:	2100      	movs	r1, #0
  404e48:	4a14      	ldr	r2, [pc, #80]	; (404e9c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  404e4a:	4c15      	ldr	r4, [pc, #84]	; (404ea0 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  404e4c:	7011      	strb	r1, [r2, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  404e4e:	4815      	ldr	r0, [pc, #84]	; (404ea4 <udi_cdc_multi_get_free_tx_buffer+0x74>)
	return flags;
  404e50:	9d01      	ldr	r5, [sp, #4]
	buf_sel = udi_cdc_tx_buf_sel[port];
  404e52:	7823      	ldrb	r3, [r4, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  404e54:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  404e58:	2840      	cmp	r0, #64	; 0x40
  404e5a:	d00a      	beq.n	404e72 <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  404e5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  404e60:	b125      	cbz	r5, 404e6c <udi_cdc_multi_get_free_tx_buffer+0x3c>
		cpu_irq_enable();
  404e62:	2301      	movs	r3, #1
  404e64:	7013      	strb	r3, [r2, #0]
  404e66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404e6a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  404e6c:	b003      	add	sp, #12
  404e6e:	bc70      	pop	{r4, r5, r6}
  404e70:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  404e72:	4e0d      	ldr	r6, [pc, #52]	; (404ea8 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  404e74:	7836      	ldrb	r6, [r6, #0]
  404e76:	f006 0cff 	and.w	ip, r6, #255	; 0xff
  404e7a:	b956      	cbnz	r6, 404e92 <udi_cdc_multi_get_free_tx_buffer+0x62>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  404e7c:	490b      	ldr	r1, [pc, #44]	; (404eac <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  404e7e:	780e      	ldrb	r6, [r1, #0]
  404e80:	b94e      	cbnz	r6, 404e96 <udi_cdc_multi_get_free_tx_buffer+0x66>
			udi_cdc_tx_both_buf_to_send[port] = true;
  404e82:	b2db      	uxtb	r3, r3
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404e84:	fab3 f383 	clz	r3, r3
			udi_cdc_tx_both_buf_to_send[port] = true;
  404e88:	2601      	movs	r6, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404e8a:	095b      	lsrs	r3, r3, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
  404e8c:	700e      	strb	r6, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404e8e:	7023      	strb	r3, [r4, #0]
			buf_sel_nb = 0;
  404e90:	e7e6      	b.n	404e60 <udi_cdc_multi_get_free_tx_buffer+0x30>
  404e92:	4608      	mov	r0, r1
  404e94:	e7e4      	b.n	404e60 <udi_cdc_multi_get_free_tx_buffer+0x30>
  404e96:	4660      	mov	r0, ip
  404e98:	e7e2      	b.n	404e60 <udi_cdc_multi_get_free_tx_buffer+0x30>
  404e9a:	bf00      	nop
  404e9c:	20000718 	.word	0x20000718
  404ea0:	20019830 	.word	0x20019830
  404ea4:	2001982c 	.word	0x2001982c
  404ea8:	20019838 	.word	0x20019838
  404eac:	200197a8 	.word	0x200197a8

00404eb0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  404eb0:	b470      	push	{r4, r5, r6}
  404eb2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404eb4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404eb8:	fab3 f383 	clz	r3, r3
  404ebc:	095b      	lsrs	r3, r3, #5
  404ebe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404ec0:	b672      	cpsid	i
  404ec2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404ec6:	2100      	movs	r1, #0
  404ec8:	4a13      	ldr	r2, [pc, #76]	; (404f18 <udi_cdc_multi_is_tx_ready+0x68>)
	buf_sel = udi_cdc_tx_buf_sel[port];
  404eca:	4c14      	ldr	r4, [pc, #80]	; (404f1c <udi_cdc_multi_is_tx_ready+0x6c>)
  404ecc:	7011      	strb	r1, [r2, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  404ece:	4814      	ldr	r0, [pc, #80]	; (404f20 <udi_cdc_multi_is_tx_ready+0x70>)
	return flags;
  404ed0:	9d01      	ldr	r5, [sp, #4]
	buf_sel = udi_cdc_tx_buf_sel[port];
  404ed2:	7823      	ldrb	r3, [r4, #0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  404ed4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  404ed8:	2840      	cmp	r0, #64	; 0x40
  404eda:	d009      	beq.n	404ef0 <udi_cdc_multi_is_tx_ready+0x40>
  404edc:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
  404ede:	b125      	cbz	r5, 404eea <udi_cdc_multi_is_tx_ready+0x3a>
		cpu_irq_enable();
  404ee0:	2301      	movs	r3, #1
  404ee2:	7013      	strb	r3, [r2, #0]
  404ee4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404ee8:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
  404eea:	b003      	add	sp, #12
  404eec:	bc70      	pop	{r4, r5, r6}
  404eee:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  404ef0:	480c      	ldr	r0, [pc, #48]	; (404f24 <udi_cdc_multi_is_tx_ready+0x74>)
  404ef2:	7806      	ldrb	r6, [r0, #0]
  404ef4:	f006 00ff 	and.w	r0, r6, #255	; 0xff
  404ef8:	b95e      	cbnz	r6, 404f12 <udi_cdc_multi_is_tx_ready+0x62>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  404efa:	490b      	ldr	r1, [pc, #44]	; (404f28 <udi_cdc_multi_is_tx_ready+0x78>)
  404efc:	780e      	ldrb	r6, [r1, #0]
  404efe:	2e00      	cmp	r6, #0
  404f00:	d1ed      	bne.n	404ede <udi_cdc_multi_is_tx_ready+0x2e>
			udi_cdc_tx_both_buf_to_send[port] = true;
  404f02:	b2db      	uxtb	r3, r3
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404f04:	fab3 f383 	clz	r3, r3
			udi_cdc_tx_both_buf_to_send[port] = true;
  404f08:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404f0a:	095b      	lsrs	r3, r3, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
  404f0c:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  404f0e:	7023      	strb	r3, [r4, #0]
			buf_sel_nb = 0;
  404f10:	e7e5      	b.n	404ede <udi_cdc_multi_is_tx_ready+0x2e>
  404f12:	4608      	mov	r0, r1
  404f14:	e7e3      	b.n	404ede <udi_cdc_multi_is_tx_ready+0x2e>
  404f16:	bf00      	nop
  404f18:	20000718 	.word	0x20000718
  404f1c:	20019830 	.word	0x20019830
  404f20:	2001982c 	.word	0x2001982c
  404f24:	20019838 	.word	0x20019838
  404f28:	200197a8 	.word	0x200197a8

00404f2c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  404f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  404f30:	4b21      	ldr	r3, [pc, #132]	; (404fb8 <udi_cdc_multi_putc+0x8c>)
{
  404f32:	460c      	mov	r4, r1
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  404f34:	799d      	ldrb	r5, [r3, #6]
  404f36:	4f21      	ldr	r7, [pc, #132]	; (404fbc <udi_cdc_multi_putc+0x90>)
  404f38:	f1a5 0509 	sub.w	r5, r5, #9
  404f3c:	fab5 f585 	clz	r5, r5
	cpu_irq_disable();
  404f40:	f8df 807c 	ldr.w	r8, [pc, #124]	; 404fc0 <udi_cdc_multi_putc+0x94>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  404f44:	f8df 907c 	ldr.w	r9, [pc, #124]	; 404fc4 <udi_cdc_multi_putc+0x98>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  404f48:	4e1f      	ldr	r6, [pc, #124]	; (404fc8 <udi_cdc_multi_putc+0x9c>)
{
  404f4a:	b083      	sub	sp, #12
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  404f4c:	096d      	lsrs	r5, r5, #5
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  404f4e:	2000      	movs	r0, #0
  404f50:	47b8      	blx	r7
		if (!udi_cdc_data_running) {
  404f52:	4b1e      	ldr	r3, [pc, #120]	; (404fcc <udi_cdc_multi_putc+0xa0>)
	if (!udi_cdc_multi_is_tx_ready(port)) {
  404f54:	b938      	cbnz	r0, 404f66 <udi_cdc_multi_putc+0x3a>
		if (!udi_cdc_data_running) {
  404f56:	781b      	ldrb	r3, [r3, #0]
  404f58:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  404f5c:	2b00      	cmp	r3, #0
  404f5e:	d1f6      	bne.n	404f4e <udi_cdc_multi_putc+0x22>
		b_databit_9 = false;
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
  404f60:	b003      	add	sp, #12
  404f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404f66:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404f6a:	fab3 f383 	clz	r3, r3
  404f6e:	095b      	lsrs	r3, r3, #5
  404f70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  404f72:	b672      	cpsid	i
  404f74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404f78:	2300      	movs	r3, #0
  404f7a:	f888 3000 	strb.w	r3, [r8]
	return flags;
  404f7e:	9801      	ldr	r0, [sp, #4]
	buf_sel = udi_cdc_tx_buf_sel[port];
  404f80:	f899 3000 	ldrb.w	r3, [r9]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  404f84:	4a12      	ldr	r2, [pc, #72]	; (404fd0 <udi_cdc_multi_putc+0xa4>)
  404f86:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
  404f8a:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  404f8c:	f101 0c01 	add.w	ip, r1, #1
  404f90:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  404f94:	5454      	strb	r4, [r2, r1]
  404f96:	f826 c013 	strh.w	ip, [r6, r3, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
  404f9a:	b128      	cbz	r0, 404fa8 <udi_cdc_multi_putc+0x7c>
		cpu_irq_enable();
  404f9c:	2301      	movs	r3, #1
  404f9e:	f888 3000 	strb.w	r3, [r8]
  404fa2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404fa6:	b662      	cpsie	i
	if (b_databit_9) {
  404fa8:	b115      	cbz	r5, 404fb0 <udi_cdc_multi_putc+0x84>
		b_databit_9 = false;
  404faa:	2500      	movs	r5, #0
		value = value >> 8;
  404fac:	1224      	asrs	r4, r4, #8
		goto udi_cdc_putc_process_one_byte;
  404fae:	e7ce      	b.n	404f4e <udi_cdc_multi_putc+0x22>
	return true;
  404fb0:	2001      	movs	r0, #1
}
  404fb2:	b003      	add	sp, #12
  404fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404fb8:	20019708 	.word	0x20019708
  404fbc:	00404e31 	.word	0x00404e31
  404fc0:	20000718 	.word	0x20000718
  404fc4:	20019830 	.word	0x20019830
  404fc8:	2001982c 	.word	0x2001982c
  404fcc:	20019706 	.word	0x20019706
  404fd0:	200197ac 	.word	0x200197ac

00404fd4 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  404fd4:	b119      	cbz	r1, 404fde <pdc_rx_init+0xa>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  404fd6:	680b      	ldr	r3, [r1, #0]
  404fd8:	6003      	str	r3, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  404fda:	684b      	ldr	r3, [r1, #4]
  404fdc:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
  404fde:	b11a      	cbz	r2, 404fe8 <pdc_rx_init+0x14>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  404fe0:	6813      	ldr	r3, [r2, #0]
  404fe2:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  404fe4:	6853      	ldr	r3, [r2, #4]
  404fe6:	6143      	str	r3, [r0, #20]
	}
}
  404fe8:	4770      	bx	lr
  404fea:	bf00      	nop

00404fec <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  404fec:	f240 1301 	movw	r3, #257	; 0x101
  404ff0:	4019      	ands	r1, r3
	p_pdc->PERIPH_PTCR =
  404ff2:	6201      	str	r1, [r0, #32]
}
  404ff4:	4770      	bx	lr
  404ff6:	bf00      	nop

00404ff8 <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  404ff8:	f240 2302 	movw	r3, #514	; 0x202
  404ffc:	4019      	ands	r1, r3
	p_pdc->PERIPH_PTCR =
  404ffe:	6201      	str	r1, [r0, #32]
}
  405000:	4770      	bx	lr
  405002:	bf00      	nop

00405004 <__libc_init_array>:
  405004:	b570      	push	{r4, r5, r6, lr}
  405006:	2600      	movs	r6, #0
  405008:	4d0c      	ldr	r5, [pc, #48]	; (40503c <__libc_init_array+0x38>)
  40500a:	4c0d      	ldr	r4, [pc, #52]	; (405040 <__libc_init_array+0x3c>)
  40500c:	1b64      	subs	r4, r4, r5
  40500e:	10a4      	asrs	r4, r4, #2
  405010:	42a6      	cmp	r6, r4
  405012:	d109      	bne.n	405028 <__libc_init_array+0x24>
  405014:	f000 fcf0 	bl	4059f8 <_init>
  405018:	2600      	movs	r6, #0
  40501a:	4d0a      	ldr	r5, [pc, #40]	; (405044 <__libc_init_array+0x40>)
  40501c:	4c0a      	ldr	r4, [pc, #40]	; (405048 <__libc_init_array+0x44>)
  40501e:	1b64      	subs	r4, r4, r5
  405020:	10a4      	asrs	r4, r4, #2
  405022:	42a6      	cmp	r6, r4
  405024:	d105      	bne.n	405032 <__libc_init_array+0x2e>
  405026:	bd70      	pop	{r4, r5, r6, pc}
  405028:	f855 3b04 	ldr.w	r3, [r5], #4
  40502c:	4798      	blx	r3
  40502e:	3601      	adds	r6, #1
  405030:	e7ee      	b.n	405010 <__libc_init_array+0xc>
  405032:	f855 3b04 	ldr.w	r3, [r5], #4
  405036:	4798      	blx	r3
  405038:	3601      	adds	r6, #1
  40503a:	e7f2      	b.n	405022 <__libc_init_array+0x1e>
  40503c:	00405a04 	.word	0x00405a04
  405040:	00405a04 	.word	0x00405a04
  405044:	00405a04 	.word	0x00405a04
  405048:	00405a08 	.word	0x00405a08

0040504c <memcpy>:
  40504c:	440a      	add	r2, r1
  40504e:	4291      	cmp	r1, r2
  405050:	f100 33ff 	add.w	r3, r0, #4294967295
  405054:	d100      	bne.n	405058 <memcpy+0xc>
  405056:	4770      	bx	lr
  405058:	b510      	push	{r4, lr}
  40505a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40505e:	4291      	cmp	r1, r2
  405060:	f803 4f01 	strb.w	r4, [r3, #1]!
  405064:	d1f9      	bne.n	40505a <memcpy+0xe>
  405066:	bd10      	pop	{r4, pc}

00405068 <memset>:
  405068:	4603      	mov	r3, r0
  40506a:	4402      	add	r2, r0
  40506c:	4293      	cmp	r3, r2
  40506e:	d100      	bne.n	405072 <memset+0xa>
  405070:	4770      	bx	lr
  405072:	f803 1b01 	strb.w	r1, [r3], #1
  405076:	e7f9      	b.n	40506c <memset+0x4>

00405078 <siprintf>:
  405078:	b40e      	push	{r1, r2, r3}
  40507a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40507e:	b500      	push	{lr}
  405080:	b09c      	sub	sp, #112	; 0x70
  405082:	ab1d      	add	r3, sp, #116	; 0x74
  405084:	9002      	str	r0, [sp, #8]
  405086:	9006      	str	r0, [sp, #24]
  405088:	9107      	str	r1, [sp, #28]
  40508a:	9104      	str	r1, [sp, #16]
  40508c:	4808      	ldr	r0, [pc, #32]	; (4050b0 <siprintf+0x38>)
  40508e:	4909      	ldr	r1, [pc, #36]	; (4050b4 <siprintf+0x3c>)
  405090:	f853 2b04 	ldr.w	r2, [r3], #4
  405094:	9105      	str	r1, [sp, #20]
  405096:	6800      	ldr	r0, [r0, #0]
  405098:	a902      	add	r1, sp, #8
  40509a:	9301      	str	r3, [sp, #4]
  40509c:	f000 f882 	bl	4051a4 <_svfiprintf_r>
  4050a0:	2200      	movs	r2, #0
  4050a2:	9b02      	ldr	r3, [sp, #8]
  4050a4:	701a      	strb	r2, [r3, #0]
  4050a6:	b01c      	add	sp, #112	; 0x70
  4050a8:	f85d eb04 	ldr.w	lr, [sp], #4
  4050ac:	b003      	add	sp, #12
  4050ae:	4770      	bx	lr
  4050b0:	20000744 	.word	0x20000744
  4050b4:	ffff0208 	.word	0xffff0208

004050b8 <strlen>:
  4050b8:	4603      	mov	r3, r0
  4050ba:	f813 2b01 	ldrb.w	r2, [r3], #1
  4050be:	2a00      	cmp	r2, #0
  4050c0:	d1fb      	bne.n	4050ba <strlen+0x2>
  4050c2:	1a18      	subs	r0, r3, r0
  4050c4:	3801      	subs	r0, #1
  4050c6:	4770      	bx	lr

004050c8 <strncpy>:
  4050c8:	4603      	mov	r3, r0
  4050ca:	b510      	push	{r4, lr}
  4050cc:	3901      	subs	r1, #1
  4050ce:	b132      	cbz	r2, 4050de <strncpy+0x16>
  4050d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  4050d4:	3a01      	subs	r2, #1
  4050d6:	f803 4b01 	strb.w	r4, [r3], #1
  4050da:	2c00      	cmp	r4, #0
  4050dc:	d1f7      	bne.n	4050ce <strncpy+0x6>
  4050de:	2100      	movs	r1, #0
  4050e0:	441a      	add	r2, r3
  4050e2:	4293      	cmp	r3, r2
  4050e4:	d100      	bne.n	4050e8 <strncpy+0x20>
  4050e6:	bd10      	pop	{r4, pc}
  4050e8:	f803 1b01 	strb.w	r1, [r3], #1
  4050ec:	e7f9      	b.n	4050e2 <strncpy+0x1a>

004050ee <__ssputs_r>:
  4050ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4050f2:	688e      	ldr	r6, [r1, #8]
  4050f4:	4682      	mov	sl, r0
  4050f6:	429e      	cmp	r6, r3
  4050f8:	460c      	mov	r4, r1
  4050fa:	4690      	mov	r8, r2
  4050fc:	461f      	mov	r7, r3
  4050fe:	d838      	bhi.n	405172 <__ssputs_r+0x84>
  405100:	898a      	ldrh	r2, [r1, #12]
  405102:	f412 6f90 	tst.w	r2, #1152	; 0x480
  405106:	d032      	beq.n	40516e <__ssputs_r+0x80>
  405108:	6825      	ldr	r5, [r4, #0]
  40510a:	6909      	ldr	r1, [r1, #16]
  40510c:	3301      	adds	r3, #1
  40510e:	eba5 0901 	sub.w	r9, r5, r1
  405112:	6965      	ldr	r5, [r4, #20]
  405114:	444b      	add	r3, r9
  405116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40511a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40511e:	106d      	asrs	r5, r5, #1
  405120:	429d      	cmp	r5, r3
  405122:	bf38      	it	cc
  405124:	461d      	movcc	r5, r3
  405126:	0553      	lsls	r3, r2, #21
  405128:	d531      	bpl.n	40518e <__ssputs_r+0xa0>
  40512a:	4629      	mov	r1, r5
  40512c:	f000 fb60 	bl	4057f0 <_malloc_r>
  405130:	4606      	mov	r6, r0
  405132:	b950      	cbnz	r0, 40514a <__ssputs_r+0x5c>
  405134:	230c      	movs	r3, #12
  405136:	f04f 30ff 	mov.w	r0, #4294967295
  40513a:	f8ca 3000 	str.w	r3, [sl]
  40513e:	89a3      	ldrh	r3, [r4, #12]
  405140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405144:	81a3      	strh	r3, [r4, #12]
  405146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40514a:	464a      	mov	r2, r9
  40514c:	6921      	ldr	r1, [r4, #16]
  40514e:	f7ff ff7d 	bl	40504c <memcpy>
  405152:	89a3      	ldrh	r3, [r4, #12]
  405154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40515c:	81a3      	strh	r3, [r4, #12]
  40515e:	6126      	str	r6, [r4, #16]
  405160:	444e      	add	r6, r9
  405162:	6026      	str	r6, [r4, #0]
  405164:	463e      	mov	r6, r7
  405166:	6165      	str	r5, [r4, #20]
  405168:	eba5 0509 	sub.w	r5, r5, r9
  40516c:	60a5      	str	r5, [r4, #8]
  40516e:	42be      	cmp	r6, r7
  405170:	d900      	bls.n	405174 <__ssputs_r+0x86>
  405172:	463e      	mov	r6, r7
  405174:	4632      	mov	r2, r6
  405176:	4641      	mov	r1, r8
  405178:	6820      	ldr	r0, [r4, #0]
  40517a:	f000 fab7 	bl	4056ec <memmove>
  40517e:	68a3      	ldr	r3, [r4, #8]
  405180:	2000      	movs	r0, #0
  405182:	1b9b      	subs	r3, r3, r6
  405184:	60a3      	str	r3, [r4, #8]
  405186:	6823      	ldr	r3, [r4, #0]
  405188:	4433      	add	r3, r6
  40518a:	6023      	str	r3, [r4, #0]
  40518c:	e7db      	b.n	405146 <__ssputs_r+0x58>
  40518e:	462a      	mov	r2, r5
  405190:	f000 fba2 	bl	4058d8 <_realloc_r>
  405194:	4606      	mov	r6, r0
  405196:	2800      	cmp	r0, #0
  405198:	d1e1      	bne.n	40515e <__ssputs_r+0x70>
  40519a:	4650      	mov	r0, sl
  40519c:	6921      	ldr	r1, [r4, #16]
  40519e:	f000 fabf 	bl	405720 <_free_r>
  4051a2:	e7c7      	b.n	405134 <__ssputs_r+0x46>

004051a4 <_svfiprintf_r>:
  4051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051a8:	4698      	mov	r8, r3
  4051aa:	898b      	ldrh	r3, [r1, #12]
  4051ac:	4607      	mov	r7, r0
  4051ae:	061b      	lsls	r3, r3, #24
  4051b0:	460d      	mov	r5, r1
  4051b2:	4614      	mov	r4, r2
  4051b4:	b09d      	sub	sp, #116	; 0x74
  4051b6:	d50e      	bpl.n	4051d6 <_svfiprintf_r+0x32>
  4051b8:	690b      	ldr	r3, [r1, #16]
  4051ba:	b963      	cbnz	r3, 4051d6 <_svfiprintf_r+0x32>
  4051bc:	2140      	movs	r1, #64	; 0x40
  4051be:	f000 fb17 	bl	4057f0 <_malloc_r>
  4051c2:	6028      	str	r0, [r5, #0]
  4051c4:	6128      	str	r0, [r5, #16]
  4051c6:	b920      	cbnz	r0, 4051d2 <_svfiprintf_r+0x2e>
  4051c8:	230c      	movs	r3, #12
  4051ca:	603b      	str	r3, [r7, #0]
  4051cc:	f04f 30ff 	mov.w	r0, #4294967295
  4051d0:	e0d1      	b.n	405376 <_svfiprintf_r+0x1d2>
  4051d2:	2340      	movs	r3, #64	; 0x40
  4051d4:	616b      	str	r3, [r5, #20]
  4051d6:	2300      	movs	r3, #0
  4051d8:	9309      	str	r3, [sp, #36]	; 0x24
  4051da:	2320      	movs	r3, #32
  4051dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4051e0:	2330      	movs	r3, #48	; 0x30
  4051e2:	f04f 0901 	mov.w	r9, #1
  4051e6:	f8cd 800c 	str.w	r8, [sp, #12]
  4051ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 405390 <_svfiprintf_r+0x1ec>
  4051ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4051f2:	4623      	mov	r3, r4
  4051f4:	469a      	mov	sl, r3
  4051f6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4051fa:	b10a      	cbz	r2, 405200 <_svfiprintf_r+0x5c>
  4051fc:	2a25      	cmp	r2, #37	; 0x25
  4051fe:	d1f9      	bne.n	4051f4 <_svfiprintf_r+0x50>
  405200:	ebba 0b04 	subs.w	fp, sl, r4
  405204:	d00b      	beq.n	40521e <_svfiprintf_r+0x7a>
  405206:	465b      	mov	r3, fp
  405208:	4622      	mov	r2, r4
  40520a:	4629      	mov	r1, r5
  40520c:	4638      	mov	r0, r7
  40520e:	f7ff ff6e 	bl	4050ee <__ssputs_r>
  405212:	3001      	adds	r0, #1
  405214:	f000 80aa 	beq.w	40536c <_svfiprintf_r+0x1c8>
  405218:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40521a:	445a      	add	r2, fp
  40521c:	9209      	str	r2, [sp, #36]	; 0x24
  40521e:	f89a 3000 	ldrb.w	r3, [sl]
  405222:	2b00      	cmp	r3, #0
  405224:	f000 80a2 	beq.w	40536c <_svfiprintf_r+0x1c8>
  405228:	2300      	movs	r3, #0
  40522a:	f04f 32ff 	mov.w	r2, #4294967295
  40522e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  405232:	f10a 0a01 	add.w	sl, sl, #1
  405236:	9304      	str	r3, [sp, #16]
  405238:	9307      	str	r3, [sp, #28]
  40523a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  40523e:	931a      	str	r3, [sp, #104]	; 0x68
  405240:	4654      	mov	r4, sl
  405242:	2205      	movs	r2, #5
  405244:	f814 1b01 	ldrb.w	r1, [r4], #1
  405248:	4851      	ldr	r0, [pc, #324]	; (405390 <_svfiprintf_r+0x1ec>)
  40524a:	f000 fa41 	bl	4056d0 <memchr>
  40524e:	9a04      	ldr	r2, [sp, #16]
  405250:	b9d8      	cbnz	r0, 40528a <_svfiprintf_r+0xe6>
  405252:	06d0      	lsls	r0, r2, #27
  405254:	bf44      	itt	mi
  405256:	2320      	movmi	r3, #32
  405258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
  40525c:	0711      	lsls	r1, r2, #28
  40525e:	bf44      	itt	mi
  405260:	232b      	movmi	r3, #43	; 0x2b
  405262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
  405266:	f89a 3000 	ldrb.w	r3, [sl]
  40526a:	2b2a      	cmp	r3, #42	; 0x2a
  40526c:	d015      	beq.n	40529a <_svfiprintf_r+0xf6>
  40526e:	4654      	mov	r4, sl
  405270:	2000      	movs	r0, #0
  405272:	f04f 0c0a 	mov.w	ip, #10
  405276:	9a07      	ldr	r2, [sp, #28]
  405278:	4621      	mov	r1, r4
  40527a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40527e:	3b30      	subs	r3, #48	; 0x30
  405280:	2b09      	cmp	r3, #9
  405282:	d94e      	bls.n	405322 <_svfiprintf_r+0x17e>
  405284:	b1b0      	cbz	r0, 4052b4 <_svfiprintf_r+0x110>
  405286:	9207      	str	r2, [sp, #28]
  405288:	e014      	b.n	4052b4 <_svfiprintf_r+0x110>
  40528a:	eba0 0308 	sub.w	r3, r0, r8
  40528e:	fa09 f303 	lsl.w	r3, r9, r3
  405292:	4313      	orrs	r3, r2
  405294:	46a2      	mov	sl, r4
  405296:	9304      	str	r3, [sp, #16]
  405298:	e7d2      	b.n	405240 <_svfiprintf_r+0x9c>
  40529a:	9b03      	ldr	r3, [sp, #12]
  40529c:	1d19      	adds	r1, r3, #4
  40529e:	681b      	ldr	r3, [r3, #0]
  4052a0:	9103      	str	r1, [sp, #12]
  4052a2:	2b00      	cmp	r3, #0
  4052a4:	bfbb      	ittet	lt
  4052a6:	425b      	neglt	r3, r3
  4052a8:	f042 0202 	orrlt.w	r2, r2, #2
  4052ac:	9307      	strge	r3, [sp, #28]
  4052ae:	9307      	strlt	r3, [sp, #28]
  4052b0:	bfb8      	it	lt
  4052b2:	9204      	strlt	r2, [sp, #16]
  4052b4:	7823      	ldrb	r3, [r4, #0]
  4052b6:	2b2e      	cmp	r3, #46	; 0x2e
  4052b8:	d10c      	bne.n	4052d4 <_svfiprintf_r+0x130>
  4052ba:	7863      	ldrb	r3, [r4, #1]
  4052bc:	2b2a      	cmp	r3, #42	; 0x2a
  4052be:	d135      	bne.n	40532c <_svfiprintf_r+0x188>
  4052c0:	9b03      	ldr	r3, [sp, #12]
  4052c2:	3402      	adds	r4, #2
  4052c4:	1d1a      	adds	r2, r3, #4
  4052c6:	681b      	ldr	r3, [r3, #0]
  4052c8:	9203      	str	r2, [sp, #12]
  4052ca:	2b00      	cmp	r3, #0
  4052cc:	bfb8      	it	lt
  4052ce:	f04f 33ff 	movlt.w	r3, #4294967295
  4052d2:	9305      	str	r3, [sp, #20]
  4052d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 405394 <_svfiprintf_r+0x1f0>
  4052d8:	2203      	movs	r2, #3
  4052da:	4650      	mov	r0, sl
  4052dc:	7821      	ldrb	r1, [r4, #0]
  4052de:	f000 f9f7 	bl	4056d0 <memchr>
  4052e2:	b140      	cbz	r0, 4052f6 <_svfiprintf_r+0x152>
  4052e4:	2340      	movs	r3, #64	; 0x40
  4052e6:	eba0 000a 	sub.w	r0, r0, sl
  4052ea:	fa03 f000 	lsl.w	r0, r3, r0
  4052ee:	9b04      	ldr	r3, [sp, #16]
  4052f0:	3401      	adds	r4, #1
  4052f2:	4303      	orrs	r3, r0
  4052f4:	9304      	str	r3, [sp, #16]
  4052f6:	f814 1b01 	ldrb.w	r1, [r4], #1
  4052fa:	2206      	movs	r2, #6
  4052fc:	4826      	ldr	r0, [pc, #152]	; (405398 <_svfiprintf_r+0x1f4>)
  4052fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405302:	f000 f9e5 	bl	4056d0 <memchr>
  405306:	2800      	cmp	r0, #0
  405308:	d038      	beq.n	40537c <_svfiprintf_r+0x1d8>
  40530a:	4b24      	ldr	r3, [pc, #144]	; (40539c <_svfiprintf_r+0x1f8>)
  40530c:	bb1b      	cbnz	r3, 405356 <_svfiprintf_r+0x1b2>
  40530e:	9b03      	ldr	r3, [sp, #12]
  405310:	3307      	adds	r3, #7
  405312:	f023 0307 	bic.w	r3, r3, #7
  405316:	3308      	adds	r3, #8
  405318:	9303      	str	r3, [sp, #12]
  40531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40531c:	4433      	add	r3, r6
  40531e:	9309      	str	r3, [sp, #36]	; 0x24
  405320:	e767      	b.n	4051f2 <_svfiprintf_r+0x4e>
  405322:	460c      	mov	r4, r1
  405324:	2001      	movs	r0, #1
  405326:	fb0c 3202 	mla	r2, ip, r2, r3
  40532a:	e7a5      	b.n	405278 <_svfiprintf_r+0xd4>
  40532c:	2300      	movs	r3, #0
  40532e:	f04f 0c0a 	mov.w	ip, #10
  405332:	4619      	mov	r1, r3
  405334:	3401      	adds	r4, #1
  405336:	9305      	str	r3, [sp, #20]
  405338:	4620      	mov	r0, r4
  40533a:	f810 2b01 	ldrb.w	r2, [r0], #1
  40533e:	3a30      	subs	r2, #48	; 0x30
  405340:	2a09      	cmp	r2, #9
  405342:	d903      	bls.n	40534c <_svfiprintf_r+0x1a8>
  405344:	2b00      	cmp	r3, #0
  405346:	d0c5      	beq.n	4052d4 <_svfiprintf_r+0x130>
  405348:	9105      	str	r1, [sp, #20]
  40534a:	e7c3      	b.n	4052d4 <_svfiprintf_r+0x130>
  40534c:	4604      	mov	r4, r0
  40534e:	2301      	movs	r3, #1
  405350:	fb0c 2101 	mla	r1, ip, r1, r2
  405354:	e7f0      	b.n	405338 <_svfiprintf_r+0x194>
  405356:	ab03      	add	r3, sp, #12
  405358:	9300      	str	r3, [sp, #0]
  40535a:	462a      	mov	r2, r5
  40535c:	4638      	mov	r0, r7
  40535e:	4b10      	ldr	r3, [pc, #64]	; (4053a0 <_svfiprintf_r+0x1fc>)
  405360:	a904      	add	r1, sp, #16
  405362:	f3af 8000 	nop.w
  405366:	1c42      	adds	r2, r0, #1
  405368:	4606      	mov	r6, r0
  40536a:	d1d6      	bne.n	40531a <_svfiprintf_r+0x176>
  40536c:	89ab      	ldrh	r3, [r5, #12]
  40536e:	065b      	lsls	r3, r3, #25
  405370:	f53f af2c 	bmi.w	4051cc <_svfiprintf_r+0x28>
  405374:	9809      	ldr	r0, [sp, #36]	; 0x24
  405376:	b01d      	add	sp, #116	; 0x74
  405378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40537c:	ab03      	add	r3, sp, #12
  40537e:	9300      	str	r3, [sp, #0]
  405380:	462a      	mov	r2, r5
  405382:	4638      	mov	r0, r7
  405384:	4b06      	ldr	r3, [pc, #24]	; (4053a0 <_svfiprintf_r+0x1fc>)
  405386:	a904      	add	r1, sp, #16
  405388:	f000 f87c 	bl	405484 <_printf_i>
  40538c:	e7eb      	b.n	405366 <_svfiprintf_r+0x1c2>
  40538e:	bf00      	nop
  405390:	004059c4 	.word	0x004059c4
  405394:	004059ca 	.word	0x004059ca
  405398:	004059ce 	.word	0x004059ce
  40539c:	00000000 	.word	0x00000000
  4053a0:	004050ef 	.word	0x004050ef

004053a4 <_printf_common>:
  4053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4053a8:	4616      	mov	r6, r2
  4053aa:	4699      	mov	r9, r3
  4053ac:	688a      	ldr	r2, [r1, #8]
  4053ae:	690b      	ldr	r3, [r1, #16]
  4053b0:	4607      	mov	r7, r0
  4053b2:	4293      	cmp	r3, r2
  4053b4:	bfb8      	it	lt
  4053b6:	4613      	movlt	r3, r2
  4053b8:	6033      	str	r3, [r6, #0]
  4053ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4053be:	460c      	mov	r4, r1
  4053c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4053c4:	b10a      	cbz	r2, 4053ca <_printf_common+0x26>
  4053c6:	3301      	adds	r3, #1
  4053c8:	6033      	str	r3, [r6, #0]
  4053ca:	6823      	ldr	r3, [r4, #0]
  4053cc:	0699      	lsls	r1, r3, #26
  4053ce:	bf42      	ittt	mi
  4053d0:	6833      	ldrmi	r3, [r6, #0]
  4053d2:	3302      	addmi	r3, #2
  4053d4:	6033      	strmi	r3, [r6, #0]
  4053d6:	6825      	ldr	r5, [r4, #0]
  4053d8:	f015 0506 	ands.w	r5, r5, #6
  4053dc:	d106      	bne.n	4053ec <_printf_common+0x48>
  4053de:	f104 0a19 	add.w	sl, r4, #25
  4053e2:	68e3      	ldr	r3, [r4, #12]
  4053e4:	6832      	ldr	r2, [r6, #0]
  4053e6:	1a9b      	subs	r3, r3, r2
  4053e8:	42ab      	cmp	r3, r5
  4053ea:	dc28      	bgt.n	40543e <_printf_common+0x9a>
  4053ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
  4053f0:	1e13      	subs	r3, r2, #0
  4053f2:	6822      	ldr	r2, [r4, #0]
  4053f4:	bf18      	it	ne
  4053f6:	2301      	movne	r3, #1
  4053f8:	0692      	lsls	r2, r2, #26
  4053fa:	d42d      	bmi.n	405458 <_printf_common+0xb4>
  4053fc:	4649      	mov	r1, r9
  4053fe:	4638      	mov	r0, r7
  405400:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405404:	47c0      	blx	r8
  405406:	3001      	adds	r0, #1
  405408:	d020      	beq.n	40544c <_printf_common+0xa8>
  40540a:	6823      	ldr	r3, [r4, #0]
  40540c:	68e5      	ldr	r5, [r4, #12]
  40540e:	f003 0306 	and.w	r3, r3, #6
  405412:	2b04      	cmp	r3, #4
  405414:	bf18      	it	ne
  405416:	2500      	movne	r5, #0
  405418:	6832      	ldr	r2, [r6, #0]
  40541a:	f04f 0600 	mov.w	r6, #0
  40541e:	68a3      	ldr	r3, [r4, #8]
  405420:	bf08      	it	eq
  405422:	1aad      	subeq	r5, r5, r2
  405424:	6922      	ldr	r2, [r4, #16]
  405426:	bf08      	it	eq
  405428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  40542c:	4293      	cmp	r3, r2
  40542e:	bfc4      	itt	gt
  405430:	1a9b      	subgt	r3, r3, r2
  405432:	18ed      	addgt	r5, r5, r3
  405434:	341a      	adds	r4, #26
  405436:	42b5      	cmp	r5, r6
  405438:	d11a      	bne.n	405470 <_printf_common+0xcc>
  40543a:	2000      	movs	r0, #0
  40543c:	e008      	b.n	405450 <_printf_common+0xac>
  40543e:	2301      	movs	r3, #1
  405440:	4652      	mov	r2, sl
  405442:	4649      	mov	r1, r9
  405444:	4638      	mov	r0, r7
  405446:	47c0      	blx	r8
  405448:	3001      	adds	r0, #1
  40544a:	d103      	bne.n	405454 <_printf_common+0xb0>
  40544c:	f04f 30ff 	mov.w	r0, #4294967295
  405450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405454:	3501      	adds	r5, #1
  405456:	e7c4      	b.n	4053e2 <_printf_common+0x3e>
  405458:	2030      	movs	r0, #48	; 0x30
  40545a:	18e1      	adds	r1, r4, r3
  40545c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  405460:	1c5a      	adds	r2, r3, #1
  405462:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  405466:	4422      	add	r2, r4
  405468:	3302      	adds	r3, #2
  40546a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  40546e:	e7c5      	b.n	4053fc <_printf_common+0x58>
  405470:	2301      	movs	r3, #1
  405472:	4622      	mov	r2, r4
  405474:	4649      	mov	r1, r9
  405476:	4638      	mov	r0, r7
  405478:	47c0      	blx	r8
  40547a:	3001      	adds	r0, #1
  40547c:	d0e6      	beq.n	40544c <_printf_common+0xa8>
  40547e:	3601      	adds	r6, #1
  405480:	e7d9      	b.n	405436 <_printf_common+0x92>
  405482:	0000      	movs	r0, r0

00405484 <_printf_i>:
  405484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  405488:	7e0f      	ldrb	r7, [r1, #24]
  40548a:	4691      	mov	r9, r2
  40548c:	2f78      	cmp	r7, #120	; 0x78
  40548e:	4680      	mov	r8, r0
  405490:	460c      	mov	r4, r1
  405492:	469a      	mov	sl, r3
  405494:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  405496:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40549a:	d807      	bhi.n	4054ac <_printf_i+0x28>
  40549c:	2f62      	cmp	r7, #98	; 0x62
  40549e:	d80a      	bhi.n	4054b6 <_printf_i+0x32>
  4054a0:	2f00      	cmp	r7, #0
  4054a2:	f000 80d9 	beq.w	405658 <_printf_i+0x1d4>
  4054a6:	2f58      	cmp	r7, #88	; 0x58
  4054a8:	f000 80a4 	beq.w	4055f4 <_printf_i+0x170>
  4054ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4054b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  4054b4:	e03a      	b.n	40552c <_printf_i+0xa8>
  4054b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
  4054ba:	2b15      	cmp	r3, #21
  4054bc:	d8f6      	bhi.n	4054ac <_printf_i+0x28>
  4054be:	a101      	add	r1, pc, #4	; (adr r1, 4054c4 <_printf_i+0x40>)
  4054c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  4054c4:	0040551d 	.word	0x0040551d
  4054c8:	00405531 	.word	0x00405531
  4054cc:	004054ad 	.word	0x004054ad
  4054d0:	004054ad 	.word	0x004054ad
  4054d4:	004054ad 	.word	0x004054ad
  4054d8:	004054ad 	.word	0x004054ad
  4054dc:	00405531 	.word	0x00405531
  4054e0:	004054ad 	.word	0x004054ad
  4054e4:	004054ad 	.word	0x004054ad
  4054e8:	004054ad 	.word	0x004054ad
  4054ec:	004054ad 	.word	0x004054ad
  4054f0:	0040563f 	.word	0x0040563f
  4054f4:	00405561 	.word	0x00405561
  4054f8:	00405621 	.word	0x00405621
  4054fc:	004054ad 	.word	0x004054ad
  405500:	004054ad 	.word	0x004054ad
  405504:	00405661 	.word	0x00405661
  405508:	004054ad 	.word	0x004054ad
  40550c:	00405561 	.word	0x00405561
  405510:	004054ad 	.word	0x004054ad
  405514:	004054ad 	.word	0x004054ad
  405518:	00405629 	.word	0x00405629
  40551c:	682b      	ldr	r3, [r5, #0]
  40551e:	1d1a      	adds	r2, r3, #4
  405520:	681b      	ldr	r3, [r3, #0]
  405522:	602a      	str	r2, [r5, #0]
  405524:	f104 0542 	add.w	r5, r4, #66	; 0x42
  405528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40552c:	2301      	movs	r3, #1
  40552e:	e0a4      	b.n	40567a <_printf_i+0x1f6>
  405530:	6820      	ldr	r0, [r4, #0]
  405532:	6829      	ldr	r1, [r5, #0]
  405534:	0606      	lsls	r6, r0, #24
  405536:	f101 0304 	add.w	r3, r1, #4
  40553a:	d50a      	bpl.n	405552 <_printf_i+0xce>
  40553c:	680e      	ldr	r6, [r1, #0]
  40553e:	602b      	str	r3, [r5, #0]
  405540:	2e00      	cmp	r6, #0
  405542:	da03      	bge.n	40554c <_printf_i+0xc8>
  405544:	232d      	movs	r3, #45	; 0x2d
  405546:	4276      	negs	r6, r6
  405548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40554c:	230a      	movs	r3, #10
  40554e:	485e      	ldr	r0, [pc, #376]	; (4056c8 <_printf_i+0x244>)
  405550:	e019      	b.n	405586 <_printf_i+0x102>
  405552:	680e      	ldr	r6, [r1, #0]
  405554:	f010 0f40 	tst.w	r0, #64	; 0x40
  405558:	602b      	str	r3, [r5, #0]
  40555a:	bf18      	it	ne
  40555c:	b236      	sxthne	r6, r6
  40555e:	e7ef      	b.n	405540 <_printf_i+0xbc>
  405560:	682b      	ldr	r3, [r5, #0]
  405562:	6820      	ldr	r0, [r4, #0]
  405564:	1d19      	adds	r1, r3, #4
  405566:	6029      	str	r1, [r5, #0]
  405568:	0601      	lsls	r1, r0, #24
  40556a:	d501      	bpl.n	405570 <_printf_i+0xec>
  40556c:	681e      	ldr	r6, [r3, #0]
  40556e:	e002      	b.n	405576 <_printf_i+0xf2>
  405570:	0646      	lsls	r6, r0, #25
  405572:	d5fb      	bpl.n	40556c <_printf_i+0xe8>
  405574:	881e      	ldrh	r6, [r3, #0]
  405576:	2f6f      	cmp	r7, #111	; 0x6f
  405578:	bf0c      	ite	eq
  40557a:	2308      	moveq	r3, #8
  40557c:	230a      	movne	r3, #10
  40557e:	4852      	ldr	r0, [pc, #328]	; (4056c8 <_printf_i+0x244>)
  405580:	2100      	movs	r1, #0
  405582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
  405586:	6865      	ldr	r5, [r4, #4]
  405588:	2d00      	cmp	r5, #0
  40558a:	bfa8      	it	ge
  40558c:	6821      	ldrge	r1, [r4, #0]
  40558e:	60a5      	str	r5, [r4, #8]
  405590:	bfa4      	itt	ge
  405592:	f021 0104 	bicge.w	r1, r1, #4
  405596:	6021      	strge	r1, [r4, #0]
  405598:	b90e      	cbnz	r6, 40559e <_printf_i+0x11a>
  40559a:	2d00      	cmp	r5, #0
  40559c:	d04d      	beq.n	40563a <_printf_i+0x1b6>
  40559e:	4615      	mov	r5, r2
  4055a0:	fbb6 f1f3 	udiv	r1, r6, r3
  4055a4:	fb03 6711 	mls	r7, r3, r1, r6
  4055a8:	5dc7      	ldrb	r7, [r0, r7]
  4055aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
  4055ae:	4637      	mov	r7, r6
  4055b0:	42bb      	cmp	r3, r7
  4055b2:	460e      	mov	r6, r1
  4055b4:	d9f4      	bls.n	4055a0 <_printf_i+0x11c>
  4055b6:	2b08      	cmp	r3, #8
  4055b8:	d10b      	bne.n	4055d2 <_printf_i+0x14e>
  4055ba:	6823      	ldr	r3, [r4, #0]
  4055bc:	07de      	lsls	r6, r3, #31
  4055be:	d508      	bpl.n	4055d2 <_printf_i+0x14e>
  4055c0:	6923      	ldr	r3, [r4, #16]
  4055c2:	6861      	ldr	r1, [r4, #4]
  4055c4:	4299      	cmp	r1, r3
  4055c6:	bfde      	ittt	le
  4055c8:	2330      	movle	r3, #48	; 0x30
  4055ca:	f805 3c01 	strble.w	r3, [r5, #-1]
  4055ce:	f105 35ff 	addle.w	r5, r5, #4294967295
  4055d2:	1b52      	subs	r2, r2, r5
  4055d4:	6122      	str	r2, [r4, #16]
  4055d6:	464b      	mov	r3, r9
  4055d8:	4621      	mov	r1, r4
  4055da:	4640      	mov	r0, r8
  4055dc:	f8cd a000 	str.w	sl, [sp]
  4055e0:	aa03      	add	r2, sp, #12
  4055e2:	f7ff fedf 	bl	4053a4 <_printf_common>
  4055e6:	3001      	adds	r0, #1
  4055e8:	d14c      	bne.n	405684 <_printf_i+0x200>
  4055ea:	f04f 30ff 	mov.w	r0, #4294967295
  4055ee:	b004      	add	sp, #16
  4055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055f4:	4834      	ldr	r0, [pc, #208]	; (4056c8 <_printf_i+0x244>)
  4055f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
  4055fa:	6829      	ldr	r1, [r5, #0]
  4055fc:	6823      	ldr	r3, [r4, #0]
  4055fe:	f851 6b04 	ldr.w	r6, [r1], #4
  405602:	6029      	str	r1, [r5, #0]
  405604:	061d      	lsls	r5, r3, #24
  405606:	d514      	bpl.n	405632 <_printf_i+0x1ae>
  405608:	07df      	lsls	r7, r3, #31
  40560a:	bf44      	itt	mi
  40560c:	f043 0320 	orrmi.w	r3, r3, #32
  405610:	6023      	strmi	r3, [r4, #0]
  405612:	b91e      	cbnz	r6, 40561c <_printf_i+0x198>
  405614:	6823      	ldr	r3, [r4, #0]
  405616:	f023 0320 	bic.w	r3, r3, #32
  40561a:	6023      	str	r3, [r4, #0]
  40561c:	2310      	movs	r3, #16
  40561e:	e7af      	b.n	405580 <_printf_i+0xfc>
  405620:	6823      	ldr	r3, [r4, #0]
  405622:	f043 0320 	orr.w	r3, r3, #32
  405626:	6023      	str	r3, [r4, #0]
  405628:	2378      	movs	r3, #120	; 0x78
  40562a:	4828      	ldr	r0, [pc, #160]	; (4056cc <_printf_i+0x248>)
  40562c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  405630:	e7e3      	b.n	4055fa <_printf_i+0x176>
  405632:	0659      	lsls	r1, r3, #25
  405634:	bf48      	it	mi
  405636:	b2b6      	uxthmi	r6, r6
  405638:	e7e6      	b.n	405608 <_printf_i+0x184>
  40563a:	4615      	mov	r5, r2
  40563c:	e7bb      	b.n	4055b6 <_printf_i+0x132>
  40563e:	682b      	ldr	r3, [r5, #0]
  405640:	6826      	ldr	r6, [r4, #0]
  405642:	1d18      	adds	r0, r3, #4
  405644:	6961      	ldr	r1, [r4, #20]
  405646:	6028      	str	r0, [r5, #0]
  405648:	0635      	lsls	r5, r6, #24
  40564a:	681b      	ldr	r3, [r3, #0]
  40564c:	d501      	bpl.n	405652 <_printf_i+0x1ce>
  40564e:	6019      	str	r1, [r3, #0]
  405650:	e002      	b.n	405658 <_printf_i+0x1d4>
  405652:	0670      	lsls	r0, r6, #25
  405654:	d5fb      	bpl.n	40564e <_printf_i+0x1ca>
  405656:	8019      	strh	r1, [r3, #0]
  405658:	2300      	movs	r3, #0
  40565a:	4615      	mov	r5, r2
  40565c:	6123      	str	r3, [r4, #16]
  40565e:	e7ba      	b.n	4055d6 <_printf_i+0x152>
  405660:	682b      	ldr	r3, [r5, #0]
  405662:	2100      	movs	r1, #0
  405664:	1d1a      	adds	r2, r3, #4
  405666:	602a      	str	r2, [r5, #0]
  405668:	681d      	ldr	r5, [r3, #0]
  40566a:	6862      	ldr	r2, [r4, #4]
  40566c:	4628      	mov	r0, r5
  40566e:	f000 f82f 	bl	4056d0 <memchr>
  405672:	b108      	cbz	r0, 405678 <_printf_i+0x1f4>
  405674:	1b40      	subs	r0, r0, r5
  405676:	6060      	str	r0, [r4, #4]
  405678:	6863      	ldr	r3, [r4, #4]
  40567a:	6123      	str	r3, [r4, #16]
  40567c:	2300      	movs	r3, #0
  40567e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  405682:	e7a8      	b.n	4055d6 <_printf_i+0x152>
  405684:	462a      	mov	r2, r5
  405686:	4649      	mov	r1, r9
  405688:	4640      	mov	r0, r8
  40568a:	6923      	ldr	r3, [r4, #16]
  40568c:	47d0      	blx	sl
  40568e:	3001      	adds	r0, #1
  405690:	d0ab      	beq.n	4055ea <_printf_i+0x166>
  405692:	6823      	ldr	r3, [r4, #0]
  405694:	079b      	lsls	r3, r3, #30
  405696:	d413      	bmi.n	4056c0 <_printf_i+0x23c>
  405698:	68e0      	ldr	r0, [r4, #12]
  40569a:	9b03      	ldr	r3, [sp, #12]
  40569c:	4298      	cmp	r0, r3
  40569e:	bfb8      	it	lt
  4056a0:	4618      	movlt	r0, r3
  4056a2:	e7a4      	b.n	4055ee <_printf_i+0x16a>
  4056a4:	2301      	movs	r3, #1
  4056a6:	4632      	mov	r2, r6
  4056a8:	4649      	mov	r1, r9
  4056aa:	4640      	mov	r0, r8
  4056ac:	47d0      	blx	sl
  4056ae:	3001      	adds	r0, #1
  4056b0:	d09b      	beq.n	4055ea <_printf_i+0x166>
  4056b2:	3501      	adds	r5, #1
  4056b4:	68e3      	ldr	r3, [r4, #12]
  4056b6:	9903      	ldr	r1, [sp, #12]
  4056b8:	1a5b      	subs	r3, r3, r1
  4056ba:	42ab      	cmp	r3, r5
  4056bc:	dcf2      	bgt.n	4056a4 <_printf_i+0x220>
  4056be:	e7eb      	b.n	405698 <_printf_i+0x214>
  4056c0:	2500      	movs	r5, #0
  4056c2:	f104 0619 	add.w	r6, r4, #25
  4056c6:	e7f5      	b.n	4056b4 <_printf_i+0x230>
  4056c8:	004059d5 	.word	0x004059d5
  4056cc:	004059e6 	.word	0x004059e6

004056d0 <memchr>:
  4056d0:	4603      	mov	r3, r0
  4056d2:	b510      	push	{r4, lr}
  4056d4:	b2c9      	uxtb	r1, r1
  4056d6:	4402      	add	r2, r0
  4056d8:	4293      	cmp	r3, r2
  4056da:	4618      	mov	r0, r3
  4056dc:	d101      	bne.n	4056e2 <memchr+0x12>
  4056de:	2000      	movs	r0, #0
  4056e0:	e003      	b.n	4056ea <memchr+0x1a>
  4056e2:	7804      	ldrb	r4, [r0, #0]
  4056e4:	3301      	adds	r3, #1
  4056e6:	428c      	cmp	r4, r1
  4056e8:	d1f6      	bne.n	4056d8 <memchr+0x8>
  4056ea:	bd10      	pop	{r4, pc}

004056ec <memmove>:
  4056ec:	4288      	cmp	r0, r1
  4056ee:	b510      	push	{r4, lr}
  4056f0:	eb01 0402 	add.w	r4, r1, r2
  4056f4:	d902      	bls.n	4056fc <memmove+0x10>
  4056f6:	4284      	cmp	r4, r0
  4056f8:	4623      	mov	r3, r4
  4056fa:	d807      	bhi.n	40570c <memmove+0x20>
  4056fc:	1e43      	subs	r3, r0, #1
  4056fe:	42a1      	cmp	r1, r4
  405700:	d008      	beq.n	405714 <memmove+0x28>
  405702:	f811 2b01 	ldrb.w	r2, [r1], #1
  405706:	f803 2f01 	strb.w	r2, [r3, #1]!
  40570a:	e7f8      	b.n	4056fe <memmove+0x12>
  40570c:	4601      	mov	r1, r0
  40570e:	4402      	add	r2, r0
  405710:	428a      	cmp	r2, r1
  405712:	d100      	bne.n	405716 <memmove+0x2a>
  405714:	bd10      	pop	{r4, pc}
  405716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40571a:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40571e:	e7f7      	b.n	405710 <memmove+0x24>

00405720 <_free_r>:
  405720:	b538      	push	{r3, r4, r5, lr}
  405722:	4605      	mov	r5, r0
  405724:	2900      	cmp	r1, #0
  405726:	d040      	beq.n	4057aa <_free_r+0x8a>
  405728:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40572c:	1f0c      	subs	r4, r1, #4
  40572e:	2b00      	cmp	r3, #0
  405730:	bfb8      	it	lt
  405732:	18e4      	addlt	r4, r4, r3
  405734:	f000 f910 	bl	405958 <__malloc_lock>
  405738:	4a1c      	ldr	r2, [pc, #112]	; (4057ac <_free_r+0x8c>)
  40573a:	6813      	ldr	r3, [r2, #0]
  40573c:	b933      	cbnz	r3, 40574c <_free_r+0x2c>
  40573e:	6063      	str	r3, [r4, #4]
  405740:	6014      	str	r4, [r2, #0]
  405742:	4628      	mov	r0, r5
  405744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405748:	f000 b90c 	b.w	405964 <__malloc_unlock>
  40574c:	42a3      	cmp	r3, r4
  40574e:	d908      	bls.n	405762 <_free_r+0x42>
  405750:	6820      	ldr	r0, [r4, #0]
  405752:	1821      	adds	r1, r4, r0
  405754:	428b      	cmp	r3, r1
  405756:	bf01      	itttt	eq
  405758:	6819      	ldreq	r1, [r3, #0]
  40575a:	685b      	ldreq	r3, [r3, #4]
  40575c:	1809      	addeq	r1, r1, r0
  40575e:	6021      	streq	r1, [r4, #0]
  405760:	e7ed      	b.n	40573e <_free_r+0x1e>
  405762:	461a      	mov	r2, r3
  405764:	685b      	ldr	r3, [r3, #4]
  405766:	b10b      	cbz	r3, 40576c <_free_r+0x4c>
  405768:	42a3      	cmp	r3, r4
  40576a:	d9fa      	bls.n	405762 <_free_r+0x42>
  40576c:	6811      	ldr	r1, [r2, #0]
  40576e:	1850      	adds	r0, r2, r1
  405770:	42a0      	cmp	r0, r4
  405772:	d10b      	bne.n	40578c <_free_r+0x6c>
  405774:	6820      	ldr	r0, [r4, #0]
  405776:	4401      	add	r1, r0
  405778:	1850      	adds	r0, r2, r1
  40577a:	4283      	cmp	r3, r0
  40577c:	6011      	str	r1, [r2, #0]
  40577e:	d1e0      	bne.n	405742 <_free_r+0x22>
  405780:	6818      	ldr	r0, [r3, #0]
  405782:	685b      	ldr	r3, [r3, #4]
  405784:	4401      	add	r1, r0
  405786:	6011      	str	r1, [r2, #0]
  405788:	6053      	str	r3, [r2, #4]
  40578a:	e7da      	b.n	405742 <_free_r+0x22>
  40578c:	d902      	bls.n	405794 <_free_r+0x74>
  40578e:	230c      	movs	r3, #12
  405790:	602b      	str	r3, [r5, #0]
  405792:	e7d6      	b.n	405742 <_free_r+0x22>
  405794:	6820      	ldr	r0, [r4, #0]
  405796:	1821      	adds	r1, r4, r0
  405798:	428b      	cmp	r3, r1
  40579a:	bf01      	itttt	eq
  40579c:	6819      	ldreq	r1, [r3, #0]
  40579e:	685b      	ldreq	r3, [r3, #4]
  4057a0:	1809      	addeq	r1, r1, r0
  4057a2:	6021      	streq	r1, [r4, #0]
  4057a4:	6063      	str	r3, [r4, #4]
  4057a6:	6054      	str	r4, [r2, #4]
  4057a8:	e7cb      	b.n	405742 <_free_r+0x22>
  4057aa:	bd38      	pop	{r3, r4, r5, pc}
  4057ac:	20019848 	.word	0x20019848

004057b0 <sbrk_aligned>:
  4057b0:	b570      	push	{r4, r5, r6, lr}
  4057b2:	4e0e      	ldr	r6, [pc, #56]	; (4057ec <sbrk_aligned+0x3c>)
  4057b4:	460c      	mov	r4, r1
  4057b6:	6831      	ldr	r1, [r6, #0]
  4057b8:	4605      	mov	r5, r0
  4057ba:	b911      	cbnz	r1, 4057c2 <sbrk_aligned+0x12>
  4057bc:	f000 f8bc 	bl	405938 <_sbrk_r>
  4057c0:	6030      	str	r0, [r6, #0]
  4057c2:	4621      	mov	r1, r4
  4057c4:	4628      	mov	r0, r5
  4057c6:	f000 f8b7 	bl	405938 <_sbrk_r>
  4057ca:	1c43      	adds	r3, r0, #1
  4057cc:	d00a      	beq.n	4057e4 <sbrk_aligned+0x34>
  4057ce:	1cc4      	adds	r4, r0, #3
  4057d0:	f024 0403 	bic.w	r4, r4, #3
  4057d4:	42a0      	cmp	r0, r4
  4057d6:	d007      	beq.n	4057e8 <sbrk_aligned+0x38>
  4057d8:	1a21      	subs	r1, r4, r0
  4057da:	4628      	mov	r0, r5
  4057dc:	f000 f8ac 	bl	405938 <_sbrk_r>
  4057e0:	3001      	adds	r0, #1
  4057e2:	d101      	bne.n	4057e8 <sbrk_aligned+0x38>
  4057e4:	f04f 34ff 	mov.w	r4, #4294967295
  4057e8:	4620      	mov	r0, r4
  4057ea:	bd70      	pop	{r4, r5, r6, pc}
  4057ec:	2001984c 	.word	0x2001984c

004057f0 <_malloc_r>:
  4057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4057f4:	1ccd      	adds	r5, r1, #3
  4057f6:	f025 0503 	bic.w	r5, r5, #3
  4057fa:	3508      	adds	r5, #8
  4057fc:	2d0c      	cmp	r5, #12
  4057fe:	bf38      	it	cc
  405800:	250c      	movcc	r5, #12
  405802:	2d00      	cmp	r5, #0
  405804:	4607      	mov	r7, r0
  405806:	db01      	blt.n	40580c <_malloc_r+0x1c>
  405808:	42a9      	cmp	r1, r5
  40580a:	d905      	bls.n	405818 <_malloc_r+0x28>
  40580c:	230c      	movs	r3, #12
  40580e:	2600      	movs	r6, #0
  405810:	603b      	str	r3, [r7, #0]
  405812:	4630      	mov	r0, r6
  405814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405818:	4e2e      	ldr	r6, [pc, #184]	; (4058d4 <_malloc_r+0xe4>)
  40581a:	f000 f89d 	bl	405958 <__malloc_lock>
  40581e:	6833      	ldr	r3, [r6, #0]
  405820:	461c      	mov	r4, r3
  405822:	bb34      	cbnz	r4, 405872 <_malloc_r+0x82>
  405824:	4629      	mov	r1, r5
  405826:	4638      	mov	r0, r7
  405828:	f7ff ffc2 	bl	4057b0 <sbrk_aligned>
  40582c:	1c43      	adds	r3, r0, #1
  40582e:	4604      	mov	r4, r0
  405830:	d14d      	bne.n	4058ce <_malloc_r+0xde>
  405832:	6834      	ldr	r4, [r6, #0]
  405834:	4626      	mov	r6, r4
  405836:	2e00      	cmp	r6, #0
  405838:	d140      	bne.n	4058bc <_malloc_r+0xcc>
  40583a:	6823      	ldr	r3, [r4, #0]
  40583c:	4631      	mov	r1, r6
  40583e:	4638      	mov	r0, r7
  405840:	eb04 0803 	add.w	r8, r4, r3
  405844:	f000 f878 	bl	405938 <_sbrk_r>
  405848:	4580      	cmp	r8, r0
  40584a:	d13a      	bne.n	4058c2 <_malloc_r+0xd2>
  40584c:	6821      	ldr	r1, [r4, #0]
  40584e:	3503      	adds	r5, #3
  405850:	1a6d      	subs	r5, r5, r1
  405852:	f025 0503 	bic.w	r5, r5, #3
  405856:	3508      	adds	r5, #8
  405858:	2d0c      	cmp	r5, #12
  40585a:	bf38      	it	cc
  40585c:	250c      	movcc	r5, #12
  40585e:	4638      	mov	r0, r7
  405860:	4629      	mov	r1, r5
  405862:	f7ff ffa5 	bl	4057b0 <sbrk_aligned>
  405866:	3001      	adds	r0, #1
  405868:	d02b      	beq.n	4058c2 <_malloc_r+0xd2>
  40586a:	6823      	ldr	r3, [r4, #0]
  40586c:	442b      	add	r3, r5
  40586e:	6023      	str	r3, [r4, #0]
  405870:	e00e      	b.n	405890 <_malloc_r+0xa0>
  405872:	6822      	ldr	r2, [r4, #0]
  405874:	1b52      	subs	r2, r2, r5
  405876:	d41e      	bmi.n	4058b6 <_malloc_r+0xc6>
  405878:	2a0b      	cmp	r2, #11
  40587a:	d916      	bls.n	4058aa <_malloc_r+0xba>
  40587c:	1961      	adds	r1, r4, r5
  40587e:	42a3      	cmp	r3, r4
  405880:	6025      	str	r5, [r4, #0]
  405882:	bf18      	it	ne
  405884:	6059      	strne	r1, [r3, #4]
  405886:	6863      	ldr	r3, [r4, #4]
  405888:	bf08      	it	eq
  40588a:	6031      	streq	r1, [r6, #0]
  40588c:	5162      	str	r2, [r4, r5]
  40588e:	604b      	str	r3, [r1, #4]
  405890:	4638      	mov	r0, r7
  405892:	f104 060b 	add.w	r6, r4, #11
  405896:	f000 f865 	bl	405964 <__malloc_unlock>
  40589a:	f026 0607 	bic.w	r6, r6, #7
  40589e:	1d23      	adds	r3, r4, #4
  4058a0:	1af2      	subs	r2, r6, r3
  4058a2:	d0b6      	beq.n	405812 <_malloc_r+0x22>
  4058a4:	1b9b      	subs	r3, r3, r6
  4058a6:	50a3      	str	r3, [r4, r2]
  4058a8:	e7b3      	b.n	405812 <_malloc_r+0x22>
  4058aa:	6862      	ldr	r2, [r4, #4]
  4058ac:	42a3      	cmp	r3, r4
  4058ae:	bf0c      	ite	eq
  4058b0:	6032      	streq	r2, [r6, #0]
  4058b2:	605a      	strne	r2, [r3, #4]
  4058b4:	e7ec      	b.n	405890 <_malloc_r+0xa0>
  4058b6:	4623      	mov	r3, r4
  4058b8:	6864      	ldr	r4, [r4, #4]
  4058ba:	e7b2      	b.n	405822 <_malloc_r+0x32>
  4058bc:	4634      	mov	r4, r6
  4058be:	6876      	ldr	r6, [r6, #4]
  4058c0:	e7b9      	b.n	405836 <_malloc_r+0x46>
  4058c2:	230c      	movs	r3, #12
  4058c4:	4638      	mov	r0, r7
  4058c6:	603b      	str	r3, [r7, #0]
  4058c8:	f000 f84c 	bl	405964 <__malloc_unlock>
  4058cc:	e7a1      	b.n	405812 <_malloc_r+0x22>
  4058ce:	6025      	str	r5, [r4, #0]
  4058d0:	e7de      	b.n	405890 <_malloc_r+0xa0>
  4058d2:	bf00      	nop
  4058d4:	20019848 	.word	0x20019848

004058d8 <_realloc_r>:
  4058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058dc:	4680      	mov	r8, r0
  4058de:	4614      	mov	r4, r2
  4058e0:	460e      	mov	r6, r1
  4058e2:	b921      	cbnz	r1, 4058ee <_realloc_r+0x16>
  4058e4:	4611      	mov	r1, r2
  4058e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4058ea:	f7ff bf81 	b.w	4057f0 <_malloc_r>
  4058ee:	b92a      	cbnz	r2, 4058fc <_realloc_r+0x24>
  4058f0:	f7ff ff16 	bl	405720 <_free_r>
  4058f4:	4625      	mov	r5, r4
  4058f6:	4628      	mov	r0, r5
  4058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4058fc:	f000 f838 	bl	405970 <_malloc_usable_size_r>
  405900:	4284      	cmp	r4, r0
  405902:	4607      	mov	r7, r0
  405904:	d802      	bhi.n	40590c <_realloc_r+0x34>
  405906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
  40590a:	d812      	bhi.n	405932 <_realloc_r+0x5a>
  40590c:	4621      	mov	r1, r4
  40590e:	4640      	mov	r0, r8
  405910:	f7ff ff6e 	bl	4057f0 <_malloc_r>
  405914:	4605      	mov	r5, r0
  405916:	2800      	cmp	r0, #0
  405918:	d0ed      	beq.n	4058f6 <_realloc_r+0x1e>
  40591a:	42bc      	cmp	r4, r7
  40591c:	4622      	mov	r2, r4
  40591e:	4631      	mov	r1, r6
  405920:	bf28      	it	cs
  405922:	463a      	movcs	r2, r7
  405924:	f7ff fb92 	bl	40504c <memcpy>
  405928:	4631      	mov	r1, r6
  40592a:	4640      	mov	r0, r8
  40592c:	f7ff fef8 	bl	405720 <_free_r>
  405930:	e7e1      	b.n	4058f6 <_realloc_r+0x1e>
  405932:	4635      	mov	r5, r6
  405934:	e7df      	b.n	4058f6 <_realloc_r+0x1e>
  405936:	0000      	movs	r0, r0

00405938 <_sbrk_r>:
  405938:	b538      	push	{r3, r4, r5, lr}
  40593a:	2300      	movs	r3, #0
  40593c:	4d05      	ldr	r5, [pc, #20]	; (405954 <_sbrk_r+0x1c>)
  40593e:	4604      	mov	r4, r0
  405940:	4608      	mov	r0, r1
  405942:	602b      	str	r3, [r5, #0]
  405944:	f7fd fc3e 	bl	4031c4 <_sbrk>
  405948:	1c43      	adds	r3, r0, #1
  40594a:	d102      	bne.n	405952 <_sbrk_r+0x1a>
  40594c:	682b      	ldr	r3, [r5, #0]
  40594e:	b103      	cbz	r3, 405952 <_sbrk_r+0x1a>
  405950:	6023      	str	r3, [r4, #0]
  405952:	bd38      	pop	{r3, r4, r5, pc}
  405954:	20019850 	.word	0x20019850

00405958 <__malloc_lock>:
  405958:	4801      	ldr	r0, [pc, #4]	; (405960 <__malloc_lock+0x8>)
  40595a:	f000 b811 	b.w	405980 <__retarget_lock_acquire_recursive>
  40595e:	bf00      	nop
  405960:	20019854 	.word	0x20019854

00405964 <__malloc_unlock>:
  405964:	4801      	ldr	r0, [pc, #4]	; (40596c <__malloc_unlock+0x8>)
  405966:	f000 b80c 	b.w	405982 <__retarget_lock_release_recursive>
  40596a:	bf00      	nop
  40596c:	20019854 	.word	0x20019854

00405970 <_malloc_usable_size_r>:
  405970:	f851 3c04 	ldr.w	r3, [r1, #-4]
  405974:	1f18      	subs	r0, r3, #4
  405976:	2b00      	cmp	r3, #0
  405978:	bfbc      	itt	lt
  40597a:	580b      	ldrlt	r3, [r1, r0]
  40597c:	18c0      	addlt	r0, r0, r3
  40597e:	4770      	bx	lr

00405980 <__retarget_lock_acquire_recursive>:
  405980:	4770      	bx	lr

00405982 <__retarget_lock_release_recursive>:
  405982:	4770      	bx	lr
  405984:	78383025 	.word	0x78383025
  405988:	00000000 	.word	0x00000000

0040598c <BUILD_DATE>:
  40598c:	20677541 32203220 00323230              Aug  2 2022.

00405998 <BUILD_TIME>:
  405998:	343a3431 35313a33 00000000              14:43:15....

004059a4 <LED_DESCRIPTOR>:
  4059a4:	00000020 00000001 00000021 00000001      .......!.......
  4059b4:	00000022 00000001 00000023 00000001     ".......#.......
  4059c4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
  4059d4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
  4059e4:	31300046 35343332 39383736 64636261     F.0123456789abcd
  4059f4:	00006665                                ef..

004059f8 <_init>:
  4059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059fa:	bf00      	nop
  4059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4059fe:	bc08      	pop	{r3}
  405a00:	469e      	mov	lr, r3
  405a02:	4770      	bx	lr

00405a04 <__frame_dummy_init_array_entry>:
  405a04:	00f1 0040                                   ..@.

00405a08 <_fini>:
  405a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a0a:	bf00      	nop
  405a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405a0e:	bc08      	pop	{r3}
  405a10:	469e      	mov	lr, r3
  405a12:	4770      	bx	lr

00405a14 <__do_global_dtors_aux_fini_array_entry>:
  405a14:	00cd 0040                                   ..@.

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b530      	push	{r4, r5, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20000002:	4c20      	ldr	r4, [pc, #128]	; (20000084 <efc_perform_read_sequence+0x84>)
{
20000004:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20000006:	42a0      	cmp	r0, r4
20000008:	bf0c      	ite	eq
2000000a:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
2000000e:	f44f 0c90 	movne.w	ip, #4718592	; 0x480000
{
20000012:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	b393      	cbz	r3, 2000007c <efc_perform_read_sequence+0x7c>
20000016:	4686      	mov	lr, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20000018:	6800      	ldr	r0, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000001a:	b2c9      	uxtb	r1, r1
2000001c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20000020:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20000024:	f8ce 0000 	str.w	r0, [lr]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000028:	f8ce 1004 	str.w	r1, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000002c:	f8de 1008 	ldr.w	r1, [lr, #8]
20000030:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000032:	9801      	ldr	r0, [sp, #4]
20000034:	f010 0001 	ands.w	r0, r0, #1
20000038:	d1f8      	bne.n	2000002c <efc_perform_read_sequence+0x2c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003a:	b165      	cbz	r5, 20000056 <efc_perform_read_sequence+0x56>
2000003c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
20000040:	f1ac 0104 	sub.w	r1, ip, #4
20000044:	3b04      	subs	r3, #4
20000046:	f1a5 0c04 	sub.w	ip, r5, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004a:	f851 4f04 	ldr.w	r4, [r1, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000004e:	4561      	cmp	r1, ip
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000050:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000054:	d1f9      	bne.n	2000004a <efc_perform_read_sequence+0x4a>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000056:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000058:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000005c:	f8ce 2004 	str.w	r2, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000060:	f8de 3008 	ldr.w	r3, [lr, #8]
20000064:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000066:	9b01      	ldr	r3, [sp, #4]
20000068:	07db      	lsls	r3, r3, #31
2000006a:	d5f9      	bpl.n	20000060 <efc_perform_read_sequence+0x60>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000006c:	f8de 3000 	ldr.w	r3, [lr]
20000070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000074:	f8ce 3000 	str.w	r3, [lr]

	return EFC_RC_OK;
}
20000078:	b003      	add	sp, #12
2000007a:	bd30      	pop	{r4, r5, pc}
		return EFC_RC_INVALID;
2000007c:	2002      	movs	r0, #2
}
2000007e:	b003      	add	sp, #12
20000080:	bd30      	pop	{r4, r5, pc}
20000082:	bf00      	nop
20000084:	400e0a00 	.word	0x400e0a00

20000088 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000088:	6001      	str	r1, [r0, #0]
}
2000008a:	4770      	bx	lr

2000008c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000008c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000008e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000090:	6883      	ldr	r3, [r0, #8]
20000092:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000094:	9b01      	ldr	r3, [sp, #4]
20000096:	07db      	lsls	r3, r3, #31
20000098:	d5fa      	bpl.n	20000090 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000009a:	9801      	ldr	r0, [sp, #4]
}
2000009c:	f000 000e 	and.w	r0, r0, #14
200000a0:	b002      	add	sp, #8
200000a2:	4770      	bx	lr

200000a4 <capture_req_length>:
200000a4:	86a0 0001                                   ....

200000a8 <usb_serial_number>:
200000a8:	3030 3030 3030 3030 3030 3030 4544 4441     000000000000DEAD
200000b8:	4542 4645 0000 0000 0000 0000 0000 0000     BEEF............
200000c8:	0000 0000                                   ....

200000cc <gpio_mask_list>:
200000cc:	0004 0000 0008 0000 0000 2800 0040 0000     ...........(@...
200000dc:	002e 0000 0001 2800 0010 0000 0002 0000     .......(........
200000ec:	0000 2800 0020 0000 000b 0000 0000 2800     ...( ..........(
200000fc:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2000010c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2000011c:	0000 0000 0000 0000 0000 0000 0000 0000     ................

2000012c <max_buffer_size>:
2000012c:	86a0 0001                                   ....

20000130 <mpsse_state>:
20000130:	0000 0000 0200 0000 0000 0000 0000 0000     ................
20000140:	0000 0e00 0000 0d00 0000 0c00 0000 0b00     ................
20000150:	0000 0200 0000 0000 0000 0000 0000 0000     ................
20000160:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000170:	0000 0000                                   ....

20000174 <usart1_driver>:
20000174:	8000 4002 0000 0000 0000 0000 0000 0000     ...@............
20000184:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000194:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200001f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000204:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000214:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000224:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000234:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000244:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000254:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000264:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000274:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000284:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000294:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200002f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000304:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000314:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000324:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000334:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000344:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000354:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000364:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000374:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000384:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000394:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200003f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000404:	0000 0000 0000 0000 0001 0000 0009 0000     ................

20000414 <main_b_vendor_enable>:
20000414:	0001 0000                                   ....

20000418 <MS_BOS_PACKET>:
20000418:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
20000428:	9c4c 65d2 9e9d 8a64 009f 0300 4a06 0101     L..e..d......J..
20000438:	0000 0000                                   ....

2000043c <MS_OS_DESC>:
2000043c:	000a 0000 0000 0603 014a 0008 0002 0000     ........J.......
2000044c:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
2000045c:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
2000046c:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
2000047c:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
2000048c:	0049 0044 0073 0000 0050 007b 0030 0041     I.D.s...P.{.0.A.
2000049c:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
200004ac:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
200004bc:	002d 0032 0042 0033 0045 002d 0032 0034     -.2.B.3.E.-.2.4.
200004cc:	0036 0030 0030 0041 0043 0045 0032 0042     6.0.0.A.C.E.2.B.
200004dc:	0033 0045 007d 0000 0000 0008 0002 0001     3.E.}...........
200004ec:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
200004fc:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
2000050c:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
2000051c:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
2000052c:	0049 0044 0073 0000 0050 007b 0031 0041     I.D.s...P.{.1.A.
2000053c:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
2000054c:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
2000055c:	002d 0032 0042 0033 0045 002d 0032 0034     -.2.B.3.E.-.2.4.
2000056c:	0036 0030 0031 0041 0043 0045 0032 0042     6.0.1.A.C.E.2.B.
2000057c:	0033 0045 007d 0000 0000 0000               3.E.}.......

20000588 <udc_string_desc>:
20000588:	0300 0000 0000 0000 0000 0000 0000 0000     ................
20000598:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200005a8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200005b8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200005c8:	0000 0000                                   ....

200005cc <udc_string_desc_languageid>:
200005cc:	0304 0409                                   ....

200005d0 <udc_string_manufacturer_name>:
200005d0:	654e 4177 2045 6554 6863 6f6e 6f6c 7967     NewAE Technology
200005e0:	4920 636e 002e 0000                          Inc....

200005e8 <udc_string_product_name>:
200005e8:	6843 7069 6857 7369 6570 6572 2072 614e     ChipWhisperer Na
200005f8:	6f6e 0000                                   no..

200005fc <SystemCoreClock>:
200005fc:	0900 003d                                   ..=.

20000600 <udi_api_vendor>:
20000600:	2dcd 0040 2d89 0040 2d9d 0040 2d7d 0040     .-@..-@..-@.}-@.
20000610:	0000 0000                                   ....

20000614 <mpsse_udi_apis>:
20000614:	0600 2000 0600 2000                         ... ... 

2000061c <udc_config>:
2000061c:	06f8 2000 0628 2000 0000 0000               ... (.. ....

20000628 <udc_config_lsfs>:
20000628:	0630 2000 070c 2000                         0.. ... 

20000630 <udc_desc_fs>:
20000630:	0209 0062 0103 8000 09c8 0004 0200 ffff     ..b.............
20000640:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
20000650:	0b08 0201 0202 0001 0409 0001 0201 0102     ................
20000660:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20000670:	0124 0203 0507 0383 0040 0910 0204 0200     $.......@.......
20000680:	000a 0000 0507 0286 0040 0700 0705 4002     ........@......@
20000690:	0000 0000                                   ....

20000694 <udc_desc_fs_mpsse>:
20000694:	0209 0037 0102 8000 09c8 0004 0200 ffff     ..7.............
200006a4:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
200006b4:	0409 0001 ff02 ffff 0700 8605 4002 0000     .............@..
200006c4:	0507 0207 0040 0000 0000 0000 0000 0000     ....@...........
200006d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200006e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200006f4:	0000 0000                                   ....

200006f8 <udc_device_desc>:
200006f8:	0112 0200 0000 4000 2b3e ace0 0900 0201     .......@>+......
20000708:	0103 0000                                   ....

2000070c <udi_apis>:
2000070c:	0600 2000 071c 2000 0730 2000               ... ... 0.. 

20000718 <g_interrupt_enabled>:
20000718:	0001 0000                                   ....

2000071c <udi_api_cdc_comm>:
2000071c:	48f1 0040 4839 0040 4889 0040 484d 0040     .H@.9H@..H@.MH@.
2000072c:	0000 0000                                   ....

20000730 <udi_api_cdc_data>:
20000730:	4c35 0040 4861 0040 4849 0040 484d 0040     5L@.aH@.IH@.MH@.
20000740:	4af9 0040                                   .J@.

20000744 <_impure_ptr>:
20000744:	0748 2000                                   H.. 

20000748 <impure_data>:
20000748:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000758:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000768:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000778:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000788:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20000798:	0000 0000 0000 0000 0000 0000 0000 0000     ................
