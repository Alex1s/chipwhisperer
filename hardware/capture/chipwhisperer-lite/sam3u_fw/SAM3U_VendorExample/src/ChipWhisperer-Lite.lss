
ChipWhisperer-Lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000dc14  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008dc14  0008dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001520  20000000  0008dc1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000013b4  20001520  0008f13c  00021520  2**2
                  ALLOC
  4 .mpssemem     000000d0  20080000  20080000  00030000  2**2
                  ALLOC
  5 .stack        00003000  200800d0  200800d0  00030000  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00021520  2**0
                  CONTENTS, READONLY
  7 .comment      00000049  00000000  00000000  00021549  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023dd7  00000000  00000000  00021592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00006f49  00000000  00000000  00045369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00010e22  00000000  00000000  0004c2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001458  00000000  00000000  0005d0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005340  00000000  00000000  0005e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00021c48  00000000  00000000  0006386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002d99b  00000000  00000000  000854b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000611ac  00000000  00000000  000b2e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004bdc  00000000  00000000  00113ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 30 08 20 f9 57 08 00 35 5f 08 00 35 5f 08 00     .0. .W..5_..5_..
   80010:	35 5f 08 00 35 5f 08 00 35 5f 08 00 00 00 00 00     5_..5_..5_......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 35 5f 08 00     ............5_..
   80030:	35 5f 08 00 00 00 00 00 35 5f 08 00 35 5f 08 00     5_......5_..5_..
   80040:	35 5f 08 00 35 5f 08 00 35 5f 08 00 35 5f 08 00     5_..5_..5_..5_..
   80050:	35 5f 08 00 35 5f 08 00 35 5f 08 00 35 5f 08 00     5_..5_..5_..5_..
   80060:	35 5f 08 00 35 5f 08 00 a1 42 08 00 b1 42 08 00     5_..5_...B...B..
   80070:	35 5f 08 00 d9 2f 08 00 35 5f 08 00 35 5f 08 00     5_.../..5_..5_..
   80080:	35 5f 08 00 35 5f 08 00 35 5f 08 00 35 5f 08 00     5_..5_..5_..5_..
   80090:	35 5f 08 00 35 5f 08 00 1d 1d 08 00 35 5f 08 00     5_..5_......5_..
   800a0:	35 5f 08 00 35 5f 08 00 35 5f 08 00 35 5f 08 00     5_..5_..5_..5_..
   800b0:	35 5f 08 00 51 46 08 00 35 5f 08 00                 5_..QF..5_..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001520 	.word	0x20001520
   800d8:	00000000 	.word	0x00000000
   800dc:	0008dc1c 	.word	0x0008dc1c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20001524 	.word	0x20001524
   800f8:	0008dc1c 	.word	0x0008dc1c

000800fc <main>:
volatile uint32_t usb_checked = 0x00;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   800fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80100:	b085      	sub	sp, #20
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   80102:	2110      	movs	r1, #16
   80104:	4668      	mov	r0, sp
   80106:	4b3e      	ldr	r3, [pc, #248]	; (80200 <main+0x104>)
   80108:	4798      	blx	r3
		
	// configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   8010a:	2101      	movs	r1, #1
   8010c:	4b3d      	ldr	r3, [pc, #244]	; (80204 <main+0x108>)
   8010e:	7019      	strb	r1, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80110:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80114:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   80116:	2200      	movs	r2, #0
   80118:	4b3b      	ldr	r3, [pc, #236]	; (80208 <main+0x10c>)

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   8011a:	483c      	ldr	r0, [pc, #240]	; (8020c <main+0x110>)
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   8011c:	7159      	strb	r1, [r3, #5]
		sleepmgr_locks[i] = 0;
   8011e:	701a      	strb	r2, [r3, #0]
   80120:	705a      	strb	r2, [r3, #1]
   80122:	709a      	strb	r2, [r3, #2]
   80124:	70da      	strb	r2, [r3, #3]
   80126:	711a      	strb	r2, [r3, #4]
   80128:	4780      	blx	r0
	board_init();
   8012a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80210 <main+0x114>
   8012e:	4b39      	ldr	r3, [pc, #228]	; (80214 <main+0x118>)
   80130:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   80132:	4b39      	ldr	r3, [pc, #228]	; (80218 <main+0x11c>)
   80134:	466c      	mov	r4, sp
   80136:	4645      	mov	r5, r8
   80138:	4f38      	ldr	r7, [pc, #224]	; (8021c <main+0x120>)

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8013a:	4e39      	ldr	r6, [pc, #228]	; (80220 <main+0x124>)
   8013c:	f10d 0910 	add.w	r9, sp, #16
	XPROGTarget_DisableTargetPDI();
   80140:	4798      	blx	r3
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80142:	f854 2b04 	ldr.w	r2, [r4], #4
   80146:	4628      	mov	r0, r5
   80148:	4631      	mov	r1, r6
   8014a:	47b8      	blx	r7
	for(unsigned int i = 0; i < 4; i++){
   8014c:	454c      	cmp	r4, r9
   8014e:	f105 0508 	add.w	r5, r5, #8
   80152:	d1f6      	bne.n	80142 <main+0x46>
	}
	usb_serial_number[32] = 0;
   80154:	2700      	movs	r7, #0
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
	printf("Serial number: %s\n", usb_serial_number);
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   80156:	4b33      	ldr	r3, [pc, #204]	; (80224 <main+0x128>)
   80158:	2009      	movs	r0, #9
	usb_serial_number[32] = 0;
   8015a:	f888 7020 	strb.w	r7, [r8, #32]
	pmc_enable_periph_clk(ID_SMC);	
   8015e:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   80160:	4e31      	ldr	r6, [pc, #196]	; (80228 <main+0x12c>)
   80162:	4932      	ldr	r1, [pc, #200]	; (8022c <main+0x130>)
   80164:	2029      	movs	r0, #41	; 0x29
   80166:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80168:	4930      	ldr	r1, [pc, #192]	; (8022c <main+0x130>)
   8016a:	202a      	movs	r0, #42	; 0x2a
   8016c:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8016e:	492f      	ldr	r1, [pc, #188]	; (8022c <main+0x130>)
   80170:	202b      	movs	r0, #43	; 0x2b
   80172:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80174:	492d      	ldr	r1, [pc, #180]	; (8022c <main+0x130>)
   80176:	202c      	movs	r0, #44	; 0x2c
   80178:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8017a:	492c      	ldr	r1, [pc, #176]	; (8022c <main+0x130>)
   8017c:	202d      	movs	r0, #45	; 0x2d
   8017e:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80180:	492a      	ldr	r1, [pc, #168]	; (8022c <main+0x130>)
   80182:	202e      	movs	r0, #46	; 0x2e
   80184:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80186:	4929      	ldr	r1, [pc, #164]	; (8022c <main+0x130>)
   80188:	202f      	movs	r0, #47	; 0x2f
   8018a:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   8018c:	4927      	ldr	r1, [pc, #156]	; (8022c <main+0x130>)
   8018e:	2030      	movs	r0, #48	; 0x30
   80190:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80192:	4926      	ldr	r1, [pc, #152]	; (8022c <main+0x130>)
   80194:	2033      	movs	r0, #51	; 0x33
   80196:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80198:	4924      	ldr	r1, [pc, #144]	; (8022c <main+0x130>)
   8019a:	2037      	movs	r0, #55	; 0x37
   8019c:	47b0      	blx	r6
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8019e:	4923      	ldr	r1, [pc, #140]	; (8022c <main+0x130>)
   801a0:	2034      	movs	r0, #52	; 0x34
   801a2:	47b0      	blx	r6
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   801a4:	4639      	mov	r1, r7
   801a6:	4a22      	ldr	r2, [pc, #136]	; (80230 <main+0x134>)
   801a8:	4822      	ldr	r0, [pc, #136]	; (80234 <main+0x138>)
   801aa:	4b23      	ldr	r3, [pc, #140]	; (80238 <main+0x13c>)
   801ac:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   801ae:	4639      	mov	r1, r7
   801b0:	4a22      	ldr	r2, [pc, #136]	; (8023c <main+0x140>)
   801b2:	4820      	ldr	r0, [pc, #128]	; (80234 <main+0x138>)
   801b4:	4b22      	ldr	r3, [pc, #136]	; (80240 <main+0x144>)
   801b6:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   801b8:	4639      	mov	r1, r7
   801ba:	4a22      	ldr	r2, [pc, #136]	; (80244 <main+0x148>)
   801bc:	481d      	ldr	r0, [pc, #116]	; (80234 <main+0x138>)
   801be:	4b22      	ldr	r3, [pc, #136]	; (80248 <main+0x14c>)
   801c0:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   801c2:	2203      	movs	r2, #3
   801c4:	4639      	mov	r1, r7
   801c6:	481b      	ldr	r0, [pc, #108]	; (80234 <main+0x138>)
   801c8:	4b20      	ldr	r3, [pc, #128]	; (8024c <main+0x150>)
   801ca:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   801cc:	4b20      	ldr	r3, [pc, #128]	; (80250 <main+0x154>)
   801ce:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   801d0:	4b20      	ldr	r3, [pc, #128]	; (80254 <main+0x158>)
   801d2:	4798      	blx	r3
	board_power(1);
   801d4:	201d      	movs	r0, #29
   801d6:	4b20      	ldr	r3, [pc, #128]	; (80258 <main+0x15c>)
   801d8:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   801da:	2104      	movs	r1, #4
   801dc:	4a1f      	ldr	r2, [pc, #124]	; (8025c <main+0x160>)
	pmc_enable_pck(ul_id);
   801de:	4638      	mov	r0, r7
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   801e0:	6411      	str	r1, [r2, #64]	; 0x40
	pmc_enable_pck(ul_id);
   801e2:	4b1f      	ldr	r3, [pc, #124]	; (80260 <main+0x164>)
   801e4:	4798      	blx	r3
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
	naeusb_register_handlers();
   801e6:	4b1f      	ldr	r3, [pc, #124]	; (80264 <main+0x168>)
   801e8:	4798      	blx	r3
	naeusart_register_handlers();
   801ea:	4b1f      	ldr	r3, [pc, #124]	; (80268 <main+0x16c>)
   801ec:	4798      	blx	r3
	openadc_register_handlers();
   801ee:	4b1f      	ldr	r3, [pc, #124]	; (8026c <main+0x170>)
   801f0:	4798      	blx	r3
	mpsse_register_handlers();
   801f2:	4b1f      	ldr	r3, [pc, #124]	; (80270 <main+0x174>)
   801f4:	4d1f      	ldr	r5, [pc, #124]	; (80274 <main+0x178>)
   801f6:	4c20      	ldr	r4, [pc, #128]	; (80278 <main+0x17c>)
   801f8:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   801fa:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
   801fc:	47a0      	blx	r4
	while (true) {
   801fe:	e7fc      	b.n	801fa <main+0xfe>
   80200:	00084011 	.word	0x00084011
   80204:	20000b40 	.word	0x20000b40
   80208:	20002884 	.word	0x20002884
   8020c:	000859ad 	.word	0x000859ad
   80210:	20000194 	.word	0x20000194
   80214:	00086051 	.word	0x00086051
   80218:	00080f85 	.word	0x00080f85
   8021c:	00086ef5 	.word	0x00086ef5
   80220:	0008d748 	.word	0x0008d748
   80224:	00085b7d 	.word	0x00085b7d
   80228:	00085d79 	.word	0x00085d79
   8022c:	08000001 	.word	0x08000001
   80230:	01010100 	.word	0x01010100
   80234:	400e0000 	.word	0x400e0000
   80238:	00084215 	.word	0x00084215
   8023c:	01030101 	.word	0x01030101
   80240:	00084221 	.word	0x00084221
   80244:	00040002 	.word	0x00040002
   80248:	0008422d 	.word	0x0008422d
   8024c:	00084239 	.word	0x00084239
   80250:	0008697d 	.word	0x0008697d
   80254:	00081f31 	.word	0x00081f31
   80258:	00085d1d 	.word	0x00085d1d
   8025c:	400e0400 	.word	0x400e0400
   80260:	00085bc5 	.word	0x00085bc5
   80264:	000828bd 	.word	0x000828bd
   80268:	000832fd 	.word	0x000832fd
   8026c:	00082c51 	.word	0x00082c51
   80270:	00083edd 	.word	0x00083edd
   80274:	000835cd 	.word	0x000835cd
   80278:	00083f01 	.word	0x00083f01

0008027c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   8027c:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <FPGA_setlock+0x24>)
{
   80280:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   80282:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   80284:	4b07      	ldr	r3, [pc, #28]	; (802a4 <FPGA_setlock+0x28>)
   80286:	781a      	ldrb	r2, [r3, #0]
   80288:	b92a      	cbnz	r2, 80296 <FPGA_setlock+0x1a>
  {
    ret = 1;
   8028a:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   8028c:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   8028e:	4b06      	ldr	r3, [pc, #24]	; (802a8 <FPGA_setlock+0x2c>)
   80290:	4798      	blx	r3
  return ret;
}
   80292:	4628      	mov	r0, r5
   80294:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   80296:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   80298:	4b03      	ldr	r3, [pc, #12]	; (802a8 <FPGA_setlock+0x2c>)
   8029a:	4798      	blx	r3
}
   8029c:	4628      	mov	r0, r5
   8029e:	bd38      	pop	{r3, r4, r5, pc}
   802a0:	00086079 	.word	0x00086079
   802a4:	2000153c 	.word	0x2000153c
   802a8:	000860b9 	.word	0x000860b9

000802ac <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   802ac:	2200      	movs	r2, #0
   802ae:	4b01      	ldr	r3, [pc, #4]	; (802b4 <FPGA_releaselock+0x8>)
   802b0:	701a      	strb	r2, [r3, #0]
}
   802b2:	4770      	bx	lr
   802b4:	2000153c 	.word	0x2000153c

000802b8 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   802b8:	4b01      	ldr	r3, [pc, #4]	; (802c0 <FPGA_lockstatus+0x8>)
   802ba:	7818      	ldrb	r0, [r3, #0]
}
   802bc:	4770      	bx	lr
   802be:	bf00      	nop
   802c0:	2000153c 	.word	0x2000153c

000802c4 <FPGA_setaddr>:
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

#ifdef FPGA_ADDR_PORT
void FPGA_setaddr(uint32_t addr)
{
   802c4:	b510      	push	{r4, lr}
   802c6:	4601      	mov	r1, r0
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   802c8:	4b05      	ldr	r3, [pc, #20]	; (802e0 <FPGA_setaddr+0x1c>)
   802ca:	4806      	ldr	r0, [pc, #24]	; (802e4 <FPGA_setaddr+0x20>)
   802cc:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   802ce:	2035      	movs	r0, #53	; 0x35
   802d0:	4b05      	ldr	r3, [pc, #20]	; (802e8 <FPGA_setaddr+0x24>)
   802d2:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
	#endif
}
   802d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			gpio_set_pin_high(FPGA_ALE_GPIO);
   802d8:	2035      	movs	r0, #53	; 0x35
   802da:	4b04      	ldr	r3, [pc, #16]	; (802ec <FPGA_setaddr+0x28>)
   802dc:	4718      	bx	r3
   802de:	bf00      	nop
   802e0:	00085cf5 	.word	0x00085cf5
   802e4:	400e0e00 	.word	0x400e0e00
   802e8:	00085d39 	.word	0x00085d39
   802ec:	00085d1d 	.word	0x00085d1d

000802f0 <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   802f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
	#else
	spi_enable_clock(SPI);
   802f4:	4c1a      	ldr	r4, [pc, #104]	; (80360 <fpga_program_spi_setup1+0x70>)
{
   802f6:	4605      	mov	r5, r0
	spi_enable_clock(SPI);
   802f8:	4b1a      	ldr	r3, [pc, #104]	; (80364 <fpga_program_spi_setup1+0x74>)
   802fa:	4620      	mov	r0, r4
   802fc:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   802fe:	2380      	movs	r3, #128	; 0x80
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80300:	2200      	movs	r2, #0
   80302:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80304:	6863      	ldr	r3, [r4, #4]
   80306:	4620      	mov	r0, r4
   80308:	f043 0301 	orr.w	r3, r3, #1
   8030c:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8030e:	6863      	ldr	r3, [r4, #4]
   80310:	4611      	mov	r1, r2
   80312:	f043 0310 	orr.w	r3, r3, #16
   80316:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80318:	6863      	ldr	r3, [r4, #4]
   8031a:	4f13      	ldr	r7, [pc, #76]	; (80368 <fpga_program_spi_setup1+0x78>)
   8031c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80320:	6063      	str	r3, [r4, #4]
   80322:	47b8      	blx	r7
	spi_set_clock_phase(SPI, 0, 1);
   80324:	2201      	movs	r2, #1
   80326:	4620      	mov	r0, r4
   80328:	2100      	movs	r1, #0
   8032a:	4b10      	ldr	r3, [pc, #64]	; (8036c <fpga_program_spi_setup1+0x7c>)
   8032c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   8032e:	4628      	mov	r0, r5
   80330:	490f      	ldr	r1, [pc, #60]	; (80370 <fpga_program_spi_setup1+0x80>)
   80332:	4b10      	ldr	r3, [pc, #64]	; (80374 <fpga_program_spi_setup1+0x84>)
   80334:	4798      	blx	r3
   80336:	4602      	mov	r2, r0
   80338:	2100      	movs	r1, #0
   8033a:	4620      	mov	r0, r4
   8033c:	4b0e      	ldr	r3, [pc, #56]	; (80378 <fpga_program_spi_setup1+0x88>)
   8033e:	b2d2      	uxtb	r2, r2
   80340:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80342:	2301      	movs	r3, #1

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80344:	4e0d      	ldr	r6, [pc, #52]	; (8037c <fpga_program_spi_setup1+0x8c>)
   80346:	6023      	str	r3, [r4, #0]
   80348:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8034c:	200e      	movs	r0, #14
   8034e:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80350:	4633      	mov	r3, r6
	#endif

}
   80352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8035a:	200f      	movs	r0, #15
   8035c:	4718      	bx	r3
   8035e:	bf00      	nop
   80360:	40008000 	.word	0x40008000
   80364:	00085885 	.word	0x00085885
   80368:	00085909 	.word	0x00085909
   8036c:	00085921 	.word	0x00085921
   80370:	05b8d800 	.word	0x05b8d800
   80374:	00085939 	.word	0x00085939
   80378:	00085951 	.word	0x00085951
   8037c:	00085d79 	.word	0x00085d79

00080380 <fpga_program_spi_sendbyte>:
void fpga_program_spi_sendbyte(uint8_t databyte)
{
	#if AVRISP_USEUART
	usart_putchar(AVRISP_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   80380:	2300      	movs	r3, #0
{
   80382:	b410      	push	{r4}
	spi_write(SPI, databyte, 0, 0);
   80384:	4c03      	ldr	r4, [pc, #12]	; (80394 <fpga_program_spi_sendbyte+0x14>)
{
   80386:	4601      	mov	r1, r0
	spi_write(SPI, databyte, 0, 0);
   80388:	46a4      	mov	ip, r4
   8038a:	461a      	mov	r2, r3
   8038c:	4802      	ldr	r0, [pc, #8]	; (80398 <fpga_program_spi_sendbyte+0x18>)
	#endif
}
   8038e:	bc10      	pop	{r4}
	spi_write(SPI, databyte, 0, 0);
   80390:	4760      	bx	ip
   80392:	bf00      	nop
   80394:	000858cd 	.word	0x000858cd
   80398:	40008000 	.word	0x40008000

0008039c <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   8039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   803a0:	4c1b      	ldr	r4, [pc, #108]	; (80410 <fpga_program_setup1+0x74>)
{
   803a2:	4605      	mov	r5, r0
	FPGA_NPROG_LOW();
   803a4:	4b1b      	ldr	r3, [pc, #108]	; (80414 <fpga_program_setup1+0x78>)
   803a6:	2008      	movs	r0, #8
   803a8:	4798      	blx	r3
	spi_enable_clock(SPI);
   803aa:	4620      	mov	r0, r4
   803ac:	4b1a      	ldr	r3, [pc, #104]	; (80418 <fpga_program_setup1+0x7c>)
   803ae:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   803b0:	2380      	movs	r3, #128	; 0x80
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   803b2:	2200      	movs	r2, #0
   803b4:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   803b6:	6863      	ldr	r3, [r4, #4]
   803b8:	4620      	mov	r0, r4
   803ba:	f043 0301 	orr.w	r3, r3, #1
   803be:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   803c0:	6863      	ldr	r3, [r4, #4]
   803c2:	4611      	mov	r1, r2
   803c4:	f043 0310 	orr.w	r3, r3, #16
   803c8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   803ca:	6863      	ldr	r3, [r4, #4]
   803cc:	4f13      	ldr	r7, [pc, #76]	; (8041c <fpga_program_setup1+0x80>)
   803ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   803d2:	6063      	str	r3, [r4, #4]
   803d4:	47b8      	blx	r7
	spi_set_clock_phase(SPI, 0, 1);
   803d6:	2201      	movs	r2, #1
   803d8:	4620      	mov	r0, r4
   803da:	2100      	movs	r1, #0
   803dc:	4b10      	ldr	r3, [pc, #64]	; (80420 <fpga_program_setup1+0x84>)
   803de:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   803e0:	4628      	mov	r0, r5
   803e2:	4910      	ldr	r1, [pc, #64]	; (80424 <fpga_program_setup1+0x88>)
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <fpga_program_setup1+0x8c>)
   803e6:	4798      	blx	r3
   803e8:	4602      	mov	r2, r0
   803ea:	2100      	movs	r1, #0
   803ec:	4620      	mov	r0, r4
   803ee:	4b0f      	ldr	r3, [pc, #60]	; (8042c <fpga_program_setup1+0x90>)
   803f0:	b2d2      	uxtb	r2, r2
   803f2:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   803f4:	2301      	movs	r3, #1

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   803f6:	4e0e      	ldr	r6, [pc, #56]	; (80430 <fpga_program_setup1+0x94>)
   803f8:	6023      	str	r3, [r4, #0]
   803fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803fe:	200e      	movs	r0, #14
   80400:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80402:	4633      	mov	r3, r6
	#endif
#endif
}
   80404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80408:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8040c:	200f      	movs	r0, #15
   8040e:	4718      	bx	r3
   80410:	40008000 	.word	0x40008000
   80414:	00085d39 	.word	0x00085d39
   80418:	00085885 	.word	0x00085885
   8041c:	00085909 	.word	0x00085909
   80420:	00085921 	.word	0x00085921
   80424:	05b8d800 	.word	0x05b8d800
   80428:	00085939 	.word	0x00085939
   8042c:	00085951 	.word	0x00085951
   80430:	00085d79 	.word	0x00085d79

00080434 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   80434:	2008      	movs	r0, #8
   80436:	4b01      	ldr	r3, [pc, #4]	; (8043c <fpga_program_setup2+0x8>)
   80438:	4718      	bx	r3
   8043a:	bf00      	nop
   8043c:	00085d1d 	.word	0x00085d1d

00080440 <fpga_program_sendbyte>:
   80440:	2300      	movs	r3, #0
   80442:	b410      	push	{r4}
   80444:	4c03      	ldr	r4, [pc, #12]	; (80454 <fpga_program_sendbyte+0x14>)
   80446:	4601      	mov	r1, r0
   80448:	46a4      	mov	ip, r4
   8044a:	461a      	mov	r2, r3
   8044c:	4802      	ldr	r0, [pc, #8]	; (80458 <fpga_program_sendbyte+0x18>)
   8044e:	bc10      	pop	{r4}
   80450:	4760      	bx	ip
   80452:	bf00      	nop
   80454:	000858cd 	.word	0x000858cd
   80458:	40008000 	.word	0x40008000

0008045c <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   8045c:	b570      	push	{r4, r5, r6, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   8045e:	4d5f      	ldr	r5, [pc, #380]	; (805dc <V2Protocol_ProcessCommand+0x180>)
   80460:	4e5f      	ldr	r6, [pc, #380]	; (805e0 <V2Protocol_ProcessCommand+0x184>)
   80462:	78ac      	ldrb	r4, [r5, #2]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   80464:	4b5f      	ldr	r3, [pc, #380]	; (805e4 <V2Protocol_ProcessCommand+0x188>)
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   80466:	7034      	strb	r4, [r6, #0]
	start_timeoutcnt();
   80468:	4798      	blx	r3

	switch (V2Command)
   8046a:	1e63      	subs	r3, r4, #1
   8046c:	2b21      	cmp	r3, #33	; 0x21
   8046e:	d812      	bhi.n	80496 <V2Protocol_ProcessCommand+0x3a>
   80470:	e8df f003 	tbb	[pc, r3]
   80474:	112f2f71 	.word	0x112f2f71
   80478:	11114011 	.word	0x11114011
   8047c:	11114611 	.word	0x11114611
   80480:	87111111 	.word	0x87111111
   80484:	29238363 	.word	0x29238363
   80488:	191e2923 	.word	0x191e2923
   8048c:	1919191e 	.word	0x1919191e
   80490:	5a111148 	.word	0x5a111148
   80494:	4c67      	.short	0x4c67
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_UnknownCommand(const uint8_t V2Command)
{
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   80496:	24c9      	movs	r4, #201	; 0xc9
	avrisp_status_payload_size = 2;
   80498:	2202      	movs	r2, #2
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   8049a:	4953      	ldr	r1, [pc, #332]	; (805e8 <V2Protocol_ProcessCommand+0x18c>)
	avrisp_status_payload_size = 2;
   8049c:	4b53      	ldr	r3, [pc, #332]	; (805ec <V2Protocol_ProcessCommand+0x190>)
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   8049e:	704c      	strb	r4, [r1, #1]
	avrisp_status_payload_size = 2;
   804a0:	801a      	strh	r2, [r3, #0]
	return true;
   804a2:	2001      	movs	r0, #1
}
   804a4:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   804a6:	4620      	mov	r0, r4
   804a8:	4b51      	ldr	r3, [pc, #324]	; (805f0 <V2Protocol_ProcessCommand+0x194>)
   804aa:	4798      	blx	r3
	return true;
   804ac:	2001      	movs	r0, #1
}
   804ae:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   804b0:	4620      	mov	r0, r4
   804b2:	4b50      	ldr	r3, [pc, #320]	; (805f4 <V2Protocol_ProcessCommand+0x198>)
   804b4:	4798      	blx	r3
	return true;
   804b6:	2001      	movs	r0, #1
}
   804b8:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   804ba:	4620      	mov	r0, r4
   804bc:	494e      	ldr	r1, [pc, #312]	; (805f8 <V2Protocol_ProcessCommand+0x19c>)
   804be:	4b4f      	ldr	r3, [pc, #316]	; (805fc <V2Protocol_ProcessCommand+0x1a0>)
   804c0:	4798      	blx	r3
	return true;
   804c2:	2001      	movs	r0, #1
}
   804c4:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   804c6:	4620      	mov	r0, r4
   804c8:	494b      	ldr	r1, [pc, #300]	; (805f8 <V2Protocol_ProcessCommand+0x19c>)
   804ca:	4b4d      	ldr	r3, [pc, #308]	; (80600 <V2Protocol_ProcessCommand+0x1a4>)
   804cc:	4798      	blx	r3
	return true;
   804ce:	2001      	movs	r0, #1
}
   804d0:	bd70      	pop	{r4, r5, r6, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   804d2:	68ab      	ldr	r3, [r5, #8]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   804d4:	2c02      	cmp	r4, #2
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   804d6:	781d      	ldrb	r5, [r3, #0]
	if (V2Command == CMD_SET_PARAMETER) {
   804d8:	d062      	beq.n	805a0 <V2Protocol_ProcessCommand+0x144>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   804da:	2202      	movs	r2, #2
   804dc:	4c43      	ldr	r4, [pc, #268]	; (805ec <V2Protocol_ProcessCommand+0x190>)

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   804de:	4b49      	ldr	r3, [pc, #292]	; (80604 <V2Protocol_ProcessCommand+0x1a8>)
   804e0:	4628      	mov	r0, r5
	avrisp_status_payload_size = 2;
   804e2:	8022      	strh	r2, [r4, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   804e4:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   804e6:	07c3      	lsls	r3, r0, #31
   804e8:	d46b      	bmi.n	805c2 <V2Protocol_ProcessCommand+0x166>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   804ea:	22c0      	movs	r2, #192	; 0xc0
   804ec:	4b3e      	ldr	r3, [pc, #248]	; (805e8 <V2Protocol_ProcessCommand+0x18c>)
	return true;
   804ee:	2001      	movs	r0, #1
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   804f0:	705a      	strb	r2, [r3, #1]
}
   804f2:	bd70      	pop	{r4, r5, r6, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   804f4:	68ab      	ldr	r3, [r5, #8]
   804f6:	4a44      	ldr	r2, [pc, #272]	; (80608 <V2Protocol_ProcessCommand+0x1ac>)
   804f8:	681b      	ldr	r3, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   804fa:	2b00      	cmp	r3, #0
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   804fc:	6013      	str	r3, [r2, #0]
	if (CurrentAddress & (1UL << 31))
   804fe:	db4b      	blt.n	80598 <V2Protocol_ProcessCommand+0x13c>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80500:	2400      	movs	r4, #0
   80502:	e7c9      	b.n	80498 <V2Protocol_ProcessCommand+0x3c>
			ISPProtocol_SPIMulti();
   80504:	4b41      	ldr	r3, [pc, #260]	; (8060c <V2Protocol_ProcessCommand+0x1b0>)
   80506:	4798      	blx	r3
	return true;
   80508:	2001      	movs	r0, #1
}
   8050a:	bd70      	pop	{r4, r5, r6, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8050c:	886b      	ldrh	r3, [r5, #2]
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8050e:	88ea      	ldrh	r2, [r5, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80510:	0a19      	lsrs	r1, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   80512:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   80516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   8051a:	dc1a      	bgt.n	80552 <V2Protocol_ProcessCommand+0xf6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   8051c:	4b36      	ldr	r3, [pc, #216]	; (805f8 <V2Protocol_ProcessCommand+0x19c>)
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8051e:	81aa      	strh	r2, [r5, #12]
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   80520:	440b      	add	r3, r1
   80522:	60ab      	str	r3, [r5, #8]
			return true;
   80524:	2001      	movs	r0, #1
}
   80526:	bd70      	pop	{r4, r5, r6, pc}
			avrisp_status_payload_size = 0;
   80528:	2200      	movs	r2, #0
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   8052a:	4b30      	ldr	r3, [pc, #192]	; (805ec <V2Protocol_ProcessCommand+0x190>)
			udd_g_ctrlreq.payload = avrisp_status_payload;
   8052c:	482e      	ldr	r0, [pc, #184]	; (805e8 <V2Protocol_ProcessCommand+0x18c>)
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   8052e:	8819      	ldrh	r1, [r3, #0]
			udd_g_ctrlreq.payload = avrisp_status_payload;
   80530:	60a8      	str	r0, [r5, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   80532:	81a9      	strh	r1, [r5, #12]
			avrisp_status_payload_size = 0;
   80534:	801a      	strh	r2, [r3, #0]
			return true;
   80536:	2001      	movs	r0, #1
}
   80538:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_LeaveISPMode();
   8053a:	4b35      	ldr	r3, [pc, #212]	; (80610 <V2Protocol_ProcessCommand+0x1b4>)
   8053c:	4798      	blx	r3
	return true;
   8053e:	2001      	movs	r0, #1
}
   80540:	bd70      	pop	{r4, r5, r6, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80542:	886b      	ldrh	r3, [r5, #2]
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   80544:	88ea      	ldrh	r2, [r5, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80546:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   80548:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   8054c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80550:	dd1b      	ble.n	8058a <V2Protocol_ProcessCommand+0x12e>
				return false;
   80552:	2000      	movs	r0, #0
}
   80554:	bd70      	pop	{r4, r5, r6, pc}
	status_payload[1] = STATUS_CMD_OK;
   80556:	2100      	movs	r1, #0
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   80558:	220d      	movs	r2, #13
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   8055a:	2010      	movs	r0, #16
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   8055c:	4b2d      	ldr	r3, [pc, #180]	; (80614 <V2Protocol_ProcessCommand+0x1b8>)
   8055e:	4c2e      	ldr	r4, [pc, #184]	; (80618 <V2Protocol_ProcessCommand+0x1bc>)
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   80560:	81a8      	strh	r0, [r5, #12]
	status_payload[1] = STATUS_CMD_OK;
   80562:	7071      	strb	r1, [r6, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   80564:	70b2      	strb	r2, [r6, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   80566:	cb07      	ldmia	r3!, {r0, r1, r2}
   80568:	781b      	ldrb	r3, [r3, #0]
   8056a:	f8c6 0003 	str.w	r0, [r6, #3]
	udd_g_ctrlreq.payload = status_payload;
   8056e:	60ae      	str	r6, [r5, #8]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   80570:	6061      	str	r1, [r4, #4]
   80572:	60a2      	str	r2, [r4, #8]
   80574:	7323      	strb	r3, [r4, #12]
	return true;
   80576:	2001      	movs	r0, #1
}
   80578:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_ChipErase();
   8057a:	4b28      	ldr	r3, [pc, #160]	; (8061c <V2Protocol_ProcessCommand+0x1c0>)
   8057c:	4798      	blx	r3
	return true;
   8057e:	2001      	movs	r0, #1
}
   80580:	bd70      	pop	{r4, r5, r6, pc}
			ISPProtocol_EnterISPMode();
   80582:	4b27      	ldr	r3, [pc, #156]	; (80620 <V2Protocol_ProcessCommand+0x1c4>)
   80584:	4798      	blx	r3
	return true;
   80586:	2001      	movs	r0, #1
}
   80588:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8058a:	4c1b      	ldr	r4, [pc, #108]	; (805f8 <V2Protocol_ProcessCommand+0x19c>)
   8058c:	68a9      	ldr	r1, [r5, #8]
   8058e:	4b25      	ldr	r3, [pc, #148]	; (80624 <V2Protocol_ProcessCommand+0x1c8>)
   80590:	4420      	add	r0, r4
   80592:	4798      	blx	r3
			return true;
   80594:	2001      	movs	r0, #1
}
   80596:	bd70      	pop	{r4, r5, r6, pc}
	  MustLoadExtendedAddress = true;
   80598:	2201      	movs	r2, #1
   8059a:	4b23      	ldr	r3, [pc, #140]	; (80628 <V2Protocol_ProcessCommand+0x1cc>)
   8059c:	701a      	strb	r2, [r3, #0]
	  
	// printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);

	avrisp_status_payload[1] = STATUS_CMD_OK;
   8059e:	e7af      	b.n	80500 <V2Protocol_ProcessCommand+0xa4>
	avrisp_status_payload_size = 2;
   805a0:	4a12      	ldr	r2, [pc, #72]	; (805ec <V2Protocol_ProcessCommand+0x190>)
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   805a2:	785e      	ldrb	r6, [r3, #1]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   805a4:	4628      	mov	r0, r5
   805a6:	4b17      	ldr	r3, [pc, #92]	; (80604 <V2Protocol_ProcessCommand+0x1a8>)
	avrisp_status_payload_size = 2;
   805a8:	8014      	strh	r4, [r2, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   805aa:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   805ac:	0782      	lsls	r2, r0, #30
   805ae:	d59c      	bpl.n	804ea <V2Protocol_ProcessCommand+0x8e>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   805b0:	2400      	movs	r4, #0
   805b2:	4a0d      	ldr	r2, [pc, #52]	; (805e8 <V2Protocol_ProcessCommand+0x18c>)
		V2Params_SetParameterValue(ParamID, ParamValue);
   805b4:	4628      	mov	r0, r5
   805b6:	4631      	mov	r1, r6
   805b8:	4b1c      	ldr	r3, [pc, #112]	; (8062c <V2Protocol_ProcessCommand+0x1d0>)
		avrisp_status_payload[1] = STATUS_CMD_OK;
   805ba:	7054      	strb	r4, [r2, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   805bc:	4798      	blx	r3
	return true;
   805be:	2001      	movs	r0, #1
}
   805c0:	bd70      	pop	{r4, r5, r6, pc}
		avrisp_status_payload[1] = STATUS_CMD_OK;
   805c2:	2200      	movs	r2, #0
   805c4:	4e08      	ldr	r6, [pc, #32]	; (805e8 <V2Protocol_ProcessCommand+0x18c>)
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   805c6:	4628      	mov	r0, r5
		avrisp_status_payload[1] = STATUS_CMD_OK;
   805c8:	7072      	strb	r2, [r6, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   805ca:	4b19      	ldr	r3, [pc, #100]	; (80630 <V2Protocol_ProcessCommand+0x1d4>)
   805cc:	4798      	blx	r3
   805ce:	4602      	mov	r2, r0
	return true;
   805d0:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   805d2:	8823      	ldrh	r3, [r4, #0]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   805d4:	70b2      	strb	r2, [r6, #2]
		avrisp_status_payload_size += 1;
   805d6:	4403      	add	r3, r0
   805d8:	8023      	strh	r3, [r4, #0]
}
   805da:	bd70      	pop	{r4, r5, r6, pc}
   805dc:	2000200c 	.word	0x2000200c
   805e0:	2000166c 	.word	0x2000166c
   805e4:	00081cc5 	.word	0x00081cc5
   805e8:	20001648 	.word	0x20001648
   805ec:	20001668 	.word	0x20001668
   805f0:	00081851 	.word	0x00081851
   805f4:	000818ed 	.word	0x000818ed
   805f8:	20001548 	.word	0x20001548
   805fc:	000813f5 	.word	0x000813f5
   80600:	0008166d 	.word	0x0008166d
   80604:	00080635 	.word	0x00080635
   80608:	20001540 	.word	0x20001540
   8060c:	00081949 	.word	0x00081949
   80610:	0008135d 	.word	0x0008135d
   80614:	0008d750 	.word	0x0008d750
   80618:	2000166f 	.word	0x2000166f
   8061c:	0008179d 	.word	0x0008179d
   80620:	00081195 	.word	0x00081195
   80624:	00086d65 	.word	0x00086d65
   80628:	20001544 	.word	0x20001544
   8062c:	00080675 	.word	0x00080675
   80630:	00080655 	.word	0x00080655

00080634 <V2Params_GetParameterPrivileges>:
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
	ParameterItem_t* CurrTableItem = ParameterTable;
   80634:	4b06      	ldr	r3, [pc, #24]	; (80650 <V2Params_GetParameterPrivileges+0x1c>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80636:	f103 011e 	add.w	r1, r3, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   8063a:	781a      	ldrb	r2, [r3, #0]
   8063c:	4282      	cmp	r2, r0
   8063e:	d004      	beq.n	8064a <V2Params_GetParameterPrivileges+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   80640:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80642:	428b      	cmp	r3, r1
   80644:	d1f9      	bne.n	8063a <V2Params_GetParameterPrivileges+0x6>
	  return 0;
   80646:	2000      	movs	r0, #0
   80648:	4770      	bx	lr
	return ParamInfo->ParamPrivileges;
   8064a:	7858      	ldrb	r0, [r3, #1]
}
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	200001bc 	.word	0x200001bc

00080654 <V2Params_GetParameterValue>:
	ParameterItem_t* CurrTableItem = ParameterTable;
   80654:	4b06      	ldr	r3, [pc, #24]	; (80670 <V2Params_GetParameterValue+0x1c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80656:	f103 011e 	add.w	r1, r3, #30
		if (ParamID == CurrTableItem->ParamID)
   8065a:	781a      	ldrb	r2, [r3, #0]
   8065c:	4282      	cmp	r2, r0
   8065e:	d004      	beq.n	8066a <V2Params_GetParameterValue+0x16>
		CurrTableItem++;
   80660:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80662:	428b      	cmp	r3, r1
   80664:	d1f9      	bne.n	8065a <V2Params_GetParameterValue+0x6>
	  return 0;
   80666:	2000      	movs	r0, #0
   80668:	4770      	bx	lr
	return ParamInfo->ParamValue;
   8066a:	7898      	ldrb	r0, [r3, #2]
}
   8066c:	4770      	bx	lr
   8066e:	bf00      	nop
   80670:	200001bc 	.word	0x200001bc

00080674 <V2Params_SetParameterValue>:
	ParameterItem_t* CurrTableItem = ParameterTable;
   80674:	4b05      	ldr	r3, [pc, #20]	; (8068c <V2Params_SetParameterValue+0x18>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80676:	f103 0c1e 	add.w	ip, r3, #30
		if (ParamID == CurrTableItem->ParamID)
   8067a:	781a      	ldrb	r2, [r3, #0]
   8067c:	4282      	cmp	r2, r0
   8067e:	d003      	beq.n	80688 <V2Params_SetParameterValue+0x14>
		CurrTableItem++;
   80680:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   80682:	4563      	cmp	r3, ip
   80684:	d1f9      	bne.n	8067a <V2Params_SetParameterValue+0x6>
   80686:	4770      	bx	lr
	ParamInfo->ParamValue = Value;
   80688:	7099      	strb	r1, [r3, #2]
}
   8068a:	4770      	bx	lr
   8068c:	200001bc 	.word	0x200001bc

00080690 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   80690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80692:	206b      	movs	r0, #107	; 0x6b
   80694:	4c0f      	ldr	r4, [pc, #60]	; (806d4 <XMEGANVM_WaitWhileNVMControllerBusy+0x44>)
   80696:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80698:	4b0f      	ldr	r3, [pc, #60]	; (806d8 <XMEGANVM_WaitWhileNVMControllerBusy+0x48>)
   8069a:	4e10      	ldr	r6, [pc, #64]	; (806dc <XMEGANVM_WaitWhileNVMControllerBusy+0x4c>)
   8069c:	681f      	ldr	r7, [r3, #0]
   8069e:	4d10      	ldr	r5, [pc, #64]	; (806e0 <XMEGANVM_WaitWhileNVMControllerBusy+0x50>)
   806a0:	f047 070f 	orr.w	r7, r7, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   806a4:	b2f8      	uxtb	r0, r7
   806a6:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   806a8:	f3c7 2007 	ubfx	r0, r7, #8, #8
   806ac:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   806ae:	f3c7 4007 	ubfx	r0, r7, #16, #8
   806b2:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   806b4:	0e38      	lsrs	r0, r7, #24
   806b6:	47a0      	blx	r4
}
   806b8:	e001      	b.n	806be <XMEGANVM_WaitWhileNVMControllerBusy+0x2e>
		if (TimeoutTicksRemaining == 0){
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   806ba:	0603      	lsls	r3, r0, #24
   806bc:	d507      	bpl.n	806ce <XMEGANVM_WaitWhileNVMControllerBusy+0x3e>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   806be:	2020      	movs	r0, #32
   806c0:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   806c2:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   806c4:	682b      	ldr	r3, [r5, #0]
   806c6:	2b00      	cmp	r3, #0
   806c8:	d1f7      	bne.n	806ba <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   806ca:	4618      	mov	r0, r3
		  return true;
		}
	}
}
   806cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  return true;
   806ce:	2001      	movs	r0, #1
}
   806d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   806d2:	bf00      	nop
   806d4:	00081005 	.word	0x00081005
   806d8:	200001dc 	.word	0x200001dc
   806dc:	00081031 	.word	0x00081031
   806e0:	20001798 	.word	0x20001798

000806e4 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   806e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   806e8:	4b23      	ldr	r3, [pc, #140]	; (80778 <XMEGANVM_EnablePDI+0x94>)
{
   806ea:	b082      	sub	sp, #8
	XPROGTarget_EnableTargetPDI();
   806ec:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   806ee:	4d23      	ldr	r5, [pc, #140]	; (8077c <XMEGANVM_EnablePDI+0x98>)
   806f0:	20c1      	movs	r0, #193	; 0xc1
   806f2:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_RESET_KEY);
   806f4:	2059      	movs	r0, #89	; 0x59
   806f6:	47a8      	blx	r5

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   806f8:	20c2      	movs	r0, #194	; 0xc2
   806fa:	47a8      	blx	r5
	XPROGTarget_SendByte(0x02);
   806fc:	2002      	movs	r0, #2
   806fe:	47a8      	blx	r5

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   80700:	20e0      	movs	r0, #224	; 0xe0
   80702:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   80704:	f04f 0a12 	mov.w	sl, #18
   80708:	f04f 0989 	mov.w	r9, #137	; 0x89
   8070c:	f04f 08ab 	mov.w	r8, #171	; 0xab
   80710:	466f      	mov	r7, sp
   80712:	f10d 0407 	add.w	r4, sp, #7
   80716:	f04f 0c45 	mov.w	ip, #69	; 0x45
   8071a:	20cd      	movs	r0, #205	; 0xcd
   8071c:	21d8      	movs	r1, #216	; 0xd8
   8071e:	2288      	movs	r2, #136	; 0x88
   80720:	23ff      	movs	r3, #255	; 0xff
   80722:	4626      	mov	r6, r4
   80724:	f88d a000 	strb.w	sl, [sp]
   80728:	f88d 9001 	strb.w	r9, [sp, #1]
   8072c:	f88d 8002 	strb.w	r8, [sp, #2]
   80730:	f88d c003 	strb.w	ip, [sp, #3]
   80734:	f88d 0004 	strb.w	r0, [sp, #4]
   80738:	f88d 1005 	strb.w	r1, [sp, #5]
   8073c:	f88d 2006 	strb.w	r2, [sp, #6]
   80740:	f88d 3007 	strb.w	r3, [sp, #7]
   80744:	7820      	ldrb	r0, [r4, #0]
   80746:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   80748:	42be      	cmp	r6, r7
   8074a:	f104 34ff 	add.w	r4, r4, #4294967295
   8074e:	d1e2      	bne.n	80716 <XMEGANVM_EnablePDI+0x32>
   80750:	4e0b      	ldr	r6, [pc, #44]	; (80780 <XMEGANVM_EnablePDI+0x9c>)
   80752:	4c0c      	ldr	r4, [pc, #48]	; (80784 <XMEGANVM_EnablePDI+0xa0>)
   80754:	e001      	b.n	8075a <XMEGANVM_EnablePDI+0x76>
		if (StatusRegister & PDI_STATUS_NVM) {
   80756:	0783      	lsls	r3, r0, #30
   80758:	d409      	bmi.n	8076e <XMEGANVM_EnablePDI+0x8a>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8075a:	2080      	movs	r0, #128	; 0x80
   8075c:	47a8      	blx	r5
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8075e:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0) {
   80760:	6823      	ldr	r3, [r4, #0]
   80762:	2b00      	cmp	r3, #0
   80764:	d1f7      	bne.n	80756 <XMEGANVM_EnablePDI+0x72>
		  return false;
   80766:	4618      	mov	r0, r3

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
}
   80768:	b002      	add	sp, #8
   8076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		  return true;
   8076e:	2001      	movs	r0, #1
}
   80770:	b002      	add	sp, #8
   80772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80776:	bf00      	nop
   80778:	00081101 	.word	0x00081101
   8077c:	00081005 	.word	0x00081005
   80780:	00081031 	.word	0x00081031
   80784:	20001798 	.word	0x20001798

00080788 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   80788:	b570      	push	{r4, r5, r6, lr}
   8078a:	4c0e      	ldr	r4, [pc, #56]	; (807c4 <XMEGANVM_DisablePDI+0x3c>)
   8078c:	4d0e      	ldr	r5, [pc, #56]	; (807c8 <XMEGANVM_DisablePDI+0x40>)
   8078e:	4e0f      	ldr	r6, [pc, #60]	; (807cc <XMEGANVM_DisablePDI+0x44>)
   80790:	e001      	b.n	80796 <XMEGANVM_DisablePDI+0xe>
		if (StatusRegister & PDI_STATUS_NVM) {
   80792:	0783      	lsls	r3, r0, #30
   80794:	d408      	bmi.n	807a8 <XMEGANVM_DisablePDI+0x20>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80796:	2080      	movs	r0, #128	; 0x80
   80798:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8079a:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8079c:	6833      	ldr	r3, [r6, #0]
   8079e:	2b00      	cmp	r3, #0
   807a0:	d1f7      	bne.n	80792 <XMEGANVM_DisablePDI+0xa>
   807a2:	e001      	b.n	807a8 <XMEGANVM_DisablePDI+0x20>
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   807a4:	6833      	ldr	r3, [r6, #0]
   807a6:	b143      	cbz	r3, 807ba <XMEGANVM_DisablePDI+0x32>
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   807a8:	20c1      	movs	r0, #193	; 0xc1
   807aa:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   807ac:	2000      	movs	r0, #0
   807ae:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   807b0:	2081      	movs	r0, #129	; 0x81
   807b2:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   807b4:	47a8      	blx	r5
   807b6:	2800      	cmp	r0, #0
   807b8:	d1f4      	bne.n	807a4 <XMEGANVM_DisablePDI+0x1c>

	XPROGTarget_DisableTargetPDI();
   807ba:	4b05      	ldr	r3, [pc, #20]	; (807d0 <XMEGANVM_DisablePDI+0x48>)
}
   807bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	XPROGTarget_DisableTargetPDI();
   807c0:	4718      	bx	r3
   807c2:	bf00      	nop
   807c4:	00081005 	.word	0x00081005
   807c8:	00081031 	.word	0x00081031
   807cc:	20001798 	.word	0x20001798
   807d0:	00080f85 	.word	0x00080f85

000807d4 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   807d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   807d8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 808c8 <XMEGANVM_ReadMemory+0xf4>
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   807dc:	4c3b      	ldr	r4, [pc, #236]	; (808cc <XMEGANVM_ReadMemory+0xf8>)
{
   807de:	4681      	mov	r9, r0
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   807e0:	206b      	movs	r0, #107	; 0x6b
{
   807e2:	460f      	mov	r7, r1
   807e4:	4690      	mov	r8, r2
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   807e6:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   807e8:	f8da 3000 	ldr.w	r3, [sl]
   807ec:	4e38      	ldr	r6, [pc, #224]	; (808d0 <XMEGANVM_ReadMemory+0xfc>)
   807ee:	f043 0b0f 	orr.w	fp, r3, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   807f2:	fa5f f08b 	uxtb.w	r0, fp
   807f6:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   807f8:	f3cb 2007 	ubfx	r0, fp, #8, #8
   807fc:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   807fe:	f3cb 4007 	ubfx	r0, fp, #16, #8
   80802:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80804:	ea4f 601b 	mov.w	r0, fp, lsr #24
   80808:	4d32      	ldr	r5, [pc, #200]	; (808d4 <XMEGANVM_ReadMemory+0x100>)
   8080a:	47a0      	blx	r4
}
   8080c:	e001      	b.n	80812 <XMEGANVM_ReadMemory+0x3e>
		if (!(StatusRegister & (1 << 7))) {
   8080e:	0603      	lsls	r3, r0, #24
   80810:	d508      	bpl.n	80824 <XMEGANVM_ReadMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80812:	2020      	movs	r0, #32
   80814:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80816:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   80818:	682b      	ldr	r3, [r5, #0]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d1f7      	bne.n	8080e <XMEGANVM_ReadMemory+0x3a>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
   8081e:	4618      	mov	r0, r3
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   80820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80824:	204c      	movs	r0, #76	; 0x4c
   80826:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80828:	f8da 3000 	ldr.w	r3, [sl]
   8082c:	f043 0a0a 	orr.w	sl, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80830:	fa5f f08a 	uxtb.w	r0, sl
   80834:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80836:	f3ca 2007 	ubfx	r0, sl, #8, #8
   8083a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8083c:	f3ca 4007 	ubfx	r0, sl, #16, #8
   80840:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80842:	ea4f 601a 	mov.w	r0, sl, lsr #24
   80846:	47a0      	blx	r4
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   80848:	2043      	movs	r0, #67	; 0x43
   8084a:	47a0      	blx	r4
	if (ReadSize > 1)
   8084c:	f1b8 0f01 	cmp.w	r8, #1
   80850:	d924      	bls.n	8089c <XMEGANVM_ReadMemory+0xc8>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80852:	206b      	movs	r0, #107	; 0x6b
   80854:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80856:	fa5f f089 	uxtb.w	r0, r9
   8085a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   8085c:	f3c9 2007 	ubfx	r0, r9, #8, #8
   80860:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80862:	f3c9 4007 	ubfx	r0, r9, #16, #8
   80866:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80868:	ea4f 6019 	mov.w	r0, r9, lsr #24
   8086c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8086e:	20a0      	movs	r0, #160	; 0xa0
   80870:	47a0      	blx	r4
		XPROGTarget_SendByte(ReadSize - 1);
   80872:	f108 30ff 	add.w	r0, r8, #4294967295
   80876:	b2c0      	uxtb	r0, r0
   80878:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8087a:	2024      	movs	r0, #36	; 0x24
   8087c:	44b8      	add	r8, r7
   8087e:	47a0      	blx	r4
		while (ReadSize-- && TimeoutTicksRemaining)
   80880:	e004      	b.n	8088c <XMEGANVM_ReadMemory+0xb8>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   80882:	47b0      	blx	r6
   80884:	f807 0b01 	strb.w	r0, [r7], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   80888:	4547      	cmp	r7, r8
   8088a:	d017      	beq.n	808bc <XMEGANVM_ReadMemory+0xe8>
   8088c:	6828      	ldr	r0, [r5, #0]
   8088e:	2800      	cmp	r0, #0
   80890:	d1f7      	bne.n	80882 <XMEGANVM_ReadMemory+0xae>
	return (TimeoutTicksRemaining > 0);
   80892:	3800      	subs	r0, #0
   80894:	bf18      	it	ne
   80896:	2001      	movne	r0, #1
}
   80898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8089c:	200c      	movs	r0, #12
   8089e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   808a0:	fa5f f089 	uxtb.w	r0, r9
   808a4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   808a6:	f3c9 2007 	ubfx	r0, r9, #8, #8
   808aa:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   808ac:	f3c9 4007 	ubfx	r0, r9, #16, #8
   808b0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   808b2:	ea4f 6019 	mov.w	r0, r9, lsr #24
   808b6:	47a0      	blx	r4
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   808b8:	47b0      	blx	r6
   808ba:	7038      	strb	r0, [r7, #0]
	return (TimeoutTicksRemaining > 0);
   808bc:	6828      	ldr	r0, [r5, #0]
   808be:	3800      	subs	r0, #0
   808c0:	bf18      	it	ne
   808c2:	2001      	movne	r0, #1
   808c4:	e7e8      	b.n	80898 <XMEGANVM_ReadMemory+0xc4>
   808c6:	bf00      	nop
   808c8:	200001dc 	.word	0x200001dc
   808cc:	00081005 	.word	0x00081005
   808d0:	00081031 	.word	0x00081031
   808d4:	20001798 	.word	0x20001798

000808d8 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   808d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   808dc:	f8df a090 	ldr.w	sl, [pc, #144]	; 80970 <XMEGANVM_WriteByteMemory+0x98>
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   808e0:	4c24      	ldr	r4, [pc, #144]	; (80974 <XMEGANVM_WriteByteMemory+0x9c>)
{
   808e2:	4681      	mov	r9, r0
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   808e4:	206b      	movs	r0, #107	; 0x6b
{
   808e6:	460f      	mov	r7, r1
   808e8:	4690      	mov	r8, r2
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   808ea:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   808ec:	f8da 3000 	ldr.w	r3, [sl]
   808f0:	4e21      	ldr	r6, [pc, #132]	; (80978 <XMEGANVM_WriteByteMemory+0xa0>)
   808f2:	f043 0b0f 	orr.w	fp, r3, #15
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   808f6:	fa5f f08b 	uxtb.w	r0, fp
   808fa:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   808fc:	f3cb 2007 	ubfx	r0, fp, #8, #8
   80900:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80902:	f3cb 4007 	ubfx	r0, fp, #16, #8
   80906:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80908:	ea4f 601b 	mov.w	r0, fp, lsr #24
   8090c:	4d1b      	ldr	r5, [pc, #108]	; (8097c <XMEGANVM_WriteByteMemory+0xa4>)
   8090e:	47a0      	blx	r4
}
   80910:	e001      	b.n	80916 <XMEGANVM_WriteByteMemory+0x3e>
		if (!(StatusRegister & (1 << 7))) {
   80912:	0603      	lsls	r3, r0, #24
   80914:	d508      	bpl.n	80928 <XMEGANVM_WriteByteMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   80916:	2020      	movs	r0, #32
   80918:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8091a:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0){
   8091c:	682b      	ldr	r3, [r5, #0]
   8091e:	2b00      	cmp	r3, #0
   80920:	d1f7      	bne.n	80912 <XMEGANVM_WriteByteMemory+0x3a>
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
	  return false;
   80922:	4618      	mov	r0, r3
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   80924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80928:	204c      	movs	r0, #76	; 0x4c
   8092a:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8092c:	f8da 5000 	ldr.w	r5, [sl]
   80930:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80934:	b2e8      	uxtb	r0, r5
   80936:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80938:	f3c5 2007 	ubfx	r0, r5, #8, #8
   8093c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8093e:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80942:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80944:	0e28      	lsrs	r0, r5, #24
   80946:	47a0      	blx	r4
	XPROGTarget_SendByte(WriteCommand);
   80948:	4648      	mov	r0, r9
   8094a:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8094c:	204c      	movs	r0, #76	; 0x4c
   8094e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80950:	b2f8      	uxtb	r0, r7
   80952:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80954:	f3c7 2007 	ubfx	r0, r7, #8, #8
   80958:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   8095a:	f3c7 4007 	ubfx	r0, r7, #16, #8
   8095e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80960:	0e38      	lsrs	r0, r7, #24
   80962:	47a0      	blx	r4
	XPROGTarget_SendByte(data);
   80964:	4640      	mov	r0, r8
   80966:	47a0      	blx	r4
	return true;
   80968:	2001      	movs	r0, #1
}
   8096a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8096e:	bf00      	nop
   80970:	200001dc 	.word	0x200001dc
   80974:	00081005 	.word	0x00081005
   80978:	00081031 	.word	0x00081031
   8097c:	20001798 	.word	0x20001798

00080980 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   80980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80984:	4690      	mov	r8, r2
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80986:	07da      	lsls	r2, r3, #31
{
   80988:	461c      	mov	r4, r3
   8098a:	4681      	mov	r9, r0
   8098c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8098e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   80992:	d407      	bmi.n	809a4 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   80994:	2e00      	cmp	r6, #0
   80996:	d13b      	bne.n	80a10 <XMEGANVM_WritePageMemory+0x90>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   80998:	07a3      	lsls	r3, r4, #30
   8099a:	d40c      	bmi.n	809b6 <XMEGANVM_WritePageMemory+0x36>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   8099c:	2401      	movs	r4, #1
}
   8099e:	4620      	mov	r0, r4
   809a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   809a4:	4b4a      	ldr	r3, [pc, #296]	; (80ad0 <XMEGANVM_WritePageMemory+0x150>)
   809a6:	460f      	mov	r7, r1
   809a8:	4798      	blx	r3
   809aa:	2800      	cmp	r0, #0
   809ac:	d167      	bne.n	80a7e <XMEGANVM_WritePageMemory+0xfe>
		  return false;
   809ae:	2400      	movs	r4, #0
}
   809b0:	4620      	mov	r0, r4
   809b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   809b6:	4b46      	ldr	r3, [pc, #280]	; (80ad0 <XMEGANVM_WritePageMemory+0x150>)
   809b8:	4798      	blx	r3
   809ba:	4604      	mov	r4, r0
   809bc:	2800      	cmp	r0, #0
   809be:	d0f6      	beq.n	809ae <XMEGANVM_WritePageMemory+0x2e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   809c0:	4d44      	ldr	r5, [pc, #272]	; (80ad4 <XMEGANVM_WritePageMemory+0x154>)
   809c2:	204c      	movs	r0, #76	; 0x4c
   809c4:	47a8      	blx	r5
	uint32_t Address = XPROG_Param_NVMBase | Register;
   809c6:	4b44      	ldr	r3, [pc, #272]	; (80ad8 <XMEGANVM_WritePageMemory+0x158>)
   809c8:	681e      	ldr	r6, [r3, #0]
   809ca:	f046 060a 	orr.w	r6, r6, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   809ce:	b2f0      	uxtb	r0, r6
   809d0:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   809d2:	f3c6 2007 	ubfx	r0, r6, #8, #8
   809d6:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   809d8:	f3c6 4007 	ubfx	r0, r6, #16, #8
   809dc:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   809de:	0e30      	lsrs	r0, r6, #24
   809e0:	47a8      	blx	r5
		XPROGTarget_SendByte(WritePageCommand);
   809e2:	4640      	mov	r0, r8
   809e4:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   809e6:	204c      	movs	r0, #76	; 0x4c
   809e8:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   809ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809ec:	b2d8      	uxtb	r0, r3
   809ee:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   809f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809f2:	f3c3 2007 	ubfx	r0, r3, #8, #8
   809f6:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   809f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809fa:	f3c3 4007 	ubfx	r0, r3, #16, #8
   809fe:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a02:	0e18      	lsrs	r0, r3, #24
   80a04:	47a8      	blx	r5
		XPROGTarget_SendByte(0x00);
   80a06:	2000      	movs	r0, #0
   80a08:	47a8      	blx	r5
}
   80a0a:	4620      	mov	r0, r4
   80a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80a10:	4b2f      	ldr	r3, [pc, #188]	; (80ad0 <XMEGANVM_WritePageMemory+0x150>)
   80a12:	4798      	blx	r3
   80a14:	2800      	cmp	r0, #0
   80a16:	d0ca      	beq.n	809ae <XMEGANVM_WritePageMemory+0x2e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80a18:	4f2e      	ldr	r7, [pc, #184]	; (80ad4 <XMEGANVM_WritePageMemory+0x154>)
   80a1a:	204c      	movs	r0, #76	; 0x4c
   80a1c:	47b8      	blx	r7
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80a1e:	4b2e      	ldr	r3, [pc, #184]	; (80ad8 <XMEGANVM_WritePageMemory+0x158>)
   80a20:	681b      	ldr	r3, [r3, #0]
   80a22:	f043 0a0a 	orr.w	sl, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80a26:	fa5f f08a 	uxtb.w	r0, sl
   80a2a:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80a2c:	f3ca 2007 	ubfx	r0, sl, #8, #8
   80a30:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80a32:	f3ca 4007 	ubfx	r0, sl, #16, #8
   80a36:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80a38:	ea4f 601a 	mov.w	r0, sl, lsr #24
   80a3c:	47b8      	blx	r7
		XPROGTarget_SendByte(WriteBuffCommand);
   80a3e:	4648      	mov	r0, r9
   80a40:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80a42:	206b      	movs	r0, #107	; 0x6b
   80a44:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a48:	b2d8      	uxtb	r0, r3
   80a4a:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a4e:	f3c3 2007 	ubfx	r0, r3, #8, #8
   80a52:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a56:	f3c3 4007 	ubfx	r0, r3, #16, #8
   80a5a:	47b8      	blx	r7
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a5e:	0e18      	lsrs	r0, r3, #24
   80a60:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80a62:	20a0      	movs	r0, #160	; 0xa0
   80a64:	47b8      	blx	r7
		XPROGTarget_SendByte(WriteSize - 1);
   80a66:	1e70      	subs	r0, r6, #1
   80a68:	b2c0      	uxtb	r0, r0
   80a6a:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80a6c:	2064      	movs	r0, #100	; 0x64
   80a6e:	442e      	add	r6, r5
   80a70:	47b8      	blx	r7
		  XPROGTarget_SendByte(*(WriteBuffer++));
   80a72:	f815 0b01 	ldrb.w	r0, [r5], #1
   80a76:	47b8      	blx	r7
		while (WriteSize--)
   80a78:	42b5      	cmp	r5, r6
   80a7a:	d1fa      	bne.n	80a72 <XMEGANVM_WritePageMemory+0xf2>
   80a7c:	e78c      	b.n	80998 <XMEGANVM_WritePageMemory+0x18>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80a7e:	f8df a054 	ldr.w	sl, [pc, #84]	; 80ad4 <XMEGANVM_WritePageMemory+0x154>
   80a82:	204c      	movs	r0, #76	; 0x4c
   80a84:	47d0      	blx	sl
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80a86:	4b14      	ldr	r3, [pc, #80]	; (80ad8 <XMEGANVM_WritePageMemory+0x158>)
   80a88:	681a      	ldr	r2, [r3, #0]
   80a8a:	f042 0b0a 	orr.w	fp, r2, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80a8e:	fa5f f08b 	uxtb.w	r0, fp
   80a92:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80a94:	f3cb 2007 	ubfx	r0, fp, #8, #8
   80a98:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80a9a:	f3cb 4007 	ubfx	r0, fp, #16, #8
   80a9e:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80aa0:	ea4f 601b 	mov.w	r0, fp, lsr #24
   80aa4:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   80aa6:	4638      	mov	r0, r7
   80aa8:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80aaa:	204c      	movs	r0, #76	; 0x4c
   80aac:	47d0      	blx	sl
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80aae:	4b0a      	ldr	r3, [pc, #40]	; (80ad8 <XMEGANVM_WritePageMemory+0x158>)
   80ab0:	681f      	ldr	r7, [r3, #0]
   80ab2:	f047 070b 	orr.w	r7, r7, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80ab6:	b2f8      	uxtb	r0, r7
   80ab8:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80aba:	f3c7 2007 	ubfx	r0, r7, #8, #8
   80abe:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80ac0:	f3c7 4007 	ubfx	r0, r7, #16, #8
   80ac4:	47d0      	blx	sl
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80ac6:	0e38      	lsrs	r0, r7, #24
   80ac8:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80aca:	2001      	movs	r0, #1
   80acc:	47d0      	blx	sl
   80ace:	e761      	b.n	80994 <XMEGANVM_WritePageMemory+0x14>
   80ad0:	00080691 	.word	0x00080691
   80ad4:	00081005 	.word	0x00081005
   80ad8:	200001dc 	.word	0x200001dc

00080adc <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   80adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80ae0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80c9c <XMEGANVM_EraseMemory+0x1c0>
{
   80ae4:	4606      	mov	r6, r0
   80ae6:	460d      	mov	r5, r1
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80ae8:	47c0      	blx	r8
   80aea:	2800      	cmp	r0, #0
   80aec:	d033      	beq.n	80b56 <XMEGANVM_EraseMemory+0x7a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   80aee:	2e40      	cmp	r6, #64	; 0x40
   80af0:	4607      	mov	r7, r0
   80af2:	f000 80b8 	beq.w	80c66 <XMEGANVM_EraseMemory+0x18a>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   80af6:	2e30      	cmp	r6, #48	; 0x30
	{
		/* Send the EEPROM page buffer erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80af8:	4c69      	ldr	r4, [pc, #420]	; (80ca0 <XMEGANVM_EraseMemory+0x1c4>)
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   80afa:	d030      	beq.n	80b5e <XMEGANVM_EraseMemory+0x82>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80afc:	204c      	movs	r0, #76	; 0x4c
   80afe:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80b00:	4b68      	ldr	r3, [pc, #416]	; (80ca4 <XMEGANVM_EraseMemory+0x1c8>)
   80b02:	681b      	ldr	r3, [r3, #0]
   80b04:	f043 080a 	orr.w	r8, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80b08:	fa5f f088 	uxtb.w	r0, r8
   80b0c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80b0e:	f3c8 2007 	ubfx	r0, r8, #8, #8
   80b12:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80b14:	f3c8 4007 	ubfx	r0, r8, #16, #8
   80b18:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80b1a:	ea4f 6018 	mov.w	r0, r8, lsr #24
   80b1e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
		XPROGTarget_SendByte(EraseCommand);
   80b20:	4630      	mov	r0, r6
   80b22:	47a0      	blx	r4

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b24:	204c      	movs	r0, #76	; 0x4c
   80b26:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80b28:	b2e8      	uxtb	r0, r5
   80b2a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80b2c:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80b30:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80b32:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80b36:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80b38:	0e28      	lsrs	r0, r5, #24
   80b3a:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
		XPROGTarget_SendByte(0x00);
   80b3c:	2000      	movs	r0, #0
   80b3e:	47a0      	blx	r4
   80b40:	4e59      	ldr	r6, [pc, #356]	; (80ca8 <XMEGANVM_EraseMemory+0x1cc>)
   80b42:	4d5a      	ldr	r5, [pc, #360]	; (80cac <XMEGANVM_EraseMemory+0x1d0>)
   80b44:	e001      	b.n	80b4a <XMEGANVM_EraseMemory+0x6e>
		if (StatusRegister & PDI_STATUS_NVM) {
   80b46:	0783      	lsls	r3, r0, #30
   80b48:	d406      	bmi.n	80b58 <XMEGANVM_EraseMemory+0x7c>
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   80b4a:	2080      	movs	r0, #128	; 0x80
   80b4c:	47a0      	blx	r4
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   80b4e:	47b0      	blx	r6
		if (TimeoutTicksRemaining == 0) {
   80b50:	682b      	ldr	r3, [r5, #0]
   80b52:	2b00      	cmp	r3, #0
   80b54:	d1f7      	bne.n	80b46 <XMEGANVM_EraseMemory+0x6a>
	  return false;
   80b56:	2700      	movs	r7, #0
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
	  return false;
	}

	return true;
}
   80b58:	4638      	mov	r0, r7
   80b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80b5e:	4e51      	ldr	r6, [pc, #324]	; (80ca4 <XMEGANVM_EraseMemory+0x1c8>)
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b60:	204c      	movs	r0, #76	; 0x4c
   80b62:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80b64:	6833      	ldr	r3, [r6, #0]
   80b66:	f043 090a 	orr.w	r9, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80b6a:	fa5f f089 	uxtb.w	r0, r9
   80b6e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80b70:	f3c9 2007 	ubfx	r0, r9, #8, #8
   80b74:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80b76:	f3c9 4007 	ubfx	r0, r9, #16, #8
   80b7a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80b7c:	ea4f 6019 	mov.w	r0, r9, lsr #24
   80b80:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   80b82:	2036      	movs	r0, #54	; 0x36
   80b84:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80b86:	204c      	movs	r0, #76	; 0x4c
   80b88:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80b8a:	6833      	ldr	r3, [r6, #0]
   80b8c:	f043 090b 	orr.w	r9, r3, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80b90:	fa5f f089 	uxtb.w	r0, r9
   80b94:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80b96:	f3c9 2007 	ubfx	r0, r9, #8, #8
   80b9a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80b9c:	f3c9 4007 	ubfx	r0, r9, #16, #8
   80ba0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80ba2:	ea4f 6019 	mov.w	r0, r9, lsr #24
   80ba6:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80ba8:	2001      	movs	r0, #1
   80baa:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   80bac:	47c0      	blx	r8
   80bae:	2800      	cmp	r0, #0
   80bb0:	d0d1      	beq.n	80b56 <XMEGANVM_EraseMemory+0x7a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80bb2:	204c      	movs	r0, #76	; 0x4c
   80bb4:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80bb6:	6833      	ldr	r3, [r6, #0]
   80bb8:	f043 080a 	orr.w	r8, r3, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80bbc:	fa5f f088 	uxtb.w	r0, r8
   80bc0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80bc2:	f3c8 2007 	ubfx	r0, r8, #8, #8
   80bc6:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80bc8:	f3c8 4007 	ubfx	r0, r8, #16, #8
   80bcc:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80bce:	ea4f 6018 	mov.w	r0, r8, lsr #24
   80bd2:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   80bd4:	2033      	movs	r0, #51	; 0x33
   80bd6:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   80bd8:	206b      	movs	r0, #107	; 0x6b
   80bda:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80bdc:	b2e8      	uxtb	r0, r5
   80bde:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80be0:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80be4:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80be6:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80bea:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   80bec:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80cb0 <XMEGANVM_EraseMemory+0x1d4>
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80bf0:	0e28      	lsrs	r0, r5, #24
   80bf2:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   80bf4:	20a0      	movs	r0, #160	; 0xa0
   80bf6:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   80bf8:	f8b8 0000 	ldrh.w	r0, [r8]
   80bfc:	3801      	subs	r0, #1
   80bfe:	b2c0      	uxtb	r0, r0
   80c00:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   80c02:	2064      	movs	r0, #100	; 0x64
   80c04:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80c06:	f8b8 3000 	ldrh.w	r3, [r8]
   80c0a:	b14b      	cbz	r3, 80c20 <XMEGANVM_EraseMemory+0x144>
   80c0c:	2500      	movs	r5, #0
		  XPROGTarget_SendByte(0x00);
   80c0e:	2000      	movs	r0, #0
   80c10:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   80c12:	1c6b      	adds	r3, r5, #1
   80c14:	f8b8 1000 	ldrh.w	r1, [r8]
   80c18:	b2da      	uxtb	r2, r3
   80c1a:	4291      	cmp	r1, r2
   80c1c:	4615      	mov	r5, r2
   80c1e:	d8f6      	bhi.n	80c0e <XMEGANVM_EraseMemory+0x132>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c20:	204c      	movs	r0, #76	; 0x4c
   80c22:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c24:	6835      	ldr	r5, [r6, #0]
   80c26:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80c2a:	b2e8      	uxtb	r0, r5
   80c2c:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80c2e:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80c32:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80c34:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80c38:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80c3a:	0e28      	lsrs	r0, r5, #24
   80c3c:	47a0      	blx	r4
		XPROGTarget_SendByte(EraseCommand);
   80c3e:	2030      	movs	r0, #48	; 0x30
   80c40:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c42:	204c      	movs	r0, #76	; 0x4c
   80c44:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c46:	6835      	ldr	r5, [r6, #0]
   80c48:	f045 050b 	orr.w	r5, r5, #11
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80c4c:	b2e8      	uxtb	r0, r5
   80c4e:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80c50:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80c54:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80c56:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80c5a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80c5c:	0e28      	lsrs	r0, r5, #24
   80c5e:	47a0      	blx	r4
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   80c60:	2001      	movs	r0, #1
   80c62:	47a0      	blx	r4
   80c64:	e76c      	b.n	80b40 <XMEGANVM_EraseMemory+0x64>
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c66:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80ca4 <XMEGANVM_EraseMemory+0x1c8>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c6a:	4c0d      	ldr	r4, [pc, #52]	; (80ca0 <XMEGANVM_EraseMemory+0x1c4>)
   80c6c:	204c      	movs	r0, #76	; 0x4c
   80c6e:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c70:	f8d8 5000 	ldr.w	r5, [r8]
   80c74:	f045 050a 	orr.w	r5, r5, #10
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   80c78:	b2e8      	uxtb	r0, r5
   80c7a:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   80c7c:	f3c5 2007 	ubfx	r0, r5, #8, #8
   80c80:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   80c82:	f3c5 4007 	ubfx	r0, r5, #16, #8
   80c86:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   80c88:	0e28      	lsrs	r0, r5, #24
   80c8a:	47a0      	blx	r4
		XPROGTarget_SendByte(EraseCommand);
   80c8c:	4630      	mov	r0, r6
   80c8e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   80c90:	204c      	movs	r0, #76	; 0x4c
   80c92:	47a0      	blx	r4
	uint32_t Address = XPROG_Param_NVMBase | Register;
   80c94:	f8d8 5000 	ldr.w	r5, [r8]
   80c98:	e7d6      	b.n	80c48 <XMEGANVM_EraseMemory+0x16c>
   80c9a:	bf00      	nop
   80c9c:	00080691 	.word	0x00080691
   80ca0:	00081005 	.word	0x00081005
   80ca4:	200001dc 	.word	0x200001dc
   80ca8:	00081031 	.word	0x00081031
   80cac:	20001798 	.word	0x20001798
   80cb0:	200001da 	.word	0x200001da

00080cb4 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   80cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   80cb6:	4c7f      	ldr	r4, [pc, #508]	; (80eb4 <XPROGProtocol_Command+0x200>)
   80cb8:	4d7f      	ldr	r5, [pc, #508]	; (80eb8 <XPROGProtocol_Command+0x204>)
   80cba:	8861      	ldrh	r1, [r4, #2]
{
   80cbc:	b085      	sub	sp, #20
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   80cbe:	b2ca      	uxtb	r2, r1
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   80cc0:	1e53      	subs	r3, r2, #1
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   80cc2:	702a      	strb	r2, [r5, #0]
	switch (status_payload[0])
   80cc4:	2b21      	cmp	r3, #33	; 0x21
   80cc6:	d829      	bhi.n	80d1c <XPROGProtocol_Command+0x68>
   80cc8:	e8df f003 	tbb	[pc, r3]
   80ccc:	5f484037 	.word	0x5f484037
   80cd0:	288a8711 	.word	0x288a8711
   80cd4:	28282828 	.word	0x28282828
   80cd8:	28282828 	.word	0x28282828
   80cdc:	28282828 	.word	0x28282828
   80ce0:	28282828 	.word	0x28282828
   80ce4:	28282828 	.word	0x28282828
   80ce8:	9d282828 	.word	0x9d282828
   80cec:	2dab      	.short	0x2dab
		case XPROG_CMD_WRITE_MEM:
			start_timeoutcnt();
			XPROGProtocol_WriteMemory(xprog_rambuf);
			break;
		case XPROG_CMD_READ_MEM:
			start_timeoutcnt();
   80cee:	4b73      	ldr	r3, [pc, #460]	; (80ebc <XPROGProtocol_Command+0x208>)
   80cf0:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   80cf2:	f04f 0c00 	mov.w	ip, #0
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80cf6:	68a3      	ldr	r3, [r4, #8]
	XPROG_Status = XPROG_ERR_OK;
   80cf8:	4d71      	ldr	r5, [pc, #452]	; (80ec0 <XPROGProtocol_Command+0x20c>)
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   80cfa:	f8b3 2005 	ldrh.w	r2, [r3, #5]
   80cfe:	f8d3 0001 	ldr.w	r0, [r3, #1]
   80d02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   80d06:	bf28      	it	cs
   80d08:	f44f 7280 	movcs.w	r2, #256	; 0x100
   80d0c:	496d      	ldr	r1, [pc, #436]	; (80ec4 <XPROGProtocol_Command+0x210>)
   80d0e:	4b6e      	ldr	r3, [pc, #440]	; (80ec8 <XPROGProtocol_Command+0x214>)
	XPROG_Status = XPROG_ERR_OK;
   80d10:	f885 c000 	strb.w	ip, [r5]
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   80d14:	4798      	blx	r3
   80d16:	b908      	cbnz	r0, 80d1c <XPROGProtocol_Command+0x68>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   80d18:	2303      	movs	r3, #3
   80d1a:	702b      	strb	r3, [r5, #0]
	stop_timeoutcnt();
   80d1c:	4b6b      	ldr	r3, [pc, #428]	; (80ecc <XPROGProtocol_Command+0x218>)
   80d1e:	4798      	blx	r3
	return false;
   80d20:	2000      	movs	r0, #0
}
   80d22:	b005      	add	sp, #20
   80d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80d26:	88e2      	ldrh	r2, [r4, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80d28:	0a0b      	lsrs	r3, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80d2a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   80d2e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80d32:	f340 809a 	ble.w	80e6a <XPROGProtocol_Command+0x1b6>
				return false;
   80d36:	2000      	movs	r0, #0
   80d38:	e7f3      	b.n	80d22 <XPROGProtocol_Command+0x6e>
			start_timeoutcnt();
   80d3a:	4b60      	ldr	r3, [pc, #384]	; (80ebc <XPROGProtocol_Command+0x208>)
   80d3c:	4798      	blx	r3
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   80d3e:	4b64      	ldr	r3, [pc, #400]	; (80ed0 <XPROGProtocol_Command+0x21c>)
   80d40:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   80d42:	4b5f      	ldr	r3, [pc, #380]	; (80ec0 <XPROGProtocol_Command+0x20c>)
   80d44:	f080 0001 	eor.w	r0, r0, #1
   80d48:	7018      	strb	r0, [r3, #0]
}
   80d4a:	e7e7      	b.n	80d1c <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   80d4c:	4b5b      	ldr	r3, [pc, #364]	; (80ebc <XPROGProtocol_Command+0x208>)
   80d4e:	4798      	blx	r3
    XMEGANVM_DisablePDI();
   80d50:	4b60      	ldr	r3, [pc, #384]	; (80ed4 <XPROGProtocol_Command+0x220>)
   80d52:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   80d54:	2200      	movs	r2, #0
   80d56:	4b5a      	ldr	r3, [pc, #360]	; (80ec0 <XPROGProtocol_Command+0x20c>)
   80d58:	701a      	strb	r2, [r3, #0]
}
   80d5a:	e7df      	b.n	80d1c <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   80d5c:	4b57      	ldr	r3, [pc, #348]	; (80ebc <XPROGProtocol_Command+0x208>)
   80d5e:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   80d60:	2000      	movs	r0, #0
	if (udd_g_ctrlreq.payload_size < 5){
   80d62:	89a3      	ldrh	r3, [r4, #12]
	XPROG_Status = XPROG_ERR_OK;
   80d64:	4d56      	ldr	r5, [pc, #344]	; (80ec0 <XPROGProtocol_Command+0x20c>)
	if (udd_g_ctrlreq.payload_size < 5){
   80d66:	2b04      	cmp	r3, #4
	XPROG_Status = XPROG_ERR_OK;
   80d68:	7028      	strb	r0, [r5, #0]
	if (udd_g_ctrlreq.payload_size < 5){
   80d6a:	d967      	bls.n	80e3c <XPROGProtocol_Command+0x188>
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   80d6c:	68a2      	ldr	r2, [r4, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80d6e:	7813      	ldrb	r3, [r2, #0]
   80d70:	f8d2 1001 	ldr.w	r1, [r2, #1]
	switch (MemoryType)
   80d74:	3b01      	subs	r3, #1
   80d76:	b2db      	uxtb	r3, r3
   80d78:	2b07      	cmp	r3, #7
   80d7a:	bf9c      	itt	ls
   80d7c:	4a56      	ldrls	r2, [pc, #344]	; (80ed8 <XPROGProtocol_Command+0x224>)
   80d7e:	5cd0      	ldrbls	r0, [r2, r3]
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   80d80:	4b56      	ldr	r3, [pc, #344]	; (80edc <XPROGProtocol_Command+0x228>)
   80d82:	4798      	blx	r3
   80d84:	2800      	cmp	r0, #0
   80d86:	d1c9      	bne.n	80d1c <XPROGProtocol_Command+0x68>
   80d88:	e7c6      	b.n	80d18 <XPROGProtocol_Command+0x64>
			start_timeoutcnt();
   80d8a:	4b4c      	ldr	r3, [pc, #304]	; (80ebc <XPROGProtocol_Command+0x208>)
   80d8c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < 8) {
   80d8e:	88e3      	ldrh	r3, [r4, #6]
	XPROG_Status = XPROG_ERR_OK;
   80d90:	2200      	movs	r2, #0
	if (udd_g_ctrlreq.req.wLength < 8) {
   80d92:	2b07      	cmp	r3, #7
		XPROG_Status = XPROG_ERR_FAILED;
   80d94:	bf98      	it	ls
   80d96:	2301      	movls	r3, #1
	XPROG_Status = XPROG_ERR_OK;
   80d98:	4d49      	ldr	r5, [pc, #292]	; (80ec0 <XPROGProtocol_Command+0x20c>)
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   80d9a:	68a4      	ldr	r4, [r4, #8]
	XPROG_Status = XPROG_ERR_OK;
   80d9c:	702a      	strb	r2, [r5, #0]
		XPROG_Status = XPROG_ERR_FAILED;
   80d9e:	bf98      	it	ls
   80da0:	702b      	strbls	r3, [r5, #0]
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   80da2:	7823      	ldrb	r3, [r4, #0]
   80da4:	f8d4 6002 	ldr.w	r6, [r4, #2]
	switch (MemoryType)
   80da8:	3b01      	subs	r3, #1
   80daa:	b2db      	uxtb	r3, r3
   80dac:	2b05      	cmp	r3, #5
   80dae:	d948      	bls.n	80e42 <XPROGProtocol_Command+0x18e>
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   80db0:	222e      	movs	r2, #46	; 0x2e
   80db2:	2126      	movs	r1, #38	; 0x26
   80db4:	2023      	movs	r0, #35	; 0x23
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   80db6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
   80dba:	7863      	ldrb	r3, [r4, #1]
   80dbc:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
   80dc0:	4664      	mov	r4, ip
   80dc2:	bf28      	it	cs
   80dc4:	f44f 7480 	movcs.w	r4, #256	; 0x100
   80dc8:	9402      	str	r4, [sp, #8]
   80dca:	4c3e      	ldr	r4, [pc, #248]	; (80ec4 <XPROGProtocol_Command+0x210>)
   80dcc:	9600      	str	r6, [sp, #0]
   80dce:	9401      	str	r4, [sp, #4]
   80dd0:	4c43      	ldr	r4, [pc, #268]	; (80ee0 <XPROGProtocol_Command+0x22c>)
   80dd2:	47a0      	blx	r4
   80dd4:	2800      	cmp	r0, #0
   80dd6:	d1a1      	bne.n	80d1c <XPROGProtocol_Command+0x68>
   80dd8:	e79e      	b.n	80d18 <XPROGProtocol_Command+0x64>
			start_timeoutcnt();
   80dda:	4b38      	ldr	r3, [pc, #224]	; (80ebc <XPROGProtocol_Command+0x208>)
   80ddc:	4798      	blx	r3
			break;
   80dde:	e79d      	b.n	80d1c <XPROGProtocol_Command+0x68>
			start_timeoutcnt();
   80de0:	4b36      	ldr	r3, [pc, #216]	; (80ebc <XPROGProtocol_Command+0x208>)
   80de2:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   80de4:	2300      	movs	r3, #0

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   80de6:	89a2      	ldrh	r2, [r4, #12]
	XPROG_Status = XPROG_ERR_OK;
   80de8:	4d35      	ldr	r5, [pc, #212]	; (80ec0 <XPROGProtocol_Command+0x20c>)
	if (udd_g_ctrlreq.payload_size < 2){
   80dea:	2a01      	cmp	r2, #1
	XPROG_Status = XPROG_ERR_OK;
   80dec:	702b      	strb	r3, [r5, #0]
	if (udd_g_ctrlreq.payload_size < 2){
   80dee:	d925      	bls.n	80e3c <XPROGProtocol_Command+0x188>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   80df0:	68a1      	ldr	r1, [r4, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   80df2:	780b      	ldrb	r3, [r1, #0]
   80df4:	3b01      	subs	r3, #1
   80df6:	2b07      	cmp	r3, #7
   80df8:	d820      	bhi.n	80e3c <XPROGProtocol_Command+0x188>
   80dfa:	e8df f003 	tbb	[pc, r3]
   80dfe:	4c53      	.short	0x4c53
   80e00:	1f1f4448 	.word	0x1f1f4448
   80e04:	3d1f      	.short	0x3d1f
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80e06:	4b37      	ldr	r3, [pc, #220]	; (80ee4 <XPROGProtocol_Command+0x230>)
			udd_g_ctrlreq.payload_size = 3;
   80e08:	2203      	movs	r2, #3
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80e0a:	681b      	ldr	r3, [r3, #0]
			status_payload[1] = XPROG_Status;
   80e0c:	492c      	ldr	r1, [pc, #176]	; (80ec0 <XPROGProtocol_Command+0x20c>)
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80e0e:	fab3 f383 	clz	r3, r3
			status_payload[1] = XPROG_Status;
   80e12:	7809      	ldrb	r1, [r1, #0]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80e14:	095b      	lsrs	r3, r3, #5
			return true;
   80e16:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = status_payload;
   80e18:	60a5      	str	r5, [r4, #8]
			status_payload[1] = XPROG_Status;
   80e1a:	7069      	strb	r1, [r5, #1]
			udd_g_ctrlreq.payload_size = 3;
   80e1c:	81a2      	strh	r2, [r4, #12]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   80e1e:	70ab      	strb	r3, [r5, #2]
			return true;
   80e20:	e77f      	b.n	80d22 <XPROGProtocol_Command+0x6e>
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80e22:	88e3      	ldrh	r3, [r4, #6]
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   80e24:	0a0d      	lsrs	r5, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   80e26:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   80e2a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   80e2e:	dc82      	bgt.n	80d36 <XPROGProtocol_Command+0x82>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   80e30:	4a24      	ldr	r2, [pc, #144]	; (80ec4 <XPROGProtocol_Command+0x210>)
			return true;
   80e32:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   80e34:	442a      	add	r2, r5
   80e36:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80e38:	81a3      	strh	r3, [r4, #12]
			return true;
   80e3a:	e772      	b.n	80d22 <XPROGProtocol_Command+0x6e>
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   80e3c:	2301      	movs	r3, #1
   80e3e:	702b      	strb	r3, [r5, #0]
			break;
   80e40:	e76c      	b.n	80d1c <XPROGProtocol_Command+0x68>
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   80e42:	4929      	ldr	r1, [pc, #164]	; (80ee8 <XPROGProtocol_Command+0x234>)
   80e44:	4a29      	ldr	r2, [pc, #164]	; (80eec <XPROGProtocol_Command+0x238>)
   80e46:	5ccf      	ldrb	r7, [r1, r3]
   80e48:	4929      	ldr	r1, [pc, #164]	; (80ef0 <XPROGProtocol_Command+0x23c>)
   80e4a:	5cd2      	ldrb	r2, [r2, r3]
   80e4c:	5cc8      	ldrb	r0, [r1, r3]
   80e4e:	4929      	ldr	r1, [pc, #164]	; (80ef4 <XPROGProtocol_Command+0x240>)
   80e50:	5cc9      	ldrb	r1, [r1, r3]
   80e52:	2f00      	cmp	r7, #0
   80e54:	d1af      	bne.n	80db6 <XPROGProtocol_Command+0x102>
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   80e56:	4b1b      	ldr	r3, [pc, #108]	; (80ec4 <XPROGProtocol_Command+0x210>)
   80e58:	4610      	mov	r0, r2
   80e5a:	4631      	mov	r1, r6
   80e5c:	781a      	ldrb	r2, [r3, #0]
   80e5e:	4b26      	ldr	r3, [pc, #152]	; (80ef8 <XPROGProtocol_Command+0x244>)
   80e60:	4798      	blx	r3
   80e62:	2800      	cmp	r0, #0
   80e64:	f47f af5a 	bne.w	80d1c <XPROGProtocol_Command+0x68>
   80e68:	e756      	b.n	80d18 <XPROGProtocol_Command+0x64>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   80e6a:	4816      	ldr	r0, [pc, #88]	; (80ec4 <XPROGProtocol_Command+0x210>)
   80e6c:	68a1      	ldr	r1, [r4, #8]
   80e6e:	4418      	add	r0, r3
   80e70:	4c22      	ldr	r4, [pc, #136]	; (80efc <XPROGProtocol_Command+0x248>)
   80e72:	47a0      	blx	r4
			return true;
   80e74:	2001      	movs	r0, #1
   80e76:	e754      	b.n	80d22 <XPROGProtocol_Command+0x6e>
			if (udd_g_ctrlreq.payload_size < 5){
   80e78:	2a04      	cmp	r2, #4
   80e7a:	d9df      	bls.n	80e3c <XPROGProtocol_Command+0x188>
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   80e7c:	f8d1 0001 	ldr.w	r0, [r1, #1]
   80e80:	4b1f      	ldr	r3, [pc, #124]	; (80f00 <XPROGProtocol_Command+0x24c>)
   80e82:	4798      	blx	r3
			break;
   80e84:	e74a      	b.n	80d1c <XPROGProtocol_Command+0x68>
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   80e86:	4b1f      	ldr	r3, [pc, #124]	; (80f04 <XPROGProtocol_Command+0x250>)
   80e88:	784a      	ldrb	r2, [r1, #1]
   80e8a:	701a      	strb	r2, [r3, #0]
			break;
   80e8c:	e746      	b.n	80d1c <XPROGProtocol_Command+0x68>
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   80e8e:	4b1e      	ldr	r3, [pc, #120]	; (80f08 <XPROGProtocol_Command+0x254>)
   80e90:	784a      	ldrb	r2, [r1, #1]
   80e92:	701a      	strb	r2, [r3, #0]
			break;
   80e94:	e742      	b.n	80d1c <XPROGProtocol_Command+0x68>
			if (udd_g_ctrlreq.payload_size < 3){
   80e96:	2a02      	cmp	r2, #2
   80e98:	d0d0      	beq.n	80e3c <XPROGProtocol_Command+0x188>
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   80e9a:	f8b1 2001 	ldrh.w	r2, [r1, #1]
   80e9e:	4b1b      	ldr	r3, [pc, #108]	; (80f0c <XPROGProtocol_Command+0x258>)
   80ea0:	801a      	strh	r2, [r3, #0]
			break;
   80ea2:	e73b      	b.n	80d1c <XPROGProtocol_Command+0x68>
			if (udd_g_ctrlreq.payload_size < 5){
   80ea4:	2a04      	cmp	r2, #4
   80ea6:	d9c9      	bls.n	80e3c <XPROGProtocol_Command+0x188>
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   80ea8:	f8d1 2001 	ldr.w	r2, [r1, #1]
   80eac:	4b18      	ldr	r3, [pc, #96]	; (80f10 <XPROGProtocol_Command+0x25c>)
   80eae:	601a      	str	r2, [r3, #0]
			break;
   80eb0:	e734      	b.n	80d1c <XPROGProtocol_Command+0x68>
   80eb2:	bf00      	nop
   80eb4:	2000200c 	.word	0x2000200c
   80eb8:	20001690 	.word	0x20001690
   80ebc:	00081cc5 	.word	0x00081cc5
   80ec0:	2000168c 	.word	0x2000168c
   80ec4:	20001694 	.word	0x20001694
   80ec8:	000807d5 	.word	0x000807d5
   80ecc:	00081d0d 	.word	0x00081d0d
   80ed0:	000806e5 	.word	0x000806e5
   80ed4:	00080789 	.word	0x00080789
   80ed8:	0008d768 	.word	0x0008d768
   80edc:	00080add 	.word	0x00080add
   80ee0:	00080981 	.word	0x00080981
   80ee4:	20001798 	.word	0x20001798
   80ee8:	0008d760 	.word	0x0008d760
   80eec:	0008d770 	.word	0x0008d770
   80ef0:	0008d778 	.word	0x0008d778
   80ef4:	0008d780 	.word	0x0008d780
   80ef8:	000808d9 	.word	0x000808d9
   80efc:	00086d65 	.word	0x00086d65
   80f00:	00081c55 	.word	0x00081c55
   80f04:	200001e1 	.word	0x200001e1
   80f08:	200001e0 	.word	0x200001e0
   80f0c:	200001da 	.word	0x200001da
   80f10:	200001dc 	.word	0x200001dc

00080f14 <XPROGTarget_SetTxMode>:
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
	}
}

static void XPROGTarget_SetTxMode(void)
{
   80f14:	b538      	push	{r3, r4, r5, lr}
   80f16:	4c14      	ldr	r4, [pc, #80]	; (80f68 <XPROGTarget_SetTxMode+0x54>)
	/* Wait for a full cycle of the clock */
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   80f18:	4d14      	ldr	r5, [pc, #80]	; (80f6c <XPROGTarget_SetTxMode+0x58>)
   80f1a:	e001      	b.n	80f20 <XPROGTarget_SetTxMode+0xc>
   80f1c:	682b      	ldr	r3, [r5, #0]
   80f1e:	b11b      	cbz	r3, 80f28 <XPROGTarget_SetTxMode+0x14>
   80f20:	2018      	movs	r0, #24
   80f22:	47a0      	blx	r4
   80f24:	2800      	cmp	r0, #0
   80f26:	d1f9      	bne.n	80f1c <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   80f28:	4d10      	ldr	r5, [pc, #64]	; (80f6c <XPROGTarget_SetTxMode+0x58>)
   80f2a:	e001      	b.n	80f30 <XPROGTarget_SetTxMode+0x1c>
   80f2c:	682b      	ldr	r3, [r5, #0]
   80f2e:	b11b      	cbz	r3, 80f38 <XPROGTarget_SetTxMode+0x24>
   80f30:	2018      	movs	r0, #24
   80f32:	47a0      	blx	r4
   80f34:	2800      	cmp	r0, #0
   80f36:	d0f9      	beq.n	80f2c <XPROGTarget_SetTxMode+0x18>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   80f38:	4d0c      	ldr	r5, [pc, #48]	; (80f6c <XPROGTarget_SetTxMode+0x58>)
   80f3a:	e001      	b.n	80f40 <XPROGTarget_SetTxMode+0x2c>
   80f3c:	682b      	ldr	r3, [r5, #0]
   80f3e:	b11b      	cbz	r3, 80f48 <XPROGTarget_SetTxMode+0x34>
   80f40:	2018      	movs	r0, #24
   80f42:	47a0      	blx	r4
   80f44:	2800      	cmp	r0, #0
   80f46:	d1f9      	bne.n	80f3c <XPROGTarget_SetTxMode+0x28>
		
	usart_disable_rx(USART_PDI);
   80f48:	4809      	ldr	r0, [pc, #36]	; (80f70 <XPROGTarget_SetTxMode+0x5c>)
   80f4a:	4b0a      	ldr	r3, [pc, #40]	; (80f74 <XPROGTarget_SetTxMode+0x60>)
   80f4c:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   80f4e:	4808      	ldr	r0, [pc, #32]	; (80f70 <XPROGTarget_SetTxMode+0x5c>)
   80f50:	4b09      	ldr	r3, [pc, #36]	; (80f78 <XPROGTarget_SetTxMode+0x64>)
   80f52:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   80f54:	4b09      	ldr	r3, [pc, #36]	; (80f7c <XPROGTarget_SetTxMode+0x68>)
   80f56:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f5a:	2014      	movs	r0, #20
   80f5c:	4798      	blx	r3
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_high(PIN_PDIDWR_GPIO);
	gpio_set_pin_high(PIN_PDICWR_GPIO);
#endif

	IsSending = true;
   80f5e:	2201      	movs	r2, #1
   80f60:	4b07      	ldr	r3, [pc, #28]	; (80f80 <XPROGTarget_SetTxMode+0x6c>)
   80f62:	701a      	strb	r2, [r3, #0]
}
   80f64:	bd38      	pop	{r3, r4, r5, pc}
   80f66:	bf00      	nop
   80f68:	00085d01 	.word	0x00085d01
   80f6c:	20001798 	.word	0x20001798
   80f70:	40094000 	.word	0x40094000
   80f74:	000841cd 	.word	0x000841cd
   80f78:	000841b5 	.word	0x000841b5
   80f7c:	00085d79 	.word	0x00085d79
   80f80:	20001794 	.word	0x20001794

00080f84 <XPROGTarget_DisableTargetPDI>:
{
   80f84:	b570      	push	{r4, r5, r6, lr}
	if (IsSending)
   80f86:	4e17      	ldr	r6, [pc, #92]	; (80fe4 <XPROGTarget_DisableTargetPDI+0x60>)
   80f88:	7833      	ldrb	r3, [r6, #0]
   80f8a:	b9bb      	cbnz	r3, 80fbc <XPROGTarget_DisableTargetPDI+0x38>
   80f8c:	4d16      	ldr	r5, [pc, #88]	; (80fe8 <XPROGTarget_DisableTargetPDI+0x64>)
   80f8e:	4c17      	ldr	r4, [pc, #92]	; (80fec <XPROGTarget_DisableTargetPDI+0x68>)
	usart_disable_rx(USART_PDI);
   80f90:	4b17      	ldr	r3, [pc, #92]	; (80ff0 <XPROGTarget_DisableTargetPDI+0x6c>)
   80f92:	4818      	ldr	r0, [pc, #96]	; (80ff4 <XPROGTarget_DisableTargetPDI+0x70>)
   80f94:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   80f96:	4817      	ldr	r0, [pc, #92]	; (80ff4 <XPROGTarget_DisableTargetPDI+0x70>)
   80f98:	47a8      	blx	r5
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   80f9a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80f9e:	2018      	movs	r0, #24
   80fa0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   80fa2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fa6:	2015      	movs	r0, #21
   80fa8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   80faa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fae:	2014      	movs	r0, #20
   80fb0:	47a0      	blx	r4
}
   80fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   80fb6:	200e      	movs	r0, #14
   80fb8:	4b0f      	ldr	r3, [pc, #60]	; (80ff8 <XPROGTarget_DisableTargetPDI+0x74>)
   80fba:	4718      	bx	r3
   80fbc:	4d0f      	ldr	r5, [pc, #60]	; (80ffc <XPROGTarget_DisableTargetPDI+0x78>)

static void XPROGTarget_SetRxMode(void)
{
	while(usart_is_tx_empty(USART_PDI) == 0);
   80fbe:	4c0d      	ldr	r4, [pc, #52]	; (80ff4 <XPROGTarget_DisableTargetPDI+0x70>)
   80fc0:	4620      	mov	r0, r4
   80fc2:	47a8      	blx	r5
   80fc4:	2800      	cmp	r0, #0
   80fc6:	d0fb      	beq.n	80fc0 <XPROGTarget_DisableTargetPDI+0x3c>

	usart_disable_tx(USART_PDI);
   80fc8:	480a      	ldr	r0, [pc, #40]	; (80ff4 <XPROGTarget_DisableTargetPDI+0x70>)
   80fca:	4d07      	ldr	r5, [pc, #28]	; (80fe8 <XPROGTarget_DisableTargetPDI+0x64>)
   80fcc:	47a8      	blx	r5
	usart_enable_rx(USART_PDI);
   80fce:	4b0c      	ldr	r3, [pc, #48]	; (81000 <XPROGTarget_DisableTargetPDI+0x7c>)
   80fd0:	4808      	ldr	r0, [pc, #32]	; (80ff4 <XPROGTarget_DisableTargetPDI+0x70>)
   80fd2:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   80fd4:	4c05      	ldr	r4, [pc, #20]	; (80fec <XPROGTarget_DisableTargetPDI+0x68>)
   80fd6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fda:	2014      	movs	r0, #20
   80fdc:	47a0      	blx	r4
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   80fde:	2300      	movs	r3, #0
   80fe0:	7033      	strb	r3, [r6, #0]
}
   80fe2:	e7d5      	b.n	80f90 <XPROGTarget_DisableTargetPDI+0xc>
   80fe4:	20001794 	.word	0x20001794
   80fe8:	000841bd 	.word	0x000841bd
   80fec:	00085d79 	.word	0x00085d79
   80ff0:	000841cd 	.word	0x000841cd
   80ff4:	40094000 	.word	0x40094000
   80ff8:	00085ba1 	.word	0x00085ba1
   80ffc:	000841e5 	.word	0x000841e5
   81000:	000841c5 	.word	0x000841c5

00081004 <XPROGTarget_SendByte>:
{
   81004:	b510      	push	{r4, lr}
	if (!(IsSending))
   81006:	4b06      	ldr	r3, [pc, #24]	; (81020 <XPROGTarget_SendByte+0x1c>)
{
   81008:	4604      	mov	r4, r0
	if (!(IsSending))
   8100a:	781b      	ldrb	r3, [r3, #0]
   8100c:	b12b      	cbz	r3, 8101a <XPROGTarget_SendByte+0x16>
	usart_putchar(USART_PDI, data);	
   8100e:	4621      	mov	r1, r4
}
   81010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usart_putchar(USART_PDI, data);	
   81014:	4803      	ldr	r0, [pc, #12]	; (81024 <XPROGTarget_SendByte+0x20>)
   81016:	4b04      	ldr	r3, [pc, #16]	; (81028 <XPROGTarget_SendByte+0x24>)
   81018:	4718      	bx	r3
	  XPROGTarget_SetTxMode();
   8101a:	4b04      	ldr	r3, [pc, #16]	; (8102c <XPROGTarget_SendByte+0x28>)
   8101c:	4798      	blx	r3
   8101e:	e7f6      	b.n	8100e <XPROGTarget_SendByte+0xa>
   81020:	20001794 	.word	0x20001794
   81024:	40094000 	.word	0x40094000
   81028:	000841ed 	.word	0x000841ed
   8102c:	00080f15 	.word	0x00080f15

00081030 <XPROGTarget_ReceiveByte>:
{
   81030:	b570      	push	{r4, r5, r6, lr}
	if (IsSending)
   81032:	4e13      	ldr	r6, [pc, #76]	; (81080 <XPROGTarget_ReceiveByte+0x50>)
{
   81034:	b082      	sub	sp, #8
	if (IsSending)
   81036:	7833      	ldrb	r3, [r6, #0]
   81038:	b973      	cbnz	r3, 81058 <XPROGTarget_ReceiveByte+0x28>
   8103a:	4d12      	ldr	r5, [pc, #72]	; (81084 <XPROGTarget_ReceiveByte+0x54>)
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   8103c:	4c12      	ldr	r4, [pc, #72]	; (81088 <XPROGTarget_ReceiveByte+0x58>)
   8103e:	4e13      	ldr	r6, [pc, #76]	; (8108c <XPROGTarget_ReceiveByte+0x5c>)
   81040:	e001      	b.n	81046 <XPROGTarget_ReceiveByte+0x16>
   81042:	6833      	ldr	r3, [r6, #0]
   81044:	b123      	cbz	r3, 81050 <XPROGTarget_ReceiveByte+0x20>
   81046:	4620      	mov	r0, r4
   81048:	a901      	add	r1, sp, #4
   8104a:	47a8      	blx	r5
   8104c:	2801      	cmp	r0, #1
   8104e:	d0f8      	beq.n	81042 <XPROGTarget_ReceiveByte+0x12>
}
   81050:	f89d 0004 	ldrb.w	r0, [sp, #4]
   81054:	b002      	add	sp, #8
   81056:	bd70      	pop	{r4, r5, r6, pc}
   81058:	4d0d      	ldr	r5, [pc, #52]	; (81090 <XPROGTarget_ReceiveByte+0x60>)
	while(usart_is_tx_empty(USART_PDI) == 0);
   8105a:	4c0b      	ldr	r4, [pc, #44]	; (81088 <XPROGTarget_ReceiveByte+0x58>)
   8105c:	4620      	mov	r0, r4
   8105e:	47a8      	blx	r5
   81060:	2800      	cmp	r0, #0
   81062:	d0fb      	beq.n	8105c <XPROGTarget_ReceiveByte+0x2c>
	usart_disable_tx(USART_PDI);
   81064:	4808      	ldr	r0, [pc, #32]	; (81088 <XPROGTarget_ReceiveByte+0x58>)
   81066:	4b0b      	ldr	r3, [pc, #44]	; (81094 <XPROGTarget_ReceiveByte+0x64>)
   81068:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8106a:	4807      	ldr	r0, [pc, #28]	; (81088 <XPROGTarget_ReceiveByte+0x58>)
   8106c:	4b0a      	ldr	r3, [pc, #40]	; (81098 <XPROGTarget_ReceiveByte+0x68>)
   8106e:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   81070:	4b0a      	ldr	r3, [pc, #40]	; (8109c <XPROGTarget_ReceiveByte+0x6c>)
   81072:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81076:	2014      	movs	r0, #20
   81078:	4798      	blx	r3
	IsSending = false;
   8107a:	2300      	movs	r3, #0
   8107c:	7033      	strb	r3, [r6, #0]
}
   8107e:	e7dc      	b.n	8103a <XPROGTarget_ReceiveByte+0xa>
   81080:	20001794 	.word	0x20001794
   81084:	000841fd 	.word	0x000841fd
   81088:	40094000 	.word	0x40094000
   8108c:	20001798 	.word	0x20001798
   81090:	000841e5 	.word	0x000841e5
   81094:	000841bd 	.word	0x000841bd
   81098:	000841c5 	.word	0x000841c5
   8109c:	00085d79 	.word	0x00085d79

000810a0 <XPROGTarget_SendIdle>:
{
   810a0:	b570      	push	{r4, r5, r6, lr}
	if (!(IsSending))
   810a2:	4b13      	ldr	r3, [pc, #76]	; (810f0 <XPROGTarget_SendIdle+0x50>)
   810a4:	781b      	ldrb	r3, [r3, #0]
   810a6:	b303      	cbz	r3, 810ea <XPROGTarget_SendIdle+0x4a>
{
   810a8:	260c      	movs	r6, #12
   810aa:	4c12      	ldr	r4, [pc, #72]	; (810f4 <XPROGTarget_SendIdle+0x54>)
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   810ac:	4d12      	ldr	r5, [pc, #72]	; (810f8 <XPROGTarget_SendIdle+0x58>)
   810ae:	e001      	b.n	810b4 <XPROGTarget_SendIdle+0x14>
   810b0:	682b      	ldr	r3, [r5, #0]
   810b2:	b143      	cbz	r3, 810c6 <XPROGTarget_SendIdle+0x26>
   810b4:	2018      	movs	r0, #24
   810b6:	47a0      	blx	r4
   810b8:	2800      	cmp	r0, #0
   810ba:	d1f9      	bne.n	810b0 <XPROGTarget_SendIdle+0x10>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   810bc:	2018      	movs	r0, #24
   810be:	47a0      	blx	r4
   810c0:	b950      	cbnz	r0, 810d8 <XPROGTarget_SendIdle+0x38>
   810c2:	682b      	ldr	r3, [r5, #0]
   810c4:	b143      	cbz	r3, 810d8 <XPROGTarget_SendIdle+0x38>
   810c6:	2018      	movs	r0, #24
   810c8:	47a0      	blx	r4
   810ca:	2800      	cmp	r0, #0
   810cc:	d0f9      	beq.n	810c2 <XPROGTarget_SendIdle+0x22>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   810ce:	2018      	movs	r0, #24
   810d0:	47a0      	blx	r4
   810d2:	b128      	cbz	r0, 810e0 <XPROGTarget_SendIdle+0x40>
   810d4:	682b      	ldr	r3, [r5, #0]
   810d6:	b11b      	cbz	r3, 810e0 <XPROGTarget_SendIdle+0x40>
   810d8:	2018      	movs	r0, #24
   810da:	47a0      	blx	r4
   810dc:	2800      	cmp	r0, #0
   810de:	d1f9      	bne.n	810d4 <XPROGTarget_SendIdle+0x34>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   810e0:	3e01      	subs	r6, #1
   810e2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   810e6:	d1e5      	bne.n	810b4 <XPROGTarget_SendIdle+0x14>
}
   810e8:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetTxMode();
   810ea:	4b04      	ldr	r3, [pc, #16]	; (810fc <XPROGTarget_SendIdle+0x5c>)
   810ec:	4798      	blx	r3
   810ee:	e7db      	b.n	810a8 <XPROGTarget_SendIdle+0x8>
   810f0:	20001794 	.word	0x20001794
   810f4:	00085d01 	.word	0x00085d01
   810f8:	20001798 	.word	0x20001798
   810fc:	00080f15 	.word	0x00080f15

00081100 <XPROGTarget_EnableTargetPDI>:
{
   81100:	b5f0      	push	{r4, r5, r6, r7, lr}
	IsSending = false;
   81102:	2500      	movs	r5, #0
   81104:	4a19      	ldr	r2, [pc, #100]	; (8116c <XPROGTarget_EnableTargetPDI+0x6c>)
{
   81106:	b087      	sub	sp, #28
	pmc_enable_periph_clk(ul_id);
   81108:	4b19      	ldr	r3, [pc, #100]	; (81170 <XPROGTarget_EnableTargetPDI+0x70>)
   8110a:	200e      	movs	r0, #14
	IsSending = false;
   8110c:	7015      	strb	r5, [r2, #0]
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   8110e:	4c19      	ldr	r4, [pc, #100]	; (81174 <XPROGTarget_EnableTargetPDI+0x74>)
   81110:	4798      	blx	r3
   81112:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81116:	2014      	movs	r0, #20
   81118:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8111a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8111e:	2015      	movs	r0, #21
   81120:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   81122:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81126:	2018      	movs	r0, #24
   81128:	47a0      	blx	r4
	delay_us(50);
   8112a:	4f13      	ldr	r7, [pc, #76]	; (81178 <XPROGTarget_EnableTargetPDI+0x78>)
   8112c:	f240 1057 	movw	r0, #343	; 0x157
   81130:	47b8      	blx	r7
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   81132:	4b12      	ldr	r3, [pc, #72]	; (8117c <XPROGTarget_EnableTargetPDI+0x7c>)
   81134:	2014      	movs	r0, #20
   81136:	4798      	blx	r3
	delay_us(10);
   81138:	2045      	movs	r0, #69	; 0x45
   8113a:	47b8      	blx	r7
	const sam_usart_opt_t usart_pdid_settings = {
   8113c:	23c0      	movs	r3, #192	; 0xc0
   8113e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   81142:	4a0f      	ldr	r2, [pc, #60]	; (81180 <XPROGTarget_EnableTargetPDI+0x80>)
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81144:	4669      	mov	r1, sp
	const sam_usart_opt_t usart_pdid_settings = {
   81146:	e88d 002c 	stmia.w	sp, {r2, r3, r5}
   8114a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   8114e:	4a0d      	ldr	r2, [pc, #52]	; (81184 <XPROGTarget_EnableTargetPDI+0x84>)
   81150:	4b0d      	ldr	r3, [pc, #52]	; (81188 <XPROGTarget_EnableTargetPDI+0x88>)
   81152:	480e      	ldr	r0, [pc, #56]	; (8118c <XPROGTarget_EnableTargetPDI+0x8c>)
	XPROGTarget_SendIdle();
   81154:	4e0e      	ldr	r6, [pc, #56]	; (81190 <XPROGTarget_EnableTargetPDI+0x90>)
	const sam_usart_opt_t usart_pdid_settings = {
   81156:	9703      	str	r7, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   81158:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8115a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8115e:	2018      	movs	r0, #24
   81160:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   81162:	47b0      	blx	r6
	XPROGTarget_SendIdle();
   81164:	47b0      	blx	r6
}
   81166:	b007      	add	sp, #28
   81168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8116a:	bf00      	nop
   8116c:	20001794 	.word	0x20001794
   81170:	00085b7d 	.word	0x00085b7d
   81174:	00085d79 	.word	0x00085d79
   81178:	20000091 	.word	0x20000091
   8117c:	00085d1d 	.word	0x00085d1d
   81180:	0007a120 	.word	0x0007a120
   81184:	0b71b000 	.word	0x0b71b000
   81188:	00084131 	.word	0x00084131
   8118c:	40094000 	.word	0x40094000
   81190:	000810a1 	.word	0x000810a1

00081194 <ISPProtocol_EnterISPMode>:
		uint8_t PollValue;
		uint8_t PollIndex;
		uint8_t EnterProgBytes[4];
	} Enter_ISP_Params;

	if (udd_g_ctrlreq.payload_size != 11){
   81194:	4b64      	ldr	r3, [pc, #400]	; (81328 <ISPProtocol_EnterISPMode+0x194>)
   81196:	899a      	ldrh	r2, [r3, #12]
   81198:	2a0b      	cmp	r2, #11
   8119a:	f040 8091 	bne.w	812c0 <ISPProtocol_EnterISPMode+0x12c>
{
   8119e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811a2:	b08d      	sub	sp, #52	; 0x34
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   811a4:	f10d 0924 	add.w	r9, sp, #36	; 0x24
   811a8:	464a      	mov	r2, r9

	uint8_t ResponseStatus = STATUS_CMD_FAILED;

	CurrentAddress = 0;
   811aa:	f04f 0e00 	mov.w	lr, #0
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   811ae:	689b      	ldr	r3, [r3, #8]
	CurrentAddress = 0;
   811b0:	f8df c178 	ldr.w	ip, [pc, #376]	; 8132c <ISPProtocol_EnterISPMode+0x198>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   811b4:	6818      	ldr	r0, [r3, #0]
   811b6:	6859      	ldr	r1, [r3, #4]
   811b8:	785c      	ldrb	r4, [r3, #1]
   811ba:	c203      	stmia	r2!, {r0, r1}
   811bc:	891f      	ldrh	r7, [r3, #8]
   811be:	7a9e      	ldrb	r6, [r3, #10]
   811c0:	789d      	ldrb	r5, [r3, #2]
   811c2:	f893 8004 	ldrb.w	r8, [r3, #4]
   811c6:	9402      	str	r4, [sp, #8]
   811c8:	8017      	strh	r7, [r2, #0]
   811ca:	78dc      	ldrb	r4, [r3, #3]
   811cc:	7096      	strb	r6, [r2, #2]
   811ce:	795a      	ldrb	r2, [r3, #5]
   811d0:	799b      	ldrb	r3, [r3, #6]
	CurrentAddress = 0;
   811d2:	f8cc e000 	str.w	lr, [ip]
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   811d6:	9204      	str	r2, [sp, #16]
   811d8:	9303      	str	r3, [sp, #12]
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   811da:	2d00      	cmp	r5, #0
   811dc:	f040 8093 	bne.w	81306 <ISPProtocol_EnterISPMode+0x172>
	ISPTarget_EnableTargetISP();
   811e0:	4b53      	ldr	r3, [pc, #332]	; (81330 <ISPProtocol_EnterISPMode+0x19c>)
   811e2:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   811e4:	4b53      	ldr	r3, [pc, #332]	; (81334 <ISPProtocol_EnterISPMode+0x1a0>)
   811e6:	2001      	movs	r0, #1
   811e8:	4798      	blx	r3
	if (DelayMS){delay_ms(DelayMS);};
   811ea:	9b02      	ldr	r3, [sp, #8]
   811ec:	2b00      	cmp	r3, #0
   811ee:	d178      	bne.n	812e2 <ISPProtocol_EnterISPMode+0x14e>
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   811f0:	1e63      	subs	r3, r4, #1
   811f2:	fa5f fb83 	uxtb.w	fp, r3
   811f6:	2c00      	cmp	r4, #0
   811f8:	d057      	beq.n	812aa <ISPProtocol_EnterISPMode+0x116>
	if (DelayMS){delay_ms(DelayMS);};
   811fa:	f243 65af 	movw	r5, #13999	; 0x36af
   811fe:	4c4e      	ldr	r4, [pc, #312]	; (81338 <ISPProtocol_EnterISPMode+0x1a4>)
   81200:	f243 62b0 	movw	r2, #14000	; 0x36b0
   81204:	fba8 3104 	umull	r3, r1, r8, r4
   81208:	1958      	adds	r0, r3, r5
   8120a:	4e4c      	ldr	r6, [pc, #304]	; (8133c <ISPProtocol_EnterISPMode+0x1a8>)
   8120c:	f04f 0300 	mov.w	r3, #0
   81210:	f141 0100 	adc.w	r1, r1, #0
   81214:	47b0      	blx	r6
   81216:	4603      	mov	r3, r0
   81218:	9a02      	ldr	r2, [sp, #8]
   8121a:	9301      	str	r3, [sp, #4]
   8121c:	fba2 4104 	umull	r4, r1, r2, r4
   81220:	1960      	adds	r0, r4, r5
   81222:	f243 62b0 	movw	r2, #14000	; 0x36b0
   81226:	f04f 0300 	mov.w	r3, #0
   8122a:	f141 0100 	adc.w	r1, r1, #0
   8122e:	47b0      	blx	r6
   81230:	f8df a10c 	ldr.w	sl, [pc, #268]	; 81340 <ISPProtocol_EnterISPMode+0x1ac>
   81234:	9005      	str	r0, [sp, #20]
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   81236:	4b43      	ldr	r3, [pc, #268]	; (81344 <ISPProtocol_EnterISPMode+0x1b0>)
   81238:	681b      	ldr	r3, [r3, #0]
   8123a:	2b00      	cmp	r3, #0
   8123c:	d035      	beq.n	812aa <ISPProtocol_EnterISPMode+0x116>
   8123e:	4f42      	ldr	r7, [pc, #264]	; (81348 <ISPProtocol_EnterISPMode+0x1b4>)
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   81240:	4c42      	ldr	r4, [pc, #264]	; (8134c <ISPProtocol_EnterISPMode+0x1b8>)
   81242:	ad08      	add	r5, sp, #32
   81244:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
	if (DelayMS){delay_ms(DelayMS);};
   81248:	f1b8 0f00 	cmp.w	r8, #0
   8124c:	d139      	bne.n	812c2 <ISPProtocol_EnterISPMode+0x12e>
   8124e:	2300      	movs	r3, #0
   81250:	4620      	mov	r0, r4
   81252:	461a      	mov	r2, r3
   81254:	f816 1b01 	ldrb.w	r1, [r6], #1
   81258:	47d0      	blx	sl
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8125a:	6923      	ldr	r3, [r4, #16]
   8125c:	059b      	lsls	r3, r3, #22
   8125e:	d5fc      	bpl.n	8125a <ISPProtocol_EnterISPMode+0xc6>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   81260:	4620      	mov	r0, r4
   81262:	f10d 021d 	add.w	r2, sp, #29
   81266:	f10d 011e 	add.w	r1, sp, #30
   8126a:	47b8      	blx	r7
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   8126c:	f89d 301e 	ldrb.w	r3, [sp, #30]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   81270:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   81274:	45a9      	cmp	r9, r5
   81276:	d1e7      	bne.n	81248 <ISPProtocol_EnterISPMode+0xb4>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   81278:	9b03      	ldr	r3, [sp, #12]
   8127a:	2b00      	cmp	r3, #0
   8127c:	d02f      	beq.n	812de <ISPProtocol_EnterISPMode+0x14a>
   8127e:	3330      	adds	r3, #48	; 0x30
   81280:	446b      	add	r3, sp
   81282:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   81286:	9a04      	ldr	r2, [sp, #16]
   81288:	4293      	cmp	r3, r2
   8128a:	d028      	beq.n	812de <ISPProtocol_EnterISPMode+0x14a>
			ISPTarget_ChangeTargetResetLine(false);
   8128c:	4b29      	ldr	r3, [pc, #164]	; (81334 <ISPProtocol_EnterISPMode+0x1a0>)
   8128e:	2000      	movs	r0, #0
   81290:	4798      	blx	r3
	if (DelayMS){delay_ms(DelayMS);};
   81292:	9b02      	ldr	r3, [sp, #8]
   81294:	b9cb      	cbnz	r3, 812ca <ISPProtocol_EnterISPMode+0x136>
			ISPTarget_ChangeTargetResetLine(true);
   81296:	2001      	movs	r0, #1
   81298:	4b26      	ldr	r3, [pc, #152]	; (81334 <ISPProtocol_EnterISPMode+0x1a0>)
   8129a:	4798      	blx	r3
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   8129c:	f10b 3bff 	add.w	fp, fp, #4294967295
   812a0:	fa5f fb8b 	uxtb.w	fp, fp
   812a4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   812a8:	d1c5      	bne.n	81236 <ISPProtocol_EnterISPMode+0xa2>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   812aa:	24c0      	movs	r4, #192	; 0xc0
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   812ac:	2010      	movs	r0, #16
	avrisp_status_payload_size = 2;
   812ae:	2102      	movs	r1, #2
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   812b0:	4b27      	ldr	r3, [pc, #156]	; (81350 <ISPProtocol_EnterISPMode+0x1bc>)
	avrisp_status_payload_size = 2;
   812b2:	4a28      	ldr	r2, [pc, #160]	; (81354 <ISPProtocol_EnterISPMode+0x1c0>)
	avrisp_status_payload[1] = ResponseStatus;
   812b4:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   812b6:	7018      	strb	r0, [r3, #0]
	avrisp_status_payload_size = 2;
   812b8:	8011      	strh	r1, [r2, #0]
}
   812ba:	b00d      	add	sp, #52	; 0x34
   812bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812c0:	4770      	bx	lr
	if (DelayMS){delay_ms(DelayMS);};
   812c2:	9801      	ldr	r0, [sp, #4]
   812c4:	4b24      	ldr	r3, [pc, #144]	; (81358 <ISPProtocol_EnterISPMode+0x1c4>)
   812c6:	4798      	blx	r3
}
   812c8:	e7c1      	b.n	8124e <ISPProtocol_EnterISPMode+0xba>
	if (DelayMS){delay_ms(DelayMS);};
   812ca:	9d05      	ldr	r5, [sp, #20]
   812cc:	4c22      	ldr	r4, [pc, #136]	; (81358 <ISPProtocol_EnterISPMode+0x1c4>)
   812ce:	4628      	mov	r0, r5
   812d0:	47a0      	blx	r4
			ISPTarget_ChangeTargetResetLine(true);
   812d2:	2001      	movs	r0, #1
   812d4:	4b17      	ldr	r3, [pc, #92]	; (81334 <ISPProtocol_EnterISPMode+0x1a0>)
   812d6:	4798      	blx	r3
	if (DelayMS){delay_ms(DelayMS);};
   812d8:	4628      	mov	r0, r5
   812da:	47a0      	blx	r4
}
   812dc:	e7de      	b.n	8129c <ISPProtocol_EnterISPMode+0x108>
			ResponseStatus = STATUS_CMD_OK;
   812de:	2400      	movs	r4, #0
   812e0:	e7e4      	b.n	812ac <ISPProtocol_EnterISPMode+0x118>
	if (DelayMS){delay_ms(DelayMS);};
   812e2:	f243 60af 	movw	r0, #13999	; 0x36af
   812e6:	9a02      	ldr	r2, [sp, #8]
   812e8:	4b13      	ldr	r3, [pc, #76]	; (81338 <ISPProtocol_EnterISPMode+0x1a4>)
   812ea:	4d14      	ldr	r5, [pc, #80]	; (8133c <ISPProtocol_EnterISPMode+0x1a8>)
   812ec:	fba2 3103 	umull	r3, r1, r2, r3
   812f0:	1818      	adds	r0, r3, r0
   812f2:	f243 62b0 	movw	r2, #14000	; 0x36b0
   812f6:	f04f 0300 	mov.w	r3, #0
   812fa:	f141 0100 	adc.w	r1, r1, #0
   812fe:	47a8      	blx	r5
   81300:	4b15      	ldr	r3, [pc, #84]	; (81358 <ISPProtocol_EnterISPMode+0x1c4>)
   81302:	4798      	blx	r3
}
   81304:	e774      	b.n	811f0 <ISPProtocol_EnterISPMode+0x5c>
	if (DelayMS){delay_ms(DelayMS);};
   81306:	f243 60af 	movw	r0, #13999	; 0x36af
   8130a:	4b0b      	ldr	r3, [pc, #44]	; (81338 <ISPProtocol_EnterISPMode+0x1a4>)
   8130c:	f243 62b0 	movw	r2, #14000	; 0x36b0
   81310:	fba5 5303 	umull	r5, r3, r5, r3
   81314:	1828      	adds	r0, r5, r0
   81316:	f143 0100 	adc.w	r1, r3, #0
   8131a:	4d08      	ldr	r5, [pc, #32]	; (8133c <ISPProtocol_EnterISPMode+0x1a8>)
   8131c:	2300      	movs	r3, #0
   8131e:	47a8      	blx	r5
   81320:	4b0d      	ldr	r3, [pc, #52]	; (81358 <ISPProtocol_EnterISPMode+0x1c4>)
   81322:	4798      	blx	r3
}
   81324:	e75c      	b.n	811e0 <ISPProtocol_EnterISPMode+0x4c>
   81326:	bf00      	nop
   81328:	2000200c 	.word	0x2000200c
   8132c:	20001540 	.word	0x20001540
   81330:	00081985 	.word	0x00081985
   81334:	00081a49 	.word	0x00081a49
   81338:	05b8d800 	.word	0x05b8d800
   8133c:	000869ed 	.word	0x000869ed
   81340:	000858cd 	.word	0x000858cd
   81344:	20001798 	.word	0x20001798
   81348:	0008589d 	.word	0x0008589d
   8134c:	40008000 	.word	0x40008000
   81350:	20001648 	.word	0x20001648
   81354:	20001668 	.word	0x20001668
   81358:	20000091 	.word	0x20000091

0008135c <ISPProtocol_LeaveISPMode>:
{
   8135c:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   8135e:	4b1d      	ldr	r3, [pc, #116]	; (813d4 <ISPProtocol_LeaveISPMode+0x78>)
   81360:	899a      	ldrh	r2, [r3, #12]
   81362:	2a02      	cmp	r2, #2
   81364:	d113      	bne.n	8138e <ISPProtocol_LeaveISPMode+0x32>
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   81366:	689b      	ldr	r3, [r3, #8]
   81368:	881c      	ldrh	r4, [r3, #0]
	if (DelayMS){delay_ms(DelayMS);};
   8136a:	f014 01ff 	ands.w	r1, r4, #255	; 0xff
   8136e:	d120      	bne.n	813b2 <ISPProtocol_LeaveISPMode+0x56>
	ISPTarget_ChangeTargetResetLine(false);
   81370:	2000      	movs	r0, #0
   81372:	4b19      	ldr	r3, [pc, #100]	; (813d8 <ISPProtocol_LeaveISPMode+0x7c>)
   81374:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   81376:	4b19      	ldr	r3, [pc, #100]	; (813dc <ISPProtocol_LeaveISPMode+0x80>)
   81378:	4798      	blx	r3
	if (DelayMS){delay_ms(DelayMS);};
   8137a:	0a24      	lsrs	r4, r4, #8
   8137c:	d108      	bne.n	81390 <ISPProtocol_LeaveISPMode+0x34>
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   8137e:	2411      	movs	r4, #17
	avrisp_status_payload[1] = STATUS_CMD_OK;
   81380:	2000      	movs	r0, #0
	avrisp_status_payload_size = 2;
   81382:	2102      	movs	r1, #2
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   81384:	4b16      	ldr	r3, [pc, #88]	; (813e0 <ISPProtocol_LeaveISPMode+0x84>)
	avrisp_status_payload_size = 2;
   81386:	4a17      	ldr	r2, [pc, #92]	; (813e4 <ISPProtocol_LeaveISPMode+0x88>)
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   81388:	701c      	strb	r4, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8138a:	7058      	strb	r0, [r3, #1]
	avrisp_status_payload_size = 2;
   8138c:	8011      	strh	r1, [r2, #0]
}
   8138e:	bd38      	pop	{r3, r4, r5, pc}
	if (DelayMS){delay_ms(DelayMS);};
   81390:	f243 60af 	movw	r0, #13999	; 0x36af
   81394:	4914      	ldr	r1, [pc, #80]	; (813e8 <ISPProtocol_LeaveISPMode+0x8c>)
   81396:	f243 62b0 	movw	r2, #14000	; 0x36b0
   8139a:	fba4 4101 	umull	r4, r1, r4, r1
   8139e:	1820      	adds	r0, r4, r0
   813a0:	f04f 0300 	mov.w	r3, #0
   813a4:	4d11      	ldr	r5, [pc, #68]	; (813ec <ISPProtocol_LeaveISPMode+0x90>)
   813a6:	f141 0100 	adc.w	r1, r1, #0
   813aa:	47a8      	blx	r5
   813ac:	4b10      	ldr	r3, [pc, #64]	; (813f0 <ISPProtocol_LeaveISPMode+0x94>)
   813ae:	4798      	blx	r3
}
   813b0:	e7e5      	b.n	8137e <ISPProtocol_LeaveISPMode+0x22>
	if (DelayMS){delay_ms(DelayMS);};
   813b2:	f243 63af 	movw	r3, #13999	; 0x36af
   813b6:	480c      	ldr	r0, [pc, #48]	; (813e8 <ISPProtocol_LeaveISPMode+0x8c>)
   813b8:	f243 62b0 	movw	r2, #14000	; 0x36b0
   813bc:	fba1 0100 	umull	r0, r1, r1, r0
   813c0:	18c0      	adds	r0, r0, r3
   813c2:	4d0a      	ldr	r5, [pc, #40]	; (813ec <ISPProtocol_LeaveISPMode+0x90>)
   813c4:	f04f 0300 	mov.w	r3, #0
   813c8:	f141 0100 	adc.w	r1, r1, #0
   813cc:	47a8      	blx	r5
   813ce:	4b08      	ldr	r3, [pc, #32]	; (813f0 <ISPProtocol_LeaveISPMode+0x94>)
   813d0:	4798      	blx	r3
}
   813d2:	e7cd      	b.n	81370 <ISPProtocol_LeaveISPMode+0x14>
   813d4:	2000200c 	.word	0x2000200c
   813d8:	00081a49 	.word	0x00081a49
   813dc:	00081a35 	.word	0x00081a35
   813e0:	20001648 	.word	0x20001648
   813e4:	20001668 	.word	0x20001668
   813e8:	05b8d800 	.word	0x05b8d800
   813ec:	000869ed 	.word	0x000869ed
   813f0:	20000091 	.word	0x20000091

000813f4 <ISPProtocol_ProgramMemory>:
	if (udd_g_ctrlreq.payload_size != 9){
   813f4:	4b94      	ldr	r3, [pc, #592]	; (81648 <ISPProtocol_ProgramMemory+0x254>)
   813f6:	899a      	ldrh	r2, [r3, #12]
   813f8:	2a09      	cmp	r2, #9
   813fa:	d000      	beq.n	813fe <ISPProtocol_ProgramMemory+0xa>
   813fc:	4770      	bx	lr
{
   813fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81402:	689a      	ldr	r2, [r3, #8]
{
   81404:	b08f      	sub	sp, #60	; 0x3c
   81406:	4680      	mov	r8, r0
   81408:	468b      	mov	fp, r1
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   8140a:	6810      	ldr	r0, [r2, #0]
   8140c:	6851      	ldr	r1, [r2, #4]
   8140e:	ab0b      	add	r3, sp, #44	; 0x2c
   81410:	c303      	stmia	r3!, {r0, r1}
	if (Write_Memory_Params.BytesToWrite > 256)
   81412:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81416:	8912      	ldrh	r2, [r2, #8]
	if (Write_Memory_Params.BytesToWrite > 256)
   81418:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8141c:	9104      	str	r1, [sp, #16]
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   8141e:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   81420:	f200 80ce 	bhi.w	815c0 <ISPProtocol_ProgramMemory+0x1cc>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   81424:	f1b8 0f13 	cmp.w	r8, #19
   81428:	bf0c      	ite	eq
   8142a:	f89d 3033 	ldrbeq.w	r3, [sp, #51]	; 0x33
   8142e:	f89d 3034 	ldrbne.w	r3, [sp, #52]	; 0x34
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   81432:	4f86      	ldr	r7, [pc, #536]	; (8164c <ISPProtocol_ProgramMemory+0x258>)
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   81434:	9305      	str	r3, [sp, #20]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   81436:	683b      	ldr	r3, [r7, #0]
   81438:	9309      	str	r3, [sp, #36]	; 0x24
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8143a:	9b04      	ldr	r3, [sp, #16]
   8143c:	2b00      	cmp	r3, #0
   8143e:	f000 80fa 	beq.w	81636 <ISPProtocol_ProgramMemory+0x242>
   81442:	2400      	movs	r4, #0
			MustLoadExtendedAddress = false;
   81444:	f8cd b00c 	str.w	fp, [sp, #12]
   81448:	46a3      	mov	fp, r4
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   8144a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   8144e:	4e80      	ldr	r6, [pc, #512]	; (81650 <ISPProtocol_ProgramMemory+0x25c>)
   81450:	f003 0201 	and.w	r2, r3, #1
   81454:	9308      	str	r3, [sp, #32]
		  spi_write(SPI, data, 0, 0);
   81456:	4d7f      	ldr	r5, [pc, #508]	; (81654 <ISPProtocol_ProgramMemory+0x260>)
   81458:	b25b      	sxtb	r3, r3
   8145a:	9207      	str	r2, [sp, #28]
   8145c:	9306      	str	r3, [sp, #24]
		uint8_t ByteToWrite     = *(NextWriteByte++);
   8145e:	9a03      	ldr	r2, [sp, #12]
		if (MustLoadExtendedAddress)
   81460:	4b7d      	ldr	r3, [pc, #500]	; (81658 <ISPProtocol_ProgramMemory+0x264>)
		uint8_t ByteToWrite     = *(NextWriteByte++);
   81462:	f812 ab01 	ldrb.w	sl, [r2], #1
		if (MustLoadExtendedAddress)
   81466:	781b      	ldrb	r3, [r3, #0]
		uint8_t ByteToWrite     = *(NextWriteByte++);
   81468:	9203      	str	r2, [sp, #12]
		if (MustLoadExtendedAddress)
   8146a:	2b00      	cmp	r3, #0
   8146c:	d174      	bne.n	81558 <ISPProtocol_ProgramMemory+0x164>
   8146e:	2300      	movs	r3, #0
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   81470:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
   81474:	461a      	mov	r2, r3
   81476:	4649      	mov	r1, r9
   81478:	4628      	mov	r0, r5
   8147a:	47b0      	blx	r6
   8147c:	2300      	movs	r3, #0
   8147e:	7879      	ldrb	r1, [r7, #1]
   81480:	461a      	mov	r2, r3
   81482:	4628      	mov	r0, r5
   81484:	47b0      	blx	r6
   81486:	2300      	movs	r3, #0
   81488:	7839      	ldrb	r1, [r7, #0]
   8148a:	461a      	mov	r2, r3
   8148c:	4628      	mov	r0, r5
   8148e:	47b0      	blx	r6
   81490:	2300      	movs	r3, #0
   81492:	4651      	mov	r1, sl
   81494:	4628      	mov	r0, r5
   81496:	461a      	mov	r2, r3
   81498:	47b0      	blx	r6
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   8149a:	f1b8 0f13 	cmp.w	r8, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   8149e:	bf04      	itt	eq
   814a0:	f089 0908 	eoreq.w	r9, r9, #8
   814a4:	f88d 9030 	strbeq.w	r9, [sp, #48]	; 0x30
		if (!(PollAddress) && (ByteToWrite != PollValue))
   814a8:	f1bb 0f00 	cmp.w	fp, #0
   814ac:	d132      	bne.n	81514 <ISPProtocol_ProgramMemory+0x120>
   814ae:	9b05      	ldr	r3, [sp, #20]
   814b0:	4553      	cmp	r3, sl
   814b2:	d06c      	beq.n	8158e <ISPProtocol_ProgramMemory+0x19a>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   814b4:	f014 0301 	ands.w	r3, r4, #1
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   814b8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   814bc:	d002      	beq.n	814c4 <ISPProtocol_ProgramMemory+0xd0>
   814be:	f1b8 0f13 	cmp.w	r8, #19
   814c2:	d050      	beq.n	81566 <ISPProtocol_ProgramMemory+0x172>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   814c4:	9807      	ldr	r0, [sp, #28]
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   814c6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
			PollAddress = (CurrentAddress & 0xFFFF);
   814ca:	8839      	ldrh	r1, [r7, #0]
   814cc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   814d0:	2800      	cmp	r0, #0
   814d2:	d067      	beq.n	815a4 <ISPProtocol_ProgramMemory+0x1b0>
			PollAddress = (CurrentAddress & 0xFFFF);
   814d4:	468b      	mov	fp, r1
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   814d6:	f8dd 9018 	ldr.w	r9, [sp, #24]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   814da:	2b00      	cmp	r3, #0
   814dc:	d030      	beq.n	81540 <ISPProtocol_ProgramMemory+0x14c>
			CurrentAddress++;
   814de:	683b      	ldr	r3, [r7, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   814e0:	f1b8 0f13 	cmp.w	r8, #19
			CurrentAddress++;
   814e4:	f103 0301 	add.w	r3, r3, #1
   814e8:	603b      	str	r3, [r7, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   814ea:	d049      	beq.n	81580 <ISPProtocol_ProgramMemory+0x18c>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   814ec:	9b04      	ldr	r3, [sp, #16]
   814ee:	3401      	adds	r4, #1
   814f0:	b2a4      	uxth	r4, r4
   814f2:	42a3      	cmp	r3, r4
   814f4:	d1b3      	bne.n	8145e <ISPProtocol_ProgramMemory+0x6a>
   814f6:	465e      	mov	r6, fp
   814f8:	2000      	movs	r0, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   814fa:	f1b9 0f00 	cmp.w	r9, #0
   814fe:	db63      	blt.n	815c8 <ISPProtocol_ProgramMemory+0x1d4>
	avrisp_status_payload_size = 2;
   81500:	2102      	movs	r1, #2
	avrisp_status_payload[0] = V2Command;
   81502:	4b56      	ldr	r3, [pc, #344]	; (8165c <ISPProtocol_ProgramMemory+0x268>)
	avrisp_status_payload_size = 2;
   81504:	4a56      	ldr	r2, [pc, #344]	; (81660 <ISPProtocol_ProgramMemory+0x26c>)
	avrisp_status_payload[0] = V2Command;
   81506:	f883 8000 	strb.w	r8, [r3]
	avrisp_status_payload[1] = ProgrammingStatus;
   8150a:	7058      	strb	r0, [r3, #1]
	avrisp_status_payload_size = 2;
   8150c:	8011      	strh	r1, [r2, #0]
}
   8150e:	b00f      	add	sp, #60	; 0x3c
   81510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   81514:	9b07      	ldr	r3, [sp, #28]
   81516:	b9d3      	cbnz	r3, 8154e <ISPProtocol_ProgramMemory+0x15a>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   81518:	f8dd 9018 	ldr.w	r9, [sp, #24]
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   8151c:	9808      	ldr	r0, [sp, #32]
   8151e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   81522:	9200      	str	r2, [sp, #0]
   81524:	4659      	mov	r1, fp
   81526:	9a05      	ldr	r2, [sp, #20]
   81528:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8152c:	f8df a134 	ldr.w	sl, [pc, #308]	; 81664 <ISPProtocol_ProgramMemory+0x270>
   81530:	47d0      	blx	sl
			if (ProgrammingStatus != STATUS_CMD_OK)
   81532:	2800      	cmp	r0, #0
   81534:	d146      	bne.n	815c4 <ISPProtocol_ProgramMemory+0x1d0>
   81536:	f004 0301 	and.w	r3, r4, #1
			PollAddress = 0;
   8153a:	4683      	mov	fp, r0
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   8153c:	2b00      	cmp	r3, #0
   8153e:	d1ce      	bne.n	814de <ISPProtocol_ProgramMemory+0xea>
   81540:	f1b8 0f15 	cmp.w	r8, #21
   81544:	d1d2      	bne.n	814ec <ISPProtocol_ProgramMemory+0xf8>
			CurrentAddress++;
   81546:	683b      	ldr	r3, [r7, #0]
   81548:	3301      	adds	r3, #1
   8154a:	603b      	str	r3, [r7, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8154c:	e7ce      	b.n	814ec <ISPProtocol_ProgramMemory+0xf8>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   8154e:	f8dd 9018 	ldr.w	r9, [sp, #24]
   81552:	f004 0301 	and.w	r3, r4, #1
   81556:	e7c0      	b.n	814da <ISPProtocol_ProgramMemory+0xe6>
			ISPTarget_LoadExtendedAddress();
   81558:	4b43      	ldr	r3, [pc, #268]	; (81668 <ISPProtocol_ProgramMemory+0x274>)
   8155a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8155c:	f04f 0200 	mov.w	r2, #0
   81560:	4b3d      	ldr	r3, [pc, #244]	; (81658 <ISPProtocol_ProgramMemory+0x264>)
   81562:	701a      	strb	r2, [r3, #0]
   81564:	e783      	b.n	8146e <ISPProtocol_ProgramMemory+0x7a>
			PollAddress = (CurrentAddress & 0xFFFF);
   81566:	683b      	ldr	r3, [r7, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   81568:	9807      	ldr	r0, [sp, #28]
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   8156a:	f042 0208 	orr.w	r2, r2, #8
   8156e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			PollAddress = (CurrentAddress & 0xFFFF);
   81572:	b299      	uxth	r1, r3
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   81574:	b1b0      	cbz	r0, 815a4 <ISPProtocol_ProgramMemory+0x1b0>
			PollAddress = (CurrentAddress & 0xFFFF);
   81576:	468b      	mov	fp, r1
			CurrentAddress++;
   81578:	3301      	adds	r3, #1
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   8157a:	f8dd 9018 	ldr.w	r9, [sp, #24]
			CurrentAddress++;
   8157e:	603b      	str	r3, [r7, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   81580:	b29b      	uxth	r3, r3
   81582:	2b00      	cmp	r3, #0
   81584:	d1b2      	bne.n	814ec <ISPProtocol_ProgramMemory+0xf8>
			  MustLoadExtendedAddress = true;
   81586:	2301      	movs	r3, #1
   81588:	4a33      	ldr	r2, [pc, #204]	; (81658 <ISPProtocol_ProgramMemory+0x264>)
   8158a:	7013      	strb	r3, [r2, #0]
   8158c:	e7ae      	b.n	814ec <ISPProtocol_ProgramMemory+0xf8>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   8158e:	9b07      	ldr	r3, [sp, #28]
   81590:	2b00      	cmp	r3, #0
   81592:	d1dc      	bne.n	8154e <ISPProtocol_ProgramMemory+0x15a>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   81594:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   81598:	9808      	ldr	r0, [sp, #32]
   8159a:	0701      	lsls	r1, r0, #28
   8159c:	d509      	bpl.n	815b2 <ISPProtocol_ProgramMemory+0x1be>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   8159e:	f8dd 9018 	ldr.w	r9, [sp, #24]
   815a2:	e7be      	b.n	81522 <ISPProtocol_ProgramMemory+0x12e>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   815a4:	2900      	cmp	r1, #0
   815a6:	d0f7      	beq.n	81598 <ISPProtocol_ProgramMemory+0x1a4>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   815a8:	468b      	mov	fp, r1
   815aa:	f8dd 9018 	ldr.w	r9, [sp, #24]
   815ae:	9808      	ldr	r0, [sp, #32]
   815b0:	e7b7      	b.n	81522 <ISPProtocol_ProgramMemory+0x12e>
   815b2:	9b06      	ldr	r3, [sp, #24]
   815b4:	f003 00f9 	and.w	r0, r3, #249	; 0xf9
   815b8:	4699      	mov	r9, r3
   815ba:	f040 0002 	orr.w	r0, r0, #2
   815be:	e7b0      	b.n	81522 <ISPProtocol_ProgramMemory+0x12e>
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   815c0:	20c0      	movs	r0, #192	; 0xc0
   815c2:	e79d      	b.n	81500 <ISPProtocol_ProgramMemory+0x10c>
   815c4:	465e      	mov	r6, fp
   815c6:	e798      	b.n	814fa <ISPProtocol_ProgramMemory+0x106>
   815c8:	2300      	movs	r3, #0
   815ca:	4c21      	ldr	r4, [pc, #132]	; (81650 <ISPProtocol_ProgramMemory+0x25c>)
   815cc:	461a      	mov	r2, r3
   815ce:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   815d2:	4820      	ldr	r0, [pc, #128]	; (81654 <ISPProtocol_ProgramMemory+0x260>)
   815d4:	47a0      	blx	r4
   815d6:	2300      	movs	r3, #0
   815d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   815da:	461a      	mov	r2, r3
   815dc:	f3c5 2107 	ubfx	r1, r5, #8, #8
   815e0:	481c      	ldr	r0, [pc, #112]	; (81654 <ISPProtocol_ProgramMemory+0x260>)
   815e2:	47a0      	blx	r4
   815e4:	2300      	movs	r3, #0
   815e6:	b2e9      	uxtb	r1, r5
   815e8:	461a      	mov	r2, r3
   815ea:	481a      	ldr	r0, [pc, #104]	; (81654 <ISPProtocol_ProgramMemory+0x260>)
   815ec:	47a0      	blx	r4
   815ee:	2300      	movs	r3, #0
   815f0:	4818      	ldr	r0, [pc, #96]	; (81654 <ISPProtocol_ProgramMemory+0x260>)
   815f2:	461a      	mov	r2, r3
   815f4:	4619      	mov	r1, r3
   815f6:	47a0      	blx	r4
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   815f8:	9b08      	ldr	r3, [sp, #32]
   815fa:	069b      	lsls	r3, r3, #26
   815fc:	d505      	bpl.n	8160a <ISPProtocol_ProgramMemory+0x216>
   815fe:	b926      	cbnz	r6, 8160a <ISPProtocol_ProgramMemory+0x216>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   81600:	f009 09cf 	and.w	r9, r9, #207	; 0xcf
   81604:	f049 0310 	orr.w	r3, r9, #16
   81608:	9308      	str	r3, [sp, #32]
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   8160a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   8160e:	4631      	mov	r1, r6
   81610:	9300      	str	r3, [sp, #0]
   81612:	9a05      	ldr	r2, [sp, #20]
   81614:	9808      	ldr	r0, [sp, #32]
   81616:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8161a:	4c12      	ldr	r4, [pc, #72]	; (81664 <ISPProtocol_ProgramMemory+0x270>)
   8161c:	47a0      	blx	r4
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8161e:	f1b8 0f13 	cmp.w	r8, #19
   81622:	f47f af6d 	bne.w	81500 <ISPProtocol_ProgramMemory+0x10c>
   81626:	883b      	ldrh	r3, [r7, #0]
   81628:	2b00      	cmp	r3, #0
   8162a:	f47f af69 	bne.w	81500 <ISPProtocol_ProgramMemory+0x10c>
		  MustLoadExtendedAddress = true;
   8162e:	2201      	movs	r2, #1
   81630:	4b09      	ldr	r3, [pc, #36]	; (81658 <ISPProtocol_ProgramMemory+0x264>)
   81632:	701a      	strb	r2, [r3, #0]
   81634:	e764      	b.n	81500 <ISPProtocol_ProgramMemory+0x10c>
	uint16_t PollAddress       = 0;
   81636:	9804      	ldr	r0, [sp, #16]
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   81638:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
	uint16_t PollAddress       = 0;
   8163c:	4606      	mov	r6, r0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   8163e:	f99d 902e 	ldrsb.w	r9, [sp, #46]	; 0x2e
   81642:	9308      	str	r3, [sp, #32]
   81644:	e759      	b.n	814fa <ISPProtocol_ProgramMemory+0x106>
   81646:	bf00      	nop
   81648:	2000200c 	.word	0x2000200c
   8164c:	20001540 	.word	0x20001540
   81650:	000858cd 	.word	0x000858cd
   81654:	40008000 	.word	0x40008000
   81658:	20001544 	.word	0x20001544
   8165c:	20001648 	.word	0x20001648
   81660:	20001668 	.word	0x20001668
   81664:	00081b49 	.word	0x00081b49
   81668:	00081b05 	.word	0x00081b05

0008166c <ISPProtocol_ReadMemory>:
	if (udd_g_ctrlreq.payload_size != 3){
   8166c:	4b42      	ldr	r3, [pc, #264]	; (81778 <ISPProtocol_ReadMemory+0x10c>)
   8166e:	899a      	ldrh	r2, [r3, #12]
   81670:	2a03      	cmp	r2, #3
   81672:	d172      	bne.n	8175a <ISPProtocol_ReadMemory+0xee>
{
   81674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81678:	4683      	mov	fp, r0
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8167a:	20c0      	movs	r0, #192	; 0xc0
	avrisp_status_payload_size = 2;
   8167c:	2202      	movs	r2, #2
   8167e:	689b      	ldr	r3, [r3, #8]
	avrisp_status_payload[0] = V2Command;
   81680:	4c3e      	ldr	r4, [pc, #248]	; (8177c <ISPProtocol_ReadMemory+0x110>)
   81682:	681b      	ldr	r3, [r3, #0]
{
   81684:	b085      	sub	sp, #20
	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   81686:	9303      	str	r3, [sp, #12]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   81688:	7060      	strb	r0, [r4, #1]
	avrisp_status_payload_size = 2;
   8168a:	b29b      	uxth	r3, r3
   8168c:	483c      	ldr	r0, [pc, #240]	; (81780 <ISPProtocol_ReadMemory+0x114>)
	if (Read_Memory_Params.BytesToRead > 256)
   8168e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
	avrisp_status_payload[0] = V2Command;
   81692:	f884 b000 	strb.w	fp, [r4]
   81696:	9301      	str	r3, [sp, #4]
	avrisp_status_payload_size = 2;
   81698:	8002      	strh	r2, [r0, #0]
	if (Read_Memory_Params.BytesToRead > 256)
   8169a:	d85b      	bhi.n	81754 <ISPProtocol_ReadMemory+0xe8>
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   8169c:	2b00      	cmp	r3, #0
   8169e:	d053      	beq.n	81748 <ISPProtocol_ReadMemory+0xdc>
   816a0:	f04f 0800 	mov.w	r8, #0
   816a4:	4d37      	ldr	r5, [pc, #220]	; (81784 <ISPProtocol_ReadMemory+0x118>)
   816a6:	46c1      	mov	r9, r8
   816a8:	4e37      	ldr	r6, [pc, #220]	; (81788 <ISPProtocol_ReadMemory+0x11c>)
   816aa:	4c38      	ldr	r4, [pc, #224]	; (8178c <ISPProtocol_ReadMemory+0x120>)
   816ac:	1e4f      	subs	r7, r1, #1
   816ae:	e015      	b.n	816dc <ISPProtocol_ReadMemory+0x70>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   816b0:	f019 0f01 	tst.w	r9, #1
   816b4:	d052      	beq.n	8175c <ISPProtocol_ReadMemory+0xf0>
			CurrentAddress++;
   816b6:	6833      	ldr	r3, [r6, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   816b8:	f1bb 0f16 	cmp.w	fp, #22
			CurrentAddress++;
   816bc:	f103 0301 	add.w	r3, r3, #1
   816c0:	6033      	str	r3, [r6, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   816c2:	d004      	beq.n	816ce <ISPProtocol_ReadMemory+0x62>
   816c4:	b29b      	uxth	r3, r3
   816c6:	b913      	cbnz	r3, 816ce <ISPProtocol_ReadMemory+0x62>
			  MustLoadExtendedAddress = true;
   816c8:	2301      	movs	r3, #1
   816ca:	4a31      	ldr	r2, [pc, #196]	; (81790 <ISPProtocol_ReadMemory+0x124>)
   816cc:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   816ce:	9b01      	ldr	r3, [sp, #4]
   816d0:	f108 0801 	add.w	r8, r8, #1
   816d4:	fa1f f988 	uxth.w	r9, r8
   816d8:	4599      	cmp	r9, r3
   816da:	d235      	bcs.n	81748 <ISPProtocol_ReadMemory+0xdc>
		if (MustLoadExtendedAddress)
   816dc:	4b2c      	ldr	r3, [pc, #176]	; (81790 <ISPProtocol_ReadMemory+0x124>)
   816de:	781b      	ldrb	r3, [r3, #0]
   816e0:	2b00      	cmp	r3, #0
   816e2:	d142      	bne.n	8176a <ISPProtocol_ReadMemory+0xfe>
   816e4:	2300      	movs	r3, #0
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   816e6:	f89d a00e 	ldrb.w	sl, [sp, #14]
   816ea:	461a      	mov	r2, r3
   816ec:	4651      	mov	r1, sl
   816ee:	4620      	mov	r0, r4
   816f0:	47a8      	blx	r5
   816f2:	2300      	movs	r3, #0
   816f4:	7871      	ldrb	r1, [r6, #1]
   816f6:	461a      	mov	r2, r3
   816f8:	4620      	mov	r0, r4
   816fa:	47a8      	blx	r5
   816fc:	2300      	movs	r3, #0
   816fe:	7831      	ldrb	r1, [r6, #0]
   81700:	461a      	mov	r2, r3
   81702:	4620      	mov	r0, r4
   81704:	47a8      	blx	r5
   81706:	2300      	movs	r3, #0
   81708:	4620      	mov	r0, r4
   8170a:	461a      	mov	r2, r3
   8170c:	4619      	mov	r1, r3
   8170e:	47a8      	blx	r5
   81710:	6923      	ldr	r3, [r4, #16]
   81712:	059b      	lsls	r3, r3, #22
   81714:	d5fc      	bpl.n	81710 <ISPProtocol_ReadMemory+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   81716:	4b1f      	ldr	r3, [pc, #124]	; (81794 <ISPProtocol_ReadMemory+0x128>)
   81718:	4620      	mov	r0, r4
   8171a:	f10d 0209 	add.w	r2, sp, #9
   8171e:	f10d 010a 	add.w	r1, sp, #10
   81722:	4798      	blx	r3
			return  ReceivedByte;
   81724:	f89d 300a 	ldrb.w	r3, [sp, #10]
		if (V2Command == CMD_READ_FLASH_ISP)
   81728:	f1bb 0f14 	cmp.w	fp, #20
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   8172c:	f807 3f01 	strb.w	r3, [r7, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   81730:	d1be      	bne.n	816b0 <ISPProtocol_ReadMemory+0x44>
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   81732:	f08a 0a08 	eor.w	sl, sl, #8
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   81736:	f019 0f01 	tst.w	r9, #1
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   8173a:	f88d a00e 	strb.w	sl, [sp, #14]
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   8173e:	d0c6      	beq.n	816ce <ISPProtocol_ReadMemory+0x62>
			CurrentAddress++;
   81740:	6833      	ldr	r3, [r6, #0]
   81742:	3301      	adds	r3, #1
   81744:	6033      	str	r3, [r6, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   81746:	e7bd      	b.n	816c4 <ISPProtocol_ReadMemory+0x58>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   81748:	2200      	movs	r2, #0
	avrisp_status_payload_size = 2;
   8174a:	2302      	movs	r3, #2
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8174c:	490b      	ldr	r1, [pc, #44]	; (8177c <ISPProtocol_ReadMemory+0x110>)
   8174e:	704a      	strb	r2, [r1, #1]
	avrisp_status_payload_size = 2;
   81750:	4a0b      	ldr	r2, [pc, #44]	; (81780 <ISPProtocol_ReadMemory+0x114>)
   81752:	8013      	strh	r3, [r2, #0]
}
   81754:	b005      	add	sp, #20
   81756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8175a:	4770      	bx	lr
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   8175c:	f1bb 0f16 	cmp.w	fp, #22
   81760:	d1b5      	bne.n	816ce <ISPProtocol_ReadMemory+0x62>
			CurrentAddress++;
   81762:	6833      	ldr	r3, [r6, #0]
   81764:	3301      	adds	r3, #1
   81766:	6033      	str	r3, [r6, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   81768:	e7b1      	b.n	816ce <ISPProtocol_ReadMemory+0x62>
			ISPTarget_LoadExtendedAddress();
   8176a:	4b0b      	ldr	r3, [pc, #44]	; (81798 <ISPProtocol_ReadMemory+0x12c>)
   8176c:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8176e:	f04f 0200 	mov.w	r2, #0
   81772:	4b07      	ldr	r3, [pc, #28]	; (81790 <ISPProtocol_ReadMemory+0x124>)
   81774:	701a      	strb	r2, [r3, #0]
   81776:	e7b5      	b.n	816e4 <ISPProtocol_ReadMemory+0x78>
   81778:	2000200c 	.word	0x2000200c
   8177c:	20001648 	.word	0x20001648
   81780:	20001668 	.word	0x20001668
   81784:	000858cd 	.word	0x000858cd
   81788:	20001540 	.word	0x20001540
   8178c:	40008000 	.word	0x40008000
   81790:	20001544 	.word	0x20001544
   81794:	0008589d 	.word	0x0008589d
   81798:	00081b05 	.word	0x00081b05

0008179c <ISPProtocol_ChipErase>:
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   8179c:	4b23      	ldr	r3, [pc, #140]	; (8182c <ISPProtocol_ChipErase+0x90>)
   8179e:	899a      	ldrh	r2, [r3, #12]
   817a0:	2a06      	cmp	r2, #6
   817a2:	d12b      	bne.n	817fc <ISPProtocol_ChipErase+0x60>
{
   817a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   817a8:	689b      	ldr	r3, [r3, #8]
{
   817aa:	b083      	sub	sp, #12
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   817ac:	6818      	ldr	r0, [r3, #0]
   817ae:	889a      	ldrh	r2, [r3, #4]
   817b0:	f893 8000 	ldrb.w	r8, [r3]
   817b4:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   817b8:	4f1d      	ldr	r7, [pc, #116]	; (81830 <ISPProtocol_ChipErase+0x94>)
		  spi_write(SPI, data, 0, 0);
   817ba:	4e1e      	ldr	r6, [pc, #120]	; (81834 <ISPProtocol_ChipErase+0x98>)
   817bc:	f10d 0402 	add.w	r4, sp, #2
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   817c0:	9000      	str	r0, [sp, #0]
   817c2:	f8ad 2004 	strh.w	r2, [sp, #4]
   817c6:	f10d 0506 	add.w	r5, sp, #6
   817ca:	2300      	movs	r3, #0
   817cc:	f814 1b01 	ldrb.w	r1, [r4], #1
   817d0:	4630      	mov	r0, r6
   817d2:	461a      	mov	r2, r3
   817d4:	47b8      	blx	r7
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   817d6:	42ac      	cmp	r4, r5
   817d8:	d1f7      	bne.n	817ca <ISPProtocol_ChipErase+0x2e>
	if (!(Erase_Chip_Params.PollMethod))
   817da:	f1b9 0f00 	cmp.w	r9, #0
   817de:	d10e      	bne.n	817fe <ISPProtocol_ChipErase+0x62>
	if (DelayMS){delay_ms(DelayMS);};
   817e0:	f1b8 0f00 	cmp.w	r8, #0
   817e4:	d10f      	bne.n	81806 <ISPProtocol_ChipErase+0x6a>
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   817e6:	2012      	movs	r0, #18
	avrisp_status_payload_size = 2;
   817e8:	2102      	movs	r1, #2
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   817ea:	4b13      	ldr	r3, [pc, #76]	; (81838 <ISPProtocol_ChipErase+0x9c>)
	avrisp_status_payload_size = 2;
   817ec:	4a13      	ldr	r2, [pc, #76]	; (8183c <ISPProtocol_ChipErase+0xa0>)
	avrisp_status_payload[1] = ResponseStatus;
   817ee:	f883 8001 	strb.w	r8, [r3, #1]
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   817f2:	7018      	strb	r0, [r3, #0]
	avrisp_status_payload_size = 2;
   817f4:	8011      	strh	r1, [r2, #0]
}
   817f6:	b003      	add	sp, #12
   817f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   817fc:	4770      	bx	lr
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   817fe:	4b10      	ldr	r3, [pc, #64]	; (81840 <ISPProtocol_ChipErase+0xa4>)
   81800:	4798      	blx	r3
   81802:	4680      	mov	r8, r0
   81804:	e7ef      	b.n	817e6 <ISPProtocol_ChipErase+0x4a>
	if (DelayMS){delay_ms(DelayMS);};
   81806:	f243 63af 	movw	r3, #13999	; 0x36af
   8180a:	480e      	ldr	r0, [pc, #56]	; (81844 <ISPProtocol_ChipErase+0xa8>)
   8180c:	f243 62b0 	movw	r2, #14000	; 0x36b0
   81810:	fba8 0100 	umull	r0, r1, r8, r0
   81814:	18c0      	adds	r0, r0, r3
   81816:	4c0c      	ldr	r4, [pc, #48]	; (81848 <ISPProtocol_ChipErase+0xac>)
   81818:	f04f 0300 	mov.w	r3, #0
   8181c:	f141 0100 	adc.w	r1, r1, #0
   81820:	47a0      	blx	r4
   81822:	4b0a      	ldr	r3, [pc, #40]	; (8184c <ISPProtocol_ChipErase+0xb0>)
	uint8_t ResponseStatus = STATUS_CMD_OK;
   81824:	46c8      	mov	r8, r9
	if (DelayMS){delay_ms(DelayMS);};
   81826:	4798      	blx	r3
}
   81828:	e7dd      	b.n	817e6 <ISPProtocol_ChipErase+0x4a>
   8182a:	bf00      	nop
   8182c:	2000200c 	.word	0x2000200c
   81830:	000858cd 	.word	0x000858cd
   81834:	40008000 	.word	0x40008000
   81838:	20001648 	.word	0x20001648
   8183c:	20001668 	.word	0x20001668
   81840:	00081a8d 	.word	0x00081a8d
   81844:	05b8d800 	.word	0x05b8d800
   81848:	000869ed 	.word	0x000869ed
   8184c:	20000091 	.word	0x20000091

00081850 <ISPProtocol_ReadFuseLockSigOSCCAL>:
	if (udd_g_ctrlreq.payload_size != 5){
   81850:	4b20      	ldr	r3, [pc, #128]	; (818d4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   81852:	899a      	ldrh	r2, [r3, #12]
   81854:	2a05      	cmp	r2, #5
   81856:	d13c      	bne.n	818d2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
{
   81858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   8185c:	689b      	ldr	r3, [r3, #8]
{
   8185e:	b085      	sub	sp, #20
   81860:	4607      	mov	r7, r0
	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   81862:	791a      	ldrb	r2, [r3, #4]
   81864:	6818      	ldr	r0, [r3, #0]
   81866:	f10d 0808 	add.w	r8, sp, #8
   8186a:	f893 b000 	ldrb.w	fp, [r3]
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   8186e:	f8df a068 	ldr.w	sl, [pc, #104]	; 818d8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x88>
   81872:	f8df 9068 	ldr.w	r9, [pc, #104]	; 818dc <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>
   81876:	4c1a      	ldr	r4, [pc, #104]	; (818e0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   81878:	9002      	str	r0, [sp, #8]
   8187a:	f10d 0609 	add.w	r6, sp, #9
   8187e:	f888 2004 	strb.w	r2, [r8, #4]
   81882:	ad01      	add	r5, sp, #4
   81884:	2300      	movs	r3, #0
   81886:	4620      	mov	r0, r4
   81888:	461a      	mov	r2, r3
   8188a:	f816 1b01 	ldrb.w	r1, [r6], #1
   8188e:	47d0      	blx	sl
   81890:	6923      	ldr	r3, [r4, #16]
   81892:	059b      	lsls	r3, r3, #22
   81894:	d5fc      	bpl.n	81890 <ISPProtocol_ReadFuseLockSigOSCCAL+0x40>
			spi_read(SPI, &ReceivedByte, &_);
   81896:	4620      	mov	r0, r4
   81898:	f10d 0201 	add.w	r2, sp, #1
   8189c:	f10d 0102 	add.w	r1, sp, #2
   818a0:	47c8      	blx	r9
			return  ReceivedByte;
   818a2:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   818a6:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   818aa:	4545      	cmp	r5, r8
   818ac:	d1ea      	bne.n	81884 <ISPProtocol_ReadFuseLockSigOSCCAL+0x34>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   818ae:	2200      	movs	r2, #0
	avrisp_status_payload_size = 4;	
   818b0:	2004      	movs	r0, #4
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   818b2:	f10b 0310 	add.w	r3, fp, #16
   818b6:	eb0d 0b03 	add.w	fp, sp, r3
   818ba:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
	avrisp_status_payload[0] = V2Command;
   818be:	4b09      	ldr	r3, [pc, #36]	; (818e4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   818c0:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload_size = 4;	
   818c2:	4909      	ldr	r1, [pc, #36]	; (818e8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
	avrisp_status_payload[0] = V2Command;
   818c4:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   818c6:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   818c8:	70da      	strb	r2, [r3, #3]
	avrisp_status_payload_size = 4;	
   818ca:	8008      	strh	r0, [r1, #0]
}
   818cc:	b005      	add	sp, #20
   818ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818d2:	4770      	bx	lr
   818d4:	2000200c 	.word	0x2000200c
   818d8:	000858cd 	.word	0x000858cd
   818dc:	0008589d 	.word	0x0008589d
   818e0:	40008000 	.word	0x40008000
   818e4:	20001648 	.word	0x20001648
   818e8:	20001668 	.word	0x20001668

000818ec <ISPProtocol_WriteFuseLock>:
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   818ec:	4b11      	ldr	r3, [pc, #68]	; (81934 <ISPProtocol_WriteFuseLock+0x48>)
   818ee:	899a      	ldrh	r2, [r3, #12]
   818f0:	2a04      	cmp	r2, #4
   818f2:	d11d      	bne.n	81930 <ISPProtocol_WriteFuseLock+0x44>
{
   818f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   818f8:	4680      	mov	r8, r0
	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   818fa:	689b      	ldr	r3, [r3, #8]
{
   818fc:	b082      	sub	sp, #8
	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   818fe:	681b      	ldr	r3, [r3, #0]
   81900:	4e0d      	ldr	r6, [pc, #52]	; (81938 <ISPProtocol_WriteFuseLock+0x4c>)
		  spi_write(SPI, data, 0, 0);
   81902:	4d0e      	ldr	r5, [pc, #56]	; (8193c <ISPProtocol_WriteFuseLock+0x50>)
   81904:	af02      	add	r7, sp, #8
   81906:	9301      	str	r3, [sp, #4]
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   81908:	ac01      	add	r4, sp, #4
   8190a:	2300      	movs	r3, #0
   8190c:	f814 1b01 	ldrb.w	r1, [r4], #1
   81910:	4628      	mov	r0, r5
   81912:	461a      	mov	r2, r3
   81914:	47b0      	blx	r6
   81916:	42bc      	cmp	r4, r7
   81918:	d1f7      	bne.n	8190a <ISPProtocol_WriteFuseLock+0x1e>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8191a:	2000      	movs	r0, #0
	avrisp_status_payload_size = 2;	
   8191c:	2102      	movs	r1, #2
	avrisp_status_payload[0] = V2Command;
   8191e:	4b08      	ldr	r3, [pc, #32]	; (81940 <ISPProtocol_WriteFuseLock+0x54>)
	avrisp_status_payload_size = 2;	
   81920:	4a08      	ldr	r2, [pc, #32]	; (81944 <ISPProtocol_WriteFuseLock+0x58>)
	avrisp_status_payload[0] = V2Command;
   81922:	f883 8000 	strb.w	r8, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   81926:	7058      	strb	r0, [r3, #1]
	avrisp_status_payload_size = 2;	
   81928:	8011      	strh	r1, [r2, #0]
}
   8192a:	b002      	add	sp, #8
   8192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81930:	4770      	bx	lr
   81932:	bf00      	nop
   81934:	2000200c 	.word	0x2000200c
   81938:	000858cd 	.word	0x000858cd
   8193c:	40008000 	.word	0x40008000
   81940:	20001648 	.word	0x20001648
   81944:	20001668 	.word	0x20001668

00081948 <ISPProtocol_SPIMulti>:
}
   81948:	4770      	bx	lr
   8194a:	bf00      	nop

0008194c <ISPProtocol_DelayMS>:
	if (DelayMS){delay_ms(DelayMS);};
   8194c:	b900      	cbnz	r0, 81950 <ISPProtocol_DelayMS+0x4>
   8194e:	4770      	bx	lr
   81950:	f243 6caf 	movw	ip, #13999	; 0x36af
   81954:	4908      	ldr	r1, [pc, #32]	; (81978 <ISPProtocol_DelayMS+0x2c>)
{
   81956:	b510      	push	{r4, lr}
	if (DelayMS){delay_ms(DelayMS);};
   81958:	fba0 0101 	umull	r0, r1, r0, r1
   8195c:	eb10 000c 	adds.w	r0, r0, ip
   81960:	f04f 0300 	mov.w	r3, #0
   81964:	4c05      	ldr	r4, [pc, #20]	; (8197c <ISPProtocol_DelayMS+0x30>)
   81966:	f243 62b0 	movw	r2, #14000	; 0x36b0
   8196a:	f141 0100 	adc.w	r1, r1, #0
   8196e:	47a0      	blx	r4
}
   81970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (DelayMS){delay_ms(DelayMS);};
   81974:	4b02      	ldr	r3, [pc, #8]	; (81980 <ISPProtocol_DelayMS+0x34>)
   81976:	4718      	bx	r3
   81978:	05b8d800 	.word	0x05b8d800
   8197c:	000869ed 	.word	0x000869ed
   81980:	20000091 	.word	0x20000091

00081984 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   81984:	b570      	push	{r4, r5, r6, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   81986:	4b21      	ldr	r3, [pc, #132]	; (81a0c <ISPTarget_EnableTargetISP+0x88>)
   81988:	2098      	movs	r0, #152	; 0x98
   8198a:	4798      	blx	r3
   8198c:	4601      	mov	r1, r0
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   8198e:	4c20      	ldr	r4, [pc, #128]	; (81a10 <ISPTarget_EnableTargetISP+0x8c>)
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   81990:	4a20      	ldr	r2, [pc, #128]	; (81a14 <ISPTarget_EnableTargetISP+0x90>)
	spi_enable_clock(SPI);
   81992:	4620      	mov	r0, r4
   81994:	4b20      	ldr	r3, [pc, #128]	; (81a18 <ISPTarget_EnableTargetISP+0x94>)
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   81996:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
	spi_enable_clock(SPI);
   8199a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8199c:	2380      	movs	r3, #128	; 0x80
   8199e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   819a0:	6863      	ldr	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   819a2:	4628      	mov	r0, r5
   819a4:	f043 0301 	orr.w	r3, r3, #1
   819a8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   819aa:	6863      	ldr	r3, [r4, #4]
   819ac:	491b      	ldr	r1, [pc, #108]	; (81a1c <ISPTarget_EnableTargetISP+0x98>)
   819ae:	f043 0310 	orr.w	r3, r3, #16
   819b2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   819b4:	6863      	ldr	r3, [r4, #4]
   819b6:	4a1a      	ldr	r2, [pc, #104]	; (81a20 <ISPTarget_EnableTargetISP+0x9c>)
   819b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   819bc:	6063      	str	r3, [r4, #4]
   819be:	4790      	blx	r2
   819c0:	4605      	mov	r5, r0
		bauddiv = 255;
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   819c2:	2200      	movs	r2, #0
	if (bauddiv < 0){
   819c4:	2d00      	cmp	r5, #0
   819c6:	bfb8      	it	lt
   819c8:	25ff      	movlt	r5, #255	; 0xff
	spi_set_clock_polarity(SPI, 0, 0);
   819ca:	4620      	mov	r0, r4
   819cc:	4611      	mov	r1, r2
   819ce:	4b15      	ldr	r3, [pc, #84]	; (81a24 <ISPTarget_EnableTargetISP+0xa0>)
   819d0:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   819d2:	4620      	mov	r0, r4
   819d4:	2201      	movs	r2, #1
   819d6:	2100      	movs	r1, #0
   819d8:	4b13      	ldr	r3, [pc, #76]	; (81a28 <ISPTarget_EnableTargetISP+0xa4>)
   819da:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   819dc:	b2ea      	uxtb	r2, r5
   819de:	4620      	mov	r0, r4
   819e0:	2100      	movs	r1, #0
   819e2:	4b12      	ldr	r3, [pc, #72]	; (81a2c <ISPTarget_EnableTargetISP+0xa8>)
   819e4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   819e6:	2301      	movs	r3, #1
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   819e8:	4e11      	ldr	r6, [pc, #68]	; (81a30 <ISPTarget_EnableTargetISP+0xac>)
   819ea:	6023      	str	r3, [r4, #0]
   819ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819f0:	200e      	movs	r0, #14
   819f2:	47b0      	blx	r6
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   819f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819f8:	200d      	movs	r0, #13
   819fa:	47b0      	blx	r6
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   819fc:	4633      	mov	r3, r6
#endif

}
   819fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81a02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a06:	200f      	movs	r0, #15
   81a08:	4718      	bx	r3
   81a0a:	bf00      	nop
   81a0c:	00080655 	.word	0x00080655
   81a10:	40008000 	.word	0x40008000
   81a14:	200001e4 	.word	0x200001e4
   81a18:	00085885 	.word	0x00085885
   81a1c:	05b8d800 	.word	0x05b8d800
   81a20:	00085939 	.word	0x00085939
   81a24:	00085909 	.word	0x00085909
   81a28:	00085921 	.word	0x00085921
   81a2c:	00085951 	.word	0x00085951
   81a30:	00085d79 	.word	0x00085d79

00081a34 <ISPTarget_DisableTargetISP>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81a34:	2202      	movs	r2, #2
   81a36:	4802      	ldr	r0, [pc, #8]	; (81a40 <ISPTarget_DisableTargetISP+0xc>)
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   81a38:	4b02      	ldr	r3, [pc, #8]	; (81a44 <ISPTarget_DisableTargetISP+0x10>)
   81a3a:	6002      	str	r2, [r0, #0]
   81a3c:	4718      	bx	r3
   81a3e:	bf00      	nop
   81a40:	40008000 	.word	0x40008000
   81a44:	00085891 	.word	0x00085891

00081a48 <ISPTarget_ChangeTargetResetLine>:
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
	if (ResetTarget)
   81a48:	b170      	cbz	r0, 81a68 <ISPTarget_ChangeTargetResetLine+0x20>
{	
   81a4a:	b510      	push	{r4, lr}
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81a4c:	4b0b      	ldr	r3, [pc, #44]	; (81a7c <ISPTarget_ChangeTargetResetLine+0x34>)
   81a4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a52:	2011      	movs	r0, #17
   81a54:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   81a56:	209e      	movs	r0, #158	; 0x9e
   81a58:	4b09      	ldr	r3, [pc, #36]	; (81a80 <ISPTarget_ChangeTargetResetLine+0x38>)
   81a5a:	4798      	blx	r3
   81a5c:	b948      	cbnz	r0, 81a72 <ISPTarget_ChangeTargetResetLine+0x2a>
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
	}
}
   81a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81a62:	2011      	movs	r0, #17
   81a64:	4b07      	ldr	r3, [pc, #28]	; (81a84 <ISPTarget_ChangeTargetResetLine+0x3c>)
   81a66:	4718      	bx	r3
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81a68:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81a6c:	2011      	movs	r0, #17
   81a6e:	4b03      	ldr	r3, [pc, #12]	; (81a7c <ISPTarget_ChangeTargetResetLine+0x34>)
   81a70:	4718      	bx	r3
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   81a72:	2011      	movs	r0, #17
}
   81a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   81a78:	4b03      	ldr	r3, [pc, #12]	; (81a88 <ISPTarget_ChangeTargetResetLine+0x40>)
   81a7a:	4718      	bx	r3
   81a7c:	00085d79 	.word	0x00085d79
   81a80:	00080655 	.word	0x00080655
   81a84:	00085d1d 	.word	0x00085d1d
   81a88:	00085d39 	.word	0x00085d39

00081a8c <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   81a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   81a8e:	4d19      	ldr	r5, [pc, #100]	; (81af4 <ISPTarget_WaitWhileTargetBusy+0x68>)
   81a90:	4f19      	ldr	r7, [pc, #100]	; (81af8 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   81a92:	4e1a      	ldr	r6, [pc, #104]	; (81afc <ISPTarget_WaitWhileTargetBusy+0x70>)
   81a94:	4c1a      	ldr	r4, [pc, #104]	; (81b00 <ISPTarget_WaitWhileTargetBusy+0x74>)
   81a96:	b083      	sub	sp, #12
   81a98:	e000      	b.n	81a9c <ISPTarget_WaitWhileTargetBusy+0x10>
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   81a9a:	b33b      	cbz	r3, 81aec <ISPTarget_WaitWhileTargetBusy+0x60>
   81a9c:	2300      	movs	r3, #0
   81a9e:	21f0      	movs	r1, #240	; 0xf0
   81aa0:	461a      	mov	r2, r3
   81aa2:	4620      	mov	r0, r4
   81aa4:	47a8      	blx	r5
   81aa6:	2300      	movs	r3, #0
   81aa8:	4620      	mov	r0, r4
   81aaa:	461a      	mov	r2, r3
   81aac:	4619      	mov	r1, r3
   81aae:	47a8      	blx	r5
   81ab0:	2300      	movs	r3, #0
   81ab2:	4620      	mov	r0, r4
   81ab4:	461a      	mov	r2, r3
   81ab6:	4619      	mov	r1, r3
   81ab8:	47a8      	blx	r5
   81aba:	2300      	movs	r3, #0
   81abc:	4620      	mov	r0, r4
   81abe:	461a      	mov	r2, r3
   81ac0:	4619      	mov	r1, r3
   81ac2:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   81ac4:	6923      	ldr	r3, [r4, #16]
   81ac6:	059b      	lsls	r3, r3, #22
   81ac8:	d5fc      	bpl.n	81ac4 <ISPTarget_WaitWhileTargetBusy+0x38>
			spi_read(SPI, &ReceivedByte, &_);
   81aca:	4620      	mov	r0, r4
   81acc:	f10d 0205 	add.w	r2, sp, #5
   81ad0:	f10d 0106 	add.w	r1, sp, #6
   81ad4:	47b8      	blx	r7
			return  ReceivedByte;
   81ad6:	f89d 0006 	ldrb.w	r0, [sp, #6]
   81ada:	6833      	ldr	r3, [r6, #0]
   81adc:	f010 0001 	ands.w	r0, r0, #1
   81ae0:	d1db      	bne.n	81a9a <ISPTarget_WaitWhileTargetBusy+0xe>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   81ae2:	2b00      	cmp	r3, #0
   81ae4:	bf08      	it	eq
   81ae6:	2081      	moveq	r0, #129	; 0x81
}
   81ae8:	b003      	add	sp, #12
   81aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   81aec:	2081      	movs	r0, #129	; 0x81
}
   81aee:	b003      	add	sp, #12
   81af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81af2:	bf00      	nop
   81af4:	000858cd 	.word	0x000858cd
   81af8:	0008589d 	.word	0x0008589d
   81afc:	20001798 	.word	0x20001798
   81b00:	40008000 	.word	0x40008000

00081b04 <ISPTarget_LoadExtendedAddress>:
		  spi_write(SPI, data, 0, 0);
   81b04:	2300      	movs	r3, #0
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81b06:	b570      	push	{r4, r5, r6, lr}
   81b08:	4d0c      	ldr	r5, [pc, #48]	; (81b3c <ISPTarget_LoadExtendedAddress+0x38>)
   81b0a:	4c0d      	ldr	r4, [pc, #52]	; (81b40 <ISPTarget_LoadExtendedAddress+0x3c>)
   81b0c:	461a      	mov	r2, r3
   81b0e:	214d      	movs	r1, #77	; 0x4d
   81b10:	4628      	mov	r0, r5
   81b12:	47a0      	blx	r4
   81b14:	2300      	movs	r3, #0
   81b16:	4628      	mov	r0, r5
   81b18:	461a      	mov	r2, r3
   81b1a:	4619      	mov	r1, r3
   81b1c:	47a0      	blx	r4
   81b1e:	2300      	movs	r3, #0
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
   81b20:	4a08      	ldr	r2, [pc, #32]	; (81b44 <ISPTarget_LoadExtendedAddress+0x40>)
   81b22:	4628      	mov	r0, r5
   81b24:	7891      	ldrb	r1, [r2, #2]
   81b26:	461a      	mov	r2, r3
   81b28:	47a0      	blx	r4
   81b2a:	2300      	movs	r3, #0
   81b2c:	4628      	mov	r0, r5
   81b2e:	46a4      	mov	ip, r4
	ISPTarget_SendByte(0x00);
}
   81b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   81b34:	461a      	mov	r2, r3
   81b36:	4619      	mov	r1, r3
   81b38:	4760      	bx	ip
   81b3a:	bf00      	nop
   81b3c:	40008000 	.word	0x40008000
   81b40:	000858cd 	.word	0x000858cd
   81b44:	20001540 	.word	0x20001540

00081b48 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81b4c:	f000 047e 	and.w	r4, r0, #126	; 0x7e
{
   81b50:	b083      	sub	sp, #12
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81b52:	2c20      	cmp	r4, #32
{
   81b54:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81b58:	dc1e      	bgt.n	81b98 <ISPTarget_WaitForProgComplete+0x50>
   81b5a:	2c01      	cmp	r4, #1
   81b5c:	dd15      	ble.n	81b8a <ISPTarget_WaitForProgComplete+0x42>
   81b5e:	3c02      	subs	r4, #2
   81b60:	4690      	mov	r8, r2
   81b62:	2c1e      	cmp	r4, #30
   81b64:	d811      	bhi.n	81b8a <ISPTarget_WaitForProgComplete+0x42>
   81b66:	e8df f004 	tbb	[pc, r4]
   81b6a:	1059      	.short	0x1059
   81b6c:	10101021 	.word	0x10101021
   81b70:	10101019 	.word	0x10101019
   81b74:	10101010 	.word	0x10101010
   81b78:	10101059 	.word	0x10101059
   81b7c:	10101010 	.word	0x10101010
   81b80:	10101010 	.word	0x10101010
   81b84:	10101010 	.word	0x10101010
   81b88:	21          	.byte	0x21
   81b89:	00          	.byte	0x00
   81b8a:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81b8c:	2364      	movs	r3, #100	; 0x64
   81b8e:	4f2b      	ldr	r7, [pc, #172]	; (81c3c <ISPTarget_WaitForProgComplete+0xf4>)
   81b90:	603b      	str	r3, [r7, #0]

	return ProgrammingStatus;
}
   81b92:	b003      	add	sp, #12
   81b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81b98:	2c40      	cmp	r4, #64	; 0x40
   81b9a:	d1f6      	bne.n	81b8a <ISPTarget_WaitForProgComplete+0x42>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   81b9c:	4b28      	ldr	r3, [pc, #160]	; (81c40 <ISPTarget_WaitForProgComplete+0xf8>)
   81b9e:	4798      	blx	r3
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81ba0:	2364      	movs	r3, #100	; 0x64
   81ba2:	4f26      	ldr	r7, [pc, #152]	; (81c3c <ISPTarget_WaitForProgComplete+0xf4>)
   81ba4:	603b      	str	r3, [r7, #0]
}
   81ba6:	b003      	add	sp, #12
   81ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bac:	4d25      	ldr	r5, [pc, #148]	; (81c44 <ISPTarget_WaitForProgComplete+0xfc>)
   81bae:	f8df a098 	ldr.w	sl, [pc, #152]	; 81c48 <ISPTarget_WaitForProgComplete+0x100>
   81bb2:	4f22      	ldr	r7, [pc, #136]	; (81c3c <ISPTarget_WaitForProgComplete+0xf4>)
   81bb4:	4c25      	ldr	r4, [pc, #148]	; (81c4c <ISPTarget_WaitForProgComplete+0x104>)
				ISPTarget_SendByte(PollAddress >> 8);
   81bb6:	ea4f 2b11 	mov.w	fp, r1, lsr #8
   81bba:	b2ce      	uxtb	r6, r1
   81bbc:	fa1f f989 	uxth.w	r9, r9
   81bc0:	e001      	b.n	81bc6 <ISPTarget_WaitForProgComplete+0x7e>
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   81bc2:	2b00      	cmp	r3, #0
   81bc4:	d034      	beq.n	81c30 <ISPTarget_WaitForProgComplete+0xe8>
   81bc6:	2300      	movs	r3, #0
   81bc8:	4649      	mov	r1, r9
   81bca:	461a      	mov	r2, r3
   81bcc:	4620      	mov	r0, r4
   81bce:	47a8      	blx	r5
   81bd0:	2300      	movs	r3, #0
   81bd2:	4659      	mov	r1, fp
   81bd4:	461a      	mov	r2, r3
   81bd6:	4620      	mov	r0, r4
   81bd8:	47a8      	blx	r5
   81bda:	2300      	movs	r3, #0
   81bdc:	4631      	mov	r1, r6
   81bde:	461a      	mov	r2, r3
   81be0:	4620      	mov	r0, r4
   81be2:	47a8      	blx	r5
   81be4:	2300      	movs	r3, #0
   81be6:	4620      	mov	r0, r4
   81be8:	461a      	mov	r2, r3
   81bea:	4619      	mov	r1, r3
   81bec:	47a8      	blx	r5
   81bee:	6923      	ldr	r3, [r4, #16]
   81bf0:	059b      	lsls	r3, r3, #22
   81bf2:	d5fc      	bpl.n	81bee <ISPTarget_WaitForProgComplete+0xa6>
			spi_read(SPI, &ReceivedByte, &_);
   81bf4:	4620      	mov	r0, r4
   81bf6:	f10d 0205 	add.w	r2, sp, #5
   81bfa:	f10d 0106 	add.w	r1, sp, #6
   81bfe:	47d0      	blx	sl
			return  ReceivedByte;
   81c00:	f89d 3006 	ldrb.w	r3, [sp, #6]
   81c04:	4598      	cmp	r8, r3
   81c06:	683b      	ldr	r3, [r7, #0]
   81c08:	d0db      	beq.n	81bc2 <ISPTarget_WaitForProgComplete+0x7a>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81c0a:	2b00      	cmp	r3, #0
   81c0c:	bf14      	ite	ne
   81c0e:	2000      	movne	r0, #0
   81c10:	2080      	moveq	r0, #128	; 0x80
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81c12:	2364      	movs	r3, #100	; 0x64
   81c14:	603b      	str	r3, [r7, #0]
}
   81c16:	b003      	add	sp, #12
   81c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ISPProtocol_DelayMS(DelayMS);
   81c1c:	4618      	mov	r0, r3
   81c1e:	4b0c      	ldr	r3, [pc, #48]	; (81c50 <ISPTarget_WaitForProgComplete+0x108>)
   81c20:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81c22:	2000      	movs	r0, #0
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81c24:	2364      	movs	r3, #100	; 0x64
   81c26:	4f05      	ldr	r7, [pc, #20]	; (81c3c <ISPTarget_WaitForProgComplete+0xf4>)
   81c28:	603b      	str	r3, [r7, #0]
}
   81c2a:	b003      	add	sp, #12
   81c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81c30:	2080      	movs	r0, #128	; 0x80
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81c32:	2364      	movs	r3, #100	; 0x64
   81c34:	603b      	str	r3, [r7, #0]
}
   81c36:	b003      	add	sp, #12
   81c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c3c:	20001798 	.word	0x20001798
   81c40:	00081a8d 	.word	0x00081a8d
   81c44:	000858cd 	.word	0x000858cd
   81c48:	0008589d 	.word	0x0008589d
   81c4c:	40008000 	.word	0x40008000
   81c50:	0008194d 	.word	0x0008194d

00081c54 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   81c54:	4b01      	ldr	r3, [pc, #4]	; (81c5c <set_timeout+0x8>)
   81c56:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   81c58:	4770      	bx	lr
   81c5a:	bf00      	nop
   81c5c:	20000474 	.word	0x20000474

00081c60 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   81c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81c62:	2510      	movs	r5, #16
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81c64:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
   81c68:	4b0f      	ldr	r3, [pc, #60]	; (81ca8 <setup_timeoutcnt+0x48>)
   81c6a:	2016      	movs	r0, #22
   81c6c:	4798      	blx	r3
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   81c6e:	4c0f      	ldr	r4, [pc, #60]	; (81cac <setup_timeoutcnt+0x4c>)
   81c70:	4b0f      	ldr	r3, [pc, #60]	; (81cb0 <setup_timeoutcnt+0x50>)
   81c72:	f24c 0201 	movw	r2, #49153	; 0xc001
   81c76:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
   81c7a:	2100      	movs	r1, #0
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81c7c:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
   81c80:	4620      	mov	r0, r4
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81c82:	601e      	str	r6, [r3, #0]
   81c84:	4f0b      	ldr	r7, [pc, #44]	; (81cb4 <setup_timeoutcnt+0x54>)
   81c86:	47b8      	blx	r7
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   81c88:	2100      	movs	r1, #0
   81c8a:	4620      	mov	r0, r4
   81c8c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   81c90:	4b09      	ldr	r3, [pc, #36]	; (81cb8 <setup_timeoutcnt+0x58>)
   81c92:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   81c94:	462a      	mov	r2, r5
   81c96:	4b09      	ldr	r3, [pc, #36]	; (81cbc <setup_timeoutcnt+0x5c>)
   81c98:	2100      	movs	r1, #0
   81c9a:	4620      	mov	r0, r4
   81c9c:	4798      	blx	r3
	
	timerEnabled = true;
   81c9e:	2201      	movs	r2, #1
   81ca0:	4b07      	ldr	r3, [pc, #28]	; (81cc0 <setup_timeoutcnt+0x60>)
   81ca2:	701a      	strb	r2, [r3, #0]
}
   81ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ca6:	bf00      	nop
   81ca8:	00085b7d 	.word	0x00085b7d
   81cac:	40080000 	.word	0x40080000
   81cb0:	e000e100 	.word	0xe000e100
   81cb4:	00086935 	.word	0x00086935
   81cb8:	00086965 	.word	0x00086965
   81cbc:	0008696d 	.word	0x0008696d
   81cc0:	2000179c 	.word	0x2000179c

00081cc4 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   81cc4:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   81cc6:	4b0a      	ldr	r3, [pc, #40]	; (81cf0 <start_timeoutcnt+0x2c>)
   81cc8:	781b      	ldrb	r3, [r3, #0]
   81cca:	b16b      	cbz	r3, 81ce8 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81ccc:	2100      	movs	r1, #0
   81cce:	4809      	ldr	r0, [pc, #36]	; (81cf4 <start_timeoutcnt+0x30>)
   81cd0:	4b09      	ldr	r3, [pc, #36]	; (81cf8 <start_timeoutcnt+0x34>)
   81cd2:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   81cd4:	4b09      	ldr	r3, [pc, #36]	; (81cfc <start_timeoutcnt+0x38>)
   81cd6:	4a0a      	ldr	r2, [pc, #40]	; (81d00 <start_timeoutcnt+0x3c>)
   81cd8:	681b      	ldr	r3, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   81cda:	2100      	movs	r1, #0
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   81cdc:	6013      	str	r3, [r2, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   81cde:	4805      	ldr	r0, [pc, #20]	; (81cf4 <start_timeoutcnt+0x30>)
   81ce0:	4b08      	ldr	r3, [pc, #32]	; (81d04 <start_timeoutcnt+0x40>)
}
   81ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   81ce6:	4718      	bx	r3
		setup_timeoutcnt();
   81ce8:	4b07      	ldr	r3, [pc, #28]	; (81d08 <start_timeoutcnt+0x44>)
   81cea:	4798      	blx	r3
   81cec:	e7ee      	b.n	81ccc <start_timeoutcnt+0x8>
   81cee:	bf00      	nop
   81cf0:	2000179c 	.word	0x2000179c
   81cf4:	40080000 	.word	0x40080000
   81cf8:	0008695d 	.word	0x0008695d
   81cfc:	20000474 	.word	0x20000474
   81d00:	20001798 	.word	0x20001798
   81d04:	00086955 	.word	0x00086955
   81d08:	00081c61 	.word	0x00081c61

00081d0c <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   81d0c:	2100      	movs	r1, #0
   81d0e:	4801      	ldr	r0, [pc, #4]	; (81d14 <stop_timeoutcnt+0x8>)
   81d10:	4b01      	ldr	r3, [pc, #4]	; (81d18 <stop_timeoutcnt+0xc>)
   81d12:	4718      	bx	r3
   81d14:	40080000 	.word	0x40080000
   81d18:	0008695d 	.word	0x0008695d

00081d1c <TC0_Handler>:
}

ISR(TC0_Handler)
{
	if(TimeoutTicksRemaining){
   81d1c:	4a04      	ldr	r2, [pc, #16]	; (81d30 <TC0_Handler+0x14>)
   81d1e:	6813      	ldr	r3, [r2, #0]
   81d20:	b10b      	cbz	r3, 81d26 <TC0_Handler+0xa>
		TimeoutTicksRemaining--;
   81d22:	3b01      	subs	r3, #1
   81d24:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   81d26:	2100      	movs	r1, #0
   81d28:	4802      	ldr	r0, [pc, #8]	; (81d34 <TC0_Handler+0x18>)
   81d2a:	4b03      	ldr	r3, [pc, #12]	; (81d38 <TC0_Handler+0x1c>)
   81d2c:	4718      	bx	r3
   81d2e:	bf00      	nop
   81d30:	20001798 	.word	0x20001798
   81d34:	40080000 	.word	0x40080000
   81d38:	00086975 	.word	0x00086975

00081d3c <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81d3c:	2300      	movs	r3, #0
   81d3e:	6043      	str	r3, [r0, #4]
   81d40:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81d42:	6083      	str	r3, [r0, #8]
}
   81d44:	4770      	bx	lr
   81d46:	bf00      	nop

00081d48 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81d48:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81d4a:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81d4c:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81d4e:	2cc8      	cmp	r4, #200	; 0xc8
   81d50:	bf28      	it	cs
   81d52:	2400      	movcs	r4, #0
   81d54:	e000      	b.n	81d58 <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
   81d56:	b142      	cbz	r2, 81d6a <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
   81d58:	6843      	ldr	r3, [r0, #4]
   81d5a:	42a3      	cmp	r3, r4
   81d5c:	d0fb      	beq.n	81d56 <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81d5e:	6803      	ldr	r3, [r0, #0]
   81d60:	4403      	add	r3, r0
   81d62:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81d64:	6004      	str	r4, [r0, #0]
}
   81d66:	bc10      	pop	{r4}
   81d68:	4770      	bx	lr
            cbuf->dropped++;
   81d6a:	6883      	ldr	r3, [r0, #8]
}
   81d6c:	bc10      	pop	{r4}
            cbuf->dropped++;
   81d6e:	3301      	adds	r3, #1
   81d70:	6083      	str	r3, [r0, #8]
}
   81d72:	4770      	bx	lr

00081d74 <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   81d74:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   81d76:	6801      	ldr	r1, [r0, #0]
{
   81d78:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
   81d7a:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
   81d7c:	4418      	add	r0, r3
   81d7e:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
   81d80:	d005      	beq.n	81d8e <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   81d82:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81d84:	2bc8      	cmp	r3, #200	; 0xc8
   81d86:	bf28      	it	cs
   81d88:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   81d8a:	6053      	str	r3, [r2, #4]

    return retval;
   81d8c:	4770      	bx	lr
        return SERIAL_ERR;
   81d8e:	20ff      	movs	r0, #255	; 0xff
}
   81d90:	4770      	bx	lr
   81d92:	bf00      	nop

00081d94 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81d94:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   81d96:	6840      	ldr	r0, [r0, #4]
}
   81d98:	1ac0      	subs	r0, r0, r3
   81d9a:	bf18      	it	ne
   81d9c:	2001      	movne	r0, #1
   81d9e:	4770      	bx	lr

00081da0 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   81da0:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81da2:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81da4:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81da6:	bf48      	it	mi
   81da8:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   81daa:	4770      	bx	lr

00081dac <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   81dac:	4a02      	ldr	r2, [pc, #8]	; (81db8 <udc_valid_address+0xc>)
   81dae:	4b03      	ldr	r3, [pc, #12]	; (81dbc <udc_valid_address+0x10>)
   81db0:	8850      	ldrh	r0, [r2, #2]
   81db2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81db6:	4718      	bx	r3
   81db8:	2000200c 	.word	0x2000200c
   81dbc:	00085095 	.word	0x00085095

00081dc0 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81dc0:	4b15      	ldr	r3, [pc, #84]	; (81e18 <udc_update_iface_desc.part.0+0x58>)
   81dc2:	681b      	ldr	r3, [r3, #0]
   81dc4:	681b      	ldr	r3, [r3, #0]
   81dc6:	791a      	ldrb	r2, [r3, #4]
   81dc8:	4282      	cmp	r2, r0
   81dca:	d922      	bls.n	81e12 <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   81dcc:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81dce:	4c13      	ldr	r4, [pc, #76]	; (81e1c <udc_update_iface_desc.part.0+0x5c>)
   81dd0:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81dd2:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81dd6:	449c      	add	ip, r3
	while (ptr_end_desc >
   81dd8:	4563      	cmp	r3, ip
   81dda:	d217      	bcs.n	81e0c <udc_update_iface_desc.part.0+0x4c>
   81ddc:	2500      	movs	r5, #0
   81dde:	e004      	b.n	81dea <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   81de0:	781a      	ldrb	r2, [r3, #0]
   81de2:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81de4:	4413      	add	r3, r2
	while (ptr_end_desc >
   81de6:	459c      	cmp	ip, r3
   81de8:	d90c      	bls.n	81e04 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81dea:	785a      	ldrb	r2, [r3, #1]
   81dec:	2a04      	cmp	r2, #4
   81dee:	d1f7      	bne.n	81de0 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81df0:	789a      	ldrb	r2, [r3, #2]
   81df2:	4282      	cmp	r2, r0
   81df4:	d1f4      	bne.n	81de0 <udc_update_iface_desc.part.0+0x20>
   81df6:	78da      	ldrb	r2, [r3, #3]
   81df8:	428a      	cmp	r2, r1
   81dfa:	d1f1      	bne.n	81de0 <udc_update_iface_desc.part.0+0x20>
   81dfc:	b105      	cbz	r5, 81e00 <udc_update_iface_desc.part.0+0x40>
   81dfe:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   81e00:	2001      	movs	r0, #1
   81e02:	e001      	b.n	81e08 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   81e04:	2000      	movs	r0, #0
   81e06:	6023      	str	r3, [r4, #0]
}
   81e08:	bc30      	pop	{r4, r5}
   81e0a:	4770      	bx	lr
		return false;
   81e0c:	2000      	movs	r0, #0
}
   81e0e:	bc30      	pop	{r4, r5}
   81e10:	4770      	bx	lr
		return false;
   81e12:	2000      	movs	r0, #0
}
   81e14:	4770      	bx	lr
   81e16:	bf00      	nop
   81e18:	200017a4 	.word	0x200017a4
   81e1c:	200017a8 	.word	0x200017a8

00081e20 <udc_iface_disable>:
{
   81e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   81e24:	4c1c      	ldr	r4, [pc, #112]	; (81e98 <udc_iface_disable+0x78>)
   81e26:	7823      	ldrb	r3, [r4, #0]
   81e28:	b37b      	cbz	r3, 81e8a <udc_iface_disable+0x6a>
   81e2a:	2100      	movs	r1, #0
   81e2c:	4e1b      	ldr	r6, [pc, #108]	; (81e9c <udc_iface_disable+0x7c>)
   81e2e:	4605      	mov	r5, r0
   81e30:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   81e32:	b350      	cbz	r0, 81e8a <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81e34:	f8df 8068 	ldr.w	r8, [pc, #104]	; 81ea0 <udc_iface_disable+0x80>
   81e38:	f8d8 3000 	ldr.w	r3, [r8]
   81e3c:	685b      	ldr	r3, [r3, #4]
   81e3e:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81e42:	68fb      	ldr	r3, [r7, #12]
   81e44:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81e46:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81e48:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81e4a:	b1f3      	cbz	r3, 81e8a <udc_iface_disable+0x6a>
   81e4c:	4628      	mov	r0, r5
   81e4e:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81e50:	4605      	mov	r5, r0
   81e52:	b1d0      	cbz	r0, 81e8a <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81e54:	4b13      	ldr	r3, [pc, #76]	; (81ea4 <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   81e56:	4e14      	ldr	r6, [pc, #80]	; (81ea8 <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81e58:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   81e5a:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   81e5e:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   81e60:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81e62:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81e64:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81e66:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   81e68:	42a2      	cmp	r2, r4
   81e6a:	d806      	bhi.n	81e7a <udc_iface_disable+0x5a>
   81e6c:	e008      	b.n	81e80 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   81e6e:	2b05      	cmp	r3, #5
   81e70:	d00f      	beq.n	81e92 <udc_iface_disable+0x72>
				desc->bLength);
   81e72:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81e74:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   81e76:	42a2      	cmp	r2, r4
   81e78:	d902      	bls.n	81e80 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81e7a:	7863      	ldrb	r3, [r4, #1]
   81e7c:	2b04      	cmp	r3, #4
   81e7e:	d1f6      	bne.n	81e6e <udc_iface_disable+0x4e>
	udi_api->disable();
   81e80:	687b      	ldr	r3, [r7, #4]
   81e82:	4798      	blx	r3
}
   81e84:	4628      	mov	r0, r5
   81e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   81e8a:	2500      	movs	r5, #0
}
   81e8c:	4628      	mov	r0, r5
   81e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   81e92:	78a0      	ldrb	r0, [r4, #2]
   81e94:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81e96:	e7e0      	b.n	81e5a <udc_iface_disable+0x3a>
   81e98:	200017a3 	.word	0x200017a3
   81e9c:	00081dc1 	.word	0x00081dc1
   81ea0:	200017a4 	.word	0x200017a4
   81ea4:	200017a8 	.word	0x200017a8
   81ea8:	000850f9 	.word	0x000850f9

00081eac <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   81eac:	4b18      	ldr	r3, [pc, #96]	; (81f10 <udc_iface_enable+0x64>)
   81eae:	781b      	ldrb	r3, [r3, #0]
   81eb0:	b35b      	cbz	r3, 81f0a <udc_iface_enable+0x5e>
{
   81eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81eb6:	4b17      	ldr	r3, [pc, #92]	; (81f14 <udc_iface_enable+0x68>)
   81eb8:	4605      	mov	r5, r0
   81eba:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   81ebc:	b310      	cbz	r0, 81f04 <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81ebe:	4b16      	ldr	r3, [pc, #88]	; (81f18 <udc_iface_enable+0x6c>)
   81ec0:	4e16      	ldr	r6, [pc, #88]	; (81f1c <udc_iface_enable+0x70>)
   81ec2:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81ec4:	4f16      	ldr	r7, [pc, #88]	; (81f20 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   81ec6:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   81ec8:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   81eca:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81ecc:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81ece:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81ed0:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   81ed2:	42a2      	cmp	r2, r4
   81ed4:	d806      	bhi.n	81ee4 <udc_iface_enable+0x38>
   81ed6:	e008      	b.n	81eea <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   81ed8:	2b05      	cmp	r3, #5
   81eda:	d00d      	beq.n	81ef8 <udc_iface_enable+0x4c>
				desc->bLength);
   81edc:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81ede:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   81ee0:	42a2      	cmp	r2, r4
   81ee2:	d902      	bls.n	81eea <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81ee4:	7863      	ldrb	r3, [r4, #1]
   81ee6:	2b04      	cmp	r3, #4
   81ee8:	d1f6      	bne.n	81ed8 <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81eea:	684b      	ldr	r3, [r1, #4]
   81eec:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   81ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81ef4:	681b      	ldr	r3, [r3, #0]
   81ef6:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81ef8:	88a2      	ldrh	r2, [r4, #4]
   81efa:	78e1      	ldrb	r1, [r4, #3]
   81efc:	78a0      	ldrb	r0, [r4, #2]
   81efe:	47b8      	blx	r7
   81f00:	2800      	cmp	r0, #0
   81f02:	d1e0      	bne.n	81ec6 <udc_iface_enable+0x1a>
}
   81f04:	2000      	movs	r0, #0
   81f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f0a:	2000      	movs	r0, #0
   81f0c:	4770      	bx	lr
   81f0e:	bf00      	nop
   81f10:	200017a3 	.word	0x200017a3
   81f14:	00081dc1 	.word	0x00081dc1
   81f18:	200017a8 	.word	0x200017a8
   81f1c:	200017a4 	.word	0x200017a4
   81f20:	000853c9 	.word	0x000853c9

00081f24 <udc_get_interface_desc>:
	return udc_ptr_iface;
   81f24:	4b01      	ldr	r3, [pc, #4]	; (81f2c <udc_get_interface_desc+0x8>)
}
   81f26:	6818      	ldr	r0, [r3, #0]
   81f28:	4770      	bx	lr
   81f2a:	bf00      	nop
   81f2c:	200017a8 	.word	0x200017a8

00081f30 <udc_start>:
	udd_enable();
   81f30:	4b00      	ldr	r3, [pc, #0]	; (81f34 <udc_start+0x4>)
   81f32:	4718      	bx	r3
   81f34:	00084f4d 	.word	0x00084f4d

00081f38 <udc_stop>:
{
   81f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   81f3a:	4f0d      	ldr	r7, [pc, #52]	; (81f70 <udc_stop+0x38>)
	udd_disable();
   81f3c:	4b0d      	ldr	r3, [pc, #52]	; (81f74 <udc_stop+0x3c>)
   81f3e:	4798      	blx	r3
	if (udc_num_configuration) {
   81f40:	783b      	ldrb	r3, [r7, #0]
   81f42:	b17b      	cbz	r3, 81f64 <udc_stop+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f44:	4d0c      	ldr	r5, [pc, #48]	; (81f78 <udc_stop+0x40>)
   81f46:	682b      	ldr	r3, [r5, #0]
   81f48:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81f4a:	791b      	ldrb	r3, [r3, #4]
   81f4c:	b153      	cbz	r3, 81f64 <udc_stop+0x2c>
   81f4e:	2400      	movs	r4, #0
   81f50:	4620      	mov	r0, r4
   81f52:	4e0a      	ldr	r6, [pc, #40]	; (81f7c <udc_stop+0x44>)
			udc_iface_disable(iface_num);
   81f54:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f56:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81f58:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f5a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81f5c:	b2e0      	uxtb	r0, r4
   81f5e:	791b      	ldrb	r3, [r3, #4]
   81f60:	4283      	cmp	r3, r0
   81f62:	d8f7      	bhi.n	81f54 <udc_stop+0x1c>
	udc_num_configuration = 0;
   81f64:	2300      	movs	r3, #0
	udc_device_status =
   81f66:	4a06      	ldr	r2, [pc, #24]	; (81f80 <udc_stop+0x48>)
	udc_num_configuration = 0;
   81f68:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   81f6a:	8013      	strh	r3, [r2, #0]
}
   81f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81f6e:	bf00      	nop
   81f70:	200017a3 	.word	0x200017a3
   81f74:	00084de1 	.word	0x00084de1
   81f78:	200017a4 	.word	0x200017a4
   81f7c:	00081e21 	.word	0x00081e21
   81f80:	2000179e 	.word	0x2000179e

00081f84 <udc_reset>:
{
   81f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   81f86:	4f0c      	ldr	r7, [pc, #48]	; (81fb8 <udc_reset+0x34>)
   81f88:	783b      	ldrb	r3, [r7, #0]
   81f8a:	b17b      	cbz	r3, 81fac <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f8c:	4d0b      	ldr	r5, [pc, #44]	; (81fbc <udc_reset+0x38>)
   81f8e:	682b      	ldr	r3, [r5, #0]
   81f90:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81f92:	791b      	ldrb	r3, [r3, #4]
   81f94:	b153      	cbz	r3, 81fac <udc_reset+0x28>
   81f96:	2400      	movs	r4, #0
   81f98:	4620      	mov	r0, r4
   81f9a:	4e09      	ldr	r6, [pc, #36]	; (81fc0 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   81f9c:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81f9e:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81fa0:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81fa2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81fa4:	b2e0      	uxtb	r0, r4
   81fa6:	791b      	ldrb	r3, [r3, #4]
   81fa8:	4283      	cmp	r3, r0
   81faa:	d8f7      	bhi.n	81f9c <udc_reset+0x18>
	udc_num_configuration = 0;
   81fac:	2300      	movs	r3, #0
	udc_device_status =
   81fae:	4a05      	ldr	r2, [pc, #20]	; (81fc4 <udc_reset+0x40>)
	udc_num_configuration = 0;
   81fb0:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   81fb2:	8013      	strh	r3, [r2, #0]
}
   81fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81fb6:	bf00      	nop
   81fb8:	200017a3 	.word	0x200017a3
   81fbc:	200017a4 	.word	0x200017a4
   81fc0:	00081e21 	.word	0x00081e21
   81fc4:	2000179e 	.word	0x2000179e

00081fc8 <udc_sof_notify>:
{
   81fc8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   81fca:	4b0c      	ldr	r3, [pc, #48]	; (81ffc <udc_sof_notify+0x34>)
   81fcc:	781b      	ldrb	r3, [r3, #0]
   81fce:	b19b      	cbz	r3, 81ff8 <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81fd0:	4d0b      	ldr	r5, [pc, #44]	; (82000 <udc_sof_notify+0x38>)
   81fd2:	682b      	ldr	r3, [r5, #0]
   81fd4:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   81fd6:	7912      	ldrb	r2, [r2, #4]
   81fd8:	b172      	cbz	r2, 81ff8 <udc_sof_notify+0x30>
   81fda:	2400      	movs	r4, #0
   81fdc:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   81fde:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   81fe0:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   81fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   81fe6:	691b      	ldr	r3, [r3, #16]
   81fe8:	b103      	cbz	r3, 81fec <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   81fea:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81fec:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81fee:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81ff0:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   81ff2:	7909      	ldrb	r1, [r1, #4]
   81ff4:	4291      	cmp	r1, r2
   81ff6:	d8f2      	bhi.n	81fde <udc_sof_notify+0x16>
}
   81ff8:	bd38      	pop	{r3, r4, r5, pc}
   81ffa:	bf00      	nop
   81ffc:	200017a3 	.word	0x200017a3
   82000:	200017a4 	.word	0x200017a4

00082004 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82004:	2300      	movs	r3, #0
{
   82006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   8200a:	4c91      	ldr	r4, [pc, #580]	; (82250 <udc_process_setup+0x24c>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8200c:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   8200e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82012:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   82016:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82018:	f000 80d2 	beq.w	821c0 <udc_process_setup+0x1bc>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   8201c:	f994 2000 	ldrsb.w	r2, [r4]
   82020:	7823      	ldrb	r3, [r4, #0]
   82022:	2a00      	cmp	r2, #0
   82024:	db0e      	blt.n	82044 <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82026:	f013 0f60 	tst.w	r3, #96	; 0x60
   8202a:	d079      	beq.n	82120 <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8202c:	f013 0f1e 	tst.w	r3, #30
   82030:	d040      	beq.n	820b4 <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82032:	f003 031f 	and.w	r3, r3, #31
   82036:	2b02      	cmp	r3, #2
   82038:	f000 80b8 	beq.w	821ac <udc_process_setup+0x1a8>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8203c:	2500      	movs	r5, #0
#endif
}
   8203e:	4628      	mov	r0, r5
   82040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   82044:	88e5      	ldrh	r5, [r4, #6]
   82046:	2d00      	cmp	r5, #0
   82048:	d0f8      	beq.n	8203c <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8204a:	f013 0f60 	tst.w	r3, #96	; 0x60
   8204e:	d1ed      	bne.n	8202c <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82050:	f013 021f 	ands.w	r2, r3, #31
   82054:	f000 8173 	beq.w	8233e <udc_process_setup+0x33a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82058:	2a01      	cmp	r2, #1
   8205a:	f040 80c5 	bne.w	821e8 <udc_process_setup+0x1e4>
			switch (udd_g_ctrlreq.req.bRequest) {
   8205e:	7862      	ldrb	r2, [r4, #1]
   82060:	2a0a      	cmp	r2, #10
   82062:	d124      	bne.n	820ae <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82064:	2d01      	cmp	r5, #1
   82066:	d122      	bne.n	820ae <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   82068:	4a7a      	ldr	r2, [pc, #488]	; (82254 <udc_process_setup+0x250>)
   8206a:	7812      	ldrb	r2, [r2, #0]
   8206c:	b1fa      	cbz	r2, 820ae <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8206e:	4a7a      	ldr	r2, [pc, #488]	; (82258 <udc_process_setup+0x254>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82070:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82072:	6817      	ldr	r7, [r2, #0]
   82074:	683a      	ldr	r2, [r7, #0]
   82076:	7912      	ldrb	r2, [r2, #4]
   82078:	42b2      	cmp	r2, r6
   8207a:	d918      	bls.n	820ae <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   8207c:	2100      	movs	r1, #0
   8207e:	4630      	mov	r0, r6
   82080:	4b76      	ldr	r3, [pc, #472]	; (8225c <udc_process_setup+0x258>)
   82082:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   82084:	4605      	mov	r5, r0
   82086:	2800      	cmp	r0, #0
   82088:	f000 80d1 	beq.w	8222e <udc_process_setup+0x22a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8208c:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   8208e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   82092:	68db      	ldr	r3, [r3, #12]
   82094:	4798      	blx	r3
   82096:	4602      	mov	r2, r0
   82098:	4871      	ldr	r0, [pc, #452]	; (82260 <udc_process_setup+0x25c>)
	udd_set_setup_payload(&udc_iface_setting,1);
   8209a:	2101      	movs	r1, #1
   8209c:	4b71      	ldr	r3, [pc, #452]	; (82264 <udc_process_setup+0x260>)
	udc_iface_setting = udi_api->getsetting();
   8209e:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   820a0:	4798      	blx	r3
	return true;
   820a2:	e7cc      	b.n	8203e <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   820a4:	2a01      	cmp	r2, #1
   820a6:	f000 815b 	beq.w	82360 <udc_process_setup+0x35c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   820aa:	2a02      	cmp	r2, #2
   820ac:	d06e      	beq.n	8218c <udc_process_setup+0x188>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   820ae:	f013 0f1e 	tst.w	r3, #30
   820b2:	d1c3      	bne.n	8203c <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   820b4:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   820b6:	4e67      	ldr	r6, [pc, #412]	; (82254 <udc_process_setup+0x250>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   820b8:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   820ba:	bf04      	itt	eq
   820bc:	2301      	moveq	r3, #1
   820be:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   820c0:	7833      	ldrb	r3, [r6, #0]
   820c2:	2b00      	cmp	r3, #0
   820c4:	d0ba      	beq.n	8203c <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   820c6:	4f64      	ldr	r7, [pc, #400]	; (82258 <udc_process_setup+0x254>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   820c8:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   820cc:	683d      	ldr	r5, [r7, #0]
   820ce:	682b      	ldr	r3, [r5, #0]
   820d0:	791b      	ldrb	r3, [r3, #4]
   820d2:	4598      	cmp	r8, r3
   820d4:	d340      	bcc.n	82158 <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   820d6:	7822      	ldrb	r2, [r4, #0]
   820d8:	f002 021f 	and.w	r2, r2, #31
   820dc:	2a02      	cmp	r2, #2
   820de:	d1ad      	bne.n	8203c <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   820e0:	2b00      	cmp	r3, #0
   820e2:	d0ab      	beq.n	8203c <udc_process_setup+0x38>
   820e4:	2400      	movs	r4, #0
   820e6:	46a0      	mov	r8, r4
   820e8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8225c <udc_process_setup+0x258>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   820ec:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   820ee:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   820f0:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   820f4:	68eb      	ldr	r3, [r5, #12]
   820f6:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   820f8:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   820fa:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   820fc:	2b00      	cmp	r3, #0
   820fe:	d09d      	beq.n	8203c <udc_process_setup+0x38>
   82100:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82102:	fa5f f884 	uxtb.w	r8, r4
   82106:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82108:	2800      	cmp	r0, #0
   8210a:	d097      	beq.n	8203c <udc_process_setup+0x38>
		if (udi_api->setup()) {
   8210c:	68ab      	ldr	r3, [r5, #8]
   8210e:	4798      	blx	r3
   82110:	2800      	cmp	r0, #0
   82112:	d139      	bne.n	82188 <udc_process_setup+0x184>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82114:	683d      	ldr	r5, [r7, #0]
   82116:	682b      	ldr	r3, [r5, #0]
   82118:	791b      	ldrb	r3, [r3, #4]
   8211a:	4543      	cmp	r3, r8
   8211c:	d8e6      	bhi.n	820ec <udc_process_setup+0xe8>
   8211e:	e78d      	b.n	8203c <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82120:	f013 021f 	ands.w	r2, r3, #31
   82124:	d1be      	bne.n	820a4 <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   82126:	7862      	ldrb	r2, [r4, #1]
   82128:	3a01      	subs	r2, #1
   8212a:	2a08      	cmp	r2, #8
   8212c:	d8bf      	bhi.n	820ae <udc_process_setup+0xaa>
   8212e:	a101      	add	r1, pc, #4	; (adr r1, 82134 <udc_process_setup+0x130>)
   82130:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   82134:	00082233 	.word	0x00082233
   82138:	000820af 	.word	0x000820af
   8213c:	0008220f 	.word	0x0008220f
   82140:	000820af 	.word	0x000820af
   82144:	0008232f 	.word	0x0008232f
   82148:	000820af 	.word	0x000820af
   8214c:	000820af 	.word	0x000820af
   82150:	000820af 	.word	0x000820af
   82154:	00082281 	.word	0x00082281
	if (0 == udc_num_configuration) {
   82158:	2100      	movs	r1, #0
   8215a:	4640      	mov	r0, r8
   8215c:	4f3f      	ldr	r7, [pc, #252]	; (8225c <udc_process_setup+0x258>)
   8215e:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   82160:	2800      	cmp	r0, #0
   82162:	d03f      	beq.n	821e4 <udc_process_setup+0x1e0>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82164:	686b      	ldr	r3, [r5, #4]
   82166:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8216a:	68eb      	ldr	r3, [r5, #12]
   8216c:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8216e:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82170:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   82172:	2b00      	cmp	r3, #0
   82174:	f43f af62 	beq.w	8203c <udc_process_setup+0x38>
   82178:	4640      	mov	r0, r8
   8217a:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8217c:	2800      	cmp	r0, #0
   8217e:	d031      	beq.n	821e4 <udc_process_setup+0x1e0>
	return udi_api->setup();
   82180:	68ab      	ldr	r3, [r5, #8]
   82182:	4798      	blx	r3
		if (udc_req_iface()) {
   82184:	2800      	cmp	r0, #0
   82186:	d02d      	beq.n	821e4 <udc_process_setup+0x1e0>
			return true;
   82188:	2501      	movs	r5, #1
   8218a:	e758      	b.n	8203e <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8218c:	7862      	ldrb	r2, [r4, #1]
   8218e:	2a01      	cmp	r2, #1
   82190:	f000 8103 	beq.w	8239a <udc_process_setup+0x396>
   82194:	2a03      	cmp	r2, #3
   82196:	d106      	bne.n	821a6 <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82198:	88e2      	ldrh	r2, [r4, #6]
   8219a:	8861      	ldrh	r1, [r4, #2]
   8219c:	430a      	orrs	r2, r1
   8219e:	b292      	uxth	r2, r2
   821a0:	2a00      	cmp	r2, #0
   821a2:	f000 81cd 	beq.w	82540 <udc_process_setup+0x53c>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   821a6:	f013 0f1e 	tst.w	r3, #30
   821aa:	d083      	beq.n	820b4 <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   821ac:	4e29      	ldr	r6, [pc, #164]	; (82254 <udc_process_setup+0x250>)
   821ae:	7833      	ldrb	r3, [r6, #0]
   821b0:	2b00      	cmp	r3, #0
   821b2:	f43f af43 	beq.w	8203c <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   821b6:	4f28      	ldr	r7, [pc, #160]	; (82258 <udc_process_setup+0x254>)
   821b8:	683d      	ldr	r5, [r7, #0]
   821ba:	682b      	ldr	r3, [r5, #0]
   821bc:	791b      	ldrb	r3, [r3, #4]
   821be:	e78f      	b.n	820e0 <udc_process_setup+0xdc>
		if (!mpsse_enabled()) {
   821c0:	4b29      	ldr	r3, [pc, #164]	; (82268 <udc_process_setup+0x264>)
   821c2:	4798      	blx	r3
   821c4:	4602      	mov	r2, r0
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
   821c6:	2a00      	cmp	r2, #0
   821c8:	bf0c      	ite	eq
   821ca:	224d      	moveq	r2, #77	; 0x4d
   821cc:	2257      	movne	r2, #87	; 0x57
		return true;
   821ce:	2501      	movs	r5, #1
   821d0:	4826      	ldr	r0, [pc, #152]	; (8226c <udc_process_setup+0x268>)
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   821d2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   821d6:	f880 20b6 	strb.w	r2, [r0, #182]	; 0xb6
   821da:	4b22      	ldr	r3, [pc, #136]	; (82264 <udc_process_setup+0x260>)
   821dc:	4798      	blx	r3
}
   821de:	4628      	mov	r0, r5
   821e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   821e4:	7823      	ldrb	r3, [r4, #0]
   821e6:	e724      	b.n	82032 <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   821e8:	2a02      	cmp	r2, #2
   821ea:	f47f af60 	bne.w	820ae <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   821ee:	7862      	ldrb	r2, [r4, #1]
   821f0:	2a00      	cmp	r2, #0
   821f2:	d1d8      	bne.n	821a6 <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   821f4:	2d02      	cmp	r5, #2
   821f6:	d1d6      	bne.n	821a6 <udc_process_setup+0x1a2>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   821f8:	7920      	ldrb	r0, [r4, #4]
   821fa:	4b1d      	ldr	r3, [pc, #116]	; (82270 <udc_process_setup+0x26c>)
   821fc:	4798      	blx	r3
   821fe:	4602      	mov	r2, r0
   82200:	481c      	ldr	r0, [pc, #112]	; (82274 <udc_process_setup+0x270>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   82202:	4629      	mov	r1, r5
   82204:	4b17      	ldr	r3, [pc, #92]	; (82264 <udc_process_setup+0x260>)
			return true;
   82206:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   82208:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8220a:	4798      	blx	r3
	return true;
   8220c:	e717      	b.n	8203e <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   8220e:	88e2      	ldrh	r2, [r4, #6]
   82210:	2a00      	cmp	r2, #0
   82212:	f47f af4c 	bne.w	820ae <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   82216:	8862      	ldrh	r2, [r4, #2]
   82218:	2a02      	cmp	r2, #2
   8221a:	f47f af48 	bne.w	820ae <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   8221e:	4b16      	ldr	r3, [pc, #88]	; (82278 <udc_process_setup+0x274>)
   82220:	4798      	blx	r3
   82222:	4605      	mov	r5, r0
   82224:	b118      	cbz	r0, 8222e <udc_process_setup+0x22a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   82226:	7923      	ldrb	r3, [r4, #4]
   82228:	2b00      	cmp	r3, #0
   8222a:	f000 81be 	beq.w	825aa <udc_process_setup+0x5a6>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8222e:	7823      	ldrb	r3, [r4, #0]
   82230:	e6fc      	b.n	8202c <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   82232:	88e2      	ldrh	r2, [r4, #6]
   82234:	2a00      	cmp	r2, #0
   82236:	f47f af3a 	bne.w	820ae <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   8223a:	8865      	ldrh	r5, [r4, #2]
   8223c:	2d01      	cmp	r5, #1
   8223e:	f47f af36 	bne.w	820ae <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   82242:	4a0e      	ldr	r2, [pc, #56]	; (8227c <udc_process_setup+0x278>)
   82244:	8813      	ldrh	r3, [r2, #0]
   82246:	f023 0302 	bic.w	r3, r3, #2
   8224a:	8013      	strh	r3, [r2, #0]
		return true;
   8224c:	e6f7      	b.n	8203e <udc_process_setup+0x3a>
   8224e:	bf00      	nop
   82250:	2000200c 	.word	0x2000200c
   82254:	200017a3 	.word	0x200017a3
   82258:	200017a4 	.word	0x200017a4
   8225c:	00081dc1 	.word	0x00081dc1
   82260:	200017a2 	.word	0x200017a2
   82264:	000850ed 	.word	0x000850ed
   82268:	00083945 	.word	0x00083945
   8226c:	2000049c 	.word	0x2000049c
   82270:	00085149 	.word	0x00085149
   82274:	200017a0 	.word	0x200017a0
   82278:	00085085 	.word	0x00085085
   8227c:	2000179e 	.word	0x2000179e
	if (udd_g_ctrlreq.req.wLength) {
   82280:	88e2      	ldrh	r2, [r4, #6]
   82282:	2a00      	cmp	r2, #0
   82284:	f47f af13 	bne.w	820ae <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   82288:	4b9c      	ldr	r3, [pc, #624]	; (824fc <udc_process_setup+0x4f8>)
   8228a:	4798      	blx	r3
   8228c:	2800      	cmp	r0, #0
   8228e:	d0ce      	beq.n	8222e <udc_process_setup+0x22a>
	if (udd_is_high_speed()) {
   82290:	f8df 926c 	ldr.w	r9, [pc, #620]	; 82500 <udc_process_setup+0x4fc>
   82294:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   82296:	f8df a26c 	ldr.w	sl, [pc, #620]	; 82504 <udc_process_setup+0x500>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8229a:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   8229c:	2800      	cmp	r0, #0
   8229e:	f000 8125 	beq.w	824ec <udc_process_setup+0x4e8>
				udc_config.confdev_hs->bNumConfigurations) {
   822a2:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   822a6:	7c52      	ldrb	r2, [r2, #17]
   822a8:	429a      	cmp	r2, r3
   822aa:	d3c0      	bcc.n	8222e <udc_process_setup+0x22a>
	if (udc_num_configuration) {
   822ac:	4e96      	ldr	r6, [pc, #600]	; (82508 <udc_process_setup+0x504>)
   822ae:	7833      	ldrb	r3, [r6, #0]
   822b0:	b183      	cbz	r3, 822d4 <udc_process_setup+0x2d0>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   822b2:	4f96      	ldr	r7, [pc, #600]	; (8250c <udc_process_setup+0x508>)
   822b4:	683b      	ldr	r3, [r7, #0]
   822b6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   822b8:	791b      	ldrb	r3, [r3, #4]
   822ba:	b15b      	cbz	r3, 822d4 <udc_process_setup+0x2d0>
   822bc:	2500      	movs	r5, #0
   822be:	4628      	mov	r0, r5
   822c0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 82510 <udc_process_setup+0x50c>
			udc_iface_disable(iface_num);
   822c4:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   822c6:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   822c8:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   822ca:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   822cc:	b2e8      	uxtb	r0, r5
   822ce:	791b      	ldrb	r3, [r3, #4]
   822d0:	4283      	cmp	r3, r0
   822d2:	d8f7      	bhi.n	822c4 <udc_process_setup+0x2c0>
	udc_device_status =
   822d4:	2200      	movs	r2, #0
   822d6:	4b8f      	ldr	r3, [pc, #572]	; (82514 <udc_process_setup+0x510>)
   822d8:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   822da:	78a3      	ldrb	r3, [r4, #2]
   822dc:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   822de:	2b00      	cmp	r3, #0
   822e0:	f43f af52 	beq.w	82188 <udc_process_setup+0x184>
	if (udd_is_high_speed()) {
   822e4:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   822e6:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   822e8:	2800      	cmp	r0, #0
   822ea:	f000 8133 	beq.w	82554 <udc_process_setup+0x550>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   822ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   822f2:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   822f6:	3a01      	subs	r2, #1
   822f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   822fc:	681a      	ldr	r2, [r3, #0]
   822fe:	4f83      	ldr	r7, [pc, #524]	; (8250c <udc_process_setup+0x508>)
   82300:	7912      	ldrb	r2, [r2, #4]
   82302:	603b      	str	r3, [r7, #0]
   82304:	2a00      	cmp	r2, #0
   82306:	f43f af3f 	beq.w	82188 <udc_process_setup+0x184>
   8230a:	2500      	movs	r5, #0
   8230c:	4e82      	ldr	r6, [pc, #520]	; (82518 <udc_process_setup+0x514>)
   8230e:	462b      	mov	r3, r5
   82310:	e005      	b.n	8231e <udc_process_setup+0x31a>
   82312:	683a      	ldr	r2, [r7, #0]
   82314:	6812      	ldr	r2, [r2, #0]
   82316:	7912      	ldrb	r2, [r2, #4]
   82318:	429a      	cmp	r2, r3
   8231a:	f67f af35 	bls.w	82188 <udc_process_setup+0x184>
		if (!udc_iface_enable(iface_num, 0)) {
   8231e:	4618      	mov	r0, r3
   82320:	2100      	movs	r1, #0
   82322:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82324:	3501      	adds	r5, #1
   82326:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   82328:	2800      	cmp	r0, #0
   8232a:	d1f2      	bne.n	82312 <udc_process_setup+0x30e>
   8232c:	e77f      	b.n	8222e <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wLength) {
   8232e:	88e2      	ldrh	r2, [r4, #6]
   82330:	2a00      	cmp	r2, #0
   82332:	f47f aebc 	bne.w	820ae <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   82336:	4b79      	ldr	r3, [pc, #484]	; (8251c <udc_process_setup+0x518>)
			return true;
   82338:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   8233a:	6123      	str	r3, [r4, #16]
	return true;
   8233c:	e67f      	b.n	8203e <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8233e:	7862      	ldrb	r2, [r4, #1]
   82340:	2a06      	cmp	r2, #6
   82342:	d040      	beq.n	823c6 <udc_process_setup+0x3c2>
   82344:	2a08      	cmp	r2, #8
   82346:	d036      	beq.n	823b6 <udc_process_setup+0x3b2>
   82348:	2a00      	cmp	r2, #0
   8234a:	f47f aeb0 	bne.w	820ae <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8234e:	2d02      	cmp	r5, #2
   82350:	f47f aead 	bne.w	820ae <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   82354:	4629      	mov	r1, r5
   82356:	486f      	ldr	r0, [pc, #444]	; (82514 <udc_process_setup+0x510>)
   82358:	4b71      	ldr	r3, [pc, #452]	; (82520 <udc_process_setup+0x51c>)
   8235a:	4798      	blx	r3
			return true;
   8235c:	2501      	movs	r5, #1
   8235e:	e66e      	b.n	8203e <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   82360:	7862      	ldrb	r2, [r4, #1]
   82362:	2a0b      	cmp	r2, #11
   82364:	f47f aea3 	bne.w	820ae <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   82368:	88e2      	ldrh	r2, [r4, #6]
   8236a:	2a00      	cmp	r2, #0
   8236c:	f47f ae9f 	bne.w	820ae <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   82370:	4a65      	ldr	r2, [pc, #404]	; (82508 <udc_process_setup+0x504>)
   82372:	7812      	ldrb	r2, [r2, #0]
   82374:	2a00      	cmp	r2, #0
   82376:	f43f ae9a 	beq.w	820ae <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8237a:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   8237c:	4b64      	ldr	r3, [pc, #400]	; (82510 <udc_process_setup+0x50c>)
   8237e:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   82380:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   82382:	4798      	blx	r3
   82384:	2800      	cmp	r0, #0
   82386:	f43f af52 	beq.w	8222e <udc_process_setup+0x22a>
	return udc_iface_enable(iface_num, setting_num);
   8238a:	4628      	mov	r0, r5
   8238c:	4b62      	ldr	r3, [pc, #392]	; (82518 <udc_process_setup+0x514>)
   8238e:	b2f1      	uxtb	r1, r6
   82390:	4798      	blx	r3
		if (udc_reqstd()) {
   82392:	2800      	cmp	r0, #0
   82394:	f47f aef8 	bne.w	82188 <udc_process_setup+0x184>
   82398:	e749      	b.n	8222e <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8239a:	88e2      	ldrh	r2, [r4, #6]
   8239c:	8861      	ldrh	r1, [r4, #2]
   8239e:	430a      	orrs	r2, r1
   823a0:	b292      	uxth	r2, r2
   823a2:	2a00      	cmp	r2, #0
   823a4:	f47f aeff 	bne.w	821a6 <udc_process_setup+0x1a2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   823a8:	7920      	ldrb	r0, [r4, #4]
   823aa:	4b5e      	ldr	r3, [pc, #376]	; (82524 <udc_process_setup+0x520>)
   823ac:	4798      	blx	r3
		if (udc_reqstd()) {
   823ae:	2800      	cmp	r0, #0
   823b0:	f47f aeea 	bne.w	82188 <udc_process_setup+0x184>
   823b4:	e73b      	b.n	8222e <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   823b6:	2d01      	cmp	r5, #1
   823b8:	f47f ae79 	bne.w	820ae <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   823bc:	4629      	mov	r1, r5
   823be:	4852      	ldr	r0, [pc, #328]	; (82508 <udc_process_setup+0x504>)
   823c0:	4b57      	ldr	r3, [pc, #348]	; (82520 <udc_process_setup+0x51c>)
   823c2:	4798      	blx	r3
	return true;
   823c4:	e63b      	b.n	8203e <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   823c6:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   823c8:	0a0a      	lsrs	r2, r1, #8
   823ca:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   823cc:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   823ce:	2a0e      	cmp	r2, #14
   823d0:	f63f ae2c 	bhi.w	8202c <udc_process_setup+0x28>
   823d4:	a101      	add	r1, pc, #4	; (adr r1, 823dc <udc_process_setup+0x3d8>)
   823d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   823da:	bf00      	nop
   823dc:	00082491 	.word	0x00082491
   823e0:	00082467 	.word	0x00082467
   823e4:	000824a5 	.word	0x000824a5
   823e8:	0008202d 	.word	0x0008202d
   823ec:	0008202d 	.word	0x0008202d
   823f0:	0008245b 	.word	0x0008245b
   823f4:	00082431 	.word	0x00082431
   823f8:	0008202d 	.word	0x0008202d
   823fc:	0008202d 	.word	0x0008202d
   82400:	0008202d 	.word	0x0008202d
   82404:	0008202d 	.word	0x0008202d
   82408:	0008202d 	.word	0x0008202d
   8240c:	0008202d 	.word	0x0008202d
   82410:	0008202d 	.word	0x0008202d
   82414:	00082419 	.word	0x00082419
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82418:	2121      	movs	r1, #33	; 0x21
   8241a:	4843      	ldr	r0, [pc, #268]	; (82528 <udc_process_setup+0x524>)
   8241c:	4b40      	ldr	r3, [pc, #256]	; (82520 <udc_process_setup+0x51c>)
   8241e:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   82420:	88e3      	ldrh	r3, [r4, #6]
   82422:	89a2      	ldrh	r2, [r4, #12]
   82424:	429a      	cmp	r2, r3
   82426:	f67f aeaf 	bls.w	82188 <udc_process_setup+0x184>
			return true;
   8242a:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8242c:	81a3      	strh	r3, [r4, #12]
   8242e:	e606      	b.n	8203e <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   82430:	4b33      	ldr	r3, [pc, #204]	; (82500 <udc_process_setup+0x4fc>)
   82432:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   82434:	4b33      	ldr	r3, [pc, #204]	; (82504 <udc_process_setup+0x500>)
		if (!udd_is_high_speed()) {
   82436:	2800      	cmp	r0, #0
   82438:	f040 8094 	bne.w	82564 <udc_process_setup+0x560>
			if (conf_num >= udc_config.confdev_hs->
   8243c:	689a      	ldr	r2, [r3, #8]
   8243e:	7c52      	ldrb	r2, [r2, #17]
   82440:	42aa      	cmp	r2, r5
   82442:	f67f aef4 	bls.w	8222e <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82446:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   82448:	4b35      	ldr	r3, [pc, #212]	; (82520 <udc_process_setup+0x51c>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8244a:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8244e:	8841      	ldrh	r1, [r0, #2]
   82450:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82452:	2207      	movs	r2, #7
   82454:	68a3      	ldr	r3, [r4, #8]
   82456:	705a      	strb	r2, [r3, #1]
		break;
   82458:	e7e2      	b.n	82420 <udc_process_setup+0x41c>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8245a:	4a2a      	ldr	r2, [pc, #168]	; (82504 <udc_process_setup+0x500>)
   8245c:	4b30      	ldr	r3, [pc, #192]	; (82520 <udc_process_setup+0x51c>)
   8245e:	68d0      	ldr	r0, [r2, #12]
   82460:	7801      	ldrb	r1, [r0, #0]
   82462:	4798      	blx	r3
		break;
   82464:	e7dc      	b.n	82420 <udc_process_setup+0x41c>
		if (udd_is_high_speed()) {
   82466:	4b26      	ldr	r3, [pc, #152]	; (82500 <udc_process_setup+0x4fc>)
   82468:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   8246a:	4b26      	ldr	r3, [pc, #152]	; (82504 <udc_process_setup+0x500>)
		if (udd_is_high_speed()) {
   8246c:	2800      	cmp	r0, #0
   8246e:	f000 8090 	beq.w	82592 <udc_process_setup+0x58e>
			if (conf_num >= udc_config.confdev_hs->
   82472:	689a      	ldr	r2, [r3, #8]
   82474:	7c52      	ldrb	r2, [r2, #17]
   82476:	42aa      	cmp	r2, r5
   82478:	f67f aed9 	bls.w	8222e <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8247c:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   8247e:	4b28      	ldr	r3, [pc, #160]	; (82520 <udc_process_setup+0x51c>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82480:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   82484:	8841      	ldrh	r1, [r0, #2]
   82486:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82488:	2202      	movs	r2, #2
   8248a:	68a3      	ldr	r3, [r4, #8]
   8248c:	705a      	strb	r2, [r3, #1]
		break;
   8248e:	e7c7      	b.n	82420 <udc_process_setup+0x41c>
		if (!udd_is_high_speed()) {
   82490:	4b1b      	ldr	r3, [pc, #108]	; (82500 <udc_process_setup+0x4fc>)
   82492:	4798      	blx	r3
   82494:	2800      	cmp	r0, #0
   82496:	d171      	bne.n	8257c <udc_process_setup+0x578>
				(uint8_t *) udc_config.confdev_hs,
   82498:	4a1a      	ldr	r2, [pc, #104]	; (82504 <udc_process_setup+0x500>)
			udd_set_setup_payload(
   8249a:	4b21      	ldr	r3, [pc, #132]	; (82520 <udc_process_setup+0x51c>)
				(uint8_t *) udc_config.confdev_hs,
   8249c:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   8249e:	7801      	ldrb	r1, [r0, #0]
   824a0:	4798      	blx	r3
   824a2:	e7bd      	b.n	82420 <udc_process_setup+0x41c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   824a4:	2d03      	cmp	r5, #3
   824a6:	f63f adc1 	bhi.w	8202c <udc_process_setup+0x28>
   824aa:	e8df f005 	tbb	[pc, r5]
   824ae:	171a      	.short	0x171a
   824b0:	0214      	.short	0x0214
   824b2:	2120      	movs	r1, #32
   824b4:	4b1d      	ldr	r3, [pc, #116]	; (8252c <udc_process_setup+0x528>)
		for(i = 0; i < str_length; i++) {
   824b6:	4e1e      	ldr	r6, [pc, #120]	; (82530 <udc_process_setup+0x52c>)
   824b8:	185d      	adds	r5, r3, r1
   824ba:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   824bc:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   824c0:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   824c2:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   824c6:	d1f9      	bne.n	824bc <udc_process_setup+0x4b8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   824c8:	0049      	lsls	r1, r1, #1
   824ca:	3102      	adds	r1, #2
		udd_set_setup_payload(
   824cc:	4818      	ldr	r0, [pc, #96]	; (82530 <udc_process_setup+0x52c>)
   824ce:	4b14      	ldr	r3, [pc, #80]	; (82520 <udc_process_setup+0x51c>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   824d0:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   824d2:	4798      	blx	r3
   824d4:	e7a4      	b.n	82420 <udc_process_setup+0x41c>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   824d6:	2112      	movs	r1, #18
		str = udc_string_product_name;
   824d8:	4b16      	ldr	r3, [pc, #88]	; (82534 <udc_process_setup+0x530>)
   824da:	e7ec      	b.n	824b6 <udc_process_setup+0x4b2>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   824dc:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   824de:	4b16      	ldr	r3, [pc, #88]	; (82538 <udc_process_setup+0x534>)
   824e0:	e7e9      	b.n	824b6 <udc_process_setup+0x4b2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   824e2:	2104      	movs	r1, #4
   824e4:	4815      	ldr	r0, [pc, #84]	; (8253c <udc_process_setup+0x538>)
   824e6:	4b0e      	ldr	r3, [pc, #56]	; (82520 <udc_process_setup+0x51c>)
   824e8:	4798      	blx	r3
	if (str_length) {
   824ea:	e799      	b.n	82420 <udc_process_setup+0x41c>
				udc_config.confdev_lsfs->bNumConfigurations) {
   824ec:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   824f0:	7c52      	ldrb	r2, [r2, #17]
   824f2:	429a      	cmp	r2, r3
   824f4:	f4bf aeda 	bcs.w	822ac <udc_process_setup+0x2a8>
   824f8:	e699      	b.n	8222e <udc_process_setup+0x22a>
   824fa:	bf00      	nop
   824fc:	000850bd 	.word	0x000850bd
   82500:	00085085 	.word	0x00085085
   82504:	20000948 	.word	0x20000948
   82508:	200017a3 	.word	0x200017a3
   8250c:	200017a4 	.word	0x200017a4
   82510:	00081e21 	.word	0x00081e21
   82514:	2000179e 	.word	0x2000179e
   82518:	00081ead 	.word	0x00081ead
   8251c:	00081dad 	.word	0x00081dad
   82520:	000850ed 	.word	0x000850ed
   82524:	00085225 	.word	0x00085225
   82528:	20000478 	.word	0x20000478
   8252c:	20000194 	.word	0x20000194
   82530:	200005e8 	.word	0x200005e8
   82534:	20000648 	.word	0x20000648
   82538:	20000630 	.word	0x20000630
   8253c:	2000062c 	.word	0x2000062c
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   82540:	7920      	ldrb	r0, [r4, #4]
   82542:	4b32      	ldr	r3, [pc, #200]	; (8260c <udc_process_setup+0x608>)
   82544:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82546:	7920      	ldrb	r0, [r4, #4]
   82548:	4b31      	ldr	r3, [pc, #196]	; (82610 <udc_process_setup+0x60c>)
   8254a:	4798      	blx	r3
		if (udc_reqstd()) {
   8254c:	2800      	cmp	r0, #0
   8254e:	f47f ae1b 	bne.w	82188 <udc_process_setup+0x184>
   82552:	e66c      	b.n	8222e <udc_process_setup+0x22a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   82554:	f8da 3004 	ldr.w	r3, [sl, #4]
   82558:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   8255c:	3a01      	subs	r2, #1
   8255e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   82562:	e6cb      	b.n	822fc <udc_process_setup+0x2f8>
			if (conf_num >= udc_config.confdev_lsfs->
   82564:	681a      	ldr	r2, [r3, #0]
   82566:	7c52      	ldrb	r2, [r2, #17]
   82568:	42aa      	cmp	r2, r5
   8256a:	f67f ae60 	bls.w	8222e <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8256e:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   82570:	4b28      	ldr	r3, [pc, #160]	; (82614 <udc_process_setup+0x610>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82572:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   82576:	8841      	ldrh	r1, [r0, #2]
   82578:	4798      	blx	r3
   8257a:	e76a      	b.n	82452 <udc_process_setup+0x44e>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8257c:	2010      	movs	r0, #16
   8257e:	2102      	movs	r1, #2
   82580:	4b25      	ldr	r3, [pc, #148]	; (82618 <udc_process_setup+0x614>)
			udd_set_setup_payload(
   82582:	4d24      	ldr	r5, [pc, #144]	; (82614 <udc_process_setup+0x610>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82584:	681a      	ldr	r2, [r3, #0]
   82586:	7090      	strb	r0, [r2, #2]
   82588:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8258a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   8258c:	7801      	ldrb	r1, [r0, #0]
   8258e:	47a8      	blx	r5
   82590:	e746      	b.n	82420 <udc_process_setup+0x41c>
			if (conf_num >= udc_config.confdev_lsfs->
   82592:	681a      	ldr	r2, [r3, #0]
   82594:	7c52      	ldrb	r2, [r2, #17]
   82596:	42aa      	cmp	r2, r5
   82598:	f67f ae49 	bls.w	8222e <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8259c:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   8259e:	4b1d      	ldr	r3, [pc, #116]	; (82614 <udc_process_setup+0x610>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   825a0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   825a4:	8841      	ldrh	r1, [r0, #2]
   825a6:	4798      	blx	r3
   825a8:	e76e      	b.n	82488 <udc_process_setup+0x484>
	if (udc_num_configuration) {
   825aa:	4e1c      	ldr	r6, [pc, #112]	; (8261c <udc_process_setup+0x618>)
   825ac:	7832      	ldrb	r2, [r6, #0]
   825ae:	b192      	cbz	r2, 825d6 <udc_process_setup+0x5d2>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   825b0:	4f1b      	ldr	r7, [pc, #108]	; (82620 <udc_process_setup+0x61c>)
   825b2:	683a      	ldr	r2, [r7, #0]
   825b4:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   825b6:	7912      	ldrb	r2, [r2, #4]
   825b8:	b16a      	cbz	r2, 825d6 <udc_process_setup+0x5d2>
   825ba:	4699      	mov	r9, r3
   825bc:	4618      	mov	r0, r3
   825be:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82624 <udc_process_setup+0x620>
			udc_iface_disable(iface_num);
   825c2:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   825c4:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   825c6:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   825ca:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   825cc:	fa5f f089 	uxtb.w	r0, r9
   825d0:	791b      	ldrb	r3, [r3, #4]
   825d2:	4283      	cmp	r3, r0
   825d4:	d8f5      	bhi.n	825c2 <udc_process_setup+0x5be>
	udc_num_configuration = 0;
   825d6:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   825d8:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   825da:	4913      	ldr	r1, [pc, #76]	; (82628 <udc_process_setup+0x624>)
   825dc:	0a1b      	lsrs	r3, r3, #8
   825de:	3b01      	subs	r3, #1
   825e0:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   825e2:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   825e4:	2b03      	cmp	r3, #3
   825e6:	f63f ae22 	bhi.w	8222e <udc_process_setup+0x22a>
   825ea:	e8df f003 	tbb	[pc, r3]
   825ee:	080b      	.short	0x080b
   825f0:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   825f2:	4b0e      	ldr	r3, [pc, #56]	; (8262c <udc_process_setup+0x628>)
   825f4:	6123      	str	r3, [r4, #16]
			return true;
   825f6:	e522      	b.n	8203e <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   825f8:	4b0d      	ldr	r3, [pc, #52]	; (82630 <udc_process_setup+0x62c>)
   825fa:	6123      	str	r3, [r4, #16]
			return true;
   825fc:	e51f      	b.n	8203e <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   825fe:	4b0d      	ldr	r3, [pc, #52]	; (82634 <udc_process_setup+0x630>)
   82600:	6123      	str	r3, [r4, #16]
			return true;
   82602:	e51c      	b.n	8203e <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   82604:	4b0c      	ldr	r3, [pc, #48]	; (82638 <udc_process_setup+0x634>)
   82606:	6123      	str	r3, [r4, #16]
			return true;
   82608:	e519      	b.n	8203e <udc_process_setup+0x3a>
   8260a:	bf00      	nop
   8260c:	00085619 	.word	0x00085619
   82610:	0008517d 	.word	0x0008517d
   82614:	000850ed 	.word	0x000850ed
   82618:	20000948 	.word	0x20000948
   8261c:	200017a3 	.word	0x200017a3
   82620:	200017a4 	.word	0x200017a4
   82624:	00081e21 	.word	0x00081e21
   82628:	2000179e 	.word	0x2000179e
   8262c:	000856e5 	.word	0x000856e5
   82630:	000856cd 	.word	0x000856cd
   82634:	000856a9 	.word	0x000856a9
   82638:	00085685 	.word	0x00085685

0008263c <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   8263c:	4907      	ldr	r1, [pc, #28]	; (8265c <naeusb_add_in_handler+0x20>)
   8263e:	780a      	ldrb	r2, [r1, #0]
   82640:	2a0f      	cmp	r2, #15
   82642:	d901      	bls.n	82648 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   82644:	2000      	movs	r0, #0
    
}
   82646:	4770      	bx	lr
   82648:	4603      	mov	r3, r0
{
   8264a:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   8264c:	1c50      	adds	r0, r2, #1
   8264e:	4c04      	ldr	r4, [pc, #16]	; (82660 <naeusb_add_in_handler+0x24>)
   82650:	7008      	strb	r0, [r1, #0]
   82652:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   82656:	2001      	movs	r0, #1
}
   82658:	bc10      	pop	{r4}
   8265a:	4770      	bx	lr
   8265c:	20001c2c 	.word	0x20001c2c
   82660:	20001bec 	.word	0x20001bec

00082664 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   82664:	4907      	ldr	r1, [pc, #28]	; (82684 <naeusb_add_out_handler+0x20>)
   82666:	780a      	ldrb	r2, [r1, #0]
   82668:	2a0f      	cmp	r2, #15
   8266a:	d901      	bls.n	82670 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   8266c:	2000      	movs	r0, #0
    
}
   8266e:	4770      	bx	lr
   82670:	4603      	mov	r3, r0
{
   82672:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   82674:	1c50      	adds	r0, r2, #1
   82676:	4c04      	ldr	r4, [pc, #16]	; (82688 <naeusb_add_out_handler+0x24>)
   82678:	7008      	strb	r0, [r1, #0]
   8267a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   8267e:	2001      	movs	r0, #1
}
   82680:	bc10      	pop	{r4}
   82682:	4770      	bx	lr
   82684:	20001c2d 	.word	0x20001c2d
   82688:	20001c30 	.word	0x20001c30

0008268c <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   8268c:	4b00      	ldr	r3, [pc, #0]	; (82690 <main_suspend_action+0x4>)
   8268e:	4718      	bx	r3
   82690:	00086995 	.word	0x00086995

00082694 <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   82694:	4b00      	ldr	r3, [pc, #0]	; (82698 <main_resume_action+0x4>)
   82696:	4718      	bx	r3
   82698:	000869ad 	.word	0x000869ad

0008269c <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   8269c:	4b05      	ldr	r3, [pc, #20]	; (826b4 <main_sof_action+0x18>)
   8269e:	781b      	ldrb	r3, [r3, #0]
   826a0:	b903      	cbnz	r3, 826a4 <main_sof_action+0x8>
   826a2:	4770      	bx	lr
{
   826a4:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   826a6:	4b04      	ldr	r3, [pc, #16]	; (826b8 <main_sof_action+0x1c>)
   826a8:	4798      	blx	r3
}
   826aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   826ae:	4b03      	ldr	r3, [pc, #12]	; (826bc <main_sof_action+0x20>)
   826b0:	4718      	bx	r3
   826b2:	bf00      	nop
   826b4:	2000065b 	.word	0x2000065b
   826b8:	000850cd 	.word	0x000850cd
   826bc:	000869b9 	.word	0x000869b9

000826c0 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   826c0:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   826c2:	2401      	movs	r4, #1
   826c4:	4d04      	ldr	r5, [pc, #16]	; (826d8 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   826c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   826ca:	4a04      	ldr	r2, [pc, #16]	; (826dc <main_vendor_enable+0x1c>)
   826cc:	4b04      	ldr	r3, [pc, #16]	; (826e0 <main_vendor_enable+0x20>)
   826ce:	4805      	ldr	r0, [pc, #20]	; (826e4 <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   826d0:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   826d2:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   826d4:	4620      	mov	r0, r4
   826d6:	bd38      	pop	{r3, r4, r5, pc}
   826d8:	2000065b 	.word	0x2000065b
   826dc:	00082b21 	.word	0x00082b21
   826e0:	00085c81 	.word	0x00085c81
   826e4:	200017ec 	.word	0x200017ec

000826e8 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   826e8:	2200      	movs	r2, #0
   826ea:	4b01      	ldr	r3, [pc, #4]	; (826f0 <main_vendor_disable+0x8>)
   826ec:	701a      	strb	r2, [r3, #0]
}
   826ee:	4770      	bx	lr
   826f0:	2000065b 	.word	0x2000065b

000826f4 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   826f4:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   826f6:	4b0f      	ldr	r3, [pc, #60]	; (82734 <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   826f8:	4a0f      	ldr	r2, [pc, #60]	; (82738 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   826fa:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   826fc:	480f      	ldr	r0, [pc, #60]	; (8273c <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   826fe:	2940      	cmp	r1, #64	; 0x40
   82700:	bf28      	it	cs
   82702:	2140      	movcs	r1, #64	; 0x40
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   82704:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   82706:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   82708:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8270a:	b18a      	cbz	r2, 82730 <main_setup_out_received+0x3c>
   8270c:	4c0c      	ldr	r4, [pc, #48]	; (82740 <main_setup_out_received+0x4c>)
   8270e:	1e55      	subs	r5, r2, #1
   82710:	b2ed      	uxtb	r5, r5
   82712:	1b53      	subs	r3, r2, r5
   82714:	1f25      	subs	r5, r4, #4
   82716:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8271a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   8271e:	e001      	b.n	82724 <main_setup_out_received+0x30>
   82720:	42ac      	cmp	r4, r5
   82722:	d005      	beq.n	82730 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   82724:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   82728:	4798      	blx	r3
        if (handler_status == true) {
   8272a:	2800      	cmp	r0, #0
   8272c:	d0f8      	beq.n	82720 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   8272e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   82730:	2000      	movs	r0, #0
}
   82732:	bd38      	pop	{r3, r4, r5, pc}
   82734:	2000200c 	.word	0x2000200c
   82738:	20001c2d 	.word	0x20001c2d
   8273c:	200017ac 	.word	0x200017ac
   82740:	20001c30 	.word	0x20001c30

00082744 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   82744:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   82746:	4b0b      	ldr	r3, [pc, #44]	; (82774 <main_setup_in_received+0x30>)
   82748:	781a      	ldrb	r2, [r3, #0]
   8274a:	b18a      	cbz	r2, 82770 <main_setup_in_received+0x2c>
   8274c:	4c0a      	ldr	r4, [pc, #40]	; (82778 <main_setup_in_received+0x34>)
   8274e:	1e55      	subs	r5, r2, #1
   82750:	b2ed      	uxtb	r5, r5
   82752:	1b53      	subs	r3, r2, r5
   82754:	1f25      	subs	r5, r4, #4
   82756:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8275a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   8275e:	e001      	b.n	82764 <main_setup_in_received+0x20>
   82760:	42ac      	cmp	r4, r5
   82762:	d005      	beq.n	82770 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   82764:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   82768:	4798      	blx	r3
        if (handler_status == true) {
   8276a:	2800      	cmp	r0, #0
   8276c:	d0f8      	beq.n	82760 <main_setup_in_received+0x1c>
        }
    }

    return false;

   8276e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   82770:	2000      	movs	r0, #0
   82772:	bd38      	pop	{r3, r4, r5, pc}
   82774:	20001c2c 	.word	0x20001c2c
   82778:	20001bec 	.word	0x20001bec

0008277c <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   8277c:	4b04      	ldr	r3, [pc, #16]	; (82790 <naeusb_setup_out_received+0x14>)
   8277e:	785a      	ldrb	r2, [r3, #1]
   82780:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   82782:	bf03      	ittte	eq
   82784:	4a03      	ldreq	r2, [pc, #12]	; (82794 <naeusb_setup_out_received+0x18>)
            return true;
   82786:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   82788:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   8278a:	2000      	movne	r0, #0
}
   8278c:	4770      	bx	lr
   8278e:	bf00      	nop
   82790:	2000200c 	.word	0x2000200c
   82794:	00082799 	.word	0x00082799

00082798 <naeusb_sam_cfg_out>:
{
   82798:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8279a:	4b22      	ldr	r3, [pc, #136]	; (82824 <naeusb_sam_cfg_out+0x8c>)
   8279c:	789b      	ldrb	r3, [r3, #2]
   8279e:	3b01      	subs	r3, #1
   827a0:	2b10      	cmp	r3, #16
   827a2:	d80a      	bhi.n	827ba <naeusb_sam_cfg_out+0x22>
   827a4:	e8df f003 	tbb	[pc, r3]
   827a8:	091b160a 	.word	0x091b160a
   827ac:	09090909 	.word	0x09090909
   827b0:	09090909 	.word	0x09090909
   827b4:	2d090909 	.word	0x2d090909
   827b8:	3a          	.byte	0x3a
   827b9:	00          	.byte	0x00
}
   827ba:	bd10      	pop	{r4, pc}
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   827bc:	203e      	movs	r0, #62	; 0x3e
   827be:	4b1a      	ldr	r3, [pc, #104]	; (82828 <naeusb_sam_cfg_out+0x90>)
   827c0:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   827c2:	4c1a      	ldr	r4, [pc, #104]	; (8282c <naeusb_sam_cfg_out+0x94>)
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   827c4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   827c6:	2800      	cmp	r0, #0
   827c8:	d0fc      	beq.n	827c4 <naeusb_sam_cfg_out+0x2c>
   827ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   827ce:	2010      	movs	r0, #16
   827d0:	4b17      	ldr	r3, [pc, #92]	; (82830 <naeusb_sam_cfg_out+0x98>)
   827d2:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   827d4:	2010      	movs	r0, #16
}
   827d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   827da:	4b16      	ldr	r3, [pc, #88]	; (82834 <naeusb_sam_cfg_out+0x9c>)
   827dc:	4718      	bx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   827de:	2201      	movs	r2, #1
   827e0:	210c      	movs	r1, #12
   827e2:	4b15      	ldr	r3, [pc, #84]	; (82838 <naeusb_sam_cfg_out+0xa0>)
   827e4:	4815      	ldr	r0, [pc, #84]	; (8283c <naeusb_sam_cfg_out+0xa4>)
   827e6:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   827e8:	4b15      	ldr	r3, [pc, #84]	; (82840 <naeusb_sam_cfg_out+0xa8>)
   827ea:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   827ec:	4a15      	ldr	r2, [pc, #84]	; (82844 <naeusb_sam_cfg_out+0xac>)
   827ee:	6853      	ldr	r3, [r2, #4]
   827f0:	0399      	lsls	r1, r3, #14
   827f2:	d4fc      	bmi.n	827ee <naeusb_sam_cfg_out+0x56>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   827f4:	6813      	ldr	r3, [r2, #0]
   827f6:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827fa:	f043 0305 	orr.w	r3, r3, #5
   827fe:	6013      	str	r3, [r2, #0]
        while(1);
   82800:	e7fe      	b.n	82800 <naeusb_sam_cfg_out+0x68>
   82802:	4b0f      	ldr	r3, [pc, #60]	; (82840 <naeusb_sam_cfg_out+0xa8>)
   82804:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   82806:	4a0f      	ldr	r2, [pc, #60]	; (82844 <naeusb_sam_cfg_out+0xac>)
   82808:	6853      	ldr	r3, [r2, #4]
   8280a:	039b      	lsls	r3, r3, #14
   8280c:	d4fc      	bmi.n	82808 <naeusb_sam_cfg_out+0x70>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8280e:	6813      	ldr	r3, [r2, #0]
   82810:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82814:	f043 0305 	orr.w	r3, r3, #5
   82818:	6013      	str	r3, [r2, #0]
        while(1);
   8281a:	e7fe      	b.n	8281a <naeusb_sam_cfg_out+0x82>
        FPGA_releaselock();
   8281c:	4b0a      	ldr	r3, [pc, #40]	; (82848 <naeusb_sam_cfg_out+0xb0>)
}
   8281e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   82822:	4718      	bx	r3
   82824:	2000200c 	.word	0x2000200c
   82828:	00085ae1 	.word	0x00085ae1
   8282c:	00085b05 	.word	0x00085b05
   82830:	00085a29 	.word	0x00085a29
   82834:	00085a85 	.word	0x00085a85
   82838:	00085ca1 	.word	0x00085ca1
   8283c:	400e0800 	.word	0x400e0800
   82840:	00085011 	.word	0x00085011
   82844:	400e1200 	.word	0x400e1200
   82848:	000802ad 	.word	0x000802ad

0008284c <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   8284c:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   8284e:	4c15      	ldr	r4, [pc, #84]	; (828a4 <naeusb_setup_in_received+0x58>)
   82850:	7863      	ldrb	r3, [r4, #1]
   82852:	2b17      	cmp	r3, #23
   82854:	d01b      	beq.n	8288e <naeusb_setup_in_received+0x42>
   82856:	2b40      	cmp	r3, #64	; 0x40
   82858:	d117      	bne.n	8288a <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   8285a:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   8285e:	4d12      	ldr	r5, [pc, #72]	; (828a8 <naeusb_setup_in_received+0x5c>)
   82860:	4b12      	ldr	r3, [pc, #72]	; (828ac <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   82862:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   82864:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   82868:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   8286c:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   82870:	4b0f      	ldr	r3, [pc, #60]	; (828b0 <naeusb_setup_in_received+0x64>)
   82872:	4910      	ldr	r1, [pc, #64]	; (828b4 <naeusb_setup_in_received+0x68>)
   82874:	f105 0009 	add.w	r0, r5, #9
   82878:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   8287a:	4628      	mov	r0, r5
   8287c:	4b0e      	ldr	r3, [pc, #56]	; (828b8 <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
   8287e:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   82880:	4798      	blx	r3
   82882:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   82884:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   82886:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
   82888:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
   8288a:	2000      	movs	r0, #0
}
   8288c:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   8288e:	f44f 5578 	mov.w	r5, #15872	; 0x3e00
    respbuf[2] = FW_VER_DEBUG;
   82892:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   82894:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   82896:	4b04      	ldr	r3, [pc, #16]	; (828a8 <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
   82898:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   8289a:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   8289c:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   8289e:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   828a0:	81a2      	strh	r2, [r4, #12]
}
   828a2:	bd38      	pop	{r3, r4, r5, pc}
   828a4:	2000200c 	.word	0x2000200c
   828a8:	20001c70 	.word	0x20001c70
   828ac:	0008d794 	.word	0x0008d794
   828b0:	00086f95 	.word	0x00086f95
   828b4:	0008d788 	.word	0x0008d788
   828b8:	00086f39 	.word	0x00086f39

000828bc <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   828bc:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   828be:	4b04      	ldr	r3, [pc, #16]	; (828d0 <naeusb_register_handlers+0x14>)
   828c0:	4804      	ldr	r0, [pc, #16]	; (828d4 <naeusb_register_handlers+0x18>)
   828c2:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   828c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   828c8:	4803      	ldr	r0, [pc, #12]	; (828d8 <naeusb_register_handlers+0x1c>)
   828ca:	4b04      	ldr	r3, [pc, #16]	; (828dc <naeusb_register_handlers+0x20>)
   828cc:	4718      	bx	r3
   828ce:	bf00      	nop
   828d0:	0008263d 	.word	0x0008263d
   828d4:	0008284d 	.word	0x0008284d
   828d8:	0008277d 	.word	0x0008277d
   828dc:	00082665 	.word	0x00082665

000828e0 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   828e0:	b510      	push	{r4, lr}
	uint32_t prog_freq = 1E6;
    switch(udd_g_ctrlreq.req.wValue){
   828e2:	4a1e      	ldr	r2, [pc, #120]	; (8295c <openadc_progfpga_bulk+0x7c>)
   828e4:	8853      	ldrh	r3, [r2, #2]
   828e6:	3ba0      	subs	r3, #160	; 0xa0
   828e8:	2b12      	cmp	r3, #18
   828ea:	d80e      	bhi.n	8290a <openadc_progfpga_bulk+0x2a>
   828ec:	e8df f003 	tbb	[pc, r3]
   828f0:	0d0a0e2b 	.word	0x0d0a0e2b
   828f4:	0d0d0d0d 	.word	0x0d0d0d0d
   828f8:	0d0d0d0d 	.word	0x0d0d0d0d
   828fc:	0d0d0d0d 	.word	0x0d0d0d0d
   82900:	2714      	.short	0x2714
   82902:	0a          	.byte	0x0a
   82903:	00          	.byte	0x00
        blockendpoint_usage = bep_fpgabitstream;
        break;

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   82904:	2200      	movs	r2, #0
   82906:	4b16      	ldr	r3, [pc, #88]	; (82960 <openadc_progfpga_bulk+0x80>)
   82908:	701a      	strb	r2, [r3, #0]
        //gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
        break;
    default:
        break;
    }
}
   8290a:	bd10      	pop	{r4, pc}
        fpga_program_setup2();
   8290c:	4b15      	ldr	r3, [pc, #84]	; (82964 <openadc_progfpga_bulk+0x84>)
   8290e:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   82910:	220a      	movs	r2, #10
   82912:	4b13      	ldr	r3, [pc, #76]	; (82960 <openadc_progfpga_bulk+0x80>)
   82914:	701a      	strb	r2, [r3, #0]
}
   82916:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength == 4) {
   82918:	88d3      	ldrh	r3, [r2, #6]
        gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   8291a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
        if (udd_g_ctrlreq.req.wLength == 4) {
   8291e:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   82920:	bf0a      	itet	eq
   82922:	4b11      	ldreq	r3, [pc, #68]	; (82968 <openadc_progfpga_bulk+0x88>)
	uint32_t prog_freq = 1E6;
   82924:	4c11      	ldrne	r4, [pc, #68]	; (8296c <openadc_progfpga_bulk+0x8c>)
            prog_freq = *(CTRLBUFFER_WORDPTR);
   82926:	681c      	ldreq	r4, [r3, #0]
        gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   82928:	2011      	movs	r0, #17
   8292a:	4b11      	ldr	r3, [pc, #68]	; (82970 <openadc_progfpga_bulk+0x90>)
   8292c:	4798      	blx	r3
        gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   8292e:	2011      	movs	r0, #17
   82930:	4b10      	ldr	r3, [pc, #64]	; (82974 <openadc_progfpga_bulk+0x94>)
   82932:	4798      	blx	r3
        fpga_program_spi_setup1(prog_freq);
   82934:	4620      	mov	r0, r4
}
   82936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        fpga_program_spi_setup1(prog_freq);
   8293a:	4b0f      	ldr	r3, [pc, #60]	; (82978 <openadc_progfpga_bulk+0x98>)
   8293c:	4718      	bx	r3
        blockendpoint_usage = bep_fpgabitstreamspi;
   8293e:	2214      	movs	r2, #20
   82940:	4b07      	ldr	r3, [pc, #28]	; (82960 <openadc_progfpga_bulk+0x80>)
   82942:	701a      	strb	r2, [r3, #0]
}
   82944:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength == 4) {
   82946:	88d3      	ldrh	r3, [r2, #6]
}
   82948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (udd_g_ctrlreq.req.wLength == 4) {
   8294c:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   8294e:	bf0a      	itet	eq
   82950:	4b05      	ldreq	r3, [pc, #20]	; (82968 <openadc_progfpga_bulk+0x88>)
	uint32_t prog_freq = 1E6;
   82952:	4806      	ldrne	r0, [pc, #24]	; (8296c <openadc_progfpga_bulk+0x8c>)
            prog_freq = *(CTRLBUFFER_WORDPTR);
   82954:	6818      	ldreq	r0, [r3, #0]
        fpga_program_setup1(prog_freq);
   82956:	4b09      	ldr	r3, [pc, #36]	; (8297c <openadc_progfpga_bulk+0x9c>)
   82958:	4718      	bx	r3
   8295a:	bf00      	nop
   8295c:	2000200c 	.word	0x2000200c
   82960:	20001cb0 	.word	0x20001cb0
   82964:	00080435 	.word	0x00080435
   82968:	200017ac 	.word	0x200017ac
   8296c:	000f4240 	.word	0x000f4240
   82970:	00085d79 	.word	0x00085d79
   82974:	00085d1d 	.word	0x00085d1d
   82978:	000802f1 	.word	0x000802f1
   8297c:	0008039d 	.word	0x0008039d

00082980 <openadc_setup_out_received>:
    }
    return false;
}
bool openadc_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   82980:	2100      	movs	r1, #0
{
   82982:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   82984:	4c1b      	ldr	r4, [pc, #108]	; (829f4 <openadc_setup_out_received+0x74>)
    blockendpoint_usage = bep_emem;
   82986:	4a1c      	ldr	r2, [pc, #112]	; (829f8 <openadc_setup_out_received+0x78>)
    switch(udd_g_ctrlreq.req.bRequest){
   82988:	7863      	ldrb	r3, [r4, #1]
    blockendpoint_usage = bep_emem;
   8298a:	7011      	strb	r1, [r2, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8298c:	3b10      	subs	r3, #16
   8298e:	2b06      	cmp	r3, #6
   82990:	d805      	bhi.n	8299e <openadc_setup_out_received+0x1e>
   82992:	e8df f003 	tbb	[pc, r3]
   82996:	130a      	.short	0x130a
   82998:	0404251c 	.word	0x0404251c
   8299c:	06          	.byte	0x06
   8299d:	00          	.byte	0x00
   8299e:	2000      	movs	r0, #0
    default:
        return false;
    }

    return false;
}
   829a0:	bd10      	pop	{r4, pc}
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   829a2:	4b16      	ldr	r3, [pc, #88]	; (829fc <openadc_setup_out_received+0x7c>)
        return true;
   829a4:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   829a6:	6123      	str	r3, [r4, #16]
}
   829a8:	bd10      	pop	{r4, pc}
        if (FPGA_setlock(fpga_usblocked)){
   829aa:	2006      	movs	r0, #6
   829ac:	4b14      	ldr	r3, [pc, #80]	; (82a00 <openadc_setup_out_received+0x80>)
   829ae:	4798      	blx	r3
   829b0:	2800      	cmp	r0, #0
   829b2:	d0f4      	beq.n	8299e <openadc_setup_out_received+0x1e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   829b4:	4b13      	ldr	r3, [pc, #76]	; (82a04 <openadc_setup_out_received+0x84>)
            return true;
   829b6:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   829b8:	6123      	str	r3, [r4, #16]
}
   829ba:	bd10      	pop	{r4, pc}
        if (FPGA_setlock(fpga_usblocked)){
   829bc:	2006      	movs	r0, #6
   829be:	4b10      	ldr	r3, [pc, #64]	; (82a00 <openadc_setup_out_received+0x80>)
   829c0:	4798      	blx	r3
   829c2:	2800      	cmp	r0, #0
   829c4:	d0eb      	beq.n	8299e <openadc_setup_out_received+0x1e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   829c6:	4b10      	ldr	r3, [pc, #64]	; (82a08 <openadc_setup_out_received+0x88>)
            return true;
   829c8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   829ca:	6123      	str	r3, [r4, #16]
}
   829cc:	bd10      	pop	{r4, pc}
        if (FPGA_setlock(fpga_usblocked)){
   829ce:	2006      	movs	r0, #6
   829d0:	4b0b      	ldr	r3, [pc, #44]	; (82a00 <openadc_setup_out_received+0x80>)
   829d2:	4798      	blx	r3
   829d4:	2800      	cmp	r0, #0
   829d6:	d0e2      	beq.n	8299e <openadc_setup_out_received+0x1e>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   829d8:	4b0c      	ldr	r3, [pc, #48]	; (82a0c <openadc_setup_out_received+0x8c>)
            return true;
   829da:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   829dc:	6123      	str	r3, [r4, #16]
}
   829de:	bd10      	pop	{r4, pc}
        if (FPGA_setlock(fpga_usblocked)){
   829e0:	2006      	movs	r0, #6
   829e2:	4b07      	ldr	r3, [pc, #28]	; (82a00 <openadc_setup_out_received+0x80>)
   829e4:	4798      	blx	r3
   829e6:	2800      	cmp	r0, #0
   829e8:	d0d9      	beq.n	8299e <openadc_setup_out_received+0x1e>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   829ea:	4b09      	ldr	r3, [pc, #36]	; (82a10 <openadc_setup_out_received+0x90>)
            return true;
   829ec:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   829ee:	6123      	str	r3, [r4, #16]
}
   829f0:	bd10      	pop	{r4, pc}
   829f2:	bf00      	nop
   829f4:	2000200c 	.word	0x2000200c
   829f8:	20001cb0 	.word	0x20001cb0
   829fc:	000828e1 	.word	0x000828e1
   82a00:	0008027d 	.word	0x0008027d
   82a04:	00082add 	.word	0x00082add
   82a08:	00082a15 	.word	0x00082a15
   82a0c:	00082a45 	.word	0x00082a45
   82a10:	00082a89 	.word	0x00082a89

00082a14 <openadc_writemem_bulk>:
{
   82a14:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82a16:	4a07      	ldr	r2, [pc, #28]	; (82a34 <openadc_writemem_bulk+0x20>)
    FPGA_releaselock();
   82a18:	4b07      	ldr	r3, [pc, #28]	; (82a38 <openadc_writemem_bulk+0x24>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82a1a:	6855      	ldr	r5, [r2, #4]
    FPGA_releaselock();
   82a1c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   82a1e:	4c07      	ldr	r4, [pc, #28]	; (82a3c <openadc_writemem_bulk+0x28>)
   82a20:	2004      	movs	r0, #4
   82a22:	47a0      	blx	r4
   82a24:	2800      	cmp	r0, #0
   82a26:	d0fb      	beq.n	82a20 <openadc_writemem_bulk+0xc>
    FPGA_setaddr(address);
   82a28:	4628      	mov	r0, r5
}
   82a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FPGA_setaddr(address);
   82a2e:	4b04      	ldr	r3, [pc, #16]	; (82a40 <openadc_writemem_bulk+0x2c>)
   82a30:	4718      	bx	r3
   82a32:	bf00      	nop
   82a34:	200017ac 	.word	0x200017ac
   82a38:	000802ad 	.word	0x000802ad
   82a3c:	0008027d 	.word	0x0008027d
   82a40:	000802c5 	.word	0x000802c5

00082a44 <openadc_readmem_ctrl>:
{
   82a44:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82a46:	4b0a      	ldr	r3, [pc, #40]	; (82a70 <openadc_readmem_ctrl+0x2c>)
    FPGA_releaselock();
   82a48:	4a0a      	ldr	r2, [pc, #40]	; (82a74 <openadc_readmem_ctrl+0x30>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82a4a:	e9d3 5600 	ldrd	r5, r6, [r3]
    FPGA_releaselock();
   82a4e:	4790      	blx	r2
    while(!FPGA_setlock(fpga_ctrlmem));
   82a50:	4c09      	ldr	r4, [pc, #36]	; (82a78 <openadc_readmem_ctrl+0x34>)
   82a52:	2005      	movs	r0, #5
   82a54:	47a0      	blx	r4
   82a56:	2800      	cmp	r0, #0
   82a58:	d0fb      	beq.n	82a52 <openadc_readmem_ctrl+0xe>
    FPGA_setaddr(address);
   82a5a:	4b08      	ldr	r3, [pc, #32]	; (82a7c <openadc_readmem_ctrl+0x38>)
   82a5c:	4630      	mov	r0, r6
   82a5e:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82a60:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82a64:	4b06      	ldr	r3, [pc, #24]	; (82a80 <openadc_readmem_ctrl+0x3c>)
    ctrlmemread_size = buflen;
   82a66:	4907      	ldr	r1, [pc, #28]	; (82a84 <openadc_readmem_ctrl+0x40>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82a68:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   82a6a:	600d      	str	r5, [r1, #0]
}
   82a6c:	bd70      	pop	{r4, r5, r6, pc}
   82a6e:	bf00      	nop
   82a70:	200017ac 	.word	0x200017ac
   82a74:	000802ad 	.word	0x000802ad
   82a78:	0008027d 	.word	0x0008027d
   82a7c:	000802c5 	.word	0x000802c5
   82a80:	20001cb4 	.word	0x20001cb4
   82a84:	20001cb8 	.word	0x20001cb8

00082a88 <openadc_writemem_ctrl>:
{
   82a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82a8c:	4b0d      	ldr	r3, [pc, #52]	; (82ac4 <openadc_writemem_ctrl+0x3c>)
    FPGA_releaselock();
   82a8e:	4e0e      	ldr	r6, [pc, #56]	; (82ac8 <openadc_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82a90:	e9d3 4700 	ldrd	r4, r7, [r3]
    FPGA_releaselock();
   82a94:	47b0      	blx	r6
    while(!FPGA_setlock(fpga_generic));
   82a96:	4d0d      	ldr	r5, [pc, #52]	; (82acc <openadc_writemem_ctrl+0x44>)
   82a98:	2001      	movs	r0, #1
   82a9a:	47a8      	blx	r5
   82a9c:	2800      	cmp	r0, #0
   82a9e:	d0fb      	beq.n	82a98 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   82aa0:	4638      	mov	r0, r7
   82aa2:	4b0b      	ldr	r3, [pc, #44]	; (82ad0 <openadc_writemem_ctrl+0x48>)
   82aa4:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   82aa6:	b14c      	cbz	r4, 82abc <openadc_writemem_ctrl+0x34>
   82aa8:	2300      	movs	r3, #0
   82aaa:	4a0a      	ldr	r2, [pc, #40]	; (82ad4 <openadc_writemem_ctrl+0x4c>)
   82aac:	4d0a      	ldr	r5, [pc, #40]	; (82ad8 <openadc_writemem_ctrl+0x50>)
        xram[i] = ctrlbuf_payload[i];
   82aae:	6829      	ldr	r1, [r5, #0]
   82ab0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82ab4:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   82ab6:	3301      	adds	r3, #1
   82ab8:	429c      	cmp	r4, r3
   82aba:	d1f8      	bne.n	82aae <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   82abc:	4633      	mov	r3, r6
}
   82abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_releaselock();
   82ac2:	4718      	bx	r3
   82ac4:	200017ac 	.word	0x200017ac
   82ac8:	000802ad 	.word	0x000802ad
   82acc:	0008027d 	.word	0x0008027d
   82ad0:	000802c5 	.word	0x000802c5
   82ad4:	200017b3 	.word	0x200017b3
   82ad8:	200001b8 	.word	0x200001b8

00082adc <openadc_readmem_bulk>:
{
   82adc:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82ade:	4b0a      	ldr	r3, [pc, #40]	; (82b08 <openadc_readmem_bulk+0x2c>)
    FPGA_releaselock();
   82ae0:	4a0a      	ldr	r2, [pc, #40]	; (82b0c <openadc_readmem_bulk+0x30>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82ae2:	e9d3 5600 	ldrd	r5, r6, [r3]
    FPGA_releaselock();
   82ae6:	4790      	blx	r2
    while(!FPGA_setlock(fpga_blockin));
   82ae8:	4c09      	ldr	r4, [pc, #36]	; (82b10 <openadc_readmem_bulk+0x34>)
   82aea:	2002      	movs	r0, #2
   82aec:	47a0      	blx	r4
   82aee:	2800      	cmp	r0, #0
   82af0:	d0fb      	beq.n	82aea <openadc_readmem_bulk+0xe>
    FPGA_setaddr(address);
   82af2:	4630      	mov	r0, r6
   82af4:	4b07      	ldr	r3, [pc, #28]	; (82b14 <openadc_readmem_bulk+0x38>)
   82af6:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   82af8:	4629      	mov	r1, r5
}
   82afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if  (!udi_vendor_bulk_in_run(
   82afe:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82b02:	4a05      	ldr	r2, [pc, #20]	; (82b18 <openadc_readmem_bulk+0x3c>)
   82b04:	4b05      	ldr	r3, [pc, #20]	; (82b1c <openadc_readmem_bulk+0x40>)
   82b06:	4718      	bx	r3
   82b08:	200017ac 	.word	0x200017ac
   82b0c:	000802ad 	.word	0x000802ad
   82b10:	0008027d 	.word	0x0008027d
   82b14:	000802c5 	.word	0x000802c5
   82b18:	00082bbd 	.word	0x00082bbd
   82b1c:	00085c61 	.word	0x00085c61

00082b20 <main_vendor_bulk_out_received>:
{
   82b20:	b570      	push	{r4, r5, r6, lr}
   82b22:	4605      	mov	r5, r0
    FPGA_releaselock();
   82b24:	4e1c      	ldr	r6, [pc, #112]	; (82b98 <main_vendor_bulk_out_received+0x78>)
{
   82b26:	460c      	mov	r4, r1
    FPGA_releaselock();
   82b28:	47b0      	blx	r6
    if (UDD_EP_TRANSFER_OK != status) {
   82b2a:	b985      	cbnz	r5, 82b4e <main_vendor_bulk_out_received+0x2e>
    if (blockendpoint_usage == bep_emem){
   82b2c:	4b1b      	ldr	r3, [pc, #108]	; (82b9c <main_vendor_bulk_out_received+0x7c>)
   82b2e:	781b      	ldrb	r3, [r3, #0]
   82b30:	b9ab      	cbnz	r3, 82b5e <main_vendor_bulk_out_received+0x3e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b32:	b144      	cbz	r4, 82b46 <main_vendor_bulk_out_received+0x26>
   82b34:	4a1a      	ldr	r2, [pc, #104]	; (82ba0 <main_vendor_bulk_out_received+0x80>)
   82b36:	4d1b      	ldr	r5, [pc, #108]	; (82ba4 <main_vendor_bulk_out_received+0x84>)
            xram[i] = main_buf_loopback[i];
   82b38:	6829      	ldr	r1, [r5, #0]
   82b3a:	f812 0b01 	ldrb.w	r0, [r2], #1
   82b3e:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b40:	3301      	adds	r3, #1
   82b42:	429c      	cmp	r4, r3
   82b44:	d1f8      	bne.n	82b38 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   82b46:	4b18      	ldr	r3, [pc, #96]	; (82ba8 <main_vendor_bulk_out_received+0x88>)
   82b48:	4798      	blx	r3
   82b4a:	2804      	cmp	r0, #4
   82b4c:	d016      	beq.n	82b7c <main_vendor_bulk_out_received+0x5c>
}
   82b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   82b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82b56:	4a15      	ldr	r2, [pc, #84]	; (82bac <main_vendor_bulk_out_received+0x8c>)
   82b58:	4811      	ldr	r0, [pc, #68]	; (82ba0 <main_vendor_bulk_out_received+0x80>)
   82b5a:	4b15      	ldr	r3, [pc, #84]	; (82bb0 <main_vendor_bulk_out_received+0x90>)
   82b5c:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   82b5e:	2b0a      	cmp	r3, #10
   82b60:	d00e      	beq.n	82b80 <main_vendor_bulk_out_received+0x60>
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   82b62:	2b14      	cmp	r3, #20
   82b64:	d1f3      	bne.n	82b4e <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b66:	2c00      	cmp	r4, #0
   82b68:	d0f1      	beq.n	82b4e <main_vendor_bulk_out_received+0x2e>
   82b6a:	4d0d      	ldr	r5, [pc, #52]	; (82ba0 <main_vendor_bulk_out_received+0x80>)
   82b6c:	4e11      	ldr	r6, [pc, #68]	; (82bb4 <main_vendor_bulk_out_received+0x94>)
   82b6e:	442c      	add	r4, r5
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   82b70:	f815 0b01 	ldrb.w	r0, [r5], #1
   82b74:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b76:	42a5      	cmp	r5, r4
   82b78:	d1fa      	bne.n	82b70 <main_vendor_bulk_out_received+0x50>
   82b7a:	e7e8      	b.n	82b4e <main_vendor_bulk_out_received+0x2e>
            FPGA_releaselock();
   82b7c:	47b0      	blx	r6
   82b7e:	e7e6      	b.n	82b4e <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b80:	2c00      	cmp	r4, #0
   82b82:	d0e4      	beq.n	82b4e <main_vendor_bulk_out_received+0x2e>
   82b84:	4d06      	ldr	r5, [pc, #24]	; (82ba0 <main_vendor_bulk_out_received+0x80>)
   82b86:	4e0c      	ldr	r6, [pc, #48]	; (82bb8 <main_vendor_bulk_out_received+0x98>)
   82b88:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   82b8a:	f815 0b01 	ldrb.w	r0, [r5], #1
   82b8e:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82b90:	42ac      	cmp	r4, r5
   82b92:	d1fa      	bne.n	82b8a <main_vendor_bulk_out_received+0x6a>
   82b94:	e7db      	b.n	82b4e <main_vendor_bulk_out_received+0x2e>
   82b96:	bf00      	nop
   82b98:	000802ad 	.word	0x000802ad
   82b9c:	20001cb0 	.word	0x20001cb0
   82ba0:	200017ec 	.word	0x200017ec
   82ba4:	200001b8 	.word	0x200001b8
   82ba8:	000802b9 	.word	0x000802b9
   82bac:	00082b21 	.word	0x00082b21
   82bb0:	00085c81 	.word	0x00085c81
   82bb4:	00080381 	.word	0x00080381
   82bb8:	00080441 	.word	0x00080441

00082bbc <main_vendor_bulk_in_received>:
{
   82bbc:	b510      	push	{r4, lr}
   82bbe:	4604      	mov	r4, r0
    FPGA_releaselock();
   82bc0:	4b06      	ldr	r3, [pc, #24]	; (82bdc <main_vendor_bulk_in_received+0x20>)
   82bc2:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   82bc4:	b104      	cbz	r4, 82bc8 <main_vendor_bulk_in_received+0xc>
}
   82bc6:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   82bc8:	4b05      	ldr	r3, [pc, #20]	; (82be0 <main_vendor_bulk_in_received+0x24>)
   82bca:	4798      	blx	r3
   82bcc:	2802      	cmp	r0, #2
   82bce:	d1fa      	bne.n	82bc6 <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   82bd0:	4620      	mov	r0, r4
}
   82bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   82bd6:	4b03      	ldr	r3, [pc, #12]	; (82be4 <main_vendor_bulk_in_received+0x28>)
   82bd8:	4718      	bx	r3
   82bda:	bf00      	nop
   82bdc:	000802ad 	.word	0x000802ad
   82be0:	000802b9 	.word	0x000802b9
   82be4:	0008027d 	.word	0x0008027d

00082be8 <openadc_setup_in_received>:
{
   82be8:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   82bea:	4c13      	ldr	r4, [pc, #76]	; (82c38 <openadc_setup_in_received+0x50>)
   82bec:	7863      	ldrb	r3, [r4, #1]
   82bee:	2b12      	cmp	r3, #18
   82bf0:	d016      	beq.n	82c20 <openadc_setup_in_received+0x38>
   82bf2:	2b15      	cmp	r3, #21
   82bf4:	d112      	bne.n	82c1c <openadc_setup_in_received+0x34>
        respbuf[0] = FPGA_ISDONE();
   82bf6:	4b11      	ldr	r3, [pc, #68]	; (82c3c <openadc_setup_in_received+0x54>)
   82bf8:	200a      	movs	r0, #10
   82bfa:	4798      	blx	r3
        respbuf[1] = 0;
   82bfc:	2100      	movs	r1, #0
        respbuf[0] = FPGA_ISDONE();
   82bfe:	4602      	mov	r2, r0
   82c00:	1a52      	subs	r2, r2, r1
   82c02:	bf18      	it	ne
   82c04:	2201      	movne	r2, #1
        udd_g_ctrlreq.payload_size = 4;
   82c06:	f04f 0c04 	mov.w	ip, #4
        respbuf[0] = FPGA_ISDONE();
   82c0a:	4b0d      	ldr	r3, [pc, #52]	; (82c40 <openadc_setup_in_received+0x58>)
        udd_g_ctrlreq.payload_size = 4;
   82c0c:	2001      	movs	r0, #1
        respbuf[1] = 0;
   82c0e:	7059      	strb	r1, [r3, #1]
        respbuf[2] = 0;
   82c10:	8059      	strh	r1, [r3, #2]
        respbuf[0] = FPGA_ISDONE();
   82c12:	701a      	strb	r2, [r3, #0]
        udd_g_ctrlreq.payload = respbuf;
   82c14:	60a3      	str	r3, [r4, #8]
        udd_g_ctrlreq.payload_size = 4;
   82c16:	f8a4 c00c 	strh.w	ip, [r4, #12]
}
   82c1a:	bd10      	pop	{r4, pc}
    switch(udd_g_ctrlreq.req.bRequest){
   82c1c:	2000      	movs	r0, #0
}
   82c1e:	bd10      	pop	{r4, pc}
        ctrlmemread_size = 0;
   82c20:	2100      	movs	r1, #0
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   82c22:	4b08      	ldr	r3, [pc, #32]	; (82c44 <openadc_setup_in_received+0x5c>)
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   82c24:	4808      	ldr	r0, [pc, #32]	; (82c48 <openadc_setup_in_received+0x60>)
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   82c26:	681a      	ldr	r2, [r3, #0]
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   82c28:	6800      	ldr	r0, [r0, #0]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   82c2a:	81a2      	strh	r2, [r4, #12]
        FPGA_releaselock();
   82c2c:	4a07      	ldr	r2, [pc, #28]	; (82c4c <openadc_setup_in_received+0x64>)
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   82c2e:	60a0      	str	r0, [r4, #8]
        ctrlmemread_size = 0;
   82c30:	6019      	str	r1, [r3, #0]
        FPGA_releaselock();
   82c32:	4790      	blx	r2
        return true;
   82c34:	2001      	movs	r0, #1
}
   82c36:	bd10      	pop	{r4, pc}
   82c38:	2000200c 	.word	0x2000200c
   82c3c:	00085d01 	.word	0x00085d01
   82c40:	20001c70 	.word	0x20001c70
   82c44:	20001cb8 	.word	0x20001cb8
   82c48:	20001cb4 	.word	0x20001cb4
   82c4c:	000802ad 	.word	0x000802ad

00082c50 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   82c50:	b510      	push	{r4, lr}
    FPGA_releaselock();
   82c52:	4b05      	ldr	r3, [pc, #20]	; (82c68 <openadc_register_handlers+0x18>)
   82c54:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   82c56:	4b05      	ldr	r3, [pc, #20]	; (82c6c <openadc_register_handlers+0x1c>)
   82c58:	4805      	ldr	r0, [pc, #20]	; (82c70 <openadc_register_handlers+0x20>)
   82c5a:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
}
   82c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(openadc_setup_out_received);
   82c60:	4804      	ldr	r0, [pc, #16]	; (82c74 <openadc_register_handlers+0x24>)
   82c62:	4b05      	ldr	r3, [pc, #20]	; (82c78 <openadc_register_handlers+0x28>)
   82c64:	4718      	bx	r3
   82c66:	bf00      	nop
   82c68:	000802ad 	.word	0x000802ad
   82c6c:	0008263d 	.word	0x0008263d
   82c70:	00082be9 	.word	0x00082be9
   82c74:	00082981 	.word	0x00082981
   82c78:	00082665 	.word	0x00082665

00082c7c <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   82c7c:	4a17      	ldr	r2, [pc, #92]	; (82cdc <usart_setup_out_received+0x60>)
   82c7e:	7853      	ldrb	r3, [r2, #1]
   82c80:	3b1a      	subs	r3, #26
   82c82:	2b1b      	cmp	r3, #27
   82c84:	d80f      	bhi.n	82ca6 <usart_setup_out_received+0x2a>
   82c86:	e8df f003 	tbb	[pc, r3]
   82c8a:	1814      	.short	0x1814
   82c8c:	0e0e0e0e 	.word	0x0e0e0e0e
   82c90:	0e0e201c 	.word	0x0e0e201c
   82c94:	0e0e0e0e 	.word	0x0e0e0e0e
   82c98:	0e0e0e0e 	.word	0x0e0e0e0e
   82c9c:	0e0e0e0e 	.word	0x0e0e0e0e
   82ca0:	0e0e240e 	.word	0x0e0e240e
   82ca4:	100e      	.short	0x100e
   82ca6:	2000      	movs	r0, #0
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
        return true;
        break;
    }
    return false;
}
   82ca8:	4770      	bx	lr
        udd_g_ctrlreq.callback = ctrl_spi1util;
   82caa:	4b0d      	ldr	r3, [pc, #52]	; (82ce0 <usart_setup_out_received+0x64>)
        return true;
   82cac:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_spi1util;
   82cae:	6113      	str	r3, [r2, #16]
        return true;
   82cb0:	4770      	bx	lr
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   82cb2:	4b0c      	ldr	r3, [pc, #48]	; (82ce4 <usart_setup_out_received+0x68>)
        return true;
   82cb4:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   82cb6:	6113      	str	r3, [r2, #16]
        return true;
   82cb8:	4770      	bx	lr
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   82cba:	4b0b      	ldr	r3, [pc, #44]	; (82ce8 <usart_setup_out_received+0x6c>)
        return true;
   82cbc:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   82cbe:	6113      	str	r3, [r2, #16]
        return true;
   82cc0:	4770      	bx	lr
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   82cc2:	4b0a      	ldr	r3, [pc, #40]	; (82cec <usart_setup_out_received+0x70>)
        return true;
   82cc4:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   82cc6:	6113      	str	r3, [r2, #16]
        return true;
   82cc8:	4770      	bx	lr
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   82cca:	4b09      	ldr	r3, [pc, #36]	; (82cf0 <usart_setup_out_received+0x74>)
        return true;
   82ccc:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   82cce:	6113      	str	r3, [r2, #16]
        return true;
   82cd0:	4770      	bx	lr
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82cd2:	4b08      	ldr	r3, [pc, #32]	; (82cf4 <usart_setup_out_received+0x78>)
        return true;
   82cd4:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82cd6:	6113      	str	r3, [r2, #16]
        return true;
   82cd8:	4770      	bx	lr
   82cda:	bf00      	nop
   82cdc:	2000200c 	.word	0x2000200c
   82ce0:	00082e45 	.word	0x00082e45
   82ce4:	000832c1 	.word	0x000832c1
   82ce8:	0008325d 	.word	0x0008325d
   82cec:	00082cf9 	.word	0x00082cf9
   82cf0:	00082d01 	.word	0x00082d01
   82cf4:	00082d09 	.word	0x00082d09

00082cf8 <ctrl_xmega_program_void>:
	XPROGProtocol_Command();
   82cf8:	4b00      	ldr	r3, [pc, #0]	; (82cfc <ctrl_xmega_program_void+0x4>)
   82cfa:	4718      	bx	r3
   82cfc:	00080cb5 	.word	0x00080cb5

00082d00 <ctrl_avr_program_void>:
	V2Protocol_ProcessCommand();
   82d00:	4b00      	ldr	r3, [pc, #0]	; (82d04 <ctrl_avr_program_void+0x4>)
   82d02:	4718      	bx	r3
   82d04:	0008045d 	.word	0x0008045d

00082d08 <naeusb_cdc_settings_out>:
    for (uint8_t i = 0; i < 4; i++) {
   82d08:	4b04      	ldr	r3, [pc, #16]	; (82d1c <naeusb_cdc_settings_out+0x14>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82d0a:	4905      	ldr	r1, [pc, #20]	; (82d20 <naeusb_cdc_settings_out+0x18>)
   82d0c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
   82d10:	8849      	ldrh	r1, [r1, #2]
   82d12:	f361 02c3 	bfi	r2, r1, #3, #1
   82d16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   82d1a:	4770      	bx	lr
   82d1c:	2000065c 	.word	0x2000065c
   82d20:	2000200c 	.word	0x2000200c

00082d24 <spi1util_toggleclk>:
{
   82d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d28:	4606      	mov	r6, r0
        gpio_set_pin_high(SPI_MOSI_GPIO);
   82d2a:	200e      	movs	r0, #14
    if (mosi_status){
   82d2c:	b361      	cbz	r1, 82d88 <spi1util_toggleclk+0x64>
        gpio_set_pin_high(SPI_MOSI_GPIO);
   82d2e:	4f1b      	ldr	r7, [pc, #108]	; (82d9c <spi1util_toggleclk+0x78>)
   82d30:	47b8      	blx	r7
        gpio_configure_pin(SPI_MOSI_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   82d32:	f8df 806c 	ldr.w	r8, [pc, #108]	; 82da0 <spi1util_toggleclk+0x7c>
   82d36:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82d3a:	200e      	movs	r0, #14
   82d3c:	47c0      	blx	r8
   82d3e:	4d19      	ldr	r5, [pc, #100]	; (82da4 <spi1util_toggleclk+0x80>)
    gpio_set_pin_low(SPI_SPCK_GPIO);
   82d40:	200f      	movs	r0, #15
   82d42:	47a8      	blx	r5
    while(cycles--){
   82d44:	1e74      	subs	r4, r6, #1
	gpio_configure_pin(SPI_SPCK_GPIO, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   82d46:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d4a:	200f      	movs	r0, #15
   82d4c:	47c0      	blx	r8
    while(cycles--){
   82d4e:	b2e4      	uxtb	r4, r4
   82d50:	b17e      	cbz	r6, 82d72 <spi1util_toggleclk+0x4e>
   82d52:	4f12      	ldr	r7, [pc, #72]	; (82d9c <spi1util_toggleclk+0x78>)
   82d54:	4e14      	ldr	r6, [pc, #80]	; (82da8 <spi1util_toggleclk+0x84>)
        gpio_set_pin_low(SPI_SPCK_GPIO);
   82d56:	200f      	movs	r0, #15
   82d58:	47a8      	blx	r5
        delay_cycles(1);
   82d5a:	2001      	movs	r0, #1
   82d5c:	47b0      	blx	r6
        gpio_set_pin_high(SPI_SPCK_GPIO);
   82d5e:	200f      	movs	r0, #15
   82d60:	47b8      	blx	r7
    while(cycles--){
   82d62:	3c01      	subs	r4, #1
        delay_cycles(1);
   82d64:	2001      	movs	r0, #1
   82d66:	47b0      	blx	r6
    while(cycles--){
   82d68:	b2e4      	uxtb	r4, r4
        gpio_set_pin_low(SPI_SPCK_GPIO);
   82d6a:	200f      	movs	r0, #15
   82d6c:	47a8      	blx	r5
    while(cycles--){
   82d6e:	2cff      	cmp	r4, #255	; 0xff
   82d70:	d1f1      	bne.n	82d56 <spi1util_toggleclk+0x32>
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   82d72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d76:	200e      	movs	r0, #14
   82d78:	47c0      	blx	r8
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   82d7a:	4643      	mov	r3, r8
}
   82d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   82d80:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d84:	200f      	movs	r0, #15
   82d86:	4718      	bx	r3
        gpio_set_pin_low(SPI_MOSI_GPIO);
   82d88:	4d06      	ldr	r5, [pc, #24]	; (82da4 <spi1util_toggleclk+0x80>)
   82d8a:	47a8      	blx	r5
        gpio_configure_pin(SPI_MOSI_GPIO, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   82d8c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 82da0 <spi1util_toggleclk+0x7c>
   82d90:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d94:	200e      	movs	r0, #14
   82d96:	47c0      	blx	r8
   82d98:	e7d2      	b.n	82d40 <spi1util_toggleclk+0x1c>
   82d9a:	bf00      	nop
   82d9c:	00085d1d 	.word	0x00085d1d
   82da0:	00085d79 	.word	0x00085d79
   82da4:	00085d39 	.word	0x00085d39
   82da8:	20000091 	.word	0x20000091

00082dac <spi1util_init>:
{
   82dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_enable_clock(SPI);
   82db0:	4c1c      	ldr	r4, [pc, #112]	; (82e24 <spi1util_init+0x78>)
{
   82db2:	4606      	mov	r6, r0
    spi_enable_clock(SPI);
   82db4:	4b1c      	ldr	r3, [pc, #112]	; (82e28 <spi1util_init+0x7c>)
   82db6:	4620      	mov	r0, r4
   82db8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   82dba:	2380      	movs	r3, #128	; 0x80
	spi_set_clock_polarity(SPI, 0, 0);
   82dbc:	2200      	movs	r2, #0
   82dbe:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   82dc0:	6863      	ldr	r3, [r4, #4]
   82dc2:	4620      	mov	r0, r4
   82dc4:	f043 0301 	orr.w	r3, r3, #1
   82dc8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82dca:	6863      	ldr	r3, [r4, #4]
   82dcc:	4611      	mov	r1, r2
   82dce:	f043 0310 	orr.w	r3, r3, #16
   82dd2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   82dd4:	6863      	ldr	r3, [r4, #4]
   82dd6:	4f15      	ldr	r7, [pc, #84]	; (82e2c <spi1util_init+0x80>)
   82dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82ddc:	6063      	str	r3, [r4, #4]
   82dde:	47b8      	blx	r7
	spi_set_clock_phase(SPI, 0, 1);
   82de0:	2201      	movs	r2, #1
   82de2:	4620      	mov	r0, r4
   82de4:	2100      	movs	r1, #0
   82de6:	4b12      	ldr	r3, [pc, #72]	; (82e30 <spi1util_init+0x84>)
   82de8:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   82dea:	4630      	mov	r0, r6
   82dec:	4911      	ldr	r1, [pc, #68]	; (82e34 <spi1util_init+0x88>)
   82dee:	4b12      	ldr	r3, [pc, #72]	; (82e38 <spi1util_init+0x8c>)
   82df0:	4798      	blx	r3
   82df2:	4602      	mov	r2, r0
   82df4:	2100      	movs	r1, #0
   82df6:	4620      	mov	r0, r4
   82df8:	b2d2      	uxtb	r2, r2
   82dfa:	4b10      	ldr	r3, [pc, #64]	; (82e3c <spi1util_init+0x90>)
   82dfc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82dfe:	2301      	movs	r3, #1
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   82e00:	4d0f      	ldr	r5, [pc, #60]	; (82e40 <spi1util_init+0x94>)
   82e02:	6023      	str	r3, [r4, #0]
   82e04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e08:	200e      	movs	r0, #14
   82e0a:	47a8      	blx	r5
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   82e0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e10:	200f      	movs	r0, #15
   82e12:	47a8      	blx	r5
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   82e14:	462b      	mov	r3, r5
}
   82e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   82e1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e1e:	200d      	movs	r0, #13
   82e20:	4718      	bx	r3
   82e22:	bf00      	nop
   82e24:	40008000 	.word	0x40008000
   82e28:	00085885 	.word	0x00085885
   82e2c:	00085909 	.word	0x00085909
   82e30:	00085921 	.word	0x00085921
   82e34:	05b8d800 	.word	0x05b8d800
   82e38:	00085939 	.word	0x00085939
   82e3c:	00085951 	.word	0x00085951
   82e40:	00085d79 	.word	0x00085d79

00082e44 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   82e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82e48:	4c35      	ldr	r4, [pc, #212]	; (82f20 <ctrl_spi1util+0xdc>)
static void ctrl_spi1util(void){
   82e4a:	b083      	sub	sp, #12
	switch(udd_g_ctrlreq.req.wValue){
   82e4c:	8863      	ldrh	r3, [r4, #2]
   82e4e:	3ba0      	subs	r3, #160	; 0xa0
   82e50:	2b08      	cmp	r3, #8
   82e52:	d809      	bhi.n	82e68 <ctrl_spi1util+0x24>
   82e54:	e8df f003 	tbb	[pc, r3]
   82e58:	0808080b 	.word	0x0808080b
   82e5c:	51463b16 	.word	0x51463b16
   82e60:	05          	.byte	0x05
   82e61:	00          	.byte	0x00
            if(udd_g_ctrlreq.req.wLength == 2){
   82e62:	88e3      	ldrh	r3, [r4, #6]
   82e64:	2b02      	cmp	r3, #2
   82e66:	d050      	beq.n	82f0a <ctrl_spi1util+0xc6>
}
   82e68:	b003      	add	sp, #12
   82e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   82e6e:	88e3      	ldrh	r3, [r4, #6]
   82e70:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82e72:	bf0a      	itet	eq
   82e74:	4b2b      	ldreq	r3, [pc, #172]	; (82f24 <ctrl_spi1util+0xe0>)
    uint32_t prog_freq = 100E3;
   82e76:	482c      	ldrne	r0, [pc, #176]	; (82f28 <ctrl_spi1util+0xe4>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82e78:	6818      	ldreq	r0, [r3, #0]
			spi1util_init(prog_freq);			
   82e7a:	4b2c      	ldr	r3, [pc, #176]	; (82f2c <ctrl_spi1util+0xe8>)
}
   82e7c:	b003      	add	sp, #12
   82e7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			spi1util_init(prog_freq);			
   82e82:	4718      	bx	r3
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e84:	88e3      	ldrh	r3, [r4, #6]
   82e86:	89a2      	ldrh	r2, [r4, #12]
   82e88:	429a      	cmp	r2, r3
   82e8a:	d3ed      	bcc.n	82e68 <ctrl_spi1util+0x24>
			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer)){
   82e8c:	3b01      	subs	r3, #1
   82e8e:	2b3f      	cmp	r3, #63	; 0x3f
   82e90:	d8ea      	bhi.n	82e68 <ctrl_spi1util+0x24>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e92:	2500      	movs	r5, #0
   82e94:	4f26      	ldr	r7, [pc, #152]	; (82f30 <ctrl_spi1util+0xec>)
   82e96:	f8df 909c 	ldr.w	r9, [pc, #156]	; 82f34 <ctrl_spi1util+0xf0>
   82e9a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 82f38 <ctrl_spi1util+0xf4>
    spi_write(SPI, data, 0, 0);
   82e9e:	4e27      	ldr	r6, [pc, #156]	; (82f3c <ctrl_spi1util+0xf8>)
   82ea0:	2300      	movs	r3, #0
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   82ea2:	68a2      	ldr	r2, [r4, #8]
    spi_write(SPI, data, 0, 0);
   82ea4:	4630      	mov	r0, r6
    uint16_t data = b;
   82ea6:	5d51      	ldrb	r1, [r2, r5]
    spi_write(SPI, data, 0, 0);
   82ea8:	461a      	mov	r2, r3
    uint16_t data = b;
   82eaa:	f8ad 1006 	strh.w	r1, [sp, #6]
    spi_write(SPI, data, 0, 0);
   82eae:	47c8      	blx	r9
    spi_read(SPI, &data, &ignored);
   82eb0:	4630      	mov	r0, r6
   82eb2:	f10d 0205 	add.w	r2, sp, #5
   82eb6:	f10d 0106 	add.w	r1, sp, #6
   82eba:	47c0      	blx	r8
    return data;
   82ebc:	f89d 3006 	ldrb.w	r3, [sp, #6]
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82ec0:	3501      	adds	r5, #1
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   82ec2:	f807 3b01 	strb.w	r3, [r7], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82ec6:	88e3      	ldrh	r3, [r4, #6]
   82ec8:	42ab      	cmp	r3, r5
   82eca:	dce9      	bgt.n	82ea0 <ctrl_spi1util+0x5c>
   82ecc:	e7cc      	b.n	82e68 <ctrl_spi1util+0x24>
            gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   82ece:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82ed2:	4b1b      	ldr	r3, [pc, #108]	; (82f40 <ctrl_spi1util+0xfc>)
   82ed4:	2011      	movs	r0, #17
   82ed6:	4798      	blx	r3
            gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   82ed8:	2011      	movs	r0, #17
   82eda:	4b1a      	ldr	r3, [pc, #104]	; (82f44 <ctrl_spi1util+0x100>)
}
   82edc:	b003      	add	sp, #12
   82ede:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   82ee2:	4718      	bx	r3
            gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   82ee4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82ee8:	4b15      	ldr	r3, [pc, #84]	; (82f40 <ctrl_spi1util+0xfc>)
   82eea:	2011      	movs	r0, #17
   82eec:	4798      	blx	r3
            gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   82eee:	2011      	movs	r0, #17
   82ef0:	4b15      	ldr	r3, [pc, #84]	; (82f48 <ctrl_spi1util+0x104>)
}
   82ef2:	b003      	add	sp, #12
   82ef4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   82ef8:	4718      	bx	r3
            gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   82efa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82efe:	2011      	movs	r0, #17
   82f00:	4b0f      	ldr	r3, [pc, #60]	; (82f40 <ctrl_spi1util+0xfc>)
}
   82f02:	b003      	add	sp, #12
   82f04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   82f08:	4718      	bx	r3
                spi1util_toggleclk(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
   82f0a:	68a3      	ldr	r3, [r4, #8]
   82f0c:	4a0f      	ldr	r2, [pc, #60]	; (82f4c <ctrl_spi1util+0x108>)
   82f0e:	7859      	ldrb	r1, [r3, #1]
   82f10:	7818      	ldrb	r0, [r3, #0]
   82f12:	3900      	subs	r1, #0
   82f14:	bf18      	it	ne
   82f16:	2101      	movne	r1, #1
}
   82f18:	b003      	add	sp, #12
   82f1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                spi1util_toggleclk(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
   82f1e:	4710      	bx	r2
   82f20:	2000200c 	.word	0x2000200c
   82f24:	200017ac 	.word	0x200017ac
   82f28:	000186a0 	.word	0x000186a0
   82f2c:	00082dad 	.word	0x00082dad
   82f30:	20001cc0 	.word	0x20001cc0
   82f34:	000858cd 	.word	0x000858cd
   82f38:	0008589d 	.word	0x0008589d
   82f3c:	40008000 	.word	0x40008000
   82f40:	00085d79 	.word	0x00085d79
   82f44:	00085d39 	.word	0x00085d39
   82f48:	00085d1d 	.word	0x00085d1d
   82f4c:	00082d25 	.word	0x00082d25

00082f50 <generic_isr>:
{
   82f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
   82f54:	4b1a      	ldr	r3, [pc, #104]	; (82fc0 <generic_isr+0x70>)
{
   82f56:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   82f58:	6800      	ldr	r0, [r0, #0]
   82f5a:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
   82f5c:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
   82f5e:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   82f60:	d403      	bmi.n	82f6a <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   82f62:	07ab      	lsls	r3, r5, #30
   82f64:	d415      	bmi.n	82f92 <generic_isr+0x42>
}
   82f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   82f6a:	4620      	mov	r0, r4
   82f6c:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
   82f70:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   82f72:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   82f74:	4f13      	ldr	r7, [pc, #76]	; (82fc4 <generic_isr+0x74>)
   82f76:	b2f6      	uxtb	r6, r6
   82f78:	4631      	mov	r1, r6
   82f7a:	47b8      	blx	r7
        if (driver->cdc_enabled)
   82f7c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82f80:	075a      	lsls	r2, r3, #29
   82f82:	d5ee      	bpl.n	82f62 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   82f84:	2200      	movs	r2, #0
   82f86:	4631      	mov	r1, r6
   82f88:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   82f8c:	47b8      	blx	r7
	if (status & US_CSR_TXRDY){
   82f8e:	07ab      	lsls	r3, r5, #30
   82f90:	d5e9      	bpl.n	82f66 <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
   82f92:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   82f96:	4628      	mov	r0, r5
   82f98:	4b0b      	ldr	r3, [pc, #44]	; (82fc8 <generic_isr+0x78>)
   82f9a:	4798      	blx	r3
   82f9c:	b148      	cbz	r0, 82fb2 <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   82f9e:	4628      	mov	r0, r5
   82fa0:	4b0a      	ldr	r3, [pc, #40]	; (82fcc <generic_isr+0x7c>)
   82fa2:	6824      	ldr	r4, [r4, #0]
   82fa4:	4798      	blx	r3
   82fa6:	4b0a      	ldr	r3, [pc, #40]	; (82fd0 <generic_isr+0x80>)
   82fa8:	4601      	mov	r1, r0
   82faa:	4620      	mov	r0, r4
}
   82fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   82fb0:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   82fb2:	6820      	ldr	r0, [r4, #0]
   82fb4:	2102      	movs	r1, #2
}
   82fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   82fba:	4b06      	ldr	r3, [pc, #24]	; (82fd4 <generic_isr+0x84>)
   82fbc:	4718      	bx	r3
   82fbe:	bf00      	nop
   82fc0:	000841e1 	.word	0x000841e1
   82fc4:	00081d49 	.word	0x00081d49
   82fc8:	00081d95 	.word	0x00081d95
   82fcc:	00081d75 	.word	0x00081d75
   82fd0:	000841ed 	.word	0x000841ed
   82fd4:	000841d9 	.word	0x000841d9

00082fd8 <USART0_Handler>:
	generic_isr(&usart0_driver);
   82fd8:	4801      	ldr	r0, [pc, #4]	; (82fe0 <USART0_Handler+0x8>)
   82fda:	4b02      	ldr	r3, [pc, #8]	; (82fe4 <USART0_Handler+0xc>)
   82fdc:	4718      	bx	r3
   82fde:	bf00      	nop
   82fe0:	2000065c 	.word	0x2000065c
   82fe4:	00082f51 	.word	0x00082f51

00082fe8 <ctrl_usart_in>:
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82fe8:	4a13      	ldr	r2, [pc, #76]	; (83038 <ctrl_usart_in+0x50>)
   82fea:	8850      	ldrh	r0, [r2, #2]
		if (port == 0) break;
   82fec:	0a03      	lsrs	r3, r0, #8
   82fee:	d001      	beq.n	82ff4 <ctrl_usart_in+0xc>
        return false;
   82ff0:	2000      	movs	r0, #0
}
   82ff2:	4770      	bx	lr
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82ff4:	2814      	cmp	r0, #20
{
   82ff6:	b510      	push	{r4, lr}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82ff8:	d00c      	beq.n	83014 <ctrl_usart_in+0x2c>
   82ffa:	2818      	cmp	r0, #24
   82ffc:	d005      	beq.n	8300a <ctrl_usart_in+0x22>
   82ffe:	f1a0 0010 	sub.w	r0, r0, #16
   83002:	fab0 f080 	clz	r0, r0
   83006:	0940      	lsrs	r0, r0, #5
}
   83008:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   8300a:	88d1      	ldrh	r1, [r2, #6]
   8300c:	2903      	cmp	r1, #3
   8300e:	d80f      	bhi.n	83030 <ctrl_usart_in+0x48>
        return false;
   83010:	4618      	mov	r0, r3
}
   83012:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   83014:	88d1      	ldrh	r1, [r2, #6]
   83016:	2903      	cmp	r1, #3
   83018:	d9fa      	bls.n	83010 <ctrl_usart_in+0x28>
        udd_g_ctrlreq.payload_size = 4;
   8301a:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   8301c:	4c07      	ldr	r4, [pc, #28]	; (8303c <ctrl_usart_in+0x54>)
        cnt = circ_buf_count(&driver->rxbuf);
   8301e:	4808      	ldr	r0, [pc, #32]	; (83040 <ctrl_usart_in+0x58>)
        cnt = circ_buf_count(&driver->txbuf);
   83020:	4b08      	ldr	r3, [pc, #32]	; (83044 <ctrl_usart_in+0x5c>)
        udd_g_ctrlreq.payload = respbuf;
   83022:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   83024:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   83026:	4798      	blx	r3
   83028:	4603      	mov	r3, r0
        return true;
   8302a:	2001      	movs	r0, #1
        word2buf(respbuf, cnt);
   8302c:	6023      	str	r3, [r4, #0]
}
   8302e:	bd10      	pop	{r4, pc}
        udd_g_ctrlreq.payload_size = 4;
   83030:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   83032:	4c02      	ldr	r4, [pc, #8]	; (8303c <ctrl_usart_in+0x54>)
        cnt = circ_buf_count(&driver->txbuf);
   83034:	4804      	ldr	r0, [pc, #16]	; (83048 <ctrl_usart_in+0x60>)
   83036:	e7f3      	b.n	83020 <ctrl_usart_in+0x38>
   83038:	2000200c 	.word	0x2000200c
   8303c:	20001c70 	.word	0x20001c70
   83040:	20000678 	.word	0x20000678
   83044:	00081da1 	.word	0x00081da1
   83048:	2000074c 	.word	0x2000074c

0008304c <configure_usart>:
{
   8304c:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
   8304e:	2a01      	cmp	r2, #1
{
   83050:	4604      	mov	r4, r0
   83052:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
   83056:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
   83058:	d00e      	beq.n	83078 <configure_usart+0x2c>
   8305a:	2a02      	cmp	r2, #2
   8305c:	d008      	beq.n	83070 <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8305e:	2200      	movs	r2, #0
   83060:	6102      	str	r2, [r0, #16]
    switch(parity)
   83062:	3b01      	subs	r3, #1
   83064:	2b03      	cmp	r3, #3
   83066:	d863      	bhi.n	83130 <configure_usart+0xe4>
   83068:	e8df f003 	tbb	[pc, r3]
   8306c:	0a585532 	.word	0x0a585532
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   83070:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83074:	6102      	str	r2, [r0, #16]
            break;
   83076:	e7f4      	b.n	83062 <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   83078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8307c:	6102      	str	r2, [r0, #16]
            break;
   8307e:	e7f0      	b.n	83062 <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   83080:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83084:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   83086:	2d06      	cmp	r5, #6
   83088:	d027      	beq.n	830da <configure_usart+0x8e>
   8308a:	2d07      	cmp	r5, #7
   8308c:	d04d      	beq.n	8312a <configure_usart+0xde>
   8308e:	2d05      	cmp	r5, #5
   83090:	d048      	beq.n	83124 <configure_usart+0xd8>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   83092:	23c0      	movs	r3, #192	; 0xc0
   83094:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   83096:	2200      	movs	r2, #0
    if (driver->usart_id == 0) {
   83098:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8309c:	6162      	str	r2, [r4, #20]
    if (driver->usart_id == 0) {
   8309e:	b323      	cbz	r3, 830ea <configure_usart+0x9e>
    driver->enabled = 1;
   830a0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   830a4:	4d24      	ldr	r5, [pc, #144]	; (83138 <configure_usart+0xec>)
    driver->enabled = 1;
   830a6:	f043 0302 	orr.w	r3, r3, #2
   830aa:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   830ae:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   830b2:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   830b4:	f104 001c 	add.w	r0, r4, #28
   830b8:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   830ba:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   830be:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   830c0:	4621      	mov	r1, r4
   830c2:	4a1e      	ldr	r2, [pc, #120]	; (8313c <configure_usart+0xf0>)
   830c4:	4b1e      	ldr	r3, [pc, #120]	; (83140 <configure_usart+0xf4>)
   830c6:	f851 0b04 	ldr.w	r0, [r1], #4
   830ca:	4798      	blx	r3
}
   830cc:	2001      	movs	r0, #1
   830ce:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   830d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
   830d4:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   830d6:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   830d8:	d1d7      	bne.n	8308a <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   830da:	2340      	movs	r3, #64	; 0x40
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   830dc:	2200      	movs	r2, #0
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   830de:	60a3      	str	r3, [r4, #8]
    if (driver->usart_id == 0) {
   830e0:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   830e4:	6162      	str	r2, [r4, #20]
    if (driver->usart_id == 0) {
   830e6:	2b00      	cmp	r3, #0
   830e8:	d1da      	bne.n	830a0 <configure_usart+0x54>
   830ea:	4b16      	ldr	r3, [pc, #88]	; (83144 <configure_usart+0xf8>)
   830ec:	200d      	movs	r0, #13
   830ee:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   830f0:	4d15      	ldr	r5, [pc, #84]	; (83148 <configure_usart+0xfc>)
   830f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830f6:	2013      	movs	r0, #19
   830f8:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   830fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830fe:	2012      	movs	r0, #18
   83100:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83106:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83108:	4b10      	ldr	r3, [pc, #64]	; (8314c <configure_usart+0x100>)
   8310a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8310e:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83112:	601a      	str	r2, [r3, #0]
}
   83114:	e7c4      	b.n	830a0 <configure_usart+0x54>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   83116:	2300      	movs	r3, #0
   83118:	60e3      	str	r3, [r4, #12]
            break;
   8311a:	e7b4      	b.n	83086 <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   8311c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   83120:	60e3      	str	r3, [r4, #12]
            break;
   83122:	e7b0      	b.n	83086 <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   83124:	2300      	movs	r3, #0
   83126:	60a3      	str	r3, [r4, #8]
            break;
   83128:	e7b5      	b.n	83096 <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   8312a:	2380      	movs	r3, #128	; 0x80
   8312c:	60a3      	str	r3, [r4, #8]
            break;
   8312e:	e7b2      	b.n	83096 <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   83130:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83134:	60e3      	str	r3, [r4, #12]
            break;
   83136:	e7a6      	b.n	83086 <configure_usart+0x3a>
   83138:	00081d3d 	.word	0x00081d3d
   8313c:	05b8d800 	.word	0x05b8d800
   83140:	000840b9 	.word	0x000840b9
   83144:	00085b7d 	.word	0x00085b7d
   83148:	00085d79 	.word	0x00085d79
   8314c:	e000e100 	.word	0xe000e100

00083150 <ctrl_usart_out>:
{
   83150:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   83152:	4c36      	ldr	r4, [pc, #216]	; (8322c <ctrl_usart_out+0xdc>)
{
   83154:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   83156:	8863      	ldrh	r3, [r4, #2]
		if (port == 0) break;
   83158:	0a1a      	lsrs	r2, r3, #8
   8315a:	d001      	beq.n	83160 <ctrl_usart_out+0x10>
}
   8315c:	b002      	add	sp, #8
   8315e:	bd70      	pop	{r4, r5, r6, pc}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   83160:	2b11      	cmp	r3, #17
   83162:	d025      	beq.n	831b0 <ctrl_usart_out+0x60>
   83164:	2b12      	cmp	r3, #18
   83166:	d015      	beq.n	83194 <ctrl_usart_out+0x44>
   83168:	2b10      	cmp	r3, #16
   8316a:	d1f7      	bne.n	8315c <ctrl_usart_out+0xc>
        if (udd_g_ctrlreq.req.wLength != 7) return;
   8316c:	88e3      	ldrh	r3, [r4, #6]
   8316e:	2b07      	cmp	r3, #7
   83170:	d1f4      	bne.n	8315c <ctrl_usart_out+0xc>
    if (driver->usart_id == 0) {
   83172:	4b2f      	ldr	r3, [pc, #188]	; (83230 <ctrl_usart_out+0xe0>)
        buf2word(baud, udd_g_ctrlreq.payload);
   83174:	68a1      	ldr	r1, [r4, #8]
    if (driver->usart_id == 0) {
   83176:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
        buf2word(baud, udd_g_ctrlreq.payload);
   8317a:	680d      	ldr	r5, [r1, #0]
    if (driver->usart_id == 0) {
   8317c:	2b00      	cmp	r3, #0
   8317e:	d03e      	beq.n	831fe <ctrl_usart_out+0xae>
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   83180:	7988      	ldrb	r0, [r1, #6]
   83182:	794b      	ldrb	r3, [r1, #5]
   83184:	790a      	ldrb	r2, [r1, #4]
   83186:	4c2b      	ldr	r4, [pc, #172]	; (83234 <ctrl_usart_out+0xe4>)
   83188:	9000      	str	r0, [sp, #0]
   8318a:	4629      	mov	r1, r5
   8318c:	4828      	ldr	r0, [pc, #160]	; (83230 <ctrl_usart_out+0xe0>)
   8318e:	47a0      	blx	r4
}
   83190:	b002      	add	sp, #8
   83192:	bd70      	pop	{r4, r5, r6, pc}
        usart_disable_rx(driver->usart);
   83194:	4c26      	ldr	r4, [pc, #152]	; (83230 <ctrl_usart_out+0xe0>)
   83196:	4b28      	ldr	r3, [pc, #160]	; (83238 <ctrl_usart_out+0xe8>)
   83198:	6820      	ldr	r0, [r4, #0]
   8319a:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   8319c:	6820      	ldr	r0, [r4, #0]
   8319e:	4b27      	ldr	r3, [pc, #156]	; (8323c <ctrl_usart_out+0xec>)
   831a0:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   831a2:	2103      	movs	r1, #3
   831a4:	6820      	ldr	r0, [r4, #0]
   831a6:	4b26      	ldr	r3, [pc, #152]	; (83240 <ctrl_usart_out+0xf0>)
}
   831a8:	b002      	add	sp, #8
   831aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   831ae:	4718      	bx	r3
    if (driver->usart_id == 0) {
   831b0:	4c1f      	ldr	r4, [pc, #124]	; (83230 <ctrl_usart_out+0xe0>)
   831b2:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
   831b6:	b163      	cbz	r3, 831d2 <ctrl_usart_out+0x82>
        usart_enable_rx(driver->usart);
   831b8:	6820      	ldr	r0, [r4, #0]
   831ba:	4b22      	ldr	r3, [pc, #136]	; (83244 <ctrl_usart_out+0xf4>)
   831bc:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   831be:	6820      	ldr	r0, [r4, #0]
   831c0:	4b21      	ldr	r3, [pc, #132]	; (83248 <ctrl_usart_out+0xf8>)
   831c2:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   831c4:	2101      	movs	r1, #1
   831c6:	6820      	ldr	r0, [r4, #0]
   831c8:	4b20      	ldr	r3, [pc, #128]	; (8324c <ctrl_usart_out+0xfc>)
}
   831ca:	b002      	add	sp, #8
   831cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   831d0:	4718      	bx	r3
   831d2:	4b1f      	ldr	r3, [pc, #124]	; (83250 <ctrl_usart_out+0x100>)
   831d4:	200d      	movs	r0, #13
   831d6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   831d8:	4d1e      	ldr	r5, [pc, #120]	; (83254 <ctrl_usart_out+0x104>)
   831da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   831de:	2013      	movs	r0, #19
   831e0:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   831e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   831e6:	2012      	movs	r0, #18
   831e8:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   831ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   831ee:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   831f0:	4b19      	ldr	r3, [pc, #100]	; (83258 <ctrl_usart_out+0x108>)
   831f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   831f6:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   831fa:	601a      	str	r2, [r3, #0]
}
   831fc:	e7dc      	b.n	831b8 <ctrl_usart_out+0x68>
   831fe:	4b14      	ldr	r3, [pc, #80]	; (83250 <ctrl_usart_out+0x100>)
   83200:	200d      	movs	r0, #13
   83202:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83204:	4e13      	ldr	r6, [pc, #76]	; (83254 <ctrl_usart_out+0x104>)
   83206:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8320a:	2013      	movs	r0, #19
   8320c:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8320e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83212:	2012      	movs	r0, #18
   83214:	47b0      	blx	r6
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8321a:	2030      	movs	r0, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8321c:	4b0e      	ldr	r3, [pc, #56]	; (83258 <ctrl_usart_out+0x108>)
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   8321e:	68a1      	ldr	r1, [r4, #8]
   83220:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83224:	f883 030d 	strb.w	r0, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83228:	601a      	str	r2, [r3, #0]
}
   8322a:	e7a9      	b.n	83180 <ctrl_usart_out+0x30>
   8322c:	2000200c 	.word	0x2000200c
   83230:	2000065c 	.word	0x2000065c
   83234:	0008304d 	.word	0x0008304d
   83238:	000841cd 	.word	0x000841cd
   8323c:	000841bd 	.word	0x000841bd
   83240:	000841d9 	.word	0x000841d9
   83244:	000841c5 	.word	0x000841c5
   83248:	000841b5 	.word	0x000841b5
   8324c:	000841d5 	.word	0x000841d5
   83250:	00085b7d 	.word	0x00085b7d
   83254:	00085d79 	.word	0x00085d79
   83258:	e000e100 	.word	0xe000e100

0008325c <ctrl_usart_cb>:
	ctrl_usart_out();
   8325c:	4b00      	ldr	r3, [pc, #0]	; (83260 <ctrl_usart_cb+0x4>)
   8325e:	4718      	bx	r3
   83260:	00083151 	.word	0x00083151

00083264 <usart_driver_putchar>:
{
   83264:	b570      	push	{r4, r5, r6, lr}
   83266:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   83268:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   8326c:	2200      	movs	r2, #0
   8326e:	4628      	mov	r0, r5
   83270:	4b0d      	ldr	r3, [pc, #52]	; (832a8 <usart_driver_putchar+0x44>)
   83272:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   83274:	6820      	ldr	r0, [r4, #0]
   83276:	4b0d      	ldr	r3, [pc, #52]	; (832ac <usart_driver_putchar+0x48>)
   83278:	4798      	blx	r3
   8327a:	0782      	lsls	r2, r0, #30
   8327c:	d500      	bpl.n	83280 <usart_driver_putchar+0x1c>
}
   8327e:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   83280:	4b0b      	ldr	r3, [pc, #44]	; (832b0 <usart_driver_putchar+0x4c>)
   83282:	6820      	ldr	r0, [r4, #0]
   83284:	4798      	blx	r3
   83286:	0783      	lsls	r3, r0, #30
   83288:	d405      	bmi.n	83296 <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   8328a:	6820      	ldr	r0, [r4, #0]
   8328c:	2102      	movs	r1, #2
}
   8328e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   83292:	4b08      	ldr	r3, [pc, #32]	; (832b4 <usart_driver_putchar+0x50>)
   83294:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   83296:	4628      	mov	r0, r5
   83298:	4b07      	ldr	r3, [pc, #28]	; (832b8 <usart_driver_putchar+0x54>)
   8329a:	6825      	ldr	r5, [r4, #0]
   8329c:	4798      	blx	r3
   8329e:	4b07      	ldr	r3, [pc, #28]	; (832bc <usart_driver_putchar+0x58>)
   832a0:	4601      	mov	r1, r0
   832a2:	4628      	mov	r0, r5
   832a4:	4798      	blx	r3
   832a6:	e7f0      	b.n	8328a <usart_driver_putchar+0x26>
   832a8:	00081d49 	.word	0x00081d49
   832ac:	000841dd 	.word	0x000841dd
   832b0:	000841e1 	.word	0x000841e1
   832b4:	000841d5 	.word	0x000841d5
   832b8:	00081d75 	.word	0x00081d75
   832bc:	000841ed 	.word	0x000841ed

000832c0 <ctrl_usart_cb_data>:
{		
   832c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   832c2:	4d0b      	ldr	r5, [pc, #44]	; (832f0 <ctrl_usart_cb_data+0x30>)
   832c4:	886c      	ldrh	r4, [r5, #2]
		if (port == 0) break;
   832c6:	0a24      	lsrs	r4, r4, #8
   832c8:	d000      	beq.n	832cc <ctrl_usart_cb_data+0xc>
}
   832ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   832cc:	88eb      	ldrh	r3, [r5, #6]
   832ce:	89aa      	ldrh	r2, [r5, #12]
   832d0:	429a      	cmp	r2, r3
   832d2:	d3fa      	bcc.n	832ca <ctrl_usart_cb_data+0xa>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   832d4:	2b00      	cmp	r3, #0
   832d6:	d0f8      	beq.n	832ca <ctrl_usart_cb_data+0xa>
   832d8:	4f06      	ldr	r7, [pc, #24]	; (832f4 <ctrl_usart_cb_data+0x34>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   832da:	4e07      	ldr	r6, [pc, #28]	; (832f8 <ctrl_usart_cb_data+0x38>)
   832dc:	68ab      	ldr	r3, [r5, #8]
   832de:	4630      	mov	r0, r6
   832e0:	5d19      	ldrb	r1, [r3, r4]
   832e2:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   832e4:	88eb      	ldrh	r3, [r5, #6]
   832e6:	3401      	adds	r4, #1
   832e8:	42a3      	cmp	r3, r4
   832ea:	dcf7      	bgt.n	832dc <ctrl_usart_cb_data+0x1c>
}
   832ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   832ee:	bf00      	nop
   832f0:	2000200c 	.word	0x2000200c
   832f4:	00083265 	.word	0x00083265
   832f8:	2000065c 	.word	0x2000065c

000832fc <naeusart_register_handlers>:
{
   832fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83300:	2401      	movs	r4, #1
    if (driver->usart_id == 0) {
   83302:	4d14      	ldr	r5, [pc, #80]	; (83354 <naeusart_register_handlers+0x58>)
   83304:	4f14      	ldr	r7, [pc, #80]	; (83358 <naeusart_register_handlers+0x5c>)
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83306:	4e15      	ldr	r6, [pc, #84]	; (8335c <naeusart_register_handlers+0x60>)
		if (port == 0) break;
   83308:	2c01      	cmp	r4, #1
   8330a:	d009      	beq.n	83320 <naeusart_register_handlers+0x24>
	for (uint8_t i = 0; i < 4; i++) {
   8330c:	2c04      	cmp	r4, #4
   8330e:	d10a      	bne.n	83326 <naeusart_register_handlers+0x2a>
    naeusb_add_in_handler(usart_setup_in_received);
   83310:	4b13      	ldr	r3, [pc, #76]	; (83360 <naeusart_register_handlers+0x64>)
   83312:	4814      	ldr	r0, [pc, #80]	; (83364 <naeusart_register_handlers+0x68>)
   83314:	4798      	blx	r3
}
   83316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
   8331a:	4813      	ldr	r0, [pc, #76]	; (83368 <naeusart_register_handlers+0x6c>)
   8331c:	4b13      	ldr	r3, [pc, #76]	; (8336c <naeusart_register_handlers+0x70>)
   8331e:	4718      	bx	r3
    if (driver->usart_id == 0) {
   83320:	f8d5 3298 	ldr.w	r3, [r5, #664]	; 0x298
   83324:	b113      	cbz	r3, 8332c <naeusart_register_handlers+0x30>
   83326:	3401      	adds	r4, #1
   83328:	b2e4      	uxtb	r4, r4
   8332a:	e7ed      	b.n	83308 <naeusart_register_handlers+0xc>
   8332c:	200d      	movs	r0, #13
   8332e:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   83330:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83334:	2013      	movs	r0, #19
   83336:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   83338:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8333c:	2012      	movs	r0, #18
   8333e:	47b0      	blx	r6
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83344:	2130      	movs	r1, #48	; 0x30
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83346:	4b0a      	ldr	r3, [pc, #40]	; (83370 <naeusart_register_handlers+0x74>)
   83348:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8334c:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83350:	601a      	str	r2, [r3, #0]
}
   83352:	e7e8      	b.n	83326 <naeusart_register_handlers+0x2a>
   83354:	2000065c 	.word	0x2000065c
   83358:	00085b7d 	.word	0x00085b7d
   8335c:	00085d79 	.word	0x00085d79
   83360:	0008263d 	.word	0x0008263d
   83364:	000833ad 	.word	0x000833ad
   83368:	00082c7d 	.word	0x00082c7d
   8336c:	00082665 	.word	0x00082665
   83370:	e000e100 	.word	0xe000e100

00083374 <naeusb_cdc_settings_in>:
    udd_g_ctrlreq.payload = respbuf;
   83374:	4a0a      	ldr	r2, [pc, #40]	; (833a0 <naeusb_cdc_settings_in+0x2c>)
		respbuf[i] = 0;
   83376:	f04f 0c00 	mov.w	ip, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8337a:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
   8337c:	4b09      	ldr	r3, [pc, #36]	; (833a4 <naeusb_cdc_settings_in+0x30>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8337e:	2904      	cmp	r1, #4
   83380:	bf28      	it	cs
   83382:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
   83384:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
   83388:	4b07      	ldr	r3, [pc, #28]	; (833a8 <naeusb_cdc_settings_in+0x34>)
   8338a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   8338e:	7018      	strb	r0, [r3, #0]
    udd_g_ctrlreq.payload = respbuf;
   83390:	6093      	str	r3, [r2, #8]
}
   83392:	2001      	movs	r0, #1
		respbuf[i] = 0;
   83394:	f883 c001 	strb.w	ip, [r3, #1]
   83398:	f8a3 c002 	strh.w	ip, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8339c:	8191      	strh	r1, [r2, #12]
}
   8339e:	4770      	bx	lr
   833a0:	2000200c 	.word	0x2000200c
   833a4:	2000065c 	.word	0x2000065c
   833a8:	20001c70 	.word	0x20001c70

000833ac <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   833ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   833b0:	4d26      	ldr	r5, [pc, #152]	; (8344c <usart_setup_in_received+0xa0>)
   833b2:	786b      	ldrb	r3, [r5, #1]
   833b4:	3b1a      	subs	r3, #26
   833b6:	2b1b      	cmp	r3, #27
   833b8:	d812      	bhi.n	833e0 <usart_setup_in_received+0x34>
   833ba:	e8df f003 	tbb	[pc, r3]
   833be:	1c0e      	.short	0x1c0e
   833c0:	11111111 	.word	0x11111111
   833c4:	11112420 	.word	0x11112420
   833c8:	11111111 	.word	0x11111111
   833cc:	11111111 	.word	0x11111111
   833d0:	11111111 	.word	0x11111111
   833d4:	11112811 	.word	0x11112811
   833d8:	1411      	.short	0x1411
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   833da:	886c      	ldrh	r4, [r5, #2]
		if (port == 0) break;
   833dc:	0a24      	lsrs	r4, r4, #8
   833de:	d01a      	beq.n	83416 <usart_setup_in_received+0x6a>
		if (!driver) return false;
   833e0:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
   833e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   833e6:	88eb      	ldrh	r3, [r5, #6]
   833e8:	2b40      	cmp	r3, #64	; 0x40
   833ea:	d8f9      	bhi.n	833e0 <usart_setup_in_received+0x34>
            udd_g_ctrlreq.payload = spi1util_data_buffer;
   833ec:	4a18      	ldr	r2, [pc, #96]	; (83450 <usart_setup_in_received+0xa4>)
            return true;
   833ee:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = spi1util_data_buffer;
   833f0:	60aa      	str	r2, [r5, #8]
            udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   833f2:	81ab      	strh	r3, [r5, #12]
            return true;
   833f4:	e7f5      	b.n	833e2 <usart_setup_in_received+0x36>
        return ctrl_usart_in();
   833f6:	4b17      	ldr	r3, [pc, #92]	; (83454 <usart_setup_in_received+0xa8>)
}
   833f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
   833fc:	4718      	bx	r3
        return XPROGProtocol_Command();
   833fe:	4b16      	ldr	r3, [pc, #88]	; (83458 <usart_setup_in_received+0xac>)
}
   83400:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return XPROGProtocol_Command();
   83404:	4718      	bx	r3
        return V2Protocol_ProcessCommand();
   83406:	4b15      	ldr	r3, [pc, #84]	; (8345c <usart_setup_in_received+0xb0>)
}
   83408:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return V2Protocol_ProcessCommand();
   8340c:	4718      	bx	r3
        return naeusb_cdc_settings_in();
   8340e:	4b14      	ldr	r3, [pc, #80]	; (83460 <usart_setup_in_received+0xb4>)
}
   83410:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
   83414:	4718      	bx	r3
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83416:	88eb      	ldrh	r3, [r5, #6]
   83418:	b19b      	cbz	r3, 83442 <usart_setup_in_received+0x96>
   8341a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 83464 <usart_setup_in_received+0xb8>
   8341e:	4f12      	ldr	r7, [pc, #72]	; (83468 <usart_setup_in_received+0xbc>)
   83420:	464e      	mov	r6, r9
    return get_from_circ_buf(&driver->rxbuf);
   83422:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8346c <usart_setup_in_received+0xc0>
   83426:	4640      	mov	r0, r8
   83428:	47b8      	blx	r7
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8342a:	88eb      	ldrh	r3, [r5, #6]
   8342c:	3401      	adds	r4, #1
   8342e:	42a3      	cmp	r3, r4
            respbuf[cnt] = usart_driver_getchar(driver);
   83430:	f806 0b01 	strb.w	r0, [r6], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83434:	d8f7      	bhi.n	83426 <usart_setup_in_received+0x7a>
        return true;
   83436:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
   83438:	f8c5 9008 	str.w	r9, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
   8343c:	81ac      	strh	r4, [r5, #12]
}
   8343e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83442:	461c      	mov	r4, r3
   83444:	f8df 901c 	ldr.w	r9, [pc, #28]	; 83464 <usart_setup_in_received+0xb8>
   83448:	e7f5      	b.n	83436 <usart_setup_in_received+0x8a>
   8344a:	bf00      	nop
   8344c:	2000200c 	.word	0x2000200c
   83450:	20001cc0 	.word	0x20001cc0
   83454:	00082fe9 	.word	0x00082fe9
   83458:	00080cb5 	.word	0x00080cb5
   8345c:	0008045d 	.word	0x0008045d
   83460:	00083375 	.word	0x00083375
   83464:	20001c70 	.word	0x20001c70
   83468:	00081d75 	.word	0x00081d75
   8346c:	20000678 	.word	0x20000678

00083470 <cdc_enable>:
		if (port == 0) break;
   83470:	b940      	cbnz	r0, 83484 <cdc_enable+0x14>
    driver->cdc_enabled = 1;
   83472:	4a08      	ldr	r2, [pc, #32]	; (83494 <cdc_enable+0x24>)
}
   83474:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
   83476:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8347a:	f043 0304 	orr.w	r3, r3, #4
   8347e:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
}
   83482:	4770      	bx	lr
    driver->cdc_enabled = 1;
   83484:	2200      	movs	r2, #0
   83486:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8348a:	f362 0382 	bfi	r3, r2, #2, #1
   8348e:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   83492:	deff      	udf	#255	; 0xff
   83494:	2000065c 	.word	0x2000065c

00083498 <cdc_disable>:
		if (port == 0) break;
   83498:	b948      	cbnz	r0, 834ae <cdc_disable+0x16>
    driver->cdc_enabled = 0;
   8349a:	4b09      	ldr	r3, [pc, #36]	; (834c0 <cdc_disable+0x28>)
    NAEUSB_CDC_IS_RUNNING = false;
   8349c:	4909      	ldr	r1, [pc, #36]	; (834c4 <cdc_disable+0x2c>)
    driver->cdc_enabled = 0;
   8349e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   834a2:	7008      	strb	r0, [r1, #0]
    driver->cdc_enabled = 0;
   834a4:	f360 0282 	bfi	r2, r0, #2, #1
   834a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   834ac:	4770      	bx	lr
    driver->cdc_enabled = 0;
   834ae:	2200      	movs	r2, #0
   834b0:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   834b4:	f362 0382 	bfi	r3, r2, #2, #1
   834b8:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   834bc:	deff      	udf	#255	; 0xff
   834be:	bf00      	nop
   834c0:	2000065c 	.word	0x2000065c
   834c4:	20001cbc 	.word	0x20001cbc

000834c8 <my_callback_rx_notify>:
		if (port == 0) break;
   834c8:	bb80      	cbnz	r0, 8352c <my_callback_rx_notify+0x64>
    NAEUSB_CDC_IS_RUNNING = true;
   834ca:	2101      	movs	r1, #1
{
   834cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (driver->cdc_enabled && driver->enabled) {
   834d0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8353c <my_callback_rx_notify+0x74>
    NAEUSB_CDC_IS_RUNNING = true;
   834d4:	4a1a      	ldr	r2, [pc, #104]	; (83540 <my_callback_rx_notify+0x78>)
    if (driver->cdc_enabled && driver->enabled) {
   834d6:	f898 329c 	ldrb.w	r3, [r8, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
   834da:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   834dc:	f003 0306 	and.w	r3, r3, #6
   834e0:	2b06      	cmp	r3, #6
   834e2:	d001      	beq.n	834e8 <my_callback_rx_notify+0x20>
}
   834e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   834e8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 83544 <my_callback_rx_notify+0x7c>
   834ec:	47c8      	blx	r9
        while (num_char > 0) {
   834ee:	4605      	mov	r5, r0
   834f0:	2800      	cmp	r0, #0
   834f2:	d0f7      	beq.n	834e4 <my_callback_rx_notify+0x1c>
   834f4:	f8df a050 	ldr.w	sl, [pc, #80]	; 83548 <my_callback_rx_notify+0x80>
   834f8:	4e14      	ldr	r6, [pc, #80]	; (8354c <my_callback_rx_notify+0x84>)
   834fa:	4f15      	ldr	r7, [pc, #84]	; (83550 <my_callback_rx_notify+0x88>)
            num_char = (num_char > 512) ? 512 : num_char;
   834fc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   83500:	bf28      	it	cs
   83502:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   83506:	2000      	movs	r0, #0
   83508:	4631      	mov	r1, r6
   8350a:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
   8350c:	4604      	mov	r4, r0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8350e:	47d0      	blx	sl
                usart_driver_putchar(driver, uart_buf[i]);
   83510:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
   83512:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
   83514:	4640      	mov	r0, r8
            for (uint16_t i = 0; i < num_char; i++) {
   83516:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
   83518:	47b8      	blx	r7
            for (uint16_t i = 0; i < num_char; i++) {
   8351a:	42ac      	cmp	r4, r5
   8351c:	d3f8      	bcc.n	83510 <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   8351e:	2000      	movs	r0, #0
   83520:	47c8      	blx	r9
        while (num_char > 0) {
   83522:	4605      	mov	r5, r0
   83524:	2800      	cmp	r0, #0
   83526:	d1e9      	bne.n	834fc <my_callback_rx_notify+0x34>
}
   83528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    NAEUSB_CDC_IS_RUNNING = true;
   8352c:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   8352e:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
   83530:	4a03      	ldr	r2, [pc, #12]	; (83540 <my_callback_rx_notify+0x78>)
   83532:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   83534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   83538:	deff      	udf	#255	; 0xff
   8353a:	bf00      	nop
   8353c:	2000065c 	.word	0x2000065c
   83540:	20001cbc 	.word	0x20001cbc
   83544:	000865a9 	.word	0x000865a9
   83548:	000865f1 	.word	0x000865f1
   8354c:	20001d00 	.word	0x20001d00
   83550:	00083265 	.word	0x00083265

00083554 <my_callback_config>:
		if (port == 0) break;
   83554:	2800      	cmp	r0, #0
   83556:	d128      	bne.n	835aa <my_callback_config+0x56>
{
   83558:	b530      	push	{r4, r5, lr}
    if (driver->cdc_enabled) {
   8355a:	4c16      	ldr	r4, [pc, #88]	; (835b4 <my_callback_config+0x60>)
{
   8355c:	b083      	sub	sp, #12
    if (driver->cdc_enabled) {
   8355e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   83562:	075a      	lsls	r2, r3, #29
   83564:	d502      	bpl.n	8356c <my_callback_config+0x18>
        switch(cfg->bParityType) {
   83566:	794b      	ldrb	r3, [r1, #5]
   83568:	2b04      	cmp	r3, #4
   8356a:	d901      	bls.n	83570 <my_callback_config+0x1c>
}
   8356c:	b003      	add	sp, #12
   8356e:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   83570:	4603      	mov	r3, r0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   83572:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   83574:	4d10      	ldr	r5, [pc, #64]	; (835b8 <my_callback_config+0x64>)
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   83576:	1f50      	subs	r0, r2, #5
   83578:	0180      	lsls	r0, r0, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8357a:	b2c0      	uxtb	r0, r0
   8357c:	461a      	mov	r2, r3
   8357e:	6809      	ldr	r1, [r1, #0]
   83580:	9000      	str	r0, [sp, #0]
   83582:	4620      	mov	r0, r4
   83584:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
   83586:	4b0d      	ldr	r3, [pc, #52]	; (835bc <my_callback_config+0x68>)
   83588:	6820      	ldr	r0, [r4, #0]
   8358a:	4798      	blx	r3
   8358c:	07c3      	lsls	r3, r0, #31
   8358e:	d4ed      	bmi.n	8356c <my_callback_config+0x18>
			usart_enable_rx(driver->usart);
   83590:	6820      	ldr	r0, [r4, #0]
   83592:	4b0b      	ldr	r3, [pc, #44]	; (835c0 <my_callback_config+0x6c>)
   83594:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   83596:	6820      	ldr	r0, [r4, #0]
   83598:	4b0a      	ldr	r3, [pc, #40]	; (835c4 <my_callback_config+0x70>)
   8359a:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   8359c:	2101      	movs	r1, #1
   8359e:	6820      	ldr	r0, [r4, #0]
   835a0:	4b09      	ldr	r3, [pc, #36]	; (835c8 <my_callback_config+0x74>)
}
   835a2:	b003      	add	sp, #12
   835a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   835a8:	4718      	bx	r3
    if (driver->cdc_enabled) {
   835aa:	2300      	movs	r3, #0
   835ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   835b0:	deff      	udf	#255	; 0xff
   835b2:	bf00      	nop
   835b4:	2000065c 	.word	0x2000065c
   835b8:	0008304d 	.word	0x0008304d
   835bc:	000841dd 	.word	0x000841dd
   835c0:	000841c5 	.word	0x000841c5
   835c4:	000841b5 	.word	0x000841b5
   835c8:	000841d5 	.word	0x000841d5

000835cc <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   835cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   835d0:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   835d2:	4d13      	ldr	r5, [pc, #76]	; (83620 <cdc_send_to_pc+0x54>)
   835d4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 83624 <cdc_send_to_pc+0x58>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   835d8:	4f13      	ldr	r7, [pc, #76]	; (83628 <cdc_send_to_pc+0x5c>)
   835da:	4e14      	ldr	r6, [pc, #80]	; (8362c <cdc_send_to_pc+0x60>)
		if (port == 0) break;
   835dc:	2c01      	cmp	r4, #1
   835de:	d003      	beq.n	835e8 <cdc_send_to_pc+0x1c>
	for (uint8_t i = 0; i < 4; i++) {
   835e0:	2c04      	cmp	r4, #4
   835e2:	d107      	bne.n	835f4 <cdc_send_to_pc+0x28>
			}
		}

	}
	
}
   835e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   835e8:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
   835ec:	f003 0306 	and.w	r3, r3, #6
   835f0:	2b06      	cmp	r3, #6
   835f2:	d002      	beq.n	835fa <cdc_send_to_pc+0x2e>
   835f4:	3401      	adds	r4, #1
   835f6:	b2e4      	uxtb	r4, r4
   835f8:	e7f0      	b.n	835dc <cdc_send_to_pc+0x10>
   835fa:	2000      	movs	r0, #0
   835fc:	47c0      	blx	r8
   835fe:	2800      	cmp	r0, #0
   83600:	d0f8      	beq.n	835f4 <cdc_send_to_pc+0x28>
   83602:	f8df a02c 	ldr.w	sl, [pc, #44]	; 83630 <cdc_send_to_pc+0x64>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   83606:	f8df 902c 	ldr.w	r9, [pc, #44]	; 83634 <cdc_send_to_pc+0x68>
   8360a:	e004      	b.n	83616 <cdc_send_to_pc+0x4a>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   8360c:	4648      	mov	r0, r9
   8360e:	47b8      	blx	r7
   83610:	4601      	mov	r1, r0
   83612:	2000      	movs	r0, #0
   83614:	47b0      	blx	r6
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   83616:	4648      	mov	r0, r9
   83618:	47d0      	blx	sl
   8361a:	2800      	cmp	r0, #0
   8361c:	d1f6      	bne.n	8360c <cdc_send_to_pc+0x40>
   8361e:	e7e9      	b.n	835f4 <cdc_send_to_pc+0x28>
   83620:	2000065c 	.word	0x2000065c
   83624:	000866a1 	.word	0x000866a1
   83628:	00081d75 	.word	0x00081d75
   8362c:	00086711 	.word	0x00086711
   83630:	00081d95 	.word	0x00081d95
   83634:	20000820 	.word	0x20000820

00083638 <mpsse_setup_in_received>:
}

/* Handle ctrl transfer on interface 1/2. Mostly used for debug purposes */
bool mpsse_setup_in_received(void)
{
    if (udd_g_ctrlreq.req.bRequest == REQ_SAM_STATUS) {
   83638:	4b39      	ldr	r3, [pc, #228]	; (83720 <mpsse_setup_in_received+0xe8>)
   8363a:	785a      	ldrb	r2, [r3, #1]
   8363c:	2a22      	cmp	r2, #34	; 0x22
   8363e:	d015      	beq.n	8366c <mpsse_setup_in_received+0x34>
            udd_g_ctrlreq.payload_size = 1;
            return true;
        }
    }
    // don't handle if not sent to our interface
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   83640:	8898      	ldrh	r0, [r3, #4]
   83642:	2801      	cmp	r0, #1
   83644:	d110      	bne.n	83668 <mpsse_setup_in_received+0x30>
        return false;
    }

    // For debug, reads a bunch of internal variables back. TODO: change to using a separate buf
    if (udd_g_ctrlreq.req.bRequest == 0xA0) {
   83646:	2aa0      	cmp	r2, #160	; 0xa0
   83648:	d025      	beq.n	83696 <mpsse_setup_in_received+0x5e>
        return true;
    }

    // Debug commands for reading from internal buffers
    uint16_t wValue = udd_g_ctrlreq.req.wValue;
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   8364a:	2aa1      	cmp	r2, #161	; 0xa1
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
   8364c:	8859      	ldrh	r1, [r3, #2]
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   8364e:	d017      	beq.n	83680 <mpsse_setup_in_received+0x48>
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   83650:	2aa2      	cmp	r2, #162	; 0xa2
   83652:	d11f      	bne.n	83694 <mpsse_setup_in_received+0x5c>
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
   83654:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   83658:	4a32      	ldr	r2, [pc, #200]	; (83724 <mpsse_setup_in_received+0xec>)
        udd_g_ctrlreq.payload_size = 256;
   8365a:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   8365e:	440a      	add	r2, r1
        addr &= ~(0b11);
   83660:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
   83664:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 256;
   83666:	4770      	bx	lr
        return false;
   83668:	2000      	movs	r0, #0
   8366a:	4770      	bx	lr
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
   8366c:	789a      	ldrb	r2, [r3, #2]
   8366e:	2a42      	cmp	r2, #66	; 0x42
   83670:	d04c      	beq.n	8370c <mpsse_setup_in_received+0xd4>
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   83672:	8898      	ldrh	r0, [r3, #4]
   83674:	f1a0 0001 	sub.w	r0, r0, #1
   83678:	fab0 f080 	clz	r0, r0
   8367c:	0940      	lsrs	r0, r0, #5
   8367e:	4770      	bx	lr
        udd_g_ctrlreq.payload_size = 256;
   83680:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   83684:	4a28      	ldr	r2, [pc, #160]	; (83728 <mpsse_setup_in_received+0xf0>)
        udd_g_ctrlreq.payload_size = 256;
   83686:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   8368a:	440a      	add	r2, r1
        addr &= ~(0b11);
   8368c:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
   83690:	609a      	str	r2, [r3, #8]
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   83692:	4770      	bx	lr
    }
    return true;
}
   83694:	4770      	bx	lr
{
   83696:	b500      	push	{lr}
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
   83698:	4924      	ldr	r1, [pc, #144]	; (8372c <mpsse_setup_in_received+0xf4>)
   8369a:	4a23      	ldr	r2, [pc, #140]	; (83728 <mpsse_setup_in_received+0xf0>)
   8369c:	f891 e000 	ldrb.w	lr, [r1]
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
   836a0:	f9b1 c001 	ldrsh.w	ip, [r1, #1]
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
   836a4:	f882 e000 	strb.w	lr, [r2]
        udd_g_ctrlreq.payload_size = 11;
   836a8:	f04f 0e0b 	mov.w	lr, #11
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
   836ac:	fa5f fc8c 	uxtb.w	ip, ip
   836b0:	f882 c001 	strb.w	ip, [r2, #1]
        MPSSE_RX_BUFFER[2] = mpsse_state.tx_bytes & 0xFF;
   836b4:	f9b1 c003 	ldrsh.w	ip, [r1, #3]
   836b8:	fa5f fc8c 	uxtb.w	ip, ip
   836bc:	f882 c002 	strb.w	ip, [r2, #2]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
   836c0:	f9b1 c005 	ldrsh.w	ip, [r1, #5]
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
   836c4:	609a      	str	r2, [r3, #8]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
   836c6:	fa5f fc8c 	uxtb.w	ip, ip
   836ca:	f882 c003 	strb.w	ip, [r2, #3]
        MPSSE_RX_BUFFER[4] = mpsse_state.txn_len & 0xFF;
   836ce:	f9b1 c007 	ldrsh.w	ip, [r1, #7]
   836d2:	fa5f fc8c 	uxtb.w	ip, ip
   836d6:	f882 c004 	strb.w	ip, [r2, #4]
        MPSSE_RX_BUFFER[5] = mpsse_state.txn_lock;
   836da:	f891 c00a 	ldrb.w	ip, [r1, #10]
   836de:	f882 c005 	strb.w	ip, [r2, #5]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
   836e2:	f8d1 c00b 	ldr.w	ip, [r1, #11]
        udd_g_ctrlreq.payload_size = 11;
   836e6:	f8a3 e00c 	strh.w	lr, [r3, #12]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
   836ea:	fa5f f38c 	uxtb.w	r3, ip
   836ee:	7193      	strb	r3, [r2, #6]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
   836f0:	7a49      	ldrb	r1, [r1, #9]
        MPSSE_RX_BUFFER[7] = (mpsse_state.n_processed_cmds >> 8) & 0xFF;
   836f2:	f3cc 2307 	ubfx	r3, ip, #8, #8
   836f6:	71d3      	strb	r3, [r2, #7]
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
   836f8:	f3cc 4307 	ubfx	r3, ip, #16, #8
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
   836fc:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
   83700:	7213      	strb	r3, [r2, #8]
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
   83702:	f882 c009 	strb.w	ip, [r2, #9]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
   83706:	7291      	strb	r1, [r2, #10]
}
   83708:	f85d fb04 	ldr.w	pc, [sp], #4
            udd_g_ctrlreq.payload_size = 1;
   8370c:	2201      	movs	r2, #1
            respbuf[0] = mpsse_state.enabled;
   8370e:	4807      	ldr	r0, [pc, #28]	; (8372c <mpsse_setup_in_received+0xf4>)
   83710:	4907      	ldr	r1, [pc, #28]	; (83730 <mpsse_setup_in_received+0xf8>)
   83712:	7c80      	ldrb	r0, [r0, #18]
            udd_g_ctrlreq.payload = respbuf;
   83714:	6099      	str	r1, [r3, #8]
            respbuf[0] = mpsse_state.enabled;
   83716:	7008      	strb	r0, [r1, #0]
            udd_g_ctrlreq.payload_size = 1;
   83718:	819a      	strh	r2, [r3, #12]
            return true;
   8371a:	4610      	mov	r0, r2
   8371c:	4770      	bx	lr
   8371e:	bf00      	nop
   83720:	2000200c 	.word	0x2000200c
   83724:	20080040 	.word	0x20080040
   83728:	20080000 	.word	0x20080000
   8372c:	200008fc 	.word	0x200008fc
   83730:	20001c70 	.word	0x20001c70

00083734 <mpsse_setup_out_received>:
{
   83734:	b570      	push	{r4, r5, r6, lr}
    uint8_t wValue = udd_g_ctrlreq.req.wValue & 0xFF;
   83736:	4a2c      	ldr	r2, [pc, #176]	; (837e8 <mpsse_setup_out_received+0xb4>)
{
   83738:	b082      	sub	sp, #8
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   8373a:	7893      	ldrb	r3, [r2, #2]
   8373c:	2b42      	cmp	r3, #66	; 0x42
   8373e:	d00c      	beq.n	8375a <mpsse_setup_out_received+0x26>
    if ((udd_g_ctrlreq.req.wIndex != 0x01) && (udd_g_ctrlreq.req.wIndex != 0x02)) {
   83740:	8893      	ldrh	r3, [r2, #4]
   83742:	3b01      	subs	r3, #1
   83744:	b29b      	uxth	r3, r3
   83746:	2b01      	cmp	r3, #1
   83748:	d804      	bhi.n	83754 <mpsse_setup_out_received+0x20>
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
   8374a:	7855      	ldrb	r5, [r2, #1]
   8374c:	b1a5      	cbz	r5, 83778 <mpsse_setup_out_received+0x44>
    return true;
   8374e:	2001      	movs	r0, #1
}
   83750:	b002      	add	sp, #8
   83752:	bd70      	pop	{r4, r5, r6, pc}
        return false;
   83754:	2000      	movs	r0, #0
}
   83756:	b002      	add	sp, #8
   83758:	bd70      	pop	{r4, r5, r6, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   8375a:	7853      	ldrb	r3, [r2, #1]
   8375c:	2b22      	cmp	r3, #34	; 0x22
   8375e:	d1ef      	bne.n	83740 <mpsse_setup_out_received+0xc>
        mpsse_state.enabled = 1;
   83760:	2401      	movs	r4, #1
        udc_stop();
   83762:	4b22      	ldr	r3, [pc, #136]	; (837ec <mpsse_setup_out_received+0xb8>)
   83764:	4798      	blx	r3
        switch_configurations(); 
   83766:	4b22      	ldr	r3, [pc, #136]	; (837f0 <mpsse_setup_out_received+0xbc>)
   83768:	4798      	blx	r3
        mpsse_state.enabled = 1;
   8376a:	4b22      	ldr	r3, [pc, #136]	; (837f4 <mpsse_setup_out_received+0xc0>)
        udc_start();
   8376c:	4a22      	ldr	r2, [pc, #136]	; (837f8 <mpsse_setup_out_received+0xc4>)
        mpsse_state.enabled = 1;
   8376e:	749c      	strb	r4, [r3, #18]
        mpsse_state.txn_lock = 1;
   83770:	729c      	strb	r4, [r3, #10]
        udc_start();
   83772:	4790      	blx	r2
        return true;
   83774:	4620      	mov	r0, r4
   83776:	e7eb      	b.n	83750 <mpsse_setup_out_received+0x1c>
        memset(MPSSE_RX_BUFFER, 0, sizeof(MPSSE_RX_BUFFER));
   83778:	4c20      	ldr	r4, [pc, #128]	; (837fc <mpsse_setup_out_received+0xc8>)
   8377a:	4629      	mov	r1, r5
   8377c:	2240      	movs	r2, #64	; 0x40
   8377e:	4820      	ldr	r0, [pc, #128]	; (83800 <mpsse_setup_out_received+0xcc>)
   83780:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   83782:	4629      	mov	r1, r5
   83784:	2240      	movs	r2, #64	; 0x40
   83786:	481f      	ldr	r0, [pc, #124]	; (83804 <mpsse_setup_out_received+0xd0>)
   83788:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER_BAK, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   8378a:	2240      	movs	r2, #64	; 0x40
   8378c:	4629      	mov	r1, r5
   8378e:	481e      	ldr	r0, [pc, #120]	; (83808 <mpsse_setup_out_received+0xd4>)
   83790:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
   83792:	4c1e      	ldr	r4, [pc, #120]	; (8380c <mpsse_setup_out_received+0xd8>)
   83794:	2006      	movs	r0, #6
   83796:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_IN);
   83798:	2085      	movs	r0, #133	; 0x85
   8379a:	47a0      	blx	r4
        mpsse_state.enabled = 1;
   8379c:	2401      	movs	r4, #1
        gpio_configure_pin(MPSSE_DIN_GPIO, PIO_DEFAULT | PIO_TYPE_PIO_INPUT);
   8379e:	4e1c      	ldr	r6, [pc, #112]	; (83810 <mpsse_setup_out_received+0xdc>)
   837a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   837a4:	200d      	movs	r0, #13
   837a6:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_DOUT_GPIO, PIO_OUTPUT_0);
   837a8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   837ac:	200e      	movs	r0, #14
   837ae:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_SCK_GPIO, PIO_OUTPUT_0);
   837b0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   837b4:	200f      	movs	r0, #15
   837b6:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_TMS_GPIO, PIO_OUTPUT_0);
   837b8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   837bc:	2014      	movs	r0, #20
   837be:	47b0      	blx	r6
        mpsse_state.enabled = 1;
   837c0:	4a0c      	ldr	r2, [pc, #48]	; (837f4 <mpsse_setup_out_received+0xc0>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   837c2:	4914      	ldr	r1, [pc, #80]	; (83814 <mpsse_setup_out_received+0xe0>)
   837c4:	2340      	movs	r3, #64	; 0x40
   837c6:	9100      	str	r1, [sp, #0]
   837c8:	2006      	movs	r0, #6
   837ca:	4629      	mov	r1, r5
        mpsse_state.n_processed_cmds = 0;
   837cc:	72d5      	strb	r5, [r2, #11]
   837ce:	7315      	strb	r5, [r2, #12]
   837d0:	7355      	strb	r5, [r2, #13]
   837d2:	7395      	strb	r5, [r2, #14]
        mpsse_state.swd_mode = 0;
   837d4:	7415      	strb	r5, [r2, #16]
        mpsse_state.enabled = 1;
   837d6:	7494      	strb	r4, [r2, #18]
        mpsse_state.txn_lock = 1;
   837d8:	7294      	strb	r4, [r2, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   837da:	4d0f      	ldr	r5, [pc, #60]	; (83818 <mpsse_setup_out_received+0xe4>)
   837dc:	4a09      	ldr	r2, [pc, #36]	; (83804 <mpsse_setup_out_received+0xd0>)
   837de:	47a8      	blx	r5
   837e0:	4620      	mov	r0, r4
}
   837e2:	b002      	add	sp, #8
   837e4:	bd70      	pop	{r4, r5, r6, pc}
   837e6:	bf00      	nop
   837e8:	2000200c 	.word	0x2000200c
   837ec:	00081f39 	.word	0x00081f39
   837f0:	00083fe5 	.word	0x00083fe5
   837f4:	200008fc 	.word	0x200008fc
   837f8:	00081f31 	.word	0x00081f31
   837fc:	00086e51 	.word	0x00086e51
   83800:	20080000 	.word	0x20080000
   83804:	20080040 	.word	0x20080040
   83808:	20080090 	.word	0x20080090
   8380c:	00085619 	.word	0x00085619
   83810:	00085d79 	.word	0x00085d79
   83814:	0008381d 	.word	0x0008381d
   83818:	000852f1 	.word	0x000852f1

0008381c <mpsse_vendor_bulk_out_received>:
}


void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8381c:	b570      	push	{r4, r5, r6, lr}
    // we just receive stuff here, then handle in main()
    if (UDD_EP_TRANSFER_OK != status) {
        // restart
        if (mpsse_state.tx_req) {
   8381e:	4c25      	ldr	r4, [pc, #148]	; (838b4 <mpsse_vendor_bulk_out_received+0x98>)
{
   83820:	b082      	sub	sp, #8
        if (mpsse_state.tx_req) {
   83822:	7be3      	ldrb	r3, [r4, #15]
    if (UDD_EP_TRANSFER_OK != status) {
   83824:	bb38      	cbnz	r0, 83876 <mpsse_vendor_bulk_out_received+0x5a>
            sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        mpsse_state.txn_lock = 1;
        return;
    }

    if (mpsse_state.tx_req) {
   83826:	b1eb      	cbz	r3, 83864 <mpsse_vendor_bulk_out_received+0x48>
        // we read into the backup buffer, move the data over to the usual one
        // extra room in the normal buffer so we always read the same amount

        // reading unususal sizes breaks USB, so don't change this
        for (uint16_t i = 0; i < nb_transfered; i++) {
   83828:	2900      	cmp	r1, #0
   8382a:	d039      	beq.n	838a0 <mpsse_vendor_bulk_out_received+0x84>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   8382c:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
   83830:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
   83834:	4d20      	ldr	r5, [pc, #128]	; (838b8 <mpsse_vendor_bulk_out_received+0x9c>)
   83836:	ebac 0c03 	sub.w	ip, ip, r3
   8383a:	fa1f fe8c 	uxth.w	lr, ip
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   8383e:	fa0f fc8c 	sxth.w	ip, ip
   83842:	182b      	adds	r3, r5, r0
   83844:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
   83848:	eb00 030c 	add.w	r3, r0, ip
        for (uint16_t i = 0; i < nb_transfered; i++) {
   8384c:	3001      	adds	r0, #1
   8384e:	b280      	uxth	r0, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   83850:	b2d2      	uxtb	r2, r2
   83852:	442b      	add	r3, r5
        for (uint16_t i = 0; i < nb_transfered; i++) {
   83854:	4281      	cmp	r1, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   83856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        for (uint16_t i = 0; i < nb_transfered; i++) {
   8385a:	d8f2      	bhi.n	83842 <mpsse_vendor_bulk_out_received+0x26>
        }
        mpsse_state.tx_bytes = mpsse_tx_buffer_remaining() + nb_transfered;
   8385c:	4471      	add	r1, lr
   8385e:	f8a4 1003 	strh.w	r1, [r4, #3]
   83862:	e001      	b.n	83868 <mpsse_vendor_bulk_out_received+0x4c>
    } else {
        mpsse_state.tx_bytes = nb_transfered;
   83864:	f8a4 1003 	strh.w	r1, [r4, #3]
    }
    mpsse_state.tx_req = 0;
   83868:	2300      	movs	r3, #0
   8386a:	73e3      	strb	r3, [r4, #15]
    mpsse_state.tx_idx = 0;
   8386c:	7063      	strb	r3, [r4, #1]
   8386e:	70a3      	strb	r3, [r4, #2]
    mpsse_state.txn_lock = 0;
   83870:	72a3      	strb	r3, [r4, #10]
}
   83872:	b002      	add	sp, #8
   83874:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
   83876:	4e11      	ldr	r6, [pc, #68]	; (838bc <mpsse_vendor_bulk_out_received+0xa0>)
        if (mpsse_state.tx_req) {
   83878:	b953      	cbnz	r3, 83890 <mpsse_vendor_bulk_out_received+0x74>
   8387a:	4d11      	ldr	r5, [pc, #68]	; (838c0 <mpsse_vendor_bulk_out_received+0xa4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 
   8387c:	2340      	movs	r3, #64	; 0x40
   8387e:	2100      	movs	r1, #0
   83880:	4a10      	ldr	r2, [pc, #64]	; (838c4 <mpsse_vendor_bulk_out_received+0xa8>)
   83882:	9600      	str	r6, [sp, #0]
   83884:	2006      	movs	r0, #6
   83886:	47a8      	blx	r5
        mpsse_state.txn_lock = 1;
   83888:	2301      	movs	r3, #1
   8388a:	72a3      	strb	r3, [r4, #10]
}
   8388c:	b002      	add	sp, #8
   8388e:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
   83890:	2340      	movs	r3, #64	; 0x40
   83892:	2100      	movs	r1, #0
   83894:	4a0c      	ldr	r2, [pc, #48]	; (838c8 <mpsse_vendor_bulk_out_received+0xac>)
   83896:	4d0a      	ldr	r5, [pc, #40]	; (838c0 <mpsse_vendor_bulk_out_received+0xa4>)
   83898:	9600      	str	r6, [sp, #0]
   8389a:	2006      	movs	r0, #6
   8389c:	47a8      	blx	r5
   8389e:	e7ed      	b.n	8387c <mpsse_vendor_bulk_out_received+0x60>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   838a0:	f9b4 e003 	ldrsh.w	lr, [r4, #3]
   838a4:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
   838a8:	ebae 0e03 	sub.w	lr, lr, r3
   838ac:	fa1f fe8e 	uxth.w	lr, lr
   838b0:	e7d4      	b.n	8385c <mpsse_vendor_bulk_out_received+0x40>
   838b2:	bf00      	nop
   838b4:	200008fc 	.word	0x200008fc
   838b8:	20080000 	.word	0x20080000
   838bc:	0008381d 	.word	0x0008381d
   838c0:	000852f1 	.word	0x000852f1
   838c4:	20080040 	.word	0x20080040
   838c8:	20080090 	.word	0x20080090

000838cc <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
   838cc:	b530      	push	{r4, r5, lr}
   838ce:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
   838d0:	bb48      	cbnz	r0, 83926 <mpsse_vendor_bulk_in_received+0x5a>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   838d2:	4d18      	ldr	r5, [pc, #96]	; (83934 <mpsse_vendor_bulk_in_received+0x68>)
   838d4:	f9b5 4005 	ldrsh.w	r4, [r5, #5]
   838d8:	ebb4 0e01 	subs.w	lr, r4, r1
   838dc:	d00c      	beq.n	838f8 <mpsse_vendor_bulk_in_received+0x2c>
   838de:	4603      	mov	r3, r0
   838e0:	4a15      	ldr	r2, [pc, #84]	; (83938 <mpsse_vendor_bulk_in_received+0x6c>)
        // if we haven't finished sending, move the rest of the stuff to the start of the buffer
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   838e2:	440b      	add	r3, r1
   838e4:	5cd3      	ldrb	r3, [r2, r3]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   838e6:	f100 0c01 	add.w	ip, r0, #1
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   838ea:	b2db      	uxtb	r3, r3
   838ec:	5413      	strb	r3, [r2, r0]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   838ee:	fa1f f08c 	uxth.w	r0, ip
   838f2:	4570      	cmp	r0, lr
   838f4:	4603      	mov	r3, r0
   838f6:	d3f4      	bcc.n	838e2 <mpsse_vendor_bulk_in_received+0x16>
    }
    mpsse_state.rx_bytes -= nb_transferred;
   838f8:	1a61      	subs	r1, r4, r1
   838fa:	b20b      	sxth	r3, r1
   838fc:	f8a5 1005 	strh.w	r1, [r5, #5]
    
    if (mpsse_state.rx_bytes) {
   83900:	b943      	cbnz	r3, 83914 <mpsse_vendor_bulk_in_received+0x48>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
    } else {
        // always have 2 bytes for status
        mpsse_state.rx_bytes = 2;
   83902:	2102      	movs	r1, #2
        MPSSE_RX_BUFFER[0] = 0x00;
   83904:	4a0c      	ldr	r2, [pc, #48]	; (83938 <mpsse_vendor_bulk_in_received+0x6c>)
        mpsse_state.rx_bytes = 2;
   83906:	71ab      	strb	r3, [r5, #6]
        MPSSE_RX_BUFFER[0] = 0x00;
   83908:	7013      	strb	r3, [r2, #0]
        MPSSE_RX_BUFFER[1] = 0x00;
        mpsse_state.txn_lock = 0;
   8390a:	72ab      	strb	r3, [r5, #10]
        MPSSE_RX_BUFFER[1] = 0x00;
   8390c:	7053      	strb	r3, [r2, #1]
        mpsse_state.rx_bytes = 2;
   8390e:	7169      	strb	r1, [r5, #5]
    }

}
   83910:	b003      	add	sp, #12
   83912:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83914:	2100      	movs	r1, #0
   83916:	4809      	ldr	r0, [pc, #36]	; (8393c <mpsse_vendor_bulk_in_received+0x70>)
   83918:	9000      	str	r0, [sp, #0]
   8391a:	4a07      	ldr	r2, [pc, #28]	; (83938 <mpsse_vendor_bulk_in_received+0x6c>)
   8391c:	4c08      	ldr	r4, [pc, #32]	; (83940 <mpsse_vendor_bulk_in_received+0x74>)
   8391e:	2085      	movs	r0, #133	; 0x85
   83920:	47a0      	blx	r4
}
   83922:	b003      	add	sp, #12
   83924:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83926:	4b03      	ldr	r3, [pc, #12]	; (83934 <mpsse_vendor_bulk_in_received+0x68>)
   83928:	2100      	movs	r1, #0
   8392a:	4804      	ldr	r0, [pc, #16]	; (8393c <mpsse_vendor_bulk_in_received+0x70>)
   8392c:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
   83930:	e7f2      	b.n	83918 <mpsse_vendor_bulk_in_received+0x4c>
   83932:	bf00      	nop
   83934:	200008fc 	.word	0x200008fc
   83938:	20080000 	.word	0x20080000
   8393c:	000838cd 	.word	0x000838cd
   83940:	000852f1 	.word	0x000852f1

00083944 <mpsse_enabled>:
    return mpsse_state.enabled;
   83944:	4b01      	ldr	r3, [pc, #4]	; (8394c <mpsse_enabled+0x8>)
}
   83946:	7c98      	ldrb	r0, [r3, #18]
   83948:	4770      	bx	lr
   8394a:	bf00      	nop
   8394c:	200008fc 	.word	0x200008fc

00083950 <mpsse_send_bit>:
{
   83950:	b530      	push	{r4, r5, lr}
    if (mpsse_state.loopback_en) {
   83952:	4b0f      	ldr	r3, [pc, #60]	; (83990 <mpsse_send_bit+0x40>)
{
   83954:	b083      	sub	sp, #12
    if (mpsse_state.loopback_en) {
   83956:	7a5b      	ldrb	r3, [r3, #9]
    value &= 0x01;
   83958:	f000 0401 	and.w	r4, r0, #1
    if (mpsse_state.loopback_en) {
   8395c:	b993      	cbnz	r3, 83984 <mpsse_send_bit+0x34>
        gpio_set_pin_high(dpin);
   8395e:	200e      	movs	r0, #14
    if (value) {
   83960:	b99c      	cbnz	r4, 8398a <mpsse_send_bit+0x3a>
        gpio_set_pin_low(dpin);
   83962:	4b0c      	ldr	r3, [pc, #48]	; (83994 <mpsse_send_bit+0x44>)
   83964:	4798      	blx	r3
    volatile uint8_t i = 0;
   83966:	2300      	movs	r3, #0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83968:	200f      	movs	r0, #15
   8396a:	4d0b      	ldr	r5, [pc, #44]	; (83998 <mpsse_send_bit+0x48>)
    volatile uint8_t i = 0;
   8396c:	f88d 3007 	strb.w	r3, [sp, #7]
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83970:	47a8      	blx	r5
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   83972:	200d      	movs	r0, #13
   83974:	4b09      	ldr	r3, [pc, #36]	; (8399c <mpsse_send_bit+0x4c>)
   83976:	4798      	blx	r3
   83978:	4604      	mov	r4, r0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   8397a:	200f      	movs	r0, #15
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   8397c:	3c00      	subs	r4, #0
   8397e:	bf18      	it	ne
   83980:	2401      	movne	r4, #1
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83982:	47a8      	blx	r5
}
   83984:	4620      	mov	r0, r4
   83986:	b003      	add	sp, #12
   83988:	bd30      	pop	{r4, r5, pc}
        gpio_set_pin_high(dpin);
   8398a:	4b05      	ldr	r3, [pc, #20]	; (839a0 <mpsse_send_bit+0x50>)
   8398c:	4798      	blx	r3
   8398e:	e7ea      	b.n	83966 <mpsse_send_bit+0x16>
   83990:	200008fc 	.word	0x200008fc
   83994:	00085d39 	.word	0x00085d39
   83998:	00085d55 	.word	0x00085d55
   8399c:	00085d01 	.word	0x00085d01
   839a0:	00085d1d 	.word	0x00085d1d

000839a4 <mpsse_swd_send_bit>:
{
   839a4:	b530      	push	{r4, r5, lr}
    dpin = mpsse_state.pins[3];
   839a6:	4c12      	ldr	r4, [pc, #72]	; (839f0 <mpsse_swd_send_bit+0x4c>)
{
   839a8:	b083      	sub	sp, #12
    if (mpsse_state.swd_out_en) {
   839aa:	7c63      	ldrb	r3, [r4, #17]
    dpin = mpsse_state.pins[3];
   839ac:	f8d4 501f 	ldr.w	r5, [r4, #31]
    if (mpsse_state.swd_out_en) {
   839b0:	b943      	cbnz	r3, 839c4 <mpsse_swd_send_bit+0x20>
    volatile uint8_t i = 0;
   839b2:	f88d 3007 	strb.w	r3, [sp, #7]
        read_value = gpio_pin_is_high(dpin);
   839b6:	4628      	mov	r0, r5
   839b8:	4b0e      	ldr	r3, [pc, #56]	; (839f4 <mpsse_swd_send_bit+0x50>)
   839ba:	4798      	blx	r3
   839bc:	1e04      	subs	r4, r0, #0
   839be:	bf18      	it	ne
   839c0:	2401      	movne	r4, #1
   839c2:	e00d      	b.n	839e0 <mpsse_swd_send_bit+0x3c>
        if (value) {
   839c4:	f010 0f01 	tst.w	r0, #1
            gpio_set_pin_high(dpin);
   839c8:	bf14      	ite	ne
   839ca:	4b0b      	ldrne	r3, [pc, #44]	; (839f8 <mpsse_swd_send_bit+0x54>)
            gpio_set_pin_low(dpin);
   839cc:	4b0b      	ldreq	r3, [pc, #44]	; (839fc <mpsse_swd_send_bit+0x58>)
            gpio_set_pin_high(dpin);
   839ce:	4628      	mov	r0, r5
            gpio_set_pin_low(dpin);
   839d0:	4798      	blx	r3
    volatile uint8_t i = 0;
   839d2:	2300      	movs	r3, #0
    if (!mpsse_state.swd_out_en)
   839d4:	7c62      	ldrb	r2, [r4, #17]
    volatile uint8_t i = 0;
   839d6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t read_value = 0;
   839da:	461c      	mov	r4, r3
    if (!mpsse_state.swd_out_en)
   839dc:	2a00      	cmp	r2, #0
   839de:	d0ea      	beq.n	839b6 <mpsse_swd_send_bit+0x12>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   839e0:	4d07      	ldr	r5, [pc, #28]	; (83a00 <mpsse_swd_send_bit+0x5c>)
   839e2:	200f      	movs	r0, #15
   839e4:	47a8      	blx	r5
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   839e6:	200f      	movs	r0, #15
   839e8:	47a8      	blx	r5
}
   839ea:	4620      	mov	r0, r4
   839ec:	b003      	add	sp, #12
   839ee:	bd30      	pop	{r4, r5, pc}
   839f0:	200008fc 	.word	0x200008fc
   839f4:	00085d01 	.word	0x00085d01
   839f8:	00085d1d 	.word	0x00085d1d
   839fc:	00085d39 	.word	0x00085d39
   83a00:	00085d55 	.word	0x00085d55

00083a04 <mpsse_send_bits>:
{
   83a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (uint8_t i = 0; i < num_bits; i++) {
   83a08:	2900      	cmp	r1, #0
   83a0a:	d044      	beq.n	83a96 <mpsse_send_bits+0x92>
   83a0c:	1e4e      	subs	r6, r1, #1
   83a0e:	b2f6      	uxtb	r6, r6
   83a10:	4681      	mov	r9, r0
   83a12:	2407      	movs	r4, #7
    uint8_t read_value = 0;
   83a14:	2500      	movs	r5, #0
   83a16:	f8df a088 	ldr.w	sl, [pc, #136]	; 83aa0 <mpsse_send_bits+0x9c>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a1a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 83aa4 <mpsse_send_bits+0xa0>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a1e:	4f22      	ldr	r7, [pc, #136]	; (83aa8 <mpsse_send_bits+0xa4>)
   83a20:	f1c6 0606 	rsb	r6, r6, #6
   83a24:	e010      	b.n	83a48 <mpsse_send_bits+0x44>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   83a26:	f1c4 0007 	rsb	r0, r4, #7
            if (mpsse_state.swd_mode)
   83a2a:	f89a 2010 	ldrb.w	r2, [sl, #16]
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   83a2e:	fa49 f000 	asr.w	r0, r9, r0
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   83a32:	4603      	mov	r3, r0
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   83a34:	f000 0001 	and.w	r0, r0, #1
            if (mpsse_state.swd_mode)
   83a38:	b1fa      	cbz	r2, 83a7a <mpsse_send_bits+0x76>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   83a3a:	47b8      	blx	r7
   83a3c:	ea4b 15c0 	orr.w	r5, fp, r0, lsl #7
   83a40:	b2ed      	uxtb	r5, r5
    for (uint8_t i = 0; i < num_bits; i++) {
   83a42:	3c01      	subs	r4, #1
   83a44:	42a6      	cmp	r6, r4
   83a46:	d015      	beq.n	83a74 <mpsse_send_bits+0x70>
        if (mpsse_state.cur_cmd.b.lendian) {
   83a48:	f89a 3000 	ldrb.w	r3, [sl]
            read_value >>= 1;
   83a4c:	ea4f 0b55 	mov.w	fp, r5, lsr #1
        if (mpsse_state.cur_cmd.b.lendian) {
   83a50:	071b      	lsls	r3, r3, #28
   83a52:	d4e8      	bmi.n	83a26 <mpsse_send_bits+0x22>
            if (mpsse_state.swd_mode)
   83a54:	f89a 3010 	ldrb.w	r3, [sl, #16]
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a58:	fa49 f004 	asr.w	r0, r9, r4
   83a5c:	f000 0001 	and.w	r0, r0, #1
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a60:	fa49 f204 	asr.w	r2, r9, r4
            if (mpsse_state.swd_mode)
   83a64:	b183      	cbz	r3, 83a88 <mpsse_send_bits+0x84>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a66:	47b8      	blx	r7
   83a68:	40a0      	lsls	r0, r4
    for (uint8_t i = 0; i < num_bits; i++) {
   83a6a:	3c01      	subs	r4, #1
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a6c:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i < num_bits; i++) {
   83a6e:	42a6      	cmp	r6, r4
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a70:	b2ed      	uxtb	r5, r5
    for (uint8_t i = 0; i < num_bits; i++) {
   83a72:	d1e9      	bne.n	83a48 <mpsse_send_bits+0x44>
}
   83a74:	4628      	mov	r0, r5
   83a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   83a7a:	f003 0001 	and.w	r0, r3, #1
   83a7e:	47c0      	blx	r8
   83a80:	ea4b 15c0 	orr.w	r5, fp, r0, lsl #7
   83a84:	b2ed      	uxtb	r5, r5
   83a86:	e7dc      	b.n	83a42 <mpsse_send_bits+0x3e>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   83a88:	f002 0001 	and.w	r0, r2, #1
   83a8c:	47c0      	blx	r8
   83a8e:	40a0      	lsls	r0, r4
   83a90:	4305      	orrs	r5, r0
   83a92:	b2ed      	uxtb	r5, r5
   83a94:	e7d5      	b.n	83a42 <mpsse_send_bits+0x3e>
    uint8_t read_value = 0;
   83a96:	460d      	mov	r5, r1
}
   83a98:	4628      	mov	r0, r5
   83a9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83a9e:	bf00      	nop
   83aa0:	200008fc 	.word	0x200008fc
   83aa4:	00083951 	.word	0x00083951
   83aa8:	000839a5 	.word	0x000839a5

00083aac <mpsse_tms_bit_send>:
{
   83aac:	b530      	push	{r4, r5, lr}
    if (value) {
   83aae:	f010 0f01 	tst.w	r0, #1
{
   83ab2:	b083      	sub	sp, #12
        gpio_set_pin_high(dpin);
   83ab4:	bf14      	ite	ne
   83ab6:	4b0b      	ldrne	r3, [pc, #44]	; (83ae4 <mpsse_tms_bit_send+0x38>)
        gpio_set_pin_low(dpin);
   83ab8:	4b0b      	ldreq	r3, [pc, #44]	; (83ae8 <mpsse_tms_bit_send+0x3c>)
        gpio_set_pin_high(dpin);
   83aba:	2014      	movs	r0, #20
        gpio_set_pin_low(dpin);
   83abc:	4798      	blx	r3
    volatile uint8_t i = 0;
   83abe:	2300      	movs	r3, #0
    read_value = gpio_pin_is_high(dpin);
   83ac0:	4c0a      	ldr	r4, [pc, #40]	; (83aec <mpsse_tms_bit_send+0x40>)
   83ac2:	2014      	movs	r0, #20
    volatile uint8_t i = 0;
   83ac4:	f88d 3007 	strb.w	r3, [sp, #7]
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83ac8:	4d09      	ldr	r5, [pc, #36]	; (83af0 <mpsse_tms_bit_send+0x44>)
    read_value = gpio_pin_is_high(dpin);
   83aca:	47a0      	blx	r4
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83acc:	200f      	movs	r0, #15
   83ace:	47a8      	blx	r5
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   83ad0:	200d      	movs	r0, #13
   83ad2:	47a0      	blx	r4
   83ad4:	4604      	mov	r4, r0
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83ad6:	200f      	movs	r0, #15
   83ad8:	47a8      	blx	r5
}
   83ada:	1e20      	subs	r0, r4, #0
   83adc:	bf18      	it	ne
   83ade:	2001      	movne	r0, #1
   83ae0:	b003      	add	sp, #12
   83ae2:	bd30      	pop	{r4, r5, pc}
   83ae4:	00085d1d 	.word	0x00085d1d
   83ae8:	00085d39 	.word	0x00085d39
   83aec:	00085d01 	.word	0x00085d01
   83af0:	00085d55 	.word	0x00085d55

00083af4 <mpsse_tms_send>:
{
   83af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83af8:	460d      	mov	r5, r1
    if (num_bits == 7) {
   83afa:	f1a5 0407 	sub.w	r4, r5, #7
   83afe:	fab4 f484 	clz	r4, r4
    if (bitval) {
   83b02:	09c3      	lsrs	r3, r0, #7
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
   83b04:	bf14      	ite	ne
   83b06:	4b1e      	ldrne	r3, [pc, #120]	; (83b80 <mpsse_tms_send+0x8c>)
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
   83b08:	4b1e      	ldreq	r3, [pc, #120]	; (83b84 <mpsse_tms_send+0x90>)
{
   83b0a:	4680      	mov	r8, r0
    if (num_bits == 7) {
   83b0c:	0964      	lsrs	r4, r4, #5
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
   83b0e:	200e      	movs	r0, #14
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
   83b10:	4798      	blx	r3
    for (; i < num_bits; i++) {
   83b12:	42a5      	cmp	r5, r4
   83b14:	d92f      	bls.n	83b76 <mpsse_tms_send+0x82>
   83b16:	3d01      	subs	r5, #1
   83b18:	1b2d      	subs	r5, r5, r4
   83b1a:	f1c4 0306 	rsb	r3, r4, #6
   83b1e:	b2ed      	uxtb	r5, r5
   83b20:	f04f 0900 	mov.w	r9, #0
   83b24:	4f18      	ldr	r7, [pc, #96]	; (83b88 <mpsse_tms_send+0x94>)
   83b26:	4e19      	ldr	r6, [pc, #100]	; (83b8c <mpsse_tms_send+0x98>)
   83b28:	f1c4 0407 	rsb	r4, r4, #7
   83b2c:	1b5d      	subs	r5, r3, r5
   83b2e:	e008      	b.n	83b42 <mpsse_tms_send+0x4e>
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   83b30:	47b0      	blx	r6
   83b32:	40a0      	lsls	r0, r4
    for (; i < num_bits; i++) {
   83b34:	3c01      	subs	r4, #1
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   83b36:	ea40 0359 	orr.w	r3, r0, r9, lsr #1
    for (; i < num_bits; i++) {
   83b3a:	42ac      	cmp	r4, r5
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   83b3c:	fa5f f983 	uxtb.w	r9, r3
    for (; i < num_bits; i++) {
   83b40:	d016      	beq.n	83b70 <mpsse_tms_send+0x7c>
        if (mpsse_state.cur_cmd.b.lendian) {
   83b42:	783b      	ldrb	r3, [r7, #0]
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   83b44:	f1c4 0007 	rsb	r0, r4, #7
   83b48:	fa48 f000 	asr.w	r0, r8, r0
        if (mpsse_state.cur_cmd.b.lendian) {
   83b4c:	071b      	lsls	r3, r3, #28
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   83b4e:	f000 0001 	and.w	r0, r0, #1
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   83b52:	fa48 f204 	asr.w	r2, r8, r4
        if (mpsse_state.cur_cmd.b.lendian) {
   83b56:	d4eb      	bmi.n	83b30 <mpsse_tms_send+0x3c>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   83b58:	f002 0001 	and.w	r0, r2, #1
   83b5c:	47b0      	blx	r6
   83b5e:	fa00 f304 	lsl.w	r3, r0, r4
    for (; i < num_bits; i++) {
   83b62:	3c01      	subs	r4, #1
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   83b64:	ea43 0309 	orr.w	r3, r3, r9
    for (; i < num_bits; i++) {
   83b68:	42ac      	cmp	r4, r5
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   83b6a:	fa5f f983 	uxtb.w	r9, r3
    for (; i < num_bits; i++) {
   83b6e:	d1e8      	bne.n	83b42 <mpsse_tms_send+0x4e>
}
   83b70:	4648      	mov	r0, r9
   83b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (; i < num_bits; i++) {
   83b76:	f04f 0900 	mov.w	r9, #0
}
   83b7a:	4648      	mov	r0, r9
   83b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b80:	00085d1d 	.word	0x00085d1d
   83b84:	00085d39 	.word	0x00085d39
   83b88:	200008fc 	.word	0x200008fc
   83b8c:	00083aad 	.word	0x00083aad

00083b90 <mpsse_handle_transmission>:
{
   83b90:	b530      	push	{r4, r5, lr}
    if (mpsse_state.txn_len == 0) { 
   83b92:	4c57      	ldr	r4, [pc, #348]	; (83cf0 <mpsse_handle_transmission+0x160>)
{
   83b94:	b083      	sub	sp, #12
    if (mpsse_state.txn_len == 0) { 
   83b96:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83b9a:	f9b4 1001 	ldrsh.w	r1, [r4, #1]
    if (mpsse_state.txn_len == 0) { 
   83b9e:	bb5b      	cbnz	r3, 83bf8 <mpsse_handle_transmission+0x68>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83ba0:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   83ba4:	b28a      	uxth	r2, r1
   83ba6:	1a98      	subs	r0, r3, r2
        if (mpsse_tx_buffer_remaining() < 2) {
   83ba8:	b200      	sxth	r0, r0
   83baa:	2801      	cmp	r0, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83bac:	b209      	sxth	r1, r1
        if (mpsse_tx_buffer_remaining() < 2) {
   83bae:	dd1f      	ble.n	83bf0 <mpsse_handle_transmission+0x60>
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83bb0:	4d50      	ldr	r5, [pc, #320]	; (83cf4 <mpsse_handle_transmission+0x164>)
   83bb2:	1c50      	adds	r0, r2, #1
   83bb4:	f8a4 0001 	strh.w	r0, [r4, #1]
   83bb8:	fa0f fc80 	sxth.w	ip, r0
   83bbc:	4429      	add	r1, r5
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   83bbe:	7820      	ldrb	r0, [r4, #0]
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83bc0:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   83bc4:	f010 0f02 	tst.w	r0, #2
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83bc8:	b2c9      	uxtb	r1, r1
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   83bca:	d149      	bne.n	83c60 <mpsse_handle_transmission+0xd0>
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   83bcc:	eb05 000c 	add.w	r0, r5, ip
   83bd0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   83bd4:	3202      	adds	r2, #2
   83bd6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
            mpsse_state.txn_len++; //0x00 sends 1 byte, 0x01 sends 2, etc
   83bda:	3101      	adds	r1, #1
   83bdc:	f8a4 1007 	strh.w	r1, [r4, #7]
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   83be0:	b291      	uxth	r1, r2
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83be2:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
   83be4:	b21b      	sxth	r3, r3
   83be6:	2b00      	cmp	r3, #0
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   83be8:	f8a4 2001 	strh.w	r2, [r4, #1]
   83bec:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() < 1) {
   83bee:	dc0b      	bgt.n	83c08 <mpsse_handle_transmission+0x78>
            mpsse_state.tx_req = 1;
   83bf0:	2301      	movs	r3, #1
   83bf2:	73e3      	strb	r3, [r4, #15]
}
   83bf4:	b003      	add	sp, #12
   83bf6:	bd30      	pop	{r4, r5, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83bf8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   83bfc:	b20a      	sxth	r2, r1
   83bfe:	b289      	uxth	r1, r1
   83c00:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
   83c02:	b21b      	sxth	r3, r3
   83c04:	2b00      	cmp	r3, #0
   83c06:	ddf3      	ble.n	83bf0 <mpsse_handle_transmission+0x60>
    if (mpsse_state.cur_cmd.b.wtdi) {
   83c08:	7820      	ldrb	r0, [r4, #0]
   83c0a:	f010 0010 	ands.w	r0, r0, #16
   83c0e:	d11c      	bne.n	83c4a <mpsse_handle_transmission+0xba>
    return mpsse_send_bits(value, 8);
   83c10:	2108      	movs	r1, #8
   83c12:	4b39      	ldr	r3, [pc, #228]	; (83cf8 <mpsse_handle_transmission+0x168>)
   83c14:	4798      	blx	r3
    if (mpsse_state.cur_cmd.b.rtdo) {
   83c16:	7823      	ldrb	r3, [r4, #0]
   83c18:	069b      	lsls	r3, r3, #26
   83c1a:	d50b      	bpl.n	83c34 <mpsse_handle_transmission+0xa4>
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
   83c1c:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
   83c20:	4a34      	ldr	r2, [pc, #208]	; (83cf4 <mpsse_handle_transmission+0x164>)
   83c22:	1c4b      	adds	r3, r1, #1
   83c24:	f8a4 3005 	strh.w	r3, [r4, #5]
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   83c28:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
        if (mpsse_rx_buffer_remaining() > 0) {
   83c2c:	b21b      	sxth	r3, r3
   83c2e:	2b00      	cmp	r3, #0
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
   83c30:	5450      	strb	r0, [r2, r1]
        if (mpsse_rx_buffer_remaining() > 0) {
   83c32:	dd3d      	ble.n	83cb0 <mpsse_handle_transmission+0x120>
    if (--mpsse_state.txn_len == 0) {
   83c34:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
   83c38:	3b01      	subs	r3, #1
   83c3a:	b21a      	sxth	r2, r3
   83c3c:	f8a4 3007 	strh.w	r3, [r4, #7]
   83c40:	b90a      	cbnz	r2, 83c46 <mpsse_handle_transmission+0xb6>
            mpsse_state.cur_cmd.u8 = 0;
   83c42:	2300      	movs	r3, #0
   83c44:	7023      	strb	r3, [r4, #0]
}
   83c46:	b003      	add	sp, #12
   83c48:	bd30      	pop	{r4, r5, pc}
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   83c4a:	482a      	ldr	r0, [pc, #168]	; (83cf4 <mpsse_handle_transmission+0x164>)
   83c4c:	1c4b      	adds	r3, r1, #1
   83c4e:	4402      	add	r2, r0
    return mpsse_send_bits(value, 8);
   83c50:	2108      	movs	r1, #8
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   83c52:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    return mpsse_send_bits(value, 8);
   83c56:	4a28      	ldr	r2, [pc, #160]	; (83cf8 <mpsse_handle_transmission+0x168>)
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   83c58:	f8a4 3001 	strh.w	r3, [r4, #1]
    return mpsse_send_bits(value, 8);
   83c5c:	4790      	blx	r2
   83c5e:	e7da      	b.n	83c16 <mpsse_handle_transmission+0x86>
            mpsse_state.txn_len++; //0x00 sends 1 bit
   83c60:	3101      	adds	r1, #1
            if (mpsse_state.cur_cmd.b.wtms) {
   83c62:	0643      	lsls	r3, r0, #25
            mpsse_state.txn_len++; //0x00 sends 1 bit
   83c64:	f8a4 1007 	strh.w	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.wtms) {
   83c68:	d437      	bmi.n	83cda <mpsse_handle_transmission+0x14a>
                if (mpsse_state.cur_cmd.b.wtdi) // if we're writing, read a byte from the buffer
   83c6a:	f010 0010 	ands.w	r0, r0, #16
   83c6e:	d12b      	bne.n	83cc8 <mpsse_handle_transmission+0x138>
                read_val = mpsse_send_bits(value, mpsse_state.txn_len);
   83c70:	4b21      	ldr	r3, [pc, #132]	; (83cf8 <mpsse_handle_transmission+0x168>)
   83c72:	b2c9      	uxtb	r1, r1
   83c74:	4798      	blx	r3
            mpsse_state.txn_len = 0;
   83c76:	2100      	movs	r1, #0
            if (mpsse_state.cur_cmd.b.rtdo) {
   83c78:	7823      	ldrb	r3, [r4, #0]
            mpsse_state.txn_len = 0;
   83c7a:	71e1      	strb	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.rtdo) {
   83c7c:	069a      	lsls	r2, r3, #26
            mpsse_state.txn_len = 0;
   83c7e:	7221      	strb	r1, [r4, #8]
            if (mpsse_state.cur_cmd.b.rtdo) {
   83c80:	d5df      	bpl.n	83c42 <mpsse_handle_transmission+0xb2>
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
   83c82:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
   83c86:	54e8      	strb	r0, [r5, r3]
   83c88:	3301      	adds	r3, #1
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   83c8a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
   83c8e:	f8a4 3005 	strh.w	r3, [r4, #5]
                if (mpsse_rx_buffer_remaining() > 0) {
   83c92:	b213      	sxth	r3, r2
   83c94:	428b      	cmp	r3, r1
   83c96:	dcd4      	bgt.n	83c42 <mpsse_handle_transmission+0xb2>
                    mpsse_state.txn_lock = 1;
   83c98:	f04f 0c01 	mov.w	ip, #1
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   83c9c:	4a17      	ldr	r2, [pc, #92]	; (83cfc <mpsse_handle_transmission+0x16c>)
   83c9e:	2340      	movs	r3, #64	; 0x40
   83ca0:	9200      	str	r2, [sp, #0]
   83ca2:	4d17      	ldr	r5, [pc, #92]	; (83d00 <mpsse_handle_transmission+0x170>)
   83ca4:	4a13      	ldr	r2, [pc, #76]	; (83cf4 <mpsse_handle_transmission+0x164>)
   83ca6:	2085      	movs	r0, #133	; 0x85
                    mpsse_state.txn_lock = 1;
   83ca8:	f884 c00a 	strb.w	ip, [r4, #10]
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   83cac:	47a8      	blx	r5
   83cae:	e7c8      	b.n	83c42 <mpsse_handle_transmission+0xb2>
            mpsse_state.txn_lock = 1;
   83cb0:	f04f 0c01 	mov.w	ip, #1
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   83cb4:	4911      	ldr	r1, [pc, #68]	; (83cfc <mpsse_handle_transmission+0x16c>)
   83cb6:	2340      	movs	r3, #64	; 0x40
   83cb8:	9100      	str	r1, [sp, #0]
   83cba:	4d11      	ldr	r5, [pc, #68]	; (83d00 <mpsse_handle_transmission+0x170>)
   83cbc:	2100      	movs	r1, #0
   83cbe:	2085      	movs	r0, #133	; 0x85
            mpsse_state.txn_lock = 1;
   83cc0:	f884 c00a 	strb.w	ip, [r4, #10]
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   83cc4:	47a8      	blx	r5
   83cc6:	e7b5      	b.n	83c34 <mpsse_handle_transmission+0xa4>
                     value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83cc8:	eb05 000c 	add.w	r0, r5, ip
   83ccc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   83cd0:	3202      	adds	r2, #2
   83cd2:	f8a4 2001 	strh.w	r2, [r4, #1]
   83cd6:	b2c0      	uxtb	r0, r0
   83cd8:	e7ca      	b.n	83c70 <mpsse_handle_transmission+0xe0>
                read_val = mpsse_tms_send(MPSSE_TX_BUFFER[mpsse_state.tx_idx++], mpsse_state.txn_len);
   83cda:	eb05 000c 	add.w	r0, r5, ip
   83cde:	3202      	adds	r2, #2
   83ce0:	4b08      	ldr	r3, [pc, #32]	; (83d04 <mpsse_handle_transmission+0x174>)
   83ce2:	b2c9      	uxtb	r1, r1
   83ce4:	f8a4 2001 	strh.w	r2, [r4, #1]
   83ce8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   83cec:	4798      	blx	r3
                mpsse_state.txn_len = 0;
   83cee:	e7c2      	b.n	83c76 <mpsse_handle_transmission+0xe6>
   83cf0:	200008fc 	.word	0x200008fc
   83cf4:	20080000 	.word	0x20080000
   83cf8:	00083a05 	.word	0x00083a05
   83cfc:	000838cd 	.word	0x000838cd
   83d00:	000852f1 	.word	0x000852f1
   83d04:	00083af5 	.word	0x00083af5

00083d08 <mpsse_handle_special>:
{
   83d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (mpsse_state.cur_cmd.u8) {
   83d0c:	4c6d      	ldr	r4, [pc, #436]	; (83ec4 <mpsse_handle_special+0x1bc>)
{
   83d0e:	b082      	sub	sp, #8
    switch (mpsse_state.cur_cmd.u8) {
   83d10:	7823      	ldrb	r3, [r4, #0]
   83d12:	3b80      	subs	r3, #128	; 0x80
   83d14:	2b07      	cmp	r3, #7
   83d16:	f200 80bc 	bhi.w	83e92 <mpsse_handle_special+0x18a>
   83d1a:	e8df f003 	tbb	[pc, r3]
   83d1e:	7e13      	.short	0x7e13
   83d20:	6e67568f 	.word	0x6e67568f
   83d24:	0474      	.short	0x0474
        mpsse_state.cur_cmd.u8 = 0x00;
   83d26:	2100      	movs	r1, #0
        mpsse_state.txn_lock = 1;
   83d28:	2601      	movs	r6, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83d2a:	4a67      	ldr	r2, [pc, #412]	; (83ec8 <mpsse_handle_special+0x1c0>)
   83d2c:	2085      	movs	r0, #133	; 0x85
   83d2e:	9200      	str	r2, [sp, #0]
   83d30:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
   83d34:	4a65      	ldr	r2, [pc, #404]	; (83ecc <mpsse_handle_special+0x1c4>)
   83d36:	4d66      	ldr	r5, [pc, #408]	; (83ed0 <mpsse_handle_special+0x1c8>)
        mpsse_state.cur_cmd.u8 = 0x00;
   83d38:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
   83d3a:	72a6      	strb	r6, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83d3c:	47a8      	blx	r5
}
   83d3e:	b002      	add	sp, #8
   83d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83d44:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
   83d48:	f9b4 1003 	ldrsh.w	r1, [r4, #3]
   83d4c:	b293      	uxth	r3, r2
   83d4e:	1ac9      	subs	r1, r1, r3
        if (mpsse_tx_buffer_remaining() < 2) {
   83d50:	b209      	sxth	r1, r1
   83d52:	2901      	cmp	r1, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83d54:	b212      	sxth	r2, r2
        if (mpsse_tx_buffer_remaining() < 2) {
   83d56:	f340 80a3 	ble.w	83ea0 <mpsse_handle_special+0x198>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d5a:	495c      	ldr	r1, [pc, #368]	; (83ecc <mpsse_handle_special+0x1c4>)
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d5c:	1c98      	adds	r0, r3, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d5e:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d60:	b21b      	sxth	r3, r3
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d62:	440a      	add	r2, r1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d64:	440b      	add	r3, r1
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d66:	f892 8040 	ldrb.w	r8, [r2, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d6a:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
   83d6e:	2601      	movs	r6, #1
   83d70:	2500      	movs	r5, #0
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   83d72:	f8df 9160 	ldr.w	r9, [pc, #352]	; 83ed4 <mpsse_handle_special+0x1cc>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   83d76:	f8df a160 	ldr.w	sl, [pc, #352]	; 83ed8 <mpsse_handle_special+0x1d0>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d7a:	fa5f f888 	uxtb.w	r8, r8
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83d7e:	f8a4 0001 	strh.w	r0, [r4, #1]
   83d82:	b2ff      	uxtb	r7, r7
        for (uint8_t i = 0; i < 8; i++) {
   83d84:	e010      	b.n	83da8 <mpsse_handle_special+0xa0>
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
   83d86:	07d3      	lsls	r3, r2, #31
   83d88:	d403      	bmi.n	83d92 <mpsse_handle_special+0x8a>
   83d8a:	7c23      	ldrb	r3, [r4, #16]
   83d8c:	2b00      	cmp	r3, #0
   83d8e:	f040 8083 	bne.w	83e98 <mpsse_handle_special+0x190>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_1);
   83d92:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83d96:	47c8      	blx	r9
                    if (i == 0) 
   83d98:	2d00      	cmp	r5, #0
   83d9a:	f000 8086 	beq.w	83eaa <mpsse_handle_special+0x1a2>
        for (uint8_t i = 0; i < 8; i++) {
   83d9e:	2e08      	cmp	r6, #8
   83da0:	d077      	beq.n	83e92 <mpsse_handle_special+0x18a>
   83da2:	3601      	adds	r6, #1
   83da4:	3501      	adds	r5, #1
   83da6:	b2f6      	uxtb	r6, r6
            if (!mpsse_state.pins[i])
   83da8:	1d2b      	adds	r3, r5, #4
   83daa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   83dae:	f8d3 0003 	ldr.w	r0, [r3, #3]
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
   83db2:	fa48 f205 	asr.w	r2, r8, r5
            if (direction & (1 << i)) {
   83db6:	fa47 f305 	asr.w	r3, r7, r5
            if (!mpsse_state.pins[i])
   83dba:	2800      	cmp	r0, #0
   83dbc:	d0ef      	beq.n	83d9e <mpsse_handle_special+0x96>
            if (direction & (1 << i)) {
   83dbe:	07d9      	lsls	r1, r3, #31
   83dc0:	d4e1      	bmi.n	83d86 <mpsse_handle_special+0x7e>
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   83dc2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83dc6:	47c8      	blx	r9
   83dc8:	e7e9      	b.n	83d9e <mpsse_handle_special+0x96>
        MPSSE_RX_BUFFER[2] = 0x01;
   83dca:	2501      	movs	r5, #1
        mpsse_state.cur_cmd.u8 = 0x00;
   83dcc:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
   83dce:	2303      	movs	r3, #3
        MPSSE_RX_BUFFER[2] = 0x01;
   83dd0:	4a3e      	ldr	r2, [pc, #248]	; (83ecc <mpsse_handle_special+0x1c4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83dd2:	483d      	ldr	r0, [pc, #244]	; (83ec8 <mpsse_handle_special+0x1c0>)
   83dd4:	4e3e      	ldr	r6, [pc, #248]	; (83ed0 <mpsse_handle_special+0x1c8>)
   83dd6:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x01;
   83dd8:	7095      	strb	r5, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83dda:	2085      	movs	r0, #133	; 0x85
        mpsse_state.cur_cmd.u8 = 0x00;
   83ddc:	7021      	strb	r1, [r4, #0]
        mpsse_state.rx_bytes = 3;
   83dde:	7163      	strb	r3, [r4, #5]
        mpsse_state.txn_lock = 1;
   83de0:	72a5      	strb	r5, [r4, #10]
        mpsse_state.rx_bytes = 3;
   83de2:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83de4:	47b0      	blx	r6
}
   83de6:	b002      	add	sp, #8
   83de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 1;
   83dec:	2201      	movs	r2, #1
        mpsse_state.cur_cmd.u8 = 0x00;
   83dee:	2300      	movs	r3, #0
        mpsse_state.loopback_en = 1;
   83df0:	7262      	strb	r2, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   83df2:	7023      	strb	r3, [r4, #0]
}
   83df4:	b002      	add	sp, #8
   83df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 0;
   83dfa:	2300      	movs	r3, #0
   83dfc:	7263      	strb	r3, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   83dfe:	7023      	strb	r3, [r4, #0]
}
   83e00:	b002      	add	sp, #8
   83e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
   83e06:	2200      	movs	r2, #0
        mpsse_state.tx_idx += 2;
   83e08:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
   83e0c:	7022      	strb	r2, [r4, #0]
        mpsse_state.tx_idx += 2;
   83e0e:	3302      	adds	r3, #2
   83e10:	f8a4 3001 	strh.w	r3, [r4, #1]
}
   83e14:	b002      	add	sp, #8
   83e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
   83e1a:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
   83e1c:	2303      	movs	r3, #3
        mpsse_state.txn_lock = 1;
   83e1e:	2601      	movs	r6, #1
        MPSSE_RX_BUFFER[2] = 0x00;
   83e20:	4a2a      	ldr	r2, [pc, #168]	; (83ecc <mpsse_handle_special+0x1c4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83e22:	4829      	ldr	r0, [pc, #164]	; (83ec8 <mpsse_handle_special+0x1c0>)
   83e24:	4d2a      	ldr	r5, [pc, #168]	; (83ed0 <mpsse_handle_special+0x1c8>)
   83e26:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x00;
   83e28:	7091      	strb	r1, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83e2a:	2085      	movs	r0, #133	; 0x85
        mpsse_state.cur_cmd.u8 = 0x00;
   83e2c:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
   83e2e:	72a6      	strb	r6, [r4, #10]
        mpsse_state.rx_bytes = 3;
   83e30:	7163      	strb	r3, [r4, #5]
   83e32:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83e34:	47a8      	blx	r5
}
   83e36:	b002      	add	sp, #8
   83e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83e3c:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
   83e40:	f9b4 2003 	ldrsh.w	r2, [r4, #3]
   83e44:	b299      	uxth	r1, r3
   83e46:	1a52      	subs	r2, r2, r1
        if (mpsse_tx_buffer_remaining() < 2) {
   83e48:	b212      	sxth	r2, r2
   83e4a:	2a01      	cmp	r2, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83e4c:	b21b      	sxth	r3, r3
        if (mpsse_tx_buffer_remaining() < 2) {
   83e4e:	dd27      	ble.n	83ea0 <mpsse_handle_special+0x198>
        mpsse_state.cur_cmd.u8 = 0x00;
   83e50:	2500      	movs	r5, #0
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83e52:	4a1e      	ldr	r2, [pc, #120]	; (83ecc <mpsse_handle_special+0x1c4>)
   83e54:	1c48      	adds	r0, r1, #1
   83e56:	4413      	add	r3, r2
   83e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83e5c:	b200      	sxth	r0, r0
   83e5e:	4402      	add	r2, r0
   83e60:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   83e64:	3102      	adds	r1, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83e66:	b2da      	uxtb	r2, r3
        if ((value & 1)) {
   83e68:	f013 0301 	ands.w	r3, r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83e6c:	f8a4 1001 	strh.w	r1, [r4, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
   83e70:	7025      	strb	r5, [r4, #0]
        if ((value & 1)) {
   83e72:	d018      	beq.n	83ea6 <mpsse_handle_special+0x19e>
            mpsse_state.swd_mode = 1;
   83e74:	2301      	movs	r3, #1
            if (value & 2) {
   83e76:	f012 0502 	ands.w	r5, r2, #2
            mpsse_state.swd_mode = 1;
   83e7a:	7423      	strb	r3, [r4, #16]
            if (value & 2) {
   83e7c:	d019      	beq.n	83eb2 <mpsse_handle_special+0x1aa>
                gpio_configure_pin(mpsse_state.pins[3], PIO_OUTPUT_1);
   83e7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83e82:	f8d4 001f 	ldr.w	r0, [r4, #31]
   83e86:	4a13      	ldr	r2, [pc, #76]	; (83ed4 <mpsse_handle_special+0x1cc>)
                mpsse_state.swd_out_en = 1;
   83e88:	7463      	strb	r3, [r4, #17]
}
   83e8a:	b002      	add	sp, #8
   83e8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpio_configure_pin(mpsse_state.pins[3], PIO_OUTPUT_1);
   83e90:	4710      	bx	r2
        mpsse_state.cur_cmd.u8 = 0x00;
   83e92:	2300      	movs	r3, #0
   83e94:	7023      	strb	r3, [r4, #0]
        break;
   83e96:	e752      	b.n	83d3e <mpsse_handle_special+0x36>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_0);
   83e98:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83e9c:	47c8      	blx	r9
   83e9e:	e77e      	b.n	83d9e <mpsse_handle_special+0x96>
            mpsse_state.tx_req = 1;
   83ea0:	2301      	movs	r3, #1
   83ea2:	73e3      	strb	r3, [r4, #15]
            return;
   83ea4:	e74b      	b.n	83d3e <mpsse_handle_special+0x36>
            mpsse_state.swd_mode = 0;
   83ea6:	7423      	strb	r3, [r4, #16]
   83ea8:	e749      	b.n	83d3e <mpsse_handle_special+0x36>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   83eaa:	f8d4 0013 	ldr.w	r0, [r4, #19]
   83eae:	47d0      	blx	sl
        for (uint8_t i = 0; i < 8; i++) {
   83eb0:	e777      	b.n	83da2 <mpsse_handle_special+0x9a>
                gpio_configure_pin(mpsse_state.pins[3], PIO_INPUT);
   83eb2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83eb6:	f8d4 001f 	ldr.w	r0, [r4, #31]
   83eba:	4b06      	ldr	r3, [pc, #24]	; (83ed4 <mpsse_handle_special+0x1cc>)
   83ebc:	4798      	blx	r3
                mpsse_state.swd_out_en = 0;
   83ebe:	7465      	strb	r5, [r4, #17]
   83ec0:	e73d      	b.n	83d3e <mpsse_handle_special+0x36>
   83ec2:	bf00      	nop
   83ec4:	200008fc 	.word	0x200008fc
   83ec8:	000838cd 	.word	0x000838cd
   83ecc:	20080000 	.word	0x20080000
   83ed0:	000852f1 	.word	0x000852f1
   83ed4:	00085d79 	.word	0x00085d79
   83ed8:	00085d55 	.word	0x00085d55

00083edc <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
   83edc:	b510      	push	{r4, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
   83ede:	4b04      	ldr	r3, [pc, #16]	; (83ef0 <mpsse_register_handlers+0x14>)
   83ee0:	4804      	ldr	r0, [pc, #16]	; (83ef4 <mpsse_register_handlers+0x18>)
   83ee2:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
}
   83ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_in_handler(mpsse_setup_in_received);
   83ee8:	4803      	ldr	r0, [pc, #12]	; (83ef8 <mpsse_register_handlers+0x1c>)
   83eea:	4b04      	ldr	r3, [pc, #16]	; (83efc <mpsse_register_handlers+0x20>)
   83eec:	4718      	bx	r3
   83eee:	bf00      	nop
   83ef0:	00082665 	.word	0x00082665
   83ef4:	00083735 	.word	0x00083735
   83ef8:	00083639 	.word	0x00083639
   83efc:	0008263d 	.word	0x0008263d

00083f00 <MPSSE_main_sendrecv_byte>:

// TODO: do writing here as we have time
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
   83f00:	b530      	push	{r4, r5, lr}
	if (!mpsse_state.enabled) return;
   83f02:	4c30      	ldr	r4, [pc, #192]	; (83fc4 <MPSSE_main_sendrecv_byte+0xc4>)
{
   83f04:	b083      	sub	sp, #12
	if (!mpsse_state.enabled) return;
   83f06:	7ca3      	ldrb	r3, [r4, #18]
   83f08:	2b00      	cmp	r3, #0
   83f0a:	d04d      	beq.n	83fa8 <MPSSE_main_sendrecv_byte+0xa8>

    if (mpsse_state.txn_lock) {
   83f0c:	7aa3      	ldrb	r3, [r4, #10]
   83f0e:	2b00      	cmp	r3, #0
   83f10:	d14a      	bne.n	83fa8 <MPSSE_main_sendrecv_byte+0xa8>
        // waiting on a USB transaction to/from the PC, so wait for that to be done
        // before doing anything else
        return;
    }

    if (mpsse_state.tx_req) {
   83f12:	7be1      	ldrb	r1, [r4, #15]
   83f14:	bb09      	cbnz	r1, 83f5a <MPSSE_main_sendrecv_byte+0x5a>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83f16:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
   83f1a:	f9b4 3003 	ldrsh.w	r3, [r4, #3]
   83f1e:	b290      	uxth	r0, r2
   83f20:	1a1b      	subs	r3, r3, r0
            mpsse_vendor_bulk_out_received);
        return;
    }

    // we're at end of the TX buffer, so read more in
    if (mpsse_tx_buffer_remaining() <= 0) {
   83f22:	b21b      	sxth	r3, r3
   83f24:	2b00      	cmp	r3, #0
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83f26:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() <= 0) {
   83f28:	dd40      	ble.n	83fac <MPSSE_main_sendrecv_byte+0xac>
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        return;
    }

    // finished processing the last command, so read a new one
    if (mpsse_state.cur_cmd.u8 == 0x00) {
   83f2a:	7823      	ldrb	r3, [r4, #0]
   83f2c:	b96b      	cbnz	r3, 83f4a <MPSSE_main_sendrecv_byte+0x4a>
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83f2e:	4b26      	ldr	r3, [pc, #152]	; (83fc8 <MPSSE_main_sendrecv_byte+0xc8>)
        mpsse_state.n_processed_cmds++;
   83f30:	f8d4 100b 	ldr.w	r1, [r4, #11]
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83f34:	441a      	add	r2, r3
   83f36:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
   83f3a:	3001      	adds	r0, #1
   83f3c:	b2db      	uxtb	r3, r3
        mpsse_state.n_processed_cmds++;
   83f3e:	1c4a      	adds	r2, r1, #1
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83f40:	f8a4 0001 	strh.w	r0, [r4, #1]
   83f44:	7023      	strb	r3, [r4, #0]
        mpsse_state.n_processed_cmds++;
   83f46:	f8c4 200b 	str.w	r2, [r4, #11]
    }

    if (mpsse_state.cur_cmd.b.special) {
   83f4a:	061b      	lsls	r3, r3, #24
        mpsse_handle_special();
   83f4c:	bf4c      	ite	mi
   83f4e:	4b1f      	ldrmi	r3, [pc, #124]	; (83fcc <MPSSE_main_sendrecv_byte+0xcc>)
    } else {
        mpsse_handle_transmission();
   83f50:	4b1f      	ldrpl	r3, [pc, #124]	; (83fd0 <MPSSE_main_sendrecv_byte+0xd0>)
    }

   83f52:	b003      	add	sp, #12
   83f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        mpsse_handle_transmission();
   83f58:	4718      	bx	r3
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83f5a:	f9b4 e001 	ldrsh.w	lr, [r4, #1]
   83f5e:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
   83f62:	ebac 0c0e 	sub.w	ip, ip, lr
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83f66:	fa0f fc8c 	sxth.w	ip, ip
   83f6a:	f1bc 0f00 	cmp.w	ip, #0
   83f6e:	dd0f      	ble.n	83f90 <MPSSE_main_sendrecv_byte+0x90>
   83f70:	461a      	mov	r2, r3
   83f72:	4815      	ldr	r0, [pc, #84]	; (83fc8 <MPSSE_main_sendrecv_byte+0xc8>)
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   83f74:	eb0e 0102 	add.w	r1, lr, r2
   83f78:	4401      	add	r1, r0
   83f7a:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83f7e:	3301      	adds	r3, #1
   83f80:	b29b      	uxth	r3, r3
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   83f82:	4402      	add	r2, r0
   83f84:	b2c9      	uxtb	r1, r1
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83f86:	4563      	cmp	r3, ip
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   83f88:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83f8c:	461a      	mov	r2, r3
   83f8e:	dbf1      	blt.n	83f74 <MPSSE_main_sendrecv_byte+0x74>
        mpsse_state.txn_lock = 1;
   83f90:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   83f94:	490f      	ldr	r1, [pc, #60]	; (83fd4 <MPSSE_main_sendrecv_byte+0xd4>)
   83f96:	2340      	movs	r3, #64	; 0x40
   83f98:	9100      	str	r1, [sp, #0]
   83f9a:	2006      	movs	r0, #6
   83f9c:	2100      	movs	r1, #0
   83f9e:	4a0e      	ldr	r2, [pc, #56]	; (83fd8 <MPSSE_main_sendrecv_byte+0xd8>)
   83fa0:	4d0e      	ldr	r5, [pc, #56]	; (83fdc <MPSSE_main_sendrecv_byte+0xdc>)
        mpsse_state.txn_lock = 1;
   83fa2:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   83fa6:	47a8      	blx	r5
   83fa8:	b003      	add	sp, #12
   83faa:	bd30      	pop	{r4, r5, pc}
        mpsse_state.txn_lock = 1;
   83fac:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   83fb0:	4a08      	ldr	r2, [pc, #32]	; (83fd4 <MPSSE_main_sendrecv_byte+0xd4>)
   83fb2:	2340      	movs	r3, #64	; 0x40
   83fb4:	9200      	str	r2, [sp, #0]
   83fb6:	4d09      	ldr	r5, [pc, #36]	; (83fdc <MPSSE_main_sendrecv_byte+0xdc>)
   83fb8:	4a09      	ldr	r2, [pc, #36]	; (83fe0 <MPSSE_main_sendrecv_byte+0xe0>)
   83fba:	2006      	movs	r0, #6
        mpsse_state.txn_lock = 1;
   83fbc:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   83fc0:	47a8      	blx	r5
        return;
   83fc2:	e7f1      	b.n	83fa8 <MPSSE_main_sendrecv_byte+0xa8>
   83fc4:	200008fc 	.word	0x200008fc
   83fc8:	20080000 	.word	0x20080000
   83fcc:	00083d09 	.word	0x00083d09
   83fd0:	00083b91 	.word	0x00083b91
   83fd4:	0008381d 	.word	0x0008381d
   83fd8:	20080090 	.word	0x20080090
   83fdc:	000852f1 	.word	0x000852f1
   83fe0:	20080040 	.word	0x20080040

00083fe4 <switch_configurations>:

// hack to get around windows being unable to handle multiple configurations
#if NAEUSB_MPSSE_SUPPORT == 1
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   83fe4:	4b06      	ldr	r3, [pc, #24]	; (84000 <switch_configurations+0x1c>)
   83fe6:	4807      	ldr	r0, [pc, #28]	; (84004 <switch_configurations+0x20>)
   83fe8:	6859      	ldr	r1, [r3, #4]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   83fea:	4a07      	ldr	r2, [pc, #28]	; (84008 <switch_configurations+0x24>)
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   83fec:	6008      	str	r0, [r1, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   83fee:	6859      	ldr	r1, [r3, #4]
	#ifdef USB_DEVICE_HS_SUPPORT
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   83ff0:	4806      	ldr	r0, [pc, #24]	; (8400c <switch_configurations+0x28>)
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   83ff2:	604a      	str	r2, [r1, #4]
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   83ff4:	6919      	ldr	r1, [r3, #16]
   83ff6:	6008      	str	r0, [r1, #0]
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
   83ff8:	691b      	ldr	r3, [r3, #16]
   83ffa:	605a      	str	r2, [r3, #4]
	#endif
}
   83ffc:	4770      	bx	lr
   83ffe:	bf00      	nop
   84000:	20000948 	.word	0x20000948
   84004:	200009d4 	.word	0x200009d4
   84008:	20000940 	.word	0x20000940
   8400c:	20000a9c 	.word	0x20000a9c

00084010 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   84010:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   84012:	2604      	movs	r6, #4
{
   84014:	b087      	sub	sp, #28
   84016:	4604      	mov	r4, r0
   84018:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   8401a:	220f      	movs	r2, #15
   8401c:	210e      	movs	r1, #14
   8401e:	480c      	ldr	r0, [pc, #48]	; (84050 <flash_read_unique_id+0x40>)
   84020:	4f0c      	ldr	r7, [pc, #48]	; (84054 <flash_read_unique_id+0x44>)
   84022:	ab02      	add	r3, sp, #8
   84024:	9600      	str	r6, [sp, #0]
   84026:	47b8      	blx	r7
   84028:	b970      	cbnz	r0, 84048 <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   8402a:	2d04      	cmp	r5, #4
   8402c:	4626      	mov	r6, r4
   8402e:	462a      	mov	r2, r5
   84030:	4604      	mov	r4, r0
   84032:	bf28      	it	cs
   84034:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   84036:	b125      	cbz	r5, 84042 <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   84038:	4630      	mov	r0, r6
   8403a:	4b07      	ldr	r3, [pc, #28]	; (84058 <flash_read_unique_id+0x48>)
   8403c:	a902      	add	r1, sp, #8
   8403e:	0092      	lsls	r2, r2, #2
   84040:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   84042:	4620      	mov	r0, r4
   84044:	b007      	add	sp, #28
   84046:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   84048:	2410      	movs	r4, #16
}
   8404a:	4620      	mov	r0, r4
   8404c:	b007      	add	sp, #28
   8404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84050:	400e0800 	.word	0x400e0800
   84054:	20000001 	.word	0x20000001
   84058:	00086d65 	.word	0x00086d65

0008405c <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8405c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
   84060:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   84062:	ea4f 1001 	mov.w	r0, r1, lsl #4
   84066:	d312      	bcc.n	8408e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   84068:	0843      	lsrs	r3, r0, #1
   8406a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   8406e:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   84072:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   84076:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   84078:	1e58      	subs	r0, r3, #1
   8407a:	4288      	cmp	r0, r1
   8407c:	d813      	bhi.n	840a6 <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8407e:	0412      	lsls	r2, r2, #16
   84080:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   84084:	431a      	orrs	r2, r3

	return 0;
   84086:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   84088:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
   8408c:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8408e:	00c9      	lsls	r1, r1, #3
   84090:	084b      	lsrs	r3, r1, #1
   84092:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   84096:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8409a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   8409e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   840a0:	1e58      	subs	r0, r3, #1
   840a2:	4288      	cmp	r0, r1
   840a4:	d901      	bls.n	840aa <usart_set_async_baudrate+0x4e>
		return 1;
   840a6:	2001      	movs	r0, #1
}
   840a8:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
   840aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
   840ae:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   840b2:	f8cc 1004 	str.w	r1, [ip, #4]
   840b6:	e7e2      	b.n	8407e <usart_set_async_baudrate+0x22>

000840b8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   840b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p_usart->US_MR = 0;
   840bc:	2300      	movs	r3, #0
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   840be:	f04f 0988 	mov.w	r9, #136	; 0x88
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   840c2:	f04f 0824 	mov.w	r8, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   840c6:	f44f 7e80 	mov.w	lr, #256	; 0x100
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   840ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
	p_usart->US_CR = US_CR_DTRDIS;
   840ce:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   840d2:	f8df a050 	ldr.w	sl, [pc, #80]	; 84124 <usart_init_rs232+0x6c>
	ul_reg_val = 0;
   840d6:	4e14      	ldr	r6, [pc, #80]	; (84128 <usart_init_rs232+0x70>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   840d8:	f8c0 a0e4 	str.w	sl, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   840dc:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
   840de:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   840e0:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   840e2:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   840e4:	f8c0 9000 	str.w	r9, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   840e8:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   840ec:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
   840f0:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_DTRDIS;
   840f4:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   840f6:	b191      	cbz	r1, 8411e <usart_init_rs232+0x66>
   840f8:	460d      	mov	r5, r1
   840fa:	4b0c      	ldr	r3, [pc, #48]	; (8412c <usart_init_rs232+0x74>)
   840fc:	6809      	ldr	r1, [r1, #0]
   840fe:	4604      	mov	r4, r0
   84100:	4798      	blx	r3
   84102:	b960      	cbnz	r0, 8411e <usart_init_rs232+0x66>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   84104:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   84108:	4313      	orrs	r3, r2
   8410a:	692a      	ldr	r2, [r5, #16]
   8410c:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8410e:	68ea      	ldr	r2, [r5, #12]
   84110:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
   84112:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   84114:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
   84116:	4313      	orrs	r3, r2
   84118:	6063      	str	r3, [r4, #4]
}
   8411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 1;
   8411e:	2001      	movs	r0, #1
}
   84120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84124:	55534100 	.word	0x55534100
   84128:	20001f00 	.word	0x20001f00
   8412c:	0008405d 	.word	0x0008405d

00084130 <usart_init_sync_master>:
{
   84130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   84134:	f04f 0c24 	mov.w	ip, #36	; 0x24
	p_usart->US_MR = 0;
   84138:	2500      	movs	r5, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8413a:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTSTA;
   8413e:	f44f 7780 	mov.w	r7, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
   84142:	f44f 2600 	mov.w	r6, #524288	; 0x80000
	p_usart->US_CR = US_CR_DTRDIS;
   84146:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8414a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 841b0 <usart_init_sync_master+0x80>
   8414e:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   84152:	6045      	str	r5, [r0, #4]
	p_usart->US_RTOR = 0;
   84154:	6245      	str	r5, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   84156:	6285      	str	r5, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   84158:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8415c:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   84160:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   84162:	6006      	str	r6, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   84164:	6004      	str	r4, [r0, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   84166:	b1f9      	cbz	r1, 841a8 <usart_init_sync_master+0x78>
   84168:	680c      	ldr	r4, [r1, #0]
   8416a:	4603      	mov	r3, r0
	cd = (ul_mck + baudrate / 2) / baudrate;
   8416c:	eb02 0254 	add.w	r2, r2, r4, lsr #1
   84170:	fbb2 f2f4 	udiv	r2, r2, r4
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   84174:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   84178:	1e54      	subs	r4, r2, #1
   8417a:	4284      	cmp	r4, r0
   8417c:	d814      	bhi.n	841a8 <usart_init_sync_master+0x78>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8417e:	621a      	str	r2, [r3, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   84180:	685a      	ldr	r2, [r3, #4]
	return 0;
   84182:	4628      	mov	r0, r5
			US_MR_USCLKS_MCK | US_MR_SYNC;
   84184:	f422 7298 	bic.w	r2, r2, #304	; 0x130
   84188:	433a      	orrs	r2, r7
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   8418a:	605a      	str	r2, [r3, #4]
	p_usart->US_MR |= ul_reg_val;
   8418c:	685c      	ldr	r4, [r3, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8418e:	e9d1 2501 	ldrd	r2, r5, [r1, #4]
   84192:	432a      	orrs	r2, r5
	p_usart->US_MR |= ul_reg_val;
   84194:	4322      	orrs	r2, r4
   84196:	690c      	ldr	r4, [r1, #16]
   84198:	68c9      	ldr	r1, [r1, #12]
   8419a:	4322      	orrs	r2, r4
   8419c:	430a      	orrs	r2, r1
   8419e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   841a2:	605a      	str	r2, [r3, #4]
}
   841a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   841a8:	2001      	movs	r0, #1
}
   841aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   841ae:	bf00      	nop
   841b0:	55534100 	.word	0x55534100

000841b4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   841b4:	2340      	movs	r3, #64	; 0x40
   841b6:	6003      	str	r3, [r0, #0]
}
   841b8:	4770      	bx	lr
   841ba:	bf00      	nop

000841bc <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   841bc:	2380      	movs	r3, #128	; 0x80
   841be:	6003      	str	r3, [r0, #0]
}
   841c0:	4770      	bx	lr
   841c2:	bf00      	nop

000841c4 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   841c4:	2310      	movs	r3, #16
   841c6:	6003      	str	r3, [r0, #0]
}
   841c8:	4770      	bx	lr
   841ca:	bf00      	nop

000841cc <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   841cc:	2320      	movs	r3, #32
   841ce:	6003      	str	r3, [r0, #0]
}
   841d0:	4770      	bx	lr
   841d2:	bf00      	nop

000841d4 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   841d4:	6081      	str	r1, [r0, #8]
}
   841d6:	4770      	bx	lr

000841d8 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   841d8:	60c1      	str	r1, [r0, #12]
}
   841da:	4770      	bx	lr

000841dc <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   841dc:	6900      	ldr	r0, [r0, #16]
}
   841de:	4770      	bx	lr

000841e0 <usart_get_status>:
	return p_usart->US_CSR;
   841e0:	6940      	ldr	r0, [r0, #20]
}
   841e2:	4770      	bx	lr

000841e4 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   841e4:	6940      	ldr	r0, [r0, #20]
}
   841e6:	f3c0 2040 	ubfx	r0, r0, #9, #1
   841ea:	4770      	bx	lr

000841ec <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   841ec:	6943      	ldr	r3, [r0, #20]
   841ee:	079b      	lsls	r3, r3, #30
   841f0:	d5fc      	bpl.n	841ec <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   841f2:	f3c1 0108 	ubfx	r1, r1, #0, #9
   841f6:	61c1      	str	r1, [r0, #28]
}
   841f8:	2000      	movs	r0, #0
   841fa:	4770      	bx	lr

000841fc <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   841fc:	6943      	ldr	r3, [r0, #20]
   841fe:	07db      	lsls	r3, r3, #31
   84200:	d505      	bpl.n	8420e <usart_read+0x12>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   84202:	6983      	ldr	r3, [r0, #24]
	return 0;
   84204:	2000      	movs	r0, #0
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   84206:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8420a:	600b      	str	r3, [r1, #0]
	return 0;
   8420c:	4770      	bx	lr
		return 1;
   8420e:	2001      	movs	r0, #1
}
   84210:	4770      	bx	lr
   84212:	bf00      	nop

00084214 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   84214:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84218:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8421c:	670a      	str	r2, [r1, #112]	; 0x70
}
   8421e:	4770      	bx	lr

00084220 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   84220:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84224:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84228:	674a      	str	r2, [r1, #116]	; 0x74
}
   8422a:	4770      	bx	lr

0008422c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8422c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84230:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84234:	678a      	str	r2, [r1, #120]	; 0x78
}
   84236:	4770      	bx	lr

00084238 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   84238:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8423c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84240:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   84244:	4770      	bx	lr
   84246:	bf00      	nop

00084248 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   84248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8424a:	4b12      	ldr	r3, [pc, #72]	; (84294 <pio_handler_process+0x4c>)
{
   8424c:	4604      	mov	r4, r0
   8424e:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   84250:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   84252:	4b11      	ldr	r3, [pc, #68]	; (84298 <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   84254:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   84256:	4620      	mov	r0, r4
   84258:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8425a:	4005      	ands	r5, r0
   8425c:	d019      	beq.n	84292 <pio_handler_process+0x4a>
   8425e:	4c0f      	ldr	r4, [pc, #60]	; (8429c <pio_handler_process+0x54>)
   84260:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   84264:	6823      	ldr	r3, [r4, #0]
   84266:	42b3      	cmp	r3, r6
   84268:	d005      	beq.n	84276 <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8426a:	42bc      	cmp	r4, r7
   8426c:	d011      	beq.n	84292 <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   8426e:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   84270:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   84272:	42b3      	cmp	r3, r6
   84274:	d1f9      	bne.n	8426a <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   84276:	6861      	ldr	r1, [r4, #4]
   84278:	4229      	tst	r1, r5
   8427a:	d0f6      	beq.n	8426a <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8427c:	68e3      	ldr	r3, [r4, #12]
   8427e:	4630      	mov	r0, r6
   84280:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   84282:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   84284:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   84286:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   8428a:	d002      	beq.n	84292 <pio_handler_process+0x4a>
		while (status != 0) {
   8428c:	3410      	adds	r4, #16
   8428e:	2d00      	cmp	r5, #0
   84290:	d1e8      	bne.n	84264 <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   84292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84294:	00085cf9 	.word	0x00085cf9
   84298:	00085cfd 	.word	0x00085cfd
   8429c:	20001f04 	.word	0x20001f04

000842a0 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   842a0:	210a      	movs	r1, #10
   842a2:	4801      	ldr	r0, [pc, #4]	; (842a8 <PIOA_Handler+0x8>)
   842a4:	4b01      	ldr	r3, [pc, #4]	; (842ac <PIOA_Handler+0xc>)
   842a6:	4718      	bx	r3
   842a8:	400e0c00 	.word	0x400e0c00
   842ac:	00084249 	.word	0x00084249

000842b0 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   842b0:	210b      	movs	r1, #11
   842b2:	4801      	ldr	r0, [pc, #4]	; (842b8 <PIOB_Handler+0x8>)
   842b4:	4b01      	ldr	r3, [pc, #4]	; (842bc <PIOB_Handler+0xc>)
   842b6:	4718      	bx	r3
   842b8:	400e0e00 	.word	0x400e0e00
   842bc:	00084249 	.word	0x00084249

000842c0 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   842c0:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   842c4:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   842c6:	f01c 0f01 	tst.w	ip, #1
   842ca:	d016      	beq.n	842fa <udd_ep_finish_job+0x3a>
{
   842cc:	b430      	push	{r4, r5}
		return; // No on-going job
	}
	ptr_job->busy = false;
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   842ce:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   842d0:	f36f 0c00 	bfc	ip, #0, #1
   842d4:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   842d8:	b16c      	cbz	r4, 842f6 <udd_ep_finish_job+0x36>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   842da:	4d08      	ldr	r5, [pc, #32]	; (842fc <udd_ep_finish_job+0x3c>)
   842dc:	4608      	mov	r0, r1
   842de:	f102 0108 	add.w	r1, r2, #8
   842e2:	0149      	lsls	r1, r1, #5
   842e4:	5869      	ldr	r1, [r5, r1]
   842e6:	0709      	lsls	r1, r1, #28
		ep_num |= USB_EP_DIR_IN;
   842e8:	bf48      	it	mi
   842ea:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   842ee:	6899      	ldr	r1, [r3, #8]
   842f0:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   842f2:	bc30      	pop	{r4, r5}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   842f4:	4718      	bx	r3
}
   842f6:	bc30      	pop	{r4, r5}
   842f8:	4770      	bx	lr
   842fa:	4770      	bx	lr
   842fc:	400a4000 	.word	0x400a4000

00084300 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84304:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84306:	4c66      	ldr	r4, [pc, #408]	; (844a0 <udd_ep_trans_done+0x1a0>)
   84308:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8430c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   84310:	f891 c014 	ldrb.w	ip, [r1, #20]
   84314:	f01c 0f01 	tst.w	ip, #1
   84318:	d039      	beq.n	8438e <udd_ep_trans_done+0x8e>
   8431a:	4602      	mov	r2, r0
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8431c:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
   84320:	42a8      	cmp	r0, r5
   84322:	ea4f 0643 	mov.w	r6, r3, lsl #1
   84326:	d034      	beq.n	84392 <udd_ep_trans_done+0x92>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   84328:	1a2d      	subs	r5, r5, r0

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8432a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   8432e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
   84332:	d847      	bhi.n	843c4 <udd_ep_trans_done+0xc4>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84334:	f10c 2e40 	add.w	lr, ip, #1073758208	; 0x40004000
   84338:	f50e 2e20 	add.w	lr, lr, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   8433c:	f8de 8100 	ldr.w	r8, [lr, #256]	; 0x100
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84340:	042f      	lsls	r7, r5, #16
		if (Is_udd_endpoint_in(ep)) {
   84342:	f018 0f08 	tst.w	r8, #8
   84346:	d072      	beq.n	8442e <udd_ep_trans_done+0x12e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84348:	f8de 8100 	ldr.w	r8, [lr, #256]	; 0x100
   8434c:	f04f 0e08 	mov.w	lr, #8
   84350:	f008 0807 	and.w	r8, r8, #7
   84354:	fa0e fe08 	lsl.w	lr, lr, r8
   84358:	f10e 3eff 	add.w	lr, lr, #4294967295
   8435c:	ea1e 0f05 	tst.w	lr, r5
   84360:	f000 809a 	beq.w	84498 <udd_ep_trans_done+0x198>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84364:	f891 e014 	ldrb.w	lr, [r1, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84368:	f047 0729 	orr.w	r7, r7, #41	; 0x29
				ptr_job->b_shortpacket = false;
   8436c:	f36f 0e41 	bfc	lr, #1, #1
   84370:	f881 e014 	strb.w	lr, [r1, #20]
   84374:	e033      	b.n	843de <udd_ep_trans_done+0xde>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   84376:	f44f 6400 	mov.w	r4, #2048	; 0x800
			udd_enable_endpoint_interrupt(ep);
   8437a:	f44f 7380 	mov.w	r3, #256	; 0x100
   8437e:	4849      	ldr	r0, [pc, #292]	; (844a4 <udd_ep_trans_done+0x1a4>)
			udd_enable_tx_pkt_ready_interrupt(ep);
   84380:	f8c1 4104 	str.w	r4, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   84384:	fa03 f202 	lsl.w	r2, r3, r2
   84388:	6903      	ldr	r3, [r0, #16]
   8438a:	431a      	orrs	r2, r3
   8438c:	6102      	str	r2, [r0, #16]
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
   8438e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84392:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	if (Is_udd_endpoint_in(ep)) {
   84396:	f10c 2140 	add.w	r1, ip, #1073758208	; 0x40004000
   8439a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8439e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   843a2:	0700      	lsls	r0, r0, #28
   843a4:	d505      	bpl.n	843b2 <udd_ep_trans_done+0xb2>
		if (ptr_job->b_shortpacket) {
   843a6:	18f0      	adds	r0, r6, r3
   843a8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   843ac:	7d00      	ldrb	r0, [r0, #20]
   843ae:	0787      	lsls	r7, r0, #30
   843b0:	d4e1      	bmi.n	84376 <udd_ep_trans_done+0x76>
	udd_ep_finish_job(ptr_job, false, ep);
   843b2:	4d3d      	ldr	r5, [pc, #244]	; (844a8 <udd_ep_trans_done+0x1a8>)
	ptr_job = &udd_ep_job[ep - 1];
   843b4:	18f0      	adds	r0, r6, r3
	udd_ep_finish_job(ptr_job, false, ep);
   843b6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   843ba:	462b      	mov	r3, r5
}
   843bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   843c0:	2100      	movs	r1, #0
   843c2:	4718      	bx	r3
		if (Is_udd_endpoint_in(ep)) {
   843c4:	f10c 2140 	add.w	r1, ip, #1073758208	; 0x40004000
   843c8:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   843cc:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   843d0:	072d      	lsls	r5, r5, #28
   843d2:	d535      	bpl.n	84440 <udd_ep_trans_done+0x140>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   843d4:	2721      	movs	r7, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   843d6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   843da:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   843de:	eb06 0e03 	add.w	lr, r6, r3
   843e2:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
   843e6:	f8de 1004 	ldr.w	r1, [lr, #4]
   843ea:	4408      	add	r0, r1
   843ec:	492f      	ldr	r1, [pc, #188]	; (844ac <udd_ep_trans_done+0x1ac>)
   843ee:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   843f2:	6048      	str	r0, [r1, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   843f4:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i");
   843f8:	b672      	cpsid	i
   843fa:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   843fe:	f04f 0900 	mov.w	r9, #0
   84402:	482b      	ldr	r0, [pc, #172]	; (844b0 <udd_ep_trans_done+0x1b0>)
   84404:	f880 9000 	strb.w	r9, [r0]
		if (!(udd_endpoint_dma_get_status(ep)
   84408:	f8d1 900c 	ldr.w	r9, [r1, #12]
   8440c:	f019 0f10 	tst.w	r9, #16
   84410:	d020      	beq.n	84454 <udd_ep_trans_done+0x154>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84412:	f1b8 0f00 	cmp.w	r8, #0
   84416:	d104      	bne.n	84422 <udd_ep_trans_done+0x122>
		cpu_irq_enable();
   84418:	2101      	movs	r1, #1
   8441a:	7001      	strb	r1, [r0, #0]
   8441c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84420:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   84422:	18f1      	adds	r1, r6, r3
   84424:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   84428:	68c8      	ldr	r0, [r1, #12]
   8442a:	6088      	str	r0, [r1, #8]
   8442c:	e7b3      	b.n	84396 <udd_ep_trans_done+0x96>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8442e:	f8de 1100 	ldr.w	r1, [lr, #256]	; 0x100
   84432:	f3c1 1101 	ubfx	r1, r1, #4, #2
   84436:	2901      	cmp	r1, #1
   84438:	d025      	beq.n	84486 <udd_ep_trans_done+0x186>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8443a:	f047 0735 	orr.w	r7, r7, #53	; 0x35
   8443e:	e7ce      	b.n	843de <udd_ep_trans_done+0xde>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84440:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84444:	f3c5 1501 	ubfx	r5, r5, #4, #2
   84448:	2d01      	cmp	r5, #1
   8444a:	d0c3      	beq.n	843d4 <udd_ep_trans_done+0xd4>
   8444c:	2735      	movs	r7, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8444e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   84452:	e7c4      	b.n	843de <udd_ep_trans_done+0xde>
			udd_enable_endpoint_dma_interrupt(ep);
   84454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84458:	608f      	str	r7, [r1, #8]
			udd_enable_endpoint_dma_interrupt(ep);
   8445a:	fa02 f303 	lsl.w	r3, r2, r3
			ptr_job->buf_cnt += next_trans;
   8445e:	f8de 200c 	ldr.w	r2, [lr, #12]
			ptr_job->buf_load = next_trans;
   84462:	f8ce 5010 	str.w	r5, [lr, #16]
			ptr_job->buf_cnt += next_trans;
   84466:	4415      	add	r5, r2
			udd_enable_endpoint_dma_interrupt(ep);
   84468:	4a0e      	ldr	r2, [pc, #56]	; (844a4 <udd_ep_trans_done+0x1a4>)
			ptr_job->buf_cnt += next_trans;
   8446a:	f8ce 500c 	str.w	r5, [lr, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   8446e:	6911      	ldr	r1, [r2, #16]
   84470:	430b      	orrs	r3, r1
   84472:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84474:	f1b8 0f00 	cmp.w	r8, #0
   84478:	d189      	bne.n	8438e <udd_ep_trans_done+0x8e>
		cpu_irq_enable();
   8447a:	2301      	movs	r3, #1
   8447c:	7003      	strb	r3, [r0, #0]
   8447e:	f3bf 8f5f 	dmb	sy
   84482:	b662      	cpsie	i
}
   84484:	e783      	b.n	8438e <udd_ep_trans_done+0x8e>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84486:	f8de 1100 	ldr.w	r1, [lr, #256]	; 0x100
   8448a:	f001 0e07 	and.w	lr, r1, #7
   8448e:	2108      	movs	r1, #8
   84490:	fa01 f10e 	lsl.w	r1, r1, lr
   84494:	42a9      	cmp	r1, r5
   84496:	d2d0      	bcs.n	8443a <udd_ep_trans_done+0x13a>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84498:	f047 0721 	orr.w	r7, r7, #33	; 0x21
   8449c:	e79f      	b.n	843de <udd_ep_trans_done+0xde>
   8449e:	bf00      	nop
   844a0:	20001f7c 	.word	0x20001f7c
   844a4:	400a4000 	.word	0x400a4000
   844a8:	000842c1 	.word	0x000842c1
   844ac:	400a4300 	.word	0x400a4300
   844b0:	20000b40 	.word	0x20000b40

000844b4 <udd_ctrl_in_sent>:
{
   844b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   844b8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   844bc:	b672      	cpsid	i
   844be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   844c2:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   844c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   844c8:	4d59      	ldr	r5, [pc, #356]	; (84630 <udd_ctrl_in_sent+0x17c>)
   844ca:	4a5a      	ldr	r2, [pc, #360]	; (84634 <udd_ctrl_in_sent+0x180>)
   844cc:	7028      	strb	r0, [r5, #0]
   844ce:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   844d2:	b923      	cbnz	r3, 844de <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   844d4:	2301      	movs	r3, #1
   844d6:	702b      	strb	r3, [r5, #0]
   844d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   844dc:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   844de:	f8df 8158 	ldr.w	r8, [pc, #344]	; 84638 <udd_ctrl_in_sent+0x184>
   844e2:	f898 3000 	ldrb.w	r3, [r8]
   844e6:	2b03      	cmp	r3, #3
   844e8:	d063      	beq.n	845b2 <udd_ctrl_in_sent+0xfe>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   844ea:	4f54      	ldr	r7, [pc, #336]	; (8463c <udd_ctrl_in_sent+0x188>)
   844ec:	4e54      	ldr	r6, [pc, #336]	; (84640 <udd_ctrl_in_sent+0x18c>)
   844ee:	883a      	ldrh	r2, [r7, #0]
   844f0:	89b4      	ldrh	r4, [r6, #12]
   844f2:	1aa4      	subs	r4, r4, r2
   844f4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   844f6:	2c00      	cmp	r4, #0
   844f8:	d038      	beq.n	8456c <udd_ctrl_in_sent+0xb8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   844fa:	4613      	mov	r3, r2
   844fc:	f8df 9144 	ldr.w	r9, [pc, #324]	; 84644 <udd_ctrl_in_sent+0x190>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84500:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   84502:	bf86      	itte	hi
   84504:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84506:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   84508:	2201      	movls	r2, #1
   8450a:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8450e:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84510:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   84514:	b672      	cpsid	i
   84516:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8451a:	2100      	movs	r1, #0
   8451c:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   8451e:	4945      	ldr	r1, [pc, #276]	; (84634 <udd_ctrl_in_sent+0x180>)
   84520:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   84524:	0589      	lsls	r1, r1, #22
   84526:	d439      	bmi.n	8459c <udd_ctrl_in_sent+0xe8>
	for (i = 0; i < nb_remain; i++) {
   84528:	b154      	cbz	r4, 84540 <udd_ctrl_in_sent+0x8c>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8452a:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8452c:	4b46      	ldr	r3, [pc, #280]	; (84648 <udd_ctrl_in_sent+0x194>)
		*ptr_dest++ = *ptr_src++;
   8452e:	4618      	mov	r0, r3
   84530:	3301      	adds	r3, #1
   84532:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   84536:	b2d9      	uxtb	r1, r3
   84538:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   8453a:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   8453e:	d3f6      	bcc.n	8452e <udd_ctrl_in_sent+0x7a>
	udd_ack_in_send(0);
   84540:	f44f 6280 	mov.w	r2, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   84544:	f44f 6100 	mov.w	r1, #2048	; 0x800
	udd_ctrl_payload_buf_cnt += nb_remain;
   84548:	883b      	ldrh	r3, [r7, #0]
   8454a:	441c      	add	r4, r3
	udd_ack_in_send(0);
   8454c:	4b39      	ldr	r3, [pc, #228]	; (84634 <udd_ctrl_in_sent+0x180>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   8454e:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   84550:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84554:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84558:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8455c:	b926      	cbnz	r6, 84568 <udd_ctrl_in_sent+0xb4>
		cpu_irq_enable();
   8455e:	2301      	movs	r3, #1
   84560:	702b      	strb	r3, [r5, #0]
   84562:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84566:	b662      	cpsie	i
}
   84568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8456c:	4937      	ldr	r1, [pc, #220]	; (8464c <udd_ctrl_in_sent+0x198>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8456e:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84570:	880b      	ldrh	r3, [r1, #0]
   84572:	4413      	add	r3, r2
   84574:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84576:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84578:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8457a:	d040      	beq.n	845fe <udd_ctrl_in_sent+0x14a>
				|| b_shortpacket) {
   8457c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 84644 <udd_ctrl_in_sent+0x190>
   84580:	f899 a000 	ldrb.w	sl, [r9]
   84584:	f1ba 0f00 	cmp.w	sl, #0
   84588:	d139      	bne.n	845fe <udd_ctrl_in_sent+0x14a>
		if ((!udd_g_ctrlreq.over_under_run)
   8458a:	6973      	ldr	r3, [r6, #20]
   8458c:	2b00      	cmp	r3, #0
   8458e:	d033      	beq.n	845f8 <udd_ctrl_in_sent+0x144>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84590:	4798      	blx	r3
   84592:	2800      	cmp	r0, #0
   84594:	d147      	bne.n	84626 <udd_ctrl_in_sent+0x172>
		b_shortpacket = true;
   84596:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84598:	883b      	ldrh	r3, [r7, #0]
   8459a:	e7b6      	b.n	8450a <udd_ctrl_in_sent+0x56>
	if (cpu_irq_is_enabled_flags(flags))
   8459c:	b926      	cbnz	r6, 845a8 <udd_ctrl_in_sent+0xf4>
		cpu_irq_enable();
   8459e:	2301      	movs	r3, #1
   845a0:	702b      	strb	r3, [r5, #0]
   845a2:	f3bf 8f5f 	dmb	sy
   845a6:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   845a8:	2304      	movs	r3, #4
   845aa:	f888 3000 	strb.w	r3, [r8]
}
   845ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   845b2:	4e23      	ldr	r6, [pc, #140]	; (84640 <udd_ctrl_in_sent+0x18c>)
   845b4:	6933      	ldr	r3, [r6, #16]
   845b6:	b103      	cbz	r3, 845ba <udd_ctrl_in_sent+0x106>
		udd_g_ctrlreq.callback();
   845b8:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   845ba:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   845be:	b672      	cpsid	i
   845c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   845c4:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   845c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   845ca:	4a1a      	ldr	r2, [pc, #104]	; (84634 <udd_ctrl_in_sent+0x180>)
   845cc:	7028      	strb	r0, [r5, #0]
   845ce:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   845d2:	b923      	cbnz	r3, 845de <udd_ctrl_in_sent+0x12a>
		cpu_irq_enable();
   845d4:	2301      	movs	r3, #1
   845d6:	702b      	strb	r3, [r5, #0]
   845d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   845dc:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   845de:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   845e0:	f44f 7100 	mov.w	r1, #512	; 0x200
   845e4:	4a13      	ldr	r2, [pc, #76]	; (84634 <udd_ctrl_in_sent+0x180>)
   845e6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   845ea:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   845ee:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   845f0:	f888 3000 	strb.w	r3, [r8]
}
   845f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   845f8:	4613      	mov	r3, r2
		b_shortpacket = true;
   845fa:	2201      	movs	r2, #1
   845fc:	e785      	b.n	8450a <udd_ctrl_in_sent+0x56>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   845fe:	2304      	movs	r3, #4
   84600:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84604:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84608:	b672      	cpsid	i
   8460a:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   8460e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	cpu_irq_disable();
   84612:	2000      	movs	r0, #0
   84614:	4b07      	ldr	r3, [pc, #28]	; (84634 <udd_ctrl_in_sent+0x180>)
   84616:	7028      	strb	r0, [r5, #0]
   84618:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8461c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84620:	2900      	cmp	r1, #0
   84622:	d1a1      	bne.n	84568 <udd_ctrl_in_sent+0xb4>
   84624:	e79b      	b.n	8455e <udd_ctrl_in_sent+0xaa>
			udd_ctrl_payload_buf_cnt = 0;
   84626:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84628:	4653      	mov	r3, sl
   8462a:	89b4      	ldrh	r4, [r6, #12]
   8462c:	e768      	b.n	84500 <udd_ctrl_in_sent+0x4c>
   8462e:	bf00      	nop
   84630:	20000b40 	.word	0x20000b40
   84634:	400a4000 	.word	0x400a4000
   84638:	20001f7a 	.word	0x20001f7a
   8463c:	20001f76 	.word	0x20001f76
   84640:	2000200c 	.word	0x2000200c
   84644:	20001f74 	.word	0x20001f74
   84648:	20180000 	.word	0x20180000
   8464c:	20001f78 	.word	0x20001f78

00084650 <UDPHS_Handler>:
{
   84650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   84654:	4ba6      	ldr	r3, [pc, #664]	; (848f0 <UDPHS_Handler+0x2a0>)
   84656:	201d      	movs	r0, #29
   84658:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8465a:	4ba6      	ldr	r3, [pc, #664]	; (848f4 <UDPHS_Handler+0x2a4>)
   8465c:	4798      	blx	r3
   8465e:	b928      	cbnz	r0, 8466c <UDPHS_Handler+0x1c>
   84660:	4ba5      	ldr	r3, [pc, #660]	; (848f8 <UDPHS_Handler+0x2a8>)
   84662:	695b      	ldr	r3, [r3, #20]
   84664:	f013 0302 	ands.w	r3, r3, #2
   84668:	f000 809a 	beq.w	847a0 <UDPHS_Handler+0x150>
	if (Is_udd_sof()) {
   8466c:	4ba2      	ldr	r3, [pc, #648]	; (848f8 <UDPHS_Handler+0x2a8>)
   8466e:	695a      	ldr	r2, [r3, #20]
   84670:	0712      	lsls	r2, r2, #28
   84672:	f100 8086 	bmi.w	84782 <UDPHS_Handler+0x132>
	if (Is_udd_msof()) {
   84676:	695a      	ldr	r2, [r3, #20]
   84678:	0756      	lsls	r6, r2, #29
   8467a:	f100 808b 	bmi.w	84794 <UDPHS_Handler+0x144>
	uint32_t status = udd_get_endpoint_status(0);
   8467e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84682:	6959      	ldr	r1, [r3, #20]
   84684:	05cd      	lsls	r5, r1, #23
   84686:	d521      	bpl.n	846cc <UDPHS_Handler+0x7c>
	udd_disable_nak_in_interrupt(0);
   84688:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	udd_disable_nak_out_interrupt(0);
   8468c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	if (Is_udd_endpoint_status_setup_received(status)) {
   84690:	04d4      	lsls	r4, r2, #19
	udd_disable_nak_in_interrupt(0);
   84692:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   84696:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8469a:	f100 80ae 	bmi.w	847fa <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_in_sent(status)
   8469e:	0550      	lsls	r0, r2, #21
   846a0:	d504      	bpl.n	846ac <UDPHS_Handler+0x5c>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   846a2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   846a6:	0559      	lsls	r1, r3, #21
   846a8:	f100 8209 	bmi.w	84abe <UDPHS_Handler+0x46e>
	if (Is_udd_endpoint_status_out_received(status)) {
   846ac:	0593      	lsls	r3, r2, #22
   846ae:	f100 80ee 	bmi.w	8488e <UDPHS_Handler+0x23e>
	if (Is_udd_endpoint_status_stall(status)) {
   846b2:	0497      	lsls	r7, r2, #18
   846b4:	d504      	bpl.n	846c0 <UDPHS_Handler+0x70>
		udd_ack_stall(0);
   846b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   846ba:	4b8f      	ldr	r3, [pc, #572]	; (848f8 <UDPHS_Handler+0x2a8>)
   846bc:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   846c0:	0416      	lsls	r6, r2, #16
   846c2:	f100 812d 	bmi.w	84920 <UDPHS_Handler+0x2d0>
	if (Is_udd_endpoint_status_nak_in(status)) {
   846c6:	0454      	lsls	r4, r2, #17
   846c8:	f100 80cc 	bmi.w	84864 <UDPHS_Handler+0x214>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   846cc:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   846ce:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   846d2:	f44f 7880 	mov.w	r8, #256	; 0x100
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   846d6:	4c88      	ldr	r4, [pc, #544]	; (848f8 <UDPHS_Handler+0x2a8>)
   846d8:	6925      	ldr	r5, [r4, #16]
   846da:	f103 3eff 	add.w	lr, r3, #4294967295
   846de:	fa07 f10e 	lsl.w	r1, r7, lr
   846e2:	420d      	tst	r5, r1
   846e4:	b2da      	uxtb	r2, r3
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   846e6:	eb04 1643 	add.w	r6, r4, r3, lsl #5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   846ea:	d003      	beq.n	846f4 <UDPHS_Handler+0xa4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   846ec:	6960      	ldr	r0, [r4, #20]
   846ee:	4201      	tst	r1, r0
   846f0:	f040 8222 	bne.w	84b38 <UDPHS_Handler+0x4e8>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   846f4:	6921      	ldr	r1, [r4, #16]
   846f6:	fa08 f003 	lsl.w	r0, r8, r3
   846fa:	4201      	tst	r1, r0
   846fc:	d019      	beq.n	84732 <UDPHS_Handler+0xe2>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   846fe:	f8d6 110c 	ldr.w	r1, [r6, #268]	; 0x10c
   84702:	ea4f 1c43 	mov.w	ip, r3, lsl #5
   84706:	f411 6f00 	tst.w	r1, #2048	; 0x800
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8470a:	44a4      	add	ip, r4
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8470c:	d005      	beq.n	8471a <UDPHS_Handler+0xca>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8470e:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
   84712:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
   84716:	f000 8265 	beq.w	84be4 <UDPHS_Handler+0x594>
			if (Is_udd_bank_interrupt_enabled(ep)
   8471a:	f8dc 210c 	ldr.w	r2, [ip, #268]	; 0x10c
   8471e:	0352      	lsls	r2, r2, #13
   84720:	d507      	bpl.n	84732 <UDPHS_Handler+0xe2>
					&& (0 == udd_nb_busy_bank(ep))) {
   84722:	f8dc 211c 	ldr.w	r2, [ip, #284]	; 0x11c
   84726:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   8472a:	f3c2 4181 	ubfx	r1, r2, #18, #2
   8472e:	f000 8289 	beq.w	84c44 <UDPHS_Handler+0x5f4>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84732:	3301      	adds	r3, #1
   84734:	2b07      	cmp	r3, #7
   84736:	d1cf      	bne.n	846d8 <UDPHS_Handler+0x88>
	if (Is_udd_reset()) {
   84738:	4d6f      	ldr	r5, [pc, #444]	; (848f8 <UDPHS_Handler+0x2a8>)
   8473a:	696c      	ldr	r4, [r5, #20]
   8473c:	f014 0410 	ands.w	r4, r4, #16
   84740:	f040 813b 	bne.w	849ba <UDPHS_Handler+0x36a>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84744:	692b      	ldr	r3, [r5, #16]
   84746:	0799      	lsls	r1, r3, #30
   84748:	d534      	bpl.n	847b4 <UDPHS_Handler+0x164>
   8474a:	696b      	ldr	r3, [r5, #20]
   8474c:	079a      	lsls	r2, r3, #30
   8474e:	d531      	bpl.n	847b4 <UDPHS_Handler+0x164>
		udd_ack_wake_up();
   84750:	2320      	movs	r3, #32
		udd_ack_suspend();
   84752:	2102      	movs	r1, #2
		udd_ack_wake_up();
   84754:	61ab      	str	r3, [r5, #24]
		udd_disable_suspend_interrupt();
   84756:	692b      	ldr	r3, [r5, #16]
		udd_disable_periph_ck();
   84758:	4a68      	ldr	r2, [pc, #416]	; (848fc <UDPHS_Handler+0x2ac>)
		udd_disable_suspend_interrupt();
   8475a:	f023 0302 	bic.w	r3, r3, #2
   8475e:	612b      	str	r3, [r5, #16]
		udd_enable_wake_up_interrupt();
   84760:	692b      	ldr	r3, [r5, #16]
		udd_disable_periph_ck();
   84762:	201d      	movs	r0, #29
		udd_enable_wake_up_interrupt();
   84764:	f043 0320 	orr.w	r3, r3, #32
   84768:	612b      	str	r3, [r5, #16]
		udd_ack_suspend();
   8476a:	61a9      	str	r1, [r5, #24]
		udd_disable_periph_ck();
   8476c:	4790      	blx	r2
		UDC_SUSPEND_EVENT();
   8476e:	4b64      	ldr	r3, [pc, #400]	; (84900 <UDPHS_Handler+0x2b0>)
   84770:	4798      	blx	r3
	if (!b_idle && udd_b_idle) {
   84772:	4a64      	ldr	r2, [pc, #400]	; (84904 <UDPHS_Handler+0x2b4>)
   84774:	7813      	ldrb	r3, [r2, #0]
   84776:	2b00      	cmp	r3, #0
   84778:	f040 82ca 	bne.w	84d10 <UDPHS_Handler+0x6c0>
	udd_b_idle = b_idle;
   8477c:	2300      	movs	r3, #0
   8477e:	7013      	strb	r3, [r2, #0]
		goto udd_interrupt_end;
   84780:	e013      	b.n	847aa <UDPHS_Handler+0x15a>
		udd_ack_sof();
   84782:	2208      	movs	r2, #8
   84784:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84786:	695b      	ldr	r3, [r3, #20]
   84788:	07df      	lsls	r7, r3, #31
   8478a:	d510      	bpl.n	847ae <UDPHS_Handler+0x15e>
}
   8478c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_SOF_EVENT();
   84790:	4b5d      	ldr	r3, [pc, #372]	; (84908 <UDPHS_Handler+0x2b8>)
   84792:	4718      	bx	r3
		udd_ack_msof();
   84794:	2104      	movs	r1, #4
   84796:	6199      	str	r1, [r3, #24]
		udc_sof_notify();
   84798:	4a5c      	ldr	r2, [pc, #368]	; (8490c <UDPHS_Handler+0x2bc>)
}
   8479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udc_sof_notify();
   8479e:	4710      	bx	r2
   847a0:	b672      	cpsid	i
   847a2:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   847a6:	4a5a      	ldr	r2, [pc, #360]	; (84910 <UDPHS_Handler+0x2c0>)
   847a8:	7013      	strb	r3, [r2, #0]
}
   847aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   847ae:	4b57      	ldr	r3, [pc, #348]	; (8490c <UDPHS_Handler+0x2bc>)
   847b0:	4798      	blx	r3
   847b2:	e7eb      	b.n	8478c <UDPHS_Handler+0x13c>
	if (Is_udd_wake_up()) {
   847b4:	4b50      	ldr	r3, [pc, #320]	; (848f8 <UDPHS_Handler+0x2a8>)
   847b6:	695b      	ldr	r3, [r3, #20]
   847b8:	069b      	lsls	r3, r3, #26
   847ba:	d5f6      	bpl.n	847aa <UDPHS_Handler+0x15a>
	if (b_idle && !udd_b_idle) {
   847bc:	4a51      	ldr	r2, [pc, #324]	; (84904 <UDPHS_Handler+0x2b4>)
   847be:	7813      	ldrb	r3, [r2, #0]
   847c0:	2b00      	cmp	r3, #0
   847c2:	f000 8286 	beq.w	84cd2 <UDPHS_Handler+0x682>
		udd_ack_suspend();
   847c6:	2402      	movs	r4, #2
	udd_b_idle = b_idle;
   847c8:	2501      	movs	r5, #1
		udd_ack_wake_up();
   847ca:	2020      	movs	r0, #32
		udd_ack_suspend();
   847cc:	4b4a      	ldr	r3, [pc, #296]	; (848f8 <UDPHS_Handler+0x2a8>)
	udd_b_idle = b_idle;
   847ce:	7015      	strb	r5, [r2, #0]
		udd_ack_suspend();
   847d0:	619c      	str	r4, [r3, #24]
		udd_ack_wake_up();
   847d2:	6198      	str	r0, [r3, #24]
		udd_disable_wake_up_interrupt();
   847d4:	691a      	ldr	r2, [r3, #16]
		UDC_RESUME_EVENT();
   847d6:	494f      	ldr	r1, [pc, #316]	; (84914 <UDPHS_Handler+0x2c4>)
		udd_disable_wake_up_interrupt();
   847d8:	f022 0220 	bic.w	r2, r2, #32
   847dc:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   847de:	691a      	ldr	r2, [r3, #16]
   847e0:	4322      	orrs	r2, r4
   847e2:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   847e4:	691a      	ldr	r2, [r3, #16]
   847e6:	f042 0208 	orr.w	r2, r2, #8
   847ea:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   847ec:	691a      	ldr	r2, [r3, #16]
   847ee:	f042 0204 	orr.w	r2, r2, #4
   847f2:	611a      	str	r2, [r3, #16]
}
   847f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		UDC_RESUME_EVENT();
   847f8:	4708      	bx	r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   847fa:	4d47      	ldr	r5, [pc, #284]	; (84918 <UDPHS_Handler+0x2c8>)
   847fc:	782b      	ldrb	r3, [r5, #0]
   847fe:	b303      	cbz	r3, 84842 <UDPHS_Handler+0x1f2>
	if (udd_g_ctrlreq.callback) {
   84800:	4c46      	ldr	r4, [pc, #280]	; (8491c <UDPHS_Handler+0x2cc>)
   84802:	6923      	ldr	r3, [r4, #16]
   84804:	b103      	cbz	r3, 84808 <UDPHS_Handler+0x1b8>
		udd_g_ctrlreq.callback();
   84806:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84808:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8480c:	b672      	cpsid	i
   8480e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84812:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   84814:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84818:	4b3d      	ldr	r3, [pc, #244]	; (84910 <UDPHS_Handler+0x2c0>)
   8481a:	7019      	strb	r1, [r3, #0]
   8481c:	4936      	ldr	r1, [pc, #216]	; (848f8 <UDPHS_Handler+0x2a8>)
   8481e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84822:	b922      	cbnz	r2, 8482e <UDPHS_Handler+0x1de>
		cpu_irq_enable();
   84824:	2201      	movs	r2, #1
   84826:	701a      	strb	r2, [r3, #0]
   84828:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8482c:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   8482e:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84830:	f44f 7100 	mov.w	r1, #512	; 0x200
   84834:	4a30      	ldr	r2, [pc, #192]	; (848f8 <UDPHS_Handler+0x2a8>)
   84836:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   8483a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   8483e:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84840:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   84842:	4a2d      	ldr	r2, [pc, #180]	; (848f8 <UDPHS_Handler+0x2a8>)
   84844:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
   84848:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8484c:	2b08      	cmp	r3, #8
   8484e:	d07a      	beq.n	84946 <UDPHS_Handler+0x2f6>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84850:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84852:	2120      	movs	r1, #32
		udd_ack_setup_received(0);
   84854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84858:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   8485a:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
		udd_ack_setup_received(0);
   8485e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84862:	e7a2      	b.n	847aa <UDPHS_Handler+0x15a>
		udd_ack_nak_in(0);
   84864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   84868:	4a23      	ldr	r2, [pc, #140]	; (848f8 <UDPHS_Handler+0x2a8>)
   8486a:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	if (Is_udd_out_received(0))
   8486e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
   84872:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   84876:	d198      	bne.n	847aa <UDPHS_Handler+0x15a>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84878:	4827      	ldr	r0, [pc, #156]	; (84918 <UDPHS_Handler+0x2c8>)
   8487a:	7801      	ldrb	r1, [r0, #0]
   8487c:	2901      	cmp	r1, #1
   8487e:	f000 825b 	beq.w	84d38 <UDPHS_Handler+0x6e8>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84882:	2904      	cmp	r1, #4
   84884:	d191      	bne.n	847aa <UDPHS_Handler+0x15a>
		udd_enable_stall_handshake(0);
   84886:	2320      	movs	r3, #32
   84888:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
   8488c:	e78d      	b.n	847aa <UDPHS_Handler+0x15a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8488e:	4d22      	ldr	r5, [pc, #136]	; (84918 <UDPHS_Handler+0x2c8>)
   84890:	782b      	ldrb	r3, [r5, #0]
   84892:	2b01      	cmp	r3, #1
   84894:	f000 8117 	beq.w	84ac6 <UDPHS_Handler+0x476>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84898:	2b02      	cmp	r3, #2
   8489a:	f000 8169 	beq.w	84b70 <UDPHS_Handler+0x520>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8489e:	2b04      	cmp	r3, #4
   848a0:	f000 8166 	beq.w	84b70 <UDPHS_Handler+0x520>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   848a4:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   848a6:	2220      	movs	r2, #32
   848a8:	4b13      	ldr	r3, [pc, #76]	; (848f8 <UDPHS_Handler+0x2a8>)
   848aa:	4c1c      	ldr	r4, [pc, #112]	; (8491c <UDPHS_Handler+0x2cc>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   848ac:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   848ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   848b2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   848b6:	b672      	cpsid	i
   848b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   848bc:	2100      	movs	r1, #0
	udd_disable_in_send_interrupt(0);
   848be:	f44f 6080 	mov.w	r0, #1024	; 0x400
   848c2:	4b13      	ldr	r3, [pc, #76]	; (84910 <UDPHS_Handler+0x2c0>)
   848c4:	7019      	strb	r1, [r3, #0]
   848c6:	490c      	ldr	r1, [pc, #48]	; (848f8 <UDPHS_Handler+0x2a8>)
   848c8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   848cc:	b922      	cbnz	r2, 848d8 <UDPHS_Handler+0x288>
		cpu_irq_enable();
   848ce:	2201      	movs	r2, #1
   848d0:	701a      	strb	r2, [r3, #0]
   848d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   848d6:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   848d8:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   848da:	f44f 7100 	mov.w	r1, #512	; 0x200
   848de:	4a06      	ldr	r2, [pc, #24]	; (848f8 <UDPHS_Handler+0x2a8>)
   848e0:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_g_ctrlreq.over_under_run = NULL;
   848e4:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   848e8:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   848ea:	702b      	strb	r3, [r5, #0]
   848ec:	e75d      	b.n	847aa <UDPHS_Handler+0x15a>
   848ee:	bf00      	nop
   848f0:	00085b7d 	.word	0x00085b7d
   848f4:	00085f39 	.word	0x00085f39
   848f8:	400a4000 	.word	0x400a4000
   848fc:	00085ba1 	.word	0x00085ba1
   84900:	0008268d 	.word	0x0008268d
   84904:	20001f75 	.word	0x20001f75
   84908:	0008269d 	.word	0x0008269d
   8490c:	00081fc9 	.word	0x00081fc9
   84910:	20000b40 	.word	0x20000b40
   84914:	00082695 	.word	0x00082695
   84918:	20001f7a 	.word	0x20001f7a
   8491c:	2000200c 	.word	0x2000200c
		udd_ack_nak_out(0);
   84920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84924:	4bb7      	ldr	r3, [pc, #732]	; (84c04 <UDPHS_Handler+0x5b4>)
   84926:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   8492a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
   8492e:	0555      	lsls	r5, r2, #21
   84930:	f53f af3b 	bmi.w	847aa <UDPHS_Handler+0x15a>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84934:	4ab4      	ldr	r2, [pc, #720]	; (84c08 <UDPHS_Handler+0x5b8>)
   84936:	7812      	ldrb	r2, [r2, #0]
   84938:	2a03      	cmp	r2, #3
   8493a:	f47f af36 	bne.w	847aa <UDPHS_Handler+0x15a>
		udd_enable_stall_handshake(0);
   8493e:	2220      	movs	r2, #32
   84940:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84944:	e731      	b.n	847aa <UDPHS_Handler+0x15a>
   84946:	4ab1      	ldr	r2, [pc, #708]	; (84c0c <UDPHS_Handler+0x5bc>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84948:	4bb1      	ldr	r3, [pc, #708]	; (84c10 <UDPHS_Handler+0x5c0>)
	for (i = 0; i < 8; i++) {
   8494a:	48b2      	ldr	r0, [pc, #712]	; (84c14 <UDPHS_Handler+0x5c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   8494c:	4619      	mov	r1, r3
   8494e:	3301      	adds	r3, #1
   84950:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   84952:	4283      	cmp	r3, r0
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84954:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84958:	d1f8      	bne.n	8494c <UDPHS_Handler+0x2fc>
	if (udc_process_setup() == false) {
   8495a:	4baf      	ldr	r3, [pc, #700]	; (84c18 <UDPHS_Handler+0x5c8>)
   8495c:	4798      	blx	r3
   8495e:	2800      	cmp	r0, #0
   84960:	f000 810d 	beq.w	84b7e <UDPHS_Handler+0x52e>
	udd_ack_setup_received(0);
   84964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84968:	4ba6      	ldr	r3, [pc, #664]	; (84c04 <UDPHS_Handler+0x5b4>)
	if (Udd_setup_is_in()) {
   8496a:	4aac      	ldr	r2, [pc, #688]	; (84c1c <UDPHS_Handler+0x5cc>)
	udd_ack_setup_received(0);
   8496c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   84970:	f992 1000 	ldrsb.w	r1, [r2]
   84974:	2900      	cmp	r1, #0
   84976:	f2c0 81c0 	blt.w	84cfa <UDPHS_Handler+0x6aa>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8497a:	88d2      	ldrh	r2, [r2, #6]
   8497c:	2a00      	cmp	r2, #0
   8497e:	f000 81fc 	beq.w	84d7a <UDPHS_Handler+0x72a>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84982:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84984:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   84986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		udd_ctrl_prev_payload_buf_cnt = 0;
   8498a:	48a5      	ldr	r0, [pc, #660]	; (84c20 <UDPHS_Handler+0x5d0>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8498c:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   8498e:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84990:	48a4      	ldr	r0, [pc, #656]	; (84c24 <UDPHS_Handler+0x5d4>)
   84992:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   84994:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84998:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8499c:	b672      	cpsid	i
   8499e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   849a2:	48a1      	ldr	r0, [pc, #644]	; (84c28 <UDPHS_Handler+0x5d8>)
   849a4:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   849a6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   849aa:	2d00      	cmp	r5, #0
   849ac:	f47f aefd 	bne.w	847aa <UDPHS_Handler+0x15a>
		cpu_irq_enable();
   849b0:	7004      	strb	r4, [r0, #0]
   849b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   849b6:	b662      	cpsie	i
   849b8:	e6f7      	b.n	847aa <UDPHS_Handler+0x15a>
		udd_ack_reset();
   849ba:	4f9c      	ldr	r7, [pc, #624]	; (84c2c <UDPHS_Handler+0x5dc>)
   849bc:	2310      	movs	r3, #16
   849be:	463e      	mov	r6, r7
   849c0:	2401      	movs	r4, #1
   849c2:	61ab      	str	r3, [r5, #24]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   849c4:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
   849c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   849ca:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   849ce:	7d18      	ldrb	r0, [r3, #20]
	if (Is_udd_endpoint_in(ep_num)) {
   849d0:	f104 0108 	add.w	r1, r4, #8
	if (ptr_job->busy == false) {
   849d4:	f010 0f01 	tst.w	r0, #1
   849d8:	b2e2      	uxtb	r2, r4
	if (Is_udd_endpoint_in(ep_num)) {
   849da:	ea4f 1141 	mov.w	r1, r1, lsl #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   849de:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
   849e2:	d00c      	beq.n	849fe <UDPHS_Handler+0x3ae>
	ptr_job->busy = false;
   849e4:	f36f 0000 	bfc	r0, #0, #1
   849e8:	7518      	strb	r0, [r3, #20]
	if (NULL == ptr_job->call_trans) {
   849ea:	6833      	ldr	r3, [r6, #0]
   849ec:	b13b      	cbz	r3, 849fe <UDPHS_Handler+0x3ae>
	if (Is_udd_endpoint_in(ep_num)) {
   849ee:	5869      	ldr	r1, [r5, r1]
   849f0:	0708      	lsls	r0, r1, #28
		ep_num |= USB_EP_DIR_IN;
   849f2:	bf48      	it	mi
   849f4:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   849f8:	2001      	movs	r0, #1
   849fa:	68b1      	ldr	r1, [r6, #8]
   849fc:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   849fe:	2c07      	cmp	r4, #7
   84a00:	f106 0618 	add.w	r6, r6, #24
   84a04:	d1de      	bne.n	849c4 <UDPHS_Handler+0x374>
		udc_reset();
   84a06:	4b8a      	ldr	r3, [pc, #552]	; (84c30 <UDPHS_Handler+0x5e0>)
   84a08:	4798      	blx	r3
	udd_enable_endpoint(0);
   84a0a:	2001      	movs	r0, #1
	udd_configure_address(0);
   84a0c:	4b7d      	ldr	r3, [pc, #500]	; (84c04 <UDPHS_Handler+0x5b4>)
   84a0e:	681a      	ldr	r2, [r3, #0]
   84a10:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84a14:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84a16:	681a      	ldr	r2, [r3, #0]
   84a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84a1c:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84a1e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84a22:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84a26:	f022 0203 	bic.w	r2, r2, #3
   84a2a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   84a2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84a32:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84a36:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84a3a:	b672      	cpsid	i
   84a3c:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   84a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	cpu_irq_disable();
   84a44:	2500      	movs	r5, #0
   84a46:	4a78      	ldr	r2, [pc, #480]	; (84c28 <UDPHS_Handler+0x5d8>)
   84a48:	7015      	strb	r5, [r2, #0]
   84a4a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
   84a52:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84a56:	6919      	ldr	r1, [r3, #16]
   84a58:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   84a5c:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84a5e:	b91c      	cbnz	r4, 84a68 <UDPHS_Handler+0x418>
		cpu_irq_enable();
   84a60:	7010      	strb	r0, [r2, #0]
   84a62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a66:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84a68:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84a6c:	b672      	cpsid	i
   84a6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84a72:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   84a74:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84a78:	4962      	ldr	r1, [pc, #392]	; (84c04 <UDPHS_Handler+0x5b4>)
   84a7a:	7014      	strb	r4, [r2, #0]
   84a7c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84a80:	b923      	cbnz	r3, 84a8c <UDPHS_Handler+0x43c>
		cpu_irq_enable();
   84a82:	2301      	movs	r3, #1
   84a84:	7013      	strb	r3, [r2, #0]
   84a86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a8a:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84a8c:	2200      	movs	r2, #0
	udd_ack_out_received(0);
   84a8e:	f44f 7400 	mov.w	r4, #512	; 0x200
   84a92:	4b5c      	ldr	r3, [pc, #368]	; (84c04 <UDPHS_Handler+0x5b4>)
	udd_g_ctrlreq.callback = NULL;
   84a94:	4861      	ldr	r0, [pc, #388]	; (84c1c <UDPHS_Handler+0x5cc>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84a96:	495c      	ldr	r1, [pc, #368]	; (84c08 <UDPHS_Handler+0x5b8>)
	udd_g_ctrlreq.callback = NULL;
   84a98:	6102      	str	r2, [r0, #16]
	udd_ack_out_received(0);
   84a9a:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84a9e:	700a      	strb	r2, [r1, #0]
		udd_enable_sof_interrupt();
   84aa0:	6919      	ldr	r1, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84aa2:	6142      	str	r2, [r0, #20]
		udd_enable_sof_interrupt();
   84aa4:	f041 0108 	orr.w	r1, r1, #8
   84aa8:	6119      	str	r1, [r3, #16]
		udd_enable_msof_interrupt();
   84aaa:	6919      	ldr	r1, [r3, #16]
	udd_g_ctrlreq.payload_size = 0;
   84aac:	8182      	strh	r2, [r0, #12]
		udd_enable_msof_interrupt();
   84aae:	f041 0104 	orr.w	r1, r1, #4
   84ab2:	6119      	str	r1, [r3, #16]
		udd_enable_suspend_interrupt();
   84ab4:	691a      	ldr	r2, [r3, #16]
   84ab6:	f042 0202 	orr.w	r2, r2, #2
   84aba:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84abc:	e675      	b.n	847aa <UDPHS_Handler+0x15a>
		udd_ctrl_in_sent();
   84abe:	4b5d      	ldr	r3, [pc, #372]	; (84c34 <UDPHS_Handler+0x5e4>)
}
   84ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent();
   84ac4:	4718      	bx	r3
	nb_data = udd_byte_count(0);
   84ac6:	4b4f      	ldr	r3, [pc, #316]	; (84c04 <UDPHS_Handler+0x5b4>)
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84ac8:	4f56      	ldr	r7, [pc, #344]	; (84c24 <UDPHS_Handler+0x5d4>)
	nb_data = udd_byte_count(0);
   84aca:	f8d3 611c 	ldr.w	r6, [r3, #284]	; 0x11c
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84ace:	4c53      	ldr	r4, [pc, #332]	; (84c1c <UDPHS_Handler+0x5cc>)
   84ad0:	883b      	ldrh	r3, [r7, #0]
   84ad2:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   84ad6:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84ada:	199a      	adds	r2, r3, r6
   84adc:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   84ade:	bfac      	ite	ge
   84ae0:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84ae4:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84ae8:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84aea:	bfb8      	it	lt
   84aec:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84aee:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   84af0:	2e00      	cmp	r6, #0
   84af2:	f000 8154 	beq.w	84d9e <UDPHS_Handler+0x74e>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84af6:	4b46      	ldr	r3, [pc, #280]	; (84c10 <UDPHS_Handler+0x5c0>)
		*ptr_dest++ = *ptr_src++;
   84af8:	4618      	mov	r0, r3
   84afa:	3301      	adds	r3, #1
   84afc:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   84afe:	b2d9      	uxtb	r1, r3
   84b00:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   84b02:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   84b06:	d3f7      	bcc.n	84af8 <UDPHS_Handler+0x4a8>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84b08:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   84b0a:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84b0e:	f000 80b9 	beq.w	84c84 <UDPHS_Handler+0x634>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84b12:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84b14:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84b18:	2b00      	cmp	r3, #0
   84b1a:	d03b      	beq.n	84b94 <UDPHS_Handler+0x544>
			if (!udd_g_ctrlreq.over_under_run()) {
   84b1c:	4798      	blx	r3
   84b1e:	2800      	cmp	r0, #0
   84b20:	d138      	bne.n	84b94 <UDPHS_Handler+0x544>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b22:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84b24:	2120      	movs	r1, #32
			udd_ack_out_received(0);
   84b26:	f44f 7200 	mov.w	r2, #512	; 0x200
	udd_enable_stall_handshake(0);
   84b2a:	4b36      	ldr	r3, [pc, #216]	; (84c04 <UDPHS_Handler+0x5b4>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b2c:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84b2e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
			udd_ack_out_received(0);
   84b32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   84b36:	e638      	b.n	847aa <UDPHS_Handler+0x15a>
			if (udd_endpoint_dma_get_status(ep)
   84b38:	483f      	ldr	r0, [pc, #252]	; (84c38 <UDPHS_Handler+0x5e8>)
   84b3a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   84b3e:	68d8      	ldr	r0, [r3, #12]
   84b40:	07c0      	lsls	r0, r0, #31
   84b42:	f53f ae32 	bmi.w	847aa <UDPHS_Handler+0x15a>
			udd_disable_endpoint_dma_interrupt(ep);
   84b46:	6920      	ldr	r0, [r4, #16]
   84b48:	ea20 0101 	bic.w	r1, r0, r1
   84b4c:	6121      	str	r1, [r4, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84b4e:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   84b50:	0c1b      	lsrs	r3, r3, #16
   84b52:	d008      	beq.n	84b66 <UDPHS_Handler+0x516>
				ptr_job->buf_cnt -= nb_remaining;
   84b54:	4935      	ldr	r1, [pc, #212]	; (84c2c <UDPHS_Handler+0x5dc>)
   84b56:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   84b5a:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
   84b5e:	68c8      	ldr	r0, [r1, #12]
   84b60:	1ac3      	subs	r3, r0, r3
				ptr_job->buf_size = ptr_job->buf_cnt;
   84b62:	e9c1 3302 	strd	r3, r3, [r1, #8]
}
   84b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			udd_ep_trans_done(ep);
   84b6a:	4610      	mov	r0, r2
   84b6c:	4b33      	ldr	r3, [pc, #204]	; (84c3c <UDPHS_Handler+0x5ec>)
   84b6e:	4718      	bx	r3
	if (udd_g_ctrlreq.callback) {
   84b70:	4c2a      	ldr	r4, [pc, #168]	; (84c1c <UDPHS_Handler+0x5cc>)
   84b72:	6923      	ldr	r3, [r4, #16]
   84b74:	2b00      	cmp	r3, #0
   84b76:	f43f ae9c 	beq.w	848b2 <UDPHS_Handler+0x262>
		udd_g_ctrlreq.callback();
   84b7a:	4798      	blx	r3
   84b7c:	e699      	b.n	848b2 <UDPHS_Handler+0x262>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b7e:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84b80:	2120      	movs	r1, #32
		udd_ack_setup_received(0);
   84b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	udd_enable_stall_handshake(0);
   84b86:	4b1f      	ldr	r3, [pc, #124]	; (84c04 <UDPHS_Handler+0x5b4>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b88:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84b8a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		udd_ack_setup_received(0);
   84b8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84b92:	e60a      	b.n	847aa <UDPHS_Handler+0x15a>
		udd_ack_out_received(0);
   84b94:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84b98:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   84b9a:	4b1a      	ldr	r3, [pc, #104]	; (84c04 <UDPHS_Handler+0x5b4>)
   84b9c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84ba0:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ba2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84ba6:	b672      	cpsid	i
   84ba8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84bac:	2500      	movs	r5, #0
   84bae:	481e      	ldr	r0, [pc, #120]	; (84c28 <UDPHS_Handler+0x5d8>)
	udd_ack_in_send(0);
   84bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84bb4:	7005      	strb	r5, [r0, #0]
	udd_ack_nak_out(0);
   84bb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	udd_raise_tx_pkt_ready(0);
   84bba:	f44f 6500 	mov.w	r5, #2048	; 0x800
	udd_ack_in_send(0);
   84bbe:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84bc2:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84bc6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_ack_nak_out(0);
   84bca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84bce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84bd2:	2c00      	cmp	r4, #0
   84bd4:	f47f ade9 	bne.w	847aa <UDPHS_Handler+0x15a>
		cpu_irq_enable();
   84bd8:	2301      	movs	r3, #1
   84bda:	7003      	strb	r3, [r0, #0]
   84bdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84be0:	b662      	cpsie	i
   84be2:	e5e2      	b.n	847aa <UDPHS_Handler+0x15a>
				udd_disable_tx_pkt_ready_interrupt(ep);
   84be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
				udd_ep_finish_job(ptr_job, false, ep);
   84be8:	4c15      	ldr	r4, [pc, #84]	; (84c40 <UDPHS_Handler+0x5f0>)
		ptr_job = &udd_ep_job[ep - 1];
   84bea:	4810      	ldr	r0, [pc, #64]	; (84c2c <UDPHS_Handler+0x5dc>)
				udd_disable_tx_pkt_ready_interrupt(ep);
   84bec:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		ptr_job = &udd_ep_job[ep - 1];
   84bf0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
				udd_raise_tx_pkt_ready(ep);
   84bf4:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
				udd_ep_finish_job(ptr_job, false, ep);
   84bf8:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
   84bfc:	4623      	mov	r3, r4
}
   84bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				udd_ep_finish_job(ptr_job, false, ep);
   84c02:	4718      	bx	r3
   84c04:	400a4000 	.word	0x400a4000
   84c08:	20001f7a 	.word	0x20001f7a
   84c0c:	2000200b 	.word	0x2000200b
   84c10:	20180000 	.word	0x20180000
   84c14:	20180008 	.word	0x20180008
   84c18:	00082005 	.word	0x00082005
   84c1c:	2000200c 	.word	0x2000200c
   84c20:	20001f78 	.word	0x20001f78
   84c24:	20001f76 	.word	0x20001f76
   84c28:	20000b40 	.word	0x20000b40
   84c2c:	20001f7c 	.word	0x20001f7c
   84c30:	00081f85 	.word	0x00081f85
   84c34:	000844b5 	.word	0x000844b5
   84c38:	400a4300 	.word	0x400a4300
   84c3c:	00084301 	.word	0x00084301
   84c40:	000842c1 	.word	0x000842c1
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84c44:	f44f 2380 	mov.w	r3, #262144	; 0x40000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   84c48:	2520      	movs	r5, #32
				udd_reset_data_toggle(ep);
   84c4a:	2240      	movs	r2, #64	; 0x40
				udd_disable_bank_interrupt(ep);
   84c4c:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84c50:	6923      	ldr	r3, [r4, #16]
				ptr_job->stall_requested = false;
   84c52:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
				udd_disable_endpoint_interrupt(ep);
   84c56:	ea23 0000 	bic.w	r0, r3, r0
				ptr_job->stall_requested = false;
   84c5a:	4b5a      	ldr	r3, [pc, #360]	; (84dc4 <UDPHS_Handler+0x774>)
				udd_disable_endpoint_interrupt(ep);
   84c5c:	6120      	str	r0, [r4, #16]
				ptr_job->stall_requested = false;
   84c5e:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   84c62:	f89e 3014 	ldrb.w	r3, [lr, #20]
   84c66:	f361 0382 	bfi	r3, r1, #2, #1
   84c6a:	f88e 3014 	strb.w	r3, [lr, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84c6e:	f8dc 3108 	ldr.w	r3, [ip, #264]	; 0x108
   84c72:	f023 0302 	bic.w	r3, r3, #2
   84c76:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84c7a:	f8cc 5114 	str.w	r5, [ip, #276]	; 0x114
				udd_reset_data_toggle(ep);
   84c7e:	f8cc 2118 	str.w	r2, [ip, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   84c82:	e592      	b.n	847aa <UDPHS_Handler+0x15a>
			(udd_ctrl_prev_payload_buf_cnt +
   84c84:	4e50      	ldr	r6, [pc, #320]	; (84dc8 <UDPHS_Handler+0x778>)
			|| (udd_g_ctrlreq.req.wLength <=
   84c86:	88e2      	ldrh	r2, [r4, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   84c88:	8833      	ldrh	r3, [r6, #0]
   84c8a:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   84c8c:	429a      	cmp	r2, r3
   84c8e:	f77f af40 	ble.w	84b12 <UDPHS_Handler+0x4c2>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84c92:	89a3      	ldrh	r3, [r4, #12]
   84c94:	4563      	cmp	r3, ip
   84c96:	f000 8085 	beq.w	84da4 <UDPHS_Handler+0x754>
	udd_ack_out_received(0);
   84c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
	udd_ack_nak_in(0);
   84c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	udd_ack_out_received(0);
   84ca2:	4b4a      	ldr	r3, [pc, #296]	; (84dcc <UDPHS_Handler+0x77c>)
   84ca4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   84ca8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84cb0:	b672      	cpsid	i
   84cb2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84cb6:	2400      	movs	r4, #0
   84cb8:	4945      	ldr	r1, [pc, #276]	; (84dd0 <UDPHS_Handler+0x780>)
   84cba:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   84cbc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84cc0:	2800      	cmp	r0, #0
   84cc2:	f47f ad72 	bne.w	847aa <UDPHS_Handler+0x15a>
		cpu_irq_enable();
   84cc6:	2301      	movs	r3, #1
   84cc8:	700b      	strb	r3, [r1, #0]
   84cca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84cce:	b662      	cpsie	i
   84cd0:	e56b      	b.n	847aa <UDPHS_Handler+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cd2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84cd6:	b672      	cpsid	i
   84cd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84cdc:	483c      	ldr	r0, [pc, #240]	; (84dd0 <UDPHS_Handler+0x780>)
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   84cde:	493d      	ldr	r1, [pc, #244]	; (84dd4 <UDPHS_Handler+0x784>)
   84ce0:	7003      	strb	r3, [r0, #0]
   84ce2:	788b      	ldrb	r3, [r1, #2]
   84ce4:	3301      	adds	r3, #1
   84ce6:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84ce8:	2c00      	cmp	r4, #0
   84cea:	f47f ad6c 	bne.w	847c6 <UDPHS_Handler+0x176>
		cpu_irq_enable();
   84cee:	2301      	movs	r3, #1
   84cf0:	7003      	strb	r3, [r0, #0]
   84cf2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84cf6:	b662      	cpsie	i
}
   84cf8:	e565      	b.n	847c6 <UDPHS_Handler+0x176>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84cfa:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84cfc:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   84cfe:	4c32      	ldr	r4, [pc, #200]	; (84dc8 <UDPHS_Handler+0x778>)
		udd_ctrl_payload_buf_cnt = 0;
   84d00:	4835      	ldr	r0, [pc, #212]	; (84dd8 <UDPHS_Handler+0x788>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   84d02:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84d04:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84d06:	7029      	strb	r1, [r5, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84d08:	4a34      	ldr	r2, [pc, #208]	; (84ddc <UDPHS_Handler+0x78c>)
}
   84d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   84d0e:	4710      	bx	r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d10:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84d14:	b672      	cpsid	i
   84d16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d1a:	482d      	ldr	r0, [pc, #180]	; (84dd0 <UDPHS_Handler+0x780>)
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84d1c:	492d      	ldr	r1, [pc, #180]	; (84dd4 <UDPHS_Handler+0x784>)
   84d1e:	7004      	strb	r4, [r0, #0]
   84d20:	788b      	ldrb	r3, [r1, #2]
   84d22:	3b01      	subs	r3, #1
   84d24:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84d26:	2d00      	cmp	r5, #0
   84d28:	f47f ad28 	bne.w	8477c <UDPHS_Handler+0x12c>
		cpu_irq_enable();
   84d2c:	2301      	movs	r3, #1
   84d2e:	7003      	strb	r3, [r0, #0]
   84d30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d34:	b662      	cpsie	i
}
   84d36:	e521      	b.n	8477c <UDPHS_Handler+0x12c>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84d38:	2403      	movs	r4, #3
   84d3a:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84d40:	b672      	cpsid	i
   84d42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d46:	4c22      	ldr	r4, [pc, #136]	; (84dd0 <UDPHS_Handler+0x780>)
	udd_ack_in_send(0);
   84d48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84d4c:	7023      	strb	r3, [r4, #0]
	udd_raise_tx_pkt_ready(0);
   84d4e:	f44f 6600 	mov.w	r6, #2048	; 0x800
	udd_ack_nak_out(0);
   84d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	udd_ack_in_send(0);
   84d56:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84d5a:	f8c2 6114 	str.w	r6, [r2, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84d5e:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
	udd_ack_nak_out(0);
   84d62:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84d66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84d6a:	2d00      	cmp	r5, #0
   84d6c:	f47f ad1d 	bne.w	847aa <UDPHS_Handler+0x15a>
		cpu_irq_enable();
   84d70:	7021      	strb	r1, [r4, #0]
   84d72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d76:	b662      	cpsie	i
   84d78:	e517      	b.n	847aa <UDPHS_Handler+0x15a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84d7a:	2103      	movs	r1, #3
   84d7c:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84d82:	b672      	cpsid	i
   84d84:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   84d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
	cpu_irq_disable();
   84d8c:	4810      	ldr	r0, [pc, #64]	; (84dd0 <UDPHS_Handler+0x780>)
	udd_raise_tx_pkt_ready(0);
   84d8e:	f44f 6500 	mov.w	r5, #2048	; 0x800
   84d92:	7002      	strb	r2, [r0, #0]
	udd_ack_nak_out(0);
   84d94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	udd_ack_in_send(0);
   84d98:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84d9c:	e711      	b.n	84bc2 <UDPHS_Handler+0x572>
	udd_ctrl_payload_buf_cnt += nb_data;
   84d9e:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84da2:	e6b6      	b.n	84b12 <UDPHS_Handler+0x4c2>
		if (!udd_g_ctrlreq.over_under_run) {
   84da4:	6963      	ldr	r3, [r4, #20]
   84da6:	2b00      	cmp	r3, #0
   84da8:	f43f aebb 	beq.w	84b22 <UDPHS_Handler+0x4d2>
		if (!udd_g_ctrlreq.over_under_run()) {
   84dac:	4798      	blx	r3
   84dae:	2800      	cmp	r0, #0
   84db0:	f43f aeb7 	beq.w	84b22 <UDPHS_Handler+0x4d2>
		udd_ctrl_payload_buf_cnt = 0;
   84db4:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84db6:	8833      	ldrh	r3, [r6, #0]
   84db8:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84dba:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84dbc:	440b      	add	r3, r1
   84dbe:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84dc0:	e76b      	b.n	84c9a <UDPHS_Handler+0x64a>
   84dc2:	bf00      	nop
   84dc4:	20001f7c 	.word	0x20001f7c
   84dc8:	20001f78 	.word	0x20001f78
   84dcc:	400a4000 	.word	0x400a4000
   84dd0:	20000b40 	.word	0x20000b40
   84dd4:	20002884 	.word	0x20002884
   84dd8:	20001f76 	.word	0x20001f76
   84ddc:	000844b5 	.word	0x000844b5

00084de0 <udd_disable>:
{
   84de0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84de2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   84de6:	b672      	cpsid	i
   84de8:	f3bf 8f5f 	dmb	sy
   84dec:	2500      	movs	r5, #0
   84dee:	4c1d      	ldr	r4, [pc, #116]	; (84e64 <udd_disable+0x84>)
	udd_reset_periph();
   84df0:	4a1d      	ldr	r2, [pc, #116]	; (84e68 <udd_disable+0x88>)
   84df2:	7025      	strb	r5, [r4, #0]
   84df4:	6813      	ldr	r3, [r2, #0]
	sysclk_disable_usb();
   84df6:	491d      	ldr	r1, [pc, #116]	; (84e6c <udd_disable+0x8c>)
	udd_reset_periph();
   84df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   84dfc:	6013      	str	r3, [r2, #0]
	sysclk_disable_usb();
   84dfe:	4788      	blx	r1
	pmc_disable_periph_clk(ID_UDPHS);
   84e00:	4b1b      	ldr	r3, [pc, #108]	; (84e70 <udd_disable+0x90>)
   84e02:	201d      	movs	r0, #29
   84e04:	4798      	blx	r3
	if (!b_idle && udd_b_idle) {
   84e06:	491b      	ldr	r1, [pc, #108]	; (84e74 <udd_disable+0x94>)
   84e08:	780b      	ldrb	r3, [r1, #0]
   84e0a:	b9c3      	cbnz	r3, 84e3e <udd_disable+0x5e>
   84e0c:	4a1a      	ldr	r2, [pc, #104]	; (84e78 <udd_disable+0x98>)
	udd_b_idle = b_idle;
   84e0e:	2300      	movs	r3, #0
   84e10:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e12:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84e16:	b672      	cpsid	i
   84e18:	f3bf 8f5f 	dmb	sy
   84e1c:	7023      	strb	r3, [r4, #0]
   84e1e:	78d3      	ldrb	r3, [r2, #3]
   84e20:	3b01      	subs	r3, #1
   84e22:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84e24:	b921      	cbnz	r1, 84e30 <udd_disable+0x50>
		cpu_irq_enable();
   84e26:	2301      	movs	r3, #1
   84e28:	7023      	strb	r3, [r4, #0]
   84e2a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84e2e:	b662      	cpsie	i
	if (cpu_irq_is_enabled_flags(flags))
   84e30:	b926      	cbnz	r6, 84e3c <udd_disable+0x5c>
		cpu_irq_enable();
   84e32:	2301      	movs	r3, #1
   84e34:	7023      	strb	r3, [r4, #0]
   84e36:	f3bf 8f5f 	dmb	sy
   84e3a:	b662      	cpsie	i
}
   84e3c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e3e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84e42:	b672      	cpsid	i
   84e44:	f3bf 8f5f 	dmb	sy
   84e48:	4a0b      	ldr	r2, [pc, #44]	; (84e78 <udd_disable+0x98>)
	cpu_irq_disable();
   84e4a:	7025      	strb	r5, [r4, #0]
   84e4c:	7893      	ldrb	r3, [r2, #2]
   84e4e:	3b01      	subs	r3, #1
   84e50:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84e52:	2800      	cmp	r0, #0
   84e54:	d1db      	bne.n	84e0e <udd_disable+0x2e>
		cpu_irq_enable();
   84e56:	2301      	movs	r3, #1
   84e58:	7023      	strb	r3, [r4, #0]
   84e5a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84e5e:	b662      	cpsie	i
}
   84e60:	e7d5      	b.n	84e0e <udd_disable+0x2e>
   84e62:	bf00      	nop
   84e64:	20000b40 	.word	0x20000b40
   84e68:	400a4000 	.word	0x400a4000
   84e6c:	0008599d 	.word	0x0008599d
   84e70:	00085ba1 	.word	0x00085ba1
   84e74:	20001f75 	.word	0x20001f75
   84e78:	20002884 	.word	0x20002884

00084e7c <udd_attach>:
{
   84e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e80:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i");
   84e84:	b672      	cpsid	i
   84e86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e8a:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   84e8c:	4b29      	ldr	r3, [pc, #164]	; (84f34 <udd_attach+0xb8>)
   84e8e:	4c2a      	ldr	r4, [pc, #168]	; (84f38 <udd_attach+0xbc>)
   84e90:	781a      	ldrb	r2, [r3, #0]
   84e92:	7021      	strb	r1, [r4, #0]
   84e94:	2a00      	cmp	r2, #0
   84e96:	d03b      	beq.n	84f10 <udd_attach+0x94>
	udd_b_idle = b_idle;
   84e98:	2501      	movs	r5, #1
	udd_enable_periph_ck();
   84e9a:	4a28      	ldr	r2, [pc, #160]	; (84f3c <udd_attach+0xc0>)
   84e9c:	201d      	movs	r0, #29
	udd_b_idle = b_idle;
   84e9e:	701d      	strb	r5, [r3, #0]
	udd_ack_sof();
   84ea0:	f04f 0808 	mov.w	r8, #8
	udd_enable_periph_ck();
   84ea4:	4790      	blx	r2
	udd_ack_suspend();
   84ea6:	2702      	movs	r7, #2
	udd_ack_msof();
   84ea8:	f04f 0e04 	mov.w	lr, #4
	udd_ack_reset();
   84eac:	f04f 0c10 	mov.w	ip, #16
	udd_ack_wake_up();
   84eb0:	2120      	movs	r1, #32
	udd_attach_device();
   84eb2:	4b23      	ldr	r3, [pc, #140]	; (84f40 <udd_attach+0xc4>)
	udd_disable_periph_ck();
   84eb4:	201d      	movs	r0, #29
	udd_attach_device();
   84eb6:	681a      	ldr	r2, [r3, #0]
   84eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84ebc:	601a      	str	r2, [r3, #0]
   84ebe:	681a      	ldr	r2, [r3, #0]
   84ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84ec4:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84ec6:	691a      	ldr	r2, [r3, #16]
   84ec8:	f042 0210 	orr.w	r2, r2, #16
   84ecc:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84ece:	691a      	ldr	r2, [r3, #16]
   84ed0:	f042 0202 	orr.w	r2, r2, #2
   84ed4:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84ed6:	691a      	ldr	r2, [r3, #16]
   84ed8:	f042 0220 	orr.w	r2, r2, #32
   84edc:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84ede:	691a      	ldr	r2, [r3, #16]
   84ee0:	f042 0208 	orr.w	r2, r2, #8
   84ee4:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84ee6:	691a      	ldr	r2, [r3, #16]
   84ee8:	f042 0204 	orr.w	r2, r2, #4
   84eec:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84eee:	f8c3 8018 	str.w	r8, [r3, #24]
	udd_disable_periph_ck();
   84ef2:	4a14      	ldr	r2, [pc, #80]	; (84f44 <udd_attach+0xc8>)
	udd_ack_msof();
   84ef4:	f8c3 e018 	str.w	lr, [r3, #24]
	udd_ack_reset();
   84ef8:	f8c3 c018 	str.w	ip, [r3, #24]
	udd_ack_suspend();
   84efc:	619f      	str	r7, [r3, #24]
	udd_ack_wake_up();
   84efe:	6199      	str	r1, [r3, #24]
	udd_disable_periph_ck();
   84f00:	4790      	blx	r2
	if (cpu_irq_is_enabled_flags(flags))
   84f02:	b91e      	cbnz	r6, 84f0c <udd_attach+0x90>
		cpu_irq_enable();
   84f04:	7025      	strb	r5, [r4, #0]
   84f06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f0a:	b662      	cpsie	i
}
   84f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f10:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84f14:	b672      	cpsid	i
   84f16:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   84f1a:	490b      	ldr	r1, [pc, #44]	; (84f48 <udd_attach+0xcc>)
	cpu_irq_disable();
   84f1c:	7022      	strb	r2, [r4, #0]
   84f1e:	788a      	ldrb	r2, [r1, #2]
   84f20:	3201      	adds	r2, #1
   84f22:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84f24:	2800      	cmp	r0, #0
   84f26:	d1b7      	bne.n	84e98 <udd_attach+0x1c>
		cpu_irq_enable();
   84f28:	2201      	movs	r2, #1
   84f2a:	7022      	strb	r2, [r4, #0]
   84f2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f30:	b662      	cpsie	i
}
   84f32:	e7b1      	b.n	84e98 <udd_attach+0x1c>
   84f34:	20001f75 	.word	0x20001f75
   84f38:	20000b40 	.word	0x20000b40
   84f3c:	00085b7d 	.word	0x00085b7d
   84f40:	400a4000 	.word	0x400a4000
   84f44:	00085ba1 	.word	0x00085ba1
   84f48:	20002884 	.word	0x20002884

00084f4c <udd_enable>:
{
   84f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_enable_usb();
   84f4e:	4b26      	ldr	r3, [pc, #152]	; (84fe8 <udd_enable+0x9c>)
   84f50:	4798      	blx	r3
	udd_enable_periph_ck();
   84f52:	4b26      	ldr	r3, [pc, #152]	; (84fec <udd_enable+0xa0>)
   84f54:	201d      	movs	r0, #29
   84f56:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84f5c:	b672      	cpsid	i
   84f5e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f62:	2300      	movs	r3, #0
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84f64:	f04f 0c50 	mov.w	ip, #80	; 0x50
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84f68:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   84f6c:	4d20      	ldr	r5, [pc, #128]	; (84ff0 <udd_enable+0xa4>)
	udd_enable_periph();
   84f6e:	4e21      	ldr	r6, [pc, #132]	; (84ff4 <udd_enable+0xa8>)
   84f70:	702b      	strb	r3, [r5, #0]
   84f72:	6832      	ldr	r2, [r6, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84f74:	4920      	ldr	r1, [pc, #128]	; (84ff8 <udd_enable+0xac>)
   84f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84f7a:	4820      	ldr	r0, [pc, #128]	; (84ffc <udd_enable+0xb0>)
   84f7c:	6032      	str	r2, [r6, #0]
   84f7e:	f881 c31d 	strb.w	ip, [r1, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84f82:	600f      	str	r7, [r1, #0]
		udd_ep_job[i].stall_requested = false;
   84f84:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84f88:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
		udd_ep_job[i].busy = false;
   84f8c:	7d11      	ldrb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f8e:	3301      	adds	r3, #1
		udd_ep_job[i].busy = false;
   84f90:	f021 0105 	bic.w	r1, r1, #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f94:	2b06      	cmp	r3, #6
		udd_ep_job[i].busy = false;
   84f96:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f98:	d1f4      	bne.n	84f84 <udd_enable+0x38>
	udd_high_speed_enable();
   84f9a:	4a16      	ldr	r2, [pc, #88]	; (84ff4 <udd_enable+0xa8>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84f9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
	udd_high_speed_enable();
   84fa0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84fa4:	f023 0303 	bic.w	r3, r3, #3
   84fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84fac:	4b14      	ldr	r3, [pc, #80]	; (85000 <udd_enable+0xb4>)
   84fae:	4798      	blx	r3
	udd_b_idle = false;
   84fb0:	2300      	movs	r3, #0
   84fb2:	4a14      	ldr	r2, [pc, #80]	; (85004 <udd_enable+0xb8>)
   84fb4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84fb6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84fba:	b672      	cpsid	i
   84fbc:	f3bf 8f5f 	dmb	sy
   84fc0:	4a11      	ldr	r2, [pc, #68]	; (85008 <udd_enable+0xbc>)
   84fc2:	702b      	strb	r3, [r5, #0]
   84fc4:	78d3      	ldrb	r3, [r2, #3]
   84fc6:	3301      	adds	r3, #1
   84fc8:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84fca:	b921      	cbnz	r1, 84fd6 <udd_enable+0x8a>
		cpu_irq_enable();
   84fcc:	2301      	movs	r3, #1
   84fce:	702b      	strb	r3, [r5, #0]
   84fd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84fd4:	b662      	cpsie	i
	udd_attach();
   84fd6:	4b0d      	ldr	r3, [pc, #52]	; (8500c <udd_enable+0xc0>)
   84fd8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84fda:	b924      	cbnz	r4, 84fe6 <udd_enable+0x9a>
		cpu_irq_enable();
   84fdc:	2301      	movs	r3, #1
   84fde:	702b      	strb	r3, [r5, #0]
   84fe0:	f3bf 8f5f 	dmb	sy
   84fe4:	b662      	cpsie	i
}
   84fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fe8:	00085969 	.word	0x00085969
   84fec:	00085b7d 	.word	0x00085b7d
   84ff0:	20000b40 	.word	0x20000b40
   84ff4:	400a4000 	.word	0x400a4000
   84ff8:	e000e100 	.word	0xe000e100
   84ffc:	20001f7c 	.word	0x20001f7c
   85000:	00085bd5 	.word	0x00085bd5
   85004:	20001f75 	.word	0x20001f75
   85008:	20002884 	.word	0x20002884
   8500c:	00084e7d 	.word	0x00084e7d

00085010 <udd_detach>:
{
   85010:	b510      	push	{r4, lr}
	udd_enable_periph_ck();
   85012:	4b16      	ldr	r3, [pc, #88]	; (8506c <udd_detach+0x5c>)
   85014:	201d      	movs	r0, #29
   85016:	4798      	blx	r3
	udd_detach_device();
   85018:	4b15      	ldr	r3, [pc, #84]	; (85070 <udd_detach+0x60>)
	udd_disable_periph_ck();
   8501a:	201d      	movs	r0, #29
	udd_detach_device();
   8501c:	681a      	ldr	r2, [r3, #0]
	udd_disable_periph_ck();
   8501e:	4915      	ldr	r1, [pc, #84]	; (85074 <udd_detach+0x64>)
	udd_detach_device();
   85020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   85024:	601a      	str	r2, [r3, #0]
   85026:	681a      	ldr	r2, [r3, #0]
   85028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8502c:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   8502e:	4788      	blx	r1
	if (!b_idle && udd_b_idle) {
   85030:	4b11      	ldr	r3, [pc, #68]	; (85078 <udd_detach+0x68>)
   85032:	781a      	ldrb	r2, [r3, #0]
   85034:	b912      	cbnz	r2, 8503c <udd_detach+0x2c>
	udd_b_idle = b_idle;
   85036:	2200      	movs	r2, #0
   85038:	701a      	strb	r2, [r3, #0]
}
   8503a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8503c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   85040:	b672      	cpsid	i
   85042:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85046:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   8504a:	490c      	ldr	r1, [pc, #48]	; (8507c <udd_detach+0x6c>)
   8504c:	480c      	ldr	r0, [pc, #48]	; (85080 <udd_detach+0x70>)
   8504e:	788a      	ldrb	r2, [r1, #2]
   85050:	3a01      	subs	r2, #1
   85052:	708a      	strb	r2, [r1, #2]
   85054:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   85058:	2c00      	cmp	r4, #0
   8505a:	d1ec      	bne.n	85036 <udd_detach+0x26>
		cpu_irq_enable();
   8505c:	2201      	movs	r2, #1
   8505e:	7002      	strb	r2, [r0, #0]
   85060:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85064:	b662      	cpsie	i
	udd_b_idle = b_idle;
   85066:	2200      	movs	r2, #0
   85068:	701a      	strb	r2, [r3, #0]
}
   8506a:	bd10      	pop	{r4, pc}
   8506c:	00085b7d 	.word	0x00085b7d
   85070:	400a4000 	.word	0x400a4000
   85074:	00085ba1 	.word	0x00085ba1
   85078:	20001f75 	.word	0x20001f75
   8507c:	20002884 	.word	0x20002884
   85080:	20000b40 	.word	0x20000b40

00085084 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   85084:	4b02      	ldr	r3, [pc, #8]	; (85090 <udd_is_high_speed+0xc>)
   85086:	6958      	ldr	r0, [r3, #20]
}
   85088:	f000 0001 	and.w	r0, r0, #1
   8508c:	4770      	bx	lr
   8508e:	bf00      	nop
   85090:	400a4000 	.word	0x400a4000

00085094 <udd_set_address>:
	udd_disable_address();
   85094:	4b08      	ldr	r3, [pc, #32]	; (850b8 <udd_set_address+0x24>)
	udd_configure_address(address);
   85096:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   8509a:	681a      	ldr	r2, [r3, #0]
   8509c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   850a0:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   850a2:	681a      	ldr	r2, [r3, #0]
   850a4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   850a8:	4302      	orrs	r2, r0
   850aa:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   850ac:	681a      	ldr	r2, [r3, #0]
   850ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   850b2:	601a      	str	r2, [r3, #0]
}
   850b4:	4770      	bx	lr
   850b6:	bf00      	nop
   850b8:	400a4000 	.word	0x400a4000

000850bc <udd_getaddress>:
	return udd_get_configured_address();
   850bc:	4b02      	ldr	r3, [pc, #8]	; (850c8 <udd_getaddress+0xc>)
   850be:	6818      	ldr	r0, [r3, #0]
}
   850c0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   850c4:	4770      	bx	lr
   850c6:	bf00      	nop
   850c8:	400a4000 	.word	0x400a4000

000850cc <udd_get_frame_number>:
	return udd_frame_number();
   850cc:	4b02      	ldr	r3, [pc, #8]	; (850d8 <udd_get_frame_number+0xc>)
   850ce:	6858      	ldr	r0, [r3, #4]
}
   850d0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   850d4:	4770      	bx	lr
   850d6:	bf00      	nop
   850d8:	400a4000 	.word	0x400a4000

000850dc <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   850dc:	4b02      	ldr	r3, [pc, #8]	; (850e8 <udd_get_micro_frame_number+0xc>)
   850de:	6858      	ldr	r0, [r3, #4]
}
   850e0:	f000 0007 	and.w	r0, r0, #7
   850e4:	4770      	bx	lr
   850e6:	bf00      	nop
   850e8:	400a4000 	.word	0x400a4000

000850ec <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   850ec:	4b01      	ldr	r3, [pc, #4]	; (850f4 <udd_set_setup_payload+0x8>)
   850ee:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   850f0:	8199      	strh	r1, [r3, #12]
}
   850f2:	4770      	bx	lr
   850f4:	2000200c 	.word	0x2000200c

000850f8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   850f8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   850fc:	2a06      	cmp	r2, #6
   850fe:	d900      	bls.n	85102 <udd_ep_free+0xa>
   85100:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   85102:	2101      	movs	r1, #1
{
   85104:	b538      	push	{r3, r4, r5, lr}
	udd_disable_endpoint(ep_index);
   85106:	0153      	lsls	r3, r2, #5
   85108:	f103 2540 	add.w	r5, r3, #1073758208	; 0x40004000
   8510c:	f505 2520 	add.w	r5, r5, #655360	; 0xa0000
   85110:	462b      	mov	r3, r5
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85112:	1e54      	subs	r4, r2, #1
	udd_disable_endpoint(ep_index);
   85114:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   85118:	f8d5 5100 	ldr.w	r5, [r5, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8511c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   85120:	4c07      	ldr	r4, [pc, #28]	; (85140 <udd_ep_free+0x48>)
	udd_configure_endpoint_bank(ep_index, 0);
   85122:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85126:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_configure_endpoint_bank(ep_index, 0);
   8512a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8512e:	4620      	mov	r0, r4
   85130:	4b04      	ldr	r3, [pc, #16]	; (85144 <udd_ep_free+0x4c>)
   85132:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85134:	7d23      	ldrb	r3, [r4, #20]
   85136:	f36f 0382 	bfc	r3, #2, #1
   8513a:	7523      	strb	r3, [r4, #20]
}
   8513c:	bd38      	pop	{r3, r4, r5, pc}
   8513e:	bf00      	nop
   85140:	20001f7c 	.word	0x20001f7c
   85144:	000842c1 	.word	0x000842c1

00085148 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85148:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   8514c:	0143      	lsls	r3, r0, #5
   8514e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85152:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85156:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   8515a:	069b      	lsls	r3, r3, #26
   8515c:	d409      	bmi.n	85172 <udd_ep_is_halted+0x2a>
   8515e:	4b06      	ldr	r3, [pc, #24]	; (85178 <udd_ep_is_halted+0x30>)
   85160:	3801      	subs	r0, #1
   85162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85166:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   8516a:	7d00      	ldrb	r0, [r0, #20]
   8516c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   85170:	4770      	bx	lr
   85172:	2001      	movs	r0, #1
}
   85174:	4770      	bx	lr
   85176:	bf00      	nop
   85178:	20001f7c 	.word	0x20001f7c

0008517c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8517c:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85180:	2b06      	cmp	r3, #6
   85182:	d82c      	bhi.n	851de <udd_ep_set_halt+0x62>
{
   85184:	b530      	push	{r4, r5, lr}
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   85186:	4d25      	ldr	r5, [pc, #148]	; (8521c <udd_ep_set_halt+0xa0>)
   85188:	0159      	lsls	r1, r3, #5
   8518a:	eb05 1e43 	add.w	lr, r5, r3, lsl #5
   8518e:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   85192:	0692      	lsls	r2, r2, #26
   85194:	d421      	bmi.n	851da <udd_ep_set_halt+0x5e>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85196:	4c22      	ldr	r4, [pc, #136]	; (85220 <udd_ep_set_halt+0xa4>)
	ptr_job = &udd_ep_job[ep_index - 1];
   85198:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8519a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   8519e:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
   851a2:	f89c 4014 	ldrb.w	r4, [ip, #20]
   851a6:	f014 0204 	ands.w	r2, r4, #4
   851aa:	d116      	bne.n	851da <udd_ep_set_halt+0x5e>
	if (ptr_job->busy == true) {
   851ac:	07e4      	lsls	r4, r4, #31
   851ae:	d418      	bmi.n	851e2 <udd_ep_set_halt+0x66>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   851b0:	0602      	lsls	r2, r0, #24
   851b2:	d418      	bmi.n	851e6 <udd_ep_set_halt+0x6a>
	udd_ack_stall(ep_index);
   851b4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	udd_enable_stall_handshake(ep_index);
   851b8:	2420      	movs	r4, #32
	udd_disable_endpoint_bank_autoswitch(ep_index);
   851ba:	f101 2340 	add.w	r3, r1, #1073758208	; 0x40004000
   851be:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   851c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
	return true;
   851c6:	2001      	movs	r0, #1
	udd_disable_endpoint_bank_autoswitch(ep_index);
   851c8:	f022 0202 	bic.w	r2, r2, #2
   851cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   851d0:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   851d4:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
}
   851d8:	bd30      	pop	{r4, r5, pc}
		return true; // Already STALL
   851da:	2001      	movs	r0, #1
}
   851dc:	bd30      	pop	{r4, r5, pc}
		return false;
   851de:	2000      	movs	r0, #0
}
   851e0:	4770      	bx	lr
		return false;
   851e2:	4610      	mov	r0, r2
}
   851e4:	bd30      	pop	{r4, r5, pc}
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   851e6:	f8de 211c 	ldr.w	r2, [lr, #284]	; 0x11c
   851ea:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   851ee:	d0e1      	beq.n	851b4 <udd_ep_set_halt+0x38>
			udd_enable_bank_interrupt(ep_index);
   851f0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
			udd_enable_endpoint_interrupt(ep_index);
   851f4:	f44f 7280 	mov.w	r2, #256	; 0x100
			ptr_job->stall_requested = true;
   851f8:	f89c 1014 	ldrb.w	r1, [ip, #20]
			return true;
   851fc:	2001      	movs	r0, #1
			ptr_job->stall_requested = true;
   851fe:	f041 0104 	orr.w	r1, r1, #4
   85202:	f88c 1014 	strb.w	r1, [ip, #20]
			udd_enable_bank_interrupt(ep_index);
   85206:	f103 0108 	add.w	r1, r3, #8
   8520a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
   8520e:	604c      	str	r4, [r1, #4]
			udd_enable_endpoint_interrupt(ep_index);
   85210:	6929      	ldr	r1, [r5, #16]
   85212:	fa02 f303 	lsl.w	r3, r2, r3
   85216:	430b      	orrs	r3, r1
   85218:	612b      	str	r3, [r5, #16]
}
   8521a:	bd30      	pop	{r4, r5, pc}
   8521c:	400a4000 	.word	0x400a4000
   85220:	20001f7c 	.word	0x20001f7c

00085224 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   85224:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   85228:	2806      	cmp	r0, #6
   8522a:	d85a      	bhi.n	852e2 <udd_ep_clear_halt+0xbe>
{
   8522c:	b570      	push	{r4, r5, r6, lr}
	ptr_job = &udd_ep_job[ep - 1];
   8522e:	f100 3cff 	add.w	ip, r0, #4294967295
	if (ptr_job->stall_requested) {
   85232:	4c2d      	ldr	r4, [pc, #180]	; (852e8 <udd_ep_clear_halt+0xc4>)
   85234:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
   85238:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   8523c:	7d0b      	ldrb	r3, [r1, #20]
   8523e:	ea4f 024c 	mov.w	r2, ip, lsl #1
   85242:	075d      	lsls	r5, r3, #29
   85244:	d526      	bpl.n	85294 <udd_ep_clear_halt+0x70>
		udd_disable_bank_interrupt(ep);
   85246:	f44f 2680 	mov.w	r6, #262144	; 0x40000
		udd_disable_endpoint_interrupt(ep);
   8524a:	f44f 7e80 	mov.w	lr, #256	; 0x100
		ptr_job->stall_requested = false;
   8524e:	7d0b      	ldrb	r3, [r1, #20]
		udd_disable_endpoint_interrupt(ep);
   85250:	fa0e fe00 	lsl.w	lr, lr, r0
		ptr_job->stall_requested = false;
   85254:	f36f 0382 	bfc	r3, #2, #1
   85258:	750b      	strb	r3, [r1, #20]
		udd_disable_bank_interrupt(ep);
   8525a:	4924      	ldr	r1, [pc, #144]	; (852ec <udd_ep_clear_halt+0xc8>)
   8525c:	0143      	lsls	r3, r0, #5
   8525e:	eb01 1540 	add.w	r5, r1, r0, lsl #5
   85262:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   85266:	6908      	ldr	r0, [r1, #16]
   85268:	ea20 000e 	bic.w	r0, r0, lr
   8526c:	6108      	str	r0, [r1, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   8526e:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
   85272:	068d      	lsls	r5, r1, #26
   85274:	d417      	bmi.n	852a6 <udd_ep_clear_halt+0x82>
		if (ptr_job->busy == true) {
   85276:	eb02 030c 	add.w	r3, r2, ip
   8527a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   8527e:	7d11      	ldrb	r1, [r2, #20]
   85280:	00db      	lsls	r3, r3, #3
   85282:	07c8      	lsls	r0, r1, #31
   85284:	d504      	bpl.n	85290 <udd_ep_clear_halt+0x6c>
			ptr_job->busy = false;
   85286:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   8528a:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   8528c:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   8528e:	4798      	blx	r3
	return true;
   85290:	2001      	movs	r0, #1
}
   85292:	bd70      	pop	{r4, r5, r6, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   85294:	0143      	lsls	r3, r0, #5
   85296:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   8529a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8529e:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   852a2:	0689      	lsls	r1, r1, #26
   852a4:	d5f4      	bpl.n	85290 <udd_ep_clear_halt+0x6c>
		if (Is_udd_stall(ep)) {
   852a6:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   852aa:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   852ae:	f8d1 011c 	ldr.w	r0, [r1, #284]	; 0x11c
   852b2:	0486      	lsls	r6, r0, #18
   852b4:	d506      	bpl.n	852c4 <udd_ep_clear_halt+0xa0>
			udd_ack_stall(ep);
   852b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   852ba:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
			udd_reset_data_toggle(ep);
   852be:	2040      	movs	r0, #64	; 0x40
   852c0:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   852c4:	2020      	movs	r0, #32
   852c6:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   852ca:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   852ce:	460b      	mov	r3, r1
   852d0:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   852d4:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   852d8:	f041 0102 	orr.w	r1, r1, #2
   852dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (b_stall_cleared) {
   852e0:	e7c9      	b.n	85276 <udd_ep_clear_halt+0x52>
		return false;
   852e2:	2000      	movs	r0, #0
}
   852e4:	4770      	bx	lr
   852e6:	bf00      	nop
   852e8:	20001f7c 	.word	0x20001f7c
   852ec:	400a4000 	.word	0x400a4000

000852f0 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   852f0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   852f4:	2806      	cmp	r0, #6
   852f6:	d857      	bhi.n	853a8 <udd_ep_run+0xb8>
{
   852f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   852fc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
   85300:	f10c 2c40 	add.w	ip, ip, #1073758208	; 0x40004000
   85304:	f50c 2c20 	add.w	ip, ip, #655360	; 0xa0000
   85308:	f8dc 410c 	ldr.w	r4, [ip, #268]	; 0x10c
   8530c:	07e5      	lsls	r5, r4, #31
   8530e:	d548      	bpl.n	853a2 <udd_ep_run+0xb2>
			|| Is_udd_endpoint_stall_requested(ep)
   85310:	f8dc 411c 	ldr.w	r4, [ip, #284]	; 0x11c
   85314:	06a4      	lsls	r4, r4, #26
   85316:	d444      	bmi.n	853a2 <udd_ep_run+0xb2>
	ptr_job = &udd_ep_job[ep - 1];
   85318:	1e45      	subs	r5, r0, #1
			|| ptr_job->stall_requested) {
   8531a:	4e28      	ldr	r6, [pc, #160]	; (853bc <udd_ep_run+0xcc>)
   8531c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
   85320:	eb06 0ccc 	add.w	ip, r6, ip, lsl #3
   85324:	f89c 4014 	ldrb.w	r4, [ip, #20]
   85328:	006f      	lsls	r7, r5, #1
   8532a:	f014 0e04 	ands.w	lr, r4, #4
   8532e:	d138      	bne.n	853a2 <udd_ep_run+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85330:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   85334:	b672      	cpsid	i
   85336:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8533a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 853c0 <udd_ep_run+0xd0>
   8533e:	f888 e000 	strb.w	lr, [r8]
	if (ptr_job->busy == true) {
   85342:	f89c e014 	ldrb.w	lr, [ip, #20]
   85346:	f01e 0f01 	tst.w	lr, #1
   8534a:	d129      	bne.n	853a0 <udd_ep_run+0xb0>
	ptr_job->busy = true;
   8534c:	f89c e014 	ldrb.w	lr, [ip, #20]
   85350:	f04e 0e01 	orr.w	lr, lr, #1
   85354:	f88c e014 	strb.w	lr, [ip, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85358:	b92c      	cbnz	r4, 85366 <udd_ep_run+0x76>
		cpu_irq_enable();
   8535a:	2401      	movs	r4, #1
   8535c:	f888 4000 	strb.w	r4, [r8]
   85360:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85364:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   85366:	f04f 0c00 	mov.w	ip, #0
	ptr_job->call_trans = callback;
   8536a:	f8dd e018 	ldr.w	lr, [sp, #24]
	ptr_job->buf = buf;
   8536e:	197c      	adds	r4, r7, r5
	ptr_job->call_trans = callback;
   85370:	f846 e034 	str.w	lr, [r6, r4, lsl #3]
	ptr_job->buf = buf;
   85374:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	ptr_job->buf_size = buf_size;
   85378:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   8537c:	e9c4 cc03 	strd	ip, ip, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85380:	b911      	cbnz	r1, 85388 <udd_ep_run+0x98>
   85382:	fab3 f183 	clz	r1, r3
   85386:	0949      	lsrs	r1, r1, #5
   85388:	197b      	adds	r3, r7, r5
   8538a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   8538e:	7d1a      	ldrb	r2, [r3, #20]
   85390:	f361 0241 	bfi	r2, r1, #1, #1
   85394:	751a      	strb	r2, [r3, #20]
	udd_ep_trans_done(ep);
   85396:	490b      	ldr	r1, [pc, #44]	; (853c4 <udd_ep_run+0xd4>)
   85398:	4788      	blx	r1
	return true;
   8539a:	2001      	movs	r0, #1
}
   8539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cpu_irq_is_enabled_flags(flags))
   853a0:	b124      	cbz	r4, 853ac <udd_ep_run+0xbc>
		return false;
   853a2:	2000      	movs	r0, #0
}
   853a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   853a8:	2000      	movs	r0, #0
}
   853aa:	4770      	bx	lr
		cpu_irq_enable();
   853ac:	2301      	movs	r3, #1
   853ae:	f888 3000 	strb.w	r3, [r8]
   853b2:	f3bf 8f5f 	dmb	sy
   853b6:	b662      	cpsie	i
		return false; // Job already on going
   853b8:	4620      	mov	r0, r4
}
   853ba:	e7f3      	b.n	853a4 <udd_ep_run+0xb4>
   853bc:	20001f7c 	.word	0x20001f7c
   853c0:	20000b40 	.word	0x20000b40
   853c4:	00084301 	.word	0x00084301

000853c8 <udd_ep_alloc>:
{
   853c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ep = ep & USB_EP_ADDR_MASK;
   853cc:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   853d0:	2c06      	cmp	r4, #6
{
   853d2:	b085      	sub	sp, #20
	if (ep > USB_DEVICE_MAX_EP) {
   853d4:	f200 80e7 	bhi.w	855a6 <udd_ep_alloc+0x1de>
	if (Is_udd_endpoint_enabled(ep)) {
   853d8:	0166      	lsls	r6, r4, #5
   853da:	f106 2340 	add.w	r3, r6, #1073758208	; 0x40004000
   853de:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   853e2:	4686      	mov	lr, r0
   853e4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
   853e8:	f010 0001 	ands.w	r0, r0, #1
   853ec:	f040 80db 	bne.w	855a6 <udd_ep_alloc+0x1de>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   853f0:	f001 0503 	and.w	r5, r1, #3
   853f4:	2d02      	cmp	r5, #2
   853f6:	f000 80e7 	beq.w	855c8 <udd_ep_alloc+0x200>
   853fa:	2d03      	cmp	r5, #3
   853fc:	f000 80e0 	beq.w	855c0 <udd_ep_alloc+0x1f8>
   85400:	2d01      	cmp	r5, #1
   85402:	f040 80d1 	bne.w	855a8 <udd_ep_alloc+0x1e0>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85406:	2c00      	cmp	r4, #0
   85408:	f000 80d1 	beq.w	855ae <udd_ep_alloc+0x1e6>
   8540c:	1ee3      	subs	r3, r4, #3
   8540e:	2b01      	cmp	r3, #1
   85410:	f240 80cd 	bls.w	855ae <udd_ep_alloc+0x1e6>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85414:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   85418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8541c:	f000 80dc 	beq.w	855d8 <udd_ep_alloc+0x210>
			nb_tran = 3;
   85420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   85424:	bf08      	it	eq
   85426:	2503      	moveq	r5, #3
		MaxEndpointSize &= ~(0x3u << 11);
   85428:	f04f 0c80 	mov.w	ip, #128	; 0x80
   8542c:	2701      	movs	r7, #1
   8542e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   85432:	b292      	uxth	r2, r2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85434:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
   85438:	f506 2620 	add.w	r6, r6, #655360	; 0xa0000
   8543c:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   85440:	f01e 0f80 	tst.w	lr, #128	; 0x80
   85444:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85448:	ea4f 1e01 	mov.w	lr, r1, lsl #4
   8544c:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
   85450:	bf14      	ite	ne
   85452:	2108      	movne	r1, #8
   85454:	2100      	moveq	r1, #0
   85456:	f023 0303 	bic.w	r3, r3, #3
   8545a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8545e:	ea43 0e0e 	orr.w	lr, r3, lr
   85462:	f080 80af 	bcs.w	855c4 <udd_ep_alloc+0x1fc>
   85466:	2a08      	cmp	r2, #8
   85468:	bf38      	it	cc
   8546a:	2208      	movcc	r2, #8
   8546c:	0053      	lsls	r3, r2, #1
   8546e:	3b01      	subs	r3, #1
   85470:	fab3 f383 	clz	r3, r3
   85474:	f1c3 031c 	rsb	r3, r3, #28
   85478:	ea4e 020c 	orr.w	r2, lr, ip
   8547c:	430a      	orrs	r2, r1
   8547e:	b107      	cbz	r7, 85482 <udd_ep_alloc+0xba>
   85480:	0228      	lsls	r0, r5, #8
   85482:	4313      	orrs	r3, r2
   85484:	4303      	orrs	r3, r0
   85486:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8548a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   8548e:	2b00      	cmp	r3, #0
   85490:	f280 8089 	bge.w	855a6 <udd_ep_alloc+0x1de>
	udd_enable_endpoint(ep);
   85494:	f04f 0c01 	mov.w	ip, #1
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85498:	2306      	movs	r3, #6
	ep_allocated = 0;
   8549a:	2500      	movs	r5, #0
		if (Is_udd_endpoint_enabled(i)) {
   8549c:	4f5b      	ldr	r7, [pc, #364]	; (8560c <udd_ep_alloc+0x244>)
	udd_enable_endpoint(ep);
   8549e:	f8c6 c104 	str.w	ip, [r6, #260]	; 0x104
		if (Is_udd_endpoint_enabled(i)) {
   854a2:	eb07 1043 	add.w	r0, r7, r3, lsl #5
   854a6:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   854aa:	1e5e      	subs	r6, r3, #1
		if (Is_udd_endpoint_enabled(i)) {
   854ac:	07c9      	lsls	r1, r1, #31
   854ae:	ea4f 1243 	mov.w	r2, r3, lsl #5
   854b2:	d514      	bpl.n	854de <udd_ep_alloc+0x116>
   854b4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   854b8:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   854bc:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   854c0:	005b      	lsls	r3, r3, #1
			udd_disable_endpoint(i);
   854c2:	f8c0 c108 	str.w	ip, [r0, #264]	; 0x108
			ep_allocated |=  bank << (i * 2);
   854c6:	f3c1 1181 	ubfx	r1, r1, #6, #2
   854ca:	fa01 f303 	lsl.w	r3, r1, r3
			udd_configure_endpoint_bank(i, 0);
   854ce:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   854d2:	432b      	orrs	r3, r5
			udd_configure_endpoint_bank(i, 0);
   854d4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
			ep_allocated |=  bank << (i * 2);
   854d8:	b29d      	uxth	r5, r3
			udd_configure_endpoint_bank(i, 0);
   854da:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   854de:	b2f3      	uxtb	r3, r6
   854e0:	429c      	cmp	r4, r3
   854e2:	d9de      	bls.n	854a2 <udd_ep_alloc+0xda>
   854e4:	4f4a      	ldr	r7, [pc, #296]	; (85610 <udd_ep_alloc+0x248>)
   854e6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   854ea:	b2e0      	uxtb	r0, r4
   854ec:	4686      	mov	lr, r0
   854ee:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   854f2:	e007      	b.n	85504 <udd_ep_alloc+0x13c>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   854f4:	3401      	adds	r4, #1
   854f6:	fa5f fe84 	uxtb.w	lr, r4
   854fa:	f1be 0f06 	cmp.w	lr, #6
   854fe:	f106 0618 	add.w	r6, r6, #24
   85502:	d867      	bhi.n	855d4 <udd_ep_alloc+0x20c>
		udd_enable_endpoint_bank_autoswitch(i);
   85504:	f104 38ff 	add.w	r8, r4, #4294967295
		bank = (ep_allocated >> (i * 2)) & 0x03;
   85508:	0062      	lsls	r2, r4, #1
		bool b_restart = ptr_job->busy;
   8550a:	eb08 0c48 	add.w	ip, r8, r8, lsl #1
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8550e:	fa45 f202 	asr.w	r2, r5, r2
		bool b_restart = ptr_job->busy;
   85512:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   85516:	ea4f 0348 	mov.w	r3, r8, lsl #1
		if (bank == 0) {
   8551a:	f012 0203 	ands.w	r2, r2, #3
   8551e:	46f3      	mov	fp, lr
		bool b_restart = ptr_job->busy;
   85520:	f10c 0910 	add.w	r9, ip, #16
   85524:	9303      	str	r3, [sp, #12]
		if (bank == 0) {
   85526:	d0e5      	beq.n	854f4 <udd_ep_alloc+0x12c>
   85528:	0163      	lsls	r3, r4, #5
   8552a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8552e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   85532:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
		bool b_restart = ptr_job->busy;
   85536:	f89c 0014 	ldrb.w	r0, [ip, #20]
		udd_configure_endpoint_bank(i, bank);
   8553a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   8553e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   85542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   85546:	2201      	movs	r2, #1
		ptr_job->busy = false;
   85548:	4682      	mov	sl, r0
		udd_enable_endpoint(i);
   8554a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   8554e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		ptr_job->busy = false;
   85552:	f36f 0a00 	bfc	sl, #0, #1
		if (!Is_udd_endpoint_mapped(i)) {
   85556:	2a00      	cmp	r2, #0
		bool b_restart = ptr_job->busy;
   85558:	f000 0001 	and.w	r0, r0, #1
		ptr_job->busy = false;
   8555c:	f889 a004 	strb.w	sl, [r9, #4]
		if (!Is_udd_endpoint_mapped(i)) {
   85560:	da3c      	bge.n	855dc <udd_ep_alloc+0x214>
		udd_enable_endpoint_bank_autoswitch(i);
   85562:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   85566:	f042 0202 	orr.w	r2, r2, #2
   8556a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   8556e:	2800      	cmp	r0, #0
   85570:	d0c0      	beq.n	854f4 <udd_ep_alloc+0x12c>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85572:	e956 3203 	ldrd	r3, r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   85576:	f856 1c10 	ldr.w	r1, [r6, #-16]
   8557a:	f856 cc14 	ldr.w	ip, [r6, #-20]
   8557e:	4411      	add	r1, r2
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85580:	1a9a      	subs	r2, r3, r2
   85582:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   85586:	1acb      	subs	r3, r1, r3
   85588:	4462      	add	r2, ip
					ptr_job->b_shortpacket,
   8558a:	f899 1004 	ldrb.w	r1, [r9, #4]
			b_restart = udd_ep_run(i,
   8558e:	f856 cc18 	ldr.w	ip, [r6, #-24]
   85592:	4670      	mov	r0, lr
   85594:	f8cd c000 	str.w	ip, [sp]
   85598:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8559c:	f8df c074 	ldr.w	ip, [pc, #116]	; 85614 <udd_ep_alloc+0x24c>
   855a0:	47e0      	blx	ip
			if (!b_restart) {
   855a2:	2800      	cmp	r0, #0
   855a4:	d1a6      	bne.n	854f4 <udd_ep_alloc+0x12c>
			return false;
   855a6:	2000      	movs	r0, #0
}
   855a8:	b005      	add	sp, #20
   855aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   855ae:	2502      	movs	r5, #2
	} else if (MaxEndpointSize & (0x3u << 11)) {
   855b0:	f412 53c0 	ands.w	r3, r2, #6144	; 0x1800
   855b4:	d1f7      	bne.n	855a6 <udd_ep_alloc+0x1de>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   855b6:	ea4f 1c85 	mov.w	ip, r5, lsl #6
	uint8_t nb_bank, bank, nb_tran = 0, i;
   855ba:	461f      	mov	r7, r3
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   855bc:	461d      	mov	r5, r3
   855be:	e739      	b.n	85434 <udd_ep_alloc+0x6c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   855c0:	2501      	movs	r5, #1
   855c2:	e7f5      	b.n	855b0 <udd_ep_alloc+0x1e8>
   855c4:	2307      	movs	r3, #7
   855c6:	e757      	b.n	85478 <udd_ep_alloc+0xb0>
		nb_bank = UDD_BULK_NB_BANK(ep);
   855c8:	2c05      	cmp	r4, #5
   855ca:	d01c      	beq.n	85606 <udd_ep_alloc+0x23e>
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   855cc:	2c06      	cmp	r4, #6
   855ce:	bf18      	it	ne
   855d0:	2501      	movne	r5, #1
   855d2:	e7ed      	b.n	855b0 <udd_ep_alloc+0x1e8>
	return true;
   855d4:	2001      	movs	r0, #1
   855d6:	e7e7      	b.n	855a8 <udd_ep_alloc+0x1e0>
		switch(MaxEndpointSize & (0x3u << 11)) {
   855d8:	2502      	movs	r5, #2
   855da:	e725      	b.n	85428 <udd_ep_alloc+0x60>
			if (NULL == ptr_job->call_trans) {
   855dc:	f8dc 3000 	ldr.w	r3, [ip]
   855e0:	2b00      	cmp	r3, #0
   855e2:	d0e0      	beq.n	855a6 <udd_ep_alloc+0x1de>
			if (Is_udd_endpoint_in(i)) {
   855e4:	4a09      	ldr	r2, [pc, #36]	; (8560c <udd_ep_alloc+0x244>)
   855e6:	3408      	adds	r4, #8
   855e8:	0164      	lsls	r4, r4, #5
   855ea:	5912      	ldr	r2, [r2, r4]
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   855ec:	2001      	movs	r0, #1
			if (Is_udd_endpoint_in(i)) {
   855ee:	0712      	lsls	r2, r2, #28
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   855f0:	9a03      	ldr	r2, [sp, #12]
				i |= USB_EP_DIR_IN;
   855f2:	bf48      	it	mi
   855f4:	f04e 0b80 	orrmi.w	fp, lr, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   855f8:	4442      	add	r2, r8
   855fa:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
   855fe:	68f9      	ldr	r1, [r7, #12]
   85600:	465a      	mov	r2, fp
   85602:	4798      	blx	r3
   85604:	e7cf      	b.n	855a6 <udd_ep_alloc+0x1de>
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85606:	2503      	movs	r5, #3
   85608:	e7d2      	b.n	855b0 <udd_ep_alloc+0x1e8>
   8560a:	bf00      	nop
   8560c:	400a4000 	.word	0x400a4000
   85610:	20001f7c 	.word	0x20001f7c
   85614:	000852f1 	.word	0x000852f1

00085618 <udd_ep_abort>:
	udd_endpoint_dma_set_control(ep_index, 0);
   85618:	2100      	movs	r1, #0
   8561a:	4b17      	ldr	r3, [pc, #92]	; (85678 <udd_ep_abort+0x60>)
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8561c:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   85620:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	if (ep & USB_EP_DIR_IN) {
   85624:	0600      	lsls	r0, r0, #24
{
   85626:	b410      	push	{r4}
	udd_endpoint_dma_set_control(ep_index, 0);
   85628:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   8562a:	d40a      	bmi.n	85642 <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8562c:	4c13      	ldr	r4, [pc, #76]	; (8567c <udd_ep_abort+0x64>)
   8562e:	4814      	ldr	r0, [pc, #80]	; (85680 <udd_ep_abort+0x68>)
   85630:	1e53      	subs	r3, r2, #1
   85632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   85636:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   8563a:	2101      	movs	r1, #1
   8563c:	4623      	mov	r3, r4
}
   8563e:	bc10      	pop	{r4}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85640:	4718      	bx	r3
		for(;udd_nb_busy_bank(ep_index);) {
   85642:	0153      	lsls	r3, r2, #5
   85644:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85648:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8564c:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   85650:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   85654:	d0ea      	beq.n	8562c <udd_ep_abort+0x14>
			udd_kill_last_in_bank(ep_index);
   85656:	f44f 7400 	mov.w	r4, #512	; 0x200
   8565a:	f503 7c8a 	add.w	ip, r3, #276	; 0x114
   8565e:	f8cc 4000 	str.w	r4, [ip]
			while(Is_udd_kill_last(ep_index));
   85662:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   85666:	0589      	lsls	r1, r1, #22
   85668:	d4fb      	bmi.n	85662 <udd_ep_abort+0x4a>
		for(;udd_nb_busy_bank(ep_index);) {
   8566a:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
   8566e:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   85672:	d1f4      	bne.n	8565e <udd_ep_abort+0x46>
   85674:	e7da      	b.n	8562c <udd_ep_abort+0x14>
   85676:	bf00      	nop
   85678:	400a4300 	.word	0x400a4300
   8567c:	000842c1 	.word	0x000842c1
   85680:	20001f7c 	.word	0x20001f7c

00085684 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   85684:	4a07      	ldr	r2, [pc, #28]	; (856a4 <udd_test_mode_j+0x20>)
   85686:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8568a:	f023 0303 	bic.w	r3, r3, #3
   8568e:	f043 0302 	orr.w	r3, r3, #2
   85692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   85696:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8569a:	f043 0304 	orr.w	r3, r3, #4
   8569e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   856a2:	4770      	bx	lr
   856a4:	400a4000 	.word	0x400a4000

000856a8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   856a8:	4a07      	ldr	r2, [pc, #28]	; (856c8 <udd_test_mode_k+0x20>)
   856aa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   856ae:	f023 0303 	bic.w	r3, r3, #3
   856b2:	f043 0302 	orr.w	r3, r3, #2
   856b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   856ba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   856be:	f043 0308 	orr.w	r3, r3, #8
   856c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   856c6:	4770      	bx	lr
   856c8:	400a4000 	.word	0x400a4000

000856cc <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   856cc:	4a04      	ldr	r2, [pc, #16]	; (856e0 <udd_test_mode_se0_nak+0x14>)
   856ce:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   856d2:	f023 0303 	bic.w	r3, r3, #3
   856d6:	f043 0302 	orr.w	r3, r3, #2
   856da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   856de:	4770      	bx	lr
   856e0:	400a4000 	.word	0x400a4000

000856e4 <udd_test_mode_packet>:
{
   856e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   856e8:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   856ea:	466e      	mov	r6, sp
	udd_disable_endpoint(0);
   856ec:	f04f 0901 	mov.w	r9, #1
	udd_enable_hs_test_mode_packet();
   856f0:	46ec      	mov	ip, sp
	const uint8_t test_packet[] = {
   856f2:	4f22      	ldr	r7, [pc, #136]	; (8577c <udd_test_mode_packet+0x98>)
	udd_disable_endpoint(0);
   856f4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 85780 <udd_test_mode_packet+0x9c>
	const uint8_t test_packet[] = {
   856f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   856fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   856fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   856fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   85700:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   85702:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   85704:	e897 0003 	ldmia.w	r7, {r0, r1}
   85708:	f846 0b04 	str.w	r0, [r6], #4
   8570c:	7031      	strb	r1, [r6, #0]
	udd_disable_endpoint(0);
   8570e:	f8c8 9108 	str.w	r9, [r8, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85712:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   85716:	f1cc 5400 	rsb	r4, ip, #536870912	; 0x20000000
   8571a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8571e:	f023 0303 	bic.w	r3, r3, #3
   85722:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   85726:	f8c8 3100 	str.w	r3, [r8, #256]	; 0x100
	udd_enable_endpoint(0);
   8572a:	f8c8 9104 	str.w	r9, [r8, #260]	; 0x104
	udd_enable_hs_test_mode();
   8572e:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85732:	f04f 0e00 	mov.w	lr, #0
	udd_enable_hs_test_mode();
   85736:	f023 0303 	bic.w	r3, r3, #3
   8573a:	f043 0302 	orr.w	r3, r3, #2
   8573e:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85742:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
   85746:	ad0d      	add	r5, sp, #52	; 0x34
   85748:	f043 0310 	orr.w	r3, r3, #16
   8574c:	f504 14c0 	add.w	r4, r4, #1572864	; 0x180000
   85750:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
	for (i = 0; i < sizeof(test_packet); i++) {
   85754:	e001      	b.n	8575a <udd_test_mode_packet+0x76>
		*ptr_dest++ = *ptr_src++;
   85756:	f81c ef01 	ldrb.w	lr, [ip, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   8575a:	45ac      	cmp	ip, r5
		*ptr_dest++ = *ptr_src++;
   8575c:	f804 e00c 	strb.w	lr, [r4, ip]
	for (i = 0; i < sizeof(test_packet); i++) {
   85760:	d1f9      	bne.n	85756 <udd_test_mode_packet+0x72>
	udd_ack_in_send(0);
   85762:	f44f 6180 	mov.w	r1, #1024	; 0x400
	udd_raise_tx_pkt_ready(0);
   85766:	f44f 6200 	mov.w	r2, #2048	; 0x800
	udd_ack_in_send(0);
   8576a:	4b05      	ldr	r3, [pc, #20]	; (85780 <udd_test_mode_packet+0x9c>)
   8576c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85770:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85774:	b00f      	add	sp, #60	; 0x3c
   85776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8577a:	bf00      	nop
   8577c:	0008d7a0 	.word	0x0008d7a0
   85780:	400a4000 	.word	0x400a4000

00085784 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   85784:	3801      	subs	r0, #1
   85786:	2802      	cmp	r0, #2
   85788:	d81a      	bhi.n	857c0 <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   8578a:	b1da      	cbz	r2, 857c4 <_write+0x40>
{
   8578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85790:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   85792:	4614      	mov	r4, r2
   85794:	4f0c      	ldr	r7, [pc, #48]	; (857c8 <_write+0x44>)
   85796:	f8df 8034 	ldr.w	r8, [pc, #52]	; 857cc <_write+0x48>
   8579a:	1c56      	adds	r6, r2, #1
   8579c:	e001      	b.n	857a2 <_write+0x1e>
   8579e:	3c01      	subs	r4, #1
   857a0:	d00b      	beq.n	857ba <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   857a2:	6838      	ldr	r0, [r7, #0]
   857a4:	f8d8 3000 	ldr.w	r3, [r8]
   857a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   857ac:	4798      	blx	r3
   857ae:	2800      	cmp	r0, #0
   857b0:	eba6 0204 	sub.w	r2, r6, r4
   857b4:	daf3      	bge.n	8579e <_write+0x1a>
		return -1;
   857b6:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   857ba:	4610      	mov	r0, r2
   857bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   857c0:	f04f 32ff 	mov.w	r2, #4294967295
}
   857c4:	4610      	mov	r0, r2
   857c6:	4770      	bx	lr
   857c8:	20002028 	.word	0x20002028
   857cc:	20002024 	.word	0x20002024

000857d0 <LED_Off>:
 */
void LED_Off(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   857d0:	2806      	cmp	r0, #6
   857d2:	d002      	beq.n	857da <LED_Off+0xa>
   857d4:	2807      	cmp	r0, #7
   857d6:	d000      	beq.n	857da <LED_Off+0xa>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   857d8:	4770      	bx	lr
				gpio_set_pin_low(led_gpio);
   857da:	4b01      	ldr	r3, [pc, #4]	; (857e0 <LED_Off+0x10>)
   857dc:	4718      	bx	r3
   857de:	bf00      	nop
   857e0:	00085d39 	.word	0x00085d39

000857e4 <LED_On>:
 */
void LED_On(uint32_t led_gpio)
{
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   857e4:	2806      	cmp	r0, #6
   857e6:	d002      	beq.n	857ee <LED_On+0xa>
   857e8:	2807      	cmp	r0, #7
   857ea:	d000      	beq.n	857ee <LED_On+0xa>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   857ec:	4770      	bx	lr
				gpio_set_pin_high(led_gpio);
   857ee:	4b01      	ldr	r3, [pc, #4]	; (857f4 <LED_On+0x10>)
   857f0:	4718      	bx	r3
   857f2:	bf00      	nop
   857f4:	00085d1d 	.word	0x00085d1d

000857f8 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   857f8:	4917      	ldr	r1, [pc, #92]	; (85858 <Reset_Handler+0x60>)
   857fa:	4818      	ldr	r0, [pc, #96]	; (8585c <Reset_Handler+0x64>)
{
   857fc:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   857fe:	4281      	cmp	r1, r0
   85800:	d009      	beq.n	85816 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   85802:	4a17      	ldr	r2, [pc, #92]	; (85860 <Reset_Handler+0x68>)
   85804:	4290      	cmp	r0, r2
   85806:	d206      	bcs.n	85816 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   85808:	3a01      	subs	r2, #1
   8580a:	1a12      	subs	r2, r2, r0
   8580c:	f022 0203 	bic.w	r2, r2, #3
   85810:	4b14      	ldr	r3, [pc, #80]	; (85864 <Reset_Handler+0x6c>)
   85812:	3204      	adds	r2, #4
   85814:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   85816:	4814      	ldr	r0, [pc, #80]	; (85868 <Reset_Handler+0x70>)
   85818:	4a14      	ldr	r2, [pc, #80]	; (8586c <Reset_Handler+0x74>)
   8581a:	4290      	cmp	r0, r2
   8581c:	d207      	bcs.n	8582e <Reset_Handler+0x36>
		*pDest++ = 0;
   8581e:	3a01      	subs	r2, #1
   85820:	1a12      	subs	r2, r2, r0
   85822:	f022 0203 	bic.w	r2, r2, #3
   85826:	2100      	movs	r1, #0
   85828:	4b11      	ldr	r3, [pc, #68]	; (85870 <Reset_Handler+0x78>)
   8582a:	3204      	adds	r2, #4
   8582c:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8582e:	4b11      	ldr	r3, [pc, #68]	; (85874 <Reset_Handler+0x7c>)
   85830:	4911      	ldr	r1, [pc, #68]	; (85878 <Reset_Handler+0x80>)
   85832:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   85836:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8583a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8583e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   85842:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   85844:	d203      	bcs.n	8584e <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   85846:	688b      	ldr	r3, [r1, #8]
   85848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8584c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8584e:	4b0b      	ldr	r3, [pc, #44]	; (8587c <Reset_Handler+0x84>)
   85850:	4798      	blx	r3

	/* Branch to main function */
	main();
   85852:	4b0b      	ldr	r3, [pc, #44]	; (85880 <Reset_Handler+0x88>)
   85854:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   85856:	e7fe      	b.n	85856 <Reset_Handler+0x5e>
   85858:	0008dc1c 	.word	0x0008dc1c
   8585c:	20000000 	.word	0x20000000
   85860:	20001520 	.word	0x20001520
   85864:	00086d65 	.word	0x00086d65
   85868:	20001520 	.word	0x20001520
   8586c:	200028d4 	.word	0x200028d4
   85870:	00086e51 	.word	0x00086e51
   85874:	00080000 	.word	0x00080000
   85878:	e000ed00 	.word	0xe000ed00
   8587c:	00086cf5 	.word	0x00086cf5
   85880:	000800fd 	.word	0x000800fd

00085884 <spi_enable_clock>:
   85884:	2014      	movs	r0, #20
   85886:	4b01      	ldr	r3, [pc, #4]	; (8588c <spi_enable_clock+0x8>)
   85888:	4718      	bx	r3
   8588a:	bf00      	nop
   8588c:	00085b7d 	.word	0x00085b7d

00085890 <spi_disable_clock>:
	pmc_disable_periph_clk(ul_id);
   85890:	2014      	movs	r0, #20
   85892:	4b01      	ldr	r3, [pc, #4]	; (85898 <spi_disable_clock+0x8>)
   85894:	4718      	bx	r3
   85896:	bf00      	nop
   85898:	00085ba1 	.word	0x00085ba1

0008589c <spi_read>:
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   8589c:	f643 2399 	movw	r3, #15001	; 0x3a99
{
   858a0:	b410      	push	{r4}
	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   858a2:	e001      	b.n	858a8 <spi_read+0xc>
		if (!timeout--) {
   858a4:	3b01      	subs	r3, #1
   858a6:	d00d      	beq.n	858c4 <spi_read+0x28>
	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   858a8:	6904      	ldr	r4, [r0, #16]
   858aa:	07e4      	lsls	r4, r4, #31
   858ac:	d5fa      	bpl.n	858a4 <spi_read+0x8>
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   858ae:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   858b0:	6840      	ldr	r0, [r0, #4]
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);

	return SPI_OK;
}
   858b2:	bc10      	pop	{r4}
   858b4:	0780      	lsls	r0, r0, #30
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   858b6:	bf44      	itt	mi
   858b8:	f3c3 4003 	ubfxmi	r0, r3, #16, #4
   858bc:	7010      	strbmi	r0, [r2, #0]
	return SPI_OK;
   858be:	2000      	movs	r0, #0
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   858c0:	800b      	strh	r3, [r1, #0]
}
   858c2:	4770      	bx	lr
			return SPI_ERROR_TIMEOUT;
   858c4:	2001      	movs	r0, #1
}
   858c6:	bc10      	pop	{r4}
   858c8:	4770      	bx	lr
   858ca:	bf00      	nop

000858cc <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   858cc:	b510      	push	{r4, lr}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   858ce:	f643 2c99 	movw	ip, #15001	; 0x3a99
{
   858d2:	4686      	mov	lr, r0
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   858d4:	e002      	b.n	858dc <spi_write+0x10>
		if (!timeout--) {
   858d6:	f1bc 0c01 	subs.w	ip, ip, #1
   858da:	d012      	beq.n	85902 <spi_write+0x36>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   858dc:	f8de 4010 	ldr.w	r4, [lr, #16]
   858e0:	07a4      	lsls	r4, r4, #30
   858e2:	d5f8      	bpl.n	858d6 <spi_write+0xa>
   858e4:	f8de 0004 	ldr.w	r0, [lr, #4]
   858e8:	0780      	lsls	r0, r0, #30
   858ea:	d506      	bpl.n	858fa <spi_write+0x2e>
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   858ec:	0412      	lsls	r2, r2, #16
   858ee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   858f2:	4311      	orrs	r1, r2
		if (uc_last) {
   858f4:	b10b      	cbz	r3, 858fa <spi_write+0x2e>
			value |= SPI_TDR_LASTXFER;
   858f6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   858fa:	f8ce 100c 	str.w	r1, [lr, #12]

	return SPI_OK;
   858fe:	2000      	movs	r0, #0
}
   85900:	bd10      	pop	{r4, pc}
			return SPI_ERROR_TIMEOUT;
   85902:	2001      	movs	r0, #1
}
   85904:	bd10      	pop	{r4, pc}
   85906:	bf00      	nop

00085908 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   85908:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8590c:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_polarity) {
   8590e:	b11a      	cbz	r2, 85918 <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   85910:	f043 0301 	orr.w	r3, r3, #1
   85914:	6303      	str	r3, [r0, #48]	; 0x30
   85916:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   85918:	f023 0301 	bic.w	r3, r3, #1
   8591c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8591e:	4770      	bx	lr

00085920 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   85920:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85924:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if (ul_phase) {
   85926:	b11a      	cbz	r2, 85930 <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   85928:	f043 0302 	orr.w	r3, r3, #2
   8592c:	6303      	str	r3, [r0, #48]	; 0x30
   8592e:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   85930:	f023 0302 	bic.w	r3, r3, #2
   85934:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   85936:	4770      	bx	lr

00085938 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   85938:	1e43      	subs	r3, r0, #1
   8593a:	440b      	add	r3, r1
   8593c:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   85940:	1e43      	subs	r3, r0, #1
   85942:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   85944:	bf94      	ite	ls
   85946:	b200      	sxthls	r0, r0
		return -1;
   85948:	f04f 30ff 	movhi.w	r0, #4294967295
}
   8594c:	4770      	bx	lr
   8594e:	bf00      	nop

00085950 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   85950:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85954:	6b08      	ldr	r0, [r1, #48]	; 0x30
   85956:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   8595a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   8595c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8595e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   85962:	630b      	str	r3, [r1, #48]	; 0x30
}
   85964:	4770      	bx	lr
   85966:	bf00      	nop

00085968 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   85968:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8596a:	203e      	movs	r0, #62	; 0x3e
   8596c:	4b07      	ldr	r3, [pc, #28]	; (8598c <sysclk_enable_usb+0x24>)
   8596e:	4798      	blx	r3
		break;
   85970:	4c07      	ldr	r4, [pc, #28]	; (85990 <sysclk_enable_usb+0x28>)
		return pmc_osc_is_ready_main_xtal();
   85972:	47a0      	blx	r4
   85974:	2800      	cmp	r0, #0
   85976:	d0fc      	beq.n	85972 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   85978:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   8597c:	4b05      	ldr	r3, [pc, #20]	; (85994 <sysclk_enable_usb+0x2c>)
   8597e:	4c06      	ldr	r4, [pc, #24]	; (85998 <sysclk_enable_usb+0x30>)
   85980:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   85982:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   85984:	2800      	cmp	r0, #0
   85986:	d0fc      	beq.n	85982 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   85988:	bd10      	pop	{r4, pc}
   8598a:	bf00      	nop
   8598c:	00085ae1 	.word	0x00085ae1
   85990:	00085b05 	.word	0x00085b05
   85994:	400e0400 	.word	0x400e0400
   85998:	00085b6d 	.word	0x00085b6d

0008599c <sysclk_disable_usb>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   8599c:	4a02      	ldr	r2, [pc, #8]	; (859a8 <sysclk_disable_usb+0xc>)
   8599e:	69d3      	ldr	r3, [r2, #28]
   859a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   859a4:	61d3      	str	r3, [r2, #28]
void sysclk_disable_usb(void)
{
	if (CONFIG_SYSCLK_SOURCE != SYSCLK_SRC_UPLLCK) {
		pll_disable(1);
	}
}
   859a6:	4770      	bx	lr
   859a8:	400e0400 	.word	0x400e0400

000859ac <sysclk_init>:

void sysclk_init(void)
{
   859ac:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   859ae:	4812      	ldr	r0, [pc, #72]	; (859f8 <sysclk_init+0x4c>)
   859b0:	4d12      	ldr	r5, [pc, #72]	; (859fc <sysclk_init+0x50>)
   859b2:	47a8      	blx	r5
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   859b4:	203e      	movs	r0, #62	; 0x3e
   859b6:	4b12      	ldr	r3, [pc, #72]	; (85a00 <sysclk_init+0x54>)
   859b8:	4798      	blx	r3
		break;
   859ba:	4c12      	ldr	r4, [pc, #72]	; (85a04 <sysclk_init+0x58>)
		return pmc_osc_is_ready_main_xtal();
   859bc:	47a0      	blx	r4
   859be:	2800      	cmp	r0, #0
   859c0:	d0fc      	beq.n	859bc <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   859c2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   859c6:	4b10      	ldr	r3, [pc, #64]	; (85a08 <sysclk_init+0x5c>)
   859c8:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   859ca:	4c10      	ldr	r4, [pc, #64]	; (85a0c <sysclk_init+0x60>)
   859cc:	47a0      	blx	r4
   859ce:	2800      	cmp	r0, #0
   859d0:	d0fc      	beq.n	859cc <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   859d2:	4b0f      	ldr	r3, [pc, #60]	; (85a10 <sysclk_init+0x64>)
   859d4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   859d6:	4b0f      	ldr	r3, [pc, #60]	; (85a14 <sysclk_init+0x68>)
   859d8:	4a0f      	ldr	r2, [pc, #60]	; (85a18 <sysclk_init+0x6c>)
   859da:	4c10      	ldr	r4, [pc, #64]	; (85a1c <sysclk_init+0x70>)
   859dc:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   859de:	47a0      	blx	r4
   859e0:	2800      	cmp	r0, #0
   859e2:	d0fc      	beq.n	859de <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   859e4:	4b0e      	ldr	r3, [pc, #56]	; (85a20 <sysclk_init+0x74>)
   859e6:	2010      	movs	r0, #16
   859e8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   859ea:	4b0e      	ldr	r3, [pc, #56]	; (85a24 <sysclk_init+0x78>)
   859ec:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   859ee:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   859f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   859f4:	4800      	ldr	r0, [pc, #0]	; (859f8 <sysclk_init+0x4c>)
   859f6:	4718      	bx	r3
   859f8:	05b8d800 	.word	0x05b8d800
   859fc:	20000129 	.word	0x20000129
   85a00:	00085ae1 	.word	0x00085ae1
   85a04:	00085b05 	.word	0x00085b05
   85a08:	00085b25 	.word	0x00085b25
   85a0c:	00085b15 	.word	0x00085b15
   85a10:	00085b4d 	.word	0x00085b4d
   85a14:	400e0400 	.word	0x400e0400
   85a18:	200f3f01 	.word	0x200f3f01
   85a1c:	00085b5d 	.word	0x00085b5d
   85a20:	00085a85 	.word	0x00085a85
   85a24:	0008684d 	.word	0x0008684d

00085a28 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85a28:	4915      	ldr	r1, [pc, #84]	; (85a80 <pmc_switch_mck_to_mainck+0x58>)
   85a2a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85a2c:	f023 0303 	bic.w	r3, r3, #3
   85a30:	f043 0301 	orr.w	r3, r3, #1
   85a34:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85a36:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   85a38:	071b      	lsls	r3, r3, #28
   85a3a:	bf58      	it	pl
   85a3c:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   85a40:	d502      	bpl.n	85a48 <pmc_switch_mck_to_mainck+0x20>
   85a42:	e004      	b.n	85a4e <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85a44:	3b01      	subs	r3, #1
   85a46:	d016      	beq.n	85a76 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85a48:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85a4a:	0712      	lsls	r2, r2, #28
   85a4c:	d5fa      	bpl.n	85a44 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85a4e:	490c      	ldr	r1, [pc, #48]	; (85a80 <pmc_switch_mck_to_mainck+0x58>)
   85a50:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85a56:	4303      	orrs	r3, r0
   85a58:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85a5a:	6e88      	ldr	r0, [r1, #104]	; 0x68
   85a5c:	f010 0008 	ands.w	r0, r0, #8
   85a60:	bf08      	it	eq
   85a62:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   85a66:	d002      	beq.n	85a6e <pmc_switch_mck_to_mainck+0x46>
   85a68:	e007      	b.n	85a7a <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85a6a:	3b01      	subs	r3, #1
   85a6c:	d003      	beq.n	85a76 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85a6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85a70:	0712      	lsls	r2, r2, #28
   85a72:	d5fa      	bpl.n	85a6a <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   85a74:	4770      	bx	lr
			return 1;
   85a76:	2001      	movs	r0, #1
   85a78:	4770      	bx	lr
	return 0;
   85a7a:	2000      	movs	r0, #0
   85a7c:	4770      	bx	lr
   85a7e:	bf00      	nop
   85a80:	400e0400 	.word	0x400e0400

00085a84 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85a84:	4915      	ldr	r1, [pc, #84]	; (85adc <pmc_switch_mck_to_pllack+0x58>)
   85a86:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85a8c:	4303      	orrs	r3, r0
   85a8e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85a90:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   85a92:	071b      	lsls	r3, r3, #28
   85a94:	bf58      	it	pl
   85a96:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   85a9a:	d502      	bpl.n	85aa2 <pmc_switch_mck_to_pllack+0x1e>
   85a9c:	e004      	b.n	85aa8 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85a9e:	3b01      	subs	r3, #1
   85aa0:	d017      	beq.n	85ad2 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85aa2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85aa4:	0710      	lsls	r0, r2, #28
   85aa6:	d5fa      	bpl.n	85a9e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85aa8:	490c      	ldr	r1, [pc, #48]	; (85adc <pmc_switch_mck_to_pllack+0x58>)
   85aaa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85aac:	f023 0303 	bic.w	r3, r3, #3
   85ab0:	f043 0302 	orr.w	r3, r3, #2
   85ab4:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85ab6:	6e88      	ldr	r0, [r1, #104]	; 0x68
   85ab8:	f010 0008 	ands.w	r0, r0, #8
   85abc:	bf08      	it	eq
   85abe:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   85ac2:	d002      	beq.n	85aca <pmc_switch_mck_to_pllack+0x46>
   85ac4:	e007      	b.n	85ad6 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85ac6:	3b01      	subs	r3, #1
   85ac8:	d003      	beq.n	85ad2 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85aca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85acc:	0712      	lsls	r2, r2, #28
   85ace:	d5fa      	bpl.n	85ac6 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   85ad0:	4770      	bx	lr
			return 1;
   85ad2:	2001      	movs	r0, #1
   85ad4:	4770      	bx	lr
	return 0;
   85ad6:	2000      	movs	r0, #0
   85ad8:	4770      	bx	lr
   85ada:	bf00      	nop
   85adc:	400e0400 	.word	0x400e0400

00085ae0 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   85ae0:	4a07      	ldr	r2, [pc, #28]	; (85b00 <pmc_osc_enable_main_xtal+0x20>)
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   85ae2:	0203      	lsls	r3, r0, #8
	uint32_t mor = PMC->CKGR_MOR;
   85ae4:	6a11      	ldr	r1, [r2, #32]
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   85ae6:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   85ae8:	f021 0103 	bic.w	r1, r1, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   85aec:	430b      	orrs	r3, r1
   85aee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85af2:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   85af6:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85af8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85afa:	07db      	lsls	r3, r3, #31
   85afc:	d5fc      	bpl.n	85af8 <pmc_osc_enable_main_xtal+0x18>
}
   85afe:	4770      	bx	lr
   85b00:	400e0400 	.word	0x400e0400

00085b04 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   85b04:	4b02      	ldr	r3, [pc, #8]	; (85b10 <pmc_osc_is_ready_main_xtal+0xc>)
   85b06:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85b08:	f000 0001 	and.w	r0, r0, #1
   85b0c:	4770      	bx	lr
   85b0e:	bf00      	nop
   85b10:	400e0400 	.word	0x400e0400

00085b14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   85b14:	4b02      	ldr	r3, [pc, #8]	; (85b20 <pmc_osc_is_ready_mainck+0xc>)
   85b16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85b18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   85b1c:	4770      	bx	lr
   85b1e:	bf00      	nop
   85b20:	400e0400 	.word	0x400e0400

00085b24 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   85b24:	4b08      	ldr	r3, [pc, #32]	; (85b48 <pmc_mainck_osc_select+0x24>)
   85b26:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   85b28:	b130      	cbz	r0, 85b38 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   85b2a:	4a07      	ldr	r2, [pc, #28]	; (85b48 <pmc_mainck_osc_select+0x24>)
		mor |=  CKGR_MOR_MOSCSEL;
   85b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   85b30:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85b34:	6213      	str	r3, [r2, #32]
}
   85b36:	4770      	bx	lr
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   85b38:	4a03      	ldr	r2, [pc, #12]	; (85b48 <pmc_mainck_osc_select+0x24>)
		mor &= ~CKGR_MOR_MOSCSEL;
   85b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   85b3e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85b42:	6213      	str	r3, [r2, #32]
}
   85b44:	4770      	bx	lr
   85b46:	bf00      	nop
   85b48:	400e0400 	.word	0x400e0400

00085b4c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85b4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   85b50:	4b01      	ldr	r3, [pc, #4]	; (85b58 <pmc_disable_pllack+0xc>)
   85b52:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   85b54:	4770      	bx	lr
   85b56:	bf00      	nop
   85b58:	400e0400 	.word	0x400e0400

00085b5c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   85b5c:	4b02      	ldr	r3, [pc, #8]	; (85b68 <pmc_is_locked_pllack+0xc>)
   85b5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85b60:	f000 0002 	and.w	r0, r0, #2
   85b64:	4770      	bx	lr
   85b66:	bf00      	nop
   85b68:	400e0400 	.word	0x400e0400

00085b6c <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   85b6c:	4b02      	ldr	r3, [pc, #8]	; (85b78 <pmc_is_locked_upll+0xc>)
   85b6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   85b70:	f000 0040 	and.w	r0, r0, #64	; 0x40
   85b74:	4770      	bx	lr
   85b76:	bf00      	nop
   85b78:	400e0400 	.word	0x400e0400

00085b7c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85b7c:	281d      	cmp	r0, #29
   85b7e:	d80a      	bhi.n	85b96 <pmc_enable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   85b80:	2301      	movs	r3, #1
   85b82:	4a06      	ldr	r2, [pc, #24]	; (85b9c <pmc_enable_periph_clk+0x20>)
   85b84:	4083      	lsls	r3, r0
   85b86:	6991      	ldr	r1, [r2, #24]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   85b88:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   85b8a:	ea33 0101 	bics.w	r1, r3, r1
   85b8e:	d001      	beq.n	85b94 <pmc_enable_periph_clk+0x18>
			PMC->PMC_PCER0 = 1 << ul_id;
   85b90:	6113      	str	r3, [r2, #16]
   85b92:	4770      	bx	lr
}
   85b94:	4770      	bx	lr
		return 1;
   85b96:	2001      	movs	r0, #1
   85b98:	4770      	bx	lr
   85b9a:	bf00      	nop
   85b9c:	400e0400 	.word	0x400e0400

00085ba0 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85ba0:	281d      	cmp	r0, #29
   85ba2:	d80a      	bhi.n	85bba <pmc_disable_periph_clk+0x1a>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   85ba4:	2301      	movs	r3, #1
   85ba6:	4a06      	ldr	r2, [pc, #24]	; (85bc0 <pmc_disable_periph_clk+0x20>)
   85ba8:	4083      	lsls	r3, r0
   85baa:	6991      	ldr	r1, [r2, #24]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   85bac:	2000      	movs	r0, #0
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   85bae:	ea33 0101 	bics.w	r1, r3, r1
   85bb2:	d000      	beq.n	85bb6 <pmc_disable_periph_clk+0x16>
}
   85bb4:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   85bb6:	6153      	str	r3, [r2, #20]
   85bb8:	4770      	bx	lr
		return 1;
   85bba:	2001      	movs	r0, #1
   85bbc:	4770      	bx	lr
   85bbe:	bf00      	nop
   85bc0:	400e0400 	.word	0x400e0400

00085bc4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   85bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
   85bc8:	4a01      	ldr	r2, [pc, #4]	; (85bd0 <pmc_enable_pck+0xc>)
   85bca:	4083      	lsls	r3, r0
   85bcc:	6013      	str	r3, [r2, #0]
}
   85bce:	4770      	bx	lr
   85bd0:	400e0400 	.word	0x400e0400

00085bd4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   85bd4:	4b03      	ldr	r3, [pc, #12]	; (85be4 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   85bd6:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   85bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   85bdc:	4310      	orrs	r0, r2
   85bde:	6718      	str	r0, [r3, #112]	; 0x70
}
   85be0:	4770      	bx	lr
   85be2:	bf00      	nop
   85be4:	400e0400 	.word	0x400e0400

00085be8 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   85be8:	4b01      	ldr	r3, [pc, #4]	; (85bf0 <udi_vendor_getsetting+0x8>)
}
   85bea:	7818      	ldrb	r0, [r3, #0]
   85bec:	4770      	bx	lr
   85bee:	bf00      	nop
   85bf0:	2000202c 	.word	0x2000202c

00085bf4 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   85bf4:	4b02      	ldr	r3, [pc, #8]	; (85c00 <udi_vendor_disable+0xc>)
   85bf6:	781b      	ldrb	r3, [r3, #0]
   85bf8:	b103      	cbz	r3, 85bfc <udi_vendor_disable+0x8>
}
   85bfa:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   85bfc:	4b01      	ldr	r3, [pc, #4]	; (85c04 <udi_vendor_disable+0x10>)
   85bfe:	4718      	bx	r3
   85c00:	2000202c 	.word	0x2000202c
   85c04:	000826e9 	.word	0x000826e9

00085c08 <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   85c08:	4b08      	ldr	r3, [pc, #32]	; (85c2c <udi_vendor_setup+0x24>)
   85c0a:	f993 2000 	ldrsb.w	r2, [r3]
   85c0e:	781b      	ldrb	r3, [r3, #0]
   85c10:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85c12:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   85c16:	db03      	blt.n	85c20 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85c18:	2b40      	cmp	r3, #64	; 0x40
   85c1a:	d005      	beq.n	85c28 <udi_vendor_setup+0x20>
}
   85c1c:	2000      	movs	r0, #0
   85c1e:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85c20:	2b40      	cmp	r3, #64	; 0x40
   85c22:	d1fb      	bne.n	85c1c <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   85c24:	4b02      	ldr	r3, [pc, #8]	; (85c30 <udi_vendor_setup+0x28>)
   85c26:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   85c28:	4b02      	ldr	r3, [pc, #8]	; (85c34 <udi_vendor_setup+0x2c>)
   85c2a:	4718      	bx	r3
   85c2c:	2000200c 	.word	0x2000200c
   85c30:	00082745 	.word	0x00082745
   85c34:	000826f5 	.word	0x000826f5

00085c38 <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   85c38:	4b06      	ldr	r3, [pc, #24]	; (85c54 <udi_vendor_enable+0x1c>)
{
   85c3a:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   85c3c:	4798      	blx	r3
   85c3e:	4a06      	ldr	r2, [pc, #24]	; (85c58 <udi_vendor_enable+0x20>)
   85c40:	78c3      	ldrb	r3, [r0, #3]
   85c42:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   85c44:	b10b      	cbz	r3, 85c4a <udi_vendor_enable+0x12>
}
   85c46:	2001      	movs	r0, #1
   85c48:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   85c4a:	4b04      	ldr	r3, [pc, #16]	; (85c5c <udi_vendor_enable+0x24>)
}
   85c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   85c50:	4718      	bx	r3
   85c52:	bf00      	nop
   85c54:	00081f25 	.word	0x00081f25
   85c58:	2000202c 	.word	0x2000202c
   85c5c:	000826c1 	.word	0x000826c1

00085c60 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85c60:	b530      	push	{r4, r5, lr}
   85c62:	4684      	mov	ip, r0
   85c64:	4615      	mov	r5, r2
   85c66:	b083      	sub	sp, #12
   85c68:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   85c6a:	4662      	mov	r2, ip
   85c6c:	2100      	movs	r1, #0
   85c6e:	4c03      	ldr	r4, [pc, #12]	; (85c7c <udi_vendor_bulk_in_run+0x1c>)
   85c70:	9500      	str	r5, [sp, #0]
   85c72:	2081      	movs	r0, #129	; 0x81
   85c74:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   85c76:	b003      	add	sp, #12
   85c78:	bd30      	pop	{r4, r5, pc}
   85c7a:	bf00      	nop
   85c7c:	000852f1 	.word	0x000852f1

00085c80 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85c80:	b530      	push	{r4, r5, lr}
   85c82:	4684      	mov	ip, r0
   85c84:	4615      	mov	r5, r2
   85c86:	b083      	sub	sp, #12
   85c88:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   85c8a:	4662      	mov	r2, ip
   85c8c:	2100      	movs	r1, #0
   85c8e:	4c03      	ldr	r4, [pc, #12]	; (85c9c <udi_vendor_bulk_out_run+0x1c>)
   85c90:	9500      	str	r5, [sp, #0]
   85c92:	2002      	movs	r0, #2
   85c94:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   85c96:	b003      	add	sp, #12
   85c98:	bd30      	pop	{r4, r5, pc}
   85c9a:	bf00      	nop
   85c9c:	000852f1 	.word	0x000852f1

00085ca0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   85ca0:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   85ca2:	f1a1 030e 	sub.w	r3, r1, #14
   85ca6:	2b01      	cmp	r3, #1
   85ca8:	d917      	bls.n	85cda <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85caa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85cae:	b672      	cpsid	i
   85cb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85cb4:	2300      	movs	r3, #0
   85cb6:	4c0a      	ldr	r4, [pc, #40]	; (85ce0 <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   85cb8:	b2c9      	uxtb	r1, r1
   85cba:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   85cbc:	4b09      	ldr	r3, [pc, #36]	; (85ce4 <efc_perform_command+0x44>)
   85cbe:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   85cc2:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   85cc4:	4b08      	ldr	r3, [pc, #32]	; (85ce8 <efc_perform_command+0x48>)
   85cc6:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   85cca:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   85ccc:	b925      	cbnz	r5, 85cd8 <efc_perform_command+0x38>
		cpu_irq_enable();
   85cce:	2301      	movs	r3, #1
   85cd0:	7023      	strb	r3, [r4, #0]
   85cd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85cd6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   85cd8:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   85cda:	f04f 30ff 	mov.w	r0, #4294967295
}
   85cde:	bd38      	pop	{r3, r4, r5, pc}
   85ce0:	20000b40 	.word	0x20000b40
   85ce4:	00ffff00 	.word	0x00ffff00
   85ce8:	20000079 	.word	0x20000079

00085cec <pio_enable_output_write>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_OWER = ul_mask;
   85cec:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   85cf0:	4770      	bx	lr
   85cf2:	bf00      	nop

00085cf4 <pio_sync_output_write>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ODSR = ul_mask;
   85cf4:	6381      	str	r1, [r0, #56]	; 0x38
}
   85cf6:	4770      	bx	lr

00085cf8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   85cf8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   85cfa:	4770      	bx	lr

00085cfc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   85cfc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   85cfe:	4770      	bx	lr

00085d00 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d00:	0943      	lsrs	r3, r0, #5
   85d02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85d06:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85d0a:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   85d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85d0e:	f000 001f 	and.w	r0, r0, #31
   85d12:	fa23 f000 	lsr.w	r0, r3, r0
}
   85d16:	f000 0001 	and.w	r0, r0, #1
   85d1a:	4770      	bx	lr

00085d1c <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85d1c:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d1e:	0943      	lsrs	r3, r0, #5
   85d20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85d24:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85d28:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d2c:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85d2e:	fa02 f000 	lsl.w	r0, r2, r0
   85d32:	6318      	str	r0, [r3, #48]	; 0x30
}
   85d34:	4770      	bx	lr
   85d36:	bf00      	nop

00085d38 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85d38:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d3a:	0943      	lsrs	r3, r0, #5
   85d3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85d40:	f203 7306 	addw	r3, r3, #1798	; 0x706
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85d44:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d48:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85d4a:	fa02 f000 	lsl.w	r0, r2, r0
   85d4e:	6358      	str	r0, [r3, #52]	; 0x34
}
   85d50:	4770      	bx	lr
   85d52:	bf00      	nop

00085d54 <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   85d54:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d56:	0943      	lsrs	r3, r0, #5
   85d58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85d5c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85d60:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   85d62:	6b99      	ldr	r1, [r3, #56]	; 0x38
   85d64:	f000 001f 	and.w	r0, r0, #31
   85d68:	fa02 f000 	lsl.w	r0, r2, r0
   85d6c:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85d6e:	bf14      	ite	ne
   85d70:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85d72:	6318      	streq	r0, [r3, #48]	; 0x30
}
   85d74:	4770      	bx	lr
   85d76:	bf00      	nop

00085d78 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d78:	0943      	lsrs	r3, r0, #5
   85d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   85d7e:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d82:	f203 7306 	addw	r3, r3, #1798	; 0x706
	switch (ul_flags & PIO_TYPE_Msk) {
   85d86:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85d8a:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   85d8e:	d035      	beq.n	85dfc <pio_configure_pin+0x84>
{
   85d90:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   85d92:	d816      	bhi.n	85dc2 <pio_configure_pin+0x4a>
   85d94:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   85d98:	d01b      	beq.n	85dd2 <pio_configure_pin+0x5a>
   85d9a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   85d9e:	d115      	bne.n	85dcc <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   85da0:	f04f 0c01 	mov.w	ip, #1
   85da4:	f000 001f 	and.w	r0, r0, #31
   85da8:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   85dac:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   85dae:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   85db0:	4310      	orrs	r0, r2
   85db2:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   85db4:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   85db8:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   85dba:	d01b      	beq.n	85df4 <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   85dbc:	665a      	str	r2, [r3, #100]	; 0x64
}
   85dbe:	bc10      	pop	{r4}
   85dc0:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   85dc2:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   85dc6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   85dca:	d02f      	beq.n	85e2c <pio_configure_pin+0xb4>
   85dcc:	2000      	movs	r0, #0
}
   85dce:	bc10      	pop	{r4}
   85dd0:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   85dd2:	f04f 0c01 	mov.w	ip, #1
   85dd6:	f000 001f 	and.w	r0, r0, #31
   85dda:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   85dde:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   85de0:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85de2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   85de4:	4020      	ands	r0, r4
   85de6:	ea20 0002 	bic.w	r0, r0, r2
   85dea:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   85dec:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   85df0:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   85df2:	d1e3      	bne.n	85dbc <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   85df4:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   85df6:	4660      	mov	r0, ip
}
   85df8:	bc10      	pop	{r4}
   85dfa:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   85dfc:	2201      	movs	r2, #1
   85dfe:	f000 001f 	and.w	r0, r0, #31
   85e02:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   85e04:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   85e06:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   85e08:	bf4c      	ite	mi
   85e0a:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85e0c:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   85e0e:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   85e12:	bf14      	ite	ne
   85e14:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   85e16:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   85e18:	0788      	lsls	r0, r1, #30
   85e1a:	d422      	bmi.n	85e62 <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   85e1c:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   85e1e:	bf48      	it	mi
   85e20:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   85e24:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   85e26:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   85e28:	601a      	str	r2, [r3, #0]
}
   85e2a:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85e2c:	2201      	movs	r2, #1
   85e2e:	f000 001f 	and.w	r0, r0, #31
   85e32:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85e34:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85e38:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   85e3c:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   85e3e:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   85e40:	bf4c      	ite	mi
   85e42:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85e44:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   85e46:	b954      	cbnz	r4, 85e5e <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   85e48:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   85e4a:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   85e4e:	bf0c      	ite	eq
   85e50:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   85e52:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   85e54:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   85e56:	601a      	str	r2, [r3, #0]
	return 1;
   85e58:	2001      	movs	r0, #1
}
   85e5a:	bc10      	pop	{r4}
   85e5c:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   85e5e:	651a      	str	r2, [r3, #80]	; 0x50
   85e60:	e7f3      	b.n	85e4a <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   85e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   85e66:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   85e68:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   85e6a:	601a      	str	r2, [r3, #0]
}
   85e6c:	4770      	bx	lr
   85e6e:	bf00      	nop

00085e70 <pio_configure_pin_group>:
{
   85e70:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   85e72:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   85e76:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   85e7a:	d029      	beq.n	85ed0 <pio_configure_pin_group+0x60>
{
   85e7c:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   85e7e:	d810      	bhi.n	85ea2 <pio_configure_pin_group+0x32>
   85e80:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   85e84:	d015      	beq.n	85eb2 <pio_configure_pin_group+0x42>
   85e86:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   85e8a:	d10f      	bne.n	85eac <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   85e8c:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   85e8e:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   85e90:	4308      	orrs	r0, r1
   85e92:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   85e94:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   85e98:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   85e9a:	d015      	beq.n	85ec8 <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   85e9c:	6659      	str	r1, [r3, #100]	; 0x64
}
   85e9e:	bc10      	pop	{r4}
   85ea0:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   85ea2:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   85ea6:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   85eaa:	d025      	beq.n	85ef8 <pio_configure_pin_group+0x88>
   85eac:	2000      	movs	r0, #0
}
   85eae:	bc10      	pop	{r4}
   85eb0:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   85eb2:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   85eb4:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85eb6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   85eb8:	4020      	ands	r0, r4
   85eba:	ea20 0001 	bic.w	r0, r0, r1
   85ebe:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   85ec0:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   85ec4:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   85ec6:	d1e9      	bne.n	85e9c <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   85ec8:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   85eca:	2001      	movs	r0, #1
}
   85ecc:	bc10      	pop	{r4}
   85ece:	4770      	bx	lr
	if (ul_pull_up_enable) {
   85ed0:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   85ed2:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   85ed4:	bf4c      	ite	mi
   85ed6:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85ed8:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   85eda:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   85ede:	bf14      	ite	ne
   85ee0:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   85ee2:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   85ee4:	0790      	lsls	r0, r2, #30
   85ee6:	d41e      	bmi.n	85f26 <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   85ee8:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   85eea:	bf48      	it	mi
   85eec:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   85ef0:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   85ef2:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   85ef4:	6019      	str	r1, [r3, #0]
}
   85ef6:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85ef8:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   85efc:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   85f00:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   85f02:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   85f04:	bf4c      	ite	mi
   85f06:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85f08:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   85f0a:	b954      	cbnz	r4, 85f22 <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   85f0c:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   85f0e:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   85f12:	bf0c      	ite	eq
   85f14:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   85f16:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   85f18:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   85f1a:	6019      	str	r1, [r3, #0]
	return 1;
   85f1c:	2001      	movs	r0, #1
}
   85f1e:	bc10      	pop	{r4}
   85f20:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   85f22:	6519      	str	r1, [r3, #80]	; 0x50
   85f24:	e7f3      	b.n	85f0e <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   85f26:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   85f2a:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   85f2c:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   85f2e:	6019      	str	r1, [r3, #0]
}
   85f30:	4770      	bx	lr
   85f32:	bf00      	nop

00085f34 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   85f34:	e7fe      	b.n	85f34 <Dummy_Handler>
   85f36:	bf00      	nop

00085f38 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   85f38:	4b02      	ldr	r3, [pc, #8]	; (85f44 <pmc_is_wakeup_clocks_restored+0xc>)
   85f3a:	7818      	ldrb	r0, [r3, #0]
}
   85f3c:	f080 0001 	eor.w	r0, r0, #1
   85f40:	4770      	bx	lr
   85f42:	bf00      	nop
   85f44:	2000202d 	.word	0x2000202d

00085f48 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   85f48:	4a0c      	ldr	r2, [pc, #48]	; (85f7c <_sbrk+0x34>)
{
   85f4a:	4603      	mov	r3, r0
	if (heap == NULL) {
   85f4c:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   85f4e:	490c      	ldr	r1, [pc, #48]	; (85f80 <_sbrk+0x38>)
	if (heap == NULL) {
   85f50:	b130      	cbz	r0, 85f60 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   85f52:	4403      	add	r3, r0
   85f54:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   85f56:	bfcc      	ite	gt
   85f58:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   85f5c:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   85f5e:	4770      	bx	lr
{
   85f60:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   85f62:	4c08      	ldr	r4, [pc, #32]	; (85f84 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   85f64:	4423      	add	r3, r4
   85f66:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   85f68:	6014      	str	r4, [r2, #0]
	heap += incr;
   85f6a:	bfd8      	it	le
   85f6c:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   85f6e:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   85f70:	bfc8      	it	gt
   85f72:	f04f 30ff 	movgt.w	r0, #4294967295
}
   85f76:	bc10      	pop	{r4}
   85f78:	4770      	bx	lr
   85f7a:	bf00      	nop
   85f7c:	20002030 	.word	0x20002030
   85f80:	20083ffc 	.word	0x20083ffc
   85f84:	200830d0 	.word	0x200830d0

00085f88 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85f88:	f04f 30ff 	mov.w	r0, #4294967295
   85f8c:	4770      	bx	lr
   85f8e:	bf00      	nop

00085f90 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   85f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   85f94:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   85f96:	604b      	str	r3, [r1, #4]
}
   85f98:	4770      	bx	lr
   85f9a:	bf00      	nop

00085f9c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85f9c:	2001      	movs	r0, #1
   85f9e:	4770      	bx	lr

00085fa0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85fa0:	2000      	movs	r0, #0
   85fa2:	4770      	bx	lr

00085fa4 <_exit>:

extern void _exit(int status)
{
   85fa4:	4601      	mov	r1, r0
   85fa6:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   85fa8:	4801      	ldr	r0, [pc, #4]	; (85fb0 <_exit+0xc>)
   85faa:	4b02      	ldr	r3, [pc, #8]	; (85fb4 <_exit+0x10>)
   85fac:	4798      	blx	r3

	for (;;);
   85fae:	e7fe      	b.n	85fae <_exit+0xa>
   85fb0:	0008d7d8 	.word	0x0008d7d8
   85fb4:	00086d3d 	.word	0x00086d3d

00085fb8 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   85fb8:	4770      	bx	lr
   85fba:	bf00      	nop

00085fbc <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   85fbc:	f04f 30ff 	mov.w	r0, #4294967295
   85fc0:	4770      	bx	lr
   85fc2:	bf00      	nop

00085fc4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   85fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   85fc8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85fcc:	4c19      	ldr	r4, [pc, #100]	; (86034 <iopins_normal+0x70>)
   85fce:	2006      	movs	r0, #6
   85fd0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   85fd2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85fd6:	2007      	movs	r0, #7
   85fd8:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   85fda:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85fde:	201d      	movs	r0, #29
   85fe0:	47a0      	blx	r4
	board_power(0);
   85fe2:	4b15      	ldr	r3, [pc, #84]	; (86038 <iopins_normal+0x74>)
   85fe4:	201d      	movs	r0, #29
   85fe6:	4798      	blx	r3
	FPGA_NPROG_SETUP();
	FPGA_NPROG_HIGH();
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   85fe8:	4f14      	ldr	r7, [pc, #80]	; (8603c <iopins_normal+0x78>)
	FPGA_NPROG_SETUP();
   85fea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85fee:	2008      	movs	r0, #8
   85ff0:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   85ff2:	4e13      	ldr	r6, [pc, #76]	; (86040 <iopins_normal+0x7c>)
   85ff4:	2008      	movs	r0, #8
   85ff6:	47b0      	blx	r6
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   85ff8:	4d12      	ldr	r5, [pc, #72]	; (86044 <iopins_normal+0x80>)
   85ffa:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   85ffe:	21ff      	movs	r1, #255	; 0xff
   86000:	4638      	mov	r0, r7
   86002:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   86004:	4b10      	ldr	r3, [pc, #64]	; (86048 <iopins_normal+0x84>)
   86006:	4638      	mov	r0, r7
   86008:	21ff      	movs	r1, #255	; 0xff
   8600a:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   8600c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86010:	2035      	movs	r0, #53	; 0x35
   86012:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   86014:	2035      	movs	r0, #53	; 0x35
   86016:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   86018:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8601c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   86020:	480a      	ldr	r0, [pc, #40]	; (8604c <iopins_normal+0x88>)
   86022:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   86024:	4623      	mov	r3, r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   86026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8602a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8602e:	201b      	movs	r0, #27
   86030:	4718      	bx	r3
   86032:	bf00      	nop
   86034:	00085d79 	.word	0x00085d79
   86038:	00085d39 	.word	0x00085d39
   8603c:	400e0e00 	.word	0x400e0e00
   86040:	00085d1d 	.word	0x00085d1d
   86044:	00085e71 	.word	0x00085e71
   86048:	00085ced 	.word	0x00085ced
   8604c:	400e0c00 	.word	0x400e0c00

00086050 <board_init>:

void board_init(void)
{
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   86050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
   86054:	b510      	push	{r4, lr}
	WDT->WDT_MR = WDT_MR_WDDIS;
   86056:	4b05      	ldr	r3, [pc, #20]	; (8606c <board_init+0x1c>)
	pmc_enable_periph_clk(ul_id);
   86058:	4c05      	ldr	r4, [pc, #20]	; (86070 <board_init+0x20>)
   8605a:	655a      	str	r2, [r3, #84]	; 0x54
   8605c:	200a      	movs	r0, #10
   8605e:	47a0      	blx	r4
   86060:	200b      	movs	r0, #11
   86062:	47a0      	blx	r4
	 */
	ioport_init();

	iopins_normal();

}
   86064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	iopins_normal();
   86068:	4b02      	ldr	r3, [pc, #8]	; (86074 <board_init+0x24>)
   8606a:	4718      	bx	r3
   8606c:	400e1200 	.word	0x400e1200
   86070:	00085b7d 	.word	0x00085b7d
   86074:	00085fc5 	.word	0x00085fc5

00086078 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   86078:	4b0c      	ldr	r3, [pc, #48]	; (860ac <cpu_irq_enter_critical+0x34>)
   8607a:	681a      	ldr	r2, [r3, #0]
   8607c:	b922      	cbnz	r2, 86088 <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8607e:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   86082:	b129      	cbz	r1, 86090 <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   86084:	490a      	ldr	r1, [pc, #40]	; (860b0 <cpu_irq_enter_critical+0x38>)
   86086:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   86088:	681a      	ldr	r2, [r3, #0]
   8608a:	3201      	adds	r2, #1
   8608c:	601a      	str	r2, [r3, #0]
   8608e:	4770      	bx	lr
{
   86090:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   86092:	b672      	cpsid	i
   86094:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   86098:	2001      	movs	r0, #1
			cpu_irq_disable();
   8609a:	4c06      	ldr	r4, [pc, #24]	; (860b4 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   8609c:	4a04      	ldr	r2, [pc, #16]	; (860b0 <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   8609e:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   860a0:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   860a2:	681a      	ldr	r2, [r3, #0]
   860a4:	3201      	adds	r2, #1
   860a6:	601a      	str	r2, [r3, #0]
}
   860a8:	bc10      	pop	{r4}
   860aa:	4770      	bx	lr
   860ac:	20002034 	.word	0x20002034
   860b0:	20002038 	.word	0x20002038
   860b4:	20000b40 	.word	0x20000b40

000860b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   860b8:	4b07      	ldr	r3, [pc, #28]	; (860d8 <cpu_irq_leave_critical+0x20>)
   860ba:	681a      	ldr	r2, [r3, #0]
   860bc:	3a01      	subs	r2, #1
   860be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   860c0:	681b      	ldr	r3, [r3, #0]
   860c2:	b943      	cbnz	r3, 860d6 <cpu_irq_leave_critical+0x1e>
   860c4:	4b05      	ldr	r3, [pc, #20]	; (860dc <cpu_irq_leave_critical+0x24>)
   860c6:	781b      	ldrb	r3, [r3, #0]
   860c8:	b12b      	cbz	r3, 860d6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   860ca:	2201      	movs	r2, #1
   860cc:	4b04      	ldr	r3, [pc, #16]	; (860e0 <cpu_irq_leave_critical+0x28>)
   860ce:	701a      	strb	r2, [r3, #0]
   860d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   860d4:	b662      	cpsie	i
	}
}
   860d6:	4770      	bx	lr
   860d8:	20002034 	.word	0x20002034
   860dc:	20002038 	.word	0x20002038
   860e0:	20000b40 	.word	0x20000b40

000860e4 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   860e4:	4a02      	ldr	r2, [pc, #8]	; (860f0 <udi_cdc_comm_disable+0xc>)
   860e6:	7813      	ldrb	r3, [r2, #0]
   860e8:	3b01      	subs	r3, #1
   860ea:	b2db      	uxtb	r3, r3
   860ec:	7013      	strb	r3, [r2, #0]
}
   860ee:	4770      	bx	lr
   860f0:	20002047 	.word	0x20002047

000860f4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   860f4:	2000      	movs	r0, #0
   860f6:	4770      	bx	lr

000860f8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   860f8:	2000      	movs	r0, #0
   860fa:	4770      	bx	lr

000860fc <udi_cdc_line_coding_received>:
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   860fc:	2000      	movs	r0, #0
   860fe:	4901      	ldr	r1, [pc, #4]	; (86104 <udi_cdc_line_coding_received+0x8>)
   86100:	4b01      	ldr	r3, [pc, #4]	; (86108 <udi_cdc_line_coding_received+0xc>)
   86102:	4718      	bx	r3
   86104:	20002040 	.word	0x20002040
   86108:	00083555 	.word	0x00083555

0008610c <udi_cdc_data_disable>:
{
   8610c:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8610e:	4a06      	ldr	r2, [pc, #24]	; (86128 <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
   86110:	4906      	ldr	r1, [pc, #24]	; (8612c <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
   86112:	7813      	ldrb	r3, [r2, #0]
   86114:	3b01      	subs	r3, #1
   86116:	b2db      	uxtb	r3, r3
   86118:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   8611a:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   8611c:	4788      	blx	r1
	udi_cdc_data_running = false;
   8611e:	2200      	movs	r2, #0
   86120:	4b03      	ldr	r3, [pc, #12]	; (86130 <udi_cdc_data_disable+0x24>)
   86122:	701a      	strb	r2, [r3, #0]
}
   86124:	bd08      	pop	{r3, pc}
   86126:	bf00      	nop
   86128:	20002048 	.word	0x20002048
   8612c:	00083499 	.word	0x00083499
   86130:	2000203c 	.word	0x2000203c

00086134 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   86134:	4a16      	ldr	r2, [pc, #88]	; (86190 <udi_cdc_comm_setup+0x5c>)
   86136:	f992 1000 	ldrsb.w	r1, [r2]
   8613a:	7813      	ldrb	r3, [r2, #0]
   8613c:	2900      	cmp	r1, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8613e:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   86142:	db03      	blt.n	8614c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86144:	2b20      	cmp	r3, #32
   86146:	d00e      	beq.n	86166 <udi_cdc_comm_setup+0x32>
	return false;  // request Not supported
   86148:	2000      	movs	r0, #0
}
   8614a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8614c:	2b20      	cmp	r3, #32
   8614e:	d1fb      	bne.n	86148 <udi_cdc_comm_setup+0x14>
			switch (udd_g_ctrlreq.req.bRequest) {
   86150:	7853      	ldrb	r3, [r2, #1]
   86152:	2b21      	cmp	r3, #33	; 0x21
   86154:	d1f8      	bne.n	86148 <udi_cdc_comm_setup+0x14>
				if (sizeof(usb_cdc_line_coding_t) !=
   86156:	88d3      	ldrh	r3, [r2, #6]
   86158:	2b07      	cmp	r3, #7
   8615a:	d1f5      	bne.n	86148 <udi_cdc_comm_setup+0x14>
				udd_g_ctrlreq.payload =
   8615c:	490d      	ldr	r1, [pc, #52]	; (86194 <udi_cdc_comm_setup+0x60>)
				return true;
   8615e:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload =
   86160:	6091      	str	r1, [r2, #8]
				udd_g_ctrlreq.payload_size =
   86162:	8193      	strh	r3, [r2, #12]
				return true;
   86164:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   86166:	7850      	ldrb	r0, [r2, #1]
   86168:	2820      	cmp	r0, #32
   8616a:	d005      	beq.n	86178 <udi_cdc_comm_setup+0x44>
   8616c:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
   86170:	fab0 f080 	clz	r0, r0
   86174:	0940      	lsrs	r0, r0, #5
   86176:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
   86178:	88d3      	ldrh	r3, [r2, #6]
   8617a:	2b07      	cmp	r3, #7
   8617c:	d1e4      	bne.n	86148 <udi_cdc_comm_setup+0x14>
{
   8617e:	b410      	push	{r4}
				udd_g_ctrlreq.payload =
   86180:	4904      	ldr	r1, [pc, #16]	; (86194 <udi_cdc_comm_setup+0x60>)
				udd_g_ctrlreq.callback =
   86182:	4c05      	ldr	r4, [pc, #20]	; (86198 <udi_cdc_comm_setup+0x64>)
				udd_g_ctrlreq.payload =
   86184:	6091      	str	r1, [r2, #8]
				udd_g_ctrlreq.callback =
   86186:	6114      	str	r4, [r2, #16]
				udd_g_ctrlreq.payload_size =
   86188:	8193      	strh	r3, [r2, #12]
				return true;
   8618a:	2001      	movs	r0, #1
}
   8618c:	bc10      	pop	{r4}
   8618e:	4770      	bx	lr
   86190:	2000200c 	.word	0x2000200c
   86194:	20002040 	.word	0x20002040
   86198:	000860fd 	.word	0x000860fd

0008619c <udi_cdc_comm_enable>:
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8619c:	2208      	movs	r2, #8
{
   8619e:	b570      	push	{r4, r5, r6, lr}
	udi_cdc_nb_comm_enabled = 0;
   861a0:	2400      	movs	r4, #0
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   861a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
	uid_cdc_state_msg[port].header.bmRequestType =
   861a6:	f242 06a1 	movw	r6, #8353	; 0x20a1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   861aa:	490c      	ldr	r1, [pc, #48]	; (861dc <udi_cdc_comm_enable+0x40>)
	udi_cdc_nb_comm_enabled = 0;
   861ac:	4d0c      	ldr	r5, [pc, #48]	; (861e0 <udi_cdc_comm_enable+0x44>)
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   861ae:	718a      	strb	r2, [r1, #6]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   861b0:	4a0c      	ldr	r2, [pc, #48]	; (861e4 <udi_cdc_comm_enable+0x48>)
	uid_cdc_state_msg[port].header.bmRequestType =
   861b2:	4b0d      	ldr	r3, [pc, #52]	; (861e8 <udi_cdc_comm_enable+0x4c>)
	udi_cdc_nb_comm_enabled = 0;
   861b4:	702c      	strb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   861b6:	8014      	strh	r4, [r2, #0]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   861b8:	4a0c      	ldr	r2, [pc, #48]	; (861ec <udi_cdc_comm_enable+0x50>)
	uid_cdc_state_msg[port].header.bmRequestType =
   861ba:	601e      	str	r6, [r3, #0]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   861bc:	6008      	str	r0, [r1, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   861be:	811c      	strh	r4, [r3, #8]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   861c0:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   861c2:	605a      	str	r2, [r3, #4]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   861c4:	808c      	strh	r4, [r1, #4]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   861c6:	4b0a      	ldr	r3, [pc, #40]	; (861f0 <udi_cdc_comm_enable+0x54>)
   861c8:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   861ca:	4620      	mov	r0, r4
   861cc:	4b09      	ldr	r3, [pc, #36]	; (861f4 <udi_cdc_comm_enable+0x58>)
   861ce:	4798      	blx	r3
   861d0:	b118      	cbz	r0, 861da <udi_cdc_comm_enable+0x3e>
	udi_cdc_nb_comm_enabled++;
   861d2:	782b      	ldrb	r3, [r5, #0]
   861d4:	3301      	adds	r3, #1
   861d6:	b2db      	uxtb	r3, r3
   861d8:	702b      	strb	r3, [r5, #0]
}
   861da:	bd70      	pop	{r4, r5, r6, pc}
   861dc:	20002040 	.word	0x20002040
   861e0:	20002047 	.word	0x20002047
   861e4:	2000245c 	.word	0x2000245c
   861e8:	20002874 	.word	0x20002874
   861ec:	00020001 	.word	0x00020001
   861f0:	00083555 	.word	0x00083555
   861f4:	00083471 	.word	0x00083471

000861f8 <udi_cdc_tx_send.part.0>:
	}
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
   861f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861fc:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   861fe:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i");
   86202:	b672      	cpsid	i
   86204:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86208:	2300      	movs	r3, #0
   8620a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 862e4 <udi_cdc_tx_send.part.0+0xec>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8620e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 862e8 <udi_cdc_tx_send.part.0+0xf0>
   86212:	f888 3000 	strb.w	r3, [r8]
   86216:	f899 4000 	ldrb.w	r4, [r9]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8621a:	4f34      	ldr	r7, [pc, #208]	; (862ec <udi_cdc_tx_send.part.0+0xf4>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8621c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8621e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   86222:	4626      	mov	r6, r4
		sof_zlp_counter++;
   86224:	4d32      	ldr	r5, [pc, #200]	; (862f0 <udi_cdc_tx_send.part.0+0xf8>)
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   86226:	2b00      	cmp	r3, #0
   86228:	d03a      	beq.n	862a0 <udi_cdc_tx_send.part.0+0xa8>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8622a:	2300      	movs	r3, #0
   8622c:	802b      	strh	r3, [r5, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8622e:	4b31      	ldr	r3, [pc, #196]	; (862f4 <udi_cdc_tx_send.part.0+0xfc>)
   86230:	781b      	ldrb	r3, [r3, #0]
   86232:	b35b      	cbz	r3, 8628c <udi_cdc_tx_send.part.0+0x94>
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   86234:	fab4 f684 	clz	r6, r4
   86238:	0976      	lsrs	r6, r6, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   8623a:	2301      	movs	r3, #1
   8623c:	4a2e      	ldr	r2, [pc, #184]	; (862f8 <udi_cdc_tx_send.part.0+0x100>)
   8623e:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   86240:	f1ba 0f00 	cmp.w	sl, #0
   86244:	d104      	bne.n	86250 <udi_cdc_tx_send.part.0+0x58>
		cpu_irq_enable();
   86246:	f888 3000 	strb.w	r3, [r8]
   8624a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8624e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   86250:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
   86254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86258:	bf14      	ite	ne
   8625a:	2401      	movne	r4, #1
   8625c:	2400      	moveq	r4, #0
	if (b_short_packet) {
   8625e:	d01b      	beq.n	86298 <udi_cdc_tx_send.part.0+0xa0>
		if (udd_is_high_speed()) {
   86260:	4b26      	ldr	r3, [pc, #152]	; (862fc <udi_cdc_tx_send.part.0+0x104>)
   86262:	4798      	blx	r3
   86264:	2800      	cmp	r0, #0
   86266:	d036      	beq.n	862d6 <udi_cdc_tx_send.part.0+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   86268:	4b25      	ldr	r3, [pc, #148]	; (86300 <udi_cdc_tx_send.part.0+0x108>)
   8626a:	4798      	blx	r3
   8626c:	4a25      	ldr	r2, [pc, #148]	; (86304 <udi_cdc_tx_send.part.0+0x10c>)
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8626e:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   86272:	8010      	strh	r0, [r2, #0]
	udd_ep_run( ep,
   86274:	4824      	ldr	r0, [pc, #144]	; (86308 <udi_cdc_tx_send.part.0+0x110>)
			udi_cdc_tx_buf[port][buf_sel_trans],
   86276:	4a25      	ldr	r2, [pc, #148]	; (8630c <udi_cdc_tx_send.part.0+0x114>)
	udd_ep_run( ep,
   86278:	4621      	mov	r1, r4
   8627a:	9000      	str	r0, [sp, #0]
   8627c:	4c24      	ldr	r4, [pc, #144]	; (86310 <udi_cdc_tx_send.part.0+0x118>)
   8627e:	2085      	movs	r0, #133	; 0x85
   86280:	eb02 2246 	add.w	r2, r2, r6, lsl #9
   86284:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   86286:	b003      	add	sp, #12
   86288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8628c:	fab4 f484 	clz	r4, r4
   86290:	0964      	lsrs	r4, r4, #5
   86292:	f889 4000 	strb.w	r4, [r9]
   86296:	e7d0      	b.n	8623a <udi_cdc_tx_send.part.0+0x42>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   86298:	2100      	movs	r1, #0
   8629a:	4a1a      	ldr	r2, [pc, #104]	; (86304 <udi_cdc_tx_send.part.0+0x10c>)
   8629c:	8011      	strh	r1, [r2, #0]
   8629e:	e7e9      	b.n	86274 <udi_cdc_tx_send.part.0+0x7c>
		sof_zlp_counter++;
   862a0:	882b      	ldrh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   862a2:	f8df b058 	ldr.w	fp, [pc, #88]	; 862fc <udi_cdc_tx_send.part.0+0x104>
		sof_zlp_counter++;
   862a6:	3301      	adds	r3, #1
   862a8:	802b      	strh	r3, [r5, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   862aa:	47d8      	blx	fp
   862ac:	b910      	cbnz	r0, 862b4 <udi_cdc_tx_send.part.0+0xbc>
   862ae:	882b      	ldrh	r3, [r5, #0]
   862b0:	2b63      	cmp	r3, #99	; 0x63
   862b2:	d906      	bls.n	862c2 <udi_cdc_tx_send.part.0+0xca>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   862b4:	47d8      	blx	fp
   862b6:	2800      	cmp	r0, #0
   862b8:	d0b7      	beq.n	8622a <udi_cdc_tx_send.part.0+0x32>
   862ba:	882b      	ldrh	r3, [r5, #0]
   862bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   862c0:	d2b3      	bcs.n	8622a <udi_cdc_tx_send.part.0+0x32>
	if (cpu_irq_is_enabled_flags(flags))
   862c2:	f1ba 0f00 	cmp.w	sl, #0
   862c6:	d1de      	bne.n	86286 <udi_cdc_tx_send.part.0+0x8e>
		cpu_irq_enable();
   862c8:	2301      	movs	r3, #1
   862ca:	f888 3000 	strb.w	r3, [r8]
   862ce:	f3bf 8f5f 	dmb	sy
   862d2:	b662      	cpsie	i
}
   862d4:	e7d7      	b.n	86286 <udi_cdc_tx_send.part.0+0x8e>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   862d6:	4b0f      	ldr	r3, [pc, #60]	; (86314 <udi_cdc_tx_send.part.0+0x11c>)
   862d8:	4798      	blx	r3
   862da:	4a0a      	ldr	r2, [pc, #40]	; (86304 <udi_cdc_tx_send.part.0+0x10c>)
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   862dc:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   862e0:	8010      	strh	r0, [r2, #0]
   862e2:	e7c7      	b.n	86274 <udi_cdc_tx_send.part.0+0x7c>
   862e4:	20000b40 	.word	0x20000b40
   862e8:	20002868 	.word	0x20002868
   862ec:	20002864 	.word	0x20002864
   862f0:	2000203a 	.word	0x2000203a
   862f4:	20002460 	.word	0x20002460
   862f8:	20002870 	.word	0x20002870
   862fc:	00085085 	.word	0x00085085
   86300:	000850dd 	.word	0x000850dd
   86304:	2000286c 	.word	0x2000286c
   86308:	00086361 	.word	0x00086361
   8630c:	20002464 	.word	0x20002464
   86310:	000852f1 	.word	0x000852f1
   86314:	000850cd 	.word	0x000850cd

00086318 <udi_cdc_tx_send.constprop.0>:
	if (udi_cdc_tx_trans_ongoing[port]) {
   86318:	4b0b      	ldr	r3, [pc, #44]	; (86348 <udi_cdc_tx_send.constprop.0+0x30>)
   8631a:	781b      	ldrb	r3, [r3, #0]
   8631c:	b103      	cbz	r3, 86320 <udi_cdc_tx_send.constprop.0+0x8>
   8631e:	4770      	bx	lr
static void udi_cdc_tx_send(uint8_t port)
   86320:	b510      	push	{r4, lr}
	if (udd_is_high_speed()) {
   86322:	4b0a      	ldr	r3, [pc, #40]	; (8634c <udi_cdc_tx_send.constprop.0+0x34>)
   86324:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   86326:	4a0a      	ldr	r2, [pc, #40]	; (86350 <udi_cdc_tx_send.constprop.0+0x38>)
	if (udd_is_high_speed()) {
   86328:	b140      	cbz	r0, 8633c <udi_cdc_tx_send.constprop.0+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8632a:	4b0a      	ldr	r3, [pc, #40]	; (86354 <udi_cdc_tx_send.constprop.0+0x3c>)
   8632c:	8814      	ldrh	r4, [r2, #0]
   8632e:	4798      	blx	r3
   86330:	4284      	cmp	r4, r0
   86332:	d008      	beq.n	86346 <udi_cdc_tx_send.constprop.0+0x2e>
}
   86334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   86338:	4b07      	ldr	r3, [pc, #28]	; (86358 <udi_cdc_tx_send.constprop.0+0x40>)
   8633a:	4718      	bx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8633c:	4b07      	ldr	r3, [pc, #28]	; (8635c <udi_cdc_tx_send.constprop.0+0x44>)
   8633e:	8814      	ldrh	r4, [r2, #0]
   86340:	4798      	blx	r3
   86342:	4284      	cmp	r4, r0
   86344:	d1f6      	bne.n	86334 <udi_cdc_tx_send.constprop.0+0x1c>
}
   86346:	bd10      	pop	{r4, pc}
   86348:	20002870 	.word	0x20002870
   8634c:	00085085 	.word	0x00085085
   86350:	2000286c 	.word	0x2000286c
   86354:	000850dd 	.word	0x000850dd
   86358:	000861f9 	.word	0x000861f9
   8635c:	000850cd 	.word	0x000850cd

00086360 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   86360:	b100      	cbz	r0, 86364 <udi_cdc_data_sent+0x4>
   86362:	4770      	bx	lr
{
   86364:	b410      	push	{r4}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   86366:	4b07      	ldr	r3, [pc, #28]	; (86384 <udi_cdc_data_sent+0x24>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   86368:	4c07      	ldr	r4, [pc, #28]	; (86388 <udi_cdc_data_sent+0x28>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8636a:	781b      	ldrb	r3, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8636c:	4a07      	ldr	r2, [pc, #28]	; (8638c <udi_cdc_data_sent+0x2c>)
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8636e:	fab3 f383 	clz	r3, r3
   86372:	4907      	ldr	r1, [pc, #28]	; (86390 <udi_cdc_data_sent+0x30>)
   86374:	095b      	lsrs	r3, r3, #5
	udi_cdc_tx_both_buf_to_send[port] = false;
   86376:	7020      	strb	r0, [r4, #0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   86378:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
   8637c:	7010      	strb	r0, [r2, #0]
}
   8637e:	bc10      	pop	{r4}
	udi_cdc_tx_send(port);
   86380:	4a04      	ldr	r2, [pc, #16]	; (86394 <udi_cdc_data_sent+0x34>)
   86382:	4710      	bx	r2
   86384:	20002868 	.word	0x20002868
   86388:	20002460 	.word	0x20002460
   8638c:	20002870 	.word	0x20002870
   86390:	20002864 	.word	0x20002864
   86394:	00086319 	.word	0x00086319

00086398 <udi_cdc_data_sof_notify>:
	if (udi_cdc_tx_trans_ongoing[port]) {
   86398:	4b0b      	ldr	r3, [pc, #44]	; (863c8 <udi_cdc_data_sof_notify+0x30>)
   8639a:	781b      	ldrb	r3, [r3, #0]
   8639c:	b103      	cbz	r3, 863a0 <udi_cdc_data_sof_notify+0x8>
   8639e:	4770      	bx	lr
{
   863a0:	b510      	push	{r4, lr}
	if (udd_is_high_speed()) {
   863a2:	4b0a      	ldr	r3, [pc, #40]	; (863cc <udi_cdc_data_sof_notify+0x34>)
   863a4:	4798      	blx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   863a6:	4a0a      	ldr	r2, [pc, #40]	; (863d0 <udi_cdc_data_sof_notify+0x38>)
	if (udd_is_high_speed()) {
   863a8:	b140      	cbz	r0, 863bc <udi_cdc_data_sof_notify+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   863aa:	4b0a      	ldr	r3, [pc, #40]	; (863d4 <udi_cdc_data_sof_notify+0x3c>)
   863ac:	8814      	ldrh	r4, [r2, #0]
   863ae:	4798      	blx	r3
   863b0:	4284      	cmp	r4, r0
   863b2:	d008      	beq.n	863c6 <udi_cdc_data_sof_notify+0x2e>
}
   863b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   863b8:	4b07      	ldr	r3, [pc, #28]	; (863d8 <udi_cdc_data_sof_notify+0x40>)
   863ba:	4718      	bx	r3
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   863bc:	4b07      	ldr	r3, [pc, #28]	; (863dc <udi_cdc_data_sof_notify+0x44>)
   863be:	8814      	ldrh	r4, [r2, #0]
   863c0:	4798      	blx	r3
   863c2:	4284      	cmp	r4, r0
   863c4:	d1f6      	bne.n	863b4 <udi_cdc_data_sof_notify+0x1c>
}
   863c6:	bd10      	pop	{r4, pc}
   863c8:	20002870 	.word	0x20002870
   863cc:	00085085 	.word	0x00085085
   863d0:	2000286c 	.word	0x2000286c
   863d4:	000850dd 	.word	0x000850dd
   863d8:	000861f9 	.word	0x000861f9
   863dc:	000850cd 	.word	0x000850cd

000863e0 <udi_cdc_rx_start.constprop.0>:
static bool udi_cdc_rx_start(uint8_t port)
   863e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   863e2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   863e4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   863e8:	b672      	cpsid	i
   863ea:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   863ee:	2200      	movs	r2, #0
   863f0:	4b2b      	ldr	r3, [pc, #172]	; (864a0 <udi_cdc_rx_start.constprop.0+0xc0>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   863f2:	492c      	ldr	r1, [pc, #176]	; (864a4 <udi_cdc_rx_start.constprop.0+0xc4>)
	if (udi_cdc_rx_trans_ongoing[port] ||
   863f4:	4d2c      	ldr	r5, [pc, #176]	; (864a8 <udi_cdc_rx_start.constprop.0+0xc8>)
   863f6:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   863f8:	780c      	ldrb	r4, [r1, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   863fa:	782a      	ldrb	r2, [r5, #0]
   863fc:	2a00      	cmp	r2, #0
   863fe:	d140      	bne.n	86482 <udi_cdc_rx_start.constprop.0+0xa2>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   86400:	4e2a      	ldr	r6, [pc, #168]	; (864ac <udi_cdc_rx_start.constprop.0+0xcc>)
   86402:	4f2b      	ldr	r7, [pc, #172]	; (864b0 <udi_cdc_rx_start.constprop.0+0xd0>)
   86404:	b2e4      	uxtb	r4, r4
   86406:	f8b6 c000 	ldrh.w	ip, [r6]
   8640a:	f002 0eff 	and.w	lr, r2, #255	; 0xff
   8640e:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
   86412:	fa1f fc8c 	uxth.w	ip, ip
   86416:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   86418:	4594      	cmp	ip, r2
   8641a:	d332      	bcc.n	86482 <udi_cdc_rx_start.constprop.0+0xa2>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8641c:	fab4 f284 	clz	r2, r4
	udi_cdc_rx_trans_ongoing[port] = true;
   86420:	f04f 0c01 	mov.w	ip, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   86424:	0952      	lsrs	r2, r2, #5
	udi_cdc_rx_pos[port] = 0;
   86426:	f8a6 e000 	strh.w	lr, [r6]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8642a:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   8642c:	f885 c000 	strb.w	ip, [r5]
	if (cpu_irq_is_enabled_flags(flags))
   86430:	b920      	cbnz	r0, 8643c <udi_cdc_rx_start.constprop.0+0x5c>
		cpu_irq_enable();
   86432:	f883 c000 	strb.w	ip, [r3]
   86436:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8643a:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8643c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   86440:	b672      	cpsid	i
   86442:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86446:	2200      	movs	r2, #0
   86448:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8644a:	8832      	ldrh	r2, [r6, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8644c:	7808      	ldrb	r0, [r1, #0]
	pos = udi_cdc_rx_pos[port];
   8644e:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   86450:	b2c2      	uxtb	r2, r0
   86452:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
   86456:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   86458:	b925      	cbnz	r5, 86464 <udi_cdc_rx_start.constprop.0+0x84>
		cpu_irq_enable();
   8645a:	2001      	movs	r0, #1
   8645c:	7018      	strb	r0, [r3, #0]
   8645e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86462:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   86464:	4291      	cmp	r1, r2
   86466:	d117      	bne.n	86498 <udi_cdc_rx_start.constprop.0+0xb8>
	return udd_ep_run(ep,
   86468:	4812      	ldr	r0, [pc, #72]	; (864b4 <udi_cdc_rx_start.constprop.0+0xd4>)
			udi_cdc_rx_buf[port][buf_sel_trans],
   8646a:	4a13      	ldr	r2, [pc, #76]	; (864b8 <udi_cdc_rx_start.constprop.0+0xd8>)
	return udd_ep_run(ep,
   8646c:	9000      	str	r0, [sp, #0]
   8646e:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   86472:	f44f 7300 	mov.w	r3, #512	; 0x200
   86476:	2101      	movs	r1, #1
   86478:	4c10      	ldr	r4, [pc, #64]	; (864bc <udi_cdc_rx_start.constprop.0+0xdc>)
   8647a:	2006      	movs	r0, #6
   8647c:	47a0      	blx	r4
}
   8647e:	b003      	add	sp, #12
   86480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cpu_irq_is_enabled_flags(flags))
   86482:	b930      	cbnz	r0, 86492 <udi_cdc_rx_start.constprop.0+0xb2>
		cpu_irq_enable();
   86484:	2201      	movs	r2, #1
   86486:	701a      	strb	r2, [r3, #0]
   86488:	f3bf 8f5f 	dmb	sy
   8648c:	b662      	cpsie	i
   8648e:	b003      	add	sp, #12
   86490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   86492:	2000      	movs	r0, #0
}
   86494:	b003      	add	sp, #12
   86496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UDI_CDC_RX_NOTIFY(port);
   86498:	2000      	movs	r0, #0
   8649a:	4b09      	ldr	r3, [pc, #36]	; (864c0 <udi_cdc_rx_start.constprop.0+0xe0>)
   8649c:	4798      	blx	r3
   8649e:	e7e3      	b.n	86468 <udi_cdc_rx_start.constprop.0+0x88>
   864a0:	20000b40 	.word	0x20000b40
   864a4:	20002450 	.word	0x20002450
   864a8:	20002458 	.word	0x20002458
   864ac:	20002454 	.word	0x20002454
   864b0:	2000244c 	.word	0x2000244c
   864b4:	00086549 	.word	0x00086549
   864b8:	2000204c 	.word	0x2000204c
   864bc:	000852f1 	.word	0x000852f1
   864c0:	000834c9 	.word	0x000834c9

000864c4 <udi_cdc_data_enable>:
{
   864c4:	b538      	push	{r3, r4, r5, lr}
	udi_cdc_nb_data_enabled = 0;
   864c6:	2400      	movs	r4, #0
	udi_cdc_tx_trans_ongoing[port] = false;
   864c8:	4a12      	ldr	r2, [pc, #72]	; (86514 <udi_cdc_data_enable+0x50>)
	udi_cdc_nb_data_enabled = 0;
   864ca:	4d13      	ldr	r5, [pc, #76]	; (86518 <udi_cdc_data_enable+0x54>)
	udi_cdc_tx_buf_sel[port] = 0;
   864cc:	4913      	ldr	r1, [pc, #76]	; (8651c <udi_cdc_data_enable+0x58>)
	udi_cdc_nb_data_enabled = 0;
   864ce:	702c      	strb	r4, [r5, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   864d0:	4b13      	ldr	r3, [pc, #76]	; (86520 <udi_cdc_data_enable+0x5c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   864d2:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   864d4:	4813      	ldr	r0, [pc, #76]	; (86524 <udi_cdc_data_enable+0x60>)
	udi_cdc_tx_sof_num[port] = 0;
   864d6:	4a14      	ldr	r2, [pc, #80]	; (86528 <udi_cdc_data_enable+0x64>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   864d8:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
   864da:	8014      	strh	r4, [r2, #0]
	udi_cdc_tx_send(port);
   864dc:	4b13      	ldr	r3, [pc, #76]	; (8652c <udi_cdc_data_enable+0x68>)
	udi_cdc_tx_buf_sel[port] = 0;
   864de:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   864e0:	6004      	str	r4, [r0, #0]
	udi_cdc_tx_send(port);
   864e2:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   864e4:	4912      	ldr	r1, [pc, #72]	; (86530 <udi_cdc_data_enable+0x6c>)
	udi_cdc_rx_buf_nb[port][0] = 0;
   864e6:	4b13      	ldr	r3, [pc, #76]	; (86534 <udi_cdc_data_enable+0x70>)
	udi_cdc_rx_trans_ongoing[port] = false;
   864e8:	700c      	strb	r4, [r1, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   864ea:	4a13      	ldr	r2, [pc, #76]	; (86538 <udi_cdc_data_enable+0x74>)
	udi_cdc_rx_pos[port] = 0;
   864ec:	4913      	ldr	r1, [pc, #76]	; (8653c <udi_cdc_data_enable+0x78>)
	udi_cdc_rx_buf_sel[port] = 0;
   864ee:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   864f0:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   864f2:	4a13      	ldr	r2, [pc, #76]	; (86540 <udi_cdc_data_enable+0x7c>)
	udi_cdc_rx_buf_nb[port][1] = 0;
   864f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   864f6:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
   864f8:	4790      	blx	r2
   864fa:	b148      	cbz	r0, 86510 <udi_cdc_data_enable+0x4c>
	udi_cdc_nb_data_enabled++;
   864fc:	782b      	ldrb	r3, [r5, #0]
   864fe:	3301      	adds	r3, #1
   86500:	b2db      	uxtb	r3, r3
   86502:	702b      	strb	r3, [r5, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   86504:	782b      	ldrb	r3, [r5, #0]
   86506:	2b01      	cmp	r3, #1
   86508:	b2da      	uxtb	r2, r3
		udi_cdc_data_running = true;
   8650a:	bf04      	itt	eq
   8650c:	4b0d      	ldreq	r3, [pc, #52]	; (86544 <udi_cdc_data_enable+0x80>)
   8650e:	701a      	strbeq	r2, [r3, #0]
}
   86510:	bd38      	pop	{r3, r4, r5, pc}
   86512:	bf00      	nop
   86514:	20002870 	.word	0x20002870
   86518:	20002048 	.word	0x20002048
   8651c:	20002868 	.word	0x20002868
   86520:	20002460 	.word	0x20002460
   86524:	20002864 	.word	0x20002864
   86528:	2000286c 	.word	0x2000286c
   8652c:	00086319 	.word	0x00086319
   86530:	20002458 	.word	0x20002458
   86534:	2000244c 	.word	0x2000244c
   86538:	20002450 	.word	0x20002450
   8653c:	20002454 	.word	0x20002454
   86540:	000863e1 	.word	0x000863e1
   86544:	2000203c 	.word	0x2000203c

00086548 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   86548:	b9f8      	cbnz	r0, 8658a <udi_cdc_data_received+0x42>
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8654a:	4603      	mov	r3, r0
   8654c:	480f      	ldr	r0, [pc, #60]	; (8658c <udi_cdc_data_received+0x44>)
   8654e:	f890 c000 	ldrb.w	ip, [r0]
   86552:	fabc fc8c 	clz	ip, ip
   86556:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	if (!n) {
   8655a:	b139      	cbz	r1, 8656c <udi_cdc_data_received+0x24>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   8655c:	4a0c      	ldr	r2, [pc, #48]	; (86590 <udi_cdc_data_received+0x48>)
	udi_cdc_rx_trans_ongoing[port] = false;
   8655e:	480d      	ldr	r0, [pc, #52]	; (86594 <udi_cdc_data_received+0x4c>)
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   86560:	b289      	uxth	r1, r1
   86562:	f822 101c 	strh.w	r1, [r2, ip, lsl #1]
	udi_cdc_rx_start(port);
   86566:	4a0c      	ldr	r2, [pc, #48]	; (86598 <udi_cdc_data_received+0x50>)
	udi_cdc_rx_trans_ongoing[port] = false;
   86568:	7003      	strb	r3, [r0, #0]
	udi_cdc_rx_start(port);
   8656a:	4710      	bx	r2
{
   8656c:	b510      	push	{r4, lr}
				udi_cdc_rx_buf[port][buf_sel_trans],
   8656e:	490b      	ldr	r1, [pc, #44]	; (8659c <udi_cdc_data_received+0x54>)
		udd_ep_run( ep,
   86570:	4c0b      	ldr	r4, [pc, #44]	; (865a0 <udi_cdc_data_received+0x58>)
{
   86572:	b082      	sub	sp, #8
		udd_ep_run( ep,
   86574:	9400      	str	r4, [sp, #0]
   86576:	f44f 7300 	mov.w	r3, #512	; 0x200
   8657a:	4610      	mov	r0, r2
   8657c:	4c09      	ldr	r4, [pc, #36]	; (865a4 <udi_cdc_data_received+0x5c>)
   8657e:	eb01 224c 	add.w	r2, r1, ip, lsl #9
   86582:	2101      	movs	r1, #1
   86584:	47a0      	blx	r4
}
   86586:	b002      	add	sp, #8
   86588:	bd10      	pop	{r4, pc}
   8658a:	4770      	bx	lr
   8658c:	20002450 	.word	0x20002450
   86590:	2000244c 	.word	0x2000244c
   86594:	20002458 	.word	0x20002458
   86598:	000863e1 	.word	0x000863e1
   8659c:	2000204c 	.word	0x2000204c
   865a0:	00086549 	.word	0x00086549
   865a4:	000852f1 	.word	0x000852f1

000865a8 <udi_cdc_multi_get_nb_received_data>:
{
   865a8:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   865aa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   865ae:	b672      	cpsid	i
   865b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   865b4:	2000      	movs	r0, #0
   865b6:	490a      	ldr	r1, [pc, #40]	; (865e0 <udi_cdc_multi_get_nb_received_data+0x38>)
	pos = udi_cdc_rx_pos[port];
   865b8:	4a0a      	ldr	r2, [pc, #40]	; (865e4 <udi_cdc_multi_get_nb_received_data+0x3c>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   865ba:	4b0b      	ldr	r3, [pc, #44]	; (865e8 <udi_cdc_multi_get_nb_received_data+0x40>)
   865bc:	7008      	strb	r0, [r1, #0]
	pos = udi_cdc_rx_pos[port];
   865be:	8810      	ldrh	r0, [r2, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   865c0:	781a      	ldrb	r2, [r3, #0]
   865c2:	4d0a      	ldr	r5, [pc, #40]	; (865ec <udi_cdc_multi_get_nb_received_data+0x44>)
   865c4:	b2d2      	uxtb	r2, r2
	pos = udi_cdc_rx_pos[port];
   865c6:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   865c8:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
   865cc:	b280      	uxth	r0, r0
   865ce:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   865d0:	b924      	cbnz	r4, 865dc <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   865d2:	2301      	movs	r3, #1
   865d4:	700b      	strb	r3, [r1, #0]
   865d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   865da:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   865dc:	bc30      	pop	{r4, r5}
   865de:	4770      	bx	lr
   865e0:	20000b40 	.word	0x20000b40
   865e4:	20002454 	.word	0x20002454
   865e8:	20002450 	.word	0x20002450
   865ec:	2000244c 	.word	0x2000244c

000865f0 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   865f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   865f4:	4688      	mov	r8, r1
   865f6:	4616      	mov	r6, r2
   865f8:	4d21      	ldr	r5, [pc, #132]	; (86680 <udi_cdc_multi_read_buf+0x90>)
   865fa:	4c22      	ldr	r4, [pc, #136]	; (86684 <udi_cdc_multi_read_buf+0x94>)
   865fc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 86688 <udi_cdc_multi_read_buf+0x98>
   86600:	4f22      	ldr	r7, [pc, #136]	; (8668c <udi_cdc_multi_read_buf+0x9c>)
	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86602:	f8df b08c 	ldr.w	fp, [pc, #140]	; 86690 <udi_cdc_multi_read_buf+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86606:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8660a:	b672      	cpsid	i
   8660c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86610:	2300      	movs	r3, #0
   86612:	702b      	strb	r3, [r5, #0]
	pos = udi_cdc_rx_pos[port];
   86614:	8822      	ldrh	r2, [r4, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
   86616:	f899 1000 	ldrb.w	r1, [r9]
	pos = udi_cdc_rx_pos[port];
   8661a:	b292      	uxth	r2, r2
	buf_sel = udi_cdc_rx_buf_sel[port];
   8661c:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   8661e:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
   86622:	b29b      	uxth	r3, r3
	if (cpu_irq_is_enabled_flags(flags))
   86624:	b920      	cbnz	r0, 86630 <udi_cdc_multi_read_buf+0x40>
		cpu_irq_enable();
   86626:	2001      	movs	r0, #1
   86628:	7028      	strb	r0, [r5, #0]
   8662a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8662e:	b662      	cpsie	i
	while (again) {
   86630:	4293      	cmp	r3, r2
		if (!udi_cdc_data_running) {
   86632:	4818      	ldr	r0, [pc, #96]	; (86694 <udi_cdc_multi_read_buf+0xa4>)
	while (again) {
   86634:	d805      	bhi.n	86642 <udi_cdc_multi_read_buf+0x52>
		if (!udi_cdc_data_running) {
   86636:	7803      	ldrb	r3, [r0, #0]
   86638:	2b00      	cmp	r3, #0
   8663a:	d1e4      	bne.n	86606 <udi_cdc_multi_read_buf+0x16>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   8663c:	4630      	mov	r0, r6
   8663e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   86642:	f837 a011 	ldrh.w	sl, [r7, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86646:	eb02 2141 	add.w	r1, r2, r1, lsl #9
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   8664a:	fa1f fa8a 	uxth.w	sl, sl
   8664e:	ebaa 0a02 	sub.w	sl, sl, r2
	if (copy_nb>size) {
   86652:	45b2      	cmp	sl, r6
   86654:	bf28      	it	cs
   86656:	46b2      	movcs	sl, r6
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86658:	4640      	mov	r0, r8
   8665a:	4b0f      	ldr	r3, [pc, #60]	; (86698 <udi_cdc_multi_read_buf+0xa8>)
   8665c:	4652      	mov	r2, sl
   8665e:	4459      	add	r1, fp
   86660:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   86662:	8823      	ldrh	r3, [r4, #0]
	size -= copy_nb;
   86664:	eba6 060a 	sub.w	r6, r6, sl
	udi_cdc_rx_pos[port] += copy_nb;
   86668:	4453      	add	r3, sl
   8666a:	b29b      	uxth	r3, r3
   8666c:	8023      	strh	r3, [r4, #0]
	udi_cdc_rx_start(port);
   8666e:	4b0b      	ldr	r3, [pc, #44]	; (8669c <udi_cdc_multi_read_buf+0xac>)
	ptr_buf += copy_nb;
   86670:	44d0      	add	r8, sl
	udi_cdc_rx_start(port);
   86672:	4798      	blx	r3
	if (size) {
   86674:	2e00      	cmp	r6, #0
   86676:	d1c6      	bne.n	86606 <udi_cdc_multi_read_buf+0x16>
}
   86678:	4630      	mov	r0, r6
   8667a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8667e:	bf00      	nop
   86680:	20000b40 	.word	0x20000b40
   86684:	20002454 	.word	0x20002454
   86688:	20002450 	.word	0x20002450
   8668c:	2000244c 	.word	0x2000244c
   86690:	2000204c 	.word	0x2000204c
   86694:	2000203c 	.word	0x2000203c
   86698:	00086d65 	.word	0x00086d65
   8669c:	000863e1 	.word	0x000863e1

000866a0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   866a0:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   866a2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   866a6:	b672      	cpsid	i
   866a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   866ac:	2100      	movs	r1, #0
   866ae:	4a13      	ldr	r2, [pc, #76]	; (866fc <udi_cdc_multi_is_tx_ready+0x5c>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   866b0:	4c13      	ldr	r4, [pc, #76]	; (86700 <udi_cdc_multi_is_tx_ready+0x60>)
   866b2:	7011      	strb	r1, [r2, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   866b4:	4813      	ldr	r0, [pc, #76]	; (86704 <udi_cdc_multi_is_tx_ready+0x64>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   866b6:	7823      	ldrb	r3, [r4, #0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   866b8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   866bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   866c0:	d008      	beq.n	866d4 <udi_cdc_multi_is_tx_ready+0x34>
   866c2:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   866c4:	b925      	cbnz	r5, 866d0 <udi_cdc_multi_is_tx_ready+0x30>
		cpu_irq_enable();
   866c6:	2301      	movs	r3, #1
   866c8:	7013      	strb	r3, [r2, #0]
   866ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   866ce:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
   866d0:	bc70      	pop	{r4, r5, r6}
   866d2:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   866d4:	480c      	ldr	r0, [pc, #48]	; (86708 <udi_cdc_multi_is_tx_ready+0x68>)
   866d6:	7806      	ldrb	r6, [r0, #0]
   866d8:	f006 00ff 	and.w	r0, r6, #255	; 0xff
   866dc:	b95e      	cbnz	r6, 866f6 <udi_cdc_multi_is_tx_ready+0x56>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   866de:	490b      	ldr	r1, [pc, #44]	; (8670c <udi_cdc_multi_is_tx_ready+0x6c>)
   866e0:	780e      	ldrb	r6, [r1, #0]
   866e2:	2e00      	cmp	r6, #0
   866e4:	d1ee      	bne.n	866c4 <udi_cdc_multi_is_tx_ready+0x24>
			udi_cdc_tx_both_buf_to_send[port] = true;
   866e6:	b2db      	uxtb	r3, r3
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   866e8:	fab3 f383 	clz	r3, r3
			udi_cdc_tx_both_buf_to_send[port] = true;
   866ec:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   866ee:	095b      	lsrs	r3, r3, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   866f0:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   866f2:	7023      	strb	r3, [r4, #0]
			buf_sel_nb = 0;
   866f4:	e7e6      	b.n	866c4 <udi_cdc_multi_is_tx_ready+0x24>
   866f6:	4608      	mov	r0, r1
   866f8:	e7e4      	b.n	866c4 <udi_cdc_multi_is_tx_ready+0x24>
   866fa:	bf00      	nop
   866fc:	20000b40 	.word	0x20000b40
   86700:	20002868 	.word	0x20002868
   86704:	20002864 	.word	0x20002864
   86708:	20002870 	.word	0x20002870
   8670c:	20002460 	.word	0x20002460

00086710 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   86710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   86714:	4b35      	ldr	r3, [pc, #212]	; (867ec <udi_cdc_multi_putc+0xdc>)
	cpu_irq_disable();
   86716:	f04f 0c00 	mov.w	ip, #0
   8671a:	799a      	ldrb	r2, [r3, #6]
		cpu_irq_enable();
   8671c:	f04f 0e01 	mov.w	lr, #1
   86720:	f1a2 0209 	sub.w	r2, r2, #9
   86724:	fab2 f282 	clz	r2, r2
   86728:	4831      	ldr	r0, [pc, #196]	; (867f0 <udi_cdc_multi_putc+0xe0>)
   8672a:	4d32      	ldr	r5, [pc, #200]	; (867f4 <udi_cdc_multi_putc+0xe4>)
   8672c:	4c32      	ldr	r4, [pc, #200]	; (867f8 <udi_cdc_multi_putc+0xe8>)
		if ((!udi_cdc_tx_trans_ongoing[port])
   8672e:	4e33      	ldr	r6, [pc, #204]	; (867fc <udi_cdc_multi_putc+0xec>)
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   86730:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 86800 <udi_cdc_multi_putc+0xf0>
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   86734:	4f33      	ldr	r7, [pc, #204]	; (86804 <udi_cdc_multi_putc+0xf4>)
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   86736:	0952      	lsrs	r2, r2, #5
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86738:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i");
   8673c:	b672      	cpsid	i
   8673e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86742:	f880 c000 	strb.w	ip, [r0]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86746:	782b      	ldrb	r3, [r5, #0]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   86748:	f834 a013 	ldrh.w	sl, [r4, r3, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   8674c:	b2db      	uxtb	r3, r3
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   8674e:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
   86752:	d027      	beq.n	867a4 <udi_cdc_multi_putc+0x94>
	if (cpu_irq_is_enabled_flags(flags))
   86754:	f1b9 0f00 	cmp.w	r9, #0
   86758:	d104      	bne.n	86764 <udi_cdc_multi_putc+0x54>
		cpu_irq_enable();
   8675a:	f880 e000 	strb.w	lr, [r0]
   8675e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86762:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86764:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i");
   86768:	b672      	cpsid	i
   8676a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8676e:	f880 c000 	strb.w	ip, [r0]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86772:	782b      	ldrb	r3, [r5, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   86774:	f834 9013 	ldrh.w	r9, [r4, r3, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86778:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   8677a:	f109 0b01 	add.w	fp, r9, #1
   8677e:	f824 b013 	strh.w	fp, [r4, r3, lsl #1]
   86782:	eb07 2343 	add.w	r3, r7, r3, lsl #9
   86786:	f803 1009 	strb.w	r1, [r3, r9]
	if (cpu_irq_is_enabled_flags(flags))
   8678a:	f1ba 0f00 	cmp.w	sl, #0
   8678e:	d003      	beq.n	86798 <udi_cdc_multi_putc+0x88>
	cpu_irq_restore(flags);

	if (b_databit_9) {
   86790:	b352      	cbz	r2, 867e8 <udi_cdc_multi_putc+0xd8>
		// Send MSB
		b_databit_9 = false;
   86792:	2200      	movs	r2, #0
		value = value >> 8;
   86794:	1209      	asrs	r1, r1, #8
		goto udi_cdc_putc_process_one_byte;
   86796:	e7cf      	b.n	86738 <udi_cdc_multi_putc+0x28>
		cpu_irq_enable();
   86798:	f880 e000 	strb.w	lr, [r0]
   8679c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   867a0:	b662      	cpsie	i
}
   867a2:	e7f5      	b.n	86790 <udi_cdc_multi_putc+0x80>
		if ((!udi_cdc_tx_trans_ongoing[port])
   867a4:	f896 a000 	ldrb.w	sl, [r6]
   867a8:	f1ba 0f00 	cmp.w	sl, #0
   867ac:	d104      	bne.n	867b8 <udi_cdc_multi_putc+0xa8>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   867ae:	f898 a000 	ldrb.w	sl, [r8]
   867b2:	f1ba 0f00 	cmp.w	sl, #0
   867b6:	d007      	beq.n	867c8 <udi_cdc_multi_putc+0xb8>
	if (cpu_irq_is_enabled_flags(flags))
   867b8:	f1b9 0f00 	cmp.w	r9, #0
   867bc:	d00e      	beq.n	867dc <udi_cdc_multi_putc+0xcc>
			return false;
   867be:	2000      	movs	r0, #0
		if (!udi_cdc_data_running) {
   867c0:	4b11      	ldr	r3, [pc, #68]	; (86808 <udi_cdc_multi_putc+0xf8>)
   867c2:	781b      	ldrb	r3, [r3, #0]
	}
	return true;
}
   867c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   867c8:	fab3 f383 	clz	r3, r3
   867cc:	095b      	lsrs	r3, r3, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   867ce:	f888 e000 	strb.w	lr, [r8]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   867d2:	702b      	strb	r3, [r5, #0]
   867d4:	f1b9 0f00 	cmp.w	r9, #0
   867d8:	d0bf      	beq.n	8675a <udi_cdc_multi_putc+0x4a>
   867da:	e7c3      	b.n	86764 <udi_cdc_multi_putc+0x54>
		cpu_irq_enable();
   867dc:	2301      	movs	r3, #1
   867de:	7003      	strb	r3, [r0, #0]
   867e0:	f3bf 8f5f 	dmb	sy
   867e4:	b662      	cpsie	i
	return retval;
   867e6:	e7ea      	b.n	867be <udi_cdc_multi_putc+0xae>
	return true;
   867e8:	2001      	movs	r0, #1
   867ea:	e7eb      	b.n	867c4 <udi_cdc_multi_putc+0xb4>
   867ec:	20002040 	.word	0x20002040
   867f0:	20000b40 	.word	0x20000b40
   867f4:	20002868 	.word	0x20002868
   867f8:	20002864 	.word	0x20002864
   867fc:	20002870 	.word	0x20002870
   86800:	20002460 	.word	0x20002460
   86804:	20002464 	.word	0x20002464
   86808:	2000203c 	.word	0x2000203c

0008680c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   86810:	b9a0      	cbnz	r0, 8683c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   86812:	2a00      	cmp	r2, #0
   86814:	4690      	mov	r8, r2
   86816:	dd0d      	ble.n	86834 <_read+0x28>
   86818:	460c      	mov	r4, r1
   8681a:	4f0a      	ldr	r7, [pc, #40]	; (86844 <_read+0x38>)
   8681c:	4e0a      	ldr	r6, [pc, #40]	; (86848 <_read+0x3c>)
   8681e:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   86820:	4621      	mov	r1, r4
   86822:	6838      	ldr	r0, [r7, #0]
   86824:	6833      	ldr	r3, [r6, #0]
		ptr++;
   86826:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   86828:	4798      	blx	r3
	for (; len > 0; --len) {
   8682a:	42ac      	cmp	r4, r5
   8682c:	d1f8      	bne.n	86820 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8682e:	4640      	mov	r0, r8
   86830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   86834:	4680      	mov	r8, r0
}
   86836:	4640      	mov	r0, r8
   86838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8683c:	f04f 38ff 	mov.w	r8, #4294967295
   86840:	e7f5      	b.n	8682e <_read+0x22>
   86842:	bf00      	nop
   86844:	20002028 	.word	0x20002028
   86848:	20002880 	.word	0x20002880

0008684c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8684c:	4a31      	ldr	r2, [pc, #196]	; (86914 <SystemCoreClockUpdate+0xc8>)
   8684e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   86850:	f003 0303 	and.w	r3, r3, #3
   86854:	2b01      	cmp	r3, #1
   86856:	d02c      	beq.n	868b2 <SystemCoreClockUpdate+0x66>
   86858:	3b02      	subs	r3, #2
   8685a:	2b01      	cmp	r3, #1
   8685c:	d81e      	bhi.n	8689c <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8685e:	6a13      	ldr	r3, [r2, #32]
   86860:	01d9      	lsls	r1, r3, #7
   86862:	d538      	bpl.n	868d6 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86864:	482c      	ldr	r0, [pc, #176]	; (86918 <SystemCoreClockUpdate+0xcc>)
   86866:	4b2d      	ldr	r3, [pc, #180]	; (8691c <SystemCoreClockUpdate+0xd0>)
   86868:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8686a:	4a2a      	ldr	r2, [pc, #168]	; (86914 <SystemCoreClockUpdate+0xc8>)
   8686c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8686e:	f003 0303 	and.w	r3, r3, #3
   86872:	2b02      	cmp	r3, #2
   86874:	d03c      	beq.n	868f0 <SystemCoreClockUpdate+0xa4>
   86876:	4b2a      	ldr	r3, [pc, #168]	; (86920 <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   86878:	4926      	ldr	r1, [pc, #152]	; (86914 <SystemCoreClockUpdate+0xc8>)
   8687a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8687c:	f002 0270 	and.w	r2, r2, #112	; 0x70
   86880:	2a70      	cmp	r2, #112	; 0x70
   86882:	d005      	beq.n	86890 <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   86884:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   86886:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8688a:	40d3      	lsrs	r3, r2
   8688c:	6003      	str	r3, [r0, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   8688e:	4770      	bx	lr
		SystemCoreClock /= 3U;
   86890:	4a24      	ldr	r2, [pc, #144]	; (86924 <SystemCoreClockUpdate+0xd8>)
   86892:	fba2 2303 	umull	r2, r3, r2, r3
   86896:	085b      	lsrs	r3, r3, #1
   86898:	6003      	str	r3, [r0, #0]
}
   8689a:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8689c:	4b22      	ldr	r3, [pc, #136]	; (86928 <SystemCoreClockUpdate+0xdc>)
   8689e:	481e      	ldr	r0, [pc, #120]	; (86918 <SystemCoreClockUpdate+0xcc>)
   868a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   868a2:	f013 0f80 	tst.w	r3, #128	; 0x80
   868a6:	bf14      	ite	ne
   868a8:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   868ac:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   868b0:	e7e2      	b.n	86878 <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   868b2:	6a13      	ldr	r3, [r2, #32]
   868b4:	01db      	lsls	r3, r3, #7
   868b6:	d40b      	bmi.n	868d0 <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   868b8:	6a12      	ldr	r2, [r2, #32]
   868ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
   868be:	2a10      	cmp	r2, #16
   868c0:	d021      	beq.n	86906 <SystemCoreClockUpdate+0xba>
   868c2:	4b16      	ldr	r3, [pc, #88]	; (8691c <SystemCoreClockUpdate+0xd0>)
   868c4:	4919      	ldr	r1, [pc, #100]	; (8692c <SystemCoreClockUpdate+0xe0>)
   868c6:	4814      	ldr	r0, [pc, #80]	; (86918 <SystemCoreClockUpdate+0xcc>)
   868c8:	2a20      	cmp	r2, #32
   868ca:	bf18      	it	ne
   868cc:	460b      	movne	r3, r1
   868ce:	e7d3      	b.n	86878 <SystemCoreClockUpdate+0x2c>
   868d0:	4b12      	ldr	r3, [pc, #72]	; (8691c <SystemCoreClockUpdate+0xd0>)
   868d2:	4811      	ldr	r0, [pc, #68]	; (86918 <SystemCoreClockUpdate+0xcc>)
   868d4:	e7d0      	b.n	86878 <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   868d6:	4b15      	ldr	r3, [pc, #84]	; (8692c <SystemCoreClockUpdate+0xe0>)
   868d8:	480f      	ldr	r0, [pc, #60]	; (86918 <SystemCoreClockUpdate+0xcc>)
   868da:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   868dc:	6a13      	ldr	r3, [r2, #32]
   868de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   868e2:	2b10      	cmp	r3, #16
   868e4:	d012      	beq.n	8690c <SystemCoreClockUpdate+0xc0>
   868e6:	2b20      	cmp	r3, #32
   868e8:	d1bf      	bne.n	8686a <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   868ea:	4b0c      	ldr	r3, [pc, #48]	; (8691c <SystemCoreClockUpdate+0xd0>)
   868ec:	6003      	str	r3, [r0, #0]
				break;
   868ee:	e7bc      	b.n	8686a <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   868f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
   868f2:	6803      	ldr	r3, [r0, #0]
   868f4:	f3c1 410a 	ubfx	r1, r1, #16, #11
   868f8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   868fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
   868fe:	b2d2      	uxtb	r2, r2
   86900:	fbb3 f3f2 	udiv	r3, r3, r2
   86904:	e7b8      	b.n	86878 <SystemCoreClockUpdate+0x2c>
   86906:	4b0a      	ldr	r3, [pc, #40]	; (86930 <SystemCoreClockUpdate+0xe4>)
   86908:	4803      	ldr	r0, [pc, #12]	; (86918 <SystemCoreClockUpdate+0xcc>)
   8690a:	e7b5      	b.n	86878 <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   8690c:	4b08      	ldr	r3, [pc, #32]	; (86930 <SystemCoreClockUpdate+0xe4>)
   8690e:	6003      	str	r3, [r0, #0]
				break;
   86910:	e7ab      	b.n	8686a <SystemCoreClockUpdate+0x1e>
   86912:	bf00      	nop
   86914:	400e0400 	.word	0x400e0400
   86918:	20000b6c 	.word	0x20000b6c
   8691c:	00b71b00 	.word	0x00b71b00
   86920:	0e4e1c00 	.word	0x0e4e1c00
   86924:	aaaaaaab 	.word	0xaaaaaaab
   86928:	400e1200 	.word	0x400e1200
   8692c:	003d0900 	.word	0x003d0900
   86930:	007a1200 	.word	0x007a1200

00086934 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   86934:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   86936:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8693a:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8693c:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   86940:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   86944:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   86948:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8694a:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8694c:	604a      	str	r2, [r1, #4]
}
   8694e:	bc10      	pop	{r4}
   86950:	4770      	bx	lr
   86952:	bf00      	nop

00086954 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   86954:	2305      	movs	r3, #5
   86956:	0189      	lsls	r1, r1, #6
   86958:	5043      	str	r3, [r0, r1]
}
   8695a:	4770      	bx	lr

0008695c <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8695c:	2302      	movs	r3, #2
   8695e:	0189      	lsls	r1, r1, #6
   86960:	5043      	str	r3, [r0, r1]
}
   86962:	4770      	bx	lr

00086964 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   86964:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   86968:	61c2      	str	r2, [r0, #28]
}
   8696a:	4770      	bx	lr

0008696c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8696c:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   86970:	6242      	str	r2, [r0, #36]	; 0x24
}
   86972:	4770      	bx	lr

00086974 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   86974:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   86978:	6a00      	ldr	r0, [r0, #32]
}
   8697a:	4770      	bx	lr

0008697c <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   8697c:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   8697e:	4c04      	ldr	r4, [pc, #16]	; (86990 <ui_init+0x14>)
   86980:	2006      	movs	r0, #6
   86982:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   86984:	4623      	mov	r3, r4
	//LED_Off(LED2_GPIO);
}
   86986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LED_Off(LED1_GPIO);
   8698a:	2007      	movs	r0, #7
   8698c:	4718      	bx	r3
   8698e:	bf00      	nop
   86990:	000857d1 	.word	0x000857d1

00086994 <ui_powerdown>:
   86994:	b510      	push	{r4, lr}
   86996:	4c04      	ldr	r4, [pc, #16]	; (869a8 <ui_powerdown+0x14>)
   86998:	2006      	movs	r0, #6
   8699a:	47a0      	blx	r4
   8699c:	4623      	mov	r3, r4
   8699e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   869a2:	2007      	movs	r0, #7
   869a4:	4718      	bx	r3
   869a6:	bf00      	nop
   869a8:	000857d1 	.word	0x000857d1

000869ac <ui_wakeup>:
	//board_sram_pwroff();
}

void ui_wakeup(void)
{
	LED_On(LED0_GPIO);
   869ac:	2006      	movs	r0, #6
   869ae:	4b01      	ldr	r3, [pc, #4]	; (869b4 <ui_wakeup+0x8>)
   869b0:	4718      	bx	r3
   869b2:	bf00      	nop
   869b4:	000857e5 	.word	0x000857e5

000869b8 <ui_process>:
	//board_sram_pwron();
}

void ui_process(uint16_t framenumber)
{
	if ((framenumber % 1000) == 0) {
   869b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   869bc:	4b08      	ldr	r3, [pc, #32]	; (869e0 <ui_process+0x28>)
   869be:	fba3 1300 	umull	r1, r3, r3, r0
   869c2:	099b      	lsrs	r3, r3, #6
   869c4:	fb02 0013 	mls	r0, r2, r3, r0
   869c8:	b280      	uxth	r0, r0
   869ca:	b130      	cbz	r0, 869da <ui_process+0x22>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   869cc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   869d0:	d000      	beq.n	869d4 <ui_process+0x1c>
	
	if ((framenumber % 512) == 0) {
		// LED_Off(LED1_GPIO);
		//LED_Off(LED2_GPIO);
	}
}
   869d2:	4770      	bx	lr
		LED_Off(LED0_GPIO);
   869d4:	2006      	movs	r0, #6
   869d6:	4b03      	ldr	r3, [pc, #12]	; (869e4 <ui_process+0x2c>)
   869d8:	4718      	bx	r3
		LED_On(LED0_GPIO);
   869da:	2006      	movs	r0, #6
   869dc:	4b02      	ldr	r3, [pc, #8]	; (869e8 <ui_process+0x30>)
   869de:	4718      	bx	r3
   869e0:	10624dd3 	.word	0x10624dd3
   869e4:	000857d1 	.word	0x000857d1
   869e8:	000857e5 	.word	0x000857e5

000869ec <__aeabi_uldivmod>:
   869ec:	b953      	cbnz	r3, 86a04 <__aeabi_uldivmod+0x18>
   869ee:	b94a      	cbnz	r2, 86a04 <__aeabi_uldivmod+0x18>
   869f0:	2900      	cmp	r1, #0
   869f2:	bf08      	it	eq
   869f4:	2800      	cmpeq	r0, #0
   869f6:	bf1c      	itt	ne
   869f8:	f04f 31ff 	movne.w	r1, #4294967295
   869fc:	f04f 30ff 	movne.w	r0, #4294967295
   86a00:	f000 b976 	b.w	86cf0 <__aeabi_idiv0>
   86a04:	f1ad 0c08 	sub.w	ip, sp, #8
   86a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86a0c:	f000 f806 	bl	86a1c <__udivmoddi4>
   86a10:	f8dd e004 	ldr.w	lr, [sp, #4]
   86a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86a18:	b004      	add	sp, #16
   86a1a:	4770      	bx	lr

00086a1c <__udivmoddi4>:
   86a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86a20:	9e08      	ldr	r6, [sp, #32]
   86a22:	460d      	mov	r5, r1
   86a24:	4604      	mov	r4, r0
   86a26:	4688      	mov	r8, r1
   86a28:	2b00      	cmp	r3, #0
   86a2a:	d14d      	bne.n	86ac8 <__udivmoddi4+0xac>
   86a2c:	428a      	cmp	r2, r1
   86a2e:	4694      	mov	ip, r2
   86a30:	d968      	bls.n	86b04 <__udivmoddi4+0xe8>
   86a32:	fab2 f282 	clz	r2, r2
   86a36:	b152      	cbz	r2, 86a4e <__udivmoddi4+0x32>
   86a38:	fa01 f302 	lsl.w	r3, r1, r2
   86a3c:	f1c2 0120 	rsb	r1, r2, #32
   86a40:	fa20 f101 	lsr.w	r1, r0, r1
   86a44:	fa0c fc02 	lsl.w	ip, ip, r2
   86a48:	ea41 0803 	orr.w	r8, r1, r3
   86a4c:	4094      	lsls	r4, r2
   86a4e:	ea4f 411c 	mov.w	r1, ip, lsr #16
   86a52:	fbb8 f7f1 	udiv	r7, r8, r1
   86a56:	fa1f fe8c 	uxth.w	lr, ip
   86a5a:	fb01 8817 	mls	r8, r1, r7, r8
   86a5e:	fb07 f00e 	mul.w	r0, r7, lr
   86a62:	0c23      	lsrs	r3, r4, #16
   86a64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   86a68:	4298      	cmp	r0, r3
   86a6a:	d90a      	bls.n	86a82 <__udivmoddi4+0x66>
   86a6c:	eb1c 0303 	adds.w	r3, ip, r3
   86a70:	f107 35ff 	add.w	r5, r7, #4294967295
   86a74:	f080 811e 	bcs.w	86cb4 <__udivmoddi4+0x298>
   86a78:	4298      	cmp	r0, r3
   86a7a:	f240 811b 	bls.w	86cb4 <__udivmoddi4+0x298>
   86a7e:	3f02      	subs	r7, #2
   86a80:	4463      	add	r3, ip
   86a82:	1a1b      	subs	r3, r3, r0
   86a84:	fbb3 f0f1 	udiv	r0, r3, r1
   86a88:	fb01 3310 	mls	r3, r1, r0, r3
   86a8c:	fb00 fe0e 	mul.w	lr, r0, lr
   86a90:	b2a4      	uxth	r4, r4
   86a92:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   86a96:	45a6      	cmp	lr, r4
   86a98:	d90a      	bls.n	86ab0 <__udivmoddi4+0x94>
   86a9a:	eb1c 0404 	adds.w	r4, ip, r4
   86a9e:	f100 33ff 	add.w	r3, r0, #4294967295
   86aa2:	f080 8109 	bcs.w	86cb8 <__udivmoddi4+0x29c>
   86aa6:	45a6      	cmp	lr, r4
   86aa8:	f240 8106 	bls.w	86cb8 <__udivmoddi4+0x29c>
   86aac:	4464      	add	r4, ip
   86aae:	3802      	subs	r0, #2
   86ab0:	2100      	movs	r1, #0
   86ab2:	eba4 040e 	sub.w	r4, r4, lr
   86ab6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   86aba:	b11e      	cbz	r6, 86ac4 <__udivmoddi4+0xa8>
   86abc:	2300      	movs	r3, #0
   86abe:	40d4      	lsrs	r4, r2
   86ac0:	e9c6 4300 	strd	r4, r3, [r6]
   86ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86ac8:	428b      	cmp	r3, r1
   86aca:	d908      	bls.n	86ade <__udivmoddi4+0xc2>
   86acc:	2e00      	cmp	r6, #0
   86ace:	f000 80ee 	beq.w	86cae <__udivmoddi4+0x292>
   86ad2:	2100      	movs	r1, #0
   86ad4:	e9c6 0500 	strd	r0, r5, [r6]
   86ad8:	4608      	mov	r0, r1
   86ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86ade:	fab3 f183 	clz	r1, r3
   86ae2:	2900      	cmp	r1, #0
   86ae4:	d14a      	bne.n	86b7c <__udivmoddi4+0x160>
   86ae6:	42ab      	cmp	r3, r5
   86ae8:	d302      	bcc.n	86af0 <__udivmoddi4+0xd4>
   86aea:	4282      	cmp	r2, r0
   86aec:	f200 80fc 	bhi.w	86ce8 <__udivmoddi4+0x2cc>
   86af0:	1a84      	subs	r4, r0, r2
   86af2:	eb65 0303 	sbc.w	r3, r5, r3
   86af6:	2001      	movs	r0, #1
   86af8:	4698      	mov	r8, r3
   86afa:	2e00      	cmp	r6, #0
   86afc:	d0e2      	beq.n	86ac4 <__udivmoddi4+0xa8>
   86afe:	e9c6 4800 	strd	r4, r8, [r6]
   86b02:	e7df      	b.n	86ac4 <__udivmoddi4+0xa8>
   86b04:	b902      	cbnz	r2, 86b08 <__udivmoddi4+0xec>
   86b06:	deff      	udf	#255	; 0xff
   86b08:	fab2 f282 	clz	r2, r2
   86b0c:	2a00      	cmp	r2, #0
   86b0e:	f040 8091 	bne.w	86c34 <__udivmoddi4+0x218>
   86b12:	eba1 000c 	sub.w	r0, r1, ip
   86b16:	2101      	movs	r1, #1
   86b18:	ea4f 471c 	mov.w	r7, ip, lsr #16
   86b1c:	fa1f fe8c 	uxth.w	lr, ip
   86b20:	fbb0 f3f7 	udiv	r3, r0, r7
   86b24:	fb07 0013 	mls	r0, r7, r3, r0
   86b28:	0c25      	lsrs	r5, r4, #16
   86b2a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   86b2e:	fb0e f003 	mul.w	r0, lr, r3
   86b32:	42a8      	cmp	r0, r5
   86b34:	d908      	bls.n	86b48 <__udivmoddi4+0x12c>
   86b36:	eb1c 0505 	adds.w	r5, ip, r5
   86b3a:	f103 38ff 	add.w	r8, r3, #4294967295
   86b3e:	d202      	bcs.n	86b46 <__udivmoddi4+0x12a>
   86b40:	42a8      	cmp	r0, r5
   86b42:	f200 80ce 	bhi.w	86ce2 <__udivmoddi4+0x2c6>
   86b46:	4643      	mov	r3, r8
   86b48:	1a2d      	subs	r5, r5, r0
   86b4a:	fbb5 f0f7 	udiv	r0, r5, r7
   86b4e:	fb07 5510 	mls	r5, r7, r0, r5
   86b52:	fb0e fe00 	mul.w	lr, lr, r0
   86b56:	b2a4      	uxth	r4, r4
   86b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   86b5c:	45a6      	cmp	lr, r4
   86b5e:	d908      	bls.n	86b72 <__udivmoddi4+0x156>
   86b60:	eb1c 0404 	adds.w	r4, ip, r4
   86b64:	f100 35ff 	add.w	r5, r0, #4294967295
   86b68:	d202      	bcs.n	86b70 <__udivmoddi4+0x154>
   86b6a:	45a6      	cmp	lr, r4
   86b6c:	f200 80b6 	bhi.w	86cdc <__udivmoddi4+0x2c0>
   86b70:	4628      	mov	r0, r5
   86b72:	eba4 040e 	sub.w	r4, r4, lr
   86b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86b7a:	e79e      	b.n	86aba <__udivmoddi4+0x9e>
   86b7c:	f1c1 0720 	rsb	r7, r1, #32
   86b80:	408b      	lsls	r3, r1
   86b82:	fa22 fc07 	lsr.w	ip, r2, r7
   86b86:	ea4c 0c03 	orr.w	ip, ip, r3
   86b8a:	fa25 fa07 	lsr.w	sl, r5, r7
   86b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   86b92:	fbba f8f9 	udiv	r8, sl, r9
   86b96:	fa20 f307 	lsr.w	r3, r0, r7
   86b9a:	fb09 aa18 	mls	sl, r9, r8, sl
   86b9e:	408d      	lsls	r5, r1
   86ba0:	fa1f fe8c 	uxth.w	lr, ip
   86ba4:	431d      	orrs	r5, r3
   86ba6:	fa00 f301 	lsl.w	r3, r0, r1
   86baa:	fb08 f00e 	mul.w	r0, r8, lr
   86bae:	0c2c      	lsrs	r4, r5, #16
   86bb0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   86bb4:	42a0      	cmp	r0, r4
   86bb6:	fa02 f201 	lsl.w	r2, r2, r1
   86bba:	d90b      	bls.n	86bd4 <__udivmoddi4+0x1b8>
   86bbc:	eb1c 0404 	adds.w	r4, ip, r4
   86bc0:	f108 3aff 	add.w	sl, r8, #4294967295
   86bc4:	f080 8088 	bcs.w	86cd8 <__udivmoddi4+0x2bc>
   86bc8:	42a0      	cmp	r0, r4
   86bca:	f240 8085 	bls.w	86cd8 <__udivmoddi4+0x2bc>
   86bce:	f1a8 0802 	sub.w	r8, r8, #2
   86bd2:	4464      	add	r4, ip
   86bd4:	1a24      	subs	r4, r4, r0
   86bd6:	fbb4 f0f9 	udiv	r0, r4, r9
   86bda:	fb09 4410 	mls	r4, r9, r0, r4
   86bde:	fb00 fe0e 	mul.w	lr, r0, lr
   86be2:	b2ad      	uxth	r5, r5
   86be4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   86be8:	45a6      	cmp	lr, r4
   86bea:	d908      	bls.n	86bfe <__udivmoddi4+0x1e2>
   86bec:	eb1c 0404 	adds.w	r4, ip, r4
   86bf0:	f100 35ff 	add.w	r5, r0, #4294967295
   86bf4:	d26c      	bcs.n	86cd0 <__udivmoddi4+0x2b4>
   86bf6:	45a6      	cmp	lr, r4
   86bf8:	d96a      	bls.n	86cd0 <__udivmoddi4+0x2b4>
   86bfa:	3802      	subs	r0, #2
   86bfc:	4464      	add	r4, ip
   86bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   86c02:	fba0 9502 	umull	r9, r5, r0, r2
   86c06:	eba4 040e 	sub.w	r4, r4, lr
   86c0a:	42ac      	cmp	r4, r5
   86c0c:	46c8      	mov	r8, r9
   86c0e:	46ae      	mov	lr, r5
   86c10:	d356      	bcc.n	86cc0 <__udivmoddi4+0x2a4>
   86c12:	d053      	beq.n	86cbc <__udivmoddi4+0x2a0>
   86c14:	2e00      	cmp	r6, #0
   86c16:	d069      	beq.n	86cec <__udivmoddi4+0x2d0>
   86c18:	ebb3 0208 	subs.w	r2, r3, r8
   86c1c:	eb64 040e 	sbc.w	r4, r4, lr
   86c20:	fa22 f301 	lsr.w	r3, r2, r1
   86c24:	fa04 f707 	lsl.w	r7, r4, r7
   86c28:	431f      	orrs	r7, r3
   86c2a:	40cc      	lsrs	r4, r1
   86c2c:	e9c6 7400 	strd	r7, r4, [r6]
   86c30:	2100      	movs	r1, #0
   86c32:	e747      	b.n	86ac4 <__udivmoddi4+0xa8>
   86c34:	fa0c fc02 	lsl.w	ip, ip, r2
   86c38:	f1c2 0120 	rsb	r1, r2, #32
   86c3c:	fa25 f301 	lsr.w	r3, r5, r1
   86c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
   86c44:	fa20 f101 	lsr.w	r1, r0, r1
   86c48:	4095      	lsls	r5, r2
   86c4a:	430d      	orrs	r5, r1
   86c4c:	fbb3 f1f7 	udiv	r1, r3, r7
   86c50:	fb07 3311 	mls	r3, r7, r1, r3
   86c54:	fa1f fe8c 	uxth.w	lr, ip
   86c58:	0c28      	lsrs	r0, r5, #16
   86c5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86c5e:	fb01 f30e 	mul.w	r3, r1, lr
   86c62:	4283      	cmp	r3, r0
   86c64:	fa04 f402 	lsl.w	r4, r4, r2
   86c68:	d908      	bls.n	86c7c <__udivmoddi4+0x260>
   86c6a:	eb1c 0000 	adds.w	r0, ip, r0
   86c6e:	f101 38ff 	add.w	r8, r1, #4294967295
   86c72:	d22f      	bcs.n	86cd4 <__udivmoddi4+0x2b8>
   86c74:	4283      	cmp	r3, r0
   86c76:	d92d      	bls.n	86cd4 <__udivmoddi4+0x2b8>
   86c78:	3902      	subs	r1, #2
   86c7a:	4460      	add	r0, ip
   86c7c:	1ac0      	subs	r0, r0, r3
   86c7e:	fbb0 f3f7 	udiv	r3, r0, r7
   86c82:	fb07 0013 	mls	r0, r7, r3, r0
   86c86:	b2ad      	uxth	r5, r5
   86c88:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   86c8c:	fb03 f00e 	mul.w	r0, r3, lr
   86c90:	42a8      	cmp	r0, r5
   86c92:	d908      	bls.n	86ca6 <__udivmoddi4+0x28a>
   86c94:	eb1c 0505 	adds.w	r5, ip, r5
   86c98:	f103 38ff 	add.w	r8, r3, #4294967295
   86c9c:	d216      	bcs.n	86ccc <__udivmoddi4+0x2b0>
   86c9e:	42a8      	cmp	r0, r5
   86ca0:	d914      	bls.n	86ccc <__udivmoddi4+0x2b0>
   86ca2:	3b02      	subs	r3, #2
   86ca4:	4465      	add	r5, ip
   86ca6:	1a28      	subs	r0, r5, r0
   86ca8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86cac:	e738      	b.n	86b20 <__udivmoddi4+0x104>
   86cae:	4631      	mov	r1, r6
   86cb0:	4630      	mov	r0, r6
   86cb2:	e707      	b.n	86ac4 <__udivmoddi4+0xa8>
   86cb4:	462f      	mov	r7, r5
   86cb6:	e6e4      	b.n	86a82 <__udivmoddi4+0x66>
   86cb8:	4618      	mov	r0, r3
   86cba:	e6f9      	b.n	86ab0 <__udivmoddi4+0x94>
   86cbc:	454b      	cmp	r3, r9
   86cbe:	d2a9      	bcs.n	86c14 <__udivmoddi4+0x1f8>
   86cc0:	ebb9 0802 	subs.w	r8, r9, r2
   86cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
   86cc8:	3801      	subs	r0, #1
   86cca:	e7a3      	b.n	86c14 <__udivmoddi4+0x1f8>
   86ccc:	4643      	mov	r3, r8
   86cce:	e7ea      	b.n	86ca6 <__udivmoddi4+0x28a>
   86cd0:	4628      	mov	r0, r5
   86cd2:	e794      	b.n	86bfe <__udivmoddi4+0x1e2>
   86cd4:	4641      	mov	r1, r8
   86cd6:	e7d1      	b.n	86c7c <__udivmoddi4+0x260>
   86cd8:	46d0      	mov	r8, sl
   86cda:	e77b      	b.n	86bd4 <__udivmoddi4+0x1b8>
   86cdc:	4464      	add	r4, ip
   86cde:	3802      	subs	r0, #2
   86ce0:	e747      	b.n	86b72 <__udivmoddi4+0x156>
   86ce2:	3b02      	subs	r3, #2
   86ce4:	4465      	add	r5, ip
   86ce6:	e72f      	b.n	86b48 <__udivmoddi4+0x12c>
   86ce8:	4608      	mov	r0, r1
   86cea:	e706      	b.n	86afa <__udivmoddi4+0xde>
   86cec:	4631      	mov	r1, r6
   86cee:	e6e9      	b.n	86ac4 <__udivmoddi4+0xa8>

00086cf0 <__aeabi_idiv0>:
   86cf0:	4770      	bx	lr
   86cf2:	bf00      	nop

00086cf4 <__libc_init_array>:
   86cf4:	b570      	push	{r4, r5, r6, lr}
   86cf6:	4e0d      	ldr	r6, [pc, #52]	; (86d2c <__libc_init_array+0x38>)
   86cf8:	4d0d      	ldr	r5, [pc, #52]	; (86d30 <__libc_init_array+0x3c>)
   86cfa:	1b76      	subs	r6, r6, r5
   86cfc:	10b6      	asrs	r6, r6, #2
   86cfe:	d006      	beq.n	86d0e <__libc_init_array+0x1a>
   86d00:	2400      	movs	r4, #0
   86d02:	f855 3b04 	ldr.w	r3, [r5], #4
   86d06:	3401      	adds	r4, #1
   86d08:	4798      	blx	r3
   86d0a:	42a6      	cmp	r6, r4
   86d0c:	d1f9      	bne.n	86d02 <__libc_init_array+0xe>
   86d0e:	4e09      	ldr	r6, [pc, #36]	; (86d34 <__libc_init_array+0x40>)
   86d10:	4d09      	ldr	r5, [pc, #36]	; (86d38 <__libc_init_array+0x44>)
   86d12:	f006 ff6d 	bl	8dbf0 <_init>
   86d16:	1b76      	subs	r6, r6, r5
   86d18:	10b6      	asrs	r6, r6, #2
   86d1a:	d006      	beq.n	86d2a <__libc_init_array+0x36>
   86d1c:	2400      	movs	r4, #0
   86d1e:	f855 3b04 	ldr.w	r3, [r5], #4
   86d22:	3401      	adds	r4, #1
   86d24:	4798      	blx	r3
   86d26:	42a6      	cmp	r6, r4
   86d28:	d1f9      	bne.n	86d1e <__libc_init_array+0x2a>
   86d2a:	bd70      	pop	{r4, r5, r6, pc}
   86d2c:	0008dbfc 	.word	0x0008dbfc
   86d30:	0008dbfc 	.word	0x0008dbfc
   86d34:	0008dc04 	.word	0x0008dc04
   86d38:	0008dbfc 	.word	0x0008dbfc

00086d3c <iprintf>:
   86d3c:	b40f      	push	{r0, r1, r2, r3}
   86d3e:	b500      	push	{lr}
   86d40:	4a07      	ldr	r2, [pc, #28]	; (86d60 <iprintf+0x24>)
   86d42:	b083      	sub	sp, #12
   86d44:	ab04      	add	r3, sp, #16
   86d46:	6810      	ldr	r0, [r2, #0]
   86d48:	f853 2b04 	ldr.w	r2, [r3], #4
   86d4c:	6881      	ldr	r1, [r0, #8]
   86d4e:	9301      	str	r3, [sp, #4]
   86d50:	f001 fee2 	bl	88b18 <_vfiprintf_r>
   86d54:	b003      	add	sp, #12
   86d56:	f85d eb04 	ldr.w	lr, [sp], #4
   86d5a:	b004      	add	sp, #16
   86d5c:	4770      	bx	lr
   86d5e:	bf00      	nop
   86d60:	20000b70 	.word	0x20000b70

00086d64 <memcpy>:
   86d64:	4684      	mov	ip, r0
   86d66:	ea41 0300 	orr.w	r3, r1, r0
   86d6a:	f013 0303 	ands.w	r3, r3, #3
   86d6e:	d149      	bne.n	86e04 <memcpy+0xa0>
   86d70:	3a40      	subs	r2, #64	; 0x40
   86d72:	d323      	bcc.n	86dbc <memcpy+0x58>
   86d74:	680b      	ldr	r3, [r1, #0]
   86d76:	6003      	str	r3, [r0, #0]
   86d78:	684b      	ldr	r3, [r1, #4]
   86d7a:	6043      	str	r3, [r0, #4]
   86d7c:	688b      	ldr	r3, [r1, #8]
   86d7e:	6083      	str	r3, [r0, #8]
   86d80:	68cb      	ldr	r3, [r1, #12]
   86d82:	60c3      	str	r3, [r0, #12]
   86d84:	690b      	ldr	r3, [r1, #16]
   86d86:	6103      	str	r3, [r0, #16]
   86d88:	694b      	ldr	r3, [r1, #20]
   86d8a:	6143      	str	r3, [r0, #20]
   86d8c:	698b      	ldr	r3, [r1, #24]
   86d8e:	6183      	str	r3, [r0, #24]
   86d90:	69cb      	ldr	r3, [r1, #28]
   86d92:	61c3      	str	r3, [r0, #28]
   86d94:	6a0b      	ldr	r3, [r1, #32]
   86d96:	6203      	str	r3, [r0, #32]
   86d98:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86d9a:	6243      	str	r3, [r0, #36]	; 0x24
   86d9c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86d9e:	6283      	str	r3, [r0, #40]	; 0x28
   86da0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86da2:	62c3      	str	r3, [r0, #44]	; 0x2c
   86da4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86da6:	6303      	str	r3, [r0, #48]	; 0x30
   86da8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86daa:	6343      	str	r3, [r0, #52]	; 0x34
   86dac:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86dae:	6383      	str	r3, [r0, #56]	; 0x38
   86db0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86db2:	63c3      	str	r3, [r0, #60]	; 0x3c
   86db4:	3040      	adds	r0, #64	; 0x40
   86db6:	3140      	adds	r1, #64	; 0x40
   86db8:	3a40      	subs	r2, #64	; 0x40
   86dba:	d2db      	bcs.n	86d74 <memcpy+0x10>
   86dbc:	3230      	adds	r2, #48	; 0x30
   86dbe:	d30b      	bcc.n	86dd8 <memcpy+0x74>
   86dc0:	680b      	ldr	r3, [r1, #0]
   86dc2:	6003      	str	r3, [r0, #0]
   86dc4:	684b      	ldr	r3, [r1, #4]
   86dc6:	6043      	str	r3, [r0, #4]
   86dc8:	688b      	ldr	r3, [r1, #8]
   86dca:	6083      	str	r3, [r0, #8]
   86dcc:	68cb      	ldr	r3, [r1, #12]
   86dce:	60c3      	str	r3, [r0, #12]
   86dd0:	3010      	adds	r0, #16
   86dd2:	3110      	adds	r1, #16
   86dd4:	3a10      	subs	r2, #16
   86dd6:	d2f3      	bcs.n	86dc0 <memcpy+0x5c>
   86dd8:	320c      	adds	r2, #12
   86dda:	d305      	bcc.n	86de8 <memcpy+0x84>
   86ddc:	f851 3b04 	ldr.w	r3, [r1], #4
   86de0:	f840 3b04 	str.w	r3, [r0], #4
   86de4:	3a04      	subs	r2, #4
   86de6:	d2f9      	bcs.n	86ddc <memcpy+0x78>
   86de8:	3204      	adds	r2, #4
   86dea:	d008      	beq.n	86dfe <memcpy+0x9a>
   86dec:	07d2      	lsls	r2, r2, #31
   86dee:	bf1c      	itt	ne
   86df0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86df4:	f800 3b01 	strbne.w	r3, [r0], #1
   86df8:	d301      	bcc.n	86dfe <memcpy+0x9a>
   86dfa:	880b      	ldrh	r3, [r1, #0]
   86dfc:	8003      	strh	r3, [r0, #0]
   86dfe:	4660      	mov	r0, ip
   86e00:	4770      	bx	lr
   86e02:	bf00      	nop
   86e04:	2a08      	cmp	r2, #8
   86e06:	d313      	bcc.n	86e30 <memcpy+0xcc>
   86e08:	078b      	lsls	r3, r1, #30
   86e0a:	d0b1      	beq.n	86d70 <memcpy+0xc>
   86e0c:	f010 0303 	ands.w	r3, r0, #3
   86e10:	d0ae      	beq.n	86d70 <memcpy+0xc>
   86e12:	f1c3 0304 	rsb	r3, r3, #4
   86e16:	1ad2      	subs	r2, r2, r3
   86e18:	07db      	lsls	r3, r3, #31
   86e1a:	bf1c      	itt	ne
   86e1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86e20:	f800 3b01 	strbne.w	r3, [r0], #1
   86e24:	d3a4      	bcc.n	86d70 <memcpy+0xc>
   86e26:	f831 3b02 	ldrh.w	r3, [r1], #2
   86e2a:	f820 3b02 	strh.w	r3, [r0], #2
   86e2e:	e79f      	b.n	86d70 <memcpy+0xc>
   86e30:	3a04      	subs	r2, #4
   86e32:	d3d9      	bcc.n	86de8 <memcpy+0x84>
   86e34:	3a01      	subs	r2, #1
   86e36:	f811 3b01 	ldrb.w	r3, [r1], #1
   86e3a:	f800 3b01 	strb.w	r3, [r0], #1
   86e3e:	d2f9      	bcs.n	86e34 <memcpy+0xd0>
   86e40:	780b      	ldrb	r3, [r1, #0]
   86e42:	7003      	strb	r3, [r0, #0]
   86e44:	784b      	ldrb	r3, [r1, #1]
   86e46:	7043      	strb	r3, [r0, #1]
   86e48:	788b      	ldrb	r3, [r1, #2]
   86e4a:	7083      	strb	r3, [r0, #2]
   86e4c:	4660      	mov	r0, ip
   86e4e:	4770      	bx	lr

00086e50 <memset>:
   86e50:	0783      	lsls	r3, r0, #30
   86e52:	b530      	push	{r4, r5, lr}
   86e54:	d048      	beq.n	86ee8 <memset+0x98>
   86e56:	1e54      	subs	r4, r2, #1
   86e58:	2a00      	cmp	r2, #0
   86e5a:	d03f      	beq.n	86edc <memset+0x8c>
   86e5c:	4603      	mov	r3, r0
   86e5e:	b2ca      	uxtb	r2, r1
   86e60:	e001      	b.n	86e66 <memset+0x16>
   86e62:	3c01      	subs	r4, #1
   86e64:	d33a      	bcc.n	86edc <memset+0x8c>
   86e66:	f803 2b01 	strb.w	r2, [r3], #1
   86e6a:	079d      	lsls	r5, r3, #30
   86e6c:	d1f9      	bne.n	86e62 <memset+0x12>
   86e6e:	2c03      	cmp	r4, #3
   86e70:	d92d      	bls.n	86ece <memset+0x7e>
   86e72:	b2cd      	uxtb	r5, r1
   86e74:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86e78:	2c0f      	cmp	r4, #15
   86e7a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86e7e:	d936      	bls.n	86eee <memset+0x9e>
   86e80:	f1a4 0210 	sub.w	r2, r4, #16
   86e84:	f022 0c0f 	bic.w	ip, r2, #15
   86e88:	f103 0e20 	add.w	lr, r3, #32
   86e8c:	44e6      	add	lr, ip
   86e8e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   86e92:	f103 0210 	add.w	r2, r3, #16
   86e96:	e942 5504 	strd	r5, r5, [r2, #-16]
   86e9a:	e942 5502 	strd	r5, r5, [r2, #-8]
   86e9e:	3210      	adds	r2, #16
   86ea0:	4572      	cmp	r2, lr
   86ea2:	d1f8      	bne.n	86e96 <memset+0x46>
   86ea4:	f10c 0201 	add.w	r2, ip, #1
   86ea8:	f014 0f0c 	tst.w	r4, #12
   86eac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86eb0:	f004 0c0f 	and.w	ip, r4, #15
   86eb4:	d013      	beq.n	86ede <memset+0x8e>
   86eb6:	f1ac 0304 	sub.w	r3, ip, #4
   86eba:	f023 0303 	bic.w	r3, r3, #3
   86ebe:	3304      	adds	r3, #4
   86ec0:	4413      	add	r3, r2
   86ec2:	f842 5b04 	str.w	r5, [r2], #4
   86ec6:	4293      	cmp	r3, r2
   86ec8:	d1fb      	bne.n	86ec2 <memset+0x72>
   86eca:	f00c 0403 	and.w	r4, ip, #3
   86ece:	b12c      	cbz	r4, 86edc <memset+0x8c>
   86ed0:	b2ca      	uxtb	r2, r1
   86ed2:	441c      	add	r4, r3
   86ed4:	f803 2b01 	strb.w	r2, [r3], #1
   86ed8:	429c      	cmp	r4, r3
   86eda:	d1fb      	bne.n	86ed4 <memset+0x84>
   86edc:	bd30      	pop	{r4, r5, pc}
   86ede:	4664      	mov	r4, ip
   86ee0:	4613      	mov	r3, r2
   86ee2:	2c00      	cmp	r4, #0
   86ee4:	d1f4      	bne.n	86ed0 <memset+0x80>
   86ee6:	e7f9      	b.n	86edc <memset+0x8c>
   86ee8:	4603      	mov	r3, r0
   86eea:	4614      	mov	r4, r2
   86eec:	e7bf      	b.n	86e6e <memset+0x1e>
   86eee:	461a      	mov	r2, r3
   86ef0:	46a4      	mov	ip, r4
   86ef2:	e7e0      	b.n	86eb6 <memset+0x66>

00086ef4 <sprintf>:
   86ef4:	b40e      	push	{r1, r2, r3}
   86ef6:	b530      	push	{r4, r5, lr}
   86ef8:	4604      	mov	r4, r0
   86efa:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   86efe:	b09c      	sub	sp, #112	; 0x70
   86f00:	4a0b      	ldr	r2, [pc, #44]	; (86f30 <sprintf+0x3c>)
   86f02:	ab1f      	add	r3, sp, #124	; 0x7c
   86f04:	490b      	ldr	r1, [pc, #44]	; (86f34 <sprintf+0x40>)
   86f06:	9205      	str	r2, [sp, #20]
   86f08:	f853 2b04 	ldr.w	r2, [r3], #4
   86f0c:	6808      	ldr	r0, [r1, #0]
   86f0e:	a902      	add	r1, sp, #8
   86f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
   86f14:	9507      	str	r5, [sp, #28]
   86f16:	9504      	str	r5, [sp, #16]
   86f18:	9406      	str	r4, [sp, #24]
   86f1a:	f000 f86f 	bl	86ffc <_svfprintf_r>
   86f1e:	2200      	movs	r2, #0
   86f20:	9b02      	ldr	r3, [sp, #8]
   86f22:	701a      	strb	r2, [r3, #0]
   86f24:	b01c      	add	sp, #112	; 0x70
   86f26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86f2a:	b003      	add	sp, #12
   86f2c:	4770      	bx	lr
   86f2e:	bf00      	nop
   86f30:	ffff0208 	.word	0xffff0208
   86f34:	20000b70 	.word	0x20000b70

00086f38 <strlen>:
   86f38:	f020 0103 	bic.w	r1, r0, #3
   86f3c:	f010 0003 	ands.w	r0, r0, #3
   86f40:	f1c0 0000 	rsb	r0, r0, #0
   86f44:	f851 3b04 	ldr.w	r3, [r1], #4
   86f48:	f100 0c04 	add.w	ip, r0, #4
   86f4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86f50:	f06f 0200 	mvn.w	r2, #0
   86f54:	bf1c      	itt	ne
   86f56:	fa22 f20c 	lsrne.w	r2, r2, ip
   86f5a:	4313      	orrne	r3, r2
   86f5c:	f04f 0c01 	mov.w	ip, #1
   86f60:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   86f64:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86f68:	eba3 020c 	sub.w	r2, r3, ip
   86f6c:	ea22 0203 	bic.w	r2, r2, r3
   86f70:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   86f74:	bf04      	itt	eq
   86f76:	f851 3b04 	ldreq.w	r3, [r1], #4
   86f7a:	3004      	addeq	r0, #4
   86f7c:	d0f4      	beq.n	86f68 <strlen+0x30>
   86f7e:	f1c2 0100 	rsb	r1, r2, #0
   86f82:	ea02 0201 	and.w	r2, r2, r1
   86f86:	fab2 f282 	clz	r2, r2
   86f8a:	f1c2 021f 	rsb	r2, r2, #31
   86f8e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   86f92:	4770      	bx	lr

00086f94 <strncpy>:
   86f94:	b530      	push	{r4, r5, lr}
   86f96:	ea40 0401 	orr.w	r4, r0, r1
   86f9a:	07a3      	lsls	r3, r4, #30
   86f9c:	d122      	bne.n	86fe4 <strncpy+0x50>
   86f9e:	2a03      	cmp	r2, #3
   86fa0:	d920      	bls.n	86fe4 <strncpy+0x50>
   86fa2:	460b      	mov	r3, r1
   86fa4:	4684      	mov	ip, r0
   86fa6:	4619      	mov	r1, r3
   86fa8:	f853 5b04 	ldr.w	r5, [r3], #4
   86fac:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86fb0:	ea24 0405 	bic.w	r4, r4, r5
   86fb4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   86fb8:	d115      	bne.n	86fe6 <strncpy+0x52>
   86fba:	3a04      	subs	r2, #4
   86fbc:	2a03      	cmp	r2, #3
   86fbe:	4619      	mov	r1, r3
   86fc0:	f84c 5b04 	str.w	r5, [ip], #4
   86fc4:	d8ef      	bhi.n	86fa6 <strncpy+0x12>
   86fc6:	f101 3eff 	add.w	lr, r1, #4294967295
   86fca:	b152      	cbz	r2, 86fe2 <strncpy+0x4e>
   86fcc:	4663      	mov	r3, ip
   86fce:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   86fd2:	1e54      	subs	r4, r2, #1
   86fd4:	f803 1b01 	strb.w	r1, [r3], #1
   86fd8:	b141      	cbz	r1, 86fec <strncpy+0x58>
   86fda:	4622      	mov	r2, r4
   86fdc:	469c      	mov	ip, r3
   86fde:	2a00      	cmp	r2, #0
   86fe0:	d1f4      	bne.n	86fcc <strncpy+0x38>
   86fe2:	bd30      	pop	{r4, r5, pc}
   86fe4:	4684      	mov	ip, r0
   86fe6:	f101 3eff 	add.w	lr, r1, #4294967295
   86fea:	e7ee      	b.n	86fca <strncpy+0x36>
   86fec:	4462      	add	r2, ip
   86fee:	2c00      	cmp	r4, #0
   86ff0:	d0f7      	beq.n	86fe2 <strncpy+0x4e>
   86ff2:	f803 1b01 	strb.w	r1, [r3], #1
   86ff6:	4293      	cmp	r3, r2
   86ff8:	d1fb      	bne.n	86ff2 <strncpy+0x5e>
   86ffa:	bd30      	pop	{r4, r5, pc}

00086ffc <_svfprintf_r>:
   86ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87000:	b0d5      	sub	sp, #340	; 0x154
   87002:	460c      	mov	r4, r1
   87004:	910c      	str	r1, [sp, #48]	; 0x30
   87006:	4691      	mov	r9, r2
   87008:	930e      	str	r3, [sp, #56]	; 0x38
   8700a:	900a      	str	r0, [sp, #40]	; 0x28
   8700c:	f004 f9ee 	bl	8b3ec <_localeconv_r>
   87010:	6803      	ldr	r3, [r0, #0]
   87012:	4618      	mov	r0, r3
   87014:	9317      	str	r3, [sp, #92]	; 0x5c
   87016:	f7ff ff8f 	bl	86f38 <strlen>
   8701a:	89a3      	ldrh	r3, [r4, #12]
   8701c:	9016      	str	r0, [sp, #88]	; 0x58
   8701e:	0619      	lsls	r1, r3, #24
   87020:	d503      	bpl.n	8702a <_svfprintf_r+0x2e>
   87022:	6923      	ldr	r3, [r4, #16]
   87024:	2b00      	cmp	r3, #0
   87026:	f000 878f 	beq.w	87f48 <_svfprintf_r+0xf4c>
   8702a:	2400      	movs	r4, #0
   8702c:	ab2b      	add	r3, sp, #172	; 0xac
   8702e:	4622      	mov	r2, r4
   87030:	4698      	mov	r8, r3
   87032:	464d      	mov	r5, r9
   87034:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   87038:	9328      	str	r3, [sp, #160]	; 0xa0
   8703a:	9412      	str	r4, [sp, #72]	; 0x48
   8703c:	2300      	movs	r3, #0
   8703e:	2400      	movs	r4, #0
   87040:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   87044:	782b      	ldrb	r3, [r5, #0]
   87046:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   8704a:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   8704e:	9218      	str	r2, [sp, #96]	; 0x60
   87050:	9208      	str	r2, [sp, #32]
   87052:	2b00      	cmp	r3, #0
   87054:	f000 81ce 	beq.w	873f4 <_svfprintf_r+0x3f8>
   87058:	46aa      	mov	sl, r5
   8705a:	e004      	b.n	87066 <_svfprintf_r+0x6a>
   8705c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   87060:	2b00      	cmp	r3, #0
   87062:	f000 8109 	beq.w	87278 <_svfprintf_r+0x27c>
   87066:	2b25      	cmp	r3, #37	; 0x25
   87068:	d1f8      	bne.n	8705c <_svfprintf_r+0x60>
   8706a:	ebba 0605 	subs.w	r6, sl, r5
   8706e:	f040 8107 	bne.w	87280 <_svfprintf_r+0x284>
   87072:	f89a 3000 	ldrb.w	r3, [sl]
   87076:	2b00      	cmp	r3, #0
   87078:	f000 81bc 	beq.w	873f4 <_svfprintf_r+0x3f8>
   8707c:	2300      	movs	r3, #0
   8707e:	f04f 32ff 	mov.w	r2, #4294967295
   87082:	f04f 092b 	mov.w	r9, #43	; 0x2b
   87086:	2420      	movs	r4, #32
   87088:	461f      	mov	r7, r3
   8708a:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8708e:	9207      	str	r2, [sp, #28]
   87090:	f10a 0a01 	add.w	sl, sl, #1
   87094:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   87098:	9309      	str	r3, [sp, #36]	; 0x24
   8709a:	f10a 0a01 	add.w	sl, sl, #1
   8709e:	f1a6 0320 	sub.w	r3, r6, #32
   870a2:	2b5a      	cmp	r3, #90	; 0x5a
   870a4:	f200 8120 	bhi.w	872e8 <_svfprintf_r+0x2ec>
   870a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   870ac:	011e02ca 	.word	0x011e02ca
   870b0:	02c5011e 	.word	0x02c5011e
   870b4:	011e011e 	.word	0x011e011e
   870b8:	02a3011e 	.word	0x02a3011e
   870bc:	011e011e 	.word	0x011e011e
   870c0:	02f3006a 	.word	0x02f3006a
   870c4:	0247011e 	.word	0x0247011e
   870c8:	011e02d9 	.word	0x011e02d9
   870cc:	005b02d4 	.word	0x005b02d4
   870d0:	005b005b 	.word	0x005b005b
   870d4:	005b005b 	.word	0x005b005b
   870d8:	005b005b 	.word	0x005b005b
   870dc:	005b005b 	.word	0x005b005b
   870e0:	011e011e 	.word	0x011e011e
   870e4:	011e011e 	.word	0x011e011e
   870e8:	011e011e 	.word	0x011e011e
   870ec:	01b0011e 	.word	0x01b0011e
   870f0:	020b011e 	.word	0x020b011e
   870f4:	01b0007a 	.word	0x01b0007a
   870f8:	01b001b0 	.word	0x01b001b0
   870fc:	011e011e 	.word	0x011e011e
   87100:	011e011e 	.word	0x011e011e
   87104:	011e029e 	.word	0x011e029e
   87108:	00b6011e 	.word	0x00b6011e
   8710c:	011e011e 	.word	0x011e011e
   87110:	0219011e 	.word	0x0219011e
   87114:	024c011e 	.word	0x024c011e
   87118:	011e011e 	.word	0x011e011e
   8711c:	011e073f 	.word	0x011e073f
   87120:	011e011e 	.word	0x011e011e
   87124:	011e011e 	.word	0x011e011e
   87128:	011e011e 	.word	0x011e011e
   8712c:	01b0011e 	.word	0x01b0011e
   87130:	020b011e 	.word	0x020b011e
   87134:	01b0007c 	.word	0x01b0007c
   87138:	01b001b0 	.word	0x01b001b0
   8713c:	007c0291 	.word	0x007c0291
   87140:	011e0075 	.word	0x011e0075
   87144:	011e0284 	.word	0x011e0284
   87148:	00b80270 	.word	0x00b80270
   8714c:	0075025e 	.word	0x0075025e
   87150:	0219011e 	.word	0x0219011e
   87154:	071c0072 	.word	0x071c0072
   87158:	011e011e 	.word	0x011e011e
   8715c:	011e071f 	.word	0x011e071f
   87160:	0072      	.short	0x0072
   87162:	2200      	movs	r2, #0
   87164:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87168:	f81a 6b01 	ldrb.w	r6, [sl], #1
   8716c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87170:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87174:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87178:	2b09      	cmp	r3, #9
   8717a:	d9f5      	bls.n	87168 <_svfprintf_r+0x16c>
   8717c:	9209      	str	r2, [sp, #36]	; 0x24
   8717e:	e78e      	b.n	8709e <_svfprintf_r+0xa2>
   87180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87182:	f853 2b04 	ldr.w	r2, [r3], #4
   87186:	2a00      	cmp	r2, #0
   87188:	9209      	str	r2, [sp, #36]	; 0x24
   8718a:	930e      	str	r3, [sp, #56]	; 0x38
   8718c:	f2c0 81d2 	blt.w	87534 <_svfprintf_r+0x538>
   87190:	f89a 6000 	ldrb.w	r6, [sl]
   87194:	e781      	b.n	8709a <_svfprintf_r+0x9e>
   87196:	f89a 6000 	ldrb.w	r6, [sl]
   8719a:	f047 0720 	orr.w	r7, r7, #32
   8719e:	e77c      	b.n	8709a <_svfprintf_r+0x9e>
   871a0:	f047 0710 	orr.w	r7, r7, #16
   871a4:	06ba      	lsls	r2, r7, #26
   871a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871a8:	f140 817d 	bpl.w	874a6 <_svfprintf_r+0x4aa>
   871ac:	3307      	adds	r3, #7
   871ae:	f023 0307 	bic.w	r3, r3, #7
   871b2:	461a      	mov	r2, r3
   871b4:	685b      	ldr	r3, [r3, #4]
   871b6:	f852 4b08 	ldr.w	r4, [r2], #8
   871ba:	4699      	mov	r9, r3
   871bc:	920e      	str	r2, [sp, #56]	; 0x38
   871be:	2b00      	cmp	r3, #0
   871c0:	f2c0 857f 	blt.w	87cc2 <_svfprintf_r+0xcc6>
   871c4:	9b07      	ldr	r3, [sp, #28]
   871c6:	3301      	adds	r3, #1
   871c8:	f001 8039 	beq.w	8823e <_svfprintf_r+0x1242>
   871cc:	ea54 0309 	orrs.w	r3, r4, r9
   871d0:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   871d4:	f000 8505 	beq.w	87be2 <_svfprintf_r+0xbe6>
   871d8:	2c0a      	cmp	r4, #10
   871da:	f179 0300 	sbcs.w	r3, r9, #0
   871de:	f080 8793 	bcs.w	88108 <_svfprintf_r+0x110c>
   871e2:	2301      	movs	r3, #1
   871e4:	465f      	mov	r7, fp
   871e6:	3430      	adds	r4, #48	; 0x30
   871e8:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   871ec:	930b      	str	r3, [sp, #44]	; 0x2c
   871ee:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   871f2:	9a07      	ldr	r2, [sp, #28]
   871f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   871f6:	2300      	movs	r3, #0
   871f8:	428a      	cmp	r2, r1
   871fa:	bfb8      	it	lt
   871fc:	460a      	movlt	r2, r1
   871fe:	9206      	str	r2, [sp, #24]
   87200:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87204:	930d      	str	r3, [sp, #52]	; 0x34
   87206:	930f      	str	r3, [sp, #60]	; 0x3c
   87208:	9313      	str	r3, [sp, #76]	; 0x4c
   8720a:	9310      	str	r3, [sp, #64]	; 0x40
   8720c:	2a00      	cmp	r2, #0
   8720e:	d07c      	beq.n	8730a <_svfprintf_r+0x30e>
   87210:	9b06      	ldr	r3, [sp, #24]
   87212:	3301      	adds	r3, #1
   87214:	9306      	str	r3, [sp, #24]
   87216:	e078      	b.n	8730a <_svfprintf_r+0x30e>
   87218:	f047 0710 	orr.w	r7, r7, #16
   8721c:	f017 0920 	ands.w	r9, r7, #32
   87220:	f000 8132 	beq.w	87488 <_svfprintf_r+0x48c>
   87224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87226:	3307      	adds	r3, #7
   87228:	f023 0307 	bic.w	r3, r3, #7
   8722c:	f8d3 9004 	ldr.w	r9, [r3, #4]
   87230:	f853 4b08 	ldr.w	r4, [r3], #8
   87234:	930e      	str	r3, [sp, #56]	; 0x38
   87236:	2300      	movs	r3, #0
   87238:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   8723c:	2200      	movs	r2, #0
   8723e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87242:	9a07      	ldr	r2, [sp, #28]
   87244:	1c51      	adds	r1, r2, #1
   87246:	f000 822a 	beq.w	8769e <_svfprintf_r+0x6a2>
   8724a:	ea54 0109 	orrs.w	r1, r4, r9
   8724e:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   87252:	f040 8223 	bne.w	8769c <_svfprintf_r+0x6a0>
   87256:	2a00      	cmp	r2, #0
   87258:	f041 802b 	bne.w	882b2 <_svfprintf_r+0x12b6>
   8725c:	2b00      	cmp	r3, #0
   8725e:	f040 84c5 	bne.w	87bec <_svfprintf_r+0xbf0>
   87262:	f01b 0301 	ands.w	r3, fp, #1
   87266:	930b      	str	r3, [sp, #44]	; 0x2c
   87268:	f000 8554 	beq.w	87d14 <_svfprintf_r+0xd18>
   8726c:	2330      	movs	r3, #48	; 0x30
   8726e:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   87272:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   87276:	e7bc      	b.n	871f2 <_svfprintf_r+0x1f6>
   87278:	ebba 0605 	subs.w	r6, sl, r5
   8727c:	f000 80ba 	beq.w	873f4 <_svfprintf_r+0x3f8>
   87280:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   87282:	e9c8 5600 	strd	r5, r6, [r8]
   87286:	4433      	add	r3, r6
   87288:	932a      	str	r3, [sp, #168]	; 0xa8
   8728a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8728c:	3301      	adds	r3, #1
   8728e:	2b07      	cmp	r3, #7
   87290:	9329      	str	r3, [sp, #164]	; 0xa4
   87292:	dc05      	bgt.n	872a0 <_svfprintf_r+0x2a4>
   87294:	f108 0808 	add.w	r8, r8, #8
   87298:	9b08      	ldr	r3, [sp, #32]
   8729a:	4433      	add	r3, r6
   8729c:	9308      	str	r3, [sp, #32]
   8729e:	e6e8      	b.n	87072 <_svfprintf_r+0x76>
   872a0:	990c      	ldr	r1, [sp, #48]	; 0x30
   872a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   872a4:	aa28      	add	r2, sp, #160	; 0xa0
   872a6:	f005 fad1 	bl	8c84c <__ssprint_r>
   872aa:	b980      	cbnz	r0, 872ce <_svfprintf_r+0x2d2>
   872ac:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   872b0:	e7f2      	b.n	87298 <_svfprintf_r+0x29c>
   872b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   872b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   872b6:	aa28      	add	r2, sp, #160	; 0xa0
   872b8:	f005 fac8 	bl	8c84c <__ssprint_r>
   872bc:	2800      	cmp	r0, #0
   872be:	f000 808a 	beq.w	873d6 <_svfprintf_r+0x3da>
   872c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   872c4:	b11b      	cbz	r3, 872ce <_svfprintf_r+0x2d2>
   872c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   872c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   872ca:	f003 fded 	bl	8aea8 <_free_r>
   872ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872d0:	899b      	ldrh	r3, [r3, #12]
   872d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   872d6:	9b08      	ldr	r3, [sp, #32]
   872d8:	bf18      	it	ne
   872da:	f04f 33ff 	movne.w	r3, #4294967295
   872de:	9308      	str	r3, [sp, #32]
   872e0:	9808      	ldr	r0, [sp, #32]
   872e2:	b055      	add	sp, #340	; 0x154
   872e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872e8:	2e00      	cmp	r6, #0
   872ea:	f000 8083 	beq.w	873f4 <_svfprintf_r+0x3f8>
   872ee:	2301      	movs	r3, #1
   872f0:	2200      	movs	r2, #0
   872f2:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   872f6:	9306      	str	r3, [sp, #24]
   872f8:	ad3b      	add	r5, sp, #236	; 0xec
   872fa:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   872fe:	930b      	str	r3, [sp, #44]	; 0x2c
   87300:	920d      	str	r2, [sp, #52]	; 0x34
   87302:	9207      	str	r2, [sp, #28]
   87304:	920f      	str	r2, [sp, #60]	; 0x3c
   87306:	9213      	str	r2, [sp, #76]	; 0x4c
   87308:	9210      	str	r2, [sp, #64]	; 0x40
   8730a:	f017 0302 	ands.w	r3, r7, #2
   8730e:	d002      	beq.n	87316 <_svfprintf_r+0x31a>
   87310:	9906      	ldr	r1, [sp, #24]
   87312:	3102      	adds	r1, #2
   87314:	9106      	str	r1, [sp, #24]
   87316:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   8731a:	d107      	bne.n	8732c <_svfprintf_r+0x330>
   8731c:	9909      	ldr	r1, [sp, #36]	; 0x24
   8731e:	9806      	ldr	r0, [sp, #24]
   87320:	eba1 0900 	sub.w	r9, r1, r0
   87324:	f1b9 0f00 	cmp.w	r9, #0
   87328:	f300 8336 	bgt.w	87998 <_svfprintf_r+0x99c>
   8732c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8732e:	b182      	cbz	r2, 87352 <_svfprintf_r+0x356>
   87330:	2201      	movs	r2, #1
   87332:	f8c8 2004 	str.w	r2, [r8, #4]
   87336:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87338:	3401      	adds	r4, #1
   8733a:	3201      	adds	r2, #1
   8733c:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   87340:	2a07      	cmp	r2, #7
   87342:	942a      	str	r4, [sp, #168]	; 0xa8
   87344:	9229      	str	r2, [sp, #164]	; 0xa4
   87346:	f8c8 1000 	str.w	r1, [r8]
   8734a:	f300 8369 	bgt.w	87a20 <_svfprintf_r+0xa24>
   8734e:	f108 0808 	add.w	r8, r8, #8
   87352:	b17b      	cbz	r3, 87374 <_svfprintf_r+0x378>
   87354:	2302      	movs	r3, #2
   87356:	f8c8 3004 	str.w	r3, [r8, #4]
   8735a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8735c:	3402      	adds	r4, #2
   8735e:	3301      	adds	r3, #1
   87360:	aa21      	add	r2, sp, #132	; 0x84
   87362:	2b07      	cmp	r3, #7
   87364:	942a      	str	r4, [sp, #168]	; 0xa8
   87366:	9329      	str	r3, [sp, #164]	; 0xa4
   87368:	f8c8 2000 	str.w	r2, [r8]
   8736c:	f300 836c 	bgt.w	87a48 <_svfprintf_r+0xa4c>
   87370:	f108 0808 	add.w	r8, r8, #8
   87374:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   87378:	f000 822e 	beq.w	877d8 <_svfprintf_r+0x7dc>
   8737c:	9b07      	ldr	r3, [sp, #28]
   8737e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87380:	eba3 0b02 	sub.w	fp, r3, r2
   87384:	f1bb 0f00 	cmp.w	fp, #0
   87388:	f300 8271 	bgt.w	8786e <_svfprintf_r+0x872>
   8738c:	05fb      	lsls	r3, r7, #23
   8738e:	f100 81c5 	bmi.w	8771c <_svfprintf_r+0x720>
   87392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87394:	f8c8 5000 	str.w	r5, [r8]
   87398:	441c      	add	r4, r3
   8739a:	f8c8 3004 	str.w	r3, [r8, #4]
   8739e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   873a0:	942a      	str	r4, [sp, #168]	; 0xa8
   873a2:	3301      	adds	r3, #1
   873a4:	2b07      	cmp	r3, #7
   873a6:	9329      	str	r3, [sp, #164]	; 0xa4
   873a8:	f300 82ea 	bgt.w	87980 <_svfprintf_r+0x984>
   873ac:	f108 0808 	add.w	r8, r8, #8
   873b0:	077b      	lsls	r3, r7, #29
   873b2:	d505      	bpl.n	873c0 <_svfprintf_r+0x3c4>
   873b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   873b6:	9a06      	ldr	r2, [sp, #24]
   873b8:	1a9d      	subs	r5, r3, r2
   873ba:	2d00      	cmp	r5, #0
   873bc:	f300 8350 	bgt.w	87a60 <_svfprintf_r+0xa64>
   873c0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   873c4:	9906      	ldr	r1, [sp, #24]
   873c6:	428a      	cmp	r2, r1
   873c8:	bfac      	ite	ge
   873ca:	189b      	addge	r3, r3, r2
   873cc:	185b      	addlt	r3, r3, r1
   873ce:	9308      	str	r3, [sp, #32]
   873d0:	2c00      	cmp	r4, #0
   873d2:	f47f af6e 	bne.w	872b2 <_svfprintf_r+0x2b6>
   873d6:	2300      	movs	r3, #0
   873d8:	9329      	str	r3, [sp, #164]	; 0xa4
   873da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   873dc:	b11b      	cbz	r3, 873e6 <_svfprintf_r+0x3ea>
   873de:	990d      	ldr	r1, [sp, #52]	; 0x34
   873e0:	980a      	ldr	r0, [sp, #40]	; 0x28
   873e2:	f003 fd61 	bl	8aea8 <_free_r>
   873e6:	4655      	mov	r5, sl
   873e8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   873ec:	782b      	ldrb	r3, [r5, #0]
   873ee:	2b00      	cmp	r3, #0
   873f0:	f47f ae32 	bne.w	87058 <_svfprintf_r+0x5c>
   873f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   873f6:	2b00      	cmp	r3, #0
   873f8:	f43f af69 	beq.w	872ce <_svfprintf_r+0x2d2>
   873fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   873fe:	980a      	ldr	r0, [sp, #40]	; 0x28
   87400:	4621      	mov	r1, r4
   87402:	aa28      	add	r2, sp, #160	; 0xa0
   87404:	f005 fa22 	bl	8c84c <__ssprint_r>
   87408:	89a3      	ldrh	r3, [r4, #12]
   8740a:	e762      	b.n	872d2 <_svfprintf_r+0x2d6>
   8740c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8740e:	3307      	adds	r3, #7
   87410:	f023 0207 	bic.w	r2, r3, #7
   87414:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   87418:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   8741c:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   87420:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87424:	4699      	mov	r9, r3
   87426:	4618      	mov	r0, r3
   87428:	920e      	str	r2, [sp, #56]	; 0x38
   8742a:	4621      	mov	r1, r4
   8742c:	f04f 32ff 	mov.w	r2, #4294967295
   87430:	4bb6      	ldr	r3, [pc, #728]	; (8770c <_svfprintf_r+0x710>)
   87432:	f006 f94b 	bl	8d6cc <__aeabi_dcmpun>
   87436:	2800      	cmp	r0, #0
   87438:	f040 8496 	bne.w	87d68 <_svfprintf_r+0xd6c>
   8743c:	4648      	mov	r0, r9
   8743e:	4621      	mov	r1, r4
   87440:	f04f 32ff 	mov.w	r2, #4294967295
   87444:	4bb1      	ldr	r3, [pc, #708]	; (8770c <_svfprintf_r+0x710>)
   87446:	f006 f923 	bl	8d690 <__aeabi_dcmple>
   8744a:	2800      	cmp	r0, #0
   8744c:	f040 848c 	bne.w	87d68 <_svfprintf_r+0xd6c>
   87450:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87454:	2200      	movs	r2, #0
   87456:	2300      	movs	r3, #0
   87458:	f006 f910 	bl	8d67c <__aeabi_dcmplt>
   8745c:	2800      	cmp	r0, #0
   8745e:	f040 87a6 	bne.w	883ae <_svfprintf_r+0x13b2>
   87462:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87466:	2100      	movs	r1, #0
   87468:	2003      	movs	r0, #3
   8746a:	4da9      	ldr	r5, [pc, #676]	; (87710 <_svfprintf_r+0x714>)
   8746c:	4ba9      	ldr	r3, [pc, #676]	; (87714 <_svfprintf_r+0x718>)
   8746e:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   87472:	910d      	str	r1, [sp, #52]	; 0x34
   87474:	9006      	str	r0, [sp, #24]
   87476:	2e47      	cmp	r6, #71	; 0x47
   87478:	bfc8      	it	gt
   8747a:	461d      	movgt	r5, r3
   8747c:	9107      	str	r1, [sp, #28]
   8747e:	900b      	str	r0, [sp, #44]	; 0x2c
   87480:	910f      	str	r1, [sp, #60]	; 0x3c
   87482:	9113      	str	r1, [sp, #76]	; 0x4c
   87484:	9110      	str	r1, [sp, #64]	; 0x40
   87486:	e6c1      	b.n	8720c <_svfprintf_r+0x210>
   87488:	f017 0310 	ands.w	r3, r7, #16
   8748c:	f040 8462 	bne.w	87d54 <_svfprintf_r+0xd58>
   87490:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   87494:	f000 877b 	beq.w	8838e <_svfprintf_r+0x1392>
   87498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8749a:	4699      	mov	r9, r3
   8749c:	f852 4b04 	ldr.w	r4, [r2], #4
   874a0:	920e      	str	r2, [sp, #56]	; 0x38
   874a2:	b2a4      	uxth	r4, r4
   874a4:	e6c7      	b.n	87236 <_svfprintf_r+0x23a>
   874a6:	f853 4b04 	ldr.w	r4, [r3], #4
   874aa:	930e      	str	r3, [sp, #56]	; 0x38
   874ac:	06fb      	lsls	r3, r7, #27
   874ae:	f100 8441 	bmi.w	87d34 <_svfprintf_r+0xd38>
   874b2:	067d      	lsls	r5, r7, #25
   874b4:	f140 843b 	bpl.w	87d2e <_svfprintf_r+0xd32>
   874b8:	f344 39c0 	sbfx	r9, r4, #15, #1
   874bc:	464b      	mov	r3, r9
   874be:	b224      	sxth	r4, r4
   874c0:	e67d      	b.n	871be <_svfprintf_r+0x1c2>
   874c2:	2001      	movs	r0, #1
   874c4:	2200      	movs	r2, #0
   874c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874c8:	9006      	str	r0, [sp, #24]
   874ca:	f853 1b04 	ldr.w	r1, [r3], #4
   874ce:	ad3b      	add	r5, sp, #236	; 0xec
   874d0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   874d4:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   874d8:	930e      	str	r3, [sp, #56]	; 0x38
   874da:	900b      	str	r0, [sp, #44]	; 0x2c
   874dc:	e710      	b.n	87300 <_svfprintf_r+0x304>
   874de:	f04f 0900 	mov.w	r9, #0
   874e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   874e4:	9b07      	ldr	r3, [sp, #28]
   874e6:	f854 5b04 	ldr.w	r5, [r4], #4
   874ea:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   874ee:	2d00      	cmp	r5, #0
   874f0:	f000 86ee 	beq.w	882d0 <_svfprintf_r+0x12d4>
   874f4:	1c5a      	adds	r2, r3, #1
   874f6:	f000 8560 	beq.w	87fba <_svfprintf_r+0xfbe>
   874fa:	461a      	mov	r2, r3
   874fc:	4649      	mov	r1, r9
   874fe:	4628      	mov	r0, r5
   87500:	f004 fab2 	bl	8ba68 <memchr>
   87504:	900d      	str	r0, [sp, #52]	; 0x34
   87506:	2800      	cmp	r0, #0
   87508:	f001 809e 	beq.w	88648 <_svfprintf_r+0x164c>
   8750c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8750e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87512:	1b5b      	subs	r3, r3, r5
   87514:	930b      	str	r3, [sp, #44]	; 0x2c
   87516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8751a:	f8cd 901c 	str.w	r9, [sp, #28]
   8751e:	940e      	str	r4, [sp, #56]	; 0x38
   87520:	9306      	str	r3, [sp, #24]
   87522:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   87526:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8752a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8752e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   87532:	e66b      	b.n	8720c <_svfprintf_r+0x210>
   87534:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87536:	425b      	negs	r3, r3
   87538:	9309      	str	r3, [sp, #36]	; 0x24
   8753a:	f89a 6000 	ldrb.w	r6, [sl]
   8753e:	f047 0704 	orr.w	r7, r7, #4
   87542:	e5aa      	b.n	8709a <_svfprintf_r+0x9e>
   87544:	f047 0b10 	orr.w	fp, r7, #16
   87548:	f01b 0920 	ands.w	r9, fp, #32
   8754c:	f000 83aa 	beq.w	87ca4 <_svfprintf_r+0xca8>
   87550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87552:	3307      	adds	r3, #7
   87554:	f023 0307 	bic.w	r3, r3, #7
   87558:	461a      	mov	r2, r3
   8755a:	f852 4b08 	ldr.w	r4, [r2], #8
   8755e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   87562:	920e      	str	r2, [sp, #56]	; 0x38
   87564:	2301      	movs	r3, #1
   87566:	e669      	b.n	8723c <_svfprintf_r+0x240>
   87568:	2230      	movs	r2, #48	; 0x30
   8756a:	2678      	movs	r6, #120	; 0x78
   8756c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8756e:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   87572:	f853 4b04 	ldr.w	r4, [r3], #4
   87576:	4a68      	ldr	r2, [pc, #416]	; (87718 <_svfprintf_r+0x71c>)
   87578:	930e      	str	r3, [sp, #56]	; 0x38
   8757a:	f04f 0900 	mov.w	r9, #0
   8757e:	2302      	movs	r3, #2
   87580:	f047 0b02 	orr.w	fp, r7, #2
   87584:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   87588:	9218      	str	r2, [sp, #96]	; 0x60
   8758a:	e657      	b.n	8723c <_svfprintf_r+0x240>
   8758c:	06bd      	lsls	r5, r7, #26
   8758e:	f100 83d6 	bmi.w	87d3e <_svfprintf_r+0xd42>
   87592:	06fc      	lsls	r4, r7, #27
   87594:	f100 8693 	bmi.w	882be <_svfprintf_r+0x12c2>
   87598:	0678      	lsls	r0, r7, #25
   8759a:	f100 875d 	bmi.w	88458 <_svfprintf_r+0x145c>
   8759e:	05b9      	lsls	r1, r7, #22
   875a0:	f140 868d 	bpl.w	882be <_svfprintf_r+0x12c2>
   875a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875a6:	9908      	ldr	r1, [sp, #32]
   875a8:	f853 2b04 	ldr.w	r2, [r3], #4
   875ac:	4655      	mov	r5, sl
   875ae:	7011      	strb	r1, [r2, #0]
   875b0:	930e      	str	r3, [sp, #56]	; 0x38
   875b2:	e71b      	b.n	873ec <_svfprintf_r+0x3f0>
   875b4:	f89a 6000 	ldrb.w	r6, [sl]
   875b8:	2e6c      	cmp	r6, #108	; 0x6c
   875ba:	bf03      	ittte	eq
   875bc:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   875c0:	f047 0720 	orreq.w	r7, r7, #32
   875c4:	f10a 0a01 	addeq.w	sl, sl, #1
   875c8:	f047 0710 	orrne.w	r7, r7, #16
   875cc:	e565      	b.n	8709a <_svfprintf_r+0x9e>
   875ce:	f89a 6000 	ldrb.w	r6, [sl]
   875d2:	2e68      	cmp	r6, #104	; 0x68
   875d4:	bf03      	ittte	eq
   875d6:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   875da:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   875de:	f10a 0a01 	addeq.w	sl, sl, #1
   875e2:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   875e6:	e558      	b.n	8709a <_svfprintf_r+0x9e>
   875e8:	f89a 6000 	ldrb.w	r6, [sl]
   875ec:	f047 0708 	orr.w	r7, r7, #8
   875f0:	e553      	b.n	8709a <_svfprintf_r+0x9e>
   875f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   875f4:	4630      	mov	r0, r6
   875f6:	f003 fef9 	bl	8b3ec <_localeconv_r>
   875fa:	6843      	ldr	r3, [r0, #4]
   875fc:	4618      	mov	r0, r3
   875fe:	931b      	str	r3, [sp, #108]	; 0x6c
   87600:	f7ff fc9a 	bl	86f38 <strlen>
   87604:	4603      	mov	r3, r0
   87606:	4630      	mov	r0, r6
   87608:	931c      	str	r3, [sp, #112]	; 0x70
   8760a:	461e      	mov	r6, r3
   8760c:	f003 feee 	bl	8b3ec <_localeconv_r>
   87610:	6883      	ldr	r3, [r0, #8]
   87612:	9319      	str	r3, [sp, #100]	; 0x64
   87614:	2e00      	cmp	r6, #0
   87616:	f43f adbb 	beq.w	87190 <_svfprintf_r+0x194>
   8761a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8761c:	2b00      	cmp	r3, #0
   8761e:	f43f adb7 	beq.w	87190 <_svfprintf_r+0x194>
   87622:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87624:	781b      	ldrb	r3, [r3, #0]
   87626:	2b00      	cmp	r3, #0
   87628:	f43f adb2 	beq.w	87190 <_svfprintf_r+0x194>
   8762c:	f89a 6000 	ldrb.w	r6, [sl]
   87630:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   87634:	e531      	b.n	8709a <_svfprintf_r+0x9e>
   87636:	f89a 6000 	ldrb.w	r6, [sl]
   8763a:	f047 0701 	orr.w	r7, r7, #1
   8763e:	e52c      	b.n	8709a <_svfprintf_r+0x9e>
   87640:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   87644:	2b00      	cmp	r3, #0
   87646:	f47f ada3 	bne.w	87190 <_svfprintf_r+0x194>
   8764a:	f89a 6000 	ldrb.w	r6, [sl]
   8764e:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   87652:	e522      	b.n	8709a <_svfprintf_r+0x9e>
   87654:	f89a 6000 	ldrb.w	r6, [sl]
   87658:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8765c:	e51d      	b.n	8709a <_svfprintf_r+0x9e>
   8765e:	4652      	mov	r2, sl
   87660:	f812 6b01 	ldrb.w	r6, [r2], #1
   87664:	2e2a      	cmp	r6, #42	; 0x2a
   87666:	f001 81eb 	beq.w	88a40 <_svfprintf_r+0x1a44>
   8766a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8766e:	2b09      	cmp	r3, #9
   87670:	4692      	mov	sl, r2
   87672:	bf98      	it	ls
   87674:	2200      	movls	r2, #0
   87676:	f201 8003 	bhi.w	88680 <_svfprintf_r+0x1684>
   8767a:	f81a 6b01 	ldrb.w	r6, [sl], #1
   8767e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87682:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87686:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8768a:	2b09      	cmp	r3, #9
   8768c:	d9f5      	bls.n	8767a <_svfprintf_r+0x67e>
   8768e:	9207      	str	r2, [sp, #28]
   87690:	e505      	b.n	8709e <_svfprintf_r+0xa2>
   87692:	f89a 6000 	ldrb.w	r6, [sl]
   87696:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   8769a:	e4fe      	b.n	8709a <_svfprintf_r+0x9e>
   8769c:	46bb      	mov	fp, r7
   8769e:	2b01      	cmp	r3, #1
   876a0:	f43f ad9a 	beq.w	871d8 <_svfprintf_r+0x1dc>
   876a4:	2b02      	cmp	r3, #2
   876a6:	ad54      	add	r5, sp, #336	; 0x150
   876a8:	d112      	bne.n	876d0 <_svfprintf_r+0x6d4>
   876aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   876ac:	f004 030f 	and.w	r3, r4, #15
   876b0:	5cd3      	ldrb	r3, [r2, r3]
   876b2:	0924      	lsrs	r4, r4, #4
   876b4:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   876b8:	ea4f 1919 	mov.w	r9, r9, lsr #4
   876bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
   876c0:	ea54 0309 	orrs.w	r3, r4, r9
   876c4:	d1f2      	bne.n	876ac <_svfprintf_r+0x6b0>
   876c6:	ab54      	add	r3, sp, #336	; 0x150
   876c8:	1b5b      	subs	r3, r3, r5
   876ca:	465f      	mov	r7, fp
   876cc:	930b      	str	r3, [sp, #44]	; 0x2c
   876ce:	e590      	b.n	871f2 <_svfprintf_r+0x1f6>
   876d0:	f004 0307 	and.w	r3, r4, #7
   876d4:	08e4      	lsrs	r4, r4, #3
   876d6:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   876da:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   876de:	3330      	adds	r3, #48	; 0x30
   876e0:	ea54 0109 	orrs.w	r1, r4, r9
   876e4:	462a      	mov	r2, r5
   876e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
   876ea:	d1f1      	bne.n	876d0 <_svfprintf_r+0x6d4>
   876ec:	f01b 0f01 	tst.w	fp, #1
   876f0:	d0e9      	beq.n	876c6 <_svfprintf_r+0x6ca>
   876f2:	2b30      	cmp	r3, #48	; 0x30
   876f4:	d0e7      	beq.n	876c6 <_svfprintf_r+0x6ca>
   876f6:	2330      	movs	r3, #48	; 0x30
   876f8:	3a02      	subs	r2, #2
   876fa:	f805 3c01 	strb.w	r3, [r5, #-1]
   876fe:	ab54      	add	r3, sp, #336	; 0x150
   87700:	1a9b      	subs	r3, r3, r2
   87702:	465f      	mov	r7, fp
   87704:	4615      	mov	r5, r2
   87706:	930b      	str	r3, [sp, #44]	; 0x2c
   87708:	e573      	b.n	871f2 <_svfprintf_r+0x1f6>
   8770a:	bf00      	nop
   8770c:	7fefffff 	.word	0x7fefffff
   87710:	0008d7f8 	.word	0x0008d7f8
   87714:	0008d7fc 	.word	0x0008d7fc
   87718:	0008d808 	.word	0x0008d808
   8771c:	2e65      	cmp	r6, #101	; 0x65
   8771e:	f340 80e9 	ble.w	878f4 <_svfprintf_r+0x8f8>
   87722:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87726:	2200      	movs	r2, #0
   87728:	2300      	movs	r3, #0
   8772a:	f005 ff9d 	bl	8d668 <__aeabi_dcmpeq>
   8772e:	2800      	cmp	r0, #0
   87730:	f000 81d2 	beq.w	87ad8 <_svfprintf_r+0xadc>
   87734:	2301      	movs	r3, #1
   87736:	f8c8 3004 	str.w	r3, [r8, #4]
   8773a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8773c:	4abf      	ldr	r2, [pc, #764]	; (87a3c <_svfprintf_r+0xa40>)
   8773e:	3301      	adds	r3, #1
   87740:	3401      	adds	r4, #1
   87742:	2b07      	cmp	r3, #7
   87744:	942a      	str	r4, [sp, #168]	; 0xa8
   87746:	9329      	str	r3, [sp, #164]	; 0xa4
   87748:	f8c8 2000 	str.w	r2, [r8]
   8774c:	f300 857a 	bgt.w	88244 <_svfprintf_r+0x1248>
   87750:	f108 0808 	add.w	r8, r8, #8
   87754:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87756:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87758:	4293      	cmp	r3, r2
   8775a:	f280 82d7 	bge.w	87d0c <_svfprintf_r+0xd10>
   8775e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87760:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87762:	441c      	add	r4, r3
   87764:	e9c8 2300 	strd	r2, r3, [r8]
   87768:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8776a:	942a      	str	r4, [sp, #168]	; 0xa8
   8776c:	3301      	adds	r3, #1
   8776e:	2b07      	cmp	r3, #7
   87770:	9329      	str	r3, [sp, #164]	; 0xa4
   87772:	f300 83dd 	bgt.w	87f30 <_svfprintf_r+0xf34>
   87776:	f108 0808 	add.w	r8, r8, #8
   8777a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8777c:	1e5d      	subs	r5, r3, #1
   8777e:	2d00      	cmp	r5, #0
   87780:	f77f ae16 	ble.w	873b0 <_svfprintf_r+0x3b4>
   87784:	2d10      	cmp	r5, #16
   87786:	f341 8141 	ble.w	88a0c <_svfprintf_r+0x1a10>
   8778a:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 87a40 <_svfprintf_r+0xa44>
   8778e:	4622      	mov	r2, r4
   87790:	4649      	mov	r1, r9
   87792:	2610      	movs	r6, #16
   87794:	46b9      	mov	r9, r7
   87796:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87798:	460f      	mov	r7, r1
   8779a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8779e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   877a0:	e005      	b.n	877ae <_svfprintf_r+0x7b2>
   877a2:	f108 0808 	add.w	r8, r8, #8
   877a6:	3d10      	subs	r5, #16
   877a8:	2d10      	cmp	r5, #16
   877aa:	f340 8558 	ble.w	8825e <_svfprintf_r+0x1262>
   877ae:	3301      	adds	r3, #1
   877b0:	3210      	adds	r2, #16
   877b2:	2b07      	cmp	r3, #7
   877b4:	e9c8 7600 	strd	r7, r6, [r8]
   877b8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   877bc:	ddf1      	ble.n	877a2 <_svfprintf_r+0x7a6>
   877be:	4621      	mov	r1, r4
   877c0:	4658      	mov	r0, fp
   877c2:	aa28      	add	r2, sp, #160	; 0xa0
   877c4:	f005 f842 	bl	8c84c <__ssprint_r>
   877c8:	2800      	cmp	r0, #0
   877ca:	f47f ad7a 	bne.w	872c2 <_svfprintf_r+0x2c6>
   877ce:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   877d2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   877d6:	e7e6      	b.n	877a6 <_svfprintf_r+0x7aa>
   877d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   877da:	9a06      	ldr	r2, [sp, #24]
   877dc:	eba3 0b02 	sub.w	fp, r3, r2
   877e0:	f1bb 0f00 	cmp.w	fp, #0
   877e4:	f77f adca 	ble.w	8737c <_svfprintf_r+0x380>
   877e8:	f1bb 0f10 	cmp.w	fp, #16
   877ec:	f341 8005 	ble.w	887fa <_svfprintf_r+0x17fe>
   877f0:	f8df 924c 	ldr.w	r9, [pc, #588]	; 87a40 <_svfprintf_r+0xa44>
   877f4:	4641      	mov	r1, r8
   877f6:	4620      	mov	r0, r4
   877f8:	46a8      	mov	r8, r5
   877fa:	464c      	mov	r4, r9
   877fc:	2310      	movs	r3, #16
   877fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87800:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87802:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87806:	e006      	b.n	87816 <_svfprintf_r+0x81a>
   87808:	f1ab 0b10 	sub.w	fp, fp, #16
   8780c:	f1bb 0f10 	cmp.w	fp, #16
   87810:	f101 0108 	add.w	r1, r1, #8
   87814:	dd19      	ble.n	8784a <_svfprintf_r+0x84e>
   87816:	3201      	adds	r2, #1
   87818:	3010      	adds	r0, #16
   8781a:	2a07      	cmp	r2, #7
   8781c:	e9c1 4300 	strd	r4, r3, [r1]
   87820:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   87824:	ddf0      	ble.n	87808 <_svfprintf_r+0x80c>
   87826:	4629      	mov	r1, r5
   87828:	4648      	mov	r0, r9
   8782a:	aa28      	add	r2, sp, #160	; 0xa0
   8782c:	f005 f80e 	bl	8c84c <__ssprint_r>
   87830:	2800      	cmp	r0, #0
   87832:	f47f ad46 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87836:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   8783a:	f1ab 0b10 	sub.w	fp, fp, #16
   8783e:	f1bb 0f10 	cmp.w	fp, #16
   87842:	f04f 0310 	mov.w	r3, #16
   87846:	a92b      	add	r1, sp, #172	; 0xac
   87848:	dce5      	bgt.n	87816 <_svfprintf_r+0x81a>
   8784a:	4645      	mov	r5, r8
   8784c:	46a1      	mov	r9, r4
   8784e:	4688      	mov	r8, r1
   87850:	4604      	mov	r4, r0
   87852:	3201      	adds	r2, #1
   87854:	445c      	add	r4, fp
   87856:	2a07      	cmp	r2, #7
   87858:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   8785c:	f8c8 9000 	str.w	r9, [r8]
   87860:	f8c8 b004 	str.w	fp, [r8, #4]
   87864:	f300 8518 	bgt.w	88298 <_svfprintf_r+0x129c>
   87868:	f108 0808 	add.w	r8, r8, #8
   8786c:	e586      	b.n	8737c <_svfprintf_r+0x380>
   8786e:	f1bb 0f10 	cmp.w	fp, #16
   87872:	f340 8597 	ble.w	883a4 <_svfprintf_r+0x13a8>
   87876:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 87a40 <_svfprintf_r+0xa44>
   8787a:	4641      	mov	r1, r8
   8787c:	4620      	mov	r0, r4
   8787e:	46a8      	mov	r8, r5
   87880:	464c      	mov	r4, r9
   87882:	2310      	movs	r3, #16
   87884:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87888:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8788c:	e006      	b.n	8789c <_svfprintf_r+0x8a0>
   8788e:	f1ab 0b10 	sub.w	fp, fp, #16
   87892:	f1bb 0f10 	cmp.w	fp, #16
   87896:	f101 0108 	add.w	r1, r1, #8
   8789a:	dd19      	ble.n	878d0 <_svfprintf_r+0x8d4>
   8789c:	3201      	adds	r2, #1
   8789e:	3010      	adds	r0, #16
   878a0:	2a07      	cmp	r2, #7
   878a2:	e9c1 4300 	strd	r4, r3, [r1]
   878a6:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   878aa:	ddf0      	ble.n	8788e <_svfprintf_r+0x892>
   878ac:	4629      	mov	r1, r5
   878ae:	4648      	mov	r0, r9
   878b0:	aa28      	add	r2, sp, #160	; 0xa0
   878b2:	f004 ffcb 	bl	8c84c <__ssprint_r>
   878b6:	2800      	cmp	r0, #0
   878b8:	f47f ad03 	bne.w	872c2 <_svfprintf_r+0x2c6>
   878bc:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   878c0:	f1ab 0b10 	sub.w	fp, fp, #16
   878c4:	f1bb 0f10 	cmp.w	fp, #16
   878c8:	f04f 0310 	mov.w	r3, #16
   878cc:	a92b      	add	r1, sp, #172	; 0xac
   878ce:	dce5      	bgt.n	8789c <_svfprintf_r+0x8a0>
   878d0:	4645      	mov	r5, r8
   878d2:	46a1      	mov	r9, r4
   878d4:	4688      	mov	r8, r1
   878d6:	4604      	mov	r4, r0
   878d8:	3201      	adds	r2, #1
   878da:	445c      	add	r4, fp
   878dc:	2a07      	cmp	r2, #7
   878de:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   878e2:	f8c8 9000 	str.w	r9, [r8]
   878e6:	f8c8 b004 	str.w	fp, [r8, #4]
   878ea:	f300 81ce 	bgt.w	87c8a <_svfprintf_r+0xc8e>
   878ee:	f108 0808 	add.w	r8, r8, #8
   878f2:	e54b      	b.n	8738c <_svfprintf_r+0x390>
   878f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   878f6:	2b01      	cmp	r3, #1
   878f8:	f340 817e 	ble.w	87bf8 <_svfprintf_r+0xbfc>
   878fc:	2301      	movs	r3, #1
   878fe:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   87900:	3401      	adds	r4, #1
   87902:	441e      	add	r6, r3
   87904:	2e07      	cmp	r6, #7
   87906:	f8c8 5000 	str.w	r5, [r8]
   8790a:	942a      	str	r4, [sp, #168]	; 0xa8
   8790c:	f8c8 3004 	str.w	r3, [r8, #4]
   87910:	9629      	str	r6, [sp, #164]	; 0xa4
   87912:	f300 81e1 	bgt.w	87cd8 <_svfprintf_r+0xcdc>
   87916:	f108 0808 	add.w	r8, r8, #8
   8791a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8791c:	3601      	adds	r6, #1
   8791e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87920:	441c      	add	r4, r3
   87922:	2e07      	cmp	r6, #7
   87924:	e9c8 2300 	strd	r2, r3, [r8]
   87928:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   8792c:	f300 81e1 	bgt.w	87cf2 <_svfprintf_r+0xcf6>
   87930:	f108 0808 	add.w	r8, r8, #8
   87934:	2200      	movs	r2, #0
   87936:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8793a:	2300      	movs	r3, #0
   8793c:	f005 fe94 	bl	8d668 <__aeabi_dcmpeq>
   87940:	2800      	cmp	r0, #0
   87942:	f040 8176 	bne.w	87c32 <_svfprintf_r+0xc36>
   87946:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87948:	3601      	adds	r6, #1
   8794a:	3b01      	subs	r3, #1
   8794c:	3501      	adds	r5, #1
   8794e:	441c      	add	r4, r3
   87950:	2e07      	cmp	r6, #7
   87952:	f8c8 5000 	str.w	r5, [r8]
   87956:	9629      	str	r6, [sp, #164]	; 0xa4
   87958:	f8c8 3004 	str.w	r3, [r8, #4]
   8795c:	942a      	str	r4, [sp, #168]	; 0xa8
   8795e:	f300 815b 	bgt.w	87c18 <_svfprintf_r+0xc1c>
   87962:	f108 0808 	add.w	r8, r8, #8
   87966:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87968:	3601      	adds	r6, #1
   8796a:	441c      	add	r4, r3
   8796c:	f8c8 3004 	str.w	r3, [r8, #4]
   87970:	2e07      	cmp	r6, #7
   87972:	ab24      	add	r3, sp, #144	; 0x90
   87974:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87978:	f8c8 3000 	str.w	r3, [r8]
   8797c:	f77f ad16 	ble.w	873ac <_svfprintf_r+0x3b0>
   87980:	990c      	ldr	r1, [sp, #48]	; 0x30
   87982:	980a      	ldr	r0, [sp, #40]	; 0x28
   87984:	aa28      	add	r2, sp, #160	; 0xa0
   87986:	f004 ff61 	bl	8c84c <__ssprint_r>
   8798a:	2800      	cmp	r0, #0
   8798c:	f47f ac99 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87990:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87992:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87996:	e50b      	b.n	873b0 <_svfprintf_r+0x3b4>
   87998:	f1b9 0f10 	cmp.w	r9, #16
   8799c:	f340 8650 	ble.w	88640 <_svfprintf_r+0x1644>
   879a0:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   879a4:	4640      	mov	r0, r8
   879a6:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   879aa:	46b8      	mov	r8, r7
   879ac:	2410      	movs	r4, #16
   879ae:	464f      	mov	r7, r9
   879b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   879b2:	46a9      	mov	r9, r5
   879b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   879b6:	e004      	b.n	879c2 <_svfprintf_r+0x9c6>
   879b8:	3f10      	subs	r7, #16
   879ba:	2f10      	cmp	r7, #16
   879bc:	f100 0008 	add.w	r0, r0, #8
   879c0:	dd16      	ble.n	879f0 <_svfprintf_r+0x9f4>
   879c2:	3201      	adds	r2, #1
   879c4:	4b1f      	ldr	r3, [pc, #124]	; (87a44 <_svfprintf_r+0xa48>)
   879c6:	3110      	adds	r1, #16
   879c8:	2a07      	cmp	r2, #7
   879ca:	e9c0 3400 	strd	r3, r4, [r0]
   879ce:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   879d2:	ddf1      	ble.n	879b8 <_svfprintf_r+0x9bc>
   879d4:	4631      	mov	r1, r6
   879d6:	4628      	mov	r0, r5
   879d8:	aa28      	add	r2, sp, #160	; 0xa0
   879da:	f004 ff37 	bl	8c84c <__ssprint_r>
   879de:	2800      	cmp	r0, #0
   879e0:	f47f ac6f 	bne.w	872c2 <_svfprintf_r+0x2c6>
   879e4:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   879e8:	3f10      	subs	r7, #16
   879ea:	2f10      	cmp	r7, #16
   879ec:	a82b      	add	r0, sp, #172	; 0xac
   879ee:	dce8      	bgt.n	879c2 <_svfprintf_r+0x9c6>
   879f0:	464d      	mov	r5, r9
   879f2:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   879f6:	46b9      	mov	r9, r7
   879f8:	4647      	mov	r7, r8
   879fa:	4680      	mov	r8, r0
   879fc:	eb09 0401 	add.w	r4, r9, r1
   87a00:	3201      	adds	r2, #1
   87a02:	4910      	ldr	r1, [pc, #64]	; (87a44 <_svfprintf_r+0xa48>)
   87a04:	2a07      	cmp	r2, #7
   87a06:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87a0a:	f8c8 9004 	str.w	r9, [r8, #4]
   87a0e:	f8c8 1000 	str.w	r1, [r8]
   87a12:	f300 83c3 	bgt.w	8819c <_svfprintf_r+0x11a0>
   87a16:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87a1a:	f108 0808 	add.w	r8, r8, #8
   87a1e:	e486      	b.n	8732e <_svfprintf_r+0x332>
   87a20:	990c      	ldr	r1, [sp, #48]	; 0x30
   87a22:	980a      	ldr	r0, [sp, #40]	; 0x28
   87a24:	aa28      	add	r2, sp, #160	; 0xa0
   87a26:	931d      	str	r3, [sp, #116]	; 0x74
   87a28:	f004 ff10 	bl	8c84c <__ssprint_r>
   87a2c:	2800      	cmp	r0, #0
   87a2e:	f47f ac48 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87a32:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87a36:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87a3a:	e48a      	b.n	87352 <_svfprintf_r+0x356>
   87a3c:	0008d838 	.word	0x0008d838
   87a40:	0008d84c 	.word	0x0008d84c
   87a44:	0008d83c 	.word	0x0008d83c
   87a48:	990c      	ldr	r1, [sp, #48]	; 0x30
   87a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   87a4c:	aa28      	add	r2, sp, #160	; 0xa0
   87a4e:	f004 fefd 	bl	8c84c <__ssprint_r>
   87a52:	2800      	cmp	r0, #0
   87a54:	f47f ac35 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87a58:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87a5a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87a5e:	e489      	b.n	87374 <_svfprintf_r+0x378>
   87a60:	2d10      	cmp	r5, #16
   87a62:	f340 86c4 	ble.w	887ee <_svfprintf_r+0x17f2>
   87a66:	2610      	movs	r6, #16
   87a68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87a6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   87a6c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   87a70:	e004      	b.n	87a7c <_svfprintf_r+0xa80>
   87a72:	3d10      	subs	r5, #16
   87a74:	2d10      	cmp	r5, #16
   87a76:	f108 0808 	add.w	r8, r8, #8
   87a7a:	dd17      	ble.n	87aac <_svfprintf_r+0xab0>
   87a7c:	3301      	adds	r3, #1
   87a7e:	4ab8      	ldr	r2, [pc, #736]	; (87d60 <_svfprintf_r+0xd64>)
   87a80:	3410      	adds	r4, #16
   87a82:	2b07      	cmp	r3, #7
   87a84:	e9c8 2600 	strd	r2, r6, [r8]
   87a88:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87a8c:	ddf1      	ble.n	87a72 <_svfprintf_r+0xa76>
   87a8e:	4649      	mov	r1, r9
   87a90:	4638      	mov	r0, r7
   87a92:	aa28      	add	r2, sp, #160	; 0xa0
   87a94:	f004 feda 	bl	8c84c <__ssprint_r>
   87a98:	2800      	cmp	r0, #0
   87a9a:	f47f ac12 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87a9e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   87aa2:	3d10      	subs	r5, #16
   87aa4:	2d10      	cmp	r5, #16
   87aa6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87aaa:	dce7      	bgt.n	87a7c <_svfprintf_r+0xa80>
   87aac:	3301      	adds	r3, #1
   87aae:	4aac      	ldr	r2, [pc, #688]	; (87d60 <_svfprintf_r+0xd64>)
   87ab0:	442c      	add	r4, r5
   87ab2:	2b07      	cmp	r3, #7
   87ab4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87ab8:	f8c8 5004 	str.w	r5, [r8, #4]
   87abc:	f8c8 2000 	str.w	r2, [r8]
   87ac0:	f77f ac7e 	ble.w	873c0 <_svfprintf_r+0x3c4>
   87ac4:	990c      	ldr	r1, [sp, #48]	; 0x30
   87ac6:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ac8:	aa28      	add	r2, sp, #160	; 0xa0
   87aca:	f004 febf 	bl	8c84c <__ssprint_r>
   87ace:	2800      	cmp	r0, #0
   87ad0:	f47f abf7 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87ad4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87ad6:	e473      	b.n	873c0 <_svfprintf_r+0x3c4>
   87ad8:	9922      	ldr	r1, [sp, #136]	; 0x88
   87ada:	2900      	cmp	r1, #0
   87adc:	f340 836f 	ble.w	881be <_svfprintf_r+0x11c2>
   87ae0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   87ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ae6:	4599      	cmp	r9, r3
   87ae8:	bfa8      	it	ge
   87aea:	4699      	movge	r9, r3
   87aec:	f1b9 0f00 	cmp.w	r9, #0
   87af0:	dd0b      	ble.n	87b0a <_svfprintf_r+0xb0e>
   87af2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87af4:	444c      	add	r4, r9
   87af6:	3301      	adds	r3, #1
   87af8:	2b07      	cmp	r3, #7
   87afa:	e9c8 5900 	strd	r5, r9, [r8]
   87afe:	942a      	str	r4, [sp, #168]	; 0xa8
   87b00:	9329      	str	r3, [sp, #164]	; 0xa4
   87b02:	f300 851d 	bgt.w	88540 <_svfprintf_r+0x1544>
   87b06:	f108 0808 	add.w	r8, r8, #8
   87b0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   87b0c:	f1b9 0f00 	cmp.w	r9, #0
   87b10:	bfa8      	it	ge
   87b12:	eba6 0609 	subge.w	r6, r6, r9
   87b16:	2e00      	cmp	r6, #0
   87b18:	f300 8225 	bgt.w	87f66 <_svfprintf_r+0xf6a>
   87b1c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   87b20:	0578      	lsls	r0, r7, #21
   87b22:	44ab      	add	fp, r5
   87b24:	f100 825f 	bmi.w	87fe6 <_svfprintf_r+0xfea>
   87b28:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b2c:	4293      	cmp	r3, r2
   87b2e:	db02      	blt.n	87b36 <_svfprintf_r+0xb3a>
   87b30:	07f9      	lsls	r1, r7, #31
   87b32:	f140 8476 	bpl.w	88422 <_svfprintf_r+0x1426>
   87b36:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87b38:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87b3a:	4414      	add	r4, r2
   87b3c:	e9c8 1200 	strd	r1, r2, [r8]
   87b40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87b42:	942a      	str	r4, [sp, #168]	; 0xa8
   87b44:	3201      	adds	r2, #1
   87b46:	2a07      	cmp	r2, #7
   87b48:	9229      	str	r2, [sp, #164]	; 0xa4
   87b4a:	f300 8513 	bgt.w	88574 <_svfprintf_r+0x1578>
   87b4e:	f108 0808 	add.w	r8, r8, #8
   87b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b54:	18ae      	adds	r6, r5, r2
   87b56:	eba6 060b 	sub.w	r6, r6, fp
   87b5a:	1ad5      	subs	r5, r2, r3
   87b5c:	42ae      	cmp	r6, r5
   87b5e:	bfa8      	it	ge
   87b60:	462e      	movge	r6, r5
   87b62:	2e00      	cmp	r6, #0
   87b64:	dd0d      	ble.n	87b82 <_svfprintf_r+0xb86>
   87b66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87b68:	4434      	add	r4, r6
   87b6a:	3301      	adds	r3, #1
   87b6c:	2b07      	cmp	r3, #7
   87b6e:	f8c8 b000 	str.w	fp, [r8]
   87b72:	f8c8 6004 	str.w	r6, [r8, #4]
   87b76:	942a      	str	r4, [sp, #168]	; 0xa8
   87b78:	9329      	str	r3, [sp, #164]	; 0xa4
   87b7a:	f300 8571 	bgt.w	88660 <_svfprintf_r+0x1664>
   87b7e:	f108 0808 	add.w	r8, r8, #8
   87b82:	2e00      	cmp	r6, #0
   87b84:	bfa8      	it	ge
   87b86:	1bad      	subge	r5, r5, r6
   87b88:	2d00      	cmp	r5, #0
   87b8a:	f77f ac11 	ble.w	873b0 <_svfprintf_r+0x3b4>
   87b8e:	2d10      	cmp	r5, #16
   87b90:	f340 873c 	ble.w	88a0c <_svfprintf_r+0x1a10>
   87b94:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 87d64 <_svfprintf_r+0xd68>
   87b98:	4622      	mov	r2, r4
   87b9a:	4649      	mov	r1, r9
   87b9c:	2610      	movs	r6, #16
   87b9e:	46b9      	mov	r9, r7
   87ba0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87ba2:	460f      	mov	r7, r1
   87ba4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   87ba8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87baa:	e005      	b.n	87bb8 <_svfprintf_r+0xbbc>
   87bac:	f108 0808 	add.w	r8, r8, #8
   87bb0:	3d10      	subs	r5, #16
   87bb2:	2d10      	cmp	r5, #16
   87bb4:	f340 8353 	ble.w	8825e <_svfprintf_r+0x1262>
   87bb8:	3301      	adds	r3, #1
   87bba:	3210      	adds	r2, #16
   87bbc:	2b07      	cmp	r3, #7
   87bbe:	e9c8 7600 	strd	r7, r6, [r8]
   87bc2:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87bc6:	ddf1      	ble.n	87bac <_svfprintf_r+0xbb0>
   87bc8:	4621      	mov	r1, r4
   87bca:	4658      	mov	r0, fp
   87bcc:	aa28      	add	r2, sp, #160	; 0xa0
   87bce:	f004 fe3d 	bl	8c84c <__ssprint_r>
   87bd2:	2800      	cmp	r0, #0
   87bd4:	f47f ab75 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87bd8:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87bdc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87be0:	e7e6      	b.n	87bb0 <_svfprintf_r+0xbb4>
   87be2:	9b07      	ldr	r3, [sp, #28]
   87be4:	2b00      	cmp	r3, #0
   87be6:	f47f aafc 	bne.w	871e2 <_svfprintf_r+0x1e6>
   87bea:	465f      	mov	r7, fp
   87bec:	2300      	movs	r3, #0
   87bee:	ad54      	add	r5, sp, #336	; 0x150
   87bf0:	9307      	str	r3, [sp, #28]
   87bf2:	930b      	str	r3, [sp, #44]	; 0x2c
   87bf4:	f7ff bafd 	b.w	871f2 <_svfprintf_r+0x1f6>
   87bf8:	07fa      	lsls	r2, r7, #31
   87bfa:	f53f ae7f 	bmi.w	878fc <_svfprintf_r+0x900>
   87bfe:	2301      	movs	r3, #1
   87c00:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   87c02:	3401      	adds	r4, #1
   87c04:	441e      	add	r6, r3
   87c06:	2e07      	cmp	r6, #7
   87c08:	f8c8 5000 	str.w	r5, [r8]
   87c0c:	942a      	str	r4, [sp, #168]	; 0xa8
   87c0e:	f8c8 3004 	str.w	r3, [r8, #4]
   87c12:	9629      	str	r6, [sp, #164]	; 0xa4
   87c14:	f77f aea5 	ble.w	87962 <_svfprintf_r+0x966>
   87c18:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c1c:	aa28      	add	r2, sp, #160	; 0xa0
   87c1e:	f004 fe15 	bl	8c84c <__ssprint_r>
   87c22:	2800      	cmp	r0, #0
   87c24:	f47f ab4d 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87c28:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87c2c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c30:	e699      	b.n	87966 <_svfprintf_r+0x96a>
   87c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c34:	1e5d      	subs	r5, r3, #1
   87c36:	2d00      	cmp	r5, #0
   87c38:	f77f ae95 	ble.w	87966 <_svfprintf_r+0x96a>
   87c3c:	2d10      	cmp	r5, #16
   87c3e:	f340 86df 	ble.w	88a00 <_svfprintf_r+0x1a04>
   87c42:	4622      	mov	r2, r4
   87c44:	9707      	str	r7, [sp, #28]
   87c46:	f04f 0b10 	mov.w	fp, #16
   87c4a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 87d64 <_svfprintf_r+0xd68>
   87c4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87c50:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87c52:	e005      	b.n	87c60 <_svfprintf_r+0xc64>
   87c54:	f108 0808 	add.w	r8, r8, #8
   87c58:	3d10      	subs	r5, #16
   87c5a:	2d10      	cmp	r5, #16
   87c5c:	f340 837f 	ble.w	8835e <_svfprintf_r+0x1362>
   87c60:	3601      	adds	r6, #1
   87c62:	3210      	adds	r2, #16
   87c64:	2e07      	cmp	r6, #7
   87c66:	e9c8 9b00 	strd	r9, fp, [r8]
   87c6a:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   87c6e:	ddf1      	ble.n	87c54 <_svfprintf_r+0xc58>
   87c70:	4639      	mov	r1, r7
   87c72:	4620      	mov	r0, r4
   87c74:	aa28      	add	r2, sp, #160	; 0xa0
   87c76:	f004 fde9 	bl	8c84c <__ssprint_r>
   87c7a:	2800      	cmp	r0, #0
   87c7c:	f47f ab21 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87c80:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   87c84:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c88:	e7e6      	b.n	87c58 <_svfprintf_r+0xc5c>
   87c8a:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c8e:	aa28      	add	r2, sp, #160	; 0xa0
   87c90:	f004 fddc 	bl	8c84c <__ssprint_r>
   87c94:	2800      	cmp	r0, #0
   87c96:	f47f ab14 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87c9a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87c9c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87ca0:	f7ff bb74 	b.w	8738c <_svfprintf_r+0x390>
   87ca4:	f01b 0310 	ands.w	r3, fp, #16
   87ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87caa:	d13a      	bne.n	87d22 <_svfprintf_r+0xd26>
   87cac:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   87cb0:	d033      	beq.n	87d1a <_svfprintf_r+0xd1e>
   87cb2:	f852 4b04 	ldr.w	r4, [r2], #4
   87cb6:	4699      	mov	r9, r3
   87cb8:	920e      	str	r2, [sp, #56]	; 0x38
   87cba:	2301      	movs	r3, #1
   87cbc:	b2a4      	uxth	r4, r4
   87cbe:	f7ff babd 	b.w	8723c <_svfprintf_r+0x240>
   87cc2:	232d      	movs	r3, #45	; 0x2d
   87cc4:	4264      	negs	r4, r4
   87cc6:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   87cca:	46bb      	mov	fp, r7
   87ccc:	f04f 0301 	mov.w	r3, #1
   87cd0:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   87cd4:	f7ff bab5 	b.w	87242 <_svfprintf_r+0x246>
   87cd8:	990c      	ldr	r1, [sp, #48]	; 0x30
   87cda:	980a      	ldr	r0, [sp, #40]	; 0x28
   87cdc:	aa28      	add	r2, sp, #160	; 0xa0
   87cde:	f004 fdb5 	bl	8c84c <__ssprint_r>
   87ce2:	2800      	cmp	r0, #0
   87ce4:	f47f aaed 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87ce8:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87cec:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87cf0:	e613      	b.n	8791a <_svfprintf_r+0x91e>
   87cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
   87cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
   87cf6:	aa28      	add	r2, sp, #160	; 0xa0
   87cf8:	f004 fda8 	bl	8c84c <__ssprint_r>
   87cfc:	2800      	cmp	r0, #0
   87cfe:	f47f aae0 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87d02:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87d06:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87d0a:	e613      	b.n	87934 <_svfprintf_r+0x938>
   87d0c:	07fd      	lsls	r5, r7, #31
   87d0e:	f57f ab4f 	bpl.w	873b0 <_svfprintf_r+0x3b4>
   87d12:	e524      	b.n	8775e <_svfprintf_r+0x762>
   87d14:	ad54      	add	r5, sp, #336	; 0x150
   87d16:	f7ff ba6c 	b.w	871f2 <_svfprintf_r+0x1f6>
   87d1a:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   87d1e:	f040 838a 	bne.w	88436 <_svfprintf_r+0x143a>
   87d22:	f852 4b04 	ldr.w	r4, [r2], #4
   87d26:	2301      	movs	r3, #1
   87d28:	920e      	str	r2, [sp, #56]	; 0x38
   87d2a:	f7ff ba87 	b.w	8723c <_svfprintf_r+0x240>
   87d2e:	05b8      	lsls	r0, r7, #22
   87d30:	f100 839b 	bmi.w	8846a <_svfprintf_r+0x146e>
   87d34:	ea4f 79e4 	mov.w	r9, r4, asr #31
   87d38:	464b      	mov	r3, r9
   87d3a:	f7ff ba40 	b.w	871be <_svfprintf_r+0x1c2>
   87d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d40:	9808      	ldr	r0, [sp, #32]
   87d42:	f853 1b04 	ldr.w	r1, [r3], #4
   87d46:	17c2      	asrs	r2, r0, #31
   87d48:	4655      	mov	r5, sl
   87d4a:	e9c1 0200 	strd	r0, r2, [r1]
   87d4e:	930e      	str	r3, [sp, #56]	; 0x38
   87d50:	f7ff bb4c 	b.w	873ec <_svfprintf_r+0x3f0>
   87d54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d56:	f853 4b04 	ldr.w	r4, [r3], #4
   87d5a:	930e      	str	r3, [sp, #56]	; 0x38
   87d5c:	f7ff ba6b 	b.w	87236 <_svfprintf_r+0x23a>
   87d60:	0008d83c 	.word	0x0008d83c
   87d64:	0008d84c 	.word	0x0008d84c
   87d68:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87d6c:	4602      	mov	r2, r0
   87d6e:	460b      	mov	r3, r1
   87d70:	f005 fcac 	bl	8d6cc <__aeabi_dcmpun>
   87d74:	2800      	cmp	r0, #0
   87d76:	f040 85e9 	bne.w	8894c <_svfprintf_r+0x1950>
   87d7a:	2e61      	cmp	r6, #97	; 0x61
   87d7c:	f000 857d 	beq.w	8887a <_svfprintf_r+0x187e>
   87d80:	2e41      	cmp	r6, #65	; 0x41
   87d82:	f000 848b 	beq.w	8869c <_svfprintf_r+0x16a0>
   87d86:	9b07      	ldr	r3, [sp, #28]
   87d88:	3301      	adds	r3, #1
   87d8a:	f000 838f 	beq.w	884ac <_svfprintf_r+0x14b0>
   87d8e:	f026 0320 	bic.w	r3, r6, #32
   87d92:	2b47      	cmp	r3, #71	; 0x47
   87d94:	9306      	str	r3, [sp, #24]
   87d96:	f000 858f 	beq.w	888b8 <_svfprintf_r+0x18bc>
   87d9a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87d9e:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   87da2:	930f      	str	r3, [sp, #60]	; 0x3c
   87da4:	4613      	mov	r3, r2
   87da6:	2b00      	cmp	r3, #0
   87da8:	f2c0 85b0 	blt.w	8890c <_svfprintf_r+0x1910>
   87dac:	930b      	str	r3, [sp, #44]	; 0x2c
   87dae:	2300      	movs	r3, #0
   87db0:	468b      	mov	fp, r1
   87db2:	931d      	str	r3, [sp, #116]	; 0x74
   87db4:	930d      	str	r3, [sp, #52]	; 0x34
   87db6:	9b06      	ldr	r3, [sp, #24]
   87db8:	2b46      	cmp	r3, #70	; 0x46
   87dba:	f000 83e9 	beq.w	88590 <_svfprintf_r+0x1594>
   87dbe:	2b45      	cmp	r3, #69	; 0x45
   87dc0:	f000 8546 	beq.w	88850 <_svfprintf_r+0x1854>
   87dc4:	9907      	ldr	r1, [sp, #28]
   87dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87dc8:	9101      	str	r1, [sp, #4]
   87dca:	2102      	movs	r1, #2
   87dcc:	9100      	str	r1, [sp, #0]
   87dce:	a926      	add	r1, sp, #152	; 0x98
   87dd0:	9104      	str	r1, [sp, #16]
   87dd2:	a923      	add	r1, sp, #140	; 0x8c
   87dd4:	9103      	str	r1, [sp, #12]
   87dd6:	a922      	add	r1, sp, #136	; 0x88
   87dd8:	465a      	mov	r2, fp
   87dda:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ddc:	9102      	str	r1, [sp, #8]
   87dde:	f001 febb 	bl	89b58 <_dtoa_r>
   87de2:	9b06      	ldr	r3, [sp, #24]
   87de4:	4605      	mov	r5, r0
   87de6:	2b47      	cmp	r3, #71	; 0x47
   87de8:	f040 863a 	bne.w	88a60 <_svfprintf_r+0x1a64>
   87dec:	f017 0f01 	tst.w	r7, #1
   87df0:	46b9      	mov	r9, r7
   87df2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87df4:	f040 84fe 	bne.w	887f4 <_svfprintf_r+0x17f8>
   87df8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87dfa:	1b5b      	subs	r3, r3, r5
   87dfc:	9312      	str	r3, [sp, #72]	; 0x48
   87dfe:	9b06      	ldr	r3, [sp, #24]
   87e00:	2b47      	cmp	r3, #71	; 0x47
   87e02:	f000 836e 	beq.w	884e2 <_svfprintf_r+0x14e6>
   87e06:	9b06      	ldr	r3, [sp, #24]
   87e08:	2b46      	cmp	r3, #70	; 0x46
   87e0a:	f000 83f0 	beq.w	885ee <_svfprintf_r+0x15f2>
   87e0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87e10:	9310      	str	r3, [sp, #64]	; 0x40
   87e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87e14:	9a06      	ldr	r2, [sp, #24]
   87e16:	3b01      	subs	r3, #1
   87e18:	2a41      	cmp	r2, #65	; 0x41
   87e1a:	9322      	str	r3, [sp, #136]	; 0x88
   87e1c:	f000 85bb 	beq.w	88996 <_svfprintf_r+0x199a>
   87e20:	2100      	movs	r1, #0
   87e22:	b2f2      	uxtb	r2, r6
   87e24:	2b00      	cmp	r3, #0
   87e26:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   87e2a:	bfb6      	itet	lt
   87e2c:	222d      	movlt	r2, #45	; 0x2d
   87e2e:	222b      	movge	r2, #43	; 0x2b
   87e30:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87e32:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   87e36:	bfb8      	it	lt
   87e38:	f1c3 0301 	rsblt	r3, r3, #1
   87e3c:	2b09      	cmp	r3, #9
   87e3e:	f340 859b 	ble.w	88978 <_svfprintf_r+0x197c>
   87e42:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   87e46:	4662      	mov	r2, ip
   87e48:	4fb6      	ldr	r7, [pc, #728]	; (88124 <_svfprintf_r+0x1128>)
   87e4a:	461c      	mov	r4, r3
   87e4c:	4610      	mov	r0, r2
   87e4e:	fb87 1203 	smull	r1, r2, r7, r3
   87e52:	17d9      	asrs	r1, r3, #31
   87e54:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   87e58:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   87e5c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   87e60:	3230      	adds	r2, #48	; 0x30
   87e62:	2c63      	cmp	r4, #99	; 0x63
   87e64:	f800 2c01 	strb.w	r2, [r0, #-1]
   87e68:	460b      	mov	r3, r1
   87e6a:	f100 32ff 	add.w	r2, r0, #4294967295
   87e6e:	dcec      	bgt.n	87e4a <_svfprintf_r+0xe4e>
   87e70:	3330      	adds	r3, #48	; 0x30
   87e72:	1e81      	subs	r1, r0, #2
   87e74:	b2db      	uxtb	r3, r3
   87e76:	458c      	cmp	ip, r1
   87e78:	f802 3c01 	strb.w	r3, [r2, #-1]
   87e7c:	f240 85f9 	bls.w	88a72 <_svfprintf_r+0x1a76>
   87e80:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   87e84:	e001      	b.n	87e8a <_svfprintf_r+0xe8e>
   87e86:	f812 3b01 	ldrb.w	r3, [r2], #1
   87e8a:	4594      	cmp	ip, r2
   87e8c:	f801 3b01 	strb.w	r3, [r1], #1
   87e90:	d1f9      	bne.n	87e86 <_svfprintf_r+0xe8a>
   87e92:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   87e96:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   87e9a:	1a1b      	subs	r3, r3, r0
   87e9c:	4413      	add	r3, r2
   87e9e:	aa24      	add	r2, sp, #144	; 0x90
   87ea0:	1a9b      	subs	r3, r3, r2
   87ea2:	931a      	str	r3, [sp, #104]	; 0x68
   87ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ea6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   87ea8:	2b01      	cmp	r3, #1
   87eaa:	441a      	add	r2, r3
   87eac:	920b      	str	r2, [sp, #44]	; 0x2c
   87eae:	f340 8581 	ble.w	889b4 <_svfprintf_r+0x19b8>
   87eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87eb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87eb6:	4413      	add	r3, r2
   87eb8:	930b      	str	r3, [sp, #44]	; 0x2c
   87eba:	2300      	movs	r3, #0
   87ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87ebe:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   87ec2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   87ec6:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   87eca:	930f      	str	r3, [sp, #60]	; 0x3c
   87ecc:	9206      	str	r2, [sp, #24]
   87ece:	9313      	str	r3, [sp, #76]	; 0x4c
   87ed0:	9310      	str	r3, [sp, #64]	; 0x40
   87ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87ed4:	2b00      	cmp	r3, #0
   87ed6:	f040 832c 	bne.w	88532 <_svfprintf_r+0x1536>
   87eda:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87ede:	9307      	str	r3, [sp, #28]
   87ee0:	f7ff b994 	b.w	8720c <_svfprintf_r+0x210>
   87ee4:	46bb      	mov	fp, r7
   87ee6:	f7ff bb2f 	b.w	87548 <_svfprintf_r+0x54c>
   87eea:	4b8f      	ldr	r3, [pc, #572]	; (88128 <_svfprintf_r+0x112c>)
   87eec:	9318      	str	r3, [sp, #96]	; 0x60
   87eee:	f017 0920 	ands.w	r9, r7, #32
   87ef2:	f000 80f5 	beq.w	880e0 <_svfprintf_r+0x10e4>
   87ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ef8:	3307      	adds	r3, #7
   87efa:	f023 0307 	bic.w	r3, r3, #7
   87efe:	f8d3 9004 	ldr.w	r9, [r3, #4]
   87f02:	f853 4b08 	ldr.w	r4, [r3], #8
   87f06:	930e      	str	r3, [sp, #56]	; 0x38
   87f08:	07f8      	lsls	r0, r7, #31
   87f0a:	d509      	bpl.n	87f20 <_svfprintf_r+0xf24>
   87f0c:	ea54 0309 	orrs.w	r3, r4, r9
   87f10:	d006      	beq.n	87f20 <_svfprintf_r+0xf24>
   87f12:	2330      	movs	r3, #48	; 0x30
   87f14:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   87f18:	f047 0702 	orr.w	r7, r7, #2
   87f1c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87f20:	2302      	movs	r3, #2
   87f22:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   87f26:	f7ff b989 	b.w	8723c <_svfprintf_r+0x240>
   87f2a:	4b80      	ldr	r3, [pc, #512]	; (8812c <_svfprintf_r+0x1130>)
   87f2c:	9318      	str	r3, [sp, #96]	; 0x60
   87f2e:	e7de      	b.n	87eee <_svfprintf_r+0xef2>
   87f30:	990c      	ldr	r1, [sp, #48]	; 0x30
   87f32:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f34:	aa28      	add	r2, sp, #160	; 0xa0
   87f36:	f004 fc89 	bl	8c84c <__ssprint_r>
   87f3a:	2800      	cmp	r0, #0
   87f3c:	f47f a9c1 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87f40:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87f42:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87f46:	e418      	b.n	8777a <_svfprintf_r+0x77e>
   87f48:	2140      	movs	r1, #64	; 0x40
   87f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f4c:	f003 faca 	bl	8b4e4 <_malloc_r>
   87f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87f52:	6018      	str	r0, [r3, #0]
   87f54:	6118      	str	r0, [r3, #16]
   87f56:	2800      	cmp	r0, #0
   87f58:	f000 8597 	beq.w	88a8a <_svfprintf_r+0x1a8e>
   87f5c:	2340      	movs	r3, #64	; 0x40
   87f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f60:	6153      	str	r3, [r2, #20]
   87f62:	f7ff b862 	b.w	8702a <_svfprintf_r+0x2e>
   87f66:	2e10      	cmp	r6, #16
   87f68:	f340 8576 	ble.w	88a58 <_svfprintf_r+0x1a5c>
   87f6c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 88130 <_svfprintf_r+0x1134>
   87f70:	4642      	mov	r2, r8
   87f72:	4648      	mov	r0, r9
   87f74:	4621      	mov	r1, r4
   87f76:	46a8      	mov	r8, r5
   87f78:	46b9      	mov	r9, r7
   87f7a:	f04f 0b10 	mov.w	fp, #16
   87f7e:	4607      	mov	r7, r0
   87f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87f82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87f84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87f86:	e004      	b.n	87f92 <_svfprintf_r+0xf96>
   87f88:	3208      	adds	r2, #8
   87f8a:	3e10      	subs	r6, #16
   87f8c:	2e10      	cmp	r6, #16
   87f8e:	f340 8213 	ble.w	883b8 <_svfprintf_r+0x13bc>
   87f92:	3301      	adds	r3, #1
   87f94:	3110      	adds	r1, #16
   87f96:	2b07      	cmp	r3, #7
   87f98:	e9c2 7b00 	strd	r7, fp, [r2]
   87f9c:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   87fa0:	ddf2      	ble.n	87f88 <_svfprintf_r+0xf8c>
   87fa2:	4629      	mov	r1, r5
   87fa4:	4620      	mov	r0, r4
   87fa6:	aa28      	add	r2, sp, #160	; 0xa0
   87fa8:	f004 fc50 	bl	8c84c <__ssprint_r>
   87fac:	2800      	cmp	r0, #0
   87fae:	f47f a988 	bne.w	872c2 <_svfprintf_r+0x2c6>
   87fb2:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   87fb6:	aa2b      	add	r2, sp, #172	; 0xac
   87fb8:	e7e7      	b.n	87f8a <_svfprintf_r+0xf8e>
   87fba:	4628      	mov	r0, r5
   87fbc:	f8cd 901c 	str.w	r9, [sp, #28]
   87fc0:	940e      	str	r4, [sp, #56]	; 0x38
   87fc2:	f7fe ffb9 	bl	86f38 <strlen>
   87fc6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   87fca:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87fce:	900b      	str	r0, [sp, #44]	; 0x2c
   87fd0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   87fd4:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   87fd8:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   87fdc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   87fe0:	9306      	str	r3, [sp, #24]
   87fe2:	f7ff b913 	b.w	8720c <_svfprintf_r+0x210>
   87fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87fe8:	4642      	mov	r2, r8
   87fea:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   87fee:	18eb      	adds	r3, r5, r3
   87ff0:	465e      	mov	r6, fp
   87ff2:	9307      	str	r3, [sp, #28]
   87ff4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   87ff8:	9710      	str	r7, [sp, #64]	; 0x40
   87ffa:	4621      	mov	r1, r4
   87ffc:	9f19      	ldr	r7, [sp, #100]	; 0x64
   87ffe:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   88002:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   88006:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8800a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8800c:	9513      	str	r5, [sp, #76]	; 0x4c
   8800e:	f1b8 0f00 	cmp.w	r8, #0
   88012:	d02e      	beq.n	88072 <_svfprintf_r+0x1076>
   88014:	bb83      	cbnz	r3, 88078 <_svfprintf_r+0x107c>
   88016:	3f01      	subs	r7, #1
   88018:	f108 38ff 	add.w	r8, r8, #4294967295
   8801c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   8801e:	4449      	add	r1, r9
   88020:	e9c2 3900 	strd	r3, r9, [r2]
   88024:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88026:	912a      	str	r1, [sp, #168]	; 0xa8
   88028:	3301      	adds	r3, #1
   8802a:	2b07      	cmp	r3, #7
   8802c:	9329      	str	r3, [sp, #164]	; 0xa4
   8802e:	dc60      	bgt.n	880f2 <_svfprintf_r+0x10f6>
   88030:	3208      	adds	r2, #8
   88032:	9b07      	ldr	r3, [sp, #28]
   88034:	7838      	ldrb	r0, [r7, #0]
   88036:	1b9b      	subs	r3, r3, r6
   88038:	4283      	cmp	r3, r0
   8803a:	bfa8      	it	ge
   8803c:	4603      	movge	r3, r0
   8803e:	2b00      	cmp	r3, #0
   88040:	461c      	mov	r4, r3
   88042:	dd0b      	ble.n	8805c <_svfprintf_r+0x1060>
   88044:	9829      	ldr	r0, [sp, #164]	; 0xa4
   88046:	4419      	add	r1, r3
   88048:	3001      	adds	r0, #1
   8804a:	2807      	cmp	r0, #7
   8804c:	e9c2 6300 	strd	r6, r3, [r2]
   88050:	912a      	str	r1, [sp, #168]	; 0xa8
   88052:	9029      	str	r0, [sp, #164]	; 0xa4
   88054:	f300 8114 	bgt.w	88280 <_svfprintf_r+0x1284>
   88058:	7838      	ldrb	r0, [r7, #0]
   8805a:	3208      	adds	r2, #8
   8805c:	2c00      	cmp	r4, #0
   8805e:	bfb4      	ite	lt
   88060:	4605      	movlt	r5, r0
   88062:	1b05      	subge	r5, r0, r4
   88064:	2d00      	cmp	r5, #0
   88066:	dc0b      	bgt.n	88080 <_svfprintf_r+0x1084>
   88068:	4406      	add	r6, r0
   8806a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8806c:	f1b8 0f00 	cmp.w	r8, #0
   88070:	d1d0      	bne.n	88014 <_svfprintf_r+0x1018>
   88072:	2b00      	cmp	r3, #0
   88074:	f000 8226 	beq.w	884c4 <_svfprintf_r+0x14c8>
   88078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8807a:	3b01      	subs	r3, #1
   8807c:	930f      	str	r3, [sp, #60]	; 0x3c
   8807e:	e7cd      	b.n	8801c <_svfprintf_r+0x1020>
   88080:	2d10      	cmp	r5, #16
   88082:	f340 849d 	ble.w	889c0 <_svfprintf_r+0x19c4>
   88086:	2410      	movs	r4, #16
   88088:	9829      	ldr	r0, [sp, #164]	; 0xa4
   8808a:	e004      	b.n	88096 <_svfprintf_r+0x109a>
   8808c:	3d10      	subs	r5, #16
   8808e:	2d10      	cmp	r5, #16
   88090:	f102 0208 	add.w	r2, r2, #8
   88094:	dd16      	ble.n	880c4 <_svfprintf_r+0x10c8>
   88096:	3001      	adds	r0, #1
   88098:	4b25      	ldr	r3, [pc, #148]	; (88130 <_svfprintf_r+0x1134>)
   8809a:	3110      	adds	r1, #16
   8809c:	2807      	cmp	r0, #7
   8809e:	e9c2 3400 	strd	r3, r4, [r2]
   880a2:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   880a6:	ddf1      	ble.n	8808c <_svfprintf_r+0x1090>
   880a8:	4659      	mov	r1, fp
   880aa:	4650      	mov	r0, sl
   880ac:	aa28      	add	r2, sp, #160	; 0xa0
   880ae:	f004 fbcd 	bl	8c84c <__ssprint_r>
   880b2:	2800      	cmp	r0, #0
   880b4:	f47f a905 	bne.w	872c2 <_svfprintf_r+0x2c6>
   880b8:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   880bc:	3d10      	subs	r5, #16
   880be:	2d10      	cmp	r5, #16
   880c0:	aa2b      	add	r2, sp, #172	; 0xac
   880c2:	dce8      	bgt.n	88096 <_svfprintf_r+0x109a>
   880c4:	3001      	adds	r0, #1
   880c6:	4b1a      	ldr	r3, [pc, #104]	; (88130 <_svfprintf_r+0x1134>)
   880c8:	4429      	add	r1, r5
   880ca:	2807      	cmp	r0, #7
   880cc:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   880d0:	6055      	str	r5, [r2, #4]
   880d2:	6013      	str	r3, [r2, #0]
   880d4:	f300 8241 	bgt.w	8855a <_svfprintf_r+0x155e>
   880d8:	7838      	ldrb	r0, [r7, #0]
   880da:	3208      	adds	r2, #8
   880dc:	4406      	add	r6, r0
   880de:	e7c4      	b.n	8806a <_svfprintf_r+0x106e>
   880e0:	f017 0310 	ands.w	r3, r7, #16
   880e4:	f000 80a0 	beq.w	88228 <_svfprintf_r+0x122c>
   880e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880ea:	f853 4b04 	ldr.w	r4, [r3], #4
   880ee:	930e      	str	r3, [sp, #56]	; 0x38
   880f0:	e70a      	b.n	87f08 <_svfprintf_r+0xf0c>
   880f2:	4659      	mov	r1, fp
   880f4:	4650      	mov	r0, sl
   880f6:	aa28      	add	r2, sp, #160	; 0xa0
   880f8:	f004 fba8 	bl	8c84c <__ssprint_r>
   880fc:	2800      	cmp	r0, #0
   880fe:	f47f a8e0 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88102:	992a      	ldr	r1, [sp, #168]	; 0xa8
   88104:	aa2b      	add	r2, sp, #172	; 0xac
   88106:	e794      	b.n	88032 <_svfprintf_r+0x1036>
   88108:	2300      	movs	r3, #0
   8810a:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   8810e:	9606      	str	r6, [sp, #24]
   88110:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   88114:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   88118:	4692      	mov	sl, r2
   8811a:	461e      	mov	r6, r3
   8811c:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   88120:	af54      	add	r7, sp, #336	; 0x150
   88122:	e014      	b.n	8814e <_svfprintf_r+0x1152>
   88124:	66666667 	.word	0x66666667
   88128:	0008d808 	.word	0x0008d808
   8812c:	0008d81c 	.word	0x0008d81c
   88130:	0008d84c 	.word	0x0008d84c
   88134:	2300      	movs	r3, #0
   88136:	4620      	mov	r0, r4
   88138:	4649      	mov	r1, r9
   8813a:	220a      	movs	r2, #10
   8813c:	f7fe fc56 	bl	869ec <__aeabi_uldivmod>
   88140:	2c0a      	cmp	r4, #10
   88142:	f179 0300 	sbcs.w	r3, r9, #0
   88146:	d31b      	bcc.n	88180 <_svfprintf_r+0x1184>
   88148:	4604      	mov	r4, r0
   8814a:	4689      	mov	r9, r1
   8814c:	462f      	mov	r7, r5
   8814e:	4620      	mov	r0, r4
   88150:	220a      	movs	r2, #10
   88152:	2300      	movs	r3, #0
   88154:	4649      	mov	r1, r9
   88156:	f7fe fc49 	bl	869ec <__aeabi_uldivmod>
   8815a:	3230      	adds	r2, #48	; 0x30
   8815c:	1e7d      	subs	r5, r7, #1
   8815e:	3601      	adds	r6, #1
   88160:	f807 2c01 	strb.w	r2, [r7, #-1]
   88164:	f1ba 0f00 	cmp.w	sl, #0
   88168:	d0e4      	beq.n	88134 <_svfprintf_r+0x1138>
   8816a:	f898 3000 	ldrb.w	r3, [r8]
   8816e:	429e      	cmp	r6, r3
   88170:	d1e0      	bne.n	88134 <_svfprintf_r+0x1138>
   88172:	2eff      	cmp	r6, #255	; 0xff
   88174:	d0de      	beq.n	88134 <_svfprintf_r+0x1138>
   88176:	2c0a      	cmp	r4, #10
   88178:	f179 0300 	sbcs.w	r3, r9, #0
   8817c:	f080 8130 	bcs.w	883e0 <_svfprintf_r+0x13e4>
   88180:	ab54      	add	r3, sp, #336	; 0x150
   88182:	1b5b      	subs	r3, r3, r5
   88184:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   88188:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   8818c:	9612      	str	r6, [sp, #72]	; 0x48
   8818e:	465f      	mov	r7, fp
   88190:	9e06      	ldr	r6, [sp, #24]
   88192:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   88196:	930b      	str	r3, [sp, #44]	; 0x2c
   88198:	f7ff b82b 	b.w	871f2 <_svfprintf_r+0x1f6>
   8819c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8819e:	980a      	ldr	r0, [sp, #40]	; 0x28
   881a0:	aa28      	add	r2, sp, #160	; 0xa0
   881a2:	931d      	str	r3, [sp, #116]	; 0x74
   881a4:	f004 fb52 	bl	8c84c <__ssprint_r>
   881a8:	2800      	cmp	r0, #0
   881aa:	f47f a88a 	bne.w	872c2 <_svfprintf_r+0x2c6>
   881ae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   881b2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   881b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   881b6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   881ba:	f7ff b8b8 	b.w	8732e <_svfprintf_r+0x332>
   881be:	2301      	movs	r3, #1
   881c0:	f8c8 3004 	str.w	r3, [r8, #4]
   881c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   881c6:	4abc      	ldr	r2, [pc, #752]	; (884b8 <_svfprintf_r+0x14bc>)
   881c8:	3301      	adds	r3, #1
   881ca:	3401      	adds	r4, #1
   881cc:	2b07      	cmp	r3, #7
   881ce:	942a      	str	r4, [sp, #168]	; 0xa8
   881d0:	9329      	str	r3, [sp, #164]	; 0xa4
   881d2:	f8c8 2000 	str.w	r2, [r8]
   881d6:	f300 8117 	bgt.w	88408 <_svfprintf_r+0x140c>
   881da:	f108 0808 	add.w	r8, r8, #8
   881de:	2900      	cmp	r1, #0
   881e0:	f040 8086 	bne.w	882f0 <_svfprintf_r+0x12f4>
   881e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   881e6:	f007 0301 	and.w	r3, r7, #1
   881ea:	4313      	orrs	r3, r2
   881ec:	f43f a8e0 	beq.w	873b0 <_svfprintf_r+0x3b4>
   881f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   881f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   881f4:	191a      	adds	r2, r3, r4
   881f6:	e9c8 1300 	strd	r1, r3, [r8]
   881fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   881fc:	922a      	str	r2, [sp, #168]	; 0xa8
   881fe:	3301      	adds	r3, #1
   88200:	2b07      	cmp	r3, #7
   88202:	9329      	str	r3, [sp, #164]	; 0xa4
   88204:	f300 8137 	bgt.w	88476 <_svfprintf_r+0x147a>
   88208:	f108 0808 	add.w	r8, r8, #8
   8820c:	9912      	ldr	r1, [sp, #72]	; 0x48
   8820e:	3301      	adds	r3, #1
   88210:	188c      	adds	r4, r1, r2
   88212:	2b07      	cmp	r3, #7
   88214:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   88218:	f8c8 5000 	str.w	r5, [r8]
   8821c:	f8c8 1004 	str.w	r1, [r8, #4]
   88220:	f77f a8c4 	ble.w	873ac <_svfprintf_r+0x3b0>
   88224:	f7ff bbac 	b.w	87980 <_svfprintf_r+0x984>
   88228:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   8822c:	f000 80a5 	beq.w	8837a <_svfprintf_r+0x137e>
   88230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88232:	4699      	mov	r9, r3
   88234:	f852 4b04 	ldr.w	r4, [r2], #4
   88238:	920e      	str	r2, [sp, #56]	; 0x38
   8823a:	b2a4      	uxth	r4, r4
   8823c:	e664      	b.n	87f08 <_svfprintf_r+0xf0c>
   8823e:	46bb      	mov	fp, r7
   88240:	f7fe bfca 	b.w	871d8 <_svfprintf_r+0x1dc>
   88244:	990c      	ldr	r1, [sp, #48]	; 0x30
   88246:	980a      	ldr	r0, [sp, #40]	; 0x28
   88248:	aa28      	add	r2, sp, #160	; 0xa0
   8824a:	f004 faff 	bl	8c84c <__ssprint_r>
   8824e:	2800      	cmp	r0, #0
   88250:	f47f a837 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88254:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88256:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8825a:	f7ff ba7b 	b.w	87754 <_svfprintf_r+0x758>
   8825e:	4614      	mov	r4, r2
   88260:	463a      	mov	r2, r7
   88262:	464f      	mov	r7, r9
   88264:	4691      	mov	r9, r2
   88266:	3301      	adds	r3, #1
   88268:	442c      	add	r4, r5
   8826a:	2b07      	cmp	r3, #7
   8826c:	f8c8 9000 	str.w	r9, [r8]
   88270:	f8c8 5004 	str.w	r5, [r8, #4]
   88274:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   88278:	f77f a898 	ble.w	873ac <_svfprintf_r+0x3b0>
   8827c:	f7ff bb80 	b.w	87980 <_svfprintf_r+0x984>
   88280:	4659      	mov	r1, fp
   88282:	4650      	mov	r0, sl
   88284:	aa28      	add	r2, sp, #160	; 0xa0
   88286:	f004 fae1 	bl	8c84c <__ssprint_r>
   8828a:	2800      	cmp	r0, #0
   8828c:	f47f a819 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88290:	7838      	ldrb	r0, [r7, #0]
   88292:	992a      	ldr	r1, [sp, #168]	; 0xa8
   88294:	aa2b      	add	r2, sp, #172	; 0xac
   88296:	e6e1      	b.n	8805c <_svfprintf_r+0x1060>
   88298:	990c      	ldr	r1, [sp, #48]	; 0x30
   8829a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8829c:	aa28      	add	r2, sp, #160	; 0xa0
   8829e:	f004 fad5 	bl	8c84c <__ssprint_r>
   882a2:	2800      	cmp	r0, #0
   882a4:	f47f a80d 	bne.w	872c2 <_svfprintf_r+0x2c6>
   882a8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   882aa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   882ae:	f7ff b865 	b.w	8737c <_svfprintf_r+0x380>
   882b2:	2b01      	cmp	r3, #1
   882b4:	46bb      	mov	fp, r7
   882b6:	f47f a9f5 	bne.w	876a4 <_svfprintf_r+0x6a8>
   882ba:	f7fe bf92 	b.w	871e2 <_svfprintf_r+0x1e6>
   882be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   882c0:	9908      	ldr	r1, [sp, #32]
   882c2:	f853 2b04 	ldr.w	r2, [r3], #4
   882c6:	4655      	mov	r5, sl
   882c8:	6011      	str	r1, [r2, #0]
   882ca:	930e      	str	r3, [sp, #56]	; 0x38
   882cc:	f7ff b88e 	b.w	873ec <_svfprintf_r+0x3f0>
   882d0:	2b06      	cmp	r3, #6
   882d2:	4629      	mov	r1, r5
   882d4:	bf28      	it	cs
   882d6:	2306      	movcs	r3, #6
   882d8:	462a      	mov	r2, r5
   882da:	9507      	str	r5, [sp, #28]
   882dc:	950d      	str	r5, [sp, #52]	; 0x34
   882de:	9306      	str	r3, [sp, #24]
   882e0:	4d76      	ldr	r5, [pc, #472]	; (884bc <_svfprintf_r+0x14c0>)
   882e2:	940e      	str	r4, [sp, #56]	; 0x38
   882e4:	930b      	str	r3, [sp, #44]	; 0x2c
   882e6:	910f      	str	r1, [sp, #60]	; 0x3c
   882e8:	9113      	str	r1, [sp, #76]	; 0x4c
   882ea:	9110      	str	r1, [sp, #64]	; 0x40
   882ec:	f7fe bf8e 	b.w	8720c <_svfprintf_r+0x210>
   882f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   882f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   882f4:	191a      	adds	r2, r3, r4
   882f6:	e9c8 0300 	strd	r0, r3, [r8]
   882fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   882fc:	922a      	str	r2, [sp, #168]	; 0xa8
   882fe:	3301      	adds	r3, #1
   88300:	2b07      	cmp	r3, #7
   88302:	9329      	str	r3, [sp, #164]	; 0xa4
   88304:	f300 80b7 	bgt.w	88476 <_svfprintf_r+0x147a>
   88308:	f108 0808 	add.w	r8, r8, #8
   8830c:	2900      	cmp	r1, #0
   8830e:	f6bf af7d 	bge.w	8820c <_svfprintf_r+0x1210>
   88312:	424e      	negs	r6, r1
   88314:	3110      	adds	r1, #16
   88316:	f280 83a9 	bge.w	88a6c <_svfprintf_r+0x1a70>
   8831a:	4641      	mov	r1, r8
   8831c:	2410      	movs	r4, #16
   8831e:	46a8      	mov	r8, r5
   88320:	f8df 919c 	ldr.w	r9, [pc, #412]	; 884c0 <_svfprintf_r+0x14c4>
   88324:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   88328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8832a:	e004      	b.n	88336 <_svfprintf_r+0x133a>
   8832c:	3108      	adds	r1, #8
   8832e:	3e10      	subs	r6, #16
   88330:	2e10      	cmp	r6, #16
   88332:	f340 82a7 	ble.w	88884 <_svfprintf_r+0x1888>
   88336:	3301      	adds	r3, #1
   88338:	3210      	adds	r2, #16
   8833a:	2b07      	cmp	r3, #7
   8833c:	e9c1 9400 	strd	r9, r4, [r1]
   88340:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   88344:	ddf2      	ble.n	8832c <_svfprintf_r+0x1330>
   88346:	4629      	mov	r1, r5
   88348:	4658      	mov	r0, fp
   8834a:	aa28      	add	r2, sp, #160	; 0xa0
   8834c:	f004 fa7e 	bl	8c84c <__ssprint_r>
   88350:	2800      	cmp	r0, #0
   88352:	f47e afb6 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88356:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8835a:	a92b      	add	r1, sp, #172	; 0xac
   8835c:	e7e7      	b.n	8832e <_svfprintf_r+0x1332>
   8835e:	4614      	mov	r4, r2
   88360:	9f07      	ldr	r7, [sp, #28]
   88362:	3601      	adds	r6, #1
   88364:	442c      	add	r4, r5
   88366:	2e07      	cmp	r6, #7
   88368:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   8836c:	f8c8 9000 	str.w	r9, [r8]
   88370:	f8c8 5004 	str.w	r5, [r8, #4]
   88374:	f77f aaf5 	ble.w	87962 <_svfprintf_r+0x966>
   88378:	e44e      	b.n	87c18 <_svfprintf_r+0xc1c>
   8837a:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8837e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88380:	d066      	beq.n	88450 <_svfprintf_r+0x1454>
   88382:	f853 4b04 	ldr.w	r4, [r3], #4
   88386:	4691      	mov	r9, r2
   88388:	930e      	str	r3, [sp, #56]	; 0x38
   8838a:	b2e4      	uxtb	r4, r4
   8838c:	e5bc      	b.n	87f08 <_svfprintf_r+0xf0c>
   8838e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   88392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88394:	d057      	beq.n	88446 <_svfprintf_r+0x144a>
   88396:	f853 4b04 	ldr.w	r4, [r3], #4
   8839a:	4691      	mov	r9, r2
   8839c:	930e      	str	r3, [sp, #56]	; 0x38
   8839e:	b2e4      	uxtb	r4, r4
   883a0:	f7fe bf49 	b.w	87236 <_svfprintf_r+0x23a>
   883a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   883a6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 884c0 <_svfprintf_r+0x14c4>
   883aa:	f7ff ba95 	b.w	878d8 <_svfprintf_r+0x8dc>
   883ae:	222d      	movs	r2, #45	; 0x2d
   883b0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   883b4:	f7ff b857 	b.w	87466 <_svfprintf_r+0x46a>
   883b8:	4645      	mov	r5, r8
   883ba:	4690      	mov	r8, r2
   883bc:	463a      	mov	r2, r7
   883be:	460c      	mov	r4, r1
   883c0:	464f      	mov	r7, r9
   883c2:	4691      	mov	r9, r2
   883c4:	3301      	adds	r3, #1
   883c6:	4434      	add	r4, r6
   883c8:	2b07      	cmp	r3, #7
   883ca:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   883ce:	f8c8 9000 	str.w	r9, [r8]
   883d2:	f8c8 6004 	str.w	r6, [r8, #4]
   883d6:	dc5c      	bgt.n	88492 <_svfprintf_r+0x1496>
   883d8:	f108 0808 	add.w	r8, r8, #8
   883dc:	f7ff bb9e 	b.w	87b1c <_svfprintf_r+0xb20>
   883e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   883e2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   883e4:	1aed      	subs	r5, r5, r3
   883e6:	461a      	mov	r2, r3
   883e8:	4628      	mov	r0, r5
   883ea:	f7fe fdd3 	bl	86f94 <strncpy>
   883ee:	f898 3001 	ldrb.w	r3, [r8, #1]
   883f2:	b10b      	cbz	r3, 883f8 <_svfprintf_r+0x13fc>
   883f4:	f108 0801 	add.w	r8, r8, #1
   883f8:	4620      	mov	r0, r4
   883fa:	4649      	mov	r1, r9
   883fc:	220a      	movs	r2, #10
   883fe:	2300      	movs	r3, #0
   88400:	2600      	movs	r6, #0
   88402:	f7fe faf3 	bl	869ec <__aeabi_uldivmod>
   88406:	e69f      	b.n	88148 <_svfprintf_r+0x114c>
   88408:	990c      	ldr	r1, [sp, #48]	; 0x30
   8840a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8840c:	aa28      	add	r2, sp, #160	; 0xa0
   8840e:	f004 fa1d 	bl	8c84c <__ssprint_r>
   88412:	2800      	cmp	r0, #0
   88414:	f47e af55 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88418:	9922      	ldr	r1, [sp, #136]	; 0x88
   8841a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8841c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88420:	e6dd      	b.n	881de <_svfprintf_r+0x11e2>
   88422:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88424:	18ae      	adds	r6, r5, r2
   88426:	eba6 060b 	sub.w	r6, r6, fp
   8842a:	1ad5      	subs	r5, r2, r3
   8842c:	42ae      	cmp	r6, r5
   8842e:	bfa8      	it	ge
   88430:	462e      	movge	r6, r5
   88432:	f7ff bba6 	b.w	87b82 <_svfprintf_r+0xb86>
   88436:	f852 4b04 	ldr.w	r4, [r2], #4
   8843a:	4689      	mov	r9, r1
   8843c:	2301      	movs	r3, #1
   8843e:	920e      	str	r2, [sp, #56]	; 0x38
   88440:	b2e4      	uxtb	r4, r4
   88442:	f7fe befb 	b.w	8723c <_svfprintf_r+0x240>
   88446:	f853 4b04 	ldr.w	r4, [r3], #4
   8844a:	930e      	str	r3, [sp, #56]	; 0x38
   8844c:	f7fe bef3 	b.w	87236 <_svfprintf_r+0x23a>
   88450:	f853 4b04 	ldr.w	r4, [r3], #4
   88454:	930e      	str	r3, [sp, #56]	; 0x38
   88456:	e557      	b.n	87f08 <_svfprintf_r+0xf0c>
   88458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8845a:	9908      	ldr	r1, [sp, #32]
   8845c:	f853 2b04 	ldr.w	r2, [r3], #4
   88460:	4655      	mov	r5, sl
   88462:	8011      	strh	r1, [r2, #0]
   88464:	930e      	str	r3, [sp, #56]	; 0x38
   88466:	f7fe bfc1 	b.w	873ec <_svfprintf_r+0x3f0>
   8846a:	f344 19c0 	sbfx	r9, r4, #7, #1
   8846e:	464b      	mov	r3, r9
   88470:	b264      	sxtb	r4, r4
   88472:	f7fe bea4 	b.w	871be <_svfprintf_r+0x1c2>
   88476:	990c      	ldr	r1, [sp, #48]	; 0x30
   88478:	980a      	ldr	r0, [sp, #40]	; 0x28
   8847a:	aa28      	add	r2, sp, #160	; 0xa0
   8847c:	f004 f9e6 	bl	8c84c <__ssprint_r>
   88480:	2800      	cmp	r0, #0
   88482:	f47e af1e 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88486:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8848a:	9922      	ldr	r1, [sp, #136]	; 0x88
   8848c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88490:	e73c      	b.n	8830c <_svfprintf_r+0x1310>
   88492:	990c      	ldr	r1, [sp, #48]	; 0x30
   88494:	980a      	ldr	r0, [sp, #40]	; 0x28
   88496:	aa28      	add	r2, sp, #160	; 0xa0
   88498:	f004 f9d8 	bl	8c84c <__ssprint_r>
   8849c:	2800      	cmp	r0, #0
   8849e:	f47e af10 	bne.w	872c2 <_svfprintf_r+0x2c6>
   884a2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   884a4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   884a8:	f7ff bb38 	b.w	87b1c <_svfprintf_r+0xb20>
   884ac:	2306      	movs	r3, #6
   884ae:	9307      	str	r3, [sp, #28]
   884b0:	f026 0320 	bic.w	r3, r6, #32
   884b4:	9306      	str	r3, [sp, #24]
   884b6:	e470      	b.n	87d9a <_svfprintf_r+0xd9e>
   884b8:	0008d838 	.word	0x0008d838
   884bc:	0008d830 	.word	0x0008d830
   884c0:	0008d84c 	.word	0x0008d84c
   884c4:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   884c8:	18eb      	adds	r3, r5, r3
   884ca:	429e      	cmp	r6, r3
   884cc:	46b3      	mov	fp, r6
   884ce:	9719      	str	r7, [sp, #100]	; 0x64
   884d0:	4690      	mov	r8, r2
   884d2:	460c      	mov	r4, r1
   884d4:	bf28      	it	cs
   884d6:	469b      	movcs	fp, r3
   884d8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   884dc:	9f10      	ldr	r7, [sp, #64]	; 0x40
   884de:	f7ff bb23 	b.w	87b28 <_svfprintf_r+0xb2c>
   884e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   884e4:	1cda      	adds	r2, r3, #3
   884e6:	9310      	str	r3, [sp, #64]	; 0x40
   884e8:	db02      	blt.n	884f0 <_svfprintf_r+0x14f4>
   884ea:	9a07      	ldr	r2, [sp, #28]
   884ec:	4293      	cmp	r3, r2
   884ee:	dd04      	ble.n	884fa <_svfprintf_r+0x14fe>
   884f0:	3e02      	subs	r6, #2
   884f2:	f026 0320 	bic.w	r3, r6, #32
   884f6:	9306      	str	r3, [sp, #24]
   884f8:	e48b      	b.n	87e12 <_svfprintf_r+0xe16>
   884fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   884fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   884fe:	4293      	cmp	r3, r2
   88500:	f2c0 80c2 	blt.w	88688 <_svfprintf_r+0x168c>
   88504:	f019 0f01 	tst.w	r9, #1
   88508:	f000 821d 	beq.w	88946 <_svfprintf_r+0x194a>
   8850c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8850e:	4413      	add	r3, r2
   88510:	930b      	str	r3, [sp, #44]	; 0x2c
   88512:	f419 6f80 	tst.w	r9, #1024	; 0x400
   88516:	f000 8214 	beq.w	88942 <_svfprintf_r+0x1946>
   8851a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8851c:	2667      	movs	r6, #103	; 0x67
   8851e:	2b00      	cmp	r3, #0
   88520:	dc76      	bgt.n	88610 <_svfprintf_r+0x1614>
   88522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88524:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88528:	9306      	str	r3, [sp, #24]
   8852a:	2300      	movs	r3, #0
   8852c:	930f      	str	r3, [sp, #60]	; 0x3c
   8852e:	9313      	str	r3, [sp, #76]	; 0x4c
   88530:	e4cf      	b.n	87ed2 <_svfprintf_r+0xed6>
   88532:	222d      	movs	r2, #45	; 0x2d
   88534:	2300      	movs	r3, #0
   88536:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8853a:	9307      	str	r3, [sp, #28]
   8853c:	f7fe be68 	b.w	87210 <_svfprintf_r+0x214>
   88540:	990c      	ldr	r1, [sp, #48]	; 0x30
   88542:	980a      	ldr	r0, [sp, #40]	; 0x28
   88544:	aa28      	add	r2, sp, #160	; 0xa0
   88546:	f004 f981 	bl	8c84c <__ssprint_r>
   8854a:	2800      	cmp	r0, #0
   8854c:	f47e aeb9 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88550:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88552:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88556:	f7ff bad8 	b.w	87b0a <_svfprintf_r+0xb0e>
   8855a:	4659      	mov	r1, fp
   8855c:	4650      	mov	r0, sl
   8855e:	aa28      	add	r2, sp, #160	; 0xa0
   88560:	f004 f974 	bl	8c84c <__ssprint_r>
   88564:	2800      	cmp	r0, #0
   88566:	f47e aeac 	bne.w	872c2 <_svfprintf_r+0x2c6>
   8856a:	7838      	ldrb	r0, [r7, #0]
   8856c:	992a      	ldr	r1, [sp, #168]	; 0xa8
   8856e:	aa2b      	add	r2, sp, #172	; 0xac
   88570:	4406      	add	r6, r0
   88572:	e57a      	b.n	8806a <_svfprintf_r+0x106e>
   88574:	990c      	ldr	r1, [sp, #48]	; 0x30
   88576:	980a      	ldr	r0, [sp, #40]	; 0x28
   88578:	aa28      	add	r2, sp, #160	; 0xa0
   8857a:	f004 f967 	bl	8c84c <__ssprint_r>
   8857e:	2800      	cmp	r0, #0
   88580:	f47e ae9f 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88584:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88586:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88588:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8858c:	f7ff bae1 	b.w	87b52 <_svfprintf_r+0xb56>
   88590:	9907      	ldr	r1, [sp, #28]
   88592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88594:	9101      	str	r1, [sp, #4]
   88596:	2103      	movs	r1, #3
   88598:	9100      	str	r1, [sp, #0]
   8859a:	a926      	add	r1, sp, #152	; 0x98
   8859c:	9104      	str	r1, [sp, #16]
   8859e:	a923      	add	r1, sp, #140	; 0x8c
   885a0:	9103      	str	r1, [sp, #12]
   885a2:	a922      	add	r1, sp, #136	; 0x88
   885a4:	465a      	mov	r2, fp
   885a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   885a8:	9102      	str	r1, [sp, #8]
   885aa:	f001 fad5 	bl	89b58 <_dtoa_r>
   885ae:	7803      	ldrb	r3, [r0, #0]
   885b0:	4605      	mov	r5, r0
   885b2:	2b30      	cmp	r3, #48	; 0x30
   885b4:	f000 8216 	beq.w	889e4 <_svfprintf_r+0x19e8>
   885b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   885ba:	9a07      	ldr	r2, [sp, #28]
   885bc:	46b9      	mov	r9, r7
   885be:	4413      	add	r3, r2
   885c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   885c2:	18ec      	adds	r4, r5, r3
   885c4:	4658      	mov	r0, fp
   885c6:	2200      	movs	r2, #0
   885c8:	2300      	movs	r3, #0
   885ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   885cc:	f005 f84c 	bl	8d668 <__aeabi_dcmpeq>
   885d0:	b108      	cbz	r0, 885d6 <_svfprintf_r+0x15da>
   885d2:	4623      	mov	r3, r4
   885d4:	e411      	b.n	87dfa <_svfprintf_r+0xdfe>
   885d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   885d8:	42a3      	cmp	r3, r4
   885da:	f4bf ac0e 	bcs.w	87dfa <_svfprintf_r+0xdfe>
   885de:	2130      	movs	r1, #48	; 0x30
   885e0:	1c5a      	adds	r2, r3, #1
   885e2:	9226      	str	r2, [sp, #152]	; 0x98
   885e4:	7019      	strb	r1, [r3, #0]
   885e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   885e8:	429c      	cmp	r4, r3
   885ea:	d8f9      	bhi.n	885e0 <_svfprintf_r+0x15e4>
   885ec:	e405      	b.n	87dfa <_svfprintf_r+0xdfe>
   885ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
   885f0:	2a00      	cmp	r2, #0
   885f2:	9210      	str	r2, [sp, #64]	; 0x40
   885f4:	f340 820e 	ble.w	88a14 <_svfprintf_r+0x1a18>
   885f8:	9907      	ldr	r1, [sp, #28]
   885fa:	f009 0301 	and.w	r3, r9, #1
   885fe:	430b      	orrs	r3, r1
   88600:	f040 817e 	bne.w	88900 <_svfprintf_r+0x1904>
   88604:	2666      	movs	r6, #102	; 0x66
   88606:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88608:	930b      	str	r3, [sp, #44]	; 0x2c
   8860a:	f419 6f80 	tst.w	r9, #1024	; 0x400
   8860e:	d088      	beq.n	88522 <_svfprintf_r+0x1526>
   88610:	9919      	ldr	r1, [sp, #100]	; 0x64
   88612:	780b      	ldrb	r3, [r1, #0]
   88614:	2bff      	cmp	r3, #255	; 0xff
   88616:	f000 8225 	beq.w	88a64 <_svfprintf_r+0x1a68>
   8861a:	2400      	movs	r4, #0
   8861c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8861e:	4620      	mov	r0, r4
   88620:	e004      	b.n	8862c <_svfprintf_r+0x1630>
   88622:	3001      	adds	r0, #1
   88624:	3101      	adds	r1, #1
   88626:	2bff      	cmp	r3, #255	; 0xff
   88628:	f000 8159 	beq.w	888de <_svfprintf_r+0x18e2>
   8862c:	4293      	cmp	r3, r2
   8862e:	f280 8156 	bge.w	888de <_svfprintf_r+0x18e2>
   88632:	1ad2      	subs	r2, r2, r3
   88634:	784b      	ldrb	r3, [r1, #1]
   88636:	2b00      	cmp	r3, #0
   88638:	d1f3      	bne.n	88622 <_svfprintf_r+0x1626>
   8863a:	780b      	ldrb	r3, [r1, #0]
   8863c:	3401      	adds	r4, #1
   8863e:	e7f2      	b.n	88626 <_svfprintf_r+0x162a>
   88640:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   88644:	f7ff b9da 	b.w	879fc <_svfprintf_r+0xa00>
   88648:	9b07      	ldr	r3, [sp, #28]
   8864a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8864e:	940e      	str	r4, [sp, #56]	; 0x38
   88650:	9306      	str	r3, [sp, #24]
   88652:	930b      	str	r3, [sp, #44]	; 0x2c
   88654:	9007      	str	r0, [sp, #28]
   88656:	900f      	str	r0, [sp, #60]	; 0x3c
   88658:	9013      	str	r0, [sp, #76]	; 0x4c
   8865a:	9010      	str	r0, [sp, #64]	; 0x40
   8865c:	f7fe bdd6 	b.w	8720c <_svfprintf_r+0x210>
   88660:	990c      	ldr	r1, [sp, #48]	; 0x30
   88662:	980a      	ldr	r0, [sp, #40]	; 0x28
   88664:	aa28      	add	r2, sp, #160	; 0xa0
   88666:	f004 f8f1 	bl	8c84c <__ssprint_r>
   8866a:	2800      	cmp	r0, #0
   8866c:	f47e ae29 	bne.w	872c2 <_svfprintf_r+0x2c6>
   88670:	9d22      	ldr	r5, [sp, #136]	; 0x88
   88672:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88674:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88676:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8867a:	1b5d      	subs	r5, r3, r5
   8867c:	f7ff ba81 	b.w	87b82 <_svfprintf_r+0xb86>
   88680:	2300      	movs	r3, #0
   88682:	9307      	str	r3, [sp, #28]
   88684:	f7fe bd0b 	b.w	8709e <_svfprintf_r+0xa2>
   88688:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8868a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8868c:	189a      	adds	r2, r3, r2
   8868e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88690:	920b      	str	r2, [sp, #44]	; 0x2c
   88692:	2b00      	cmp	r3, #0
   88694:	f340 8185 	ble.w	889a2 <_svfprintf_r+0x19a6>
   88698:	2667      	movs	r6, #103	; 0x67
   8869a:	e7b6      	b.n	8860a <_svfprintf_r+0x160e>
   8869c:	2330      	movs	r3, #48	; 0x30
   8869e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   886a2:	2358      	movs	r3, #88	; 0x58
   886a4:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   886a8:	9b07      	ldr	r3, [sp, #28]
   886aa:	f047 0402 	orr.w	r4, r7, #2
   886ae:	2b63      	cmp	r3, #99	; 0x63
   886b0:	f300 80c4 	bgt.w	8883c <_svfprintf_r+0x1840>
   886b4:	2300      	movs	r3, #0
   886b6:	ad3b      	add	r5, sp, #236	; 0xec
   886b8:	930d      	str	r3, [sp, #52]	; 0x34
   886ba:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   886be:	930f      	str	r3, [sp, #60]	; 0x3c
   886c0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   886c4:	4613      	mov	r3, r2
   886c6:	2b00      	cmp	r3, #0
   886c8:	4627      	mov	r7, r4
   886ca:	f2c0 8084 	blt.w	887d6 <_svfprintf_r+0x17da>
   886ce:	930b      	str	r3, [sp, #44]	; 0x2c
   886d0:	2300      	movs	r3, #0
   886d2:	468b      	mov	fp, r1
   886d4:	931d      	str	r3, [sp, #116]	; 0x74
   886d6:	f026 0320 	bic.w	r3, r6, #32
   886da:	9306      	str	r3, [sp, #24]
   886dc:	2e61      	cmp	r6, #97	; 0x61
   886de:	f000 8118 	beq.w	88912 <_svfprintf_r+0x1916>
   886e2:	2e41      	cmp	r6, #65	; 0x41
   886e4:	f47f ab67 	bne.w	87db6 <_svfprintf_r+0xdba>
   886e8:	aa22      	add	r2, sp, #136	; 0x88
   886ea:	4658      	mov	r0, fp
   886ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   886ee:	f004 f81d 	bl	8c72c <frexp>
   886f2:	2200      	movs	r2, #0
   886f4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   886f8:	f004 fd4e 	bl	8d198 <__aeabi_dmul>
   886fc:	4602      	mov	r2, r0
   886fe:	460b      	mov	r3, r1
   88700:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88704:	2200      	movs	r2, #0
   88706:	2300      	movs	r3, #0
   88708:	f004 ffae 	bl	8d668 <__aeabi_dcmpeq>
   8870c:	b108      	cbz	r0, 88712 <_svfprintf_r+0x1716>
   8870e:	2301      	movs	r3, #1
   88710:	9322      	str	r3, [sp, #136]	; 0x88
   88712:	4bad      	ldr	r3, [pc, #692]	; (889c8 <_svfprintf_r+0x19cc>)
   88714:	930b      	str	r3, [sp, #44]	; 0x2c
   88716:	9b07      	ldr	r3, [sp, #28]
   88718:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   8871c:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   88720:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88724:	46ab      	mov	fp, r5
   88726:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   8872a:	f103 39ff 	add.w	r9, r3, #4294967295
   8872e:	9510      	str	r5, [sp, #64]	; 0x40
   88730:	e006      	b.n	88740 <_svfprintf_r+0x1744>
   88732:	2200      	movs	r2, #0
   88734:	2300      	movs	r3, #0
   88736:	f109 39ff 	add.w	r9, r9, #4294967295
   8873a:	f004 ff95 	bl	8d668 <__aeabi_dcmpeq>
   8873e:	b9e8      	cbnz	r0, 8877c <_svfprintf_r+0x1780>
   88740:	2200      	movs	r2, #0
   88742:	4ba2      	ldr	r3, [pc, #648]	; (889cc <_svfprintf_r+0x19d0>)
   88744:	4630      	mov	r0, r6
   88746:	4639      	mov	r1, r7
   88748:	f004 fd26 	bl	8d198 <__aeabi_dmul>
   8874c:	460f      	mov	r7, r1
   8874e:	4606      	mov	r6, r0
   88750:	f004 ffd2 	bl	8d6f8 <__aeabi_d2iz>
   88754:	4604      	mov	r4, r0
   88756:	f004 fcb5 	bl	8d0c4 <__aeabi_i2d>
   8875a:	460b      	mov	r3, r1
   8875c:	4602      	mov	r2, r0
   8875e:	4639      	mov	r1, r7
   88760:	4630      	mov	r0, r6
   88762:	f004 fb61 	bl	8ce28 <__aeabi_dsub>
   88766:	f81a 3004 	ldrb.w	r3, [sl, r4]
   8876a:	f1b9 3fff 	cmp.w	r9, #4294967295
   8876e:	46d8      	mov	r8, fp
   88770:	464d      	mov	r5, r9
   88772:	4606      	mov	r6, r0
   88774:	460f      	mov	r7, r1
   88776:	f80b 3b01 	strb.w	r3, [fp], #1
   8877a:	d1da      	bne.n	88732 <_svfprintf_r+0x1736>
   8877c:	4630      	mov	r0, r6
   8877e:	4639      	mov	r1, r7
   88780:	2200      	movs	r2, #0
   88782:	4b93      	ldr	r3, [pc, #588]	; (889d0 <_svfprintf_r+0x19d4>)
   88784:	46a9      	mov	r9, r5
   88786:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   8878a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8878c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   88790:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88794:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   88798:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8879a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   8879c:	f004 ff8c 	bl	8d6b8 <__aeabi_dcmpgt>
   887a0:	bb80      	cbnz	r0, 88804 <_svfprintf_r+0x1808>
   887a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   887a6:	2200      	movs	r2, #0
   887a8:	4b89      	ldr	r3, [pc, #548]	; (889d0 <_svfprintf_r+0x19d4>)
   887aa:	f004 ff5d 	bl	8d668 <__aeabi_dcmpeq>
   887ae:	b108      	cbz	r0, 887b4 <_svfprintf_r+0x17b8>
   887b0:	07e1      	lsls	r1, r4, #31
   887b2:	d427      	bmi.n	88804 <_svfprintf_r+0x1808>
   887b4:	464b      	mov	r3, r9
   887b6:	2b00      	cmp	r3, #0
   887b8:	db06      	blt.n	887c8 <_svfprintf_r+0x17cc>
   887ba:	2230      	movs	r2, #48	; 0x30
   887bc:	3301      	adds	r3, #1
   887be:	445b      	add	r3, fp
   887c0:	f80b 2b01 	strb.w	r2, [fp], #1
   887c4:	455b      	cmp	r3, fp
   887c6:	d1fb      	bne.n	887c0 <_svfprintf_r+0x17c4>
   887c8:	ebab 0305 	sub.w	r3, fp, r5
   887cc:	46b9      	mov	r9, r7
   887ce:	9312      	str	r3, [sp, #72]	; 0x48
   887d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   887d2:	f7ff bb14 	b.w	87dfe <_svfprintf_r+0xe02>
   887d6:	f026 0320 	bic.w	r3, r6, #32
   887da:	9306      	str	r3, [sp, #24]
   887dc:	222d      	movs	r2, #45	; 0x2d
   887de:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   887e2:	469b      	mov	fp, r3
   887e4:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   887e8:	921d      	str	r2, [sp, #116]	; 0x74
   887ea:	930b      	str	r3, [sp, #44]	; 0x2c
   887ec:	e776      	b.n	886dc <_svfprintf_r+0x16e0>
   887ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   887f0:	f7ff b95c 	b.w	87aac <_svfprintf_r+0xab0>
   887f4:	9b07      	ldr	r3, [sp, #28]
   887f6:	18ec      	adds	r4, r5, r3
   887f8:	e6e4      	b.n	885c4 <_svfprintf_r+0x15c8>
   887fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   887fc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 889d4 <_svfprintf_r+0x19d8>
   88800:	f7ff b827 	b.w	87852 <_svfprintf_r+0x856>
   88804:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88806:	9326      	str	r3, [sp, #152]	; 0x98
   88808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8880a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   8880e:	7bd9      	ldrb	r1, [r3, #15]
   88810:	465b      	mov	r3, fp
   88812:	428a      	cmp	r2, r1
   88814:	d109      	bne.n	8882a <_svfprintf_r+0x182e>
   88816:	2030      	movs	r0, #48	; 0x30
   88818:	f803 0c01 	strb.w	r0, [r3, #-1]
   8881c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8881e:	1e5a      	subs	r2, r3, #1
   88820:	9226      	str	r2, [sp, #152]	; 0x98
   88822:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88826:	4291      	cmp	r1, r2
   88828:	d0f6      	beq.n	88818 <_svfprintf_r+0x181c>
   8882a:	2a39      	cmp	r2, #57	; 0x39
   8882c:	bf0b      	itete	eq
   8882e:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   88830:	3201      	addne	r2, #1
   88832:	7a92      	ldrbeq	r2, [r2, #10]
   88834:	b2d2      	uxtbne	r2, r2
   88836:	f803 2c01 	strb.w	r2, [r3, #-1]
   8883a:	e7c5      	b.n	887c8 <_svfprintf_r+0x17cc>
   8883c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8883e:	1c59      	adds	r1, r3, #1
   88840:	f002 fe50 	bl	8b4e4 <_malloc_r>
   88844:	4605      	mov	r5, r0
   88846:	2800      	cmp	r0, #0
   88848:	f000 8117 	beq.w	88a7a <_svfprintf_r+0x1a7e>
   8884c:	900d      	str	r0, [sp, #52]	; 0x34
   8884e:	e734      	b.n	886ba <_svfprintf_r+0x16be>
   88850:	2102      	movs	r1, #2
   88852:	9100      	str	r1, [sp, #0]
   88854:	9907      	ldr	r1, [sp, #28]
   88856:	465a      	mov	r2, fp
   88858:	1c4c      	adds	r4, r1, #1
   8885a:	a926      	add	r1, sp, #152	; 0x98
   8885c:	9104      	str	r1, [sp, #16]
   8885e:	a923      	add	r1, sp, #140	; 0x8c
   88860:	9103      	str	r1, [sp, #12]
   88862:	a922      	add	r1, sp, #136	; 0x88
   88864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88866:	980a      	ldr	r0, [sp, #40]	; 0x28
   88868:	9401      	str	r4, [sp, #4]
   8886a:	9102      	str	r1, [sp, #8]
   8886c:	f001 f974 	bl	89b58 <_dtoa_r>
   88870:	4605      	mov	r5, r0
   88872:	46b9      	mov	r9, r7
   88874:	442c      	add	r4, r5
   88876:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   88878:	e6a4      	b.n	885c4 <_svfprintf_r+0x15c8>
   8887a:	2330      	movs	r3, #48	; 0x30
   8887c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88880:	2378      	movs	r3, #120	; 0x78
   88882:	e70f      	b.n	886a4 <_svfprintf_r+0x16a8>
   88884:	4645      	mov	r5, r8
   88886:	4688      	mov	r8, r1
   88888:	3301      	adds	r3, #1
   8888a:	4432      	add	r2, r6
   8888c:	2b07      	cmp	r3, #7
   8888e:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   88892:	f8c8 9000 	str.w	r9, [r8]
   88896:	f8c8 6004 	str.w	r6, [r8, #4]
   8889a:	f77f acb5 	ble.w	88208 <_svfprintf_r+0x120c>
   8889e:	990c      	ldr	r1, [sp, #48]	; 0x30
   888a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   888a2:	aa28      	add	r2, sp, #160	; 0xa0
   888a4:	f003 ffd2 	bl	8c84c <__ssprint_r>
   888a8:	2800      	cmp	r0, #0
   888aa:	f47e ad0a 	bne.w	872c2 <_svfprintf_r+0x2c6>
   888ae:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   888b2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   888b6:	e4a9      	b.n	8820c <_svfprintf_r+0x1210>
   888b8:	9b07      	ldr	r3, [sp, #28]
   888ba:	2b00      	cmp	r3, #0
   888bc:	bf08      	it	eq
   888be:	2301      	moveq	r3, #1
   888c0:	9307      	str	r3, [sp, #28]
   888c2:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   888c6:	930f      	str	r3, [sp, #60]	; 0x3c
   888c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   888ca:	2b00      	cmp	r3, #0
   888cc:	f2c0 80b6 	blt.w	88a3c <_svfprintf_r+0x1a40>
   888d0:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   888d4:	900d      	str	r0, [sp, #52]	; 0x34
   888d6:	930b      	str	r3, [sp, #44]	; 0x2c
   888d8:	901d      	str	r0, [sp, #116]	; 0x74
   888da:	f7ff ba73 	b.w	87dc4 <_svfprintf_r+0xdc8>
   888de:	9119      	str	r1, [sp, #100]	; 0x64
   888e0:	9210      	str	r2, [sp, #64]	; 0x40
   888e2:	9013      	str	r0, [sp, #76]	; 0x4c
   888e4:	940f      	str	r4, [sp, #60]	; 0x3c
   888e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   888e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   888ea:	991c      	ldr	r1, [sp, #112]	; 0x70
   888ec:	4413      	add	r3, r2
   888ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   888f0:	fb01 2303 	mla	r3, r1, r3, r2
   888f4:	930b      	str	r3, [sp, #44]	; 0x2c
   888f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   888fa:	9306      	str	r3, [sp, #24]
   888fc:	f7ff bae9 	b.w	87ed2 <_svfprintf_r+0xed6>
   88900:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88902:	2666      	movs	r6, #102	; 0x66
   88904:	18d3      	adds	r3, r2, r3
   88906:	4419      	add	r1, r3
   88908:	910b      	str	r1, [sp, #44]	; 0x2c
   8890a:	e67e      	b.n	8860a <_svfprintf_r+0x160e>
   8890c:	2300      	movs	r3, #0
   8890e:	930d      	str	r3, [sp, #52]	; 0x34
   88910:	e764      	b.n	887dc <_svfprintf_r+0x17e0>
   88912:	aa22      	add	r2, sp, #136	; 0x88
   88914:	4658      	mov	r0, fp
   88916:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88918:	f003 ff08 	bl	8c72c <frexp>
   8891c:	2200      	movs	r2, #0
   8891e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88922:	f004 fc39 	bl	8d198 <__aeabi_dmul>
   88926:	4602      	mov	r2, r0
   88928:	460b      	mov	r3, r1
   8892a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8892e:	2200      	movs	r2, #0
   88930:	2300      	movs	r3, #0
   88932:	f004 fe99 	bl	8d668 <__aeabi_dcmpeq>
   88936:	b108      	cbz	r0, 8893c <_svfprintf_r+0x1940>
   88938:	2301      	movs	r3, #1
   8893a:	9322      	str	r3, [sp, #136]	; 0x88
   8893c:	4b26      	ldr	r3, [pc, #152]	; (889d8 <_svfprintf_r+0x19dc>)
   8893e:	930b      	str	r3, [sp, #44]	; 0x2c
   88940:	e6e9      	b.n	88716 <_svfprintf_r+0x171a>
   88942:	2667      	movs	r6, #103	; 0x67
   88944:	e5ed      	b.n	88522 <_svfprintf_r+0x1526>
   88946:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88948:	930b      	str	r3, [sp, #44]	; 0x2c
   8894a:	e5e2      	b.n	88512 <_svfprintf_r+0x1516>
   8894c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8894e:	2003      	movs	r0, #3
   88950:	2b00      	cmp	r3, #0
   88952:	bfb8      	it	lt
   88954:	222d      	movlt	r2, #45	; 0x2d
   88956:	f04f 0300 	mov.w	r3, #0
   8895a:	bfa8      	it	ge
   8895c:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   88960:	4619      	mov	r1, r3
   88962:	930d      	str	r3, [sp, #52]	; 0x34
   88964:	4d1d      	ldr	r5, [pc, #116]	; (889dc <_svfprintf_r+0x19e0>)
   88966:	4b1e      	ldr	r3, [pc, #120]	; (889e0 <_svfprintf_r+0x19e4>)
   88968:	bfb8      	it	lt
   8896a:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   8896e:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   88972:	9006      	str	r0, [sp, #24]
   88974:	f7fe bd7f 	b.w	87476 <_svfprintf_r+0x47a>
   88978:	2900      	cmp	r1, #0
   8897a:	d144      	bne.n	88a06 <_svfprintf_r+0x1a0a>
   8897c:	2230      	movs	r2, #48	; 0x30
   8897e:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   88982:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   88986:	3330      	adds	r3, #48	; 0x30
   88988:	f802 3b01 	strb.w	r3, [r2], #1
   8898c:	ab24      	add	r3, sp, #144	; 0x90
   8898e:	1ad3      	subs	r3, r2, r3
   88990:	931a      	str	r3, [sp, #104]	; 0x68
   88992:	f7ff ba87 	b.w	87ea4 <_svfprintf_r+0xea8>
   88996:	f106 020f 	add.w	r2, r6, #15
   8899a:	2101      	movs	r1, #1
   8899c:	b2d2      	uxtb	r2, r2
   8899e:	f7ff ba41 	b.w	87e24 <_svfprintf_r+0xe28>
   889a2:	f1c3 0301 	rsb	r3, r3, #1
   889a6:	441a      	add	r2, r3
   889a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   889ac:	2667      	movs	r6, #103	; 0x67
   889ae:	920b      	str	r2, [sp, #44]	; 0x2c
   889b0:	9306      	str	r3, [sp, #24]
   889b2:	e5ba      	b.n	8852a <_svfprintf_r+0x152e>
   889b4:	f019 0f01 	tst.w	r9, #1
   889b8:	f43f aa7f 	beq.w	87eba <_svfprintf_r+0xebe>
   889bc:	f7ff ba79 	b.w	87eb2 <_svfprintf_r+0xeb6>
   889c0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   889c2:	f7ff bb7f 	b.w	880c4 <_svfprintf_r+0x10c8>
   889c6:	bf00      	nop
   889c8:	0008d81c 	.word	0x0008d81c
   889cc:	40300000 	.word	0x40300000
   889d0:	3fe00000 	.word	0x3fe00000
   889d4:	0008d84c 	.word	0x0008d84c
   889d8:	0008d808 	.word	0x0008d808
   889dc:	0008d800 	.word	0x0008d800
   889e0:	0008d804 	.word	0x0008d804
   889e4:	4658      	mov	r0, fp
   889e6:	2200      	movs	r2, #0
   889e8:	2300      	movs	r3, #0
   889ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   889ec:	f004 fe3c 	bl	8d668 <__aeabi_dcmpeq>
   889f0:	2800      	cmp	r0, #0
   889f2:	f47f ade1 	bne.w	885b8 <_svfprintf_r+0x15bc>
   889f6:	9b07      	ldr	r3, [sp, #28]
   889f8:	f1c3 0301 	rsb	r3, r3, #1
   889fc:	9322      	str	r3, [sp, #136]	; 0x88
   889fe:	e5dc      	b.n	885ba <_svfprintf_r+0x15be>
   88a00:	f8df 9098 	ldr.w	r9, [pc, #152]	; 88a9c <_svfprintf_r+0x1aa0>
   88a04:	e4ad      	b.n	88362 <_svfprintf_r+0x1366>
   88a06:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   88a0a:	e7bc      	b.n	88986 <_svfprintf_r+0x198a>
   88a0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88a0e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 88a9c <_svfprintf_r+0x1aa0>
   88a12:	e428      	b.n	88266 <_svfprintf_r+0x126a>
   88a14:	9a07      	ldr	r2, [sp, #28]
   88a16:	f009 0901 	and.w	r9, r9, #1
   88a1a:	ea59 0302 	orrs.w	r3, r9, r2
   88a1e:	d104      	bne.n	88a2a <_svfprintf_r+0x1a2e>
   88a20:	2301      	movs	r3, #1
   88a22:	2666      	movs	r6, #102	; 0x66
   88a24:	9306      	str	r3, [sp, #24]
   88a26:	930b      	str	r3, [sp, #44]	; 0x2c
   88a28:	e57f      	b.n	8852a <_svfprintf_r+0x152e>
   88a2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88a2c:	2666      	movs	r6, #102	; 0x66
   88a2e:	3301      	adds	r3, #1
   88a30:	441a      	add	r2, r3
   88a32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88a36:	920b      	str	r2, [sp, #44]	; 0x2c
   88a38:	9306      	str	r3, [sp, #24]
   88a3a:	e576      	b.n	8852a <_svfprintf_r+0x152e>
   88a3c:	900d      	str	r0, [sp, #52]	; 0x34
   88a3e:	e6cd      	b.n	887dc <_svfprintf_r+0x17e0>
   88a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88a42:	f89a 6001 	ldrb.w	r6, [sl, #1]
   88a46:	4692      	mov	sl, r2
   88a48:	f853 2b04 	ldr.w	r2, [r3], #4
   88a4c:	930e      	str	r3, [sp, #56]	; 0x38
   88a4e:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   88a52:	9307      	str	r3, [sp, #28]
   88a54:	f7fe bb21 	b.w	8709a <_svfprintf_r+0x9e>
   88a58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88a5a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 88a9c <_svfprintf_r+0x1aa0>
   88a5e:	e4b1      	b.n	883c4 <_svfprintf_r+0x13c8>
   88a60:	9c07      	ldr	r4, [sp, #28]
   88a62:	e706      	b.n	88872 <_svfprintf_r+0x1876>
   88a64:	2300      	movs	r3, #0
   88a66:	930f      	str	r3, [sp, #60]	; 0x3c
   88a68:	9313      	str	r3, [sp, #76]	; 0x4c
   88a6a:	e73c      	b.n	888e6 <_svfprintf_r+0x18ea>
   88a6c:	f8df 902c 	ldr.w	r9, [pc, #44]	; 88a9c <_svfprintf_r+0x1aa0>
   88a70:	e70a      	b.n	88888 <_svfprintf_r+0x188c>
   88a72:	2302      	movs	r3, #2
   88a74:	931a      	str	r3, [sp, #104]	; 0x68
   88a76:	f7ff ba15 	b.w	87ea4 <_svfprintf_r+0xea8>
   88a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
   88a7c:	898b      	ldrh	r3, [r1, #12]
   88a7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   88a82:	4613      	mov	r3, r2
   88a84:	818a      	strh	r2, [r1, #12]
   88a86:	f7fe bc24 	b.w	872d2 <_svfprintf_r+0x2d6>
   88a8a:	f04f 32ff 	mov.w	r2, #4294967295
   88a8e:	230c      	movs	r3, #12
   88a90:	9208      	str	r2, [sp, #32]
   88a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88a94:	6013      	str	r3, [r2, #0]
   88a96:	f7fe bc23 	b.w	872e0 <_svfprintf_r+0x2e4>
   88a9a:	bf00      	nop
   88a9c:	0008d84c 	.word	0x0008d84c

00088aa0 <__sprint_r.part.0>:
   88aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88aa4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88aa6:	4690      	mov	r8, r2
   88aa8:	049c      	lsls	r4, r3, #18
   88aaa:	d52d      	bpl.n	88b08 <__sprint_r.part.0+0x68>
   88aac:	6893      	ldr	r3, [r2, #8]
   88aae:	6812      	ldr	r2, [r2, #0]
   88ab0:	b343      	cbz	r3, 88b04 <__sprint_r.part.0+0x64>
   88ab2:	468b      	mov	fp, r1
   88ab4:	4606      	mov	r6, r0
   88ab6:	f102 0908 	add.w	r9, r2, #8
   88aba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88abe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88ac2:	d015      	beq.n	88af0 <__sprint_r.part.0+0x50>
   88ac4:	2400      	movs	r4, #0
   88ac6:	3d04      	subs	r5, #4
   88ac8:	e001      	b.n	88ace <__sprint_r.part.0+0x2e>
   88aca:	42a7      	cmp	r7, r4
   88acc:	d00e      	beq.n	88aec <__sprint_r.part.0+0x4c>
   88ace:	465a      	mov	r2, fp
   88ad0:	4630      	mov	r0, r6
   88ad2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   88ad6:	f002 f963 	bl	8ada0 <_fputwc_r>
   88ada:	1c43      	adds	r3, r0, #1
   88adc:	f104 0401 	add.w	r4, r4, #1
   88ae0:	d1f3      	bne.n	88aca <__sprint_r.part.0+0x2a>
   88ae2:	2300      	movs	r3, #0
   88ae4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88af0:	f02a 0a03 	bic.w	sl, sl, #3
   88af4:	eba3 030a 	sub.w	r3, r3, sl
   88af8:	f8c8 3008 	str.w	r3, [r8, #8]
   88afc:	f109 0908 	add.w	r9, r9, #8
   88b00:	2b00      	cmp	r3, #0
   88b02:	d1da      	bne.n	88aba <__sprint_r.part.0+0x1a>
   88b04:	2000      	movs	r0, #0
   88b06:	e7ec      	b.n	88ae2 <__sprint_r.part.0+0x42>
   88b08:	f002 face 	bl	8b0a8 <__sfvwrite_r>
   88b0c:	2300      	movs	r3, #0
   88b0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b16:	bf00      	nop

00088b18 <_vfiprintf_r>:
   88b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88b1c:	b0bd      	sub	sp, #244	; 0xf4
   88b1e:	461c      	mov	r4, r3
   88b20:	4617      	mov	r7, r2
   88b22:	e9cd 3005 	strd	r3, r0, [sp, #20]
   88b26:	9102      	str	r1, [sp, #8]
   88b28:	b118      	cbz	r0, 88b32 <_vfiprintf_r+0x1a>
   88b2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88b2c:	2b00      	cmp	r3, #0
   88b2e:	f000 8277 	beq.w	89020 <_vfiprintf_r+0x508>
   88b32:	9a02      	ldr	r2, [sp, #8]
   88b34:	6e53      	ldr	r3, [r2, #100]	; 0x64
   88b36:	07de      	lsls	r6, r3, #31
   88b38:	f140 8184 	bpl.w	88e44 <_vfiprintf_r+0x32c>
   88b3c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   88b40:	b28a      	uxth	r2, r1
   88b42:	0490      	lsls	r0, r2, #18
   88b44:	d408      	bmi.n	88b58 <_vfiprintf_r+0x40>
   88b46:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   88b4a:	9902      	ldr	r1, [sp, #8]
   88b4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88b4e:	818a      	strh	r2, [r1, #12]
   88b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   88b54:	b292      	uxth	r2, r2
   88b56:	664b      	str	r3, [r1, #100]	; 0x64
   88b58:	0711      	lsls	r1, r2, #28
   88b5a:	f140 80ec 	bpl.w	88d36 <_vfiprintf_r+0x21e>
   88b5e:	9b02      	ldr	r3, [sp, #8]
   88b60:	691b      	ldr	r3, [r3, #16]
   88b62:	2b00      	cmp	r3, #0
   88b64:	f000 80e7 	beq.w	88d36 <_vfiprintf_r+0x21e>
   88b68:	f002 031a 	and.w	r3, r2, #26
   88b6c:	2b0a      	cmp	r3, #10
   88b6e:	f000 80f0 	beq.w	88d52 <_vfiprintf_r+0x23a>
   88b72:	ab13      	add	r3, sp, #76	; 0x4c
   88b74:	9310      	str	r3, [sp, #64]	; 0x40
   88b76:	2300      	movs	r3, #0
   88b78:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   88b7c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   88b80:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   88b84:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88b88:	9304      	str	r3, [sp, #16]
   88b8a:	783b      	ldrb	r3, [r7, #0]
   88b8c:	2b00      	cmp	r3, #0
   88b8e:	f000 8146 	beq.w	88e1e <_vfiprintf_r+0x306>
   88b92:	463c      	mov	r4, r7
   88b94:	e004      	b.n	88ba0 <_vfiprintf_r+0x88>
   88b96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88b9a:	2b00      	cmp	r3, #0
   88b9c:	f000 8121 	beq.w	88de2 <_vfiprintf_r+0x2ca>
   88ba0:	2b25      	cmp	r3, #37	; 0x25
   88ba2:	d1f8      	bne.n	88b96 <_vfiprintf_r+0x7e>
   88ba4:	1be5      	subs	r5, r4, r7
   88ba6:	f040 811e 	bne.w	88de6 <_vfiprintf_r+0x2ce>
   88baa:	7823      	ldrb	r3, [r4, #0]
   88bac:	2b00      	cmp	r3, #0
   88bae:	f000 8136 	beq.w	88e1e <_vfiprintf_r+0x306>
   88bb2:	f04f 0300 	mov.w	r3, #0
   88bb6:	2500      	movs	r5, #0
   88bb8:	f04f 3bff 	mov.w	fp, #4294967295
   88bbc:	f04f 082b 	mov.w	r8, #43	; 0x2b
   88bc0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88bc4:	7863      	ldrb	r3, [r4, #1]
   88bc6:	9503      	str	r5, [sp, #12]
   88bc8:	1c67      	adds	r7, r4, #1
   88bca:	3701      	adds	r7, #1
   88bcc:	f1a3 0220 	sub.w	r2, r3, #32
   88bd0:	2a5a      	cmp	r2, #90	; 0x5a
   88bd2:	f200 8146 	bhi.w	88e62 <_vfiprintf_r+0x34a>
   88bd6:	e8df f012 	tbh	[pc, r2, lsl #1]
   88bda:	02a1      	.short	0x02a1
   88bdc:	01440144 	.word	0x01440144
   88be0:	0144029d 	.word	0x0144029d
   88be4:	01440144 	.word	0x01440144
   88be8:	0144027c 	.word	0x0144027c
   88bec:	006a0144 	.word	0x006a0144
   88bf0:	01440253 	.word	0x01440253
   88bf4:	02af0229 	.word	0x02af0229
   88bf8:	02ab0144 	.word	0x02ab0144
   88bfc:	005b005b 	.word	0x005b005b
   88c00:	005b005b 	.word	0x005b005b
   88c04:	005b005b 	.word	0x005b005b
   88c08:	005b005b 	.word	0x005b005b
   88c0c:	0144005b 	.word	0x0144005b
   88c10:	01440144 	.word	0x01440144
   88c14:	01440144 	.word	0x01440144
   88c18:	01440144 	.word	0x01440144
   88c1c:	01440144 	.word	0x01440144
   88c20:	00780213 	.word	0x00780213
   88c24:	01440144 	.word	0x01440144
   88c28:	01440144 	.word	0x01440144
   88c2c:	01440144 	.word	0x01440144
   88c30:	01440144 	.word	0x01440144
   88c34:	01440144 	.word	0x01440144
   88c38:	014400d1 	.word	0x014400d1
   88c3c:	01440144 	.word	0x01440144
   88c40:	014401f7 	.word	0x014401f7
   88c44:	01440241 	.word	0x01440241
   88c48:	05210144 	.word	0x05210144
   88c4c:	01440144 	.word	0x01440144
   88c50:	01440144 	.word	0x01440144
   88c54:	01440144 	.word	0x01440144
   88c58:	01440144 	.word	0x01440144
   88c5c:	01440144 	.word	0x01440144
   88c60:	007a0213 	.word	0x007a0213
   88c64:	01440144 	.word	0x01440144
   88c68:	02370144 	.word	0x02370144
   88c6c:	0074007a 	.word	0x0074007a
   88c70:	022d0144 	.word	0x022d0144
   88c74:	02690144 	.word	0x02690144
   88c78:	025700d3 	.word	0x025700d3
   88c7c:	01440074 	.word	0x01440074
   88c80:	007201f7 	.word	0x007201f7
   88c84:	01440541 	.word	0x01440541
   88c88:	05430144 	.word	0x05430144
   88c8c:	00720144 	.word	0x00720144
   88c90:	2100      	movs	r1, #0
   88c92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88c96:	f817 3b01 	ldrb.w	r3, [r7], #1
   88c9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88c9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88ca2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88ca6:	2a09      	cmp	r2, #9
   88ca8:	d9f5      	bls.n	88c96 <_vfiprintf_r+0x17e>
   88caa:	9103      	str	r1, [sp, #12]
   88cac:	e78e      	b.n	88bcc <_vfiprintf_r+0xb4>
   88cae:	9b05      	ldr	r3, [sp, #20]
   88cb0:	f853 2b04 	ldr.w	r2, [r3], #4
   88cb4:	2a00      	cmp	r2, #0
   88cb6:	9203      	str	r2, [sp, #12]
   88cb8:	9305      	str	r3, [sp, #20]
   88cba:	f2c0 81b4 	blt.w	89026 <_vfiprintf_r+0x50e>
   88cbe:	783b      	ldrb	r3, [r7, #0]
   88cc0:	e783      	b.n	88bca <_vfiprintf_r+0xb2>
   88cc2:	783b      	ldrb	r3, [r7, #0]
   88cc4:	f045 0520 	orr.w	r5, r5, #32
   88cc8:	e77f      	b.n	88bca <_vfiprintf_r+0xb2>
   88cca:	f045 0510 	orr.w	r5, r5, #16
   88cce:	06ac      	lsls	r4, r5, #26
   88cd0:	9e05      	ldr	r6, [sp, #20]
   88cd2:	f140 816b 	bpl.w	88fac <_vfiprintf_r+0x494>
   88cd6:	3607      	adds	r6, #7
   88cd8:	f026 0607 	bic.w	r6, r6, #7
   88cdc:	4632      	mov	r2, r6
   88cde:	6873      	ldr	r3, [r6, #4]
   88ce0:	f852 6b08 	ldr.w	r6, [r2], #8
   88ce4:	4698      	mov	r8, r3
   88ce6:	9205      	str	r2, [sp, #20]
   88ce8:	2b00      	cmp	r3, #0
   88cea:	f2c0 8449 	blt.w	89580 <_vfiprintf_r+0xa68>
   88cee:	f1bb 3fff 	cmp.w	fp, #4294967295
   88cf2:	f000 8531 	beq.w	89758 <_vfiprintf_r+0xc40>
   88cf6:	ea56 0308 	orrs.w	r3, r6, r8
   88cfa:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   88cfe:	f000 8425 	beq.w	8954c <_vfiprintf_r+0xa34>
   88d02:	2e0a      	cmp	r6, #10
   88d04:	f178 0300 	sbcs.w	r3, r8, #0
   88d08:	f080 84e1 	bcs.w	896ce <_vfiprintf_r+0xbb6>
   88d0c:	2301      	movs	r3, #1
   88d0e:	4655      	mov	r5, sl
   88d10:	3630      	adds	r6, #48	; 0x30
   88d12:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   88d16:	9301      	str	r3, [sp, #4]
   88d18:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   88d1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   88d20:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   88d24:	45d8      	cmp	r8, fp
   88d26:	bfb8      	it	lt
   88d28:	46d8      	movlt	r8, fp
   88d2a:	2b00      	cmp	r3, #0
   88d2c:	f000 80a8 	beq.w	88e80 <_vfiprintf_r+0x368>
   88d30:	f108 0801 	add.w	r8, r8, #1
   88d34:	e0a4      	b.n	88e80 <_vfiprintf_r+0x368>
   88d36:	9d02      	ldr	r5, [sp, #8]
   88d38:	9806      	ldr	r0, [sp, #24]
   88d3a:	4629      	mov	r1, r5
   88d3c:	f000 fdfa 	bl	89934 <__swsetup_r>
   88d40:	2800      	cmp	r0, #0
   88d42:	f040 8594 	bne.w	8986e <_vfiprintf_r+0xd56>
   88d46:	89aa      	ldrh	r2, [r5, #12]
   88d48:	f002 031a 	and.w	r3, r2, #26
   88d4c:	2b0a      	cmp	r3, #10
   88d4e:	f47f af10 	bne.w	88b72 <_vfiprintf_r+0x5a>
   88d52:	9902      	ldr	r1, [sp, #8]
   88d54:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   88d58:	2b00      	cmp	r3, #0
   88d5a:	f6ff af0a 	blt.w	88b72 <_vfiprintf_r+0x5a>
   88d5e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88d60:	07de      	lsls	r6, r3, #31
   88d62:	d402      	bmi.n	88d6a <_vfiprintf_r+0x252>
   88d64:	0595      	lsls	r5, r2, #22
   88d66:	f140 8562 	bpl.w	8982e <_vfiprintf_r+0xd16>
   88d6a:	4623      	mov	r3, r4
   88d6c:	463a      	mov	r2, r7
   88d6e:	9902      	ldr	r1, [sp, #8]
   88d70:	9806      	ldr	r0, [sp, #24]
   88d72:	b03d      	add	sp, #244	; 0xf4
   88d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d78:	f000 bd9a 	b.w	898b0 <__sbprintf>
   88d7c:	f045 0510 	orr.w	r5, r5, #16
   88d80:	f015 0820 	ands.w	r8, r5, #32
   88d84:	f000 8103 	beq.w	88f8e <_vfiprintf_r+0x476>
   88d88:	9e05      	ldr	r6, [sp, #20]
   88d8a:	3607      	adds	r6, #7
   88d8c:	f026 0607 	bic.w	r6, r6, #7
   88d90:	4633      	mov	r3, r6
   88d92:	f8d6 8004 	ldr.w	r8, [r6, #4]
   88d96:	f853 6b08 	ldr.w	r6, [r3], #8
   88d9a:	9305      	str	r3, [sp, #20]
   88d9c:	2300      	movs	r3, #0
   88d9e:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   88da2:	f04f 0200 	mov.w	r2, #0
   88da6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   88daa:	f1bb 3fff 	cmp.w	fp, #4294967295
   88dae:	f000 81dd 	beq.w	8916c <_vfiprintf_r+0x654>
   88db2:	ea56 0208 	orrs.w	r2, r6, r8
   88db6:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   88dba:	f040 81d6 	bne.w	8916a <_vfiprintf_r+0x652>
   88dbe:	f1bb 0f00 	cmp.w	fp, #0
   88dc2:	f040 84cc 	bne.w	8975e <_vfiprintf_r+0xc46>
   88dc6:	2b00      	cmp	r3, #0
   88dc8:	f040 83c5 	bne.w	89556 <_vfiprintf_r+0xa3e>
   88dcc:	f01a 0301 	ands.w	r3, sl, #1
   88dd0:	9301      	str	r3, [sp, #4]
   88dd2:	f000 83ec 	beq.w	895ae <_vfiprintf_r+0xa96>
   88dd6:	2330      	movs	r3, #48	; 0x30
   88dd8:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   88ddc:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   88de0:	e79c      	b.n	88d1c <_vfiprintf_r+0x204>
   88de2:	1be5      	subs	r5, r4, r7
   88de4:	d01b      	beq.n	88e1e <_vfiprintf_r+0x306>
   88de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88de8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88dea:	3301      	adds	r3, #1
   88dec:	442a      	add	r2, r5
   88dee:	2b07      	cmp	r3, #7
   88df0:	e9c9 7500 	strd	r7, r5, [r9]
   88df4:	9212      	str	r2, [sp, #72]	; 0x48
   88df6:	9311      	str	r3, [sp, #68]	; 0x44
   88df8:	dc05      	bgt.n	88e06 <_vfiprintf_r+0x2ee>
   88dfa:	f109 0908 	add.w	r9, r9, #8
   88dfe:	9b04      	ldr	r3, [sp, #16]
   88e00:	442b      	add	r3, r5
   88e02:	9304      	str	r3, [sp, #16]
   88e04:	e6d1      	b.n	88baa <_vfiprintf_r+0x92>
   88e06:	2a00      	cmp	r2, #0
   88e08:	f000 839c 	beq.w	89544 <_vfiprintf_r+0xa2c>
   88e0c:	9902      	ldr	r1, [sp, #8]
   88e0e:	9806      	ldr	r0, [sp, #24]
   88e10:	aa10      	add	r2, sp, #64	; 0x40
   88e12:	f7ff fe45 	bl	88aa0 <__sprint_r.part.0>
   88e16:	b940      	cbnz	r0, 88e2a <_vfiprintf_r+0x312>
   88e18:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88e1c:	e7ef      	b.n	88dfe <_vfiprintf_r+0x2e6>
   88e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88e20:	2b00      	cmp	r3, #0
   88e22:	f040 8515 	bne.w	89850 <_vfiprintf_r+0xd38>
   88e26:	2300      	movs	r3, #0
   88e28:	9311      	str	r3, [sp, #68]	; 0x44
   88e2a:	9a02      	ldr	r2, [sp, #8]
   88e2c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   88e2e:	07d9      	lsls	r1, r3, #31
   88e30:	f140 80a2 	bpl.w	88f78 <_vfiprintf_r+0x460>
   88e34:	8993      	ldrh	r3, [r2, #12]
   88e36:	065b      	lsls	r3, r3, #25
   88e38:	f100 8525 	bmi.w	89886 <_vfiprintf_r+0xd6e>
   88e3c:	9804      	ldr	r0, [sp, #16]
   88e3e:	b03d      	add	sp, #244	; 0xf4
   88e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e44:	9b02      	ldr	r3, [sp, #8]
   88e46:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   88e4a:	058d      	lsls	r5, r1, #22
   88e4c:	b28a      	uxth	r2, r1
   88e4e:	f53f ae78 	bmi.w	88b42 <_vfiprintf_r+0x2a>
   88e52:	461d      	mov	r5, r3
   88e54:	6d98      	ldr	r0, [r3, #88]	; 0x58
   88e56:	f002 fad1 	bl	8b3fc <__retarget_lock_acquire_recursive>
   88e5a:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   88e5e:	b28a      	uxth	r2, r1
   88e60:	e66f      	b.n	88b42 <_vfiprintf_r+0x2a>
   88e62:	2b00      	cmp	r3, #0
   88e64:	d0db      	beq.n	88e1e <_vfiprintf_r+0x306>
   88e66:	f04f 0801 	mov.w	r8, #1
   88e6a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88e6e:	f04f 0300 	mov.w	r3, #0
   88e72:	ac23      	add	r4, sp, #140	; 0x8c
   88e74:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88e78:	f8cd 8004 	str.w	r8, [sp, #4]
   88e7c:	f04f 0b00 	mov.w	fp, #0
   88e80:	f015 0302 	ands.w	r3, r5, #2
   88e84:	9307      	str	r3, [sp, #28]
   88e86:	bf18      	it	ne
   88e88:	f108 0802 	addne.w	r8, r8, #2
   88e8c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   88e90:	9308      	str	r3, [sp, #32]
   88e92:	d105      	bne.n	88ea0 <_vfiprintf_r+0x388>
   88e94:	9b03      	ldr	r3, [sp, #12]
   88e96:	eba3 0608 	sub.w	r6, r3, r8
   88e9a:	2e00      	cmp	r6, #0
   88e9c:	f300 828a 	bgt.w	893b4 <_vfiprintf_r+0x89c>
   88ea0:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88ea4:	1c48      	adds	r0, r1, #1
   88ea6:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   88eaa:	b176      	cbz	r6, 88eca <_vfiprintf_r+0x3b2>
   88eac:	2101      	movs	r1, #1
   88eae:	3201      	adds	r2, #1
   88eb0:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   88eb4:	2807      	cmp	r0, #7
   88eb6:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88eba:	e9c9 6100 	strd	r6, r1, [r9]
   88ebe:	f300 8258 	bgt.w	89372 <_vfiprintf_r+0x85a>
   88ec2:	4601      	mov	r1, r0
   88ec4:	f109 0908 	add.w	r9, r9, #8
   88ec8:	3001      	adds	r0, #1
   88eca:	9b07      	ldr	r3, [sp, #28]
   88ecc:	b1d3      	cbz	r3, 88f04 <_vfiprintf_r+0x3ec>
   88ece:	2302      	movs	r3, #2
   88ed0:	3202      	adds	r2, #2
   88ed2:	f8c9 3004 	str.w	r3, [r9, #4]
   88ed6:	2807      	cmp	r0, #7
   88ed8:	ab0f      	add	r3, sp, #60	; 0x3c
   88eda:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88ede:	f8c9 3000 	str.w	r3, [r9]
   88ee2:	f340 8262 	ble.w	893aa <_vfiprintf_r+0x892>
   88ee6:	2a00      	cmp	r2, #0
   88ee8:	f000 8327 	beq.w	8953a <_vfiprintf_r+0xa22>
   88eec:	9902      	ldr	r1, [sp, #8]
   88eee:	9806      	ldr	r0, [sp, #24]
   88ef0:	aa10      	add	r2, sp, #64	; 0x40
   88ef2:	f7ff fdd5 	bl	88aa0 <__sprint_r.part.0>
   88ef6:	2800      	cmp	r0, #0
   88ef8:	d197      	bne.n	88e2a <_vfiprintf_r+0x312>
   88efa:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88efe:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f02:	1c48      	adds	r0, r1, #1
   88f04:	9b08      	ldr	r3, [sp, #32]
   88f06:	2b80      	cmp	r3, #128	; 0x80
   88f08:	f000 8171 	beq.w	891ee <_vfiprintf_r+0x6d6>
   88f0c:	9b01      	ldr	r3, [sp, #4]
   88f0e:	ebab 0603 	sub.w	r6, fp, r3
   88f12:	2e00      	cmp	r6, #0
   88f14:	f300 81cf 	bgt.w	892b6 <_vfiprintf_r+0x79e>
   88f18:	9b01      	ldr	r3, [sp, #4]
   88f1a:	2807      	cmp	r0, #7
   88f1c:	441a      	add	r2, r3
   88f1e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88f22:	f8c9 4000 	str.w	r4, [r9]
   88f26:	f8c9 3004 	str.w	r3, [r9, #4]
   88f2a:	f340 815d 	ble.w	891e8 <_vfiprintf_r+0x6d0>
   88f2e:	2a00      	cmp	r2, #0
   88f30:	f000 8293 	beq.w	8945a <_vfiprintf_r+0x942>
   88f34:	9902      	ldr	r1, [sp, #8]
   88f36:	9806      	ldr	r0, [sp, #24]
   88f38:	aa10      	add	r2, sp, #64	; 0x40
   88f3a:	f7ff fdb1 	bl	88aa0 <__sprint_r.part.0>
   88f3e:	2800      	cmp	r0, #0
   88f40:	f47f af73 	bne.w	88e2a <_vfiprintf_r+0x312>
   88f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88f46:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f4a:	0768      	lsls	r0, r5, #29
   88f4c:	d505      	bpl.n	88f5a <_vfiprintf_r+0x442>
   88f4e:	9b03      	ldr	r3, [sp, #12]
   88f50:	eba3 0408 	sub.w	r4, r3, r8
   88f54:	2c00      	cmp	r4, #0
   88f56:	f300 828a 	bgt.w	8946e <_vfiprintf_r+0x956>
   88f5a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   88f5e:	4541      	cmp	r1, r8
   88f60:	bfac      	ite	ge
   88f62:	185b      	addge	r3, r3, r1
   88f64:	4443      	addlt	r3, r8
   88f66:	9304      	str	r3, [sp, #16]
   88f68:	2a00      	cmp	r2, #0
   88f6a:	f040 81f3 	bne.w	89354 <_vfiprintf_r+0x83c>
   88f6e:	2300      	movs	r3, #0
   88f70:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f74:	9311      	str	r3, [sp, #68]	; 0x44
   88f76:	e608      	b.n	88b8a <_vfiprintf_r+0x72>
   88f78:	9b02      	ldr	r3, [sp, #8]
   88f7a:	899b      	ldrh	r3, [r3, #12]
   88f7c:	059a      	lsls	r2, r3, #22
   88f7e:	f53f af5a 	bmi.w	88e36 <_vfiprintf_r+0x31e>
   88f82:	9c02      	ldr	r4, [sp, #8]
   88f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   88f86:	f002 fa3b 	bl	8b400 <__retarget_lock_release_recursive>
   88f8a:	89a3      	ldrh	r3, [r4, #12]
   88f8c:	e753      	b.n	88e36 <_vfiprintf_r+0x31e>
   88f8e:	f015 0310 	ands.w	r3, r5, #16
   88f92:	f040 8318 	bne.w	895c6 <_vfiprintf_r+0xaae>
   88f96:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   88f9a:	f000 8310 	beq.w	895be <_vfiprintf_r+0xaa6>
   88f9e:	9e05      	ldr	r6, [sp, #20]
   88fa0:	4698      	mov	r8, r3
   88fa2:	f856 3b04 	ldr.w	r3, [r6], #4
   88fa6:	9605      	str	r6, [sp, #20]
   88fa8:	b29e      	uxth	r6, r3
   88faa:	e6f7      	b.n	88d9c <_vfiprintf_r+0x284>
   88fac:	f856 3b04 	ldr.w	r3, [r6], #4
   88fb0:	06e8      	lsls	r0, r5, #27
   88fb2:	9605      	str	r6, [sp, #20]
   88fb4:	f100 8310 	bmi.w	895d8 <_vfiprintf_r+0xac0>
   88fb8:	0669      	lsls	r1, r5, #25
   88fba:	f140 830a 	bpl.w	895d2 <_vfiprintf_r+0xaba>
   88fbe:	f343 38c0 	sbfx	r8, r3, #15, #1
   88fc2:	b21e      	sxth	r6, r3
   88fc4:	4643      	mov	r3, r8
   88fc6:	e68f      	b.n	88ce8 <_vfiprintf_r+0x1d0>
   88fc8:	f04f 0300 	mov.w	r3, #0
   88fcc:	9e05      	ldr	r6, [sp, #20]
   88fce:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88fd2:	f856 4b04 	ldr.w	r4, [r6], #4
   88fd6:	2c00      	cmp	r4, #0
   88fd8:	f000 83cf 	beq.w	8977a <_vfiprintf_r+0xc62>
   88fdc:	f1bb 3fff 	cmp.w	fp, #4294967295
   88fe0:	f000 8341 	beq.w	89666 <_vfiprintf_r+0xb4e>
   88fe4:	465a      	mov	r2, fp
   88fe6:	2100      	movs	r1, #0
   88fe8:	4620      	mov	r0, r4
   88fea:	f002 fd3d 	bl	8ba68 <memchr>
   88fee:	2800      	cmp	r0, #0
   88ff0:	f000 8422 	beq.w	89838 <_vfiprintf_r+0xd20>
   88ff4:	1b03      	subs	r3, r0, r4
   88ff6:	f04f 0b00 	mov.w	fp, #0
   88ffa:	9605      	str	r6, [sp, #20]
   88ffc:	9301      	str	r3, [sp, #4]
   88ffe:	e68d      	b.n	88d1c <_vfiprintf_r+0x204>
   89000:	f04f 0300 	mov.w	r3, #0
   89004:	f04f 0801 	mov.w	r8, #1
   89008:	9e05      	ldr	r6, [sp, #20]
   8900a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8900e:	f856 3b04 	ldr.w	r3, [r6], #4
   89012:	ac23      	add	r4, sp, #140	; 0x8c
   89014:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   89018:	9605      	str	r6, [sp, #20]
   8901a:	f8cd 8004 	str.w	r8, [sp, #4]
   8901e:	e72d      	b.n	88e7c <_vfiprintf_r+0x364>
   89020:	f001 fdc6 	bl	8abb0 <__sinit>
   89024:	e585      	b.n	88b32 <_vfiprintf_r+0x1a>
   89026:	9b03      	ldr	r3, [sp, #12]
   89028:	425b      	negs	r3, r3
   8902a:	9303      	str	r3, [sp, #12]
   8902c:	783b      	ldrb	r3, [r7, #0]
   8902e:	f045 0504 	orr.w	r5, r5, #4
   89032:	e5ca      	b.n	88bca <_vfiprintf_r+0xb2>
   89034:	783b      	ldrb	r3, [r7, #0]
   89036:	2b6c      	cmp	r3, #108	; 0x6c
   89038:	bf03      	ittte	eq
   8903a:	787b      	ldrbeq	r3, [r7, #1]
   8903c:	f045 0520 	orreq.w	r5, r5, #32
   89040:	3701      	addeq	r7, #1
   89042:	f045 0510 	orrne.w	r5, r5, #16
   89046:	e5c0      	b.n	88bca <_vfiprintf_r+0xb2>
   89048:	783b      	ldrb	r3, [r7, #0]
   8904a:	2b68      	cmp	r3, #104	; 0x68
   8904c:	bf03      	ittte	eq
   8904e:	787b      	ldrbeq	r3, [r7, #1]
   89050:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   89054:	3701      	addeq	r7, #1
   89056:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   8905a:	e5b6      	b.n	88bca <_vfiprintf_r+0xb2>
   8905c:	f045 0a10 	orr.w	sl, r5, #16
   89060:	f01a 0820 	ands.w	r8, sl, #32
   89064:	f000 827e 	beq.w	89564 <_vfiprintf_r+0xa4c>
   89068:	9e05      	ldr	r6, [sp, #20]
   8906a:	2301      	movs	r3, #1
   8906c:	3607      	adds	r6, #7
   8906e:	f026 0607 	bic.w	r6, r6, #7
   89072:	4632      	mov	r2, r6
   89074:	f8d6 8004 	ldr.w	r8, [r6, #4]
   89078:	f852 6b08 	ldr.w	r6, [r2], #8
   8907c:	9205      	str	r2, [sp, #20]
   8907e:	e690      	b.n	88da2 <_vfiprintf_r+0x28a>
   89080:	783b      	ldrb	r3, [r7, #0]
   89082:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   89086:	e5a0      	b.n	88bca <_vfiprintf_r+0xb2>
   89088:	2230      	movs	r2, #48	; 0x30
   8908a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8908e:	2278      	movs	r2, #120	; 0x78
   89090:	9b05      	ldr	r3, [sp, #20]
   89092:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   89096:	f853 6b04 	ldr.w	r6, [r3], #4
   8909a:	4abe      	ldr	r2, [pc, #760]	; (89394 <_vfiprintf_r+0x87c>)
   8909c:	9305      	str	r3, [sp, #20]
   8909e:	f04f 0800 	mov.w	r8, #0
   890a2:	2302      	movs	r3, #2
   890a4:	f045 0a02 	orr.w	sl, r5, #2
   890a8:	9209      	str	r2, [sp, #36]	; 0x24
   890aa:	e67a      	b.n	88da2 <_vfiprintf_r+0x28a>
   890ac:	06ae      	lsls	r6, r5, #26
   890ae:	f100 82a4 	bmi.w	895fa <_vfiprintf_r+0xae2>
   890b2:	06ec      	lsls	r4, r5, #27
   890b4:	f100 8359 	bmi.w	8976a <_vfiprintf_r+0xc52>
   890b8:	0668      	lsls	r0, r5, #25
   890ba:	f100 83b0 	bmi.w	8981e <_vfiprintf_r+0xd06>
   890be:	05a9      	lsls	r1, r5, #22
   890c0:	f140 8353 	bpl.w	8976a <_vfiprintf_r+0xc52>
   890c4:	9e05      	ldr	r6, [sp, #20]
   890c6:	9a04      	ldr	r2, [sp, #16]
   890c8:	f856 3b04 	ldr.w	r3, [r6], #4
   890cc:	701a      	strb	r2, [r3, #0]
   890ce:	9605      	str	r6, [sp, #20]
   890d0:	e55b      	b.n	88b8a <_vfiprintf_r+0x72>
   890d2:	9c06      	ldr	r4, [sp, #24]
   890d4:	4620      	mov	r0, r4
   890d6:	f002 f989 	bl	8b3ec <_localeconv_r>
   890da:	6843      	ldr	r3, [r0, #4]
   890dc:	4618      	mov	r0, r3
   890de:	930b      	str	r3, [sp, #44]	; 0x2c
   890e0:	f7fd ff2a 	bl	86f38 <strlen>
   890e4:	4603      	mov	r3, r0
   890e6:	4620      	mov	r0, r4
   890e8:	930c      	str	r3, [sp, #48]	; 0x30
   890ea:	461c      	mov	r4, r3
   890ec:	f002 f97e 	bl	8b3ec <_localeconv_r>
   890f0:	6883      	ldr	r3, [r0, #8]
   890f2:	930a      	str	r3, [sp, #40]	; 0x28
   890f4:	2c00      	cmp	r4, #0
   890f6:	f43f ade2 	beq.w	88cbe <_vfiprintf_r+0x1a6>
   890fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   890fc:	2b00      	cmp	r3, #0
   890fe:	f43f adde 	beq.w	88cbe <_vfiprintf_r+0x1a6>
   89102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89104:	781b      	ldrb	r3, [r3, #0]
   89106:	2b00      	cmp	r3, #0
   89108:	f43f add9 	beq.w	88cbe <_vfiprintf_r+0x1a6>
   8910c:	783b      	ldrb	r3, [r7, #0]
   8910e:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   89112:	e55a      	b.n	88bca <_vfiprintf_r+0xb2>
   89114:	783b      	ldrb	r3, [r7, #0]
   89116:	f045 0501 	orr.w	r5, r5, #1
   8911a:	e556      	b.n	88bca <_vfiprintf_r+0xb2>
   8911c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   89120:	2b00      	cmp	r3, #0
   89122:	f47f adcc 	bne.w	88cbe <_vfiprintf_r+0x1a6>
   89126:	2320      	movs	r3, #32
   89128:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8912c:	783b      	ldrb	r3, [r7, #0]
   8912e:	e54c      	b.n	88bca <_vfiprintf_r+0xb2>
   89130:	783b      	ldrb	r3, [r7, #0]
   89132:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   89136:	e548      	b.n	88bca <_vfiprintf_r+0xb2>
   89138:	4639      	mov	r1, r7
   8913a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8913e:	2b2a      	cmp	r3, #42	; 0x2a
   89140:	f000 83a6 	beq.w	89890 <_vfiprintf_r+0xd78>
   89144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89148:	2a09      	cmp	r2, #9
   8914a:	460f      	mov	r7, r1
   8914c:	f04f 0b00 	mov.w	fp, #0
   89150:	f63f ad3c 	bhi.w	88bcc <_vfiprintf_r+0xb4>
   89154:	f817 3b01 	ldrb.w	r3, [r7], #1
   89158:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   8915c:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   89160:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89164:	2a09      	cmp	r2, #9
   89166:	d9f5      	bls.n	89154 <_vfiprintf_r+0x63c>
   89168:	e530      	b.n	88bcc <_vfiprintf_r+0xb4>
   8916a:	46aa      	mov	sl, r5
   8916c:	2b01      	cmp	r3, #1
   8916e:	f43f adc8 	beq.w	88d02 <_vfiprintf_r+0x1ea>
   89172:	2b02      	cmp	r3, #2
   89174:	ac3c      	add	r4, sp, #240	; 0xf0
   89176:	d112      	bne.n	8919e <_vfiprintf_r+0x686>
   89178:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8917a:	f006 030f 	and.w	r3, r6, #15
   8917e:	5cd3      	ldrb	r3, [r2, r3]
   89180:	0936      	lsrs	r6, r6, #4
   89182:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   89186:	ea4f 1818 	mov.w	r8, r8, lsr #4
   8918a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8918e:	ea56 0308 	orrs.w	r3, r6, r8
   89192:	d1f2      	bne.n	8917a <_vfiprintf_r+0x662>
   89194:	ab3c      	add	r3, sp, #240	; 0xf0
   89196:	1b1b      	subs	r3, r3, r4
   89198:	4655      	mov	r5, sl
   8919a:	9301      	str	r3, [sp, #4]
   8919c:	e5be      	b.n	88d1c <_vfiprintf_r+0x204>
   8919e:	f006 0307 	and.w	r3, r6, #7
   891a2:	08f6      	lsrs	r6, r6, #3
   891a4:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   891a8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   891ac:	3330      	adds	r3, #48	; 0x30
   891ae:	ea56 0108 	orrs.w	r1, r6, r8
   891b2:	4622      	mov	r2, r4
   891b4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   891b8:	d1f1      	bne.n	8919e <_vfiprintf_r+0x686>
   891ba:	f01a 0f01 	tst.w	sl, #1
   891be:	d0e9      	beq.n	89194 <_vfiprintf_r+0x67c>
   891c0:	2b30      	cmp	r3, #48	; 0x30
   891c2:	d0e7      	beq.n	89194 <_vfiprintf_r+0x67c>
   891c4:	2330      	movs	r3, #48	; 0x30
   891c6:	3a02      	subs	r2, #2
   891c8:	f804 3c01 	strb.w	r3, [r4, #-1]
   891cc:	ab3c      	add	r3, sp, #240	; 0xf0
   891ce:	1a9b      	subs	r3, r3, r2
   891d0:	4655      	mov	r5, sl
   891d2:	4614      	mov	r4, r2
   891d4:	9301      	str	r3, [sp, #4]
   891d6:	e5a1      	b.n	88d1c <_vfiprintf_r+0x204>
   891d8:	2301      	movs	r3, #1
   891da:	9a01      	ldr	r2, [sp, #4]
   891dc:	9413      	str	r4, [sp, #76]	; 0x4c
   891de:	9311      	str	r3, [sp, #68]	; 0x44
   891e0:	9214      	str	r2, [sp, #80]	; 0x50
   891e2:	9212      	str	r2, [sp, #72]	; 0x48
   891e4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   891e8:	f109 0908 	add.w	r9, r9, #8
   891ec:	e6ad      	b.n	88f4a <_vfiprintf_r+0x432>
   891ee:	9b03      	ldr	r3, [sp, #12]
   891f0:	eba3 0608 	sub.w	r6, r3, r8
   891f4:	2e00      	cmp	r6, #0
   891f6:	f77f ae89 	ble.w	88f0c <_vfiprintf_r+0x3f4>
   891fa:	2e10      	cmp	r6, #16
   891fc:	f8df a198 	ldr.w	sl, [pc, #408]	; 89398 <_vfiprintf_r+0x880>
   89200:	dd38      	ble.n	89274 <_vfiprintf_r+0x75c>
   89202:	4653      	mov	r3, sl
   89204:	46cc      	mov	ip, r9
   89206:	46ba      	mov	sl, r7
   89208:	46c1      	mov	r9, r8
   8920a:	9407      	str	r4, [sp, #28]
   8920c:	46a8      	mov	r8, r5
   8920e:	461f      	mov	r7, r3
   89210:	9c06      	ldr	r4, [sp, #24]
   89212:	9d02      	ldr	r5, [sp, #8]
   89214:	e007      	b.n	89226 <_vfiprintf_r+0x70e>
   89216:	f101 0e02 	add.w	lr, r1, #2
   8921a:	4601      	mov	r1, r0
   8921c:	f10c 0c08 	add.w	ip, ip, #8
   89220:	3e10      	subs	r6, #16
   89222:	2e10      	cmp	r6, #16
   89224:	dd1e      	ble.n	89264 <_vfiprintf_r+0x74c>
   89226:	2310      	movs	r3, #16
   89228:	1c48      	adds	r0, r1, #1
   8922a:	3210      	adds	r2, #16
   8922c:	2807      	cmp	r0, #7
   8922e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   89232:	f8cc 7000 	str.w	r7, [ip]
   89236:	f8cc 3004 	str.w	r3, [ip, #4]
   8923a:	ddec      	ble.n	89216 <_vfiprintf_r+0x6fe>
   8923c:	2a00      	cmp	r2, #0
   8923e:	f000 8092 	beq.w	89366 <_vfiprintf_r+0x84e>
   89242:	4629      	mov	r1, r5
   89244:	4620      	mov	r0, r4
   89246:	aa10      	add	r2, sp, #64	; 0x40
   89248:	f7ff fc2a 	bl	88aa0 <__sprint_r.part.0>
   8924c:	2800      	cmp	r0, #0
   8924e:	f47f adec 	bne.w	88e2a <_vfiprintf_r+0x312>
   89252:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   89256:	3e10      	subs	r6, #16
   89258:	2e10      	cmp	r6, #16
   8925a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8925e:	f101 0e01 	add.w	lr, r1, #1
   89262:	dce0      	bgt.n	89226 <_vfiprintf_r+0x70e>
   89264:	463b      	mov	r3, r7
   89266:	4645      	mov	r5, r8
   89268:	4657      	mov	r7, sl
   8926a:	46c8      	mov	r8, r9
   8926c:	4670      	mov	r0, lr
   8926e:	46e1      	mov	r9, ip
   89270:	469a      	mov	sl, r3
   89272:	9c07      	ldr	r4, [sp, #28]
   89274:	4432      	add	r2, r6
   89276:	2807      	cmp	r0, #7
   89278:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8927c:	f8c9 a000 	str.w	sl, [r9]
   89280:	f8c9 6004 	str.w	r6, [r9, #4]
   89284:	f340 8196 	ble.w	895b4 <_vfiprintf_r+0xa9c>
   89288:	2a00      	cmp	r2, #0
   8928a:	f000 829a 	beq.w	897c2 <_vfiprintf_r+0xcaa>
   8928e:	9902      	ldr	r1, [sp, #8]
   89290:	9806      	ldr	r0, [sp, #24]
   89292:	aa10      	add	r2, sp, #64	; 0x40
   89294:	f7ff fc04 	bl	88aa0 <__sprint_r.part.0>
   89298:	2800      	cmp	r0, #0
   8929a:	f47f adc6 	bne.w	88e2a <_vfiprintf_r+0x312>
   8929e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   892a2:	9b01      	ldr	r3, [sp, #4]
   892a4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   892a8:	ebab 0603 	sub.w	r6, fp, r3
   892ac:	2e00      	cmp	r6, #0
   892ae:	f101 0001 	add.w	r0, r1, #1
   892b2:	f77f ae31 	ble.w	88f18 <_vfiprintf_r+0x400>
   892b6:	2e10      	cmp	r6, #16
   892b8:	f340 826b 	ble.w	89792 <_vfiprintf_r+0xc7a>
   892bc:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 89398 <_vfiprintf_r+0x880>
   892c0:	46cc      	mov	ip, r9
   892c2:	4653      	mov	r3, sl
   892c4:	46c1      	mov	r9, r8
   892c6:	46ba      	mov	sl, r7
   892c8:	46a8      	mov	r8, r5
   892ca:	9407      	str	r4, [sp, #28]
   892cc:	f04f 0b10 	mov.w	fp, #16
   892d0:	461f      	mov	r7, r3
   892d2:	9c06      	ldr	r4, [sp, #24]
   892d4:	9d02      	ldr	r5, [sp, #8]
   892d6:	e007      	b.n	892e8 <_vfiprintf_r+0x7d0>
   892d8:	f101 0e02 	add.w	lr, r1, #2
   892dc:	4601      	mov	r1, r0
   892de:	f10c 0c08 	add.w	ip, ip, #8
   892e2:	3e10      	subs	r6, #16
   892e4:	2e10      	cmp	r6, #16
   892e6:	dd19      	ble.n	8931c <_vfiprintf_r+0x804>
   892e8:	1c48      	adds	r0, r1, #1
   892ea:	3210      	adds	r2, #16
   892ec:	2807      	cmp	r0, #7
   892ee:	e9cc 7b00 	strd	r7, fp, [ip]
   892f2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   892f6:	ddef      	ble.n	892d8 <_vfiprintf_r+0x7c0>
   892f8:	b332      	cbz	r2, 89348 <_vfiprintf_r+0x830>
   892fa:	4629      	mov	r1, r5
   892fc:	4620      	mov	r0, r4
   892fe:	aa10      	add	r2, sp, #64	; 0x40
   89300:	f7ff fbce 	bl	88aa0 <__sprint_r.part.0>
   89304:	2800      	cmp	r0, #0
   89306:	f47f ad90 	bne.w	88e2a <_vfiprintf_r+0x312>
   8930a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8930e:	3e10      	subs	r6, #16
   89310:	2e10      	cmp	r6, #16
   89312:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   89316:	f101 0e01 	add.w	lr, r1, #1
   8931a:	dce5      	bgt.n	892e8 <_vfiprintf_r+0x7d0>
   8931c:	463b      	mov	r3, r7
   8931e:	4645      	mov	r5, r8
   89320:	4657      	mov	r7, sl
   89322:	46c8      	mov	r8, r9
   89324:	4670      	mov	r0, lr
   89326:	46e1      	mov	r9, ip
   89328:	469a      	mov	sl, r3
   8932a:	9c07      	ldr	r4, [sp, #28]
   8932c:	4432      	add	r2, r6
   8932e:	2807      	cmp	r0, #7
   89330:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   89334:	f8c9 a000 	str.w	sl, [r9]
   89338:	f8c9 6004 	str.w	r6, [r9, #4]
   8933c:	f300 80e9 	bgt.w	89512 <_vfiprintf_r+0x9fa>
   89340:	f109 0908 	add.w	r9, r9, #8
   89344:	3001      	adds	r0, #1
   89346:	e5e7      	b.n	88f18 <_vfiprintf_r+0x400>
   89348:	f04f 0e01 	mov.w	lr, #1
   8934c:	4611      	mov	r1, r2
   8934e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   89352:	e7c6      	b.n	892e2 <_vfiprintf_r+0x7ca>
   89354:	9902      	ldr	r1, [sp, #8]
   89356:	9806      	ldr	r0, [sp, #24]
   89358:	aa10      	add	r2, sp, #64	; 0x40
   8935a:	f7ff fba1 	bl	88aa0 <__sprint_r.part.0>
   8935e:	2800      	cmp	r0, #0
   89360:	f43f ae05 	beq.w	88f6e <_vfiprintf_r+0x456>
   89364:	e561      	b.n	88e2a <_vfiprintf_r+0x312>
   89366:	f04f 0e01 	mov.w	lr, #1
   8936a:	4611      	mov	r1, r2
   8936c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   89370:	e756      	b.n	89220 <_vfiprintf_r+0x708>
   89372:	2a00      	cmp	r2, #0
   89374:	f000 80de 	beq.w	89534 <_vfiprintf_r+0xa1c>
   89378:	9902      	ldr	r1, [sp, #8]
   8937a:	9806      	ldr	r0, [sp, #24]
   8937c:	aa10      	add	r2, sp, #64	; 0x40
   8937e:	f7ff fb8f 	bl	88aa0 <__sprint_r.part.0>
   89382:	2800      	cmp	r0, #0
   89384:	f47f ad51 	bne.w	88e2a <_vfiprintf_r+0x312>
   89388:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8938c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89390:	1c48      	adds	r0, r1, #1
   89392:	e59a      	b.n	88eca <_vfiprintf_r+0x3b2>
   89394:	0008d808 	.word	0x0008d808
   89398:	0008d86c 	.word	0x0008d86c
   8939c:	2202      	movs	r2, #2
   8939e:	2001      	movs	r0, #1
   893a0:	ab0f      	add	r3, sp, #60	; 0x3c
   893a2:	9313      	str	r3, [sp, #76]	; 0x4c
   893a4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   893a8:	9214      	str	r2, [sp, #80]	; 0x50
   893aa:	4601      	mov	r1, r0
   893ac:	f109 0908 	add.w	r9, r9, #8
   893b0:	1c48      	adds	r0, r1, #1
   893b2:	e5a7      	b.n	88f04 <_vfiprintf_r+0x3ec>
   893b4:	2e10      	cmp	r6, #16
   893b6:	f340 8245 	ble.w	89844 <_vfiprintf_r+0xd2c>
   893ba:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   893be:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 896b0 <_vfiprintf_r+0xb98>
   893c2:	4619      	mov	r1, r3
   893c4:	4653      	mov	r3, sl
   893c6:	46cc      	mov	ip, r9
   893c8:	46ba      	mov	sl, r7
   893ca:	46c1      	mov	r9, r8
   893cc:	940d      	str	r4, [sp, #52]	; 0x34
   893ce:	46a8      	mov	r8, r5
   893d0:	461f      	mov	r7, r3
   893d2:	9c06      	ldr	r4, [sp, #24]
   893d4:	9d02      	ldr	r5, [sp, #8]
   893d6:	e007      	b.n	893e8 <_vfiprintf_r+0x8d0>
   893d8:	f101 0e02 	add.w	lr, r1, #2
   893dc:	4601      	mov	r1, r0
   893de:	f10c 0c08 	add.w	ip, ip, #8
   893e2:	3e10      	subs	r6, #16
   893e4:	2e10      	cmp	r6, #16
   893e6:	dd1c      	ble.n	89422 <_vfiprintf_r+0x90a>
   893e8:	2310      	movs	r3, #16
   893ea:	1c48      	adds	r0, r1, #1
   893ec:	3210      	adds	r2, #16
   893ee:	2807      	cmp	r0, #7
   893f0:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   893f4:	f8cc 7000 	str.w	r7, [ip]
   893f8:	f8cc 3004 	str.w	r3, [ip, #4]
   893fc:	ddec      	ble.n	893d8 <_vfiprintf_r+0x8c0>
   893fe:	b332      	cbz	r2, 8944e <_vfiprintf_r+0x936>
   89400:	4629      	mov	r1, r5
   89402:	4620      	mov	r0, r4
   89404:	aa10      	add	r2, sp, #64	; 0x40
   89406:	f7ff fb4b 	bl	88aa0 <__sprint_r.part.0>
   8940a:	2800      	cmp	r0, #0
   8940c:	f47f ad0d 	bne.w	88e2a <_vfiprintf_r+0x312>
   89410:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   89414:	3e10      	subs	r6, #16
   89416:	2e10      	cmp	r6, #16
   89418:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8941c:	f101 0e01 	add.w	lr, r1, #1
   89420:	dce2      	bgt.n	893e8 <_vfiprintf_r+0x8d0>
   89422:	463b      	mov	r3, r7
   89424:	4645      	mov	r5, r8
   89426:	4657      	mov	r7, sl
   89428:	46c8      	mov	r8, r9
   8942a:	4671      	mov	r1, lr
   8942c:	46e1      	mov	r9, ip
   8942e:	469a      	mov	sl, r3
   89430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   89432:	4432      	add	r2, r6
   89434:	2907      	cmp	r1, #7
   89436:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8943a:	f8c9 a000 	str.w	sl, [r9]
   8943e:	f8c9 6004 	str.w	r6, [r9, #4]
   89442:	f300 80a7 	bgt.w	89594 <_vfiprintf_r+0xa7c>
   89446:	f109 0908 	add.w	r9, r9, #8
   8944a:	1c48      	adds	r0, r1, #1
   8944c:	e52b      	b.n	88ea6 <_vfiprintf_r+0x38e>
   8944e:	4611      	mov	r1, r2
   89450:	f04f 0e01 	mov.w	lr, #1
   89454:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   89458:	e7c3      	b.n	893e2 <_vfiprintf_r+0x8ca>
   8945a:	076c      	lsls	r4, r5, #29
   8945c:	9211      	str	r2, [sp, #68]	; 0x44
   8945e:	d550      	bpl.n	89502 <_vfiprintf_r+0x9ea>
   89460:	9b03      	ldr	r3, [sp, #12]
   89462:	eba3 0408 	sub.w	r4, r3, r8
   89466:	2c00      	cmp	r4, #0
   89468:	dd4b      	ble.n	89502 <_vfiprintf_r+0x9ea>
   8946a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8946e:	2c10      	cmp	r4, #16
   89470:	f340 81f8 	ble.w	89864 <_vfiprintf_r+0xd4c>
   89474:	f8df a238 	ldr.w	sl, [pc, #568]	; 896b0 <_vfiprintf_r+0xb98>
   89478:	2510      	movs	r5, #16
   8947a:	4653      	mov	r3, sl
   8947c:	9911      	ldr	r1, [sp, #68]	; 0x44
   8947e:	46ba      	mov	sl, r7
   89480:	9e06      	ldr	r6, [sp, #24]
   89482:	461f      	mov	r7, r3
   89484:	f8dd b008 	ldr.w	fp, [sp, #8]
   89488:	e006      	b.n	89498 <_vfiprintf_r+0x980>
   8948a:	1c88      	adds	r0, r1, #2
   8948c:	4619      	mov	r1, r3
   8948e:	f109 0908 	add.w	r9, r9, #8
   89492:	3c10      	subs	r4, #16
   89494:	2c10      	cmp	r4, #16
   89496:	dd19      	ble.n	894cc <_vfiprintf_r+0x9b4>
   89498:	1c4b      	adds	r3, r1, #1
   8949a:	3210      	adds	r2, #16
   8949c:	2b07      	cmp	r3, #7
   8949e:	e9c9 7500 	strd	r7, r5, [r9]
   894a2:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   894a6:	ddf0      	ble.n	8948a <_vfiprintf_r+0x972>
   894a8:	b332      	cbz	r2, 894f8 <_vfiprintf_r+0x9e0>
   894aa:	4659      	mov	r1, fp
   894ac:	4630      	mov	r0, r6
   894ae:	aa10      	add	r2, sp, #64	; 0x40
   894b0:	f7ff faf6 	bl	88aa0 <__sprint_r.part.0>
   894b4:	2800      	cmp	r0, #0
   894b6:	f47f acb8 	bne.w	88e2a <_vfiprintf_r+0x312>
   894ba:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   894be:	3c10      	subs	r4, #16
   894c0:	2c10      	cmp	r4, #16
   894c2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   894c6:	f101 0001 	add.w	r0, r1, #1
   894ca:	dce5      	bgt.n	89498 <_vfiprintf_r+0x980>
   894cc:	463b      	mov	r3, r7
   894ce:	4657      	mov	r7, sl
   894d0:	469a      	mov	sl, r3
   894d2:	4422      	add	r2, r4
   894d4:	2807      	cmp	r0, #7
   894d6:	e9c9 a400 	strd	sl, r4, [r9]
   894da:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   894de:	f77f ad3c 	ble.w	88f5a <_vfiprintf_r+0x442>
   894e2:	b172      	cbz	r2, 89502 <_vfiprintf_r+0x9ea>
   894e4:	9902      	ldr	r1, [sp, #8]
   894e6:	9806      	ldr	r0, [sp, #24]
   894e8:	aa10      	add	r2, sp, #64	; 0x40
   894ea:	f7ff fad9 	bl	88aa0 <__sprint_r.part.0>
   894ee:	2800      	cmp	r0, #0
   894f0:	f47f ac9b 	bne.w	88e2a <_vfiprintf_r+0x312>
   894f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   894f6:	e530      	b.n	88f5a <_vfiprintf_r+0x442>
   894f8:	2001      	movs	r0, #1
   894fa:	4611      	mov	r1, r2
   894fc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89500:	e7c7      	b.n	89492 <_vfiprintf_r+0x97a>
   89502:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   89506:	4542      	cmp	r2, r8
   89508:	bfac      	ite	ge
   8950a:	189b      	addge	r3, r3, r2
   8950c:	4443      	addlt	r3, r8
   8950e:	9304      	str	r3, [sp, #16]
   89510:	e52d      	b.n	88f6e <_vfiprintf_r+0x456>
   89512:	2a00      	cmp	r2, #0
   89514:	f43f ae60 	beq.w	891d8 <_vfiprintf_r+0x6c0>
   89518:	9902      	ldr	r1, [sp, #8]
   8951a:	9806      	ldr	r0, [sp, #24]
   8951c:	aa10      	add	r2, sp, #64	; 0x40
   8951e:	f7ff fabf 	bl	88aa0 <__sprint_r.part.0>
   89522:	2800      	cmp	r0, #0
   89524:	f47f ac81 	bne.w	88e2a <_vfiprintf_r+0x312>
   89528:	9811      	ldr	r0, [sp, #68]	; 0x44
   8952a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8952c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89530:	3001      	adds	r0, #1
   89532:	e4f1      	b.n	88f18 <_vfiprintf_r+0x400>
   89534:	9b07      	ldr	r3, [sp, #28]
   89536:	2b00      	cmp	r3, #0
   89538:	d169      	bne.n	8960e <_vfiprintf_r+0xaf6>
   8953a:	2001      	movs	r0, #1
   8953c:	4611      	mov	r1, r2
   8953e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89542:	e4df      	b.n	88f04 <_vfiprintf_r+0x3ec>
   89544:	9211      	str	r2, [sp, #68]	; 0x44
   89546:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8954a:	e458      	b.n	88dfe <_vfiprintf_r+0x2e6>
   8954c:	f1bb 0f00 	cmp.w	fp, #0
   89550:	f47f abdc 	bne.w	88d0c <_vfiprintf_r+0x1f4>
   89554:	4655      	mov	r5, sl
   89556:	f04f 0b00 	mov.w	fp, #0
   8955a:	ac3c      	add	r4, sp, #240	; 0xf0
   8955c:	f8cd b004 	str.w	fp, [sp, #4]
   89560:	f7ff bbdc 	b.w	88d1c <_vfiprintf_r+0x204>
   89564:	f01a 0310 	ands.w	r3, sl, #16
   89568:	d140      	bne.n	895ec <_vfiprintf_r+0xad4>
   8956a:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8956e:	d039      	beq.n	895e4 <_vfiprintf_r+0xacc>
   89570:	9e05      	ldr	r6, [sp, #20]
   89572:	4698      	mov	r8, r3
   89574:	f856 2b04 	ldr.w	r2, [r6], #4
   89578:	2301      	movs	r3, #1
   8957a:	9605      	str	r6, [sp, #20]
   8957c:	b296      	uxth	r6, r2
   8957e:	e410      	b.n	88da2 <_vfiprintf_r+0x28a>
   89580:	232d      	movs	r3, #45	; 0x2d
   89582:	4276      	negs	r6, r6
   89584:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   89588:	46aa      	mov	sl, r5
   8958a:	f04f 0301 	mov.w	r3, #1
   8958e:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   89592:	e40a      	b.n	88daa <_vfiprintf_r+0x292>
   89594:	2a00      	cmp	r2, #0
   89596:	d06f      	beq.n	89678 <_vfiprintf_r+0xb60>
   89598:	9902      	ldr	r1, [sp, #8]
   8959a:	9806      	ldr	r0, [sp, #24]
   8959c:	aa10      	add	r2, sp, #64	; 0x40
   8959e:	f7ff fa7f 	bl	88aa0 <__sprint_r.part.0>
   895a2:	2800      	cmp	r0, #0
   895a4:	f47f ac41 	bne.w	88e2a <_vfiprintf_r+0x312>
   895a8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   895ac:	e478      	b.n	88ea0 <_vfiprintf_r+0x388>
   895ae:	ac3c      	add	r4, sp, #240	; 0xf0
   895b0:	f7ff bbb4 	b.w	88d1c <_vfiprintf_r+0x204>
   895b4:	4601      	mov	r1, r0
   895b6:	f109 0908 	add.w	r9, r9, #8
   895ba:	3001      	adds	r0, #1
   895bc:	e4a6      	b.n	88f0c <_vfiprintf_r+0x3f4>
   895be:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   895c2:	f040 811d 	bne.w	89800 <_vfiprintf_r+0xce8>
   895c6:	9b05      	ldr	r3, [sp, #20]
   895c8:	f853 6b04 	ldr.w	r6, [r3], #4
   895cc:	9305      	str	r3, [sp, #20]
   895ce:	f7ff bbe5 	b.w	88d9c <_vfiprintf_r+0x284>
   895d2:	05aa      	lsls	r2, r5, #22
   895d4:	f100 810e 	bmi.w	897f4 <_vfiprintf_r+0xcdc>
   895d8:	ea4f 78e3 	mov.w	r8, r3, asr #31
   895dc:	461e      	mov	r6, r3
   895de:	4643      	mov	r3, r8
   895e0:	f7ff bb82 	b.w	88ce8 <_vfiprintf_r+0x1d0>
   895e4:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   895e8:	f040 80fb 	bne.w	897e2 <_vfiprintf_r+0xcca>
   895ec:	9a05      	ldr	r2, [sp, #20]
   895ee:	2301      	movs	r3, #1
   895f0:	f852 6b04 	ldr.w	r6, [r2], #4
   895f4:	9205      	str	r2, [sp, #20]
   895f6:	f7ff bbd4 	b.w	88da2 <_vfiprintf_r+0x28a>
   895fa:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   895fe:	f856 2b04 	ldr.w	r2, [r6], #4
   89602:	17cb      	asrs	r3, r1, #31
   89604:	e9c2 1300 	strd	r1, r3, [r2]
   89608:	9605      	str	r6, [sp, #20]
   8960a:	f7ff babe 	b.w	88b8a <_vfiprintf_r+0x72>
   8960e:	2202      	movs	r2, #2
   89610:	ab0f      	add	r3, sp, #60	; 0x3c
   89612:	9313      	str	r3, [sp, #76]	; 0x4c
   89614:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89618:	9214      	str	r2, [sp, #80]	; 0x50
   8961a:	e6c7      	b.n	893ac <_vfiprintf_r+0x894>
   8961c:	4a25      	ldr	r2, [pc, #148]	; (896b4 <_vfiprintf_r+0xb9c>)
   8961e:	9209      	str	r2, [sp, #36]	; 0x24
   89620:	f015 0820 	ands.w	r8, r5, #32
   89624:	d036      	beq.n	89694 <_vfiprintf_r+0xb7c>
   89626:	9e05      	ldr	r6, [sp, #20]
   89628:	3607      	adds	r6, #7
   8962a:	f026 0607 	bic.w	r6, r6, #7
   8962e:	4632      	mov	r2, r6
   89630:	f8d6 8004 	ldr.w	r8, [r6, #4]
   89634:	f852 6b08 	ldr.w	r6, [r2], #8
   89638:	9205      	str	r2, [sp, #20]
   8963a:	07ea      	lsls	r2, r5, #31
   8963c:	d509      	bpl.n	89652 <_vfiprintf_r+0xb3a>
   8963e:	ea56 0208 	orrs.w	r2, r6, r8
   89642:	d006      	beq.n	89652 <_vfiprintf_r+0xb3a>
   89644:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   89648:	2330      	movs	r3, #48	; 0x30
   8964a:	f045 0502 	orr.w	r5, r5, #2
   8964e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   89652:	2302      	movs	r3, #2
   89654:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   89658:	f7ff bba3 	b.w	88da2 <_vfiprintf_r+0x28a>
   8965c:	46aa      	mov	sl, r5
   8965e:	e4ff      	b.n	89060 <_vfiprintf_r+0x548>
   89660:	4a15      	ldr	r2, [pc, #84]	; (896b8 <_vfiprintf_r+0xba0>)
   89662:	9209      	str	r2, [sp, #36]	; 0x24
   89664:	e7dc      	b.n	89620 <_vfiprintf_r+0xb08>
   89666:	4620      	mov	r0, r4
   89668:	9605      	str	r6, [sp, #20]
   8966a:	f7fd fc65 	bl	86f38 <strlen>
   8966e:	f04f 0b00 	mov.w	fp, #0
   89672:	9001      	str	r0, [sp, #4]
   89674:	f7ff bb52 	b.w	88d1c <_vfiprintf_r+0x204>
   89678:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   8967c:	2900      	cmp	r1, #0
   8967e:	f000 80a6 	beq.w	897ce <_vfiprintf_r+0xcb6>
   89682:	2001      	movs	r0, #1
   89684:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   89688:	9213      	str	r2, [sp, #76]	; 0x4c
   8968a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8968e:	4602      	mov	r2, r0
   89690:	9014      	str	r0, [sp, #80]	; 0x50
   89692:	e416      	b.n	88ec2 <_vfiprintf_r+0x3aa>
   89694:	f015 0210 	ands.w	r2, r5, #16
   89698:	d114      	bne.n	896c4 <_vfiprintf_r+0xbac>
   8969a:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8969e:	d00d      	beq.n	896bc <_vfiprintf_r+0xba4>
   896a0:	9e05      	ldr	r6, [sp, #20]
   896a2:	4690      	mov	r8, r2
   896a4:	f856 2b04 	ldr.w	r2, [r6], #4
   896a8:	9605      	str	r6, [sp, #20]
   896aa:	b296      	uxth	r6, r2
   896ac:	e7c5      	b.n	8963a <_vfiprintf_r+0xb22>
   896ae:	bf00      	nop
   896b0:	0008d85c 	.word	0x0008d85c
   896b4:	0008d81c 	.word	0x0008d81c
   896b8:	0008d808 	.word	0x0008d808
   896bc:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   896c0:	f040 80a6 	bne.w	89810 <_vfiprintf_r+0xcf8>
   896c4:	9a05      	ldr	r2, [sp, #20]
   896c6:	f852 6b04 	ldr.w	r6, [r2], #4
   896ca:	9205      	str	r2, [sp, #20]
   896cc:	e7b5      	b.n	8963a <_vfiprintf_r+0xb22>
   896ce:	2300      	movs	r3, #0
   896d0:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   896d4:	f8cd b004 	str.w	fp, [sp, #4]
   896d8:	f8cd a01c 	str.w	sl, [sp, #28]
   896dc:	46bb      	mov	fp, r7
   896de:	f8cd 9020 	str.w	r9, [sp, #32]
   896e2:	469a      	mov	sl, r3
   896e4:	4617      	mov	r7, r2
   896e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   896ea:	ad3c      	add	r5, sp, #240	; 0xf0
   896ec:	e00c      	b.n	89708 <_vfiprintf_r+0xbf0>
   896ee:	2300      	movs	r3, #0
   896f0:	4630      	mov	r0, r6
   896f2:	4641      	mov	r1, r8
   896f4:	220a      	movs	r2, #10
   896f6:	f7fd f979 	bl	869ec <__aeabi_uldivmod>
   896fa:	2e0a      	cmp	r6, #10
   896fc:	f178 0300 	sbcs.w	r3, r8, #0
   89700:	d31b      	bcc.n	8973a <_vfiprintf_r+0xc22>
   89702:	4606      	mov	r6, r0
   89704:	4688      	mov	r8, r1
   89706:	4625      	mov	r5, r4
   89708:	4630      	mov	r0, r6
   8970a:	4641      	mov	r1, r8
   8970c:	220a      	movs	r2, #10
   8970e:	2300      	movs	r3, #0
   89710:	f7fd f96c 	bl	869ec <__aeabi_uldivmod>
   89714:	3230      	adds	r2, #48	; 0x30
   89716:	1e6c      	subs	r4, r5, #1
   89718:	f10a 0a01 	add.w	sl, sl, #1
   8971c:	f805 2c01 	strb.w	r2, [r5, #-1]
   89720:	2f00      	cmp	r7, #0
   89722:	d0e4      	beq.n	896ee <_vfiprintf_r+0xbd6>
   89724:	f899 3000 	ldrb.w	r3, [r9]
   89728:	4553      	cmp	r3, sl
   8972a:	d1e0      	bne.n	896ee <_vfiprintf_r+0xbd6>
   8972c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   89730:	d0dd      	beq.n	896ee <_vfiprintf_r+0xbd6>
   89732:	2e0a      	cmp	r6, #10
   89734:	f178 0300 	sbcs.w	r3, r8, #0
   89738:	d22e      	bcs.n	89798 <_vfiprintf_r+0xc80>
   8973a:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8973e:	ab3c      	add	r3, sp, #240	; 0xf0
   89740:	1b1b      	subs	r3, r3, r4
   89742:	465f      	mov	r7, fp
   89744:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   89748:	f8dd b004 	ldr.w	fp, [sp, #4]
   8974c:	4655      	mov	r5, sl
   8974e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   89752:	9301      	str	r3, [sp, #4]
   89754:	f7ff bae2 	b.w	88d1c <_vfiprintf_r+0x204>
   89758:	46aa      	mov	sl, r5
   8975a:	f7ff bad2 	b.w	88d02 <_vfiprintf_r+0x1ea>
   8975e:	2b01      	cmp	r3, #1
   89760:	46aa      	mov	sl, r5
   89762:	f47f ad06 	bne.w	89172 <_vfiprintf_r+0x65a>
   89766:	f7ff bad1 	b.w	88d0c <_vfiprintf_r+0x1f4>
   8976a:	9e05      	ldr	r6, [sp, #20]
   8976c:	9a04      	ldr	r2, [sp, #16]
   8976e:	f856 3b04 	ldr.w	r3, [r6], #4
   89772:	601a      	str	r2, [r3, #0]
   89774:	9605      	str	r6, [sp, #20]
   89776:	f7ff ba08 	b.w	88b8a <_vfiprintf_r+0x72>
   8977a:	f1bb 0f06 	cmp.w	fp, #6
   8977e:	46d8      	mov	r8, fp
   89780:	bf28      	it	cs
   89782:	f04f 0806 	movcs.w	r8, #6
   89786:	4c47      	ldr	r4, [pc, #284]	; (898a4 <_vfiprintf_r+0xd8c>)
   89788:	f8cd 8004 	str.w	r8, [sp, #4]
   8978c:	9605      	str	r6, [sp, #20]
   8978e:	f7ff bb75 	b.w	88e7c <_vfiprintf_r+0x364>
   89792:	f8df a114 	ldr.w	sl, [pc, #276]	; 898a8 <_vfiprintf_r+0xd90>
   89796:	e5c9      	b.n	8932c <_vfiprintf_r+0x814>
   89798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8979a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8979c:	1ae4      	subs	r4, r4, r3
   8979e:	461a      	mov	r2, r3
   897a0:	4620      	mov	r0, r4
   897a2:	f7fd fbf7 	bl	86f94 <strncpy>
   897a6:	f899 3001 	ldrb.w	r3, [r9, #1]
   897aa:	b10b      	cbz	r3, 897b0 <_vfiprintf_r+0xc98>
   897ac:	f109 0901 	add.w	r9, r9, #1
   897b0:	4630      	mov	r0, r6
   897b2:	4641      	mov	r1, r8
   897b4:	220a      	movs	r2, #10
   897b6:	2300      	movs	r3, #0
   897b8:	f04f 0a00 	mov.w	sl, #0
   897bc:	f7fd f916 	bl	869ec <__aeabi_uldivmod>
   897c0:	e79f      	b.n	89702 <_vfiprintf_r+0xbea>
   897c2:	2001      	movs	r0, #1
   897c4:	4611      	mov	r1, r2
   897c6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   897ca:	f7ff bb9f 	b.w	88f0c <_vfiprintf_r+0x3f4>
   897ce:	9b07      	ldr	r3, [sp, #28]
   897d0:	2b00      	cmp	r3, #0
   897d2:	f47f ade3 	bne.w	8939c <_vfiprintf_r+0x884>
   897d6:	4611      	mov	r1, r2
   897d8:	2001      	movs	r0, #1
   897da:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   897de:	f7ff bb95 	b.w	88f0c <_vfiprintf_r+0x3f4>
   897e2:	9e05      	ldr	r6, [sp, #20]
   897e4:	4690      	mov	r8, r2
   897e6:	f856 2b04 	ldr.w	r2, [r6], #4
   897ea:	2301      	movs	r3, #1
   897ec:	9605      	str	r6, [sp, #20]
   897ee:	b2d6      	uxtb	r6, r2
   897f0:	f7ff bad7 	b.w	88da2 <_vfiprintf_r+0x28a>
   897f4:	f343 18c0 	sbfx	r8, r3, #7, #1
   897f8:	b25e      	sxtb	r6, r3
   897fa:	4643      	mov	r3, r8
   897fc:	f7ff ba74 	b.w	88ce8 <_vfiprintf_r+0x1d0>
   89800:	9e05      	ldr	r6, [sp, #20]
   89802:	4690      	mov	r8, r2
   89804:	f856 3b04 	ldr.w	r3, [r6], #4
   89808:	9605      	str	r6, [sp, #20]
   8980a:	b2de      	uxtb	r6, r3
   8980c:	f7ff bac6 	b.w	88d9c <_vfiprintf_r+0x284>
   89810:	9e05      	ldr	r6, [sp, #20]
   89812:	4688      	mov	r8, r1
   89814:	f856 2b04 	ldr.w	r2, [r6], #4
   89818:	9605      	str	r6, [sp, #20]
   8981a:	b2d6      	uxtb	r6, r2
   8981c:	e70d      	b.n	8963a <_vfiprintf_r+0xb22>
   8981e:	9e05      	ldr	r6, [sp, #20]
   89820:	9a04      	ldr	r2, [sp, #16]
   89822:	f856 3b04 	ldr.w	r3, [r6], #4
   89826:	801a      	strh	r2, [r3, #0]
   89828:	9605      	str	r6, [sp, #20]
   8982a:	f7ff b9ae 	b.w	88b8a <_vfiprintf_r+0x72>
   8982e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   89830:	f001 fde6 	bl	8b400 <__retarget_lock_release_recursive>
   89834:	f7ff ba99 	b.w	88d6a <_vfiprintf_r+0x252>
   89838:	f8cd b004 	str.w	fp, [sp, #4]
   8983c:	9605      	str	r6, [sp, #20]
   8983e:	4683      	mov	fp, r0
   89840:	f7ff ba6c 	b.w	88d1c <_vfiprintf_r+0x204>
   89844:	9911      	ldr	r1, [sp, #68]	; 0x44
   89846:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89848:	f8df a060 	ldr.w	sl, [pc, #96]	; 898ac <_vfiprintf_r+0xd94>
   8984c:	3101      	adds	r1, #1
   8984e:	e5f0      	b.n	89432 <_vfiprintf_r+0x91a>
   89850:	9902      	ldr	r1, [sp, #8]
   89852:	9806      	ldr	r0, [sp, #24]
   89854:	aa10      	add	r2, sp, #64	; 0x40
   89856:	f7ff f923 	bl	88aa0 <__sprint_r.part.0>
   8985a:	2800      	cmp	r0, #0
   8985c:	f43f aae3 	beq.w	88e26 <_vfiprintf_r+0x30e>
   89860:	f7ff bae3 	b.w	88e2a <_vfiprintf_r+0x312>
   89864:	9811      	ldr	r0, [sp, #68]	; 0x44
   89866:	f8df a044 	ldr.w	sl, [pc, #68]	; 898ac <_vfiprintf_r+0xd94>
   8986a:	3001      	adds	r0, #1
   8986c:	e631      	b.n	894d2 <_vfiprintf_r+0x9ba>
   8986e:	9b02      	ldr	r3, [sp, #8]
   89870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   89872:	07db      	lsls	r3, r3, #31
   89874:	d407      	bmi.n	89886 <_vfiprintf_r+0xd6e>
   89876:	9b02      	ldr	r3, [sp, #8]
   89878:	899b      	ldrh	r3, [r3, #12]
   8987a:	059f      	lsls	r7, r3, #22
   8987c:	d403      	bmi.n	89886 <_vfiprintf_r+0xd6e>
   8987e:	9b02      	ldr	r3, [sp, #8]
   89880:	6d98      	ldr	r0, [r3, #88]	; 0x58
   89882:	f001 fdbd 	bl	8b400 <__retarget_lock_release_recursive>
   89886:	f04f 33ff 	mov.w	r3, #4294967295
   8988a:	9304      	str	r3, [sp, #16]
   8988c:	f7ff bad6 	b.w	88e3c <_vfiprintf_r+0x324>
   89890:	9a05      	ldr	r2, [sp, #20]
   89892:	787b      	ldrb	r3, [r7, #1]
   89894:	460f      	mov	r7, r1
   89896:	f852 1b04 	ldr.w	r1, [r2], #4
   8989a:	9205      	str	r2, [sp, #20]
   8989c:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   898a0:	f7ff b993 	b.w	88bca <_vfiprintf_r+0xb2>
   898a4:	0008d830 	.word	0x0008d830
   898a8:	0008d86c 	.word	0x0008d86c
   898ac:	0008d85c 	.word	0x0008d85c

000898b0 <__sbprintf>:
   898b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   898b2:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   898b6:	4615      	mov	r5, r2
   898b8:	2400      	movs	r4, #0
   898ba:	4606      	mov	r6, r0
   898bc:	461f      	mov	r7, r3
   898be:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   898c2:	ab1a      	add	r3, sp, #104	; 0x68
   898c4:	9300      	str	r3, [sp, #0]
   898c6:	9304      	str	r3, [sp, #16]
   898c8:	898b      	ldrh	r3, [r1, #12]
   898ca:	a816      	add	r0, sp, #88	; 0x58
   898cc:	f023 0302 	bic.w	r3, r3, #2
   898d0:	f8ad 300c 	strh.w	r3, [sp, #12]
   898d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   898d6:	9406      	str	r4, [sp, #24]
   898d8:	9319      	str	r3, [sp, #100]	; 0x64
   898da:	89cb      	ldrh	r3, [r1, #14]
   898dc:	460c      	mov	r4, r1
   898de:	f8ad 300e 	strh.w	r3, [sp, #14]
   898e2:	69cb      	ldr	r3, [r1, #28]
   898e4:	f8cd c008 	str.w	ip, [sp, #8]
   898e8:	9307      	str	r3, [sp, #28]
   898ea:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   898ec:	f8cd c014 	str.w	ip, [sp, #20]
   898f0:	9309      	str	r3, [sp, #36]	; 0x24
   898f2:	f001 fd7f 	bl	8b3f4 <__retarget_lock_init_recursive>
   898f6:	462a      	mov	r2, r5
   898f8:	463b      	mov	r3, r7
   898fa:	4669      	mov	r1, sp
   898fc:	4630      	mov	r0, r6
   898fe:	f7ff f90b 	bl	88b18 <_vfiprintf_r>
   89902:	1e05      	subs	r5, r0, #0
   89904:	db07      	blt.n	89916 <__sbprintf+0x66>
   89906:	4669      	mov	r1, sp
   89908:	4630      	mov	r0, r6
   8990a:	f001 f91d 	bl	8ab48 <_fflush_r>
   8990e:	2800      	cmp	r0, #0
   89910:	bf18      	it	ne
   89912:	f04f 35ff 	movne.w	r5, #4294967295
   89916:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8991a:	065b      	lsls	r3, r3, #25
   8991c:	d503      	bpl.n	89926 <__sbprintf+0x76>
   8991e:	89a3      	ldrh	r3, [r4, #12]
   89920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89924:	81a3      	strh	r3, [r4, #12]
   89926:	9816      	ldr	r0, [sp, #88]	; 0x58
   89928:	f001 fd66 	bl	8b3f8 <__retarget_lock_close_recursive>
   8992c:	4628      	mov	r0, r5
   8992e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89932:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089934 <__swsetup_r>:
   89934:	b538      	push	{r3, r4, r5, lr}
   89936:	4b33      	ldr	r3, [pc, #204]	; (89a04 <__swsetup_r+0xd0>)
   89938:	4605      	mov	r5, r0
   8993a:	681b      	ldr	r3, [r3, #0]
   8993c:	460c      	mov	r4, r1
   8993e:	b10b      	cbz	r3, 89944 <__swsetup_r+0x10>
   89940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   89942:	b312      	cbz	r2, 8998a <__swsetup_r+0x56>
   89944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89948:	0718      	lsls	r0, r3, #28
   8994a:	b29a      	uxth	r2, r3
   8994c:	d525      	bpl.n	8999a <__swsetup_r+0x66>
   8994e:	6921      	ldr	r1, [r4, #16]
   89950:	2900      	cmp	r1, #0
   89952:	d02d      	beq.n	899b0 <__swsetup_r+0x7c>
   89954:	f012 0001 	ands.w	r0, r2, #1
   89958:	d007      	beq.n	8996a <__swsetup_r+0x36>
   8995a:	2500      	movs	r5, #0
   8995c:	6960      	ldr	r0, [r4, #20]
   8995e:	60a5      	str	r5, [r4, #8]
   89960:	4240      	negs	r0, r0
   89962:	61a0      	str	r0, [r4, #24]
   89964:	b139      	cbz	r1, 89976 <__swsetup_r+0x42>
   89966:	2000      	movs	r0, #0
   89968:	bd38      	pop	{r3, r4, r5, pc}
   8996a:	0795      	lsls	r5, r2, #30
   8996c:	bf58      	it	pl
   8996e:	6960      	ldrpl	r0, [r4, #20]
   89970:	60a0      	str	r0, [r4, #8]
   89972:	2900      	cmp	r1, #0
   89974:	d1f7      	bne.n	89966 <__swsetup_r+0x32>
   89976:	0612      	lsls	r2, r2, #24
   89978:	bf58      	it	pl
   8997a:	4608      	movpl	r0, r1
   8997c:	d5f4      	bpl.n	89968 <__swsetup_r+0x34>
   8997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89982:	f04f 30ff 	mov.w	r0, #4294967295
   89986:	81a3      	strh	r3, [r4, #12]
   89988:	bd38      	pop	{r3, r4, r5, pc}
   8998a:	4618      	mov	r0, r3
   8998c:	f001 f910 	bl	8abb0 <__sinit>
   89990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89994:	0718      	lsls	r0, r3, #28
   89996:	b29a      	uxth	r2, r3
   89998:	d4d9      	bmi.n	8994e <__swsetup_r+0x1a>
   8999a:	06d1      	lsls	r1, r2, #27
   8999c:	d52a      	bpl.n	899f4 <__swsetup_r+0xc0>
   8999e:	0752      	lsls	r2, r2, #29
   899a0:	d414      	bmi.n	899cc <__swsetup_r+0x98>
   899a2:	6921      	ldr	r1, [r4, #16]
   899a4:	f043 0308 	orr.w	r3, r3, #8
   899a8:	81a3      	strh	r3, [r4, #12]
   899aa:	b29a      	uxth	r2, r3
   899ac:	2900      	cmp	r1, #0
   899ae:	d1d1      	bne.n	89954 <__swsetup_r+0x20>
   899b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   899b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   899b8:	d0cc      	beq.n	89954 <__swsetup_r+0x20>
   899ba:	4621      	mov	r1, r4
   899bc:	4628      	mov	r0, r5
   899be:	f001 fd21 	bl	8b404 <__smakebuf_r>
   899c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   899c6:	6921      	ldr	r1, [r4, #16]
   899c8:	b29a      	uxth	r2, r3
   899ca:	e7c3      	b.n	89954 <__swsetup_r+0x20>
   899cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   899ce:	b151      	cbz	r1, 899e6 <__swsetup_r+0xb2>
   899d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   899d4:	4291      	cmp	r1, r2
   899d6:	d004      	beq.n	899e2 <__swsetup_r+0xae>
   899d8:	4628      	mov	r0, r5
   899da:	f001 fa65 	bl	8aea8 <_free_r>
   899de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   899e2:	2200      	movs	r2, #0
   899e4:	6322      	str	r2, [r4, #48]	; 0x30
   899e6:	2200      	movs	r2, #0
   899e8:	6921      	ldr	r1, [r4, #16]
   899ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   899ee:	e9c4 1200 	strd	r1, r2, [r4]
   899f2:	e7d7      	b.n	899a4 <__swsetup_r+0x70>
   899f4:	2209      	movs	r2, #9
   899f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   899fa:	602a      	str	r2, [r5, #0]
   899fc:	f04f 30ff 	mov.w	r0, #4294967295
   89a00:	81a3      	strh	r3, [r4, #12]
   89a02:	bd38      	pop	{r3, r4, r5, pc}
   89a04:	20000b70 	.word	0x20000b70

00089a08 <register_fini>:
   89a08:	4b02      	ldr	r3, [pc, #8]	; (89a14 <register_fini+0xc>)
   89a0a:	b113      	cbz	r3, 89a12 <register_fini+0xa>
   89a0c:	4802      	ldr	r0, [pc, #8]	; (89a18 <register_fini+0x10>)
   89a0e:	f000 b805 	b.w	89a1c <atexit>
   89a12:	4770      	bx	lr
   89a14:	00000000 	.word	0x00000000
   89a18:	0008acd5 	.word	0x0008acd5

00089a1c <atexit>:
   89a1c:	2300      	movs	r3, #0
   89a1e:	4601      	mov	r1, r0
   89a20:	461a      	mov	r2, r3
   89a22:	4618      	mov	r0, r3
   89a24:	f003 b82a 	b.w	8ca7c <__register_exitproc>

00089a28 <quorem>:
   89a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89a2c:	6903      	ldr	r3, [r0, #16]
   89a2e:	690c      	ldr	r4, [r1, #16]
   89a30:	b085      	sub	sp, #20
   89a32:	42a3      	cmp	r3, r4
   89a34:	f2c0 8089 	blt.w	89b4a <quorem+0x122>
   89a38:	3c01      	subs	r4, #1
   89a3a:	f101 0514 	add.w	r5, r1, #20
   89a3e:	00a3      	lsls	r3, r4, #2
   89a40:	f100 0814 	add.w	r8, r0, #20
   89a44:	9301      	str	r3, [sp, #4]
   89a46:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   89a4a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   89a4e:	3301      	adds	r3, #1
   89a50:	468a      	mov	sl, r1
   89a52:	429a      	cmp	r2, r3
   89a54:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   89a58:	4681      	mov	r9, r0
   89a5a:	fbb2 f6f3 	udiv	r6, r2, r3
   89a5e:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   89a62:	9102      	str	r1, [sp, #8]
   89a64:	d33a      	bcc.n	89adc <quorem+0xb4>
   89a66:	2100      	movs	r1, #0
   89a68:	46ae      	mov	lr, r5
   89a6a:	4640      	mov	r0, r8
   89a6c:	460a      	mov	r2, r1
   89a6e:	46a3      	mov	fp, r4
   89a70:	9503      	str	r5, [sp, #12]
   89a72:	f85e 5b04 	ldr.w	r5, [lr], #4
   89a76:	6804      	ldr	r4, [r0, #0]
   89a78:	b2ab      	uxth	r3, r5
   89a7a:	fb06 1303 	mla	r3, r6, r3, r1
   89a7e:	0c2d      	lsrs	r5, r5, #16
   89a80:	0c19      	lsrs	r1, r3, #16
   89a82:	fb06 1105 	mla	r1, r6, r5, r1
   89a86:	b29b      	uxth	r3, r3
   89a88:	1ad2      	subs	r2, r2, r3
   89a8a:	fa1f fc84 	uxth.w	ip, r4
   89a8e:	4494      	add	ip, r2
   89a90:	b28a      	uxth	r2, r1
   89a92:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   89a96:	eb02 422c 	add.w	r2, r2, ip, asr #16
   89a9a:	fa1f fc8c 	uxth.w	ip, ip
   89a9e:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   89aa2:	4577      	cmp	r7, lr
   89aa4:	f840 3b04 	str.w	r3, [r0], #4
   89aa8:	ea4f 4111 	mov.w	r1, r1, lsr #16
   89aac:	ea4f 4222 	mov.w	r2, r2, asr #16
   89ab0:	d2df      	bcs.n	89a72 <quorem+0x4a>
   89ab2:	9b01      	ldr	r3, [sp, #4]
   89ab4:	465c      	mov	r4, fp
   89ab6:	f858 3003 	ldr.w	r3, [r8, r3]
   89aba:	9d03      	ldr	r5, [sp, #12]
   89abc:	b973      	cbnz	r3, 89adc <quorem+0xb4>
   89abe:	9b02      	ldr	r3, [sp, #8]
   89ac0:	3b04      	subs	r3, #4
   89ac2:	4598      	cmp	r8, r3
   89ac4:	d304      	bcc.n	89ad0 <quorem+0xa8>
   89ac6:	e007      	b.n	89ad8 <quorem+0xb0>
   89ac8:	4598      	cmp	r8, r3
   89aca:	f104 34ff 	add.w	r4, r4, #4294967295
   89ace:	d203      	bcs.n	89ad8 <quorem+0xb0>
   89ad0:	f853 2904 	ldr.w	r2, [r3], #-4
   89ad4:	2a00      	cmp	r2, #0
   89ad6:	d0f7      	beq.n	89ac8 <quorem+0xa0>
   89ad8:	f8c9 4010 	str.w	r4, [r9, #16]
   89adc:	4651      	mov	r1, sl
   89ade:	4648      	mov	r0, r9
   89ae0:	f002 fb0e 	bl	8c100 <__mcmp>
   89ae4:	2800      	cmp	r0, #0
   89ae6:	db2c      	blt.n	89b42 <quorem+0x11a>
   89ae8:	4640      	mov	r0, r8
   89aea:	2300      	movs	r3, #0
   89aec:	3601      	adds	r6, #1
   89aee:	f855 1b04 	ldr.w	r1, [r5], #4
   89af2:	f8d0 c000 	ldr.w	ip, [r0]
   89af6:	b28a      	uxth	r2, r1
   89af8:	1a9a      	subs	r2, r3, r2
   89afa:	fa1f fe8c 	uxth.w	lr, ip
   89afe:	0c0b      	lsrs	r3, r1, #16
   89b00:	4472      	add	r2, lr
   89b02:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   89b06:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89b0a:	b292      	uxth	r2, r2
   89b0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89b10:	42af      	cmp	r7, r5
   89b12:	f840 2b04 	str.w	r2, [r0], #4
   89b16:	ea4f 4323 	mov.w	r3, r3, asr #16
   89b1a:	d2e8      	bcs.n	89aee <quorem+0xc6>
   89b1c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   89b20:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   89b24:	b96a      	cbnz	r2, 89b42 <quorem+0x11a>
   89b26:	3b04      	subs	r3, #4
   89b28:	4598      	cmp	r8, r3
   89b2a:	d304      	bcc.n	89b36 <quorem+0x10e>
   89b2c:	e007      	b.n	89b3e <quorem+0x116>
   89b2e:	4598      	cmp	r8, r3
   89b30:	f104 34ff 	add.w	r4, r4, #4294967295
   89b34:	d203      	bcs.n	89b3e <quorem+0x116>
   89b36:	f853 2904 	ldr.w	r2, [r3], #-4
   89b3a:	2a00      	cmp	r2, #0
   89b3c:	d0f7      	beq.n	89b2e <quorem+0x106>
   89b3e:	f8c9 4010 	str.w	r4, [r9, #16]
   89b42:	4630      	mov	r0, r6
   89b44:	b005      	add	sp, #20
   89b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b4a:	2000      	movs	r0, #0
   89b4c:	b005      	add	sp, #20
   89b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b52:	bf00      	nop
   89b54:	0000      	movs	r0, r0
   89b56:	0000      	movs	r0, r0

00089b58 <_dtoa_r>:
   89b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89b5c:	4690      	mov	r8, r2
   89b5e:	4699      	mov	r9, r3
   89b60:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89b62:	b099      	sub	sp, #100	; 0x64
   89b64:	4604      	mov	r4, r0
   89b66:	e9cd 8904 	strd	r8, r9, [sp, #16]
   89b6a:	9d25      	ldr	r5, [sp, #148]	; 0x94
   89b6c:	b141      	cbz	r1, 89b80 <_dtoa_r+0x28>
   89b6e:	2301      	movs	r3, #1
   89b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89b72:	4093      	lsls	r3, r2
   89b74:	608b      	str	r3, [r1, #8]
   89b76:	604a      	str	r2, [r1, #4]
   89b78:	f002 f86c 	bl	8bc54 <_Bfree>
   89b7c:	2300      	movs	r3, #0
   89b7e:	6423      	str	r3, [r4, #64]	; 0x40
   89b80:	f1b9 0a00 	subs.w	sl, r9, #0
   89b84:	bfb4      	ite	lt
   89b86:	2301      	movlt	r3, #1
   89b88:	2300      	movge	r3, #0
   89b8a:	602b      	str	r3, [r5, #0]
   89b8c:	4b76      	ldr	r3, [pc, #472]	; (89d68 <_dtoa_r+0x210>)
   89b8e:	bfbc      	itt	lt
   89b90:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   89b94:	f8cd a014 	strlt.w	sl, [sp, #20]
   89b98:	ea33 030a 	bics.w	r3, r3, sl
   89b9c:	f000 80aa 	beq.w	89cf4 <_dtoa_r+0x19c>
   89ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89ba4:	4610      	mov	r0, r2
   89ba6:	4619      	mov	r1, r3
   89ba8:	2200      	movs	r2, #0
   89baa:	2300      	movs	r3, #0
   89bac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   89bb0:	f003 fd5a 	bl	8d668 <__aeabi_dcmpeq>
   89bb4:	4607      	mov	r7, r0
   89bb6:	b170      	cbz	r0, 89bd6 <_dtoa_r+0x7e>
   89bb8:	2301      	movs	r3, #1
   89bba:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89bbc:	6013      	str	r3, [r2, #0]
   89bbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89bc0:	2b00      	cmp	r3, #0
   89bc2:	f000 82e6 	beq.w	8a192 <_dtoa_r+0x63a>
   89bc6:	4869      	ldr	r0, [pc, #420]	; (89d6c <_dtoa_r+0x214>)
   89bc8:	6018      	str	r0, [r3, #0]
   89bca:	1e43      	subs	r3, r0, #1
   89bcc:	9303      	str	r3, [sp, #12]
   89bce:	9803      	ldr	r0, [sp, #12]
   89bd0:	b019      	add	sp, #100	; 0x64
   89bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89bd6:	ab16      	add	r3, sp, #88	; 0x58
   89bd8:	9301      	str	r3, [sp, #4]
   89bda:	ab17      	add	r3, sp, #92	; 0x5c
   89bdc:	9300      	str	r3, [sp, #0]
   89bde:	4620      	mov	r0, r4
   89be0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89be4:	f002 fb52 	bl	8c28c <__d2b>
   89be8:	ea5f 561a 	movs.w	r6, sl, lsr #20
   89bec:	4605      	mov	r5, r0
   89bee:	f040 8097 	bne.w	89d20 <_dtoa_r+0x1c8>
   89bf2:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   89bf6:	443e      	add	r6, r7
   89bf8:	f206 4032 	addw	r0, r6, #1074	; 0x432
   89bfc:	2820      	cmp	r0, #32
   89bfe:	f340 83b7 	ble.w	8a370 <_dtoa_r+0x818>
   89c02:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   89c06:	fa0a fa00 	lsl.w	sl, sl, r0
   89c0a:	f206 4012 	addw	r0, r6, #1042	; 0x412
   89c0e:	fa28 f000 	lsr.w	r0, r8, r0
   89c12:	ea4a 0000 	orr.w	r0, sl, r0
   89c16:	f003 fa45 	bl	8d0a4 <__aeabi_ui2d>
   89c1a:	2301      	movs	r3, #1
   89c1c:	3e01      	subs	r6, #1
   89c1e:	930f      	str	r3, [sp, #60]	; 0x3c
   89c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89c24:	2200      	movs	r2, #0
   89c26:	4b52      	ldr	r3, [pc, #328]	; (89d70 <_dtoa_r+0x218>)
   89c28:	f003 f8fe 	bl	8ce28 <__aeabi_dsub>
   89c2c:	a348      	add	r3, pc, #288	; (adr r3, 89d50 <_dtoa_r+0x1f8>)
   89c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c32:	f003 fab1 	bl	8d198 <__aeabi_dmul>
   89c36:	a348      	add	r3, pc, #288	; (adr r3, 89d58 <_dtoa_r+0x200>)
   89c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c3c:	f003 f8f6 	bl	8ce2c <__adddf3>
   89c40:	4680      	mov	r8, r0
   89c42:	4630      	mov	r0, r6
   89c44:	4689      	mov	r9, r1
   89c46:	f003 fa3d 	bl	8d0c4 <__aeabi_i2d>
   89c4a:	a345      	add	r3, pc, #276	; (adr r3, 89d60 <_dtoa_r+0x208>)
   89c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c50:	f003 faa2 	bl	8d198 <__aeabi_dmul>
   89c54:	4602      	mov	r2, r0
   89c56:	460b      	mov	r3, r1
   89c58:	4640      	mov	r0, r8
   89c5a:	4649      	mov	r1, r9
   89c5c:	f003 f8e6 	bl	8ce2c <__adddf3>
   89c60:	4680      	mov	r8, r0
   89c62:	4689      	mov	r9, r1
   89c64:	f003 fd48 	bl	8d6f8 <__aeabi_d2iz>
   89c68:	2200      	movs	r2, #0
   89c6a:	4683      	mov	fp, r0
   89c6c:	2300      	movs	r3, #0
   89c6e:	4640      	mov	r0, r8
   89c70:	4649      	mov	r1, r9
   89c72:	f003 fd03 	bl	8d67c <__aeabi_dcmplt>
   89c76:	2800      	cmp	r0, #0
   89c78:	f040 827e 	bne.w	8a178 <_dtoa_r+0x620>
   89c7c:	f1bb 0f16 	cmp.w	fp, #22
   89c80:	f200 826d 	bhi.w	8a15e <_dtoa_r+0x606>
   89c84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   89c88:	4b3a      	ldr	r3, [pc, #232]	; (89d74 <_dtoa_r+0x21c>)
   89c8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c92:	f003 fcf3 	bl	8d67c <__aeabi_dcmplt>
   89c96:	2800      	cmp	r0, #0
   89c98:	d072      	beq.n	89d80 <_dtoa_r+0x228>
   89c9a:	2300      	movs	r3, #0
   89c9c:	1bbe      	subs	r6, r7, r6
   89c9e:	930e      	str	r3, [sp, #56]	; 0x38
   89ca0:	1e73      	subs	r3, r6, #1
   89ca2:	f10b 3bff 	add.w	fp, fp, #4294967295
   89ca6:	9306      	str	r3, [sp, #24]
   89ca8:	f100 8260 	bmi.w	8a16c <_dtoa_r+0x614>
   89cac:	2300      	movs	r3, #0
   89cae:	9309      	str	r3, [sp, #36]	; 0x24
   89cb0:	f1bb 0f00 	cmp.w	fp, #0
   89cb4:	da6b      	bge.n	89d8e <_dtoa_r+0x236>
   89cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89cb8:	f8cd b01c 	str.w	fp, [sp, #28]
   89cbc:	eba3 030b 	sub.w	r3, r3, fp
   89cc0:	9309      	str	r3, [sp, #36]	; 0x24
   89cc2:	f1cb 0300 	rsb	r3, fp, #0
   89cc6:	930d      	str	r3, [sp, #52]	; 0x34
   89cc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89cca:	f04f 0b00 	mov.w	fp, #0
   89cce:	2b09      	cmp	r3, #9
   89cd0:	d866      	bhi.n	89da0 <_dtoa_r+0x248>
   89cd2:	2b05      	cmp	r3, #5
   89cd4:	f340 834a 	ble.w	8a36c <_dtoa_r+0x814>
   89cd8:	2600      	movs	r6, #0
   89cda:	3b04      	subs	r3, #4
   89cdc:	9322      	str	r3, [sp, #136]	; 0x88
   89cde:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89ce0:	3b02      	subs	r3, #2
   89ce2:	2b03      	cmp	r3, #3
   89ce4:	f200 866c 	bhi.w	8a9c0 <_dtoa_r+0xe68>
   89ce8:	e8df f013 	tbh	[pc, r3, lsl #1]
   89cec:	045e0461 	.word	0x045e0461
   89cf0:	04380455 	.word	0x04380455
   89cf4:	f242 730f 	movw	r3, #9999	; 0x270f
   89cf8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89cfa:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   89cfe:	6013      	str	r3, [r2, #0]
   89d00:	ea5a 0308 	orrs.w	r3, sl, r8
   89d04:	d11a      	bne.n	89d3c <_dtoa_r+0x1e4>
   89d06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89d08:	2b00      	cmp	r3, #0
   89d0a:	f000 8668 	beq.w	8a9de <_dtoa_r+0xe86>
   89d0e:	4b1a      	ldr	r3, [pc, #104]	; (89d78 <_dtoa_r+0x220>)
   89d10:	9303      	str	r3, [sp, #12]
   89d12:	3308      	adds	r3, #8
   89d14:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89d16:	9803      	ldr	r0, [sp, #12]
   89d18:	6013      	str	r3, [r2, #0]
   89d1a:	b019      	add	sp, #100	; 0x64
   89d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d20:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   89d24:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89d28:	4608      	mov	r0, r1
   89d2a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89d2e:	970f      	str	r7, [sp, #60]	; 0x3c
   89d30:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   89d34:	9f16      	ldr	r7, [sp, #88]	; 0x58
   89d36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89d3a:	e773      	b.n	89c24 <_dtoa_r+0xcc>
   89d3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89d3e:	2b00      	cmp	r3, #0
   89d40:	f040 83ef 	bne.w	8a522 <_dtoa_r+0x9ca>
   89d44:	4b0d      	ldr	r3, [pc, #52]	; (89d7c <_dtoa_r+0x224>)
   89d46:	9303      	str	r3, [sp, #12]
   89d48:	e741      	b.n	89bce <_dtoa_r+0x76>
   89d4a:	bf00      	nop
   89d4c:	f3af 8000 	nop.w
   89d50:	636f4361 	.word	0x636f4361
   89d54:	3fd287a7 	.word	0x3fd287a7
   89d58:	8b60c8b3 	.word	0x8b60c8b3
   89d5c:	3fc68a28 	.word	0x3fc68a28
   89d60:	509f79fb 	.word	0x509f79fb
   89d64:	3fd34413 	.word	0x3fd34413
   89d68:	7ff00000 	.word	0x7ff00000
   89d6c:	0008d839 	.word	0x0008d839
   89d70:	3ff80000 	.word	0x3ff80000
   89d74:	0008d9d8 	.word	0x0008d9d8
   89d78:	0008d880 	.word	0x0008d880
   89d7c:	0008d87c 	.word	0x0008d87c
   89d80:	1bbe      	subs	r6, r7, r6
   89d82:	1e73      	subs	r3, r6, #1
   89d84:	9306      	str	r3, [sp, #24]
   89d86:	f100 848a 	bmi.w	8a69e <_dtoa_r+0xb46>
   89d8a:	900e      	str	r0, [sp, #56]	; 0x38
   89d8c:	9009      	str	r0, [sp, #36]	; 0x24
   89d8e:	9b06      	ldr	r3, [sp, #24]
   89d90:	445b      	add	r3, fp
   89d92:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89d96:	2300      	movs	r3, #0
   89d98:	930d      	str	r3, [sp, #52]	; 0x34
   89d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89d9c:	2b09      	cmp	r3, #9
   89d9e:	d998      	bls.n	89cd2 <_dtoa_r+0x17a>
   89da0:	2300      	movs	r3, #0
   89da2:	9322      	str	r3, [sp, #136]	; 0x88
   89da4:	f04f 33ff 	mov.w	r3, #4294967295
   89da8:	2601      	movs	r6, #1
   89daa:	9308      	str	r3, [sp, #32]
   89dac:	2300      	movs	r3, #0
   89dae:	960c      	str	r6, [sp, #48]	; 0x30
   89db0:	9323      	str	r3, [sp, #140]	; 0x8c
   89db2:	2100      	movs	r1, #0
   89db4:	9b08      	ldr	r3, [sp, #32]
   89db6:	6461      	str	r1, [r4, #68]	; 0x44
   89db8:	9312      	str	r3, [sp, #72]	; 0x48
   89dba:	4620      	mov	r0, r4
   89dbc:	f001 ff24 	bl	8bc08 <_Balloc>
   89dc0:	9003      	str	r0, [sp, #12]
   89dc2:	2800      	cmp	r0, #0
   89dc4:	f000 8604 	beq.w	8a9d0 <_dtoa_r+0xe78>
   89dc8:	9b03      	ldr	r3, [sp, #12]
   89dca:	6423      	str	r3, [r4, #64]	; 0x40
   89dcc:	9b08      	ldr	r3, [sp, #32]
   89dce:	2b0e      	cmp	r3, #14
   89dd0:	f200 8114 	bhi.w	89ffc <_dtoa_r+0x4a4>
   89dd4:	2e00      	cmp	r6, #0
   89dd6:	f000 8111 	beq.w	89ffc <_dtoa_r+0x4a4>
   89dda:	9907      	ldr	r1, [sp, #28]
   89ddc:	2900      	cmp	r1, #0
   89dde:	f340 8460 	ble.w	8a6a2 <_dtoa_r+0xb4a>
   89de2:	4baf      	ldr	r3, [pc, #700]	; (8a0a0 <_dtoa_r+0x548>)
   89de4:	f001 020f 	and.w	r2, r1, #15
   89de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89dec:	460a      	mov	r2, r1
   89dee:	e9d3 6700 	ldrd	r6, r7, [r3]
   89df2:	ea4f 1821 	mov.w	r8, r1, asr #4
   89df6:	05d1      	lsls	r1, r2, #23
   89df8:	f140 8417 	bpl.w	8a62a <_dtoa_r+0xad2>
   89dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   89e00:	4ba8      	ldr	r3, [pc, #672]	; (8a0a4 <_dtoa_r+0x54c>)
   89e02:	f04f 0a03 	mov.w	sl, #3
   89e06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89e0a:	f003 faef 	bl	8d3ec <__aeabi_ddiv>
   89e0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89e12:	f008 080f 	and.w	r8, r8, #15
   89e16:	f1b8 0f00 	cmp.w	r8, #0
   89e1a:	d013      	beq.n	89e44 <_dtoa_r+0x2ec>
   89e1c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8a0a4 <_dtoa_r+0x54c>
   89e20:	f018 0f01 	tst.w	r8, #1
   89e24:	d009      	beq.n	89e3a <_dtoa_r+0x2e2>
   89e26:	e9d9 2300 	ldrd	r2, r3, [r9]
   89e2a:	4630      	mov	r0, r6
   89e2c:	4639      	mov	r1, r7
   89e2e:	f003 f9b3 	bl	8d198 <__aeabi_dmul>
   89e32:	4606      	mov	r6, r0
   89e34:	460f      	mov	r7, r1
   89e36:	f10a 0a01 	add.w	sl, sl, #1
   89e3a:	ea5f 0868 	movs.w	r8, r8, asr #1
   89e3e:	f109 0908 	add.w	r9, r9, #8
   89e42:	d1ed      	bne.n	89e20 <_dtoa_r+0x2c8>
   89e44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89e48:	4632      	mov	r2, r6
   89e4a:	463b      	mov	r3, r7
   89e4c:	f003 face 	bl	8d3ec <__aeabi_ddiv>
   89e50:	4680      	mov	r8, r0
   89e52:	4689      	mov	r9, r1
   89e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89e56:	b143      	cbz	r3, 89e6a <_dtoa_r+0x312>
   89e58:	2200      	movs	r2, #0
   89e5a:	4640      	mov	r0, r8
   89e5c:	4649      	mov	r1, r9
   89e5e:	4b92      	ldr	r3, [pc, #584]	; (8a0a8 <_dtoa_r+0x550>)
   89e60:	f003 fc0c 	bl	8d67c <__aeabi_dcmplt>
   89e64:	2800      	cmp	r0, #0
   89e66:	f040 8535 	bne.w	8a8d4 <_dtoa_r+0xd7c>
   89e6a:	4650      	mov	r0, sl
   89e6c:	f003 f92a 	bl	8d0c4 <__aeabi_i2d>
   89e70:	4642      	mov	r2, r8
   89e72:	464b      	mov	r3, r9
   89e74:	f003 f990 	bl	8d198 <__aeabi_dmul>
   89e78:	4b8c      	ldr	r3, [pc, #560]	; (8a0ac <_dtoa_r+0x554>)
   89e7a:	2200      	movs	r2, #0
   89e7c:	f002 ffd6 	bl	8ce2c <__adddf3>
   89e80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   89e84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89e88:	9311      	str	r3, [sp, #68]	; 0x44
   89e8a:	9b08      	ldr	r3, [sp, #32]
   89e8c:	2b00      	cmp	r3, #0
   89e8e:	f000 8097 	beq.w	89fc0 <_dtoa_r+0x468>
   89e92:	9b07      	ldr	r3, [sp, #28]
   89e94:	9314      	str	r3, [sp, #80]	; 0x50
   89e96:	9b08      	ldr	r3, [sp, #32]
   89e98:	9313      	str	r3, [sp, #76]	; 0x4c
   89e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89e9c:	2b00      	cmp	r3, #0
   89e9e:	f000 84a9 	beq.w	8a7f4 <_dtoa_r+0xc9c>
   89ea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   89ea4:	4b7e      	ldr	r3, [pc, #504]	; (8a0a0 <_dtoa_r+0x548>)
   89ea6:	2000      	movs	r0, #0
   89ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89eac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89eb0:	497f      	ldr	r1, [pc, #508]	; (8a0b0 <_dtoa_r+0x558>)
   89eb2:	f003 fa9b 	bl	8d3ec <__aeabi_ddiv>
   89eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   89eba:	f002 ffb5 	bl	8ce28 <__aeabi_dsub>
   89ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89ec2:	4649      	mov	r1, r9
   89ec4:	4640      	mov	r0, r8
   89ec6:	f003 fc17 	bl	8d6f8 <__aeabi_d2iz>
   89eca:	4607      	mov	r7, r0
   89ecc:	f003 f8fa 	bl	8d0c4 <__aeabi_i2d>
   89ed0:	4602      	mov	r2, r0
   89ed2:	460b      	mov	r3, r1
   89ed4:	4640      	mov	r0, r8
   89ed6:	4649      	mov	r1, r9
   89ed8:	f002 ffa6 	bl	8ce28 <__aeabi_dsub>
   89edc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   89ee0:	9e03      	ldr	r6, [sp, #12]
   89ee2:	3730      	adds	r7, #48	; 0x30
   89ee4:	f806 7b01 	strb.w	r7, [r6], #1
   89ee8:	4680      	mov	r8, r0
   89eea:	4689      	mov	r9, r1
   89eec:	f003 fbc6 	bl	8d67c <__aeabi_dcmplt>
   89ef0:	2800      	cmp	r0, #0
   89ef2:	f040 852e 	bne.w	8a952 <_dtoa_r+0xdfa>
   89ef6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   89efa:	2700      	movs	r7, #0
   89efc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   89f00:	9510      	str	r5, [sp, #64]	; 0x40
   89f02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   89f04:	9413      	str	r4, [sp, #76]	; 0x4c
   89f06:	e02a      	b.n	89f5e <_dtoa_r+0x406>
   89f08:	3701      	adds	r7, #1
   89f0a:	42af      	cmp	r7, r5
   89f0c:	f280 852e 	bge.w	8a96c <_dtoa_r+0xe14>
   89f10:	4650      	mov	r0, sl
   89f12:	4659      	mov	r1, fp
   89f14:	2200      	movs	r2, #0
   89f16:	4b67      	ldr	r3, [pc, #412]	; (8a0b4 <_dtoa_r+0x55c>)
   89f18:	f003 f93e 	bl	8d198 <__aeabi_dmul>
   89f1c:	2200      	movs	r2, #0
   89f1e:	4b65      	ldr	r3, [pc, #404]	; (8a0b4 <_dtoa_r+0x55c>)
   89f20:	4682      	mov	sl, r0
   89f22:	468b      	mov	fp, r1
   89f24:	4640      	mov	r0, r8
   89f26:	4649      	mov	r1, r9
   89f28:	f003 f936 	bl	8d198 <__aeabi_dmul>
   89f2c:	4689      	mov	r9, r1
   89f2e:	4680      	mov	r8, r0
   89f30:	f003 fbe2 	bl	8d6f8 <__aeabi_d2iz>
   89f34:	4604      	mov	r4, r0
   89f36:	f003 f8c5 	bl	8d0c4 <__aeabi_i2d>
   89f3a:	4602      	mov	r2, r0
   89f3c:	460b      	mov	r3, r1
   89f3e:	4640      	mov	r0, r8
   89f40:	4649      	mov	r1, r9
   89f42:	f002 ff71 	bl	8ce28 <__aeabi_dsub>
   89f46:	3430      	adds	r4, #48	; 0x30
   89f48:	4652      	mov	r2, sl
   89f4a:	465b      	mov	r3, fp
   89f4c:	f806 4b01 	strb.w	r4, [r6], #1
   89f50:	4680      	mov	r8, r0
   89f52:	4689      	mov	r9, r1
   89f54:	f003 fb92 	bl	8d67c <__aeabi_dcmplt>
   89f58:	2800      	cmp	r0, #0
   89f5a:	f040 84f8 	bne.w	8a94e <_dtoa_r+0xdf6>
   89f5e:	4642      	mov	r2, r8
   89f60:	464b      	mov	r3, r9
   89f62:	2000      	movs	r0, #0
   89f64:	4950      	ldr	r1, [pc, #320]	; (8a0a8 <_dtoa_r+0x550>)
   89f66:	f002 ff5f 	bl	8ce28 <__aeabi_dsub>
   89f6a:	4652      	mov	r2, sl
   89f6c:	465b      	mov	r3, fp
   89f6e:	f003 fb85 	bl	8d67c <__aeabi_dcmplt>
   89f72:	2800      	cmp	r0, #0
   89f74:	d0c8      	beq.n	89f08 <_dtoa_r+0x3b0>
   89f76:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   89f7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   89f7c:	9a03      	ldr	r2, [sp, #12]
   89f7e:	9307      	str	r3, [sp, #28]
   89f80:	e002      	b.n	89f88 <_dtoa_r+0x430>
   89f82:	4296      	cmp	r6, r2
   89f84:	f000 84cd 	beq.w	8a922 <_dtoa_r+0xdca>
   89f88:	46b2      	mov	sl, r6
   89f8a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   89f8e:	2b39      	cmp	r3, #57	; 0x39
   89f90:	d0f7      	beq.n	89f82 <_dtoa_r+0x42a>
   89f92:	3301      	adds	r3, #1
   89f94:	b2db      	uxtb	r3, r3
   89f96:	7033      	strb	r3, [r6, #0]
   89f98:	9b07      	ldr	r3, [sp, #28]
   89f9a:	3301      	adds	r3, #1
   89f9c:	9307      	str	r3, [sp, #28]
   89f9e:	e1c8      	b.n	8a332 <_dtoa_r+0x7da>
   89fa0:	4650      	mov	r0, sl
   89fa2:	f003 f88f 	bl	8d0c4 <__aeabi_i2d>
   89fa6:	4642      	mov	r2, r8
   89fa8:	464b      	mov	r3, r9
   89faa:	f003 f8f5 	bl	8d198 <__aeabi_dmul>
   89fae:	4b3f      	ldr	r3, [pc, #252]	; (8a0ac <_dtoa_r+0x554>)
   89fb0:	2200      	movs	r2, #0
   89fb2:	f002 ff3b 	bl	8ce2c <__adddf3>
   89fb6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   89fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89fbe:	9311      	str	r3, [sp, #68]	; 0x44
   89fc0:	4640      	mov	r0, r8
   89fc2:	4649      	mov	r1, r9
   89fc4:	2200      	movs	r2, #0
   89fc6:	4b3c      	ldr	r3, [pc, #240]	; (8a0b8 <_dtoa_r+0x560>)
   89fc8:	f002 ff2e 	bl	8ce28 <__aeabi_dsub>
   89fcc:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   89fd0:	464b      	mov	r3, r9
   89fd2:	4642      	mov	r2, r8
   89fd4:	4606      	mov	r6, r0
   89fd6:	460f      	mov	r7, r1
   89fd8:	f003 fb6e 	bl	8d6b8 <__aeabi_dcmpgt>
   89fdc:	4681      	mov	r9, r0
   89fde:	2800      	cmp	r0, #0
   89fe0:	f040 84af 	bne.w	8a942 <_dtoa_r+0xdea>
   89fe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89fe8:	4602      	mov	r2, r0
   89fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   89fee:	4630      	mov	r0, r6
   89ff0:	4639      	mov	r1, r7
   89ff2:	f003 fb43 	bl	8d67c <__aeabi_dcmplt>
   89ff6:	2800      	cmp	r0, #0
   89ff8:	f040 8348 	bne.w	8a68c <_dtoa_r+0xb34>
   89ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89ffe:	2b00      	cmp	r3, #0
   8a000:	f2c0 808c 	blt.w	8a11c <_dtoa_r+0x5c4>
   8a004:	9a07      	ldr	r2, [sp, #28]
   8a006:	2a0e      	cmp	r2, #14
   8a008:	f300 8088 	bgt.w	8a11c <_dtoa_r+0x5c4>
   8a00c:	4b24      	ldr	r3, [pc, #144]	; (8a0a0 <_dtoa_r+0x548>)
   8a00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a012:	e9d3 ab00 	ldrd	sl, fp, [r3]
   8a016:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8a018:	2b00      	cmp	r3, #0
   8a01a:	da1b      	bge.n	8a054 <_dtoa_r+0x4fc>
   8a01c:	9b08      	ldr	r3, [sp, #32]
   8a01e:	2b00      	cmp	r3, #0
   8a020:	dc18      	bgt.n	8a054 <_dtoa_r+0x4fc>
   8a022:	f040 8331 	bne.w	8a688 <_dtoa_r+0xb30>
   8a026:	2200      	movs	r2, #0
   8a028:	4b23      	ldr	r3, [pc, #140]	; (8a0b8 <_dtoa_r+0x560>)
   8a02a:	4650      	mov	r0, sl
   8a02c:	4659      	mov	r1, fp
   8a02e:	f003 f8b3 	bl	8d198 <__aeabi_dmul>
   8a032:	4602      	mov	r2, r0
   8a034:	460b      	mov	r3, r1
   8a036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8a03a:	f003 fb29 	bl	8d690 <__aeabi_dcmple>
   8a03e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8a042:	464e      	mov	r6, r9
   8a044:	2800      	cmp	r0, #0
   8a046:	f000 82ca 	beq.w	8a5de <_dtoa_r+0xa86>
   8a04a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8a04c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   8a050:	43df      	mvns	r7, r3
   8a052:	e2cc      	b.n	8a5ee <_dtoa_r+0xa96>
   8a054:	4652      	mov	r2, sl
   8a056:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   8a05a:	465b      	mov	r3, fp
   8a05c:	4638      	mov	r0, r7
   8a05e:	4641      	mov	r1, r8
   8a060:	f003 f9c4 	bl	8d3ec <__aeabi_ddiv>
   8a064:	f003 fb48 	bl	8d6f8 <__aeabi_d2iz>
   8a068:	4681      	mov	r9, r0
   8a06a:	9009      	str	r0, [sp, #36]	; 0x24
   8a06c:	f003 f82a 	bl	8d0c4 <__aeabi_i2d>
   8a070:	4652      	mov	r2, sl
   8a072:	465b      	mov	r3, fp
   8a074:	f003 f890 	bl	8d198 <__aeabi_dmul>
   8a078:	9e03      	ldr	r6, [sp, #12]
   8a07a:	460b      	mov	r3, r1
   8a07c:	4602      	mov	r2, r0
   8a07e:	4641      	mov	r1, r8
   8a080:	4638      	mov	r0, r7
   8a082:	f002 fed1 	bl	8ce28 <__aeabi_dsub>
   8a086:	f109 0330 	add.w	r3, r9, #48	; 0x30
   8a08a:	f806 3b01 	strb.w	r3, [r6], #1
   8a08e:	9b08      	ldr	r3, [sp, #32]
   8a090:	2b01      	cmp	r3, #1
   8a092:	f000 835f 	beq.w	8a754 <_dtoa_r+0xbfc>
   8a096:	9406      	str	r4, [sp, #24]
   8a098:	2701      	movs	r7, #1
   8a09a:	461c      	mov	r4, r3
   8a09c:	9504      	str	r5, [sp, #16]
   8a09e:	e02a      	b.n	8a0f6 <_dtoa_r+0x59e>
   8a0a0:	0008d9d8 	.word	0x0008d9d8
   8a0a4:	0008d9b0 	.word	0x0008d9b0
   8a0a8:	3ff00000 	.word	0x3ff00000
   8a0ac:	401c0000 	.word	0x401c0000
   8a0b0:	3fe00000 	.word	0x3fe00000
   8a0b4:	40240000 	.word	0x40240000
   8a0b8:	40140000 	.word	0x40140000
   8a0bc:	4652      	mov	r2, sl
   8a0be:	465b      	mov	r3, fp
   8a0c0:	4640      	mov	r0, r8
   8a0c2:	4649      	mov	r1, r9
   8a0c4:	f003 f992 	bl	8d3ec <__aeabi_ddiv>
   8a0c8:	f003 fb16 	bl	8d6f8 <__aeabi_d2iz>
   8a0cc:	4605      	mov	r5, r0
   8a0ce:	f002 fff9 	bl	8d0c4 <__aeabi_i2d>
   8a0d2:	4652      	mov	r2, sl
   8a0d4:	465b      	mov	r3, fp
   8a0d6:	f003 f85f 	bl	8d198 <__aeabi_dmul>
   8a0da:	3701      	adds	r7, #1
   8a0dc:	460b      	mov	r3, r1
   8a0de:	4602      	mov	r2, r0
   8a0e0:	4649      	mov	r1, r9
   8a0e2:	4640      	mov	r0, r8
   8a0e4:	f002 fea0 	bl	8ce28 <__aeabi_dsub>
   8a0e8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8a0ec:	42a7      	cmp	r7, r4
   8a0ee:	f806 3b01 	strb.w	r3, [r6], #1
   8a0f2:	f000 832c 	beq.w	8a74e <_dtoa_r+0xbf6>
   8a0f6:	2200      	movs	r2, #0
   8a0f8:	4bab      	ldr	r3, [pc, #684]	; (8a3a8 <_dtoa_r+0x850>)
   8a0fa:	f003 f84d 	bl	8d198 <__aeabi_dmul>
   8a0fe:	2200      	movs	r2, #0
   8a100:	2300      	movs	r3, #0
   8a102:	4680      	mov	r8, r0
   8a104:	4689      	mov	r9, r1
   8a106:	f003 faaf 	bl	8d668 <__aeabi_dcmpeq>
   8a10a:	2800      	cmp	r0, #0
   8a10c:	d0d6      	beq.n	8a0bc <_dtoa_r+0x564>
   8a10e:	9d04      	ldr	r5, [sp, #16]
   8a110:	9c06      	ldr	r4, [sp, #24]
   8a112:	9b07      	ldr	r3, [sp, #28]
   8a114:	46b2      	mov	sl, r6
   8a116:	3301      	adds	r3, #1
   8a118:	9307      	str	r3, [sp, #28]
   8a11a:	e10a      	b.n	8a332 <_dtoa_r+0x7da>
   8a11c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a11e:	2a00      	cmp	r2, #0
   8a120:	d03d      	beq.n	8a19e <_dtoa_r+0x646>
   8a122:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8a124:	2a01      	cmp	r2, #1
   8a126:	f340 829f 	ble.w	8a668 <_dtoa_r+0xb10>
   8a12a:	9b08      	ldr	r3, [sp, #32]
   8a12c:	f103 38ff 	add.w	r8, r3, #4294967295
   8a130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a132:	4543      	cmp	r3, r8
   8a134:	f2c0 8270 	blt.w	8a618 <_dtoa_r+0xac0>
   8a138:	eba3 0808 	sub.w	r8, r3, r8
   8a13c:	9b08      	ldr	r3, [sp, #32]
   8a13e:	2b00      	cmp	r3, #0
   8a140:	f2c0 8340 	blt.w	8a7c4 <_dtoa_r+0xc6c>
   8a144:	9a06      	ldr	r2, [sp, #24]
   8a146:	441a      	add	r2, r3
   8a148:	9206      	str	r2, [sp, #24]
   8a14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a14c:	4617      	mov	r7, r2
   8a14e:	441a      	add	r2, r3
   8a150:	9209      	str	r2, [sp, #36]	; 0x24
   8a152:	2101      	movs	r1, #1
   8a154:	4620      	mov	r0, r4
   8a156:	f001 fe25 	bl	8bda4 <__i2b>
   8a15a:	4606      	mov	r6, r0
   8a15c:	e023      	b.n	8a1a6 <_dtoa_r+0x64e>
   8a15e:	2301      	movs	r3, #1
   8a160:	1bbe      	subs	r6, r7, r6
   8a162:	930e      	str	r3, [sp, #56]	; 0x38
   8a164:	1e73      	subs	r3, r6, #1
   8a166:	9306      	str	r3, [sp, #24]
   8a168:	f57f ada0 	bpl.w	89cac <_dtoa_r+0x154>
   8a16c:	f1c6 0301 	rsb	r3, r6, #1
   8a170:	9309      	str	r3, [sp, #36]	; 0x24
   8a172:	2300      	movs	r3, #0
   8a174:	9306      	str	r3, [sp, #24]
   8a176:	e59b      	b.n	89cb0 <_dtoa_r+0x158>
   8a178:	4658      	mov	r0, fp
   8a17a:	f002 ffa3 	bl	8d0c4 <__aeabi_i2d>
   8a17e:	4642      	mov	r2, r8
   8a180:	464b      	mov	r3, r9
   8a182:	f003 fa71 	bl	8d668 <__aeabi_dcmpeq>
   8a186:	2800      	cmp	r0, #0
   8a188:	f47f ad78 	bne.w	89c7c <_dtoa_r+0x124>
   8a18c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a190:	e574      	b.n	89c7c <_dtoa_r+0x124>
   8a192:	4b86      	ldr	r3, [pc, #536]	; (8a3ac <_dtoa_r+0x854>)
   8a194:	9303      	str	r3, [sp, #12]
   8a196:	9803      	ldr	r0, [sp, #12]
   8a198:	b019      	add	sp, #100	; 0x64
   8a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a19e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8a1a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8a1a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8a1a6:	2f00      	cmp	r7, #0
   8a1a8:	dd0c      	ble.n	8a1c4 <_dtoa_r+0x66c>
   8a1aa:	9906      	ldr	r1, [sp, #24]
   8a1ac:	2900      	cmp	r1, #0
   8a1ae:	460b      	mov	r3, r1
   8a1b0:	dd08      	ble.n	8a1c4 <_dtoa_r+0x66c>
   8a1b2:	42b9      	cmp	r1, r7
   8a1b4:	bfa8      	it	ge
   8a1b6:	463b      	movge	r3, r7
   8a1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a1ba:	1aff      	subs	r7, r7, r3
   8a1bc:	1ad2      	subs	r2, r2, r3
   8a1be:	1acb      	subs	r3, r1, r3
   8a1c0:	9209      	str	r2, [sp, #36]	; 0x24
   8a1c2:	9306      	str	r3, [sp, #24]
   8a1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a1c6:	b1e3      	cbz	r3, 8a202 <_dtoa_r+0x6aa>
   8a1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a1ca:	2b00      	cmp	r3, #0
   8a1cc:	f000 8260 	beq.w	8a690 <_dtoa_r+0xb38>
   8a1d0:	f1b8 0f00 	cmp.w	r8, #0
   8a1d4:	dd10      	ble.n	8a1f8 <_dtoa_r+0x6a0>
   8a1d6:	4631      	mov	r1, r6
   8a1d8:	4642      	mov	r2, r8
   8a1da:	4620      	mov	r0, r4
   8a1dc:	f001 febe 	bl	8bf5c <__pow5mult>
   8a1e0:	4606      	mov	r6, r0
   8a1e2:	462a      	mov	r2, r5
   8a1e4:	4631      	mov	r1, r6
   8a1e6:	4620      	mov	r0, r4
   8a1e8:	f001 fe0a 	bl	8be00 <__multiply>
   8a1ec:	4603      	mov	r3, r0
   8a1ee:	4629      	mov	r1, r5
   8a1f0:	4620      	mov	r0, r4
   8a1f2:	461d      	mov	r5, r3
   8a1f4:	f001 fd2e 	bl	8bc54 <_Bfree>
   8a1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a1fa:	ebb3 0208 	subs.w	r2, r3, r8
   8a1fe:	f040 82db 	bne.w	8a7b8 <_dtoa_r+0xc60>
   8a202:	2101      	movs	r1, #1
   8a204:	4620      	mov	r0, r4
   8a206:	f001 fdcd 	bl	8bda4 <__i2b>
   8a20a:	f1bb 0f00 	cmp.w	fp, #0
   8a20e:	4681      	mov	r9, r0
   8a210:	f300 80b3 	bgt.w	8a37a <_dtoa_r+0x822>
   8a214:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a216:	2b01      	cmp	r3, #1
   8a218:	f340 8188 	ble.w	8a52c <_dtoa_r+0x9d4>
   8a21c:	f04f 0a00 	mov.w	sl, #0
   8a220:	2001      	movs	r0, #1
   8a222:	f1bb 0f00 	cmp.w	fp, #0
   8a226:	f040 80b4 	bne.w	8a392 <_dtoa_r+0x83a>
   8a22a:	9a06      	ldr	r2, [sp, #24]
   8a22c:	4410      	add	r0, r2
   8a22e:	f010 001f 	ands.w	r0, r0, #31
   8a232:	f000 8092 	beq.w	8a35a <_dtoa_r+0x802>
   8a236:	f1c0 0320 	rsb	r3, r0, #32
   8a23a:	2b04      	cmp	r3, #4
   8a23c:	f340 83d3 	ble.w	8a9e6 <_dtoa_r+0xe8e>
   8a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a242:	f1c0 001c 	rsb	r0, r0, #28
   8a246:	4403      	add	r3, r0
   8a248:	4402      	add	r2, r0
   8a24a:	9309      	str	r3, [sp, #36]	; 0x24
   8a24c:	4407      	add	r7, r0
   8a24e:	9206      	str	r2, [sp, #24]
   8a250:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a252:	2b00      	cmp	r3, #0
   8a254:	dd05      	ble.n	8a262 <_dtoa_r+0x70a>
   8a256:	4629      	mov	r1, r5
   8a258:	461a      	mov	r2, r3
   8a25a:	4620      	mov	r0, r4
   8a25c:	f001 feda 	bl	8c014 <__lshift>
   8a260:	4605      	mov	r5, r0
   8a262:	9b06      	ldr	r3, [sp, #24]
   8a264:	2b00      	cmp	r3, #0
   8a266:	dd05      	ble.n	8a274 <_dtoa_r+0x71c>
   8a268:	4649      	mov	r1, r9
   8a26a:	461a      	mov	r2, r3
   8a26c:	4620      	mov	r0, r4
   8a26e:	f001 fed1 	bl	8c014 <__lshift>
   8a272:	4681      	mov	r9, r0
   8a274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a276:	2b00      	cmp	r3, #0
   8a278:	f040 8138 	bne.w	8a4ec <_dtoa_r+0x994>
   8a27c:	9b08      	ldr	r3, [sp, #32]
   8a27e:	2b00      	cmp	r3, #0
   8a280:	f340 811e 	ble.w	8a4c0 <_dtoa_r+0x968>
   8a284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a286:	2b00      	cmp	r3, #0
   8a288:	f040 809f 	bne.w	8a3ca <_dtoa_r+0x872>
   8a28c:	9b07      	ldr	r3, [sp, #28]
   8a28e:	3301      	adds	r3, #1
   8a290:	9307      	str	r3, [sp, #28]
   8a292:	2701      	movs	r7, #1
   8a294:	f8dd 800c 	ldr.w	r8, [sp, #12]
   8a298:	f8dd a020 	ldr.w	sl, [sp, #32]
   8a29c:	e007      	b.n	8a2ae <_dtoa_r+0x756>
   8a29e:	4629      	mov	r1, r5
   8a2a0:	2300      	movs	r3, #0
   8a2a2:	220a      	movs	r2, #10
   8a2a4:	4620      	mov	r0, r4
   8a2a6:	f001 fcdf 	bl	8bc68 <__multadd>
   8a2aa:	4605      	mov	r5, r0
   8a2ac:	3701      	adds	r7, #1
   8a2ae:	4649      	mov	r1, r9
   8a2b0:	4628      	mov	r0, r5
   8a2b2:	f7ff fbb9 	bl	89a28 <quorem>
   8a2b6:	4557      	cmp	r7, sl
   8a2b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a2bc:	f808 3b01 	strb.w	r3, [r8], #1
   8a2c0:	dbed      	blt.n	8a29e <_dtoa_r+0x746>
   8a2c2:	9a08      	ldr	r2, [sp, #32]
   8a2c4:	2700      	movs	r7, #0
   8a2c6:	2a00      	cmp	r2, #0
   8a2c8:	bfcc      	ite	gt
   8a2ca:	4693      	movgt	fp, r2
   8a2cc:	f04f 0b01 	movle.w	fp, #1
   8a2d0:	9a03      	ldr	r2, [sp, #12]
   8a2d2:	4493      	add	fp, r2
   8a2d4:	4629      	mov	r1, r5
   8a2d6:	2201      	movs	r2, #1
   8a2d8:	4620      	mov	r0, r4
   8a2da:	9304      	str	r3, [sp, #16]
   8a2dc:	f001 fe9a 	bl	8c014 <__lshift>
   8a2e0:	4649      	mov	r1, r9
   8a2e2:	4605      	mov	r5, r0
   8a2e4:	f001 ff0c 	bl	8c100 <__mcmp>
   8a2e8:	2800      	cmp	r0, #0
   8a2ea:	f340 81ab 	ble.w	8a644 <_dtoa_r+0xaec>
   8a2ee:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8a2f2:	9a03      	ldr	r2, [sp, #12]
   8a2f4:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a2f8:	e004      	b.n	8a304 <_dtoa_r+0x7ac>
   8a2fa:	455a      	cmp	r2, fp
   8a2fc:	f000 81ad 	beq.w	8a65a <_dtoa_r+0xb02>
   8a300:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a304:	2b39      	cmp	r3, #57	; 0x39
   8a306:	f10b 0a01 	add.w	sl, fp, #1
   8a30a:	d0f6      	beq.n	8a2fa <_dtoa_r+0x7a2>
   8a30c:	3301      	adds	r3, #1
   8a30e:	f88b 3000 	strb.w	r3, [fp]
   8a312:	4649      	mov	r1, r9
   8a314:	4620      	mov	r0, r4
   8a316:	f001 fc9d 	bl	8bc54 <_Bfree>
   8a31a:	b156      	cbz	r6, 8a332 <_dtoa_r+0x7da>
   8a31c:	b12f      	cbz	r7, 8a32a <_dtoa_r+0x7d2>
   8a31e:	42b7      	cmp	r7, r6
   8a320:	d003      	beq.n	8a32a <_dtoa_r+0x7d2>
   8a322:	4639      	mov	r1, r7
   8a324:	4620      	mov	r0, r4
   8a326:	f001 fc95 	bl	8bc54 <_Bfree>
   8a32a:	4631      	mov	r1, r6
   8a32c:	4620      	mov	r0, r4
   8a32e:	f001 fc91 	bl	8bc54 <_Bfree>
   8a332:	4629      	mov	r1, r5
   8a334:	4620      	mov	r0, r4
   8a336:	f001 fc8d 	bl	8bc54 <_Bfree>
   8a33a:	2300      	movs	r3, #0
   8a33c:	9a07      	ldr	r2, [sp, #28]
   8a33e:	f88a 3000 	strb.w	r3, [sl]
   8a342:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a344:	601a      	str	r2, [r3, #0]
   8a346:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8a348:	2b00      	cmp	r3, #0
   8a34a:	f43f ac40 	beq.w	89bce <_dtoa_r+0x76>
   8a34e:	9803      	ldr	r0, [sp, #12]
   8a350:	f8c3 a000 	str.w	sl, [r3]
   8a354:	b019      	add	sp, #100	; 0x64
   8a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a35a:	201c      	movs	r0, #28
   8a35c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a35e:	4407      	add	r7, r0
   8a360:	4403      	add	r3, r0
   8a362:	9309      	str	r3, [sp, #36]	; 0x24
   8a364:	9b06      	ldr	r3, [sp, #24]
   8a366:	4403      	add	r3, r0
   8a368:	9306      	str	r3, [sp, #24]
   8a36a:	e771      	b.n	8a250 <_dtoa_r+0x6f8>
   8a36c:	2601      	movs	r6, #1
   8a36e:	e4b6      	b.n	89cde <_dtoa_r+0x186>
   8a370:	f1c0 0020 	rsb	r0, r0, #32
   8a374:	fa08 f000 	lsl.w	r0, r8, r0
   8a378:	e44d      	b.n	89c16 <_dtoa_r+0xbe>
   8a37a:	4601      	mov	r1, r0
   8a37c:	465a      	mov	r2, fp
   8a37e:	4620      	mov	r0, r4
   8a380:	f001 fdec 	bl	8bf5c <__pow5mult>
   8a384:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a386:	4681      	mov	r9, r0
   8a388:	2b01      	cmp	r3, #1
   8a38a:	f340 81b6 	ble.w	8a6fa <_dtoa_r+0xba2>
   8a38e:	f04f 0a00 	mov.w	sl, #0
   8a392:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8a396:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   8a39a:	6918      	ldr	r0, [r3, #16]
   8a39c:	f001 fcb6 	bl	8bd0c <__hi0bits>
   8a3a0:	f1c0 0020 	rsb	r0, r0, #32
   8a3a4:	e741      	b.n	8a22a <_dtoa_r+0x6d2>
   8a3a6:	bf00      	nop
   8a3a8:	40240000 	.word	0x40240000
   8a3ac:	0008d838 	.word	0x0008d838
   8a3b0:	4631      	mov	r1, r6
   8a3b2:	2300      	movs	r3, #0
   8a3b4:	220a      	movs	r2, #10
   8a3b6:	4620      	mov	r0, r4
   8a3b8:	f001 fc56 	bl	8bc68 <__multadd>
   8a3bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a3be:	4606      	mov	r6, r0
   8a3c0:	2b00      	cmp	r3, #0
   8a3c2:	f340 82e9 	ble.w	8a998 <_dtoa_r+0xe40>
   8a3c6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   8a3ca:	2f00      	cmp	r7, #0
   8a3cc:	f300 811d 	bgt.w	8a60a <_dtoa_r+0xab2>
   8a3d0:	f1ba 0f00 	cmp.w	sl, #0
   8a3d4:	f040 81d9 	bne.w	8a78a <_dtoa_r+0xc32>
   8a3d8:	46b0      	mov	r8, r6
   8a3da:	9b04      	ldr	r3, [sp, #16]
   8a3dc:	9908      	ldr	r1, [sp, #32]
   8a3de:	f003 0201 	and.w	r2, r3, #1
   8a3e2:	9b03      	ldr	r3, [sp, #12]
   8a3e4:	920a      	str	r2, [sp, #40]	; 0x28
   8a3e6:	461f      	mov	r7, r3
   8a3e8:	3b01      	subs	r3, #1
   8a3ea:	4419      	add	r1, r3
   8a3ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a3ee:	9108      	str	r1, [sp, #32]
   8a3f0:	4313      	orrs	r3, r2
   8a3f2:	9309      	str	r3, [sp, #36]	; 0x24
   8a3f4:	4649      	mov	r1, r9
   8a3f6:	4628      	mov	r0, r5
   8a3f8:	f7ff fb16 	bl	89a28 <quorem>
   8a3fc:	4631      	mov	r1, r6
   8a3fe:	4683      	mov	fp, r0
   8a400:	4628      	mov	r0, r5
   8a402:	f001 fe7d 	bl	8c100 <__mcmp>
   8a406:	4642      	mov	r2, r8
   8a408:	4649      	mov	r1, r9
   8a40a:	4682      	mov	sl, r0
   8a40c:	4620      	mov	r0, r4
   8a40e:	f001 fe97 	bl	8c140 <__mdiff>
   8a412:	68c2      	ldr	r2, [r0, #12]
   8a414:	4601      	mov	r1, r0
   8a416:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8a41a:	2a00      	cmp	r2, #0
   8a41c:	d143      	bne.n	8a4a6 <_dtoa_r+0x94e>
   8a41e:	9004      	str	r0, [sp, #16]
   8a420:	4628      	mov	r0, r5
   8a422:	9306      	str	r3, [sp, #24]
   8a424:	f001 fe6c 	bl	8c100 <__mcmp>
   8a428:	4602      	mov	r2, r0
   8a42a:	9904      	ldr	r1, [sp, #16]
   8a42c:	4620      	mov	r0, r4
   8a42e:	9204      	str	r2, [sp, #16]
   8a430:	f001 fc10 	bl	8bc54 <_Bfree>
   8a434:	9a04      	ldr	r2, [sp, #16]
   8a436:	9b06      	ldr	r3, [sp, #24]
   8a438:	b91a      	cbnz	r2, 8a442 <_dtoa_r+0x8ea>
   8a43a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8a43c:	2900      	cmp	r1, #0
   8a43e:	f000 829b 	beq.w	8a978 <_dtoa_r+0xe20>
   8a442:	f1ba 0f00 	cmp.w	sl, #0
   8a446:	f2c0 8164 	blt.w	8a712 <_dtoa_r+0xbba>
   8a44a:	9922      	ldr	r1, [sp, #136]	; 0x88
   8a44c:	ea4a 0a01 	orr.w	sl, sl, r1
   8a450:	990a      	ldr	r1, [sp, #40]	; 0x28
   8a452:	ea51 010a 	orrs.w	r1, r1, sl
   8a456:	f000 815c 	beq.w	8a712 <_dtoa_r+0xbba>
   8a45a:	2a00      	cmp	r2, #0
   8a45c:	f300 81b6 	bgt.w	8a7cc <_dtoa_r+0xc74>
   8a460:	9a08      	ldr	r2, [sp, #32]
   8a462:	f107 0a01 	add.w	sl, r7, #1
   8a466:	4297      	cmp	r7, r2
   8a468:	46d3      	mov	fp, sl
   8a46a:	703b      	strb	r3, [r7, #0]
   8a46c:	f000 81b4 	beq.w	8a7d8 <_dtoa_r+0xc80>
   8a470:	4629      	mov	r1, r5
   8a472:	2300      	movs	r3, #0
   8a474:	220a      	movs	r2, #10
   8a476:	4620      	mov	r0, r4
   8a478:	f001 fbf6 	bl	8bc68 <__multadd>
   8a47c:	4546      	cmp	r6, r8
   8a47e:	4605      	mov	r5, r0
   8a480:	4631      	mov	r1, r6
   8a482:	f04f 0300 	mov.w	r3, #0
   8a486:	f04f 020a 	mov.w	r2, #10
   8a48a:	4620      	mov	r0, r4
   8a48c:	d012      	beq.n	8a4b4 <_dtoa_r+0x95c>
   8a48e:	f001 fbeb 	bl	8bc68 <__multadd>
   8a492:	4641      	mov	r1, r8
   8a494:	4606      	mov	r6, r0
   8a496:	2300      	movs	r3, #0
   8a498:	220a      	movs	r2, #10
   8a49a:	4620      	mov	r0, r4
   8a49c:	f001 fbe4 	bl	8bc68 <__multadd>
   8a4a0:	4657      	mov	r7, sl
   8a4a2:	4680      	mov	r8, r0
   8a4a4:	e7a6      	b.n	8a3f4 <_dtoa_r+0x89c>
   8a4a6:	4620      	mov	r0, r4
   8a4a8:	9304      	str	r3, [sp, #16]
   8a4aa:	f001 fbd3 	bl	8bc54 <_Bfree>
   8a4ae:	2201      	movs	r2, #1
   8a4b0:	9b04      	ldr	r3, [sp, #16]
   8a4b2:	e7c6      	b.n	8a442 <_dtoa_r+0x8ea>
   8a4b4:	f001 fbd8 	bl	8bc68 <__multadd>
   8a4b8:	4657      	mov	r7, sl
   8a4ba:	4606      	mov	r6, r0
   8a4bc:	4680      	mov	r8, r0
   8a4be:	e799      	b.n	8a3f4 <_dtoa_r+0x89c>
   8a4c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a4c2:	2b02      	cmp	r3, #2
   8a4c4:	dc7a      	bgt.n	8a5bc <_dtoa_r+0xa64>
   8a4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a4c8:	2b00      	cmp	r3, #0
   8a4ca:	f47f af7e 	bne.w	8a3ca <_dtoa_r+0x872>
   8a4ce:	9b07      	ldr	r3, [sp, #28]
   8a4d0:	4649      	mov	r1, r9
   8a4d2:	3301      	adds	r3, #1
   8a4d4:	4628      	mov	r0, r5
   8a4d6:	9307      	str	r3, [sp, #28]
   8a4d8:	f7ff faa6 	bl	89a28 <quorem>
   8a4dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a4e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a4e4:	2700      	movs	r7, #0
   8a4e6:	f80b 3b01 	strb.w	r3, [fp], #1
   8a4ea:	e6f3      	b.n	8a2d4 <_dtoa_r+0x77c>
   8a4ec:	4649      	mov	r1, r9
   8a4ee:	4628      	mov	r0, r5
   8a4f0:	f001 fe06 	bl	8c100 <__mcmp>
   8a4f4:	2800      	cmp	r0, #0
   8a4f6:	f6bf aec1 	bge.w	8a27c <_dtoa_r+0x724>
   8a4fa:	4629      	mov	r1, r5
   8a4fc:	2300      	movs	r3, #0
   8a4fe:	220a      	movs	r2, #10
   8a500:	4620      	mov	r0, r4
   8a502:	f001 fbb1 	bl	8bc68 <__multadd>
   8a506:	9b07      	ldr	r3, [sp, #28]
   8a508:	4605      	mov	r5, r0
   8a50a:	f103 38ff 	add.w	r8, r3, #4294967295
   8a50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a510:	2b00      	cmp	r3, #0
   8a512:	f47f af4d 	bne.w	8a3b0 <_dtoa_r+0x858>
   8a516:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a518:	2b00      	cmp	r3, #0
   8a51a:	f340 8234 	ble.w	8a986 <_dtoa_r+0xe2e>
   8a51e:	9308      	str	r3, [sp, #32]
   8a520:	e6b7      	b.n	8a292 <_dtoa_r+0x73a>
   8a522:	4bb0      	ldr	r3, [pc, #704]	; (8a7e4 <_dtoa_r+0xc8c>)
   8a524:	9303      	str	r3, [sp, #12]
   8a526:	3303      	adds	r3, #3
   8a528:	f7ff bbf4 	b.w	89d14 <_dtoa_r+0x1bc>
   8a52c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a530:	2900      	cmp	r1, #0
   8a532:	f47f ae73 	bne.w	8a21c <_dtoa_r+0x6c4>
   8a536:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a53a:	2b00      	cmp	r3, #0
   8a53c:	f47f ae6e 	bne.w	8a21c <_dtoa_r+0x6c4>
   8a540:	4ba9      	ldr	r3, [pc, #676]	; (8a7e8 <_dtoa_r+0xc90>)
   8a542:	4013      	ands	r3, r2
   8a544:	2b00      	cmp	r3, #0
   8a546:	f000 8200 	beq.w	8a94a <_dtoa_r+0xdf2>
   8a54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a54c:	f04f 0a01 	mov.w	sl, #1
   8a550:	3301      	adds	r3, #1
   8a552:	9309      	str	r3, [sp, #36]	; 0x24
   8a554:	9b06      	ldr	r3, [sp, #24]
   8a556:	3301      	adds	r3, #1
   8a558:	9306      	str	r3, [sp, #24]
   8a55a:	e661      	b.n	8a220 <_dtoa_r+0x6c8>
   8a55c:	2301      	movs	r3, #1
   8a55e:	930c      	str	r3, [sp, #48]	; 0x30
   8a560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8a562:	9a07      	ldr	r2, [sp, #28]
   8a564:	4413      	add	r3, r2
   8a566:	9312      	str	r3, [sp, #72]	; 0x48
   8a568:	3301      	adds	r3, #1
   8a56a:	2b01      	cmp	r3, #1
   8a56c:	461f      	mov	r7, r3
   8a56e:	bfb8      	it	lt
   8a570:	2701      	movlt	r7, #1
   8a572:	9308      	str	r3, [sp, #32]
   8a574:	2100      	movs	r1, #0
   8a576:	2f17      	cmp	r7, #23
   8a578:	6461      	str	r1, [r4, #68]	; 0x44
   8a57a:	f77f ac1e 	ble.w	89dba <_dtoa_r+0x262>
   8a57e:	2201      	movs	r2, #1
   8a580:	2304      	movs	r3, #4
   8a582:	005b      	lsls	r3, r3, #1
   8a584:	f103 0014 	add.w	r0, r3, #20
   8a588:	42b8      	cmp	r0, r7
   8a58a:	4611      	mov	r1, r2
   8a58c:	f102 0201 	add.w	r2, r2, #1
   8a590:	d9f7      	bls.n	8a582 <_dtoa_r+0xa2a>
   8a592:	6461      	str	r1, [r4, #68]	; 0x44
   8a594:	e411      	b.n	89dba <_dtoa_r+0x262>
   8a596:	2301      	movs	r3, #1
   8a598:	930c      	str	r3, [sp, #48]	; 0x30
   8a59a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8a59c:	2b00      	cmp	r3, #0
   8a59e:	dd4c      	ble.n	8a63a <_dtoa_r+0xae2>
   8a5a0:	461f      	mov	r7, r3
   8a5a2:	9312      	str	r3, [sp, #72]	; 0x48
   8a5a4:	9308      	str	r3, [sp, #32]
   8a5a6:	e7e5      	b.n	8a574 <_dtoa_r+0xa1c>
   8a5a8:	2300      	movs	r3, #0
   8a5aa:	930c      	str	r3, [sp, #48]	; 0x30
   8a5ac:	e7d8      	b.n	8a560 <_dtoa_r+0xa08>
   8a5ae:	2300      	movs	r3, #0
   8a5b0:	930c      	str	r3, [sp, #48]	; 0x30
   8a5b2:	e7f2      	b.n	8a59a <_dtoa_r+0xa42>
   8a5b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a5b6:	f8cd 801c 	str.w	r8, [sp, #28]
   8a5ba:	9308      	str	r3, [sp, #32]
   8a5bc:	9b08      	ldr	r3, [sp, #32]
   8a5be:	2b00      	cmp	r3, #0
   8a5c0:	f47f ad43 	bne.w	8a04a <_dtoa_r+0x4f2>
   8a5c4:	4649      	mov	r1, r9
   8a5c6:	2205      	movs	r2, #5
   8a5c8:	4620      	mov	r0, r4
   8a5ca:	f001 fb4d 	bl	8bc68 <__multadd>
   8a5ce:	4681      	mov	r9, r0
   8a5d0:	4628      	mov	r0, r5
   8a5d2:	4649      	mov	r1, r9
   8a5d4:	f001 fd94 	bl	8c100 <__mcmp>
   8a5d8:	2800      	cmp	r0, #0
   8a5da:	f77f ad36 	ble.w	8a04a <_dtoa_r+0x4f2>
   8a5de:	2331      	movs	r3, #49	; 0x31
   8a5e0:	9803      	ldr	r0, [sp, #12]
   8a5e2:	9f07      	ldr	r7, [sp, #28]
   8a5e4:	4680      	mov	r8, r0
   8a5e6:	f800 3b01 	strb.w	r3, [r0], #1
   8a5ea:	3701      	adds	r7, #1
   8a5ec:	9003      	str	r0, [sp, #12]
   8a5ee:	4649      	mov	r1, r9
   8a5f0:	4620      	mov	r0, r4
   8a5f2:	f001 fb2f 	bl	8bc54 <_Bfree>
   8a5f6:	1c7b      	adds	r3, r7, #1
   8a5f8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   8a5fc:	9307      	str	r3, [sp, #28]
   8a5fe:	f8cd 800c 	str.w	r8, [sp, #12]
   8a602:	2e00      	cmp	r6, #0
   8a604:	f47f ae91 	bne.w	8a32a <_dtoa_r+0x7d2>
   8a608:	e693      	b.n	8a332 <_dtoa_r+0x7da>
   8a60a:	4631      	mov	r1, r6
   8a60c:	463a      	mov	r2, r7
   8a60e:	4620      	mov	r0, r4
   8a610:	f001 fd00 	bl	8c014 <__lshift>
   8a614:	4606      	mov	r6, r0
   8a616:	e6db      	b.n	8a3d0 <_dtoa_r+0x878>
   8a618:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a61a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8a61e:	eba8 0303 	sub.w	r3, r8, r3
   8a622:	449b      	add	fp, r3
   8a624:	f04f 0800 	mov.w	r8, #0
   8a628:	e588      	b.n	8a13c <_dtoa_r+0x5e4>
   8a62a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a62e:	f04f 0a02 	mov.w	sl, #2
   8a632:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a636:	f7ff bbee 	b.w	89e16 <_dtoa_r+0x2be>
   8a63a:	2301      	movs	r3, #1
   8a63c:	9323      	str	r3, [sp, #140]	; 0x8c
   8a63e:	9308      	str	r3, [sp, #32]
   8a640:	f7ff bbb7 	b.w	89db2 <_dtoa_r+0x25a>
   8a644:	d103      	bne.n	8a64e <_dtoa_r+0xaf6>
   8a646:	9b04      	ldr	r3, [sp, #16]
   8a648:	07d8      	lsls	r0, r3, #31
   8a64a:	f53f ae50 	bmi.w	8a2ee <_dtoa_r+0x796>
   8a64e:	46da      	mov	sl, fp
   8a650:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a654:	2b30      	cmp	r3, #48	; 0x30
   8a656:	d0fa      	beq.n	8a64e <_dtoa_r+0xaf6>
   8a658:	e65b      	b.n	8a312 <_dtoa_r+0x7ba>
   8a65a:	9b07      	ldr	r3, [sp, #28]
   8a65c:	9a03      	ldr	r2, [sp, #12]
   8a65e:	3301      	adds	r3, #1
   8a660:	9307      	str	r3, [sp, #28]
   8a662:	2331      	movs	r3, #49	; 0x31
   8a664:	7013      	strb	r3, [r2, #0]
   8a666:	e654      	b.n	8a312 <_dtoa_r+0x7ba>
   8a668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a66a:	2a00      	cmp	r2, #0
   8a66c:	f000 8128 	beq.w	8a8c0 <_dtoa_r+0xd68>
   8a670:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a674:	9a06      	ldr	r2, [sp, #24]
   8a676:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8a67a:	441a      	add	r2, r3
   8a67c:	9206      	str	r2, [sp, #24]
   8a67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a680:	4617      	mov	r7, r2
   8a682:	441a      	add	r2, r3
   8a684:	9209      	str	r2, [sp, #36]	; 0x24
   8a686:	e564      	b.n	8a152 <_dtoa_r+0x5fa>
   8a688:	f04f 0900 	mov.w	r9, #0
   8a68c:	464e      	mov	r6, r9
   8a68e:	e4dc      	b.n	8a04a <_dtoa_r+0x4f2>
   8a690:	4629      	mov	r1, r5
   8a692:	4620      	mov	r0, r4
   8a694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a696:	f001 fc61 	bl	8bf5c <__pow5mult>
   8a69a:	4605      	mov	r5, r0
   8a69c:	e5b1      	b.n	8a202 <_dtoa_r+0x6aa>
   8a69e:	900e      	str	r0, [sp, #56]	; 0x38
   8a6a0:	e564      	b.n	8a16c <_dtoa_r+0x614>
   8a6a2:	f000 8111 	beq.w	8a8c8 <_dtoa_r+0xd70>
   8a6a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8a6aa:	9a07      	ldr	r2, [sp, #28]
   8a6ac:	4b4f      	ldr	r3, [pc, #316]	; (8a7ec <_dtoa_r+0xc94>)
   8a6ae:	4256      	negs	r6, r2
   8a6b0:	f006 020f 	and.w	r2, r6, #15
   8a6b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a6bc:	f002 fd6c 	bl	8d198 <__aeabi_dmul>
   8a6c0:	1136      	asrs	r6, r6, #4
   8a6c2:	4680      	mov	r8, r0
   8a6c4:	4689      	mov	r9, r1
   8a6c6:	f000 8170 	beq.w	8a9aa <_dtoa_r+0xe52>
   8a6ca:	2300      	movs	r3, #0
   8a6cc:	f04f 0a02 	mov.w	sl, #2
   8a6d0:	4f47      	ldr	r7, [pc, #284]	; (8a7f0 <_dtoa_r+0xc98>)
   8a6d2:	07f2      	lsls	r2, r6, #31
   8a6d4:	d506      	bpl.n	8a6e4 <_dtoa_r+0xb8c>
   8a6d6:	e9d7 2300 	ldrd	r2, r3, [r7]
   8a6da:	f002 fd5d 	bl	8d198 <__aeabi_dmul>
   8a6de:	2301      	movs	r3, #1
   8a6e0:	f10a 0a01 	add.w	sl, sl, #1
   8a6e4:	1076      	asrs	r6, r6, #1
   8a6e6:	f107 0708 	add.w	r7, r7, #8
   8a6ea:	d1f2      	bne.n	8a6d2 <_dtoa_r+0xb7a>
   8a6ec:	2b00      	cmp	r3, #0
   8a6ee:	f43f abb1 	beq.w	89e54 <_dtoa_r+0x2fc>
   8a6f2:	4680      	mov	r8, r0
   8a6f4:	4689      	mov	r9, r1
   8a6f6:	f7ff bbad 	b.w	89e54 <_dtoa_r+0x2fc>
   8a6fa:	9b04      	ldr	r3, [sp, #16]
   8a6fc:	2b00      	cmp	r3, #0
   8a6fe:	f47f ae46 	bne.w	8a38e <_dtoa_r+0x836>
   8a702:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a706:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a70a:	2b00      	cmp	r3, #0
   8a70c:	f43f af18 	beq.w	8a540 <_dtoa_r+0x9e8>
   8a710:	e63d      	b.n	8a38e <_dtoa_r+0x836>
   8a712:	2a00      	cmp	r2, #0
   8a714:	dd12      	ble.n	8a73c <_dtoa_r+0xbe4>
   8a716:	4629      	mov	r1, r5
   8a718:	2201      	movs	r2, #1
   8a71a:	4620      	mov	r0, r4
   8a71c:	9304      	str	r3, [sp, #16]
   8a71e:	f001 fc79 	bl	8c014 <__lshift>
   8a722:	4649      	mov	r1, r9
   8a724:	4605      	mov	r5, r0
   8a726:	f001 fceb 	bl	8c100 <__mcmp>
   8a72a:	2800      	cmp	r0, #0
   8a72c:	9b04      	ldr	r3, [sp, #16]
   8a72e:	f340 8117 	ble.w	8a960 <_dtoa_r+0xe08>
   8a732:	2b39      	cmp	r3, #57	; 0x39
   8a734:	f000 80fb 	beq.w	8a92e <_dtoa_r+0xdd6>
   8a738:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a73c:	46ba      	mov	sl, r7
   8a73e:	9a07      	ldr	r2, [sp, #28]
   8a740:	4637      	mov	r7, r6
   8a742:	3201      	adds	r2, #1
   8a744:	4646      	mov	r6, r8
   8a746:	9207      	str	r2, [sp, #28]
   8a748:	f80a 3b01 	strb.w	r3, [sl], #1
   8a74c:	e5e1      	b.n	8a312 <_dtoa_r+0x7ba>
   8a74e:	9509      	str	r5, [sp, #36]	; 0x24
   8a750:	9c06      	ldr	r4, [sp, #24]
   8a752:	9d04      	ldr	r5, [sp, #16]
   8a754:	4602      	mov	r2, r0
   8a756:	460b      	mov	r3, r1
   8a758:	f002 fb68 	bl	8ce2c <__adddf3>
   8a75c:	4652      	mov	r2, sl
   8a75e:	465b      	mov	r3, fp
   8a760:	4680      	mov	r8, r0
   8a762:	4689      	mov	r9, r1
   8a764:	f002 ffa8 	bl	8d6b8 <__aeabi_dcmpgt>
   8a768:	b960      	cbnz	r0, 8a784 <_dtoa_r+0xc2c>
   8a76a:	4652      	mov	r2, sl
   8a76c:	465b      	mov	r3, fp
   8a76e:	4640      	mov	r0, r8
   8a770:	4649      	mov	r1, r9
   8a772:	f002 ff79 	bl	8d668 <__aeabi_dcmpeq>
   8a776:	2800      	cmp	r0, #0
   8a778:	f43f accb 	beq.w	8a112 <_dtoa_r+0x5ba>
   8a77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a77e:	07d9      	lsls	r1, r3, #31
   8a780:	f57f acc7 	bpl.w	8a112 <_dtoa_r+0x5ba>
   8a784:	9a03      	ldr	r2, [sp, #12]
   8a786:	f7ff bbff 	b.w	89f88 <_dtoa_r+0x430>
   8a78a:	4620      	mov	r0, r4
   8a78c:	6871      	ldr	r1, [r6, #4]
   8a78e:	f001 fa3b 	bl	8bc08 <_Balloc>
   8a792:	4607      	mov	r7, r0
   8a794:	2800      	cmp	r0, #0
   8a796:	f000 810c 	beq.w	8a9b2 <_dtoa_r+0xe5a>
   8a79a:	6933      	ldr	r3, [r6, #16]
   8a79c:	f106 010c 	add.w	r1, r6, #12
   8a7a0:	3302      	adds	r3, #2
   8a7a2:	009a      	lsls	r2, r3, #2
   8a7a4:	300c      	adds	r0, #12
   8a7a6:	f7fc fadd 	bl	86d64 <memcpy>
   8a7aa:	4639      	mov	r1, r7
   8a7ac:	2201      	movs	r2, #1
   8a7ae:	4620      	mov	r0, r4
   8a7b0:	f001 fc30 	bl	8c014 <__lshift>
   8a7b4:	4680      	mov	r8, r0
   8a7b6:	e610      	b.n	8a3da <_dtoa_r+0x882>
   8a7b8:	4629      	mov	r1, r5
   8a7ba:	4620      	mov	r0, r4
   8a7bc:	f001 fbce 	bl	8bf5c <__pow5mult>
   8a7c0:	4605      	mov	r5, r0
   8a7c2:	e51e      	b.n	8a202 <_dtoa_r+0x6aa>
   8a7c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a7c8:	1a9f      	subs	r7, r3, r2
   8a7ca:	e4c2      	b.n	8a152 <_dtoa_r+0x5fa>
   8a7cc:	2b39      	cmp	r3, #57	; 0x39
   8a7ce:	f000 80ae 	beq.w	8a92e <_dtoa_r+0xdd6>
   8a7d2:	46ba      	mov	sl, r7
   8a7d4:	3301      	adds	r3, #1
   8a7d6:	e7b2      	b.n	8a73e <_dtoa_r+0xbe6>
   8a7d8:	9a07      	ldr	r2, [sp, #28]
   8a7da:	4637      	mov	r7, r6
   8a7dc:	3201      	adds	r2, #1
   8a7de:	4646      	mov	r6, r8
   8a7e0:	9207      	str	r2, [sp, #28]
   8a7e2:	e577      	b.n	8a2d4 <_dtoa_r+0x77c>
   8a7e4:	0008d87c 	.word	0x0008d87c
   8a7e8:	7ff00000 	.word	0x7ff00000
   8a7ec:	0008d9d8 	.word	0x0008d9d8
   8a7f0:	0008d9b0 	.word	0x0008d9b0
   8a7f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   8a7f8:	4983      	ldr	r1, [pc, #524]	; (8aa08 <_dtoa_r+0xeb0>)
   8a7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8a7fe:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   8a802:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a806:	f002 fcc7 	bl	8d198 <__aeabi_dmul>
   8a80a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a80e:	4649      	mov	r1, r9
   8a810:	4640      	mov	r0, r8
   8a812:	f002 ff71 	bl	8d6f8 <__aeabi_d2iz>
   8a816:	4606      	mov	r6, r0
   8a818:	f002 fc54 	bl	8d0c4 <__aeabi_i2d>
   8a81c:	460b      	mov	r3, r1
   8a81e:	4602      	mov	r2, r0
   8a820:	4649      	mov	r1, r9
   8a822:	4640      	mov	r0, r8
   8a824:	f002 fb00 	bl	8ce28 <__aeabi_dsub>
   8a828:	4653      	mov	r3, sl
   8a82a:	9f03      	ldr	r7, [sp, #12]
   8a82c:	3630      	adds	r6, #48	; 0x30
   8a82e:	2b01      	cmp	r3, #1
   8a830:	4680      	mov	r8, r0
   8a832:	4689      	mov	r9, r1
   8a834:	f807 6b01 	strb.w	r6, [r7], #1
   8a838:	f000 80ac 	beq.w	8a994 <_dtoa_r+0xe3c>
   8a83c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8a83e:	9b03      	ldr	r3, [sp, #12]
   8a840:	441e      	add	r6, r3
   8a842:	2200      	movs	r2, #0
   8a844:	4b71      	ldr	r3, [pc, #452]	; (8aa0c <_dtoa_r+0xeb4>)
   8a846:	4640      	mov	r0, r8
   8a848:	4649      	mov	r1, r9
   8a84a:	f002 fca5 	bl	8d198 <__aeabi_dmul>
   8a84e:	4689      	mov	r9, r1
   8a850:	4680      	mov	r8, r0
   8a852:	f002 ff51 	bl	8d6f8 <__aeabi_d2iz>
   8a856:	4682      	mov	sl, r0
   8a858:	f002 fc34 	bl	8d0c4 <__aeabi_i2d>
   8a85c:	4602      	mov	r2, r0
   8a85e:	460b      	mov	r3, r1
   8a860:	4640      	mov	r0, r8
   8a862:	4649      	mov	r1, r9
   8a864:	f002 fae0 	bl	8ce28 <__aeabi_dsub>
   8a868:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   8a86c:	f807 ab01 	strb.w	sl, [r7], #1
   8a870:	42b7      	cmp	r7, r6
   8a872:	4680      	mov	r8, r0
   8a874:	4689      	mov	r9, r1
   8a876:	d1e4      	bne.n	8a842 <_dtoa_r+0xcea>
   8a878:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a87c:	2200      	movs	r2, #0
   8a87e:	4b64      	ldr	r3, [pc, #400]	; (8aa10 <_dtoa_r+0xeb8>)
   8a880:	f002 fad4 	bl	8ce2c <__adddf3>
   8a884:	4642      	mov	r2, r8
   8a886:	464b      	mov	r3, r9
   8a888:	f002 fef8 	bl	8d67c <__aeabi_dcmplt>
   8a88c:	2800      	cmp	r0, #0
   8a88e:	d162      	bne.n	8a956 <_dtoa_r+0xdfe>
   8a890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8a894:	2000      	movs	r0, #0
   8a896:	495e      	ldr	r1, [pc, #376]	; (8aa10 <_dtoa_r+0xeb8>)
   8a898:	f002 fac6 	bl	8ce28 <__aeabi_dsub>
   8a89c:	4642      	mov	r2, r8
   8a89e:	464b      	mov	r3, r9
   8a8a0:	f002 ff0a 	bl	8d6b8 <__aeabi_dcmpgt>
   8a8a4:	2800      	cmp	r0, #0
   8a8a6:	f43f aba9 	beq.w	89ffc <_dtoa_r+0x4a4>
   8a8aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   8a8ae:	46b2      	mov	sl, r6
   8a8b0:	2b30      	cmp	r3, #48	; 0x30
   8a8b2:	f106 36ff 	add.w	r6, r6, #4294967295
   8a8b6:	d0f8      	beq.n	8a8aa <_dtoa_r+0xd52>
   8a8b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8a8ba:	3301      	adds	r3, #1
   8a8bc:	9307      	str	r3, [sp, #28]
   8a8be:	e538      	b.n	8a332 <_dtoa_r+0x7da>
   8a8c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8a8c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a8c6:	e6d5      	b.n	8a674 <_dtoa_r+0xb1c>
   8a8c8:	f04f 0a02 	mov.w	sl, #2
   8a8cc:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   8a8d0:	f7ff bac0 	b.w	89e54 <_dtoa_r+0x2fc>
   8a8d4:	9b08      	ldr	r3, [sp, #32]
   8a8d6:	2b00      	cmp	r3, #0
   8a8d8:	f43f ab62 	beq.w	89fa0 <_dtoa_r+0x448>
   8a8dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a8de:	2b00      	cmp	r3, #0
   8a8e0:	f77f ab8c 	ble.w	89ffc <_dtoa_r+0x4a4>
   8a8e4:	9313      	str	r3, [sp, #76]	; 0x4c
   8a8e6:	9b07      	ldr	r3, [sp, #28]
   8a8e8:	2200      	movs	r2, #0
   8a8ea:	3b01      	subs	r3, #1
   8a8ec:	4640      	mov	r0, r8
   8a8ee:	4649      	mov	r1, r9
   8a8f0:	9314      	str	r3, [sp, #80]	; 0x50
   8a8f2:	4b46      	ldr	r3, [pc, #280]	; (8aa0c <_dtoa_r+0xeb4>)
   8a8f4:	f002 fc50 	bl	8d198 <__aeabi_dmul>
   8a8f8:	4680      	mov	r8, r0
   8a8fa:	4689      	mov	r9, r1
   8a8fc:	f10a 0001 	add.w	r0, sl, #1
   8a900:	f002 fbe0 	bl	8d0c4 <__aeabi_i2d>
   8a904:	4642      	mov	r2, r8
   8a906:	464b      	mov	r3, r9
   8a908:	f002 fc46 	bl	8d198 <__aeabi_dmul>
   8a90c:	4b41      	ldr	r3, [pc, #260]	; (8aa14 <_dtoa_r+0xebc>)
   8a90e:	2200      	movs	r2, #0
   8a910:	f002 fa8c 	bl	8ce2c <__adddf3>
   8a914:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   8a918:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a91c:	9311      	str	r3, [sp, #68]	; 0x44
   8a91e:	f7ff babc 	b.w	89e9a <_dtoa_r+0x342>
   8a922:	9b07      	ldr	r3, [sp, #28]
   8a924:	3301      	adds	r3, #1
   8a926:	9307      	str	r3, [sp, #28]
   8a928:	2331      	movs	r3, #49	; 0x31
   8a92a:	f7ff bb34 	b.w	89f96 <_dtoa_r+0x43e>
   8a92e:	9b07      	ldr	r3, [sp, #28]
   8a930:	46bb      	mov	fp, r7
   8a932:	3301      	adds	r3, #1
   8a934:	9307      	str	r3, [sp, #28]
   8a936:	2339      	movs	r3, #57	; 0x39
   8a938:	4637      	mov	r7, r6
   8a93a:	f80b 3b01 	strb.w	r3, [fp], #1
   8a93e:	4646      	mov	r6, r8
   8a940:	e4d7      	b.n	8a2f2 <_dtoa_r+0x79a>
   8a942:	f04f 0900 	mov.w	r9, #0
   8a946:	464e      	mov	r6, r9
   8a948:	e649      	b.n	8a5de <_dtoa_r+0xa86>
   8a94a:	469a      	mov	sl, r3
   8a94c:	e468      	b.n	8a220 <_dtoa_r+0x6c8>
   8a94e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8a950:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8a952:	46b2      	mov	sl, r6
   8a954:	e7b0      	b.n	8a8b8 <_dtoa_r+0xd60>
   8a956:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8a958:	9a03      	ldr	r2, [sp, #12]
   8a95a:	9307      	str	r3, [sp, #28]
   8a95c:	f7ff bb14 	b.w	89f88 <_dtoa_r+0x430>
   8a960:	f47f aeec 	bne.w	8a73c <_dtoa_r+0xbe4>
   8a964:	07da      	lsls	r2, r3, #31
   8a966:	f57f aee9 	bpl.w	8a73c <_dtoa_r+0xbe4>
   8a96a:	e6e2      	b.n	8a732 <_dtoa_r+0xbda>
   8a96c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   8a970:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8a972:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8a974:	f7ff bb42 	b.w	89ffc <_dtoa_r+0x4a4>
   8a978:	2b39      	cmp	r3, #57	; 0x39
   8a97a:	d0d8      	beq.n	8a92e <_dtoa_r+0xdd6>
   8a97c:	f1ba 0f00 	cmp.w	sl, #0
   8a980:	f73f aeda 	bgt.w	8a738 <_dtoa_r+0xbe0>
   8a984:	e6da      	b.n	8a73c <_dtoa_r+0xbe4>
   8a986:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a988:	2b02      	cmp	r3, #2
   8a98a:	f73f ae13 	bgt.w	8a5b4 <_dtoa_r+0xa5c>
   8a98e:	f8cd 801c 	str.w	r8, [sp, #28]
   8a992:	e59c      	b.n	8a4ce <_dtoa_r+0x976>
   8a994:	463e      	mov	r6, r7
   8a996:	e76f      	b.n	8a878 <_dtoa_r+0xd20>
   8a998:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a99a:	2b02      	cmp	r3, #2
   8a99c:	f73f ae0a 	bgt.w	8a5b4 <_dtoa_r+0xa5c>
   8a9a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a9a2:	f8cd 801c 	str.w	r8, [sp, #28]
   8a9a6:	9308      	str	r3, [sp, #32]
   8a9a8:	e50f      	b.n	8a3ca <_dtoa_r+0x872>
   8a9aa:	f04f 0a02 	mov.w	sl, #2
   8a9ae:	f7ff ba51 	b.w	89e54 <_dtoa_r+0x2fc>
   8a9b2:	4602      	mov	r2, r0
   8a9b4:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a9b8:	4b17      	ldr	r3, [pc, #92]	; (8aa18 <_dtoa_r+0xec0>)
   8a9ba:	4818      	ldr	r0, [pc, #96]	; (8aa1c <_dtoa_r+0xec4>)
   8a9bc:	f002 f8a4 	bl	8cb08 <__assert_func>
   8a9c0:	2600      	movs	r6, #0
   8a9c2:	4620      	mov	r0, r4
   8a9c4:	4631      	mov	r1, r6
   8a9c6:	6466      	str	r6, [r4, #68]	; 0x44
   8a9c8:	f001 f91e 	bl	8bc08 <_Balloc>
   8a9cc:	9003      	str	r0, [sp, #12]
   8a9ce:	b978      	cbnz	r0, 8a9f0 <_dtoa_r+0xe98>
   8a9d0:	2200      	movs	r2, #0
   8a9d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a9d6:	4b10      	ldr	r3, [pc, #64]	; (8aa18 <_dtoa_r+0xec0>)
   8a9d8:	4810      	ldr	r0, [pc, #64]	; (8aa1c <_dtoa_r+0xec4>)
   8a9da:	f002 f895 	bl	8cb08 <__assert_func>
   8a9de:	4b10      	ldr	r3, [pc, #64]	; (8aa20 <_dtoa_r+0xec8>)
   8a9e0:	9303      	str	r3, [sp, #12]
   8a9e2:	f7ff b8f4 	b.w	89bce <_dtoa_r+0x76>
   8a9e6:	f43f ac33 	beq.w	8a250 <_dtoa_r+0x6f8>
   8a9ea:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a9ee:	e4b5      	b.n	8a35c <_dtoa_r+0x804>
   8a9f0:	9b03      	ldr	r3, [sp, #12]
   8a9f2:	2201      	movs	r2, #1
   8a9f4:	6423      	str	r3, [r4, #64]	; 0x40
   8a9f6:	f04f 33ff 	mov.w	r3, #4294967295
   8a9fa:	9623      	str	r6, [sp, #140]	; 0x8c
   8a9fc:	9312      	str	r3, [sp, #72]	; 0x48
   8a9fe:	920c      	str	r2, [sp, #48]	; 0x30
   8aa00:	9308      	str	r3, [sp, #32]
   8aa02:	f7ff bafb 	b.w	89ffc <_dtoa_r+0x4a4>
   8aa06:	bf00      	nop
   8aa08:	0008d9d8 	.word	0x0008d9d8
   8aa0c:	40240000 	.word	0x40240000
   8aa10:	3fe00000 	.word	0x3fe00000
   8aa14:	401c0000 	.word	0x401c0000
   8aa18:	0008d88c 	.word	0x0008d88c
   8aa1c:	0008d8a0 	.word	0x0008d8a0
   8aa20:	0008d880 	.word	0x0008d880

0008aa24 <__sflush_r>:
   8aa24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa2a:	460c      	mov	r4, r1
   8aa2c:	0711      	lsls	r1, r2, #28
   8aa2e:	4607      	mov	r7, r0
   8aa30:	d443      	bmi.n	8aaba <__sflush_r+0x96>
   8aa32:	6863      	ldr	r3, [r4, #4]
   8aa34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8aa38:	2b00      	cmp	r3, #0
   8aa3a:	81a2      	strh	r2, [r4, #12]
   8aa3c:	dd5b      	ble.n	8aaf6 <__sflush_r+0xd2>
   8aa3e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8aa40:	2d00      	cmp	r5, #0
   8aa42:	d056      	beq.n	8aaf2 <__sflush_r+0xce>
   8aa44:	2300      	movs	r3, #0
   8aa46:	683e      	ldr	r6, [r7, #0]
   8aa48:	603b      	str	r3, [r7, #0]
   8aa4a:	b293      	uxth	r3, r2
   8aa4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8aa50:	d155      	bne.n	8aafe <__sflush_r+0xda>
   8aa52:	2301      	movs	r3, #1
   8aa54:	4638      	mov	r0, r7
   8aa56:	69e1      	ldr	r1, [r4, #28]
   8aa58:	47a8      	blx	r5
   8aa5a:	1c42      	adds	r2, r0, #1
   8aa5c:	d065      	beq.n	8ab2a <__sflush_r+0x106>
   8aa5e:	89a3      	ldrh	r3, [r4, #12]
   8aa60:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8aa62:	075b      	lsls	r3, r3, #29
   8aa64:	d505      	bpl.n	8aa72 <__sflush_r+0x4e>
   8aa66:	6863      	ldr	r3, [r4, #4]
   8aa68:	1ac0      	subs	r0, r0, r3
   8aa6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8aa6c:	b10b      	cbz	r3, 8aa72 <__sflush_r+0x4e>
   8aa6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8aa70:	1ac0      	subs	r0, r0, r3
   8aa72:	4602      	mov	r2, r0
   8aa74:	69e1      	ldr	r1, [r4, #28]
   8aa76:	2300      	movs	r3, #0
   8aa78:	4638      	mov	r0, r7
   8aa7a:	47a8      	blx	r5
   8aa7c:	1c41      	adds	r1, r0, #1
   8aa7e:	d140      	bne.n	8ab02 <__sflush_r+0xde>
   8aa80:	683b      	ldr	r3, [r7, #0]
   8aa82:	2b00      	cmp	r3, #0
   8aa84:	d03d      	beq.n	8ab02 <__sflush_r+0xde>
   8aa86:	2b1d      	cmp	r3, #29
   8aa88:	d001      	beq.n	8aa8e <__sflush_r+0x6a>
   8aa8a:	2b16      	cmp	r3, #22
   8aa8c:	d154      	bne.n	8ab38 <__sflush_r+0x114>
   8aa8e:	2200      	movs	r2, #0
   8aa90:	89a3      	ldrh	r3, [r4, #12]
   8aa92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8aa96:	81a3      	strh	r3, [r4, #12]
   8aa98:	6923      	ldr	r3, [r4, #16]
   8aa9a:	e9c4 3200 	strd	r3, r2, [r4]
   8aa9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8aaa0:	603e      	str	r6, [r7, #0]
   8aaa2:	b331      	cbz	r1, 8aaf2 <__sflush_r+0xce>
   8aaa4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8aaa8:	4299      	cmp	r1, r3
   8aaaa:	d002      	beq.n	8aab2 <__sflush_r+0x8e>
   8aaac:	4638      	mov	r0, r7
   8aaae:	f000 f9fb 	bl	8aea8 <_free_r>
   8aab2:	2300      	movs	r3, #0
   8aab4:	4618      	mov	r0, r3
   8aab6:	6323      	str	r3, [r4, #48]	; 0x30
   8aab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aaba:	6926      	ldr	r6, [r4, #16]
   8aabc:	b1ce      	cbz	r6, 8aaf2 <__sflush_r+0xce>
   8aabe:	b293      	uxth	r3, r2
   8aac0:	079a      	lsls	r2, r3, #30
   8aac2:	bf18      	it	ne
   8aac4:	2300      	movne	r3, #0
   8aac6:	6825      	ldr	r5, [r4, #0]
   8aac8:	bf08      	it	eq
   8aaca:	6963      	ldreq	r3, [r4, #20]
   8aacc:	6026      	str	r6, [r4, #0]
   8aace:	1bad      	subs	r5, r5, r6
   8aad0:	60a3      	str	r3, [r4, #8]
   8aad2:	e00c      	b.n	8aaee <__sflush_r+0xca>
   8aad4:	462b      	mov	r3, r5
   8aad6:	4632      	mov	r2, r6
   8aad8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8aadc:	4638      	mov	r0, r7
   8aade:	69e1      	ldr	r1, [r4, #28]
   8aae0:	47e0      	blx	ip
   8aae2:	f1b0 0c00 	subs.w	ip, r0, #0
   8aae6:	eba5 050c 	sub.w	r5, r5, ip
   8aaea:	4466      	add	r6, ip
   8aaec:	dd16      	ble.n	8ab1c <__sflush_r+0xf8>
   8aaee:	2d00      	cmp	r5, #0
   8aaf0:	dcf0      	bgt.n	8aad4 <__sflush_r+0xb0>
   8aaf2:	2000      	movs	r0, #0
   8aaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aaf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8aaf8:	2b00      	cmp	r3, #0
   8aafa:	dca0      	bgt.n	8aa3e <__sflush_r+0x1a>
   8aafc:	e7f9      	b.n	8aaf2 <__sflush_r+0xce>
   8aafe:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8ab00:	e7af      	b.n	8aa62 <__sflush_r+0x3e>
   8ab02:	2200      	movs	r2, #0
   8ab04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ab08:	6062      	str	r2, [r4, #4]
   8ab0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ab0e:	6922      	ldr	r2, [r4, #16]
   8ab10:	81a3      	strh	r3, [r4, #12]
   8ab12:	04db      	lsls	r3, r3, #19
   8ab14:	6022      	str	r2, [r4, #0]
   8ab16:	d5c2      	bpl.n	8aa9e <__sflush_r+0x7a>
   8ab18:	6520      	str	r0, [r4, #80]	; 0x50
   8ab1a:	e7c0      	b.n	8aa9e <__sflush_r+0x7a>
   8ab1c:	89a3      	ldrh	r3, [r4, #12]
   8ab1e:	f04f 30ff 	mov.w	r0, #4294967295
   8ab22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ab26:	81a3      	strh	r3, [r4, #12]
   8ab28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab2a:	683b      	ldr	r3, [r7, #0]
   8ab2c:	2b00      	cmp	r3, #0
   8ab2e:	d096      	beq.n	8aa5e <__sflush_r+0x3a>
   8ab30:	2b1d      	cmp	r3, #29
   8ab32:	d006      	beq.n	8ab42 <__sflush_r+0x11e>
   8ab34:	2b16      	cmp	r3, #22
   8ab36:	d004      	beq.n	8ab42 <__sflush_r+0x11e>
   8ab38:	89a3      	ldrh	r3, [r4, #12]
   8ab3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ab3e:	81a3      	strh	r3, [r4, #12]
   8ab40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab42:	2000      	movs	r0, #0
   8ab44:	603e      	str	r6, [r7, #0]
   8ab46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008ab48 <_fflush_r>:
   8ab48:	b538      	push	{r3, r4, r5, lr}
   8ab4a:	4605      	mov	r5, r0
   8ab4c:	460c      	mov	r4, r1
   8ab4e:	b108      	cbz	r0, 8ab54 <_fflush_r+0xc>
   8ab50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ab52:	b1a3      	cbz	r3, 8ab7e <_fflush_r+0x36>
   8ab54:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8ab58:	b1b8      	cbz	r0, 8ab8a <_fflush_r+0x42>
   8ab5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ab5c:	07db      	lsls	r3, r3, #31
   8ab5e:	d401      	bmi.n	8ab64 <_fflush_r+0x1c>
   8ab60:	0581      	lsls	r1, r0, #22
   8ab62:	d515      	bpl.n	8ab90 <_fflush_r+0x48>
   8ab64:	4628      	mov	r0, r5
   8ab66:	4621      	mov	r1, r4
   8ab68:	f7ff ff5c 	bl	8aa24 <__sflush_r>
   8ab6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ab6e:	4605      	mov	r5, r0
   8ab70:	07da      	lsls	r2, r3, #31
   8ab72:	d402      	bmi.n	8ab7a <_fflush_r+0x32>
   8ab74:	89a3      	ldrh	r3, [r4, #12]
   8ab76:	059b      	lsls	r3, r3, #22
   8ab78:	d50e      	bpl.n	8ab98 <_fflush_r+0x50>
   8ab7a:	4628      	mov	r0, r5
   8ab7c:	bd38      	pop	{r3, r4, r5, pc}
   8ab7e:	f000 f817 	bl	8abb0 <__sinit>
   8ab82:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8ab86:	2800      	cmp	r0, #0
   8ab88:	d1e7      	bne.n	8ab5a <_fflush_r+0x12>
   8ab8a:	4605      	mov	r5, r0
   8ab8c:	4628      	mov	r0, r5
   8ab8e:	bd38      	pop	{r3, r4, r5, pc}
   8ab90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ab92:	f000 fc33 	bl	8b3fc <__retarget_lock_acquire_recursive>
   8ab96:	e7e5      	b.n	8ab64 <_fflush_r+0x1c>
   8ab98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ab9a:	f000 fc31 	bl	8b400 <__retarget_lock_release_recursive>
   8ab9e:	4628      	mov	r0, r5
   8aba0:	bd38      	pop	{r3, r4, r5, pc}
   8aba2:	bf00      	nop

0008aba4 <_cleanup_r>:
   8aba4:	4901      	ldr	r1, [pc, #4]	; (8abac <_cleanup_r+0x8>)
   8aba6:	f000 bbf7 	b.w	8b398 <_fwalk_reent>
   8abaa:	bf00      	nop
   8abac:	0008cbf1 	.word	0x0008cbf1

0008abb0 <__sinit>:
   8abb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8abb4:	4682      	mov	sl, r0
   8abb6:	4839      	ldr	r0, [pc, #228]	; (8ac9c <__sinit+0xec>)
   8abb8:	f000 fc20 	bl	8b3fc <__retarget_lock_acquire_recursive>
   8abbc:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8abc0:	2c00      	cmp	r4, #0
   8abc2:	d166      	bne.n	8ac92 <__sinit+0xe2>
   8abc4:	2304      	movs	r3, #4
   8abc6:	2203      	movs	r2, #3
   8abc8:	4935      	ldr	r1, [pc, #212]	; (8aca0 <__sinit+0xf0>)
   8abca:	f8da 5004 	ldr.w	r5, [sl, #4]
   8abce:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8abd2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8aca4 <__sinit+0xf4>
   8abd6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8aca8 <__sinit+0xf8>
   8abda:	4f34      	ldr	r7, [pc, #208]	; (8acac <__sinit+0xfc>)
   8abdc:	4e34      	ldr	r6, [pc, #208]	; (8acb0 <__sinit+0x100>)
   8abde:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8abe2:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8abe6:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8abea:	4621      	mov	r1, r4
   8abec:	60eb      	str	r3, [r5, #12]
   8abee:	2208      	movs	r2, #8
   8abf0:	e9c5 4400 	strd	r4, r4, [r5]
   8abf4:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8abf8:	666c      	str	r4, [r5, #100]	; 0x64
   8abfa:	60ac      	str	r4, [r5, #8]
   8abfc:	61ac      	str	r4, [r5, #24]
   8abfe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8ac02:	f7fc f925 	bl	86e50 <memset>
   8ac06:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8ac0a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8ac0e:	62ee      	str	r6, [r5, #44]	; 0x2c
   8ac10:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8ac14:	f000 fbee 	bl	8b3f4 <__retarget_lock_init_recursive>
   8ac18:	f8da 5008 	ldr.w	r5, [sl, #8]
   8ac1c:	4b25      	ldr	r3, [pc, #148]	; (8acb4 <__sinit+0x104>)
   8ac1e:	4621      	mov	r1, r4
   8ac20:	60eb      	str	r3, [r5, #12]
   8ac22:	2208      	movs	r2, #8
   8ac24:	e9c5 4400 	strd	r4, r4, [r5]
   8ac28:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8ac2c:	666c      	str	r4, [r5, #100]	; 0x64
   8ac2e:	60ac      	str	r4, [r5, #8]
   8ac30:	61ac      	str	r4, [r5, #24]
   8ac32:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8ac36:	f7fc f90b 	bl	86e50 <memset>
   8ac3a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8ac3e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8ac42:	62ee      	str	r6, [r5, #44]	; 0x2c
   8ac44:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8ac48:	f000 fbd4 	bl	8b3f4 <__retarget_lock_init_recursive>
   8ac4c:	f8da 500c 	ldr.w	r5, [sl, #12]
   8ac50:	4b19      	ldr	r3, [pc, #100]	; (8acb8 <__sinit+0x108>)
   8ac52:	4621      	mov	r1, r4
   8ac54:	60eb      	str	r3, [r5, #12]
   8ac56:	2208      	movs	r2, #8
   8ac58:	e9c5 4400 	strd	r4, r4, [r5]
   8ac5c:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8ac60:	666c      	str	r4, [r5, #100]	; 0x64
   8ac62:	60ac      	str	r4, [r5, #8]
   8ac64:	61ac      	str	r4, [r5, #24]
   8ac66:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8ac6a:	f7fc f8f1 	bl	86e50 <memset>
   8ac6e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8ac72:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8ac76:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8ac7a:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8ac7e:	f000 fbb9 	bl	8b3f4 <__retarget_lock_init_recursive>
   8ac82:	2301      	movs	r3, #1
   8ac84:	4805      	ldr	r0, [pc, #20]	; (8ac9c <__sinit+0xec>)
   8ac86:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8ac8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ac8e:	f000 bbb7 	b.w	8b400 <__retarget_lock_release_recursive>
   8ac92:	4802      	ldr	r0, [pc, #8]	; (8ac9c <__sinit+0xec>)
   8ac94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ac98:	f000 bbb2 	b.w	8b400 <__retarget_lock_release_recursive>
   8ac9c:	20002898 	.word	0x20002898
   8aca0:	0008aba5 	.word	0x0008aba5
   8aca4:	0008c7c1 	.word	0x0008c7c1
   8aca8:	0008c7e5 	.word	0x0008c7e5
   8acac:	0008c825 	.word	0x0008c825
   8acb0:	0008c845 	.word	0x0008c845
   8acb4:	00010009 	.word	0x00010009
   8acb8:	00020012 	.word	0x00020012

0008acbc <__sfp_lock_acquire>:
   8acbc:	4801      	ldr	r0, [pc, #4]	; (8acc4 <__sfp_lock_acquire+0x8>)
   8acbe:	f000 bb9d 	b.w	8b3fc <__retarget_lock_acquire_recursive>
   8acc2:	bf00      	nop
   8acc4:	20002894 	.word	0x20002894

0008acc8 <__sfp_lock_release>:
   8acc8:	4801      	ldr	r0, [pc, #4]	; (8acd0 <__sfp_lock_release+0x8>)
   8acca:	f000 bb99 	b.w	8b400 <__retarget_lock_release_recursive>
   8acce:	bf00      	nop
   8acd0:	20002894 	.word	0x20002894

0008acd4 <__libc_fini_array>:
   8acd4:	b538      	push	{r3, r4, r5, lr}
   8acd6:	4b08      	ldr	r3, [pc, #32]	; (8acf8 <__libc_fini_array+0x24>)
   8acd8:	4d08      	ldr	r5, [pc, #32]	; (8acfc <__libc_fini_array+0x28>)
   8acda:	1b5b      	subs	r3, r3, r5
   8acdc:	109c      	asrs	r4, r3, #2
   8acde:	d007      	beq.n	8acf0 <__libc_fini_array+0x1c>
   8ace0:	3b04      	subs	r3, #4
   8ace2:	441d      	add	r5, r3
   8ace4:	3c01      	subs	r4, #1
   8ace6:	f855 3904 	ldr.w	r3, [r5], #-4
   8acea:	4798      	blx	r3
   8acec:	2c00      	cmp	r4, #0
   8acee:	d1f9      	bne.n	8ace4 <__libc_fini_array+0x10>
   8acf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8acf4:	f002 bf86 	b.w	8dc04 <_fini>
   8acf8:	0008dc14 	.word	0x0008dc14
   8acfc:	0008dc10 	.word	0x0008dc10

0008ad00 <__fputwc>:
   8ad00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8ad04:	b083      	sub	sp, #12
   8ad06:	4607      	mov	r7, r0
   8ad08:	4688      	mov	r8, r1
   8ad0a:	4614      	mov	r4, r2
   8ad0c:	f000 fb68 	bl	8b3e0 <__locale_mb_cur_max>
   8ad10:	2801      	cmp	r0, #1
   8ad12:	d103      	bne.n	8ad1c <__fputwc+0x1c>
   8ad14:	f108 33ff 	add.w	r3, r8, #4294967295
   8ad18:	2bfe      	cmp	r3, #254	; 0xfe
   8ad1a:	d933      	bls.n	8ad84 <__fputwc+0x84>
   8ad1c:	4642      	mov	r2, r8
   8ad1e:	4638      	mov	r0, r7
   8ad20:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8ad24:	a901      	add	r1, sp, #4
   8ad26:	f001 fe67 	bl	8c9f8 <_wcrtomb_r>
   8ad2a:	1c42      	adds	r2, r0, #1
   8ad2c:	4606      	mov	r6, r0
   8ad2e:	d02f      	beq.n	8ad90 <__fputwc+0x90>
   8ad30:	b318      	cbz	r0, 8ad7a <__fputwc+0x7a>
   8ad32:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8ad36:	2500      	movs	r5, #0
   8ad38:	f10d 0905 	add.w	r9, sp, #5
   8ad3c:	e008      	b.n	8ad50 <__fputwc+0x50>
   8ad3e:	6823      	ldr	r3, [r4, #0]
   8ad40:	1c5a      	adds	r2, r3, #1
   8ad42:	6022      	str	r2, [r4, #0]
   8ad44:	7019      	strb	r1, [r3, #0]
   8ad46:	3501      	adds	r5, #1
   8ad48:	42b5      	cmp	r5, r6
   8ad4a:	d216      	bcs.n	8ad7a <__fputwc+0x7a>
   8ad4c:	f819 1b01 	ldrb.w	r1, [r9], #1
   8ad50:	68a3      	ldr	r3, [r4, #8]
   8ad52:	3b01      	subs	r3, #1
   8ad54:	2b00      	cmp	r3, #0
   8ad56:	60a3      	str	r3, [r4, #8]
   8ad58:	daf1      	bge.n	8ad3e <__fputwc+0x3e>
   8ad5a:	69a2      	ldr	r2, [r4, #24]
   8ad5c:	4293      	cmp	r3, r2
   8ad5e:	db01      	blt.n	8ad64 <__fputwc+0x64>
   8ad60:	290a      	cmp	r1, #10
   8ad62:	d1ec      	bne.n	8ad3e <__fputwc+0x3e>
   8ad64:	4622      	mov	r2, r4
   8ad66:	4638      	mov	r0, r7
   8ad68:	f001 fdee 	bl	8c948 <__swbuf_r>
   8ad6c:	1c43      	adds	r3, r0, #1
   8ad6e:	d1ea      	bne.n	8ad46 <__fputwc+0x46>
   8ad70:	4606      	mov	r6, r0
   8ad72:	4630      	mov	r0, r6
   8ad74:	b003      	add	sp, #12
   8ad76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8ad7a:	4646      	mov	r6, r8
   8ad7c:	4630      	mov	r0, r6
   8ad7e:	b003      	add	sp, #12
   8ad80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8ad84:	fa5f f188 	uxtb.w	r1, r8
   8ad88:	4606      	mov	r6, r0
   8ad8a:	f88d 1004 	strb.w	r1, [sp, #4]
   8ad8e:	e7d2      	b.n	8ad36 <__fputwc+0x36>
   8ad90:	4630      	mov	r0, r6
   8ad92:	89a3      	ldrh	r3, [r4, #12]
   8ad94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad98:	81a3      	strh	r3, [r4, #12]
   8ad9a:	b003      	add	sp, #12
   8ad9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008ada0 <_fputwc_r>:
   8ada0:	b530      	push	{r4, r5, lr}
   8ada2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8ada4:	4614      	mov	r4, r2
   8ada6:	f013 0f01 	tst.w	r3, #1
   8adaa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8adae:	4605      	mov	r5, r0
   8adb0:	b083      	sub	sp, #12
   8adb2:	b29a      	uxth	r2, r3
   8adb4:	d101      	bne.n	8adba <_fputwc_r+0x1a>
   8adb6:	0598      	lsls	r0, r3, #22
   8adb8:	d51c      	bpl.n	8adf4 <_fputwc_r+0x54>
   8adba:	0490      	lsls	r0, r2, #18
   8adbc:	d406      	bmi.n	8adcc <_fputwc_r+0x2c>
   8adbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8adc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8adc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8adc8:	81a3      	strh	r3, [r4, #12]
   8adca:	6662      	str	r2, [r4, #100]	; 0x64
   8adcc:	4622      	mov	r2, r4
   8adce:	4628      	mov	r0, r5
   8add0:	f7ff ff96 	bl	8ad00 <__fputwc>
   8add4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8add6:	4605      	mov	r5, r0
   8add8:	07da      	lsls	r2, r3, #31
   8adda:	d402      	bmi.n	8ade2 <_fputwc_r+0x42>
   8addc:	89a3      	ldrh	r3, [r4, #12]
   8adde:	059b      	lsls	r3, r3, #22
   8ade0:	d502      	bpl.n	8ade8 <_fputwc_r+0x48>
   8ade2:	4628      	mov	r0, r5
   8ade4:	b003      	add	sp, #12
   8ade6:	bd30      	pop	{r4, r5, pc}
   8ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8adea:	f000 fb09 	bl	8b400 <__retarget_lock_release_recursive>
   8adee:	4628      	mov	r0, r5
   8adf0:	b003      	add	sp, #12
   8adf2:	bd30      	pop	{r4, r5, pc}
   8adf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8adf6:	9101      	str	r1, [sp, #4]
   8adf8:	f000 fb00 	bl	8b3fc <__retarget_lock_acquire_recursive>
   8adfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae00:	9901      	ldr	r1, [sp, #4]
   8ae02:	b29a      	uxth	r2, r3
   8ae04:	e7d9      	b.n	8adba <_fputwc_r+0x1a>
   8ae06:	bf00      	nop

0008ae08 <_malloc_trim_r>:
   8ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ae0a:	460c      	mov	r4, r1
   8ae0c:	4f23      	ldr	r7, [pc, #140]	; (8ae9c <_malloc_trim_r+0x94>)
   8ae0e:	4606      	mov	r6, r0
   8ae10:	f000 feee 	bl	8bbf0 <__malloc_lock>
   8ae14:	68bb      	ldr	r3, [r7, #8]
   8ae16:	685d      	ldr	r5, [r3, #4]
   8ae18:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   8ae1c:	f025 0503 	bic.w	r5, r5, #3
   8ae20:	330f      	adds	r3, #15
   8ae22:	442b      	add	r3, r5
   8ae24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8ae28:	f023 030f 	bic.w	r3, r3, #15
   8ae2c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8ae30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8ae34:	db07      	blt.n	8ae46 <_malloc_trim_r+0x3e>
   8ae36:	2100      	movs	r1, #0
   8ae38:	4630      	mov	r0, r6
   8ae3a:	f001 fcaf 	bl	8c79c <_sbrk_r>
   8ae3e:	68bb      	ldr	r3, [r7, #8]
   8ae40:	442b      	add	r3, r5
   8ae42:	4298      	cmp	r0, r3
   8ae44:	d004      	beq.n	8ae50 <_malloc_trim_r+0x48>
   8ae46:	4630      	mov	r0, r6
   8ae48:	f000 fed8 	bl	8bbfc <__malloc_unlock>
   8ae4c:	2000      	movs	r0, #0
   8ae4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ae50:	4630      	mov	r0, r6
   8ae52:	4261      	negs	r1, r4
   8ae54:	f001 fca2 	bl	8c79c <_sbrk_r>
   8ae58:	3001      	adds	r0, #1
   8ae5a:	d00d      	beq.n	8ae78 <_malloc_trim_r+0x70>
   8ae5c:	4a10      	ldr	r2, [pc, #64]	; (8aea0 <_malloc_trim_r+0x98>)
   8ae5e:	68bb      	ldr	r3, [r7, #8]
   8ae60:	1b2d      	subs	r5, r5, r4
   8ae62:	f045 0501 	orr.w	r5, r5, #1
   8ae66:	605d      	str	r5, [r3, #4]
   8ae68:	6813      	ldr	r3, [r2, #0]
   8ae6a:	4630      	mov	r0, r6
   8ae6c:	1b1b      	subs	r3, r3, r4
   8ae6e:	6013      	str	r3, [r2, #0]
   8ae70:	f000 fec4 	bl	8bbfc <__malloc_unlock>
   8ae74:	2001      	movs	r0, #1
   8ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ae78:	2100      	movs	r1, #0
   8ae7a:	4630      	mov	r0, r6
   8ae7c:	f001 fc8e 	bl	8c79c <_sbrk_r>
   8ae80:	68ba      	ldr	r2, [r7, #8]
   8ae82:	1a83      	subs	r3, r0, r2
   8ae84:	2b0f      	cmp	r3, #15
   8ae86:	ddde      	ble.n	8ae46 <_malloc_trim_r+0x3e>
   8ae88:	f043 0301 	orr.w	r3, r3, #1
   8ae8c:	6053      	str	r3, [r2, #4]
   8ae8e:	4b05      	ldr	r3, [pc, #20]	; (8aea4 <_malloc_trim_r+0x9c>)
   8ae90:	4903      	ldr	r1, [pc, #12]	; (8aea0 <_malloc_trim_r+0x98>)
   8ae92:	681b      	ldr	r3, [r3, #0]
   8ae94:	1ac0      	subs	r0, r0, r3
   8ae96:	6008      	str	r0, [r1, #0]
   8ae98:	e7d5      	b.n	8ae46 <_malloc_trim_r+0x3e>
   8ae9a:	bf00      	nop
   8ae9c:	20001110 	.word	0x20001110
   8aea0:	2000289c 	.word	0x2000289c
   8aea4:	20001518 	.word	0x20001518

0008aea8 <_free_r>:
   8aea8:	2900      	cmp	r1, #0
   8aeaa:	d05e      	beq.n	8af6a <_free_r+0xc2>
   8aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aeae:	460c      	mov	r4, r1
   8aeb0:	4606      	mov	r6, r0
   8aeb2:	f000 fe9d 	bl	8bbf0 <__malloc_lock>
   8aeb6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8aeba:	4f78      	ldr	r7, [pc, #480]	; (8b09c <_free_r+0x1f4>)
   8aebc:	f1a4 0508 	sub.w	r5, r4, #8
   8aec0:	f022 0101 	bic.w	r1, r2, #1
   8aec4:	1868      	adds	r0, r5, r1
   8aec6:	f8d7 c008 	ldr.w	ip, [r7, #8]
   8aeca:	6843      	ldr	r3, [r0, #4]
   8aecc:	4584      	cmp	ip, r0
   8aece:	f023 0303 	bic.w	r3, r3, #3
   8aed2:	f000 8087 	beq.w	8afe4 <_free_r+0x13c>
   8aed6:	07d2      	lsls	r2, r2, #31
   8aed8:	6043      	str	r3, [r0, #4]
   8aeda:	d434      	bmi.n	8af46 <_free_r+0x9e>
   8aedc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   8aee0:	f107 0408 	add.w	r4, r7, #8
   8aee4:	1aad      	subs	r5, r5, r2
   8aee6:	4411      	add	r1, r2
   8aee8:	68aa      	ldr	r2, [r5, #8]
   8aeea:	42a2      	cmp	r2, r4
   8aeec:	d068      	beq.n	8afc0 <_free_r+0x118>
   8aeee:	eb00 0c03 	add.w	ip, r0, r3
   8aef2:	f8dc e004 	ldr.w	lr, [ip, #4]
   8aef6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   8aefa:	f01e 0f01 	tst.w	lr, #1
   8aefe:	f8c2 c00c 	str.w	ip, [r2, #12]
   8af02:	f8cc 2008 	str.w	r2, [ip, #8]
   8af06:	f000 8091 	beq.w	8b02c <_free_r+0x184>
   8af0a:	f041 0301 	orr.w	r3, r1, #1
   8af0e:	606b      	str	r3, [r5, #4]
   8af10:	6001      	str	r1, [r0, #0]
   8af12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8af16:	d231      	bcs.n	8af7c <_free_r+0xd4>
   8af18:	094a      	lsrs	r2, r1, #5
   8af1a:	08cb      	lsrs	r3, r1, #3
   8af1c:	2101      	movs	r1, #1
   8af1e:	4091      	lsls	r1, r2
   8af20:	687a      	ldr	r2, [r7, #4]
   8af22:	3301      	adds	r3, #1
   8af24:	4311      	orrs	r1, r2
   8af26:	6079      	str	r1, [r7, #4]
   8af28:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   8af2c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   8af30:	3a08      	subs	r2, #8
   8af32:	e9c5 1202 	strd	r1, r2, [r5, #8]
   8af36:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   8af3a:	60cd      	str	r5, [r1, #12]
   8af3c:	4630      	mov	r0, r6
   8af3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8af42:	f000 be5b 	b.w	8bbfc <__malloc_unlock>
   8af46:	18c2      	adds	r2, r0, r3
   8af48:	6852      	ldr	r2, [r2, #4]
   8af4a:	07d2      	lsls	r2, r2, #31
   8af4c:	d40e      	bmi.n	8af6c <_free_r+0xc4>
   8af4e:	4419      	add	r1, r3
   8af50:	f107 0408 	add.w	r4, r7, #8
   8af54:	6883      	ldr	r3, [r0, #8]
   8af56:	42a3      	cmp	r3, r4
   8af58:	d070      	beq.n	8b03c <_free_r+0x194>
   8af5a:	68c2      	ldr	r2, [r0, #12]
   8af5c:	60da      	str	r2, [r3, #12]
   8af5e:	6093      	str	r3, [r2, #8]
   8af60:	f041 0301 	orr.w	r3, r1, #1
   8af64:	606b      	str	r3, [r5, #4]
   8af66:	5069      	str	r1, [r5, r1]
   8af68:	e7d3      	b.n	8af12 <_free_r+0x6a>
   8af6a:	4770      	bx	lr
   8af6c:	f041 0301 	orr.w	r3, r1, #1
   8af70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8af74:	f844 3c04 	str.w	r3, [r4, #-4]
   8af78:	6001      	str	r1, [r0, #0]
   8af7a:	d3cd      	bcc.n	8af18 <_free_r+0x70>
   8af7c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8af80:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8af84:	d247      	bcs.n	8b016 <_free_r+0x16e>
   8af86:	098b      	lsrs	r3, r1, #6
   8af88:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8af8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8af90:	00c3      	lsls	r3, r0, #3
   8af92:	18f8      	adds	r0, r7, r3
   8af94:	58fb      	ldr	r3, [r7, r3]
   8af96:	3808      	subs	r0, #8
   8af98:	4298      	cmp	r0, r3
   8af9a:	d058      	beq.n	8b04e <_free_r+0x1a6>
   8af9c:	685a      	ldr	r2, [r3, #4]
   8af9e:	f022 0203 	bic.w	r2, r2, #3
   8afa2:	428a      	cmp	r2, r1
   8afa4:	d902      	bls.n	8afac <_free_r+0x104>
   8afa6:	689b      	ldr	r3, [r3, #8]
   8afa8:	4298      	cmp	r0, r3
   8afaa:	d1f7      	bne.n	8af9c <_free_r+0xf4>
   8afac:	68d8      	ldr	r0, [r3, #12]
   8afae:	e9c5 3002 	strd	r3, r0, [r5, #8]
   8afb2:	6085      	str	r5, [r0, #8]
   8afb4:	4630      	mov	r0, r6
   8afb6:	60dd      	str	r5, [r3, #12]
   8afb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8afbc:	f000 be1e 	b.w	8bbfc <__malloc_unlock>
   8afc0:	18c2      	adds	r2, r0, r3
   8afc2:	6852      	ldr	r2, [r2, #4]
   8afc4:	07d2      	lsls	r2, r2, #31
   8afc6:	d463      	bmi.n	8b090 <_free_r+0x1e8>
   8afc8:	440b      	add	r3, r1
   8afca:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8afce:	60ca      	str	r2, [r1, #12]
   8afd0:	6091      	str	r1, [r2, #8]
   8afd2:	f043 0201 	orr.w	r2, r3, #1
   8afd6:	606a      	str	r2, [r5, #4]
   8afd8:	4630      	mov	r0, r6
   8afda:	50eb      	str	r3, [r5, r3]
   8afdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8afe0:	f000 be0c 	b.w	8bbfc <__malloc_unlock>
   8afe4:	440b      	add	r3, r1
   8afe6:	07d1      	lsls	r1, r2, #31
   8afe8:	d407      	bmi.n	8affa <_free_r+0x152>
   8afea:	f854 2c08 	ldr.w	r2, [r4, #-8]
   8afee:	1aad      	subs	r5, r5, r2
   8aff0:	4413      	add	r3, r2
   8aff2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   8aff6:	60ca      	str	r2, [r1, #12]
   8aff8:	6091      	str	r1, [r2, #8]
   8affa:	f043 0201 	orr.w	r2, r3, #1
   8affe:	606a      	str	r2, [r5, #4]
   8b000:	4a27      	ldr	r2, [pc, #156]	; (8b0a0 <_free_r+0x1f8>)
   8b002:	60bd      	str	r5, [r7, #8]
   8b004:	6812      	ldr	r2, [r2, #0]
   8b006:	429a      	cmp	r2, r3
   8b008:	d898      	bhi.n	8af3c <_free_r+0x94>
   8b00a:	4b26      	ldr	r3, [pc, #152]	; (8b0a4 <_free_r+0x1fc>)
   8b00c:	4630      	mov	r0, r6
   8b00e:	6819      	ldr	r1, [r3, #0]
   8b010:	f7ff fefa 	bl	8ae08 <_malloc_trim_r>
   8b014:	e792      	b.n	8af3c <_free_r+0x94>
   8b016:	2b14      	cmp	r3, #20
   8b018:	d90a      	bls.n	8b030 <_free_r+0x188>
   8b01a:	2b54      	cmp	r3, #84	; 0x54
   8b01c:	d81f      	bhi.n	8b05e <_free_r+0x1b6>
   8b01e:	0b0b      	lsrs	r3, r1, #12
   8b020:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b024:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8b028:	00c3      	lsls	r3, r0, #3
   8b02a:	e7b2      	b.n	8af92 <_free_r+0xea>
   8b02c:	4419      	add	r1, r3
   8b02e:	e791      	b.n	8af54 <_free_r+0xac>
   8b030:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b034:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8b038:	00c3      	lsls	r3, r0, #3
   8b03a:	e7aa      	b.n	8af92 <_free_r+0xea>
   8b03c:	f041 0301 	orr.w	r3, r1, #1
   8b040:	e9c7 5504 	strd	r5, r5, [r7, #16]
   8b044:	e9c5 4402 	strd	r4, r4, [r5, #8]
   8b048:	606b      	str	r3, [r5, #4]
   8b04a:	5069      	str	r1, [r5, r1]
   8b04c:	e776      	b.n	8af3c <_free_r+0x94>
   8b04e:	2101      	movs	r1, #1
   8b050:	1092      	asrs	r2, r2, #2
   8b052:	fa01 f202 	lsl.w	r2, r1, r2
   8b056:	6879      	ldr	r1, [r7, #4]
   8b058:	430a      	orrs	r2, r1
   8b05a:	607a      	str	r2, [r7, #4]
   8b05c:	e7a7      	b.n	8afae <_free_r+0x106>
   8b05e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b062:	d806      	bhi.n	8b072 <_free_r+0x1ca>
   8b064:	0bcb      	lsrs	r3, r1, #15
   8b066:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b06a:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8b06e:	00c3      	lsls	r3, r0, #3
   8b070:	e78f      	b.n	8af92 <_free_r+0xea>
   8b072:	f240 5254 	movw	r2, #1364	; 0x554
   8b076:	4293      	cmp	r3, r2
   8b078:	d806      	bhi.n	8b088 <_free_r+0x1e0>
   8b07a:	0c8b      	lsrs	r3, r1, #18
   8b07c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b080:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8b084:	00c3      	lsls	r3, r0, #3
   8b086:	e784      	b.n	8af92 <_free_r+0xea>
   8b088:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   8b08c:	227e      	movs	r2, #126	; 0x7e
   8b08e:	e780      	b.n	8af92 <_free_r+0xea>
   8b090:	f041 0301 	orr.w	r3, r1, #1
   8b094:	606b      	str	r3, [r5, #4]
   8b096:	6001      	str	r1, [r0, #0]
   8b098:	e750      	b.n	8af3c <_free_r+0x94>
   8b09a:	bf00      	nop
   8b09c:	20001110 	.word	0x20001110
   8b0a0:	2000151c 	.word	0x2000151c
   8b0a4:	200028cc 	.word	0x200028cc

0008b0a8 <__sfvwrite_r>:
   8b0a8:	6893      	ldr	r3, [r2, #8]
   8b0aa:	2b00      	cmp	r3, #0
   8b0ac:	f000 80b7 	beq.w	8b21e <__sfvwrite_r+0x176>
   8b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b0b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8b0b8:	460c      	mov	r4, r1
   8b0ba:	0719      	lsls	r1, r3, #28
   8b0bc:	4680      	mov	r8, r0
   8b0be:	4617      	mov	r7, r2
   8b0c0:	b083      	sub	sp, #12
   8b0c2:	b298      	uxth	r0, r3
   8b0c4:	d525      	bpl.n	8b112 <__sfvwrite_r+0x6a>
   8b0c6:	6923      	ldr	r3, [r4, #16]
   8b0c8:	b31b      	cbz	r3, 8b112 <__sfvwrite_r+0x6a>
   8b0ca:	f010 0302 	ands.w	r3, r0, #2
   8b0ce:	683d      	ldr	r5, [r7, #0]
   8b0d0:	d02d      	beq.n	8b12e <__sfvwrite_r+0x86>
   8b0d2:	f04f 0b00 	mov.w	fp, #0
   8b0d6:	465e      	mov	r6, fp
   8b0d8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8b394 <__sfvwrite_r+0x2ec>
   8b0dc:	2e00      	cmp	r6, #0
   8b0de:	f000 808b 	beq.w	8b1f8 <__sfvwrite_r+0x150>
   8b0e2:	4556      	cmp	r6, sl
   8b0e4:	4633      	mov	r3, r6
   8b0e6:	465a      	mov	r2, fp
   8b0e8:	bf28      	it	cs
   8b0ea:	4653      	movcs	r3, sl
   8b0ec:	4640      	mov	r0, r8
   8b0ee:	69e1      	ldr	r1, [r4, #28]
   8b0f0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b0f4:	47e0      	blx	ip
   8b0f6:	2800      	cmp	r0, #0
   8b0f8:	f340 8087 	ble.w	8b20a <__sfvwrite_r+0x162>
   8b0fc:	68bb      	ldr	r3, [r7, #8]
   8b0fe:	4483      	add	fp, r0
   8b100:	1a1b      	subs	r3, r3, r0
   8b102:	1a36      	subs	r6, r6, r0
   8b104:	60bb      	str	r3, [r7, #8]
   8b106:	2b00      	cmp	r3, #0
   8b108:	d1e8      	bne.n	8b0dc <__sfvwrite_r+0x34>
   8b10a:	2000      	movs	r0, #0
   8b10c:	b003      	add	sp, #12
   8b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b112:	4621      	mov	r1, r4
   8b114:	4640      	mov	r0, r8
   8b116:	f7fe fc0d 	bl	89934 <__swsetup_r>
   8b11a:	2800      	cmp	r0, #0
   8b11c:	f040 8136 	bne.w	8b38c <__sfvwrite_r+0x2e4>
   8b120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b124:	683d      	ldr	r5, [r7, #0]
   8b126:	b298      	uxth	r0, r3
   8b128:	f010 0302 	ands.w	r3, r0, #2
   8b12c:	d1d1      	bne.n	8b0d2 <__sfvwrite_r+0x2a>
   8b12e:	f010 0901 	ands.w	r9, r0, #1
   8b132:	d176      	bne.n	8b222 <__sfvwrite_r+0x17a>
   8b134:	464e      	mov	r6, r9
   8b136:	2e00      	cmp	r6, #0
   8b138:	d05a      	beq.n	8b1f0 <__sfvwrite_r+0x148>
   8b13a:	0582      	lsls	r2, r0, #22
   8b13c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8b140:	f140 80b5 	bpl.w	8b2ae <__sfvwrite_r+0x206>
   8b144:	45b3      	cmp	fp, r6
   8b146:	465a      	mov	r2, fp
   8b148:	f200 80cd 	bhi.w	8b2e6 <__sfvwrite_r+0x23e>
   8b14c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8b150:	f000 80cb 	beq.w	8b2ea <__sfvwrite_r+0x242>
   8b154:	6823      	ldr	r3, [r4, #0]
   8b156:	6921      	ldr	r1, [r4, #16]
   8b158:	eba3 0b01 	sub.w	fp, r3, r1
   8b15c:	6963      	ldr	r3, [r4, #20]
   8b15e:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8b162:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8b166:	f10b 0301 	add.w	r3, fp, #1
   8b16a:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8b16e:	4433      	add	r3, r6
   8b170:	4553      	cmp	r3, sl
   8b172:	4652      	mov	r2, sl
   8b174:	bf84      	itt	hi
   8b176:	469a      	movhi	sl, r3
   8b178:	4652      	movhi	r2, sl
   8b17a:	0543      	lsls	r3, r0, #21
   8b17c:	f140 80ea 	bpl.w	8b354 <__sfvwrite_r+0x2ac>
   8b180:	4611      	mov	r1, r2
   8b182:	4640      	mov	r0, r8
   8b184:	f000 f9ae 	bl	8b4e4 <_malloc_r>
   8b188:	2800      	cmp	r0, #0
   8b18a:	f000 80f9 	beq.w	8b380 <__sfvwrite_r+0x2d8>
   8b18e:	465a      	mov	r2, fp
   8b190:	6921      	ldr	r1, [r4, #16]
   8b192:	9001      	str	r0, [sp, #4]
   8b194:	f7fb fde6 	bl	86d64 <memcpy>
   8b198:	89a2      	ldrh	r2, [r4, #12]
   8b19a:	9b01      	ldr	r3, [sp, #4]
   8b19c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b1a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b1a4:	81a2      	strh	r2, [r4, #12]
   8b1a6:	eb03 000b 	add.w	r0, r3, fp
   8b1aa:	6123      	str	r3, [r4, #16]
   8b1ac:	4632      	mov	r2, r6
   8b1ae:	ebaa 030b 	sub.w	r3, sl, fp
   8b1b2:	46b3      	mov	fp, r6
   8b1b4:	f8c4 a014 	str.w	sl, [r4, #20]
   8b1b8:	60a3      	str	r3, [r4, #8]
   8b1ba:	6020      	str	r0, [r4, #0]
   8b1bc:	46b2      	mov	sl, r6
   8b1be:	2600      	movs	r6, #0
   8b1c0:	4649      	mov	r1, r9
   8b1c2:	9201      	str	r2, [sp, #4]
   8b1c4:	f000 fc98 	bl	8baf8 <memmove>
   8b1c8:	68a3      	ldr	r3, [r4, #8]
   8b1ca:	6821      	ldr	r1, [r4, #0]
   8b1cc:	9a01      	ldr	r2, [sp, #4]
   8b1ce:	eba3 030b 	sub.w	r3, r3, fp
   8b1d2:	440a      	add	r2, r1
   8b1d4:	60a3      	str	r3, [r4, #8]
   8b1d6:	6022      	str	r2, [r4, #0]
   8b1d8:	68b8      	ldr	r0, [r7, #8]
   8b1da:	44d1      	add	r9, sl
   8b1dc:	eba0 000a 	sub.w	r0, r0, sl
   8b1e0:	60b8      	str	r0, [r7, #8]
   8b1e2:	2800      	cmp	r0, #0
   8b1e4:	d091      	beq.n	8b10a <__sfvwrite_r+0x62>
   8b1e6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b1ea:	b280      	uxth	r0, r0
   8b1ec:	2e00      	cmp	r6, #0
   8b1ee:	d1a4      	bne.n	8b13a <__sfvwrite_r+0x92>
   8b1f0:	e9d5 9600 	ldrd	r9, r6, [r5]
   8b1f4:	3508      	adds	r5, #8
   8b1f6:	e79e      	b.n	8b136 <__sfvwrite_r+0x8e>
   8b1f8:	e9d5 b600 	ldrd	fp, r6, [r5]
   8b1fc:	3508      	adds	r5, #8
   8b1fe:	e76d      	b.n	8b0dc <__sfvwrite_r+0x34>
   8b200:	4621      	mov	r1, r4
   8b202:	4640      	mov	r0, r8
   8b204:	f7ff fca0 	bl	8ab48 <_fflush_r>
   8b208:	b380      	cbz	r0, 8b26c <__sfvwrite_r+0x1c4>
   8b20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b20e:	f04f 30ff 	mov.w	r0, #4294967295
   8b212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b216:	81a3      	strh	r3, [r4, #12]
   8b218:	b003      	add	sp, #12
   8b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b21e:	2000      	movs	r0, #0
   8b220:	4770      	bx	lr
   8b222:	461e      	mov	r6, r3
   8b224:	46aa      	mov	sl, r5
   8b226:	4699      	mov	r9, r3
   8b228:	4618      	mov	r0, r3
   8b22a:	461d      	mov	r5, r3
   8b22c:	b356      	cbz	r6, 8b284 <__sfvwrite_r+0x1dc>
   8b22e:	2800      	cmp	r0, #0
   8b230:	d032      	beq.n	8b298 <__sfvwrite_r+0x1f0>
   8b232:	464a      	mov	r2, r9
   8b234:	6820      	ldr	r0, [r4, #0]
   8b236:	6921      	ldr	r1, [r4, #16]
   8b238:	42b2      	cmp	r2, r6
   8b23a:	bf28      	it	cs
   8b23c:	4632      	movcs	r2, r6
   8b23e:	4288      	cmp	r0, r1
   8b240:	6963      	ldr	r3, [r4, #20]
   8b242:	d904      	bls.n	8b24e <__sfvwrite_r+0x1a6>
   8b244:	68a1      	ldr	r1, [r4, #8]
   8b246:	eb03 0b01 	add.w	fp, r3, r1
   8b24a:	455a      	cmp	r2, fp
   8b24c:	dc74      	bgt.n	8b338 <__sfvwrite_r+0x290>
   8b24e:	4293      	cmp	r3, r2
   8b250:	dc65      	bgt.n	8b31e <__sfvwrite_r+0x276>
   8b252:	462a      	mov	r2, r5
   8b254:	4640      	mov	r0, r8
   8b256:	69e1      	ldr	r1, [r4, #28]
   8b258:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b25c:	47e0      	blx	ip
   8b25e:	f1b0 0b00 	subs.w	fp, r0, #0
   8b262:	ddd2      	ble.n	8b20a <__sfvwrite_r+0x162>
   8b264:	ebb9 090b 	subs.w	r9, r9, fp
   8b268:	d0ca      	beq.n	8b200 <__sfvwrite_r+0x158>
   8b26a:	2001      	movs	r0, #1
   8b26c:	68bb      	ldr	r3, [r7, #8]
   8b26e:	445d      	add	r5, fp
   8b270:	eba3 030b 	sub.w	r3, r3, fp
   8b274:	eba6 060b 	sub.w	r6, r6, fp
   8b278:	60bb      	str	r3, [r7, #8]
   8b27a:	2b00      	cmp	r3, #0
   8b27c:	f43f af45 	beq.w	8b10a <__sfvwrite_r+0x62>
   8b280:	2e00      	cmp	r6, #0
   8b282:	d1d4      	bne.n	8b22e <__sfvwrite_r+0x186>
   8b284:	f10a 0308 	add.w	r3, sl, #8
   8b288:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b28c:	469a      	mov	sl, r3
   8b28e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b292:	3308      	adds	r3, #8
   8b294:	2e00      	cmp	r6, #0
   8b296:	d0f7      	beq.n	8b288 <__sfvwrite_r+0x1e0>
   8b298:	4632      	mov	r2, r6
   8b29a:	210a      	movs	r1, #10
   8b29c:	4628      	mov	r0, r5
   8b29e:	f000 fbe3 	bl	8ba68 <memchr>
   8b2a2:	2800      	cmp	r0, #0
   8b2a4:	d069      	beq.n	8b37a <__sfvwrite_r+0x2d2>
   8b2a6:	3001      	adds	r0, #1
   8b2a8:	eba0 0905 	sub.w	r9, r0, r5
   8b2ac:	e7c1      	b.n	8b232 <__sfvwrite_r+0x18a>
   8b2ae:	6820      	ldr	r0, [r4, #0]
   8b2b0:	6923      	ldr	r3, [r4, #16]
   8b2b2:	4298      	cmp	r0, r3
   8b2b4:	d81b      	bhi.n	8b2ee <__sfvwrite_r+0x246>
   8b2b6:	6963      	ldr	r3, [r4, #20]
   8b2b8:	42b3      	cmp	r3, r6
   8b2ba:	d818      	bhi.n	8b2ee <__sfvwrite_r+0x246>
   8b2bc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8b2c0:	45b4      	cmp	ip, r6
   8b2c2:	bf28      	it	cs
   8b2c4:	46b4      	movcs	ip, r6
   8b2c6:	fb9c fcf3 	sdiv	ip, ip, r3
   8b2ca:	464a      	mov	r2, r9
   8b2cc:	fb03 f30c 	mul.w	r3, r3, ip
   8b2d0:	4640      	mov	r0, r8
   8b2d2:	69e1      	ldr	r1, [r4, #28]
   8b2d4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b2d8:	47e0      	blx	ip
   8b2da:	f1b0 0a00 	subs.w	sl, r0, #0
   8b2de:	dd94      	ble.n	8b20a <__sfvwrite_r+0x162>
   8b2e0:	eba6 060a 	sub.w	r6, r6, sl
   8b2e4:	e778      	b.n	8b1d8 <__sfvwrite_r+0x130>
   8b2e6:	46b3      	mov	fp, r6
   8b2e8:	4632      	mov	r2, r6
   8b2ea:	6820      	ldr	r0, [r4, #0]
   8b2ec:	e766      	b.n	8b1bc <__sfvwrite_r+0x114>
   8b2ee:	45b3      	cmp	fp, r6
   8b2f0:	46da      	mov	sl, fp
   8b2f2:	bf28      	it	cs
   8b2f4:	46b2      	movcs	sl, r6
   8b2f6:	4649      	mov	r1, r9
   8b2f8:	4652      	mov	r2, sl
   8b2fa:	f000 fbfd 	bl	8baf8 <memmove>
   8b2fe:	68a3      	ldr	r3, [r4, #8]
   8b300:	6822      	ldr	r2, [r4, #0]
   8b302:	eba3 030a 	sub.w	r3, r3, sl
   8b306:	4452      	add	r2, sl
   8b308:	60a3      	str	r3, [r4, #8]
   8b30a:	6022      	str	r2, [r4, #0]
   8b30c:	2b00      	cmp	r3, #0
   8b30e:	d1e7      	bne.n	8b2e0 <__sfvwrite_r+0x238>
   8b310:	4621      	mov	r1, r4
   8b312:	4640      	mov	r0, r8
   8b314:	f7ff fc18 	bl	8ab48 <_fflush_r>
   8b318:	2800      	cmp	r0, #0
   8b31a:	d0e1      	beq.n	8b2e0 <__sfvwrite_r+0x238>
   8b31c:	e775      	b.n	8b20a <__sfvwrite_r+0x162>
   8b31e:	4629      	mov	r1, r5
   8b320:	4693      	mov	fp, r2
   8b322:	9201      	str	r2, [sp, #4]
   8b324:	f000 fbe8 	bl	8baf8 <memmove>
   8b328:	68a3      	ldr	r3, [r4, #8]
   8b32a:	9a01      	ldr	r2, [sp, #4]
   8b32c:	1a9b      	subs	r3, r3, r2
   8b32e:	60a3      	str	r3, [r4, #8]
   8b330:	6823      	ldr	r3, [r4, #0]
   8b332:	441a      	add	r2, r3
   8b334:	6022      	str	r2, [r4, #0]
   8b336:	e795      	b.n	8b264 <__sfvwrite_r+0x1bc>
   8b338:	4629      	mov	r1, r5
   8b33a:	465a      	mov	r2, fp
   8b33c:	f000 fbdc 	bl	8baf8 <memmove>
   8b340:	6823      	ldr	r3, [r4, #0]
   8b342:	4621      	mov	r1, r4
   8b344:	445b      	add	r3, fp
   8b346:	4640      	mov	r0, r8
   8b348:	6023      	str	r3, [r4, #0]
   8b34a:	f7ff fbfd 	bl	8ab48 <_fflush_r>
   8b34e:	2800      	cmp	r0, #0
   8b350:	d088      	beq.n	8b264 <__sfvwrite_r+0x1bc>
   8b352:	e75a      	b.n	8b20a <__sfvwrite_r+0x162>
   8b354:	4640      	mov	r0, r8
   8b356:	f000 fffb 	bl	8c350 <_realloc_r>
   8b35a:	4603      	mov	r3, r0
   8b35c:	2800      	cmp	r0, #0
   8b35e:	f47f af22 	bne.w	8b1a6 <__sfvwrite_r+0xfe>
   8b362:	4640      	mov	r0, r8
   8b364:	6921      	ldr	r1, [r4, #16]
   8b366:	f7ff fd9f 	bl	8aea8 <_free_r>
   8b36a:	220c      	movs	r2, #12
   8b36c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b370:	f8c8 2000 	str.w	r2, [r8]
   8b374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b378:	e749      	b.n	8b20e <__sfvwrite_r+0x166>
   8b37a:	1c72      	adds	r2, r6, #1
   8b37c:	4691      	mov	r9, r2
   8b37e:	e759      	b.n	8b234 <__sfvwrite_r+0x18c>
   8b380:	220c      	movs	r2, #12
   8b382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b386:	f8c8 2000 	str.w	r2, [r8]
   8b38a:	e740      	b.n	8b20e <__sfvwrite_r+0x166>
   8b38c:	f04f 30ff 	mov.w	r0, #4294967295
   8b390:	e6bc      	b.n	8b10c <__sfvwrite_r+0x64>
   8b392:	bf00      	nop
   8b394:	7ffffc00 	.word	0x7ffffc00

0008b398 <_fwalk_reent>:
   8b398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b39c:	f04f 0900 	mov.w	r9, #0
   8b3a0:	4607      	mov	r7, r0
   8b3a2:	4688      	mov	r8, r1
   8b3a4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b3a8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b3ac:	3d01      	subs	r5, #1
   8b3ae:	d410      	bmi.n	8b3d2 <_fwalk_reent+0x3a>
   8b3b0:	89a3      	ldrh	r3, [r4, #12]
   8b3b2:	3d01      	subs	r5, #1
   8b3b4:	2b01      	cmp	r3, #1
   8b3b6:	d908      	bls.n	8b3ca <_fwalk_reent+0x32>
   8b3b8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b3bc:	3301      	adds	r3, #1
   8b3be:	d004      	beq.n	8b3ca <_fwalk_reent+0x32>
   8b3c0:	4621      	mov	r1, r4
   8b3c2:	4638      	mov	r0, r7
   8b3c4:	47c0      	blx	r8
   8b3c6:	ea49 0900 	orr.w	r9, r9, r0
   8b3ca:	1c6b      	adds	r3, r5, #1
   8b3cc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b3d0:	d1ee      	bne.n	8b3b0 <_fwalk_reent+0x18>
   8b3d2:	6836      	ldr	r6, [r6, #0]
   8b3d4:	2e00      	cmp	r6, #0
   8b3d6:	d1e7      	bne.n	8b3a8 <_fwalk_reent+0x10>
   8b3d8:	4648      	mov	r0, r9
   8b3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b3de:	bf00      	nop

0008b3e0 <__locale_mb_cur_max>:
   8b3e0:	4b01      	ldr	r3, [pc, #4]	; (8b3e8 <__locale_mb_cur_max+0x8>)
   8b3e2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b3e6:	4770      	bx	lr
   8b3e8:	20000fa4 	.word	0x20000fa4

0008b3ec <_localeconv_r>:
   8b3ec:	4800      	ldr	r0, [pc, #0]	; (8b3f0 <_localeconv_r+0x4>)
   8b3ee:	4770      	bx	lr
   8b3f0:	20001094 	.word	0x20001094

0008b3f4 <__retarget_lock_init_recursive>:
   8b3f4:	4770      	bx	lr
   8b3f6:	bf00      	nop

0008b3f8 <__retarget_lock_close_recursive>:
   8b3f8:	4770      	bx	lr
   8b3fa:	bf00      	nop

0008b3fc <__retarget_lock_acquire_recursive>:
   8b3fc:	4770      	bx	lr
   8b3fe:	bf00      	nop

0008b400 <__retarget_lock_release_recursive>:
   8b400:	4770      	bx	lr
   8b402:	bf00      	nop

0008b404 <__smakebuf_r>:
   8b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b408:	898b      	ldrh	r3, [r1, #12]
   8b40a:	460c      	mov	r4, r1
   8b40c:	0799      	lsls	r1, r3, #30
   8b40e:	b096      	sub	sp, #88	; 0x58
   8b410:	d508      	bpl.n	8b424 <__smakebuf_r+0x20>
   8b412:	2201      	movs	r2, #1
   8b414:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8b418:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b41c:	6023      	str	r3, [r4, #0]
   8b41e:	b016      	add	sp, #88	; 0x58
   8b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b428:	4606      	mov	r6, r0
   8b42a:	2900      	cmp	r1, #0
   8b42c:	db27      	blt.n	8b47e <__smakebuf_r+0x7a>
   8b42e:	466a      	mov	r2, sp
   8b430:	f001 fc58 	bl	8cce4 <_fstat_r>
   8b434:	2800      	cmp	r0, #0
   8b436:	db21      	blt.n	8b47c <__smakebuf_r+0x78>
   8b438:	9d01      	ldr	r5, [sp, #4]
   8b43a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8b43e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8b442:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8b446:	fab5 f585 	clz	r5, r5
   8b44a:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8b44e:	096d      	lsrs	r5, r5, #5
   8b450:	4641      	mov	r1, r8
   8b452:	4630      	mov	r0, r6
   8b454:	f000 f846 	bl	8b4e4 <_malloc_r>
   8b458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b45c:	b1f0      	cbz	r0, 8b49c <__smakebuf_r+0x98>
   8b45e:	4a20      	ldr	r2, [pc, #128]	; (8b4e0 <__smakebuf_r+0xdc>)
   8b460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b464:	63f2      	str	r2, [r6, #60]	; 0x3c
   8b466:	f8c4 8014 	str.w	r8, [r4, #20]
   8b46a:	81a3      	strh	r3, [r4, #12]
   8b46c:	6020      	str	r0, [r4, #0]
   8b46e:	6120      	str	r0, [r4, #16]
   8b470:	bb35      	cbnz	r5, 8b4c0 <__smakebuf_r+0xbc>
   8b472:	433b      	orrs	r3, r7
   8b474:	81a3      	strh	r3, [r4, #12]
   8b476:	b016      	add	sp, #88	; 0x58
   8b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b47c:	89a3      	ldrh	r3, [r4, #12]
   8b47e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8b482:	d019      	beq.n	8b4b8 <__smakebuf_r+0xb4>
   8b484:	f04f 0840 	mov.w	r8, #64	; 0x40
   8b488:	4630      	mov	r0, r6
   8b48a:	4641      	mov	r1, r8
   8b48c:	2500      	movs	r5, #0
   8b48e:	f000 f829 	bl	8b4e4 <_malloc_r>
   8b492:	462f      	mov	r7, r5
   8b494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b498:	2800      	cmp	r0, #0
   8b49a:	d1e0      	bne.n	8b45e <__smakebuf_r+0x5a>
   8b49c:	059a      	lsls	r2, r3, #22
   8b49e:	d4be      	bmi.n	8b41e <__smakebuf_r+0x1a>
   8b4a0:	2101      	movs	r1, #1
   8b4a2:	f023 0303 	bic.w	r3, r3, #3
   8b4a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b4aa:	f043 0302 	orr.w	r3, r3, #2
   8b4ae:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8b4b2:	81a3      	strh	r3, [r4, #12]
   8b4b4:	6022      	str	r2, [r4, #0]
   8b4b6:	e7b2      	b.n	8b41e <__smakebuf_r+0x1a>
   8b4b8:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8b4bc:	462f      	mov	r7, r5
   8b4be:	e7c7      	b.n	8b450 <__smakebuf_r+0x4c>
   8b4c0:	4630      	mov	r0, r6
   8b4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b4c6:	f001 fc21 	bl	8cd0c <_isatty_r>
   8b4ca:	b910      	cbnz	r0, 8b4d2 <__smakebuf_r+0xce>
   8b4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b4d0:	e7cf      	b.n	8b472 <__smakebuf_r+0x6e>
   8b4d2:	89a3      	ldrh	r3, [r4, #12]
   8b4d4:	f023 0303 	bic.w	r3, r3, #3
   8b4d8:	f043 0301 	orr.w	r3, r3, #1
   8b4dc:	b21b      	sxth	r3, r3
   8b4de:	e7c8      	b.n	8b472 <__smakebuf_r+0x6e>
   8b4e0:	0008aba5 	.word	0x0008aba5

0008b4e4 <_malloc_r>:
   8b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b4e8:	f101 050b 	add.w	r5, r1, #11
   8b4ec:	2d16      	cmp	r5, #22
   8b4ee:	4606      	mov	r6, r0
   8b4f0:	b083      	sub	sp, #12
   8b4f2:	d825      	bhi.n	8b540 <_malloc_r+0x5c>
   8b4f4:	2910      	cmp	r1, #16
   8b4f6:	f200 80b8 	bhi.w	8b66a <_malloc_r+0x186>
   8b4fa:	f000 fb79 	bl	8bbf0 <__malloc_lock>
   8b4fe:	2510      	movs	r5, #16
   8b500:	2218      	movs	r2, #24
   8b502:	f04f 0c02 	mov.w	ip, #2
   8b506:	4fb5      	ldr	r7, [pc, #724]	; (8b7dc <_malloc_r+0x2f8>)
   8b508:	443a      	add	r2, r7
   8b50a:	6853      	ldr	r3, [r2, #4]
   8b50c:	f1a2 0108 	sub.w	r1, r2, #8
   8b510:	428b      	cmp	r3, r1
   8b512:	f000 80b7 	beq.w	8b684 <_malloc_r+0x1a0>
   8b516:	685a      	ldr	r2, [r3, #4]
   8b518:	68d9      	ldr	r1, [r3, #12]
   8b51a:	f022 0203 	bic.w	r2, r2, #3
   8b51e:	441a      	add	r2, r3
   8b520:	689c      	ldr	r4, [r3, #8]
   8b522:	4630      	mov	r0, r6
   8b524:	60e1      	str	r1, [r4, #12]
   8b526:	608c      	str	r4, [r1, #8]
   8b528:	6851      	ldr	r1, [r2, #4]
   8b52a:	f103 0408 	add.w	r4, r3, #8
   8b52e:	f041 0101 	orr.w	r1, r1, #1
   8b532:	6051      	str	r1, [r2, #4]
   8b534:	f000 fb62 	bl	8bbfc <__malloc_unlock>
   8b538:	4620      	mov	r0, r4
   8b53a:	b003      	add	sp, #12
   8b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b540:	f035 0507 	bics.w	r5, r5, #7
   8b544:	f100 8091 	bmi.w	8b66a <_malloc_r+0x186>
   8b548:	42a9      	cmp	r1, r5
   8b54a:	f200 808e 	bhi.w	8b66a <_malloc_r+0x186>
   8b54e:	f000 fb4f 	bl	8bbf0 <__malloc_lock>
   8b552:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b556:	f0c0 8194 	bcc.w	8b882 <_malloc_r+0x39e>
   8b55a:	0a6b      	lsrs	r3, r5, #9
   8b55c:	f000 808c 	beq.w	8b678 <_malloc_r+0x194>
   8b560:	2b04      	cmp	r3, #4
   8b562:	f200 816a 	bhi.w	8b83a <_malloc_r+0x356>
   8b566:	09ab      	lsrs	r3, r5, #6
   8b568:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   8b56c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8b570:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b574:	4f99      	ldr	r7, [pc, #612]	; (8b7dc <_malloc_r+0x2f8>)
   8b576:	4438      	add	r0, r7
   8b578:	6843      	ldr	r3, [r0, #4]
   8b57a:	3808      	subs	r0, #8
   8b57c:	4298      	cmp	r0, r3
   8b57e:	d106      	bne.n	8b58e <_malloc_r+0xaa>
   8b580:	e00c      	b.n	8b59c <_malloc_r+0xb8>
   8b582:	2900      	cmp	r1, #0
   8b584:	f280 8126 	bge.w	8b7d4 <_malloc_r+0x2f0>
   8b588:	68db      	ldr	r3, [r3, #12]
   8b58a:	4298      	cmp	r0, r3
   8b58c:	d006      	beq.n	8b59c <_malloc_r+0xb8>
   8b58e:	685a      	ldr	r2, [r3, #4]
   8b590:	f022 0203 	bic.w	r2, r2, #3
   8b594:	1b51      	subs	r1, r2, r5
   8b596:	290f      	cmp	r1, #15
   8b598:	ddf3      	ble.n	8b582 <_malloc_r+0x9e>
   8b59a:	46a4      	mov	ip, r4
   8b59c:	693c      	ldr	r4, [r7, #16]
   8b59e:	f8df e240 	ldr.w	lr, [pc, #576]	; 8b7e0 <_malloc_r+0x2fc>
   8b5a2:	4574      	cmp	r4, lr
   8b5a4:	d07a      	beq.n	8b69c <_malloc_r+0x1b8>
   8b5a6:	6862      	ldr	r2, [r4, #4]
   8b5a8:	f022 0203 	bic.w	r2, r2, #3
   8b5ac:	1b53      	subs	r3, r2, r5
   8b5ae:	2b0f      	cmp	r3, #15
   8b5b0:	f300 8176 	bgt.w	8b8a0 <_malloc_r+0x3bc>
   8b5b4:	2b00      	cmp	r3, #0
   8b5b6:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   8b5ba:	f280 8167 	bge.w	8b88c <_malloc_r+0x3a8>
   8b5be:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b5c2:	f080 8119 	bcs.w	8b7f8 <_malloc_r+0x314>
   8b5c6:	2101      	movs	r1, #1
   8b5c8:	08d3      	lsrs	r3, r2, #3
   8b5ca:	0952      	lsrs	r2, r2, #5
   8b5cc:	440b      	add	r3, r1
   8b5ce:	4091      	lsls	r1, r2
   8b5d0:	687a      	ldr	r2, [r7, #4]
   8b5d2:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   8b5d6:	430a      	orrs	r2, r1
   8b5d8:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   8b5dc:	3908      	subs	r1, #8
   8b5de:	60a0      	str	r0, [r4, #8]
   8b5e0:	60e1      	str	r1, [r4, #12]
   8b5e2:	607a      	str	r2, [r7, #4]
   8b5e4:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8b5e8:	60c4      	str	r4, [r0, #12]
   8b5ea:	2101      	movs	r1, #1
   8b5ec:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8b5f0:	4099      	lsls	r1, r3
   8b5f2:	4291      	cmp	r1, r2
   8b5f4:	d859      	bhi.n	8b6aa <_malloc_r+0x1c6>
   8b5f6:	4211      	tst	r1, r2
   8b5f8:	d106      	bne.n	8b608 <_malloc_r+0x124>
   8b5fa:	f02c 0c03 	bic.w	ip, ip, #3
   8b5fe:	0049      	lsls	r1, r1, #1
   8b600:	4211      	tst	r1, r2
   8b602:	f10c 0c04 	add.w	ip, ip, #4
   8b606:	d0fa      	beq.n	8b5fe <_malloc_r+0x11a>
   8b608:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   8b60c:	4648      	mov	r0, r9
   8b60e:	4664      	mov	r4, ip
   8b610:	f8d0 800c 	ldr.w	r8, [r0, #12]
   8b614:	4540      	cmp	r0, r8
   8b616:	d108      	bne.n	8b62a <_malloc_r+0x146>
   8b618:	e11c      	b.n	8b854 <_malloc_r+0x370>
   8b61a:	2b00      	cmp	r3, #0
   8b61c:	f280 8121 	bge.w	8b862 <_malloc_r+0x37e>
   8b620:	f8d8 800c 	ldr.w	r8, [r8, #12]
   8b624:	4540      	cmp	r0, r8
   8b626:	f000 8115 	beq.w	8b854 <_malloc_r+0x370>
   8b62a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b62e:	f022 0203 	bic.w	r2, r2, #3
   8b632:	1b53      	subs	r3, r2, r5
   8b634:	2b0f      	cmp	r3, #15
   8b636:	ddf0      	ble.n	8b61a <_malloc_r+0x136>
   8b638:	eb08 0105 	add.w	r1, r8, r5
   8b63c:	f045 0501 	orr.w	r5, r5, #1
   8b640:	f8c8 5004 	str.w	r5, [r8, #4]
   8b644:	4630      	mov	r0, r6
   8b646:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   8b64a:	60f4      	str	r4, [r6, #12]
   8b64c:	60a6      	str	r6, [r4, #8]
   8b64e:	f043 0401 	orr.w	r4, r3, #1
   8b652:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8b656:	604c      	str	r4, [r1, #4]
   8b658:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8b65c:	f848 3002 	str.w	r3, [r8, r2]
   8b660:	f000 facc 	bl	8bbfc <__malloc_unlock>
   8b664:	f108 0408 	add.w	r4, r8, #8
   8b668:	e002      	b.n	8b670 <_malloc_r+0x18c>
   8b66a:	230c      	movs	r3, #12
   8b66c:	2400      	movs	r4, #0
   8b66e:	6033      	str	r3, [r6, #0]
   8b670:	4620      	mov	r0, r4
   8b672:	b003      	add	sp, #12
   8b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b678:	f44f 7000 	mov.w	r0, #512	; 0x200
   8b67c:	f04f 0c40 	mov.w	ip, #64	; 0x40
   8b680:	243f      	movs	r4, #63	; 0x3f
   8b682:	e777      	b.n	8b574 <_malloc_r+0x90>
   8b684:	68d3      	ldr	r3, [r2, #12]
   8b686:	429a      	cmp	r2, r3
   8b688:	bf08      	it	eq
   8b68a:	f10c 0c02 	addeq.w	ip, ip, #2
   8b68e:	f47f af42 	bne.w	8b516 <_malloc_r+0x32>
   8b692:	693c      	ldr	r4, [r7, #16]
   8b694:	f8df e148 	ldr.w	lr, [pc, #328]	; 8b7e0 <_malloc_r+0x2fc>
   8b698:	4574      	cmp	r4, lr
   8b69a:	d184      	bne.n	8b5a6 <_malloc_r+0xc2>
   8b69c:	2101      	movs	r1, #1
   8b69e:	687a      	ldr	r2, [r7, #4]
   8b6a0:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8b6a4:	4099      	lsls	r1, r3
   8b6a6:	4291      	cmp	r1, r2
   8b6a8:	d9a5      	bls.n	8b5f6 <_malloc_r+0x112>
   8b6aa:	68bc      	ldr	r4, [r7, #8]
   8b6ac:	6863      	ldr	r3, [r4, #4]
   8b6ae:	f023 0903 	bic.w	r9, r3, #3
   8b6b2:	454d      	cmp	r5, r9
   8b6b4:	d803      	bhi.n	8b6be <_malloc_r+0x1da>
   8b6b6:	eba9 0305 	sub.w	r3, r9, r5
   8b6ba:	2b0f      	cmp	r3, #15
   8b6bc:	dc7a      	bgt.n	8b7b4 <_malloc_r+0x2d0>
   8b6be:	f8df b124 	ldr.w	fp, [pc, #292]	; 8b7e4 <_malloc_r+0x300>
   8b6c2:	4b49      	ldr	r3, [pc, #292]	; (8b7e8 <_malloc_r+0x304>)
   8b6c4:	f8db 2000 	ldr.w	r2, [fp]
   8b6c8:	681b      	ldr	r3, [r3, #0]
   8b6ca:	3201      	adds	r2, #1
   8b6cc:	442b      	add	r3, r5
   8b6ce:	eb04 0a09 	add.w	sl, r4, r9
   8b6d2:	f000 812f 	beq.w	8b934 <_malloc_r+0x450>
   8b6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b6da:	330f      	adds	r3, #15
   8b6dc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   8b6e0:	f028 080f 	bic.w	r8, r8, #15
   8b6e4:	4641      	mov	r1, r8
   8b6e6:	4630      	mov	r0, r6
   8b6e8:	f001 f858 	bl	8c79c <_sbrk_r>
   8b6ec:	1c41      	adds	r1, r0, #1
   8b6ee:	4602      	mov	r2, r0
   8b6f0:	f000 80ef 	beq.w	8b8d2 <_malloc_r+0x3ee>
   8b6f4:	4582      	cmp	sl, r0
   8b6f6:	f200 80ea 	bhi.w	8b8ce <_malloc_r+0x3ea>
   8b6fa:	4b3c      	ldr	r3, [pc, #240]	; (8b7ec <_malloc_r+0x308>)
   8b6fc:	6819      	ldr	r1, [r3, #0]
   8b6fe:	4441      	add	r1, r8
   8b700:	4608      	mov	r0, r1
   8b702:	6019      	str	r1, [r3, #0]
   8b704:	f000 8149 	beq.w	8b99a <_malloc_r+0x4b6>
   8b708:	f8db 1000 	ldr.w	r1, [fp]
   8b70c:	9301      	str	r3, [sp, #4]
   8b70e:	3101      	adds	r1, #1
   8b710:	bf1b      	ittet	ne
   8b712:	eba2 0a0a 	subne.w	sl, r2, sl
   8b716:	4450      	addne	r0, sl
   8b718:	f8cb 2000 	streq.w	r2, [fp]
   8b71c:	6018      	strne	r0, [r3, #0]
   8b71e:	f012 0b07 	ands.w	fp, r2, #7
   8b722:	f000 8111 	beq.w	8b948 <_malloc_r+0x464>
   8b726:	f1cb 0108 	rsb	r1, fp, #8
   8b72a:	440a      	add	r2, r1
   8b72c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   8b730:	4490      	add	r8, r2
   8b732:	3108      	adds	r1, #8
   8b734:	eba1 0108 	sub.w	r1, r1, r8
   8b738:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8b73c:	4651      	mov	r1, sl
   8b73e:	4630      	mov	r0, r6
   8b740:	9200      	str	r2, [sp, #0]
   8b742:	f001 f82b 	bl	8c79c <_sbrk_r>
   8b746:	1c42      	adds	r2, r0, #1
   8b748:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b74c:	f000 814b 	beq.w	8b9e6 <_malloc_r+0x502>
   8b750:	1a80      	subs	r0, r0, r2
   8b752:	eb00 080a 	add.w	r8, r0, sl
   8b756:	6819      	ldr	r1, [r3, #0]
   8b758:	f048 0001 	orr.w	r0, r8, #1
   8b75c:	4451      	add	r1, sl
   8b75e:	42bc      	cmp	r4, r7
   8b760:	60ba      	str	r2, [r7, #8]
   8b762:	6019      	str	r1, [r3, #0]
   8b764:	6050      	str	r0, [r2, #4]
   8b766:	f000 8124 	beq.w	8b9b2 <_malloc_r+0x4ce>
   8b76a:	f1b9 0f0f 	cmp.w	r9, #15
   8b76e:	f240 8122 	bls.w	8b9b6 <_malloc_r+0x4d2>
   8b772:	f04f 0e05 	mov.w	lr, #5
   8b776:	6860      	ldr	r0, [r4, #4]
   8b778:	f1a9 0c0c 	sub.w	ip, r9, #12
   8b77c:	f02c 0c07 	bic.w	ip, ip, #7
   8b780:	f000 0001 	and.w	r0, r0, #1
   8b784:	ea40 000c 	orr.w	r0, r0, ip
   8b788:	6060      	str	r0, [r4, #4]
   8b78a:	f1bc 0f0f 	cmp.w	ip, #15
   8b78e:	eb04 000c 	add.w	r0, r4, ip
   8b792:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   8b796:	f200 812e 	bhi.w	8b9f6 <_malloc_r+0x512>
   8b79a:	4614      	mov	r4, r2
   8b79c:	6850      	ldr	r0, [r2, #4]
   8b79e:	4b14      	ldr	r3, [pc, #80]	; (8b7f0 <_malloc_r+0x30c>)
   8b7a0:	681a      	ldr	r2, [r3, #0]
   8b7a2:	428a      	cmp	r2, r1
   8b7a4:	bf38      	it	cc
   8b7a6:	6019      	strcc	r1, [r3, #0]
   8b7a8:	4b12      	ldr	r3, [pc, #72]	; (8b7f4 <_malloc_r+0x310>)
   8b7aa:	681a      	ldr	r2, [r3, #0]
   8b7ac:	428a      	cmp	r2, r1
   8b7ae:	bf38      	it	cc
   8b7b0:	6019      	strcc	r1, [r3, #0]
   8b7b2:	e090      	b.n	8b8d6 <_malloc_r+0x3f2>
   8b7b4:	1962      	adds	r2, r4, r5
   8b7b6:	f043 0301 	orr.w	r3, r3, #1
   8b7ba:	f045 0501 	orr.w	r5, r5, #1
   8b7be:	6065      	str	r5, [r4, #4]
   8b7c0:	4630      	mov	r0, r6
   8b7c2:	60ba      	str	r2, [r7, #8]
   8b7c4:	3408      	adds	r4, #8
   8b7c6:	6053      	str	r3, [r2, #4]
   8b7c8:	f000 fa18 	bl	8bbfc <__malloc_unlock>
   8b7cc:	4620      	mov	r0, r4
   8b7ce:	b003      	add	sp, #12
   8b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b7d4:	68d9      	ldr	r1, [r3, #12]
   8b7d6:	441a      	add	r2, r3
   8b7d8:	e6a2      	b.n	8b520 <_malloc_r+0x3c>
   8b7da:	bf00      	nop
   8b7dc:	20001110 	.word	0x20001110
   8b7e0:	20001118 	.word	0x20001118
   8b7e4:	20001518 	.word	0x20001518
   8b7e8:	200028cc 	.word	0x200028cc
   8b7ec:	2000289c 	.word	0x2000289c
   8b7f0:	200028c4 	.word	0x200028c4
   8b7f4:	200028c8 	.word	0x200028c8
   8b7f8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b7fc:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b800:	d35f      	bcc.n	8b8c2 <_malloc_r+0x3de>
   8b802:	2b14      	cmp	r3, #20
   8b804:	f200 80b1 	bhi.w	8b96a <_malloc_r+0x486>
   8b808:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b80c:	00c9      	lsls	r1, r1, #3
   8b80e:	335b      	adds	r3, #91	; 0x5b
   8b810:	1878      	adds	r0, r7, r1
   8b812:	5879      	ldr	r1, [r7, r1]
   8b814:	3808      	subs	r0, #8
   8b816:	4288      	cmp	r0, r1
   8b818:	f000 808f 	beq.w	8b93a <_malloc_r+0x456>
   8b81c:	684b      	ldr	r3, [r1, #4]
   8b81e:	f023 0303 	bic.w	r3, r3, #3
   8b822:	4293      	cmp	r3, r2
   8b824:	d902      	bls.n	8b82c <_malloc_r+0x348>
   8b826:	6889      	ldr	r1, [r1, #8]
   8b828:	4288      	cmp	r0, r1
   8b82a:	d1f7      	bne.n	8b81c <_malloc_r+0x338>
   8b82c:	68c8      	ldr	r0, [r1, #12]
   8b82e:	687a      	ldr	r2, [r7, #4]
   8b830:	e9c4 1002 	strd	r1, r0, [r4, #8]
   8b834:	6084      	str	r4, [r0, #8]
   8b836:	60cc      	str	r4, [r1, #12]
   8b838:	e6d7      	b.n	8b5ea <_malloc_r+0x106>
   8b83a:	2b14      	cmp	r3, #20
   8b83c:	d959      	bls.n	8b8f2 <_malloc_r+0x40e>
   8b83e:	2b54      	cmp	r3, #84	; 0x54
   8b840:	f200 809b 	bhi.w	8b97a <_malloc_r+0x496>
   8b844:	0b2b      	lsrs	r3, r5, #12
   8b846:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   8b84a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8b84e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b852:	e68f      	b.n	8b574 <_malloc_r+0x90>
   8b854:	3401      	adds	r4, #1
   8b856:	07a3      	lsls	r3, r4, #30
   8b858:	f100 0008 	add.w	r0, r0, #8
   8b85c:	f47f aed8 	bne.w	8b610 <_malloc_r+0x12c>
   8b860:	e053      	b.n	8b90a <_malloc_r+0x426>
   8b862:	4644      	mov	r4, r8
   8b864:	4442      	add	r2, r8
   8b866:	6853      	ldr	r3, [r2, #4]
   8b868:	f8d8 100c 	ldr.w	r1, [r8, #12]
   8b86c:	f043 0301 	orr.w	r3, r3, #1
   8b870:	6053      	str	r3, [r2, #4]
   8b872:	f854 3f08 	ldr.w	r3, [r4, #8]!
   8b876:	4630      	mov	r0, r6
   8b878:	60d9      	str	r1, [r3, #12]
   8b87a:	608b      	str	r3, [r1, #8]
   8b87c:	f000 f9be 	bl	8bbfc <__malloc_unlock>
   8b880:	e6f6      	b.n	8b670 <_malloc_r+0x18c>
   8b882:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8b886:	f105 0208 	add.w	r2, r5, #8
   8b88a:	e63c      	b.n	8b506 <_malloc_r+0x22>
   8b88c:	4422      	add	r2, r4
   8b88e:	6853      	ldr	r3, [r2, #4]
   8b890:	4630      	mov	r0, r6
   8b892:	f043 0301 	orr.w	r3, r3, #1
   8b896:	6053      	str	r3, [r2, #4]
   8b898:	f000 f9b0 	bl	8bbfc <__malloc_unlock>
   8b89c:	3408      	adds	r4, #8
   8b89e:	e6e7      	b.n	8b670 <_malloc_r+0x18c>
   8b8a0:	1961      	adds	r1, r4, r5
   8b8a2:	f045 0501 	orr.w	r5, r5, #1
   8b8a6:	6065      	str	r5, [r4, #4]
   8b8a8:	f043 0501 	orr.w	r5, r3, #1
   8b8ac:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8b8b0:	4630      	mov	r0, r6
   8b8b2:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8b8b6:	604d      	str	r5, [r1, #4]
   8b8b8:	50a3      	str	r3, [r4, r2]
   8b8ba:	f000 f99f 	bl	8bbfc <__malloc_unlock>
   8b8be:	3408      	adds	r4, #8
   8b8c0:	e6d6      	b.n	8b670 <_malloc_r+0x18c>
   8b8c2:	0993      	lsrs	r3, r2, #6
   8b8c4:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b8c8:	00c9      	lsls	r1, r1, #3
   8b8ca:	3338      	adds	r3, #56	; 0x38
   8b8cc:	e7a0      	b.n	8b810 <_malloc_r+0x32c>
   8b8ce:	42bc      	cmp	r4, r7
   8b8d0:	d05e      	beq.n	8b990 <_malloc_r+0x4ac>
   8b8d2:	68bc      	ldr	r4, [r7, #8]
   8b8d4:	6860      	ldr	r0, [r4, #4]
   8b8d6:	f020 0803 	bic.w	r8, r0, #3
   8b8da:	4545      	cmp	r5, r8
   8b8dc:	eba8 0305 	sub.w	r3, r8, r5
   8b8e0:	d802      	bhi.n	8b8e8 <_malloc_r+0x404>
   8b8e2:	2b0f      	cmp	r3, #15
   8b8e4:	f73f af66 	bgt.w	8b7b4 <_malloc_r+0x2d0>
   8b8e8:	4630      	mov	r0, r6
   8b8ea:	f000 f987 	bl	8bbfc <__malloc_unlock>
   8b8ee:	2400      	movs	r4, #0
   8b8f0:	e6be      	b.n	8b670 <_malloc_r+0x18c>
   8b8f2:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8b8f6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8b8fa:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b8fe:	e639      	b.n	8b574 <_malloc_r+0x90>
   8b900:	f859 3908 	ldr.w	r3, [r9], #-8
   8b904:	454b      	cmp	r3, r9
   8b906:	f040 8095 	bne.w	8ba34 <_malloc_r+0x550>
   8b90a:	f01c 0f03 	tst.w	ip, #3
   8b90e:	f10c 3cff 	add.w	ip, ip, #4294967295
   8b912:	d1f5      	bne.n	8b900 <_malloc_r+0x41c>
   8b914:	687b      	ldr	r3, [r7, #4]
   8b916:	ea23 0301 	bic.w	r3, r3, r1
   8b91a:	607b      	str	r3, [r7, #4]
   8b91c:	0049      	lsls	r1, r1, #1
   8b91e:	4299      	cmp	r1, r3
   8b920:	f63f aec3 	bhi.w	8b6aa <_malloc_r+0x1c6>
   8b924:	b911      	cbnz	r1, 8b92c <_malloc_r+0x448>
   8b926:	e6c0      	b.n	8b6aa <_malloc_r+0x1c6>
   8b928:	0049      	lsls	r1, r1, #1
   8b92a:	3404      	adds	r4, #4
   8b92c:	4219      	tst	r1, r3
   8b92e:	d0fb      	beq.n	8b928 <_malloc_r+0x444>
   8b930:	46a4      	mov	ip, r4
   8b932:	e669      	b.n	8b608 <_malloc_r+0x124>
   8b934:	f103 0810 	add.w	r8, r3, #16
   8b938:	e6d4      	b.n	8b6e4 <_malloc_r+0x200>
   8b93a:	2201      	movs	r2, #1
   8b93c:	109b      	asrs	r3, r3, #2
   8b93e:	409a      	lsls	r2, r3
   8b940:	687b      	ldr	r3, [r7, #4]
   8b942:	431a      	orrs	r2, r3
   8b944:	607a      	str	r2, [r7, #4]
   8b946:	e773      	b.n	8b830 <_malloc_r+0x34c>
   8b948:	eb02 0108 	add.w	r1, r2, r8
   8b94c:	4249      	negs	r1, r1
   8b94e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8b952:	4651      	mov	r1, sl
   8b954:	4630      	mov	r0, r6
   8b956:	9200      	str	r2, [sp, #0]
   8b958:	f000 ff20 	bl	8c79c <_sbrk_r>
   8b95c:	1c43      	adds	r3, r0, #1
   8b95e:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b962:	f47f aef5 	bne.w	8b750 <_malloc_r+0x26c>
   8b966:	46da      	mov	sl, fp
   8b968:	e6f5      	b.n	8b756 <_malloc_r+0x272>
   8b96a:	2b54      	cmp	r3, #84	; 0x54
   8b96c:	d826      	bhi.n	8b9bc <_malloc_r+0x4d8>
   8b96e:	0b13      	lsrs	r3, r2, #12
   8b970:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b974:	00c9      	lsls	r1, r1, #3
   8b976:	336e      	adds	r3, #110	; 0x6e
   8b978:	e74a      	b.n	8b810 <_malloc_r+0x32c>
   8b97a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b97e:	d826      	bhi.n	8b9ce <_malloc_r+0x4ea>
   8b980:	0beb      	lsrs	r3, r5, #15
   8b982:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   8b986:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8b98a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b98e:	e5f1      	b.n	8b574 <_malloc_r+0x90>
   8b990:	4b29      	ldr	r3, [pc, #164]	; (8ba38 <_malloc_r+0x554>)
   8b992:	6818      	ldr	r0, [r3, #0]
   8b994:	4440      	add	r0, r8
   8b996:	6018      	str	r0, [r3, #0]
   8b998:	e6b6      	b.n	8b708 <_malloc_r+0x224>
   8b99a:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b99e:	f1bc 0f00 	cmp.w	ip, #0
   8b9a2:	f47f aeb1 	bne.w	8b708 <_malloc_r+0x224>
   8b9a6:	68bc      	ldr	r4, [r7, #8]
   8b9a8:	44c8      	add	r8, r9
   8b9aa:	f048 0001 	orr.w	r0, r8, #1
   8b9ae:	6060      	str	r0, [r4, #4]
   8b9b0:	e6f5      	b.n	8b79e <_malloc_r+0x2ba>
   8b9b2:	4614      	mov	r4, r2
   8b9b4:	e6f3      	b.n	8b79e <_malloc_r+0x2ba>
   8b9b6:	2301      	movs	r3, #1
   8b9b8:	6053      	str	r3, [r2, #4]
   8b9ba:	e795      	b.n	8b8e8 <_malloc_r+0x404>
   8b9bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b9c0:	d824      	bhi.n	8ba0c <_malloc_r+0x528>
   8b9c2:	0bd3      	lsrs	r3, r2, #15
   8b9c4:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b9c8:	00c9      	lsls	r1, r1, #3
   8b9ca:	3377      	adds	r3, #119	; 0x77
   8b9cc:	e720      	b.n	8b810 <_malloc_r+0x32c>
   8b9ce:	f240 5254 	movw	r2, #1364	; 0x554
   8b9d2:	4293      	cmp	r3, r2
   8b9d4:	d824      	bhi.n	8ba20 <_malloc_r+0x53c>
   8b9d6:	0cab      	lsrs	r3, r5, #18
   8b9d8:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   8b9dc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8b9e0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b9e4:	e5c6      	b.n	8b574 <_malloc_r+0x90>
   8b9e6:	f1ab 0b08 	sub.w	fp, fp, #8
   8b9ea:	44d8      	add	r8, fp
   8b9ec:	f04f 0a00 	mov.w	sl, #0
   8b9f0:	eba8 0802 	sub.w	r8, r8, r2
   8b9f4:	e6af      	b.n	8b756 <_malloc_r+0x272>
   8b9f6:	f104 0108 	add.w	r1, r4, #8
   8b9fa:	4630      	mov	r0, r6
   8b9fc:	9300      	str	r3, [sp, #0]
   8b9fe:	f7ff fa53 	bl	8aea8 <_free_r>
   8ba02:	68bc      	ldr	r4, [r7, #8]
   8ba04:	9b00      	ldr	r3, [sp, #0]
   8ba06:	6860      	ldr	r0, [r4, #4]
   8ba08:	6819      	ldr	r1, [r3, #0]
   8ba0a:	e6c8      	b.n	8b79e <_malloc_r+0x2ba>
   8ba0c:	f240 5154 	movw	r1, #1364	; 0x554
   8ba10:	428b      	cmp	r3, r1
   8ba12:	d80b      	bhi.n	8ba2c <_malloc_r+0x548>
   8ba14:	0c93      	lsrs	r3, r2, #18
   8ba16:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8ba1a:	00c9      	lsls	r1, r1, #3
   8ba1c:	337c      	adds	r3, #124	; 0x7c
   8ba1e:	e6f7      	b.n	8b810 <_malloc_r+0x32c>
   8ba20:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   8ba24:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8ba28:	247e      	movs	r4, #126	; 0x7e
   8ba2a:	e5a3      	b.n	8b574 <_malloc_r+0x90>
   8ba2c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ba30:	237e      	movs	r3, #126	; 0x7e
   8ba32:	e6ed      	b.n	8b810 <_malloc_r+0x32c>
   8ba34:	687b      	ldr	r3, [r7, #4]
   8ba36:	e771      	b.n	8b91c <_malloc_r+0x438>
   8ba38:	2000289c 	.word	0x2000289c

0008ba3c <__ascii_mbtowc>:
   8ba3c:	b082      	sub	sp, #8
   8ba3e:	b149      	cbz	r1, 8ba54 <__ascii_mbtowc+0x18>
   8ba40:	b15a      	cbz	r2, 8ba5a <__ascii_mbtowc+0x1e>
   8ba42:	b16b      	cbz	r3, 8ba60 <__ascii_mbtowc+0x24>
   8ba44:	7813      	ldrb	r3, [r2, #0]
   8ba46:	600b      	str	r3, [r1, #0]
   8ba48:	7812      	ldrb	r2, [r2, #0]
   8ba4a:	1e10      	subs	r0, r2, #0
   8ba4c:	bf18      	it	ne
   8ba4e:	2001      	movne	r0, #1
   8ba50:	b002      	add	sp, #8
   8ba52:	4770      	bx	lr
   8ba54:	a901      	add	r1, sp, #4
   8ba56:	2a00      	cmp	r2, #0
   8ba58:	d1f3      	bne.n	8ba42 <__ascii_mbtowc+0x6>
   8ba5a:	4610      	mov	r0, r2
   8ba5c:	b002      	add	sp, #8
   8ba5e:	4770      	bx	lr
   8ba60:	f06f 0001 	mvn.w	r0, #1
   8ba64:	e7f4      	b.n	8ba50 <__ascii_mbtowc+0x14>
   8ba66:	bf00      	nop

0008ba68 <memchr>:
   8ba68:	fa5f fc81 	uxtb.w	ip, r1
   8ba6c:	0781      	lsls	r1, r0, #30
   8ba6e:	d010      	beq.n	8ba92 <memchr+0x2a>
   8ba70:	4603      	mov	r3, r0
   8ba72:	1e51      	subs	r1, r2, #1
   8ba74:	b92a      	cbnz	r2, 8ba82 <memchr+0x1a>
   8ba76:	e00a      	b.n	8ba8e <memchr+0x26>
   8ba78:	079a      	lsls	r2, r3, #30
   8ba7a:	4618      	mov	r0, r3
   8ba7c:	d00a      	beq.n	8ba94 <memchr+0x2c>
   8ba7e:	3901      	subs	r1, #1
   8ba80:	d305      	bcc.n	8ba8e <memchr+0x26>
   8ba82:	4618      	mov	r0, r3
   8ba84:	f813 2b01 	ldrb.w	r2, [r3], #1
   8ba88:	4562      	cmp	r2, ip
   8ba8a:	d1f5      	bne.n	8ba78 <memchr+0x10>
   8ba8c:	4770      	bx	lr
   8ba8e:	2000      	movs	r0, #0
   8ba90:	4770      	bx	lr
   8ba92:	4611      	mov	r1, r2
   8ba94:	2903      	cmp	r1, #3
   8ba96:	d80c      	bhi.n	8bab2 <memchr+0x4a>
   8ba98:	2900      	cmp	r1, #0
   8ba9a:	d0f8      	beq.n	8ba8e <memchr+0x26>
   8ba9c:	4603      	mov	r3, r0
   8ba9e:	4401      	add	r1, r0
   8baa0:	e001      	b.n	8baa6 <memchr+0x3e>
   8baa2:	428b      	cmp	r3, r1
   8baa4:	d0f3      	beq.n	8ba8e <memchr+0x26>
   8baa6:	4618      	mov	r0, r3
   8baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8baac:	4562      	cmp	r2, ip
   8baae:	d1f8      	bne.n	8baa2 <memchr+0x3a>
   8bab0:	e7ec      	b.n	8ba8c <memchr+0x24>
   8bab2:	4602      	mov	r2, r0
   8bab4:	b510      	push	{r4, lr}
   8bab6:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8baba:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8babe:	4610      	mov	r0, r2
   8bac0:	6803      	ldr	r3, [r0, #0]
   8bac2:	3204      	adds	r2, #4
   8bac4:	4063      	eors	r3, r4
   8bac6:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8baca:	ea2e 0303 	bic.w	r3, lr, r3
   8bace:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8bad2:	d104      	bne.n	8bade <memchr+0x76>
   8bad4:	3904      	subs	r1, #4
   8bad6:	2903      	cmp	r1, #3
   8bad8:	4610      	mov	r0, r2
   8bada:	d8f0      	bhi.n	8babe <memchr+0x56>
   8badc:	b151      	cbz	r1, 8baf4 <memchr+0x8c>
   8bade:	4603      	mov	r3, r0
   8bae0:	4401      	add	r1, r0
   8bae2:	e001      	b.n	8bae8 <memchr+0x80>
   8bae4:	428b      	cmp	r3, r1
   8bae6:	d005      	beq.n	8baf4 <memchr+0x8c>
   8bae8:	4618      	mov	r0, r3
   8baea:	f813 2b01 	ldrb.w	r2, [r3], #1
   8baee:	4562      	cmp	r2, ip
   8baf0:	d1f8      	bne.n	8bae4 <memchr+0x7c>
   8baf2:	bd10      	pop	{r4, pc}
   8baf4:	2000      	movs	r0, #0
   8baf6:	bd10      	pop	{r4, pc}

0008baf8 <memmove>:
   8baf8:	4288      	cmp	r0, r1
   8bafa:	d90d      	bls.n	8bb18 <memmove+0x20>
   8bafc:	188b      	adds	r3, r1, r2
   8bafe:	4283      	cmp	r3, r0
   8bb00:	d90a      	bls.n	8bb18 <memmove+0x20>
   8bb02:	eb00 0c02 	add.w	ip, r0, r2
   8bb06:	b1ba      	cbz	r2, 8bb38 <memmove+0x40>
   8bb08:	4662      	mov	r2, ip
   8bb0a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   8bb0e:	4299      	cmp	r1, r3
   8bb10:	f802 cd01 	strb.w	ip, [r2, #-1]!
   8bb14:	d1f9      	bne.n	8bb0a <memmove+0x12>
   8bb16:	4770      	bx	lr
   8bb18:	2a0f      	cmp	r2, #15
   8bb1a:	d80e      	bhi.n	8bb3a <memmove+0x42>
   8bb1c:	4603      	mov	r3, r0
   8bb1e:	f102 3cff 	add.w	ip, r2, #4294967295
   8bb22:	b14a      	cbz	r2, 8bb38 <memmove+0x40>
   8bb24:	f10c 0c01 	add.w	ip, ip, #1
   8bb28:	3b01      	subs	r3, #1
   8bb2a:	448c      	add	ip, r1
   8bb2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   8bb30:	4561      	cmp	r1, ip
   8bb32:	f803 2f01 	strb.w	r2, [r3, #1]!
   8bb36:	d1f9      	bne.n	8bb2c <memmove+0x34>
   8bb38:	4770      	bx	lr
   8bb3a:	ea40 0301 	orr.w	r3, r0, r1
   8bb3e:	079b      	lsls	r3, r3, #30
   8bb40:	d14f      	bne.n	8bbe2 <memmove+0xea>
   8bb42:	f1a2 0310 	sub.w	r3, r2, #16
   8bb46:	b570      	push	{r4, r5, r6, lr}
   8bb48:	f101 0c20 	add.w	ip, r1, #32
   8bb4c:	f023 050f 	bic.w	r5, r3, #15
   8bb50:	f101 0e10 	add.w	lr, r1, #16
   8bb54:	f100 0410 	add.w	r4, r0, #16
   8bb58:	44ac      	add	ip, r5
   8bb5a:	091b      	lsrs	r3, r3, #4
   8bb5c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   8bb60:	f10e 0e10 	add.w	lr, lr, #16
   8bb64:	f844 5c10 	str.w	r5, [r4, #-16]
   8bb68:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   8bb6c:	3410      	adds	r4, #16
   8bb6e:	f844 5c1c 	str.w	r5, [r4, #-28]
   8bb72:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   8bb76:	f844 5c18 	str.w	r5, [r4, #-24]
   8bb7a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   8bb7e:	45e6      	cmp	lr, ip
   8bb80:	f844 5c14 	str.w	r5, [r4, #-20]
   8bb84:	d1ea      	bne.n	8bb5c <memmove+0x64>
   8bb86:	3301      	adds	r3, #1
   8bb88:	f012 0f0c 	tst.w	r2, #12
   8bb8c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8bb90:	f002 040f 	and.w	r4, r2, #15
   8bb94:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8bb98:	d027      	beq.n	8bbea <memmove+0xf2>
   8bb9a:	468e      	mov	lr, r1
   8bb9c:	3c04      	subs	r4, #4
   8bb9e:	f024 0603 	bic.w	r6, r4, #3
   8bba2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   8bba6:	441e      	add	r6, r3
   8bba8:	1f1c      	subs	r4, r3, #4
   8bbaa:	f85e 5b04 	ldr.w	r5, [lr], #4
   8bbae:	f844 5f04 	str.w	r5, [r4, #4]!
   8bbb2:	42b4      	cmp	r4, r6
   8bbb4:	d1f9      	bne.n	8bbaa <memmove+0xb2>
   8bbb6:	f10c 0401 	add.w	r4, ip, #1
   8bbba:	f002 0203 	and.w	r2, r2, #3
   8bbbe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8bbc2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8bbc6:	f102 3cff 	add.w	ip, r2, #4294967295
   8bbca:	b14a      	cbz	r2, 8bbe0 <memmove+0xe8>
   8bbcc:	f10c 0c01 	add.w	ip, ip, #1
   8bbd0:	3b01      	subs	r3, #1
   8bbd2:	448c      	add	ip, r1
   8bbd4:	f811 2b01 	ldrb.w	r2, [r1], #1
   8bbd8:	4561      	cmp	r1, ip
   8bbda:	f803 2f01 	strb.w	r2, [r3, #1]!
   8bbde:	d1f9      	bne.n	8bbd4 <memmove+0xdc>
   8bbe0:	bd70      	pop	{r4, r5, r6, pc}
   8bbe2:	4603      	mov	r3, r0
   8bbe4:	f102 3cff 	add.w	ip, r2, #4294967295
   8bbe8:	e79c      	b.n	8bb24 <memmove+0x2c>
   8bbea:	4622      	mov	r2, r4
   8bbec:	e7eb      	b.n	8bbc6 <memmove+0xce>
   8bbee:	bf00      	nop

0008bbf0 <__malloc_lock>:
   8bbf0:	4801      	ldr	r0, [pc, #4]	; (8bbf8 <__malloc_lock+0x8>)
   8bbf2:	f7ff bc03 	b.w	8b3fc <__retarget_lock_acquire_recursive>
   8bbf6:	bf00      	nop
   8bbf8:	20002890 	.word	0x20002890

0008bbfc <__malloc_unlock>:
   8bbfc:	4801      	ldr	r0, [pc, #4]	; (8bc04 <__malloc_unlock+0x8>)
   8bbfe:	f7ff bbff 	b.w	8b400 <__retarget_lock_release_recursive>
   8bc02:	bf00      	nop
   8bc04:	20002890 	.word	0x20002890

0008bc08 <_Balloc>:
   8bc08:	b538      	push	{r3, r4, r5, lr}
   8bc0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8bc0c:	4605      	mov	r5, r0
   8bc0e:	460c      	mov	r4, r1
   8bc10:	b14b      	cbz	r3, 8bc26 <_Balloc+0x1e>
   8bc12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8bc16:	b180      	cbz	r0, 8bc3a <_Balloc+0x32>
   8bc18:	6802      	ldr	r2, [r0, #0]
   8bc1a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8bc1e:	2300      	movs	r3, #0
   8bc20:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8bc24:	bd38      	pop	{r3, r4, r5, pc}
   8bc26:	2221      	movs	r2, #33	; 0x21
   8bc28:	2104      	movs	r1, #4
   8bc2a:	f000 ff8d 	bl	8cb48 <_calloc_r>
   8bc2e:	4603      	mov	r3, r0
   8bc30:	64e8      	str	r0, [r5, #76]	; 0x4c
   8bc32:	2800      	cmp	r0, #0
   8bc34:	d1ed      	bne.n	8bc12 <_Balloc+0xa>
   8bc36:	2000      	movs	r0, #0
   8bc38:	bd38      	pop	{r3, r4, r5, pc}
   8bc3a:	2101      	movs	r1, #1
   8bc3c:	4628      	mov	r0, r5
   8bc3e:	fa01 f504 	lsl.w	r5, r1, r4
   8bc42:	1d6a      	adds	r2, r5, #5
   8bc44:	0092      	lsls	r2, r2, #2
   8bc46:	f000 ff7f 	bl	8cb48 <_calloc_r>
   8bc4a:	2800      	cmp	r0, #0
   8bc4c:	d0f3      	beq.n	8bc36 <_Balloc+0x2e>
   8bc4e:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8bc52:	e7e4      	b.n	8bc1e <_Balloc+0x16>

0008bc54 <_Bfree>:
   8bc54:	b131      	cbz	r1, 8bc64 <_Bfree+0x10>
   8bc56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8bc58:	684a      	ldr	r2, [r1, #4]
   8bc5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8bc5e:	6008      	str	r0, [r1, #0]
   8bc60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8bc64:	4770      	bx	lr
   8bc66:	bf00      	nop

0008bc68 <__multadd>:
   8bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bc6c:	f04f 0e00 	mov.w	lr, #0
   8bc70:	460e      	mov	r6, r1
   8bc72:	461c      	mov	r4, r3
   8bc74:	690d      	ldr	r5, [r1, #16]
   8bc76:	4607      	mov	r7, r0
   8bc78:	f101 0014 	add.w	r0, r1, #20
   8bc7c:	6801      	ldr	r1, [r0, #0]
   8bc7e:	f10e 0e01 	add.w	lr, lr, #1
   8bc82:	b28b      	uxth	r3, r1
   8bc84:	fb02 4303 	mla	r3, r2, r3, r4
   8bc88:	0c09      	lsrs	r1, r1, #16
   8bc8a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8bc8e:	fb02 cc01 	mla	ip, r2, r1, ip
   8bc92:	b29b      	uxth	r3, r3
   8bc94:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8bc98:	4575      	cmp	r5, lr
   8bc9a:	f840 3b04 	str.w	r3, [r0], #4
   8bc9e:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8bca2:	dceb      	bgt.n	8bc7c <__multadd+0x14>
   8bca4:	b13c      	cbz	r4, 8bcb6 <__multadd+0x4e>
   8bca6:	68b3      	ldr	r3, [r6, #8]
   8bca8:	42ab      	cmp	r3, r5
   8bcaa:	dd07      	ble.n	8bcbc <__multadd+0x54>
   8bcac:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8bcb0:	3501      	adds	r5, #1
   8bcb2:	615c      	str	r4, [r3, #20]
   8bcb4:	6135      	str	r5, [r6, #16]
   8bcb6:	4630      	mov	r0, r6
   8bcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bcbc:	6871      	ldr	r1, [r6, #4]
   8bcbe:	4638      	mov	r0, r7
   8bcc0:	3101      	adds	r1, #1
   8bcc2:	f7ff ffa1 	bl	8bc08 <_Balloc>
   8bcc6:	4680      	mov	r8, r0
   8bcc8:	b1a8      	cbz	r0, 8bcf6 <__multadd+0x8e>
   8bcca:	6932      	ldr	r2, [r6, #16]
   8bccc:	f106 010c 	add.w	r1, r6, #12
   8bcd0:	3202      	adds	r2, #2
   8bcd2:	0092      	lsls	r2, r2, #2
   8bcd4:	300c      	adds	r0, #12
   8bcd6:	f7fb f845 	bl	86d64 <memcpy>
   8bcda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8bcdc:	6872      	ldr	r2, [r6, #4]
   8bcde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bce2:	6031      	str	r1, [r6, #0]
   8bce4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8bce8:	4646      	mov	r6, r8
   8bcea:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8bcee:	3501      	adds	r5, #1
   8bcf0:	615c      	str	r4, [r3, #20]
   8bcf2:	6135      	str	r5, [r6, #16]
   8bcf4:	e7df      	b.n	8bcb6 <__multadd+0x4e>
   8bcf6:	4602      	mov	r2, r0
   8bcf8:	21b5      	movs	r1, #181	; 0xb5
   8bcfa:	4b02      	ldr	r3, [pc, #8]	; (8bd04 <__multadd+0x9c>)
   8bcfc:	4802      	ldr	r0, [pc, #8]	; (8bd08 <__multadd+0xa0>)
   8bcfe:	f000 ff03 	bl	8cb08 <__assert_func>
   8bd02:	bf00      	nop
   8bd04:	0008d88c 	.word	0x0008d88c
   8bd08:	0008d930 	.word	0x0008d930

0008bd0c <__hi0bits>:
   8bd0c:	0c02      	lsrs	r2, r0, #16
   8bd0e:	0412      	lsls	r2, r2, #16
   8bd10:	4603      	mov	r3, r0
   8bd12:	b9ca      	cbnz	r2, 8bd48 <__hi0bits+0x3c>
   8bd14:	2010      	movs	r0, #16
   8bd16:	4083      	lsls	r3, r0
   8bd18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8bd1c:	bf04      	itt	eq
   8bd1e:	021b      	lsleq	r3, r3, #8
   8bd20:	3008      	addeq	r0, #8
   8bd22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8bd26:	bf04      	itt	eq
   8bd28:	011b      	lsleq	r3, r3, #4
   8bd2a:	3004      	addeq	r0, #4
   8bd2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8bd30:	bf04      	itt	eq
   8bd32:	009b      	lsleq	r3, r3, #2
   8bd34:	3002      	addeq	r0, #2
   8bd36:	2b00      	cmp	r3, #0
   8bd38:	db05      	blt.n	8bd46 <__hi0bits+0x3a>
   8bd3a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8bd3e:	f100 0001 	add.w	r0, r0, #1
   8bd42:	bf08      	it	eq
   8bd44:	2020      	moveq	r0, #32
   8bd46:	4770      	bx	lr
   8bd48:	2000      	movs	r0, #0
   8bd4a:	e7e5      	b.n	8bd18 <__hi0bits+0xc>

0008bd4c <__lo0bits>:
   8bd4c:	6803      	ldr	r3, [r0, #0]
   8bd4e:	4602      	mov	r2, r0
   8bd50:	f013 0007 	ands.w	r0, r3, #7
   8bd54:	d009      	beq.n	8bd6a <__lo0bits+0x1e>
   8bd56:	07d9      	lsls	r1, r3, #31
   8bd58:	d41f      	bmi.n	8bd9a <__lo0bits+0x4e>
   8bd5a:	0798      	lsls	r0, r3, #30
   8bd5c:	bf4b      	itete	mi
   8bd5e:	085b      	lsrmi	r3, r3, #1
   8bd60:	089b      	lsrpl	r3, r3, #2
   8bd62:	2001      	movmi	r0, #1
   8bd64:	2002      	movpl	r0, #2
   8bd66:	6013      	str	r3, [r2, #0]
   8bd68:	4770      	bx	lr
   8bd6a:	b299      	uxth	r1, r3
   8bd6c:	b909      	cbnz	r1, 8bd72 <__lo0bits+0x26>
   8bd6e:	2010      	movs	r0, #16
   8bd70:	40c3      	lsrs	r3, r0
   8bd72:	b2d9      	uxtb	r1, r3
   8bd74:	b909      	cbnz	r1, 8bd7a <__lo0bits+0x2e>
   8bd76:	3008      	adds	r0, #8
   8bd78:	0a1b      	lsrs	r3, r3, #8
   8bd7a:	0719      	lsls	r1, r3, #28
   8bd7c:	bf04      	itt	eq
   8bd7e:	091b      	lsreq	r3, r3, #4
   8bd80:	3004      	addeq	r0, #4
   8bd82:	0799      	lsls	r1, r3, #30
   8bd84:	bf04      	itt	eq
   8bd86:	089b      	lsreq	r3, r3, #2
   8bd88:	3002      	addeq	r0, #2
   8bd8a:	07d9      	lsls	r1, r3, #31
   8bd8c:	d403      	bmi.n	8bd96 <__lo0bits+0x4a>
   8bd8e:	085b      	lsrs	r3, r3, #1
   8bd90:	f100 0001 	add.w	r0, r0, #1
   8bd94:	d003      	beq.n	8bd9e <__lo0bits+0x52>
   8bd96:	6013      	str	r3, [r2, #0]
   8bd98:	4770      	bx	lr
   8bd9a:	2000      	movs	r0, #0
   8bd9c:	4770      	bx	lr
   8bd9e:	2020      	movs	r0, #32
   8bda0:	4770      	bx	lr
   8bda2:	bf00      	nop

0008bda4 <__i2b>:
   8bda4:	b538      	push	{r3, r4, r5, lr}
   8bda6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8bda8:	4604      	mov	r4, r0
   8bdaa:	460d      	mov	r5, r1
   8bdac:	b14b      	cbz	r3, 8bdc2 <__i2b+0x1e>
   8bdae:	6858      	ldr	r0, [r3, #4]
   8bdb0:	b1b0      	cbz	r0, 8bde0 <__i2b+0x3c>
   8bdb2:	6802      	ldr	r2, [r0, #0]
   8bdb4:	605a      	str	r2, [r3, #4]
   8bdb6:	2200      	movs	r2, #0
   8bdb8:	2301      	movs	r3, #1
   8bdba:	6145      	str	r5, [r0, #20]
   8bdbc:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8bdc0:	bd38      	pop	{r3, r4, r5, pc}
   8bdc2:	2221      	movs	r2, #33	; 0x21
   8bdc4:	2104      	movs	r1, #4
   8bdc6:	f000 febf 	bl	8cb48 <_calloc_r>
   8bdca:	4603      	mov	r3, r0
   8bdcc:	64e0      	str	r0, [r4, #76]	; 0x4c
   8bdce:	2800      	cmp	r0, #0
   8bdd0:	d1ed      	bne.n	8bdae <__i2b+0xa>
   8bdd2:	2200      	movs	r2, #0
   8bdd4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8bdd8:	4b07      	ldr	r3, [pc, #28]	; (8bdf8 <__i2b+0x54>)
   8bdda:	4808      	ldr	r0, [pc, #32]	; (8bdfc <__i2b+0x58>)
   8bddc:	f000 fe94 	bl	8cb08 <__assert_func>
   8bde0:	221c      	movs	r2, #28
   8bde2:	2101      	movs	r1, #1
   8bde4:	4620      	mov	r0, r4
   8bde6:	f000 feaf 	bl	8cb48 <_calloc_r>
   8bdea:	2800      	cmp	r0, #0
   8bdec:	d0f1      	beq.n	8bdd2 <__i2b+0x2e>
   8bdee:	2201      	movs	r2, #1
   8bdf0:	2302      	movs	r3, #2
   8bdf2:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8bdf6:	e7de      	b.n	8bdb6 <__i2b+0x12>
   8bdf8:	0008d88c 	.word	0x0008d88c
   8bdfc:	0008d930 	.word	0x0008d930

0008be00 <__multiply>:
   8be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8be04:	690e      	ldr	r6, [r1, #16]
   8be06:	6915      	ldr	r5, [r2, #16]
   8be08:	4688      	mov	r8, r1
   8be0a:	42ae      	cmp	r6, r5
   8be0c:	4614      	mov	r4, r2
   8be0e:	b085      	sub	sp, #20
   8be10:	db05      	blt.n	8be1e <__multiply+0x1e>
   8be12:	462a      	mov	r2, r5
   8be14:	4623      	mov	r3, r4
   8be16:	4635      	mov	r5, r6
   8be18:	460c      	mov	r4, r1
   8be1a:	4616      	mov	r6, r2
   8be1c:	4698      	mov	r8, r3
   8be1e:	68a3      	ldr	r3, [r4, #8]
   8be20:	6861      	ldr	r1, [r4, #4]
   8be22:	19af      	adds	r7, r5, r6
   8be24:	42bb      	cmp	r3, r7
   8be26:	bfb8      	it	lt
   8be28:	3101      	addlt	r1, #1
   8be2a:	f7ff feed 	bl	8bc08 <_Balloc>
   8be2e:	9001      	str	r0, [sp, #4]
   8be30:	2800      	cmp	r0, #0
   8be32:	f000 8087 	beq.w	8bf44 <__multiply+0x144>
   8be36:	9b01      	ldr	r3, [sp, #4]
   8be38:	f103 0914 	add.w	r9, r3, #20
   8be3c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8be40:	45d1      	cmp	r9, sl
   8be42:	d205      	bcs.n	8be50 <__multiply+0x50>
   8be44:	464b      	mov	r3, r9
   8be46:	2200      	movs	r2, #0
   8be48:	f843 2b04 	str.w	r2, [r3], #4
   8be4c:	459a      	cmp	sl, r3
   8be4e:	d8fb      	bhi.n	8be48 <__multiply+0x48>
   8be50:	f108 0814 	add.w	r8, r8, #20
   8be54:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8be58:	f104 0314 	add.w	r3, r4, #20
   8be5c:	45d8      	cmp	r8, fp
   8be5e:	461a      	mov	r2, r3
   8be60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8be64:	d25f      	bcs.n	8bf26 <__multiply+0x126>
   8be66:	1b2b      	subs	r3, r5, r4
   8be68:	3b15      	subs	r3, #21
   8be6a:	f023 0303 	bic.w	r3, r3, #3
   8be6e:	3304      	adds	r3, #4
   8be70:	3415      	adds	r4, #21
   8be72:	42a5      	cmp	r5, r4
   8be74:	bf38      	it	cc
   8be76:	2304      	movcc	r3, #4
   8be78:	e9cd a702 	strd	sl, r7, [sp, #8]
   8be7c:	46ac      	mov	ip, r5
   8be7e:	461f      	mov	r7, r3
   8be80:	4692      	mov	sl, r2
   8be82:	e005      	b.n	8be90 <__multiply+0x90>
   8be84:	0c00      	lsrs	r0, r0, #16
   8be86:	d129      	bne.n	8bedc <__multiply+0xdc>
   8be88:	45c3      	cmp	fp, r8
   8be8a:	f109 0904 	add.w	r9, r9, #4
   8be8e:	d948      	bls.n	8bf22 <__multiply+0x122>
   8be90:	f858 0b04 	ldr.w	r0, [r8], #4
   8be94:	b285      	uxth	r5, r0
   8be96:	2d00      	cmp	r5, #0
   8be98:	d0f4      	beq.n	8be84 <__multiply+0x84>
   8be9a:	4656      	mov	r6, sl
   8be9c:	464c      	mov	r4, r9
   8be9e:	2300      	movs	r3, #0
   8bea0:	f856 0b04 	ldr.w	r0, [r6], #4
   8bea4:	6821      	ldr	r1, [r4, #0]
   8bea6:	b282      	uxth	r2, r0
   8bea8:	fa1f fe81 	uxth.w	lr, r1
   8beac:	fb05 ee02 	mla	lr, r5, r2, lr
   8beb0:	0c00      	lsrs	r0, r0, #16
   8beb2:	0c0a      	lsrs	r2, r1, #16
   8beb4:	fb05 2200 	mla	r2, r5, r0, r2
   8beb8:	4473      	add	r3, lr
   8beba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8bebe:	b29b      	uxth	r3, r3
   8bec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8bec4:	45b4      	cmp	ip, r6
   8bec6:	f844 3b04 	str.w	r3, [r4], #4
   8beca:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8bece:	d8e7      	bhi.n	8bea0 <__multiply+0xa0>
   8bed0:	f849 3007 	str.w	r3, [r9, r7]
   8bed4:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8bed8:	0c00      	lsrs	r0, r0, #16
   8beda:	d0d5      	beq.n	8be88 <__multiply+0x88>
   8bedc:	f8d9 3000 	ldr.w	r3, [r9]
   8bee0:	4654      	mov	r4, sl
   8bee2:	4619      	mov	r1, r3
   8bee4:	464d      	mov	r5, r9
   8bee6:	2200      	movs	r2, #0
   8bee8:	8826      	ldrh	r6, [r4, #0]
   8beea:	0c09      	lsrs	r1, r1, #16
   8beec:	fb00 1106 	mla	r1, r0, r6, r1
   8bef0:	b29b      	uxth	r3, r3
   8bef2:	440a      	add	r2, r1
   8bef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8bef8:	f845 3b04 	str.w	r3, [r5], #4
   8befc:	f854 6b04 	ldr.w	r6, [r4], #4
   8bf00:	6829      	ldr	r1, [r5, #0]
   8bf02:	0c36      	lsrs	r6, r6, #16
   8bf04:	b28b      	uxth	r3, r1
   8bf06:	fb00 3306 	mla	r3, r0, r6, r3
   8bf0a:	45a4      	cmp	ip, r4
   8bf0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8bf10:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8bf14:	d8e8      	bhi.n	8bee8 <__multiply+0xe8>
   8bf16:	45c3      	cmp	fp, r8
   8bf18:	f849 3007 	str.w	r3, [r9, r7]
   8bf1c:	f109 0904 	add.w	r9, r9, #4
   8bf20:	d8b6      	bhi.n	8be90 <__multiply+0x90>
   8bf22:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8bf26:	2f00      	cmp	r7, #0
   8bf28:	dc02      	bgt.n	8bf30 <__multiply+0x130>
   8bf2a:	e005      	b.n	8bf38 <__multiply+0x138>
   8bf2c:	3f01      	subs	r7, #1
   8bf2e:	d003      	beq.n	8bf38 <__multiply+0x138>
   8bf30:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8bf34:	2b00      	cmp	r3, #0
   8bf36:	d0f9      	beq.n	8bf2c <__multiply+0x12c>
   8bf38:	9b01      	ldr	r3, [sp, #4]
   8bf3a:	4618      	mov	r0, r3
   8bf3c:	611f      	str	r7, [r3, #16]
   8bf3e:	b005      	add	sp, #20
   8bf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bf44:	4602      	mov	r2, r0
   8bf46:	f240 115d 	movw	r1, #349	; 0x15d
   8bf4a:	4b02      	ldr	r3, [pc, #8]	; (8bf54 <__multiply+0x154>)
   8bf4c:	4802      	ldr	r0, [pc, #8]	; (8bf58 <__multiply+0x158>)
   8bf4e:	f000 fddb 	bl	8cb08 <__assert_func>
   8bf52:	bf00      	nop
   8bf54:	0008d88c 	.word	0x0008d88c
   8bf58:	0008d930 	.word	0x0008d930

0008bf5c <__pow5mult>:
   8bf5c:	f012 0303 	ands.w	r3, r2, #3
   8bf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bf64:	4614      	mov	r4, r2
   8bf66:	4607      	mov	r7, r0
   8bf68:	d12e      	bne.n	8bfc8 <__pow5mult+0x6c>
   8bf6a:	460e      	mov	r6, r1
   8bf6c:	10a4      	asrs	r4, r4, #2
   8bf6e:	d01c      	beq.n	8bfaa <__pow5mult+0x4e>
   8bf70:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8bf72:	b395      	cbz	r5, 8bfda <__pow5mult+0x7e>
   8bf74:	07e3      	lsls	r3, r4, #31
   8bf76:	f04f 0800 	mov.w	r8, #0
   8bf7a:	d406      	bmi.n	8bf8a <__pow5mult+0x2e>
   8bf7c:	1064      	asrs	r4, r4, #1
   8bf7e:	d014      	beq.n	8bfaa <__pow5mult+0x4e>
   8bf80:	6828      	ldr	r0, [r5, #0]
   8bf82:	b1a8      	cbz	r0, 8bfb0 <__pow5mult+0x54>
   8bf84:	4605      	mov	r5, r0
   8bf86:	07e3      	lsls	r3, r4, #31
   8bf88:	d5f8      	bpl.n	8bf7c <__pow5mult+0x20>
   8bf8a:	462a      	mov	r2, r5
   8bf8c:	4631      	mov	r1, r6
   8bf8e:	4638      	mov	r0, r7
   8bf90:	f7ff ff36 	bl	8be00 <__multiply>
   8bf94:	b1b6      	cbz	r6, 8bfc4 <__pow5mult+0x68>
   8bf96:	6871      	ldr	r1, [r6, #4]
   8bf98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8bf9a:	1064      	asrs	r4, r4, #1
   8bf9c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8bfa0:	6032      	str	r2, [r6, #0]
   8bfa2:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8bfa6:	4606      	mov	r6, r0
   8bfa8:	d1ea      	bne.n	8bf80 <__pow5mult+0x24>
   8bfaa:	4630      	mov	r0, r6
   8bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bfb0:	462a      	mov	r2, r5
   8bfb2:	4629      	mov	r1, r5
   8bfb4:	4638      	mov	r0, r7
   8bfb6:	f7ff ff23 	bl	8be00 <__multiply>
   8bfba:	6028      	str	r0, [r5, #0]
   8bfbc:	4605      	mov	r5, r0
   8bfbe:	f8c0 8000 	str.w	r8, [r0]
   8bfc2:	e7e0      	b.n	8bf86 <__pow5mult+0x2a>
   8bfc4:	4606      	mov	r6, r0
   8bfc6:	e7d9      	b.n	8bf7c <__pow5mult+0x20>
   8bfc8:	4a0f      	ldr	r2, [pc, #60]	; (8c008 <__pow5mult+0xac>)
   8bfca:	3b01      	subs	r3, #1
   8bfcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8bfd0:	2300      	movs	r3, #0
   8bfd2:	f7ff fe49 	bl	8bc68 <__multadd>
   8bfd6:	4606      	mov	r6, r0
   8bfd8:	e7c8      	b.n	8bf6c <__pow5mult+0x10>
   8bfda:	2101      	movs	r1, #1
   8bfdc:	4638      	mov	r0, r7
   8bfde:	f7ff fe13 	bl	8bc08 <_Balloc>
   8bfe2:	4605      	mov	r5, r0
   8bfe4:	b140      	cbz	r0, 8bff8 <__pow5mult+0x9c>
   8bfe6:	f240 2371 	movw	r3, #625	; 0x271
   8bfea:	2201      	movs	r2, #1
   8bfec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8bff0:	2300      	movs	r3, #0
   8bff2:	64b8      	str	r0, [r7, #72]	; 0x48
   8bff4:	6003      	str	r3, [r0, #0]
   8bff6:	e7bd      	b.n	8bf74 <__pow5mult+0x18>
   8bff8:	4602      	mov	r2, r0
   8bffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8bffe:	4b03      	ldr	r3, [pc, #12]	; (8c00c <__pow5mult+0xb0>)
   8c000:	4803      	ldr	r0, [pc, #12]	; (8c010 <__pow5mult+0xb4>)
   8c002:	f000 fd81 	bl	8cb08 <__assert_func>
   8c006:	bf00      	nop
   8c008:	0008daa0 	.word	0x0008daa0
   8c00c:	0008d88c 	.word	0x0008d88c
   8c010:	0008d930 	.word	0x0008d930

0008c014 <__lshift>:
   8c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c018:	460c      	mov	r4, r1
   8c01a:	6926      	ldr	r6, [r4, #16]
   8c01c:	68a3      	ldr	r3, [r4, #8]
   8c01e:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8c022:	1c75      	adds	r5, r6, #1
   8c024:	429d      	cmp	r5, r3
   8c026:	4690      	mov	r8, r2
   8c028:	4607      	mov	r7, r0
   8c02a:	6849      	ldr	r1, [r1, #4]
   8c02c:	ea4f 1962 	mov.w	r9, r2, asr #5
   8c030:	dd04      	ble.n	8c03c <__lshift+0x28>
   8c032:	005b      	lsls	r3, r3, #1
   8c034:	429d      	cmp	r5, r3
   8c036:	f101 0101 	add.w	r1, r1, #1
   8c03a:	dcfa      	bgt.n	8c032 <__lshift+0x1e>
   8c03c:	4638      	mov	r0, r7
   8c03e:	f7ff fde3 	bl	8bc08 <_Balloc>
   8c042:	2800      	cmp	r0, #0
   8c044:	d051      	beq.n	8c0ea <__lshift+0xd6>
   8c046:	f1b9 0f00 	cmp.w	r9, #0
   8c04a:	f100 0114 	add.w	r1, r0, #20
   8c04e:	dd0f      	ble.n	8c070 <__lshift+0x5c>
   8c050:	460b      	mov	r3, r1
   8c052:	f04f 0c00 	mov.w	ip, #0
   8c056:	f109 0205 	add.w	r2, r9, #5
   8c05a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8c05e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8c062:	f843 cb04 	str.w	ip, [r3], #4
   8c066:	4293      	cmp	r3, r2
   8c068:	d1fb      	bne.n	8c062 <__lshift+0x4e>
   8c06a:	f1ae 0314 	sub.w	r3, lr, #20
   8c06e:	4419      	add	r1, r3
   8c070:	6922      	ldr	r2, [r4, #16]
   8c072:	f104 0314 	add.w	r3, r4, #20
   8c076:	f018 081f 	ands.w	r8, r8, #31
   8c07a:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8c07e:	d02c      	beq.n	8c0da <__lshift+0xc6>
   8c080:	468e      	mov	lr, r1
   8c082:	f04f 0a00 	mov.w	sl, #0
   8c086:	f1c8 0920 	rsb	r9, r8, #32
   8c08a:	681a      	ldr	r2, [r3, #0]
   8c08c:	fa02 f208 	lsl.w	r2, r2, r8
   8c090:	ea42 020a 	orr.w	r2, r2, sl
   8c094:	f84e 2b04 	str.w	r2, [lr], #4
   8c098:	f853 2b04 	ldr.w	r2, [r3], #4
   8c09c:	459c      	cmp	ip, r3
   8c09e:	fa22 fa09 	lsr.w	sl, r2, r9
   8c0a2:	d8f2      	bhi.n	8c08a <__lshift+0x76>
   8c0a4:	ebac 0304 	sub.w	r3, ip, r4
   8c0a8:	3b15      	subs	r3, #21
   8c0aa:	f023 0303 	bic.w	r3, r3, #3
   8c0ae:	3304      	adds	r3, #4
   8c0b0:	f104 0215 	add.w	r2, r4, #21
   8c0b4:	4594      	cmp	ip, r2
   8c0b6:	bf38      	it	cc
   8c0b8:	2304      	movcc	r3, #4
   8c0ba:	f1ba 0f00 	cmp.w	sl, #0
   8c0be:	bf18      	it	ne
   8c0c0:	462e      	movne	r6, r5
   8c0c2:	f841 a003 	str.w	sl, [r1, r3]
   8c0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c0c8:	6862      	ldr	r2, [r4, #4]
   8c0ca:	6106      	str	r6, [r0, #16]
   8c0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c0d0:	6021      	str	r1, [r4, #0]
   8c0d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c0da:	3904      	subs	r1, #4
   8c0dc:	f853 2b04 	ldr.w	r2, [r3], #4
   8c0e0:	459c      	cmp	ip, r3
   8c0e2:	f841 2f04 	str.w	r2, [r1, #4]!
   8c0e6:	d8f9      	bhi.n	8c0dc <__lshift+0xc8>
   8c0e8:	e7ed      	b.n	8c0c6 <__lshift+0xb2>
   8c0ea:	4602      	mov	r2, r0
   8c0ec:	f240 11d9 	movw	r1, #473	; 0x1d9
   8c0f0:	4b01      	ldr	r3, [pc, #4]	; (8c0f8 <__lshift+0xe4>)
   8c0f2:	4802      	ldr	r0, [pc, #8]	; (8c0fc <__lshift+0xe8>)
   8c0f4:	f000 fd08 	bl	8cb08 <__assert_func>
   8c0f8:	0008d88c 	.word	0x0008d88c
   8c0fc:	0008d930 	.word	0x0008d930

0008c100 <__mcmp>:
   8c100:	4684      	mov	ip, r0
   8c102:	690b      	ldr	r3, [r1, #16]
   8c104:	6900      	ldr	r0, [r0, #16]
   8c106:	1ac0      	subs	r0, r0, r3
   8c108:	d115      	bne.n	8c136 <__mcmp+0x36>
   8c10a:	f10c 0c14 	add.w	ip, ip, #20
   8c10e:	3114      	adds	r1, #20
   8c110:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8c114:	b410      	push	{r4}
   8c116:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8c11a:	e001      	b.n	8c120 <__mcmp+0x20>
   8c11c:	4594      	cmp	ip, r2
   8c11e:	d208      	bcs.n	8c132 <__mcmp+0x32>
   8c120:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8c124:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8c128:	428c      	cmp	r4, r1
   8c12a:	d0f7      	beq.n	8c11c <__mcmp+0x1c>
   8c12c:	d204      	bcs.n	8c138 <__mcmp+0x38>
   8c12e:	f04f 30ff 	mov.w	r0, #4294967295
   8c132:	bc10      	pop	{r4}
   8c134:	4770      	bx	lr
   8c136:	4770      	bx	lr
   8c138:	2001      	movs	r0, #1
   8c13a:	bc10      	pop	{r4}
   8c13c:	4770      	bx	lr
   8c13e:	bf00      	nop

0008c140 <__mdiff>:
   8c140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c144:	690c      	ldr	r4, [r1, #16]
   8c146:	6913      	ldr	r3, [r2, #16]
   8c148:	4689      	mov	r9, r1
   8c14a:	1ae4      	subs	r4, r4, r3
   8c14c:	2c00      	cmp	r4, #0
   8c14e:	4617      	mov	r7, r2
   8c150:	d17d      	bne.n	8c24e <__mdiff+0x10e>
   8c152:	f101 0614 	add.w	r6, r1, #20
   8c156:	3214      	adds	r2, #20
   8c158:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8c15c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8c160:	e001      	b.n	8c166 <__mdiff+0x26>
   8c162:	429e      	cmp	r6, r3
   8c164:	d276      	bcs.n	8c254 <__mdiff+0x114>
   8c166:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c16a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c16e:	428d      	cmp	r5, r1
   8c170:	d0f7      	beq.n	8c162 <__mdiff+0x22>
   8c172:	d367      	bcc.n	8c244 <__mdiff+0x104>
   8c174:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8c178:	f7ff fd46 	bl	8bc08 <_Balloc>
   8c17c:	2800      	cmp	r0, #0
   8c17e:	d073      	beq.n	8c268 <__mdiff+0x128>
   8c180:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8c184:	60c4      	str	r4, [r0, #12]
   8c186:	f100 0414 	add.w	r4, r0, #20
   8c18a:	4626      	mov	r6, r4
   8c18c:	f04f 0a00 	mov.w	sl, #0
   8c190:	693b      	ldr	r3, [r7, #16]
   8c192:	f109 0814 	add.w	r8, r9, #20
   8c196:	f107 0e14 	add.w	lr, r7, #20
   8c19a:	f109 0c10 	add.w	ip, r9, #16
   8c19e:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8c1a2:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8c1a6:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8c1aa:	f85e 1b04 	ldr.w	r1, [lr], #4
   8c1ae:	fa1f f38b 	uxth.w	r3, fp
   8c1b2:	4453      	add	r3, sl
   8c1b4:	fa1f fa81 	uxth.w	sl, r1
   8c1b8:	0c09      	lsrs	r1, r1, #16
   8c1ba:	eba3 030a 	sub.w	r3, r3, sl
   8c1be:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8c1c2:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8c1c6:	b29b      	uxth	r3, r3
   8c1c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8c1cc:	45f1      	cmp	r9, lr
   8c1ce:	f846 3b04 	str.w	r3, [r6], #4
   8c1d2:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8c1d6:	d8e6      	bhi.n	8c1a6 <__mdiff+0x66>
   8c1d8:	eba9 0107 	sub.w	r1, r9, r7
   8c1dc:	3915      	subs	r1, #21
   8c1de:	3715      	adds	r7, #21
   8c1e0:	45b9      	cmp	r9, r7
   8c1e2:	f021 0603 	bic.w	r6, r1, #3
   8c1e6:	f106 0604 	add.w	r6, r6, #4
   8c1ea:	bf38      	it	cc
   8c1ec:	2604      	movcc	r6, #4
   8c1ee:	f021 0103 	bic.w	r1, r1, #3
   8c1f2:	bf38      	it	cc
   8c1f4:	2100      	movcc	r1, #0
   8c1f6:	44b0      	add	r8, r6
   8c1f8:	4542      	cmp	r2, r8
   8c1fa:	4426      	add	r6, r4
   8c1fc:	440c      	add	r4, r1
   8c1fe:	d918      	bls.n	8c232 <__mdiff+0xf2>
   8c200:	4637      	mov	r7, r6
   8c202:	4644      	mov	r4, r8
   8c204:	f854 1b04 	ldr.w	r1, [r4], #4
   8c208:	b28b      	uxth	r3, r1
   8c20a:	4453      	add	r3, sl
   8c20c:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8c210:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8c214:	b29b      	uxth	r3, r3
   8c216:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8c21a:	42a2      	cmp	r2, r4
   8c21c:	f847 3b04 	str.w	r3, [r7], #4
   8c220:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8c224:	d8ee      	bhi.n	8c204 <__mdiff+0xc4>
   8c226:	1e54      	subs	r4, r2, #1
   8c228:	eba4 0408 	sub.w	r4, r4, r8
   8c22c:	f024 0403 	bic.w	r4, r4, #3
   8c230:	4434      	add	r4, r6
   8c232:	b923      	cbnz	r3, 8c23e <__mdiff+0xfe>
   8c234:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8c238:	3d01      	subs	r5, #1
   8c23a:	2b00      	cmp	r3, #0
   8c23c:	d0fa      	beq.n	8c234 <__mdiff+0xf4>
   8c23e:	6105      	str	r5, [r0, #16]
   8c240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c244:	464b      	mov	r3, r9
   8c246:	2401      	movs	r4, #1
   8c248:	46b9      	mov	r9, r7
   8c24a:	461f      	mov	r7, r3
   8c24c:	e792      	b.n	8c174 <__mdiff+0x34>
   8c24e:	dbf9      	blt.n	8c244 <__mdiff+0x104>
   8c250:	2400      	movs	r4, #0
   8c252:	e78f      	b.n	8c174 <__mdiff+0x34>
   8c254:	2100      	movs	r1, #0
   8c256:	f7ff fcd7 	bl	8bc08 <_Balloc>
   8c25a:	b160      	cbz	r0, 8c276 <__mdiff+0x136>
   8c25c:	2201      	movs	r2, #1
   8c25e:	2300      	movs	r3, #0
   8c260:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8c264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c268:	4602      	mov	r2, r0
   8c26a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8c26e:	4b05      	ldr	r3, [pc, #20]	; (8c284 <__mdiff+0x144>)
   8c270:	4805      	ldr	r0, [pc, #20]	; (8c288 <__mdiff+0x148>)
   8c272:	f000 fc49 	bl	8cb08 <__assert_func>
   8c276:	4602      	mov	r2, r0
   8c278:	f240 2132 	movw	r1, #562	; 0x232
   8c27c:	4b01      	ldr	r3, [pc, #4]	; (8c284 <__mdiff+0x144>)
   8c27e:	4802      	ldr	r0, [pc, #8]	; (8c288 <__mdiff+0x148>)
   8c280:	f000 fc42 	bl	8cb08 <__assert_func>
   8c284:	0008d88c 	.word	0x0008d88c
   8c288:	0008d930 	.word	0x0008d930

0008c28c <__d2b>:
   8c28c:	b570      	push	{r4, r5, r6, lr}
   8c28e:	2101      	movs	r1, #1
   8c290:	b082      	sub	sp, #8
   8c292:	4616      	mov	r6, r2
   8c294:	461d      	mov	r5, r3
   8c296:	f7ff fcb7 	bl	8bc08 <_Balloc>
   8c29a:	4604      	mov	r4, r0
   8c29c:	2800      	cmp	r0, #0
   8c29e:	d04c      	beq.n	8c33a <__d2b+0xae>
   8c2a0:	462b      	mov	r3, r5
   8c2a2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8c2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8c2aa:	b10d      	cbz	r5, 8c2b0 <__d2b+0x24>
   8c2ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c2b0:	2e00      	cmp	r6, #0
   8c2b2:	9301      	str	r3, [sp, #4]
   8c2b4:	d022      	beq.n	8c2fc <__d2b+0x70>
   8c2b6:	4668      	mov	r0, sp
   8c2b8:	9600      	str	r6, [sp, #0]
   8c2ba:	f7ff fd47 	bl	8bd4c <__lo0bits>
   8c2be:	2800      	cmp	r0, #0
   8c2c0:	d037      	beq.n	8c332 <__d2b+0xa6>
   8c2c2:	9b01      	ldr	r3, [sp, #4]
   8c2c4:	9900      	ldr	r1, [sp, #0]
   8c2c6:	f1c0 0220 	rsb	r2, r0, #32
   8c2ca:	fa03 f202 	lsl.w	r2, r3, r2
   8c2ce:	430a      	orrs	r2, r1
   8c2d0:	40c3      	lsrs	r3, r0
   8c2d2:	9301      	str	r3, [sp, #4]
   8c2d4:	6162      	str	r2, [r4, #20]
   8c2d6:	2b00      	cmp	r3, #0
   8c2d8:	bf14      	ite	ne
   8c2da:	2102      	movne	r1, #2
   8c2dc:	2101      	moveq	r1, #1
   8c2de:	61a3      	str	r3, [r4, #24]
   8c2e0:	6121      	str	r1, [r4, #16]
   8c2e2:	b1b5      	cbz	r5, 8c312 <__d2b+0x86>
   8c2e4:	9b06      	ldr	r3, [sp, #24]
   8c2e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8c2ea:	4405      	add	r5, r0
   8c2ec:	601d      	str	r5, [r3, #0]
   8c2ee:	9b07      	ldr	r3, [sp, #28]
   8c2f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c2f4:	6018      	str	r0, [r3, #0]
   8c2f6:	4620      	mov	r0, r4
   8c2f8:	b002      	add	sp, #8
   8c2fa:	bd70      	pop	{r4, r5, r6, pc}
   8c2fc:	a801      	add	r0, sp, #4
   8c2fe:	f7ff fd25 	bl	8bd4c <__lo0bits>
   8c302:	2301      	movs	r3, #1
   8c304:	9a01      	ldr	r2, [sp, #4]
   8c306:	4619      	mov	r1, r3
   8c308:	6162      	str	r2, [r4, #20]
   8c30a:	3020      	adds	r0, #32
   8c30c:	6123      	str	r3, [r4, #16]
   8c30e:	2d00      	cmp	r5, #0
   8c310:	d1e8      	bne.n	8c2e4 <__d2b+0x58>
   8c312:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8c316:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8c31a:	6910      	ldr	r0, [r2, #16]
   8c31c:	9a06      	ldr	r2, [sp, #24]
   8c31e:	6013      	str	r3, [r2, #0]
   8c320:	f7ff fcf4 	bl	8bd0c <__hi0bits>
   8c324:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8c328:	4620      	mov	r0, r4
   8c32a:	9b07      	ldr	r3, [sp, #28]
   8c32c:	6019      	str	r1, [r3, #0]
   8c32e:	b002      	add	sp, #8
   8c330:	bd70      	pop	{r4, r5, r6, pc}
   8c332:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c336:	6162      	str	r2, [r4, #20]
   8c338:	e7cd      	b.n	8c2d6 <__d2b+0x4a>
   8c33a:	4602      	mov	r2, r0
   8c33c:	f240 310a 	movw	r1, #778	; 0x30a
   8c340:	4b01      	ldr	r3, [pc, #4]	; (8c348 <__d2b+0xbc>)
   8c342:	4802      	ldr	r0, [pc, #8]	; (8c34c <__d2b+0xc0>)
   8c344:	f000 fbe0 	bl	8cb08 <__assert_func>
   8c348:	0008d88c 	.word	0x0008d88c
   8c34c:	0008d930 	.word	0x0008d930

0008c350 <_realloc_r>:
   8c350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c354:	4616      	mov	r6, r2
   8c356:	2900      	cmp	r1, #0
   8c358:	f000 8098 	beq.w	8c48c <_realloc_r+0x13c>
   8c35c:	f106 050b 	add.w	r5, r6, #11
   8c360:	4680      	mov	r8, r0
   8c362:	460c      	mov	r4, r1
   8c364:	f7ff fc44 	bl	8bbf0 <__malloc_lock>
   8c368:	2d16      	cmp	r5, #22
   8c36a:	d85d      	bhi.n	8c428 <_realloc_r+0xd8>
   8c36c:	2510      	movs	r5, #16
   8c36e:	462a      	mov	r2, r5
   8c370:	42ae      	cmp	r6, r5
   8c372:	d85e      	bhi.n	8c432 <_realloc_r+0xe2>
   8c374:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8c378:	f1a4 0908 	sub.w	r9, r4, #8
   8c37c:	f021 0703 	bic.w	r7, r1, #3
   8c380:	4297      	cmp	r7, r2
   8c382:	da62      	bge.n	8c44a <_realloc_r+0xfa>
   8c384:	4bbc      	ldr	r3, [pc, #752]	; (8c678 <_realloc_r+0x328>)
   8c386:	eb09 0007 	add.w	r0, r9, r7
   8c38a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8c38e:	4584      	cmp	ip, r0
   8c390:	f000 8097 	beq.w	8c4c2 <_realloc_r+0x172>
   8c394:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8c398:	f02c 0301 	bic.w	r3, ip, #1
   8c39c:	4403      	add	r3, r0
   8c39e:	685b      	ldr	r3, [r3, #4]
   8c3a0:	07db      	lsls	r3, r3, #31
   8c3a2:	d468      	bmi.n	8c476 <_realloc_r+0x126>
   8c3a4:	f02c 0c03 	bic.w	ip, ip, #3
   8c3a8:	eb07 030c 	add.w	r3, r7, ip
   8c3ac:	4293      	cmp	r3, r2
   8c3ae:	da47      	bge.n	8c440 <_realloc_r+0xf0>
   8c3b0:	07cb      	lsls	r3, r1, #31
   8c3b2:	d410      	bmi.n	8c3d6 <_realloc_r+0x86>
   8c3b4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c3b8:	eba9 0a03 	sub.w	sl, r9, r3
   8c3bc:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c3c0:	f023 0103 	bic.w	r1, r3, #3
   8c3c4:	448c      	add	ip, r1
   8c3c6:	44bc      	add	ip, r7
   8c3c8:	4594      	cmp	ip, r2
   8c3ca:	f280 8111 	bge.w	8c5f0 <_realloc_r+0x2a0>
   8c3ce:	187b      	adds	r3, r7, r1
   8c3d0:	4293      	cmp	r3, r2
   8c3d2:	f280 80e8 	bge.w	8c5a6 <_realloc_r+0x256>
   8c3d6:	4631      	mov	r1, r6
   8c3d8:	4640      	mov	r0, r8
   8c3da:	f7ff f883 	bl	8b4e4 <_malloc_r>
   8c3de:	4606      	mov	r6, r0
   8c3e0:	b1e0      	cbz	r0, 8c41c <_realloc_r+0xcc>
   8c3e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c3e6:	f1a0 0208 	sub.w	r2, r0, #8
   8c3ea:	f023 0301 	bic.w	r3, r3, #1
   8c3ee:	444b      	add	r3, r9
   8c3f0:	4293      	cmp	r3, r2
   8c3f2:	f000 80d2 	beq.w	8c59a <_realloc_r+0x24a>
   8c3f6:	1f3a      	subs	r2, r7, #4
   8c3f8:	2a24      	cmp	r2, #36	; 0x24
   8c3fa:	f200 80f5 	bhi.w	8c5e8 <_realloc_r+0x298>
   8c3fe:	2a13      	cmp	r2, #19
   8c400:	f200 80ac 	bhi.w	8c55c <_realloc_r+0x20c>
   8c404:	4603      	mov	r3, r0
   8c406:	4622      	mov	r2, r4
   8c408:	6811      	ldr	r1, [r2, #0]
   8c40a:	6019      	str	r1, [r3, #0]
   8c40c:	6851      	ldr	r1, [r2, #4]
   8c40e:	6059      	str	r1, [r3, #4]
   8c410:	6892      	ldr	r2, [r2, #8]
   8c412:	609a      	str	r2, [r3, #8]
   8c414:	4621      	mov	r1, r4
   8c416:	4640      	mov	r0, r8
   8c418:	f7fe fd46 	bl	8aea8 <_free_r>
   8c41c:	4640      	mov	r0, r8
   8c41e:	f7ff fbed 	bl	8bbfc <__malloc_unlock>
   8c422:	4630      	mov	r0, r6
   8c424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c428:	f025 0507 	bic.w	r5, r5, #7
   8c42c:	2d00      	cmp	r5, #0
   8c42e:	462a      	mov	r2, r5
   8c430:	da9e      	bge.n	8c370 <_realloc_r+0x20>
   8c432:	230c      	movs	r3, #12
   8c434:	2600      	movs	r6, #0
   8c436:	f8c8 3000 	str.w	r3, [r8]
   8c43a:	4630      	mov	r0, r6
   8c43c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c440:	461f      	mov	r7, r3
   8c442:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8c446:	60d3      	str	r3, [r2, #12]
   8c448:	609a      	str	r2, [r3, #8]
   8c44a:	1b7b      	subs	r3, r7, r5
   8c44c:	2b0f      	cmp	r3, #15
   8c44e:	d822      	bhi.n	8c496 <_realloc_r+0x146>
   8c450:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8c454:	f003 0301 	and.w	r3, r3, #1
   8c458:	433b      	orrs	r3, r7
   8c45a:	f8c9 3004 	str.w	r3, [r9, #4]
   8c45e:	444f      	add	r7, r9
   8c460:	687b      	ldr	r3, [r7, #4]
   8c462:	f043 0301 	orr.w	r3, r3, #1
   8c466:	607b      	str	r3, [r7, #4]
   8c468:	4626      	mov	r6, r4
   8c46a:	4640      	mov	r0, r8
   8c46c:	f7ff fbc6 	bl	8bbfc <__malloc_unlock>
   8c470:	4630      	mov	r0, r6
   8c472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c476:	07c9      	lsls	r1, r1, #31
   8c478:	d4ad      	bmi.n	8c3d6 <_realloc_r+0x86>
   8c47a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c47e:	eba9 0a03 	sub.w	sl, r9, r3
   8c482:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c486:	f021 0103 	bic.w	r1, r1, #3
   8c48a:	e7a0      	b.n	8c3ce <_realloc_r+0x7e>
   8c48c:	4611      	mov	r1, r2
   8c48e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c492:	f7ff b827 	b.w	8b4e4 <_malloc_r>
   8c496:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8c49a:	f043 0301 	orr.w	r3, r3, #1
   8c49e:	f001 0101 	and.w	r1, r1, #1
   8c4a2:	4329      	orrs	r1, r5
   8c4a4:	f8c9 1004 	str.w	r1, [r9, #4]
   8c4a8:	eb09 0105 	add.w	r1, r9, r5
   8c4ac:	604b      	str	r3, [r1, #4]
   8c4ae:	444f      	add	r7, r9
   8c4b0:	687b      	ldr	r3, [r7, #4]
   8c4b2:	4640      	mov	r0, r8
   8c4b4:	f043 0301 	orr.w	r3, r3, #1
   8c4b8:	3108      	adds	r1, #8
   8c4ba:	607b      	str	r3, [r7, #4]
   8c4bc:	f7fe fcf4 	bl	8aea8 <_free_r>
   8c4c0:	e7d2      	b.n	8c468 <_realloc_r+0x118>
   8c4c2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8c4c6:	f020 0b03 	bic.w	fp, r0, #3
   8c4ca:	eb07 0c0b 	add.w	ip, r7, fp
   8c4ce:	f105 0010 	add.w	r0, r5, #16
   8c4d2:	4584      	cmp	ip, r0
   8c4d4:	da4d      	bge.n	8c572 <_realloc_r+0x222>
   8c4d6:	07c9      	lsls	r1, r1, #31
   8c4d8:	f53f af7d 	bmi.w	8c3d6 <_realloc_r+0x86>
   8c4dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c4e0:	eba9 0a01 	sub.w	sl, r9, r1
   8c4e4:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c4e8:	f021 0103 	bic.w	r1, r1, #3
   8c4ec:	448b      	add	fp, r1
   8c4ee:	44bb      	add	fp, r7
   8c4f0:	4558      	cmp	r0, fp
   8c4f2:	f73f af6c 	bgt.w	8c3ce <_realloc_r+0x7e>
   8c4f6:	4656      	mov	r6, sl
   8c4f8:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c4fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c500:	1f3a      	subs	r2, r7, #4
   8c502:	2a24      	cmp	r2, #36	; 0x24
   8c504:	60c1      	str	r1, [r0, #12]
   8c506:	6088      	str	r0, [r1, #8]
   8c508:	f200 80db 	bhi.w	8c6c2 <_realloc_r+0x372>
   8c50c:	2a13      	cmp	r2, #19
   8c50e:	f240 80d6 	bls.w	8c6be <_realloc_r+0x36e>
   8c512:	6821      	ldr	r1, [r4, #0]
   8c514:	2a1b      	cmp	r2, #27
   8c516:	f8ca 1008 	str.w	r1, [sl, #8]
   8c51a:	6861      	ldr	r1, [r4, #4]
   8c51c:	f8ca 100c 	str.w	r1, [sl, #12]
   8c520:	f200 80e0 	bhi.w	8c6e4 <_realloc_r+0x394>
   8c524:	3408      	adds	r4, #8
   8c526:	f10a 0210 	add.w	r2, sl, #16
   8c52a:	6821      	ldr	r1, [r4, #0]
   8c52c:	6011      	str	r1, [r2, #0]
   8c52e:	6861      	ldr	r1, [r4, #4]
   8c530:	6051      	str	r1, [r2, #4]
   8c532:	68a1      	ldr	r1, [r4, #8]
   8c534:	6091      	str	r1, [r2, #8]
   8c536:	ebab 0205 	sub.w	r2, fp, r5
   8c53a:	eb0a 0105 	add.w	r1, sl, r5
   8c53e:	f042 0201 	orr.w	r2, r2, #1
   8c542:	6099      	str	r1, [r3, #8]
   8c544:	604a      	str	r2, [r1, #4]
   8c546:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c54a:	4640      	mov	r0, r8
   8c54c:	f003 0301 	and.w	r3, r3, #1
   8c550:	431d      	orrs	r5, r3
   8c552:	f8ca 5004 	str.w	r5, [sl, #4]
   8c556:	f7ff fb51 	bl	8bbfc <__malloc_unlock>
   8c55a:	e76e      	b.n	8c43a <_realloc_r+0xea>
   8c55c:	6823      	ldr	r3, [r4, #0]
   8c55e:	2a1b      	cmp	r2, #27
   8c560:	6003      	str	r3, [r0, #0]
   8c562:	6863      	ldr	r3, [r4, #4]
   8c564:	6043      	str	r3, [r0, #4]
   8c566:	d868      	bhi.n	8c63a <_realloc_r+0x2ea>
   8c568:	f104 0208 	add.w	r2, r4, #8
   8c56c:	f100 0308 	add.w	r3, r0, #8
   8c570:	e74a      	b.n	8c408 <_realloc_r+0xb8>
   8c572:	eb09 0205 	add.w	r2, r9, r5
   8c576:	ebac 0c05 	sub.w	ip, ip, r5
   8c57a:	609a      	str	r2, [r3, #8]
   8c57c:	f04c 0301 	orr.w	r3, ip, #1
   8c580:	6053      	str	r3, [r2, #4]
   8c582:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c586:	4640      	mov	r0, r8
   8c588:	f003 0301 	and.w	r3, r3, #1
   8c58c:	431d      	orrs	r5, r3
   8c58e:	f844 5c04 	str.w	r5, [r4, #-4]
   8c592:	f7ff fb33 	bl	8bbfc <__malloc_unlock>
   8c596:	4626      	mov	r6, r4
   8c598:	e74f      	b.n	8c43a <_realloc_r+0xea>
   8c59a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c59e:	f023 0303 	bic.w	r3, r3, #3
   8c5a2:	441f      	add	r7, r3
   8c5a4:	e751      	b.n	8c44a <_realloc_r+0xfa>
   8c5a6:	4656      	mov	r6, sl
   8c5a8:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c5ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c5b0:	1f3a      	subs	r2, r7, #4
   8c5b2:	2a24      	cmp	r2, #36	; 0x24
   8c5b4:	60c1      	str	r1, [r0, #12]
   8c5b6:	6088      	str	r0, [r1, #8]
   8c5b8:	d84c      	bhi.n	8c654 <_realloc_r+0x304>
   8c5ba:	2a13      	cmp	r2, #19
   8c5bc:	d948      	bls.n	8c650 <_realloc_r+0x300>
   8c5be:	6821      	ldr	r1, [r4, #0]
   8c5c0:	2a1b      	cmp	r2, #27
   8c5c2:	f8ca 1008 	str.w	r1, [sl, #8]
   8c5c6:	6861      	ldr	r1, [r4, #4]
   8c5c8:	f8ca 100c 	str.w	r1, [sl, #12]
   8c5cc:	d856      	bhi.n	8c67c <_realloc_r+0x32c>
   8c5ce:	3408      	adds	r4, #8
   8c5d0:	f10a 0210 	add.w	r2, sl, #16
   8c5d4:	461f      	mov	r7, r3
   8c5d6:	6823      	ldr	r3, [r4, #0]
   8c5d8:	46d1      	mov	r9, sl
   8c5da:	6013      	str	r3, [r2, #0]
   8c5dc:	6863      	ldr	r3, [r4, #4]
   8c5de:	6053      	str	r3, [r2, #4]
   8c5e0:	68a3      	ldr	r3, [r4, #8]
   8c5e2:	4634      	mov	r4, r6
   8c5e4:	6093      	str	r3, [r2, #8]
   8c5e6:	e730      	b.n	8c44a <_realloc_r+0xfa>
   8c5e8:	4621      	mov	r1, r4
   8c5ea:	f7ff fa85 	bl	8baf8 <memmove>
   8c5ee:	e711      	b.n	8c414 <_realloc_r+0xc4>
   8c5f0:	4656      	mov	r6, sl
   8c5f2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8c5f6:	60cb      	str	r3, [r1, #12]
   8c5f8:	6099      	str	r1, [r3, #8]
   8c5fa:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8c5fe:	f8da 300c 	ldr.w	r3, [sl, #12]
   8c602:	1f3a      	subs	r2, r7, #4
   8c604:	2a24      	cmp	r2, #36	; 0x24
   8c606:	60cb      	str	r3, [r1, #12]
   8c608:	6099      	str	r1, [r3, #8]
   8c60a:	d82d      	bhi.n	8c668 <_realloc_r+0x318>
   8c60c:	2a13      	cmp	r2, #19
   8c60e:	d929      	bls.n	8c664 <_realloc_r+0x314>
   8c610:	6823      	ldr	r3, [r4, #0]
   8c612:	2a1b      	cmp	r2, #27
   8c614:	f8ca 3008 	str.w	r3, [sl, #8]
   8c618:	6863      	ldr	r3, [r4, #4]
   8c61a:	f8ca 300c 	str.w	r3, [sl, #12]
   8c61e:	d842      	bhi.n	8c6a6 <_realloc_r+0x356>
   8c620:	3408      	adds	r4, #8
   8c622:	f10a 0310 	add.w	r3, sl, #16
   8c626:	6822      	ldr	r2, [r4, #0]
   8c628:	4667      	mov	r7, ip
   8c62a:	601a      	str	r2, [r3, #0]
   8c62c:	6862      	ldr	r2, [r4, #4]
   8c62e:	46d1      	mov	r9, sl
   8c630:	605a      	str	r2, [r3, #4]
   8c632:	68a2      	ldr	r2, [r4, #8]
   8c634:	4634      	mov	r4, r6
   8c636:	609a      	str	r2, [r3, #8]
   8c638:	e707      	b.n	8c44a <_realloc_r+0xfa>
   8c63a:	68a3      	ldr	r3, [r4, #8]
   8c63c:	2a24      	cmp	r2, #36	; 0x24
   8c63e:	6083      	str	r3, [r0, #8]
   8c640:	68e3      	ldr	r3, [r4, #12]
   8c642:	60c3      	str	r3, [r0, #12]
   8c644:	d026      	beq.n	8c694 <_realloc_r+0x344>
   8c646:	f104 0210 	add.w	r2, r4, #16
   8c64a:	f100 0310 	add.w	r3, r0, #16
   8c64e:	e6db      	b.n	8c408 <_realloc_r+0xb8>
   8c650:	4632      	mov	r2, r6
   8c652:	e7bf      	b.n	8c5d4 <_realloc_r+0x284>
   8c654:	4621      	mov	r1, r4
   8c656:	4630      	mov	r0, r6
   8c658:	461f      	mov	r7, r3
   8c65a:	46d1      	mov	r9, sl
   8c65c:	f7ff fa4c 	bl	8baf8 <memmove>
   8c660:	4634      	mov	r4, r6
   8c662:	e6f2      	b.n	8c44a <_realloc_r+0xfa>
   8c664:	4633      	mov	r3, r6
   8c666:	e7de      	b.n	8c626 <_realloc_r+0x2d6>
   8c668:	4621      	mov	r1, r4
   8c66a:	4630      	mov	r0, r6
   8c66c:	4667      	mov	r7, ip
   8c66e:	46d1      	mov	r9, sl
   8c670:	f7ff fa42 	bl	8baf8 <memmove>
   8c674:	4634      	mov	r4, r6
   8c676:	e6e8      	b.n	8c44a <_realloc_r+0xfa>
   8c678:	20001110 	.word	0x20001110
   8c67c:	68a1      	ldr	r1, [r4, #8]
   8c67e:	2a24      	cmp	r2, #36	; 0x24
   8c680:	f8ca 1010 	str.w	r1, [sl, #16]
   8c684:	68e1      	ldr	r1, [r4, #12]
   8c686:	f8ca 1014 	str.w	r1, [sl, #20]
   8c68a:	d020      	beq.n	8c6ce <_realloc_r+0x37e>
   8c68c:	3410      	adds	r4, #16
   8c68e:	f10a 0218 	add.w	r2, sl, #24
   8c692:	e79f      	b.n	8c5d4 <_realloc_r+0x284>
   8c694:	6923      	ldr	r3, [r4, #16]
   8c696:	f104 0218 	add.w	r2, r4, #24
   8c69a:	6103      	str	r3, [r0, #16]
   8c69c:	6963      	ldr	r3, [r4, #20]
   8c69e:	6143      	str	r3, [r0, #20]
   8c6a0:	f100 0318 	add.w	r3, r0, #24
   8c6a4:	e6b0      	b.n	8c408 <_realloc_r+0xb8>
   8c6a6:	68a3      	ldr	r3, [r4, #8]
   8c6a8:	2a24      	cmp	r2, #36	; 0x24
   8c6aa:	f8ca 3010 	str.w	r3, [sl, #16]
   8c6ae:	68e3      	ldr	r3, [r4, #12]
   8c6b0:	f8ca 3014 	str.w	r3, [sl, #20]
   8c6b4:	d022      	beq.n	8c6fc <_realloc_r+0x3ac>
   8c6b6:	3410      	adds	r4, #16
   8c6b8:	f10a 0318 	add.w	r3, sl, #24
   8c6bc:	e7b3      	b.n	8c626 <_realloc_r+0x2d6>
   8c6be:	4632      	mov	r2, r6
   8c6c0:	e733      	b.n	8c52a <_realloc_r+0x1da>
   8c6c2:	4621      	mov	r1, r4
   8c6c4:	4630      	mov	r0, r6
   8c6c6:	f7ff fa17 	bl	8baf8 <memmove>
   8c6ca:	4b17      	ldr	r3, [pc, #92]	; (8c728 <_realloc_r+0x3d8>)
   8c6cc:	e733      	b.n	8c536 <_realloc_r+0x1e6>
   8c6ce:	6922      	ldr	r2, [r4, #16]
   8c6d0:	3418      	adds	r4, #24
   8c6d2:	f8ca 2018 	str.w	r2, [sl, #24]
   8c6d6:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8c6da:	f8ca 201c 	str.w	r2, [sl, #28]
   8c6de:	f10a 0220 	add.w	r2, sl, #32
   8c6e2:	e777      	b.n	8c5d4 <_realloc_r+0x284>
   8c6e4:	68a1      	ldr	r1, [r4, #8]
   8c6e6:	2a24      	cmp	r2, #36	; 0x24
   8c6e8:	f8ca 1010 	str.w	r1, [sl, #16]
   8c6ec:	68e1      	ldr	r1, [r4, #12]
   8c6ee:	f8ca 1014 	str.w	r1, [sl, #20]
   8c6f2:	d00e      	beq.n	8c712 <_realloc_r+0x3c2>
   8c6f4:	3410      	adds	r4, #16
   8c6f6:	f10a 0218 	add.w	r2, sl, #24
   8c6fa:	e716      	b.n	8c52a <_realloc_r+0x1da>
   8c6fc:	6923      	ldr	r3, [r4, #16]
   8c6fe:	3418      	adds	r4, #24
   8c700:	f8ca 3018 	str.w	r3, [sl, #24]
   8c704:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c708:	f8ca 301c 	str.w	r3, [sl, #28]
   8c70c:	f10a 0320 	add.w	r3, sl, #32
   8c710:	e789      	b.n	8c626 <_realloc_r+0x2d6>
   8c712:	6922      	ldr	r2, [r4, #16]
   8c714:	3418      	adds	r4, #24
   8c716:	f8ca 2018 	str.w	r2, [sl, #24]
   8c71a:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8c71e:	f8ca 201c 	str.w	r2, [sl, #28]
   8c722:	f10a 0220 	add.w	r2, sl, #32
   8c726:	e700      	b.n	8c52a <_realloc_r+0x1da>
   8c728:	20001110 	.word	0x20001110

0008c72c <frexp>:
   8c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c72e:	2700      	movs	r7, #0
   8c730:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8c790 <frexp+0x64>
   8c734:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c738:	4563      	cmp	r3, ip
   8c73a:	4604      	mov	r4, r0
   8c73c:	460d      	mov	r5, r1
   8c73e:	6017      	str	r7, [r2, #0]
   8c740:	dc23      	bgt.n	8c78a <frexp+0x5e>
   8c742:	4684      	mov	ip, r0
   8c744:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c748:	d01f      	beq.n	8c78a <frexp+0x5e>
   8c74a:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c794 <frexp+0x68>
   8c74e:	4616      	mov	r6, r2
   8c750:	ea01 0c0c 	and.w	ip, r1, ip
   8c754:	460a      	mov	r2, r1
   8c756:	f1bc 0f00 	cmp.w	ip, #0
   8c75a:	d109      	bne.n	8c770 <frexp+0x44>
   8c75c:	2200      	movs	r2, #0
   8c75e:	4b0e      	ldr	r3, [pc, #56]	; (8c798 <frexp+0x6c>)
   8c760:	f000 fd1a 	bl	8d198 <__aeabi_dmul>
   8c764:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8c768:	4604      	mov	r4, r0
   8c76a:	460a      	mov	r2, r1
   8c76c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c770:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8c774:	151b      	asrs	r3, r3, #20
   8c776:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8c77a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c77e:	443b      	add	r3, r7
   8c780:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8c784:	6033      	str	r3, [r6, #0]
   8c786:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c78a:	4620      	mov	r0, r4
   8c78c:	4629      	mov	r1, r5
   8c78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c790:	7fefffff 	.word	0x7fefffff
   8c794:	7ff00000 	.word	0x7ff00000
   8c798:	43500000 	.word	0x43500000

0008c79c <_sbrk_r>:
   8c79c:	2200      	movs	r2, #0
   8c79e:	b538      	push	{r3, r4, r5, lr}
   8c7a0:	4d06      	ldr	r5, [pc, #24]	; (8c7bc <_sbrk_r+0x20>)
   8c7a2:	4604      	mov	r4, r0
   8c7a4:	4608      	mov	r0, r1
   8c7a6:	602a      	str	r2, [r5, #0]
   8c7a8:	f7f9 fbce 	bl	85f48 <_sbrk>
   8c7ac:	1c43      	adds	r3, r0, #1
   8c7ae:	d000      	beq.n	8c7b2 <_sbrk_r+0x16>
   8c7b0:	bd38      	pop	{r3, r4, r5, pc}
   8c7b2:	682b      	ldr	r3, [r5, #0]
   8c7b4:	2b00      	cmp	r3, #0
   8c7b6:	d0fb      	beq.n	8c7b0 <_sbrk_r+0x14>
   8c7b8:	6023      	str	r3, [r4, #0]
   8c7ba:	bd38      	pop	{r3, r4, r5, pc}
   8c7bc:	200028d0 	.word	0x200028d0

0008c7c0 <__sread>:
   8c7c0:	b510      	push	{r4, lr}
   8c7c2:	460c      	mov	r4, r1
   8c7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c7c8:	f000 fac8 	bl	8cd5c <_read_r>
   8c7cc:	2800      	cmp	r0, #0
   8c7ce:	db03      	blt.n	8c7d8 <__sread+0x18>
   8c7d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c7d2:	4403      	add	r3, r0
   8c7d4:	6523      	str	r3, [r4, #80]	; 0x50
   8c7d6:	bd10      	pop	{r4, pc}
   8c7d8:	89a3      	ldrh	r3, [r4, #12]
   8c7da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c7de:	81a3      	strh	r3, [r4, #12]
   8c7e0:	bd10      	pop	{r4, pc}
   8c7e2:	bf00      	nop

0008c7e4 <__swrite>:
   8c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c7e8:	460c      	mov	r4, r1
   8c7ea:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c7ee:	461f      	mov	r7, r3
   8c7f0:	05cb      	lsls	r3, r1, #23
   8c7f2:	4605      	mov	r5, r0
   8c7f4:	4616      	mov	r6, r2
   8c7f6:	d40b      	bmi.n	8c810 <__swrite+0x2c>
   8c7f8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c7fc:	81a1      	strh	r1, [r4, #12]
   8c7fe:	463b      	mov	r3, r7
   8c800:	4632      	mov	r2, r6
   8c802:	4628      	mov	r0, r5
   8c804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c80c:	f000 b920 	b.w	8ca50 <_write_r>
   8c810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c814:	2302      	movs	r3, #2
   8c816:	2200      	movs	r2, #0
   8c818:	f000 fa8a 	bl	8cd30 <_lseek_r>
   8c81c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c820:	e7ea      	b.n	8c7f8 <__swrite+0x14>
   8c822:	bf00      	nop

0008c824 <__sseek>:
   8c824:	b510      	push	{r4, lr}
   8c826:	460c      	mov	r4, r1
   8c828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c82c:	f000 fa80 	bl	8cd30 <_lseek_r>
   8c830:	89a3      	ldrh	r3, [r4, #12]
   8c832:	1c42      	adds	r2, r0, #1
   8c834:	bf0e      	itee	eq
   8c836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c83e:	6520      	strne	r0, [r4, #80]	; 0x50
   8c840:	81a3      	strh	r3, [r4, #12]
   8c842:	bd10      	pop	{r4, pc}

0008c844 <__sclose>:
   8c844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c848:	f000 b9ba 	b.w	8cbc0 <_close_r>

0008c84c <__ssprint_r>:
   8c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c850:	6893      	ldr	r3, [r2, #8]
   8c852:	4691      	mov	r9, r2
   8c854:	b083      	sub	sp, #12
   8c856:	2b00      	cmp	r3, #0
   8c858:	d06e      	beq.n	8c938 <__ssprint_r+0xec>
   8c85a:	6817      	ldr	r7, [r2, #0]
   8c85c:	4680      	mov	r8, r0
   8c85e:	460c      	mov	r4, r1
   8c860:	6808      	ldr	r0, [r1, #0]
   8c862:	688d      	ldr	r5, [r1, #8]
   8c864:	3708      	adds	r7, #8
   8c866:	e044      	b.n	8c8f2 <__ssprint_r+0xa6>
   8c868:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8c86c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8c870:	d02e      	beq.n	8c8d0 <__ssprint_r+0x84>
   8c872:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8c876:	1a45      	subs	r5, r0, r1
   8c878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8c87c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8c880:	19aa      	adds	r2, r5, r6
   8c882:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8c886:	1c53      	adds	r3, r2, #1
   8c888:	4553      	cmp	r3, sl
   8c88a:	4652      	mov	r2, sl
   8c88c:	bf84      	itt	hi
   8c88e:	469a      	movhi	sl, r3
   8c890:	4652      	movhi	r2, sl
   8c892:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8c896:	d036      	beq.n	8c906 <__ssprint_r+0xba>
   8c898:	4611      	mov	r1, r2
   8c89a:	4640      	mov	r0, r8
   8c89c:	f7fe fe22 	bl	8b4e4 <_malloc_r>
   8c8a0:	2800      	cmp	r0, #0
   8c8a2:	d03a      	beq.n	8c91a <__ssprint_r+0xce>
   8c8a4:	462a      	mov	r2, r5
   8c8a6:	6921      	ldr	r1, [r4, #16]
   8c8a8:	9001      	str	r0, [sp, #4]
   8c8aa:	f7fa fa5b 	bl	86d64 <memcpy>
   8c8ae:	89a2      	ldrh	r2, [r4, #12]
   8c8b0:	9b01      	ldr	r3, [sp, #4]
   8c8b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c8b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c8ba:	81a2      	strh	r2, [r4, #12]
   8c8bc:	1958      	adds	r0, r3, r5
   8c8be:	ebaa 0505 	sub.w	r5, sl, r5
   8c8c2:	60a5      	str	r5, [r4, #8]
   8c8c4:	f8c4 a014 	str.w	sl, [r4, #20]
   8c8c8:	4635      	mov	r5, r6
   8c8ca:	46b2      	mov	sl, r6
   8c8cc:	6123      	str	r3, [r4, #16]
   8c8ce:	6020      	str	r0, [r4, #0]
   8c8d0:	4659      	mov	r1, fp
   8c8d2:	4652      	mov	r2, sl
   8c8d4:	f7ff f910 	bl	8baf8 <memmove>
   8c8d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c8dc:	68a1      	ldr	r1, [r4, #8]
   8c8de:	6820      	ldr	r0, [r4, #0]
   8c8e0:	1b4d      	subs	r5, r1, r5
   8c8e2:	4450      	add	r0, sl
   8c8e4:	1b9e      	subs	r6, r3, r6
   8c8e6:	60a5      	str	r5, [r4, #8]
   8c8e8:	6020      	str	r0, [r4, #0]
   8c8ea:	f8c9 6008 	str.w	r6, [r9, #8]
   8c8ee:	b31e      	cbz	r6, 8c938 <__ssprint_r+0xec>
   8c8f0:	3708      	adds	r7, #8
   8c8f2:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c8f6:	2e00      	cmp	r6, #0
   8c8f8:	d0fa      	beq.n	8c8f0 <__ssprint_r+0xa4>
   8c8fa:	42b5      	cmp	r5, r6
   8c8fc:	46aa      	mov	sl, r5
   8c8fe:	d9b3      	bls.n	8c868 <__ssprint_r+0x1c>
   8c900:	4635      	mov	r5, r6
   8c902:	46b2      	mov	sl, r6
   8c904:	e7e4      	b.n	8c8d0 <__ssprint_r+0x84>
   8c906:	4640      	mov	r0, r8
   8c908:	f7ff fd22 	bl	8c350 <_realloc_r>
   8c90c:	4603      	mov	r3, r0
   8c90e:	2800      	cmp	r0, #0
   8c910:	d1d4      	bne.n	8c8bc <__ssprint_r+0x70>
   8c912:	4640      	mov	r0, r8
   8c914:	6921      	ldr	r1, [r4, #16]
   8c916:	f7fe fac7 	bl	8aea8 <_free_r>
   8c91a:	230c      	movs	r3, #12
   8c91c:	2200      	movs	r2, #0
   8c91e:	f04f 30ff 	mov.w	r0, #4294967295
   8c922:	f8c8 3000 	str.w	r3, [r8]
   8c926:	89a3      	ldrh	r3, [r4, #12]
   8c928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c92c:	81a3      	strh	r3, [r4, #12]
   8c92e:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c932:	b003      	add	sp, #12
   8c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c938:	2300      	movs	r3, #0
   8c93a:	4618      	mov	r0, r3
   8c93c:	f8c9 3004 	str.w	r3, [r9, #4]
   8c940:	b003      	add	sp, #12
   8c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c946:	bf00      	nop

0008c948 <__swbuf_r>:
   8c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c94a:	4606      	mov	r6, r0
   8c94c:	460d      	mov	r5, r1
   8c94e:	4614      	mov	r4, r2
   8c950:	b110      	cbz	r0, 8c958 <__swbuf_r+0x10>
   8c952:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c954:	2b00      	cmp	r3, #0
   8c956:	d043      	beq.n	8c9e0 <__swbuf_r+0x98>
   8c958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c95c:	69a3      	ldr	r3, [r4, #24]
   8c95e:	0710      	lsls	r0, r2, #28
   8c960:	60a3      	str	r3, [r4, #8]
   8c962:	b291      	uxth	r1, r2
   8c964:	d51b      	bpl.n	8c99e <__swbuf_r+0x56>
   8c966:	6923      	ldr	r3, [r4, #16]
   8c968:	b1cb      	cbz	r3, 8c99e <__swbuf_r+0x56>
   8c96a:	b2ed      	uxtb	r5, r5
   8c96c:	0489      	lsls	r1, r1, #18
   8c96e:	462f      	mov	r7, r5
   8c970:	d522      	bpl.n	8c9b8 <__swbuf_r+0x70>
   8c972:	6822      	ldr	r2, [r4, #0]
   8c974:	6961      	ldr	r1, [r4, #20]
   8c976:	1ad3      	subs	r3, r2, r3
   8c978:	4299      	cmp	r1, r3
   8c97a:	dd29      	ble.n	8c9d0 <__swbuf_r+0x88>
   8c97c:	3301      	adds	r3, #1
   8c97e:	68a1      	ldr	r1, [r4, #8]
   8c980:	3901      	subs	r1, #1
   8c982:	60a1      	str	r1, [r4, #8]
   8c984:	1c51      	adds	r1, r2, #1
   8c986:	6021      	str	r1, [r4, #0]
   8c988:	7015      	strb	r5, [r2, #0]
   8c98a:	6962      	ldr	r2, [r4, #20]
   8c98c:	429a      	cmp	r2, r3
   8c98e:	d02a      	beq.n	8c9e6 <__swbuf_r+0x9e>
   8c990:	89a3      	ldrh	r3, [r4, #12]
   8c992:	07db      	lsls	r3, r3, #31
   8c994:	d501      	bpl.n	8c99a <__swbuf_r+0x52>
   8c996:	2d0a      	cmp	r5, #10
   8c998:	d025      	beq.n	8c9e6 <__swbuf_r+0x9e>
   8c99a:	4638      	mov	r0, r7
   8c99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c99e:	4621      	mov	r1, r4
   8c9a0:	4630      	mov	r0, r6
   8c9a2:	f7fc ffc7 	bl	89934 <__swsetup_r>
   8c9a6:	bb20      	cbnz	r0, 8c9f2 <__swbuf_r+0xaa>
   8c9a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c9ac:	b2ed      	uxtb	r5, r5
   8c9ae:	b291      	uxth	r1, r2
   8c9b0:	0489      	lsls	r1, r1, #18
   8c9b2:	462f      	mov	r7, r5
   8c9b4:	6923      	ldr	r3, [r4, #16]
   8c9b6:	d4dc      	bmi.n	8c972 <__swbuf_r+0x2a>
   8c9b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c9bc:	81a2      	strh	r2, [r4, #12]
   8c9be:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8c9c0:	6961      	ldr	r1, [r4, #20]
   8c9c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8c9c6:	6662      	str	r2, [r4, #100]	; 0x64
   8c9c8:	6822      	ldr	r2, [r4, #0]
   8c9ca:	1ad3      	subs	r3, r2, r3
   8c9cc:	4299      	cmp	r1, r3
   8c9ce:	dcd5      	bgt.n	8c97c <__swbuf_r+0x34>
   8c9d0:	4621      	mov	r1, r4
   8c9d2:	4630      	mov	r0, r6
   8c9d4:	f7fe f8b8 	bl	8ab48 <_fflush_r>
   8c9d8:	b958      	cbnz	r0, 8c9f2 <__swbuf_r+0xaa>
   8c9da:	2301      	movs	r3, #1
   8c9dc:	6822      	ldr	r2, [r4, #0]
   8c9de:	e7ce      	b.n	8c97e <__swbuf_r+0x36>
   8c9e0:	f7fe f8e6 	bl	8abb0 <__sinit>
   8c9e4:	e7b8      	b.n	8c958 <__swbuf_r+0x10>
   8c9e6:	4621      	mov	r1, r4
   8c9e8:	4630      	mov	r0, r6
   8c9ea:	f7fe f8ad 	bl	8ab48 <_fflush_r>
   8c9ee:	2800      	cmp	r0, #0
   8c9f0:	d0d3      	beq.n	8c99a <__swbuf_r+0x52>
   8c9f2:	f04f 37ff 	mov.w	r7, #4294967295
   8c9f6:	e7d0      	b.n	8c99a <__swbuf_r+0x52>

0008c9f8 <_wcrtomb_r>:
   8c9f8:	b570      	push	{r4, r5, r6, lr}
   8c9fa:	4605      	mov	r5, r0
   8c9fc:	461c      	mov	r4, r3
   8c9fe:	b084      	sub	sp, #16
   8ca00:	b139      	cbz	r1, 8ca12 <_wcrtomb_r+0x1a>
   8ca02:	4e0b      	ldr	r6, [pc, #44]	; (8ca30 <_wcrtomb_r+0x38>)
   8ca04:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8ca08:	47b0      	blx	r6
   8ca0a:	1c43      	adds	r3, r0, #1
   8ca0c:	d009      	beq.n	8ca22 <_wcrtomb_r+0x2a>
   8ca0e:	b004      	add	sp, #16
   8ca10:	bd70      	pop	{r4, r5, r6, pc}
   8ca12:	460a      	mov	r2, r1
   8ca14:	4906      	ldr	r1, [pc, #24]	; (8ca30 <_wcrtomb_r+0x38>)
   8ca16:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8ca1a:	a901      	add	r1, sp, #4
   8ca1c:	47b0      	blx	r6
   8ca1e:	1c43      	adds	r3, r0, #1
   8ca20:	d1f5      	bne.n	8ca0e <_wcrtomb_r+0x16>
   8ca22:	2200      	movs	r2, #0
   8ca24:	238a      	movs	r3, #138	; 0x8a
   8ca26:	6022      	str	r2, [r4, #0]
   8ca28:	602b      	str	r3, [r5, #0]
   8ca2a:	b004      	add	sp, #16
   8ca2c:	bd70      	pop	{r4, r5, r6, pc}
   8ca2e:	bf00      	nop
   8ca30:	20000fa4 	.word	0x20000fa4

0008ca34 <__ascii_wctomb>:
   8ca34:	4603      	mov	r3, r0
   8ca36:	b149      	cbz	r1, 8ca4c <__ascii_wctomb+0x18>
   8ca38:	2aff      	cmp	r2, #255	; 0xff
   8ca3a:	d802      	bhi.n	8ca42 <__ascii_wctomb+0xe>
   8ca3c:	2001      	movs	r0, #1
   8ca3e:	700a      	strb	r2, [r1, #0]
   8ca40:	4770      	bx	lr
   8ca42:	228a      	movs	r2, #138	; 0x8a
   8ca44:	f04f 30ff 	mov.w	r0, #4294967295
   8ca48:	601a      	str	r2, [r3, #0]
   8ca4a:	4770      	bx	lr
   8ca4c:	4608      	mov	r0, r1
   8ca4e:	4770      	bx	lr

0008ca50 <_write_r>:
   8ca50:	b538      	push	{r3, r4, r5, lr}
   8ca52:	460c      	mov	r4, r1
   8ca54:	4611      	mov	r1, r2
   8ca56:	2200      	movs	r2, #0
   8ca58:	4684      	mov	ip, r0
   8ca5a:	4d07      	ldr	r5, [pc, #28]	; (8ca78 <_write_r+0x28>)
   8ca5c:	4620      	mov	r0, r4
   8ca5e:	602a      	str	r2, [r5, #0]
   8ca60:	461a      	mov	r2, r3
   8ca62:	4664      	mov	r4, ip
   8ca64:	f7f8 fe8e 	bl	85784 <_write>
   8ca68:	1c43      	adds	r3, r0, #1
   8ca6a:	d000      	beq.n	8ca6e <_write_r+0x1e>
   8ca6c:	bd38      	pop	{r3, r4, r5, pc}
   8ca6e:	682b      	ldr	r3, [r5, #0]
   8ca70:	2b00      	cmp	r3, #0
   8ca72:	d0fb      	beq.n	8ca6c <_write_r+0x1c>
   8ca74:	6023      	str	r3, [r4, #0]
   8ca76:	bd38      	pop	{r3, r4, r5, pc}
   8ca78:	200028d0 	.word	0x200028d0

0008ca7c <__register_exitproc>:
   8ca7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ca80:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8cb00 <__register_exitproc+0x84>
   8ca84:	4606      	mov	r6, r0
   8ca86:	f8da 0000 	ldr.w	r0, [sl]
   8ca8a:	4698      	mov	r8, r3
   8ca8c:	460f      	mov	r7, r1
   8ca8e:	4691      	mov	r9, r2
   8ca90:	f7fe fcb4 	bl	8b3fc <__retarget_lock_acquire_recursive>
   8ca94:	4b1b      	ldr	r3, [pc, #108]	; (8cb04 <__register_exitproc+0x88>)
   8ca96:	681b      	ldr	r3, [r3, #0]
   8ca98:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8ca9c:	b324      	cbz	r4, 8cae8 <__register_exitproc+0x6c>
   8ca9e:	6865      	ldr	r5, [r4, #4]
   8caa0:	2d1f      	cmp	r5, #31
   8caa2:	dc26      	bgt.n	8caf2 <__register_exitproc+0x76>
   8caa4:	b95e      	cbnz	r6, 8cabe <__register_exitproc+0x42>
   8caa6:	1c6b      	adds	r3, r5, #1
   8caa8:	3502      	adds	r5, #2
   8caaa:	f8da 0000 	ldr.w	r0, [sl]
   8caae:	6063      	str	r3, [r4, #4]
   8cab0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8cab4:	f7fe fca4 	bl	8b400 <__retarget_lock_release_recursive>
   8cab8:	2000      	movs	r0, #0
   8caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cabe:	2301      	movs	r3, #1
   8cac0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8cac4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8cac8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8cacc:	40ab      	lsls	r3, r5
   8cace:	431a      	orrs	r2, r3
   8cad0:	2e02      	cmp	r6, #2
   8cad2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8cad6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8cada:	d1e4      	bne.n	8caa6 <__register_exitproc+0x2a>
   8cadc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8cae0:	4313      	orrs	r3, r2
   8cae2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8cae6:	e7de      	b.n	8caa6 <__register_exitproc+0x2a>
   8cae8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8caec:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8caf0:	e7d5      	b.n	8ca9e <__register_exitproc+0x22>
   8caf2:	f8da 0000 	ldr.w	r0, [sl]
   8caf6:	f7fe fc83 	bl	8b400 <__retarget_lock_release_recursive>
   8cafa:	f04f 30ff 	mov.w	r0, #4294967295
   8cafe:	e7dc      	b.n	8caba <__register_exitproc+0x3e>
   8cb00:	20000fa0 	.word	0x20000fa0
   8cb04:	0008d7f4 	.word	0x0008d7f4

0008cb08 <__assert_func>:
   8cb08:	4614      	mov	r4, r2
   8cb0a:	b500      	push	{lr}
   8cb0c:	461a      	mov	r2, r3
   8cb0e:	4b0a      	ldr	r3, [pc, #40]	; (8cb38 <__assert_func+0x30>)
   8cb10:	460d      	mov	r5, r1
   8cb12:	681b      	ldr	r3, [r3, #0]
   8cb14:	b085      	sub	sp, #20
   8cb16:	68de      	ldr	r6, [r3, #12]
   8cb18:	4603      	mov	r3, r0
   8cb1a:	b14c      	cbz	r4, 8cb30 <__assert_func+0x28>
   8cb1c:	4907      	ldr	r1, [pc, #28]	; (8cb3c <__assert_func+0x34>)
   8cb1e:	9101      	str	r1, [sp, #4]
   8cb20:	4630      	mov	r0, r6
   8cb22:	4907      	ldr	r1, [pc, #28]	; (8cb40 <__assert_func+0x38>)
   8cb24:	9402      	str	r4, [sp, #8]
   8cb26:	9500      	str	r5, [sp, #0]
   8cb28:	f000 f8c8 	bl	8ccbc <fiprintf>
   8cb2c:	f000 f92c 	bl	8cd88 <abort>
   8cb30:	4904      	ldr	r1, [pc, #16]	; (8cb44 <__assert_func+0x3c>)
   8cb32:	460c      	mov	r4, r1
   8cb34:	e7f3      	b.n	8cb1e <__assert_func+0x16>
   8cb36:	bf00      	nop
   8cb38:	20000b70 	.word	0x20000b70
   8cb3c:	0008daac 	.word	0x0008daac
   8cb40:	0008dabc 	.word	0x0008dabc
   8cb44:	0008d7f0 	.word	0x0008d7f0

0008cb48 <_calloc_r>:
   8cb48:	b538      	push	{r3, r4, r5, lr}
   8cb4a:	fba1 1402 	umull	r1, r4, r1, r2
   8cb4e:	bb84      	cbnz	r4, 8cbb2 <_calloc_r+0x6a>
   8cb50:	f7fe fcc8 	bl	8b4e4 <_malloc_r>
   8cb54:	4605      	mov	r5, r0
   8cb56:	b1d8      	cbz	r0, 8cb90 <_calloc_r+0x48>
   8cb58:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cb5c:	f022 0203 	bic.w	r2, r2, #3
   8cb60:	3a04      	subs	r2, #4
   8cb62:	2a24      	cmp	r2, #36	; 0x24
   8cb64:	d816      	bhi.n	8cb94 <_calloc_r+0x4c>
   8cb66:	2a13      	cmp	r2, #19
   8cb68:	d919      	bls.n	8cb9e <_calloc_r+0x56>
   8cb6a:	2a1b      	cmp	r2, #27
   8cb6c:	e9c0 4400 	strd	r4, r4, [r0]
   8cb70:	d91c      	bls.n	8cbac <_calloc_r+0x64>
   8cb72:	2300      	movs	r3, #0
   8cb74:	2a24      	cmp	r2, #36	; 0x24
   8cb76:	bf14      	ite	ne
   8cb78:	f100 0210 	addne.w	r2, r0, #16
   8cb7c:	f100 0218 	addeq.w	r2, r0, #24
   8cb80:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8cb84:	bf04      	itt	eq
   8cb86:	6104      	streq	r4, [r0, #16]
   8cb88:	6144      	streq	r4, [r0, #20]
   8cb8a:	e9c2 3300 	strd	r3, r3, [r2]
   8cb8e:	6093      	str	r3, [r2, #8]
   8cb90:	4628      	mov	r0, r5
   8cb92:	bd38      	pop	{r3, r4, r5, pc}
   8cb94:	4621      	mov	r1, r4
   8cb96:	f7fa f95b 	bl	86e50 <memset>
   8cb9a:	4628      	mov	r0, r5
   8cb9c:	bd38      	pop	{r3, r4, r5, pc}
   8cb9e:	4602      	mov	r2, r0
   8cba0:	2300      	movs	r3, #0
   8cba2:	4628      	mov	r0, r5
   8cba4:	e9c2 3300 	strd	r3, r3, [r2]
   8cba8:	6093      	str	r3, [r2, #8]
   8cbaa:	bd38      	pop	{r3, r4, r5, pc}
   8cbac:	f100 0208 	add.w	r2, r0, #8
   8cbb0:	e7f6      	b.n	8cba0 <_calloc_r+0x58>
   8cbb2:	f000 f817 	bl	8cbe4 <__errno>
   8cbb6:	230c      	movs	r3, #12
   8cbb8:	2500      	movs	r5, #0
   8cbba:	6003      	str	r3, [r0, #0]
   8cbbc:	e7e8      	b.n	8cb90 <_calloc_r+0x48>
   8cbbe:	bf00      	nop

0008cbc0 <_close_r>:
   8cbc0:	2200      	movs	r2, #0
   8cbc2:	b538      	push	{r3, r4, r5, lr}
   8cbc4:	4d06      	ldr	r5, [pc, #24]	; (8cbe0 <_close_r+0x20>)
   8cbc6:	4604      	mov	r4, r0
   8cbc8:	4608      	mov	r0, r1
   8cbca:	602a      	str	r2, [r5, #0]
   8cbcc:	f7f9 f9dc 	bl	85f88 <_close>
   8cbd0:	1c43      	adds	r3, r0, #1
   8cbd2:	d000      	beq.n	8cbd6 <_close_r+0x16>
   8cbd4:	bd38      	pop	{r3, r4, r5, pc}
   8cbd6:	682b      	ldr	r3, [r5, #0]
   8cbd8:	2b00      	cmp	r3, #0
   8cbda:	d0fb      	beq.n	8cbd4 <_close_r+0x14>
   8cbdc:	6023      	str	r3, [r4, #0]
   8cbde:	bd38      	pop	{r3, r4, r5, pc}
   8cbe0:	200028d0 	.word	0x200028d0

0008cbe4 <__errno>:
   8cbe4:	4b01      	ldr	r3, [pc, #4]	; (8cbec <__errno+0x8>)
   8cbe6:	6818      	ldr	r0, [r3, #0]
   8cbe8:	4770      	bx	lr
   8cbea:	bf00      	nop
   8cbec:	20000b70 	.word	0x20000b70

0008cbf0 <_fclose_r>:
   8cbf0:	b570      	push	{r4, r5, r6, lr}
   8cbf2:	2900      	cmp	r1, #0
   8cbf4:	d04b      	beq.n	8cc8e <_fclose_r+0x9e>
   8cbf6:	4606      	mov	r6, r0
   8cbf8:	460c      	mov	r4, r1
   8cbfa:	b110      	cbz	r0, 8cc02 <_fclose_r+0x12>
   8cbfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cbfe:	2b00      	cmp	r3, #0
   8cc00:	d048      	beq.n	8cc94 <_fclose_r+0xa4>
   8cc02:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cc04:	07d8      	lsls	r0, r3, #31
   8cc06:	d534      	bpl.n	8cc72 <_fclose_r+0x82>
   8cc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cc0c:	2b00      	cmp	r3, #0
   8cc0e:	d03e      	beq.n	8cc8e <_fclose_r+0x9e>
   8cc10:	4621      	mov	r1, r4
   8cc12:	4630      	mov	r0, r6
   8cc14:	f7fd ff06 	bl	8aa24 <__sflush_r>
   8cc18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8cc1a:	4605      	mov	r5, r0
   8cc1c:	b133      	cbz	r3, 8cc2c <_fclose_r+0x3c>
   8cc1e:	4630      	mov	r0, r6
   8cc20:	69e1      	ldr	r1, [r4, #28]
   8cc22:	4798      	blx	r3
   8cc24:	2800      	cmp	r0, #0
   8cc26:	bfb8      	it	lt
   8cc28:	f04f 35ff 	movlt.w	r5, #4294967295
   8cc2c:	89a3      	ldrh	r3, [r4, #12]
   8cc2e:	061a      	lsls	r2, r3, #24
   8cc30:	d43b      	bmi.n	8ccaa <_fclose_r+0xba>
   8cc32:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8cc34:	b141      	cbz	r1, 8cc48 <_fclose_r+0x58>
   8cc36:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8cc3a:	4299      	cmp	r1, r3
   8cc3c:	d002      	beq.n	8cc44 <_fclose_r+0x54>
   8cc3e:	4630      	mov	r0, r6
   8cc40:	f7fe f932 	bl	8aea8 <_free_r>
   8cc44:	2300      	movs	r3, #0
   8cc46:	6323      	str	r3, [r4, #48]	; 0x30
   8cc48:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8cc4a:	b121      	cbz	r1, 8cc56 <_fclose_r+0x66>
   8cc4c:	4630      	mov	r0, r6
   8cc4e:	f7fe f92b 	bl	8aea8 <_free_r>
   8cc52:	2300      	movs	r3, #0
   8cc54:	6463      	str	r3, [r4, #68]	; 0x44
   8cc56:	f7fe f831 	bl	8acbc <__sfp_lock_acquire>
   8cc5a:	2200      	movs	r2, #0
   8cc5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cc5e:	81a2      	strh	r2, [r4, #12]
   8cc60:	07db      	lsls	r3, r3, #31
   8cc62:	d527      	bpl.n	8ccb4 <_fclose_r+0xc4>
   8cc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cc66:	f7fe fbc7 	bl	8b3f8 <__retarget_lock_close_recursive>
   8cc6a:	f7fe f82d 	bl	8acc8 <__sfp_lock_release>
   8cc6e:	4628      	mov	r0, r5
   8cc70:	bd70      	pop	{r4, r5, r6, pc}
   8cc72:	89a3      	ldrh	r3, [r4, #12]
   8cc74:	0599      	lsls	r1, r3, #22
   8cc76:	d4cb      	bmi.n	8cc10 <_fclose_r+0x20>
   8cc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cc7a:	f7fe fbbf 	bl	8b3fc <__retarget_lock_acquire_recursive>
   8cc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cc82:	2b00      	cmp	r3, #0
   8cc84:	d1c4      	bne.n	8cc10 <_fclose_r+0x20>
   8cc86:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8cc88:	f015 0501 	ands.w	r5, r5, #1
   8cc8c:	d008      	beq.n	8cca0 <_fclose_r+0xb0>
   8cc8e:	2500      	movs	r5, #0
   8cc90:	4628      	mov	r0, r5
   8cc92:	bd70      	pop	{r4, r5, r6, pc}
   8cc94:	f7fd ff8c 	bl	8abb0 <__sinit>
   8cc98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cc9a:	07d8      	lsls	r0, r3, #31
   8cc9c:	d4b4      	bmi.n	8cc08 <_fclose_r+0x18>
   8cc9e:	e7e8      	b.n	8cc72 <_fclose_r+0x82>
   8cca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cca2:	f7fe fbad 	bl	8b400 <__retarget_lock_release_recursive>
   8cca6:	4628      	mov	r0, r5
   8cca8:	bd70      	pop	{r4, r5, r6, pc}
   8ccaa:	4630      	mov	r0, r6
   8ccac:	6921      	ldr	r1, [r4, #16]
   8ccae:	f7fe f8fb 	bl	8aea8 <_free_r>
   8ccb2:	e7be      	b.n	8cc32 <_fclose_r+0x42>
   8ccb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ccb6:	f7fe fba3 	bl	8b400 <__retarget_lock_release_recursive>
   8ccba:	e7d3      	b.n	8cc64 <_fclose_r+0x74>

0008ccbc <fiprintf>:
   8ccbc:	b40e      	push	{r1, r2, r3}
   8ccbe:	b500      	push	{lr}
   8ccc0:	4a07      	ldr	r2, [pc, #28]	; (8cce0 <fiprintf+0x24>)
   8ccc2:	b082      	sub	sp, #8
   8ccc4:	ab03      	add	r3, sp, #12
   8ccc6:	4601      	mov	r1, r0
   8ccc8:	6810      	ldr	r0, [r2, #0]
   8ccca:	f853 2b04 	ldr.w	r2, [r3], #4
   8ccce:	9301      	str	r3, [sp, #4]
   8ccd0:	f7fb ff22 	bl	88b18 <_vfiprintf_r>
   8ccd4:	b002      	add	sp, #8
   8ccd6:	f85d eb04 	ldr.w	lr, [sp], #4
   8ccda:	b003      	add	sp, #12
   8ccdc:	4770      	bx	lr
   8ccde:	bf00      	nop
   8cce0:	20000b70 	.word	0x20000b70

0008cce4 <_fstat_r>:
   8cce4:	b570      	push	{r4, r5, r6, lr}
   8cce6:	2600      	movs	r6, #0
   8cce8:	4d07      	ldr	r5, [pc, #28]	; (8cd08 <_fstat_r+0x24>)
   8ccea:	4604      	mov	r4, r0
   8ccec:	4608      	mov	r0, r1
   8ccee:	4611      	mov	r1, r2
   8ccf0:	602e      	str	r6, [r5, #0]
   8ccf2:	f7f9 f94d 	bl	85f90 <_fstat>
   8ccf6:	1c43      	adds	r3, r0, #1
   8ccf8:	d000      	beq.n	8ccfc <_fstat_r+0x18>
   8ccfa:	bd70      	pop	{r4, r5, r6, pc}
   8ccfc:	682b      	ldr	r3, [r5, #0]
   8ccfe:	2b00      	cmp	r3, #0
   8cd00:	d0fb      	beq.n	8ccfa <_fstat_r+0x16>
   8cd02:	6023      	str	r3, [r4, #0]
   8cd04:	bd70      	pop	{r4, r5, r6, pc}
   8cd06:	bf00      	nop
   8cd08:	200028d0 	.word	0x200028d0

0008cd0c <_isatty_r>:
   8cd0c:	2200      	movs	r2, #0
   8cd0e:	b538      	push	{r3, r4, r5, lr}
   8cd10:	4d06      	ldr	r5, [pc, #24]	; (8cd2c <_isatty_r+0x20>)
   8cd12:	4604      	mov	r4, r0
   8cd14:	4608      	mov	r0, r1
   8cd16:	602a      	str	r2, [r5, #0]
   8cd18:	f7f9 f940 	bl	85f9c <_isatty>
   8cd1c:	1c43      	adds	r3, r0, #1
   8cd1e:	d000      	beq.n	8cd22 <_isatty_r+0x16>
   8cd20:	bd38      	pop	{r3, r4, r5, pc}
   8cd22:	682b      	ldr	r3, [r5, #0]
   8cd24:	2b00      	cmp	r3, #0
   8cd26:	d0fb      	beq.n	8cd20 <_isatty_r+0x14>
   8cd28:	6023      	str	r3, [r4, #0]
   8cd2a:	bd38      	pop	{r3, r4, r5, pc}
   8cd2c:	200028d0 	.word	0x200028d0

0008cd30 <_lseek_r>:
   8cd30:	b538      	push	{r3, r4, r5, lr}
   8cd32:	460c      	mov	r4, r1
   8cd34:	4611      	mov	r1, r2
   8cd36:	2200      	movs	r2, #0
   8cd38:	4684      	mov	ip, r0
   8cd3a:	4d07      	ldr	r5, [pc, #28]	; (8cd58 <_lseek_r+0x28>)
   8cd3c:	4620      	mov	r0, r4
   8cd3e:	602a      	str	r2, [r5, #0]
   8cd40:	461a      	mov	r2, r3
   8cd42:	4664      	mov	r4, ip
   8cd44:	f7f9 f92c 	bl	85fa0 <_lseek>
   8cd48:	1c43      	adds	r3, r0, #1
   8cd4a:	d000      	beq.n	8cd4e <_lseek_r+0x1e>
   8cd4c:	bd38      	pop	{r3, r4, r5, pc}
   8cd4e:	682b      	ldr	r3, [r5, #0]
   8cd50:	2b00      	cmp	r3, #0
   8cd52:	d0fb      	beq.n	8cd4c <_lseek_r+0x1c>
   8cd54:	6023      	str	r3, [r4, #0]
   8cd56:	bd38      	pop	{r3, r4, r5, pc}
   8cd58:	200028d0 	.word	0x200028d0

0008cd5c <_read_r>:
   8cd5c:	b538      	push	{r3, r4, r5, lr}
   8cd5e:	460c      	mov	r4, r1
   8cd60:	4611      	mov	r1, r2
   8cd62:	2200      	movs	r2, #0
   8cd64:	4684      	mov	ip, r0
   8cd66:	4d07      	ldr	r5, [pc, #28]	; (8cd84 <_read_r+0x28>)
   8cd68:	4620      	mov	r0, r4
   8cd6a:	602a      	str	r2, [r5, #0]
   8cd6c:	461a      	mov	r2, r3
   8cd6e:	4664      	mov	r4, ip
   8cd70:	f7f9 fd4c 	bl	8680c <_read>
   8cd74:	1c43      	adds	r3, r0, #1
   8cd76:	d000      	beq.n	8cd7a <_read_r+0x1e>
   8cd78:	bd38      	pop	{r3, r4, r5, pc}
   8cd7a:	682b      	ldr	r3, [r5, #0]
   8cd7c:	2b00      	cmp	r3, #0
   8cd7e:	d0fb      	beq.n	8cd78 <_read_r+0x1c>
   8cd80:	6023      	str	r3, [r4, #0]
   8cd82:	bd38      	pop	{r3, r4, r5, pc}
   8cd84:	200028d0 	.word	0x200028d0

0008cd88 <abort>:
   8cd88:	2006      	movs	r0, #6
   8cd8a:	b508      	push	{r3, lr}
   8cd8c:	f000 f804 	bl	8cd98 <raise>
   8cd90:	2001      	movs	r0, #1
   8cd92:	f7f9 f907 	bl	85fa4 <_exit>
   8cd96:	bf00      	nop

0008cd98 <raise>:
   8cd98:	b538      	push	{r3, r4, r5, lr}
   8cd9a:	4b15      	ldr	r3, [pc, #84]	; (8cdf0 <raise+0x58>)
   8cd9c:	281f      	cmp	r0, #31
   8cd9e:	681d      	ldr	r5, [r3, #0]
   8cda0:	d820      	bhi.n	8cde4 <raise+0x4c>
   8cda2:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8cda6:	4604      	mov	r4, r0
   8cda8:	b162      	cbz	r2, 8cdc4 <raise+0x2c>
   8cdaa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8cdae:	b14b      	cbz	r3, 8cdc4 <raise+0x2c>
   8cdb0:	2b01      	cmp	r3, #1
   8cdb2:	d015      	beq.n	8cde0 <raise+0x48>
   8cdb4:	1c59      	adds	r1, r3, #1
   8cdb6:	d00f      	beq.n	8cdd8 <raise+0x40>
   8cdb8:	2500      	movs	r5, #0
   8cdba:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8cdbe:	4798      	blx	r3
   8cdc0:	4628      	mov	r0, r5
   8cdc2:	bd38      	pop	{r3, r4, r5, pc}
   8cdc4:	4628      	mov	r0, r5
   8cdc6:	f000 f829 	bl	8ce1c <_getpid_r>
   8cdca:	4622      	mov	r2, r4
   8cdcc:	4601      	mov	r1, r0
   8cdce:	4628      	mov	r0, r5
   8cdd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8cdd4:	f000 b80e 	b.w	8cdf4 <_kill_r>
   8cdd8:	2316      	movs	r3, #22
   8cdda:	2001      	movs	r0, #1
   8cddc:	602b      	str	r3, [r5, #0]
   8cdde:	bd38      	pop	{r3, r4, r5, pc}
   8cde0:	2000      	movs	r0, #0
   8cde2:	bd38      	pop	{r3, r4, r5, pc}
   8cde4:	2316      	movs	r3, #22
   8cde6:	f04f 30ff 	mov.w	r0, #4294967295
   8cdea:	602b      	str	r3, [r5, #0]
   8cdec:	bd38      	pop	{r3, r4, r5, pc}
   8cdee:	bf00      	nop
   8cdf0:	20000b70 	.word	0x20000b70

0008cdf4 <_kill_r>:
   8cdf4:	b570      	push	{r4, r5, r6, lr}
   8cdf6:	2600      	movs	r6, #0
   8cdf8:	4d07      	ldr	r5, [pc, #28]	; (8ce18 <_kill_r+0x24>)
   8cdfa:	4604      	mov	r4, r0
   8cdfc:	4608      	mov	r0, r1
   8cdfe:	4611      	mov	r1, r2
   8ce00:	602e      	str	r6, [r5, #0]
   8ce02:	f7f9 f8d9 	bl	85fb8 <_kill>
   8ce06:	1c43      	adds	r3, r0, #1
   8ce08:	d000      	beq.n	8ce0c <_kill_r+0x18>
   8ce0a:	bd70      	pop	{r4, r5, r6, pc}
   8ce0c:	682b      	ldr	r3, [r5, #0]
   8ce0e:	2b00      	cmp	r3, #0
   8ce10:	d0fb      	beq.n	8ce0a <_kill_r+0x16>
   8ce12:	6023      	str	r3, [r4, #0]
   8ce14:	bd70      	pop	{r4, r5, r6, pc}
   8ce16:	bf00      	nop
   8ce18:	200028d0 	.word	0x200028d0

0008ce1c <_getpid_r>:
   8ce1c:	f7f9 b8ce 	b.w	85fbc <_getpid>

0008ce20 <__aeabi_drsub>:
   8ce20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8ce24:	e002      	b.n	8ce2c <__adddf3>
   8ce26:	bf00      	nop

0008ce28 <__aeabi_dsub>:
   8ce28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008ce2c <__adddf3>:
   8ce2c:	b530      	push	{r4, r5, lr}
   8ce2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8ce32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8ce36:	ea94 0f05 	teq	r4, r5
   8ce3a:	bf08      	it	eq
   8ce3c:	ea90 0f02 	teqeq	r0, r2
   8ce40:	bf1f      	itttt	ne
   8ce42:	ea54 0c00 	orrsne.w	ip, r4, r0
   8ce46:	ea55 0c02 	orrsne.w	ip, r5, r2
   8ce4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8ce4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ce52:	f000 80e2 	beq.w	8d01a <__adddf3+0x1ee>
   8ce56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8ce5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8ce5e:	bfb8      	it	lt
   8ce60:	426d      	neglt	r5, r5
   8ce62:	dd0c      	ble.n	8ce7e <__adddf3+0x52>
   8ce64:	442c      	add	r4, r5
   8ce66:	ea80 0202 	eor.w	r2, r0, r2
   8ce6a:	ea81 0303 	eor.w	r3, r1, r3
   8ce6e:	ea82 0000 	eor.w	r0, r2, r0
   8ce72:	ea83 0101 	eor.w	r1, r3, r1
   8ce76:	ea80 0202 	eor.w	r2, r0, r2
   8ce7a:	ea81 0303 	eor.w	r3, r1, r3
   8ce7e:	2d36      	cmp	r5, #54	; 0x36
   8ce80:	bf88      	it	hi
   8ce82:	bd30      	pophi	{r4, r5, pc}
   8ce84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ce88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ce8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8ce90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8ce94:	d002      	beq.n	8ce9c <__adddf3+0x70>
   8ce96:	4240      	negs	r0, r0
   8ce98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ce9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8cea0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8cea4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8cea8:	d002      	beq.n	8ceb0 <__adddf3+0x84>
   8ceaa:	4252      	negs	r2, r2
   8ceac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8ceb0:	ea94 0f05 	teq	r4, r5
   8ceb4:	f000 80a7 	beq.w	8d006 <__adddf3+0x1da>
   8ceb8:	f1a4 0401 	sub.w	r4, r4, #1
   8cebc:	f1d5 0e20 	rsbs	lr, r5, #32
   8cec0:	db0d      	blt.n	8cede <__adddf3+0xb2>
   8cec2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8cec6:	fa22 f205 	lsr.w	r2, r2, r5
   8ceca:	1880      	adds	r0, r0, r2
   8cecc:	f141 0100 	adc.w	r1, r1, #0
   8ced0:	fa03 f20e 	lsl.w	r2, r3, lr
   8ced4:	1880      	adds	r0, r0, r2
   8ced6:	fa43 f305 	asr.w	r3, r3, r5
   8ceda:	4159      	adcs	r1, r3
   8cedc:	e00e      	b.n	8cefc <__adddf3+0xd0>
   8cede:	f1a5 0520 	sub.w	r5, r5, #32
   8cee2:	f10e 0e20 	add.w	lr, lr, #32
   8cee6:	2a01      	cmp	r2, #1
   8cee8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8ceec:	bf28      	it	cs
   8ceee:	f04c 0c02 	orrcs.w	ip, ip, #2
   8cef2:	fa43 f305 	asr.w	r3, r3, r5
   8cef6:	18c0      	adds	r0, r0, r3
   8cef8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8cefc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cf00:	d507      	bpl.n	8cf12 <__adddf3+0xe6>
   8cf02:	f04f 0e00 	mov.w	lr, #0
   8cf06:	f1dc 0c00 	rsbs	ip, ip, #0
   8cf0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8cf0e:	eb6e 0101 	sbc.w	r1, lr, r1
   8cf12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8cf16:	d31b      	bcc.n	8cf50 <__adddf3+0x124>
   8cf18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8cf1c:	d30c      	bcc.n	8cf38 <__adddf3+0x10c>
   8cf1e:	0849      	lsrs	r1, r1, #1
   8cf20:	ea5f 0030 	movs.w	r0, r0, rrx
   8cf24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8cf28:	f104 0401 	add.w	r4, r4, #1
   8cf2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8cf30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8cf34:	f080 809a 	bcs.w	8d06c <__adddf3+0x240>
   8cf38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8cf3c:	bf08      	it	eq
   8cf3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cf42:	f150 0000 	adcs.w	r0, r0, #0
   8cf46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cf4a:	ea41 0105 	orr.w	r1, r1, r5
   8cf4e:	bd30      	pop	{r4, r5, pc}
   8cf50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8cf54:	4140      	adcs	r0, r0
   8cf56:	eb41 0101 	adc.w	r1, r1, r1
   8cf5a:	3c01      	subs	r4, #1
   8cf5c:	bf28      	it	cs
   8cf5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8cf62:	d2e9      	bcs.n	8cf38 <__adddf3+0x10c>
   8cf64:	f091 0f00 	teq	r1, #0
   8cf68:	bf04      	itt	eq
   8cf6a:	4601      	moveq	r1, r0
   8cf6c:	2000      	moveq	r0, #0
   8cf6e:	fab1 f381 	clz	r3, r1
   8cf72:	bf08      	it	eq
   8cf74:	3320      	addeq	r3, #32
   8cf76:	f1a3 030b 	sub.w	r3, r3, #11
   8cf7a:	f1b3 0220 	subs.w	r2, r3, #32
   8cf7e:	da0c      	bge.n	8cf9a <__adddf3+0x16e>
   8cf80:	320c      	adds	r2, #12
   8cf82:	dd08      	ble.n	8cf96 <__adddf3+0x16a>
   8cf84:	f102 0c14 	add.w	ip, r2, #20
   8cf88:	f1c2 020c 	rsb	r2, r2, #12
   8cf8c:	fa01 f00c 	lsl.w	r0, r1, ip
   8cf90:	fa21 f102 	lsr.w	r1, r1, r2
   8cf94:	e00c      	b.n	8cfb0 <__adddf3+0x184>
   8cf96:	f102 0214 	add.w	r2, r2, #20
   8cf9a:	bfd8      	it	le
   8cf9c:	f1c2 0c20 	rsble	ip, r2, #32
   8cfa0:	fa01 f102 	lsl.w	r1, r1, r2
   8cfa4:	fa20 fc0c 	lsr.w	ip, r0, ip
   8cfa8:	bfdc      	itt	le
   8cfaa:	ea41 010c 	orrle.w	r1, r1, ip
   8cfae:	4090      	lslle	r0, r2
   8cfb0:	1ae4      	subs	r4, r4, r3
   8cfb2:	bfa2      	ittt	ge
   8cfb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8cfb8:	4329      	orrge	r1, r5
   8cfba:	bd30      	popge	{r4, r5, pc}
   8cfbc:	ea6f 0404 	mvn.w	r4, r4
   8cfc0:	3c1f      	subs	r4, #31
   8cfc2:	da1c      	bge.n	8cffe <__adddf3+0x1d2>
   8cfc4:	340c      	adds	r4, #12
   8cfc6:	dc0e      	bgt.n	8cfe6 <__adddf3+0x1ba>
   8cfc8:	f104 0414 	add.w	r4, r4, #20
   8cfcc:	f1c4 0220 	rsb	r2, r4, #32
   8cfd0:	fa20 f004 	lsr.w	r0, r0, r4
   8cfd4:	fa01 f302 	lsl.w	r3, r1, r2
   8cfd8:	ea40 0003 	orr.w	r0, r0, r3
   8cfdc:	fa21 f304 	lsr.w	r3, r1, r4
   8cfe0:	ea45 0103 	orr.w	r1, r5, r3
   8cfe4:	bd30      	pop	{r4, r5, pc}
   8cfe6:	f1c4 040c 	rsb	r4, r4, #12
   8cfea:	f1c4 0220 	rsb	r2, r4, #32
   8cfee:	fa20 f002 	lsr.w	r0, r0, r2
   8cff2:	fa01 f304 	lsl.w	r3, r1, r4
   8cff6:	ea40 0003 	orr.w	r0, r0, r3
   8cffa:	4629      	mov	r1, r5
   8cffc:	bd30      	pop	{r4, r5, pc}
   8cffe:	fa21 f004 	lsr.w	r0, r1, r4
   8d002:	4629      	mov	r1, r5
   8d004:	bd30      	pop	{r4, r5, pc}
   8d006:	f094 0f00 	teq	r4, #0
   8d00a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d00e:	bf06      	itte	eq
   8d010:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d014:	3401      	addeq	r4, #1
   8d016:	3d01      	subne	r5, #1
   8d018:	e74e      	b.n	8ceb8 <__adddf3+0x8c>
   8d01a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d01e:	bf18      	it	ne
   8d020:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d024:	d029      	beq.n	8d07a <__adddf3+0x24e>
   8d026:	ea94 0f05 	teq	r4, r5
   8d02a:	bf08      	it	eq
   8d02c:	ea90 0f02 	teqeq	r0, r2
   8d030:	d005      	beq.n	8d03e <__adddf3+0x212>
   8d032:	ea54 0c00 	orrs.w	ip, r4, r0
   8d036:	bf04      	itt	eq
   8d038:	4619      	moveq	r1, r3
   8d03a:	4610      	moveq	r0, r2
   8d03c:	bd30      	pop	{r4, r5, pc}
   8d03e:	ea91 0f03 	teq	r1, r3
   8d042:	bf1e      	ittt	ne
   8d044:	2100      	movne	r1, #0
   8d046:	2000      	movne	r0, #0
   8d048:	bd30      	popne	{r4, r5, pc}
   8d04a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d04e:	d105      	bne.n	8d05c <__adddf3+0x230>
   8d050:	0040      	lsls	r0, r0, #1
   8d052:	4149      	adcs	r1, r1
   8d054:	bf28      	it	cs
   8d056:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d05a:	bd30      	pop	{r4, r5, pc}
   8d05c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d060:	bf3c      	itt	cc
   8d062:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d066:	bd30      	popcc	{r4, r5, pc}
   8d068:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d06c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d070:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d074:	f04f 0000 	mov.w	r0, #0
   8d078:	bd30      	pop	{r4, r5, pc}
   8d07a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d07e:	bf1a      	itte	ne
   8d080:	4619      	movne	r1, r3
   8d082:	4610      	movne	r0, r2
   8d084:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d088:	bf1c      	itt	ne
   8d08a:	460b      	movne	r3, r1
   8d08c:	4602      	movne	r2, r0
   8d08e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d092:	bf06      	itte	eq
   8d094:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d098:	ea91 0f03 	teqeq	r1, r3
   8d09c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d0a0:	bd30      	pop	{r4, r5, pc}
   8d0a2:	bf00      	nop

0008d0a4 <__aeabi_ui2d>:
   8d0a4:	f090 0f00 	teq	r0, #0
   8d0a8:	bf04      	itt	eq
   8d0aa:	2100      	moveq	r1, #0
   8d0ac:	4770      	bxeq	lr
   8d0ae:	b530      	push	{r4, r5, lr}
   8d0b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d0b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d0b8:	f04f 0500 	mov.w	r5, #0
   8d0bc:	f04f 0100 	mov.w	r1, #0
   8d0c0:	e750      	b.n	8cf64 <__adddf3+0x138>
   8d0c2:	bf00      	nop

0008d0c4 <__aeabi_i2d>:
   8d0c4:	f090 0f00 	teq	r0, #0
   8d0c8:	bf04      	itt	eq
   8d0ca:	2100      	moveq	r1, #0
   8d0cc:	4770      	bxeq	lr
   8d0ce:	b530      	push	{r4, r5, lr}
   8d0d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d0d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d0d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d0dc:	bf48      	it	mi
   8d0de:	4240      	negmi	r0, r0
   8d0e0:	f04f 0100 	mov.w	r1, #0
   8d0e4:	e73e      	b.n	8cf64 <__adddf3+0x138>
   8d0e6:	bf00      	nop

0008d0e8 <__aeabi_f2d>:
   8d0e8:	0042      	lsls	r2, r0, #1
   8d0ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d0ee:	ea4f 0131 	mov.w	r1, r1, rrx
   8d0f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d0f6:	bf1f      	itttt	ne
   8d0f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d0fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d100:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d104:	4770      	bxne	lr
   8d106:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8d10a:	bf08      	it	eq
   8d10c:	4770      	bxeq	lr
   8d10e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8d112:	bf04      	itt	eq
   8d114:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8d118:	4770      	bxeq	lr
   8d11a:	b530      	push	{r4, r5, lr}
   8d11c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d120:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d124:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d128:	e71c      	b.n	8cf64 <__adddf3+0x138>
   8d12a:	bf00      	nop

0008d12c <__aeabi_ul2d>:
   8d12c:	ea50 0201 	orrs.w	r2, r0, r1
   8d130:	bf08      	it	eq
   8d132:	4770      	bxeq	lr
   8d134:	b530      	push	{r4, r5, lr}
   8d136:	f04f 0500 	mov.w	r5, #0
   8d13a:	e00a      	b.n	8d152 <__aeabi_l2d+0x16>

0008d13c <__aeabi_l2d>:
   8d13c:	ea50 0201 	orrs.w	r2, r0, r1
   8d140:	bf08      	it	eq
   8d142:	4770      	bxeq	lr
   8d144:	b530      	push	{r4, r5, lr}
   8d146:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d14a:	d502      	bpl.n	8d152 <__aeabi_l2d+0x16>
   8d14c:	4240      	negs	r0, r0
   8d14e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d152:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d156:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d15a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d15e:	f43f aed8 	beq.w	8cf12 <__adddf3+0xe6>
   8d162:	f04f 0203 	mov.w	r2, #3
   8d166:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d16a:	bf18      	it	ne
   8d16c:	3203      	addne	r2, #3
   8d16e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d172:	bf18      	it	ne
   8d174:	3203      	addne	r2, #3
   8d176:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d17a:	f1c2 0320 	rsb	r3, r2, #32
   8d17e:	fa00 fc03 	lsl.w	ip, r0, r3
   8d182:	fa20 f002 	lsr.w	r0, r0, r2
   8d186:	fa01 fe03 	lsl.w	lr, r1, r3
   8d18a:	ea40 000e 	orr.w	r0, r0, lr
   8d18e:	fa21 f102 	lsr.w	r1, r1, r2
   8d192:	4414      	add	r4, r2
   8d194:	e6bd      	b.n	8cf12 <__adddf3+0xe6>
   8d196:	bf00      	nop

0008d198 <__aeabi_dmul>:
   8d198:	b570      	push	{r4, r5, r6, lr}
   8d19a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d19e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d1a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d1a6:	bf1d      	ittte	ne
   8d1a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d1ac:	ea94 0f0c 	teqne	r4, ip
   8d1b0:	ea95 0f0c 	teqne	r5, ip
   8d1b4:	f000 f8de 	bleq	8d374 <__aeabi_dmul+0x1dc>
   8d1b8:	442c      	add	r4, r5
   8d1ba:	ea81 0603 	eor.w	r6, r1, r3
   8d1be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d1c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d1c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d1ca:	bf18      	it	ne
   8d1cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d1d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d1d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d1d8:	d038      	beq.n	8d24c <__aeabi_dmul+0xb4>
   8d1da:	fba0 ce02 	umull	ip, lr, r0, r2
   8d1de:	f04f 0500 	mov.w	r5, #0
   8d1e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d1e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d1ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d1ee:	f04f 0600 	mov.w	r6, #0
   8d1f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d1f6:	f09c 0f00 	teq	ip, #0
   8d1fa:	bf18      	it	ne
   8d1fc:	f04e 0e01 	orrne.w	lr, lr, #1
   8d200:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d204:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d208:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d20c:	d204      	bcs.n	8d218 <__aeabi_dmul+0x80>
   8d20e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d212:	416d      	adcs	r5, r5
   8d214:	eb46 0606 	adc.w	r6, r6, r6
   8d218:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d21c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d220:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d224:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d228:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d22c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d230:	bf88      	it	hi
   8d232:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d236:	d81e      	bhi.n	8d276 <__aeabi_dmul+0xde>
   8d238:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d23c:	bf08      	it	eq
   8d23e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d242:	f150 0000 	adcs.w	r0, r0, #0
   8d246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d24a:	bd70      	pop	{r4, r5, r6, pc}
   8d24c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d250:	ea46 0101 	orr.w	r1, r6, r1
   8d254:	ea40 0002 	orr.w	r0, r0, r2
   8d258:	ea81 0103 	eor.w	r1, r1, r3
   8d25c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d260:	bfc2      	ittt	gt
   8d262:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d266:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d26a:	bd70      	popgt	{r4, r5, r6, pc}
   8d26c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d270:	f04f 0e00 	mov.w	lr, #0
   8d274:	3c01      	subs	r4, #1
   8d276:	f300 80ab 	bgt.w	8d3d0 <__aeabi_dmul+0x238>
   8d27a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d27e:	bfde      	ittt	le
   8d280:	2000      	movle	r0, #0
   8d282:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d286:	bd70      	pople	{r4, r5, r6, pc}
   8d288:	f1c4 0400 	rsb	r4, r4, #0
   8d28c:	3c20      	subs	r4, #32
   8d28e:	da35      	bge.n	8d2fc <__aeabi_dmul+0x164>
   8d290:	340c      	adds	r4, #12
   8d292:	dc1b      	bgt.n	8d2cc <__aeabi_dmul+0x134>
   8d294:	f104 0414 	add.w	r4, r4, #20
   8d298:	f1c4 0520 	rsb	r5, r4, #32
   8d29c:	fa00 f305 	lsl.w	r3, r0, r5
   8d2a0:	fa20 f004 	lsr.w	r0, r0, r4
   8d2a4:	fa01 f205 	lsl.w	r2, r1, r5
   8d2a8:	ea40 0002 	orr.w	r0, r0, r2
   8d2ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d2b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d2b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d2b8:	fa21 f604 	lsr.w	r6, r1, r4
   8d2bc:	eb42 0106 	adc.w	r1, r2, r6
   8d2c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d2c4:	bf08      	it	eq
   8d2c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d2ca:	bd70      	pop	{r4, r5, r6, pc}
   8d2cc:	f1c4 040c 	rsb	r4, r4, #12
   8d2d0:	f1c4 0520 	rsb	r5, r4, #32
   8d2d4:	fa00 f304 	lsl.w	r3, r0, r4
   8d2d8:	fa20 f005 	lsr.w	r0, r0, r5
   8d2dc:	fa01 f204 	lsl.w	r2, r1, r4
   8d2e0:	ea40 0002 	orr.w	r0, r0, r2
   8d2e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d2e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d2ec:	f141 0100 	adc.w	r1, r1, #0
   8d2f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d2f4:	bf08      	it	eq
   8d2f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d2fa:	bd70      	pop	{r4, r5, r6, pc}
   8d2fc:	f1c4 0520 	rsb	r5, r4, #32
   8d300:	fa00 f205 	lsl.w	r2, r0, r5
   8d304:	ea4e 0e02 	orr.w	lr, lr, r2
   8d308:	fa20 f304 	lsr.w	r3, r0, r4
   8d30c:	fa01 f205 	lsl.w	r2, r1, r5
   8d310:	ea43 0302 	orr.w	r3, r3, r2
   8d314:	fa21 f004 	lsr.w	r0, r1, r4
   8d318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d31c:	fa21 f204 	lsr.w	r2, r1, r4
   8d320:	ea20 0002 	bic.w	r0, r0, r2
   8d324:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d32c:	bf08      	it	eq
   8d32e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d332:	bd70      	pop	{r4, r5, r6, pc}
   8d334:	f094 0f00 	teq	r4, #0
   8d338:	d10f      	bne.n	8d35a <__aeabi_dmul+0x1c2>
   8d33a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d33e:	0040      	lsls	r0, r0, #1
   8d340:	eb41 0101 	adc.w	r1, r1, r1
   8d344:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d348:	bf08      	it	eq
   8d34a:	3c01      	subeq	r4, #1
   8d34c:	d0f7      	beq.n	8d33e <__aeabi_dmul+0x1a6>
   8d34e:	ea41 0106 	orr.w	r1, r1, r6
   8d352:	f095 0f00 	teq	r5, #0
   8d356:	bf18      	it	ne
   8d358:	4770      	bxne	lr
   8d35a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d35e:	0052      	lsls	r2, r2, #1
   8d360:	eb43 0303 	adc.w	r3, r3, r3
   8d364:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d368:	bf08      	it	eq
   8d36a:	3d01      	subeq	r5, #1
   8d36c:	d0f7      	beq.n	8d35e <__aeabi_dmul+0x1c6>
   8d36e:	ea43 0306 	orr.w	r3, r3, r6
   8d372:	4770      	bx	lr
   8d374:	ea94 0f0c 	teq	r4, ip
   8d378:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d37c:	bf18      	it	ne
   8d37e:	ea95 0f0c 	teqne	r5, ip
   8d382:	d00c      	beq.n	8d39e <__aeabi_dmul+0x206>
   8d384:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d388:	bf18      	it	ne
   8d38a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d38e:	d1d1      	bne.n	8d334 <__aeabi_dmul+0x19c>
   8d390:	ea81 0103 	eor.w	r1, r1, r3
   8d394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d398:	f04f 0000 	mov.w	r0, #0
   8d39c:	bd70      	pop	{r4, r5, r6, pc}
   8d39e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d3a2:	bf06      	itte	eq
   8d3a4:	4610      	moveq	r0, r2
   8d3a6:	4619      	moveq	r1, r3
   8d3a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d3ac:	d019      	beq.n	8d3e2 <__aeabi_dmul+0x24a>
   8d3ae:	ea94 0f0c 	teq	r4, ip
   8d3b2:	d102      	bne.n	8d3ba <__aeabi_dmul+0x222>
   8d3b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d3b8:	d113      	bne.n	8d3e2 <__aeabi_dmul+0x24a>
   8d3ba:	ea95 0f0c 	teq	r5, ip
   8d3be:	d105      	bne.n	8d3cc <__aeabi_dmul+0x234>
   8d3c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d3c4:	bf1c      	itt	ne
   8d3c6:	4610      	movne	r0, r2
   8d3c8:	4619      	movne	r1, r3
   8d3ca:	d10a      	bne.n	8d3e2 <__aeabi_dmul+0x24a>
   8d3cc:	ea81 0103 	eor.w	r1, r1, r3
   8d3d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d3d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d3d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d3dc:	f04f 0000 	mov.w	r0, #0
   8d3e0:	bd70      	pop	{r4, r5, r6, pc}
   8d3e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d3e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d3ea:	bd70      	pop	{r4, r5, r6, pc}

0008d3ec <__aeabi_ddiv>:
   8d3ec:	b570      	push	{r4, r5, r6, lr}
   8d3ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d3f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d3f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d3fa:	bf1d      	ittte	ne
   8d3fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d400:	ea94 0f0c 	teqne	r4, ip
   8d404:	ea95 0f0c 	teqne	r5, ip
   8d408:	f000 f8a7 	bleq	8d55a <__aeabi_ddiv+0x16e>
   8d40c:	eba4 0405 	sub.w	r4, r4, r5
   8d410:	ea81 0e03 	eor.w	lr, r1, r3
   8d414:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d418:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d41c:	f000 8088 	beq.w	8d530 <__aeabi_ddiv+0x144>
   8d420:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d424:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d428:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d42c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d430:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d434:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d438:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d43c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d440:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d444:	429d      	cmp	r5, r3
   8d446:	bf08      	it	eq
   8d448:	4296      	cmpeq	r6, r2
   8d44a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d44e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d452:	d202      	bcs.n	8d45a <__aeabi_ddiv+0x6e>
   8d454:	085b      	lsrs	r3, r3, #1
   8d456:	ea4f 0232 	mov.w	r2, r2, rrx
   8d45a:	1ab6      	subs	r6, r6, r2
   8d45c:	eb65 0503 	sbc.w	r5, r5, r3
   8d460:	085b      	lsrs	r3, r3, #1
   8d462:	ea4f 0232 	mov.w	r2, r2, rrx
   8d466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d46a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d46e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d472:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d476:	bf22      	ittt	cs
   8d478:	1ab6      	subcs	r6, r6, r2
   8d47a:	4675      	movcs	r5, lr
   8d47c:	ea40 000c 	orrcs.w	r0, r0, ip
   8d480:	085b      	lsrs	r3, r3, #1
   8d482:	ea4f 0232 	mov.w	r2, r2, rrx
   8d486:	ebb6 0e02 	subs.w	lr, r6, r2
   8d48a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d48e:	bf22      	ittt	cs
   8d490:	1ab6      	subcs	r6, r6, r2
   8d492:	4675      	movcs	r5, lr
   8d494:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d498:	085b      	lsrs	r3, r3, #1
   8d49a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d49e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d4a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d4a6:	bf22      	ittt	cs
   8d4a8:	1ab6      	subcs	r6, r6, r2
   8d4aa:	4675      	movcs	r5, lr
   8d4ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d4b0:	085b      	lsrs	r3, r3, #1
   8d4b2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d4b6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d4ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d4be:	bf22      	ittt	cs
   8d4c0:	1ab6      	subcs	r6, r6, r2
   8d4c2:	4675      	movcs	r5, lr
   8d4c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d4c8:	ea55 0e06 	orrs.w	lr, r5, r6
   8d4cc:	d018      	beq.n	8d500 <__aeabi_ddiv+0x114>
   8d4ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d4d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d4d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d4da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d4de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d4e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d4e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d4ea:	d1c0      	bne.n	8d46e <__aeabi_ddiv+0x82>
   8d4ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d4f0:	d10b      	bne.n	8d50a <__aeabi_ddiv+0x11e>
   8d4f2:	ea41 0100 	orr.w	r1, r1, r0
   8d4f6:	f04f 0000 	mov.w	r0, #0
   8d4fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d4fe:	e7b6      	b.n	8d46e <__aeabi_ddiv+0x82>
   8d500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d504:	bf04      	itt	eq
   8d506:	4301      	orreq	r1, r0
   8d508:	2000      	moveq	r0, #0
   8d50a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d50e:	bf88      	it	hi
   8d510:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d514:	f63f aeaf 	bhi.w	8d276 <__aeabi_dmul+0xde>
   8d518:	ebb5 0c03 	subs.w	ip, r5, r3
   8d51c:	bf04      	itt	eq
   8d51e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d522:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d526:	f150 0000 	adcs.w	r0, r0, #0
   8d52a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d52e:	bd70      	pop	{r4, r5, r6, pc}
   8d530:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d534:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d538:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d53c:	bfc2      	ittt	gt
   8d53e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d542:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d546:	bd70      	popgt	{r4, r5, r6, pc}
   8d548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d54c:	f04f 0e00 	mov.w	lr, #0
   8d550:	3c01      	subs	r4, #1
   8d552:	e690      	b.n	8d276 <__aeabi_dmul+0xde>
   8d554:	ea45 0e06 	orr.w	lr, r5, r6
   8d558:	e68d      	b.n	8d276 <__aeabi_dmul+0xde>
   8d55a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d55e:	ea94 0f0c 	teq	r4, ip
   8d562:	bf08      	it	eq
   8d564:	ea95 0f0c 	teqeq	r5, ip
   8d568:	f43f af3b 	beq.w	8d3e2 <__aeabi_dmul+0x24a>
   8d56c:	ea94 0f0c 	teq	r4, ip
   8d570:	d10a      	bne.n	8d588 <__aeabi_ddiv+0x19c>
   8d572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d576:	f47f af34 	bne.w	8d3e2 <__aeabi_dmul+0x24a>
   8d57a:	ea95 0f0c 	teq	r5, ip
   8d57e:	f47f af25 	bne.w	8d3cc <__aeabi_dmul+0x234>
   8d582:	4610      	mov	r0, r2
   8d584:	4619      	mov	r1, r3
   8d586:	e72c      	b.n	8d3e2 <__aeabi_dmul+0x24a>
   8d588:	ea95 0f0c 	teq	r5, ip
   8d58c:	d106      	bne.n	8d59c <__aeabi_ddiv+0x1b0>
   8d58e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d592:	f43f aefd 	beq.w	8d390 <__aeabi_dmul+0x1f8>
   8d596:	4610      	mov	r0, r2
   8d598:	4619      	mov	r1, r3
   8d59a:	e722      	b.n	8d3e2 <__aeabi_dmul+0x24a>
   8d59c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d5a0:	bf18      	it	ne
   8d5a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d5a6:	f47f aec5 	bne.w	8d334 <__aeabi_dmul+0x19c>
   8d5aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d5ae:	f47f af0d 	bne.w	8d3cc <__aeabi_dmul+0x234>
   8d5b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d5b6:	f47f aeeb 	bne.w	8d390 <__aeabi_dmul+0x1f8>
   8d5ba:	e712      	b.n	8d3e2 <__aeabi_dmul+0x24a>

0008d5bc <__gedf2>:
   8d5bc:	f04f 3cff 	mov.w	ip, #4294967295
   8d5c0:	e006      	b.n	8d5d0 <__cmpdf2+0x4>
   8d5c2:	bf00      	nop

0008d5c4 <__ledf2>:
   8d5c4:	f04f 0c01 	mov.w	ip, #1
   8d5c8:	e002      	b.n	8d5d0 <__cmpdf2+0x4>
   8d5ca:	bf00      	nop

0008d5cc <__cmpdf2>:
   8d5cc:	f04f 0c01 	mov.w	ip, #1
   8d5d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d5d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d5d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d5dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d5e0:	bf18      	it	ne
   8d5e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d5e6:	d01b      	beq.n	8d620 <__cmpdf2+0x54>
   8d5e8:	b001      	add	sp, #4
   8d5ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d5ee:	bf0c      	ite	eq
   8d5f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d5f4:	ea91 0f03 	teqne	r1, r3
   8d5f8:	bf02      	ittt	eq
   8d5fa:	ea90 0f02 	teqeq	r0, r2
   8d5fe:	2000      	moveq	r0, #0
   8d600:	4770      	bxeq	lr
   8d602:	f110 0f00 	cmn.w	r0, #0
   8d606:	ea91 0f03 	teq	r1, r3
   8d60a:	bf58      	it	pl
   8d60c:	4299      	cmppl	r1, r3
   8d60e:	bf08      	it	eq
   8d610:	4290      	cmpeq	r0, r2
   8d612:	bf2c      	ite	cs
   8d614:	17d8      	asrcs	r0, r3, #31
   8d616:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d61a:	f040 0001 	orr.w	r0, r0, #1
   8d61e:	4770      	bx	lr
   8d620:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d624:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d628:	d102      	bne.n	8d630 <__cmpdf2+0x64>
   8d62a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d62e:	d107      	bne.n	8d640 <__cmpdf2+0x74>
   8d630:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d638:	d1d6      	bne.n	8d5e8 <__cmpdf2+0x1c>
   8d63a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d63e:	d0d3      	beq.n	8d5e8 <__cmpdf2+0x1c>
   8d640:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d644:	4770      	bx	lr
   8d646:	bf00      	nop

0008d648 <__aeabi_cdrcmple>:
   8d648:	4684      	mov	ip, r0
   8d64a:	4610      	mov	r0, r2
   8d64c:	4662      	mov	r2, ip
   8d64e:	468c      	mov	ip, r1
   8d650:	4619      	mov	r1, r3
   8d652:	4663      	mov	r3, ip
   8d654:	e000      	b.n	8d658 <__aeabi_cdcmpeq>
   8d656:	bf00      	nop

0008d658 <__aeabi_cdcmpeq>:
   8d658:	b501      	push	{r0, lr}
   8d65a:	f7ff ffb7 	bl	8d5cc <__cmpdf2>
   8d65e:	2800      	cmp	r0, #0
   8d660:	bf48      	it	mi
   8d662:	f110 0f00 	cmnmi.w	r0, #0
   8d666:	bd01      	pop	{r0, pc}

0008d668 <__aeabi_dcmpeq>:
   8d668:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d66c:	f7ff fff4 	bl	8d658 <__aeabi_cdcmpeq>
   8d670:	bf0c      	ite	eq
   8d672:	2001      	moveq	r0, #1
   8d674:	2000      	movne	r0, #0
   8d676:	f85d fb08 	ldr.w	pc, [sp], #8
   8d67a:	bf00      	nop

0008d67c <__aeabi_dcmplt>:
   8d67c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d680:	f7ff ffea 	bl	8d658 <__aeabi_cdcmpeq>
   8d684:	bf34      	ite	cc
   8d686:	2001      	movcc	r0, #1
   8d688:	2000      	movcs	r0, #0
   8d68a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d68e:	bf00      	nop

0008d690 <__aeabi_dcmple>:
   8d690:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d694:	f7ff ffe0 	bl	8d658 <__aeabi_cdcmpeq>
   8d698:	bf94      	ite	ls
   8d69a:	2001      	movls	r0, #1
   8d69c:	2000      	movhi	r0, #0
   8d69e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d6a2:	bf00      	nop

0008d6a4 <__aeabi_dcmpge>:
   8d6a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d6a8:	f7ff ffce 	bl	8d648 <__aeabi_cdrcmple>
   8d6ac:	bf94      	ite	ls
   8d6ae:	2001      	movls	r0, #1
   8d6b0:	2000      	movhi	r0, #0
   8d6b2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d6b6:	bf00      	nop

0008d6b8 <__aeabi_dcmpgt>:
   8d6b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d6bc:	f7ff ffc4 	bl	8d648 <__aeabi_cdrcmple>
   8d6c0:	bf34      	ite	cc
   8d6c2:	2001      	movcc	r0, #1
   8d6c4:	2000      	movcs	r0, #0
   8d6c6:	f85d fb08 	ldr.w	pc, [sp], #8
   8d6ca:	bf00      	nop

0008d6cc <__aeabi_dcmpun>:
   8d6cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d6d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d6d4:	d102      	bne.n	8d6dc <__aeabi_dcmpun+0x10>
   8d6d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d6da:	d10a      	bne.n	8d6f2 <__aeabi_dcmpun+0x26>
   8d6dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d6e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d6e4:	d102      	bne.n	8d6ec <__aeabi_dcmpun+0x20>
   8d6e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d6ea:	d102      	bne.n	8d6f2 <__aeabi_dcmpun+0x26>
   8d6ec:	f04f 0000 	mov.w	r0, #0
   8d6f0:	4770      	bx	lr
   8d6f2:	f04f 0001 	mov.w	r0, #1
   8d6f6:	4770      	bx	lr

0008d6f8 <__aeabi_d2iz>:
   8d6f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d6fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d700:	d215      	bcs.n	8d72e <__aeabi_d2iz+0x36>
   8d702:	d511      	bpl.n	8d728 <__aeabi_d2iz+0x30>
   8d704:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d708:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d70c:	d912      	bls.n	8d734 <__aeabi_d2iz+0x3c>
   8d70e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d716:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d71a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d71e:	fa23 f002 	lsr.w	r0, r3, r2
   8d722:	bf18      	it	ne
   8d724:	4240      	negne	r0, r0
   8d726:	4770      	bx	lr
   8d728:	f04f 0000 	mov.w	r0, #0
   8d72c:	4770      	bx	lr
   8d72e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d732:	d105      	bne.n	8d740 <__aeabi_d2iz+0x48>
   8d734:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d738:	bf08      	it	eq
   8d73a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d73e:	4770      	bx	lr
   8d740:	f04f 0000 	mov.w	r0, #0
   8d744:	4770      	bx	lr
   8d746:	bf00      	nop
   8d748:	78383025 	.word	0x78383025
   8d74c:	00000000 	.word	0x00000000
   8d750:	494c5743 	.word	0x494c5743
   8d754:	415f4554 	.word	0x415f4554
   8d758:	53495256 	.word	0x53495256
   8d75c:	00000050 	.word	0x00000050

0008d760 <CSWTCH.10>:
   8d760:	00010101 00000100                       ........

0008d768 <CSWTCH.5>:
   8d768:	30682040 18322a22                       @ h0"*2.

0008d770 <CSWTCH.7>:
   8d770:	4c352c24 00001a08                       $,5L....

0008d778 <CSWTCH.8>:
   8d778:	23332323 00002323                       ##3###..

0008d780 <CSWTCH.9>:
   8d780:	26362626 00002626                       &&6&&&..

0008d788 <BUILD_DATE>:
   8d788:	206c754a 32203231 00323230              Jul 12 2022.

0008d794 <BUILD_TIME>:
   8d794:	313a3132 33343a34 00000000 00000000     21:14:43........
   8d7a4:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8d7b4:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8d7c4:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8d7d4:	0000007e 74697845 20676e69 68746977     ~...Exiting with
   8d7e4:	61747320 20737574 0a2e6425 00000000      status %d......

0008d7f4 <_global_impure_ptr>:
   8d7f4:	20000b78 00464e49 00666e69 004e414e     x.. INF.inf.NAN.
   8d804:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d814:	66656463 00000000 33323130 37363534     cdef....01234567
   8d824:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d834:	0000296c 00000030                       l)..0...

0008d83c <blanks.1>:
   8d83c:	20202020 20202020 20202020 20202020                     

0008d84c <zeroes.0>:
   8d84c:	30303030 30303030 30303030 30303030     0000000000000000

0008d85c <blanks.1>:
   8d85c:	20202020 20202020 20202020 20202020                     

0008d86c <zeroes.0>:
   8d86c:	30303030 30303030 30303030 30303030     0000000000000000
   8d87c:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d88c:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d89c:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d8ac:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d8bc:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8d8cc:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8d8dc:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8d8ec:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8d8fc:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8d90c:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8d91c:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8d92c:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d93c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d94c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8d95c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8d96c:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8d97c:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8d98c:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8d99c:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8d9ac:	0000632e                                .c..

0008d9b0 <__mprec_bigtens>:
   8d9b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d9c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d9d0:	7f73bf3c 75154fdd                       <.s..O.u

0008d9d8 <__mprec_tens>:
   8d9d8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d9e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d9f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8da08:	00000000 412e8480 00000000 416312d0     .......A......cA
   8da18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8da28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8da38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8da48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8da58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8da68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8da78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8da88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8da98:	79d99db4 44ea7843                       ...yCx.D

0008daa0 <p05.0>:
   8daa0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8dab0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8dac0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8dad0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8dae0:	2520656e 25732564 00000a73              ne %d%s%s...

0008daec <_ctype_>:
   8daec:	20202000 20202020 28282020 20282828     .         ((((( 
   8dafc:	20202020 20202020 20202020 20202020                     
   8db0c:	10108820 10101010 10101010 10101010      ...............
   8db1c:	04040410 04040404 10040404 10101010     ................
   8db2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8db3c:	01010101 01010101 01010101 10101010     ................
   8db4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8db5c:	02020202 02020202 02020202 10101010     ................
   8db6c:	00000020 00000000 00000000 00000000      ...............
   8db7c:	00000000 00000000 00000000 00000000     ................
   8db8c:	00000000 00000000 00000000 00000000     ................
   8db9c:	00000000 00000000 00000000 00000000     ................
   8dbac:	00000000 00000000 00000000 00000000     ................
   8dbbc:	00000000 00000000 00000000 00000000     ................
   8dbcc:	00000000 00000000 00000000 00000000     ................
   8dbdc:	00000000 00000000 00000000 00000000     ................
   8dbec:	00000000                                ....

0008dbf0 <_init>:
   8dbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dbf2:	bf00      	nop
   8dbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dbf6:	bc08      	pop	{r3}
   8dbf8:	469e      	mov	lr, r3
   8dbfa:	4770      	bx	lr

0008dbfc <__init_array_start>:
   8dbfc:	00089a09 	.word	0x00089a09

0008dc00 <__frame_dummy_init_array_entry>:
   8dc00:	000800e1                                ....

0008dc04 <_fini>:
   8dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8dc06:	bf00      	nop
   8dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dc0a:	bc08      	pop	{r3}
   8dc0c:	469e      	mov	lr, r3
   8dc0e:	4770      	bx	lr

0008dc10 <__do_global_dtors_aux_fini_array_entry>:
   8dc10:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b510      	push	{r4, lr}
20000002:	b082      	sub	sp, #8
20000004:	9c04      	ldr	r4, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b393      	cbz	r3, 2000006e <efc_perform_read_sequence+0x6e>
20000008:	4684      	mov	ip, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6800      	ldr	r0, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000000c:	b2c9      	uxtb	r1, r1
2000000e:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20000012:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20000016:	f8cc 0000 	str.w	r0, [ip]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	f8cc 1004 	str.w	r1, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001e:	f8dc 1008 	ldr.w	r1, [ip, #8]
20000022:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000024:	9801      	ldr	r0, [sp, #4]
20000026:	f010 0001 	ands.w	r0, r0, #1
2000002a:	d1f8      	bne.n	2000001e <efc_perform_read_sequence+0x1e>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000002c:	b164      	cbz	r4, 20000048 <efc_perform_read_sequence+0x48>
2000002e:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
20000032:	f5c3 2400 	rsb	r4, r3, #524288	; 0x80000
20000036:	f1ae 0e04 	sub.w	lr, lr, #4
2000003a:	3b04      	subs	r3, #4
2000003c:	3404      	adds	r4, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000003e:	58e1      	ldr	r1, [r4, r3]
20000040:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000044:	4573      	cmp	r3, lr
20000046:	d1fa      	bne.n	2000003e <efc_perform_read_sequence+0x3e>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000048:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000004a:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2000004e:	f8cc 2004 	str.w	r2, [ip, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000052:	f8dc 3008 	ldr.w	r3, [ip, #8]
20000056:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000058:	9b01      	ldr	r3, [sp, #4]
2000005a:	07db      	lsls	r3, r3, #31
2000005c:	d5f9      	bpl.n	20000052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000005e:	f8dc 3000 	ldr.w	r3, [ip]
20000062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000066:	f8cc 3000 	str.w	r3, [ip]

	return EFC_RC_OK;
}
2000006a:	b002      	add	sp, #8
2000006c:	bd10      	pop	{r4, pc}
		return EFC_RC_INVALID;
2000006e:	2002      	movs	r0, #2
}
20000070:	b002      	add	sp, #8
20000072:	bd10      	pop	{r4, pc}

20000074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000074:	6001      	str	r1, [r0, #0]
}
20000076:	4770      	bx	lr

20000078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20000078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2000007c:	6883      	ldr	r3, [r0, #8]
2000007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	9b01      	ldr	r3, [sp, #4]
20000082:	07db      	lsls	r3, r3, #31
20000084:	d5fa      	bpl.n	2000007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20000086:	9801      	ldr	r0, [sp, #4]
}
20000088:	f000 0006 	and.w	r0, r0, #6
2000008c:	b002      	add	sp, #8
2000008e:	4770      	bx	lr

20000090 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000090:	f3bf 8f5f 	dmb	sy
20000094:	3801      	subs	r0, #1
20000096:	d1fb      	bne.n	20000090 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000098:	4770      	bx	lr
2000009a:	0000      	movs	r0, r0

2000009c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f44f 6380 	mov.w	r3, #1024	; 0x400
200000a0:	4819      	ldr	r0, [pc, #100]	; (20000108 <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000a2:	491a      	ldr	r1, [pc, #104]	; (2000010c <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a4:	4a1a      	ldr	r2, [pc, #104]	; (20000110 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000a6:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000a8:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000aa:	6a13      	ldr	r3, [r2, #32]
200000ac:	01db      	lsls	r3, r3, #7
200000ae:	d404      	bmi.n	200000ba <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b0:	4b18      	ldr	r3, [pc, #96]	; (20000114 <SystemInit+0x78>)
200000b2:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b6:	07d8      	lsls	r0, r3, #31
200000b8:	d5fc      	bpl.n	200000b4 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ba:	4a15      	ldr	r2, [pc, #84]	; (20000110 <SystemInit+0x74>)
200000bc:	4b16      	ldr	r3, [pc, #88]	; (20000118 <SystemInit+0x7c>)
200000be:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c2:	03d9      	lsls	r1, r3, #15
200000c4:	d5fc      	bpl.n	200000c0 <SystemInit+0x24>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000c8:	4811      	ldr	r0, [pc, #68]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ca:	f023 0303 	bic.w	r3, r3, #3
200000ce:	f043 0301 	orr.w	r3, r3, #1
200000d2:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
200000d6:	071b      	lsls	r3, r3, #28
200000d8:	d5fc      	bpl.n	200000d4 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000da:	4b10      	ldr	r3, [pc, #64]	; (2000011c <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000dc:	490c      	ldr	r1, [pc, #48]	; (20000110 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000de:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000e0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
200000e2:	0798      	lsls	r0, r3, #30
200000e4:	d5fc      	bpl.n	200000e0 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000e6:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e8:	4a09      	ldr	r2, [pc, #36]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000ea:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	0719      	lsls	r1, r3, #28
200000f0:	d5fc      	bpl.n	200000ec <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200000f2:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f4:	4906      	ldr	r1, [pc, #24]	; (20000110 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
200000f6:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000f8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
200000fa:	071b      	lsls	r3, r3, #28
200000fc:	d5fc      	bpl.n	200000f8 <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200000fe:	4b08      	ldr	r3, [pc, #32]	; (20000120 <SystemInit+0x84>)
20000100:	4a08      	ldr	r2, [pc, #32]	; (20000124 <SystemInit+0x88>)
20000102:	601a      	str	r2, [r3, #0]
}
20000104:	4770      	bx	lr
20000106:	bf00      	nop
20000108:	400e0800 	.word	0x400e0800
2000010c:	400e0a00 	.word	0x400e0a00
20000110:	400e0400 	.word	0x400e0400
20000114:	00370809 	.word	0x00370809
20000118:	01370809 	.word	0x01370809
2000011c:	200f3f01 	.word	0x200f3f01
20000120:	20000b6c 	.word	0x20000b6c
20000124:	05b8d800 	.word	0x05b8d800

20000128 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000128:	4b14      	ldr	r3, [pc, #80]	; (2000017c <system_init_flash+0x54>)
2000012a:	4298      	cmp	r0, r3
2000012c:	d205      	bcs.n	2000013a <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000012e:	2300      	movs	r3, #0
20000130:	4913      	ldr	r1, [pc, #76]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000132:	4a14      	ldr	r2, [pc, #80]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000134:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000136:	6013      	str	r3, [r2, #0]
20000138:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000013a:	4b13      	ldr	r3, [pc, #76]	; (20000188 <system_init_flash+0x60>)
2000013c:	4298      	cmp	r0, r3
2000013e:	d206      	bcs.n	2000014e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000140:	f44f 7380 	mov.w	r3, #256	; 0x100
20000144:	490e      	ldr	r1, [pc, #56]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20000146:	4a0f      	ldr	r2, [pc, #60]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000148:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000014a:	6013      	str	r3, [r2, #0]
2000014c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
2000014e:	4b0f      	ldr	r3, [pc, #60]	; (2000018c <system_init_flash+0x64>)
20000150:	4298      	cmp	r0, r3
20000152:	d806      	bhi.n	20000162 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000154:	f44f 7300 	mov.w	r3, #512	; 0x200
20000158:	4909      	ldr	r1, [pc, #36]	; (20000180 <system_init_flash+0x58>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000015a:	4a0a      	ldr	r2, [pc, #40]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2000015c:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000162:	4b0b      	ldr	r3, [pc, #44]	; (20000190 <system_init_flash+0x68>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000164:	4906      	ldr	r1, [pc, #24]	; (20000180 <system_init_flash+0x58>)
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000166:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000168:	bf94      	ite	ls
2000016a:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000016e:	f44f 6380 	movhi.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000172:	4a04      	ldr	r2, [pc, #16]	; (20000184 <system_init_flash+0x5c>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000174:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000176:	6013      	str	r3, [r2, #0]
	}
}
20000178:	4770      	bx	lr
2000017a:	bf00      	nop
2000017c:	016e3600 	.word	0x016e3600
20000180:	400e0800 	.word	0x400e0800
20000184:	400e0a00 	.word	0x400e0a00
20000188:	02625a00 	.word	0x02625a00
2000018c:	044aa1ff 	.word	0x044aa1ff
20000190:	0501bcff 	.word	0x0501bcff

20000194 <usb_serial_number>:
20000194:	30303030 30303030 30303030 44414544     000000000000DEAD
200001a4:	46454542 00000000 00000000 00000000     BEEF............
200001b4:	00000000                                ....

200001b8 <xram>:
200001b8:	60000000                                ...`

200001bc <ParameterTable>:
200001bc:	81000180 01900001 01019100 94170192     ................
200001cc:	03982101 01039e06 a40001a1               .!............

200001da <XPROG_Param_EEPageSize>:
200001da:	                                          .

200001dc <XPROG_Param_NVMBase>:
200001dc:	010001c0                                ....

200001e0 <XPROG_Param_NVMCMDRegAddr>:
200001e0:	                                         3

200001e1 <XPROG_Param_NVMCSRRegAddr>:
200001e1:	                                         2..

200001e4 <avrispmkIIfreqs>:
200001e4:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200001f4:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000204:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000214:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000224:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000234:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000244:	000099f1 00009586 00008d68 0000861f     ........h.......
20000254:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000264:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000274:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000284:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
20000294:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200002a4:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200002b4:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200002c4:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200002d4:	00001be1 00001a99 0000194e 00001822     ........N..."...
200002e4:	000016f7 000015e7 000014ef 000013e5     ................
200002f4:	00001306 00001219 00001142 00001071     ........B...q...
20000304:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000314:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000324:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000334:	000008d1 00000868 00000804 000007a4     ....h...........
20000344:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000354:	00000603 000005bc 00000576 00000535     ........v...5...
20000364:	000004f7 000004bc 00000483 0000044d     ............M...
20000374:	00000419 000003e8 000003b9 0000038d     ................
20000384:	00000362 0000033a 00000313 000002ee     b...:...........
20000394:	000002cb 000002aa 0000028a 0000026b     ............k...
200003a4:	0000024e 00000233 00000218 000001ff     N...3...........
200003b4:	000001e7 000001d1 000001bb 000001a6     ................
200003c4:	00000192 00000180 0000016e 0000015d     ........n...]...
200003d4:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200003e4:	00000112 00000105 000000f9 000000ee     ................
200003f4:	000000e2 000000d8 000000ce 000000c4     ................
20000404:	000000bb 000000b2 000000aa 000000a2     ................
20000414:	0000009a 00000093 0000008c 00000086     ................
20000424:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000434:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000444:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000454:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000464:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000474 <defaultTimeoutTicks>:
20000474:	000001f4                                ....

20000478 <MS_BOS_PACKET>:
20000478:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000488:	65d29c4c 8a649e9d 0300009f 01014a06     L..e..d......J..
20000498:	00000000                                ....

2000049c <MS_OS_DESC>:
2000049c:	0000000a 06030000 0008014a 00000002     ........J.......
200004ac:	001400a0 49570003 4253554e 00000000     ......WINUSB....
200004bc:	00000000 00840000 00070004 0044002a     ............*.D.
200004cc:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
200004dc:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
200004ec:	00440049 00000073 007b0050 00410030     I.D.s...P.{.0.A.
200004fc:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
2000050c:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
2000051c:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
2000052c:	00320036 00410030 00450043 00420032     6.2.0.A.C.E.2.B.
2000053c:	00450033 0000007d 00080000 00010002     3.E.}...........
2000054c:	001400a0 49570003 4253554e 00000000     ......WINUSB....
2000055c:	00000000 00840000 00070004 0044002a     ............*.D.
2000056c:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
2000057c:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
2000058c:	00440049 00000073 007b0050 00410031     I.D.s...P.{.1.A.
2000059c:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
200005ac:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
200005bc:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
200005cc:	00320036 00410031 00450043 00420032     6.2.1.A.C.E.2.B.
200005dc:	00450033 0000007d 00000000              3.E.}.......

200005e8 <udc_string_desc>:
200005e8:	00000300 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000                                ....

2000062c <udc_string_desc_languageid>:
2000062c:	04090304                                ....

20000630 <udc_string_manufacturer_name>:
20000630:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000640:	636e4920 0000002e                        Inc....

20000648 <udc_string_product_name>:
20000648:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000658:	                                         te.

2000065b <main_b_vendor_enable>:
2000065b:	                                         .

2000065c <usart0_driver>:
2000065c:	40090000 00000000 00000000 00000000     ...@............
2000066c:	00000000 00000000 00000000 00000000     ................
2000067c:	00000000 00000000 00000000 00000000     ................
2000068c:	00000000 00000000 00000000 00000000     ................
2000069c:	00000000 00000000 00000000 00000000     ................
200006ac:	00000000 00000000 00000000 00000000     ................
200006bc:	00000000 00000000 00000000 00000000     ................
200006cc:	00000000 00000000 00000000 00000000     ................
200006dc:	00000000 00000000 00000000 00000000     ................
200006ec:	00000000 00000000 00000000 00000000     ................
200006fc:	00000000 00000000 00000000 00000000     ................
2000070c:	00000000 00000000 00000000 00000000     ................
2000071c:	00000000 00000000 00000000 00000000     ................
2000072c:	00000000 00000000 00000000 00000000     ................
2000073c:	00000000 00000000 00000000 00000000     ................
2000074c:	00000000 00000000 00000000 00000000     ................
2000075c:	00000000 00000000 00000000 00000000     ................
2000076c:	00000000 00000000 00000000 00000000     ................
2000077c:	00000000 00000000 00000000 00000000     ................
2000078c:	00000000 00000000 00000000 00000000     ................
2000079c:	00000000 00000000 00000000 00000000     ................
200007ac:	00000000 00000000 00000000 00000000     ................
200007bc:	00000000 00000000 00000000 00000000     ................
200007cc:	00000000 00000000 00000000 00000000     ................
200007dc:	00000000 00000000 00000000 00000000     ................
200007ec:	00000000 00000000 00000000 00000000     ................
200007fc:	00000000 00000000 00000000 00000000     ................
2000080c:	00000000 00000000 00000000 00000000     ................
2000081c:	00000000 00000000 00000000 00000000     ................
2000082c:	00000000 00000000 00000000 00000000     ................
2000083c:	00000000 00000000 00000000 00000000     ................
2000084c:	00000000 00000000 00000000 00000000     ................
2000085c:	00000000 00000000 00000000 00000000     ................
2000086c:	00000000 00000000 00000000 00000000     ................
2000087c:	00000000 00000000 00000000 00000000     ................
2000088c:	00000000 00000000 00000000 00000000     ................
2000089c:	00000000 00000000 00000000 00000000     ................
200008ac:	00000000 00000000 00000000 00000000     ................
200008bc:	00000000 00000000 00000000 00000000     ................
200008cc:	00000000 00000000 00000000 00000000     ................
200008dc:	00000000 00000000 00000000 00000000     ................
200008ec:	00000000 00000000 00000000 00000009     ................

200008fc <mpsse_state>:
200008fc:	00000000 00000200 00000000 00000000     ................
2000090c:	0f000000 0e000000 0d000000 14000000     ................
2000091c:	18000000 00000000 00000000 00000000     ................
2000092c:	00000000 00000000 00000000 00000000     ................
2000093c:	00000000                                ....

20000940 <mpsse_udi_apis>:
20000940:	20000b2c 20000b2c                       ,.. ,.. 

20000948 <udc_config>:
20000948:	20000b00 20000968 20000b00 20000b14     ... h.. ... ... 
20000958:	20000960 00000000                       `.. ....

20000960 <udc_config_hs>:
20000960:	20000a38 20000b20                       8..  .. 

20000968 <udc_config_lsfs>:
20000968:	20000970 20000b20                       p..  .. 

20000970 <udc_desc_fs>:
20000970:	00620209 80000103 000409fa ffff0200     ..b.............
20000980:	050700ff 00400281 02050700 00004002     ......@......@..
20000990:	02010b08 00010202 00010409 01020201     ................
200009a0:	00240500 24040110 24050202 05020106     ..$....$...$....
200009b0:	02030124 03830507 09100040 02000204     $.......@.......
200009c0:	0000000a 02850507 07000040 40020605     ........@......@
200009d0:	00000000                                ....

200009d4 <udc_desc_fs_mpsse>:
200009d4:	00370209 80000102 000409fa ffff0200     ..7.............
200009e4:	050700ff 00400281 02050700 00004002     ......@......@..
200009f4:	00010409 ffffff02 85050700 00020002     ................
20000a04:	02060507 00000200 00000000 00000000     ................
20000a14:	00000000 00000000 00000000 00000000     ................
20000a24:	00000000 00000000 00000000 00000000     ................
20000a34:	00000000                                ....

20000a38 <udc_desc_hs>:
20000a38:	00620209 80000103 000409fa ffff0200     ..b.............
20000a48:	050700ff 02000281 02050700 00020002     ................
20000a58:	02010b08 00010202 00010409 01020201     ................
20000a68:	00240500 24040110 24050202 05020106     ..$....$...$....
20000a78:	02030124 03830507 09100040 02000204     $.......@.......
20000a88:	0000000a 02850507 07000200 00020605     ................
20000a98:	00000002                                ....

20000a9c <udc_desc_hs_mpsse>:
20000a9c:	00370209 80000102 000409fa ffff0200     ..7.............
20000aac:	050700ff 02000281 02050700 00020002     ................
20000abc:	00010409 ffffff02 85050700 00020002     ................
20000acc:	02060507 00000200 00000000 00000000     ................
20000adc:	00000000 00000000 00000000 00000000     ................
20000aec:	00000000 00000000 00000000 00000000     ................
20000afc:	00000000                                ....

20000b00 <udc_device_desc>:
20000b00:	02000112 40000000 ace22b3e 02010900     .......@>+......
20000b10:	00000103                                ....

20000b14 <udc_device_qual>:
20000b14:	0200060a 40000000 00000001              .......@....

20000b20 <udi_apis>:
20000b20:	20000b2c 20000b44 20000b58              ,.. D.. X.. 

20000b2c <udi_api_vendor>:
20000b2c:	00085c39 00085bf5 00085c09 00085be9     9\...[...\...[..
20000b3c:	00000000                                ....

20000b40 <g_interrupt_enabled>:
20000b40:	00000001                                ....

20000b44 <udi_api_cdc_comm>:
20000b44:	0008619d 000860e5 00086135 000860f9     .a...`..5a...`..
20000b54:	00000000                                ....

20000b58 <udi_api_cdc_data>:
20000b58:	000864c5 0008610d 000860f5 000860f9     .d...a...`...`..
20000b68:	00086399                                .c..

20000b6c <SystemCoreClock>:
20000b6c:	003d0900                                ..=.

20000b70 <_impure_ptr>:
20000b70:	20000b78 00000000                       x.. ....

20000b78 <impure_data>:
20000b78:	00000000 20000e64 20000ecc 20000f34     ....d.. ... 4.. 
20000b88:	00000000 00000000 00000000 00000000     ................
20000b98:	00000000 00000000 00000000 00000000     ................
20000ba8:	00000000 00000000 00000000 00000000     ................
20000bb8:	00000000 00000000 00000000 00000000     ................
20000bc8:	00000000 00000000 00000000 00000000     ................
20000bd8:	00000000 00000000 00000000 00000000     ................
20000be8:	00000000 00000000 00000000 00000000     ................
20000bf8:	00000000 00000000 00000000 00000000     ................
20000c08:	00000000 00000000 00000000 00000000     ................
20000c18:	00000000 00000000 00000001 00000000     ................
20000c28:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000c38:	00000000 00000000 00000000 00000000     ................
20000c48:	00000000 00000000 00000000 00000000     ................
20000c58:	00000000 00000000 00000000 00000000     ................
20000c68:	00000000 00000000 00000000 00000000     ................
20000c78:	00000000 00000000 00000000 00000000     ................
20000c88:	00000000 00000000 00000000 00000000     ................
20000c98:	00000000 00000000 00000000 00000000     ................
20000ca8:	00000000 00000000 00000000 00000000     ................
20000cb8:	00000000 00000000 00000000 00000000     ................
20000cc8:	00000000 00000000 00000000 00000000     ................
20000cd8:	00000000 00000000 00000000 00000000     ................
20000ce8:	00000000 00000000 00000000 00000000     ................
20000cf8:	00000000 00000000 00000000 00000000     ................
20000d08:	00000000 00000000 00000000 00000000     ................
20000d18:	00000000 00000000 00000000 00000000     ................
20000d28:	00000000 00000000 00000000 00000000     ................
20000d38:	00000000 00000000 00000000 00000000     ................
20000d48:	00000000 00000000 00000000 00000000     ................
20000d58:	00000000 00000000 00000000 00000000     ................
20000d68:	00000000 00000000 00000000 00000000     ................
20000d78:	00000000 00000000 00000000 00000000     ................
20000d88:	00000000 00000000 00000000 00000000     ................
20000d98:	00000000 00000000 00000000 00000000     ................
20000da8:	00000000 00000000 00000000 00000000     ................
20000db8:	00000000 00000000 00000000 00000000     ................
20000dc8:	00000000 00000000 00000000 00000000     ................
20000dd8:	00000000 00000000 00000000 00000000     ................
20000de8:	00000000 00000000 00000000 00000000     ................
20000df8:	00000000 00000000 00000000 00000000     ................
20000e08:	00000000 00000000 00000000 00000000     ................
20000e18:	00000000 00000000 00000000 00000000     ................
20000e28:	00000000 00000000 00000000 00000000     ................
20000e38:	00000000 00000000 00000000 00000000     ................
20000e48:	00000000 00000000 00000000 00000000     ................
20000e58:	00000000 00000000 00000000 00000000     ................
20000e68:	00000000 00000000 00000000 00000000     ................
20000e78:	00000000 00000000 00000000 00000000     ................
20000e88:	00000000 00000000 00000000 00000000     ................
20000e98:	00000000 00000000 00000000 00000000     ................
20000ea8:	00000000 00000000 00000000 00000000     ................
20000eb8:	00000000 00000000 00000000 00000000     ................
20000ec8:	00000000 00000000 00000000 00000000     ................
20000ed8:	00000000 00000000 00000000 00000000     ................
20000ee8:	00000000 00000000 00000000 00000000     ................
20000ef8:	00000000 00000000 00000000 00000000     ................
20000f08:	00000000 00000000 00000000 00000000     ................
20000f18:	00000000 00000000 00000000 00000000     ................
20000f28:	00000000 00000000 00000000 00000000     ................
20000f38:	00000000 00000000 00000000 00000000     ................
20000f48:	00000000 00000000 00000000 00000000     ................
20000f58:	00000000 00000000 00000000 00000000     ................
20000f68:	00000000 00000000 00000000 00000000     ................
20000f78:	00000000 00000000 00000000 00000000     ................
20000f88:	00000000 00000000 00000000 00000000     ................
20000f98:	00000000 00000000                       ........

20000fa0 <__atexit_recursive_mutex>:
20000fa0:	2000288c                                .(. 

20000fa4 <__global_locale>:
20000fa4:	00000043 00000000 00000000 00000000     C...............
20000fb4:	00000000 00000000 00000000 00000000     ................
20000fc4:	00000043 00000000 00000000 00000000     C...............
20000fd4:	00000000 00000000 00000000 00000000     ................
20000fe4:	00000043 00000000 00000000 00000000     C...............
20000ff4:	00000000 00000000 00000000 00000000     ................
20001004:	00000043 00000000 00000000 00000000     C...............
20001014:	00000000 00000000 00000000 00000000     ................
20001024:	00000043 00000000 00000000 00000000     C...............
20001034:	00000000 00000000 00000000 00000000     ................
20001044:	00000043 00000000 00000000 00000000     C...............
20001054:	00000000 00000000 00000000 00000000     ................
20001064:	00000043 00000000 00000000 00000000     C...............
20001074:	00000000 00000000 00000000 00000000     ................
20001084:	0008ca35 0008ba3d 00000000 0008daec     5...=...........
20001094:	0008d92c 0008d7f0 0008d7f0 0008d7f0     ,...............
200010a4:	0008d7f0 0008d7f0 0008d7f0 0008d7f0     ................
200010b4:	0008d7f0 0008d7f0 ffffffff ffffffff     ................
200010c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200010d4:	00000000 00000000 00000000 00000000     ................
200010e4:	00000000 00000000 53410000 00494943     ..........ASCII.
200010f4:	00000000 00000000 00000000 00000000     ................
20001104:	00000000 00000000 00000000              ............

20001110 <__malloc_av_>:
20001110:	00000000 00000000 20001110 20001110     ........... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 
20001350:	20001348 20001348 20001350 20001350     H.. H.. P.. P.. 
20001360:	20001358 20001358 20001360 20001360     X.. X.. `.. `.. 
20001370:	20001368 20001368 20001370 20001370     h.. h.. p.. p.. 
20001380:	20001378 20001378 20001380 20001380     x.. x.. ... ... 
20001390:	20001388 20001388 20001390 20001390     ... ... ... ... 
200013a0:	20001398 20001398 200013a0 200013a0     ... ... ... ... 
200013b0:	200013a8 200013a8 200013b0 200013b0     ... ... ... ... 
200013c0:	200013b8 200013b8 200013c0 200013c0     ... ... ... ... 
200013d0:	200013c8 200013c8 200013d0 200013d0     ... ... ... ... 
200013e0:	200013d8 200013d8 200013e0 200013e0     ... ... ... ... 
200013f0:	200013e8 200013e8 200013f0 200013f0     ... ... ... ... 
20001400:	200013f8 200013f8 20001400 20001400     ... ... ... ... 
20001410:	20001408 20001408 20001410 20001410     ... ... ... ... 
20001420:	20001418 20001418 20001420 20001420     ... ...  ..  .. 
20001430:	20001428 20001428 20001430 20001430     (.. (.. 0.. 0.. 
20001440:	20001438 20001438 20001440 20001440     8.. 8.. @.. @.. 
20001450:	20001448 20001448 20001450 20001450     H.. H.. P.. P.. 
20001460:	20001458 20001458 20001460 20001460     X.. X.. `.. `.. 
20001470:	20001468 20001468 20001470 20001470     h.. h.. p.. p.. 
20001480:	20001478 20001478 20001480 20001480     x.. x.. ... ... 
20001490:	20001488 20001488 20001490 20001490     ... ... ... ... 
200014a0:	20001498 20001498 200014a0 200014a0     ... ... ... ... 
200014b0:	200014a8 200014a8 200014b0 200014b0     ... ... ... ... 
200014c0:	200014b8 200014b8 200014c0 200014c0     ... ... ... ... 
200014d0:	200014c8 200014c8 200014d0 200014d0     ... ... ... ... 
200014e0:	200014d8 200014d8 200014e0 200014e0     ... ... ... ... 
200014f0:	200014e8 200014e8 200014f0 200014f0     ... ... ... ... 
20001500:	200014f8 200014f8 20001500 20001500     ... ... ... ... 
20001510:	20001508 20001508                       ... ... 

20001518 <__malloc_sbrk_base>:
20001518:	ffffffff                                ....

2000151c <__malloc_trim_threshold>:
2000151c:	00020000                                ....
