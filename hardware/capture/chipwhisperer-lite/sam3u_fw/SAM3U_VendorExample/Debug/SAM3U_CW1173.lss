
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d00c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d00c  0008d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001358  20000000  0008d014  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001384  20001358  0008e36c  00021358  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00021358  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00021381  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b101  00000000  00000000  000213cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000937e  00000000  00000000  0005c4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c6b6  00000000  00000000  0006584c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001528  00000000  00000000  00071f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001eb0  00000000  00000000  0007342a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021243  00000000  00000000  000752da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002fcc7  00000000  00000000  0009651d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0006055e  00000000  00000000  000c61e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000047d8  00000000  00000000  00126744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 7d 56 08 00 7b 56 08 00 7b 56 08 00     . . }V..{V..{V..
   80010:	7b 56 08 00 7b 56 08 00 7b 56 08 00 00 00 00 00     {V..{V..{V......
	...
   8002c:	7b 56 08 00 7b 56 08 00 00 00 00 00 7b 56 08 00     {V..{V......{V..
   8003c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 7b 56 08 00     {V..{V..{V..{V..
   8004c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 7b 56 08 00     {V..{V..{V..{V..
   8005c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 75 3d 08 00     {V..{V..{V..u=..
   8006c:	89 3d 08 00 7b 56 08 00 21 1a 08 00 7b 56 08 00     .=..{V..!...{V..
   8007c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 7b 56 08 00     {V..{V..{V..{V..
   8008c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 b1 2d 08 00     {V..{V..{V...-..
   8009c:	7b 56 08 00 7b 56 08 00 7b 56 08 00 7b 56 08 00     {V..{V..{V..{V..
   800ac:	7b 56 08 00 7b 56 08 00 21 45 08 00 7b 56 08 00     {V..{V..!E..{V..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001358 	.word	0x20001358
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d014 	.word	0x0008d014

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	2000135c 	.word	0x2000135c
   800f8:	0008d014 	.word	0x0008d014

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	2000137f 	.word	0x2000137f

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	2000269c 	.word	0x2000269c
   80194:	20001378 	.word	0x20001378
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	2000137f 	.word	0x2000137f
   801ec:	20001794 	.word	0x20001794
   801f0:	20001bac 	.word	0x20001bac
   801f4:	20001378 	.word	0x20001378
   801f8:	00081f39 	.word	0x00081f39
   801fc:	00081e85 	.word	0x00081e85

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001ba8 	.word	0x20001ba8
   80310:	00084cc5 	.word	0x00084cc5
   80314:	20001ba4 	.word	0x20001ba4
   80318:	00084d1d 	.word	0x00084d1d
   8031c:	20000982 	.word	0x20000982
   80320:	20001ba0 	.word	0x20001ba0
   80324:	20001b9c 	.word	0x20001b9c
   80328:	20001374 	.word	0x20001374
   8032c:	20001798 	.word	0x20001798
   80330:	00080341 	.word	0x00080341
   80334:	2000179c 	.word	0x2000179c
   80338:	00084f81 	.word	0x00084f81
   8033c:	00084d0d 	.word	0x00084d0d

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001ba0 	.word	0x20001ba0
   80368:	20001b9c 	.word	0x20001b9c
   8036c:	20001798 	.word	0x20001798
   80370:	20001ba8 	.word	0x20001ba8
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	20001380 	.word	0x20001380
   803a8:	00081ea1 	.word	0x00081ea1
   803ac:	20001376 	.word	0x20001376

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	20001378 	.word	0x20001378
   803c0:	00081f39 	.word	0x00081f39

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	20000982 	.word	0x20000982
   80400:	2000178c 	.word	0x2000178c
   80404:	20001788 	.word	0x20001788
   80408:	20001784 	.word	0x20001784

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	20000982 	.word	0x20000982
   804b8:	20001788 	.word	0x20001788
   804bc:	20001790 	.word	0x20001790
   804c0:	2000178c 	.word	0x2000178c
   804c4:	20001784 	.word	0x20001784
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	20001384 	.word	0x20001384
   804d4:	00084f81 	.word	0x00084f81
   804d8:	00081eb9 	.word	0x00081eb9

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	20001380 	.word	0x20001380
   8053c:	20001ba8 	.word	0x20001ba8
   80540:	20001798 	.word	0x20001798
   80544:	20001ba0 	.word	0x20001ba0
   80548:	20001b9c 	.word	0x20001b9c
   8054c:	20001ba4 	.word	0x20001ba4
   80550:	00080201 	.word	0x00080201
   80554:	20001790 	.word	0x20001790
   80558:	20001788 	.word	0x20001788
   8055c:	20001784 	.word	0x20001784
   80560:	2000178c 	.word	0x2000178c
   80564:	00080421 	.word	0x00080421
   80568:	20001376 	.word	0x20001376

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	20001788 	.word	0x20001788
   805b4:	20001784 	.word	0x20001784
   805b8:	20001790 	.word	0x20001790
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	20001384 	.word	0x20001384
   805c8:	00084f81 	.word	0x00084f81

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	20000982 	.word	0x20000982
   80660:	2000178c 	.word	0x2000178c
   80664:	20001376 	.word	0x20001376
   80668:	20001784 	.word	0x20001784
   8066c:	20001384 	.word	0x20001384
   80670:	00085f15 	.word	0x00085f15
   80674:	00080421 	.word	0x00080421
   80678:	20001788 	.word	0x20001788

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	20000982 	.word	0x20000982
   806e0:	20001ba0 	.word	0x20001ba0
   806e4:	20001b9c 	.word	0x20001b9c
   806e8:	20001ba8 	.word	0x20001ba8
   806ec:	20001798 	.word	0x20001798

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	20001378 	.word	0x20001378
   80778:	000806f1 	.word	0x000806f1
   8077c:	20000982 	.word	0x20000982
   80780:	20001b9c 	.word	0x20001b9c
   80784:	2000179c 	.word	0x2000179c
   80788:	20001376 	.word	0x20001376
   8078c:	20001ba0 	.word	0x20001ba0

00080790 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80790:	2300      	movs	r3, #0
   80792:	6043      	str	r3, [r0, #4]
   80794:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   80796:	6083      	str	r3, [r0, #8]
}
   80798:	4770      	bx	lr

0008079a <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   8079a:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   8079c:	6804      	ldr	r4, [r0, #0]
    newhead++;
   8079e:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807a0:	2cc8      	cmp	r4, #200	; 0xc8
   807a2:	bf28      	it	cs
   807a4:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   807a6:	6843      	ldr	r3, [r0, #4]
   807a8:	42a3      	cmp	r3, r4
   807aa:	d105      	bne.n	807b8 <add_to_circ_buf+0x1e>
    {
        if (!block)
   807ac:	2a00      	cmp	r2, #0
   807ae:	d1fa      	bne.n	807a6 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   807b0:	6883      	ldr	r3, [r0, #8]
   807b2:	3301      	adds	r3, #1
   807b4:	6083      	str	r3, [r0, #8]
            return;
   807b6:	e003      	b.n	807c0 <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   807b8:	6803      	ldr	r3, [r0, #0]
   807ba:	4403      	add	r3, r0
   807bc:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   807be:	6004      	str	r4, [r0, #0]
}
   807c0:	bc10      	pop	{r4}
   807c2:	4770      	bx	lr

000807c4 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   807c4:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   807c6:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   807c8:	18c1      	adds	r1, r0, r3
   807ca:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head)
   807cc:	6811      	ldr	r1, [r2, #0]
   807ce:	4299      	cmp	r1, r3
   807d0:	d005      	beq.n	807de <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   807d2:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   807d4:	2bc8      	cmp	r3, #200	; 0xc8
   807d6:	bf28      	it	cs
   807d8:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   807da:	6053      	str	r3, [r2, #4]

    return retval;
   807dc:	4770      	bx	lr
        return SERIAL_ERR;
   807de:	20ff      	movs	r0, #255	; 0xff
}
   807e0:	4770      	bx	lr

000807e2 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   807e2:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   807e4:	6840      	ldr	r0, [r0, #4]
}
   807e6:	1ac0      	subs	r0, r0, r3
   807e8:	bf18      	it	ne
   807ea:	2001      	movne	r0, #1
   807ec:	4770      	bx	lr

000807ee <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   807ee:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   807f0:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   807f2:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   807f4:	bf48      	it	mi
   807f6:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   807f8:	4770      	bx	lr
	...

000807fc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   807fc:	b510      	push	{r4, lr}
	
    FPGA_NPROG_LOW();
   807fe:	2008      	movs	r0, #8
   80800:	4b19      	ldr	r3, [pc, #100]	; (80868 <fpga_program_setup1+0x6c>)
   80802:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80804:	4c19      	ldr	r4, [pc, #100]	; (8086c <fpga_program_setup1+0x70>)
   80806:	4620      	mov	r0, r4
   80808:	4b19      	ldr	r3, [pc, #100]	; (80870 <fpga_program_setup1+0x74>)
   8080a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8080c:	2380      	movs	r3, #128	; 0x80
   8080e:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80810:	6863      	ldr	r3, [r4, #4]
   80812:	f043 0301 	orr.w	r3, r3, #1
   80816:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80818:	6863      	ldr	r3, [r4, #4]
   8081a:	f043 0310 	orr.w	r3, r3, #16
   8081e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80820:	6863      	ldr	r3, [r4, #4]
   80822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80826:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80828:	2200      	movs	r2, #0
   8082a:	4611      	mov	r1, r2
   8082c:	4620      	mov	r0, r4
   8082e:	4b11      	ldr	r3, [pc, #68]	; (80874 <fpga_program_setup1+0x78>)
   80830:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80832:	2201      	movs	r2, #1
   80834:	2100      	movs	r1, #0
   80836:	4620      	mov	r0, r4
   80838:	4b0f      	ldr	r3, [pc, #60]	; (80878 <fpga_program_setup1+0x7c>)
   8083a:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   8083c:	490f      	ldr	r1, [pc, #60]	; (8087c <fpga_program_setup1+0x80>)
   8083e:	4810      	ldr	r0, [pc, #64]	; (80880 <fpga_program_setup1+0x84>)
   80840:	4b10      	ldr	r3, [pc, #64]	; (80884 <fpga_program_setup1+0x88>)
   80842:	4798      	blx	r3
   80844:	b2c2      	uxtb	r2, r0
   80846:	2100      	movs	r1, #0
   80848:	4620      	mov	r0, r4
   8084a:	4b0f      	ldr	r3, [pc, #60]	; (80888 <fpga_program_setup1+0x8c>)
   8084c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8084e:	2301      	movs	r3, #1
   80850:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80852:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80856:	200e      	movs	r0, #14
   80858:	4c0c      	ldr	r4, [pc, #48]	; (8088c <fpga_program_setup1+0x90>)
   8085a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8085c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80860:	200f      	movs	r0, #15
   80862:	47a0      	blx	r4
	#endif
#endif
}
   80864:	bd10      	pop	{r4, pc}
   80866:	bf00      	nop
   80868:	00083b9f 	.word	0x00083b9f
   8086c:	40008000 	.word	0x40008000
   80870:	00083f81 	.word	0x00083f81
   80874:	00084003 	.word	0x00084003
   80878:	00084021 	.word	0x00084021
   8087c:	05b8d800 	.word	0x05b8d800
   80880:	000f4240 	.word	0x000f4240
   80884:	0008403f 	.word	0x0008403f
   80888:	00084055 	.word	0x00084055
   8088c:	00083bb9 	.word	0x00083bb9

00080890 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80890:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   80892:	2008      	movs	r0, #8
   80894:	4b01      	ldr	r3, [pc, #4]	; (8089c <fpga_program_setup2+0xc>)
   80896:	4798      	blx	r3
}
   80898:	bd08      	pop	{r3, pc}
   8089a:	bf00      	nop
   8089c:	00083b85 	.word	0x00083b85

000808a0 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   808a0:	b510      	push	{r4, lr}
   808a2:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   808a4:	2300      	movs	r3, #0
   808a6:	461a      	mov	r2, r3
   808a8:	4801      	ldr	r0, [pc, #4]	; (808b0 <fpga_program_sendbyte+0x10>)
   808aa:	4c02      	ldr	r4, [pc, #8]	; (808b4 <fpga_program_sendbyte+0x14>)
   808ac:	47a0      	blx	r4
		#endif
	#endif
}
   808ae:	bd10      	pop	{r4, pc}
   808b0:	40008000 	.word	0x40008000
   808b4:	00083fcf 	.word	0x00083fcf

000808b8 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   808b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808bc:	b08d      	sub	sp, #52	; 0x34
   808be:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   808c0:	4b92      	ldr	r3, [pc, #584]	; (80b0c <ISPProtocol_ProgramMemory+0x254>)
   808c2:	8999      	ldrh	r1, [r3, #12]
   808c4:	2909      	cmp	r1, #9
   808c6:	d005      	beq.n	808d4 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   808c8:	4891      	ldr	r0, [pc, #580]	; (80b10 <ISPProtocol_ProgramMemory+0x258>)
   808ca:	4b92      	ldr	r3, [pc, #584]	; (80b14 <ISPProtocol_ProgramMemory+0x25c>)
   808cc:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   808ce:	b00d      	add	sp, #52	; 0x34
   808d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808d4:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   808d6:	4b8d      	ldr	r3, [pc, #564]	; (80b0c <ISPProtocol_ProgramMemory+0x254>)
   808d8:	689a      	ldr	r2, [r3, #8]
   808da:	ab09      	add	r3, sp, #36	; 0x24
   808dc:	6810      	ldr	r0, [r2, #0]
   808de:	6851      	ldr	r1, [r2, #4]
   808e0:	c303      	stmia	r3!, {r0, r1}
   808e2:	8912      	ldrh	r2, [r2, #8]
   808e4:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   808e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   808ea:	9305      	str	r3, [sp, #20]
   808ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   808f0:	d813      	bhi.n	8091a <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   808f2:	f1bb 0f13 	cmp.w	fp, #19
   808f6:	bf0c      	ite	eq
   808f8:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   808fc:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   80900:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   80902:	4b85      	ldr	r3, [pc, #532]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80904:	681b      	ldr	r3, [r3, #0]
   80906:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80908:	9b05      	ldr	r3, [sp, #20]
   8090a:	2b00      	cmp	r3, #0
   8090c:	d043      	beq.n	80996 <ISPProtocol_ProgramMemory+0xde>
   8090e:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   80910:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   80912:	4627      	mov	r7, r4
   80914:	f8cd b008 	str.w	fp, [sp, #8]
   80918:	e0a6      	b.n	80a68 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   8091a:	4b80      	ldr	r3, [pc, #512]	; (80b1c <ISPProtocol_ProgramMemory+0x264>)
   8091c:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80920:	22c0      	movs	r2, #192	; 0xc0
   80922:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   80924:	4b7e      	ldr	r3, [pc, #504]	; (80b20 <ISPProtocol_ProgramMemory+0x268>)
   80926:	2202      	movs	r2, #2
   80928:	801a      	strh	r2, [r3, #0]
		return;
   8092a:	e7d0      	b.n	808ce <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   8092c:	4b7d      	ldr	r3, [pc, #500]	; (80b24 <ISPProtocol_ProgramMemory+0x26c>)
   8092e:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80930:	4b7d      	ldr	r3, [pc, #500]	; (80b28 <ISPProtocol_ProgramMemory+0x270>)
   80932:	701f      	strb	r7, [r3, #0]
   80934:	e0a3      	b.n	80a7e <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   80936:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   8093a:	f043 0308 	orr.w	r3, r3, #8
   8093e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80942:	4b75      	ldr	r3, [pc, #468]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80944:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80946:	f018 0f01 	tst.w	r8, #1
   8094a:	f000 80d4 	beq.w	80af6 <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   8094e:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   80950:	4a71      	ldr	r2, [pc, #452]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80952:	6813      	ldr	r3, [r2, #0]
   80954:	3301      	adds	r3, #1
   80956:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80958:	9a02      	ldr	r2, [sp, #8]
   8095a:	2a13      	cmp	r2, #19
   8095c:	d17f      	bne.n	80a5e <ISPProtocol_ProgramMemory+0x1a6>
   8095e:	b29b      	uxth	r3, r3
   80960:	2b00      	cmp	r3, #0
   80962:	d17c      	bne.n	80a5e <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   80964:	2301      	movs	r3, #1
   80966:	4a70      	ldr	r2, [pc, #448]	; (80b28 <ISPProtocol_ProgramMemory+0x270>)
   80968:	7013      	strb	r3, [r2, #0]
   8096a:	e078      	b.n	80a5e <ISPProtocol_ProgramMemory+0x1a6>
   8096c:	9304      	str	r3, [sp, #16]
   8096e:	e061      	b.n	80a34 <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80970:	9304      	str	r3, [sp, #16]
   80972:	e06d      	b.n	80a50 <ISPProtocol_ProgramMemory+0x198>
   80974:	f8dd b008 	ldr.w	fp, [sp, #8]
   80978:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   8097a:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   8097e:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   80982:	2c00      	cmp	r4, #0
   80984:	db0e      	blt.n	809a4 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   80986:	4a65      	ldr	r2, [pc, #404]	; (80b1c <ISPProtocol_ProgramMemory+0x264>)
   80988:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   8098c:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   8098e:	4b64      	ldr	r3, [pc, #400]	; (80b20 <ISPProtocol_ProgramMemory+0x268>)
   80990:	2202      	movs	r2, #2
   80992:	801a      	strh	r2, [r3, #0]
   80994:	e79b      	b.n	808ce <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   80996:	9b05      	ldr	r3, [sp, #20]
   80998:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   8099a:	2300      	movs	r3, #0
   8099c:	e7ed      	b.n	8097a <ISPProtocol_ProgramMemory+0xc2>
   8099e:	f8dd b008 	ldr.w	fp, [sp, #8]
   809a2:	e7ea      	b.n	8097a <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   809a4:	4f61      	ldr	r7, [pc, #388]	; (80b2c <ISPProtocol_ProgramMemory+0x274>)
   809a6:	2300      	movs	r3, #0
   809a8:	461a      	mov	r2, r3
   809aa:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   809ae:	4638      	mov	r0, r7
   809b0:	4e5f      	ldr	r6, [pc, #380]	; (80b30 <ISPProtocol_ProgramMemory+0x278>)
   809b2:	47b0      	blx	r6
   809b4:	2300      	movs	r3, #0
   809b6:	461a      	mov	r2, r3
   809b8:	9907      	ldr	r1, [sp, #28]
   809ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
   809be:	4638      	mov	r0, r7
   809c0:	47b0      	blx	r6
   809c2:	2300      	movs	r3, #0
   809c4:	461a      	mov	r2, r3
   809c6:	f89d 101c 	ldrb.w	r1, [sp, #28]
   809ca:	4638      	mov	r0, r7
   809cc:	47b0      	blx	r6
   809ce:	2300      	movs	r3, #0
   809d0:	461a      	mov	r2, r3
   809d2:	4619      	mov	r1, r3
   809d4:	4638      	mov	r0, r7
   809d6:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   809d8:	f015 0f20 	tst.w	r5, #32
   809dc:	d007      	beq.n	809ee <ISPProtocol_ProgramMemory+0x136>
   809de:	9b04      	ldr	r3, [sp, #16]
   809e0:	b92b      	cbnz	r3, 809ee <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   809e2:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   809e6:	f043 0310 	orr.w	r3, r3, #16
   809ea:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   809ee:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   809f2:	9300      	str	r3, [sp, #0]
   809f4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   809f8:	9a06      	ldr	r2, [sp, #24]
   809fa:	9904      	ldr	r1, [sp, #16]
   809fc:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80a00:	4c4c      	ldr	r4, [pc, #304]	; (80b34 <ISPProtocol_ProgramMemory+0x27c>)
   80a02:	47a0      	blx	r4
   80a04:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a06:	f1bb 0f13 	cmp.w	fp, #19
   80a0a:	d1bc      	bne.n	80986 <ISPProtocol_ProgramMemory+0xce>
   80a0c:	4a42      	ldr	r2, [pc, #264]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80a0e:	8812      	ldrh	r2, [r2, #0]
   80a10:	2a00      	cmp	r2, #0
   80a12:	d1b8      	bne.n	80986 <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   80a14:	4a44      	ldr	r2, [pc, #272]	; (80b28 <ISPProtocol_ProgramMemory+0x270>)
   80a16:	2101      	movs	r1, #1
   80a18:	7011      	strb	r1, [r2, #0]
   80a1a:	e7b4      	b.n	80986 <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   80a1c:	4a3e      	ldr	r2, [pc, #248]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80a1e:	6813      	ldr	r3, [r2, #0]
   80a20:	3301      	adds	r3, #1
   80a22:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a24:	e01b      	b.n	80a5e <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a26:	f018 0f01 	tst.w	r8, #1
   80a2a:	d067      	beq.n	80afc <ISPProtocol_ProgramMemory+0x244>
   80a2c:	e010      	b.n	80a50 <ISPProtocol_ProgramMemory+0x198>
   80a2e:	f018 0f01 	tst.w	r8, #1
   80a32:	d10d      	bne.n	80a50 <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80a34:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a38:	9300      	str	r3, [sp, #0]
   80a3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80a3e:	9a06      	ldr	r2, [sp, #24]
   80a40:	9904      	ldr	r1, [sp, #16]
   80a42:	4640      	mov	r0, r8
   80a44:	4d3b      	ldr	r5, [pc, #236]	; (80b34 <ISPProtocol_ProgramMemory+0x27c>)
   80a46:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   80a48:	4603      	mov	r3, r0
   80a4a:	2800      	cmp	r0, #0
   80a4c:	d1a7      	bne.n	8099e <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   80a4e:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80a50:	f014 0f01 	tst.w	r4, #1
   80a54:	f47f af7c 	bne.w	80950 <ISPProtocol_ProgramMemory+0x98>
   80a58:	9b02      	ldr	r3, [sp, #8]
   80a5a:	2b15      	cmp	r3, #21
   80a5c:	d0de      	beq.n	80a1c <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80a5e:	3401      	adds	r4, #1
   80a60:	b2a4      	uxth	r4, r4
   80a62:	9b05      	ldr	r3, [sp, #20]
   80a64:	42a3      	cmp	r3, r4
   80a66:	d085      	beq.n	80974 <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80a68:	9b03      	ldr	r3, [sp, #12]
   80a6a:	f813 bb01 	ldrb.w	fp, [r3], #1
   80a6e:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80a70:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80a74:	4b2c      	ldr	r3, [pc, #176]	; (80b28 <ISPProtocol_ProgramMemory+0x270>)
   80a76:	781b      	ldrb	r3, [r3, #0]
   80a78:	2b00      	cmp	r3, #0
   80a7a:	f47f af57 	bne.w	8092c <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80a7e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   80a82:	4e2a      	ldr	r6, [pc, #168]	; (80b2c <ISPProtocol_ProgramMemory+0x274>)
   80a84:	463b      	mov	r3, r7
   80a86:	463a      	mov	r2, r7
   80a88:	4649      	mov	r1, r9
   80a8a:	4630      	mov	r0, r6
   80a8c:	4d28      	ldr	r5, [pc, #160]	; (80b30 <ISPProtocol_ProgramMemory+0x278>)
   80a8e:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80a90:	f8df a084 	ldr.w	sl, [pc, #132]	; 80b18 <ISPProtocol_ProgramMemory+0x260>
   80a94:	463b      	mov	r3, r7
   80a96:	463a      	mov	r2, r7
   80a98:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80a9c:	4630      	mov	r0, r6
   80a9e:	47a8      	blx	r5
   80aa0:	463b      	mov	r3, r7
   80aa2:	463a      	mov	r2, r7
   80aa4:	f89a 1000 	ldrb.w	r1, [sl]
   80aa8:	4630      	mov	r0, r6
   80aaa:	47a8      	blx	r5
   80aac:	463b      	mov	r3, r7
   80aae:	463a      	mov	r2, r7
   80ab0:	4659      	mov	r1, fp
   80ab2:	4630      	mov	r0, r6
   80ab4:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80ab6:	9b02      	ldr	r3, [sp, #8]
   80ab8:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80aba:	bf04      	itt	eq
   80abc:	f089 0908 	eoreq.w	r9, r9, #8
   80ac0:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80ac4:	9b04      	ldr	r3, [sp, #16]
   80ac6:	2b00      	cmp	r3, #0
   80ac8:	d1b1      	bne.n	80a2e <ISPProtocol_ProgramMemory+0x176>
   80aca:	9b06      	ldr	r3, [sp, #24]
   80acc:	455b      	cmp	r3, fp
   80ace:	d0aa      	beq.n	80a26 <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80ad0:	f014 0f01 	tst.w	r4, #1
   80ad4:	d003      	beq.n	80ade <ISPProtocol_ProgramMemory+0x226>
   80ad6:	9b02      	ldr	r3, [sp, #8]
   80ad8:	2b13      	cmp	r3, #19
   80ada:	f43f af2c 	beq.w	80936 <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80ade:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80ae2:	f023 0308 	bic.w	r3, r3, #8
   80ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80aea:	4b0b      	ldr	r3, [pc, #44]	; (80b18 <ISPProtocol_ProgramMemory+0x260>)
   80aec:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80aee:	f018 0f01 	tst.w	r8, #1
   80af2:	f47f af3d 	bne.w	80970 <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80af6:	2b00      	cmp	r3, #0
   80af8:	f47f af38 	bne.w	8096c <ISPProtocol_ProgramMemory+0xb4>
   80afc:	f018 0f08 	tst.w	r8, #8
   80b00:	d198      	bne.n	80a34 <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80b02:	f028 0806 	bic.w	r8, r8, #6
   80b06:	f048 0802 	orr.w	r8, r8, #2
   80b0a:	e793      	b.n	80a34 <ISPProtocol_ProgramMemory+0x17c>
   80b0c:	2000269c 	.word	0x2000269c
   80b10:	0008ca6c 	.word	0x0008ca6c
   80b14:	00085eed 	.word	0x00085eed
   80b18:	2000267c 	.word	0x2000267c
   80b1c:	2000265c 	.word	0x2000265c
   80b20:	2000265a 	.word	0x2000265a
   80b24:	00081199 	.word	0x00081199
   80b28:	20002658 	.word	0x20002658
   80b2c:	40008000 	.word	0x40008000
   80b30:	00083fcf 	.word	0x00083fcf
   80b34:	000811d9 	.word	0x000811d9

00080b38 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   80b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b3c:	b085      	sub	sp, #20
   80b3e:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80b40:	4b45      	ldr	r3, [pc, #276]	; (80c58 <ISPProtocol_ReadMemory+0x120>)
   80b42:	899b      	ldrh	r3, [r3, #12]
   80b44:	2b03      	cmp	r3, #3
   80b46:	d118      	bne.n	80b7a <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80b48:	4b43      	ldr	r3, [pc, #268]	; (80c58 <ISPProtocol_ReadMemory+0x120>)
   80b4a:	689b      	ldr	r3, [r3, #8]
   80b4c:	681b      	ldr	r3, [r3, #0]
   80b4e:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80b50:	4a42      	ldr	r2, [pc, #264]	; (80c5c <ISPProtocol_ReadMemory+0x124>)
   80b52:	9800      	ldr	r0, [sp, #0]
   80b54:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80b56:	20c0      	movs	r0, #192	; 0xc0
   80b58:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   80b5a:	4a41      	ldr	r2, [pc, #260]	; (80c60 <ISPProtocol_ReadMemory+0x128>)
   80b5c:	2002      	movs	r0, #2
   80b5e:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80b60:	b29b      	uxth	r3, r3
   80b62:	9301      	str	r3, [sp, #4]
   80b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80b68:	d872      	bhi.n	80c50 <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80b6a:	2b00      	cmp	r3, #0
   80b6c:	d06a      	beq.n	80c44 <ISPProtocol_ReadMemory+0x10c>
   80b6e:	f101 38ff 	add.w	r8, r1, #4294967295
   80b72:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   80b74:	463e      	mov	r6, r7
   80b76:	4c3b      	ldr	r4, [pc, #236]	; (80c64 <ISPProtocol_ReadMemory+0x12c>)
   80b78:	e026      	b.n	80bc8 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80b7a:	4619      	mov	r1, r3
   80b7c:	483a      	ldr	r0, [pc, #232]	; (80c68 <ISPProtocol_ReadMemory+0x130>)
   80b7e:	4b3b      	ldr	r3, [pc, #236]	; (80c6c <ISPProtocol_ReadMemory+0x134>)
   80b80:	4798      	blx	r3
		return;
   80b82:	e065      	b.n	80c50 <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   80b84:	4b3a      	ldr	r3, [pc, #232]	; (80c70 <ISPProtocol_ReadMemory+0x138>)
   80b86:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80b88:	4b3a      	ldr	r3, [pc, #232]	; (80c74 <ISPProtocol_ReadMemory+0x13c>)
   80b8a:	701e      	strb	r6, [r3, #0]
   80b8c:	e022      	b.n	80bd4 <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80b8e:	f089 0908 	eor.w	r9, r9, #8
   80b92:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80b96:	f01b 0f01 	tst.w	fp, #1
   80b9a:	d010      	beq.n	80bbe <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   80b9c:	4a36      	ldr	r2, [pc, #216]	; (80c78 <ISPProtocol_ReadMemory+0x140>)
   80b9e:	6813      	ldr	r3, [r2, #0]
   80ba0:	3301      	adds	r3, #1
   80ba2:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80ba4:	e006      	b.n	80bb4 <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   80ba6:	4a34      	ldr	r2, [pc, #208]	; (80c78 <ISPProtocol_ReadMemory+0x140>)
   80ba8:	6813      	ldr	r3, [r2, #0]
   80baa:	3301      	adds	r3, #1
   80bac:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80bae:	9a00      	ldr	r2, [sp, #0]
   80bb0:	2a16      	cmp	r2, #22
   80bb2:	d004      	beq.n	80bbe <ISPProtocol_ReadMemory+0x86>
   80bb4:	b29b      	uxth	r3, r3
   80bb6:	b913      	cbnz	r3, 80bbe <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   80bb8:	2301      	movs	r3, #1
   80bba:	4a2e      	ldr	r2, [pc, #184]	; (80c74 <ISPProtocol_ReadMemory+0x13c>)
   80bbc:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80bbe:	3701      	adds	r7, #1
   80bc0:	b2bb      	uxth	r3, r7
   80bc2:	9a01      	ldr	r2, [sp, #4]
   80bc4:	429a      	cmp	r2, r3
   80bc6:	d93d      	bls.n	80c44 <ISPProtocol_ReadMemory+0x10c>
   80bc8:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   80bcc:	4b29      	ldr	r3, [pc, #164]	; (80c74 <ISPProtocol_ReadMemory+0x13c>)
   80bce:	781b      	ldrb	r3, [r3, #0]
   80bd0:	2b00      	cmp	r3, #0
   80bd2:	d1d7      	bne.n	80b84 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80bd4:	f89d 900e 	ldrb.w	r9, [sp, #14]
   80bd8:	4633      	mov	r3, r6
   80bda:	4632      	mov	r2, r6
   80bdc:	4649      	mov	r1, r9
   80bde:	4620      	mov	r0, r4
   80be0:	4d26      	ldr	r5, [pc, #152]	; (80c7c <ISPProtocol_ReadMemory+0x144>)
   80be2:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80be4:	f8df a090 	ldr.w	sl, [pc, #144]	; 80c78 <ISPProtocol_ReadMemory+0x140>
   80be8:	4633      	mov	r3, r6
   80bea:	4632      	mov	r2, r6
   80bec:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80bf0:	4620      	mov	r0, r4
   80bf2:	47a8      	blx	r5
   80bf4:	4633      	mov	r3, r6
   80bf6:	4632      	mov	r2, r6
   80bf8:	f89a 1000 	ldrb.w	r1, [sl]
   80bfc:	4620      	mov	r0, r4
   80bfe:	47a8      	blx	r5
   80c00:	4633      	mov	r3, r6
   80c02:	4632      	mov	r2, r6
   80c04:	4631      	mov	r1, r6
   80c06:	4620      	mov	r0, r4
   80c08:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80c0a:	6923      	ldr	r3, [r4, #16]
   80c0c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80c10:	d0fb      	beq.n	80c0a <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   80c12:	f10d 0209 	add.w	r2, sp, #9
   80c16:	f10d 010a 	add.w	r1, sp, #10
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b18      	ldr	r3, [pc, #96]	; (80c80 <ISPProtocol_ReadMemory+0x148>)
   80c1e:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   80c20:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80c24:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80c28:	9b00      	ldr	r3, [sp, #0]
   80c2a:	2b14      	cmp	r3, #20
   80c2c:	d0af      	beq.n	80b8e <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c2e:	f01b 0f01 	tst.w	fp, #1
   80c32:	d1b8      	bne.n	80ba6 <ISPProtocol_ReadMemory+0x6e>
   80c34:	9b00      	ldr	r3, [sp, #0]
   80c36:	2b16      	cmp	r3, #22
   80c38:	d1c1      	bne.n	80bbe <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   80c3a:	4a0f      	ldr	r2, [pc, #60]	; (80c78 <ISPProtocol_ReadMemory+0x140>)
   80c3c:	6813      	ldr	r3, [r2, #0]
   80c3e:	3301      	adds	r3, #1
   80c40:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c42:	e7bc      	b.n	80bbe <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80c44:	4b05      	ldr	r3, [pc, #20]	; (80c5c <ISPProtocol_ReadMemory+0x124>)
   80c46:	2200      	movs	r2, #0
   80c48:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80c4a:	4b05      	ldr	r3, [pc, #20]	; (80c60 <ISPProtocol_ReadMemory+0x128>)
   80c4c:	2202      	movs	r2, #2
   80c4e:	801a      	strh	r2, [r3, #0]
}
   80c50:	b005      	add	sp, #20
   80c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c56:	bf00      	nop
   80c58:	2000269c 	.word	0x2000269c
   80c5c:	2000265c 	.word	0x2000265c
   80c60:	2000265a 	.word	0x2000265a
   80c64:	40008000 	.word	0x40008000
   80c68:	0008ca14 	.word	0x0008ca14
   80c6c:	00085eed 	.word	0x00085eed
   80c70:	00081199 	.word	0x00081199
   80c74:	20002658 	.word	0x20002658
   80c78:	2000267c 	.word	0x2000267c
   80c7c:	00083fcf 	.word	0x00083fcf
   80c80:	00083fa1 	.word	0x00083fa1

00080c84 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   80c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c88:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80c8a:	4b21      	ldr	r3, [pc, #132]	; (80d10 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c8c:	8999      	ldrh	r1, [r3, #12]
   80c8e:	2905      	cmp	r1, #5
   80c90:	d139      	bne.n	80d06 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   80c92:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80c94:	4b1e      	ldr	r3, [pc, #120]	; (80d10 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c96:	689b      	ldr	r3, [r3, #8]
   80c98:	6818      	ldr	r0, [r3, #0]
   80c9a:	9002      	str	r0, [sp, #8]
   80c9c:	791a      	ldrb	r2, [r3, #4]
   80c9e:	f88d 200c 	strb.w	r2, [sp, #12]
   80ca2:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80ca6:	f10d 0609 	add.w	r6, sp, #9
   80caa:	ad01      	add	r5, sp, #4
   80cac:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80cb0:	4c18      	ldr	r4, [pc, #96]	; (80d14 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80cb2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80d28 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   80cb6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80d2c <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   80cba:	2300      	movs	r3, #0
   80cbc:	461a      	mov	r2, r3
   80cbe:	f816 1b01 	ldrb.w	r1, [r6], #1
   80cc2:	4620      	mov	r0, r4
   80cc4:	47c8      	blx	r9
   80cc6:	6923      	ldr	r3, [r4, #16]
   80cc8:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ccc:	d0fb      	beq.n	80cc6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   80cce:	f10d 0201 	add.w	r2, sp, #1
   80cd2:	f10d 0102 	add.w	r1, sp, #2
   80cd6:	4620      	mov	r0, r4
   80cd8:	47c0      	blx	r8
			return  ReceivedByte;
   80cda:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80cde:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80ce2:	4555      	cmp	r5, sl
   80ce4:	d1e9      	bne.n	80cba <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   80ce6:	4b0c      	ldr	r3, [pc, #48]	; (80d18 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   80ce8:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cea:	2200      	movs	r2, #0
   80cec:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80cee:	a904      	add	r1, sp, #16
   80cf0:	448b      	add	fp, r1
   80cf2:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80cf6:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80cf8:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80cfa:	4b08      	ldr	r3, [pc, #32]	; (80d1c <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   80cfc:	2204      	movs	r2, #4
   80cfe:	801a      	strh	r2, [r3, #0]
}
   80d00:	b005      	add	sp, #20
   80d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d06:	4806      	ldr	r0, [pc, #24]	; (80d20 <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   80d08:	4b06      	ldr	r3, [pc, #24]	; (80d24 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   80d0a:	4798      	blx	r3
		return;
   80d0c:	e7f8      	b.n	80d00 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   80d0e:	bf00      	nop
   80d10:	2000269c 	.word	0x2000269c
   80d14:	40008000 	.word	0x40008000
   80d18:	2000265c 	.word	0x2000265c
   80d1c:	2000265a 	.word	0x2000265a
   80d20:	0008ca6c 	.word	0x0008ca6c
   80d24:	00085eed 	.word	0x00085eed
   80d28:	00083fcf 	.word	0x00083fcf
   80d2c:	00083fa1 	.word	0x00083fa1

00080d30 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   80d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80d34:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80d36:	4b13      	ldr	r3, [pc, #76]	; (80d84 <ISPProtocol_WriteFuseLock+0x54>)
   80d38:	8999      	ldrh	r1, [r3, #12]
   80d3a:	2904      	cmp	r1, #4
   80d3c:	d11d      	bne.n	80d7a <ISPProtocol_WriteFuseLock+0x4a>
   80d3e:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80d40:	4b10      	ldr	r3, [pc, #64]	; (80d84 <ISPProtocol_WriteFuseLock+0x54>)
   80d42:	689b      	ldr	r3, [r3, #8]
   80d44:	681b      	ldr	r3, [r3, #0]
   80d46:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80d48:	ac01      	add	r4, sp, #4
   80d4a:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d4e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80d9c <ISPProtocol_WriteFuseLock+0x6c>
   80d52:	2700      	movs	r7, #0
   80d54:	4e0c      	ldr	r6, [pc, #48]	; (80d88 <ISPProtocol_WriteFuseLock+0x58>)
   80d56:	463b      	mov	r3, r7
   80d58:	463a      	mov	r2, r7
   80d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   80d5e:	4640      	mov	r0, r8
   80d60:	47b0      	blx	r6
   80d62:	454c      	cmp	r4, r9
   80d64:	d1f7      	bne.n	80d56 <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80d66:	4b09      	ldr	r3, [pc, #36]	; (80d8c <ISPProtocol_WriteFuseLock+0x5c>)
   80d68:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d6a:	2200      	movs	r2, #0
   80d6c:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80d6e:	4b08      	ldr	r3, [pc, #32]	; (80d90 <ISPProtocol_WriteFuseLock+0x60>)
   80d70:	2202      	movs	r2, #2
   80d72:	801a      	strh	r2, [r3, #0]
}
   80d74:	b003      	add	sp, #12
   80d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d7a:	4806      	ldr	r0, [pc, #24]	; (80d94 <ISPProtocol_WriteFuseLock+0x64>)
   80d7c:	4b06      	ldr	r3, [pc, #24]	; (80d98 <ISPProtocol_WriteFuseLock+0x68>)
   80d7e:	4798      	blx	r3
		return;
   80d80:	e7f8      	b.n	80d74 <ISPProtocol_WriteFuseLock+0x44>
   80d82:	bf00      	nop
   80d84:	2000269c 	.word	0x2000269c
   80d88:	00083fcf 	.word	0x00083fcf
   80d8c:	2000265c 	.word	0x2000265c
   80d90:	2000265a 	.word	0x2000265a
   80d94:	0008ca6c 	.word	0x0008ca6c
   80d98:	00085eed 	.word	0x00085eed
   80d9c:	40008000 	.word	0x40008000

00080da0 <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   80da0:	4770      	bx	lr
	...

00080da4 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80da4:	b900      	cbnz	r0, 80da8 <ISPProtocol_DelayMS+0x4>
   80da6:	4770      	bx	lr
{
   80da8:	b538      	push	{r3, r4, r5, lr}
   80daa:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80dac:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80db0:	2300      	movs	r3, #0
   80db2:	4806      	ldr	r0, [pc, #24]	; (80dcc <ISPProtocol_DelayMS+0x28>)
   80db4:	f243 64af 	movw	r4, #13999	; 0x36af
   80db8:	2500      	movs	r5, #0
   80dba:	fbe0 4501 	umlal	r4, r5, r0, r1
   80dbe:	4620      	mov	r0, r4
   80dc0:	4629      	mov	r1, r5
   80dc2:	4c03      	ldr	r4, [pc, #12]	; (80dd0 <ISPProtocol_DelayMS+0x2c>)
   80dc4:	47a0      	blx	r4
   80dc6:	4b03      	ldr	r3, [pc, #12]	; (80dd4 <ISPProtocol_DelayMS+0x30>)
   80dc8:	4798      	blx	r3
}
   80dca:	bd38      	pop	{r3, r4, r5, pc}
   80dcc:	05b8d800 	.word	0x05b8d800
   80dd0:	00085bad 	.word	0x00085bad
   80dd4:	20000087 	.word	0x20000087

00080dd8 <ISPProtocol_EnterISPMode>:
{
   80dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ddc:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   80dde:	4b42      	ldr	r3, [pc, #264]	; (80ee8 <ISPProtocol_EnterISPMode+0x110>)
   80de0:	8999      	ldrh	r1, [r3, #12]
   80de2:	290b      	cmp	r1, #11
   80de4:	d003      	beq.n	80dee <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80de6:	4841      	ldr	r0, [pc, #260]	; (80eec <ISPProtocol_EnterISPMode+0x114>)
   80de8:	4b41      	ldr	r3, [pc, #260]	; (80ef0 <ISPProtocol_EnterISPMode+0x118>)
   80dea:	4798      	blx	r3
		return;
   80dec:	e074      	b.n	80ed8 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80dee:	4b3e      	ldr	r3, [pc, #248]	; (80ee8 <ISPProtocol_EnterISPMode+0x110>)
   80df0:	689b      	ldr	r3, [r3, #8]
   80df2:	aa07      	add	r2, sp, #28
   80df4:	6818      	ldr	r0, [r3, #0]
   80df6:	6859      	ldr	r1, [r3, #4]
   80df8:	c203      	stmia	r2!, {r0, r1}
   80dfa:	8918      	ldrh	r0, [r3, #8]
   80dfc:	7a99      	ldrb	r1, [r3, #10]
   80dfe:	8010      	strh	r0, [r2, #0]
   80e00:	7091      	strb	r1, [r2, #2]
   80e02:	785e      	ldrb	r6, [r3, #1]
   80e04:	9603      	str	r6, [sp, #12]
   80e06:	7898      	ldrb	r0, [r3, #2]
   80e08:	78dc      	ldrb	r4, [r3, #3]
   80e0a:	f893 b004 	ldrb.w	fp, [r3, #4]
   80e0e:	795a      	ldrb	r2, [r3, #5]
   80e10:	9202      	str	r2, [sp, #8]
   80e12:	799b      	ldrb	r3, [r3, #6]
   80e14:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   80e16:	4b37      	ldr	r3, [pc, #220]	; (80ef4 <ISPProtocol_EnterISPMode+0x11c>)
   80e18:	2200      	movs	r2, #0
   80e1a:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80e1c:	4d36      	ldr	r5, [pc, #216]	; (80ef8 <ISPProtocol_EnterISPMode+0x120>)
   80e1e:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80e20:	4b36      	ldr	r3, [pc, #216]	; (80efc <ISPProtocol_EnterISPMode+0x124>)
   80e22:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80e24:	2001      	movs	r0, #1
   80e26:	4b36      	ldr	r3, [pc, #216]	; (80f00 <ISPProtocol_EnterISPMode+0x128>)
   80e28:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e2a:	4630      	mov	r0, r6
   80e2c:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80e2e:	f104 38ff 	add.w	r8, r4, #4294967295
   80e32:	fa5f f888 	uxtb.w	r8, r8
   80e36:	b114      	cbz	r4, 80e3e <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e38:	462f      	mov	r7, r5
   80e3a:	4c32      	ldr	r4, [pc, #200]	; (80f04 <ISPProtocol_EnterISPMode+0x12c>)
   80e3c:	e01c      	b.n	80e78 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80e3e:	24c0      	movs	r4, #192	; 0xc0
   80e40:	e03f      	b.n	80ec2 <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80e42:	9b01      	ldr	r3, [sp, #4]
   80e44:	2b00      	cmp	r3, #0
   80e46:	d03b      	beq.n	80ec0 <ISPProtocol_EnterISPMode+0xe8>
   80e48:	aa0a      	add	r2, sp, #40	; 0x28
   80e4a:	18d3      	adds	r3, r2, r3
   80e4c:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80e50:	9a02      	ldr	r2, [sp, #8]
   80e52:	4293      	cmp	r3, r2
   80e54:	d034      	beq.n	80ec0 <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   80e56:	2000      	movs	r0, #0
   80e58:	4d29      	ldr	r5, [pc, #164]	; (80f00 <ISPProtocol_EnterISPMode+0x128>)
   80e5a:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e5c:	9e03      	ldr	r6, [sp, #12]
   80e5e:	4630      	mov	r0, r6
   80e60:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80e62:	2001      	movs	r0, #1
   80e64:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e66:	4630      	mov	r0, r6
   80e68:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80e6a:	f108 38ff 	add.w	r8, r8, #4294967295
   80e6e:	fa5f f888 	uxtb.w	r8, r8
   80e72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   80e76:	d034      	beq.n	80ee2 <ISPProtocol_EnterISPMode+0x10a>
   80e78:	4b23      	ldr	r3, [pc, #140]	; (80f08 <ISPProtocol_EnterISPMode+0x130>)
   80e7a:	681b      	ldr	r3, [r3, #0]
   80e7c:	b37b      	cbz	r3, 80ede <ISPProtocol_EnterISPMode+0x106>
   80e7e:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80e82:	ad06      	add	r5, sp, #24
   80e84:	f10d 0a1c 	add.w	sl, sp, #28
   80e88:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80f1c <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e8c:	4658      	mov	r0, fp
   80e8e:	47b8      	blx	r7
   80e90:	2300      	movs	r3, #0
   80e92:	461a      	mov	r2, r3
   80e94:	f816 1b01 	ldrb.w	r1, [r6], #1
   80e98:	4620      	mov	r0, r4
   80e9a:	47c8      	blx	r9
   80e9c:	6923      	ldr	r3, [r4, #16]
   80e9e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ea2:	d0fb      	beq.n	80e9c <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80ea4:	f10d 0215 	add.w	r2, sp, #21
   80ea8:	f10d 0116 	add.w	r1, sp, #22
   80eac:	4620      	mov	r0, r4
   80eae:	4b17      	ldr	r3, [pc, #92]	; (80f0c <ISPProtocol_EnterISPMode+0x134>)
   80eb0:	4798      	blx	r3
			return  ReceivedByte;
   80eb2:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80eb6:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80eba:	4555      	cmp	r5, sl
   80ebc:	d1e6      	bne.n	80e8c <ISPProtocol_EnterISPMode+0xb4>
   80ebe:	e7c0      	b.n	80e42 <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   80ec0:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   80ec2:	4621      	mov	r1, r4
   80ec4:	4812      	ldr	r0, [pc, #72]	; (80f10 <ISPProtocol_EnterISPMode+0x138>)
   80ec6:	4b0a      	ldr	r3, [pc, #40]	; (80ef0 <ISPProtocol_EnterISPMode+0x118>)
   80ec8:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80eca:	4b12      	ldr	r3, [pc, #72]	; (80f14 <ISPProtocol_EnterISPMode+0x13c>)
   80ecc:	2210      	movs	r2, #16
   80ece:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80ed0:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   80ed2:	4b11      	ldr	r3, [pc, #68]	; (80f18 <ISPProtocol_EnterISPMode+0x140>)
   80ed4:	2202      	movs	r2, #2
   80ed6:	801a      	strh	r2, [r3, #0]
}
   80ed8:	b00b      	add	sp, #44	; 0x2c
   80eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80ede:	24c0      	movs	r4, #192	; 0xc0
   80ee0:	e7ef      	b.n	80ec2 <ISPProtocol_EnterISPMode+0xea>
   80ee2:	24c0      	movs	r4, #192	; 0xc0
   80ee4:	e7ed      	b.n	80ec2 <ISPProtocol_EnterISPMode+0xea>
   80ee6:	bf00      	nop
   80ee8:	2000269c 	.word	0x2000269c
   80eec:	0008ca6c 	.word	0x0008ca6c
   80ef0:	00085eed 	.word	0x00085eed
   80ef4:	2000267c 	.word	0x2000267c
   80ef8:	00080da5 	.word	0x00080da5
   80efc:	00081019 	.word	0x00081019
   80f00:	000810d9 	.word	0x000810d9
   80f04:	40008000 	.word	0x40008000
   80f08:	20002684 	.word	0x20002684
   80f0c:	00083fa1 	.word	0x00083fa1
   80f10:	0008ca3c 	.word	0x0008ca3c
   80f14:	2000265c 	.word	0x2000265c
   80f18:	2000265a 	.word	0x2000265a
   80f1c:	00083fcf 	.word	0x00083fcf

00080f20 <ISPProtocol_LeaveISPMode>:
{
   80f20:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   80f22:	4b0f      	ldr	r3, [pc, #60]	; (80f60 <ISPProtocol_LeaveISPMode+0x40>)
   80f24:	8999      	ldrh	r1, [r3, #12]
   80f26:	2902      	cmp	r1, #2
   80f28:	d003      	beq.n	80f32 <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80f2a:	480e      	ldr	r0, [pc, #56]	; (80f64 <ISPProtocol_LeaveISPMode+0x44>)
   80f2c:	4b0e      	ldr	r3, [pc, #56]	; (80f68 <ISPProtocol_LeaveISPMode+0x48>)
   80f2e:	4798      	blx	r3
}
   80f30:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80f32:	4b0b      	ldr	r3, [pc, #44]	; (80f60 <ISPProtocol_LeaveISPMode+0x40>)
   80f34:	689b      	ldr	r3, [r3, #8]
   80f36:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80f38:	b2e8      	uxtb	r0, r5
   80f3a:	4c0c      	ldr	r4, [pc, #48]	; (80f6c <ISPProtocol_LeaveISPMode+0x4c>)
   80f3c:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80f3e:	2000      	movs	r0, #0
   80f40:	4b0b      	ldr	r3, [pc, #44]	; (80f70 <ISPProtocol_LeaveISPMode+0x50>)
   80f42:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80f44:	4b0b      	ldr	r3, [pc, #44]	; (80f74 <ISPProtocol_LeaveISPMode+0x54>)
   80f46:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80f48:	0a28      	lsrs	r0, r5, #8
   80f4a:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80f4c:	4b0a      	ldr	r3, [pc, #40]	; (80f78 <ISPProtocol_LeaveISPMode+0x58>)
   80f4e:	2211      	movs	r2, #17
   80f50:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80f52:	2200      	movs	r2, #0
   80f54:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80f56:	4b09      	ldr	r3, [pc, #36]	; (80f7c <ISPProtocol_LeaveISPMode+0x5c>)
   80f58:	2202      	movs	r2, #2
   80f5a:	801a      	strh	r2, [r3, #0]
   80f5c:	e7e8      	b.n	80f30 <ISPProtocol_LeaveISPMode+0x10>
   80f5e:	bf00      	nop
   80f60:	2000269c 	.word	0x2000269c
   80f64:	0008ca6c 	.word	0x0008ca6c
   80f68:	00085eed 	.word	0x00085eed
   80f6c:	00080da5 	.word	0x00080da5
   80f70:	000810d9 	.word	0x000810d9
   80f74:	000810c1 	.word	0x000810c1
   80f78:	2000265c 	.word	0x2000265c
   80f7c:	2000265a 	.word	0x2000265a

00080f80 <ISPProtocol_ChipErase>:
{
   80f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f84:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80f86:	4b1b      	ldr	r3, [pc, #108]	; (80ff4 <ISPProtocol_ChipErase+0x74>)
   80f88:	8999      	ldrh	r1, [r3, #12]
   80f8a:	2906      	cmp	r1, #6
   80f8c:	d12a      	bne.n	80fe4 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   80f8e:	4b19      	ldr	r3, [pc, #100]	; (80ff4 <ISPProtocol_ChipErase+0x74>)
   80f90:	689b      	ldr	r3, [r3, #8]
   80f92:	6818      	ldr	r0, [r3, #0]
   80f94:	9000      	str	r0, [sp, #0]
   80f96:	889a      	ldrh	r2, [r3, #4]
   80f98:	f8ad 2004 	strh.w	r2, [sp, #4]
   80f9c:	f893 a000 	ldrb.w	sl, [r3]
   80fa0:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   80fa4:	f10d 0402 	add.w	r4, sp, #2
   80fa8:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   80fac:	4f12      	ldr	r7, [pc, #72]	; (80ff8 <ISPProtocol_ChipErase+0x78>)
   80fae:	2600      	movs	r6, #0
   80fb0:	4d12      	ldr	r5, [pc, #72]	; (80ffc <ISPProtocol_ChipErase+0x7c>)
   80fb2:	4633      	mov	r3, r6
   80fb4:	4632      	mov	r2, r6
   80fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   80fba:	4638      	mov	r0, r7
   80fbc:	47a8      	blx	r5
   80fbe:	4544      	cmp	r4, r8
   80fc0:	d1f7      	bne.n	80fb2 <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   80fc2:	f1b9 0f00 	cmp.w	r9, #0
   80fc6:	d111      	bne.n	80fec <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   80fc8:	4650      	mov	r0, sl
   80fca:	4b0d      	ldr	r3, [pc, #52]	; (81000 <ISPProtocol_ChipErase+0x80>)
   80fcc:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   80fce:	4b0d      	ldr	r3, [pc, #52]	; (81004 <ISPProtocol_ChipErase+0x84>)
   80fd0:	2212      	movs	r2, #18
   80fd2:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80fd4:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   80fd8:	4b0b      	ldr	r3, [pc, #44]	; (81008 <ISPProtocol_ChipErase+0x88>)
   80fda:	2202      	movs	r2, #2
   80fdc:	801a      	strh	r2, [r3, #0]
}
   80fde:	b002      	add	sp, #8
   80fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80fe4:	4809      	ldr	r0, [pc, #36]	; (8100c <ISPProtocol_ChipErase+0x8c>)
   80fe6:	4b0a      	ldr	r3, [pc, #40]	; (81010 <ISPProtocol_ChipErase+0x90>)
   80fe8:	4798      	blx	r3
		return;
   80fea:	e7f8      	b.n	80fde <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   80fec:	4b09      	ldr	r3, [pc, #36]	; (81014 <ISPProtocol_ChipErase+0x94>)
   80fee:	4798      	blx	r3
   80ff0:	4681      	mov	r9, r0
   80ff2:	e7ec      	b.n	80fce <ISPProtocol_ChipErase+0x4e>
   80ff4:	2000269c 	.word	0x2000269c
   80ff8:	40008000 	.word	0x40008000
   80ffc:	00083fcf 	.word	0x00083fcf
   81000:	00080da5 	.word	0x00080da5
   81004:	2000265c 	.word	0x2000265c
   81008:	2000265a 	.word	0x2000265a
   8100c:	0008ca5c 	.word	0x0008ca5c
   81010:	00085eed 	.word	0x00085eed
   81014:	0008111d 	.word	0x0008111d

00081018 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   81018:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   8101a:	2098      	movs	r0, #152	; 0x98
   8101c:	4b1e      	ldr	r3, [pc, #120]	; (81098 <ISPTarget_EnableTargetISP+0x80>)
   8101e:	4798      	blx	r3
   81020:	4b1e      	ldr	r3, [pc, #120]	; (8109c <ISPTarget_EnableTargetISP+0x84>)
   81022:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   81026:	4c1e      	ldr	r4, [pc, #120]	; (810a0 <ISPTarget_EnableTargetISP+0x88>)
   81028:	4620      	mov	r0, r4
   8102a:	4b1e      	ldr	r3, [pc, #120]	; (810a4 <ISPTarget_EnableTargetISP+0x8c>)
   8102c:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8102e:	2380      	movs	r3, #128	; 0x80
   81030:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81032:	6863      	ldr	r3, [r4, #4]
   81034:	f043 0301 	orr.w	r3, r3, #1
   81038:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8103a:	6863      	ldr	r3, [r4, #4]
   8103c:	f043 0310 	orr.w	r3, r3, #16
   81040:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   81042:	6863      	ldr	r3, [r4, #4]
   81044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81048:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   8104a:	4917      	ldr	r1, [pc, #92]	; (810a8 <ISPTarget_EnableTargetISP+0x90>)
   8104c:	4628      	mov	r0, r5
   8104e:	4b17      	ldr	r3, [pc, #92]	; (810ac <ISPTarget_EnableTargetISP+0x94>)
   81050:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   81052:	1e04      	subs	r4, r0, #0
   81054:	bfb8      	it	lt
   81056:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   81058:	4d11      	ldr	r5, [pc, #68]	; (810a0 <ISPTarget_EnableTargetISP+0x88>)
   8105a:	2200      	movs	r2, #0
   8105c:	4611      	mov	r1, r2
   8105e:	4628      	mov	r0, r5
   81060:	4b13      	ldr	r3, [pc, #76]	; (810b0 <ISPTarget_EnableTargetISP+0x98>)
   81062:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   81064:	2201      	movs	r2, #1
   81066:	2100      	movs	r1, #0
   81068:	4628      	mov	r0, r5
   8106a:	4b12      	ldr	r3, [pc, #72]	; (810b4 <ISPTarget_EnableTargetISP+0x9c>)
   8106c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   8106e:	b2e2      	uxtb	r2, r4
   81070:	2100      	movs	r1, #0
   81072:	4628      	mov	r0, r5
   81074:	4b10      	ldr	r3, [pc, #64]	; (810b8 <ISPTarget_EnableTargetISP+0xa0>)
   81076:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81078:	2301      	movs	r3, #1
   8107a:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8107c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81080:	200e      	movs	r0, #14
   81082:	4c0e      	ldr	r4, [pc, #56]	; (810bc <ISPTarget_EnableTargetISP+0xa4>)
   81084:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   81086:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8108a:	200d      	movs	r0, #13
   8108c:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8108e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81092:	200f      	movs	r0, #15
   81094:	47a0      	blx	r4
#endif

}
   81096:	bd38      	pop	{r3, r4, r5, pc}
   81098:	000822d1 	.word	0x000822d1
   8109c:	200002ec 	.word	0x200002ec
   810a0:	40008000 	.word	0x40008000
   810a4:	00083f81 	.word	0x00083f81
   810a8:	05b8d800 	.word	0x05b8d800
   810ac:	0008403f 	.word	0x0008403f
   810b0:	00084003 	.word	0x00084003
   810b4:	00084021 	.word	0x00084021
   810b8:	00084055 	.word	0x00084055
   810bc:	00083bb9 	.word	0x00083bb9

000810c0 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   810c0:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   810c2:	4803      	ldr	r0, [pc, #12]	; (810d0 <ISPTarget_DisableTargetISP+0x10>)
   810c4:	2302      	movs	r3, #2
   810c6:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   810c8:	4b02      	ldr	r3, [pc, #8]	; (810d4 <ISPTarget_DisableTargetISP+0x14>)
   810ca:	4798      	blx	r3
#endif
}
   810cc:	bd08      	pop	{r3, pc}
   810ce:	bf00      	nop
   810d0:	40008000 	.word	0x40008000
   810d4:	00083f91 	.word	0x00083f91

000810d8 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   810d8:	b508      	push	{r3, lr}
	if (ResetTarget)
   810da:	b180      	cbz	r0, 810fe <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   810dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810e0:	2011      	movs	r0, #17
   810e2:	4b0a      	ldr	r3, [pc, #40]	; (8110c <ISPTarget_ChangeTargetResetLine+0x34>)
   810e4:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   810e6:	209e      	movs	r0, #158	; 0x9e
   810e8:	4b09      	ldr	r3, [pc, #36]	; (81110 <ISPTarget_ChangeTargetResetLine+0x38>)
   810ea:	4798      	blx	r3
   810ec:	b918      	cbnz	r0, 810f6 <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   810ee:	2011      	movs	r0, #17
   810f0:	4b08      	ldr	r3, [pc, #32]	; (81114 <ISPTarget_ChangeTargetResetLine+0x3c>)
   810f2:	4798      	blx	r3
   810f4:	e008      	b.n	81108 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   810f6:	2011      	movs	r0, #17
   810f8:	4b07      	ldr	r3, [pc, #28]	; (81118 <ISPTarget_ChangeTargetResetLine+0x40>)
   810fa:	4798      	blx	r3
   810fc:	e004      	b.n	81108 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   810fe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81102:	2011      	movs	r0, #17
   81104:	4b01      	ldr	r3, [pc, #4]	; (8110c <ISPTarget_ChangeTargetResetLine+0x34>)
   81106:	4798      	blx	r3
	}
}
   81108:	bd08      	pop	{r3, pc}
   8110a:	bf00      	nop
   8110c:	00083bb9 	.word	0x00083bb9
   81110:	000822d1 	.word	0x000822d1
   81114:	00083b85 	.word	0x00083b85
   81118:	00083b9f 	.word	0x00083b9f

0008111c <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   8111c:	b570      	push	{r4, r5, r6, lr}
   8111e:	b082      	sub	sp, #8
   81120:	4c19      	ldr	r4, [pc, #100]	; (81188 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   81122:	2600      	movs	r6, #0
   81124:	4d19      	ldr	r5, [pc, #100]	; (8118c <ISPTarget_WaitWhileTargetBusy+0x70>)
   81126:	4633      	mov	r3, r6
   81128:	4632      	mov	r2, r6
   8112a:	21f0      	movs	r1, #240	; 0xf0
   8112c:	4620      	mov	r0, r4
   8112e:	47a8      	blx	r5
   81130:	4633      	mov	r3, r6
   81132:	4632      	mov	r2, r6
   81134:	4631      	mov	r1, r6
   81136:	4620      	mov	r0, r4
   81138:	47a8      	blx	r5
   8113a:	4633      	mov	r3, r6
   8113c:	4632      	mov	r2, r6
   8113e:	4631      	mov	r1, r6
   81140:	4620      	mov	r0, r4
   81142:	47a8      	blx	r5
   81144:	4633      	mov	r3, r6
   81146:	4632      	mov	r2, r6
   81148:	4631      	mov	r1, r6
   8114a:	4620      	mov	r0, r4
   8114c:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8114e:	6923      	ldr	r3, [r4, #16]
   81150:	f413 7f00 	tst.w	r3, #512	; 0x200
   81154:	d0fb      	beq.n	8114e <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   81156:	f10d 0205 	add.w	r2, sp, #5
   8115a:	f10d 0106 	add.w	r1, sp, #6
   8115e:	4620      	mov	r0, r4
   81160:	4b0b      	ldr	r3, [pc, #44]	; (81190 <ISPTarget_WaitWhileTargetBusy+0x74>)
   81162:	4798      	blx	r3
			return  ReceivedByte;
   81164:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   81168:	f010 0001 	ands.w	r0, r0, #1
   8116c:	d005      	beq.n	8117a <ISPTarget_WaitWhileTargetBusy+0x5e>
   8116e:	4b09      	ldr	r3, [pc, #36]	; (81194 <ISPTarget_WaitWhileTargetBusy+0x78>)
   81170:	681b      	ldr	r3, [r3, #0]
   81172:	2b00      	cmp	r3, #0
   81174:	d1d7      	bne.n	81126 <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   81176:	2081      	movs	r0, #129	; 0x81
   81178:	e004      	b.n	81184 <ISPTarget_WaitWhileTargetBusy+0x68>
   8117a:	4b06      	ldr	r3, [pc, #24]	; (81194 <ISPTarget_WaitWhileTargetBusy+0x78>)
   8117c:	681b      	ldr	r3, [r3, #0]
   8117e:	2b00      	cmp	r3, #0
   81180:	bf08      	it	eq
   81182:	2081      	moveq	r0, #129	; 0x81
}
   81184:	b002      	add	sp, #8
   81186:	bd70      	pop	{r4, r5, r6, pc}
   81188:	40008000 	.word	0x40008000
   8118c:	00083fcf 	.word	0x00083fcf
   81190:	00083fa1 	.word	0x00083fa1
   81194:	20002684 	.word	0x20002684

00081198 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81198:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   8119a:	4d0c      	ldr	r5, [pc, #48]	; (811cc <ISPTarget_LoadExtendedAddress+0x34>)
   8119c:	2300      	movs	r3, #0
   8119e:	461a      	mov	r2, r3
   811a0:	214d      	movs	r1, #77	; 0x4d
   811a2:	4628      	mov	r0, r5
   811a4:	4c0a      	ldr	r4, [pc, #40]	; (811d0 <ISPTarget_LoadExtendedAddress+0x38>)
   811a6:	47a0      	blx	r4
   811a8:	2300      	movs	r3, #0
   811aa:	461a      	mov	r2, r3
   811ac:	4619      	mov	r1, r3
   811ae:	4628      	mov	r0, r5
   811b0:	47a0      	blx	r4
   811b2:	2300      	movs	r3, #0
   811b4:	461a      	mov	r2, r3
   811b6:	4907      	ldr	r1, [pc, #28]	; (811d4 <ISPTarget_LoadExtendedAddress+0x3c>)
   811b8:	7889      	ldrb	r1, [r1, #2]
   811ba:	4628      	mov	r0, r5
   811bc:	47a0      	blx	r4
   811be:	2300      	movs	r3, #0
   811c0:	461a      	mov	r2, r3
   811c2:	4619      	mov	r1, r3
   811c4:	4628      	mov	r0, r5
   811c6:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   811c8:	bd38      	pop	{r3, r4, r5, pc}
   811ca:	bf00      	nop
   811cc:	40008000 	.word	0x40008000
   811d0:	00083fcf 	.word	0x00083fcf
   811d4:	2000267c 	.word	0x2000267c

000811d8 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   811d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   811dc:	b082      	sub	sp, #8
   811de:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   811e2:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   811e6:	2c20      	cmp	r4, #32
   811e8:	dc18      	bgt.n	8121c <ISPTarget_WaitForProgComplete+0x44>
   811ea:	460e      	mov	r6, r1
   811ec:	4617      	mov	r7, r2
   811ee:	2c01      	cmp	r4, #1
   811f0:	dd5b      	ble.n	812aa <ISPTarget_WaitForProgComplete+0xd2>
   811f2:	3c02      	subs	r4, #2
   811f4:	2c1e      	cmp	r4, #30
   811f6:	d85a      	bhi.n	812ae <ISPTarget_WaitForProgComplete+0xd6>
   811f8:	e8df f004 	tbb	[pc, r4]
   811fc:	591e5919 	.word	0x591e5919
   81200:	59545959 	.word	0x59545959
   81204:	59595959 	.word	0x59595959
   81208:	59195959 	.word	0x59195959
   8120c:	59595959 	.word	0x59595959
   81210:	59595959 	.word	0x59595959
   81214:	59595959 	.word	0x59595959
   81218:	5959      	.short	0x5959
   8121a:	1e          	.byte	0x1e
   8121b:	00          	.byte	0x00
   8121c:	2c40      	cmp	r4, #64	; 0x40
   8121e:	d041      	beq.n	812a4 <ISPTarget_WaitForProgComplete+0xcc>
   81220:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81222:	4b24      	ldr	r3, [pc, #144]	; (812b4 <ISPTarget_WaitForProgComplete+0xdc>)
   81224:	2264      	movs	r2, #100	; 0x64
   81226:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   81228:	b002      	add	sp, #8
   8122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   8122e:	4618      	mov	r0, r3
   81230:	4b21      	ldr	r3, [pc, #132]	; (812b8 <ISPTarget_WaitForProgComplete+0xe0>)
   81232:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81234:	2000      	movs	r0, #0
			break;
   81236:	e7f4      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   81238:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   8123c:	4c1f      	ldr	r4, [pc, #124]	; (812bc <ISPTarget_WaitForProgComplete+0xe4>)
   8123e:	f04f 0900 	mov.w	r9, #0
   81242:	4d1f      	ldr	r5, [pc, #124]	; (812c0 <ISPTarget_WaitForProgComplete+0xe8>)
   81244:	464b      	mov	r3, r9
   81246:	464a      	mov	r2, r9
   81248:	4641      	mov	r1, r8
   8124a:	4620      	mov	r0, r4
   8124c:	47a8      	blx	r5
   8124e:	464b      	mov	r3, r9
   81250:	464a      	mov	r2, r9
   81252:	4651      	mov	r1, sl
   81254:	4620      	mov	r0, r4
   81256:	47a8      	blx	r5
   81258:	464b      	mov	r3, r9
   8125a:	464a      	mov	r2, r9
   8125c:	b2f1      	uxtb	r1, r6
   8125e:	4620      	mov	r0, r4
   81260:	47a8      	blx	r5
   81262:	464b      	mov	r3, r9
   81264:	464a      	mov	r2, r9
   81266:	4649      	mov	r1, r9
   81268:	4620      	mov	r0, r4
   8126a:	47a8      	blx	r5
   8126c:	6923      	ldr	r3, [r4, #16]
   8126e:	f413 7f00 	tst.w	r3, #512	; 0x200
   81272:	d0fb      	beq.n	8126c <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   81274:	f10d 0205 	add.w	r2, sp, #5
   81278:	f10d 0106 	add.w	r1, sp, #6
   8127c:	4620      	mov	r0, r4
   8127e:	4b11      	ldr	r3, [pc, #68]	; (812c4 <ISPTarget_WaitForProgComplete+0xec>)
   81280:	4798      	blx	r3
			return  ReceivedByte;
   81282:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   81286:	429f      	cmp	r7, r3
   81288:	d105      	bne.n	81296 <ISPTarget_WaitForProgComplete+0xbe>
   8128a:	4b0a      	ldr	r3, [pc, #40]	; (812b4 <ISPTarget_WaitForProgComplete+0xdc>)
   8128c:	681b      	ldr	r3, [r3, #0]
   8128e:	2b00      	cmp	r3, #0
   81290:	d1d8      	bne.n	81244 <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81292:	2080      	movs	r0, #128	; 0x80
   81294:	e7c5      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   81296:	4b07      	ldr	r3, [pc, #28]	; (812b4 <ISPTarget_WaitForProgComplete+0xdc>)
   81298:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8129a:	2b00      	cmp	r3, #0
   8129c:	bf14      	ite	ne
   8129e:	2000      	movne	r0, #0
   812a0:	2080      	moveq	r0, #128	; 0x80
   812a2:	e7be      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   812a4:	4b08      	ldr	r3, [pc, #32]	; (812c8 <ISPTarget_WaitForProgComplete+0xf0>)
   812a6:	4798      	blx	r3
			break;
   812a8:	e7bb      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   812aa:	2000      	movs	r0, #0
   812ac:	e7b9      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
   812ae:	2000      	movs	r0, #0
   812b0:	e7b7      	b.n	81222 <ISPTarget_WaitForProgComplete+0x4a>
   812b2:	bf00      	nop
   812b4:	20002684 	.word	0x20002684
   812b8:	00080da5 	.word	0x00080da5
   812bc:	40008000 	.word	0x40008000
   812c0:	00083fcf 	.word	0x00083fcf
   812c4:	00083fa1 	.word	0x00083fa1
   812c8:	0008111d 	.word	0x0008111d

000812cc <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   812cc:	4b06      	ldr	r3, [pc, #24]	; (812e8 <naeusb_add_in_handler+0x1c>)
   812ce:	781b      	ldrb	r3, [r3, #0]
   812d0:	2b0f      	cmp	r3, #15
   812d2:	d807      	bhi.n	812e4 <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   812d4:	1c59      	adds	r1, r3, #1
   812d6:	4a04      	ldr	r2, [pc, #16]	; (812e8 <naeusb_add_in_handler+0x1c>)
   812d8:	7011      	strb	r1, [r2, #0]
   812da:	4a04      	ldr	r2, [pc, #16]	; (812ec <naeusb_add_in_handler+0x20>)
   812dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   812e0:	2001      	movs	r0, #1
   812e2:	4770      	bx	lr
        return false;
   812e4:	2000      	movs	r0, #0
}
   812e6:	4770      	bx	lr
   812e8:	20001bf8 	.word	0x20001bf8
   812ec:	20001bb8 	.word	0x20001bb8

000812f0 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   812f0:	4b06      	ldr	r3, [pc, #24]	; (8130c <naeusb_add_out_handler+0x1c>)
   812f2:	781b      	ldrb	r3, [r3, #0]
   812f4:	2b0f      	cmp	r3, #15
   812f6:	d807      	bhi.n	81308 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   812f8:	1c59      	adds	r1, r3, #1
   812fa:	4a04      	ldr	r2, [pc, #16]	; (8130c <naeusb_add_out_handler+0x1c>)
   812fc:	7011      	strb	r1, [r2, #0]
   812fe:	4a04      	ldr	r2, [pc, #16]	; (81310 <naeusb_add_out_handler+0x20>)
   81300:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81304:	2001      	movs	r0, #1
   81306:	4770      	bx	lr
        return false;
   81308:	2000      	movs	r0, #0
}
   8130a:	4770      	bx	lr
   8130c:	20001bf9 	.word	0x20001bf9
   81310:	20001bfc 	.word	0x20001bfc

00081314 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81314:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   81316:	4b01      	ldr	r3, [pc, #4]	; (8131c <main_suspend_action+0x8>)
   81318:	4798      	blx	r3
}
   8131a:	bd08      	pop	{r3, pc}
   8131c:	00082ec9 	.word	0x00082ec9

00081320 <main_resume_action>:

void main_resume_action(void)
{
   81320:	b508      	push	{r3, lr}
    ui_wakeup();
   81322:	4b01      	ldr	r3, [pc, #4]	; (81328 <main_resume_action+0x8>)
   81324:	4798      	blx	r3
}
   81326:	bd08      	pop	{r3, pc}
   81328:	00082ee5 	.word	0x00082ee5

0008132c <main_sof_action>:

void main_sof_action(void)
{
   8132c:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   8132e:	4b04      	ldr	r3, [pc, #16]	; (81340 <main_sof_action+0x14>)
   81330:	781b      	ldrb	r3, [r3, #0]
   81332:	b903      	cbnz	r3, 81336 <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   81334:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   81336:	4b03      	ldr	r3, [pc, #12]	; (81344 <main_sof_action+0x18>)
   81338:	4798      	blx	r3
   8133a:	4b03      	ldr	r3, [pc, #12]	; (81348 <main_sof_action+0x1c>)
   8133c:	4798      	blx	r3
   8133e:	e7f9      	b.n	81334 <main_sof_action+0x8>
   81340:	2000057c 	.word	0x2000057c
   81344:	00084d0d 	.word	0x00084d0d
   81348:	00082efd 	.word	0x00082efd

0008134c <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   8134c:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   8134e:	2401      	movs	r4, #1
   81350:	4b04      	ldr	r3, [pc, #16]	; (81364 <main_vendor_enable+0x18>)
   81352:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81354:	4a04      	ldr	r2, [pc, #16]	; (81368 <main_vendor_enable+0x1c>)
   81356:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8135a:	4804      	ldr	r0, [pc, #16]	; (8136c <main_vendor_enable+0x20>)
   8135c:	4b04      	ldr	r3, [pc, #16]	; (81370 <main_vendor_enable+0x24>)
   8135e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81360:	4620      	mov	r0, r4
   81362:	bd10      	pop	{r4, pc}
   81364:	2000057c 	.word	0x2000057c
   81368:	000817a5 	.word	0x000817a5
   8136c:	20002258 	.word	0x20002258
   81370:	0008308d 	.word	0x0008308d

00081374 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81374:	4b01      	ldr	r3, [pc, #4]	; (8137c <main_vendor_disable+0x8>)
   81376:	2200      	movs	r2, #0
   81378:	701a      	strb	r2, [r3, #0]
}
   8137a:	4770      	bx	lr
   8137c:	2000057c 	.word	0x2000057c

00081380 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81380:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81382:	4b0f      	ldr	r3, [pc, #60]	; (813c0 <main_setup_out_received+0x40>)
   81384:	4a0f      	ldr	r2, [pc, #60]	; (813c4 <main_setup_out_received+0x44>)
   81386:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81388:	88da      	ldrh	r2, [r3, #6]
   8138a:	2a40      	cmp	r2, #64	; 0x40
   8138c:	bf28      	it	cs
   8138e:	2240      	movcs	r2, #64	; 0x40
   81390:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81392:	4b0d      	ldr	r3, [pc, #52]	; (813c8 <main_setup_out_received+0x48>)
   81394:	781d      	ldrb	r5, [r3, #0]
   81396:	b18d      	cbz	r5, 813bc <main_setup_out_received+0x3c>
   81398:	4b0c      	ldr	r3, [pc, #48]	; (813cc <main_setup_out_received+0x4c>)
   8139a:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   8139e:	1e6a      	subs	r2, r5, #1
   813a0:	b2d2      	uxtb	r2, r2
   813a2:	1aad      	subs	r5, r5, r2
   813a4:	3b04      	subs	r3, #4
   813a6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   813aa:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813ae:	4798      	blx	r3
        if (handler_status == true) {
   813b0:	4603      	mov	r3, r0
   813b2:	b908      	cbnz	r0, 813b8 <main_setup_out_received+0x38>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813b4:	42ac      	cmp	r4, r5
   813b6:	d1f8      	bne.n	813aa <main_setup_out_received+0x2a>
        }
    }

    return false;

}
   813b8:	4618      	mov	r0, r3
   813ba:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   813bc:	2300      	movs	r3, #0
   813be:	e7fb      	b.n	813b8 <main_setup_out_received+0x38>
   813c0:	2000269c 	.word	0x2000269c
   813c4:	20002218 	.word	0x20002218
   813c8:	20001bf9 	.word	0x20001bf9
   813cc:	20001bfc 	.word	0x20001bfc

000813d0 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   813d0:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   813d2:	4b0b      	ldr	r3, [pc, #44]	; (81400 <main_setup_in_received+0x30>)
   813d4:	781d      	ldrb	r5, [r3, #0]
   813d6:	b18d      	cbz	r5, 813fc <main_setup_in_received+0x2c>
   813d8:	4b0a      	ldr	r3, [pc, #40]	; (81404 <main_setup_in_received+0x34>)
   813da:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   813de:	1e6a      	subs	r2, r5, #1
   813e0:	b2d2      	uxtb	r2, r2
   813e2:	1aad      	subs	r5, r5, r2
   813e4:	3b04      	subs	r3, #4
   813e6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   813ea:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813ee:	4798      	blx	r3
        if (handler_status == true) {
   813f0:	4603      	mov	r3, r0
   813f2:	b908      	cbnz	r0, 813f8 <main_setup_in_received+0x28>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   813f4:	42ac      	cmp	r4, r5
   813f6:	d1f8      	bne.n	813ea <main_setup_in_received+0x1a>
        }
    }

    return false;

   813f8:	4618      	mov	r0, r3
   813fa:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   813fc:	2300      	movs	r3, #0
   813fe:	e7fb      	b.n	813f8 <main_setup_in_received+0x28>
   81400:	20001bf8 	.word	0x20001bf8
   81404:	20001bb8 	.word	0x20001bb8

00081408 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81408:	4b05      	ldr	r3, [pc, #20]	; (81420 <naeusb_setup_out_received+0x18>)
   8140a:	785b      	ldrb	r3, [r3, #1]
   8140c:	2b22      	cmp	r3, #34	; 0x22
   8140e:	d001      	beq.n	81414 <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   81410:	2000      	movs	r0, #0
}
   81412:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81414:	4b02      	ldr	r3, [pc, #8]	; (81420 <naeusb_setup_out_received+0x18>)
   81416:	4a03      	ldr	r2, [pc, #12]	; (81424 <naeusb_setup_out_received+0x1c>)
   81418:	611a      	str	r2, [r3, #16]
            return true;
   8141a:	2001      	movs	r0, #1
   8141c:	4770      	bx	lr
   8141e:	bf00      	nop
   81420:	2000269c 	.word	0x2000269c
   81424:	00081429 	.word	0x00081429

00081428 <naeusb_sam_cfg_out>:
{
   81428:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8142a:	4b22      	ldr	r3, [pc, #136]	; (814b4 <naeusb_sam_cfg_out+0x8c>)
   8142c:	789b      	ldrb	r3, [r3, #2]
   8142e:	3b01      	subs	r3, #1
   81430:	2b10      	cmp	r3, #16
   81432:	d814      	bhi.n	8145e <naeusb_sam_cfg_out+0x36>
   81434:	e8df f003 	tbb	[pc, r3]
   81438:	13181409 	.word	0x13181409
   8143c:	13131313 	.word	0x13131313
   81440:	13131313 	.word	0x13131313
   81444:	2c131313 	.word	0x2c131313
   81448:	3b          	.byte	0x3b
   81449:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8144a:	203e      	movs	r0, #62	; 0x3e
   8144c:	4b1a      	ldr	r3, [pc, #104]	; (814b8 <naeusb_sam_cfg_out+0x90>)
   8144e:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81450:	4c1a      	ldr	r4, [pc, #104]	; (814bc <naeusb_sam_cfg_out+0x94>)
   81452:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81454:	2800      	cmp	r0, #0
   81456:	d0fc      	beq.n	81452 <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81458:	2010      	movs	r0, #16
   8145a:	4b19      	ldr	r3, [pc, #100]	; (814c0 <naeusb_sam_cfg_out+0x98>)
   8145c:	4798      	blx	r3
}
   8145e:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81460:	2010      	movs	r0, #16
   81462:	4b18      	ldr	r3, [pc, #96]	; (814c4 <naeusb_sam_cfg_out+0x9c>)
   81464:	4798      	blx	r3
        break;
   81466:	e7fa      	b.n	8145e <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81468:	2201      	movs	r2, #1
   8146a:	210c      	movs	r1, #12
   8146c:	4816      	ldr	r0, [pc, #88]	; (814c8 <naeusb_sam_cfg_out+0xa0>)
   8146e:	4b17      	ldr	r3, [pc, #92]	; (814cc <naeusb_sam_cfg_out+0xa4>)
   81470:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81472:	4b17      	ldr	r3, [pc, #92]	; (814d0 <naeusb_sam_cfg_out+0xa8>)
   81474:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81476:	4b17      	ldr	r3, [pc, #92]	; (814d4 <naeusb_sam_cfg_out+0xac>)
   81478:	685a      	ldr	r2, [r3, #4]
   8147a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   8147e:	d1fb      	bne.n	81478 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81480:	4a14      	ldr	r2, [pc, #80]	; (814d4 <naeusb_sam_cfg_out+0xac>)
   81482:	6813      	ldr	r3, [r2, #0]
   81484:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81488:	f043 0305 	orr.w	r3, r3, #5
   8148c:	6013      	str	r3, [r2, #0]
        while(1);
   8148e:	e7fe      	b.n	8148e <naeusb_sam_cfg_out+0x66>
   81490:	4b0f      	ldr	r3, [pc, #60]	; (814d0 <naeusb_sam_cfg_out+0xa8>)
   81492:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81494:	4b0f      	ldr	r3, [pc, #60]	; (814d4 <naeusb_sam_cfg_out+0xac>)
   81496:	685a      	ldr	r2, [r3, #4]
   81498:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   8149c:	d1fb      	bne.n	81496 <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8149e:	4a0d      	ldr	r2, [pc, #52]	; (814d4 <naeusb_sam_cfg_out+0xac>)
   814a0:	6813      	ldr	r3, [r2, #0]
   814a2:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   814a6:	f043 0305 	orr.w	r3, r3, #5
   814aa:	6013      	str	r3, [r2, #0]
        while(1);
   814ac:	e7fe      	b.n	814ac <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   814ae:	4b0a      	ldr	r3, [pc, #40]	; (814d8 <naeusb_sam_cfg_out+0xb0>)
   814b0:	4798      	blx	r3
}
   814b2:	e7d4      	b.n	8145e <naeusb_sam_cfg_out+0x36>
   814b4:	2000269c 	.word	0x2000269c
   814b8:	00083e5d 	.word	0x00083e5d
   814bc:	00083e85 	.word	0x00083e85
   814c0:	00083d9d 	.word	0x00083d9d
   814c4:	00083dfd 	.word	0x00083dfd
   814c8:	400e0800 	.word	0x400e0800
   814cc:	00082dd5 	.word	0x00082dd5
   814d0:	00084c8d 	.word	0x00084c8d
   814d4:	400e1200 	.word	0x400e1200
   814d8:	00082009 	.word	0x00082009

000814dc <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   814dc:	4b05      	ldr	r3, [pc, #20]	; (814f4 <naeusb_fw_version_in+0x18>)
   814de:	2200      	movs	r2, #0
   814e0:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   814e2:	2132      	movs	r1, #50	; 0x32
   814e4:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   814e6:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   814e8:	4a03      	ldr	r2, [pc, #12]	; (814f8 <naeusb_fw_version_in+0x1c>)
   814ea:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   814ec:	2303      	movs	r3, #3
   814ee:	8193      	strh	r3, [r2, #12]
}
   814f0:	2001      	movs	r0, #1
   814f2:	4770      	bx	lr
   814f4:	200021d8 	.word	0x200021d8
   814f8:	2000269c 	.word	0x2000269c

000814fc <naeusb_build_date_in>:
{
   814fc:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   814fe:	4c0a      	ldr	r4, [pc, #40]	; (81528 <naeusb_build_date_in+0x2c>)
   81500:	2240      	movs	r2, #64	; 0x40
   81502:	490a      	ldr	r1, [pc, #40]	; (8152c <naeusb_build_date_in+0x30>)
   81504:	4620      	mov	r0, r4
   81506:	4d0a      	ldr	r5, [pc, #40]	; (81530 <naeusb_build_date_in+0x34>)
   81508:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   8150a:	2320      	movs	r3, #32
   8150c:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   8150e:	2237      	movs	r2, #55	; 0x37
   81510:	4908      	ldr	r1, [pc, #32]	; (81534 <naeusb_build_date_in+0x38>)
   81512:	f104 0009 	add.w	r0, r4, #9
   81516:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81518:	4d07      	ldr	r5, [pc, #28]	; (81538 <naeusb_build_date_in+0x3c>)
   8151a:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   8151c:	4620      	mov	r0, r4
   8151e:	4b07      	ldr	r3, [pc, #28]	; (8153c <naeusb_build_date_in+0x40>)
   81520:	4798      	blx	r3
   81522:	81a8      	strh	r0, [r5, #12]
}
   81524:	2001      	movs	r0, #1
   81526:	bd38      	pop	{r3, r4, r5, pc}
   81528:	200021d8 	.word	0x200021d8
   8152c:	0008ca94 	.word	0x0008ca94
   81530:	000862f1 	.word	0x000862f1
   81534:	0008ca88 	.word	0x0008ca88
   81538:	2000269c 	.word	0x2000269c
   8153c:	00086295 	.word	0x00086295

00081540 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   81540:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81542:	4b07      	ldr	r3, [pc, #28]	; (81560 <naeusb_setup_in_received+0x20>)
   81544:	785b      	ldrb	r3, [r3, #1]
   81546:	2b17      	cmp	r3, #23
   81548:	d003      	beq.n	81552 <naeusb_setup_in_received+0x12>
   8154a:	2b40      	cmp	r3, #64	; 0x40
   8154c:	d004      	beq.n	81558 <naeusb_setup_in_received+0x18>
   8154e:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   81550:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   81552:	4b04      	ldr	r3, [pc, #16]	; (81564 <naeusb_setup_in_received+0x24>)
   81554:	4798      	blx	r3
   81556:	e7fb      	b.n	81550 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   81558:	4b03      	ldr	r3, [pc, #12]	; (81568 <naeusb_setup_in_received+0x28>)
   8155a:	4798      	blx	r3
   8155c:	e7f8      	b.n	81550 <naeusb_setup_in_received+0x10>
   8155e:	bf00      	nop
   81560:	2000269c 	.word	0x2000269c
   81564:	000814dd 	.word	0x000814dd
   81568:	000814fd 	.word	0x000814fd

0008156c <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   8156c:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   8156e:	4803      	ldr	r0, [pc, #12]	; (8157c <naeusb_register_handlers+0x10>)
   81570:	4b03      	ldr	r3, [pc, #12]	; (81580 <naeusb_register_handlers+0x14>)
   81572:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81574:	4803      	ldr	r0, [pc, #12]	; (81584 <naeusb_register_handlers+0x18>)
   81576:	4b04      	ldr	r3, [pc, #16]	; (81588 <naeusb_register_handlers+0x1c>)
   81578:	4798      	blx	r3
   8157a:	bd08      	pop	{r3, pc}
   8157c:	00081541 	.word	0x00081541
   81580:	000812cd 	.word	0x000812cd
   81584:	00081409 	.word	0x00081409
   81588:	000812f1 	.word	0x000812f1

0008158c <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   8158c:	b508      	push	{r3, lr}

    switch(udd_g_ctrlreq.req.wValue){
   8158e:	4b0b      	ldr	r3, [pc, #44]	; (815bc <openadc_progfpga_bulk+0x30>)
   81590:	885b      	ldrh	r3, [r3, #2]
   81592:	2ba1      	cmp	r3, #161	; 0xa1
   81594:	d007      	beq.n	815a6 <openadc_progfpga_bulk+0x1a>
   81596:	2ba2      	cmp	r3, #162	; 0xa2
   81598:	d00b      	beq.n	815b2 <openadc_progfpga_bulk+0x26>
   8159a:	2ba0      	cmp	r3, #160	; 0xa0
   8159c:	d000      	beq.n	815a0 <openadc_progfpga_bulk+0x14>
        break;

    default:
        break;
    }
}
   8159e:	bd08      	pop	{r3, pc}
        fpga_program_setup1();
   815a0:	4b07      	ldr	r3, [pc, #28]	; (815c0 <openadc_progfpga_bulk+0x34>)
   815a2:	4798      	blx	r3
        break;
   815a4:	e7fb      	b.n	8159e <openadc_progfpga_bulk+0x12>
        fpga_program_setup2();
   815a6:	4b07      	ldr	r3, [pc, #28]	; (815c4 <openadc_progfpga_bulk+0x38>)
   815a8:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   815aa:	4b07      	ldr	r3, [pc, #28]	; (815c8 <openadc_progfpga_bulk+0x3c>)
   815ac:	220a      	movs	r2, #10
   815ae:	701a      	strb	r2, [r3, #0]
        break;
   815b0:	e7f5      	b.n	8159e <openadc_progfpga_bulk+0x12>
        blockendpoint_usage = bep_emem;
   815b2:	4b05      	ldr	r3, [pc, #20]	; (815c8 <openadc_progfpga_bulk+0x3c>)
   815b4:	2200      	movs	r2, #0
   815b6:	701a      	strb	r2, [r3, #0]
}
   815b8:	e7f1      	b.n	8159e <openadc_progfpga_bulk+0x12>
   815ba:	bf00      	nop
   815bc:	2000269c 	.word	0x2000269c
   815c0:	000807fd 	.word	0x000807fd
   815c4:	00080891 	.word	0x00080891
   815c8:	20001c3c 	.word	0x20001c3c

000815cc <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   815cc:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   815ce:	4b20      	ldr	r3, [pc, #128]	; (81650 <openadc_setup_out_received+0x84>)
   815d0:	2200      	movs	r2, #0
   815d2:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   815d4:	4b1f      	ldr	r3, [pc, #124]	; (81654 <openadc_setup_out_received+0x88>)
   815d6:	785b      	ldrb	r3, [r3, #1]
   815d8:	3b10      	subs	r3, #16
   815da:	2b06      	cmp	r3, #6
   815dc:	d836      	bhi.n	8164c <openadc_setup_out_received+0x80>
   815de:	e8df f003 	tbb	[pc, r3]
   815e2:	1a04      	.short	0x1a04
   815e4:	3535250f 	.word	0x3535250f
   815e8:	30          	.byte	0x30
   815e9:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   815ea:	2006      	movs	r0, #6
   815ec:	4b1a      	ldr	r3, [pc, #104]	; (81658 <openadc_setup_out_received+0x8c>)
   815ee:	4798      	blx	r3
   815f0:	b908      	cbnz	r0, 815f6 <openadc_setup_out_received+0x2a>

    default:
        return false;
    }

    return false;
   815f2:	2000      	movs	r0, #0
   815f4:	e029      	b.n	8164a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   815f6:	4b17      	ldr	r3, [pc, #92]	; (81654 <openadc_setup_out_received+0x88>)
   815f8:	4a18      	ldr	r2, [pc, #96]	; (8165c <openadc_setup_out_received+0x90>)
   815fa:	611a      	str	r2, [r3, #16]
            return true;
   815fc:	2001      	movs	r0, #1
   815fe:	e024      	b.n	8164a <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   81600:	2006      	movs	r0, #6
   81602:	4b15      	ldr	r3, [pc, #84]	; (81658 <openadc_setup_out_received+0x8c>)
   81604:	4798      	blx	r3
   81606:	b908      	cbnz	r0, 8160c <openadc_setup_out_received+0x40>
    return false;
   81608:	2000      	movs	r0, #0
   8160a:	e01e      	b.n	8164a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   8160c:	4b11      	ldr	r3, [pc, #68]	; (81654 <openadc_setup_out_received+0x88>)
   8160e:	4a14      	ldr	r2, [pc, #80]	; (81660 <openadc_setup_out_received+0x94>)
   81610:	611a      	str	r2, [r3, #16]
            return true;
   81612:	2001      	movs	r0, #1
   81614:	e019      	b.n	8164a <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   81616:	2006      	movs	r0, #6
   81618:	4b0f      	ldr	r3, [pc, #60]	; (81658 <openadc_setup_out_received+0x8c>)
   8161a:	4798      	blx	r3
   8161c:	b908      	cbnz	r0, 81622 <openadc_setup_out_received+0x56>
    return false;
   8161e:	2000      	movs	r0, #0
   81620:	e013      	b.n	8164a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   81622:	4b0c      	ldr	r3, [pc, #48]	; (81654 <openadc_setup_out_received+0x88>)
   81624:	4a0f      	ldr	r2, [pc, #60]	; (81664 <openadc_setup_out_received+0x98>)
   81626:	611a      	str	r2, [r3, #16]
            return true;
   81628:	2001      	movs	r0, #1
   8162a:	e00e      	b.n	8164a <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   8162c:	2006      	movs	r0, #6
   8162e:	4b0a      	ldr	r3, [pc, #40]	; (81658 <openadc_setup_out_received+0x8c>)
   81630:	4798      	blx	r3
   81632:	b908      	cbnz	r0, 81638 <openadc_setup_out_received+0x6c>
    return false;
   81634:	2000      	movs	r0, #0
   81636:	e008      	b.n	8164a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   81638:	4b06      	ldr	r3, [pc, #24]	; (81654 <openadc_setup_out_received+0x88>)
   8163a:	4a0b      	ldr	r2, [pc, #44]	; (81668 <openadc_setup_out_received+0x9c>)
   8163c:	611a      	str	r2, [r3, #16]
            return true;
   8163e:	2001      	movs	r0, #1
   81640:	e003      	b.n	8164a <openadc_setup_out_received+0x7e>
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   81642:	4b04      	ldr	r3, [pc, #16]	; (81654 <openadc_setup_out_received+0x88>)
   81644:	4a09      	ldr	r2, [pc, #36]	; (8166c <openadc_setup_out_received+0xa0>)
   81646:	611a      	str	r2, [r3, #16]
        return true;
   81648:	2001      	movs	r0, #1
}
   8164a:	bd08      	pop	{r3, pc}
    switch(udd_g_ctrlreq.req.bRequest){
   8164c:	2000      	movs	r0, #0
   8164e:	e7fc      	b.n	8164a <openadc_setup_out_received+0x7e>
   81650:	20001c3c 	.word	0x20001c3c
   81654:	2000269c 	.word	0x2000269c
   81658:	00081fdd 	.word	0x00081fdd
   8165c:	00081739 	.word	0x00081739
   81660:	000816a1 	.word	0x000816a1
   81664:	00081671 	.word	0x00081671
   81668:	000816e5 	.word	0x000816e5
   8166c:	0008158d 	.word	0x0008158d

00081670 <openadc_writemem_bulk>:
{
   81670:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81672:	4b07      	ldr	r3, [pc, #28]	; (81690 <openadc_writemem_bulk+0x20>)
   81674:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   81676:	4b07      	ldr	r3, [pc, #28]	; (81694 <openadc_writemem_bulk+0x24>)
   81678:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   8167a:	2504      	movs	r5, #4
   8167c:	4c06      	ldr	r4, [pc, #24]	; (81698 <openadc_writemem_bulk+0x28>)
   8167e:	4628      	mov	r0, r5
   81680:	47a0      	blx	r4
   81682:	2800      	cmp	r0, #0
   81684:	d0fb      	beq.n	8167e <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   81686:	4630      	mov	r0, r6
   81688:	4b04      	ldr	r3, [pc, #16]	; (8169c <openadc_writemem_bulk+0x2c>)
   8168a:	4798      	blx	r3
}
   8168c:	bd70      	pop	{r4, r5, r6, pc}
   8168e:	bf00      	nop
   81690:	20002218 	.word	0x20002218
   81694:	00082009 	.word	0x00082009
   81698:	00081fdd 	.word	0x00081fdd
   8169c:	00082021 	.word	0x00082021

000816a0 <openadc_readmem_ctrl>:
{
   816a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   816a2:	4b0a      	ldr	r3, [pc, #40]	; (816cc <openadc_readmem_ctrl+0x2c>)
   816a4:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816a6:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   816a8:	4b09      	ldr	r3, [pc, #36]	; (816d0 <openadc_readmem_ctrl+0x30>)
   816aa:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   816ac:	2505      	movs	r5, #5
   816ae:	4c09      	ldr	r4, [pc, #36]	; (816d4 <openadc_readmem_ctrl+0x34>)
   816b0:	4628      	mov	r0, r5
   816b2:	47a0      	blx	r4
   816b4:	2800      	cmp	r0, #0
   816b6:	d0fb      	beq.n	816b0 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   816b8:	4638      	mov	r0, r7
   816ba:	4b07      	ldr	r3, [pc, #28]	; (816d8 <openadc_readmem_ctrl+0x38>)
   816bc:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   816be:	4b07      	ldr	r3, [pc, #28]	; (816dc <openadc_readmem_ctrl+0x3c>)
   816c0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   816c4:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   816c6:	4b06      	ldr	r3, [pc, #24]	; (816e0 <openadc_readmem_ctrl+0x40>)
   816c8:	601e      	str	r6, [r3, #0]
}
   816ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816cc:	20002218 	.word	0x20002218
   816d0:	00082009 	.word	0x00082009
   816d4:	00081fdd 	.word	0x00081fdd
   816d8:	00082021 	.word	0x00082021
   816dc:	20001c40 	.word	0x20001c40
   816e0:	20001c44 	.word	0x20001c44

000816e4 <openadc_writemem_ctrl>:
{
   816e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   816e6:	4b0e      	ldr	r3, [pc, #56]	; (81720 <openadc_writemem_ctrl+0x3c>)
   816e8:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816ea:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   816ec:	4b0d      	ldr	r3, [pc, #52]	; (81724 <openadc_writemem_ctrl+0x40>)
   816ee:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   816f0:	2601      	movs	r6, #1
   816f2:	4d0d      	ldr	r5, [pc, #52]	; (81728 <openadc_writemem_ctrl+0x44>)
   816f4:	4630      	mov	r0, r6
   816f6:	47a8      	blx	r5
   816f8:	2800      	cmp	r0, #0
   816fa:	d0fb      	beq.n	816f4 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   816fc:	4638      	mov	r0, r7
   816fe:	4b0b      	ldr	r3, [pc, #44]	; (8172c <openadc_writemem_ctrl+0x48>)
   81700:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81702:	b14c      	cbz	r4, 81718 <openadc_writemem_ctrl+0x34>
   81704:	4a0a      	ldr	r2, [pc, #40]	; (81730 <openadc_writemem_ctrl+0x4c>)
   81706:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   81708:	4d0a      	ldr	r5, [pc, #40]	; (81734 <openadc_writemem_ctrl+0x50>)
   8170a:	6829      	ldr	r1, [r5, #0]
   8170c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   81710:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   81712:	3301      	adds	r3, #1
   81714:	429c      	cmp	r4, r3
   81716:	d1f8      	bne.n	8170a <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   81718:	4b02      	ldr	r3, [pc, #8]	; (81724 <openadc_writemem_ctrl+0x40>)
   8171a:	4798      	blx	r3
}
   8171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8171e:	bf00      	nop
   81720:	20002218 	.word	0x20002218
   81724:	00082009 	.word	0x00082009
   81728:	00081fdd 	.word	0x00081fdd
   8172c:	00082021 	.word	0x00082021
   81730:	2000221f 	.word	0x2000221f
   81734:	20000820 	.word	0x20000820

00081738 <openadc_readmem_bulk>:
{
   81738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8173a:	4b0a      	ldr	r3, [pc, #40]	; (81764 <openadc_readmem_bulk+0x2c>)
   8173c:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8173e:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81740:	4b09      	ldr	r3, [pc, #36]	; (81768 <openadc_readmem_bulk+0x30>)
   81742:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   81744:	2502      	movs	r5, #2
   81746:	4c09      	ldr	r4, [pc, #36]	; (8176c <openadc_readmem_bulk+0x34>)
   81748:	4628      	mov	r0, r5
   8174a:	47a0      	blx	r4
   8174c:	2800      	cmp	r0, #0
   8174e:	d0fb      	beq.n	81748 <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   81750:	4638      	mov	r0, r7
   81752:	4b07      	ldr	r3, [pc, #28]	; (81770 <openadc_readmem_bulk+0x38>)
   81754:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   81756:	4a07      	ldr	r2, [pc, #28]	; (81774 <openadc_readmem_bulk+0x3c>)
   81758:	4631      	mov	r1, r6
   8175a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   8175e:	4b06      	ldr	r3, [pc, #24]	; (81778 <openadc_readmem_bulk+0x40>)
   81760:	4798      	blx	r3
}
   81762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81764:	20002218 	.word	0x20002218
   81768:	00082009 	.word	0x00082009
   8176c:	00081fdd 	.word	0x00081fdd
   81770:	00082021 	.word	0x00082021
   81774:	0008177d 	.word	0x0008177d
   81778:	00083071 	.word	0x00083071

0008177c <main_vendor_bulk_in_received>:
{
   8177c:	b510      	push	{r4, lr}
   8177e:	4604      	mov	r4, r0
    FPGA_releaselock();
   81780:	4b05      	ldr	r3, [pc, #20]	; (81798 <main_vendor_bulk_in_received+0x1c>)
   81782:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81784:	b104      	cbz	r4, 81788 <main_vendor_bulk_in_received+0xc>
}
   81786:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   81788:	4b04      	ldr	r3, [pc, #16]	; (8179c <main_vendor_bulk_in_received+0x20>)
   8178a:	4798      	blx	r3
   8178c:	2802      	cmp	r0, #2
   8178e:	d1fa      	bne.n	81786 <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   81790:	2000      	movs	r0, #0
   81792:	4b03      	ldr	r3, [pc, #12]	; (817a0 <main_vendor_bulk_in_received+0x24>)
   81794:	4798      	blx	r3
   81796:	e7f6      	b.n	81786 <main_vendor_bulk_in_received+0xa>
   81798:	00082009 	.word	0x00082009
   8179c:	00082015 	.word	0x00082015
   817a0:	00081fdd 	.word	0x00081fdd

000817a4 <main_vendor_bulk_out_received>:
{
   817a4:	b570      	push	{r4, r5, r6, lr}
   817a6:	4605      	mov	r5, r0
   817a8:	460c      	mov	r4, r1
    FPGA_releaselock();
   817aa:	4b19      	ldr	r3, [pc, #100]	; (81810 <main_vendor_bulk_out_received+0x6c>)
   817ac:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   817ae:	b9bd      	cbnz	r5, 817e0 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   817b0:	4b18      	ldr	r3, [pc, #96]	; (81814 <main_vendor_bulk_out_received+0x70>)
   817b2:	781b      	ldrb	r3, [r3, #0]
   817b4:	b9f3      	cbnz	r3, 817f4 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   817b6:	b144      	cbz	r4, 817ca <main_vendor_bulk_out_received+0x26>
   817b8:	4a17      	ldr	r2, [pc, #92]	; (81818 <main_vendor_bulk_out_received+0x74>)
            xram[i] = main_buf_loopback[i];
   817ba:	4d18      	ldr	r5, [pc, #96]	; (8181c <main_vendor_bulk_out_received+0x78>)
   817bc:	6829      	ldr	r1, [r5, #0]
   817be:	f812 0b01 	ldrb.w	r0, [r2], #1
   817c2:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   817c4:	3301      	adds	r3, #1
   817c6:	429c      	cmp	r4, r3
   817c8:	d1f8      	bne.n	817bc <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   817ca:	4b15      	ldr	r3, [pc, #84]	; (81820 <main_vendor_bulk_out_received+0x7c>)
   817cc:	4798      	blx	r3
   817ce:	2804      	cmp	r0, #4
   817d0:	d00d      	beq.n	817ee <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   817d2:	4a14      	ldr	r2, [pc, #80]	; (81824 <main_vendor_bulk_out_received+0x80>)
   817d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817d8:	480f      	ldr	r0, [pc, #60]	; (81818 <main_vendor_bulk_out_received+0x74>)
   817da:	4b13      	ldr	r3, [pc, #76]	; (81828 <main_vendor_bulk_out_received+0x84>)
   817dc:	4798      	blx	r3
}
   817de:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   817e0:	4a10      	ldr	r2, [pc, #64]	; (81824 <main_vendor_bulk_out_received+0x80>)
   817e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817e6:	480c      	ldr	r0, [pc, #48]	; (81818 <main_vendor_bulk_out_received+0x74>)
   817e8:	4b0f      	ldr	r3, [pc, #60]	; (81828 <main_vendor_bulk_out_received+0x84>)
   817ea:	4798      	blx	r3
        return;
   817ec:	e7f7      	b.n	817de <main_vendor_bulk_out_received+0x3a>
            FPGA_releaselock();
   817ee:	4b08      	ldr	r3, [pc, #32]	; (81810 <main_vendor_bulk_out_received+0x6c>)
   817f0:	4798      	blx	r3
   817f2:	e7ee      	b.n	817d2 <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   817f4:	2b0a      	cmp	r3, #10
   817f6:	d1ec      	bne.n	817d2 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   817f8:	2c00      	cmp	r4, #0
   817fa:	d0ea      	beq.n	817d2 <main_vendor_bulk_out_received+0x2e>
   817fc:	4d06      	ldr	r5, [pc, #24]	; (81818 <main_vendor_bulk_out_received+0x74>)
   817fe:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81800:	4e0a      	ldr	r6, [pc, #40]	; (8182c <main_vendor_bulk_out_received+0x88>)
   81802:	f815 0b01 	ldrb.w	r0, [r5], #1
   81806:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81808:	42a5      	cmp	r5, r4
   8180a:	d1fa      	bne.n	81802 <main_vendor_bulk_out_received+0x5e>
   8180c:	e7e1      	b.n	817d2 <main_vendor_bulk_out_received+0x2e>
   8180e:	bf00      	nop
   81810:	00082009 	.word	0x00082009
   81814:	20001c3c 	.word	0x20001c3c
   81818:	20002258 	.word	0x20002258
   8181c:	20000820 	.word	0x20000820
   81820:	00082015 	.word	0x00082015
   81824:	000817a5 	.word	0x000817a5
   81828:	0008308d 	.word	0x0008308d
   8182c:	000808a1 	.word	0x000808a1

00081830 <openadc_setup_in_received>:
{
   81830:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81832:	4b13      	ldr	r3, [pc, #76]	; (81880 <openadc_setup_in_received+0x50>)
   81834:	785b      	ldrb	r3, [r3, #1]
   81836:	2b12      	cmp	r3, #18
   81838:	d003      	beq.n	81842 <openadc_setup_in_received+0x12>
   8183a:	2b15      	cmp	r3, #21
   8183c:	d00e      	beq.n	8185c <openadc_setup_in_received+0x2c>
   8183e:	2000      	movs	r0, #0
}
   81840:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81842:	4a0f      	ldr	r2, [pc, #60]	; (81880 <openadc_setup_in_received+0x50>)
   81844:	4b0f      	ldr	r3, [pc, #60]	; (81884 <openadc_setup_in_received+0x54>)
   81846:	681b      	ldr	r3, [r3, #0]
   81848:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8184a:	4b0f      	ldr	r3, [pc, #60]	; (81888 <openadc_setup_in_received+0x58>)
   8184c:	6819      	ldr	r1, [r3, #0]
   8184e:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   81850:	2200      	movs	r2, #0
   81852:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   81854:	4b0d      	ldr	r3, [pc, #52]	; (8188c <openadc_setup_in_received+0x5c>)
   81856:	4798      	blx	r3
        return true;
   81858:	2001      	movs	r0, #1
   8185a:	e7f1      	b.n	81840 <openadc_setup_in_received+0x10>
        respbuf[0] = FPGA_ISDONE();
   8185c:	200a      	movs	r0, #10
   8185e:	4b0c      	ldr	r3, [pc, #48]	; (81890 <openadc_setup_in_received+0x60>)
   81860:	4798      	blx	r3
   81862:	4b0c      	ldr	r3, [pc, #48]	; (81894 <openadc_setup_in_received+0x64>)
   81864:	3800      	subs	r0, #0
   81866:	bf18      	it	ne
   81868:	2001      	movne	r0, #1
   8186a:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   8186c:	2200      	movs	r2, #0
   8186e:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81870:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81872:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81874:	4a02      	ldr	r2, [pc, #8]	; (81880 <openadc_setup_in_received+0x50>)
   81876:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81878:	2304      	movs	r3, #4
   8187a:	8193      	strh	r3, [r2, #12]
        return true;
   8187c:	2001      	movs	r0, #1
   8187e:	e7df      	b.n	81840 <openadc_setup_in_received+0x10>
   81880:	2000269c 	.word	0x2000269c
   81884:	20001c40 	.word	0x20001c40
   81888:	20001c44 	.word	0x20001c44
   8188c:	00082009 	.word	0x00082009
   81890:	00083b69 	.word	0x00083b69
   81894:	200021d8 	.word	0x200021d8

00081898 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81898:	b508      	push	{r3, lr}
    FPGA_releaselock();
   8189a:	4b04      	ldr	r3, [pc, #16]	; (818ac <openadc_register_handlers+0x14>)
   8189c:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   8189e:	4804      	ldr	r0, [pc, #16]	; (818b0 <openadc_register_handlers+0x18>)
   818a0:	4b04      	ldr	r3, [pc, #16]	; (818b4 <openadc_register_handlers+0x1c>)
   818a2:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   818a4:	4804      	ldr	r0, [pc, #16]	; (818b8 <openadc_register_handlers+0x20>)
   818a6:	4b05      	ldr	r3, [pc, #20]	; (818bc <openadc_register_handlers+0x24>)
   818a8:	4798      	blx	r3
}
   818aa:	bd08      	pop	{r3, pc}
   818ac:	00082009 	.word	0x00082009
   818b0:	00081831 	.word	0x00081831
   818b4:	000812cd 	.word	0x000812cd
   818b8:	000815cd 	.word	0x000815cd
   818bc:	000812f1 	.word	0x000812f1

000818c0 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   818c0:	4b16      	ldr	r3, [pc, #88]	; (8191c <usart_setup_out_received+0x5c>)
   818c2:	785b      	ldrb	r3, [r3, #1]
   818c4:	3b1a      	subs	r3, #26
   818c6:	2b17      	cmp	r3, #23
   818c8:	d826      	bhi.n	81918 <usart_setup_out_received+0x58>
   818ca:	e8df f003 	tbb	[pc, r3]
   818ce:	0c11      	.short	0x0c11
   818d0:	25252525 	.word	0x25252525
   818d4:	25251b16 	.word	0x25251b16
   818d8:	25252525 	.word	0x25252525
   818dc:	25252525 	.word	0x25252525
   818e0:	25252525 	.word	0x25252525
   818e4:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   818e6:	4b0d      	ldr	r3, [pc, #52]	; (8191c <usart_setup_out_received+0x5c>)
   818e8:	4a0d      	ldr	r2, [pc, #52]	; (81920 <usart_setup_out_received+0x60>)
   818ea:	611a      	str	r2, [r3, #16]
        return true;
   818ec:	2001      	movs	r0, #1
   818ee:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   818f0:	4b0a      	ldr	r3, [pc, #40]	; (8191c <usart_setup_out_received+0x5c>)
   818f2:	4a0c      	ldr	r2, [pc, #48]	; (81924 <usart_setup_out_received+0x64>)
   818f4:	611a      	str	r2, [r3, #16]
        return true;
   818f6:	2001      	movs	r0, #1
   818f8:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   818fa:	4b08      	ldr	r3, [pc, #32]	; (8191c <usart_setup_out_received+0x5c>)
   818fc:	4a0a      	ldr	r2, [pc, #40]	; (81928 <usart_setup_out_received+0x68>)
   818fe:	611a      	str	r2, [r3, #16]
        return true;
   81900:	2001      	movs	r0, #1
   81902:	4770      	bx	lr
#endif
#ifdef CW_PROG_AVR
		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   81904:	4b05      	ldr	r3, [pc, #20]	; (8191c <usart_setup_out_received+0x5c>)
   81906:	4a09      	ldr	r2, [pc, #36]	; (8192c <usart_setup_out_received+0x6c>)
   81908:	611a      	str	r2, [r3, #16]
        return true;
   8190a:	2001      	movs	r0, #1
   8190c:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   8190e:	4b03      	ldr	r3, [pc, #12]	; (8191c <usart_setup_out_received+0x5c>)
   81910:	4a07      	ldr	r2, [pc, #28]	; (81930 <usart_setup_out_received+0x70>)
   81912:	611a      	str	r2, [r3, #16]
        return true;
   81914:	2001      	movs	r0, #1
   81916:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest) {
   81918:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   8191a:	4770      	bx	lr
   8191c:	2000269c 	.word	0x2000269c
   81920:	00081cc1 	.word	0x00081cc1
   81924:	00081d0d 	.word	0x00081d0d
   81928:	00081935 	.word	0x00081935
   8192c:	00081941 	.word	0x00081941
   81930:	00081ccd 	.word	0x00081ccd

00081934 <ctrl_xmega_program_void>:
{
   81934:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   81936:	4b01      	ldr	r3, [pc, #4]	; (8193c <ctrl_xmega_program_void+0x8>)
   81938:	4798      	blx	r3
}
   8193a:	bd08      	pop	{r3, pc}
   8193c:	000826fd 	.word	0x000826fd

00081940 <ctrl_avr_program_void>:
{
   81940:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   81942:	4b01      	ldr	r3, [pc, #4]	; (81948 <ctrl_avr_program_void+0x8>)
   81944:	4798      	blx	r3
}
   81946:	bd08      	pop	{r3, pc}
   81948:	00082049 	.word	0x00082049

0008194c <usart0_enableIO>:
{
   8194c:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8194e:	200d      	movs	r0, #13
   81950:	4b0a      	ldr	r3, [pc, #40]	; (8197c <usart0_enableIO+0x30>)
   81952:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81954:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81958:	2013      	movs	r0, #19
   8195a:	4c09      	ldr	r4, [pc, #36]	; (81980 <usart0_enableIO+0x34>)
   8195c:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8195e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81962:	2012      	movs	r0, #18
   81964:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81966:	4b07      	ldr	r3, [pc, #28]	; (81984 <usart0_enableIO+0x38>)
   81968:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8196c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81970:	2150      	movs	r1, #80	; 0x50
   81972:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81976:	601a      	str	r2, [r3, #0]
}
   81978:	bd10      	pop	{r4, pc}
   8197a:	bf00      	nop
   8197c:	00083ef5 	.word	0x00083ef5
   81980:	00083bb9 	.word	0x00083bb9
   81984:	e000e100 	.word	0xe000e100

00081988 <usart_enableIO>:
{
   81988:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   8198a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   8198e:	b103      	cbz	r3, 81992 <usart_enableIO+0xa>
}
   81990:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   81992:	4b01      	ldr	r3, [pc, #4]	; (81998 <usart_enableIO+0x10>)
   81994:	4798      	blx	r3
}
   81996:	e7fb      	b.n	81990 <usart_enableIO+0x8>
   81998:	0008194d 	.word	0x0008194d

0008199c <generic_isr>:
{
   8199c:	b570      	push	{r4, r5, r6, lr}
   8199e:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   819a0:	6800      	ldr	r0, [r0, #0]
   819a2:	4b19      	ldr	r3, [pc, #100]	; (81a08 <generic_isr+0x6c>)
   819a4:	4798      	blx	r3
   819a6:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   819a8:	f010 0f01 	tst.w	r0, #1
   819ac:	d103      	bne.n	819b6 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   819ae:	f015 0f02 	tst.w	r5, #2
   819b2:	d115      	bne.n	819e0 <generic_isr+0x44>
}
   819b4:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   819b6:	4620      	mov	r0, r4
   819b8:	f850 3b1c 	ldr.w	r3, [r0], #28
   819bc:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   819be:	b2f6      	uxtb	r6, r6
   819c0:	2200      	movs	r2, #0
   819c2:	4631      	mov	r1, r6
   819c4:	4b11      	ldr	r3, [pc, #68]	; (81a0c <generic_isr+0x70>)
   819c6:	4798      	blx	r3
        if (driver->cdc_enabled)
   819c8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   819cc:	f013 0f04 	tst.w	r3, #4
   819d0:	d0ed      	beq.n	819ae <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   819d2:	2200      	movs	r2, #0
   819d4:	4631      	mov	r1, r6
   819d6:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   819da:	4b0c      	ldr	r3, [pc, #48]	; (81a0c <generic_isr+0x70>)
   819dc:	4798      	blx	r3
   819de:	e7e6      	b.n	819ae <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   819e0:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   819e4:	4628      	mov	r0, r5
   819e6:	4b0a      	ldr	r3, [pc, #40]	; (81a10 <generic_isr+0x74>)
   819e8:	4798      	blx	r3
   819ea:	b140      	cbz	r0, 819fe <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   819ec:	6824      	ldr	r4, [r4, #0]
   819ee:	4628      	mov	r0, r5
   819f0:	4b08      	ldr	r3, [pc, #32]	; (81a14 <generic_isr+0x78>)
   819f2:	4798      	blx	r3
   819f4:	4601      	mov	r1, r0
   819f6:	4620      	mov	r0, r4
   819f8:	4b07      	ldr	r3, [pc, #28]	; (81a18 <generic_isr+0x7c>)
   819fa:	4798      	blx	r3
   819fc:	e7da      	b.n	819b4 <generic_isr+0x18>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   819fe:	2102      	movs	r1, #2
   81a00:	6820      	ldr	r0, [r4, #0]
   81a02:	4b06      	ldr	r3, [pc, #24]	; (81a1c <generic_isr+0x80>)
   81a04:	4798      	blx	r3
}
   81a06:	e7d5      	b.n	819b4 <generic_isr+0x18>
   81a08:	000855d9 	.word	0x000855d9
   81a0c:	0008079b 	.word	0x0008079b
   81a10:	000807e3 	.word	0x000807e3
   81a14:	000807c5 	.word	0x000807c5
   81a18:	000855f9 	.word	0x000855f9
   81a1c:	000855d1 	.word	0x000855d1

00081a20 <USART0_Handler>:
{
   81a20:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   81a22:	4802      	ldr	r0, [pc, #8]	; (81a2c <USART0_Handler+0xc>)
   81a24:	4b02      	ldr	r3, [pc, #8]	; (81a30 <USART0_Handler+0x10>)
   81a26:	4798      	blx	r3
}
   81a28:	bd08      	pop	{r3, pc}
   81a2a:	bf00      	nop
   81a2c:	20000580 	.word	0x20000580
   81a30:	0008199d 	.word	0x0008199d

00081a34 <configure_usart>:
{
   81a34:	b538      	push	{r3, r4, r5, lr}
   81a36:	4604      	mov	r4, r0
   81a38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   81a3c:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   81a3e:	2a01      	cmp	r2, #1
   81a40:	d00d      	beq.n	81a5e <configure_usart+0x2a>
   81a42:	2a02      	cmp	r2, #2
   81a44:	d00f      	beq.n	81a66 <configure_usart+0x32>
   81a46:	b112      	cbz	r2, 81a4e <configure_usart+0x1a>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81a48:	2200      	movs	r2, #0
   81a4a:	6122      	str	r2, [r4, #16]
   81a4c:	e000      	b.n	81a50 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81a4e:	6122      	str	r2, [r4, #16]
    switch(parity)
   81a50:	2b04      	cmp	r3, #4
   81a52:	d827      	bhi.n	81aa4 <configure_usart+0x70>
   81a54:	e8df f003 	tbb	[pc, r3]
   81a58:	1e1b170b 	.word	0x1e1b170b
   81a5c:	22          	.byte	0x22
   81a5d:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81a62:	6122      	str	r2, [r4, #16]
            break;
   81a64:	e7f4      	b.n	81a50 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81a6a:	6122      	str	r2, [r4, #16]
            break;
   81a6c:	e7f0      	b.n	81a50 <configure_usart+0x1c>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a72:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81a74:	2806      	cmp	r0, #6
   81a76:	d037      	beq.n	81ae8 <configure_usart+0xb4>
   81a78:	2807      	cmp	r0, #7
   81a7a:	d038      	beq.n	81aee <configure_usart+0xba>
   81a7c:	2805      	cmp	r0, #5
   81a7e:	d015      	beq.n	81aac <configure_usart+0x78>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81a80:	23c0      	movs	r3, #192	; 0xc0
   81a82:	60a3      	str	r3, [r4, #8]
   81a84:	e014      	b.n	81ab0 <configure_usart+0x7c>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81a86:	f44f 7300 	mov.w	r3, #512	; 0x200
   81a8a:	60e3      	str	r3, [r4, #12]
            break;
   81a8c:	e7f2      	b.n	81a74 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81a8e:	2300      	movs	r3, #0
   81a90:	60e3      	str	r3, [r4, #12]
            break;
   81a92:	e7ef      	b.n	81a74 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81a94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81a98:	60e3      	str	r3, [r4, #12]
            break;
   81a9a:	e7eb      	b.n	81a74 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81aa0:	60e3      	str	r3, [r4, #12]
            break;							
   81aa2:	e7e7      	b.n	81a74 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81aa8:	60e3      	str	r3, [r4, #12]
   81aaa:	e7e3      	b.n	81a74 <configure_usart+0x40>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81aac:	2300      	movs	r3, #0
   81aae:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81ab0:	2300      	movs	r3, #0
   81ab2:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   81ab4:	4620      	mov	r0, r4
   81ab6:	4b0f      	ldr	r3, [pc, #60]	; (81af4 <configure_usart+0xc0>)
   81ab8:	4798      	blx	r3
    driver->enabled = 1;
   81aba:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81abe:	f043 0302 	orr.w	r3, r3, #2
   81ac2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81ac6:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81aca:	4d0b      	ldr	r5, [pc, #44]	; (81af8 <configure_usart+0xc4>)
   81acc:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81ace:	f104 001c 	add.w	r0, r4, #28
   81ad2:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81ad4:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81ad8:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81ada:	4621      	mov	r1, r4
   81adc:	f851 0b04 	ldr.w	r0, [r1], #4
   81ae0:	4a06      	ldr	r2, [pc, #24]	; (81afc <configure_usart+0xc8>)
   81ae2:	4b07      	ldr	r3, [pc, #28]	; (81b00 <configure_usart+0xcc>)
   81ae4:	4798      	blx	r3
}
   81ae6:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81ae8:	2340      	movs	r3, #64	; 0x40
   81aea:	60a3      	str	r3, [r4, #8]
            break;
   81aec:	e7e0      	b.n	81ab0 <configure_usart+0x7c>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81aee:	2380      	movs	r3, #128	; 0x80
   81af0:	60a3      	str	r3, [r4, #8]
            break;					
   81af2:	e7dd      	b.n	81ab0 <configure_usart+0x7c>
   81af4:	00081989 	.word	0x00081989
   81af8:	00080791 	.word	0x00080791
   81afc:	05b8d800 	.word	0x05b8d800
   81b00:	000854fd 	.word	0x000854fd

00081b04 <usart_driver_putchar>:
{
   81b04:	b570      	push	{r4, r5, r6, lr}
   81b06:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81b08:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81b0c:	2200      	movs	r2, #0
   81b0e:	4628      	mov	r0, r5
   81b10:	4b0e      	ldr	r3, [pc, #56]	; (81b4c <usart_driver_putchar+0x48>)
   81b12:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81b14:	6820      	ldr	r0, [r4, #0]
   81b16:	4b0e      	ldr	r3, [pc, #56]	; (81b50 <usart_driver_putchar+0x4c>)
   81b18:	4798      	blx	r3
   81b1a:	f010 0f02 	tst.w	r0, #2
   81b1e:	d000      	beq.n	81b22 <usart_driver_putchar+0x1e>
}
   81b20:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81b22:	6820      	ldr	r0, [r4, #0]
   81b24:	4b0b      	ldr	r3, [pc, #44]	; (81b54 <usart_driver_putchar+0x50>)
   81b26:	4798      	blx	r3
   81b28:	f010 0f02 	tst.w	r0, #2
   81b2c:	d104      	bne.n	81b38 <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81b2e:	2102      	movs	r1, #2
   81b30:	6820      	ldr	r0, [r4, #0]
   81b32:	4b09      	ldr	r3, [pc, #36]	; (81b58 <usart_driver_putchar+0x54>)
   81b34:	4798      	blx	r3
}
   81b36:	e7f3      	b.n	81b20 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81b38:	6826      	ldr	r6, [r4, #0]
   81b3a:	4628      	mov	r0, r5
   81b3c:	4b07      	ldr	r3, [pc, #28]	; (81b5c <usart_driver_putchar+0x58>)
   81b3e:	4798      	blx	r3
   81b40:	4601      	mov	r1, r0
   81b42:	4630      	mov	r0, r6
   81b44:	4b06      	ldr	r3, [pc, #24]	; (81b60 <usart_driver_putchar+0x5c>)
   81b46:	4798      	blx	r3
   81b48:	e7f1      	b.n	81b2e <usart_driver_putchar+0x2a>
   81b4a:	bf00      	nop
   81b4c:	0008079b 	.word	0x0008079b
   81b50:	000855d5 	.word	0x000855d5
   81b54:	000855d9 	.word	0x000855d9
   81b58:	000855cd 	.word	0x000855cd
   81b5c:	000807c5 	.word	0x000807c5
   81b60:	000855f9 	.word	0x000855f9

00081b64 <get_nth_available_driver>:
        if (id == 0) return &usart0_driver;
   81b64:	2800      	cmp	r0, #0
}
   81b66:	4802      	ldr	r0, [pc, #8]	; (81b70 <get_nth_available_driver+0xc>)
   81b68:	bf18      	it	ne
   81b6a:	2000      	movne	r0, #0
   81b6c:	4770      	bx	lr
   81b6e:	bf00      	nop
   81b70:	20000580 	.word	0x20000580

00081b74 <ctrl_usart_in>:
{
   81b74:	b510      	push	{r4, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81b76:	4b25      	ldr	r3, [pc, #148]	; (81c0c <ctrl_usart_in+0x98>)
   81b78:	885c      	ldrh	r4, [r3, #2]
   81b7a:	0a20      	lsrs	r0, r4, #8
   81b7c:	4b24      	ldr	r3, [pc, #144]	; (81c10 <ctrl_usart_in+0x9c>)
   81b7e:	4798      	blx	r3
    if (!driver)
   81b80:	2800      	cmp	r0, #0
   81b82:	d040      	beq.n	81c06 <ctrl_usart_in+0x92>
   81b84:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81b86:	b2e0      	uxtb	r0, r4
   81b88:	2814      	cmp	r0, #20
   81b8a:	d006      	beq.n	81b9a <ctrl_usart_in+0x26>
   81b8c:	2818      	cmp	r0, #24
   81b8e:	d01f      	beq.n	81bd0 <ctrl_usart_in+0x5c>
   81b90:	2810      	cmp	r0, #16
   81b92:	bf14      	ite	ne
   81b94:	2000      	movne	r0, #0
   81b96:	2001      	moveq	r0, #1
}
   81b98:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81b9a:	4a1c      	ldr	r2, [pc, #112]	; (81c0c <ctrl_usart_in+0x98>)
   81b9c:	88d2      	ldrh	r2, [r2, #6]
   81b9e:	2a03      	cmp	r2, #3
   81ba0:	d801      	bhi.n	81ba6 <ctrl_usart_in+0x32>
            return false;
   81ba2:	2000      	movs	r0, #0
   81ba4:	e7f8      	b.n	81b98 <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81ba6:	4a19      	ldr	r2, [pc, #100]	; (81c0c <ctrl_usart_in+0x98>)
   81ba8:	4c1a      	ldr	r4, [pc, #104]	; (81c14 <ctrl_usart_in+0xa0>)
   81baa:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81bac:	2104      	movs	r1, #4
   81bae:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81bb0:	f103 001c 	add.w	r0, r3, #28
   81bb4:	4b18      	ldr	r3, [pc, #96]	; (81c18 <ctrl_usart_in+0xa4>)
   81bb6:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81bb8:	7020      	strb	r0, [r4, #0]
   81bba:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81bbe:	7063      	strb	r3, [r4, #1]
   81bc0:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81bc4:	70a3      	strb	r3, [r4, #2]
   81bc6:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81bca:	70e0      	strb	r0, [r4, #3]
        return true;
   81bcc:	2001      	movs	r0, #1
   81bce:	e7e3      	b.n	81b98 <ctrl_usart_in+0x24>
        if (udd_g_ctrlreq.req.wLength < 4) {
   81bd0:	4a0e      	ldr	r2, [pc, #56]	; (81c0c <ctrl_usart_in+0x98>)
   81bd2:	88d2      	ldrh	r2, [r2, #6]
   81bd4:	2a03      	cmp	r2, #3
   81bd6:	d801      	bhi.n	81bdc <ctrl_usart_in+0x68>
            return false;
   81bd8:	2000      	movs	r0, #0
   81bda:	e7dd      	b.n	81b98 <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81bdc:	4a0b      	ldr	r2, [pc, #44]	; (81c0c <ctrl_usart_in+0x98>)
   81bde:	4c0d      	ldr	r4, [pc, #52]	; (81c14 <ctrl_usart_in+0xa0>)
   81be0:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81be2:	2104      	movs	r1, #4
   81be4:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81be6:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   81bea:	4b0b      	ldr	r3, [pc, #44]	; (81c18 <ctrl_usart_in+0xa4>)
   81bec:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81bee:	7020      	strb	r0, [r4, #0]
   81bf0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81bf4:	7063      	strb	r3, [r4, #1]
   81bf6:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81bfa:	70a3      	strb	r3, [r4, #2]
   81bfc:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81c00:	70e0      	strb	r0, [r4, #3]
        return true;
   81c02:	2001      	movs	r0, #1
   81c04:	e7c8      	b.n	81b98 <ctrl_usart_in+0x24>
        return false;
   81c06:	2000      	movs	r0, #0
   81c08:	e7c6      	b.n	81b98 <ctrl_usart_in+0x24>
   81c0a:	bf00      	nop
   81c0c:	2000269c 	.word	0x2000269c
   81c10:	00081b65 	.word	0x00081b65
   81c14:	200021d8 	.word	0x200021d8
   81c18:	000807ef 	.word	0x000807ef

00081c1c <ctrl_usart_out>:
{
   81c1c:	b570      	push	{r4, r5, r6, lr}
   81c1e:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81c20:	4b1d      	ldr	r3, [pc, #116]	; (81c98 <ctrl_usart_out+0x7c>)
   81c22:	885c      	ldrh	r4, [r3, #2]
   81c24:	0a20      	lsrs	r0, r4, #8
   81c26:	4b1d      	ldr	r3, [pc, #116]	; (81c9c <ctrl_usart_out+0x80>)
   81c28:	4798      	blx	r3
    if (!driver) return;
   81c2a:	b138      	cbz	r0, 81c3c <ctrl_usart_out+0x20>
   81c2c:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81c2e:	b2e3      	uxtb	r3, r4
   81c30:	2b11      	cmp	r3, #17
   81c32:	d018      	beq.n	81c66 <ctrl_usart_out+0x4a>
   81c34:	2b12      	cmp	r3, #18
   81c36:	d023      	beq.n	81c80 <ctrl_usart_out+0x64>
   81c38:	2b10      	cmp	r3, #16
   81c3a:	d001      	beq.n	81c40 <ctrl_usart_out+0x24>
}
   81c3c:	b002      	add	sp, #8
   81c3e:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   81c40:	4b15      	ldr	r3, [pc, #84]	; (81c98 <ctrl_usart_out+0x7c>)
   81c42:	88db      	ldrh	r3, [r3, #6]
   81c44:	2b07      	cmp	r3, #7
   81c46:	d1f9      	bne.n	81c3c <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   81c48:	4c13      	ldr	r4, [pc, #76]	; (81c98 <ctrl_usart_out+0x7c>)
   81c4a:	68a3      	ldr	r3, [r4, #8]
   81c4c:	681e      	ldr	r6, [r3, #0]
		usart_enableIO(driver);
   81c4e:	4b14      	ldr	r3, [pc, #80]	; (81ca0 <ctrl_usart_out+0x84>)
   81c50:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81c52:	68a1      	ldr	r1, [r4, #8]
   81c54:	794b      	ldrb	r3, [r1, #5]
   81c56:	790a      	ldrb	r2, [r1, #4]
   81c58:	7989      	ldrb	r1, [r1, #6]
   81c5a:	9100      	str	r1, [sp, #0]
   81c5c:	4631      	mov	r1, r6
   81c5e:	4628      	mov	r0, r5
   81c60:	4c10      	ldr	r4, [pc, #64]	; (81ca4 <ctrl_usart_out+0x88>)
   81c62:	47a0      	blx	r4
        return true;
   81c64:	e7ea      	b.n	81c3c <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   81c66:	4b0e      	ldr	r3, [pc, #56]	; (81ca0 <ctrl_usart_out+0x84>)
   81c68:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81c6a:	6828      	ldr	r0, [r5, #0]
   81c6c:	4b0e      	ldr	r3, [pc, #56]	; (81ca8 <ctrl_usart_out+0x8c>)
   81c6e:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81c70:	6828      	ldr	r0, [r5, #0]
   81c72:	4b0e      	ldr	r3, [pc, #56]	; (81cac <ctrl_usart_out+0x90>)
   81c74:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81c76:	2101      	movs	r1, #1
   81c78:	6828      	ldr	r0, [r5, #0]
   81c7a:	4b0d      	ldr	r3, [pc, #52]	; (81cb0 <ctrl_usart_out+0x94>)
   81c7c:	4798      	blx	r3
		return;
   81c7e:	e7dd      	b.n	81c3c <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   81c80:	6800      	ldr	r0, [r0, #0]
   81c82:	4b0c      	ldr	r3, [pc, #48]	; (81cb4 <ctrl_usart_out+0x98>)
   81c84:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81c86:	6828      	ldr	r0, [r5, #0]
   81c88:	4b0b      	ldr	r3, [pc, #44]	; (81cb8 <ctrl_usart_out+0x9c>)
   81c8a:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81c8c:	2103      	movs	r1, #3
   81c8e:	6828      	ldr	r0, [r5, #0]
   81c90:	4b0a      	ldr	r3, [pc, #40]	; (81cbc <ctrl_usart_out+0xa0>)
   81c92:	4798      	blx	r3
        return true;
   81c94:	e7d2      	b.n	81c3c <ctrl_usart_out+0x20>
   81c96:	bf00      	nop
   81c98:	2000269c 	.word	0x2000269c
   81c9c:	00081b65 	.word	0x00081b65
   81ca0:	00081989 	.word	0x00081989
   81ca4:	00081a35 	.word	0x00081a35
   81ca8:	000855c1 	.word	0x000855c1
   81cac:	000855b5 	.word	0x000855b5
   81cb0:	000855cd 	.word	0x000855cd
   81cb4:	000855c7 	.word	0x000855c7
   81cb8:	000855bb 	.word	0x000855bb
   81cbc:	000855d1 	.word	0x000855d1

00081cc0 <ctrl_usart_cb>:
{
   81cc0:	b508      	push	{r3, lr}
	ctrl_usart_out();
   81cc2:	4b01      	ldr	r3, [pc, #4]	; (81cc8 <ctrl_usart_cb+0x8>)
   81cc4:	4798      	blx	r3
}
   81cc6:	bd08      	pop	{r3, pc}
   81cc8:	00081c1d 	.word	0x00081c1d

00081ccc <naeusb_cdc_settings_out>:
{
   81ccc:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81cce:	4b0d      	ldr	r3, [pc, #52]	; (81d04 <naeusb_cdc_settings_out+0x38>)
   81cd0:	885e      	ldrh	r6, [r3, #2]
   81cd2:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81cd4:	4d0c      	ldr	r5, [pc, #48]	; (81d08 <naeusb_cdc_settings_out+0x3c>)
   81cd6:	e002      	b.n	81cde <naeusb_cdc_settings_out+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81cd8:	3401      	adds	r4, #1
   81cda:	2c04      	cmp	r4, #4
   81cdc:	d011      	beq.n	81d02 <naeusb_cdc_settings_out+0x36>
        usart_driver *driver = get_nth_available_driver(i);
   81cde:	4620      	mov	r0, r4
   81ce0:	47a8      	blx	r5
        if (driver) {
   81ce2:	2800      	cmp	r0, #0
   81ce4:	d0f8      	beq.n	81cd8 <naeusb_cdc_settings_out+0xc>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81ce6:	fa46 f204 	asr.w	r2, r6, r4
   81cea:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   81cee:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   81cf2:	bf14      	ite	ne
   81cf4:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   81cf8:	f36f 02c3 	bfceq	r2, #3, #1
   81cfc:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   81d00:	e7ea      	b.n	81cd8 <naeusb_cdc_settings_out+0xc>
}
   81d02:	bd70      	pop	{r4, r5, r6, pc}
   81d04:	2000269c 	.word	0x2000269c
   81d08:	00081b65 	.word	0x00081b65

00081d0c <ctrl_usart_cb_data>:
{		
   81d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81d0e:	4b0c      	ldr	r3, [pc, #48]	; (81d40 <ctrl_usart_cb_data+0x34>)
   81d10:	8858      	ldrh	r0, [r3, #2]
   81d12:	0a00      	lsrs	r0, r0, #8
   81d14:	4b0b      	ldr	r3, [pc, #44]	; (81d44 <ctrl_usart_cb_data+0x38>)
   81d16:	4798      	blx	r3
	if (!driver) return;
   81d18:	b188      	cbz	r0, 81d3e <ctrl_usart_cb_data+0x32>
   81d1a:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81d1c:	4b08      	ldr	r3, [pc, #32]	; (81d40 <ctrl_usart_cb_data+0x34>)
   81d1e:	88da      	ldrh	r2, [r3, #6]
   81d20:	899b      	ldrh	r3, [r3, #12]
   81d22:	4293      	cmp	r3, r2
   81d24:	d30b      	bcc.n	81d3e <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81d26:	b152      	cbz	r2, 81d3e <ctrl_usart_cb_data+0x32>
   81d28:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81d2a:	4d05      	ldr	r5, [pc, #20]	; (81d40 <ctrl_usart_cb_data+0x34>)
   81d2c:	4f06      	ldr	r7, [pc, #24]	; (81d48 <ctrl_usart_cb_data+0x3c>)
   81d2e:	68ab      	ldr	r3, [r5, #8]
   81d30:	5d19      	ldrb	r1, [r3, r4]
   81d32:	4630      	mov	r0, r6
   81d34:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81d36:	3401      	adds	r4, #1
   81d38:	88eb      	ldrh	r3, [r5, #6]
   81d3a:	42a3      	cmp	r3, r4
   81d3c:	dcf7      	bgt.n	81d2e <ctrl_usart_cb_data+0x22>
}
   81d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d40:	2000269c 	.word	0x2000269c
   81d44:	00081b65 	.word	0x00081b65
   81d48:	00081b05 	.word	0x00081b05

00081d4c <naeusart_register_handlers>:
{
   81d4c:	b570      	push	{r4, r5, r6, lr}
   81d4e:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   81d50:	4d09      	ldr	r5, [pc, #36]	; (81d78 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   81d52:	4e0a      	ldr	r6, [pc, #40]	; (81d7c <naeusart_register_handlers+0x30>)
   81d54:	e002      	b.n	81d5c <naeusart_register_handlers+0x10>
	for (uint8_t i = 0; i < 4; i++) {
   81d56:	3401      	adds	r4, #1
   81d58:	2c04      	cmp	r4, #4
   81d5a:	d005      	beq.n	81d68 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   81d5c:	4620      	mov	r0, r4
   81d5e:	47a8      	blx	r5
		if (!driver) continue;
   81d60:	2800      	cmp	r0, #0
   81d62:	d0f8      	beq.n	81d56 <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   81d64:	47b0      	blx	r6
   81d66:	e7f6      	b.n	81d56 <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   81d68:	4805      	ldr	r0, [pc, #20]	; (81d80 <naeusart_register_handlers+0x34>)
   81d6a:	4b06      	ldr	r3, [pc, #24]	; (81d84 <naeusart_register_handlers+0x38>)
   81d6c:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   81d6e:	4806      	ldr	r0, [pc, #24]	; (81d88 <naeusart_register_handlers+0x3c>)
   81d70:	4b06      	ldr	r3, [pc, #24]	; (81d8c <naeusart_register_handlers+0x40>)
   81d72:	4798      	blx	r3
}
   81d74:	bd70      	pop	{r4, r5, r6, pc}
   81d76:	bf00      	nop
   81d78:	00081b65 	.word	0x00081b65
   81d7c:	00081989 	.word	0x00081989
   81d80:	00081dd9 	.word	0x00081dd9
   81d84:	000812cd 	.word	0x000812cd
   81d88:	000818c1 	.word	0x000818c1
   81d8c:	000812f1 	.word	0x000812f1

00081d90 <naeusb_cdc_settings_in>:
{
   81d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < 4; i++) {
   81d92:	4d0e      	ldr	r5, [pc, #56]	; (81dcc <naeusb_cdc_settings_in+0x3c>)
{
   81d94:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81d96:	4f0e      	ldr	r7, [pc, #56]	; (81dd0 <naeusb_cdc_settings_in+0x40>)
		respbuf[i] = 0;
   81d98:	4626      	mov	r6, r4
   81d9a:	e002      	b.n	81da2 <naeusb_cdc_settings_in+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81d9c:	3401      	adds	r4, #1
   81d9e:	2c04      	cmp	r4, #4
   81da0:	d00c      	beq.n	81dbc <naeusb_cdc_settings_in+0x2c>
        usart_driver *driver = get_nth_available_driver(i);
   81da2:	4620      	mov	r0, r4
   81da4:	47b8      	blx	r7
		respbuf[i] = 0;
   81da6:	f805 6b01 	strb.w	r6, [r5], #1
        if (driver)
   81daa:	2800      	cmp	r0, #0
   81dac:	d0f6      	beq.n	81d9c <naeusb_cdc_settings_in+0xc>
            respbuf[i] = driver->cdc_settings_change;
   81dae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81db2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   81db6:	f805 3c01 	strb.w	r3, [r5, #-1]
   81dba:	e7ef      	b.n	81d9c <naeusb_cdc_settings_in+0xc>
    udd_g_ctrlreq.payload = respbuf;
   81dbc:	4b05      	ldr	r3, [pc, #20]	; (81dd4 <naeusb_cdc_settings_in+0x44>)
   81dbe:	4a03      	ldr	r2, [pc, #12]	; (81dcc <naeusb_cdc_settings_in+0x3c>)
   81dc0:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 4;
   81dc2:	2204      	movs	r2, #4
   81dc4:	819a      	strh	r2, [r3, #12]
}
   81dc6:	2001      	movs	r0, #1
   81dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81dca:	bf00      	nop
   81dcc:	200021d8 	.word	0x200021d8
   81dd0:	00081b65 	.word	0x00081b65
   81dd4:	2000269c 	.word	0x2000269c

00081dd8 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81ddc:	4b21      	ldr	r3, [pc, #132]	; (81e64 <usart_setup_in_received+0x8c>)
   81dde:	785b      	ldrb	r3, [r3, #1]
   81de0:	3b1a      	subs	r3, #26
   81de2:	2b17      	cmp	r3, #23
   81de4:	d839      	bhi.n	81e5a <usart_setup_in_received+0x82>
   81de6:	e8df f003 	tbb	[pc, r3]
   81dea:	0c0f      	.short	0x0c0f
   81dec:	38383838 	.word	0x38383838
   81df0:	3838322f 	.word	0x3838322f
   81df4:	38383838 	.word	0x38383838
   81df8:	38383838 	.word	0x38383838
   81dfc:	38383838 	.word	0x38383838
   81e00:	3538      	.short	0x3538
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   81e02:	4b19      	ldr	r3, [pc, #100]	; (81e68 <usart_setup_in_received+0x90>)
   81e04:	4798      	blx	r3
   81e06:	e029      	b.n	81e5c <usart_setup_in_received+0x84>
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e08:	4b16      	ldr	r3, [pc, #88]	; (81e64 <usart_setup_in_received+0x8c>)
   81e0a:	8858      	ldrh	r0, [r3, #2]
   81e0c:	0a00      	lsrs	r0, r0, #8
   81e0e:	4b17      	ldr	r3, [pc, #92]	; (81e6c <usart_setup_in_received+0x94>)
   81e10:	4798      	blx	r3
		if (!driver) return false;
   81e12:	4606      	mov	r6, r0
   81e14:	b320      	cbz	r0, 81e60 <usart_setup_in_received+0x88>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e16:	4b13      	ldr	r3, [pc, #76]	; (81e64 <usart_setup_in_received+0x8c>)
   81e18:	88db      	ldrh	r3, [r3, #6]
   81e1a:	b19b      	cbz	r3, 81e44 <usart_setup_in_received+0x6c>
   81e1c:	4d14      	ldr	r5, [pc, #80]	; (81e70 <usart_setup_in_received+0x98>)
   81e1e:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   81e20:	361c      	adds	r6, #28
   81e22:	f8df 805c 	ldr.w	r8, [pc, #92]	; 81e80 <usart_setup_in_received+0xa8>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e26:	4f0f      	ldr	r7, [pc, #60]	; (81e64 <usart_setup_in_received+0x8c>)
    return get_from_circ_buf(&driver->rxbuf);
   81e28:	4630      	mov	r0, r6
   81e2a:	47c0      	blx	r8
            respbuf[cnt] = usart_driver_getchar(driver);
   81e2c:	f805 0b01 	strb.w	r0, [r5], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e30:	3401      	adds	r4, #1
   81e32:	88fb      	ldrh	r3, [r7, #6]
   81e34:	42a3      	cmp	r3, r4
   81e36:	d8f7      	bhi.n	81e28 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   81e38:	4b0a      	ldr	r3, [pc, #40]	; (81e64 <usart_setup_in_received+0x8c>)
   81e3a:	4a0d      	ldr	r2, [pc, #52]	; (81e70 <usart_setup_in_received+0x98>)
   81e3c:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81e3e:	819c      	strh	r4, [r3, #12]
        return true;
   81e40:	2001      	movs	r0, #1
   81e42:	e00b      	b.n	81e5c <usart_setup_in_received+0x84>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e44:	2400      	movs	r4, #0
   81e46:	e7f7      	b.n	81e38 <usart_setup_in_received+0x60>
        break;
		
#ifdef CW_PROG_XMEGA
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   81e48:	4b0a      	ldr	r3, [pc, #40]	; (81e74 <usart_setup_in_received+0x9c>)
   81e4a:	4798      	blx	r3
   81e4c:	e006      	b.n	81e5c <usart_setup_in_received+0x84>
        break;
#endif

#ifdef CW_PROG_AVR        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   81e4e:	4b0a      	ldr	r3, [pc, #40]	; (81e78 <usart_setup_in_received+0xa0>)
   81e50:	4798      	blx	r3
   81e52:	e003      	b.n	81e5c <usart_setup_in_received+0x84>
        break;
#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   81e54:	4b09      	ldr	r3, [pc, #36]	; (81e7c <usart_setup_in_received+0xa4>)
   81e56:	4798      	blx	r3
   81e58:	e000      	b.n	81e5c <usart_setup_in_received+0x84>
    switch(udd_g_ctrlreq.req.bRequest) {
   81e5a:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   81e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   81e60:	2000      	movs	r0, #0
   81e62:	e7fb      	b.n	81e5c <usart_setup_in_received+0x84>
   81e64:	2000269c 	.word	0x2000269c
   81e68:	00081b75 	.word	0x00081b75
   81e6c:	00081b65 	.word	0x00081b65
   81e70:	200021d8 	.word	0x200021d8
   81e74:	000826fd 	.word	0x000826fd
   81e78:	00082049 	.word	0x00082049
   81e7c:	00081d91 	.word	0x00081d91
   81e80:	000807c5 	.word	0x000807c5

00081e84 <cdc_enable>:
{
   81e84:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81e86:	4b05      	ldr	r3, [pc, #20]	; (81e9c <cdc_enable+0x18>)
   81e88:	4798      	blx	r3
    driver->cdc_enabled = 1;
   81e8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e8e:	f043 0304 	orr.w	r3, r3, #4
   81e92:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81e96:	2001      	movs	r0, #1
   81e98:	bd08      	pop	{r3, pc}
   81e9a:	bf00      	nop
   81e9c:	00081b65 	.word	0x00081b65

00081ea0 <cdc_disable>:
{
   81ea0:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81ea2:	4b04      	ldr	r3, [pc, #16]	; (81eb4 <cdc_disable+0x14>)
   81ea4:	4798      	blx	r3
    driver->cdc_enabled = 0;
   81ea6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81eaa:	f36f 0382 	bfc	r3, #2, #1
   81eae:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81eb2:	bd08      	pop	{r3, pc}
   81eb4:	00081b65 	.word	0x00081b65

00081eb8 <my_callback_rx_notify>:
{
   81eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ebc:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   81ebe:	4b19      	ldr	r3, [pc, #100]	; (81f24 <my_callback_rx_notify+0x6c>)
   81ec0:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81ec2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81ec6:	f003 0306 	and.w	r3, r3, #6
   81eca:	2b06      	cmp	r3, #6
   81ecc:	d001      	beq.n	81ed2 <my_callback_rx_notify+0x1a>
}
   81ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ed2:	4605      	mov	r5, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   81ed4:	4648      	mov	r0, r9
   81ed6:	4b14      	ldr	r3, [pc, #80]	; (81f28 <my_callback_rx_notify+0x70>)
   81ed8:	4798      	blx	r3
        while (num_char > 0) {
   81eda:	4604      	mov	r4, r0
   81edc:	2800      	cmp	r0, #0
   81ede:	d0f6      	beq.n	81ece <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81ee0:	4f12      	ldr	r7, [pc, #72]	; (81f2c <my_callback_rx_notify+0x74>)
   81ee2:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81f30 <my_callback_rx_notify+0x78>
                usart_driver_putchar(driver, uart_buf[i]);
   81ee6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81f34 <my_callback_rx_notify+0x7c>
   81eea:	e005      	b.n	81ef8 <my_callback_rx_notify+0x40>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   81eec:	4648      	mov	r0, r9
   81eee:	4b0e      	ldr	r3, [pc, #56]	; (81f28 <my_callback_rx_notify+0x70>)
   81ef0:	4798      	blx	r3
        while (num_char > 0) {
   81ef2:	4604      	mov	r4, r0
   81ef4:	2800      	cmp	r0, #0
   81ef6:	d0ea      	beq.n	81ece <my_callback_rx_notify+0x16>
            num_char = (num_char > 512) ? 512 : num_char;
   81ef8:	4626      	mov	r6, r4
   81efa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   81efe:	bf28      	it	cs
   81f00:	f44f 7600 	movcs.w	r6, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81f04:	4632      	mov	r2, r6
   81f06:	4639      	mov	r1, r7
   81f08:	4648      	mov	r0, r9
   81f0a:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   81f0c:	2c00      	cmp	r4, #0
   81f0e:	d0ed      	beq.n	81eec <my_callback_rx_notify+0x34>
   81f10:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   81f12:	5d39      	ldrb	r1, [r7, r4]
   81f14:	4628      	mov	r0, r5
   81f16:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   81f18:	3401      	adds	r4, #1
   81f1a:	b2a4      	uxth	r4, r4
   81f1c:	42b4      	cmp	r4, r6
   81f1e:	d3f8      	bcc.n	81f12 <my_callback_rx_notify+0x5a>
   81f20:	e7e4      	b.n	81eec <my_callback_rx_notify+0x34>
   81f22:	bf00      	nop
   81f24:	00081b65 	.word	0x00081b65
   81f28:	000803c5 	.word	0x000803c5
   81f2c:	20001c48 	.word	0x20001c48
   81f30:	000805cd 	.word	0x000805cd
   81f34:	00081b05 	.word	0x00081b05

00081f38 <my_callback_config>:
{
   81f38:	b510      	push	{r4, lr}
   81f3a:	b082      	sub	sp, #8
   81f3c:	460c      	mov	r4, r1
	usart_driver *driver = get_nth_available_driver(port);
   81f3e:	4b0c      	ldr	r3, [pc, #48]	; (81f70 <my_callback_config+0x38>)
   81f40:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81f42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f46:	f003 0306 	and.w	r3, r3, #6
   81f4a:	2b06      	cmp	r3, #6
   81f4c:	d001      	beq.n	81f52 <my_callback_config+0x1a>
}
   81f4e:	b002      	add	sp, #8
   81f50:	bd10      	pop	{r4, pc}
        switch(cfg->bParityType) {
   81f52:	7963      	ldrb	r3, [r4, #5]
   81f54:	2b04      	cmp	r3, #4
   81f56:	d8fa      	bhi.n	81f4e <my_callback_config+0x16>
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   81f58:	79a3      	ldrb	r3, [r4, #6]
   81f5a:	3b05      	subs	r3, #5
   81f5c:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   81f5e:	b2db      	uxtb	r3, r3
   81f60:	9300      	str	r3, [sp, #0]
   81f62:	2300      	movs	r3, #0
   81f64:	461a      	mov	r2, r3
   81f66:	6821      	ldr	r1, [r4, #0]
   81f68:	4c02      	ldr	r4, [pc, #8]	; (81f74 <my_callback_config+0x3c>)
   81f6a:	47a0      	blx	r4
   81f6c:	e7ef      	b.n	81f4e <my_callback_config+0x16>
   81f6e:	bf00      	nop
   81f70:	00081b65 	.word	0x00081b65
   81f74:	00081a35 	.word	0x00081a35

00081f78 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   81f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f7c:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   81f7e:	f8df b04c 	ldr.w	fp, [pc, #76]	; 81fcc <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81f82:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81fd0 <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81f86:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81fd4 <cdc_send_to_pc+0x5c>
   81f8a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 81fd8 <cdc_send_to_pc+0x60>
   81f8e:	e002      	b.n	81f96 <cdc_send_to_pc+0x1e>
	for (uint8_t i = 0; i < 4; i++) {
   81f90:	3401      	adds	r4, #1
   81f92:	2c04      	cmp	r4, #4
   81f94:	d017      	beq.n	81fc6 <cdc_send_to_pc+0x4e>
   81f96:	b2e7      	uxtb	r7, r4
		usart_driver *driver = get_nth_available_driver(i);
   81f98:	4620      	mov	r0, r4
   81f9a:	47d8      	blx	fp
		if (!driver) continue;
   81f9c:	4606      	mov	r6, r0
   81f9e:	2800      	cmp	r0, #0
   81fa0:	d0f6      	beq.n	81f90 <cdc_send_to_pc+0x18>
		if (driver->cdc_enabled && driver->enabled) {
   81fa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81fa6:	f003 0306 	and.w	r3, r3, #6
   81faa:	2b06      	cmp	r3, #6
   81fac:	d1f0      	bne.n	81f90 <cdc_send_to_pc+0x18>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81fae:	f506 75e2 	add.w	r5, r6, #452	; 0x1c4
   81fb2:	4628      	mov	r0, r5
   81fb4:	47c0      	blx	r8
   81fb6:	2800      	cmp	r0, #0
   81fb8:	d0ea      	beq.n	81f90 <cdc_send_to_pc+0x18>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81fba:	4628      	mov	r0, r5
   81fbc:	47d0      	blx	sl
   81fbe:	4601      	mov	r1, r0
   81fc0:	4638      	mov	r0, r7
   81fc2:	47c8      	blx	r9
   81fc4:	e7f3      	b.n	81fae <cdc_send_to_pc+0x36>
			}
		}

	}
	
   81fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fca:	bf00      	nop
   81fcc:	00081b65 	.word	0x00081b65
   81fd0:	000807e3 	.word	0x000807e3
   81fd4:	000807c5 	.word	0x000807c5
   81fd8:	00080705 	.word	0x00080705

00081fdc <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81fdc:	b510      	push	{r4, lr}
   81fde:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   81fe0:	4b06      	ldr	r3, [pc, #24]	; (81ffc <FPGA_setlock+0x20>)
   81fe2:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81fe4:	4b06      	ldr	r3, [pc, #24]	; (82000 <FPGA_setlock+0x24>)
   81fe6:	781b      	ldrb	r3, [r3, #0]
   81fe8:	b933      	cbnz	r3, 81ff8 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   81fea:	4b05      	ldr	r3, [pc, #20]	; (82000 <FPGA_setlock+0x24>)
   81fec:	701c      	strb	r4, [r3, #0]
    ret = 1;
   81fee:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   81ff0:	4b04      	ldr	r3, [pc, #16]	; (82004 <FPGA_setlock+0x28>)
   81ff2:	4798      	blx	r3
  return ret;
}
   81ff4:	4620      	mov	r0, r4
   81ff6:	bd10      	pop	{r4, pc}
  int ret = 0;
   81ff8:	2400      	movs	r4, #0
   81ffa:	e7f9      	b.n	81ff0 <FPGA_setlock+0x14>
   81ffc:	000838a1 	.word	0x000838a1
   82000:	20001e48 	.word	0x20001e48
   82004:	000838dd 	.word	0x000838dd

00082008 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   82008:	4b01      	ldr	r3, [pc, #4]	; (82010 <FPGA_releaselock+0x8>)
   8200a:	2200      	movs	r2, #0
   8200c:	701a      	strb	r2, [r3, #0]
}
   8200e:	4770      	bx	lr
   82010:	20001e48 	.word	0x20001e48

00082014 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82014:	4b01      	ldr	r3, [pc, #4]	; (8201c <FPGA_lockstatus+0x8>)
   82016:	7818      	ldrb	r0, [r3, #0]
}
   82018:	4770      	bx	lr
   8201a:	bf00      	nop
   8201c:	20001e48 	.word	0x20001e48

00082020 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   82020:	b508      	push	{r3, lr}
   82022:	4601      	mov	r1, r0
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   82024:	4804      	ldr	r0, [pc, #16]	; (82038 <FPGA_setaddr+0x18>)
   82026:	4b05      	ldr	r3, [pc, #20]	; (8203c <FPGA_setaddr+0x1c>)
   82028:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   8202a:	2035      	movs	r0, #53	; 0x35
   8202c:	4b04      	ldr	r3, [pc, #16]	; (82040 <FPGA_setaddr+0x20>)
   8202e:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   82030:	2035      	movs	r0, #53	; 0x35
   82032:	4b04      	ldr	r3, [pc, #16]	; (82044 <FPGA_setaddr+0x24>)
   82034:	4798      	blx	r3
	#endif
}
   82036:	bd08      	pop	{r3, pc}
   82038:	400e0e00 	.word	0x400e0e00
   8203c:	00083b5d 	.word	0x00083b5d
   82040:	00083b9f 	.word	0x00083b9f
   82044:	00083b85 	.word	0x00083b85

00082048 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   82048:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   8204a:	4b7e      	ldr	r3, [pc, #504]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   8204c:	789c      	ldrb	r4, [r3, #2]
   8204e:	4b7e      	ldr	r3, [pc, #504]	; (82248 <V2Protocol_ProcessCommand+0x200>)
   82050:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   82052:	4b7e      	ldr	r3, [pc, #504]	; (8224c <V2Protocol_ProcessCommand+0x204>)
   82054:	4798      	blx	r3

	switch (V2Command)
   82056:	1e63      	subs	r3, r4, #1
   82058:	2b21      	cmp	r3, #33	; 0x21
   8205a:	f200 80e8 	bhi.w	8222e <V2Protocol_ProcessCommand+0x1e6>
   8205e:	e8df f013 	tbh	[pc, r3, lsl #1]
   82062:	0022      	.short	0x0022
   82064:	00370037 	.word	0x00370037
   82068:	00e600e6 	.word	0x00e600e6
   8206c:	00e6006c 	.word	0x00e6006c
   82070:	00e600e6 	.word	0x00e600e6
   82074:	00e6008b 	.word	0x00e6008b
   82078:	00e600e6 	.word	0x00e600e6
   8207c:	00e600e6 	.word	0x00e600e6
   82080:	00970093 	.word	0x00970093
   82084:	009b00a7 	.word	0x009b00a7
   82088:	009b00a1 	.word	0x009b00a1
   8208c:	00b000a1 	.word	0x00b000a1
   82090:	00b000ab 	.word	0x00b000ab
   82094:	00ab00ab 	.word	0x00ab00ab
   82098:	00b500ab 	.word	0x00b500ab
   8209c:	00e600e6 	.word	0x00e600e6
   820a0:	00d300b9 	.word	0x00d300b9
   820a4:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   820a6:	4b68      	ldr	r3, [pc, #416]	; (82248 <V2Protocol_ProcessCommand+0x200>)
   820a8:	2200      	movs	r2, #0
   820aa:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   820ac:	220d      	movs	r2, #13
   820ae:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   820b0:	4c67      	ldr	r4, [pc, #412]	; (82250 <V2Protocol_ProcessCommand+0x208>)
   820b2:	cc07      	ldmia	r4!, {r0, r1, r2}
   820b4:	f8c3 0003 	str.w	r0, [r3, #3]
   820b8:	f8c3 1007 	str.w	r1, [r3, #7]
   820bc:	f8c3 200b 	str.w	r2, [r3, #11]
   820c0:	7822      	ldrb	r2, [r4, #0]
   820c2:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   820c4:	4a5f      	ldr	r2, [pc, #380]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   820c6:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   820c8:	2310      	movs	r3, #16
   820ca:	8193      	strh	r3, [r2, #12]
	return true;
   820cc:	2001      	movs	r0, #1
}
   820ce:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   820d0:	4b5c      	ldr	r3, [pc, #368]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   820d2:	689b      	ldr	r3, [r3, #8]
   820d4:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   820d6:	2c02      	cmp	r4, #2
   820d8:	d00c      	beq.n	820f4 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   820da:	4b5e      	ldr	r3, [pc, #376]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   820dc:	2202      	movs	r2, #2
   820de:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   820e0:	4628      	mov	r0, r5
   820e2:	4b5d      	ldr	r3, [pc, #372]	; (82258 <V2Protocol_ProcessCommand+0x210>)
   820e4:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   820e6:	2c03      	cmp	r4, #3
   820e8:	d017      	beq.n	8211a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   820ea:	4b5c      	ldr	r3, [pc, #368]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   820ec:	22c0      	movs	r2, #192	; 0xc0
   820ee:	705a      	strb	r2, [r3, #1]
	return true;
   820f0:	2001      	movs	r0, #1
   820f2:	e7ec      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   820f4:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   820f6:	4b57      	ldr	r3, [pc, #348]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   820f8:	2202      	movs	r2, #2
   820fa:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   820fc:	4628      	mov	r0, r5
   820fe:	4b56      	ldr	r3, [pc, #344]	; (82258 <V2Protocol_ProcessCommand+0x210>)
   82100:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82102:	f010 0f02 	tst.w	r0, #2
   82106:	d0f0      	beq.n	820ea <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82108:	4b54      	ldr	r3, [pc, #336]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   8210a:	2200      	movs	r2, #0
   8210c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   8210e:	4621      	mov	r1, r4
   82110:	4628      	mov	r0, r5
   82112:	4b53      	ldr	r3, [pc, #332]	; (82260 <V2Protocol_ProcessCommand+0x218>)
   82114:	4798      	blx	r3
	return true;
   82116:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82118:	e7d9      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   8211a:	f010 0f01 	tst.w	r0, #1
   8211e:	d0e4      	beq.n	820ea <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82120:	4c4e      	ldr	r4, [pc, #312]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   82122:	2300      	movs	r3, #0
   82124:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82126:	4628      	mov	r0, r5
   82128:	4b4e      	ldr	r3, [pc, #312]	; (82264 <V2Protocol_ProcessCommand+0x21c>)
   8212a:	4798      	blx	r3
   8212c:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   8212e:	4a49      	ldr	r2, [pc, #292]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   82130:	8813      	ldrh	r3, [r2, #0]
   82132:	3301      	adds	r3, #1
   82134:	8013      	strh	r3, [r2, #0]
	return true;
   82136:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   82138:	e7c9      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   8213a:	4b42      	ldr	r3, [pc, #264]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   8213c:	689b      	ldr	r3, [r3, #8]
   8213e:	78da      	ldrb	r2, [r3, #3]
   82140:	7899      	ldrb	r1, [r3, #2]
   82142:	0409      	lsls	r1, r1, #16
   82144:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82148:	781a      	ldrb	r2, [r3, #0]
   8214a:	4311      	orrs	r1, r2
   8214c:	785b      	ldrb	r3, [r3, #1]
   8214e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82152:	4b45      	ldr	r3, [pc, #276]	; (82268 <V2Protocol_ProcessCommand+0x220>)
   82154:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82156:	2900      	cmp	r1, #0
   82158:	db0a      	blt.n	82170 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   8215a:	4844      	ldr	r0, [pc, #272]	; (8226c <V2Protocol_ProcessCommand+0x224>)
   8215c:	4b44      	ldr	r3, [pc, #272]	; (82270 <V2Protocol_ProcessCommand+0x228>)
   8215e:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82160:	4b3e      	ldr	r3, [pc, #248]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   82162:	2200      	movs	r2, #0
   82164:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82166:	4b3b      	ldr	r3, [pc, #236]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   82168:	2202      	movs	r2, #2
   8216a:	801a      	strh	r2, [r3, #0]
	return true;
   8216c:	2001      	movs	r0, #1
}
   8216e:	e7ae      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   82170:	4b40      	ldr	r3, [pc, #256]	; (82274 <V2Protocol_ProcessCommand+0x22c>)
   82172:	2201      	movs	r2, #1
   82174:	701a      	strb	r2, [r3, #0]
   82176:	e7f0      	b.n	8215a <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82178:	4b38      	ldr	r3, [pc, #224]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   8217a:	2200      	movs	r2, #0
   8217c:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8217e:	4b35      	ldr	r3, [pc, #212]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   82180:	2202      	movs	r2, #2
   82182:	801a      	strh	r2, [r3, #0]
	return true;
   82184:	2001      	movs	r0, #1
}
   82186:	e7a2      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82188:	4b3b      	ldr	r3, [pc, #236]	; (82278 <V2Protocol_ProcessCommand+0x230>)
   8218a:	4798      	blx	r3
	return true;
   8218c:	2001      	movs	r0, #1
			break;
   8218e:	e79e      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82190:	4b3a      	ldr	r3, [pc, #232]	; (8227c <V2Protocol_ProcessCommand+0x234>)
   82192:	4798      	blx	r3
	return true;
   82194:	2001      	movs	r0, #1
			break;
   82196:	e79a      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82198:	4939      	ldr	r1, [pc, #228]	; (82280 <V2Protocol_ProcessCommand+0x238>)
   8219a:	4620      	mov	r0, r4
   8219c:	4b39      	ldr	r3, [pc, #228]	; (82284 <V2Protocol_ProcessCommand+0x23c>)
   8219e:	4798      	blx	r3
	return true;
   821a0:	2001      	movs	r0, #1
			break;
   821a2:	e794      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   821a4:	4936      	ldr	r1, [pc, #216]	; (82280 <V2Protocol_ProcessCommand+0x238>)
   821a6:	4620      	mov	r0, r4
   821a8:	4b37      	ldr	r3, [pc, #220]	; (82288 <V2Protocol_ProcessCommand+0x240>)
   821aa:	4798      	blx	r3
	return true;
   821ac:	2001      	movs	r0, #1
			break;
   821ae:	e78e      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   821b0:	4b36      	ldr	r3, [pc, #216]	; (8228c <V2Protocol_ProcessCommand+0x244>)
   821b2:	4798      	blx	r3
	return true;
   821b4:	2001      	movs	r0, #1
			break;
   821b6:	e78a      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   821b8:	4620      	mov	r0, r4
   821ba:	4b35      	ldr	r3, [pc, #212]	; (82290 <V2Protocol_ProcessCommand+0x248>)
   821bc:	4798      	blx	r3
	return true;
   821be:	2001      	movs	r0, #1
			break;
   821c0:	e785      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   821c2:	4620      	mov	r0, r4
   821c4:	4b33      	ldr	r3, [pc, #204]	; (82294 <V2Protocol_ProcessCommand+0x24c>)
   821c6:	4798      	blx	r3
	return true;
   821c8:	2001      	movs	r0, #1
			break;
   821ca:	e780      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   821cc:	4b32      	ldr	r3, [pc, #200]	; (82298 <V2Protocol_ProcessCommand+0x250>)
   821ce:	4798      	blx	r3
	return true;
   821d0:	2001      	movs	r0, #1
			break;
   821d2:	e77c      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   821d4:	4a1b      	ldr	r2, [pc, #108]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   821d6:	4b21      	ldr	r3, [pc, #132]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   821d8:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   821da:	4b1e      	ldr	r3, [pc, #120]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   821dc:	8819      	ldrh	r1, [r3, #0]
   821de:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   821e0:	2200      	movs	r2, #0
   821e2:	801a      	strh	r2, [r3, #0]
			return true;
   821e4:	2001      	movs	r0, #1
   821e6:	e772      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   821e8:	4a16      	ldr	r2, [pc, #88]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   821ea:	8853      	ldrh	r3, [r2, #2]
   821ec:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   821ee:	88d2      	ldrh	r2, [r2, #6]
   821f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   821f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   821f8:	dc21      	bgt.n	8223e <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   821fa:	4912      	ldr	r1, [pc, #72]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   821fc:	4b20      	ldr	r3, [pc, #128]	; (82280 <V2Protocol_ProcessCommand+0x238>)
   821fe:	4403      	add	r3, r0
   82200:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82202:	818a      	strh	r2, [r1, #12]
			return true;
   82204:	2001      	movs	r0, #1
   82206:	e762      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82208:	4a0e      	ldr	r2, [pc, #56]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   8220a:	8853      	ldrh	r3, [r2, #2]
   8220c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   8220e:	88d2      	ldrh	r2, [r2, #6]
   82210:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82218:	dd01      	ble.n	8221e <V2Protocol_ProcessCommand+0x1d6>
				return false;
   8221a:	2000      	movs	r0, #0
   8221c:	e757      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8221e:	4b09      	ldr	r3, [pc, #36]	; (82244 <V2Protocol_ProcessCommand+0x1fc>)
   82220:	6899      	ldr	r1, [r3, #8]
   82222:	4b17      	ldr	r3, [pc, #92]	; (82280 <V2Protocol_ProcessCommand+0x238>)
   82224:	4418      	add	r0, r3
   82226:	4b1d      	ldr	r3, [pc, #116]	; (8229c <V2Protocol_ProcessCommand+0x254>)
   82228:	4798      	blx	r3
			return true;
   8222a:	2001      	movs	r0, #1
   8222c:	e74f      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   8222e:	4b0b      	ldr	r3, [pc, #44]	; (8225c <V2Protocol_ProcessCommand+0x214>)
   82230:	22c9      	movs	r2, #201	; 0xc9
   82232:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82234:	4b07      	ldr	r3, [pc, #28]	; (82254 <V2Protocol_ProcessCommand+0x20c>)
   82236:	2202      	movs	r2, #2
   82238:	801a      	strh	r2, [r3, #0]
	return true;
   8223a:	2001      	movs	r0, #1
}
   8223c:	e747      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
				return false;
   8223e:	2000      	movs	r0, #0
   82240:	e745      	b.n	820ce <V2Protocol_ProcessCommand+0x86>
   82242:	bf00      	nop
   82244:	2000269c 	.word	0x2000269c
   82248:	20001f4c 	.word	0x20001f4c
   8224c:	00082d55 	.word	0x00082d55
   82250:	0008caa0 	.word	0x0008caa0
   82254:	2000265a 	.word	0x2000265a
   82258:	000822bd 	.word	0x000822bd
   8225c:	2000265c 	.word	0x2000265c
   82260:	000822e5 	.word	0x000822e5
   82264:	000822d1 	.word	0x000822d1
   82268:	2000267c 	.word	0x2000267c
   8226c:	0008cab0 	.word	0x0008cab0
   82270:	00085eed 	.word	0x00085eed
   82274:	20002658 	.word	0x20002658
   82278:	00080dd9 	.word	0x00080dd9
   8227c:	00080f21 	.word	0x00080f21
   82280:	20001e4c 	.word	0x20001e4c
   82284:	000808b9 	.word	0x000808b9
   82288:	00080b39 	.word	0x00080b39
   8228c:	00080f81 	.word	0x00080f81
   82290:	00080c85 	.word	0x00080c85
   82294:	00080d31 	.word	0x00080d31
   82298:	00080da1 	.word	0x00080da1
   8229c:	00085f15 	.word	0x00085f15

000822a0 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   822a0:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   822a2:	4805      	ldr	r0, [pc, #20]	; (822b8 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   822a4:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   822a8:	7803      	ldrb	r3, [r0, #0]
   822aa:	4293      	cmp	r3, r2
   822ac:	d003      	beq.n	822b6 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   822ae:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   822b0:	4288      	cmp	r0, r1
   822b2:	d1f9      	bne.n	822a8 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   822b4:	2000      	movs	r0, #0
}
   822b6:	4770      	bx	lr
   822b8:	20000824 	.word	0x20000824

000822bc <V2Params_GetParameterPrivileges>:
{
   822bc:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822be:	4b03      	ldr	r3, [pc, #12]	; (822cc <V2Params_GetParameterPrivileges+0x10>)
   822c0:	4798      	blx	r3
	if (ParamInfo == NULL)
   822c2:	b108      	cbz	r0, 822c8 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   822c4:	7840      	ldrb	r0, [r0, #1]
}
   822c6:	bd08      	pop	{r3, pc}
	  return 0;
   822c8:	2000      	movs	r0, #0
   822ca:	e7fc      	b.n	822c6 <V2Params_GetParameterPrivileges+0xa>
   822cc:	000822a1 	.word	0x000822a1

000822d0 <V2Params_GetParameterValue>:
{
   822d0:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822d2:	4b03      	ldr	r3, [pc, #12]	; (822e0 <V2Params_GetParameterValue+0x10>)
   822d4:	4798      	blx	r3
	if (ParamInfo == NULL)
   822d6:	b108      	cbz	r0, 822dc <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   822d8:	7880      	ldrb	r0, [r0, #2]
}
   822da:	bd08      	pop	{r3, pc}
	  return 0;
   822dc:	2000      	movs	r0, #0
   822de:	e7fc      	b.n	822da <V2Params_GetParameterValue+0xa>
   822e0:	000822a1 	.word	0x000822a1

000822e4 <V2Params_SetParameterValue>:
{
   822e4:	b510      	push	{r4, lr}
   822e6:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822e8:	4b02      	ldr	r3, [pc, #8]	; (822f4 <V2Params_SetParameterValue+0x10>)
   822ea:	4798      	blx	r3
	if (ParamInfo == NULL)
   822ec:	b100      	cbz	r0, 822f0 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   822ee:	7084      	strb	r4, [r0, #2]
}
   822f0:	bd10      	pop	{r4, pc}
   822f2:	bf00      	nop
   822f4:	000822a1 	.word	0x000822a1

000822f8 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   822f8:	b538      	push	{r3, r4, r5, lr}
   822fa:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   822fc:	b2c0      	uxtb	r0, r0
   822fe:	4d05      	ldr	r5, [pc, #20]	; (82314 <XMEGANVM_SendAddress+0x1c>)
   82300:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   82302:	f3c4 2007 	ubfx	r0, r4, #8, #8
   82306:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   82308:	f3c4 4007 	ubfx	r0, r4, #16, #8
   8230c:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   8230e:	0e20      	lsrs	r0, r4, #24
   82310:	47a8      	blx	r5
}
   82312:	bd38      	pop	{r3, r4, r5, pc}
   82314:	00082b85 	.word	0x00082b85

00082318 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   82318:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   8231a:	4b03      	ldr	r3, [pc, #12]	; (82328 <XMEGANVM_SendNVMRegAddress+0x10>)
   8231c:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   8231e:	4318      	orrs	r0, r3
   82320:	4b02      	ldr	r3, [pc, #8]	; (8232c <XMEGANVM_SendNVMRegAddress+0x14>)
   82322:	4798      	blx	r3
}
   82324:	bd08      	pop	{r3, pc}
   82326:	bf00      	nop
   82328:	20000844 	.word	0x20000844
   8232c:	000822f9 	.word	0x000822f9

00082330 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   82330:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   82332:	4e07      	ldr	r6, [pc, #28]	; (82350 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82334:	4d07      	ldr	r5, [pc, #28]	; (82354 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   82336:	4c08      	ldr	r4, [pc, #32]	; (82358 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   82338:	2080      	movs	r0, #128	; 0x80
   8233a:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8233c:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8233e:	6823      	ldr	r3, [r4, #0]
   82340:	b123      	cbz	r3, 8234c <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   82342:	f010 0f02 	tst.w	r0, #2
   82346:	d0f7      	beq.n	82338 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   82348:	2001      	movs	r0, #1
   8234a:	e000      	b.n	8234e <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   8234c:	2000      	movs	r0, #0
		}
	}
}
   8234e:	bd70      	pop	{r4, r5, r6, pc}
   82350:	00082b85 	.word	0x00082b85
   82354:	00082bb1 	.word	0x00082bb1
   82358:	20002684 	.word	0x20002684

0008235c <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   8235c:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8235e:	206b      	movs	r0, #107	; 0x6b
   82360:	4b09      	ldr	r3, [pc, #36]	; (82388 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   82362:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   82364:	200f      	movs	r0, #15
   82366:	4b09      	ldr	r3, [pc, #36]	; (8238c <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   82368:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8236a:	4e07      	ldr	r6, [pc, #28]	; (82388 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8236c:	4d08      	ldr	r5, [pc, #32]	; (82390 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8236e:	4c09      	ldr	r4, [pc, #36]	; (82394 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   82370:	2020      	movs	r0, #32
   82372:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82374:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   82376:	6823      	ldr	r3, [r4, #0]
   82378:	b123      	cbz	r3, 82384 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   8237a:	f010 0f80 	tst.w	r0, #128	; 0x80
   8237e:	d1f7      	bne.n	82370 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   82380:	2001      	movs	r0, #1
   82382:	e000      	b.n	82386 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   82384:	2000      	movs	r0, #0
		}
	}
}
   82386:	bd70      	pop	{r4, r5, r6, pc}
   82388:	00082b85 	.word	0x00082b85
   8238c:	00082319 	.word	0x00082319
   82390:	00082bb1 	.word	0x00082bb1
   82394:	20002684 	.word	0x20002684

00082398 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   82398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8239c:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8239e:	4b1a      	ldr	r3, [pc, #104]	; (82408 <XMEGANVM_EnablePDI+0x70>)
   823a0:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   823a2:	20c1      	movs	r0, #193	; 0xc1
   823a4:	4c19      	ldr	r4, [pc, #100]	; (8240c <XMEGANVM_EnablePDI+0x74>)
   823a6:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   823a8:	2059      	movs	r0, #89	; 0x59
   823aa:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   823ac:	20c2      	movs	r0, #194	; 0xc2
   823ae:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   823b0:	2002      	movs	r0, #2
   823b2:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   823b4:	20e0      	movs	r0, #224	; 0xe0
   823b6:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   823b8:	f10d 0407 	add.w	r4, sp, #7
   823bc:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   823be:	f04f 0812 	mov.w	r8, #18
   823c2:	2789      	movs	r7, #137	; 0x89
   823c4:	4e11      	ldr	r6, [pc, #68]	; (8240c <XMEGANVM_EnablePDI+0x74>)
   823c6:	f88d 8000 	strb.w	r8, [sp]
   823ca:	f88d 7001 	strb.w	r7, [sp, #1]
   823ce:	23ab      	movs	r3, #171	; 0xab
   823d0:	f88d 3002 	strb.w	r3, [sp, #2]
   823d4:	2345      	movs	r3, #69	; 0x45
   823d6:	f88d 3003 	strb.w	r3, [sp, #3]
   823da:	23cd      	movs	r3, #205	; 0xcd
   823dc:	f88d 3004 	strb.w	r3, [sp, #4]
   823e0:	23d8      	movs	r3, #216	; 0xd8
   823e2:	f88d 3005 	strb.w	r3, [sp, #5]
   823e6:	2388      	movs	r3, #136	; 0x88
   823e8:	f88d 3006 	strb.w	r3, [sp, #6]
   823ec:	23ff      	movs	r3, #255	; 0xff
   823ee:	f88d 3007 	strb.w	r3, [sp, #7]
   823f2:	7820      	ldrb	r0, [r4, #0]
   823f4:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   823f6:	454c      	cmp	r4, r9
   823f8:	f104 34ff 	add.w	r4, r4, #4294967295
   823fc:	d1e3      	bne.n	823c6 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   823fe:	4b04      	ldr	r3, [pc, #16]	; (82410 <XMEGANVM_EnablePDI+0x78>)
   82400:	4798      	blx	r3
}
   82402:	b003      	add	sp, #12
   82404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82408:	00082c51 	.word	0x00082c51
   8240c:	00082b85 	.word	0x00082b85
   82410:	00082331 	.word	0x00082331

00082414 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   82414:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   82416:	4b09      	ldr	r3, [pc, #36]	; (8243c <XMEGANVM_DisablePDI+0x28>)
   82418:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8241a:	4c09      	ldr	r4, [pc, #36]	; (82440 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   8241c:	4d09      	ldr	r5, [pc, #36]	; (82444 <XMEGANVM_DisablePDI+0x30>)
   8241e:	4e0a      	ldr	r6, [pc, #40]	; (82448 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   82420:	20c1      	movs	r0, #193	; 0xc1
   82422:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   82424:	2000      	movs	r0, #0
   82426:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   82428:	2081      	movs	r0, #129	; 0x81
   8242a:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   8242c:	47a8      	blx	r5
   8242e:	b110      	cbz	r0, 82436 <XMEGANVM_DisablePDI+0x22>
   82430:	6833      	ldr	r3, [r6, #0]
   82432:	2b00      	cmp	r3, #0
   82434:	d1f4      	bne.n	82420 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   82436:	4b05      	ldr	r3, [pc, #20]	; (8244c <XMEGANVM_DisablePDI+0x38>)
   82438:	4798      	blx	r3
}
   8243a:	bd70      	pop	{r4, r5, r6, pc}
   8243c:	00082331 	.word	0x00082331
   82440:	00082b85 	.word	0x00082b85
   82444:	00082bb1 	.word	0x00082bb1
   82448:	20002684 	.word	0x20002684
   8244c:	00082b29 	.word	0x00082b29

00082450 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   82450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82452:	4606      	mov	r6, r0
   82454:	460c      	mov	r4, r1
   82456:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82458:	4b1c      	ldr	r3, [pc, #112]	; (824cc <XMEGANVM_ReadMemory+0x7c>)
   8245a:	4798      	blx	r3
   8245c:	4603      	mov	r3, r0
   8245e:	b908      	cbnz	r0, 82464 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   82460:	4618      	mov	r0, r3
   82462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82464:	204c      	movs	r0, #76	; 0x4c
   82466:	4f1a      	ldr	r7, [pc, #104]	; (824d0 <XMEGANVM_ReadMemory+0x80>)
   82468:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8246a:	200a      	movs	r0, #10
   8246c:	4b19      	ldr	r3, [pc, #100]	; (824d4 <XMEGANVM_ReadMemory+0x84>)
   8246e:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   82470:	2043      	movs	r0, #67	; 0x43
   82472:	47b8      	blx	r7
	if (ReadSize > 1)
   82474:	2d01      	cmp	r5, #1
   82476:	d919      	bls.n	824ac <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82478:	206b      	movs	r0, #107	; 0x6b
   8247a:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   8247c:	4630      	mov	r0, r6
   8247e:	4b16      	ldr	r3, [pc, #88]	; (824d8 <XMEGANVM_ReadMemory+0x88>)
   82480:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82482:	20a0      	movs	r0, #160	; 0xa0
   82484:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   82486:	1e68      	subs	r0, r5, #1
   82488:	b2c0      	uxtb	r0, r0
   8248a:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8248c:	2024      	movs	r0, #36	; 0x24
   8248e:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   82490:	3d01      	subs	r5, #1
   82492:	b2ad      	uxth	r5, r5
   82494:	3501      	adds	r5, #1
   82496:	4425      	add	r5, r4
   82498:	4e10      	ldr	r6, [pc, #64]	; (824dc <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8249a:	4f11      	ldr	r7, [pc, #68]	; (824e0 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   8249c:	6833      	ldr	r3, [r6, #0]
   8249e:	b173      	cbz	r3, 824be <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   824a0:	47b8      	blx	r7
   824a2:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   824a6:	42ac      	cmp	r4, r5
   824a8:	d1f8      	bne.n	8249c <XMEGANVM_ReadMemory+0x4c>
   824aa:	e008      	b.n	824be <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824ac:	200c      	movs	r0, #12
   824ae:	4b08      	ldr	r3, [pc, #32]	; (824d0 <XMEGANVM_ReadMemory+0x80>)
   824b0:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   824b2:	4630      	mov	r0, r6
   824b4:	4b08      	ldr	r3, [pc, #32]	; (824d8 <XMEGANVM_ReadMemory+0x88>)
   824b6:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   824b8:	4b09      	ldr	r3, [pc, #36]	; (824e0 <XMEGANVM_ReadMemory+0x90>)
   824ba:	4798      	blx	r3
   824bc:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   824be:	4b07      	ldr	r3, [pc, #28]	; (824dc <XMEGANVM_ReadMemory+0x8c>)
   824c0:	681b      	ldr	r3, [r3, #0]
   824c2:	3b00      	subs	r3, #0
   824c4:	bf18      	it	ne
   824c6:	2301      	movne	r3, #1
   824c8:	e7ca      	b.n	82460 <XMEGANVM_ReadMemory+0x10>
   824ca:	bf00      	nop
   824cc:	0008235d 	.word	0x0008235d
   824d0:	00082b85 	.word	0x00082b85
   824d4:	00082319 	.word	0x00082319
   824d8:	000822f9 	.word	0x000822f9
   824dc:	20002684 	.word	0x20002684
   824e0:	00082bb1 	.word	0x00082bb1

000824e4 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   824e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824e8:	4607      	mov	r7, r0
   824ea:	4688      	mov	r8, r1
   824ec:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   824ee:	4b0b      	ldr	r3, [pc, #44]	; (8251c <XMEGANVM_WriteByteMemory+0x38>)
   824f0:	4798      	blx	r3
   824f2:	4605      	mov	r5, r0
   824f4:	b910      	cbnz	r0, 824fc <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   824f6:	4628      	mov	r0, r5
   824f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824fc:	204c      	movs	r0, #76	; 0x4c
   824fe:	4c08      	ldr	r4, [pc, #32]	; (82520 <XMEGANVM_WriteByteMemory+0x3c>)
   82500:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82502:	200a      	movs	r0, #10
   82504:	4b07      	ldr	r3, [pc, #28]	; (82524 <XMEGANVM_WriteByteMemory+0x40>)
   82506:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   82508:	4638      	mov	r0, r7
   8250a:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8250c:	204c      	movs	r0, #76	; 0x4c
   8250e:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   82510:	4640      	mov	r0, r8
   82512:	4b05      	ldr	r3, [pc, #20]	; (82528 <XMEGANVM_WriteByteMemory+0x44>)
   82514:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   82516:	4630      	mov	r0, r6
   82518:	47a0      	blx	r4
	return true;
   8251a:	e7ec      	b.n	824f6 <XMEGANVM_WriteByteMemory+0x12>
   8251c:	0008235d 	.word	0x0008235d
   82520:	00082b85 	.word	0x00082b85
   82524:	00082319 	.word	0x00082319
   82528:	000822f9 	.word	0x000822f9

0008252c <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   8252c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82530:	4681      	mov	r9, r0
   82532:	4617      	mov	r7, r2
   82534:	461c      	mov	r4, r3
   82536:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82538:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   8253c:	f013 0f01 	tst.w	r3, #1
   82540:	d108      	bne.n	82554 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   82542:	b9f6      	cbnz	r6, 82582 <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   82544:	f014 0f02 	tst.w	r4, #2
   82548:	d13f      	bne.n	825ca <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   8254a:	f04f 0a01 	mov.w	sl, #1
}
   8254e:	4650      	mov	r0, sl
   82550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82554:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82556:	4b27      	ldr	r3, [pc, #156]	; (825f4 <XMEGANVM_WritePageMemory+0xc8>)
   82558:	4798      	blx	r3
   8255a:	4682      	mov	sl, r0
   8255c:	2800      	cmp	r0, #0
   8255e:	d0f6      	beq.n	8254e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82560:	204c      	movs	r0, #76	; 0x4c
   82562:	f8df a09c 	ldr.w	sl, [pc, #156]	; 82600 <XMEGANVM_WritePageMemory+0xd4>
   82566:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82568:	200a      	movs	r0, #10
   8256a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 825f8 <XMEGANVM_WritePageMemory+0xcc>
   8256e:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   82570:	4640      	mov	r0, r8
   82572:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82574:	204c      	movs	r0, #76	; 0x4c
   82576:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82578:	200b      	movs	r0, #11
   8257a:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8257c:	2001      	movs	r0, #1
   8257e:	47d0      	blx	sl
   82580:	e7df      	b.n	82542 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82582:	4b1c      	ldr	r3, [pc, #112]	; (825f4 <XMEGANVM_WritePageMemory+0xc8>)
   82584:	4798      	blx	r3
   82586:	4682      	mov	sl, r0
   82588:	2800      	cmp	r0, #0
   8258a:	d0e0      	beq.n	8254e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8258c:	204c      	movs	r0, #76	; 0x4c
   8258e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 82600 <XMEGANVM_WritePageMemory+0xd4>
   82592:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82594:	200a      	movs	r0, #10
   82596:	4b18      	ldr	r3, [pc, #96]	; (825f8 <XMEGANVM_WritePageMemory+0xcc>)
   82598:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   8259a:	4648      	mov	r0, r9
   8259c:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8259e:	206b      	movs	r0, #107	; 0x6b
   825a0:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   825a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   825a4:	4b15      	ldr	r3, [pc, #84]	; (825fc <XMEGANVM_WritePageMemory+0xd0>)
   825a6:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   825a8:	20a0      	movs	r0, #160	; 0xa0
   825aa:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   825ac:	1e70      	subs	r0, r6, #1
   825ae:	b2c0      	uxtb	r0, r0
   825b0:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   825b2:	2064      	movs	r0, #100	; 0x64
   825b4:	47c0      	blx	r8
		while (WriteSize--)
   825b6:	3e01      	subs	r6, #1
   825b8:	b2b6      	uxth	r6, r6
   825ba:	3601      	adds	r6, #1
   825bc:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   825be:	f815 0b01 	ldrb.w	r0, [r5], #1
   825c2:	47c0      	blx	r8
		while (WriteSize--)
   825c4:	42b5      	cmp	r5, r6
   825c6:	d1fa      	bne.n	825be <XMEGANVM_WritePageMemory+0x92>
   825c8:	e7bc      	b.n	82544 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825ca:	4b0a      	ldr	r3, [pc, #40]	; (825f4 <XMEGANVM_WritePageMemory+0xc8>)
   825cc:	4798      	blx	r3
   825ce:	4682      	mov	sl, r0
   825d0:	2800      	cmp	r0, #0
   825d2:	d0bc      	beq.n	8254e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825d4:	204c      	movs	r0, #76	; 0x4c
   825d6:	4c0a      	ldr	r4, [pc, #40]	; (82600 <XMEGANVM_WritePageMemory+0xd4>)
   825d8:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825da:	200a      	movs	r0, #10
   825dc:	4b06      	ldr	r3, [pc, #24]	; (825f8 <XMEGANVM_WritePageMemory+0xcc>)
   825de:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   825e0:	4638      	mov	r0, r7
   825e2:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825e4:	204c      	movs	r0, #76	; 0x4c
   825e6:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   825e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   825ea:	4b04      	ldr	r3, [pc, #16]	; (825fc <XMEGANVM_WritePageMemory+0xd0>)
   825ec:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   825ee:	2000      	movs	r0, #0
   825f0:	47a0      	blx	r4
   825f2:	e7ac      	b.n	8254e <XMEGANVM_WritePageMemory+0x22>
   825f4:	0008235d 	.word	0x0008235d
   825f8:	00082319 	.word	0x00082319
   825fc:	000822f9 	.word	0x000822f9
   82600:	00082b85 	.word	0x00082b85

00082604 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   82604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82606:	4604      	mov	r4, r0
   82608:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8260a:	4b36      	ldr	r3, [pc, #216]	; (826e4 <XMEGANVM_EraseMemory+0xe0>)
   8260c:	4798      	blx	r3
   8260e:	4603      	mov	r3, r0
   82610:	b1a8      	cbz	r0, 8263e <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   82612:	2c40      	cmp	r4, #64	; 0x40
   82614:	d015      	beq.n	82642 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   82616:	2c30      	cmp	r4, #48	; 0x30
   82618:	d022      	beq.n	82660 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8261a:	204c      	movs	r0, #76	; 0x4c
   8261c:	4e32      	ldr	r6, [pc, #200]	; (826e8 <XMEGANVM_EraseMemory+0xe4>)
   8261e:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82620:	200a      	movs	r0, #10
   82622:	4b32      	ldr	r3, [pc, #200]	; (826ec <XMEGANVM_EraseMemory+0xe8>)
   82624:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   82626:	4620      	mov	r0, r4
   82628:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8262a:	204c      	movs	r0, #76	; 0x4c
   8262c:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   8262e:	4628      	mov	r0, r5
   82630:	4b2f      	ldr	r3, [pc, #188]	; (826f0 <XMEGANVM_EraseMemory+0xec>)
   82632:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   82634:	2000      	movs	r0, #0
   82636:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   82638:	4b2e      	ldr	r3, [pc, #184]	; (826f4 <XMEGANVM_EraseMemory+0xf0>)
   8263a:	4798      	blx	r3
   8263c:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   8263e:	4618      	mov	r0, r3
   82640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82642:	204c      	movs	r0, #76	; 0x4c
   82644:	4c28      	ldr	r4, [pc, #160]	; (826e8 <XMEGANVM_EraseMemory+0xe4>)
   82646:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82648:	200a      	movs	r0, #10
   8264a:	4d28      	ldr	r5, [pc, #160]	; (826ec <XMEGANVM_EraseMemory+0xe8>)
   8264c:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   8264e:	2040      	movs	r0, #64	; 0x40
   82650:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82652:	204c      	movs	r0, #76	; 0x4c
   82654:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82656:	200b      	movs	r0, #11
   82658:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8265a:	2001      	movs	r0, #1
   8265c:	47a0      	blx	r4
   8265e:	e7eb      	b.n	82638 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82660:	204c      	movs	r0, #76	; 0x4c
   82662:	4c21      	ldr	r4, [pc, #132]	; (826e8 <XMEGANVM_EraseMemory+0xe4>)
   82664:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82666:	200a      	movs	r0, #10
   82668:	4e20      	ldr	r6, [pc, #128]	; (826ec <XMEGANVM_EraseMemory+0xe8>)
   8266a:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   8266c:	2036      	movs	r0, #54	; 0x36
   8266e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82670:	204c      	movs	r0, #76	; 0x4c
   82672:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82674:	200b      	movs	r0, #11
   82676:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   82678:	2001      	movs	r0, #1
   8267a:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8267c:	4b19      	ldr	r3, [pc, #100]	; (826e4 <XMEGANVM_EraseMemory+0xe0>)
   8267e:	4798      	blx	r3
   82680:	4603      	mov	r3, r0
   82682:	2800      	cmp	r0, #0
   82684:	d0db      	beq.n	8263e <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82686:	204c      	movs	r0, #76	; 0x4c
   82688:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8268a:	200a      	movs	r0, #10
   8268c:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   8268e:	2033      	movs	r0, #51	; 0x33
   82690:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82692:	206b      	movs	r0, #107	; 0x6b
   82694:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   82696:	4628      	mov	r0, r5
   82698:	4b15      	ldr	r3, [pc, #84]	; (826f0 <XMEGANVM_EraseMemory+0xec>)
   8269a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8269c:	20a0      	movs	r0, #160	; 0xa0
   8269e:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   826a0:	4d15      	ldr	r5, [pc, #84]	; (826f8 <XMEGANVM_EraseMemory+0xf4>)
   826a2:	7828      	ldrb	r0, [r5, #0]
   826a4:	3801      	subs	r0, #1
   826a6:	b2c0      	uxtb	r0, r0
   826a8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   826aa:	2064      	movs	r0, #100	; 0x64
   826ac:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   826ae:	882b      	ldrh	r3, [r5, #0]
   826b0:	b14b      	cbz	r3, 826c6 <XMEGANVM_EraseMemory+0xc2>
   826b2:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   826b4:	4627      	mov	r7, r4
   826b6:	4e0c      	ldr	r6, [pc, #48]	; (826e8 <XMEGANVM_EraseMemory+0xe4>)
   826b8:	4638      	mov	r0, r7
   826ba:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   826bc:	1c63      	adds	r3, r4, #1
   826be:	b2dc      	uxtb	r4, r3
   826c0:	882a      	ldrh	r2, [r5, #0]
   826c2:	42a2      	cmp	r2, r4
   826c4:	d8f8      	bhi.n	826b8 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826c6:	204c      	movs	r0, #76	; 0x4c
   826c8:	4c07      	ldr	r4, [pc, #28]	; (826e8 <XMEGANVM_EraseMemory+0xe4>)
   826ca:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   826cc:	200a      	movs	r0, #10
   826ce:	4d07      	ldr	r5, [pc, #28]	; (826ec <XMEGANVM_EraseMemory+0xe8>)
   826d0:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   826d2:	2030      	movs	r0, #48	; 0x30
   826d4:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826d6:	204c      	movs	r0, #76	; 0x4c
   826d8:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   826da:	200b      	movs	r0, #11
   826dc:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   826de:	2001      	movs	r0, #1
   826e0:	47a0      	blx	r4
   826e2:	e7a9      	b.n	82638 <XMEGANVM_EraseMemory+0x34>
   826e4:	0008235d 	.word	0x0008235d
   826e8:	00082b85 	.word	0x00082b85
   826ec:	00082319 	.word	0x00082319
   826f0:	000822f9 	.word	0x000822f9
   826f4:	00082331 	.word	0x00082331
   826f8:	20000842 	.word	0x20000842

000826fc <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   826fc:	b570      	push	{r4, r5, r6, lr}
   826fe:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   82700:	4b8f      	ldr	r3, [pc, #572]	; (82940 <XPROGProtocol_Command+0x244>)
   82702:	8859      	ldrh	r1, [r3, #2]
   82704:	b2cb      	uxtb	r3, r1
   82706:	4a8f      	ldr	r2, [pc, #572]	; (82944 <XPROGProtocol_Command+0x248>)
   82708:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   8270a:	3b01      	subs	r3, #1
   8270c:	2b21      	cmp	r3, #33	; 0x21
   8270e:	d82b      	bhi.n	82768 <XPROGProtocol_Command+0x6c>
   82710:	e8df f013 	tbh	[pc, r3, lsl #1]
   82714:	002f0022 	.word	0x002f0022
   82718:	00730037 	.word	0x00730037
   8271c:	00e600c2 	.word	0x00e600c2
   82720:	002a00e9 	.word	0x002a00e9
   82724:	002a002a 	.word	0x002a002a
   82728:	002a002a 	.word	0x002a002a
   8272c:	002a002a 	.word	0x002a002a
   82730:	002a002a 	.word	0x002a002a
   82734:	002a002a 	.word	0x002a002a
   82738:	002a002a 	.word	0x002a002a
   8273c:	002a002a 	.word	0x002a002a
   82740:	002a002a 	.word	0x002a002a
   82744:	002a002a 	.word	0x002a002a
   82748:	002a002a 	.word	0x002a002a
   8274c:	002a002a 	.word	0x002a002a
   82750:	017c002a 	.word	0x017c002a
   82754:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   82758:	4b7b      	ldr	r3, [pc, #492]	; (82948 <XPROGProtocol_Command+0x24c>)
   8275a:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   8275c:	4b7b      	ldr	r3, [pc, #492]	; (8294c <XPROGProtocol_Command+0x250>)
   8275e:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   82760:	f080 0001 	eor.w	r0, r0, #1
   82764:	4b7a      	ldr	r3, [pc, #488]	; (82950 <XPROGProtocol_Command+0x254>)
   82766:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   82768:	4b7a      	ldr	r3, [pc, #488]	; (82954 <XPROGProtocol_Command+0x258>)
   8276a:	4798      	blx	r3
	return false;
   8276c:	2000      	movs	r0, #0
}
   8276e:	b004      	add	sp, #16
   82770:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   82772:	4b75      	ldr	r3, [pc, #468]	; (82948 <XPROGProtocol_Command+0x24c>)
   82774:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   82776:	4b78      	ldr	r3, [pc, #480]	; (82958 <XPROGProtocol_Command+0x25c>)
   82778:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   8277a:	4b75      	ldr	r3, [pc, #468]	; (82950 <XPROGProtocol_Command+0x254>)
   8277c:	2200      	movs	r2, #0
   8277e:	701a      	strb	r2, [r3, #0]
}
   82780:	e7f2      	b.n	82768 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82782:	4b71      	ldr	r3, [pc, #452]	; (82948 <XPROGProtocol_Command+0x24c>)
   82784:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   82786:	4b72      	ldr	r3, [pc, #456]	; (82950 <XPROGProtocol_Command+0x254>)
   82788:	2200      	movs	r2, #0
   8278a:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   8278c:	4b6c      	ldr	r3, [pc, #432]	; (82940 <XPROGProtocol_Command+0x244>)
   8278e:	899b      	ldrh	r3, [r3, #12]
   82790:	2b04      	cmp	r3, #4
   82792:	d915      	bls.n	827c0 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   82794:	4b6a      	ldr	r3, [pc, #424]	; (82940 <XPROGProtocol_Command+0x244>)
   82796:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82798:	791a      	ldrb	r2, [r3, #4]
   8279a:	78d9      	ldrb	r1, [r3, #3]
   8279c:	0409      	lsls	r1, r1, #16
   8279e:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   827a2:	785a      	ldrb	r2, [r3, #1]
   827a4:	4311      	orrs	r1, r2
   827a6:	789a      	ldrb	r2, [r3, #2]
   827a8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   827ac:	781b      	ldrb	r3, [r3, #0]
   827ae:	3b01      	subs	r3, #1
   827b0:	2b07      	cmp	r3, #7
   827b2:	d81e      	bhi.n	827f2 <XPROGProtocol_Command+0xf6>
   827b4:	e8df f003 	tbb	[pc, r3]
   827b8:	1311081f 	.word	0x1311081f
   827bc:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   827c0:	4b63      	ldr	r3, [pc, #396]	; (82950 <XPROGProtocol_Command+0x254>)
   827c2:	2201      	movs	r2, #1
   827c4:	701a      	strb	r2, [r3, #0]
		return;
   827c6:	e7cf      	b.n	82768 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   827c8:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   827ca:	4b64      	ldr	r3, [pc, #400]	; (8295c <XPROGProtocol_Command+0x260>)
   827cc:	4798      	blx	r3
   827ce:	2800      	cmp	r0, #0
   827d0:	d1ca      	bne.n	82768 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   827d2:	4b5f      	ldr	r3, [pc, #380]	; (82950 <XPROGProtocol_Command+0x254>)
   827d4:	2203      	movs	r2, #3
   827d6:	701a      	strb	r2, [r3, #0]
   827d8:	e7c6      	b.n	82768 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   827da:	2068      	movs	r0, #104	; 0x68
		break;
   827dc:	e7f5      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   827de:	2030      	movs	r0, #48	; 0x30
		break;
   827e0:	e7f3      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   827e2:	2022      	movs	r0, #34	; 0x22
		break;
   827e4:	e7f1      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   827e6:	202a      	movs	r0, #42	; 0x2a
		break;
   827e8:	e7ef      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   827ea:	2032      	movs	r0, #50	; 0x32
		break;
   827ec:	e7ed      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   827ee:	2018      	movs	r0, #24
		break;
   827f0:	e7eb      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   827f2:	2000      	movs	r0, #0
		break;
   827f4:	e7e9      	b.n	827ca <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   827f6:	2040      	movs	r0, #64	; 0x40
   827f8:	e7e7      	b.n	827ca <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   827fa:	4b53      	ldr	r3, [pc, #332]	; (82948 <XPROGProtocol_Command+0x24c>)
   827fc:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   827fe:	4b54      	ldr	r3, [pc, #336]	; (82950 <XPROGProtocol_Command+0x254>)
   82800:	2200      	movs	r2, #0
   82802:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   82804:	4b4e      	ldr	r3, [pc, #312]	; (82940 <XPROGProtocol_Command+0x244>)
   82806:	88db      	ldrh	r3, [r3, #6]
   82808:	2b07      	cmp	r3, #7
   8280a:	d802      	bhi.n	82812 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   8280c:	4b50      	ldr	r3, [pc, #320]	; (82950 <XPROGProtocol_Command+0x254>)
   8280e:	2201      	movs	r2, #1
   82810:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   82812:	4b4b      	ldr	r3, [pc, #300]	; (82940 <XPROGProtocol_Command+0x244>)
   82814:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82816:	795a      	ldrb	r2, [r3, #5]
   82818:	7919      	ldrb	r1, [r3, #4]
   8281a:	0409      	lsls	r1, r1, #16
   8281c:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82820:	789a      	ldrb	r2, [r3, #2]
   82822:	4311      	orrs	r1, r2
   82824:	78da      	ldrb	r2, [r3, #3]
   82826:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   8282a:	781a      	ldrb	r2, [r3, #0]
   8282c:	3a01      	subs	r2, #1
   8282e:	2a05      	cmp	r2, #5
   82830:	d82e      	bhi.n	82890 <XPROGProtocol_Command+0x194>
   82832:	e8df f012 	tbh	[pc, r2, lsl #1]
   82836:	00fd      	.short	0x00fd
   82838:	0101000e 	.word	0x0101000e
   8283c:	00060105 	.word	0x00060105
   82840:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82842:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   82844:	4b46      	ldr	r3, [pc, #280]	; (82960 <XPROGProtocol_Command+0x264>)
   82846:	781a      	ldrb	r2, [r3, #0]
   82848:	4b46      	ldr	r3, [pc, #280]	; (82964 <XPROGProtocol_Command+0x268>)
   8284a:	4798      	blx	r3
   8284c:	2800      	cmp	r0, #0
   8284e:	d18b      	bne.n	82768 <XPROGProtocol_Command+0x6c>
   82850:	e016      	b.n	82880 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82852:	2526      	movs	r5, #38	; 0x26
   82854:	2023      	movs	r0, #35	; 0x23
   82856:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   82858:	79de      	ldrb	r6, [r3, #7]
   8285a:	799c      	ldrb	r4, [r3, #6]
   8285c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82860:	785b      	ldrb	r3, [r3, #1]
   82862:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   82866:	bf28      	it	cs
   82868:	f44f 7480 	movcs.w	r4, #256	; 0x100
   8286c:	9402      	str	r4, [sp, #8]
   8286e:	4c3c      	ldr	r4, [pc, #240]	; (82960 <XPROGProtocol_Command+0x264>)
   82870:	9401      	str	r4, [sp, #4]
   82872:	9100      	str	r1, [sp, #0]
   82874:	4629      	mov	r1, r5
   82876:	4c3c      	ldr	r4, [pc, #240]	; (82968 <XPROGProtocol_Command+0x26c>)
   82878:	47a0      	blx	r4
   8287a:	2800      	cmp	r0, #0
   8287c:	f47f af74 	bne.w	82768 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   82880:	4b33      	ldr	r3, [pc, #204]	; (82950 <XPROGProtocol_Command+0x254>)
   82882:	2203      	movs	r2, #3
   82884:	701a      	strb	r2, [r3, #0]
   82886:	e76f      	b.n	82768 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82888:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8288a:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   8288c:	221a      	movs	r2, #26
		break;
   8288e:	e7e3      	b.n	82858 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82890:	222e      	movs	r2, #46	; 0x2e
   82892:	2526      	movs	r5, #38	; 0x26
   82894:	2023      	movs	r0, #35	; 0x23
   82896:	e7df      	b.n	82858 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   82898:	4b2b      	ldr	r3, [pc, #172]	; (82948 <XPROGProtocol_Command+0x24c>)
   8289a:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   8289c:	4b2c      	ldr	r3, [pc, #176]	; (82950 <XPROGProtocol_Command+0x254>)
   8289e:	2200      	movs	r2, #0
   828a0:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   828a2:	4b27      	ldr	r3, [pc, #156]	; (82940 <XPROGProtocol_Command+0x244>)
   828a4:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   828a6:	798b      	ldrb	r3, [r1, #6]
   828a8:	794a      	ldrb	r2, [r1, #5]
   828aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   828ae:	7908      	ldrb	r0, [r1, #4]
   828b0:	78cb      	ldrb	r3, [r1, #3]
   828b2:	041b      	lsls	r3, r3, #16
   828b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   828b8:	7848      	ldrb	r0, [r1, #1]
   828ba:	4303      	orrs	r3, r0
   828bc:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   828be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   828c2:	bf28      	it	cs
   828c4:	f44f 7280 	movcs.w	r2, #256	; 0x100
   828c8:	4925      	ldr	r1, [pc, #148]	; (82960 <XPROGProtocol_Command+0x264>)
   828ca:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   828ce:	4b27      	ldr	r3, [pc, #156]	; (8296c <XPROGProtocol_Command+0x270>)
   828d0:	4798      	blx	r3
   828d2:	2800      	cmp	r0, #0
   828d4:	f47f af48 	bne.w	82768 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   828d8:	4b1d      	ldr	r3, [pc, #116]	; (82950 <XPROGProtocol_Command+0x254>)
   828da:	2203      	movs	r2, #3
   828dc:	701a      	strb	r2, [r3, #0]
   828de:	e743      	b.n	82768 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   828e0:	4b19      	ldr	r3, [pc, #100]	; (82948 <XPROGProtocol_Command+0x24c>)
   828e2:	4798      	blx	r3
			break;
   828e4:	e740      	b.n	82768 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   828e6:	4b18      	ldr	r3, [pc, #96]	; (82948 <XPROGProtocol_Command+0x24c>)
   828e8:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   828ea:	4b19      	ldr	r3, [pc, #100]	; (82950 <XPROGProtocol_Command+0x254>)
   828ec:	2200      	movs	r2, #0
   828ee:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   828f0:	4b13      	ldr	r3, [pc, #76]	; (82940 <XPROGProtocol_Command+0x244>)
   828f2:	8999      	ldrh	r1, [r3, #12]
   828f4:	2901      	cmp	r1, #1
   828f6:	d90b      	bls.n	82910 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   828f8:	4b11      	ldr	r3, [pc, #68]	; (82940 <XPROGProtocol_Command+0x244>)
   828fa:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   828fc:	7813      	ldrb	r3, [r2, #0]
   828fe:	3b01      	subs	r3, #1
   82900:	2b07      	cmp	r3, #7
   82902:	d85f      	bhi.n	829c4 <XPROGProtocol_Command+0x2c8>
   82904:	e8df f003 	tbb	[pc, r3]
   82908:	47433608 	.word	0x47433608
   8290c:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   82910:	4b0f      	ldr	r3, [pc, #60]	; (82950 <XPROGProtocol_Command+0x254>)
   82912:	2201      	movs	r2, #1
   82914:	701a      	strb	r2, [r3, #0]
		return;
   82916:	e727      	b.n	82768 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   82918:	2904      	cmp	r1, #4
   8291a:	d90c      	bls.n	82936 <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8291c:	7911      	ldrb	r1, [r2, #4]
   8291e:	78d3      	ldrb	r3, [r2, #3]
   82920:	041b      	lsls	r3, r3, #16
   82922:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82926:	7851      	ldrb	r1, [r2, #1]
   82928:	430b      	orrs	r3, r1
   8292a:	7892      	ldrb	r2, [r2, #2]
   8292c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   82930:	4a0f      	ldr	r2, [pc, #60]	; (82970 <XPROGProtocol_Command+0x274>)
   82932:	6013      	str	r3, [r2, #0]
			break;
   82934:	e718      	b.n	82768 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82936:	4b06      	ldr	r3, [pc, #24]	; (82950 <XPROGProtocol_Command+0x254>)
   82938:	2201      	movs	r2, #1
   8293a:	701a      	strb	r2, [r3, #0]
				return;
   8293c:	e714      	b.n	82768 <XPROGProtocol_Command+0x6c>
   8293e:	bf00      	nop
   82940:	2000269c 	.word	0x2000269c
   82944:	20001f6c 	.word	0x20001f6c
   82948:	00082d55 	.word	0x00082d55
   8294c:	00082399 	.word	0x00082399
   82950:	20002680 	.word	0x20002680
   82954:	00082d9d 	.word	0x00082d9d
   82958:	00082415 	.word	0x00082415
   8295c:	00082605 	.word	0x00082605
   82960:	20001f70 	.word	0x20001f70
   82964:	000824e5 	.word	0x000824e5
   82968:	0008252d 	.word	0x0008252d
   8296c:	00082451 	.word	0x00082451
   82970:	20000844 	.word	0x20000844
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   82974:	2902      	cmp	r1, #2
   82976:	d906      	bls.n	82986 <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   82978:	7891      	ldrb	r1, [r2, #2]
   8297a:	7853      	ldrb	r3, [r2, #1]
   8297c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   82980:	4a30      	ldr	r2, [pc, #192]	; (82a44 <XPROGProtocol_Command+0x348>)
   82982:	8013      	strh	r3, [r2, #0]
			break;
   82984:	e6f0      	b.n	82768 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82986:	4b30      	ldr	r3, [pc, #192]	; (82a48 <XPROGProtocol_Command+0x34c>)
   82988:	2201      	movs	r2, #1
   8298a:	701a      	strb	r2, [r3, #0]
				return;
   8298c:	e6ec      	b.n	82768 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   8298e:	7852      	ldrb	r2, [r2, #1]
   82990:	4b2e      	ldr	r3, [pc, #184]	; (82a4c <XPROGProtocol_Command+0x350>)
   82992:	701a      	strb	r2, [r3, #0]
			break;
   82994:	e6e8      	b.n	82768 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   82996:	7852      	ldrb	r2, [r2, #1]
   82998:	4b2d      	ldr	r3, [pc, #180]	; (82a50 <XPROGProtocol_Command+0x354>)
   8299a:	701a      	strb	r2, [r3, #0]
			break;
   8299c:	e6e4      	b.n	82768 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   8299e:	2904      	cmp	r1, #4
   829a0:	d803      	bhi.n	829aa <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   829a2:	4b29      	ldr	r3, [pc, #164]	; (82a48 <XPROGProtocol_Command+0x34c>)
   829a4:	2201      	movs	r2, #1
   829a6:	701a      	strb	r2, [r3, #0]
				return;
   829a8:	e6de      	b.n	82768 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   829aa:	7911      	ldrb	r1, [r2, #4]
   829ac:	78d3      	ldrb	r3, [r2, #3]
   829ae:	041b      	lsls	r3, r3, #16
   829b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   829b4:	7851      	ldrb	r1, [r2, #1]
   829b6:	430b      	orrs	r3, r1
   829b8:	7890      	ldrb	r0, [r2, #2]
   829ba:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   829be:	4b25      	ldr	r3, [pc, #148]	; (82a54 <XPROGProtocol_Command+0x358>)
   829c0:	4798      	blx	r3
			break;
   829c2:	e6d1      	b.n	82768 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   829c4:	4b20      	ldr	r3, [pc, #128]	; (82a48 <XPROGProtocol_Command+0x34c>)
   829c6:	2201      	movs	r2, #1
   829c8:	701a      	strb	r2, [r3, #0]
			break;
   829ca:	e6cd      	b.n	82768 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   829cc:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   829ce:	4b22      	ldr	r3, [pc, #136]	; (82a58 <XPROGProtocol_Command+0x35c>)
   829d0:	88db      	ldrh	r3, [r3, #6]
   829d2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   829d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   829da:	dc27      	bgt.n	82a2c <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   829dc:	491e      	ldr	r1, [pc, #120]	; (82a58 <XPROGProtocol_Command+0x35c>)
   829de:	4a1f      	ldr	r2, [pc, #124]	; (82a5c <XPROGProtocol_Command+0x360>)
   829e0:	4402      	add	r2, r0
   829e2:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   829e4:	818b      	strh	r3, [r1, #12]
			return true;
   829e6:	2001      	movs	r0, #1
   829e8:	e6c1      	b.n	8276e <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   829ea:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   829ec:	4b1a      	ldr	r3, [pc, #104]	; (82a58 <XPROGProtocol_Command+0x35c>)
   829ee:	88da      	ldrh	r2, [r3, #6]
   829f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   829f4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   829f8:	dd01      	ble.n	829fe <XPROGProtocol_Command+0x302>
				return false;
   829fa:	2000      	movs	r0, #0
   829fc:	e6b7      	b.n	8276e <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   829fe:	6899      	ldr	r1, [r3, #8]
   82a00:	4b16      	ldr	r3, [pc, #88]	; (82a5c <XPROGProtocol_Command+0x360>)
   82a02:	4418      	add	r0, r3
   82a04:	4b16      	ldr	r3, [pc, #88]	; (82a60 <XPROGProtocol_Command+0x364>)
   82a06:	4798      	blx	r3
			return true;
   82a08:	2001      	movs	r0, #1
   82a0a:	e6b0      	b.n	8276e <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   82a0c:	4a15      	ldr	r2, [pc, #84]	; (82a64 <XPROGProtocol_Command+0x368>)
   82a0e:	4b0e      	ldr	r3, [pc, #56]	; (82a48 <XPROGProtocol_Command+0x34c>)
   82a10:	781b      	ldrb	r3, [r3, #0]
   82a12:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   82a14:	4b14      	ldr	r3, [pc, #80]	; (82a68 <XPROGProtocol_Command+0x36c>)
   82a16:	681b      	ldr	r3, [r3, #0]
   82a18:	fab3 f383 	clz	r3, r3
   82a1c:	095b      	lsrs	r3, r3, #5
   82a1e:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   82a20:	4b0d      	ldr	r3, [pc, #52]	; (82a58 <XPROGProtocol_Command+0x35c>)
   82a22:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   82a24:	2203      	movs	r2, #3
   82a26:	819a      	strh	r2, [r3, #12]
			return true;
   82a28:	2001      	movs	r0, #1
   82a2a:	e6a0      	b.n	8276e <XPROGProtocol_Command+0x72>
				return false;
   82a2c:	2000      	movs	r0, #0
   82a2e:	e69e      	b.n	8276e <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82a30:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82a32:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   82a34:	2224      	movs	r2, #36	; 0x24
   82a36:	e70f      	b.n	82858 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   82a38:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   82a3a:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   82a3c:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82a3e:	e70b      	b.n	82858 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   82a40:	204c      	movs	r0, #76	; 0x4c
   82a42:	e6ff      	b.n	82844 <XPROGProtocol_Command+0x148>
   82a44:	20000842 	.word	0x20000842
   82a48:	20002680 	.word	0x20002680
   82a4c:	20000848 	.word	0x20000848
   82a50:	20000849 	.word	0x20000849
   82a54:	00082ce5 	.word	0x00082ce5
   82a58:	2000269c 	.word	0x2000269c
   82a5c:	20001f70 	.word	0x20001f70
   82a60:	00085f15 	.word	0x00085f15
   82a64:	20001f6c 	.word	0x20001f6c
   82a68:	20002684 	.word	0x20002684

00082a6c <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   82a6c:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   82a6e:	4d0b      	ldr	r5, [pc, #44]	; (82a9c <XPROGTarget_SetRxMode+0x30>)
   82a70:	4c0b      	ldr	r4, [pc, #44]	; (82aa0 <XPROGTarget_SetRxMode+0x34>)
   82a72:	4628      	mov	r0, r5
   82a74:	47a0      	blx	r4
   82a76:	2800      	cmp	r0, #0
   82a78:	d0fb      	beq.n	82a72 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   82a7a:	4c08      	ldr	r4, [pc, #32]	; (82a9c <XPROGTarget_SetRxMode+0x30>)
   82a7c:	4620      	mov	r0, r4
   82a7e:	4b09      	ldr	r3, [pc, #36]	; (82aa4 <XPROGTarget_SetRxMode+0x38>)
   82a80:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   82a82:	4620      	mov	r0, r4
   82a84:	4b08      	ldr	r3, [pc, #32]	; (82aa8 <XPROGTarget_SetRxMode+0x3c>)
   82a86:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82a88:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82a8c:	2014      	movs	r0, #20
   82a8e:	4b07      	ldr	r3, [pc, #28]	; (82aac <XPROGTarget_SetRxMode+0x40>)
   82a90:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   82a92:	4b07      	ldr	r3, [pc, #28]	; (82ab0 <XPROGTarget_SetRxMode+0x44>)
   82a94:	2200      	movs	r2, #0
   82a96:	701a      	strb	r2, [r3, #0]
}
   82a98:	bd38      	pop	{r3, r4, r5, pc}
   82a9a:	bf00      	nop
   82a9c:	40094000 	.word	0x40094000
   82aa0:	000855dd 	.word	0x000855dd
   82aa4:	000855bb 	.word	0x000855bb
   82aa8:	000855c1 	.word	0x000855c1
   82aac:	00083bb9 	.word	0x00083bb9
   82ab0:	20002070 	.word	0x20002070

00082ab4 <XPROGTarget_SetTxMode>:
{
   82ab4:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ab6:	2518      	movs	r5, #24
   82ab8:	4c14      	ldr	r4, [pc, #80]	; (82b0c <XPROGTarget_SetTxMode+0x58>)
   82aba:	4e15      	ldr	r6, [pc, #84]	; (82b10 <XPROGTarget_SetTxMode+0x5c>)
   82abc:	4628      	mov	r0, r5
   82abe:	47a0      	blx	r4
   82ac0:	b110      	cbz	r0, 82ac8 <XPROGTarget_SetTxMode+0x14>
   82ac2:	6833      	ldr	r3, [r6, #0]
   82ac4:	2b00      	cmp	r3, #0
   82ac6:	d1f9      	bne.n	82abc <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ac8:	2518      	movs	r5, #24
   82aca:	4c10      	ldr	r4, [pc, #64]	; (82b0c <XPROGTarget_SetTxMode+0x58>)
   82acc:	4e10      	ldr	r6, [pc, #64]	; (82b10 <XPROGTarget_SetTxMode+0x5c>)
   82ace:	4628      	mov	r0, r5
   82ad0:	47a0      	blx	r4
   82ad2:	b910      	cbnz	r0, 82ada <XPROGTarget_SetTxMode+0x26>
   82ad4:	6833      	ldr	r3, [r6, #0]
   82ad6:	2b00      	cmp	r3, #0
   82ad8:	d1f9      	bne.n	82ace <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ada:	2518      	movs	r5, #24
   82adc:	4c0b      	ldr	r4, [pc, #44]	; (82b0c <XPROGTarget_SetTxMode+0x58>)
   82ade:	4e0c      	ldr	r6, [pc, #48]	; (82b10 <XPROGTarget_SetTxMode+0x5c>)
   82ae0:	4628      	mov	r0, r5
   82ae2:	47a0      	blx	r4
   82ae4:	b110      	cbz	r0, 82aec <XPROGTarget_SetTxMode+0x38>
   82ae6:	6833      	ldr	r3, [r6, #0]
   82ae8:	2b00      	cmp	r3, #0
   82aea:	d1f9      	bne.n	82ae0 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   82aec:	4c09      	ldr	r4, [pc, #36]	; (82b14 <XPROGTarget_SetTxMode+0x60>)
   82aee:	4620      	mov	r0, r4
   82af0:	4b09      	ldr	r3, [pc, #36]	; (82b18 <XPROGTarget_SetTxMode+0x64>)
   82af2:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   82af4:	4620      	mov	r0, r4
   82af6:	4b09      	ldr	r3, [pc, #36]	; (82b1c <XPROGTarget_SetTxMode+0x68>)
   82af8:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   82afa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82afe:	2014      	movs	r0, #20
   82b00:	4b07      	ldr	r3, [pc, #28]	; (82b20 <XPROGTarget_SetTxMode+0x6c>)
   82b02:	4798      	blx	r3
	IsSending = true;
   82b04:	4b07      	ldr	r3, [pc, #28]	; (82b24 <XPROGTarget_SetTxMode+0x70>)
   82b06:	2201      	movs	r2, #1
   82b08:	701a      	strb	r2, [r3, #0]
}
   82b0a:	bd70      	pop	{r4, r5, r6, pc}
   82b0c:	00083b69 	.word	0x00083b69
   82b10:	20002684 	.word	0x20002684
   82b14:	40094000 	.word	0x40094000
   82b18:	000855c7 	.word	0x000855c7
   82b1c:	000855b5 	.word	0x000855b5
   82b20:	00083bb9 	.word	0x00083bb9
   82b24:	20002070 	.word	0x20002070

00082b28 <XPROGTarget_DisableTargetPDI>:
{
   82b28:	b510      	push	{r4, lr}
	if (IsSending)
   82b2a:	4b0f      	ldr	r3, [pc, #60]	; (82b68 <XPROGTarget_DisableTargetPDI+0x40>)
   82b2c:	781b      	ldrb	r3, [r3, #0]
   82b2e:	b9bb      	cbnz	r3, 82b60 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   82b30:	4c0e      	ldr	r4, [pc, #56]	; (82b6c <XPROGTarget_DisableTargetPDI+0x44>)
   82b32:	4620      	mov	r0, r4
   82b34:	4b0e      	ldr	r3, [pc, #56]	; (82b70 <XPROGTarget_DisableTargetPDI+0x48>)
   82b36:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   82b38:	4620      	mov	r0, r4
   82b3a:	4b0e      	ldr	r3, [pc, #56]	; (82b74 <XPROGTarget_DisableTargetPDI+0x4c>)
   82b3c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   82b3e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b42:	2018      	movs	r0, #24
   82b44:	4c0c      	ldr	r4, [pc, #48]	; (82b78 <XPROGTarget_DisableTargetPDI+0x50>)
   82b46:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82b48:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b4c:	2015      	movs	r0, #21
   82b4e:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82b50:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b54:	2014      	movs	r0, #20
   82b56:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   82b58:	200e      	movs	r0, #14
   82b5a:	4b08      	ldr	r3, [pc, #32]	; (82b7c <XPROGTarget_DisableTargetPDI+0x54>)
   82b5c:	4798      	blx	r3
}
   82b5e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   82b60:	4b07      	ldr	r3, [pc, #28]	; (82b80 <XPROGTarget_DisableTargetPDI+0x58>)
   82b62:	4798      	blx	r3
   82b64:	e7e4      	b.n	82b30 <XPROGTarget_DisableTargetPDI+0x8>
   82b66:	bf00      	nop
   82b68:	20002070 	.word	0x20002070
   82b6c:	40094000 	.word	0x40094000
   82b70:	000855c7 	.word	0x000855c7
   82b74:	000855bb 	.word	0x000855bb
   82b78:	00083bb9 	.word	0x00083bb9
   82b7c:	00083f21 	.word	0x00083f21
   82b80:	00082a6d 	.word	0x00082a6d

00082b84 <XPROGTarget_SendByte>:
{
   82b84:	b510      	push	{r4, lr}
   82b86:	4604      	mov	r4, r0
	if (!(IsSending))
   82b88:	4b05      	ldr	r3, [pc, #20]	; (82ba0 <XPROGTarget_SendByte+0x1c>)
   82b8a:	781b      	ldrb	r3, [r3, #0]
   82b8c:	b123      	cbz	r3, 82b98 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   82b8e:	4621      	mov	r1, r4
   82b90:	4804      	ldr	r0, [pc, #16]	; (82ba4 <XPROGTarget_SendByte+0x20>)
   82b92:	4b05      	ldr	r3, [pc, #20]	; (82ba8 <XPROGTarget_SendByte+0x24>)
   82b94:	4798      	blx	r3
}
   82b96:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   82b98:	4b04      	ldr	r3, [pc, #16]	; (82bac <XPROGTarget_SendByte+0x28>)
   82b9a:	4798      	blx	r3
   82b9c:	e7f7      	b.n	82b8e <XPROGTarget_SendByte+0xa>
   82b9e:	bf00      	nop
   82ba0:	20002070 	.word	0x20002070
   82ba4:	40094000 	.word	0x40094000
   82ba8:	000855f9 	.word	0x000855f9
   82bac:	00082ab5 	.word	0x00082ab5

00082bb0 <XPROGTarget_ReceiveByte>:
{
   82bb0:	b570      	push	{r4, r5, r6, lr}
   82bb2:	b082      	sub	sp, #8
	if (IsSending)
   82bb4:	4b0a      	ldr	r3, [pc, #40]	; (82be0 <XPROGTarget_ReceiveByte+0x30>)
   82bb6:	781b      	ldrb	r3, [r3, #0]
   82bb8:	b973      	cbnz	r3, 82bd8 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   82bba:	4d0a      	ldr	r5, [pc, #40]	; (82be4 <XPROGTarget_ReceiveByte+0x34>)
   82bbc:	4c0a      	ldr	r4, [pc, #40]	; (82be8 <XPROGTarget_ReceiveByte+0x38>)
   82bbe:	4e0b      	ldr	r6, [pc, #44]	; (82bec <XPROGTarget_ReceiveByte+0x3c>)
   82bc0:	a901      	add	r1, sp, #4
   82bc2:	4628      	mov	r0, r5
   82bc4:	47a0      	blx	r4
   82bc6:	2801      	cmp	r0, #1
   82bc8:	d102      	bne.n	82bd0 <XPROGTarget_ReceiveByte+0x20>
   82bca:	6833      	ldr	r3, [r6, #0]
   82bcc:	2b00      	cmp	r3, #0
   82bce:	d1f7      	bne.n	82bc0 <XPROGTarget_ReceiveByte+0x10>
}
   82bd0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   82bd4:	b002      	add	sp, #8
   82bd6:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   82bd8:	4b05      	ldr	r3, [pc, #20]	; (82bf0 <XPROGTarget_ReceiveByte+0x40>)
   82bda:	4798      	blx	r3
   82bdc:	e7ed      	b.n	82bba <XPROGTarget_ReceiveByte+0xa>
   82bde:	bf00      	nop
   82be0:	20002070 	.word	0x20002070
   82be4:	40094000 	.word	0x40094000
   82be8:	0008560b 	.word	0x0008560b
   82bec:	20002684 	.word	0x20002684
   82bf0:	00082a6d 	.word	0x00082a6d

00082bf4 <XPROGTarget_SendIdle>:
{
   82bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   82bf6:	4b12      	ldr	r3, [pc, #72]	; (82c40 <XPROGTarget_SendIdle+0x4c>)
   82bf8:	781b      	ldrb	r3, [r3, #0]
   82bfa:	b123      	cbz	r3, 82c06 <XPROGTarget_SendIdle+0x12>
{
   82bfc:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82bfe:	2518      	movs	r5, #24
   82c00:	4c10      	ldr	r4, [pc, #64]	; (82c44 <XPROGTarget_SendIdle+0x50>)
   82c02:	4e11      	ldr	r6, [pc, #68]	; (82c48 <XPROGTarget_SendIdle+0x54>)
   82c04:	e006      	b.n	82c14 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   82c06:	4b11      	ldr	r3, [pc, #68]	; (82c4c <XPROGTarget_SendIdle+0x58>)
   82c08:	4798      	blx	r3
   82c0a:	e7f7      	b.n	82bfc <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   82c0c:	3f01      	subs	r7, #1
   82c0e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   82c12:	d013      	beq.n	82c3c <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c14:	4628      	mov	r0, r5
   82c16:	47a0      	blx	r4
   82c18:	b110      	cbz	r0, 82c20 <XPROGTarget_SendIdle+0x2c>
   82c1a:	6833      	ldr	r3, [r6, #0]
   82c1c:	2b00      	cmp	r3, #0
   82c1e:	d1f9      	bne.n	82c14 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c20:	4628      	mov	r0, r5
   82c22:	47a0      	blx	r4
   82c24:	b910      	cbnz	r0, 82c2c <XPROGTarget_SendIdle+0x38>
   82c26:	6833      	ldr	r3, [r6, #0]
   82c28:	2b00      	cmp	r3, #0
   82c2a:	d1f9      	bne.n	82c20 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c2c:	4628      	mov	r0, r5
   82c2e:	47a0      	blx	r4
   82c30:	2800      	cmp	r0, #0
   82c32:	d0eb      	beq.n	82c0c <XPROGTarget_SendIdle+0x18>
   82c34:	6833      	ldr	r3, [r6, #0]
   82c36:	2b00      	cmp	r3, #0
   82c38:	d1f8      	bne.n	82c2c <XPROGTarget_SendIdle+0x38>
   82c3a:	e7e7      	b.n	82c0c <XPROGTarget_SendIdle+0x18>
}
   82c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c3e:	bf00      	nop
   82c40:	20002070 	.word	0x20002070
   82c44:	00083b69 	.word	0x00083b69
   82c48:	20002684 	.word	0x20002684
   82c4c:	00082ab5 	.word	0x00082ab5

00082c50 <XPROGTarget_EnableTargetPDI>:
{
   82c50:	b570      	push	{r4, r5, r6, lr}
   82c52:	b086      	sub	sp, #24
	IsSending = false;
   82c54:	2500      	movs	r5, #0
   82c56:	4b19      	ldr	r3, [pc, #100]	; (82cbc <XPROGTarget_EnableTargetPDI+0x6c>)
   82c58:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   82c5a:	200e      	movs	r0, #14
   82c5c:	4b18      	ldr	r3, [pc, #96]	; (82cc0 <XPROGTarget_EnableTargetPDI+0x70>)
   82c5e:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   82c60:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82c64:	2014      	movs	r0, #20
   82c66:	4c17      	ldr	r4, [pc, #92]	; (82cc4 <XPROGTarget_EnableTargetPDI+0x74>)
   82c68:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82c6a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c6e:	2015      	movs	r0, #21
   82c70:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   82c72:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82c76:	2018      	movs	r0, #24
   82c78:	47a0      	blx	r4
	delay_us(50);
   82c7a:	f240 1057 	movw	r0, #343	; 0x157
   82c7e:	4e12      	ldr	r6, [pc, #72]	; (82cc8 <XPROGTarget_EnableTargetPDI+0x78>)
   82c80:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   82c82:	2014      	movs	r0, #20
   82c84:	4b11      	ldr	r3, [pc, #68]	; (82ccc <XPROGTarget_EnableTargetPDI+0x7c>)
   82c86:	4798      	blx	r3
	delay_us(10);
   82c88:	2045      	movs	r0, #69	; 0x45
   82c8a:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   82c8c:	9502      	str	r5, [sp, #8]
   82c8e:	9504      	str	r5, [sp, #16]
   82c90:	9505      	str	r5, [sp, #20]
   82c92:	4b0f      	ldr	r3, [pc, #60]	; (82cd0 <XPROGTarget_EnableTargetPDI+0x80>)
   82c94:	9300      	str	r3, [sp, #0]
   82c96:	23c0      	movs	r3, #192	; 0xc0
   82c98:	9301      	str	r3, [sp, #4]
   82c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82c9e:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   82ca0:	4a0c      	ldr	r2, [pc, #48]	; (82cd4 <XPROGTarget_EnableTargetPDI+0x84>)
   82ca2:	4669      	mov	r1, sp
   82ca4:	480c      	ldr	r0, [pc, #48]	; (82cd8 <XPROGTarget_EnableTargetPDI+0x88>)
   82ca6:	4b0d      	ldr	r3, [pc, #52]	; (82cdc <XPROGTarget_EnableTargetPDI+0x8c>)
   82ca8:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   82caa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82cae:	2018      	movs	r0, #24
   82cb0:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82cb2:	4c0b      	ldr	r4, [pc, #44]	; (82ce0 <XPROGTarget_EnableTargetPDI+0x90>)
   82cb4:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82cb6:	47a0      	blx	r4
}
   82cb8:	b006      	add	sp, #24
   82cba:	bd70      	pop	{r4, r5, r6, pc}
   82cbc:	20002070 	.word	0x20002070
   82cc0:	00083ef5 	.word	0x00083ef5
   82cc4:	00083bb9 	.word	0x00083bb9
   82cc8:	20000087 	.word	0x20000087
   82ccc:	00083b85 	.word	0x00083b85
   82cd0:	0007a120 	.word	0x0007a120
   82cd4:	0b71b000 	.word	0x0b71b000
   82cd8:	40094000 	.word	0x40094000
   82cdc:	0008554d 	.word	0x0008554d
   82ce0:	00082bf5 	.word	0x00082bf5

00082ce4 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   82ce4:	4b01      	ldr	r3, [pc, #4]	; (82cec <set_timeout+0x8>)
   82ce6:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   82ce8:	4770      	bx	lr
   82cea:	bf00      	nop
   82cec:	2000084c 	.word	0x2000084c

00082cf0 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   82cf0:	b538      	push	{r3, r4, r5, lr}
   82cf2:	2016      	movs	r0, #22
   82cf4:	4b10      	ldr	r3, [pc, #64]	; (82d38 <setup_timeoutcnt+0x48>)
   82cf6:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82cf8:	4b10      	ldr	r3, [pc, #64]	; (82d3c <setup_timeoutcnt+0x4c>)
   82cfa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   82cfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82d02:	2510      	movs	r5, #16
   82d04:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82d08:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   82d0a:	4c0d      	ldr	r4, [pc, #52]	; (82d40 <setup_timeoutcnt+0x50>)
   82d0c:	f24c 0201 	movw	r2, #49153	; 0xc001
   82d10:	2100      	movs	r1, #0
   82d12:	4620      	mov	r0, r4
   82d14:	4b0b      	ldr	r3, [pc, #44]	; (82d44 <setup_timeoutcnt+0x54>)
   82d16:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   82d18:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   82d1c:	2100      	movs	r1, #0
   82d1e:	4620      	mov	r0, r4
   82d20:	4b09      	ldr	r3, [pc, #36]	; (82d48 <setup_timeoutcnt+0x58>)
   82d22:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   82d24:	462a      	mov	r2, r5
   82d26:	2100      	movs	r1, #0
   82d28:	4620      	mov	r0, r4
   82d2a:	4b08      	ldr	r3, [pc, #32]	; (82d4c <setup_timeoutcnt+0x5c>)
   82d2c:	4798      	blx	r3
	
	timerEnabled = true;
   82d2e:	4b08      	ldr	r3, [pc, #32]	; (82d50 <setup_timeoutcnt+0x60>)
   82d30:	2201      	movs	r2, #1
   82d32:	701a      	strb	r2, [r3, #0]
}
   82d34:	bd38      	pop	{r3, r4, r5, pc}
   82d36:	bf00      	nop
   82d38:	00083ef5 	.word	0x00083ef5
   82d3c:	e000e100 	.word	0xe000e100
   82d40:	40080000 	.word	0x40080000
   82d44:	00082e25 	.word	0x00082e25
   82d48:	00082e4f 	.word	0x00082e4f
   82d4c:	00082e57 	.word	0x00082e57
   82d50:	20002071 	.word	0x20002071

00082d54 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   82d54:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   82d56:	4b0a      	ldr	r3, [pc, #40]	; (82d80 <start_timeoutcnt+0x2c>)
   82d58:	781b      	ldrb	r3, [r3, #0]
   82d5a:	b16b      	cbz	r3, 82d78 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82d5c:	4c09      	ldr	r4, [pc, #36]	; (82d84 <start_timeoutcnt+0x30>)
   82d5e:	2100      	movs	r1, #0
   82d60:	4620      	mov	r0, r4
   82d62:	4b09      	ldr	r3, [pc, #36]	; (82d88 <start_timeoutcnt+0x34>)
   82d64:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   82d66:	4b09      	ldr	r3, [pc, #36]	; (82d8c <start_timeoutcnt+0x38>)
   82d68:	681a      	ldr	r2, [r3, #0]
   82d6a:	4b09      	ldr	r3, [pc, #36]	; (82d90 <start_timeoutcnt+0x3c>)
   82d6c:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   82d6e:	2100      	movs	r1, #0
   82d70:	4620      	mov	r0, r4
   82d72:	4b08      	ldr	r3, [pc, #32]	; (82d94 <start_timeoutcnt+0x40>)
   82d74:	4798      	blx	r3
}
   82d76:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   82d78:	4b07      	ldr	r3, [pc, #28]	; (82d98 <start_timeoutcnt+0x44>)
   82d7a:	4798      	blx	r3
   82d7c:	e7ee      	b.n	82d5c <start_timeoutcnt+0x8>
   82d7e:	bf00      	nop
   82d80:	20002071 	.word	0x20002071
   82d84:	40080000 	.word	0x40080000
   82d88:	00082e47 	.word	0x00082e47
   82d8c:	2000084c 	.word	0x2000084c
   82d90:	20002684 	.word	0x20002684
   82d94:	00082e3f 	.word	0x00082e3f
   82d98:	00082cf1 	.word	0x00082cf1

00082d9c <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   82d9c:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82d9e:	2100      	movs	r1, #0
   82da0:	4801      	ldr	r0, [pc, #4]	; (82da8 <stop_timeoutcnt+0xc>)
   82da2:	4b02      	ldr	r3, [pc, #8]	; (82dac <stop_timeoutcnt+0x10>)
   82da4:	4798      	blx	r3
}
   82da6:	bd08      	pop	{r3, pc}
   82da8:	40080000 	.word	0x40080000
   82dac:	00082e47 	.word	0x00082e47

00082db0 <TC0_Handler>:

ISR(TC0_Handler)
{
   82db0:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   82db2:	4b05      	ldr	r3, [pc, #20]	; (82dc8 <TC0_Handler+0x18>)
   82db4:	681b      	ldr	r3, [r3, #0]
   82db6:	b113      	cbz	r3, 82dbe <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   82db8:	3b01      	subs	r3, #1
   82dba:	4a03      	ldr	r2, [pc, #12]	; (82dc8 <TC0_Handler+0x18>)
   82dbc:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   82dbe:	2100      	movs	r1, #0
   82dc0:	4802      	ldr	r0, [pc, #8]	; (82dcc <TC0_Handler+0x1c>)
   82dc2:	4b03      	ldr	r3, [pc, #12]	; (82dd0 <TC0_Handler+0x20>)
   82dc4:	4798      	blx	r3
}
   82dc6:	bd08      	pop	{r3, pc}
   82dc8:	20002684 	.word	0x20002684
   82dcc:	40080000 	.word	0x40080000
   82dd0:	00082e5f 	.word	0x00082e5f

00082dd4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82dd4:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82dd6:	f1a1 030e 	sub.w	r3, r1, #14
   82dda:	2b01      	cmp	r3, #1
   82ddc:	d91a      	bls.n	82e14 <efc_perform_command+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82dde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82de2:	b672      	cpsid	i
   82de4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82de8:	4b0c      	ldr	r3, [pc, #48]	; (82e1c <efc_perform_command+0x48>)
   82dea:	2500      	movs	r5, #0
   82dec:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82dee:	0212      	lsls	r2, r2, #8
   82df0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82df4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82df8:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82dfa:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   82dfc:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   82e00:	4b07      	ldr	r3, [pc, #28]	; (82e20 <efc_perform_command+0x4c>)
   82e02:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82e04:	b92c      	cbnz	r4, 82e12 <efc_perform_command+0x3e>
		cpu_irq_enable();
   82e06:	4b05      	ldr	r3, [pc, #20]	; (82e1c <efc_perform_command+0x48>)
   82e08:	2201      	movs	r2, #1
   82e0a:	701a      	strb	r2, [r3, #0]
   82e0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82e10:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82e12:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   82e14:	f04f 30ff 	mov.w	r0, #4294967295
   82e18:	e7fb      	b.n	82e12 <efc_perform_command+0x3e>
   82e1a:	bf00      	nop
   82e1c:	20000982 	.word	0x20000982
   82e20:	2000006d 	.word	0x2000006d

00082e24 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82e24:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e26:	018b      	lsls	r3, r1, #6
   82e28:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82e2c:	2402      	movs	r4, #2
   82e2e:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82e30:	f04f 33ff 	mov.w	r3, #4294967295
   82e34:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82e36:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82e38:	604a      	str	r2, [r1, #4]
}
   82e3a:	bc10      	pop	{r4}
   82e3c:	4770      	bx	lr

00082e3e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82e3e:	0189      	lsls	r1, r1, #6
   82e40:	2305      	movs	r3, #5
   82e42:	5043      	str	r3, [r0, r1]
}
   82e44:	4770      	bx	lr

00082e46 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82e46:	0189      	lsls	r1, r1, #6
   82e48:	2302      	movs	r3, #2
   82e4a:	5043      	str	r3, [r0, r1]
}
   82e4c:	4770      	bx	lr

00082e4e <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82e4e:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   82e52:	61c2      	str	r2, [r0, #28]
}
   82e54:	4770      	bx	lr

00082e56 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e56:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82e5a:	6242      	str	r2, [r0, #36]	; 0x24
}
   82e5c:	4770      	bx	lr

00082e5e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e5e:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82e62:	6a00      	ldr	r0, [r0, #32]
}
   82e64:	4770      	bx	lr
	...

00082e68 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82e68:	b570      	push	{r4, r5, r6, lr}
   82e6a:	b086      	sub	sp, #24
   82e6c:	4604      	mov	r4, r0
   82e6e:	460d      	mov	r5, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82e70:	2304      	movs	r3, #4
   82e72:	9300      	str	r3, [sp, #0]
   82e74:	ab02      	add	r3, sp, #8
   82e76:	220f      	movs	r2, #15
   82e78:	210e      	movs	r1, #14
   82e7a:	480c      	ldr	r0, [pc, #48]	; (82eac <flash_read_unique_id+0x44>)
   82e7c:	4e0c      	ldr	r6, [pc, #48]	; (82eb0 <flash_read_unique_id+0x48>)
   82e7e:	47b0      	blx	r6
   82e80:	b980      	cbnz	r0, 82ea4 <flash_read_unique_id+0x3c>
   82e82:	4603      	mov	r3, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82e84:	462e      	mov	r6, r5
   82e86:	2d04      	cmp	r5, #4
   82e88:	bf28      	it	cs
   82e8a:	2604      	movcs	r6, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e8c:	b165      	cbz	r5, 82ea8 <flash_read_unique_id+0x40>
   82e8e:	a902      	add	r1, sp, #8
   82e90:	1f22      	subs	r2, r4, #4
		pul_data[ul_idx] = uid_buf[ul_idx];
   82e92:	f851 4b04 	ldr.w	r4, [r1], #4
   82e96:	f842 4f04 	str.w	r4, [r2, #4]!
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e9a:	3301      	adds	r3, #1
   82e9c:	429e      	cmp	r6, r3
   82e9e:	d8f8      	bhi.n	82e92 <flash_read_unique_id+0x2a>
	}

	return FLASH_RC_OK;
}
   82ea0:	b006      	add	sp, #24
   82ea2:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82ea4:	2010      	movs	r0, #16
   82ea6:	e7fb      	b.n	82ea0 <flash_read_unique_id+0x38>
	return FLASH_RC_OK;
   82ea8:	4628      	mov	r0, r5
   82eaa:	e7f9      	b.n	82ea0 <flash_read_unique_id+0x38>
   82eac:	400e0800 	.word	0x400e0800
   82eb0:	20000001 	.word	0x20000001

00082eb4 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   82eb4:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   82eb6:	2006      	movs	r0, #6
   82eb8:	4c02      	ldr	r4, [pc, #8]	; (82ec4 <ui_init+0x10>)
   82eba:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82ebc:	2007      	movs	r0, #7
   82ebe:	47a0      	blx	r4
}
   82ec0:	bd10      	pop	{r4, pc}
   82ec2:	bf00      	nop
   82ec4:	00083a49 	.word	0x00083a49

00082ec8 <ui_powerdown>:

void ui_powerdown(void)
{
   82ec8:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   82eca:	2006      	movs	r0, #6
   82ecc:	4c03      	ldr	r4, [pc, #12]	; (82edc <ui_powerdown+0x14>)
   82ece:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82ed0:	2007      	movs	r0, #7
   82ed2:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   82ed4:	201d      	movs	r0, #29
   82ed6:	4b02      	ldr	r3, [pc, #8]	; (82ee0 <ui_powerdown+0x18>)
   82ed8:	4798      	blx	r3
		
}
   82eda:	bd10      	pop	{r4, pc}
   82edc:	00083a49 	.word	0x00083a49
   82ee0:	00083b9f 	.word	0x00083b9f

00082ee4 <ui_wakeup>:

void ui_wakeup(void)
{
   82ee4:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   82ee6:	2006      	movs	r0, #6
   82ee8:	4b02      	ldr	r3, [pc, #8]	; (82ef4 <ui_wakeup+0x10>)
   82eea:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   82eec:	201d      	movs	r0, #29
   82eee:	4b02      	ldr	r3, [pc, #8]	; (82ef8 <ui_wakeup+0x14>)
   82ef0:	4798      	blx	r3
}
   82ef2:	bd08      	pop	{r3, pc}
   82ef4:	00083a6d 	.word	0x00083a6d
   82ef8:	00083b85 	.word	0x00083b85

00082efc <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   82efc:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   82efe:	4b0b      	ldr	r3, [pc, #44]	; (82f2c <ui_process+0x30>)
   82f00:	fba3 2300 	umull	r2, r3, r3, r0
   82f04:	099b      	lsrs	r3, r3, #6
   82f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82f0a:	fb02 0013 	mls	r0, r2, r3, r0
   82f0e:	b280      	uxth	r0, r0
   82f10:	b118      	cbz	r0, 82f1a <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   82f12:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   82f16:	d004      	beq.n	82f22 <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   82f18:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   82f1a:	2006      	movs	r0, #6
   82f1c:	4b04      	ldr	r3, [pc, #16]	; (82f30 <ui_process+0x34>)
   82f1e:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   82f20:	e7fa      	b.n	82f18 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   82f22:	2006      	movs	r0, #6
   82f24:	4b03      	ldr	r3, [pc, #12]	; (82f34 <ui_process+0x38>)
   82f26:	4798      	blx	r3
}
   82f28:	e7f6      	b.n	82f18 <ui_process+0x1c>
   82f2a:	bf00      	nop
   82f2c:	10624dd3 	.word	0x10624dd3
   82f30:	00083a6d 	.word	0x00083a6d
   82f34:	00083a49 	.word	0x00083a49

00082f38 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82f38:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f3a:	203e      	movs	r0, #62	; 0x3e
   82f3c:	4b07      	ldr	r3, [pc, #28]	; (82f5c <sysclk_enable_usb+0x24>)
   82f3e:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82f40:	4c07      	ldr	r4, [pc, #28]	; (82f60 <sysclk_enable_usb+0x28>)
   82f42:	47a0      	blx	r4
   82f44:	2800      	cmp	r0, #0
   82f46:	d0fc      	beq.n	82f42 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82f48:	4b06      	ldr	r3, [pc, #24]	; (82f64 <sysclk_enable_usb+0x2c>)
   82f4a:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82f4e:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82f50:	4c05      	ldr	r4, [pc, #20]	; (82f68 <sysclk_enable_usb+0x30>)
   82f52:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82f54:	2800      	cmp	r0, #0
   82f56:	d0fc      	beq.n	82f52 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82f58:	bd10      	pop	{r4, pc}
   82f5a:	bf00      	nop
   82f5c:	00083e5d 	.word	0x00083e5d
   82f60:	00083e85 	.word	0x00083e85
   82f64:	400e0400 	.word	0x400e0400
   82f68:	00083ee5 	.word	0x00083ee5

00082f6c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82f6c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82f6e:	4812      	ldr	r0, [pc, #72]	; (82fb8 <sysclk_init+0x4c>)
   82f70:	4b12      	ldr	r3, [pc, #72]	; (82fbc <sysclk_init+0x50>)
   82f72:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f74:	203e      	movs	r0, #62	; 0x3e
   82f76:	4b12      	ldr	r3, [pc, #72]	; (82fc0 <sysclk_init+0x54>)
   82f78:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82f7a:	4c12      	ldr	r4, [pc, #72]	; (82fc4 <sysclk_init+0x58>)
   82f7c:	47a0      	blx	r4
   82f7e:	2800      	cmp	r0, #0
   82f80:	d0fc      	beq.n	82f7c <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82f82:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82f86:	4b10      	ldr	r3, [pc, #64]	; (82fc8 <sysclk_init+0x5c>)
   82f88:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82f8a:	4c10      	ldr	r4, [pc, #64]	; (82fcc <sysclk_init+0x60>)
   82f8c:	47a0      	blx	r4
   82f8e:	2800      	cmp	r0, #0
   82f90:	d0fc      	beq.n	82f8c <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   82f92:	4b0f      	ldr	r3, [pc, #60]	; (82fd0 <sysclk_init+0x64>)
   82f94:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82f96:	4b0f      	ldr	r3, [pc, #60]	; (82fd4 <sysclk_init+0x68>)
   82f98:	4a0f      	ldr	r2, [pc, #60]	; (82fd8 <sysclk_init+0x6c>)
   82f9a:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82f9c:	4c0f      	ldr	r4, [pc, #60]	; (82fdc <sysclk_init+0x70>)
   82f9e:	47a0      	blx	r4
   82fa0:	2800      	cmp	r0, #0
   82fa2:	d0fc      	beq.n	82f9e <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fa4:	2010      	movs	r0, #16
   82fa6:	4b0e      	ldr	r3, [pc, #56]	; (82fe0 <sysclk_init+0x74>)
   82fa8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82faa:	4b0e      	ldr	r3, [pc, #56]	; (82fe4 <sysclk_init+0x78>)
   82fac:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82fae:	4802      	ldr	r0, [pc, #8]	; (82fb8 <sysclk_init+0x4c>)
   82fb0:	4b02      	ldr	r3, [pc, #8]	; (82fbc <sysclk_init+0x50>)
   82fb2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82fb4:	bd10      	pop	{r4, pc}
   82fb6:	bf00      	nop
   82fb8:	05b8d800 	.word	0x05b8d800
   82fbc:	20000139 	.word	0x20000139
   82fc0:	00083e5d 	.word	0x00083e5d
   82fc4:	00083e85 	.word	0x00083e85
   82fc8:	00083ea5 	.word	0x00083ea5
   82fcc:	00083e95 	.word	0x00083e95
   82fd0:	00083ec5 	.word	0x00083ec5
   82fd4:	400e0400 	.word	0x400e0400
   82fd8:	200f3f01 	.word	0x200f3f01
   82fdc:	00083ed5 	.word	0x00083ed5
   82fe0:	00083dfd 	.word	0x00083dfd
   82fe4:	00085719 	.word	0x00085719

00082fe8 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   82fe8:	4b01      	ldr	r3, [pc, #4]	; (82ff0 <udi_vendor_getsetting+0x8>)
   82fea:	7818      	ldrb	r0, [r3, #0]
   82fec:	4770      	bx	lr
   82fee:	bf00      	nop
   82ff0:	20002072 	.word	0x20002072

00082ff4 <udi_vendor_enable>:
{
   82ff4:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   82ff6:	4b05      	ldr	r3, [pc, #20]	; (8300c <udi_vendor_enable+0x18>)
   82ff8:	4798      	blx	r3
   82ffa:	78c3      	ldrb	r3, [r0, #3]
   82ffc:	4a04      	ldr	r2, [pc, #16]	; (83010 <udi_vendor_enable+0x1c>)
   82ffe:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83000:	b10b      	cbz	r3, 83006 <udi_vendor_enable+0x12>
	return true;
   83002:	2001      	movs	r0, #1
}
   83004:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83006:	4b03      	ldr	r3, [pc, #12]	; (83014 <udi_vendor_enable+0x20>)
   83008:	4798      	blx	r3
   8300a:	e7fb      	b.n	83004 <udi_vendor_enable+0x10>
   8300c:	00083229 	.word	0x00083229
   83010:	20002072 	.word	0x20002072
   83014:	0008134d 	.word	0x0008134d

00083018 <udi_vendor_disable>:
{
   83018:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   8301a:	4b03      	ldr	r3, [pc, #12]	; (83028 <udi_vendor_disable+0x10>)
   8301c:	781b      	ldrb	r3, [r3, #0]
   8301e:	b103      	cbz	r3, 83022 <udi_vendor_disable+0xa>
}
   83020:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   83022:	4b02      	ldr	r3, [pc, #8]	; (8302c <udi_vendor_disable+0x14>)
   83024:	4798      	blx	r3
}
   83026:	e7fb      	b.n	83020 <udi_vendor_disable+0x8>
   83028:	20002072 	.word	0x20002072
   8302c:	00081375 	.word	0x00081375

00083030 <udi_vendor_setup>:
{
   83030:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   83032:	4a0c      	ldr	r2, [pc, #48]	; (83064 <udi_vendor_setup+0x34>)
   83034:	7813      	ldrb	r3, [r2, #0]
   83036:	f992 2000 	ldrsb.w	r2, [r2]
   8303a:	2a00      	cmp	r2, #0
   8303c:	db06      	blt.n	8304c <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8303e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83042:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   83044:	bf18      	it	ne
   83046:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83048:	d009      	beq.n	8305e <udi_vendor_setup+0x2e>
}
   8304a:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8304c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83050:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   83052:	bf18      	it	ne
   83054:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83056:	d1f8      	bne.n	8304a <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83058:	4b03      	ldr	r3, [pc, #12]	; (83068 <udi_vendor_setup+0x38>)
   8305a:	4798      	blx	r3
   8305c:	e7f5      	b.n	8304a <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8305e:	4b03      	ldr	r3, [pc, #12]	; (8306c <udi_vendor_setup+0x3c>)
   83060:	4798      	blx	r3
   83062:	e7f2      	b.n	8304a <udi_vendor_setup+0x1a>
   83064:	2000269c 	.word	0x2000269c
   83068:	000813d1 	.word	0x000813d1
   8306c:	00081381 	.word	0x00081381

00083070 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83070:	b510      	push	{r4, lr}
   83072:	b082      	sub	sp, #8
   83074:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83076:	9200      	str	r2, [sp, #0]
   83078:	4602      	mov	r2, r0
   8307a:	2100      	movs	r1, #0
   8307c:	2081      	movs	r0, #129	; 0x81
   8307e:	4c02      	ldr	r4, [pc, #8]	; (83088 <udi_vendor_bulk_in_run+0x18>)
   83080:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   83082:	b002      	add	sp, #8
   83084:	bd10      	pop	{r4, pc}
   83086:	bf00      	nop
   83088:	00084f81 	.word	0x00084f81

0008308c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8308c:	b510      	push	{r4, lr}
   8308e:	b082      	sub	sp, #8
   83090:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83092:	9200      	str	r2, [sp, #0]
   83094:	4602      	mov	r2, r0
   83096:	2100      	movs	r1, #0
   83098:	2002      	movs	r0, #2
   8309a:	4c02      	ldr	r4, [pc, #8]	; (830a4 <udi_vendor_bulk_out_run+0x18>)
   8309c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8309e:	b002      	add	sp, #8
   830a0:	bd10      	pop	{r4, pc}
   830a2:	bf00      	nop
   830a4:	00084f81 	.word	0x00084f81

000830a8 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   830a8:	4b0b      	ldr	r3, [pc, #44]	; (830d8 <udc_next_desc_in_iface+0x30>)
   830aa:	681b      	ldr	r3, [r3, #0]
   830ac:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   830ae:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   830b0:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   830b2:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830b4:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   830b6:	4290      	cmp	r0, r2
   830b8:	d20a      	bcs.n	830d0 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   830ba:	7843      	ldrb	r3, [r0, #1]
   830bc:	2b04      	cmp	r3, #4
   830be:	d009      	beq.n	830d4 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   830c0:	428b      	cmp	r3, r1
   830c2:	d008      	beq.n	830d6 <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   830c4:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830c6:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   830c8:	4290      	cmp	r0, r2
   830ca:	d3f6      	bcc.n	830ba <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   830cc:	2000      	movs	r0, #0
   830ce:	4770      	bx	lr
   830d0:	2000      	movs	r0, #0
   830d2:	4770      	bx	lr
   830d4:	2000      	movs	r0, #0
}
   830d6:	4770      	bx	lr
   830d8:	2000207c 	.word	0x2000207c

000830dc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   830dc:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   830de:	4b03      	ldr	r3, [pc, #12]	; (830ec <udc_valid_address+0x10>)
   830e0:	7898      	ldrb	r0, [r3, #2]
   830e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   830e6:	4b02      	ldr	r3, [pc, #8]	; (830f0 <udc_valid_address+0x14>)
   830e8:	4798      	blx	r3
}
   830ea:	bd08      	pop	{r3, pc}
   830ec:	2000269c 	.word	0x2000269c
   830f0:	00084cd5 	.word	0x00084cd5

000830f4 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   830f4:	4b18      	ldr	r3, [pc, #96]	; (83158 <udc_update_iface_desc+0x64>)
   830f6:	781b      	ldrb	r3, [r3, #0]
   830f8:	b33b      	cbz	r3, 8314a <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   830fa:	4b18      	ldr	r3, [pc, #96]	; (8315c <udc_update_iface_desc+0x68>)
   830fc:	681b      	ldr	r3, [r3, #0]
   830fe:	681b      	ldr	r3, [r3, #0]
   83100:	791a      	ldrb	r2, [r3, #4]
   83102:	4282      	cmp	r2, r0
   83104:	d923      	bls.n	8314e <udc_update_iface_desc+0x5a>
{
   83106:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83108:	4a15      	ldr	r2, [pc, #84]	; (83160 <udc_update_iface_desc+0x6c>)
   8310a:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8310c:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8310e:	441c      	add	r4, r3
	while (ptr_end_desc >
   83110:	42a3      	cmp	r3, r4
   83112:	d21e      	bcs.n	83152 <udc_update_iface_desc+0x5e>
   83114:	2500      	movs	r5, #0
   83116:	2601      	movs	r6, #1
   83118:	e004      	b.n	83124 <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   8311a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8311c:	4413      	add	r3, r2
	while (ptr_end_desc >
   8311e:	4635      	mov	r5, r6
   83120:	42a3      	cmp	r3, r4
   83122:	d20d      	bcs.n	83140 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83124:	785a      	ldrb	r2, [r3, #1]
   83126:	2a04      	cmp	r2, #4
   83128:	d1f7      	bne.n	8311a <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8312a:	789a      	ldrb	r2, [r3, #2]
   8312c:	4282      	cmp	r2, r0
   8312e:	d1f4      	bne.n	8311a <udc_update_iface_desc+0x26>
   83130:	78da      	ldrb	r2, [r3, #3]
   83132:	428a      	cmp	r2, r1
   83134:	d1f1      	bne.n	8311a <udc_update_iface_desc+0x26>
   83136:	b10d      	cbz	r5, 8313c <udc_update_iface_desc+0x48>
   83138:	4a09      	ldr	r2, [pc, #36]	; (83160 <udc_update_iface_desc+0x6c>)
   8313a:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   8313c:	2001      	movs	r0, #1
   8313e:	e002      	b.n	83146 <udc_update_iface_desc+0x52>
   83140:	4a07      	ldr	r2, [pc, #28]	; (83160 <udc_update_iface_desc+0x6c>)
   83142:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   83144:	2000      	movs	r0, #0
}
   83146:	bc70      	pop	{r4, r5, r6}
   83148:	4770      	bx	lr
		return false;
   8314a:	2000      	movs	r0, #0
   8314c:	4770      	bx	lr
		return false;
   8314e:	2000      	movs	r0, #0
}
   83150:	4770      	bx	lr
	return false; // Interface not found
   83152:	2000      	movs	r0, #0
   83154:	e7f7      	b.n	83146 <udc_update_iface_desc+0x52>
   83156:	bf00      	nop
   83158:	20002079 	.word	0x20002079
   8315c:	2000207c 	.word	0x2000207c
   83160:	20002080 	.word	0x20002080

00083164 <udc_iface_disable>:
{
   83164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83168:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8316a:	2100      	movs	r1, #0
   8316c:	4b12      	ldr	r3, [pc, #72]	; (831b8 <udc_iface_disable+0x54>)
   8316e:	4798      	blx	r3
   83170:	4680      	mov	r8, r0
   83172:	b1f0      	cbz	r0, 831b2 <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83174:	4b11      	ldr	r3, [pc, #68]	; (831bc <udc_iface_disable+0x58>)
   83176:	681b      	ldr	r3, [r3, #0]
   83178:	685b      	ldr	r3, [r3, #4]
   8317a:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8317e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   83182:	4798      	blx	r3
   83184:	4601      	mov	r1, r0
   83186:	4620      	mov	r0, r4
   83188:	4b0b      	ldr	r3, [pc, #44]	; (831b8 <udc_iface_disable+0x54>)
   8318a:	4798      	blx	r3
   8318c:	4680      	mov	r8, r0
   8318e:	b180      	cbz	r0, 831b2 <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83190:	4b0b      	ldr	r3, [pc, #44]	; (831c0 <udc_iface_disable+0x5c>)
   83192:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83194:	2605      	movs	r6, #5
   83196:	4d0b      	ldr	r5, [pc, #44]	; (831c4 <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   83198:	4f0b      	ldr	r7, [pc, #44]	; (831c8 <udc_iface_disable+0x64>)
   8319a:	e001      	b.n	831a0 <udc_iface_disable+0x3c>
   8319c:	7880      	ldrb	r0, [r0, #2]
   8319e:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   831a0:	4631      	mov	r1, r6
   831a2:	4620      	mov	r0, r4
   831a4:	47a8      	blx	r5
			if (NULL == ep_desc) {
   831a6:	4604      	mov	r4, r0
   831a8:	2800      	cmp	r0, #0
   831aa:	d1f7      	bne.n	8319c <udc_iface_disable+0x38>
	udi_api->disable();
   831ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
   831b0:	4798      	blx	r3
}
   831b2:	4640      	mov	r0, r8
   831b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   831b8:	000830f5 	.word	0x000830f5
   831bc:	2000207c 	.word	0x2000207c
   831c0:	20002080 	.word	0x20002080
   831c4:	000830a9 	.word	0x000830a9
   831c8:	00084d39 	.word	0x00084d39

000831cc <udc_iface_enable>:
{
   831cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   831d0:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   831d2:	4b10      	ldr	r3, [pc, #64]	; (83214 <udc_iface_enable+0x48>)
   831d4:	4798      	blx	r3
   831d6:	4603      	mov	r3, r0
   831d8:	b1c8      	cbz	r0, 8320e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   831da:	4b0f      	ldr	r3, [pc, #60]	; (83218 <udc_iface_enable+0x4c>)
   831dc:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   831de:	2605      	movs	r6, #5
   831e0:	4d0e      	ldr	r5, [pc, #56]	; (8321c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   831e2:	4f0f      	ldr	r7, [pc, #60]	; (83220 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   831e4:	4631      	mov	r1, r6
   831e6:	4620      	mov	r0, r4
   831e8:	47a8      	blx	r5
		if (NULL == ep_desc)
   831ea:	4604      	mov	r4, r0
   831ec:	b138      	cbz	r0, 831fe <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   831ee:	8882      	ldrh	r2, [r0, #4]
   831f0:	78c1      	ldrb	r1, [r0, #3]
   831f2:	7880      	ldrb	r0, [r0, #2]
   831f4:	47b8      	blx	r7
   831f6:	4603      	mov	r3, r0
   831f8:	2800      	cmp	r0, #0
   831fa:	d1f3      	bne.n	831e4 <udc_iface_enable+0x18>
   831fc:	e007      	b.n	8320e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   831fe:	4b09      	ldr	r3, [pc, #36]	; (83224 <udc_iface_enable+0x58>)
   83200:	681b      	ldr	r3, [r3, #0]
   83202:	685b      	ldr	r3, [r3, #4]
   83204:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   83208:	681b      	ldr	r3, [r3, #0]
   8320a:	4798      	blx	r3
   8320c:	4603      	mov	r3, r0
}
   8320e:	4618      	mov	r0, r3
   83210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83214:	000830f5 	.word	0x000830f5
   83218:	20002080 	.word	0x20002080
   8321c:	000830a9 	.word	0x000830a9
   83220:	0008507d 	.word	0x0008507d
   83224:	2000207c 	.word	0x2000207c

00083228 <udc_get_interface_desc>:
}
   83228:	4b01      	ldr	r3, [pc, #4]	; (83230 <udc_get_interface_desc+0x8>)
   8322a:	6818      	ldr	r0, [r3, #0]
   8322c:	4770      	bx	lr
   8322e:	bf00      	nop
   83230:	20002080 	.word	0x20002080

00083234 <udc_start>:
{
   83234:	b508      	push	{r3, lr}
	udd_enable();
   83236:	4b01      	ldr	r3, [pc, #4]	; (8323c <udc_start+0x8>)
   83238:	4798      	blx	r3
}
   8323a:	bd08      	pop	{r3, pc}
   8323c:	00084bb9 	.word	0x00084bb9

00083240 <udc_reset>:
{
   83240:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   83242:	4b0d      	ldr	r3, [pc, #52]	; (83278 <udc_reset+0x38>)
   83244:	781b      	ldrb	r3, [r3, #0]
   83246:	b183      	cbz	r3, 8326a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83248:	4b0c      	ldr	r3, [pc, #48]	; (8327c <udc_reset+0x3c>)
   8324a:	681b      	ldr	r3, [r3, #0]
   8324c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8324e:	791b      	ldrb	r3, [r3, #4]
   83250:	b15b      	cbz	r3, 8326a <udc_reset+0x2a>
   83252:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   83254:	4e0a      	ldr	r6, [pc, #40]	; (83280 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83256:	4d09      	ldr	r5, [pc, #36]	; (8327c <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   83258:	b2e0      	uxtb	r0, r4
   8325a:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8325c:	3401      	adds	r4, #1
   8325e:	682b      	ldr	r3, [r5, #0]
   83260:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   83262:	791a      	ldrb	r2, [r3, #4]
   83264:	b2e3      	uxtb	r3, r4
   83266:	429a      	cmp	r2, r3
   83268:	d8f6      	bhi.n	83258 <udc_reset+0x18>
	udc_num_configuration = 0;
   8326a:	2300      	movs	r3, #0
   8326c:	4a02      	ldr	r2, [pc, #8]	; (83278 <udc_reset+0x38>)
   8326e:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   83270:	4a04      	ldr	r2, [pc, #16]	; (83284 <udc_reset+0x44>)
   83272:	8013      	strh	r3, [r2, #0]
}
   83274:	bd70      	pop	{r4, r5, r6, pc}
   83276:	bf00      	nop
   83278:	20002079 	.word	0x20002079
   8327c:	2000207c 	.word	0x2000207c
   83280:	00083165 	.word	0x00083165
   83284:	20002074 	.word	0x20002074

00083288 <udc_sof_notify>:
{
   83288:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   8328a:	4b0e      	ldr	r3, [pc, #56]	; (832c4 <udc_sof_notify+0x3c>)
   8328c:	781b      	ldrb	r3, [r3, #0]
   8328e:	b1bb      	cbz	r3, 832c0 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83290:	4b0d      	ldr	r3, [pc, #52]	; (832c8 <udc_sof_notify+0x40>)
   83292:	681a      	ldr	r2, [r3, #0]
   83294:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83296:	791b      	ldrb	r3, [r3, #4]
   83298:	b193      	cbz	r3, 832c0 <udc_sof_notify+0x38>
   8329a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8329c:	4d0a      	ldr	r5, [pc, #40]	; (832c8 <udc_sof_notify+0x40>)
   8329e:	e006      	b.n	832ae <udc_sof_notify+0x26>
   832a0:	682a      	ldr	r2, [r5, #0]
   832a2:	3401      	adds	r4, #1
   832a4:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   832a6:	7919      	ldrb	r1, [r3, #4]
   832a8:	b2e3      	uxtb	r3, r4
   832aa:	4299      	cmp	r1, r3
   832ac:	d908      	bls.n	832c0 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   832ae:	b2e3      	uxtb	r3, r4
   832b0:	6852      	ldr	r2, [r2, #4]
   832b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   832b6:	691b      	ldr	r3, [r3, #16]
   832b8:	2b00      	cmp	r3, #0
   832ba:	d0f1      	beq.n	832a0 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   832bc:	4798      	blx	r3
   832be:	e7ef      	b.n	832a0 <udc_sof_notify+0x18>
}
   832c0:	bd38      	pop	{r3, r4, r5, pc}
   832c2:	bf00      	nop
   832c4:	20002079 	.word	0x20002079
   832c8:	2000207c 	.word	0x2000207c

000832cc <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   832cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   832d0:	4b91      	ldr	r3, [pc, #580]	; (83518 <udc_process_setup+0x24c>)
   832d2:	2200      	movs	r2, #0
   832d4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   832d6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   832d8:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   832da:	881b      	ldrh	r3, [r3, #0]
   832dc:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   832e0:	d01b      	beq.n	8331a <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   832e2:	4b8d      	ldr	r3, [pc, #564]	; (83518 <udc_process_setup+0x24c>)
   832e4:	781a      	ldrb	r2, [r3, #0]
   832e6:	f993 3000 	ldrsb.w	r3, [r3]
   832ea:	2b00      	cmp	r3, #0
   832ec:	db1b      	blt.n	83326 <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   832ee:	f012 0f60 	tst.w	r2, #96	; 0x60
   832f2:	f000 8147 	beq.w	83584 <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   832f6:	4b88      	ldr	r3, [pc, #544]	; (83518 <udc_process_setup+0x24c>)
   832f8:	781b      	ldrb	r3, [r3, #0]
   832fa:	f003 031f 	and.w	r3, r3, #31
   832fe:	2b01      	cmp	r3, #1
   83300:	f000 8245 	beq.w	8378e <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83304:	4b84      	ldr	r3, [pc, #528]	; (83518 <udc_process_setup+0x24c>)
   83306:	781b      	ldrb	r3, [r3, #0]
   83308:	f003 031f 	and.w	r3, r3, #31
   8330c:	2b02      	cmp	r3, #2
   8330e:	f000 8291 	beq.w	83834 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83312:	2300      	movs	r3, #0
#endif
}
   83314:	4618      	mov	r0, r3
   83316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8331a:	21ae      	movs	r1, #174	; 0xae
   8331c:	487f      	ldr	r0, [pc, #508]	; (8351c <udc_process_setup+0x250>)
   8331e:	4b80      	ldr	r3, [pc, #512]	; (83520 <udc_process_setup+0x254>)
   83320:	4798      	blx	r3
		return true;
   83322:	2301      	movs	r3, #1
   83324:	e7f6      	b.n	83314 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83326:	4b7c      	ldr	r3, [pc, #496]	; (83518 <udc_process_setup+0x24c>)
   83328:	88db      	ldrh	r3, [r3, #6]
   8332a:	2b00      	cmp	r3, #0
   8332c:	f000 82ae 	beq.w	8388c <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   83330:	f012 0f60 	tst.w	r2, #96	; 0x60
   83334:	d1df      	bne.n	832f6 <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83336:	f012 021f 	ands.w	r2, r2, #31
   8333a:	f040 80c1 	bne.w	834c0 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   8333e:	4a76      	ldr	r2, [pc, #472]	; (83518 <udc_process_setup+0x24c>)
   83340:	7852      	ldrb	r2, [r2, #1]
   83342:	2a06      	cmp	r2, #6
   83344:	d00b      	beq.n	8335e <udc_process_setup+0x92>
   83346:	2a08      	cmp	r2, #8
   83348:	f000 80b2 	beq.w	834b0 <udc_process_setup+0x1e4>
   8334c:	2a00      	cmp	r2, #0
   8334e:	d1d2      	bne.n	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83350:	2b02      	cmp	r3, #2
   83352:	d1d0      	bne.n	832f6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83354:	2102      	movs	r1, #2
   83356:	4873      	ldr	r0, [pc, #460]	; (83524 <udc_process_setup+0x258>)
   83358:	4b71      	ldr	r3, [pc, #452]	; (83520 <udc_process_setup+0x254>)
   8335a:	4798      	blx	r3
	return true;
   8335c:	e12f      	b.n	835be <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8335e:	4b6e      	ldr	r3, [pc, #440]	; (83518 <udc_process_setup+0x24c>)
   83360:	885a      	ldrh	r2, [r3, #2]
   83362:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83364:	0a13      	lsrs	r3, r2, #8
   83366:	3b01      	subs	r3, #1
   83368:	2b0e      	cmp	r3, #14
   8336a:	f200 8209 	bhi.w	83780 <udc_process_setup+0x4b4>
   8336e:	e8df f013 	tbh	[pc, r3, lsl #1]
   83372:	000f      	.short	0x000f
   83374:	007a0023 	.word	0x007a0023
   83378:	02070207 	.word	0x02070207
   8337c:	00520044 	.word	0x00520044
   83380:	02070207 	.word	0x02070207
   83384:	02070207 	.word	0x02070207
   83388:	02070207 	.word	0x02070207
   8338c:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   83390:	4b65      	ldr	r3, [pc, #404]	; (83528 <udc_process_setup+0x25c>)
   83392:	4798      	blx	r3
   83394:	b928      	cbnz	r0, 833a2 <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   83396:	4b65      	ldr	r3, [pc, #404]	; (8352c <udc_process_setup+0x260>)
   83398:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8339a:	7801      	ldrb	r1, [r0, #0]
   8339c:	4b60      	ldr	r3, [pc, #384]	; (83520 <udc_process_setup+0x254>)
   8339e:	4798      	blx	r3
   833a0:	e030      	b.n	83404 <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   833a2:	4b62      	ldr	r3, [pc, #392]	; (8352c <udc_process_setup+0x260>)
   833a4:	681a      	ldr	r2, [r3, #0]
   833a6:	2110      	movs	r1, #16
   833a8:	7091      	strb	r1, [r2, #2]
   833aa:	2102      	movs	r1, #2
   833ac:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   833ae:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   833b0:	7801      	ldrb	r1, [r0, #0]
   833b2:	4b5b      	ldr	r3, [pc, #364]	; (83520 <udc_process_setup+0x254>)
   833b4:	4798      	blx	r3
   833b6:	e025      	b.n	83404 <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   833b8:	4b5b      	ldr	r3, [pc, #364]	; (83528 <udc_process_setup+0x25c>)
   833ba:	4798      	blx	r3
   833bc:	b180      	cbz	r0, 833e0 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   833be:	4b5b      	ldr	r3, [pc, #364]	; (8352c <udc_process_setup+0x260>)
   833c0:	689b      	ldr	r3, [r3, #8]
   833c2:	7c5b      	ldrb	r3, [r3, #17]
   833c4:	42a3      	cmp	r3, r4
   833c6:	d996      	bls.n	832f6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   833c8:	4b58      	ldr	r3, [pc, #352]	; (8352c <udc_process_setup+0x260>)
   833ca:	691b      	ldr	r3, [r3, #16]
   833cc:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   833d0:	8841      	ldrh	r1, [r0, #2]
   833d2:	4b53      	ldr	r3, [pc, #332]	; (83520 <udc_process_setup+0x254>)
   833d4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   833d6:	4b50      	ldr	r3, [pc, #320]	; (83518 <udc_process_setup+0x24c>)
   833d8:	689b      	ldr	r3, [r3, #8]
   833da:	2202      	movs	r2, #2
   833dc:	705a      	strb	r2, [r3, #1]
		break;
   833de:	e011      	b.n	83404 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   833e0:	4b52      	ldr	r3, [pc, #328]	; (8352c <udc_process_setup+0x260>)
   833e2:	681b      	ldr	r3, [r3, #0]
   833e4:	7c5b      	ldrb	r3, [r3, #17]
   833e6:	42a3      	cmp	r3, r4
   833e8:	d985      	bls.n	832f6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   833ea:	4b50      	ldr	r3, [pc, #320]	; (8352c <udc_process_setup+0x260>)
   833ec:	685b      	ldr	r3, [r3, #4]
   833ee:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   833f2:	8841      	ldrh	r1, [r0, #2]
   833f4:	4b4a      	ldr	r3, [pc, #296]	; (83520 <udc_process_setup+0x254>)
   833f6:	4798      	blx	r3
   833f8:	e7ed      	b.n	833d6 <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   833fa:	4b4c      	ldr	r3, [pc, #304]	; (8352c <udc_process_setup+0x260>)
   833fc:	68d8      	ldr	r0, [r3, #12]
   833fe:	7801      	ldrb	r1, [r0, #0]
   83400:	4b47      	ldr	r3, [pc, #284]	; (83520 <udc_process_setup+0x254>)
   83402:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83404:	4b44      	ldr	r3, [pc, #272]	; (83518 <udc_process_setup+0x24c>)
   83406:	88da      	ldrh	r2, [r3, #6]
   83408:	899b      	ldrh	r3, [r3, #12]
   8340a:	4293      	cmp	r3, r2
   8340c:	f240 80d7 	bls.w	835be <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83410:	4b41      	ldr	r3, [pc, #260]	; (83518 <udc_process_setup+0x24c>)
   83412:	819a      	strh	r2, [r3, #12]
   83414:	e0d3      	b.n	835be <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   83416:	4b44      	ldr	r3, [pc, #272]	; (83528 <udc_process_setup+0x25c>)
   83418:	4798      	blx	r3
   8341a:	b988      	cbnz	r0, 83440 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   8341c:	4b43      	ldr	r3, [pc, #268]	; (8352c <udc_process_setup+0x260>)
   8341e:	689b      	ldr	r3, [r3, #8]
   83420:	7c5b      	ldrb	r3, [r3, #17]
   83422:	42a3      	cmp	r3, r4
   83424:	f67f af67 	bls.w	832f6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83428:	4b40      	ldr	r3, [pc, #256]	; (8352c <udc_process_setup+0x260>)
   8342a:	691b      	ldr	r3, [r3, #16]
   8342c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83430:	8841      	ldrh	r1, [r0, #2]
   83432:	4b3b      	ldr	r3, [pc, #236]	; (83520 <udc_process_setup+0x254>)
   83434:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83436:	4b38      	ldr	r3, [pc, #224]	; (83518 <udc_process_setup+0x24c>)
   83438:	689b      	ldr	r3, [r3, #8]
   8343a:	2207      	movs	r2, #7
   8343c:	705a      	strb	r2, [r3, #1]
		break;
   8343e:	e7e1      	b.n	83404 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   83440:	4b3a      	ldr	r3, [pc, #232]	; (8352c <udc_process_setup+0x260>)
   83442:	681b      	ldr	r3, [r3, #0]
   83444:	7c5b      	ldrb	r3, [r3, #17]
   83446:	42a3      	cmp	r3, r4
   83448:	f67f af55 	bls.w	832f6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8344c:	4b37      	ldr	r3, [pc, #220]	; (8352c <udc_process_setup+0x260>)
   8344e:	685b      	ldr	r3, [r3, #4]
   83450:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83454:	8841      	ldrh	r1, [r0, #2]
   83456:	4b32      	ldr	r3, [pc, #200]	; (83520 <udc_process_setup+0x254>)
   83458:	4798      	blx	r3
   8345a:	e7ec      	b.n	83436 <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   8345c:	2121      	movs	r1, #33	; 0x21
   8345e:	4834      	ldr	r0, [pc, #208]	; (83530 <udc_process_setup+0x264>)
   83460:	4b2f      	ldr	r3, [pc, #188]	; (83520 <udc_process_setup+0x254>)
   83462:	4798      	blx	r3
		break;
   83464:	e7ce      	b.n	83404 <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83466:	b2d2      	uxtb	r2, r2
   83468:	2a03      	cmp	r2, #3
   8346a:	f63f af44 	bhi.w	832f6 <udc_process_setup+0x2a>
   8346e:	e8df f002 	tbb	[pc, r2]
   83472:	1914      	.short	0x1914
   83474:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83476:	2020      	movs	r0, #32
   83478:	4a2e      	ldr	r2, [pc, #184]	; (83534 <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   8347a:	4613      	mov	r3, r2
   8347c:	492e      	ldr	r1, [pc, #184]	; (83538 <udc_process_setup+0x26c>)
   8347e:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83480:	f813 4b01 	ldrb.w	r4, [r3], #1
   83484:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   83488:	429a      	cmp	r2, r3
   8348a:	d1f9      	bne.n	83480 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8348c:	0041      	lsls	r1, r0, #1
   8348e:	3102      	adds	r1, #2
   83490:	4829      	ldr	r0, [pc, #164]	; (83538 <udc_process_setup+0x26c>)
   83492:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   83494:	4b22      	ldr	r3, [pc, #136]	; (83520 <udc_process_setup+0x254>)
   83496:	4798      	blx	r3
   83498:	e7b4      	b.n	83404 <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8349a:	2104      	movs	r1, #4
   8349c:	4827      	ldr	r0, [pc, #156]	; (8353c <udc_process_setup+0x270>)
   8349e:	4b20      	ldr	r3, [pc, #128]	; (83520 <udc_process_setup+0x254>)
   834a0:	4798      	blx	r3
	if (str_length) {
   834a2:	e7af      	b.n	83404 <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   834a4:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   834a6:	4a26      	ldr	r2, [pc, #152]	; (83540 <udc_process_setup+0x274>)
   834a8:	e7e7      	b.n	8347a <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   834aa:	2012      	movs	r0, #18
		str = udc_string_product_name;
   834ac:	4a25      	ldr	r2, [pc, #148]	; (83544 <udc_process_setup+0x278>)
   834ae:	e7e4      	b.n	8347a <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   834b0:	2b01      	cmp	r3, #1
   834b2:	f47f af20 	bne.w	832f6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   834b6:	2101      	movs	r1, #1
   834b8:	4823      	ldr	r0, [pc, #140]	; (83548 <udc_process_setup+0x27c>)
   834ba:	4b19      	ldr	r3, [pc, #100]	; (83520 <udc_process_setup+0x254>)
   834bc:	4798      	blx	r3
	return true;
   834be:	e07e      	b.n	835be <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   834c0:	2a01      	cmp	r2, #1
   834c2:	d149      	bne.n	83558 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   834c4:	4a14      	ldr	r2, [pc, #80]	; (83518 <udc_process_setup+0x24c>)
   834c6:	7852      	ldrb	r2, [r2, #1]
   834c8:	2a0a      	cmp	r2, #10
   834ca:	f47f af14 	bne.w	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   834ce:	2b01      	cmp	r3, #1
   834d0:	f47f af11 	bne.w	832f6 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   834d4:	4b1c      	ldr	r3, [pc, #112]	; (83548 <udc_process_setup+0x27c>)
   834d6:	781b      	ldrb	r3, [r3, #0]
   834d8:	2b00      	cmp	r3, #0
   834da:	f43f af0c 	beq.w	832f6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   834de:	4b0e      	ldr	r3, [pc, #56]	; (83518 <udc_process_setup+0x24c>)
   834e0:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   834e2:	4b1a      	ldr	r3, [pc, #104]	; (8354c <udc_process_setup+0x280>)
   834e4:	681d      	ldr	r5, [r3, #0]
   834e6:	682b      	ldr	r3, [r5, #0]
   834e8:	791b      	ldrb	r3, [r3, #4]
   834ea:	42a3      	cmp	r3, r4
   834ec:	f67f af03 	bls.w	832f6 <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   834f0:	2100      	movs	r1, #0
   834f2:	4620      	mov	r0, r4
   834f4:	4b16      	ldr	r3, [pc, #88]	; (83550 <udc_process_setup+0x284>)
   834f6:	4798      	blx	r3
   834f8:	2800      	cmp	r0, #0
   834fa:	f43f aefc 	beq.w	832f6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   834fe:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   83500:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   83504:	68db      	ldr	r3, [r3, #12]
   83506:	4798      	blx	r3
   83508:	4b12      	ldr	r3, [pc, #72]	; (83554 <udc_process_setup+0x288>)
   8350a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   8350c:	2101      	movs	r1, #1
   8350e:	4618      	mov	r0, r3
   83510:	4b03      	ldr	r3, [pc, #12]	; (83520 <udc_process_setup+0x254>)
   83512:	4798      	blx	r3
	return true;
   83514:	e053      	b.n	835be <udc_process_setup+0x2f2>
   83516:	bf00      	nop
   83518:	2000269c 	.word	0x2000269c
   8351c:	200008d8 	.word	0x200008d8
   83520:	00084d2d 	.word	0x00084d2d
   83524:	20002074 	.word	0x20002074
   83528:	00084cc5 	.word	0x00084cc5
   8352c:	200001d0 	.word	0x200001d0
   83530:	0008cacc 	.word	0x0008cacc
   83534:	20000988 	.word	0x20000988
   83538:	20000864 	.word	0x20000864
   8353c:	200008a8 	.word	0x200008a8
   83540:	200008ac 	.word	0x200008ac
   83544:	200008c4 	.word	0x200008c4
   83548:	20002079 	.word	0x20002079
   8354c:	2000207c 	.word	0x2000207c
   83550:	000830f5 	.word	0x000830f5
   83554:	20002078 	.word	0x20002078
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83558:	2a02      	cmp	r2, #2
   8355a:	f47f aecc 	bne.w	832f6 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8355e:	4a93      	ldr	r2, [pc, #588]	; (837ac <udc_process_setup+0x4e0>)
   83560:	7852      	ldrb	r2, [r2, #1]
   83562:	2a00      	cmp	r2, #0
   83564:	f47f aec7 	bne.w	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83568:	2b02      	cmp	r3, #2
   8356a:	f47f aec4 	bne.w	832f6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8356e:	4b8f      	ldr	r3, [pc, #572]	; (837ac <udc_process_setup+0x4e0>)
   83570:	7918      	ldrb	r0, [r3, #4]
   83572:	4b8f      	ldr	r3, [pc, #572]	; (837b0 <udc_process_setup+0x4e4>)
   83574:	4798      	blx	r3
   83576:	4b8f      	ldr	r3, [pc, #572]	; (837b4 <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83578:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8357a:	2102      	movs	r1, #2
   8357c:	4618      	mov	r0, r3
   8357e:	4b8e      	ldr	r3, [pc, #568]	; (837b8 <udc_process_setup+0x4ec>)
   83580:	4798      	blx	r3
	return true;
   83582:	e01c      	b.n	835be <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83584:	f012 021f 	ands.w	r2, r2, #31
   83588:	f040 80b1 	bne.w	836ee <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   8358c:	4b87      	ldr	r3, [pc, #540]	; (837ac <udc_process_setup+0x4e0>)
   8358e:	785b      	ldrb	r3, [r3, #1]
   83590:	3b01      	subs	r3, #1
   83592:	2b08      	cmp	r3, #8
   83594:	f200 80ab 	bhi.w	836ee <udc_process_setup+0x422>
   83598:	e8df f013 	tbh	[pc, r3, lsl #1]
   8359c:	00a90013 	.word	0x00a90013
   835a0:	00a90023 	.word	0x00a90023
   835a4:	00a90009 	.word	0x00a90009
   835a8:	00a900a9 	.word	0x00a900a9
   835ac:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   835ae:	4b7f      	ldr	r3, [pc, #508]	; (837ac <udc_process_setup+0x4e0>)
   835b0:	88db      	ldrh	r3, [r3, #6]
   835b2:	2b00      	cmp	r3, #0
   835b4:	f47f ae9f 	bne.w	832f6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   835b8:	4b7c      	ldr	r3, [pc, #496]	; (837ac <udc_process_setup+0x4e0>)
   835ba:	4a80      	ldr	r2, [pc, #512]	; (837bc <udc_process_setup+0x4f0>)
   835bc:	611a      	str	r2, [r3, #16]
			return true;
   835be:	2301      	movs	r3, #1
   835c0:	e6a8      	b.n	83314 <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   835c2:	4b7a      	ldr	r3, [pc, #488]	; (837ac <udc_process_setup+0x4e0>)
   835c4:	88db      	ldrh	r3, [r3, #6]
   835c6:	2b00      	cmp	r3, #0
   835c8:	f47f ae95 	bne.w	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   835cc:	4b77      	ldr	r3, [pc, #476]	; (837ac <udc_process_setup+0x4e0>)
   835ce:	885b      	ldrh	r3, [r3, #2]
   835d0:	2b01      	cmp	r3, #1
   835d2:	f47f ae90 	bne.w	832f6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   835d6:	4a7a      	ldr	r2, [pc, #488]	; (837c0 <udc_process_setup+0x4f4>)
   835d8:	8813      	ldrh	r3, [r2, #0]
   835da:	f023 0302 	bic.w	r3, r3, #2
   835de:	8013      	strh	r3, [r2, #0]
		return true;
   835e0:	e7ed      	b.n	835be <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   835e2:	4b72      	ldr	r3, [pc, #456]	; (837ac <udc_process_setup+0x4e0>)
   835e4:	88db      	ldrh	r3, [r3, #6]
   835e6:	2b00      	cmp	r3, #0
   835e8:	f47f ae85 	bne.w	832f6 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   835ec:	4b6f      	ldr	r3, [pc, #444]	; (837ac <udc_process_setup+0x4e0>)
   835ee:	885b      	ldrh	r3, [r3, #2]
   835f0:	2b02      	cmp	r3, #2
   835f2:	f47f ae80 	bne.w	832f6 <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   835f6:	4b73      	ldr	r3, [pc, #460]	; (837c4 <udc_process_setup+0x4f8>)
   835f8:	4798      	blx	r3
   835fa:	2800      	cmp	r0, #0
   835fc:	f43f ae7b 	beq.w	832f6 <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83600:	4b6a      	ldr	r3, [pc, #424]	; (837ac <udc_process_setup+0x4e0>)
   83602:	791b      	ldrb	r3, [r3, #4]
   83604:	2b00      	cmp	r3, #0
   83606:	f47f ae76 	bne.w	832f6 <udc_process_setup+0x2a>
		udc_reset();
   8360a:	4b6f      	ldr	r3, [pc, #444]	; (837c8 <udc_process_setup+0x4fc>)
   8360c:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8360e:	4b67      	ldr	r3, [pc, #412]	; (837ac <udc_process_setup+0x4e0>)
   83610:	889b      	ldrh	r3, [r3, #4]
   83612:	0a1b      	lsrs	r3, r3, #8
   83614:	3b01      	subs	r3, #1
   83616:	2b03      	cmp	r3, #3
   83618:	f200 80b7 	bhi.w	8378a <udc_process_setup+0x4be>
   8361c:	e8df f003 	tbb	[pc, r3]
   83620:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83624:	4b61      	ldr	r3, [pc, #388]	; (837ac <udc_process_setup+0x4e0>)
   83626:	4a69      	ldr	r2, [pc, #420]	; (837cc <udc_process_setup+0x500>)
   83628:	611a      	str	r2, [r3, #16]
			return true;
   8362a:	e7c8      	b.n	835be <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8362c:	4b5f      	ldr	r3, [pc, #380]	; (837ac <udc_process_setup+0x4e0>)
   8362e:	4a68      	ldr	r2, [pc, #416]	; (837d0 <udc_process_setup+0x504>)
   83630:	611a      	str	r2, [r3, #16]
			return true;
   83632:	e7c4      	b.n	835be <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83634:	4b5d      	ldr	r3, [pc, #372]	; (837ac <udc_process_setup+0x4e0>)
   83636:	4a67      	ldr	r2, [pc, #412]	; (837d4 <udc_process_setup+0x508>)
   83638:	611a      	str	r2, [r3, #16]
			return true;
   8363a:	e7c0      	b.n	835be <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8363c:	4b5b      	ldr	r3, [pc, #364]	; (837ac <udc_process_setup+0x4e0>)
   8363e:	4a66      	ldr	r2, [pc, #408]	; (837d8 <udc_process_setup+0x50c>)
   83640:	611a      	str	r2, [r3, #16]
			return true;
   83642:	e7bc      	b.n	835be <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   83644:	4b59      	ldr	r3, [pc, #356]	; (837ac <udc_process_setup+0x4e0>)
   83646:	88db      	ldrh	r3, [r3, #6]
   83648:	2b00      	cmp	r3, #0
   8364a:	f47f ae54 	bne.w	832f6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   8364e:	4b63      	ldr	r3, [pc, #396]	; (837dc <udc_process_setup+0x510>)
   83650:	4798      	blx	r3
   83652:	2800      	cmp	r0, #0
   83654:	f43f ae4f 	beq.w	832f6 <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   83658:	4b5a      	ldr	r3, [pc, #360]	; (837c4 <udc_process_setup+0x4f8>)
   8365a:	4798      	blx	r3
   8365c:	2800      	cmp	r0, #0
   8365e:	d034      	beq.n	836ca <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   83660:	4b5f      	ldr	r3, [pc, #380]	; (837e0 <udc_process_setup+0x514>)
   83662:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83664:	7c5a      	ldrb	r2, [r3, #17]
   83666:	4b51      	ldr	r3, [pc, #324]	; (837ac <udc_process_setup+0x4e0>)
   83668:	789b      	ldrb	r3, [r3, #2]
   8366a:	429a      	cmp	r2, r3
   8366c:	f4ff ae43 	bcc.w	832f6 <udc_process_setup+0x2a>
	udc_reset();
   83670:	4b55      	ldr	r3, [pc, #340]	; (837c8 <udc_process_setup+0x4fc>)
   83672:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83674:	4b4d      	ldr	r3, [pc, #308]	; (837ac <udc_process_setup+0x4e0>)
   83676:	789b      	ldrb	r3, [r3, #2]
   83678:	4a5a      	ldr	r2, [pc, #360]	; (837e4 <udc_process_setup+0x518>)
   8367a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   8367c:	2b00      	cmp	r3, #0
   8367e:	d09e      	beq.n	835be <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   83680:	4b50      	ldr	r3, [pc, #320]	; (837c4 <udc_process_setup+0x4f8>)
   83682:	4798      	blx	r3
   83684:	2800      	cmp	r0, #0
   83686:	d028      	beq.n	836da <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83688:	4b56      	ldr	r3, [pc, #344]	; (837e4 <udc_process_setup+0x518>)
   8368a:	781b      	ldrb	r3, [r3, #0]
   8368c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   83690:	3a01      	subs	r2, #1
   83692:	4b53      	ldr	r3, [pc, #332]	; (837e0 <udc_process_setup+0x514>)
   83694:	691b      	ldr	r3, [r3, #16]
   83696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8369a:	4a53      	ldr	r2, [pc, #332]	; (837e8 <udc_process_setup+0x51c>)
   8369c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8369e:	681b      	ldr	r3, [r3, #0]
   836a0:	791b      	ldrb	r3, [r3, #4]
   836a2:	2b00      	cmp	r3, #0
   836a4:	d08b      	beq.n	835be <udc_process_setup+0x2f2>
   836a6:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   836a8:	4626      	mov	r6, r4
   836aa:	4d50      	ldr	r5, [pc, #320]	; (837ec <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   836ac:	4f4e      	ldr	r7, [pc, #312]	; (837e8 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   836ae:	4631      	mov	r1, r6
   836b0:	b2e0      	uxtb	r0, r4
   836b2:	47a8      	blx	r5
   836b4:	2800      	cmp	r0, #0
   836b6:	f43f ae1e 	beq.w	832f6 <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   836ba:	3401      	adds	r4, #1
   836bc:	683b      	ldr	r3, [r7, #0]
   836be:	681b      	ldr	r3, [r3, #0]
   836c0:	791a      	ldrb	r2, [r3, #4]
   836c2:	b2e3      	uxtb	r3, r4
   836c4:	429a      	cmp	r2, r3
   836c6:	d8f2      	bhi.n	836ae <udc_process_setup+0x3e2>
   836c8:	e779      	b.n	835be <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   836ca:	4b45      	ldr	r3, [pc, #276]	; (837e0 <udc_process_setup+0x514>)
   836cc:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836ce:	7c5a      	ldrb	r2, [r3, #17]
   836d0:	4b36      	ldr	r3, [pc, #216]	; (837ac <udc_process_setup+0x4e0>)
   836d2:	789b      	ldrb	r3, [r3, #2]
   836d4:	429a      	cmp	r2, r3
   836d6:	d2cb      	bcs.n	83670 <udc_process_setup+0x3a4>
   836d8:	e60d      	b.n	832f6 <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   836da:	4b42      	ldr	r3, [pc, #264]	; (837e4 <udc_process_setup+0x518>)
   836dc:	781b      	ldrb	r3, [r3, #0]
   836de:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   836e2:	3a01      	subs	r2, #1
   836e4:	4b3e      	ldr	r3, [pc, #248]	; (837e0 <udc_process_setup+0x514>)
   836e6:	685b      	ldr	r3, [r3, #4]
   836e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   836ec:	e7d5      	b.n	8369a <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   836ee:	2a01      	cmp	r2, #1
   836f0:	d01a      	beq.n	83728 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   836f2:	2a02      	cmp	r2, #2
   836f4:	f47f adff 	bne.w	832f6 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   836f8:	4b2c      	ldr	r3, [pc, #176]	; (837ac <udc_process_setup+0x4e0>)
   836fa:	785b      	ldrb	r3, [r3, #1]
   836fc:	2b01      	cmp	r3, #1
   836fe:	d031      	beq.n	83764 <udc_process_setup+0x498>
   83700:	2b03      	cmp	r3, #3
   83702:	f47f adf8 	bne.w	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   83706:	4a29      	ldr	r2, [pc, #164]	; (837ac <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83708:	88d3      	ldrh	r3, [r2, #6]
   8370a:	8852      	ldrh	r2, [r2, #2]
   8370c:	4313      	orrs	r3, r2
   8370e:	b29b      	uxth	r3, r3
   83710:	2b00      	cmp	r3, #0
   83712:	f47f adf0 	bne.w	832f6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83716:	4c25      	ldr	r4, [pc, #148]	; (837ac <udc_process_setup+0x4e0>)
   83718:	7920      	ldrb	r0, [r4, #4]
   8371a:	4b35      	ldr	r3, [pc, #212]	; (837f0 <udc_process_setup+0x524>)
   8371c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8371e:	7920      	ldrb	r0, [r4, #4]
   83720:	4b34      	ldr	r3, [pc, #208]	; (837f4 <udc_process_setup+0x528>)
   83722:	4798      	blx	r3
   83724:	4603      	mov	r3, r0
   83726:	e02c      	b.n	83782 <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   83728:	4b20      	ldr	r3, [pc, #128]	; (837ac <udc_process_setup+0x4e0>)
   8372a:	785b      	ldrb	r3, [r3, #1]
   8372c:	2b0b      	cmp	r3, #11
   8372e:	f47f ade2 	bne.w	832f6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   83732:	4b1e      	ldr	r3, [pc, #120]	; (837ac <udc_process_setup+0x4e0>)
   83734:	88db      	ldrh	r3, [r3, #6]
   83736:	2b00      	cmp	r3, #0
   83738:	f47f addd 	bne.w	832f6 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   8373c:	4b29      	ldr	r3, [pc, #164]	; (837e4 <udc_process_setup+0x518>)
   8373e:	781b      	ldrb	r3, [r3, #0]
   83740:	2b00      	cmp	r3, #0
   83742:	f43f add8 	beq.w	832f6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83746:	4b19      	ldr	r3, [pc, #100]	; (837ac <udc_process_setup+0x4e0>)
   83748:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8374a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   8374c:	4620      	mov	r0, r4
   8374e:	4b2a      	ldr	r3, [pc, #168]	; (837f8 <udc_process_setup+0x52c>)
   83750:	4798      	blx	r3
   83752:	2800      	cmp	r0, #0
   83754:	f43f adcf 	beq.w	832f6 <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   83758:	b2e9      	uxtb	r1, r5
   8375a:	4620      	mov	r0, r4
   8375c:	4b23      	ldr	r3, [pc, #140]	; (837ec <udc_process_setup+0x520>)
   8375e:	4798      	blx	r3
   83760:	4603      	mov	r3, r0
   83762:	e00e      	b.n	83782 <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   83764:	4a11      	ldr	r2, [pc, #68]	; (837ac <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83766:	88d3      	ldrh	r3, [r2, #6]
   83768:	8852      	ldrh	r2, [r2, #2]
   8376a:	4313      	orrs	r3, r2
   8376c:	b29b      	uxth	r3, r3
   8376e:	2b00      	cmp	r3, #0
   83770:	f47f adc1 	bne.w	832f6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83774:	4b0d      	ldr	r3, [pc, #52]	; (837ac <udc_process_setup+0x4e0>)
   83776:	7918      	ldrb	r0, [r3, #4]
   83778:	4b20      	ldr	r3, [pc, #128]	; (837fc <udc_process_setup+0x530>)
   8377a:	4798      	blx	r3
   8377c:	4603      	mov	r3, r0
   8377e:	e000      	b.n	83782 <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83780:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   83782:	2b00      	cmp	r3, #0
   83784:	f47f adc6 	bne.w	83314 <udc_process_setup+0x48>
   83788:	e5b5      	b.n	832f6 <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8378a:	2300      	movs	r3, #0
   8378c:	e7f9      	b.n	83782 <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   8378e:	4b15      	ldr	r3, [pc, #84]	; (837e4 <udc_process_setup+0x518>)
   83790:	781b      	ldrb	r3, [r3, #0]
   83792:	2b00      	cmp	r3, #0
   83794:	d07c      	beq.n	83890 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83796:	4b05      	ldr	r3, [pc, #20]	; (837ac <udc_process_setup+0x4e0>)
   83798:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8379a:	4b13      	ldr	r3, [pc, #76]	; (837e8 <udc_process_setup+0x51c>)
   8379c:	681d      	ldr	r5, [r3, #0]
   8379e:	682b      	ldr	r3, [r5, #0]
   837a0:	791b      	ldrb	r3, [r3, #4]
   837a2:	42a3      	cmp	r3, r4
   837a4:	d82c      	bhi.n	83800 <udc_process_setup+0x534>
	return false;
   837a6:	2300      	movs	r3, #0
   837a8:	e5b4      	b.n	83314 <udc_process_setup+0x48>
   837aa:	bf00      	nop
   837ac:	2000269c 	.word	0x2000269c
   837b0:	00084d91 	.word	0x00084d91
   837b4:	20002076 	.word	0x20002076
   837b8:	00084d2d 	.word	0x00084d2d
   837bc:	000830dd 	.word	0x000830dd
   837c0:	20002074 	.word	0x20002074
   837c4:	00084cc5 	.word	0x00084cc5
   837c8:	00083241 	.word	0x00083241
   837cc:	00085379 	.word	0x00085379
   837d0:	0008539d 	.word	0x0008539d
   837d4:	000853c1 	.word	0x000853c1
   837d8:	000853d9 	.word	0x000853d9
   837dc:	00084cfd 	.word	0x00084cfd
   837e0:	200001d0 	.word	0x200001d0
   837e4:	20002079 	.word	0x20002079
   837e8:	2000207c 	.word	0x2000207c
   837ec:	000831cd 	.word	0x000831cd
   837f0:	00085305 	.word	0x00085305
   837f4:	00084dc5 	.word	0x00084dc5
   837f8:	00083165 	.word	0x00083165
   837fc:	00084e89 	.word	0x00084e89
	if (!udc_update_iface_desc(iface_num, 0)) {
   83800:	2100      	movs	r1, #0
   83802:	4620      	mov	r0, r4
   83804:	4b23      	ldr	r3, [pc, #140]	; (83894 <udc_process_setup+0x5c8>)
   83806:	4798      	blx	r3
   83808:	2800      	cmp	r0, #0
   8380a:	f43f ad7b 	beq.w	83304 <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8380e:	686b      	ldr	r3, [r5, #4]
   83810:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83814:	68eb      	ldr	r3, [r5, #12]
   83816:	4798      	blx	r3
   83818:	4601      	mov	r1, r0
   8381a:	4620      	mov	r0, r4
   8381c:	4b1d      	ldr	r3, [pc, #116]	; (83894 <udc_process_setup+0x5c8>)
   8381e:	4798      	blx	r3
   83820:	2800      	cmp	r0, #0
   83822:	f43f ad6f 	beq.w	83304 <udc_process_setup+0x38>
	return udi_api->setup();
   83826:	68ab      	ldr	r3, [r5, #8]
   83828:	4798      	blx	r3
		if (udc_req_iface()) {
   8382a:	4603      	mov	r3, r0
   8382c:	2800      	cmp	r0, #0
   8382e:	f47f ad71 	bne.w	83314 <udc_process_setup+0x48>
   83832:	e567      	b.n	83304 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   83834:	4b18      	ldr	r3, [pc, #96]	; (83898 <udc_process_setup+0x5cc>)
   83836:	781b      	ldrb	r3, [r3, #0]
   83838:	b323      	cbz	r3, 83884 <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8383a:	4b18      	ldr	r3, [pc, #96]	; (8389c <udc_process_setup+0x5d0>)
   8383c:	681a      	ldr	r2, [r3, #0]
   8383e:	6813      	ldr	r3, [r2, #0]
   83840:	791b      	ldrb	r3, [r3, #4]
   83842:	b30b      	cbz	r3, 83888 <udc_process_setup+0x5bc>
   83844:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83846:	4e13      	ldr	r6, [pc, #76]	; (83894 <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83848:	4f14      	ldr	r7, [pc, #80]	; (8389c <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8384a:	b2ec      	uxtb	r4, r5
   8384c:	6853      	ldr	r3, [r2, #4]
   8384e:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83852:	f8d8 300c 	ldr.w	r3, [r8, #12]
   83856:	4798      	blx	r3
   83858:	4601      	mov	r1, r0
   8385a:	4620      	mov	r0, r4
   8385c:	47b0      	blx	r6
   8385e:	4603      	mov	r3, r0
   83860:	2800      	cmp	r0, #0
   83862:	f43f ad57 	beq.w	83314 <udc_process_setup+0x48>
		if (udi_api->setup()) {
   83866:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8386a:	4798      	blx	r3
   8386c:	4603      	mov	r3, r0
   8386e:	2800      	cmp	r0, #0
   83870:	f47f ad50 	bne.w	83314 <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83874:	683a      	ldr	r2, [r7, #0]
   83876:	3501      	adds	r5, #1
   83878:	6811      	ldr	r1, [r2, #0]
   8387a:	7908      	ldrb	r0, [r1, #4]
   8387c:	b2e9      	uxtb	r1, r5
   8387e:	4288      	cmp	r0, r1
   83880:	d8e3      	bhi.n	8384a <udc_process_setup+0x57e>
   83882:	e547      	b.n	83314 <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   83884:	2300      	movs	r3, #0
   83886:	e545      	b.n	83314 <udc_process_setup+0x48>
	return false;
   83888:	2300      	movs	r3, #0
   8388a:	e543      	b.n	83314 <udc_process_setup+0x48>
			return false; // Error from USB host
   8388c:	2300      	movs	r3, #0
   8388e:	e541      	b.n	83314 <udc_process_setup+0x48>
	return false;
   83890:	2300      	movs	r3, #0
   83892:	e53f      	b.n	83314 <udc_process_setup+0x48>
   83894:	000830f5 	.word	0x000830f5
   83898:	20002079 	.word	0x20002079
   8389c:	2000207c 	.word	0x2000207c

000838a0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   838a0:	4b0b      	ldr	r3, [pc, #44]	; (838d0 <cpu_irq_enter_critical+0x30>)
   838a2:	681b      	ldr	r3, [r3, #0]
   838a4:	b95b      	cbnz	r3, 838be <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   838a6:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   838aa:	b96b      	cbnz	r3, 838c8 <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   838ac:	b672      	cpsid	i
   838ae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   838b2:	4b08      	ldr	r3, [pc, #32]	; (838d4 <cpu_irq_enter_critical+0x34>)
   838b4:	2200      	movs	r2, #0
   838b6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   838b8:	4b07      	ldr	r3, [pc, #28]	; (838d8 <cpu_irq_enter_critical+0x38>)
   838ba:	2201      	movs	r2, #1
   838bc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   838be:	4a04      	ldr	r2, [pc, #16]	; (838d0 <cpu_irq_enter_critical+0x30>)
   838c0:	6813      	ldr	r3, [r2, #0]
   838c2:	3301      	adds	r3, #1
   838c4:	6013      	str	r3, [r2, #0]
}
   838c6:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   838c8:	4b03      	ldr	r3, [pc, #12]	; (838d8 <cpu_irq_enter_critical+0x38>)
   838ca:	2200      	movs	r2, #0
   838cc:	701a      	strb	r2, [r3, #0]
   838ce:	e7f6      	b.n	838be <cpu_irq_enter_critical+0x1e>
   838d0:	20002084 	.word	0x20002084
   838d4:	20000982 	.word	0x20000982
   838d8:	20002088 	.word	0x20002088

000838dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   838dc:	4b07      	ldr	r3, [pc, #28]	; (838fc <cpu_irq_leave_critical+0x20>)
   838de:	681a      	ldr	r2, [r3, #0]
   838e0:	3a01      	subs	r2, #1
   838e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   838e4:	681b      	ldr	r3, [r3, #0]
   838e6:	b943      	cbnz	r3, 838fa <cpu_irq_leave_critical+0x1e>
   838e8:	4b05      	ldr	r3, [pc, #20]	; (83900 <cpu_irq_leave_critical+0x24>)
   838ea:	781b      	ldrb	r3, [r3, #0]
   838ec:	b12b      	cbz	r3, 838fa <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   838ee:	4b05      	ldr	r3, [pc, #20]	; (83904 <cpu_irq_leave_critical+0x28>)
   838f0:	2201      	movs	r2, #1
   838f2:	701a      	strb	r2, [r3, #0]
   838f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   838f8:	b662      	cpsie	i
	}
}
   838fa:	4770      	bx	lr
   838fc:	20002084 	.word	0x20002084
   83900:	20002088 	.word	0x20002088
   83904:	20000982 	.word	0x20000982

00083908 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   8390c:	b980      	cbnz	r0, 83930 <_read+0x28>
   8390e:	460c      	mov	r4, r1
   83910:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   83912:	2a00      	cmp	r2, #0
   83914:	dd0f      	ble.n	83936 <_read+0x2e>
   83916:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83918:	4e08      	ldr	r6, [pc, #32]	; (8393c <_read+0x34>)
   8391a:	4d09      	ldr	r5, [pc, #36]	; (83940 <_read+0x38>)
   8391c:	6830      	ldr	r0, [r6, #0]
   8391e:	682b      	ldr	r3, [r5, #0]
   83920:	4621      	mov	r1, r4
   83922:	4798      	blx	r3
		ptr++;
   83924:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83926:	42bc      	cmp	r4, r7
   83928:	d1f8      	bne.n	8391c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8392a:	4640      	mov	r0, r8
   8392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83930:	f04f 38ff 	mov.w	r8, #4294967295
   83934:	e7f9      	b.n	8392a <_read+0x22>
	int nChars = 0;
   83936:	4680      	mov	r8, r0
   83938:	e7f7      	b.n	8392a <_read+0x22>
   8393a:	bf00      	nop
   8393c:	20002698 	.word	0x20002698
   83940:	20002690 	.word	0x20002690

00083944 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83944:	3801      	subs	r0, #1
   83946:	2802      	cmp	r0, #2
   83948:	d81a      	bhi.n	83980 <_write+0x3c>
{
   8394a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8394e:	460e      	mov	r6, r1
   83950:	4617      	mov	r7, r2
		return -1;
	}

	for (; len != 0; --len) {
   83952:	b1c2      	cbz	r2, 83986 <_write+0x42>
   83954:	1e4d      	subs	r5, r1, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83956:	f8df 903c 	ldr.w	r9, [pc, #60]	; 83994 <_write+0x50>
   8395a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83998 <_write+0x54>
   8395e:	f8d9 0000 	ldr.w	r0, [r9]
   83962:	462c      	mov	r4, r5
   83964:	f8d8 3000 	ldr.w	r3, [r8]
   83968:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8396c:	4798      	blx	r3
   8396e:	2800      	cmp	r0, #0
   83970:	db0b      	blt.n	8398a <_write+0x46>
			return -1;
		}
		++nChars;
   83972:	3402      	adds	r4, #2
   83974:	1ba0      	subs	r0, r4, r6
	for (; len != 0; --len) {
   83976:	43eb      	mvns	r3, r5
   83978:	443b      	add	r3, r7
   8397a:	42f3      	cmn	r3, r6
   8397c:	d1ef      	bne.n	8395e <_write+0x1a>
   8397e:	e006      	b.n	8398e <_write+0x4a>
		return -1;
   83980:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return nChars;
}
   83984:	4770      	bx	lr
	int nChars = 0;
   83986:	4610      	mov	r0, r2
   83988:	e001      	b.n	8398e <_write+0x4a>
			return -1;
   8398a:	f04f 30ff 	mov.w	r0, #4294967295
}
   8398e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83992:	bf00      	nop
   83994:	20002698 	.word	0x20002698
   83998:	20002694 	.word	0x20002694

0008399c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   8399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8399e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839a2:	2006      	movs	r0, #6
   839a4:	4c17      	ldr	r4, [pc, #92]	; (83a04 <iopins_normal+0x68>)
   839a6:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   839a8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839ac:	2007      	movs	r0, #7
   839ae:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   839b0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   839b4:	201d      	movs	r0, #29
   839b6:	47a0      	blx	r4
	board_power(0);
   839b8:	201d      	movs	r0, #29
   839ba:	4b13      	ldr	r3, [pc, #76]	; (83a08 <iopins_normal+0x6c>)
   839bc:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   839be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839c2:	2008      	movs	r0, #8
   839c4:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   839c6:	2008      	movs	r0, #8
   839c8:	4e10      	ldr	r6, [pc, #64]	; (83a0c <iopins_normal+0x70>)
   839ca:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   839cc:	4f10      	ldr	r7, [pc, #64]	; (83a10 <iopins_normal+0x74>)
   839ce:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   839d2:	21ff      	movs	r1, #255	; 0xff
   839d4:	4638      	mov	r0, r7
   839d6:	4d0f      	ldr	r5, [pc, #60]	; (83a14 <iopins_normal+0x78>)
   839d8:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   839da:	21ff      	movs	r1, #255	; 0xff
   839dc:	4638      	mov	r0, r7
   839de:	4b0e      	ldr	r3, [pc, #56]	; (83a18 <iopins_normal+0x7c>)
   839e0:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   839e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839e6:	2035      	movs	r0, #53	; 0x35
   839e8:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   839ea:	2035      	movs	r0, #53	; 0x35
   839ec:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   839ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   839f2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   839f6:	4809      	ldr	r0, [pc, #36]	; (83a1c <iopins_normal+0x80>)
   839f8:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   839fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   839fe:	201b      	movs	r0, #27
   83a00:	47a0      	blx	r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   83a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a04:	00083bb9 	.word	0x00083bb9
   83a08:	00083b9f 	.word	0x00083b9f
   83a0c:	00083b85 	.word	0x00083b85
   83a10:	400e0e00 	.word	0x400e0e00
   83a14:	00083c89 	.word	0x00083c89
   83a18:	00083b57 	.word	0x00083b57
   83a1c:	400e0c00 	.word	0x400e0c00

00083a20 <board_init>:

void board_init(void)
{
   83a20:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83a22:	4b06      	ldr	r3, [pc, #24]	; (83a3c <board_init+0x1c>)
   83a24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83a28:	605a      	str	r2, [r3, #4]
   83a2a:	200a      	movs	r0, #10
   83a2c:	4c04      	ldr	r4, [pc, #16]	; (83a40 <board_init+0x20>)
   83a2e:	47a0      	blx	r4
   83a30:	200b      	movs	r0, #11
   83a32:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83a34:	4b03      	ldr	r3, [pc, #12]	; (83a44 <board_init+0x24>)
   83a36:	4798      	blx	r3

}
   83a38:	bd10      	pop	{r4, pc}
   83a3a:	bf00      	nop
   83a3c:	400e1250 	.word	0x400e1250
   83a40:	00083ef5 	.word	0x00083ef5
   83a44:	0008399d 	.word	0x0008399d

00083a48 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83a48:	b510      	push	{r4, lr}
   83a4a:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83a4c:	2806      	cmp	r0, #6
   83a4e:	d002      	beq.n	83a56 <LED_Off+0xe>
   83a50:	2c07      	cmp	r4, #7
   83a52:	d004      	beq.n	83a5e <LED_Off+0x16>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   83a54:	bd10      	pop	{r4, pc}
				gpio_set_pin_low(led_gpio);
   83a56:	2006      	movs	r0, #6
   83a58:	4b03      	ldr	r3, [pc, #12]	; (83a68 <LED_Off+0x20>)
   83a5a:	4798      	blx	r3
   83a5c:	e7f8      	b.n	83a50 <LED_Off+0x8>
   83a5e:	2007      	movs	r0, #7
   83a60:	4b01      	ldr	r3, [pc, #4]	; (83a68 <LED_Off+0x20>)
   83a62:	4798      	blx	r3
}
   83a64:	e7f6      	b.n	83a54 <LED_Off+0xc>
   83a66:	bf00      	nop
   83a68:	00083b9f 	.word	0x00083b9f

00083a6c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   83a6c:	b510      	push	{r4, lr}
   83a6e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83a70:	2806      	cmp	r0, #6
   83a72:	d002      	beq.n	83a7a <LED_On+0xe>
   83a74:	2c07      	cmp	r4, #7
   83a76:	d004      	beq.n	83a82 <LED_On+0x16>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   83a78:	bd10      	pop	{r4, pc}
				gpio_set_pin_high(led_gpio);
   83a7a:	2006      	movs	r0, #6
   83a7c:	4b03      	ldr	r3, [pc, #12]	; (83a8c <LED_On+0x20>)
   83a7e:	4798      	blx	r3
   83a80:	e7f8      	b.n	83a74 <LED_On+0x8>
   83a82:	2007      	movs	r0, #7
   83a84:	4b01      	ldr	r3, [pc, #4]	; (83a8c <LED_On+0x20>)
   83a86:	4798      	blx	r3
}
   83a88:	e7f6      	b.n	83a78 <LED_On+0xc>
   83a8a:	bf00      	nop
   83a8c:	00083b85 	.word	0x00083b85

00083a90 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83a90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83a94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83a98:	670a      	str	r2, [r1, #112]	; 0x70
}
   83a9a:	4770      	bx	lr

00083a9c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83a9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83aa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83aa4:	674a      	str	r2, [r1, #116]	; 0x74
}
   83aa6:	4770      	bx	lr

00083aa8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83aa8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83aac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83ab0:	678a      	str	r2, [r1, #120]	; 0x78
}
   83ab2:	4770      	bx	lr

00083ab4 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83ab4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83ab8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83abc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   83ac0:	4770      	bx	lr

00083ac2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83ac2:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83ac4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83ac8:	d015      	beq.n	83af6 <pio_set_peripheral+0x34>
   83aca:	d80a      	bhi.n	83ae2 <pio_set_peripheral+0x20>
   83acc:	b191      	cbz	r1, 83af4 <pio_set_peripheral+0x32>
   83ace:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83ad2:	d10e      	bne.n	83af2 <pio_set_peripheral+0x30>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83ad4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83ad6:	6f03      	ldr	r3, [r0, #112]	; 0x70
   83ad8:	400b      	ands	r3, r1
   83ada:	ea23 0302 	bic.w	r3, r3, r2
   83ade:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83ae0:	e007      	b.n	83af2 <pio_set_peripheral+0x30>
	switch (ul_type) {
   83ae2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83ae6:	d005      	beq.n	83af4 <pio_set_peripheral+0x32>
   83ae8:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
   83aec:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83af0:	d000      	beq.n	83af4 <pio_set_peripheral+0x32>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83af2:	6042      	str	r2, [r0, #4]
}
   83af4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   83af6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83af8:	4313      	orrs	r3, r2
   83afa:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83afc:	e7f9      	b.n	83af2 <pio_set_peripheral+0x30>

00083afe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83afe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83b00:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83b04:	bf14      	ite	ne
   83b06:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83b08:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83b0a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83b0e:	bf14      	ite	ne
   83b10:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   83b12:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83b14:	f012 0f02 	tst.w	r2, #2
   83b18:	d004      	beq.n	83b24 <pio_set_input+0x26>
		p_pio->PIO_SCIFSR = ul_mask;
   83b1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   83b1e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   83b20:	6001      	str	r1, [r0, #0]
}
   83b22:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
   83b24:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83b28:	bf18      	it	ne
   83b2a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
   83b2e:	e7f6      	b.n	83b1e <pio_set_input+0x20>

00083b30 <pio_set_output>:
{
   83b30:	b410      	push	{r4}
   83b32:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   83b34:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83b36:	b144      	cbz	r4, 83b4a <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83b38:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
   83b3a:	b143      	cbz	r3, 83b4e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   83b3c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   83b3e:	b142      	cbz	r2, 83b52 <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
   83b40:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   83b42:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83b44:	6001      	str	r1, [r0, #0]
}
   83b46:	bc10      	pop	{r4}
   83b48:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
   83b4a:	6601      	str	r1, [r0, #96]	; 0x60
   83b4c:	e7f5      	b.n	83b3a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   83b4e:	6541      	str	r1, [r0, #84]	; 0x54
   83b50:	e7f5      	b.n	83b3e <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
   83b52:	6341      	str	r1, [r0, #52]	; 0x34
   83b54:	e7f5      	b.n	83b42 <pio_set_output+0x12>

00083b56 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   83b56:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   83b5a:	4770      	bx	lr

00083b5c <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   83b5c:	6381      	str	r1, [r0, #56]	; 0x38
}
   83b5e:	4770      	bx	lr

00083b60 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83b60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83b62:	4770      	bx	lr

00083b64 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83b64:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83b66:	4770      	bx	lr

00083b68 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b68:	0943      	lsrs	r3, r0, #5
   83b6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b6e:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83b72:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b76:	f000 001f 	and.w	r0, r0, #31
   83b7a:	fa23 f000 	lsr.w	r0, r3, r0
}
   83b7e:	f000 0001 	and.w	r0, r0, #1
   83b82:	4770      	bx	lr

00083b84 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b84:	0943      	lsrs	r3, r0, #5
   83b86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b8a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83b8e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83b90:	f000 001f 	and.w	r0, r0, #31
   83b94:	2201      	movs	r2, #1
   83b96:	fa02 f000 	lsl.w	r0, r2, r0
   83b9a:	6318      	str	r0, [r3, #48]	; 0x30
}
   83b9c:	4770      	bx	lr

00083b9e <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b9e:	0943      	lsrs	r3, r0, #5
   83ba0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83ba4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83ba8:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83baa:	f000 001f 	and.w	r0, r0, #31
   83bae:	2201      	movs	r2, #1
   83bb0:	fa02 f000 	lsl.w	r0, r2, r0
   83bb4:	6358      	str	r0, [r3, #52]	; 0x34
}
   83bb6:	4770      	bx	lr

00083bb8 <pio_configure_pin>:
{
   83bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   83bba:	b083      	sub	sp, #12
   83bbc:	460e      	mov	r6, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83bbe:	0943      	lsrs	r3, r0, #5
   83bc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83bc4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83bc8:	025d      	lsls	r5, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83bca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   83bce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83bd2:	d032      	beq.n	83c3a <pio_configure_pin+0x82>
   83bd4:	d818      	bhi.n	83c08 <pio_configure_pin+0x50>
   83bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83bda:	d01d      	beq.n	83c18 <pio_configure_pin+0x60>
   83bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83be0:	bf18      	it	ne
   83be2:	2000      	movne	r0, #0
   83be4:	d116      	bne.n	83c14 <pio_configure_pin+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83be6:	f000 001f 	and.w	r0, r0, #31
   83bea:	2401      	movs	r4, #1
   83bec:	4084      	lsls	r4, r0
   83bee:	4622      	mov	r2, r4
   83bf0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83bf4:	4628      	mov	r0, r5
   83bf6:	4b21      	ldr	r3, [pc, #132]	; (83c7c <pio_configure_pin+0xc4>)
   83bf8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83bfa:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83bfe:	bf12      	itee	ne
   83c00:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c02:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83c04:	2001      	moveq	r0, #1
   83c06:	e005      	b.n	83c14 <pio_configure_pin+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83c08:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
   83c0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83c10:	d01e      	beq.n	83c50 <pio_configure_pin+0x98>
   83c12:	2000      	movs	r0, #0
}
   83c14:	b003      	add	sp, #12
   83c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83c18:	f000 001f 	and.w	r0, r0, #31
   83c1c:	2401      	movs	r4, #1
   83c1e:	4084      	lsls	r4, r0
   83c20:	4622      	mov	r2, r4
   83c22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83c26:	4628      	mov	r0, r5
   83c28:	4b14      	ldr	r3, [pc, #80]	; (83c7c <pio_configure_pin+0xc4>)
   83c2a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83c2c:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83c30:	bf12      	itee	ne
   83c32:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c34:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83c36:	2001      	moveq	r0, #1
   83c38:	e7ec      	b.n	83c14 <pio_configure_pin+0x5c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83c3a:	f000 011f 	and.w	r1, r0, #31
   83c3e:	2401      	movs	r4, #1
   83c40:	4632      	mov	r2, r6
   83c42:	fa04 f101 	lsl.w	r1, r4, r1
   83c46:	4628      	mov	r0, r5
   83c48:	4b0d      	ldr	r3, [pc, #52]	; (83c80 <pio_configure_pin+0xc8>)
   83c4a:	4798      	blx	r3
	return 1;
   83c4c:	4620      	mov	r0, r4
		break;
   83c4e:	e7e1      	b.n	83c14 <pio_configure_pin+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83c50:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83c54:	f000 011f 	and.w	r1, r0, #31
   83c58:	2701      	movs	r7, #1
   83c5a:	ea06 0307 	and.w	r3, r6, r7
   83c5e:	9300      	str	r3, [sp, #0]
   83c60:	f3c6 0380 	ubfx	r3, r6, #2, #1
   83c64:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83c68:	bf14      	ite	ne
   83c6a:	2200      	movne	r2, #0
   83c6c:	2201      	moveq	r2, #1
   83c6e:	fa07 f101 	lsl.w	r1, r7, r1
   83c72:	4628      	mov	r0, r5
   83c74:	4c03      	ldr	r4, [pc, #12]	; (83c84 <pio_configure_pin+0xcc>)
   83c76:	47a0      	blx	r4
	return 1;
   83c78:	4638      	mov	r0, r7
		break;
   83c7a:	e7cb      	b.n	83c14 <pio_configure_pin+0x5c>
   83c7c:	00083ac3 	.word	0x00083ac3
   83c80:	00083aff 	.word	0x00083aff
   83c84:	00083b31 	.word	0x00083b31

00083c88 <pio_configure_pin_group>:
{
   83c88:	b570      	push	{r4, r5, r6, lr}
   83c8a:	b082      	sub	sp, #8
   83c8c:	4605      	mov	r5, r0
   83c8e:	460e      	mov	r6, r1
   83c90:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   83c92:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   83c96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83c9a:	d029      	beq.n	83cf0 <pio_configure_pin_group+0x68>
   83c9c:	d814      	bhi.n	83cc8 <pio_configure_pin_group+0x40>
   83c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83ca2:	d019      	beq.n	83cd8 <pio_configure_pin_group+0x50>
   83ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83ca8:	bf18      	it	ne
   83caa:	2000      	movne	r0, #0
   83cac:	d112      	bne.n	83cd4 <pio_configure_pin_group+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83cae:	460a      	mov	r2, r1
   83cb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83cb4:	4628      	mov	r0, r5
   83cb6:	4b18      	ldr	r3, [pc, #96]	; (83d18 <pio_configure_pin_group+0x90>)
   83cb8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83cba:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83cbe:	bf12      	itee	ne
   83cc0:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83cc2:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83cc4:	2001      	moveq	r0, #1
   83cc6:	e005      	b.n	83cd4 <pio_configure_pin_group+0x4c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83cc8:	f002 43e0 	and.w	r3, r2, #1879048192	; 0x70000000
   83ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83cd0:	d012      	beq.n	83cf8 <pio_configure_pin_group+0x70>
   83cd2:	2000      	movs	r0, #0
}
   83cd4:	b002      	add	sp, #8
   83cd6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83cd8:	460a      	mov	r2, r1
   83cda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83cde:	4b0e      	ldr	r3, [pc, #56]	; (83d18 <pio_configure_pin_group+0x90>)
   83ce0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83ce2:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83ce6:	bf12      	itee	ne
   83ce8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83cea:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83cec:	2001      	moveq	r0, #1
   83cee:	e7f1      	b.n	83cd4 <pio_configure_pin_group+0x4c>
		pio_set_input(p_pio, ul_mask, ul_flags);
   83cf0:	4b0a      	ldr	r3, [pc, #40]	; (83d1c <pio_configure_pin_group+0x94>)
   83cf2:	4798      	blx	r3
	return 1;
   83cf4:	2001      	movs	r0, #1
		break;
   83cf6:	e7ed      	b.n	83cd4 <pio_configure_pin_group+0x4c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83cf8:	f002 5260 	and.w	r2, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83cfc:	f004 0301 	and.w	r3, r4, #1
   83d00:	9300      	str	r3, [sp, #0]
   83d02:	f3c4 0380 	ubfx	r3, r4, #2, #1
   83d06:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83d0a:	bf14      	ite	ne
   83d0c:	2200      	movne	r2, #0
   83d0e:	2201      	moveq	r2, #1
   83d10:	4c03      	ldr	r4, [pc, #12]	; (83d20 <pio_configure_pin_group+0x98>)
   83d12:	47a0      	blx	r4
	return 1;
   83d14:	2001      	movs	r0, #1
		break;
   83d16:	e7dd      	b.n	83cd4 <pio_configure_pin_group+0x4c>
   83d18:	00083ac3 	.word	0x00083ac3
   83d1c:	00083aff 	.word	0x00083aff
   83d20:	00083b31 	.word	0x00083b31

00083d24 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d28:	4604      	mov	r4, r0
   83d2a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83d2c:	4b0e      	ldr	r3, [pc, #56]	; (83d68 <pio_handler_process+0x44>)
   83d2e:	4798      	blx	r3
   83d30:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83d32:	4620      	mov	r0, r4
   83d34:	4b0d      	ldr	r3, [pc, #52]	; (83d6c <pio_handler_process+0x48>)
   83d36:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83d38:	4005      	ands	r5, r0
   83d3a:	d013      	beq.n	83d64 <pio_handler_process+0x40>
   83d3c:	4c0c      	ldr	r4, [pc, #48]	; (83d70 <pio_handler_process+0x4c>)
   83d3e:	f104 0860 	add.w	r8, r4, #96	; 0x60
   83d42:	e003      	b.n	83d4c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83d44:	4544      	cmp	r4, r8
   83d46:	d00d      	beq.n	83d64 <pio_handler_process+0x40>
		while (status != 0) {
   83d48:	3410      	adds	r4, #16
   83d4a:	b15d      	cbz	r5, 83d64 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   83d4c:	6820      	ldr	r0, [r4, #0]
   83d4e:	42b0      	cmp	r0, r6
   83d50:	d1f8      	bne.n	83d44 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83d52:	6861      	ldr	r1, [r4, #4]
   83d54:	4229      	tst	r1, r5
   83d56:	d0f5      	beq.n	83d44 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83d58:	68e3      	ldr	r3, [r4, #12]
   83d5a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   83d5c:	6863      	ldr	r3, [r4, #4]
   83d5e:	ea25 0503 	bic.w	r5, r5, r3
   83d62:	e7ef      	b.n	83d44 <pio_handler_process+0x20>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d68:	00083b61 	.word	0x00083b61
   83d6c:	00083b65 	.word	0x00083b65
   83d70:	2000208c 	.word	0x2000208c

00083d74 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83d74:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83d76:	210a      	movs	r1, #10
   83d78:	4801      	ldr	r0, [pc, #4]	; (83d80 <PIOA_Handler+0xc>)
   83d7a:	4b02      	ldr	r3, [pc, #8]	; (83d84 <PIOA_Handler+0x10>)
   83d7c:	4798      	blx	r3
}
   83d7e:	bd08      	pop	{r3, pc}
   83d80:	400e0c00 	.word	0x400e0c00
   83d84:	00083d25 	.word	0x00083d25

00083d88 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83d88:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83d8a:	210b      	movs	r1, #11
   83d8c:	4801      	ldr	r0, [pc, #4]	; (83d94 <PIOB_Handler+0xc>)
   83d8e:	4b02      	ldr	r3, [pc, #8]	; (83d98 <PIOB_Handler+0x10>)
   83d90:	4798      	blx	r3
}
   83d92:	bd08      	pop	{r3, pc}
   83d94:	400e0e00 	.word	0x400e0e00
   83d98:	00083d25 	.word	0x00083d25

00083d9c <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83d9c:	4a16      	ldr	r2, [pc, #88]	; (83df8 <pmc_switch_mck_to_mainck+0x5c>)
   83d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83da0:	f023 0303 	bic.w	r3, r3, #3
   83da4:	f043 0301 	orr.w	r3, r3, #1
   83da8:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83daa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83dac:	f013 0f08 	tst.w	r3, #8
   83db0:	d10a      	bne.n	83dc8 <pmc_switch_mck_to_mainck+0x2c>
   83db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83db6:	4910      	ldr	r1, [pc, #64]	; (83df8 <pmc_switch_mck_to_mainck+0x5c>)
   83db8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83dba:	f012 0f08 	tst.w	r2, #8
   83dbe:	d103      	bne.n	83dc8 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83dc0:	3b01      	subs	r3, #1
   83dc2:	d1f9      	bne.n	83db8 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   83dc4:	2001      	movs	r0, #1
   83dc6:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83dc8:	4a0b      	ldr	r2, [pc, #44]	; (83df8 <pmc_switch_mck_to_mainck+0x5c>)
   83dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83dd0:	4303      	orrs	r3, r0
   83dd2:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83dd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83dd6:	f010 0008 	ands.w	r0, r0, #8
   83dda:	d10a      	bne.n	83df2 <pmc_switch_mck_to_mainck+0x56>
   83ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83de0:	4905      	ldr	r1, [pc, #20]	; (83df8 <pmc_switch_mck_to_mainck+0x5c>)
   83de2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83de4:	f012 0f08 	tst.w	r2, #8
   83de8:	d105      	bne.n	83df6 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83dea:	3b01      	subs	r3, #1
   83dec:	d1f9      	bne.n	83de2 <pmc_switch_mck_to_mainck+0x46>
			return 1;
   83dee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83df0:	4770      	bx	lr
	return 0;
   83df2:	2000      	movs	r0, #0
   83df4:	4770      	bx	lr
   83df6:	4770      	bx	lr
   83df8:	400e0400 	.word	0x400e0400

00083dfc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83dfc:	4a16      	ldr	r2, [pc, #88]	; (83e58 <pmc_switch_mck_to_pllack+0x5c>)
   83dfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83e04:	4303      	orrs	r3, r0
   83e06:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e08:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83e0a:	f013 0f08 	tst.w	r3, #8
   83e0e:	d10a      	bne.n	83e26 <pmc_switch_mck_to_pllack+0x2a>
   83e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e14:	4910      	ldr	r1, [pc, #64]	; (83e58 <pmc_switch_mck_to_pllack+0x5c>)
   83e16:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e18:	f012 0f08 	tst.w	r2, #8
   83e1c:	d103      	bne.n	83e26 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e1e:	3b01      	subs	r3, #1
   83e20:	d1f9      	bne.n	83e16 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   83e22:	2001      	movs	r0, #1
   83e24:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83e26:	4a0c      	ldr	r2, [pc, #48]	; (83e58 <pmc_switch_mck_to_pllack+0x5c>)
   83e28:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e2a:	f023 0303 	bic.w	r3, r3, #3
   83e2e:	f043 0302 	orr.w	r3, r3, #2
   83e32:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e34:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83e36:	f010 0008 	ands.w	r0, r0, #8
   83e3a:	d10a      	bne.n	83e52 <pmc_switch_mck_to_pllack+0x56>
   83e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e40:	4905      	ldr	r1, [pc, #20]	; (83e58 <pmc_switch_mck_to_pllack+0x5c>)
   83e42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e44:	f012 0f08 	tst.w	r2, #8
   83e48:	d105      	bne.n	83e56 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e4a:	3b01      	subs	r3, #1
   83e4c:	d1f9      	bne.n	83e42 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   83e4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83e50:	4770      	bx	lr
	return 0;
   83e52:	2000      	movs	r0, #0
   83e54:	4770      	bx	lr
   83e56:	4770      	bx	lr
   83e58:	400e0400 	.word	0x400e0400

00083e5c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   83e5c:	4908      	ldr	r1, [pc, #32]	; (83e80 <pmc_osc_enable_main_xtal+0x24>)
   83e5e:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83e60:	0203      	lsls	r3, r0, #8
   83e62:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83e64:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83e68:	4313      	orrs	r3, r2
   83e6a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e6e:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   83e72:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83e74:	460a      	mov	r2, r1
   83e76:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83e78:	f013 0f01 	tst.w	r3, #1
   83e7c:	d0fb      	beq.n	83e76 <pmc_osc_enable_main_xtal+0x1a>
}
   83e7e:	4770      	bx	lr
   83e80:	400e0400 	.word	0x400e0400

00083e84 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83e84:	4b02      	ldr	r3, [pc, #8]	; (83e90 <pmc_osc_is_ready_main_xtal+0xc>)
   83e86:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83e88:	f000 0001 	and.w	r0, r0, #1
   83e8c:	4770      	bx	lr
   83e8e:	bf00      	nop
   83e90:	400e0400 	.word	0x400e0400

00083e94 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83e94:	4b02      	ldr	r3, [pc, #8]	; (83ea0 <pmc_osc_is_ready_mainck+0xc>)
   83e96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83e98:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83e9c:	4770      	bx	lr
   83e9e:	bf00      	nop
   83ea0:	400e0400 	.word	0x400e0400

00083ea4 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   83ea4:	4b06      	ldr	r3, [pc, #24]	; (83ec0 <pmc_mainck_osc_select+0x1c>)
   83ea6:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   83ea8:	b130      	cbz	r0, 83eb8 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   83eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83eae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83eb2:	4a03      	ldr	r2, [pc, #12]	; (83ec0 <pmc_mainck_osc_select+0x1c>)
   83eb4:	6213      	str	r3, [r2, #32]
}
   83eb6:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   83eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83ebc:	e7f7      	b.n	83eae <pmc_mainck_osc_select+0xa>
   83ebe:	bf00      	nop
   83ec0:	400e0400 	.word	0x400e0400

00083ec4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83ec4:	4b02      	ldr	r3, [pc, #8]	; (83ed0 <pmc_disable_pllack+0xc>)
   83ec6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83eca:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83ecc:	4770      	bx	lr
   83ece:	bf00      	nop
   83ed0:	400e0400 	.word	0x400e0400

00083ed4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83ed4:	4b02      	ldr	r3, [pc, #8]	; (83ee0 <pmc_is_locked_pllack+0xc>)
   83ed6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ed8:	f000 0002 	and.w	r0, r0, #2
   83edc:	4770      	bx	lr
   83ede:	bf00      	nop
   83ee0:	400e0400 	.word	0x400e0400

00083ee4 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83ee4:	4b02      	ldr	r3, [pc, #8]	; (83ef0 <pmc_is_locked_upll+0xc>)
   83ee6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ee8:	f000 0040 	and.w	r0, r0, #64	; 0x40
   83eec:	4770      	bx	lr
   83eee:	bf00      	nop
   83ef0:	400e0400 	.word	0x400e0400

00083ef4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83ef4:	281d      	cmp	r0, #29
   83ef6:	d80c      	bhi.n	83f12 <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83ef8:	4b08      	ldr	r3, [pc, #32]	; (83f1c <pmc_enable_periph_clk+0x28>)
   83efa:	699a      	ldr	r2, [r3, #24]
   83efc:	2301      	movs	r3, #1
   83efe:	4083      	lsls	r3, r0
   83f00:	4393      	bics	r3, r2
   83f02:	d008      	beq.n	83f16 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
   83f04:	2301      	movs	r3, #1
   83f06:	fa03 f000 	lsl.w	r0, r3, r0
   83f0a:	4b04      	ldr	r3, [pc, #16]	; (83f1c <pmc_enable_periph_clk+0x28>)
   83f0c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83f0e:	2000      	movs	r0, #0
   83f10:	4770      	bx	lr
		return 1;
   83f12:	2001      	movs	r0, #1
   83f14:	4770      	bx	lr
	return 0;
   83f16:	2000      	movs	r0, #0
}
   83f18:	4770      	bx	lr
   83f1a:	bf00      	nop
   83f1c:	400e0400 	.word	0x400e0400

00083f20 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83f20:	281d      	cmp	r0, #29
   83f22:	d80e      	bhi.n	83f42 <pmc_disable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83f24:	4b08      	ldr	r3, [pc, #32]	; (83f48 <pmc_disable_periph_clk+0x28>)
   83f26:	699a      	ldr	r2, [r3, #24]
   83f28:	2301      	movs	r3, #1
   83f2a:	4083      	lsls	r3, r0
   83f2c:	4393      	bics	r3, r2
   83f2e:	d001      	beq.n	83f34 <pmc_disable_periph_clk+0x14>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83f30:	2000      	movs	r0, #0
}
   83f32:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   83f34:	2301      	movs	r3, #1
   83f36:	fa03 f000 	lsl.w	r0, r3, r0
   83f3a:	4b03      	ldr	r3, [pc, #12]	; (83f48 <pmc_disable_periph_clk+0x28>)
   83f3c:	6158      	str	r0, [r3, #20]
	return 0;
   83f3e:	2000      	movs	r0, #0
   83f40:	4770      	bx	lr
		return 1;
   83f42:	2001      	movs	r0, #1
   83f44:	4770      	bx	lr
   83f46:	bf00      	nop
   83f48:	400e0400 	.word	0x400e0400

00083f4c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
   83f50:	4083      	lsls	r3, r0
   83f52:	4a01      	ldr	r2, [pc, #4]	; (83f58 <pmc_enable_pck+0xc>)
   83f54:	6013      	str	r3, [r2, #0]
}
   83f56:	4770      	bx	lr
   83f58:	400e0400 	.word	0x400e0400

00083f5c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83f5c:	4b03      	ldr	r3, [pc, #12]	; (83f6c <pmc_set_fast_startup_input+0x10>)
   83f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83f60:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   83f64:	4310      	orrs	r0, r2
   83f66:	6718      	str	r0, [r3, #112]	; 0x70
}
   83f68:	4770      	bx	lr
   83f6a:	bf00      	nop
   83f6c:	400e0400 	.word	0x400e0400

00083f70 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83f70:	4b02      	ldr	r3, [pc, #8]	; (83f7c <pmc_is_wakeup_clocks_restored+0xc>)
   83f72:	7818      	ldrb	r0, [r3, #0]
}
   83f74:	f080 0001 	eor.w	r0, r0, #1
   83f78:	4770      	bx	lr
   83f7a:	bf00      	nop
   83f7c:	200020fc 	.word	0x200020fc

00083f80 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   83f80:	b508      	push	{r3, lr}
   83f82:	2014      	movs	r0, #20
   83f84:	4b01      	ldr	r3, [pc, #4]	; (83f8c <spi_enable_clock+0xc>)
   83f86:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   83f88:	bd08      	pop	{r3, pc}
   83f8a:	bf00      	nop
   83f8c:	00083ef5 	.word	0x00083ef5

00083f90 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   83f90:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   83f92:	2014      	movs	r0, #20
   83f94:	4b01      	ldr	r3, [pc, #4]	; (83f9c <spi_disable_clock+0xc>)
   83f96:	4798      	blx	r3
		}
	#endif
#elif SAM4L
	sysclk_disable_peripheral_clock(p_spi);
#endif
}
   83f98:	bd08      	pop	{r3, pc}
   83f9a:	bf00      	nop
   83f9c:	00083f21 	.word	0x00083f21

00083fa0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   83fa0:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   83fa2:	f643 2399 	movw	r3, #15001	; 0x3a99
   83fa6:	6904      	ldr	r4, [r0, #16]
   83fa8:	f014 0f01 	tst.w	r4, #1
   83fac:	d103      	bne.n	83fb6 <spi_read+0x16>
		if (!timeout--) {
   83fae:	3b01      	subs	r3, #1
   83fb0:	d1f9      	bne.n	83fa6 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   83fb2:	2001      	movs	r0, #1
   83fb4:	e009      	b.n	83fca <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   83fb6:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   83fb8:	6840      	ldr	r0, [r0, #4]
   83fba:	f010 0f02 	tst.w	r0, #2
	if (spi_get_peripheral_select_mode(p_spi)) {
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   83fbe:	bf1c      	itt	ne
   83fc0:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   83fc4:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   83fc6:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   83fc8:	2000      	movs	r0, #0
}
   83fca:	bc10      	pop	{r4}
   83fcc:	4770      	bx	lr

00083fce <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   83fce:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   83fd0:	f643 2499 	movw	r4, #15001	; 0x3a99
   83fd4:	6905      	ldr	r5, [r0, #16]
   83fd6:	f015 0f02 	tst.w	r5, #2
   83fda:	d103      	bne.n	83fe4 <spi_write+0x16>
		if (!timeout--) {
   83fdc:	3c01      	subs	r4, #1
   83fde:	d1f9      	bne.n	83fd4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   83fe0:	2001      	movs	r0, #1
   83fe2:	e00c      	b.n	83ffe <spi_write+0x30>
   83fe4:	6844      	ldr	r4, [r0, #4]
   83fe6:	f014 0f02 	tst.w	r4, #2
   83fea:	d006      	beq.n	83ffa <spi_write+0x2c>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   83fec:	0412      	lsls	r2, r2, #16
   83fee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   83ff2:	4311      	orrs	r1, r2
		if (uc_last) {
   83ff4:	b10b      	cbz	r3, 83ffa <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   83ff6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   83ffa:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   83ffc:	2000      	movs	r0, #0
}
   83ffe:	bc30      	pop	{r4, r5}
   84000:	4770      	bx	lr

00084002 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   84002:	b132      	cbz	r2, 84012 <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   84004:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84008:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8400a:	f043 0301 	orr.w	r3, r3, #1
   8400e:	6303      	str	r3, [r0, #48]	; 0x30
   84010:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   84012:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84016:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84018:	f023 0301 	bic.w	r3, r3, #1
   8401c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8401e:	4770      	bx	lr

00084020 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   84020:	b132      	cbz	r2, 84030 <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84022:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84026:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84028:	f043 0302 	orr.w	r3, r3, #2
   8402c:	6303      	str	r3, [r0, #48]	; 0x30
   8402e:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   84030:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84034:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84036:	f023 0302 	bic.w	r3, r3, #2
   8403a:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8403c:	4770      	bx	lr

0008403e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8403e:	1e43      	subs	r3, r0, #1
   84040:	440b      	add	r3, r1
   84042:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   84046:	1e43      	subs	r3, r0, #1
   84048:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8404a:	bf94      	ite	ls
   8404c:	b200      	sxthls	r0, r0
		return -1;
   8404e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   84052:	4770      	bx	lr

00084054 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   84054:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84058:	6b08      	ldr	r0, [r1, #48]	; 0x30
   8405a:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   8405e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84060:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84062:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   84066:	630b      	str	r3, [r1, #48]	; 0x30
}
   84068:	4770      	bx	lr
	...

0008406c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8406c:	4603      	mov	r3, r0
   8406e:	b9c0      	cbnz	r0, 840a2 <udd_sleep_mode+0x36>
   84070:	4a18      	ldr	r2, [pc, #96]	; (840d4 <udd_sleep_mode+0x68>)
   84072:	7812      	ldrb	r2, [r2, #0]
   84074:	b192      	cbz	r2, 8409c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8407a:	b672      	cpsid	i
   8407c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84080:	4a15      	ldr	r2, [pc, #84]	; (840d8 <udd_sleep_mode+0x6c>)
   84082:	2100      	movs	r1, #0
   84084:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84086:	4915      	ldr	r1, [pc, #84]	; (840dc <udd_sleep_mode+0x70>)
   84088:	788a      	ldrb	r2, [r1, #2]
   8408a:	3a01      	subs	r2, #1
   8408c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8408e:	b928      	cbnz	r0, 8409c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   84090:	4a11      	ldr	r2, [pc, #68]	; (840d8 <udd_sleep_mode+0x6c>)
   84092:	2101      	movs	r1, #1
   84094:	7011      	strb	r1, [r2, #0]
   84096:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8409a:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8409c:	4a0d      	ldr	r2, [pc, #52]	; (840d4 <udd_sleep_mode+0x68>)
   8409e:	7013      	strb	r3, [r2, #0]
}
   840a0:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   840a2:	4a0c      	ldr	r2, [pc, #48]	; (840d4 <udd_sleep_mode+0x68>)
   840a4:	7812      	ldrb	r2, [r2, #0]
   840a6:	2a00      	cmp	r2, #0
   840a8:	d1f8      	bne.n	8409c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   840aa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   840ae:	b672      	cpsid	i
   840b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840b4:	4a08      	ldr	r2, [pc, #32]	; (840d8 <udd_sleep_mode+0x6c>)
   840b6:	2100      	movs	r1, #0
   840b8:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   840ba:	4908      	ldr	r1, [pc, #32]	; (840dc <udd_sleep_mode+0x70>)
   840bc:	788a      	ldrb	r2, [r1, #2]
   840be:	3201      	adds	r2, #1
   840c0:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   840c2:	2800      	cmp	r0, #0
   840c4:	d1ea      	bne.n	8409c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   840c6:	4a04      	ldr	r2, [pc, #16]	; (840d8 <udd_sleep_mode+0x6c>)
   840c8:	2101      	movs	r1, #1
   840ca:	7011      	strb	r1, [r2, #0]
   840cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   840d0:	b662      	cpsie	i
}
   840d2:	e7e3      	b.n	8409c <udd_sleep_mode+0x30>
   840d4:	200020fe 	.word	0x200020fe
   840d8:	20000982 	.word	0x20000982
   840dc:	20002688 	.word	0x20002688

000840e0 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   840e0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   840e4:	b672      	cpsid	i
   840e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840ea:	4a0e      	ldr	r2, [pc, #56]	; (84124 <udd_ctrl_init+0x44>)
   840ec:	2100      	movs	r1, #0
   840ee:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   840f0:	4a0d      	ldr	r2, [pc, #52]	; (84128 <udd_ctrl_init+0x48>)
   840f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   840f6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   840fa:	b92b      	cbnz	r3, 84108 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   840fc:	4b09      	ldr	r3, [pc, #36]	; (84124 <udd_ctrl_init+0x44>)
   840fe:	2201      	movs	r2, #1
   84100:	701a      	strb	r2, [r3, #0]
   84102:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84106:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84108:	4b07      	ldr	r3, [pc, #28]	; (84128 <udd_ctrl_init+0x48>)
   8410a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8410e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84112:	4a06      	ldr	r2, [pc, #24]	; (8412c <udd_ctrl_init+0x4c>)
   84114:	2300      	movs	r3, #0
   84116:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84118:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   8411a:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8411c:	4a04      	ldr	r2, [pc, #16]	; (84130 <udd_ctrl_init+0x50>)
   8411e:	7013      	strb	r3, [r2, #0]
}
   84120:	4770      	bx	lr
   84122:	bf00      	nop
   84124:	20000982 	.word	0x20000982
   84128:	400a4000 	.word	0x400a4000
   8412c:	2000269c 	.word	0x2000269c
   84130:	20002104 	.word	0x20002104

00084134 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84134:	4b03      	ldr	r3, [pc, #12]	; (84144 <udd_ctrl_stall_data+0x10>)
   84136:	2205      	movs	r2, #5
   84138:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8413a:	4b03      	ldr	r3, [pc, #12]	; (84148 <udd_ctrl_stall_data+0x14>)
   8413c:	2220      	movs	r2, #32
   8413e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84142:	4770      	bx	lr
   84144:	20002104 	.word	0x20002104
   84148:	400a4000 	.word	0x400a4000

0008414c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8414c:	4b11      	ldr	r3, [pc, #68]	; (84194 <udd_ctrl_send_zlp_in+0x48>)
   8414e:	2203      	movs	r2, #3
   84150:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84152:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84156:	b672      	cpsid	i
   84158:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8415c:	4b0e      	ldr	r3, [pc, #56]	; (84198 <udd_ctrl_send_zlp_in+0x4c>)
   8415e:	2200      	movs	r2, #0
   84160:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84162:	4b0e      	ldr	r3, [pc, #56]	; (8419c <udd_ctrl_send_zlp_in+0x50>)
   84164:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84168:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8416c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84170:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84174:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84178:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8417c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84180:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84184:	b929      	cbnz	r1, 84192 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84186:	4b04      	ldr	r3, [pc, #16]	; (84198 <udd_ctrl_send_zlp_in+0x4c>)
   84188:	2201      	movs	r2, #1
   8418a:	701a      	strb	r2, [r3, #0]
   8418c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84190:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   84192:	4770      	bx	lr
   84194:	20002104 	.word	0x20002104
   84198:	20000982 	.word	0x20000982
   8419c:	400a4000 	.word	0x400a4000

000841a0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   841a0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   841a2:	4b02      	ldr	r3, [pc, #8]	; (841ac <udd_ctrl_endofrequest+0xc>)
   841a4:	691b      	ldr	r3, [r3, #16]
   841a6:	b103      	cbz	r3, 841aa <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   841a8:	4798      	blx	r3
	}
}
   841aa:	bd08      	pop	{r3, pc}
   841ac:	2000269c 	.word	0x2000269c

000841b0 <udd_ctrl_in_sent>:
{
   841b0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   841b2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   841b6:	b672      	cpsid	i
   841b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841bc:	4a4c      	ldr	r2, [pc, #304]	; (842f0 <udd_ctrl_in_sent+0x140>)
   841be:	2100      	movs	r1, #0
   841c0:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   841c2:	4a4c      	ldr	r2, [pc, #304]	; (842f4 <udd_ctrl_in_sent+0x144>)
   841c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   841c8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   841cc:	b92b      	cbnz	r3, 841da <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   841ce:	4b48      	ldr	r3, [pc, #288]	; (842f0 <udd_ctrl_in_sent+0x140>)
   841d0:	2201      	movs	r2, #1
   841d2:	701a      	strb	r2, [r3, #0]
   841d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841d8:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   841da:	4b47      	ldr	r3, [pc, #284]	; (842f8 <udd_ctrl_in_sent+0x148>)
   841dc:	781b      	ldrb	r3, [r3, #0]
   841de:	2b03      	cmp	r3, #3
   841e0:	d05a      	beq.n	84298 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   841e2:	4b46      	ldr	r3, [pc, #280]	; (842fc <udd_ctrl_in_sent+0x14c>)
   841e4:	881b      	ldrh	r3, [r3, #0]
   841e6:	4a46      	ldr	r2, [pc, #280]	; (84300 <udd_ctrl_in_sent+0x150>)
   841e8:	8994      	ldrh	r4, [r2, #12]
   841ea:	1ae4      	subs	r4, r4, r3
   841ec:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   841ee:	b9c4      	cbnz	r4, 84222 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   841f0:	4a44      	ldr	r2, [pc, #272]	; (84304 <udd_ctrl_in_sent+0x154>)
   841f2:	8811      	ldrh	r1, [r2, #0]
   841f4:	440b      	add	r3, r1
   841f6:	b29b      	uxth	r3, r3
   841f8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   841fa:	4a41      	ldr	r2, [pc, #260]	; (84300 <udd_ctrl_in_sent+0x150>)
   841fc:	88d2      	ldrh	r2, [r2, #6]
   841fe:	429a      	cmp	r2, r3
   84200:	d04f      	beq.n	842a2 <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   84202:	4b41      	ldr	r3, [pc, #260]	; (84308 <udd_ctrl_in_sent+0x158>)
   84204:	781b      	ldrb	r3, [r3, #0]
   84206:	2b00      	cmp	r3, #0
   84208:	d14b      	bne.n	842a2 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   8420a:	4b3d      	ldr	r3, [pc, #244]	; (84300 <udd_ctrl_in_sent+0x150>)
   8420c:	695b      	ldr	r3, [r3, #20]
   8420e:	2b00      	cmp	r3, #0
   84210:	d06c      	beq.n	842ec <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84212:	4798      	blx	r3
   84214:	2800      	cmp	r0, #0
   84216:	d069      	beq.n	842ec <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   84218:	4b38      	ldr	r3, [pc, #224]	; (842fc <udd_ctrl_in_sent+0x14c>)
   8421a:	2200      	movs	r2, #0
   8421c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8421e:	4b38      	ldr	r3, [pc, #224]	; (84300 <udd_ctrl_in_sent+0x150>)
   84220:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84222:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   84224:	bf92      	itee	ls
   84226:	2201      	movls	r2, #1
		b_shortpacket = false;
   84228:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8422a:	2440      	movhi	r4, #64	; 0x40
   8422c:	4b36      	ldr	r3, [pc, #216]	; (84308 <udd_ctrl_in_sent+0x158>)
   8422e:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84230:	4b33      	ldr	r3, [pc, #204]	; (84300 <udd_ctrl_in_sent+0x150>)
   84232:	689a      	ldr	r2, [r3, #8]
   84234:	4b31      	ldr	r3, [pc, #196]	; (842fc <udd_ctrl_in_sent+0x14c>)
   84236:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84238:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8423c:	b672      	cpsid	i
   8423e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84242:	4b2b      	ldr	r3, [pc, #172]	; (842f0 <udd_ctrl_in_sent+0x140>)
   84244:	2100      	movs	r1, #0
   84246:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   84248:	4b2a      	ldr	r3, [pc, #168]	; (842f4 <udd_ctrl_in_sent+0x144>)
   8424a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8424e:	f413 7f00 	tst.w	r3, #512	; 0x200
   84252:	d140      	bne.n	842d6 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   84254:	b14c      	cbz	r4, 8426a <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84256:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84258:	4b2c      	ldr	r3, [pc, #176]	; (8430c <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   8425a:	4619      	mov	r1, r3
   8425c:	3301      	adds	r3, #1
   8425e:	f812 0b01 	ldrb.w	r0, [r2], #1
   84262:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   84264:	b2d9      	uxtb	r1, r3
   84266:	42a1      	cmp	r1, r4
   84268:	d3f7      	bcc.n	8425a <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8426a:	4a24      	ldr	r2, [pc, #144]	; (842fc <udd_ctrl_in_sent+0x14c>)
   8426c:	8813      	ldrh	r3, [r2, #0]
   8426e:	441c      	add	r4, r3
   84270:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   84272:	4b20      	ldr	r3, [pc, #128]	; (842f4 <udd_ctrl_in_sent+0x144>)
   84274:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84278:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8427c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84280:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84284:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84288:	bb7d      	cbnz	r5, 842ea <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   8428a:	4b19      	ldr	r3, [pc, #100]	; (842f0 <udd_ctrl_in_sent+0x140>)
   8428c:	2201      	movs	r2, #1
   8428e:	701a      	strb	r2, [r3, #0]
   84290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84294:	b662      	cpsie	i
}
   84296:	e028      	b.n	842ea <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   84298:	4b1d      	ldr	r3, [pc, #116]	; (84310 <udd_ctrl_in_sent+0x160>)
   8429a:	4798      	blx	r3
		udd_ctrl_init();
   8429c:	4b1d      	ldr	r3, [pc, #116]	; (84314 <udd_ctrl_in_sent+0x164>)
   8429e:	4798      	blx	r3
		return;
   842a0:	e023      	b.n	842ea <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   842a2:	4b15      	ldr	r3, [pc, #84]	; (842f8 <udd_ctrl_in_sent+0x148>)
   842a4:	2204      	movs	r2, #4
   842a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   842ac:	b672      	cpsid	i
   842ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842b2:	4b0f      	ldr	r3, [pc, #60]	; (842f0 <udd_ctrl_in_sent+0x140>)
   842b4:	2200      	movs	r2, #0
   842b6:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   842b8:	4b0e      	ldr	r3, [pc, #56]	; (842f4 <udd_ctrl_in_sent+0x144>)
   842ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   842be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   842c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   842c6:	b981      	cbnz	r1, 842ea <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   842c8:	4b09      	ldr	r3, [pc, #36]	; (842f0 <udd_ctrl_in_sent+0x140>)
   842ca:	2201      	movs	r2, #1
   842cc:	701a      	strb	r2, [r3, #0]
   842ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842d2:	b662      	cpsie	i
}
   842d4:	e009      	b.n	842ea <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   842d6:	b92d      	cbnz	r5, 842e4 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   842d8:	4b05      	ldr	r3, [pc, #20]	; (842f0 <udd_ctrl_in_sent+0x140>)
   842da:	2201      	movs	r2, #1
   842dc:	701a      	strb	r2, [r3, #0]
   842de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842e2:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   842e4:	4b04      	ldr	r3, [pc, #16]	; (842f8 <udd_ctrl_in_sent+0x148>)
   842e6:	2204      	movs	r2, #4
   842e8:	701a      	strb	r2, [r3, #0]
}
   842ea:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   842ec:	2201      	movs	r2, #1
   842ee:	e79d      	b.n	8422c <udd_ctrl_in_sent+0x7c>
   842f0:	20000982 	.word	0x20000982
   842f4:	400a4000 	.word	0x400a4000
   842f8:	20002104 	.word	0x20002104
   842fc:	20002100 	.word	0x20002100
   84300:	2000269c 	.word	0x2000269c
   84304:	20002102 	.word	0x20002102
   84308:	200020fd 	.word	0x200020fd
   8430c:	20180000 	.word	0x20180000
   84310:	000841a1 	.word	0x000841a1
   84314:	000840e1 	.word	0x000840e1

00084318 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   84318:	b538      	push	{r3, r4, r5, lr}
   8431a:	4603      	mov	r3, r0
   8431c:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   8431e:	7d19      	ldrb	r1, [r3, #20]
   84320:	f011 0f01 	tst.w	r1, #1
   84324:	d011      	beq.n	8434a <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   84326:	7d19      	ldrb	r1, [r3, #20]
   84328:	f36f 0100 	bfc	r1, #0, #1
   8432c:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8432e:	681c      	ldr	r4, [r3, #0]
   84330:	b15c      	cbz	r4, 8434a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   84332:	f102 0108 	add.w	r1, r2, #8
   84336:	0149      	lsls	r1, r1, #5
   84338:	4d04      	ldr	r5, [pc, #16]	; (8434c <udd_ep_finish_job+0x34>)
   8433a:	5869      	ldr	r1, [r5, r1]
   8433c:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   84340:	bf18      	it	ne
   84342:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84346:	6899      	ldr	r1, [r3, #8]
   84348:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   8434a:	bd38      	pop	{r3, r4, r5, pc}
   8434c:	400a4000 	.word	0x400a4000

00084350 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84352:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84354:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84356:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8435a:	496c      	ldr	r1, [pc, #432]	; (8450c <udd_ep_trans_done+0x1bc>)
   8435c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84360:	7d09      	ldrb	r1, [r1, #20]
   84362:	f011 0f01 	tst.w	r1, #1
   84366:	f000 80ca 	beq.w	844fe <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8436a:	4601      	mov	r1, r0
   8436c:	4867      	ldr	r0, [pc, #412]	; (8450c <udd_ep_trans_done+0x1bc>)
   8436e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84372:	68cd      	ldr	r5, [r1, #12]
   84374:	6888      	ldr	r0, [r1, #8]
   84376:	4285      	cmp	r5, r0
   84378:	f000 80a6 	beq.w	844c8 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8437c:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8437e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   84382:	d863      	bhi.n	8444c <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84384:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   84386:	0151      	lsls	r1, r2, #5
   84388:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8438c:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84390:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   84394:	f016 0f08 	tst.w	r6, #8
   84398:	d014      	beq.n	843c4 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8439a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8439e:	f006 0607 	and.w	r6, r6, #7
   843a2:	2108      	movs	r1, #8
   843a4:	40b1      	lsls	r1, r6
   843a6:	3901      	subs	r1, #1
   843a8:	4201      	tst	r1, r0
   843aa:	d068      	beq.n	8447e <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   843ac:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   843b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   843b4:	4e55      	ldr	r6, [pc, #340]	; (8450c <udd_ep_trans_done+0x1bc>)
   843b6:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   843ba:	7d0e      	ldrb	r6, [r1, #20]
   843bc:	f36f 0641 	bfc	r6, #1, #1
   843c0:	750e      	strb	r6, [r1, #20]
   843c2:	e05c      	b.n	8447e <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   843c4:	0151      	lsls	r1, r2, #5
   843c6:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   843ca:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   843ce:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843d2:	f3c6 1601 	ubfx	r6, r6, #4, #2
   843d6:	2e01      	cmp	r6, #1
   843d8:	d14f      	bne.n	8447a <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   843da:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843de:	f006 0607 	and.w	r6, r6, #7
   843e2:	2108      	movs	r1, #8
   843e4:	40b1      	lsls	r1, r6
   843e6:	4281      	cmp	r1, r0
   843e8:	d247      	bcs.n	8447a <udd_ep_trans_done+0x12a>
   843ea:	e048      	b.n	8447e <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   843ec:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   843f0:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   843f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   843f6:	4a45      	ldr	r2, [pc, #276]	; (8450c <udd_ep_trans_done+0x1bc>)
   843f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   843fc:	68d1      	ldr	r1, [r2, #12]
   843fe:	4401      	add	r1, r0
   84400:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   84402:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84404:	4a42      	ldr	r2, [pc, #264]	; (84510 <udd_ep_trans_done+0x1c0>)
   84406:	6911      	ldr	r1, [r2, #16]
   84408:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   8440c:	fa00 f303 	lsl.w	r3, r0, r3
   84410:	430b      	orrs	r3, r1
   84412:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84414:	2d00      	cmp	r5, #0
   84416:	d172      	bne.n	844fe <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   84418:	4b3e      	ldr	r3, [pc, #248]	; (84514 <udd_ep_trans_done+0x1c4>)
   8441a:	2201      	movs	r2, #1
   8441c:	701a      	strb	r2, [r3, #0]
   8441e:	f3bf 8f5f 	dmb	sy
   84422:	b662      	cpsie	i
}
   84424:	e06b      	b.n	844fe <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   84426:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8442a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   8442e:	4b38      	ldr	r3, [pc, #224]	; (84510 <udd_ep_trans_done+0x1c0>)
   84430:	6919      	ldr	r1, [r3, #16]
   84432:	f44f 7080 	mov.w	r0, #256	; 0x100
   84436:	fa00 f202 	lsl.w	r2, r0, r2
   8443a:	430a      	orrs	r2, r1
   8443c:	611a      	str	r2, [r3, #16]
			return;
   8443e:	e05e      	b.n	844fe <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84440:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84444:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84448:	2400      	movs	r4, #0
   8444a:	e018      	b.n	8447e <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   8444c:	0151      	lsls	r1, r2, #5
   8444e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84452:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84456:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   8445a:	f014 0408 	ands.w	r4, r4, #8
   8445e:	d1ef      	bne.n	84440 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84460:	0151      	lsls	r1, r2, #5
   84462:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84466:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8446a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   8446e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   84472:	2801      	cmp	r0, #1
   84474:	d044      	beq.n	84500 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84476:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8447a:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8447e:	4926      	ldr	r1, [pc, #152]	; (84518 <udd_ep_trans_done+0x1c8>)
   84480:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   84484:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   84488:	4f20      	ldr	r7, [pc, #128]	; (8450c <udd_ep_trans_done+0x1bc>)
   8448a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8448e:	6876      	ldr	r6, [r6, #4]
   84490:	4435      	add	r5, r6
   84492:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84494:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84498:	b672      	cpsid	i
   8449a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8449e:	4e1d      	ldr	r6, [pc, #116]	; (84514 <udd_ep_trans_done+0x1c4>)
   844a0:	2700      	movs	r7, #0
   844a2:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   844a4:	68ce      	ldr	r6, [r1, #12]
   844a6:	f016 0f10 	tst.w	r6, #16
   844aa:	d09f      	beq.n	843ec <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   844ac:	b92d      	cbnz	r5, 844ba <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   844ae:	4919      	ldr	r1, [pc, #100]	; (84514 <udd_ep_trans_done+0x1c4>)
   844b0:	2001      	movs	r0, #1
   844b2:	7008      	strb	r0, [r1, #0]
   844b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   844b8:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   844ba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   844be:	4813      	ldr	r0, [pc, #76]	; (8450c <udd_ep_trans_done+0x1bc>)
   844c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   844c4:	68c8      	ldr	r0, [r1, #12]
   844c6:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   844c8:	0151      	lsls	r1, r2, #5
   844ca:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   844ce:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   844d2:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   844d6:	f010 0f08 	tst.w	r0, #8
   844da:	d008      	beq.n	844ee <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   844dc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   844e0:	4c0a      	ldr	r4, [pc, #40]	; (8450c <udd_ep_trans_done+0x1bc>)
   844e2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   844e6:	7d00      	ldrb	r0, [r0, #20]
   844e8:	f010 0f02 	tst.w	r0, #2
   844ec:	d19b      	bne.n	84426 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   844ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   844f2:	2100      	movs	r1, #0
   844f4:	4805      	ldr	r0, [pc, #20]	; (8450c <udd_ep_trans_done+0x1bc>)
   844f6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   844fa:	4b08      	ldr	r3, [pc, #32]	; (8451c <udd_ep_trans_done+0x1cc>)
   844fc:	4798      	blx	r3
}
   844fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84500:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84504:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   84508:	e7b9      	b.n	8447e <udd_ep_trans_done+0x12e>
   8450a:	bf00      	nop
   8450c:	20002108 	.word	0x20002108
   84510:	400a4000 	.word	0x400a4000
   84514:	20000982 	.word	0x20000982
   84518:	400a4300 	.word	0x400a4300
   8451c:	00084319 	.word	0x00084319

00084520 <UDPHS_Handler>:
{
   84520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   84524:	201d      	movs	r0, #29
   84526:	4ba0      	ldr	r3, [pc, #640]	; (847a8 <UDPHS_Handler+0x288>)
   84528:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8452a:	4ba0      	ldr	r3, [pc, #640]	; (847ac <UDPHS_Handler+0x28c>)
   8452c:	4798      	blx	r3
   8452e:	b920      	cbnz	r0, 8453a <UDPHS_Handler+0x1a>
   84530:	4b9f      	ldr	r3, [pc, #636]	; (847b0 <UDPHS_Handler+0x290>)
   84532:	695b      	ldr	r3, [r3, #20]
   84534:	f013 0f02 	tst.w	r3, #2
   84538:	d041      	beq.n	845be <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   8453a:	4b9d      	ldr	r3, [pc, #628]	; (847b0 <UDPHS_Handler+0x290>)
   8453c:	695b      	ldr	r3, [r3, #20]
   8453e:	f013 0f08 	tst.w	r3, #8
   84542:	d143      	bne.n	845cc <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   84544:	4b9a      	ldr	r3, [pc, #616]	; (847b0 <UDPHS_Handler+0x290>)
   84546:	695b      	ldr	r3, [r3, #20]
   84548:	f013 0f04 	tst.w	r3, #4
   8454c:	d14c      	bne.n	845e8 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   8454e:	4a98      	ldr	r2, [pc, #608]	; (847b0 <UDPHS_Handler+0x290>)
   84550:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84554:	6952      	ldr	r2, [r2, #20]
   84556:	f412 7f80 	tst.w	r2, #256	; 0x100
   8455a:	d029      	beq.n	845b0 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   8455c:	4a94      	ldr	r2, [pc, #592]	; (847b0 <UDPHS_Handler+0x290>)
   8455e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84562:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   84566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8456a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8456e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   84572:	d13f      	bne.n	845f4 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   84574:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84578:	d006      	beq.n	84588 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8457a:	4a8d      	ldr	r2, [pc, #564]	; (847b0 <UDPHS_Handler+0x290>)
   8457c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84580:	f412 6f80 	tst.w	r2, #1024	; 0x400
   84584:	f040 809e 	bne.w	846c4 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   84588:	f413 7f00 	tst.w	r3, #512	; 0x200
   8458c:	f040 809d 	bne.w	846ca <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   84590:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84594:	d004      	beq.n	845a0 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   84596:	4a86      	ldr	r2, [pc, #536]	; (847b0 <UDPHS_Handler+0x290>)
   84598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8459c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   845a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   845a4:	f040 8144 	bne.w	84830 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   845a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   845ac:	f040 8155 	bne.w	8485a <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   845b0:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   845b2:	497f      	ldr	r1, [pc, #508]	; (847b0 <UDPHS_Handler+0x290>)
   845b4:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   845b8:	f44f 7e80 	mov.w	lr, #256	; 0x100
   845bc:	e19c      	b.n	848f8 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   845be:	b672      	cpsid	i
   845c0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   845c4:	4b7b      	ldr	r3, [pc, #492]	; (847b4 <UDPHS_Handler+0x294>)
   845c6:	2200      	movs	r2, #0
   845c8:	701a      	strb	r2, [r3, #0]
		return;
   845ca:	e008      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ack_sof();
   845cc:	4b78      	ldr	r3, [pc, #480]	; (847b0 <UDPHS_Handler+0x290>)
   845ce:	2208      	movs	r2, #8
   845d0:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   845d2:	695b      	ldr	r3, [r3, #20]
   845d4:	f013 0f01 	tst.w	r3, #1
   845d8:	d003      	beq.n	845e2 <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   845da:	4b77      	ldr	r3, [pc, #476]	; (847b8 <UDPHS_Handler+0x298>)
   845dc:	4798      	blx	r3
}
   845de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   845e2:	4b76      	ldr	r3, [pc, #472]	; (847bc <UDPHS_Handler+0x29c>)
   845e4:	4798      	blx	r3
   845e6:	e7f8      	b.n	845da <UDPHS_Handler+0xba>
		udd_ack_msof();
   845e8:	4b71      	ldr	r3, [pc, #452]	; (847b0 <UDPHS_Handler+0x290>)
   845ea:	2204      	movs	r2, #4
   845ec:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   845ee:	4b73      	ldr	r3, [pc, #460]	; (847bc <UDPHS_Handler+0x29c>)
   845f0:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   845f2:	e7f4      	b.n	845de <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   845f4:	4b72      	ldr	r3, [pc, #456]	; (847c0 <UDPHS_Handler+0x2a0>)
   845f6:	781b      	ldrb	r3, [r3, #0]
   845f8:	2b00      	cmp	r3, #0
   845fa:	d140      	bne.n	8467e <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   845fc:	4b6c      	ldr	r3, [pc, #432]	; (847b0 <UDPHS_Handler+0x290>)
   845fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84602:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84606:	2b08      	cmp	r3, #8
   84608:	d13e      	bne.n	84688 <UDPHS_Handler+0x168>
   8460a:	4a6e      	ldr	r2, [pc, #440]	; (847c4 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8460c:	4b6e      	ldr	r3, [pc, #440]	; (847c8 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   8460e:	486f      	ldr	r0, [pc, #444]	; (847cc <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84610:	4619      	mov	r1, r3
   84612:	3301      	adds	r3, #1
   84614:	7809      	ldrb	r1, [r1, #0]
   84616:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   8461a:	4283      	cmp	r3, r0
   8461c:	d1f8      	bne.n	84610 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   8461e:	4b6c      	ldr	r3, [pc, #432]	; (847d0 <UDPHS_Handler+0x2b0>)
   84620:	4798      	blx	r3
   84622:	2800      	cmp	r0, #0
   84624:	d038      	beq.n	84698 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   84626:	4b62      	ldr	r3, [pc, #392]	; (847b0 <UDPHS_Handler+0x290>)
   84628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8462c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   84630:	4b68      	ldr	r3, [pc, #416]	; (847d4 <UDPHS_Handler+0x2b4>)
   84632:	f993 3000 	ldrsb.w	r3, [r3]
   84636:	2b00      	cmp	r3, #0
   84638:	db36      	blt.n	846a8 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8463a:	4b66      	ldr	r3, [pc, #408]	; (847d4 <UDPHS_Handler+0x2b4>)
   8463c:	88db      	ldrh	r3, [r3, #6]
   8463e:	2b00      	cmp	r3, #0
   84640:	d03d      	beq.n	846be <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84642:	2300      	movs	r3, #0
   84644:	4a64      	ldr	r2, [pc, #400]	; (847d8 <UDPHS_Handler+0x2b8>)
   84646:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84648:	4a64      	ldr	r2, [pc, #400]	; (847dc <UDPHS_Handler+0x2bc>)
   8464a:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8464c:	4a5c      	ldr	r2, [pc, #368]	; (847c0 <UDPHS_Handler+0x2a0>)
   8464e:	2101      	movs	r1, #1
   84650:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   84652:	4a57      	ldr	r2, [pc, #348]	; (847b0 <UDPHS_Handler+0x290>)
   84654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84658:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8465c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84660:	b672      	cpsid	i
   84662:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84666:	4c53      	ldr	r4, [pc, #332]	; (847b4 <UDPHS_Handler+0x294>)
   84668:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8466a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8466e:	2800      	cmp	r0, #0
   84670:	d1b5      	bne.n	845de <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   84672:	2201      	movs	r2, #1
   84674:	7022      	strb	r2, [r4, #0]
   84676:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8467a:	b662      	cpsie	i
}
   8467c:	e7af      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   8467e:	4b58      	ldr	r3, [pc, #352]	; (847e0 <UDPHS_Handler+0x2c0>)
   84680:	4798      	blx	r3
		udd_ctrl_init();
   84682:	4b58      	ldr	r3, [pc, #352]	; (847e4 <UDPHS_Handler+0x2c4>)
   84684:	4798      	blx	r3
   84686:	e7b9      	b.n	845fc <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   84688:	4b57      	ldr	r3, [pc, #348]	; (847e8 <UDPHS_Handler+0x2c8>)
   8468a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8468c:	4b48      	ldr	r3, [pc, #288]	; (847b0 <UDPHS_Handler+0x290>)
   8468e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84692:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84696:	e7a2      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   84698:	4b53      	ldr	r3, [pc, #332]	; (847e8 <UDPHS_Handler+0x2c8>)
   8469a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8469c:	4b44      	ldr	r3, [pc, #272]	; (847b0 <UDPHS_Handler+0x290>)
   8469e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   846a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   846a6:	e79a      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   846a8:	2300      	movs	r3, #0
   846aa:	4a4b      	ldr	r2, [pc, #300]	; (847d8 <UDPHS_Handler+0x2b8>)
   846ac:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   846ae:	4a4b      	ldr	r2, [pc, #300]	; (847dc <UDPHS_Handler+0x2bc>)
   846b0:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   846b2:	4b43      	ldr	r3, [pc, #268]	; (847c0 <UDPHS_Handler+0x2a0>)
   846b4:	2202      	movs	r2, #2
   846b6:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   846b8:	4b4c      	ldr	r3, [pc, #304]	; (847ec <UDPHS_Handler+0x2cc>)
   846ba:	4798      	blx	r3
   846bc:	e78f      	b.n	845de <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   846be:	4b4c      	ldr	r3, [pc, #304]	; (847f0 <UDPHS_Handler+0x2d0>)
   846c0:	4798      	blx	r3
			return;
   846c2:	e78c      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   846c4:	4b49      	ldr	r3, [pc, #292]	; (847ec <UDPHS_Handler+0x2cc>)
   846c6:	4798      	blx	r3
		return true;
   846c8:	e789      	b.n	845de <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   846ca:	4b3d      	ldr	r3, [pc, #244]	; (847c0 <UDPHS_Handler+0x2a0>)
   846cc:	781b      	ldrb	r3, [r3, #0]
   846ce:	2b01      	cmp	r3, #1
   846d0:	d00b      	beq.n	846ea <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   846d2:	2b02      	cmp	r3, #2
   846d4:	d001      	beq.n	846da <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   846d6:	2b04      	cmp	r3, #4
   846d8:	d104      	bne.n	846e4 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   846da:	4b41      	ldr	r3, [pc, #260]	; (847e0 <UDPHS_Handler+0x2c0>)
   846dc:	4798      	blx	r3
		udd_ctrl_init();
   846de:	4b41      	ldr	r3, [pc, #260]	; (847e4 <UDPHS_Handler+0x2c4>)
   846e0:	4798      	blx	r3
		return;
   846e2:	e77c      	b.n	845de <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   846e4:	4b40      	ldr	r3, [pc, #256]	; (847e8 <UDPHS_Handler+0x2c8>)
   846e6:	4798      	blx	r3
   846e8:	e7f9      	b.n	846de <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   846ea:	4b31      	ldr	r3, [pc, #196]	; (847b0 <UDPHS_Handler+0x290>)
   846ec:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   846f0:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   846f4:	4b37      	ldr	r3, [pc, #220]	; (847d4 <UDPHS_Handler+0x2b4>)
   846f6:	899b      	ldrh	r3, [r3, #12]
   846f8:	4a38      	ldr	r2, [pc, #224]	; (847dc <UDPHS_Handler+0x2bc>)
   846fa:	8814      	ldrh	r4, [r2, #0]
   846fc:	1822      	adds	r2, r4, r0
   846fe:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84700:	bfbc      	itt	lt
   84702:	1b1b      	sublt	r3, r3, r4
   84704:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84706:	4b33      	ldr	r3, [pc, #204]	; (847d4 <UDPHS_Handler+0x2b4>)
   84708:	689a      	ldr	r2, [r3, #8]
   8470a:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   8470c:	b170      	cbz	r0, 8472c <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8470e:	4b2e      	ldr	r3, [pc, #184]	; (847c8 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   84710:	4619      	mov	r1, r3
   84712:	3301      	adds	r3, #1
   84714:	7809      	ldrb	r1, [r1, #0]
   84716:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   8471a:	b2d9      	uxtb	r1, r3
   8471c:	4281      	cmp	r1, r0
   8471e:	d3f7      	bcc.n	84710 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   84720:	4404      	add	r4, r0
   84722:	b2a4      	uxth	r4, r4
   84724:	4b2d      	ldr	r3, [pc, #180]	; (847dc <UDPHS_Handler+0x2bc>)
   84726:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84728:	2840      	cmp	r0, #64	; 0x40
   8472a:	d00d      	beq.n	84748 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8472c:	4b29      	ldr	r3, [pc, #164]	; (847d4 <UDPHS_Handler+0x2b4>)
   8472e:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84730:	695b      	ldr	r3, [r3, #20]
   84732:	b10b      	cbz	r3, 84738 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   84734:	4798      	blx	r3
   84736:	b370      	cbz	r0, 84796 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   84738:	4b1d      	ldr	r3, [pc, #116]	; (847b0 <UDPHS_Handler+0x290>)
   8473a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8473e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   84742:	4b2b      	ldr	r3, [pc, #172]	; (847f0 <UDPHS_Handler+0x2d0>)
   84744:	4798      	blx	r3
		return;
   84746:	e74a      	b.n	845de <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   84748:	4b22      	ldr	r3, [pc, #136]	; (847d4 <UDPHS_Handler+0x2b4>)
   8474a:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   8474c:	4b22      	ldr	r3, [pc, #136]	; (847d8 <UDPHS_Handler+0x2b8>)
   8474e:	881b      	ldrh	r3, [r3, #0]
   84750:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   84752:	429a      	cmp	r2, r3
   84754:	ddea      	ble.n	8472c <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84756:	4b1f      	ldr	r3, [pc, #124]	; (847d4 <UDPHS_Handler+0x2b4>)
   84758:	899b      	ldrh	r3, [r3, #12]
   8475a:	42a3      	cmp	r3, r4
   8475c:	d04a      	beq.n	847f4 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   8475e:	4b14      	ldr	r3, [pc, #80]	; (847b0 <UDPHS_Handler+0x290>)
   84760:	f44f 7200 	mov.w	r2, #512	; 0x200
   84764:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   84768:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8476c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84770:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84774:	b672      	cpsid	i
   84776:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8477a:	480e      	ldr	r0, [pc, #56]	; (847b4 <UDPHS_Handler+0x294>)
   8477c:	2400      	movs	r4, #0
   8477e:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   84780:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84784:	2900      	cmp	r1, #0
   84786:	f47f af2a 	bne.w	845de <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   8478a:	2201      	movs	r2, #1
   8478c:	7002      	strb	r2, [r0, #0]
   8478e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84792:	b662      	cpsie	i
}
   84794:	e723      	b.n	845de <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   84796:	4b14      	ldr	r3, [pc, #80]	; (847e8 <UDPHS_Handler+0x2c8>)
   84798:	4798      	blx	r3
				udd_ack_out_received(0);
   8479a:	4b05      	ldr	r3, [pc, #20]	; (847b0 <UDPHS_Handler+0x290>)
   8479c:	f44f 7200 	mov.w	r2, #512	; 0x200
   847a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   847a4:	e71b      	b.n	845de <UDPHS_Handler+0xbe>
   847a6:	bf00      	nop
   847a8:	00083ef5 	.word	0x00083ef5
   847ac:	00083f71 	.word	0x00083f71
   847b0:	400a4000 	.word	0x400a4000
   847b4:	20000982 	.word	0x20000982
   847b8:	0008132d 	.word	0x0008132d
   847bc:	00083289 	.word	0x00083289
   847c0:	20002104 	.word	0x20002104
   847c4:	2000269b 	.word	0x2000269b
   847c8:	20180000 	.word	0x20180000
   847cc:	20180008 	.word	0x20180008
   847d0:	000832cd 	.word	0x000832cd
   847d4:	2000269c 	.word	0x2000269c
   847d8:	20002102 	.word	0x20002102
   847dc:	20002100 	.word	0x20002100
   847e0:	000841a1 	.word	0x000841a1
   847e4:	000840e1 	.word	0x000840e1
   847e8:	00084135 	.word	0x00084135
   847ec:	000841b1 	.word	0x000841b1
   847f0:	0008414d 	.word	0x0008414d
		if (!udd_g_ctrlreq.over_under_run) {
   847f4:	4b9d      	ldr	r3, [pc, #628]	; (84a6c <UDPHS_Handler+0x54c>)
   847f6:	695b      	ldr	r3, [r3, #20]
   847f8:	b153      	cbz	r3, 84810 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   847fa:	4798      	blx	r3
   847fc:	b180      	cbz	r0, 84820 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   847fe:	499c      	ldr	r1, [pc, #624]	; (84a70 <UDPHS_Handler+0x550>)
   84800:	4a9c      	ldr	r2, [pc, #624]	; (84a74 <UDPHS_Handler+0x554>)
   84802:	880b      	ldrh	r3, [r1, #0]
   84804:	8810      	ldrh	r0, [r2, #0]
   84806:	4403      	add	r3, r0
   84808:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8480a:	2300      	movs	r3, #0
   8480c:	8013      	strh	r3, [r2, #0]
   8480e:	e7a6      	b.n	8475e <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   84810:	4b99      	ldr	r3, [pc, #612]	; (84a78 <UDPHS_Handler+0x558>)
   84812:	4798      	blx	r3
			udd_ack_out_received(0);
   84814:	4b99      	ldr	r3, [pc, #612]	; (84a7c <UDPHS_Handler+0x55c>)
   84816:	f44f 7200 	mov.w	r2, #512	; 0x200
   8481a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8481e:	e6de      	b.n	845de <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   84820:	4b95      	ldr	r3, [pc, #596]	; (84a78 <UDPHS_Handler+0x558>)
   84822:	4798      	blx	r3
			udd_ack_out_received(0);
   84824:	4b95      	ldr	r3, [pc, #596]	; (84a7c <UDPHS_Handler+0x55c>)
   84826:	f44f 7200 	mov.w	r2, #512	; 0x200
   8482a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8482e:	e6d6      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   84830:	4b92      	ldr	r3, [pc, #584]	; (84a7c <UDPHS_Handler+0x55c>)
   84832:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84836:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   8483a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8483e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84842:	f47f aecc 	bne.w	845de <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84846:	4b8e      	ldr	r3, [pc, #568]	; (84a80 <UDPHS_Handler+0x560>)
   84848:	781b      	ldrb	r3, [r3, #0]
   8484a:	2b03      	cmp	r3, #3
   8484c:	f47f aec7 	bne.w	845de <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   84850:	4b8a      	ldr	r3, [pc, #552]	; (84a7c <UDPHS_Handler+0x55c>)
   84852:	2220      	movs	r2, #32
   84854:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84858:	e6c1      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   8485a:	4b88      	ldr	r3, [pc, #544]	; (84a7c <UDPHS_Handler+0x55c>)
   8485c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84860:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   84864:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84868:	f413 7f00 	tst.w	r3, #512	; 0x200
   8486c:	f47f aeb7 	bne.w	845de <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84870:	4b83      	ldr	r3, [pc, #524]	; (84a80 <UDPHS_Handler+0x560>)
   84872:	781b      	ldrb	r3, [r3, #0]
   84874:	2b01      	cmp	r3, #1
   84876:	d007      	beq.n	84888 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84878:	2b04      	cmp	r3, #4
   8487a:	f47f aeb0 	bne.w	845de <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   8487e:	4b7f      	ldr	r3, [pc, #508]	; (84a7c <UDPHS_Handler+0x55c>)
   84880:	2220      	movs	r2, #32
   84882:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84886:	e6aa      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   84888:	4b7e      	ldr	r3, [pc, #504]	; (84a84 <UDPHS_Handler+0x564>)
   8488a:	4798      	blx	r3
   8488c:	e6a7      	b.n	845de <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   8488e:	4b7e      	ldr	r3, [pc, #504]	; (84a88 <UDPHS_Handler+0x568>)
   84890:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   84894:	68d9      	ldr	r1, [r3, #12]
   84896:	f011 0f01 	tst.w	r1, #1
   8489a:	f47f aea0 	bne.w	845de <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   8489e:	4877      	ldr	r0, [pc, #476]	; (84a7c <UDPHS_Handler+0x55c>)
   848a0:	6901      	ldr	r1, [r0, #16]
   848a2:	ea21 0606 	bic.w	r6, r1, r6
   848a6:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   848a8:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   848aa:	0c1b      	lsrs	r3, r3, #16
   848ac:	d008      	beq.n	848c0 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   848ae:	4977      	ldr	r1, [pc, #476]	; (84a8c <UDPHS_Handler+0x56c>)
   848b0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   848b4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   848b8:	68e0      	ldr	r0, [r4, #12]
   848ba:	1ac3      	subs	r3, r0, r3
   848bc:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   848be:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   848c0:	4610      	mov	r0, r2
   848c2:	4b73      	ldr	r3, [pc, #460]	; (84a90 <UDPHS_Handler+0x570>)
   848c4:	4798      	blx	r3
			return true;
   848c6:	e68a      	b.n	845de <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   848c8:	0163      	lsls	r3, r4, #5
   848ca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   848ce:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   848d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   848d6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   848da:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   848de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   848e2:	2100      	movs	r1, #0
   848e4:	4869      	ldr	r0, [pc, #420]	; (84a8c <UDPHS_Handler+0x56c>)
   848e6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   848ea:	4b6a      	ldr	r3, [pc, #424]	; (84a94 <UDPHS_Handler+0x574>)
   848ec:	4798      	blx	r3
				return true;
   848ee:	e676      	b.n	845de <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   848f0:	3301      	adds	r3, #1
   848f2:	2b07      	cmp	r3, #7
   848f4:	f000 80dc 	beq.w	84ab0 <UDPHS_Handler+0x590>
   848f8:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   848fa:	461c      	mov	r4, r3
   848fc:	1e5d      	subs	r5, r3, #1
   848fe:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84900:	690f      	ldr	r7, [r1, #16]
   84902:	fa0c f605 	lsl.w	r6, ip, r5
   84906:	4237      	tst	r7, r6
   84908:	d002      	beq.n	84910 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8490a:	6948      	ldr	r0, [r1, #20]
   8490c:	4206      	tst	r6, r0
   8490e:	d1be      	bne.n	8488e <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84910:	690f      	ldr	r7, [r1, #16]
   84912:	fa0e f604 	lsl.w	r6, lr, r4
   84916:	4237      	tst	r7, r6
   84918:	d0ea      	beq.n	848f0 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8491a:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   8491e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   84922:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84926:	d006      	beq.n	84936 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84928:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   8492c:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   84930:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84934:	d0c8      	beq.n	848c8 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84936:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   8493a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8493e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   84942:	d0d5      	beq.n	848f0 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84944:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84948:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   8494c:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84950:	d1ce      	bne.n	848f0 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84952:	4b4a      	ldr	r3, [pc, #296]	; (84a7c <UDPHS_Handler+0x55c>)
   84954:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   84958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8495c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84960:	691a      	ldr	r2, [r3, #16]
   84962:	ea22 0606 	bic.w	r6, r2, r6
   84966:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84968:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   8496c:	4b47      	ldr	r3, [pc, #284]	; (84a8c <UDPHS_Handler+0x56c>)
   8496e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   84972:	f898 3014 	ldrb.w	r3, [r8, #20]
   84976:	f36f 0382 	bfc	r3, #2, #1
   8497a:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8497e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   84982:	f023 0302 	bic.w	r3, r3, #2
   84986:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   8498a:	2320      	movs	r3, #32
   8498c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   84990:	2340      	movs	r3, #64	; 0x40
   84992:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   84996:	e622      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ack_reset();
   84998:	4b38      	ldr	r3, [pc, #224]	; (84a7c <UDPHS_Handler+0x55c>)
   8499a:	2210      	movs	r2, #16
   8499c:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8499e:	4d3b      	ldr	r5, [pc, #236]	; (84a8c <UDPHS_Handler+0x56c>)
   849a0:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   849a2:	2701      	movs	r7, #1
   849a4:	4e3b      	ldr	r6, [pc, #236]	; (84a94 <UDPHS_Handler+0x574>)
   849a6:	3401      	adds	r4, #1
   849a8:	b2e4      	uxtb	r4, r4
   849aa:	4622      	mov	r2, r4
   849ac:	4639      	mov	r1, r7
   849ae:	4628      	mov	r0, r5
   849b0:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   849b2:	3518      	adds	r5, #24
   849b4:	2c06      	cmp	r4, #6
   849b6:	d1f6      	bne.n	849a6 <UDPHS_Handler+0x486>
		udc_reset();
   849b8:	4b37      	ldr	r3, [pc, #220]	; (84a98 <UDPHS_Handler+0x578>)
   849ba:	4798      	blx	r3
	udd_configure_address(0);
   849bc:	4b2f      	ldr	r3, [pc, #188]	; (84a7c <UDPHS_Handler+0x55c>)
   849be:	681a      	ldr	r2, [r3, #0]
   849c0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   849c4:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   849c6:	681a      	ldr	r2, [r3, #0]
   849c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   849cc:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   849ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   849d2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   849d6:	f022 0203 	bic.w	r2, r2, #3
   849da:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   849de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   849e2:	2201      	movs	r2, #1
   849e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   849e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   849ec:	b672      	cpsid	i
   849ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   849f2:	4a2a      	ldr	r2, [pc, #168]	; (84a9c <UDPHS_Handler+0x57c>)
   849f4:	2000      	movs	r0, #0
   849f6:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   849f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   849fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84a00:	f44f 7200 	mov.w	r2, #512	; 0x200
   84a04:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84a08:	691a      	ldr	r2, [r3, #16]
   84a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84a0e:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84a10:	b929      	cbnz	r1, 84a1e <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   84a12:	4b22      	ldr	r3, [pc, #136]	; (84a9c <UDPHS_Handler+0x57c>)
   84a14:	2201      	movs	r2, #1
   84a16:	701a      	strb	r2, [r3, #0]
   84a18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a1c:	b662      	cpsie	i
		udd_ctrl_init();
   84a1e:	4b20      	ldr	r3, [pc, #128]	; (84aa0 <UDPHS_Handler+0x580>)
   84a20:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84a22:	4b16      	ldr	r3, [pc, #88]	; (84a7c <UDPHS_Handler+0x55c>)
   84a24:	691a      	ldr	r2, [r3, #16]
   84a26:	f042 0208 	orr.w	r2, r2, #8
   84a2a:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84a2c:	691a      	ldr	r2, [r3, #16]
   84a2e:	f042 0204 	orr.w	r2, r2, #4
   84a32:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84a34:	691a      	ldr	r2, [r3, #16]
   84a36:	f042 0202 	orr.w	r2, r2, #2
   84a3a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84a3c:	e5cf      	b.n	845de <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   84a3e:	4b0f      	ldr	r3, [pc, #60]	; (84a7c <UDPHS_Handler+0x55c>)
   84a40:	2220      	movs	r2, #32
   84a42:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84a44:	691a      	ldr	r2, [r3, #16]
   84a46:	f022 0202 	bic.w	r2, r2, #2
   84a4a:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84a4c:	691a      	ldr	r2, [r3, #16]
   84a4e:	f042 0220 	orr.w	r2, r2, #32
   84a52:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84a54:	2202      	movs	r2, #2
   84a56:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   84a58:	201d      	movs	r0, #29
   84a5a:	4b12      	ldr	r3, [pc, #72]	; (84aa4 <UDPHS_Handler+0x584>)
   84a5c:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84a5e:	4b12      	ldr	r3, [pc, #72]	; (84aa8 <UDPHS_Handler+0x588>)
   84a60:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84a62:	2000      	movs	r0, #0
   84a64:	4b11      	ldr	r3, [pc, #68]	; (84aac <UDPHS_Handler+0x58c>)
   84a66:	4798      	blx	r3
		goto udd_interrupt_end;
   84a68:	e5b9      	b.n	845de <UDPHS_Handler+0xbe>
   84a6a:	bf00      	nop
   84a6c:	2000269c 	.word	0x2000269c
   84a70:	20002102 	.word	0x20002102
   84a74:	20002100 	.word	0x20002100
   84a78:	00084135 	.word	0x00084135
   84a7c:	400a4000 	.word	0x400a4000
   84a80:	20002104 	.word	0x20002104
   84a84:	0008414d 	.word	0x0008414d
   84a88:	400a4300 	.word	0x400a4300
   84a8c:	20002108 	.word	0x20002108
   84a90:	00084351 	.word	0x00084351
   84a94:	00084319 	.word	0x00084319
   84a98:	00083241 	.word	0x00083241
   84a9c:	20000982 	.word	0x20000982
   84aa0:	000840e1 	.word	0x000840e1
   84aa4:	00083f21 	.word	0x00083f21
   84aa8:	00081315 	.word	0x00081315
   84aac:	0008406d 	.word	0x0008406d
	if (Is_udd_reset()) {
   84ab0:	4b18      	ldr	r3, [pc, #96]	; (84b14 <UDPHS_Handler+0x5f4>)
   84ab2:	695b      	ldr	r3, [r3, #20]
   84ab4:	f013 0f10 	tst.w	r3, #16
   84ab8:	f47f af6e 	bne.w	84998 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84abc:	4b15      	ldr	r3, [pc, #84]	; (84b14 <UDPHS_Handler+0x5f4>)
   84abe:	691b      	ldr	r3, [r3, #16]
   84ac0:	f013 0f02 	tst.w	r3, #2
   84ac4:	d004      	beq.n	84ad0 <UDPHS_Handler+0x5b0>
   84ac6:	4b13      	ldr	r3, [pc, #76]	; (84b14 <UDPHS_Handler+0x5f4>)
   84ac8:	695b      	ldr	r3, [r3, #20]
   84aca:	f013 0f02 	tst.w	r3, #2
   84ace:	d1b6      	bne.n	84a3e <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   84ad0:	4b10      	ldr	r3, [pc, #64]	; (84b14 <UDPHS_Handler+0x5f4>)
   84ad2:	695b      	ldr	r3, [r3, #20]
   84ad4:	f013 0f20 	tst.w	r3, #32
   84ad8:	f43f ad81 	beq.w	845de <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   84adc:	2001      	movs	r0, #1
   84ade:	4b0e      	ldr	r3, [pc, #56]	; (84b18 <UDPHS_Handler+0x5f8>)
   84ae0:	4798      	blx	r3
		udd_ack_suspend();
   84ae2:	4b0c      	ldr	r3, [pc, #48]	; (84b14 <UDPHS_Handler+0x5f4>)
   84ae4:	2202      	movs	r2, #2
   84ae6:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   84ae8:	2220      	movs	r2, #32
   84aea:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   84aec:	691a      	ldr	r2, [r3, #16]
   84aee:	f022 0220 	bic.w	r2, r2, #32
   84af2:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84af4:	691a      	ldr	r2, [r3, #16]
   84af6:	f042 0202 	orr.w	r2, r2, #2
   84afa:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   84afc:	691a      	ldr	r2, [r3, #16]
   84afe:	f042 0208 	orr.w	r2, r2, #8
   84b02:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84b04:	691a      	ldr	r2, [r3, #16]
   84b06:	f042 0204 	orr.w	r2, r2, #4
   84b0a:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   84b0c:	4b03      	ldr	r3, [pc, #12]	; (84b1c <UDPHS_Handler+0x5fc>)
   84b0e:	4798      	blx	r3
		goto udd_interrupt_end;
   84b10:	e565      	b.n	845de <UDPHS_Handler+0xbe>
   84b12:	bf00      	nop
   84b14:	400a4000 	.word	0x400a4000
   84b18:	0008406d 	.word	0x0008406d
   84b1c:	00081321 	.word	0x00081321

00084b20 <udd_attach>:
{
   84b20:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84b22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84b26:	b672      	cpsid	i
   84b28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84b2c:	4b1d      	ldr	r3, [pc, #116]	; (84ba4 <udd_attach+0x84>)
   84b2e:	2200      	movs	r2, #0
   84b30:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   84b32:	2001      	movs	r0, #1
   84b34:	4b1c      	ldr	r3, [pc, #112]	; (84ba8 <udd_attach+0x88>)
   84b36:	4798      	blx	r3
	udd_enable_periph_ck();
   84b38:	201d      	movs	r0, #29
   84b3a:	4b1c      	ldr	r3, [pc, #112]	; (84bac <udd_attach+0x8c>)
   84b3c:	4798      	blx	r3
	udd_attach_device();
   84b3e:	4b1c      	ldr	r3, [pc, #112]	; (84bb0 <udd_attach+0x90>)
   84b40:	681a      	ldr	r2, [r3, #0]
   84b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84b46:	601a      	str	r2, [r3, #0]
   84b48:	681a      	ldr	r2, [r3, #0]
   84b4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84b4e:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84b50:	691a      	ldr	r2, [r3, #16]
   84b52:	f042 0210 	orr.w	r2, r2, #16
   84b56:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84b58:	691a      	ldr	r2, [r3, #16]
   84b5a:	f042 0202 	orr.w	r2, r2, #2
   84b5e:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84b60:	691a      	ldr	r2, [r3, #16]
   84b62:	f042 0220 	orr.w	r2, r2, #32
   84b66:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84b68:	691a      	ldr	r2, [r3, #16]
   84b6a:	f042 0208 	orr.w	r2, r2, #8
   84b6e:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84b70:	691a      	ldr	r2, [r3, #16]
   84b72:	f042 0204 	orr.w	r2, r2, #4
   84b76:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84b78:	2208      	movs	r2, #8
   84b7a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84b7c:	2204      	movs	r2, #4
   84b7e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84b80:	2210      	movs	r2, #16
   84b82:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84b84:	2202      	movs	r2, #2
   84b86:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84b88:	2220      	movs	r2, #32
   84b8a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   84b8c:	201d      	movs	r0, #29
   84b8e:	4b09      	ldr	r3, [pc, #36]	; (84bb4 <udd_attach+0x94>)
   84b90:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84b92:	b92c      	cbnz	r4, 84ba0 <udd_attach+0x80>
		cpu_irq_enable();
   84b94:	4b03      	ldr	r3, [pc, #12]	; (84ba4 <udd_attach+0x84>)
   84b96:	2201      	movs	r2, #1
   84b98:	701a      	strb	r2, [r3, #0]
   84b9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84b9e:	b662      	cpsie	i
}
   84ba0:	bd10      	pop	{r4, pc}
   84ba2:	bf00      	nop
   84ba4:	20000982 	.word	0x20000982
   84ba8:	0008406d 	.word	0x0008406d
   84bac:	00083ef5 	.word	0x00083ef5
   84bb0:	400a4000 	.word	0x400a4000
   84bb4:	00083f21 	.word	0x00083f21

00084bb8 <udd_enable>:
{
   84bb8:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   84bba:	4b2a      	ldr	r3, [pc, #168]	; (84c64 <udd_enable+0xac>)
   84bbc:	4798      	blx	r3
	udd_enable_periph_ck();
   84bbe:	201d      	movs	r0, #29
   84bc0:	4b29      	ldr	r3, [pc, #164]	; (84c68 <udd_enable+0xb0>)
   84bc2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84bc4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84bc8:	b672      	cpsid	i
   84bca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84bce:	2300      	movs	r3, #0
   84bd0:	4a26      	ldr	r2, [pc, #152]	; (84c6c <udd_enable+0xb4>)
   84bd2:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   84bd4:	4926      	ldr	r1, [pc, #152]	; (84c70 <udd_enable+0xb8>)
   84bd6:	680a      	ldr	r2, [r1, #0]
   84bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84bdc:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84bde:	4a25      	ldr	r2, [pc, #148]	; (84c74 <udd_enable+0xbc>)
   84be0:	2150      	movs	r1, #80	; 0x50
   84be2:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84be6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   84bea:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   84bec:	4822      	ldr	r0, [pc, #136]	; (84c78 <udd_enable+0xc0>)
   84bee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84bf2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   84bf6:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   84bf8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84bfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   84c04:	f36f 0282 	bfc	r2, #2, #1
   84c08:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84c0a:	3301      	adds	r3, #1
   84c0c:	2b06      	cmp	r3, #6
   84c0e:	d1ee      	bne.n	84bee <udd_enable+0x36>
	udd_high_speed_enable();
   84c10:	4a17      	ldr	r2, [pc, #92]	; (84c70 <udd_enable+0xb8>)
   84c12:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84c16:	f023 0303 	bic.w	r3, r3, #3
   84c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84c1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84c22:	4b16      	ldr	r3, [pc, #88]	; (84c7c <udd_enable+0xc4>)
   84c24:	4798      	blx	r3
	udd_b_idle = false;
   84c26:	2300      	movs	r3, #0
   84c28:	4a15      	ldr	r2, [pc, #84]	; (84c80 <udd_enable+0xc8>)
   84c2a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84c30:	b672      	cpsid	i
   84c32:	f3bf 8f5f 	dmb	sy
   84c36:	4a0d      	ldr	r2, [pc, #52]	; (84c6c <udd_enable+0xb4>)
   84c38:	7013      	strb	r3, [r2, #0]
   84c3a:	4a12      	ldr	r2, [pc, #72]	; (84c84 <udd_enable+0xcc>)
   84c3c:	78d3      	ldrb	r3, [r2, #3]
   84c3e:	3301      	adds	r3, #1
   84c40:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84c42:	b929      	cbnz	r1, 84c50 <udd_enable+0x98>
		cpu_irq_enable();
   84c44:	4b09      	ldr	r3, [pc, #36]	; (84c6c <udd_enable+0xb4>)
   84c46:	2201      	movs	r2, #1
   84c48:	701a      	strb	r2, [r3, #0]
   84c4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c4e:	b662      	cpsie	i
	udd_attach();
   84c50:	4b0d      	ldr	r3, [pc, #52]	; (84c88 <udd_enable+0xd0>)
   84c52:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84c54:	b92c      	cbnz	r4, 84c62 <udd_enable+0xaa>
		cpu_irq_enable();
   84c56:	4b05      	ldr	r3, [pc, #20]	; (84c6c <udd_enable+0xb4>)
   84c58:	2201      	movs	r2, #1
   84c5a:	701a      	strb	r2, [r3, #0]
   84c5c:	f3bf 8f5f 	dmb	sy
   84c60:	b662      	cpsie	i
}
   84c62:	bd10      	pop	{r4, pc}
   84c64:	00082f39 	.word	0x00082f39
   84c68:	00083ef5 	.word	0x00083ef5
   84c6c:	20000982 	.word	0x20000982
   84c70:	400a4000 	.word	0x400a4000
   84c74:	e000e100 	.word	0xe000e100
   84c78:	20002108 	.word	0x20002108
   84c7c:	00083f5d 	.word	0x00083f5d
   84c80:	200020fe 	.word	0x200020fe
   84c84:	20002688 	.word	0x20002688
   84c88:	00084b21 	.word	0x00084b21

00084c8c <udd_detach>:
{
   84c8c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   84c8e:	201d      	movs	r0, #29
   84c90:	4b08      	ldr	r3, [pc, #32]	; (84cb4 <udd_detach+0x28>)
   84c92:	4798      	blx	r3
	udd_detach_device();
   84c94:	4b08      	ldr	r3, [pc, #32]	; (84cb8 <udd_detach+0x2c>)
   84c96:	681a      	ldr	r2, [r3, #0]
   84c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84c9c:	601a      	str	r2, [r3, #0]
   84c9e:	681a      	ldr	r2, [r3, #0]
   84ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84ca4:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   84ca6:	201d      	movs	r0, #29
   84ca8:	4b04      	ldr	r3, [pc, #16]	; (84cbc <udd_detach+0x30>)
   84caa:	4798      	blx	r3
	udd_sleep_mode(false);
   84cac:	2000      	movs	r0, #0
   84cae:	4b04      	ldr	r3, [pc, #16]	; (84cc0 <udd_detach+0x34>)
   84cb0:	4798      	blx	r3
}
   84cb2:	bd08      	pop	{r3, pc}
   84cb4:	00083ef5 	.word	0x00083ef5
   84cb8:	400a4000 	.word	0x400a4000
   84cbc:	00083f21 	.word	0x00083f21
   84cc0:	0008406d 	.word	0x0008406d

00084cc4 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84cc4:	4b02      	ldr	r3, [pc, #8]	; (84cd0 <udd_is_high_speed+0xc>)
   84cc6:	6958      	ldr	r0, [r3, #20]
}
   84cc8:	f000 0001 	and.w	r0, r0, #1
   84ccc:	4770      	bx	lr
   84cce:	bf00      	nop
   84cd0:	400a4000 	.word	0x400a4000

00084cd4 <udd_set_address>:
	udd_disable_address();
   84cd4:	4b08      	ldr	r3, [pc, #32]	; (84cf8 <udd_set_address+0x24>)
   84cd6:	681a      	ldr	r2, [r3, #0]
   84cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84cdc:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84cde:	681a      	ldr	r2, [r3, #0]
   84ce0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84ce4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84ce8:	4302      	orrs	r2, r0
   84cea:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84cec:	681a      	ldr	r2, [r3, #0]
   84cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84cf2:	601a      	str	r2, [r3, #0]
}
   84cf4:	4770      	bx	lr
   84cf6:	bf00      	nop
   84cf8:	400a4000 	.word	0x400a4000

00084cfc <udd_getaddress>:
	return udd_get_configured_address();
   84cfc:	4b02      	ldr	r3, [pc, #8]	; (84d08 <udd_getaddress+0xc>)
   84cfe:	6818      	ldr	r0, [r3, #0]
}
   84d00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84d04:	4770      	bx	lr
   84d06:	bf00      	nop
   84d08:	400a4000 	.word	0x400a4000

00084d0c <udd_get_frame_number>:
	return udd_frame_number();
   84d0c:	4b02      	ldr	r3, [pc, #8]	; (84d18 <udd_get_frame_number+0xc>)
   84d0e:	6858      	ldr	r0, [r3, #4]
}
   84d10:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84d14:	4770      	bx	lr
   84d16:	bf00      	nop
   84d18:	400a4000 	.word	0x400a4000

00084d1c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84d1c:	4b02      	ldr	r3, [pc, #8]	; (84d28 <udd_get_micro_frame_number+0xc>)
   84d1e:	6858      	ldr	r0, [r3, #4]
}
   84d20:	f000 0007 	and.w	r0, r0, #7
   84d24:	4770      	bx	lr
   84d26:	bf00      	nop
   84d28:	400a4000 	.word	0x400a4000

00084d2c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84d2c:	4b01      	ldr	r3, [pc, #4]	; (84d34 <udd_set_setup_payload+0x8>)
   84d2e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84d30:	8199      	strh	r1, [r3, #12]
}
   84d32:	4770      	bx	lr
   84d34:	2000269c 	.word	0x2000269c

00084d38 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84d38:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84d3c:	2a06      	cmp	r2, #6
   84d3e:	d900      	bls.n	84d42 <udd_ep_free+0xa>
   84d40:	4770      	bx	lr
{
   84d42:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   84d44:	0153      	lsls	r3, r2, #5
   84d46:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   84d4a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84d4e:	2101      	movs	r1, #1
   84d50:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   84d54:	4603      	mov	r3, r0
   84d56:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   84d5a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   84d5e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84d62:	1e55      	subs	r5, r2, #1
   84d64:	4c08      	ldr	r4, [pc, #32]	; (84d88 <udd_ep_free+0x50>)
   84d66:	fa05 f601 	lsl.w	r6, r5, r1
   84d6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   84d6e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84d72:	4b06      	ldr	r3, [pc, #24]	; (84d8c <udd_ep_free+0x54>)
   84d74:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84d76:	4435      	add	r5, r6
   84d78:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84d7c:	7d23      	ldrb	r3, [r4, #20]
   84d7e:	f36f 0382 	bfc	r3, #2, #1
   84d82:	7523      	strb	r3, [r4, #20]
}
   84d84:	bd70      	pop	{r4, r5, r6, pc}
   84d86:	bf00      	nop
   84d88:	20002108 	.word	0x20002108
   84d8c:	00084319 	.word	0x00084319

00084d90 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84d90:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84d94:	0143      	lsls	r3, r0, #5
   84d96:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84d9a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84d9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84da2:	f013 0f20 	tst.w	r3, #32
   84da6:	d109      	bne.n	84dbc <udd_ep_is_halted+0x2c>
   84da8:	3801      	subs	r0, #1
   84daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84dae:	4b04      	ldr	r3, [pc, #16]	; (84dc0 <udd_ep_is_halted+0x30>)
   84db0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84db4:	7d00      	ldrb	r0, [r0, #20]
   84db6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   84dba:	4770      	bx	lr
   84dbc:	2001      	movs	r0, #1
}
   84dbe:	4770      	bx	lr
   84dc0:	20002108 	.word	0x20002108

00084dc4 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84dc4:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84dc8:	2b06      	cmp	r3, #6
   84dca:	d851      	bhi.n	84e70 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84dcc:	015a      	lsls	r2, r3, #5
   84dce:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84dd2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84dd6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84dda:	f012 0f20 	tst.w	r2, #32
   84dde:	d149      	bne.n	84e74 <udd_ep_set_halt+0xb0>
{
   84de0:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84de2:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84de4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84de8:	4a25      	ldr	r2, [pc, #148]	; (84e80 <udd_ep_set_halt+0xbc>)
   84dea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   84dee:	7d12      	ldrb	r2, [r2, #20]
   84df0:	f012 0f04 	tst.w	r2, #4
   84df4:	d140      	bne.n	84e78 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   84df6:	f012 0f01 	tst.w	r2, #1
   84dfa:	d13f      	bne.n	84e7c <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84dfc:	f010 0f80 	tst.w	r0, #128	; 0x80
   84e00:	d114      	bne.n	84e2c <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84e02:	015b      	lsls	r3, r3, #5
   84e04:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84e08:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84e0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84e10:	f022 0202 	bic.w	r2, r2, #2
   84e14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84e18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84e1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84e20:	2220      	movs	r2, #32
   84e22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   84e26:	2001      	movs	r0, #1
}
   84e28:	bc10      	pop	{r4}
   84e2a:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84e2c:	015a      	lsls	r2, r3, #5
   84e2e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84e32:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84e36:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84e3a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84e3e:	d0e0      	beq.n	84e02 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84e40:	4a0f      	ldr	r2, [pc, #60]	; (84e80 <udd_ep_set_halt+0xbc>)
   84e42:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   84e46:	7d0a      	ldrb	r2, [r1, #20]
   84e48:	f042 0204 	orr.w	r2, r2, #4
   84e4c:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   84e4e:	490d      	ldr	r1, [pc, #52]	; (84e84 <udd_ep_set_halt+0xc0>)
   84e50:	f103 0208 	add.w	r2, r3, #8
   84e54:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   84e58:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84e5c:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   84e5e:	6908      	ldr	r0, [r1, #16]
   84e60:	f44f 7280 	mov.w	r2, #256	; 0x100
   84e64:	fa02 f303 	lsl.w	r3, r2, r3
   84e68:	4303      	orrs	r3, r0
   84e6a:	610b      	str	r3, [r1, #16]
			return true;
   84e6c:	2001      	movs	r0, #1
   84e6e:	e7db      	b.n	84e28 <udd_ep_set_halt+0x64>
		return false;
   84e70:	2000      	movs	r0, #0
   84e72:	4770      	bx	lr
		return true; // Already STALL
   84e74:	2001      	movs	r0, #1
}
   84e76:	4770      	bx	lr
		return true; // Already STALL
   84e78:	2001      	movs	r0, #1
   84e7a:	e7d5      	b.n	84e28 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   84e7c:	2000      	movs	r0, #0
   84e7e:	e7d3      	b.n	84e28 <udd_ep_set_halt+0x64>
   84e80:	20002108 	.word	0x20002108
   84e84:	400a4000 	.word	0x400a4000

00084e88 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   84e88:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   84e8c:	2806      	cmp	r0, #6
   84e8e:	d862      	bhi.n	84f56 <udd_ep_clear_halt+0xce>
{
   84e90:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   84e92:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   84e94:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   84e98:	4b37      	ldr	r3, [pc, #220]	; (84f78 <udd_ep_clear_halt+0xf0>)
   84e9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   84e9e:	7d1b      	ldrb	r3, [r3, #20]
   84ea0:	f013 0f04 	tst.w	r3, #4
   84ea4:	d05b      	beq.n	84f5e <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   84ea6:	460b      	mov	r3, r1
   84ea8:	4933      	ldr	r1, [pc, #204]	; (84f78 <udd_ep_clear_halt+0xf0>)
   84eaa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84eae:	7d19      	ldrb	r1, [r3, #20]
   84eb0:	f36f 0182 	bfc	r1, #2, #1
   84eb4:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   84eb6:	4b31      	ldr	r3, [pc, #196]	; (84f7c <udd_ep_clear_halt+0xf4>)
   84eb8:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   84ebc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   84ec0:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   84ec4:	6919      	ldr	r1, [r3, #16]
   84ec6:	f44f 7480 	mov.w	r4, #256	; 0x100
   84eca:	4084      	lsls	r4, r0
   84ecc:	ea21 0104 	bic.w	r1, r1, r4
   84ed0:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   84ed2:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   84ed6:	f013 0f20 	tst.w	r3, #32
   84eda:	d024      	beq.n	84f26 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   84edc:	0143      	lsls	r3, r0, #5
   84ede:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ee2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84ee6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84eea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84eee:	d00b      	beq.n	84f08 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   84ef0:	0143      	lsls	r3, r0, #5
   84ef2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ef6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84efe:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   84f02:	2140      	movs	r1, #64	; 0x40
   84f04:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   84f08:	0143      	lsls	r3, r0, #5
   84f0a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f0e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f12:	2120      	movs	r1, #32
   84f14:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   84f18:	4618      	mov	r0, r3
   84f1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   84f1e:	f043 0302 	orr.w	r3, r3, #2
   84f22:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   84f26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f2a:	4913      	ldr	r1, [pc, #76]	; (84f78 <udd_ep_clear_halt+0xf0>)
   84f2c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f30:	7d1b      	ldrb	r3, [r3, #20]
   84f32:	f013 0f01 	tst.w	r3, #1
   84f36:	d010      	beq.n	84f5a <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   84f38:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f3c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f40:	7d18      	ldrb	r0, [r3, #20]
   84f42:	f36f 0000 	bfc	r0, #0, #1
   84f46:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   84f48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   84f4c:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   84f50:	4798      	blx	r3
	return true;
   84f52:	2001      	movs	r0, #1
   84f54:	e002      	b.n	84f5c <udd_ep_clear_halt+0xd4>
		return false;
   84f56:	2000      	movs	r0, #0
}
   84f58:	4770      	bx	lr
	return true;
   84f5a:	2001      	movs	r0, #1
}
   84f5c:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   84f5e:	0143      	lsls	r3, r0, #5
   84f60:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f64:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84f6c:	f013 0f20 	tst.w	r3, #32
   84f70:	d1b4      	bne.n	84edc <udd_ep_clear_halt+0x54>
	return true;
   84f72:	2001      	movs	r0, #1
   84f74:	e7f2      	b.n	84f5c <udd_ep_clear_halt+0xd4>
   84f76:	bf00      	nop
   84f78:	20002108 	.word	0x20002108
   84f7c:	400a4000 	.word	0x400a4000

00084f80 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   84f80:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   84f84:	2806      	cmp	r0, #6
   84f86:	d868      	bhi.n	8505a <udd_ep_run+0xda>
{
   84f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   84f8a:	0144      	lsls	r4, r0, #5
   84f8c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84f90:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84f94:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   84f98:	f014 0f01 	tst.w	r4, #1
   84f9c:	d05f      	beq.n	8505e <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   84f9e:	0144      	lsls	r4, r0, #5
   84fa0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84fa4:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84fa8:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   84fac:	f014 0f20 	tst.w	r4, #32
   84fb0:	d157      	bne.n	85062 <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   84fb2:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   84fb4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   84fb8:	4d2d      	ldr	r5, [pc, #180]	; (85070 <udd_ep_run+0xf0>)
   84fba:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   84fbe:	7d2d      	ldrb	r5, [r5, #20]
   84fc0:	f015 0f04 	tst.w	r5, #4
   84fc4:	d14f      	bne.n	85066 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84fc6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   84fca:	b672      	cpsid	i
   84fcc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84fd0:	4d28      	ldr	r5, [pc, #160]	; (85074 <udd_ep_run+0xf4>)
   84fd2:	2600      	movs	r6, #0
   84fd4:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   84fd6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   84fda:	4e25      	ldr	r6, [pc, #148]	; (85070 <udd_ep_run+0xf0>)
   84fdc:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84fe0:	7d2d      	ldrb	r5, [r5, #20]
   84fe2:	f015 0f01 	tst.w	r5, #1
   84fe6:	d121      	bne.n	8502c <udd_ep_run+0xac>
	ptr_job->busy = true;
   84fe8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   84fec:	4e20      	ldr	r6, [pc, #128]	; (85070 <udd_ep_run+0xf0>)
   84fee:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84ff2:	7d2e      	ldrb	r6, [r5, #20]
   84ff4:	f046 0601 	orr.w	r6, r6, #1
   84ff8:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   84ffa:	b92f      	cbnz	r7, 85008 <udd_ep_run+0x88>
		cpu_irq_enable();
   84ffc:	4d1d      	ldr	r5, [pc, #116]	; (85074 <udd_ep_run+0xf4>)
   84ffe:	2601      	movs	r6, #1
   85000:	702e      	strb	r6, [r5, #0]
   85002:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85006:	b662      	cpsie	i
	ptr_job->buf = buf;
   85008:	4e19      	ldr	r6, [pc, #100]	; (85070 <udd_ep_run+0xf0>)
   8500a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   8500e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   85012:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   85014:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   85016:	2200      	movs	r2, #0
   85018:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   8501a:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   8501c:	9a06      	ldr	r2, [sp, #24]
   8501e:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85022:	b961      	cbnz	r1, 8503e <udd_ep_run+0xbe>
   85024:	fab3 f383 	clz	r3, r3
   85028:	095b      	lsrs	r3, r3, #5
   8502a:	e009      	b.n	85040 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   8502c:	b9ef      	cbnz	r7, 8506a <udd_ep_run+0xea>
		cpu_irq_enable();
   8502e:	4b11      	ldr	r3, [pc, #68]	; (85074 <udd_ep_run+0xf4>)
   85030:	2201      	movs	r2, #1
   85032:	701a      	strb	r2, [r3, #0]
   85034:	f3bf 8f5f 	dmb	sy
   85038:	b662      	cpsie	i
		return false; // Job already on going
   8503a:	2000      	movs	r0, #0
}
   8503c:	e010      	b.n	85060 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8503e:	2301      	movs	r3, #1
   85040:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   85044:	4a0a      	ldr	r2, [pc, #40]	; (85070 <udd_ep_run+0xf0>)
   85046:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   8504a:	7d22      	ldrb	r2, [r4, #20]
   8504c:	f363 0241 	bfi	r2, r3, #1, #1
   85050:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   85052:	4b09      	ldr	r3, [pc, #36]	; (85078 <udd_ep_run+0xf8>)
   85054:	4798      	blx	r3
	return true;
   85056:	2001      	movs	r0, #1
   85058:	e002      	b.n	85060 <udd_ep_run+0xe0>
		return false;
   8505a:	2000      	movs	r0, #0
}
   8505c:	4770      	bx	lr
		return false; // Endpoint is halted
   8505e:	2000      	movs	r0, #0
}
   85060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   85062:	2000      	movs	r0, #0
   85064:	e7fc      	b.n	85060 <udd_ep_run+0xe0>
   85066:	2000      	movs	r0, #0
   85068:	e7fa      	b.n	85060 <udd_ep_run+0xe0>
		return false; // Job already on going
   8506a:	2000      	movs	r0, #0
   8506c:	e7f8      	b.n	85060 <udd_ep_run+0xe0>
   8506e:	bf00      	nop
   85070:	20002108 	.word	0x20002108
   85074:	20000982 	.word	0x20000982
   85078:	00084351 	.word	0x00084351

0008507c <udd_ep_alloc>:
{
   8507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85080:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85082:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   85086:	2d06      	cmp	r5, #6
   85088:	f200 812a 	bhi.w	852e0 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   8508c:	016c      	lsls	r4, r5, #5
   8508e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85092:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85096:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   8509a:	f014 0401 	ands.w	r4, r4, #1
   8509e:	f040 8123 	bne.w	852e8 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   850a2:	f001 0c03 	and.w	ip, r1, #3
   850a6:	f1bc 0f02 	cmp.w	ip, #2
   850aa:	d05e      	beq.n	8516a <udd_ep_alloc+0xee>
   850ac:	f1bc 0f03 	cmp.w	ip, #3
   850b0:	d064      	beq.n	8517c <udd_ep_alloc+0x100>
   850b2:	f1bc 0f01 	cmp.w	ip, #1
   850b6:	d001      	beq.n	850bc <udd_ep_alloc+0x40>
   850b8:	2000      	movs	r0, #0
   850ba:	e112      	b.n	852e2 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   850bc:	2d00      	cmp	r5, #0
   850be:	d052      	beq.n	85166 <udd_ep_alloc+0xea>
   850c0:	1eeb      	subs	r3, r5, #3
   850c2:	b2db      	uxtb	r3, r3
   850c4:	2b01      	cmp	r3, #1
   850c6:	bf94      	ite	ls
   850c8:	2300      	movls	r3, #0
   850ca:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   850cc:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   850ce:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   850d2:	2b00      	cmp	r3, #0
   850d4:	d054      	beq.n	85180 <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   850d6:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   850da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   850de:	d04a      	beq.n	85176 <udd_ep_alloc+0xfa>
   850e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   850e4:	bf08      	it	eq
   850e6:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   850ea:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   850ee:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   850f0:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   850f4:	016f      	lsls	r7, r5, #5
   850f6:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   850fa:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   850fe:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   85102:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   85106:	f026 0603 	bic.w	r6, r6, #3
   8510a:	010b      	lsls	r3, r1, #4
   8510c:	f003 0330 	and.w	r3, r3, #48	; 0x30
   85110:	f010 0f80 	tst.w	r0, #128	; 0x80
   85114:	bf0c      	ite	eq
   85116:	4621      	moveq	r1, r4
   85118:	2108      	movne	r1, #8
   8511a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8511e:	d237      	bcs.n	85190 <udd_ep_alloc+0x114>
   85120:	2a08      	cmp	r2, #8
   85122:	bf38      	it	cc
   85124:	2208      	movcc	r2, #8
   85126:	0052      	lsls	r2, r2, #1
   85128:	3a01      	subs	r2, #1
   8512a:	fab2 f282 	clz	r2, r2
   8512e:	f1c2 021c 	rsb	r2, r2, #28
   85132:	4333      	orrs	r3, r6
   85134:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   85138:	430b      	orrs	r3, r1
   8513a:	f1be 0f00 	cmp.w	lr, #0
   8513e:	d001      	beq.n	85144 <udd_ep_alloc+0xc8>
   85140:	ea4f 240c 	mov.w	r4, ip, lsl #8
   85144:	431a      	orrs	r2, r3
   85146:	4322      	orrs	r2, r4
   85148:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   8514c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   85150:	2b00      	cmp	r3, #0
   85152:	f280 80cd 	bge.w	852f0 <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   85156:	2301      	movs	r3, #1
   85158:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8515c:	2306      	movs	r3, #6
	ep_allocated = 0;
   8515e:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   85160:	4865      	ldr	r0, [pc, #404]	; (852f8 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   85162:	2401      	movs	r4, #1
   85164:	e01b      	b.n	8519e <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85166:	2300      	movs	r3, #0
   85168:	e7b0      	b.n	850cc <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   8516a:	2d03      	cmp	r5, #3
   8516c:	bf34      	ite	cc
   8516e:	46e0      	movcc	r8, ip
   85170:	f04f 0801 	movcs.w	r8, #1
   85174:	e004      	b.n	85180 <udd_ep_alloc+0x104>
			nb_tran = 2;
   85176:	f04f 0c02 	mov.w	ip, #2
   8517a:	e7b6      	b.n	850ea <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8517c:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   85180:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85184:	f040 80b2 	bne.w	852ec <udd_ep_alloc+0x270>
   85188:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8518c:	46f4      	mov	ip, lr
   8518e:	e7b1      	b.n	850f4 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85190:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85194:	e7c9      	b.n	8512a <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85196:	3b01      	subs	r3, #1
   85198:	b2db      	uxtb	r3, r3
   8519a:	429d      	cmp	r5, r3
   8519c:	d81e      	bhi.n	851dc <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   8519e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   851a2:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   851a6:	f012 0f01 	tst.w	r2, #1
   851aa:	d0f4      	beq.n	85196 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   851ac:	015a      	lsls	r2, r3, #5
   851ae:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   851b2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   851b6:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   851ba:	f3c1 1181 	ubfx	r1, r1, #6, #2
   851be:	005f      	lsls	r7, r3, #1
   851c0:	40b9      	lsls	r1, r7
   851c2:	430e      	orrs	r6, r1
   851c4:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   851c6:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   851ca:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   851ce:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   851d2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   851d6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   851da:	e7dc      	b.n	85196 <udd_ep_alloc+0x11a>
   851dc:	462c      	mov	r4, r5
   851de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   851e2:	4d46      	ldr	r5, [pc, #280]	; (852fc <udd_ep_alloc+0x280>)
   851e4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   851e8:	4f44      	ldr	r7, [pc, #272]	; (852fc <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   851ea:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   851ee:	f8df 9110 	ldr.w	r9, [pc, #272]	; 85300 <udd_ep_alloc+0x284>
   851f2:	e023      	b.n	8523c <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   851f4:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   851f8:	4a40      	ldr	r2, [pc, #256]	; (852fc <udd_ep_alloc+0x280>)
   851fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   851fe:	2c00      	cmp	r4, #0
   85200:	d078      	beq.n	852f4 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   85202:	f10c 0c08 	add.w	ip, ip, #8
   85206:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   8520a:	4b3b      	ldr	r3, [pc, #236]	; (852f8 <udd_ep_alloc+0x27c>)
   8520c:	f853 300c 	ldr.w	r3, [r3, ip]
   85210:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   85214:	bf18      	it	ne
   85216:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8521a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8521e:	4b37      	ldr	r3, [pc, #220]	; (852fc <udd_ep_alloc+0x280>)
   85220:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   85224:	4602      	mov	r2, r0
   85226:	f8de 100c 	ldr.w	r1, [lr, #12]
   8522a:	2001      	movs	r0, #1
   8522c:	47a0      	blx	r4
			return false;
   8522e:	2000      	movs	r0, #0
   85230:	e057      	b.n	852e2 <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85232:	3401      	adds	r4, #1
   85234:	3518      	adds	r5, #24
   85236:	b2e3      	uxtb	r3, r4
   85238:	2b06      	cmp	r3, #6
   8523a:	d84f      	bhi.n	852dc <udd_ep_alloc+0x260>
   8523c:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8523e:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   85240:	0063      	lsls	r3, r4, #1
   85242:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   85246:	f013 0203 	ands.w	r2, r3, #3
   8524a:	d0f2      	beq.n	85232 <udd_ep_alloc+0x1b6>
   8524c:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   85250:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   85254:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   85258:	7d0b      	ldrb	r3, [r1, #20]
   8525a:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   8525e:	f36f 0300 	bfc	r3, #0, #1
   85262:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   85264:	0163      	lsls	r3, r4, #5
   85266:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8526a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8526e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   85272:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85276:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   8527a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   8527e:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   85282:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85286:	2a00      	cmp	r2, #0
   85288:	dab4      	bge.n	851f4 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   8528a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   8528e:	f042 0202 	orr.w	r2, r2, #2
   85292:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   85296:	f1ba 0f00 	cmp.w	sl, #0
   8529a:	d0ca      	beq.n	85232 <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8529c:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   852a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
   852a4:	ebab 0102 	sub.w	r1, fp, r2
   852a8:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   852ac:	f855 3c10 	ldr.w	r3, [r5, #-16]
   852b0:	eb02 0a03 	add.w	sl, r2, r3
   852b4:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   852b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   852bc:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   852c0:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   852c4:	f855 3c18 	ldr.w	r3, [r5, #-24]
   852c8:	9300      	str	r3, [sp, #0]
   852ca:	ebaa 030b 	sub.w	r3, sl, fp
   852ce:	440a      	add	r2, r1
   852d0:	f3cc 0140 	ubfx	r1, ip, #1, #1
   852d4:	47c8      	blx	r9
			if (!b_restart) {
   852d6:	2800      	cmp	r0, #0
   852d8:	d1ab      	bne.n	85232 <udd_ep_alloc+0x1b6>
   852da:	e002      	b.n	852e2 <udd_ep_alloc+0x266>
	return true;
   852dc:	2001      	movs	r0, #1
   852de:	e000      	b.n	852e2 <udd_ep_alloc+0x266>
		return false;
   852e0:	2000      	movs	r0, #0
}
   852e2:	b003      	add	sp, #12
   852e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   852e8:	2000      	movs	r0, #0
   852ea:	e7fa      	b.n	852e2 <udd_ep_alloc+0x266>
		return false;
   852ec:	2000      	movs	r0, #0
   852ee:	e7f8      	b.n	852e2 <udd_ep_alloc+0x266>
		return false;
   852f0:	2000      	movs	r0, #0
   852f2:	e7f6      	b.n	852e2 <udd_ep_alloc+0x266>
				return false;
   852f4:	2000      	movs	r0, #0
   852f6:	e7f4      	b.n	852e2 <udd_ep_alloc+0x266>
   852f8:	400a4000 	.word	0x400a4000
   852fc:	20002108 	.word	0x20002108
   85300:	00084f81 	.word	0x00084f81

00085304 <udd_ep_abort>:
{
   85304:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85306:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8530a:	4b18      	ldr	r3, [pc, #96]	; (8536c <udd_ep_abort+0x68>)
   8530c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85310:	2100      	movs	r1, #0
   85312:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85314:	f010 0f80 	tst.w	r0, #128	; 0x80
   85318:	d109      	bne.n	8532e <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8531a:	1e50      	subs	r0, r2, #1
   8531c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85320:	2101      	movs	r1, #1
   85322:	4b13      	ldr	r3, [pc, #76]	; (85370 <udd_ep_abort+0x6c>)
   85324:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85328:	4b12      	ldr	r3, [pc, #72]	; (85374 <udd_ep_abort+0x70>)
   8532a:	4798      	blx	r3
}
   8532c:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   8532e:	0151      	lsls	r1, r2, #5
   85330:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85334:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85338:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   8533c:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   85340:	d0eb      	beq.n	8531a <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   85342:	0153      	lsls	r3, r2, #5
   85344:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   85348:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8534c:	f501 748a 	add.w	r4, r1, #276	; 0x114
   85350:	f44f 7000 	mov.w	r0, #512	; 0x200
   85354:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   85356:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   8535a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8535e:	d1fa      	bne.n	85356 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   85360:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   85364:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85368:	d1f4      	bne.n	85354 <udd_ep_abort+0x50>
   8536a:	e7d6      	b.n	8531a <udd_ep_abort+0x16>
   8536c:	400a4300 	.word	0x400a4300
   85370:	20002108 	.word	0x20002108
   85374:	00084319 	.word	0x00084319

00085378 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   85378:	4a07      	ldr	r2, [pc, #28]	; (85398 <udd_test_mode_j+0x20>)
   8537a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8537e:	f023 0303 	bic.w	r3, r3, #3
   85382:	f043 0302 	orr.w	r3, r3, #2
   85386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8538a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8538e:	f043 0304 	orr.w	r3, r3, #4
   85392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85396:	4770      	bx	lr
   85398:	400a4000 	.word	0x400a4000

0008539c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8539c:	4a07      	ldr	r2, [pc, #28]	; (853bc <udd_test_mode_k+0x20>)
   8539e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853a2:	f023 0303 	bic.w	r3, r3, #3
   853a6:	f043 0302 	orr.w	r3, r3, #2
   853aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   853ae:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853b2:	f043 0308 	orr.w	r3, r3, #8
   853b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   853ba:	4770      	bx	lr
   853bc:	400a4000 	.word	0x400a4000

000853c0 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   853c0:	4a04      	ldr	r2, [pc, #16]	; (853d4 <udd_test_mode_se0_nak+0x14>)
   853c2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853c6:	f023 0303 	bic.w	r3, r3, #3
   853ca:	f043 0302 	orr.w	r3, r3, #2
   853ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   853d2:	4770      	bx	lr
   853d4:	400a4000 	.word	0x400a4000

000853d8 <udd_test_mode_packet>:
{
   853d8:	b430      	push	{r4, r5}
   853da:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   853dc:	466c      	mov	r4, sp
   853de:	4d21      	ldr	r5, [pc, #132]	; (85464 <udd_test_mode_packet+0x8c>)
   853e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853ec:	e895 0003 	ldmia.w	r5, {r0, r1}
   853f0:	f844 0b04 	str.w	r0, [r4], #4
   853f4:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   853f6:	4b1c      	ldr	r3, [pc, #112]	; (85468 <udd_test_mode_packet+0x90>)
   853f8:	2101      	movs	r1, #1
   853fa:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   853fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85402:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85406:	f022 0203 	bic.w	r2, r2, #3
   8540a:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   8540e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85412:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   85416:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8541a:	f022 0203 	bic.w	r2, r2, #3
   8541e:	f042 0202 	orr.w	r2, r2, #2
   85422:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85426:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8542a:	f042 0210 	orr.w	r2, r2, #16
   8542e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   85432:	466b      	mov	r3, sp
   85434:	480d      	ldr	r0, [pc, #52]	; (8546c <udd_test_mode_packet+0x94>)
   85436:	aa0e      	add	r2, sp, #56	; 0x38
   85438:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   8543a:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   8543e:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   85440:	f813 1b01 	ldrb.w	r1, [r3], #1
   85444:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85446:	42a3      	cmp	r3, r4
   85448:	d1f9      	bne.n	8543e <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   8544a:	4b07      	ldr	r3, [pc, #28]	; (85468 <udd_test_mode_packet+0x90>)
   8544c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85450:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85454:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85458:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8545c:	b00e      	add	sp, #56	; 0x38
   8545e:	bc30      	pop	{r4, r5}
   85460:	4770      	bx	lr
   85462:	bf00      	nop
   85464:	0008caf0 	.word	0x0008caf0
   85468:	400a4000 	.word	0x400a4000
   8546c:	20180038 	.word	0x20180038

00085470 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   85470:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   85472:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
   85476:	d214      	bcs.n	854a2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85478:	00c9      	lsls	r1, r1, #3
   8547a:	084b      	lsrs	r3, r1, #1
   8547c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85480:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   85484:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85486:	1e5c      	subs	r4, r3, #1
   85488:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8548c:	428c      	cmp	r4, r1
   8548e:	d901      	bls.n	85494 <usart_set_async_baudrate+0x24>
		return 1;
   85490:	2001      	movs	r0, #1
   85492:	e018      	b.n	854c6 <usart_set_async_baudrate+0x56>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   85494:	6841      	ldr	r1, [r0, #4]
   85496:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8549a:	6041      	str	r1, [r0, #4]
   8549c:	e00d      	b.n	854ba <usart_set_async_baudrate+0x4a>
		return 1;
   8549e:	2001      	movs	r0, #1
   854a0:	e011      	b.n	854c6 <usart_set_async_baudrate+0x56>
   854a2:	010c      	lsls	r4, r1, #4
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   854a4:	0863      	lsrs	r3, r4, #1
   854a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   854aa:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   854ae:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   854b0:	1e5c      	subs	r4, r3, #1
   854b2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   854b6:	428c      	cmp	r4, r1
   854b8:	d8f1      	bhi.n	8549e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   854ba:	0412      	lsls	r2, r2, #16
   854bc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   854c0:	431a      	orrs	r2, r3
   854c2:	6202      	str	r2, [r0, #32]

	return 0;
   854c4:	2000      	movs	r0, #0
}
   854c6:	bc10      	pop	{r4}
   854c8:	4770      	bx	lr
	...

000854cc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   854cc:	4b0a      	ldr	r3, [pc, #40]	; (854f8 <usart_reset+0x2c>)
   854ce:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   854d2:	2300      	movs	r3, #0
   854d4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   854d6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   854d8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   854da:	2388      	movs	r3, #136	; 0x88
   854dc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   854de:	2324      	movs	r3, #36	; 0x24
   854e0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   854e2:	f44f 7380 	mov.w	r3, #256	; 0x100
   854e6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   854e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   854ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   854ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   854f2:	6003      	str	r3, [r0, #0]
}
   854f4:	4770      	bx	lr
   854f6:	bf00      	nop
   854f8:	55534100 	.word	0x55534100

000854fc <usart_init_rs232>:
{
   854fc:	b570      	push	{r4, r5, r6, lr}
   854fe:	4605      	mov	r5, r0
   85500:	460c      	mov	r4, r1
   85502:	4616      	mov	r6, r2
	usart_reset(p_usart);
   85504:	4b0e      	ldr	r3, [pc, #56]	; (85540 <usart_init_rs232+0x44>)
   85506:	4798      	blx	r3
	ul_reg_val = 0;
   85508:	4b0e      	ldr	r3, [pc, #56]	; (85544 <usart_init_rs232+0x48>)
   8550a:	2200      	movs	r2, #0
   8550c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8550e:	b194      	cbz	r4, 85536 <usart_init_rs232+0x3a>
   85510:	4632      	mov	r2, r6
   85512:	6821      	ldr	r1, [r4, #0]
   85514:	4628      	mov	r0, r5
   85516:	4b0c      	ldr	r3, [pc, #48]	; (85548 <usart_init_rs232+0x4c>)
   85518:	4798      	blx	r3
   8551a:	b970      	cbnz	r0, 8553a <usart_init_rs232+0x3e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8551c:	6863      	ldr	r3, [r4, #4]
   8551e:	68a2      	ldr	r2, [r4, #8]
   85520:	4313      	orrs	r3, r2
   85522:	6922      	ldr	r2, [r4, #16]
   85524:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85526:	68e2      	ldr	r2, [r4, #12]
   85528:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8552a:	4a06      	ldr	r2, [pc, #24]	; (85544 <usart_init_rs232+0x48>)
   8552c:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   8552e:	686a      	ldr	r2, [r5, #4]
   85530:	4313      	orrs	r3, r2
   85532:	606b      	str	r3, [r5, #4]
}
   85534:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85536:	2001      	movs	r0, #1
   85538:	e7fc      	b.n	85534 <usart_init_rs232+0x38>
   8553a:	2001      	movs	r0, #1
   8553c:	e7fa      	b.n	85534 <usart_init_rs232+0x38>
   8553e:	bf00      	nop
   85540:	000854cd 	.word	0x000854cd
   85544:	20002198 	.word	0x20002198
   85548:	00085471 	.word	0x00085471

0008554c <usart_init_sync_master>:
{
   8554c:	b570      	push	{r4, r5, r6, lr}
   8554e:	4606      	mov	r6, r0
   85550:	460d      	mov	r5, r1
   85552:	4614      	mov	r4, r2
	usart_reset(p_usart);
   85554:	4b15      	ldr	r3, [pc, #84]	; (855ac <usart_init_sync_master+0x60>)
   85556:	4798      	blx	r3
	ul_reg_val = 0;
   85558:	4b15      	ldr	r3, [pc, #84]	; (855b0 <usart_init_sync_master+0x64>)
   8555a:	2200      	movs	r2, #0
   8555c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   8555e:	b305      	cbz	r5, 855a2 <usart_init_sync_master+0x56>
   85560:	682b      	ldr	r3, [r5, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   85562:	eb04 0253 	add.w	r2, r4, r3, lsr #1
   85566:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8556a:	1e51      	subs	r1, r2, #1
   8556c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   85570:	4299      	cmp	r1, r3
   85572:	d818      	bhi.n	855a6 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85574:	6232      	str	r2, [r6, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85576:	6873      	ldr	r3, [r6, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   85578:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   8557c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85580:	6073      	str	r3, [r6, #4]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85582:	686b      	ldr	r3, [r5, #4]
   85584:	68ea      	ldr	r2, [r5, #12]
   85586:	4313      	orrs	r3, r2
   85588:	68aa      	ldr	r2, [r5, #8]
   8558a:	4313      	orrs	r3, r2
   8558c:	692a      	ldr	r2, [r5, #16]
   8558e:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   85590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   85594:	4a06      	ldr	r2, [pc, #24]	; (855b0 <usart_init_sync_master+0x64>)
   85596:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   85598:	6872      	ldr	r2, [r6, #4]
   8559a:	4313      	orrs	r3, r2
   8559c:	6073      	str	r3, [r6, #4]
	return 0;
   8559e:	2000      	movs	r0, #0
}
   855a0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   855a2:	2001      	movs	r0, #1
   855a4:	e7fc      	b.n	855a0 <usart_init_sync_master+0x54>
   855a6:	2001      	movs	r0, #1
   855a8:	e7fa      	b.n	855a0 <usart_init_sync_master+0x54>
   855aa:	bf00      	nop
   855ac:	000854cd 	.word	0x000854cd
   855b0:	2000219c 	.word	0x2000219c

000855b4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   855b4:	2340      	movs	r3, #64	; 0x40
   855b6:	6003      	str	r3, [r0, #0]
}
   855b8:	4770      	bx	lr

000855ba <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   855ba:	2380      	movs	r3, #128	; 0x80
   855bc:	6003      	str	r3, [r0, #0]
}
   855be:	4770      	bx	lr

000855c0 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   855c0:	2310      	movs	r3, #16
   855c2:	6003      	str	r3, [r0, #0]
}
   855c4:	4770      	bx	lr

000855c6 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   855c6:	2320      	movs	r3, #32
   855c8:	6003      	str	r3, [r0, #0]
}
   855ca:	4770      	bx	lr

000855cc <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   855cc:	6081      	str	r1, [r0, #8]
}
   855ce:	4770      	bx	lr

000855d0 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   855d0:	60c1      	str	r1, [r0, #12]
}
   855d2:	4770      	bx	lr

000855d4 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   855d4:	6900      	ldr	r0, [r0, #16]
}
   855d6:	4770      	bx	lr

000855d8 <usart_get_status>:
	return p_usart->US_CSR;
   855d8:	6940      	ldr	r0, [r0, #20]
}
   855da:	4770      	bx	lr

000855dc <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   855dc:	6940      	ldr	r0, [r0, #20]
}
   855de:	f3c0 2040 	ubfx	r0, r0, #9, #1
   855e2:	4770      	bx	lr

000855e4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   855e4:	6943      	ldr	r3, [r0, #20]
   855e6:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   855ea:	bf1d      	ittte	ne
   855ec:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   855f0:	61c1      	strne	r1, [r0, #28]
	return 0;
   855f2:	2000      	movne	r0, #0
		return 1;
   855f4:	2001      	moveq	r0, #1
}
   855f6:	4770      	bx	lr

000855f8 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   855f8:	6943      	ldr	r3, [r0, #20]
   855fa:	f013 0f02 	tst.w	r3, #2
   855fe:	d0fb      	beq.n	855f8 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   85600:	f3c1 0108 	ubfx	r1, r1, #0, #9
   85604:	61c1      	str	r1, [r0, #28]
}
   85606:	2000      	movs	r0, #0
   85608:	4770      	bx	lr

0008560a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8560a:	6943      	ldr	r3, [r0, #20]
   8560c:	f013 0f01 	tst.w	r3, #1
   85610:	d005      	beq.n	8561e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   85612:	6983      	ldr	r3, [r0, #24]
   85614:	f3c3 0308 	ubfx	r3, r3, #0, #9
   85618:	600b      	str	r3, [r1, #0]
	return 0;
   8561a:	2000      	movs	r0, #0
   8561c:	4770      	bx	lr
		return 1;
   8561e:	2001      	movs	r0, #1
}
   85620:	4770      	bx	lr

00085622 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   85622:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85624:	23ac      	movs	r3, #172	; 0xac
   85626:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85628:	680b      	ldr	r3, [r1, #0]
   8562a:	684a      	ldr	r2, [r1, #4]
   8562c:	fbb3 f3f2 	udiv	r3, r3, r2
   85630:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   85632:	1e5c      	subs	r4, r3, #1
   85634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   85638:	4294      	cmp	r4, r2
   8563a:	d80b      	bhi.n	85654 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8563c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8563e:	688b      	ldr	r3, [r1, #8]
   85640:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   85642:	f240 2302 	movw	r3, #514	; 0x202
   85646:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8564a:	2350      	movs	r3, #80	; 0x50
   8564c:	6003      	str	r3, [r0, #0]

	return 0;
   8564e:	2000      	movs	r0, #0
}
   85650:	bc10      	pop	{r4}
   85652:	4770      	bx	lr
		return 1;
   85654:	2001      	movs	r0, #1
   85656:	e7fb      	b.n	85650 <uart_init+0x2e>

00085658 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   85658:	6943      	ldr	r3, [r0, #20]
   8565a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8565e:	bf1a      	itte	ne
   85660:	61c1      	strne	r1, [r0, #28]
	return 0;
   85662:	2000      	movne	r0, #0
		return 1;
   85664:	2001      	moveq	r0, #1
}
   85666:	4770      	bx	lr

00085668 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   85668:	6943      	ldr	r3, [r0, #20]
   8566a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8566e:	bf1d      	ittte	ne
   85670:	6983      	ldrne	r3, [r0, #24]
   85672:	700b      	strbne	r3, [r1, #0]
	return 0;
   85674:	2000      	movne	r0, #0
		return 1;
   85676:	2001      	moveq	r0, #1
}
   85678:	4770      	bx	lr

0008567a <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   8567a:	e7fe      	b.n	8567a <Dummy_Handler>

0008567c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8567c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8567e:	4a1d      	ldr	r2, [pc, #116]	; (856f4 <Reset_Handler+0x78>)
   85680:	4b1d      	ldr	r3, [pc, #116]	; (856f8 <Reset_Handler+0x7c>)
   85682:	429a      	cmp	r2, r3
   85684:	d011      	beq.n	856aa <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
   85686:	461a      	mov	r2, r3
   85688:	4b1c      	ldr	r3, [pc, #112]	; (856fc <Reset_Handler+0x80>)
   8568a:	429a      	cmp	r2, r3
   8568c:	d20d      	bcs.n	856aa <Reset_Handler+0x2e>
   8568e:	4611      	mov	r1, r2
   85690:	3b01      	subs	r3, #1
   85692:	1a9b      	subs	r3, r3, r2
   85694:	f023 0303 	bic.w	r3, r3, #3
   85698:	3304      	adds	r3, #4
   8569a:	4a16      	ldr	r2, [pc, #88]	; (856f4 <Reset_Handler+0x78>)
   8569c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
   8569e:	f852 0b04 	ldr.w	r0, [r2], #4
   856a2:	f841 0b04 	str.w	r0, [r1], #4
		for (; pDest < &_erelocate;) {
   856a6:	429a      	cmp	r2, r3
   856a8:	d1f9      	bne.n	8569e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   856aa:	4a15      	ldr	r2, [pc, #84]	; (85700 <Reset_Handler+0x84>)
   856ac:	4b15      	ldr	r3, [pc, #84]	; (85704 <Reset_Handler+0x88>)
   856ae:	429a      	cmp	r2, r3
   856b0:	d20a      	bcs.n	856c8 <Reset_Handler+0x4c>
   856b2:	3b01      	subs	r3, #1
   856b4:	1a9b      	subs	r3, r3, r2
   856b6:	f023 0303 	bic.w	r3, r3, #3
   856ba:	3304      	adds	r3, #4
   856bc:	4413      	add	r3, r2
		*pDest++ = 0;
   856be:	2100      	movs	r1, #0
   856c0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   856c4:	4293      	cmp	r3, r2
   856c6:	d1fb      	bne.n	856c0 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   856c8:	4b0f      	ldr	r3, [pc, #60]	; (85708 <Reset_Handler+0x8c>)
   856ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   856ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   856d2:	490e      	ldr	r1, [pc, #56]	; (8570c <Reset_Handler+0x90>)
   856d4:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   856d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   856da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   856de:	d203      	bcs.n	856e8 <Reset_Handler+0x6c>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   856e0:	688b      	ldr	r3, [r1, #8]
   856e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   856e6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   856e8:	4b09      	ldr	r3, [pc, #36]	; (85710 <Reset_Handler+0x94>)
   856ea:	4798      	blx	r3

	/* Branch to main function */
	main();
   856ec:	4b09      	ldr	r3, [pc, #36]	; (85714 <Reset_Handler+0x98>)
   856ee:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   856f0:	e7fe      	b.n	856f0 <Reset_Handler+0x74>
   856f2:	bf00      	nop
   856f4:	0008d014 	.word	0x0008d014
   856f8:	20000000 	.word	0x20000000
   856fc:	20001358 	.word	0x20001358
   85700:	20001358 	.word	0x20001358
   85704:	200026dc 	.word	0x200026dc
   85708:	00080000 	.word	0x00080000
   8570c:	e000ed00 	.word	0xe000ed00
   85710:	00085ea5 	.word	0x00085ea5
   85714:	000859a1 	.word	0x000859a1

00085718 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85718:	4b3d      	ldr	r3, [pc, #244]	; (85810 <SystemCoreClockUpdate+0xf8>)
   8571a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8571c:	f002 0303 	and.w	r3, r2, #3
   85720:	2b01      	cmp	r3, #1
   85722:	d032      	beq.n	8578a <SystemCoreClockUpdate+0x72>
   85724:	f012 0f02 	tst.w	r2, #2
   85728:	d11b      	bne.n	85762 <SystemCoreClockUpdate+0x4a>
   8572a:	b953      	cbnz	r3, 85742 <SystemCoreClockUpdate+0x2a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8572c:	4b39      	ldr	r3, [pc, #228]	; (85814 <SystemCoreClockUpdate+0xfc>)
   8572e:	695b      	ldr	r3, [r3, #20]
   85730:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85734:	4b38      	ldr	r3, [pc, #224]	; (85818 <SystemCoreClockUpdate+0x100>)
   85736:	bf14      	ite	ne
   85738:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8573c:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   85740:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85742:	4b33      	ldr	r3, [pc, #204]	; (85810 <SystemCoreClockUpdate+0xf8>)
   85744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85746:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8574a:	2b70      	cmp	r3, #112	; 0x70
   8574c:	d058      	beq.n	85800 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8574e:	4b30      	ldr	r3, [pc, #192]	; (85810 <SystemCoreClockUpdate+0xf8>)
   85750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85752:	f3c2 1202 	ubfx	r2, r2, #4, #3
   85756:	4b30      	ldr	r3, [pc, #192]	; (85818 <SystemCoreClockUpdate+0x100>)
   85758:	681b      	ldr	r3, [r3, #0]
   8575a:	40d3      	lsrs	r3, r2
   8575c:	4a2e      	ldr	r2, [pc, #184]	; (85818 <SystemCoreClockUpdate+0x100>)
   8575e:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   85760:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85762:	4b2b      	ldr	r3, [pc, #172]	; (85810 <SystemCoreClockUpdate+0xf8>)
   85764:	6a1b      	ldr	r3, [r3, #32]
   85766:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8576a:	d12a      	bne.n	857c2 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8576c:	4b2a      	ldr	r3, [pc, #168]	; (85818 <SystemCoreClockUpdate+0x100>)
   8576e:	4a2b      	ldr	r2, [pc, #172]	; (8581c <SystemCoreClockUpdate+0x104>)
   85770:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85772:	4b27      	ldr	r3, [pc, #156]	; (85810 <SystemCoreClockUpdate+0xf8>)
   85774:	6a1b      	ldr	r3, [r3, #32]
   85776:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8577a:	2b10      	cmp	r3, #16
   8577c:	d02e      	beq.n	857dc <SystemCoreClockUpdate+0xc4>
   8577e:	2b20      	cmp	r3, #32
   85780:	d122      	bne.n	857c8 <SystemCoreClockUpdate+0xb0>
				SystemCoreClock *= 3U;
   85782:	4b25      	ldr	r3, [pc, #148]	; (85818 <SystemCoreClockUpdate+0x100>)
   85784:	4a26      	ldr	r2, [pc, #152]	; (85820 <SystemCoreClockUpdate+0x108>)
   85786:	601a      	str	r2, [r3, #0]
				break;
   85788:	e01e      	b.n	857c8 <SystemCoreClockUpdate+0xb0>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8578a:	4b21      	ldr	r3, [pc, #132]	; (85810 <SystemCoreClockUpdate+0xf8>)
   8578c:	6a1b      	ldr	r3, [r3, #32]
   8578e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85792:	d003      	beq.n	8579c <SystemCoreClockUpdate+0x84>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85794:	4b20      	ldr	r3, [pc, #128]	; (85818 <SystemCoreClockUpdate+0x100>)
   85796:	4a22      	ldr	r2, [pc, #136]	; (85820 <SystemCoreClockUpdate+0x108>)
   85798:	601a      	str	r2, [r3, #0]
   8579a:	e7d2      	b.n	85742 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8579c:	4b1e      	ldr	r3, [pc, #120]	; (85818 <SystemCoreClockUpdate+0x100>)
   8579e:	4a1f      	ldr	r2, [pc, #124]	; (8581c <SystemCoreClockUpdate+0x104>)
   857a0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   857a2:	4b1b      	ldr	r3, [pc, #108]	; (85810 <SystemCoreClockUpdate+0xf8>)
   857a4:	6a1b      	ldr	r3, [r3, #32]
   857a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   857aa:	2b10      	cmp	r3, #16
   857ac:	d005      	beq.n	857ba <SystemCoreClockUpdate+0xa2>
   857ae:	2b20      	cmp	r3, #32
   857b0:	d1c7      	bne.n	85742 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   857b2:	4b19      	ldr	r3, [pc, #100]	; (85818 <SystemCoreClockUpdate+0x100>)
   857b4:	4a1a      	ldr	r2, [pc, #104]	; (85820 <SystemCoreClockUpdate+0x108>)
   857b6:	601a      	str	r2, [r3, #0]
				break;
   857b8:	e7c3      	b.n	85742 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   857ba:	4b17      	ldr	r3, [pc, #92]	; (85818 <SystemCoreClockUpdate+0x100>)
   857bc:	4a19      	ldr	r2, [pc, #100]	; (85824 <SystemCoreClockUpdate+0x10c>)
   857be:	601a      	str	r2, [r3, #0]
				break;
   857c0:	e7bf      	b.n	85742 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   857c2:	4b15      	ldr	r3, [pc, #84]	; (85818 <SystemCoreClockUpdate+0x100>)
   857c4:	4a16      	ldr	r2, [pc, #88]	; (85820 <SystemCoreClockUpdate+0x108>)
   857c6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   857c8:	4b11      	ldr	r3, [pc, #68]	; (85810 <SystemCoreClockUpdate+0xf8>)
   857ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857cc:	f003 0303 	and.w	r3, r3, #3
   857d0:	2b02      	cmp	r3, #2
   857d2:	d007      	beq.n	857e4 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   857d4:	4b10      	ldr	r3, [pc, #64]	; (85818 <SystemCoreClockUpdate+0x100>)
   857d6:	4a14      	ldr	r2, [pc, #80]	; (85828 <SystemCoreClockUpdate+0x110>)
   857d8:	601a      	str	r2, [r3, #0]
   857da:	e7b2      	b.n	85742 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   857dc:	4b0e      	ldr	r3, [pc, #56]	; (85818 <SystemCoreClockUpdate+0x100>)
   857de:	4a11      	ldr	r2, [pc, #68]	; (85824 <SystemCoreClockUpdate+0x10c>)
   857e0:	601a      	str	r2, [r3, #0]
				break;
   857e2:	e7f1      	b.n	857c8 <SystemCoreClockUpdate+0xb0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   857e4:	4a0a      	ldr	r2, [pc, #40]	; (85810 <SystemCoreClockUpdate+0xf8>)
   857e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   857e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
   857ea:	480b      	ldr	r0, [pc, #44]	; (85818 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   857ec:	f3c1 410a 	ubfx	r1, r1, #16, #11
   857f0:	6803      	ldr	r3, [r0, #0]
   857f2:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   857f6:	b2d2      	uxtb	r2, r2
   857f8:	fbb3 f3f2 	udiv	r3, r3, r2
   857fc:	6003      	str	r3, [r0, #0]
   857fe:	e7a0      	b.n	85742 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   85800:	4b05      	ldr	r3, [pc, #20]	; (85818 <SystemCoreClockUpdate+0x100>)
   85802:	681b      	ldr	r3, [r3, #0]
   85804:	4a09      	ldr	r2, [pc, #36]	; (8582c <SystemCoreClockUpdate+0x114>)
   85806:	fba2 2303 	umull	r2, r3, r2, r3
   8580a:	085b      	lsrs	r3, r3, #1
   8580c:	e7a6      	b.n	8575c <SystemCoreClockUpdate+0x44>
   8580e:	bf00      	nop
   85810:	400e0400 	.word	0x400e0400
   85814:	400e1210 	.word	0x400e1210
   85818:	20000984 	.word	0x20000984
   8581c:	003d0900 	.word	0x003d0900
   85820:	00b71b00 	.word	0x00b71b00
   85824:	007a1200 	.word	0x007a1200
   85828:	0e4e1c00 	.word	0x0e4e1c00
   8582c:	aaaaaaab 	.word	0xaaaaaaab

00085830 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   85830:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   85832:	4a09      	ldr	r2, [pc, #36]	; (85858 <_sbrk+0x28>)
   85834:	6812      	ldr	r2, [r2, #0]
   85836:	b15a      	cbz	r2, 85850 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   85838:	4a07      	ldr	r2, [pc, #28]	; (85858 <_sbrk+0x28>)
   8583a:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   8583c:	18c1      	adds	r1, r0, r3
   8583e:	4a07      	ldr	r2, [pc, #28]	; (8585c <_sbrk+0x2c>)
   85840:	4291      	cmp	r1, r2
		return (caddr_t) -1;	
	}

	heap += incr;
   85842:	bfdd      	ittte	le
   85844:	460b      	movle	r3, r1
   85846:	4a04      	ldrle	r2, [pc, #16]	; (85858 <_sbrk+0x28>)
   85848:	6013      	strle	r3, [r2, #0]
		return (caddr_t) -1;	
   8584a:	f04f 30ff 	movgt.w	r0, #4294967295

	return (caddr_t) prev_heap;
}
   8584e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   85850:	4a01      	ldr	r2, [pc, #4]	; (85858 <_sbrk+0x28>)
   85852:	4903      	ldr	r1, [pc, #12]	; (85860 <_sbrk+0x30>)
   85854:	6011      	str	r1, [r2, #0]
   85856:	e7ef      	b.n	85838 <_sbrk+0x8>
   85858:	200021a0 	.word	0x200021a0
   8585c:	2007fffc 	.word	0x2007fffc
   85860:	20082000 	.word	0x20082000

00085864 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85864:	f04f 30ff 	mov.w	r0, #4294967295
   85868:	4770      	bx	lr

0008586a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8586a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8586e:	604b      	str	r3, [r1, #4]

	return 0;
}
   85870:	2000      	movs	r0, #0
   85872:	4770      	bx	lr

00085874 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85874:	2001      	movs	r0, #1
   85876:	4770      	bx	lr

00085878 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85878:	2000      	movs	r0, #0
   8587a:	4770      	bx	lr

0008587c <_exit>:

extern void _exit(int status)
{
   8587c:	b508      	push	{r3, lr}
   8587e:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   85880:	4801      	ldr	r0, [pc, #4]	; (85888 <_exit+0xc>)
   85882:	4b02      	ldr	r3, [pc, #8]	; (8588c <_exit+0x10>)
   85884:	4798      	blx	r3

	for (;;);
   85886:	e7fe      	b.n	85886 <_exit+0xa>
   85888:	0008cb28 	.word	0x0008cb28
   8588c:	00085eed 	.word	0x00085eed

00085890 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   85890:	4770      	bx	lr

00085892 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   85892:	f04f 30ff 	mov.w	r0, #4294967295
   85896:	4770      	bx	lr

00085898 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   85898:	b5f0      	push	{r4, r5, r6, r7, lr}
   8589a:	b083      	sub	sp, #12
   8589c:	4605      	mov	r5, r0
   8589e:	460c      	mov	r4, r1
	uint32_t val = 0;
   858a0:	2300      	movs	r3, #0
   858a2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   858a4:	4b18      	ldr	r3, [pc, #96]	; (85908 <usart_serial_getchar+0x70>)
   858a6:	4298      	cmp	r0, r3
   858a8:	d010      	beq.n	858cc <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   858aa:	4b18      	ldr	r3, [pc, #96]	; (8590c <usart_serial_getchar+0x74>)
   858ac:	4298      	cmp	r0, r3
   858ae:	d021      	beq.n	858f4 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   858b0:	4b17      	ldr	r3, [pc, #92]	; (85910 <usart_serial_getchar+0x78>)
   858b2:	4298      	cmp	r0, r3
   858b4:	d111      	bne.n	858da <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   858b6:	461e      	mov	r6, r3
   858b8:	4d16      	ldr	r5, [pc, #88]	; (85914 <usart_serial_getchar+0x7c>)
   858ba:	a901      	add	r1, sp, #4
   858bc:	4630      	mov	r0, r6
   858be:	47a8      	blx	r5
   858c0:	2800      	cmp	r0, #0
   858c2:	d1fa      	bne.n	858ba <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   858c4:	9b01      	ldr	r3, [sp, #4]
   858c6:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   858c8:	b003      	add	sp, #12
   858ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   858cc:	461f      	mov	r7, r3
   858ce:	4e12      	ldr	r6, [pc, #72]	; (85918 <usart_serial_getchar+0x80>)
   858d0:	4621      	mov	r1, r4
   858d2:	4638      	mov	r0, r7
   858d4:	47b0      	blx	r6
   858d6:	2800      	cmp	r0, #0
   858d8:	d1fa      	bne.n	858d0 <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   858da:	4b10      	ldr	r3, [pc, #64]	; (8591c <usart_serial_getchar+0x84>)
   858dc:	429d      	cmp	r5, r3
   858de:	d1f3      	bne.n	858c8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   858e0:	461e      	mov	r6, r3
   858e2:	4d0c      	ldr	r5, [pc, #48]	; (85914 <usart_serial_getchar+0x7c>)
   858e4:	a901      	add	r1, sp, #4
   858e6:	4630      	mov	r0, r6
   858e8:	47a8      	blx	r5
   858ea:	2800      	cmp	r0, #0
   858ec:	d1fa      	bne.n	858e4 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   858ee:	9b01      	ldr	r3, [sp, #4]
   858f0:	7023      	strb	r3, [r4, #0]
}
   858f2:	e7e9      	b.n	858c8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   858f4:	461e      	mov	r6, r3
   858f6:	4d07      	ldr	r5, [pc, #28]	; (85914 <usart_serial_getchar+0x7c>)
   858f8:	a901      	add	r1, sp, #4
   858fa:	4630      	mov	r0, r6
   858fc:	47a8      	blx	r5
   858fe:	2800      	cmp	r0, #0
   85900:	d1fa      	bne.n	858f8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   85902:	9b01      	ldr	r3, [sp, #4]
   85904:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   85906:	e7df      	b.n	858c8 <usart_serial_getchar+0x30>
   85908:	400e0600 	.word	0x400e0600
   8590c:	40090000 	.word	0x40090000
   85910:	40094000 	.word	0x40094000
   85914:	0008560b 	.word	0x0008560b
   85918:	00085669 	.word	0x00085669
   8591c:	40098000 	.word	0x40098000

00085920 <usart_serial_putchar>:
{
   85920:	b570      	push	{r4, r5, r6, lr}
   85922:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   85924:	4b18      	ldr	r3, [pc, #96]	; (85988 <usart_serial_putchar+0x68>)
   85926:	4298      	cmp	r0, r3
   85928:	d00a      	beq.n	85940 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   8592a:	4b18      	ldr	r3, [pc, #96]	; (8598c <usart_serial_putchar+0x6c>)
   8592c:	4298      	cmp	r0, r3
   8592e:	d010      	beq.n	85952 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   85930:	4b17      	ldr	r3, [pc, #92]	; (85990 <usart_serial_putchar+0x70>)
   85932:	4298      	cmp	r0, r3
   85934:	d016      	beq.n	85964 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   85936:	4b17      	ldr	r3, [pc, #92]	; (85994 <usart_serial_putchar+0x74>)
   85938:	4298      	cmp	r0, r3
   8593a:	d01c      	beq.n	85976 <usart_serial_putchar+0x56>
	return 0;
   8593c:	2000      	movs	r0, #0
}
   8593e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   85940:	461e      	mov	r6, r3
   85942:	4d15      	ldr	r5, [pc, #84]	; (85998 <usart_serial_putchar+0x78>)
   85944:	4621      	mov	r1, r4
   85946:	4630      	mov	r0, r6
   85948:	47a8      	blx	r5
   8594a:	2800      	cmp	r0, #0
   8594c:	d1fa      	bne.n	85944 <usart_serial_putchar+0x24>
		return 1;
   8594e:	2001      	movs	r0, #1
   85950:	e7f5      	b.n	8593e <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85952:	461e      	mov	r6, r3
   85954:	4d11      	ldr	r5, [pc, #68]	; (8599c <usart_serial_putchar+0x7c>)
   85956:	4621      	mov	r1, r4
   85958:	4630      	mov	r0, r6
   8595a:	47a8      	blx	r5
   8595c:	2800      	cmp	r0, #0
   8595e:	d1fa      	bne.n	85956 <usart_serial_putchar+0x36>
		return 1;
   85960:	2001      	movs	r0, #1
   85962:	e7ec      	b.n	8593e <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85964:	461e      	mov	r6, r3
   85966:	4d0d      	ldr	r5, [pc, #52]	; (8599c <usart_serial_putchar+0x7c>)
   85968:	4621      	mov	r1, r4
   8596a:	4630      	mov	r0, r6
   8596c:	47a8      	blx	r5
   8596e:	2800      	cmp	r0, #0
   85970:	d1fa      	bne.n	85968 <usart_serial_putchar+0x48>
		return 1;
   85972:	2001      	movs	r0, #1
   85974:	e7e3      	b.n	8593e <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85976:	461e      	mov	r6, r3
   85978:	4d08      	ldr	r5, [pc, #32]	; (8599c <usart_serial_putchar+0x7c>)
   8597a:	4621      	mov	r1, r4
   8597c:	4630      	mov	r0, r6
   8597e:	47a8      	blx	r5
   85980:	2800      	cmp	r0, #0
   85982:	d1fa      	bne.n	8597a <usart_serial_putchar+0x5a>
		return 1;
   85984:	2001      	movs	r0, #1
   85986:	e7da      	b.n	8593e <usart_serial_putchar+0x1e>
   85988:	400e0600 	.word	0x400e0600
   8598c:	40090000 	.word	0x40090000
   85990:	40094000 	.word	0x40094000
   85994:	40098000 	.word	0x40098000
   85998:	00085659 	.word	0x00085659
   8599c:	000855e5 	.word	0x000855e5

000859a0 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   859a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   859a4:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   859a6:	2110      	movs	r1, #16
   859a8:	eb0d 0001 	add.w	r0, sp, r1
   859ac:	4b52      	ldr	r3, [pc, #328]	; (85af8 <main+0x158>)
   859ae:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   859b0:	2008      	movs	r0, #8
   859b2:	4d52      	ldr	r5, [pc, #328]	; (85afc <main+0x15c>)
   859b4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   859b6:	4c52      	ldr	r4, [pc, #328]	; (85b00 <main+0x160>)
   859b8:	4b52      	ldr	r3, [pc, #328]	; (85b04 <main+0x164>)
   859ba:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   859bc:	4b52      	ldr	r3, [pc, #328]	; (85b08 <main+0x168>)
   859be:	4a53      	ldr	r2, [pc, #332]	; (85b0c <main+0x16c>)
   859c0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   859c2:	4b53      	ldr	r3, [pc, #332]	; (85b10 <main+0x170>)
   859c4:	4a53      	ldr	r2, [pc, #332]	; (85b14 <main+0x174>)
   859c6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   859c8:	4b53      	ldr	r3, [pc, #332]	; (85b18 <main+0x178>)
   859ca:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   859cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   859d0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   859d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   859d6:	9303      	str	r3, [sp, #12]
   859d8:	2008      	movs	r0, #8
   859da:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   859dc:	a901      	add	r1, sp, #4
   859de:	4620      	mov	r0, r4
   859e0:	4b4e      	ldr	r3, [pc, #312]	; (85b1c <main+0x17c>)
   859e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   859e4:	4d4e      	ldr	r5, [pc, #312]	; (85b20 <main+0x180>)
   859e6:	682b      	ldr	r3, [r5, #0]
   859e8:	2100      	movs	r1, #0
   859ea:	6898      	ldr	r0, [r3, #8]
   859ec:	4c4d      	ldr	r4, [pc, #308]	; (85b24 <main+0x184>)
   859ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
   859f0:	682b      	ldr	r3, [r5, #0]
   859f2:	2100      	movs	r1, #0
   859f4:	6858      	ldr	r0, [r3, #4]
   859f6:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   859f8:	2101      	movs	r1, #1
   859fa:	4b4b      	ldr	r3, [pc, #300]	; (85b28 <main+0x188>)
   859fc:	7019      	strb	r1, [r3, #0]
   859fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a02:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   85a04:	4b49      	ldr	r3, [pc, #292]	; (85b2c <main+0x18c>)
   85a06:	2200      	movs	r2, #0
   85a08:	701a      	strb	r2, [r3, #0]
   85a0a:	705a      	strb	r2, [r3, #1]
   85a0c:	709a      	strb	r2, [r3, #2]
   85a0e:	70da      	strb	r2, [r3, #3]
   85a10:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   85a12:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85a14:	4b46      	ldr	r3, [pc, #280]	; (85b30 <main+0x190>)
   85a16:	4798      	blx	r3
	board_init();
   85a18:	4b46      	ldr	r3, [pc, #280]	; (85b34 <main+0x194>)
   85a1a:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   85a1c:	4b46      	ldr	r3, [pc, #280]	; (85b38 <main+0x198>)
   85a1e:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   85a20:	ac04      	add	r4, sp, #16
   85a22:	4d46      	ldr	r5, [pc, #280]	; (85b3c <main+0x19c>)
   85a24:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   85a28:	4f45      	ldr	r7, [pc, #276]	; (85b40 <main+0x1a0>)
   85a2a:	4e46      	ldr	r6, [pc, #280]	; (85b44 <main+0x1a4>)
   85a2c:	f854 2b04 	ldr.w	r2, [r4], #4
   85a30:	4639      	mov	r1, r7
   85a32:	4628      	mov	r0, r5
   85a34:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   85a36:	3508      	adds	r5, #8
   85a38:	45a0      	cmp	r8, r4
   85a3a:	d1f7      	bne.n	85a2c <main+0x8c>
	}
	usb_serial_number[32] = 0;
   85a3c:	4c3f      	ldr	r4, [pc, #252]	; (85b3c <main+0x19c>)
   85a3e:	2600      	movs	r6, #0
   85a40:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   85a44:	4a40      	ldr	r2, [pc, #256]	; (85b48 <main+0x1a8>)
   85a46:	4941      	ldr	r1, [pc, #260]	; (85b4c <main+0x1ac>)
   85a48:	4841      	ldr	r0, [pc, #260]	; (85b50 <main+0x1b0>)
   85a4a:	4f42      	ldr	r7, [pc, #264]	; (85b54 <main+0x1b4>)
   85a4c:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   85a4e:	4621      	mov	r1, r4
   85a50:	4841      	ldr	r0, [pc, #260]	; (85b58 <main+0x1b8>)
   85a52:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   85a54:	2009      	movs	r0, #9
   85a56:	4b29      	ldr	r3, [pc, #164]	; (85afc <main+0x15c>)
   85a58:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   85a5a:	4d40      	ldr	r5, [pc, #256]	; (85b5c <main+0x1bc>)
   85a5c:	4629      	mov	r1, r5
   85a5e:	2029      	movs	r0, #41	; 0x29
   85a60:	4c3f      	ldr	r4, [pc, #252]	; (85b60 <main+0x1c0>)
   85a62:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   85a64:	4629      	mov	r1, r5
   85a66:	202a      	movs	r0, #42	; 0x2a
   85a68:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   85a6a:	4629      	mov	r1, r5
   85a6c:	202b      	movs	r0, #43	; 0x2b
   85a6e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   85a70:	4629      	mov	r1, r5
   85a72:	202c      	movs	r0, #44	; 0x2c
   85a74:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   85a76:	4629      	mov	r1, r5
   85a78:	202d      	movs	r0, #45	; 0x2d
   85a7a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   85a7c:	4629      	mov	r1, r5
   85a7e:	202e      	movs	r0, #46	; 0x2e
   85a80:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   85a82:	4629      	mov	r1, r5
   85a84:	202f      	movs	r0, #47	; 0x2f
   85a86:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   85a88:	4629      	mov	r1, r5
   85a8a:	2030      	movs	r0, #48	; 0x30
   85a8c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   85a8e:	4629      	mov	r1, r5
   85a90:	2033      	movs	r0, #51	; 0x33
   85a92:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   85a94:	4629      	mov	r1, r5
   85a96:	2037      	movs	r0, #55	; 0x37
   85a98:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   85a9a:	4629      	mov	r1, r5
   85a9c:	2034      	movs	r0, #52	; 0x34
   85a9e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   85aa0:	4830      	ldr	r0, [pc, #192]	; (85b64 <main+0x1c4>)
   85aa2:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   85aa4:	4c30      	ldr	r4, [pc, #192]	; (85b68 <main+0x1c8>)
   85aa6:	4a31      	ldr	r2, [pc, #196]	; (85b6c <main+0x1cc>)
   85aa8:	4631      	mov	r1, r6
   85aaa:	4620      	mov	r0, r4
   85aac:	4b30      	ldr	r3, [pc, #192]	; (85b70 <main+0x1d0>)
   85aae:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   85ab0:	4a30      	ldr	r2, [pc, #192]	; (85b74 <main+0x1d4>)
   85ab2:	4631      	mov	r1, r6
   85ab4:	4620      	mov	r0, r4
   85ab6:	4b30      	ldr	r3, [pc, #192]	; (85b78 <main+0x1d8>)
   85ab8:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   85aba:	4a30      	ldr	r2, [pc, #192]	; (85b7c <main+0x1dc>)
   85abc:	4631      	mov	r1, r6
   85abe:	4620      	mov	r0, r4
   85ac0:	4b2f      	ldr	r3, [pc, #188]	; (85b80 <main+0x1e0>)
   85ac2:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   85ac4:	2203      	movs	r2, #3
   85ac6:	4631      	mov	r1, r6
   85ac8:	4620      	mov	r0, r4
   85aca:	4b2e      	ldr	r3, [pc, #184]	; (85b84 <main+0x1e4>)
   85acc:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   85ace:	4b2e      	ldr	r3, [pc, #184]	; (85b88 <main+0x1e8>)
   85ad0:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   85ad2:	4b2e      	ldr	r3, [pc, #184]	; (85b8c <main+0x1ec>)
   85ad4:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   85ad6:	4b2e      	ldr	r3, [pc, #184]	; (85b90 <main+0x1f0>)
   85ad8:	2204      	movs	r2, #4
   85ada:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   85adc:	4630      	mov	r0, r6
   85ade:	4b2d      	ldr	r3, [pc, #180]	; (85b94 <main+0x1f4>)
   85ae0:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   85ae2:	482d      	ldr	r0, [pc, #180]	; (85b98 <main+0x1f8>)
   85ae4:	47b8      	blx	r7
	naeusb_register_handlers();
   85ae6:	4b2d      	ldr	r3, [pc, #180]	; (85b9c <main+0x1fc>)
   85ae8:	4798      	blx	r3
	naeusart_register_handlers();
   85aea:	4b2d      	ldr	r3, [pc, #180]	; (85ba0 <main+0x200>)
   85aec:	4798      	blx	r3
	openadc_register_handlers();
   85aee:	4b2d      	ldr	r3, [pc, #180]	; (85ba4 <main+0x204>)
   85af0:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   85af2:	4c2d      	ldr	r4, [pc, #180]	; (85ba8 <main+0x208>)
   85af4:	47a0      	blx	r4
	while (true) {
   85af6:	e7fd      	b.n	85af4 <main+0x154>
   85af8:	00082e69 	.word	0x00082e69
   85afc:	00083ef5 	.word	0x00083ef5
   85b00:	400e0600 	.word	0x400e0600
   85b04:	20002698 	.word	0x20002698
   85b08:	20002694 	.word	0x20002694
   85b0c:	00085921 	.word	0x00085921
   85b10:	20002690 	.word	0x20002690
   85b14:	00085899 	.word	0x00085899
   85b18:	05b8d800 	.word	0x05b8d800
   85b1c:	00085623 	.word	0x00085623
   85b20:	200009ac 	.word	0x200009ac
   85b24:	000860a1 	.word	0x000860a1
   85b28:	20000982 	.word	0x20000982
   85b2c:	20002688 	.word	0x20002688
   85b30:	00082f6d 	.word	0x00082f6d
   85b34:	00083a21 	.word	0x00083a21
   85b38:	00082b29 	.word	0x00082b29
   85b3c:	20000988 	.word	0x20000988
   85b40:	0008cb44 	.word	0x0008cb44
   85b44:	00086251 	.word	0x00086251
   85b48:	0008cb4c 	.word	0x0008cb4c
   85b4c:	0008cb58 	.word	0x0008cb58
   85b50:	0008cb64 	.word	0x0008cb64
   85b54:	00085eed 	.word	0x00085eed
   85b58:	0008cb98 	.word	0x0008cb98
   85b5c:	08000001 	.word	0x08000001
   85b60:	00083bb9 	.word	0x00083bb9
   85b64:	0008cbac 	.word	0x0008cbac
   85b68:	400e0000 	.word	0x400e0000
   85b6c:	01010100 	.word	0x01010100
   85b70:	00083a91 	.word	0x00083a91
   85b74:	01030101 	.word	0x01030101
   85b78:	00083a9d 	.word	0x00083a9d
   85b7c:	00040002 	.word	0x00040002
   85b80:	00083aa9 	.word	0x00083aa9
   85b84:	00083ab5 	.word	0x00083ab5
   85b88:	00082eb5 	.word	0x00082eb5
   85b8c:	00083235 	.word	0x00083235
   85b90:	400e0400 	.word	0x400e0400
   85b94:	00083f4d 	.word	0x00083f4d
   85b98:	0008cbcc 	.word	0x0008cbcc
   85b9c:	0008156d 	.word	0x0008156d
   85ba0:	00081d4d 	.word	0x00081d4d
   85ba4:	00081899 	.word	0x00081899
   85ba8:	00081f79 	.word	0x00081f79

00085bac <__aeabi_uldivmod>:
   85bac:	b953      	cbnz	r3, 85bc4 <__aeabi_uldivmod+0x18>
   85bae:	b94a      	cbnz	r2, 85bc4 <__aeabi_uldivmod+0x18>
   85bb0:	2900      	cmp	r1, #0
   85bb2:	bf08      	it	eq
   85bb4:	2800      	cmpeq	r0, #0
   85bb6:	bf1c      	itt	ne
   85bb8:	f04f 31ff 	movne.w	r1, #4294967295
   85bbc:	f04f 30ff 	movne.w	r0, #4294967295
   85bc0:	f000 b96e 	b.w	85ea0 <__aeabi_idiv0>
   85bc4:	f1ad 0c08 	sub.w	ip, sp, #8
   85bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85bcc:	f000 f806 	bl	85bdc <__udivmoddi4>
   85bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
   85bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85bd8:	b004      	add	sp, #16
   85bda:	4770      	bx	lr

00085bdc <__udivmoddi4>:
   85bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85be0:	9e08      	ldr	r6, [sp, #32]
   85be2:	460d      	mov	r5, r1
   85be4:	4604      	mov	r4, r0
   85be6:	468e      	mov	lr, r1
   85be8:	2b00      	cmp	r3, #0
   85bea:	f040 8083 	bne.w	85cf4 <__udivmoddi4+0x118>
   85bee:	428a      	cmp	r2, r1
   85bf0:	4617      	mov	r7, r2
   85bf2:	d947      	bls.n	85c84 <__udivmoddi4+0xa8>
   85bf4:	fab2 f382 	clz	r3, r2
   85bf8:	b14b      	cbz	r3, 85c0e <__udivmoddi4+0x32>
   85bfa:	f1c3 0120 	rsb	r1, r3, #32
   85bfe:	fa05 fe03 	lsl.w	lr, r5, r3
   85c02:	fa20 f101 	lsr.w	r1, r0, r1
   85c06:	409f      	lsls	r7, r3
   85c08:	ea41 0e0e 	orr.w	lr, r1, lr
   85c0c:	409c      	lsls	r4, r3
   85c0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85c12:	fbbe fcf8 	udiv	ip, lr, r8
   85c16:	fa1f f987 	uxth.w	r9, r7
   85c1a:	fb08 e21c 	mls	r2, r8, ip, lr
   85c1e:	fb0c f009 	mul.w	r0, ip, r9
   85c22:	0c21      	lsrs	r1, r4, #16
   85c24:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   85c28:	4290      	cmp	r0, r2
   85c2a:	d90a      	bls.n	85c42 <__udivmoddi4+0x66>
   85c2c:	18ba      	adds	r2, r7, r2
   85c2e:	f10c 31ff 	add.w	r1, ip, #4294967295
   85c32:	f080 8118 	bcs.w	85e66 <__udivmoddi4+0x28a>
   85c36:	4290      	cmp	r0, r2
   85c38:	f240 8115 	bls.w	85e66 <__udivmoddi4+0x28a>
   85c3c:	f1ac 0c02 	sub.w	ip, ip, #2
   85c40:	443a      	add	r2, r7
   85c42:	1a12      	subs	r2, r2, r0
   85c44:	fbb2 f0f8 	udiv	r0, r2, r8
   85c48:	fb08 2210 	mls	r2, r8, r0, r2
   85c4c:	fb00 f109 	mul.w	r1, r0, r9
   85c50:	b2a4      	uxth	r4, r4
   85c52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   85c56:	42a1      	cmp	r1, r4
   85c58:	d909      	bls.n	85c6e <__udivmoddi4+0x92>
   85c5a:	193c      	adds	r4, r7, r4
   85c5c:	f100 32ff 	add.w	r2, r0, #4294967295
   85c60:	f080 8103 	bcs.w	85e6a <__udivmoddi4+0x28e>
   85c64:	42a1      	cmp	r1, r4
   85c66:	f240 8100 	bls.w	85e6a <__udivmoddi4+0x28e>
   85c6a:	3802      	subs	r0, #2
   85c6c:	443c      	add	r4, r7
   85c6e:	1a64      	subs	r4, r4, r1
   85c70:	2100      	movs	r1, #0
   85c72:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85c76:	b11e      	cbz	r6, 85c80 <__udivmoddi4+0xa4>
   85c78:	2200      	movs	r2, #0
   85c7a:	40dc      	lsrs	r4, r3
   85c7c:	e9c6 4200 	strd	r4, r2, [r6]
   85c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c84:	b902      	cbnz	r2, 85c88 <__udivmoddi4+0xac>
   85c86:	deff      	udf	#255	; 0xff
   85c88:	fab2 f382 	clz	r3, r2
   85c8c:	2b00      	cmp	r3, #0
   85c8e:	d14f      	bne.n	85d30 <__udivmoddi4+0x154>
   85c90:	1a8d      	subs	r5, r1, r2
   85c92:	2101      	movs	r1, #1
   85c94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   85c98:	fa1f f882 	uxth.w	r8, r2
   85c9c:	fbb5 fcfe 	udiv	ip, r5, lr
   85ca0:	fb0e 551c 	mls	r5, lr, ip, r5
   85ca4:	fb08 f00c 	mul.w	r0, r8, ip
   85ca8:	0c22      	lsrs	r2, r4, #16
   85caa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85cae:	42a8      	cmp	r0, r5
   85cb0:	d907      	bls.n	85cc2 <__udivmoddi4+0xe6>
   85cb2:	197d      	adds	r5, r7, r5
   85cb4:	f10c 32ff 	add.w	r2, ip, #4294967295
   85cb8:	d202      	bcs.n	85cc0 <__udivmoddi4+0xe4>
   85cba:	42a8      	cmp	r0, r5
   85cbc:	f200 80e9 	bhi.w	85e92 <__udivmoddi4+0x2b6>
   85cc0:	4694      	mov	ip, r2
   85cc2:	1a2d      	subs	r5, r5, r0
   85cc4:	fbb5 f0fe 	udiv	r0, r5, lr
   85cc8:	fb0e 5510 	mls	r5, lr, r0, r5
   85ccc:	fb08 f800 	mul.w	r8, r8, r0
   85cd0:	b2a4      	uxth	r4, r4
   85cd2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   85cd6:	45a0      	cmp	r8, r4
   85cd8:	d907      	bls.n	85cea <__udivmoddi4+0x10e>
   85cda:	193c      	adds	r4, r7, r4
   85cdc:	f100 32ff 	add.w	r2, r0, #4294967295
   85ce0:	d202      	bcs.n	85ce8 <__udivmoddi4+0x10c>
   85ce2:	45a0      	cmp	r8, r4
   85ce4:	f200 80d9 	bhi.w	85e9a <__udivmoddi4+0x2be>
   85ce8:	4610      	mov	r0, r2
   85cea:	eba4 0408 	sub.w	r4, r4, r8
   85cee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85cf2:	e7c0      	b.n	85c76 <__udivmoddi4+0x9a>
   85cf4:	428b      	cmp	r3, r1
   85cf6:	d908      	bls.n	85d0a <__udivmoddi4+0x12e>
   85cf8:	2e00      	cmp	r6, #0
   85cfa:	f000 80b1 	beq.w	85e60 <__udivmoddi4+0x284>
   85cfe:	2100      	movs	r1, #0
   85d00:	e9c6 0500 	strd	r0, r5, [r6]
   85d04:	4608      	mov	r0, r1
   85d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85d0a:	fab3 f183 	clz	r1, r3
   85d0e:	2900      	cmp	r1, #0
   85d10:	d14b      	bne.n	85daa <__udivmoddi4+0x1ce>
   85d12:	42ab      	cmp	r3, r5
   85d14:	d302      	bcc.n	85d1c <__udivmoddi4+0x140>
   85d16:	4282      	cmp	r2, r0
   85d18:	f200 80b9 	bhi.w	85e8e <__udivmoddi4+0x2b2>
   85d1c:	1a84      	subs	r4, r0, r2
   85d1e:	eb65 0303 	sbc.w	r3, r5, r3
   85d22:	2001      	movs	r0, #1
   85d24:	469e      	mov	lr, r3
   85d26:	2e00      	cmp	r6, #0
   85d28:	d0aa      	beq.n	85c80 <__udivmoddi4+0xa4>
   85d2a:	e9c6 4e00 	strd	r4, lr, [r6]
   85d2e:	e7a7      	b.n	85c80 <__udivmoddi4+0xa4>
   85d30:	409f      	lsls	r7, r3
   85d32:	f1c3 0220 	rsb	r2, r3, #32
   85d36:	40d1      	lsrs	r1, r2
   85d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   85d3c:	fbb1 f0fe 	udiv	r0, r1, lr
   85d40:	fa1f f887 	uxth.w	r8, r7
   85d44:	fb0e 1110 	mls	r1, lr, r0, r1
   85d48:	fa24 f202 	lsr.w	r2, r4, r2
   85d4c:	409d      	lsls	r5, r3
   85d4e:	fb00 fc08 	mul.w	ip, r0, r8
   85d52:	432a      	orrs	r2, r5
   85d54:	0c15      	lsrs	r5, r2, #16
   85d56:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85d5a:	45ac      	cmp	ip, r5
   85d5c:	fa04 f403 	lsl.w	r4, r4, r3
   85d60:	d909      	bls.n	85d76 <__udivmoddi4+0x19a>
   85d62:	197d      	adds	r5, r7, r5
   85d64:	f100 31ff 	add.w	r1, r0, #4294967295
   85d68:	f080 808f 	bcs.w	85e8a <__udivmoddi4+0x2ae>
   85d6c:	45ac      	cmp	ip, r5
   85d6e:	f240 808c 	bls.w	85e8a <__udivmoddi4+0x2ae>
   85d72:	3802      	subs	r0, #2
   85d74:	443d      	add	r5, r7
   85d76:	eba5 050c 	sub.w	r5, r5, ip
   85d7a:	fbb5 f1fe 	udiv	r1, r5, lr
   85d7e:	fb0e 5c11 	mls	ip, lr, r1, r5
   85d82:	fb01 f908 	mul.w	r9, r1, r8
   85d86:	b295      	uxth	r5, r2
   85d88:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   85d8c:	45a9      	cmp	r9, r5
   85d8e:	d907      	bls.n	85da0 <__udivmoddi4+0x1c4>
   85d90:	197d      	adds	r5, r7, r5
   85d92:	f101 32ff 	add.w	r2, r1, #4294967295
   85d96:	d274      	bcs.n	85e82 <__udivmoddi4+0x2a6>
   85d98:	45a9      	cmp	r9, r5
   85d9a:	d972      	bls.n	85e82 <__udivmoddi4+0x2a6>
   85d9c:	3902      	subs	r1, #2
   85d9e:	443d      	add	r5, r7
   85da0:	eba5 0509 	sub.w	r5, r5, r9
   85da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   85da8:	e778      	b.n	85c9c <__udivmoddi4+0xc0>
   85daa:	f1c1 0720 	rsb	r7, r1, #32
   85dae:	408b      	lsls	r3, r1
   85db0:	fa22 fc07 	lsr.w	ip, r2, r7
   85db4:	ea4c 0c03 	orr.w	ip, ip, r3
   85db8:	fa25 f407 	lsr.w	r4, r5, r7
   85dbc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   85dc0:	fbb4 f9fe 	udiv	r9, r4, lr
   85dc4:	fa1f f88c 	uxth.w	r8, ip
   85dc8:	fb0e 4419 	mls	r4, lr, r9, r4
   85dcc:	fa20 f307 	lsr.w	r3, r0, r7
   85dd0:	fb09 fa08 	mul.w	sl, r9, r8
   85dd4:	408d      	lsls	r5, r1
   85dd6:	431d      	orrs	r5, r3
   85dd8:	0c2b      	lsrs	r3, r5, #16
   85dda:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   85dde:	45a2      	cmp	sl, r4
   85de0:	fa02 f201 	lsl.w	r2, r2, r1
   85de4:	fa00 f301 	lsl.w	r3, r0, r1
   85de8:	d909      	bls.n	85dfe <__udivmoddi4+0x222>
   85dea:	eb1c 0404 	adds.w	r4, ip, r4
   85dee:	f109 30ff 	add.w	r0, r9, #4294967295
   85df2:	d248      	bcs.n	85e86 <__udivmoddi4+0x2aa>
   85df4:	45a2      	cmp	sl, r4
   85df6:	d946      	bls.n	85e86 <__udivmoddi4+0x2aa>
   85df8:	f1a9 0902 	sub.w	r9, r9, #2
   85dfc:	4464      	add	r4, ip
   85dfe:	eba4 040a 	sub.w	r4, r4, sl
   85e02:	fbb4 f0fe 	udiv	r0, r4, lr
   85e06:	fb0e 4410 	mls	r4, lr, r0, r4
   85e0a:	fb00 fa08 	mul.w	sl, r0, r8
   85e0e:	b2ad      	uxth	r5, r5
   85e10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   85e14:	45a2      	cmp	sl, r4
   85e16:	d908      	bls.n	85e2a <__udivmoddi4+0x24e>
   85e18:	eb1c 0404 	adds.w	r4, ip, r4
   85e1c:	f100 35ff 	add.w	r5, r0, #4294967295
   85e20:	d22d      	bcs.n	85e7e <__udivmoddi4+0x2a2>
   85e22:	45a2      	cmp	sl, r4
   85e24:	d92b      	bls.n	85e7e <__udivmoddi4+0x2a2>
   85e26:	3802      	subs	r0, #2
   85e28:	4464      	add	r4, ip
   85e2a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85e2e:	fba0 8902 	umull	r8, r9, r0, r2
   85e32:	eba4 040a 	sub.w	r4, r4, sl
   85e36:	454c      	cmp	r4, r9
   85e38:	46c6      	mov	lr, r8
   85e3a:	464d      	mov	r5, r9
   85e3c:	d319      	bcc.n	85e72 <__udivmoddi4+0x296>
   85e3e:	d016      	beq.n	85e6e <__udivmoddi4+0x292>
   85e40:	b15e      	cbz	r6, 85e5a <__udivmoddi4+0x27e>
   85e42:	ebb3 020e 	subs.w	r2, r3, lr
   85e46:	eb64 0405 	sbc.w	r4, r4, r5
   85e4a:	fa04 f707 	lsl.w	r7, r4, r7
   85e4e:	fa22 f301 	lsr.w	r3, r2, r1
   85e52:	431f      	orrs	r7, r3
   85e54:	40cc      	lsrs	r4, r1
   85e56:	e9c6 7400 	strd	r7, r4, [r6]
   85e5a:	2100      	movs	r1, #0
   85e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85e60:	4631      	mov	r1, r6
   85e62:	4630      	mov	r0, r6
   85e64:	e70c      	b.n	85c80 <__udivmoddi4+0xa4>
   85e66:	468c      	mov	ip, r1
   85e68:	e6eb      	b.n	85c42 <__udivmoddi4+0x66>
   85e6a:	4610      	mov	r0, r2
   85e6c:	e6ff      	b.n	85c6e <__udivmoddi4+0x92>
   85e6e:	4543      	cmp	r3, r8
   85e70:	d2e6      	bcs.n	85e40 <__udivmoddi4+0x264>
   85e72:	ebb8 0e02 	subs.w	lr, r8, r2
   85e76:	eb69 050c 	sbc.w	r5, r9, ip
   85e7a:	3801      	subs	r0, #1
   85e7c:	e7e0      	b.n	85e40 <__udivmoddi4+0x264>
   85e7e:	4628      	mov	r0, r5
   85e80:	e7d3      	b.n	85e2a <__udivmoddi4+0x24e>
   85e82:	4611      	mov	r1, r2
   85e84:	e78c      	b.n	85da0 <__udivmoddi4+0x1c4>
   85e86:	4681      	mov	r9, r0
   85e88:	e7b9      	b.n	85dfe <__udivmoddi4+0x222>
   85e8a:	4608      	mov	r0, r1
   85e8c:	e773      	b.n	85d76 <__udivmoddi4+0x19a>
   85e8e:	4608      	mov	r0, r1
   85e90:	e749      	b.n	85d26 <__udivmoddi4+0x14a>
   85e92:	f1ac 0c02 	sub.w	ip, ip, #2
   85e96:	443d      	add	r5, r7
   85e98:	e713      	b.n	85cc2 <__udivmoddi4+0xe6>
   85e9a:	3802      	subs	r0, #2
   85e9c:	443c      	add	r4, r7
   85e9e:	e724      	b.n	85cea <__udivmoddi4+0x10e>

00085ea0 <__aeabi_idiv0>:
   85ea0:	4770      	bx	lr
   85ea2:	bf00      	nop

00085ea4 <__libc_init_array>:
   85ea4:	b570      	push	{r4, r5, r6, lr}
   85ea6:	4e0d      	ldr	r6, [pc, #52]	; (85edc <__libc_init_array+0x38>)
   85ea8:	4d0d      	ldr	r5, [pc, #52]	; (85ee0 <__libc_init_array+0x3c>)
   85eaa:	1b76      	subs	r6, r6, r5
   85eac:	10b6      	asrs	r6, r6, #2
   85eae:	d006      	beq.n	85ebe <__libc_init_array+0x1a>
   85eb0:	2400      	movs	r4, #0
   85eb2:	f855 3b04 	ldr.w	r3, [r5], #4
   85eb6:	3401      	adds	r4, #1
   85eb8:	4798      	blx	r3
   85eba:	42a6      	cmp	r6, r4
   85ebc:	d1f9      	bne.n	85eb2 <__libc_init_array+0xe>
   85ebe:	4e09      	ldr	r6, [pc, #36]	; (85ee4 <__libc_init_array+0x40>)
   85ec0:	4d09      	ldr	r5, [pc, #36]	; (85ee8 <__libc_init_array+0x44>)
   85ec2:	f007 f891 	bl	8cfe8 <_init>
   85ec6:	1b76      	subs	r6, r6, r5
   85ec8:	10b6      	asrs	r6, r6, #2
   85eca:	d006      	beq.n	85eda <__libc_init_array+0x36>
   85ecc:	2400      	movs	r4, #0
   85ece:	f855 3b04 	ldr.w	r3, [r5], #4
   85ed2:	3401      	adds	r4, #1
   85ed4:	4798      	blx	r3
   85ed6:	42a6      	cmp	r6, r4
   85ed8:	d1f9      	bne.n	85ece <__libc_init_array+0x2a>
   85eda:	bd70      	pop	{r4, r5, r6, pc}
   85edc:	0008cff4 	.word	0x0008cff4
   85ee0:	0008cff4 	.word	0x0008cff4
   85ee4:	0008cffc 	.word	0x0008cffc
   85ee8:	0008cff4 	.word	0x0008cff4

00085eec <iprintf>:
   85eec:	b40f      	push	{r0, r1, r2, r3}
   85eee:	b500      	push	{lr}
   85ef0:	4907      	ldr	r1, [pc, #28]	; (85f10 <iprintf+0x24>)
   85ef2:	b083      	sub	sp, #12
   85ef4:	ab04      	add	r3, sp, #16
   85ef6:	6808      	ldr	r0, [r1, #0]
   85ef8:	f853 2b04 	ldr.w	r2, [r3], #4
   85efc:	6881      	ldr	r1, [r0, #8]
   85efe:	9301      	str	r3, [sp, #4]
   85f00:	f002 f80e 	bl	87f20 <_vfiprintf_r>
   85f04:	b003      	add	sp, #12
   85f06:	f85d eb04 	ldr.w	lr, [sp], #4
   85f0a:	b004      	add	sp, #16
   85f0c:	4770      	bx	lr
   85f0e:	bf00      	nop
   85f10:	200009ac 	.word	0x200009ac

00085f14 <memcpy>:
   85f14:	4684      	mov	ip, r0
   85f16:	ea41 0300 	orr.w	r3, r1, r0
   85f1a:	f013 0303 	ands.w	r3, r3, #3
   85f1e:	d149      	bne.n	85fb4 <memcpy+0xa0>
   85f20:	3a40      	subs	r2, #64	; 0x40
   85f22:	d323      	bcc.n	85f6c <memcpy+0x58>
   85f24:	680b      	ldr	r3, [r1, #0]
   85f26:	6003      	str	r3, [r0, #0]
   85f28:	684b      	ldr	r3, [r1, #4]
   85f2a:	6043      	str	r3, [r0, #4]
   85f2c:	688b      	ldr	r3, [r1, #8]
   85f2e:	6083      	str	r3, [r0, #8]
   85f30:	68cb      	ldr	r3, [r1, #12]
   85f32:	60c3      	str	r3, [r0, #12]
   85f34:	690b      	ldr	r3, [r1, #16]
   85f36:	6103      	str	r3, [r0, #16]
   85f38:	694b      	ldr	r3, [r1, #20]
   85f3a:	6143      	str	r3, [r0, #20]
   85f3c:	698b      	ldr	r3, [r1, #24]
   85f3e:	6183      	str	r3, [r0, #24]
   85f40:	69cb      	ldr	r3, [r1, #28]
   85f42:	61c3      	str	r3, [r0, #28]
   85f44:	6a0b      	ldr	r3, [r1, #32]
   85f46:	6203      	str	r3, [r0, #32]
   85f48:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85f4a:	6243      	str	r3, [r0, #36]	; 0x24
   85f4c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85f4e:	6283      	str	r3, [r0, #40]	; 0x28
   85f50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85f52:	62c3      	str	r3, [r0, #44]	; 0x2c
   85f54:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85f56:	6303      	str	r3, [r0, #48]	; 0x30
   85f58:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85f5a:	6343      	str	r3, [r0, #52]	; 0x34
   85f5c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85f5e:	6383      	str	r3, [r0, #56]	; 0x38
   85f60:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85f62:	63c3      	str	r3, [r0, #60]	; 0x3c
   85f64:	3040      	adds	r0, #64	; 0x40
   85f66:	3140      	adds	r1, #64	; 0x40
   85f68:	3a40      	subs	r2, #64	; 0x40
   85f6a:	d2db      	bcs.n	85f24 <memcpy+0x10>
   85f6c:	3230      	adds	r2, #48	; 0x30
   85f6e:	d30b      	bcc.n	85f88 <memcpy+0x74>
   85f70:	680b      	ldr	r3, [r1, #0]
   85f72:	6003      	str	r3, [r0, #0]
   85f74:	684b      	ldr	r3, [r1, #4]
   85f76:	6043      	str	r3, [r0, #4]
   85f78:	688b      	ldr	r3, [r1, #8]
   85f7a:	6083      	str	r3, [r0, #8]
   85f7c:	68cb      	ldr	r3, [r1, #12]
   85f7e:	60c3      	str	r3, [r0, #12]
   85f80:	3010      	adds	r0, #16
   85f82:	3110      	adds	r1, #16
   85f84:	3a10      	subs	r2, #16
   85f86:	d2f3      	bcs.n	85f70 <memcpy+0x5c>
   85f88:	320c      	adds	r2, #12
   85f8a:	d305      	bcc.n	85f98 <memcpy+0x84>
   85f8c:	f851 3b04 	ldr.w	r3, [r1], #4
   85f90:	f840 3b04 	str.w	r3, [r0], #4
   85f94:	3a04      	subs	r2, #4
   85f96:	d2f9      	bcs.n	85f8c <memcpy+0x78>
   85f98:	3204      	adds	r2, #4
   85f9a:	d008      	beq.n	85fae <memcpy+0x9a>
   85f9c:	07d2      	lsls	r2, r2, #31
   85f9e:	bf1c      	itt	ne
   85fa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85fa4:	f800 3b01 	strbne.w	r3, [r0], #1
   85fa8:	d301      	bcc.n	85fae <memcpy+0x9a>
   85faa:	880b      	ldrh	r3, [r1, #0]
   85fac:	8003      	strh	r3, [r0, #0]
   85fae:	4660      	mov	r0, ip
   85fb0:	4770      	bx	lr
   85fb2:	bf00      	nop
   85fb4:	2a08      	cmp	r2, #8
   85fb6:	d313      	bcc.n	85fe0 <memcpy+0xcc>
   85fb8:	078b      	lsls	r3, r1, #30
   85fba:	d0b1      	beq.n	85f20 <memcpy+0xc>
   85fbc:	f010 0303 	ands.w	r3, r0, #3
   85fc0:	d0ae      	beq.n	85f20 <memcpy+0xc>
   85fc2:	f1c3 0304 	rsb	r3, r3, #4
   85fc6:	1ad2      	subs	r2, r2, r3
   85fc8:	07db      	lsls	r3, r3, #31
   85fca:	bf1c      	itt	ne
   85fcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85fd0:	f800 3b01 	strbne.w	r3, [r0], #1
   85fd4:	d3a4      	bcc.n	85f20 <memcpy+0xc>
   85fd6:	f831 3b02 	ldrh.w	r3, [r1], #2
   85fda:	f820 3b02 	strh.w	r3, [r0], #2
   85fde:	e79f      	b.n	85f20 <memcpy+0xc>
   85fe0:	3a04      	subs	r2, #4
   85fe2:	d3d9      	bcc.n	85f98 <memcpy+0x84>
   85fe4:	3a01      	subs	r2, #1
   85fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
   85fea:	f800 3b01 	strb.w	r3, [r0], #1
   85fee:	d2f9      	bcs.n	85fe4 <memcpy+0xd0>
   85ff0:	780b      	ldrb	r3, [r1, #0]
   85ff2:	7003      	strb	r3, [r0, #0]
   85ff4:	784b      	ldrb	r3, [r1, #1]
   85ff6:	7043      	strb	r3, [r0, #1]
   85ff8:	788b      	ldrb	r3, [r1, #2]
   85ffa:	7083      	strb	r3, [r0, #2]
   85ffc:	4660      	mov	r0, ip
   85ffe:	4770      	bx	lr

00086000 <memset>:
   86000:	b4f0      	push	{r4, r5, r6, r7}
   86002:	0786      	lsls	r6, r0, #30
   86004:	d046      	beq.n	86094 <memset+0x94>
   86006:	1e54      	subs	r4, r2, #1
   86008:	2a00      	cmp	r2, #0
   8600a:	d03c      	beq.n	86086 <memset+0x86>
   8600c:	4603      	mov	r3, r0
   8600e:	b2ca      	uxtb	r2, r1
   86010:	e001      	b.n	86016 <memset+0x16>
   86012:	3c01      	subs	r4, #1
   86014:	d337      	bcc.n	86086 <memset+0x86>
   86016:	f803 2b01 	strb.w	r2, [r3], #1
   8601a:	079d      	lsls	r5, r3, #30
   8601c:	d1f9      	bne.n	86012 <memset+0x12>
   8601e:	2c03      	cmp	r4, #3
   86020:	d92a      	bls.n	86078 <memset+0x78>
   86022:	b2cd      	uxtb	r5, r1
   86024:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86028:	2c0f      	cmp	r4, #15
   8602a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8602e:	d934      	bls.n	8609a <memset+0x9a>
   86030:	f1a4 0210 	sub.w	r2, r4, #16
   86034:	f022 0c0f 	bic.w	ip, r2, #15
   86038:	f103 0720 	add.w	r7, r3, #32
   8603c:	0916      	lsrs	r6, r2, #4
   8603e:	4467      	add	r7, ip
   86040:	f103 0210 	add.w	r2, r3, #16
   86044:	e942 5504 	strd	r5, r5, [r2, #-16]
   86048:	e942 5502 	strd	r5, r5, [r2, #-8]
   8604c:	3210      	adds	r2, #16
   8604e:	42ba      	cmp	r2, r7
   86050:	d1f8      	bne.n	86044 <memset+0x44>
   86052:	1c72      	adds	r2, r6, #1
   86054:	f014 0f0c 	tst.w	r4, #12
   86058:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   8605c:	f004 060f 	and.w	r6, r4, #15
   86060:	d013      	beq.n	8608a <memset+0x8a>
   86062:	1f33      	subs	r3, r6, #4
   86064:	f023 0303 	bic.w	r3, r3, #3
   86068:	3304      	adds	r3, #4
   8606a:	4413      	add	r3, r2
   8606c:	f842 5b04 	str.w	r5, [r2], #4
   86070:	4293      	cmp	r3, r2
   86072:	d1fb      	bne.n	8606c <memset+0x6c>
   86074:	f006 0403 	and.w	r4, r6, #3
   86078:	b12c      	cbz	r4, 86086 <memset+0x86>
   8607a:	b2ca      	uxtb	r2, r1
   8607c:	441c      	add	r4, r3
   8607e:	f803 2b01 	strb.w	r2, [r3], #1
   86082:	429c      	cmp	r4, r3
   86084:	d1fb      	bne.n	8607e <memset+0x7e>
   86086:	bcf0      	pop	{r4, r5, r6, r7}
   86088:	4770      	bx	lr
   8608a:	4634      	mov	r4, r6
   8608c:	4613      	mov	r3, r2
   8608e:	2c00      	cmp	r4, #0
   86090:	d1f3      	bne.n	8607a <memset+0x7a>
   86092:	e7f8      	b.n	86086 <memset+0x86>
   86094:	4614      	mov	r4, r2
   86096:	4603      	mov	r3, r0
   86098:	e7c1      	b.n	8601e <memset+0x1e>
   8609a:	461a      	mov	r2, r3
   8609c:	4626      	mov	r6, r4
   8609e:	e7e0      	b.n	86062 <memset+0x62>

000860a0 <setbuf>:
   860a0:	2900      	cmp	r1, #0
   860a2:	bf0c      	ite	eq
   860a4:	2202      	moveq	r2, #2
   860a6:	2200      	movne	r2, #0
   860a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   860ac:	f000 b800 	b.w	860b0 <setvbuf>

000860b0 <setvbuf>:
   860b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   860b4:	4d65      	ldr	r5, [pc, #404]	; (8624c <setvbuf+0x19c>)
   860b6:	4604      	mov	r4, r0
   860b8:	f8d5 9000 	ldr.w	r9, [r5]
   860bc:	460f      	mov	r7, r1
   860be:	4690      	mov	r8, r2
   860c0:	461e      	mov	r6, r3
   860c2:	b083      	sub	sp, #12
   860c4:	f1b9 0f00 	cmp.w	r9, #0
   860c8:	d003      	beq.n	860d2 <setvbuf+0x22>
   860ca:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   860ce:	2b00      	cmp	r3, #0
   860d0:	d079      	beq.n	861c6 <setvbuf+0x116>
   860d2:	f1b8 0f02 	cmp.w	r8, #2
   860d6:	d006      	beq.n	860e6 <setvbuf+0x36>
   860d8:	f1b8 0f01 	cmp.w	r8, #1
   860dc:	f200 80a3 	bhi.w	86226 <setvbuf+0x176>
   860e0:	2e00      	cmp	r6, #0
   860e2:	f2c0 80a0 	blt.w	86226 <setvbuf+0x176>
   860e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   860e8:	07d9      	lsls	r1, r3, #31
   860ea:	d552      	bpl.n	86192 <setvbuf+0xe2>
   860ec:	4621      	mov	r1, r4
   860ee:	4648      	mov	r0, r9
   860f0:	f003 fef6 	bl	89ee0 <_fflush_r>
   860f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   860f6:	b141      	cbz	r1, 8610a <setvbuf+0x5a>
   860f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   860fc:	4299      	cmp	r1, r3
   860fe:	d002      	beq.n	86106 <setvbuf+0x56>
   86100:	4648      	mov	r0, r9
   86102:	f004 f86d 	bl	8a1e0 <_free_r>
   86106:	2300      	movs	r3, #0
   86108:	6323      	str	r3, [r4, #48]	; 0x30
   8610a:	2300      	movs	r3, #0
   8610c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86110:	61a3      	str	r3, [r4, #24]
   86112:	6063      	str	r3, [r4, #4]
   86114:	062b      	lsls	r3, r5, #24
   86116:	d465      	bmi.n	861e4 <setvbuf+0x134>
   86118:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   8611c:	f025 0503 	bic.w	r5, r5, #3
   86120:	f1b8 0f02 	cmp.w	r8, #2
   86124:	81a5      	strh	r5, [r4, #12]
   86126:	d064      	beq.n	861f2 <setvbuf+0x142>
   86128:	ab01      	add	r3, sp, #4
   8612a:	466a      	mov	r2, sp
   8612c:	4621      	mov	r1, r4
   8612e:	4648      	mov	r0, r9
   86130:	f004 fb08 	bl	8a744 <__swhatbuf_r>
   86134:	89a3      	ldrh	r3, [r4, #12]
   86136:	4318      	orrs	r0, r3
   86138:	81a0      	strh	r0, [r4, #12]
   8613a:	2e00      	cmp	r6, #0
   8613c:	d030      	beq.n	861a0 <setvbuf+0xf0>
   8613e:	2f00      	cmp	r7, #0
   86140:	d02f      	beq.n	861a2 <setvbuf+0xf2>
   86142:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   86146:	2b00      	cmp	r3, #0
   86148:	d039      	beq.n	861be <setvbuf+0x10e>
   8614a:	9b00      	ldr	r3, [sp, #0]
   8614c:	e9c4 7604 	strd	r7, r6, [r4, #16]
   86150:	42b3      	cmp	r3, r6
   86152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86156:	6027      	str	r7, [r4, #0]
   86158:	bf1c      	itt	ne
   8615a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   8615e:	81a3      	strhne	r3, [r4, #12]
   86160:	f1b8 0f01 	cmp.w	r8, #1
   86164:	bf04      	itt	eq
   86166:	f043 0301 	orreq.w	r3, r3, #1
   8616a:	81a3      	strheq	r3, [r4, #12]
   8616c:	b29a      	uxth	r2, r3
   8616e:	f013 0308 	ands.w	r3, r3, #8
   86172:	d02c      	beq.n	861ce <setvbuf+0x11e>
   86174:	07d1      	lsls	r1, r2, #31
   86176:	d554      	bpl.n	86222 <setvbuf+0x172>
   86178:	2100      	movs	r1, #0
   8617a:	4276      	negs	r6, r6
   8617c:	61a6      	str	r6, [r4, #24]
   8617e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   86180:	60a1      	str	r1, [r4, #8]
   86182:	f016 0601 	ands.w	r6, r6, #1
   86186:	d027      	beq.n	861d8 <setvbuf+0x128>
   86188:	2600      	movs	r6, #0
   8618a:	4630      	mov	r0, r6
   8618c:	b003      	add	sp, #12
   8618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86192:	89a3      	ldrh	r3, [r4, #12]
   86194:	059a      	lsls	r2, r3, #22
   86196:	d4a9      	bmi.n	860ec <setvbuf+0x3c>
   86198:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8619a:	f004 facf 	bl	8a73c <__retarget_lock_acquire_recursive>
   8619e:	e7a5      	b.n	860ec <setvbuf+0x3c>
   861a0:	9e00      	ldr	r6, [sp, #0]
   861a2:	4630      	mov	r0, r6
   861a4:	f004 fb46 	bl	8a834 <malloc>
   861a8:	4607      	mov	r7, r0
   861aa:	2800      	cmp	r0, #0
   861ac:	d03e      	beq.n	8622c <setvbuf+0x17c>
   861ae:	89a3      	ldrh	r3, [r4, #12]
   861b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   861b4:	81a3      	strh	r3, [r4, #12]
   861b6:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   861ba:	2b00      	cmp	r3, #0
   861bc:	d1c5      	bne.n	8614a <setvbuf+0x9a>
   861be:	4648      	mov	r0, r9
   861c0:	f003 feea 	bl	89f98 <__sinit>
   861c4:	e7c1      	b.n	8614a <setvbuf+0x9a>
   861c6:	4648      	mov	r0, r9
   861c8:	f003 fee6 	bl	89f98 <__sinit>
   861cc:	e781      	b.n	860d2 <setvbuf+0x22>
   861ce:	60a3      	str	r3, [r4, #8]
   861d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   861d2:	f016 0601 	ands.w	r6, r6, #1
   861d6:	d1d7      	bne.n	86188 <setvbuf+0xd8>
   861d8:	0593      	lsls	r3, r2, #22
   861da:	d51b      	bpl.n	86214 <setvbuf+0x164>
   861dc:	4630      	mov	r0, r6
   861de:	b003      	add	sp, #12
   861e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861e4:	4648      	mov	r0, r9
   861e6:	6921      	ldr	r1, [r4, #16]
   861e8:	f003 fffa 	bl	8a1e0 <_free_r>
   861ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   861f0:	e792      	b.n	86118 <setvbuf+0x68>
   861f2:	2600      	movs	r6, #0
   861f4:	2300      	movs	r3, #0
   861f6:	2101      	movs	r1, #1
   861f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   861fa:	f045 0502 	orr.w	r5, r5, #2
   861fe:	60a3      	str	r3, [r4, #8]
   86200:	07d7      	lsls	r7, r2, #31
   86202:	f104 0343 	add.w	r3, r4, #67	; 0x43
   86206:	81a5      	strh	r5, [r4, #12]
   86208:	6161      	str	r1, [r4, #20]
   8620a:	6023      	str	r3, [r4, #0]
   8620c:	6123      	str	r3, [r4, #16]
   8620e:	d4e5      	bmi.n	861dc <setvbuf+0x12c>
   86210:	05a8      	lsls	r0, r5, #22
   86212:	d4e3      	bmi.n	861dc <setvbuf+0x12c>
   86214:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86216:	f004 fa93 	bl	8a740 <__retarget_lock_release_recursive>
   8621a:	4630      	mov	r0, r6
   8621c:	b003      	add	sp, #12
   8621e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86222:	60a6      	str	r6, [r4, #8]
   86224:	e7d4      	b.n	861d0 <setvbuf+0x120>
   86226:	f04f 36ff 	mov.w	r6, #4294967295
   8622a:	e7d7      	b.n	861dc <setvbuf+0x12c>
   8622c:	9d00      	ldr	r5, [sp, #0]
   8622e:	42b5      	cmp	r5, r6
   86230:	d004      	beq.n	8623c <setvbuf+0x18c>
   86232:	4628      	mov	r0, r5
   86234:	f004 fafe 	bl	8a834 <malloc>
   86238:	4607      	mov	r7, r0
   8623a:	b920      	cbnz	r0, 86246 <setvbuf+0x196>
   8623c:	f04f 36ff 	mov.w	r6, #4294967295
   86240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86244:	e7d6      	b.n	861f4 <setvbuf+0x144>
   86246:	462e      	mov	r6, r5
   86248:	e7b1      	b.n	861ae <setvbuf+0xfe>
   8624a:	bf00      	nop
   8624c:	200009ac 	.word	0x200009ac

00086250 <sprintf>:
   86250:	b40e      	push	{r1, r2, r3}
   86252:	4601      	mov	r1, r0
   86254:	b530      	push	{r4, r5, lr}
   86256:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8625a:	b09c      	sub	sp, #112	; 0x70
   8625c:	ab1f      	add	r3, sp, #124	; 0x7c
   8625e:	480b      	ldr	r0, [pc, #44]	; (8628c <sprintf+0x3c>)
   86260:	f853 2b04 	ldr.w	r2, [r3], #4
   86264:	4d0a      	ldr	r5, [pc, #40]	; (86290 <sprintf+0x40>)
   86266:	9102      	str	r1, [sp, #8]
   86268:	9106      	str	r1, [sp, #24]
   8626a:	6800      	ldr	r0, [r0, #0]
   8626c:	a902      	add	r1, sp, #8
   8626e:	9301      	str	r3, [sp, #4]
   86270:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86274:	9407      	str	r4, [sp, #28]
   86276:	f000 f86f 	bl	86358 <_svfprintf_r>
   8627a:	2200      	movs	r2, #0
   8627c:	9b02      	ldr	r3, [sp, #8]
   8627e:	701a      	strb	r2, [r3, #0]
   86280:	b01c      	add	sp, #112	; 0x70
   86282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86286:	b003      	add	sp, #12
   86288:	4770      	bx	lr
   8628a:	bf00      	nop
   8628c:	200009ac 	.word	0x200009ac
   86290:	ffff0208 	.word	0xffff0208

00086294 <strlen>:
   86294:	f020 0103 	bic.w	r1, r0, #3
   86298:	f010 0003 	ands.w	r0, r0, #3
   8629c:	f1c0 0000 	rsb	r0, r0, #0
   862a0:	f851 3b04 	ldr.w	r3, [r1], #4
   862a4:	f100 0c04 	add.w	ip, r0, #4
   862a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   862ac:	f06f 0200 	mvn.w	r2, #0
   862b0:	bf1c      	itt	ne
   862b2:	fa22 f20c 	lsrne.w	r2, r2, ip
   862b6:	4313      	orrne	r3, r2
   862b8:	f04f 0c01 	mov.w	ip, #1
   862bc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   862c0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   862c4:	eba3 020c 	sub.w	r2, r3, ip
   862c8:	ea22 0203 	bic.w	r2, r2, r3
   862cc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   862d0:	bf04      	itt	eq
   862d2:	f851 3b04 	ldreq.w	r3, [r1], #4
   862d6:	3004      	addeq	r0, #4
   862d8:	d0f4      	beq.n	862c4 <strlen+0x30>
   862da:	f1c2 0100 	rsb	r1, r2, #0
   862de:	ea02 0201 	and.w	r2, r2, r1
   862e2:	fab2 f282 	clz	r2, r2
   862e6:	f1c2 021f 	rsb	r2, r2, #31
   862ea:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   862ee:	4770      	bx	lr

000862f0 <strncpy>:
   862f0:	b470      	push	{r4, r5, r6}
   862f2:	ea40 0401 	orr.w	r4, r0, r1
   862f6:	07a3      	lsls	r3, r4, #30
   862f8:	d122      	bne.n	86340 <strncpy+0x50>
   862fa:	2a03      	cmp	r2, #3
   862fc:	d920      	bls.n	86340 <strncpy+0x50>
   862fe:	460b      	mov	r3, r1
   86300:	4604      	mov	r4, r0
   86302:	4619      	mov	r1, r3
   86304:	f853 6b04 	ldr.w	r6, [r3], #4
   86308:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8630c:	ea25 0506 	bic.w	r5, r5, r6
   86310:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   86314:	d115      	bne.n	86342 <strncpy+0x52>
   86316:	3a04      	subs	r2, #4
   86318:	2a03      	cmp	r2, #3
   8631a:	4619      	mov	r1, r3
   8631c:	f844 6b04 	str.w	r6, [r4], #4
   86320:	d8ef      	bhi.n	86302 <strncpy+0x12>
   86322:	1e4d      	subs	r5, r1, #1
   86324:	b152      	cbz	r2, 8633c <strncpy+0x4c>
   86326:	4623      	mov	r3, r4
   86328:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8632c:	1e56      	subs	r6, r2, #1
   8632e:	f803 1b01 	strb.w	r1, [r3], #1
   86332:	b141      	cbz	r1, 86346 <strncpy+0x56>
   86334:	4632      	mov	r2, r6
   86336:	461c      	mov	r4, r3
   86338:	2a00      	cmp	r2, #0
   8633a:	d1f4      	bne.n	86326 <strncpy+0x36>
   8633c:	bc70      	pop	{r4, r5, r6}
   8633e:	4770      	bx	lr
   86340:	4604      	mov	r4, r0
   86342:	1e4d      	subs	r5, r1, #1
   86344:	e7ee      	b.n	86324 <strncpy+0x34>
   86346:	4422      	add	r2, r4
   86348:	2e00      	cmp	r6, #0
   8634a:	d0f7      	beq.n	8633c <strncpy+0x4c>
   8634c:	f803 1b01 	strb.w	r1, [r3], #1
   86350:	4293      	cmp	r3, r2
   86352:	d1fb      	bne.n	8634c <strncpy+0x5c>
   86354:	bc70      	pop	{r4, r5, r6}
   86356:	4770      	bx	lr

00086358 <_svfprintf_r>:
   86358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8635c:	b0d7      	sub	sp, #348	; 0x15c
   8635e:	468b      	mov	fp, r1
   86360:	4617      	mov	r7, r2
   86362:	930e      	str	r3, [sp, #56]	; 0x38
   86364:	4681      	mov	r9, r0
   86366:	f004 f9e1 	bl	8a72c <_localeconv_r>
   8636a:	6803      	ldr	r3, [r0, #0]
   8636c:	4618      	mov	r0, r3
   8636e:	9318      	str	r3, [sp, #96]	; 0x60
   86370:	f7ff ff90 	bl	86294 <strlen>
   86374:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86378:	9017      	str	r0, [sp, #92]	; 0x5c
   8637a:	061d      	lsls	r5, r3, #24
   8637c:	d504      	bpl.n	86388 <_svfprintf_r+0x30>
   8637e:	f8db 3010 	ldr.w	r3, [fp, #16]
   86382:	2b00      	cmp	r3, #0
   86384:	f000 87df 	beq.w	87346 <_svfprintf_r+0xfee>
   86388:	2300      	movs	r3, #0
   8638a:	2100      	movs	r1, #0
   8638c:	2200      	movs	r2, #0
   8638e:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   86392:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   86396:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   8639a:	9313      	str	r3, [sp, #76]	; 0x4c
   8639c:	9319      	str	r3, [sp, #100]	; 0x64
   8639e:	930a      	str	r3, [sp, #40]	; 0x28
   863a0:	ab2d      	add	r3, sp, #180	; 0xb4
   863a2:	4698      	mov	r8, r3
   863a4:	932a      	str	r3, [sp, #168]	; 0xa8
   863a6:	783b      	ldrb	r3, [r7, #0]
   863a8:	46da      	mov	sl, fp
   863aa:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   863ae:	2b00      	cmp	r3, #0
   863b0:	f000 81a4 	beq.w	866fc <_svfprintf_r+0x3a4>
   863b4:	463c      	mov	r4, r7
   863b6:	e004      	b.n	863c2 <_svfprintf_r+0x6a>
   863b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   863bc:	2b00      	cmp	r3, #0
   863be:	f000 80fd 	beq.w	865bc <_svfprintf_r+0x264>
   863c2:	2b25      	cmp	r3, #37	; 0x25
   863c4:	d1f8      	bne.n	863b8 <_svfprintf_r+0x60>
   863c6:	1be5      	subs	r5, r4, r7
   863c8:	f040 80fb 	bne.w	865c2 <_svfprintf_r+0x26a>
   863cc:	7823      	ldrb	r3, [r4, #0]
   863ce:	2b00      	cmp	r3, #0
   863d0:	f000 8194 	beq.w	866fc <_svfprintf_r+0x3a4>
   863d4:	2300      	movs	r3, #0
   863d6:	930b      	str	r3, [sp, #44]	; 0x2c
   863d8:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   863dc:	9307      	str	r3, [sp, #28]
   863de:	f04f 33ff 	mov.w	r3, #4294967295
   863e2:	7866      	ldrb	r6, [r4, #1]
   863e4:	f104 0b01 	add.w	fp, r4, #1
   863e8:	2120      	movs	r1, #32
   863ea:	242b      	movs	r4, #43	; 0x2b
   863ec:	9309      	str	r3, [sp, #36]	; 0x24
   863ee:	f10b 0b01 	add.w	fp, fp, #1
   863f2:	f1a6 0320 	sub.w	r3, r6, #32
   863f6:	2b5a      	cmp	r3, #90	; 0x5a
   863f8:	f200 80ff 	bhi.w	865fa <_svfprintf_r+0x2a2>
   863fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   86400:	00fd02bc 	.word	0x00fd02bc
   86404:	02b500fd 	.word	0x02b500fd
   86408:	00fd00fd 	.word	0x00fd00fd
   8640c:	029100fd 	.word	0x029100fd
   86410:	00fd00fd 	.word	0x00fd00fd
   86414:	02e7006a 	.word	0x02e7006a
   86418:	023400fd 	.word	0x023400fd
   8641c:	00fd02cd 	.word	0x00fd02cd
   86420:	005b02c6 	.word	0x005b02c6
   86424:	005b005b 	.word	0x005b005b
   86428:	005b005b 	.word	0x005b005b
   8642c:	005b005b 	.word	0x005b005b
   86430:	005b005b 	.word	0x005b005b
   86434:	00fd00fd 	.word	0x00fd00fd
   86438:	00fd00fd 	.word	0x00fd00fd
   8643c:	00fd00fd 	.word	0x00fd00fd
   86440:	019000fd 	.word	0x019000fd
   86444:	01f700fd 	.word	0x01f700fd
   86448:	0190007c 	.word	0x0190007c
   8644c:	01900190 	.word	0x01900190
   86450:	00fd00fd 	.word	0x00fd00fd
   86454:	00fd00fd 	.word	0x00fd00fd
   86458:	00fd028a 	.word	0x00fd028a
   8645c:	00a900fd 	.word	0x00a900fd
   86460:	00fd00fd 	.word	0x00fd00fd
   86464:	020b00fd 	.word	0x020b00fd
   86468:	023b00fd 	.word	0x023b00fd
   8646c:	00fd00fd 	.word	0x00fd00fd
   86470:	00fd0781 	.word	0x00fd0781
   86474:	00fd00fd 	.word	0x00fd00fd
   86478:	00fd00fd 	.word	0x00fd00fd
   8647c:	00fd00fd 	.word	0x00fd00fd
   86480:	019000fd 	.word	0x019000fd
   86484:	01f700fd 	.word	0x01f700fd
   86488:	01900080 	.word	0x01900080
   8648c:	01900190 	.word	0x01900190
   86490:	00800280 	.word	0x00800280
   86494:	00fd0075 	.word	0x00fd0075
   86498:	00fd0276 	.word	0x00fd0276
   8649c:	00ad025e 	.word	0x00ad025e
   864a0:	0075024c 	.word	0x0075024c
   864a4:	020b00fd 	.word	0x020b00fd
   864a8:	075b0072 	.word	0x075b0072
   864ac:	00fd00fd 	.word	0x00fd00fd
   864b0:	00fd075f 	.word	0x00fd075f
   864b4:	0072      	.short	0x0072
   864b6:	2200      	movs	r2, #0
   864b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   864bc:	f81b 6b01 	ldrb.w	r6, [fp], #1
   864c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   864c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   864c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   864cc:	2b09      	cmp	r3, #9
   864ce:	d9f5      	bls.n	864bc <_svfprintf_r+0x164>
   864d0:	920b      	str	r2, [sp, #44]	; 0x2c
   864d2:	e78e      	b.n	863f2 <_svfprintf_r+0x9a>
   864d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864d6:	f853 2b04 	ldr.w	r2, [r3], #4
   864da:	2a00      	cmp	r2, #0
   864dc:	920b      	str	r2, [sp, #44]	; 0x2c
   864de:	930e      	str	r3, [sp, #56]	; 0x38
   864e0:	f2c0 81bf 	blt.w	86862 <_svfprintf_r+0x50a>
   864e4:	f89b 6000 	ldrb.w	r6, [fp]
   864e8:	e781      	b.n	863ee <_svfprintf_r+0x96>
   864ea:	9b07      	ldr	r3, [sp, #28]
   864ec:	f89b 6000 	ldrb.w	r6, [fp]
   864f0:	f043 0320 	orr.w	r3, r3, #32
   864f4:	9307      	str	r3, [sp, #28]
   864f6:	e77a      	b.n	863ee <_svfprintf_r+0x96>
   864f8:	9b07      	ldr	r3, [sp, #28]
   864fa:	f043 0310 	orr.w	r3, r3, #16
   864fe:	9307      	str	r3, [sp, #28]
   86500:	9b07      	ldr	r3, [sp, #28]
   86502:	069c      	lsls	r4, r3, #26
   86504:	f140 8162 	bpl.w	867cc <_svfprintf_r+0x474>
   86508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8650a:	3307      	adds	r3, #7
   8650c:	f023 0307 	bic.w	r3, r3, #7
   86510:	4619      	mov	r1, r3
   86512:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86516:	4614      	mov	r4, r2
   86518:	461d      	mov	r5, r3
   8651a:	910e      	str	r1, [sp, #56]	; 0x38
   8651c:	2a00      	cmp	r2, #0
   8651e:	f173 0300 	sbcs.w	r3, r3, #0
   86522:	f2c0 85ab 	blt.w	8707c <_svfprintf_r+0xd24>
   86526:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86528:	3301      	adds	r3, #1
   8652a:	9b07      	ldr	r3, [sp, #28]
   8652c:	f000 8414 	beq.w	86d58 <_svfprintf_r+0xa00>
   86530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86534:	ea54 0205 	orrs.w	r2, r4, r5
   86538:	9308      	str	r3, [sp, #32]
   8653a:	f040 840e 	bne.w	86d5a <_svfprintf_r+0xa02>
   8653e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86540:	2a00      	cmp	r2, #0
   86542:	f040 840f 	bne.w	86d64 <_svfprintf_r+0xa0c>
   86546:	9307      	str	r3, [sp, #28]
   86548:	2300      	movs	r3, #0
   8654a:	af56      	add	r7, sp, #344	; 0x158
   8654c:	9309      	str	r3, [sp, #36]	; 0x24
   8654e:	930c      	str	r3, [sp, #48]	; 0x30
   86550:	e26b      	b.n	86a2a <_svfprintf_r+0x6d2>
   86552:	9b07      	ldr	r3, [sp, #28]
   86554:	f043 0310 	orr.w	r3, r3, #16
   86558:	9307      	str	r3, [sp, #28]
   8655a:	9b07      	ldr	r3, [sp, #28]
   8655c:	069a      	lsls	r2, r3, #26
   8655e:	f140 8126 	bpl.w	867ae <_svfprintf_r+0x456>
   86562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86564:	3307      	adds	r3, #7
   86566:	f023 0307 	bic.w	r3, r3, #7
   8656a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8656e:	930e      	str	r3, [sp, #56]	; 0x38
   86570:	9b07      	ldr	r3, [sp, #28]
   86572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86576:	9308      	str	r3, [sp, #32]
   86578:	2300      	movs	r3, #0
   8657a:	2200      	movs	r2, #0
   8657c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86580:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86582:	4611      	mov	r1, r2
   86584:	3101      	adds	r1, #1
   86586:	f000 8231 	beq.w	869ec <_svfprintf_r+0x694>
   8658a:	9908      	ldr	r1, [sp, #32]
   8658c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86590:	9107      	str	r1, [sp, #28]
   86592:	ea54 0105 	orrs.w	r1, r4, r5
   86596:	f040 8227 	bne.w	869e8 <_svfprintf_r+0x690>
   8659a:	2a00      	cmp	r2, #0
   8659c:	f040 837d 	bne.w	86c9a <_svfprintf_r+0x942>
   865a0:	2b00      	cmp	r3, #0
   865a2:	d1d1      	bne.n	86548 <_svfprintf_r+0x1f0>
   865a4:	9b08      	ldr	r3, [sp, #32]
   865a6:	f013 0301 	ands.w	r3, r3, #1
   865aa:	930c      	str	r3, [sp, #48]	; 0x30
   865ac:	f000 8590 	beq.w	870d0 <_svfprintf_r+0xd78>
   865b0:	2330      	movs	r3, #48	; 0x30
   865b2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   865b6:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   865ba:	e236      	b.n	86a2a <_svfprintf_r+0x6d2>
   865bc:	1be5      	subs	r5, r4, r7
   865be:	f000 809d 	beq.w	866fc <_svfprintf_r+0x3a4>
   865c2:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   865c6:	3301      	adds	r3, #1
   865c8:	442a      	add	r2, r5
   865ca:	2b07      	cmp	r3, #7
   865cc:	e9c8 7500 	strd	r7, r5, [r8]
   865d0:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   865d4:	dc06      	bgt.n	865e4 <_svfprintf_r+0x28c>
   865d6:	f108 0808 	add.w	r8, r8, #8
   865da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   865dc:	7823      	ldrb	r3, [r4, #0]
   865de:	442a      	add	r2, r5
   865e0:	920a      	str	r2, [sp, #40]	; 0x28
   865e2:	e6f4      	b.n	863ce <_svfprintf_r+0x76>
   865e4:	4651      	mov	r1, sl
   865e6:	4648      	mov	r0, r9
   865e8:	aa2a      	add	r2, sp, #168	; 0xa8
   865ea:	f005 faa1 	bl	8bb30 <__ssprint_r>
   865ee:	2800      	cmp	r0, #0
   865f0:	f041 83ce 	bne.w	87d90 <_svfprintf_r+0x1a38>
   865f4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   865f8:	e7ef      	b.n	865da <_svfprintf_r+0x282>
   865fa:	2e00      	cmp	r6, #0
   865fc:	d07e      	beq.n	866fc <_svfprintf_r+0x3a4>
   865fe:	2300      	movs	r3, #0
   86600:	2101      	movs	r1, #1
   86602:	461a      	mov	r2, r3
   86604:	9108      	str	r1, [sp, #32]
   86606:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   8660a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8660e:	930d      	str	r3, [sp, #52]	; 0x34
   86610:	9309      	str	r3, [sp, #36]	; 0x24
   86612:	9312      	str	r3, [sp, #72]	; 0x48
   86614:	9316      	str	r3, [sp, #88]	; 0x58
   86616:	9310      	str	r3, [sp, #64]	; 0x40
   86618:	910c      	str	r1, [sp, #48]	; 0x30
   8661a:	af3d      	add	r7, sp, #244	; 0xf4
   8661c:	9b07      	ldr	r3, [sp, #28]
   8661e:	f013 0302 	ands.w	r3, r3, #2
   86622:	d002      	beq.n	8662a <_svfprintf_r+0x2d2>
   86624:	9908      	ldr	r1, [sp, #32]
   86626:	3102      	adds	r1, #2
   86628:	9108      	str	r1, [sp, #32]
   8662a:	9907      	ldr	r1, [sp, #28]
   8662c:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86630:	910f      	str	r1, [sp, #60]	; 0x3c
   86632:	d105      	bne.n	86640 <_svfprintf_r+0x2e8>
   86634:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86636:	9808      	ldr	r0, [sp, #32]
   86638:	1a0d      	subs	r5, r1, r0
   8663a:	2d00      	cmp	r5, #0
   8663c:	f300 834b 	bgt.w	86cd6 <_svfprintf_r+0x97e>
   86640:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86642:	b172      	cbz	r2, 86662 <_svfprintf_r+0x30a>
   86644:	2001      	movs	r0, #1
   86646:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86648:	4404      	add	r4, r0
   8664a:	4402      	add	r2, r0
   8664c:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86650:	2a07      	cmp	r2, #7
   86652:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86656:	e9c8 1000 	strd	r1, r0, [r8]
   8665a:	f300 83cd 	bgt.w	86df8 <_svfprintf_r+0xaa0>
   8665e:	f108 0808 	add.w	r8, r8, #8
   86662:	b16b      	cbz	r3, 86680 <_svfprintf_r+0x328>
   86664:	2102      	movs	r1, #2
   86666:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86668:	440c      	add	r4, r1
   8666a:	3301      	adds	r3, #1
   8666c:	aa23      	add	r2, sp, #140	; 0x8c
   8666e:	2b07      	cmp	r3, #7
   86670:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86674:	e9c8 2100 	strd	r2, r1, [r8]
   86678:	f300 83cc 	bgt.w	86e14 <_svfprintf_r+0xabc>
   8667c:	f108 0808 	add.w	r8, r8, #8
   86680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86682:	2b80      	cmp	r3, #128	; 0x80
   86684:	f000 8234 	beq.w	86af0 <_svfprintf_r+0x798>
   86688:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8668a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8668c:	1a9d      	subs	r5, r3, r2
   8668e:	2d00      	cmp	r5, #0
   86690:	f300 826e 	bgt.w	86b70 <_svfprintf_r+0x818>
   86694:	9b07      	ldr	r3, [sp, #28]
   86696:	05d9      	lsls	r1, r3, #23
   86698:	f100 81d5 	bmi.w	86a46 <_svfprintf_r+0x6ee>
   8669c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8669e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   866a0:	3301      	adds	r3, #1
   866a2:	4414      	add	r4, r2
   866a4:	2b07      	cmp	r3, #7
   866a6:	e9c8 7200 	strd	r7, r2, [r8]
   866aa:	942c      	str	r4, [sp, #176]	; 0xb0
   866ac:	932b      	str	r3, [sp, #172]	; 0xac
   866ae:	f300 8397 	bgt.w	86de0 <_svfprintf_r+0xa88>
   866b2:	f108 0808 	add.w	r8, r8, #8
   866b6:	9b07      	ldr	r3, [sp, #28]
   866b8:	0759      	lsls	r1, r3, #29
   866ba:	d505      	bpl.n	866c8 <_svfprintf_r+0x370>
   866bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   866be:	9a08      	ldr	r2, [sp, #32]
   866c0:	1a9d      	subs	r5, r3, r2
   866c2:	2d00      	cmp	r5, #0
   866c4:	f300 83b2 	bgt.w	86e2c <_svfprintf_r+0xad4>
   866c8:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   866cc:	9908      	ldr	r1, [sp, #32]
   866ce:	428a      	cmp	r2, r1
   866d0:	bfac      	ite	ge
   866d2:	189b      	addge	r3, r3, r2
   866d4:	185b      	addlt	r3, r3, r1
   866d6:	930a      	str	r3, [sp, #40]	; 0x28
   866d8:	2c00      	cmp	r4, #0
   866da:	f040 827d 	bne.w	86bd8 <_svfprintf_r+0x880>
   866de:	2300      	movs	r3, #0
   866e0:	932b      	str	r3, [sp, #172]	; 0xac
   866e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   866e4:	b11b      	cbz	r3, 866ee <_svfprintf_r+0x396>
   866e6:	4648      	mov	r0, r9
   866e8:	990d      	ldr	r1, [sp, #52]	; 0x34
   866ea:	f003 fd79 	bl	8a1e0 <_free_r>
   866ee:	465f      	mov	r7, fp
   866f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   866f4:	783b      	ldrb	r3, [r7, #0]
   866f6:	2b00      	cmp	r3, #0
   866f8:	f47f ae5c 	bne.w	863b4 <_svfprintf_r+0x5c>
   866fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   866fe:	46d3      	mov	fp, sl
   86700:	2b00      	cmp	r3, #0
   86702:	f041 824b 	bne.w	87b9c <_svfprintf_r+0x1844>
   86706:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8670a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8670e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86710:	bf18      	it	ne
   86712:	f04f 33ff 	movne.w	r3, #4294967295
   86716:	930a      	str	r3, [sp, #40]	; 0x28
   86718:	980a      	ldr	r0, [sp, #40]	; 0x28
   8671a:	b057      	add	sp, #348	; 0x15c
   8671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86722:	3307      	adds	r3, #7
   86724:	f023 0307 	bic.w	r3, r3, #7
   86728:	4619      	mov	r1, r3
   8672a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8672e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86732:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86736:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8673a:	461d      	mov	r5, r3
   8673c:	4618      	mov	r0, r3
   8673e:	910e      	str	r1, [sp, #56]	; 0x38
   86740:	f04f 32ff 	mov.w	r2, #4294967295
   86744:	4621      	mov	r1, r4
   86746:	4ba4      	ldr	r3, [pc, #656]	; (869d8 <_svfprintf_r+0x680>)
   86748:	f006 f926 	bl	8c998 <__aeabi_dcmpun>
   8674c:	2800      	cmp	r0, #0
   8674e:	f040 84d9 	bne.w	87104 <_svfprintf_r+0xdac>
   86752:	4628      	mov	r0, r5
   86754:	4621      	mov	r1, r4
   86756:	f04f 32ff 	mov.w	r2, #4294967295
   8675a:	4b9f      	ldr	r3, [pc, #636]	; (869d8 <_svfprintf_r+0x680>)
   8675c:	f006 f8fe 	bl	8c95c <__aeabi_dcmple>
   86760:	2800      	cmp	r0, #0
   86762:	f040 84cf 	bne.w	87104 <_svfprintf_r+0xdac>
   86766:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8676a:	2200      	movs	r2, #0
   8676c:	2300      	movs	r3, #0
   8676e:	f006 f8eb 	bl	8c948 <__aeabi_dcmplt>
   86772:	2800      	cmp	r0, #0
   86774:	f041 800e 	bne.w	87794 <_svfprintf_r+0x143c>
   86778:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8677c:	2003      	movs	r0, #3
   8677e:	2100      	movs	r1, #0
   86780:	4f96      	ldr	r7, [pc, #600]	; (869dc <_svfprintf_r+0x684>)
   86782:	4b97      	ldr	r3, [pc, #604]	; (869e0 <_svfprintf_r+0x688>)
   86784:	9008      	str	r0, [sp, #32]
   86786:	910d      	str	r1, [sp, #52]	; 0x34
   86788:	2e47      	cmp	r6, #71	; 0x47
   8678a:	bfc8      	it	gt
   8678c:	461f      	movgt	r7, r3
   8678e:	9c07      	ldr	r4, [sp, #28]
   86790:	900c      	str	r0, [sp, #48]	; 0x30
   86792:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   86796:	9407      	str	r4, [sp, #28]
   86798:	9109      	str	r1, [sp, #36]	; 0x24
   8679a:	9112      	str	r1, [sp, #72]	; 0x48
   8679c:	9116      	str	r1, [sp, #88]	; 0x58
   8679e:	9110      	str	r1, [sp, #64]	; 0x40
   867a0:	2a00      	cmp	r2, #0
   867a2:	f43f af3b 	beq.w	8661c <_svfprintf_r+0x2c4>
   867a6:	9b08      	ldr	r3, [sp, #32]
   867a8:	3301      	adds	r3, #1
   867aa:	9308      	str	r3, [sp, #32]
   867ac:	e736      	b.n	8661c <_svfprintf_r+0x2c4>
   867ae:	9b07      	ldr	r3, [sp, #28]
   867b0:	06db      	lsls	r3, r3, #27
   867b2:	f100 849c 	bmi.w	870ee <_svfprintf_r+0xd96>
   867b6:	9b07      	ldr	r3, [sp, #28]
   867b8:	065f      	lsls	r7, r3, #25
   867ba:	f140 87b2 	bpl.w	87722 <_svfprintf_r+0x13ca>
   867be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867c0:	2500      	movs	r5, #0
   867c2:	f853 4b04 	ldr.w	r4, [r3], #4
   867c6:	930e      	str	r3, [sp, #56]	; 0x38
   867c8:	b2a4      	uxth	r4, r4
   867ca:	e6d1      	b.n	86570 <_svfprintf_r+0x218>
   867cc:	9b07      	ldr	r3, [sp, #28]
   867ce:	06d8      	lsls	r0, r3, #27
   867d0:	f100 8568 	bmi.w	872a4 <_svfprintf_r+0xf4c>
   867d4:	9b07      	ldr	r3, [sp, #28]
   867d6:	0659      	lsls	r1, r3, #25
   867d8:	f140 87be 	bpl.w	87758 <_svfprintf_r+0x1400>
   867dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867de:	f853 4b04 	ldr.w	r4, [r3], #4
   867e2:	b224      	sxth	r4, r4
   867e4:	17e5      	asrs	r5, r4, #31
   867e6:	930e      	str	r3, [sp, #56]	; 0x38
   867e8:	4622      	mov	r2, r4
   867ea:	462b      	mov	r3, r5
   867ec:	e696      	b.n	8651c <_svfprintf_r+0x1c4>
   867ee:	2100      	movs	r1, #0
   867f0:	2401      	movs	r4, #1
   867f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867f4:	460a      	mov	r2, r1
   867f6:	f853 0b04 	ldr.w	r0, [r3], #4
   867fa:	9408      	str	r4, [sp, #32]
   867fc:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   86800:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86804:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   86808:	9109      	str	r1, [sp, #36]	; 0x24
   8680a:	9112      	str	r1, [sp, #72]	; 0x48
   8680c:	9116      	str	r1, [sp, #88]	; 0x58
   8680e:	9110      	str	r1, [sp, #64]	; 0x40
   86810:	940c      	str	r4, [sp, #48]	; 0x30
   86812:	af3d      	add	r7, sp, #244	; 0xf4
   86814:	e702      	b.n	8661c <_svfprintf_r+0x2c4>
   86816:	2500      	movs	r5, #0
   86818:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8681a:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8681e:	f854 7b04 	ldr.w	r7, [r4], #4
   86822:	2f00      	cmp	r7, #0
   86824:	f000 859f 	beq.w	87366 <_svfprintf_r+0x100e>
   86828:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8682a:	4613      	mov	r3, r2
   8682c:	3301      	adds	r3, #1
   8682e:	f000 8770 	beq.w	87712 <_svfprintf_r+0x13ba>
   86832:	4629      	mov	r1, r5
   86834:	4638      	mov	r0, r7
   86836:	f004 fac9 	bl	8adcc <memchr>
   8683a:	900d      	str	r0, [sp, #52]	; 0x34
   8683c:	2800      	cmp	r0, #0
   8683e:	f001 80b9 	beq.w	879b4 <_svfprintf_r+0x165c>
   86842:	462b      	mov	r3, r5
   86844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86846:	9509      	str	r5, [sp, #36]	; 0x24
   86848:	1bd2      	subs	r2, r2, r7
   8684a:	920c      	str	r2, [sp, #48]	; 0x30
   8684c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86850:	9208      	str	r2, [sp, #32]
   86852:	940e      	str	r4, [sp, #56]	; 0x38
   86854:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86858:	930d      	str	r3, [sp, #52]	; 0x34
   8685a:	9312      	str	r3, [sp, #72]	; 0x48
   8685c:	9316      	str	r3, [sp, #88]	; 0x58
   8685e:	9310      	str	r3, [sp, #64]	; 0x40
   86860:	e79e      	b.n	867a0 <_svfprintf_r+0x448>
   86862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86864:	425b      	negs	r3, r3
   86866:	930b      	str	r3, [sp, #44]	; 0x2c
   86868:	9b07      	ldr	r3, [sp, #28]
   8686a:	f89b 6000 	ldrb.w	r6, [fp]
   8686e:	f043 0304 	orr.w	r3, r3, #4
   86872:	9307      	str	r3, [sp, #28]
   86874:	e5bb      	b.n	863ee <_svfprintf_r+0x96>
   86876:	9b07      	ldr	r3, [sp, #28]
   86878:	f043 0310 	orr.w	r3, r3, #16
   8687c:	9308      	str	r3, [sp, #32]
   8687e:	9b08      	ldr	r3, [sp, #32]
   86880:	069d      	lsls	r5, r3, #26
   86882:	f140 83ea 	bpl.w	8705a <_svfprintf_r+0xd02>
   86886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86888:	3307      	adds	r3, #7
   8688a:	f023 0307 	bic.w	r3, r3, #7
   8688e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86892:	930e      	str	r3, [sp, #56]	; 0x38
   86894:	2301      	movs	r3, #1
   86896:	e670      	b.n	8657a <_svfprintf_r+0x222>
   86898:	f647 0230 	movw	r2, #30768	; 0x7830
   8689c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8689e:	9907      	ldr	r1, [sp, #28]
   868a0:	f853 4b04 	ldr.w	r4, [r3], #4
   868a4:	f041 0102 	orr.w	r1, r1, #2
   868a8:	930e      	str	r3, [sp, #56]	; 0x38
   868aa:	4b4e      	ldr	r3, [pc, #312]	; (869e4 <_svfprintf_r+0x68c>)
   868ac:	2500      	movs	r5, #0
   868ae:	9319      	str	r3, [sp, #100]	; 0x64
   868b0:	2678      	movs	r6, #120	; 0x78
   868b2:	2302      	movs	r3, #2
   868b4:	9108      	str	r1, [sp, #32]
   868b6:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   868ba:	e65e      	b.n	8657a <_svfprintf_r+0x222>
   868bc:	9b07      	ldr	r3, [sp, #28]
   868be:	069d      	lsls	r5, r3, #26
   868c0:	f100 8408 	bmi.w	870d4 <_svfprintf_r+0xd7c>
   868c4:	9b07      	ldr	r3, [sp, #28]
   868c6:	06dc      	lsls	r4, r3, #27
   868c8:	f100 86e1 	bmi.w	8768e <_svfprintf_r+0x1336>
   868cc:	9b07      	ldr	r3, [sp, #28]
   868ce:	0658      	lsls	r0, r3, #25
   868d0:	f100 8795 	bmi.w	877fe <_svfprintf_r+0x14a6>
   868d4:	9b07      	ldr	r3, [sp, #28]
   868d6:	0599      	lsls	r1, r3, #22
   868d8:	f140 86d9 	bpl.w	8768e <_svfprintf_r+0x1336>
   868dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868de:	990a      	ldr	r1, [sp, #40]	; 0x28
   868e0:	f853 2b04 	ldr.w	r2, [r3], #4
   868e4:	465f      	mov	r7, fp
   868e6:	7011      	strb	r1, [r2, #0]
   868e8:	930e      	str	r3, [sp, #56]	; 0x38
   868ea:	e703      	b.n	866f4 <_svfprintf_r+0x39c>
   868ec:	f89b 6000 	ldrb.w	r6, [fp]
   868f0:	9b07      	ldr	r3, [sp, #28]
   868f2:	2e6c      	cmp	r6, #108	; 0x6c
   868f4:	f000 8508 	beq.w	87308 <_svfprintf_r+0xfb0>
   868f8:	f043 0310 	orr.w	r3, r3, #16
   868fc:	9307      	str	r3, [sp, #28]
   868fe:	e576      	b.n	863ee <_svfprintf_r+0x96>
   86900:	f89b 6000 	ldrb.w	r6, [fp]
   86904:	9b07      	ldr	r3, [sp, #28]
   86906:	2e68      	cmp	r6, #104	; 0x68
   86908:	f000 8507 	beq.w	8731a <_svfprintf_r+0xfc2>
   8690c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86910:	9307      	str	r3, [sp, #28]
   86912:	e56c      	b.n	863ee <_svfprintf_r+0x96>
   86914:	9b07      	ldr	r3, [sp, #28]
   86916:	f89b 6000 	ldrb.w	r6, [fp]
   8691a:	f043 0308 	orr.w	r3, r3, #8
   8691e:	9307      	str	r3, [sp, #28]
   86920:	e565      	b.n	863ee <_svfprintf_r+0x96>
   86922:	4648      	mov	r0, r9
   86924:	f003 ff02 	bl	8a72c <_localeconv_r>
   86928:	6843      	ldr	r3, [r0, #4]
   8692a:	4618      	mov	r0, r3
   8692c:	931c      	str	r3, [sp, #112]	; 0x70
   8692e:	f7ff fcb1 	bl	86294 <strlen>
   86932:	4603      	mov	r3, r0
   86934:	4648      	mov	r0, r9
   86936:	461d      	mov	r5, r3
   86938:	931d      	str	r3, [sp, #116]	; 0x74
   8693a:	f003 fef7 	bl	8a72c <_localeconv_r>
   8693e:	6882      	ldr	r2, [r0, #8]
   86940:	2120      	movs	r1, #32
   86942:	921a      	str	r2, [sp, #104]	; 0x68
   86944:	2d00      	cmp	r5, #0
   86946:	f43f adcd 	beq.w	864e4 <_svfprintf_r+0x18c>
   8694a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8694c:	2b00      	cmp	r3, #0
   8694e:	f43f adc9 	beq.w	864e4 <_svfprintf_r+0x18c>
   86952:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86954:	781b      	ldrb	r3, [r3, #0]
   86956:	2b00      	cmp	r3, #0
   86958:	f43f adc4 	beq.w	864e4 <_svfprintf_r+0x18c>
   8695c:	9b07      	ldr	r3, [sp, #28]
   8695e:	f89b 6000 	ldrb.w	r6, [fp]
   86962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86966:	9307      	str	r3, [sp, #28]
   86968:	e541      	b.n	863ee <_svfprintf_r+0x96>
   8696a:	9b07      	ldr	r3, [sp, #28]
   8696c:	f89b 6000 	ldrb.w	r6, [fp]
   86970:	f043 0301 	orr.w	r3, r3, #1
   86974:	9307      	str	r3, [sp, #28]
   86976:	e53a      	b.n	863ee <_svfprintf_r+0x96>
   86978:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   8697c:	2b00      	cmp	r3, #0
   8697e:	f47f adb1 	bne.w	864e4 <_svfprintf_r+0x18c>
   86982:	f89b 6000 	ldrb.w	r6, [fp]
   86986:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   8698a:	e530      	b.n	863ee <_svfprintf_r+0x96>
   8698c:	9b07      	ldr	r3, [sp, #28]
   8698e:	f89b 6000 	ldrb.w	r6, [fp]
   86992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86996:	9307      	str	r3, [sp, #28]
   86998:	e529      	b.n	863ee <_svfprintf_r+0x96>
   8699a:	465a      	mov	r2, fp
   8699c:	f812 6b01 	ldrb.w	r6, [r2], #1
   869a0:	2e2a      	cmp	r6, #42	; 0x2a
   869a2:	f001 8251 	beq.w	87e48 <_svfprintf_r+0x1af0>
   869a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   869aa:	2b09      	cmp	r3, #9
   869ac:	4693      	mov	fp, r2
   869ae:	bf98      	it	ls
   869b0:	2200      	movls	r2, #0
   869b2:	f201 80ef 	bhi.w	87b94 <_svfprintf_r+0x183c>
   869b6:	f81b 6b01 	ldrb.w	r6, [fp], #1
   869ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   869be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   869c2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   869c6:	2b09      	cmp	r3, #9
   869c8:	d9f5      	bls.n	869b6 <_svfprintf_r+0x65e>
   869ca:	9209      	str	r2, [sp, #36]	; 0x24
   869cc:	e511      	b.n	863f2 <_svfprintf_r+0x9a>
   869ce:	f89b 6000 	ldrb.w	r6, [fp]
   869d2:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   869d6:	e50a      	b.n	863ee <_svfprintf_r+0x96>
   869d8:	7fefffff 	.word	0x7fefffff
   869dc:	0008cbf0 	.word	0x0008cbf0
   869e0:	0008cbf4 	.word	0x0008cbf4
   869e4:	0008cc00 	.word	0x0008cc00
   869e8:	9a07      	ldr	r2, [sp, #28]
   869ea:	9208      	str	r2, [sp, #32]
   869ec:	2b01      	cmp	r3, #1
   869ee:	f000 81b4 	beq.w	86d5a <_svfprintf_r+0xa02>
   869f2:	2b02      	cmp	r3, #2
   869f4:	f000 8159 	beq.w	86caa <_svfprintf_r+0x952>
   869f8:	af56      	add	r7, sp, #344	; 0x158
   869fa:	08e2      	lsrs	r2, r4, #3
   869fc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86a00:	08e9      	lsrs	r1, r5, #3
   86a02:	f004 0307 	and.w	r3, r4, #7
   86a06:	460d      	mov	r5, r1
   86a08:	4614      	mov	r4, r2
   86a0a:	3330      	adds	r3, #48	; 0x30
   86a0c:	ea54 0105 	orrs.w	r1, r4, r5
   86a10:	463a      	mov	r2, r7
   86a12:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86a16:	d1f0      	bne.n	869fa <_svfprintf_r+0x6a2>
   86a18:	9908      	ldr	r1, [sp, #32]
   86a1a:	4608      	mov	r0, r1
   86a1c:	07c0      	lsls	r0, r0, #31
   86a1e:	f100 82b8 	bmi.w	86f92 <_svfprintf_r+0xc3a>
   86a22:	ab56      	add	r3, sp, #344	; 0x158
   86a24:	1bdb      	subs	r3, r3, r7
   86a26:	9107      	str	r1, [sp, #28]
   86a28:	930c      	str	r3, [sp, #48]	; 0x30
   86a2a:	2300      	movs	r3, #0
   86a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
   86a2e:	930d      	str	r3, [sp, #52]	; 0x34
   86a30:	9312      	str	r3, [sp, #72]	; 0x48
   86a32:	9316      	str	r3, [sp, #88]	; 0x58
   86a34:	9310      	str	r3, [sp, #64]	; 0x40
   86a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86a38:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86a3c:	428b      	cmp	r3, r1
   86a3e:	bfb8      	it	lt
   86a40:	460b      	movlt	r3, r1
   86a42:	9308      	str	r3, [sp, #32]
   86a44:	e6ac      	b.n	867a0 <_svfprintf_r+0x448>
   86a46:	2e65      	cmp	r6, #101	; 0x65
   86a48:	f340 80d8 	ble.w	86bfc <_svfprintf_r+0x8a4>
   86a4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86a50:	2200      	movs	r2, #0
   86a52:	2300      	movs	r3, #0
   86a54:	f005 ff6e 	bl	8c934 <__aeabi_dcmpeq>
   86a58:	2800      	cmp	r0, #0
   86a5a:	f000 821e 	beq.w	86e9a <_svfprintf_r+0xb42>
   86a5e:	2101      	movs	r1, #1
   86a60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86a62:	4ac5      	ldr	r2, [pc, #788]	; (86d78 <_svfprintf_r+0xa20>)
   86a64:	440b      	add	r3, r1
   86a66:	440c      	add	r4, r1
   86a68:	2b07      	cmp	r3, #7
   86a6a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86a6e:	e9c8 2100 	strd	r2, r1, [r8]
   86a72:	f300 85bb 	bgt.w	875ec <_svfprintf_r+0x1294>
   86a76:	f108 0808 	add.w	r8, r8, #8
   86a7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86a7e:	4293      	cmp	r3, r2
   86a80:	f280 8321 	bge.w	870c6 <_svfprintf_r+0xd6e>
   86a84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86a86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86a88:	3301      	adds	r3, #1
   86a8a:	9918      	ldr	r1, [sp, #96]	; 0x60
   86a8c:	4414      	add	r4, r2
   86a8e:	2b07      	cmp	r3, #7
   86a90:	e9c8 1200 	strd	r1, r2, [r8]
   86a94:	942c      	str	r4, [sp, #176]	; 0xb0
   86a96:	932b      	str	r3, [sp, #172]	; 0xac
   86a98:	f300 8448 	bgt.w	8732c <_svfprintf_r+0xfd4>
   86a9c:	f108 0808 	add.w	r8, r8, #8
   86aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86aa2:	1e5d      	subs	r5, r3, #1
   86aa4:	2d00      	cmp	r5, #0
   86aa6:	f77f ae06 	ble.w	866b6 <_svfprintf_r+0x35e>
   86aaa:	2d10      	cmp	r5, #16
   86aac:	f340 85c7 	ble.w	8763e <_svfprintf_r+0x12e6>
   86ab0:	4fb2      	ldr	r7, [pc, #712]	; (86d7c <_svfprintf_r+0xa24>)
   86ab2:	2610      	movs	r6, #16
   86ab4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ab6:	970f      	str	r7, [sp, #60]	; 0x3c
   86ab8:	e005      	b.n	86ac6 <_svfprintf_r+0x76e>
   86aba:	f108 0808 	add.w	r8, r8, #8
   86abe:	3d10      	subs	r5, #16
   86ac0:	2d10      	cmp	r5, #16
   86ac2:	f340 85bf 	ble.w	87644 <_svfprintf_r+0x12ec>
   86ac6:	3301      	adds	r3, #1
   86ac8:	3410      	adds	r4, #16
   86aca:	2b07      	cmp	r3, #7
   86acc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86ad0:	e9c8 7600 	strd	r7, r6, [r8]
   86ad4:	ddf1      	ble.n	86aba <_svfprintf_r+0x762>
   86ad6:	4651      	mov	r1, sl
   86ad8:	4648      	mov	r0, r9
   86ada:	aa2a      	add	r2, sp, #168	; 0xa8
   86adc:	f005 f828 	bl	8bb30 <__ssprint_r>
   86ae0:	2800      	cmp	r0, #0
   86ae2:	f040 8081 	bne.w	86be8 <_svfprintf_r+0x890>
   86ae6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86aea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86aee:	e7e6      	b.n	86abe <_svfprintf_r+0x766>
   86af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86af2:	9a08      	ldr	r2, [sp, #32]
   86af4:	1a9d      	subs	r5, r3, r2
   86af6:	2d00      	cmp	r5, #0
   86af8:	f77f adc6 	ble.w	86688 <_svfprintf_r+0x330>
   86afc:	2d10      	cmp	r5, #16
   86afe:	f341 8069 	ble.w	87bd4 <_svfprintf_r+0x187c>
   86b02:	489e      	ldr	r0, [pc, #632]	; (86d7c <_svfprintf_r+0xa24>)
   86b04:	4621      	mov	r1, r4
   86b06:	2310      	movs	r3, #16
   86b08:	4604      	mov	r4, r0
   86b0a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86b0c:	900f      	str	r0, [sp, #60]	; 0x3c
   86b0e:	e004      	b.n	86b1a <_svfprintf_r+0x7c2>
   86b10:	3d10      	subs	r5, #16
   86b12:	2d10      	cmp	r5, #16
   86b14:	f108 0808 	add.w	r8, r8, #8
   86b18:	dd17      	ble.n	86b4a <_svfprintf_r+0x7f2>
   86b1a:	3201      	adds	r2, #1
   86b1c:	3110      	adds	r1, #16
   86b1e:	2a07      	cmp	r2, #7
   86b20:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86b24:	e9c8 4300 	strd	r4, r3, [r8]
   86b28:	ddf2      	ble.n	86b10 <_svfprintf_r+0x7b8>
   86b2a:	4651      	mov	r1, sl
   86b2c:	4648      	mov	r0, r9
   86b2e:	aa2a      	add	r2, sp, #168	; 0xa8
   86b30:	f004 fffe 	bl	8bb30 <__ssprint_r>
   86b34:	2800      	cmp	r0, #0
   86b36:	d157      	bne.n	86be8 <_svfprintf_r+0x890>
   86b38:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86b3c:	3d10      	subs	r5, #16
   86b3e:	2d10      	cmp	r5, #16
   86b40:	f04f 0310 	mov.w	r3, #16
   86b44:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86b48:	dce7      	bgt.n	86b1a <_svfprintf_r+0x7c2>
   86b4a:	460c      	mov	r4, r1
   86b4c:	3201      	adds	r2, #1
   86b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86b50:	442c      	add	r4, r5
   86b52:	2a07      	cmp	r2, #7
   86b54:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86b58:	e9c8 3500 	strd	r3, r5, [r8]
   86b5c:	f300 858a 	bgt.w	87674 <_svfprintf_r+0x131c>
   86b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86b64:	f108 0808 	add.w	r8, r8, #8
   86b68:	1a9d      	subs	r5, r3, r2
   86b6a:	2d00      	cmp	r5, #0
   86b6c:	f77f ad92 	ble.w	86694 <_svfprintf_r+0x33c>
   86b70:	2d10      	cmp	r5, #16
   86b72:	f340 860a 	ble.w	8778a <_svfprintf_r+0x1432>
   86b76:	4881      	ldr	r0, [pc, #516]	; (86d7c <_svfprintf_r+0xa24>)
   86b78:	4621      	mov	r1, r4
   86b7a:	2310      	movs	r3, #16
   86b7c:	4604      	mov	r4, r0
   86b7e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86b80:	900f      	str	r0, [sp, #60]	; 0x3c
   86b82:	e004      	b.n	86b8e <_svfprintf_r+0x836>
   86b84:	3d10      	subs	r5, #16
   86b86:	2d10      	cmp	r5, #16
   86b88:	f108 0808 	add.w	r8, r8, #8
   86b8c:	dd16      	ble.n	86bbc <_svfprintf_r+0x864>
   86b8e:	3201      	adds	r2, #1
   86b90:	3110      	adds	r1, #16
   86b92:	2a07      	cmp	r2, #7
   86b94:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86b98:	e9c8 4300 	strd	r4, r3, [r8]
   86b9c:	ddf2      	ble.n	86b84 <_svfprintf_r+0x82c>
   86b9e:	4651      	mov	r1, sl
   86ba0:	4648      	mov	r0, r9
   86ba2:	aa2a      	add	r2, sp, #168	; 0xa8
   86ba4:	f004 ffc4 	bl	8bb30 <__ssprint_r>
   86ba8:	b9f0      	cbnz	r0, 86be8 <_svfprintf_r+0x890>
   86baa:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86bae:	3d10      	subs	r5, #16
   86bb0:	2d10      	cmp	r5, #16
   86bb2:	f04f 0310 	mov.w	r3, #16
   86bb6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86bba:	dce8      	bgt.n	86b8e <_svfprintf_r+0x836>
   86bbc:	460c      	mov	r4, r1
   86bbe:	3201      	adds	r2, #1
   86bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86bc2:	442c      	add	r4, r5
   86bc4:	2a07      	cmp	r2, #7
   86bc6:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86bca:	e9c8 3500 	strd	r3, r5, [r8]
   86bce:	f300 8237 	bgt.w	87040 <_svfprintf_r+0xce8>
   86bd2:	f108 0808 	add.w	r8, r8, #8
   86bd6:	e55d      	b.n	86694 <_svfprintf_r+0x33c>
   86bd8:	4651      	mov	r1, sl
   86bda:	4648      	mov	r0, r9
   86bdc:	aa2a      	add	r2, sp, #168	; 0xa8
   86bde:	f004 ffa7 	bl	8bb30 <__ssprint_r>
   86be2:	2800      	cmp	r0, #0
   86be4:	f43f ad7b 	beq.w	866de <_svfprintf_r+0x386>
   86be8:	46d3      	mov	fp, sl
   86bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86bec:	2b00      	cmp	r3, #0
   86bee:	f43f ad8a 	beq.w	86706 <_svfprintf_r+0x3ae>
   86bf2:	4648      	mov	r0, r9
   86bf4:	990d      	ldr	r1, [sp, #52]	; 0x34
   86bf6:	f003 faf3 	bl	8a1e0 <_free_r>
   86bfa:	e584      	b.n	86706 <_svfprintf_r+0x3ae>
   86bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86bfe:	2b01      	cmp	r3, #1
   86c00:	f340 81d5 	ble.w	86fae <_svfprintf_r+0xc56>
   86c04:	2301      	movs	r3, #1
   86c06:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86c08:	441c      	add	r4, r3
   86c0a:	441d      	add	r5, r3
   86c0c:	2d07      	cmp	r5, #7
   86c0e:	942c      	str	r4, [sp, #176]	; 0xb0
   86c10:	f8c8 7000 	str.w	r7, [r8]
   86c14:	952b      	str	r5, [sp, #172]	; 0xac
   86c16:	f8c8 3004 	str.w	r3, [r8, #4]
   86c1a:	f300 823a 	bgt.w	87092 <_svfprintf_r+0xd3a>
   86c1e:	f108 0808 	add.w	r8, r8, #8
   86c22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86c24:	3501      	adds	r5, #1
   86c26:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86c28:	441c      	add	r4, r3
   86c2a:	2d07      	cmp	r5, #7
   86c2c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c30:	e9c8 2300 	strd	r2, r3, [r8]
   86c34:	f300 823a 	bgt.w	870ac <_svfprintf_r+0xd54>
   86c38:	f108 0808 	add.w	r8, r8, #8
   86c3c:	2300      	movs	r3, #0
   86c3e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c42:	2200      	movs	r2, #0
   86c44:	f005 fe76 	bl	8c934 <__aeabi_dcmpeq>
   86c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c4a:	2800      	cmp	r0, #0
   86c4c:	f040 81cd 	bne.w	86fea <_svfprintf_r+0xc92>
   86c50:	3b01      	subs	r3, #1
   86c52:	3501      	adds	r5, #1
   86c54:	3701      	adds	r7, #1
   86c56:	441c      	add	r4, r3
   86c58:	2d07      	cmp	r5, #7
   86c5a:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c5e:	f8c8 7000 	str.w	r7, [r8]
   86c62:	f8c8 3004 	str.w	r3, [r8, #4]
   86c66:	f300 84dc 	bgt.w	87622 <_svfprintf_r+0x12ca>
   86c6a:	f108 0808 	add.w	r8, r8, #8
   86c6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86c70:	3501      	adds	r5, #1
   86c72:	4414      	add	r4, r2
   86c74:	ab26      	add	r3, sp, #152	; 0x98
   86c76:	2d07      	cmp	r5, #7
   86c78:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c7c:	e9c8 3200 	strd	r3, r2, [r8]
   86c80:	f77f ad17 	ble.w	866b2 <_svfprintf_r+0x35a>
   86c84:	4651      	mov	r1, sl
   86c86:	4648      	mov	r0, r9
   86c88:	aa2a      	add	r2, sp, #168	; 0xa8
   86c8a:	f004 ff51 	bl	8bb30 <__ssprint_r>
   86c8e:	2800      	cmp	r0, #0
   86c90:	d1aa      	bne.n	86be8 <_svfprintf_r+0x890>
   86c92:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86c94:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c98:	e50d      	b.n	866b6 <_svfprintf_r+0x35e>
   86c9a:	2b01      	cmp	r3, #1
   86c9c:	f000 87ca 	beq.w	87c34 <_svfprintf_r+0x18dc>
   86ca0:	2b02      	cmp	r3, #2
   86ca2:	9b07      	ldr	r3, [sp, #28]
   86ca4:	9308      	str	r3, [sp, #32]
   86ca6:	f47f aea7 	bne.w	869f8 <_svfprintf_r+0x6a0>
   86caa:	9819      	ldr	r0, [sp, #100]	; 0x64
   86cac:	af56      	add	r7, sp, #344	; 0x158
   86cae:	0923      	lsrs	r3, r4, #4
   86cb0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86cb4:	0929      	lsrs	r1, r5, #4
   86cb6:	f004 020f 	and.w	r2, r4, #15
   86cba:	460d      	mov	r5, r1
   86cbc:	461c      	mov	r4, r3
   86cbe:	5c83      	ldrb	r3, [r0, r2]
   86cc0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86cc4:	ea54 0305 	orrs.w	r3, r4, r5
   86cc8:	d1f1      	bne.n	86cae <_svfprintf_r+0x956>
   86cca:	9b08      	ldr	r3, [sp, #32]
   86ccc:	9307      	str	r3, [sp, #28]
   86cce:	ab56      	add	r3, sp, #344	; 0x158
   86cd0:	1bdb      	subs	r3, r3, r7
   86cd2:	930c      	str	r3, [sp, #48]	; 0x30
   86cd4:	e6a9      	b.n	86a2a <_svfprintf_r+0x6d2>
   86cd6:	2d10      	cmp	r5, #16
   86cd8:	f340 8668 	ble.w	879ac <_svfprintf_r+0x1654>
   86cdc:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86ce0:	931e      	str	r3, [sp, #120]	; 0x78
   86ce2:	460b      	mov	r3, r1
   86ce4:	4639      	mov	r1, r7
   86ce6:	2410      	movs	r4, #16
   86ce8:	4637      	mov	r7, r6
   86cea:	4656      	mov	r6, sl
   86cec:	46ca      	mov	sl, r9
   86cee:	4689      	mov	r9, r1
   86cf0:	e004      	b.n	86cfc <_svfprintf_r+0x9a4>
   86cf2:	3d10      	subs	r5, #16
   86cf4:	2d10      	cmp	r5, #16
   86cf6:	f108 0808 	add.w	r8, r8, #8
   86cfa:	dd17      	ble.n	86d2c <_svfprintf_r+0x9d4>
   86cfc:	3201      	adds	r2, #1
   86cfe:	4920      	ldr	r1, [pc, #128]	; (86d80 <_svfprintf_r+0xa28>)
   86d00:	3310      	adds	r3, #16
   86d02:	2a07      	cmp	r2, #7
   86d04:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   86d08:	e9c8 1400 	strd	r1, r4, [r8]
   86d0c:	ddf1      	ble.n	86cf2 <_svfprintf_r+0x99a>
   86d0e:	4631      	mov	r1, r6
   86d10:	4650      	mov	r0, sl
   86d12:	aa2a      	add	r2, sp, #168	; 0xa8
   86d14:	f004 ff0c 	bl	8bb30 <__ssprint_r>
   86d18:	2800      	cmp	r0, #0
   86d1a:	f040 8458 	bne.w	875ce <_svfprintf_r+0x1276>
   86d1e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   86d22:	3d10      	subs	r5, #16
   86d24:	2d10      	cmp	r5, #16
   86d26:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d2a:	dce7      	bgt.n	86cfc <_svfprintf_r+0x9a4>
   86d2c:	4648      	mov	r0, r9
   86d2e:	46d1      	mov	r9, sl
   86d30:	46b2      	mov	sl, r6
   86d32:	463e      	mov	r6, r7
   86d34:	4607      	mov	r7, r0
   86d36:	4619      	mov	r1, r3
   86d38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86d3a:	194c      	adds	r4, r1, r5
   86d3c:	3201      	adds	r2, #1
   86d3e:	4910      	ldr	r1, [pc, #64]	; (86d80 <_svfprintf_r+0xa28>)
   86d40:	2a07      	cmp	r2, #7
   86d42:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86d46:	e9c8 1500 	strd	r1, r5, [r8]
   86d4a:	f300 841f 	bgt.w	8758c <_svfprintf_r+0x1234>
   86d4e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86d52:	f108 0808 	add.w	r8, r8, #8
   86d56:	e474      	b.n	86642 <_svfprintf_r+0x2ea>
   86d58:	9308      	str	r3, [sp, #32]
   86d5a:	2d00      	cmp	r5, #0
   86d5c:	bf08      	it	eq
   86d5e:	2c0a      	cmpeq	r4, #10
   86d60:	f080 83d0 	bcs.w	87504 <_svfprintf_r+0x11ac>
   86d64:	9b08      	ldr	r3, [sp, #32]
   86d66:	3430      	adds	r4, #48	; 0x30
   86d68:	9307      	str	r3, [sp, #28]
   86d6a:	2301      	movs	r3, #1
   86d6c:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   86d70:	930c      	str	r3, [sp, #48]	; 0x30
   86d72:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86d76:	e658      	b.n	86a2a <_svfprintf_r+0x6d2>
   86d78:	0008cc30 	.word	0x0008cc30
   86d7c:	0008cc44 	.word	0x0008cc44
   86d80:	0008cc34 	.word	0x0008cc34
   86d84:	4651      	mov	r1, sl
   86d86:	4648      	mov	r0, r9
   86d88:	aa2a      	add	r2, sp, #168	; 0xa8
   86d8a:	f004 fed1 	bl	8bb30 <__ssprint_r>
   86d8e:	2800      	cmp	r0, #0
   86d90:	f47f af2a 	bne.w	86be8 <_svfprintf_r+0x890>
   86d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86d96:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86d98:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d9c:	2a00      	cmp	r2, #0
   86d9e:	f040 847f 	bne.w	876a0 <_svfprintf_r+0x1348>
   86da2:	9b07      	ldr	r3, [sp, #28]
   86da4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86da6:	f003 0301 	and.w	r3, r3, #1
   86daa:	4313      	orrs	r3, r2
   86dac:	f43f ac83 	beq.w	866b6 <_svfprintf_r+0x35e>
   86db0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86db2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86db4:	3301      	adds	r3, #1
   86db6:	9918      	ldr	r1, [sp, #96]	; 0x60
   86db8:	4414      	add	r4, r2
   86dba:	2b07      	cmp	r3, #7
   86dbc:	e9c8 1200 	strd	r1, r2, [r8]
   86dc0:	942c      	str	r4, [sp, #176]	; 0xb0
   86dc2:	932b      	str	r3, [sp, #172]	; 0xac
   86dc4:	f300 8524 	bgt.w	87810 <_svfprintf_r+0x14b8>
   86dc8:	f108 0808 	add.w	r8, r8, #8
   86dcc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86dce:	3301      	adds	r3, #1
   86dd0:	4414      	add	r4, r2
   86dd2:	2b07      	cmp	r3, #7
   86dd4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86dd8:	e9c8 7200 	strd	r7, r2, [r8]
   86ddc:	f77f ac69 	ble.w	866b2 <_svfprintf_r+0x35a>
   86de0:	4651      	mov	r1, sl
   86de2:	4648      	mov	r0, r9
   86de4:	aa2a      	add	r2, sp, #168	; 0xa8
   86de6:	f004 fea3 	bl	8bb30 <__ssprint_r>
   86dea:	2800      	cmp	r0, #0
   86dec:	f47f aefc 	bne.w	86be8 <_svfprintf_r+0x890>
   86df0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86df2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86df6:	e45e      	b.n	866b6 <_svfprintf_r+0x35e>
   86df8:	4651      	mov	r1, sl
   86dfa:	4648      	mov	r0, r9
   86dfc:	aa2a      	add	r2, sp, #168	; 0xa8
   86dfe:	931e      	str	r3, [sp, #120]	; 0x78
   86e00:	f004 fe96 	bl	8bb30 <__ssprint_r>
   86e04:	2800      	cmp	r0, #0
   86e06:	f47f aeef 	bne.w	86be8 <_svfprintf_r+0x890>
   86e0a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86e0e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e12:	e426      	b.n	86662 <_svfprintf_r+0x30a>
   86e14:	4651      	mov	r1, sl
   86e16:	4648      	mov	r0, r9
   86e18:	aa2a      	add	r2, sp, #168	; 0xa8
   86e1a:	f004 fe89 	bl	8bb30 <__ssprint_r>
   86e1e:	2800      	cmp	r0, #0
   86e20:	f47f aee2 	bne.w	86be8 <_svfprintf_r+0x890>
   86e24:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e26:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e2a:	e429      	b.n	86680 <_svfprintf_r+0x328>
   86e2c:	2d10      	cmp	r5, #16
   86e2e:	f340 86be 	ble.w	87bae <_svfprintf_r+0x1856>
   86e32:	2610      	movs	r6, #16
   86e34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86e36:	e004      	b.n	86e42 <_svfprintf_r+0xaea>
   86e38:	3d10      	subs	r5, #16
   86e3a:	2d10      	cmp	r5, #16
   86e3c:	f108 0808 	add.w	r8, r8, #8
   86e40:	dd17      	ble.n	86e72 <_svfprintf_r+0xb1a>
   86e42:	3301      	adds	r3, #1
   86e44:	4aad      	ldr	r2, [pc, #692]	; (870fc <_svfprintf_r+0xda4>)
   86e46:	3410      	adds	r4, #16
   86e48:	2b07      	cmp	r3, #7
   86e4a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86e4e:	e9c8 2600 	strd	r2, r6, [r8]
   86e52:	ddf1      	ble.n	86e38 <_svfprintf_r+0xae0>
   86e54:	4651      	mov	r1, sl
   86e56:	4648      	mov	r0, r9
   86e58:	aa2a      	add	r2, sp, #168	; 0xa8
   86e5a:	f004 fe69 	bl	8bb30 <__ssprint_r>
   86e5e:	2800      	cmp	r0, #0
   86e60:	f47f aec2 	bne.w	86be8 <_svfprintf_r+0x890>
   86e64:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86e68:	3d10      	subs	r5, #16
   86e6a:	2d10      	cmp	r5, #16
   86e6c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e70:	dce7      	bgt.n	86e42 <_svfprintf_r+0xaea>
   86e72:	3301      	adds	r3, #1
   86e74:	4aa1      	ldr	r2, [pc, #644]	; (870fc <_svfprintf_r+0xda4>)
   86e76:	442c      	add	r4, r5
   86e78:	2b07      	cmp	r3, #7
   86e7a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86e7e:	e9c8 2500 	strd	r2, r5, [r8]
   86e82:	f77f ac21 	ble.w	866c8 <_svfprintf_r+0x370>
   86e86:	4651      	mov	r1, sl
   86e88:	4648      	mov	r0, r9
   86e8a:	aa2a      	add	r2, sp, #168	; 0xa8
   86e8c:	f004 fe50 	bl	8bb30 <__ssprint_r>
   86e90:	2800      	cmp	r0, #0
   86e92:	f47f aea9 	bne.w	86be8 <_svfprintf_r+0x890>
   86e96:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e98:	e416      	b.n	866c8 <_svfprintf_r+0x370>
   86e9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86e9c:	2a00      	cmp	r2, #0
   86e9e:	f340 8386 	ble.w	875ae <_svfprintf_r+0x1256>
   86ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86ea4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86ea6:	4293      	cmp	r3, r2
   86ea8:	bfa8      	it	ge
   86eaa:	4613      	movge	r3, r2
   86eac:	2b00      	cmp	r3, #0
   86eae:	461d      	mov	r5, r3
   86eb0:	dd0b      	ble.n	86eca <_svfprintf_r+0xb72>
   86eb2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86eb4:	442c      	add	r4, r5
   86eb6:	3301      	adds	r3, #1
   86eb8:	2b07      	cmp	r3, #7
   86eba:	e9c8 7500 	strd	r7, r5, [r8]
   86ebe:	942c      	str	r4, [sp, #176]	; 0xb0
   86ec0:	932b      	str	r3, [sp, #172]	; 0xac
   86ec2:	f300 851e 	bgt.w	87902 <_svfprintf_r+0x15aa>
   86ec6:	f108 0808 	add.w	r8, r8, #8
   86eca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86ecc:	2d00      	cmp	r5, #0
   86ece:	bfa8      	it	ge
   86ed0:	1b5b      	subge	r3, r3, r5
   86ed2:	2b00      	cmp	r3, #0
   86ed4:	461d      	mov	r5, r3
   86ed6:	f300 8256 	bgt.w	87386 <_svfprintf_r+0x102e>
   86eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86edc:	443b      	add	r3, r7
   86ede:	461e      	mov	r6, r3
   86ee0:	9b07      	ldr	r3, [sp, #28]
   86ee2:	055b      	lsls	r3, r3, #21
   86ee4:	f100 8277 	bmi.w	873d6 <_svfprintf_r+0x107e>
   86ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86eea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86eec:	4293      	cmp	r3, r2
   86eee:	db03      	blt.n	86ef8 <_svfprintf_r+0xba0>
   86ef0:	9a07      	ldr	r2, [sp, #28]
   86ef2:	07d5      	lsls	r5, r2, #31
   86ef4:	f140 847a 	bpl.w	877ec <_svfprintf_r+0x1494>
   86ef8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86efa:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86efc:	3201      	adds	r2, #1
   86efe:	9818      	ldr	r0, [sp, #96]	; 0x60
   86f00:	440c      	add	r4, r1
   86f02:	2a07      	cmp	r2, #7
   86f04:	e9c8 0100 	strd	r0, r1, [r8]
   86f08:	942c      	str	r4, [sp, #176]	; 0xb0
   86f0a:	922b      	str	r2, [sp, #172]	; 0xac
   86f0c:	f300 8506 	bgt.w	8791c <_svfprintf_r+0x15c4>
   86f10:	f108 0808 	add.w	r8, r8, #8
   86f14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f16:	18bd      	adds	r5, r7, r2
   86f18:	1bad      	subs	r5, r5, r6
   86f1a:	1ad3      	subs	r3, r2, r3
   86f1c:	429d      	cmp	r5, r3
   86f1e:	bfa8      	it	ge
   86f20:	461d      	movge	r5, r3
   86f22:	2d00      	cmp	r5, #0
   86f24:	dd0b      	ble.n	86f3e <_svfprintf_r+0xbe6>
   86f26:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86f28:	442c      	add	r4, r5
   86f2a:	3201      	adds	r2, #1
   86f2c:	2a07      	cmp	r2, #7
   86f2e:	e9c8 6500 	strd	r6, r5, [r8]
   86f32:	942c      	str	r4, [sp, #176]	; 0xb0
   86f34:	922b      	str	r2, [sp, #172]	; 0xac
   86f36:	f300 855f 	bgt.w	879f8 <_svfprintf_r+0x16a0>
   86f3a:	f108 0808 	add.w	r8, r8, #8
   86f3e:	2d00      	cmp	r5, #0
   86f40:	bfb4      	ite	lt
   86f42:	461d      	movlt	r5, r3
   86f44:	1b5d      	subge	r5, r3, r5
   86f46:	2d00      	cmp	r5, #0
   86f48:	f77f abb5 	ble.w	866b6 <_svfprintf_r+0x35e>
   86f4c:	2d10      	cmp	r5, #16
   86f4e:	f340 8376 	ble.w	8763e <_svfprintf_r+0x12e6>
   86f52:	4f6b      	ldr	r7, [pc, #428]	; (87100 <_svfprintf_r+0xda8>)
   86f54:	2610      	movs	r6, #16
   86f56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f58:	970f      	str	r7, [sp, #60]	; 0x3c
   86f5a:	e005      	b.n	86f68 <_svfprintf_r+0xc10>
   86f5c:	f108 0808 	add.w	r8, r8, #8
   86f60:	3d10      	subs	r5, #16
   86f62:	2d10      	cmp	r5, #16
   86f64:	f340 836e 	ble.w	87644 <_svfprintf_r+0x12ec>
   86f68:	3301      	adds	r3, #1
   86f6a:	3410      	adds	r4, #16
   86f6c:	2b07      	cmp	r3, #7
   86f6e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86f72:	e9c8 7600 	strd	r7, r6, [r8]
   86f76:	ddf1      	ble.n	86f5c <_svfprintf_r+0xc04>
   86f78:	4651      	mov	r1, sl
   86f7a:	4648      	mov	r0, r9
   86f7c:	aa2a      	add	r2, sp, #168	; 0xa8
   86f7e:	f004 fdd7 	bl	8bb30 <__ssprint_r>
   86f82:	2800      	cmp	r0, #0
   86f84:	f47f ae30 	bne.w	86be8 <_svfprintf_r+0x890>
   86f88:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86f8c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f90:	e7e6      	b.n	86f60 <_svfprintf_r+0xc08>
   86f92:	2b30      	cmp	r3, #48	; 0x30
   86f94:	f43f ae99 	beq.w	86cca <_svfprintf_r+0x972>
   86f98:	2330      	movs	r3, #48	; 0x30
   86f9a:	3a02      	subs	r2, #2
   86f9c:	f807 3c01 	strb.w	r3, [r7, #-1]
   86fa0:	9908      	ldr	r1, [sp, #32]
   86fa2:	ab56      	add	r3, sp, #344	; 0x158
   86fa4:	1a9b      	subs	r3, r3, r2
   86fa6:	4617      	mov	r7, r2
   86fa8:	9107      	str	r1, [sp, #28]
   86faa:	930c      	str	r3, [sp, #48]	; 0x30
   86fac:	e53d      	b.n	86a2a <_svfprintf_r+0x6d2>
   86fae:	9b07      	ldr	r3, [sp, #28]
   86fb0:	07d8      	lsls	r0, r3, #31
   86fb2:	f53f ae27 	bmi.w	86c04 <_svfprintf_r+0x8ac>
   86fb6:	2301      	movs	r3, #1
   86fb8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86fba:	441c      	add	r4, r3
   86fbc:	441d      	add	r5, r3
   86fbe:	2d07      	cmp	r5, #7
   86fc0:	942c      	str	r4, [sp, #176]	; 0xb0
   86fc2:	f8c8 7000 	str.w	r7, [r8]
   86fc6:	952b      	str	r5, [sp, #172]	; 0xac
   86fc8:	f8c8 3004 	str.w	r3, [r8, #4]
   86fcc:	f77f ae4d 	ble.w	86c6a <_svfprintf_r+0x912>
   86fd0:	4651      	mov	r1, sl
   86fd2:	4648      	mov	r0, r9
   86fd4:	aa2a      	add	r2, sp, #168	; 0xa8
   86fd6:	f004 fdab 	bl	8bb30 <__ssprint_r>
   86fda:	2800      	cmp	r0, #0
   86fdc:	f47f ae04 	bne.w	86be8 <_svfprintf_r+0x890>
   86fe0:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   86fe4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86fe8:	e641      	b.n	86c6e <_svfprintf_r+0x916>
   86fea:	1e5e      	subs	r6, r3, #1
   86fec:	2e00      	cmp	r6, #0
   86fee:	f77f ae3e 	ble.w	86c6e <_svfprintf_r+0x916>
   86ff2:	2e10      	cmp	r6, #16
   86ff4:	f340 871e 	ble.w	87e34 <_svfprintf_r+0x1adc>
   86ff8:	4b41      	ldr	r3, [pc, #260]	; (87100 <_svfprintf_r+0xda8>)
   86ffa:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   86ffe:	2710      	movs	r7, #16
   87000:	46d3      	mov	fp, sl
   87002:	930f      	str	r3, [sp, #60]	; 0x3c
   87004:	46ca      	mov	sl, r9
   87006:	4699      	mov	r9, r3
   87008:	e005      	b.n	87016 <_svfprintf_r+0xcbe>
   8700a:	f108 0808 	add.w	r8, r8, #8
   8700e:	3e10      	subs	r6, #16
   87010:	2e10      	cmp	r6, #16
   87012:	f340 82f8 	ble.w	87606 <_svfprintf_r+0x12ae>
   87016:	3501      	adds	r5, #1
   87018:	3410      	adds	r4, #16
   8701a:	2d07      	cmp	r5, #7
   8701c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87020:	e9c8 9700 	strd	r9, r7, [r8]
   87024:	ddf1      	ble.n	8700a <_svfprintf_r+0xcb2>
   87026:	4659      	mov	r1, fp
   87028:	4650      	mov	r0, sl
   8702a:	aa2a      	add	r2, sp, #168	; 0xa8
   8702c:	f004 fd80 	bl	8bb30 <__ssprint_r>
   87030:	2800      	cmp	r0, #0
   87032:	f040 85cc 	bne.w	87bce <_svfprintf_r+0x1876>
   87036:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8703a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8703e:	e7e6      	b.n	8700e <_svfprintf_r+0xcb6>
   87040:	4651      	mov	r1, sl
   87042:	4648      	mov	r0, r9
   87044:	aa2a      	add	r2, sp, #168	; 0xa8
   87046:	f004 fd73 	bl	8bb30 <__ssprint_r>
   8704a:	2800      	cmp	r0, #0
   8704c:	f47f adcc 	bne.w	86be8 <_svfprintf_r+0x890>
   87050:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87052:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87056:	f7ff bb1d 	b.w	86694 <_svfprintf_r+0x33c>
   8705a:	9b08      	ldr	r3, [sp, #32]
   8705c:	06dc      	lsls	r4, r3, #27
   8705e:	f100 8119 	bmi.w	87294 <_svfprintf_r+0xf3c>
   87062:	9b08      	ldr	r3, [sp, #32]
   87064:	0658      	lsls	r0, r3, #25
   87066:	f140 8368 	bpl.w	8773a <_svfprintf_r+0x13e2>
   8706a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8706c:	2301      	movs	r3, #1
   8706e:	f852 4b04 	ldr.w	r4, [r2], #4
   87072:	2500      	movs	r5, #0
   87074:	920e      	str	r2, [sp, #56]	; 0x38
   87076:	b2a4      	uxth	r4, r4
   87078:	f7ff ba7f 	b.w	8657a <_svfprintf_r+0x222>
   8707c:	232d      	movs	r3, #45	; 0x2d
   8707e:	9a07      	ldr	r2, [sp, #28]
   87080:	4264      	negs	r4, r4
   87082:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87086:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8708a:	2301      	movs	r3, #1
   8708c:	9208      	str	r2, [sp, #32]
   8708e:	f7ff ba77 	b.w	86580 <_svfprintf_r+0x228>
   87092:	4651      	mov	r1, sl
   87094:	4648      	mov	r0, r9
   87096:	aa2a      	add	r2, sp, #168	; 0xa8
   87098:	f004 fd4a 	bl	8bb30 <__ssprint_r>
   8709c:	2800      	cmp	r0, #0
   8709e:	f47f ada3 	bne.w	86be8 <_svfprintf_r+0x890>
   870a2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   870a6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870aa:	e5ba      	b.n	86c22 <_svfprintf_r+0x8ca>
   870ac:	4651      	mov	r1, sl
   870ae:	4648      	mov	r0, r9
   870b0:	aa2a      	add	r2, sp, #168	; 0xa8
   870b2:	f004 fd3d 	bl	8bb30 <__ssprint_r>
   870b6:	2800      	cmp	r0, #0
   870b8:	f47f ad96 	bne.w	86be8 <_svfprintf_r+0x890>
   870bc:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   870c0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870c4:	e5ba      	b.n	86c3c <_svfprintf_r+0x8e4>
   870c6:	9b07      	ldr	r3, [sp, #28]
   870c8:	07da      	lsls	r2, r3, #31
   870ca:	f57f aaf4 	bpl.w	866b6 <_svfprintf_r+0x35e>
   870ce:	e4d9      	b.n	86a84 <_svfprintf_r+0x72c>
   870d0:	af56      	add	r7, sp, #344	; 0x158
   870d2:	e4aa      	b.n	86a2a <_svfprintf_r+0x6d2>
   870d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870d6:	465f      	mov	r7, fp
   870d8:	f853 1b04 	ldr.w	r1, [r3], #4
   870dc:	930e      	str	r3, [sp, #56]	; 0x38
   870de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870e0:	17dd      	asrs	r5, r3, #31
   870e2:	461a      	mov	r2, r3
   870e4:	462b      	mov	r3, r5
   870e6:	e9c1 2300 	strd	r2, r3, [r1]
   870ea:	f7ff bb03 	b.w	866f4 <_svfprintf_r+0x39c>
   870ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870f0:	2500      	movs	r5, #0
   870f2:	f853 4b04 	ldr.w	r4, [r3], #4
   870f6:	930e      	str	r3, [sp, #56]	; 0x38
   870f8:	f7ff ba3a 	b.w	86570 <_svfprintf_r+0x218>
   870fc:	0008cc34 	.word	0x0008cc34
   87100:	0008cc44 	.word	0x0008cc44
   87104:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87108:	460b      	mov	r3, r1
   8710a:	4602      	mov	r2, r0
   8710c:	f005 fc44 	bl	8c998 <__aeabi_dcmpun>
   87110:	4601      	mov	r1, r0
   87112:	2800      	cmp	r0, #0
   87114:	f040 8643 	bne.w	87d9e <_svfprintf_r+0x1a46>
   87118:	2e61      	cmp	r6, #97	; 0x61
   8711a:	f000 8586 	beq.w	87c2a <_svfprintf_r+0x18d2>
   8711e:	2e41      	cmp	r6, #65	; 0x41
   87120:	f000 847a 	beq.w	87a18 <_svfprintf_r+0x16c0>
   87124:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87126:	f026 0520 	bic.w	r5, r6, #32
   8712a:	1c5a      	adds	r2, r3, #1
   8712c:	9508      	str	r5, [sp, #32]
   8712e:	f000 837d 	beq.w	8782c <_svfprintf_r+0x14d4>
   87132:	2d47      	cmp	r5, #71	; 0x47
   87134:	f000 859e 	beq.w	87c74 <_svfprintf_r+0x191c>
   87138:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8713c:	9b07      	ldr	r3, [sp, #28]
   8713e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87142:	9312      	str	r3, [sp, #72]	; 0x48
   87144:	460b      	mov	r3, r1
   87146:	2b00      	cmp	r3, #0
   87148:	f2c0 85ba 	blt.w	87cc0 <_svfprintf_r+0x1968>
   8714c:	2200      	movs	r2, #0
   8714e:	930f      	str	r3, [sp, #60]	; 0x3c
   87150:	921e      	str	r2, [sp, #120]	; 0x78
   87152:	920d      	str	r2, [sp, #52]	; 0x34
   87154:	900c      	str	r0, [sp, #48]	; 0x30
   87156:	2d46      	cmp	r5, #70	; 0x46
   87158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8715a:	f000 8407 	beq.w	8796c <_svfprintf_r+0x1614>
   8715e:	2d45      	cmp	r5, #69	; 0x45
   87160:	f04f 0002 	mov.w	r0, #2
   87164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87166:	f040 83e7 	bne.w	87938 <_svfprintf_r+0x15e0>
   8716a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8716c:	9000      	str	r0, [sp, #0]
   8716e:	1c4c      	adds	r4, r1, #1
   87170:	a928      	add	r1, sp, #160	; 0xa0
   87172:	a825      	add	r0, sp, #148	; 0x94
   87174:	9104      	str	r1, [sp, #16]
   87176:	a924      	add	r1, sp, #144	; 0x90
   87178:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8717c:	9401      	str	r4, [sp, #4]
   8717e:	4648      	mov	r0, r9
   87180:	f001 feb2 	bl	88ee8 <_dtoa_r>
   87184:	4607      	mov	r7, r0
   87186:	4404      	add	r4, r0
   87188:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8718a:	9d07      	ldr	r5, [sp, #28]
   8718c:	9307      	str	r3, [sp, #28]
   8718e:	2200      	movs	r2, #0
   87190:	2300      	movs	r3, #0
   87192:	980c      	ldr	r0, [sp, #48]	; 0x30
   87194:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87196:	f005 fbcd 	bl	8c934 <__aeabi_dcmpeq>
   8719a:	2800      	cmp	r0, #0
   8719c:	f000 8398 	beq.w	878d0 <_svfprintf_r+0x1578>
   871a0:	4623      	mov	r3, r4
   871a2:	1bdb      	subs	r3, r3, r7
   871a4:	9313      	str	r3, [sp, #76]	; 0x4c
   871a6:	9b08      	ldr	r3, [sp, #32]
   871a8:	2b47      	cmp	r3, #71	; 0x47
   871aa:	f000 835e 	beq.w	8786a <_svfprintf_r+0x1512>
   871ae:	9b08      	ldr	r3, [sp, #32]
   871b0:	2b46      	cmp	r3, #70	; 0x46
   871b2:	f000 840b 	beq.w	879cc <_svfprintf_r+0x1674>
   871b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   871b8:	9310      	str	r3, [sp, #64]	; 0x40
   871ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   871bc:	9a08      	ldr	r2, [sp, #32]
   871be:	3b01      	subs	r3, #1
   871c0:	2a41      	cmp	r2, #65	; 0x41
   871c2:	9324      	str	r3, [sp, #144]	; 0x90
   871c4:	f000 85ad 	beq.w	87d22 <_svfprintf_r+0x19ca>
   871c8:	2100      	movs	r1, #0
   871ca:	b2f2      	uxtb	r2, r6
   871cc:	2b00      	cmp	r3, #0
   871ce:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   871d2:	bfb6      	itet	lt
   871d4:	222d      	movlt	r2, #45	; 0x2d
   871d6:	222b      	movge	r2, #43	; 0x2b
   871d8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   871da:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   871de:	bfb8      	it	lt
   871e0:	f1c3 0301 	rsblt	r3, r3, #1
   871e4:	2b09      	cmp	r3, #9
   871e6:	f340 85a2 	ble.w	87d2e <_svfprintf_r+0x19d6>
   871ea:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   871ee:	4672      	mov	r2, lr
   871f0:	469c      	mov	ip, r3
   871f2:	4cbf      	ldr	r4, [pc, #764]	; (874f0 <_svfprintf_r+0x1198>)
   871f4:	4660      	mov	r0, ip
   871f6:	4611      	mov	r1, r2
   871f8:	fb84 230c 	smull	r2, r3, r4, ip
   871fc:	ea4f 72ec 	mov.w	r2, ip, asr #31
   87200:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87204:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87208:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   8720c:	3330      	adds	r3, #48	; 0x30
   8720e:	2863      	cmp	r0, #99	; 0x63
   87210:	4694      	mov	ip, r2
   87212:	f801 3c01 	strb.w	r3, [r1, #-1]
   87216:	f101 32ff 	add.w	r2, r1, #4294967295
   8721a:	dceb      	bgt.n	871f4 <_svfprintf_r+0xe9c>
   8721c:	4663      	mov	r3, ip
   8721e:	3330      	adds	r3, #48	; 0x30
   87220:	b2d8      	uxtb	r0, r3
   87222:	1e8b      	subs	r3, r1, #2
   87224:	459e      	cmp	lr, r3
   87226:	f802 0c01 	strb.w	r0, [r2, #-1]
   8722a:	f240 862c 	bls.w	87e86 <_svfprintf_r+0x1b2e>
   8722e:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87232:	e001      	b.n	87238 <_svfprintf_r+0xee0>
   87234:	f812 0b01 	ldrb.w	r0, [r2], #1
   87238:	4596      	cmp	lr, r2
   8723a:	f803 0b01 	strb.w	r0, [r3], #1
   8723e:	d1f9      	bne.n	87234 <_svfprintf_r+0xedc>
   87240:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87244:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87248:	1a5b      	subs	r3, r3, r1
   8724a:	4413      	add	r3, r2
   8724c:	aa26      	add	r2, sp, #152	; 0x98
   8724e:	1a9b      	subs	r3, r3, r2
   87250:	931b      	str	r3, [sp, #108]	; 0x6c
   87252:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87256:	2b01      	cmp	r3, #1
   87258:	441a      	add	r2, r3
   8725a:	920c      	str	r2, [sp, #48]	; 0x30
   8725c:	f340 85cc 	ble.w	87df8 <_svfprintf_r+0x1aa0>
   87260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87264:	4413      	add	r3, r2
   87266:	930c      	str	r3, [sp, #48]	; 0x30
   87268:	2300      	movs	r3, #0
   8726a:	9312      	str	r3, [sp, #72]	; 0x48
   8726c:	9316      	str	r3, [sp, #88]	; 0x58
   8726e:	9310      	str	r3, [sp, #64]	; 0x40
   87270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87272:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   87276:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   8727a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8727e:	9207      	str	r2, [sp, #28]
   87280:	9308      	str	r3, [sp, #32]
   87282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87284:	2b00      	cmp	r3, #0
   87286:	f040 8317 	bne.w	878b8 <_svfprintf_r+0x1560>
   8728a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8728e:	9309      	str	r3, [sp, #36]	; 0x24
   87290:	f7ff ba86 	b.w	867a0 <_svfprintf_r+0x448>
   87294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87296:	2301      	movs	r3, #1
   87298:	f852 4b04 	ldr.w	r4, [r2], #4
   8729c:	2500      	movs	r5, #0
   8729e:	920e      	str	r2, [sp, #56]	; 0x38
   872a0:	f7ff b96b 	b.w	8657a <_svfprintf_r+0x222>
   872a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872a6:	f853 4b04 	ldr.w	r4, [r3], #4
   872aa:	17e5      	asrs	r5, r4, #31
   872ac:	930e      	str	r3, [sp, #56]	; 0x38
   872ae:	4622      	mov	r2, r4
   872b0:	462b      	mov	r3, r5
   872b2:	f7ff b933 	b.w	8651c <_svfprintf_r+0x1c4>
   872b6:	9b07      	ldr	r3, [sp, #28]
   872b8:	9308      	str	r3, [sp, #32]
   872ba:	f7ff bae0 	b.w	8687e <_svfprintf_r+0x526>
   872be:	4b8d      	ldr	r3, [pc, #564]	; (874f4 <_svfprintf_r+0x119c>)
   872c0:	9319      	str	r3, [sp, #100]	; 0x64
   872c2:	9b07      	ldr	r3, [sp, #28]
   872c4:	0699      	lsls	r1, r3, #26
   872c6:	f140 80fe 	bpl.w	874c6 <_svfprintf_r+0x116e>
   872ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872cc:	3307      	adds	r3, #7
   872ce:	f023 0307 	bic.w	r3, r3, #7
   872d2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   872d6:	930e      	str	r3, [sp, #56]	; 0x38
   872d8:	9a07      	ldr	r2, [sp, #28]
   872da:	07d7      	lsls	r7, r2, #31
   872dc:	d50a      	bpl.n	872f4 <_svfprintf_r+0xf9c>
   872de:	ea54 0305 	orrs.w	r3, r4, r5
   872e2:	d007      	beq.n	872f4 <_svfprintf_r+0xf9c>
   872e4:	2330      	movs	r3, #48	; 0x30
   872e6:	f042 0202 	orr.w	r2, r2, #2
   872ea:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   872ee:	9207      	str	r2, [sp, #28]
   872f0:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   872f4:	9a07      	ldr	r2, [sp, #28]
   872f6:	2302      	movs	r3, #2
   872f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   872fc:	9208      	str	r2, [sp, #32]
   872fe:	f7ff b93c 	b.w	8657a <_svfprintf_r+0x222>
   87302:	4b7d      	ldr	r3, [pc, #500]	; (874f8 <_svfprintf_r+0x11a0>)
   87304:	9319      	str	r3, [sp, #100]	; 0x64
   87306:	e7dc      	b.n	872c2 <_svfprintf_r+0xf6a>
   87308:	f043 0320 	orr.w	r3, r3, #32
   8730c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87310:	9307      	str	r3, [sp, #28]
   87312:	f10b 0b01 	add.w	fp, fp, #1
   87316:	f7ff b86a 	b.w	863ee <_svfprintf_r+0x96>
   8731a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8731e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87322:	9307      	str	r3, [sp, #28]
   87324:	f10b 0b01 	add.w	fp, fp, #1
   87328:	f7ff b861 	b.w	863ee <_svfprintf_r+0x96>
   8732c:	4651      	mov	r1, sl
   8732e:	4648      	mov	r0, r9
   87330:	aa2a      	add	r2, sp, #168	; 0xa8
   87332:	f004 fbfd 	bl	8bb30 <__ssprint_r>
   87336:	2800      	cmp	r0, #0
   87338:	f47f ac56 	bne.w	86be8 <_svfprintf_r+0x890>
   8733c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8733e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87342:	f7ff bbad 	b.w	86aa0 <_svfprintf_r+0x748>
   87346:	2140      	movs	r1, #64	; 0x40
   87348:	4648      	mov	r0, r9
   8734a:	f003 fa7b 	bl	8a844 <_malloc_r>
   8734e:	f8cb 0000 	str.w	r0, [fp]
   87352:	f8cb 0010 	str.w	r0, [fp, #16]
   87356:	2800      	cmp	r0, #0
   87358:	f000 858d 	beq.w	87e76 <_svfprintf_r+0x1b1e>
   8735c:	2340      	movs	r3, #64	; 0x40
   8735e:	f8cb 3014 	str.w	r3, [fp, #20]
   87362:	f7ff b811 	b.w	86388 <_svfprintf_r+0x30>
   87366:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87368:	463a      	mov	r2, r7
   8736a:	2b06      	cmp	r3, #6
   8736c:	bf28      	it	cs
   8736e:	2306      	movcs	r3, #6
   87370:	9709      	str	r7, [sp, #36]	; 0x24
   87372:	9712      	str	r7, [sp, #72]	; 0x48
   87374:	9716      	str	r7, [sp, #88]	; 0x58
   87376:	9710      	str	r7, [sp, #64]	; 0x40
   87378:	970d      	str	r7, [sp, #52]	; 0x34
   8737a:	9308      	str	r3, [sp, #32]
   8737c:	4f5f      	ldr	r7, [pc, #380]	; (874fc <_svfprintf_r+0x11a4>)
   8737e:	940e      	str	r4, [sp, #56]	; 0x38
   87380:	930c      	str	r3, [sp, #48]	; 0x30
   87382:	f7ff ba0d 	b.w	867a0 <_svfprintf_r+0x448>
   87386:	2b10      	cmp	r3, #16
   87388:	f340 8558 	ble.w	87e3c <_svfprintf_r+0x1ae4>
   8738c:	4651      	mov	r1, sl
   8738e:	4a5c      	ldr	r2, [pc, #368]	; (87500 <_svfprintf_r+0x11a8>)
   87390:	46ca      	mov	sl, r9
   87392:	9709      	str	r7, [sp, #36]	; 0x24
   87394:	2610      	movs	r6, #16
   87396:	4617      	mov	r7, r2
   87398:	4689      	mov	r9, r1
   8739a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8739c:	920f      	str	r2, [sp, #60]	; 0x3c
   8739e:	e005      	b.n	873ac <_svfprintf_r+0x1054>
   873a0:	f108 0808 	add.w	r8, r8, #8
   873a4:	3d10      	subs	r5, #16
   873a6:	2d10      	cmp	r5, #16
   873a8:	f340 81fa 	ble.w	877a0 <_svfprintf_r+0x1448>
   873ac:	3301      	adds	r3, #1
   873ae:	3410      	adds	r4, #16
   873b0:	2b07      	cmp	r3, #7
   873b2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   873b6:	e9c8 7600 	strd	r7, r6, [r8]
   873ba:	ddf1      	ble.n	873a0 <_svfprintf_r+0x1048>
   873bc:	4649      	mov	r1, r9
   873be:	4650      	mov	r0, sl
   873c0:	aa2a      	add	r2, sp, #168	; 0xa8
   873c2:	f004 fbb5 	bl	8bb30 <__ssprint_r>
   873c6:	2800      	cmp	r0, #0
   873c8:	f040 83fd 	bne.w	87bc6 <_svfprintf_r+0x186e>
   873cc:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   873d0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   873d4:	e7e6      	b.n	873a4 <_svfprintf_r+0x104c>
   873d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   873d8:	4642      	mov	r2, r8
   873da:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   873de:	18fb      	adds	r3, r7, r3
   873e0:	9309      	str	r3, [sp, #36]	; 0x24
   873e2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   873e6:	970f      	str	r7, [sp, #60]	; 0x3c
   873e8:	4620      	mov	r0, r4
   873ea:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   873ee:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   873f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   873f2:	f1b8 0f00 	cmp.w	r8, #0
   873f6:	d02d      	beq.n	87454 <_svfprintf_r+0x10fc>
   873f8:	bb7b      	cbnz	r3, 8745a <_svfprintf_r+0x1102>
   873fa:	3f01      	subs	r7, #1
   873fc:	f108 38ff 	add.w	r8, r8, #4294967295
   87400:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87402:	991c      	ldr	r1, [sp, #112]	; 0x70
   87404:	3301      	adds	r3, #1
   87406:	4458      	add	r0, fp
   87408:	2b07      	cmp	r3, #7
   8740a:	e9c2 1b00 	strd	r1, fp, [r2]
   8740e:	902c      	str	r0, [sp, #176]	; 0xb0
   87410:	932b      	str	r3, [sp, #172]	; 0xac
   87412:	dc62      	bgt.n	874da <_svfprintf_r+0x1182>
   87414:	3208      	adds	r2, #8
   87416:	9909      	ldr	r1, [sp, #36]	; 0x24
   87418:	783b      	ldrb	r3, [r7, #0]
   8741a:	1b8d      	subs	r5, r1, r6
   8741c:	429d      	cmp	r5, r3
   8741e:	bfa8      	it	ge
   87420:	461d      	movge	r5, r3
   87422:	2d00      	cmp	r5, #0
   87424:	dd0b      	ble.n	8743e <_svfprintf_r+0x10e6>
   87426:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87428:	4428      	add	r0, r5
   8742a:	3301      	adds	r3, #1
   8742c:	2b07      	cmp	r3, #7
   8742e:	e9c2 6500 	strd	r6, r5, [r2]
   87432:	902c      	str	r0, [sp, #176]	; 0xb0
   87434:	932b      	str	r3, [sp, #172]	; 0xac
   87436:	f300 8111 	bgt.w	8765c <_svfprintf_r+0x1304>
   8743a:	783b      	ldrb	r3, [r7, #0]
   8743c:	3208      	adds	r2, #8
   8743e:	2d00      	cmp	r5, #0
   87440:	bfb4      	ite	lt
   87442:	461d      	movlt	r5, r3
   87444:	1b5d      	subge	r5, r3, r5
   87446:	2d00      	cmp	r5, #0
   87448:	dc0b      	bgt.n	87462 <_svfprintf_r+0x110a>
   8744a:	441e      	add	r6, r3
   8744c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8744e:	f1b8 0f00 	cmp.w	r8, #0
   87452:	d1d1      	bne.n	873f8 <_svfprintf_r+0x10a0>
   87454:	2b00      	cmp	r3, #0
   87456:	f000 81f9 	beq.w	8784c <_svfprintf_r+0x14f4>
   8745a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8745c:	3b01      	subs	r3, #1
   8745e:	9312      	str	r3, [sp, #72]	; 0x48
   87460:	e7ce      	b.n	87400 <_svfprintf_r+0x10a8>
   87462:	2d10      	cmp	r5, #16
   87464:	f340 84c5 	ble.w	87df2 <_svfprintf_r+0x1a9a>
   87468:	992b      	ldr	r1, [sp, #172]	; 0xac
   8746a:	2410      	movs	r4, #16
   8746c:	460b      	mov	r3, r1
   8746e:	e004      	b.n	8747a <_svfprintf_r+0x1122>
   87470:	3d10      	subs	r5, #16
   87472:	2d10      	cmp	r5, #16
   87474:	f102 0208 	add.w	r2, r2, #8
   87478:	dd16      	ble.n	874a8 <_svfprintf_r+0x1150>
   8747a:	3301      	adds	r3, #1
   8747c:	4920      	ldr	r1, [pc, #128]	; (87500 <_svfprintf_r+0x11a8>)
   8747e:	3010      	adds	r0, #16
   87480:	2b07      	cmp	r3, #7
   87482:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87486:	e9c2 1400 	strd	r1, r4, [r2]
   8748a:	ddf1      	ble.n	87470 <_svfprintf_r+0x1118>
   8748c:	4651      	mov	r1, sl
   8748e:	4648      	mov	r0, r9
   87490:	aa2a      	add	r2, sp, #168	; 0xa8
   87492:	f004 fb4d 	bl	8bb30 <__ssprint_r>
   87496:	2800      	cmp	r0, #0
   87498:	f47f aba6 	bne.w	86be8 <_svfprintf_r+0x890>
   8749c:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   874a0:	3d10      	subs	r5, #16
   874a2:	2d10      	cmp	r5, #16
   874a4:	aa2d      	add	r2, sp, #180	; 0xb4
   874a6:	dce8      	bgt.n	8747a <_svfprintf_r+0x1122>
   874a8:	4619      	mov	r1, r3
   874aa:	1c4b      	adds	r3, r1, #1
   874ac:	4914      	ldr	r1, [pc, #80]	; (87500 <_svfprintf_r+0x11a8>)
   874ae:	4428      	add	r0, r5
   874b0:	2b07      	cmp	r3, #7
   874b2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   874b6:	e9c2 1500 	strd	r1, r5, [r2]
   874ba:	f300 8215 	bgt.w	878e8 <_svfprintf_r+0x1590>
   874be:	783b      	ldrb	r3, [r7, #0]
   874c0:	3208      	adds	r2, #8
   874c2:	441e      	add	r6, r3
   874c4:	e7c2      	b.n	8744c <_svfprintf_r+0x10f4>
   874c6:	9b07      	ldr	r3, [sp, #28]
   874c8:	06da      	lsls	r2, r3, #27
   874ca:	f140 8084 	bpl.w	875d6 <_svfprintf_r+0x127e>
   874ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874d0:	2500      	movs	r5, #0
   874d2:	f853 4b04 	ldr.w	r4, [r3], #4
   874d6:	930e      	str	r3, [sp, #56]	; 0x38
   874d8:	e6fe      	b.n	872d8 <_svfprintf_r+0xf80>
   874da:	4651      	mov	r1, sl
   874dc:	4648      	mov	r0, r9
   874de:	aa2a      	add	r2, sp, #168	; 0xa8
   874e0:	f004 fb26 	bl	8bb30 <__ssprint_r>
   874e4:	2800      	cmp	r0, #0
   874e6:	f47f ab7f 	bne.w	86be8 <_svfprintf_r+0x890>
   874ea:	982c      	ldr	r0, [sp, #176]	; 0xb0
   874ec:	aa2d      	add	r2, sp, #180	; 0xb4
   874ee:	e792      	b.n	87416 <_svfprintf_r+0x10be>
   874f0:	66666667 	.word	0x66666667
   874f4:	0008cc00 	.word	0x0008cc00
   874f8:	0008cc14 	.word	0x0008cc14
   874fc:	0008cc28 	.word	0x0008cc28
   87500:	0008cc44 	.word	0x0008cc44
   87504:	2200      	movs	r2, #0
   87506:	9b08      	ldr	r3, [sp, #32]
   87508:	f8cd b01c 	str.w	fp, [sp, #28]
   8750c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87510:	960c      	str	r6, [sp, #48]	; 0x30
   87512:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87516:	4693      	mov	fp, r2
   87518:	46ca      	mov	sl, r9
   8751a:	461e      	mov	r6, r3
   8751c:	46c1      	mov	r9, r8
   8751e:	af56      	add	r7, sp, #344	; 0x158
   87520:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87524:	e00b      	b.n	8753e <_svfprintf_r+0x11e6>
   87526:	220a      	movs	r2, #10
   87528:	2300      	movs	r3, #0
   8752a:	4620      	mov	r0, r4
   8752c:	4629      	mov	r1, r5
   8752e:	f7fe fb3d 	bl	85bac <__aeabi_uldivmod>
   87532:	2d00      	cmp	r5, #0
   87534:	bf08      	it	eq
   87536:	2c0a      	cmpeq	r4, #10
   87538:	d31b      	bcc.n	87572 <_svfprintf_r+0x121a>
   8753a:	4604      	mov	r4, r0
   8753c:	460d      	mov	r5, r1
   8753e:	220a      	movs	r2, #10
   87540:	2300      	movs	r3, #0
   87542:	4620      	mov	r0, r4
   87544:	4629      	mov	r1, r5
   87546:	f7fe fb31 	bl	85bac <__aeabi_uldivmod>
   8754a:	3230      	adds	r2, #48	; 0x30
   8754c:	f807 2c01 	strb.w	r2, [r7, #-1]
   87550:	f10b 0b01 	add.w	fp, fp, #1
   87554:	3f01      	subs	r7, #1
   87556:	2e00      	cmp	r6, #0
   87558:	d0e5      	beq.n	87526 <_svfprintf_r+0x11ce>
   8755a:	f898 3000 	ldrb.w	r3, [r8]
   8755e:	459b      	cmp	fp, r3
   87560:	d1e1      	bne.n	87526 <_svfprintf_r+0x11ce>
   87562:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87566:	d0de      	beq.n	87526 <_svfprintf_r+0x11ce>
   87568:	2d00      	cmp	r5, #0
   8756a:	bf08      	it	eq
   8756c:	2c0a      	cmpeq	r4, #10
   8756e:	f080 8128 	bcs.w	877c2 <_svfprintf_r+0x146a>
   87572:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87576:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   8757a:	46c8      	mov	r8, r9
   8757c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8757e:	46d1      	mov	r9, sl
   87580:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87584:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87588:	f7ff bb9f 	b.w	86cca <_svfprintf_r+0x972>
   8758c:	4651      	mov	r1, sl
   8758e:	4648      	mov	r0, r9
   87590:	aa2a      	add	r2, sp, #168	; 0xa8
   87592:	931e      	str	r3, [sp, #120]	; 0x78
   87594:	f004 facc 	bl	8bb30 <__ssprint_r>
   87598:	2800      	cmp	r0, #0
   8759a:	f47f ab25 	bne.w	86be8 <_svfprintf_r+0x890>
   8759e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   875a2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   875a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   875a6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875aa:	f7ff b84a 	b.w	86642 <_svfprintf_r+0x2ea>
   875ae:	2001      	movs	r0, #1
   875b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   875b2:	49c5      	ldr	r1, [pc, #788]	; (878c8 <_svfprintf_r+0x1570>)
   875b4:	4403      	add	r3, r0
   875b6:	4404      	add	r4, r0
   875b8:	2b07      	cmp	r3, #7
   875ba:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   875be:	e9c8 1000 	strd	r1, r0, [r8]
   875c2:	f73f abdf 	bgt.w	86d84 <_svfprintf_r+0xa2c>
   875c6:	f108 0808 	add.w	r8, r8, #8
   875ca:	f7ff bbe7 	b.w	86d9c <_svfprintf_r+0xa44>
   875ce:	46d1      	mov	r9, sl
   875d0:	46b3      	mov	fp, r6
   875d2:	f7ff bb0a 	b.w	86bea <_svfprintf_r+0x892>
   875d6:	9b07      	ldr	r3, [sp, #28]
   875d8:	065b      	lsls	r3, r3, #25
   875da:	f140 80cb 	bpl.w	87774 <_svfprintf_r+0x141c>
   875de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875e0:	2500      	movs	r5, #0
   875e2:	f853 4b04 	ldr.w	r4, [r3], #4
   875e6:	930e      	str	r3, [sp, #56]	; 0x38
   875e8:	b2a4      	uxth	r4, r4
   875ea:	e675      	b.n	872d8 <_svfprintf_r+0xf80>
   875ec:	4651      	mov	r1, sl
   875ee:	4648      	mov	r0, r9
   875f0:	aa2a      	add	r2, sp, #168	; 0xa8
   875f2:	f004 fa9d 	bl	8bb30 <__ssprint_r>
   875f6:	2800      	cmp	r0, #0
   875f8:	f47f aaf6 	bne.w	86be8 <_svfprintf_r+0x890>
   875fc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   875fe:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87602:	f7ff ba3a 	b.w	86a7a <_svfprintf_r+0x722>
   87606:	46d1      	mov	r9, sl
   87608:	46da      	mov	sl, fp
   8760a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8760e:	3501      	adds	r5, #1
   87610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87612:	4434      	add	r4, r6
   87614:	2d07      	cmp	r5, #7
   87616:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8761a:	e9c8 3600 	strd	r3, r6, [r8]
   8761e:	f77f ab24 	ble.w	86c6a <_svfprintf_r+0x912>
   87622:	4651      	mov	r1, sl
   87624:	4648      	mov	r0, r9
   87626:	aa2a      	add	r2, sp, #168	; 0xa8
   87628:	f004 fa82 	bl	8bb30 <__ssprint_r>
   8762c:	2800      	cmp	r0, #0
   8762e:	f47f aadb 	bne.w	86be8 <_svfprintf_r+0x890>
   87632:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87636:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8763a:	f7ff bb18 	b.w	86c6e <_svfprintf_r+0x916>
   8763e:	4aa3      	ldr	r2, [pc, #652]	; (878cc <_svfprintf_r+0x1574>)
   87640:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87642:	920f      	str	r2, [sp, #60]	; 0x3c
   87644:	3301      	adds	r3, #1
   87646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87648:	442c      	add	r4, r5
   8764a:	2b07      	cmp	r3, #7
   8764c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87650:	e9c8 2500 	strd	r2, r5, [r8]
   87654:	f77f a82d 	ble.w	866b2 <_svfprintf_r+0x35a>
   87658:	f7ff bbc2 	b.w	86de0 <_svfprintf_r+0xa88>
   8765c:	4651      	mov	r1, sl
   8765e:	4648      	mov	r0, r9
   87660:	aa2a      	add	r2, sp, #168	; 0xa8
   87662:	f004 fa65 	bl	8bb30 <__ssprint_r>
   87666:	2800      	cmp	r0, #0
   87668:	f47f aabe 	bne.w	86be8 <_svfprintf_r+0x890>
   8766c:	783b      	ldrb	r3, [r7, #0]
   8766e:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87670:	aa2d      	add	r2, sp, #180	; 0xb4
   87672:	e6e4      	b.n	8743e <_svfprintf_r+0x10e6>
   87674:	4651      	mov	r1, sl
   87676:	4648      	mov	r0, r9
   87678:	aa2a      	add	r2, sp, #168	; 0xa8
   8767a:	f004 fa59 	bl	8bb30 <__ssprint_r>
   8767e:	2800      	cmp	r0, #0
   87680:	f47f aab2 	bne.w	86be8 <_svfprintf_r+0x890>
   87684:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87686:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8768a:	f7fe bffd 	b.w	86688 <_svfprintf_r+0x330>
   8768e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87690:	990a      	ldr	r1, [sp, #40]	; 0x28
   87692:	f853 2b04 	ldr.w	r2, [r3], #4
   87696:	465f      	mov	r7, fp
   87698:	6011      	str	r1, [r2, #0]
   8769a:	930e      	str	r3, [sp, #56]	; 0x38
   8769c:	f7ff b82a 	b.w	866f4 <_svfprintf_r+0x39c>
   876a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   876a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   876a4:	3301      	adds	r3, #1
   876a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   876a8:	440c      	add	r4, r1
   876aa:	2b07      	cmp	r3, #7
   876ac:	e9c8 0100 	strd	r0, r1, [r8]
   876b0:	942c      	str	r4, [sp, #176]	; 0xb0
   876b2:	932b      	str	r3, [sp, #172]	; 0xac
   876b4:	f300 80ac 	bgt.w	87810 <_svfprintf_r+0x14b8>
   876b8:	f108 0808 	add.w	r8, r8, #8
   876bc:	2a00      	cmp	r2, #0
   876be:	f6bf ab85 	bge.w	86dcc <_svfprintf_r+0xa74>
   876c2:	4255      	negs	r5, r2
   876c4:	3210      	adds	r2, #16
   876c6:	f280 83d3 	bge.w	87e70 <_svfprintf_r+0x1b18>
   876ca:	4651      	mov	r1, sl
   876cc:	4a7f      	ldr	r2, [pc, #508]	; (878cc <_svfprintf_r+0x1574>)
   876ce:	46ca      	mov	sl, r9
   876d0:	9709      	str	r7, [sp, #36]	; 0x24
   876d2:	2610      	movs	r6, #16
   876d4:	4617      	mov	r7, r2
   876d6:	4689      	mov	r9, r1
   876d8:	920f      	str	r2, [sp, #60]	; 0x3c
   876da:	e005      	b.n	876e8 <_svfprintf_r+0x1390>
   876dc:	f108 0808 	add.w	r8, r8, #8
   876e0:	3d10      	subs	r5, #16
   876e2:	2d10      	cmp	r5, #16
   876e4:	f340 82aa 	ble.w	87c3c <_svfprintf_r+0x18e4>
   876e8:	3301      	adds	r3, #1
   876ea:	3410      	adds	r4, #16
   876ec:	2b07      	cmp	r3, #7
   876ee:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   876f2:	e9c8 7600 	strd	r7, r6, [r8]
   876f6:	ddf1      	ble.n	876dc <_svfprintf_r+0x1384>
   876f8:	4649      	mov	r1, r9
   876fa:	4650      	mov	r0, sl
   876fc:	aa2a      	add	r2, sp, #168	; 0xa8
   876fe:	f004 fa17 	bl	8bb30 <__ssprint_r>
   87702:	2800      	cmp	r0, #0
   87704:	f040 825f 	bne.w	87bc6 <_svfprintf_r+0x186e>
   87708:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8770c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87710:	e7e6      	b.n	876e0 <_svfprintf_r+0x1388>
   87712:	4638      	mov	r0, r7
   87714:	f7fe fdbe 	bl	86294 <strlen>
   87718:	462b      	mov	r3, r5
   8771a:	4602      	mov	r2, r0
   8771c:	9509      	str	r5, [sp, #36]	; 0x24
   8771e:	f7ff b894 	b.w	8684a <_svfprintf_r+0x4f2>
   87722:	9b07      	ldr	r3, [sp, #28]
   87724:	2500      	movs	r5, #0
   87726:	f413 7f00 	tst.w	r3, #512	; 0x200
   8772a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8772c:	f853 4b04 	ldr.w	r4, [r3], #4
   87730:	930e      	str	r3, [sp, #56]	; 0x38
   87732:	bf18      	it	ne
   87734:	b2e4      	uxtbne	r4, r4
   87736:	f7fe bf1b 	b.w	86570 <_svfprintf_r+0x218>
   8773a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8773c:	9b08      	ldr	r3, [sp, #32]
   8773e:	f852 4b04 	ldr.w	r4, [r2], #4
   87742:	f413 7f00 	tst.w	r3, #512	; 0x200
   87746:	f04f 0500 	mov.w	r5, #0
   8774a:	f04f 0301 	mov.w	r3, #1
   8774e:	920e      	str	r2, [sp, #56]	; 0x38
   87750:	bf18      	it	ne
   87752:	b2e4      	uxtbne	r4, r4
   87754:	f7fe bf11 	b.w	8657a <_svfprintf_r+0x222>
   87758:	9b07      	ldr	r3, [sp, #28]
   8775a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8775e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87760:	f853 4b04 	ldr.w	r4, [r3], #4
   87764:	bf18      	it	ne
   87766:	b264      	sxtbne	r4, r4
   87768:	17e5      	asrs	r5, r4, #31
   8776a:	930e      	str	r3, [sp, #56]	; 0x38
   8776c:	4622      	mov	r2, r4
   8776e:	462b      	mov	r3, r5
   87770:	f7fe bed4 	b.w	8651c <_svfprintf_r+0x1c4>
   87774:	9b07      	ldr	r3, [sp, #28]
   87776:	2500      	movs	r5, #0
   87778:	f413 7f00 	tst.w	r3, #512	; 0x200
   8777c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8777e:	f853 4b04 	ldr.w	r4, [r3], #4
   87782:	930e      	str	r3, [sp, #56]	; 0x38
   87784:	bf18      	it	ne
   87786:	b2e4      	uxtbne	r4, r4
   87788:	e5a6      	b.n	872d8 <_svfprintf_r+0xf80>
   8778a:	4b50      	ldr	r3, [pc, #320]	; (878cc <_svfprintf_r+0x1574>)
   8778c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8778e:	930f      	str	r3, [sp, #60]	; 0x3c
   87790:	f7ff ba15 	b.w	86bbe <_svfprintf_r+0x866>
   87794:	232d      	movs	r3, #45	; 0x2d
   87796:	461a      	mov	r2, r3
   87798:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8779c:	f7fe bfee 	b.w	8677c <_svfprintf_r+0x424>
   877a0:	464a      	mov	r2, r9
   877a2:	46d1      	mov	r9, sl
   877a4:	4692      	mov	sl, r2
   877a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   877a8:	3301      	adds	r3, #1
   877aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   877ac:	442c      	add	r4, r5
   877ae:	2b07      	cmp	r3, #7
   877b0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877b4:	e9c8 2500 	strd	r2, r5, [r8]
   877b8:	dc3b      	bgt.n	87832 <_svfprintf_r+0x14da>
   877ba:	f108 0808 	add.w	r8, r8, #8
   877be:	f7ff bb8c 	b.w	86eda <_svfprintf_r+0xb82>
   877c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   877c4:	991c      	ldr	r1, [sp, #112]	; 0x70
   877c6:	1aff      	subs	r7, r7, r3
   877c8:	461a      	mov	r2, r3
   877ca:	4638      	mov	r0, r7
   877cc:	f7fe fd90 	bl	862f0 <strncpy>
   877d0:	f898 3001 	ldrb.w	r3, [r8, #1]
   877d4:	b10b      	cbz	r3, 877da <_svfprintf_r+0x1482>
   877d6:	f108 0801 	add.w	r8, r8, #1
   877da:	220a      	movs	r2, #10
   877dc:	2300      	movs	r3, #0
   877de:	4620      	mov	r0, r4
   877e0:	4629      	mov	r1, r5
   877e2:	f7fe f9e3 	bl	85bac <__aeabi_uldivmod>
   877e6:	f04f 0b00 	mov.w	fp, #0
   877ea:	e6a6      	b.n	8753a <_svfprintf_r+0x11e2>
   877ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   877ee:	18bd      	adds	r5, r7, r2
   877f0:	1bad      	subs	r5, r5, r6
   877f2:	1ad3      	subs	r3, r2, r3
   877f4:	429d      	cmp	r5, r3
   877f6:	bfa8      	it	ge
   877f8:	461d      	movge	r5, r3
   877fa:	f7ff bba0 	b.w	86f3e <_svfprintf_r+0xbe6>
   877fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87800:	990a      	ldr	r1, [sp, #40]	; 0x28
   87802:	f853 2b04 	ldr.w	r2, [r3], #4
   87806:	465f      	mov	r7, fp
   87808:	8011      	strh	r1, [r2, #0]
   8780a:	930e      	str	r3, [sp, #56]	; 0x38
   8780c:	f7fe bf72 	b.w	866f4 <_svfprintf_r+0x39c>
   87810:	4651      	mov	r1, sl
   87812:	4648      	mov	r0, r9
   87814:	aa2a      	add	r2, sp, #168	; 0xa8
   87816:	f004 f98b 	bl	8bb30 <__ssprint_r>
   8781a:	2800      	cmp	r0, #0
   8781c:	f47f a9e4 	bne.w	86be8 <_svfprintf_r+0x890>
   87820:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87824:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87826:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8782a:	e747      	b.n	876bc <_svfprintf_r+0x1364>
   8782c:	2306      	movs	r3, #6
   8782e:	9309      	str	r3, [sp, #36]	; 0x24
   87830:	e482      	b.n	87138 <_svfprintf_r+0xde0>
   87832:	4651      	mov	r1, sl
   87834:	4648      	mov	r0, r9
   87836:	aa2a      	add	r2, sp, #168	; 0xa8
   87838:	f004 f97a 	bl	8bb30 <__ssprint_r>
   8783c:	2800      	cmp	r0, #0
   8783e:	f47f a9d3 	bne.w	86be8 <_svfprintf_r+0x890>
   87842:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87844:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87848:	f7ff bb47 	b.w	86eda <_svfprintf_r+0xb82>
   8784c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8784e:	971a      	str	r7, [sp, #104]	; 0x68
   87850:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87852:	4690      	mov	r8, r2
   87854:	18fb      	adds	r3, r7, r3
   87856:	429e      	cmp	r6, r3
   87858:	4632      	mov	r2, r6
   8785a:	bf28      	it	cs
   8785c:	461a      	movcs	r2, r3
   8785e:	4604      	mov	r4, r0
   87860:	4616      	mov	r6, r2
   87862:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87866:	f7ff bb3f 	b.w	86ee8 <_svfprintf_r+0xb90>
   8786a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8786c:	1cd8      	adds	r0, r3, #3
   8786e:	9310      	str	r3, [sp, #64]	; 0x40
   87870:	db02      	blt.n	87878 <_svfprintf_r+0x1520>
   87872:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87874:	4293      	cmp	r3, r2
   87876:	dd04      	ble.n	87882 <_svfprintf_r+0x152a>
   87878:	3e02      	subs	r6, #2
   8787a:	f026 0320 	bic.w	r3, r6, #32
   8787e:	9308      	str	r3, [sp, #32]
   87880:	e49b      	b.n	871ba <_svfprintf_r+0xe62>
   87882:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87884:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87886:	428b      	cmp	r3, r1
   87888:	f2c0 817a 	blt.w	87b80 <_svfprintf_r+0x1828>
   8788c:	07ea      	lsls	r2, r5, #31
   8788e:	f140 8283 	bpl.w	87d98 <_svfprintf_r+0x1a40>
   87892:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87894:	4413      	add	r3, r2
   87896:	930c      	str	r3, [sp, #48]	; 0x30
   87898:	056e      	lsls	r6, r5, #21
   8789a:	f140 8277 	bpl.w	87d8c <_svfprintf_r+0x1a34>
   8789e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   878a0:	2b00      	cmp	r3, #0
   878a2:	f300 8210 	bgt.w	87cc6 <_svfprintf_r+0x196e>
   878a6:	2667      	movs	r6, #103	; 0x67
   878a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   878aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   878ae:	9308      	str	r3, [sp, #32]
   878b0:	2300      	movs	r3, #0
   878b2:	9312      	str	r3, [sp, #72]	; 0x48
   878b4:	9316      	str	r3, [sp, #88]	; 0x58
   878b6:	e4e4      	b.n	87282 <_svfprintf_r+0xf2a>
   878b8:	222d      	movs	r2, #45	; 0x2d
   878ba:	2300      	movs	r3, #0
   878bc:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   878c0:	9309      	str	r3, [sp, #36]	; 0x24
   878c2:	f7fe bf70 	b.w	867a6 <_svfprintf_r+0x44e>
   878c6:	bf00      	nop
   878c8:	0008cc30 	.word	0x0008cc30
   878cc:	0008cc44 	.word	0x0008cc44
   878d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   878d2:	42a3      	cmp	r3, r4
   878d4:	f4bf ac65 	bcs.w	871a2 <_svfprintf_r+0xe4a>
   878d8:	2130      	movs	r1, #48	; 0x30
   878da:	1c5a      	adds	r2, r3, #1
   878dc:	9228      	str	r2, [sp, #160]	; 0xa0
   878de:	7019      	strb	r1, [r3, #0]
   878e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   878e2:	429c      	cmp	r4, r3
   878e4:	d8f9      	bhi.n	878da <_svfprintf_r+0x1582>
   878e6:	e45c      	b.n	871a2 <_svfprintf_r+0xe4a>
   878e8:	4651      	mov	r1, sl
   878ea:	4648      	mov	r0, r9
   878ec:	aa2a      	add	r2, sp, #168	; 0xa8
   878ee:	f004 f91f 	bl	8bb30 <__ssprint_r>
   878f2:	2800      	cmp	r0, #0
   878f4:	f47f a978 	bne.w	86be8 <_svfprintf_r+0x890>
   878f8:	783b      	ldrb	r3, [r7, #0]
   878fa:	982c      	ldr	r0, [sp, #176]	; 0xb0
   878fc:	aa2d      	add	r2, sp, #180	; 0xb4
   878fe:	441e      	add	r6, r3
   87900:	e5a4      	b.n	8744c <_svfprintf_r+0x10f4>
   87902:	4651      	mov	r1, sl
   87904:	4648      	mov	r0, r9
   87906:	aa2a      	add	r2, sp, #168	; 0xa8
   87908:	f004 f912 	bl	8bb30 <__ssprint_r>
   8790c:	2800      	cmp	r0, #0
   8790e:	f47f a96b 	bne.w	86be8 <_svfprintf_r+0x890>
   87912:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87914:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87918:	f7ff bad7 	b.w	86eca <_svfprintf_r+0xb72>
   8791c:	4651      	mov	r1, sl
   8791e:	4648      	mov	r0, r9
   87920:	aa2a      	add	r2, sp, #168	; 0xa8
   87922:	f004 f905 	bl	8bb30 <__ssprint_r>
   87926:	2800      	cmp	r0, #0
   87928:	f47f a95e 	bne.w	86be8 <_svfprintf_r+0x890>
   8792c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8792e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87930:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87934:	f7ff baee 	b.w	86f14 <_svfprintf_r+0xbbc>
   87938:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8793a:	a928      	add	r1, sp, #160	; 0xa0
   8793c:	e9cd 0400 	strd	r0, r4, [sp]
   87940:	9104      	str	r1, [sp, #16]
   87942:	a825      	add	r0, sp, #148	; 0x94
   87944:	a924      	add	r1, sp, #144	; 0x90
   87946:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8794a:	4648      	mov	r0, r9
   8794c:	f001 facc 	bl	88ee8 <_dtoa_r>
   87950:	2d47      	cmp	r5, #71	; 0x47
   87952:	4607      	mov	r7, r0
   87954:	d119      	bne.n	8798a <_svfprintf_r+0x1632>
   87956:	9d07      	ldr	r5, [sp, #28]
   87958:	462b      	mov	r3, r5
   8795a:	07db      	lsls	r3, r3, #31
   8795c:	f100 812a 	bmi.w	87bb4 <_svfprintf_r+0x185c>
   87960:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87964:	9207      	str	r2, [sp, #28]
   87966:	2247      	movs	r2, #71	; 0x47
   87968:	9208      	str	r2, [sp, #32]
   8796a:	e41a      	b.n	871a2 <_svfprintf_r+0xe4a>
   8796c:	2003      	movs	r0, #3
   8796e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87970:	a928      	add	r1, sp, #160	; 0xa0
   87972:	e9cd 0400 	strd	r0, r4, [sp]
   87976:	9104      	str	r1, [sp, #16]
   87978:	a825      	add	r0, sp, #148	; 0x94
   8797a:	a924      	add	r1, sp, #144	; 0x90
   8797c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87982:	4648      	mov	r0, r9
   87984:	f001 fab0 	bl	88ee8 <_dtoa_r>
   87988:	4607      	mov	r7, r0
   8798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8798c:	2d46      	cmp	r5, #70	; 0x46
   8798e:	eb07 0403 	add.w	r4, r7, r3
   87992:	f47f abf9 	bne.w	87188 <_svfprintf_r+0xe30>
   87996:	783b      	ldrb	r3, [r7, #0]
   87998:	2b30      	cmp	r3, #48	; 0x30
   8799a:	f000 821c 	beq.w	87dd6 <_svfprintf_r+0x1a7e>
   8799e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   879a2:	9d07      	ldr	r5, [sp, #28]
   879a4:	441c      	add	r4, r3
   879a6:	9207      	str	r2, [sp, #28]
   879a8:	f7ff bbf1 	b.w	8718e <_svfprintf_r+0xe36>
   879ac:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   879b0:	f7ff b9c3 	b.w	86d3a <_svfprintf_r+0x9e2>
   879b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879b6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   879ba:	9308      	str	r3, [sp, #32]
   879bc:	930c      	str	r3, [sp, #48]	; 0x30
   879be:	9009      	str	r0, [sp, #36]	; 0x24
   879c0:	940e      	str	r4, [sp, #56]	; 0x38
   879c2:	9012      	str	r0, [sp, #72]	; 0x48
   879c4:	9016      	str	r0, [sp, #88]	; 0x58
   879c6:	9010      	str	r0, [sp, #64]	; 0x40
   879c8:	f7fe beea 	b.w	867a0 <_svfprintf_r+0x448>
   879cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   879ce:	2a00      	cmp	r2, #0
   879d0:	9210      	str	r2, [sp, #64]	; 0x40
   879d2:	f340 821b 	ble.w	87e0c <_svfprintf_r+0x1ab4>
   879d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   879d8:	f005 0301 	and.w	r3, r5, #1
   879dc:	430b      	orrs	r3, r1
   879de:	f040 819a 	bne.w	87d16 <_svfprintf_r+0x19be>
   879e2:	2666      	movs	r6, #102	; 0x66
   879e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   879e6:	930c      	str	r3, [sp, #48]	; 0x30
   879e8:	056a      	lsls	r2, r5, #21
   879ea:	f100 816d 	bmi.w	87cc8 <_svfprintf_r+0x1970>
   879ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   879f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   879f4:	9308      	str	r3, [sp, #32]
   879f6:	e75b      	b.n	878b0 <_svfprintf_r+0x1558>
   879f8:	4651      	mov	r1, sl
   879fa:	4648      	mov	r0, r9
   879fc:	aa2a      	add	r2, sp, #168	; 0xa8
   879fe:	f004 f897 	bl	8bb30 <__ssprint_r>
   87a02:	2800      	cmp	r0, #0
   87a04:	f47f a8f0 	bne.w	86be8 <_svfprintf_r+0x890>
   87a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87a0c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87a0e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a12:	1ad3      	subs	r3, r2, r3
   87a14:	f7ff ba93 	b.w	86f3e <_svfprintf_r+0xbe6>
   87a18:	2330      	movs	r3, #48	; 0x30
   87a1a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87a1e:	2358      	movs	r3, #88	; 0x58
   87a20:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87a24:	9b07      	ldr	r3, [sp, #28]
   87a26:	f043 0402 	orr.w	r4, r3, #2
   87a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a2c:	2b63      	cmp	r3, #99	; 0x63
   87a2e:	f300 80f2 	bgt.w	87c16 <_svfprintf_r+0x18be>
   87a32:	2300      	movs	r3, #0
   87a34:	af3d      	add	r7, sp, #244	; 0xf4
   87a36:	930d      	str	r3, [sp, #52]	; 0x34
   87a38:	9b07      	ldr	r3, [sp, #28]
   87a3a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87a3e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87a42:	9312      	str	r3, [sp, #72]	; 0x48
   87a44:	4613      	mov	r3, r2
   87a46:	2b00      	cmp	r3, #0
   87a48:	f026 0520 	bic.w	r5, r6, #32
   87a4c:	9407      	str	r4, [sp, #28]
   87a4e:	f2c0 808d 	blt.w	87b6c <_svfprintf_r+0x1814>
   87a52:	930f      	str	r3, [sp, #60]	; 0x3c
   87a54:	2300      	movs	r3, #0
   87a56:	9508      	str	r5, [sp, #32]
   87a58:	910c      	str	r1, [sp, #48]	; 0x30
   87a5a:	931e      	str	r3, [sp, #120]	; 0x78
   87a5c:	2e61      	cmp	r6, #97	; 0x61
   87a5e:	f000 817d 	beq.w	87d5c <_svfprintf_r+0x1a04>
   87a62:	2e41      	cmp	r6, #65	; 0x41
   87a64:	f47f ab77 	bne.w	87156 <_svfprintf_r+0xdfe>
   87a68:	aa24      	add	r2, sp, #144	; 0x90
   87a6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87a6e:	f003 ffcf 	bl	8ba10 <frexp>
   87a72:	2200      	movs	r2, #0
   87a74:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87a78:	f004 fcf4 	bl	8c464 <__aeabi_dmul>
   87a7c:	4604      	mov	r4, r0
   87a7e:	460d      	mov	r5, r1
   87a80:	2200      	movs	r2, #0
   87a82:	2300      	movs	r3, #0
   87a84:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87a88:	f004 ff54 	bl	8c934 <__aeabi_dcmpeq>
   87a8c:	b108      	cbz	r0, 87a92 <_svfprintf_r+0x173a>
   87a8e:	2301      	movs	r3, #1
   87a90:	9324      	str	r3, [sp, #144]	; 0x90
   87a92:	4bae      	ldr	r3, [pc, #696]	; (87d4c <_svfprintf_r+0x19f4>)
   87a94:	930c      	str	r3, [sp, #48]	; 0x30
   87a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a98:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87a9c:	3b01      	subs	r3, #1
   87a9e:	9613      	str	r6, [sp, #76]	; 0x4c
   87aa0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   87aa4:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   87aa8:	9721      	str	r7, [sp, #132]	; 0x84
   87aaa:	46ba      	mov	sl, r7
   87aac:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87ab0:	4699      	mov	r9, r3
   87ab2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87ab6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87aba:	e006      	b.n	87aca <_svfprintf_r+0x1772>
   87abc:	2200      	movs	r2, #0
   87abe:	2300      	movs	r3, #0
   87ac0:	f004 ff38 	bl	8c934 <__aeabi_dcmpeq>
   87ac4:	f109 39ff 	add.w	r9, r9, #4294967295
   87ac8:	b9e8      	cbnz	r0, 87b06 <_svfprintf_r+0x17ae>
   87aca:	2200      	movs	r2, #0
   87acc:	4ba0      	ldr	r3, [pc, #640]	; (87d50 <_svfprintf_r+0x19f8>)
   87ace:	4630      	mov	r0, r6
   87ad0:	4639      	mov	r1, r7
   87ad2:	f004 fcc7 	bl	8c464 <__aeabi_dmul>
   87ad6:	460d      	mov	r5, r1
   87ad8:	4604      	mov	r4, r0
   87ada:	f004 ff73 	bl	8c9c4 <__aeabi_d2iz>
   87ade:	4680      	mov	r8, r0
   87ae0:	f004 fc56 	bl	8c390 <__aeabi_i2d>
   87ae4:	460b      	mov	r3, r1
   87ae6:	4602      	mov	r2, r0
   87ae8:	4629      	mov	r1, r5
   87aea:	4620      	mov	r0, r4
   87aec:	f004 fb02 	bl	8c0f4 <__aeabi_dsub>
   87af0:	f81b 3008 	ldrb.w	r3, [fp, r8]
   87af4:	f1b9 3fff 	cmp.w	r9, #4294967295
   87af8:	4655      	mov	r5, sl
   87afa:	4606      	mov	r6, r0
   87afc:	460f      	mov	r7, r1
   87afe:	464c      	mov	r4, r9
   87b00:	f80a 3b01 	strb.w	r3, [sl], #1
   87b04:	d1da      	bne.n	87abc <_svfprintf_r+0x1764>
   87b06:	4630      	mov	r0, r6
   87b08:	4639      	mov	r1, r7
   87b0a:	2200      	movs	r2, #0
   87b0c:	4b91      	ldr	r3, [pc, #580]	; (87d54 <_svfprintf_r+0x19fc>)
   87b0e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   87b12:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87b14:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87b18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   87b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87b20:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   87b24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87b28:	9f21      	ldr	r7, [sp, #132]	; 0x84
   87b2a:	f004 ff2b 	bl	8c984 <__aeabi_dcmpgt>
   87b2e:	2800      	cmp	r0, #0
   87b30:	d155      	bne.n	87bde <_svfprintf_r+0x1886>
   87b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87b36:	2200      	movs	r2, #0
   87b38:	4b86      	ldr	r3, [pc, #536]	; (87d54 <_svfprintf_r+0x19fc>)
   87b3a:	f004 fefb 	bl	8c934 <__aeabi_dcmpeq>
   87b3e:	b110      	cbz	r0, 87b46 <_svfprintf_r+0x17ee>
   87b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b42:	07db      	lsls	r3, r3, #31
   87b44:	d44b      	bmi.n	87bde <_svfprintf_r+0x1886>
   87b46:	2c00      	cmp	r4, #0
   87b48:	db08      	blt.n	87b5c <_svfprintf_r+0x1804>
   87b4a:	2230      	movs	r2, #48	; 0x30
   87b4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87b4e:	1c63      	adds	r3, r4, #1
   87b50:	440b      	add	r3, r1
   87b52:	f801 2b01 	strb.w	r2, [r1], #1
   87b56:	428b      	cmp	r3, r1
   87b58:	d1fb      	bne.n	87b52 <_svfprintf_r+0x17fa>
   87b5a:	910f      	str	r1, [sp, #60]	; 0x3c
   87b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87b5e:	9d07      	ldr	r5, [sp, #28]
   87b60:	1bdb      	subs	r3, r3, r7
   87b62:	9313      	str	r3, [sp, #76]	; 0x4c
   87b64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87b66:	9307      	str	r3, [sp, #28]
   87b68:	f7ff bb1d 	b.w	871a6 <_svfprintf_r+0xe4e>
   87b6c:	9508      	str	r5, [sp, #32]
   87b6e:	232d      	movs	r3, #45	; 0x2d
   87b70:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87b74:	931e      	str	r3, [sp, #120]	; 0x78
   87b76:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   87b7a:	910c      	str	r1, [sp, #48]	; 0x30
   87b7c:	930f      	str	r3, [sp, #60]	; 0x3c
   87b7e:	e76d      	b.n	87a5c <_svfprintf_r+0x1704>
   87b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87b84:	189a      	adds	r2, r3, r2
   87b86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87b88:	920c      	str	r2, [sp, #48]	; 0x30
   87b8a:	2b00      	cmp	r3, #0
   87b8c:	f340 811a 	ble.w	87dc4 <_svfprintf_r+0x1a6c>
   87b90:	2667      	movs	r6, #103	; 0x67
   87b92:	e729      	b.n	879e8 <_svfprintf_r+0x1690>
   87b94:	2300      	movs	r3, #0
   87b96:	9309      	str	r3, [sp, #36]	; 0x24
   87b98:	f7fe bc2b 	b.w	863f2 <_svfprintf_r+0x9a>
   87b9c:	4648      	mov	r0, r9
   87b9e:	4651      	mov	r1, sl
   87ba0:	aa2a      	add	r2, sp, #168	; 0xa8
   87ba2:	f003 ffc5 	bl	8bb30 <__ssprint_r>
   87ba6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87baa:	f7fe bdae 	b.w	8670a <_svfprintf_r+0x3b2>
   87bae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87bb0:	f7ff b95f 	b.w	86e72 <_svfprintf_r+0xb1a>
   87bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87bb6:	9d07      	ldr	r5, [sp, #28]
   87bb8:	18fc      	adds	r4, r7, r3
   87bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87bbc:	9307      	str	r3, [sp, #28]
   87bbe:	2347      	movs	r3, #71	; 0x47
   87bc0:	9308      	str	r3, [sp, #32]
   87bc2:	f7ff bae4 	b.w	8718e <_svfprintf_r+0xe36>
   87bc6:	46cb      	mov	fp, r9
   87bc8:	46d1      	mov	r9, sl
   87bca:	f7ff b80e 	b.w	86bea <_svfprintf_r+0x892>
   87bce:	46d1      	mov	r9, sl
   87bd0:	f7ff b80b 	b.w	86bea <_svfprintf_r+0x892>
   87bd4:	4b60      	ldr	r3, [pc, #384]	; (87d58 <_svfprintf_r+0x1a00>)
   87bd6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87bd8:	930f      	str	r3, [sp, #60]	; 0x3c
   87bda:	f7fe bfb7 	b.w	86b4c <_svfprintf_r+0x7f4>
   87bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87be0:	990c      	ldr	r1, [sp, #48]	; 0x30
   87be2:	9528      	str	r5, [sp, #160]	; 0xa0
   87be4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87be8:	7bc9      	ldrb	r1, [r1, #15]
   87bea:	428a      	cmp	r2, r1
   87bec:	f040 812a 	bne.w	87e44 <_svfprintf_r+0x1aec>
   87bf0:	2030      	movs	r0, #48	; 0x30
   87bf2:	f803 0c01 	strb.w	r0, [r3, #-1]
   87bf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87bf8:	1e5a      	subs	r2, r3, #1
   87bfa:	9228      	str	r2, [sp, #160]	; 0xa0
   87bfc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87c00:	4291      	cmp	r1, r2
   87c02:	d0f6      	beq.n	87bf2 <_svfprintf_r+0x189a>
   87c04:	2a39      	cmp	r2, #57	; 0x39
   87c06:	bf0b      	itete	eq
   87c08:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   87c0a:	3201      	addne	r2, #1
   87c0c:	7a92      	ldrbeq	r2, [r2, #10]
   87c0e:	b2d2      	uxtbne	r2, r2
   87c10:	f803 2c01 	strb.w	r2, [r3, #-1]
   87c14:	e7a2      	b.n	87b5c <_svfprintf_r+0x1804>
   87c16:	4648      	mov	r0, r9
   87c18:	1c59      	adds	r1, r3, #1
   87c1a:	f002 fe13 	bl	8a844 <_malloc_r>
   87c1e:	4607      	mov	r7, r0
   87c20:	2800      	cmp	r0, #0
   87c22:	f000 811d 	beq.w	87e60 <_svfprintf_r+0x1b08>
   87c26:	900d      	str	r0, [sp, #52]	; 0x34
   87c28:	e706      	b.n	87a38 <_svfprintf_r+0x16e0>
   87c2a:	2330      	movs	r3, #48	; 0x30
   87c2c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c30:	2378      	movs	r3, #120	; 0x78
   87c32:	e6f5      	b.n	87a20 <_svfprintf_r+0x16c8>
   87c34:	9b07      	ldr	r3, [sp, #28]
   87c36:	9308      	str	r3, [sp, #32]
   87c38:	f7ff b894 	b.w	86d64 <_svfprintf_r+0xa0c>
   87c3c:	464a      	mov	r2, r9
   87c3e:	46d1      	mov	r9, sl
   87c40:	4692      	mov	sl, r2
   87c42:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87c44:	3301      	adds	r3, #1
   87c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87c48:	442c      	add	r4, r5
   87c4a:	2b07      	cmp	r3, #7
   87c4c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c50:	e9c8 2500 	strd	r2, r5, [r8]
   87c54:	f77f a8b8 	ble.w	86dc8 <_svfprintf_r+0xa70>
   87c58:	4651      	mov	r1, sl
   87c5a:	4648      	mov	r0, r9
   87c5c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c5e:	f003 ff67 	bl	8bb30 <__ssprint_r>
   87c62:	2800      	cmp	r0, #0
   87c64:	f47e afc0 	bne.w	86be8 <_svfprintf_r+0x890>
   87c68:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87c6c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c70:	f7ff b8ac 	b.w	86dcc <_svfprintf_r+0xa74>
   87c74:	2b00      	cmp	r3, #0
   87c76:	bf08      	it	eq
   87c78:	2301      	moveq	r3, #1
   87c7a:	9309      	str	r3, [sp, #36]	; 0x24
   87c7c:	9b07      	ldr	r3, [sp, #28]
   87c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87c82:	9312      	str	r3, [sp, #72]	; 0x48
   87c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87c86:	2b00      	cmp	r3, #0
   87c88:	930c      	str	r3, [sp, #48]	; 0x30
   87c8a:	f2c0 80bd 	blt.w	87e08 <_svfprintf_r+0x1ab0>
   87c8e:	2402      	movs	r4, #2
   87c90:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87c92:	a828      	add	r0, sp, #160	; 0xa0
   87c94:	aa25      	add	r2, sp, #148	; 0x94
   87c96:	ab24      	add	r3, sp, #144	; 0x90
   87c98:	e9cd 2003 	strd	r2, r0, [sp, #12]
   87c9c:	e9cd 4500 	strd	r4, r5, [sp]
   87ca0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   87ca4:	9302      	str	r3, [sp, #8]
   87ca6:	4622      	mov	r2, r4
   87ca8:	462b      	mov	r3, r5
   87caa:	4648      	mov	r0, r9
   87cac:	911e      	str	r1, [sp, #120]	; 0x78
   87cae:	f001 f91b 	bl	88ee8 <_dtoa_r>
   87cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87cb4:	4607      	mov	r7, r0
   87cb6:	930f      	str	r3, [sp, #60]	; 0x3c
   87cb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87cba:	940c      	str	r4, [sp, #48]	; 0x30
   87cbc:	930d      	str	r3, [sp, #52]	; 0x34
   87cbe:	e64a      	b.n	87956 <_svfprintf_r+0x15fe>
   87cc0:	2300      	movs	r3, #0
   87cc2:	930d      	str	r3, [sp, #52]	; 0x34
   87cc4:	e753      	b.n	87b6e <_svfprintf_r+0x1816>
   87cc6:	2667      	movs	r6, #103	; 0x67
   87cc8:	991a      	ldr	r1, [sp, #104]	; 0x68
   87cca:	780b      	ldrb	r3, [r1, #0]
   87ccc:	2bff      	cmp	r3, #255	; 0xff
   87cce:	f000 80de 	beq.w	87e8e <_svfprintf_r+0x1b36>
   87cd2:	2400      	movs	r4, #0
   87cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87cd6:	4620      	mov	r0, r4
   87cd8:	e003      	b.n	87ce2 <_svfprintf_r+0x198a>
   87cda:	3001      	adds	r0, #1
   87cdc:	3101      	adds	r1, #1
   87cde:	2bff      	cmp	r3, #255	; 0xff
   87ce0:	d008      	beq.n	87cf4 <_svfprintf_r+0x199c>
   87ce2:	4293      	cmp	r3, r2
   87ce4:	da06      	bge.n	87cf4 <_svfprintf_r+0x199c>
   87ce6:	1ad2      	subs	r2, r2, r3
   87ce8:	784b      	ldrb	r3, [r1, #1]
   87cea:	2b00      	cmp	r3, #0
   87cec:	d1f5      	bne.n	87cda <_svfprintf_r+0x1982>
   87cee:	780b      	ldrb	r3, [r1, #0]
   87cf0:	3401      	adds	r4, #1
   87cf2:	e7f4      	b.n	87cde <_svfprintf_r+0x1986>
   87cf4:	911a      	str	r1, [sp, #104]	; 0x68
   87cf6:	9210      	str	r2, [sp, #64]	; 0x40
   87cf8:	9016      	str	r0, [sp, #88]	; 0x58
   87cfa:	9412      	str	r4, [sp, #72]	; 0x48
   87cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87d00:	990c      	ldr	r1, [sp, #48]	; 0x30
   87d02:	4413      	add	r3, r2
   87d04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   87d06:	fb02 1303 	mla	r3, r2, r3, r1
   87d0a:	930c      	str	r3, [sp, #48]	; 0x30
   87d0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87d10:	9308      	str	r3, [sp, #32]
   87d12:	f7ff bab6 	b.w	87282 <_svfprintf_r+0xf2a>
   87d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87d18:	2666      	movs	r6, #102	; 0x66
   87d1a:	18d3      	adds	r3, r2, r3
   87d1c:	4419      	add	r1, r3
   87d1e:	910c      	str	r1, [sp, #48]	; 0x30
   87d20:	e662      	b.n	879e8 <_svfprintf_r+0x1690>
   87d22:	f106 020f 	add.w	r2, r6, #15
   87d26:	2101      	movs	r1, #1
   87d28:	b2d2      	uxtb	r2, r2
   87d2a:	f7ff ba4f 	b.w	871cc <_svfprintf_r+0xe74>
   87d2e:	2900      	cmp	r1, #0
   87d30:	d167      	bne.n	87e02 <_svfprintf_r+0x1aaa>
   87d32:	2230      	movs	r2, #48	; 0x30
   87d34:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   87d38:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   87d3c:	3330      	adds	r3, #48	; 0x30
   87d3e:	f802 3b01 	strb.w	r3, [r2], #1
   87d42:	ab26      	add	r3, sp, #152	; 0x98
   87d44:	1ad3      	subs	r3, r2, r3
   87d46:	931b      	str	r3, [sp, #108]	; 0x6c
   87d48:	f7ff ba83 	b.w	87252 <_svfprintf_r+0xefa>
   87d4c:	0008cc14 	.word	0x0008cc14
   87d50:	40300000 	.word	0x40300000
   87d54:	3fe00000 	.word	0x3fe00000
   87d58:	0008cc44 	.word	0x0008cc44
   87d5c:	aa24      	add	r2, sp, #144	; 0x90
   87d5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87d60:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87d62:	f003 fe55 	bl	8ba10 <frexp>
   87d66:	2200      	movs	r2, #0
   87d68:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87d6c:	f004 fb7a 	bl	8c464 <__aeabi_dmul>
   87d70:	4604      	mov	r4, r0
   87d72:	460d      	mov	r5, r1
   87d74:	2200      	movs	r2, #0
   87d76:	2300      	movs	r3, #0
   87d78:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87d7c:	f004 fdda 	bl	8c934 <__aeabi_dcmpeq>
   87d80:	b108      	cbz	r0, 87d86 <_svfprintf_r+0x1a2e>
   87d82:	2301      	movs	r3, #1
   87d84:	9324      	str	r3, [sp, #144]	; 0x90
   87d86:	4b44      	ldr	r3, [pc, #272]	; (87e98 <_svfprintf_r+0x1b40>)
   87d88:	930c      	str	r3, [sp, #48]	; 0x30
   87d8a:	e684      	b.n	87a96 <_svfprintf_r+0x173e>
   87d8c:	2667      	movs	r6, #103	; 0x67
   87d8e:	e62e      	b.n	879ee <_svfprintf_r+0x1696>
   87d90:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87d94:	f7fe bcb9 	b.w	8670a <_svfprintf_r+0x3b2>
   87d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d9a:	930c      	str	r3, [sp, #48]	; 0x30
   87d9c:	e57c      	b.n	87898 <_svfprintf_r+0x1540>
   87d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87da0:	2003      	movs	r0, #3
   87da2:	2b00      	cmp	r3, #0
   87da4:	bfb8      	it	lt
   87da6:	232d      	movlt	r3, #45	; 0x2d
   87da8:	f04f 0100 	mov.w	r1, #0
   87dac:	bfba      	itte	lt
   87dae:	461a      	movlt	r2, r3
   87db0:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   87db4:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   87db8:	4f38      	ldr	r7, [pc, #224]	; (87e9c <_svfprintf_r+0x1b44>)
   87dba:	4b39      	ldr	r3, [pc, #228]	; (87ea0 <_svfprintf_r+0x1b48>)
   87dbc:	9008      	str	r0, [sp, #32]
   87dbe:	910d      	str	r1, [sp, #52]	; 0x34
   87dc0:	f7fe bce2 	b.w	86788 <_svfprintf_r+0x430>
   87dc4:	f1c3 0301 	rsb	r3, r3, #1
   87dc8:	441a      	add	r2, r3
   87dca:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87dce:	2667      	movs	r6, #103	; 0x67
   87dd0:	920c      	str	r2, [sp, #48]	; 0x30
   87dd2:	9308      	str	r3, [sp, #32]
   87dd4:	e56c      	b.n	878b0 <_svfprintf_r+0x1558>
   87dd6:	2200      	movs	r2, #0
   87dd8:	2300      	movs	r3, #0
   87dda:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ddc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87dde:	f004 fda9 	bl	8c934 <__aeabi_dcmpeq>
   87de2:	2800      	cmp	r0, #0
   87de4:	f47f addb 	bne.w	8799e <_svfprintf_r+0x1646>
   87de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87dea:	f1c3 0301 	rsb	r3, r3, #1
   87dee:	9324      	str	r3, [sp, #144]	; 0x90
   87df0:	e5d6      	b.n	879a0 <_svfprintf_r+0x1648>
   87df2:	992b      	ldr	r1, [sp, #172]	; 0xac
   87df4:	f7ff bb59 	b.w	874aa <_svfprintf_r+0x1152>
   87df8:	07e9      	lsls	r1, r5, #31
   87dfa:	f57f aa35 	bpl.w	87268 <_svfprintf_r+0xf10>
   87dfe:	f7ff ba2f 	b.w	87260 <_svfprintf_r+0xf08>
   87e02:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87e06:	e799      	b.n	87d3c <_svfprintf_r+0x19e4>
   87e08:	900d      	str	r0, [sp, #52]	; 0x34
   87e0a:	e6b0      	b.n	87b6e <_svfprintf_r+0x1816>
   87e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e0e:	f005 0501 	and.w	r5, r5, #1
   87e12:	4613      	mov	r3, r2
   87e14:	432b      	orrs	r3, r5
   87e16:	d104      	bne.n	87e22 <_svfprintf_r+0x1aca>
   87e18:	2301      	movs	r3, #1
   87e1a:	2666      	movs	r6, #102	; 0x66
   87e1c:	9308      	str	r3, [sp, #32]
   87e1e:	930c      	str	r3, [sp, #48]	; 0x30
   87e20:	e546      	b.n	878b0 <_svfprintf_r+0x1558>
   87e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87e24:	2666      	movs	r6, #102	; 0x66
   87e26:	3301      	adds	r3, #1
   87e28:	441a      	add	r2, r3
   87e2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87e2e:	920c      	str	r2, [sp, #48]	; 0x30
   87e30:	9308      	str	r3, [sp, #32]
   87e32:	e53d      	b.n	878b0 <_svfprintf_r+0x1558>
   87e34:	4b1b      	ldr	r3, [pc, #108]	; (87ea4 <_svfprintf_r+0x1b4c>)
   87e36:	930f      	str	r3, [sp, #60]	; 0x3c
   87e38:	f7ff bbe9 	b.w	8760e <_svfprintf_r+0x12b6>
   87e3c:	4a19      	ldr	r2, [pc, #100]	; (87ea4 <_svfprintf_r+0x1b4c>)
   87e3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e40:	920f      	str	r2, [sp, #60]	; 0x3c
   87e42:	e4b1      	b.n	877a8 <_svfprintf_r+0x1450>
   87e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e46:	e6dd      	b.n	87c04 <_svfprintf_r+0x18ac>
   87e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e4a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87e4e:	f853 0b04 	ldr.w	r0, [r3], #4
   87e52:	4693      	mov	fp, r2
   87e54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87e58:	9009      	str	r0, [sp, #36]	; 0x24
   87e5a:	930e      	str	r3, [sp, #56]	; 0x38
   87e5c:	f7fe bac7 	b.w	863ee <_svfprintf_r+0x96>
   87e60:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87e68:	f8aa 300c 	strh.w	r3, [sl, #12]
   87e6c:	f7fe bc4d 	b.w	8670a <_svfprintf_r+0x3b2>
   87e70:	4a0c      	ldr	r2, [pc, #48]	; (87ea4 <_svfprintf_r+0x1b4c>)
   87e72:	920f      	str	r2, [sp, #60]	; 0x3c
   87e74:	e6e6      	b.n	87c44 <_svfprintf_r+0x18ec>
   87e76:	230c      	movs	r3, #12
   87e78:	f04f 32ff 	mov.w	r2, #4294967295
   87e7c:	f8c9 3000 	str.w	r3, [r9]
   87e80:	920a      	str	r2, [sp, #40]	; 0x28
   87e82:	f7fe bc49 	b.w	86718 <_svfprintf_r+0x3c0>
   87e86:	2302      	movs	r3, #2
   87e88:	931b      	str	r3, [sp, #108]	; 0x6c
   87e8a:	f7ff b9e2 	b.w	87252 <_svfprintf_r+0xefa>
   87e8e:	2300      	movs	r3, #0
   87e90:	9312      	str	r3, [sp, #72]	; 0x48
   87e92:	9316      	str	r3, [sp, #88]	; 0x58
   87e94:	e732      	b.n	87cfc <_svfprintf_r+0x19a4>
   87e96:	bf00      	nop
   87e98:	0008cc00 	.word	0x0008cc00
   87e9c:	0008cbf8 	.word	0x0008cbf8
   87ea0:	0008cbfc 	.word	0x0008cbfc
   87ea4:	0008cc44 	.word	0x0008cc44

00087ea8 <__sprint_r.part.0>:
   87ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87eac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87eae:	4690      	mov	r8, r2
   87eb0:	049c      	lsls	r4, r3, #18
   87eb2:	d52d      	bpl.n	87f10 <__sprint_r.part.0+0x68>
   87eb4:	6893      	ldr	r3, [r2, #8]
   87eb6:	6812      	ldr	r2, [r2, #0]
   87eb8:	b343      	cbz	r3, 87f0c <__sprint_r.part.0+0x64>
   87eba:	468b      	mov	fp, r1
   87ebc:	4606      	mov	r6, r0
   87ebe:	f102 0908 	add.w	r9, r2, #8
   87ec2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   87ec6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   87eca:	d015      	beq.n	87ef8 <__sprint_r.part.0+0x50>
   87ecc:	2400      	movs	r4, #0
   87ece:	3d04      	subs	r5, #4
   87ed0:	e001      	b.n	87ed6 <__sprint_r.part.0+0x2e>
   87ed2:	42a7      	cmp	r7, r4
   87ed4:	d00e      	beq.n	87ef4 <__sprint_r.part.0+0x4c>
   87ed6:	465a      	mov	r2, fp
   87ed8:	4630      	mov	r0, r6
   87eda:	f855 1f04 	ldr.w	r1, [r5, #4]!
   87ede:	f002 f8fb 	bl	8a0d8 <_fputwc_r>
   87ee2:	1c43      	adds	r3, r0, #1
   87ee4:	f104 0401 	add.w	r4, r4, #1
   87ee8:	d1f3      	bne.n	87ed2 <__sprint_r.part.0+0x2a>
   87eea:	2300      	movs	r3, #0
   87eec:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ef4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87ef8:	f02a 0a03 	bic.w	sl, sl, #3
   87efc:	eba3 030a 	sub.w	r3, r3, sl
   87f00:	f8c8 3008 	str.w	r3, [r8, #8]
   87f04:	f109 0908 	add.w	r9, r9, #8
   87f08:	2b00      	cmp	r3, #0
   87f0a:	d1da      	bne.n	87ec2 <__sprint_r.part.0+0x1a>
   87f0c:	2000      	movs	r0, #0
   87f0e:	e7ec      	b.n	87eea <__sprint_r.part.0+0x42>
   87f10:	f002 fa6c 	bl	8a3ec <__sfvwrite_r>
   87f14:	2300      	movs	r3, #0
   87f16:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f1e:	bf00      	nop

00087f20 <_vfiprintf_r>:
   87f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f24:	b0bb      	sub	sp, #236	; 0xec
   87f26:	461c      	mov	r4, r3
   87f28:	4689      	mov	r9, r1
   87f2a:	4690      	mov	r8, r2
   87f2c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   87f30:	b118      	cbz	r0, 87f3a <_vfiprintf_r+0x1a>
   87f32:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87f34:	2b00      	cmp	r3, #0
   87f36:	f000 827a 	beq.w	8842e <_vfiprintf_r+0x50e>
   87f3a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87f3e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87f42:	07de      	lsls	r6, r3, #31
   87f44:	b28a      	uxth	r2, r1
   87f46:	d402      	bmi.n	87f4e <_vfiprintf_r+0x2e>
   87f48:	058d      	lsls	r5, r1, #22
   87f4a:	f140 851a 	bpl.w	88982 <_vfiprintf_r+0xa62>
   87f4e:	0490      	lsls	r0, r2, #18
   87f50:	d40a      	bmi.n	87f68 <_vfiprintf_r+0x48>
   87f52:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87f56:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   87f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87f5e:	f8a9 200c 	strh.w	r2, [r9, #12]
   87f62:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   87f66:	b292      	uxth	r2, r2
   87f68:	0711      	lsls	r1, r2, #28
   87f6a:	f140 80f6 	bpl.w	8815a <_vfiprintf_r+0x23a>
   87f6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   87f72:	2b00      	cmp	r3, #0
   87f74:	f000 80f1 	beq.w	8815a <_vfiprintf_r+0x23a>
   87f78:	f002 031a 	and.w	r3, r2, #26
   87f7c:	2b0a      	cmp	r3, #10
   87f7e:	f000 80fa 	beq.w	88176 <_vfiprintf_r+0x256>
   87f82:	2300      	movs	r3, #0
   87f84:	46cb      	mov	fp, r9
   87f86:	e9cd 3308 	strd	r3, r3, [sp, #32]
   87f8a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   87f8e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   87f92:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87f96:	9303      	str	r3, [sp, #12]
   87f98:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   87f9c:	f898 3000 	ldrb.w	r3, [r8]
   87fa0:	2b00      	cmp	r3, #0
   87fa2:	f000 81ed 	beq.w	88380 <_vfiprintf_r+0x460>
   87fa6:	4644      	mov	r4, r8
   87fa8:	e004      	b.n	87fb4 <_vfiprintf_r+0x94>
   87faa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87fae:	2b00      	cmp	r3, #0
   87fb0:	f000 8127 	beq.w	88202 <_vfiprintf_r+0x2e2>
   87fb4:	2b25      	cmp	r3, #37	; 0x25
   87fb6:	d1f8      	bne.n	87faa <_vfiprintf_r+0x8a>
   87fb8:	ebb4 0508 	subs.w	r5, r4, r8
   87fbc:	f040 8125 	bne.w	8820a <_vfiprintf_r+0x2ea>
   87fc0:	7823      	ldrb	r3, [r4, #0]
   87fc2:	2b00      	cmp	r3, #0
   87fc4:	f000 81dc 	beq.w	88380 <_vfiprintf_r+0x460>
   87fc8:	f04f 0200 	mov.w	r2, #0
   87fcc:	2300      	movs	r3, #0
   87fce:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   87fd2:	f04f 32ff 	mov.w	r2, #4294967295
   87fd6:	252b      	movs	r5, #43	; 0x2b
   87fd8:	461f      	mov	r7, r3
   87fda:	9302      	str	r3, [sp, #8]
   87fdc:	7863      	ldrb	r3, [r4, #1]
   87fde:	f104 0801 	add.w	r8, r4, #1
   87fe2:	9200      	str	r2, [sp, #0]
   87fe4:	f108 0801 	add.w	r8, r8, #1
   87fe8:	f1a3 0220 	sub.w	r2, r3, #32
   87fec:	2a5a      	cmp	r2, #90	; 0x5a
   87fee:	f200 8141 	bhi.w	88274 <_vfiprintf_r+0x354>
   87ff2:	e8df f012 	tbh	[pc, r2, lsl #1]
   87ff6:	0272      	.short	0x0272
   87ff8:	013f013f 	.word	0x013f013f
   87ffc:	013f026d 	.word	0x013f026d
   88000:	013f013f 	.word	0x013f013f
   88004:	013f024b 	.word	0x013f024b
   88008:	006a013f 	.word	0x006a013f
   8800c:	013f0227 	.word	0x013f0227
   88010:	02310222 	.word	0x02310222
   88014:	022c013f 	.word	0x022c013f
   88018:	005b005b 	.word	0x005b005b
   8801c:	005b005b 	.word	0x005b005b
   88020:	005b005b 	.word	0x005b005b
   88024:	005b005b 	.word	0x005b005b
   88028:	013f005b 	.word	0x013f005b
   8802c:	013f013f 	.word	0x013f013f
   88030:	013f013f 	.word	0x013f013f
   88034:	013f013f 	.word	0x013f013f
   88038:	013f013f 	.word	0x013f013f
   8803c:	007a020e 	.word	0x007a020e
   88040:	013f013f 	.word	0x013f013f
   88044:	013f013f 	.word	0x013f013f
   88048:	013f013f 	.word	0x013f013f
   8804c:	013f013f 	.word	0x013f013f
   88050:	013f013f 	.word	0x013f013f
   88054:	013f00d7 	.word	0x013f00d7
   88058:	013f013f 	.word	0x013f013f
   8805c:	013f01f2 	.word	0x013f01f2
   88060:	013f0297 	.word	0x013f0297
   88064:	0500013f 	.word	0x0500013f
   88068:	013f013f 	.word	0x013f013f
   8806c:	013f013f 	.word	0x013f013f
   88070:	013f013f 	.word	0x013f013f
   88074:	013f013f 	.word	0x013f013f
   88078:	013f013f 	.word	0x013f013f
   8807c:	007c020e 	.word	0x007c020e
   88080:	013f013f 	.word	0x013f013f
   88084:	028a013f 	.word	0x028a013f
   88088:	0075007c 	.word	0x0075007c
   8808c:	027d013f 	.word	0x027d013f
   88090:	02b6013f 	.word	0x02b6013f
   88094:	02a600d9 	.word	0x02a600d9
   88098:	013f0075 	.word	0x013f0075
   8809c:	007201f2 	.word	0x007201f2
   880a0:	013f04fe 	.word	0x013f04fe
   880a4:	051c013f 	.word	0x051c013f
   880a8:	0072013f 	.word	0x0072013f
   880ac:	2100      	movs	r1, #0
   880ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   880b2:	f818 3b01 	ldrb.w	r3, [r8], #1
   880b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   880ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   880be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   880c2:	2a09      	cmp	r2, #9
   880c4:	d9f5      	bls.n	880b2 <_vfiprintf_r+0x192>
   880c6:	9102      	str	r1, [sp, #8]
   880c8:	e78e      	b.n	87fe8 <_vfiprintf_r+0xc8>
   880ca:	9b04      	ldr	r3, [sp, #16]
   880cc:	f853 2b04 	ldr.w	r2, [r3], #4
   880d0:	2a00      	cmp	r2, #0
   880d2:	9202      	str	r2, [sp, #8]
   880d4:	9304      	str	r3, [sp, #16]
   880d6:	f2c0 81ad 	blt.w	88434 <_vfiprintf_r+0x514>
   880da:	f898 3000 	ldrb.w	r3, [r8]
   880de:	e781      	b.n	87fe4 <_vfiprintf_r+0xc4>
   880e0:	f898 3000 	ldrb.w	r3, [r8]
   880e4:	f047 0720 	orr.w	r7, r7, #32
   880e8:	e77c      	b.n	87fe4 <_vfiprintf_r+0xc4>
   880ea:	f047 0710 	orr.w	r7, r7, #16
   880ee:	06bc      	lsls	r4, r7, #26
   880f0:	f140 8158 	bpl.w	883a4 <_vfiprintf_r+0x484>
   880f4:	9c04      	ldr	r4, [sp, #16]
   880f6:	3407      	adds	r4, #7
   880f8:	f024 0307 	bic.w	r3, r4, #7
   880fc:	4619      	mov	r1, r3
   880fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88102:	4614      	mov	r4, r2
   88104:	461d      	mov	r5, r3
   88106:	9104      	str	r1, [sp, #16]
   88108:	2a00      	cmp	r2, #0
   8810a:	f173 0300 	sbcs.w	r3, r3, #0
   8810e:	f2c0 841e 	blt.w	8894e <_vfiprintf_r+0xa2e>
   88112:	9b00      	ldr	r3, [sp, #0]
   88114:	3301      	adds	r3, #1
   88116:	f000 84f0 	beq.w	88afa <_vfiprintf_r+0xbda>
   8811a:	ea54 0305 	orrs.w	r3, r4, r5
   8811e:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88122:	f000 83fc 	beq.w	8891e <_vfiprintf_r+0x9fe>
   88126:	2d00      	cmp	r5, #0
   88128:	bf08      	it	eq
   8812a:	2c0a      	cmpeq	r4, #10
   8812c:	f080 84a9 	bcs.w	88a82 <_vfiprintf_r+0xb62>
   88130:	2301      	movs	r3, #1
   88132:	464f      	mov	r7, r9
   88134:	3430      	adds	r4, #48	; 0x30
   88136:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8813a:	9301      	str	r3, [sp, #4]
   8813c:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88140:	e9dd 2100 	ldrd	r2, r1, [sp]
   88144:	428a      	cmp	r2, r1
   88146:	bfb8      	it	lt
   88148:	460a      	movlt	r2, r1
   8814a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8814e:	4615      	mov	r5, r2
   88150:	2b00      	cmp	r3, #0
   88152:	f000 809d 	beq.w	88290 <_vfiprintf_r+0x370>
   88156:	3501      	adds	r5, #1
   88158:	e09a      	b.n	88290 <_vfiprintf_r+0x370>
   8815a:	4649      	mov	r1, r9
   8815c:	9805      	ldr	r0, [sp, #20]
   8815e:	f000 fdb9 	bl	88cd4 <__swsetup_r>
   88162:	2800      	cmp	r0, #0
   88164:	f040 854a 	bne.w	88bfc <_vfiprintf_r+0xcdc>
   88168:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   8816c:	f002 031a 	and.w	r3, r2, #26
   88170:	2b0a      	cmp	r3, #10
   88172:	f47f af06 	bne.w	87f82 <_vfiprintf_r+0x62>
   88176:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8817a:	2b00      	cmp	r3, #0
   8817c:	f6ff af01 	blt.w	87f82 <_vfiprintf_r+0x62>
   88180:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88184:	07de      	lsls	r6, r3, #31
   88186:	d402      	bmi.n	8818e <_vfiprintf_r+0x26e>
   88188:	0595      	lsls	r5, r2, #22
   8818a:	f140 850e 	bpl.w	88baa <_vfiprintf_r+0xc8a>
   8818e:	4623      	mov	r3, r4
   88190:	4642      	mov	r2, r8
   88192:	4649      	mov	r1, r9
   88194:	9805      	ldr	r0, [sp, #20]
   88196:	f000 fd59 	bl	88c4c <__sbprintf>
   8819a:	9003      	str	r0, [sp, #12]
   8819c:	9803      	ldr	r0, [sp, #12]
   8819e:	b03b      	add	sp, #236	; 0xec
   881a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   881a4:	f047 0710 	orr.w	r7, r7, #16
   881a8:	06b8      	lsls	r0, r7, #26
   881aa:	9c04      	ldr	r4, [sp, #16]
   881ac:	f140 8109 	bpl.w	883c2 <_vfiprintf_r+0x4a2>
   881b0:	3407      	adds	r4, #7
   881b2:	f024 0307 	bic.w	r3, r4, #7
   881b6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   881ba:	9304      	str	r3, [sp, #16]
   881bc:	2300      	movs	r3, #0
   881be:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   881c2:	f04f 0200 	mov.w	r2, #0
   881c6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   881ca:	9a00      	ldr	r2, [sp, #0]
   881cc:	4611      	mov	r1, r2
   881ce:	3101      	adds	r1, #1
   881d0:	f000 81db 	beq.w	8858a <_vfiprintf_r+0x66a>
   881d4:	ea54 0105 	orrs.w	r1, r4, r5
   881d8:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   881dc:	f040 81d4 	bne.w	88588 <_vfiprintf_r+0x668>
   881e0:	2a00      	cmp	r2, #0
   881e2:	f040 848d 	bne.w	88b00 <_vfiprintf_r+0xbe0>
   881e6:	2b00      	cmp	r3, #0
   881e8:	f040 839e 	bne.w	88928 <_vfiprintf_r+0xa08>
   881ec:	f019 0301 	ands.w	r3, r9, #1
   881f0:	9301      	str	r3, [sp, #4]
   881f2:	f000 83c3 	beq.w	8897c <_vfiprintf_r+0xa5c>
   881f6:	2330      	movs	r3, #48	; 0x30
   881f8:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   881fc:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   88200:	e79e      	b.n	88140 <_vfiprintf_r+0x220>
   88202:	ebb4 0508 	subs.w	r5, r4, r8
   88206:	f000 80bb 	beq.w	88380 <_vfiprintf_r+0x460>
   8820a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8820e:	3301      	adds	r3, #1
   88210:	442a      	add	r2, r5
   88212:	2b07      	cmp	r3, #7
   88214:	e9ca 8500 	strd	r8, r5, [sl]
   88218:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   8821c:	dc06      	bgt.n	8822c <_vfiprintf_r+0x30c>
   8821e:	f10a 0a08 	add.w	sl, sl, #8
   88222:	9a03      	ldr	r2, [sp, #12]
   88224:	7823      	ldrb	r3, [r4, #0]
   88226:	442a      	add	r2, r5
   88228:	9203      	str	r2, [sp, #12]
   8822a:	e6ca      	b.n	87fc2 <_vfiprintf_r+0xa2>
   8822c:	2a00      	cmp	r2, #0
   8822e:	f000 8372 	beq.w	88916 <_vfiprintf_r+0x9f6>
   88232:	4659      	mov	r1, fp
   88234:	9805      	ldr	r0, [sp, #20]
   88236:	aa0e      	add	r2, sp, #56	; 0x38
   88238:	f7ff fe36 	bl	87ea8 <__sprint_r.part.0>
   8823c:	b950      	cbnz	r0, 88254 <_vfiprintf_r+0x334>
   8823e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88242:	e7ee      	b.n	88222 <_vfiprintf_r+0x302>
   88244:	4659      	mov	r1, fp
   88246:	9805      	ldr	r0, [sp, #20]
   88248:	aa0e      	add	r2, sp, #56	; 0x38
   8824a:	f7ff fe2d 	bl	87ea8 <__sprint_r.part.0>
   8824e:	2800      	cmp	r0, #0
   88250:	f000 808d 	beq.w	8836e <_vfiprintf_r+0x44e>
   88254:	46d9      	mov	r9, fp
   88256:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8825a:	f013 0f01 	tst.w	r3, #1
   8825e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88262:	f000 8095 	beq.w	88390 <_vfiprintf_r+0x470>
   88266:	065b      	lsls	r3, r3, #25
   88268:	f100 84d4 	bmi.w	88c14 <_vfiprintf_r+0xcf4>
   8826c:	9803      	ldr	r0, [sp, #12]
   8826e:	b03b      	add	sp, #236	; 0xec
   88270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88274:	2b00      	cmp	r3, #0
   88276:	f000 8083 	beq.w	88380 <_vfiprintf_r+0x460>
   8827a:	2501      	movs	r5, #1
   8827c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88280:	f04f 0300 	mov.w	r3, #0
   88284:	9501      	str	r5, [sp, #4]
   88286:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8828a:	ae21      	add	r6, sp, #132	; 0x84
   8828c:	2300      	movs	r3, #0
   8828e:	9300      	str	r3, [sp, #0]
   88290:	f017 0302 	ands.w	r3, r7, #2
   88294:	9307      	str	r3, [sp, #28]
   88296:	bf18      	it	ne
   88298:	3502      	addne	r5, #2
   8829a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8829e:	9306      	str	r3, [sp, #24]
   882a0:	d104      	bne.n	882ac <_vfiprintf_r+0x38c>
   882a2:	9b02      	ldr	r3, [sp, #8]
   882a4:	1b5c      	subs	r4, r3, r5
   882a6:	2c00      	cmp	r4, #0
   882a8:	f300 8274 	bgt.w	88794 <_vfiprintf_r+0x874>
   882ac:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   882b0:	1c48      	adds	r0, r1, #1
   882b2:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   882b6:	b174      	cbz	r4, 882d6 <_vfiprintf_r+0x3b6>
   882b8:	2101      	movs	r1, #1
   882ba:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   882be:	440a      	add	r2, r1
   882c0:	2807      	cmp	r0, #7
   882c2:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   882c6:	e9ca 4100 	strd	r4, r1, [sl]
   882ca:	f300 8246 	bgt.w	8875a <_vfiprintf_r+0x83a>
   882ce:	4601      	mov	r1, r0
   882d0:	f10a 0a08 	add.w	sl, sl, #8
   882d4:	3001      	adds	r0, #1
   882d6:	9b07      	ldr	r3, [sp, #28]
   882d8:	b1c3      	cbz	r3, 8830c <_vfiprintf_r+0x3ec>
   882da:	2102      	movs	r1, #2
   882dc:	ab0d      	add	r3, sp, #52	; 0x34
   882de:	440a      	add	r2, r1
   882e0:	2807      	cmp	r0, #7
   882e2:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   882e6:	e9ca 3100 	strd	r3, r1, [sl]
   882ea:	f340 824e 	ble.w	8878a <_vfiprintf_r+0x86a>
   882ee:	2a00      	cmp	r2, #0
   882f0:	f000 830c 	beq.w	8890c <_vfiprintf_r+0x9ec>
   882f4:	4659      	mov	r1, fp
   882f6:	9805      	ldr	r0, [sp, #20]
   882f8:	aa0e      	add	r2, sp, #56	; 0x38
   882fa:	f7ff fdd5 	bl	87ea8 <__sprint_r.part.0>
   882fe:	2800      	cmp	r0, #0
   88300:	d1a8      	bne.n	88254 <_vfiprintf_r+0x334>
   88302:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88306:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8830a:	1c48      	adds	r0, r1, #1
   8830c:	9b06      	ldr	r3, [sp, #24]
   8830e:	2b80      	cmp	r3, #128	; 0x80
   88310:	f000 817e 	beq.w	88610 <_vfiprintf_r+0x6f0>
   88314:	e9dd 3400 	ldrd	r3, r4, [sp]
   88318:	1b1c      	subs	r4, r3, r4
   8831a:	2c00      	cmp	r4, #0
   8831c:	f300 81d3 	bgt.w	886c6 <_vfiprintf_r+0x7a6>
   88320:	9b01      	ldr	r3, [sp, #4]
   88322:	2807      	cmp	r0, #7
   88324:	441a      	add	r2, r3
   88326:	e9ca 6300 	strd	r6, r3, [sl]
   8832a:	9210      	str	r2, [sp, #64]	; 0x40
   8832c:	900f      	str	r0, [sp, #60]	; 0x3c
   8832e:	f340 816c 	ble.w	8860a <_vfiprintf_r+0x6ea>
   88332:	2a00      	cmp	r2, #0
   88334:	f000 8276 	beq.w	88824 <_vfiprintf_r+0x904>
   88338:	4659      	mov	r1, fp
   8833a:	9805      	ldr	r0, [sp, #20]
   8833c:	aa0e      	add	r2, sp, #56	; 0x38
   8833e:	f7ff fdb3 	bl	87ea8 <__sprint_r.part.0>
   88342:	2800      	cmp	r0, #0
   88344:	d186      	bne.n	88254 <_vfiprintf_r+0x334>
   88346:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88348:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8834c:	0779      	lsls	r1, r7, #29
   8834e:	d504      	bpl.n	8835a <_vfiprintf_r+0x43a>
   88350:	9b02      	ldr	r3, [sp, #8]
   88352:	1b5c      	subs	r4, r3, r5
   88354:	2c00      	cmp	r4, #0
   88356:	f300 826e 	bgt.w	88836 <_vfiprintf_r+0x916>
   8835a:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8835e:	42a9      	cmp	r1, r5
   88360:	bfac      	ite	ge
   88362:	185b      	addge	r3, r3, r1
   88364:	195b      	addlt	r3, r3, r5
   88366:	9303      	str	r3, [sp, #12]
   88368:	2a00      	cmp	r2, #0
   8836a:	f47f af6b 	bne.w	88244 <_vfiprintf_r+0x324>
   8836e:	2300      	movs	r3, #0
   88370:	930f      	str	r3, [sp, #60]	; 0x3c
   88372:	f898 3000 	ldrb.w	r3, [r8]
   88376:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8837a:	2b00      	cmp	r3, #0
   8837c:	f47f ae13 	bne.w	87fa6 <_vfiprintf_r+0x86>
   88380:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88382:	46d9      	mov	r9, fp
   88384:	2b00      	cmp	r3, #0
   88386:	f040 8426 	bne.w	88bd6 <_vfiprintf_r+0xcb6>
   8838a:	2300      	movs	r3, #0
   8838c:	930f      	str	r3, [sp, #60]	; 0x3c
   8838e:	e762      	b.n	88256 <_vfiprintf_r+0x336>
   88390:	059a      	lsls	r2, r3, #22
   88392:	f53f af68 	bmi.w	88266 <_vfiprintf_r+0x346>
   88396:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8839a:	f002 f9d1 	bl	8a740 <__retarget_lock_release_recursive>
   8839e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   883a2:	e760      	b.n	88266 <_vfiprintf_r+0x346>
   883a4:	9b04      	ldr	r3, [sp, #16]
   883a6:	06f8      	lsls	r0, r7, #27
   883a8:	f853 4b04 	ldr.w	r4, [r3], #4
   883ac:	f100 8308 	bmi.w	889c0 <_vfiprintf_r+0xaa0>
   883b0:	0679      	lsls	r1, r7, #25
   883b2:	f140 8302 	bpl.w	889ba <_vfiprintf_r+0xa9a>
   883b6:	b224      	sxth	r4, r4
   883b8:	17e5      	asrs	r5, r4, #31
   883ba:	9304      	str	r3, [sp, #16]
   883bc:	4622      	mov	r2, r4
   883be:	462b      	mov	r3, r5
   883c0:	e6a2      	b.n	88108 <_vfiprintf_r+0x1e8>
   883c2:	f854 3b04 	ldr.w	r3, [r4], #4
   883c6:	06f9      	lsls	r1, r7, #27
   883c8:	9404      	str	r4, [sp, #16]
   883ca:	f100 82f3 	bmi.w	889b4 <_vfiprintf_r+0xa94>
   883ce:	067a      	lsls	r2, r7, #25
   883d0:	f140 82ed 	bpl.w	889ae <_vfiprintf_r+0xa8e>
   883d4:	2500      	movs	r5, #0
   883d6:	b29c      	uxth	r4, r3
   883d8:	e6f0      	b.n	881bc <_vfiprintf_r+0x29c>
   883da:	f04f 0300 	mov.w	r3, #0
   883de:	9c04      	ldr	r4, [sp, #16]
   883e0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   883e4:	f854 6b04 	ldr.w	r6, [r4], #4
   883e8:	2e00      	cmp	r6, #0
   883ea:	f000 8397 	beq.w	88b1c <_vfiprintf_r+0xbfc>
   883ee:	9a00      	ldr	r2, [sp, #0]
   883f0:	4613      	mov	r3, r2
   883f2:	3301      	adds	r3, #1
   883f4:	f000 831e 	beq.w	88a34 <_vfiprintf_r+0xb14>
   883f8:	2100      	movs	r1, #0
   883fa:	4630      	mov	r0, r6
   883fc:	f002 fce6 	bl	8adcc <memchr>
   88400:	2800      	cmp	r0, #0
   88402:	f000 83d8 	beq.w	88bb6 <_vfiprintf_r+0xc96>
   88406:	1b83      	subs	r3, r0, r6
   88408:	9301      	str	r3, [sp, #4]
   8840a:	2300      	movs	r3, #0
   8840c:	9404      	str	r4, [sp, #16]
   8840e:	9300      	str	r3, [sp, #0]
   88410:	e696      	b.n	88140 <_vfiprintf_r+0x220>
   88412:	2501      	movs	r5, #1
   88414:	f04f 0200 	mov.w	r2, #0
   88418:	9c04      	ldr	r4, [sp, #16]
   8841a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8841e:	f854 3b04 	ldr.w	r3, [r4], #4
   88422:	9501      	str	r5, [sp, #4]
   88424:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88428:	9404      	str	r4, [sp, #16]
   8842a:	ae21      	add	r6, sp, #132	; 0x84
   8842c:	e72e      	b.n	8828c <_vfiprintf_r+0x36c>
   8842e:	f001 fdb3 	bl	89f98 <__sinit>
   88432:	e582      	b.n	87f3a <_vfiprintf_r+0x1a>
   88434:	9b02      	ldr	r3, [sp, #8]
   88436:	425b      	negs	r3, r3
   88438:	9302      	str	r3, [sp, #8]
   8843a:	f898 3000 	ldrb.w	r3, [r8]
   8843e:	f047 0704 	orr.w	r7, r7, #4
   88442:	e5cf      	b.n	87fe4 <_vfiprintf_r+0xc4>
   88444:	f898 3000 	ldrb.w	r3, [r8]
   88448:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   8844c:	e5ca      	b.n	87fe4 <_vfiprintf_r+0xc4>
   8844e:	f898 3000 	ldrb.w	r3, [r8]
   88452:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88456:	e5c5      	b.n	87fe4 <_vfiprintf_r+0xc4>
   88458:	4641      	mov	r1, r8
   8845a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8845e:	2b2a      	cmp	r3, #42	; 0x2a
   88460:	f000 83dd 	beq.w	88c1e <_vfiprintf_r+0xcfe>
   88464:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88468:	2a09      	cmp	r2, #9
   8846a:	4688      	mov	r8, r1
   8846c:	bf98      	it	ls
   8846e:	2100      	movls	r1, #0
   88470:	f200 83ad 	bhi.w	88bce <_vfiprintf_r+0xcae>
   88474:	f818 3b01 	ldrb.w	r3, [r8], #1
   88478:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8847c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88480:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88484:	2a09      	cmp	r2, #9
   88486:	d9f5      	bls.n	88474 <_vfiprintf_r+0x554>
   88488:	9100      	str	r1, [sp, #0]
   8848a:	e5ad      	b.n	87fe8 <_vfiprintf_r+0xc8>
   8848c:	9c05      	ldr	r4, [sp, #20]
   8848e:	4620      	mov	r0, r4
   88490:	f002 f94c 	bl	8a72c <_localeconv_r>
   88494:	6843      	ldr	r3, [r0, #4]
   88496:	4618      	mov	r0, r3
   88498:	930a      	str	r3, [sp, #40]	; 0x28
   8849a:	f7fd fefb 	bl	86294 <strlen>
   8849e:	4603      	mov	r3, r0
   884a0:	4620      	mov	r0, r4
   884a2:	930b      	str	r3, [sp, #44]	; 0x2c
   884a4:	461c      	mov	r4, r3
   884a6:	f002 f941 	bl	8a72c <_localeconv_r>
   884aa:	6882      	ldr	r2, [r0, #8]
   884ac:	9209      	str	r2, [sp, #36]	; 0x24
   884ae:	2c00      	cmp	r4, #0
   884b0:	f43f ae13 	beq.w	880da <_vfiprintf_r+0x1ba>
   884b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   884b6:	2b00      	cmp	r3, #0
   884b8:	f43f ae0f 	beq.w	880da <_vfiprintf_r+0x1ba>
   884bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   884be:	781b      	ldrb	r3, [r3, #0]
   884c0:	2b00      	cmp	r3, #0
   884c2:	f43f ae0a 	beq.w	880da <_vfiprintf_r+0x1ba>
   884c6:	f898 3000 	ldrb.w	r3, [r8]
   884ca:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   884ce:	e589      	b.n	87fe4 <_vfiprintf_r+0xc4>
   884d0:	f898 3000 	ldrb.w	r3, [r8]
   884d4:	f047 0701 	orr.w	r7, r7, #1
   884d8:	e584      	b.n	87fe4 <_vfiprintf_r+0xc4>
   884da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   884de:	2b00      	cmp	r3, #0
   884e0:	f47f adfb 	bne.w	880da <_vfiprintf_r+0x1ba>
   884e4:	2320      	movs	r3, #32
   884e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   884ea:	f898 3000 	ldrb.w	r3, [r8]
   884ee:	e579      	b.n	87fe4 <_vfiprintf_r+0xc4>
   884f0:	f898 3000 	ldrb.w	r3, [r8]
   884f4:	2b6c      	cmp	r3, #108	; 0x6c
   884f6:	bf03      	ittte	eq
   884f8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   884fc:	f047 0720 	orreq.w	r7, r7, #32
   88500:	f108 0801 	addeq.w	r8, r8, #1
   88504:	f047 0710 	orrne.w	r7, r7, #16
   88508:	e56c      	b.n	87fe4 <_vfiprintf_r+0xc4>
   8850a:	f898 3000 	ldrb.w	r3, [r8]
   8850e:	2b68      	cmp	r3, #104	; 0x68
   88510:	bf03      	ittte	eq
   88512:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88516:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   8851a:	f108 0801 	addeq.w	r8, r8, #1
   8851e:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88522:	e55f      	b.n	87fe4 <_vfiprintf_r+0xc4>
   88524:	f047 0910 	orr.w	r9, r7, #16
   88528:	f019 0f20 	tst.w	r9, #32
   8852c:	9c04      	ldr	r4, [sp, #16]
   8852e:	f000 8200 	beq.w	88932 <_vfiprintf_r+0xa12>
   88532:	3407      	adds	r4, #7
   88534:	f024 0307 	bic.w	r3, r4, #7
   88538:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8853c:	9304      	str	r3, [sp, #16]
   8853e:	2301      	movs	r3, #1
   88540:	e63f      	b.n	881c2 <_vfiprintf_r+0x2a2>
   88542:	f647 0330 	movw	r3, #30768	; 0x7830
   88546:	9c04      	ldr	r4, [sp, #16]
   88548:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   8854c:	f854 2b04 	ldr.w	r2, [r4], #4
   88550:	4bbf      	ldr	r3, [pc, #764]	; (88850 <_vfiprintf_r+0x930>)
   88552:	9404      	str	r4, [sp, #16]
   88554:	9308      	str	r3, [sp, #32]
   88556:	4614      	mov	r4, r2
   88558:	2500      	movs	r5, #0
   8855a:	2302      	movs	r3, #2
   8855c:	f047 0902 	orr.w	r9, r7, #2
   88560:	e62f      	b.n	881c2 <_vfiprintf_r+0x2a2>
   88562:	06bb      	lsls	r3, r7, #26
   88564:	f100 8232 	bmi.w	889cc <_vfiprintf_r+0xaac>
   88568:	06fe      	lsls	r6, r7, #27
   8856a:	f100 82cf 	bmi.w	88b0c <_vfiprintf_r+0xbec>
   8856e:	067d      	lsls	r5, r7, #25
   88570:	f100 8301 	bmi.w	88b76 <_vfiprintf_r+0xc56>
   88574:	05bc      	lsls	r4, r7, #22
   88576:	f140 82c9 	bpl.w	88b0c <_vfiprintf_r+0xbec>
   8857a:	9c04      	ldr	r4, [sp, #16]
   8857c:	9a03      	ldr	r2, [sp, #12]
   8857e:	f854 3b04 	ldr.w	r3, [r4], #4
   88582:	701a      	strb	r2, [r3, #0]
   88584:	9404      	str	r4, [sp, #16]
   88586:	e509      	b.n	87f9c <_vfiprintf_r+0x7c>
   88588:	46b9      	mov	r9, r7
   8858a:	2b01      	cmp	r3, #1
   8858c:	f43f adcb 	beq.w	88126 <_vfiprintf_r+0x206>
   88590:	2b02      	cmp	r3, #2
   88592:	ae3a      	add	r6, sp, #232	; 0xe8
   88594:	d113      	bne.n	885be <_vfiprintf_r+0x69e>
   88596:	9808      	ldr	r0, [sp, #32]
   88598:	0923      	lsrs	r3, r4, #4
   8859a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8859e:	0929      	lsrs	r1, r5, #4
   885a0:	f004 020f 	and.w	r2, r4, #15
   885a4:	460d      	mov	r5, r1
   885a6:	461c      	mov	r4, r3
   885a8:	5c83      	ldrb	r3, [r0, r2]
   885aa:	f806 3d01 	strb.w	r3, [r6, #-1]!
   885ae:	ea54 0305 	orrs.w	r3, r4, r5
   885b2:	d1f1      	bne.n	88598 <_vfiprintf_r+0x678>
   885b4:	ab3a      	add	r3, sp, #232	; 0xe8
   885b6:	1b9b      	subs	r3, r3, r6
   885b8:	464f      	mov	r7, r9
   885ba:	9301      	str	r3, [sp, #4]
   885bc:	e5c0      	b.n	88140 <_vfiprintf_r+0x220>
   885be:	08e2      	lsrs	r2, r4, #3
   885c0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   885c4:	08e9      	lsrs	r1, r5, #3
   885c6:	f004 0307 	and.w	r3, r4, #7
   885ca:	460d      	mov	r5, r1
   885cc:	4614      	mov	r4, r2
   885ce:	3330      	adds	r3, #48	; 0x30
   885d0:	ea54 0105 	orrs.w	r1, r4, r5
   885d4:	4632      	mov	r2, r6
   885d6:	f806 3d01 	strb.w	r3, [r6, #-1]!
   885da:	d1f0      	bne.n	885be <_vfiprintf_r+0x69e>
   885dc:	f019 0f01 	tst.w	r9, #1
   885e0:	d0e8      	beq.n	885b4 <_vfiprintf_r+0x694>
   885e2:	2b30      	cmp	r3, #48	; 0x30
   885e4:	d0e6      	beq.n	885b4 <_vfiprintf_r+0x694>
   885e6:	2330      	movs	r3, #48	; 0x30
   885e8:	3a02      	subs	r2, #2
   885ea:	f806 3c01 	strb.w	r3, [r6, #-1]
   885ee:	ab3a      	add	r3, sp, #232	; 0xe8
   885f0:	1a9b      	subs	r3, r3, r2
   885f2:	464f      	mov	r7, r9
   885f4:	4616      	mov	r6, r2
   885f6:	9301      	str	r3, [sp, #4]
   885f8:	e5a2      	b.n	88140 <_vfiprintf_r+0x220>
   885fa:	2301      	movs	r3, #1
   885fc:	9a01      	ldr	r2, [sp, #4]
   885fe:	930f      	str	r3, [sp, #60]	; 0x3c
   88600:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88604:	9212      	str	r2, [sp, #72]	; 0x48
   88606:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8860a:	f10a 0a08 	add.w	sl, sl, #8
   8860e:	e69d      	b.n	8834c <_vfiprintf_r+0x42c>
   88610:	9b02      	ldr	r3, [sp, #8]
   88612:	1b5c      	subs	r4, r3, r5
   88614:	2c00      	cmp	r4, #0
   88616:	f77f ae7d 	ble.w	88314 <_vfiprintf_r+0x3f4>
   8861a:	2c10      	cmp	r4, #16
   8861c:	f340 82ea 	ble.w	88bf4 <_vfiprintf_r+0xcd4>
   88620:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88854 <_vfiprintf_r+0x934>
   88624:	4650      	mov	r0, sl
   88626:	9706      	str	r7, [sp, #24]
   88628:	46b2      	mov	sl, r6
   8862a:	464e      	mov	r6, r9
   8862c:	46c1      	mov	r9, r8
   8862e:	46a8      	mov	r8, r5
   88630:	9d05      	ldr	r5, [sp, #20]
   88632:	e006      	b.n	88642 <_vfiprintf_r+0x722>
   88634:	f101 0c02 	add.w	ip, r1, #2
   88638:	4619      	mov	r1, r3
   8863a:	3008      	adds	r0, #8
   8863c:	3c10      	subs	r4, #16
   8863e:	2c10      	cmp	r4, #16
   88640:	dd1a      	ble.n	88678 <_vfiprintf_r+0x758>
   88642:	2710      	movs	r7, #16
   88644:	1c4b      	adds	r3, r1, #1
   88646:	3210      	adds	r2, #16
   88648:	2b07      	cmp	r3, #7
   8864a:	9210      	str	r2, [sp, #64]	; 0x40
   8864c:	6006      	str	r6, [r0, #0]
   8864e:	6047      	str	r7, [r0, #4]
   88650:	930f      	str	r3, [sp, #60]	; 0x3c
   88652:	ddef      	ble.n	88634 <_vfiprintf_r+0x714>
   88654:	2a00      	cmp	r2, #0
   88656:	d07b      	beq.n	88750 <_vfiprintf_r+0x830>
   88658:	4659      	mov	r1, fp
   8865a:	4628      	mov	r0, r5
   8865c:	aa0e      	add	r2, sp, #56	; 0x38
   8865e:	f7ff fc23 	bl	87ea8 <__sprint_r.part.0>
   88662:	2800      	cmp	r0, #0
   88664:	f47f adf6 	bne.w	88254 <_vfiprintf_r+0x334>
   88668:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8866c:	3c10      	subs	r4, #16
   8866e:	2c10      	cmp	r4, #16
   88670:	a811      	add	r0, sp, #68	; 0x44
   88672:	f101 0c01 	add.w	ip, r1, #1
   88676:	dce4      	bgt.n	88642 <_vfiprintf_r+0x722>
   88678:	4645      	mov	r5, r8
   8867a:	46c8      	mov	r8, r9
   8867c:	46b1      	mov	r9, r6
   8867e:	4656      	mov	r6, sl
   88680:	4682      	mov	sl, r0
   88682:	9f06      	ldr	r7, [sp, #24]
   88684:	4422      	add	r2, r4
   88686:	f1bc 0f07 	cmp.w	ip, #7
   8868a:	e9ca 9400 	strd	r9, r4, [sl]
   8868e:	9210      	str	r2, [sp, #64]	; 0x40
   88690:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88694:	f340 817e 	ble.w	88994 <_vfiprintf_r+0xa74>
   88698:	2a00      	cmp	r2, #0
   8869a:	f000 825c 	beq.w	88b56 <_vfiprintf_r+0xc36>
   8869e:	4659      	mov	r1, fp
   886a0:	9805      	ldr	r0, [sp, #20]
   886a2:	aa0e      	add	r2, sp, #56	; 0x38
   886a4:	f7ff fc00 	bl	87ea8 <__sprint_r.part.0>
   886a8:	2800      	cmp	r0, #0
   886aa:	f47f add3 	bne.w	88254 <_vfiprintf_r+0x334>
   886ae:	e9dd 3400 	ldrd	r3, r4, [sp]
   886b2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   886b6:	1b1c      	subs	r4, r3, r4
   886b8:	2c00      	cmp	r4, #0
   886ba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   886be:	f101 0001 	add.w	r0, r1, #1
   886c2:	f77f ae2d 	ble.w	88320 <_vfiprintf_r+0x400>
   886c6:	2c10      	cmp	r4, #16
   886c8:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88854 <_vfiprintf_r+0x934>
   886cc:	dd2f      	ble.n	8872e <_vfiprintf_r+0x80e>
   886ce:	46d4      	mov	ip, sl
   886d0:	46b2      	mov	sl, r6
   886d2:	464e      	mov	r6, r9
   886d4:	46c1      	mov	r9, r8
   886d6:	46a8      	mov	r8, r5
   886d8:	9d05      	ldr	r5, [sp, #20]
   886da:	e006      	b.n	886ea <_vfiprintf_r+0x7ca>
   886dc:	1c88      	adds	r0, r1, #2
   886de:	4619      	mov	r1, r3
   886e0:	f10c 0c08 	add.w	ip, ip, #8
   886e4:	3c10      	subs	r4, #16
   886e6:	2c10      	cmp	r4, #16
   886e8:	dd1c      	ble.n	88724 <_vfiprintf_r+0x804>
   886ea:	2010      	movs	r0, #16
   886ec:	1c4b      	adds	r3, r1, #1
   886ee:	3210      	adds	r2, #16
   886f0:	2b07      	cmp	r3, #7
   886f2:	9210      	str	r2, [sp, #64]	; 0x40
   886f4:	f8cc 6000 	str.w	r6, [ip]
   886f8:	f8cc 0004 	str.w	r0, [ip, #4]
   886fc:	930f      	str	r3, [sp, #60]	; 0x3c
   886fe:	dded      	ble.n	886dc <_vfiprintf_r+0x7bc>
   88700:	b30a      	cbz	r2, 88746 <_vfiprintf_r+0x826>
   88702:	4659      	mov	r1, fp
   88704:	4628      	mov	r0, r5
   88706:	aa0e      	add	r2, sp, #56	; 0x38
   88708:	f7ff fbce 	bl	87ea8 <__sprint_r.part.0>
   8870c:	2800      	cmp	r0, #0
   8870e:	f47f ada1 	bne.w	88254 <_vfiprintf_r+0x334>
   88712:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88716:	3c10      	subs	r4, #16
   88718:	2c10      	cmp	r4, #16
   8871a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8871e:	f101 0001 	add.w	r0, r1, #1
   88722:	dce2      	bgt.n	886ea <_vfiprintf_r+0x7ca>
   88724:	4645      	mov	r5, r8
   88726:	46c8      	mov	r8, r9
   88728:	46b1      	mov	r9, r6
   8872a:	4656      	mov	r6, sl
   8872c:	46e2      	mov	sl, ip
   8872e:	4422      	add	r2, r4
   88730:	2807      	cmp	r0, #7
   88732:	e9ca 9400 	strd	r9, r4, [sl]
   88736:	9210      	str	r2, [sp, #64]	; 0x40
   88738:	900f      	str	r0, [sp, #60]	; 0x3c
   8873a:	f300 80d3 	bgt.w	888e4 <_vfiprintf_r+0x9c4>
   8873e:	f10a 0a08 	add.w	sl, sl, #8
   88742:	3001      	adds	r0, #1
   88744:	e5ec      	b.n	88320 <_vfiprintf_r+0x400>
   88746:	2001      	movs	r0, #1
   88748:	4611      	mov	r1, r2
   8874a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8874e:	e7c9      	b.n	886e4 <_vfiprintf_r+0x7c4>
   88750:	f04f 0c01 	mov.w	ip, #1
   88754:	4611      	mov	r1, r2
   88756:	a811      	add	r0, sp, #68	; 0x44
   88758:	e770      	b.n	8863c <_vfiprintf_r+0x71c>
   8875a:	2a00      	cmp	r2, #0
   8875c:	f000 80d3 	beq.w	88906 <_vfiprintf_r+0x9e6>
   88760:	4659      	mov	r1, fp
   88762:	9805      	ldr	r0, [sp, #20]
   88764:	aa0e      	add	r2, sp, #56	; 0x38
   88766:	f7ff fb9f 	bl	87ea8 <__sprint_r.part.0>
   8876a:	2800      	cmp	r0, #0
   8876c:	f47f ad72 	bne.w	88254 <_vfiprintf_r+0x334>
   88770:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88774:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88778:	1c48      	adds	r0, r1, #1
   8877a:	e5ac      	b.n	882d6 <_vfiprintf_r+0x3b6>
   8877c:	2202      	movs	r2, #2
   8877e:	2001      	movs	r0, #1
   88780:	ab0d      	add	r3, sp, #52	; 0x34
   88782:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88786:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8878a:	4601      	mov	r1, r0
   8878c:	f10a 0a08 	add.w	sl, sl, #8
   88790:	1c48      	adds	r0, r1, #1
   88792:	e5bb      	b.n	8830c <_vfiprintf_r+0x3ec>
   88794:	2c10      	cmp	r4, #16
   88796:	f340 8214 	ble.w	88bc2 <_vfiprintf_r+0xca2>
   8879a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8879e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88858 <_vfiprintf_r+0x938>
   887a2:	46d4      	mov	ip, sl
   887a4:	46b2      	mov	sl, r6
   887a6:	464e      	mov	r6, r9
   887a8:	46c1      	mov	r9, r8
   887aa:	46a8      	mov	r8, r5
   887ac:	9d05      	ldr	r5, [sp, #20]
   887ae:	e006      	b.n	887be <_vfiprintf_r+0x89e>
   887b0:	1c99      	adds	r1, r3, #2
   887b2:	4603      	mov	r3, r0
   887b4:	f10c 0c08 	add.w	ip, ip, #8
   887b8:	3c10      	subs	r4, #16
   887ba:	2c10      	cmp	r4, #16
   887bc:	dd1c      	ble.n	887f8 <_vfiprintf_r+0x8d8>
   887be:	2110      	movs	r1, #16
   887c0:	1c58      	adds	r0, r3, #1
   887c2:	3210      	adds	r2, #16
   887c4:	2807      	cmp	r0, #7
   887c6:	9210      	str	r2, [sp, #64]	; 0x40
   887c8:	f8cc 6000 	str.w	r6, [ip]
   887cc:	f8cc 1004 	str.w	r1, [ip, #4]
   887d0:	900f      	str	r0, [sp, #60]	; 0x3c
   887d2:	dded      	ble.n	887b0 <_vfiprintf_r+0x890>
   887d4:	b30a      	cbz	r2, 8881a <_vfiprintf_r+0x8fa>
   887d6:	4659      	mov	r1, fp
   887d8:	4628      	mov	r0, r5
   887da:	aa0e      	add	r2, sp, #56	; 0x38
   887dc:	f7ff fb64 	bl	87ea8 <__sprint_r.part.0>
   887e0:	2800      	cmp	r0, #0
   887e2:	f47f ad37 	bne.w	88254 <_vfiprintf_r+0x334>
   887e6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   887ea:	3c10      	subs	r4, #16
   887ec:	2c10      	cmp	r4, #16
   887ee:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   887f2:	f103 0101 	add.w	r1, r3, #1
   887f6:	dce2      	bgt.n	887be <_vfiprintf_r+0x89e>
   887f8:	4645      	mov	r5, r8
   887fa:	46c8      	mov	r8, r9
   887fc:	46b1      	mov	r9, r6
   887fe:	4656      	mov	r6, sl
   88800:	46e2      	mov	sl, ip
   88802:	4422      	add	r2, r4
   88804:	2907      	cmp	r1, #7
   88806:	e9ca 9400 	strd	r9, r4, [sl]
   8880a:	9210      	str	r2, [sp, #64]	; 0x40
   8880c:	910f      	str	r1, [sp, #60]	; 0x3c
   8880e:	f300 80a8 	bgt.w	88962 <_vfiprintf_r+0xa42>
   88812:	f10a 0a08 	add.w	sl, sl, #8
   88816:	1c48      	adds	r0, r1, #1
   88818:	e54b      	b.n	882b2 <_vfiprintf_r+0x392>
   8881a:	4613      	mov	r3, r2
   8881c:	2101      	movs	r1, #1
   8881e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88822:	e7c9      	b.n	887b8 <_vfiprintf_r+0x898>
   88824:	0778      	lsls	r0, r7, #29
   88826:	920f      	str	r2, [sp, #60]	; 0x3c
   88828:	d554      	bpl.n	888d4 <_vfiprintf_r+0x9b4>
   8882a:	9b02      	ldr	r3, [sp, #8]
   8882c:	1b5c      	subs	r4, r3, r5
   8882e:	2c00      	cmp	r4, #0
   88830:	dd50      	ble.n	888d4 <_vfiprintf_r+0x9b4>
   88832:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88836:	2c10      	cmp	r4, #16
   88838:	f340 81d7 	ble.w	88bea <_vfiprintf_r+0xcca>
   8883c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88858 <_vfiprintf_r+0x938>
   88840:	2610      	movs	r6, #16
   88842:	464b      	mov	r3, r9
   88844:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88846:	46a9      	mov	r9, r5
   88848:	9f05      	ldr	r7, [sp, #20]
   8884a:	461d      	mov	r5, r3
   8884c:	e00d      	b.n	8886a <_vfiprintf_r+0x94a>
   8884e:	bf00      	nop
   88850:	0008cc00 	.word	0x0008cc00
   88854:	0008cc64 	.word	0x0008cc64
   88858:	0008cc54 	.word	0x0008cc54
   8885c:	1c88      	adds	r0, r1, #2
   8885e:	4619      	mov	r1, r3
   88860:	f10a 0a08 	add.w	sl, sl, #8
   88864:	3c10      	subs	r4, #16
   88866:	2c10      	cmp	r4, #16
   88868:	dd19      	ble.n	8889e <_vfiprintf_r+0x97e>
   8886a:	1c4b      	adds	r3, r1, #1
   8886c:	3210      	adds	r2, #16
   8886e:	2b07      	cmp	r3, #7
   88870:	e9ca 5600 	strd	r5, r6, [sl]
   88874:	9210      	str	r2, [sp, #64]	; 0x40
   88876:	930f      	str	r3, [sp, #60]	; 0x3c
   88878:	ddf0      	ble.n	8885c <_vfiprintf_r+0x93c>
   8887a:	b332      	cbz	r2, 888ca <_vfiprintf_r+0x9aa>
   8887c:	4659      	mov	r1, fp
   8887e:	4638      	mov	r0, r7
   88880:	aa0e      	add	r2, sp, #56	; 0x38
   88882:	f7ff fb11 	bl	87ea8 <__sprint_r.part.0>
   88886:	2800      	cmp	r0, #0
   88888:	f47f ace4 	bne.w	88254 <_vfiprintf_r+0x334>
   8888c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88890:	3c10      	subs	r4, #16
   88892:	2c10      	cmp	r4, #16
   88894:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88898:	f101 0001 	add.w	r0, r1, #1
   8889c:	dce5      	bgt.n	8886a <_vfiprintf_r+0x94a>
   8889e:	462b      	mov	r3, r5
   888a0:	464d      	mov	r5, r9
   888a2:	4699      	mov	r9, r3
   888a4:	4422      	add	r2, r4
   888a6:	2807      	cmp	r0, #7
   888a8:	e9ca 9400 	strd	r9, r4, [sl]
   888ac:	9210      	str	r2, [sp, #64]	; 0x40
   888ae:	900f      	str	r0, [sp, #60]	; 0x3c
   888b0:	f77f ad53 	ble.w	8835a <_vfiprintf_r+0x43a>
   888b4:	b172      	cbz	r2, 888d4 <_vfiprintf_r+0x9b4>
   888b6:	4659      	mov	r1, fp
   888b8:	9805      	ldr	r0, [sp, #20]
   888ba:	aa0e      	add	r2, sp, #56	; 0x38
   888bc:	f7ff faf4 	bl	87ea8 <__sprint_r.part.0>
   888c0:	2800      	cmp	r0, #0
   888c2:	f47f acc7 	bne.w	88254 <_vfiprintf_r+0x334>
   888c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   888c8:	e547      	b.n	8835a <_vfiprintf_r+0x43a>
   888ca:	2001      	movs	r0, #1
   888cc:	4611      	mov	r1, r2
   888ce:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888d2:	e7c7      	b.n	88864 <_vfiprintf_r+0x944>
   888d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   888d8:	42aa      	cmp	r2, r5
   888da:	bfac      	ite	ge
   888dc:	189b      	addge	r3, r3, r2
   888de:	195b      	addlt	r3, r3, r5
   888e0:	9303      	str	r3, [sp, #12]
   888e2:	e544      	b.n	8836e <_vfiprintf_r+0x44e>
   888e4:	2a00      	cmp	r2, #0
   888e6:	f43f ae88 	beq.w	885fa <_vfiprintf_r+0x6da>
   888ea:	4659      	mov	r1, fp
   888ec:	9805      	ldr	r0, [sp, #20]
   888ee:	aa0e      	add	r2, sp, #56	; 0x38
   888f0:	f7ff fada 	bl	87ea8 <__sprint_r.part.0>
   888f4:	2800      	cmp	r0, #0
   888f6:	f47f acad 	bne.w	88254 <_vfiprintf_r+0x334>
   888fa:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   888fe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88902:	3001      	adds	r0, #1
   88904:	e50c      	b.n	88320 <_vfiprintf_r+0x400>
   88906:	9b07      	ldr	r3, [sp, #28]
   88908:	2b00      	cmp	r3, #0
   8890a:	d16b      	bne.n	889e4 <_vfiprintf_r+0xac4>
   8890c:	2001      	movs	r0, #1
   8890e:	4611      	mov	r1, r2
   88910:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88914:	e4fa      	b.n	8830c <_vfiprintf_r+0x3ec>
   88916:	920f      	str	r2, [sp, #60]	; 0x3c
   88918:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8891c:	e481      	b.n	88222 <_vfiprintf_r+0x302>
   8891e:	9b00      	ldr	r3, [sp, #0]
   88920:	2b00      	cmp	r3, #0
   88922:	f47f ac05 	bne.w	88130 <_vfiprintf_r+0x210>
   88926:	464f      	mov	r7, r9
   88928:	2300      	movs	r3, #0
   8892a:	ae3a      	add	r6, sp, #232	; 0xe8
   8892c:	9300      	str	r3, [sp, #0]
   8892e:	9301      	str	r3, [sp, #4]
   88930:	e406      	b.n	88140 <_vfiprintf_r+0x220>
   88932:	f854 2b04 	ldr.w	r2, [r4], #4
   88936:	f019 0f10 	tst.w	r9, #16
   8893a:	f04f 0301 	mov.w	r3, #1
   8893e:	9404      	str	r4, [sp, #16]
   88940:	d132      	bne.n	889a8 <_vfiprintf_r+0xa88>
   88942:	f019 0f40 	tst.w	r9, #64	; 0x40
   88946:	d02b      	beq.n	889a0 <_vfiprintf_r+0xa80>
   88948:	2500      	movs	r5, #0
   8894a:	b294      	uxth	r4, r2
   8894c:	e439      	b.n	881c2 <_vfiprintf_r+0x2a2>
   8894e:	232d      	movs	r3, #45	; 0x2d
   88950:	4264      	negs	r4, r4
   88952:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88956:	46b9      	mov	r9, r7
   88958:	f04f 0301 	mov.w	r3, #1
   8895c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88960:	e433      	b.n	881ca <_vfiprintf_r+0x2aa>
   88962:	2a00      	cmp	r2, #0
   88964:	d06f      	beq.n	88a46 <_vfiprintf_r+0xb26>
   88966:	4659      	mov	r1, fp
   88968:	9805      	ldr	r0, [sp, #20]
   8896a:	aa0e      	add	r2, sp, #56	; 0x38
   8896c:	f7ff fa9c 	bl	87ea8 <__sprint_r.part.0>
   88970:	2800      	cmp	r0, #0
   88972:	f47f ac6f 	bne.w	88254 <_vfiprintf_r+0x334>
   88976:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8897a:	e497      	b.n	882ac <_vfiprintf_r+0x38c>
   8897c:	ae3a      	add	r6, sp, #232	; 0xe8
   8897e:	f7ff bbdf 	b.w	88140 <_vfiprintf_r+0x220>
   88982:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88986:	f001 fed9 	bl	8a73c <__retarget_lock_acquire_recursive>
   8898a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8898e:	b28a      	uxth	r2, r1
   88990:	f7ff badd 	b.w	87f4e <_vfiprintf_r+0x2e>
   88994:	4661      	mov	r1, ip
   88996:	f10a 0a08 	add.w	sl, sl, #8
   8899a:	f10c 0001 	add.w	r0, ip, #1
   8899e:	e4b9      	b.n	88314 <_vfiprintf_r+0x3f4>
   889a0:	f419 7f00 	tst.w	r9, #512	; 0x200
   889a4:	f040 80ef 	bne.w	88b86 <_vfiprintf_r+0xc66>
   889a8:	4614      	mov	r4, r2
   889aa:	2500      	movs	r5, #0
   889ac:	e409      	b.n	881c2 <_vfiprintf_r+0x2a2>
   889ae:	05be      	lsls	r6, r7, #22
   889b0:	f100 80f7 	bmi.w	88ba2 <_vfiprintf_r+0xc82>
   889b4:	461c      	mov	r4, r3
   889b6:	2500      	movs	r5, #0
   889b8:	e400      	b.n	881bc <_vfiprintf_r+0x29c>
   889ba:	05ba      	lsls	r2, r7, #22
   889bc:	f100 80ea 	bmi.w	88b94 <_vfiprintf_r+0xc74>
   889c0:	17e5      	asrs	r5, r4, #31
   889c2:	9304      	str	r3, [sp, #16]
   889c4:	4622      	mov	r2, r4
   889c6:	462b      	mov	r3, r5
   889c8:	f7ff bb9e 	b.w	88108 <_vfiprintf_r+0x1e8>
   889cc:	9b03      	ldr	r3, [sp, #12]
   889ce:	9c04      	ldr	r4, [sp, #16]
   889d0:	17dd      	asrs	r5, r3, #31
   889d2:	461a      	mov	r2, r3
   889d4:	462b      	mov	r3, r5
   889d6:	f854 1b04 	ldr.w	r1, [r4], #4
   889da:	e9c1 2300 	strd	r2, r3, [r1]
   889de:	9404      	str	r4, [sp, #16]
   889e0:	f7ff badc 	b.w	87f9c <_vfiprintf_r+0x7c>
   889e4:	2202      	movs	r2, #2
   889e6:	ab0d      	add	r3, sp, #52	; 0x34
   889e8:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   889ec:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889f0:	e6cc      	b.n	8878c <_vfiprintf_r+0x86c>
   889f2:	46b9      	mov	r9, r7
   889f4:	e598      	b.n	88528 <_vfiprintf_r+0x608>
   889f6:	4a90      	ldr	r2, [pc, #576]	; (88c38 <_vfiprintf_r+0xd18>)
   889f8:	9208      	str	r2, [sp, #32]
   889fa:	06bd      	lsls	r5, r7, #26
   889fc:	9c04      	ldr	r4, [sp, #16]
   889fe:	d530      	bpl.n	88a62 <_vfiprintf_r+0xb42>
   88a00:	3407      	adds	r4, #7
   88a02:	f024 0207 	bic.w	r2, r4, #7
   88a06:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   88a0a:	9204      	str	r2, [sp, #16]
   88a0c:	07fe      	lsls	r6, r7, #31
   88a0e:	d509      	bpl.n	88a24 <_vfiprintf_r+0xb04>
   88a10:	ea54 0205 	orrs.w	r2, r4, r5
   88a14:	d006      	beq.n	88a24 <_vfiprintf_r+0xb04>
   88a16:	2230      	movs	r2, #48	; 0x30
   88a18:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88a1c:	f047 0702 	orr.w	r7, r7, #2
   88a20:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88a24:	2302      	movs	r3, #2
   88a26:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88a2a:	f7ff bbca 	b.w	881c2 <_vfiprintf_r+0x2a2>
   88a2e:	4a83      	ldr	r2, [pc, #524]	; (88c3c <_vfiprintf_r+0xd1c>)
   88a30:	9208      	str	r2, [sp, #32]
   88a32:	e7e2      	b.n	889fa <_vfiprintf_r+0xada>
   88a34:	4630      	mov	r0, r6
   88a36:	f7fd fc2d 	bl	86294 <strlen>
   88a3a:	2300      	movs	r3, #0
   88a3c:	9404      	str	r4, [sp, #16]
   88a3e:	9001      	str	r0, [sp, #4]
   88a40:	9300      	str	r3, [sp, #0]
   88a42:	f7ff bb7d 	b.w	88140 <_vfiprintf_r+0x220>
   88a46:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88a4a:	2900      	cmp	r1, #0
   88a4c:	f040 8089 	bne.w	88b62 <_vfiprintf_r+0xc42>
   88a50:	9b07      	ldr	r3, [sp, #28]
   88a52:	2b00      	cmp	r3, #0
   88a54:	f47f ae92 	bne.w	8877c <_vfiprintf_r+0x85c>
   88a58:	4611      	mov	r1, r2
   88a5a:	2001      	movs	r0, #1
   88a5c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a60:	e458      	b.n	88314 <_vfiprintf_r+0x3f4>
   88a62:	f854 2b04 	ldr.w	r2, [r4], #4
   88a66:	9404      	str	r4, [sp, #16]
   88a68:	06fc      	lsls	r4, r7, #27
   88a6a:	d407      	bmi.n	88a7c <_vfiprintf_r+0xb5c>
   88a6c:	0678      	lsls	r0, r7, #25
   88a6e:	d502      	bpl.n	88a76 <_vfiprintf_r+0xb56>
   88a70:	2500      	movs	r5, #0
   88a72:	b294      	uxth	r4, r2
   88a74:	e7ca      	b.n	88a0c <_vfiprintf_r+0xaec>
   88a76:	05b9      	lsls	r1, r7, #22
   88a78:	f100 8089 	bmi.w	88b8e <_vfiprintf_r+0xc6e>
   88a7c:	4614      	mov	r4, r2
   88a7e:	2500      	movs	r5, #0
   88a80:	e7c4      	b.n	88a0c <_vfiprintf_r+0xaec>
   88a82:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88a86:	f8cd 9004 	str.w	r9, [sp, #4]
   88a8a:	f8cd 8018 	str.w	r8, [sp, #24]
   88a8e:	2700      	movs	r7, #0
   88a90:	4698      	mov	r8, r3
   88a92:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88a96:	ae3a      	add	r6, sp, #232	; 0xe8
   88a98:	e00b      	b.n	88ab2 <_vfiprintf_r+0xb92>
   88a9a:	220a      	movs	r2, #10
   88a9c:	2300      	movs	r3, #0
   88a9e:	4620      	mov	r0, r4
   88aa0:	4629      	mov	r1, r5
   88aa2:	f7fd f883 	bl	85bac <__aeabi_uldivmod>
   88aa6:	2d00      	cmp	r5, #0
   88aa8:	bf08      	it	eq
   88aaa:	2c0a      	cmpeq	r4, #10
   88aac:	d319      	bcc.n	88ae2 <_vfiprintf_r+0xbc2>
   88aae:	4604      	mov	r4, r0
   88ab0:	460d      	mov	r5, r1
   88ab2:	220a      	movs	r2, #10
   88ab4:	2300      	movs	r3, #0
   88ab6:	4620      	mov	r0, r4
   88ab8:	4629      	mov	r1, r5
   88aba:	f7fd f877 	bl	85bac <__aeabi_uldivmod>
   88abe:	3230      	adds	r2, #48	; 0x30
   88ac0:	f806 2c01 	strb.w	r2, [r6, #-1]
   88ac4:	3701      	adds	r7, #1
   88ac6:	3e01      	subs	r6, #1
   88ac8:	f1b8 0f00 	cmp.w	r8, #0
   88acc:	d0e5      	beq.n	88a9a <_vfiprintf_r+0xb7a>
   88ace:	f899 3000 	ldrb.w	r3, [r9]
   88ad2:	42bb      	cmp	r3, r7
   88ad4:	d1e1      	bne.n	88a9a <_vfiprintf_r+0xb7a>
   88ad6:	2fff      	cmp	r7, #255	; 0xff
   88ad8:	d0df      	beq.n	88a9a <_vfiprintf_r+0xb7a>
   88ada:	2d00      	cmp	r5, #0
   88adc:	bf08      	it	eq
   88ade:	2c0a      	cmpeq	r4, #10
   88ae0:	d225      	bcs.n	88b2e <_vfiprintf_r+0xc0e>
   88ae2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   88ae6:	ab3a      	add	r3, sp, #232	; 0xe8
   88ae8:	f8dd 9004 	ldr.w	r9, [sp, #4]
   88aec:	1b9b      	subs	r3, r3, r6
   88aee:	464f      	mov	r7, r9
   88af0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   88af4:	9301      	str	r3, [sp, #4]
   88af6:	f7ff bb23 	b.w	88140 <_vfiprintf_r+0x220>
   88afa:	46b9      	mov	r9, r7
   88afc:	f7ff bb13 	b.w	88126 <_vfiprintf_r+0x206>
   88b00:	2b01      	cmp	r3, #1
   88b02:	46b9      	mov	r9, r7
   88b04:	f47f ad44 	bne.w	88590 <_vfiprintf_r+0x670>
   88b08:	f7ff bb12 	b.w	88130 <_vfiprintf_r+0x210>
   88b0c:	9c04      	ldr	r4, [sp, #16]
   88b0e:	9a03      	ldr	r2, [sp, #12]
   88b10:	f854 3b04 	ldr.w	r3, [r4], #4
   88b14:	601a      	str	r2, [r3, #0]
   88b16:	9404      	str	r4, [sp, #16]
   88b18:	f7ff ba40 	b.w	87f9c <_vfiprintf_r+0x7c>
   88b1c:	9d00      	ldr	r5, [sp, #0]
   88b1e:	4e48      	ldr	r6, [pc, #288]	; (88c40 <_vfiprintf_r+0xd20>)
   88b20:	2d06      	cmp	r5, #6
   88b22:	bf28      	it	cs
   88b24:	2506      	movcs	r5, #6
   88b26:	9404      	str	r4, [sp, #16]
   88b28:	9501      	str	r5, [sp, #4]
   88b2a:	f7ff bbaf 	b.w	8828c <_vfiprintf_r+0x36c>
   88b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88b30:	990a      	ldr	r1, [sp, #40]	; 0x28
   88b32:	1af6      	subs	r6, r6, r3
   88b34:	461a      	mov	r2, r3
   88b36:	4630      	mov	r0, r6
   88b38:	f7fd fbda 	bl	862f0 <strncpy>
   88b3c:	f899 3001 	ldrb.w	r3, [r9, #1]
   88b40:	b10b      	cbz	r3, 88b46 <_vfiprintf_r+0xc26>
   88b42:	f109 0901 	add.w	r9, r9, #1
   88b46:	220a      	movs	r2, #10
   88b48:	2300      	movs	r3, #0
   88b4a:	4620      	mov	r0, r4
   88b4c:	4629      	mov	r1, r5
   88b4e:	f7fd f82d 	bl	85bac <__aeabi_uldivmod>
   88b52:	2700      	movs	r7, #0
   88b54:	e7ab      	b.n	88aae <_vfiprintf_r+0xb8e>
   88b56:	2001      	movs	r0, #1
   88b58:	4611      	mov	r1, r2
   88b5a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b5e:	f7ff bbd9 	b.w	88314 <_vfiprintf_r+0x3f4>
   88b62:	2201      	movs	r2, #1
   88b64:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   88b68:	4610      	mov	r0, r2
   88b6a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88b6e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b72:	f7ff bbac 	b.w	882ce <_vfiprintf_r+0x3ae>
   88b76:	9c04      	ldr	r4, [sp, #16]
   88b78:	9a03      	ldr	r2, [sp, #12]
   88b7a:	f854 3b04 	ldr.w	r3, [r4], #4
   88b7e:	801a      	strh	r2, [r3, #0]
   88b80:	9404      	str	r4, [sp, #16]
   88b82:	f7ff ba0b 	b.w	87f9c <_vfiprintf_r+0x7c>
   88b86:	2500      	movs	r5, #0
   88b88:	b2d4      	uxtb	r4, r2
   88b8a:	f7ff bb1a 	b.w	881c2 <_vfiprintf_r+0x2a2>
   88b8e:	2500      	movs	r5, #0
   88b90:	b2d4      	uxtb	r4, r2
   88b92:	e73b      	b.n	88a0c <_vfiprintf_r+0xaec>
   88b94:	b264      	sxtb	r4, r4
   88b96:	17e5      	asrs	r5, r4, #31
   88b98:	9304      	str	r3, [sp, #16]
   88b9a:	4622      	mov	r2, r4
   88b9c:	462b      	mov	r3, r5
   88b9e:	f7ff bab3 	b.w	88108 <_vfiprintf_r+0x1e8>
   88ba2:	2500      	movs	r5, #0
   88ba4:	b2dc      	uxtb	r4, r3
   88ba6:	f7ff bb09 	b.w	881bc <_vfiprintf_r+0x29c>
   88baa:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88bae:	f001 fdc7 	bl	8a740 <__retarget_lock_release_recursive>
   88bb2:	f7ff baec 	b.w	8818e <_vfiprintf_r+0x26e>
   88bb6:	9b00      	ldr	r3, [sp, #0]
   88bb8:	9404      	str	r4, [sp, #16]
   88bba:	9301      	str	r3, [sp, #4]
   88bbc:	9000      	str	r0, [sp, #0]
   88bbe:	f7ff babf 	b.w	88140 <_vfiprintf_r+0x220>
   88bc2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88bc6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 88c44 <_vfiprintf_r+0xd24>
   88bca:	3101      	adds	r1, #1
   88bcc:	e619      	b.n	88802 <_vfiprintf_r+0x8e2>
   88bce:	2200      	movs	r2, #0
   88bd0:	9200      	str	r2, [sp, #0]
   88bd2:	f7ff ba09 	b.w	87fe8 <_vfiprintf_r+0xc8>
   88bd6:	4659      	mov	r1, fp
   88bd8:	9805      	ldr	r0, [sp, #20]
   88bda:	aa0e      	add	r2, sp, #56	; 0x38
   88bdc:	f7ff f964 	bl	87ea8 <__sprint_r.part.0>
   88be0:	2800      	cmp	r0, #0
   88be2:	f43f abd2 	beq.w	8838a <_vfiprintf_r+0x46a>
   88be6:	f7ff bb36 	b.w	88256 <_vfiprintf_r+0x336>
   88bea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   88bec:	f8df 9054 	ldr.w	r9, [pc, #84]	; 88c44 <_vfiprintf_r+0xd24>
   88bf0:	3001      	adds	r0, #1
   88bf2:	e657      	b.n	888a4 <_vfiprintf_r+0x984>
   88bf4:	4684      	mov	ip, r0
   88bf6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 88c48 <_vfiprintf_r+0xd28>
   88bfa:	e543      	b.n	88684 <_vfiprintf_r+0x764>
   88bfc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88c00:	07db      	lsls	r3, r3, #31
   88c02:	d407      	bmi.n	88c14 <_vfiprintf_r+0xcf4>
   88c04:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88c08:	059f      	lsls	r7, r3, #22
   88c0a:	d403      	bmi.n	88c14 <_vfiprintf_r+0xcf4>
   88c0c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88c10:	f001 fd96 	bl	8a740 <__retarget_lock_release_recursive>
   88c14:	f04f 33ff 	mov.w	r3, #4294967295
   88c18:	9303      	str	r3, [sp, #12]
   88c1a:	f7ff bb27 	b.w	8826c <_vfiprintf_r+0x34c>
   88c1e:	9a04      	ldr	r2, [sp, #16]
   88c20:	f898 3001 	ldrb.w	r3, [r8, #1]
   88c24:	f852 0b04 	ldr.w	r0, [r2], #4
   88c28:	4688      	mov	r8, r1
   88c2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88c2e:	9000      	str	r0, [sp, #0]
   88c30:	9204      	str	r2, [sp, #16]
   88c32:	f7ff b9d7 	b.w	87fe4 <_vfiprintf_r+0xc4>
   88c36:	bf00      	nop
   88c38:	0008cc14 	.word	0x0008cc14
   88c3c:	0008cc00 	.word	0x0008cc00
   88c40:	0008cc28 	.word	0x0008cc28
   88c44:	0008cc54 	.word	0x0008cc54
   88c48:	0008cc64 	.word	0x0008cc64

00088c4c <__sbprintf>:
   88c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   88c4e:	460c      	mov	r4, r1
   88c50:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   88c54:	f04f 0e00 	mov.w	lr, #0
   88c58:	4615      	mov	r5, r2
   88c5a:	4606      	mov	r6, r0
   88c5c:	461f      	mov	r7, r3
   88c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88c60:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88c64:	89e2      	ldrh	r2, [r4, #14]
   88c66:	8989      	ldrh	r1, [r1, #12]
   88c68:	9319      	str	r3, [sp, #100]	; 0x64
   88c6a:	69e3      	ldr	r3, [r4, #28]
   88c6c:	f8ad 200e 	strh.w	r2, [sp, #14]
   88c70:	6a62      	ldr	r2, [r4, #36]	; 0x24
   88c72:	f021 0102 	bic.w	r1, r1, #2
   88c76:	9307      	str	r3, [sp, #28]
   88c78:	a816      	add	r0, sp, #88	; 0x58
   88c7a:	ab1a      	add	r3, sp, #104	; 0x68
   88c7c:	f8ad 100c 	strh.w	r1, [sp, #12]
   88c80:	f8cd e018 	str.w	lr, [sp, #24]
   88c84:	9209      	str	r2, [sp, #36]	; 0x24
   88c86:	9300      	str	r3, [sp, #0]
   88c88:	9304      	str	r3, [sp, #16]
   88c8a:	f8cd c008 	str.w	ip, [sp, #8]
   88c8e:	f8cd c014 	str.w	ip, [sp, #20]
   88c92:	f001 fd4f 	bl	8a734 <__retarget_lock_init_recursive>
   88c96:	462a      	mov	r2, r5
   88c98:	463b      	mov	r3, r7
   88c9a:	4669      	mov	r1, sp
   88c9c:	4630      	mov	r0, r6
   88c9e:	f7ff f93f 	bl	87f20 <_vfiprintf_r>
   88ca2:	1e05      	subs	r5, r0, #0
   88ca4:	db07      	blt.n	88cb6 <__sbprintf+0x6a>
   88ca6:	4630      	mov	r0, r6
   88ca8:	4669      	mov	r1, sp
   88caa:	f001 f919 	bl	89ee0 <_fflush_r>
   88cae:	2800      	cmp	r0, #0
   88cb0:	bf18      	it	ne
   88cb2:	f04f 35ff 	movne.w	r5, #4294967295
   88cb6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88cba:	065b      	lsls	r3, r3, #25
   88cbc:	d503      	bpl.n	88cc6 <__sbprintf+0x7a>
   88cbe:	89a3      	ldrh	r3, [r4, #12]
   88cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88cc4:	81a3      	strh	r3, [r4, #12]
   88cc6:	9816      	ldr	r0, [sp, #88]	; 0x58
   88cc8:	f001 fd36 	bl	8a738 <__retarget_lock_close_recursive>
   88ccc:	4628      	mov	r0, r5
   88cce:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   88cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088cd4 <__swsetup_r>:
   88cd4:	b538      	push	{r3, r4, r5, lr}
   88cd6:	4b32      	ldr	r3, [pc, #200]	; (88da0 <__swsetup_r+0xcc>)
   88cd8:	4605      	mov	r5, r0
   88cda:	6818      	ldr	r0, [r3, #0]
   88cdc:	460c      	mov	r4, r1
   88cde:	b110      	cbz	r0, 88ce6 <__swsetup_r+0x12>
   88ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88ce2:	2b00      	cmp	r3, #0
   88ce4:	d03c      	beq.n	88d60 <__swsetup_r+0x8c>
   88ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88cea:	0718      	lsls	r0, r3, #28
   88cec:	b29a      	uxth	r2, r3
   88cee:	d50c      	bpl.n	88d0a <__swsetup_r+0x36>
   88cf0:	6921      	ldr	r1, [r4, #16]
   88cf2:	b1a9      	cbz	r1, 88d20 <__swsetup_r+0x4c>
   88cf4:	f012 0001 	ands.w	r0, r2, #1
   88cf8:	d022      	beq.n	88d40 <__swsetup_r+0x6c>
   88cfa:	2500      	movs	r5, #0
   88cfc:	6960      	ldr	r0, [r4, #20]
   88cfe:	60a5      	str	r5, [r4, #8]
   88d00:	4240      	negs	r0, r0
   88d02:	61a0      	str	r0, [r4, #24]
   88d04:	b311      	cbz	r1, 88d4c <__swsetup_r+0x78>
   88d06:	2000      	movs	r0, #0
   88d08:	bd38      	pop	{r3, r4, r5, pc}
   88d0a:	06d1      	lsls	r1, r2, #27
   88d0c:	d53f      	bpl.n	88d8e <__swsetup_r+0xba>
   88d0e:	0752      	lsls	r2, r2, #29
   88d10:	d429      	bmi.n	88d66 <__swsetup_r+0x92>
   88d12:	6921      	ldr	r1, [r4, #16]
   88d14:	f043 0308 	orr.w	r3, r3, #8
   88d18:	81a3      	strh	r3, [r4, #12]
   88d1a:	b29a      	uxth	r2, r3
   88d1c:	2900      	cmp	r1, #0
   88d1e:	d1e9      	bne.n	88cf4 <__swsetup_r+0x20>
   88d20:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88d24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   88d28:	d0e4      	beq.n	88cf4 <__swsetup_r+0x20>
   88d2a:	4628      	mov	r0, r5
   88d2c:	4621      	mov	r1, r4
   88d2e:	f001 fd37 	bl	8a7a0 <__smakebuf_r>
   88d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d36:	6921      	ldr	r1, [r4, #16]
   88d38:	b29a      	uxth	r2, r3
   88d3a:	f012 0001 	ands.w	r0, r2, #1
   88d3e:	d1dc      	bne.n	88cfa <__swsetup_r+0x26>
   88d40:	0795      	lsls	r5, r2, #30
   88d42:	bf58      	it	pl
   88d44:	6960      	ldrpl	r0, [r4, #20]
   88d46:	60a0      	str	r0, [r4, #8]
   88d48:	2900      	cmp	r1, #0
   88d4a:	d1dc      	bne.n	88d06 <__swsetup_r+0x32>
   88d4c:	0612      	lsls	r2, r2, #24
   88d4e:	bf58      	it	pl
   88d50:	4608      	movpl	r0, r1
   88d52:	d5d9      	bpl.n	88d08 <__swsetup_r+0x34>
   88d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d58:	f04f 30ff 	mov.w	r0, #4294967295
   88d5c:	81a3      	strh	r3, [r4, #12]
   88d5e:	bd38      	pop	{r3, r4, r5, pc}
   88d60:	f001 f91a 	bl	89f98 <__sinit>
   88d64:	e7bf      	b.n	88ce6 <__swsetup_r+0x12>
   88d66:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88d68:	b151      	cbz	r1, 88d80 <__swsetup_r+0xac>
   88d6a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88d6e:	4291      	cmp	r1, r2
   88d70:	d004      	beq.n	88d7c <__swsetup_r+0xa8>
   88d72:	4628      	mov	r0, r5
   88d74:	f001 fa34 	bl	8a1e0 <_free_r>
   88d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d7c:	2200      	movs	r2, #0
   88d7e:	6322      	str	r2, [r4, #48]	; 0x30
   88d80:	2200      	movs	r2, #0
   88d82:	6921      	ldr	r1, [r4, #16]
   88d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88d88:	e9c4 1200 	strd	r1, r2, [r4]
   88d8c:	e7c2      	b.n	88d14 <__swsetup_r+0x40>
   88d8e:	2209      	movs	r2, #9
   88d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d94:	602a      	str	r2, [r5, #0]
   88d96:	f04f 30ff 	mov.w	r0, #4294967295
   88d9a:	81a3      	strh	r3, [r4, #12]
   88d9c:	bd38      	pop	{r3, r4, r5, pc}
   88d9e:	bf00      	nop
   88da0:	200009ac 	.word	0x200009ac

00088da4 <register_fini>:
   88da4:	4b02      	ldr	r3, [pc, #8]	; (88db0 <register_fini+0xc>)
   88da6:	b113      	cbz	r3, 88dae <register_fini+0xa>
   88da8:	4802      	ldr	r0, [pc, #8]	; (88db4 <register_fini+0x10>)
   88daa:	f000 b805 	b.w	88db8 <atexit>
   88dae:	4770      	bx	lr
   88db0:	00000000 	.word	0x00000000
   88db4:	0008a00d 	.word	0x0008a00d

00088db8 <atexit>:
   88db8:	2300      	movs	r3, #0
   88dba:	4601      	mov	r1, r0
   88dbc:	461a      	mov	r2, r3
   88dbe:	4618      	mov	r0, r3
   88dc0:	f002 bfcc 	b.w	8bd5c <__register_exitproc>

00088dc4 <quorem>:
   88dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88dc8:	6903      	ldr	r3, [r0, #16]
   88dca:	690d      	ldr	r5, [r1, #16]
   88dcc:	b083      	sub	sp, #12
   88dce:	42ab      	cmp	r3, r5
   88dd0:	f2c0 8084 	blt.w	88edc <quorem+0x118>
   88dd4:	3d01      	subs	r5, #1
   88dd6:	f101 0614 	add.w	r6, r1, #20
   88dda:	f100 0914 	add.w	r9, r0, #20
   88dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   88de2:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88de6:	3301      	adds	r3, #1
   88de8:	468e      	mov	lr, r1
   88dea:	00a9      	lsls	r1, r5, #2
   88dec:	9100      	str	r1, [sp, #0]
   88dee:	429a      	cmp	r2, r3
   88df0:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   88df4:	4682      	mov	sl, r0
   88df6:	fbb2 f7f3 	udiv	r7, r2, r3
   88dfa:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   88dfe:	9101      	str	r1, [sp, #4]
   88e00:	d337      	bcc.n	88e72 <quorem+0xae>
   88e02:	2200      	movs	r2, #0
   88e04:	46b4      	mov	ip, r6
   88e06:	4614      	mov	r4, r2
   88e08:	4648      	mov	r0, r9
   88e0a:	f85c 3b04 	ldr.w	r3, [ip], #4
   88e0e:	6801      	ldr	r1, [r0, #0]
   88e10:	fa1f fb83 	uxth.w	fp, r3
   88e14:	fb07 220b 	mla	r2, r7, fp, r2
   88e18:	0c1b      	lsrs	r3, r3, #16
   88e1a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   88e1e:	fb07 bb03 	mla	fp, r7, r3, fp
   88e22:	b293      	uxth	r3, r2
   88e24:	1ae3      	subs	r3, r4, r3
   88e26:	b28a      	uxth	r2, r1
   88e28:	fa1f f48b 	uxth.w	r4, fp
   88e2c:	4413      	add	r3, r2
   88e2e:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   88e32:	eb04 4423 	add.w	r4, r4, r3, asr #16
   88e36:	b29b      	uxth	r3, r3
   88e38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   88e3c:	45e0      	cmp	r8, ip
   88e3e:	f840 3b04 	str.w	r3, [r0], #4
   88e42:	ea4f 4424 	mov.w	r4, r4, asr #16
   88e46:	ea4f 421b 	mov.w	r2, fp, lsr #16
   88e4a:	d2de      	bcs.n	88e0a <quorem+0x46>
   88e4c:	9b00      	ldr	r3, [sp, #0]
   88e4e:	f859 3003 	ldr.w	r3, [r9, r3]
   88e52:	b973      	cbnz	r3, 88e72 <quorem+0xae>
   88e54:	9b01      	ldr	r3, [sp, #4]
   88e56:	3b04      	subs	r3, #4
   88e58:	4599      	cmp	r9, r3
   88e5a:	d304      	bcc.n	88e66 <quorem+0xa2>
   88e5c:	e007      	b.n	88e6e <quorem+0xaa>
   88e5e:	4599      	cmp	r9, r3
   88e60:	f105 35ff 	add.w	r5, r5, #4294967295
   88e64:	d203      	bcs.n	88e6e <quorem+0xaa>
   88e66:	f853 2904 	ldr.w	r2, [r3], #-4
   88e6a:	2a00      	cmp	r2, #0
   88e6c:	d0f7      	beq.n	88e5e <quorem+0x9a>
   88e6e:	f8ca 5010 	str.w	r5, [sl, #16]
   88e72:	4671      	mov	r1, lr
   88e74:	4650      	mov	r0, sl
   88e76:	f002 fab3 	bl	8b3e0 <__mcmp>
   88e7a:	2800      	cmp	r0, #0
   88e7c:	db2a      	blt.n	88ed4 <quorem+0x110>
   88e7e:	4648      	mov	r0, r9
   88e80:	2300      	movs	r3, #0
   88e82:	3701      	adds	r7, #1
   88e84:	f856 1b04 	ldr.w	r1, [r6], #4
   88e88:	6804      	ldr	r4, [r0, #0]
   88e8a:	b28a      	uxth	r2, r1
   88e8c:	1a9a      	subs	r2, r3, r2
   88e8e:	0c0b      	lsrs	r3, r1, #16
   88e90:	b2a1      	uxth	r1, r4
   88e92:	440a      	add	r2, r1
   88e94:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   88e98:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88e9c:	b292      	uxth	r2, r2
   88e9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88ea2:	45b0      	cmp	r8, r6
   88ea4:	f840 2b04 	str.w	r2, [r0], #4
   88ea8:	ea4f 4323 	mov.w	r3, r3, asr #16
   88eac:	d2ea      	bcs.n	88e84 <quorem+0xc0>
   88eae:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88eb2:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   88eb6:	b96a      	cbnz	r2, 88ed4 <quorem+0x110>
   88eb8:	3b04      	subs	r3, #4
   88eba:	4599      	cmp	r9, r3
   88ebc:	d304      	bcc.n	88ec8 <quorem+0x104>
   88ebe:	e007      	b.n	88ed0 <quorem+0x10c>
   88ec0:	4599      	cmp	r9, r3
   88ec2:	f105 35ff 	add.w	r5, r5, #4294967295
   88ec6:	d203      	bcs.n	88ed0 <quorem+0x10c>
   88ec8:	f853 2904 	ldr.w	r2, [r3], #-4
   88ecc:	2a00      	cmp	r2, #0
   88ece:	d0f7      	beq.n	88ec0 <quorem+0xfc>
   88ed0:	f8ca 5010 	str.w	r5, [sl, #16]
   88ed4:	4638      	mov	r0, r7
   88ed6:	b003      	add	sp, #12
   88ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88edc:	2000      	movs	r0, #0
   88ede:	b003      	add	sp, #12
   88ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ee4:	0000      	movs	r0, r0
	...

00088ee8 <_dtoa_r>:
   88ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88eec:	4616      	mov	r6, r2
   88eee:	461f      	mov	r7, r3
   88ef0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88ef2:	b09b      	sub	sp, #108	; 0x6c
   88ef4:	4604      	mov	r4, r0
   88ef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   88efa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   88efc:	b141      	cbz	r1, 88f10 <_dtoa_r+0x28>
   88efe:	2301      	movs	r3, #1
   88f00:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88f02:	4093      	lsls	r3, r2
   88f04:	e9c1 2301 	strd	r2, r3, [r1, #4]
   88f08:	f002 f83c 	bl	8af84 <_Bfree>
   88f0c:	2300      	movs	r3, #0
   88f0e:	6423      	str	r3, [r4, #64]	; 0x40
   88f10:	f1b7 0900 	subs.w	r9, r7, #0
   88f14:	bfb4      	ite	lt
   88f16:	2301      	movlt	r3, #1
   88f18:	2300      	movge	r3, #0
   88f1a:	602b      	str	r3, [r5, #0]
   88f1c:	4b76      	ldr	r3, [pc, #472]	; (890f8 <_dtoa_r+0x210>)
   88f1e:	bfbc      	itt	lt
   88f20:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   88f24:	f8cd 9014 	strlt.w	r9, [sp, #20]
   88f28:	ea33 0309 	bics.w	r3, r3, r9
   88f2c:	f000 80ab 	beq.w	89086 <_dtoa_r+0x19e>
   88f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88f34:	4610      	mov	r0, r2
   88f36:	4619      	mov	r1, r3
   88f38:	2200      	movs	r2, #0
   88f3a:	2300      	movs	r3, #0
   88f3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   88f40:	f003 fcf8 	bl	8c934 <__aeabi_dcmpeq>
   88f44:	4680      	mov	r8, r0
   88f46:	b170      	cbz	r0, 88f66 <_dtoa_r+0x7e>
   88f48:	2301      	movs	r3, #1
   88f4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88f4c:	6013      	str	r3, [r2, #0]
   88f4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88f50:	2b00      	cmp	r3, #0
   88f52:	f000 82c2 	beq.w	894da <_dtoa_r+0x5f2>
   88f56:	4869      	ldr	r0, [pc, #420]	; (890fc <_dtoa_r+0x214>)
   88f58:	6018      	str	r0, [r3, #0]
   88f5a:	1e43      	subs	r3, r0, #1
   88f5c:	9303      	str	r3, [sp, #12]
   88f5e:	9803      	ldr	r0, [sp, #12]
   88f60:	b01b      	add	sp, #108	; 0x6c
   88f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f66:	aa18      	add	r2, sp, #96	; 0x60
   88f68:	ab19      	add	r3, sp, #100	; 0x64
   88f6a:	e9cd 3200 	strd	r3, r2, [sp]
   88f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88f72:	4620      	mov	r0, r4
   88f74:	f002 fafa 	bl	8b56c <__d2b>
   88f78:	ea5f 5519 	movs.w	r5, r9, lsr #20
   88f7c:	4682      	mov	sl, r0
   88f7e:	f040 8098 	bne.w	890b2 <_dtoa_r+0x1ca>
   88f82:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   88f86:	4445      	add	r5, r8
   88f88:	f205 4032 	addw	r0, r5, #1074	; 0x432
   88f8c:	2820      	cmp	r0, #32
   88f8e:	f340 8390 	ble.w	896b2 <_dtoa_r+0x7ca>
   88f92:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   88f96:	f205 4012 	addw	r0, r5, #1042	; 0x412
   88f9a:	fa09 f903 	lsl.w	r9, r9, r3
   88f9e:	fa26 f000 	lsr.w	r0, r6, r0
   88fa2:	ea49 0000 	orr.w	r0, r9, r0
   88fa6:	f003 f9e3 	bl	8c370 <__aeabi_ui2d>
   88faa:	2201      	movs	r2, #1
   88fac:	3d01      	subs	r5, #1
   88fae:	920f      	str	r2, [sp, #60]	; 0x3c
   88fb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   88fb4:	2200      	movs	r2, #0
   88fb6:	4b52      	ldr	r3, [pc, #328]	; (89100 <_dtoa_r+0x218>)
   88fb8:	f003 f89c 	bl	8c0f4 <__aeabi_dsub>
   88fbc:	a348      	add	r3, pc, #288	; (adr r3, 890e0 <_dtoa_r+0x1f8>)
   88fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   88fc2:	f003 fa4f 	bl	8c464 <__aeabi_dmul>
   88fc6:	a348      	add	r3, pc, #288	; (adr r3, 890e8 <_dtoa_r+0x200>)
   88fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   88fcc:	f003 f894 	bl	8c0f8 <__adddf3>
   88fd0:	4606      	mov	r6, r0
   88fd2:	4628      	mov	r0, r5
   88fd4:	460f      	mov	r7, r1
   88fd6:	f003 f9db 	bl	8c390 <__aeabi_i2d>
   88fda:	a345      	add	r3, pc, #276	; (adr r3, 890f0 <_dtoa_r+0x208>)
   88fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   88fe0:	f003 fa40 	bl	8c464 <__aeabi_dmul>
   88fe4:	4602      	mov	r2, r0
   88fe6:	460b      	mov	r3, r1
   88fe8:	4630      	mov	r0, r6
   88fea:	4639      	mov	r1, r7
   88fec:	f003 f884 	bl	8c0f8 <__adddf3>
   88ff0:	4606      	mov	r6, r0
   88ff2:	460f      	mov	r7, r1
   88ff4:	f003 fce6 	bl	8c9c4 <__aeabi_d2iz>
   88ff8:	2200      	movs	r2, #0
   88ffa:	4683      	mov	fp, r0
   88ffc:	2300      	movs	r3, #0
   88ffe:	4630      	mov	r0, r6
   89000:	4639      	mov	r1, r7
   89002:	f003 fca1 	bl	8c948 <__aeabi_dcmplt>
   89006:	2800      	cmp	r0, #0
   89008:	f040 825a 	bne.w	894c0 <_dtoa_r+0x5d8>
   8900c:	f1bb 0f16 	cmp.w	fp, #22
   89010:	f200 8248 	bhi.w	894a4 <_dtoa_r+0x5bc>
   89014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89018:	4b3a      	ldr	r3, [pc, #232]	; (89104 <_dtoa_r+0x21c>)
   8901a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8901e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89022:	f003 fc91 	bl	8c948 <__aeabi_dcmplt>
   89026:	2800      	cmp	r0, #0
   89028:	d072      	beq.n	89110 <_dtoa_r+0x228>
   8902a:	2300      	movs	r3, #0
   8902c:	eba8 0505 	sub.w	r5, r8, r5
   89030:	930e      	str	r3, [sp, #56]	; 0x38
   89032:	1e6b      	subs	r3, r5, #1
   89034:	f10b 3bff 	add.w	fp, fp, #4294967295
   89038:	9306      	str	r3, [sp, #24]
   8903a:	f100 823b 	bmi.w	894b4 <_dtoa_r+0x5cc>
   8903e:	2300      	movs	r3, #0
   89040:	930b      	str	r3, [sp, #44]	; 0x2c
   89042:	f1bb 0f00 	cmp.w	fp, #0
   89046:	da6b      	bge.n	89120 <_dtoa_r+0x238>
   89048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8904a:	f8cd b01c 	str.w	fp, [sp, #28]
   8904e:	eba3 030b 	sub.w	r3, r3, fp
   89052:	930b      	str	r3, [sp, #44]	; 0x2c
   89054:	f1cb 0300 	rsb	r3, fp, #0
   89058:	930d      	str	r3, [sp, #52]	; 0x34
   8905a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8905c:	f04f 0b00 	mov.w	fp, #0
   89060:	2b09      	cmp	r3, #9
   89062:	d866      	bhi.n	89132 <_dtoa_r+0x24a>
   89064:	2b05      	cmp	r3, #5
   89066:	f340 8322 	ble.w	896ae <_dtoa_r+0x7c6>
   8906a:	2500      	movs	r5, #0
   8906c:	3b04      	subs	r3, #4
   8906e:	9324      	str	r3, [sp, #144]	; 0x90
   89070:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89072:	3b02      	subs	r3, #2
   89074:	2b03      	cmp	r3, #3
   89076:	f200 866e 	bhi.w	89d56 <_dtoa_r+0xe6e>
   8907a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8907e:	043b      	.short	0x043b
   89080:	042f0438 	.word	0x042f0438
   89084:	0412      	.short	0x0412
   89086:	f242 730f 	movw	r3, #9999	; 0x270f
   8908a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8908c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89090:	6013      	str	r3, [r2, #0]
   89092:	ea59 0306 	orrs.w	r3, r9, r6
   89096:	d11c      	bne.n	890d2 <_dtoa_r+0x1ea>
   89098:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8909a:	2b00      	cmp	r3, #0
   8909c:	f000 8657 	beq.w	89d4e <_dtoa_r+0xe66>
   890a0:	4b19      	ldr	r3, [pc, #100]	; (89108 <_dtoa_r+0x220>)
   890a2:	9303      	str	r3, [sp, #12]
   890a4:	3308      	adds	r3, #8
   890a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   890a8:	9803      	ldr	r0, [sp, #12]
   890aa:	6013      	str	r3, [r2, #0]
   890ac:	b01b      	add	sp, #108	; 0x6c
   890ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   890b2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   890b6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   890ba:	4608      	mov	r0, r1
   890bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   890c0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   890c4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   890c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   890cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   890d0:	e770      	b.n	88fb4 <_dtoa_r+0xcc>
   890d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   890d4:	2b00      	cmp	r3, #0
   890d6:	f040 83c8 	bne.w	8986a <_dtoa_r+0x982>
   890da:	4b0c      	ldr	r3, [pc, #48]	; (8910c <_dtoa_r+0x224>)
   890dc:	9303      	str	r3, [sp, #12]
   890de:	e73e      	b.n	88f5e <_dtoa_r+0x76>
   890e0:	636f4361 	.word	0x636f4361
   890e4:	3fd287a7 	.word	0x3fd287a7
   890e8:	8b60c8b3 	.word	0x8b60c8b3
   890ec:	3fc68a28 	.word	0x3fc68a28
   890f0:	509f79fb 	.word	0x509f79fb
   890f4:	3fd34413 	.word	0x3fd34413
   890f8:	7ff00000 	.word	0x7ff00000
   890fc:	0008cc31 	.word	0x0008cc31
   89100:	3ff80000 	.word	0x3ff80000
   89104:	0008cdd0 	.word	0x0008cdd0
   89108:	0008cc78 	.word	0x0008cc78
   8910c:	0008cc74 	.word	0x0008cc74
   89110:	eba8 0505 	sub.w	r5, r8, r5
   89114:	1e6b      	subs	r3, r5, #1
   89116:	9306      	str	r3, [sp, #24]
   89118:	f100 84a9 	bmi.w	89a6e <_dtoa_r+0xb86>
   8911c:	900e      	str	r0, [sp, #56]	; 0x38
   8911e:	900b      	str	r0, [sp, #44]	; 0x2c
   89120:	9b06      	ldr	r3, [sp, #24]
   89122:	445b      	add	r3, fp
   89124:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89128:	2300      	movs	r3, #0
   8912a:	930d      	str	r3, [sp, #52]	; 0x34
   8912c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8912e:	2b09      	cmp	r3, #9
   89130:	d998      	bls.n	89064 <_dtoa_r+0x17c>
   89132:	2300      	movs	r3, #0
   89134:	2501      	movs	r5, #1
   89136:	9324      	str	r3, [sp, #144]	; 0x90
   89138:	9325      	str	r3, [sp, #148]	; 0x94
   8913a:	f04f 33ff 	mov.w	r3, #4294967295
   8913e:	950c      	str	r5, [sp, #48]	; 0x30
   89140:	930a      	str	r3, [sp, #40]	; 0x28
   89142:	2100      	movs	r1, #0
   89144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89146:	6461      	str	r1, [r4, #68]	; 0x44
   89148:	9312      	str	r3, [sp, #72]	; 0x48
   8914a:	4620      	mov	r0, r4
   8914c:	f001 fef4 	bl	8af38 <_Balloc>
   89150:	9003      	str	r0, [sp, #12]
   89152:	2800      	cmp	r0, #0
   89154:	f000 8607 	beq.w	89d66 <_dtoa_r+0xe7e>
   89158:	9b03      	ldr	r3, [sp, #12]
   8915a:	6423      	str	r3, [r4, #64]	; 0x40
   8915c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8915e:	2b0e      	cmp	r3, #14
   89160:	f200 80e9 	bhi.w	89336 <_dtoa_r+0x44e>
   89164:	2d00      	cmp	r5, #0
   89166:	f000 80e6 	beq.w	89336 <_dtoa_r+0x44e>
   8916a:	9907      	ldr	r1, [sp, #28]
   8916c:	2900      	cmp	r1, #0
   8916e:	f340 8452 	ble.w	89a16 <_dtoa_r+0xb2e>
   89172:	4bb5      	ldr	r3, [pc, #724]	; (89448 <_dtoa_r+0x560>)
   89174:	f001 020f 	and.w	r2, r1, #15
   89178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8917c:	05c8      	lsls	r0, r1, #23
   8917e:	ea4f 1521 	mov.w	r5, r1, asr #4
   89182:	e9d3 6700 	ldrd	r6, r7, [r3]
   89186:	f140 83ee 	bpl.w	89966 <_dtoa_r+0xa7e>
   8918a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8918e:	4baf      	ldr	r3, [pc, #700]	; (8944c <_dtoa_r+0x564>)
   89190:	f04f 0903 	mov.w	r9, #3
   89194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89198:	f003 fa8e 	bl	8c6b8 <__aeabi_ddiv>
   8919c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   891a0:	f005 050f 	and.w	r5, r5, #15
   891a4:	b18d      	cbz	r5, 891ca <_dtoa_r+0x2e2>
   891a6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8944c <_dtoa_r+0x564>
   891aa:	07e9      	lsls	r1, r5, #31
   891ac:	d509      	bpl.n	891c2 <_dtoa_r+0x2da>
   891ae:	e9d8 2300 	ldrd	r2, r3, [r8]
   891b2:	4630      	mov	r0, r6
   891b4:	4639      	mov	r1, r7
   891b6:	f003 f955 	bl	8c464 <__aeabi_dmul>
   891ba:	4606      	mov	r6, r0
   891bc:	460f      	mov	r7, r1
   891be:	f109 0901 	add.w	r9, r9, #1
   891c2:	106d      	asrs	r5, r5, #1
   891c4:	f108 0808 	add.w	r8, r8, #8
   891c8:	d1ef      	bne.n	891aa <_dtoa_r+0x2c2>
   891ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   891ce:	4632      	mov	r2, r6
   891d0:	463b      	mov	r3, r7
   891d2:	f003 fa71 	bl	8c6b8 <__aeabi_ddiv>
   891d6:	4606      	mov	r6, r0
   891d8:	460f      	mov	r7, r1
   891da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   891dc:	b143      	cbz	r3, 891f0 <_dtoa_r+0x308>
   891de:	2200      	movs	r2, #0
   891e0:	4630      	mov	r0, r6
   891e2:	4639      	mov	r1, r7
   891e4:	4b9a      	ldr	r3, [pc, #616]	; (89450 <_dtoa_r+0x568>)
   891e6:	f003 fbaf 	bl	8c948 <__aeabi_dcmplt>
   891ea:	2800      	cmp	r0, #0
   891ec:	f040 853b 	bne.w	89c66 <_dtoa_r+0xd7e>
   891f0:	4648      	mov	r0, r9
   891f2:	f003 f8cd 	bl	8c390 <__aeabi_i2d>
   891f6:	4632      	mov	r2, r6
   891f8:	463b      	mov	r3, r7
   891fa:	f003 f933 	bl	8c464 <__aeabi_dmul>
   891fe:	4b95      	ldr	r3, [pc, #596]	; (89454 <_dtoa_r+0x56c>)
   89200:	2200      	movs	r2, #0
   89202:	f002 ff79 	bl	8c0f8 <__adddf3>
   89206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89208:	4680      	mov	r8, r0
   8920a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8920e:	2b00      	cmp	r3, #0
   89210:	f000 83ce 	beq.w	899b0 <_dtoa_r+0xac8>
   89214:	9b07      	ldr	r3, [sp, #28]
   89216:	9313      	str	r3, [sp, #76]	; 0x4c
   89218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8921a:	9310      	str	r3, [sp, #64]	; 0x40
   8921c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8921e:	2b00      	cmp	r3, #0
   89220:	f000 84b7 	beq.w	89b92 <_dtoa_r+0xcaa>
   89224:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89226:	4b88      	ldr	r3, [pc, #544]	; (89448 <_dtoa_r+0x560>)
   89228:	2000      	movs	r0, #0
   8922a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8922e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89232:	4989      	ldr	r1, [pc, #548]	; (89458 <_dtoa_r+0x570>)
   89234:	f003 fa40 	bl	8c6b8 <__aeabi_ddiv>
   89238:	4642      	mov	r2, r8
   8923a:	464b      	mov	r3, r9
   8923c:	f002 ff5a 	bl	8c0f4 <__aeabi_dsub>
   89240:	4602      	mov	r2, r0
   89242:	460b      	mov	r3, r1
   89244:	4630      	mov	r0, r6
   89246:	4639      	mov	r1, r7
   89248:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8924c:	f003 fbba 	bl	8c9c4 <__aeabi_d2iz>
   89250:	4680      	mov	r8, r0
   89252:	f003 f89d 	bl	8c390 <__aeabi_i2d>
   89256:	4602      	mov	r2, r0
   89258:	460b      	mov	r3, r1
   8925a:	4630      	mov	r0, r6
   8925c:	4639      	mov	r1, r7
   8925e:	f002 ff49 	bl	8c0f4 <__aeabi_dsub>
   89262:	9d03      	ldr	r5, [sp, #12]
   89264:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89268:	4606      	mov	r6, r0
   8926a:	460f      	mov	r7, r1
   8926c:	4602      	mov	r2, r0
   8926e:	f805 3b01 	strb.w	r3, [r5], #1
   89272:	460b      	mov	r3, r1
   89274:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89278:	f003 fb84 	bl	8c984 <__aeabi_dcmpgt>
   8927c:	2800      	cmp	r0, #0
   8927e:	f040 853b 	bne.w	89cf8 <_dtoa_r+0xe10>
   89282:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   89286:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8928a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8928e:	f04f 0900 	mov.w	r9, #0
   89292:	9410      	str	r4, [sp, #64]	; 0x40
   89294:	e02a      	b.n	892ec <_dtoa_r+0x404>
   89296:	f109 0901 	add.w	r9, r9, #1
   8929a:	45c1      	cmp	r9, r8
   8929c:	da48      	bge.n	89330 <_dtoa_r+0x448>
   8929e:	4650      	mov	r0, sl
   892a0:	4659      	mov	r1, fp
   892a2:	2200      	movs	r2, #0
   892a4:	4b6d      	ldr	r3, [pc, #436]	; (8945c <_dtoa_r+0x574>)
   892a6:	f003 f8dd 	bl	8c464 <__aeabi_dmul>
   892aa:	2200      	movs	r2, #0
   892ac:	4b6b      	ldr	r3, [pc, #428]	; (8945c <_dtoa_r+0x574>)
   892ae:	4682      	mov	sl, r0
   892b0:	468b      	mov	fp, r1
   892b2:	4630      	mov	r0, r6
   892b4:	4639      	mov	r1, r7
   892b6:	f003 f8d5 	bl	8c464 <__aeabi_dmul>
   892ba:	460f      	mov	r7, r1
   892bc:	4606      	mov	r6, r0
   892be:	f003 fb81 	bl	8c9c4 <__aeabi_d2iz>
   892c2:	4604      	mov	r4, r0
   892c4:	f003 f864 	bl	8c390 <__aeabi_i2d>
   892c8:	4602      	mov	r2, r0
   892ca:	460b      	mov	r3, r1
   892cc:	4630      	mov	r0, r6
   892ce:	4639      	mov	r1, r7
   892d0:	f002 ff10 	bl	8c0f4 <__aeabi_dsub>
   892d4:	3430      	adds	r4, #48	; 0x30
   892d6:	4652      	mov	r2, sl
   892d8:	465b      	mov	r3, fp
   892da:	f805 4b01 	strb.w	r4, [r5], #1
   892de:	4606      	mov	r6, r0
   892e0:	460f      	mov	r7, r1
   892e2:	f003 fb31 	bl	8c948 <__aeabi_dcmplt>
   892e6:	2800      	cmp	r0, #0
   892e8:	f040 8503 	bne.w	89cf2 <_dtoa_r+0xe0a>
   892ec:	4632      	mov	r2, r6
   892ee:	463b      	mov	r3, r7
   892f0:	2000      	movs	r0, #0
   892f2:	4957      	ldr	r1, [pc, #348]	; (89450 <_dtoa_r+0x568>)
   892f4:	f002 fefe 	bl	8c0f4 <__aeabi_dsub>
   892f8:	4652      	mov	r2, sl
   892fa:	465b      	mov	r3, fp
   892fc:	f003 fb24 	bl	8c948 <__aeabi_dcmplt>
   89300:	2800      	cmp	r0, #0
   89302:	d0c8      	beq.n	89296 <_dtoa_r+0x3ae>
   89304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89306:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8930a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8930c:	9a03      	ldr	r2, [sp, #12]
   8930e:	9307      	str	r3, [sp, #28]
   89310:	e002      	b.n	89318 <_dtoa_r+0x430>
   89312:	4295      	cmp	r5, r2
   89314:	f000 84d2 	beq.w	89cbc <_dtoa_r+0xdd4>
   89318:	46a9      	mov	r9, r5
   8931a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8931e:	2b39      	cmp	r3, #57	; 0x39
   89320:	d0f7      	beq.n	89312 <_dtoa_r+0x42a>
   89322:	3301      	adds	r3, #1
   89324:	b2db      	uxtb	r3, r3
   89326:	702b      	strb	r3, [r5, #0]
   89328:	9b07      	ldr	r3, [sp, #28]
   8932a:	3301      	adds	r3, #1
   8932c:	9307      	str	r3, [sp, #28]
   8932e:	e1a0      	b.n	89672 <_dtoa_r+0x78a>
   89330:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89332:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89336:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89338:	2b00      	cmp	r3, #0
   8933a:	f2c0 8093 	blt.w	89464 <_dtoa_r+0x57c>
   8933e:	9a07      	ldr	r2, [sp, #28]
   89340:	2a0e      	cmp	r2, #14
   89342:	f300 808f 	bgt.w	89464 <_dtoa_r+0x57c>
   89346:	4b40      	ldr	r3, [pc, #256]	; (89448 <_dtoa_r+0x560>)
   89348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8934c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89350:	e9cd 2304 	strd	r2, r3, [sp, #16]
   89354:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89356:	2b00      	cmp	r3, #0
   89358:	da1a      	bge.n	89390 <_dtoa_r+0x4a8>
   8935a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8935c:	2b00      	cmp	r3, #0
   8935e:	dc17      	bgt.n	89390 <_dtoa_r+0x4a8>
   89360:	f040 833f 	bne.w	899e2 <_dtoa_r+0xafa>
   89364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89368:	2200      	movs	r2, #0
   8936a:	4b3d      	ldr	r3, [pc, #244]	; (89460 <_dtoa_r+0x578>)
   8936c:	f003 f87a 	bl	8c464 <__aeabi_dmul>
   89370:	4602      	mov	r2, r0
   89372:	460b      	mov	r3, r1
   89374:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89378:	f003 faf0 	bl	8c95c <__aeabi_dcmple>
   8937c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   89380:	4645      	mov	r5, r8
   89382:	2800      	cmp	r0, #0
   89384:	f000 82cd 	beq.w	89922 <_dtoa_r+0xa3a>
   89388:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8938a:	9f03      	ldr	r7, [sp, #12]
   8938c:	43de      	mvns	r6, r3
   8938e:	e2d0      	b.n	89932 <_dtoa_r+0xa4a>
   89390:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   89394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89398:	4632      	mov	r2, r6
   8939a:	463b      	mov	r3, r7
   8939c:	f003 f98c 	bl	8c6b8 <__aeabi_ddiv>
   893a0:	f003 fb10 	bl	8c9c4 <__aeabi_d2iz>
   893a4:	4680      	mov	r8, r0
   893a6:	f002 fff3 	bl	8c390 <__aeabi_i2d>
   893aa:	4632      	mov	r2, r6
   893ac:	463b      	mov	r3, r7
   893ae:	f003 f859 	bl	8c464 <__aeabi_dmul>
   893b2:	460b      	mov	r3, r1
   893b4:	4602      	mov	r2, r0
   893b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   893ba:	f002 fe9b 	bl	8c0f4 <__aeabi_dsub>
   893be:	9d03      	ldr	r5, [sp, #12]
   893c0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   893c4:	f805 3b01 	strb.w	r3, [r5], #1
   893c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893ca:	2b01      	cmp	r3, #1
   893cc:	f000 837f 	beq.w	89ace <_dtoa_r+0xbe6>
   893d0:	f8cd a018 	str.w	sl, [sp, #24]
   893d4:	f04f 0901 	mov.w	r9, #1
   893d8:	469b      	mov	fp, r3
   893da:	46aa      	mov	sl, r5
   893dc:	9408      	str	r4, [sp, #32]
   893de:	e01d      	b.n	8941c <_dtoa_r+0x534>
   893e0:	4632      	mov	r2, r6
   893e2:	463b      	mov	r3, r7
   893e4:	4620      	mov	r0, r4
   893e6:	4629      	mov	r1, r5
   893e8:	f003 f966 	bl	8c6b8 <__aeabi_ddiv>
   893ec:	f003 faea 	bl	8c9c4 <__aeabi_d2iz>
   893f0:	4680      	mov	r8, r0
   893f2:	f002 ffcd 	bl	8c390 <__aeabi_i2d>
   893f6:	4632      	mov	r2, r6
   893f8:	463b      	mov	r3, r7
   893fa:	f003 f833 	bl	8c464 <__aeabi_dmul>
   893fe:	f109 0901 	add.w	r9, r9, #1
   89402:	460b      	mov	r3, r1
   89404:	4602      	mov	r2, r0
   89406:	4629      	mov	r1, r5
   89408:	4620      	mov	r0, r4
   8940a:	f002 fe73 	bl	8c0f4 <__aeabi_dsub>
   8940e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89412:	45cb      	cmp	fp, r9
   89414:	f80a 3b01 	strb.w	r3, [sl], #1
   89418:	f000 8355 	beq.w	89ac6 <_dtoa_r+0xbde>
   8941c:	2200      	movs	r2, #0
   8941e:	4b0f      	ldr	r3, [pc, #60]	; (8945c <_dtoa_r+0x574>)
   89420:	f003 f820 	bl	8c464 <__aeabi_dmul>
   89424:	2200      	movs	r2, #0
   89426:	2300      	movs	r3, #0
   89428:	4604      	mov	r4, r0
   8942a:	460d      	mov	r5, r1
   8942c:	f003 fa82 	bl	8c934 <__aeabi_dcmpeq>
   89430:	2800      	cmp	r0, #0
   89432:	d0d5      	beq.n	893e0 <_dtoa_r+0x4f8>
   89434:	4655      	mov	r5, sl
   89436:	9c08      	ldr	r4, [sp, #32]
   89438:	f8dd a018 	ldr.w	sl, [sp, #24]
   8943c:	9b07      	ldr	r3, [sp, #28]
   8943e:	46a9      	mov	r9, r5
   89440:	3301      	adds	r3, #1
   89442:	9307      	str	r3, [sp, #28]
   89444:	e115      	b.n	89672 <_dtoa_r+0x78a>
   89446:	bf00      	nop
   89448:	0008cdd0 	.word	0x0008cdd0
   8944c:	0008cda8 	.word	0x0008cda8
   89450:	3ff00000 	.word	0x3ff00000
   89454:	401c0000 	.word	0x401c0000
   89458:	3fe00000 	.word	0x3fe00000
   8945c:	40240000 	.word	0x40240000
   89460:	40140000 	.word	0x40140000
   89464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89466:	2a00      	cmp	r2, #0
   89468:	d03d      	beq.n	894e6 <_dtoa_r+0x5fe>
   8946a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8946c:	2a01      	cmp	r2, #1
   8946e:	f340 82bc 	ble.w	899ea <_dtoa_r+0xb02>
   89472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89474:	1e5f      	subs	r7, r3, #1
   89476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89478:	42bb      	cmp	r3, r7
   8947a:	f2c0 826e 	blt.w	8995a <_dtoa_r+0xa72>
   8947e:	1bdf      	subs	r7, r3, r7
   89480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89482:	2b00      	cmp	r3, #0
   89484:	f2c0 8354 	blt.w	89b30 <_dtoa_r+0xc48>
   89488:	9a06      	ldr	r2, [sp, #24]
   8948a:	4611      	mov	r1, r2
   8948c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8948e:	4419      	add	r1, r3
   89490:	4616      	mov	r6, r2
   89492:	441a      	add	r2, r3
   89494:	9106      	str	r1, [sp, #24]
   89496:	920b      	str	r2, [sp, #44]	; 0x2c
   89498:	2101      	movs	r1, #1
   8949a:	4620      	mov	r0, r4
   8949c:	f001 fe1a 	bl	8b0d4 <__i2b>
   894a0:	4605      	mov	r5, r0
   894a2:	e023      	b.n	894ec <_dtoa_r+0x604>
   894a4:	2301      	movs	r3, #1
   894a6:	eba8 0505 	sub.w	r5, r8, r5
   894aa:	930e      	str	r3, [sp, #56]	; 0x38
   894ac:	1e6b      	subs	r3, r5, #1
   894ae:	9306      	str	r3, [sp, #24]
   894b0:	f57f adc5 	bpl.w	8903e <_dtoa_r+0x156>
   894b4:	f1c5 0301 	rsb	r3, r5, #1
   894b8:	930b      	str	r3, [sp, #44]	; 0x2c
   894ba:	2300      	movs	r3, #0
   894bc:	9306      	str	r3, [sp, #24]
   894be:	e5c0      	b.n	89042 <_dtoa_r+0x15a>
   894c0:	4658      	mov	r0, fp
   894c2:	f002 ff65 	bl	8c390 <__aeabi_i2d>
   894c6:	4632      	mov	r2, r6
   894c8:	463b      	mov	r3, r7
   894ca:	f003 fa33 	bl	8c934 <__aeabi_dcmpeq>
   894ce:	2800      	cmp	r0, #0
   894d0:	f47f ad9c 	bne.w	8900c <_dtoa_r+0x124>
   894d4:	f10b 3bff 	add.w	fp, fp, #4294967295
   894d8:	e598      	b.n	8900c <_dtoa_r+0x124>
   894da:	4bc7      	ldr	r3, [pc, #796]	; (897f8 <_dtoa_r+0x910>)
   894dc:	9303      	str	r3, [sp, #12]
   894de:	9803      	ldr	r0, [sp, #12]
   894e0:	b01b      	add	sp, #108	; 0x6c
   894e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   894e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   894e8:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   894ec:	2e00      	cmp	r6, #0
   894ee:	dd0c      	ble.n	8950a <_dtoa_r+0x622>
   894f0:	9a06      	ldr	r2, [sp, #24]
   894f2:	2a00      	cmp	r2, #0
   894f4:	dd09      	ble.n	8950a <_dtoa_r+0x622>
   894f6:	42b2      	cmp	r2, r6
   894f8:	4613      	mov	r3, r2
   894fa:	bfa8      	it	ge
   894fc:	4633      	movge	r3, r6
   894fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89500:	1af6      	subs	r6, r6, r3
   89502:	1ac9      	subs	r1, r1, r3
   89504:	1ad3      	subs	r3, r2, r3
   89506:	910b      	str	r1, [sp, #44]	; 0x2c
   89508:	9306      	str	r3, [sp, #24]
   8950a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8950c:	b1d3      	cbz	r3, 89544 <_dtoa_r+0x65c>
   8950e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89510:	2b00      	cmp	r3, #0
   89512:	f000 81a3 	beq.w	8985c <_dtoa_r+0x974>
   89516:	2f00      	cmp	r7, #0
   89518:	dd10      	ble.n	8953c <_dtoa_r+0x654>
   8951a:	4629      	mov	r1, r5
   8951c:	463a      	mov	r2, r7
   8951e:	4620      	mov	r0, r4
   89520:	f001 fe9e 	bl	8b260 <__pow5mult>
   89524:	4652      	mov	r2, sl
   89526:	4601      	mov	r1, r0
   89528:	4605      	mov	r5, r0
   8952a:	4620      	mov	r0, r4
   8952c:	f001 fde8 	bl	8b100 <__multiply>
   89530:	4603      	mov	r3, r0
   89532:	4651      	mov	r1, sl
   89534:	4620      	mov	r0, r4
   89536:	469a      	mov	sl, r3
   89538:	f001 fd24 	bl	8af84 <_Bfree>
   8953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8953e:	1bda      	subs	r2, r3, r7
   89540:	f040 818d 	bne.w	8985e <_dtoa_r+0x976>
   89544:	2101      	movs	r1, #1
   89546:	4620      	mov	r0, r4
   89548:	f001 fdc4 	bl	8b0d4 <__i2b>
   8954c:	f1bb 0f00 	cmp.w	fp, #0
   89550:	4680      	mov	r8, r0
   89552:	f300 80b3 	bgt.w	896bc <_dtoa_r+0x7d4>
   89556:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89558:	2b01      	cmp	r3, #1
   8955a:	f340 818a 	ble.w	89872 <_dtoa_r+0x98a>
   8955e:	f04f 0900 	mov.w	r9, #0
   89562:	2001      	movs	r0, #1
   89564:	f1bb 0f00 	cmp.w	fp, #0
   89568:	f040 80b4 	bne.w	896d4 <_dtoa_r+0x7ec>
   8956c:	9a06      	ldr	r2, [sp, #24]
   8956e:	4410      	add	r0, r2
   89570:	f010 001f 	ands.w	r0, r0, #31
   89574:	f000 8092 	beq.w	8969c <_dtoa_r+0x7b4>
   89578:	f1c0 0320 	rsb	r3, r0, #32
   8957c:	2b04      	cmp	r3, #4
   8957e:	f340 83f9 	ble.w	89d74 <_dtoa_r+0xe8c>
   89582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89584:	f1c0 001c 	rsb	r0, r0, #28
   89588:	4403      	add	r3, r0
   8958a:	4402      	add	r2, r0
   8958c:	930b      	str	r3, [sp, #44]	; 0x2c
   8958e:	4406      	add	r6, r0
   89590:	9206      	str	r2, [sp, #24]
   89592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89594:	2b00      	cmp	r3, #0
   89596:	dd05      	ble.n	895a4 <_dtoa_r+0x6bc>
   89598:	4651      	mov	r1, sl
   8959a:	461a      	mov	r2, r3
   8959c:	4620      	mov	r0, r4
   8959e:	f001 feab 	bl	8b2f8 <__lshift>
   895a2:	4682      	mov	sl, r0
   895a4:	9b06      	ldr	r3, [sp, #24]
   895a6:	2b00      	cmp	r3, #0
   895a8:	dd05      	ble.n	895b6 <_dtoa_r+0x6ce>
   895aa:	4641      	mov	r1, r8
   895ac:	461a      	mov	r2, r3
   895ae:	4620      	mov	r0, r4
   895b0:	f001 fea2 	bl	8b2f8 <__lshift>
   895b4:	4680      	mov	r8, r0
   895b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   895b8:	2b00      	cmp	r3, #0
   895ba:	f040 8135 	bne.w	89828 <_dtoa_r+0x940>
   895be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   895c0:	2b00      	cmp	r3, #0
   895c2:	f340 811b 	ble.w	897fc <_dtoa_r+0x914>
   895c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   895c8:	2b00      	cmp	r3, #0
   895ca:	f040 809a 	bne.w	89702 <_dtoa_r+0x81a>
   895ce:	9b07      	ldr	r3, [sp, #28]
   895d0:	3301      	adds	r3, #1
   895d2:	9307      	str	r3, [sp, #28]
   895d4:	2601      	movs	r6, #1
   895d6:	9f03      	ldr	r7, [sp, #12]
   895d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   895dc:	e007      	b.n	895ee <_dtoa_r+0x706>
   895de:	4651      	mov	r1, sl
   895e0:	2300      	movs	r3, #0
   895e2:	220a      	movs	r2, #10
   895e4:	4620      	mov	r0, r4
   895e6:	f001 fcd7 	bl	8af98 <__multadd>
   895ea:	4682      	mov	sl, r0
   895ec:	3601      	adds	r6, #1
   895ee:	4641      	mov	r1, r8
   895f0:	4650      	mov	r0, sl
   895f2:	f7ff fbe7 	bl	88dc4 <quorem>
   895f6:	454e      	cmp	r6, r9
   895f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   895fc:	f807 3b01 	strb.w	r3, [r7], #1
   89600:	dbed      	blt.n	895de <_dtoa_r+0x6f6>
   89602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89604:	2600      	movs	r6, #0
   89606:	2a00      	cmp	r2, #0
   89608:	bfcc      	ite	gt
   8960a:	4693      	movgt	fp, r2
   8960c:	f04f 0b01 	movle.w	fp, #1
   89610:	9a03      	ldr	r2, [sp, #12]
   89612:	4493      	add	fp, r2
   89614:	4651      	mov	r1, sl
   89616:	2201      	movs	r2, #1
   89618:	4620      	mov	r0, r4
   8961a:	9304      	str	r3, [sp, #16]
   8961c:	f001 fe6c 	bl	8b2f8 <__lshift>
   89620:	4641      	mov	r1, r8
   89622:	4682      	mov	sl, r0
   89624:	f001 fedc 	bl	8b3e0 <__mcmp>
   89628:	2800      	cmp	r0, #0
   8962a:	f340 81a8 	ble.w	8997e <_dtoa_r+0xa96>
   8962e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89632:	9a03      	ldr	r2, [sp, #12]
   89634:	f10b 3bff 	add.w	fp, fp, #4294967295
   89638:	e004      	b.n	89644 <_dtoa_r+0x75c>
   8963a:	455a      	cmp	r2, fp
   8963c:	f000 81e4 	beq.w	89a08 <_dtoa_r+0xb20>
   89640:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89644:	2b39      	cmp	r3, #57	; 0x39
   89646:	f10b 0901 	add.w	r9, fp, #1
   8964a:	d0f6      	beq.n	8963a <_dtoa_r+0x752>
   8964c:	3301      	adds	r3, #1
   8964e:	f88b 3000 	strb.w	r3, [fp]
   89652:	4641      	mov	r1, r8
   89654:	4620      	mov	r0, r4
   89656:	f001 fc95 	bl	8af84 <_Bfree>
   8965a:	b155      	cbz	r5, 89672 <_dtoa_r+0x78a>
   8965c:	b12e      	cbz	r6, 8966a <_dtoa_r+0x782>
   8965e:	42ae      	cmp	r6, r5
   89660:	d003      	beq.n	8966a <_dtoa_r+0x782>
   89662:	4631      	mov	r1, r6
   89664:	4620      	mov	r0, r4
   89666:	f001 fc8d 	bl	8af84 <_Bfree>
   8966a:	4629      	mov	r1, r5
   8966c:	4620      	mov	r0, r4
   8966e:	f001 fc89 	bl	8af84 <_Bfree>
   89672:	4651      	mov	r1, sl
   89674:	4620      	mov	r0, r4
   89676:	f001 fc85 	bl	8af84 <_Bfree>
   8967a:	2300      	movs	r3, #0
   8967c:	f889 3000 	strb.w	r3, [r9]
   89680:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89682:	461a      	mov	r2, r3
   89684:	9b07      	ldr	r3, [sp, #28]
   89686:	6013      	str	r3, [r2, #0]
   89688:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8968a:	2b00      	cmp	r3, #0
   8968c:	f43f ac67 	beq.w	88f5e <_dtoa_r+0x76>
   89690:	9803      	ldr	r0, [sp, #12]
   89692:	f8c3 9000 	str.w	r9, [r3]
   89696:	b01b      	add	sp, #108	; 0x6c
   89698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8969c:	201c      	movs	r0, #28
   8969e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   896a0:	4406      	add	r6, r0
   896a2:	4403      	add	r3, r0
   896a4:	930b      	str	r3, [sp, #44]	; 0x2c
   896a6:	9b06      	ldr	r3, [sp, #24]
   896a8:	4403      	add	r3, r0
   896aa:	9306      	str	r3, [sp, #24]
   896ac:	e771      	b.n	89592 <_dtoa_r+0x6aa>
   896ae:	2501      	movs	r5, #1
   896b0:	e4de      	b.n	89070 <_dtoa_r+0x188>
   896b2:	f1c0 0020 	rsb	r0, r0, #32
   896b6:	fa06 f000 	lsl.w	r0, r6, r0
   896ba:	e474      	b.n	88fa6 <_dtoa_r+0xbe>
   896bc:	4601      	mov	r1, r0
   896be:	465a      	mov	r2, fp
   896c0:	4620      	mov	r0, r4
   896c2:	f001 fdcd 	bl	8b260 <__pow5mult>
   896c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896c8:	4680      	mov	r8, r0
   896ca:	2b01      	cmp	r3, #1
   896cc:	f340 81d1 	ble.w	89a72 <_dtoa_r+0xb8a>
   896d0:	f04f 0900 	mov.w	r9, #0
   896d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   896d8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   896dc:	6918      	ldr	r0, [r3, #16]
   896de:	f001 fca9 	bl	8b034 <__hi0bits>
   896e2:	f1c0 0020 	rsb	r0, r0, #32
   896e6:	e741      	b.n	8956c <_dtoa_r+0x684>
   896e8:	4629      	mov	r1, r5
   896ea:	2300      	movs	r3, #0
   896ec:	220a      	movs	r2, #10
   896ee:	4620      	mov	r0, r4
   896f0:	f001 fc52 	bl	8af98 <__multadd>
   896f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   896f6:	4605      	mov	r5, r0
   896f8:	2b00      	cmp	r3, #0
   896fa:	f340 8315 	ble.w	89d28 <_dtoa_r+0xe40>
   896fe:	9707      	str	r7, [sp, #28]
   89700:	930a      	str	r3, [sp, #40]	; 0x28
   89702:	2e00      	cmp	r6, #0
   89704:	f300 8122 	bgt.w	8994c <_dtoa_r+0xa64>
   89708:	f1b9 0f00 	cmp.w	r9, #0
   8970c:	f040 81f9 	bne.w	89b02 <_dtoa_r+0xc1a>
   89710:	462f      	mov	r7, r5
   89712:	9903      	ldr	r1, [sp, #12]
   89714:	9b04      	ldr	r3, [sp, #16]
   89716:	460e      	mov	r6, r1
   89718:	f003 0201 	and.w	r2, r3, #1
   8971c:	1e4b      	subs	r3, r1, #1
   8971e:	9924      	ldr	r1, [sp, #144]	; 0x90
   89720:	920c      	str	r2, [sp, #48]	; 0x30
   89722:	430a      	orrs	r2, r1
   89724:	920b      	str	r2, [sp, #44]	; 0x2c
   89726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89728:	441a      	add	r2, r3
   8972a:	920a      	str	r2, [sp, #40]	; 0x28
   8972c:	4641      	mov	r1, r8
   8972e:	4650      	mov	r0, sl
   89730:	f7ff fb48 	bl	88dc4 <quorem>
   89734:	4629      	mov	r1, r5
   89736:	4683      	mov	fp, r0
   89738:	4650      	mov	r0, sl
   8973a:	f001 fe51 	bl	8b3e0 <__mcmp>
   8973e:	463a      	mov	r2, r7
   89740:	4641      	mov	r1, r8
   89742:	4681      	mov	r9, r0
   89744:	4620      	mov	r0, r4
   89746:	f001 fe69 	bl	8b41c <__mdiff>
   8974a:	68c2      	ldr	r2, [r0, #12]
   8974c:	4601      	mov	r1, r0
   8974e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89752:	2a00      	cmp	r2, #0
   89754:	d142      	bne.n	897dc <_dtoa_r+0x8f4>
   89756:	9006      	str	r0, [sp, #24]
   89758:	4650      	mov	r0, sl
   8975a:	9308      	str	r3, [sp, #32]
   8975c:	f001 fe40 	bl	8b3e0 <__mcmp>
   89760:	9906      	ldr	r1, [sp, #24]
   89762:	9004      	str	r0, [sp, #16]
   89764:	4620      	mov	r0, r4
   89766:	f001 fc0d 	bl	8af84 <_Bfree>
   8976a:	9a04      	ldr	r2, [sp, #16]
   8976c:	9b08      	ldr	r3, [sp, #32]
   8976e:	b91a      	cbnz	r2, 89778 <_dtoa_r+0x890>
   89770:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89772:	2900      	cmp	r1, #0
   89774:	f000 82cb 	beq.w	89d0e <_dtoa_r+0xe26>
   89778:	f1b9 0f00 	cmp.w	r9, #0
   8977c:	f2c0 8185 	blt.w	89a8a <_dtoa_r+0xba2>
   89780:	9924      	ldr	r1, [sp, #144]	; 0x90
   89782:	ea41 0909 	orr.w	r9, r1, r9
   89786:	990c      	ldr	r1, [sp, #48]	; 0x30
   89788:	ea51 0109 	orrs.w	r1, r1, r9
   8978c:	f000 817d 	beq.w	89a8a <_dtoa_r+0xba2>
   89790:	2a00      	cmp	r2, #0
   89792:	f300 81d1 	bgt.w	89b38 <_dtoa_r+0xc50>
   89796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89798:	f106 0901 	add.w	r9, r6, #1
   8979c:	4296      	cmp	r6, r2
   8979e:	46cb      	mov	fp, r9
   897a0:	7033      	strb	r3, [r6, #0]
   897a2:	f000 81e3 	beq.w	89b6c <_dtoa_r+0xc84>
   897a6:	4651      	mov	r1, sl
   897a8:	2300      	movs	r3, #0
   897aa:	220a      	movs	r2, #10
   897ac:	4620      	mov	r0, r4
   897ae:	f001 fbf3 	bl	8af98 <__multadd>
   897b2:	42bd      	cmp	r5, r7
   897b4:	4682      	mov	sl, r0
   897b6:	4629      	mov	r1, r5
   897b8:	f04f 0300 	mov.w	r3, #0
   897bc:	f04f 020a 	mov.w	r2, #10
   897c0:	4620      	mov	r0, r4
   897c2:	d012      	beq.n	897ea <_dtoa_r+0x902>
   897c4:	f001 fbe8 	bl	8af98 <__multadd>
   897c8:	4639      	mov	r1, r7
   897ca:	4605      	mov	r5, r0
   897cc:	2300      	movs	r3, #0
   897ce:	220a      	movs	r2, #10
   897d0:	4620      	mov	r0, r4
   897d2:	f001 fbe1 	bl	8af98 <__multadd>
   897d6:	464e      	mov	r6, r9
   897d8:	4607      	mov	r7, r0
   897da:	e7a7      	b.n	8972c <_dtoa_r+0x844>
   897dc:	4620      	mov	r0, r4
   897de:	9304      	str	r3, [sp, #16]
   897e0:	f001 fbd0 	bl	8af84 <_Bfree>
   897e4:	2201      	movs	r2, #1
   897e6:	9b04      	ldr	r3, [sp, #16]
   897e8:	e7c6      	b.n	89778 <_dtoa_r+0x890>
   897ea:	f001 fbd5 	bl	8af98 <__multadd>
   897ee:	464e      	mov	r6, r9
   897f0:	4605      	mov	r5, r0
   897f2:	4607      	mov	r7, r0
   897f4:	e79a      	b.n	8972c <_dtoa_r+0x844>
   897f6:	bf00      	nop
   897f8:	0008cc30 	.word	0x0008cc30
   897fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   897fe:	2b02      	cmp	r3, #2
   89800:	dc7e      	bgt.n	89900 <_dtoa_r+0xa18>
   89802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89804:	2b00      	cmp	r3, #0
   89806:	f47f af7c 	bne.w	89702 <_dtoa_r+0x81a>
   8980a:	4641      	mov	r1, r8
   8980c:	4650      	mov	r0, sl
   8980e:	f7ff fad9 	bl	88dc4 <quorem>
   89812:	9a07      	ldr	r2, [sp, #28]
   89814:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89818:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8981c:	3201      	adds	r2, #1
   8981e:	2600      	movs	r6, #0
   89820:	9207      	str	r2, [sp, #28]
   89822:	f80b 3b01 	strb.w	r3, [fp], #1
   89826:	e6f5      	b.n	89614 <_dtoa_r+0x72c>
   89828:	4641      	mov	r1, r8
   8982a:	4650      	mov	r0, sl
   8982c:	f001 fdd8 	bl	8b3e0 <__mcmp>
   89830:	2800      	cmp	r0, #0
   89832:	f6bf aec4 	bge.w	895be <_dtoa_r+0x6d6>
   89836:	4651      	mov	r1, sl
   89838:	2300      	movs	r3, #0
   8983a:	220a      	movs	r2, #10
   8983c:	4620      	mov	r0, r4
   8983e:	f001 fbab 	bl	8af98 <__multadd>
   89842:	9b07      	ldr	r3, [sp, #28]
   89844:	4682      	mov	sl, r0
   89846:	1e5f      	subs	r7, r3, #1
   89848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8984a:	2b00      	cmp	r3, #0
   8984c:	f47f af4c 	bne.w	896e8 <_dtoa_r+0x800>
   89850:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89852:	2b00      	cmp	r3, #0
   89854:	f340 8262 	ble.w	89d1c <_dtoa_r+0xe34>
   89858:	930a      	str	r3, [sp, #40]	; 0x28
   8985a:	e6bb      	b.n	895d4 <_dtoa_r+0x6ec>
   8985c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8985e:	4651      	mov	r1, sl
   89860:	4620      	mov	r0, r4
   89862:	f001 fcfd 	bl	8b260 <__pow5mult>
   89866:	4682      	mov	sl, r0
   89868:	e66c      	b.n	89544 <_dtoa_r+0x65c>
   8986a:	4bba      	ldr	r3, [pc, #744]	; (89b54 <_dtoa_r+0xc6c>)
   8986c:	9303      	str	r3, [sp, #12]
   8986e:	3303      	adds	r3, #3
   89870:	e419      	b.n	890a6 <_dtoa_r+0x1be>
   89872:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89876:	2900      	cmp	r1, #0
   89878:	f47f ae71 	bne.w	8955e <_dtoa_r+0x676>
   8987c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89880:	2b00      	cmp	r3, #0
   89882:	f47f ae6c 	bne.w	8955e <_dtoa_r+0x676>
   89886:	4bb4      	ldr	r3, [pc, #720]	; (89b58 <_dtoa_r+0xc70>)
   89888:	4013      	ands	r3, r2
   8988a:	2b00      	cmp	r3, #0
   8988c:	f000 822a 	beq.w	89ce4 <_dtoa_r+0xdfc>
   89890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89892:	f04f 0901 	mov.w	r9, #1
   89896:	3301      	adds	r3, #1
   89898:	930b      	str	r3, [sp, #44]	; 0x2c
   8989a:	9b06      	ldr	r3, [sp, #24]
   8989c:	3301      	adds	r3, #1
   8989e:	9306      	str	r3, [sp, #24]
   898a0:	e65f      	b.n	89562 <_dtoa_r+0x67a>
   898a2:	2301      	movs	r3, #1
   898a4:	930c      	str	r3, [sp, #48]	; 0x30
   898a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   898a8:	9a07      	ldr	r2, [sp, #28]
   898aa:	4413      	add	r3, r2
   898ac:	9312      	str	r3, [sp, #72]	; 0x48
   898ae:	3301      	adds	r3, #1
   898b0:	2b01      	cmp	r3, #1
   898b2:	461e      	mov	r6, r3
   898b4:	bfb8      	it	lt
   898b6:	2601      	movlt	r6, #1
   898b8:	930a      	str	r3, [sp, #40]	; 0x28
   898ba:	2100      	movs	r1, #0
   898bc:	2e17      	cmp	r6, #23
   898be:	6461      	str	r1, [r4, #68]	; 0x44
   898c0:	f77f ac43 	ble.w	8914a <_dtoa_r+0x262>
   898c4:	2201      	movs	r2, #1
   898c6:	2304      	movs	r3, #4
   898c8:	005b      	lsls	r3, r3, #1
   898ca:	f103 0014 	add.w	r0, r3, #20
   898ce:	42b0      	cmp	r0, r6
   898d0:	4611      	mov	r1, r2
   898d2:	f102 0201 	add.w	r2, r2, #1
   898d6:	d9f7      	bls.n	898c8 <_dtoa_r+0x9e0>
   898d8:	6461      	str	r1, [r4, #68]	; 0x44
   898da:	e436      	b.n	8914a <_dtoa_r+0x262>
   898dc:	2301      	movs	r3, #1
   898de:	930c      	str	r3, [sp, #48]	; 0x30
   898e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   898e2:	2b00      	cmp	r3, #0
   898e4:	dd46      	ble.n	89974 <_dtoa_r+0xa8c>
   898e6:	461e      	mov	r6, r3
   898e8:	9312      	str	r3, [sp, #72]	; 0x48
   898ea:	930a      	str	r3, [sp, #40]	; 0x28
   898ec:	e7e5      	b.n	898ba <_dtoa_r+0x9d2>
   898ee:	2300      	movs	r3, #0
   898f0:	930c      	str	r3, [sp, #48]	; 0x30
   898f2:	e7d8      	b.n	898a6 <_dtoa_r+0x9be>
   898f4:	2300      	movs	r3, #0
   898f6:	930c      	str	r3, [sp, #48]	; 0x30
   898f8:	e7f2      	b.n	898e0 <_dtoa_r+0x9f8>
   898fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   898fc:	9707      	str	r7, [sp, #28]
   898fe:	930a      	str	r3, [sp, #40]	; 0x28
   89900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89902:	2b00      	cmp	r3, #0
   89904:	f47f ad40 	bne.w	89388 <_dtoa_r+0x4a0>
   89908:	4641      	mov	r1, r8
   8990a:	2205      	movs	r2, #5
   8990c:	4620      	mov	r0, r4
   8990e:	f001 fb43 	bl	8af98 <__multadd>
   89912:	4680      	mov	r8, r0
   89914:	4650      	mov	r0, sl
   89916:	4641      	mov	r1, r8
   89918:	f001 fd62 	bl	8b3e0 <__mcmp>
   8991c:	2800      	cmp	r0, #0
   8991e:	f77f ad33 	ble.w	89388 <_dtoa_r+0x4a0>
   89922:	9f03      	ldr	r7, [sp, #12]
   89924:	2231      	movs	r2, #49	; 0x31
   89926:	463b      	mov	r3, r7
   89928:	9e07      	ldr	r6, [sp, #28]
   8992a:	f803 2b01 	strb.w	r2, [r3], #1
   8992e:	3601      	adds	r6, #1
   89930:	9303      	str	r3, [sp, #12]
   89932:	4641      	mov	r1, r8
   89934:	4620      	mov	r0, r4
   89936:	f001 fb25 	bl	8af84 <_Bfree>
   8993a:	1c73      	adds	r3, r6, #1
   8993c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89940:	9307      	str	r3, [sp, #28]
   89942:	9703      	str	r7, [sp, #12]
   89944:	2d00      	cmp	r5, #0
   89946:	f47f ae90 	bne.w	8966a <_dtoa_r+0x782>
   8994a:	e692      	b.n	89672 <_dtoa_r+0x78a>
   8994c:	4629      	mov	r1, r5
   8994e:	4632      	mov	r2, r6
   89950:	4620      	mov	r0, r4
   89952:	f001 fcd1 	bl	8b2f8 <__lshift>
   89956:	4605      	mov	r5, r0
   89958:	e6d6      	b.n	89708 <_dtoa_r+0x820>
   8995a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8995c:	970d      	str	r7, [sp, #52]	; 0x34
   8995e:	1afb      	subs	r3, r7, r3
   89960:	449b      	add	fp, r3
   89962:	2700      	movs	r7, #0
   89964:	e58c      	b.n	89480 <_dtoa_r+0x598>
   89966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8996a:	f04f 0902 	mov.w	r9, #2
   8996e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   89972:	e417      	b.n	891a4 <_dtoa_r+0x2bc>
   89974:	2301      	movs	r3, #1
   89976:	9325      	str	r3, [sp, #148]	; 0x94
   89978:	930a      	str	r3, [sp, #40]	; 0x28
   8997a:	f7ff bbe2 	b.w	89142 <_dtoa_r+0x25a>
   8997e:	d103      	bne.n	89988 <_dtoa_r+0xaa0>
   89980:	9b04      	ldr	r3, [sp, #16]
   89982:	07db      	lsls	r3, r3, #31
   89984:	f53f ae53 	bmi.w	8962e <_dtoa_r+0x746>
   89988:	46d9      	mov	r9, fp
   8998a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8998e:	2b30      	cmp	r3, #48	; 0x30
   89990:	d0fa      	beq.n	89988 <_dtoa_r+0xaa0>
   89992:	e65e      	b.n	89652 <_dtoa_r+0x76a>
   89994:	4648      	mov	r0, r9
   89996:	f002 fcfb 	bl	8c390 <__aeabi_i2d>
   8999a:	4632      	mov	r2, r6
   8999c:	463b      	mov	r3, r7
   8999e:	f002 fd61 	bl	8c464 <__aeabi_dmul>
   899a2:	2200      	movs	r2, #0
   899a4:	4b6d      	ldr	r3, [pc, #436]	; (89b5c <_dtoa_r+0xc74>)
   899a6:	f002 fba7 	bl	8c0f8 <__adddf3>
   899aa:	4680      	mov	r8, r0
   899ac:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   899b0:	4630      	mov	r0, r6
   899b2:	4639      	mov	r1, r7
   899b4:	2200      	movs	r2, #0
   899b6:	4b6a      	ldr	r3, [pc, #424]	; (89b60 <_dtoa_r+0xc78>)
   899b8:	f002 fb9c 	bl	8c0f4 <__aeabi_dsub>
   899bc:	4642      	mov	r2, r8
   899be:	464b      	mov	r3, r9
   899c0:	4606      	mov	r6, r0
   899c2:	460f      	mov	r7, r1
   899c4:	f002 ffde 	bl	8c984 <__aeabi_dcmpgt>
   899c8:	2800      	cmp	r0, #0
   899ca:	f040 8187 	bne.w	89cdc <_dtoa_r+0xdf4>
   899ce:	4642      	mov	r2, r8
   899d0:	4630      	mov	r0, r6
   899d2:	4639      	mov	r1, r7
   899d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   899d8:	f002 ffb6 	bl	8c948 <__aeabi_dcmplt>
   899dc:	2800      	cmp	r0, #0
   899de:	f43f acaa 	beq.w	89336 <_dtoa_r+0x44e>
   899e2:	f04f 0800 	mov.w	r8, #0
   899e6:	4645      	mov	r5, r8
   899e8:	e4ce      	b.n	89388 <_dtoa_r+0x4a0>
   899ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   899ec:	2a00      	cmp	r2, #0
   899ee:	f000 80c3 	beq.w	89b78 <_dtoa_r+0xc90>
   899f2:	9a06      	ldr	r2, [sp, #24]
   899f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   899f8:	441a      	add	r2, r3
   899fa:	9206      	str	r2, [sp, #24]
   899fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   899fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89a00:	4616      	mov	r6, r2
   89a02:	441a      	add	r2, r3
   89a04:	920b      	str	r2, [sp, #44]	; 0x2c
   89a06:	e547      	b.n	89498 <_dtoa_r+0x5b0>
   89a08:	2331      	movs	r3, #49	; 0x31
   89a0a:	9a07      	ldr	r2, [sp, #28]
   89a0c:	3201      	adds	r2, #1
   89a0e:	9207      	str	r2, [sp, #28]
   89a10:	9a03      	ldr	r2, [sp, #12]
   89a12:	7013      	strb	r3, [r2, #0]
   89a14:	e61d      	b.n	89652 <_dtoa_r+0x76a>
   89a16:	f000 814b 	beq.w	89cb0 <_dtoa_r+0xdc8>
   89a1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a1e:	9b07      	ldr	r3, [sp, #28]
   89a20:	425d      	negs	r5, r3
   89a22:	4b50      	ldr	r3, [pc, #320]	; (89b64 <_dtoa_r+0xc7c>)
   89a24:	f005 020f 	and.w	r2, r5, #15
   89a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89a30:	f002 fd18 	bl	8c464 <__aeabi_dmul>
   89a34:	112d      	asrs	r5, r5, #4
   89a36:	4606      	mov	r6, r0
   89a38:	460f      	mov	r7, r1
   89a3a:	f000 817d 	beq.w	89d38 <_dtoa_r+0xe50>
   89a3e:	2300      	movs	r3, #0
   89a40:	f04f 0902 	mov.w	r9, #2
   89a44:	f8df 8120 	ldr.w	r8, [pc, #288]	; 89b68 <_dtoa_r+0xc80>
   89a48:	07ea      	lsls	r2, r5, #31
   89a4a:	d505      	bpl.n	89a58 <_dtoa_r+0xb70>
   89a4c:	e9d8 2300 	ldrd	r2, r3, [r8]
   89a50:	f002 fd08 	bl	8c464 <__aeabi_dmul>
   89a54:	2301      	movs	r3, #1
   89a56:	4499      	add	r9, r3
   89a58:	106d      	asrs	r5, r5, #1
   89a5a:	f108 0808 	add.w	r8, r8, #8
   89a5e:	d1f3      	bne.n	89a48 <_dtoa_r+0xb60>
   89a60:	2b00      	cmp	r3, #0
   89a62:	f43f abba 	beq.w	891da <_dtoa_r+0x2f2>
   89a66:	4606      	mov	r6, r0
   89a68:	460f      	mov	r7, r1
   89a6a:	f7ff bbb6 	b.w	891da <_dtoa_r+0x2f2>
   89a6e:	900e      	str	r0, [sp, #56]	; 0x38
   89a70:	e520      	b.n	894b4 <_dtoa_r+0x5cc>
   89a72:	9b04      	ldr	r3, [sp, #16]
   89a74:	2b00      	cmp	r3, #0
   89a76:	f47f ae2b 	bne.w	896d0 <_dtoa_r+0x7e8>
   89a7a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89a7e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89a82:	2b00      	cmp	r3, #0
   89a84:	f43f aeff 	beq.w	89886 <_dtoa_r+0x99e>
   89a88:	e622      	b.n	896d0 <_dtoa_r+0x7e8>
   89a8a:	2a00      	cmp	r2, #0
   89a8c:	dd12      	ble.n	89ab4 <_dtoa_r+0xbcc>
   89a8e:	4651      	mov	r1, sl
   89a90:	2201      	movs	r2, #1
   89a92:	4620      	mov	r0, r4
   89a94:	9304      	str	r3, [sp, #16]
   89a96:	f001 fc2f 	bl	8b2f8 <__lshift>
   89a9a:	4641      	mov	r1, r8
   89a9c:	4682      	mov	sl, r0
   89a9e:	f001 fc9f 	bl	8b3e0 <__mcmp>
   89aa2:	2800      	cmp	r0, #0
   89aa4:	9b04      	ldr	r3, [sp, #16]
   89aa6:	f340 812c 	ble.w	89d02 <_dtoa_r+0xe1a>
   89aaa:	2b39      	cmp	r3, #57	; 0x39
   89aac:	f000 810c 	beq.w	89cc8 <_dtoa_r+0xde0>
   89ab0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   89ab4:	46b1      	mov	r9, r6
   89ab6:	f809 3b01 	strb.w	r3, [r9], #1
   89aba:	9b07      	ldr	r3, [sp, #28]
   89abc:	462e      	mov	r6, r5
   89abe:	3301      	adds	r3, #1
   89ac0:	463d      	mov	r5, r7
   89ac2:	9307      	str	r3, [sp, #28]
   89ac4:	e5c5      	b.n	89652 <_dtoa_r+0x76a>
   89ac6:	4655      	mov	r5, sl
   89ac8:	9c08      	ldr	r4, [sp, #32]
   89aca:	f8dd a018 	ldr.w	sl, [sp, #24]
   89ace:	4602      	mov	r2, r0
   89ad0:	460b      	mov	r3, r1
   89ad2:	f002 fb11 	bl	8c0f8 <__adddf3>
   89ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89ada:	4606      	mov	r6, r0
   89adc:	460f      	mov	r7, r1
   89ade:	f002 ff51 	bl	8c984 <__aeabi_dcmpgt>
   89ae2:	b960      	cbnz	r0, 89afe <_dtoa_r+0xc16>
   89ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89ae8:	4630      	mov	r0, r6
   89aea:	4639      	mov	r1, r7
   89aec:	f002 ff22 	bl	8c934 <__aeabi_dcmpeq>
   89af0:	2800      	cmp	r0, #0
   89af2:	f43f aca3 	beq.w	8943c <_dtoa_r+0x554>
   89af6:	f018 0f01 	tst.w	r8, #1
   89afa:	f43f ac9f 	beq.w	8943c <_dtoa_r+0x554>
   89afe:	9a03      	ldr	r2, [sp, #12]
   89b00:	e40a      	b.n	89318 <_dtoa_r+0x430>
   89b02:	4620      	mov	r0, r4
   89b04:	6869      	ldr	r1, [r5, #4]
   89b06:	f001 fa17 	bl	8af38 <_Balloc>
   89b0a:	4606      	mov	r6, r0
   89b0c:	2800      	cmp	r0, #0
   89b0e:	f000 8117 	beq.w	89d40 <_dtoa_r+0xe58>
   89b12:	692b      	ldr	r3, [r5, #16]
   89b14:	f105 010c 	add.w	r1, r5, #12
   89b18:	3302      	adds	r3, #2
   89b1a:	009a      	lsls	r2, r3, #2
   89b1c:	300c      	adds	r0, #12
   89b1e:	f7fc f9f9 	bl	85f14 <memcpy>
   89b22:	4631      	mov	r1, r6
   89b24:	2201      	movs	r2, #1
   89b26:	4620      	mov	r0, r4
   89b28:	f001 fbe6 	bl	8b2f8 <__lshift>
   89b2c:	4607      	mov	r7, r0
   89b2e:	e5f0      	b.n	89712 <_dtoa_r+0x82a>
   89b30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89b34:	1a9e      	subs	r6, r3, r2
   89b36:	e4af      	b.n	89498 <_dtoa_r+0x5b0>
   89b38:	2b39      	cmp	r3, #57	; 0x39
   89b3a:	f000 80c5 	beq.w	89cc8 <_dtoa_r+0xde0>
   89b3e:	46b1      	mov	r9, r6
   89b40:	3301      	adds	r3, #1
   89b42:	f809 3b01 	strb.w	r3, [r9], #1
   89b46:	9b07      	ldr	r3, [sp, #28]
   89b48:	462e      	mov	r6, r5
   89b4a:	3301      	adds	r3, #1
   89b4c:	463d      	mov	r5, r7
   89b4e:	9307      	str	r3, [sp, #28]
   89b50:	e57f      	b.n	89652 <_dtoa_r+0x76a>
   89b52:	bf00      	nop
   89b54:	0008cc74 	.word	0x0008cc74
   89b58:	7ff00000 	.word	0x7ff00000
   89b5c:	401c0000 	.word	0x401c0000
   89b60:	40140000 	.word	0x40140000
   89b64:	0008cdd0 	.word	0x0008cdd0
   89b68:	0008cda8 	.word	0x0008cda8
   89b6c:	9a07      	ldr	r2, [sp, #28]
   89b6e:	462e      	mov	r6, r5
   89b70:	3201      	adds	r2, #1
   89b72:	463d      	mov	r5, r7
   89b74:	9207      	str	r2, [sp, #28]
   89b76:	e54d      	b.n	89614 <_dtoa_r+0x72c>
   89b78:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89b7a:	9a06      	ldr	r2, [sp, #24]
   89b7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89b82:	441a      	add	r2, r3
   89b84:	9206      	str	r2, [sp, #24]
   89b86:	460a      	mov	r2, r1
   89b88:	441a      	add	r2, r3
   89b8a:	460e      	mov	r6, r1
   89b8c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89b8e:	920b      	str	r2, [sp, #44]	; 0x2c
   89b90:	e482      	b.n	89498 <_dtoa_r+0x5b0>
   89b92:	9810      	ldr	r0, [sp, #64]	; 0x40
   89b94:	497f      	ldr	r1, [pc, #508]	; (89d94 <_dtoa_r+0xeac>)
   89b96:	4642      	mov	r2, r8
   89b98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89b9c:	464b      	mov	r3, r9
   89b9e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89ba2:	f002 fc5f 	bl	8c464 <__aeabi_dmul>
   89ba6:	4602      	mov	r2, r0
   89ba8:	460b      	mov	r3, r1
   89baa:	4630      	mov	r0, r6
   89bac:	4639      	mov	r1, r7
   89bae:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89bb2:	f002 ff07 	bl	8c9c4 <__aeabi_d2iz>
   89bb6:	4680      	mov	r8, r0
   89bb8:	f002 fbea 	bl	8c390 <__aeabi_i2d>
   89bbc:	460b      	mov	r3, r1
   89bbe:	4602      	mov	r2, r0
   89bc0:	4639      	mov	r1, r7
   89bc2:	4630      	mov	r0, r6
   89bc4:	f002 fa96 	bl	8c0f4 <__aeabi_dsub>
   89bc8:	4606      	mov	r6, r0
   89bca:	9810      	ldr	r0, [sp, #64]	; 0x40
   89bcc:	9d03      	ldr	r5, [sp, #12]
   89bce:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89bd2:	2801      	cmp	r0, #1
   89bd4:	460f      	mov	r7, r1
   89bd6:	f805 3b01 	strb.w	r3, [r5], #1
   89bda:	d01e      	beq.n	89c1a <_dtoa_r+0xd32>
   89bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89bde:	9a03      	ldr	r2, [sp, #12]
   89be0:	4413      	add	r3, r2
   89be2:	4698      	mov	r8, r3
   89be4:	2200      	movs	r2, #0
   89be6:	4b6c      	ldr	r3, [pc, #432]	; (89d98 <_dtoa_r+0xeb0>)
   89be8:	4630      	mov	r0, r6
   89bea:	4639      	mov	r1, r7
   89bec:	f002 fc3a 	bl	8c464 <__aeabi_dmul>
   89bf0:	460f      	mov	r7, r1
   89bf2:	4606      	mov	r6, r0
   89bf4:	f002 fee6 	bl	8c9c4 <__aeabi_d2iz>
   89bf8:	4681      	mov	r9, r0
   89bfa:	f002 fbc9 	bl	8c390 <__aeabi_i2d>
   89bfe:	4602      	mov	r2, r0
   89c00:	460b      	mov	r3, r1
   89c02:	4630      	mov	r0, r6
   89c04:	4639      	mov	r1, r7
   89c06:	f002 fa75 	bl	8c0f4 <__aeabi_dsub>
   89c0a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   89c0e:	f805 9b01 	strb.w	r9, [r5], #1
   89c12:	4545      	cmp	r5, r8
   89c14:	4606      	mov	r6, r0
   89c16:	460f      	mov	r7, r1
   89c18:	d1e4      	bne.n	89be4 <_dtoa_r+0xcfc>
   89c1a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   89c1e:	2200      	movs	r2, #0
   89c20:	4b5e      	ldr	r3, [pc, #376]	; (89d9c <_dtoa_r+0xeb4>)
   89c22:	4640      	mov	r0, r8
   89c24:	4649      	mov	r1, r9
   89c26:	f002 fa67 	bl	8c0f8 <__adddf3>
   89c2a:	4632      	mov	r2, r6
   89c2c:	463b      	mov	r3, r7
   89c2e:	f002 fe8b 	bl	8c948 <__aeabi_dcmplt>
   89c32:	2800      	cmp	r0, #0
   89c34:	d158      	bne.n	89ce8 <_dtoa_r+0xe00>
   89c36:	4642      	mov	r2, r8
   89c38:	464b      	mov	r3, r9
   89c3a:	2000      	movs	r0, #0
   89c3c:	4957      	ldr	r1, [pc, #348]	; (89d9c <_dtoa_r+0xeb4>)
   89c3e:	f002 fa59 	bl	8c0f4 <__aeabi_dsub>
   89c42:	4632      	mov	r2, r6
   89c44:	463b      	mov	r3, r7
   89c46:	f002 fe9d 	bl	8c984 <__aeabi_dcmpgt>
   89c4a:	2800      	cmp	r0, #0
   89c4c:	f43f ab73 	beq.w	89336 <_dtoa_r+0x44e>
   89c50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89c54:	46a9      	mov	r9, r5
   89c56:	2b30      	cmp	r3, #48	; 0x30
   89c58:	f105 35ff 	add.w	r5, r5, #4294967295
   89c5c:	d0f8      	beq.n	89c50 <_dtoa_r+0xd68>
   89c5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89c60:	3301      	adds	r3, #1
   89c62:	9307      	str	r3, [sp, #28]
   89c64:	e505      	b.n	89672 <_dtoa_r+0x78a>
   89c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89c68:	2b00      	cmp	r3, #0
   89c6a:	f43f ae93 	beq.w	89994 <_dtoa_r+0xaac>
   89c6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   89c70:	2d00      	cmp	r5, #0
   89c72:	f77f ab60 	ble.w	89336 <_dtoa_r+0x44e>
   89c76:	2200      	movs	r2, #0
   89c78:	4b47      	ldr	r3, [pc, #284]	; (89d98 <_dtoa_r+0xeb0>)
   89c7a:	4630      	mov	r0, r6
   89c7c:	4639      	mov	r1, r7
   89c7e:	f002 fbf1 	bl	8c464 <__aeabi_dmul>
   89c82:	4606      	mov	r6, r0
   89c84:	460f      	mov	r7, r1
   89c86:	f109 0001 	add.w	r0, r9, #1
   89c8a:	f002 fb81 	bl	8c390 <__aeabi_i2d>
   89c8e:	4632      	mov	r2, r6
   89c90:	463b      	mov	r3, r7
   89c92:	f002 fbe7 	bl	8c464 <__aeabi_dmul>
   89c96:	2200      	movs	r2, #0
   89c98:	4b41      	ldr	r3, [pc, #260]	; (89da0 <_dtoa_r+0xeb8>)
   89c9a:	f002 fa2d 	bl	8c0f8 <__adddf3>
   89c9e:	9a07      	ldr	r2, [sp, #28]
   89ca0:	4680      	mov	r8, r0
   89ca2:	3a01      	subs	r2, #1
   89ca4:	9213      	str	r2, [sp, #76]	; 0x4c
   89ca6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89caa:	9510      	str	r5, [sp, #64]	; 0x40
   89cac:	f7ff bab6 	b.w	8921c <_dtoa_r+0x334>
   89cb0:	f04f 0902 	mov.w	r9, #2
   89cb4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   89cb8:	f7ff ba8f 	b.w	891da <_dtoa_r+0x2f2>
   89cbc:	9b07      	ldr	r3, [sp, #28]
   89cbe:	3301      	adds	r3, #1
   89cc0:	9307      	str	r3, [sp, #28]
   89cc2:	2331      	movs	r3, #49	; 0x31
   89cc4:	f7ff bb2f 	b.w	89326 <_dtoa_r+0x43e>
   89cc8:	46b3      	mov	fp, r6
   89cca:	2339      	movs	r3, #57	; 0x39
   89ccc:	9a07      	ldr	r2, [sp, #28]
   89cce:	462e      	mov	r6, r5
   89cd0:	3201      	adds	r2, #1
   89cd2:	463d      	mov	r5, r7
   89cd4:	9207      	str	r2, [sp, #28]
   89cd6:	f80b 3b01 	strb.w	r3, [fp], #1
   89cda:	e4aa      	b.n	89632 <_dtoa_r+0x74a>
   89cdc:	f04f 0800 	mov.w	r8, #0
   89ce0:	4645      	mov	r5, r8
   89ce2:	e61e      	b.n	89922 <_dtoa_r+0xa3a>
   89ce4:	4699      	mov	r9, r3
   89ce6:	e43c      	b.n	89562 <_dtoa_r+0x67a>
   89ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89cea:	9a03      	ldr	r2, [sp, #12]
   89cec:	9307      	str	r3, [sp, #28]
   89cee:	f7ff bb13 	b.w	89318 <_dtoa_r+0x430>
   89cf2:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89cf6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89cf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89cfa:	46a9      	mov	r9, r5
   89cfc:	3301      	adds	r3, #1
   89cfe:	9307      	str	r3, [sp, #28]
   89d00:	e4b7      	b.n	89672 <_dtoa_r+0x78a>
   89d02:	f47f aed7 	bne.w	89ab4 <_dtoa_r+0xbcc>
   89d06:	07da      	lsls	r2, r3, #31
   89d08:	f57f aed4 	bpl.w	89ab4 <_dtoa_r+0xbcc>
   89d0c:	e6cd      	b.n	89aaa <_dtoa_r+0xbc2>
   89d0e:	2b39      	cmp	r3, #57	; 0x39
   89d10:	d0da      	beq.n	89cc8 <_dtoa_r+0xde0>
   89d12:	f1b9 0f00 	cmp.w	r9, #0
   89d16:	f73f aecb 	bgt.w	89ab0 <_dtoa_r+0xbc8>
   89d1a:	e6cb      	b.n	89ab4 <_dtoa_r+0xbcc>
   89d1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d1e:	2b02      	cmp	r3, #2
   89d20:	f73f adeb 	bgt.w	898fa <_dtoa_r+0xa12>
   89d24:	9707      	str	r7, [sp, #28]
   89d26:	e570      	b.n	8980a <_dtoa_r+0x922>
   89d28:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d2a:	2b02      	cmp	r3, #2
   89d2c:	f73f ade5 	bgt.w	898fa <_dtoa_r+0xa12>
   89d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89d32:	9707      	str	r7, [sp, #28]
   89d34:	930a      	str	r3, [sp, #40]	; 0x28
   89d36:	e4e4      	b.n	89702 <_dtoa_r+0x81a>
   89d38:	f04f 0902 	mov.w	r9, #2
   89d3c:	f7ff ba4d 	b.w	891da <_dtoa_r+0x2f2>
   89d40:	4602      	mov	r2, r0
   89d42:	f240 21ea 	movw	r1, #746	; 0x2ea
   89d46:	4b17      	ldr	r3, [pc, #92]	; (89da4 <_dtoa_r+0xebc>)
   89d48:	4817      	ldr	r0, [pc, #92]	; (89da8 <_dtoa_r+0xec0>)
   89d4a:	f002 f84d 	bl	8bde8 <__assert_func>
   89d4e:	4b17      	ldr	r3, [pc, #92]	; (89dac <_dtoa_r+0xec4>)
   89d50:	9303      	str	r3, [sp, #12]
   89d52:	f7ff b904 	b.w	88f5e <_dtoa_r+0x76>
   89d56:	2500      	movs	r5, #0
   89d58:	4620      	mov	r0, r4
   89d5a:	4629      	mov	r1, r5
   89d5c:	6465      	str	r5, [r4, #68]	; 0x44
   89d5e:	f001 f8eb 	bl	8af38 <_Balloc>
   89d62:	9003      	str	r0, [sp, #12]
   89d64:	b958      	cbnz	r0, 89d7e <_dtoa_r+0xe96>
   89d66:	2200      	movs	r2, #0
   89d68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89d6c:	4b0d      	ldr	r3, [pc, #52]	; (89da4 <_dtoa_r+0xebc>)
   89d6e:	480e      	ldr	r0, [pc, #56]	; (89da8 <_dtoa_r+0xec0>)
   89d70:	f002 f83a 	bl	8bde8 <__assert_func>
   89d74:	f43f ac0d 	beq.w	89592 <_dtoa_r+0x6aa>
   89d78:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89d7c:	e48f      	b.n	8969e <_dtoa_r+0x7b6>
   89d7e:	f04f 33ff 	mov.w	r3, #4294967295
   89d82:	9312      	str	r3, [sp, #72]	; 0x48
   89d84:	930a      	str	r3, [sp, #40]	; 0x28
   89d86:	2301      	movs	r3, #1
   89d88:	9a03      	ldr	r2, [sp, #12]
   89d8a:	9525      	str	r5, [sp, #148]	; 0x94
   89d8c:	6422      	str	r2, [r4, #64]	; 0x40
   89d8e:	930c      	str	r3, [sp, #48]	; 0x30
   89d90:	f7ff bad1 	b.w	89336 <_dtoa_r+0x44e>
   89d94:	0008cdd0 	.word	0x0008cdd0
   89d98:	40240000 	.word	0x40240000
   89d9c:	3fe00000 	.word	0x3fe00000
   89da0:	401c0000 	.word	0x401c0000
   89da4:	0008cc84 	.word	0x0008cc84
   89da8:	0008cc98 	.word	0x0008cc98
   89dac:	0008cc78 	.word	0x0008cc78

00089db0 <__sflush_r>:
   89db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89db8:	460d      	mov	r5, r1
   89dba:	0711      	lsls	r1, r2, #28
   89dbc:	4680      	mov	r8, r0
   89dbe:	d447      	bmi.n	89e50 <__sflush_r+0xa0>
   89dc0:	686b      	ldr	r3, [r5, #4]
   89dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   89dc6:	2b00      	cmp	r3, #0
   89dc8:	81aa      	strh	r2, [r5, #12]
   89dca:	dd5e      	ble.n	89e8a <__sflush_r+0xda>
   89dcc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89dce:	2c00      	cmp	r4, #0
   89dd0:	d058      	beq.n	89e84 <__sflush_r+0xd4>
   89dd2:	2300      	movs	r3, #0
   89dd4:	f8d8 6000 	ldr.w	r6, [r8]
   89dd8:	f8c8 3000 	str.w	r3, [r8]
   89ddc:	b293      	uxth	r3, r2
   89dde:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89de2:	d156      	bne.n	89e92 <__sflush_r+0xe2>
   89de4:	2301      	movs	r3, #1
   89de6:	4640      	mov	r0, r8
   89de8:	69e9      	ldr	r1, [r5, #28]
   89dea:	47a0      	blx	r4
   89dec:	1c43      	adds	r3, r0, #1
   89dee:	d067      	beq.n	89ec0 <__sflush_r+0x110>
   89df0:	89ab      	ldrh	r3, [r5, #12]
   89df2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89df4:	075f      	lsls	r7, r3, #29
   89df6:	d505      	bpl.n	89e04 <__sflush_r+0x54>
   89df8:	686a      	ldr	r2, [r5, #4]
   89dfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89dfc:	1a80      	subs	r0, r0, r2
   89dfe:	b10b      	cbz	r3, 89e04 <__sflush_r+0x54>
   89e00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89e02:	1ac0      	subs	r0, r0, r3
   89e04:	4602      	mov	r2, r0
   89e06:	69e9      	ldr	r1, [r5, #28]
   89e08:	2300      	movs	r3, #0
   89e0a:	4640      	mov	r0, r8
   89e0c:	47a0      	blx	r4
   89e0e:	1c41      	adds	r1, r0, #1
   89e10:	d141      	bne.n	89e96 <__sflush_r+0xe6>
   89e12:	f8d8 3000 	ldr.w	r3, [r8]
   89e16:	2b00      	cmp	r3, #0
   89e18:	d03d      	beq.n	89e96 <__sflush_r+0xe6>
   89e1a:	2b1d      	cmp	r3, #29
   89e1c:	d001      	beq.n	89e22 <__sflush_r+0x72>
   89e1e:	2b16      	cmp	r3, #22
   89e20:	d156      	bne.n	89ed0 <__sflush_r+0x120>
   89e22:	2100      	movs	r1, #0
   89e24:	692a      	ldr	r2, [r5, #16]
   89e26:	89ab      	ldrh	r3, [r5, #12]
   89e28:	e9c5 2100 	strd	r2, r1, [r5]
   89e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89e30:	81ab      	strh	r3, [r5, #12]
   89e32:	6b29      	ldr	r1, [r5, #48]	; 0x30
   89e34:	f8c8 6000 	str.w	r6, [r8]
   89e38:	b321      	cbz	r1, 89e84 <__sflush_r+0xd4>
   89e3a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   89e3e:	4299      	cmp	r1, r3
   89e40:	d002      	beq.n	89e48 <__sflush_r+0x98>
   89e42:	4640      	mov	r0, r8
   89e44:	f000 f9cc 	bl	8a1e0 <_free_r>
   89e48:	2000      	movs	r0, #0
   89e4a:	6328      	str	r0, [r5, #48]	; 0x30
   89e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89e50:	692f      	ldr	r7, [r5, #16]
   89e52:	b1bf      	cbz	r7, 89e84 <__sflush_r+0xd4>
   89e54:	b293      	uxth	r3, r2
   89e56:	079a      	lsls	r2, r3, #30
   89e58:	bf18      	it	ne
   89e5a:	2300      	movne	r3, #0
   89e5c:	682e      	ldr	r6, [r5, #0]
   89e5e:	bf08      	it	eq
   89e60:	696b      	ldreq	r3, [r5, #20]
   89e62:	602f      	str	r7, [r5, #0]
   89e64:	1bf6      	subs	r6, r6, r7
   89e66:	60ab      	str	r3, [r5, #8]
   89e68:	e00a      	b.n	89e80 <__sflush_r+0xd0>
   89e6a:	4633      	mov	r3, r6
   89e6c:	463a      	mov	r2, r7
   89e6e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   89e70:	4640      	mov	r0, r8
   89e72:	69e9      	ldr	r1, [r5, #28]
   89e74:	47a0      	blx	r4
   89e76:	1e04      	subs	r4, r0, #0
   89e78:	eba6 0604 	sub.w	r6, r6, r4
   89e7c:	4427      	add	r7, r4
   89e7e:	dd17      	ble.n	89eb0 <__sflush_r+0x100>
   89e80:	2e00      	cmp	r6, #0
   89e82:	dcf2      	bgt.n	89e6a <__sflush_r+0xba>
   89e84:	2000      	movs	r0, #0
   89e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89e8a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89e8c:	2b00      	cmp	r3, #0
   89e8e:	dc9d      	bgt.n	89dcc <__sflush_r+0x1c>
   89e90:	e7f8      	b.n	89e84 <__sflush_r+0xd4>
   89e92:	6d28      	ldr	r0, [r5, #80]	; 0x50
   89e94:	e7ae      	b.n	89df4 <__sflush_r+0x44>
   89e96:	2100      	movs	r1, #0
   89e98:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   89e9c:	692a      	ldr	r2, [r5, #16]
   89e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89ea2:	81ab      	strh	r3, [r5, #12]
   89ea4:	04db      	lsls	r3, r3, #19
   89ea6:	e9c5 2100 	strd	r2, r1, [r5]
   89eaa:	d5c2      	bpl.n	89e32 <__sflush_r+0x82>
   89eac:	6528      	str	r0, [r5, #80]	; 0x50
   89eae:	e7c0      	b.n	89e32 <__sflush_r+0x82>
   89eb0:	89ab      	ldrh	r3, [r5, #12]
   89eb2:	f04f 30ff 	mov.w	r0, #4294967295
   89eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89eba:	81ab      	strh	r3, [r5, #12]
   89ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ec0:	f8d8 3000 	ldr.w	r3, [r8]
   89ec4:	2b00      	cmp	r3, #0
   89ec6:	d093      	beq.n	89df0 <__sflush_r+0x40>
   89ec8:	2b1d      	cmp	r3, #29
   89eca:	d006      	beq.n	89eda <__sflush_r+0x12a>
   89ecc:	2b16      	cmp	r3, #22
   89ece:	d004      	beq.n	89eda <__sflush_r+0x12a>
   89ed0:	89ab      	ldrh	r3, [r5, #12]
   89ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89ed6:	81ab      	strh	r3, [r5, #12]
   89ed8:	e7d5      	b.n	89e86 <__sflush_r+0xd6>
   89eda:	f8c8 6000 	str.w	r6, [r8]
   89ede:	e7d1      	b.n	89e84 <__sflush_r+0xd4>

00089ee0 <_fflush_r>:
   89ee0:	b538      	push	{r3, r4, r5, lr}
   89ee2:	460c      	mov	r4, r1
   89ee4:	4605      	mov	r5, r0
   89ee6:	b108      	cbz	r0, 89eec <_fflush_r+0xc>
   89ee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89eea:	b1a3      	cbz	r3, 89f16 <_fflush_r+0x36>
   89eec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89ef0:	b1b8      	cbz	r0, 89f22 <_fflush_r+0x42>
   89ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89ef4:	07db      	lsls	r3, r3, #31
   89ef6:	d401      	bmi.n	89efc <_fflush_r+0x1c>
   89ef8:	0581      	lsls	r1, r0, #22
   89efa:	d515      	bpl.n	89f28 <_fflush_r+0x48>
   89efc:	4628      	mov	r0, r5
   89efe:	4621      	mov	r1, r4
   89f00:	f7ff ff56 	bl	89db0 <__sflush_r>
   89f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89f06:	4605      	mov	r5, r0
   89f08:	07da      	lsls	r2, r3, #31
   89f0a:	d402      	bmi.n	89f12 <_fflush_r+0x32>
   89f0c:	89a3      	ldrh	r3, [r4, #12]
   89f0e:	059b      	lsls	r3, r3, #22
   89f10:	d50e      	bpl.n	89f30 <_fflush_r+0x50>
   89f12:	4628      	mov	r0, r5
   89f14:	bd38      	pop	{r3, r4, r5, pc}
   89f16:	f000 f83f 	bl	89f98 <__sinit>
   89f1a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89f1e:	2800      	cmp	r0, #0
   89f20:	d1e7      	bne.n	89ef2 <_fflush_r+0x12>
   89f22:	4605      	mov	r5, r0
   89f24:	4628      	mov	r0, r5
   89f26:	bd38      	pop	{r3, r4, r5, pc}
   89f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f2a:	f000 fc07 	bl	8a73c <__retarget_lock_acquire_recursive>
   89f2e:	e7e5      	b.n	89efc <_fflush_r+0x1c>
   89f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f32:	f000 fc05 	bl	8a740 <__retarget_lock_release_recursive>
   89f36:	4628      	mov	r0, r5
   89f38:	bd38      	pop	{r3, r4, r5, pc}
   89f3a:	bf00      	nop

00089f3c <std>:
   89f3c:	2300      	movs	r3, #0
   89f3e:	b510      	push	{r4, lr}
   89f40:	4604      	mov	r4, r0
   89f42:	e9c0 3300 	strd	r3, r3, [r0]
   89f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
   89f4a:	8181      	strh	r1, [r0, #12]
   89f4c:	81c2      	strh	r2, [r0, #14]
   89f4e:	4619      	mov	r1, r3
   89f50:	6083      	str	r3, [r0, #8]
   89f52:	6643      	str	r3, [r0, #100]	; 0x64
   89f54:	6183      	str	r3, [r0, #24]
   89f56:	2208      	movs	r2, #8
   89f58:	305c      	adds	r0, #92	; 0x5c
   89f5a:	f7fc f851 	bl	86000 <memset>
   89f5e:	4807      	ldr	r0, [pc, #28]	; (89f7c <std+0x40>)
   89f60:	4907      	ldr	r1, [pc, #28]	; (89f80 <std+0x44>)
   89f62:	4a08      	ldr	r2, [pc, #32]	; (89f84 <std+0x48>)
   89f64:	4b08      	ldr	r3, [pc, #32]	; (89f88 <std+0x4c>)
   89f66:	e9c4 4007 	strd	r4, r0, [r4, #28]
   89f6a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   89f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
   89f70:	f104 0058 	add.w	r0, r4, #88	; 0x58
   89f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89f78:	f000 bbdc 	b.w	8a734 <__retarget_lock_init_recursive>
   89f7c:	0008baa5 	.word	0x0008baa5
   89f80:	0008bac9 	.word	0x0008bac9
   89f84:	0008bb09 	.word	0x0008bb09
   89f88:	0008bb29 	.word	0x0008bb29

00089f8c <_cleanup_r>:
   89f8c:	4901      	ldr	r1, [pc, #4]	; (89f94 <_cleanup_r+0x8>)
   89f8e:	f000 bba3 	b.w	8a6d8 <_fwalk_reent>
   89f92:	bf00      	nop
   89f94:	0008bea9 	.word	0x0008bea9

00089f98 <__sinit>:
   89f98:	b510      	push	{r4, lr}
   89f9a:	4604      	mov	r4, r0
   89f9c:	4813      	ldr	r0, [pc, #76]	; (89fec <__sinit+0x54>)
   89f9e:	f000 fbcd 	bl	8a73c <__retarget_lock_acquire_recursive>
   89fa2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   89fa4:	b9ea      	cbnz	r2, 89fe2 <__sinit+0x4a>
   89fa6:	2003      	movs	r0, #3
   89fa8:	4911      	ldr	r1, [pc, #68]	; (89ff0 <__sinit+0x58>)
   89faa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   89fae:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   89fb2:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   89fb6:	63e1      	str	r1, [r4, #60]	; 0x3c
   89fb8:	6860      	ldr	r0, [r4, #4]
   89fba:	2104      	movs	r1, #4
   89fbc:	f7ff ffbe 	bl	89f3c <std>
   89fc0:	68a0      	ldr	r0, [r4, #8]
   89fc2:	2201      	movs	r2, #1
   89fc4:	2109      	movs	r1, #9
   89fc6:	f7ff ffb9 	bl	89f3c <std>
   89fca:	68e0      	ldr	r0, [r4, #12]
   89fcc:	2202      	movs	r2, #2
   89fce:	2112      	movs	r1, #18
   89fd0:	f7ff ffb4 	bl	89f3c <std>
   89fd4:	2301      	movs	r3, #1
   89fd6:	4805      	ldr	r0, [pc, #20]	; (89fec <__sinit+0x54>)
   89fd8:	63a3      	str	r3, [r4, #56]	; 0x38
   89fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89fde:	f000 bbaf 	b.w	8a740 <__retarget_lock_release_recursive>
   89fe2:	4802      	ldr	r0, [pc, #8]	; (89fec <__sinit+0x54>)
   89fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89fe8:	f000 bbaa 	b.w	8a740 <__retarget_lock_release_recursive>
   89fec:	200026c0 	.word	0x200026c0
   89ff0:	00089f8d 	.word	0x00089f8d

00089ff4 <__sfp_lock_acquire>:
   89ff4:	4801      	ldr	r0, [pc, #4]	; (89ffc <__sfp_lock_acquire+0x8>)
   89ff6:	f000 bba1 	b.w	8a73c <__retarget_lock_acquire_recursive>
   89ffa:	bf00      	nop
   89ffc:	200026d4 	.word	0x200026d4

0008a000 <__sfp_lock_release>:
   8a000:	4801      	ldr	r0, [pc, #4]	; (8a008 <__sfp_lock_release+0x8>)
   8a002:	f000 bb9d 	b.w	8a740 <__retarget_lock_release_recursive>
   8a006:	bf00      	nop
   8a008:	200026d4 	.word	0x200026d4

0008a00c <__libc_fini_array>:
   8a00c:	b538      	push	{r3, r4, r5, lr}
   8a00e:	4b08      	ldr	r3, [pc, #32]	; (8a030 <__libc_fini_array+0x24>)
   8a010:	4d08      	ldr	r5, [pc, #32]	; (8a034 <__libc_fini_array+0x28>)
   8a012:	1b5b      	subs	r3, r3, r5
   8a014:	109c      	asrs	r4, r3, #2
   8a016:	d007      	beq.n	8a028 <__libc_fini_array+0x1c>
   8a018:	3b04      	subs	r3, #4
   8a01a:	441d      	add	r5, r3
   8a01c:	3c01      	subs	r4, #1
   8a01e:	f855 3904 	ldr.w	r3, [r5], #-4
   8a022:	4798      	blx	r3
   8a024:	2c00      	cmp	r4, #0
   8a026:	d1f9      	bne.n	8a01c <__libc_fini_array+0x10>
   8a028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a02c:	f002 bfe6 	b.w	8cffc <_fini>
   8a030:	0008d00c 	.word	0x0008d00c
   8a034:	0008d008 	.word	0x0008d008

0008a038 <__fputwc>:
   8a038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a03c:	b083      	sub	sp, #12
   8a03e:	4607      	mov	r7, r0
   8a040:	4688      	mov	r8, r1
   8a042:	4614      	mov	r4, r2
   8a044:	f000 fb6c 	bl	8a720 <__locale_mb_cur_max>
   8a048:	2801      	cmp	r0, #1
   8a04a:	d103      	bne.n	8a054 <__fputwc+0x1c>
   8a04c:	f108 33ff 	add.w	r3, r8, #4294967295
   8a050:	2bfe      	cmp	r3, #254	; 0xfe
   8a052:	d933      	bls.n	8a0bc <__fputwc+0x84>
   8a054:	4642      	mov	r2, r8
   8a056:	4638      	mov	r0, r7
   8a058:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a05c:	a901      	add	r1, sp, #4
   8a05e:	f001 fe3b 	bl	8bcd8 <_wcrtomb_r>
   8a062:	1c42      	adds	r2, r0, #1
   8a064:	4606      	mov	r6, r0
   8a066:	d02f      	beq.n	8a0c8 <__fputwc+0x90>
   8a068:	b318      	cbz	r0, 8a0b2 <__fputwc+0x7a>
   8a06a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a06e:	2500      	movs	r5, #0
   8a070:	f10d 0904 	add.w	r9, sp, #4
   8a074:	e008      	b.n	8a088 <__fputwc+0x50>
   8a076:	6823      	ldr	r3, [r4, #0]
   8a078:	1c5a      	adds	r2, r3, #1
   8a07a:	6022      	str	r2, [r4, #0]
   8a07c:	7019      	strb	r1, [r3, #0]
   8a07e:	3501      	adds	r5, #1
   8a080:	42b5      	cmp	r5, r6
   8a082:	d216      	bcs.n	8a0b2 <__fputwc+0x7a>
   8a084:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a088:	68a3      	ldr	r3, [r4, #8]
   8a08a:	3b01      	subs	r3, #1
   8a08c:	2b00      	cmp	r3, #0
   8a08e:	60a3      	str	r3, [r4, #8]
   8a090:	daf1      	bge.n	8a076 <__fputwc+0x3e>
   8a092:	69a2      	ldr	r2, [r4, #24]
   8a094:	4293      	cmp	r3, r2
   8a096:	db01      	blt.n	8a09c <__fputwc+0x64>
   8a098:	290a      	cmp	r1, #10
   8a09a:	d1ec      	bne.n	8a076 <__fputwc+0x3e>
   8a09c:	4622      	mov	r2, r4
   8a09e:	4638      	mov	r0, r7
   8a0a0:	f001 fdc2 	bl	8bc28 <__swbuf_r>
   8a0a4:	1c43      	adds	r3, r0, #1
   8a0a6:	d1ea      	bne.n	8a07e <__fputwc+0x46>
   8a0a8:	4606      	mov	r6, r0
   8a0aa:	4630      	mov	r0, r6
   8a0ac:	b003      	add	sp, #12
   8a0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a0b2:	4646      	mov	r6, r8
   8a0b4:	4630      	mov	r0, r6
   8a0b6:	b003      	add	sp, #12
   8a0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a0bc:	fa5f f188 	uxtb.w	r1, r8
   8a0c0:	4606      	mov	r6, r0
   8a0c2:	f88d 1004 	strb.w	r1, [sp, #4]
   8a0c6:	e7d2      	b.n	8a06e <__fputwc+0x36>
   8a0c8:	4630      	mov	r0, r6
   8a0ca:	89a3      	ldrh	r3, [r4, #12]
   8a0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a0d0:	81a3      	strh	r3, [r4, #12]
   8a0d2:	b003      	add	sp, #12
   8a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a0d8 <_fputwc_r>:
   8a0d8:	b530      	push	{r4, r5, lr}
   8a0da:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a0dc:	4614      	mov	r4, r2
   8a0de:	f013 0f01 	tst.w	r3, #1
   8a0e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a0e6:	4605      	mov	r5, r0
   8a0e8:	b083      	sub	sp, #12
   8a0ea:	b29a      	uxth	r2, r3
   8a0ec:	d101      	bne.n	8a0f2 <_fputwc_r+0x1a>
   8a0ee:	0598      	lsls	r0, r3, #22
   8a0f0:	d51c      	bpl.n	8a12c <_fputwc_r+0x54>
   8a0f2:	0490      	lsls	r0, r2, #18
   8a0f4:	d406      	bmi.n	8a104 <_fputwc_r+0x2c>
   8a0f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a0f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a0fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a100:	81a3      	strh	r3, [r4, #12]
   8a102:	6662      	str	r2, [r4, #100]	; 0x64
   8a104:	4628      	mov	r0, r5
   8a106:	4622      	mov	r2, r4
   8a108:	f7ff ff96 	bl	8a038 <__fputwc>
   8a10c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a10e:	4605      	mov	r5, r0
   8a110:	07da      	lsls	r2, r3, #31
   8a112:	d402      	bmi.n	8a11a <_fputwc_r+0x42>
   8a114:	89a3      	ldrh	r3, [r4, #12]
   8a116:	059b      	lsls	r3, r3, #22
   8a118:	d502      	bpl.n	8a120 <_fputwc_r+0x48>
   8a11a:	4628      	mov	r0, r5
   8a11c:	b003      	add	sp, #12
   8a11e:	bd30      	pop	{r4, r5, pc}
   8a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a122:	f000 fb0d 	bl	8a740 <__retarget_lock_release_recursive>
   8a126:	4628      	mov	r0, r5
   8a128:	b003      	add	sp, #12
   8a12a:	bd30      	pop	{r4, r5, pc}
   8a12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a12e:	9101      	str	r1, [sp, #4]
   8a130:	f000 fb04 	bl	8a73c <__retarget_lock_acquire_recursive>
   8a134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a138:	9901      	ldr	r1, [sp, #4]
   8a13a:	b29a      	uxth	r2, r3
   8a13c:	e7d9      	b.n	8a0f2 <_fputwc_r+0x1a>
   8a13e:	bf00      	nop

0008a140 <_malloc_trim_r>:
   8a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a142:	460c      	mov	r4, r1
   8a144:	4f23      	ldr	r7, [pc, #140]	; (8a1d4 <_malloc_trim_r+0x94>)
   8a146:	4606      	mov	r6, r0
   8a148:	f000 feea 	bl	8af20 <__malloc_lock>
   8a14c:	68bb      	ldr	r3, [r7, #8]
   8a14e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a152:	685d      	ldr	r5, [r3, #4]
   8a154:	310f      	adds	r1, #15
   8a156:	f025 0503 	bic.w	r5, r5, #3
   8a15a:	194b      	adds	r3, r1, r5
   8a15c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a160:	f023 030f 	bic.w	r3, r3, #15
   8a164:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a168:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a16c:	db07      	blt.n	8a17e <_malloc_trim_r+0x3e>
   8a16e:	2100      	movs	r1, #0
   8a170:	4630      	mov	r0, r6
   8a172:	f001 fc85 	bl	8ba80 <_sbrk_r>
   8a176:	68bb      	ldr	r3, [r7, #8]
   8a178:	442b      	add	r3, r5
   8a17a:	4298      	cmp	r0, r3
   8a17c:	d004      	beq.n	8a188 <_malloc_trim_r+0x48>
   8a17e:	4630      	mov	r0, r6
   8a180:	f000 fed4 	bl	8af2c <__malloc_unlock>
   8a184:	2000      	movs	r0, #0
   8a186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a188:	4630      	mov	r0, r6
   8a18a:	4261      	negs	r1, r4
   8a18c:	f001 fc78 	bl	8ba80 <_sbrk_r>
   8a190:	3001      	adds	r0, #1
   8a192:	d00d      	beq.n	8a1b0 <_malloc_trim_r+0x70>
   8a194:	4a10      	ldr	r2, [pc, #64]	; (8a1d8 <_malloc_trim_r+0x98>)
   8a196:	68b9      	ldr	r1, [r7, #8]
   8a198:	6813      	ldr	r3, [r2, #0]
   8a19a:	1b2d      	subs	r5, r5, r4
   8a19c:	f045 0501 	orr.w	r5, r5, #1
   8a1a0:	4630      	mov	r0, r6
   8a1a2:	1b1b      	subs	r3, r3, r4
   8a1a4:	604d      	str	r5, [r1, #4]
   8a1a6:	6013      	str	r3, [r2, #0]
   8a1a8:	f000 fec0 	bl	8af2c <__malloc_unlock>
   8a1ac:	2001      	movs	r0, #1
   8a1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a1b0:	2100      	movs	r1, #0
   8a1b2:	4630      	mov	r0, r6
   8a1b4:	f001 fc64 	bl	8ba80 <_sbrk_r>
   8a1b8:	68ba      	ldr	r2, [r7, #8]
   8a1ba:	1a83      	subs	r3, r0, r2
   8a1bc:	2b0f      	cmp	r3, #15
   8a1be:	ddde      	ble.n	8a17e <_malloc_trim_r+0x3e>
   8a1c0:	4906      	ldr	r1, [pc, #24]	; (8a1dc <_malloc_trim_r+0x9c>)
   8a1c2:	f043 0301 	orr.w	r3, r3, #1
   8a1c6:	680c      	ldr	r4, [r1, #0]
   8a1c8:	4903      	ldr	r1, [pc, #12]	; (8a1d8 <_malloc_trim_r+0x98>)
   8a1ca:	1b00      	subs	r0, r0, r4
   8a1cc:	6053      	str	r3, [r2, #4]
   8a1ce:	6008      	str	r0, [r1, #0]
   8a1d0:	e7d5      	b.n	8a17e <_malloc_trim_r+0x3e>
   8a1d2:	bf00      	nop
   8a1d4:	20000f48 	.word	0x20000f48
   8a1d8:	200021a4 	.word	0x200021a4
   8a1dc:	20001350 	.word	0x20001350

0008a1e0 <_free_r>:
   8a1e0:	2900      	cmp	r1, #0
   8a1e2:	d05f      	beq.n	8a2a4 <_free_r+0xc4>
   8a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a1e6:	460c      	mov	r4, r1
   8a1e8:	4606      	mov	r6, r0
   8a1ea:	f000 fe99 	bl	8af20 <__malloc_lock>
   8a1ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a1f2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a3e8 <_free_r+0x208>
   8a1f6:	f1a4 0008 	sub.w	r0, r4, #8
   8a1fa:	f023 0101 	bic.w	r1, r3, #1
   8a1fe:	1842      	adds	r2, r0, r1
   8a200:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a204:	6855      	ldr	r5, [r2, #4]
   8a206:	4297      	cmp	r7, r2
   8a208:	f025 0503 	bic.w	r5, r5, #3
   8a20c:	f000 8089 	beq.w	8a322 <_free_r+0x142>
   8a210:	07df      	lsls	r7, r3, #31
   8a212:	6055      	str	r5, [r2, #4]
   8a214:	d434      	bmi.n	8a280 <_free_r+0xa0>
   8a216:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a21a:	f10c 0408 	add.w	r4, ip, #8
   8a21e:	1bc0      	subs	r0, r0, r7
   8a220:	6883      	ldr	r3, [r0, #8]
   8a222:	4439      	add	r1, r7
   8a224:	42a3      	cmp	r3, r4
   8a226:	d06a      	beq.n	8a2fe <_free_r+0x11e>
   8a228:	1957      	adds	r7, r2, r5
   8a22a:	687f      	ldr	r7, [r7, #4]
   8a22c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a230:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a234:	f8ce 3008 	str.w	r3, [lr, #8]
   8a238:	07fb      	lsls	r3, r7, #31
   8a23a:	f140 8097 	bpl.w	8a36c <_free_r+0x18c>
   8a23e:	f041 0301 	orr.w	r3, r1, #1
   8a242:	6043      	str	r3, [r0, #4]
   8a244:	6011      	str	r1, [r2, #0]
   8a246:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a24a:	d234      	bcs.n	8a2b6 <_free_r+0xd6>
   8a24c:	2201      	movs	r2, #1
   8a24e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a252:	08cb      	lsrs	r3, r1, #3
   8a254:	0949      	lsrs	r1, r1, #5
   8a256:	4413      	add	r3, r2
   8a258:	fa02 f101 	lsl.w	r1, r2, r1
   8a25c:	4321      	orrs	r1, r4
   8a25e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a262:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a266:	3a08      	subs	r2, #8
   8a268:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a26c:	f8cc 1004 	str.w	r1, [ip, #4]
   8a270:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a274:	60e0      	str	r0, [r4, #12]
   8a276:	4630      	mov	r0, r6
   8a278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a27c:	f000 be56 	b.w	8af2c <__malloc_unlock>
   8a280:	1953      	adds	r3, r2, r5
   8a282:	685b      	ldr	r3, [r3, #4]
   8a284:	07df      	lsls	r7, r3, #31
   8a286:	d40e      	bmi.n	8a2a6 <_free_r+0xc6>
   8a288:	4429      	add	r1, r5
   8a28a:	f10c 0408 	add.w	r4, ip, #8
   8a28e:	6893      	ldr	r3, [r2, #8]
   8a290:	42a3      	cmp	r3, r4
   8a292:	d073      	beq.n	8a37c <_free_r+0x19c>
   8a294:	68d4      	ldr	r4, [r2, #12]
   8a296:	f041 0201 	orr.w	r2, r1, #1
   8a29a:	60dc      	str	r4, [r3, #12]
   8a29c:	60a3      	str	r3, [r4, #8]
   8a29e:	6042      	str	r2, [r0, #4]
   8a2a0:	5041      	str	r1, [r0, r1]
   8a2a2:	e7d0      	b.n	8a246 <_free_r+0x66>
   8a2a4:	4770      	bx	lr
   8a2a6:	f041 0301 	orr.w	r3, r1, #1
   8a2aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a2ae:	f844 3c04 	str.w	r3, [r4, #-4]
   8a2b2:	6011      	str	r1, [r2, #0]
   8a2b4:	d3ca      	bcc.n	8a24c <_free_r+0x6c>
   8a2b6:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a2ba:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a2be:	d24a      	bcs.n	8a356 <_free_r+0x176>
   8a2c0:	098b      	lsrs	r3, r1, #6
   8a2c2:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a2c6:	00ed      	lsls	r5, r5, #3
   8a2c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a2cc:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a2d0:	eb0c 0405 	add.w	r4, ip, r5
   8a2d4:	3c08      	subs	r4, #8
   8a2d6:	429c      	cmp	r4, r3
   8a2d8:	d059      	beq.n	8a38e <_free_r+0x1ae>
   8a2da:	685a      	ldr	r2, [r3, #4]
   8a2dc:	f022 0203 	bic.w	r2, r2, #3
   8a2e0:	428a      	cmp	r2, r1
   8a2e2:	d902      	bls.n	8a2ea <_free_r+0x10a>
   8a2e4:	689b      	ldr	r3, [r3, #8]
   8a2e6:	429c      	cmp	r4, r3
   8a2e8:	d1f7      	bne.n	8a2da <_free_r+0xfa>
   8a2ea:	68dc      	ldr	r4, [r3, #12]
   8a2ec:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a2f0:	60a0      	str	r0, [r4, #8]
   8a2f2:	60d8      	str	r0, [r3, #12]
   8a2f4:	4630      	mov	r0, r6
   8a2f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a2fa:	f000 be17 	b.w	8af2c <__malloc_unlock>
   8a2fe:	1953      	adds	r3, r2, r5
   8a300:	685b      	ldr	r3, [r3, #4]
   8a302:	07db      	lsls	r3, r3, #31
   8a304:	d466      	bmi.n	8a3d4 <_free_r+0x1f4>
   8a306:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a30a:	4429      	add	r1, r5
   8a30c:	f041 0401 	orr.w	r4, r1, #1
   8a310:	60d3      	str	r3, [r2, #12]
   8a312:	609a      	str	r2, [r3, #8]
   8a314:	6044      	str	r4, [r0, #4]
   8a316:	5041      	str	r1, [r0, r1]
   8a318:	4630      	mov	r0, r6
   8a31a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a31e:	f000 be05 	b.w	8af2c <__malloc_unlock>
   8a322:	07db      	lsls	r3, r3, #31
   8a324:	4429      	add	r1, r5
   8a326:	d407      	bmi.n	8a338 <_free_r+0x158>
   8a328:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a32c:	1b00      	subs	r0, r0, r4
   8a32e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a332:	4421      	add	r1, r4
   8a334:	60d3      	str	r3, [r2, #12]
   8a336:	609a      	str	r2, [r3, #8]
   8a338:	4b29      	ldr	r3, [pc, #164]	; (8a3e0 <_free_r+0x200>)
   8a33a:	f041 0201 	orr.w	r2, r1, #1
   8a33e:	681b      	ldr	r3, [r3, #0]
   8a340:	6042      	str	r2, [r0, #4]
   8a342:	428b      	cmp	r3, r1
   8a344:	f8cc 0008 	str.w	r0, [ip, #8]
   8a348:	d895      	bhi.n	8a276 <_free_r+0x96>
   8a34a:	4b26      	ldr	r3, [pc, #152]	; (8a3e4 <_free_r+0x204>)
   8a34c:	4630      	mov	r0, r6
   8a34e:	6819      	ldr	r1, [r3, #0]
   8a350:	f7ff fef6 	bl	8a140 <_malloc_trim_r>
   8a354:	e78f      	b.n	8a276 <_free_r+0x96>
   8a356:	2b14      	cmp	r3, #20
   8a358:	d90a      	bls.n	8a370 <_free_r+0x190>
   8a35a:	2b54      	cmp	r3, #84	; 0x54
   8a35c:	d821      	bhi.n	8a3a2 <_free_r+0x1c2>
   8a35e:	0b0b      	lsrs	r3, r1, #12
   8a360:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a364:	00ed      	lsls	r5, r5, #3
   8a366:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a36a:	e7af      	b.n	8a2cc <_free_r+0xec>
   8a36c:	4429      	add	r1, r5
   8a36e:	e78e      	b.n	8a28e <_free_r+0xae>
   8a370:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a374:	00ed      	lsls	r5, r5, #3
   8a376:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a37a:	e7a7      	b.n	8a2cc <_free_r+0xec>
   8a37c:	f041 0301 	orr.w	r3, r1, #1
   8a380:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a384:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a388:	6043      	str	r3, [r0, #4]
   8a38a:	5041      	str	r1, [r0, r1]
   8a38c:	e773      	b.n	8a276 <_free_r+0x96>
   8a38e:	2501      	movs	r5, #1
   8a390:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a394:	1092      	asrs	r2, r2, #2
   8a396:	fa05 f202 	lsl.w	r2, r5, r2
   8a39a:	430a      	orrs	r2, r1
   8a39c:	f8cc 2004 	str.w	r2, [ip, #4]
   8a3a0:	e7a4      	b.n	8a2ec <_free_r+0x10c>
   8a3a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a3a6:	d806      	bhi.n	8a3b6 <_free_r+0x1d6>
   8a3a8:	0bcb      	lsrs	r3, r1, #15
   8a3aa:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a3ae:	00ed      	lsls	r5, r5, #3
   8a3b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a3b4:	e78a      	b.n	8a2cc <_free_r+0xec>
   8a3b6:	f240 5254 	movw	r2, #1364	; 0x554
   8a3ba:	4293      	cmp	r3, r2
   8a3bc:	d806      	bhi.n	8a3cc <_free_r+0x1ec>
   8a3be:	0c8b      	lsrs	r3, r1, #18
   8a3c0:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a3c4:	00ed      	lsls	r5, r5, #3
   8a3c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a3ca:	e77f      	b.n	8a2cc <_free_r+0xec>
   8a3cc:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a3d0:	227e      	movs	r2, #126	; 0x7e
   8a3d2:	e77b      	b.n	8a2cc <_free_r+0xec>
   8a3d4:	f041 0301 	orr.w	r3, r1, #1
   8a3d8:	6043      	str	r3, [r0, #4]
   8a3da:	6011      	str	r1, [r2, #0]
   8a3dc:	e74b      	b.n	8a276 <_free_r+0x96>
   8a3de:	bf00      	nop
   8a3e0:	20001354 	.word	0x20001354
   8a3e4:	200021d4 	.word	0x200021d4
   8a3e8:	20000f48 	.word	0x20000f48

0008a3ec <__sfvwrite_r>:
   8a3ec:	6893      	ldr	r3, [r2, #8]
   8a3ee:	2b00      	cmp	r3, #0
   8a3f0:	f000 80bd 	beq.w	8a56e <__sfvwrite_r+0x182>
   8a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a3f8:	4690      	mov	r8, r2
   8a3fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a3fe:	460c      	mov	r4, r1
   8a400:	0711      	lsls	r1, r2, #28
   8a402:	4681      	mov	r9, r0
   8a404:	b083      	sub	sp, #12
   8a406:	b293      	uxth	r3, r2
   8a408:	d527      	bpl.n	8a45a <__sfvwrite_r+0x6e>
   8a40a:	6922      	ldr	r2, [r4, #16]
   8a40c:	b32a      	cbz	r2, 8a45a <__sfvwrite_r+0x6e>
   8a40e:	f013 0702 	ands.w	r7, r3, #2
   8a412:	f8d8 5000 	ldr.w	r5, [r8]
   8a416:	d02f      	beq.n	8a478 <__sfvwrite_r+0x8c>
   8a418:	f04f 0b00 	mov.w	fp, #0
   8a41c:	465f      	mov	r7, fp
   8a41e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8a6d4 <__sfvwrite_r+0x2e8>
   8a422:	2f00      	cmp	r7, #0
   8a424:	f000 8089 	beq.w	8a53a <__sfvwrite_r+0x14e>
   8a428:	4557      	cmp	r7, sl
   8a42a:	463b      	mov	r3, r7
   8a42c:	465a      	mov	r2, fp
   8a42e:	bf28      	it	cs
   8a430:	4653      	movcs	r3, sl
   8a432:	4648      	mov	r0, r9
   8a434:	69e1      	ldr	r1, [r4, #28]
   8a436:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a438:	47b0      	blx	r6
   8a43a:	2800      	cmp	r0, #0
   8a43c:	f340 808d 	ble.w	8a55a <__sfvwrite_r+0x16e>
   8a440:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a444:	4483      	add	fp, r0
   8a446:	1a1b      	subs	r3, r3, r0
   8a448:	1a3f      	subs	r7, r7, r0
   8a44a:	f8c8 3008 	str.w	r3, [r8, #8]
   8a44e:	2b00      	cmp	r3, #0
   8a450:	d1e7      	bne.n	8a422 <__sfvwrite_r+0x36>
   8a452:	2000      	movs	r0, #0
   8a454:	b003      	add	sp, #12
   8a456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a45a:	4621      	mov	r1, r4
   8a45c:	4648      	mov	r0, r9
   8a45e:	f7fe fc39 	bl	88cd4 <__swsetup_r>
   8a462:	2800      	cmp	r0, #0
   8a464:	f040 8132 	bne.w	8a6cc <__sfvwrite_r+0x2e0>
   8a468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a46c:	f8d8 5000 	ldr.w	r5, [r8]
   8a470:	b293      	uxth	r3, r2
   8a472:	f013 0702 	ands.w	r7, r3, #2
   8a476:	d1cf      	bne.n	8a418 <__sfvwrite_r+0x2c>
   8a478:	f013 0a01 	ands.w	sl, r3, #1
   8a47c:	d179      	bne.n	8a572 <__sfvwrite_r+0x186>
   8a47e:	4656      	mov	r6, sl
   8a480:	2e00      	cmp	r6, #0
   8a482:	d056      	beq.n	8a532 <__sfvwrite_r+0x146>
   8a484:	059a      	lsls	r2, r3, #22
   8a486:	68a7      	ldr	r7, [r4, #8]
   8a488:	f140 80bd 	bpl.w	8a606 <__sfvwrite_r+0x21a>
   8a48c:	42b7      	cmp	r7, r6
   8a48e:	46bb      	mov	fp, r7
   8a490:	f200 80d2 	bhi.w	8a638 <__sfvwrite_r+0x24c>
   8a494:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a498:	f000 80d0 	beq.w	8a63c <__sfvwrite_r+0x250>
   8a49c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8a4a0:	6822      	ldr	r2, [r4, #0]
   8a4a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8a4a6:	eba2 0b01 	sub.w	fp, r2, r1
   8a4aa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8a4ae:	f10b 0001 	add.w	r0, fp, #1
   8a4b2:	107f      	asrs	r7, r7, #1
   8a4b4:	4430      	add	r0, r6
   8a4b6:	42b8      	cmp	r0, r7
   8a4b8:	463a      	mov	r2, r7
   8a4ba:	bf84      	itt	hi
   8a4bc:	4607      	movhi	r7, r0
   8a4be:	463a      	movhi	r2, r7
   8a4c0:	055b      	lsls	r3, r3, #21
   8a4c2:	f140 80e7 	bpl.w	8a694 <__sfvwrite_r+0x2a8>
   8a4c6:	4611      	mov	r1, r2
   8a4c8:	4648      	mov	r0, r9
   8a4ca:	f000 f9bb 	bl	8a844 <_malloc_r>
   8a4ce:	2800      	cmp	r0, #0
   8a4d0:	f000 80f6 	beq.w	8a6c0 <__sfvwrite_r+0x2d4>
   8a4d4:	465a      	mov	r2, fp
   8a4d6:	6921      	ldr	r1, [r4, #16]
   8a4d8:	9000      	str	r0, [sp, #0]
   8a4da:	f7fb fd1b 	bl	85f14 <memcpy>
   8a4de:	89a2      	ldrh	r2, [r4, #12]
   8a4e0:	9b00      	ldr	r3, [sp, #0]
   8a4e2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a4e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a4ea:	81a2      	strh	r2, [r4, #12]
   8a4ec:	eba7 020b 	sub.w	r2, r7, fp
   8a4f0:	eb03 000b 	add.w	r0, r3, fp
   8a4f4:	6167      	str	r7, [r4, #20]
   8a4f6:	46b3      	mov	fp, r6
   8a4f8:	4637      	mov	r7, r6
   8a4fa:	6123      	str	r3, [r4, #16]
   8a4fc:	6020      	str	r0, [r4, #0]
   8a4fe:	60a2      	str	r2, [r4, #8]
   8a500:	465a      	mov	r2, fp
   8a502:	4651      	mov	r1, sl
   8a504:	f000 fca2 	bl	8ae4c <memmove>
   8a508:	68a2      	ldr	r2, [r4, #8]
   8a50a:	6823      	ldr	r3, [r4, #0]
   8a50c:	1bd2      	subs	r2, r2, r7
   8a50e:	4637      	mov	r7, r6
   8a510:	2600      	movs	r6, #0
   8a512:	445b      	add	r3, fp
   8a514:	60a2      	str	r2, [r4, #8]
   8a516:	6023      	str	r3, [r4, #0]
   8a518:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8a51c:	44ba      	add	sl, r7
   8a51e:	1bd7      	subs	r7, r2, r7
   8a520:	f8c8 7008 	str.w	r7, [r8, #8]
   8a524:	2f00      	cmp	r7, #0
   8a526:	d094      	beq.n	8a452 <__sfvwrite_r+0x66>
   8a528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a52c:	b29b      	uxth	r3, r3
   8a52e:	2e00      	cmp	r6, #0
   8a530:	d1a8      	bne.n	8a484 <__sfvwrite_r+0x98>
   8a532:	e9d5 a600 	ldrd	sl, r6, [r5]
   8a536:	3508      	adds	r5, #8
   8a538:	e7a2      	b.n	8a480 <__sfvwrite_r+0x94>
   8a53a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8a53e:	3508      	adds	r5, #8
   8a540:	e76f      	b.n	8a422 <__sfvwrite_r+0x36>
   8a542:	4629      	mov	r1, r5
   8a544:	465a      	mov	r2, fp
   8a546:	f000 fc81 	bl	8ae4c <memmove>
   8a54a:	6823      	ldr	r3, [r4, #0]
   8a54c:	4621      	mov	r1, r4
   8a54e:	445b      	add	r3, fp
   8a550:	4648      	mov	r0, r9
   8a552:	6023      	str	r3, [r4, #0]
   8a554:	f7ff fcc4 	bl	89ee0 <_fflush_r>
   8a558:	b358      	cbz	r0, 8a5b2 <__sfvwrite_r+0x1c6>
   8a55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a55e:	f04f 30ff 	mov.w	r0, #4294967295
   8a562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a566:	81a3      	strh	r3, [r4, #12]
   8a568:	b003      	add	sp, #12
   8a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a56e:	2000      	movs	r0, #0
   8a570:	4770      	bx	lr
   8a572:	463e      	mov	r6, r7
   8a574:	46aa      	mov	sl, r5
   8a576:	4638      	mov	r0, r7
   8a578:	463d      	mov	r5, r7
   8a57a:	9700      	str	r7, [sp, #0]
   8a57c:	b36e      	cbz	r6, 8a5da <__sfvwrite_r+0x1ee>
   8a57e:	2800      	cmp	r0, #0
   8a580:	d035      	beq.n	8a5ee <__sfvwrite_r+0x202>
   8a582:	9a00      	ldr	r2, [sp, #0]
   8a584:	6820      	ldr	r0, [r4, #0]
   8a586:	6921      	ldr	r1, [r4, #16]
   8a588:	42b2      	cmp	r2, r6
   8a58a:	bf28      	it	cs
   8a58c:	4632      	movcs	r2, r6
   8a58e:	4288      	cmp	r0, r1
   8a590:	6963      	ldr	r3, [r4, #20]
   8a592:	d904      	bls.n	8a59e <__sfvwrite_r+0x1b2>
   8a594:	68a1      	ldr	r1, [r4, #8]
   8a596:	eb03 0b01 	add.w	fp, r3, r1
   8a59a:	455a      	cmp	r2, fp
   8a59c:	dcd1      	bgt.n	8a542 <__sfvwrite_r+0x156>
   8a59e:	4293      	cmp	r3, r2
   8a5a0:	dc6b      	bgt.n	8a67a <__sfvwrite_r+0x28e>
   8a5a2:	462a      	mov	r2, r5
   8a5a4:	4648      	mov	r0, r9
   8a5a6:	69e1      	ldr	r1, [r4, #28]
   8a5a8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a5aa:	47b8      	blx	r7
   8a5ac:	f1b0 0b00 	subs.w	fp, r0, #0
   8a5b0:	ddd3      	ble.n	8a55a <__sfvwrite_r+0x16e>
   8a5b2:	9b00      	ldr	r3, [sp, #0]
   8a5b4:	ebb3 030b 	subs.w	r3, r3, fp
   8a5b8:	9300      	str	r3, [sp, #0]
   8a5ba:	d057      	beq.n	8a66c <__sfvwrite_r+0x280>
   8a5bc:	2001      	movs	r0, #1
   8a5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a5c2:	445d      	add	r5, fp
   8a5c4:	eba3 030b 	sub.w	r3, r3, fp
   8a5c8:	eba6 060b 	sub.w	r6, r6, fp
   8a5cc:	f8c8 3008 	str.w	r3, [r8, #8]
   8a5d0:	2b00      	cmp	r3, #0
   8a5d2:	f43f af3e 	beq.w	8a452 <__sfvwrite_r+0x66>
   8a5d6:	2e00      	cmp	r6, #0
   8a5d8:	d1d1      	bne.n	8a57e <__sfvwrite_r+0x192>
   8a5da:	f10a 0308 	add.w	r3, sl, #8
   8a5de:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a5e2:	469a      	mov	sl, r3
   8a5e4:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a5e8:	3308      	adds	r3, #8
   8a5ea:	2e00      	cmp	r6, #0
   8a5ec:	d0f7      	beq.n	8a5de <__sfvwrite_r+0x1f2>
   8a5ee:	4632      	mov	r2, r6
   8a5f0:	210a      	movs	r1, #10
   8a5f2:	4628      	mov	r0, r5
   8a5f4:	f000 fbea 	bl	8adcc <memchr>
   8a5f8:	2800      	cmp	r0, #0
   8a5fa:	d05e      	beq.n	8a6ba <__sfvwrite_r+0x2ce>
   8a5fc:	3001      	adds	r0, #1
   8a5fe:	1b43      	subs	r3, r0, r5
   8a600:	461a      	mov	r2, r3
   8a602:	9300      	str	r3, [sp, #0]
   8a604:	e7be      	b.n	8a584 <__sfvwrite_r+0x198>
   8a606:	6820      	ldr	r0, [r4, #0]
   8a608:	6923      	ldr	r3, [r4, #16]
   8a60a:	4298      	cmp	r0, r3
   8a60c:	d818      	bhi.n	8a640 <__sfvwrite_r+0x254>
   8a60e:	6962      	ldr	r2, [r4, #20]
   8a610:	42b2      	cmp	r2, r6
   8a612:	d815      	bhi.n	8a640 <__sfvwrite_r+0x254>
   8a614:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8a618:	42b3      	cmp	r3, r6
   8a61a:	bf28      	it	cs
   8a61c:	4633      	movcs	r3, r6
   8a61e:	fb93 f3f2 	sdiv	r3, r3, r2
   8a622:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a624:	fb02 f303 	mul.w	r3, r2, r3
   8a628:	4648      	mov	r0, r9
   8a62a:	4652      	mov	r2, sl
   8a62c:	69e1      	ldr	r1, [r4, #28]
   8a62e:	47b8      	blx	r7
   8a630:	1e07      	subs	r7, r0, #0
   8a632:	dd92      	ble.n	8a55a <__sfvwrite_r+0x16e>
   8a634:	1bf6      	subs	r6, r6, r7
   8a636:	e76f      	b.n	8a518 <__sfvwrite_r+0x12c>
   8a638:	4637      	mov	r7, r6
   8a63a:	46b3      	mov	fp, r6
   8a63c:	6820      	ldr	r0, [r4, #0]
   8a63e:	e75f      	b.n	8a500 <__sfvwrite_r+0x114>
   8a640:	42b7      	cmp	r7, r6
   8a642:	bf28      	it	cs
   8a644:	4637      	movcs	r7, r6
   8a646:	4651      	mov	r1, sl
   8a648:	463a      	mov	r2, r7
   8a64a:	f000 fbff 	bl	8ae4c <memmove>
   8a64e:	68a3      	ldr	r3, [r4, #8]
   8a650:	6822      	ldr	r2, [r4, #0]
   8a652:	1bdb      	subs	r3, r3, r7
   8a654:	443a      	add	r2, r7
   8a656:	60a3      	str	r3, [r4, #8]
   8a658:	6022      	str	r2, [r4, #0]
   8a65a:	2b00      	cmp	r3, #0
   8a65c:	d1ea      	bne.n	8a634 <__sfvwrite_r+0x248>
   8a65e:	4621      	mov	r1, r4
   8a660:	4648      	mov	r0, r9
   8a662:	f7ff fc3d 	bl	89ee0 <_fflush_r>
   8a666:	2800      	cmp	r0, #0
   8a668:	d0e4      	beq.n	8a634 <__sfvwrite_r+0x248>
   8a66a:	e776      	b.n	8a55a <__sfvwrite_r+0x16e>
   8a66c:	4621      	mov	r1, r4
   8a66e:	4648      	mov	r0, r9
   8a670:	f7ff fc36 	bl	89ee0 <_fflush_r>
   8a674:	2800      	cmp	r0, #0
   8a676:	d0a2      	beq.n	8a5be <__sfvwrite_r+0x1d2>
   8a678:	e76f      	b.n	8a55a <__sfvwrite_r+0x16e>
   8a67a:	4629      	mov	r1, r5
   8a67c:	4693      	mov	fp, r2
   8a67e:	9201      	str	r2, [sp, #4]
   8a680:	f000 fbe4 	bl	8ae4c <memmove>
   8a684:	68a1      	ldr	r1, [r4, #8]
   8a686:	6823      	ldr	r3, [r4, #0]
   8a688:	9a01      	ldr	r2, [sp, #4]
   8a68a:	1a89      	subs	r1, r1, r2
   8a68c:	441a      	add	r2, r3
   8a68e:	60a1      	str	r1, [r4, #8]
   8a690:	6022      	str	r2, [r4, #0]
   8a692:	e78e      	b.n	8a5b2 <__sfvwrite_r+0x1c6>
   8a694:	4648      	mov	r0, r9
   8a696:	f000 ffcb 	bl	8b630 <_realloc_r>
   8a69a:	4603      	mov	r3, r0
   8a69c:	2800      	cmp	r0, #0
   8a69e:	f47f af25 	bne.w	8a4ec <__sfvwrite_r+0x100>
   8a6a2:	4648      	mov	r0, r9
   8a6a4:	6921      	ldr	r1, [r4, #16]
   8a6a6:	f7ff fd9b 	bl	8a1e0 <_free_r>
   8a6aa:	220c      	movs	r2, #12
   8a6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a6b0:	f8c9 2000 	str.w	r2, [r9]
   8a6b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a6b8:	e751      	b.n	8a55e <__sfvwrite_r+0x172>
   8a6ba:	1c72      	adds	r2, r6, #1
   8a6bc:	9200      	str	r2, [sp, #0]
   8a6be:	e761      	b.n	8a584 <__sfvwrite_r+0x198>
   8a6c0:	220c      	movs	r2, #12
   8a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a6c6:	f8c9 2000 	str.w	r2, [r9]
   8a6ca:	e748      	b.n	8a55e <__sfvwrite_r+0x172>
   8a6cc:	f04f 30ff 	mov.w	r0, #4294967295
   8a6d0:	e6c0      	b.n	8a454 <__sfvwrite_r+0x68>
   8a6d2:	bf00      	nop
   8a6d4:	7ffffc00 	.word	0x7ffffc00

0008a6d8 <_fwalk_reent>:
   8a6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a6dc:	4607      	mov	r7, r0
   8a6de:	4688      	mov	r8, r1
   8a6e0:	f04f 0900 	mov.w	r9, #0
   8a6e4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a6e8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a6ec:	3d01      	subs	r5, #1
   8a6ee:	d410      	bmi.n	8a712 <_fwalk_reent+0x3a>
   8a6f0:	89a3      	ldrh	r3, [r4, #12]
   8a6f2:	3d01      	subs	r5, #1
   8a6f4:	2b01      	cmp	r3, #1
   8a6f6:	d908      	bls.n	8a70a <_fwalk_reent+0x32>
   8a6f8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a6fc:	3301      	adds	r3, #1
   8a6fe:	d004      	beq.n	8a70a <_fwalk_reent+0x32>
   8a700:	4621      	mov	r1, r4
   8a702:	4638      	mov	r0, r7
   8a704:	47c0      	blx	r8
   8a706:	ea49 0900 	orr.w	r9, r9, r0
   8a70a:	1c6b      	adds	r3, r5, #1
   8a70c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a710:	d1ee      	bne.n	8a6f0 <_fwalk_reent+0x18>
   8a712:	6836      	ldr	r6, [r6, #0]
   8a714:	2e00      	cmp	r6, #0
   8a716:	d1e7      	bne.n	8a6e8 <_fwalk_reent+0x10>
   8a718:	4648      	mov	r0, r9
   8a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a71e:	bf00      	nop

0008a720 <__locale_mb_cur_max>:
   8a720:	4b01      	ldr	r3, [pc, #4]	; (8a728 <__locale_mb_cur_max+0x8>)
   8a722:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a726:	4770      	bx	lr
   8a728:	20000ddc 	.word	0x20000ddc

0008a72c <_localeconv_r>:
   8a72c:	4800      	ldr	r0, [pc, #0]	; (8a730 <_localeconv_r+0x4>)
   8a72e:	4770      	bx	lr
   8a730:	20000ecc 	.word	0x20000ecc

0008a734 <__retarget_lock_init_recursive>:
   8a734:	4770      	bx	lr
   8a736:	bf00      	nop

0008a738 <__retarget_lock_close_recursive>:
   8a738:	4770      	bx	lr
   8a73a:	bf00      	nop

0008a73c <__retarget_lock_acquire_recursive>:
   8a73c:	4770      	bx	lr
   8a73e:	bf00      	nop

0008a740 <__retarget_lock_release_recursive>:
   8a740:	4770      	bx	lr
   8a742:	bf00      	nop

0008a744 <__swhatbuf_r>:
   8a744:	b570      	push	{r4, r5, r6, lr}
   8a746:	460c      	mov	r4, r1
   8a748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a74c:	4615      	mov	r5, r2
   8a74e:	2900      	cmp	r1, #0
   8a750:	461e      	mov	r6, r3
   8a752:	b096      	sub	sp, #88	; 0x58
   8a754:	db14      	blt.n	8a780 <__swhatbuf_r+0x3c>
   8a756:	466a      	mov	r2, sp
   8a758:	f001 fc20 	bl	8bf9c <_fstat_r>
   8a75c:	2800      	cmp	r0, #0
   8a75e:	db0f      	blt.n	8a780 <__swhatbuf_r+0x3c>
   8a760:	9a01      	ldr	r2, [sp, #4]
   8a762:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a76a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a76e:	fab2 f282 	clz	r2, r2
   8a772:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a776:	0952      	lsrs	r2, r2, #5
   8a778:	6032      	str	r2, [r6, #0]
   8a77a:	602b      	str	r3, [r5, #0]
   8a77c:	b016      	add	sp, #88	; 0x58
   8a77e:	bd70      	pop	{r4, r5, r6, pc}
   8a780:	2300      	movs	r3, #0
   8a782:	89a1      	ldrh	r1, [r4, #12]
   8a784:	6033      	str	r3, [r6, #0]
   8a786:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a78a:	d004      	beq.n	8a796 <__swhatbuf_r+0x52>
   8a78c:	2240      	movs	r2, #64	; 0x40
   8a78e:	4618      	mov	r0, r3
   8a790:	602a      	str	r2, [r5, #0]
   8a792:	b016      	add	sp, #88	; 0x58
   8a794:	bd70      	pop	{r4, r5, r6, pc}
   8a796:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a79a:	602b      	str	r3, [r5, #0]
   8a79c:	b016      	add	sp, #88	; 0x58
   8a79e:	bd70      	pop	{r4, r5, r6, pc}

0008a7a0 <__smakebuf_r>:
   8a7a0:	b570      	push	{r4, r5, r6, lr}
   8a7a2:	898b      	ldrh	r3, [r1, #12]
   8a7a4:	460c      	mov	r4, r1
   8a7a6:	079d      	lsls	r5, r3, #30
   8a7a8:	b082      	sub	sp, #8
   8a7aa:	d507      	bpl.n	8a7bc <__smakebuf_r+0x1c>
   8a7ac:	2201      	movs	r2, #1
   8a7ae:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8a7b2:	614a      	str	r2, [r1, #20]
   8a7b4:	600b      	str	r3, [r1, #0]
   8a7b6:	610b      	str	r3, [r1, #16]
   8a7b8:	b002      	add	sp, #8
   8a7ba:	bd70      	pop	{r4, r5, r6, pc}
   8a7bc:	ab01      	add	r3, sp, #4
   8a7be:	466a      	mov	r2, sp
   8a7c0:	4606      	mov	r6, r0
   8a7c2:	f7ff ffbf 	bl	8a744 <__swhatbuf_r>
   8a7c6:	9900      	ldr	r1, [sp, #0]
   8a7c8:	4605      	mov	r5, r0
   8a7ca:	4630      	mov	r0, r6
   8a7cc:	f000 f83a 	bl	8a844 <_malloc_r>
   8a7d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a7d4:	b170      	cbz	r0, 8a7f4 <__smakebuf_r+0x54>
   8a7d6:	4916      	ldr	r1, [pc, #88]	; (8a830 <__smakebuf_r+0x90>)
   8a7d8:	9a00      	ldr	r2, [sp, #0]
   8a7da:	63f1      	str	r1, [r6, #60]	; 0x3c
   8a7dc:	9901      	ldr	r1, [sp, #4]
   8a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a7e2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8a7e6:	81a3      	strh	r3, [r4, #12]
   8a7e8:	6020      	str	r0, [r4, #0]
   8a7ea:	b989      	cbnz	r1, 8a810 <__smakebuf_r+0x70>
   8a7ec:	432b      	orrs	r3, r5
   8a7ee:	81a3      	strh	r3, [r4, #12]
   8a7f0:	b002      	add	sp, #8
   8a7f2:	bd70      	pop	{r4, r5, r6, pc}
   8a7f4:	059a      	lsls	r2, r3, #22
   8a7f6:	d4df      	bmi.n	8a7b8 <__smakebuf_r+0x18>
   8a7f8:	2101      	movs	r1, #1
   8a7fa:	f023 0303 	bic.w	r3, r3, #3
   8a7fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a802:	f043 0302 	orr.w	r3, r3, #2
   8a806:	81a3      	strh	r3, [r4, #12]
   8a808:	6161      	str	r1, [r4, #20]
   8a80a:	6022      	str	r2, [r4, #0]
   8a80c:	6122      	str	r2, [r4, #16]
   8a80e:	e7d3      	b.n	8a7b8 <__smakebuf_r+0x18>
   8a810:	4630      	mov	r0, r6
   8a812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a816:	f001 fbd7 	bl	8bfc8 <_isatty_r>
   8a81a:	b910      	cbnz	r0, 8a822 <__smakebuf_r+0x82>
   8a81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a820:	e7e4      	b.n	8a7ec <__smakebuf_r+0x4c>
   8a822:	89a2      	ldrh	r2, [r4, #12]
   8a824:	f022 0203 	bic.w	r2, r2, #3
   8a828:	f042 0201 	orr.w	r2, r2, #1
   8a82c:	b213      	sxth	r3, r2
   8a82e:	e7dd      	b.n	8a7ec <__smakebuf_r+0x4c>
   8a830:	00089f8d 	.word	0x00089f8d

0008a834 <malloc>:
   8a834:	4b02      	ldr	r3, [pc, #8]	; (8a840 <malloc+0xc>)
   8a836:	4601      	mov	r1, r0
   8a838:	6818      	ldr	r0, [r3, #0]
   8a83a:	f000 b803 	b.w	8a844 <_malloc_r>
   8a83e:	bf00      	nop
   8a840:	200009ac 	.word	0x200009ac

0008a844 <_malloc_r>:
   8a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a848:	f101 050b 	add.w	r5, r1, #11
   8a84c:	2d16      	cmp	r5, #22
   8a84e:	4606      	mov	r6, r0
   8a850:	b083      	sub	sp, #12
   8a852:	d824      	bhi.n	8a89e <_malloc_r+0x5a>
   8a854:	2910      	cmp	r1, #16
   8a856:	f200 80b6 	bhi.w	8a9c6 <_malloc_r+0x182>
   8a85a:	f000 fb61 	bl	8af20 <__malloc_lock>
   8a85e:	2510      	movs	r5, #16
   8a860:	2002      	movs	r0, #2
   8a862:	2318      	movs	r3, #24
   8a864:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8ad50 <_malloc_r+0x50c>
   8a868:	4443      	add	r3, r8
   8a86a:	685c      	ldr	r4, [r3, #4]
   8a86c:	f1a3 0208 	sub.w	r2, r3, #8
   8a870:	4294      	cmp	r4, r2
   8a872:	f000 80b4 	beq.w	8a9de <_malloc_r+0x19a>
   8a876:	6863      	ldr	r3, [r4, #4]
   8a878:	68e1      	ldr	r1, [r4, #12]
   8a87a:	f023 0303 	bic.w	r3, r3, #3
   8a87e:	4423      	add	r3, r4
   8a880:	685a      	ldr	r2, [r3, #4]
   8a882:	68a5      	ldr	r5, [r4, #8]
   8a884:	f042 0201 	orr.w	r2, r2, #1
   8a888:	60e9      	str	r1, [r5, #12]
   8a88a:	4630      	mov	r0, r6
   8a88c:	608d      	str	r5, [r1, #8]
   8a88e:	3408      	adds	r4, #8
   8a890:	605a      	str	r2, [r3, #4]
   8a892:	f000 fb4b 	bl	8af2c <__malloc_unlock>
   8a896:	4620      	mov	r0, r4
   8a898:	b003      	add	sp, #12
   8a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a89e:	f035 0507 	bics.w	r5, r5, #7
   8a8a2:	f100 8090 	bmi.w	8a9c6 <_malloc_r+0x182>
   8a8a6:	42a9      	cmp	r1, r5
   8a8a8:	f200 808d 	bhi.w	8a9c6 <_malloc_r+0x182>
   8a8ac:	f000 fb38 	bl	8af20 <__malloc_lock>
   8a8b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8a8b4:	f0c0 8185 	bcc.w	8abc2 <_malloc_r+0x37e>
   8a8b8:	0a6b      	lsrs	r3, r5, #9
   8a8ba:	f000 808b 	beq.w	8a9d4 <_malloc_r+0x190>
   8a8be:	2b04      	cmp	r3, #4
   8a8c0:	f200 815b 	bhi.w	8ab7a <_malloc_r+0x336>
   8a8c4:	09ab      	lsrs	r3, r5, #6
   8a8c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a8ca:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8a8ce:	00c1      	lsls	r1, r0, #3
   8a8d0:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8ad50 <_malloc_r+0x50c>
   8a8d4:	4441      	add	r1, r8
   8a8d6:	684c      	ldr	r4, [r1, #4]
   8a8d8:	3908      	subs	r1, #8
   8a8da:	42a1      	cmp	r1, r4
   8a8dc:	d106      	bne.n	8a8ec <_malloc_r+0xa8>
   8a8de:	e00c      	b.n	8a8fa <_malloc_r+0xb6>
   8a8e0:	2a00      	cmp	r2, #0
   8a8e2:	f280 8122 	bge.w	8ab2a <_malloc_r+0x2e6>
   8a8e6:	68e4      	ldr	r4, [r4, #12]
   8a8e8:	42a1      	cmp	r1, r4
   8a8ea:	d006      	beq.n	8a8fa <_malloc_r+0xb6>
   8a8ec:	6863      	ldr	r3, [r4, #4]
   8a8ee:	f023 0303 	bic.w	r3, r3, #3
   8a8f2:	1b5a      	subs	r2, r3, r5
   8a8f4:	2a0f      	cmp	r2, #15
   8a8f6:	ddf3      	ble.n	8a8e0 <_malloc_r+0x9c>
   8a8f8:	4638      	mov	r0, r7
   8a8fa:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8a8fe:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8ad54 <_malloc_r+0x510>
   8a902:	4564      	cmp	r4, ip
   8a904:	d077      	beq.n	8a9f6 <_malloc_r+0x1b2>
   8a906:	6862      	ldr	r2, [r4, #4]
   8a908:	f022 0203 	bic.w	r2, r2, #3
   8a90c:	1b53      	subs	r3, r2, r5
   8a90e:	2b0f      	cmp	r3, #15
   8a910:	f300 8165 	bgt.w	8abde <_malloc_r+0x39a>
   8a914:	2b00      	cmp	r3, #0
   8a916:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8a91a:	f280 8156 	bge.w	8abca <_malloc_r+0x386>
   8a91e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a922:	f080 8106 	bcs.w	8ab32 <_malloc_r+0x2ee>
   8a926:	2101      	movs	r1, #1
   8a928:	08d3      	lsrs	r3, r2, #3
   8a92a:	0952      	lsrs	r2, r2, #5
   8a92c:	440b      	add	r3, r1
   8a92e:	fa01 f202 	lsl.w	r2, r1, r2
   8a932:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8a936:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8a93a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8a93e:	430a      	orrs	r2, r1
   8a940:	f1ae 0108 	sub.w	r1, lr, #8
   8a944:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8a948:	f8c8 2004 	str.w	r2, [r8, #4]
   8a94c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8a950:	60fc      	str	r4, [r7, #12]
   8a952:	2101      	movs	r1, #1
   8a954:	1083      	asrs	r3, r0, #2
   8a956:	4099      	lsls	r1, r3
   8a958:	4291      	cmp	r1, r2
   8a95a:	d853      	bhi.n	8aa04 <_malloc_r+0x1c0>
   8a95c:	4211      	tst	r1, r2
   8a95e:	d106      	bne.n	8a96e <_malloc_r+0x12a>
   8a960:	f020 0003 	bic.w	r0, r0, #3
   8a964:	0049      	lsls	r1, r1, #1
   8a966:	4211      	tst	r1, r2
   8a968:	f100 0004 	add.w	r0, r0, #4
   8a96c:	d0fa      	beq.n	8a964 <_malloc_r+0x120>
   8a96e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8a972:	464c      	mov	r4, r9
   8a974:	4686      	mov	lr, r0
   8a976:	68e7      	ldr	r7, [r4, #12]
   8a978:	42bc      	cmp	r4, r7
   8a97a:	d107      	bne.n	8a98c <_malloc_r+0x148>
   8a97c:	e109      	b.n	8ab92 <_malloc_r+0x34e>
   8a97e:	2b00      	cmp	r3, #0
   8a980:	f280 8110 	bge.w	8aba4 <_malloc_r+0x360>
   8a984:	68ff      	ldr	r7, [r7, #12]
   8a986:	42bc      	cmp	r4, r7
   8a988:	f000 8103 	beq.w	8ab92 <_malloc_r+0x34e>
   8a98c:	687a      	ldr	r2, [r7, #4]
   8a98e:	f022 0203 	bic.w	r2, r2, #3
   8a992:	1b53      	subs	r3, r2, r5
   8a994:	2b0f      	cmp	r3, #15
   8a996:	ddf2      	ble.n	8a97e <_malloc_r+0x13a>
   8a998:	f045 0e01 	orr.w	lr, r5, #1
   8a99c:	4630      	mov	r0, r6
   8a99e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8a9a2:	443d      	add	r5, r7
   8a9a4:	f043 0601 	orr.w	r6, r3, #1
   8a9a8:	f8c7 e004 	str.w	lr, [r7, #4]
   8a9ac:	60e1      	str	r1, [r4, #12]
   8a9ae:	608c      	str	r4, [r1, #8]
   8a9b0:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8a9b4:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8a9b8:	606e      	str	r6, [r5, #4]
   8a9ba:	50bb      	str	r3, [r7, r2]
   8a9bc:	f000 fab6 	bl	8af2c <__malloc_unlock>
   8a9c0:	f107 0408 	add.w	r4, r7, #8
   8a9c4:	e002      	b.n	8a9cc <_malloc_r+0x188>
   8a9c6:	230c      	movs	r3, #12
   8a9c8:	2400      	movs	r4, #0
   8a9ca:	6033      	str	r3, [r6, #0]
   8a9cc:	4620      	mov	r0, r4
   8a9ce:	b003      	add	sp, #12
   8a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9d4:	f44f 7100 	mov.w	r1, #512	; 0x200
   8a9d8:	2040      	movs	r0, #64	; 0x40
   8a9da:	273f      	movs	r7, #63	; 0x3f
   8a9dc:	e778      	b.n	8a8d0 <_malloc_r+0x8c>
   8a9de:	68dc      	ldr	r4, [r3, #12]
   8a9e0:	42a3      	cmp	r3, r4
   8a9e2:	bf08      	it	eq
   8a9e4:	3002      	addeq	r0, #2
   8a9e6:	f47f af46 	bne.w	8a876 <_malloc_r+0x32>
   8a9ea:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8a9ee:	f8df c364 	ldr.w	ip, [pc, #868]	; 8ad54 <_malloc_r+0x510>
   8a9f2:	4564      	cmp	r4, ip
   8a9f4:	d187      	bne.n	8a906 <_malloc_r+0xc2>
   8a9f6:	2101      	movs	r1, #1
   8a9f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8a9fc:	1083      	asrs	r3, r0, #2
   8a9fe:	4099      	lsls	r1, r3
   8aa00:	4291      	cmp	r1, r2
   8aa02:	d9ab      	bls.n	8a95c <_malloc_r+0x118>
   8aa04:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8aa08:	6867      	ldr	r7, [r4, #4]
   8aa0a:	f027 0703 	bic.w	r7, r7, #3
   8aa0e:	42bd      	cmp	r5, r7
   8aa10:	d802      	bhi.n	8aa18 <_malloc_r+0x1d4>
   8aa12:	1b7b      	subs	r3, r7, r5
   8aa14:	2b0f      	cmp	r3, #15
   8aa16:	dc77      	bgt.n	8ab08 <_malloc_r+0x2c4>
   8aa18:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8ad58 <_malloc_r+0x514>
   8aa1c:	4bc8      	ldr	r3, [pc, #800]	; (8ad40 <_malloc_r+0x4fc>)
   8aa1e:	f8d9 2000 	ldr.w	r2, [r9]
   8aa22:	681b      	ldr	r3, [r3, #0]
   8aa24:	3201      	adds	r2, #1
   8aa26:	442b      	add	r3, r5
   8aa28:	eb04 0a07 	add.w	sl, r4, r7
   8aa2c:	f000 8124 	beq.w	8ac78 <_malloc_r+0x434>
   8aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8aa34:	330f      	adds	r3, #15
   8aa36:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8aa3a:	f02b 0b0f 	bic.w	fp, fp, #15
   8aa3e:	4659      	mov	r1, fp
   8aa40:	4630      	mov	r0, r6
   8aa42:	f001 f81d 	bl	8ba80 <_sbrk_r>
   8aa46:	1c41      	adds	r1, r0, #1
   8aa48:	4602      	mov	r2, r0
   8aa4a:	f000 80e1 	beq.w	8ac10 <_malloc_r+0x3cc>
   8aa4e:	4582      	cmp	sl, r0
   8aa50:	f200 80dc 	bhi.w	8ac0c <_malloc_r+0x3c8>
   8aa54:	4bbb      	ldr	r3, [pc, #748]	; (8ad44 <_malloc_r+0x500>)
   8aa56:	6819      	ldr	r1, [r3, #0]
   8aa58:	4459      	add	r1, fp
   8aa5a:	4608      	mov	r0, r1
   8aa5c:	6019      	str	r1, [r3, #0]
   8aa5e:	f000 8141 	beq.w	8ace4 <_malloc_r+0x4a0>
   8aa62:	f8d9 1000 	ldr.w	r1, [r9]
   8aa66:	9301      	str	r3, [sp, #4]
   8aa68:	3101      	adds	r1, #1
   8aa6a:	bf1b      	ittet	ne
   8aa6c:	eba2 0a0a 	subne.w	sl, r2, sl
   8aa70:	4450      	addne	r0, sl
   8aa72:	f8c9 2000 	streq.w	r2, [r9]
   8aa76:	6018      	strne	r0, [r3, #0]
   8aa78:	f012 0a07 	ands.w	sl, r2, #7
   8aa7c:	f000 810a 	beq.w	8ac94 <_malloc_r+0x450>
   8aa80:	f1ca 0108 	rsb	r1, sl, #8
   8aa84:	440a      	add	r2, r1
   8aa86:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8aa8a:	4493      	add	fp, r2
   8aa8c:	3108      	adds	r1, #8
   8aa8e:	eba1 010b 	sub.w	r1, r1, fp
   8aa92:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8aa96:	4649      	mov	r1, r9
   8aa98:	4630      	mov	r0, r6
   8aa9a:	9200      	str	r2, [sp, #0]
   8aa9c:	f000 fff0 	bl	8ba80 <_sbrk_r>
   8aaa0:	1c42      	adds	r2, r0, #1
   8aaa2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aaa6:	f000 8143 	beq.w	8ad30 <_malloc_r+0x4ec>
   8aaaa:	1a80      	subs	r0, r0, r2
   8aaac:	eb00 0b09 	add.w	fp, r0, r9
   8aab0:	6819      	ldr	r1, [r3, #0]
   8aab2:	f04b 0001 	orr.w	r0, fp, #1
   8aab6:	4449      	add	r1, r9
   8aab8:	4544      	cmp	r4, r8
   8aaba:	f8c8 2008 	str.w	r2, [r8, #8]
   8aabe:	6019      	str	r1, [r3, #0]
   8aac0:	6050      	str	r0, [r2, #4]
   8aac2:	f000 811c 	beq.w	8acfe <_malloc_r+0x4ba>
   8aac6:	2f0f      	cmp	r7, #15
   8aac8:	f240 811b 	bls.w	8ad02 <_malloc_r+0x4be>
   8aacc:	f04f 0c05 	mov.w	ip, #5
   8aad0:	6860      	ldr	r0, [r4, #4]
   8aad2:	3f0c      	subs	r7, #12
   8aad4:	f027 0707 	bic.w	r7, r7, #7
   8aad8:	f000 0001 	and.w	r0, r0, #1
   8aadc:	4338      	orrs	r0, r7
   8aade:	eb04 0e07 	add.w	lr, r4, r7
   8aae2:	2f0f      	cmp	r7, #15
   8aae4:	6060      	str	r0, [r4, #4]
   8aae6:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8aaea:	f200 8137 	bhi.w	8ad5c <_malloc_r+0x518>
   8aaee:	4614      	mov	r4, r2
   8aaf0:	6850      	ldr	r0, [r2, #4]
   8aaf2:	4b95      	ldr	r3, [pc, #596]	; (8ad48 <_malloc_r+0x504>)
   8aaf4:	681a      	ldr	r2, [r3, #0]
   8aaf6:	428a      	cmp	r2, r1
   8aaf8:	bf38      	it	cc
   8aafa:	6019      	strcc	r1, [r3, #0]
   8aafc:	4b93      	ldr	r3, [pc, #588]	; (8ad4c <_malloc_r+0x508>)
   8aafe:	681a      	ldr	r2, [r3, #0]
   8ab00:	428a      	cmp	r2, r1
   8ab02:	bf38      	it	cc
   8ab04:	6019      	strcc	r1, [r3, #0]
   8ab06:	e086      	b.n	8ac16 <_malloc_r+0x3d2>
   8ab08:	f045 0201 	orr.w	r2, r5, #1
   8ab0c:	f043 0301 	orr.w	r3, r3, #1
   8ab10:	4425      	add	r5, r4
   8ab12:	6062      	str	r2, [r4, #4]
   8ab14:	4630      	mov	r0, r6
   8ab16:	f8c8 5008 	str.w	r5, [r8, #8]
   8ab1a:	3408      	adds	r4, #8
   8ab1c:	606b      	str	r3, [r5, #4]
   8ab1e:	f000 fa05 	bl	8af2c <__malloc_unlock>
   8ab22:	4620      	mov	r0, r4
   8ab24:	b003      	add	sp, #12
   8ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab2a:	4423      	add	r3, r4
   8ab2c:	685a      	ldr	r2, [r3, #4]
   8ab2e:	68e1      	ldr	r1, [r4, #12]
   8ab30:	e6a7      	b.n	8a882 <_malloc_r+0x3e>
   8ab32:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ab36:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ab3a:	d361      	bcc.n	8ac00 <_malloc_r+0x3bc>
   8ab3c:	2b14      	cmp	r3, #20
   8ab3e:	f200 80ba 	bhi.w	8acb6 <_malloc_r+0x472>
   8ab42:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ab46:	00c9      	lsls	r1, r1, #3
   8ab48:	335b      	adds	r3, #91	; 0x5b
   8ab4a:	eb08 0701 	add.w	r7, r8, r1
   8ab4e:	f858 1001 	ldr.w	r1, [r8, r1]
   8ab52:	3f08      	subs	r7, #8
   8ab54:	428f      	cmp	r7, r1
   8ab56:	f000 8092 	beq.w	8ac7e <_malloc_r+0x43a>
   8ab5a:	684b      	ldr	r3, [r1, #4]
   8ab5c:	f023 0303 	bic.w	r3, r3, #3
   8ab60:	4293      	cmp	r3, r2
   8ab62:	d902      	bls.n	8ab6a <_malloc_r+0x326>
   8ab64:	6889      	ldr	r1, [r1, #8]
   8ab66:	428f      	cmp	r7, r1
   8ab68:	d1f7      	bne.n	8ab5a <_malloc_r+0x316>
   8ab6a:	68cf      	ldr	r7, [r1, #12]
   8ab6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ab70:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ab74:	60bc      	str	r4, [r7, #8]
   8ab76:	60cc      	str	r4, [r1, #12]
   8ab78:	e6eb      	b.n	8a952 <_malloc_r+0x10e>
   8ab7a:	2b14      	cmp	r3, #20
   8ab7c:	d959      	bls.n	8ac32 <_malloc_r+0x3ee>
   8ab7e:	2b54      	cmp	r3, #84	; 0x54
   8ab80:	f200 80a1 	bhi.w	8acc6 <_malloc_r+0x482>
   8ab84:	0b2b      	lsrs	r3, r5, #12
   8ab86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ab8a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ab8e:	00c1      	lsls	r1, r0, #3
   8ab90:	e69e      	b.n	8a8d0 <_malloc_r+0x8c>
   8ab92:	f10e 0e01 	add.w	lr, lr, #1
   8ab96:	f01e 0f03 	tst.w	lr, #3
   8ab9a:	f104 0408 	add.w	r4, r4, #8
   8ab9e:	f47f aeea 	bne.w	8a976 <_malloc_r+0x132>
   8aba2:	e051      	b.n	8ac48 <_malloc_r+0x404>
   8aba4:	463c      	mov	r4, r7
   8aba6:	443a      	add	r2, r7
   8aba8:	6853      	ldr	r3, [r2, #4]
   8abaa:	68f9      	ldr	r1, [r7, #12]
   8abac:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8abb0:	f043 0301 	orr.w	r3, r3, #1
   8abb4:	6053      	str	r3, [r2, #4]
   8abb6:	4630      	mov	r0, r6
   8abb8:	60e9      	str	r1, [r5, #12]
   8abba:	608d      	str	r5, [r1, #8]
   8abbc:	f000 f9b6 	bl	8af2c <__malloc_unlock>
   8abc0:	e704      	b.n	8a9cc <_malloc_r+0x188>
   8abc2:	08e8      	lsrs	r0, r5, #3
   8abc4:	f105 0308 	add.w	r3, r5, #8
   8abc8:	e64c      	b.n	8a864 <_malloc_r+0x20>
   8abca:	4422      	add	r2, r4
   8abcc:	6853      	ldr	r3, [r2, #4]
   8abce:	4630      	mov	r0, r6
   8abd0:	f043 0301 	orr.w	r3, r3, #1
   8abd4:	6053      	str	r3, [r2, #4]
   8abd6:	3408      	adds	r4, #8
   8abd8:	f000 f9a8 	bl	8af2c <__malloc_unlock>
   8abdc:	e6f6      	b.n	8a9cc <_malloc_r+0x188>
   8abde:	f045 0701 	orr.w	r7, r5, #1
   8abe2:	f043 0101 	orr.w	r1, r3, #1
   8abe6:	4425      	add	r5, r4
   8abe8:	6067      	str	r7, [r4, #4]
   8abea:	4630      	mov	r0, r6
   8abec:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8abf0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8abf4:	6069      	str	r1, [r5, #4]
   8abf6:	50a3      	str	r3, [r4, r2]
   8abf8:	f000 f998 	bl	8af2c <__malloc_unlock>
   8abfc:	3408      	adds	r4, #8
   8abfe:	e6e5      	b.n	8a9cc <_malloc_r+0x188>
   8ac00:	0993      	lsrs	r3, r2, #6
   8ac02:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8ac06:	00c9      	lsls	r1, r1, #3
   8ac08:	3338      	adds	r3, #56	; 0x38
   8ac0a:	e79e      	b.n	8ab4a <_malloc_r+0x306>
   8ac0c:	4544      	cmp	r4, r8
   8ac0e:	d064      	beq.n	8acda <_malloc_r+0x496>
   8ac10:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ac14:	6860      	ldr	r0, [r4, #4]
   8ac16:	f020 0b03 	bic.w	fp, r0, #3
   8ac1a:	455d      	cmp	r5, fp
   8ac1c:	ebab 0305 	sub.w	r3, fp, r5
   8ac20:	d802      	bhi.n	8ac28 <_malloc_r+0x3e4>
   8ac22:	2b0f      	cmp	r3, #15
   8ac24:	f73f af70 	bgt.w	8ab08 <_malloc_r+0x2c4>
   8ac28:	4630      	mov	r0, r6
   8ac2a:	f000 f97f 	bl	8af2c <__malloc_unlock>
   8ac2e:	2400      	movs	r4, #0
   8ac30:	e6cc      	b.n	8a9cc <_malloc_r+0x188>
   8ac32:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8ac36:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8ac3a:	00c1      	lsls	r1, r0, #3
   8ac3c:	e648      	b.n	8a8d0 <_malloc_r+0x8c>
   8ac3e:	f859 3908 	ldr.w	r3, [r9], #-8
   8ac42:	454b      	cmp	r3, r9
   8ac44:	f040 80a9 	bne.w	8ad9a <_malloc_r+0x556>
   8ac48:	f010 0f03 	tst.w	r0, #3
   8ac4c:	f100 30ff 	add.w	r0, r0, #4294967295
   8ac50:	d1f5      	bne.n	8ac3e <_malloc_r+0x3fa>
   8ac52:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ac56:	ea23 0301 	bic.w	r3, r3, r1
   8ac5a:	f8c8 3004 	str.w	r3, [r8, #4]
   8ac5e:	0049      	lsls	r1, r1, #1
   8ac60:	4299      	cmp	r1, r3
   8ac62:	f63f aecf 	bhi.w	8aa04 <_malloc_r+0x1c0>
   8ac66:	b919      	cbnz	r1, 8ac70 <_malloc_r+0x42c>
   8ac68:	e6cc      	b.n	8aa04 <_malloc_r+0x1c0>
   8ac6a:	0049      	lsls	r1, r1, #1
   8ac6c:	f10e 0e04 	add.w	lr, lr, #4
   8ac70:	4219      	tst	r1, r3
   8ac72:	d0fa      	beq.n	8ac6a <_malloc_r+0x426>
   8ac74:	4670      	mov	r0, lr
   8ac76:	e67a      	b.n	8a96e <_malloc_r+0x12a>
   8ac78:	f103 0b10 	add.w	fp, r3, #16
   8ac7c:	e6df      	b.n	8aa3e <_malloc_r+0x1fa>
   8ac7e:	f04f 0e01 	mov.w	lr, #1
   8ac82:	109a      	asrs	r2, r3, #2
   8ac84:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ac88:	fa0e f202 	lsl.w	r2, lr, r2
   8ac8c:	431a      	orrs	r2, r3
   8ac8e:	f8c8 2004 	str.w	r2, [r8, #4]
   8ac92:	e76d      	b.n	8ab70 <_malloc_r+0x32c>
   8ac94:	eb02 010b 	add.w	r1, r2, fp
   8ac98:	4249      	negs	r1, r1
   8ac9a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8ac9e:	4649      	mov	r1, r9
   8aca0:	4630      	mov	r0, r6
   8aca2:	9200      	str	r2, [sp, #0]
   8aca4:	f000 feec 	bl	8ba80 <_sbrk_r>
   8aca8:	1c43      	adds	r3, r0, #1
   8acaa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8acae:	f47f aefc 	bne.w	8aaaa <_malloc_r+0x266>
   8acb2:	46d1      	mov	r9, sl
   8acb4:	e6fc      	b.n	8aab0 <_malloc_r+0x26c>
   8acb6:	2b54      	cmp	r3, #84	; 0x54
   8acb8:	d826      	bhi.n	8ad08 <_malloc_r+0x4c4>
   8acba:	0b13      	lsrs	r3, r2, #12
   8acbc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8acc0:	00c9      	lsls	r1, r1, #3
   8acc2:	336e      	adds	r3, #110	; 0x6e
   8acc4:	e741      	b.n	8ab4a <_malloc_r+0x306>
   8acc6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8acca:	d826      	bhi.n	8ad1a <_malloc_r+0x4d6>
   8accc:	0beb      	lsrs	r3, r5, #15
   8acce:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8acd2:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8acd6:	00c1      	lsls	r1, r0, #3
   8acd8:	e5fa      	b.n	8a8d0 <_malloc_r+0x8c>
   8acda:	4b1a      	ldr	r3, [pc, #104]	; (8ad44 <_malloc_r+0x500>)
   8acdc:	6818      	ldr	r0, [r3, #0]
   8acde:	4458      	add	r0, fp
   8ace0:	6018      	str	r0, [r3, #0]
   8ace2:	e6be      	b.n	8aa62 <_malloc_r+0x21e>
   8ace4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8ace8:	f1bc 0f00 	cmp.w	ip, #0
   8acec:	f47f aeb9 	bne.w	8aa62 <_malloc_r+0x21e>
   8acf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8acf4:	44bb      	add	fp, r7
   8acf6:	f04b 0001 	orr.w	r0, fp, #1
   8acfa:	6060      	str	r0, [r4, #4]
   8acfc:	e6f9      	b.n	8aaf2 <_malloc_r+0x2ae>
   8acfe:	4614      	mov	r4, r2
   8ad00:	e6f7      	b.n	8aaf2 <_malloc_r+0x2ae>
   8ad02:	2301      	movs	r3, #1
   8ad04:	6053      	str	r3, [r2, #4]
   8ad06:	e78f      	b.n	8ac28 <_malloc_r+0x3e4>
   8ad08:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8ad0c:	d832      	bhi.n	8ad74 <_malloc_r+0x530>
   8ad0e:	0bd3      	lsrs	r3, r2, #15
   8ad10:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8ad14:	00c9      	lsls	r1, r1, #3
   8ad16:	3377      	adds	r3, #119	; 0x77
   8ad18:	e717      	b.n	8ab4a <_malloc_r+0x306>
   8ad1a:	f240 5254 	movw	r2, #1364	; 0x554
   8ad1e:	4293      	cmp	r3, r2
   8ad20:	d832      	bhi.n	8ad88 <_malloc_r+0x544>
   8ad22:	0cab      	lsrs	r3, r5, #18
   8ad24:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8ad28:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8ad2c:	00c1      	lsls	r1, r0, #3
   8ad2e:	e5cf      	b.n	8a8d0 <_malloc_r+0x8c>
   8ad30:	f1aa 0a08 	sub.w	sl, sl, #8
   8ad34:	44d3      	add	fp, sl
   8ad36:	f04f 0900 	mov.w	r9, #0
   8ad3a:	ebab 0b02 	sub.w	fp, fp, r2
   8ad3e:	e6b7      	b.n	8aab0 <_malloc_r+0x26c>
   8ad40:	200021d4 	.word	0x200021d4
   8ad44:	200021a4 	.word	0x200021a4
   8ad48:	200021cc 	.word	0x200021cc
   8ad4c:	200021d0 	.word	0x200021d0
   8ad50:	20000f48 	.word	0x20000f48
   8ad54:	20000f50 	.word	0x20000f50
   8ad58:	20001350 	.word	0x20001350
   8ad5c:	f104 0108 	add.w	r1, r4, #8
   8ad60:	4630      	mov	r0, r6
   8ad62:	9300      	str	r3, [sp, #0]
   8ad64:	f7ff fa3c 	bl	8a1e0 <_free_r>
   8ad68:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ad6c:	9b00      	ldr	r3, [sp, #0]
   8ad6e:	6860      	ldr	r0, [r4, #4]
   8ad70:	6819      	ldr	r1, [r3, #0]
   8ad72:	e6be      	b.n	8aaf2 <_malloc_r+0x2ae>
   8ad74:	f240 5154 	movw	r1, #1364	; 0x554
   8ad78:	428b      	cmp	r3, r1
   8ad7a:	d80a      	bhi.n	8ad92 <_malloc_r+0x54e>
   8ad7c:	0c93      	lsrs	r3, r2, #18
   8ad7e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8ad82:	00c9      	lsls	r1, r1, #3
   8ad84:	337c      	adds	r3, #124	; 0x7c
   8ad86:	e6e0      	b.n	8ab4a <_malloc_r+0x306>
   8ad88:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ad8c:	207f      	movs	r0, #127	; 0x7f
   8ad8e:	277e      	movs	r7, #126	; 0x7e
   8ad90:	e59e      	b.n	8a8d0 <_malloc_r+0x8c>
   8ad92:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ad96:	237e      	movs	r3, #126	; 0x7e
   8ad98:	e6d7      	b.n	8ab4a <_malloc_r+0x306>
   8ad9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ad9e:	e75e      	b.n	8ac5e <_malloc_r+0x41a>

0008ada0 <__ascii_mbtowc>:
   8ada0:	b082      	sub	sp, #8
   8ada2:	b149      	cbz	r1, 8adb8 <__ascii_mbtowc+0x18>
   8ada4:	b15a      	cbz	r2, 8adbe <__ascii_mbtowc+0x1e>
   8ada6:	b16b      	cbz	r3, 8adc4 <__ascii_mbtowc+0x24>
   8ada8:	7813      	ldrb	r3, [r2, #0]
   8adaa:	600b      	str	r3, [r1, #0]
   8adac:	7812      	ldrb	r2, [r2, #0]
   8adae:	1e10      	subs	r0, r2, #0
   8adb0:	bf18      	it	ne
   8adb2:	2001      	movne	r0, #1
   8adb4:	b002      	add	sp, #8
   8adb6:	4770      	bx	lr
   8adb8:	a901      	add	r1, sp, #4
   8adba:	2a00      	cmp	r2, #0
   8adbc:	d1f3      	bne.n	8ada6 <__ascii_mbtowc+0x6>
   8adbe:	4610      	mov	r0, r2
   8adc0:	b002      	add	sp, #8
   8adc2:	4770      	bx	lr
   8adc4:	f06f 0001 	mvn.w	r0, #1
   8adc8:	e7f4      	b.n	8adb4 <__ascii_mbtowc+0x14>
   8adca:	bf00      	nop

0008adcc <memchr>:
   8adcc:	b470      	push	{r4, r5, r6}
   8adce:	0784      	lsls	r4, r0, #30
   8add0:	b2cd      	uxtb	r5, r1
   8add2:	d012      	beq.n	8adfa <memchr+0x2e>
   8add4:	4603      	mov	r3, r0
   8add6:	1e54      	subs	r4, r2, #1
   8add8:	b92a      	cbnz	r2, 8ade6 <memchr+0x1a>
   8adda:	e00b      	b.n	8adf4 <memchr+0x28>
   8addc:	079a      	lsls	r2, r3, #30
   8adde:	4618      	mov	r0, r3
   8ade0:	d00c      	beq.n	8adfc <memchr+0x30>
   8ade2:	3c01      	subs	r4, #1
   8ade4:	d306      	bcc.n	8adf4 <memchr+0x28>
   8ade6:	4618      	mov	r0, r3
   8ade8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8adec:	42aa      	cmp	r2, r5
   8adee:	d1f5      	bne.n	8addc <memchr+0x10>
   8adf0:	bc70      	pop	{r4, r5, r6}
   8adf2:	4770      	bx	lr
   8adf4:	2000      	movs	r0, #0
   8adf6:	bc70      	pop	{r4, r5, r6}
   8adf8:	4770      	bx	lr
   8adfa:	4614      	mov	r4, r2
   8adfc:	2c03      	cmp	r4, #3
   8adfe:	d80d      	bhi.n	8ae1c <memchr+0x50>
   8ae00:	2c00      	cmp	r4, #0
   8ae02:	d0f7      	beq.n	8adf4 <memchr+0x28>
   8ae04:	4602      	mov	r2, r0
   8ae06:	1903      	adds	r3, r0, r4
   8ae08:	e001      	b.n	8ae0e <memchr+0x42>
   8ae0a:	429a      	cmp	r2, r3
   8ae0c:	d0f2      	beq.n	8adf4 <memchr+0x28>
   8ae0e:	4610      	mov	r0, r2
   8ae10:	f812 1b01 	ldrb.w	r1, [r2], #1
   8ae14:	42a9      	cmp	r1, r5
   8ae16:	d1f8      	bne.n	8ae0a <memchr+0x3e>
   8ae18:	bc70      	pop	{r4, r5, r6}
   8ae1a:	4770      	bx	lr
   8ae1c:	4606      	mov	r6, r0
   8ae1e:	020a      	lsls	r2, r1, #8
   8ae20:	b292      	uxth	r2, r2
   8ae22:	432a      	orrs	r2, r5
   8ae24:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8ae28:	6833      	ldr	r3, [r6, #0]
   8ae2a:	4630      	mov	r0, r6
   8ae2c:	4053      	eors	r3, r2
   8ae2e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8ae32:	ea21 0303 	bic.w	r3, r1, r3
   8ae36:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8ae3a:	f106 0604 	add.w	r6, r6, #4
   8ae3e:	d1e1      	bne.n	8ae04 <memchr+0x38>
   8ae40:	3c04      	subs	r4, #4
   8ae42:	2c03      	cmp	r4, #3
   8ae44:	4630      	mov	r0, r6
   8ae46:	d8ef      	bhi.n	8ae28 <memchr+0x5c>
   8ae48:	e7da      	b.n	8ae00 <memchr+0x34>
   8ae4a:	bf00      	nop

0008ae4c <memmove>:
   8ae4c:	4288      	cmp	r0, r1
   8ae4e:	b4f0      	push	{r4, r5, r6, r7}
   8ae50:	d90d      	bls.n	8ae6e <memmove+0x22>
   8ae52:	188b      	adds	r3, r1, r2
   8ae54:	4283      	cmp	r3, r0
   8ae56:	d90a      	bls.n	8ae6e <memmove+0x22>
   8ae58:	1884      	adds	r4, r0, r2
   8ae5a:	b132      	cbz	r2, 8ae6a <memmove+0x1e>
   8ae5c:	4622      	mov	r2, r4
   8ae5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8ae62:	4299      	cmp	r1, r3
   8ae64:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8ae68:	d1f9      	bne.n	8ae5e <memmove+0x12>
   8ae6a:	bcf0      	pop	{r4, r5, r6, r7}
   8ae6c:	4770      	bx	lr
   8ae6e:	2a0f      	cmp	r2, #15
   8ae70:	d80e      	bhi.n	8ae90 <memmove+0x44>
   8ae72:	4603      	mov	r3, r0
   8ae74:	1e54      	subs	r4, r2, #1
   8ae76:	2a00      	cmp	r2, #0
   8ae78:	d0f7      	beq.n	8ae6a <memmove+0x1e>
   8ae7a:	3401      	adds	r4, #1
   8ae7c:	440c      	add	r4, r1
   8ae7e:	3b01      	subs	r3, #1
   8ae80:	f811 2b01 	ldrb.w	r2, [r1], #1
   8ae84:	42a1      	cmp	r1, r4
   8ae86:	f803 2f01 	strb.w	r2, [r3, #1]!
   8ae8a:	d1f9      	bne.n	8ae80 <memmove+0x34>
   8ae8c:	bcf0      	pop	{r4, r5, r6, r7}
   8ae8e:	4770      	bx	lr
   8ae90:	ea40 0301 	orr.w	r3, r0, r1
   8ae94:	079b      	lsls	r3, r3, #30
   8ae96:	d13e      	bne.n	8af16 <memmove+0xca>
   8ae98:	f1a2 0310 	sub.w	r3, r2, #16
   8ae9c:	f023 040f 	bic.w	r4, r3, #15
   8aea0:	f101 0720 	add.w	r7, r1, #32
   8aea4:	4427      	add	r7, r4
   8aea6:	091b      	lsrs	r3, r3, #4
   8aea8:	f101 0410 	add.w	r4, r1, #16
   8aeac:	f100 0510 	add.w	r5, r0, #16
   8aeb0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8aeb4:	3410      	adds	r4, #16
   8aeb6:	f845 6c10 	str.w	r6, [r5, #-16]
   8aeba:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8aebe:	3510      	adds	r5, #16
   8aec0:	f845 6c1c 	str.w	r6, [r5, #-28]
   8aec4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8aec8:	f845 6c18 	str.w	r6, [r5, #-24]
   8aecc:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8aed0:	42bc      	cmp	r4, r7
   8aed2:	f845 6c14 	str.w	r6, [r5, #-20]
   8aed6:	d1eb      	bne.n	8aeb0 <memmove+0x64>
   8aed8:	3301      	adds	r3, #1
   8aeda:	f012 0f0c 	tst.w	r2, #12
   8aede:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8aee2:	f002 040f 	and.w	r4, r2, #15
   8aee6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8aeea:	d017      	beq.n	8af1c <memmove+0xd0>
   8aeec:	460e      	mov	r6, r1
   8aeee:	3c04      	subs	r4, #4
   8aef0:	f024 0c03 	bic.w	ip, r4, #3
   8aef4:	08a5      	lsrs	r5, r4, #2
   8aef6:	449c      	add	ip, r3
   8aef8:	1f1c      	subs	r4, r3, #4
   8aefa:	f856 7b04 	ldr.w	r7, [r6], #4
   8aefe:	f844 7f04 	str.w	r7, [r4, #4]!
   8af02:	4564      	cmp	r4, ip
   8af04:	d1f9      	bne.n	8aefa <memmove+0xae>
   8af06:	1c6c      	adds	r4, r5, #1
   8af08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8af0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8af10:	f002 0203 	and.w	r2, r2, #3
   8af14:	e7ae      	b.n	8ae74 <memmove+0x28>
   8af16:	4603      	mov	r3, r0
   8af18:	1e54      	subs	r4, r2, #1
   8af1a:	e7ae      	b.n	8ae7a <memmove+0x2e>
   8af1c:	4622      	mov	r2, r4
   8af1e:	e7a9      	b.n	8ae74 <memmove+0x28>

0008af20 <__malloc_lock>:
   8af20:	4801      	ldr	r0, [pc, #4]	; (8af28 <__malloc_lock+0x8>)
   8af22:	f7ff bc0b 	b.w	8a73c <__retarget_lock_acquire_recursive>
   8af26:	bf00      	nop
   8af28:	200026c4 	.word	0x200026c4

0008af2c <__malloc_unlock>:
   8af2c:	4801      	ldr	r0, [pc, #4]	; (8af34 <__malloc_unlock+0x8>)
   8af2e:	f7ff bc07 	b.w	8a740 <__retarget_lock_release_recursive>
   8af32:	bf00      	nop
   8af34:	200026c4 	.word	0x200026c4

0008af38 <_Balloc>:
   8af38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8af3a:	b570      	push	{r4, r5, r6, lr}
   8af3c:	4605      	mov	r5, r0
   8af3e:	460c      	mov	r4, r1
   8af40:	b14b      	cbz	r3, 8af56 <_Balloc+0x1e>
   8af42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8af46:	b180      	cbz	r0, 8af6a <_Balloc+0x32>
   8af48:	6802      	ldr	r2, [r0, #0]
   8af4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8af4e:	2300      	movs	r3, #0
   8af50:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8af54:	bd70      	pop	{r4, r5, r6, pc}
   8af56:	2221      	movs	r2, #33	; 0x21
   8af58:	2104      	movs	r1, #4
   8af5a:	f000 ff63 	bl	8be24 <_calloc_r>
   8af5e:	4603      	mov	r3, r0
   8af60:	64e8      	str	r0, [r5, #76]	; 0x4c
   8af62:	2800      	cmp	r0, #0
   8af64:	d1ed      	bne.n	8af42 <_Balloc+0xa>
   8af66:	2000      	movs	r0, #0
   8af68:	bd70      	pop	{r4, r5, r6, pc}
   8af6a:	2101      	movs	r1, #1
   8af6c:	fa01 f604 	lsl.w	r6, r1, r4
   8af70:	1d72      	adds	r2, r6, #5
   8af72:	4628      	mov	r0, r5
   8af74:	0092      	lsls	r2, r2, #2
   8af76:	f000 ff55 	bl	8be24 <_calloc_r>
   8af7a:	2800      	cmp	r0, #0
   8af7c:	d0f3      	beq.n	8af66 <_Balloc+0x2e>
   8af7e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8af82:	e7e4      	b.n	8af4e <_Balloc+0x16>

0008af84 <_Bfree>:
   8af84:	b131      	cbz	r1, 8af94 <_Bfree+0x10>
   8af86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8af88:	684a      	ldr	r2, [r1, #4]
   8af8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8af8e:	6008      	str	r0, [r1, #0]
   8af90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8af94:	4770      	bx	lr
   8af96:	bf00      	nop

0008af98 <__multadd>:
   8af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8af9c:	4680      	mov	r8, r0
   8af9e:	461c      	mov	r4, r3
   8afa0:	2000      	movs	r0, #0
   8afa2:	460f      	mov	r7, r1
   8afa4:	690e      	ldr	r6, [r1, #16]
   8afa6:	3114      	adds	r1, #20
   8afa8:	680d      	ldr	r5, [r1, #0]
   8afaa:	3001      	adds	r0, #1
   8afac:	b2ab      	uxth	r3, r5
   8afae:	fb02 4303 	mla	r3, r2, r3, r4
   8afb2:	0c2c      	lsrs	r4, r5, #16
   8afb4:	0c1d      	lsrs	r5, r3, #16
   8afb6:	fb02 5404 	mla	r4, r2, r4, r5
   8afba:	b29b      	uxth	r3, r3
   8afbc:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8afc0:	4286      	cmp	r6, r0
   8afc2:	f841 3b04 	str.w	r3, [r1], #4
   8afc6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8afca:	dced      	bgt.n	8afa8 <__multadd+0x10>
   8afcc:	b13c      	cbz	r4, 8afde <__multadd+0x46>
   8afce:	68bb      	ldr	r3, [r7, #8]
   8afd0:	42b3      	cmp	r3, r6
   8afd2:	dd07      	ble.n	8afe4 <__multadd+0x4c>
   8afd4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8afd8:	3601      	adds	r6, #1
   8afda:	615c      	str	r4, [r3, #20]
   8afdc:	613e      	str	r6, [r7, #16]
   8afde:	4638      	mov	r0, r7
   8afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8afe4:	6879      	ldr	r1, [r7, #4]
   8afe6:	4640      	mov	r0, r8
   8afe8:	3101      	adds	r1, #1
   8afea:	f7ff ffa5 	bl	8af38 <_Balloc>
   8afee:	4605      	mov	r5, r0
   8aff0:	b1b0      	cbz	r0, 8b020 <__multadd+0x88>
   8aff2:	693a      	ldr	r2, [r7, #16]
   8aff4:	f107 010c 	add.w	r1, r7, #12
   8aff8:	3202      	adds	r2, #2
   8affa:	0092      	lsls	r2, r2, #2
   8affc:	300c      	adds	r0, #12
   8affe:	f7fa ff89 	bl	85f14 <memcpy>
   8b002:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b006:	687a      	ldr	r2, [r7, #4]
   8b008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b00c:	6039      	str	r1, [r7, #0]
   8b00e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b012:	462f      	mov	r7, r5
   8b014:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b018:	3601      	adds	r6, #1
   8b01a:	615c      	str	r4, [r3, #20]
   8b01c:	613e      	str	r6, [r7, #16]
   8b01e:	e7de      	b.n	8afde <__multadd+0x46>
   8b020:	4602      	mov	r2, r0
   8b022:	21b5      	movs	r1, #181	; 0xb5
   8b024:	4b01      	ldr	r3, [pc, #4]	; (8b02c <__multadd+0x94>)
   8b026:	4802      	ldr	r0, [pc, #8]	; (8b030 <__multadd+0x98>)
   8b028:	f000 fede 	bl	8bde8 <__assert_func>
   8b02c:	0008cc84 	.word	0x0008cc84
   8b030:	0008cd24 	.word	0x0008cd24

0008b034 <__hi0bits>:
   8b034:	0c02      	lsrs	r2, r0, #16
   8b036:	0412      	lsls	r2, r2, #16
   8b038:	4603      	mov	r3, r0
   8b03a:	b9ca      	cbnz	r2, 8b070 <__hi0bits+0x3c>
   8b03c:	0403      	lsls	r3, r0, #16
   8b03e:	2010      	movs	r0, #16
   8b040:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b044:	bf04      	itt	eq
   8b046:	021b      	lsleq	r3, r3, #8
   8b048:	3008      	addeq	r0, #8
   8b04a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b04e:	bf04      	itt	eq
   8b050:	011b      	lsleq	r3, r3, #4
   8b052:	3004      	addeq	r0, #4
   8b054:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b058:	bf04      	itt	eq
   8b05a:	009b      	lsleq	r3, r3, #2
   8b05c:	3002      	addeq	r0, #2
   8b05e:	2b00      	cmp	r3, #0
   8b060:	db05      	blt.n	8b06e <__hi0bits+0x3a>
   8b062:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b066:	f100 0001 	add.w	r0, r0, #1
   8b06a:	bf08      	it	eq
   8b06c:	2020      	moveq	r0, #32
   8b06e:	4770      	bx	lr
   8b070:	2000      	movs	r0, #0
   8b072:	e7e5      	b.n	8b040 <__hi0bits+0xc>

0008b074 <__lo0bits>:
   8b074:	6803      	ldr	r3, [r0, #0]
   8b076:	4601      	mov	r1, r0
   8b078:	f013 0207 	ands.w	r2, r3, #7
   8b07c:	d007      	beq.n	8b08e <__lo0bits+0x1a>
   8b07e:	07da      	lsls	r2, r3, #31
   8b080:	d420      	bmi.n	8b0c4 <__lo0bits+0x50>
   8b082:	0798      	lsls	r0, r3, #30
   8b084:	d522      	bpl.n	8b0cc <__lo0bits+0x58>
   8b086:	085b      	lsrs	r3, r3, #1
   8b088:	2001      	movs	r0, #1
   8b08a:	600b      	str	r3, [r1, #0]
   8b08c:	4770      	bx	lr
   8b08e:	b298      	uxth	r0, r3
   8b090:	b1a8      	cbz	r0, 8b0be <__lo0bits+0x4a>
   8b092:	4610      	mov	r0, r2
   8b094:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b098:	bf04      	itt	eq
   8b09a:	0a1b      	lsreq	r3, r3, #8
   8b09c:	3008      	addeq	r0, #8
   8b09e:	071a      	lsls	r2, r3, #28
   8b0a0:	bf04      	itt	eq
   8b0a2:	091b      	lsreq	r3, r3, #4
   8b0a4:	3004      	addeq	r0, #4
   8b0a6:	079a      	lsls	r2, r3, #30
   8b0a8:	bf04      	itt	eq
   8b0aa:	089b      	lsreq	r3, r3, #2
   8b0ac:	3002      	addeq	r0, #2
   8b0ae:	07da      	lsls	r2, r3, #31
   8b0b0:	d403      	bmi.n	8b0ba <__lo0bits+0x46>
   8b0b2:	085b      	lsrs	r3, r3, #1
   8b0b4:	f100 0001 	add.w	r0, r0, #1
   8b0b8:	d006      	beq.n	8b0c8 <__lo0bits+0x54>
   8b0ba:	600b      	str	r3, [r1, #0]
   8b0bc:	4770      	bx	lr
   8b0be:	2010      	movs	r0, #16
   8b0c0:	0c1b      	lsrs	r3, r3, #16
   8b0c2:	e7e7      	b.n	8b094 <__lo0bits+0x20>
   8b0c4:	2000      	movs	r0, #0
   8b0c6:	4770      	bx	lr
   8b0c8:	2020      	movs	r0, #32
   8b0ca:	4770      	bx	lr
   8b0cc:	089b      	lsrs	r3, r3, #2
   8b0ce:	2002      	movs	r0, #2
   8b0d0:	600b      	str	r3, [r1, #0]
   8b0d2:	4770      	bx	lr

0008b0d4 <__i2b>:
   8b0d4:	b510      	push	{r4, lr}
   8b0d6:	460c      	mov	r4, r1
   8b0d8:	2101      	movs	r1, #1
   8b0da:	f7ff ff2d 	bl	8af38 <_Balloc>
   8b0de:	4602      	mov	r2, r0
   8b0e0:	b118      	cbz	r0, 8b0ea <__i2b+0x16>
   8b0e2:	2301      	movs	r3, #1
   8b0e4:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b0e8:	bd10      	pop	{r4, pc}
   8b0ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b0ee:	4b02      	ldr	r3, [pc, #8]	; (8b0f8 <__i2b+0x24>)
   8b0f0:	4802      	ldr	r0, [pc, #8]	; (8b0fc <__i2b+0x28>)
   8b0f2:	f000 fe79 	bl	8bde8 <__assert_func>
   8b0f6:	bf00      	nop
   8b0f8:	0008cc84 	.word	0x0008cc84
   8b0fc:	0008cd24 	.word	0x0008cd24

0008b100 <__multiply>:
   8b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b104:	690d      	ldr	r5, [r1, #16]
   8b106:	6917      	ldr	r7, [r2, #16]
   8b108:	460e      	mov	r6, r1
   8b10a:	42bd      	cmp	r5, r7
   8b10c:	4614      	mov	r4, r2
   8b10e:	b085      	sub	sp, #20
   8b110:	db05      	blt.n	8b11e <__multiply+0x1e>
   8b112:	463a      	mov	r2, r7
   8b114:	4623      	mov	r3, r4
   8b116:	462f      	mov	r7, r5
   8b118:	460c      	mov	r4, r1
   8b11a:	4615      	mov	r5, r2
   8b11c:	461e      	mov	r6, r3
   8b11e:	68a3      	ldr	r3, [r4, #8]
   8b120:	6861      	ldr	r1, [r4, #4]
   8b122:	eb07 0805 	add.w	r8, r7, r5
   8b126:	4543      	cmp	r3, r8
   8b128:	bfb8      	it	lt
   8b12a:	3101      	addlt	r1, #1
   8b12c:	f7ff ff04 	bl	8af38 <_Balloc>
   8b130:	9001      	str	r0, [sp, #4]
   8b132:	2800      	cmp	r0, #0
   8b134:	f000 8088 	beq.w	8b248 <__multiply+0x148>
   8b138:	9b01      	ldr	r3, [sp, #4]
   8b13a:	f103 0914 	add.w	r9, r3, #20
   8b13e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b142:	45d1      	cmp	r9, sl
   8b144:	d205      	bcs.n	8b152 <__multiply+0x52>
   8b146:	464b      	mov	r3, r9
   8b148:	2200      	movs	r2, #0
   8b14a:	f843 2b04 	str.w	r2, [r3], #4
   8b14e:	459a      	cmp	sl, r3
   8b150:	d8fb      	bhi.n	8b14a <__multiply+0x4a>
   8b152:	f106 0e14 	add.w	lr, r6, #20
   8b156:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b15a:	f104 0314 	add.w	r3, r4, #20
   8b15e:	45de      	cmp	lr, fp
   8b160:	461a      	mov	r2, r3
   8b162:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b166:	d23e      	bcs.n	8b1e6 <__multiply+0xe6>
   8b168:	1b3b      	subs	r3, r7, r4
   8b16a:	3b15      	subs	r3, #21
   8b16c:	f023 0303 	bic.w	r3, r3, #3
   8b170:	3304      	adds	r3, #4
   8b172:	3415      	adds	r4, #21
   8b174:	42a7      	cmp	r7, r4
   8b176:	bf38      	it	cc
   8b178:	2304      	movcc	r3, #4
   8b17a:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b17e:	4698      	mov	r8, r3
   8b180:	4692      	mov	sl, r2
   8b182:	e003      	b.n	8b18c <__multiply+0x8c>
   8b184:	45f3      	cmp	fp, lr
   8b186:	f109 0904 	add.w	r9, r9, #4
   8b18a:	d92a      	bls.n	8b1e2 <__multiply+0xe2>
   8b18c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b190:	b286      	uxth	r6, r0
   8b192:	2e00      	cmp	r6, #0
   8b194:	d138      	bne.n	8b208 <__multiply+0x108>
   8b196:	0c00      	lsrs	r0, r0, #16
   8b198:	d0f4      	beq.n	8b184 <__multiply+0x84>
   8b19a:	f8d9 3000 	ldr.w	r3, [r9]
   8b19e:	4654      	mov	r4, sl
   8b1a0:	461e      	mov	r6, r3
   8b1a2:	464d      	mov	r5, r9
   8b1a4:	f04f 0c00 	mov.w	ip, #0
   8b1a8:	8822      	ldrh	r2, [r4, #0]
   8b1aa:	0c36      	lsrs	r6, r6, #16
   8b1ac:	fb00 6602 	mla	r6, r0, r2, r6
   8b1b0:	b29b      	uxth	r3, r3
   8b1b2:	44b4      	add	ip, r6
   8b1b4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b1b8:	f845 3b04 	str.w	r3, [r5], #4
   8b1bc:	f854 3b04 	ldr.w	r3, [r4], #4
   8b1c0:	682e      	ldr	r6, [r5, #0]
   8b1c2:	0c1b      	lsrs	r3, r3, #16
   8b1c4:	b2b2      	uxth	r2, r6
   8b1c6:	fb00 2303 	mla	r3, r0, r3, r2
   8b1ca:	42a7      	cmp	r7, r4
   8b1cc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b1d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b1d4:	d8e8      	bhi.n	8b1a8 <__multiply+0xa8>
   8b1d6:	45f3      	cmp	fp, lr
   8b1d8:	f849 3008 	str.w	r3, [r9, r8]
   8b1dc:	f109 0904 	add.w	r9, r9, #4
   8b1e0:	d8d4      	bhi.n	8b18c <__multiply+0x8c>
   8b1e2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b1e6:	f1b8 0f00 	cmp.w	r8, #0
   8b1ea:	dc03      	bgt.n	8b1f4 <__multiply+0xf4>
   8b1ec:	e006      	b.n	8b1fc <__multiply+0xfc>
   8b1ee:	f1b8 0801 	subs.w	r8, r8, #1
   8b1f2:	d003      	beq.n	8b1fc <__multiply+0xfc>
   8b1f4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b1f8:	2b00      	cmp	r3, #0
   8b1fa:	d0f8      	beq.n	8b1ee <__multiply+0xee>
   8b1fc:	9801      	ldr	r0, [sp, #4]
   8b1fe:	f8c0 8010 	str.w	r8, [r0, #16]
   8b202:	b005      	add	sp, #20
   8b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b208:	4655      	mov	r5, sl
   8b20a:	464c      	mov	r4, r9
   8b20c:	2300      	movs	r3, #0
   8b20e:	f855 1b04 	ldr.w	r1, [r5], #4
   8b212:	6820      	ldr	r0, [r4, #0]
   8b214:	b28a      	uxth	r2, r1
   8b216:	fa1f fc80 	uxth.w	ip, r0
   8b21a:	fb06 c202 	mla	r2, r6, r2, ip
   8b21e:	0c09      	lsrs	r1, r1, #16
   8b220:	0c00      	lsrs	r0, r0, #16
   8b222:	fb06 0101 	mla	r1, r6, r1, r0
   8b226:	4413      	add	r3, r2
   8b228:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b22c:	b29b      	uxth	r3, r3
   8b22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b232:	42af      	cmp	r7, r5
   8b234:	f844 3b04 	str.w	r3, [r4], #4
   8b238:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b23c:	d8e7      	bhi.n	8b20e <__multiply+0x10e>
   8b23e:	f849 3008 	str.w	r3, [r9, r8]
   8b242:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b246:	e7a6      	b.n	8b196 <__multiply+0x96>
   8b248:	4602      	mov	r2, r0
   8b24a:	f240 115d 	movw	r1, #349	; 0x15d
   8b24e:	4b02      	ldr	r3, [pc, #8]	; (8b258 <__multiply+0x158>)
   8b250:	4802      	ldr	r0, [pc, #8]	; (8b25c <__multiply+0x15c>)
   8b252:	f000 fdc9 	bl	8bde8 <__assert_func>
   8b256:	bf00      	nop
   8b258:	0008cc84 	.word	0x0008cc84
   8b25c:	0008cd24 	.word	0x0008cd24

0008b260 <__pow5mult>:
   8b260:	f012 0303 	ands.w	r3, r2, #3
   8b264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b268:	4614      	mov	r4, r2
   8b26a:	4607      	mov	r7, r0
   8b26c:	d12e      	bne.n	8b2cc <__pow5mult+0x6c>
   8b26e:	460e      	mov	r6, r1
   8b270:	10a4      	asrs	r4, r4, #2
   8b272:	d01c      	beq.n	8b2ae <__pow5mult+0x4e>
   8b274:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b276:	b395      	cbz	r5, 8b2de <__pow5mult+0x7e>
   8b278:	07e3      	lsls	r3, r4, #31
   8b27a:	f04f 0800 	mov.w	r8, #0
   8b27e:	d406      	bmi.n	8b28e <__pow5mult+0x2e>
   8b280:	1064      	asrs	r4, r4, #1
   8b282:	d014      	beq.n	8b2ae <__pow5mult+0x4e>
   8b284:	6828      	ldr	r0, [r5, #0]
   8b286:	b1a8      	cbz	r0, 8b2b4 <__pow5mult+0x54>
   8b288:	4605      	mov	r5, r0
   8b28a:	07e3      	lsls	r3, r4, #31
   8b28c:	d5f8      	bpl.n	8b280 <__pow5mult+0x20>
   8b28e:	462a      	mov	r2, r5
   8b290:	4631      	mov	r1, r6
   8b292:	4638      	mov	r0, r7
   8b294:	f7ff ff34 	bl	8b100 <__multiply>
   8b298:	b1b6      	cbz	r6, 8b2c8 <__pow5mult+0x68>
   8b29a:	6871      	ldr	r1, [r6, #4]
   8b29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b29e:	1064      	asrs	r4, r4, #1
   8b2a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b2a4:	6032      	str	r2, [r6, #0]
   8b2a6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b2aa:	4606      	mov	r6, r0
   8b2ac:	d1ea      	bne.n	8b284 <__pow5mult+0x24>
   8b2ae:	4630      	mov	r0, r6
   8b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b2b4:	462a      	mov	r2, r5
   8b2b6:	4629      	mov	r1, r5
   8b2b8:	4638      	mov	r0, r7
   8b2ba:	f7ff ff21 	bl	8b100 <__multiply>
   8b2be:	6028      	str	r0, [r5, #0]
   8b2c0:	4605      	mov	r5, r0
   8b2c2:	f8c0 8000 	str.w	r8, [r0]
   8b2c6:	e7e0      	b.n	8b28a <__pow5mult+0x2a>
   8b2c8:	4606      	mov	r6, r0
   8b2ca:	e7d9      	b.n	8b280 <__pow5mult+0x20>
   8b2cc:	4a09      	ldr	r2, [pc, #36]	; (8b2f4 <__pow5mult+0x94>)
   8b2ce:	3b01      	subs	r3, #1
   8b2d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b2d4:	2300      	movs	r3, #0
   8b2d6:	f7ff fe5f 	bl	8af98 <__multadd>
   8b2da:	4606      	mov	r6, r0
   8b2dc:	e7c8      	b.n	8b270 <__pow5mult+0x10>
   8b2de:	f240 2171 	movw	r1, #625	; 0x271
   8b2e2:	4638      	mov	r0, r7
   8b2e4:	f7ff fef6 	bl	8b0d4 <__i2b>
   8b2e8:	2300      	movs	r3, #0
   8b2ea:	64b8      	str	r0, [r7, #72]	; 0x48
   8b2ec:	4605      	mov	r5, r0
   8b2ee:	6003      	str	r3, [r0, #0]
   8b2f0:	e7c2      	b.n	8b278 <__pow5mult+0x18>
   8b2f2:	bf00      	nop
   8b2f4:	0008ce98 	.word	0x0008ce98

0008b2f8 <__lshift>:
   8b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b2fc:	690f      	ldr	r7, [r1, #16]
   8b2fe:	688b      	ldr	r3, [r1, #8]
   8b300:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b304:	1c7e      	adds	r6, r7, #1
   8b306:	429e      	cmp	r6, r3
   8b308:	460d      	mov	r5, r1
   8b30a:	4691      	mov	r9, r2
   8b30c:	4680      	mov	r8, r0
   8b30e:	6849      	ldr	r1, [r1, #4]
   8b310:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b314:	dd04      	ble.n	8b320 <__lshift+0x28>
   8b316:	005b      	lsls	r3, r3, #1
   8b318:	429e      	cmp	r6, r3
   8b31a:	f101 0101 	add.w	r1, r1, #1
   8b31e:	dcfa      	bgt.n	8b316 <__lshift+0x1e>
   8b320:	4640      	mov	r0, r8
   8b322:	f7ff fe09 	bl	8af38 <_Balloc>
   8b326:	2800      	cmp	r0, #0
   8b328:	d04f      	beq.n	8b3ca <__lshift+0xd2>
   8b32a:	2c00      	cmp	r4, #0
   8b32c:	f100 0114 	add.w	r1, r0, #20
   8b330:	dd0d      	ble.n	8b34e <__lshift+0x56>
   8b332:	460b      	mov	r3, r1
   8b334:	2200      	movs	r2, #0
   8b336:	3405      	adds	r4, #5
   8b338:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b33c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b340:	f843 2b04 	str.w	r2, [r3], #4
   8b344:	42a3      	cmp	r3, r4
   8b346:	d1fb      	bne.n	8b340 <__lshift+0x48>
   8b348:	f1ac 0314 	sub.w	r3, ip, #20
   8b34c:	4419      	add	r1, r3
   8b34e:	692c      	ldr	r4, [r5, #16]
   8b350:	f105 0314 	add.w	r3, r5, #20
   8b354:	f019 091f 	ands.w	r9, r9, #31
   8b358:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b35c:	d02d      	beq.n	8b3ba <__lshift+0xc2>
   8b35e:	468e      	mov	lr, r1
   8b360:	f04f 0a00 	mov.w	sl, #0
   8b364:	f1c9 0220 	rsb	r2, r9, #32
   8b368:	681c      	ldr	r4, [r3, #0]
   8b36a:	fa04 f409 	lsl.w	r4, r4, r9
   8b36e:	ea44 040a 	orr.w	r4, r4, sl
   8b372:	f84e 4b04 	str.w	r4, [lr], #4
   8b376:	f853 4b04 	ldr.w	r4, [r3], #4
   8b37a:	459c      	cmp	ip, r3
   8b37c:	fa24 fa02 	lsr.w	sl, r4, r2
   8b380:	d8f2      	bhi.n	8b368 <__lshift+0x70>
   8b382:	ebac 0305 	sub.w	r3, ip, r5
   8b386:	3b15      	subs	r3, #21
   8b388:	f023 0303 	bic.w	r3, r3, #3
   8b38c:	3304      	adds	r3, #4
   8b38e:	f105 0215 	add.w	r2, r5, #21
   8b392:	4594      	cmp	ip, r2
   8b394:	bf38      	it	cc
   8b396:	2304      	movcc	r3, #4
   8b398:	f1ba 0f00 	cmp.w	sl, #0
   8b39c:	bf18      	it	ne
   8b39e:	4637      	movne	r7, r6
   8b3a0:	f841 a003 	str.w	sl, [r1, r3]
   8b3a4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b3a8:	686a      	ldr	r2, [r5, #4]
   8b3aa:	6107      	str	r7, [r0, #16]
   8b3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b3b0:	6029      	str	r1, [r5, #0]
   8b3b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b3ba:	3904      	subs	r1, #4
   8b3bc:	f853 2b04 	ldr.w	r2, [r3], #4
   8b3c0:	459c      	cmp	ip, r3
   8b3c2:	f841 2f04 	str.w	r2, [r1, #4]!
   8b3c6:	d8f9      	bhi.n	8b3bc <__lshift+0xc4>
   8b3c8:	e7ec      	b.n	8b3a4 <__lshift+0xac>
   8b3ca:	4602      	mov	r2, r0
   8b3cc:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b3d0:	4b01      	ldr	r3, [pc, #4]	; (8b3d8 <__lshift+0xe0>)
   8b3d2:	4802      	ldr	r0, [pc, #8]	; (8b3dc <__lshift+0xe4>)
   8b3d4:	f000 fd08 	bl	8bde8 <__assert_func>
   8b3d8:	0008cc84 	.word	0x0008cc84
   8b3dc:	0008cd24 	.word	0x0008cd24

0008b3e0 <__mcmp>:
   8b3e0:	b430      	push	{r4, r5}
   8b3e2:	690b      	ldr	r3, [r1, #16]
   8b3e4:	4605      	mov	r5, r0
   8b3e6:	6900      	ldr	r0, [r0, #16]
   8b3e8:	1ac0      	subs	r0, r0, r3
   8b3ea:	d111      	bne.n	8b410 <__mcmp+0x30>
   8b3ec:	3514      	adds	r5, #20
   8b3ee:	3114      	adds	r1, #20
   8b3f0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b3f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b3f8:	e001      	b.n	8b3fe <__mcmp+0x1e>
   8b3fa:	429d      	cmp	r5, r3
   8b3fc:	d208      	bcs.n	8b410 <__mcmp+0x30>
   8b3fe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b402:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b406:	428c      	cmp	r4, r1
   8b408:	d0f7      	beq.n	8b3fa <__mcmp+0x1a>
   8b40a:	d203      	bcs.n	8b414 <__mcmp+0x34>
   8b40c:	f04f 30ff 	mov.w	r0, #4294967295
   8b410:	bc30      	pop	{r4, r5}
   8b412:	4770      	bx	lr
   8b414:	2001      	movs	r0, #1
   8b416:	bc30      	pop	{r4, r5}
   8b418:	4770      	bx	lr
   8b41a:	bf00      	nop

0008b41c <__mdiff>:
   8b41c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b420:	690b      	ldr	r3, [r1, #16]
   8b422:	460c      	mov	r4, r1
   8b424:	6911      	ldr	r1, [r2, #16]
   8b426:	4690      	mov	r8, r2
   8b428:	eba3 0b01 	sub.w	fp, r3, r1
   8b42c:	f1bb 0f00 	cmp.w	fp, #0
   8b430:	d17c      	bne.n	8b52c <__mdiff+0x110>
   8b432:	f104 0614 	add.w	r6, r4, #20
   8b436:	3214      	adds	r2, #20
   8b438:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b43c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b440:	e001      	b.n	8b446 <__mdiff+0x2a>
   8b442:	429e      	cmp	r6, r3
   8b444:	d276      	bcs.n	8b534 <__mdiff+0x118>
   8b446:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b44a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b44e:	428d      	cmp	r5, r1
   8b450:	d0f7      	beq.n	8b442 <__mdiff+0x26>
   8b452:	d365      	bcc.n	8b520 <__mdiff+0x104>
   8b454:	6861      	ldr	r1, [r4, #4]
   8b456:	f7ff fd6f 	bl	8af38 <_Balloc>
   8b45a:	2800      	cmp	r0, #0
   8b45c:	d074      	beq.n	8b548 <__mdiff+0x12c>
   8b45e:	f100 0614 	add.w	r6, r0, #20
   8b462:	46b4      	mov	ip, r6
   8b464:	2300      	movs	r3, #0
   8b466:	6927      	ldr	r7, [r4, #16]
   8b468:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b46c:	f104 0a14 	add.w	sl, r4, #20
   8b470:	f108 0514 	add.w	r5, r8, #20
   8b474:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b478:	3410      	adds	r4, #16
   8b47a:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b47e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b482:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b486:	f855 bb04 	ldr.w	fp, [r5], #4
   8b48a:	b291      	uxth	r1, r2
   8b48c:	440b      	add	r3, r1
   8b48e:	fa1f f18b 	uxth.w	r1, fp
   8b492:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b496:	1a59      	subs	r1, r3, r1
   8b498:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b49c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b4a0:	b289      	uxth	r1, r1
   8b4a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b4a6:	45a9      	cmp	r9, r5
   8b4a8:	f84c 1b04 	str.w	r1, [ip], #4
   8b4ac:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b4b0:	d8e7      	bhi.n	8b482 <__mdiff+0x66>
   8b4b2:	eba9 0208 	sub.w	r2, r9, r8
   8b4b6:	3a15      	subs	r2, #21
   8b4b8:	f108 0815 	add.w	r8, r8, #21
   8b4bc:	45c1      	cmp	r9, r8
   8b4be:	f022 0403 	bic.w	r4, r2, #3
   8b4c2:	f104 0404 	add.w	r4, r4, #4
   8b4c6:	bf38      	it	cc
   8b4c8:	2404      	movcc	r4, #4
   8b4ca:	f022 0203 	bic.w	r2, r2, #3
   8b4ce:	bf38      	it	cc
   8b4d0:	2200      	movcc	r2, #0
   8b4d2:	44a2      	add	sl, r4
   8b4d4:	45d6      	cmp	lr, sl
   8b4d6:	4434      	add	r4, r6
   8b4d8:	4416      	add	r6, r2
   8b4da:	d918      	bls.n	8b50e <__mdiff+0xf2>
   8b4dc:	4625      	mov	r5, r4
   8b4de:	4652      	mov	r2, sl
   8b4e0:	f852 6b04 	ldr.w	r6, [r2], #4
   8b4e4:	b2b1      	uxth	r1, r6
   8b4e6:	4419      	add	r1, r3
   8b4e8:	140b      	asrs	r3, r1, #16
   8b4ea:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8b4ee:	b289      	uxth	r1, r1
   8b4f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b4f4:	4596      	cmp	lr, r2
   8b4f6:	f845 1b04 	str.w	r1, [r5], #4
   8b4fa:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b4fe:	d8ef      	bhi.n	8b4e0 <__mdiff+0xc4>
   8b500:	f10e 36ff 	add.w	r6, lr, #4294967295
   8b504:	eba6 060a 	sub.w	r6, r6, sl
   8b508:	f026 0603 	bic.w	r6, r6, #3
   8b50c:	4426      	add	r6, r4
   8b50e:	b921      	cbnz	r1, 8b51a <__mdiff+0xfe>
   8b510:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8b514:	3f01      	subs	r7, #1
   8b516:	2b00      	cmp	r3, #0
   8b518:	d0fa      	beq.n	8b510 <__mdiff+0xf4>
   8b51a:	6107      	str	r7, [r0, #16]
   8b51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b520:	4623      	mov	r3, r4
   8b522:	f04f 0b01 	mov.w	fp, #1
   8b526:	4644      	mov	r4, r8
   8b528:	4698      	mov	r8, r3
   8b52a:	e793      	b.n	8b454 <__mdiff+0x38>
   8b52c:	dbf8      	blt.n	8b520 <__mdiff+0x104>
   8b52e:	f04f 0b00 	mov.w	fp, #0
   8b532:	e78f      	b.n	8b454 <__mdiff+0x38>
   8b534:	2100      	movs	r1, #0
   8b536:	f7ff fcff 	bl	8af38 <_Balloc>
   8b53a:	b160      	cbz	r0, 8b556 <__mdiff+0x13a>
   8b53c:	2201      	movs	r2, #1
   8b53e:	2300      	movs	r3, #0
   8b540:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b548:	4602      	mov	r2, r0
   8b54a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b54e:	4b05      	ldr	r3, [pc, #20]	; (8b564 <__mdiff+0x148>)
   8b550:	4805      	ldr	r0, [pc, #20]	; (8b568 <__mdiff+0x14c>)
   8b552:	f000 fc49 	bl	8bde8 <__assert_func>
   8b556:	4602      	mov	r2, r0
   8b558:	f240 2132 	movw	r1, #562	; 0x232
   8b55c:	4b01      	ldr	r3, [pc, #4]	; (8b564 <__mdiff+0x148>)
   8b55e:	4802      	ldr	r0, [pc, #8]	; (8b568 <__mdiff+0x14c>)
   8b560:	f000 fc42 	bl	8bde8 <__assert_func>
   8b564:	0008cc84 	.word	0x0008cc84
   8b568:	0008cd24 	.word	0x0008cd24

0008b56c <__d2b>:
   8b56c:	b570      	push	{r4, r5, r6, lr}
   8b56e:	2101      	movs	r1, #1
   8b570:	b082      	sub	sp, #8
   8b572:	4616      	mov	r6, r2
   8b574:	461d      	mov	r5, r3
   8b576:	f7ff fcdf 	bl	8af38 <_Balloc>
   8b57a:	4604      	mov	r4, r0
   8b57c:	2800      	cmp	r0, #0
   8b57e:	d04c      	beq.n	8b61a <__d2b+0xae>
   8b580:	462b      	mov	r3, r5
   8b582:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b586:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b58a:	b10d      	cbz	r5, 8b590 <__d2b+0x24>
   8b58c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b590:	2e00      	cmp	r6, #0
   8b592:	9301      	str	r3, [sp, #4]
   8b594:	d022      	beq.n	8b5dc <__d2b+0x70>
   8b596:	4668      	mov	r0, sp
   8b598:	9600      	str	r6, [sp, #0]
   8b59a:	f7ff fd6b 	bl	8b074 <__lo0bits>
   8b59e:	2800      	cmp	r0, #0
   8b5a0:	d037      	beq.n	8b612 <__d2b+0xa6>
   8b5a2:	9b01      	ldr	r3, [sp, #4]
   8b5a4:	9900      	ldr	r1, [sp, #0]
   8b5a6:	f1c0 0220 	rsb	r2, r0, #32
   8b5aa:	fa03 f202 	lsl.w	r2, r3, r2
   8b5ae:	430a      	orrs	r2, r1
   8b5b0:	40c3      	lsrs	r3, r0
   8b5b2:	9301      	str	r3, [sp, #4]
   8b5b4:	6162      	str	r2, [r4, #20]
   8b5b6:	2b00      	cmp	r3, #0
   8b5b8:	bf14      	ite	ne
   8b5ba:	2102      	movne	r1, #2
   8b5bc:	2101      	moveq	r1, #1
   8b5be:	61a3      	str	r3, [r4, #24]
   8b5c0:	6121      	str	r1, [r4, #16]
   8b5c2:	b1b5      	cbz	r5, 8b5f2 <__d2b+0x86>
   8b5c4:	9a06      	ldr	r2, [sp, #24]
   8b5c6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b5ca:	4403      	add	r3, r0
   8b5cc:	6013      	str	r3, [r2, #0]
   8b5ce:	9b07      	ldr	r3, [sp, #28]
   8b5d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b5d4:	6018      	str	r0, [r3, #0]
   8b5d6:	4620      	mov	r0, r4
   8b5d8:	b002      	add	sp, #8
   8b5da:	bd70      	pop	{r4, r5, r6, pc}
   8b5dc:	a801      	add	r0, sp, #4
   8b5de:	f7ff fd49 	bl	8b074 <__lo0bits>
   8b5e2:	2301      	movs	r3, #1
   8b5e4:	9a01      	ldr	r2, [sp, #4]
   8b5e6:	4619      	mov	r1, r3
   8b5e8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b5ec:	3020      	adds	r0, #32
   8b5ee:	2d00      	cmp	r5, #0
   8b5f0:	d1e8      	bne.n	8b5c4 <__d2b+0x58>
   8b5f2:	9a06      	ldr	r2, [sp, #24]
   8b5f4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8b5f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b5fc:	6010      	str	r0, [r2, #0]
   8b5fe:	6918      	ldr	r0, [r3, #16]
   8b600:	f7ff fd18 	bl	8b034 <__hi0bits>
   8b604:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b608:	4620      	mov	r0, r4
   8b60a:	9b07      	ldr	r3, [sp, #28]
   8b60c:	6019      	str	r1, [r3, #0]
   8b60e:	b002      	add	sp, #8
   8b610:	bd70      	pop	{r4, r5, r6, pc}
   8b612:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b616:	6162      	str	r2, [r4, #20]
   8b618:	e7cd      	b.n	8b5b6 <__d2b+0x4a>
   8b61a:	4602      	mov	r2, r0
   8b61c:	f240 310a 	movw	r1, #778	; 0x30a
   8b620:	4b01      	ldr	r3, [pc, #4]	; (8b628 <__d2b+0xbc>)
   8b622:	4802      	ldr	r0, [pc, #8]	; (8b62c <__d2b+0xc0>)
   8b624:	f000 fbe0 	bl	8bde8 <__assert_func>
   8b628:	0008cc84 	.word	0x0008cc84
   8b62c:	0008cd24 	.word	0x0008cd24

0008b630 <_realloc_r>:
   8b630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b634:	4616      	mov	r6, r2
   8b636:	2900      	cmp	r1, #0
   8b638:	f000 80bd 	beq.w	8b7b6 <_realloc_r+0x186>
   8b63c:	f106 050b 	add.w	r5, r6, #11
   8b640:	460c      	mov	r4, r1
   8b642:	4680      	mov	r8, r0
   8b644:	f7ff fc6c 	bl	8af20 <__malloc_lock>
   8b648:	2d16      	cmp	r5, #22
   8b64a:	d85f      	bhi.n	8b70c <_realloc_r+0xdc>
   8b64c:	2510      	movs	r5, #16
   8b64e:	462a      	mov	r2, r5
   8b650:	42ae      	cmp	r6, r5
   8b652:	d860      	bhi.n	8b716 <_realloc_r+0xe6>
   8b654:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b658:	f1a4 0908 	sub.w	r9, r4, #8
   8b65c:	f021 0703 	bic.w	r7, r1, #3
   8b660:	4297      	cmp	r7, r2
   8b662:	f280 8086 	bge.w	8b772 <_realloc_r+0x142>
   8b666:	4bc9      	ldr	r3, [pc, #804]	; (8b98c <_realloc_r+0x35c>)
   8b668:	eb09 0007 	add.w	r0, r9, r7
   8b66c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b670:	4584      	cmp	ip, r0
   8b672:	f000 80b9 	beq.w	8b7e8 <_realloc_r+0x1b8>
   8b676:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b67a:	f02c 0301 	bic.w	r3, ip, #1
   8b67e:	4403      	add	r3, r0
   8b680:	685b      	ldr	r3, [r3, #4]
   8b682:	07db      	lsls	r3, r3, #31
   8b684:	f100 808c 	bmi.w	8b7a0 <_realloc_r+0x170>
   8b688:	f02c 0c03 	bic.w	ip, ip, #3
   8b68c:	eb07 030c 	add.w	r3, r7, ip
   8b690:	4293      	cmp	r3, r2
   8b692:	f280 8115 	bge.w	8b8c0 <_realloc_r+0x290>
   8b696:	07cb      	lsls	r3, r1, #31
   8b698:	d40f      	bmi.n	8b6ba <_realloc_r+0x8a>
   8b69a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b69e:	eba9 0a03 	sub.w	sl, r9, r3
   8b6a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b6a6:	f023 0103 	bic.w	r1, r3, #3
   8b6aa:	448c      	add	ip, r1
   8b6ac:	44bc      	add	ip, r7
   8b6ae:	4594      	cmp	ip, r2
   8b6b0:	da38      	bge.n	8b724 <_realloc_r+0xf4>
   8b6b2:	187b      	adds	r3, r7, r1
   8b6b4:	4293      	cmp	r3, r2
   8b6b6:	f280 810f 	bge.w	8b8d8 <_realloc_r+0x2a8>
   8b6ba:	4631      	mov	r1, r6
   8b6bc:	4640      	mov	r0, r8
   8b6be:	f7ff f8c1 	bl	8a844 <_malloc_r>
   8b6c2:	4606      	mov	r6, r0
   8b6c4:	b1e0      	cbz	r0, 8b700 <_realloc_r+0xd0>
   8b6c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b6ca:	f1a0 0208 	sub.w	r2, r0, #8
   8b6ce:	f023 0301 	bic.w	r3, r3, #1
   8b6d2:	444b      	add	r3, r9
   8b6d4:	4293      	cmp	r3, r2
   8b6d6:	f000 80f9 	beq.w	8b8cc <_realloc_r+0x29c>
   8b6da:	1f3a      	subs	r2, r7, #4
   8b6dc:	2a24      	cmp	r2, #36	; 0x24
   8b6de:	f200 811c 	bhi.w	8b91a <_realloc_r+0x2ea>
   8b6e2:	2a13      	cmp	r2, #19
   8b6e4:	f200 80cd 	bhi.w	8b882 <_realloc_r+0x252>
   8b6e8:	4603      	mov	r3, r0
   8b6ea:	4622      	mov	r2, r4
   8b6ec:	6811      	ldr	r1, [r2, #0]
   8b6ee:	6019      	str	r1, [r3, #0]
   8b6f0:	6851      	ldr	r1, [r2, #4]
   8b6f2:	6059      	str	r1, [r3, #4]
   8b6f4:	6892      	ldr	r2, [r2, #8]
   8b6f6:	609a      	str	r2, [r3, #8]
   8b6f8:	4621      	mov	r1, r4
   8b6fa:	4640      	mov	r0, r8
   8b6fc:	f7fe fd70 	bl	8a1e0 <_free_r>
   8b700:	4640      	mov	r0, r8
   8b702:	f7ff fc13 	bl	8af2c <__malloc_unlock>
   8b706:	4630      	mov	r0, r6
   8b708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b70c:	f025 0507 	bic.w	r5, r5, #7
   8b710:	2d00      	cmp	r5, #0
   8b712:	462a      	mov	r2, r5
   8b714:	da9c      	bge.n	8b650 <_realloc_r+0x20>
   8b716:	230c      	movs	r3, #12
   8b718:	2600      	movs	r6, #0
   8b71a:	f8c8 3000 	str.w	r3, [r8]
   8b71e:	4630      	mov	r0, r6
   8b720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b724:	4656      	mov	r6, sl
   8b726:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b72a:	60cb      	str	r3, [r1, #12]
   8b72c:	6099      	str	r1, [r3, #8]
   8b72e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b732:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b736:	1f3a      	subs	r2, r7, #4
   8b738:	2a24      	cmp	r2, #36	; 0x24
   8b73a:	60cb      	str	r3, [r1, #12]
   8b73c:	6099      	str	r1, [r3, #8]
   8b73e:	f200 8107 	bhi.w	8b950 <_realloc_r+0x320>
   8b742:	2a13      	cmp	r2, #19
   8b744:	f240 8102 	bls.w	8b94c <_realloc_r+0x31c>
   8b748:	6823      	ldr	r3, [r4, #0]
   8b74a:	2a1b      	cmp	r2, #27
   8b74c:	f8ca 3008 	str.w	r3, [sl, #8]
   8b750:	6863      	ldr	r3, [r4, #4]
   8b752:	f8ca 300c 	str.w	r3, [sl, #12]
   8b756:	f200 811b 	bhi.w	8b990 <_realloc_r+0x360>
   8b75a:	3408      	adds	r4, #8
   8b75c:	f10a 0310 	add.w	r3, sl, #16
   8b760:	6822      	ldr	r2, [r4, #0]
   8b762:	4667      	mov	r7, ip
   8b764:	601a      	str	r2, [r3, #0]
   8b766:	6862      	ldr	r2, [r4, #4]
   8b768:	46d1      	mov	r9, sl
   8b76a:	605a      	str	r2, [r3, #4]
   8b76c:	68a2      	ldr	r2, [r4, #8]
   8b76e:	4634      	mov	r4, r6
   8b770:	609a      	str	r2, [r3, #8]
   8b772:	1b7b      	subs	r3, r7, r5
   8b774:	2b0f      	cmp	r3, #15
   8b776:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b77a:	d821      	bhi.n	8b7c0 <_realloc_r+0x190>
   8b77c:	f002 0201 	and.w	r2, r2, #1
   8b780:	433a      	orrs	r2, r7
   8b782:	eb09 0107 	add.w	r1, r9, r7
   8b786:	f8c9 2004 	str.w	r2, [r9, #4]
   8b78a:	684b      	ldr	r3, [r1, #4]
   8b78c:	f043 0301 	orr.w	r3, r3, #1
   8b790:	604b      	str	r3, [r1, #4]
   8b792:	4626      	mov	r6, r4
   8b794:	4640      	mov	r0, r8
   8b796:	f7ff fbc9 	bl	8af2c <__malloc_unlock>
   8b79a:	4630      	mov	r0, r6
   8b79c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b7a0:	07c9      	lsls	r1, r1, #31
   8b7a2:	d48a      	bmi.n	8b6ba <_realloc_r+0x8a>
   8b7a4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b7a8:	eba9 0a03 	sub.w	sl, r9, r3
   8b7ac:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b7b0:	f021 0103 	bic.w	r1, r1, #3
   8b7b4:	e77d      	b.n	8b6b2 <_realloc_r+0x82>
   8b7b6:	4611      	mov	r1, r2
   8b7b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b7bc:	f7ff b842 	b.w	8a844 <_malloc_r>
   8b7c0:	f002 0201 	and.w	r2, r2, #1
   8b7c4:	eb09 0105 	add.w	r1, r9, r5
   8b7c8:	f043 0301 	orr.w	r3, r3, #1
   8b7cc:	432a      	orrs	r2, r5
   8b7ce:	f8c9 2004 	str.w	r2, [r9, #4]
   8b7d2:	444f      	add	r7, r9
   8b7d4:	604b      	str	r3, [r1, #4]
   8b7d6:	687b      	ldr	r3, [r7, #4]
   8b7d8:	4640      	mov	r0, r8
   8b7da:	f043 0301 	orr.w	r3, r3, #1
   8b7de:	3108      	adds	r1, #8
   8b7e0:	607b      	str	r3, [r7, #4]
   8b7e2:	f7fe fcfd 	bl	8a1e0 <_free_r>
   8b7e6:	e7d4      	b.n	8b792 <_realloc_r+0x162>
   8b7e8:	f8dc b004 	ldr.w	fp, [ip, #4]
   8b7ec:	f105 0010 	add.w	r0, r5, #16
   8b7f0:	f02b 0b03 	bic.w	fp, fp, #3
   8b7f4:	eb07 0c0b 	add.w	ip, r7, fp
   8b7f8:	4584      	cmp	ip, r0
   8b7fa:	da4d      	bge.n	8b898 <_realloc_r+0x268>
   8b7fc:	07c9      	lsls	r1, r1, #31
   8b7fe:	f53f af5c 	bmi.w	8b6ba <_realloc_r+0x8a>
   8b802:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b806:	eba9 0a01 	sub.w	sl, r9, r1
   8b80a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b80e:	f021 0103 	bic.w	r1, r1, #3
   8b812:	448b      	add	fp, r1
   8b814:	44bb      	add	fp, r7
   8b816:	4558      	cmp	r0, fp
   8b818:	f73f af4b 	bgt.w	8b6b2 <_realloc_r+0x82>
   8b81c:	4656      	mov	r6, sl
   8b81e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b822:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b826:	1f3a      	subs	r2, r7, #4
   8b828:	2a24      	cmp	r2, #36	; 0x24
   8b82a:	60c1      	str	r1, [r0, #12]
   8b82c:	6088      	str	r0, [r1, #8]
   8b82e:	f200 80bd 	bhi.w	8b9ac <_realloc_r+0x37c>
   8b832:	2a13      	cmp	r2, #19
   8b834:	f240 80b8 	bls.w	8b9a8 <_realloc_r+0x378>
   8b838:	6821      	ldr	r1, [r4, #0]
   8b83a:	2a1b      	cmp	r2, #27
   8b83c:	f8ca 1008 	str.w	r1, [sl, #8]
   8b840:	6861      	ldr	r1, [r4, #4]
   8b842:	f8ca 100c 	str.w	r1, [sl, #12]
   8b846:	f200 80c1 	bhi.w	8b9cc <_realloc_r+0x39c>
   8b84a:	3408      	adds	r4, #8
   8b84c:	f10a 0210 	add.w	r2, sl, #16
   8b850:	6821      	ldr	r1, [r4, #0]
   8b852:	6011      	str	r1, [r2, #0]
   8b854:	6861      	ldr	r1, [r4, #4]
   8b856:	6051      	str	r1, [r2, #4]
   8b858:	68a1      	ldr	r1, [r4, #8]
   8b85a:	6091      	str	r1, [r2, #8]
   8b85c:	ebab 0205 	sub.w	r2, fp, r5
   8b860:	eb0a 0105 	add.w	r1, sl, r5
   8b864:	f042 0201 	orr.w	r2, r2, #1
   8b868:	6099      	str	r1, [r3, #8]
   8b86a:	604a      	str	r2, [r1, #4]
   8b86c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b870:	4640      	mov	r0, r8
   8b872:	f003 0301 	and.w	r3, r3, #1
   8b876:	431d      	orrs	r5, r3
   8b878:	f8ca 5004 	str.w	r5, [sl, #4]
   8b87c:	f7ff fb56 	bl	8af2c <__malloc_unlock>
   8b880:	e74d      	b.n	8b71e <_realloc_r+0xee>
   8b882:	6823      	ldr	r3, [r4, #0]
   8b884:	2a1b      	cmp	r2, #27
   8b886:	6003      	str	r3, [r0, #0]
   8b888:	6863      	ldr	r3, [r4, #4]
   8b88a:	6043      	str	r3, [r0, #4]
   8b88c:	d849      	bhi.n	8b922 <_realloc_r+0x2f2>
   8b88e:	f104 0208 	add.w	r2, r4, #8
   8b892:	f100 0308 	add.w	r3, r0, #8
   8b896:	e729      	b.n	8b6ec <_realloc_r+0xbc>
   8b898:	ebac 0205 	sub.w	r2, ip, r5
   8b89c:	eb09 0105 	add.w	r1, r9, r5
   8b8a0:	f042 0201 	orr.w	r2, r2, #1
   8b8a4:	6099      	str	r1, [r3, #8]
   8b8a6:	604a      	str	r2, [r1, #4]
   8b8a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b8ac:	4640      	mov	r0, r8
   8b8ae:	f003 0301 	and.w	r3, r3, #1
   8b8b2:	431d      	orrs	r5, r3
   8b8b4:	f844 5c04 	str.w	r5, [r4, #-4]
   8b8b8:	f7ff fb38 	bl	8af2c <__malloc_unlock>
   8b8bc:	4626      	mov	r6, r4
   8b8be:	e72e      	b.n	8b71e <_realloc_r+0xee>
   8b8c0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8b8c4:	461f      	mov	r7, r3
   8b8c6:	60ca      	str	r2, [r1, #12]
   8b8c8:	6091      	str	r1, [r2, #8]
   8b8ca:	e752      	b.n	8b772 <_realloc_r+0x142>
   8b8cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b8d0:	f023 0303 	bic.w	r3, r3, #3
   8b8d4:	441f      	add	r7, r3
   8b8d6:	e74c      	b.n	8b772 <_realloc_r+0x142>
   8b8d8:	4656      	mov	r6, sl
   8b8da:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b8de:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b8e2:	1f3a      	subs	r2, r7, #4
   8b8e4:	2a24      	cmp	r2, #36	; 0x24
   8b8e6:	60c1      	str	r1, [r0, #12]
   8b8e8:	6088      	str	r0, [r1, #8]
   8b8ea:	d827      	bhi.n	8b93c <_realloc_r+0x30c>
   8b8ec:	2a13      	cmp	r2, #19
   8b8ee:	d923      	bls.n	8b938 <_realloc_r+0x308>
   8b8f0:	6821      	ldr	r1, [r4, #0]
   8b8f2:	2a1b      	cmp	r2, #27
   8b8f4:	f8ca 1008 	str.w	r1, [sl, #8]
   8b8f8:	6861      	ldr	r1, [r4, #4]
   8b8fa:	f8ca 100c 	str.w	r1, [sl, #12]
   8b8fe:	d82f      	bhi.n	8b960 <_realloc_r+0x330>
   8b900:	3408      	adds	r4, #8
   8b902:	f10a 0210 	add.w	r2, sl, #16
   8b906:	6821      	ldr	r1, [r4, #0]
   8b908:	461f      	mov	r7, r3
   8b90a:	6011      	str	r1, [r2, #0]
   8b90c:	6863      	ldr	r3, [r4, #4]
   8b90e:	46d1      	mov	r9, sl
   8b910:	6053      	str	r3, [r2, #4]
   8b912:	68a3      	ldr	r3, [r4, #8]
   8b914:	4634      	mov	r4, r6
   8b916:	6093      	str	r3, [r2, #8]
   8b918:	e72b      	b.n	8b772 <_realloc_r+0x142>
   8b91a:	4621      	mov	r1, r4
   8b91c:	f7ff fa96 	bl	8ae4c <memmove>
   8b920:	e6ea      	b.n	8b6f8 <_realloc_r+0xc8>
   8b922:	68a3      	ldr	r3, [r4, #8]
   8b924:	2a24      	cmp	r2, #36	; 0x24
   8b926:	6083      	str	r3, [r0, #8]
   8b928:	68e3      	ldr	r3, [r4, #12]
   8b92a:	60c3      	str	r3, [r0, #12]
   8b92c:	d024      	beq.n	8b978 <_realloc_r+0x348>
   8b92e:	f104 0210 	add.w	r2, r4, #16
   8b932:	f100 0310 	add.w	r3, r0, #16
   8b936:	e6d9      	b.n	8b6ec <_realloc_r+0xbc>
   8b938:	4632      	mov	r2, r6
   8b93a:	e7e4      	b.n	8b906 <_realloc_r+0x2d6>
   8b93c:	4621      	mov	r1, r4
   8b93e:	4630      	mov	r0, r6
   8b940:	461f      	mov	r7, r3
   8b942:	46d1      	mov	r9, sl
   8b944:	f7ff fa82 	bl	8ae4c <memmove>
   8b948:	4634      	mov	r4, r6
   8b94a:	e712      	b.n	8b772 <_realloc_r+0x142>
   8b94c:	4633      	mov	r3, r6
   8b94e:	e707      	b.n	8b760 <_realloc_r+0x130>
   8b950:	4621      	mov	r1, r4
   8b952:	4630      	mov	r0, r6
   8b954:	4667      	mov	r7, ip
   8b956:	46d1      	mov	r9, sl
   8b958:	f7ff fa78 	bl	8ae4c <memmove>
   8b95c:	4634      	mov	r4, r6
   8b95e:	e708      	b.n	8b772 <_realloc_r+0x142>
   8b960:	68a1      	ldr	r1, [r4, #8]
   8b962:	2a24      	cmp	r2, #36	; 0x24
   8b964:	f8ca 1010 	str.w	r1, [sl, #16]
   8b968:	68e1      	ldr	r1, [r4, #12]
   8b96a:	f8ca 1014 	str.w	r1, [sl, #20]
   8b96e:	d023      	beq.n	8b9b8 <_realloc_r+0x388>
   8b970:	3410      	adds	r4, #16
   8b972:	f10a 0218 	add.w	r2, sl, #24
   8b976:	e7c6      	b.n	8b906 <_realloc_r+0x2d6>
   8b978:	6923      	ldr	r3, [r4, #16]
   8b97a:	f104 0218 	add.w	r2, r4, #24
   8b97e:	6103      	str	r3, [r0, #16]
   8b980:	6961      	ldr	r1, [r4, #20]
   8b982:	f100 0318 	add.w	r3, r0, #24
   8b986:	6141      	str	r1, [r0, #20]
   8b988:	e6b0      	b.n	8b6ec <_realloc_r+0xbc>
   8b98a:	bf00      	nop
   8b98c:	20000f48 	.word	0x20000f48
   8b990:	68a3      	ldr	r3, [r4, #8]
   8b992:	2a24      	cmp	r2, #36	; 0x24
   8b994:	f8ca 3010 	str.w	r3, [sl, #16]
   8b998:	68e3      	ldr	r3, [r4, #12]
   8b99a:	f8ca 3014 	str.w	r3, [sl, #20]
   8b99e:	d021      	beq.n	8b9e4 <_realloc_r+0x3b4>
   8b9a0:	3410      	adds	r4, #16
   8b9a2:	f10a 0318 	add.w	r3, sl, #24
   8b9a6:	e6db      	b.n	8b760 <_realloc_r+0x130>
   8b9a8:	4632      	mov	r2, r6
   8b9aa:	e751      	b.n	8b850 <_realloc_r+0x220>
   8b9ac:	4621      	mov	r1, r4
   8b9ae:	4630      	mov	r0, r6
   8b9b0:	f7ff fa4c 	bl	8ae4c <memmove>
   8b9b4:	4b15      	ldr	r3, [pc, #84]	; (8ba0c <_realloc_r+0x3dc>)
   8b9b6:	e751      	b.n	8b85c <_realloc_r+0x22c>
   8b9b8:	6921      	ldr	r1, [r4, #16]
   8b9ba:	f10a 0220 	add.w	r2, sl, #32
   8b9be:	f8ca 1018 	str.w	r1, [sl, #24]
   8b9c2:	6961      	ldr	r1, [r4, #20]
   8b9c4:	3418      	adds	r4, #24
   8b9c6:	f8ca 101c 	str.w	r1, [sl, #28]
   8b9ca:	e79c      	b.n	8b906 <_realloc_r+0x2d6>
   8b9cc:	68a1      	ldr	r1, [r4, #8]
   8b9ce:	2a24      	cmp	r2, #36	; 0x24
   8b9d0:	f8ca 1010 	str.w	r1, [sl, #16]
   8b9d4:	68e1      	ldr	r1, [r4, #12]
   8b9d6:	f8ca 1014 	str.w	r1, [sl, #20]
   8b9da:	d00d      	beq.n	8b9f8 <_realloc_r+0x3c8>
   8b9dc:	3410      	adds	r4, #16
   8b9de:	f10a 0218 	add.w	r2, sl, #24
   8b9e2:	e735      	b.n	8b850 <_realloc_r+0x220>
   8b9e4:	6922      	ldr	r2, [r4, #16]
   8b9e6:	f10a 0320 	add.w	r3, sl, #32
   8b9ea:	f8ca 2018 	str.w	r2, [sl, #24]
   8b9ee:	6962      	ldr	r2, [r4, #20]
   8b9f0:	3418      	adds	r4, #24
   8b9f2:	f8ca 201c 	str.w	r2, [sl, #28]
   8b9f6:	e6b3      	b.n	8b760 <_realloc_r+0x130>
   8b9f8:	6921      	ldr	r1, [r4, #16]
   8b9fa:	f10a 0220 	add.w	r2, sl, #32
   8b9fe:	f8ca 1018 	str.w	r1, [sl, #24]
   8ba02:	6961      	ldr	r1, [r4, #20]
   8ba04:	3418      	adds	r4, #24
   8ba06:	f8ca 101c 	str.w	r1, [sl, #28]
   8ba0a:	e721      	b.n	8b850 <_realloc_r+0x220>
   8ba0c:	20000f48 	.word	0x20000f48

0008ba10 <frexp>:
   8ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba12:	4617      	mov	r7, r2
   8ba14:	2200      	movs	r2, #0
   8ba16:	f8df c060 	ldr.w	ip, [pc, #96]	; 8ba78 <frexp+0x68>
   8ba1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ba1e:	4563      	cmp	r3, ip
   8ba20:	4604      	mov	r4, r0
   8ba22:	460d      	mov	r5, r1
   8ba24:	603a      	str	r2, [r7, #0]
   8ba26:	dc22      	bgt.n	8ba6e <frexp+0x5e>
   8ba28:	4684      	mov	ip, r0
   8ba2a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ba2e:	d01e      	beq.n	8ba6e <frexp+0x5e>
   8ba30:	f8df c048 	ldr.w	ip, [pc, #72]	; 8ba7c <frexp+0x6c>
   8ba34:	460e      	mov	r6, r1
   8ba36:	ea01 0c0c 	and.w	ip, r1, ip
   8ba3a:	f1bc 0f00 	cmp.w	ip, #0
   8ba3e:	d109      	bne.n	8ba54 <frexp+0x44>
   8ba40:	2200      	movs	r2, #0
   8ba42:	4b0c      	ldr	r3, [pc, #48]	; (8ba74 <frexp+0x64>)
   8ba44:	f000 fd0e 	bl	8c464 <__aeabi_dmul>
   8ba48:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8ba4c:	4604      	mov	r4, r0
   8ba4e:	460e      	mov	r6, r1
   8ba50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ba54:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8ba58:	151b      	asrs	r3, r3, #20
   8ba5a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8ba5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ba62:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8ba66:	4413      	add	r3, r2
   8ba68:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ba6c:	603b      	str	r3, [r7, #0]
   8ba6e:	4620      	mov	r0, r4
   8ba70:	4629      	mov	r1, r5
   8ba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba74:	43500000 	.word	0x43500000
   8ba78:	7fefffff 	.word	0x7fefffff
   8ba7c:	7ff00000 	.word	0x7ff00000

0008ba80 <_sbrk_r>:
   8ba80:	2200      	movs	r2, #0
   8ba82:	b538      	push	{r3, r4, r5, lr}
   8ba84:	4d06      	ldr	r5, [pc, #24]	; (8baa0 <_sbrk_r+0x20>)
   8ba86:	4604      	mov	r4, r0
   8ba88:	4608      	mov	r0, r1
   8ba8a:	602a      	str	r2, [r5, #0]
   8ba8c:	f7f9 fed0 	bl	85830 <_sbrk>
   8ba90:	1c43      	adds	r3, r0, #1
   8ba92:	d000      	beq.n	8ba96 <_sbrk_r+0x16>
   8ba94:	bd38      	pop	{r3, r4, r5, pc}
   8ba96:	682b      	ldr	r3, [r5, #0]
   8ba98:	2b00      	cmp	r3, #0
   8ba9a:	d0fb      	beq.n	8ba94 <_sbrk_r+0x14>
   8ba9c:	6023      	str	r3, [r4, #0]
   8ba9e:	bd38      	pop	{r3, r4, r5, pc}
   8baa0:	200026d8 	.word	0x200026d8

0008baa4 <__sread>:
   8baa4:	b510      	push	{r4, lr}
   8baa6:	460c      	mov	r4, r1
   8baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8baac:	f000 fab4 	bl	8c018 <_read_r>
   8bab0:	2800      	cmp	r0, #0
   8bab2:	db03      	blt.n	8babc <__sread+0x18>
   8bab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bab6:	4403      	add	r3, r0
   8bab8:	6523      	str	r3, [r4, #80]	; 0x50
   8baba:	bd10      	pop	{r4, pc}
   8babc:	89a3      	ldrh	r3, [r4, #12]
   8babe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bac2:	81a3      	strh	r3, [r4, #12]
   8bac4:	bd10      	pop	{r4, pc}
   8bac6:	bf00      	nop

0008bac8 <__swrite>:
   8bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bacc:	460c      	mov	r4, r1
   8bace:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bad2:	461f      	mov	r7, r3
   8bad4:	05cb      	lsls	r3, r1, #23
   8bad6:	4616      	mov	r6, r2
   8bad8:	4605      	mov	r5, r0
   8bada:	d40b      	bmi.n	8baf4 <__swrite+0x2c>
   8badc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bae0:	81a1      	strh	r1, [r4, #12]
   8bae2:	463b      	mov	r3, r7
   8bae4:	4632      	mov	r2, r6
   8bae6:	4628      	mov	r0, r5
   8bae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8baec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8baf0:	f000 b91e 	b.w	8bd30 <_write_r>
   8baf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8baf8:	2302      	movs	r3, #2
   8bafa:	2200      	movs	r2, #0
   8bafc:	f000 fa76 	bl	8bfec <_lseek_r>
   8bb00:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bb04:	e7ea      	b.n	8badc <__swrite+0x14>
   8bb06:	bf00      	nop

0008bb08 <__sseek>:
   8bb08:	b510      	push	{r4, lr}
   8bb0a:	460c      	mov	r4, r1
   8bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb10:	f000 fa6c 	bl	8bfec <_lseek_r>
   8bb14:	89a3      	ldrh	r3, [r4, #12]
   8bb16:	1c42      	adds	r2, r0, #1
   8bb18:	bf0e      	itee	eq
   8bb1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bb1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bb22:	6520      	strne	r0, [r4, #80]	; 0x50
   8bb24:	81a3      	strh	r3, [r4, #12]
   8bb26:	bd10      	pop	{r4, pc}

0008bb28 <__sclose>:
   8bb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb2c:	f000 b9aa 	b.w	8be84 <_close_r>

0008bb30 <__ssprint_r>:
   8bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb34:	6893      	ldr	r3, [r2, #8]
   8bb36:	4691      	mov	r9, r2
   8bb38:	b083      	sub	sp, #12
   8bb3a:	2b00      	cmp	r3, #0
   8bb3c:	d06d      	beq.n	8bc1a <__ssprint_r+0xea>
   8bb3e:	6817      	ldr	r7, [r2, #0]
   8bb40:	4680      	mov	r8, r0
   8bb42:	460c      	mov	r4, r1
   8bb44:	6808      	ldr	r0, [r1, #0]
   8bb46:	688d      	ldr	r5, [r1, #8]
   8bb48:	3708      	adds	r7, #8
   8bb4a:	e043      	b.n	8bbd4 <__ssprint_r+0xa4>
   8bb4c:	89a3      	ldrh	r3, [r4, #12]
   8bb4e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bb52:	d02e      	beq.n	8bbb2 <__ssprint_r+0x82>
   8bb54:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8bb58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bb5c:	eba0 0a01 	sub.w	sl, r0, r1
   8bb60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bb64:	eb0a 0006 	add.w	r0, sl, r6
   8bb68:	106d      	asrs	r5, r5, #1
   8bb6a:	3001      	adds	r0, #1
   8bb6c:	42a8      	cmp	r0, r5
   8bb6e:	462a      	mov	r2, r5
   8bb70:	bf84      	itt	hi
   8bb72:	4605      	movhi	r5, r0
   8bb74:	462a      	movhi	r2, r5
   8bb76:	055b      	lsls	r3, r3, #21
   8bb78:	d536      	bpl.n	8bbe8 <__ssprint_r+0xb8>
   8bb7a:	4611      	mov	r1, r2
   8bb7c:	4640      	mov	r0, r8
   8bb7e:	f7fe fe61 	bl	8a844 <_malloc_r>
   8bb82:	2800      	cmp	r0, #0
   8bb84:	d03a      	beq.n	8bbfc <__ssprint_r+0xcc>
   8bb86:	4652      	mov	r2, sl
   8bb88:	6921      	ldr	r1, [r4, #16]
   8bb8a:	9001      	str	r0, [sp, #4]
   8bb8c:	f7fa f9c2 	bl	85f14 <memcpy>
   8bb90:	89a2      	ldrh	r2, [r4, #12]
   8bb92:	9b01      	ldr	r3, [sp, #4]
   8bb94:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bb98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bb9c:	81a2      	strh	r2, [r4, #12]
   8bb9e:	eba5 020a 	sub.w	r2, r5, sl
   8bba2:	eb03 000a 	add.w	r0, r3, sl
   8bba6:	6165      	str	r5, [r4, #20]
   8bba8:	46b2      	mov	sl, r6
   8bbaa:	4635      	mov	r5, r6
   8bbac:	6123      	str	r3, [r4, #16]
   8bbae:	6020      	str	r0, [r4, #0]
   8bbb0:	60a2      	str	r2, [r4, #8]
   8bbb2:	4659      	mov	r1, fp
   8bbb4:	4652      	mov	r2, sl
   8bbb6:	f7ff f949 	bl	8ae4c <memmove>
   8bbba:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8bbbe:	68a1      	ldr	r1, [r4, #8]
   8bbc0:	6820      	ldr	r0, [r4, #0]
   8bbc2:	1b4d      	subs	r5, r1, r5
   8bbc4:	4450      	add	r0, sl
   8bbc6:	1b9e      	subs	r6, r3, r6
   8bbc8:	60a5      	str	r5, [r4, #8]
   8bbca:	6020      	str	r0, [r4, #0]
   8bbcc:	f8c9 6008 	str.w	r6, [r9, #8]
   8bbd0:	b31e      	cbz	r6, 8bc1a <__ssprint_r+0xea>
   8bbd2:	3708      	adds	r7, #8
   8bbd4:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8bbd8:	2e00      	cmp	r6, #0
   8bbda:	d0fa      	beq.n	8bbd2 <__ssprint_r+0xa2>
   8bbdc:	42b5      	cmp	r5, r6
   8bbde:	46aa      	mov	sl, r5
   8bbe0:	d9b4      	bls.n	8bb4c <__ssprint_r+0x1c>
   8bbe2:	4635      	mov	r5, r6
   8bbe4:	46b2      	mov	sl, r6
   8bbe6:	e7e4      	b.n	8bbb2 <__ssprint_r+0x82>
   8bbe8:	4640      	mov	r0, r8
   8bbea:	f7ff fd21 	bl	8b630 <_realloc_r>
   8bbee:	4603      	mov	r3, r0
   8bbf0:	2800      	cmp	r0, #0
   8bbf2:	d1d4      	bne.n	8bb9e <__ssprint_r+0x6e>
   8bbf4:	4640      	mov	r0, r8
   8bbf6:	6921      	ldr	r1, [r4, #16]
   8bbf8:	f7fe faf2 	bl	8a1e0 <_free_r>
   8bbfc:	230c      	movs	r3, #12
   8bbfe:	2200      	movs	r2, #0
   8bc00:	f04f 30ff 	mov.w	r0, #4294967295
   8bc04:	f8c8 3000 	str.w	r3, [r8]
   8bc08:	89a3      	ldrh	r3, [r4, #12]
   8bc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bc0e:	81a3      	strh	r3, [r4, #12]
   8bc10:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8bc14:	b003      	add	sp, #12
   8bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc1a:	2000      	movs	r0, #0
   8bc1c:	f8c9 0004 	str.w	r0, [r9, #4]
   8bc20:	b003      	add	sp, #12
   8bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc26:	bf00      	nop

0008bc28 <__swbuf_r>:
   8bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc2a:	460d      	mov	r5, r1
   8bc2c:	4614      	mov	r4, r2
   8bc2e:	4606      	mov	r6, r0
   8bc30:	b110      	cbz	r0, 8bc38 <__swbuf_r+0x10>
   8bc32:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bc34:	2b00      	cmp	r3, #0
   8bc36:	d043      	beq.n	8bcc0 <__swbuf_r+0x98>
   8bc38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc3c:	69a3      	ldr	r3, [r4, #24]
   8bc3e:	0717      	lsls	r7, r2, #28
   8bc40:	60a3      	str	r3, [r4, #8]
   8bc42:	b290      	uxth	r0, r2
   8bc44:	d51b      	bpl.n	8bc7e <__swbuf_r+0x56>
   8bc46:	6923      	ldr	r3, [r4, #16]
   8bc48:	b1cb      	cbz	r3, 8bc7e <__swbuf_r+0x56>
   8bc4a:	b2ed      	uxtb	r5, r5
   8bc4c:	0481      	lsls	r1, r0, #18
   8bc4e:	462f      	mov	r7, r5
   8bc50:	d522      	bpl.n	8bc98 <__swbuf_r+0x70>
   8bc52:	6822      	ldr	r2, [r4, #0]
   8bc54:	6961      	ldr	r1, [r4, #20]
   8bc56:	1ad3      	subs	r3, r2, r3
   8bc58:	4299      	cmp	r1, r3
   8bc5a:	dd29      	ble.n	8bcb0 <__swbuf_r+0x88>
   8bc5c:	3301      	adds	r3, #1
   8bc5e:	68a1      	ldr	r1, [r4, #8]
   8bc60:	1c50      	adds	r0, r2, #1
   8bc62:	3901      	subs	r1, #1
   8bc64:	60a1      	str	r1, [r4, #8]
   8bc66:	6020      	str	r0, [r4, #0]
   8bc68:	7015      	strb	r5, [r2, #0]
   8bc6a:	6962      	ldr	r2, [r4, #20]
   8bc6c:	429a      	cmp	r2, r3
   8bc6e:	d02a      	beq.n	8bcc6 <__swbuf_r+0x9e>
   8bc70:	89a3      	ldrh	r3, [r4, #12]
   8bc72:	07db      	lsls	r3, r3, #31
   8bc74:	d501      	bpl.n	8bc7a <__swbuf_r+0x52>
   8bc76:	2d0a      	cmp	r5, #10
   8bc78:	d025      	beq.n	8bcc6 <__swbuf_r+0x9e>
   8bc7a:	4638      	mov	r0, r7
   8bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc7e:	4621      	mov	r1, r4
   8bc80:	4630      	mov	r0, r6
   8bc82:	f7fd f827 	bl	88cd4 <__swsetup_r>
   8bc86:	bb20      	cbnz	r0, 8bcd2 <__swbuf_r+0xaa>
   8bc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc8c:	b2ed      	uxtb	r5, r5
   8bc8e:	b290      	uxth	r0, r2
   8bc90:	0481      	lsls	r1, r0, #18
   8bc92:	462f      	mov	r7, r5
   8bc94:	6923      	ldr	r3, [r4, #16]
   8bc96:	d4dc      	bmi.n	8bc52 <__swbuf_r+0x2a>
   8bc98:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8bc9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bc9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8bca2:	81a2      	strh	r2, [r4, #12]
   8bca4:	6822      	ldr	r2, [r4, #0]
   8bca6:	6661      	str	r1, [r4, #100]	; 0x64
   8bca8:	6961      	ldr	r1, [r4, #20]
   8bcaa:	1ad3      	subs	r3, r2, r3
   8bcac:	4299      	cmp	r1, r3
   8bcae:	dcd5      	bgt.n	8bc5c <__swbuf_r+0x34>
   8bcb0:	4621      	mov	r1, r4
   8bcb2:	4630      	mov	r0, r6
   8bcb4:	f7fe f914 	bl	89ee0 <_fflush_r>
   8bcb8:	b958      	cbnz	r0, 8bcd2 <__swbuf_r+0xaa>
   8bcba:	2301      	movs	r3, #1
   8bcbc:	6822      	ldr	r2, [r4, #0]
   8bcbe:	e7ce      	b.n	8bc5e <__swbuf_r+0x36>
   8bcc0:	f7fe f96a 	bl	89f98 <__sinit>
   8bcc4:	e7b8      	b.n	8bc38 <__swbuf_r+0x10>
   8bcc6:	4621      	mov	r1, r4
   8bcc8:	4630      	mov	r0, r6
   8bcca:	f7fe f909 	bl	89ee0 <_fflush_r>
   8bcce:	2800      	cmp	r0, #0
   8bcd0:	d0d3      	beq.n	8bc7a <__swbuf_r+0x52>
   8bcd2:	f04f 37ff 	mov.w	r7, #4294967295
   8bcd6:	e7d0      	b.n	8bc7a <__swbuf_r+0x52>

0008bcd8 <_wcrtomb_r>:
   8bcd8:	b570      	push	{r4, r5, r6, lr}
   8bcda:	4606      	mov	r6, r0
   8bcdc:	461d      	mov	r5, r3
   8bcde:	b084      	sub	sp, #16
   8bce0:	b139      	cbz	r1, 8bcf2 <_wcrtomb_r+0x1a>
   8bce2:	4c0b      	ldr	r4, [pc, #44]	; (8bd10 <_wcrtomb_r+0x38>)
   8bce4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bce8:	47a0      	blx	r4
   8bcea:	1c43      	adds	r3, r0, #1
   8bcec:	d00a      	beq.n	8bd04 <_wcrtomb_r+0x2c>
   8bcee:	b004      	add	sp, #16
   8bcf0:	bd70      	pop	{r4, r5, r6, pc}
   8bcf2:	460c      	mov	r4, r1
   8bcf4:	4906      	ldr	r1, [pc, #24]	; (8bd10 <_wcrtomb_r+0x38>)
   8bcf6:	4622      	mov	r2, r4
   8bcf8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8bcfc:	a901      	add	r1, sp, #4
   8bcfe:	47a0      	blx	r4
   8bd00:	1c43      	adds	r3, r0, #1
   8bd02:	d1f4      	bne.n	8bcee <_wcrtomb_r+0x16>
   8bd04:	2200      	movs	r2, #0
   8bd06:	238a      	movs	r3, #138	; 0x8a
   8bd08:	602a      	str	r2, [r5, #0]
   8bd0a:	6033      	str	r3, [r6, #0]
   8bd0c:	b004      	add	sp, #16
   8bd0e:	bd70      	pop	{r4, r5, r6, pc}
   8bd10:	20000ddc 	.word	0x20000ddc

0008bd14 <__ascii_wctomb>:
   8bd14:	4603      	mov	r3, r0
   8bd16:	b149      	cbz	r1, 8bd2c <__ascii_wctomb+0x18>
   8bd18:	2aff      	cmp	r2, #255	; 0xff
   8bd1a:	d802      	bhi.n	8bd22 <__ascii_wctomb+0xe>
   8bd1c:	2001      	movs	r0, #1
   8bd1e:	700a      	strb	r2, [r1, #0]
   8bd20:	4770      	bx	lr
   8bd22:	228a      	movs	r2, #138	; 0x8a
   8bd24:	f04f 30ff 	mov.w	r0, #4294967295
   8bd28:	601a      	str	r2, [r3, #0]
   8bd2a:	4770      	bx	lr
   8bd2c:	4608      	mov	r0, r1
   8bd2e:	4770      	bx	lr

0008bd30 <_write_r>:
   8bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bd32:	460f      	mov	r7, r1
   8bd34:	2600      	movs	r6, #0
   8bd36:	4d08      	ldr	r5, [pc, #32]	; (8bd58 <_write_r+0x28>)
   8bd38:	4611      	mov	r1, r2
   8bd3a:	4604      	mov	r4, r0
   8bd3c:	461a      	mov	r2, r3
   8bd3e:	4638      	mov	r0, r7
   8bd40:	602e      	str	r6, [r5, #0]
   8bd42:	f7f7 fdff 	bl	83944 <_write>
   8bd46:	1c43      	adds	r3, r0, #1
   8bd48:	d000      	beq.n	8bd4c <_write_r+0x1c>
   8bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bd4c:	682b      	ldr	r3, [r5, #0]
   8bd4e:	2b00      	cmp	r3, #0
   8bd50:	d0fb      	beq.n	8bd4a <_write_r+0x1a>
   8bd52:	6023      	str	r3, [r4, #0]
   8bd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bd56:	bf00      	nop
   8bd58:	200026d8 	.word	0x200026d8

0008bd5c <__register_exitproc>:
   8bd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bd60:	f8df a080 	ldr.w	sl, [pc, #128]	; 8bde4 <__register_exitproc+0x88>
   8bd64:	4606      	mov	r6, r0
   8bd66:	f8da 0000 	ldr.w	r0, [sl]
   8bd6a:	4698      	mov	r8, r3
   8bd6c:	460f      	mov	r7, r1
   8bd6e:	4691      	mov	r9, r2
   8bd70:	f7fe fce4 	bl	8a73c <__retarget_lock_acquire_recursive>
   8bd74:	4b1a      	ldr	r3, [pc, #104]	; (8bde0 <__register_exitproc+0x84>)
   8bd76:	681b      	ldr	r3, [r3, #0]
   8bd78:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8bd7c:	b324      	cbz	r4, 8bdc8 <__register_exitproc+0x6c>
   8bd7e:	6865      	ldr	r5, [r4, #4]
   8bd80:	2d1f      	cmp	r5, #31
   8bd82:	dc26      	bgt.n	8bdd2 <__register_exitproc+0x76>
   8bd84:	b95e      	cbnz	r6, 8bd9e <__register_exitproc+0x42>
   8bd86:	1c6b      	adds	r3, r5, #1
   8bd88:	3502      	adds	r5, #2
   8bd8a:	f8da 0000 	ldr.w	r0, [sl]
   8bd8e:	6063      	str	r3, [r4, #4]
   8bd90:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8bd94:	f7fe fcd4 	bl	8a740 <__retarget_lock_release_recursive>
   8bd98:	2000      	movs	r0, #0
   8bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bd9e:	2301      	movs	r3, #1
   8bda0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8bda4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8bda8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8bdac:	40ab      	lsls	r3, r5
   8bdae:	431a      	orrs	r2, r3
   8bdb0:	2e02      	cmp	r6, #2
   8bdb2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8bdb6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8bdba:	d1e4      	bne.n	8bd86 <__register_exitproc+0x2a>
   8bdbc:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8bdc0:	4313      	orrs	r3, r2
   8bdc2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8bdc6:	e7de      	b.n	8bd86 <__register_exitproc+0x2a>
   8bdc8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8bdcc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8bdd0:	e7d5      	b.n	8bd7e <__register_exitproc+0x22>
   8bdd2:	f8da 0000 	ldr.w	r0, [sl]
   8bdd6:	f7fe fcb3 	bl	8a740 <__retarget_lock_release_recursive>
   8bdda:	f04f 30ff 	mov.w	r0, #4294967295
   8bdde:	e7dc      	b.n	8bd9a <__register_exitproc+0x3e>
   8bde0:	0008cbec 	.word	0x0008cbec
   8bde4:	20000dd8 	.word	0x20000dd8

0008bde8 <__assert_func>:
   8bde8:	4614      	mov	r4, r2
   8bdea:	b500      	push	{lr}
   8bdec:	4d09      	ldr	r5, [pc, #36]	; (8be14 <__assert_func+0x2c>)
   8bdee:	461a      	mov	r2, r3
   8bdf0:	4603      	mov	r3, r0
   8bdf2:	6828      	ldr	r0, [r5, #0]
   8bdf4:	b085      	sub	sp, #20
   8bdf6:	68c0      	ldr	r0, [r0, #12]
   8bdf8:	b144      	cbz	r4, 8be0c <__assert_func+0x24>
   8bdfa:	4d07      	ldr	r5, [pc, #28]	; (8be18 <__assert_func+0x30>)
   8bdfc:	9100      	str	r1, [sp, #0]
   8bdfe:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8be02:	4906      	ldr	r1, [pc, #24]	; (8be1c <__assert_func+0x34>)
   8be04:	f000 f8b6 	bl	8bf74 <fiprintf>
   8be08:	f000 f91c 	bl	8c044 <abort>
   8be0c:	4d04      	ldr	r5, [pc, #16]	; (8be20 <__assert_func+0x38>)
   8be0e:	462c      	mov	r4, r5
   8be10:	e7f4      	b.n	8bdfc <__assert_func+0x14>
   8be12:	bf00      	nop
   8be14:	200009ac 	.word	0x200009ac
   8be18:	0008cea4 	.word	0x0008cea4
   8be1c:	0008ceb4 	.word	0x0008ceb4
   8be20:	0008cb40 	.word	0x0008cb40

0008be24 <_calloc_r>:
   8be24:	b510      	push	{r4, lr}
   8be26:	fb02 f101 	mul.w	r1, r2, r1
   8be2a:	f7fe fd0b 	bl	8a844 <_malloc_r>
   8be2e:	4604      	mov	r4, r0
   8be30:	b168      	cbz	r0, 8be4e <_calloc_r+0x2a>
   8be32:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8be36:	f022 0203 	bic.w	r2, r2, #3
   8be3a:	3a04      	subs	r2, #4
   8be3c:	2a24      	cmp	r2, #36	; 0x24
   8be3e:	d818      	bhi.n	8be72 <_calloc_r+0x4e>
   8be40:	2a13      	cmp	r2, #19
   8be42:	d806      	bhi.n	8be52 <_calloc_r+0x2e>
   8be44:	4602      	mov	r2, r0
   8be46:	2300      	movs	r3, #0
   8be48:	e9c2 3300 	strd	r3, r3, [r2]
   8be4c:	6093      	str	r3, [r2, #8]
   8be4e:	4620      	mov	r0, r4
   8be50:	bd10      	pop	{r4, pc}
   8be52:	2300      	movs	r3, #0
   8be54:	2a1b      	cmp	r2, #27
   8be56:	e9c0 3300 	strd	r3, r3, [r0]
   8be5a:	d90f      	bls.n	8be7c <_calloc_r+0x58>
   8be5c:	2a24      	cmp	r2, #36	; 0x24
   8be5e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8be62:	bf0a      	itet	eq
   8be64:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8be68:	f100 0210 	addne.w	r2, r0, #16
   8be6c:	f100 0218 	addeq.w	r2, r0, #24
   8be70:	e7e9      	b.n	8be46 <_calloc_r+0x22>
   8be72:	2100      	movs	r1, #0
   8be74:	f7fa f8c4 	bl	86000 <memset>
   8be78:	4620      	mov	r0, r4
   8be7a:	bd10      	pop	{r4, pc}
   8be7c:	f100 0208 	add.w	r2, r0, #8
   8be80:	e7e1      	b.n	8be46 <_calloc_r+0x22>
   8be82:	bf00      	nop

0008be84 <_close_r>:
   8be84:	2200      	movs	r2, #0
   8be86:	b538      	push	{r3, r4, r5, lr}
   8be88:	4d06      	ldr	r5, [pc, #24]	; (8bea4 <_close_r+0x20>)
   8be8a:	4604      	mov	r4, r0
   8be8c:	4608      	mov	r0, r1
   8be8e:	602a      	str	r2, [r5, #0]
   8be90:	f7f9 fce8 	bl	85864 <_close>
   8be94:	1c43      	adds	r3, r0, #1
   8be96:	d000      	beq.n	8be9a <_close_r+0x16>
   8be98:	bd38      	pop	{r3, r4, r5, pc}
   8be9a:	682b      	ldr	r3, [r5, #0]
   8be9c:	2b00      	cmp	r3, #0
   8be9e:	d0fb      	beq.n	8be98 <_close_r+0x14>
   8bea0:	6023      	str	r3, [r4, #0]
   8bea2:	bd38      	pop	{r3, r4, r5, pc}
   8bea4:	200026d8 	.word	0x200026d8

0008bea8 <_fclose_r>:
   8bea8:	b570      	push	{r4, r5, r6, lr}
   8beaa:	2900      	cmp	r1, #0
   8beac:	d04b      	beq.n	8bf46 <_fclose_r+0x9e>
   8beae:	460c      	mov	r4, r1
   8beb0:	4605      	mov	r5, r0
   8beb2:	b110      	cbz	r0, 8beba <_fclose_r+0x12>
   8beb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8beb6:	2b00      	cmp	r3, #0
   8beb8:	d048      	beq.n	8bf4c <_fclose_r+0xa4>
   8beba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bebc:	07d8      	lsls	r0, r3, #31
   8bebe:	d534      	bpl.n	8bf2a <_fclose_r+0x82>
   8bec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bec4:	2b00      	cmp	r3, #0
   8bec6:	d03e      	beq.n	8bf46 <_fclose_r+0x9e>
   8bec8:	4621      	mov	r1, r4
   8beca:	4628      	mov	r0, r5
   8becc:	f7fd ff70 	bl	89db0 <__sflush_r>
   8bed0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bed2:	4606      	mov	r6, r0
   8bed4:	b133      	cbz	r3, 8bee4 <_fclose_r+0x3c>
   8bed6:	4628      	mov	r0, r5
   8bed8:	69e1      	ldr	r1, [r4, #28]
   8beda:	4798      	blx	r3
   8bedc:	2800      	cmp	r0, #0
   8bede:	bfb8      	it	lt
   8bee0:	f04f 36ff 	movlt.w	r6, #4294967295
   8bee4:	89a3      	ldrh	r3, [r4, #12]
   8bee6:	061a      	lsls	r2, r3, #24
   8bee8:	d43b      	bmi.n	8bf62 <_fclose_r+0xba>
   8beea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8beec:	b141      	cbz	r1, 8bf00 <_fclose_r+0x58>
   8beee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bef2:	4299      	cmp	r1, r3
   8bef4:	d002      	beq.n	8befc <_fclose_r+0x54>
   8bef6:	4628      	mov	r0, r5
   8bef8:	f7fe f972 	bl	8a1e0 <_free_r>
   8befc:	2300      	movs	r3, #0
   8befe:	6323      	str	r3, [r4, #48]	; 0x30
   8bf00:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bf02:	b121      	cbz	r1, 8bf0e <_fclose_r+0x66>
   8bf04:	4628      	mov	r0, r5
   8bf06:	f7fe f96b 	bl	8a1e0 <_free_r>
   8bf0a:	2300      	movs	r3, #0
   8bf0c:	6463      	str	r3, [r4, #68]	; 0x44
   8bf0e:	f7fe f871 	bl	89ff4 <__sfp_lock_acquire>
   8bf12:	2200      	movs	r2, #0
   8bf14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bf16:	81a2      	strh	r2, [r4, #12]
   8bf18:	07db      	lsls	r3, r3, #31
   8bf1a:	d527      	bpl.n	8bf6c <_fclose_r+0xc4>
   8bf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf1e:	f7fe fc0b 	bl	8a738 <__retarget_lock_close_recursive>
   8bf22:	f7fe f86d 	bl	8a000 <__sfp_lock_release>
   8bf26:	4630      	mov	r0, r6
   8bf28:	bd70      	pop	{r4, r5, r6, pc}
   8bf2a:	89a3      	ldrh	r3, [r4, #12]
   8bf2c:	0599      	lsls	r1, r3, #22
   8bf2e:	d4cb      	bmi.n	8bec8 <_fclose_r+0x20>
   8bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf32:	f7fe fc03 	bl	8a73c <__retarget_lock_acquire_recursive>
   8bf36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf3a:	2b00      	cmp	r3, #0
   8bf3c:	d1c4      	bne.n	8bec8 <_fclose_r+0x20>
   8bf3e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8bf40:	f016 0601 	ands.w	r6, r6, #1
   8bf44:	d008      	beq.n	8bf58 <_fclose_r+0xb0>
   8bf46:	2600      	movs	r6, #0
   8bf48:	4630      	mov	r0, r6
   8bf4a:	bd70      	pop	{r4, r5, r6, pc}
   8bf4c:	f7fe f824 	bl	89f98 <__sinit>
   8bf50:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bf52:	07d8      	lsls	r0, r3, #31
   8bf54:	d4b4      	bmi.n	8bec0 <_fclose_r+0x18>
   8bf56:	e7e8      	b.n	8bf2a <_fclose_r+0x82>
   8bf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf5a:	f7fe fbf1 	bl	8a740 <__retarget_lock_release_recursive>
   8bf5e:	4630      	mov	r0, r6
   8bf60:	bd70      	pop	{r4, r5, r6, pc}
   8bf62:	4628      	mov	r0, r5
   8bf64:	6921      	ldr	r1, [r4, #16]
   8bf66:	f7fe f93b 	bl	8a1e0 <_free_r>
   8bf6a:	e7be      	b.n	8beea <_fclose_r+0x42>
   8bf6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf6e:	f7fe fbe7 	bl	8a740 <__retarget_lock_release_recursive>
   8bf72:	e7d3      	b.n	8bf1c <_fclose_r+0x74>

0008bf74 <fiprintf>:
   8bf74:	b40e      	push	{r1, r2, r3}
   8bf76:	b510      	push	{r4, lr}
   8bf78:	b083      	sub	sp, #12
   8bf7a:	ab05      	add	r3, sp, #20
   8bf7c:	4c06      	ldr	r4, [pc, #24]	; (8bf98 <fiprintf+0x24>)
   8bf7e:	f853 2b04 	ldr.w	r2, [r3], #4
   8bf82:	4601      	mov	r1, r0
   8bf84:	6820      	ldr	r0, [r4, #0]
   8bf86:	9301      	str	r3, [sp, #4]
   8bf88:	f7fb ffca 	bl	87f20 <_vfiprintf_r>
   8bf8c:	b003      	add	sp, #12
   8bf8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bf92:	b003      	add	sp, #12
   8bf94:	4770      	bx	lr
   8bf96:	bf00      	nop
   8bf98:	200009ac 	.word	0x200009ac

0008bf9c <_fstat_r>:
   8bf9c:	b570      	push	{r4, r5, r6, lr}
   8bf9e:	460c      	mov	r4, r1
   8bfa0:	4603      	mov	r3, r0
   8bfa2:	2600      	movs	r6, #0
   8bfa4:	4d07      	ldr	r5, [pc, #28]	; (8bfc4 <_fstat_r+0x28>)
   8bfa6:	4620      	mov	r0, r4
   8bfa8:	4611      	mov	r1, r2
   8bfaa:	461c      	mov	r4, r3
   8bfac:	602e      	str	r6, [r5, #0]
   8bfae:	f7f9 fc5c 	bl	8586a <_fstat>
   8bfb2:	1c43      	adds	r3, r0, #1
   8bfb4:	d000      	beq.n	8bfb8 <_fstat_r+0x1c>
   8bfb6:	bd70      	pop	{r4, r5, r6, pc}
   8bfb8:	682b      	ldr	r3, [r5, #0]
   8bfba:	2b00      	cmp	r3, #0
   8bfbc:	d0fb      	beq.n	8bfb6 <_fstat_r+0x1a>
   8bfbe:	6023      	str	r3, [r4, #0]
   8bfc0:	bd70      	pop	{r4, r5, r6, pc}
   8bfc2:	bf00      	nop
   8bfc4:	200026d8 	.word	0x200026d8

0008bfc8 <_isatty_r>:
   8bfc8:	2200      	movs	r2, #0
   8bfca:	b538      	push	{r3, r4, r5, lr}
   8bfcc:	4d06      	ldr	r5, [pc, #24]	; (8bfe8 <_isatty_r+0x20>)
   8bfce:	4604      	mov	r4, r0
   8bfd0:	4608      	mov	r0, r1
   8bfd2:	602a      	str	r2, [r5, #0]
   8bfd4:	f7f9 fc4e 	bl	85874 <_isatty>
   8bfd8:	1c43      	adds	r3, r0, #1
   8bfda:	d000      	beq.n	8bfde <_isatty_r+0x16>
   8bfdc:	bd38      	pop	{r3, r4, r5, pc}
   8bfde:	682b      	ldr	r3, [r5, #0]
   8bfe0:	2b00      	cmp	r3, #0
   8bfe2:	d0fb      	beq.n	8bfdc <_isatty_r+0x14>
   8bfe4:	6023      	str	r3, [r4, #0]
   8bfe6:	bd38      	pop	{r3, r4, r5, pc}
   8bfe8:	200026d8 	.word	0x200026d8

0008bfec <_lseek_r>:
   8bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bfee:	460f      	mov	r7, r1
   8bff0:	2600      	movs	r6, #0
   8bff2:	4d08      	ldr	r5, [pc, #32]	; (8c014 <_lseek_r+0x28>)
   8bff4:	4611      	mov	r1, r2
   8bff6:	4604      	mov	r4, r0
   8bff8:	461a      	mov	r2, r3
   8bffa:	4638      	mov	r0, r7
   8bffc:	602e      	str	r6, [r5, #0]
   8bffe:	f7f9 fc3b 	bl	85878 <_lseek>
   8c002:	1c43      	adds	r3, r0, #1
   8c004:	d000      	beq.n	8c008 <_lseek_r+0x1c>
   8c006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c008:	682b      	ldr	r3, [r5, #0]
   8c00a:	2b00      	cmp	r3, #0
   8c00c:	d0fb      	beq.n	8c006 <_lseek_r+0x1a>
   8c00e:	6023      	str	r3, [r4, #0]
   8c010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c012:	bf00      	nop
   8c014:	200026d8 	.word	0x200026d8

0008c018 <_read_r>:
   8c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c01a:	460f      	mov	r7, r1
   8c01c:	2600      	movs	r6, #0
   8c01e:	4d08      	ldr	r5, [pc, #32]	; (8c040 <_read_r+0x28>)
   8c020:	4611      	mov	r1, r2
   8c022:	4604      	mov	r4, r0
   8c024:	461a      	mov	r2, r3
   8c026:	4638      	mov	r0, r7
   8c028:	602e      	str	r6, [r5, #0]
   8c02a:	f7f7 fc6d 	bl	83908 <_read>
   8c02e:	1c43      	adds	r3, r0, #1
   8c030:	d000      	beq.n	8c034 <_read_r+0x1c>
   8c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c034:	682b      	ldr	r3, [r5, #0]
   8c036:	2b00      	cmp	r3, #0
   8c038:	d0fb      	beq.n	8c032 <_read_r+0x1a>
   8c03a:	6023      	str	r3, [r4, #0]
   8c03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c03e:	bf00      	nop
   8c040:	200026d8 	.word	0x200026d8

0008c044 <abort>:
   8c044:	2006      	movs	r0, #6
   8c046:	b508      	push	{r3, lr}
   8c048:	f000 f830 	bl	8c0ac <raise>
   8c04c:	2001      	movs	r0, #1
   8c04e:	f7f9 fc15 	bl	8587c <_exit>
   8c052:	bf00      	nop

0008c054 <_raise_r>:
   8c054:	291f      	cmp	r1, #31
   8c056:	b538      	push	{r3, r4, r5, lr}
   8c058:	4605      	mov	r5, r0
   8c05a:	d821      	bhi.n	8c0a0 <_raise_r+0x4c>
   8c05c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c060:	460c      	mov	r4, r1
   8c062:	b16a      	cbz	r2, 8c080 <_raise_r+0x2c>
   8c064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c068:	b153      	cbz	r3, 8c080 <_raise_r+0x2c>
   8c06a:	2b01      	cmp	r3, #1
   8c06c:	d016      	beq.n	8c09c <_raise_r+0x48>
   8c06e:	1c59      	adds	r1, r3, #1
   8c070:	d010      	beq.n	8c094 <_raise_r+0x40>
   8c072:	2500      	movs	r5, #0
   8c074:	4620      	mov	r0, r4
   8c076:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c07a:	4798      	blx	r3
   8c07c:	4628      	mov	r0, r5
   8c07e:	bd38      	pop	{r3, r4, r5, pc}
   8c080:	4628      	mov	r0, r5
   8c082:	f000 f831 	bl	8c0e8 <_getpid_r>
   8c086:	4622      	mov	r2, r4
   8c088:	4601      	mov	r1, r0
   8c08a:	4628      	mov	r0, r5
   8c08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c090:	f000 b814 	b.w	8c0bc <_kill_r>
   8c094:	2316      	movs	r3, #22
   8c096:	2001      	movs	r0, #1
   8c098:	602b      	str	r3, [r5, #0]
   8c09a:	bd38      	pop	{r3, r4, r5, pc}
   8c09c:	2000      	movs	r0, #0
   8c09e:	bd38      	pop	{r3, r4, r5, pc}
   8c0a0:	2316      	movs	r3, #22
   8c0a2:	f04f 30ff 	mov.w	r0, #4294967295
   8c0a6:	602b      	str	r3, [r5, #0]
   8c0a8:	bd38      	pop	{r3, r4, r5, pc}
   8c0aa:	bf00      	nop

0008c0ac <raise>:
   8c0ac:	4b02      	ldr	r3, [pc, #8]	; (8c0b8 <raise+0xc>)
   8c0ae:	4601      	mov	r1, r0
   8c0b0:	6818      	ldr	r0, [r3, #0]
   8c0b2:	f7ff bfcf 	b.w	8c054 <_raise_r>
   8c0b6:	bf00      	nop
   8c0b8:	200009ac 	.word	0x200009ac

0008c0bc <_kill_r>:
   8c0bc:	b570      	push	{r4, r5, r6, lr}
   8c0be:	460c      	mov	r4, r1
   8c0c0:	4603      	mov	r3, r0
   8c0c2:	2600      	movs	r6, #0
   8c0c4:	4d07      	ldr	r5, [pc, #28]	; (8c0e4 <_kill_r+0x28>)
   8c0c6:	4620      	mov	r0, r4
   8c0c8:	4611      	mov	r1, r2
   8c0ca:	461c      	mov	r4, r3
   8c0cc:	602e      	str	r6, [r5, #0]
   8c0ce:	f7f9 fbdf 	bl	85890 <_kill>
   8c0d2:	1c43      	adds	r3, r0, #1
   8c0d4:	d000      	beq.n	8c0d8 <_kill_r+0x1c>
   8c0d6:	bd70      	pop	{r4, r5, r6, pc}
   8c0d8:	682b      	ldr	r3, [r5, #0]
   8c0da:	2b00      	cmp	r3, #0
   8c0dc:	d0fb      	beq.n	8c0d6 <_kill_r+0x1a>
   8c0de:	6023      	str	r3, [r4, #0]
   8c0e0:	bd70      	pop	{r4, r5, r6, pc}
   8c0e2:	bf00      	nop
   8c0e4:	200026d8 	.word	0x200026d8

0008c0e8 <_getpid_r>:
   8c0e8:	f7f9 bbd3 	b.w	85892 <_getpid>

0008c0ec <__aeabi_drsub>:
   8c0ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c0f0:	e002      	b.n	8c0f8 <__adddf3>
   8c0f2:	bf00      	nop

0008c0f4 <__aeabi_dsub>:
   8c0f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c0f8 <__adddf3>:
   8c0f8:	b530      	push	{r4, r5, lr}
   8c0fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c0fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c102:	ea94 0f05 	teq	r4, r5
   8c106:	bf08      	it	eq
   8c108:	ea90 0f02 	teqeq	r0, r2
   8c10c:	bf1f      	itttt	ne
   8c10e:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c112:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c116:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c11a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c11e:	f000 80e2 	beq.w	8c2e6 <__adddf3+0x1ee>
   8c122:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c126:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c12a:	bfb8      	it	lt
   8c12c:	426d      	neglt	r5, r5
   8c12e:	dd0c      	ble.n	8c14a <__adddf3+0x52>
   8c130:	442c      	add	r4, r5
   8c132:	ea80 0202 	eor.w	r2, r0, r2
   8c136:	ea81 0303 	eor.w	r3, r1, r3
   8c13a:	ea82 0000 	eor.w	r0, r2, r0
   8c13e:	ea83 0101 	eor.w	r1, r3, r1
   8c142:	ea80 0202 	eor.w	r2, r0, r2
   8c146:	ea81 0303 	eor.w	r3, r1, r3
   8c14a:	2d36      	cmp	r5, #54	; 0x36
   8c14c:	bf88      	it	hi
   8c14e:	bd30      	pophi	{r4, r5, pc}
   8c150:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c154:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c158:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c15c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c160:	d002      	beq.n	8c168 <__adddf3+0x70>
   8c162:	4240      	negs	r0, r0
   8c164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c168:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c16c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c170:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c174:	d002      	beq.n	8c17c <__adddf3+0x84>
   8c176:	4252      	negs	r2, r2
   8c178:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c17c:	ea94 0f05 	teq	r4, r5
   8c180:	f000 80a7 	beq.w	8c2d2 <__adddf3+0x1da>
   8c184:	f1a4 0401 	sub.w	r4, r4, #1
   8c188:	f1d5 0e20 	rsbs	lr, r5, #32
   8c18c:	db0d      	blt.n	8c1aa <__adddf3+0xb2>
   8c18e:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c192:	fa22 f205 	lsr.w	r2, r2, r5
   8c196:	1880      	adds	r0, r0, r2
   8c198:	f141 0100 	adc.w	r1, r1, #0
   8c19c:	fa03 f20e 	lsl.w	r2, r3, lr
   8c1a0:	1880      	adds	r0, r0, r2
   8c1a2:	fa43 f305 	asr.w	r3, r3, r5
   8c1a6:	4159      	adcs	r1, r3
   8c1a8:	e00e      	b.n	8c1c8 <__adddf3+0xd0>
   8c1aa:	f1a5 0520 	sub.w	r5, r5, #32
   8c1ae:	f10e 0e20 	add.w	lr, lr, #32
   8c1b2:	2a01      	cmp	r2, #1
   8c1b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c1b8:	bf28      	it	cs
   8c1ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c1be:	fa43 f305 	asr.w	r3, r3, r5
   8c1c2:	18c0      	adds	r0, r0, r3
   8c1c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c1c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c1cc:	d507      	bpl.n	8c1de <__adddf3+0xe6>
   8c1ce:	f04f 0e00 	mov.w	lr, #0
   8c1d2:	f1dc 0c00 	rsbs	ip, ip, #0
   8c1d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c1da:	eb6e 0101 	sbc.w	r1, lr, r1
   8c1de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c1e2:	d31b      	bcc.n	8c21c <__adddf3+0x124>
   8c1e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c1e8:	d30c      	bcc.n	8c204 <__adddf3+0x10c>
   8c1ea:	0849      	lsrs	r1, r1, #1
   8c1ec:	ea5f 0030 	movs.w	r0, r0, rrx
   8c1f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c1f4:	f104 0401 	add.w	r4, r4, #1
   8c1f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c1fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c200:	f080 809a 	bcs.w	8c338 <__adddf3+0x240>
   8c204:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c208:	bf08      	it	eq
   8c20a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c20e:	f150 0000 	adcs.w	r0, r0, #0
   8c212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c216:	ea41 0105 	orr.w	r1, r1, r5
   8c21a:	bd30      	pop	{r4, r5, pc}
   8c21c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c220:	4140      	adcs	r0, r0
   8c222:	eb41 0101 	adc.w	r1, r1, r1
   8c226:	3c01      	subs	r4, #1
   8c228:	bf28      	it	cs
   8c22a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c22e:	d2e9      	bcs.n	8c204 <__adddf3+0x10c>
   8c230:	f091 0f00 	teq	r1, #0
   8c234:	bf04      	itt	eq
   8c236:	4601      	moveq	r1, r0
   8c238:	2000      	moveq	r0, #0
   8c23a:	fab1 f381 	clz	r3, r1
   8c23e:	bf08      	it	eq
   8c240:	3320      	addeq	r3, #32
   8c242:	f1a3 030b 	sub.w	r3, r3, #11
   8c246:	f1b3 0220 	subs.w	r2, r3, #32
   8c24a:	da0c      	bge.n	8c266 <__adddf3+0x16e>
   8c24c:	320c      	adds	r2, #12
   8c24e:	dd08      	ble.n	8c262 <__adddf3+0x16a>
   8c250:	f102 0c14 	add.w	ip, r2, #20
   8c254:	f1c2 020c 	rsb	r2, r2, #12
   8c258:	fa01 f00c 	lsl.w	r0, r1, ip
   8c25c:	fa21 f102 	lsr.w	r1, r1, r2
   8c260:	e00c      	b.n	8c27c <__adddf3+0x184>
   8c262:	f102 0214 	add.w	r2, r2, #20
   8c266:	bfd8      	it	le
   8c268:	f1c2 0c20 	rsble	ip, r2, #32
   8c26c:	fa01 f102 	lsl.w	r1, r1, r2
   8c270:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c274:	bfdc      	itt	le
   8c276:	ea41 010c 	orrle.w	r1, r1, ip
   8c27a:	4090      	lslle	r0, r2
   8c27c:	1ae4      	subs	r4, r4, r3
   8c27e:	bfa2      	ittt	ge
   8c280:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c284:	4329      	orrge	r1, r5
   8c286:	bd30      	popge	{r4, r5, pc}
   8c288:	ea6f 0404 	mvn.w	r4, r4
   8c28c:	3c1f      	subs	r4, #31
   8c28e:	da1c      	bge.n	8c2ca <__adddf3+0x1d2>
   8c290:	340c      	adds	r4, #12
   8c292:	dc0e      	bgt.n	8c2b2 <__adddf3+0x1ba>
   8c294:	f104 0414 	add.w	r4, r4, #20
   8c298:	f1c4 0220 	rsb	r2, r4, #32
   8c29c:	fa20 f004 	lsr.w	r0, r0, r4
   8c2a0:	fa01 f302 	lsl.w	r3, r1, r2
   8c2a4:	ea40 0003 	orr.w	r0, r0, r3
   8c2a8:	fa21 f304 	lsr.w	r3, r1, r4
   8c2ac:	ea45 0103 	orr.w	r1, r5, r3
   8c2b0:	bd30      	pop	{r4, r5, pc}
   8c2b2:	f1c4 040c 	rsb	r4, r4, #12
   8c2b6:	f1c4 0220 	rsb	r2, r4, #32
   8c2ba:	fa20 f002 	lsr.w	r0, r0, r2
   8c2be:	fa01 f304 	lsl.w	r3, r1, r4
   8c2c2:	ea40 0003 	orr.w	r0, r0, r3
   8c2c6:	4629      	mov	r1, r5
   8c2c8:	bd30      	pop	{r4, r5, pc}
   8c2ca:	fa21 f004 	lsr.w	r0, r1, r4
   8c2ce:	4629      	mov	r1, r5
   8c2d0:	bd30      	pop	{r4, r5, pc}
   8c2d2:	f094 0f00 	teq	r4, #0
   8c2d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c2da:	bf06      	itte	eq
   8c2dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c2e0:	3401      	addeq	r4, #1
   8c2e2:	3d01      	subne	r5, #1
   8c2e4:	e74e      	b.n	8c184 <__adddf3+0x8c>
   8c2e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c2ea:	bf18      	it	ne
   8c2ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c2f0:	d029      	beq.n	8c346 <__adddf3+0x24e>
   8c2f2:	ea94 0f05 	teq	r4, r5
   8c2f6:	bf08      	it	eq
   8c2f8:	ea90 0f02 	teqeq	r0, r2
   8c2fc:	d005      	beq.n	8c30a <__adddf3+0x212>
   8c2fe:	ea54 0c00 	orrs.w	ip, r4, r0
   8c302:	bf04      	itt	eq
   8c304:	4619      	moveq	r1, r3
   8c306:	4610      	moveq	r0, r2
   8c308:	bd30      	pop	{r4, r5, pc}
   8c30a:	ea91 0f03 	teq	r1, r3
   8c30e:	bf1e      	ittt	ne
   8c310:	2100      	movne	r1, #0
   8c312:	2000      	movne	r0, #0
   8c314:	bd30      	popne	{r4, r5, pc}
   8c316:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c31a:	d105      	bne.n	8c328 <__adddf3+0x230>
   8c31c:	0040      	lsls	r0, r0, #1
   8c31e:	4149      	adcs	r1, r1
   8c320:	bf28      	it	cs
   8c322:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c326:	bd30      	pop	{r4, r5, pc}
   8c328:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c32c:	bf3c      	itt	cc
   8c32e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c332:	bd30      	popcc	{r4, r5, pc}
   8c334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c338:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c33c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c340:	f04f 0000 	mov.w	r0, #0
   8c344:	bd30      	pop	{r4, r5, pc}
   8c346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c34a:	bf1a      	itte	ne
   8c34c:	4619      	movne	r1, r3
   8c34e:	4610      	movne	r0, r2
   8c350:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c354:	bf1c      	itt	ne
   8c356:	460b      	movne	r3, r1
   8c358:	4602      	movne	r2, r0
   8c35a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c35e:	bf06      	itte	eq
   8c360:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c364:	ea91 0f03 	teqeq	r1, r3
   8c368:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c36c:	bd30      	pop	{r4, r5, pc}
   8c36e:	bf00      	nop

0008c370 <__aeabi_ui2d>:
   8c370:	f090 0f00 	teq	r0, #0
   8c374:	bf04      	itt	eq
   8c376:	2100      	moveq	r1, #0
   8c378:	4770      	bxeq	lr
   8c37a:	b530      	push	{r4, r5, lr}
   8c37c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c380:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c384:	f04f 0500 	mov.w	r5, #0
   8c388:	f04f 0100 	mov.w	r1, #0
   8c38c:	e750      	b.n	8c230 <__adddf3+0x138>
   8c38e:	bf00      	nop

0008c390 <__aeabi_i2d>:
   8c390:	f090 0f00 	teq	r0, #0
   8c394:	bf04      	itt	eq
   8c396:	2100      	moveq	r1, #0
   8c398:	4770      	bxeq	lr
   8c39a:	b530      	push	{r4, r5, lr}
   8c39c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c3a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c3a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c3a8:	bf48      	it	mi
   8c3aa:	4240      	negmi	r0, r0
   8c3ac:	f04f 0100 	mov.w	r1, #0
   8c3b0:	e73e      	b.n	8c230 <__adddf3+0x138>
   8c3b2:	bf00      	nop

0008c3b4 <__aeabi_f2d>:
   8c3b4:	0042      	lsls	r2, r0, #1
   8c3b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c3ba:	ea4f 0131 	mov.w	r1, r1, rrx
   8c3be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c3c2:	bf1f      	itttt	ne
   8c3c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c3c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c3cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c3d0:	4770      	bxne	lr
   8c3d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c3d6:	bf08      	it	eq
   8c3d8:	4770      	bxeq	lr
   8c3da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c3de:	bf04      	itt	eq
   8c3e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c3e4:	4770      	bxeq	lr
   8c3e6:	b530      	push	{r4, r5, lr}
   8c3e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c3ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c3f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c3f4:	e71c      	b.n	8c230 <__adddf3+0x138>
   8c3f6:	bf00      	nop

0008c3f8 <__aeabi_ul2d>:
   8c3f8:	ea50 0201 	orrs.w	r2, r0, r1
   8c3fc:	bf08      	it	eq
   8c3fe:	4770      	bxeq	lr
   8c400:	b530      	push	{r4, r5, lr}
   8c402:	f04f 0500 	mov.w	r5, #0
   8c406:	e00a      	b.n	8c41e <__aeabi_l2d+0x16>

0008c408 <__aeabi_l2d>:
   8c408:	ea50 0201 	orrs.w	r2, r0, r1
   8c40c:	bf08      	it	eq
   8c40e:	4770      	bxeq	lr
   8c410:	b530      	push	{r4, r5, lr}
   8c412:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c416:	d502      	bpl.n	8c41e <__aeabi_l2d+0x16>
   8c418:	4240      	negs	r0, r0
   8c41a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c41e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c422:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c426:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c42a:	f43f aed8 	beq.w	8c1de <__adddf3+0xe6>
   8c42e:	f04f 0203 	mov.w	r2, #3
   8c432:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c436:	bf18      	it	ne
   8c438:	3203      	addne	r2, #3
   8c43a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c43e:	bf18      	it	ne
   8c440:	3203      	addne	r2, #3
   8c442:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c446:	f1c2 0320 	rsb	r3, r2, #32
   8c44a:	fa00 fc03 	lsl.w	ip, r0, r3
   8c44e:	fa20 f002 	lsr.w	r0, r0, r2
   8c452:	fa01 fe03 	lsl.w	lr, r1, r3
   8c456:	ea40 000e 	orr.w	r0, r0, lr
   8c45a:	fa21 f102 	lsr.w	r1, r1, r2
   8c45e:	4414      	add	r4, r2
   8c460:	e6bd      	b.n	8c1de <__adddf3+0xe6>
   8c462:	bf00      	nop

0008c464 <__aeabi_dmul>:
   8c464:	b570      	push	{r4, r5, r6, lr}
   8c466:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c46a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c46e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c472:	bf1d      	ittte	ne
   8c474:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c478:	ea94 0f0c 	teqne	r4, ip
   8c47c:	ea95 0f0c 	teqne	r5, ip
   8c480:	f000 f8de 	bleq	8c640 <__aeabi_dmul+0x1dc>
   8c484:	442c      	add	r4, r5
   8c486:	ea81 0603 	eor.w	r6, r1, r3
   8c48a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c48e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c492:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c496:	bf18      	it	ne
   8c498:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c49c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c4a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c4a4:	d038      	beq.n	8c518 <__aeabi_dmul+0xb4>
   8c4a6:	fba0 ce02 	umull	ip, lr, r0, r2
   8c4aa:	f04f 0500 	mov.w	r5, #0
   8c4ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c4b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c4b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c4ba:	f04f 0600 	mov.w	r6, #0
   8c4be:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c4c2:	f09c 0f00 	teq	ip, #0
   8c4c6:	bf18      	it	ne
   8c4c8:	f04e 0e01 	orrne.w	lr, lr, #1
   8c4cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c4d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c4d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c4d8:	d204      	bcs.n	8c4e4 <__aeabi_dmul+0x80>
   8c4da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c4de:	416d      	adcs	r5, r5
   8c4e0:	eb46 0606 	adc.w	r6, r6, r6
   8c4e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c4e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c4ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c4f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c4f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c4f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c4fc:	bf88      	it	hi
   8c4fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c502:	d81e      	bhi.n	8c542 <__aeabi_dmul+0xde>
   8c504:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c508:	bf08      	it	eq
   8c50a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c50e:	f150 0000 	adcs.w	r0, r0, #0
   8c512:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c516:	bd70      	pop	{r4, r5, r6, pc}
   8c518:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c51c:	ea46 0101 	orr.w	r1, r6, r1
   8c520:	ea40 0002 	orr.w	r0, r0, r2
   8c524:	ea81 0103 	eor.w	r1, r1, r3
   8c528:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c52c:	bfc2      	ittt	gt
   8c52e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c536:	bd70      	popgt	{r4, r5, r6, pc}
   8c538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c53c:	f04f 0e00 	mov.w	lr, #0
   8c540:	3c01      	subs	r4, #1
   8c542:	f300 80ab 	bgt.w	8c69c <__aeabi_dmul+0x238>
   8c546:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c54a:	bfde      	ittt	le
   8c54c:	2000      	movle	r0, #0
   8c54e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c552:	bd70      	pople	{r4, r5, r6, pc}
   8c554:	f1c4 0400 	rsb	r4, r4, #0
   8c558:	3c20      	subs	r4, #32
   8c55a:	da35      	bge.n	8c5c8 <__aeabi_dmul+0x164>
   8c55c:	340c      	adds	r4, #12
   8c55e:	dc1b      	bgt.n	8c598 <__aeabi_dmul+0x134>
   8c560:	f104 0414 	add.w	r4, r4, #20
   8c564:	f1c4 0520 	rsb	r5, r4, #32
   8c568:	fa00 f305 	lsl.w	r3, r0, r5
   8c56c:	fa20 f004 	lsr.w	r0, r0, r4
   8c570:	fa01 f205 	lsl.w	r2, r1, r5
   8c574:	ea40 0002 	orr.w	r0, r0, r2
   8c578:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c57c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c580:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c584:	fa21 f604 	lsr.w	r6, r1, r4
   8c588:	eb42 0106 	adc.w	r1, r2, r6
   8c58c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c590:	bf08      	it	eq
   8c592:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c596:	bd70      	pop	{r4, r5, r6, pc}
   8c598:	f1c4 040c 	rsb	r4, r4, #12
   8c59c:	f1c4 0520 	rsb	r5, r4, #32
   8c5a0:	fa00 f304 	lsl.w	r3, r0, r4
   8c5a4:	fa20 f005 	lsr.w	r0, r0, r5
   8c5a8:	fa01 f204 	lsl.w	r2, r1, r4
   8c5ac:	ea40 0002 	orr.w	r0, r0, r2
   8c5b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c5b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c5b8:	f141 0100 	adc.w	r1, r1, #0
   8c5bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c5c0:	bf08      	it	eq
   8c5c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c5c6:	bd70      	pop	{r4, r5, r6, pc}
   8c5c8:	f1c4 0520 	rsb	r5, r4, #32
   8c5cc:	fa00 f205 	lsl.w	r2, r0, r5
   8c5d0:	ea4e 0e02 	orr.w	lr, lr, r2
   8c5d4:	fa20 f304 	lsr.w	r3, r0, r4
   8c5d8:	fa01 f205 	lsl.w	r2, r1, r5
   8c5dc:	ea43 0302 	orr.w	r3, r3, r2
   8c5e0:	fa21 f004 	lsr.w	r0, r1, r4
   8c5e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c5e8:	fa21 f204 	lsr.w	r2, r1, r4
   8c5ec:	ea20 0002 	bic.w	r0, r0, r2
   8c5f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c5f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c5f8:	bf08      	it	eq
   8c5fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c5fe:	bd70      	pop	{r4, r5, r6, pc}
   8c600:	f094 0f00 	teq	r4, #0
   8c604:	d10f      	bne.n	8c626 <__aeabi_dmul+0x1c2>
   8c606:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c60a:	0040      	lsls	r0, r0, #1
   8c60c:	eb41 0101 	adc.w	r1, r1, r1
   8c610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c614:	bf08      	it	eq
   8c616:	3c01      	subeq	r4, #1
   8c618:	d0f7      	beq.n	8c60a <__aeabi_dmul+0x1a6>
   8c61a:	ea41 0106 	orr.w	r1, r1, r6
   8c61e:	f095 0f00 	teq	r5, #0
   8c622:	bf18      	it	ne
   8c624:	4770      	bxne	lr
   8c626:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c62a:	0052      	lsls	r2, r2, #1
   8c62c:	eb43 0303 	adc.w	r3, r3, r3
   8c630:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c634:	bf08      	it	eq
   8c636:	3d01      	subeq	r5, #1
   8c638:	d0f7      	beq.n	8c62a <__aeabi_dmul+0x1c6>
   8c63a:	ea43 0306 	orr.w	r3, r3, r6
   8c63e:	4770      	bx	lr
   8c640:	ea94 0f0c 	teq	r4, ip
   8c644:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c648:	bf18      	it	ne
   8c64a:	ea95 0f0c 	teqne	r5, ip
   8c64e:	d00c      	beq.n	8c66a <__aeabi_dmul+0x206>
   8c650:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c654:	bf18      	it	ne
   8c656:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c65a:	d1d1      	bne.n	8c600 <__aeabi_dmul+0x19c>
   8c65c:	ea81 0103 	eor.w	r1, r1, r3
   8c660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c664:	f04f 0000 	mov.w	r0, #0
   8c668:	bd70      	pop	{r4, r5, r6, pc}
   8c66a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c66e:	bf06      	itte	eq
   8c670:	4610      	moveq	r0, r2
   8c672:	4619      	moveq	r1, r3
   8c674:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c678:	d019      	beq.n	8c6ae <__aeabi_dmul+0x24a>
   8c67a:	ea94 0f0c 	teq	r4, ip
   8c67e:	d102      	bne.n	8c686 <__aeabi_dmul+0x222>
   8c680:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c684:	d113      	bne.n	8c6ae <__aeabi_dmul+0x24a>
   8c686:	ea95 0f0c 	teq	r5, ip
   8c68a:	d105      	bne.n	8c698 <__aeabi_dmul+0x234>
   8c68c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c690:	bf1c      	itt	ne
   8c692:	4610      	movne	r0, r2
   8c694:	4619      	movne	r1, r3
   8c696:	d10a      	bne.n	8c6ae <__aeabi_dmul+0x24a>
   8c698:	ea81 0103 	eor.w	r1, r1, r3
   8c69c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c6a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c6a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c6a8:	f04f 0000 	mov.w	r0, #0
   8c6ac:	bd70      	pop	{r4, r5, r6, pc}
   8c6ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c6b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c6b6:	bd70      	pop	{r4, r5, r6, pc}

0008c6b8 <__aeabi_ddiv>:
   8c6b8:	b570      	push	{r4, r5, r6, lr}
   8c6ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c6be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c6c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c6c6:	bf1d      	ittte	ne
   8c6c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c6cc:	ea94 0f0c 	teqne	r4, ip
   8c6d0:	ea95 0f0c 	teqne	r5, ip
   8c6d4:	f000 f8a7 	bleq	8c826 <__aeabi_ddiv+0x16e>
   8c6d8:	eba4 0405 	sub.w	r4, r4, r5
   8c6dc:	ea81 0e03 	eor.w	lr, r1, r3
   8c6e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c6e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c6e8:	f000 8088 	beq.w	8c7fc <__aeabi_ddiv+0x144>
   8c6ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c6f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c6f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c6f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c6fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c700:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c704:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c708:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c70c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c710:	429d      	cmp	r5, r3
   8c712:	bf08      	it	eq
   8c714:	4296      	cmpeq	r6, r2
   8c716:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c71a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c71e:	d202      	bcs.n	8c726 <__aeabi_ddiv+0x6e>
   8c720:	085b      	lsrs	r3, r3, #1
   8c722:	ea4f 0232 	mov.w	r2, r2, rrx
   8c726:	1ab6      	subs	r6, r6, r2
   8c728:	eb65 0503 	sbc.w	r5, r5, r3
   8c72c:	085b      	lsrs	r3, r3, #1
   8c72e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c732:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c736:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c73a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c73e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c742:	bf22      	ittt	cs
   8c744:	1ab6      	subcs	r6, r6, r2
   8c746:	4675      	movcs	r5, lr
   8c748:	ea40 000c 	orrcs.w	r0, r0, ip
   8c74c:	085b      	lsrs	r3, r3, #1
   8c74e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c752:	ebb6 0e02 	subs.w	lr, r6, r2
   8c756:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c75a:	bf22      	ittt	cs
   8c75c:	1ab6      	subcs	r6, r6, r2
   8c75e:	4675      	movcs	r5, lr
   8c760:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c764:	085b      	lsrs	r3, r3, #1
   8c766:	ea4f 0232 	mov.w	r2, r2, rrx
   8c76a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c76e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c772:	bf22      	ittt	cs
   8c774:	1ab6      	subcs	r6, r6, r2
   8c776:	4675      	movcs	r5, lr
   8c778:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c77c:	085b      	lsrs	r3, r3, #1
   8c77e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c782:	ebb6 0e02 	subs.w	lr, r6, r2
   8c786:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c78a:	bf22      	ittt	cs
   8c78c:	1ab6      	subcs	r6, r6, r2
   8c78e:	4675      	movcs	r5, lr
   8c790:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c794:	ea55 0e06 	orrs.w	lr, r5, r6
   8c798:	d018      	beq.n	8c7cc <__aeabi_ddiv+0x114>
   8c79a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c79e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c7a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c7a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c7aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c7ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c7b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c7b6:	d1c0      	bne.n	8c73a <__aeabi_ddiv+0x82>
   8c7b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c7bc:	d10b      	bne.n	8c7d6 <__aeabi_ddiv+0x11e>
   8c7be:	ea41 0100 	orr.w	r1, r1, r0
   8c7c2:	f04f 0000 	mov.w	r0, #0
   8c7c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c7ca:	e7b6      	b.n	8c73a <__aeabi_ddiv+0x82>
   8c7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c7d0:	bf04      	itt	eq
   8c7d2:	4301      	orreq	r1, r0
   8c7d4:	2000      	moveq	r0, #0
   8c7d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c7da:	bf88      	it	hi
   8c7dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c7e0:	f63f aeaf 	bhi.w	8c542 <__aeabi_dmul+0xde>
   8c7e4:	ebb5 0c03 	subs.w	ip, r5, r3
   8c7e8:	bf04      	itt	eq
   8c7ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c7ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c7f2:	f150 0000 	adcs.w	r0, r0, #0
   8c7f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c7fa:	bd70      	pop	{r4, r5, r6, pc}
   8c7fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c800:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c804:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c808:	bfc2      	ittt	gt
   8c80a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c80e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c812:	bd70      	popgt	{r4, r5, r6, pc}
   8c814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c818:	f04f 0e00 	mov.w	lr, #0
   8c81c:	3c01      	subs	r4, #1
   8c81e:	e690      	b.n	8c542 <__aeabi_dmul+0xde>
   8c820:	ea45 0e06 	orr.w	lr, r5, r6
   8c824:	e68d      	b.n	8c542 <__aeabi_dmul+0xde>
   8c826:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c82a:	ea94 0f0c 	teq	r4, ip
   8c82e:	bf08      	it	eq
   8c830:	ea95 0f0c 	teqeq	r5, ip
   8c834:	f43f af3b 	beq.w	8c6ae <__aeabi_dmul+0x24a>
   8c838:	ea94 0f0c 	teq	r4, ip
   8c83c:	d10a      	bne.n	8c854 <__aeabi_ddiv+0x19c>
   8c83e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c842:	f47f af34 	bne.w	8c6ae <__aeabi_dmul+0x24a>
   8c846:	ea95 0f0c 	teq	r5, ip
   8c84a:	f47f af25 	bne.w	8c698 <__aeabi_dmul+0x234>
   8c84e:	4610      	mov	r0, r2
   8c850:	4619      	mov	r1, r3
   8c852:	e72c      	b.n	8c6ae <__aeabi_dmul+0x24a>
   8c854:	ea95 0f0c 	teq	r5, ip
   8c858:	d106      	bne.n	8c868 <__aeabi_ddiv+0x1b0>
   8c85a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c85e:	f43f aefd 	beq.w	8c65c <__aeabi_dmul+0x1f8>
   8c862:	4610      	mov	r0, r2
   8c864:	4619      	mov	r1, r3
   8c866:	e722      	b.n	8c6ae <__aeabi_dmul+0x24a>
   8c868:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c86c:	bf18      	it	ne
   8c86e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c872:	f47f aec5 	bne.w	8c600 <__aeabi_dmul+0x19c>
   8c876:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c87a:	f47f af0d 	bne.w	8c698 <__aeabi_dmul+0x234>
   8c87e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c882:	f47f aeeb 	bne.w	8c65c <__aeabi_dmul+0x1f8>
   8c886:	e712      	b.n	8c6ae <__aeabi_dmul+0x24a>

0008c888 <__gedf2>:
   8c888:	f04f 3cff 	mov.w	ip, #4294967295
   8c88c:	e006      	b.n	8c89c <__cmpdf2+0x4>
   8c88e:	bf00      	nop

0008c890 <__ledf2>:
   8c890:	f04f 0c01 	mov.w	ip, #1
   8c894:	e002      	b.n	8c89c <__cmpdf2+0x4>
   8c896:	bf00      	nop

0008c898 <__cmpdf2>:
   8c898:	f04f 0c01 	mov.w	ip, #1
   8c89c:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c8a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c8a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c8a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c8ac:	bf18      	it	ne
   8c8ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c8b2:	d01b      	beq.n	8c8ec <__cmpdf2+0x54>
   8c8b4:	b001      	add	sp, #4
   8c8b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c8ba:	bf0c      	ite	eq
   8c8bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c8c0:	ea91 0f03 	teqne	r1, r3
   8c8c4:	bf02      	ittt	eq
   8c8c6:	ea90 0f02 	teqeq	r0, r2
   8c8ca:	2000      	moveq	r0, #0
   8c8cc:	4770      	bxeq	lr
   8c8ce:	f110 0f00 	cmn.w	r0, #0
   8c8d2:	ea91 0f03 	teq	r1, r3
   8c8d6:	bf58      	it	pl
   8c8d8:	4299      	cmppl	r1, r3
   8c8da:	bf08      	it	eq
   8c8dc:	4290      	cmpeq	r0, r2
   8c8de:	bf2c      	ite	cs
   8c8e0:	17d8      	asrcs	r0, r3, #31
   8c8e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c8e6:	f040 0001 	orr.w	r0, r0, #1
   8c8ea:	4770      	bx	lr
   8c8ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c8f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c8f4:	d102      	bne.n	8c8fc <__cmpdf2+0x64>
   8c8f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c8fa:	d107      	bne.n	8c90c <__cmpdf2+0x74>
   8c8fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c904:	d1d6      	bne.n	8c8b4 <__cmpdf2+0x1c>
   8c906:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c90a:	d0d3      	beq.n	8c8b4 <__cmpdf2+0x1c>
   8c90c:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c910:	4770      	bx	lr
   8c912:	bf00      	nop

0008c914 <__aeabi_cdrcmple>:
   8c914:	4684      	mov	ip, r0
   8c916:	4610      	mov	r0, r2
   8c918:	4662      	mov	r2, ip
   8c91a:	468c      	mov	ip, r1
   8c91c:	4619      	mov	r1, r3
   8c91e:	4663      	mov	r3, ip
   8c920:	e000      	b.n	8c924 <__aeabi_cdcmpeq>
   8c922:	bf00      	nop

0008c924 <__aeabi_cdcmpeq>:
   8c924:	b501      	push	{r0, lr}
   8c926:	f7ff ffb7 	bl	8c898 <__cmpdf2>
   8c92a:	2800      	cmp	r0, #0
   8c92c:	bf48      	it	mi
   8c92e:	f110 0f00 	cmnmi.w	r0, #0
   8c932:	bd01      	pop	{r0, pc}

0008c934 <__aeabi_dcmpeq>:
   8c934:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c938:	f7ff fff4 	bl	8c924 <__aeabi_cdcmpeq>
   8c93c:	bf0c      	ite	eq
   8c93e:	2001      	moveq	r0, #1
   8c940:	2000      	movne	r0, #0
   8c942:	f85d fb08 	ldr.w	pc, [sp], #8
   8c946:	bf00      	nop

0008c948 <__aeabi_dcmplt>:
   8c948:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c94c:	f7ff ffea 	bl	8c924 <__aeabi_cdcmpeq>
   8c950:	bf34      	ite	cc
   8c952:	2001      	movcc	r0, #1
   8c954:	2000      	movcs	r0, #0
   8c956:	f85d fb08 	ldr.w	pc, [sp], #8
   8c95a:	bf00      	nop

0008c95c <__aeabi_dcmple>:
   8c95c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c960:	f7ff ffe0 	bl	8c924 <__aeabi_cdcmpeq>
   8c964:	bf94      	ite	ls
   8c966:	2001      	movls	r0, #1
   8c968:	2000      	movhi	r0, #0
   8c96a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c96e:	bf00      	nop

0008c970 <__aeabi_dcmpge>:
   8c970:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c974:	f7ff ffce 	bl	8c914 <__aeabi_cdrcmple>
   8c978:	bf94      	ite	ls
   8c97a:	2001      	movls	r0, #1
   8c97c:	2000      	movhi	r0, #0
   8c97e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c982:	bf00      	nop

0008c984 <__aeabi_dcmpgt>:
   8c984:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c988:	f7ff ffc4 	bl	8c914 <__aeabi_cdrcmple>
   8c98c:	bf34      	ite	cc
   8c98e:	2001      	movcc	r0, #1
   8c990:	2000      	movcs	r0, #0
   8c992:	f85d fb08 	ldr.w	pc, [sp], #8
   8c996:	bf00      	nop

0008c998 <__aeabi_dcmpun>:
   8c998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c99c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c9a0:	d102      	bne.n	8c9a8 <__aeabi_dcmpun+0x10>
   8c9a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c9a6:	d10a      	bne.n	8c9be <__aeabi_dcmpun+0x26>
   8c9a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c9ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c9b0:	d102      	bne.n	8c9b8 <__aeabi_dcmpun+0x20>
   8c9b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c9b6:	d102      	bne.n	8c9be <__aeabi_dcmpun+0x26>
   8c9b8:	f04f 0000 	mov.w	r0, #0
   8c9bc:	4770      	bx	lr
   8c9be:	f04f 0001 	mov.w	r0, #1
   8c9c2:	4770      	bx	lr

0008c9c4 <__aeabi_d2iz>:
   8c9c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c9c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c9cc:	d215      	bcs.n	8c9fa <__aeabi_d2iz+0x36>
   8c9ce:	d511      	bpl.n	8c9f4 <__aeabi_d2iz+0x30>
   8c9d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c9d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c9d8:	d912      	bls.n	8ca00 <__aeabi_d2iz+0x3c>
   8c9da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c9de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c9e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c9e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c9ea:	fa23 f002 	lsr.w	r0, r3, r2
   8c9ee:	bf18      	it	ne
   8c9f0:	4240      	negne	r0, r0
   8c9f2:	4770      	bx	lr
   8c9f4:	f04f 0000 	mov.w	r0, #0
   8c9f8:	4770      	bx	lr
   8c9fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c9fe:	d105      	bne.n	8ca0c <__aeabi_d2iz+0x48>
   8ca00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8ca04:	bf08      	it	eq
   8ca06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8ca0a:	4770      	bx	lr
   8ca0c:	f04f 0000 	mov.w	r0, #0
   8ca10:	4770      	bx	lr
   8ca12:	bf00      	nop
   8ca14:	50525641 	.word	0x50525641
   8ca18:	3a474f52 	.word	0x3a474f52
   8ca1c:	79615020 	.word	0x79615020
   8ca20:	64616f6c 	.word	0x64616f6c
   8ca24:	7a697320 	.word	0x7a697320
   8ca28:	203d2065 	.word	0x203d2065
   8ca2c:	202c6425 	.word	0x202c6425
   8ca30:	6f727265 	.word	0x6f727265
   8ca34:	0a3f2172 	.word	0x0a3f2172
   8ca38:	00000000 	.word	0x00000000
   8ca3c:	50525641 	.word	0x50525641
   8ca40:	3a474f52 	.word	0x3a474f52
   8ca44:	746e4520 	.word	0x746e4520
   8ca48:	49207265 	.word	0x49207265
   8ca4c:	4d205053 	.word	0x4d205053
   8ca50:	3a65646f 	.word	0x3a65646f
   8ca54:	0a782520 	.word	0x0a782520
   8ca58:	00000000 	.word	0x00000000
   8ca5c:	50525641 	.word	0x50525641
   8ca60:	3a474f52 	.word	0x3a474f52
   8ca64:	61724520 	.word	0x61724520
   8ca68:	203a6573 	.word	0x203a6573
   8ca6c:	6c796150 	.word	0x6c796150
   8ca70:	2064616f 	.word	0x2064616f
   8ca74:	657a6973 	.word	0x657a6973
   8ca78:	25203d20 	.word	0x25203d20
   8ca7c:	65202c64 	.word	0x65202c64
   8ca80:	726f7272 	.word	0x726f7272
   8ca84:	000a3f21 	.word	0x000a3f21

0008ca88 <BUILD_DATE>:
   8ca88:	20706553 32203132 00313230              Sep 21 2021.

0008ca94 <BUILD_TIME>:
   8ca94:	353a3631 34353a33 00000000 494c5743     16:53:54....CWLI
   8caa4:	415f4554 53495256 00000050 50525641     TE_AVRISP...AVRP
   8cab4:	3a474f52 64644120 73736572 25203d20     ROG: Address = %
   8cac4:	0a783230 00000000                       02x.....

0008cacc <BOS_DESC>:
   8cacc:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8cadc:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8caf8:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8cb08:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8cb18:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8cb28:	74697845 20676e69 68746977 61747320     Exiting with sta
   8cb38:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8cb48:	00000000 20706553 32203132 00313230     ....Sep 21 2021.
   8cb58:	353a3631 36353a33 00000000 70696843     16:53:56....Chip
   8cb68:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8cb78:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8cb88:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8cb98:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8cba8:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8cbb8:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8cbc8:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8cbd8:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8cbe8:	000a2e2e                                ....

0008cbec <_global_impure_ptr>:
   8cbec:	200009b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8cbfc:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cc0c:	66656463 00000000 33323130 37363534     cdef....01234567
   8cc1c:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8cc2c:	0000296c 00000030                       l)..0...

0008cc34 <blanks.7335>:
   8cc34:	20202020 20202020 20202020 20202020                     

0008cc44 <zeroes.7336>:
   8cc44:	30303030 30303030 30303030 30303030     0000000000000000

0008cc54 <blanks.7328>:
   8cc54:	20202020 20202020 20202020 20202020                     

0008cc64 <zeroes.7329>:
   8cc64:	30303030 30303030 30303030 30303030     0000000000000000
   8cc74:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8cc84:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8cc94:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8cca4:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ccb4:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8ccc4:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8ccd4:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8cce4:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8ccf4:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8cd04:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8cd14:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8cd24:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8cd34:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8cd44:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8cd54:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8cd64:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8cd74:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8cd84:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8cd94:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8cda4:	00000000                                ....

0008cda8 <__mprec_bigtens>:
   8cda8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cdb8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cdc8:	7f73bf3c 75154fdd                       <.s..O.u

0008cdd0 <__mprec_tens>:
   8cdd0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cde0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cdf0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8ce00:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ce10:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ce20:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ce30:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ce40:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ce50:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ce60:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8ce70:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ce80:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8ce90:	79d99db4 44ea7843                       ...yCx.D

0008ce98 <p05.6122>:
   8ce98:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cea8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8ceb8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8cec8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8ced8:	2520656e 25732564 00000a73              ne %d%s%s...

0008cee4 <_ctype_>:
   8cee4:	20202000 20202020 28282020 20282828     .         ((((( 
   8cef4:	20202020 20202020 20202020 20202020                     
   8cf04:	10108820 10101010 10101010 10101010      ...............
   8cf14:	04040410 04040404 10040404 10101010     ................
   8cf24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cf34:	01010101 01010101 01010101 10101010     ................
   8cf44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cf54:	02020202 02020202 02020202 10101010     ................
   8cf64:	00000020 00000000 00000000 00000000      ...............
	...

0008cfe8 <_init>:
   8cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cfea:	bf00      	nop
   8cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cfee:	bc08      	pop	{r3}
   8cff0:	469e      	mov	lr, r3
   8cff2:	4770      	bx	lr

0008cff4 <__init_array_start>:
   8cff4:	00088da5 	.word	0x00088da5

0008cff8 <__frame_dummy_init_array_entry>:
   8cff8:	000800e1                                ....

0008cffc <_fini>:
   8cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cffe:	bf00      	nop
   8d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d002:	bc08      	pop	{r3}
   8d004:	469e      	mov	lr, r3
   8d006:	4770      	bx	lr

0008d008 <__do_global_dtors_aux_fini_array_entry>:
   8d008:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b36b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x64>
20000008:	4604      	mov	r4, r0
2000000a:	461d      	mov	r5, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	68a3      	ldr	r3, [r4, #8]
2000001e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000020:	9801      	ldr	r0, [sp, #4]
20000022:	f010 0001 	ands.w	r0, r0, #1
20000026:	d1f9      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000028:	b15e      	cbz	r6, 20000042 <efc_perform_read_sequence+0x42>
2000002a:	1f2b      	subs	r3, r5, #4
2000002c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
20000030:	3e04      	subs	r6, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000032:	f5c5 2500 	rsb	r5, r5, #524288	; 0x80000
20000036:	3504      	adds	r5, #4
20000038:	58e9      	ldr	r1, [r5, r3]
2000003a:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42b3      	cmp	r3, r6
20000040:	d1fa      	bne.n	20000038 <efc_perform_read_sequence+0x38>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	68a3      	ldr	r3, [r4, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	f013 0f01 	tst.w	r3, #1
20000054:	d0f9      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000056:	6823      	ldr	r3, [r4, #0]
20000058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005c:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
20000066:	e7fa      	b.n	2000005e <efc_perform_read_sequence+0x5e>

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
}
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr

20000086 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000086:	f3bf 8f5f 	dmb	sy
2000008a:	3801      	subs	r0, #1
2000008c:	d1fb      	bne.n	20000086 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
2000008e:	4770      	bx	lr

20000090 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000090:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000094:	4a21      	ldr	r2, [pc, #132]	; (2000011c <SystemInit+0x8c>)
20000096:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000098:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000009c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a6:	6a1b      	ldr	r3, [r3, #32]
200000a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000ac:	d107      	bne.n	200000be <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ae:	4b1c      	ldr	r3, [pc, #112]	; (20000120 <SystemInit+0x90>)
200000b0:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x94>)
200000b2:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	461a      	mov	r2, r3
200000b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b8:	f013 0f01 	tst.w	r3, #1
200000bc:	d0fb      	beq.n	200000b6 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000be:	4b18      	ldr	r3, [pc, #96]	; (20000120 <SystemInit+0x90>)
200000c0:	4a19      	ldr	r2, [pc, #100]	; (20000128 <SystemInit+0x98>)
200000c2:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c4:	461a      	mov	r2, r3
200000c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000cc:	d0fb      	beq.n	200000c6 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ce:	4a14      	ldr	r2, [pc, #80]	; (20000120 <SystemInit+0x90>)
200000d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d2:	f023 0303 	bic.w	r3, r3, #3
200000d6:	f043 0301 	orr.w	r3, r3, #1
200000da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000de:	f013 0f08 	tst.w	r3, #8
200000e2:	d0fb      	beq.n	200000dc <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e4:	4b0e      	ldr	r3, [pc, #56]	; (20000120 <SystemInit+0x90>)
200000e6:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0x9c>)
200000e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ea:	461a      	mov	r2, r3
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	f013 0f02 	tst.w	r3, #2
200000f2:	d0fb      	beq.n	200000ec <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f4:	4b0a      	ldr	r3, [pc, #40]	; (20000120 <SystemInit+0x90>)
200000f6:	2211      	movs	r2, #17
200000f8:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fa:	461a      	mov	r2, r3
200000fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000fe:	f013 0f08 	tst.w	r3, #8
20000102:	d0fb      	beq.n	200000fc <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000104:	4b06      	ldr	r3, [pc, #24]	; (20000120 <SystemInit+0x90>)
20000106:	2212      	movs	r2, #18
20000108:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010a:	461a      	mov	r2, r3
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	f013 0f08 	tst.w	r3, #8
20000112:	d0fb      	beq.n	2000010c <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000114:	4b06      	ldr	r3, [pc, #24]	; (20000130 <SystemInit+0xa0>)
20000116:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa4>)
20000118:	601a      	str	r2, [r3, #0]
}
2000011a:	4770      	bx	lr
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	20000984 	.word	0x20000984
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b16      	ldr	r3, [pc, #88]	; (20000194 <system_init_flash+0x5c>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a15      	ldr	r2, [pc, #84]	; (20000198 <system_init_flash+0x60>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b13      	ldr	r3, [pc, #76]	; (2000019c <system_init_flash+0x64>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a10      	ldr	r2, [pc, #64]	; (20000198 <system_init_flash+0x60>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b0f      	ldr	r3, [pc, #60]	; (200001a0 <system_init_flash+0x68>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0a      	ldr	r2, [pc, #40]	; (20000198 <system_init_flash+0x60>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <system_init_flash+0x6c>)
2000017a:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017c:	bf94      	ite	ls
2000017e:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000182:	f44f 6380 	movhi.w	r3, #1024	; 0x400
20000186:	4a04      	ldr	r2, [pc, #16]	; (20000198 <system_init_flash+0x60>)
20000188:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000018a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018e:	6013      	str	r3, [r2, #0]
	}
}
20000190:	4770      	bx	lr
20000192:	bf00      	nop
20000194:	016e3600 	.word	0x016e3600
20000198:	400e0800 	.word	0x400e0800
2000019c:	02625a00 	.word	0x02625a00
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff

200001a8 <udi_api_cdc_comm>:
200001a8:	0008019d 000800fd 00080115 00080111     ................
200001b8:	00000000                                ....

200001bc <udi_api_cdc_data>:
200001bc:	000804dd 00080389 0008010d 00080111     ................
200001cc:	00080379                                y...

200001d0 <udc_config>:
200001d0:	200002c0 200001f0 200002c0 200002d4     ... ... ... ... 
200001e0:	200001e8 00000000                       ... ....

200001e8 <udc_config_hs>:
200001e8:	2000025c 200002e0                       \.. ... 

200001f0 <udc_config_lsfs>:
200001f0:	200001f8 200002e0                       ... ... 

200001f8 <udc_desc_fs>:
200001f8:	00620209 80000103 000409fa ffff0200     ..b.............
20000208:	050700ff 00400281 02050700 00004002     ......@......@..
20000218:	02010b08 00010202 00010409 01020201     ................
20000228:	00240500 24040110 24050202 05020106     ..$....$...$....
20000238:	02030124 03830507 09100040 02000204     $.......@.......
20000248:	0000000a 02850507 07000040 40020605     ........@......@
20000258:	00000000                                ....

2000025c <udc_desc_hs>:
2000025c:	00620209 80000103 000409fa ffff0200     ..b.............
2000026c:	050700ff 02000281 02050700 00020002     ................
2000027c:	02010b08 00010202 00010409 01020201     ................
2000028c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000029c:	02030124 03830507 09100040 02000204     $.......@.......
200002ac:	0000000a 02850507 07000200 00020605     ................
200002bc:	00000002                                ....

200002c0 <udc_device_desc>:
200002c0:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d0:	00000103                                ....

200002d4 <udc_device_qual>:
200002d4:	0200060a 40000000 00000001              .......@....

200002e0 <udi_apis>:
200002e0:	20000850 200001a8 200001bc              P.. ... ... 

200002ec <avrispmkIIfreqs>:
200002ec:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200002fc:	0007a120 0003d090 0001e848 00017882      .......H....x..
2000030c:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
2000031c:	0001148d 0001069b 0000fa00 0000ee8d     ................
2000032c:	0000e41b 0000da89 0000c99d 0000c21a     ................
2000033c:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
2000034c:	000099f1 00009586 00008d68 0000861f     ........h.......
2000035c:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
2000036c:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
2000037c:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
2000038c:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
2000039c:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003ac:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003bc:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003cc:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003dc:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003ec:	000016f7 000015e7 000014ef 000013e5     ................
200003fc:	00001306 00001219 00001142 00001071     ........B...q...
2000040c:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
2000041c:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
2000042c:	00000aae 00000a33 000009b4 00000941     ....3.......A...
2000043c:	000008d1 00000868 00000804 000007a4     ....h...........
2000044c:	0000074a 000006f3 0000069f 0000064f     J...........O...
2000045c:	00000603 000005bc 00000576 00000535     ........v...5...
2000046c:	000004f7 000004bc 00000483 0000044d     ............M...
2000047c:	00000419 000003e8 000003b9 0000038d     ................
2000048c:	00000362 0000033a 00000313 000002ee     b...:...........
2000049c:	000002cb 000002aa 0000028a 0000026b     ............k...
200004ac:	0000024e 00000233 00000218 000001ff     N...3...........
200004bc:	000001e7 000001d1 000001bb 000001a6     ................
200004cc:	00000192 00000180 0000016e 0000015d     ........n...]...
200004dc:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004ec:	00000112 00000105 000000f9 000000ee     ................
200004fc:	000000e2 000000d8 000000ce 000000c4     ................
2000050c:	000000bb 000000b2 000000aa 000000a2     ................
2000051c:	0000009a 00000093 0000008c 00000086     ................
2000052c:	00000080 0000007a 00000074 0000006f     ....z...t...o...
2000053c:	00000069 00000064 0000005f 0000005b     i...d..._...[...
2000054c:	00000057 00000053 0000004f 0000004b     W...S...O...K...
2000055c:	00000047 00000044 00000041 0000003e     G...D...A...>...
2000056c:	0000003b 00000038 00000036 00000033     ;...8...6...3...

2000057c <main_b_vendor_enable>:
2000057c:	00000001                                ....

20000580 <usart0_driver>:
20000580:	40090000 00000000 00000000 00000000     ...@............
	...
2000081c:	00000009                                ....

20000820 <xram>:
20000820:	60000000                                ...`

20000824 <ParameterTable>:
20000824:	81000180 01900001 01019100 94170192     ................
20000834:	03982101 01039e06 a40001a1               .!............

20000842 <XPROG_Param_EEPageSize>:
20000842:	                                          .

20000844 <XPROG_Param_NVMBase>:
20000844:	010001c0                                ....

20000848 <XPROG_Param_NVMCMDRegAddr>:
20000848:	                                         3

20000849 <XPROG_Param_NVMCSRRegAddr>:
20000849:	                                         2..

2000084c <defaultTimeoutTicks>:
2000084c:	000001f4                                ....

20000850 <udi_api_vendor>:
20000850:	00082ff5 00083019 00083031 00082fe9     ./...0..10.../..
20000860:	00000000                                ....

20000864 <udc_string_desc>:
20000864:	00000300 00000000 00000000 00000000     ................
	...

200008a8 <udc_string_desc_languageid>:
200008a8:	04090304                                ....

200008ac <udc_string_manufacturer_name>:
200008ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200008bc:	636e4920 0000002e                        Inc....

200008c4 <udc_string_product_name>:
200008c4:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
200008d4:	00006574                                te..

200008d8 <winusb_20_desc>:
200008d8:	0000000a 06030000 000800ae 00000002     ................
200008e8:	001400a4 49570003 4253554e 00000000     ......WINUSB....
200008f8:	00000000 00880000 00070004 0044002a     ............*.D.
20000908:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000918:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000928:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
20000938:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
20000948:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
20000958:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
20000968:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
20000978:	00390045 0000007d                        E.9.}.....

20000982 <g_interrupt_enabled>:
20000982:	                                         ..

20000984 <SystemCoreClock>:
20000984:	003d0900                                ..=.

20000988 <usb_serial_number>:
20000988:	30303030 30303030 30303030 44414544     000000000000DEAD
20000998:	46454542 00000000 00000000 00000000     BEEF............
200009a8:	00000000                                ....

200009ac <_impure_ptr>:
200009ac:	200009b0                                ... 

200009b0 <impure_data>:
200009b0:	00000000 20000c9c 20000d04 20000d6c     ....... ... l.. 
	...
20000a58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000a68:	0005deec 0000000b 00000000 00000000     ................
	...

20000dd8 <__atexit_recursive_mutex>:
20000dd8:	200026b4                                .&. 

20000ddc <__global_locale>:
20000ddc:	00000043 00000000 00000000 00000000     C...............
	...
20000dfc:	00000043 00000000 00000000 00000000     C...............
	...
20000e1c:	00000043 00000000 00000000 00000000     C...............
	...
20000e3c:	00000043 00000000 00000000 00000000     C...............
	...
20000e5c:	00000043 00000000 00000000 00000000     C...............
	...
20000e7c:	00000043 00000000 00000000 00000000     C...............
	...
20000e9c:	00000043 00000000 00000000 00000000     C...............
	...
20000ebc:	0008bd15 0008ada1 00000000 0008cee4     ................
20000ecc:	0008cd20 0008cb40 0008cb40 0008cb40      ...@...@...@...
20000edc:	0008cb40 0008cb40 0008cb40 0008cb40     @...@...@...@...
20000eec:	0008cb40 0008cb40 ffffffff ffffffff     @...@...........
20000efc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000f24:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000f48 <__malloc_av_>:
	...
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 
20000fd0:	20000fc8 20000fc8 20000fd0 20000fd0     ... ... ... ... 
20000fe0:	20000fd8 20000fd8 20000fe0 20000fe0     ... ... ... ... 
20000ff0:	20000fe8 20000fe8 20000ff0 20000ff0     ... ... ... ... 
20001000:	20000ff8 20000ff8 20001000 20001000     ... ... ... ... 
20001010:	20001008 20001008 20001010 20001010     ... ... ... ... 
20001020:	20001018 20001018 20001020 20001020     ... ...  ..  .. 
20001030:	20001028 20001028 20001030 20001030     (.. (.. 0.. 0.. 
20001040:	20001038 20001038 20001040 20001040     8.. 8.. @.. @.. 
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 
200010c0:	200010b8 200010b8 200010c0 200010c0     ... ... ... ... 
200010d0:	200010c8 200010c8 200010d0 200010d0     ... ... ... ... 
200010e0:	200010d8 200010d8 200010e0 200010e0     ... ... ... ... 
200010f0:	200010e8 200010e8 200010f0 200010f0     ... ... ... ... 
20001100:	200010f8 200010f8 20001100 20001100     ... ... ... ... 
20001110:	20001108 20001108 20001110 20001110     ... ... ... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 

20001350 <__malloc_sbrk_base>:
20001350:	ffffffff                                ....

20001354 <__malloc_trim_threshold>:
20001354:	00020000                                ....
