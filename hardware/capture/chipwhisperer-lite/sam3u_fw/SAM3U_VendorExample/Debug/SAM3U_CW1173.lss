
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ea84  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ea84  0008ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c8  20000000  0008ea8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001d6c  200010c8  0008fb54  000210c8  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY
  6 .comment      000000a5  00000000  00000000  000210f1  2**0
                  CONTENTS, READONLY
  7 .debug_info   000436d0  00000000  00000000  00021196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000964f  00000000  00000000  00064866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000f618  00000000  00000000  0006deb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001700  00000000  00000000  0007d4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00002808  00000000  00000000  0007ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0002278a  00000000  00000000  000813d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00031a02  00000000  00000000  000a3b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000626a6  00000000  00000000  000d5561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004e20  00000000  00000000  00137c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 5d 6f 08 00 5b 6f 08 00 5b 6f 08 00     . . ]o..[o..[o..
   80010:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 00 00 00 00     [o..[o..[o......
	...
   8002c:	5b 6f 08 00 5b 6f 08 00 00 00 00 00 5b 6f 08 00     [o..[o......[o..
   8003c:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 5b 6f 08 00     [o..[o..[o..[o..
   8004c:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 5b 6f 08 00     [o..[o..[o..[o..
   8005c:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 d1 53 08 00     [o..[o..[o...S..
   8006c:	e5 53 08 00 5b 6f 08 00 c9 3a 08 00 e9 3a 08 00     .S..[o...:...:..
   8007c:	09 3b 08 00 5b 6f 08 00 5b 6f 08 00 5b 6f 08 00     .;..[o..[o..[o..
   8008c:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 fd 35 08 00     [o..[o..[o...5..
   8009c:	5b 6f 08 00 5b 6f 08 00 5b 6f 08 00 5b 6f 08 00     [o..[o..[o..[o..
   800ac:	5b 6f 08 00 5b 6f 08 00 99 5b 08 00 5b 6f 08 00     [o..[o...[..[o..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c8 	.word	0x200010c8
   800d8:	00000000 	.word	0x00000000
   800dc:	0008ea8c 	.word	0x0008ea8c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200010cc 	.word	0x200010cc
   800f8:	0008ea8c 	.word	0x0008ea8c

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	200010ef 	.word	0x200010ef

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	20002df4 	.word	0x20002df4
   80194:	200010e8 	.word	0x200010e8
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	200010ef 	.word	0x200010ef
   801ec:	20001504 	.word	0x20001504
   801f0:	2000191c 	.word	0x2000191c
   801f4:	200010e8 	.word	0x200010e8
   801f8:	00083421 	.word	0x00083421
   801fc:	00083381 	.word	0x00083381

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001918 	.word	0x20001918
   80310:	0008633d 	.word	0x0008633d
   80314:	20001914 	.word	0x20001914
   80318:	00086395 	.word	0x00086395
   8031c:	200006ee 	.word	0x200006ee
   80320:	20001910 	.word	0x20001910
   80324:	2000190c 	.word	0x2000190c
   80328:	200010e4 	.word	0x200010e4
   8032c:	20001508 	.word	0x20001508
   80330:	00080341 	.word	0x00080341
   80334:	2000150c 	.word	0x2000150c
   80338:	000865f9 	.word	0x000865f9
   8033c:	00086385 	.word	0x00086385

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001910 	.word	0x20001910
   80368:	2000190c 	.word	0x2000190c
   8036c:	20001508 	.word	0x20001508
   80370:	20001918 	.word	0x20001918
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	200010f0 	.word	0x200010f0
   803a8:	00083391 	.word	0x00083391
   803ac:	200010e6 	.word	0x200010e6

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	200010e8 	.word	0x200010e8
   803c0:	00083421 	.word	0x00083421

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	200006ee 	.word	0x200006ee
   80400:	200014fc 	.word	0x200014fc
   80404:	200014f8 	.word	0x200014f8
   80408:	200014f4 	.word	0x200014f4

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	200006ee 	.word	0x200006ee
   804b8:	200014f8 	.word	0x200014f8
   804bc:	20001500 	.word	0x20001500
   804c0:	200014fc 	.word	0x200014fc
   804c4:	200014f4 	.word	0x200014f4
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	200010f4 	.word	0x200010f4
   804d4:	000865f9 	.word	0x000865f9
   804d8:	0008339d 	.word	0x0008339d

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	200010f0 	.word	0x200010f0
   8053c:	20001918 	.word	0x20001918
   80540:	20001508 	.word	0x20001508
   80544:	20001910 	.word	0x20001910
   80548:	2000190c 	.word	0x2000190c
   8054c:	20001914 	.word	0x20001914
   80550:	00080201 	.word	0x00080201
   80554:	20001500 	.word	0x20001500
   80558:	200014f8 	.word	0x200014f8
   8055c:	200014f4 	.word	0x200014f4
   80560:	200014fc 	.word	0x200014fc
   80564:	00080421 	.word	0x00080421
   80568:	200010e6 	.word	0x200010e6

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	200014f8 	.word	0x200014f8
   805b4:	200014f4 	.word	0x200014f4
   805b8:	20001500 	.word	0x20001500
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	200010f4 	.word	0x200010f4
   805c8:	000865f9 	.word	0x000865f9

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	200006ee 	.word	0x200006ee
   80660:	200014fc 	.word	0x200014fc
   80664:	200010e6 	.word	0x200010e6
   80668:	200014f4 	.word	0x200014f4
   8066c:	200010f4 	.word	0x200010f4
   80670:	000878dd 	.word	0x000878dd
   80674:	00080421 	.word	0x00080421
   80678:	200014f8 	.word	0x200014f8

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	200006ee 	.word	0x200006ee
   806e0:	20001910 	.word	0x20001910
   806e4:	2000190c 	.word	0x2000190c
   806e8:	20001918 	.word	0x20001918
   806ec:	20001508 	.word	0x20001508

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	200010e8 	.word	0x200010e8
   80778:	000806f1 	.word	0x000806f1
   8077c:	200006ee 	.word	0x200006ee
   80780:	2000190c 	.word	0x2000190c
   80784:	2000150c 	.word	0x2000150c
   80788:	200010e6 	.word	0x200010e6
   8078c:	20001910 	.word	0x20001910

00080790 <readFabricationZone>:
*   \brief  Read the fabrication zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readFabricationZone(uint8_t* buffer)
{
   80790:	b510      	push	{r4, lr}
   80792:	4604      	mov	r4, r0
    readSMC(2, 0, buffer);
   80794:	4602      	mov	r2, r0
   80796:	2100      	movs	r1, #0
   80798:	2002      	movs	r0, #2
   8079a:	4b02      	ldr	r3, [pc, #8]	; (807a4 <readFabricationZone+0x14>)
   8079c:	4798      	blx	r3
    return buffer;
}
   8079e:	4620      	mov	r0, r4
   807a0:	bd10      	pop	{r4, pc}
   807a2:	bf00      	nop
   807a4:	00080e5d 	.word	0x00080e5d

000807a8 <writeIssuerZone>:
/*! \fn     writeIssuerZone(uint8_t* buffer)
*   \brief  Write in the issuer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (8 bytes required)
*/
void writeIssuerZone(uint8_t* buffer)
{
   807a8:	b508      	push	{r3, lr}
   807aa:	4602      	mov	r2, r0
    writeSMC(16, 64, buffer);
   807ac:	2140      	movs	r1, #64	; 0x40
   807ae:	2010      	movs	r0, #16
   807b0:	4b01      	ldr	r3, [pc, #4]	; (807b8 <writeIssuerZone+0x10>)
   807b2:	4798      	blx	r3
}
   807b4:	bd08      	pop	{r3, pc}
   807b6:	bf00      	nop
   807b8:	00080d8d 	.word	0x00080d8d

000807bc <readSecurityCodeAttemptsCounters>:
*   \brief  Read the number of code attempts left (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readSecurityCodeAttemptsCounters(uint8_t* buffer)
{
   807bc:	b510      	push	{r4, lr}
   807be:	4604      	mov	r4, r0
    readSMC(14, 12, buffer);
   807c0:	4602      	mov	r2, r0
   807c2:	210c      	movs	r1, #12
   807c4:	200e      	movs	r0, #14
   807c6:	4b02      	ldr	r3, [pc, #8]	; (807d0 <readSecurityCodeAttemptsCounters+0x14>)
   807c8:	4798      	blx	r3
    return buffer;
}
   807ca:	4620      	mov	r0, r4
   807cc:	bd10      	pop	{r4, pc}
   807ce:	bf00      	nop
   807d0:	00080e5d 	.word	0x00080e5d

000807d4 <readMemoryTestZone>:
*   \brief  Read the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readMemoryTestZone(uint8_t* buffer)
{
   807d4:	b510      	push	{r4, lr}
   807d6:	4604      	mov	r4, r0
    readSMC(178, 176, buffer);
   807d8:	4602      	mov	r2, r0
   807da:	21b0      	movs	r1, #176	; 0xb0
   807dc:	20b2      	movs	r0, #178	; 0xb2
   807de:	4b02      	ldr	r3, [pc, #8]	; (807e8 <readMemoryTestZone+0x14>)
   807e0:	4798      	blx	r3
    return buffer;
}
   807e2:	4620      	mov	r0, r4
   807e4:	bd10      	pop	{r4, pc}
   807e6:	bf00      	nop
   807e8:	00080e5d 	.word	0x00080e5d

000807ec <writeMemoryTestZone>:
/*! \fn     writeMemoryTestZone(uint8_t* buffer)
*   \brief  Write in the Test zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeMemoryTestZone(uint8_t* buffer)
{
   807ec:	b508      	push	{r3, lr}
   807ee:	4602      	mov	r2, r0
    writeSMC(1408, 16, buffer);
   807f0:	2110      	movs	r1, #16
   807f2:	f44f 60b0 	mov.w	r0, #1408	; 0x580
   807f6:	4b01      	ldr	r3, [pc, #4]	; (807fc <writeMemoryTestZone+0x10>)
   807f8:	4798      	blx	r3
}
   807fa:	bd08      	pop	{r3, pc}
   807fc:	00080d8d 	.word	0x00080d8d

00080800 <readManufacturerZone>:
*   \brief  Read the manufacturer zone (security mode 1&2)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*   \return The provided pointer
*/
uint8_t* readManufacturerZone(uint8_t* buffer)
{
   80800:	b510      	push	{r4, lr}
   80802:	4604      	mov	r4, r0
    readSMC(180, 178, buffer);
   80804:	4602      	mov	r2, r0
   80806:	21b2      	movs	r1, #178	; 0xb2
   80808:	20b4      	movs	r0, #180	; 0xb4
   8080a:	4b02      	ldr	r3, [pc, #8]	; (80814 <readManufacturerZone+0x14>)
   8080c:	4798      	blx	r3
    return buffer;
}
   8080e:	4620      	mov	r0, r4
   80810:	bd10      	pop	{r4, pc}
   80812:	bf00      	nop
   80814:	00080e5d 	.word	0x00080e5d

00080818 <writeManufacturerZone>:
/*! \fn     writeManufacturerZone(uint8_t* buffer)
*   \brief  Write in the manufacturer zone (security mode 1 - Authenticated!)
*   \param  buffer  Pointer to a buffer (2 bytes required)
*/
void writeManufacturerZone(uint8_t* buffer)
{
   80818:	b508      	push	{r3, lr}
   8081a:	4602      	mov	r2, r0
    writeSMC(1424, 16, buffer);
   8081c:	2110      	movs	r1, #16
   8081e:	f44f 60b2 	mov.w	r0, #1424	; 0x590
   80822:	4b01      	ldr	r3, [pc, #4]	; (80828 <writeManufacturerZone+0x10>)
   80824:	4798      	blx	r3
}
   80826:	bd08      	pop	{r3, pc}
   80828:	00080d8d 	.word	0x00080d8d

0008082c <writeManufacturerFuse>:

/*! \fn     writeManufacturerFuse(void)
*   \brief  Write manufacturer fuse, controlling access to the MFZ
*/
void writeManufacturerFuse(void)
{
   8082c:	b508      	push	{r3, lr}
    blowFuse(MAN_FUSE);
   8082e:	2000      	movs	r0, #0
   80830:	4b01      	ldr	r3, [pc, #4]	; (80838 <writeManufacturerFuse+0xc>)
   80832:	4798      	blx	r3
}
   80834:	bd08      	pop	{r3, pc}
   80836:	bf00      	nop
   80838:	00080ba5 	.word	0x00080ba5

0008083c <write_issuers_fuse>:

/*! \fn     write_issuers_fuse(void)
*   \brief  Write issuers fuse, setting the AT88SC102 into Security Mode 2, we need to be authenticated here
*/
void write_issuers_fuse(void)
{
   8083c:	b508      	push	{r3, lr}
    blowFuse(ISSUER_FUSE);
   8083e:	2002      	movs	r0, #2
   80840:	4b01      	ldr	r3, [pc, #4]	; (80848 <write_issuers_fuse+0xc>)
   80842:	4798      	blx	r3
}
   80844:	bd08      	pop	{r3, pc}
   80846:	bf00      	nop
   80848:	00080ba5 	.word	0x00080ba5

0008084c <write_ec2en_fuse>:

/*! \fn     write_ec2en_fuse(void)
*   \brief  Write ec2en fuse, to be done before blowing issuer fuse
*/
void write_ec2en_fuse(void)
{
   8084c:	b508      	push	{r3, lr}
    blowFuse(EC2EN_FUSE);
   8084e:	2001      	movs	r0, #1
   80850:	4b01      	ldr	r3, [pc, #4]	; (80858 <write_ec2en_fuse+0xc>)
   80852:	4798      	blx	r3
}
   80854:	bd08      	pop	{r3, pc}
   80856:	bf00      	nop
   80858:	00080ba5 	.word	0x00080ba5

0008085c <checkSecurityMode2>:
/*! \fn     checkSecurityMode2(void)
*   \brief  Check that the smartcard is in mode two by trying to write his manufacturer zone
*   \return Success status
*/
RET_TYPE checkSecurityMode2(void)
{
   8085c:	b510      	push	{r4, lr}
   8085e:	b082      	sub	sp, #8
    uint16_t manZoneRead, temp_uint;
    
    // Read manufacturer zone, set temp_uint to its opposite
    readManufacturerZone((uint8_t*)&manZoneRead);
   80860:	f10d 0006 	add.w	r0, sp, #6
   80864:	4c0b      	ldr	r4, [pc, #44]	; (80894 <checkSecurityMode2+0x38>)
   80866:	47a0      	blx	r4
    temp_uint = ~manZoneRead;
   80868:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8086c:	43db      	mvns	r3, r3
   8086e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    // Perform test write
    writeManufacturerZone((uint8_t*)&temp_uint);
   80872:	a801      	add	r0, sp, #4
   80874:	4b08      	ldr	r3, [pc, #32]	; (80898 <checkSecurityMode2+0x3c>)
   80876:	4798      	blx	r3
    readManufacturerZone((uint8_t*)&manZoneRead);
   80878:	f10d 0006 	add.w	r0, sp, #6
   8087c:	47a0      	blx	r4
    
    if (temp_uint != manZoneRead)
   8087e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   80882:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    } 
    else
    {
        return RETURN_NOK;
    }
}
   80886:	4298      	cmp	r0, r3
   80888:	f04f 30ff 	mov.w	r0, #4294967295
   8088c:	bf18      	it	ne
   8088e:	2000      	movne	r0, #0
   80890:	b002      	add	sp, #8
   80892:	bd10      	pop	{r4, pc}
   80894:	00080801 	.word	0x00080801
   80898:	00080819 	.word	0x00080819

0008089c <writeSecurityCode>:
/*! \fn     writeSecurityCode(uint16_t* code)
*   \brief  Write a new security code (security mode 1&2 - Authenticated!)
*   \param  code  The pin code
*/
void writeSecurityCode(volatile uint16_t* code)
{
   8089c:	b510      	push	{r4, lr}
   8089e:	4604      	mov	r4, r0
    *code = swap16(*code);
   808a0:	8803      	ldrh	r3, [r0, #0]
   808a2:	8802      	ldrh	r2, [r0, #0]
   808a4:	b292      	uxth	r2, r2
   808a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ae:	b29b      	uxth	r3, r3
   808b0:	8003      	strh	r3, [r0, #0]
    writeSMC(80, 16, (uint8_t*)code);
   808b2:	4602      	mov	r2, r0
   808b4:	2110      	movs	r1, #16
   808b6:	2050      	movs	r0, #80	; 0x50
   808b8:	4b05      	ldr	r3, [pc, #20]	; (808d0 <writeSecurityCode+0x34>)
   808ba:	4798      	blx	r3
    *code = swap16(*code);
   808bc:	8823      	ldrh	r3, [r4, #0]
   808be:	8822      	ldrh	r2, [r4, #0]
   808c0:	b292      	uxth	r2, r2
   808c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   808c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   808ca:	b29b      	uxth	r3, r3
   808cc:	8023      	strh	r3, [r4, #0]
}
   808ce:	bd10      	pop	{r4, pc}
   808d0:	00080d8d 	.word	0x00080d8d

000808d4 <resetBlankCard>:
{
   808d4:	b500      	push	{lr}
   808d6:	b083      	sub	sp, #12
    uint16_t default_pin = SMARTCARD_FACTORY_PIN;
   808d8:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   808dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint8_t data_buffer[2] = {0xFF, 0xFF};
   808e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   808e4:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeSMC(1441, 1, data_buffer);
   808e8:	aa01      	add	r2, sp, #4
   808ea:	2101      	movs	r1, #1
   808ec:	f240 50a1 	movw	r0, #1441	; 0x5a1
   808f0:	4b04      	ldr	r3, [pc, #16]	; (80904 <resetBlankCard+0x30>)
   808f2:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   808f4:	f10d 0006 	add.w	r0, sp, #6
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <resetBlankCard+0x34>)
   808fa:	4798      	blx	r3
}
   808fc:	b003      	add	sp, #12
   808fe:	f85d fb04 	ldr.w	pc, [sp], #4
   80902:	bf00      	nop
   80904:	00080d8d 	.word	0x00080d8d
   80908:	0008089d 	.word	0x0008089d

0008090c <setAuthenticatedReadWriteAccessToZone1and2>:

/*! \fn     setAuthenticatedReadWriteAccessToZone1and2(void)
*   \brief  Function called to only allow reads and writes to the application zone 1 & 2 when authenticated
*/
void setAuthenticatedReadWriteAccessToZone1and2(void)
{
   8090c:	b510      	push	{r4, lr}
   8090e:	b082      	sub	sp, #8
    uint8_t temp_buffer[2] = {0x80, 0x00};
   80910:	2380      	movs	r3, #128	; 0x80
   80912:	f8ad 3004 	strh.w	r3, [sp, #4]
    // Set P1 to 1 to allow write, remove R1 to prevent non authenticated reads
    writeSMC(176, 16, temp_buffer);
   80916:	aa01      	add	r2, sp, #4
   80918:	2110      	movs	r1, #16
   8091a:	20b0      	movs	r0, #176	; 0xb0
   8091c:	4c04      	ldr	r4, [pc, #16]	; (80930 <setAuthenticatedReadWriteAccessToZone1and2+0x24>)
   8091e:	47a0      	blx	r4
    // Set P2 to 1 to allow write, remove R2 to prevent non authenticated reads
    writeSMC(736, 16, temp_buffer);
   80920:	aa01      	add	r2, sp, #4
   80922:	2110      	movs	r1, #16
   80924:	f44f 7038 	mov.w	r0, #736	; 0x2e0
   80928:	47a0      	blx	r4
}
   8092a:	b002      	add	sp, #8
   8092c:	bd10      	pop	{r4, pc}
   8092e:	bf00      	nop
   80930:	00080d8d 	.word	0x00080d8d

00080934 <transformBlankCardIntoMooltipass>:
{
   80934:	b510      	push	{r4, lr}
   80936:	b086      	sub	sp, #24
    uint16_t default_pin = SMARTCARD_DEFAULT_PIN;
   80938:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
   8093c:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (checkSecurityMode2() == RETURN_OK)
   80940:	4b13      	ldr	r3, [pc, #76]	; (80990 <transformBlankCardIntoMooltipass+0x5c>)
   80942:	4798      	blx	r3
   80944:	b300      	cbz	r0, 80988 <transformBlankCardIntoMooltipass+0x54>
    resetBlankCard();
   80946:	4b13      	ldr	r3, [pc, #76]	; (80994 <transformBlankCardIntoMooltipass+0x60>)
   80948:	4798      	blx	r3
    writeSecurityCode(&default_pin);
   8094a:	f10d 0002 	add.w	r0, sp, #2
   8094e:	4b12      	ldr	r3, [pc, #72]	; (80998 <transformBlankCardIntoMooltipass+0x64>)
   80950:	4798      	blx	r3
    strcpy((char*)temp_buffer, "limpkin");
   80952:	ac01      	add	r4, sp, #4
   80954:	4b11      	ldr	r3, [pc, #68]	; (8099c <transformBlankCardIntoMooltipass+0x68>)
   80956:	e893 0003 	ldmia.w	r3, {r0, r1}
   8095a:	e884 0003 	stmia.w	r4, {r0, r1}
    writeIssuerZone(temp_buffer);
   8095e:	4620      	mov	r0, r4
   80960:	4b0f      	ldr	r3, [pc, #60]	; (809a0 <transformBlankCardIntoMooltipass+0x6c>)
   80962:	4798      	blx	r3
    *temp_buf16 = swap16(2014);
   80964:	f64d 6307 	movw	r3, #56839	; 0xde07
   80968:	f8ad 3004 	strh.w	r3, [sp, #4]
    writeManufacturerZone(temp_buffer);
   8096c:	4620      	mov	r0, r4
   8096e:	4b0d      	ldr	r3, [pc, #52]	; (809a4 <transformBlankCardIntoMooltipass+0x70>)
   80970:	4798      	blx	r3
    setAuthenticatedReadWriteAccessToZone1and2();
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <transformBlankCardIntoMooltipass+0x74>)
   80974:	4798      	blx	r3
    writeManufacturerFuse();
   80976:	4b0d      	ldr	r3, [pc, #52]	; (809ac <transformBlankCardIntoMooltipass+0x78>)
   80978:	4798      	blx	r3
    write_ec2en_fuse();
   8097a:	4b0d      	ldr	r3, [pc, #52]	; (809b0 <transformBlankCardIntoMooltipass+0x7c>)
   8097c:	4798      	blx	r3
    write_issuers_fuse();
   8097e:	4b0d      	ldr	r3, [pc, #52]	; (809b4 <transformBlankCardIntoMooltipass+0x80>)
   80980:	4798      	blx	r3
    return RETURN_OK;
   80982:	2000      	movs	r0, #0
}
   80984:	b006      	add	sp, #24
   80986:	bd10      	pop	{r4, pc}
        return RETURN_NOK;
   80988:	f04f 30ff 	mov.w	r0, #4294967295
   8098c:	e7fa      	b.n	80984 <transformBlankCardIntoMooltipass+0x50>
   8098e:	bf00      	nop
   80990:	0008085d 	.word	0x0008085d
   80994:	000808d5 	.word	0x000808d5
   80998:	0008089d 	.word	0x0008089d
   8099c:	0008e3d8 	.word	0x0008e3d8
   809a0:	000807a9 	.word	0x000807a9
   809a4:	00080819 	.word	0x00080819
   809a8:	0008090d 	.word	0x0008090d
   809ac:	0008082d 	.word	0x0008082d
   809b0:	0008084d 	.word	0x0008084d
   809b4:	0008083d 	.word	0x0008083d

000809b8 <getNumberOfSecurityCodeTriesLeft>:
/*! \fn     getNumberOfSecurityCodeTriesLeft(void)
*   \brief  Get the number of security code tries left
*   \return Number of tries left
*/
uint8_t getNumberOfSecurityCodeTriesLeft(void)
{
   809b8:	b500      	push	{lr}
   809ba:	b083      	sub	sp, #12
    uint8_t temp_buffer[2];
    uint8_t return_val = 0;
    uint8_t i;

    readSecurityCodeAttemptsCounters(temp_buffer);
   809bc:	a801      	add	r0, sp, #4
   809be:	4b09      	ldr	r3, [pc, #36]	; (809e4 <getNumberOfSecurityCodeTriesLeft+0x2c>)
   809c0:	4798      	blx	r3
    for(i = 0; i < 4; i++)
    {
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   809c6:	2304      	movs	r3, #4
    uint8_t return_val = 0;
   809c8:	2000      	movs	r0, #0
        if ((temp_buffer[0] >> (4+i)) & 0x01)
   809ca:	fa41 f203 	asr.w	r2, r1, r3
   809ce:	f012 0f01 	tst.w	r2, #1
        {
            return_val++;
   809d2:	bf1c      	itt	ne
   809d4:	3001      	addne	r0, #1
   809d6:	b2c0      	uxtbne	r0, r0
    for(i = 0; i < 4; i++)
   809d8:	3301      	adds	r3, #1
   809da:	2b08      	cmp	r3, #8
   809dc:	d1f5      	bne.n	809ca <getNumberOfSecurityCodeTriesLeft+0x12>
        }
    }

    return return_val;
}
   809de:	b003      	add	sp, #12
   809e0:	f85d fb04 	ldr.w	pc, [sp], #4
   809e4:	000807bd 	.word	0x000807bd

000809e8 <smartcardHPulseDelay>:

/*! \fn     smartcardHPulseDelay(void)
*   \brief  2us half pulse delay, specified by datasheet (min 3.3us/2)
*/
void smartcardHPulseDelay(void)
{
   809e8:	b508      	push	{r3, lr}
    delay_us(2);
   809ea:	200e      	movs	r0, #14
   809ec:	4b01      	ldr	r3, [pc, #4]	; (809f4 <smartcardHPulseDelay+0xc>)
   809ee:	4798      	blx	r3
}
   809f0:	bd08      	pop	{r3, pc}
   809f2:	bf00      	nop
   809f4:	20000089 	.word	0x20000089

000809f8 <smartcardPowerDelay>:

/*! \fn     smartcardPowerDelay(void)
*   \brief  Delay to let the card come online/offline
*/
void smartcardPowerDelay(void)
{
   809f8:	b508      	push	{r3, lr}
    delay_ms(130);
   809fa:	4802      	ldr	r0, [pc, #8]	; (80a04 <smartcardPowerDelay+0xc>)
   809fc:	4b02      	ldr	r3, [pc, #8]	; (80a08 <smartcardPowerDelay+0x10>)
   809fe:	4798      	blx	r3
}
   80a00:	bd08      	pop	{r3, pc}
   80a02:	bf00      	nop
   80a04:	000d9a25 	.word	0x000d9a25
   80a08:	20000089 	.word	0x20000089

00080a0c <clockPulseSMC>:

/*! \fn     clockPulseSMC(void)
*   \brief  Send a 4us H->L clock pulse (datasheet: min 3.3us)
*/
void clockPulseSMC(void)
{
   80a0c:	b570      	push	{r4, r5, r6, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a0e:	4d04      	ldr	r5, [pc, #16]	; (80a20 <clockPulseSMC+0x14>)
   80a10:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a14:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a16:	4c03      	ldr	r4, [pc, #12]	; (80a24 <clockPulseSMC+0x18>)
   80a18:	47a0      	blx	r4
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a1a:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a1c:	47a0      	blx	r4
}
   80a1e:	bd70      	pop	{r4, r5, r6, pc}
   80a20:	400e0c00 	.word	0x400e0c00
   80a24:	000809e9 	.word	0x000809e9

00080a28 <invertedClockPulseSMC>:

/*! \fn     invertedClockPulseSMC(void)
*   \brief  Send a 4us L->H clock pulse (datasheet: min 3.3us)
*/
void invertedClockPulseSMC(void)
{
   80a28:	b570      	push	{r4, r5, r6, lr}
   80a2a:	4d04      	ldr	r5, [pc, #16]	; (80a3c <invertedClockPulseSMC+0x14>)
   80a2c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a30:	636e      	str	r6, [r5, #52]	; 0x34
	scard_sck_low();
	smartcardHPulseDelay();
   80a32:	4c03      	ldr	r4, [pc, #12]	; (80a40 <invertedClockPulseSMC+0x18>)
   80a34:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a36:	632e      	str	r6, [r5, #48]	; 0x30
	scard_sck_high();
	smartcardHPulseDelay();
   80a38:	47a0      	blx	r4
}
   80a3a:	bd70      	pop	{r4, r5, r6, pc}
   80a3c:	400e0c00 	.word	0x400e0c00
   80a40:	000809e9 	.word	0x000809e9

00080a44 <clearPgmRstSignals>:

/*! \fn     clearPgmRstSignals(void)
*   \brief  Clear PGM / RST signal for normal operation mode
*/
void clearPgmRstSignals(void)
{
   80a44:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a46:	4b04      	ldr	r3, [pc, #16]	; (80a58 <clearPgmRstSignals+0x14>)
   80a48:	2220      	movs	r2, #32
   80a4a:	635a      	str	r2, [r3, #52]	; 0x34
   80a4c:	2208      	movs	r2, #8
   80a4e:	635a      	str	r2, [r3, #52]	; 0x34
	scard_pgm_low();
	scard_rst_low();
    smartcardHPulseDelay();
   80a50:	4c02      	ldr	r4, [pc, #8]	; (80a5c <clearPgmRstSignals+0x18>)
   80a52:	47a0      	blx	r4
	smartcardHPulseDelay();
   80a54:	47a0      	blx	r4
}
   80a56:	bd10      	pop	{r4, pc}
   80a58:	400e0c00 	.word	0x400e0c00
   80a5c:	000809e9 	.word	0x000809e9

00080a60 <setPgmRstSignals>:

/*! \fn     setPgmRstSignals(void)
*   \brief  Set PGM / RST signal for standby mode
*/
void setPgmRstSignals(void)
{
   80a60:	b508      	push	{r3, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a62:	4b04      	ldr	r3, [pc, #16]	; (80a74 <setPgmRstSignals+0x14>)
   80a64:	2208      	movs	r2, #8
   80a66:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a68:	2220      	movs	r2, #32
   80a6a:	635a      	str	r2, [r3, #52]	; 0x34
	scard_rst_high();
	scard_pgm_low();
    smartcardHPulseDelay();
   80a6c:	4b02      	ldr	r3, [pc, #8]	; (80a78 <setPgmRstSignals+0x18>)
   80a6e:	4798      	blx	r3
}
   80a70:	bd08      	pop	{r3, pc}
   80a72:	bf00      	nop
   80a74:	400e0c00 	.word	0x400e0c00
   80a78:	000809e9 	.word	0x000809e9

00080a7c <performLowLevelWriteNErase>:
/*! \fn     performLowLevelWriteNErase(uint8_t is_write)
*   \brief  Perform a write or erase operation on the smart card
*   \param  is_write    Boolean to indicate if it is a write
*/
void performLowLevelWriteNErase(uint8_t is_write)
{
   80a7c:	b570      	push	{r4, r5, r6, lr}
   80a7e:	4604      	mov	r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80a80:	4b11      	ldr	r3, [pc, #68]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a82:	2220      	movs	r2, #32
   80a84:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set programming control signal */
	scard_pgm_high();
    smartcardHPulseDelay();
   80a86:	4b11      	ldr	r3, [pc, #68]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a88:	4798      	blx	r3

    /* Set data according to write / erase */
    if (is_write != FALSE)
   80a8a:	b1bc      	cbz	r4, 80abc <performLowLevelWriteNErase+0x40>
   80a8c:	4b0e      	ldr	r3, [pc, #56]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80a92:	631a      	str	r2, [r3, #48]	; 0x30
    }
    else
    {
		scard_io_low();
    }
    smartcardHPulseDelay();
   80a94:	4c0d      	ldr	r4, [pc, #52]	; (80acc <performLowLevelWriteNErase+0x50>)
   80a96:	47a0      	blx	r4
   80a98:	4d0b      	ldr	r5, [pc, #44]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80a9a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   80a9e:	632e      	str	r6, [r5, #48]	; 0x30

    /* Set clock */
	scard_sck_high();
    smartcardHPulseDelay();
   80aa0:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80aa2:	2320      	movs	r3, #32
   80aa4:	636b      	str	r3, [r5, #52]	; 0x34
    delay_ms(4);
   80aa6:	f646 3025 	movw	r0, #27429	; 0x6b25
   80aaa:	4b09      	ldr	r3, [pc, #36]	; (80ad0 <performLowLevelWriteNErase+0x54>)
   80aac:	4798      	blx	r3
   80aae:	636e      	str	r6, [r5, #52]	; 0x34
    scard_pgm_low();
    smartcardTchpDelay();

    /* Release clock */
    scard_sck_low();
    smartcardHPulseDelay();
   80ab0:	47a0      	blx	r4
   80ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ab6:	636b      	str	r3, [r5, #52]	; 0x34

    /* Release data */
    scard_io_low();
    smartcardHPulseDelay();
   80ab8:	47a0      	blx	r4
}
   80aba:	bd70      	pop	{r4, r5, r6, pc}
   80abc:	4b02      	ldr	r3, [pc, #8]	; (80ac8 <performLowLevelWriteNErase+0x4c>)
   80abe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80ac2:	635a      	str	r2, [r3, #52]	; 0x34
   80ac4:	e7e6      	b.n	80a94 <performLowLevelWriteNErase+0x18>
   80ac6:	bf00      	nop
   80ac8:	400e0c00 	.word	0x400e0c00
   80acc:	000809e9 	.word	0x000809e9
   80ad0:	20000089 	.word	0x20000089

00080ad4 <setSPIModeSMC>:

/*! \fn     setSPIModeSMC(void)
*   \brief  Activate SPI controller for the SMC
*/
void setSPIModeSMC(void)
{
   80ad4:	b530      	push	{r4, r5, lr}
   80ad6:	b085      	sub	sp, #20
	usart_spi_opt_t opts;
	
	opts.baudrate = 125000;
   80ad8:	4b12      	ldr	r3, [pc, #72]	; (80b24 <setSPIModeSMC+0x50>)
   80ada:	9300      	str	r3, [sp, #0]
	opts.char_length = US_MR_CHRL_8_BIT;
   80adc:	23c0      	movs	r3, #192	; 0xc0
   80ade:	9301      	str	r3, [sp, #4]
	opts.channel_mode = US_MR_CHMODE_NORMAL;
   80ae0:	2300      	movs	r3, #0
   80ae2:	9303      	str	r3, [sp, #12]
	opts.spi_mode = SPI_MODE_0;
   80ae4:	9302      	str	r3, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80ae6:	200f      	movs	r0, #15
   80ae8:	4b0f      	ldr	r3, [pc, #60]	; (80b28 <setSPIModeSMC+0x54>)
   80aea:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	usart_init_spi_master(SCARD_USART, &opts ,sysclk_get_cpu_hz());
   80aec:	4c0f      	ldr	r4, [pc, #60]	; (80b2c <setSPIModeSMC+0x58>)
   80aee:	4a10      	ldr	r2, [pc, #64]	; (80b30 <setSPIModeSMC+0x5c>)
   80af0:	4669      	mov	r1, sp
   80af2:	4620      	mov	r0, r4
   80af4:	4b0f      	ldr	r3, [pc, #60]	; (80b34 <setSPIModeSMC+0x60>)
   80af6:	4798      	blx	r3
	gpio_configure_pin(SCARD_IOTX_IDX, PIO_PERIPH_A);
   80af8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80afc:	2016      	movs	r0, #22
   80afe:	4d0e      	ldr	r5, [pc, #56]	; (80b38 <setSPIModeSMC+0x64>)
   80b00:	47a8      	blx	r5
	gpio_configure_pin(SCARD_IORX_IDX, PIO_PERIPH_A);
   80b02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b06:	2017      	movs	r0, #23
   80b08:	47a8      	blx	r5
	gpio_configure_pin(SCARD_SCK_IDX, SCK_PERIPH);
   80b0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b0e:	2019      	movs	r0, #25
   80b10:	47a8      	blx	r5
	
	usart_enable_rx(SCARD_USART);
   80b12:	4620      	mov	r0, r4
   80b14:	4b09      	ldr	r3, [pc, #36]	; (80b3c <setSPIModeSMC+0x68>)
   80b16:	4798      	blx	r3
	usart_enable_tx(SCARD_USART);
   80b18:	4620      	mov	r0, r4
   80b1a:	4b09      	ldr	r3, [pc, #36]	; (80b40 <setSPIModeSMC+0x6c>)
   80b1c:	4798      	blx	r3
	
}
   80b1e:	b005      	add	sp, #20
   80b20:	bd30      	pop	{r4, r5, pc}
   80b22:	bf00      	nop
   80b24:	0001e848 	.word	0x0001e848
   80b28:	00085559 	.word	0x00085559
   80b2c:	40098000 	.word	0x40098000
   80b30:	05b8d800 	.word	0x05b8d800
   80b34:	00086d01 	.word	0x00086d01
   80b38:	00085215 	.word	0x00085215
   80b3c:	00086e75 	.word	0x00086e75
   80b40:	00086e65 	.word	0x00086e65

00080b44 <setBBModeAndPgmRstSMC>:

/*! \fn     setBBModeAndPgmRstSMC(void)
*   \brief  Switch to big banging, and clear pgm/rst signal for normal operation
*/
void setBBModeAndPgmRstSMC(void)
{
   80b44:	b510      	push	{r4, lr}
    /* Deactivate SPI port */
    usart_disable_rx(SCARD_USART);
   80b46:	4c10      	ldr	r4, [pc, #64]	; (80b88 <setBBModeAndPgmRstSMC+0x44>)
   80b48:	4620      	mov	r0, r4
   80b4a:	4b10      	ldr	r3, [pc, #64]	; (80b8c <setBBModeAndPgmRstSMC+0x48>)
   80b4c:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80b4e:	4620      	mov	r0, r4
   80b50:	4b0f      	ldr	r3, [pc, #60]	; (80b90 <setBBModeAndPgmRstSMC+0x4c>)
   80b52:	4798      	blx	r3

    /* Clock & data low */
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b54:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b58:	2016      	movs	r0, #22
   80b5a:	4c0e      	ldr	r4, [pc, #56]	; (80b94 <setBBModeAndPgmRstSMC+0x50>)
   80b5c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80b5e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b62:	2017      	movs	r0, #23
   80b64:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80b66:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b6a:	2019      	movs	r0, #25
   80b6c:	47a0      	blx	r4
   80b6e:	4b0a      	ldr	r3, [pc, #40]	; (80b98 <setBBModeAndPgmRstSMC+0x54>)
   80b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80b74:	635a      	str	r2, [r3, #52]	; 0x34
   80b76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80b7a:	635a      	str	r2, [r3, #52]	; 0x34
    scard_sck_low();
    scard_io_low();
	
    smartcardHPulseDelay();
   80b7c:	4b07      	ldr	r3, [pc, #28]	; (80b9c <setBBModeAndPgmRstSMC+0x58>)
   80b7e:	4798      	blx	r3

    /* Clear PGM and RST signals */
    clearPgmRstSignals();
   80b80:	4b07      	ldr	r3, [pc, #28]	; (80ba0 <setBBModeAndPgmRstSMC+0x5c>)
   80b82:	4798      	blx	r3
}
   80b84:	bd10      	pop	{r4, pc}
   80b86:	bf00      	nop
   80b88:	40098000 	.word	0x40098000
   80b8c:	00086e7b 	.word	0x00086e7b
   80b90:	00086e6b 	.word	0x00086e6b
   80b94:	00085215 	.word	0x00085215
   80b98:	400e0c00 	.word	0x400e0c00
   80b9c:	000809e9 	.word	0x000809e9
   80ba0:	00080a45 	.word	0x00080a45

00080ba4 <blowFuse>:
/*! \fn     blowFuse(uint8_t fuse_name)
*   \brief  Blow the manufacturer or issuer fuse
*   \param  fuse_name    Which fuse to blow
*/
void blowFuse(uint8_t fuse_name)
{
   80ba4:	b570      	push	{r4, r5, r6, lr}
    uint16_t i;

    /* Set the index to write */
    if (fuse_name == MAN_FUSE)
   80ba6:	b130      	cbz	r0, 80bb6 <blowFuse+0x12>
    {
        i = 1460;
    }
    else if (fuse_name == ISSUER_FUSE)
   80ba8:	2802      	cmp	r0, #2
   80baa:	d01d      	beq.n	80be8 <blowFuse+0x44>
    {
        i = 1560;
    }
    else if (fuse_name == EC2EN_FUSE)
   80bac:	2801      	cmp	r0, #1
   80bae:	d01e      	beq.n	80bee <blowFuse+0x4a>
    {
        i = 0;
    }

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80bb0:	4b10      	ldr	r3, [pc, #64]	; (80bf4 <blowFuse+0x50>)
   80bb2:	4798      	blx	r3

    /* Get to the good index */
    while(i--)clockPulseSMC();
   80bb4:	e00d      	b.n	80bd2 <blowFuse+0x2e>
        i = 1460;
   80bb6:	f240 54b4 	movw	r4, #1460	; 0x5b4
    setBBModeAndPgmRstSMC();
   80bba:	4b0e      	ldr	r3, [pc, #56]	; (80bf4 <blowFuse+0x50>)
   80bbc:	4798      	blx	r3
    while(i--)clockPulseSMC();
   80bbe:	3c01      	subs	r4, #1
   80bc0:	b2a4      	uxth	r4, r4
   80bc2:	4e0d      	ldr	r6, [pc, #52]	; (80bf8 <blowFuse+0x54>)
   80bc4:	f64f 75ff 	movw	r5, #65535	; 0xffff
   80bc8:	47b0      	blx	r6
   80bca:	3c01      	subs	r4, #1
   80bcc:	b2a4      	uxth	r4, r4
   80bce:	42ac      	cmp	r4, r5
   80bd0:	d1fa      	bne.n	80bc8 <blowFuse+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bd2:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <blowFuse+0x58>)
   80bd4:	2208      	movs	r2, #8
   80bd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set RST signal */
	scard_rst_high();

    /* Perform a write */
    performLowLevelWriteNErase(TRUE);
   80bd8:	2001      	movs	r0, #1
   80bda:	4b09      	ldr	r3, [pc, #36]	; (80c00 <blowFuse+0x5c>)
   80bdc:	4798      	blx	r3

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80bde:	4b09      	ldr	r3, [pc, #36]	; (80c04 <blowFuse+0x60>)
   80be0:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80be2:	4b09      	ldr	r3, [pc, #36]	; (80c08 <blowFuse+0x64>)
   80be4:	4798      	blx	r3
}
   80be6:	bd70      	pop	{r4, r5, r6, pc}
        i = 1560;
   80be8:	f44f 64c3 	mov.w	r4, #1560	; 0x618
   80bec:	e7e5      	b.n	80bba <blowFuse+0x16>
        i = 1529;
   80bee:	f240 54f9 	movw	r4, #1529	; 0x5f9
   80bf2:	e7e2      	b.n	80bba <blowFuse+0x16>
   80bf4:	00080b45 	.word	0x00080b45
   80bf8:	00080a0d 	.word	0x00080a0d
   80bfc:	400e0c00 	.word	0x400e0c00
   80c00:	00080a7d 	.word	0x00080a7d
   80c04:	00080a61 	.word	0x00080a61
   80c08:	00080ad5 	.word	0x00080ad5

00080c0c <securityValidationSMC>:
*   \brief  Check security code
*   \param  code    The code
*   \return success_status (see card_detect_return_t)
*/
RET_TYPE securityValidationSMC(uint16_t code, uint8_t reset_after_send)
{
   80c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c10:	4607      	mov	r7, r0
   80c12:	460e      	mov	r6, r1
    RET_TYPE return_val = RETURN_PIN_NOK_0;
    uint8_t temp_bool;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80c14:	4b54      	ldr	r3, [pc, #336]	; (80d68 <securityValidationSMC+0x15c>)
   80c16:	4798      	blx	r3
   80c18:	2450      	movs	r4, #80	; 0x50

    /* Get to the SC */
    for(i = 0; i < 80; i++)
        invertedClockPulseSMC();
   80c1a:	4d54      	ldr	r5, [pc, #336]	; (80d6c <securityValidationSMC+0x160>)
   80c1c:	47a8      	blx	r5
    for(i = 0; i < 80; i++)
   80c1e:	3c01      	subs	r4, #1
   80c20:	b2a4      	uxth	r4, r4
   80c22:	2c00      	cmp	r4, #0
   80c24:	d1fa      	bne.n	80c1c <securityValidationSMC+0x10>
   80c26:	4b52      	ldr	r3, [pc, #328]	; (80d70 <securityValidationSMC+0x164>)
   80c28:	2210      	movs	r2, #16
   80c2a:	631a      	str	r2, [r3, #48]	; 0x30

	scard_aux1_high();	

    /* Clock is at high level now, as input must be switched during this time */
    /* Enter the SC */
    smartcardHPulseDelay();
   80c2c:	4b51      	ldr	r3, [pc, #324]	; (80d74 <securityValidationSMC+0x168>)
   80c2e:	4798      	blx	r3
   80c30:	250f      	movs	r5, #15
   80c32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d70 <securityValidationSMC+0x164>
        }
        else
        {
            scard_io_high();
        }
        smartcardHPulseDelay();
   80c36:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80d74 <securityValidationSMC+0x168>

        /* Inverted clock pulse */
        invertedClockPulseSMC();
   80c3a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80d6c <securityValidationSMC+0x160>
        if (((code >> (15-i)) & 0x0001) != 0x0000)
   80c3e:	fa47 f305 	asr.w	r3, r7, r5
   80c42:	f013 0f01 	tst.w	r3, #1
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c4a:	bf14      	ite	ne
   80c4c:	f8ca 3034 	strne.w	r3, [sl, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c50:	f8ca 3030 	streq.w	r3, [sl, #48]	; 0x30
        smartcardHPulseDelay();
   80c54:	47c8      	blx	r9
        invertedClockPulseSMC();
   80c56:	47c0      	blx	r8
    for(i = 0; i < 16; i++)
   80c58:	3d01      	subs	r5, #1
   80c5a:	f1b5 3fff 	cmp.w	r5, #4294967295
   80c5e:	d1ee      	bne.n	80c3e <securityValidationSMC+0x32>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c60:	4f43      	ldr	r7, [pc, #268]	; (80d70 <securityValidationSMC+0x164>)
   80c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80c66:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   80c68:	4d42      	ldr	r5, [pc, #264]	; (80d74 <securityValidationSMC+0x168>)
   80c6a:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c6c:	47a8      	blx	r5
   80c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80c72:	637b      	str	r3, [r7, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();	
   80c74:	47a8      	blx	r5
	smartcardHPulseDelay();
   80c76:	47a8      	blx	r5
	
	if (reset_after_send == 1){
   80c78:	2e01      	cmp	r6, #1
   80c7a:	d002      	beq.n	80c82 <securityValidationSMC+0x76>
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80c7c:	463d      	mov	r5, r7
            temp_bool = FALSE;
        }
        else
        {
            /* Clock pulse */
            clockPulseSMC();
   80c7e:	4f3e      	ldr	r7, [pc, #248]	; (80d78 <securityValidationSMC+0x16c>)
   80c80:	e051      	b.n	80d26 <securityValidationSMC+0x11a>
		delay_us(10);
   80c82:	2045      	movs	r0, #69	; 0x45
   80c84:	4b3d      	ldr	r3, [pc, #244]	; (80d7c <securityValidationSMC+0x170>)
   80c86:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c88:	4b39      	ldr	r3, [pc, #228]	; (80d70 <securityValidationSMC+0x164>)
   80c8a:	2210      	movs	r2, #16
   80c8c:	635a      	str	r2, [r3, #52]	; 0x34
		setPgmRstSignals();
   80c8e:	4b3c      	ldr	r3, [pc, #240]	; (80d80 <securityValidationSMC+0x174>)
   80c90:	4798      	blx	r3
		setSPIModeSMC();
   80c92:	4b3c      	ldr	r3, [pc, #240]	; (80d84 <securityValidationSMC+0x178>)
   80c94:	4798      	blx	r3
		return RETURN_PIN_NOK_0;
   80c96:	2520      	movs	r5, #32
   80c98:	e060      	b.n	80d5c <securityValidationSMC+0x150>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c9a:	4c35      	ldr	r4, [pc, #212]	; (80d70 <securityValidationSMC+0x164>)
   80c9c:	2520      	movs	r5, #32
   80c9e:	6325      	str	r5, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80ca0:	4e34      	ldr	r6, [pc, #208]	; (80d74 <securityValidationSMC+0x168>)
   80ca2:	47b0      	blx	r6
   80ca4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   80ca8:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80caa:	47b0      	blx	r6
   80cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80cb0:	6323      	str	r3, [r4, #48]	; 0x30
			    smartcardHPulseDelay();
   80cb2:	47b0      	blx	r6
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cb4:	2310      	movs	r3, #16
   80cb6:	6363      	str	r3, [r4, #52]	; 0x34
				setPgmRstSignals();
   80cb8:	4b31      	ldr	r3, [pc, #196]	; (80d80 <securityValidationSMC+0x174>)
   80cba:	4798      	blx	r3
				setSPIModeSMC();
   80cbc:	4b31      	ldr	r3, [pc, #196]	; (80d84 <securityValidationSMC+0x178>)
   80cbe:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cc0:	e04c      	b.n	80d5c <securityValidationSMC+0x150>
			if (reset_after_send == 3){			
   80cc2:	2e03      	cmp	r6, #3
   80cc4:	d00f      	beq.n	80ce6 <securityValidationSMC+0xda>
            performLowLevelWriteNErase(FALSE);
   80cc6:	2000      	movs	r0, #0
   80cc8:	4b2f      	ldr	r3, [pc, #188]	; (80d88 <securityValidationSMC+0x17c>)
   80cca:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80ccc:	4b28      	ldr	r3, [pc, #160]	; (80d70 <securityValidationSMC+0x164>)
   80cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            if (scard_io_read())
   80cd0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80cd4:	d110      	bne.n	80cf8 <securityValidationSMC+0xec>
                if (i == 0)
   80cd6:	b1ec      	cbz	r4, 80d14 <securityValidationSMC+0x108>
                else if (i == 1)
   80cd8:	2c01      	cmp	r4, #1
   80cda:	d01d      	beq.n	80d18 <securityValidationSMC+0x10c>
                else if (i == 2)
   80cdc:	2c02      	cmp	r4, #2
   80cde:	bf0c      	ite	eq
   80ce0:	2521      	moveq	r5, #33	; 0x21
   80ce2:	2520      	movne	r5, #32
   80ce4:	e009      	b.n	80cfa <securityValidationSMC+0xee>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80ce6:	4b22      	ldr	r3, [pc, #136]	; (80d70 <securityValidationSMC+0x164>)
   80ce8:	2210      	movs	r2, #16
   80cea:	635a      	str	r2, [r3, #52]	; 0x34
				setPgmRstSignals();
   80cec:	4b24      	ldr	r3, [pc, #144]	; (80d80 <securityValidationSMC+0x174>)
   80cee:	4798      	blx	r3
				setSPIModeSMC();
   80cf0:	4b24      	ldr	r3, [pc, #144]	; (80d84 <securityValidationSMC+0x178>)
   80cf2:	4798      	blx	r3
				return RETURN_PIN_NOK_0;
   80cf4:	2520      	movs	r5, #32
   80cf6:	e031      	b.n	80d5c <securityValidationSMC+0x150>
                return_val = RETURN_PIN_OK;
   80cf8:	2524      	movs	r5, #36	; 0x24
            clockPulseSMC();
   80cfa:	4b1f      	ldr	r3, [pc, #124]	; (80d78 <securityValidationSMC+0x16c>)
   80cfc:	4798      	blx	r3
    }

    /* If we couldn't find a spot to write, no tries left */
    if (i == 4)
    {
        return_val = RETURN_PIN_NOK_0;
   80cfe:	2c04      	cmp	r4, #4
   80d00:	bf08      	it	eq
   80d02:	2520      	moveq	r5, #32
   80d04:	4b1a      	ldr	r3, [pc, #104]	; (80d70 <securityValidationSMC+0x164>)
   80d06:	2210      	movs	r2, #16
   80d08:	635a      	str	r2, [r3, #52]	; 0x34


	scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80d0a:	4b1d      	ldr	r3, [pc, #116]	; (80d80 <securityValidationSMC+0x174>)
   80d0c:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80d0e:	4b1d      	ldr	r3, [pc, #116]	; (80d84 <securityValidationSMC+0x178>)
   80d10:	4798      	blx	r3

    return return_val;
   80d12:	e023      	b.n	80d5c <securityValidationSMC+0x150>
                    return_val = RETURN_PIN_NOK_3;
   80d14:	2523      	movs	r5, #35	; 0x23
   80d16:	e7f0      	b.n	80cfa <securityValidationSMC+0xee>
                    return_val = RETURN_PIN_NOK_2;
   80d18:	2522      	movs	r5, #34	; 0x22
   80d1a:	e7ee      	b.n	80cfa <securityValidationSMC+0xee>
            clockPulseSMC();
   80d1c:	47b8      	blx	r7
            i++;
   80d1e:	3401      	adds	r4, #1
   80d20:	b2a4      	uxth	r4, r4
    while((temp_bool == TRUE) && (i < 4))
   80d22:	2c04      	cmp	r4, #4
   80d24:	d01d      	beq.n	80d62 <securityValidationSMC+0x156>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80d26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        if (scard_io_read())
   80d28:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80d2c:	d0f6      	beq.n	80d1c <securityValidationSMC+0x110>
			if (reset_after_send == 2){			
   80d2e:	2e02      	cmp	r6, #2
   80d30:	d0b3      	beq.n	80c9a <securityValidationSMC+0x8e>
            performLowLevelWriteNErase(TRUE);
   80d32:	2001      	movs	r0, #1
   80d34:	4b14      	ldr	r3, [pc, #80]	; (80d88 <securityValidationSMC+0x17c>)
   80d36:	4798      	blx	r3
            while(scard_io_read())
   80d38:	2320      	movs	r3, #32
   80d3a:	490d      	ldr	r1, [pc, #52]	; (80d70 <securityValidationSMC+0x164>)
   80d3c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   80d3e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   80d42:	d0be      	beq.n	80cc2 <securityValidationSMC+0xb6>
				if(timeout == 0)
   80d44:	3b01      	subs	r3, #1
   80d46:	b29b      	uxth	r3, r3
   80d48:	2b00      	cmp	r3, #0
   80d4a:	d1f7      	bne.n	80d3c <securityValidationSMC+0x130>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80d4c:	4b08      	ldr	r3, [pc, #32]	; (80d70 <securityValidationSMC+0x164>)
   80d4e:	2210      	movs	r2, #16
   80d50:	635a      	str	r2, [r3, #52]	; 0x34
					setPgmRstSignals();
   80d52:	4b0b      	ldr	r3, [pc, #44]	; (80d80 <securityValidationSMC+0x174>)
   80d54:	4798      	blx	r3
					setSPIModeSMC();
   80d56:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <securityValidationSMC+0x178>)
   80d58:	4798      	blx	r3
					return RETURN_PIN_TIMEOUT;
   80d5a:	2525      	movs	r5, #37	; 0x25
}
   80d5c:	4628      	mov	r0, r5
   80d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return_val = RETURN_PIN_NOK_0;
   80d62:	2520      	movs	r5, #32
   80d64:	e7ce      	b.n	80d04 <securityValidationSMC+0xf8>
   80d66:	bf00      	nop
   80d68:	00080b45 	.word	0x00080b45
   80d6c:	00080a29 	.word	0x00080a29
   80d70:	400e0c00 	.word	0x400e0c00
   80d74:	000809e9 	.word	0x000809e9
   80d78:	00080a0d 	.word	0x00080a0d
   80d7c:	20000089 	.word	0x20000089
   80d80:	00080a61 	.word	0x00080a61
   80d84:	00080ad5 	.word	0x00080ad5
   80d88:	00080a7d 	.word	0x00080a7d

00080d8c <writeSMC>:
*   \param  start_index_bit         Where to start writing bits
*   \param  nb_bits                 Number of bits to write
*   \param  data_to_write           Pointer to the buffer
*/
void writeSMC(uint16_t start_index_bit, uint16_t nb_bits, uint8_t* data_to_write)
{
   80d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d90:	4606      	mov	r6, r0
   80d92:	460f      	mov	r7, r1
   80d94:	4690      	mov	r8, r2
    uint16_t current_written_bit = 0;
    uint8_t masked_bit_to_write = 0;
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   80d96:	4b2b      	ldr	r3, [pc, #172]	; (80e44 <writeSMC+0xb8>)
   80d98:	4798      	blx	r3

    /* Try to not erase AZ1 if EZ1 is 0xFFFFFFF... and we're writing the first bit of the AZ2 */
    if (start_index_bit >= SMARTCARD_AZ2_BIT_START)
   80d9a:	f5b6 7f38 	cmp.w	r6, #736	; 0x2e0
   80d9e:	d208      	bcs.n	80db2 <writeSMC+0x26>
        }                
    }
    else
    {
        /* Get to the good index, clock pulses */
        for(i = 0; i < start_index_bit; i++)
   80da0:	b31e      	cbz	r6, 80dea <writeSMC+0x5e>
   80da2:	2400      	movs	r4, #0
        {
            clockPulseSMC();
   80da4:	4d28      	ldr	r5, [pc, #160]	; (80e48 <writeSMC+0xbc>)
   80da6:	47a8      	blx	r5
        for(i = 0; i < start_index_bit; i++)
   80da8:	3401      	adds	r4, #1
   80daa:	b2a4      	uxth	r4, r4
   80dac:	42a6      	cmp	r6, r4
   80dae:	d1fa      	bne.n	80da6 <writeSMC+0x1a>
   80db0:	e01b      	b.n	80dea <writeSMC+0x5e>
   80db2:	f240 24df 	movw	r4, #735	; 0x2df
            clockPulseSMC();            
   80db6:	4d24      	ldr	r5, [pc, #144]	; (80e48 <writeSMC+0xbc>)
   80db8:	47a8      	blx	r5
        for(i = 0; i < SMARTCARD_AZ2_BIT_START - 1; i++)
   80dba:	3c01      	subs	r4, #1
   80dbc:	b2a4      	uxth	r4, r4
   80dbe:	2c00      	cmp	r4, #0
   80dc0:	d1fa      	bne.n	80db8 <writeSMC+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80dc2:	4d22      	ldr	r5, [pc, #136]	; (80e4c <writeSMC+0xc0>)
   80dc4:	f44f 0980 	mov.w	r9, #4194304	; 0x400000
   80dc8:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
        clockPulseSMC();
   80dcc:	4b1e      	ldr	r3, [pc, #120]	; (80e48 <writeSMC+0xbc>)
   80dce:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80dd0:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80dd4:	f5a6 7538 	sub.w	r5, r6, #736	; 0x2e0
   80dd8:	2d00      	cmp	r5, #0
   80dda:	dd06      	ble.n	80dea <writeSMC+0x5e>
            clockPulseSMC();            
   80ddc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80e48 <writeSMC+0xbc>
   80de0:	47c8      	blx	r9
        for(i = 0; i < (start_index_bit - SMARTCARD_AZ2_BIT_START); i++)
   80de2:	3401      	adds	r4, #1
   80de4:	b2a4      	uxth	r4, r4
   80de6:	42ac      	cmp	r4, r5
   80de8:	dbfa      	blt.n	80de0 <writeSMC+0x54>
        }                
    }

    /* Start writing */
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80dea:	b327      	cbz	r7, 80e36 <writeSMC+0xaa>
   80dec:	3f01      	subs	r7, #1
   80dee:	b2bf      	uxth	r7, r7
   80df0:	2500      	movs	r5, #0
    {
        /* If we are at the start of a 16bits word or writing our first bit, erase the word */
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
        {
            performLowLevelWriteNErase(FALSE);
   80df2:	46ab      	mov	fp, r5
   80df4:	f8df a060 	ldr.w	sl, [pc, #96]	; 80e58 <writeSMC+0xcc>
        {
            performLowLevelWriteNErase(TRUE);
        }

        /* Go to next address */
        clockPulseSMC();
   80df8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80e48 <writeSMC+0xbc>
   80dfc:	e010      	b.n	80e20 <writeSMC+0x94>
            performLowLevelWriteNErase(FALSE);
   80dfe:	4658      	mov	r0, fp
   80e00:	47d0      	blx	sl
        masked_bit_to_write = (data_to_write[(current_written_bit>>3)] >> (7 - (current_written_bit & 0x0007))) & 0x01;
   80e02:	08e4      	lsrs	r4, r4, #3
   80e04:	f818 3004 	ldrb.w	r3, [r8, r4]
   80e08:	43ea      	mvns	r2, r5
   80e0a:	f002 0207 	and.w	r2, r2, #7
   80e0e:	4113      	asrs	r3, r2
        if (masked_bit_to_write == 0x00)
   80e10:	f013 0f01 	tst.w	r3, #1
   80e14:	d00c      	beq.n	80e30 <writeSMC+0xa4>
        clockPulseSMC();
   80e16:	47c8      	blx	r9
    for(current_written_bit = 0; current_written_bit < nb_bits; current_written_bit++)
   80e18:	1c6b      	adds	r3, r5, #1
   80e1a:	42bd      	cmp	r5, r7
   80e1c:	d00b      	beq.n	80e36 <writeSMC+0xaa>
   80e1e:	461d      	mov	r5, r3
   80e20:	b2ac      	uxth	r4, r5
        if ((((start_index_bit+current_written_bit) & 0x000F) == 0) || (current_written_bit == 0))
   80e22:	19a3      	adds	r3, r4, r6
   80e24:	f013 0f0f 	tst.w	r3, #15
   80e28:	d0e9      	beq.n	80dfe <writeSMC+0x72>
   80e2a:	2c00      	cmp	r4, #0
   80e2c:	d1e9      	bne.n	80e02 <writeSMC+0x76>
   80e2e:	e7e6      	b.n	80dfe <writeSMC+0x72>
            performLowLevelWriteNErase(TRUE);
   80e30:	2001      	movs	r0, #1
   80e32:	47d0      	blx	sl
   80e34:	e7ef      	b.n	80e16 <writeSMC+0x8a>
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80e36:	4b06      	ldr	r3, [pc, #24]	; (80e50 <writeSMC+0xc4>)
   80e38:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   80e3a:	4b06      	ldr	r3, [pc, #24]	; (80e54 <writeSMC+0xc8>)
   80e3c:	4798      	blx	r3
}
   80e3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e42:	bf00      	nop
   80e44:	00080b45 	.word	0x00080b45
   80e48:	00080a0d 	.word	0x00080a0d
   80e4c:	400e0c00 	.word	0x400e0c00
   80e50:	00080a61 	.word	0x00080a61
   80e54:	00080ad5 	.word	0x00080ad5
   80e58:	00080a7d 	.word	0x00080a7d

00080e5c <readSMC>:
*   \param  start_record_index      The index at which we start recording the answer
*   \param  data_to_receive        Pointer to the buffer
*   \return The buffer
*/
uint8_t* readSMC(uint8_t nb_bytes_total_read, uint8_t start_record_index, uint8_t* data_to_receive)
{
   80e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e60:	b083      	sub	sp, #12
   80e62:	4607      	mov	r7, r0
   80e64:	4688      	mov	r8, r1
   80e66:	4693      	mov	fp, r2
    uint8_t* return_val = data_to_receive;
    uint8_t i;

    /* Set PGM / RST signals for operation */
    clearPgmRstSignals();
   80e68:	4b11      	ldr	r3, [pc, #68]	; (80eb0 <readSMC+0x54>)
   80e6a:	4798      	blx	r3
	
	/* Read */
	uint32_t temp;
    for(i = 0; i < nb_bytes_total_read; i++)
   80e6c:	b1cf      	cbz	r7, 80ea2 <readSMC+0x46>
   80e6e:	465e      	mov	r6, fp
   80e70:	2500      	movs	r5, #0
    {
        /* Start transmission */
		usart_putchar(SCARD_USART, 0x00);
   80e72:	4c10      	ldr	r4, [pc, #64]	; (80eb4 <readSMC+0x58>)
   80e74:	f8df a044 	ldr.w	sl, [pc, #68]	; 80ebc <readSMC+0x60>
        /* Store data in buffer or discard it*/
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
				
		usart_getchar(SCARD_USART, &temp);
   80e78:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80ec0 <readSMC+0x64>
		usart_putchar(SCARD_USART, 0x00);
   80e7c:	2100      	movs	r1, #0
   80e7e:	4620      	mov	r0, r4
   80e80:	47d0      	blx	sl
		while (!(SCARD_USART->US_CSR & US_CSR_TXRDY));
   80e82:	6963      	ldr	r3, [r4, #20]
   80e84:	f013 0f02 	tst.w	r3, #2
   80e88:	d0fb      	beq.n	80e82 <readSMC+0x26>
		usart_getchar(SCARD_USART, &temp);
   80e8a:	a901      	add	r1, sp, #4
   80e8c:	4620      	mov	r0, r4
   80e8e:	47c8      	blx	r9
		
        if (i >= start_record_index)
   80e90:	45a8      	cmp	r8, r5
        {			
			*(data_to_receive++) = (uint8_t)temp;
   80e92:	bf9c      	itt	ls
   80e94:	9b01      	ldrls	r3, [sp, #4]
   80e96:	f806 3b01 	strbls.w	r3, [r6], #1
    for(i = 0; i < nb_bytes_total_read; i++)
   80e9a:	3501      	adds	r5, #1
   80e9c:	b2ed      	uxtb	r5, r5
   80e9e:	42af      	cmp	r7, r5
   80ea0:	d1ec      	bne.n	80e7c <readSMC+0x20>
        }
    }

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   80ea2:	4b05      	ldr	r3, [pc, #20]	; (80eb8 <readSMC+0x5c>)
   80ea4:	4798      	blx	r3

    return return_val;
}
   80ea6:	4658      	mov	r0, fp
   80ea8:	b003      	add	sp, #12
   80eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80eae:	bf00      	nop
   80eb0:	00080a45 	.word	0x00080a45
   80eb4:	40098000 	.word	0x40098000
   80eb8:	00080a61 	.word	0x00080a61
   80ebc:	00086ec5 	.word	0x00086ec5
   80ec0:	00086eef 	.word	0x00086eef

00080ec4 <firstDetectFunctionSMC>:
/*! \fn     firstDetectFunctionSMC(void)
*   \brief  functions performed once the smart card is detected
*   \return The detection result (see card_detect_return_t)
*/
RET_TYPE firstDetectFunctionSMC(void)
{
   80ec4:	b510      	push	{r4, lr}
   80ec6:	b082      	sub	sp, #8
    uint8_t data_buffer[2];
    uint16_t *data_buf16 = (uint16_t*)data_buffer;
    uint16_t temp_uint;

	/* Fuse pin low */
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ec8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ecc:	2004      	movs	r0, #4
   80ece:	4c27      	ldr	r4, [pc, #156]	; (80f6c <firstDetectFunctionSMC+0xa8>)
   80ed0:	47a0      	blx	r4

    /* Default state: PGM to 0 and RST to 1 */
	gpio_configure_pin(SCARD_PGM_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80ed2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ed6:	2005      	movs	r0, #5
   80ed8:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   80eda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ede:	2003      	movs	r0, #3
   80ee0:	47a0      	blx	r4
   80ee2:	4b23      	ldr	r3, [pc, #140]	; (80f70 <firstDetectFunctionSMC+0xac>)
   80ee4:	2220      	movs	r2, #32
   80ee6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80ee8:	2208      	movs	r2, #8
   80eea:	631a      	str	r2, [r3, #48]	; 0x30
    scard_pgm_low();
	scard_rst_high();

    /* Activate SPI port */
    setSPIModeSMC();
   80eec:	4b21      	ldr	r3, [pc, #132]	; (80f74 <firstDetectFunctionSMC+0xb0>)
   80eee:	4798      	blx	r3
    
    /* Let the card come online */
    smartcardPowerDelay();
   80ef0:	4b21      	ldr	r3, [pc, #132]	; (80f78 <firstDetectFunctionSMC+0xb4>)
   80ef2:	4798      	blx	r3

    /* Check smart card FZ */
    readFabricationZone(data_buffer);
   80ef4:	a801      	add	r0, sp, #4
   80ef6:	4b21      	ldr	r3, [pc, #132]	; (80f7c <firstDetectFunctionSMC+0xb8>)
   80ef8:	4798      	blx	r3
    if ((swap16(*data_buf16)) != SMARTCARD_FABRICATION_ZONE)
   80efa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   80efe:	0213      	lsls	r3, r2, #8
   80f00:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   80f04:	b21b      	sxth	r3, r3
   80f06:	f640 720f 	movw	r2, #3855	; 0xf0f
   80f0a:	4293      	cmp	r3, r2
   80f0c:	d002      	beq.n	80f14 <firstDetectFunctionSMC+0x50>
    {
        return RETURN_CARD_NDET;
   80f0e:	2001      	movs	r0, #1
        case 2: return RETURN_CARD_2_TRIES_LEFT;
        case 1: return RETURN_CARD_1_TRIES_LEFT;
        case 0: return RETURN_CARD_0_TRIES_LEFT;
        default: return RETURN_CARD_0_TRIES_LEFT;
    }
}
   80f10:	b002      	add	sp, #8
   80f12:	bd10      	pop	{r4, pc}
    readMemoryTestZone((uint8_t*)&temp_uint);
   80f14:	f10d 0002 	add.w	r0, sp, #2
   80f18:	4c19      	ldr	r4, [pc, #100]	; (80f80 <firstDetectFunctionSMC+0xbc>)
   80f1a:	47a0      	blx	r4
    temp_uint = temp_uint + 5;
   80f1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f20:	3305      	adds	r3, #5
   80f22:	f8ad 3002 	strh.w	r3, [sp, #2]
    writeMemoryTestZone((uint8_t*)&temp_uint);
   80f26:	f10d 0002 	add.w	r0, sp, #2
   80f2a:	4b16      	ldr	r3, [pc, #88]	; (80f84 <firstDetectFunctionSMC+0xc0>)
   80f2c:	4798      	blx	r3
    if (*(uint16_t*)readMemoryTestZone(data_buffer) != temp_uint)
   80f2e:	a801      	add	r0, sp, #4
   80f30:	47a0      	blx	r4
   80f32:	8802      	ldrh	r2, [r0, #0]
   80f34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   80f38:	429a      	cmp	r2, r3
   80f3a:	d001      	beq.n	80f40 <firstDetectFunctionSMC+0x7c>
        return RETURN_CARD_TEST_PB;
   80f3c:	2002      	movs	r0, #2
   80f3e:	e7e7      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
    switch(getNumberOfSecurityCodeTriesLeft())
   80f40:	4b11      	ldr	r3, [pc, #68]	; (80f88 <firstDetectFunctionSMC+0xc4>)
   80f42:	4798      	blx	r3
   80f44:	2804      	cmp	r0, #4
   80f46:	d80c      	bhi.n	80f62 <firstDetectFunctionSMC+0x9e>
   80f48:	e8df f000 	tbb	[pc, r0]
   80f4c:	03050709 	.word	0x03050709
   80f50:	0d          	.byte	0x0d
   80f51:	00          	.byte	0x00
   80f52:	2013      	movs	r0, #19
   80f54:	e7dc      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 2: return RETURN_CARD_2_TRIES_LEFT;
   80f56:	2012      	movs	r0, #18
   80f58:	e7da      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 1: return RETURN_CARD_1_TRIES_LEFT;
   80f5a:	2011      	movs	r0, #17
   80f5c:	e7d8      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 0: return RETURN_CARD_0_TRIES_LEFT;
   80f5e:	2010      	movs	r0, #16
   80f60:	e7d6      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        default: return RETURN_CARD_0_TRIES_LEFT;
   80f62:	2010      	movs	r0, #16
   80f64:	e7d4      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
        case 4: return RETURN_CARD_4_TRIES_LEFT;
   80f66:	2014      	movs	r0, #20
   80f68:	e7d2      	b.n	80f10 <firstDetectFunctionSMC+0x4c>
   80f6a:	bf00      	nop
   80f6c:	00085215 	.word	0x00085215
   80f70:	400e0c00 	.word	0x400e0c00
   80f74:	00080ad5 	.word	0x00080ad5
   80f78:	000809f9 	.word	0x000809f9
   80f7c:	00080791 	.word	0x00080791
   80f80:	000807d5 	.word	0x000807d5
   80f84:	000807ed 	.word	0x000807ed
   80f88:	000809b9 	.word	0x000809b9

00080f8c <removeFunctionSMC>:

/*! \fn     removeFunctionSMC(void)
*   \brief  functions performed once the smart card is removed
*/
void removeFunctionSMC(void)
{
   80f8c:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80f8e:	4b12      	ldr	r3, [pc, #72]	; (80fd8 <removeFunctionSMC+0x4c>)
   80f90:	2220      	movs	r2, #32
   80f92:	635a      	str	r2, [r3, #52]	; 0x34
    /* Setup all output pins as tri-state */
    scard_pgm_low();
	gpio_configure_pin(SCARD_AUX1_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f94:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80f98:	2004      	movs	r0, #4
   80f9a:	4c10      	ldr	r4, [pc, #64]	; (80fdc <removeFunctionSMC+0x50>)
   80f9c:	47a0      	blx	r4
	gpio_configure_pin(SCARD_AUX2_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80f9e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fa2:	2005      	movs	r0, #5
   80fa4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_RST_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fa6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80faa:	2003      	movs	r0, #3
   80fac:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IOTX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fb2:	2016      	movs	r0, #22
   80fb4:	47a0      	blx	r4
	gpio_configure_pin(SCARD_IORX_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fb6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fba:	2017      	movs	r0, #23
   80fbc:	47a0      	blx	r4
	gpio_configure_pin(SCARD_SCK_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   80fbe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80fc2:	2019      	movs	r0, #25
   80fc4:	47a0      	blx	r4
	
    /* Deactivate port */
	usart_disable_rx(SCARD_USART);
   80fc6:	4c06      	ldr	r4, [pc, #24]	; (80fe0 <removeFunctionSMC+0x54>)
   80fc8:	4620      	mov	r0, r4
   80fca:	4b06      	ldr	r3, [pc, #24]	; (80fe4 <removeFunctionSMC+0x58>)
   80fcc:	4798      	blx	r3
	usart_disable_tx(SCARD_USART);
   80fce:	4620      	mov	r0, r4
   80fd0:	4b05      	ldr	r3, [pc, #20]	; (80fe8 <removeFunctionSMC+0x5c>)
   80fd2:	4798      	blx	r3
}
   80fd4:	bd10      	pop	{r4, pc}
   80fd6:	bf00      	nop
   80fd8:	400e0c00 	.word	0x400e0c00
   80fdc:	00085215 	.word	0x00085215
   80fe0:	40098000 	.word	0x40098000
   80fe4:	00086e7b 	.word	0x00086e7b
   80fe8:	00086e6b 	.word	0x00086e6b

00080fec <initPortSMC>:

/*! \fn     initPortSMC(void)
*   \brief  Initialize smart card port
*/
void initPortSMC(void)
{
   80fec:	b508      	push	{r3, lr}
    /* Setup card detection input with pull-up */
	gpio_configure_pin(SCARD_PRESENT_IDX, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT | PIO_PULLUP));
   80fee:	4904      	ldr	r1, [pc, #16]	; (81000 <initPortSMC+0x14>)
   80ff0:	2002      	movs	r0, #2
   80ff2:	4b04      	ldr	r3, [pc, #16]	; (81004 <initPortSMC+0x18>)
   80ff4:	4798      	blx	r3
        PORT_SPI_NATIVE &= ~(1 << MISO_SPI_NATIVE);
        PORT_SPI_NATIVE |= (1 << SS_SPI_NATIVE);
    #endif

    /* Set all output pins as tri-state */
    removeFunctionSMC();
   80ff6:	4b04      	ldr	r3, [pc, #16]	; (81008 <initPortSMC+0x1c>)
   80ff8:	4798      	blx	r3
	setPgmRstSignals();
   80ffa:	4b04      	ldr	r3, [pc, #16]	; (8100c <initPortSMC+0x20>)
   80ffc:	4798      	blx	r3
}
   80ffe:	bd08      	pop	{r3, pc}
   81000:	28000001 	.word	0x28000001
   81004:	00085215 	.word	0x00085215
   81008:	00080f8d 	.word	0x00080f8d
   8100c:	00080a61 	.word	0x00080a61

00081010 <compareBit>:


// Greg's function
// Walk up to the security code register, enter a bit in the right place, then reset.
void compareBit(uint16_t bit, uint16_t value)
{
   81010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81012:	4605      	mov	r5, r0
   81014:	460f      	mov	r7, r1
    uint16_t i;

    /* Switch to bit banging */
    setBBModeAndPgmRstSMC();
   81016:	4b18      	ldr	r3, [pc, #96]	; (81078 <compareBit+0x68>)
   81018:	4798      	blx	r3

    /* Get to the SC */
    for(i = 0; i < 80 + bit; i++)
   8101a:	354f      	adds	r5, #79	; 0x4f
   8101c:	2400      	movs	r4, #0
		invertedClockPulseSMC();
   8101e:	4e17      	ldr	r6, [pc, #92]	; (8107c <compareBit+0x6c>)
   81020:	47b0      	blx	r6
    for(i = 0; i < 80 + bit; i++)
   81022:	3401      	adds	r4, #1
   81024:	b2a4      	uxth	r4, r4
   81026:	42ac      	cmp	r4, r5
   81028:	ddfa      	ble.n	81020 <compareBit+0x10>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8102a:	4b15      	ldr	r3, [pc, #84]	; (81080 <compareBit+0x70>)
   8102c:	2210      	movs	r2, #16
   8102e:	631a      	str	r2, [r3, #48]	; 0x30

    scard_aux1_high();

    // Clock is at high level now, as input must be switched during this time */
    // Enter test value
    smartcardHPulseDelay();
   81030:	4b14      	ldr	r3, [pc, #80]	; (81084 <compareBit+0x74>)
   81032:	4798      	blx	r3
	if (value)
   81034:	b1df      	cbz	r7, 8106e <compareBit+0x5e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81036:	4b12      	ldr	r3, [pc, #72]	; (81080 <compareBit+0x70>)
   81038:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8103c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    else
    {
	    scard_io_high();
    }
    smartcardHPulseDelay();
   8103e:	4c11      	ldr	r4, [pc, #68]	; (81084 <compareBit+0x74>)
   81040:	47a0      	blx	r4
    invertedClockPulseSMC();
   81042:	4b0e      	ldr	r3, [pc, #56]	; (8107c <compareBit+0x6c>)
   81044:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81046:	4d0e      	ldr	r5, [pc, #56]	; (81080 <compareBit+0x70>)
   81048:	2308      	movs	r3, #8
   8104a:	632b      	str	r3, [r5, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8104c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   81050:	636b      	str	r3, [r5, #52]	; 0x34
	// Bring reset high
	scard_rst_high();

    /* Bring clock and data low */
    scard_sck_low();
    smartcardHPulseDelay();
   81052:	47a0      	blx	r4
    smartcardHPulseDelay();
   81054:	47a0      	blx	r4
   81056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   8105a:	636b      	str	r3, [r5, #52]	; 0x34
    scard_io_low();
    smartcardHPulseDelay();
   8105c:	47a0      	blx	r4
    smartcardHPulseDelay();
   8105e:	47a0      	blx	r4
   81060:	2310      	movs	r3, #16
   81062:	636b      	str	r3, [r5, #52]	; 0x34
    
	// Cleanup
    scard_aux1_low();

    /* Set PGM / RST signals to standby mode */
    setPgmRstSignals();
   81064:	4b08      	ldr	r3, [pc, #32]	; (81088 <compareBit+0x78>)
   81066:	4798      	blx	r3

    /* Switch to SPI mode */
    setSPIModeSMC();
   81068:	4b08      	ldr	r3, [pc, #32]	; (8108c <compareBit+0x7c>)
   8106a:	4798      	blx	r3

    return;	
   8106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8106e:	4b04      	ldr	r3, [pc, #16]	; (81080 <compareBit+0x70>)
   81070:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   81074:	631a      	str	r2, [r3, #48]	; 0x30
   81076:	e7e2      	b.n	8103e <compareBit+0x2e>
   81078:	00080b45 	.word	0x00080b45
   8107c:	00080a29 	.word	0x00080a29
   81080:	400e0c00 	.word	0x400e0c00
   81084:	000809e9 	.word	0x000809e9
   81088:	00080a61 	.word	0x00080a61
   8108c:	00080ad5 	.word	0x00080ad5

00081090 <iso7816_update_crc>:
 * \param crc CRC result.
 *
 * \return CRC value.
 */
static uint16_t iso7816_update_crc(uint8_t data, uint16_t crc)
{
   81090:	b410      	push	{r4}
	uint8_t idx;
	uint16_t tmp = (uint16_t)data << 8;
   81092:	0200      	lsls	r0, r0, #8
   81094:	2308      	movs	r3, #8

	for (idx = 0; idx < 8; idx++) {
		if ((crc ^ tmp) & 0x8000) {
			crc <<= 1;
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   81096:	f241 0421 	movw	r4, #4129	; 0x1021
		if ((crc ^ tmp) & 0x8000) {
   8109a:	ea81 0200 	eor.w	r2, r1, r0
   8109e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
			crc <<= 1;
   810a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   810a6:	b289      	uxth	r1, r1
			crc ^= (uint16_t)0x1021; /* X^12 + X^5 + 1 */
   810a8:	bf18      	it	ne
   810aa:	4061      	eorne	r1, r4
		} else {
			crc <<= 1;
		}

		tmp <<= 1;
   810ac:	0040      	lsls	r0, r0, #1
   810ae:	b280      	uxth	r0, r0
   810b0:	3b01      	subs	r3, #1
	for (idx = 0; idx < 8; idx++) {
   810b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   810b6:	d1f0      	bne.n	8109a <iso7816_update_crc+0xa>
	}

	return crc;
}
   810b8:	4608      	mov	r0, r1
   810ba:	bc10      	pop	{r4}
   810bc:	4770      	bx	lr
	...

000810c0 <iso7816_icc_power_off>:
{
   810c0:	b508      	push	{r3, lr}
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   810c2:	4b02      	ldr	r3, [pc, #8]	; (810cc <iso7816_icc_power_off+0xc>)
   810c4:	6818      	ldr	r0, [r3, #0]
   810c6:	4b02      	ldr	r3, [pc, #8]	; (810d0 <iso7816_icc_power_off+0x10>)
   810c8:	4798      	blx	r3
   810ca:	bd08      	pop	{r3, pc}
   810cc:	200023f4 	.word	0x200023f4
   810d0:	000851f9 	.word	0x000851f9

000810d4 <iso7816_get_char>:
 * \param p_char_received Pointer for store the received char.
 *
 * \return 0xff: if timeout else status of US_CSR.
 */
uint32_t iso7816_get_char(Usart* p_usart, uint8_t *p_char_received)
{
   810d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810d8:	b083      	sub	sp, #12
   810da:	4605      	mov	r5, r0
   810dc:	4689      	mov	r9, r1
	uint32_t ul_data;
	uint32_t ul_status;
	uint32_t ul_timeout = 0;

	if (gs_uc_state == USART_SEND) {		
   810de:	4b1d      	ldr	r3, [pc, #116]	; (81154 <iso7816_get_char+0x80>)
   810e0:	781b      	ldrb	r3, [r3, #0]
   810e2:	b943      	cbnz	r3, 810f6 <iso7816_get_char+0x22>
		while ((usart_get_status(p_usart) & US_CSR_TXEMPTY) ==
   810e4:	4c1c      	ldr	r4, [pc, #112]	; (81158 <iso7816_get_char+0x84>)
   810e6:	4628      	mov	r0, r5
   810e8:	47a0      	blx	r4
   810ea:	f410 7f00 	tst.w	r0, #512	; 0x200
   810ee:	d0fa      	beq.n	810e6 <iso7816_get_char+0x12>
		/*
		usart_reset_status(p_usart);
		usart_reset_iterations(p_usart);
		usart_reset_nack(p_usart);
		*/
		gs_uc_state = USART_RCV;
   810f0:	2201      	movs	r2, #1
   810f2:	4b18      	ldr	r3, [pc, #96]	; (81154 <iso7816_get_char+0x80>)
   810f4:	701a      	strb	r2, [r3, #0]
{
   810f6:	2400      	movs	r4, #0
		//iso7816_icc_power_off();
		//iso7816_icc_power_on();	
	}

	/* Wait USART ready for reception. */
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   810f8:	4e17      	ldr	r6, [pc, #92]	; (81158 <iso7816_get_char+0x84>)
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   810fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81168 <iso7816_get_char+0x94>
   810fe:	4f17      	ldr	r7, [pc, #92]	; (8115c <iso7816_get_char+0x88>)
	while (((usart_get_status(p_usart) & US_CSR_RXRDY) == 0)) {
   81100:	4628      	mov	r0, r5
   81102:	47b0      	blx	r6
   81104:	f010 0f01 	tst.w	r0, #1
   81108:	d10d      	bne.n	81126 <iso7816_get_char+0x52>
		if (ul_timeout++ > RX_TIMEOUT * (g_ul_clk / 1000000)) {
   8110a:	1c61      	adds	r1, r4, #1
   8110c:	f8d8 3000 	ldr.w	r3, [r8]
   81110:	fba7 2303 	umull	r2, r3, r7, r3
   81114:	0c9b      	lsrs	r3, r3, #18
   81116:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   8111a:	fb02 f303 	mul.w	r3, r2, r3
   8111e:	429c      	cmp	r4, r3
   81120:	d813      	bhi.n	8114a <iso7816_get_char+0x76>
   81122:	460c      	mov	r4, r1
   81124:	e7ec      	b.n	81100 <iso7816_get_char+0x2c>
		}
	}

	/* At least one complete character has been received and US_RHR has not
	 * yet been read. */
	usart_read(p_usart, &ul_data);
   81126:	a901      	add	r1, sp, #4
   81128:	4628      	mov	r0, r5
   8112a:	4b0d      	ldr	r3, [pc, #52]	; (81160 <iso7816_get_char+0x8c>)
   8112c:	4798      	blx	r3
	/* ISO7816 only has 8 bits data. */
	*p_char_received = 0xFF & ul_data;
   8112e:	9b01      	ldr	r3, [sp, #4]
   81130:	f889 3000 	strb.w	r3, [r9]

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   81134:	4628      	mov	r0, r5
   81136:	4b08      	ldr	r3, [pc, #32]	; (81158 <iso7816_get_char+0x84>)
   81138:	4798      	blx	r3
   8113a:	f242 54e0 	movw	r4, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   8113e:	4004      	ands	r4, r0
   81140:	d004      	beq.n	8114c <iso7816_get_char+0x78>
		usart_reset_status(p_usart);
   81142:	4628      	mov	r0, r5
   81144:	4b07      	ldr	r3, [pc, #28]	; (81164 <iso7816_get_char+0x90>)
   81146:	4798      	blx	r3
   81148:	e000      	b.n	8114c <iso7816_get_char+0x78>
			return (0xff);
   8114a:	24ff      	movs	r4, #255	; 0xff
	}

	/* Return status. */
	return (ul_status);
}
   8114c:	4620      	mov	r0, r4
   8114e:	b003      	add	sp, #12
   81150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81154:	200002f0 	.word	0x200002f0
   81158:	00086e8d 	.word	0x00086e8d
   8115c:	431bde83 	.word	0x431bde83
   81160:	00086ed7 	.word	0x00086ed7
   81164:	00086e91 	.word	0x00086e91
   81168:	200023f0 	.word	0x200023f0

0008116c <iso7816_send_char>:
 * \param uc_char Char to be sent.
 *
 * \return status of US_CSR.
 */
uint32_t iso7816_send_char(Usart* p_usart, uint8_t uc_char)
{
   8116c:	b570      	push	{r4, r5, r6, lr}
   8116e:	4604      	mov	r4, r0
   81170:	460e      	mov	r6, r1
	uint32_t ul_status;

	if (USART_RCV == gs_uc_state) {
   81172:	4b14      	ldr	r3, [pc, #80]	; (811c4 <iso7816_send_char+0x58>)
   81174:	781b      	ldrb	r3, [r3, #0]
   81176:	2b01      	cmp	r3, #1
   81178:	d013      	beq.n	811a2 <iso7816_send_char+0x36>
		usart_reset_nack(p_usart);
		gs_uc_state = USART_SEND;
	}

	/* Wait USART ready for transmit. */
	while ((usart_get_status(p_usart) & US_CSR_TXRDY) == 0) {
   8117a:	4d13      	ldr	r5, [pc, #76]	; (811c8 <iso7816_send_char+0x5c>)
   8117c:	4620      	mov	r0, r4
   8117e:	47a8      	blx	r5
   81180:	f010 0f02 	tst.w	r0, #2
   81184:	d0fa      	beq.n	8117c <iso7816_send_char+0x10>
	}

	/* There is no character in the US_THR, transmit a char. */
	usart_write(p_usart, uc_char);
   81186:	4631      	mov	r1, r6
   81188:	4620      	mov	r0, r4
   8118a:	4b10      	ldr	r3, [pc, #64]	; (811cc <iso7816_send_char+0x60>)
   8118c:	4798      	blx	r3

	ul_status = usart_get_status(p_usart) & (US_CSR_OVRE |
   8118e:	4620      	mov	r0, r4
   81190:	4b0d      	ldr	r3, [pc, #52]	; (811c8 <iso7816_send_char+0x5c>)
   81192:	4798      	blx	r3
   81194:	f242 53e0 	movw	r3, #9696	; 0x25e0
			US_CSR_FRAME | US_CSR_PARE | US_CSR_TIMEOUT |
			US_CSR_NACK | US_CSR_ITER);

	if (ul_status != 0) {
   81198:	ea10 0503 	ands.w	r5, r0, r3
   8119c:	d10d      	bne.n	811ba <iso7816_send_char+0x4e>
		usart_reset_status(p_usart);
	}

	/* Return status. */
	return (ul_status);
}
   8119e:	4628      	mov	r0, r5
   811a0:	bd70      	pop	{r4, r5, r6, pc}
		usart_reset_status(p_usart);
   811a2:	4b0b      	ldr	r3, [pc, #44]	; (811d0 <iso7816_send_char+0x64>)
   811a4:	4798      	blx	r3
		usart_reset_iterations(p_usart);
   811a6:	4620      	mov	r0, r4
   811a8:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <iso7816_send_char+0x68>)
   811aa:	4798      	blx	r3
		usart_reset_nack(p_usart);
   811ac:	4620      	mov	r0, r4
   811ae:	4b0a      	ldr	r3, [pc, #40]	; (811d8 <iso7816_send_char+0x6c>)
   811b0:	4798      	blx	r3
		gs_uc_state = USART_SEND;
   811b2:	2200      	movs	r2, #0
   811b4:	4b03      	ldr	r3, [pc, #12]	; (811c4 <iso7816_send_char+0x58>)
   811b6:	701a      	strb	r2, [r3, #0]
   811b8:	e7df      	b.n	8117a <iso7816_send_char+0xe>
		usart_reset_status(p_usart);
   811ba:	4620      	mov	r0, r4
   811bc:	4b04      	ldr	r3, [pc, #16]	; (811d0 <iso7816_send_char+0x64>)
   811be:	4798      	blx	r3
	return (ul_status);
   811c0:	e7ed      	b.n	8119e <iso7816_send_char+0x32>
   811c2:	bf00      	nop
   811c4:	200002f0 	.word	0x200002f0
   811c8:	00086e8d 	.word	0x00086e8d
   811cc:	00086eb1 	.word	0x00086eb1
   811d0:	00086e91 	.word	0x00086e91
   811d4:	00086e99 	.word	0x00086e99
   811d8:	00086ea1 	.word	0x00086ea1

000811dc <iso7816_xfr_block_apdu_t0>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t0(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   811dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811e0:	b087      	sub	sp, #28
   811e2:	4607      	mov	r7, r0
   811e4:	9001      	str	r0, [sp, #4]
   811e6:	4689      	mov	r9, r1
   811e8:	4692      	mov	sl, r2
   811ea:	461c      	mov	r4, r3
	uint8_t uc_proc_byte;
	uint8_t uc_cmd_case;
	
	uint32_t status = 0;

	status |= iso7816_send_char(p_usart, p_apdu[0]); /* CLA */
   811ec:	7809      	ldrb	r1, [r1, #0]
   811ee:	4e6e      	ldr	r6, [pc, #440]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   811f0:	47b0      	blx	r6
   811f2:	4605      	mov	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[1]); /* INS */	
   811f4:	f899 1001 	ldrb.w	r1, [r9, #1]
   811f8:	4638      	mov	r0, r7
   811fa:	47b0      	blx	r6
   811fc:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[2]); /* P1 */
   811fe:	f899 1002 	ldrb.w	r1, [r9, #2]
   81202:	4638      	mov	r0, r7
   81204:	47b0      	blx	r6
   81206:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[3]); /* P2 */
   81208:	f899 1003 	ldrb.w	r1, [r9, #3]
   8120c:	4638      	mov	r0, r7
   8120e:	47b0      	blx	r6
   81210:	4305      	orrs	r5, r0
	status |= iso7816_send_char(p_usart, p_apdu[4]); /* P3 */
   81212:	f899 1004 	ldrb.w	r1, [r9, #4]
   81216:	4638      	mov	r0, r7
   81218:	47b0      	blx	r6
   8121a:	4305      	orrs	r5, r0

	/* Handle the four structures of command APDU. */
	us_apdu_index = 5;

	/* Check transfer cases */
	if (us_length == 4) {
   8121c:	2c04      	cmp	r4, #4
   8121e:	d02c      	beq.n	8127a <iso7816_xfr_block_apdu_t0+0x9e>
		uc_cmd_case = CASE1;
		us_ne_nc = 0;
	} else if (us_length == 5) {
   81220:	2c05      	cmp	r4, #5
   81222:	d010      	beq.n	81246 <iso7816_xfr_block_apdu_t0+0x6a>
		uc_cmd_case = CASE2;
		us_ne_nc = p_apdu[4];
		if (us_ne_nc == 0) {
			us_ne_nc = 256;
		}
	} else if (us_length == 6) {
   81224:	2c06      	cmp	r4, #6
   81226:	d016      	beq.n	81256 <iso7816_xfr_block_apdu_t0+0x7a>
		us_ne_nc = p_apdu[4];
		uc_cmd_case = CASE3;
	} else if (us_length == 7) {
   81228:	2c07      	cmp	r4, #7
   8122a:	d019      	beq.n	81260 <iso7816_xfr_block_apdu_t0+0x84>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
		} else {
			uc_cmd_case = CASE3;
		}
	} else {
		us_ne_nc = p_apdu[4];
   8122c:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81230:	bb94      	cbnz	r4, 81298 <iso7816_xfr_block_apdu_t0+0xbc>
			uc_cmd_case = CASE3;
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81232:	f899 3005 	ldrb.w	r3, [r9, #5]
   81236:	f899 4006 	ldrb.w	r4, [r9, #6]
   8123a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   8123e:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE3;
   81240:	f04f 0803 	mov.w	r8, #3
   81244:	e01c      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81246:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   8124a:	b9fc      	cbnz	r4, 8128c <iso7816_xfr_block_apdu_t0+0xb0>
		uc_cmd_case = CASE2;
   8124c:	f04f 0802 	mov.w	r8, #2
			us_ne_nc = 256;
   81250:	f44f 7480 	mov.w	r4, #256	; 0x100
   81254:	e014      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81256:	f899 4004 	ldrb.w	r4, [r9, #4]
		uc_cmd_case = CASE3;
   8125a:	f04f 0803 	mov.w	r8, #3
   8125e:	e00f      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		us_ne_nc = p_apdu[4];
   81260:	f899 4004 	ldrb.w	r4, [r9, #4]
		if (us_ne_nc == 0) {
   81264:	b9ac      	cbnz	r4, 81292 <iso7816_xfr_block_apdu_t0+0xb6>
			us_ne_nc = (p_apdu[5] << 8) + p_apdu[6];
   81266:	f899 3005 	ldrb.w	r3, [r9, #5]
   8126a:	f899 4006 	ldrb.w	r4, [r9, #6]
   8126e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
   81272:	b2a4      	uxth	r4, r4
			uc_cmd_case = CASE2;
   81274:	f04f 0802 	mov.w	r8, #2
   81278:	e002      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
		uc_cmd_case = CASE1;
   8127a:	f04f 0801 	mov.w	r8, #1
		us_ne_nc = 0;
   8127e:	2400      	movs	r4, #0
		uc_cmd_case = CASE2;
   81280:	2300      	movs	r3, #0
   81282:	9302      	str	r3, [sp, #8]
   81284:	9303      	str	r3, [sp, #12]
   81286:	2705      	movs	r7, #5
		}
	}

	/* Handle procedure bytes. */
	do {
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   81288:	4e48      	ldr	r6, [pc, #288]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   8128a:	e056      	b.n	8133a <iso7816_xfr_block_apdu_t0+0x15e>
		uc_cmd_case = CASE2;
   8128c:	f04f 0802 	mov.w	r8, #2
   81290:	e7f6      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81292:	f04f 0803 	mov.w	r8, #3
   81296:	e7f3      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
			uc_cmd_case = CASE3;
   81298:	f04f 0803 	mov.w	r8, #3
   8129c:	e7f0      	b.n	81280 <iso7816_xfr_block_apdu_t0+0xa4>
				((uc_proc_byte & 0xF0) == 0x90)) {
			uc_sw1 = 1;
		}
		/* Handle INS. */
		else if (p_apdu[1] == uc_proc_byte) {
			if (uc_cmd_case == CASE2) {
   8129e:	f1b8 0f02 	cmp.w	r8, #2
   812a2:	d026      	beq.n	812f2 <iso7816_xfr_block_apdu_t0+0x116>
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
				} while (0 != --us_ne_nc);
			} else {
				/* Send data. */
				do {
					status |= iso7816_send_char(p_usart,
   812a4:	f8df b100 	ldr.w	fp, [pc, #256]	; 813a8 <iso7816_xfr_block_apdu_t0+0x1cc>
							p_apdu[us_apdu_index++]);
   812a8:	1c7e      	adds	r6, r7, #1
   812aa:	b2b6      	uxth	r6, r6
					status |= iso7816_send_char(p_usart,
   812ac:	f819 1007 	ldrb.w	r1, [r9, r7]
   812b0:	9801      	ldr	r0, [sp, #4]
   812b2:	47d8      	blx	fp
   812b4:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   812b6:	3c01      	subs	r4, #1
   812b8:	b2a4      	uxth	r4, r4
							p_apdu[us_apdu_index++]);
   812ba:	4637      	mov	r7, r6
				} while (0 != --us_ne_nc);
   812bc:	2c00      	cmp	r4, #0
   812be:	d1f3      	bne.n	812a8 <iso7816_xfr_block_apdu_t0+0xcc>
			break;
		}
	} while (us_ne_nc != 0);

	/* Status Bytes. */
	if (uc_sw1 == 0) {
   812c0:	9b02      	ldr	r3, [sp, #8]
   812c2:	2b00      	cmp	r3, #0
   812c4:	d065      	beq.n	81392 <iso7816_xfr_block_apdu_t0+0x1b6>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
	} else {
		p_message[us_message_index++] = uc_proc_byte;
   812c6:	9a03      	ldr	r2, [sp, #12]
   812c8:	1c54      	adds	r4, r2, #1
   812ca:	b2a4      	uxth	r4, r4
   812cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   812d0:	f80a 3002 	strb.w	r3, [sl, r2]
	}

	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812d4:	eb0a 0104 	add.w	r1, sl, r4
   812d8:	9801      	ldr	r0, [sp, #4]
   812da:	4b34      	ldr	r3, [pc, #208]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   812dc:	4798      	blx	r3
	
	printf("%x\n", (unsigned int)status);
   812de:	ea45 0100 	orr.w	r1, r5, r0
   812e2:	4833      	ldr	r0, [pc, #204]	; (813b0 <iso7816_xfr_block_apdu_t0+0x1d4>)
   812e4:	4b33      	ldr	r3, [pc, #204]	; (813b4 <iso7816_xfr_block_apdu_t0+0x1d8>)
   812e6:	4798      	blx	r3
	status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW2 */
   812e8:	1c60      	adds	r0, r4, #1

	return (us_message_index);
   812ea:	b280      	uxth	r0, r0
}
   812ec:	b007      	add	sp, #28
   812ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812f2:	9903      	ldr	r1, [sp, #12]
   812f4:	4626      	mov	r6, r4
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   812f6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 813ac <iso7816_xfr_block_apdu_t0+0x1d0>
   812fa:	1c4f      	adds	r7, r1, #1
   812fc:	b2bf      	uxth	r7, r7
   812fe:	4451      	add	r1, sl
   81300:	9801      	ldr	r0, [sp, #4]
   81302:	47c8      	blx	r9
   81304:	4305      	orrs	r5, r0
				} while (0 != --us_ne_nc);
   81306:	3e01      	subs	r6, #1
   81308:	b2b6      	uxth	r6, r6
					status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8130a:	4639      	mov	r1, r7
				} while (0 != --us_ne_nc);
   8130c:	2e00      	cmp	r6, #0
   8130e:	d1f4      	bne.n	812fa <iso7816_xfr_block_apdu_t0+0x11e>
   81310:	9b03      	ldr	r3, [sp, #12]
   81312:	441c      	add	r4, r3
   81314:	b2a3      	uxth	r3, r4
   81316:	9303      	str	r3, [sp, #12]
   81318:	e7d2      	b.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
				status |= iso7816_get_char(p_usart, &p_message[us_message_index++]);
   8131a:	9a03      	ldr	r2, [sp, #12]
   8131c:	f102 0b01 	add.w	fp, r2, #1
   81320:	fa1f fb8b 	uxth.w	fp, fp
   81324:	eb0a 0102 	add.w	r1, sl, r2
   81328:	9801      	ldr	r0, [sp, #4]
   8132a:	47b0      	blx	r6
   8132c:	4305      	orrs	r5, r0
   8132e:	f8cd b00c 	str.w	fp, [sp, #12]
			us_ne_nc--;
   81332:	3c01      	subs	r4, #1
   81334:	b2a4      	uxth	r4, r4
	} while (us_ne_nc != 0);
   81336:	2c00      	cmp	r4, #0
   81338:	d0c2      	beq.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
		status |= iso7816_get_char(p_usart, &uc_proc_byte);
   8133a:	f10d 0117 	add.w	r1, sp, #23
   8133e:	9801      	ldr	r0, [sp, #4]
   81340:	47b0      	blx	r6
   81342:	4305      	orrs	r5, r0
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81344:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if (ISO_NULL_VAL == uc_proc_byte) {
   81348:	2b60      	cmp	r3, #96	; 0x60
   8134a:	d0f4      	beq.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8134c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
		else if (((uc_proc_byte & 0xF0) == 0x60) ||
   81350:	2a60      	cmp	r2, #96	; 0x60
   81352:	d018      	beq.n	81386 <iso7816_xfr_block_apdu_t0+0x1aa>
   81354:	2a90      	cmp	r2, #144	; 0x90
   81356:	d019      	beq.n	8138c <iso7816_xfr_block_apdu_t0+0x1b0>
		else if (p_apdu[1] == uc_proc_byte) {
   81358:	f899 2001 	ldrb.w	r2, [r9, #1]
   8135c:	4293      	cmp	r3, r2
   8135e:	d09e      	beq.n	8129e <iso7816_xfr_block_apdu_t0+0xc2>
		uint8_t uc_proc_byte_x = (uc_proc_byte ^ 0xff);
   81360:	43db      	mvns	r3, r3
		else if (p_apdu[1] == uc_proc_byte_x) {
   81362:	b2db      	uxtb	r3, r3
   81364:	4293      	cmp	r3, r2
   81366:	d1ab      	bne.n	812c0 <iso7816_xfr_block_apdu_t0+0xe4>
			if (uc_cmd_case == CASE2) {
   81368:	f1b8 0f02 	cmp.w	r8, #2
   8136c:	d0d5      	beq.n	8131a <iso7816_xfr_block_apdu_t0+0x13e>
				status |= iso7816_send_char(p_usart, p_apdu[us_apdu_index++]);
   8136e:	f107 0b01 	add.w	fp, r7, #1
   81372:	fa1f fb8b 	uxth.w	fp, fp
   81376:	f819 1007 	ldrb.w	r1, [r9, r7]
   8137a:	9801      	ldr	r0, [sp, #4]
   8137c:	4b0a      	ldr	r3, [pc, #40]	; (813a8 <iso7816_xfr_block_apdu_t0+0x1cc>)
   8137e:	4798      	blx	r3
   81380:	4305      	orrs	r5, r0
   81382:	465f      	mov	r7, fp
   81384:	e7d5      	b.n	81332 <iso7816_xfr_block_apdu_t0+0x156>
			uc_sw1 = 1;
   81386:	2301      	movs	r3, #1
   81388:	9302      	str	r3, [sp, #8]
   8138a:	e7d4      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
   8138c:	2301      	movs	r3, #1
   8138e:	9302      	str	r3, [sp, #8]
   81390:	e7d1      	b.n	81336 <iso7816_xfr_block_apdu_t0+0x15a>
		status |= iso7816_get_char(p_usart, &p_message[us_message_index++]); /* SW1 */
   81392:	9b03      	ldr	r3, [sp, #12]
   81394:	1c5c      	adds	r4, r3, #1
   81396:	b2a4      	uxth	r4, r4
   81398:	eb0a 0103 	add.w	r1, sl, r3
   8139c:	9801      	ldr	r0, [sp, #4]
   8139e:	4b03      	ldr	r3, [pc, #12]	; (813ac <iso7816_xfr_block_apdu_t0+0x1d0>)
   813a0:	4798      	blx	r3
   813a2:	4305      	orrs	r5, r0
   813a4:	e796      	b.n	812d4 <iso7816_xfr_block_apdu_t0+0xf8>
   813a6:	bf00      	nop
   813a8:	0008116d 	.word	0x0008116d
   813ac:	000810d5 	.word	0x000810d5
   813b0:	0008e448 	.word	0x0008e448
   813b4:	000878b5 	.word	0x000878b5

000813b8 <iso7816_xfr_block_apdu_t1>:
 *
 * \return           Message index.
 */
uint16_t iso7816_xfr_block_apdu_t1(Usart* p_usart, const uint8_t *p_apdu,
		uint8_t *p_message, uint16_t us_length)
{
   813b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;
	uint16_t edc;
	uint32_t rx_len;
	uint16_t us_message_index = 0;

	if (us_length <= 0) {
   813bc:	2b00      	cmp	r3, #0
   813be:	f000 80a4 	beq.w	8150a <iso7816_xfr_block_apdu_t1+0x152>
   813c2:	4690      	mov	r8, r2
   813c4:	460d      	mov	r5, r1
   813c6:	4683      	mov	fp, r0
		return false;
	}

	if (tc3 & 0x1) {
   813c8:	4b72      	ldr	r3, [pc, #456]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   813ca:	781e      	ldrb	r6, [r3, #0]
   813cc:	f006 0a01 	and.w	sl, r6, #1
   813d0:	f346 0600 	sbfx	r6, r6, #0, #1
   813d4:	b2b6      	uxth	r6, r6
	} else {
		edc = 0;
	}

	/* Update the edc for the data to be transmitted */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813d6:	f891 9002 	ldrb.w	r9, [r1, #2]
   813da:	f109 0903 	add.w	r9, r9, #3
   813de:	2400      	movs	r4, #0
		*edc = iso7816_update_crc(data, *edc);
   813e0:	4f6d      	ldr	r7, [pc, #436]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   813e2:	e006      	b.n	813f2 <iso7816_xfr_block_apdu_t1+0x3a>
   813e4:	4631      	mov	r1, r6
   813e6:	47b8      	blx	r7
   813e8:	4606      	mov	r6, r0
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   813ea:	3401      	adds	r4, #1
   813ec:	b2e4      	uxtb	r4, r4
   813ee:	454c      	cmp	r4, r9
   813f0:	da06      	bge.n	81400 <iso7816_xfr_block_apdu_t1+0x48>
		iso7816_update_edc(p_apdu[index], &edc);
   813f2:	5d28      	ldrb	r0, [r5, r4]
	if (tc3 & 0x1) {  /* type = CRC */
   813f4:	f1ba 0f00 	cmp.w	sl, #0
   813f8:	d1f4      	bne.n	813e4 <iso7816_xfr_block_apdu_t1+0x2c>
		*edc = *edc ^ data;
   813fa:	4046      	eors	r6, r0
   813fc:	b2b6      	uxth	r6, r6
   813fe:	e7f4      	b.n	813ea <iso7816_xfr_block_apdu_t1+0x32>
   81400:	2400      	movs	r4, #0
	}

	/* Transmit Data Bytes */
	for (index = 0; index < (p_apdu[2] + 3); index++) {
		iso7816_send_char(p_usart, p_apdu[index]);
   81402:	4f66      	ldr	r7, [pc, #408]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   81404:	5d29      	ldrb	r1, [r5, r4]
   81406:	4658      	mov	r0, fp
   81408:	47b8      	blx	r7
	for (index = 0; index < (p_apdu[2] + 3); index++) {
   8140a:	3401      	adds	r4, #1
   8140c:	b2e4      	uxtb	r4, r4
   8140e:	78ab      	ldrb	r3, [r5, #2]
   81410:	3303      	adds	r3, #3
   81412:	429c      	cmp	r4, r3
   81414:	dbf6      	blt.n	81404 <iso7816_xfr_block_apdu_t1+0x4c>
	}

	/* Transmit EDC */
	iso7816_send_char(p_usart, (uint8_t)edc);
   81416:	b2f1      	uxtb	r1, r6
   81418:	4658      	mov	r0, fp
   8141a:	4b60      	ldr	r3, [pc, #384]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   8141c:	4798      	blx	r3

	if (tc3 & 0x1) {
   8141e:	4b5d      	ldr	r3, [pc, #372]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81420:	781b      	ldrb	r3, [r3, #0]
   81422:	f013 0f01 	tst.w	r3, #1
   81426:	d14f      	bne.n	814c8 <iso7816_xfr_block_apdu_t1+0x110>
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
	}

	if (iso7816_get_char(p_usart, &p_message[0]) == 0xff) {
   81428:	4641      	mov	r1, r8
   8142a:	4658      	mov	r0, fp
   8142c:	4b5c      	ldr	r3, [pc, #368]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8142e:	4798      	blx	r3
   81430:	28ff      	cmp	r0, #255	; 0xff
   81432:	d06d      	beq.n	81510 <iso7816_xfr_block_apdu_t1+0x158>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[1]) == 0xff) {
   81434:	f108 0101 	add.w	r1, r8, #1
   81438:	4658      	mov	r0, fp
   8143a:	4b59      	ldr	r3, [pc, #356]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8143c:	4798      	blx	r3
   8143e:	28ff      	cmp	r0, #255	; 0xff
   81440:	d069      	beq.n	81516 <iso7816_xfr_block_apdu_t1+0x15e>
		return us_message_index;
	}

	us_message_index++;

	if (iso7816_get_char(p_usart, &p_message[2]) == 0xff) {
   81442:	f108 0102 	add.w	r1, r8, #2
   81446:	4658      	mov	r0, fp
   81448:	4b55      	ldr	r3, [pc, #340]	; (815a0 <iso7816_xfr_block_apdu_t1+0x1e8>)
   8144a:	4798      	blx	r3
   8144c:	28ff      	cmp	r0, #255	; 0xff
   8144e:	d065      	beq.n	8151c <iso7816_xfr_block_apdu_t1+0x164>
		return us_message_index;
	}

	us_message_index++;

	rx_len = p_message[2] + 1;
   81450:	f898 4002 	ldrb.w	r4, [r8, #2]
   81454:	1c65      	adds	r5, r4, #1

	if (tc3 & 0x1) {
   81456:	4b4f      	ldr	r3, [pc, #316]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   81458:	781b      	ldrb	r3, [r3, #0]
   8145a:	f013 0301 	ands.w	r3, r3, #1
   8145e:	d038      	beq.n	814d2 <iso7816_xfr_block_apdu_t1+0x11a>
		rx_len++;
   81460:	f105 0901 	add.w	r9, r5, #1
	}

	for (index = 3; index < (rx_len + 3); index++) {
   81464:	1d2e      	adds	r6, r5, #4
   81466:	2e03      	cmp	r6, #3
		rx_len++;
   81468:	bf88      	it	hi
   8146a:	464d      	movhi	r5, r9
	for (index = 3; index < (rx_len + 3); index++) {
   8146c:	f240 8082 	bls.w	81574 <iso7816_xfr_block_apdu_t1+0x1bc>
		rx_len++;
   81470:	2103      	movs	r1, #3
   81472:	460c      	mov	r4, r1
		if (iso7816_get_char(p_usart, &p_message[index]) == 0xff) {
   81474:	f8df 9128 	ldr.w	r9, [pc, #296]	; 815a0 <iso7816_xfr_block_apdu_t1+0x1e8>
   81478:	4441      	add	r1, r8
   8147a:	4658      	mov	r0, fp
   8147c:	47c8      	blx	r9
   8147e:	28ff      	cmp	r0, #255	; 0xff
   81480:	d04f      	beq.n	81522 <iso7816_xfr_block_apdu_t1+0x16a>
	for (index = 3; index < (rx_len + 3); index++) {
   81482:	3401      	adds	r4, #1
   81484:	b2e4      	uxtb	r4, r4
   81486:	4621      	mov	r1, r4
   81488:	42b4      	cmp	r4, r6
   8148a:	d3f5      	bcc.n	81478 <iso7816_xfr_block_apdu_t1+0xc0>
			return us_message_index;
		}
	}

	/* Check for the CRC Error */
	if (tc3 & 0x1) {
   8148c:	4b41      	ldr	r3, [pc, #260]	; (81594 <iso7816_xfr_block_apdu_t1+0x1dc>)
   8148e:	781b      	ldrb	r3, [r3, #0]
   81490:	f013 0f01 	tst.w	r3, #1
   81494:	d148      	bne.n	81528 <iso7816_xfr_block_apdu_t1+0x170>
		}
	} else {
		edc = 0;
		edc = edc ^ p_message[0];
		edc = edc ^ p_message[1];
		edc = edc ^ p_message[2];
   81496:	f898 2001 	ldrb.w	r2, [r8, #1]
   8149a:	f898 3000 	ldrb.w	r3, [r8]
   8149e:	405a      	eors	r2, r3
   814a0:	f898 3002 	ldrb.w	r3, [r8, #2]
   814a4:	405a      	eors	r2, r3
   814a6:	2103      	movs	r1, #3
   814a8:	460b      	mov	r3, r1

		for (index = 3; index < (rx_len + 3); index++) {
			edc = edc ^ p_message[index];
   814aa:	f818 1001 	ldrb.w	r1, [r8, r1]
   814ae:	404a      	eors	r2, r1
		for (index = 3; index < (rx_len + 3); index++) {
   814b0:	3301      	adds	r3, #1
   814b2:	b2db      	uxtb	r3, r3
   814b4:	4619      	mov	r1, r3
   814b6:	42b3      	cmp	r3, r6
   814b8:	d3f7      	bcc.n	814aa <iso7816_xfr_block_apdu_t1+0xf2>
		}

		if (edc != p_message[index + 1]) {
   814ba:	4441      	add	r1, r8
   814bc:	784b      	ldrb	r3, [r1, #1]
   814be:	4293      	cmp	r3, r2
   814c0:	d01f      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814c2:	2003      	movs	r0, #3
   814c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		iso7816_send_char(p_usart, (uint8_t)edc >> 8);
   814c8:	2100      	movs	r1, #0
   814ca:	4658      	mov	r0, fp
   814cc:	4b33      	ldr	r3, [pc, #204]	; (8159c <iso7816_xfr_block_apdu_t1+0x1e4>)
   814ce:	4798      	blx	r3
   814d0:	e7aa      	b.n	81428 <iso7816_xfr_block_apdu_t1+0x70>
	for (index = 3; index < (rx_len + 3); index++) {
   814d2:	1cee      	adds	r6, r5, #3
   814d4:	2e03      	cmp	r6, #3
   814d6:	d8cb      	bhi.n	81470 <iso7816_xfr_block_apdu_t1+0xb8>
	if (tc3 & 0x1) {
   814d8:	2b00      	cmp	r3, #0
   814da:	d14a      	bne.n	81572 <iso7816_xfr_block_apdu_t1+0x1ba>
		edc = edc ^ p_message[2];
   814dc:	f898 2000 	ldrb.w	r2, [r8]
   814e0:	f898 3001 	ldrb.w	r3, [r8, #1]
   814e4:	405a      	eors	r2, r3
   814e6:	f898 3002 	ldrb.w	r3, [r8, #2]
   814ea:	405a      	eors	r2, r3
		for (index = 3; index < (rx_len + 3); index++) {
   814ec:	2103      	movs	r1, #3
   814ee:	e7e4      	b.n	814ba <iso7816_xfr_block_apdu_t1+0x102>
				((edc & 0xFF) != p_message[rx_len - 1])) {
   814f0:	44a8      	add	r8, r5
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   814f2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   814f6:	b2c0      	uxtb	r0, r0
   814f8:	4283      	cmp	r3, r0
   814fa:	d002      	beq.n	81502 <iso7816_xfr_block_apdu_t1+0x14a>
			return us_message_index;
   814fc:	2003      	movs	r0, #3
   814fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	us_message_index += rx_len;
   81502:	1ce8      	adds	r0, r5, #3
   81504:	b280      	uxth	r0, r0
	return us_message_index;
   81506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8150a:	4618      	mov	r0, r3
   8150c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81510:	2000      	movs	r0, #0
   81512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   81516:	2001      	movs	r0, #1
   81518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return us_message_index;
   8151c:	2002      	movs	r0, #2
   8151e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return us_message_index;
   81522:	2003      	movs	r0, #3
   81524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		edc = iso7816_update_crc(p_message[0], edc);
   81528:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8152c:	f898 0000 	ldrb.w	r0, [r8]
   81530:	4c19      	ldr	r4, [pc, #100]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   81532:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[1], edc);
   81534:	4601      	mov	r1, r0
   81536:	f898 0001 	ldrb.w	r0, [r8, #1]
   8153a:	47a0      	blx	r4
		edc = iso7816_update_crc(p_message[2], edc);
   8153c:	4601      	mov	r1, r0
   8153e:	f898 0002 	ldrb.w	r0, [r8, #2]
   81542:	47a0      	blx	r4
   81544:	2303      	movs	r3, #3
   81546:	461c      	mov	r4, r3
			edc = iso7816_update_crc(p_message[index], edc);
   81548:	4f13      	ldr	r7, [pc, #76]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8154a:	4601      	mov	r1, r0
   8154c:	f818 0003 	ldrb.w	r0, [r8, r3]
   81550:	47b8      	blx	r7
		for (index = 3; index < (rx_len + 3); index++) {
   81552:	3401      	adds	r4, #1
   81554:	b2e4      	uxtb	r4, r4
   81556:	4623      	mov	r3, r4
   81558:	42b4      	cmp	r4, r6
   8155a:	d3f6      	bcc.n	8154a <iso7816_xfr_block_apdu_t1+0x192>
		if (((edc >> 8) != p_message[rx_len - 2]) ||
   8155c:	eb08 0305 	add.w	r3, r8, r5
   81560:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   81564:	f3c0 230f 	ubfx	r3, r0, #8, #16
   81568:	429a      	cmp	r2, r3
   8156a:	d0c1      	beq.n	814f0 <iso7816_xfr_block_apdu_t1+0x138>
			return us_message_index;
   8156c:	2003      	movs	r0, #3
   8156e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx_len = p_message[2] + 1;
   81572:	46a9      	mov	r9, r5
		edc = iso7816_update_crc(p_message[0], edc);
   81574:	f64f 71ff 	movw	r1, #65535	; 0xffff
   81578:	f898 0000 	ldrb.w	r0, [r8]
   8157c:	4d06      	ldr	r5, [pc, #24]	; (81598 <iso7816_xfr_block_apdu_t1+0x1e0>)
   8157e:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[1], edc);
   81580:	4601      	mov	r1, r0
   81582:	f898 0001 	ldrb.w	r0, [r8, #1]
   81586:	47a8      	blx	r5
		edc = iso7816_update_crc(p_message[2], edc);
   81588:	4601      	mov	r1, r0
   8158a:	4620      	mov	r0, r4
   8158c:	47a8      	blx	r5
   8158e:	464d      	mov	r5, r9
   81590:	e7e4      	b.n	8155c <iso7816_xfr_block_apdu_t1+0x1a4>
   81592:	bf00      	nop
   81594:	20001927 	.word	0x20001927
   81598:	00081091 	.word	0x00081091
   8159c:	0008116d 	.word	0x0008116d
   815a0:	000810d5 	.word	0x000810d5

000815a4 <iso7816_data_block_atr>:
 * \param p_usart Pointer to the usart device.
 * \param p_atr    Pointer to ATR buffer.
 * \param p_length Pointer for store the ATR length.
 */
void iso7816_data_block_atr(Usart* p_usart, uint8_t *p_atr, uint8_t *p_length)
{
   815a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815a8:	4607      	mov	r7, r0
   815aa:	460e      	mov	r6, r1
   815ac:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint8_t uc_value;

	*p_length = 0;
   815ae:	2300      	movs	r3, #0
   815b0:	7013      	strb	r3, [r2, #0]

	ta1=0;
   815b2:	4a55      	ldr	r2, [pc, #340]	; (81708 <iso7816_data_block_atr+0x164>)
   815b4:	7013      	strb	r3, [r2, #0]
	td1=0;
   815b6:	4a55      	ldr	r2, [pc, #340]	; (8170c <iso7816_data_block_atr+0x168>)
   815b8:	7013      	strb	r3, [r2, #0]
	tc3=0;
   815ba:	4a55      	ldr	r2, [pc, #340]	; (81710 <iso7816_data_block_atr+0x16c>)
   815bc:	7013      	strb	r3, [r2, #0]

	/* Read ATR TS. */
	iso7816_get_char(p_usart, &p_atr[0]);
   815be:	4c55      	ldr	r4, [pc, #340]	; (81714 <iso7816_data_block_atr+0x170>)
   815c0:	47a0      	blx	r4

	/* Read ATR T0. */
	iso7816_get_char(p_usart, &p_atr[1]);
   815c2:	1c71      	adds	r1, r6, #1
   815c4:	4638      	mov	r0, r7
   815c6:	47a0      	blx	r4

	uc_value = p_atr[1] & 0xF0;
   815c8:	7874      	ldrb	r4, [r6, #1]
   815ca:	f004 09f0 	and.w	r9, r4, #240	; 0xf0
	i = 2;

	/* Read ATR T1. */
	if (uc_value & 0x10) { /* TA[1] */
   815ce:	f014 0f10 	tst.w	r4, #16
   815d2:	d11d      	bne.n	81610 <iso7816_data_block_atr+0x6c>
	i = 2;
   815d4:	2502      	movs	r5, #2
		iso7816_get_char(p_usart, &p_atr[i++]);
		ta1 = p_atr[2];
	}

	if (uc_value & 0x20) { /* TB[1] */
   815d6:	f014 0f20 	tst.w	r4, #32
   815da:	d122      	bne.n	81622 <iso7816_data_block_atr+0x7e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x40) { /* TC[1] */
   815dc:	f014 0f40 	tst.w	r4, #64	; 0x40
   815e0:	d127      	bne.n	81632 <iso7816_data_block_atr+0x8e>
		iso7816_get_char(p_usart, &p_atr[i++]);
	}

	if (uc_value & 0x80) { /* TD[1] */
   815e2:	f019 0f80 	tst.w	r9, #128	; 0x80
   815e6:	d12b      	bne.n	81640 <iso7816_data_block_atr+0x9c>
			uc_value = 0;
		}
	}

	/* Historical Bytes. */
	uc_value = p_atr[1] & 0x0F;
   815e8:	7873      	ldrb	r3, [r6, #1]
	for (j = 0; j < uc_value; j++) {
   815ea:	f013 030f 	ands.w	r3, r3, #15
   815ee:	d00b      	beq.n	81608 <iso7816_data_block_atr+0x64>
   815f0:	1974      	adds	r4, r6, r5
   815f2:	eb05 0903 	add.w	r9, r5, r3
   815f6:	444e      	add	r6, r9
		iso7816_get_char(p_usart, &p_atr[i++]);
   815f8:	4d46      	ldr	r5, [pc, #280]	; (81714 <iso7816_data_block_atr+0x170>)
   815fa:	4621      	mov	r1, r4
   815fc:	4638      	mov	r0, r7
   815fe:	47a8      	blx	r5
   81600:	3401      	adds	r4, #1
	for (j = 0; j < uc_value; j++) {
   81602:	42b4      	cmp	r4, r6
   81604:	d1f9      	bne.n	815fa <iso7816_data_block_atr+0x56>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81606:	464d      	mov	r5, r9
	}

	*p_length = i;
   81608:	f888 5000 	strb.w	r5, [r8]
}
   8160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		iso7816_get_char(p_usart, &p_atr[i++]);
   81610:	1cb1      	adds	r1, r6, #2
   81612:	4638      	mov	r0, r7
   81614:	4b3f      	ldr	r3, [pc, #252]	; (81714 <iso7816_data_block_atr+0x170>)
   81616:	4798      	blx	r3
		ta1 = p_atr[2];
   81618:	78b2      	ldrb	r2, [r6, #2]
   8161a:	4b3b      	ldr	r3, [pc, #236]	; (81708 <iso7816_data_block_atr+0x164>)
   8161c:	701a      	strb	r2, [r3, #0]
		iso7816_get_char(p_usart, &p_atr[i++]);
   8161e:	2503      	movs	r5, #3
   81620:	e7d9      	b.n	815d6 <iso7816_data_block_atr+0x32>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81622:	f105 0a01 	add.w	sl, r5, #1
   81626:	1971      	adds	r1, r6, r5
   81628:	4638      	mov	r0, r7
   8162a:	4b3a      	ldr	r3, [pc, #232]	; (81714 <iso7816_data_block_atr+0x170>)
   8162c:	4798      	blx	r3
   8162e:	4655      	mov	r5, sl
   81630:	e7d4      	b.n	815dc <iso7816_data_block_atr+0x38>
		iso7816_get_char(p_usart, &p_atr[i++]);
   81632:	1c6c      	adds	r4, r5, #1
   81634:	1971      	adds	r1, r6, r5
   81636:	4638      	mov	r0, r7
   81638:	4b36      	ldr	r3, [pc, #216]	; (81714 <iso7816_data_block_atr+0x170>)
   8163a:	4798      	blx	r3
   8163c:	4625      	mov	r5, r4
   8163e:	e7d0      	b.n	815e2 <iso7816_data_block_atr+0x3e>
		iso7816_get_char(p_usart, &p_atr[i]);
   81640:	1971      	adds	r1, r6, r5
   81642:	4638      	mov	r0, r7
   81644:	4b33      	ldr	r3, [pc, #204]	; (81714 <iso7816_data_block_atr+0x170>)
   81646:	4798      	blx	r3
		td1 = p_atr[i];
   81648:	f816 9005 	ldrb.w	r9, [r6, r5]
   8164c:	4b2f      	ldr	r3, [pc, #188]	; (8170c <iso7816_data_block_atr+0x168>)
   8164e:	f883 9000 	strb.w	r9, [r3]
		uc_value = p_atr[i++] & 0xF0;
   81652:	1c6c      	adds	r4, r5, #1
	if (uc_value) {
   81654:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   81658:	d00b      	beq.n	81672 <iso7816_data_block_atr+0xce>
		if (uc_value & 0x10) { /* TA[2] */
   8165a:	f019 0f10 	tst.w	r9, #16
   8165e:	d10a      	bne.n	81676 <iso7816_data_block_atr+0xd2>
		if (uc_value & 0x20) { /* TB[2] */
   81660:	f019 0f20 	tst.w	r9, #32
   81664:	d10e      	bne.n	81684 <iso7816_data_block_atr+0xe0>
		if (uc_value & 0x40) { /* TC[2] */
   81666:	f019 0f40 	tst.w	r9, #64	; 0x40
   8166a:	d112      	bne.n	81692 <iso7816_data_block_atr+0xee>
		if (uc_value & 0x80) { /* TD[2] */
   8166c:	f01a 0f80 	tst.w	sl, #128	; 0x80
   81670:	d116      	bne.n	816a0 <iso7816_data_block_atr+0xfc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81672:	4625      	mov	r5, r4
   81674:	e7b8      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81676:	3502      	adds	r5, #2
   81678:	1931      	adds	r1, r6, r4
   8167a:	4638      	mov	r0, r7
   8167c:	4b25      	ldr	r3, [pc, #148]	; (81714 <iso7816_data_block_atr+0x170>)
   8167e:	4798      	blx	r3
   81680:	462c      	mov	r4, r5
   81682:	e7ed      	b.n	81660 <iso7816_data_block_atr+0xbc>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81684:	1c65      	adds	r5, r4, #1
   81686:	1931      	adds	r1, r6, r4
   81688:	4638      	mov	r0, r7
   8168a:	4b22      	ldr	r3, [pc, #136]	; (81714 <iso7816_data_block_atr+0x170>)
   8168c:	4798      	blx	r3
   8168e:	462c      	mov	r4, r5
   81690:	e7e9      	b.n	81666 <iso7816_data_block_atr+0xc2>
			iso7816_get_char(p_usart, &p_atr[i++]);
   81692:	1c65      	adds	r5, r4, #1
   81694:	1931      	adds	r1, r6, r4
   81696:	4638      	mov	r0, r7
   81698:	4b1e      	ldr	r3, [pc, #120]	; (81714 <iso7816_data_block_atr+0x170>)
   8169a:	4798      	blx	r3
   8169c:	462c      	mov	r4, r5
   8169e:	e7e5      	b.n	8166c <iso7816_data_block_atr+0xc8>
			iso7816_get_char(p_usart, &p_atr[i]);
   816a0:	1931      	adds	r1, r6, r4
   816a2:	4638      	mov	r0, r7
   816a4:	4b1b      	ldr	r3, [pc, #108]	; (81714 <iso7816_data_block_atr+0x170>)
   816a6:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816a8:	1c65      	adds	r5, r4, #1
   816aa:	f816 9004 	ldrb.w	r9, [r6, r4]
	if (uc_value) {
   816ae:	f019 0af0 	ands.w	sl, r9, #240	; 0xf0
   816b2:	d099      	beq.n	815e8 <iso7816_data_block_atr+0x44>
		if (uc_value & 0x10) { /* TA[3] */
   816b4:	f019 0f10 	tst.w	r9, #16
   816b8:	d10e      	bne.n	816d8 <iso7816_data_block_atr+0x134>
		if (uc_value & 0x20) { /* TB[3] */
   816ba:	f019 0f20 	tst.w	r9, #32
   816be:	d112      	bne.n	816e6 <iso7816_data_block_atr+0x142>
		if (uc_value & 0x40) { /* TC[3] */
   816c0:	f019 0f40 	tst.w	r9, #64	; 0x40
   816c4:	d116      	bne.n	816f4 <iso7816_data_block_atr+0x150>
		if (uc_value & 0x80) { /* TD[3] */
   816c6:	f01a 0f80 	tst.w	sl, #128	; 0x80
   816ca:	d08d      	beq.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i]);
   816cc:	1971      	adds	r1, r6, r5
   816ce:	4638      	mov	r0, r7
   816d0:	4b10      	ldr	r3, [pc, #64]	; (81714 <iso7816_data_block_atr+0x170>)
   816d2:	4798      	blx	r3
			uc_value = p_atr[i++] & 0xF0;
   816d4:	3501      	adds	r5, #1
   816d6:	e787      	b.n	815e8 <iso7816_data_block_atr+0x44>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816d8:	3402      	adds	r4, #2
   816da:	1971      	adds	r1, r6, r5
   816dc:	4638      	mov	r0, r7
   816de:	4b0d      	ldr	r3, [pc, #52]	; (81714 <iso7816_data_block_atr+0x170>)
   816e0:	4798      	blx	r3
   816e2:	4625      	mov	r5, r4
   816e4:	e7e9      	b.n	816ba <iso7816_data_block_atr+0x116>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816e6:	1c6c      	adds	r4, r5, #1
   816e8:	1971      	adds	r1, r6, r5
   816ea:	4638      	mov	r0, r7
   816ec:	4b09      	ldr	r3, [pc, #36]	; (81714 <iso7816_data_block_atr+0x170>)
   816ee:	4798      	blx	r3
   816f0:	4625      	mov	r5, r4
   816f2:	e7e5      	b.n	816c0 <iso7816_data_block_atr+0x11c>
			iso7816_get_char(p_usart, &p_atr[i++]);
   816f4:	1c6c      	adds	r4, r5, #1
   816f6:	1971      	adds	r1, r6, r5
   816f8:	4638      	mov	r0, r7
   816fa:	4b06      	ldr	r3, [pc, #24]	; (81714 <iso7816_data_block_atr+0x170>)
   816fc:	4798      	blx	r3
			tc3 = p_atr[i - 1];
   816fe:	5d72      	ldrb	r2, [r6, r5]
   81700:	4b03      	ldr	r3, [pc, #12]	; (81710 <iso7816_data_block_atr+0x16c>)
   81702:	701a      	strb	r2, [r3, #0]
			iso7816_get_char(p_usart, &p_atr[i++]);
   81704:	4625      	mov	r5, r4
   81706:	e7de      	b.n	816c6 <iso7816_data_block_atr+0x122>
   81708:	20001926 	.word	0x20001926
   8170c:	20001928 	.word	0x20001928
   81710:	20001927 	.word	0x20001927
   81714:	000810d5 	.word	0x000810d5

00081718 <iso7816_warm_reset>:
 * \brief Warm reset.
 *
 * \param p_usart Pointer to the usart device.
 */
void iso7816_warm_reset(Usart* p_usart)
{
   81718:	b510      	push	{r4, lr}
   8171a:	b082      	sub	sp, #8
   8171c:	4604      	mov	r4, r0
	uint32_t i;
	uint32_t ul_data;

	iso7816_icc_power_off();
   8171e:	4b16      	ldr	r3, [pc, #88]	; (81778 <iso7816_warm_reset+0x60>)
   81720:	4798      	blx	r3

	/* tb: wait 400 cycles. */
	for (i = 0; i < (RST_WAIT_TIME * (g_ul_clk / 1000000)); i++) {
   81722:	4b16      	ldr	r3, [pc, #88]	; (8177c <iso7816_warm_reset+0x64>)
   81724:	681b      	ldr	r3, [r3, #0]
   81726:	4a16      	ldr	r2, [pc, #88]	; (81780 <iso7816_warm_reset+0x68>)
   81728:	fba2 2303 	umull	r2, r3, r2, r3
   8172c:	0c9b      	lsrs	r3, r3, #18
   8172e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   81732:	00db      	lsls	r3, r3, #3
   81734:	d00c      	beq.n	81750 <iso7816_warm_reset+0x38>
   81736:	2200      	movs	r2, #0
   81738:	4810      	ldr	r0, [pc, #64]	; (8177c <iso7816_warm_reset+0x64>)
   8173a:	4911      	ldr	r1, [pc, #68]	; (81780 <iso7816_warm_reset+0x68>)
   8173c:	3201      	adds	r2, #1
   8173e:	6803      	ldr	r3, [r0, #0]
   81740:	fba1 e303 	umull	lr, r3, r1, r3
   81744:	0c9b      	lsrs	r3, r3, #18
   81746:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   8174a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   8174e:	d3f5      	bcc.n	8173c <iso7816_warm_reset+0x24>
	}

	usart_read(p_usart, &ul_data);
   81750:	a901      	add	r1, sp, #4
   81752:	4620      	mov	r0, r4
   81754:	4b0b      	ldr	r3, [pc, #44]	; (81784 <iso7816_warm_reset+0x6c>)
   81756:	4798      	blx	r3
	usart_reset_status(p_usart);
   81758:	4620      	mov	r0, r4
   8175a:	4b0b      	ldr	r3, [pc, #44]	; (81788 <iso7816_warm_reset+0x70>)
   8175c:	4798      	blx	r3
	usart_reset_iterations(p_usart);
   8175e:	4620      	mov	r0, r4
   81760:	4b0a      	ldr	r3, [pc, #40]	; (8178c <iso7816_warm_reset+0x74>)
   81762:	4798      	blx	r3
	usart_reset_nack(p_usart);
   81764:	4620      	mov	r0, r4
   81766:	4b0a      	ldr	r3, [pc, #40]	; (81790 <iso7816_warm_reset+0x78>)
   81768:	4798      	blx	r3
	gpio_set_pin_high(gs_ul_rst_pin_idx);
   8176a:	4b0a      	ldr	r3, [pc, #40]	; (81794 <iso7816_warm_reset+0x7c>)
   8176c:	6818      	ldr	r0, [r3, #0]
   8176e:	4b0a      	ldr	r3, [pc, #40]	; (81798 <iso7816_warm_reset+0x80>)
   81770:	4798      	blx	r3

	iso7816_icc_power_on();
}
   81772:	b002      	add	sp, #8
   81774:	bd10      	pop	{r4, pc}
   81776:	bf00      	nop
   81778:	000810c1 	.word	0x000810c1
   8177c:	200023f0 	.word	0x200023f0
   81780:	431bde83 	.word	0x431bde83
   81784:	00086ed7 	.word	0x00086ed7
   81788:	00086e91 	.word	0x00086e91
   8178c:	00086e99 	.word	0x00086e99
   81790:	00086ea1 	.word	0x00086ea1
   81794:	200023f4 	.word	0x200023f4
   81798:	000851df 	.word	0x000851df

0008179c <iso7816_decode_atr>:
 *
 * \param p_usart Pointer to the usart device.
 * \param p_atr Pinter on ATR buffer.
 */
uint8_t iso7816_decode_atr(Usart* p_usart, uint8_t *p_atr)
{
   8179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817a0:	b09c      	sub	sp, #112	; 0x70
   817a2:	4686      	mov	lr, r0
   817a4:	4688      	mov	r8, r1
	uint32_t ftable[16] = {0, 372, 558, 744, 1116, 1488, 1860, 0,
   817a6:	4e65      	ldr	r6, [pc, #404]	; (8193c <iso7816_decode_atr+0x1a0>)
   817a8:	ac0c      	add	r4, sp, #48	; 0x30
   817aa:	4635      	mov	r5, r6
   817ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   817b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   817b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   817bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			       0, 512, 768, 1024, 1536, 2048, 0, 0};
	uint32_t dtable[10] = {0, 1, 2, 4, 8, 16, 32, 64, 12, 20};
   817c0:	ad02      	add	r5, sp, #8
   817c2:	f106 0440 	add.w	r4, r6, #64	; 0x40
   817c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   817cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   817ce:	e894 0003 	ldmia.w	r4, {r0, r1}
   817d2:	e885 0003 	stmia.w	r5, {r0, r1}
	uint8_t ppss[4] = {0,0,0,0};
   817d6:	2300      	movs	r3, #0
   817d8:	9301      	str	r3, [sp, #4]
	uint32_t y;
	uint8_t uc_offset;
	uint32_t fidi = 0;

	i = 2;
	y = p_atr[1] & 0xF0;
   817da:	f898 1001 	ldrb.w	r1, [r8, #1]

	/* Read ATR Ti. */
	uc_offset = 1;

	if (y & 0x10) {
   817de:	f011 0f10 	tst.w	r1, #16
   817e2:	d018      	beq.n	81816 <iso7816_decode_atr+0x7a>
	y = p_atr[1] & 0xF0;
   817e4:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   817e8:	2202      	movs	r2, #2
   817ea:	e004      	b.n	817f6 <iso7816_decode_atr+0x5a>
			if (y & 0x40) { /* TC[i] */
				i++;
			}

			if (y & 0x80) { /* TD[i] */
				y = p_atr[i++] & 0xF0;
   817ec:	f818 3002 	ldrb.w	r3, [r8, r2]
   817f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   817f4:	3201      	adds	r2, #1
		while (y) {
   817f6:	b173      	cbz	r3, 81816 <iso7816_decode_atr+0x7a>
			if (y & 0x10) { /* TA[i] */
   817f8:	f013 0f10 	tst.w	r3, #16
				i++;
   817fc:	bf18      	it	ne
   817fe:	3201      	addne	r2, #1
			if (y & 0x20) { /* TB[i] */
   81800:	f013 0f20 	tst.w	r3, #32
				i++;
   81804:	bf18      	it	ne
   81806:	3201      	addne	r2, #1
			if (y & 0x40) { /* TC[i] */
   81808:	f013 0f40 	tst.w	r3, #64	; 0x40
				i++;
   8180c:	bf18      	it	ne
   8180e:	3201      	addne	r2, #1
			if (y & 0x80) { /* TD[i] */
   81810:	f013 0f80 	tst.w	r3, #128	; 0x80
   81814:	d1ea      	bne.n	817ec <iso7816_decode_atr+0x50>
			uc_offset++;
		}
	}

	y = p_atr[1] & 0x0F;
	for (j = 0; j < y; j++) {
   81816:	f011 020f 	ands.w	r2, r1, #15
   8181a:	d003      	beq.n	81824 <iso7816_decode_atr+0x88>
   8181c:	2300      	movs	r3, #0
   8181e:	3301      	adds	r3, #1
   81820:	429a      	cmp	r2, r3
   81822:	d1fc      	bne.n	8181e <iso7816_decode_atr+0x82>
		i++;
	}

	if (td1 & 0x10) {
   81824:	4b46      	ldr	r3, [pc, #280]	; (81940 <iso7816_decode_atr+0x1a4>)
   81826:	7818      	ldrb	r0, [r3, #0]
   81828:	f010 0f10 	tst.w	r0, #16
   8182c:	f040 8081 	bne.w	81932 <iso7816_decode_atr+0x196>
		return 0;
	}

	if (ta1 && ((ta1 & 0xf) != 0)) {
   81830:	4b44      	ldr	r3, [pc, #272]	; (81944 <iso7816_decode_atr+0x1a8>)
   81832:	781b      	ldrb	r3, [r3, #0]
   81834:	b17b      	cbz	r3, 81856 <iso7816_decode_atr+0xba>
   81836:	f013 020f 	ands.w	r2, r3, #15
   8183a:	d044      	beq.n	818c6 <iso7816_decode_atr+0x12a>
		fidi = ftable[(ta1 >> 4) & 0xf] / dtable[ta1 & 0xf];
   8183c:	091b      	lsrs	r3, r3, #4
   8183e:	a91c      	add	r1, sp, #112	; 0x70
   81840:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81844:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   81848:	f853 6c40 	ldr.w	r6, [r3, #-64]
   8184c:	f852 3c68 	ldr.w	r3, [r2, #-104]
   81850:	fbb6 f6f3 	udiv	r6, r6, r3
   81854:	e000      	b.n	81858 <iso7816_decode_atr+0xbc>
	uint32_t fidi = 0;
   81856:	2600      	movs	r6, #0
	}

	if (td1 & 0xf) {
   81858:	f010 000f 	ands.w	r0, r0, #15
   8185c:	d16a      	bne.n	81934 <iso7816_decode_atr+0x198>
   8185e:	4674      	mov	r4, lr
		return (td1 & 0xf);
	}
	
	// Propose speeds to card
	iso7816_send_char(p_usart, 0xff);
   81860:	21ff      	movs	r1, #255	; 0xff
   81862:	4670      	mov	r0, lr
   81864:	4d38      	ldr	r5, [pc, #224]	; (81948 <iso7816_decode_atr+0x1ac>)
   81866:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0x10);
   81868:	2110      	movs	r1, #16
   8186a:	4620      	mov	r0, r4
   8186c:	47a8      	blx	r5
	iso7816_send_char(p_usart, ta1);
   8186e:	4f35      	ldr	r7, [pc, #212]	; (81944 <iso7816_decode_atr+0x1a8>)
   81870:	7839      	ldrb	r1, [r7, #0]
   81872:	4620      	mov	r0, r4
   81874:	47a8      	blx	r5
	iso7816_send_char(p_usart, 0xff ^ 0x10 ^ ta1);
   81876:	7839      	ldrb	r1, [r7, #0]
   81878:	f081 01ef 	eor.w	r1, r1, #239	; 0xef
   8187c:	4620      	mov	r0, r4
   8187e:	47a8      	blx	r5

	iso7816_get_char(p_usart, &ppss[0]);
   81880:	a901      	add	r1, sp, #4
   81882:	4620      	mov	r0, r4
   81884:	4d31      	ldr	r5, [pc, #196]	; (8194c <iso7816_decode_atr+0x1b0>)
   81886:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[1]);
   81888:	f10d 0105 	add.w	r1, sp, #5
   8188c:	4620      	mov	r0, r4
   8188e:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[2]);
   81890:	f10d 0106 	add.w	r1, sp, #6
   81894:	4620      	mov	r0, r4
   81896:	47a8      	blx	r5
	iso7816_get_char(p_usart, &ppss[3]);
   81898:	f10d 0107 	add.w	r1, sp, #7
   8189c:	4620      	mov	r0, r4
   8189e:	47a8      	blx	r5

	if ((ppss[0] != 0xff) || (ppss[1] != 0x10)) {
   818a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818a4:	2bff      	cmp	r3, #255	; 0xff
   818a6:	d103      	bne.n	818b0 <iso7816_decode_atr+0x114>
   818a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   818ac:	2b10      	cmp	r3, #16
   818ae:	d00c      	beq.n	818ca <iso7816_decode_atr+0x12e>
		// Fail - if card doesn't support this we reset card again
		iso7816_warm_reset(p_usart);
   818b0:	4620      	mov	r0, r4
   818b2:	4b27      	ldr	r3, [pc, #156]	; (81950 <iso7816_decode_atr+0x1b4>)
   818b4:	4798      	blx	r3
		// Read ATR to clear buffer
		uint8_t plength;
		iso7816_data_block_atr(p_usart, p_atr, &plength);
   818b6:	f10d 0203 	add.w	r2, sp, #3
   818ba:	4641      	mov	r1, r8
   818bc:	4620      	mov	r0, r4
   818be:	4b25      	ldr	r3, [pc, #148]	; (81954 <iso7816_decode_atr+0x1b8>)
   818c0:	4798      	blx	r3
		return 0;
   818c2:	2000      	movs	r0, #0
   818c4:	e036      	b.n	81934 <iso7816_decode_atr+0x198>
	uint32_t fidi = 0;
   818c6:	2600      	movs	r6, #0
   818c8:	e7c6      	b.n	81858 <iso7816_decode_atr+0xbc>
	}

	if (ppss[2] != ta1) {
   818ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
   818ce:	4b1d      	ldr	r3, [pc, #116]	; (81944 <iso7816_decode_atr+0x1a8>)
   818d0:	781b      	ldrb	r3, [r3, #0]
   818d2:	4293      	cmp	r3, r2
   818d4:	d013      	beq.n	818fe <iso7816_decode_atr+0x162>
		if (ppss[3] == (0xff ^ 0x10 ^ ppss[2])) {
   818d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   818da:	f082 02ef 	eor.w	r2, r2, #239	; 0xef
   818de:	4293      	cmp	r3, r2
   818e0:	d11c      	bne.n	8191c <iso7816_decode_atr+0x180>
			fidi = ftable[(ppss[3] >>
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818e2:	091a      	lsrs	r2, r3, #4
			fidi = ftable[(ppss[3] >>
   818e4:	a91c      	add	r1, sp, #112	; 0x70
   818e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
					4) & 0xf] / dtable[ppss[3] & 0xf];
   818ea:	f003 030f 	and.w	r3, r3, #15
   818ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
			fidi = ftable[(ppss[3] >>
   818f2:	f852 6c40 	ldr.w	r6, [r2, #-64]
   818f6:	f853 3c68 	ldr.w	r3, [r3, #-104]
   818fa:	fbb6 f6f3 	udiv	r6, r6, r3
			return 0;
		}
	}

	/* Enable TX and RX. */
	usart_disable_rx(p_usart);
   818fe:	4620      	mov	r0, r4
   81900:	4b15      	ldr	r3, [pc, #84]	; (81958 <iso7816_decode_atr+0x1bc>)
   81902:	4798      	blx	r3
	usart_disable_tx(p_usart);
   81904:	4620      	mov	r0, r4
   81906:	4b15      	ldr	r3, [pc, #84]	; (8195c <iso7816_decode_atr+0x1c0>)
   81908:	4798      	blx	r3

	p_usart->US_FIDI = fidi;
   8190a:	6426      	str	r6, [r4, #64]	; 0x40

	usart_enable_rx(p_usart);
   8190c:	4620      	mov	r0, r4
   8190e:	4b14      	ldr	r3, [pc, #80]	; (81960 <iso7816_decode_atr+0x1c4>)
   81910:	4798      	blx	r3
	usart_enable_tx(p_usart);
   81912:	4620      	mov	r0, r4
   81914:	4b13      	ldr	r3, [pc, #76]	; (81964 <iso7816_decode_atr+0x1c8>)
   81916:	4798      	blx	r3

	return 0;
   81918:	2000      	movs	r0, #0
   8191a:	e00b      	b.n	81934 <iso7816_decode_atr+0x198>
			iso7816_warm_reset(p_usart);
   8191c:	4620      	mov	r0, r4
   8191e:	4b0c      	ldr	r3, [pc, #48]	; (81950 <iso7816_decode_atr+0x1b4>)
   81920:	4798      	blx	r3
			iso7816_data_block_atr(p_usart, p_atr, &plength);
   81922:	f10d 0203 	add.w	r2, sp, #3
   81926:	4641      	mov	r1, r8
   81928:	4620      	mov	r0, r4
   8192a:	4b0a      	ldr	r3, [pc, #40]	; (81954 <iso7816_decode_atr+0x1b8>)
   8192c:	4798      	blx	r3
			return 0;
   8192e:	2000      	movs	r0, #0
   81930:	e000      	b.n	81934 <iso7816_decode_atr+0x198>
		return 0;
   81932:	2000      	movs	r0, #0
}
   81934:	b01c      	add	sp, #112	; 0x70
   81936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8193a:	bf00      	nop
   8193c:	0008e3e0 	.word	0x0008e3e0
   81940:	20001928 	.word	0x20001928
   81944:	20001926 	.word	0x20001926
   81948:	0008116d 	.word	0x0008116d
   8194c:	000810d5 	.word	0x000810d5
   81950:	00081719 	.word	0x00081719
   81954:	000815a5 	.word	0x000815a5
   81958:	00086e7b 	.word	0x00086e7b
   8195c:	00086e6b 	.word	0x00086e6b
   81960:	00086e75 	.word	0x00086e75
   81964:	00086e65 	.word	0x00086e65

00081968 <iso7816_init>:
 * \param ul_mck          USART module input clock frequency.
 * \param ul_rst_pin_idx  Control smart card RST pin index.
 */
void iso7816_init(Usart* p_usart, const usart_iso7816_opt_t *p_usart_opt,
		uint32_t ul_mck, uint32_t ul_rst_pin_idx)
{
   81968:	b570      	push	{r4, r5, r6, lr}
   8196a:	4604      	mov	r4, r0
   8196c:	460d      	mov	r5, r1
   8196e:	4616      	mov	r6, r2
	/* Pin RST of ISO7816 initialize. */
	gs_ul_rst_pin_idx = ul_rst_pin_idx;
   81970:	4a0d      	ldr	r2, [pc, #52]	; (819a8 <iso7816_init+0x40>)
   81972:	6013      	str	r3, [r2, #0]
	gpio_set_pin_low(gs_ul_rst_pin_idx);
   81974:	4618      	mov	r0, r3
   81976:	4b0d      	ldr	r3, [pc, #52]	; (819ac <iso7816_init+0x44>)
   81978:	4798      	blx	r3

	/* Init the global variable for ISO7816. */
	g_ul_clk = ul_mck;
   8197a:	4b0d      	ldr	r3, [pc, #52]	; (819b0 <iso7816_init+0x48>)
   8197c:	601e      	str	r6, [r3, #0]

	usart_init_iso7816(p_usart, p_usart_opt, g_ul_clk);
   8197e:	681a      	ldr	r2, [r3, #0]
   81980:	4629      	mov	r1, r5
   81982:	4620      	mov	r0, r4
   81984:	4b0b      	ldr	r3, [pc, #44]	; (819b4 <iso7816_init+0x4c>)
   81986:	4798      	blx	r3

	/* Disable interrupts. */
	usart_disable_interrupt(p_usart, 0xffffffff);
   81988:	f04f 31ff 	mov.w	r1, #4294967295
   8198c:	4620      	mov	r0, r4
   8198e:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <iso7816_init+0x50>)
   81990:	4798      	blx	r3

	/* Write the Timeguard Register. */
	usart_set_tx_timeguard(p_usart, 5);
   81992:	2105      	movs	r1, #5
   81994:	4620      	mov	r0, r4
   81996:	4b09      	ldr	r3, [pc, #36]	; (819bc <iso7816_init+0x54>)
   81998:	4798      	blx	r3

	/* Enable TX and RX. */
	usart_enable_rx(p_usart);
   8199a:	4620      	mov	r0, r4
   8199c:	4b08      	ldr	r3, [pc, #32]	; (819c0 <iso7816_init+0x58>)
   8199e:	4798      	blx	r3
	usart_enable_tx(p_usart);
   819a0:	4620      	mov	r0, r4
   819a2:	4b08      	ldr	r3, [pc, #32]	; (819c4 <iso7816_init+0x5c>)
   819a4:	4798      	blx	r3
   819a6:	bd70      	pop	{r4, r5, r6, pc}
   819a8:	200023f4 	.word	0x200023f4
   819ac:	000851f9 	.word	0x000851f9
   819b0:	200023f0 	.word	0x200023f0
   819b4:	00086c2d 	.word	0x00086c2d
   819b8:	00086e85 	.word	0x00086e85
   819bc:	00086e71 	.word	0x00086e71
   819c0:	00086e75 	.word	0x00086e75
   819c4:	00086e65 	.word	0x00086e65

000819c8 <ctrl_scarddata_req>:
#define SCARD_MODE_AT88SC102_COMPAREBIT 0x08

/* Handle "Smartcard Data" request */
bool ctrl_scarddata_req(void)
{
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819c8:	4b0c      	ldr	r3, [pc, #48]	; (819fc <ctrl_scarddata_req+0x34>)
   819ca:	8859      	ldrh	r1, [r3, #2]
   819cc:	0a0b      	lsrs	r3, r1, #8
	uint8_t datalen = (udd_g_ctrlreq.req.wValue) & 0xFF;
	uint16_t rxlen;
	
	if (offset > scard_rx_buffer_size){
   819ce:	4a0c      	ldr	r2, [pc, #48]	; (81a00 <ctrl_scarddata_req+0x38>)
   819d0:	8812      	ldrh	r2, [r2, #0]
   819d2:	ebb2 2f11 	cmp.w	r2, r1, lsr #8
   819d6:	d30d      	bcc.n	819f4 <ctrl_scarddata_req+0x2c>
	uint8_t offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   819d8:	b2d8      	uxtb	r0, r3
		/* No data to send - point our buffer to memory actually used to prevent errors */
		rxlen = 0;
		offset = 0;
	} else {
		rxlen = scard_rx_buffer_size - offset;
   819da:	1ad3      	subs	r3, r2, r3
   819dc:	b29b      	uxth	r3, r3
   819de:	b2c9      	uxtb	r1, r1
   819e0:	428b      	cmp	r3, r1
   819e2:	bf28      	it	cs
   819e4:	460b      	movcs	r3, r1
		if (rxlen > datalen){
			rxlen = datalen;
		}
	}
	
	udd_g_ctrlreq.payload = scard_rx_buffer + offset;
   819e6:	4905      	ldr	r1, [pc, #20]	; (819fc <ctrl_scarddata_req+0x34>)
   819e8:	4a06      	ldr	r2, [pc, #24]	; (81a04 <ctrl_scarddata_req+0x3c>)
   819ea:	4402      	add	r2, r0
   819ec:	608a      	str	r2, [r1, #8]
	udd_g_ctrlreq.payload_size = rxlen;
   819ee:	818b      	strh	r3, [r1, #12]
	
	return true;
}
   819f0:	2001      	movs	r0, #1
   819f2:	4770      	bx	lr
		rxlen = 0;
   819f4:	2300      	movs	r3, #0
		offset = 0;
   819f6:	4618      	mov	r0, r3
   819f8:	e7f5      	b.n	819e6 <ctrl_scarddata_req+0x1e>
   819fa:	bf00      	nop
   819fc:	20002df4 	.word	0x20002df4
   81a00:	200024f8 	.word	0x200024f8
   81a04:	200024fc 	.word	0x200024fc

00081a08 <ctrl_scardconfig_req>:
{
	/* Version information, used to indicate to host computer what the firmware in the CW-Lite 
	   supports. */
	static uint8_t scard_protocol_version = 02;
	
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81a08:	4b0e      	ldr	r3, [pc, #56]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a0a:	789b      	ldrb	r3, [r3, #2]
   81a0c:	2b01      	cmp	r3, #1
   81a0e:	d004      	beq.n	81a1a <ctrl_scardconfig_req+0x12>
   81a10:	2b02      	cmp	r3, #2
   81a12:	d00a      	beq.n	81a2a <ctrl_scardconfig_req+0x22>
   81a14:	b17b      	cbz	r3, 81a36 <ctrl_scardconfig_req+0x2e>
   81a16:	2000      	movs	r0, #0
   81a18:	4770      	bx	lr
		case SCARD_CFG_ATR:
			udd_g_ctrlreq.payload = scard_atr;
   81a1a:	4b0a      	ldr	r3, [pc, #40]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a1c:	4a0a      	ldr	r2, [pc, #40]	; (81a48 <ctrl_scardconfig_req+0x40>)
   81a1e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = scard_atr_size;
   81a20:	4a0a      	ldr	r2, [pc, #40]	; (81a4c <ctrl_scardconfig_req+0x44>)
   81a22:	7812      	ldrb	r2, [r2, #0]
   81a24:	819a      	strh	r2, [r3, #12]
			return true;
   81a26:	2001      	movs	r0, #1
   81a28:	4770      	bx	lr
			break;
			
		case SCARD_CFG_PROTOCOL:
			udd_g_ctrlreq.payload = &scard_protocol;
   81a2a:	4b06      	ldr	r3, [pc, #24]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a2c:	4a08      	ldr	r2, [pc, #32]	; (81a50 <ctrl_scardconfig_req+0x48>)
   81a2e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a30:	2001      	movs	r0, #1
   81a32:	8198      	strh	r0, [r3, #12]
			return true;
   81a34:	4770      	bx	lr
			break;
			
		case SCARD_CFG_VERSION:
			udd_g_ctrlreq.payload = &scard_protocol_version;
   81a36:	4b03      	ldr	r3, [pc, #12]	; (81a44 <ctrl_scardconfig_req+0x3c>)
   81a38:	4a06      	ldr	r2, [pc, #24]	; (81a54 <ctrl_scardconfig_req+0x4c>)
   81a3a:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 1;
   81a3c:	2001      	movs	r0, #1
   81a3e:	8198      	strh	r0, [r3, #12]
		default:
			return false;
			break;
	}
	
}
   81a40:	4770      	bx	lr
   81a42:	bf00      	nop
   81a44:	20002df4 	.word	0x20002df4
   81a48:	20002600 	.word	0x20002600
   81a4c:	200025fc 	.word	0x200025fc
   81a50:	20002638 	.word	0x20002638
   81a54:	200002f1 	.word	0x200002f1

00081a58 <ctrl_scardaux_req>:

/* Handle "Smartcard Auxilary" request */
bool ctrl_scardaux_req(void)
{
	if(udd_g_ctrlreq.req.wValue == SCARD_MODE_AT88SC102_IN)
   81a58:	4b05      	ldr	r3, [pc, #20]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a5a:	885b      	ldrh	r3, [r3, #2]
   81a5c:	2b02      	cmp	r3, #2
   81a5e:	d001      	beq.n	81a64 <ctrl_scardaux_req+0xc>
	{	
		udd_g_ctrlreq.payload = &at88sc102_status;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
   81a60:	2000      	movs	r0, #0
}
   81a62:	4770      	bx	lr
		udd_g_ctrlreq.payload = &at88sc102_status;
   81a64:	4b02      	ldr	r3, [pc, #8]	; (81a70 <ctrl_scardaux_req+0x18>)
   81a66:	4a03      	ldr	r2, [pc, #12]	; (81a74 <ctrl_scardaux_req+0x1c>)
   81a68:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size = 1;
   81a6a:	2001      	movs	r0, #1
   81a6c:	8198      	strh	r0, [r3, #12]
		return true;
   81a6e:	4770      	bx	lr
   81a70:	20002df4 	.word	0x20002df4
   81a74:	20002637 	.word	0x20002637

00081a78 <ctrl_scarddata_cb>:

/* Handle "Smartcard Data" Output from Computer */
void ctrl_scarddata_cb(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81a78:	4b11      	ldr	r3, [pc, #68]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a7a:	88d8      	ldrh	r0, [r3, #6]
   81a7c:	899b      	ldrh	r3, [r3, #12]
   81a7e:	4283      	cmp	r3, r0
   81a80:	d31d      	bcc.n	81abe <ctrl_scarddata_cb+0x46>
	
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a82:	b1e0      	cbz	r0, 81abe <ctrl_scarddata_cb+0x46>
{
   81a84:	b5f0      	push	{r4, r5, r6, r7, lr}
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81a86:	4b0e      	ldr	r3, [pc, #56]	; (81ac0 <ctrl_scarddata_cb+0x48>)
   81a88:	885c      	ldrh	r4, [r3, #2]
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a8a:	f8d3 e008 	ldr.w	lr, [r3, #8]
   81a8e:	1c66      	adds	r6, r4, #1
   81a90:	b2b6      	uxth	r6, r6
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a92:	2200      	movs	r2, #0
   81a94:	4613      	mov	r3, r2
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81a96:	f8df c030 	ldr.w	ip, [pc, #48]	; 81ac8 <ctrl_scarddata_cb+0x50>
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81a9a:	4f0a      	ldr	r7, [pc, #40]	; (81ac4 <ctrl_scarddata_cb+0x4c>)
   81a9c:	e004      	b.n	81aa8 <ctrl_scarddata_cb+0x30>
	for(uint8_t i = 0; i < udd_g_ctrlreq.req.wLength; i++){		
   81a9e:	1c53      	adds	r3, r2, #1
   81aa0:	b2da      	uxtb	r2, r3
   81aa2:	4613      	mov	r3, r2
   81aa4:	4290      	cmp	r0, r2
   81aa6:	d909      	bls.n	81abc <ctrl_scarddata_cb+0x44>
		if ((udd_g_ctrlreq.req.wValue + i) < DATA_BUFFER_SIZE){
   81aa8:	1911      	adds	r1, r2, r4
   81aaa:	29ff      	cmp	r1, #255	; 0xff
   81aac:	dcf7      	bgt.n	81a9e <ctrl_scarddata_cb+0x26>
			scard_tx_buffer[udd_g_ctrlreq.req.wValue + i] = udd_g_ctrlreq.payload[i];
   81aae:	f81e 5002 	ldrb.w	r5, [lr, r2]
   81ab2:	f80c 5001 	strb.w	r5, [ip, r1]
			scard_tx_buffer_size = udd_g_ctrlreq.req.wValue + i + 1;
   81ab6:	4433      	add	r3, r6
   81ab8:	803b      	strh	r3, [r7, #0]
   81aba:	e7f0      	b.n	81a9e <ctrl_scarddata_cb+0x26>
		}
	}
}
   81abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81abe:	4770      	bx	lr
   81ac0:	20002df4 	.word	0x20002df4
   81ac4:	2000263a 	.word	0x2000263a
   81ac8:	200023f8 	.word	0x200023f8

00081acc <ctrl_scardaux_cb>:
	}
}

/* Handle "Smartcard Aux" Output from Computer */
void ctrl_scardaux_cb(void)
{
   81acc:	b508      	push	{r3, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81ace:	4a2d      	ldr	r2, [pc, #180]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ad0:	88d3      	ldrh	r3, [r2, #6]
   81ad2:	8992      	ldrh	r2, [r2, #12]
   81ad4:	429a      	cmp	r2, r3
   81ad6:	d303      	bcc.n	81ae0 <ctrl_scardaux_cb+0x14>
	
	if((udd_g_ctrlreq.req.wValue & 0xFF) == SCARD_MODE_AT88SC102_OUT)
   81ad8:	4a2a      	ldr	r2, [pc, #168]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81ada:	7892      	ldrb	r2, [r2, #2]
   81adc:	2a03      	cmp	r2, #3
   81ade:	d000      	beq.n	81ae2 <ctrl_scardaux_cb+0x16>
				break;
		}
		
	}
	return;
}
   81ae0:	bd08      	pop	{r3, pc}
		at88sc102_status = 0;
   81ae2:	4a29      	ldr	r2, [pc, #164]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81ae4:	2100      	movs	r1, #0
   81ae6:	7011      	strb	r1, [r2, #0]
		if (udd_g_ctrlreq.req.wLength < 1) return;
   81ae8:	2b00      	cmp	r3, #0
   81aea:	d0f9      	beq.n	81ae0 <ctrl_scardaux_cb+0x14>
		udd_g_ctrlreq.req.wLength--;
   81aec:	3b01      	subs	r3, #1
   81aee:	b29b      	uxth	r3, r3
   81af0:	4a24      	ldr	r2, [pc, #144]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81af2:	80d3      	strh	r3, [r2, #6]
		switch(udd_g_ctrlreq.payload[0]) {
   81af4:	6890      	ldr	r0, [r2, #8]
   81af6:	7802      	ldrb	r2, [r0, #0]
   81af8:	3a02      	subs	r2, #2
   81afa:	2a06      	cmp	r2, #6
   81afc:	d8f0      	bhi.n	81ae0 <ctrl_scardaux_cb+0x14>
   81afe:	e8df f002 	tbb	[pc, r2]
   81b02:	0b04      	.short	0x0b04
   81b04:	2f261e15 	.word	0x2f261e15
   81b08:	38          	.byte	0x38
   81b09:	00          	.byte	0x00
				initPortSMC();
   81b0a:	4b20      	ldr	r3, [pc, #128]	; (81b8c <ctrl_scardaux_cb+0xc0>)
   81b0c:	4798      	blx	r3
				at88sc102_status = firstDetectFunctionSMC();
   81b0e:	4b20      	ldr	r3, [pc, #128]	; (81b90 <ctrl_scardaux_cb+0xc4>)
   81b10:	4798      	blx	r3
   81b12:	4b1d      	ldr	r3, [pc, #116]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b14:	7018      	strb	r0, [r3, #0]
				break;
   81b16:	e7e3      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b18:	2b01      	cmp	r3, #1
   81b1a:	d9e1      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+1)), FALSE);
   81b1c:	2100      	movs	r1, #0
   81b1e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   81b22:	4b1c      	ldr	r3, [pc, #112]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b24:	4798      	blx	r3
   81b26:	4b18      	ldr	r3, [pc, #96]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b28:	7018      	strb	r0, [r3, #0]
				break;
   81b2a:	e7d9      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 2) return;
   81b2c:	2b01      	cmp	r3, #1
   81b2e:	d9d7      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				writeSecurityCode(((uint16_t *)(udd_g_ctrlreq.payload+1)));
   81b30:	3001      	adds	r0, #1
   81b32:	4b19      	ldr	r3, [pc, #100]	; (81b98 <ctrl_scardaux_cb+0xcc>)
   81b34:	4798      	blx	r3
				at88sc102_status = 1;
   81b36:	4b14      	ldr	r3, [pc, #80]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b38:	2201      	movs	r2, #1
   81b3a:	701a      	strb	r2, [r3, #0]
				break;
   81b3c:	e7d0      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (transformBlankCardIntoMooltipass() == RETURN_OK){
   81b3e:	4b17      	ldr	r3, [pc, #92]	; (81b9c <ctrl_scardaux_cb+0xd0>)
   81b40:	4798      	blx	r3
   81b42:	2800      	cmp	r0, #0
   81b44:	d1cc      	bne.n	81ae0 <ctrl_scardaux_cb+0x14>
					at88sc102_status = 1;
   81b46:	4b10      	ldr	r3, [pc, #64]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b48:	2201      	movs	r2, #1
   81b4a:	701a      	strb	r2, [r3, #0]
   81b4c:	e7c8      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				if (udd_g_ctrlreq.req.wLength < 3) return;
   81b4e:	2b02      	cmp	r3, #2
   81b50:	d9c6      	bls.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = securityValidationSMC(*((uint16_t *)(udd_g_ctrlreq.payload+2)), *(udd_g_ctrlreq.payload+1));
   81b52:	7841      	ldrb	r1, [r0, #1]
   81b54:	8840      	ldrh	r0, [r0, #2]
   81b56:	4b0f      	ldr	r3, [pc, #60]	; (81b94 <ctrl_scardaux_cb+0xc8>)
   81b58:	4798      	blx	r3
   81b5a:	4b0b      	ldr	r3, [pc, #44]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b5c:	7018      	strb	r0, [r3, #0]
				break;
   81b5e:	e7bf      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				at88sc102_status = getNumberOfSecurityCodeTriesLeft();
   81b60:	4b0f      	ldr	r3, [pc, #60]	; (81ba0 <ctrl_scardaux_cb+0xd4>)
   81b62:	4798      	blx	r3
   81b64:	4a08      	ldr	r2, [pc, #32]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b66:	7010      	strb	r0, [r2, #0]
				udd_g_ctrlreq.payload = &at88sc102_status;
   81b68:	4b06      	ldr	r3, [pc, #24]	; (81b84 <ctrl_scardaux_cb+0xb8>)
   81b6a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
   81b6c:	2201      	movs	r2, #1
   81b6e:	819a      	strh	r2, [r3, #12]
				break;
   81b70:	e7b6      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
				compareBit(15, 1);
   81b72:	2101      	movs	r1, #1
   81b74:	200f      	movs	r0, #15
   81b76:	4b0b      	ldr	r3, [pc, #44]	; (81ba4 <ctrl_scardaux_cb+0xd8>)
   81b78:	4798      	blx	r3
				at88sc102_status = 1; 
   81b7a:	4b03      	ldr	r3, [pc, #12]	; (81b88 <ctrl_scardaux_cb+0xbc>)
   81b7c:	2201      	movs	r2, #1
   81b7e:	701a      	strb	r2, [r3, #0]
				break;
   81b80:	e7ae      	b.n	81ae0 <ctrl_scardaux_cb+0x14>
   81b82:	bf00      	nop
   81b84:	20002df4 	.word	0x20002df4
   81b88:	20002637 	.word	0x20002637
   81b8c:	00080fed 	.word	0x00080fed
   81b90:	00080ec5 	.word	0x00080ec5
   81b94:	00080c0d 	.word	0x00080c0d
   81b98:	0008089d 	.word	0x0008089d
   81b9c:	00080935 	.word	0x00080935
   81ba0:	000809b9 	.word	0x000809b9
   81ba4:	00081011 	.word	0x00081011

00081ba8 <scard_reset_init>:

/* Reset Smart-Card Interface on SAM3U Device */
void scard_reset_init(void)
{
   81ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bac:	b088      	sub	sp, #32
	usart_iso7816_opt_t conf_iso7816_t;
	conf_iso7816_t.iso7816_hz = ISO7816_BAUDRATE *ISO7816_FI_DI; //4000000UL;
   81bae:	4b31      	ldr	r3, [pc, #196]	; (81c74 <scard_reset_init+0xcc>)
   81bb0:	9300      	str	r3, [sp, #0]
	conf_iso7816_t.fidi_ratio = ISO7816_FI_DI;
   81bb2:	f44f 73ba 	mov.w	r3, #372	; 0x174
   81bb6:	9301      	str	r3, [sp, #4]
	conf_iso7816_t.parity_type= US_MR_PAR_EVEN;
   81bb8:	2300      	movs	r3, #0
   81bba:	9302      	str	r3, [sp, #8]
	conf_iso7816_t.inhibit_nack = 0x00;
   81bbc:	9303      	str	r3, [sp, #12]
	conf_iso7816_t.dis_suc_nack = 0x00;
   81bbe:	9304      	str	r3, [sp, #16]
	conf_iso7816_t.max_iterations = 0x03;
   81bc0:	2503      	movs	r5, #3
   81bc2:	9505      	str	r5, [sp, #20]
	conf_iso7816_t.bit_order = 0x00;
   81bc4:	9306      	str	r3, [sp, #24]
	conf_iso7816_t.protocol_type = 0x00;	/* T=0 Protocol */
   81bc6:	9307      	str	r3, [sp, #28]
   81bc8:	200f      	movs	r0, #15
   81bca:	4b2b      	ldr	r3, [pc, #172]	; (81c78 <scard_reset_init+0xd0>)
   81bcc:	4798      	blx	r3
	
	sysclk_enable_peripheral_clock(SCARD_USART_ID);
	gpio_configure_pin(PIN_USART2_TXD, PIN_USART2_TXD_FLAGS);
   81bce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bd2:	2016      	movs	r0, #22
   81bd4:	4c29      	ldr	r4, [pc, #164]	; (81c7c <scard_reset_init+0xd4>)
   81bd6:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART2_SCK, PIN_USART2_SCK_FLAGS);
   81bd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81bdc:	2019      	movs	r0, #25
   81bde:	47a0      	blx	r4
	gpio_configure_pin(PIN_ISO7816_RST_IDX, PIN_ISO7816_RST_FLAG);
   81be0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81be4:	4628      	mov	r0, r5
   81be6:	47a0      	blx	r4
	iso7816_init(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz(), PIN_ISO7816_RST_IDX);
   81be8:	4c25      	ldr	r4, [pc, #148]	; (81c80 <scard_reset_init+0xd8>)
   81bea:	462b      	mov	r3, r5
   81bec:	4a25      	ldr	r2, [pc, #148]	; (81c84 <scard_reset_init+0xdc>)
   81bee:	4669      	mov	r1, sp
   81bf0:	4620      	mov	r0, r4
   81bf2:	4d25      	ldr	r5, [pc, #148]	; (81c88 <scard_reset_init+0xe0>)
   81bf4:	47a8      	blx	r5
	
	/* Reset (includes power off/on */
	iso7816_warm_reset(SCARD_USART);
   81bf6:	4620      	mov	r0, r4
   81bf8:	4b24      	ldr	r3, [pc, #144]	; (81c8c <scard_reset_init+0xe4>)
   81bfa:	4798      	blx	r3
	
	iso7816_data_block_atr(SCARD_USART, scard_atr, &scard_atr_size);
   81bfc:	4d24      	ldr	r5, [pc, #144]	; (81c90 <scard_reset_init+0xe8>)
   81bfe:	4e25      	ldr	r6, [pc, #148]	; (81c94 <scard_reset_init+0xec>)
   81c00:	462a      	mov	r2, r5
   81c02:	4631      	mov	r1, r6
   81c04:	4620      	mov	r0, r4
   81c06:	4b24      	ldr	r3, [pc, #144]	; (81c98 <scard_reset_init+0xf0>)
   81c08:	4798      	blx	r3
	scard_protocol = iso7816_decode_atr(SCARD_USART, scard_atr);
   81c0a:	4631      	mov	r1, r6
   81c0c:	4620      	mov	r0, r4
   81c0e:	4b23      	ldr	r3, [pc, #140]	; (81c9c <scard_reset_init+0xf4>)
   81c10:	4798      	blx	r3
   81c12:	4b23      	ldr	r3, [pc, #140]	; (81ca0 <scard_reset_init+0xf8>)
   81c14:	7018      	strb	r0, [r3, #0]
	
	printf("ATR (%d len): ", scard_atr_size);
   81c16:	7829      	ldrb	r1, [r5, #0]
   81c18:	4822      	ldr	r0, [pc, #136]	; (81ca4 <scard_reset_init+0xfc>)
   81c1a:	4b23      	ldr	r3, [pc, #140]	; (81ca8 <scard_reset_init+0x100>)
   81c1c:	4798      	blx	r3
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c1e:	782b      	ldrb	r3, [r5, #0]
   81c20:	b16b      	cbz	r3, 81c3e <scard_reset_init+0x96>
   81c22:	4635      	mov	r5, r6
   81c24:	2400      	movs	r4, #0
		printf("%02x ", scard_atr[i]);
   81c26:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81cbc <scard_reset_init+0x114>
   81c2a:	4f1f      	ldr	r7, [pc, #124]	; (81ca8 <scard_reset_init+0x100>)
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c2c:	4e18      	ldr	r6, [pc, #96]	; (81c90 <scard_reset_init+0xe8>)
		printf("%02x ", scard_atr[i]);
   81c2e:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c32:	4640      	mov	r0, r8
   81c34:	47b8      	blx	r7
	for(unsigned int i = 0; i < scard_atr_size; i++){
   81c36:	3401      	adds	r4, #1
   81c38:	7833      	ldrb	r3, [r6, #0]
   81c3a:	42a3      	cmp	r3, r4
   81c3c:	d8f7      	bhi.n	81c2e <scard_reset_init+0x86>
	}
	printf("\n");
   81c3e:	481b      	ldr	r0, [pc, #108]	; (81cac <scard_reset_init+0x104>)
   81c40:	4b19      	ldr	r3, [pc, #100]	; (81ca8 <scard_reset_init+0x100>)
   81c42:	4798      	blx	r3
	
	if (scard_protocol == 1) {
   81c44:	4b16      	ldr	r3, [pc, #88]	; (81ca0 <scard_reset_init+0xf8>)
   81c46:	781b      	ldrb	r3, [r3, #0]
   81c48:	2b01      	cmp	r3, #1
   81c4a:	d002      	beq.n	81c52 <scard_reset_init+0xaa>
		/* Enable TX and RX. */
		usart_enable_rx(SCARD_USART);
		usart_enable_tx(SCARD_USART);
	}

}
   81c4c:	b008      	add	sp, #32
   81c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conf_iso7816_t.protocol_type  = 1;
   81c52:	9307      	str	r3, [sp, #28]
		conf_iso7816_t.max_iterations = 0;
   81c54:	2300      	movs	r3, #0
   81c56:	9305      	str	r3, [sp, #20]
		usart_init_iso7816(SCARD_USART, &conf_iso7816_t, sysclk_get_cpu_hz());
   81c58:	4c09      	ldr	r4, [pc, #36]	; (81c80 <scard_reset_init+0xd8>)
   81c5a:	4a0a      	ldr	r2, [pc, #40]	; (81c84 <scard_reset_init+0xdc>)
   81c5c:	4669      	mov	r1, sp
   81c5e:	4620      	mov	r0, r4
   81c60:	4b13      	ldr	r3, [pc, #76]	; (81cb0 <scard_reset_init+0x108>)
   81c62:	4798      	blx	r3
		usart_enable_rx(SCARD_USART);
   81c64:	4620      	mov	r0, r4
   81c66:	4b13      	ldr	r3, [pc, #76]	; (81cb4 <scard_reset_init+0x10c>)
   81c68:	4798      	blx	r3
		usart_enable_tx(SCARD_USART);
   81c6a:	4620      	mov	r0, r4
   81c6c:	4b12      	ldr	r3, [pc, #72]	; (81cb8 <scard_reset_init+0x110>)
   81c6e:	4798      	blx	r3
}
   81c70:	e7ec      	b.n	81c4c <scard_reset_init+0xa4>
   81c72:	bf00      	nop
   81c74:	00367e00 	.word	0x00367e00
   81c78:	00085559 	.word	0x00085559
   81c7c:	00085215 	.word	0x00085215
   81c80:	40098000 	.word	0x40098000
   81c84:	05b8d800 	.word	0x05b8d800
   81c88:	00081969 	.word	0x00081969
   81c8c:	00081719 	.word	0x00081719
   81c90:	200025fc 	.word	0x200025fc
   81c94:	20002600 	.word	0x20002600
   81c98:	000815a5 	.word	0x000815a5
   81c9c:	0008179d 	.word	0x0008179d
   81ca0:	20002638 	.word	0x20002638
   81ca4:	0008e44c 	.word	0x0008e44c
   81ca8:	000878b5 	.word	0x000878b5
   81cac:	0008e540 	.word	0x0008e540
   81cb0:	00086c2d 	.word	0x00086c2d
   81cb4:	00086e75 	.word	0x00086e75
   81cb8:	00086e65 	.word	0x00086e65
   81cbc:	0008e45c 	.word	0x0008e45c

00081cc0 <ctrl_scardconfig_cb>:
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)	return;
   81cc0:	4b15      	ldr	r3, [pc, #84]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cc2:	88da      	ldrh	r2, [r3, #6]
   81cc4:	899b      	ldrh	r3, [r3, #12]
   81cc6:	429a      	cmp	r2, r3
   81cc8:	d824      	bhi.n	81d14 <ctrl_scardconfig_cb+0x54>
{
   81cca:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xff){
   81ccc:	4b12      	ldr	r3, [pc, #72]	; (81d18 <ctrl_scardconfig_cb+0x58>)
   81cce:	789b      	ldrb	r3, [r3, #2]
   81cd0:	2b01      	cmp	r3, #1
   81cd2:	d002      	beq.n	81cda <ctrl_scardconfig_cb+0x1a>
   81cd4:	2b05      	cmp	r3, #5
   81cd6:	d003      	beq.n	81ce0 <ctrl_scardconfig_cb+0x20>
}
   81cd8:	bd10      	pop	{r4, pc}
			scard_reset_init();
   81cda:	4b10      	ldr	r3, [pc, #64]	; (81d1c <ctrl_scardconfig_cb+0x5c>)
   81cdc:	4798      	blx	r3
			break;
   81cde:	e7fb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
			scard_rx_buffer_size = 0;
   81ce0:	4b0f      	ldr	r3, [pc, #60]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81ce2:	2200      	movs	r2, #0
   81ce4:	801a      	strh	r2, [r3, #0]
			if (scard_protocol){
   81ce6:	4b0f      	ldr	r3, [pc, #60]	; (81d24 <ctrl_scardconfig_cb+0x64>)
   81ce8:	781b      	ldrb	r3, [r3, #0]
   81cea:	b14b      	cbz	r3, 81d00 <ctrl_scardconfig_cb+0x40>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t1(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81cec:	4b0e      	ldr	r3, [pc, #56]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81cee:	881b      	ldrh	r3, [r3, #0]
   81cf0:	4a0e      	ldr	r2, [pc, #56]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81cf2:	490f      	ldr	r1, [pc, #60]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81cf4:	480f      	ldr	r0, [pc, #60]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81cf6:	4c10      	ldr	r4, [pc, #64]	; (81d38 <ctrl_scardconfig_cb+0x78>)
   81cf8:	47a0      	blx	r4
   81cfa:	4b09      	ldr	r3, [pc, #36]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81cfc:	8018      	strh	r0, [r3, #0]
   81cfe:	e7eb      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
				scard_rx_buffer_size = iso7816_xfr_block_apdu_t0(SCARD_USART, scard_tx_buffer, scard_rx_buffer, scard_tx_buffer_size);
   81d00:	4b09      	ldr	r3, [pc, #36]	; (81d28 <ctrl_scardconfig_cb+0x68>)
   81d02:	881b      	ldrh	r3, [r3, #0]
   81d04:	4a09      	ldr	r2, [pc, #36]	; (81d2c <ctrl_scardconfig_cb+0x6c>)
   81d06:	490a      	ldr	r1, [pc, #40]	; (81d30 <ctrl_scardconfig_cb+0x70>)
   81d08:	480a      	ldr	r0, [pc, #40]	; (81d34 <ctrl_scardconfig_cb+0x74>)
   81d0a:	4c0c      	ldr	r4, [pc, #48]	; (81d3c <ctrl_scardconfig_cb+0x7c>)
   81d0c:	47a0      	blx	r4
   81d0e:	4b04      	ldr	r3, [pc, #16]	; (81d20 <ctrl_scardconfig_cb+0x60>)
   81d10:	8018      	strh	r0, [r3, #0]
   81d12:	e7e1      	b.n	81cd8 <ctrl_scardconfig_cb+0x18>
   81d14:	4770      	bx	lr
   81d16:	bf00      	nop
   81d18:	20002df4 	.word	0x20002df4
   81d1c:	00081ba9 	.word	0x00081ba9
   81d20:	200024f8 	.word	0x200024f8
   81d24:	20002638 	.word	0x20002638
   81d28:	2000263a 	.word	0x2000263a
   81d2c:	200024fc 	.word	0x200024fc
   81d30:	200023f8 	.word	0x200023f8
   81d34:	40098000 	.word	0x40098000
   81d38:	000813b9 	.word	0x000813b9
   81d3c:	000811dd 	.word	0x000811dd

00081d40 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81d40:	b510      	push	{r4, lr}
   81d42:	4604      	mov	r4, r0
	int ret = 0;
	cpu_irq_enter_critical();
   81d44:	4b06      	ldr	r3, [pc, #24]	; (81d60 <FPGA_setlock+0x20>)
   81d46:	4798      	blx	r3
	if (_fpga_locked == fpga_unlocked)
   81d48:	4b06      	ldr	r3, [pc, #24]	; (81d64 <FPGA_setlock+0x24>)
   81d4a:	781b      	ldrb	r3, [r3, #0]
   81d4c:	b933      	cbnz	r3, 81d5c <FPGA_setlock+0x1c>
	{
		ret = 1;
		_fpga_locked = lockstatus;	
   81d4e:	4b05      	ldr	r3, [pc, #20]	; (81d64 <FPGA_setlock+0x24>)
   81d50:	701c      	strb	r4, [r3, #0]
		ret = 1;
   81d52:	2401      	movs	r4, #1
	}
	cpu_irq_leave_critical();
   81d54:	4b04      	ldr	r3, [pc, #16]	; (81d68 <FPGA_setlock+0x28>)
   81d56:	4798      	blx	r3
	return ret;
}
   81d58:	4620      	mov	r0, r4
   81d5a:	bd10      	pop	{r4, pc}
	int ret = 0;
   81d5c:	2400      	movs	r4, #0
   81d5e:	e7f9      	b.n	81d54 <FPGA_setlock+0x14>
   81d60:	00084f01 	.word	0x00084f01
   81d64:	20001929 	.word	0x20001929
   81d68:	00084f3d 	.word	0x00084f3d

00081d6c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
	_fpga_locked = fpga_unlocked;
   81d6c:	4b01      	ldr	r3, [pc, #4]	; (81d74 <FPGA_releaselock+0x8>)
   81d6e:	2200      	movs	r2, #0
   81d70:	701a      	strb	r2, [r3, #0]
}
   81d72:	4770      	bx	lr
   81d74:	20001929 	.word	0x20001929

00081d78 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
	return _fpga_locked;
   81d78:	4b01      	ldr	r3, [pc, #4]	; (81d80 <FPGA_lockstatus+0x8>)
   81d7a:	7818      	ldrb	r0, [r3, #0]
}
   81d7c:	4770      	bx	lr
   81d7e:	bf00      	nop
   81d80:	20001929 	.word	0x20001929

00081d84 <FPGA_setaddr>:
	FPGA_releaselock();
	cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81d84:	b508      	push	{r3, lr}
   81d86:	4601      	mov	r1, r0
	pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81d88:	4804      	ldr	r0, [pc, #16]	; (81d9c <FPGA_setaddr+0x18>)
   81d8a:	4b05      	ldr	r3, [pc, #20]	; (81da0 <FPGA_setaddr+0x1c>)
   81d8c:	4798      	blx	r3
	gpio_set_pin_low(FPGA_ALE_GPIO);
   81d8e:	2035      	movs	r0, #53	; 0x35
   81d90:	4b04      	ldr	r3, [pc, #16]	; (81da4 <FPGA_setaddr+0x20>)
   81d92:	4798      	blx	r3
	gpio_set_pin_high(FPGA_ALE_GPIO);
   81d94:	2035      	movs	r0, #53	; 0x35
   81d96:	4b04      	ldr	r3, [pc, #16]	; (81da8 <FPGA_setaddr+0x24>)
   81d98:	4798      	blx	r3
}
   81d9a:	bd08      	pop	{r3, pc}
   81d9c:	400e0e00 	.word	0x400e0e00
   81da0:	000851b7 	.word	0x000851b7
   81da4:	000851f9 	.word	0x000851f9
   81da8:	000851df 	.word	0x000851df

00081dac <smc_normaltiming>:
		*(xram+i) = data[i];
	}
}

//Set timing for normal mode
void smc_normaltiming(void){
   81dac:	b510      	push	{r4, lr}
	smc_set_setup_timing(SMC, 0,
   81dae:	4c0b      	ldr	r4, [pc, #44]	; (81ddc <smc_normaltiming+0x30>)
   81db0:	f44f 7280 	mov.w	r2, #256	; 0x100
   81db4:	2100      	movs	r1, #0
   81db6:	4620      	mov	r0, r4
   81db8:	4b09      	ldr	r3, [pc, #36]	; (81de0 <smc_normaltiming+0x34>)
   81dba:	4798      	blx	r3
	SMC_SETUP_NCS_WR_SETUP(1) |
	SMC_SETUP_NRD_SETUP(0) |
	SMC_SETUP_NCS_RD_SETUP(0)
	);
	
	smc_set_pulse_timing(SMC, 0,
   81dbc:	4a09      	ldr	r2, [pc, #36]	; (81de4 <smc_normaltiming+0x38>)
   81dbe:	2100      	movs	r1, #0
   81dc0:	4620      	mov	r0, r4
   81dc2:	4b09      	ldr	r3, [pc, #36]	; (81de8 <smc_normaltiming+0x3c>)
   81dc4:	4798      	blx	r3
	SMC_PULSE_NCS_WR_PULSE(1) |
	SMC_PULSE_NRD_PULSE(4) |
	SMC_PULSE_NCS_RD_PULSE(4)
	);
	
	smc_set_cycle_timing(SMC, 0,
   81dc6:	4a09      	ldr	r2, [pc, #36]	; (81dec <smc_normaltiming+0x40>)
   81dc8:	2100      	movs	r1, #0
   81dca:	4620      	mov	r0, r4
   81dcc:	4b08      	ldr	r3, [pc, #32]	; (81df0 <smc_normaltiming+0x44>)
   81dce:	4798      	blx	r3
	SMC_CYCLE_NWE_CYCLE(2) |
	SMC_CYCLE_NRD_CYCLE(5)
	);
	
	smc_set_mode(SMC, 0,
   81dd0:	2203      	movs	r2, #3
   81dd2:	2100      	movs	r1, #0
   81dd4:	4620      	mov	r0, r4
   81dd6:	4b07      	ldr	r3, [pc, #28]	; (81df4 <smc_normaltiming+0x48>)
   81dd8:	4798      	blx	r3
	SMC_MODE_READ_MODE_NRD_CTRL |
	SMC_MODE_WRITE_MODE_NWE_CTRL |
	SMC_MODE_DBW_BIT_8
	);
}
   81dda:	bd10      	pop	{r4, pc}
   81ddc:	400e0000 	.word	0x400e0000
   81de0:	000850e9 	.word	0x000850e9
   81de4:	04040101 	.word	0x04040101
   81de8:	000850f5 	.word	0x000850f5
   81dec:	00050002 	.word	0x00050002
   81df0:	00085101 	.word	0x00085101
   81df4:	0008510d 	.word	0x0008510d

00081df8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81df8:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81dfa:	f1a1 030e 	sub.w	r3, r1, #14
   81dfe:	2b01      	cmp	r3, #1
   81e00:	d802      	bhi.n	81e08 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   81e02:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   81e06:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e08:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   81e0c:	b672      	cpsid	i
   81e0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81e12:	2500      	movs	r5, #0
   81e14:	4b0a      	ldr	r3, [pc, #40]	; (81e40 <efc_perform_command+0x48>)
   81e16:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e18:	0212      	lsls	r2, r2, #8
   81e1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   81e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   81e22:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   81e26:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   81e28:	4311      	orrs	r1, r2
   81e2a:	4b06      	ldr	r3, [pc, #24]	; (81e44 <efc_perform_command+0x4c>)
   81e2c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   81e2e:	2c00      	cmp	r4, #0
   81e30:	d1e9      	bne.n	81e06 <efc_perform_command+0xe>
		cpu_irq_enable();
   81e32:	2201      	movs	r2, #1
   81e34:	4b02      	ldr	r3, [pc, #8]	; (81e40 <efc_perform_command+0x48>)
   81e36:	701a      	strb	r2, [r3, #0]
   81e38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81e3c:	b662      	cpsie	i
   81e3e:	bd38      	pop	{r3, r4, r5, pc}
   81e40:	200006ee 	.word	0x200006ee
   81e44:	2000006d 	.word	0x2000006d

00081e48 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   81e48:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e4a:	0189      	lsls	r1, r1, #6
   81e4c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81e4e:	2402      	movs	r4, #2
   81e50:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81e52:	f04f 31ff 	mov.w	r1, #4294967295
   81e56:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81e58:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81e5a:	605a      	str	r2, [r3, #4]
}
   81e5c:	bc10      	pop	{r4}
   81e5e:	4770      	bx	lr

00081e60 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81e60:	0189      	lsls	r1, r1, #6
   81e62:	2305      	movs	r3, #5
   81e64:	5043      	str	r3, [r0, r1]
   81e66:	4770      	bx	lr

00081e68 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81e68:	0189      	lsls	r1, r1, #6
   81e6a:	2302      	movs	r3, #2
   81e6c:	5043      	str	r3, [r0, r1]
   81e6e:	4770      	bx	lr

00081e70 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81e70:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   81e74:	61ca      	str	r2, [r1, #28]
   81e76:	4770      	bx	lr

00081e78 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e78:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   81e7c:	624a      	str	r2, [r1, #36]	; 0x24
   81e7e:	4770      	bx	lr

00081e80 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81e80:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   81e84:	6a08      	ldr	r0, [r1, #32]
}
   81e86:	4770      	bx	lr

00081e88 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81e88:	b570      	push	{r4, r5, r6, lr}
   81e8a:	b086      	sub	sp, #24
   81e8c:	4604      	mov	r4, r0
   81e8e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81e90:	2304      	movs	r3, #4
   81e92:	9300      	str	r3, [sp, #0]
   81e94:	ab02      	add	r3, sp, #8
   81e96:	220f      	movs	r2, #15
   81e98:	210e      	movs	r1, #14
   81e9a:	480d      	ldr	r0, [pc, #52]	; (81ed0 <flash_read_unique_id+0x48>)
   81e9c:	4d0d      	ldr	r5, [pc, #52]	; (81ed4 <flash_read_unique_id+0x4c>)
   81e9e:	47a8      	blx	r5
   81ea0:	b118      	cbz	r0, 81eaa <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81ea2:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   81ea4:	4628      	mov	r0, r5
   81ea6:	b006      	add	sp, #24
   81ea8:	bd70      	pop	{r4, r5, r6, pc}
   81eaa:	4605      	mov	r5, r0
   81eac:	2e04      	cmp	r6, #4
   81eae:	bf28      	it	cs
   81eb0:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81eb2:	b156      	cbz	r6, 81eca <flash_read_unique_id+0x42>
   81eb4:	aa02      	add	r2, sp, #8
   81eb6:	4623      	mov	r3, r4
   81eb8:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   81ebc:	f852 0b04 	ldr.w	r0, [r2], #4
   81ec0:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ec4:	428b      	cmp	r3, r1
   81ec6:	d1f9      	bne.n	81ebc <flash_read_unique_id+0x34>
   81ec8:	e7ec      	b.n	81ea4 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   81eca:	4635      	mov	r5, r6
   81ecc:	e7ea      	b.n	81ea4 <flash_read_unique_id+0x1c>
   81ece:	bf00      	nop
   81ed0:	400e0800 	.word	0x400e0800
   81ed4:	20000001 	.word	0x20000001

00081ed8 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   81ed8:	2300      	movs	r3, #0
   81eda:	6043      	str	r3, [r0, #4]
   81edc:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   81ede:	6083      	str	r3, [r0, #8]
}
   81ee0:	4770      	bx	lr
	...

00081ee4 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81ee4:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   81ee6:	b672      	cpsid	i
   81ee8:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   81eec:	4b11      	ldr	r3, [pc, #68]	; (81f34 <add_to_circ_buf+0x50>)
   81eee:	2400      	movs	r4, #0
   81ef0:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   81ef2:	6804      	ldr	r4, [r0, #0]
    newhead++;
   81ef4:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   81ef6:	2cc8      	cmp	r4, #200	; 0xc8
   81ef8:	bf28      	it	cs
   81efa:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   81efc:	6843      	ldr	r3, [r0, #4]
   81efe:	42a3      	cmp	r3, r4
   81f00:	d10b      	bne.n	81f1a <add_to_circ_buf+0x36>
    {
        if (!block)
   81f02:	2a00      	cmp	r2, #0
   81f04:	d1fa      	bne.n	81efc <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   81f06:	6883      	ldr	r3, [r0, #8]
   81f08:	3301      	adds	r3, #1
   81f0a:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   81f0c:	4b09      	ldr	r3, [pc, #36]	; (81f34 <add_to_circ_buf+0x50>)
   81f0e:	2201      	movs	r2, #1
   81f10:	701a      	strb	r2, [r3, #0]
   81f12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f16:	b662      	cpsie	i
            return;
   81f18:	e009      	b.n	81f2e <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   81f1a:	6803      	ldr	r3, [r0, #0]
   81f1c:	4403      	add	r3, r0
   81f1e:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   81f20:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   81f22:	4b04      	ldr	r3, [pc, #16]	; (81f34 <add_to_circ_buf+0x50>)
   81f24:	2201      	movs	r2, #1
   81f26:	701a      	strb	r2, [r3, #0]
   81f28:	f3bf 8f5f 	dmb	sy
   81f2c:	b662      	cpsie	i
}
   81f2e:	bc10      	pop	{r4}
   81f30:	4770      	bx	lr
   81f32:	bf00      	nop
   81f34:	200006ee 	.word	0x200006ee

00081f38 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81f38:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   81f3a:	b672      	cpsid	i
   81f3c:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   81f40:	4b0e      	ldr	r3, [pc, #56]	; (81f7c <get_from_circ_buf+0x44>)
   81f42:	2100      	movs	r1, #0
   81f44:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   81f46:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   81f48:	18c1      	adds	r1, r0, r3
   81f4a:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head) {
   81f4c:	6811      	ldr	r1, [r2, #0]
   81f4e:	4299      	cmp	r1, r3
   81f50:	d00b      	beq.n	81f6a <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   81f52:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   81f54:	2bc8      	cmp	r3, #200	; 0xc8
   81f56:	bf28      	it	cs
   81f58:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   81f5a:	6053      	str	r3, [r2, #4]

	cpu_irq_enable();
   81f5c:	4b07      	ldr	r3, [pc, #28]	; (81f7c <get_from_circ_buf+0x44>)
   81f5e:	2201      	movs	r2, #1
   81f60:	701a      	strb	r2, [r3, #0]
   81f62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81f66:	b662      	cpsie	i
    return retval;
}
   81f68:	4770      	bx	lr
		cpu_irq_enable();
   81f6a:	4b04      	ldr	r3, [pc, #16]	; (81f7c <get_from_circ_buf+0x44>)
   81f6c:	2201      	movs	r2, #1
   81f6e:	701a      	strb	r2, [r3, #0]
   81f70:	f3bf 8f5f 	dmb	sy
   81f74:	b662      	cpsie	i
        return SERIAL_ERR;
   81f76:	20ff      	movs	r0, #255	; 0xff
   81f78:	4770      	bx	lr
   81f7a:	bf00      	nop
   81f7c:	200006ee 	.word	0x200006ee

00081f80 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81f80:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   81f82:	6840      	ldr	r0, [r0, #4]
}
   81f84:	1ac0      	subs	r0, r0, r3
   81f86:	bf18      	it	ne
   81f88:	2001      	movne	r0, #1
   81f8a:	4770      	bx	lr

00081f8c <circ_buf_count>:
  __ASM volatile ("cpsid i");
   81f8c:	b672      	cpsid	i
   81f8e:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   81f92:	4b07      	ldr	r3, [pc, #28]	; (81fb0 <circ_buf_count+0x24>)
   81f94:	2200      	movs	r2, #0
   81f96:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   81f98:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   81f9a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   81f9c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   81f9e:	bf48      	it	mi
   81fa0:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   81fa2:	4b03      	ldr	r3, [pc, #12]	; (81fb0 <circ_buf_count+0x24>)
   81fa4:	2201      	movs	r2, #1
   81fa6:	701a      	strb	r2, [r3, #0]
   81fa8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81fac:	b662      	cpsie	i
    return (unsigned int)count;
}
   81fae:	4770      	bx	lr
   81fb0:	200006ee 	.word	0x200006ee

00081fb4 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   81fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fb8:	b08d      	sub	sp, #52	; 0x34
   81fba:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   81fbc:	4b92      	ldr	r3, [pc, #584]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fbe:	8999      	ldrh	r1, [r3, #12]
   81fc0:	2909      	cmp	r1, #9
   81fc2:	d005      	beq.n	81fd0 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   81fc4:	4891      	ldr	r0, [pc, #580]	; (8220c <ISPProtocol_ProgramMemory+0x258>)
   81fc6:	4b92      	ldr	r3, [pc, #584]	; (82210 <ISPProtocol_ProgramMemory+0x25c>)
   81fc8:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   81fca:	b00d      	add	sp, #52	; 0x34
   81fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fd0:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   81fd2:	4b8d      	ldr	r3, [pc, #564]	; (82208 <ISPProtocol_ProgramMemory+0x254>)
   81fd4:	689a      	ldr	r2, [r3, #8]
   81fd6:	ab09      	add	r3, sp, #36	; 0x24
   81fd8:	6810      	ldr	r0, [r2, #0]
   81fda:	6851      	ldr	r1, [r2, #4]
   81fdc:	c303      	stmia	r3!, {r0, r1}
   81fde:	8912      	ldrh	r2, [r2, #8]
   81fe0:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   81fe2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   81fe6:	9305      	str	r3, [sp, #20]
   81fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   81fec:	d813      	bhi.n	82016 <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   81fee:	f1bb 0f13 	cmp.w	fp, #19
   81ff2:	bf0c      	ite	eq
   81ff4:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   81ff8:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   81ffc:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   81ffe:	4b85      	ldr	r3, [pc, #532]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82000:	681b      	ldr	r3, [r3, #0]
   82002:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   82004:	9b05      	ldr	r3, [sp, #20]
   82006:	2b00      	cmp	r3, #0
   82008:	d043      	beq.n	82092 <ISPProtocol_ProgramMemory+0xde>
   8200a:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   8200c:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   8200e:	4627      	mov	r7, r4
   82010:	f8cd b008 	str.w	fp, [sp, #8]
   82014:	e0a6      	b.n	82164 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   82016:	4b80      	ldr	r3, [pc, #512]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82018:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   8201c:	22c0      	movs	r2, #192	; 0xc0
   8201e:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   82020:	4b7e      	ldr	r3, [pc, #504]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   82022:	2202      	movs	r2, #2
   82024:	801a      	strh	r2, [r3, #0]
		return;
   82026:	e7d0      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   82028:	4b7d      	ldr	r3, [pc, #500]	; (82220 <ISPProtocol_ProgramMemory+0x26c>)
   8202a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   8202c:	4b7d      	ldr	r3, [pc, #500]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   8202e:	701f      	strb	r7, [r3, #0]
   82030:	e0a3      	b.n	8217a <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   82032:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82036:	f043 0308 	orr.w	r3, r3, #8
   8203a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   8203e:	4b75      	ldr	r3, [pc, #468]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   82040:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82042:	f018 0f01 	tst.w	r8, #1
   82046:	f000 80d4 	beq.w	821f2 <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   8204a:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   8204c:	4a71      	ldr	r2, [pc, #452]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8204e:	6813      	ldr	r3, [r2, #0]
   82050:	3301      	adds	r3, #1
   82052:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82054:	9a02      	ldr	r2, [sp, #8]
   82056:	2a13      	cmp	r2, #19
   82058:	d17f      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   8205a:	b29b      	uxth	r3, r3
   8205c:	2b00      	cmp	r3, #0
   8205e:	d17c      	bne.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   82060:	2301      	movs	r3, #1
   82062:	4a70      	ldr	r2, [pc, #448]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82064:	7013      	strb	r3, [r2, #0]
   82066:	e078      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
   82068:	9304      	str	r3, [sp, #16]
   8206a:	e061      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   8206c:	9304      	str	r3, [sp, #16]
   8206e:	e06d      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   82070:	f8dd b008 	ldr.w	fp, [sp, #8]
   82074:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   82076:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   8207a:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   8207e:	2c00      	cmp	r4, #0
   82080:	db0e      	blt.n	820a0 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   82082:	4a65      	ldr	r2, [pc, #404]	; (82218 <ISPProtocol_ProgramMemory+0x264>)
   82084:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   82088:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   8208a:	4b64      	ldr	r3, [pc, #400]	; (8221c <ISPProtocol_ProgramMemory+0x268>)
   8208c:	2202      	movs	r2, #2
   8208e:	801a      	strh	r2, [r3, #0]
   82090:	e79b      	b.n	81fca <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   82092:	9b05      	ldr	r3, [sp, #20]
   82094:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   82096:	2300      	movs	r3, #0
   82098:	e7ed      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
   8209a:	f8dd b008 	ldr.w	fp, [sp, #8]
   8209e:	e7ea      	b.n	82076 <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   820a0:	4f61      	ldr	r7, [pc, #388]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   820a2:	2300      	movs	r3, #0
   820a4:	461a      	mov	r2, r3
   820a6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   820aa:	4638      	mov	r0, r7
   820ac:	4e5f      	ldr	r6, [pc, #380]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   820ae:	47b0      	blx	r6
   820b0:	2300      	movs	r3, #0
   820b2:	461a      	mov	r2, r3
   820b4:	9907      	ldr	r1, [sp, #28]
   820b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   820ba:	4638      	mov	r0, r7
   820bc:	47b0      	blx	r6
   820be:	2300      	movs	r3, #0
   820c0:	461a      	mov	r2, r3
   820c2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   820c6:	4638      	mov	r0, r7
   820c8:	47b0      	blx	r6
   820ca:	2300      	movs	r3, #0
   820cc:	461a      	mov	r2, r3
   820ce:	4619      	mov	r1, r3
   820d0:	4638      	mov	r0, r7
   820d2:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   820d4:	f015 0f20 	tst.w	r5, #32
   820d8:	d007      	beq.n	820ea <ISPProtocol_ProgramMemory+0x136>
   820da:	9b04      	ldr	r3, [sp, #16]
   820dc:	b92b      	cbnz	r3, 820ea <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   820de:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   820e2:	f043 0310 	orr.w	r3, r3, #16
   820e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   820ea:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   820ee:	9300      	str	r3, [sp, #0]
   820f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   820f4:	9a06      	ldr	r2, [sp, #24]
   820f6:	9904      	ldr	r1, [sp, #16]
   820f8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   820fc:	4c4c      	ldr	r4, [pc, #304]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   820fe:	47a0      	blx	r4
   82100:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82102:	f1bb 0f13 	cmp.w	fp, #19
   82106:	d1bc      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
   82108:	4a42      	ldr	r2, [pc, #264]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8210a:	8812      	ldrh	r2, [r2, #0]
   8210c:	2a00      	cmp	r2, #0
   8210e:	d1b8      	bne.n	82082 <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   82110:	4a44      	ldr	r2, [pc, #272]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82112:	2101      	movs	r1, #1
   82114:	7011      	strb	r1, [r2, #0]
   82116:	e7b4      	b.n	82082 <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   82118:	4a3e      	ldr	r2, [pc, #248]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   8211a:	6813      	ldr	r3, [r2, #0]
   8211c:	3301      	adds	r3, #1
   8211e:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   82120:	e01b      	b.n	8215a <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   82122:	f018 0f01 	tst.w	r8, #1
   82126:	d067      	beq.n	821f8 <ISPProtocol_ProgramMemory+0x244>
   82128:	e010      	b.n	8214c <ISPProtocol_ProgramMemory+0x198>
   8212a:	f018 0f01 	tst.w	r8, #1
   8212e:	d10d      	bne.n	8214c <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   82130:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   82134:	9300      	str	r3, [sp, #0]
   82136:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   8213a:	9a06      	ldr	r2, [sp, #24]
   8213c:	9904      	ldr	r1, [sp, #16]
   8213e:	4640      	mov	r0, r8
   82140:	4d3b      	ldr	r5, [pc, #236]	; (82230 <ISPProtocol_ProgramMemory+0x27c>)
   82142:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   82144:	4603      	mov	r3, r0
   82146:	2800      	cmp	r0, #0
   82148:	d1a7      	bne.n	8209a <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   8214a:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   8214c:	f014 0f01 	tst.w	r4, #1
   82150:	f47f af7c 	bne.w	8204c <ISPProtocol_ProgramMemory+0x98>
   82154:	9b02      	ldr	r3, [sp, #8]
   82156:	2b15      	cmp	r3, #21
   82158:	d0de      	beq.n	82118 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   8215a:	3401      	adds	r4, #1
   8215c:	b2a4      	uxth	r4, r4
   8215e:	9b05      	ldr	r3, [sp, #20]
   82160:	42a3      	cmp	r3, r4
   82162:	d085      	beq.n	82070 <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   82164:	9b03      	ldr	r3, [sp, #12]
   82166:	f813 bb01 	ldrb.w	fp, [r3], #1
   8216a:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   8216c:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   82170:	4b2c      	ldr	r3, [pc, #176]	; (82224 <ISPProtocol_ProgramMemory+0x270>)
   82172:	781b      	ldrb	r3, [r3, #0]
   82174:	2b00      	cmp	r3, #0
   82176:	f47f af57 	bne.w	82028 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   8217a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   8217e:	4e2a      	ldr	r6, [pc, #168]	; (82228 <ISPProtocol_ProgramMemory+0x274>)
   82180:	463b      	mov	r3, r7
   82182:	463a      	mov	r2, r7
   82184:	4649      	mov	r1, r9
   82186:	4630      	mov	r0, r6
   82188:	4d28      	ldr	r5, [pc, #160]	; (8222c <ISPProtocol_ProgramMemory+0x278>)
   8218a:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   8218c:	f8df a084 	ldr.w	sl, [pc, #132]	; 82214 <ISPProtocol_ProgramMemory+0x260>
   82190:	463b      	mov	r3, r7
   82192:	463a      	mov	r2, r7
   82194:	f89a 1001 	ldrb.w	r1, [sl, #1]
   82198:	4630      	mov	r0, r6
   8219a:	47a8      	blx	r5
   8219c:	463b      	mov	r3, r7
   8219e:	463a      	mov	r2, r7
   821a0:	f89a 1000 	ldrb.w	r1, [sl]
   821a4:	4630      	mov	r0, r6
   821a6:	47a8      	blx	r5
   821a8:	463b      	mov	r3, r7
   821aa:	463a      	mov	r2, r7
   821ac:	4659      	mov	r1, fp
   821ae:	4630      	mov	r0, r6
   821b0:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   821b2:	9b02      	ldr	r3, [sp, #8]
   821b4:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   821b6:	bf04      	itt	eq
   821b8:	f089 0908 	eoreq.w	r9, r9, #8
   821bc:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   821c0:	9b04      	ldr	r3, [sp, #16]
   821c2:	2b00      	cmp	r3, #0
   821c4:	d1b1      	bne.n	8212a <ISPProtocol_ProgramMemory+0x176>
   821c6:	9b06      	ldr	r3, [sp, #24]
   821c8:	455b      	cmp	r3, fp
   821ca:	d0aa      	beq.n	82122 <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   821cc:	f014 0f01 	tst.w	r4, #1
   821d0:	d003      	beq.n	821da <ISPProtocol_ProgramMemory+0x226>
   821d2:	9b02      	ldr	r3, [sp, #8]
   821d4:	2b13      	cmp	r3, #19
   821d6:	f43f af2c 	beq.w	82032 <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   821da:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   821de:	f023 0308 	bic.w	r3, r3, #8
   821e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   821e6:	4b0b      	ldr	r3, [pc, #44]	; (82214 <ISPProtocol_ProgramMemory+0x260>)
   821e8:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   821ea:	f018 0f01 	tst.w	r8, #1
   821ee:	f47f af3d 	bne.w	8206c <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   821f2:	2b00      	cmp	r3, #0
   821f4:	f47f af38 	bne.w	82068 <ISPProtocol_ProgramMemory+0xb4>
   821f8:	f018 0f08 	tst.w	r8, #8
   821fc:	d198      	bne.n	82130 <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   821fe:	f028 0806 	bic.w	r8, r8, #6
   82202:	f048 0802 	orr.w	r8, r8, #2
   82206:	e793      	b.n	82130 <ISPProtocol_ProgramMemory+0x17c>
   82208:	20002df4 	.word	0x20002df4
   8220c:	0008e4bc 	.word	0x0008e4bc
   82210:	000878b5 	.word	0x000878b5
   82214:	20002660 	.word	0x20002660
   82218:	20002640 	.word	0x20002640
   8221c:	2000263e 	.word	0x2000263e
   82220:	00082895 	.word	0x00082895
   82224:	2000263c 	.word	0x2000263c
   82228:	40008000 	.word	0x40008000
   8222c:	00085647 	.word	0x00085647
   82230:	000828d5 	.word	0x000828d5

00082234 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   82234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82238:	b085      	sub	sp, #20
   8223a:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   8223c:	4b45      	ldr	r3, [pc, #276]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   8223e:	899b      	ldrh	r3, [r3, #12]
   82240:	2b03      	cmp	r3, #3
   82242:	d118      	bne.n	82276 <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   82244:	4b43      	ldr	r3, [pc, #268]	; (82354 <ISPProtocol_ReadMemory+0x120>)
   82246:	689b      	ldr	r3, [r3, #8]
   82248:	681b      	ldr	r3, [r3, #0]
   8224a:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   8224c:	4a42      	ldr	r2, [pc, #264]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   8224e:	9800      	ldr	r0, [sp, #0]
   82250:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82252:	20c0      	movs	r0, #192	; 0xc0
   82254:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   82256:	4a41      	ldr	r2, [pc, #260]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82258:	2002      	movs	r0, #2
   8225a:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   8225c:	b29b      	uxth	r3, r3
   8225e:	9301      	str	r3, [sp, #4]
   82260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82264:	d872      	bhi.n	8234c <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   82266:	2b00      	cmp	r3, #0
   82268:	d06a      	beq.n	82340 <ISPProtocol_ReadMemory+0x10c>
   8226a:	f101 38ff 	add.w	r8, r1, #4294967295
   8226e:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   82270:	463e      	mov	r6, r7
   82272:	4c3b      	ldr	r4, [pc, #236]	; (82360 <ISPProtocol_ReadMemory+0x12c>)
   82274:	e026      	b.n	822c4 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82276:	4619      	mov	r1, r3
   82278:	483a      	ldr	r0, [pc, #232]	; (82364 <ISPProtocol_ReadMemory+0x130>)
   8227a:	4b3b      	ldr	r3, [pc, #236]	; (82368 <ISPProtocol_ReadMemory+0x134>)
   8227c:	4798      	blx	r3
		return;
   8227e:	e065      	b.n	8234c <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   82280:	4b3a      	ldr	r3, [pc, #232]	; (8236c <ISPProtocol_ReadMemory+0x138>)
   82282:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   82284:	4b3a      	ldr	r3, [pc, #232]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   82286:	701e      	strb	r6, [r3, #0]
   82288:	e022      	b.n	822d0 <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   8228a:	f089 0908 	eor.w	r9, r9, #8
   8228e:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   82292:	f01b 0f01 	tst.w	fp, #1
   82296:	d010      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   82298:	4a36      	ldr	r2, [pc, #216]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   8229a:	6813      	ldr	r3, [r2, #0]
   8229c:	3301      	adds	r3, #1
   8229e:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822a0:	e006      	b.n	822b0 <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   822a2:	4a34      	ldr	r2, [pc, #208]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   822a4:	6813      	ldr	r3, [r2, #0]
   822a6:	3301      	adds	r3, #1
   822a8:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   822aa:	9a00      	ldr	r2, [sp, #0]
   822ac:	2a16      	cmp	r2, #22
   822ae:	d004      	beq.n	822ba <ISPProtocol_ReadMemory+0x86>
   822b0:	b29b      	uxth	r3, r3
   822b2:	b913      	cbnz	r3, 822ba <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   822b4:	2301      	movs	r3, #1
   822b6:	4a2e      	ldr	r2, [pc, #184]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822b8:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   822ba:	3701      	adds	r7, #1
   822bc:	b2bb      	uxth	r3, r7
   822be:	9a01      	ldr	r2, [sp, #4]
   822c0:	429a      	cmp	r2, r3
   822c2:	d93d      	bls.n	82340 <ISPProtocol_ReadMemory+0x10c>
   822c4:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   822c8:	4b29      	ldr	r3, [pc, #164]	; (82370 <ISPProtocol_ReadMemory+0x13c>)
   822ca:	781b      	ldrb	r3, [r3, #0]
   822cc:	2b00      	cmp	r3, #0
   822ce:	d1d7      	bne.n	82280 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   822d0:	f89d 900e 	ldrb.w	r9, [sp, #14]
   822d4:	4633      	mov	r3, r6
   822d6:	4632      	mov	r2, r6
   822d8:	4649      	mov	r1, r9
   822da:	4620      	mov	r0, r4
   822dc:	4d26      	ldr	r5, [pc, #152]	; (82378 <ISPProtocol_ReadMemory+0x144>)
   822de:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   822e0:	f8df a090 	ldr.w	sl, [pc, #144]	; 82374 <ISPProtocol_ReadMemory+0x140>
   822e4:	4633      	mov	r3, r6
   822e6:	4632      	mov	r2, r6
   822e8:	f89a 1001 	ldrb.w	r1, [sl, #1]
   822ec:	4620      	mov	r0, r4
   822ee:	47a8      	blx	r5
   822f0:	4633      	mov	r3, r6
   822f2:	4632      	mov	r2, r6
   822f4:	f89a 1000 	ldrb.w	r1, [sl]
   822f8:	4620      	mov	r0, r4
   822fa:	47a8      	blx	r5
   822fc:	4633      	mov	r3, r6
   822fe:	4632      	mov	r2, r6
   82300:	4631      	mov	r1, r6
   82302:	4620      	mov	r0, r4
   82304:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   82306:	6923      	ldr	r3, [r4, #16]
   82308:	f413 7f00 	tst.w	r3, #512	; 0x200
   8230c:	d0fb      	beq.n	82306 <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   8230e:	f10d 0209 	add.w	r2, sp, #9
   82312:	f10d 010a 	add.w	r1, sp, #10
   82316:	4620      	mov	r0, r4
   82318:	4b18      	ldr	r3, [pc, #96]	; (8237c <ISPProtocol_ReadMemory+0x148>)
   8231a:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   8231c:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   82320:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   82324:	9b00      	ldr	r3, [sp, #0]
   82326:	2b14      	cmp	r3, #20
   82328:	d0af      	beq.n	8228a <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   8232a:	f01b 0f01 	tst.w	fp, #1
   8232e:	d1b8      	bne.n	822a2 <ISPProtocol_ReadMemory+0x6e>
   82330:	9b00      	ldr	r3, [sp, #0]
   82332:	2b16      	cmp	r3, #22
   82334:	d1c1      	bne.n	822ba <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   82336:	4a0f      	ldr	r2, [pc, #60]	; (82374 <ISPProtocol_ReadMemory+0x140>)
   82338:	6813      	ldr	r3, [r2, #0]
   8233a:	3301      	adds	r3, #1
   8233c:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   8233e:	e7bc      	b.n	822ba <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82340:	4b05      	ldr	r3, [pc, #20]	; (82358 <ISPProtocol_ReadMemory+0x124>)
   82342:	2200      	movs	r2, #0
   82344:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82346:	4b05      	ldr	r3, [pc, #20]	; (8235c <ISPProtocol_ReadMemory+0x128>)
   82348:	2202      	movs	r2, #2
   8234a:	801a      	strh	r2, [r3, #0]
}
   8234c:	b005      	add	sp, #20
   8234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82352:	bf00      	nop
   82354:	20002df4 	.word	0x20002df4
   82358:	20002640 	.word	0x20002640
   8235c:	2000263e 	.word	0x2000263e
   82360:	40008000 	.word	0x40008000
   82364:	0008e464 	.word	0x0008e464
   82368:	000878b5 	.word	0x000878b5
   8236c:	00082895 	.word	0x00082895
   82370:	2000263c 	.word	0x2000263c
   82374:	20002660 	.word	0x20002660
   82378:	00085647 	.word	0x00085647
   8237c:	00085619 	.word	0x00085619

00082380 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   82380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82384:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   82386:	4b21      	ldr	r3, [pc, #132]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82388:	8999      	ldrh	r1, [r3, #12]
   8238a:	2905      	cmp	r1, #5
   8238c:	d139      	bne.n	82402 <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   8238e:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   82390:	4b1e      	ldr	r3, [pc, #120]	; (8240c <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   82392:	689b      	ldr	r3, [r3, #8]
   82394:	6818      	ldr	r0, [r3, #0]
   82396:	9002      	str	r0, [sp, #8]
   82398:	791a      	ldrb	r2, [r3, #4]
   8239a:	f88d 200c 	strb.w	r2, [sp, #12]
   8239e:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823a2:	f10d 0609 	add.w	r6, sp, #9
   823a6:	ad01      	add	r5, sp, #4
   823a8:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   823ac:	4c18      	ldr	r4, [pc, #96]	; (82410 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   823ae:	f8df 9074 	ldr.w	r9, [pc, #116]	; 82424 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   823b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 82428 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   823b6:	2300      	movs	r3, #0
   823b8:	461a      	mov	r2, r3
   823ba:	f816 1b01 	ldrb.w	r1, [r6], #1
   823be:	4620      	mov	r0, r4
   823c0:	47c8      	blx	r9
   823c2:	6923      	ldr	r3, [r4, #16]
   823c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   823c8:	d0fb      	beq.n	823c2 <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   823ca:	f10d 0201 	add.w	r2, sp, #1
   823ce:	f10d 0102 	add.w	r1, sp, #2
   823d2:	4620      	mov	r0, r4
   823d4:	47c0      	blx	r8
			return  ReceivedByte;
   823d6:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   823da:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   823de:	4555      	cmp	r5, sl
   823e0:	d1e9      	bne.n	823b6 <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   823e2:	4b0c      	ldr	r3, [pc, #48]	; (82414 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   823e4:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   823e6:	2200      	movs	r2, #0
   823e8:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   823ea:	a904      	add	r1, sp, #16
   823ec:	448b      	add	fp, r1
   823ee:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   823f2:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   823f4:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   823f6:	4b08      	ldr	r3, [pc, #32]	; (82418 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   823f8:	2204      	movs	r2, #4
   823fa:	801a      	strh	r2, [r3, #0]
}
   823fc:	b005      	add	sp, #20
   823fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82402:	4806      	ldr	r0, [pc, #24]	; (8241c <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   82404:	4b06      	ldr	r3, [pc, #24]	; (82420 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   82406:	4798      	blx	r3
		return;
   82408:	e7f8      	b.n	823fc <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   8240a:	bf00      	nop
   8240c:	20002df4 	.word	0x20002df4
   82410:	40008000 	.word	0x40008000
   82414:	20002640 	.word	0x20002640
   82418:	2000263e 	.word	0x2000263e
   8241c:	0008e4bc 	.word	0x0008e4bc
   82420:	000878b5 	.word	0x000878b5
   82424:	00085647 	.word	0x00085647
   82428:	00085619 	.word	0x00085619

0008242c <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   8242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82430:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   82432:	4b13      	ldr	r3, [pc, #76]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   82434:	8999      	ldrh	r1, [r3, #12]
   82436:	2904      	cmp	r1, #4
   82438:	d11d      	bne.n	82476 <ISPProtocol_WriteFuseLock+0x4a>
   8243a:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   8243c:	4b10      	ldr	r3, [pc, #64]	; (82480 <ISPProtocol_WriteFuseLock+0x54>)
   8243e:	689b      	ldr	r3, [r3, #8]
   82440:	681b      	ldr	r3, [r3, #0]
   82442:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   82444:	ac01      	add	r4, sp, #4
   82446:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   8244a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82498 <ISPProtocol_WriteFuseLock+0x6c>
   8244e:	2700      	movs	r7, #0
   82450:	4e0c      	ldr	r6, [pc, #48]	; (82484 <ISPProtocol_WriteFuseLock+0x58>)
   82452:	463b      	mov	r3, r7
   82454:	463a      	mov	r2, r7
   82456:	f814 1b01 	ldrb.w	r1, [r4], #1
   8245a:	4640      	mov	r0, r8
   8245c:	47b0      	blx	r6
   8245e:	454c      	cmp	r4, r9
   82460:	d1f7      	bne.n	82452 <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   82462:	4b09      	ldr	r3, [pc, #36]	; (82488 <ISPProtocol_WriteFuseLock+0x5c>)
   82464:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82466:	2200      	movs	r2, #0
   82468:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   8246a:	4b08      	ldr	r3, [pc, #32]	; (8248c <ISPProtocol_WriteFuseLock+0x60>)
   8246c:	2202      	movs	r2, #2
   8246e:	801a      	strh	r2, [r3, #0]
}
   82470:	b003      	add	sp, #12
   82472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82476:	4806      	ldr	r0, [pc, #24]	; (82490 <ISPProtocol_WriteFuseLock+0x64>)
   82478:	4b06      	ldr	r3, [pc, #24]	; (82494 <ISPProtocol_WriteFuseLock+0x68>)
   8247a:	4798      	blx	r3
		return;
   8247c:	e7f8      	b.n	82470 <ISPProtocol_WriteFuseLock+0x44>
   8247e:	bf00      	nop
   82480:	20002df4 	.word	0x20002df4
   82484:	00085647 	.word	0x00085647
   82488:	20002640 	.word	0x20002640
   8248c:	2000263e 	.word	0x2000263e
   82490:	0008e4bc 	.word	0x0008e4bc
   82494:	000878b5 	.word	0x000878b5
   82498:	40008000 	.word	0x40008000

0008249c <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   8249c:	4770      	bx	lr
	...

000824a0 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   824a0:	b900      	cbnz	r0, 824a4 <ISPProtocol_DelayMS+0x4>
   824a2:	4770      	bx	lr
{
   824a4:	b538      	push	{r3, r4, r5, lr}
   824a6:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   824a8:	f243 62b0 	movw	r2, #14000	; 0x36b0
   824ac:	2300      	movs	r3, #0
   824ae:	4806      	ldr	r0, [pc, #24]	; (824c8 <ISPProtocol_DelayMS+0x28>)
   824b0:	f243 64af 	movw	r4, #13999	; 0x36af
   824b4:	2500      	movs	r5, #0
   824b6:	fbe0 4501 	umlal	r4, r5, r0, r1
   824ba:	4620      	mov	r0, r4
   824bc:	4629      	mov	r1, r5
   824be:	4c03      	ldr	r4, [pc, #12]	; (824cc <ISPProtocol_DelayMS+0x2c>)
   824c0:	47a0      	blx	r4
   824c2:	4b03      	ldr	r3, [pc, #12]	; (824d0 <ISPProtocol_DelayMS+0x30>)
   824c4:	4798      	blx	r3
}
   824c6:	bd38      	pop	{r3, r4, r5, pc}
   824c8:	05b8d800 	.word	0x05b8d800
   824cc:	00087575 	.word	0x00087575
   824d0:	20000089 	.word	0x20000089

000824d4 <ISPProtocol_EnterISPMode>:
{
   824d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824d8:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   824da:	4b42      	ldr	r3, [pc, #264]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824dc:	8999      	ldrh	r1, [r3, #12]
   824de:	290b      	cmp	r1, #11
   824e0:	d003      	beq.n	824ea <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   824e2:	4841      	ldr	r0, [pc, #260]	; (825e8 <ISPProtocol_EnterISPMode+0x114>)
   824e4:	4b41      	ldr	r3, [pc, #260]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   824e6:	4798      	blx	r3
		return;
   824e8:	e074      	b.n	825d4 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   824ea:	4b3e      	ldr	r3, [pc, #248]	; (825e4 <ISPProtocol_EnterISPMode+0x110>)
   824ec:	689b      	ldr	r3, [r3, #8]
   824ee:	aa07      	add	r2, sp, #28
   824f0:	6818      	ldr	r0, [r3, #0]
   824f2:	6859      	ldr	r1, [r3, #4]
   824f4:	c203      	stmia	r2!, {r0, r1}
   824f6:	8918      	ldrh	r0, [r3, #8]
   824f8:	7a99      	ldrb	r1, [r3, #10]
   824fa:	8010      	strh	r0, [r2, #0]
   824fc:	7091      	strb	r1, [r2, #2]
   824fe:	785e      	ldrb	r6, [r3, #1]
   82500:	9603      	str	r6, [sp, #12]
   82502:	7898      	ldrb	r0, [r3, #2]
   82504:	78dc      	ldrb	r4, [r3, #3]
   82506:	f893 b004 	ldrb.w	fp, [r3, #4]
   8250a:	795a      	ldrb	r2, [r3, #5]
   8250c:	9202      	str	r2, [sp, #8]
   8250e:	799b      	ldrb	r3, [r3, #6]
   82510:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   82512:	4b37      	ldr	r3, [pc, #220]	; (825f0 <ISPProtocol_EnterISPMode+0x11c>)
   82514:	2200      	movs	r2, #0
   82516:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   82518:	4d36      	ldr	r5, [pc, #216]	; (825f4 <ISPProtocol_EnterISPMode+0x120>)
   8251a:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   8251c:	4b36      	ldr	r3, [pc, #216]	; (825f8 <ISPProtocol_EnterISPMode+0x124>)
   8251e:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   82520:	2001      	movs	r0, #1
   82522:	4b36      	ldr	r3, [pc, #216]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82524:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82526:	4630      	mov	r0, r6
   82528:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   8252a:	f104 38ff 	add.w	r8, r4, #4294967295
   8252e:	fa5f f888 	uxtb.w	r8, r8
   82532:	b114      	cbz	r4, 8253a <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82534:	462f      	mov	r7, r5
   82536:	4c32      	ldr	r4, [pc, #200]	; (82600 <ISPProtocol_EnterISPMode+0x12c>)
   82538:	e01c      	b.n	82574 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   8253a:	24c0      	movs	r4, #192	; 0xc0
   8253c:	e03f      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   8253e:	9b01      	ldr	r3, [sp, #4]
   82540:	2b00      	cmp	r3, #0
   82542:	d03b      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
   82544:	aa0a      	add	r2, sp, #40	; 0x28
   82546:	18d3      	adds	r3, r2, r3
   82548:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   8254c:	9a02      	ldr	r2, [sp, #8]
   8254e:	4293      	cmp	r3, r2
   82550:	d034      	beq.n	825bc <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   82552:	2000      	movs	r0, #0
   82554:	4d29      	ldr	r5, [pc, #164]	; (825fc <ISPProtocol_EnterISPMode+0x128>)
   82556:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82558:	9e03      	ldr	r6, [sp, #12]
   8255a:	4630      	mov	r0, r6
   8255c:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   8255e:	2001      	movs	r0, #1
   82560:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   82562:	4630      	mov	r0, r6
   82564:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   82566:	f108 38ff 	add.w	r8, r8, #4294967295
   8256a:	fa5f f888 	uxtb.w	r8, r8
   8256e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   82572:	d034      	beq.n	825de <ISPProtocol_EnterISPMode+0x10a>
   82574:	4b23      	ldr	r3, [pc, #140]	; (82604 <ISPProtocol_EnterISPMode+0x130>)
   82576:	681b      	ldr	r3, [r3, #0]
   82578:	b37b      	cbz	r3, 825da <ISPProtocol_EnterISPMode+0x106>
   8257a:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   8257e:	ad06      	add	r5, sp, #24
   82580:	f10d 0a1c 	add.w	sl, sp, #28
   82584:	f8df 9090 	ldr.w	r9, [pc, #144]	; 82618 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   82588:	4658      	mov	r0, fp
   8258a:	47b8      	blx	r7
   8258c:	2300      	movs	r3, #0
   8258e:	461a      	mov	r2, r3
   82590:	f816 1b01 	ldrb.w	r1, [r6], #1
   82594:	4620      	mov	r0, r4
   82596:	47c8      	blx	r9
   82598:	6923      	ldr	r3, [r4, #16]
   8259a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8259e:	d0fb      	beq.n	82598 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   825a0:	f10d 0215 	add.w	r2, sp, #21
   825a4:	f10d 0116 	add.w	r1, sp, #22
   825a8:	4620      	mov	r0, r4
   825aa:	4b17      	ldr	r3, [pc, #92]	; (82608 <ISPProtocol_EnterISPMode+0x134>)
   825ac:	4798      	blx	r3
			return  ReceivedByte;
   825ae:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   825b2:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   825b6:	4555      	cmp	r5, sl
   825b8:	d1e6      	bne.n	82588 <ISPProtocol_EnterISPMode+0xb4>
   825ba:	e7c0      	b.n	8253e <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   825bc:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   825be:	4621      	mov	r1, r4
   825c0:	4812      	ldr	r0, [pc, #72]	; (8260c <ISPProtocol_EnterISPMode+0x138>)
   825c2:	4b0a      	ldr	r3, [pc, #40]	; (825ec <ISPProtocol_EnterISPMode+0x118>)
   825c4:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   825c6:	4b12      	ldr	r3, [pc, #72]	; (82610 <ISPProtocol_EnterISPMode+0x13c>)
   825c8:	2210      	movs	r2, #16
   825ca:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   825cc:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   825ce:	4b11      	ldr	r3, [pc, #68]	; (82614 <ISPProtocol_EnterISPMode+0x140>)
   825d0:	2202      	movs	r2, #2
   825d2:	801a      	strh	r2, [r3, #0]
}
   825d4:	b00b      	add	sp, #44	; 0x2c
   825d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   825da:	24c0      	movs	r4, #192	; 0xc0
   825dc:	e7ef      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825de:	24c0      	movs	r4, #192	; 0xc0
   825e0:	e7ed      	b.n	825be <ISPProtocol_EnterISPMode+0xea>
   825e2:	bf00      	nop
   825e4:	20002df4 	.word	0x20002df4
   825e8:	0008e4bc 	.word	0x0008e4bc
   825ec:	000878b5 	.word	0x000878b5
   825f0:	20002660 	.word	0x20002660
   825f4:	000824a1 	.word	0x000824a1
   825f8:	00082715 	.word	0x00082715
   825fc:	000827d5 	.word	0x000827d5
   82600:	40008000 	.word	0x40008000
   82604:	20002664 	.word	0x20002664
   82608:	00085619 	.word	0x00085619
   8260c:	0008e48c 	.word	0x0008e48c
   82610:	20002640 	.word	0x20002640
   82614:	2000263e 	.word	0x2000263e
   82618:	00085647 	.word	0x00085647

0008261c <ISPProtocol_LeaveISPMode>:
{
   8261c:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   8261e:	4b0f      	ldr	r3, [pc, #60]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82620:	8999      	ldrh	r1, [r3, #12]
   82622:	2902      	cmp	r1, #2
   82624:	d003      	beq.n	8262e <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   82626:	480e      	ldr	r0, [pc, #56]	; (82660 <ISPProtocol_LeaveISPMode+0x44>)
   82628:	4b0e      	ldr	r3, [pc, #56]	; (82664 <ISPProtocol_LeaveISPMode+0x48>)
   8262a:	4798      	blx	r3
}
   8262c:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   8262e:	4b0b      	ldr	r3, [pc, #44]	; (8265c <ISPProtocol_LeaveISPMode+0x40>)
   82630:	689b      	ldr	r3, [r3, #8]
   82632:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   82634:	b2e8      	uxtb	r0, r5
   82636:	4c0c      	ldr	r4, [pc, #48]	; (82668 <ISPProtocol_LeaveISPMode+0x4c>)
   82638:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   8263a:	2000      	movs	r0, #0
   8263c:	4b0b      	ldr	r3, [pc, #44]	; (8266c <ISPProtocol_LeaveISPMode+0x50>)
   8263e:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   82640:	4b0b      	ldr	r3, [pc, #44]	; (82670 <ISPProtocol_LeaveISPMode+0x54>)
   82642:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   82644:	0a28      	lsrs	r0, r5, #8
   82646:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   82648:	4b0a      	ldr	r3, [pc, #40]	; (82674 <ISPProtocol_LeaveISPMode+0x58>)
   8264a:	2211      	movs	r2, #17
   8264c:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8264e:	2200      	movs	r2, #0
   82650:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82652:	4b09      	ldr	r3, [pc, #36]	; (82678 <ISPProtocol_LeaveISPMode+0x5c>)
   82654:	2202      	movs	r2, #2
   82656:	801a      	strh	r2, [r3, #0]
   82658:	e7e8      	b.n	8262c <ISPProtocol_LeaveISPMode+0x10>
   8265a:	bf00      	nop
   8265c:	20002df4 	.word	0x20002df4
   82660:	0008e4bc 	.word	0x0008e4bc
   82664:	000878b5 	.word	0x000878b5
   82668:	000824a1 	.word	0x000824a1
   8266c:	000827d5 	.word	0x000827d5
   82670:	000827bd 	.word	0x000827bd
   82674:	20002640 	.word	0x20002640
   82678:	2000263e 	.word	0x2000263e

0008267c <ISPProtocol_ChipErase>:
{
   8267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82680:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   82682:	4b1b      	ldr	r3, [pc, #108]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   82684:	8999      	ldrh	r1, [r3, #12]
   82686:	2906      	cmp	r1, #6
   82688:	d12a      	bne.n	826e0 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   8268a:	4b19      	ldr	r3, [pc, #100]	; (826f0 <ISPProtocol_ChipErase+0x74>)
   8268c:	689b      	ldr	r3, [r3, #8]
   8268e:	6818      	ldr	r0, [r3, #0]
   82690:	9000      	str	r0, [sp, #0]
   82692:	889a      	ldrh	r2, [r3, #4]
   82694:	f8ad 2004 	strh.w	r2, [sp, #4]
   82698:	f893 a000 	ldrb.w	sl, [r3]
   8269c:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   826a0:	f10d 0402 	add.w	r4, sp, #2
   826a4:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   826a8:	4f12      	ldr	r7, [pc, #72]	; (826f4 <ISPProtocol_ChipErase+0x78>)
   826aa:	2600      	movs	r6, #0
   826ac:	4d12      	ldr	r5, [pc, #72]	; (826f8 <ISPProtocol_ChipErase+0x7c>)
   826ae:	4633      	mov	r3, r6
   826b0:	4632      	mov	r2, r6
   826b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   826b6:	4638      	mov	r0, r7
   826b8:	47a8      	blx	r5
   826ba:	4544      	cmp	r4, r8
   826bc:	d1f7      	bne.n	826ae <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   826be:	f1b9 0f00 	cmp.w	r9, #0
   826c2:	d111      	bne.n	826e8 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   826c4:	4650      	mov	r0, sl
   826c6:	4b0d      	ldr	r3, [pc, #52]	; (826fc <ISPProtocol_ChipErase+0x80>)
   826c8:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   826ca:	4b0d      	ldr	r3, [pc, #52]	; (82700 <ISPProtocol_ChipErase+0x84>)
   826cc:	2212      	movs	r2, #18
   826ce:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   826d0:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   826d4:	4b0b      	ldr	r3, [pc, #44]	; (82704 <ISPProtocol_ChipErase+0x88>)
   826d6:	2202      	movs	r2, #2
   826d8:	801a      	strh	r2, [r3, #0]
}
   826da:	b002      	add	sp, #8
   826dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   826e0:	4809      	ldr	r0, [pc, #36]	; (82708 <ISPProtocol_ChipErase+0x8c>)
   826e2:	4b0a      	ldr	r3, [pc, #40]	; (8270c <ISPProtocol_ChipErase+0x90>)
   826e4:	4798      	blx	r3
		return;
   826e6:	e7f8      	b.n	826da <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   826e8:	4b09      	ldr	r3, [pc, #36]	; (82710 <ISPProtocol_ChipErase+0x94>)
   826ea:	4798      	blx	r3
   826ec:	4681      	mov	r9, r0
   826ee:	e7ec      	b.n	826ca <ISPProtocol_ChipErase+0x4e>
   826f0:	20002df4 	.word	0x20002df4
   826f4:	40008000 	.word	0x40008000
   826f8:	00085647 	.word	0x00085647
   826fc:	000824a1 	.word	0x000824a1
   82700:	20002640 	.word	0x20002640
   82704:	2000263e 	.word	0x2000263e
   82708:	0008e4ac 	.word	0x0008e4ac
   8270c:	000878b5 	.word	0x000878b5
   82710:	00082819 	.word	0x00082819

00082714 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   82714:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   82716:	2098      	movs	r0, #152	; 0x98
   82718:	4b1e      	ldr	r3, [pc, #120]	; (82794 <ISPTarget_EnableTargetISP+0x80>)
   8271a:	4798      	blx	r3
   8271c:	4b1e      	ldr	r3, [pc, #120]	; (82798 <ISPTarget_EnableTargetISP+0x84>)
   8271e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   82722:	4c1e      	ldr	r4, [pc, #120]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82724:	4620      	mov	r0, r4
   82726:	4b1e      	ldr	r3, [pc, #120]	; (827a0 <ISPTarget_EnableTargetISP+0x8c>)
   82728:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8272a:	2380      	movs	r3, #128	; 0x80
   8272c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8272e:	6863      	ldr	r3, [r4, #4]
   82730:	f043 0301 	orr.w	r3, r3, #1
   82734:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   82736:	6863      	ldr	r3, [r4, #4]
   82738:	f043 0310 	orr.w	r3, r3, #16
   8273c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8273e:	6863      	ldr	r3, [r4, #4]
   82740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82744:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   82746:	4917      	ldr	r1, [pc, #92]	; (827a4 <ISPTarget_EnableTargetISP+0x90>)
   82748:	4628      	mov	r0, r5
   8274a:	4b17      	ldr	r3, [pc, #92]	; (827a8 <ISPTarget_EnableTargetISP+0x94>)
   8274c:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   8274e:	1e04      	subs	r4, r0, #0
   82750:	bfb8      	it	lt
   82752:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   82754:	4d11      	ldr	r5, [pc, #68]	; (8279c <ISPTarget_EnableTargetISP+0x88>)
   82756:	2200      	movs	r2, #0
   82758:	4611      	mov	r1, r2
   8275a:	4628      	mov	r0, r5
   8275c:	4b13      	ldr	r3, [pc, #76]	; (827ac <ISPTarget_EnableTargetISP+0x98>)
   8275e:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   82760:	2201      	movs	r2, #1
   82762:	2100      	movs	r1, #0
   82764:	4628      	mov	r0, r5
   82766:	4b12      	ldr	r3, [pc, #72]	; (827b0 <ISPTarget_EnableTargetISP+0x9c>)
   82768:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   8276a:	b2e2      	uxtb	r2, r4
   8276c:	2100      	movs	r1, #0
   8276e:	4628      	mov	r0, r5
   82770:	4b10      	ldr	r3, [pc, #64]	; (827b4 <ISPTarget_EnableTargetISP+0xa0>)
   82772:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   82774:	2301      	movs	r3, #1
   82776:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   82778:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8277c:	200e      	movs	r0, #14
   8277e:	4c0e      	ldr	r4, [pc, #56]	; (827b8 <ISPTarget_EnableTargetISP+0xa4>)
   82780:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   82782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82786:	200d      	movs	r0, #13
   82788:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8278a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8278e:	200f      	movs	r0, #15
   82790:	47a0      	blx	r4
#endif

}
   82792:	bd38      	pop	{r3, r4, r5, pc}
   82794:	00082c51 	.word	0x00082c51
   82798:	200002f8 	.word	0x200002f8
   8279c:	40008000 	.word	0x40008000
   827a0:	000855f9 	.word	0x000855f9
   827a4:	05b8d800 	.word	0x05b8d800
   827a8:	000856b7 	.word	0x000856b7
   827ac:	0008567b 	.word	0x0008567b
   827b0:	00085699 	.word	0x00085699
   827b4:	000856cd 	.word	0x000856cd
   827b8:	00085215 	.word	0x00085215

000827bc <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   827bc:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   827be:	4803      	ldr	r0, [pc, #12]	; (827cc <ISPTarget_DisableTargetISP+0x10>)
   827c0:	2302      	movs	r3, #2
   827c2:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   827c4:	4b02      	ldr	r3, [pc, #8]	; (827d0 <ISPTarget_DisableTargetISP+0x14>)
   827c6:	4798      	blx	r3
#endif
}
   827c8:	bd08      	pop	{r3, pc}
   827ca:	bf00      	nop
   827cc:	40008000 	.word	0x40008000
   827d0:	00085609 	.word	0x00085609

000827d4 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   827d4:	b508      	push	{r3, lr}
	if (ResetTarget)
   827d6:	b180      	cbz	r0, 827fa <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   827d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827dc:	2011      	movs	r0, #17
   827de:	4b0a      	ldr	r3, [pc, #40]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   827e0:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   827e2:	209e      	movs	r0, #158	; 0x9e
   827e4:	4b09      	ldr	r3, [pc, #36]	; (8280c <ISPTarget_ChangeTargetResetLine+0x38>)
   827e6:	4798      	blx	r3
   827e8:	b918      	cbnz	r0, 827f2 <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   827ea:	2011      	movs	r0, #17
   827ec:	4b08      	ldr	r3, [pc, #32]	; (82810 <ISPTarget_ChangeTargetResetLine+0x3c>)
   827ee:	4798      	blx	r3
   827f0:	e008      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   827f2:	2011      	movs	r0, #17
   827f4:	4b07      	ldr	r3, [pc, #28]	; (82814 <ISPTarget_ChangeTargetResetLine+0x40>)
   827f6:	4798      	blx	r3
   827f8:	e004      	b.n	82804 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   827fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   827fe:	2011      	movs	r0, #17
   82800:	4b01      	ldr	r3, [pc, #4]	; (82808 <ISPTarget_ChangeTargetResetLine+0x34>)
   82802:	4798      	blx	r3
	}
}
   82804:	bd08      	pop	{r3, pc}
   82806:	bf00      	nop
   82808:	00085215 	.word	0x00085215
   8280c:	00082c51 	.word	0x00082c51
   82810:	000851df 	.word	0x000851df
   82814:	000851f9 	.word	0x000851f9

00082818 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   82818:	b570      	push	{r4, r5, r6, lr}
   8281a:	b082      	sub	sp, #8
   8281c:	4c19      	ldr	r4, [pc, #100]	; (82884 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   8281e:	2600      	movs	r6, #0
   82820:	4d19      	ldr	r5, [pc, #100]	; (82888 <ISPTarget_WaitWhileTargetBusy+0x70>)
   82822:	4633      	mov	r3, r6
   82824:	4632      	mov	r2, r6
   82826:	21f0      	movs	r1, #240	; 0xf0
   82828:	4620      	mov	r0, r4
   8282a:	47a8      	blx	r5
   8282c:	4633      	mov	r3, r6
   8282e:	4632      	mov	r2, r6
   82830:	4631      	mov	r1, r6
   82832:	4620      	mov	r0, r4
   82834:	47a8      	blx	r5
   82836:	4633      	mov	r3, r6
   82838:	4632      	mov	r2, r6
   8283a:	4631      	mov	r1, r6
   8283c:	4620      	mov	r0, r4
   8283e:	47a8      	blx	r5
   82840:	4633      	mov	r3, r6
   82842:	4632      	mov	r2, r6
   82844:	4631      	mov	r1, r6
   82846:	4620      	mov	r0, r4
   82848:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8284a:	6923      	ldr	r3, [r4, #16]
   8284c:	f413 7f00 	tst.w	r3, #512	; 0x200
   82850:	d0fb      	beq.n	8284a <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   82852:	f10d 0205 	add.w	r2, sp, #5
   82856:	f10d 0106 	add.w	r1, sp, #6
   8285a:	4620      	mov	r0, r4
   8285c:	4b0b      	ldr	r3, [pc, #44]	; (8288c <ISPTarget_WaitWhileTargetBusy+0x74>)
   8285e:	4798      	blx	r3
			return  ReceivedByte;
   82860:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   82864:	f010 0001 	ands.w	r0, r0, #1
   82868:	d005      	beq.n	82876 <ISPTarget_WaitWhileTargetBusy+0x5e>
   8286a:	4b09      	ldr	r3, [pc, #36]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   8286c:	681b      	ldr	r3, [r3, #0]
   8286e:	2b00      	cmp	r3, #0
   82870:	d1d7      	bne.n	82822 <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   82872:	2081      	movs	r0, #129	; 0x81
   82874:	e004      	b.n	82880 <ISPTarget_WaitWhileTargetBusy+0x68>
   82876:	4b06      	ldr	r3, [pc, #24]	; (82890 <ISPTarget_WaitWhileTargetBusy+0x78>)
   82878:	681b      	ldr	r3, [r3, #0]
   8287a:	2b00      	cmp	r3, #0
   8287c:	bf08      	it	eq
   8287e:	2081      	moveq	r0, #129	; 0x81
}
   82880:	b002      	add	sp, #8
   82882:	bd70      	pop	{r4, r5, r6, pc}
   82884:	40008000 	.word	0x40008000
   82888:	00085647 	.word	0x00085647
   8288c:	00085619 	.word	0x00085619
   82890:	20002664 	.word	0x20002664

00082894 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   82894:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   82896:	4d0c      	ldr	r5, [pc, #48]	; (828c8 <ISPTarget_LoadExtendedAddress+0x34>)
   82898:	2300      	movs	r3, #0
   8289a:	461a      	mov	r2, r3
   8289c:	214d      	movs	r1, #77	; 0x4d
   8289e:	4628      	mov	r0, r5
   828a0:	4c0a      	ldr	r4, [pc, #40]	; (828cc <ISPTarget_LoadExtendedAddress+0x38>)
   828a2:	47a0      	blx	r4
   828a4:	2300      	movs	r3, #0
   828a6:	461a      	mov	r2, r3
   828a8:	4619      	mov	r1, r3
   828aa:	4628      	mov	r0, r5
   828ac:	47a0      	blx	r4
   828ae:	2300      	movs	r3, #0
   828b0:	461a      	mov	r2, r3
   828b2:	4907      	ldr	r1, [pc, #28]	; (828d0 <ISPTarget_LoadExtendedAddress+0x3c>)
   828b4:	7889      	ldrb	r1, [r1, #2]
   828b6:	4628      	mov	r0, r5
   828b8:	47a0      	blx	r4
   828ba:	2300      	movs	r3, #0
   828bc:	461a      	mov	r2, r3
   828be:	4619      	mov	r1, r3
   828c0:	4628      	mov	r0, r5
   828c2:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   828c4:	bd38      	pop	{r3, r4, r5, pc}
   828c6:	bf00      	nop
   828c8:	40008000 	.word	0x40008000
   828cc:	00085647 	.word	0x00085647
   828d0:	20002660 	.word	0x20002660

000828d4 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   828d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   828d8:	b082      	sub	sp, #8
   828da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   828de:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   828e2:	2c20      	cmp	r4, #32
   828e4:	dc18      	bgt.n	82918 <ISPTarget_WaitForProgComplete+0x44>
   828e6:	460e      	mov	r6, r1
   828e8:	4617      	mov	r7, r2
   828ea:	2c01      	cmp	r4, #1
   828ec:	dd5b      	ble.n	829a6 <ISPTarget_WaitForProgComplete+0xd2>
   828ee:	3c02      	subs	r4, #2
   828f0:	2c1e      	cmp	r4, #30
   828f2:	d85a      	bhi.n	829aa <ISPTarget_WaitForProgComplete+0xd6>
   828f4:	e8df f004 	tbb	[pc, r4]
   828f8:	591e5919 	.word	0x591e5919
   828fc:	59545959 	.word	0x59545959
   82900:	59595959 	.word	0x59595959
   82904:	59195959 	.word	0x59195959
   82908:	59595959 	.word	0x59595959
   8290c:	59595959 	.word	0x59595959
   82910:	59595959 	.word	0x59595959
   82914:	5959      	.short	0x5959
   82916:	1e          	.byte	0x1e
   82917:	00          	.byte	0x00
   82918:	2c40      	cmp	r4, #64	; 0x40
   8291a:	d041      	beq.n	829a0 <ISPTarget_WaitForProgComplete+0xcc>
   8291c:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   8291e:	4b24      	ldr	r3, [pc, #144]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82920:	2264      	movs	r2, #100	; 0x64
   82922:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   82924:	b002      	add	sp, #8
   82926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   8292a:	4618      	mov	r0, r3
   8292c:	4b21      	ldr	r3, [pc, #132]	; (829b4 <ISPTarget_WaitForProgComplete+0xe0>)
   8292e:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   82930:	2000      	movs	r0, #0
			break;
   82932:	e7f4      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   82934:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   82938:	4c1f      	ldr	r4, [pc, #124]	; (829b8 <ISPTarget_WaitForProgComplete+0xe4>)
   8293a:	f04f 0900 	mov.w	r9, #0
   8293e:	4d1f      	ldr	r5, [pc, #124]	; (829bc <ISPTarget_WaitForProgComplete+0xe8>)
   82940:	464b      	mov	r3, r9
   82942:	464a      	mov	r2, r9
   82944:	4641      	mov	r1, r8
   82946:	4620      	mov	r0, r4
   82948:	47a8      	blx	r5
   8294a:	464b      	mov	r3, r9
   8294c:	464a      	mov	r2, r9
   8294e:	4651      	mov	r1, sl
   82950:	4620      	mov	r0, r4
   82952:	47a8      	blx	r5
   82954:	464b      	mov	r3, r9
   82956:	464a      	mov	r2, r9
   82958:	b2f1      	uxtb	r1, r6
   8295a:	4620      	mov	r0, r4
   8295c:	47a8      	blx	r5
   8295e:	464b      	mov	r3, r9
   82960:	464a      	mov	r2, r9
   82962:	4649      	mov	r1, r9
   82964:	4620      	mov	r0, r4
   82966:	47a8      	blx	r5
   82968:	6923      	ldr	r3, [r4, #16]
   8296a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8296e:	d0fb      	beq.n	82968 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   82970:	f10d 0205 	add.w	r2, sp, #5
   82974:	f10d 0106 	add.w	r1, sp, #6
   82978:	4620      	mov	r0, r4
   8297a:	4b11      	ldr	r3, [pc, #68]	; (829c0 <ISPTarget_WaitForProgComplete+0xec>)
   8297c:	4798      	blx	r3
			return  ReceivedByte;
   8297e:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   82982:	429f      	cmp	r7, r3
   82984:	d105      	bne.n	82992 <ISPTarget_WaitForProgComplete+0xbe>
   82986:	4b0a      	ldr	r3, [pc, #40]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82988:	681b      	ldr	r3, [r3, #0]
   8298a:	2b00      	cmp	r3, #0
   8298c:	d1d8      	bne.n	82940 <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8298e:	2080      	movs	r0, #128	; 0x80
   82990:	e7c5      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   82992:	4b07      	ldr	r3, [pc, #28]	; (829b0 <ISPTarget_WaitForProgComplete+0xdc>)
   82994:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   82996:	2b00      	cmp	r3, #0
   82998:	bf14      	ite	ne
   8299a:	2000      	movne	r0, #0
   8299c:	2080      	moveq	r0, #128	; 0x80
   8299e:	e7be      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   829a0:	4b08      	ldr	r3, [pc, #32]	; (829c4 <ISPTarget_WaitForProgComplete+0xf0>)
   829a2:	4798      	blx	r3
			break;
   829a4:	e7bb      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   829a6:	2000      	movs	r0, #0
   829a8:	e7b9      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829aa:	2000      	movs	r0, #0
   829ac:	e7b7      	b.n	8291e <ISPTarget_WaitForProgComplete+0x4a>
   829ae:	bf00      	nop
   829b0:	20002664 	.word	0x20002664
   829b4:	000824a1 	.word	0x000824a1
   829b8:	40008000 	.word	0x40008000
   829bc:	00085647 	.word	0x00085647
   829c0:	00085619 	.word	0x00085619
   829c4:	00082819 	.word	0x00082819

000829c8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   829c8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   829ca:	4b7e      	ldr	r3, [pc, #504]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   829cc:	789c      	ldrb	r4, [r3, #2]
   829ce:	4b7e      	ldr	r3, [pc, #504]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   829d0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   829d2:	4b7e      	ldr	r3, [pc, #504]	; (82bcc <V2Protocol_ProcessCommand+0x204>)
   829d4:	4798      	blx	r3

	switch (V2Command)
   829d6:	1e63      	subs	r3, r4, #1
   829d8:	2b21      	cmp	r3, #33	; 0x21
   829da:	f200 80e8 	bhi.w	82bae <V2Protocol_ProcessCommand+0x1e6>
   829de:	e8df f013 	tbh	[pc, r3, lsl #1]
   829e2:	0022      	.short	0x0022
   829e4:	00370037 	.word	0x00370037
   829e8:	00e600e6 	.word	0x00e600e6
   829ec:	00e6006c 	.word	0x00e6006c
   829f0:	00e600e6 	.word	0x00e600e6
   829f4:	00e6008b 	.word	0x00e6008b
   829f8:	00e600e6 	.word	0x00e600e6
   829fc:	00e600e6 	.word	0x00e600e6
   82a00:	00970093 	.word	0x00970093
   82a04:	009b00a7 	.word	0x009b00a7
   82a08:	009b00a1 	.word	0x009b00a1
   82a0c:	00b000a1 	.word	0x00b000a1
   82a10:	00b000ab 	.word	0x00b000ab
   82a14:	00ab00ab 	.word	0x00ab00ab
   82a18:	00b500ab 	.word	0x00b500ab
   82a1c:	00e600e6 	.word	0x00e600e6
   82a20:	00d300b9 	.word	0x00d300b9
   82a24:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82a26:	4b68      	ldr	r3, [pc, #416]	; (82bc8 <V2Protocol_ProcessCommand+0x200>)
   82a28:	2200      	movs	r2, #0
   82a2a:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82a2c:	220d      	movs	r2, #13
   82a2e:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82a30:	4c67      	ldr	r4, [pc, #412]	; (82bd0 <V2Protocol_ProcessCommand+0x208>)
   82a32:	cc07      	ldmia	r4!, {r0, r1, r2}
   82a34:	f8c3 0003 	str.w	r0, [r3, #3]
   82a38:	f8c3 1007 	str.w	r1, [r3, #7]
   82a3c:	f8c3 200b 	str.w	r2, [r3, #11]
   82a40:	7822      	ldrb	r2, [r4, #0]
   82a42:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   82a44:	4a5f      	ldr	r2, [pc, #380]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a46:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82a48:	2310      	movs	r3, #16
   82a4a:	8193      	strh	r3, [r2, #12]
	return true;
   82a4c:	2001      	movs	r0, #1
}
   82a4e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82a50:	4b5c      	ldr	r3, [pc, #368]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82a52:	689b      	ldr	r3, [r3, #8]
   82a54:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82a56:	2c02      	cmp	r4, #2
   82a58:	d00c      	beq.n	82a74 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82a5a:	4b5e      	ldr	r3, [pc, #376]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a5c:	2202      	movs	r2, #2
   82a5e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a60:	4628      	mov	r0, r5
   82a62:	4b5d      	ldr	r3, [pc, #372]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a64:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a66:	2c03      	cmp	r4, #3
   82a68:	d017      	beq.n	82a9a <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82a6a:	4b5c      	ldr	r3, [pc, #368]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a6c:	22c0      	movs	r2, #192	; 0xc0
   82a6e:	705a      	strb	r2, [r3, #1]
	return true;
   82a70:	2001      	movs	r0, #1
   82a72:	e7ec      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82a74:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82a76:	4b57      	ldr	r3, [pc, #348]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82a78:	2202      	movs	r2, #2
   82a7a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82a7c:	4628      	mov	r0, r5
   82a7e:	4b56      	ldr	r3, [pc, #344]	; (82bd8 <V2Protocol_ProcessCommand+0x210>)
   82a80:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82a82:	f010 0f02 	tst.w	r0, #2
   82a86:	d0f0      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82a88:	4b54      	ldr	r3, [pc, #336]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82a8a:	2200      	movs	r2, #0
   82a8c:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a8e:	4621      	mov	r1, r4
   82a90:	4628      	mov	r0, r5
   82a92:	4b53      	ldr	r3, [pc, #332]	; (82be0 <V2Protocol_ProcessCommand+0x218>)
   82a94:	4798      	blx	r3
	return true;
   82a96:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82a98:	e7d9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82a9a:	f010 0f01 	tst.w	r0, #1
   82a9e:	d0e4      	beq.n	82a6a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82aa0:	4c4e      	ldr	r4, [pc, #312]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82aa2:	2300      	movs	r3, #0
   82aa4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82aa6:	4628      	mov	r0, r5
   82aa8:	4b4e      	ldr	r3, [pc, #312]	; (82be4 <V2Protocol_ProcessCommand+0x21c>)
   82aaa:	4798      	blx	r3
   82aac:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82aae:	4a49      	ldr	r2, [pc, #292]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ab0:	8813      	ldrh	r3, [r2, #0]
   82ab2:	3301      	adds	r3, #1
   82ab4:	8013      	strh	r3, [r2, #0]
	return true;
   82ab6:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   82ab8:	e7c9      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82aba:	4b42      	ldr	r3, [pc, #264]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82abc:	689b      	ldr	r3, [r3, #8]
   82abe:	78da      	ldrb	r2, [r3, #3]
   82ac0:	7899      	ldrb	r1, [r3, #2]
   82ac2:	0409      	lsls	r1, r1, #16
   82ac4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4311      	orrs	r1, r2
   82acc:	785b      	ldrb	r3, [r3, #1]
   82ace:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82ad2:	4b45      	ldr	r3, [pc, #276]	; (82be8 <V2Protocol_ProcessCommand+0x220>)
   82ad4:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82ad6:	2900      	cmp	r1, #0
   82ad8:	db0a      	blt.n	82af0 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82ada:	4844      	ldr	r0, [pc, #272]	; (82bec <V2Protocol_ProcessCommand+0x224>)
   82adc:	4b44      	ldr	r3, [pc, #272]	; (82bf0 <V2Protocol_ProcessCommand+0x228>)
   82ade:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82ae0:	4b3e      	ldr	r3, [pc, #248]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82ae2:	2200      	movs	r2, #0
   82ae4:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82ae6:	4b3b      	ldr	r3, [pc, #236]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82ae8:	2202      	movs	r2, #2
   82aea:	801a      	strh	r2, [r3, #0]
	return true;
   82aec:	2001      	movs	r0, #1
}
   82aee:	e7ae      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   82af0:	4b40      	ldr	r3, [pc, #256]	; (82bf4 <V2Protocol_ProcessCommand+0x22c>)
   82af2:	2201      	movs	r2, #1
   82af4:	701a      	strb	r2, [r3, #0]
   82af6:	e7f0      	b.n	82ada <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82af8:	4b38      	ldr	r3, [pc, #224]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82afa:	2200      	movs	r2, #0
   82afc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82afe:	4b35      	ldr	r3, [pc, #212]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b00:	2202      	movs	r2, #2
   82b02:	801a      	strh	r2, [r3, #0]
	return true;
   82b04:	2001      	movs	r0, #1
}
   82b06:	e7a2      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82b08:	4b3b      	ldr	r3, [pc, #236]	; (82bf8 <V2Protocol_ProcessCommand+0x230>)
   82b0a:	4798      	blx	r3
	return true;
   82b0c:	2001      	movs	r0, #1
			break;
   82b0e:	e79e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82b10:	4b3a      	ldr	r3, [pc, #232]	; (82bfc <V2Protocol_ProcessCommand+0x234>)
   82b12:	4798      	blx	r3
	return true;
   82b14:	2001      	movs	r0, #1
			break;
   82b16:	e79a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82b18:	4939      	ldr	r1, [pc, #228]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b1a:	4620      	mov	r0, r4
   82b1c:	4b39      	ldr	r3, [pc, #228]	; (82c04 <V2Protocol_ProcessCommand+0x23c>)
   82b1e:	4798      	blx	r3
	return true;
   82b20:	2001      	movs	r0, #1
			break;
   82b22:	e794      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82b24:	4936      	ldr	r1, [pc, #216]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b26:	4620      	mov	r0, r4
   82b28:	4b37      	ldr	r3, [pc, #220]	; (82c08 <V2Protocol_ProcessCommand+0x240>)
   82b2a:	4798      	blx	r3
	return true;
   82b2c:	2001      	movs	r0, #1
			break;
   82b2e:	e78e      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   82b30:	4b36      	ldr	r3, [pc, #216]	; (82c0c <V2Protocol_ProcessCommand+0x244>)
   82b32:	4798      	blx	r3
	return true;
   82b34:	2001      	movs	r0, #1
			break;
   82b36:	e78a      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82b38:	4620      	mov	r0, r4
   82b3a:	4b35      	ldr	r3, [pc, #212]	; (82c10 <V2Protocol_ProcessCommand+0x248>)
   82b3c:	4798      	blx	r3
	return true;
   82b3e:	2001      	movs	r0, #1
			break;
   82b40:	e785      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   82b42:	4620      	mov	r0, r4
   82b44:	4b33      	ldr	r3, [pc, #204]	; (82c14 <V2Protocol_ProcessCommand+0x24c>)
   82b46:	4798      	blx	r3
	return true;
   82b48:	2001      	movs	r0, #1
			break;
   82b4a:	e780      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   82b4c:	4b32      	ldr	r3, [pc, #200]	; (82c18 <V2Protocol_ProcessCommand+0x250>)
   82b4e:	4798      	blx	r3
	return true;
   82b50:	2001      	movs	r0, #1
			break;
   82b52:	e77c      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82b54:	4a1b      	ldr	r2, [pc, #108]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b56:	4b21      	ldr	r3, [pc, #132]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82b58:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82b5a:	4b1e      	ldr	r3, [pc, #120]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82b5c:	8819      	ldrh	r1, [r3, #0]
   82b5e:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82b60:	2200      	movs	r2, #0
   82b62:	801a      	strh	r2, [r3, #0]
			return true;
   82b64:	2001      	movs	r0, #1
   82b66:	e772      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b68:	4a16      	ldr	r2, [pc, #88]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b6a:	8853      	ldrh	r3, [r2, #2]
   82b6c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b6e:	88d2      	ldrh	r2, [r2, #6]
   82b70:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b78:	dc21      	bgt.n	82bbe <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82b7a:	4912      	ldr	r1, [pc, #72]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b7c:	4b20      	ldr	r3, [pc, #128]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82b7e:	4403      	add	r3, r0
   82b80:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82b82:	818a      	strh	r2, [r1, #12]
			return true;
   82b84:	2001      	movs	r0, #1
   82b86:	e762      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82b88:	4a0e      	ldr	r2, [pc, #56]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82b8a:	8853      	ldrh	r3, [r2, #2]
   82b8c:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82b8e:	88d2      	ldrh	r2, [r2, #6]
   82b90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82b98:	dd01      	ble.n	82b9e <V2Protocol_ProcessCommand+0x1d6>
				return false;
   82b9a:	2000      	movs	r0, #0
   82b9c:	e757      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82b9e:	4b09      	ldr	r3, [pc, #36]	; (82bc4 <V2Protocol_ProcessCommand+0x1fc>)
   82ba0:	6899      	ldr	r1, [r3, #8]
   82ba2:	4b17      	ldr	r3, [pc, #92]	; (82c00 <V2Protocol_ProcessCommand+0x238>)
   82ba4:	4418      	add	r0, r3
   82ba6:	4b1d      	ldr	r3, [pc, #116]	; (82c1c <V2Protocol_ProcessCommand+0x254>)
   82ba8:	4798      	blx	r3
			return true;
   82baa:	2001      	movs	r0, #1
   82bac:	e74f      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82bae:	4b0b      	ldr	r3, [pc, #44]	; (82bdc <V2Protocol_ProcessCommand+0x214>)
   82bb0:	22c9      	movs	r2, #201	; 0xc9
   82bb2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82bb4:	4b07      	ldr	r3, [pc, #28]	; (82bd4 <V2Protocol_ProcessCommand+0x20c>)
   82bb6:	2202      	movs	r2, #2
   82bb8:	801a      	strh	r2, [r3, #0]
	return true;
   82bba:	2001      	movs	r0, #1
}
   82bbc:	e747      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
				return false;
   82bbe:	2000      	movs	r0, #0
   82bc0:	e745      	b.n	82a4e <V2Protocol_ProcessCommand+0x86>
   82bc2:	bf00      	nop
   82bc4:	20002df4 	.word	0x20002df4
   82bc8:	20001a2c 	.word	0x20001a2c
   82bcc:	000835a1 	.word	0x000835a1
   82bd0:	0008e4d8 	.word	0x0008e4d8
   82bd4:	2000263e 	.word	0x2000263e
   82bd8:	00082c3d 	.word	0x00082c3d
   82bdc:	20002640 	.word	0x20002640
   82be0:	00082c65 	.word	0x00082c65
   82be4:	00082c51 	.word	0x00082c51
   82be8:	20002660 	.word	0x20002660
   82bec:	0008e4e8 	.word	0x0008e4e8
   82bf0:	000878b5 	.word	0x000878b5
   82bf4:	2000263c 	.word	0x2000263c
   82bf8:	000824d5 	.word	0x000824d5
   82bfc:	0008261d 	.word	0x0008261d
   82c00:	2000192c 	.word	0x2000192c
   82c04:	00081fb5 	.word	0x00081fb5
   82c08:	00082235 	.word	0x00082235
   82c0c:	0008267d 	.word	0x0008267d
   82c10:	00082381 	.word	0x00082381
   82c14:	0008242d 	.word	0x0008242d
   82c18:	0008249d 	.word	0x0008249d
   82c1c:	000878dd 	.word	0x000878dd

00082c20 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   82c20:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   82c22:	4805      	ldr	r0, [pc, #20]	; (82c38 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c24:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   82c28:	7803      	ldrb	r3, [r0, #0]
   82c2a:	4293      	cmp	r3, r2
   82c2c:	d003      	beq.n	82c36 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   82c2e:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82c30:	4288      	cmp	r0, r1
   82c32:	d1f9      	bne.n	82c28 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   82c34:	2000      	movs	r0, #0
}
   82c36:	4770      	bx	lr
   82c38:	20000588 	.word	0x20000588

00082c3c <V2Params_GetParameterPrivileges>:
{
   82c3c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c3e:	4b03      	ldr	r3, [pc, #12]	; (82c4c <V2Params_GetParameterPrivileges+0x10>)
   82c40:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c42:	b108      	cbz	r0, 82c48 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82c44:	7840      	ldrb	r0, [r0, #1]
}
   82c46:	bd08      	pop	{r3, pc}
	  return 0;
   82c48:	2000      	movs	r0, #0
   82c4a:	e7fc      	b.n	82c46 <V2Params_GetParameterPrivileges+0xa>
   82c4c:	00082c21 	.word	0x00082c21

00082c50 <V2Params_GetParameterValue>:
{
   82c50:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c52:	4b03      	ldr	r3, [pc, #12]	; (82c60 <V2Params_GetParameterValue+0x10>)
   82c54:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c56:	b108      	cbz	r0, 82c5c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   82c58:	7880      	ldrb	r0, [r0, #2]
}
   82c5a:	bd08      	pop	{r3, pc}
	  return 0;
   82c5c:	2000      	movs	r0, #0
   82c5e:	e7fc      	b.n	82c5a <V2Params_GetParameterValue+0xa>
   82c60:	00082c21 	.word	0x00082c21

00082c64 <V2Params_SetParameterValue>:
{
   82c64:	b510      	push	{r4, lr}
   82c66:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82c68:	4b02      	ldr	r3, [pc, #8]	; (82c74 <V2Params_SetParameterValue+0x10>)
   82c6a:	4798      	blx	r3
	if (ParamInfo == NULL)
   82c6c:	b100      	cbz	r0, 82c70 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   82c6e:	7084      	strb	r4, [r0, #2]
}
   82c70:	bd10      	pop	{r4, pc}
   82c72:	bf00      	nop
   82c74:	00082c21 	.word	0x00082c21

00082c78 <ctrl_cdc_settings_cb>:

}

static void ctrl_cdc_settings_cb(void)
{
    if (udd_g_ctrlreq.req.wValue & 0x01) {
   82c78:	4b08      	ldr	r3, [pc, #32]	; (82c9c <ctrl_cdc_settings_cb+0x24>)
   82c7a:	885b      	ldrh	r3, [r3, #2]
   82c7c:	f013 0f01 	tst.w	r3, #1
        cdc_settings_change[0] = 1;
   82c80:	4a07      	ldr	r2, [pc, #28]	; (82ca0 <ctrl_cdc_settings_cb+0x28>)
   82c82:	bf14      	ite	ne
   82c84:	2101      	movne	r1, #1
    } else {
        cdc_settings_change[0] = 0;
   82c86:	2100      	moveq	r1, #0
   82c88:	7011      	strb	r1, [r2, #0]
    }
    if (udd_g_ctrlreq.req.wValue & 0x02) {
   82c8a:	f013 0f02 	tst.w	r3, #2
        cdc_settings_change[1] = 1;
   82c8e:	4b04      	ldr	r3, [pc, #16]	; (82ca0 <ctrl_cdc_settings_cb+0x28>)
   82c90:	bf14      	ite	ne
   82c92:	2201      	movne	r2, #1
    } else {
        cdc_settings_change[1] = 0;
   82c94:	2200      	moveq	r2, #0
   82c96:	705a      	strb	r2, [r3, #1]
    }
}
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop
   82c9c:	20002df4 	.word	0x20002df4
   82ca0:	200005a8 	.word	0x200005a8

00082ca4 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   82ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82ca6:	4b0a      	ldr	r3, [pc, #40]	; (82cd0 <ctrl_readmem_ctrl+0x2c>)
   82ca8:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82caa:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82cac:	4b09      	ldr	r3, [pc, #36]	; (82cd4 <ctrl_readmem_ctrl+0x30>)
   82cae:	4798      	blx	r3
	while(!FPGA_setlock(fpga_ctrlmem));
   82cb0:	2505      	movs	r5, #5
   82cb2:	4c09      	ldr	r4, [pc, #36]	; (82cd8 <ctrl_readmem_ctrl+0x34>)
   82cb4:	4628      	mov	r0, r5
   82cb6:	47a0      	blx	r4
   82cb8:	2800      	cmp	r0, #0
   82cba:	d0fb      	beq.n	82cb4 <ctrl_readmem_ctrl+0x10>
	FPGA_setaddr(address);
   82cbc:	4638      	mov	r0, r7
   82cbe:	4b07      	ldr	r3, [pc, #28]	; (82cdc <ctrl_readmem_ctrl+0x38>)
   82cc0:	4798      	blx	r3
	ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82cc2:	4b07      	ldr	r3, [pc, #28]	; (82ce0 <ctrl_readmem_ctrl+0x3c>)
   82cc4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82cc8:	601a      	str	r2, [r3, #0]
	ctrlmemread_size = buflen;
   82cca:	4b06      	ldr	r3, [pc, #24]	; (82ce4 <ctrl_readmem_ctrl+0x40>)
   82ccc:	601e      	str	r6, [r3, #0]
}
   82cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cd0:	20001a50 	.word	0x20001a50
   82cd4:	00081d6d 	.word	0x00081d6d
   82cd8:	00081d41 	.word	0x00081d41
   82cdc:	00081d85 	.word	0x00081d85
   82ce0:	20001a90 	.word	0x20001a90
   82ce4:	20001a94 	.word	0x20001a94

00082ce8 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   82ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82cea:	4b0e      	ldr	r3, [pc, #56]	; (82d24 <ctrl_writemem_ctrl+0x3c>)
   82cec:	681c      	ldr	r4, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82cee:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82cf0:	4b0d      	ldr	r3, [pc, #52]	; (82d28 <ctrl_writemem_ctrl+0x40>)
   82cf2:	4798      	blx	r3
	while(!FPGA_setlock(fpga_generic));
   82cf4:	2601      	movs	r6, #1
   82cf6:	4d0d      	ldr	r5, [pc, #52]	; (82d2c <ctrl_writemem_ctrl+0x44>)
   82cf8:	4630      	mov	r0, r6
   82cfa:	47a8      	blx	r5
   82cfc:	2800      	cmp	r0, #0
   82cfe:	d0fb      	beq.n	82cf8 <ctrl_writemem_ctrl+0x10>
	FPGA_setaddr(address);
   82d00:	4638      	mov	r0, r7
   82d02:	4b0b      	ldr	r3, [pc, #44]	; (82d30 <ctrl_writemem_ctrl+0x48>)
   82d04:	4798      	blx	r3
	for(unsigned int i = 0; i < buflen; i++){
   82d06:	b14c      	cbz	r4, 82d1c <ctrl_writemem_ctrl+0x34>
   82d08:	4a0a      	ldr	r2, [pc, #40]	; (82d34 <ctrl_writemem_ctrl+0x4c>)
   82d0a:	2300      	movs	r3, #0
		xram[i] = ctrlbuf_payload[i];
   82d0c:	4d0a      	ldr	r5, [pc, #40]	; (82d38 <ctrl_writemem_ctrl+0x50>)
   82d0e:	6829      	ldr	r1, [r5, #0]
   82d10:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82d14:	54c8      	strb	r0, [r1, r3]
	for(unsigned int i = 0; i < buflen; i++){
   82d16:	3301      	adds	r3, #1
   82d18:	429c      	cmp	r4, r3
   82d1a:	d1f8      	bne.n	82d0e <ctrl_writemem_ctrl+0x26>
	FPGA_releaselock();
   82d1c:	4b02      	ldr	r3, [pc, #8]	; (82d28 <ctrl_writemem_ctrl+0x40>)
   82d1e:	4798      	blx	r3
}
   82d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d22:	bf00      	nop
   82d24:	20001a50 	.word	0x20001a50
   82d28:	00081d6d 	.word	0x00081d6d
   82d2c:	00081d41 	.word	0x00081d41
   82d30:	00081d85 	.word	0x00081d85
   82d34:	20001a57 	.word	0x20001a57
   82d38:	200002f4 	.word	0x200002f4

00082d3c <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   82d3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d3e:	4b07      	ldr	r3, [pc, #28]	; (82d5c <ctrl_writemem_bulk+0x20>)
   82d40:	685e      	ldr	r6, [r3, #4]
	FPGA_releaselock();
   82d42:	4b07      	ldr	r3, [pc, #28]	; (82d60 <ctrl_writemem_bulk+0x24>)
   82d44:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockout));
   82d46:	2504      	movs	r5, #4
   82d48:	4c06      	ldr	r4, [pc, #24]	; (82d64 <ctrl_writemem_bulk+0x28>)
   82d4a:	4628      	mov	r0, r5
   82d4c:	47a0      	blx	r4
   82d4e:	2800      	cmp	r0, #0
   82d50:	d0fb      	beq.n	82d4a <ctrl_writemem_bulk+0xe>
	FPGA_setaddr(address);
   82d52:	4630      	mov	r0, r6
   82d54:	4b04      	ldr	r3, [pc, #16]	; (82d68 <ctrl_writemem_bulk+0x2c>)
   82d56:	4798      	blx	r3
}
   82d58:	bd70      	pop	{r4, r5, r6, pc}
   82d5a:	bf00      	nop
   82d5c:	20001a50 	.word	0x20001a50
   82d60:	00081d6d 	.word	0x00081d6d
   82d64:	00081d41 	.word	0x00081d41
   82d68:	00081d85 	.word	0x00081d85

00082d6c <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   82d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   82d6e:	4b0a      	ldr	r3, [pc, #40]	; (82d98 <ctrl_readmem_bulk+0x2c>)
   82d70:	681e      	ldr	r6, [r3, #0]
	uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82d72:	685f      	ldr	r7, [r3, #4]
	FPGA_releaselock();
   82d74:	4b09      	ldr	r3, [pc, #36]	; (82d9c <ctrl_readmem_bulk+0x30>)
   82d76:	4798      	blx	r3
	while(!FPGA_setlock(fpga_blockin));
   82d78:	2502      	movs	r5, #2
   82d7a:	4c09      	ldr	r4, [pc, #36]	; (82da0 <ctrl_readmem_bulk+0x34>)
   82d7c:	4628      	mov	r0, r5
   82d7e:	47a0      	blx	r4
   82d80:	2800      	cmp	r0, #0
   82d82:	d0fb      	beq.n	82d7c <ctrl_readmem_bulk+0x10>
	FPGA_setaddr(address);
   82d84:	4638      	mov	r0, r7
   82d86:	4b07      	ldr	r3, [pc, #28]	; (82da4 <ctrl_readmem_bulk+0x38>)
   82d88:	4798      	blx	r3
	udi_vendor_bulk_in_run(
   82d8a:	4a07      	ldr	r2, [pc, #28]	; (82da8 <ctrl_readmem_bulk+0x3c>)
   82d8c:	4631      	mov	r1, r6
   82d8e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   82d92:	4b06      	ldr	r3, [pc, #24]	; (82dac <ctrl_readmem_bulk+0x40>)
   82d94:	4798      	blx	r3
}
   82d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d98:	20001a50 	.word	0x20001a50
   82d9c:	00081d6d 	.word	0x00081d6d
   82da0:	00081d41 	.word	0x00081d41
   82da4:	00081d85 	.word	0x00081d85
   82da8:	00082efd 	.word	0x00082efd
   82dac:	000846d1 	.word	0x000846d1

00082db0 <ctrl_xmega_program_void>:
{
   82db0:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   82db2:	4b01      	ldr	r3, [pc, #4]	; (82db8 <ctrl_xmega_program_void+0x8>)
   82db4:	4798      	blx	r3
}
   82db6:	bd08      	pop	{r3, pc}
   82db8:	00083f2d 	.word	0x00083f2d

00082dbc <ctrl_avr_program_void>:
{
   82dbc:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   82dbe:	4b01      	ldr	r3, [pc, #4]	; (82dc4 <ctrl_avr_program_void+0x8>)
   82dc0:	4798      	blx	r3
}
   82dc2:	bd08      	pop	{r3, pc}
   82dc4:	000829c9 	.word	0x000829c9

00082dc8 <ctrl_usart2_enabledump>:
{
   82dc8:	b510      	push	{r4, lr}
   82dca:	b084      	sub	sp, #16
	switch(udd_g_ctrlreq.req.wValue & 0xFF){
   82dcc:	4b1e      	ldr	r3, [pc, #120]	; (82e48 <ctrl_usart2_enabledump+0x80>)
   82dce:	789b      	ldrb	r3, [r3, #2]
   82dd0:	b11b      	cbz	r3, 82dda <ctrl_usart2_enabledump+0x12>
   82dd2:	2b01      	cmp	r3, #1
   82dd4:	d012      	beq.n	82dfc <ctrl_usart2_enabledump+0x34>
}
   82dd6:	b004      	add	sp, #16
   82dd8:	bd10      	pop	{r4, pc}
			usart_disable_rx(USART2);
   82dda:	4c1c      	ldr	r4, [pc, #112]	; (82e4c <ctrl_usart2_enabledump+0x84>)
   82ddc:	4620      	mov	r0, r4
   82dde:	4b1c      	ldr	r3, [pc, #112]	; (82e50 <ctrl_usart2_enabledump+0x88>)
   82de0:	4798      	blx	r3
			usart_disable_tx(USART2);
   82de2:	4620      	mov	r0, r4
   82de4:	4b1b      	ldr	r3, [pc, #108]	; (82e54 <ctrl_usart2_enabledump+0x8c>)
   82de6:	4798      	blx	r3
			usart_enable_interrupt(USART2, 0);
   82de8:	2100      	movs	r1, #0
   82dea:	4620      	mov	r0, r4
   82dec:	4b1a      	ldr	r3, [pc, #104]	; (82e58 <ctrl_usart2_enabledump+0x90>)
   82dee:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82df0:	4b1a      	ldr	r3, [pc, #104]	; (82e5c <ctrl_usart2_enabledump+0x94>)
   82df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   82dfa:	e7ec      	b.n	82dd6 <ctrl_usart2_enabledump+0xe>
			pmc_enable_periph_clk(ID_USART2);
   82dfc:	200f      	movs	r0, #15
   82dfe:	4b18      	ldr	r3, [pc, #96]	; (82e60 <ctrl_usart2_enabledump+0x98>)
   82e00:	4798      	blx	r3
			opts.channel_mode = US_MR_CHMODE_NORMAL;
   82e02:	2300      	movs	r3, #0
   82e04:	9303      	str	r3, [sp, #12]
			opts.spi_mode = SPI_MODE_0;
   82e06:	9302      	str	r3, [sp, #8]
			opts.char_length = US_MR_CHRL_8_BIT;
   82e08:	23c0      	movs	r3, #192	; 0xc0
   82e0a:	9301      	str	r3, [sp, #4]
			usart_init_spi_slave(USART2, &opts);
   82e0c:	4c0f      	ldr	r4, [pc, #60]	; (82e4c <ctrl_usart2_enabledump+0x84>)
   82e0e:	4669      	mov	r1, sp
   82e10:	4620      	mov	r0, r4
   82e12:	4b14      	ldr	r3, [pc, #80]	; (82e64 <ctrl_usart2_enabledump+0x9c>)
   82e14:	4798      	blx	r3
			usart_enable_rx(USART2);
   82e16:	4620      	mov	r0, r4
   82e18:	4b13      	ldr	r3, [pc, #76]	; (82e68 <ctrl_usart2_enabledump+0xa0>)
   82e1a:	4798      	blx	r3
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82e1c:	4b0f      	ldr	r3, [pc, #60]	; (82e5c <ctrl_usart2_enabledump+0x94>)
   82e1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e22:	601a      	str	r2, [r3, #0]
			usart_enable_interrupt(USART2, US_IER_RXRDY);
   82e24:	2101      	movs	r1, #1
   82e26:	4620      	mov	r0, r4
   82e28:	4b0b      	ldr	r3, [pc, #44]	; (82e58 <ctrl_usart2_enabledump+0x90>)
   82e2a:	4798      	blx	r3
			gpio_configure_pin(PIO_PA23_IDX, (PIO_PERIPH_A | PIO_DEFAULT));
   82e2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e30:	2017      	movs	r0, #23
   82e32:	4c0e      	ldr	r4, [pc, #56]	; (82e6c <ctrl_usart2_enabledump+0xa4>)
   82e34:	47a0      	blx	r4
			gpio_configure_pin(PIO_PB22_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e3a:	2036      	movs	r0, #54	; 0x36
   82e3c:	47a0      	blx	r4
			gpio_configure_pin(PIO_PA25_IDX, (PIO_PERIPH_B | PIO_DEFAULT));
   82e3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e42:	2019      	movs	r0, #25
   82e44:	47a0      	blx	r4
}
   82e46:	e7c6      	b.n	82dd6 <ctrl_usart2_enabledump+0xe>
   82e48:	20002df4 	.word	0x20002df4
   82e4c:	40098000 	.word	0x40098000
   82e50:	00086e7b 	.word	0x00086e7b
   82e54:	00086e6b 	.word	0x00086e6b
   82e58:	00086e81 	.word	0x00086e81
   82e5c:	e000e100 	.word	0xe000e100
   82e60:	00085559 	.word	0x00085559
   82e64:	00086dbd 	.word	0x00086dbd
   82e68:	00086e75 	.word	0x00086e75
   82e6c:	00085215 	.word	0x00085215

00082e70 <ctrl_usart_cb_data>:
{
	ctrl_usart(USART_TARGET, false);
}

static void ctrl_usart_cb_data(void)
{		
   82e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82e72:	4b0a      	ldr	r3, [pc, #40]	; (82e9c <ctrl_usart_cb_data+0x2c>)
   82e74:	88da      	ldrh	r2, [r3, #6]
   82e76:	899b      	ldrh	r3, [r3, #12]
   82e78:	4293      	cmp	r3, r2
   82e7a:	d30d      	bcc.n	82e98 <ctrl_usart_cb_data+0x28>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e7c:	b162      	cbz	r2, 82e98 <ctrl_usart_cb_data+0x28>
   82e7e:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   82e80:	4d06      	ldr	r5, [pc, #24]	; (82e9c <ctrl_usart_cb_data+0x2c>)
   82e82:	4f07      	ldr	r7, [pc, #28]	; (82ea0 <ctrl_usart_cb_data+0x30>)
   82e84:	4e07      	ldr	r6, [pc, #28]	; (82ea4 <ctrl_usart_cb_data+0x34>)
   82e86:	68ab      	ldr	r3, [r5, #8]
   82e88:	5d1a      	ldrb	r2, [r3, r4]
   82e8a:	2100      	movs	r1, #0
   82e8c:	4638      	mov	r0, r7
   82e8e:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82e90:	3401      	adds	r4, #1
   82e92:	88eb      	ldrh	r3, [r5, #6]
   82e94:	42a3      	cmp	r3, r4
   82e96:	dcf6      	bgt.n	82e86 <ctrl_usart_cb_data+0x16>
	}
}
   82e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e9a:	bf00      	nop
   82e9c:	20002df4 	.word	0x20002df4
   82ea0:	40090000 	.word	0x40090000
   82ea4:	0008397d 	.word	0x0008397d

00082ea8 <ctrl_usart_cb>:
{
   82ea8:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   82eaa:	2100      	movs	r1, #0
   82eac:	4801      	ldr	r0, [pc, #4]	; (82eb4 <ctrl_usart_cb+0xc>)
   82eae:	4b02      	ldr	r3, [pc, #8]	; (82eb8 <ctrl_usart_cb+0x10>)
   82eb0:	4798      	blx	r3
}
   82eb2:	bd08      	pop	{r3, pc}
   82eb4:	40090000 	.word	0x40090000
   82eb8:	00083621 	.word	0x00083621

00082ebc <ctrl_progfpga_bulk>:
	// If any of the above failed...
	return false;		
}


void ctrl_progfpga_bulk(void){
   82ebc:	b508      	push	{r3, lr}
	
	switch(udd_g_ctrlreq.req.wValue){
   82ebe:	4b0b      	ldr	r3, [pc, #44]	; (82eec <ctrl_progfpga_bulk+0x30>)
   82ec0:	885b      	ldrh	r3, [r3, #2]
   82ec2:	2ba1      	cmp	r3, #161	; 0xa1
   82ec4:	d007      	beq.n	82ed6 <ctrl_progfpga_bulk+0x1a>
   82ec6:	2ba2      	cmp	r3, #162	; 0xa2
   82ec8:	d00b      	beq.n	82ee2 <ctrl_progfpga_bulk+0x26>
   82eca:	2ba0      	cmp	r3, #160	; 0xa0
   82ecc:	d000      	beq.n	82ed0 <ctrl_progfpga_bulk+0x14>
			break;
			
		default:
			break;
	}
}
   82ece:	bd08      	pop	{r3, pc}
			fpga_program_setup1();			
   82ed0:	4b07      	ldr	r3, [pc, #28]	; (82ef0 <ctrl_progfpga_bulk+0x34>)
   82ed2:	4798      	blx	r3
			break;
   82ed4:	e7fb      	b.n	82ece <ctrl_progfpga_bulk+0x12>
			fpga_program_setup2();
   82ed6:	4b07      	ldr	r3, [pc, #28]	; (82ef4 <ctrl_progfpga_bulk+0x38>)
   82ed8:	4798      	blx	r3
			blockendpoint_usage = bep_fpgabitstream;
   82eda:	4b07      	ldr	r3, [pc, #28]	; (82ef8 <ctrl_progfpga_bulk+0x3c>)
   82edc:	220a      	movs	r2, #10
   82ede:	701a      	strb	r2, [r3, #0]
			break;
   82ee0:	e7f5      	b.n	82ece <ctrl_progfpga_bulk+0x12>
			blockendpoint_usage = bep_emem;
   82ee2:	4b05      	ldr	r3, [pc, #20]	; (82ef8 <ctrl_progfpga_bulk+0x3c>)
   82ee4:	2200      	movs	r2, #0
   82ee6:	701a      	strb	r2, [r3, #0]
}
   82ee8:	e7f1      	b.n	82ece <ctrl_progfpga_bulk+0x12>
   82eea:	bf00      	nop
   82eec:	20002df4 	.word	0x20002df4
   82ef0:	00087179 	.word	0x00087179
   82ef4:	0008720d 	.word	0x0008720d
   82ef8:	20001a4d 	.word	0x20001a4d

00082efc <main_vendor_bulk_in_received>:
	return false;
}

void main_vendor_bulk_in_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82efc:	b508      	push	{r3, lr}
	UNUSED(nb_transfered);
	UNUSED(ep);
	
	if (FPGA_lockstatus() == fpga_blockin){		
   82efe:	4b08      	ldr	r3, [pc, #32]	; (82f20 <main_vendor_bulk_in_received+0x24>)
   82f00:	4798      	blx	r3
   82f02:	2802      	cmp	r0, #2
   82f04:	d004      	beq.n	82f10 <main_vendor_bulk_in_received+0x14>
		FPGA_releaselock();
	} else 	if (FPGA_lockstatus() == fpga_streamin) {
   82f06:	4b06      	ldr	r3, [pc, #24]	; (82f20 <main_vendor_bulk_in_received+0x24>)
   82f08:	4798      	blx	r3
   82f0a:	2803      	cmp	r0, #3
   82f0c:	d003      	beq.n	82f16 <main_vendor_bulk_in_received+0x1a>

	if (UDD_EP_TRANSFER_OK != status) {
		return; // Transfer aborted/error
	}	

}
   82f0e:	bd08      	pop	{r3, pc}
		FPGA_releaselock();
   82f10:	4b04      	ldr	r3, [pc, #16]	; (82f24 <main_vendor_bulk_in_received+0x28>)
   82f12:	4798      	blx	r3
   82f14:	e7fb      	b.n	82f0e <main_vendor_bulk_in_received+0x12>
		smc_normaltiming();
   82f16:	4b04      	ldr	r3, [pc, #16]	; (82f28 <main_vendor_bulk_in_received+0x2c>)
   82f18:	4798      	blx	r3
		FPGA_releaselock();
   82f1a:	4b02      	ldr	r3, [pc, #8]	; (82f24 <main_vendor_bulk_in_received+0x28>)
   82f1c:	4798      	blx	r3
	if (UDD_EP_TRANSFER_OK != status) {
   82f1e:	e7f6      	b.n	82f0e <main_vendor_bulk_in_received+0x12>
   82f20:	00081d79 	.word	0x00081d79
   82f24:	00081d6d 	.word	0x00081d6d
   82f28:	00081dad 	.word	0x00081dad

00082f2c <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
		iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82f2c:	b570      	push	{r4, r5, r6, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
   82f2e:	b9b8      	cbnz	r0, 82f60 <main_vendor_bulk_out_received+0x34>
		main_vendor_bulk_out_received);
		
		return;
	}
	
	if (blockendpoint_usage == bep_emem){
   82f30:	4b17      	ldr	r3, [pc, #92]	; (82f90 <main_vendor_bulk_out_received+0x64>)
   82f32:	781b      	ldrb	r3, [r3, #0]
   82f34:	b9f3      	cbnz	r3, 82f74 <main_vendor_bulk_out_received+0x48>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f36:	b141      	cbz	r1, 82f4a <main_vendor_bulk_out_received+0x1e>
   82f38:	4a16      	ldr	r2, [pc, #88]	; (82f94 <main_vendor_bulk_out_received+0x68>)
			xram[i] = main_buf_loopback[i];
   82f3a:	4d17      	ldr	r5, [pc, #92]	; (82f98 <main_vendor_bulk_out_received+0x6c>)
   82f3c:	6828      	ldr	r0, [r5, #0]
   82f3e:	f812 4b01 	ldrb.w	r4, [r2], #1
   82f42:	54c4      	strb	r4, [r0, r3]
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f44:	3301      	adds	r3, #1
   82f46:	4299      	cmp	r1, r3
   82f48:	d1f8      	bne.n	82f3c <main_vendor_bulk_out_received+0x10>
		}
		
		if (FPGA_lockstatus() == fpga_blockout){
   82f4a:	4b14      	ldr	r3, [pc, #80]	; (82f9c <main_vendor_bulk_out_received+0x70>)
   82f4c:	4798      	blx	r3
   82f4e:	2804      	cmp	r0, #4
   82f50:	d00d      	beq.n	82f6e <main_vendor_bulk_out_received+0x42>
#endif
	}
	
	//printf("BULKOUT: %d bytes\n", (int)nb_transfered);
	
	udi_vendor_bulk_out_run(
   82f52:	4a13      	ldr	r2, [pc, #76]	; (82fa0 <main_vendor_bulk_out_received+0x74>)
   82f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f58:	480e      	ldr	r0, [pc, #56]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f5a:	4b12      	ldr	r3, [pc, #72]	; (82fa4 <main_vendor_bulk_out_received+0x78>)
   82f5c:	4798      	blx	r3
	main_buf_loopback,
	sizeof(main_buf_loopback),
	main_vendor_bulk_out_received);
}
   82f5e:	bd70      	pop	{r4, r5, r6, pc}
		udi_vendor_bulk_out_run(
   82f60:	4a0f      	ldr	r2, [pc, #60]	; (82fa0 <main_vendor_bulk_out_received+0x74>)
   82f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82f66:	480b      	ldr	r0, [pc, #44]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f68:	4b0e      	ldr	r3, [pc, #56]	; (82fa4 <main_vendor_bulk_out_received+0x78>)
   82f6a:	4798      	blx	r3
		return;
   82f6c:	e7f7      	b.n	82f5e <main_vendor_bulk_out_received+0x32>
			FPGA_releaselock();
   82f6e:	4b0e      	ldr	r3, [pc, #56]	; (82fa8 <main_vendor_bulk_out_received+0x7c>)
   82f70:	4798      	blx	r3
   82f72:	e7ee      	b.n	82f52 <main_vendor_bulk_out_received+0x26>
	} else if (blockendpoint_usage == bep_fpgabitstream){
   82f74:	2b0a      	cmp	r3, #10
   82f76:	d1ec      	bne.n	82f52 <main_vendor_bulk_out_received+0x26>
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f78:	2900      	cmp	r1, #0
   82f7a:	d0ea      	beq.n	82f52 <main_vendor_bulk_out_received+0x26>
   82f7c:	4d05      	ldr	r5, [pc, #20]	; (82f94 <main_vendor_bulk_out_received+0x68>)
   82f7e:	194c      	adds	r4, r1, r5
			fpga_program_sendbyte(main_buf_loopback[i]);
   82f80:	4e0a      	ldr	r6, [pc, #40]	; (82fac <main_vendor_bulk_out_received+0x80>)
   82f82:	f815 0b01 	ldrb.w	r0, [r5], #1
   82f86:	47b0      	blx	r6
		for(unsigned int i = 0; i < nb_transfered; i++){
   82f88:	42a5      	cmp	r5, r4
   82f8a:	d1fa      	bne.n	82f82 <main_vendor_bulk_out_received+0x56>
   82f8c:	e7e1      	b.n	82f52 <main_vendor_bulk_out_received+0x26>
   82f8e:	bf00      	nop
   82f90:	20001a4d 	.word	0x20001a4d
   82f94:	20001a9c 	.word	0x20001a9c
   82f98:	200002f4 	.word	0x200002f4
   82f9c:	00081d79 	.word	0x00081d79
   82fa0:	00082f2d 	.word	0x00082f2d
   82fa4:	000846ed 	.word	0x000846ed
   82fa8:	00081d6d 	.word	0x00081d6d
   82fac:	0008721d 	.word	0x0008721d

00082fb0 <ctrl_sam3ucfg_cb>:
{
   82fb0:	b510      	push	{r4, lr}
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   82fb2:	4b22      	ldr	r3, [pc, #136]	; (8303c <ctrl_sam3ucfg_cb+0x8c>)
   82fb4:	789b      	ldrb	r3, [r3, #2]
   82fb6:	3b01      	subs	r3, #1
   82fb8:	2b0f      	cmp	r3, #15
   82fba:	d813      	bhi.n	82fe4 <ctrl_sam3ucfg_cb+0x34>
   82fbc:	e8df f003 	tbb	[pc, r3]
   82fc0:	12171308 	.word	0x12171308
   82fc4:	12121212 	.word	0x12121212
   82fc8:	12121212 	.word	0x12121212
   82fcc:	2e121212 	.word	0x2e121212
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82fd0:	203e      	movs	r0, #62	; 0x3e
   82fd2:	4b1b      	ldr	r3, [pc, #108]	; (83040 <ctrl_sam3ucfg_cb+0x90>)
   82fd4:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   82fd6:	4c1b      	ldr	r4, [pc, #108]	; (83044 <ctrl_sam3ucfg_cb+0x94>)
   82fd8:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82fda:	2800      	cmp	r0, #0
   82fdc:	d0fc      	beq.n	82fd8 <ctrl_sam3ucfg_cb+0x28>
			pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   82fde:	2010      	movs	r0, #16
   82fe0:	4b19      	ldr	r3, [pc, #100]	; (83048 <ctrl_sam3ucfg_cb+0x98>)
   82fe2:	4798      	blx	r3
}
   82fe4:	bd10      	pop	{r4, pc}
			pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82fe6:	2010      	movs	r0, #16
   82fe8:	4b18      	ldr	r3, [pc, #96]	; (8304c <ctrl_sam3ucfg_cb+0x9c>)
   82fea:	4798      	blx	r3
			break;
   82fec:	e7fa      	b.n	82fe4 <ctrl_sam3ucfg_cb+0x34>
			board_power(0);
   82fee:	201d      	movs	r0, #29
   82ff0:	4b17      	ldr	r3, [pc, #92]	; (83050 <ctrl_sam3ucfg_cb+0xa0>)
   82ff2:	4798      	blx	r3
			efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);	
   82ff4:	2201      	movs	r2, #1
   82ff6:	210c      	movs	r1, #12
   82ff8:	4816      	ldr	r0, [pc, #88]	; (83054 <ctrl_sam3ucfg_cb+0xa4>)
   82ffa:	4b17      	ldr	r3, [pc, #92]	; (83058 <ctrl_sam3ucfg_cb+0xa8>)
   82ffc:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82ffe:	4b17      	ldr	r3, [pc, #92]	; (8305c <ctrl_sam3ucfg_cb+0xac>)
   83000:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);			
   83002:	4b17      	ldr	r3, [pc, #92]	; (83060 <ctrl_sam3ucfg_cb+0xb0>)
   83004:	685a      	ldr	r2, [r3, #4]
   83006:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   8300a:	d1fb      	bne.n	83004 <ctrl_sam3ucfg_cb+0x54>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;				
   8300c:	4a14      	ldr	r2, [pc, #80]	; (83060 <ctrl_sam3ucfg_cb+0xb0>)
   8300e:	6813      	ldr	r3, [r2, #0]
   83010:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83014:	f043 0305 	orr.w	r3, r3, #5
   83018:	6013      	str	r3, [r2, #0]
			while(1);
   8301a:	e7fe      	b.n	8301a <ctrl_sam3ucfg_cb+0x6a>
   8301c:	4b0f      	ldr	r3, [pc, #60]	; (8305c <ctrl_sam3ucfg_cb+0xac>)
   8301e:	4798      	blx	r3
			while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   83020:	4b0f      	ldr	r3, [pc, #60]	; (83060 <ctrl_sam3ucfg_cb+0xb0>)
   83022:	685a      	ldr	r2, [r3, #4]
   83024:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   83028:	d1fb      	bne.n	83022 <ctrl_sam3ucfg_cb+0x72>
			RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8302a:	4a0d      	ldr	r2, [pc, #52]	; (83060 <ctrl_sam3ucfg_cb+0xb0>)
   8302c:	6813      	ldr	r3, [r2, #0]
   8302e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83032:	f043 0305 	orr.w	r3, r3, #5
   83036:	6013      	str	r3, [r2, #0]
			while(1);
   83038:	e7fe      	b.n	83038 <ctrl_sam3ucfg_cb+0x88>
   8303a:	bf00      	nop
   8303c:	20002df4 	.word	0x20002df4
   83040:	000854c1 	.word	0x000854c1
   83044:	000854e9 	.word	0x000854e9
   83048:	000853f9 	.word	0x000853f9
   8304c:	0008545d 	.word	0x0008545d
   83050:	000851f9 	.word	0x000851f9
   83054:	400e0800 	.word	0x400e0800
   83058:	00081df9 	.word	0x00081df9
   8305c:	00086305 	.word	0x00086305
   83060:	400e1200 	.word	0x400e1200

00083064 <main_suspend_action>:
{
   83064:	b508      	push	{r3, lr}
	active = false;
   83066:	4b03      	ldr	r3, [pc, #12]	; (83074 <main_suspend_action+0x10>)
   83068:	2200      	movs	r2, #0
   8306a:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   8306c:	4b02      	ldr	r3, [pc, #8]	; (83078 <main_suspend_action+0x14>)
   8306e:	4798      	blx	r3
}
   83070:	bd08      	pop	{r3, pc}
   83072:	bf00      	nop
   83074:	20001a4c 	.word	0x20001a4c
   83078:	00084529 	.word	0x00084529

0008307c <main_resume_action>:
{
   8307c:	b508      	push	{r3, lr}
	ui_wakeup();
   8307e:	4b01      	ldr	r3, [pc, #4]	; (83084 <main_resume_action+0x8>)
   83080:	4798      	blx	r3
}
   83082:	bd08      	pop	{r3, pc}
   83084:	00084545 	.word	0x00084545

00083088 <main_sof_action>:
{
   83088:	b508      	push	{r3, lr}
	if (!main_b_vendor_enable)
   8308a:	4b04      	ldr	r3, [pc, #16]	; (8309c <main_sof_action+0x14>)
   8308c:	781b      	ldrb	r3, [r3, #0]
   8308e:	b903      	cbnz	r3, 83092 <main_sof_action+0xa>
}
   83090:	bd08      	pop	{r3, pc}
	ui_process(udd_get_frame_number());
   83092:	4b03      	ldr	r3, [pc, #12]	; (830a0 <main_sof_action+0x18>)
   83094:	4798      	blx	r3
   83096:	4b03      	ldr	r3, [pc, #12]	; (830a4 <main_sof_action+0x1c>)
   83098:	4798      	blx	r3
   8309a:	e7f9      	b.n	83090 <main_sof_action+0x8>
   8309c:	200005aa 	.word	0x200005aa
   830a0:	00086385 	.word	0x00086385
   830a4:	0008455d 	.word	0x0008455d

000830a8 <main_vendor_enable>:
{
   830a8:	b510      	push	{r4, lr}
	main_b_vendor_enable = true;
   830aa:	2401      	movs	r4, #1
   830ac:	4b05      	ldr	r3, [pc, #20]	; (830c4 <main_vendor_enable+0x1c>)
   830ae:	701c      	strb	r4, [r3, #0]
	active = true;
   830b0:	4b05      	ldr	r3, [pc, #20]	; (830c8 <main_vendor_enable+0x20>)
   830b2:	701c      	strb	r4, [r3, #0]
	udi_vendor_bulk_out_run(
   830b4:	4a05      	ldr	r2, [pc, #20]	; (830cc <main_vendor_enable+0x24>)
   830b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   830ba:	4805      	ldr	r0, [pc, #20]	; (830d0 <main_vendor_enable+0x28>)
   830bc:	4b05      	ldr	r3, [pc, #20]	; (830d4 <main_vendor_enable+0x2c>)
   830be:	4798      	blx	r3
}
   830c0:	4620      	mov	r0, r4
   830c2:	bd10      	pop	{r4, pc}
   830c4:	200005aa 	.word	0x200005aa
   830c8:	20001a4c 	.word	0x20001a4c
   830cc:	00082f2d 	.word	0x00082f2d
   830d0:	20001a9c 	.word	0x20001a9c
   830d4:	000846ed 	.word	0x000846ed

000830d8 <main_vendor_disable>:
	main_b_vendor_enable = false;
   830d8:	4b01      	ldr	r3, [pc, #4]	; (830e0 <main_vendor_disable+0x8>)
   830da:	2200      	movs	r2, #0
   830dc:	701a      	strb	r2, [r3, #0]
}
   830de:	4770      	bx	lr
   830e0:	200005aa 	.word	0x200005aa

000830e4 <main_setup_out_received>:
{
   830e4:	b508      	push	{r3, lr}
	udd_g_ctrlreq.payload = ctrlbuffer;
   830e6:	4b43      	ldr	r3, [pc, #268]	; (831f4 <main_setup_out_received+0x110>)
   830e8:	4a43      	ldr	r2, [pc, #268]	; (831f8 <main_setup_out_received+0x114>)
   830ea:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   830ec:	88da      	ldrh	r2, [r3, #6]
   830ee:	2a40      	cmp	r2, #64	; 0x40
   830f0:	bf28      	it	cs
   830f2:	2240      	movcs	r2, #64	; 0x40
   830f4:	819a      	strh	r2, [r3, #12]
	blockendpoint_usage = bep_emem;
   830f6:	4a41      	ldr	r2, [pc, #260]	; (831fc <main_setup_out_received+0x118>)
   830f8:	2100      	movs	r1, #0
   830fa:	7011      	strb	r1, [r2, #0]
	switch(udd_g_ctrlreq.req.bRequest){
   830fc:	785b      	ldrb	r3, [r3, #1]
   830fe:	3b10      	subs	r3, #16
   83100:	2b21      	cmp	r3, #33	; 0x21
   83102:	d875      	bhi.n	831f0 <main_setup_out_received+0x10c>
   83104:	e8df f003 	tbb	[pc, r3]
   83108:	321c2711 	.word	0x321c2711
   8310c:	745b7474 	.word	0x745b7474
   83110:	3d427474 	.word	0x3d427474
   83114:	5651474c 	.word	0x5651474c
   83118:	746a6560 	.word	0x746a6560
   8311c:	74747474 	.word	0x74747474
   83120:	74747474 	.word	0x74747474
   83124:	74747474 	.word	0x74747474
   83128:	6f74      	.short	0x6f74
			if (FPGA_setlock(fpga_usblocked)){
   8312a:	2006      	movs	r0, #6
   8312c:	4b34      	ldr	r3, [pc, #208]	; (83200 <main_setup_out_received+0x11c>)
   8312e:	4798      	blx	r3
   83130:	b908      	cbnz	r0, 83136 <main_setup_out_received+0x52>
	return false;		
   83132:	2000      	movs	r0, #0
   83134:	e05d      	b.n	831f2 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   83136:	4b2f      	ldr	r3, [pc, #188]	; (831f4 <main_setup_out_received+0x110>)
   83138:	4a32      	ldr	r2, [pc, #200]	; (83204 <main_setup_out_received+0x120>)
   8313a:	611a      	str	r2, [r3, #16]
				return true;
   8313c:	2001      	movs	r0, #1
   8313e:	e058      	b.n	831f2 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   83140:	2006      	movs	r0, #6
   83142:	4b2f      	ldr	r3, [pc, #188]	; (83200 <main_setup_out_received+0x11c>)
   83144:	4798      	blx	r3
   83146:	b908      	cbnz	r0, 8314c <main_setup_out_received+0x68>
	return false;		
   83148:	2000      	movs	r0, #0
   8314a:	e052      	b.n	831f2 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   8314c:	4b29      	ldr	r3, [pc, #164]	; (831f4 <main_setup_out_received+0x110>)
   8314e:	4a2e      	ldr	r2, [pc, #184]	; (83208 <main_setup_out_received+0x124>)
   83150:	611a      	str	r2, [r3, #16]
				return true;	
   83152:	2001      	movs	r0, #1
   83154:	e04d      	b.n	831f2 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   83156:	2006      	movs	r0, #6
   83158:	4b29      	ldr	r3, [pc, #164]	; (83200 <main_setup_out_received+0x11c>)
   8315a:	4798      	blx	r3
   8315c:	b908      	cbnz	r0, 83162 <main_setup_out_received+0x7e>
	return false;		
   8315e:	2000      	movs	r0, #0
   83160:	e047      	b.n	831f2 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   83162:	4b24      	ldr	r3, [pc, #144]	; (831f4 <main_setup_out_received+0x110>)
   83164:	4a29      	ldr	r2, [pc, #164]	; (8320c <main_setup_out_received+0x128>)
   83166:	611a      	str	r2, [r3, #16]
				return true;
   83168:	2001      	movs	r0, #1
   8316a:	e042      	b.n	831f2 <main_setup_out_received+0x10e>
			if (FPGA_setlock(fpga_usblocked)){
   8316c:	2006      	movs	r0, #6
   8316e:	4b24      	ldr	r3, [pc, #144]	; (83200 <main_setup_out_received+0x11c>)
   83170:	4798      	blx	r3
   83172:	b908      	cbnz	r0, 83178 <main_setup_out_received+0x94>
	return false;		
   83174:	2000      	movs	r0, #0
   83176:	e03c      	b.n	831f2 <main_setup_out_received+0x10e>
				udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   83178:	4b1e      	ldr	r3, [pc, #120]	; (831f4 <main_setup_out_received+0x110>)
   8317a:	4a25      	ldr	r2, [pc, #148]	; (83210 <main_setup_out_received+0x12c>)
   8317c:	611a      	str	r2, [r3, #16]
				return true;
   8317e:	2001      	movs	r0, #1
   83180:	e037      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart_cb;
   83182:	4b1c      	ldr	r3, [pc, #112]	; (831f4 <main_setup_out_received+0x110>)
   83184:	4a23      	ldr	r2, [pc, #140]	; (83214 <main_setup_out_received+0x130>)
   83186:	611a      	str	r2, [r3, #16]
			return true;
   83188:	2001      	movs	r0, #1
   8318a:	e032      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8318c:	4b19      	ldr	r3, [pc, #100]	; (831f4 <main_setup_out_received+0x110>)
   8318e:	4a22      	ldr	r2, [pc, #136]	; (83218 <main_setup_out_received+0x134>)
   83190:	611a      	str	r2, [r3, #16]
			return true;
   83192:	2001      	movs	r0, #1
   83194:	e02d      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scardconfig_cb;
   83196:	4b17      	ldr	r3, [pc, #92]	; (831f4 <main_setup_out_received+0x110>)
   83198:	4a20      	ldr	r2, [pc, #128]	; (8321c <main_setup_out_received+0x138>)
   8319a:	611a      	str	r2, [r3, #16]
			return true;
   8319c:	2001      	movs	r0, #1
   8319e:	e028      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scarddata_cb;
   831a0:	4b14      	ldr	r3, [pc, #80]	; (831f4 <main_setup_out_received+0x110>)
   831a2:	4a1f      	ldr	r2, [pc, #124]	; (83220 <main_setup_out_received+0x13c>)
   831a4:	611a      	str	r2, [r3, #16]
			return true;
   831a6:	2001      	movs	r0, #1
   831a8:	e023      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_scardaux_cb;
   831aa:	4b12      	ldr	r3, [pc, #72]	; (831f4 <main_setup_out_received+0x110>)
   831ac:	4a1d      	ldr	r2, [pc, #116]	; (83224 <main_setup_out_received+0x140>)
   831ae:	611a      	str	r2, [r3, #16]
			return true;
   831b0:	2001      	movs	r0, #1
   831b2:	e01e      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_usart2_enabledump;
   831b4:	4b0f      	ldr	r3, [pc, #60]	; (831f4 <main_setup_out_received+0x110>)
   831b6:	4a1c      	ldr	r2, [pc, #112]	; (83228 <main_setup_out_received+0x144>)
   831b8:	611a      	str	r2, [r3, #16]
			return true;
   831ba:	2001      	movs	r0, #1
   831bc:	e019      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   831be:	4b0d      	ldr	r3, [pc, #52]	; (831f4 <main_setup_out_received+0x110>)
   831c0:	4a1a      	ldr	r2, [pc, #104]	; (8322c <main_setup_out_received+0x148>)
   831c2:	611a      	str	r2, [r3, #16]
			return true;
   831c4:	2001      	movs	r0, #1
   831c6:	e014      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   831c8:	4b0a      	ldr	r3, [pc, #40]	; (831f4 <main_setup_out_received+0x110>)
   831ca:	4a19      	ldr	r2, [pc, #100]	; (83230 <main_setup_out_received+0x14c>)
   831cc:	611a      	str	r2, [r3, #16]
			return true;
   831ce:	2001      	movs	r0, #1
   831d0:	e00f      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_avr_program_void;
   831d2:	4b08      	ldr	r3, [pc, #32]	; (831f4 <main_setup_out_received+0x110>)
   831d4:	4a17      	ldr	r2, [pc, #92]	; (83234 <main_setup_out_received+0x150>)
   831d6:	611a      	str	r2, [r3, #16]
			return true;
   831d8:	2001      	movs	r0, #1
   831da:	e00a      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   831dc:	4b05      	ldr	r3, [pc, #20]	; (831f4 <main_setup_out_received+0x110>)
   831de:	4a16      	ldr	r2, [pc, #88]	; (83238 <main_setup_out_received+0x154>)
   831e0:	611a      	str	r2, [r3, #16]
			return true;
   831e2:	2001      	movs	r0, #1
   831e4:	e005      	b.n	831f2 <main_setup_out_received+0x10e>
			udd_g_ctrlreq.callback = ctrl_cdc_settings_cb;
   831e6:	4b03      	ldr	r3, [pc, #12]	; (831f4 <main_setup_out_received+0x110>)
   831e8:	4a14      	ldr	r2, [pc, #80]	; (8323c <main_setup_out_received+0x158>)
   831ea:	611a      	str	r2, [r3, #16]
			return true;
   831ec:	2001      	movs	r0, #1
   831ee:	e000      	b.n	831f2 <main_setup_out_received+0x10e>
	switch(udd_g_ctrlreq.req.bRequest){
   831f0:	2000      	movs	r0, #0
}
   831f2:	bd08      	pop	{r3, pc}
   831f4:	20002df4 	.word	0x20002df4
   831f8:	20001a50 	.word	0x20001a50
   831fc:	20001a4d 	.word	0x20001a4d
   83200:	00081d41 	.word	0x00081d41
   83204:	00082d6d 	.word	0x00082d6d
   83208:	00082ca5 	.word	0x00082ca5
   8320c:	00082d3d 	.word	0x00082d3d
   83210:	00082ce9 	.word	0x00082ce9
   83214:	00082ea9 	.word	0x00082ea9
   83218:	00082e71 	.word	0x00082e71
   8321c:	00081cc1 	.word	0x00081cc1
   83220:	00081a79 	.word	0x00081a79
   83224:	00081acd 	.word	0x00081acd
   83228:	00082dc9 	.word	0x00082dc9
   8322c:	00082ebd 	.word	0x00082ebd
   83230:	00082db1 	.word	0x00082db1
   83234:	00082dbd 	.word	0x00082dbd
   83238:	00082fb1 	.word	0x00082fb1
   8323c:	00082c79 	.word	0x00082c79

00083240 <main_setup_in_received>:
	if (udd_g_ctrlreq.req.wLength > sizeof(respbuf)){
   83240:	4b40      	ldr	r3, [pc, #256]	; (83344 <main_setup_in_received+0x104>)
   83242:	88da      	ldrh	r2, [r3, #6]
   83244:	2ac8      	cmp	r2, #200	; 0xc8
   83246:	d878      	bhi.n	8333a <main_setup_in_received+0xfa>
{
   83248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.bRequest){
   8324c:	785b      	ldrb	r3, [r3, #1]
   8324e:	3b12      	subs	r3, #18
   83250:	2b1f      	cmp	r3, #31
   83252:	d874      	bhi.n	8333e <main_setup_in_received+0xfe>
   83254:	e8df f003 	tbb	[pc, r3]
   83258:	33737326 	.word	0x33737326
   8325c:	73735073 	.word	0x73735073
   83260:	5c5f4b10 	.word	0x5c5f4b10
   83264:	48457362 	.word	0x48457362
   83268:	73737373 	.word	0x73737373
   8326c:	73737373 	.word	0x73737373
   83270:	73737373 	.word	0x73737373
   83274:	65737373 	.word	0x65737373
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83278:	2400      	movs	r4, #0
   8327a:	b16a      	cbz	r2, 83298 <main_setup_in_received+0x58>
   8327c:	4d32      	ldr	r5, [pc, #200]	; (83348 <main_setup_in_received+0x108>)
   8327e:	2400      	movs	r4, #0
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83280:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 83368 <main_setup_in_received+0x128>
   83284:	4f31      	ldr	r7, [pc, #196]	; (8334c <main_setup_in_received+0x10c>)
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83286:	4e2f      	ldr	r6, [pc, #188]	; (83344 <main_setup_in_received+0x104>)
				respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   83288:	4640      	mov	r0, r8
   8328a:	47b8      	blx	r7
   8328c:	f805 0b01 	strb.w	r0, [r5], #1
			for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   83290:	3401      	adds	r4, #1
   83292:	88f3      	ldrh	r3, [r6, #6]
   83294:	42a3      	cmp	r3, r4
   83296:	d8f7      	bhi.n	83288 <main_setup_in_received+0x48>
			udd_g_ctrlreq.payload = respbuf;
   83298:	4b2a      	ldr	r3, [pc, #168]	; (83344 <main_setup_in_received+0x104>)
   8329a:	4a2b      	ldr	r2, [pc, #172]	; (83348 <main_setup_in_received+0x108>)
   8329c:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = cnt;
   8329e:	819c      	strh	r4, [r3, #12]
			return true;
   832a0:	2001      	movs	r0, #1
   832a2:	e04d      	b.n	83340 <main_setup_in_received+0x100>
			udd_g_ctrlreq.payload = ctrlmemread_buf;
   832a4:	4a27      	ldr	r2, [pc, #156]	; (83344 <main_setup_in_received+0x104>)
   832a6:	4b2a      	ldr	r3, [pc, #168]	; (83350 <main_setup_in_received+0x110>)
   832a8:	681b      	ldr	r3, [r3, #0]
   832aa:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = ctrlmemread_size;
   832ac:	4b29      	ldr	r3, [pc, #164]	; (83354 <main_setup_in_received+0x114>)
   832ae:	6819      	ldr	r1, [r3, #0]
   832b0:	8191      	strh	r1, [r2, #12]
			ctrlmemread_size = 0;
   832b2:	2200      	movs	r2, #0
   832b4:	601a      	str	r2, [r3, #0]
			FPGA_releaselock();
   832b6:	4b28      	ldr	r3, [pc, #160]	; (83358 <main_setup_in_received+0x118>)
   832b8:	4798      	blx	r3
			return true;
   832ba:	2001      	movs	r0, #1
   832bc:	e040      	b.n	83340 <main_setup_in_received+0x100>
			respbuf[0] = FPGA_ISDONE();
   832be:	200a      	movs	r0, #10
   832c0:	4b26      	ldr	r3, [pc, #152]	; (8335c <main_setup_in_received+0x11c>)
   832c2:	4798      	blx	r3
   832c4:	4b20      	ldr	r3, [pc, #128]	; (83348 <main_setup_in_received+0x108>)
   832c6:	3800      	subs	r0, #0
   832c8:	bf18      	it	ne
   832ca:	2001      	movne	r0, #1
   832cc:	7018      	strb	r0, [r3, #0]
			respbuf[1] = 0;
   832ce:	2200      	movs	r2, #0
   832d0:	705a      	strb	r2, [r3, #1]
			respbuf[2] = 0;
   832d2:	709a      	strb	r2, [r3, #2]
			respbuf[3] = 0;
   832d4:	70da      	strb	r2, [r3, #3]
			udd_g_ctrlreq.payload = respbuf;
   832d6:	4a1b      	ldr	r2, [pc, #108]	; (83344 <main_setup_in_received+0x104>)
   832d8:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 4;
   832da:	2304      	movs	r3, #4
   832dc:	8193      	strh	r3, [r2, #12]
			return true;
   832de:	2001      	movs	r0, #1
   832e0:	e02e      	b.n	83340 <main_setup_in_received+0x100>
			return XPROGProtocol_Command();
   832e2:	4b1f      	ldr	r3, [pc, #124]	; (83360 <main_setup_in_received+0x120>)
   832e4:	4798      	blx	r3
   832e6:	e02b      	b.n	83340 <main_setup_in_received+0x100>
			return V2Protocol_ProcessCommand();
   832e8:	4b1e      	ldr	r3, [pc, #120]	; (83364 <main_setup_in_received+0x124>)
   832ea:	4798      	blx	r3
   832ec:	e028      	b.n	83340 <main_setup_in_received+0x100>
			return ctrl_usart(USART_TARGET, true);
   832ee:	2101      	movs	r1, #1
   832f0:	481d      	ldr	r0, [pc, #116]	; (83368 <main_setup_in_received+0x128>)
   832f2:	4b1e      	ldr	r3, [pc, #120]	; (8336c <main_setup_in_received+0x12c>)
   832f4:	4798      	blx	r3
   832f6:	e023      	b.n	83340 <main_setup_in_received+0x100>
			respbuf[0] = FW_VER_MAJOR;
   832f8:	4b13      	ldr	r3, [pc, #76]	; (83348 <main_setup_in_received+0x108>)
   832fa:	2200      	movs	r2, #0
   832fc:	701a      	strb	r2, [r3, #0]
			respbuf[1] = FW_VER_MINOR;
   832fe:	211e      	movs	r1, #30
   83300:	7059      	strb	r1, [r3, #1]
			respbuf[2] = FW_VER_DEBUG;
   83302:	709a      	strb	r2, [r3, #2]
			udd_g_ctrlreq.payload = respbuf;
   83304:	4a0f      	ldr	r2, [pc, #60]	; (83344 <main_setup_in_received+0x104>)
   83306:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = 3;
   83308:	2303      	movs	r3, #3
   8330a:	8193      	strh	r3, [r2, #12]
			return true;
   8330c:	2001      	movs	r0, #1
   8330e:	e017      	b.n	83340 <main_setup_in_received+0x100>
			return ctrl_scardconfig_req();
   83310:	4b17      	ldr	r3, [pc, #92]	; (83370 <main_setup_in_received+0x130>)
   83312:	4798      	blx	r3
   83314:	e014      	b.n	83340 <main_setup_in_received+0x100>
			return ctrl_scarddata_req();
   83316:	4b17      	ldr	r3, [pc, #92]	; (83374 <main_setup_in_received+0x134>)
   83318:	4798      	blx	r3
   8331a:	e011      	b.n	83340 <main_setup_in_received+0x100>
			return ctrl_scardaux_req();
   8331c:	4b16      	ldr	r3, [pc, #88]	; (83378 <main_setup_in_received+0x138>)
   8331e:	4798      	blx	r3
   83320:	e00e      	b.n	83340 <main_setup_in_received+0x100>
            respbuf[0] = cdc_settings_change[0];
   83322:	4a16      	ldr	r2, [pc, #88]	; (8337c <main_setup_in_received+0x13c>)
   83324:	7811      	ldrb	r1, [r2, #0]
   83326:	4b08      	ldr	r3, [pc, #32]	; (83348 <main_setup_in_received+0x108>)
   83328:	7019      	strb	r1, [r3, #0]
            respbuf[1] = cdc_settings_change[1];
   8332a:	7852      	ldrb	r2, [r2, #1]
   8332c:	705a      	strb	r2, [r3, #1]
            udd_g_ctrlreq.payload = respbuf;
   8332e:	4a05      	ldr	r2, [pc, #20]	; (83344 <main_setup_in_received+0x104>)
   83330:	6093      	str	r3, [r2, #8]
            udd_g_ctrlreq.payload_size = 2;
   83332:	2302      	movs	r3, #2
   83334:	8193      	strh	r3, [r2, #12]
            return true;
   83336:	2001      	movs	r0, #1
   83338:	e002      	b.n	83340 <main_setup_in_received+0x100>
		return false;
   8333a:	2000      	movs	r0, #0
}
   8333c:	4770      	bx	lr
	switch(udd_g_ctrlreq.req.bRequest){
   8333e:	2000      	movs	r0, #0
}
   83340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83344:	20002df4 	.word	0x20002df4
   83348:	20001e9c 	.word	0x20001e9c
   8334c:	00083a11 	.word	0x00083a11
   83350:	20001a90 	.word	0x20001a90
   83354:	20001a94 	.word	0x20001a94
   83358:	00081d6d 	.word	0x00081d6d
   8335c:	000851c3 	.word	0x000851c3
   83360:	00083f2d 	.word	0x00083f2d
   83364:	000829c9 	.word	0x000829c9
   83368:	40090000 	.word	0x40090000
   8336c:	00083621 	.word	0x00083621
   83370:	00081a09 	.word	0x00081a09
   83374:	000819c9 	.word	0x000819c9
   83378:	00081a59 	.word	0x00081a59
   8337c:	200005a8 	.word	0x200005a8

00083380 <cdc_enable>:
/////////////////////////////////////////////////////////
#include "usb_protocol_cdc.h"
volatile bool enable_cdc_transfer[2] = {false, false};
	extern volatile bool usart_x_enabled[4];
bool cdc_enable(uint8_t port)
{
   83380:	4603      	mov	r3, r0
	enable_cdc_transfer[port] = true;
   83382:	2001      	movs	r0, #1
   83384:	4a01      	ldr	r2, [pc, #4]	; (8338c <cdc_enable+0xc>)
   83386:	54d0      	strb	r0, [r2, r3]
	return true;
}
   83388:	4770      	bx	lr
   8338a:	bf00      	nop
   8338c:	20001a98 	.word	0x20001a98

00083390 <cdc_disable>:

void cdc_disable(uint8_t port)
{
	enable_cdc_transfer[port] = false;
   83390:	4b01      	ldr	r3, [pc, #4]	; (83398 <cdc_disable+0x8>)
   83392:	2200      	movs	r2, #0
   83394:	541a      	strb	r2, [r3, r0]
}
   83396:	4770      	bx	lr
   83398:	20001a98 	.word	0x20001a98

0008339c <my_callback_rx_notify>:
static uint8_t uart_buf[512] = {0};
void my_callback_rx_notify(uint8_t port)
{
	//iram_size_t udi_cdc_multi_get_nb_received_data
	
    if (port > 0)
   8339c:	b928      	cbnz	r0, 833aa <my_callback_rx_notify+0xe>
        return;
	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
   8339e:	4b19      	ldr	r3, [pc, #100]	; (83404 <my_callback_rx_notify+0x68>)
   833a0:	781b      	ldrb	r3, [r3, #0]
   833a2:	b113      	cbz	r3, 833aa <my_callback_rx_notify+0xe>
   833a4:	4b18      	ldr	r3, [pc, #96]	; (83408 <my_callback_rx_notify+0x6c>)
   833a6:	781b      	ldrb	r3, [r3, #0]
   833a8:	b903      	cbnz	r3, 833ac <my_callback_rx_notify+0x10>
   833aa:	4770      	bx	lr
{
   833ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   833b0:	4b16      	ldr	r3, [pc, #88]	; (8340c <my_callback_rx_notify+0x70>)
   833b2:	4798      	blx	r3
		while (num_char > 0) {
   833b4:	4604      	mov	r4, r0
   833b6:	b318      	cbz	r0, 83400 <my_callback_rx_notify+0x64>
			num_char = (num_char > 512) ? 512 : num_char;
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   833b8:	4f15      	ldr	r7, [pc, #84]	; (83410 <my_callback_rx_notify+0x74>)
   833ba:	2500      	movs	r5, #0
   833bc:	f8df a054 	ldr.w	sl, [pc, #84]	; 83414 <my_callback_rx_notify+0x78>
   833c0:	e004      	b.n	833cc <my_callback_rx_notify+0x30>
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
				//usart_driver_putchar(USART_TARGET, NULL, udi_cdc_multi_getc(port));
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
			}
			num_char = udi_cdc_multi_get_nb_received_data(port);
   833c2:	4628      	mov	r0, r5
   833c4:	4b11      	ldr	r3, [pc, #68]	; (8340c <my_callback_rx_notify+0x70>)
   833c6:	4798      	blx	r3
		while (num_char > 0) {
   833c8:	4604      	mov	r4, r0
   833ca:	b1c8      	cbz	r0, 83400 <my_callback_rx_notify+0x64>
			num_char = (num_char > 512) ? 512 : num_char;
   833cc:	4626      	mov	r6, r4
   833ce:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   833d2:	bf28      	it	cs
   833d4:	f44f 7600 	movcs.w	r6, #512	; 0x200
			udi_cdc_multi_read_buf(port, uart_buf, num_char);
   833d8:	4632      	mov	r2, r6
   833da:	4639      	mov	r1, r7
   833dc:	4628      	mov	r0, r5
   833de:	47d0      	blx	sl
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   833e0:	2c00      	cmp	r4, #0
   833e2:	d0ee      	beq.n	833c2 <my_callback_rx_notify+0x26>
   833e4:	462c      	mov	r4, r5
				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   833e6:	f8df 9030 	ldr.w	r9, [pc, #48]	; 83418 <my_callback_rx_notify+0x7c>
   833ea:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8341c <my_callback_rx_notify+0x80>
   833ee:	5d3a      	ldrb	r2, [r7, r4]
   833f0:	4629      	mov	r1, r5
   833f2:	4648      	mov	r0, r9
   833f4:	47c0      	blx	r8
			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
   833f6:	3401      	adds	r4, #1
   833f8:	b2a4      	uxth	r4, r4
   833fa:	42b4      	cmp	r4, r6
   833fc:	d3f7      	bcc.n	833ee <my_callback_rx_notify+0x52>
   833fe:	e7e0      	b.n	833c2 <my_callback_rx_notify+0x26>
		while (*st) {
			udi_cdc_putc(*st++);
		}
		#endif
	}
}
   83400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83404:	20001a98 	.word	0x20001a98
   83408:	20002178 	.word	0x20002178
   8340c:	000803c5 	.word	0x000803c5
   83410:	20001f64 	.word	0x20001f64
   83414:	000805cd 	.word	0x000805cd
   83418:	40090000 	.word	0x40090000
   8341c:	0008397d 	.word	0x0008397d

00083420 <my_callback_config>:
extern tcirc_buf rx0buf, tx0buf;
extern tcirc_buf usb_usart_circ_buf;

void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    if (port > 0)
   83420:	2800      	cmp	r0, #0
   83422:	d163      	bne.n	834ec <my_callback_config+0xcc>
        return;
	if (enable_cdc_transfer[port] && cdc_settings_change[port]) {
   83424:	4b32      	ldr	r3, [pc, #200]	; (834f0 <my_callback_config+0xd0>)
   83426:	781b      	ldrb	r3, [r3, #0]
   83428:	2b00      	cmp	r3, #0
   8342a:	d05f      	beq.n	834ec <my_callback_config+0xcc>
   8342c:	4b31      	ldr	r3, [pc, #196]	; (834f4 <my_callback_config+0xd4>)
   8342e:	781b      	ldrb	r3, [r3, #0]
   83430:	2b00      	cmp	r3, #0
   83432:	d05b      	beq.n	834ec <my_callback_config+0xcc>
        usart_x_enabled[port] = true;
   83434:	4b30      	ldr	r3, [pc, #192]	; (834f8 <my_callback_config+0xd8>)
   83436:	2201      	movs	r2, #1
   83438:	701a      	strb	r2, [r3, #0]
		sam_usart_opt_t usartopts;
		if (port != 0){
			return;
		}
		if (cfg->bDataBits < 5)
   8343a:	798b      	ldrb	r3, [r1, #6]
   8343c:	2b04      	cmp	r3, #4
   8343e:	d955      	bls.n	834ec <my_callback_config+0xcc>
			return;
		if (cfg->bCharFormat > 2)
   83440:	790a      	ldrb	r2, [r1, #4]
   83442:	2a02      	cmp	r2, #2
   83444:	d852      	bhi.n	834ec <my_callback_config+0xcc>
{
   83446:	b510      	push	{r4, lr}
   83448:	b086      	sub	sp, #24
			return;
	
		usartopts.baudrate = cfg->dwDTERate;
   8344a:	6808      	ldr	r0, [r1, #0]
   8344c:	9000      	str	r0, [sp, #0]
		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8344e:	2000      	movs	r0, #0
   83450:	9004      	str	r0, [sp, #16]
		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   83452:	0312      	lsls	r2, r2, #12
   83454:	9203      	str	r2, [sp, #12]
		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   83456:	3b05      	subs	r3, #5
   83458:	019b      	lsls	r3, r3, #6
   8345a:	9301      	str	r3, [sp, #4]
		switch(cfg->bParityType) {
   8345c:	794b      	ldrb	r3, [r1, #5]
   8345e:	2b04      	cmp	r3, #4
   83460:	d833      	bhi.n	834ca <my_callback_config+0xaa>
   83462:	e8df f003 	tbb	[pc, r3]
   83466:	3403      	.short	0x3403
   83468:	3b38      	.short	0x3b38
   8346a:	3f          	.byte	0x3f
   8346b:	00          	.byte	0x00
			case CDC_PAR_NONE:
			usartopts.parity_type = US_MR_PAR_NO;
   8346c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83470:	9302      	str	r3, [sp, #8]
   83472:	200d      	movs	r0, #13
   83474:	4b21      	ldr	r3, [pc, #132]	; (834fc <my_callback_config+0xdc>)
   83476:	4798      	blx	r3
		}
		if (port == 0)
		{
			//completely restart USART - otherwise breaks tx or stalls
			sysclk_enable_peripheral_clock(ID_USART0);
			init_circ_buf(&usb_usart_circ_buf);
   83478:	4821      	ldr	r0, [pc, #132]	; (83500 <my_callback_config+0xe0>)
   8347a:	4c22      	ldr	r4, [pc, #136]	; (83504 <my_callback_config+0xe4>)
   8347c:	47a0      	blx	r4
			init_circ_buf(&tx0buf);
   8347e:	4822      	ldr	r0, [pc, #136]	; (83508 <my_callback_config+0xe8>)
   83480:	47a0      	blx	r4
			init_circ_buf(&rx0buf);
   83482:	4822      	ldr	r0, [pc, #136]	; (8350c <my_callback_config+0xec>)
   83484:	47a0      	blx	r4
			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   83486:	4c22      	ldr	r4, [pc, #136]	; (83510 <my_callback_config+0xf0>)
   83488:	4a22      	ldr	r2, [pc, #136]	; (83514 <my_callback_config+0xf4>)
   8348a:	4669      	mov	r1, sp
   8348c:	4620      	mov	r0, r4
   8348e:	4b22      	ldr	r3, [pc, #136]	; (83518 <my_callback_config+0xf8>)
   83490:	4798      	blx	r3
			
			usart_enable_rx(USART0);
   83492:	4620      	mov	r0, r4
   83494:	4b21      	ldr	r3, [pc, #132]	; (8351c <my_callback_config+0xfc>)
   83496:	4798      	blx	r3
			usart_enable_tx(USART0);
   83498:	4620      	mov	r0, r4
   8349a:	4b21      	ldr	r3, [pc, #132]	; (83520 <my_callback_config+0x100>)
   8349c:	4798      	blx	r3
			
			usart_enable_interrupt(USART0, UART_IER_RXRDY);
   8349e:	2101      	movs	r1, #1
   834a0:	4620      	mov	r0, r4
   834a2:	4b20      	ldr	r3, [pc, #128]	; (83524 <my_callback_config+0x104>)
   834a4:	4798      	blx	r3
			
			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   834a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   834aa:	2013      	movs	r0, #19
   834ac:	4c1e      	ldr	r4, [pc, #120]	; (83528 <my_callback_config+0x108>)
   834ae:	47a0      	blx	r4
			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   834b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   834b4:	2012      	movs	r0, #18
   834b6:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   834b8:	4b1c      	ldr	r3, [pc, #112]	; (8352c <my_callback_config+0x10c>)
   834ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   834be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   834c2:	2150      	movs	r1, #80	; 0x50
   834c4:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   834c8:	601a      	str	r2, [r3, #0]
			irq_register_handler(USART0_IRQn, 5);
		}
	}
		
   834ca:	b006      	add	sp, #24
   834cc:	bd10      	pop	{r4, pc}
			usartopts.parity_type = US_MR_PAR_ODD;
   834ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   834d2:	9302      	str	r3, [sp, #8]
			break;
   834d4:	e7cd      	b.n	83472 <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_EVEN;
   834d6:	2300      	movs	r3, #0
   834d8:	9302      	str	r3, [sp, #8]
			break;
   834da:	e7ca      	b.n	83472 <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_MARK;
   834dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   834e0:	9302      	str	r3, [sp, #8]
			break;
   834e2:	e7c6      	b.n	83472 <my_callback_config+0x52>
			usartopts.parity_type = US_MR_PAR_SPACE;
   834e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   834e8:	9302      	str	r3, [sp, #8]
			break;
   834ea:	e7c2      	b.n	83472 <my_callback_config+0x52>
   834ec:	4770      	bx	lr
   834ee:	bf00      	nop
   834f0:	20001a98 	.word	0x20001a98
   834f4:	200005a8 	.word	0x200005a8
   834f8:	20002178 	.word	0x20002178
   834fc:	00085559 	.word	0x00085559
   83500:	200029b8 	.word	0x200029b8
   83504:	00081ed9 	.word	0x00081ed9
   83508:	20002d08 	.word	0x20002d08
   8350c:	2000273c 	.word	0x2000273c
   83510:	40090000 	.word	0x40090000
   83514:	05b8d800 	.word	0x05b8d800
   83518:	00086b71 	.word	0x00086b71
   8351c:	00086e75 	.word	0x00086e75
   83520:	00086e65 	.word	0x00086e65
   83524:	00086e81 	.word	0x00086e81
   83528:	00085215 	.word	0x00085215
   8352c:	e000e100 	.word	0xe000e100

00083530 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   83530:	4b01      	ldr	r3, [pc, #4]	; (83538 <set_timeout+0x8>)
   83532:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   83534:	4770      	bx	lr
   83536:	bf00      	nop
   83538:	200005ac 	.word	0x200005ac

0008353c <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   8353c:	b538      	push	{r3, r4, r5, lr}
   8353e:	2016      	movs	r0, #22
   83540:	4b10      	ldr	r3, [pc, #64]	; (83584 <setup_timeoutcnt+0x48>)
   83542:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83544:	4b10      	ldr	r3, [pc, #64]	; (83588 <setup_timeoutcnt+0x4c>)
   83546:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8354a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8354e:	2510      	movs	r5, #16
   83550:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83554:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   83556:	4c0d      	ldr	r4, [pc, #52]	; (8358c <setup_timeoutcnt+0x50>)
   83558:	f24c 0201 	movw	r2, #49153	; 0xc001
   8355c:	2100      	movs	r1, #0
   8355e:	4620      	mov	r0, r4
   83560:	4b0b      	ldr	r3, [pc, #44]	; (83590 <setup_timeoutcnt+0x54>)
   83562:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   83564:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   83568:	2100      	movs	r1, #0
   8356a:	4620      	mov	r0, r4
   8356c:	4b09      	ldr	r3, [pc, #36]	; (83594 <setup_timeoutcnt+0x58>)
   8356e:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   83570:	462a      	mov	r2, r5
   83572:	2100      	movs	r1, #0
   83574:	4620      	mov	r0, r4
   83576:	4b08      	ldr	r3, [pc, #32]	; (83598 <setup_timeoutcnt+0x5c>)
   83578:	4798      	blx	r3
	
	timerEnabled = true;
   8357a:	4b08      	ldr	r3, [pc, #32]	; (8359c <setup_timeoutcnt+0x60>)
   8357c:	2201      	movs	r2, #1
   8357e:	701a      	strb	r2, [r3, #0]
}
   83580:	bd38      	pop	{r3, r4, r5, pc}
   83582:	bf00      	nop
   83584:	00085559 	.word	0x00085559
   83588:	e000e100 	.word	0xe000e100
   8358c:	40080000 	.word	0x40080000
   83590:	00081e49 	.word	0x00081e49
   83594:	00081e71 	.word	0x00081e71
   83598:	00081e79 	.word	0x00081e79
   8359c:	20002164 	.word	0x20002164

000835a0 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   835a0:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   835a2:	4b0a      	ldr	r3, [pc, #40]	; (835cc <start_timeoutcnt+0x2c>)
   835a4:	781b      	ldrb	r3, [r3, #0]
   835a6:	b16b      	cbz	r3, 835c4 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   835a8:	4c09      	ldr	r4, [pc, #36]	; (835d0 <start_timeoutcnt+0x30>)
   835aa:	2100      	movs	r1, #0
   835ac:	4620      	mov	r0, r4
   835ae:	4b09      	ldr	r3, [pc, #36]	; (835d4 <start_timeoutcnt+0x34>)
   835b0:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   835b2:	4b09      	ldr	r3, [pc, #36]	; (835d8 <start_timeoutcnt+0x38>)
   835b4:	681a      	ldr	r2, [r3, #0]
   835b6:	4b09      	ldr	r3, [pc, #36]	; (835dc <start_timeoutcnt+0x3c>)
   835b8:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   835ba:	2100      	movs	r1, #0
   835bc:	4620      	mov	r0, r4
   835be:	4b08      	ldr	r3, [pc, #32]	; (835e0 <start_timeoutcnt+0x40>)
   835c0:	4798      	blx	r3
}
   835c2:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   835c4:	4b07      	ldr	r3, [pc, #28]	; (835e4 <start_timeoutcnt+0x44>)
   835c6:	4798      	blx	r3
   835c8:	e7ee      	b.n	835a8 <start_timeoutcnt+0x8>
   835ca:	bf00      	nop
   835cc:	20002164 	.word	0x20002164
   835d0:	40080000 	.word	0x40080000
   835d4:	00081e69 	.word	0x00081e69
   835d8:	200005ac 	.word	0x200005ac
   835dc:	20002664 	.word	0x20002664
   835e0:	00081e61 	.word	0x00081e61
   835e4:	0008353d 	.word	0x0008353d

000835e8 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   835e8:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   835ea:	2100      	movs	r1, #0
   835ec:	4801      	ldr	r0, [pc, #4]	; (835f4 <stop_timeoutcnt+0xc>)
   835ee:	4b02      	ldr	r3, [pc, #8]	; (835f8 <stop_timeoutcnt+0x10>)
   835f0:	4798      	blx	r3
}
   835f2:	bd08      	pop	{r3, pc}
   835f4:	40080000 	.word	0x40080000
   835f8:	00081e69 	.word	0x00081e69

000835fc <TC0_Handler>:

ISR(TC0_Handler)
{
   835fc:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   835fe:	4b05      	ldr	r3, [pc, #20]	; (83614 <TC0_Handler+0x18>)
   83600:	681b      	ldr	r3, [r3, #0]
   83602:	b113      	cbz	r3, 8360a <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   83604:	3b01      	subs	r3, #1
   83606:	4a03      	ldr	r2, [pc, #12]	; (83614 <TC0_Handler+0x18>)
   83608:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   8360a:	2100      	movs	r1, #0
   8360c:	4802      	ldr	r0, [pc, #8]	; (83618 <TC0_Handler+0x1c>)
   8360e:	4b03      	ldr	r3, [pc, #12]	; (8361c <TC0_Handler+0x20>)
   83610:	4798      	blx	r3
}
   83612:	bd08      	pop	{r3, pc}
   83614:	20002664 	.word	0x20002664
   83618:	40080000 	.word	0x40080000
   8361c:	00081e81 	.word	0x00081e81

00083620 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   83620:	b570      	push	{r4, r5, r6, lr}
   83622:	b086      	sub	sp, #24
   83624:	4605      	mov	r5, r0
   83626:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83628:	4b96      	ldr	r3, [pc, #600]	; (83884 <ctrl_usart+0x264>)
   8362a:	789b      	ldrb	r3, [r3, #2]
   8362c:	3b10      	subs	r3, #16
   8362e:	2b08      	cmp	r3, #8
   83630:	f200 818a 	bhi.w	83948 <ctrl_usart+0x328>
   83634:	e8df f013 	tbh	[pc, r3, lsl #1]
   83638:	009c0009 	.word	0x009c0009
   8363c:	018800dd 	.word	0x018800dd
   83640:	018800ea 	.word	0x018800ea
   83644:	01880188 	.word	0x01880188
   83648:	011d      	.short	0x011d
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   8364a:	b134      	cbz	r4, 8365a <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   8364c:	4b8d      	ldr	r3, [pc, #564]	; (83884 <ctrl_usart+0x264>)
   8364e:	88dc      	ldrh	r4, [r3, #6]
   83650:	2c04      	cmp	r4, #4
   83652:	bf14      	ite	ne
   83654:	2000      	movne	r0, #0
   83656:	2001      	moveq	r0, #1
   83658:	e177      	b.n	8394a <ctrl_usart+0x32a>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   8365a:	4b8a      	ldr	r3, [pc, #552]	; (83884 <ctrl_usart+0x264>)
   8365c:	88db      	ldrh	r3, [r3, #6]
   8365e:	2b07      	cmp	r3, #7
   83660:	f040 8081 	bne.w	83766 <ctrl_usart+0x146>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   83664:	4b87      	ldr	r3, [pc, #540]	; (83884 <ctrl_usart+0x264>)
   83666:	689b      	ldr	r3, [r3, #8]
   83668:	681a      	ldr	r2, [r3, #0]
					
						usartopts.baudrate = baud;
   8366a:	9200      	str	r2, [sp, #0]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   8366c:	791a      	ldrb	r2, [r3, #4]
   8366e:	2a01      	cmp	r2, #1
   83670:	d00e      	beq.n	83690 <ctrl_usart+0x70>
   83672:	2a02      	cmp	r2, #2
   83674:	d010      	beq.n	83698 <ctrl_usart+0x78>
   83676:	b112      	cbz	r2, 8367e <ctrl_usart+0x5e>
								break;
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
								break;
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   83678:	2200      	movs	r2, #0
   8367a:	9203      	str	r2, [sp, #12]
   8367c:	e000      	b.n	83680 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8367e:	9203      	str	r2, [sp, #12]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   83680:	795a      	ldrb	r2, [r3, #5]
   83682:	2a04      	cmp	r2, #4
   83684:	d828      	bhi.n	836d8 <ctrl_usart+0xb8>
   83686:	e8df f002 	tbb	[pc, r2]
   8368a:	180b      	.short	0x180b
   8368c:	1f1c      	.short	0x1f1c
   8368e:	23          	.byte	0x23
   8368f:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   83690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83694:	9203      	str	r2, [sp, #12]
								break;
   83696:	e7f3      	b.n	83680 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   83698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8369c:	9203      	str	r2, [sp, #12]
								break;
   8369e:	e7ef      	b.n	83680 <ctrl_usart+0x60>
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   836a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   836a4:	9202      	str	r2, [sp, #8]
							default:
								usartopts.parity_type = US_MR_PAR_NO;
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   836a6:	799b      	ldrb	r3, [r3, #6]
   836a8:	2b06      	cmp	r3, #6
   836aa:	d02d      	beq.n	83708 <ctrl_usart+0xe8>
   836ac:	2b07      	cmp	r3, #7
   836ae:	d02e      	beq.n	8370e <ctrl_usart+0xee>
   836b0:	2b05      	cmp	r3, #5
   836b2:	d015      	beq.n	836e0 <ctrl_usart+0xc0>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
								break;					
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   836b4:	23c0      	movs	r3, #192	; 0xc0
   836b6:	9301      	str	r3, [sp, #4]
   836b8:	e014      	b.n	836e4 <ctrl_usart+0xc4>
								usartopts.parity_type = US_MR_PAR_ODD;
   836ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   836be:	9202      	str	r2, [sp, #8]
								break;
   836c0:	e7f1      	b.n	836a6 <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_EVEN;
   836c2:	2200      	movs	r2, #0
   836c4:	9202      	str	r2, [sp, #8]
								break;
   836c6:	e7ee      	b.n	836a6 <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_MARK;
   836c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   836cc:	9202      	str	r2, [sp, #8]
								break;
   836ce:	e7ea      	b.n	836a6 <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_SPACE;
   836d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   836d4:	9202      	str	r2, [sp, #8]
								break;							
   836d6:	e7e6      	b.n	836a6 <ctrl_usart+0x86>
								usartopts.parity_type = US_MR_PAR_NO;
   836d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   836dc:	9202      	str	r2, [sp, #8]
   836de:	e7e2      	b.n	836a6 <ctrl_usart+0x86>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   836e0:	2300      	movs	r3, #0
   836e2:	9301      	str	r3, [sp, #4]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   836e4:	2300      	movs	r3, #0
   836e6:	9304      	str	r3, [sp, #16]

						if (usart == USART0)
   836e8:	4b67      	ldr	r3, [pc, #412]	; (83888 <ctrl_usart+0x268>)
   836ea:	429d      	cmp	r5, r3
   836ec:	d012      	beq.n	83714 <ctrl_usart+0xf4>
							init_circ_buf(&usb_usart_circ_buf);
							init_circ_buf(&tx0buf);
							init_circ_buf(&rx0buf);
							usart_x_enabled[0] = true;
							printf("Enabling USART0\n");
						} else if (usart == USART1)
   836ee:	4b67      	ldr	r3, [pc, #412]	; (8388c <ctrl_usart+0x26c>)
   836f0:	429d      	cmp	r5, r3
   836f2:	d020      	beq.n	83736 <ctrl_usart+0x116>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
							init_circ_buf(&tx1buf);
							init_circ_buf(&rx1buf);
							usart_x_enabled[1] = true;
						} else if (usart == USART2)
   836f4:	4b66      	ldr	r3, [pc, #408]	; (83890 <ctrl_usart+0x270>)
   836f6:	429d      	cmp	r5, r3
   836f8:	d029      	beq.n	8374e <ctrl_usart+0x12e>
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
							usart_x_enabled[3] = true;
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   836fa:	4a66      	ldr	r2, [pc, #408]	; (83894 <ctrl_usart+0x274>)
   836fc:	4669      	mov	r1, sp
   836fe:	4628      	mov	r0, r5
   83700:	4b65      	ldr	r3, [pc, #404]	; (83898 <ctrl_usart+0x278>)
   83702:	4798      	blx	r3
				}
			}
			break;		
	}
	
	return false;
   83704:	4620      	mov	r0, r4
   83706:	e120      	b.n	8394a <ctrl_usart+0x32a>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   83708:	2340      	movs	r3, #64	; 0x40
   8370a:	9301      	str	r3, [sp, #4]
								break;
   8370c:	e7ea      	b.n	836e4 <ctrl_usart+0xc4>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   8370e:	2380      	movs	r3, #128	; 0x80
   83710:	9301      	str	r3, [sp, #4]
								break;					
   83712:	e7e7      	b.n	836e4 <ctrl_usart+0xc4>
   83714:	200d      	movs	r0, #13
   83716:	4b61      	ldr	r3, [pc, #388]	; (8389c <ctrl_usart+0x27c>)
   83718:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   8371a:	4861      	ldr	r0, [pc, #388]	; (838a0 <ctrl_usart+0x280>)
   8371c:	4e61      	ldr	r6, [pc, #388]	; (838a4 <ctrl_usart+0x284>)
   8371e:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   83720:	4861      	ldr	r0, [pc, #388]	; (838a8 <ctrl_usart+0x288>)
   83722:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   83724:	4861      	ldr	r0, [pc, #388]	; (838ac <ctrl_usart+0x28c>)
   83726:	47b0      	blx	r6
							usart_x_enabled[0] = true;
   83728:	4b61      	ldr	r3, [pc, #388]	; (838b0 <ctrl_usart+0x290>)
   8372a:	2201      	movs	r2, #1
   8372c:	701a      	strb	r2, [r3, #0]
							printf("Enabling USART0\n");
   8372e:	4861      	ldr	r0, [pc, #388]	; (838b4 <ctrl_usart+0x294>)
   83730:	4b61      	ldr	r3, [pc, #388]	; (838b8 <ctrl_usart+0x298>)
   83732:	4798      	blx	r3
   83734:	e7e1      	b.n	836fa <ctrl_usart+0xda>
   83736:	200e      	movs	r0, #14
   83738:	4b58      	ldr	r3, [pc, #352]	; (8389c <ctrl_usart+0x27c>)
   8373a:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   8373c:	485f      	ldr	r0, [pc, #380]	; (838bc <ctrl_usart+0x29c>)
   8373e:	4e59      	ldr	r6, [pc, #356]	; (838a4 <ctrl_usart+0x284>)
   83740:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   83742:	485f      	ldr	r0, [pc, #380]	; (838c0 <ctrl_usart+0x2a0>)
   83744:	47b0      	blx	r6
							usart_x_enabled[1] = true;
   83746:	4b5a      	ldr	r3, [pc, #360]	; (838b0 <ctrl_usart+0x290>)
   83748:	2201      	movs	r2, #1
   8374a:	705a      	strb	r2, [r3, #1]
   8374c:	e7d5      	b.n	836fa <ctrl_usart+0xda>
   8374e:	200f      	movs	r0, #15
   83750:	4b52      	ldr	r3, [pc, #328]	; (8389c <ctrl_usart+0x27c>)
   83752:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   83754:	485b      	ldr	r0, [pc, #364]	; (838c4 <ctrl_usart+0x2a4>)
   83756:	4e53      	ldr	r6, [pc, #332]	; (838a4 <ctrl_usart+0x284>)
   83758:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   8375a:	485b      	ldr	r0, [pc, #364]	; (838c8 <ctrl_usart+0x2a8>)
   8375c:	47b0      	blx	r6
							usart_x_enabled[2] = true;
   8375e:	4b54      	ldr	r3, [pc, #336]	; (838b0 <ctrl_usart+0x290>)
   83760:	2201      	movs	r2, #1
   83762:	709a      	strb	r2, [r3, #2]
   83764:	e7c9      	b.n	836fa <ctrl_usart+0xda>
						printf("ERR: Invalid USART Configuration packet?\n");
   83766:	4859      	ldr	r0, [pc, #356]	; (838cc <ctrl_usart+0x2ac>)
   83768:	4b53      	ldr	r3, [pc, #332]	; (838b8 <ctrl_usart+0x298>)
   8376a:	4798      	blx	r3
	return false;
   8376c:	4620      	mov	r0, r4
   8376e:	e0ec      	b.n	8394a <ctrl_usart+0x32a>
			if (directionIn == false){
   83770:	b10c      	cbz	r4, 83776 <ctrl_usart+0x156>
	return false;
   83772:	2000      	movs	r0, #0
   83774:	e0e9      	b.n	8394a <ctrl_usart+0x32a>
				usart_enable_rx(usart);
   83776:	4b56      	ldr	r3, [pc, #344]	; (838d0 <ctrl_usart+0x2b0>)
   83778:	4798      	blx	r3
				usart_enable_tx(usart);
   8377a:	4628      	mov	r0, r5
   8377c:	4b55      	ldr	r3, [pc, #340]	; (838d4 <ctrl_usart+0x2b4>)
   8377e:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   83780:	2101      	movs	r1, #1
   83782:	4628      	mov	r0, r5
   83784:	4b54      	ldr	r3, [pc, #336]	; (838d8 <ctrl_usart+0x2b8>)
   83786:	4798      	blx	r3
				if (usart == USART0){
   83788:	4b3f      	ldr	r3, [pc, #252]	; (83888 <ctrl_usart+0x268>)
   8378a:	429d      	cmp	r5, r3
   8378c:	d007      	beq.n	8379e <ctrl_usart+0x17e>
				} else if (usart == USART1) {
   8378e:	4b3f      	ldr	r3, [pc, #252]	; (8388c <ctrl_usart+0x26c>)
   83790:	429d      	cmp	r5, r3
   83792:	d018      	beq.n	837c6 <ctrl_usart+0x1a6>
				} else if (usart == USART2) {
   83794:	4b3e      	ldr	r3, [pc, #248]	; (83890 <ctrl_usart+0x270>)
   83796:	429d      	cmp	r5, r3
   83798:	d020      	beq.n	837dc <ctrl_usart+0x1bc>
	return false;
   8379a:	4620      	mov	r0, r4
   8379c:	e0d5      	b.n	8394a <ctrl_usart+0x32a>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   8379e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   837a2:	2013      	movs	r0, #19
   837a4:	4d4d      	ldr	r5, [pc, #308]	; (838dc <ctrl_usart+0x2bc>)
   837a6:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   837a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   837ac:	2012      	movs	r0, #18
   837ae:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   837b0:	4b4b      	ldr	r3, [pc, #300]	; (838e0 <ctrl_usart+0x2c0>)
   837b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   837b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   837ba:	2150      	movs	r1, #80	; 0x50
   837bc:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   837c0:	601a      	str	r2, [r3, #0]
	return false;
   837c2:	4620      	mov	r0, r4
}
   837c4:	e0c1      	b.n	8394a <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   837c6:	4b46      	ldr	r3, [pc, #280]	; (838e0 <ctrl_usart+0x2c0>)
   837c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   837cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   837d0:	2150      	movs	r1, #80	; 0x50
   837d2:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   837d6:	601a      	str	r2, [r3, #0]
   837d8:	4620      	mov	r0, r4
}
   837da:	e0b6      	b.n	8394a <ctrl_usart+0x32a>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   837dc:	4b40      	ldr	r3, [pc, #256]	; (838e0 <ctrl_usart+0x2c0>)
   837de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   837e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   837e6:	2150      	movs	r1, #80	; 0x50
   837e8:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   837ec:	601a      	str	r2, [r3, #0]
   837ee:	4620      	mov	r0, r4
}
   837f0:	e0ab      	b.n	8394a <ctrl_usart+0x32a>
			if (directionIn == false){
   837f2:	b10c      	cbz	r4, 837f8 <ctrl_usart+0x1d8>
	return false;
   837f4:	2000      	movs	r0, #0
   837f6:	e0a8      	b.n	8394a <ctrl_usart+0x32a>
				usart_disable_rx(usart);
   837f8:	4e3a      	ldr	r6, [pc, #232]	; (838e4 <ctrl_usart+0x2c4>)
   837fa:	47b0      	blx	r6
				usart_disable_rx(usart);
   837fc:	4628      	mov	r0, r5
   837fe:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   83800:	2103      	movs	r1, #3
   83802:	4628      	mov	r0, r5
   83804:	4b38      	ldr	r3, [pc, #224]	; (838e8 <ctrl_usart+0x2c8>)
   83806:	4798      	blx	r3
	return false;
   83808:	4620      	mov	r0, r4
   8380a:	e09e      	b.n	8394a <ctrl_usart+0x32a>
			if (directionIn){
   8380c:	2c00      	cmp	r4, #0
   8380e:	f000 809e 	beq.w	8394e <ctrl_usart+0x32e>
				if (udd_g_ctrlreq.req.wLength == 4){
   83812:	4b1c      	ldr	r3, [pc, #112]	; (83884 <ctrl_usart+0x264>)
   83814:	88db      	ldrh	r3, [r3, #6]
   83816:	2b04      	cmp	r3, #4
   83818:	d001      	beq.n	8381e <ctrl_usart+0x1fe>
	return false;
   8381a:	2000      	movs	r0, #0
   8381c:	e095      	b.n	8394a <ctrl_usart+0x32a>
					udd_g_ctrlreq.payload = ctrlbuffer;
   8381e:	4b19      	ldr	r3, [pc, #100]	; (83884 <ctrl_usart+0x264>)
   83820:	4932      	ldr	r1, [pc, #200]	; (838ec <ctrl_usart+0x2cc>)
   83822:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   83824:	2104      	movs	r1, #4
   83826:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   83828:	4b17      	ldr	r3, [pc, #92]	; (83888 <ctrl_usart+0x268>)
   8382a:	4298      	cmp	r0, r3
   8382c:	d012      	beq.n	83854 <ctrl_usart+0x234>
					} else if (usart == USART1){
   8382e:	4b17      	ldr	r3, [pc, #92]	; (8388c <ctrl_usart+0x26c>)
   83830:	4298      	cmp	r0, r3
   83832:	d014      	beq.n	8385e <ctrl_usart+0x23e>
					} else if (usart == USART2){
   83834:	4b16      	ldr	r3, [pc, #88]	; (83890 <ctrl_usart+0x270>)
   83836:	4298      	cmp	r0, r3
   83838:	d016      	beq.n	83868 <ctrl_usart+0x248>
					word2buf(ctrlbuffer, cnt);
   8383a:	4b2c      	ldr	r3, [pc, #176]	; (838ec <ctrl_usart+0x2cc>)
   8383c:	701a      	strb	r2, [r3, #0]
   8383e:	f3c2 2107 	ubfx	r1, r2, #8, #8
   83842:	7059      	strb	r1, [r3, #1]
   83844:	f3c2 4107 	ubfx	r1, r2, #16, #8
   83848:	7099      	strb	r1, [r3, #2]
   8384a:	f3c2 6007 	ubfx	r0, r2, #24, #8
   8384e:	70d8      	strb	r0, [r3, #3]
					return true;
   83850:	4620      	mov	r0, r4
   83852:	e07a      	b.n	8394a <ctrl_usart+0x32a>
						cnt = circ_buf_count(&rx0buf);
   83854:	4815      	ldr	r0, [pc, #84]	; (838ac <ctrl_usart+0x28c>)
   83856:	4b26      	ldr	r3, [pc, #152]	; (838f0 <ctrl_usart+0x2d0>)
   83858:	4798      	blx	r3
   8385a:	4602      	mov	r2, r0
   8385c:	e7ed      	b.n	8383a <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx1buf);
   8385e:	4818      	ldr	r0, [pc, #96]	; (838c0 <ctrl_usart+0x2a0>)
   83860:	4b23      	ldr	r3, [pc, #140]	; (838f0 <ctrl_usart+0x2d0>)
   83862:	4798      	blx	r3
   83864:	4602      	mov	r2, r0
   83866:	e7e8      	b.n	8383a <ctrl_usart+0x21a>
						cnt = circ_buf_count(&rx2buf);
   83868:	4817      	ldr	r0, [pc, #92]	; (838c8 <ctrl_usart+0x2a8>)
   8386a:	4b21      	ldr	r3, [pc, #132]	; (838f0 <ctrl_usart+0x2d0>)
   8386c:	4798      	blx	r3
   8386e:	4602      	mov	r2, r0
   83870:	e7e3      	b.n	8383a <ctrl_usart+0x21a>
			if (directionIn){
   83872:	2c00      	cmp	r4, #0
   83874:	d06d      	beq.n	83952 <ctrl_usart+0x332>
				if (udd_g_ctrlreq.req.wLength == 4){
   83876:	4b03      	ldr	r3, [pc, #12]	; (83884 <ctrl_usart+0x264>)
   83878:	88db      	ldrh	r3, [r3, #6]
   8387a:	2b04      	cmp	r3, #4
   8387c:	d03a      	beq.n	838f4 <ctrl_usart+0x2d4>
	return false;
   8387e:	2000      	movs	r0, #0
   83880:	e063      	b.n	8394a <ctrl_usart+0x32a>
   83882:	bf00      	nop
   83884:	20002df4 	.word	0x20002df4
   83888:	40090000 	.word	0x40090000
   8388c:	40094000 	.word	0x40094000
   83890:	40098000 	.word	0x40098000
   83894:	05b8d800 	.word	0x05b8d800
   83898:	00086b71 	.word	0x00086b71
   8389c:	00085559 	.word	0x00085559
   838a0:	200029b8 	.word	0x200029b8
   838a4:	00081ed9 	.word	0x00081ed9
   838a8:	20002d08 	.word	0x20002d08
   838ac:	2000273c 	.word	0x2000273c
   838b0:	20002178 	.word	0x20002178
   838b4:	0008e504 	.word	0x0008e504
   838b8:	000878b5 	.word	0x000878b5
   838bc:	200028e4 	.word	0x200028e4
   838c0:	20002c34 	.word	0x20002c34
   838c4:	20002668 	.word	0x20002668
   838c8:	20002b60 	.word	0x20002b60
   838cc:	0008e518 	.word	0x0008e518
   838d0:	00086e75 	.word	0x00086e75
   838d4:	00086e65 	.word	0x00086e65
   838d8:	00086e81 	.word	0x00086e81
   838dc:	00085215 	.word	0x00085215
   838e0:	e000e100 	.word	0xe000e100
   838e4:	00086e7b 	.word	0x00086e7b
   838e8:	00086e85 	.word	0x00086e85
   838ec:	20002168 	.word	0x20002168
   838f0:	00081f8d 	.word	0x00081f8d
					udd_g_ctrlreq.payload = ctrlbuffer;
   838f4:	4b18      	ldr	r3, [pc, #96]	; (83958 <ctrl_usart+0x338>)
   838f6:	4919      	ldr	r1, [pc, #100]	; (8395c <ctrl_usart+0x33c>)
   838f8:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   838fa:	2104      	movs	r1, #4
   838fc:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   838fe:	4b18      	ldr	r3, [pc, #96]	; (83960 <ctrl_usart+0x340>)
   83900:	4298      	cmp	r0, r3
   83902:	d012      	beq.n	8392a <ctrl_usart+0x30a>
					} else if (usart == USART1){
   83904:	4b17      	ldr	r3, [pc, #92]	; (83964 <ctrl_usart+0x344>)
   83906:	4298      	cmp	r0, r3
   83908:	d014      	beq.n	83934 <ctrl_usart+0x314>
					} else if (usart == USART2){
   8390a:	4b17      	ldr	r3, [pc, #92]	; (83968 <ctrl_usart+0x348>)
   8390c:	4298      	cmp	r0, r3
   8390e:	d016      	beq.n	8393e <ctrl_usart+0x31e>
					word2buf(ctrlbuffer, cnt);
   83910:	4b12      	ldr	r3, [pc, #72]	; (8395c <ctrl_usart+0x33c>)
   83912:	701a      	strb	r2, [r3, #0]
   83914:	f3c2 2107 	ubfx	r1, r2, #8, #8
   83918:	7059      	strb	r1, [r3, #1]
   8391a:	f3c2 4107 	ubfx	r1, r2, #16, #8
   8391e:	7099      	strb	r1, [r3, #2]
   83920:	f3c2 6007 	ubfx	r0, r2, #24, #8
   83924:	70d8      	strb	r0, [r3, #3]
					return true;
   83926:	4620      	mov	r0, r4
   83928:	e00f      	b.n	8394a <ctrl_usart+0x32a>
						cnt = circ_buf_count(&tx0buf);
   8392a:	4810      	ldr	r0, [pc, #64]	; (8396c <ctrl_usart+0x34c>)
   8392c:	4b10      	ldr	r3, [pc, #64]	; (83970 <ctrl_usart+0x350>)
   8392e:	4798      	blx	r3
   83930:	4602      	mov	r2, r0
   83932:	e7ed      	b.n	83910 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx1buf);
   83934:	480f      	ldr	r0, [pc, #60]	; (83974 <ctrl_usart+0x354>)
   83936:	4b0e      	ldr	r3, [pc, #56]	; (83970 <ctrl_usart+0x350>)
   83938:	4798      	blx	r3
   8393a:	4602      	mov	r2, r0
   8393c:	e7e8      	b.n	83910 <ctrl_usart+0x2f0>
						cnt = circ_buf_count(&tx2buf);
   8393e:	480e      	ldr	r0, [pc, #56]	; (83978 <ctrl_usart+0x358>)
   83940:	4b0b      	ldr	r3, [pc, #44]	; (83970 <ctrl_usart+0x350>)
   83942:	4798      	blx	r3
   83944:	4602      	mov	r2, r0
   83946:	e7e3      	b.n	83910 <ctrl_usart+0x2f0>
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   83948:	2000      	movs	r0, #0
}
   8394a:	b006      	add	sp, #24
   8394c:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   8394e:	4620      	mov	r0, r4
   83950:	e7fb      	b.n	8394a <ctrl_usart+0x32a>
   83952:	4620      	mov	r0, r4
   83954:	e7f9      	b.n	8394a <ctrl_usart+0x32a>
   83956:	bf00      	nop
   83958:	20002df4 	.word	0x20002df4
   8395c:	20002168 	.word	0x20002168
   83960:	40090000 	.word	0x40090000
   83964:	40094000 	.word	0x40094000
   83968:	40098000 	.word	0x40098000
   8396c:	20002d08 	.word	0x20002d08
   83970:	00081f8d 	.word	0x00081f8d
   83974:	200028e4 	.word	0x200028e4
   83978:	20002668 	.word	0x20002668

0008397c <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   8397c:	b538      	push	{r3, r4, r5, lr}
   8397e:	4604      	mov	r4, r0
   83980:	4613      	mov	r3, r2
	if (txbuf == NULL){
   83982:	460d      	mov	r5, r1
   83984:	b159      	cbz	r1, 8399e <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   83986:	2200      	movs	r2, #0
   83988:	4619      	mov	r1, r3
   8398a:	4628      	mov	r0, r5
   8398c:	4b16      	ldr	r3, [pc, #88]	; (839e8 <usart_driver_putchar+0x6c>)
   8398e:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   83990:	4620      	mov	r0, r4
   83992:	4b16      	ldr	r3, [pc, #88]	; (839ec <usart_driver_putchar+0x70>)
   83994:	4798      	blx	r3
   83996:	f010 0f02 	tst.w	r0, #2
   8399a:	d011      	beq.n	839c0 <usart_driver_putchar+0x44>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
			usart_putchar(usart, get_from_circ_buf(txbuf));
		usart_enable_interrupt(usart, US_CSR_TXRDY);
	}
}
   8399c:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   8399e:	4a14      	ldr	r2, [pc, #80]	; (839f0 <usart_driver_putchar+0x74>)
   839a0:	4290      	cmp	r0, r2
   839a2:	d009      	beq.n	839b8 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   839a4:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   839a8:	4290      	cmp	r0, r2
   839aa:	d007      	beq.n	839bc <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   839ac:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   839b0:	4290      	cmp	r0, r2
   839b2:	d1f3      	bne.n	8399c <usart_driver_putchar+0x20>
   839b4:	4d0f      	ldr	r5, [pc, #60]	; (839f4 <usart_driver_putchar+0x78>)
   839b6:	e7e6      	b.n	83986 <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   839b8:	4d0f      	ldr	r5, [pc, #60]	; (839f8 <usart_driver_putchar+0x7c>)
   839ba:	e7e4      	b.n	83986 <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   839bc:	4d0f      	ldr	r5, [pc, #60]	; (839fc <usart_driver_putchar+0x80>)
   839be:	e7e2      	b.n	83986 <usart_driver_putchar+0xa>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   839c0:	4620      	mov	r0, r4
   839c2:	4b0f      	ldr	r3, [pc, #60]	; (83a00 <usart_driver_putchar+0x84>)
   839c4:	4798      	blx	r3
   839c6:	f010 0f02 	tst.w	r0, #2
   839ca:	d104      	bne.n	839d6 <usart_driver_putchar+0x5a>
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   839cc:	2102      	movs	r1, #2
   839ce:	4620      	mov	r0, r4
   839d0:	4b0c      	ldr	r3, [pc, #48]	; (83a04 <usart_driver_putchar+0x88>)
   839d2:	4798      	blx	r3
   839d4:	e7e2      	b.n	8399c <usart_driver_putchar+0x20>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   839d6:	4628      	mov	r0, r5
   839d8:	4b0b      	ldr	r3, [pc, #44]	; (83a08 <usart_driver_putchar+0x8c>)
   839da:	4798      	blx	r3
   839dc:	4601      	mov	r1, r0
   839de:	4620      	mov	r0, r4
   839e0:	4b0a      	ldr	r3, [pc, #40]	; (83a0c <usart_driver_putchar+0x90>)
   839e2:	4798      	blx	r3
   839e4:	e7f2      	b.n	839cc <usart_driver_putchar+0x50>
   839e6:	bf00      	nop
   839e8:	00081ee5 	.word	0x00081ee5
   839ec:	00086e89 	.word	0x00086e89
   839f0:	40090000 	.word	0x40090000
   839f4:	20002668 	.word	0x20002668
   839f8:	20002d08 	.word	0x20002d08
   839fc:	200028e4 	.word	0x200028e4
   83a00:	00086e8d 	.word	0x00086e8d
   83a04:	00086e81 	.word	0x00086e81
   83a08:	00081f39 	.word	0x00081f39
   83a0c:	00086ec5 	.word	0x00086ec5

00083a10 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   83a10:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   83a12:	4b0a      	ldr	r3, [pc, #40]	; (83a3c <usart_driver_getchar+0x2c>)
   83a14:	4298      	cmp	r0, r3
   83a16:	d00b      	beq.n	83a30 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   83a18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   83a1c:	4298      	cmp	r0, r3
   83a1e:	d009      	beq.n	83a34 <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   83a20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   83a24:	4298      	cmp	r0, r3
   83a26:	d107      	bne.n	83a38 <usart_driver_getchar+0x28>
   83a28:	4805      	ldr	r0, [pc, #20]	; (83a40 <usart_driver_getchar+0x30>)
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
	}
	return get_from_circ_buf(rxbuf);
   83a2a:	4b06      	ldr	r3, [pc, #24]	; (83a44 <usart_driver_getchar+0x34>)
   83a2c:	4798      	blx	r3
}
   83a2e:	bd08      	pop	{r3, pc}
			if (usart == USART0) rxbuf = &rx0buf;
   83a30:	4805      	ldr	r0, [pc, #20]	; (83a48 <usart_driver_getchar+0x38>)
   83a32:	e7fa      	b.n	83a2a <usart_driver_getchar+0x1a>
			else if (usart == USART1) rxbuf = &rx1buf;
   83a34:	4805      	ldr	r0, [pc, #20]	; (83a4c <usart_driver_getchar+0x3c>)
   83a36:	e7f8      	b.n	83a2a <usart_driver_getchar+0x1a>
			else return 0xFF;
   83a38:	20ff      	movs	r0, #255	; 0xff
   83a3a:	e7f8      	b.n	83a2e <usart_driver_getchar+0x1e>
   83a3c:	40090000 	.word	0x40090000
   83a40:	20002b60 	.word	0x20002b60
   83a44:	00081f39 	.word	0x00081f39
   83a48:	2000273c 	.word	0x2000273c
   83a4c:	20002c34 	.word	0x20002c34

00083a50 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   83a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a54:	4607      	mov	r7, r0
   83a56:	460e      	mov	r6, r1
   83a58:	4615      	mov	r5, r2
	uint32_t status;
	status = usart_get_status(usart);
   83a5a:	4b14      	ldr	r3, [pc, #80]	; (83aac <generic_isr+0x5c>)
   83a5c:	4798      	blx	r3
   83a5e:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   83a60:	f010 0f01 	tst.w	r0, #1
   83a64:	d104      	bne.n	83a70 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		//udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   83a66:	f014 0f02 	tst.w	r4, #2
   83a6a:	d10e      	bne.n	83a8a <generic_isr+0x3a>
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   83a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   83a70:	69bb      	ldr	r3, [r7, #24]
		add_to_circ_buf(rxbuf, temp, false);
   83a72:	fa5f f883 	uxtb.w	r8, r3
   83a76:	2200      	movs	r2, #0
   83a78:	4641      	mov	r1, r8
   83a7a:	4630      	mov	r0, r6
   83a7c:	4e0c      	ldr	r6, [pc, #48]	; (83ab0 <generic_isr+0x60>)
   83a7e:	47b0      	blx	r6
		add_to_circ_buf(&usb_usart_circ_buf, temp, false);
   83a80:	2200      	movs	r2, #0
   83a82:	4641      	mov	r1, r8
   83a84:	480b      	ldr	r0, [pc, #44]	; (83ab4 <generic_isr+0x64>)
   83a86:	47b0      	blx	r6
   83a88:	e7ed      	b.n	83a66 <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   83a8a:	4628      	mov	r0, r5
   83a8c:	4b0a      	ldr	r3, [pc, #40]	; (83ab8 <generic_isr+0x68>)
   83a8e:	4798      	blx	r3
   83a90:	b138      	cbz	r0, 83aa2 <generic_isr+0x52>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   83a92:	4628      	mov	r0, r5
   83a94:	4b09      	ldr	r3, [pc, #36]	; (83abc <generic_isr+0x6c>)
   83a96:	4798      	blx	r3
   83a98:	4601      	mov	r1, r0
   83a9a:	4638      	mov	r0, r7
   83a9c:	4b08      	ldr	r3, [pc, #32]	; (83ac0 <generic_isr+0x70>)
   83a9e:	4798      	blx	r3
   83aa0:	e7e4      	b.n	83a6c <generic_isr+0x1c>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   83aa2:	2102      	movs	r1, #2
   83aa4:	4638      	mov	r0, r7
   83aa6:	4b07      	ldr	r3, [pc, #28]	; (83ac4 <generic_isr+0x74>)
   83aa8:	4798      	blx	r3
}
   83aaa:	e7df      	b.n	83a6c <generic_isr+0x1c>
   83aac:	00086e8d 	.word	0x00086e8d
   83ab0:	00081ee5 	.word	0x00081ee5
   83ab4:	200029b8 	.word	0x200029b8
   83ab8:	00081f81 	.word	0x00081f81
   83abc:	00081f39 	.word	0x00081f39
   83ac0:	00086ec5 	.word	0x00086ec5
   83ac4:	00086e85 	.word	0x00086e85

00083ac8 <USART0_Handler>:

ISR(USART0_Handler)
{
   83ac8:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   83aca:	4a03      	ldr	r2, [pc, #12]	; (83ad8 <USART0_Handler+0x10>)
   83acc:	4903      	ldr	r1, [pc, #12]	; (83adc <USART0_Handler+0x14>)
   83ace:	4804      	ldr	r0, [pc, #16]	; (83ae0 <USART0_Handler+0x18>)
   83ad0:	4b04      	ldr	r3, [pc, #16]	; (83ae4 <USART0_Handler+0x1c>)
   83ad2:	4798      	blx	r3
}
   83ad4:	bd08      	pop	{r3, pc}
   83ad6:	bf00      	nop
   83ad8:	20002d08 	.word	0x20002d08
   83adc:	2000273c 	.word	0x2000273c
   83ae0:	40090000 	.word	0x40090000
   83ae4:	00083a51 	.word	0x00083a51

00083ae8 <USART1_Handler>:

ISR(USART1_Handler)
{
   83ae8:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   83aea:	4a03      	ldr	r2, [pc, #12]	; (83af8 <USART1_Handler+0x10>)
   83aec:	4903      	ldr	r1, [pc, #12]	; (83afc <USART1_Handler+0x14>)
   83aee:	4804      	ldr	r0, [pc, #16]	; (83b00 <USART1_Handler+0x18>)
   83af0:	4b04      	ldr	r3, [pc, #16]	; (83b04 <USART1_Handler+0x1c>)
   83af2:	4798      	blx	r3
}
   83af4:	bd08      	pop	{r3, pc}
   83af6:	bf00      	nop
   83af8:	200028e4 	.word	0x200028e4
   83afc:	20002c34 	.word	0x20002c34
   83b00:	40094000 	.word	0x40094000
   83b04:	00083a51 	.word	0x00083a51

00083b08 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   83b08:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   83b0a:	4a03      	ldr	r2, [pc, #12]	; (83b18 <USART2_Handler+0x10>)
   83b0c:	4903      	ldr	r1, [pc, #12]	; (83b1c <USART2_Handler+0x14>)
   83b0e:	4804      	ldr	r0, [pc, #16]	; (83b20 <USART2_Handler+0x18>)
   83b10:	4b04      	ldr	r3, [pc, #16]	; (83b24 <USART2_Handler+0x1c>)
   83b12:	4798      	blx	r3
}
   83b14:	bd08      	pop	{r3, pc}
   83b16:	bf00      	nop
   83b18:	20002668 	.word	0x20002668
   83b1c:	20002b60 	.word	0x20002b60
   83b20:	40098000 	.word	0x40098000
   83b24:	00083a51 	.word	0x00083a51

00083b28 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83b28:	b538      	push	{r3, r4, r5, lr}
   83b2a:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   83b2c:	b2c0      	uxtb	r0, r0
   83b2e:	4d05      	ldr	r5, [pc, #20]	; (83b44 <XMEGANVM_SendAddress+0x1c>)
   83b30:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   83b32:	f3c4 2007 	ubfx	r0, r4, #8, #8
   83b36:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   83b38:	f3c4 4007 	ubfx	r0, r4, #16, #8
   83b3c:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   83b3e:	0e20      	lsrs	r0, r4, #24
   83b40:	47a8      	blx	r5
}
   83b42:	bd38      	pop	{r3, r4, r5, pc}
   83b44:	000843b5 	.word	0x000843b5

00083b48 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   83b48:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   83b4a:	4b03      	ldr	r3, [pc, #12]	; (83b58 <XMEGANVM_SendNVMRegAddress+0x10>)
   83b4c:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   83b4e:	4318      	orrs	r0, r3
   83b50:	4b02      	ldr	r3, [pc, #8]	; (83b5c <XMEGANVM_SendNVMRegAddress+0x14>)
   83b52:	4798      	blx	r3
}
   83b54:	bd08      	pop	{r3, pc}
   83b56:	bf00      	nop
   83b58:	200005b4 	.word	0x200005b4
   83b5c:	00083b29 	.word	0x00083b29

00083b60 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   83b60:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83b62:	4e07      	ldr	r6, [pc, #28]	; (83b80 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b64:	4d07      	ldr	r5, [pc, #28]	; (83b84 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   83b66:	4c08      	ldr	r4, [pc, #32]	; (83b88 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83b68:	2080      	movs	r0, #128	; 0x80
   83b6a:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b6c:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   83b6e:	6823      	ldr	r3, [r4, #0]
   83b70:	b123      	cbz	r3, 83b7c <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   83b72:	f010 0f02 	tst.w	r0, #2
   83b76:	d0f7      	beq.n	83b68 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   83b78:	2001      	movs	r0, #1
   83b7a:	e000      	b.n	83b7e <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   83b7c:	2000      	movs	r0, #0
		}
	}
}
   83b7e:	bd70      	pop	{r4, r5, r6, pc}
   83b80:	000843b5 	.word	0x000843b5
   83b84:	000843e1 	.word	0x000843e1
   83b88:	20002664 	.word	0x20002664

00083b8c <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83b8c:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83b8e:	206b      	movs	r0, #107	; 0x6b
   83b90:	4b09      	ldr	r3, [pc, #36]	; (83bb8 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83b92:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83b94:	200f      	movs	r0, #15
   83b96:	4b09      	ldr	r3, [pc, #36]	; (83bbc <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83b98:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83b9a:	4e07      	ldr	r6, [pc, #28]	; (83bb8 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83b9c:	4d08      	ldr	r5, [pc, #32]	; (83bc0 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   83b9e:	4c09      	ldr	r4, [pc, #36]	; (83bc4 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83ba0:	2020      	movs	r0, #32
   83ba2:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83ba4:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83ba6:	6823      	ldr	r3, [r4, #0]
   83ba8:	b123      	cbz	r3, 83bb4 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   83baa:	f010 0f80 	tst.w	r0, #128	; 0x80
   83bae:	d1f7      	bne.n	83ba0 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   83bb0:	2001      	movs	r0, #1
   83bb2:	e000      	b.n	83bb6 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   83bb4:	2000      	movs	r0, #0
		}
	}
}
   83bb6:	bd70      	pop	{r4, r5, r6, pc}
   83bb8:	000843b5 	.word	0x000843b5
   83bbc:	00083b49 	.word	0x00083b49
   83bc0:	000843e1 	.word	0x000843e1
   83bc4:	20002664 	.word	0x20002664

00083bc8 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83bcc:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   83bce:	4b1a      	ldr	r3, [pc, #104]	; (83c38 <XMEGANVM_EnablePDI+0x70>)
   83bd0:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83bd2:	20c1      	movs	r0, #193	; 0xc1
   83bd4:	4c19      	ldr	r4, [pc, #100]	; (83c3c <XMEGANVM_EnablePDI+0x74>)
   83bd6:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83bd8:	2059      	movs	r0, #89	; 0x59
   83bda:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83bdc:	20c2      	movs	r0, #194	; 0xc2
   83bde:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83be0:	2002      	movs	r0, #2
   83be2:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83be4:	20e0      	movs	r0, #224	; 0xe0
   83be6:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83be8:	f10d 0407 	add.w	r4, sp, #7
   83bec:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83bee:	f04f 0812 	mov.w	r8, #18
   83bf2:	2789      	movs	r7, #137	; 0x89
   83bf4:	4e11      	ldr	r6, [pc, #68]	; (83c3c <XMEGANVM_EnablePDI+0x74>)
   83bf6:	f88d 8000 	strb.w	r8, [sp]
   83bfa:	f88d 7001 	strb.w	r7, [sp, #1]
   83bfe:	23ab      	movs	r3, #171	; 0xab
   83c00:	f88d 3002 	strb.w	r3, [sp, #2]
   83c04:	2345      	movs	r3, #69	; 0x45
   83c06:	f88d 3003 	strb.w	r3, [sp, #3]
   83c0a:	23cd      	movs	r3, #205	; 0xcd
   83c0c:	f88d 3004 	strb.w	r3, [sp, #4]
   83c10:	23d8      	movs	r3, #216	; 0xd8
   83c12:	f88d 3005 	strb.w	r3, [sp, #5]
   83c16:	2388      	movs	r3, #136	; 0x88
   83c18:	f88d 3006 	strb.w	r3, [sp, #6]
   83c1c:	23ff      	movs	r3, #255	; 0xff
   83c1e:	f88d 3007 	strb.w	r3, [sp, #7]
   83c22:	7820      	ldrb	r0, [r4, #0]
   83c24:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83c26:	454c      	cmp	r4, r9
   83c28:	f104 34ff 	add.w	r4, r4, #4294967295
   83c2c:	d1e3      	bne.n	83bf6 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   83c2e:	4b04      	ldr	r3, [pc, #16]	; (83c40 <XMEGANVM_EnablePDI+0x78>)
   83c30:	4798      	blx	r3
}
   83c32:	b003      	add	sp, #12
   83c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83c38:	00084481 	.word	0x00084481
   83c3c:	000843b5 	.word	0x000843b5
   83c40:	00083b61 	.word	0x00083b61

00083c44 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   83c44:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   83c46:	4b09      	ldr	r3, [pc, #36]	; (83c6c <XMEGANVM_DisablePDI+0x28>)
   83c48:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83c4a:	4c09      	ldr	r4, [pc, #36]	; (83c70 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83c4c:	4d09      	ldr	r5, [pc, #36]	; (83c74 <XMEGANVM_DisablePDI+0x30>)
   83c4e:	4e0a      	ldr	r6, [pc, #40]	; (83c78 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83c50:	20c1      	movs	r0, #193	; 0xc1
   83c52:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83c54:	2000      	movs	r0, #0
   83c56:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83c58:	2081      	movs	r0, #129	; 0x81
   83c5a:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83c5c:	47a8      	blx	r5
   83c5e:	b110      	cbz	r0, 83c66 <XMEGANVM_DisablePDI+0x22>
   83c60:	6833      	ldr	r3, [r6, #0]
   83c62:	2b00      	cmp	r3, #0
   83c64:	d1f4      	bne.n	83c50 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83c66:	4b05      	ldr	r3, [pc, #20]	; (83c7c <XMEGANVM_DisablePDI+0x38>)
   83c68:	4798      	blx	r3
}
   83c6a:	bd70      	pop	{r4, r5, r6, pc}
   83c6c:	00083b61 	.word	0x00083b61
   83c70:	000843b5 	.word	0x000843b5
   83c74:	000843e1 	.word	0x000843e1
   83c78:	20002664 	.word	0x20002664
   83c7c:	00084359 	.word	0x00084359

00083c80 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   83c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c82:	4606      	mov	r6, r0
   83c84:	460c      	mov	r4, r1
   83c86:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83c88:	4b1c      	ldr	r3, [pc, #112]	; (83cfc <XMEGANVM_ReadMemory+0x7c>)
   83c8a:	4798      	blx	r3
   83c8c:	4603      	mov	r3, r0
   83c8e:	b908      	cbnz	r0, 83c94 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83c90:	4618      	mov	r0, r3
   83c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83c94:	204c      	movs	r0, #76	; 0x4c
   83c96:	4f1a      	ldr	r7, [pc, #104]	; (83d00 <XMEGANVM_ReadMemory+0x80>)
   83c98:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83c9a:	200a      	movs	r0, #10
   83c9c:	4b19      	ldr	r3, [pc, #100]	; (83d04 <XMEGANVM_ReadMemory+0x84>)
   83c9e:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83ca0:	2043      	movs	r0, #67	; 0x43
   83ca2:	47b8      	blx	r7
	if (ReadSize > 1)
   83ca4:	2d01      	cmp	r5, #1
   83ca6:	d919      	bls.n	83cdc <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83ca8:	206b      	movs	r0, #107	; 0x6b
   83caa:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   83cac:	4630      	mov	r0, r6
   83cae:	4b16      	ldr	r3, [pc, #88]	; (83d08 <XMEGANVM_ReadMemory+0x88>)
   83cb0:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83cb2:	20a0      	movs	r0, #160	; 0xa0
   83cb4:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   83cb6:	1e68      	subs	r0, r5, #1
   83cb8:	b2c0      	uxtb	r0, r0
   83cba:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83cbc:	2024      	movs	r0, #36	; 0x24
   83cbe:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   83cc0:	3d01      	subs	r5, #1
   83cc2:	b2ad      	uxth	r5, r5
   83cc4:	3501      	adds	r5, #1
   83cc6:	4425      	add	r5, r4
   83cc8:	4e10      	ldr	r6, [pc, #64]	; (83d0c <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83cca:	4f11      	ldr	r7, [pc, #68]	; (83d10 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83ccc:	6833      	ldr	r3, [r6, #0]
   83cce:	b173      	cbz	r3, 83cee <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83cd0:	47b8      	blx	r7
   83cd2:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   83cd6:	42ac      	cmp	r4, r5
   83cd8:	d1f8      	bne.n	83ccc <XMEGANVM_ReadMemory+0x4c>
   83cda:	e008      	b.n	83cee <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83cdc:	200c      	movs	r0, #12
   83cde:	4b08      	ldr	r3, [pc, #32]	; (83d00 <XMEGANVM_ReadMemory+0x80>)
   83ce0:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83ce2:	4630      	mov	r0, r6
   83ce4:	4b08      	ldr	r3, [pc, #32]	; (83d08 <XMEGANVM_ReadMemory+0x88>)
   83ce6:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83ce8:	4b09      	ldr	r3, [pc, #36]	; (83d10 <XMEGANVM_ReadMemory+0x90>)
   83cea:	4798      	blx	r3
   83cec:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   83cee:	4b07      	ldr	r3, [pc, #28]	; (83d0c <XMEGANVM_ReadMemory+0x8c>)
   83cf0:	681b      	ldr	r3, [r3, #0]
   83cf2:	3b00      	subs	r3, #0
   83cf4:	bf18      	it	ne
   83cf6:	2301      	movne	r3, #1
   83cf8:	e7ca      	b.n	83c90 <XMEGANVM_ReadMemory+0x10>
   83cfa:	bf00      	nop
   83cfc:	00083b8d 	.word	0x00083b8d
   83d00:	000843b5 	.word	0x000843b5
   83d04:	00083b49 	.word	0x00083b49
   83d08:	00083b29 	.word	0x00083b29
   83d0c:	20002664 	.word	0x20002664
   83d10:	000843e1 	.word	0x000843e1

00083d14 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   83d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d18:	4607      	mov	r7, r0
   83d1a:	4688      	mov	r8, r1
   83d1c:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d1e:	4b0b      	ldr	r3, [pc, #44]	; (83d4c <XMEGANVM_WriteByteMemory+0x38>)
   83d20:	4798      	blx	r3
   83d22:	4605      	mov	r5, r0
   83d24:	b910      	cbnz	r0, 83d2c <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   83d26:	4628      	mov	r0, r5
   83d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d2c:	204c      	movs	r0, #76	; 0x4c
   83d2e:	4c08      	ldr	r4, [pc, #32]	; (83d50 <XMEGANVM_WriteByteMemory+0x3c>)
   83d30:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d32:	200a      	movs	r0, #10
   83d34:	4b07      	ldr	r3, [pc, #28]	; (83d54 <XMEGANVM_WriteByteMemory+0x40>)
   83d36:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   83d38:	4638      	mov	r0, r7
   83d3a:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d3c:	204c      	movs	r0, #76	; 0x4c
   83d3e:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   83d40:	4640      	mov	r0, r8
   83d42:	4b05      	ldr	r3, [pc, #20]	; (83d58 <XMEGANVM_WriteByteMemory+0x44>)
   83d44:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   83d46:	4630      	mov	r0, r6
   83d48:	47a0      	blx	r4
	return true;
   83d4a:	e7ec      	b.n	83d26 <XMEGANVM_WriteByteMemory+0x12>
   83d4c:	00083b8d 	.word	0x00083b8d
   83d50:	000843b5 	.word	0x000843b5
   83d54:	00083b49 	.word	0x00083b49
   83d58:	00083b29 	.word	0x00083b29

00083d5c <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d60:	4681      	mov	r9, r0
   83d62:	4617      	mov	r7, r2
   83d64:	461c      	mov	r4, r3
   83d66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83d68:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83d6c:	f013 0f01 	tst.w	r3, #1
   83d70:	d108      	bne.n	83d84 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83d72:	b9f6      	cbnz	r6, 83db2 <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83d74:	f014 0f02 	tst.w	r4, #2
   83d78:	d13f      	bne.n	83dfa <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83d7a:	f04f 0a01 	mov.w	sl, #1
}
   83d7e:	4650      	mov	r0, sl
   83d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d84:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83d86:	4b27      	ldr	r3, [pc, #156]	; (83e24 <XMEGANVM_WritePageMemory+0xc8>)
   83d88:	4798      	blx	r3
   83d8a:	4682      	mov	sl, r0
   83d8c:	2800      	cmp	r0, #0
   83d8e:	d0f6      	beq.n	83d7e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83d90:	204c      	movs	r0, #76	; 0x4c
   83d92:	f8df a09c 	ldr.w	sl, [pc, #156]	; 83e30 <XMEGANVM_WritePageMemory+0xd4>
   83d96:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83d98:	200a      	movs	r0, #10
   83d9a:	f8df b08c 	ldr.w	fp, [pc, #140]	; 83e28 <XMEGANVM_WritePageMemory+0xcc>
   83d9e:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   83da0:	4640      	mov	r0, r8
   83da2:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83da4:	204c      	movs	r0, #76	; 0x4c
   83da6:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83da8:	200b      	movs	r0, #11
   83daa:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83dac:	2001      	movs	r0, #1
   83dae:	47d0      	blx	sl
   83db0:	e7df      	b.n	83d72 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83db2:	4b1c      	ldr	r3, [pc, #112]	; (83e24 <XMEGANVM_WritePageMemory+0xc8>)
   83db4:	4798      	blx	r3
   83db6:	4682      	mov	sl, r0
   83db8:	2800      	cmp	r0, #0
   83dba:	d0e0      	beq.n	83d7e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83dbc:	204c      	movs	r0, #76	; 0x4c
   83dbe:	f8df 8070 	ldr.w	r8, [pc, #112]	; 83e30 <XMEGANVM_WritePageMemory+0xd4>
   83dc2:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83dc4:	200a      	movs	r0, #10
   83dc6:	4b18      	ldr	r3, [pc, #96]	; (83e28 <XMEGANVM_WritePageMemory+0xcc>)
   83dc8:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83dca:	4648      	mov	r0, r9
   83dcc:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83dce:	206b      	movs	r0, #107	; 0x6b
   83dd0:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   83dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
   83dd4:	4b15      	ldr	r3, [pc, #84]	; (83e2c <XMEGANVM_WritePageMemory+0xd0>)
   83dd6:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83dd8:	20a0      	movs	r0, #160	; 0xa0
   83dda:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   83ddc:	1e70      	subs	r0, r6, #1
   83dde:	b2c0      	uxtb	r0, r0
   83de0:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83de2:	2064      	movs	r0, #100	; 0x64
   83de4:	47c0      	blx	r8
		while (WriteSize--)
   83de6:	3e01      	subs	r6, #1
   83de8:	b2b6      	uxth	r6, r6
   83dea:	3601      	adds	r6, #1
   83dec:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83dee:	f815 0b01 	ldrb.w	r0, [r5], #1
   83df2:	47c0      	blx	r8
		while (WriteSize--)
   83df4:	42b5      	cmp	r5, r6
   83df6:	d1fa      	bne.n	83dee <XMEGANVM_WritePageMemory+0x92>
   83df8:	e7bc      	b.n	83d74 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83dfa:	4b0a      	ldr	r3, [pc, #40]	; (83e24 <XMEGANVM_WritePageMemory+0xc8>)
   83dfc:	4798      	blx	r3
   83dfe:	4682      	mov	sl, r0
   83e00:	2800      	cmp	r0, #0
   83e02:	d0bc      	beq.n	83d7e <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e04:	204c      	movs	r0, #76	; 0x4c
   83e06:	4c0a      	ldr	r4, [pc, #40]	; (83e30 <XMEGANVM_WritePageMemory+0xd4>)
   83e08:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e0a:	200a      	movs	r0, #10
   83e0c:	4b06      	ldr	r3, [pc, #24]	; (83e28 <XMEGANVM_WritePageMemory+0xcc>)
   83e0e:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83e10:	4638      	mov	r0, r7
   83e12:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e14:	204c      	movs	r0, #76	; 0x4c
   83e16:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83e18:	980a      	ldr	r0, [sp, #40]	; 0x28
   83e1a:	4b04      	ldr	r3, [pc, #16]	; (83e2c <XMEGANVM_WritePageMemory+0xd0>)
   83e1c:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83e1e:	2000      	movs	r0, #0
   83e20:	47a0      	blx	r4
   83e22:	e7ac      	b.n	83d7e <XMEGANVM_WritePageMemory+0x22>
   83e24:	00083b8d 	.word	0x00083b8d
   83e28:	00083b49 	.word	0x00083b49
   83e2c:	00083b29 	.word	0x00083b29
   83e30:	000843b5 	.word	0x000843b5

00083e34 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e36:	4604      	mov	r4, r0
   83e38:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83e3a:	4b36      	ldr	r3, [pc, #216]	; (83f14 <XMEGANVM_EraseMemory+0xe0>)
   83e3c:	4798      	blx	r3
   83e3e:	4603      	mov	r3, r0
   83e40:	b1a8      	cbz	r0, 83e6e <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83e42:	2c40      	cmp	r4, #64	; 0x40
   83e44:	d015      	beq.n	83e72 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83e46:	2c30      	cmp	r4, #48	; 0x30
   83e48:	d022      	beq.n	83e90 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e4a:	204c      	movs	r0, #76	; 0x4c
   83e4c:	4e32      	ldr	r6, [pc, #200]	; (83f18 <XMEGANVM_EraseMemory+0xe4>)
   83e4e:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e50:	200a      	movs	r0, #10
   83e52:	4b32      	ldr	r3, [pc, #200]	; (83f1c <XMEGANVM_EraseMemory+0xe8>)
   83e54:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83e56:	4620      	mov	r0, r4
   83e58:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e5a:	204c      	movs	r0, #76	; 0x4c
   83e5c:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   83e5e:	4628      	mov	r0, r5
   83e60:	4b2f      	ldr	r3, [pc, #188]	; (83f20 <XMEGANVM_EraseMemory+0xec>)
   83e62:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83e64:	2000      	movs	r0, #0
   83e66:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83e68:	4b2e      	ldr	r3, [pc, #184]	; (83f24 <XMEGANVM_EraseMemory+0xf0>)
   83e6a:	4798      	blx	r3
   83e6c:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83e6e:	4618      	mov	r0, r3
   83e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e72:	204c      	movs	r0, #76	; 0x4c
   83e74:	4c28      	ldr	r4, [pc, #160]	; (83f18 <XMEGANVM_EraseMemory+0xe4>)
   83e76:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e78:	200a      	movs	r0, #10
   83e7a:	4d28      	ldr	r5, [pc, #160]	; (83f1c <XMEGANVM_EraseMemory+0xe8>)
   83e7c:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83e7e:	2040      	movs	r0, #64	; 0x40
   83e80:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e82:	204c      	movs	r0, #76	; 0x4c
   83e84:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83e86:	200b      	movs	r0, #11
   83e88:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83e8a:	2001      	movs	r0, #1
   83e8c:	47a0      	blx	r4
   83e8e:	e7eb      	b.n	83e68 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83e90:	204c      	movs	r0, #76	; 0x4c
   83e92:	4c21      	ldr	r4, [pc, #132]	; (83f18 <XMEGANVM_EraseMemory+0xe4>)
   83e94:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83e96:	200a      	movs	r0, #10
   83e98:	4e20      	ldr	r6, [pc, #128]	; (83f1c <XMEGANVM_EraseMemory+0xe8>)
   83e9a:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83e9c:	2036      	movs	r0, #54	; 0x36
   83e9e:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ea0:	204c      	movs	r0, #76	; 0x4c
   83ea2:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83ea4:	200b      	movs	r0, #11
   83ea6:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83ea8:	2001      	movs	r0, #1
   83eaa:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83eac:	4b19      	ldr	r3, [pc, #100]	; (83f14 <XMEGANVM_EraseMemory+0xe0>)
   83eae:	4798      	blx	r3
   83eb0:	4603      	mov	r3, r0
   83eb2:	2800      	cmp	r0, #0
   83eb4:	d0db      	beq.n	83e6e <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83eb6:	204c      	movs	r0, #76	; 0x4c
   83eb8:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83eba:	200a      	movs	r0, #10
   83ebc:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83ebe:	2033      	movs	r0, #51	; 0x33
   83ec0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83ec2:	206b      	movs	r0, #107	; 0x6b
   83ec4:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83ec6:	4628      	mov	r0, r5
   83ec8:	4b15      	ldr	r3, [pc, #84]	; (83f20 <XMEGANVM_EraseMemory+0xec>)
   83eca:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83ecc:	20a0      	movs	r0, #160	; 0xa0
   83ece:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83ed0:	4d15      	ldr	r5, [pc, #84]	; (83f28 <XMEGANVM_EraseMemory+0xf4>)
   83ed2:	7828      	ldrb	r0, [r5, #0]
   83ed4:	3801      	subs	r0, #1
   83ed6:	b2c0      	uxtb	r0, r0
   83ed8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83eda:	2064      	movs	r0, #100	; 0x64
   83edc:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83ede:	882b      	ldrh	r3, [r5, #0]
   83ee0:	b14b      	cbz	r3, 83ef6 <XMEGANVM_EraseMemory+0xc2>
   83ee2:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83ee4:	4627      	mov	r7, r4
   83ee6:	4e0c      	ldr	r6, [pc, #48]	; (83f18 <XMEGANVM_EraseMemory+0xe4>)
   83ee8:	4638      	mov	r0, r7
   83eea:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83eec:	1c63      	adds	r3, r4, #1
   83eee:	b2dc      	uxtb	r4, r3
   83ef0:	882a      	ldrh	r2, [r5, #0]
   83ef2:	42a2      	cmp	r2, r4
   83ef4:	d8f8      	bhi.n	83ee8 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ef6:	204c      	movs	r0, #76	; 0x4c
   83ef8:	4c07      	ldr	r4, [pc, #28]	; (83f18 <XMEGANVM_EraseMemory+0xe4>)
   83efa:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83efc:	200a      	movs	r0, #10
   83efe:	4d07      	ldr	r5, [pc, #28]	; (83f1c <XMEGANVM_EraseMemory+0xe8>)
   83f00:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83f02:	2030      	movs	r0, #48	; 0x30
   83f04:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83f06:	204c      	movs	r0, #76	; 0x4c
   83f08:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83f0a:	200b      	movs	r0, #11
   83f0c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83f0e:	2001      	movs	r0, #1
   83f10:	47a0      	blx	r4
   83f12:	e7a9      	b.n	83e68 <XMEGANVM_EraseMemory+0x34>
   83f14:	00083b8d 	.word	0x00083b8d
   83f18:	000843b5 	.word	0x000843b5
   83f1c:	00083b49 	.word	0x00083b49
   83f20:	00083b29 	.word	0x00083b29
   83f24:	00083b61 	.word	0x00083b61
   83f28:	200005b0 	.word	0x200005b0

00083f2c <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83f2c:	b570      	push	{r4, r5, r6, lr}
   83f2e:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83f30:	4b8f      	ldr	r3, [pc, #572]	; (84170 <XPROGProtocol_Command+0x244>)
   83f32:	8859      	ldrh	r1, [r3, #2]
   83f34:	b2cb      	uxtb	r3, r1
   83f36:	4a8f      	ldr	r2, [pc, #572]	; (84174 <XPROGProtocol_Command+0x248>)
   83f38:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83f3a:	3b01      	subs	r3, #1
   83f3c:	2b21      	cmp	r3, #33	; 0x21
   83f3e:	d82b      	bhi.n	83f98 <XPROGProtocol_Command+0x6c>
   83f40:	e8df f013 	tbh	[pc, r3, lsl #1]
   83f44:	002f0022 	.word	0x002f0022
   83f48:	00730037 	.word	0x00730037
   83f4c:	00e600c2 	.word	0x00e600c2
   83f50:	002a00e9 	.word	0x002a00e9
   83f54:	002a002a 	.word	0x002a002a
   83f58:	002a002a 	.word	0x002a002a
   83f5c:	002a002a 	.word	0x002a002a
   83f60:	002a002a 	.word	0x002a002a
   83f64:	002a002a 	.word	0x002a002a
   83f68:	002a002a 	.word	0x002a002a
   83f6c:	002a002a 	.word	0x002a002a
   83f70:	002a002a 	.word	0x002a002a
   83f74:	002a002a 	.word	0x002a002a
   83f78:	002a002a 	.word	0x002a002a
   83f7c:	002a002a 	.word	0x002a002a
   83f80:	017c002a 	.word	0x017c002a
   83f84:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83f88:	4b7b      	ldr	r3, [pc, #492]	; (84178 <XPROGProtocol_Command+0x24c>)
   83f8a:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83f8c:	4b7b      	ldr	r3, [pc, #492]	; (8417c <XPROGProtocol_Command+0x250>)
   83f8e:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83f90:	f080 0001 	eor.w	r0, r0, #1
   83f94:	4b7a      	ldr	r3, [pc, #488]	; (84180 <XPROGProtocol_Command+0x254>)
   83f96:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83f98:	4b7a      	ldr	r3, [pc, #488]	; (84184 <XPROGProtocol_Command+0x258>)
   83f9a:	4798      	blx	r3
	return false;
   83f9c:	2000      	movs	r0, #0
}
   83f9e:	b004      	add	sp, #16
   83fa0:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83fa2:	4b75      	ldr	r3, [pc, #468]	; (84178 <XPROGProtocol_Command+0x24c>)
   83fa4:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83fa6:	4b78      	ldr	r3, [pc, #480]	; (84188 <XPROGProtocol_Command+0x25c>)
   83fa8:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83faa:	4b75      	ldr	r3, [pc, #468]	; (84180 <XPROGProtocol_Command+0x254>)
   83fac:	2200      	movs	r2, #0
   83fae:	701a      	strb	r2, [r3, #0]
}
   83fb0:	e7f2      	b.n	83f98 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83fb2:	4b71      	ldr	r3, [pc, #452]	; (84178 <XPROGProtocol_Command+0x24c>)
   83fb4:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83fb6:	4b72      	ldr	r3, [pc, #456]	; (84180 <XPROGProtocol_Command+0x254>)
   83fb8:	2200      	movs	r2, #0
   83fba:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83fbc:	4b6c      	ldr	r3, [pc, #432]	; (84170 <XPROGProtocol_Command+0x244>)
   83fbe:	899b      	ldrh	r3, [r3, #12]
   83fc0:	2b04      	cmp	r3, #4
   83fc2:	d915      	bls.n	83ff0 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83fc4:	4b6a      	ldr	r3, [pc, #424]	; (84170 <XPROGProtocol_Command+0x244>)
   83fc6:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83fc8:	791a      	ldrb	r2, [r3, #4]
   83fca:	78d9      	ldrb	r1, [r3, #3]
   83fcc:	0409      	lsls	r1, r1, #16
   83fce:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83fd2:	785a      	ldrb	r2, [r3, #1]
   83fd4:	4311      	orrs	r1, r2
   83fd6:	789a      	ldrb	r2, [r3, #2]
   83fd8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83fdc:	781b      	ldrb	r3, [r3, #0]
   83fde:	3b01      	subs	r3, #1
   83fe0:	2b07      	cmp	r3, #7
   83fe2:	d81e      	bhi.n	84022 <XPROGProtocol_Command+0xf6>
   83fe4:	e8df f003 	tbb	[pc, r3]
   83fe8:	1311081f 	.word	0x1311081f
   83fec:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   83ff0:	4b63      	ldr	r3, [pc, #396]	; (84180 <XPROGProtocol_Command+0x254>)
   83ff2:	2201      	movs	r2, #1
   83ff4:	701a      	strb	r2, [r3, #0]
		return;
   83ff6:	e7cf      	b.n	83f98 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83ff8:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83ffa:	4b64      	ldr	r3, [pc, #400]	; (8418c <XPROGProtocol_Command+0x260>)
   83ffc:	4798      	blx	r3
   83ffe:	2800      	cmp	r0, #0
   84000:	d1ca      	bne.n	83f98 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   84002:	4b5f      	ldr	r3, [pc, #380]	; (84180 <XPROGProtocol_Command+0x254>)
   84004:	2203      	movs	r2, #3
   84006:	701a      	strb	r2, [r3, #0]
   84008:	e7c6      	b.n	83f98 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   8400a:	2068      	movs	r0, #104	; 0x68
		break;
   8400c:	e7f5      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   8400e:	2030      	movs	r0, #48	; 0x30
		break;
   84010:	e7f3      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   84012:	2022      	movs	r0, #34	; 0x22
		break;
   84014:	e7f1      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   84016:	202a      	movs	r0, #42	; 0x2a
		break;
   84018:	e7ef      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   8401a:	2032      	movs	r0, #50	; 0x32
		break;
   8401c:	e7ed      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   8401e:	2018      	movs	r0, #24
		break;
   84020:	e7eb      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   84022:	2000      	movs	r0, #0
		break;
   84024:	e7e9      	b.n	83ffa <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   84026:	2040      	movs	r0, #64	; 0x40
   84028:	e7e7      	b.n	83ffa <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   8402a:	4b53      	ldr	r3, [pc, #332]	; (84178 <XPROGProtocol_Command+0x24c>)
   8402c:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   8402e:	4b54      	ldr	r3, [pc, #336]	; (84180 <XPROGProtocol_Command+0x254>)
   84030:	2200      	movs	r2, #0
   84032:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   84034:	4b4e      	ldr	r3, [pc, #312]	; (84170 <XPROGProtocol_Command+0x244>)
   84036:	88db      	ldrh	r3, [r3, #6]
   84038:	2b07      	cmp	r3, #7
   8403a:	d802      	bhi.n	84042 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   8403c:	4b50      	ldr	r3, [pc, #320]	; (84180 <XPROGProtocol_Command+0x254>)
   8403e:	2201      	movs	r2, #1
   84040:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   84042:	4b4b      	ldr	r3, [pc, #300]	; (84170 <XPROGProtocol_Command+0x244>)
   84044:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   84046:	795a      	ldrb	r2, [r3, #5]
   84048:	7919      	ldrb	r1, [r3, #4]
   8404a:	0409      	lsls	r1, r1, #16
   8404c:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   84050:	789a      	ldrb	r2, [r3, #2]
   84052:	4311      	orrs	r1, r2
   84054:	78da      	ldrb	r2, [r3, #3]
   84056:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   8405a:	781a      	ldrb	r2, [r3, #0]
   8405c:	3a01      	subs	r2, #1
   8405e:	2a05      	cmp	r2, #5
   84060:	d82e      	bhi.n	840c0 <XPROGProtocol_Command+0x194>
   84062:	e8df f012 	tbh	[pc, r2, lsl #1]
   84066:	00fd      	.short	0x00fd
   84068:	0101000e 	.word	0x0101000e
   8406c:	00060105 	.word	0x00060105
   84070:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   84072:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   84074:	4b46      	ldr	r3, [pc, #280]	; (84190 <XPROGProtocol_Command+0x264>)
   84076:	781a      	ldrb	r2, [r3, #0]
   84078:	4b46      	ldr	r3, [pc, #280]	; (84194 <XPROGProtocol_Command+0x268>)
   8407a:	4798      	blx	r3
   8407c:	2800      	cmp	r0, #0
   8407e:	d18b      	bne.n	83f98 <XPROGProtocol_Command+0x6c>
   84080:	e016      	b.n	840b0 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   84082:	2526      	movs	r5, #38	; 0x26
   84084:	2023      	movs	r0, #35	; 0x23
   84086:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   84088:	79de      	ldrb	r6, [r3, #7]
   8408a:	799c      	ldrb	r4, [r3, #6]
   8408c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   84090:	785b      	ldrb	r3, [r3, #1]
   84092:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   84096:	bf28      	it	cs
   84098:	f44f 7480 	movcs.w	r4, #256	; 0x100
   8409c:	9402      	str	r4, [sp, #8]
   8409e:	4c3c      	ldr	r4, [pc, #240]	; (84190 <XPROGProtocol_Command+0x264>)
   840a0:	9401      	str	r4, [sp, #4]
   840a2:	9100      	str	r1, [sp, #0]
   840a4:	4629      	mov	r1, r5
   840a6:	4c3c      	ldr	r4, [pc, #240]	; (84198 <XPROGProtocol_Command+0x26c>)
   840a8:	47a0      	blx	r4
   840aa:	2800      	cmp	r0, #0
   840ac:	f47f af74 	bne.w	83f98 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   840b0:	4b33      	ldr	r3, [pc, #204]	; (84180 <XPROGProtocol_Command+0x254>)
   840b2:	2203      	movs	r2, #3
   840b4:	701a      	strb	r2, [r3, #0]
   840b6:	e76f      	b.n	83f98 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   840b8:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   840ba:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   840bc:	221a      	movs	r2, #26
		break;
   840be:	e7e3      	b.n	84088 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   840c0:	222e      	movs	r2, #46	; 0x2e
   840c2:	2526      	movs	r5, #38	; 0x26
   840c4:	2023      	movs	r0, #35	; 0x23
   840c6:	e7df      	b.n	84088 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   840c8:	4b2b      	ldr	r3, [pc, #172]	; (84178 <XPROGProtocol_Command+0x24c>)
   840ca:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   840cc:	4b2c      	ldr	r3, [pc, #176]	; (84180 <XPROGProtocol_Command+0x254>)
   840ce:	2200      	movs	r2, #0
   840d0:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840d2:	4b27      	ldr	r3, [pc, #156]	; (84170 <XPROGProtocol_Command+0x244>)
   840d4:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   840d6:	798b      	ldrb	r3, [r1, #6]
   840d8:	794a      	ldrb	r2, [r1, #5]
   840da:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   840de:	7908      	ldrb	r0, [r1, #4]
   840e0:	78cb      	ldrb	r3, [r1, #3]
   840e2:	041b      	lsls	r3, r3, #16
   840e4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   840e8:	7848      	ldrb	r0, [r1, #1]
   840ea:	4303      	orrs	r3, r0
   840ec:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   840ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   840f2:	bf28      	it	cs
   840f4:	f44f 7280 	movcs.w	r2, #256	; 0x100
   840f8:	4925      	ldr	r1, [pc, #148]	; (84190 <XPROGProtocol_Command+0x264>)
   840fa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   840fe:	4b27      	ldr	r3, [pc, #156]	; (8419c <XPROGProtocol_Command+0x270>)
   84100:	4798      	blx	r3
   84102:	2800      	cmp	r0, #0
   84104:	f47f af48 	bne.w	83f98 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   84108:	4b1d      	ldr	r3, [pc, #116]	; (84180 <XPROGProtocol_Command+0x254>)
   8410a:	2203      	movs	r2, #3
   8410c:	701a      	strb	r2, [r3, #0]
   8410e:	e743      	b.n	83f98 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   84110:	4b19      	ldr	r3, [pc, #100]	; (84178 <XPROGProtocol_Command+0x24c>)
   84112:	4798      	blx	r3
			break;
   84114:	e740      	b.n	83f98 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   84116:	4b18      	ldr	r3, [pc, #96]	; (84178 <XPROGProtocol_Command+0x24c>)
   84118:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   8411a:	4b19      	ldr	r3, [pc, #100]	; (84180 <XPROGProtocol_Command+0x254>)
   8411c:	2200      	movs	r2, #0
   8411e:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   84120:	4b13      	ldr	r3, [pc, #76]	; (84170 <XPROGProtocol_Command+0x244>)
   84122:	8999      	ldrh	r1, [r3, #12]
   84124:	2901      	cmp	r1, #1
   84126:	d90b      	bls.n	84140 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   84128:	4b11      	ldr	r3, [pc, #68]	; (84170 <XPROGProtocol_Command+0x244>)
   8412a:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   8412c:	7813      	ldrb	r3, [r2, #0]
   8412e:	3b01      	subs	r3, #1
   84130:	2b07      	cmp	r3, #7
   84132:	d85f      	bhi.n	841f4 <XPROGProtocol_Command+0x2c8>
   84134:	e8df f003 	tbb	[pc, r3]
   84138:	47433608 	.word	0x47433608
   8413c:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   84140:	4b0f      	ldr	r3, [pc, #60]	; (84180 <XPROGProtocol_Command+0x254>)
   84142:	2201      	movs	r2, #1
   84144:	701a      	strb	r2, [r3, #0]
		return;
   84146:	e727      	b.n	83f98 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   84148:	2904      	cmp	r1, #4
   8414a:	d90c      	bls.n	84166 <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8414c:	7911      	ldrb	r1, [r2, #4]
   8414e:	78d3      	ldrb	r3, [r2, #3]
   84150:	041b      	lsls	r3, r3, #16
   84152:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   84156:	7851      	ldrb	r1, [r2, #1]
   84158:	430b      	orrs	r3, r1
   8415a:	7892      	ldrb	r2, [r2, #2]
   8415c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   84160:	4a0f      	ldr	r2, [pc, #60]	; (841a0 <XPROGProtocol_Command+0x274>)
   84162:	6013      	str	r3, [r2, #0]
			break;
   84164:	e718      	b.n	83f98 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   84166:	4b06      	ldr	r3, [pc, #24]	; (84180 <XPROGProtocol_Command+0x254>)
   84168:	2201      	movs	r2, #1
   8416a:	701a      	strb	r2, [r3, #0]
				return;
   8416c:	e714      	b.n	83f98 <XPROGProtocol_Command+0x6c>
   8416e:	bf00      	nop
   84170:	20002df4 	.word	0x20002df4
   84174:	2000217c 	.word	0x2000217c
   84178:	000835a1 	.word	0x000835a1
   8417c:	00083bc9 	.word	0x00083bc9
   84180:	20002ddc 	.word	0x20002ddc
   84184:	000835e9 	.word	0x000835e9
   84188:	00083c45 	.word	0x00083c45
   8418c:	00083e35 	.word	0x00083e35
   84190:	20002180 	.word	0x20002180
   84194:	00083d15 	.word	0x00083d15
   84198:	00083d5d 	.word	0x00083d5d
   8419c:	00083c81 	.word	0x00083c81
   841a0:	200005b4 	.word	0x200005b4
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   841a4:	2902      	cmp	r1, #2
   841a6:	d906      	bls.n	841b6 <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   841a8:	7891      	ldrb	r1, [r2, #2]
   841aa:	7853      	ldrb	r3, [r2, #1]
   841ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   841b0:	4a30      	ldr	r2, [pc, #192]	; (84274 <XPROGProtocol_Command+0x348>)
   841b2:	8013      	strh	r3, [r2, #0]
			break;
   841b4:	e6f0      	b.n	83f98 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   841b6:	4b30      	ldr	r3, [pc, #192]	; (84278 <XPROGProtocol_Command+0x34c>)
   841b8:	2201      	movs	r2, #1
   841ba:	701a      	strb	r2, [r3, #0]
				return;
   841bc:	e6ec      	b.n	83f98 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   841be:	7852      	ldrb	r2, [r2, #1]
   841c0:	4b2e      	ldr	r3, [pc, #184]	; (8427c <XPROGProtocol_Command+0x350>)
   841c2:	701a      	strb	r2, [r3, #0]
			break;
   841c4:	e6e8      	b.n	83f98 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   841c6:	7852      	ldrb	r2, [r2, #1]
   841c8:	4b2d      	ldr	r3, [pc, #180]	; (84280 <XPROGProtocol_Command+0x354>)
   841ca:	701a      	strb	r2, [r3, #0]
			break;
   841cc:	e6e4      	b.n	83f98 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   841ce:	2904      	cmp	r1, #4
   841d0:	d803      	bhi.n	841da <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   841d2:	4b29      	ldr	r3, [pc, #164]	; (84278 <XPROGProtocol_Command+0x34c>)
   841d4:	2201      	movs	r2, #1
   841d6:	701a      	strb	r2, [r3, #0]
				return;
   841d8:	e6de      	b.n	83f98 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   841da:	7911      	ldrb	r1, [r2, #4]
   841dc:	78d3      	ldrb	r3, [r2, #3]
   841de:	041b      	lsls	r3, r3, #16
   841e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   841e4:	7851      	ldrb	r1, [r2, #1]
   841e6:	430b      	orrs	r3, r1
   841e8:	7890      	ldrb	r0, [r2, #2]
   841ea:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   841ee:	4b25      	ldr	r3, [pc, #148]	; (84284 <XPROGProtocol_Command+0x358>)
   841f0:	4798      	blx	r3
			break;
   841f2:	e6d1      	b.n	83f98 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   841f4:	4b20      	ldr	r3, [pc, #128]	; (84278 <XPROGProtocol_Command+0x34c>)
   841f6:	2201      	movs	r2, #1
   841f8:	701a      	strb	r2, [r3, #0]
			break;
   841fa:	e6cd      	b.n	83f98 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   841fc:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   841fe:	4b22      	ldr	r3, [pc, #136]	; (84288 <XPROGProtocol_Command+0x35c>)
   84200:	88db      	ldrh	r3, [r3, #6]
   84202:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   84206:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   8420a:	dc27      	bgt.n	8425c <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   8420c:	491e      	ldr	r1, [pc, #120]	; (84288 <XPROGProtocol_Command+0x35c>)
   8420e:	4a1f      	ldr	r2, [pc, #124]	; (8428c <XPROGProtocol_Command+0x360>)
   84210:	4402      	add	r2, r0
   84212:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84214:	818b      	strh	r3, [r1, #12]
			return true;
   84216:	2001      	movs	r0, #1
   84218:	e6c1      	b.n	83f9e <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8421a:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8421c:	4b1a      	ldr	r3, [pc, #104]	; (84288 <XPROGProtocol_Command+0x35c>)
   8421e:	88da      	ldrh	r2, [r3, #6]
   84220:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   84224:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   84228:	dd01      	ble.n	8422e <XPROGProtocol_Command+0x302>
				return false;
   8422a:	2000      	movs	r0, #0
   8422c:	e6b7      	b.n	83f9e <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8422e:	6899      	ldr	r1, [r3, #8]
   84230:	4b16      	ldr	r3, [pc, #88]	; (8428c <XPROGProtocol_Command+0x360>)
   84232:	4418      	add	r0, r3
   84234:	4b16      	ldr	r3, [pc, #88]	; (84290 <XPROGProtocol_Command+0x364>)
   84236:	4798      	blx	r3
			return true;
   84238:	2001      	movs	r0, #1
   8423a:	e6b0      	b.n	83f9e <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   8423c:	4a15      	ldr	r2, [pc, #84]	; (84294 <XPROGProtocol_Command+0x368>)
   8423e:	4b0e      	ldr	r3, [pc, #56]	; (84278 <XPROGProtocol_Command+0x34c>)
   84240:	781b      	ldrb	r3, [r3, #0]
   84242:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   84244:	4b14      	ldr	r3, [pc, #80]	; (84298 <XPROGProtocol_Command+0x36c>)
   84246:	681b      	ldr	r3, [r3, #0]
   84248:	fab3 f383 	clz	r3, r3
   8424c:	095b      	lsrs	r3, r3, #5
   8424e:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   84250:	4b0d      	ldr	r3, [pc, #52]	; (84288 <XPROGProtocol_Command+0x35c>)
   84252:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   84254:	2203      	movs	r2, #3
   84256:	819a      	strh	r2, [r3, #12]
			return true;
   84258:	2001      	movs	r0, #1
   8425a:	e6a0      	b.n	83f9e <XPROGProtocol_Command+0x72>
				return false;
   8425c:	2000      	movs	r0, #0
   8425e:	e69e      	b.n	83f9e <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   84260:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   84262:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   84264:	2224      	movs	r2, #36	; 0x24
   84266:	e70f      	b.n	84088 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   84268:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   8426a:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   8426c:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8426e:	e70b      	b.n	84088 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   84270:	204c      	movs	r0, #76	; 0x4c
   84272:	e6ff      	b.n	84074 <XPROGProtocol_Command+0x148>
   84274:	200005b0 	.word	0x200005b0
   84278:	20002ddc 	.word	0x20002ddc
   8427c:	200005b8 	.word	0x200005b8
   84280:	200005b9 	.word	0x200005b9
   84284:	00083531 	.word	0x00083531
   84288:	20002df4 	.word	0x20002df4
   8428c:	20002180 	.word	0x20002180
   84290:	000878dd 	.word	0x000878dd
   84294:	2000217c 	.word	0x2000217c
   84298:	20002664 	.word	0x20002664

0008429c <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   8429c:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   8429e:	4d0b      	ldr	r5, [pc, #44]	; (842cc <XPROGTarget_SetRxMode+0x30>)
   842a0:	4c0b      	ldr	r4, [pc, #44]	; (842d0 <XPROGTarget_SetRxMode+0x34>)
   842a2:	4628      	mov	r0, r5
   842a4:	47a0      	blx	r4
   842a6:	2800      	cmp	r0, #0
   842a8:	d0fb      	beq.n	842a2 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   842aa:	4c08      	ldr	r4, [pc, #32]	; (842cc <XPROGTarget_SetRxMode+0x30>)
   842ac:	4620      	mov	r0, r4
   842ae:	4b09      	ldr	r3, [pc, #36]	; (842d4 <XPROGTarget_SetRxMode+0x38>)
   842b0:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   842b2:	4620      	mov	r0, r4
   842b4:	4b08      	ldr	r3, [pc, #32]	; (842d8 <XPROGTarget_SetRxMode+0x3c>)
   842b6:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   842b8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   842bc:	2014      	movs	r0, #20
   842be:	4b07      	ldr	r3, [pc, #28]	; (842dc <XPROGTarget_SetRxMode+0x40>)
   842c0:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   842c2:	4b07      	ldr	r3, [pc, #28]	; (842e0 <XPROGTarget_SetRxMode+0x44>)
   842c4:	2200      	movs	r2, #0
   842c6:	701a      	strb	r2, [r3, #0]
}
   842c8:	bd38      	pop	{r3, r4, r5, pc}
   842ca:	bf00      	nop
   842cc:	40094000 	.word	0x40094000
   842d0:	00086ea9 	.word	0x00086ea9
   842d4:	00086e6b 	.word	0x00086e6b
   842d8:	00086e75 	.word	0x00086e75
   842dc:	00085215 	.word	0x00085215
   842e0:	20002280 	.word	0x20002280

000842e4 <XPROGTarget_SetTxMode>:
{
   842e4:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842e6:	2518      	movs	r5, #24
   842e8:	4c14      	ldr	r4, [pc, #80]	; (8433c <XPROGTarget_SetTxMode+0x58>)
   842ea:	4e15      	ldr	r6, [pc, #84]	; (84340 <XPROGTarget_SetTxMode+0x5c>)
   842ec:	4628      	mov	r0, r5
   842ee:	47a0      	blx	r4
   842f0:	b110      	cbz	r0, 842f8 <XPROGTarget_SetTxMode+0x14>
   842f2:	6833      	ldr	r3, [r6, #0]
   842f4:	2b00      	cmp	r3, #0
   842f6:	d1f9      	bne.n	842ec <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   842f8:	2518      	movs	r5, #24
   842fa:	4c10      	ldr	r4, [pc, #64]	; (8433c <XPROGTarget_SetTxMode+0x58>)
   842fc:	4e10      	ldr	r6, [pc, #64]	; (84340 <XPROGTarget_SetTxMode+0x5c>)
   842fe:	4628      	mov	r0, r5
   84300:	47a0      	blx	r4
   84302:	b910      	cbnz	r0, 8430a <XPROGTarget_SetTxMode+0x26>
   84304:	6833      	ldr	r3, [r6, #0]
   84306:	2b00      	cmp	r3, #0
   84308:	d1f9      	bne.n	842fe <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8430a:	2518      	movs	r5, #24
   8430c:	4c0b      	ldr	r4, [pc, #44]	; (8433c <XPROGTarget_SetTxMode+0x58>)
   8430e:	4e0c      	ldr	r6, [pc, #48]	; (84340 <XPROGTarget_SetTxMode+0x5c>)
   84310:	4628      	mov	r0, r5
   84312:	47a0      	blx	r4
   84314:	b110      	cbz	r0, 8431c <XPROGTarget_SetTxMode+0x38>
   84316:	6833      	ldr	r3, [r6, #0]
   84318:	2b00      	cmp	r3, #0
   8431a:	d1f9      	bne.n	84310 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   8431c:	4c09      	ldr	r4, [pc, #36]	; (84344 <XPROGTarget_SetTxMode+0x60>)
   8431e:	4620      	mov	r0, r4
   84320:	4b09      	ldr	r3, [pc, #36]	; (84348 <XPROGTarget_SetTxMode+0x64>)
   84322:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   84324:	4620      	mov	r0, r4
   84326:	4b09      	ldr	r3, [pc, #36]	; (8434c <XPROGTarget_SetTxMode+0x68>)
   84328:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   8432a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8432e:	2014      	movs	r0, #20
   84330:	4b07      	ldr	r3, [pc, #28]	; (84350 <XPROGTarget_SetTxMode+0x6c>)
   84332:	4798      	blx	r3
	IsSending = true;
   84334:	4b07      	ldr	r3, [pc, #28]	; (84354 <XPROGTarget_SetTxMode+0x70>)
   84336:	2201      	movs	r2, #1
   84338:	701a      	strb	r2, [r3, #0]
}
   8433a:	bd70      	pop	{r4, r5, r6, pc}
   8433c:	000851c3 	.word	0x000851c3
   84340:	20002664 	.word	0x20002664
   84344:	40094000 	.word	0x40094000
   84348:	00086e7b 	.word	0x00086e7b
   8434c:	00086e65 	.word	0x00086e65
   84350:	00085215 	.word	0x00085215
   84354:	20002280 	.word	0x20002280

00084358 <XPROGTarget_DisableTargetPDI>:
{
   84358:	b510      	push	{r4, lr}
	if (IsSending)
   8435a:	4b0f      	ldr	r3, [pc, #60]	; (84398 <XPROGTarget_DisableTargetPDI+0x40>)
   8435c:	781b      	ldrb	r3, [r3, #0]
   8435e:	b9bb      	cbnz	r3, 84390 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   84360:	4c0e      	ldr	r4, [pc, #56]	; (8439c <XPROGTarget_DisableTargetPDI+0x44>)
   84362:	4620      	mov	r0, r4
   84364:	4b0e      	ldr	r3, [pc, #56]	; (843a0 <XPROGTarget_DisableTargetPDI+0x48>)
   84366:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   84368:	4620      	mov	r0, r4
   8436a:	4b0e      	ldr	r3, [pc, #56]	; (843a4 <XPROGTarget_DisableTargetPDI+0x4c>)
   8436c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   8436e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84372:	2018      	movs	r0, #24
   84374:	4c0c      	ldr	r4, [pc, #48]	; (843a8 <XPROGTarget_DisableTargetPDI+0x50>)
   84376:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   84378:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8437c:	2015      	movs	r0, #21
   8437e:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84380:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84384:	2014      	movs	r0, #20
   84386:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   84388:	200e      	movs	r0, #14
   8438a:	4b08      	ldr	r3, [pc, #32]	; (843ac <XPROGTarget_DisableTargetPDI+0x54>)
   8438c:	4798      	blx	r3
}
   8438e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   84390:	4b07      	ldr	r3, [pc, #28]	; (843b0 <XPROGTarget_DisableTargetPDI+0x58>)
   84392:	4798      	blx	r3
   84394:	e7e4      	b.n	84360 <XPROGTarget_DisableTargetPDI+0x8>
   84396:	bf00      	nop
   84398:	20002280 	.word	0x20002280
   8439c:	40094000 	.word	0x40094000
   843a0:	00086e7b 	.word	0x00086e7b
   843a4:	00086e6b 	.word	0x00086e6b
   843a8:	00085215 	.word	0x00085215
   843ac:	0008558d 	.word	0x0008558d
   843b0:	0008429d 	.word	0x0008429d

000843b4 <XPROGTarget_SendByte>:
{
   843b4:	b510      	push	{r4, lr}
   843b6:	4604      	mov	r4, r0
	if (!(IsSending))
   843b8:	4b05      	ldr	r3, [pc, #20]	; (843d0 <XPROGTarget_SendByte+0x1c>)
   843ba:	781b      	ldrb	r3, [r3, #0]
   843bc:	b123      	cbz	r3, 843c8 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   843be:	4621      	mov	r1, r4
   843c0:	4804      	ldr	r0, [pc, #16]	; (843d4 <XPROGTarget_SendByte+0x20>)
   843c2:	4b05      	ldr	r3, [pc, #20]	; (843d8 <XPROGTarget_SendByte+0x24>)
   843c4:	4798      	blx	r3
}
   843c6:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   843c8:	4b04      	ldr	r3, [pc, #16]	; (843dc <XPROGTarget_SendByte+0x28>)
   843ca:	4798      	blx	r3
   843cc:	e7f7      	b.n	843be <XPROGTarget_SendByte+0xa>
   843ce:	bf00      	nop
   843d0:	20002280 	.word	0x20002280
   843d4:	40094000 	.word	0x40094000
   843d8:	00086ec5 	.word	0x00086ec5
   843dc:	000842e5 	.word	0x000842e5

000843e0 <XPROGTarget_ReceiveByte>:
{
   843e0:	b570      	push	{r4, r5, r6, lr}
   843e2:	b082      	sub	sp, #8
	if (IsSending)
   843e4:	4b0a      	ldr	r3, [pc, #40]	; (84410 <XPROGTarget_ReceiveByte+0x30>)
   843e6:	781b      	ldrb	r3, [r3, #0]
   843e8:	b973      	cbnz	r3, 84408 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   843ea:	4d0a      	ldr	r5, [pc, #40]	; (84414 <XPROGTarget_ReceiveByte+0x34>)
   843ec:	4c0a      	ldr	r4, [pc, #40]	; (84418 <XPROGTarget_ReceiveByte+0x38>)
   843ee:	4e0b      	ldr	r6, [pc, #44]	; (8441c <XPROGTarget_ReceiveByte+0x3c>)
   843f0:	a901      	add	r1, sp, #4
   843f2:	4628      	mov	r0, r5
   843f4:	47a0      	blx	r4
   843f6:	2801      	cmp	r0, #1
   843f8:	d102      	bne.n	84400 <XPROGTarget_ReceiveByte+0x20>
   843fa:	6833      	ldr	r3, [r6, #0]
   843fc:	2b00      	cmp	r3, #0
   843fe:	d1f7      	bne.n	843f0 <XPROGTarget_ReceiveByte+0x10>
}
   84400:	f89d 0004 	ldrb.w	r0, [sp, #4]
   84404:	b002      	add	sp, #8
   84406:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   84408:	4b05      	ldr	r3, [pc, #20]	; (84420 <XPROGTarget_ReceiveByte+0x40>)
   8440a:	4798      	blx	r3
   8440c:	e7ed      	b.n	843ea <XPROGTarget_ReceiveByte+0xa>
   8440e:	bf00      	nop
   84410:	20002280 	.word	0x20002280
   84414:	40094000 	.word	0x40094000
   84418:	00086ed7 	.word	0x00086ed7
   8441c:	20002664 	.word	0x20002664
   84420:	0008429d 	.word	0x0008429d

00084424 <XPROGTarget_SendIdle>:
{
   84424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   84426:	4b12      	ldr	r3, [pc, #72]	; (84470 <XPROGTarget_SendIdle+0x4c>)
   84428:	781b      	ldrb	r3, [r3, #0]
   8442a:	b123      	cbz	r3, 84436 <XPROGTarget_SendIdle+0x12>
{
   8442c:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8442e:	2518      	movs	r5, #24
   84430:	4c10      	ldr	r4, [pc, #64]	; (84474 <XPROGTarget_SendIdle+0x50>)
   84432:	4e11      	ldr	r6, [pc, #68]	; (84478 <XPROGTarget_SendIdle+0x54>)
   84434:	e006      	b.n	84444 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   84436:	4b11      	ldr	r3, [pc, #68]	; (8447c <XPROGTarget_SendIdle+0x58>)
   84438:	4798      	blx	r3
   8443a:	e7f7      	b.n	8442c <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   8443c:	3f01      	subs	r7, #1
   8443e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   84442:	d013      	beq.n	8446c <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84444:	4628      	mov	r0, r5
   84446:	47a0      	blx	r4
   84448:	b110      	cbz	r0, 84450 <XPROGTarget_SendIdle+0x2c>
   8444a:	6833      	ldr	r3, [r6, #0]
   8444c:	2b00      	cmp	r3, #0
   8444e:	d1f9      	bne.n	84444 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84450:	4628      	mov	r0, r5
   84452:	47a0      	blx	r4
   84454:	b910      	cbnz	r0, 8445c <XPROGTarget_SendIdle+0x38>
   84456:	6833      	ldr	r3, [r6, #0]
   84458:	2b00      	cmp	r3, #0
   8445a:	d1f9      	bne.n	84450 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8445c:	4628      	mov	r0, r5
   8445e:	47a0      	blx	r4
   84460:	2800      	cmp	r0, #0
   84462:	d0eb      	beq.n	8443c <XPROGTarget_SendIdle+0x18>
   84464:	6833      	ldr	r3, [r6, #0]
   84466:	2b00      	cmp	r3, #0
   84468:	d1f8      	bne.n	8445c <XPROGTarget_SendIdle+0x38>
   8446a:	e7e7      	b.n	8443c <XPROGTarget_SendIdle+0x18>
}
   8446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8446e:	bf00      	nop
   84470:	20002280 	.word	0x20002280
   84474:	000851c3 	.word	0x000851c3
   84478:	20002664 	.word	0x20002664
   8447c:	000842e5 	.word	0x000842e5

00084480 <XPROGTarget_EnableTargetPDI>:
{
   84480:	b570      	push	{r4, r5, r6, lr}
   84482:	b086      	sub	sp, #24
	IsSending = false;
   84484:	2500      	movs	r5, #0
   84486:	4b19      	ldr	r3, [pc, #100]	; (844ec <XPROGTarget_EnableTargetPDI+0x6c>)
   84488:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   8448a:	200e      	movs	r0, #14
   8448c:	4b18      	ldr	r3, [pc, #96]	; (844f0 <XPROGTarget_EnableTargetPDI+0x70>)
   8448e:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   84490:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84494:	2014      	movs	r0, #20
   84496:	4c17      	ldr	r4, [pc, #92]	; (844f4 <XPROGTarget_EnableTargetPDI+0x74>)
   84498:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8449a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8449e:	2015      	movs	r0, #21
   844a0:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   844a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   844a6:	2018      	movs	r0, #24
   844a8:	47a0      	blx	r4
	delay_us(50);
   844aa:	f240 1057 	movw	r0, #343	; 0x157
   844ae:	4e12      	ldr	r6, [pc, #72]	; (844f8 <XPROGTarget_EnableTargetPDI+0x78>)
   844b0:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   844b2:	2014      	movs	r0, #20
   844b4:	4b11      	ldr	r3, [pc, #68]	; (844fc <XPROGTarget_EnableTargetPDI+0x7c>)
   844b6:	4798      	blx	r3
	delay_us(10);
   844b8:	2045      	movs	r0, #69	; 0x45
   844ba:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   844bc:	9502      	str	r5, [sp, #8]
   844be:	9504      	str	r5, [sp, #16]
   844c0:	9505      	str	r5, [sp, #20]
   844c2:	4b0f      	ldr	r3, [pc, #60]	; (84500 <XPROGTarget_EnableTargetPDI+0x80>)
   844c4:	9300      	str	r3, [sp, #0]
   844c6:	23c0      	movs	r3, #192	; 0xc0
   844c8:	9301      	str	r3, [sp, #4]
   844ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   844ce:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   844d0:	4a0c      	ldr	r2, [pc, #48]	; (84504 <XPROGTarget_EnableTargetPDI+0x84>)
   844d2:	4669      	mov	r1, sp
   844d4:	480c      	ldr	r0, [pc, #48]	; (84508 <XPROGTarget_EnableTargetPDI+0x88>)
   844d6:	4b0d      	ldr	r3, [pc, #52]	; (8450c <XPROGTarget_EnableTargetPDI+0x8c>)
   844d8:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   844da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   844de:	2018      	movs	r0, #24
   844e0:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   844e2:	4c0b      	ldr	r4, [pc, #44]	; (84510 <XPROGTarget_EnableTargetPDI+0x90>)
   844e4:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   844e6:	47a0      	blx	r4
}
   844e8:	b006      	add	sp, #24
   844ea:	bd70      	pop	{r4, r5, r6, pc}
   844ec:	20002280 	.word	0x20002280
   844f0:	00085559 	.word	0x00085559
   844f4:	00085215 	.word	0x00085215
   844f8:	20000089 	.word	0x20000089
   844fc:	000851df 	.word	0x000851df
   84500:	0007a120 	.word	0x0007a120
   84504:	0b71b000 	.word	0x0b71b000
   84508:	40094000 	.word	0x40094000
   8450c:	00086bc5 	.word	0x00086bc5
   84510:	00084425 	.word	0x00084425

00084514 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   84514:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   84516:	2006      	movs	r0, #6
   84518:	4c02      	ldr	r4, [pc, #8]	; (84524 <ui_init+0x10>)
   8451a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   8451c:	2007      	movs	r0, #7
   8451e:	47a0      	blx	r4
}
   84520:	bd10      	pop	{r4, pc}
   84522:	bf00      	nop
   84524:	000850a1 	.word	0x000850a1

00084528 <ui_powerdown>:

void ui_powerdown(void)
{
   84528:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   8452a:	2006      	movs	r0, #6
   8452c:	4c03      	ldr	r4, [pc, #12]	; (8453c <ui_powerdown+0x14>)
   8452e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   84530:	2007      	movs	r0, #7
   84532:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   84534:	201d      	movs	r0, #29
   84536:	4b02      	ldr	r3, [pc, #8]	; (84540 <ui_powerdown+0x18>)
   84538:	4798      	blx	r3
		
}
   8453a:	bd10      	pop	{r4, pc}
   8453c:	000850a1 	.word	0x000850a1
   84540:	000851f9 	.word	0x000851f9

00084544 <ui_wakeup>:

void ui_wakeup(void)
{
   84544:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   84546:	2006      	movs	r0, #6
   84548:	4b02      	ldr	r3, [pc, #8]	; (84554 <ui_wakeup+0x10>)
   8454a:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   8454c:	201d      	movs	r0, #29
   8454e:	4b02      	ldr	r3, [pc, #8]	; (84558 <ui_wakeup+0x14>)
   84550:	4798      	blx	r3
}
   84552:	bd08      	pop	{r3, pc}
   84554:	000850c5 	.word	0x000850c5
   84558:	000851df 	.word	0x000851df

0008455c <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   8455c:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   8455e:	4b0b      	ldr	r3, [pc, #44]	; (8458c <ui_process+0x30>)
   84560:	fba3 2300 	umull	r2, r3, r3, r0
   84564:	099b      	lsrs	r3, r3, #6
   84566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8456a:	fb02 0013 	mls	r0, r2, r3, r0
   8456e:	b280      	uxth	r0, r0
   84570:	b118      	cbz	r0, 8457a <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   84572:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   84576:	d004      	beq.n	84582 <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   84578:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   8457a:	2006      	movs	r0, #6
   8457c:	4b04      	ldr	r3, [pc, #16]	; (84590 <ui_process+0x34>)
   8457e:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   84580:	e7fa      	b.n	84578 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   84582:	2006      	movs	r0, #6
   84584:	4b03      	ldr	r3, [pc, #12]	; (84594 <ui_process+0x38>)
   84586:	4798      	blx	r3
}
   84588:	e7f6      	b.n	84578 <ui_process+0x1c>
   8458a:	bf00      	nop
   8458c:	10624dd3 	.word	0x10624dd3
   84590:	000850c5 	.word	0x000850c5
   84594:	000850a1 	.word	0x000850a1

00084598 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   84598:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8459a:	203e      	movs	r0, #62	; 0x3e
   8459c:	4b07      	ldr	r3, [pc, #28]	; (845bc <sysclk_enable_usb+0x24>)
   8459e:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   845a0:	4c07      	ldr	r4, [pc, #28]	; (845c0 <sysclk_enable_usb+0x28>)
   845a2:	47a0      	blx	r4
   845a4:	2800      	cmp	r0, #0
   845a6:	d0fc      	beq.n	845a2 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   845a8:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   845ac:	4b05      	ldr	r3, [pc, #20]	; (845c4 <sysclk_enable_usb+0x2c>)
   845ae:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   845b0:	4c05      	ldr	r4, [pc, #20]	; (845c8 <sysclk_enable_usb+0x30>)
   845b2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   845b4:	2800      	cmp	r0, #0
   845b6:	d0fc      	beq.n	845b2 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   845b8:	bd10      	pop	{r4, pc}
   845ba:	bf00      	nop
   845bc:	000854c1 	.word	0x000854c1
   845c0:	000854e9 	.word	0x000854e9
   845c4:	400e0400 	.word	0x400e0400
   845c8:	00085549 	.word	0x00085549

000845cc <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   845cc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   845ce:	4812      	ldr	r0, [pc, #72]	; (84618 <sysclk_init+0x4c>)
   845d0:	4b12      	ldr	r3, [pc, #72]	; (8461c <sysclk_init+0x50>)
   845d2:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   845d4:	203e      	movs	r0, #62	; 0x3e
   845d6:	4b12      	ldr	r3, [pc, #72]	; (84620 <sysclk_init+0x54>)
   845d8:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   845da:	4c12      	ldr	r4, [pc, #72]	; (84624 <sysclk_init+0x58>)
   845dc:	47a0      	blx	r4
   845de:	2800      	cmp	r0, #0
   845e0:	d0fc      	beq.n	845dc <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   845e2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   845e6:	4b10      	ldr	r3, [pc, #64]	; (84628 <sysclk_init+0x5c>)
   845e8:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   845ea:	4c10      	ldr	r4, [pc, #64]	; (8462c <sysclk_init+0x60>)
   845ec:	47a0      	blx	r4
   845ee:	2800      	cmp	r0, #0
   845f0:	d0fc      	beq.n	845ec <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   845f2:	4b0f      	ldr	r3, [pc, #60]	; (84630 <sysclk_init+0x64>)
   845f4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   845f6:	4a0f      	ldr	r2, [pc, #60]	; (84634 <sysclk_init+0x68>)
   845f8:	4b0f      	ldr	r3, [pc, #60]	; (84638 <sysclk_init+0x6c>)
   845fa:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   845fc:	4c0f      	ldr	r4, [pc, #60]	; (8463c <sysclk_init+0x70>)
   845fe:	47a0      	blx	r4
   84600:	2800      	cmp	r0, #0
   84602:	d0fc      	beq.n	845fe <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84604:	2010      	movs	r0, #16
   84606:	4b0e      	ldr	r3, [pc, #56]	; (84640 <sysclk_init+0x74>)
   84608:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8460a:	4b0e      	ldr	r3, [pc, #56]	; (84644 <sysclk_init+0x78>)
   8460c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8460e:	4802      	ldr	r0, [pc, #8]	; (84618 <sysclk_init+0x4c>)
   84610:	4b02      	ldr	r3, [pc, #8]	; (8461c <sysclk_init+0x50>)
   84612:	4798      	blx	r3
   84614:	bd10      	pop	{r4, pc}
   84616:	bf00      	nop
   84618:	05b8d800 	.word	0x05b8d800
   8461c:	2000013d 	.word	0x2000013d
   84620:	000854c1 	.word	0x000854c1
   84624:	000854e9 	.word	0x000854e9
   84628:	00085509 	.word	0x00085509
   8462c:	000854f9 	.word	0x000854f9
   84630:	00085529 	.word	0x00085529
   84634:	200f3f01 	.word	0x200f3f01
   84638:	400e0400 	.word	0x400e0400
   8463c:	00085539 	.word	0x00085539
   84640:	0008545d 	.word	0x0008545d
   84644:	00086ff5 	.word	0x00086ff5

00084648 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   84648:	4b01      	ldr	r3, [pc, #4]	; (84650 <udi_vendor_getsetting+0x8>)
   8464a:	7818      	ldrb	r0, [r3, #0]
   8464c:	4770      	bx	lr
   8464e:	bf00      	nop
   84650:	20002281 	.word	0x20002281

00084654 <udi_vendor_enable>:
{
   84654:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84656:	4b05      	ldr	r3, [pc, #20]	; (8466c <udi_vendor_enable+0x18>)
   84658:	4798      	blx	r3
   8465a:	78c3      	ldrb	r3, [r0, #3]
   8465c:	4a04      	ldr	r2, [pc, #16]	; (84670 <udi_vendor_enable+0x1c>)
   8465e:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   84660:	b10b      	cbz	r3, 84666 <udi_vendor_enable+0x12>
	return true;
   84662:	2001      	movs	r0, #1
}
   84664:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84666:	4b03      	ldr	r3, [pc, #12]	; (84674 <udi_vendor_enable+0x20>)
   84668:	4798      	blx	r3
   8466a:	e7fb      	b.n	84664 <udi_vendor_enable+0x10>
   8466c:	00084889 	.word	0x00084889
   84670:	20002281 	.word	0x20002281
   84674:	000830a9 	.word	0x000830a9

00084678 <udi_vendor_disable>:
{
   84678:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   8467a:	4b03      	ldr	r3, [pc, #12]	; (84688 <udi_vendor_disable+0x10>)
   8467c:	781b      	ldrb	r3, [r3, #0]
   8467e:	b103      	cbz	r3, 84682 <udi_vendor_disable+0xa>
}
   84680:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   84682:	4b02      	ldr	r3, [pc, #8]	; (8468c <udi_vendor_disable+0x14>)
   84684:	4798      	blx	r3
}
   84686:	e7fb      	b.n	84680 <udi_vendor_disable+0x8>
   84688:	20002281 	.word	0x20002281
   8468c:	000830d9 	.word	0x000830d9

00084690 <udi_vendor_setup>:
{
   84690:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   84692:	4a0c      	ldr	r2, [pc, #48]	; (846c4 <udi_vendor_setup+0x34>)
   84694:	7813      	ldrb	r3, [r2, #0]
   84696:	f992 2000 	ldrsb.w	r2, [r2]
   8469a:	2a00      	cmp	r2, #0
   8469c:	db06      	blt.n	846ac <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8469e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   846a2:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   846a4:	bf18      	it	ne
   846a6:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   846a8:	d009      	beq.n	846be <udi_vendor_setup+0x2e>
}
   846aa:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   846ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
   846b0:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   846b2:	bf18      	it	ne
   846b4:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   846b6:	d1f8      	bne.n	846aa <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   846b8:	4b03      	ldr	r3, [pc, #12]	; (846c8 <udi_vendor_setup+0x38>)
   846ba:	4798      	blx	r3
   846bc:	e7f5      	b.n	846aa <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   846be:	4b03      	ldr	r3, [pc, #12]	; (846cc <udi_vendor_setup+0x3c>)
   846c0:	4798      	blx	r3
   846c2:	e7f2      	b.n	846aa <udi_vendor_setup+0x1a>
   846c4:	20002df4 	.word	0x20002df4
   846c8:	00083241 	.word	0x00083241
   846cc:	000830e5 	.word	0x000830e5

000846d0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   846d0:	b510      	push	{r4, lr}
   846d2:	b082      	sub	sp, #8
   846d4:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   846d6:	9200      	str	r2, [sp, #0]
   846d8:	4602      	mov	r2, r0
   846da:	2100      	movs	r1, #0
   846dc:	2081      	movs	r0, #129	; 0x81
   846de:	4c02      	ldr	r4, [pc, #8]	; (846e8 <udi_vendor_bulk_in_run+0x18>)
   846e0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846e2:	b002      	add	sp, #8
   846e4:	bd10      	pop	{r4, pc}
   846e6:	bf00      	nop
   846e8:	000865f9 	.word	0x000865f9

000846ec <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   846ec:	b510      	push	{r4, lr}
   846ee:	b082      	sub	sp, #8
   846f0:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   846f2:	9200      	str	r2, [sp, #0]
   846f4:	4602      	mov	r2, r0
   846f6:	2100      	movs	r1, #0
   846f8:	2002      	movs	r0, #2
   846fa:	4c02      	ldr	r4, [pc, #8]	; (84704 <udi_vendor_bulk_out_run+0x18>)
   846fc:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   846fe:	b002      	add	sp, #8
   84700:	bd10      	pop	{r4, pc}
   84702:	bf00      	nop
   84704:	000865f9 	.word	0x000865f9

00084708 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84708:	4b0b      	ldr	r3, [pc, #44]	; (84738 <udc_next_desc_in_iface+0x30>)
   8470a:	681b      	ldr	r3, [r3, #0]
   8470c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8470e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   84710:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   84712:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84714:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   84716:	4290      	cmp	r0, r2
   84718:	d20a      	bcs.n	84730 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8471a:	7843      	ldrb	r3, [r0, #1]
   8471c:	2b04      	cmp	r3, #4
   8471e:	d009      	beq.n	84734 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   84720:	428b      	cmp	r3, r1
   84722:	d008      	beq.n	84736 <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   84724:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84726:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   84728:	4290      	cmp	r0, r2
   8472a:	d3f6      	bcc.n	8471a <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   8472c:	2000      	movs	r0, #0
   8472e:	4770      	bx	lr
   84730:	2000      	movs	r0, #0
   84732:	4770      	bx	lr
   84734:	2000      	movs	r0, #0
}
   84736:	4770      	bx	lr
   84738:	20002288 	.word	0x20002288

0008473c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8473c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8473e:	4b03      	ldr	r3, [pc, #12]	; (8474c <udc_valid_address+0x10>)
   84740:	7898      	ldrb	r0, [r3, #2]
   84742:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84746:	4b02      	ldr	r3, [pc, #8]	; (84750 <udc_valid_address+0x14>)
   84748:	4798      	blx	r3
}
   8474a:	bd08      	pop	{r3, pc}
   8474c:	20002df4 	.word	0x20002df4
   84750:	0008634d 	.word	0x0008634d

00084754 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   84754:	4b18      	ldr	r3, [pc, #96]	; (847b8 <udc_update_iface_desc+0x64>)
   84756:	781b      	ldrb	r3, [r3, #0]
   84758:	b33b      	cbz	r3, 847aa <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8475a:	4b18      	ldr	r3, [pc, #96]	; (847bc <udc_update_iface_desc+0x68>)
   8475c:	681b      	ldr	r3, [r3, #0]
   8475e:	681b      	ldr	r3, [r3, #0]
   84760:	791a      	ldrb	r2, [r3, #4]
   84762:	4282      	cmp	r2, r0
   84764:	d923      	bls.n	847ae <udc_update_iface_desc+0x5a>
{
   84766:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84768:	4a15      	ldr	r2, [pc, #84]	; (847c0 <udc_update_iface_desc+0x6c>)
   8476a:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8476c:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8476e:	441c      	add	r4, r3
	while (ptr_end_desc >
   84770:	42a3      	cmp	r3, r4
   84772:	d21e      	bcs.n	847b2 <udc_update_iface_desc+0x5e>
   84774:	2500      	movs	r5, #0
   84776:	2601      	movs	r6, #1
   84778:	e004      	b.n	84784 <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   8477a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8477c:	4413      	add	r3, r2
	while (ptr_end_desc >
   8477e:	4635      	mov	r5, r6
   84780:	42a3      	cmp	r3, r4
   84782:	d20d      	bcs.n	847a0 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   84784:	785a      	ldrb	r2, [r3, #1]
   84786:	2a04      	cmp	r2, #4
   84788:	d1f7      	bne.n	8477a <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8478a:	789a      	ldrb	r2, [r3, #2]
   8478c:	4282      	cmp	r2, r0
   8478e:	d1f4      	bne.n	8477a <udc_update_iface_desc+0x26>
   84790:	78da      	ldrb	r2, [r3, #3]
   84792:	428a      	cmp	r2, r1
   84794:	d1f1      	bne.n	8477a <udc_update_iface_desc+0x26>
   84796:	b10d      	cbz	r5, 8479c <udc_update_iface_desc+0x48>
   84798:	4a09      	ldr	r2, [pc, #36]	; (847c0 <udc_update_iface_desc+0x6c>)
   8479a:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   8479c:	2001      	movs	r0, #1
   8479e:	e002      	b.n	847a6 <udc_update_iface_desc+0x52>
   847a0:	4a07      	ldr	r2, [pc, #28]	; (847c0 <udc_update_iface_desc+0x6c>)
   847a2:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   847a4:	2000      	movs	r0, #0
}
   847a6:	bc70      	pop	{r4, r5, r6}
   847a8:	4770      	bx	lr
		return false;
   847aa:	2000      	movs	r0, #0
   847ac:	4770      	bx	lr
		return false;
   847ae:	2000      	movs	r0, #0
}
   847b0:	4770      	bx	lr
	return false; // Interface not found
   847b2:	2000      	movs	r0, #0
   847b4:	e7f7      	b.n	847a6 <udc_update_iface_desc+0x52>
   847b6:	bf00      	nop
   847b8:	20002287 	.word	0x20002287
   847bc:	20002288 	.word	0x20002288
   847c0:	2000228c 	.word	0x2000228c

000847c4 <udc_iface_disable>:
{
   847c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   847c8:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   847ca:	2100      	movs	r1, #0
   847cc:	4b12      	ldr	r3, [pc, #72]	; (84818 <udc_iface_disable+0x54>)
   847ce:	4798      	blx	r3
   847d0:	4680      	mov	r8, r0
   847d2:	b1f0      	cbz	r0, 84812 <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   847d4:	4b11      	ldr	r3, [pc, #68]	; (8481c <udc_iface_disable+0x58>)
   847d6:	681b      	ldr	r3, [r3, #0]
   847d8:	685b      	ldr	r3, [r3, #4]
   847da:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   847de:	f8d9 300c 	ldr.w	r3, [r9, #12]
   847e2:	4798      	blx	r3
   847e4:	4601      	mov	r1, r0
   847e6:	4620      	mov	r0, r4
   847e8:	4b0b      	ldr	r3, [pc, #44]	; (84818 <udc_iface_disable+0x54>)
   847ea:	4798      	blx	r3
   847ec:	4680      	mov	r8, r0
   847ee:	b180      	cbz	r0, 84812 <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   847f0:	4b0b      	ldr	r3, [pc, #44]	; (84820 <udc_iface_disable+0x5c>)
   847f2:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   847f4:	2605      	movs	r6, #5
   847f6:	4d0b      	ldr	r5, [pc, #44]	; (84824 <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   847f8:	4f0b      	ldr	r7, [pc, #44]	; (84828 <udc_iface_disable+0x64>)
   847fa:	e001      	b.n	84800 <udc_iface_disable+0x3c>
   847fc:	7880      	ldrb	r0, [r0, #2]
   847fe:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   84800:	4631      	mov	r1, r6
   84802:	4620      	mov	r0, r4
   84804:	47a8      	blx	r5
			if (NULL == ep_desc) {
   84806:	4604      	mov	r4, r0
   84808:	2800      	cmp	r0, #0
   8480a:	d1f7      	bne.n	847fc <udc_iface_disable+0x38>
	udi_api->disable();
   8480c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   84810:	4798      	blx	r3
}
   84812:	4640      	mov	r0, r8
   84814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84818:	00084755 	.word	0x00084755
   8481c:	20002288 	.word	0x20002288
   84820:	2000228c 	.word	0x2000228c
   84824:	00084709 	.word	0x00084709
   84828:	000863b1 	.word	0x000863b1

0008482c <udc_iface_enable>:
{
   8482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84830:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   84832:	4b10      	ldr	r3, [pc, #64]	; (84874 <udc_iface_enable+0x48>)
   84834:	4798      	blx	r3
   84836:	4603      	mov	r3, r0
   84838:	b1c8      	cbz	r0, 8486e <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8483a:	4b0f      	ldr	r3, [pc, #60]	; (84878 <udc_iface_enable+0x4c>)
   8483c:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8483e:	2605      	movs	r6, #5
   84840:	4d0e      	ldr	r5, [pc, #56]	; (8487c <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   84842:	4f0f      	ldr	r7, [pc, #60]	; (84880 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   84844:	4631      	mov	r1, r6
   84846:	4620      	mov	r0, r4
   84848:	47a8      	blx	r5
		if (NULL == ep_desc)
   8484a:	4604      	mov	r4, r0
   8484c:	b138      	cbz	r0, 8485e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8484e:	8882      	ldrh	r2, [r0, #4]
   84850:	78c1      	ldrb	r1, [r0, #3]
   84852:	7880      	ldrb	r0, [r0, #2]
   84854:	47b8      	blx	r7
   84856:	4603      	mov	r3, r0
   84858:	2800      	cmp	r0, #0
   8485a:	d1f3      	bne.n	84844 <udc_iface_enable+0x18>
   8485c:	e007      	b.n	8486e <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8485e:	4b09      	ldr	r3, [pc, #36]	; (84884 <udc_iface_enable+0x58>)
   84860:	681b      	ldr	r3, [r3, #0]
   84862:	685b      	ldr	r3, [r3, #4]
   84864:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   84868:	681b      	ldr	r3, [r3, #0]
   8486a:	4798      	blx	r3
   8486c:	4603      	mov	r3, r0
}
   8486e:	4618      	mov	r0, r3
   84870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84874:	00084755 	.word	0x00084755
   84878:	2000228c 	.word	0x2000228c
   8487c:	00084709 	.word	0x00084709
   84880:	000866f5 	.word	0x000866f5
   84884:	20002288 	.word	0x20002288

00084888 <udc_get_interface_desc>:
}
   84888:	4b01      	ldr	r3, [pc, #4]	; (84890 <udc_get_interface_desc+0x8>)
   8488a:	6818      	ldr	r0, [r3, #0]
   8488c:	4770      	bx	lr
   8488e:	bf00      	nop
   84890:	2000228c 	.word	0x2000228c

00084894 <udc_start>:
{
   84894:	b508      	push	{r3, lr}
	udd_enable();
   84896:	4b01      	ldr	r3, [pc, #4]	; (8489c <udc_start+0x8>)
   84898:	4798      	blx	r3
}
   8489a:	bd08      	pop	{r3, pc}
   8489c:	00086231 	.word	0x00086231

000848a0 <udc_reset>:
{
   848a0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   848a2:	4b0d      	ldr	r3, [pc, #52]	; (848d8 <udc_reset+0x38>)
   848a4:	781b      	ldrb	r3, [r3, #0]
   848a6:	b183      	cbz	r3, 848ca <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848a8:	4b0c      	ldr	r3, [pc, #48]	; (848dc <udc_reset+0x3c>)
   848aa:	681b      	ldr	r3, [r3, #0]
   848ac:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   848ae:	791b      	ldrb	r3, [r3, #4]
   848b0:	b15b      	cbz	r3, 848ca <udc_reset+0x2a>
   848b2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   848b4:	4e0a      	ldr	r6, [pc, #40]	; (848e0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848b6:	4d09      	ldr	r5, [pc, #36]	; (848dc <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   848b8:	b2e0      	uxtb	r0, r4
   848ba:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848bc:	3401      	adds	r4, #1
   848be:	682b      	ldr	r3, [r5, #0]
   848c0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   848c2:	791a      	ldrb	r2, [r3, #4]
   848c4:	b2e3      	uxtb	r3, r4
   848c6:	429a      	cmp	r2, r3
   848c8:	d8f6      	bhi.n	848b8 <udc_reset+0x18>
	udc_num_configuration = 0;
   848ca:	2300      	movs	r3, #0
   848cc:	4a02      	ldr	r2, [pc, #8]	; (848d8 <udc_reset+0x38>)
   848ce:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   848d0:	4a04      	ldr	r2, [pc, #16]	; (848e4 <udc_reset+0x44>)
   848d2:	8013      	strh	r3, [r2, #0]
}
   848d4:	bd70      	pop	{r4, r5, r6, pc}
   848d6:	bf00      	nop
   848d8:	20002287 	.word	0x20002287
   848dc:	20002288 	.word	0x20002288
   848e0:	000847c5 	.word	0x000847c5
   848e4:	20002282 	.word	0x20002282

000848e8 <udc_sof_notify>:
{
   848e8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   848ea:	4b0e      	ldr	r3, [pc, #56]	; (84924 <udc_sof_notify+0x3c>)
   848ec:	781b      	ldrb	r3, [r3, #0]
   848ee:	b1bb      	cbz	r3, 84920 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848f0:	4b0d      	ldr	r3, [pc, #52]	; (84928 <udc_sof_notify+0x40>)
   848f2:	681a      	ldr	r2, [r3, #0]
   848f4:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   848f6:	791b      	ldrb	r3, [r3, #4]
   848f8:	b193      	cbz	r3, 84920 <udc_sof_notify+0x38>
   848fa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848fc:	4d0a      	ldr	r5, [pc, #40]	; (84928 <udc_sof_notify+0x40>)
   848fe:	e006      	b.n	8490e <udc_sof_notify+0x26>
   84900:	682a      	ldr	r2, [r5, #0]
   84902:	3401      	adds	r4, #1
   84904:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   84906:	7919      	ldrb	r1, [r3, #4]
   84908:	b2e3      	uxtb	r3, r4
   8490a:	4299      	cmp	r1, r3
   8490c:	d908      	bls.n	84920 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8490e:	b2e3      	uxtb	r3, r4
   84910:	6852      	ldr	r2, [r2, #4]
   84912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   84916:	691b      	ldr	r3, [r3, #16]
   84918:	2b00      	cmp	r3, #0
   8491a:	d0f1      	beq.n	84900 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   8491c:	4798      	blx	r3
   8491e:	e7ef      	b.n	84900 <udc_sof_notify+0x18>
}
   84920:	bd38      	pop	{r3, r4, r5, pc}
   84922:	bf00      	nop
   84924:	20002287 	.word	0x20002287
   84928:	20002288 	.word	0x20002288

0008492c <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   8492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84930:	4b91      	ldr	r3, [pc, #580]	; (84b78 <udc_process_setup+0x24c>)
   84932:	2200      	movs	r2, #0
   84934:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   84936:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84938:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8493a:	881b      	ldrh	r3, [r3, #0]
   8493c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   84940:	d01b      	beq.n	8497a <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   84942:	4b8d      	ldr	r3, [pc, #564]	; (84b78 <udc_process_setup+0x24c>)
   84944:	781a      	ldrb	r2, [r3, #0]
   84946:	f993 3000 	ldrsb.w	r3, [r3]
   8494a:	2b00      	cmp	r3, #0
   8494c:	db1b      	blt.n	84986 <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8494e:	f012 0f60 	tst.w	r2, #96	; 0x60
   84952:	f000 8147 	beq.w	84be4 <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84956:	4b88      	ldr	r3, [pc, #544]	; (84b78 <udc_process_setup+0x24c>)
   84958:	781b      	ldrb	r3, [r3, #0]
   8495a:	f003 031f 	and.w	r3, r3, #31
   8495e:	2b01      	cmp	r3, #1
   84960:	f000 8245 	beq.w	84dee <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84964:	4b84      	ldr	r3, [pc, #528]	; (84b78 <udc_process_setup+0x24c>)
   84966:	781b      	ldrb	r3, [r3, #0]
   84968:	f003 031f 	and.w	r3, r3, #31
   8496c:	2b02      	cmp	r3, #2
   8496e:	f000 8291 	beq.w	84e94 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84972:	2300      	movs	r3, #0
#endif
}
   84974:	4618      	mov	r0, r3
   84976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8497a:	21ae      	movs	r1, #174	; 0xae
   8497c:	487f      	ldr	r0, [pc, #508]	; (84b7c <udc_process_setup+0x250>)
   8497e:	4b80      	ldr	r3, [pc, #512]	; (84b80 <udc_process_setup+0x254>)
   84980:	4798      	blx	r3
		return true;
   84982:	2301      	movs	r3, #1
   84984:	e7f6      	b.n	84974 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84986:	4b7c      	ldr	r3, [pc, #496]	; (84b78 <udc_process_setup+0x24c>)
   84988:	88db      	ldrh	r3, [r3, #6]
   8498a:	2b00      	cmp	r3, #0
   8498c:	f000 82ae 	beq.w	84eec <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84990:	f012 0f60 	tst.w	r2, #96	; 0x60
   84994:	d1df      	bne.n	84956 <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84996:	f012 021f 	ands.w	r2, r2, #31
   8499a:	f040 80c1 	bne.w	84b20 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   8499e:	4a76      	ldr	r2, [pc, #472]	; (84b78 <udc_process_setup+0x24c>)
   849a0:	7852      	ldrb	r2, [r2, #1]
   849a2:	2a06      	cmp	r2, #6
   849a4:	d00b      	beq.n	849be <udc_process_setup+0x92>
   849a6:	2a08      	cmp	r2, #8
   849a8:	f000 80b2 	beq.w	84b10 <udc_process_setup+0x1e4>
   849ac:	2a00      	cmp	r2, #0
   849ae:	d1d2      	bne.n	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   849b0:	2b02      	cmp	r3, #2
   849b2:	d1d0      	bne.n	84956 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   849b4:	2102      	movs	r1, #2
   849b6:	4873      	ldr	r0, [pc, #460]	; (84b84 <udc_process_setup+0x258>)
   849b8:	4b71      	ldr	r3, [pc, #452]	; (84b80 <udc_process_setup+0x254>)
   849ba:	4798      	blx	r3
	return true;
   849bc:	e12f      	b.n	84c1e <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   849be:	4b6e      	ldr	r3, [pc, #440]	; (84b78 <udc_process_setup+0x24c>)
   849c0:	885a      	ldrh	r2, [r3, #2]
   849c2:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   849c4:	0a13      	lsrs	r3, r2, #8
   849c6:	3b01      	subs	r3, #1
   849c8:	2b0e      	cmp	r3, #14
   849ca:	f200 8209 	bhi.w	84de0 <udc_process_setup+0x4b4>
   849ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   849d2:	000f      	.short	0x000f
   849d4:	007a0023 	.word	0x007a0023
   849d8:	02070207 	.word	0x02070207
   849dc:	00520044 	.word	0x00520044
   849e0:	02070207 	.word	0x02070207
   849e4:	02070207 	.word	0x02070207
   849e8:	02070207 	.word	0x02070207
   849ec:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   849f0:	4b65      	ldr	r3, [pc, #404]	; (84b88 <udc_process_setup+0x25c>)
   849f2:	4798      	blx	r3
   849f4:	b928      	cbnz	r0, 84a02 <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   849f6:	4b65      	ldr	r3, [pc, #404]	; (84b8c <udc_process_setup+0x260>)
   849f8:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   849fa:	7801      	ldrb	r1, [r0, #0]
   849fc:	4b60      	ldr	r3, [pc, #384]	; (84b80 <udc_process_setup+0x254>)
   849fe:	4798      	blx	r3
   84a00:	e030      	b.n	84a64 <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   84a02:	4b62      	ldr	r3, [pc, #392]	; (84b8c <udc_process_setup+0x260>)
   84a04:	681a      	ldr	r2, [r3, #0]
   84a06:	2110      	movs	r1, #16
   84a08:	7091      	strb	r1, [r2, #2]
   84a0a:	2102      	movs	r1, #2
   84a0c:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   84a0e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   84a10:	7801      	ldrb	r1, [r0, #0]
   84a12:	4b5b      	ldr	r3, [pc, #364]	; (84b80 <udc_process_setup+0x254>)
   84a14:	4798      	blx	r3
   84a16:	e025      	b.n	84a64 <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   84a18:	4b5b      	ldr	r3, [pc, #364]	; (84b88 <udc_process_setup+0x25c>)
   84a1a:	4798      	blx	r3
   84a1c:	b180      	cbz	r0, 84a40 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   84a1e:	4b5b      	ldr	r3, [pc, #364]	; (84b8c <udc_process_setup+0x260>)
   84a20:	689b      	ldr	r3, [r3, #8]
   84a22:	7c5b      	ldrb	r3, [r3, #17]
   84a24:	42a3      	cmp	r3, r4
   84a26:	d996      	bls.n	84956 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84a28:	4b58      	ldr	r3, [pc, #352]	; (84b8c <udc_process_setup+0x260>)
   84a2a:	691b      	ldr	r3, [r3, #16]
   84a2c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a30:	8841      	ldrh	r1, [r0, #2]
   84a32:	4b53      	ldr	r3, [pc, #332]	; (84b80 <udc_process_setup+0x254>)
   84a34:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84a36:	4b50      	ldr	r3, [pc, #320]	; (84b78 <udc_process_setup+0x24c>)
   84a38:	689b      	ldr	r3, [r3, #8]
   84a3a:	2202      	movs	r2, #2
   84a3c:	705a      	strb	r2, [r3, #1]
		break;
   84a3e:	e011      	b.n	84a64 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   84a40:	4b52      	ldr	r3, [pc, #328]	; (84b8c <udc_process_setup+0x260>)
   84a42:	681b      	ldr	r3, [r3, #0]
   84a44:	7c5b      	ldrb	r3, [r3, #17]
   84a46:	42a3      	cmp	r3, r4
   84a48:	d985      	bls.n	84956 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84a4a:	4b50      	ldr	r3, [pc, #320]	; (84b8c <udc_process_setup+0x260>)
   84a4c:	685b      	ldr	r3, [r3, #4]
   84a4e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a52:	8841      	ldrh	r1, [r0, #2]
   84a54:	4b4a      	ldr	r3, [pc, #296]	; (84b80 <udc_process_setup+0x254>)
   84a56:	4798      	blx	r3
   84a58:	e7ed      	b.n	84a36 <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84a5a:	4b4c      	ldr	r3, [pc, #304]	; (84b8c <udc_process_setup+0x260>)
   84a5c:	68d8      	ldr	r0, [r3, #12]
   84a5e:	7801      	ldrb	r1, [r0, #0]
   84a60:	4b47      	ldr	r3, [pc, #284]	; (84b80 <udc_process_setup+0x254>)
   84a62:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84a64:	4b44      	ldr	r3, [pc, #272]	; (84b78 <udc_process_setup+0x24c>)
   84a66:	88da      	ldrh	r2, [r3, #6]
   84a68:	899b      	ldrh	r3, [r3, #12]
   84a6a:	4293      	cmp	r3, r2
   84a6c:	f240 80d7 	bls.w	84c1e <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84a70:	4b41      	ldr	r3, [pc, #260]	; (84b78 <udc_process_setup+0x24c>)
   84a72:	819a      	strh	r2, [r3, #12]
   84a74:	e0d3      	b.n	84c1e <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   84a76:	4b44      	ldr	r3, [pc, #272]	; (84b88 <udc_process_setup+0x25c>)
   84a78:	4798      	blx	r3
   84a7a:	b988      	cbnz	r0, 84aa0 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   84a7c:	4b43      	ldr	r3, [pc, #268]	; (84b8c <udc_process_setup+0x260>)
   84a7e:	689b      	ldr	r3, [r3, #8]
   84a80:	7c5b      	ldrb	r3, [r3, #17]
   84a82:	42a3      	cmp	r3, r4
   84a84:	f67f af67 	bls.w	84956 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84a88:	4b40      	ldr	r3, [pc, #256]	; (84b8c <udc_process_setup+0x260>)
   84a8a:	691b      	ldr	r3, [r3, #16]
   84a8c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84a90:	8841      	ldrh	r1, [r0, #2]
   84a92:	4b3b      	ldr	r3, [pc, #236]	; (84b80 <udc_process_setup+0x254>)
   84a94:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84a96:	4b38      	ldr	r3, [pc, #224]	; (84b78 <udc_process_setup+0x24c>)
   84a98:	689b      	ldr	r3, [r3, #8]
   84a9a:	2207      	movs	r2, #7
   84a9c:	705a      	strb	r2, [r3, #1]
		break;
   84a9e:	e7e1      	b.n	84a64 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   84aa0:	4b3a      	ldr	r3, [pc, #232]	; (84b8c <udc_process_setup+0x260>)
   84aa2:	681b      	ldr	r3, [r3, #0]
   84aa4:	7c5b      	ldrb	r3, [r3, #17]
   84aa6:	42a3      	cmp	r3, r4
   84aa8:	f67f af55 	bls.w	84956 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84aac:	4b37      	ldr	r3, [pc, #220]	; (84b8c <udc_process_setup+0x260>)
   84aae:	685b      	ldr	r3, [r3, #4]
   84ab0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   84ab4:	8841      	ldrh	r1, [r0, #2]
   84ab6:	4b32      	ldr	r3, [pc, #200]	; (84b80 <udc_process_setup+0x254>)
   84ab8:	4798      	blx	r3
   84aba:	e7ec      	b.n	84a96 <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84abc:	2121      	movs	r1, #33	; 0x21
   84abe:	4834      	ldr	r0, [pc, #208]	; (84b90 <udc_process_setup+0x264>)
   84ac0:	4b2f      	ldr	r3, [pc, #188]	; (84b80 <udc_process_setup+0x254>)
   84ac2:	4798      	blx	r3
		break;
   84ac4:	e7ce      	b.n	84a64 <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84ac6:	b2d2      	uxtb	r2, r2
   84ac8:	2a03      	cmp	r2, #3
   84aca:	f63f af44 	bhi.w	84956 <udc_process_setup+0x2a>
   84ace:	e8df f002 	tbb	[pc, r2]
   84ad2:	1914      	.short	0x1914
   84ad4:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84ad6:	2020      	movs	r0, #32
   84ad8:	4a2e      	ldr	r2, [pc, #184]	; (84b94 <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   84ada:	4613      	mov	r3, r2
   84adc:	492e      	ldr	r1, [pc, #184]	; (84b98 <udc_process_setup+0x26c>)
   84ade:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84ae0:	f813 4b01 	ldrb.w	r4, [r3], #1
   84ae4:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   84ae8:	429a      	cmp	r2, r3
   84aea:	d1f9      	bne.n	84ae0 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84aec:	0041      	lsls	r1, r0, #1
   84aee:	3102      	adds	r1, #2
   84af0:	4829      	ldr	r0, [pc, #164]	; (84b98 <udc_process_setup+0x26c>)
   84af2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   84af4:	4b22      	ldr	r3, [pc, #136]	; (84b80 <udc_process_setup+0x254>)
   84af6:	4798      	blx	r3
   84af8:	e7b4      	b.n	84a64 <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84afa:	2104      	movs	r1, #4
   84afc:	4827      	ldr	r0, [pc, #156]	; (84b9c <udc_process_setup+0x270>)
   84afe:	4b20      	ldr	r3, [pc, #128]	; (84b80 <udc_process_setup+0x254>)
   84b00:	4798      	blx	r3
	if (str_length) {
   84b02:	e7af      	b.n	84a64 <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84b04:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   84b06:	4a26      	ldr	r2, [pc, #152]	; (84ba0 <udc_process_setup+0x274>)
   84b08:	e7e7      	b.n	84ada <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84b0a:	2012      	movs	r0, #18
		str = udc_string_product_name;
   84b0c:	4a25      	ldr	r2, [pc, #148]	; (84ba4 <udc_process_setup+0x278>)
   84b0e:	e7e4      	b.n	84ada <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84b10:	2b01      	cmp	r3, #1
   84b12:	f47f af20 	bne.w	84956 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   84b16:	2101      	movs	r1, #1
   84b18:	4823      	ldr	r0, [pc, #140]	; (84ba8 <udc_process_setup+0x27c>)
   84b1a:	4b19      	ldr	r3, [pc, #100]	; (84b80 <udc_process_setup+0x254>)
   84b1c:	4798      	blx	r3
	return true;
   84b1e:	e07e      	b.n	84c1e <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84b20:	2a01      	cmp	r2, #1
   84b22:	d149      	bne.n	84bb8 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   84b24:	4a14      	ldr	r2, [pc, #80]	; (84b78 <udc_process_setup+0x24c>)
   84b26:	7852      	ldrb	r2, [r2, #1]
   84b28:	2a0a      	cmp	r2, #10
   84b2a:	f47f af14 	bne.w	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   84b2e:	2b01      	cmp	r3, #1
   84b30:	f47f af11 	bne.w	84956 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84b34:	4b1c      	ldr	r3, [pc, #112]	; (84ba8 <udc_process_setup+0x27c>)
   84b36:	781b      	ldrb	r3, [r3, #0]
   84b38:	2b00      	cmp	r3, #0
   84b3a:	f43f af0c 	beq.w	84956 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84b3e:	4b0e      	ldr	r3, [pc, #56]	; (84b78 <udc_process_setup+0x24c>)
   84b40:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84b42:	4b1a      	ldr	r3, [pc, #104]	; (84bac <udc_process_setup+0x280>)
   84b44:	681d      	ldr	r5, [r3, #0]
   84b46:	682b      	ldr	r3, [r5, #0]
   84b48:	791b      	ldrb	r3, [r3, #4]
   84b4a:	42a3      	cmp	r3, r4
   84b4c:	f67f af03 	bls.w	84956 <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   84b50:	2100      	movs	r1, #0
   84b52:	4620      	mov	r0, r4
   84b54:	4b16      	ldr	r3, [pc, #88]	; (84bb0 <udc_process_setup+0x284>)
   84b56:	4798      	blx	r3
   84b58:	2800      	cmp	r0, #0
   84b5a:	f43f aefc 	beq.w	84956 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84b5e:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   84b60:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   84b64:	68db      	ldr	r3, [r3, #12]
   84b66:	4798      	blx	r3
   84b68:	4b12      	ldr	r3, [pc, #72]	; (84bb4 <udc_process_setup+0x288>)
   84b6a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   84b6c:	2101      	movs	r1, #1
   84b6e:	4618      	mov	r0, r3
   84b70:	4b03      	ldr	r3, [pc, #12]	; (84b80 <udc_process_setup+0x254>)
   84b72:	4798      	blx	r3
	return true;
   84b74:	e053      	b.n	84c1e <udc_process_setup+0x2f2>
   84b76:	bf00      	nop
   84b78:	20002df4 	.word	0x20002df4
   84b7c:	20000644 	.word	0x20000644
   84b80:	000863a5 	.word	0x000863a5
   84b84:	20002282 	.word	0x20002282
   84b88:	0008633d 	.word	0x0008633d
   84b8c:	200001d4 	.word	0x200001d4
   84b90:	0008e544 	.word	0x0008e544
   84b94:	200006f4 	.word	0x200006f4
   84b98:	200005d0 	.word	0x200005d0
   84b9c:	20000614 	.word	0x20000614
   84ba0:	20000618 	.word	0x20000618
   84ba4:	20000630 	.word	0x20000630
   84ba8:	20002287 	.word	0x20002287
   84bac:	20002288 	.word	0x20002288
   84bb0:	00084755 	.word	0x00084755
   84bb4:	20002286 	.word	0x20002286
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84bb8:	2a02      	cmp	r2, #2
   84bba:	f47f aecc 	bne.w	84956 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84bbe:	4a93      	ldr	r2, [pc, #588]	; (84e0c <udc_process_setup+0x4e0>)
   84bc0:	7852      	ldrb	r2, [r2, #1]
   84bc2:	2a00      	cmp	r2, #0
   84bc4:	f47f aec7 	bne.w	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84bc8:	2b02      	cmp	r3, #2
   84bca:	f47f aec4 	bne.w	84956 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84bce:	4b8f      	ldr	r3, [pc, #572]	; (84e0c <udc_process_setup+0x4e0>)
   84bd0:	7918      	ldrb	r0, [r3, #4]
   84bd2:	4b8f      	ldr	r3, [pc, #572]	; (84e10 <udc_process_setup+0x4e4>)
   84bd4:	4798      	blx	r3
   84bd6:	4b8f      	ldr	r3, [pc, #572]	; (84e14 <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84bd8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84bda:	2102      	movs	r1, #2
   84bdc:	4618      	mov	r0, r3
   84bde:	4b8e      	ldr	r3, [pc, #568]	; (84e18 <udc_process_setup+0x4ec>)
   84be0:	4798      	blx	r3
	return true;
   84be2:	e01c      	b.n	84c1e <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84be4:	f012 021f 	ands.w	r2, r2, #31
   84be8:	f040 80b1 	bne.w	84d4e <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   84bec:	4b87      	ldr	r3, [pc, #540]	; (84e0c <udc_process_setup+0x4e0>)
   84bee:	785b      	ldrb	r3, [r3, #1]
   84bf0:	3b01      	subs	r3, #1
   84bf2:	2b08      	cmp	r3, #8
   84bf4:	f200 80ab 	bhi.w	84d4e <udc_process_setup+0x422>
   84bf8:	e8df f013 	tbh	[pc, r3, lsl #1]
   84bfc:	00a90013 	.word	0x00a90013
   84c00:	00a90023 	.word	0x00a90023
   84c04:	00a90009 	.word	0x00a90009
   84c08:	00a900a9 	.word	0x00a900a9
   84c0c:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   84c0e:	4b7f      	ldr	r3, [pc, #508]	; (84e0c <udc_process_setup+0x4e0>)
   84c10:	88db      	ldrh	r3, [r3, #6]
   84c12:	2b00      	cmp	r3, #0
   84c14:	f47f ae9f 	bne.w	84956 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   84c18:	4b7c      	ldr	r3, [pc, #496]	; (84e0c <udc_process_setup+0x4e0>)
   84c1a:	4a80      	ldr	r2, [pc, #512]	; (84e1c <udc_process_setup+0x4f0>)
   84c1c:	611a      	str	r2, [r3, #16]
			return true;
   84c1e:	2301      	movs	r3, #1
   84c20:	e6a8      	b.n	84974 <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   84c22:	4b7a      	ldr	r3, [pc, #488]	; (84e0c <udc_process_setup+0x4e0>)
   84c24:	88db      	ldrh	r3, [r3, #6]
   84c26:	2b00      	cmp	r3, #0
   84c28:	f47f ae95 	bne.w	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84c2c:	4b77      	ldr	r3, [pc, #476]	; (84e0c <udc_process_setup+0x4e0>)
   84c2e:	885b      	ldrh	r3, [r3, #2]
   84c30:	2b01      	cmp	r3, #1
   84c32:	f47f ae90 	bne.w	84956 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84c36:	4a7a      	ldr	r2, [pc, #488]	; (84e20 <udc_process_setup+0x4f4>)
   84c38:	8813      	ldrh	r3, [r2, #0]
   84c3a:	f023 0302 	bic.w	r3, r3, #2
   84c3e:	8013      	strh	r3, [r2, #0]
		return true;
   84c40:	e7ed      	b.n	84c1e <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84c42:	4b72      	ldr	r3, [pc, #456]	; (84e0c <udc_process_setup+0x4e0>)
   84c44:	88db      	ldrh	r3, [r3, #6]
   84c46:	2b00      	cmp	r3, #0
   84c48:	f47f ae85 	bne.w	84956 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   84c4c:	4b6f      	ldr	r3, [pc, #444]	; (84e0c <udc_process_setup+0x4e0>)
   84c4e:	885b      	ldrh	r3, [r3, #2]
   84c50:	2b02      	cmp	r3, #2
   84c52:	f47f ae80 	bne.w	84956 <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   84c56:	4b73      	ldr	r3, [pc, #460]	; (84e24 <udc_process_setup+0x4f8>)
   84c58:	4798      	blx	r3
   84c5a:	2800      	cmp	r0, #0
   84c5c:	f43f ae7b 	beq.w	84956 <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84c60:	4b6a      	ldr	r3, [pc, #424]	; (84e0c <udc_process_setup+0x4e0>)
   84c62:	791b      	ldrb	r3, [r3, #4]
   84c64:	2b00      	cmp	r3, #0
   84c66:	f47f ae76 	bne.w	84956 <udc_process_setup+0x2a>
		udc_reset();
   84c6a:	4b6f      	ldr	r3, [pc, #444]	; (84e28 <udc_process_setup+0x4fc>)
   84c6c:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84c6e:	4b67      	ldr	r3, [pc, #412]	; (84e0c <udc_process_setup+0x4e0>)
   84c70:	889b      	ldrh	r3, [r3, #4]
   84c72:	0a1b      	lsrs	r3, r3, #8
   84c74:	3b01      	subs	r3, #1
   84c76:	2b03      	cmp	r3, #3
   84c78:	f200 80b7 	bhi.w	84dea <udc_process_setup+0x4be>
   84c7c:	e8df f003 	tbb	[pc, r3]
   84c80:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84c84:	4b61      	ldr	r3, [pc, #388]	; (84e0c <udc_process_setup+0x4e0>)
   84c86:	4a69      	ldr	r2, [pc, #420]	; (84e2c <udc_process_setup+0x500>)
   84c88:	611a      	str	r2, [r3, #16]
			return true;
   84c8a:	e7c8      	b.n	84c1e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84c8c:	4b5f      	ldr	r3, [pc, #380]	; (84e0c <udc_process_setup+0x4e0>)
   84c8e:	4a68      	ldr	r2, [pc, #416]	; (84e30 <udc_process_setup+0x504>)
   84c90:	611a      	str	r2, [r3, #16]
			return true;
   84c92:	e7c4      	b.n	84c1e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84c94:	4b5d      	ldr	r3, [pc, #372]	; (84e0c <udc_process_setup+0x4e0>)
   84c96:	4a67      	ldr	r2, [pc, #412]	; (84e34 <udc_process_setup+0x508>)
   84c98:	611a      	str	r2, [r3, #16]
			return true;
   84c9a:	e7c0      	b.n	84c1e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84c9c:	4b5b      	ldr	r3, [pc, #364]	; (84e0c <udc_process_setup+0x4e0>)
   84c9e:	4a66      	ldr	r2, [pc, #408]	; (84e38 <udc_process_setup+0x50c>)
   84ca0:	611a      	str	r2, [r3, #16]
			return true;
   84ca2:	e7bc      	b.n	84c1e <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   84ca4:	4b59      	ldr	r3, [pc, #356]	; (84e0c <udc_process_setup+0x4e0>)
   84ca6:	88db      	ldrh	r3, [r3, #6]
   84ca8:	2b00      	cmp	r3, #0
   84caa:	f47f ae54 	bne.w	84956 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   84cae:	4b63      	ldr	r3, [pc, #396]	; (84e3c <udc_process_setup+0x510>)
   84cb0:	4798      	blx	r3
   84cb2:	2800      	cmp	r0, #0
   84cb4:	f43f ae4f 	beq.w	84956 <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   84cb8:	4b5a      	ldr	r3, [pc, #360]	; (84e24 <udc_process_setup+0x4f8>)
   84cba:	4798      	blx	r3
   84cbc:	2800      	cmp	r0, #0
   84cbe:	d034      	beq.n	84d2a <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   84cc0:	4b5f      	ldr	r3, [pc, #380]	; (84e40 <udc_process_setup+0x514>)
   84cc2:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84cc4:	7c5a      	ldrb	r2, [r3, #17]
   84cc6:	4b51      	ldr	r3, [pc, #324]	; (84e0c <udc_process_setup+0x4e0>)
   84cc8:	789b      	ldrb	r3, [r3, #2]
   84cca:	429a      	cmp	r2, r3
   84ccc:	f4ff ae43 	bcc.w	84956 <udc_process_setup+0x2a>
	udc_reset();
   84cd0:	4b55      	ldr	r3, [pc, #340]	; (84e28 <udc_process_setup+0x4fc>)
   84cd2:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84cd4:	4b4d      	ldr	r3, [pc, #308]	; (84e0c <udc_process_setup+0x4e0>)
   84cd6:	789b      	ldrb	r3, [r3, #2]
   84cd8:	4a5a      	ldr	r2, [pc, #360]	; (84e44 <udc_process_setup+0x518>)
   84cda:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   84cdc:	2b00      	cmp	r3, #0
   84cde:	d09e      	beq.n	84c1e <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   84ce0:	4b50      	ldr	r3, [pc, #320]	; (84e24 <udc_process_setup+0x4f8>)
   84ce2:	4798      	blx	r3
   84ce4:	2800      	cmp	r0, #0
   84ce6:	d028      	beq.n	84d3a <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84ce8:	4b56      	ldr	r3, [pc, #344]	; (84e44 <udc_process_setup+0x518>)
   84cea:	781b      	ldrb	r3, [r3, #0]
   84cec:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84cf0:	3a01      	subs	r2, #1
   84cf2:	4b53      	ldr	r3, [pc, #332]	; (84e40 <udc_process_setup+0x514>)
   84cf4:	691b      	ldr	r3, [r3, #16]
   84cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84cfa:	4a53      	ldr	r2, [pc, #332]	; (84e48 <udc_process_setup+0x51c>)
   84cfc:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84cfe:	681b      	ldr	r3, [r3, #0]
   84d00:	791b      	ldrb	r3, [r3, #4]
   84d02:	2b00      	cmp	r3, #0
   84d04:	d08b      	beq.n	84c1e <udc_process_setup+0x2f2>
   84d06:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   84d08:	4626      	mov	r6, r4
   84d0a:	4d50      	ldr	r5, [pc, #320]	; (84e4c <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d0c:	4f4e      	ldr	r7, [pc, #312]	; (84e48 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   84d0e:	4631      	mov	r1, r6
   84d10:	b2e0      	uxtb	r0, r4
   84d12:	47a8      	blx	r5
   84d14:	2800      	cmp	r0, #0
   84d16:	f43f ae1e 	beq.w	84956 <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84d1a:	3401      	adds	r4, #1
   84d1c:	683b      	ldr	r3, [r7, #0]
   84d1e:	681b      	ldr	r3, [r3, #0]
   84d20:	791a      	ldrb	r2, [r3, #4]
   84d22:	b2e3      	uxtb	r3, r4
   84d24:	429a      	cmp	r2, r3
   84d26:	d8f2      	bhi.n	84d0e <udc_process_setup+0x3e2>
   84d28:	e779      	b.n	84c1e <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   84d2a:	4b45      	ldr	r3, [pc, #276]	; (84e40 <udc_process_setup+0x514>)
   84d2c:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84d2e:	7c5a      	ldrb	r2, [r3, #17]
   84d30:	4b36      	ldr	r3, [pc, #216]	; (84e0c <udc_process_setup+0x4e0>)
   84d32:	789b      	ldrb	r3, [r3, #2]
   84d34:	429a      	cmp	r2, r3
   84d36:	d2cb      	bcs.n	84cd0 <udc_process_setup+0x3a4>
   84d38:	e60d      	b.n	84956 <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84d3a:	4b42      	ldr	r3, [pc, #264]	; (84e44 <udc_process_setup+0x518>)
   84d3c:	781b      	ldrb	r3, [r3, #0]
   84d3e:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   84d42:	3a01      	subs	r2, #1
   84d44:	4b3e      	ldr	r3, [pc, #248]	; (84e40 <udc_process_setup+0x514>)
   84d46:	685b      	ldr	r3, [r3, #4]
   84d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84d4c:	e7d5      	b.n	84cfa <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84d4e:	2a01      	cmp	r2, #1
   84d50:	d01a      	beq.n	84d88 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84d52:	2a02      	cmp	r2, #2
   84d54:	f47f adff 	bne.w	84956 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d58:	4b2c      	ldr	r3, [pc, #176]	; (84e0c <udc_process_setup+0x4e0>)
   84d5a:	785b      	ldrb	r3, [r3, #1]
   84d5c:	2b01      	cmp	r3, #1
   84d5e:	d031      	beq.n	84dc4 <udc_process_setup+0x498>
   84d60:	2b03      	cmp	r3, #3
   84d62:	f47f adf8 	bne.w	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84d66:	4a29      	ldr	r2, [pc, #164]	; (84e0c <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84d68:	88d3      	ldrh	r3, [r2, #6]
   84d6a:	8852      	ldrh	r2, [r2, #2]
   84d6c:	4313      	orrs	r3, r2
   84d6e:	b29b      	uxth	r3, r3
   84d70:	2b00      	cmp	r3, #0
   84d72:	f47f adf0 	bne.w	84956 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d76:	4c25      	ldr	r4, [pc, #148]	; (84e0c <udc_process_setup+0x4e0>)
   84d78:	7920      	ldrb	r0, [r4, #4]
   84d7a:	4b35      	ldr	r3, [pc, #212]	; (84e50 <udc_process_setup+0x524>)
   84d7c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84d7e:	7920      	ldrb	r0, [r4, #4]
   84d80:	4b34      	ldr	r3, [pc, #208]	; (84e54 <udc_process_setup+0x528>)
   84d82:	4798      	blx	r3
   84d84:	4603      	mov	r3, r0
   84d86:	e02c      	b.n	84de2 <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   84d88:	4b20      	ldr	r3, [pc, #128]	; (84e0c <udc_process_setup+0x4e0>)
   84d8a:	785b      	ldrb	r3, [r3, #1]
   84d8c:	2b0b      	cmp	r3, #11
   84d8e:	f47f ade2 	bne.w	84956 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   84d92:	4b1e      	ldr	r3, [pc, #120]	; (84e0c <udc_process_setup+0x4e0>)
   84d94:	88db      	ldrh	r3, [r3, #6]
   84d96:	2b00      	cmp	r3, #0
   84d98:	f47f addd 	bne.w	84956 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   84d9c:	4b29      	ldr	r3, [pc, #164]	; (84e44 <udc_process_setup+0x518>)
   84d9e:	781b      	ldrb	r3, [r3, #0]
   84da0:	2b00      	cmp	r3, #0
   84da2:	f43f add8 	beq.w	84956 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84da6:	4b19      	ldr	r3, [pc, #100]	; (84e0c <udc_process_setup+0x4e0>)
   84da8:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84daa:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   84dac:	4620      	mov	r0, r4
   84dae:	4b2a      	ldr	r3, [pc, #168]	; (84e58 <udc_process_setup+0x52c>)
   84db0:	4798      	blx	r3
   84db2:	2800      	cmp	r0, #0
   84db4:	f43f adcf 	beq.w	84956 <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   84db8:	b2e9      	uxtb	r1, r5
   84dba:	4620      	mov	r0, r4
   84dbc:	4b23      	ldr	r3, [pc, #140]	; (84e4c <udc_process_setup+0x520>)
   84dbe:	4798      	blx	r3
   84dc0:	4603      	mov	r3, r0
   84dc2:	e00e      	b.n	84de2 <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   84dc4:	4a11      	ldr	r2, [pc, #68]	; (84e0c <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84dc6:	88d3      	ldrh	r3, [r2, #6]
   84dc8:	8852      	ldrh	r2, [r2, #2]
   84dca:	4313      	orrs	r3, r2
   84dcc:	b29b      	uxth	r3, r3
   84dce:	2b00      	cmp	r3, #0
   84dd0:	f47f adc1 	bne.w	84956 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84dd4:	4b0d      	ldr	r3, [pc, #52]	; (84e0c <udc_process_setup+0x4e0>)
   84dd6:	7918      	ldrb	r0, [r3, #4]
   84dd8:	4b20      	ldr	r3, [pc, #128]	; (84e5c <udc_process_setup+0x530>)
   84dda:	4798      	blx	r3
   84ddc:	4603      	mov	r3, r0
   84dde:	e000      	b.n	84de2 <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84de0:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   84de2:	2b00      	cmp	r3, #0
   84de4:	f47f adc6 	bne.w	84974 <udc_process_setup+0x48>
   84de8:	e5b5      	b.n	84956 <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84dea:	2300      	movs	r3, #0
   84dec:	e7f9      	b.n	84de2 <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   84dee:	4b15      	ldr	r3, [pc, #84]	; (84e44 <udc_process_setup+0x518>)
   84df0:	781b      	ldrb	r3, [r3, #0]
   84df2:	2b00      	cmp	r3, #0
   84df4:	d07c      	beq.n	84ef0 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84df6:	4b05      	ldr	r3, [pc, #20]	; (84e0c <udc_process_setup+0x4e0>)
   84df8:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84dfa:	4b13      	ldr	r3, [pc, #76]	; (84e48 <udc_process_setup+0x51c>)
   84dfc:	681d      	ldr	r5, [r3, #0]
   84dfe:	682b      	ldr	r3, [r5, #0]
   84e00:	791b      	ldrb	r3, [r3, #4]
   84e02:	42a3      	cmp	r3, r4
   84e04:	d82c      	bhi.n	84e60 <udc_process_setup+0x534>
	return false;
   84e06:	2300      	movs	r3, #0
   84e08:	e5b4      	b.n	84974 <udc_process_setup+0x48>
   84e0a:	bf00      	nop
   84e0c:	20002df4 	.word	0x20002df4
   84e10:	00086409 	.word	0x00086409
   84e14:	20002284 	.word	0x20002284
   84e18:	000863a5 	.word	0x000863a5
   84e1c:	0008473d 	.word	0x0008473d
   84e20:	20002282 	.word	0x20002282
   84e24:	0008633d 	.word	0x0008633d
   84e28:	000848a1 	.word	0x000848a1
   84e2c:	000869f1 	.word	0x000869f1
   84e30:	00086a15 	.word	0x00086a15
   84e34:	00086a39 	.word	0x00086a39
   84e38:	00086a51 	.word	0x00086a51
   84e3c:	00086375 	.word	0x00086375
   84e40:	200001d4 	.word	0x200001d4
   84e44:	20002287 	.word	0x20002287
   84e48:	20002288 	.word	0x20002288
   84e4c:	0008482d 	.word	0x0008482d
   84e50:	0008697d 	.word	0x0008697d
   84e54:	0008643d 	.word	0x0008643d
   84e58:	000847c5 	.word	0x000847c5
   84e5c:	00086501 	.word	0x00086501
	if (!udc_update_iface_desc(iface_num, 0)) {
   84e60:	2100      	movs	r1, #0
   84e62:	4620      	mov	r0, r4
   84e64:	4b23      	ldr	r3, [pc, #140]	; (84ef4 <udc_process_setup+0x5c8>)
   84e66:	4798      	blx	r3
   84e68:	2800      	cmp	r0, #0
   84e6a:	f43f ad7b 	beq.w	84964 <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e6e:	686b      	ldr	r3, [r5, #4]
   84e70:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e74:	68eb      	ldr	r3, [r5, #12]
   84e76:	4798      	blx	r3
   84e78:	4601      	mov	r1, r0
   84e7a:	4620      	mov	r0, r4
   84e7c:	4b1d      	ldr	r3, [pc, #116]	; (84ef4 <udc_process_setup+0x5c8>)
   84e7e:	4798      	blx	r3
   84e80:	2800      	cmp	r0, #0
   84e82:	f43f ad6f 	beq.w	84964 <udc_process_setup+0x38>
	return udi_api->setup();
   84e86:	68ab      	ldr	r3, [r5, #8]
   84e88:	4798      	blx	r3
		if (udc_req_iface()) {
   84e8a:	4603      	mov	r3, r0
   84e8c:	2800      	cmp	r0, #0
   84e8e:	f47f ad71 	bne.w	84974 <udc_process_setup+0x48>
   84e92:	e567      	b.n	84964 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   84e94:	4b18      	ldr	r3, [pc, #96]	; (84ef8 <udc_process_setup+0x5cc>)
   84e96:	781b      	ldrb	r3, [r3, #0]
   84e98:	b323      	cbz	r3, 84ee4 <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e9a:	4b18      	ldr	r3, [pc, #96]	; (84efc <udc_process_setup+0x5d0>)
   84e9c:	681a      	ldr	r2, [r3, #0]
   84e9e:	6813      	ldr	r3, [r2, #0]
   84ea0:	791b      	ldrb	r3, [r3, #4]
   84ea2:	b30b      	cbz	r3, 84ee8 <udc_process_setup+0x5bc>
   84ea4:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84ea6:	4e13      	ldr	r6, [pc, #76]	; (84ef4 <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84ea8:	4f14      	ldr	r7, [pc, #80]	; (84efc <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84eaa:	b2ec      	uxtb	r4, r5
   84eac:	6853      	ldr	r3, [r2, #4]
   84eae:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84eb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   84eb6:	4798      	blx	r3
   84eb8:	4601      	mov	r1, r0
   84eba:	4620      	mov	r0, r4
   84ebc:	47b0      	blx	r6
   84ebe:	4603      	mov	r3, r0
   84ec0:	2800      	cmp	r0, #0
   84ec2:	f43f ad57 	beq.w	84974 <udc_process_setup+0x48>
		if (udi_api->setup()) {
   84ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   84eca:	4798      	blx	r3
   84ecc:	4603      	mov	r3, r0
   84ece:	2800      	cmp	r0, #0
   84ed0:	f47f ad50 	bne.w	84974 <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84ed4:	683a      	ldr	r2, [r7, #0]
   84ed6:	3501      	adds	r5, #1
   84ed8:	6811      	ldr	r1, [r2, #0]
   84eda:	7908      	ldrb	r0, [r1, #4]
   84edc:	b2e9      	uxtb	r1, r5
   84ede:	4288      	cmp	r0, r1
   84ee0:	d8e3      	bhi.n	84eaa <udc_process_setup+0x57e>
   84ee2:	e547      	b.n	84974 <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   84ee4:	2300      	movs	r3, #0
   84ee6:	e545      	b.n	84974 <udc_process_setup+0x48>
	return false;
   84ee8:	2300      	movs	r3, #0
   84eea:	e543      	b.n	84974 <udc_process_setup+0x48>
			return false; // Error from USB host
   84eec:	2300      	movs	r3, #0
   84eee:	e541      	b.n	84974 <udc_process_setup+0x48>
	return false;
   84ef0:	2300      	movs	r3, #0
   84ef2:	e53f      	b.n	84974 <udc_process_setup+0x48>
   84ef4:	00084755 	.word	0x00084755
   84ef8:	20002287 	.word	0x20002287
   84efc:	20002288 	.word	0x20002288

00084f00 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84f00:	4b0b      	ldr	r3, [pc, #44]	; (84f30 <cpu_irq_enter_critical+0x30>)
   84f02:	681b      	ldr	r3, [r3, #0]
   84f04:	b92b      	cbnz	r3, 84f12 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f06:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   84f0a:	b13b      	cbz	r3, 84f1c <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   84f0c:	2200      	movs	r2, #0
   84f0e:	4b09      	ldr	r3, [pc, #36]	; (84f34 <cpu_irq_enter_critical+0x34>)
   84f10:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   84f12:	4a07      	ldr	r2, [pc, #28]	; (84f30 <cpu_irq_enter_critical+0x30>)
   84f14:	6813      	ldr	r3, [r2, #0]
   84f16:	3301      	adds	r3, #1
   84f18:	6013      	str	r3, [r2, #0]
   84f1a:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   84f1c:	b672      	cpsid	i
   84f1e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   84f22:	2200      	movs	r2, #0
   84f24:	4b04      	ldr	r3, [pc, #16]	; (84f38 <cpu_irq_enter_critical+0x38>)
   84f26:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   84f28:	2201      	movs	r2, #1
   84f2a:	4b02      	ldr	r3, [pc, #8]	; (84f34 <cpu_irq_enter_critical+0x34>)
   84f2c:	701a      	strb	r2, [r3, #0]
   84f2e:	e7f0      	b.n	84f12 <cpu_irq_enter_critical+0x12>
   84f30:	20002290 	.word	0x20002290
   84f34:	20002294 	.word	0x20002294
   84f38:	200006ee 	.word	0x200006ee

00084f3c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   84f3c:	4b07      	ldr	r3, [pc, #28]	; (84f5c <cpu_irq_leave_critical+0x20>)
   84f3e:	681a      	ldr	r2, [r3, #0]
   84f40:	3a01      	subs	r2, #1
   84f42:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   84f44:	681b      	ldr	r3, [r3, #0]
   84f46:	b943      	cbnz	r3, 84f5a <cpu_irq_leave_critical+0x1e>
   84f48:	4b05      	ldr	r3, [pc, #20]	; (84f60 <cpu_irq_leave_critical+0x24>)
   84f4a:	781b      	ldrb	r3, [r3, #0]
   84f4c:	b12b      	cbz	r3, 84f5a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   84f4e:	2201      	movs	r2, #1
   84f50:	4b04      	ldr	r3, [pc, #16]	; (84f64 <cpu_irq_leave_critical+0x28>)
   84f52:	701a      	strb	r2, [r3, #0]
   84f54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f58:	b662      	cpsie	i
   84f5a:	4770      	bx	lr
   84f5c:	20002290 	.word	0x20002290
   84f60:	20002294 	.word	0x20002294
   84f64:	200006ee 	.word	0x200006ee

00084f68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84f6c:	b980      	cbnz	r0, 84f90 <_read+0x28>
   84f6e:	460c      	mov	r4, r1
   84f70:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   84f72:	2a00      	cmp	r2, #0
   84f74:	dd0f      	ble.n	84f96 <_read+0x2e>
   84f76:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84f78:	4e08      	ldr	r6, [pc, #32]	; (84f9c <_read+0x34>)
   84f7a:	4d09      	ldr	r5, [pc, #36]	; (84fa0 <_read+0x38>)
   84f7c:	6830      	ldr	r0, [r6, #0]
   84f7e:	4621      	mov	r1, r4
   84f80:	682b      	ldr	r3, [r5, #0]
   84f82:	4798      	blx	r3
		ptr++;
   84f84:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   84f86:	42bc      	cmp	r4, r7
   84f88:	d1f8      	bne.n	84f7c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84f8a:	4640      	mov	r0, r8
   84f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84f90:	f04f 38ff 	mov.w	r8, #4294967295
   84f94:	e7f9      	b.n	84f8a <_read+0x22>
	for (; len > 0; --len) {
   84f96:	4680      	mov	r8, r0
   84f98:	e7f7      	b.n	84f8a <_read+0x22>
   84f9a:	bf00      	nop
   84f9c:	20002df0 	.word	0x20002df0
   84fa0:	20002de8 	.word	0x20002de8

00084fa4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   84fa4:	3801      	subs	r0, #1
   84fa6:	2802      	cmp	r0, #2
   84fa8:	d815      	bhi.n	84fd6 <_write+0x32>
{
   84faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84fae:	460e      	mov	r6, r1
   84fb0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   84fb2:	b19a      	cbz	r2, 84fdc <_write+0x38>
   84fb4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84fb6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84ff0 <_write+0x4c>
   84fba:	4f0c      	ldr	r7, [pc, #48]	; (84fec <_write+0x48>)
   84fbc:	f8d8 0000 	ldr.w	r0, [r8]
   84fc0:	f815 1b01 	ldrb.w	r1, [r5], #1
   84fc4:	683b      	ldr	r3, [r7, #0]
   84fc6:	4798      	blx	r3
   84fc8:	2800      	cmp	r0, #0
   84fca:	db0a      	blt.n	84fe2 <_write+0x3e>
   84fcc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84fce:	3c01      	subs	r4, #1
   84fd0:	d1f4      	bne.n	84fbc <_write+0x18>
   84fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84fd6:	f04f 30ff 	mov.w	r0, #4294967295
   84fda:	4770      	bx	lr
	for (; len != 0; --len) {
   84fdc:	4610      	mov	r0, r2
   84fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   84fe2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   84fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84fea:	bf00      	nop
   84fec:	20002dec 	.word	0x20002dec
   84ff0:	20002df0 	.word	0x20002df0

00084ff4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   84ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   84ff6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84ffa:	2006      	movs	r0, #6
   84ffc:	4c17      	ldr	r4, [pc, #92]	; (8505c <iopins_normal+0x68>)
   84ffe:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   85000:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85004:	2007      	movs	r0, #7
   85006:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   85008:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8500c:	201d      	movs	r0, #29
   8500e:	47a0      	blx	r4
	board_power(0);
   85010:	201d      	movs	r0, #29
   85012:	4b13      	ldr	r3, [pc, #76]	; (85060 <iopins_normal+0x6c>)
   85014:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   85016:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8501a:	2008      	movs	r0, #8
   8501c:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   8501e:	2008      	movs	r0, #8
   85020:	4e10      	ldr	r6, [pc, #64]	; (85064 <iopins_normal+0x70>)
   85022:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   85024:	4f10      	ldr	r7, [pc, #64]	; (85068 <iopins_normal+0x74>)
   85026:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8502a:	21ff      	movs	r1, #255	; 0xff
   8502c:	4638      	mov	r0, r7
   8502e:	4d0f      	ldr	r5, [pc, #60]	; (8506c <iopins_normal+0x78>)
   85030:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   85032:	21ff      	movs	r1, #255	; 0xff
   85034:	4638      	mov	r0, r7
   85036:	4b0e      	ldr	r3, [pc, #56]	; (85070 <iopins_normal+0x7c>)
   85038:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   8503a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8503e:	2035      	movs	r0, #53	; 0x35
   85040:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   85042:	2035      	movs	r0, #53	; 0x35
   85044:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   85046:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8504a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8504e:	4809      	ldr	r0, [pc, #36]	; (85074 <iopins_normal+0x80>)
   85050:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   85052:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85056:	201b      	movs	r0, #27
   85058:	47a0      	blx	r4
   8505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8505c:	00085215 	.word	0x00085215
   85060:	000851f9 	.word	0x000851f9
   85064:	000851df 	.word	0x000851df
   85068:	400e0e00 	.word	0x400e0e00
   8506c:	000852e5 	.word	0x000852e5
   85070:	000851b1 	.word	0x000851b1
   85074:	400e0c00 	.word	0x400e0c00

00085078 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   85078:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8507a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8507e:	4b05      	ldr	r3, [pc, #20]	; (85094 <board_init+0x1c>)
   85080:	605a      	str	r2, [r3, #4]
   85082:	200a      	movs	r0, #10
   85084:	4c04      	ldr	r4, [pc, #16]	; (85098 <board_init+0x20>)
   85086:	47a0      	blx	r4
   85088:	200b      	movs	r0, #11
   8508a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   8508c:	4b03      	ldr	r3, [pc, #12]	; (8509c <board_init+0x24>)
   8508e:	4798      	blx	r3
   85090:	bd10      	pop	{r4, pc}
   85092:	bf00      	nop
   85094:	400e1250 	.word	0x400e1250
   85098:	00085559 	.word	0x00085559
   8509c:	00084ff5 	.word	0x00084ff5

000850a0 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   850a0:	b510      	push	{r4, lr}
   850a2:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   850a4:	2806      	cmp	r0, #6
   850a6:	d002      	beq.n	850ae <LED_Off+0xe>
   850a8:	2c07      	cmp	r4, #7
   850aa:	d004      	beq.n	850b6 <LED_Off+0x16>
   850ac:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   850ae:	2006      	movs	r0, #6
   850b0:	4b03      	ldr	r3, [pc, #12]	; (850c0 <LED_Off+0x20>)
   850b2:	4798      	blx	r3
   850b4:	e7f8      	b.n	850a8 <LED_Off+0x8>
   850b6:	2007      	movs	r0, #7
   850b8:	4b01      	ldr	r3, [pc, #4]	; (850c0 <LED_Off+0x20>)
   850ba:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   850bc:	e7f6      	b.n	850ac <LED_Off+0xc>
   850be:	bf00      	nop
   850c0:	000851f9 	.word	0x000851f9

000850c4 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   850c4:	b510      	push	{r4, lr}
   850c6:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   850c8:	2806      	cmp	r0, #6
   850ca:	d002      	beq.n	850d2 <LED_On+0xe>
   850cc:	2c07      	cmp	r4, #7
   850ce:	d004      	beq.n	850da <LED_On+0x16>
   850d0:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   850d2:	2006      	movs	r0, #6
   850d4:	4b03      	ldr	r3, [pc, #12]	; (850e4 <LED_On+0x20>)
   850d6:	4798      	blx	r3
   850d8:	e7f8      	b.n	850cc <LED_On+0x8>
   850da:	2007      	movs	r0, #7
   850dc:	4b01      	ldr	r3, [pc, #4]	; (850e4 <LED_On+0x20>)
   850de:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   850e0:	e7f6      	b.n	850d0 <LED_On+0xc>
   850e2:	bf00      	nop
   850e4:	000851df 	.word	0x000851df

000850e8 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   850e8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850f0:	670a      	str	r2, [r1, #112]	; 0x70
   850f2:	4770      	bx	lr

000850f4 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   850f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   850f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   850fc:	674a      	str	r2, [r1, #116]	; 0x74
   850fe:	4770      	bx	lr

00085100 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   85100:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85108:	678a      	str	r2, [r1, #120]	; 0x78
   8510a:	4770      	bx	lr

0008510c <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8510c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   85110:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   85114:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   85118:	4770      	bx	lr

0008511a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8511a:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8511c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   85120:	d016      	beq.n	85150 <pio_set_peripheral+0x36>
   85122:	d80b      	bhi.n	8513c <pio_set_peripheral+0x22>
   85124:	b149      	cbz	r1, 8513a <pio_set_peripheral+0x20>
   85126:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8512a:	d105      	bne.n	85138 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8512c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8512e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   85130:	400b      	ands	r3, r1
   85132:	ea23 0302 	bic.w	r3, r3, r2
   85136:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   85138:	6042      	str	r2, [r0, #4]
   8513a:	4770      	bx	lr
	switch (ul_type) {
   8513c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   85140:	d0fb      	beq.n	8513a <pio_set_peripheral+0x20>
   85142:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   85146:	d0f8      	beq.n	8513a <pio_set_peripheral+0x20>
   85148:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8514c:	d1f4      	bne.n	85138 <pio_set_peripheral+0x1e>
   8514e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   85150:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   85152:	4313      	orrs	r3, r2
   85154:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   85156:	e7ef      	b.n	85138 <pio_set_peripheral+0x1e>

00085158 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   85158:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8515a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8515e:	bf14      	ite	ne
   85160:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85162:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   85164:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   85168:	bf14      	ite	ne
   8516a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8516c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8516e:	f012 0f02 	tst.w	r2, #2
   85172:	d107      	bne.n	85184 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   85174:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   85178:	bf18      	it	ne
   8517a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   8517e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   85180:	6001      	str	r1, [r0, #0]
   85182:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   85184:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   85188:	e7f9      	b.n	8517e <pio_set_input+0x26>

0008518a <pio_set_output>:
{
   8518a:	b410      	push	{r4}
   8518c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   8518e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   85190:	b944      	cbnz	r4, 851a4 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   85192:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   85194:	b143      	cbz	r3, 851a8 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   85196:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   85198:	b942      	cbnz	r2, 851ac <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8519a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8519c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8519e:	6001      	str	r1, [r0, #0]
}
   851a0:	bc10      	pop	{r4}
   851a2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   851a4:	6641      	str	r1, [r0, #100]	; 0x64
   851a6:	e7f5      	b.n	85194 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   851a8:	6541      	str	r1, [r0, #84]	; 0x54
   851aa:	e7f5      	b.n	85198 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   851ac:	6301      	str	r1, [r0, #48]	; 0x30
   851ae:	e7f5      	b.n	8519c <pio_set_output+0x12>

000851b0 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   851b0:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   851b4:	4770      	bx	lr

000851b6 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   851b6:	6381      	str	r1, [r0, #56]	; 0x38
   851b8:	4770      	bx	lr

000851ba <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   851ba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   851bc:	4770      	bx	lr

000851be <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   851be:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   851c0:	4770      	bx	lr

000851c2 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851c2:	0943      	lsrs	r3, r0, #5
   851c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851c8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851cc:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   851ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   851d0:	f000 001f 	and.w	r0, r0, #31
   851d4:	fa23 f000 	lsr.w	r0, r3, r0
}
   851d8:	f000 0001 	and.w	r0, r0, #1
   851dc:	4770      	bx	lr

000851de <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851de:	0943      	lsrs	r3, r0, #5
   851e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851e4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   851e8:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   851ea:	f000 001f 	and.w	r0, r0, #31
   851ee:	2201      	movs	r2, #1
   851f0:	fa02 f000 	lsl.w	r0, r2, r0
   851f4:	6318      	str	r0, [r3, #48]	; 0x30
   851f6:	4770      	bx	lr

000851f8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   851f8:	0943      	lsrs	r3, r0, #5
   851fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   851fe:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85202:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85204:	f000 001f 	and.w	r0, r0, #31
   85208:	2201      	movs	r2, #1
   8520a:	fa02 f000 	lsl.w	r0, r2, r0
   8520e:	6358      	str	r0, [r3, #52]	; 0x34
   85210:	4770      	bx	lr
	...

00085214 <pio_configure_pin>:
{
   85214:	b570      	push	{r4, r5, r6, lr}
   85216:	b082      	sub	sp, #8
   85218:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8521a:	0943      	lsrs	r3, r0, #5
   8521c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85220:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85224:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   85226:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8522a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8522e:	d031      	beq.n	85294 <pio_configure_pin+0x80>
   85230:	d816      	bhi.n	85260 <pio_configure_pin+0x4c>
   85232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85236:	d01b      	beq.n	85270 <pio_configure_pin+0x5c>
   85238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8523c:	d116      	bne.n	8526c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8523e:	f000 001f 	and.w	r0, r0, #31
   85242:	2601      	movs	r6, #1
   85244:	4086      	lsls	r6, r0
   85246:	4632      	mov	r2, r6
   85248:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8524c:	4620      	mov	r0, r4
   8524e:	4b22      	ldr	r3, [pc, #136]	; (852d8 <pio_configure_pin+0xc4>)
   85250:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85252:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   85256:	bf14      	ite	ne
   85258:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8525a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8525c:	2001      	movs	r0, #1
   8525e:	e017      	b.n	85290 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   85260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85264:	d021      	beq.n	852aa <pio_configure_pin+0x96>
   85266:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8526a:	d01e      	beq.n	852aa <pio_configure_pin+0x96>
		return 0;
   8526c:	2000      	movs	r0, #0
   8526e:	e00f      	b.n	85290 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   85270:	f000 001f 	and.w	r0, r0, #31
   85274:	2601      	movs	r6, #1
   85276:	4086      	lsls	r6, r0
   85278:	4632      	mov	r2, r6
   8527a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8527e:	4620      	mov	r0, r4
   85280:	4b15      	ldr	r3, [pc, #84]	; (852d8 <pio_configure_pin+0xc4>)
   85282:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85284:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   85288:	bf14      	ite	ne
   8528a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8528c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8528e:	2001      	movs	r0, #1
}
   85290:	b002      	add	sp, #8
   85292:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   85294:	f000 011f 	and.w	r1, r0, #31
   85298:	2601      	movs	r6, #1
   8529a:	462a      	mov	r2, r5
   8529c:	fa06 f101 	lsl.w	r1, r6, r1
   852a0:	4620      	mov	r0, r4
   852a2:	4b0e      	ldr	r3, [pc, #56]	; (852dc <pio_configure_pin+0xc8>)
   852a4:	4798      	blx	r3
	return 1;
   852a6:	4630      	mov	r0, r6
		break;
   852a8:	e7f2      	b.n	85290 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   852aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   852ae:	f000 011f 	and.w	r1, r0, #31
   852b2:	2601      	movs	r6, #1
   852b4:	ea05 0306 	and.w	r3, r5, r6
   852b8:	9300      	str	r3, [sp, #0]
   852ba:	f3c5 0380 	ubfx	r3, r5, #2, #1
   852be:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   852c2:	bf14      	ite	ne
   852c4:	2200      	movne	r2, #0
   852c6:	2201      	moveq	r2, #1
   852c8:	fa06 f101 	lsl.w	r1, r6, r1
   852cc:	4620      	mov	r0, r4
   852ce:	4c04      	ldr	r4, [pc, #16]	; (852e0 <pio_configure_pin+0xcc>)
   852d0:	47a0      	blx	r4
	return 1;
   852d2:	4630      	mov	r0, r6
		break;
   852d4:	e7dc      	b.n	85290 <pio_configure_pin+0x7c>
   852d6:	bf00      	nop
   852d8:	0008511b 	.word	0x0008511b
   852dc:	00085159 	.word	0x00085159
   852e0:	0008518b 	.word	0x0008518b

000852e4 <pio_configure_pin_group>:
{
   852e4:	b570      	push	{r4, r5, r6, lr}
   852e6:	b082      	sub	sp, #8
   852e8:	4605      	mov	r5, r0
   852ea:	460e      	mov	r6, r1
   852ec:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   852ee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   852f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   852f6:	d027      	beq.n	85348 <pio_configure_pin_group+0x64>
   852f8:	d811      	bhi.n	8531e <pio_configure_pin_group+0x3a>
   852fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   852fe:	d016      	beq.n	8532e <pio_configure_pin_group+0x4a>
   85300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85304:	d111      	bne.n	8532a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   85306:	460a      	mov	r2, r1
   85308:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8530c:	4b19      	ldr	r3, [pc, #100]	; (85374 <pio_configure_pin_group+0x90>)
   8530e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85310:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   85314:	bf14      	ite	ne
   85316:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85318:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8531a:	2001      	movs	r0, #1
   8531c:	e012      	b.n	85344 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8531e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85322:	d015      	beq.n	85350 <pio_configure_pin_group+0x6c>
   85324:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85328:	d012      	beq.n	85350 <pio_configure_pin_group+0x6c>
		return 0;
   8532a:	2000      	movs	r0, #0
   8532c:	e00a      	b.n	85344 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8532e:	460a      	mov	r2, r1
   85330:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85334:	4b0f      	ldr	r3, [pc, #60]	; (85374 <pio_configure_pin_group+0x90>)
   85336:	4798      	blx	r3
	if (ul_pull_up_enable) {
   85338:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8533c:	bf14      	ite	ne
   8533e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   85340:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   85342:	2001      	movs	r0, #1
}
   85344:	b002      	add	sp, #8
   85346:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   85348:	4b0b      	ldr	r3, [pc, #44]	; (85378 <pio_configure_pin_group+0x94>)
   8534a:	4798      	blx	r3
	return 1;
   8534c:	2001      	movs	r0, #1
		break;
   8534e:	e7f9      	b.n	85344 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85350:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   85354:	f004 0301 	and.w	r3, r4, #1
   85358:	9300      	str	r3, [sp, #0]
   8535a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8535e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   85362:	bf14      	ite	ne
   85364:	2200      	movne	r2, #0
   85366:	2201      	moveq	r2, #1
   85368:	4631      	mov	r1, r6
   8536a:	4628      	mov	r0, r5
   8536c:	4c03      	ldr	r4, [pc, #12]	; (8537c <pio_configure_pin_group+0x98>)
   8536e:	47a0      	blx	r4
	return 1;
   85370:	2001      	movs	r0, #1
		break;
   85372:	e7e7      	b.n	85344 <pio_configure_pin_group+0x60>
   85374:	0008511b 	.word	0x0008511b
   85378:	00085159 	.word	0x00085159
   8537c:	0008518b 	.word	0x0008518b

00085380 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   85380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85384:	4604      	mov	r4, r0
   85386:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   85388:	4b0e      	ldr	r3, [pc, #56]	; (853c4 <pio_handler_process+0x44>)
   8538a:	4798      	blx	r3
   8538c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8538e:	4620      	mov	r0, r4
   85390:	4b0d      	ldr	r3, [pc, #52]	; (853c8 <pio_handler_process+0x48>)
   85392:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   85394:	4005      	ands	r5, r0
   85396:	d013      	beq.n	853c0 <pio_handler_process+0x40>
   85398:	4c0c      	ldr	r4, [pc, #48]	; (853cc <pio_handler_process+0x4c>)
   8539a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8539e:	e003      	b.n	853a8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   853a0:	42b4      	cmp	r4, r6
   853a2:	d00d      	beq.n	853c0 <pio_handler_process+0x40>
   853a4:	3410      	adds	r4, #16
		while (status != 0) {
   853a6:	b15d      	cbz	r5, 853c0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   853a8:	6820      	ldr	r0, [r4, #0]
   853aa:	4540      	cmp	r0, r8
   853ac:	d1f8      	bne.n	853a0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   853ae:	6861      	ldr	r1, [r4, #4]
   853b0:	4229      	tst	r1, r5
   853b2:	d0f5      	beq.n	853a0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   853b4:	68e3      	ldr	r3, [r4, #12]
   853b6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   853b8:	6863      	ldr	r3, [r4, #4]
   853ba:	ea25 0503 	bic.w	r5, r5, r3
   853be:	e7ef      	b.n	853a0 <pio_handler_process+0x20>
   853c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853c4:	000851bb 	.word	0x000851bb
   853c8:	000851bf 	.word	0x000851bf
   853cc:	20002298 	.word	0x20002298

000853d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   853d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   853d2:	210a      	movs	r1, #10
   853d4:	4801      	ldr	r0, [pc, #4]	; (853dc <PIOA_Handler+0xc>)
   853d6:	4b02      	ldr	r3, [pc, #8]	; (853e0 <PIOA_Handler+0x10>)
   853d8:	4798      	blx	r3
   853da:	bd08      	pop	{r3, pc}
   853dc:	400e0c00 	.word	0x400e0c00
   853e0:	00085381 	.word	0x00085381

000853e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   853e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   853e6:	210b      	movs	r1, #11
   853e8:	4801      	ldr	r0, [pc, #4]	; (853f0 <PIOB_Handler+0xc>)
   853ea:	4b02      	ldr	r3, [pc, #8]	; (853f4 <PIOB_Handler+0x10>)
   853ec:	4798      	blx	r3
   853ee:	bd08      	pop	{r3, pc}
   853f0:	400e0e00 	.word	0x400e0e00
   853f4:	00085381 	.word	0x00085381

000853f8 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   853f8:	4a17      	ldr	r2, [pc, #92]	; (85458 <pmc_switch_mck_to_mainck+0x60>)
   853fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   853fc:	f023 0303 	bic.w	r3, r3, #3
   85400:	f043 0301 	orr.w	r3, r3, #1
   85404:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85406:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85408:	f013 0f08 	tst.w	r3, #8
   8540c:	d10a      	bne.n	85424 <pmc_switch_mck_to_mainck+0x2c>
   8540e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85412:	4911      	ldr	r1, [pc, #68]	; (85458 <pmc_switch_mck_to_mainck+0x60>)
   85414:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85416:	f012 0f08 	tst.w	r2, #8
   8541a:	d103      	bne.n	85424 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8541c:	3b01      	subs	r3, #1
   8541e:	d1f9      	bne.n	85414 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   85420:	2001      	movs	r0, #1
   85422:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   85424:	4a0c      	ldr	r2, [pc, #48]	; (85458 <pmc_switch_mck_to_mainck+0x60>)
   85426:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8542c:	4318      	orrs	r0, r3
   8542e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85430:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85432:	f013 0f08 	tst.w	r3, #8
   85436:	d10a      	bne.n	8544e <pmc_switch_mck_to_mainck+0x56>
   85438:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8543c:	4906      	ldr	r1, [pc, #24]	; (85458 <pmc_switch_mck_to_mainck+0x60>)
   8543e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85440:	f012 0f08 	tst.w	r2, #8
   85444:	d105      	bne.n	85452 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85446:	3b01      	subs	r3, #1
   85448:	d1f9      	bne.n	8543e <pmc_switch_mck_to_mainck+0x46>
			return 1;
   8544a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8544c:	4770      	bx	lr
	return 0;
   8544e:	2000      	movs	r0, #0
   85450:	4770      	bx	lr
   85452:	2000      	movs	r0, #0
   85454:	4770      	bx	lr
   85456:	bf00      	nop
   85458:	400e0400 	.word	0x400e0400

0008545c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8545c:	4a17      	ldr	r2, [pc, #92]	; (854bc <pmc_switch_mck_to_pllack+0x60>)
   8545e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   85460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85464:	4318      	orrs	r0, r3
   85466:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85468:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8546a:	f013 0f08 	tst.w	r3, #8
   8546e:	d10a      	bne.n	85486 <pmc_switch_mck_to_pllack+0x2a>
   85470:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85474:	4911      	ldr	r1, [pc, #68]	; (854bc <pmc_switch_mck_to_pllack+0x60>)
   85476:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   85478:	f012 0f08 	tst.w	r2, #8
   8547c:	d103      	bne.n	85486 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8547e:	3b01      	subs	r3, #1
   85480:	d1f9      	bne.n	85476 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   85482:	2001      	movs	r0, #1
   85484:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85486:	4a0d      	ldr	r2, [pc, #52]	; (854bc <pmc_switch_mck_to_pllack+0x60>)
   85488:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8548a:	f023 0303 	bic.w	r3, r3, #3
   8548e:	f043 0302 	orr.w	r3, r3, #2
   85492:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85494:	6e93      	ldr	r3, [r2, #104]	; 0x68
   85496:	f013 0f08 	tst.w	r3, #8
   8549a:	d10a      	bne.n	854b2 <pmc_switch_mck_to_pllack+0x56>
   8549c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   854a0:	4906      	ldr	r1, [pc, #24]	; (854bc <pmc_switch_mck_to_pllack+0x60>)
   854a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   854a4:	f012 0f08 	tst.w	r2, #8
   854a8:	d105      	bne.n	854b6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   854aa:	3b01      	subs	r3, #1
   854ac:	d1f9      	bne.n	854a2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   854ae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   854b0:	4770      	bx	lr
	return 0;
   854b2:	2000      	movs	r0, #0
   854b4:	4770      	bx	lr
   854b6:	2000      	movs	r0, #0
   854b8:	4770      	bx	lr
   854ba:	bf00      	nop
   854bc:	400e0400 	.word	0x400e0400

000854c0 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   854c0:	4a08      	ldr	r2, [pc, #32]	; (854e4 <pmc_osc_enable_main_xtal+0x24>)
   854c2:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   854c4:	f023 0303 	bic.w	r3, r3, #3
   854c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854cc:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   854d0:	0200      	lsls	r0, r0, #8
   854d2:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   854d4:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   854d6:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   854d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   854da:	f013 0f01 	tst.w	r3, #1
   854de:	d0fb      	beq.n	854d8 <pmc_osc_enable_main_xtal+0x18>
}
   854e0:	4770      	bx	lr
   854e2:	bf00      	nop
   854e4:	400e0400 	.word	0x400e0400

000854e8 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   854e8:	4b02      	ldr	r3, [pc, #8]	; (854f4 <pmc_osc_is_ready_main_xtal+0xc>)
   854ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854ec:	f000 0001 	and.w	r0, r0, #1
   854f0:	4770      	bx	lr
   854f2:	bf00      	nop
   854f4:	400e0400 	.word	0x400e0400

000854f8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   854f8:	4b02      	ldr	r3, [pc, #8]	; (85504 <pmc_osc_is_ready_mainck+0xc>)
   854fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   854fc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   85500:	4770      	bx	lr
   85502:	bf00      	nop
   85504:	400e0400 	.word	0x400e0400

00085508 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   85508:	4b06      	ldr	r3, [pc, #24]	; (85524 <pmc_mainck_osc_select+0x1c>)
   8550a:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   8550c:	b930      	cbnz	r0, 8551c <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8550e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   85512:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85516:	4a03      	ldr	r2, [pc, #12]	; (85524 <pmc_mainck_osc_select+0x1c>)
   85518:	6213      	str	r3, [r2, #32]
   8551a:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   8551c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   85520:	e7f7      	b.n	85512 <pmc_mainck_osc_select+0xa>
   85522:	bf00      	nop
   85524:	400e0400 	.word	0x400e0400

00085528 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85528:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8552c:	4b01      	ldr	r3, [pc, #4]	; (85534 <pmc_disable_pllack+0xc>)
   8552e:	629a      	str	r2, [r3, #40]	; 0x28
   85530:	4770      	bx	lr
   85532:	bf00      	nop
   85534:	400e0400 	.word	0x400e0400

00085538 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   85538:	4b02      	ldr	r3, [pc, #8]	; (85544 <pmc_is_locked_pllack+0xc>)
   8553a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8553c:	f000 0002 	and.w	r0, r0, #2
   85540:	4770      	bx	lr
   85542:	bf00      	nop
   85544:	400e0400 	.word	0x400e0400

00085548 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   85548:	4b02      	ldr	r3, [pc, #8]	; (85554 <pmc_is_locked_upll+0xc>)
   8554a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8554c:	f000 0040 	and.w	r0, r0, #64	; 0x40
   85550:	4770      	bx	lr
   85552:	bf00      	nop
   85554:	400e0400 	.word	0x400e0400

00085558 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   85558:	281d      	cmp	r0, #29
   8555a:	d80e      	bhi.n	8557a <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   8555c:	281f      	cmp	r0, #31
   8555e:	d80e      	bhi.n	8557e <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   85560:	4b09      	ldr	r3, [pc, #36]	; (85588 <pmc_enable_periph_clk+0x30>)
   85562:	699a      	ldr	r2, [r3, #24]
   85564:	2301      	movs	r3, #1
   85566:	4083      	lsls	r3, r0
   85568:	4393      	bics	r3, r2
   8556a:	d00a      	beq.n	85582 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8556c:	2301      	movs	r3, #1
   8556e:	fa03 f000 	lsl.w	r0, r3, r0
   85572:	4b05      	ldr	r3, [pc, #20]	; (85588 <pmc_enable_periph_clk+0x30>)
   85574:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   85576:	2000      	movs	r0, #0
   85578:	4770      	bx	lr
		return 1;
   8557a:	2001      	movs	r0, #1
   8557c:	4770      	bx	lr
	return 0;
   8557e:	2000      	movs	r0, #0
   85580:	4770      	bx	lr
   85582:	2000      	movs	r0, #0
}
   85584:	4770      	bx	lr
   85586:	bf00      	nop
   85588:	400e0400 	.word	0x400e0400

0008558c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8558c:	281d      	cmp	r0, #29
   8558e:	d810      	bhi.n	855b2 <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   85590:	281f      	cmp	r0, #31
   85592:	d810      	bhi.n	855b6 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   85594:	4b09      	ldr	r3, [pc, #36]	; (855bc <pmc_disable_periph_clk+0x30>)
   85596:	699a      	ldr	r2, [r3, #24]
   85598:	2301      	movs	r3, #1
   8559a:	4083      	lsls	r3, r0
   8559c:	4393      	bics	r3, r2
   8559e:	d001      	beq.n	855a4 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   855a0:	2000      	movs	r0, #0
}
   855a2:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   855a4:	2301      	movs	r3, #1
   855a6:	fa03 f000 	lsl.w	r0, r3, r0
   855aa:	4b04      	ldr	r3, [pc, #16]	; (855bc <pmc_disable_periph_clk+0x30>)
   855ac:	6158      	str	r0, [r3, #20]
	return 0;
   855ae:	2000      	movs	r0, #0
   855b0:	4770      	bx	lr
		return 1;
   855b2:	2001      	movs	r0, #1
   855b4:	4770      	bx	lr
	return 0;
   855b6:	2000      	movs	r0, #0
   855b8:	4770      	bx	lr
   855ba:	bf00      	nop
   855bc:	400e0400 	.word	0x400e0400

000855c0 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   855c0:	f44f 7380 	mov.w	r3, #256	; 0x100
   855c4:	fa03 f000 	lsl.w	r0, r3, r0
   855c8:	4b01      	ldr	r3, [pc, #4]	; (855d0 <pmc_enable_pck+0x10>)
   855ca:	6018      	str	r0, [r3, #0]
   855cc:	4770      	bx	lr
   855ce:	bf00      	nop
   855d0:	400e0400 	.word	0x400e0400

000855d4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   855d4:	4b03      	ldr	r3, [pc, #12]	; (855e4 <pmc_set_fast_startup_input+0x10>)
   855d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   855d8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   855dc:	4310      	orrs	r0, r2
   855de:	6718      	str	r0, [r3, #112]	; 0x70
   855e0:	4770      	bx	lr
   855e2:	bf00      	nop
   855e4:	400e0400 	.word	0x400e0400

000855e8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   855e8:	4b02      	ldr	r3, [pc, #8]	; (855f4 <pmc_is_wakeup_clocks_restored+0xc>)
   855ea:	7818      	ldrb	r0, [r3, #0]
}
   855ec:	f080 0001 	eor.w	r0, r0, #1
   855f0:	4770      	bx	lr
   855f2:	bf00      	nop
   855f4:	20002308 	.word	0x20002308

000855f8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   855f8:	b508      	push	{r3, lr}
   855fa:	2014      	movs	r0, #20
   855fc:	4b01      	ldr	r3, [pc, #4]	; (85604 <spi_enable_clock+0xc>)
   855fe:	4798      	blx	r3
   85600:	bd08      	pop	{r3, pc}
   85602:	bf00      	nop
   85604:	00085559 	.word	0x00085559

00085608 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   85608:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   8560a:	2014      	movs	r0, #20
   8560c:	4b01      	ldr	r3, [pc, #4]	; (85614 <spi_disable_clock+0xc>)
   8560e:	4798      	blx	r3
   85610:	bd08      	pop	{r3, pc}
   85612:	bf00      	nop
   85614:	0008558d 	.word	0x0008558d

00085618 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   85618:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   8561a:	f643 2399 	movw	r3, #15001	; 0x3a99
   8561e:	6904      	ldr	r4, [r0, #16]
   85620:	f014 0f01 	tst.w	r4, #1
   85624:	d103      	bne.n	8562e <spi_read+0x16>
		if (!timeout--) {
   85626:	3b01      	subs	r3, #1
   85628:	d1f9      	bne.n	8561e <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   8562a:	2001      	movs	r0, #1
   8562c:	e009      	b.n	85642 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   8562e:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   85630:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   85632:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   85636:	bf1c      	itt	ne
   85638:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   8563c:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   8563e:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   85640:	2000      	movs	r0, #0
}
   85642:	bc10      	pop	{r4}
   85644:	4770      	bx	lr

00085646 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   85646:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   85648:	f643 2499 	movw	r4, #15001	; 0x3a99
   8564c:	6905      	ldr	r5, [r0, #16]
   8564e:	f015 0f02 	tst.w	r5, #2
   85652:	d103      	bne.n	8565c <spi_write+0x16>
		if (!timeout--) {
   85654:	3c01      	subs	r4, #1
   85656:	d1f9      	bne.n	8564c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   85658:	2001      	movs	r0, #1
   8565a:	e00c      	b.n	85676 <spi_write+0x30>
   8565c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   8565e:	f014 0f02 	tst.w	r4, #2
   85662:	d006      	beq.n	85672 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   85664:	0412      	lsls	r2, r2, #16
   85666:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8566a:	4311      	orrs	r1, r2
		if (uc_last) {
   8566c:	b10b      	cbz	r3, 85672 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   8566e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   85672:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   85674:	2000      	movs	r0, #0
}
   85676:	bc30      	pop	{r4, r5}
   85678:	4770      	bx	lr

0008567a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   8567a:	b932      	cbnz	r2, 8568a <spi_set_clock_polarity+0x10>
   8567c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   85680:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85682:	f023 0301 	bic.w	r3, r3, #1
   85686:	6303      	str	r3, [r0, #48]	; 0x30
   85688:	4770      	bx	lr
   8568a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8568e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   85690:	f043 0301 	orr.w	r3, r3, #1
   85694:	6303      	str	r3, [r0, #48]	; 0x30
   85696:	4770      	bx	lr

00085698 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   85698:	b932      	cbnz	r2, 856a8 <spi_set_clock_phase+0x10>
   8569a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8569e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   856a0:	f023 0302 	bic.w	r3, r3, #2
   856a4:	6303      	str	r3, [r0, #48]	; 0x30
   856a6:	4770      	bx	lr
   856a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   856ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   856ae:	f043 0302 	orr.w	r3, r3, #2
   856b2:	6303      	str	r3, [r0, #48]	; 0x30
   856b4:	4770      	bx	lr

000856b6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   856b6:	1e43      	subs	r3, r0, #1
   856b8:	4419      	add	r1, r3
   856ba:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   856be:	1e43      	subs	r3, r0, #1
   856c0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   856c2:	bf94      	ite	ls
   856c4:	b200      	sxthls	r0, r0
		return -1;
   856c6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   856ca:	4770      	bx	lr

000856cc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   856cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   856d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   856d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   856d6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   856d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   856da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   856de:	630a      	str	r2, [r1, #48]	; 0x30
   856e0:	4770      	bx	lr
	...

000856e4 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   856e4:	4603      	mov	r3, r0
   856e6:	b9c0      	cbnz	r0, 8571a <udd_sleep_mode+0x36>
   856e8:	4a18      	ldr	r2, [pc, #96]	; (8574c <udd_sleep_mode+0x68>)
   856ea:	7812      	ldrb	r2, [r2, #0]
   856ec:	b192      	cbz	r2, 85714 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856ee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   856f2:	b672      	cpsid	i
   856f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856f8:	4a15      	ldr	r2, [pc, #84]	; (85750 <udd_sleep_mode+0x6c>)
   856fa:	2100      	movs	r1, #0
   856fc:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   856fe:	4915      	ldr	r1, [pc, #84]	; (85754 <udd_sleep_mode+0x70>)
   85700:	788a      	ldrb	r2, [r1, #2]
   85702:	3a01      	subs	r2, #1
   85704:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85706:	b928      	cbnz	r0, 85714 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   85708:	4a11      	ldr	r2, [pc, #68]	; (85750 <udd_sleep_mode+0x6c>)
   8570a:	2101      	movs	r1, #1
   8570c:	7011      	strb	r1, [r2, #0]
   8570e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85712:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   85714:	4a0d      	ldr	r2, [pc, #52]	; (8574c <udd_sleep_mode+0x68>)
   85716:	7013      	strb	r3, [r2, #0]
}
   85718:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   8571a:	4a0c      	ldr	r2, [pc, #48]	; (8574c <udd_sleep_mode+0x68>)
   8571c:	7812      	ldrb	r2, [r2, #0]
   8571e:	2a00      	cmp	r2, #0
   85720:	d1f8      	bne.n	85714 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85722:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   85726:	b672      	cpsid	i
   85728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8572c:	4a08      	ldr	r2, [pc, #32]	; (85750 <udd_sleep_mode+0x6c>)
   8572e:	2100      	movs	r1, #0
   85730:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   85732:	4908      	ldr	r1, [pc, #32]	; (85754 <udd_sleep_mode+0x70>)
   85734:	788a      	ldrb	r2, [r1, #2]
   85736:	3201      	adds	r2, #1
   85738:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8573a:	2800      	cmp	r0, #0
   8573c:	d1ea      	bne.n	85714 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   8573e:	4a04      	ldr	r2, [pc, #16]	; (85750 <udd_sleep_mode+0x6c>)
   85740:	2101      	movs	r1, #1
   85742:	7011      	strb	r1, [r2, #0]
   85744:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85748:	b662      	cpsie	i
}
   8574a:	e7e3      	b.n	85714 <udd_sleep_mode+0x30>
   8574c:	2000230a 	.word	0x2000230a
   85750:	200006ee 	.word	0x200006ee
   85754:	20002de0 	.word	0x20002de0

00085758 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85758:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8575c:	b672      	cpsid	i
   8575e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85762:	4a0e      	ldr	r2, [pc, #56]	; (8579c <udd_ctrl_init+0x44>)
   85764:	2100      	movs	r1, #0
   85766:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   85768:	4a0d      	ldr	r2, [pc, #52]	; (857a0 <udd_ctrl_init+0x48>)
   8576a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8576e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   85772:	b92b      	cbnz	r3, 85780 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   85774:	4b09      	ldr	r3, [pc, #36]	; (8579c <udd_ctrl_init+0x44>)
   85776:	2201      	movs	r2, #1
   85778:	701a      	strb	r2, [r3, #0]
   8577a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8577e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85780:	4b07      	ldr	r3, [pc, #28]	; (857a0 <udd_ctrl_init+0x48>)
   85782:	f44f 7200 	mov.w	r2, #512	; 0x200
   85786:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8578a:	4a06      	ldr	r2, [pc, #24]	; (857a4 <udd_ctrl_init+0x4c>)
   8578c:	2300      	movs	r3, #0
   8578e:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85790:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   85792:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85794:	4a04      	ldr	r2, [pc, #16]	; (857a8 <udd_ctrl_init+0x50>)
   85796:	7013      	strb	r3, [r2, #0]
}
   85798:	4770      	bx	lr
   8579a:	bf00      	nop
   8579c:	200006ee 	.word	0x200006ee
   857a0:	400a4000 	.word	0x400a4000
   857a4:	20002df4 	.word	0x20002df4
   857a8:	20002310 	.word	0x20002310

000857ac <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   857ac:	4b03      	ldr	r3, [pc, #12]	; (857bc <udd_ctrl_stall_data+0x10>)
   857ae:	2205      	movs	r2, #5
   857b0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   857b2:	4b03      	ldr	r3, [pc, #12]	; (857c0 <udd_ctrl_stall_data+0x14>)
   857b4:	2220      	movs	r2, #32
   857b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   857ba:	4770      	bx	lr
   857bc:	20002310 	.word	0x20002310
   857c0:	400a4000 	.word	0x400a4000

000857c4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   857c4:	4b11      	ldr	r3, [pc, #68]	; (8580c <udd_ctrl_send_zlp_in+0x48>)
   857c6:	2203      	movs	r2, #3
   857c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   857ca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   857ce:	b672      	cpsid	i
   857d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   857d4:	4b0e      	ldr	r3, [pc, #56]	; (85810 <udd_ctrl_send_zlp_in+0x4c>)
   857d6:	2200      	movs	r2, #0
   857d8:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   857da:	4b0e      	ldr	r3, [pc, #56]	; (85814 <udd_ctrl_send_zlp_in+0x50>)
   857dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   857e0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   857e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   857e8:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   857ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   857f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   857f4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   857f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   857fc:	b929      	cbnz	r1, 8580a <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   857fe:	4b04      	ldr	r3, [pc, #16]	; (85810 <udd_ctrl_send_zlp_in+0x4c>)
   85800:	2201      	movs	r2, #1
   85802:	701a      	strb	r2, [r3, #0]
   85804:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85808:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   8580a:	4770      	bx	lr
   8580c:	20002310 	.word	0x20002310
   85810:	200006ee 	.word	0x200006ee
   85814:	400a4000 	.word	0x400a4000

00085818 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   85818:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8581a:	4b02      	ldr	r3, [pc, #8]	; (85824 <udd_ctrl_endofrequest+0xc>)
   8581c:	691b      	ldr	r3, [r3, #16]
   8581e:	b103      	cbz	r3, 85822 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   85820:	4798      	blx	r3
	}
}
   85822:	bd08      	pop	{r3, pc}
   85824:	20002df4 	.word	0x20002df4

00085828 <udd_ctrl_in_sent>:
{
   85828:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8582a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8582e:	b672      	cpsid	i
   85830:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85834:	4a4c      	ldr	r2, [pc, #304]	; (85968 <udd_ctrl_in_sent+0x140>)
   85836:	2100      	movs	r1, #0
   85838:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   8583a:	4a4c      	ldr	r2, [pc, #304]	; (8596c <udd_ctrl_in_sent+0x144>)
   8583c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   85840:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   85844:	b92b      	cbnz	r3, 85852 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   85846:	4b48      	ldr	r3, [pc, #288]	; (85968 <udd_ctrl_in_sent+0x140>)
   85848:	2201      	movs	r2, #1
   8584a:	701a      	strb	r2, [r3, #0]
   8584c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85850:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85852:	4b47      	ldr	r3, [pc, #284]	; (85970 <udd_ctrl_in_sent+0x148>)
   85854:	781b      	ldrb	r3, [r3, #0]
   85856:	2b03      	cmp	r3, #3
   85858:	d05a      	beq.n	85910 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8585a:	4b46      	ldr	r3, [pc, #280]	; (85974 <udd_ctrl_in_sent+0x14c>)
   8585c:	881b      	ldrh	r3, [r3, #0]
   8585e:	4a46      	ldr	r2, [pc, #280]	; (85978 <udd_ctrl_in_sent+0x150>)
   85860:	8994      	ldrh	r4, [r2, #12]
   85862:	1ae4      	subs	r4, r4, r3
   85864:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   85866:	b9c4      	cbnz	r4, 8589a <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85868:	4a44      	ldr	r2, [pc, #272]	; (8597c <udd_ctrl_in_sent+0x154>)
   8586a:	8811      	ldrh	r1, [r2, #0]
   8586c:	440b      	add	r3, r1
   8586e:	b29b      	uxth	r3, r3
   85870:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   85872:	4a41      	ldr	r2, [pc, #260]	; (85978 <udd_ctrl_in_sent+0x150>)
   85874:	88d2      	ldrh	r2, [r2, #6]
   85876:	429a      	cmp	r2, r3
   85878:	d04f      	beq.n	8591a <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   8587a:	4b41      	ldr	r3, [pc, #260]	; (85980 <udd_ctrl_in_sent+0x158>)
   8587c:	781b      	ldrb	r3, [r3, #0]
   8587e:	2b00      	cmp	r3, #0
   85880:	d14b      	bne.n	8591a <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   85882:	4b3d      	ldr	r3, [pc, #244]	; (85978 <udd_ctrl_in_sent+0x150>)
   85884:	695b      	ldr	r3, [r3, #20]
   85886:	2b00      	cmp	r3, #0
   85888:	d06c      	beq.n	85964 <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8588a:	4798      	blx	r3
   8588c:	2800      	cmp	r0, #0
   8588e:	d069      	beq.n	85964 <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   85890:	4b38      	ldr	r3, [pc, #224]	; (85974 <udd_ctrl_in_sent+0x14c>)
   85892:	2200      	movs	r2, #0
   85894:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   85896:	4b38      	ldr	r3, [pc, #224]	; (85978 <udd_ctrl_in_sent+0x150>)
   85898:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8589a:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   8589c:	bf92      	itee	ls
   8589e:	2201      	movls	r2, #1
		b_shortpacket = false;
   858a0:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   858a2:	2440      	movhi	r4, #64	; 0x40
   858a4:	4b36      	ldr	r3, [pc, #216]	; (85980 <udd_ctrl_in_sent+0x158>)
   858a6:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   858a8:	4b33      	ldr	r3, [pc, #204]	; (85978 <udd_ctrl_in_sent+0x150>)
   858aa:	689a      	ldr	r2, [r3, #8]
   858ac:	4b31      	ldr	r3, [pc, #196]	; (85974 <udd_ctrl_in_sent+0x14c>)
   858ae:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858b0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   858b4:	b672      	cpsid	i
   858b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858ba:	4b2b      	ldr	r3, [pc, #172]	; (85968 <udd_ctrl_in_sent+0x140>)
   858bc:	2100      	movs	r1, #0
   858be:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   858c0:	4b2a      	ldr	r3, [pc, #168]	; (8596c <udd_ctrl_in_sent+0x144>)
   858c2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   858c6:	f413 7f00 	tst.w	r3, #512	; 0x200
   858ca:	d140      	bne.n	8594e <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   858cc:	b14c      	cbz	r4, 858e2 <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   858ce:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   858d0:	4b2c      	ldr	r3, [pc, #176]	; (85984 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   858d2:	4619      	mov	r1, r3
   858d4:	3301      	adds	r3, #1
   858d6:	f812 0b01 	ldrb.w	r0, [r2], #1
   858da:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   858dc:	b2d9      	uxtb	r1, r3
   858de:	42a1      	cmp	r1, r4
   858e0:	d3f7      	bcc.n	858d2 <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   858e2:	4a24      	ldr	r2, [pc, #144]	; (85974 <udd_ctrl_in_sent+0x14c>)
   858e4:	8813      	ldrh	r3, [r2, #0]
   858e6:	441c      	add	r4, r3
   858e8:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   858ea:	4b20      	ldr	r3, [pc, #128]	; (8596c <udd_ctrl_in_sent+0x144>)
   858ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   858f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   858f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
   858f8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   858fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85900:	bb7d      	cbnz	r5, 85962 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   85902:	4b19      	ldr	r3, [pc, #100]	; (85968 <udd_ctrl_in_sent+0x140>)
   85904:	2201      	movs	r2, #1
   85906:	701a      	strb	r2, [r3, #0]
   85908:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8590c:	b662      	cpsie	i
}
   8590e:	e028      	b.n	85962 <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   85910:	4b1d      	ldr	r3, [pc, #116]	; (85988 <udd_ctrl_in_sent+0x160>)
   85912:	4798      	blx	r3
		udd_ctrl_init();
   85914:	4b1d      	ldr	r3, [pc, #116]	; (8598c <udd_ctrl_in_sent+0x164>)
   85916:	4798      	blx	r3
		return;
   85918:	e023      	b.n	85962 <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8591a:	4b15      	ldr	r3, [pc, #84]	; (85970 <udd_ctrl_in_sent+0x148>)
   8591c:	2204      	movs	r2, #4
   8591e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85920:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85924:	b672      	cpsid	i
   85926:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8592a:	4b0f      	ldr	r3, [pc, #60]	; (85968 <udd_ctrl_in_sent+0x140>)
   8592c:	2200      	movs	r2, #0
   8592e:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   85930:	4b0e      	ldr	r3, [pc, #56]	; (8596c <udd_ctrl_in_sent+0x144>)
   85932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85936:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8593a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8593e:	b981      	cbnz	r1, 85962 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   85940:	4b09      	ldr	r3, [pc, #36]	; (85968 <udd_ctrl_in_sent+0x140>)
   85942:	2201      	movs	r2, #1
   85944:	701a      	strb	r2, [r3, #0]
   85946:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8594a:	b662      	cpsie	i
}
   8594c:	e009      	b.n	85962 <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   8594e:	b92d      	cbnz	r5, 8595c <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   85950:	4b05      	ldr	r3, [pc, #20]	; (85968 <udd_ctrl_in_sent+0x140>)
   85952:	2201      	movs	r2, #1
   85954:	701a      	strb	r2, [r3, #0]
   85956:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8595a:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8595c:	4b04      	ldr	r3, [pc, #16]	; (85970 <udd_ctrl_in_sent+0x148>)
   8595e:	2204      	movs	r2, #4
   85960:	701a      	strb	r2, [r3, #0]
}
   85962:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   85964:	2201      	movs	r2, #1
   85966:	e79d      	b.n	858a4 <udd_ctrl_in_sent+0x7c>
   85968:	200006ee 	.word	0x200006ee
   8596c:	400a4000 	.word	0x400a4000
   85970:	20002310 	.word	0x20002310
   85974:	2000230c 	.word	0x2000230c
   85978:	20002df4 	.word	0x20002df4
   8597c:	2000230e 	.word	0x2000230e
   85980:	20002309 	.word	0x20002309
   85984:	20180000 	.word	0x20180000
   85988:	00085819 	.word	0x00085819
   8598c:	00085759 	.word	0x00085759

00085990 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85990:	b538      	push	{r3, r4, r5, lr}
   85992:	4603      	mov	r3, r0
   85994:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   85996:	7d19      	ldrb	r1, [r3, #20]
   85998:	f011 0f01 	tst.w	r1, #1
   8599c:	d011      	beq.n	859c2 <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8599e:	7d19      	ldrb	r1, [r3, #20]
   859a0:	f36f 0100 	bfc	r1, #0, #1
   859a4:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   859a6:	681c      	ldr	r4, [r3, #0]
   859a8:	b15c      	cbz	r4, 859c2 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   859aa:	f102 0108 	add.w	r1, r2, #8
   859ae:	0149      	lsls	r1, r1, #5
   859b0:	4d04      	ldr	r5, [pc, #16]	; (859c4 <udd_ep_finish_job+0x34>)
   859b2:	5869      	ldr	r1, [r5, r1]
   859b4:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   859b8:	bf18      	it	ne
   859ba:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   859be:	6899      	ldr	r1, [r3, #8]
   859c0:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   859c2:	bd38      	pop	{r3, r4, r5, pc}
   859c4:	400a4000 	.word	0x400a4000

000859c8 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   859c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   859ca:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   859cc:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   859ce:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   859d2:	496c      	ldr	r1, [pc, #432]	; (85b84 <udd_ep_trans_done+0x1bc>)
   859d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   859d8:	7d09      	ldrb	r1, [r1, #20]
   859da:	f011 0f01 	tst.w	r1, #1
   859de:	f000 80ca 	beq.w	85b76 <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   859e2:	4601      	mov	r1, r0
   859e4:	4867      	ldr	r0, [pc, #412]	; (85b84 <udd_ep_trans_done+0x1bc>)
   859e6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   859ea:	68cd      	ldr	r5, [r1, #12]
   859ec:	6888      	ldr	r0, [r1, #8]
   859ee:	4285      	cmp	r5, r0
   859f0:	f000 80a6 	beq.w	85b40 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   859f4:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   859f6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   859fa:	d863      	bhi.n	85ac4 <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   859fc:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   859fe:	0151      	lsls	r1, r2, #5
   85a00:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a04:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85a08:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a0c:	f016 0f08 	tst.w	r6, #8
   85a10:	d014      	beq.n	85a3c <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85a12:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a16:	f006 0607 	and.w	r6, r6, #7
   85a1a:	2108      	movs	r1, #8
   85a1c:	40b1      	lsls	r1, r6
   85a1e:	3901      	subs	r1, #1
   85a20:	4201      	tst	r1, r0
   85a22:	d068      	beq.n	85af6 <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85a24:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85a28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85a2c:	4e55      	ldr	r6, [pc, #340]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85a2e:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   85a32:	7d0e      	ldrb	r6, [r1, #20]
   85a34:	f36f 0641 	bfc	r6, #1, #1
   85a38:	750e      	strb	r6, [r1, #20]
   85a3a:	e05c      	b.n	85af6 <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85a3c:	0151      	lsls	r1, r2, #5
   85a3e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85a42:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85a46:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a4a:	f3c6 1601 	ubfx	r6, r6, #4, #2
   85a4e:	2e01      	cmp	r6, #1
   85a50:	d14f      	bne.n	85af2 <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85a52:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   85a56:	f006 0607 	and.w	r6, r6, #7
   85a5a:	2108      	movs	r1, #8
   85a5c:	40b1      	lsls	r1, r6
   85a5e:	4281      	cmp	r1, r0
   85a60:	d247      	bcs.n	85af2 <udd_ep_trans_done+0x12a>
   85a62:	e048      	b.n	85af6 <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85a64:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85a68:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   85a6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85a6e:	4a45      	ldr	r2, [pc, #276]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85a70:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   85a74:	68d1      	ldr	r1, [r2, #12]
   85a76:	4401      	add	r1, r0
   85a78:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   85a7a:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85a7c:	4a42      	ldr	r2, [pc, #264]	; (85b88 <udd_ep_trans_done+0x1c0>)
   85a7e:	6911      	ldr	r1, [r2, #16]
   85a80:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   85a84:	fa00 f303 	lsl.w	r3, r0, r3
   85a88:	430b      	orrs	r3, r1
   85a8a:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85a8c:	2d00      	cmp	r5, #0
   85a8e:	d172      	bne.n	85b76 <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   85a90:	4b3e      	ldr	r3, [pc, #248]	; (85b8c <udd_ep_trans_done+0x1c4>)
   85a92:	2201      	movs	r2, #1
   85a94:	701a      	strb	r2, [r3, #0]
   85a96:	f3bf 8f5f 	dmb	sy
   85a9a:	b662      	cpsie	i
}
   85a9c:	e06b      	b.n	85b76 <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   85a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85aa2:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   85aa6:	4b38      	ldr	r3, [pc, #224]	; (85b88 <udd_ep_trans_done+0x1c0>)
   85aa8:	6919      	ldr	r1, [r3, #16]
   85aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
   85aae:	fa00 f202 	lsl.w	r2, r0, r2
   85ab2:	430a      	orrs	r2, r1
   85ab4:	611a      	str	r2, [r3, #16]
			return;
   85ab6:	e05e      	b.n	85b76 <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85ab8:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85abc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85ac0:	2400      	movs	r4, #0
   85ac2:	e018      	b.n	85af6 <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   85ac4:	0151      	lsls	r1, r2, #5
   85ac6:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85aca:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85ace:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   85ad2:	f014 0408 	ands.w	r4, r4, #8
   85ad6:	d1ef      	bne.n	85ab8 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85ad8:	0151      	lsls	r1, r2, #5
   85ada:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85ade:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85ae2:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85ae6:	f3c0 1001 	ubfx	r0, r0, #4, #2
   85aea:	2801      	cmp	r0, #1
   85aec:	d044      	beq.n	85b78 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85aee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85af2:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85af6:	4926      	ldr	r1, [pc, #152]	; (85b90 <udd_ep_trans_done+0x1c8>)
   85af8:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   85afc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   85b00:	4f20      	ldr	r7, [pc, #128]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85b02:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   85b06:	6876      	ldr	r6, [r6, #4]
   85b08:	4435      	add	r5, r6
   85b0a:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85b0c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85b10:	b672      	cpsid	i
   85b12:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85b16:	4e1d      	ldr	r6, [pc, #116]	; (85b8c <udd_ep_trans_done+0x1c4>)
   85b18:	2700      	movs	r7, #0
   85b1a:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   85b1c:	68ce      	ldr	r6, [r1, #12]
   85b1e:	f016 0f10 	tst.w	r6, #16
   85b22:	d09f      	beq.n	85a64 <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   85b24:	b92d      	cbnz	r5, 85b32 <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   85b26:	4919      	ldr	r1, [pc, #100]	; (85b8c <udd_ep_trans_done+0x1c4>)
   85b28:	2001      	movs	r0, #1
   85b2a:	7008      	strb	r0, [r1, #0]
   85b2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85b30:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   85b32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85b36:	4813      	ldr	r0, [pc, #76]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85b38:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85b3c:	68c8      	ldr	r0, [r1, #12]
   85b3e:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   85b40:	0151      	lsls	r1, r2, #5
   85b42:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85b46:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85b4a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   85b4e:	f010 0f08 	tst.w	r0, #8
   85b52:	d008      	beq.n	85b66 <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   85b54:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   85b58:	4c0a      	ldr	r4, [pc, #40]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85b5a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85b5e:	7d00      	ldrb	r0, [r0, #20]
   85b60:	f010 0f02 	tst.w	r0, #2
   85b64:	d19b      	bne.n	85a9e <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   85b66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85b6a:	2100      	movs	r1, #0
   85b6c:	4805      	ldr	r0, [pc, #20]	; (85b84 <udd_ep_trans_done+0x1bc>)
   85b6e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   85b72:	4b08      	ldr	r3, [pc, #32]	; (85b94 <udd_ep_trans_done+0x1cc>)
   85b74:	4798      	blx	r3
}
   85b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85b78:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85b7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   85b80:	e7b9      	b.n	85af6 <udd_ep_trans_done+0x12e>
   85b82:	bf00      	nop
   85b84:	20002314 	.word	0x20002314
   85b88:	400a4000 	.word	0x400a4000
   85b8c:	200006ee 	.word	0x200006ee
   85b90:	400a4300 	.word	0x400a4300
   85b94:	00085991 	.word	0x00085991

00085b98 <UDPHS_Handler>:
{
   85b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85b9c:	201d      	movs	r0, #29
   85b9e:	4ba0      	ldr	r3, [pc, #640]	; (85e20 <UDPHS_Handler+0x288>)
   85ba0:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   85ba2:	4ba0      	ldr	r3, [pc, #640]	; (85e24 <UDPHS_Handler+0x28c>)
   85ba4:	4798      	blx	r3
   85ba6:	b920      	cbnz	r0, 85bb2 <UDPHS_Handler+0x1a>
   85ba8:	4b9f      	ldr	r3, [pc, #636]	; (85e28 <UDPHS_Handler+0x290>)
   85baa:	695b      	ldr	r3, [r3, #20]
   85bac:	f013 0f02 	tst.w	r3, #2
   85bb0:	d041      	beq.n	85c36 <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   85bb2:	4b9d      	ldr	r3, [pc, #628]	; (85e28 <UDPHS_Handler+0x290>)
   85bb4:	695b      	ldr	r3, [r3, #20]
   85bb6:	f013 0f08 	tst.w	r3, #8
   85bba:	d143      	bne.n	85c44 <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   85bbc:	4b9a      	ldr	r3, [pc, #616]	; (85e28 <UDPHS_Handler+0x290>)
   85bbe:	695b      	ldr	r3, [r3, #20]
   85bc0:	f013 0f04 	tst.w	r3, #4
   85bc4:	d14c      	bne.n	85c60 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   85bc6:	4a98      	ldr	r2, [pc, #608]	; (85e28 <UDPHS_Handler+0x290>)
   85bc8:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85bcc:	6952      	ldr	r2, [r2, #20]
   85bce:	f412 7f80 	tst.w	r2, #256	; 0x100
   85bd2:	d029      	beq.n	85c28 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   85bd4:	4a94      	ldr	r2, [pc, #592]	; (85e28 <UDPHS_Handler+0x290>)
   85bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85bda:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85be2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   85be6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   85bea:	d13f      	bne.n	85c6c <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   85bec:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85bf0:	d006      	beq.n	85c00 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85bf2:	4a8d      	ldr	r2, [pc, #564]	; (85e28 <UDPHS_Handler+0x290>)
   85bf4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85bf8:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85bfc:	f040 809e 	bne.w	85d3c <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   85c00:	f413 7f00 	tst.w	r3, #512	; 0x200
   85c04:	f040 809d 	bne.w	85d42 <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   85c08:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85c0c:	d004      	beq.n	85c18 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   85c0e:	4a86      	ldr	r2, [pc, #536]	; (85e28 <UDPHS_Handler+0x290>)
   85c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85c14:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   85c18:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   85c1c:	f040 8144 	bne.w	85ea8 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   85c20:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   85c24:	f040 8155 	bne.w	85ed2 <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c28:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85c2a:	497f      	ldr	r1, [pc, #508]	; (85e28 <UDPHS_Handler+0x290>)
   85c2c:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85c30:	f44f 7e80 	mov.w	lr, #256	; 0x100
   85c34:	e19c      	b.n	85f70 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   85c36:	b672      	cpsid	i
   85c38:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85c3c:	4b7b      	ldr	r3, [pc, #492]	; (85e2c <UDPHS_Handler+0x294>)
   85c3e:	2200      	movs	r2, #0
   85c40:	701a      	strb	r2, [r3, #0]
		return;
   85c42:	e008      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ack_sof();
   85c44:	4b78      	ldr	r3, [pc, #480]	; (85e28 <UDPHS_Handler+0x290>)
   85c46:	2208      	movs	r2, #8
   85c48:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   85c4a:	695b      	ldr	r3, [r3, #20]
   85c4c:	f013 0f01 	tst.w	r3, #1
   85c50:	d003      	beq.n	85c5a <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   85c52:	4b77      	ldr	r3, [pc, #476]	; (85e30 <UDPHS_Handler+0x298>)
   85c54:	4798      	blx	r3
}
   85c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   85c5a:	4b76      	ldr	r3, [pc, #472]	; (85e34 <UDPHS_Handler+0x29c>)
   85c5c:	4798      	blx	r3
   85c5e:	e7f8      	b.n	85c52 <UDPHS_Handler+0xba>
		udd_ack_msof();
   85c60:	4b71      	ldr	r3, [pc, #452]	; (85e28 <UDPHS_Handler+0x290>)
   85c62:	2204      	movs	r2, #4
   85c64:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   85c66:	4b73      	ldr	r3, [pc, #460]	; (85e34 <UDPHS_Handler+0x29c>)
   85c68:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85c6a:	e7f4      	b.n	85c56 <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85c6c:	4b72      	ldr	r3, [pc, #456]	; (85e38 <UDPHS_Handler+0x2a0>)
   85c6e:	781b      	ldrb	r3, [r3, #0]
   85c70:	2b00      	cmp	r3, #0
   85c72:	d140      	bne.n	85cf6 <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   85c74:	4b6c      	ldr	r3, [pc, #432]	; (85e28 <UDPHS_Handler+0x290>)
   85c76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85c7a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85c7e:	2b08      	cmp	r3, #8
   85c80:	d13e      	bne.n	85d00 <UDPHS_Handler+0x168>
   85c82:	4a6e      	ldr	r2, [pc, #440]	; (85e3c <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c84:	4b6e      	ldr	r3, [pc, #440]	; (85e40 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   85c86:	486f      	ldr	r0, [pc, #444]	; (85e44 <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85c88:	4619      	mov	r1, r3
   85c8a:	3301      	adds	r3, #1
   85c8c:	7809      	ldrb	r1, [r1, #0]
   85c8e:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85c92:	4283      	cmp	r3, r0
   85c94:	d1f8      	bne.n	85c88 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   85c96:	4b6c      	ldr	r3, [pc, #432]	; (85e48 <UDPHS_Handler+0x2b0>)
   85c98:	4798      	blx	r3
   85c9a:	2800      	cmp	r0, #0
   85c9c:	d038      	beq.n	85d10 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   85c9e:	4b62      	ldr	r3, [pc, #392]	; (85e28 <UDPHS_Handler+0x290>)
   85ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85ca4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85ca8:	4b68      	ldr	r3, [pc, #416]	; (85e4c <UDPHS_Handler+0x2b4>)
   85caa:	f993 3000 	ldrsb.w	r3, [r3]
   85cae:	2b00      	cmp	r3, #0
   85cb0:	db36      	blt.n	85d20 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85cb2:	4b66      	ldr	r3, [pc, #408]	; (85e4c <UDPHS_Handler+0x2b4>)
   85cb4:	88db      	ldrh	r3, [r3, #6]
   85cb6:	2b00      	cmp	r3, #0
   85cb8:	d03d      	beq.n	85d36 <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85cba:	2300      	movs	r3, #0
   85cbc:	4a64      	ldr	r2, [pc, #400]	; (85e50 <UDPHS_Handler+0x2b8>)
   85cbe:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85cc0:	4a64      	ldr	r2, [pc, #400]	; (85e54 <UDPHS_Handler+0x2bc>)
   85cc2:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85cc4:	4a5c      	ldr	r2, [pc, #368]	; (85e38 <UDPHS_Handler+0x2a0>)
   85cc6:	2101      	movs	r1, #1
   85cc8:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   85cca:	4a57      	ldr	r2, [pc, #348]	; (85e28 <UDPHS_Handler+0x290>)
   85ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85cd0:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85cd4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   85cd8:	b672      	cpsid	i
   85cda:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85cde:	4c53      	ldr	r4, [pc, #332]	; (85e2c <UDPHS_Handler+0x294>)
   85ce0:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   85ce2:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85ce6:	2800      	cmp	r0, #0
   85ce8:	d1b5      	bne.n	85c56 <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85cea:	2201      	movs	r2, #1
   85cec:	7022      	strb	r2, [r4, #0]
   85cee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85cf2:	b662      	cpsie	i
}
   85cf4:	e7af      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   85cf6:	4b58      	ldr	r3, [pc, #352]	; (85e58 <UDPHS_Handler+0x2c0>)
   85cf8:	4798      	blx	r3
		udd_ctrl_init();
   85cfa:	4b58      	ldr	r3, [pc, #352]	; (85e5c <UDPHS_Handler+0x2c4>)
   85cfc:	4798      	blx	r3
   85cfe:	e7b9      	b.n	85c74 <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   85d00:	4b57      	ldr	r3, [pc, #348]	; (85e60 <UDPHS_Handler+0x2c8>)
   85d02:	4798      	blx	r3
		udd_ack_setup_received(0);
   85d04:	4b48      	ldr	r3, [pc, #288]	; (85e28 <UDPHS_Handler+0x290>)
   85d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85d0a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85d0e:	e7a2      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   85d10:	4b53      	ldr	r3, [pc, #332]	; (85e60 <UDPHS_Handler+0x2c8>)
   85d12:	4798      	blx	r3
		udd_ack_setup_received(0);
   85d14:	4b44      	ldr	r3, [pc, #272]	; (85e28 <UDPHS_Handler+0x290>)
   85d16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85d1a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   85d1e:	e79a      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85d20:	2300      	movs	r3, #0
   85d22:	4a4b      	ldr	r2, [pc, #300]	; (85e50 <UDPHS_Handler+0x2b8>)
   85d24:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85d26:	4a4b      	ldr	r2, [pc, #300]	; (85e54 <UDPHS_Handler+0x2bc>)
   85d28:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85d2a:	4b43      	ldr	r3, [pc, #268]	; (85e38 <UDPHS_Handler+0x2a0>)
   85d2c:	2202      	movs	r2, #2
   85d2e:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85d30:	4b4c      	ldr	r3, [pc, #304]	; (85e64 <UDPHS_Handler+0x2cc>)
   85d32:	4798      	blx	r3
   85d34:	e78f      	b.n	85c56 <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   85d36:	4b4c      	ldr	r3, [pc, #304]	; (85e68 <UDPHS_Handler+0x2d0>)
   85d38:	4798      	blx	r3
			return;
   85d3a:	e78c      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   85d3c:	4b49      	ldr	r3, [pc, #292]	; (85e64 <UDPHS_Handler+0x2cc>)
   85d3e:	4798      	blx	r3
		return true;
   85d40:	e789      	b.n	85c56 <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85d42:	4b3d      	ldr	r3, [pc, #244]	; (85e38 <UDPHS_Handler+0x2a0>)
   85d44:	781b      	ldrb	r3, [r3, #0]
   85d46:	2b01      	cmp	r3, #1
   85d48:	d00b      	beq.n	85d62 <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85d4a:	2b02      	cmp	r3, #2
   85d4c:	d001      	beq.n	85d52 <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85d4e:	2b04      	cmp	r3, #4
   85d50:	d104      	bne.n	85d5c <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   85d52:	4b41      	ldr	r3, [pc, #260]	; (85e58 <UDPHS_Handler+0x2c0>)
   85d54:	4798      	blx	r3
		udd_ctrl_init();
   85d56:	4b41      	ldr	r3, [pc, #260]	; (85e5c <UDPHS_Handler+0x2c4>)
   85d58:	4798      	blx	r3
		return;
   85d5a:	e77c      	b.n	85c56 <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85d5c:	4b40      	ldr	r3, [pc, #256]	; (85e60 <UDPHS_Handler+0x2c8>)
   85d5e:	4798      	blx	r3
   85d60:	e7f9      	b.n	85d56 <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   85d62:	4b31      	ldr	r3, [pc, #196]	; (85e28 <UDPHS_Handler+0x290>)
   85d64:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   85d68:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85d6c:	4b37      	ldr	r3, [pc, #220]	; (85e4c <UDPHS_Handler+0x2b4>)
   85d6e:	899b      	ldrh	r3, [r3, #12]
   85d70:	4a38      	ldr	r2, [pc, #224]	; (85e54 <UDPHS_Handler+0x2bc>)
   85d72:	8814      	ldrh	r4, [r2, #0]
   85d74:	1822      	adds	r2, r4, r0
   85d76:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85d78:	bfbc      	itt	lt
   85d7a:	1b1b      	sublt	r3, r3, r4
   85d7c:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85d7e:	4b33      	ldr	r3, [pc, #204]	; (85e4c <UDPHS_Handler+0x2b4>)
   85d80:	689a      	ldr	r2, [r3, #8]
   85d82:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   85d84:	b170      	cbz	r0, 85da4 <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85d86:	4b2e      	ldr	r3, [pc, #184]	; (85e40 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   85d88:	4619      	mov	r1, r3
   85d8a:	3301      	adds	r3, #1
   85d8c:	7809      	ldrb	r1, [r1, #0]
   85d8e:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   85d92:	b2d9      	uxtb	r1, r3
   85d94:	4281      	cmp	r1, r0
   85d96:	d3f7      	bcc.n	85d88 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   85d98:	4404      	add	r4, r0
   85d9a:	b2a4      	uxth	r4, r4
   85d9c:	4b2d      	ldr	r3, [pc, #180]	; (85e54 <UDPHS_Handler+0x2bc>)
   85d9e:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85da0:	2840      	cmp	r0, #64	; 0x40
   85da2:	d00d      	beq.n	85dc0 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85da4:	4b29      	ldr	r3, [pc, #164]	; (85e4c <UDPHS_Handler+0x2b4>)
   85da6:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85da8:	695b      	ldr	r3, [r3, #20]
   85daa:	b10b      	cbz	r3, 85db0 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   85dac:	4798      	blx	r3
   85dae:	b370      	cbz	r0, 85e0e <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   85db0:	4b1d      	ldr	r3, [pc, #116]	; (85e28 <UDPHS_Handler+0x290>)
   85db2:	f44f 7200 	mov.w	r2, #512	; 0x200
   85db6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85dba:	4b2b      	ldr	r3, [pc, #172]	; (85e68 <UDPHS_Handler+0x2d0>)
   85dbc:	4798      	blx	r3
		return;
   85dbe:	e74a      	b.n	85c56 <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85dc0:	4b22      	ldr	r3, [pc, #136]	; (85e4c <UDPHS_Handler+0x2b4>)
   85dc2:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85dc4:	4b22      	ldr	r3, [pc, #136]	; (85e50 <UDPHS_Handler+0x2b8>)
   85dc6:	881b      	ldrh	r3, [r3, #0]
   85dc8:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85dca:	429a      	cmp	r2, r3
   85dcc:	ddea      	ble.n	85da4 <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85dce:	4b1f      	ldr	r3, [pc, #124]	; (85e4c <UDPHS_Handler+0x2b4>)
   85dd0:	899b      	ldrh	r3, [r3, #12]
   85dd2:	42a3      	cmp	r3, r4
   85dd4:	d04a      	beq.n	85e6c <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   85dd6:	4b14      	ldr	r3, [pc, #80]	; (85e28 <UDPHS_Handler+0x290>)
   85dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ddc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   85de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85de4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85de8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   85dec:	b672      	cpsid	i
   85dee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85df2:	480e      	ldr	r0, [pc, #56]	; (85e2c <UDPHS_Handler+0x294>)
   85df4:	2400      	movs	r4, #0
   85df6:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85df8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85dfc:	2900      	cmp	r1, #0
   85dfe:	f47f af2a 	bne.w	85c56 <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   85e02:	2201      	movs	r2, #1
   85e04:	7002      	strb	r2, [r0, #0]
   85e06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85e0a:	b662      	cpsie	i
}
   85e0c:	e723      	b.n	85c56 <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   85e0e:	4b14      	ldr	r3, [pc, #80]	; (85e60 <UDPHS_Handler+0x2c8>)
   85e10:	4798      	blx	r3
				udd_ack_out_received(0);
   85e12:	4b05      	ldr	r3, [pc, #20]	; (85e28 <UDPHS_Handler+0x290>)
   85e14:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e18:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85e1c:	e71b      	b.n	85c56 <UDPHS_Handler+0xbe>
   85e1e:	bf00      	nop
   85e20:	00085559 	.word	0x00085559
   85e24:	000855e9 	.word	0x000855e9
   85e28:	400a4000 	.word	0x400a4000
   85e2c:	200006ee 	.word	0x200006ee
   85e30:	00083089 	.word	0x00083089
   85e34:	000848e9 	.word	0x000848e9
   85e38:	20002310 	.word	0x20002310
   85e3c:	20002df3 	.word	0x20002df3
   85e40:	20180000 	.word	0x20180000
   85e44:	20180008 	.word	0x20180008
   85e48:	0008492d 	.word	0x0008492d
   85e4c:	20002df4 	.word	0x20002df4
   85e50:	2000230e 	.word	0x2000230e
   85e54:	2000230c 	.word	0x2000230c
   85e58:	00085819 	.word	0x00085819
   85e5c:	00085759 	.word	0x00085759
   85e60:	000857ad 	.word	0x000857ad
   85e64:	00085829 	.word	0x00085829
   85e68:	000857c5 	.word	0x000857c5
		if (!udd_g_ctrlreq.over_under_run) {
   85e6c:	4b9d      	ldr	r3, [pc, #628]	; (860e4 <UDPHS_Handler+0x54c>)
   85e6e:	695b      	ldr	r3, [r3, #20]
   85e70:	b153      	cbz	r3, 85e88 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   85e72:	4798      	blx	r3
   85e74:	b180      	cbz	r0, 85e98 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85e76:	499c      	ldr	r1, [pc, #624]	; (860e8 <UDPHS_Handler+0x550>)
   85e78:	4a9c      	ldr	r2, [pc, #624]	; (860ec <UDPHS_Handler+0x554>)
   85e7a:	880b      	ldrh	r3, [r1, #0]
   85e7c:	8810      	ldrh	r0, [r2, #0]
   85e7e:	4403      	add	r3, r0
   85e80:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85e82:	2300      	movs	r3, #0
   85e84:	8013      	strh	r3, [r2, #0]
   85e86:	e7a6      	b.n	85dd6 <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   85e88:	4b99      	ldr	r3, [pc, #612]	; (860f0 <UDPHS_Handler+0x558>)
   85e8a:	4798      	blx	r3
			udd_ack_out_received(0);
   85e8c:	4b99      	ldr	r3, [pc, #612]	; (860f4 <UDPHS_Handler+0x55c>)
   85e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85e92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85e96:	e6de      	b.n	85c56 <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   85e98:	4b95      	ldr	r3, [pc, #596]	; (860f0 <UDPHS_Handler+0x558>)
   85e9a:	4798      	blx	r3
			udd_ack_out_received(0);
   85e9c:	4b95      	ldr	r3, [pc, #596]	; (860f4 <UDPHS_Handler+0x55c>)
   85e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ea2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85ea6:	e6d6      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   85ea8:	4b92      	ldr	r3, [pc, #584]	; (860f4 <UDPHS_Handler+0x55c>)
   85eaa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85eae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85eb2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85eb6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85eba:	f47f aecc 	bne.w	85c56 <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85ebe:	4b8e      	ldr	r3, [pc, #568]	; (860f8 <UDPHS_Handler+0x560>)
   85ec0:	781b      	ldrb	r3, [r3, #0]
   85ec2:	2b03      	cmp	r3, #3
   85ec4:	f47f aec7 	bne.w	85c56 <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85ec8:	4b8a      	ldr	r3, [pc, #552]	; (860f4 <UDPHS_Handler+0x55c>)
   85eca:	2220      	movs	r2, #32
   85ecc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ed0:	e6c1      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   85ed2:	4b88      	ldr	r3, [pc, #544]	; (860f4 <UDPHS_Handler+0x55c>)
   85ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85ed8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   85edc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85ee0:	f413 7f00 	tst.w	r3, #512	; 0x200
   85ee4:	f47f aeb7 	bne.w	85c56 <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85ee8:	4b83      	ldr	r3, [pc, #524]	; (860f8 <UDPHS_Handler+0x560>)
   85eea:	781b      	ldrb	r3, [r3, #0]
   85eec:	2b01      	cmp	r3, #1
   85eee:	d007      	beq.n	85f00 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85ef0:	2b04      	cmp	r3, #4
   85ef2:	f47f aeb0 	bne.w	85c56 <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   85ef6:	4b7f      	ldr	r3, [pc, #508]	; (860f4 <UDPHS_Handler+0x55c>)
   85ef8:	2220      	movs	r2, #32
   85efa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85efe:	e6aa      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   85f00:	4b7e      	ldr	r3, [pc, #504]	; (860fc <UDPHS_Handler+0x564>)
   85f02:	4798      	blx	r3
   85f04:	e6a7      	b.n	85c56 <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   85f06:	4b7e      	ldr	r3, [pc, #504]	; (86100 <UDPHS_Handler+0x568>)
   85f08:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85f0c:	68d9      	ldr	r1, [r3, #12]
   85f0e:	f011 0f01 	tst.w	r1, #1
   85f12:	f47f aea0 	bne.w	85c56 <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   85f16:	4877      	ldr	r0, [pc, #476]	; (860f4 <UDPHS_Handler+0x55c>)
   85f18:	6901      	ldr	r1, [r0, #16]
   85f1a:	ea21 0606 	bic.w	r6, r1, r6
   85f1e:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85f20:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   85f22:	0c1b      	lsrs	r3, r3, #16
   85f24:	d008      	beq.n	85f38 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   85f26:	4977      	ldr	r1, [pc, #476]	; (86104 <UDPHS_Handler+0x56c>)
   85f28:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   85f2c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   85f30:	68e0      	ldr	r0, [r4, #12]
   85f32:	1ac3      	subs	r3, r0, r3
   85f34:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   85f36:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   85f38:	4610      	mov	r0, r2
   85f3a:	4b73      	ldr	r3, [pc, #460]	; (86108 <UDPHS_Handler+0x570>)
   85f3c:	4798      	blx	r3
			return true;
   85f3e:	e68a      	b.n	85c56 <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   85f40:	0163      	lsls	r3, r4, #5
   85f42:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85f46:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   85f4e:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   85f52:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   85f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   85f5a:	2100      	movs	r1, #0
   85f5c:	4869      	ldr	r0, [pc, #420]	; (86104 <UDPHS_Handler+0x56c>)
   85f5e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   85f62:	4b6a      	ldr	r3, [pc, #424]	; (8610c <UDPHS_Handler+0x574>)
   85f64:	4798      	blx	r3
				return true;
   85f66:	e676      	b.n	85c56 <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85f68:	3301      	adds	r3, #1
   85f6a:	2b07      	cmp	r3, #7
   85f6c:	f000 80dc 	beq.w	86128 <UDPHS_Handler+0x590>
   85f70:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   85f72:	461c      	mov	r4, r3
   85f74:	1e5d      	subs	r5, r3, #1
   85f76:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85f78:	690f      	ldr	r7, [r1, #16]
   85f7a:	fa0c f605 	lsl.w	r6, ip, r5
   85f7e:	4237      	tst	r7, r6
   85f80:	d002      	beq.n	85f88 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85f82:	6948      	ldr	r0, [r1, #20]
   85f84:	4206      	tst	r6, r0
   85f86:	d1be      	bne.n	85f06 <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85f88:	690f      	ldr	r7, [r1, #16]
   85f8a:	fa0e f604 	lsl.w	r6, lr, r4
   85f8e:	4237      	tst	r7, r6
   85f90:	d0ea      	beq.n	85f68 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85f92:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85f96:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   85f9a:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85f9e:	d006      	beq.n	85fae <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   85fa0:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   85fa4:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   85fa8:	f410 6f00 	tst.w	r0, #2048	; 0x800
   85fac:	d0c8      	beq.n	85f40 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85fae:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85fb2:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85fb6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   85fba:	d0d5      	beq.n	85f68 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   85fbc:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85fc0:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85fc4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85fc8:	d1ce      	bne.n	85f68 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85fca:	4b4a      	ldr	r3, [pc, #296]	; (860f4 <UDPHS_Handler+0x55c>)
   85fcc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   85fd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85fd4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   85fd8:	691a      	ldr	r2, [r3, #16]
   85fda:	ea22 0606 	bic.w	r6, r2, r6
   85fde:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85fe0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   85fe4:	4b47      	ldr	r3, [pc, #284]	; (86104 <UDPHS_Handler+0x56c>)
   85fe6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   85fea:	f898 3014 	ldrb.w	r3, [r8, #20]
   85fee:	f36f 0382 	bfc	r3, #2, #1
   85ff2:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85ff6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   85ffa:	f023 0302 	bic.w	r3, r3, #2
   85ffe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   86002:	2320      	movs	r3, #32
   86004:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   86008:	2340      	movs	r3, #64	; 0x40
   8600a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   8600e:	e622      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ack_reset();
   86010:	4b38      	ldr	r3, [pc, #224]	; (860f4 <UDPHS_Handler+0x55c>)
   86012:	2210      	movs	r2, #16
   86014:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   86016:	4d3b      	ldr	r5, [pc, #236]	; (86104 <UDPHS_Handler+0x56c>)
   86018:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8601a:	2701      	movs	r7, #1
   8601c:	4e3b      	ldr	r6, [pc, #236]	; (8610c <UDPHS_Handler+0x574>)
   8601e:	3401      	adds	r4, #1
   86020:	b2e4      	uxtb	r4, r4
   86022:	4622      	mov	r2, r4
   86024:	4639      	mov	r1, r7
   86026:	4628      	mov	r0, r5
   86028:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8602a:	3518      	adds	r5, #24
   8602c:	2c06      	cmp	r4, #6
   8602e:	d1f6      	bne.n	8601e <UDPHS_Handler+0x486>
		udc_reset();
   86030:	4b37      	ldr	r3, [pc, #220]	; (86110 <UDPHS_Handler+0x578>)
   86032:	4798      	blx	r3
	udd_configure_address(0);
   86034:	4b2f      	ldr	r3, [pc, #188]	; (860f4 <UDPHS_Handler+0x55c>)
   86036:	681a      	ldr	r2, [r3, #0]
   86038:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8603c:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8603e:	681a      	ldr	r2, [r3, #0]
   86040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   86044:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   86046:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   8604a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   8604e:	f022 0203 	bic.w	r2, r2, #3
   86052:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   86056:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   8605a:	2201      	movs	r2, #1
   8605c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86060:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   86064:	b672      	cpsid	i
   86066:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8606a:	4a2a      	ldr	r2, [pc, #168]	; (86114 <UDPHS_Handler+0x57c>)
   8606c:	2000      	movs	r0, #0
   8606e:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   86070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   86074:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   86078:	f44f 7200 	mov.w	r2, #512	; 0x200
   8607c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   86080:	691a      	ldr	r2, [r3, #16]
   86082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   86086:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   86088:	b929      	cbnz	r1, 86096 <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   8608a:	4b22      	ldr	r3, [pc, #136]	; (86114 <UDPHS_Handler+0x57c>)
   8608c:	2201      	movs	r2, #1
   8608e:	701a      	strb	r2, [r3, #0]
   86090:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86094:	b662      	cpsie	i
		udd_ctrl_init();
   86096:	4b20      	ldr	r3, [pc, #128]	; (86118 <UDPHS_Handler+0x580>)
   86098:	4798      	blx	r3
		udd_enable_sof_interrupt();
   8609a:	4b16      	ldr	r3, [pc, #88]	; (860f4 <UDPHS_Handler+0x55c>)
   8609c:	691a      	ldr	r2, [r3, #16]
   8609e:	f042 0208 	orr.w	r2, r2, #8
   860a2:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   860a4:	691a      	ldr	r2, [r3, #16]
   860a6:	f042 0204 	orr.w	r2, r2, #4
   860aa:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   860ac:	691a      	ldr	r2, [r3, #16]
   860ae:	f042 0202 	orr.w	r2, r2, #2
   860b2:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   860b4:	e5cf      	b.n	85c56 <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   860b6:	4b0f      	ldr	r3, [pc, #60]	; (860f4 <UDPHS_Handler+0x55c>)
   860b8:	2220      	movs	r2, #32
   860ba:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   860bc:	691a      	ldr	r2, [r3, #16]
   860be:	f022 0202 	bic.w	r2, r2, #2
   860c2:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   860c4:	691a      	ldr	r2, [r3, #16]
   860c6:	f042 0220 	orr.w	r2, r2, #32
   860ca:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   860cc:	2202      	movs	r2, #2
   860ce:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   860d0:	201d      	movs	r0, #29
   860d2:	4b12      	ldr	r3, [pc, #72]	; (8611c <UDPHS_Handler+0x584>)
   860d4:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   860d6:	4b12      	ldr	r3, [pc, #72]	; (86120 <UDPHS_Handler+0x588>)
   860d8:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   860da:	2000      	movs	r0, #0
   860dc:	4b11      	ldr	r3, [pc, #68]	; (86124 <UDPHS_Handler+0x58c>)
   860de:	4798      	blx	r3
		goto udd_interrupt_end;
   860e0:	e5b9      	b.n	85c56 <UDPHS_Handler+0xbe>
   860e2:	bf00      	nop
   860e4:	20002df4 	.word	0x20002df4
   860e8:	2000230e 	.word	0x2000230e
   860ec:	2000230c 	.word	0x2000230c
   860f0:	000857ad 	.word	0x000857ad
   860f4:	400a4000 	.word	0x400a4000
   860f8:	20002310 	.word	0x20002310
   860fc:	000857c5 	.word	0x000857c5
   86100:	400a4300 	.word	0x400a4300
   86104:	20002314 	.word	0x20002314
   86108:	000859c9 	.word	0x000859c9
   8610c:	00085991 	.word	0x00085991
   86110:	000848a1 	.word	0x000848a1
   86114:	200006ee 	.word	0x200006ee
   86118:	00085759 	.word	0x00085759
   8611c:	0008558d 	.word	0x0008558d
   86120:	00083065 	.word	0x00083065
   86124:	000856e5 	.word	0x000856e5
	if (Is_udd_reset()) {
   86128:	4b18      	ldr	r3, [pc, #96]	; (8618c <UDPHS_Handler+0x5f4>)
   8612a:	695b      	ldr	r3, [r3, #20]
   8612c:	f013 0f10 	tst.w	r3, #16
   86130:	f47f af6e 	bne.w	86010 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   86134:	4b15      	ldr	r3, [pc, #84]	; (8618c <UDPHS_Handler+0x5f4>)
   86136:	691b      	ldr	r3, [r3, #16]
   86138:	f013 0f02 	tst.w	r3, #2
   8613c:	d004      	beq.n	86148 <UDPHS_Handler+0x5b0>
   8613e:	4b13      	ldr	r3, [pc, #76]	; (8618c <UDPHS_Handler+0x5f4>)
   86140:	695b      	ldr	r3, [r3, #20]
   86142:	f013 0f02 	tst.w	r3, #2
   86146:	d1b6      	bne.n	860b6 <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   86148:	4b10      	ldr	r3, [pc, #64]	; (8618c <UDPHS_Handler+0x5f4>)
   8614a:	695b      	ldr	r3, [r3, #20]
   8614c:	f013 0f20 	tst.w	r3, #32
   86150:	f43f ad81 	beq.w	85c56 <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   86154:	2001      	movs	r0, #1
   86156:	4b0e      	ldr	r3, [pc, #56]	; (86190 <UDPHS_Handler+0x5f8>)
   86158:	4798      	blx	r3
		udd_ack_suspend();
   8615a:	4b0c      	ldr	r3, [pc, #48]	; (8618c <UDPHS_Handler+0x5f4>)
   8615c:	2202      	movs	r2, #2
   8615e:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   86160:	2220      	movs	r2, #32
   86162:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   86164:	691a      	ldr	r2, [r3, #16]
   86166:	f022 0220 	bic.w	r2, r2, #32
   8616a:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   8616c:	691a      	ldr	r2, [r3, #16]
   8616e:	f042 0202 	orr.w	r2, r2, #2
   86172:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   86174:	691a      	ldr	r2, [r3, #16]
   86176:	f042 0208 	orr.w	r2, r2, #8
   8617a:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   8617c:	691a      	ldr	r2, [r3, #16]
   8617e:	f042 0204 	orr.w	r2, r2, #4
   86182:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   86184:	4b03      	ldr	r3, [pc, #12]	; (86194 <UDPHS_Handler+0x5fc>)
   86186:	4798      	blx	r3
		goto udd_interrupt_end;
   86188:	e565      	b.n	85c56 <UDPHS_Handler+0xbe>
   8618a:	bf00      	nop
   8618c:	400a4000 	.word	0x400a4000
   86190:	000856e5 	.word	0x000856e5
   86194:	0008307d 	.word	0x0008307d

00086198 <udd_attach>:
{
   86198:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8619a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   8619e:	b672      	cpsid	i
   861a0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   861a4:	4b1d      	ldr	r3, [pc, #116]	; (8621c <udd_attach+0x84>)
   861a6:	2200      	movs	r2, #0
   861a8:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   861aa:	2001      	movs	r0, #1
   861ac:	4b1c      	ldr	r3, [pc, #112]	; (86220 <udd_attach+0x88>)
   861ae:	4798      	blx	r3
	udd_enable_periph_ck();
   861b0:	201d      	movs	r0, #29
   861b2:	4b1c      	ldr	r3, [pc, #112]	; (86224 <udd_attach+0x8c>)
   861b4:	4798      	blx	r3
	udd_attach_device();
   861b6:	4b1c      	ldr	r3, [pc, #112]	; (86228 <udd_attach+0x90>)
   861b8:	681a      	ldr	r2, [r3, #0]
   861ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   861be:	601a      	str	r2, [r3, #0]
   861c0:	681a      	ldr	r2, [r3, #0]
   861c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   861c6:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   861c8:	691a      	ldr	r2, [r3, #16]
   861ca:	f042 0210 	orr.w	r2, r2, #16
   861ce:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   861d0:	691a      	ldr	r2, [r3, #16]
   861d2:	f042 0202 	orr.w	r2, r2, #2
   861d6:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   861d8:	691a      	ldr	r2, [r3, #16]
   861da:	f042 0220 	orr.w	r2, r2, #32
   861de:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   861e0:	691a      	ldr	r2, [r3, #16]
   861e2:	f042 0208 	orr.w	r2, r2, #8
   861e6:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   861e8:	691a      	ldr	r2, [r3, #16]
   861ea:	f042 0204 	orr.w	r2, r2, #4
   861ee:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   861f0:	2208      	movs	r2, #8
   861f2:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   861f4:	2204      	movs	r2, #4
   861f6:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   861f8:	2210      	movs	r2, #16
   861fa:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   861fc:	2202      	movs	r2, #2
   861fe:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   86200:	2220      	movs	r2, #32
   86202:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   86204:	201d      	movs	r0, #29
   86206:	4b09      	ldr	r3, [pc, #36]	; (8622c <udd_attach+0x94>)
   86208:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   8620a:	b92c      	cbnz	r4, 86218 <udd_attach+0x80>
		cpu_irq_enable();
   8620c:	4b03      	ldr	r3, [pc, #12]	; (8621c <udd_attach+0x84>)
   8620e:	2201      	movs	r2, #1
   86210:	701a      	strb	r2, [r3, #0]
   86212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   86216:	b662      	cpsie	i
}
   86218:	bd10      	pop	{r4, pc}
   8621a:	bf00      	nop
   8621c:	200006ee 	.word	0x200006ee
   86220:	000856e5 	.word	0x000856e5
   86224:	00085559 	.word	0x00085559
   86228:	400a4000 	.word	0x400a4000
   8622c:	0008558d 	.word	0x0008558d

00086230 <udd_enable>:
{
   86230:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   86232:	4b2a      	ldr	r3, [pc, #168]	; (862dc <udd_enable+0xac>)
   86234:	4798      	blx	r3
	udd_enable_periph_ck();
   86236:	201d      	movs	r0, #29
   86238:	4b29      	ldr	r3, [pc, #164]	; (862e0 <udd_enable+0xb0>)
   8623a:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8623c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   86240:	b672      	cpsid	i
   86242:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86246:	2300      	movs	r3, #0
   86248:	4a26      	ldr	r2, [pc, #152]	; (862e4 <udd_enable+0xb4>)
   8624a:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   8624c:	4926      	ldr	r1, [pc, #152]	; (862e8 <udd_enable+0xb8>)
   8624e:	680a      	ldr	r2, [r1, #0]
   86250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   86254:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86256:	4a25      	ldr	r2, [pc, #148]	; (862ec <udd_enable+0xbc>)
   86258:	2150      	movs	r1, #80	; 0x50
   8625a:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8625e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   86262:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   86264:	4822      	ldr	r0, [pc, #136]	; (862f0 <udd_enable+0xc0>)
   86266:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8626a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   8626e:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   86270:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   86274:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   86278:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   8627c:	f36f 0282 	bfc	r2, #2, #1
   86280:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   86282:	3301      	adds	r3, #1
   86284:	2b06      	cmp	r3, #6
   86286:	d1ee      	bne.n	86266 <udd_enable+0x36>
	udd_high_speed_enable();
   86288:	4a17      	ldr	r2, [pc, #92]	; (862e8 <udd_enable+0xb8>)
   8628a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8628e:	f023 0303 	bic.w	r3, r3, #3
   86292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   86296:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8629a:	4b16      	ldr	r3, [pc, #88]	; (862f4 <udd_enable+0xc4>)
   8629c:	4798      	blx	r3
	udd_b_idle = false;
   8629e:	2300      	movs	r3, #0
   862a0:	4a15      	ldr	r2, [pc, #84]	; (862f8 <udd_enable+0xc8>)
   862a2:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   862a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   862a8:	b672      	cpsid	i
   862aa:	f3bf 8f5f 	dmb	sy
   862ae:	4a0d      	ldr	r2, [pc, #52]	; (862e4 <udd_enable+0xb4>)
   862b0:	7013      	strb	r3, [r2, #0]
   862b2:	4a12      	ldr	r2, [pc, #72]	; (862fc <udd_enable+0xcc>)
   862b4:	78d3      	ldrb	r3, [r2, #3]
   862b6:	3301      	adds	r3, #1
   862b8:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   862ba:	b929      	cbnz	r1, 862c8 <udd_enable+0x98>
		cpu_irq_enable();
   862bc:	4b09      	ldr	r3, [pc, #36]	; (862e4 <udd_enable+0xb4>)
   862be:	2201      	movs	r2, #1
   862c0:	701a      	strb	r2, [r3, #0]
   862c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   862c6:	b662      	cpsie	i
	udd_attach();
   862c8:	4b0d      	ldr	r3, [pc, #52]	; (86300 <udd_enable+0xd0>)
   862ca:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   862cc:	b92c      	cbnz	r4, 862da <udd_enable+0xaa>
		cpu_irq_enable();
   862ce:	4b05      	ldr	r3, [pc, #20]	; (862e4 <udd_enable+0xb4>)
   862d0:	2201      	movs	r2, #1
   862d2:	701a      	strb	r2, [r3, #0]
   862d4:	f3bf 8f5f 	dmb	sy
   862d8:	b662      	cpsie	i
}
   862da:	bd10      	pop	{r4, pc}
   862dc:	00084599 	.word	0x00084599
   862e0:	00085559 	.word	0x00085559
   862e4:	200006ee 	.word	0x200006ee
   862e8:	400a4000 	.word	0x400a4000
   862ec:	e000e100 	.word	0xe000e100
   862f0:	20002314 	.word	0x20002314
   862f4:	000855d5 	.word	0x000855d5
   862f8:	2000230a 	.word	0x2000230a
   862fc:	20002de0 	.word	0x20002de0
   86300:	00086199 	.word	0x00086199

00086304 <udd_detach>:
{
   86304:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   86306:	201d      	movs	r0, #29
   86308:	4b08      	ldr	r3, [pc, #32]	; (8632c <udd_detach+0x28>)
   8630a:	4798      	blx	r3
	udd_detach_device();
   8630c:	4b08      	ldr	r3, [pc, #32]	; (86330 <udd_detach+0x2c>)
   8630e:	681a      	ldr	r2, [r3, #0]
   86310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   86314:	601a      	str	r2, [r3, #0]
   86316:	681a      	ldr	r2, [r3, #0]
   86318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8631c:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   8631e:	201d      	movs	r0, #29
   86320:	4b04      	ldr	r3, [pc, #16]	; (86334 <udd_detach+0x30>)
   86322:	4798      	blx	r3
	udd_sleep_mode(false);
   86324:	2000      	movs	r0, #0
   86326:	4b04      	ldr	r3, [pc, #16]	; (86338 <udd_detach+0x34>)
   86328:	4798      	blx	r3
}
   8632a:	bd08      	pop	{r3, pc}
   8632c:	00085559 	.word	0x00085559
   86330:	400a4000 	.word	0x400a4000
   86334:	0008558d 	.word	0x0008558d
   86338:	000856e5 	.word	0x000856e5

0008633c <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   8633c:	4b02      	ldr	r3, [pc, #8]	; (86348 <udd_is_high_speed+0xc>)
   8633e:	6958      	ldr	r0, [r3, #20]
}
   86340:	f000 0001 	and.w	r0, r0, #1
   86344:	4770      	bx	lr
   86346:	bf00      	nop
   86348:	400a4000 	.word	0x400a4000

0008634c <udd_set_address>:
	udd_disable_address();
   8634c:	4b08      	ldr	r3, [pc, #32]	; (86370 <udd_set_address+0x24>)
   8634e:	681a      	ldr	r2, [r3, #0]
   86350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   86354:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   86356:	681a      	ldr	r2, [r3, #0]
   86358:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8635c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   86360:	4302      	orrs	r2, r0
   86362:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   86364:	681a      	ldr	r2, [r3, #0]
   86366:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8636a:	601a      	str	r2, [r3, #0]
}
   8636c:	4770      	bx	lr
   8636e:	bf00      	nop
   86370:	400a4000 	.word	0x400a4000

00086374 <udd_getaddress>:
	return udd_get_configured_address();
   86374:	4b02      	ldr	r3, [pc, #8]	; (86380 <udd_getaddress+0xc>)
   86376:	6818      	ldr	r0, [r3, #0]
}
   86378:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8637c:	4770      	bx	lr
   8637e:	bf00      	nop
   86380:	400a4000 	.word	0x400a4000

00086384 <udd_get_frame_number>:
	return udd_frame_number();
   86384:	4b02      	ldr	r3, [pc, #8]	; (86390 <udd_get_frame_number+0xc>)
   86386:	6858      	ldr	r0, [r3, #4]
}
   86388:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8638c:	4770      	bx	lr
   8638e:	bf00      	nop
   86390:	400a4000 	.word	0x400a4000

00086394 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   86394:	4b02      	ldr	r3, [pc, #8]	; (863a0 <udd_get_micro_frame_number+0xc>)
   86396:	6858      	ldr	r0, [r3, #4]
}
   86398:	f000 0007 	and.w	r0, r0, #7
   8639c:	4770      	bx	lr
   8639e:	bf00      	nop
   863a0:	400a4000 	.word	0x400a4000

000863a4 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   863a4:	4b01      	ldr	r3, [pc, #4]	; (863ac <udd_set_setup_payload+0x8>)
   863a6:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   863a8:	8199      	strh	r1, [r3, #12]
}
   863aa:	4770      	bx	lr
   863ac:	20002df4 	.word	0x20002df4

000863b0 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   863b0:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   863b4:	2a06      	cmp	r2, #6
   863b6:	d900      	bls.n	863ba <udd_ep_free+0xa>
   863b8:	4770      	bx	lr
{
   863ba:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   863bc:	0153      	lsls	r3, r2, #5
   863be:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   863c2:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   863c6:	2101      	movs	r1, #1
   863c8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   863cc:	4603      	mov	r3, r0
   863ce:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   863d2:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   863d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   863da:	1e55      	subs	r5, r2, #1
   863dc:	4c08      	ldr	r4, [pc, #32]	; (86400 <udd_ep_free+0x50>)
   863de:	fa05 f601 	lsl.w	r6, r5, r1
   863e2:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   863e6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   863ea:	4b06      	ldr	r3, [pc, #24]	; (86404 <udd_ep_free+0x54>)
   863ec:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   863ee:	4435      	add	r5, r6
   863f0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   863f4:	7d23      	ldrb	r3, [r4, #20]
   863f6:	f36f 0382 	bfc	r3, #2, #1
   863fa:	7523      	strb	r3, [r4, #20]
}
   863fc:	bd70      	pop	{r4, r5, r6, pc}
   863fe:	bf00      	nop
   86400:	20002314 	.word	0x20002314
   86404:	00085991 	.word	0x00085991

00086408 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   86408:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   8640c:	0143      	lsls	r3, r0, #5
   8640e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86412:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86416:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   8641a:	f013 0f20 	tst.w	r3, #32
   8641e:	d109      	bne.n	86434 <udd_ep_is_halted+0x2c>
   86420:	3801      	subs	r0, #1
   86422:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86426:	4b04      	ldr	r3, [pc, #16]	; (86438 <udd_ep_is_halted+0x30>)
   86428:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   8642c:	7d00      	ldrb	r0, [r0, #20]
   8642e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   86432:	4770      	bx	lr
   86434:	2001      	movs	r0, #1
}
   86436:	4770      	bx	lr
   86438:	20002314 	.word	0x20002314

0008643c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8643c:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   86440:	2b06      	cmp	r3, #6
   86442:	d851      	bhi.n	864e8 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   86444:	015a      	lsls	r2, r3, #5
   86446:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8644a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8644e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   86452:	f012 0f20 	tst.w	r2, #32
   86456:	d149      	bne.n	864ec <udd_ep_set_halt+0xb0>
{
   86458:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   8645a:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8645c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   86460:	4a25      	ldr	r2, [pc, #148]	; (864f8 <udd_ep_set_halt+0xbc>)
   86462:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   86466:	7d12      	ldrb	r2, [r2, #20]
   86468:	f012 0f04 	tst.w	r2, #4
   8646c:	d140      	bne.n	864f0 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   8646e:	f012 0f01 	tst.w	r2, #1
   86472:	d13f      	bne.n	864f4 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   86474:	f010 0f80 	tst.w	r0, #128	; 0x80
   86478:	d114      	bne.n	864a4 <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8647a:	015b      	lsls	r3, r3, #5
   8647c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86480:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86484:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   86488:	f022 0202 	bic.w	r2, r2, #2
   8648c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   86490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   86494:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   86498:	2220      	movs	r2, #32
   8649a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   8649e:	2001      	movs	r0, #1
}
   864a0:	bc10      	pop	{r4}
   864a2:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   864a4:	015a      	lsls	r2, r3, #5
   864a6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   864aa:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   864ae:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   864b2:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   864b6:	d0e0      	beq.n	8647a <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   864b8:	4a0f      	ldr	r2, [pc, #60]	; (864f8 <udd_ep_set_halt+0xbc>)
   864ba:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   864be:	7d0a      	ldrb	r2, [r1, #20]
   864c0:	f042 0204 	orr.w	r2, r2, #4
   864c4:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   864c6:	490d      	ldr	r1, [pc, #52]	; (864fc <udd_ep_set_halt+0xc0>)
   864c8:	f103 0208 	add.w	r2, r3, #8
   864cc:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   864d0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   864d4:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   864d6:	6908      	ldr	r0, [r1, #16]
   864d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   864dc:	fa02 f303 	lsl.w	r3, r2, r3
   864e0:	4303      	orrs	r3, r0
   864e2:	610b      	str	r3, [r1, #16]
			return true;
   864e4:	2001      	movs	r0, #1
   864e6:	e7db      	b.n	864a0 <udd_ep_set_halt+0x64>
		return false;
   864e8:	2000      	movs	r0, #0
   864ea:	4770      	bx	lr
		return true; // Already STALL
   864ec:	2001      	movs	r0, #1
}
   864ee:	4770      	bx	lr
		return true; // Already STALL
   864f0:	2001      	movs	r0, #1
   864f2:	e7d5      	b.n	864a0 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   864f4:	2000      	movs	r0, #0
   864f6:	e7d3      	b.n	864a0 <udd_ep_set_halt+0x64>
   864f8:	20002314 	.word	0x20002314
   864fc:	400a4000 	.word	0x400a4000

00086500 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   86500:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   86504:	2806      	cmp	r0, #6
   86506:	d862      	bhi.n	865ce <udd_ep_clear_halt+0xce>
{
   86508:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   8650a:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   8650c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   86510:	4b37      	ldr	r3, [pc, #220]	; (865f0 <udd_ep_clear_halt+0xf0>)
   86512:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   86516:	7d1b      	ldrb	r3, [r3, #20]
   86518:	f013 0f04 	tst.w	r3, #4
   8651c:	d05b      	beq.n	865d6 <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   8651e:	460b      	mov	r3, r1
   86520:	4933      	ldr	r1, [pc, #204]	; (865f0 <udd_ep_clear_halt+0xf0>)
   86522:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   86526:	7d19      	ldrb	r1, [r3, #20]
   86528:	f36f 0182 	bfc	r1, #2, #1
   8652c:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   8652e:	4b31      	ldr	r3, [pc, #196]	; (865f4 <udd_ep_clear_halt+0xf4>)
   86530:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   86534:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   86538:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   8653c:	6919      	ldr	r1, [r3, #16]
   8653e:	f44f 7480 	mov.w	r4, #256	; 0x100
   86542:	4084      	lsls	r4, r0
   86544:	ea21 0104 	bic.w	r1, r1, r4
   86548:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   8654a:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   8654e:	f013 0f20 	tst.w	r3, #32
   86552:	d024      	beq.n	8659e <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   86554:	0143      	lsls	r3, r0, #5
   86556:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8655a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8655e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86562:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   86566:	d00b      	beq.n	86580 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   86568:	0143      	lsls	r3, r0, #5
   8656a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8656e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   86572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   86576:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   8657a:	2140      	movs	r1, #64	; 0x40
   8657c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   86580:	0143      	lsls	r3, r0, #5
   86582:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   86586:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8658a:	2120      	movs	r1, #32
   8658c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   86590:	4618      	mov	r0, r3
   86592:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   86596:	f043 0302 	orr.w	r3, r3, #2
   8659a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   8659e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   865a2:	4913      	ldr	r1, [pc, #76]	; (865f0 <udd_ep_clear_halt+0xf0>)
   865a4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   865a8:	7d1b      	ldrb	r3, [r3, #20]
   865aa:	f013 0f01 	tst.w	r3, #1
   865ae:	d010      	beq.n	865d2 <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   865b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   865b4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   865b8:	7d18      	ldrb	r0, [r3, #20]
   865ba:	f36f 0000 	bfc	r0, #0, #1
   865be:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   865c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   865c4:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   865c8:	4798      	blx	r3
	return true;
   865ca:	2001      	movs	r0, #1
   865cc:	e002      	b.n	865d4 <udd_ep_clear_halt+0xd4>
		return false;
   865ce:	2000      	movs	r0, #0
}
   865d0:	4770      	bx	lr
	return true;
   865d2:	2001      	movs	r0, #1
}
   865d4:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   865d6:	0143      	lsls	r3, r0, #5
   865d8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   865dc:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   865e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   865e4:	f013 0f20 	tst.w	r3, #32
   865e8:	d1b4      	bne.n	86554 <udd_ep_clear_halt+0x54>
	return true;
   865ea:	2001      	movs	r0, #1
   865ec:	e7f2      	b.n	865d4 <udd_ep_clear_halt+0xd4>
   865ee:	bf00      	nop
   865f0:	20002314 	.word	0x20002314
   865f4:	400a4000 	.word	0x400a4000

000865f8 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   865f8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   865fc:	2806      	cmp	r0, #6
   865fe:	d868      	bhi.n	866d2 <udd_ep_run+0xda>
{
   86600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   86602:	0144      	lsls	r4, r0, #5
   86604:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   86608:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   8660c:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   86610:	f014 0f01 	tst.w	r4, #1
   86614:	d05f      	beq.n	866d6 <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   86616:	0144      	lsls	r4, r0, #5
   86618:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   8661c:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   86620:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   86624:	f014 0f20 	tst.w	r4, #32
   86628:	d157      	bne.n	866da <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   8662a:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   8662c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   86630:	4d2d      	ldr	r5, [pc, #180]	; (866e8 <udd_ep_run+0xf0>)
   86632:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   86636:	7d2d      	ldrb	r5, [r5, #20]
   86638:	f015 0f04 	tst.w	r5, #4
   8663c:	d14f      	bne.n	866de <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8663e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   86642:	b672      	cpsid	i
   86644:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86648:	4d28      	ldr	r5, [pc, #160]	; (866ec <udd_ep_run+0xf4>)
   8664a:	2600      	movs	r6, #0
   8664c:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   8664e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   86652:	4e25      	ldr	r6, [pc, #148]	; (866e8 <udd_ep_run+0xf0>)
   86654:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   86658:	7d2d      	ldrb	r5, [r5, #20]
   8665a:	f015 0f01 	tst.w	r5, #1
   8665e:	d121      	bne.n	866a4 <udd_ep_run+0xac>
	ptr_job->busy = true;
   86660:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   86664:	4e20      	ldr	r6, [pc, #128]	; (866e8 <udd_ep_run+0xf0>)
   86666:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8666a:	7d2e      	ldrb	r6, [r5, #20]
   8666c:	f046 0601 	orr.w	r6, r6, #1
   86670:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   86672:	b92f      	cbnz	r7, 86680 <udd_ep_run+0x88>
		cpu_irq_enable();
   86674:	4d1d      	ldr	r5, [pc, #116]	; (866ec <udd_ep_run+0xf4>)
   86676:	2601      	movs	r6, #1
   86678:	702e      	strb	r6, [r5, #0]
   8667a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8667e:	b662      	cpsie	i
	ptr_job->buf = buf;
   86680:	4e19      	ldr	r6, [pc, #100]	; (866e8 <udd_ep_run+0xf0>)
   86682:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   86686:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   8668a:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   8668c:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   8668e:	2200      	movs	r2, #0
   86690:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   86692:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   86694:	9a06      	ldr	r2, [sp, #24]
   86696:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8669a:	b961      	cbnz	r1, 866b6 <udd_ep_run+0xbe>
   8669c:	fab3 f383 	clz	r3, r3
   866a0:	095b      	lsrs	r3, r3, #5
   866a2:	e009      	b.n	866b8 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   866a4:	b9ef      	cbnz	r7, 866e2 <udd_ep_run+0xea>
		cpu_irq_enable();
   866a6:	4b11      	ldr	r3, [pc, #68]	; (866ec <udd_ep_run+0xf4>)
   866a8:	2201      	movs	r2, #1
   866aa:	701a      	strb	r2, [r3, #0]
   866ac:	f3bf 8f5f 	dmb	sy
   866b0:	b662      	cpsie	i
		return false; // Job already on going
   866b2:	2000      	movs	r0, #0
}
   866b4:	e010      	b.n	866d8 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   866b6:	2301      	movs	r3, #1
   866b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   866bc:	4a0a      	ldr	r2, [pc, #40]	; (866e8 <udd_ep_run+0xf0>)
   866be:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   866c2:	7d22      	ldrb	r2, [r4, #20]
   866c4:	f363 0241 	bfi	r2, r3, #1, #1
   866c8:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   866ca:	4b09      	ldr	r3, [pc, #36]	; (866f0 <udd_ep_run+0xf8>)
   866cc:	4798      	blx	r3
	return true;
   866ce:	2001      	movs	r0, #1
   866d0:	e002      	b.n	866d8 <udd_ep_run+0xe0>
		return false;
   866d2:	2000      	movs	r0, #0
}
   866d4:	4770      	bx	lr
		return false; // Endpoint is halted
   866d6:	2000      	movs	r0, #0
}
   866d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   866da:	2000      	movs	r0, #0
   866dc:	e7fc      	b.n	866d8 <udd_ep_run+0xe0>
   866de:	2000      	movs	r0, #0
   866e0:	e7fa      	b.n	866d8 <udd_ep_run+0xe0>
		return false; // Job already on going
   866e2:	2000      	movs	r0, #0
   866e4:	e7f8      	b.n	866d8 <udd_ep_run+0xe0>
   866e6:	bf00      	nop
   866e8:	20002314 	.word	0x20002314
   866ec:	200006ee 	.word	0x200006ee
   866f0:	000859c9 	.word	0x000859c9

000866f4 <udd_ep_alloc>:
{
   866f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   866f8:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   866fa:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   866fe:	2d06      	cmp	r5, #6
   86700:	f200 812a 	bhi.w	86958 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   86704:	016c      	lsls	r4, r5, #5
   86706:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   8670a:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   8670e:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   86712:	f014 0401 	ands.w	r4, r4, #1
   86716:	f040 8123 	bne.w	86960 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8671a:	f001 0c03 	and.w	ip, r1, #3
   8671e:	f1bc 0f02 	cmp.w	ip, #2
   86722:	d05e      	beq.n	867e2 <udd_ep_alloc+0xee>
   86724:	f1bc 0f03 	cmp.w	ip, #3
   86728:	d064      	beq.n	867f4 <udd_ep_alloc+0x100>
   8672a:	f1bc 0f01 	cmp.w	ip, #1
   8672e:	d001      	beq.n	86734 <udd_ep_alloc+0x40>
   86730:	2000      	movs	r0, #0
   86732:	e112      	b.n	8695a <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   86734:	2d00      	cmp	r5, #0
   86736:	d052      	beq.n	867de <udd_ep_alloc+0xea>
   86738:	1eeb      	subs	r3, r5, #3
   8673a:	b2db      	uxtb	r3, r3
   8673c:	2b01      	cmp	r3, #1
   8673e:	bf94      	ite	ls
   86740:	2300      	movls	r3, #0
   86742:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   86744:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86746:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   8674a:	2b00      	cmp	r3, #0
   8674c:	d054      	beq.n	867f8 <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8674e:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   86752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   86756:	d04a      	beq.n	867ee <udd_ep_alloc+0xfa>
   86758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8675c:	bf08      	it	eq
   8675e:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   86762:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   86766:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   86768:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8676c:	016f      	lsls	r7, r5, #5
   8676e:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   86772:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   86776:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   8677a:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   8677e:	f026 0603 	bic.w	r6, r6, #3
   86782:	010b      	lsls	r3, r1, #4
   86784:	f003 0330 	and.w	r3, r3, #48	; 0x30
   86788:	f010 0f80 	tst.w	r0, #128	; 0x80
   8678c:	bf0c      	ite	eq
   8678e:	4621      	moveq	r1, r4
   86790:	2108      	movne	r1, #8
   86792:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   86796:	d237      	bcs.n	86808 <udd_ep_alloc+0x114>
   86798:	2a08      	cmp	r2, #8
   8679a:	bf38      	it	cc
   8679c:	2208      	movcc	r2, #8
   8679e:	0052      	lsls	r2, r2, #1
   867a0:	3a01      	subs	r2, #1
   867a2:	fab2 f282 	clz	r2, r2
   867a6:	f1c2 021c 	rsb	r2, r2, #28
   867aa:	4333      	orrs	r3, r6
   867ac:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   867b0:	430b      	orrs	r3, r1
   867b2:	f1be 0f00 	cmp.w	lr, #0
   867b6:	d001      	beq.n	867bc <udd_ep_alloc+0xc8>
   867b8:	ea4f 240c 	mov.w	r4, ip, lsl #8
   867bc:	431a      	orrs	r2, r3
   867be:	4322      	orrs	r2, r4
   867c0:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   867c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   867c8:	2b00      	cmp	r3, #0
   867ca:	f280 80cd 	bge.w	86968 <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   867ce:	2301      	movs	r3, #1
   867d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   867d4:	2306      	movs	r3, #6
	ep_allocated = 0;
   867d6:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   867d8:	4865      	ldr	r0, [pc, #404]	; (86970 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   867da:	2401      	movs	r4, #1
   867dc:	e01b      	b.n	86816 <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   867de:	2300      	movs	r3, #0
   867e0:	e7b0      	b.n	86744 <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   867e2:	2d03      	cmp	r5, #3
   867e4:	bf34      	ite	cc
   867e6:	46e0      	movcc	r8, ip
   867e8:	f04f 0801 	movcs.w	r8, #1
   867ec:	e004      	b.n	867f8 <udd_ep_alloc+0x104>
			nb_tran = 2;
   867ee:	f04f 0c02 	mov.w	ip, #2
   867f2:	e7b6      	b.n	86762 <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   867f4:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   867f8:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   867fc:	f040 80b2 	bne.w	86964 <udd_ep_alloc+0x270>
   86800:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   86804:	46f4      	mov	ip, lr
   86806:	e7b1      	b.n	8676c <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   86808:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8680c:	e7c9      	b.n	867a2 <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8680e:	3b01      	subs	r3, #1
   86810:	b2db      	uxtb	r3, r3
   86812:	429d      	cmp	r5, r3
   86814:	d81e      	bhi.n	86854 <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   86816:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8681a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8681e:	f012 0f01 	tst.w	r2, #1
   86822:	d0f4      	beq.n	8680e <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   86824:	015a      	lsls	r2, r3, #5
   86826:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8682a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   8682e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   86832:	f3c1 1181 	ubfx	r1, r1, #6, #2
   86836:	005f      	lsls	r7, r3, #1
   86838:	40b9      	lsls	r1, r7
   8683a:	430e      	orrs	r6, r1
   8683c:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   8683e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   86842:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   86846:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8684a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   8684e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   86852:	e7dc      	b.n	8680e <udd_ep_alloc+0x11a>
   86854:	462c      	mov	r4, r5
   86856:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   8685a:	4d46      	ldr	r5, [pc, #280]	; (86974 <udd_ep_alloc+0x280>)
   8685c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   86860:	4f44      	ldr	r7, [pc, #272]	; (86974 <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   86862:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   86866:	f8df 9110 	ldr.w	r9, [pc, #272]	; 86978 <udd_ep_alloc+0x284>
   8686a:	e023      	b.n	868b4 <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   8686c:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   86870:	4a40      	ldr	r2, [pc, #256]	; (86974 <udd_ep_alloc+0x280>)
   86872:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   86876:	2c00      	cmp	r4, #0
   86878:	d078      	beq.n	8696c <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   8687a:	f10c 0c08 	add.w	ip, ip, #8
   8687e:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   86882:	4b3b      	ldr	r3, [pc, #236]	; (86970 <udd_ep_alloc+0x27c>)
   86884:	f853 300c 	ldr.w	r3, [r3, ip]
   86888:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   8688c:	bf18      	it	ne
   8688e:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   86892:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   86896:	4b37      	ldr	r3, [pc, #220]	; (86974 <udd_ep_alloc+0x280>)
   86898:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   8689c:	4602      	mov	r2, r0
   8689e:	f8de 100c 	ldr.w	r1, [lr, #12]
   868a2:	2001      	movs	r0, #1
   868a4:	47a0      	blx	r4
			return false;
   868a6:	2000      	movs	r0, #0
   868a8:	e057      	b.n	8695a <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   868aa:	3401      	adds	r4, #1
   868ac:	3518      	adds	r5, #24
   868ae:	b2e3      	uxtb	r3, r4
   868b0:	2b06      	cmp	r3, #6
   868b2:	d84f      	bhi.n	86954 <udd_ep_alloc+0x260>
   868b4:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   868b6:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   868b8:	0063      	lsls	r3, r4, #1
   868ba:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   868be:	f013 0203 	ands.w	r2, r3, #3
   868c2:	d0f2      	beq.n	868aa <udd_ep_alloc+0x1b6>
   868c4:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   868c8:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   868cc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   868d0:	7d0b      	ldrb	r3, [r1, #20]
   868d2:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   868d6:	f36f 0300 	bfc	r3, #0, #1
   868da:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   868dc:	0163      	lsls	r3, r4, #5
   868de:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   868e2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   868e6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   868ea:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   868ee:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   868f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   868f6:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   868fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   868fe:	2a00      	cmp	r2, #0
   86900:	dab4      	bge.n	8686c <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   86902:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   86906:	f042 0202 	orr.w	r2, r2, #2
   8690a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   8690e:	f1ba 0f00 	cmp.w	sl, #0
   86912:	d0ca      	beq.n	868aa <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   86914:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   86918:	f855 2c08 	ldr.w	r2, [r5, #-8]
   8691c:	ebab 0102 	sub.w	r1, fp, r2
   86920:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   86924:	f855 3c10 	ldr.w	r3, [r5, #-16]
   86928:	eb02 0a03 	add.w	sl, r2, r3
   8692c:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   86930:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   86934:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   86938:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   8693c:	f855 3c18 	ldr.w	r3, [r5, #-24]
   86940:	9300      	str	r3, [sp, #0]
   86942:	ebaa 030b 	sub.w	r3, sl, fp
   86946:	440a      	add	r2, r1
   86948:	f3cc 0140 	ubfx	r1, ip, #1, #1
   8694c:	47c8      	blx	r9
			if (!b_restart) {
   8694e:	2800      	cmp	r0, #0
   86950:	d1ab      	bne.n	868aa <udd_ep_alloc+0x1b6>
   86952:	e002      	b.n	8695a <udd_ep_alloc+0x266>
	return true;
   86954:	2001      	movs	r0, #1
   86956:	e000      	b.n	8695a <udd_ep_alloc+0x266>
		return false;
   86958:	2000      	movs	r0, #0
}
   8695a:	b003      	add	sp, #12
   8695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   86960:	2000      	movs	r0, #0
   86962:	e7fa      	b.n	8695a <udd_ep_alloc+0x266>
		return false;
   86964:	2000      	movs	r0, #0
   86966:	e7f8      	b.n	8695a <udd_ep_alloc+0x266>
		return false;
   86968:	2000      	movs	r0, #0
   8696a:	e7f6      	b.n	8695a <udd_ep_alloc+0x266>
				return false;
   8696c:	2000      	movs	r0, #0
   8696e:	e7f4      	b.n	8695a <udd_ep_alloc+0x266>
   86970:	400a4000 	.word	0x400a4000
   86974:	20002314 	.word	0x20002314
   86978:	000865f9 	.word	0x000865f9

0008697c <udd_ep_abort>:
{
   8697c:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8697e:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   86982:	4b18      	ldr	r3, [pc, #96]	; (869e4 <udd_ep_abort+0x68>)
   86984:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   86988:	2100      	movs	r1, #0
   8698a:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   8698c:	f010 0f80 	tst.w	r0, #128	; 0x80
   86990:	d109      	bne.n	869a6 <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86992:	1e50      	subs	r0, r2, #1
   86994:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86998:	2101      	movs	r1, #1
   8699a:	4b13      	ldr	r3, [pc, #76]	; (869e8 <udd_ep_abort+0x6c>)
   8699c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   869a0:	4b12      	ldr	r3, [pc, #72]	; (869ec <udd_ep_abort+0x70>)
   869a2:	4798      	blx	r3
}
   869a4:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   869a6:	0151      	lsls	r1, r2, #5
   869a8:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   869ac:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   869b0:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   869b4:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   869b8:	d0eb      	beq.n	86992 <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   869ba:	0153      	lsls	r3, r2, #5
   869bc:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   869c0:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   869c4:	f501 748a 	add.w	r4, r1, #276	; 0x114
   869c8:	f44f 7000 	mov.w	r0, #512	; 0x200
   869cc:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   869ce:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   869d2:	f413 7f00 	tst.w	r3, #512	; 0x200
   869d6:	d1fa      	bne.n	869ce <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   869d8:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   869dc:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   869e0:	d1f4      	bne.n	869cc <udd_ep_abort+0x50>
   869e2:	e7d6      	b.n	86992 <udd_ep_abort+0x16>
   869e4:	400a4300 	.word	0x400a4300
   869e8:	20002314 	.word	0x20002314
   869ec:	00085991 	.word	0x00085991

000869f0 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   869f0:	4a07      	ldr	r2, [pc, #28]	; (86a10 <udd_test_mode_j+0x20>)
   869f2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   869f6:	f023 0303 	bic.w	r3, r3, #3
   869fa:	f043 0302 	orr.w	r3, r3, #2
   869fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   86a02:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a06:	f043 0304 	orr.w	r3, r3, #4
   86a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a0e:	4770      	bx	lr
   86a10:	400a4000 	.word	0x400a4000

00086a14 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   86a14:	4a07      	ldr	r2, [pc, #28]	; (86a34 <udd_test_mode_k+0x20>)
   86a16:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a1a:	f023 0303 	bic.w	r3, r3, #3
   86a1e:	f043 0302 	orr.w	r3, r3, #2
   86a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   86a26:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a2a:	f043 0308 	orr.w	r3, r3, #8
   86a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a32:	4770      	bx	lr
   86a34:	400a4000 	.word	0x400a4000

00086a38 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86a38:	4a04      	ldr	r2, [pc, #16]	; (86a4c <udd_test_mode_se0_nak+0x14>)
   86a3a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86a3e:	f023 0303 	bic.w	r3, r3, #3
   86a42:	f043 0302 	orr.w	r3, r3, #2
   86a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   86a4a:	4770      	bx	lr
   86a4c:	400a4000 	.word	0x400a4000

00086a50 <udd_test_mode_packet>:
{
   86a50:	b430      	push	{r4, r5}
   86a52:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   86a54:	466c      	mov	r4, sp
   86a56:	4d21      	ldr	r5, [pc, #132]	; (86adc <udd_test_mode_packet+0x8c>)
   86a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86a64:	e895 0003 	ldmia.w	r5, {r0, r1}
   86a68:	f844 0b04 	str.w	r0, [r4], #4
   86a6c:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   86a6e:	4b1c      	ldr	r3, [pc, #112]	; (86ae0 <udd_test_mode_packet+0x90>)
   86a70:	2101      	movs	r1, #1
   86a72:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   86a76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86a7a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86a7e:	f022 0203 	bic.w	r2, r2, #3
   86a82:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   86a86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86a8a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   86a8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86a92:	f022 0203 	bic.w	r2, r2, #3
   86a96:	f042 0202 	orr.w	r2, r2, #2
   86a9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86a9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   86aa2:	f042 0210 	orr.w	r2, r2, #16
   86aa6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   86aaa:	466b      	mov	r3, sp
   86aac:	480d      	ldr	r0, [pc, #52]	; (86ae4 <udd_test_mode_packet+0x94>)
   86aae:	aa0e      	add	r2, sp, #56	; 0x38
   86ab0:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   86ab2:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   86ab6:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   86ab8:	f813 1b01 	ldrb.w	r1, [r3], #1
   86abc:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   86abe:	42a3      	cmp	r3, r4
   86ac0:	d1f9      	bne.n	86ab6 <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   86ac2:	4b07      	ldr	r3, [pc, #28]	; (86ae0 <udd_test_mode_packet+0x90>)
   86ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86ac8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86ad0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   86ad4:	b00e      	add	sp, #56	; 0x38
   86ad6:	bc30      	pop	{r4, r5}
   86ad8:	4770      	bx	lr
   86ada:	bf00      	nop
   86adc:	0008e568 	.word	0x0008e568
   86ae0:	400a4000 	.word	0x400a4000
   86ae4:	20180038 	.word	0x20180038

00086ae8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86ae8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86aea:	010b      	lsls	r3, r1, #4
   86aec:	4293      	cmp	r3, r2
   86aee:	d914      	bls.n	86b1a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86af0:	00c9      	lsls	r1, r1, #3
   86af2:	084b      	lsrs	r3, r1, #1
   86af4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   86af8:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   86afc:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86afe:	1e5c      	subs	r4, r3, #1
   86b00:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86b04:	428c      	cmp	r4, r1
   86b06:	d901      	bls.n	86b0c <usart_set_async_baudrate+0x24>
		return 1;
   86b08:	2001      	movs	r0, #1
   86b0a:	e017      	b.n	86b3c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   86b0c:	6841      	ldr	r1, [r0, #4]
   86b0e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   86b12:	6041      	str	r1, [r0, #4]
   86b14:	e00c      	b.n	86b30 <usart_set_async_baudrate+0x48>
		return 1;
   86b16:	2001      	movs	r0, #1
   86b18:	e010      	b.n	86b3c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86b1a:	0859      	lsrs	r1, r3, #1
   86b1c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86b20:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86b24:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86b26:	1e5c      	subs	r4, r3, #1
   86b28:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86b2c:	428c      	cmp	r4, r1
   86b2e:	d8f2      	bhi.n	86b16 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86b30:	0412      	lsls	r2, r2, #16
   86b32:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   86b36:	431a      	orrs	r2, r3
   86b38:	6202      	str	r2, [r0, #32]

	return 0;
   86b3a:	2000      	movs	r0, #0
}
   86b3c:	bc10      	pop	{r4}
   86b3e:	4770      	bx	lr

00086b40 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86b40:	4b0a      	ldr	r3, [pc, #40]	; (86b6c <usart_reset+0x2c>)
   86b42:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   86b46:	2300      	movs	r3, #0
   86b48:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   86b4a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86b4c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86b4e:	2388      	movs	r3, #136	; 0x88
   86b50:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86b52:	2324      	movs	r3, #36	; 0x24
   86b54:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   86b56:	f44f 7380 	mov.w	r3, #256	; 0x100
   86b5a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86b60:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   86b66:	6003      	str	r3, [r0, #0]
   86b68:	4770      	bx	lr
   86b6a:	bf00      	nop
   86b6c:	55534100 	.word	0x55534100

00086b70 <usart_init_rs232>:
{
   86b70:	b570      	push	{r4, r5, r6, lr}
   86b72:	4605      	mov	r5, r0
   86b74:	460c      	mov	r4, r1
   86b76:	4616      	mov	r6, r2
	usart_reset(p_usart);
   86b78:	4b0f      	ldr	r3, [pc, #60]	; (86bb8 <usart_init_rs232+0x48>)
   86b7a:	4798      	blx	r3
	ul_reg_val = 0;
   86b7c:	2200      	movs	r2, #0
   86b7e:	4b0f      	ldr	r3, [pc, #60]	; (86bbc <usart_init_rs232+0x4c>)
   86b80:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86b82:	b1a4      	cbz	r4, 86bae <usart_init_rs232+0x3e>
   86b84:	4632      	mov	r2, r6
   86b86:	6821      	ldr	r1, [r4, #0]
   86b88:	4628      	mov	r0, r5
   86b8a:	4b0d      	ldr	r3, [pc, #52]	; (86bc0 <usart_init_rs232+0x50>)
   86b8c:	4798      	blx	r3
   86b8e:	4602      	mov	r2, r0
   86b90:	b978      	cbnz	r0, 86bb2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86b92:	6863      	ldr	r3, [r4, #4]
   86b94:	68a1      	ldr	r1, [r4, #8]
   86b96:	430b      	orrs	r3, r1
   86b98:	6921      	ldr	r1, [r4, #16]
   86b9a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86b9c:	68e1      	ldr	r1, [r4, #12]
   86b9e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86ba0:	4906      	ldr	r1, [pc, #24]	; (86bbc <usart_init_rs232+0x4c>)
   86ba2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86ba4:	6869      	ldr	r1, [r5, #4]
   86ba6:	430b      	orrs	r3, r1
   86ba8:	606b      	str	r3, [r5, #4]
}
   86baa:	4610      	mov	r0, r2
   86bac:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86bae:	2201      	movs	r2, #1
   86bb0:	e7fb      	b.n	86baa <usart_init_rs232+0x3a>
   86bb2:	2201      	movs	r2, #1
   86bb4:	e7f9      	b.n	86baa <usart_init_rs232+0x3a>
   86bb6:	bf00      	nop
   86bb8:	00086b41 	.word	0x00086b41
   86bbc:	200023a4 	.word	0x200023a4
   86bc0:	00086ae9 	.word	0x00086ae9

00086bc4 <usart_init_sync_master>:
{
   86bc4:	b570      	push	{r4, r5, r6, lr}
   86bc6:	4604      	mov	r4, r0
   86bc8:	460e      	mov	r6, r1
   86bca:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86bcc:	4b15      	ldr	r3, [pc, #84]	; (86c24 <usart_init_sync_master+0x60>)
   86bce:	4798      	blx	r3
	ul_reg_val = 0;
   86bd0:	2200      	movs	r2, #0
   86bd2:	4b15      	ldr	r3, [pc, #84]	; (86c28 <usart_init_sync_master+0x64>)
   86bd4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   86bd6:	b306      	cbz	r6, 86c1a <usart_init_sync_master+0x56>
   86bd8:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86bda:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   86bde:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86be2:	1e51      	subs	r1, r2, #1
   86be4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86be8:	4299      	cmp	r1, r3
   86bea:	d818      	bhi.n	86c1e <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86bec:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86bee:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   86bf0:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   86bf8:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86bfa:	6873      	ldr	r3, [r6, #4]
   86bfc:	68b2      	ldr	r2, [r6, #8]
   86bfe:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   86c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86c04:	6932      	ldr	r2, [r6, #16]
   86c06:	4313      	orrs	r3, r2
   86c08:	68f2      	ldr	r2, [r6, #12]
   86c0a:	4313      	orrs	r3, r2
   86c0c:	4a06      	ldr	r2, [pc, #24]	; (86c28 <usart_init_sync_master+0x64>)
   86c0e:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86c10:	6862      	ldr	r2, [r4, #4]
   86c12:	4313      	orrs	r3, r2
   86c14:	6063      	str	r3, [r4, #4]
	return 0;
   86c16:	2000      	movs	r0, #0
   86c18:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86c1a:	2001      	movs	r0, #1
   86c1c:	bd70      	pop	{r4, r5, r6, pc}
   86c1e:	2001      	movs	r0, #1
}
   86c20:	bd70      	pop	{r4, r5, r6, pc}
   86c22:	bf00      	nop
   86c24:	00086b41 	.word	0x00086b41
   86c28:	200023a8 	.word	0x200023a8

00086c2c <usart_init_iso7816>:
{
   86c2c:	b570      	push	{r4, r5, r6, lr}
   86c2e:	4606      	mov	r6, r0
   86c30:	460c      	mov	r4, r1
   86c32:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86c34:	4b30      	ldr	r3, [pc, #192]	; (86cf8 <usart_init_iso7816+0xcc>)
   86c36:	4798      	blx	r3
	ul_reg_val = 0;
   86c38:	2200      	movs	r2, #0
   86c3a:	4b30      	ldr	r3, [pc, #192]	; (86cfc <usart_init_iso7816+0xd0>)
   86c3c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
   86c3e:	2c00      	cmp	r4, #0
   86c40:	d04f      	beq.n	86ce2 <usart_init_iso7816+0xb6>
   86c42:	68a3      	ldr	r3, [r4, #8]
   86c44:	f433 7300 	bics.w	r3, r3, #512	; 0x200
   86c48:	d14d      	bne.n	86ce6 <usart_init_iso7816+0xba>
	if (p_usart_opt->protocol_type == ISO7816_T_0) {
   86c4a:	69e3      	ldr	r3, [r4, #28]
   86c4c:	2b00      	cmp	r3, #0
   86c4e:	d13c      	bne.n	86cca <usart_init_iso7816+0x9e>
				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
   86c50:	6963      	ldr	r3, [r4, #20]
   86c52:	061b      	lsls	r3, r3, #24
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
   86c54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
   86c58:	f042 0204 	orr.w	r2, r2, #4
   86c5c:	4927      	ldr	r1, [pc, #156]	; (86cfc <usart_init_iso7816+0xd0>)
   86c5e:	600a      	str	r2, [r1, #0]
		if (p_usart_opt->bit_order) {
   86c60:	69a2      	ldr	r2, [r4, #24]
   86c62:	b122      	cbz	r2, 86c6e <usart_init_iso7816+0x42>
			ul_reg_val |= US_MR_MSBF;
   86c64:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
   86c68:	f043 0304 	orr.w	r3, r3, #4
   86c6c:	600b      	str	r3, [r1, #0]
	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
   86c6e:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + clock / 2) / clock;
   86c70:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86c74:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86c78:	1e6a      	subs	r2, r5, #1
   86c7a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   86c7e:	429a      	cmp	r2, r3
   86c80:	d837      	bhi.n	86cf2 <usart_init_iso7816+0xc6>
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86c82:	6873      	ldr	r3, [r6, #4]
			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
   86c84:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
   86c88:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   86c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
   86c90:	6073      	str	r3, [r6, #4]
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86c92:	6235      	str	r5, [r6, #32]
	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
   86c94:	6863      	ldr	r3, [r4, #4]
   86c96:	6433      	str	r3, [r6, #64]	; 0x40
	ul_reg_val |= p_usart_opt->parity_type;
   86c98:	4a18      	ldr	r2, [pc, #96]	; (86cfc <usart_init_iso7816+0xd0>)
   86c9a:	68a3      	ldr	r3, [r4, #8]
   86c9c:	6811      	ldr	r1, [r2, #0]
   86c9e:	430b      	orrs	r3, r1
   86ca0:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->inhibit_nack) {
   86ca2:	68e2      	ldr	r2, [r4, #12]
   86ca4:	b11a      	cbz	r2, 86cae <usart_init_iso7816+0x82>
		ul_reg_val |= US_MR_INACK;
   86ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   86caa:	4a14      	ldr	r2, [pc, #80]	; (86cfc <usart_init_iso7816+0xd0>)
   86cac:	6013      	str	r3, [r2, #0]
	if (p_usart_opt->dis_suc_nack) {
   86cae:	6923      	ldr	r3, [r4, #16]
   86cb0:	b123      	cbz	r3, 86cbc <usart_init_iso7816+0x90>
		ul_reg_val |= US_MR_DSNACK;
   86cb2:	4a12      	ldr	r2, [pc, #72]	; (86cfc <usart_init_iso7816+0xd0>)
   86cb4:	6813      	ldr	r3, [r2, #0]
   86cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   86cba:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86cbc:	6873      	ldr	r3, [r6, #4]
   86cbe:	4a0f      	ldr	r2, [pc, #60]	; (86cfc <usart_init_iso7816+0xd0>)
   86cc0:	6812      	ldr	r2, [r2, #0]
   86cc2:	4313      	orrs	r3, r2
   86cc4:	6073      	str	r3, [r6, #4]
	return 0;
   86cc6:	2000      	movs	r0, #0
   86cc8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
   86cca:	2b01      	cmp	r3, #1
   86ccc:	d001      	beq.n	86cd2 <usart_init_iso7816+0xa6>
		return 1;
   86cce:	2001      	movs	r0, #1
   86cd0:	bd70      	pop	{r4, r5, r6, pc}
		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
   86cd2:	69a3      	ldr	r3, [r4, #24]
   86cd4:	b94b      	cbnz	r3, 86cea <usart_init_iso7816+0xbe>
   86cd6:	6963      	ldr	r3, [r4, #20]
   86cd8:	b94b      	cbnz	r3, 86cee <usart_init_iso7816+0xc2>
		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
   86cda:	2206      	movs	r2, #6
   86cdc:	4b07      	ldr	r3, [pc, #28]	; (86cfc <usart_init_iso7816+0xd0>)
   86cde:	601a      	str	r2, [r3, #0]
   86ce0:	e7c5      	b.n	86c6e <usart_init_iso7816+0x42>
		return 1;
   86ce2:	2001      	movs	r0, #1
   86ce4:	bd70      	pop	{r4, r5, r6, pc}
   86ce6:	2001      	movs	r0, #1
   86ce8:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   86cea:	2001      	movs	r0, #1
   86cec:	bd70      	pop	{r4, r5, r6, pc}
   86cee:	2001      	movs	r0, #1
   86cf0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86cf2:	2001      	movs	r0, #1
}
   86cf4:	bd70      	pop	{r4, r5, r6, pc}
   86cf6:	bf00      	nop
   86cf8:	00086b41 	.word	0x00086b41
   86cfc:	200023ac 	.word	0x200023ac

00086d00 <usart_init_spi_master>:
{
   86d00:	b570      	push	{r4, r5, r6, lr}
   86d02:	4606      	mov	r6, r0
   86d04:	460c      	mov	r4, r1
   86d06:	4615      	mov	r5, r2
	usart_reset(p_usart);
   86d08:	4b2a      	ldr	r3, [pc, #168]	; (86db4 <usart_init_spi_master+0xb4>)
   86d0a:	4798      	blx	r3
	ul_reg_val = 0;
   86d0c:	2200      	movs	r2, #0
   86d0e:	4b2a      	ldr	r3, [pc, #168]	; (86db8 <usart_init_spi_master+0xb8>)
   86d10:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86d12:	2c00      	cmp	r4, #0
   86d14:	d049      	beq.n	86daa <usart_init_spi_master+0xaa>
   86d16:	68a3      	ldr	r3, [r4, #8]
   86d18:	2b03      	cmp	r3, #3
   86d1a:	d901      	bls.n	86d20 <usart_init_spi_master+0x20>
		return 1;
   86d1c:	2001      	movs	r0, #1
   86d1e:	bd70      	pop	{r4, r5, r6, pc}
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86d20:	6823      	ldr	r3, [r4, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   86d22:	eb05 0553 	add.w	r5, r5, r3, lsr #1
   86d26:	fbb5 f5f3 	udiv	r5, r5, r3
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86d2a:	1f2a      	subs	r2, r5, #4
   86d2c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
   86d30:	429a      	cmp	r2, r3
   86d32:	d83c      	bhi.n	86dae <usart_init_spi_master+0xae>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86d34:	6235      	str	r5, [r6, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86d36:	6863      	ldr	r3, [r4, #4]
   86d38:	68e2      	ldr	r2, [r4, #12]
   86d3a:	4313      	orrs	r3, r2
   86d3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   86d40:	f042 020e 	orr.w	r2, r2, #14
   86d44:	491c      	ldr	r1, [pc, #112]	; (86db8 <usart_init_spi_master+0xb8>)
   86d46:	600a      	str	r2, [r1, #0]
	switch (p_usart_opt->spi_mode) {
   86d48:	68a2      	ldr	r2, [r4, #8]
   86d4a:	2a03      	cmp	r2, #3
   86d4c:	d80b      	bhi.n	86d66 <usart_init_spi_master+0x66>
   86d4e:	e8df f002 	tbb	[pc, r2]
   86d52:	1102      	.short	0x1102
   86d54:	231c      	.short	0x231c
		ul_reg_val &= ~US_MR_CPOL;
   86d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86d5e:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d62:	4a15      	ldr	r2, [pc, #84]	; (86db8 <usart_init_spi_master+0xb8>)
   86d64:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86d66:	6873      	ldr	r3, [r6, #4]
   86d68:	4a13      	ldr	r2, [pc, #76]	; (86db8 <usart_init_spi_master+0xb8>)
   86d6a:	6812      	ldr	r2, [r2, #0]
   86d6c:	4313      	orrs	r3, r2
   86d6e:	6073      	str	r3, [r6, #4]
	return 0;
   86d70:	2000      	movs	r0, #0
   86d72:	bd70      	pop	{r4, r5, r6, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86d80:	f043 030e 	orr.w	r3, r3, #14
   86d84:	4a0c      	ldr	r2, [pc, #48]	; (86db8 <usart_init_spi_master+0xb8>)
   86d86:	6013      	str	r3, [r2, #0]
		break;
   86d88:	e7ed      	b.n	86d66 <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86d8a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86d8e:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86d92:	4a09      	ldr	r2, [pc, #36]	; (86db8 <usart_init_spi_master+0xb8>)
   86d94:	6013      	str	r3, [r2, #0]
		break;
   86d96:	e7e6      	b.n	86d66 <usart_init_spi_master+0x66>
		ul_reg_val |= US_MR_CPOL;
   86d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86d9c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   86da0:	f043 030e 	orr.w	r3, r3, #14
   86da4:	4a04      	ldr	r2, [pc, #16]	; (86db8 <usart_init_spi_master+0xb8>)
   86da6:	6013      	str	r3, [r2, #0]
		break;
   86da8:	e7dd      	b.n	86d66 <usart_init_spi_master+0x66>
		return 1;
   86daa:	2001      	movs	r0, #1
   86dac:	bd70      	pop	{r4, r5, r6, pc}
   86dae:	2001      	movs	r0, #1
}
   86db0:	bd70      	pop	{r4, r5, r6, pc}
   86db2:	bf00      	nop
   86db4:	00086b41 	.word	0x00086b41
   86db8:	200023b0 	.word	0x200023b0

00086dbc <usart_init_spi_slave>:
{
   86dbc:	b538      	push	{r3, r4, r5, lr}
   86dbe:	4604      	mov	r4, r0
   86dc0:	460d      	mov	r5, r1
	usart_reset(p_usart);
   86dc2:	4b25      	ldr	r3, [pc, #148]	; (86e58 <usart_init_spi_slave+0x9c>)
   86dc4:	4798      	blx	r3
	ul_reg_val = 0;
   86dc6:	2200      	movs	r2, #0
   86dc8:	4b24      	ldr	r3, [pc, #144]	; (86e5c <usart_init_spi_slave+0xa0>)
   86dca:	601a      	str	r2, [r3, #0]
	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
   86dcc:	6863      	ldr	r3, [r4, #4]
   86dce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   86dd2:	6063      	str	r3, [r4, #4]
	p_usart->US_MR |= US_MR_USCLKS_SCK;
   86dd4:	6863      	ldr	r3, [r4, #4]
   86dd6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   86dda:	6063      	str	r3, [r4, #4]
	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
   86ddc:	2d00      	cmp	r5, #0
   86dde:	d036      	beq.n	86e4e <usart_init_spi_slave+0x92>
   86de0:	68aa      	ldr	r2, [r5, #8]
   86de2:	2a03      	cmp	r2, #3
   86de4:	d835      	bhi.n	86e52 <usart_init_spi_slave+0x96>
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86de6:	686b      	ldr	r3, [r5, #4]
   86de8:	68e9      	ldr	r1, [r5, #12]
   86dea:	430b      	orrs	r3, r1
	switch (p_usart_opt->spi_mode) {
   86dec:	2a03      	cmp	r2, #3
   86dee:	d803      	bhi.n	86df8 <usart_init_spi_slave+0x3c>
   86df0:	e8df f002 	tbb	[pc, r2]
   86df4:	241f160d 	.word	0x241f160d
	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
   86df8:	f043 030f 	orr.w	r3, r3, #15
   86dfc:	4a17      	ldr	r2, [pc, #92]	; (86e5c <usart_init_spi_slave+0xa0>)
   86dfe:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   86e00:	6863      	ldr	r3, [r4, #4]
   86e02:	4a16      	ldr	r2, [pc, #88]	; (86e5c <usart_init_spi_slave+0xa0>)
   86e04:	6812      	ldr	r2, [r2, #0]
   86e06:	4313      	orrs	r3, r2
   86e08:	6063      	str	r3, [r4, #4]
	return 0;
   86e0a:	2000      	movs	r0, #0
   86e0c:	bd38      	pop	{r3, r4, r5, pc}
		ul_reg_val &= ~US_MR_CPOL;
   86e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86e12:	f443 7387 	orr.w	r3, r3, #270	; 0x10e
   86e16:	f043 0301 	orr.w	r3, r3, #1
   86e1a:	4a10      	ldr	r2, [pc, #64]	; (86e5c <usart_init_spi_slave+0xa0>)
   86e1c:	6013      	str	r3, [r2, #0]
		break;
   86e1e:	e7ef      	b.n	86e00 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPOL;
   86e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86e28:	f043 030f 	orr.w	r3, r3, #15
   86e2c:	4a0b      	ldr	r2, [pc, #44]	; (86e5c <usart_init_spi_slave+0xa0>)
   86e2e:	6013      	str	r3, [r2, #0]
		break;
   86e30:	e7e6      	b.n	86e00 <usart_init_spi_slave+0x44>
		ul_reg_val |= US_MR_CPOL;
   86e32:	4a0b      	ldr	r2, [pc, #44]	; (86e60 <usart_init_spi_slave+0xa4>)
   86e34:	431a      	orrs	r2, r3
   86e36:	4b09      	ldr	r3, [pc, #36]	; (86e5c <usart_init_spi_slave+0xa0>)
   86e38:	601a      	str	r2, [r3, #0]
		break;
   86e3a:	e7e1      	b.n	86e00 <usart_init_spi_slave+0x44>
		ul_reg_val &= ~US_MR_CPHA;
   86e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86e44:	f043 030f 	orr.w	r3, r3, #15
   86e48:	4a04      	ldr	r2, [pc, #16]	; (86e5c <usart_init_spi_slave+0xa0>)
   86e4a:	6013      	str	r3, [r2, #0]
		break;
   86e4c:	e7d8      	b.n	86e00 <usart_init_spi_slave+0x44>
		return 1;
   86e4e:	2001      	movs	r0, #1
   86e50:	bd38      	pop	{r3, r4, r5, pc}
   86e52:	2001      	movs	r0, #1
}
   86e54:	bd38      	pop	{r3, r4, r5, pc}
   86e56:	bf00      	nop
   86e58:	00086b41 	.word	0x00086b41
   86e5c:	200023b4 	.word	0x200023b4
   86e60:	0001010f 	.word	0x0001010f

00086e64 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86e64:	2340      	movs	r3, #64	; 0x40
   86e66:	6003      	str	r3, [r0, #0]
   86e68:	4770      	bx	lr

00086e6a <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86e6a:	2380      	movs	r3, #128	; 0x80
   86e6c:	6003      	str	r3, [r0, #0]
   86e6e:	4770      	bx	lr

00086e70 <usart_set_tx_timeguard>:
	p_usart->US_TTGR = timeguard;
   86e70:	6281      	str	r1, [r0, #40]	; 0x28
   86e72:	4770      	bx	lr

00086e74 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   86e74:	2310      	movs	r3, #16
   86e76:	6003      	str	r3, [r0, #0]
   86e78:	4770      	bx	lr

00086e7a <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86e7a:	2320      	movs	r3, #32
   86e7c:	6003      	str	r3, [r0, #0]
   86e7e:	4770      	bx	lr

00086e80 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86e80:	6081      	str	r1, [r0, #8]
   86e82:	4770      	bx	lr

00086e84 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   86e84:	60c1      	str	r1, [r0, #12]
   86e86:	4770      	bx	lr

00086e88 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86e88:	6900      	ldr	r0, [r0, #16]
}
   86e8a:	4770      	bx	lr

00086e8c <usart_get_status>:
	return p_usart->US_CSR;
   86e8c:	6940      	ldr	r0, [r0, #20]
}
   86e8e:	4770      	bx	lr

00086e90 <usart_reset_status>:
	p_usart->US_CR = US_CR_RSTSTA;
   86e90:	f44f 7380 	mov.w	r3, #256	; 0x100
   86e94:	6003      	str	r3, [r0, #0]
   86e96:	4770      	bx	lr

00086e98 <usart_reset_iterations>:
	p_usart->US_CR = US_CR_RSTIT;
   86e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   86e9c:	6003      	str	r3, [r0, #0]
   86e9e:	4770      	bx	lr

00086ea0 <usart_reset_nack>:
	p_usart->US_CR = US_CR_RSTNACK;
   86ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   86ea4:	6003      	str	r3, [r0, #0]
   86ea6:	4770      	bx	lr

00086ea8 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86ea8:	6940      	ldr	r0, [r0, #20]
}
   86eaa:	f3c0 2040 	ubfx	r0, r0, #9, #1
   86eae:	4770      	bx	lr

00086eb0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86eb0:	6943      	ldr	r3, [r0, #20]
   86eb2:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86eb6:	bf1d      	ittte	ne
   86eb8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   86ebc:	61c1      	strne	r1, [r0, #28]
	return 0;
   86ebe:	2000      	movne	r0, #0
		return 1;
   86ec0:	2001      	moveq	r0, #1
}
   86ec2:	4770      	bx	lr

00086ec4 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86ec4:	6943      	ldr	r3, [r0, #20]
   86ec6:	f013 0f02 	tst.w	r3, #2
   86eca:	d0fb      	beq.n	86ec4 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   86ecc:	f3c1 0108 	ubfx	r1, r1, #0, #9
   86ed0:	61c1      	str	r1, [r0, #28]
}
   86ed2:	2000      	movs	r0, #0
   86ed4:	4770      	bx	lr

00086ed6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86ed6:	6943      	ldr	r3, [r0, #20]
   86ed8:	f013 0f01 	tst.w	r3, #1
   86edc:	d005      	beq.n	86eea <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86ede:	6983      	ldr	r3, [r0, #24]
   86ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86ee4:	600b      	str	r3, [r1, #0]
	return 0;
   86ee6:	2000      	movs	r0, #0
   86ee8:	4770      	bx	lr
		return 1;
   86eea:	2001      	movs	r0, #1
}
   86eec:	4770      	bx	lr

00086eee <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86eee:	6943      	ldr	r3, [r0, #20]
   86ef0:	f013 0f01 	tst.w	r3, #1
   86ef4:	d0fb      	beq.n	86eee <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   86ef6:	6983      	ldr	r3, [r0, #24]
   86ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86efc:	600b      	str	r3, [r1, #0]
}
   86efe:	2000      	movs	r0, #0
   86f00:	4770      	bx	lr

00086f02 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   86f02:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   86f04:	23ac      	movs	r3, #172	; 0xac
   86f06:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   86f08:	680b      	ldr	r3, [r1, #0]
   86f0a:	684a      	ldr	r2, [r1, #4]
   86f0c:	fbb3 f3f2 	udiv	r3, r3, r2
   86f10:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   86f12:	1e5c      	subs	r4, r3, #1
   86f14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   86f18:	4294      	cmp	r4, r2
   86f1a:	d80b      	bhi.n	86f34 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   86f1c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   86f1e:	688b      	ldr	r3, [r1, #8]
   86f20:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   86f22:	f240 2302 	movw	r3, #514	; 0x202
   86f26:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   86f2a:	2350      	movs	r3, #80	; 0x50
   86f2c:	6003      	str	r3, [r0, #0]

	return 0;
   86f2e:	2000      	movs	r0, #0
}
   86f30:	bc10      	pop	{r4}
   86f32:	4770      	bx	lr
		return 1;
   86f34:	2001      	movs	r0, #1
   86f36:	e7fb      	b.n	86f30 <uart_init+0x2e>

00086f38 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   86f38:	6943      	ldr	r3, [r0, #20]
   86f3a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   86f3e:	bf1a      	itte	ne
   86f40:	61c1      	strne	r1, [r0, #28]
	return 0;
   86f42:	2000      	movne	r0, #0
		return 1;
   86f44:	2001      	moveq	r0, #1
}
   86f46:	4770      	bx	lr

00086f48 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   86f48:	6943      	ldr	r3, [r0, #20]
   86f4a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   86f4e:	bf1d      	ittte	ne
   86f50:	6983      	ldrne	r3, [r0, #24]
   86f52:	700b      	strbne	r3, [r1, #0]
	return 0;
   86f54:	2000      	movne	r0, #0
		return 1;
   86f56:	2001      	moveq	r0, #1
}
   86f58:	4770      	bx	lr

00086f5a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   86f5a:	e7fe      	b.n	86f5a <Dummy_Handler>

00086f5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   86f5c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   86f5e:	4b1c      	ldr	r3, [pc, #112]	; (86fd0 <Reset_Handler+0x74>)
   86f60:	4a1c      	ldr	r2, [pc, #112]	; (86fd4 <Reset_Handler+0x78>)
   86f62:	429a      	cmp	r2, r3
   86f64:	d010      	beq.n	86f88 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   86f66:	4b1c      	ldr	r3, [pc, #112]	; (86fd8 <Reset_Handler+0x7c>)
   86f68:	4a19      	ldr	r2, [pc, #100]	; (86fd0 <Reset_Handler+0x74>)
   86f6a:	429a      	cmp	r2, r3
   86f6c:	d20c      	bcs.n	86f88 <Reset_Handler+0x2c>
   86f6e:	3b01      	subs	r3, #1
   86f70:	1a9b      	subs	r3, r3, r2
   86f72:	f023 0303 	bic.w	r3, r3, #3
   86f76:	3304      	adds	r3, #4
   86f78:	4413      	add	r3, r2
   86f7a:	4916      	ldr	r1, [pc, #88]	; (86fd4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   86f7c:	f851 0b04 	ldr.w	r0, [r1], #4
   86f80:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86f84:	429a      	cmp	r2, r3
   86f86:	d1f9      	bne.n	86f7c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86f88:	4b14      	ldr	r3, [pc, #80]	; (86fdc <Reset_Handler+0x80>)
   86f8a:	4a15      	ldr	r2, [pc, #84]	; (86fe0 <Reset_Handler+0x84>)
   86f8c:	429a      	cmp	r2, r3
   86f8e:	d20a      	bcs.n	86fa6 <Reset_Handler+0x4a>
   86f90:	3b01      	subs	r3, #1
   86f92:	1a9b      	subs	r3, r3, r2
   86f94:	f023 0303 	bic.w	r3, r3, #3
   86f98:	3304      	adds	r3, #4
   86f9a:	4413      	add	r3, r2
		*pDest++ = 0;
   86f9c:	2100      	movs	r1, #0
   86f9e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   86fa2:	4293      	cmp	r3, r2
   86fa4:	d1fb      	bne.n	86f9e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86fa6:	4b0f      	ldr	r3, [pc, #60]	; (86fe4 <Reset_Handler+0x88>)
   86fa8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86fac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   86fb0:	490d      	ldr	r1, [pc, #52]	; (86fe8 <Reset_Handler+0x8c>)
   86fb2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86fb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   86fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86fbc:	d203      	bcs.n	86fc6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   86fbe:	688b      	ldr	r3, [r1, #8]
   86fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86fc4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86fc6:	4b09      	ldr	r3, [pc, #36]	; (86fec <Reset_Handler+0x90>)
   86fc8:	4798      	blx	r3

	/* Branch to main function */
	main();
   86fca:	4b09      	ldr	r3, [pc, #36]	; (86ff0 <Reset_Handler+0x94>)
   86fcc:	4798      	blx	r3
   86fce:	e7fe      	b.n	86fce <Reset_Handler+0x72>
   86fd0:	20000000 	.word	0x20000000
   86fd4:	0008ea8c 	.word	0x0008ea8c
   86fd8:	200010c8 	.word	0x200010c8
   86fdc:	20002e34 	.word	0x20002e34
   86fe0:	200010c8 	.word	0x200010c8
   86fe4:	00080000 	.word	0x00080000
   86fe8:	e000ed00 	.word	0xe000ed00
   86fec:	0008786d 	.word	0x0008786d
   86ff0:	0008733d 	.word	0x0008733d

00086ff4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86ff4:	4b3d      	ldr	r3, [pc, #244]	; (870ec <SystemCoreClockUpdate+0xf8>)
   86ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86ff8:	f003 0303 	and.w	r3, r3, #3
   86ffc:	2b03      	cmp	r3, #3
   86ffe:	d80e      	bhi.n	8701e <SystemCoreClockUpdate+0x2a>
   87000:	e8df f003 	tbb	[pc, r3]
   87004:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   87008:	4b39      	ldr	r3, [pc, #228]	; (870f0 <SystemCoreClockUpdate+0xfc>)
   8700a:	695b      	ldr	r3, [r3, #20]
   8700c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   87010:	bf14      	ite	ne
   87012:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   87016:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8701a:	4b36      	ldr	r3, [pc, #216]	; (870f4 <SystemCoreClockUpdate+0x100>)
   8701c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8701e:	4b33      	ldr	r3, [pc, #204]	; (870ec <SystemCoreClockUpdate+0xf8>)
   87020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87022:	f003 0370 	and.w	r3, r3, #112	; 0x70
   87026:	2b70      	cmp	r3, #112	; 0x70
   87028:	d057      	beq.n	870da <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8702a:	4b30      	ldr	r3, [pc, #192]	; (870ec <SystemCoreClockUpdate+0xf8>)
   8702c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8702e:	4931      	ldr	r1, [pc, #196]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87030:	f3c2 1202 	ubfx	r2, r2, #4, #3
   87034:	680b      	ldr	r3, [r1, #0]
   87036:	40d3      	lsrs	r3, r2
   87038:	600b      	str	r3, [r1, #0]
   8703a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8703c:	4b2b      	ldr	r3, [pc, #172]	; (870ec <SystemCoreClockUpdate+0xf8>)
   8703e:	6a1b      	ldr	r3, [r3, #32]
   87040:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   87044:	d003      	beq.n	8704e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   87046:	4a2c      	ldr	r2, [pc, #176]	; (870f8 <SystemCoreClockUpdate+0x104>)
   87048:	4b2a      	ldr	r3, [pc, #168]	; (870f4 <SystemCoreClockUpdate+0x100>)
   8704a:	601a      	str	r2, [r3, #0]
   8704c:	e7e7      	b.n	8701e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8704e:	4a2b      	ldr	r2, [pc, #172]	; (870fc <SystemCoreClockUpdate+0x108>)
   87050:	4b28      	ldr	r3, [pc, #160]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87052:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   87054:	4b25      	ldr	r3, [pc, #148]	; (870ec <SystemCoreClockUpdate+0xf8>)
   87056:	6a1b      	ldr	r3, [r3, #32]
   87058:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8705c:	2b10      	cmp	r3, #16
   8705e:	d005      	beq.n	8706c <SystemCoreClockUpdate+0x78>
   87060:	2b20      	cmp	r3, #32
   87062:	d1dc      	bne.n	8701e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   87064:	4a24      	ldr	r2, [pc, #144]	; (870f8 <SystemCoreClockUpdate+0x104>)
   87066:	4b23      	ldr	r3, [pc, #140]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87068:	601a      	str	r2, [r3, #0]
				break;
   8706a:	e7d8      	b.n	8701e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8706c:	4a24      	ldr	r2, [pc, #144]	; (87100 <SystemCoreClockUpdate+0x10c>)
   8706e:	4b21      	ldr	r3, [pc, #132]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87070:	601a      	str	r2, [r3, #0]
				break;
   87072:	e7d4      	b.n	8701e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   87074:	4b1d      	ldr	r3, [pc, #116]	; (870ec <SystemCoreClockUpdate+0xf8>)
   87076:	6a1b      	ldr	r3, [r3, #32]
   87078:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8707c:	d00c      	beq.n	87098 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8707e:	4a1e      	ldr	r2, [pc, #120]	; (870f8 <SystemCoreClockUpdate+0x104>)
   87080:	4b1c      	ldr	r3, [pc, #112]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87082:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   87084:	4b19      	ldr	r3, [pc, #100]	; (870ec <SystemCoreClockUpdate+0xf8>)
   87086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87088:	f003 0303 	and.w	r3, r3, #3
   8708c:	2b02      	cmp	r3, #2
   8708e:	d016      	beq.n	870be <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   87090:	4a1c      	ldr	r2, [pc, #112]	; (87104 <SystemCoreClockUpdate+0x110>)
   87092:	4b18      	ldr	r3, [pc, #96]	; (870f4 <SystemCoreClockUpdate+0x100>)
   87094:	601a      	str	r2, [r3, #0]
   87096:	e7c2      	b.n	8701e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   87098:	4a18      	ldr	r2, [pc, #96]	; (870fc <SystemCoreClockUpdate+0x108>)
   8709a:	4b16      	ldr	r3, [pc, #88]	; (870f4 <SystemCoreClockUpdate+0x100>)
   8709c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8709e:	4b13      	ldr	r3, [pc, #76]	; (870ec <SystemCoreClockUpdate+0xf8>)
   870a0:	6a1b      	ldr	r3, [r3, #32]
   870a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   870a6:	2b10      	cmp	r3, #16
   870a8:	d005      	beq.n	870b6 <SystemCoreClockUpdate+0xc2>
   870aa:	2b20      	cmp	r3, #32
   870ac:	d1ea      	bne.n	87084 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   870ae:	4a12      	ldr	r2, [pc, #72]	; (870f8 <SystemCoreClockUpdate+0x104>)
   870b0:	4b10      	ldr	r3, [pc, #64]	; (870f4 <SystemCoreClockUpdate+0x100>)
   870b2:	601a      	str	r2, [r3, #0]
				break;
   870b4:	e7e6      	b.n	87084 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   870b6:	4a12      	ldr	r2, [pc, #72]	; (87100 <SystemCoreClockUpdate+0x10c>)
   870b8:	4b0e      	ldr	r3, [pc, #56]	; (870f4 <SystemCoreClockUpdate+0x100>)
   870ba:	601a      	str	r2, [r3, #0]
				break;
   870bc:	e7e2      	b.n	87084 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   870be:	4a0b      	ldr	r2, [pc, #44]	; (870ec <SystemCoreClockUpdate+0xf8>)
   870c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   870c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   870c4:	480b      	ldr	r0, [pc, #44]	; (870f4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   870c6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   870ca:	6803      	ldr	r3, [r0, #0]
   870cc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   870d0:	b2d2      	uxtb	r2, r2
   870d2:	fbb3 f3f2 	udiv	r3, r3, r2
   870d6:	6003      	str	r3, [r0, #0]
   870d8:	e7a1      	b.n	8701e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   870da:	4a06      	ldr	r2, [pc, #24]	; (870f4 <SystemCoreClockUpdate+0x100>)
   870dc:	6813      	ldr	r3, [r2, #0]
   870de:	490a      	ldr	r1, [pc, #40]	; (87108 <SystemCoreClockUpdate+0x114>)
   870e0:	fba1 1303 	umull	r1, r3, r1, r3
   870e4:	085b      	lsrs	r3, r3, #1
   870e6:	6013      	str	r3, [r2, #0]
   870e8:	4770      	bx	lr
   870ea:	bf00      	nop
   870ec:	400e0400 	.word	0x400e0400
   870f0:	400e1210 	.word	0x400e1210
   870f4:	200006f0 	.word	0x200006f0
   870f8:	00b71b00 	.word	0x00b71b00
   870fc:	003d0900 	.word	0x003d0900
   87100:	007a1200 	.word	0x007a1200
   87104:	0e4e1c00 	.word	0x0e4e1c00
   87108:	aaaaaaab 	.word	0xaaaaaaab

0008710c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8710c:	4b0a      	ldr	r3, [pc, #40]	; (87138 <_sbrk+0x2c>)
   8710e:	681b      	ldr	r3, [r3, #0]
   87110:	b153      	cbz	r3, 87128 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   87112:	4b09      	ldr	r3, [pc, #36]	; (87138 <_sbrk+0x2c>)
   87114:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   87116:	181a      	adds	r2, r3, r0
   87118:	4908      	ldr	r1, [pc, #32]	; (8713c <_sbrk+0x30>)
   8711a:	4291      	cmp	r1, r2
   8711c:	db08      	blt.n	87130 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8711e:	4610      	mov	r0, r2
   87120:	4a05      	ldr	r2, [pc, #20]	; (87138 <_sbrk+0x2c>)
   87122:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   87124:	4618      	mov	r0, r3
   87126:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   87128:	4a05      	ldr	r2, [pc, #20]	; (87140 <_sbrk+0x34>)
   8712a:	4b03      	ldr	r3, [pc, #12]	; (87138 <_sbrk+0x2c>)
   8712c:	601a      	str	r2, [r3, #0]
   8712e:	e7f0      	b.n	87112 <_sbrk+0x6>
		return (caddr_t) -1;	
   87130:	f04f 30ff 	mov.w	r0, #4294967295
}
   87134:	4770      	bx	lr
   87136:	bf00      	nop
   87138:	200023b8 	.word	0x200023b8
   8713c:	2007fffc 	.word	0x2007fffc
   87140:	20082000 	.word	0x20082000

00087144 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   87144:	f04f 30ff 	mov.w	r0, #4294967295
   87148:	4770      	bx	lr

0008714a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8714a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8714e:	604b      	str	r3, [r1, #4]

	return 0;
}
   87150:	2000      	movs	r0, #0
   87152:	4770      	bx	lr

00087154 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   87154:	2001      	movs	r0, #1
   87156:	4770      	bx	lr

00087158 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   87158:	2000      	movs	r0, #0
   8715a:	4770      	bx	lr

0008715c <_exit>:

extern void _exit(int status)
{
   8715c:	b508      	push	{r3, lr}
	printf("Exiting with status %d.\n", status);
   8715e:	4601      	mov	r1, r0
   87160:	4801      	ldr	r0, [pc, #4]	; (87168 <_exit+0xc>)
   87162:	4b02      	ldr	r3, [pc, #8]	; (8716c <_exit+0x10>)
   87164:	4798      	blx	r3
   87166:	e7fe      	b.n	87166 <_exit+0xa>
   87168:	0008e5a0 	.word	0x0008e5a0
   8716c:	000878b5 	.word	0x000878b5

00087170 <_kill>:

	for (;;);
}

extern void _kill(int pid, int sig)
{
   87170:	4770      	bx	lr

00087172 <_getpid>:
}

extern int _getpid(void)
{
	return -1;
}
   87172:	f04f 30ff 	mov.w	r0, #4294967295
   87176:	4770      	bx	lr

00087178 <fpga_program_setup1>:
	FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   87178:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   8717a:	2008      	movs	r0, #8
   8717c:	4b19      	ldr	r3, [pc, #100]	; (871e4 <fpga_program_setup1+0x6c>)
   8717e:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);	
	usart_enable_tx(FPGA_PROG_USART);
#else
				
	spi_enable_clock(SPI);
   87180:	4c19      	ldr	r4, [pc, #100]	; (871e8 <fpga_program_setup1+0x70>)
   87182:	4620      	mov	r0, r4
   87184:	4b19      	ldr	r3, [pc, #100]	; (871ec <fpga_program_setup1+0x74>)
   87186:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   87188:	2380      	movs	r3, #128	; 0x80
   8718a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8718c:	6863      	ldr	r3, [r4, #4]
   8718e:	f043 0301 	orr.w	r3, r3, #1
   87192:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   87194:	6863      	ldr	r3, [r4, #4]
   87196:	f043 0310 	orr.w	r3, r3, #16
   8719a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8719c:	6863      	ldr	r3, [r4, #4]
   8719e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   871a2:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
				
	spi_set_clock_polarity(SPI, 0, 0);
   871a4:	2200      	movs	r2, #0
   871a6:	4611      	mov	r1, r2
   871a8:	4620      	mov	r0, r4
   871aa:	4b11      	ldr	r3, [pc, #68]	; (871f0 <fpga_program_setup1+0x78>)
   871ac:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   871ae:	2201      	movs	r2, #1
   871b0:	2100      	movs	r1, #0
   871b2:	4620      	mov	r0, r4
   871b4:	4b0f      	ldr	r3, [pc, #60]	; (871f4 <fpga_program_setup1+0x7c>)
   871b6:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   871b8:	490f      	ldr	r1, [pc, #60]	; (871f8 <fpga_program_setup1+0x80>)
   871ba:	4810      	ldr	r0, [pc, #64]	; (871fc <fpga_program_setup1+0x84>)
   871bc:	4b10      	ldr	r3, [pc, #64]	; (87200 <fpga_program_setup1+0x88>)
   871be:	4798      	blx	r3
   871c0:	b2c2      	uxtb	r2, r0
   871c2:	2100      	movs	r1, #0
   871c4:	4620      	mov	r0, r4
   871c6:	4b0f      	ldr	r3, [pc, #60]	; (87204 <fpga_program_setup1+0x8c>)
   871c8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   871ca:	2301      	movs	r3, #1
   871cc:	6023      	str	r3, [r4, #0]
				
	spi_enable(SPI);
				
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   871ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   871d2:	200e      	movs	r0, #14
   871d4:	4c0c      	ldr	r4, [pc, #48]	; (87208 <fpga_program_setup1+0x90>)
   871d6:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);			
   871d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   871dc:	200f      	movs	r0, #15
   871de:	47a0      	blx	r4
#endif
}
   871e0:	bd10      	pop	{r4, pc}
   871e2:	bf00      	nop
   871e4:	000851f9 	.word	0x000851f9
   871e8:	40008000 	.word	0x40008000
   871ec:	000855f9 	.word	0x000855f9
   871f0:	0008567b 	.word	0x0008567b
   871f4:	00085699 	.word	0x00085699
   871f8:	05b8d800 	.word	0x05b8d800
   871fc:	000f4240 	.word	0x000f4240
   87200:	000856b7 	.word	0x000856b7
   87204:	000856cd 	.word	0x000856cd
   87208:	00085215 	.word	0x00085215

0008720c <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   8720c:	b508      	push	{r3, lr}
	FPGA_NPROG_HIGH();	
   8720e:	2008      	movs	r0, #8
   87210:	4b01      	ldr	r3, [pc, #4]	; (87218 <fpga_program_setup2+0xc>)
   87212:	4798      	blx	r3
}
   87214:	bd08      	pop	{r3, pc}
   87216:	bf00      	nop
   87218:	000851df 	.word	0x000851df

0008721c <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   8721c:	b510      	push	{r4, lr}
   8721e:	4601      	mov	r1, r0
		databyte = databyte >> 1;
	}
	#elif FPGA_USE_USART
	usart_putchar(FPGA_PROG_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   87220:	2300      	movs	r3, #0
   87222:	461a      	mov	r2, r3
   87224:	4801      	ldr	r0, [pc, #4]	; (8722c <fpga_program_sendbyte+0x10>)
   87226:	4c02      	ldr	r4, [pc, #8]	; (87230 <fpga_program_sendbyte+0x14>)
   87228:	47a0      	blx	r4
	#endif
}
   8722a:	bd10      	pop	{r4, pc}
   8722c:	40008000 	.word	0x40008000
   87230:	00085647 	.word	0x00085647

00087234 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   87234:	b5f0      	push	{r4, r5, r6, r7, lr}
   87236:	b083      	sub	sp, #12
   87238:	4605      	mov	r5, r0
   8723a:	460c      	mov	r4, r1
	uint32_t val = 0;
   8723c:	2300      	movs	r3, #0
   8723e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   87240:	4b18      	ldr	r3, [pc, #96]	; (872a4 <usart_serial_getchar+0x70>)
   87242:	4298      	cmp	r0, r3
   87244:	d010      	beq.n	87268 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   87246:	4b18      	ldr	r3, [pc, #96]	; (872a8 <usart_serial_getchar+0x74>)
   87248:	4298      	cmp	r0, r3
   8724a:	d021      	beq.n	87290 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8724c:	4b17      	ldr	r3, [pc, #92]	; (872ac <usart_serial_getchar+0x78>)
   8724e:	4298      	cmp	r0, r3
   87250:	d111      	bne.n	87276 <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   87252:	461e      	mov	r6, r3
   87254:	4d16      	ldr	r5, [pc, #88]	; (872b0 <usart_serial_getchar+0x7c>)
   87256:	a901      	add	r1, sp, #4
   87258:	4630      	mov	r0, r6
   8725a:	47a8      	blx	r5
   8725c:	2800      	cmp	r0, #0
   8725e:	d1fa      	bne.n	87256 <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   87260:	9b01      	ldr	r3, [sp, #4]
   87262:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   87264:	b003      	add	sp, #12
   87266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   87268:	461f      	mov	r7, r3
   8726a:	4e12      	ldr	r6, [pc, #72]	; (872b4 <usart_serial_getchar+0x80>)
   8726c:	4621      	mov	r1, r4
   8726e:	4638      	mov	r0, r7
   87270:	47b0      	blx	r6
   87272:	2800      	cmp	r0, #0
   87274:	d1fa      	bne.n	8726c <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   87276:	4b10      	ldr	r3, [pc, #64]	; (872b8 <usart_serial_getchar+0x84>)
   87278:	429d      	cmp	r5, r3
   8727a:	d1f3      	bne.n	87264 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   8727c:	461e      	mov	r6, r3
   8727e:	4d0c      	ldr	r5, [pc, #48]	; (872b0 <usart_serial_getchar+0x7c>)
   87280:	a901      	add	r1, sp, #4
   87282:	4630      	mov	r0, r6
   87284:	47a8      	blx	r5
   87286:	2800      	cmp	r0, #0
   87288:	d1fa      	bne.n	87280 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   8728a:	9b01      	ldr	r3, [sp, #4]
   8728c:	7023      	strb	r3, [r4, #0]
}
   8728e:	e7e9      	b.n	87264 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   87290:	461e      	mov	r6, r3
   87292:	4d07      	ldr	r5, [pc, #28]	; (872b0 <usart_serial_getchar+0x7c>)
   87294:	a901      	add	r1, sp, #4
   87296:	4630      	mov	r0, r6
   87298:	47a8      	blx	r5
   8729a:	2800      	cmp	r0, #0
   8729c:	d1fa      	bne.n	87294 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8729e:	9b01      	ldr	r3, [sp, #4]
   872a0:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   872a2:	e7df      	b.n	87264 <usart_serial_getchar+0x30>
   872a4:	400e0600 	.word	0x400e0600
   872a8:	40090000 	.word	0x40090000
   872ac:	40094000 	.word	0x40094000
   872b0:	00086ed7 	.word	0x00086ed7
   872b4:	00086f49 	.word	0x00086f49
   872b8:	40098000 	.word	0x40098000

000872bc <usart_serial_putchar>:
{
   872bc:	b570      	push	{r4, r5, r6, lr}
   872be:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   872c0:	4b18      	ldr	r3, [pc, #96]	; (87324 <usart_serial_putchar+0x68>)
   872c2:	4298      	cmp	r0, r3
   872c4:	d00a      	beq.n	872dc <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   872c6:	4b18      	ldr	r3, [pc, #96]	; (87328 <usart_serial_putchar+0x6c>)
   872c8:	4298      	cmp	r0, r3
   872ca:	d010      	beq.n	872ee <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   872cc:	4b17      	ldr	r3, [pc, #92]	; (8732c <usart_serial_putchar+0x70>)
   872ce:	4298      	cmp	r0, r3
   872d0:	d016      	beq.n	87300 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   872d2:	4b17      	ldr	r3, [pc, #92]	; (87330 <usart_serial_putchar+0x74>)
   872d4:	4298      	cmp	r0, r3
   872d6:	d01c      	beq.n	87312 <usart_serial_putchar+0x56>
	return 0;
   872d8:	2000      	movs	r0, #0
}
   872da:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   872dc:	461e      	mov	r6, r3
   872de:	4d15      	ldr	r5, [pc, #84]	; (87334 <usart_serial_putchar+0x78>)
   872e0:	4621      	mov	r1, r4
   872e2:	4630      	mov	r0, r6
   872e4:	47a8      	blx	r5
   872e6:	2800      	cmp	r0, #0
   872e8:	d1fa      	bne.n	872e0 <usart_serial_putchar+0x24>
		return 1;
   872ea:	2001      	movs	r0, #1
   872ec:	e7f5      	b.n	872da <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   872ee:	461e      	mov	r6, r3
   872f0:	4d11      	ldr	r5, [pc, #68]	; (87338 <usart_serial_putchar+0x7c>)
   872f2:	4621      	mov	r1, r4
   872f4:	4630      	mov	r0, r6
   872f6:	47a8      	blx	r5
   872f8:	2800      	cmp	r0, #0
   872fa:	d1fa      	bne.n	872f2 <usart_serial_putchar+0x36>
		return 1;
   872fc:	2001      	movs	r0, #1
   872fe:	e7ec      	b.n	872da <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   87300:	461e      	mov	r6, r3
   87302:	4d0d      	ldr	r5, [pc, #52]	; (87338 <usart_serial_putchar+0x7c>)
   87304:	4621      	mov	r1, r4
   87306:	4630      	mov	r0, r6
   87308:	47a8      	blx	r5
   8730a:	2800      	cmp	r0, #0
   8730c:	d1fa      	bne.n	87304 <usart_serial_putchar+0x48>
		return 1;
   8730e:	2001      	movs	r0, #1
   87310:	e7e3      	b.n	872da <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   87312:	461e      	mov	r6, r3
   87314:	4d08      	ldr	r5, [pc, #32]	; (87338 <usart_serial_putchar+0x7c>)
   87316:	4621      	mov	r1, r4
   87318:	4630      	mov	r0, r6
   8731a:	47a8      	blx	r5
   8731c:	2800      	cmp	r0, #0
   8731e:	d1fa      	bne.n	87316 <usart_serial_putchar+0x5a>
		return 1;
   87320:	2001      	movs	r0, #1
   87322:	e7da      	b.n	872da <usart_serial_putchar+0x1e>
   87324:	400e0600 	.word	0x400e0600
   87328:	40090000 	.word	0x40090000
   8732c:	40094000 	.word	0x40094000
   87330:	40098000 	.word	0x40098000
   87334:	00086f39 	.word	0x00086f39
   87338:	00086eb1 	.word	0x00086eb1

0008733c <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   87340:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   87342:	2110      	movs	r1, #16
   87344:	eb0d 0001 	add.w	r0, sp, r1
   87348:	4b5a      	ldr	r3, [pc, #360]	; (874b4 <main+0x178>)
   8734a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8734c:	2008      	movs	r0, #8
   8734e:	4d5a      	ldr	r5, [pc, #360]	; (874b8 <main+0x17c>)
   87350:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   87352:	4c5a      	ldr	r4, [pc, #360]	; (874bc <main+0x180>)
   87354:	4b5a      	ldr	r3, [pc, #360]	; (874c0 <main+0x184>)
   87356:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   87358:	4b5a      	ldr	r3, [pc, #360]	; (874c4 <main+0x188>)
   8735a:	4a5b      	ldr	r2, [pc, #364]	; (874c8 <main+0x18c>)
   8735c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8735e:	4b5b      	ldr	r3, [pc, #364]	; (874cc <main+0x190>)
   87360:	4a5b      	ldr	r2, [pc, #364]	; (874d0 <main+0x194>)
   87362:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   87364:	4b5b      	ldr	r3, [pc, #364]	; (874d4 <main+0x198>)
   87366:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   87368:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8736c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8736e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   87372:	9303      	str	r3, [sp, #12]
   87374:	2008      	movs	r0, #8
   87376:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   87378:	a901      	add	r1, sp, #4
   8737a:	4620      	mov	r0, r4
   8737c:	4b56      	ldr	r3, [pc, #344]	; (874d8 <main+0x19c>)
   8737e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   87380:	4d56      	ldr	r5, [pc, #344]	; (874dc <main+0x1a0>)
   87382:	682b      	ldr	r3, [r5, #0]
   87384:	2100      	movs	r1, #0
   87386:	6898      	ldr	r0, [r3, #8]
   87388:	4c55      	ldr	r4, [pc, #340]	; (874e0 <main+0x1a4>)
   8738a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8738c:	682b      	ldr	r3, [r5, #0]
   8738e:	2100      	movs	r1, #0
   87390:	6858      	ldr	r0, [r3, #4]
   87392:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   87394:	2101      	movs	r1, #1
   87396:	4b53      	ldr	r3, [pc, #332]	; (874e4 <main+0x1a8>)
   87398:	7019      	strb	r1, [r3, #0]
   8739a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8739e:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   873a0:	4b51      	ldr	r3, [pc, #324]	; (874e8 <main+0x1ac>)
   873a2:	2200      	movs	r2, #0
   873a4:	701a      	strb	r2, [r3, #0]
   873a6:	705a      	strb	r2, [r3, #1]
   873a8:	709a      	strb	r2, [r3, #2]
   873aa:	70da      	strb	r2, [r3, #3]
   873ac:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   873ae:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   873b0:	4b4e      	ldr	r3, [pc, #312]	; (874ec <main+0x1b0>)
   873b2:	4798      	blx	r3
	board_init();
   873b4:	4b4e      	ldr	r3, [pc, #312]	; (874f0 <main+0x1b4>)
   873b6:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   873b8:	4b4e      	ldr	r3, [pc, #312]	; (874f4 <main+0x1b8>)
   873ba:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   873bc:	ac04      	add	r4, sp, #16
   873be:	4d4e      	ldr	r5, [pc, #312]	; (874f8 <main+0x1bc>)
   873c0:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   873c4:	4f4d      	ldr	r7, [pc, #308]	; (874fc <main+0x1c0>)
   873c6:	4e4e      	ldr	r6, [pc, #312]	; (87500 <main+0x1c4>)
   873c8:	f854 2b04 	ldr.w	r2, [r4], #4
   873cc:	4639      	mov	r1, r7
   873ce:	4628      	mov	r0, r5
   873d0:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   873d2:	3508      	adds	r5, #8
   873d4:	4544      	cmp	r4, r8
   873d6:	d1f7      	bne.n	873c8 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   873d8:	4c47      	ldr	r4, [pc, #284]	; (874f8 <main+0x1bc>)
   873da:	2600      	movs	r6, #0
   873dc:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   873e0:	4a48      	ldr	r2, [pc, #288]	; (87504 <main+0x1c8>)
   873e2:	4949      	ldr	r1, [pc, #292]	; (87508 <main+0x1cc>)
   873e4:	4849      	ldr	r0, [pc, #292]	; (8750c <main+0x1d0>)
   873e6:	4f4a      	ldr	r7, [pc, #296]	; (87510 <main+0x1d4>)
   873e8:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   873ea:	4621      	mov	r1, r4
   873ec:	4849      	ldr	r0, [pc, #292]	; (87514 <main+0x1d8>)
   873ee:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   873f0:	2009      	movs	r0, #9
   873f2:	4b31      	ldr	r3, [pc, #196]	; (874b8 <main+0x17c>)
   873f4:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   873f6:	4d48      	ldr	r5, [pc, #288]	; (87518 <main+0x1dc>)
   873f8:	4629      	mov	r1, r5
   873fa:	2029      	movs	r0, #41	; 0x29
   873fc:	4c47      	ldr	r4, [pc, #284]	; (8751c <main+0x1e0>)
   873fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   87400:	4629      	mov	r1, r5
   87402:	202a      	movs	r0, #42	; 0x2a
   87404:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   87406:	4629      	mov	r1, r5
   87408:	202b      	movs	r0, #43	; 0x2b
   8740a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8740c:	4629      	mov	r1, r5
   8740e:	202c      	movs	r0, #44	; 0x2c
   87410:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   87412:	4629      	mov	r1, r5
   87414:	202d      	movs	r0, #45	; 0x2d
   87416:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   87418:	4629      	mov	r1, r5
   8741a:	202e      	movs	r0, #46	; 0x2e
   8741c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8741e:	4629      	mov	r1, r5
   87420:	202f      	movs	r0, #47	; 0x2f
   87422:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   87424:	4629      	mov	r1, r5
   87426:	2030      	movs	r0, #48	; 0x30
   87428:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8742a:	4629      	mov	r1, r5
   8742c:	2033      	movs	r0, #51	; 0x33
   8742e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   87430:	4629      	mov	r1, r5
   87432:	2037      	movs	r0, #55	; 0x37
   87434:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   87436:	4629      	mov	r1, r5
   87438:	2034      	movs	r0, #52	; 0x34
   8743a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   8743c:	4838      	ldr	r0, [pc, #224]	; (87520 <main+0x1e4>)
   8743e:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   87440:	4c38      	ldr	r4, [pc, #224]	; (87524 <main+0x1e8>)
   87442:	4a39      	ldr	r2, [pc, #228]	; (87528 <main+0x1ec>)
   87444:	4631      	mov	r1, r6
   87446:	4620      	mov	r0, r4
   87448:	4b38      	ldr	r3, [pc, #224]	; (8752c <main+0x1f0>)
   8744a:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   8744c:	4a38      	ldr	r2, [pc, #224]	; (87530 <main+0x1f4>)
   8744e:	4631      	mov	r1, r6
   87450:	4620      	mov	r0, r4
   87452:	4b38      	ldr	r3, [pc, #224]	; (87534 <main+0x1f8>)
   87454:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   87456:	4a38      	ldr	r2, [pc, #224]	; (87538 <main+0x1fc>)
   87458:	4631      	mov	r1, r6
   8745a:	4620      	mov	r0, r4
   8745c:	4b37      	ldr	r3, [pc, #220]	; (8753c <main+0x200>)
   8745e:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   87460:	2203      	movs	r2, #3
   87462:	4631      	mov	r1, r6
   87464:	4620      	mov	r0, r4
   87466:	4b36      	ldr	r3, [pc, #216]	; (87540 <main+0x204>)
   87468:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   8746a:	4b36      	ldr	r3, [pc, #216]	; (87544 <main+0x208>)
   8746c:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   8746e:	4b36      	ldr	r3, [pc, #216]	; (87548 <main+0x20c>)
   87470:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   87472:	4b36      	ldr	r3, [pc, #216]	; (8754c <main+0x210>)
   87474:	2204      	movs	r2, #4
   87476:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   87478:	4630      	mov	r0, r6
   8747a:	4b35      	ldr	r3, [pc, #212]	; (87550 <main+0x214>)
   8747c:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   8747e:	4835      	ldr	r0, [pc, #212]	; (87554 <main+0x218>)
   87480:	47b8      	blx	r7
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   87482:	4835      	ldr	r0, [pc, #212]	; (87558 <main+0x21c>)
   87484:	4b35      	ldr	r3, [pc, #212]	; (8755c <main+0x220>)
   87486:	4798      	blx	r3
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   87488:	4c35      	ldr	r4, [pc, #212]	; (87560 <main+0x224>)
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   8748a:	4f36      	ldr	r7, [pc, #216]	; (87564 <main+0x228>)
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   8748c:	4a36      	ldr	r2, [pc, #216]	; (87568 <main+0x22c>)
   8748e:	7823      	ldrb	r3, [r4, #0]
   87490:	2b00      	cmp	r3, #0
   87492:	d0fc      	beq.n	8748e <main+0x152>
   87494:	7813      	ldrb	r3, [r2, #0]
   87496:	2b00      	cmp	r3, #0
   87498:	d0f9      	beq.n	8748e <main+0x152>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   8749a:	4d2f      	ldr	r5, [pc, #188]	; (87558 <main+0x21c>)
   8749c:	4e33      	ldr	r6, [pc, #204]	; (8756c <main+0x230>)
   8749e:	4628      	mov	r0, r5
   874a0:	47b0      	blx	r6
   874a2:	2800      	cmp	r0, #0
   874a4:	d0f2      	beq.n	8748c <main+0x150>
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   874a6:	4628      	mov	r0, r5
   874a8:	47b8      	blx	r7
   874aa:	4601      	mov	r1, r0
   874ac:	2000      	movs	r0, #0
   874ae:	4b30      	ldr	r3, [pc, #192]	; (87570 <main+0x234>)
   874b0:	4798      	blx	r3
   874b2:	e7f4      	b.n	8749e <main+0x162>
   874b4:	00081e89 	.word	0x00081e89
   874b8:	00085559 	.word	0x00085559
   874bc:	400e0600 	.word	0x400e0600
   874c0:	20002df0 	.word	0x20002df0
   874c4:	20002dec 	.word	0x20002dec
   874c8:	000872bd 	.word	0x000872bd
   874cc:	20002de8 	.word	0x20002de8
   874d0:	00087235 	.word	0x00087235
   874d4:	05b8d800 	.word	0x05b8d800
   874d8:	00086f03 	.word	0x00086f03
   874dc:	20000718 	.word	0x20000718
   874e0:	00087a69 	.word	0x00087a69
   874e4:	200006ee 	.word	0x200006ee
   874e8:	20002de0 	.word	0x20002de0
   874ec:	000845cd 	.word	0x000845cd
   874f0:	00085079 	.word	0x00085079
   874f4:	00084359 	.word	0x00084359
   874f8:	200006f4 	.word	0x200006f4
   874fc:	0008e5bc 	.word	0x0008e5bc
   87500:	00087c19 	.word	0x00087c19
   87504:	0008e5c4 	.word	0x0008e5c4
   87508:	0008e5d0 	.word	0x0008e5d0
   8750c:	0008e5dc 	.word	0x0008e5dc
   87510:	000878b5 	.word	0x000878b5
   87514:	0008e610 	.word	0x0008e610
   87518:	08000001 	.word	0x08000001
   8751c:	00085215 	.word	0x00085215
   87520:	0008e624 	.word	0x0008e624
   87524:	400e0000 	.word	0x400e0000
   87528:	01010100 	.word	0x01010100
   8752c:	000850e9 	.word	0x000850e9
   87530:	01030101 	.word	0x01030101
   87534:	000850f5 	.word	0x000850f5
   87538:	00040002 	.word	0x00040002
   8753c:	00085101 	.word	0x00085101
   87540:	0008510d 	.word	0x0008510d
   87544:	00084515 	.word	0x00084515
   87548:	00084895 	.word	0x00084895
   8754c:	400e0400 	.word	0x400e0400
   87550:	000855c1 	.word	0x000855c1
   87554:	0008e644 	.word	0x0008e644
   87558:	200029b8 	.word	0x200029b8
   8755c:	00081ed9 	.word	0x00081ed9
   87560:	20001a98 	.word	0x20001a98
   87564:	00081f39 	.word	0x00081f39
   87568:	20002178 	.word	0x20002178
   8756c:	00081f81 	.word	0x00081f81
   87570:	00080705 	.word	0x00080705

00087574 <__aeabi_uldivmod>:
   87574:	b953      	cbnz	r3, 8758c <__aeabi_uldivmod+0x18>
   87576:	b94a      	cbnz	r2, 8758c <__aeabi_uldivmod+0x18>
   87578:	2900      	cmp	r1, #0
   8757a:	bf08      	it	eq
   8757c:	2800      	cmpeq	r0, #0
   8757e:	bf1c      	itt	ne
   87580:	f04f 31ff 	movne.w	r1, #4294967295
   87584:	f04f 30ff 	movne.w	r0, #4294967295
   87588:	f000 b96e 	b.w	87868 <__aeabi_idiv0>
   8758c:	f1ad 0c08 	sub.w	ip, sp, #8
   87590:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87594:	f000 f806 	bl	875a4 <__udivmoddi4>
   87598:	f8dd e004 	ldr.w	lr, [sp, #4]
   8759c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   875a0:	b004      	add	sp, #16
   875a2:	4770      	bx	lr

000875a4 <__udivmoddi4>:
   875a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   875a8:	9e08      	ldr	r6, [sp, #32]
   875aa:	460d      	mov	r5, r1
   875ac:	4604      	mov	r4, r0
   875ae:	468e      	mov	lr, r1
   875b0:	2b00      	cmp	r3, #0
   875b2:	f040 8083 	bne.w	876bc <__udivmoddi4+0x118>
   875b6:	428a      	cmp	r2, r1
   875b8:	4617      	mov	r7, r2
   875ba:	d947      	bls.n	8764c <__udivmoddi4+0xa8>
   875bc:	fab2 f382 	clz	r3, r2
   875c0:	b14b      	cbz	r3, 875d6 <__udivmoddi4+0x32>
   875c2:	f1c3 0120 	rsb	r1, r3, #32
   875c6:	fa05 fe03 	lsl.w	lr, r5, r3
   875ca:	fa20 f101 	lsr.w	r1, r0, r1
   875ce:	409f      	lsls	r7, r3
   875d0:	ea41 0e0e 	orr.w	lr, r1, lr
   875d4:	409c      	lsls	r4, r3
   875d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   875da:	fbbe fcf8 	udiv	ip, lr, r8
   875de:	fa1f f987 	uxth.w	r9, r7
   875e2:	fb08 e21c 	mls	r2, r8, ip, lr
   875e6:	fb0c f009 	mul.w	r0, ip, r9
   875ea:	0c21      	lsrs	r1, r4, #16
   875ec:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   875f0:	4290      	cmp	r0, r2
   875f2:	d90a      	bls.n	8760a <__udivmoddi4+0x66>
   875f4:	18ba      	adds	r2, r7, r2
   875f6:	f10c 31ff 	add.w	r1, ip, #4294967295
   875fa:	f080 8118 	bcs.w	8782e <__udivmoddi4+0x28a>
   875fe:	4290      	cmp	r0, r2
   87600:	f240 8115 	bls.w	8782e <__udivmoddi4+0x28a>
   87604:	f1ac 0c02 	sub.w	ip, ip, #2
   87608:	443a      	add	r2, r7
   8760a:	1a12      	subs	r2, r2, r0
   8760c:	fbb2 f0f8 	udiv	r0, r2, r8
   87610:	fb08 2210 	mls	r2, r8, r0, r2
   87614:	fb00 f109 	mul.w	r1, r0, r9
   87618:	b2a4      	uxth	r4, r4
   8761a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8761e:	42a1      	cmp	r1, r4
   87620:	d909      	bls.n	87636 <__udivmoddi4+0x92>
   87622:	193c      	adds	r4, r7, r4
   87624:	f100 32ff 	add.w	r2, r0, #4294967295
   87628:	f080 8103 	bcs.w	87832 <__udivmoddi4+0x28e>
   8762c:	42a1      	cmp	r1, r4
   8762e:	f240 8100 	bls.w	87832 <__udivmoddi4+0x28e>
   87632:	3802      	subs	r0, #2
   87634:	443c      	add	r4, r7
   87636:	1a64      	subs	r4, r4, r1
   87638:	2100      	movs	r1, #0
   8763a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8763e:	b11e      	cbz	r6, 87648 <__udivmoddi4+0xa4>
   87640:	2200      	movs	r2, #0
   87642:	40dc      	lsrs	r4, r3
   87644:	e9c6 4200 	strd	r4, r2, [r6]
   87648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8764c:	b902      	cbnz	r2, 87650 <__udivmoddi4+0xac>
   8764e:	deff      	udf	#255	; 0xff
   87650:	fab2 f382 	clz	r3, r2
   87654:	2b00      	cmp	r3, #0
   87656:	d14f      	bne.n	876f8 <__udivmoddi4+0x154>
   87658:	1a8d      	subs	r5, r1, r2
   8765a:	2101      	movs	r1, #1
   8765c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   87660:	fa1f f882 	uxth.w	r8, r2
   87664:	fbb5 fcfe 	udiv	ip, r5, lr
   87668:	fb0e 551c 	mls	r5, lr, ip, r5
   8766c:	fb08 f00c 	mul.w	r0, r8, ip
   87670:	0c22      	lsrs	r2, r4, #16
   87672:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   87676:	42a8      	cmp	r0, r5
   87678:	d907      	bls.n	8768a <__udivmoddi4+0xe6>
   8767a:	197d      	adds	r5, r7, r5
   8767c:	f10c 32ff 	add.w	r2, ip, #4294967295
   87680:	d202      	bcs.n	87688 <__udivmoddi4+0xe4>
   87682:	42a8      	cmp	r0, r5
   87684:	f200 80e9 	bhi.w	8785a <__udivmoddi4+0x2b6>
   87688:	4694      	mov	ip, r2
   8768a:	1a2d      	subs	r5, r5, r0
   8768c:	fbb5 f0fe 	udiv	r0, r5, lr
   87690:	fb0e 5510 	mls	r5, lr, r0, r5
   87694:	fb08 f800 	mul.w	r8, r8, r0
   87698:	b2a4      	uxth	r4, r4
   8769a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8769e:	45a0      	cmp	r8, r4
   876a0:	d907      	bls.n	876b2 <__udivmoddi4+0x10e>
   876a2:	193c      	adds	r4, r7, r4
   876a4:	f100 32ff 	add.w	r2, r0, #4294967295
   876a8:	d202      	bcs.n	876b0 <__udivmoddi4+0x10c>
   876aa:	45a0      	cmp	r8, r4
   876ac:	f200 80d9 	bhi.w	87862 <__udivmoddi4+0x2be>
   876b0:	4610      	mov	r0, r2
   876b2:	eba4 0408 	sub.w	r4, r4, r8
   876b6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   876ba:	e7c0      	b.n	8763e <__udivmoddi4+0x9a>
   876bc:	428b      	cmp	r3, r1
   876be:	d908      	bls.n	876d2 <__udivmoddi4+0x12e>
   876c0:	2e00      	cmp	r6, #0
   876c2:	f000 80b1 	beq.w	87828 <__udivmoddi4+0x284>
   876c6:	2100      	movs	r1, #0
   876c8:	e9c6 0500 	strd	r0, r5, [r6]
   876cc:	4608      	mov	r0, r1
   876ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   876d2:	fab3 f183 	clz	r1, r3
   876d6:	2900      	cmp	r1, #0
   876d8:	d14b      	bne.n	87772 <__udivmoddi4+0x1ce>
   876da:	42ab      	cmp	r3, r5
   876dc:	d302      	bcc.n	876e4 <__udivmoddi4+0x140>
   876de:	4282      	cmp	r2, r0
   876e0:	f200 80b9 	bhi.w	87856 <__udivmoddi4+0x2b2>
   876e4:	1a84      	subs	r4, r0, r2
   876e6:	eb65 0303 	sbc.w	r3, r5, r3
   876ea:	2001      	movs	r0, #1
   876ec:	469e      	mov	lr, r3
   876ee:	2e00      	cmp	r6, #0
   876f0:	d0aa      	beq.n	87648 <__udivmoddi4+0xa4>
   876f2:	e9c6 4e00 	strd	r4, lr, [r6]
   876f6:	e7a7      	b.n	87648 <__udivmoddi4+0xa4>
   876f8:	409f      	lsls	r7, r3
   876fa:	f1c3 0220 	rsb	r2, r3, #32
   876fe:	40d1      	lsrs	r1, r2
   87700:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   87704:	fbb1 f0fe 	udiv	r0, r1, lr
   87708:	fa1f f887 	uxth.w	r8, r7
   8770c:	fb0e 1110 	mls	r1, lr, r0, r1
   87710:	fa24 f202 	lsr.w	r2, r4, r2
   87714:	409d      	lsls	r5, r3
   87716:	fb00 fc08 	mul.w	ip, r0, r8
   8771a:	432a      	orrs	r2, r5
   8771c:	0c15      	lsrs	r5, r2, #16
   8771e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   87722:	45ac      	cmp	ip, r5
   87724:	fa04 f403 	lsl.w	r4, r4, r3
   87728:	d909      	bls.n	8773e <__udivmoddi4+0x19a>
   8772a:	197d      	adds	r5, r7, r5
   8772c:	f100 31ff 	add.w	r1, r0, #4294967295
   87730:	f080 808f 	bcs.w	87852 <__udivmoddi4+0x2ae>
   87734:	45ac      	cmp	ip, r5
   87736:	f240 808c 	bls.w	87852 <__udivmoddi4+0x2ae>
   8773a:	3802      	subs	r0, #2
   8773c:	443d      	add	r5, r7
   8773e:	eba5 050c 	sub.w	r5, r5, ip
   87742:	fbb5 f1fe 	udiv	r1, r5, lr
   87746:	fb0e 5c11 	mls	ip, lr, r1, r5
   8774a:	fb01 f908 	mul.w	r9, r1, r8
   8774e:	b295      	uxth	r5, r2
   87750:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   87754:	45a9      	cmp	r9, r5
   87756:	d907      	bls.n	87768 <__udivmoddi4+0x1c4>
   87758:	197d      	adds	r5, r7, r5
   8775a:	f101 32ff 	add.w	r2, r1, #4294967295
   8775e:	d274      	bcs.n	8784a <__udivmoddi4+0x2a6>
   87760:	45a9      	cmp	r9, r5
   87762:	d972      	bls.n	8784a <__udivmoddi4+0x2a6>
   87764:	3902      	subs	r1, #2
   87766:	443d      	add	r5, r7
   87768:	eba5 0509 	sub.w	r5, r5, r9
   8776c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   87770:	e778      	b.n	87664 <__udivmoddi4+0xc0>
   87772:	f1c1 0720 	rsb	r7, r1, #32
   87776:	408b      	lsls	r3, r1
   87778:	fa22 fc07 	lsr.w	ip, r2, r7
   8777c:	ea4c 0c03 	orr.w	ip, ip, r3
   87780:	fa25 f407 	lsr.w	r4, r5, r7
   87784:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   87788:	fbb4 f9fe 	udiv	r9, r4, lr
   8778c:	fa1f f88c 	uxth.w	r8, ip
   87790:	fb0e 4419 	mls	r4, lr, r9, r4
   87794:	fa20 f307 	lsr.w	r3, r0, r7
   87798:	fb09 fa08 	mul.w	sl, r9, r8
   8779c:	408d      	lsls	r5, r1
   8779e:	431d      	orrs	r5, r3
   877a0:	0c2b      	lsrs	r3, r5, #16
   877a2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   877a6:	45a2      	cmp	sl, r4
   877a8:	fa02 f201 	lsl.w	r2, r2, r1
   877ac:	fa00 f301 	lsl.w	r3, r0, r1
   877b0:	d909      	bls.n	877c6 <__udivmoddi4+0x222>
   877b2:	eb1c 0404 	adds.w	r4, ip, r4
   877b6:	f109 30ff 	add.w	r0, r9, #4294967295
   877ba:	d248      	bcs.n	8784e <__udivmoddi4+0x2aa>
   877bc:	45a2      	cmp	sl, r4
   877be:	d946      	bls.n	8784e <__udivmoddi4+0x2aa>
   877c0:	f1a9 0902 	sub.w	r9, r9, #2
   877c4:	4464      	add	r4, ip
   877c6:	eba4 040a 	sub.w	r4, r4, sl
   877ca:	fbb4 f0fe 	udiv	r0, r4, lr
   877ce:	fb0e 4410 	mls	r4, lr, r0, r4
   877d2:	fb00 fa08 	mul.w	sl, r0, r8
   877d6:	b2ad      	uxth	r5, r5
   877d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   877dc:	45a2      	cmp	sl, r4
   877de:	d908      	bls.n	877f2 <__udivmoddi4+0x24e>
   877e0:	eb1c 0404 	adds.w	r4, ip, r4
   877e4:	f100 35ff 	add.w	r5, r0, #4294967295
   877e8:	d22d      	bcs.n	87846 <__udivmoddi4+0x2a2>
   877ea:	45a2      	cmp	sl, r4
   877ec:	d92b      	bls.n	87846 <__udivmoddi4+0x2a2>
   877ee:	3802      	subs	r0, #2
   877f0:	4464      	add	r4, ip
   877f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   877f6:	fba0 8902 	umull	r8, r9, r0, r2
   877fa:	eba4 040a 	sub.w	r4, r4, sl
   877fe:	454c      	cmp	r4, r9
   87800:	46c6      	mov	lr, r8
   87802:	464d      	mov	r5, r9
   87804:	d319      	bcc.n	8783a <__udivmoddi4+0x296>
   87806:	d016      	beq.n	87836 <__udivmoddi4+0x292>
   87808:	b15e      	cbz	r6, 87822 <__udivmoddi4+0x27e>
   8780a:	ebb3 020e 	subs.w	r2, r3, lr
   8780e:	eb64 0405 	sbc.w	r4, r4, r5
   87812:	fa04 f707 	lsl.w	r7, r4, r7
   87816:	fa22 f301 	lsr.w	r3, r2, r1
   8781a:	431f      	orrs	r7, r3
   8781c:	40cc      	lsrs	r4, r1
   8781e:	e9c6 7400 	strd	r7, r4, [r6]
   87822:	2100      	movs	r1, #0
   87824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87828:	4631      	mov	r1, r6
   8782a:	4630      	mov	r0, r6
   8782c:	e70c      	b.n	87648 <__udivmoddi4+0xa4>
   8782e:	468c      	mov	ip, r1
   87830:	e6eb      	b.n	8760a <__udivmoddi4+0x66>
   87832:	4610      	mov	r0, r2
   87834:	e6ff      	b.n	87636 <__udivmoddi4+0x92>
   87836:	4543      	cmp	r3, r8
   87838:	d2e6      	bcs.n	87808 <__udivmoddi4+0x264>
   8783a:	ebb8 0e02 	subs.w	lr, r8, r2
   8783e:	eb69 050c 	sbc.w	r5, r9, ip
   87842:	3801      	subs	r0, #1
   87844:	e7e0      	b.n	87808 <__udivmoddi4+0x264>
   87846:	4628      	mov	r0, r5
   87848:	e7d3      	b.n	877f2 <__udivmoddi4+0x24e>
   8784a:	4611      	mov	r1, r2
   8784c:	e78c      	b.n	87768 <__udivmoddi4+0x1c4>
   8784e:	4681      	mov	r9, r0
   87850:	e7b9      	b.n	877c6 <__udivmoddi4+0x222>
   87852:	4608      	mov	r0, r1
   87854:	e773      	b.n	8773e <__udivmoddi4+0x19a>
   87856:	4608      	mov	r0, r1
   87858:	e749      	b.n	876ee <__udivmoddi4+0x14a>
   8785a:	f1ac 0c02 	sub.w	ip, ip, #2
   8785e:	443d      	add	r5, r7
   87860:	e713      	b.n	8768a <__udivmoddi4+0xe6>
   87862:	3802      	subs	r0, #2
   87864:	443c      	add	r4, r7
   87866:	e724      	b.n	876b2 <__udivmoddi4+0x10e>

00087868 <__aeabi_idiv0>:
   87868:	4770      	bx	lr
   8786a:	bf00      	nop

0008786c <__libc_init_array>:
   8786c:	b570      	push	{r4, r5, r6, lr}
   8786e:	4e0d      	ldr	r6, [pc, #52]	; (878a4 <__libc_init_array+0x38>)
   87870:	4d0d      	ldr	r5, [pc, #52]	; (878a8 <__libc_init_array+0x3c>)
   87872:	1b76      	subs	r6, r6, r5
   87874:	10b6      	asrs	r6, r6, #2
   87876:	d006      	beq.n	87886 <__libc_init_array+0x1a>
   87878:	2400      	movs	r4, #0
   8787a:	f855 3b04 	ldr.w	r3, [r5], #4
   8787e:	3401      	adds	r4, #1
   87880:	4798      	blx	r3
   87882:	42a6      	cmp	r6, r4
   87884:	d1f9      	bne.n	8787a <__libc_init_array+0xe>
   87886:	4e09      	ldr	r6, [pc, #36]	; (878ac <__libc_init_array+0x40>)
   87888:	4d09      	ldr	r5, [pc, #36]	; (878b0 <__libc_init_array+0x44>)
   8788a:	f007 f8e9 	bl	8ea60 <_init>
   8788e:	1b76      	subs	r6, r6, r5
   87890:	10b6      	asrs	r6, r6, #2
   87892:	d006      	beq.n	878a2 <__libc_init_array+0x36>
   87894:	2400      	movs	r4, #0
   87896:	f855 3b04 	ldr.w	r3, [r5], #4
   8789a:	3401      	adds	r4, #1
   8789c:	4798      	blx	r3
   8789e:	42a6      	cmp	r6, r4
   878a0:	d1f9      	bne.n	87896 <__libc_init_array+0x2a>
   878a2:	bd70      	pop	{r4, r5, r6, pc}
   878a4:	0008ea6c 	.word	0x0008ea6c
   878a8:	0008ea6c 	.word	0x0008ea6c
   878ac:	0008ea74 	.word	0x0008ea74
   878b0:	0008ea6c 	.word	0x0008ea6c

000878b4 <iprintf>:
   878b4:	b40f      	push	{r0, r1, r2, r3}
   878b6:	b500      	push	{lr}
   878b8:	4907      	ldr	r1, [pc, #28]	; (878d8 <iprintf+0x24>)
   878ba:	b083      	sub	sp, #12
   878bc:	ab04      	add	r3, sp, #16
   878be:	6808      	ldr	r0, [r1, #0]
   878c0:	f853 2b04 	ldr.w	r2, [r3], #4
   878c4:	6881      	ldr	r1, [r0, #8]
   878c6:	9301      	str	r3, [sp, #4]
   878c8:	f001 ffac 	bl	89824 <_vfiprintf_r>
   878cc:	b003      	add	sp, #12
   878ce:	f85d eb04 	ldr.w	lr, [sp], #4
   878d2:	b004      	add	sp, #16
   878d4:	4770      	bx	lr
   878d6:	bf00      	nop
   878d8:	20000718 	.word	0x20000718

000878dc <memcpy>:
   878dc:	4684      	mov	ip, r0
   878de:	ea41 0300 	orr.w	r3, r1, r0
   878e2:	f013 0303 	ands.w	r3, r3, #3
   878e6:	d149      	bne.n	8797c <memcpy+0xa0>
   878e8:	3a40      	subs	r2, #64	; 0x40
   878ea:	d323      	bcc.n	87934 <memcpy+0x58>
   878ec:	680b      	ldr	r3, [r1, #0]
   878ee:	6003      	str	r3, [r0, #0]
   878f0:	684b      	ldr	r3, [r1, #4]
   878f2:	6043      	str	r3, [r0, #4]
   878f4:	688b      	ldr	r3, [r1, #8]
   878f6:	6083      	str	r3, [r0, #8]
   878f8:	68cb      	ldr	r3, [r1, #12]
   878fa:	60c3      	str	r3, [r0, #12]
   878fc:	690b      	ldr	r3, [r1, #16]
   878fe:	6103      	str	r3, [r0, #16]
   87900:	694b      	ldr	r3, [r1, #20]
   87902:	6143      	str	r3, [r0, #20]
   87904:	698b      	ldr	r3, [r1, #24]
   87906:	6183      	str	r3, [r0, #24]
   87908:	69cb      	ldr	r3, [r1, #28]
   8790a:	61c3      	str	r3, [r0, #28]
   8790c:	6a0b      	ldr	r3, [r1, #32]
   8790e:	6203      	str	r3, [r0, #32]
   87910:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87912:	6243      	str	r3, [r0, #36]	; 0x24
   87914:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   87916:	6283      	str	r3, [r0, #40]	; 0x28
   87918:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8791a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8791c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8791e:	6303      	str	r3, [r0, #48]	; 0x30
   87920:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   87922:	6343      	str	r3, [r0, #52]	; 0x34
   87924:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   87926:	6383      	str	r3, [r0, #56]	; 0x38
   87928:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8792a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8792c:	3040      	adds	r0, #64	; 0x40
   8792e:	3140      	adds	r1, #64	; 0x40
   87930:	3a40      	subs	r2, #64	; 0x40
   87932:	d2db      	bcs.n	878ec <memcpy+0x10>
   87934:	3230      	adds	r2, #48	; 0x30
   87936:	d30b      	bcc.n	87950 <memcpy+0x74>
   87938:	680b      	ldr	r3, [r1, #0]
   8793a:	6003      	str	r3, [r0, #0]
   8793c:	684b      	ldr	r3, [r1, #4]
   8793e:	6043      	str	r3, [r0, #4]
   87940:	688b      	ldr	r3, [r1, #8]
   87942:	6083      	str	r3, [r0, #8]
   87944:	68cb      	ldr	r3, [r1, #12]
   87946:	60c3      	str	r3, [r0, #12]
   87948:	3010      	adds	r0, #16
   8794a:	3110      	adds	r1, #16
   8794c:	3a10      	subs	r2, #16
   8794e:	d2f3      	bcs.n	87938 <memcpy+0x5c>
   87950:	320c      	adds	r2, #12
   87952:	d305      	bcc.n	87960 <memcpy+0x84>
   87954:	f851 3b04 	ldr.w	r3, [r1], #4
   87958:	f840 3b04 	str.w	r3, [r0], #4
   8795c:	3a04      	subs	r2, #4
   8795e:	d2f9      	bcs.n	87954 <memcpy+0x78>
   87960:	3204      	adds	r2, #4
   87962:	d008      	beq.n	87976 <memcpy+0x9a>
   87964:	07d2      	lsls	r2, r2, #31
   87966:	bf1c      	itt	ne
   87968:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8796c:	f800 3b01 	strbne.w	r3, [r0], #1
   87970:	d301      	bcc.n	87976 <memcpy+0x9a>
   87972:	880b      	ldrh	r3, [r1, #0]
   87974:	8003      	strh	r3, [r0, #0]
   87976:	4660      	mov	r0, ip
   87978:	4770      	bx	lr
   8797a:	bf00      	nop
   8797c:	2a08      	cmp	r2, #8
   8797e:	d313      	bcc.n	879a8 <memcpy+0xcc>
   87980:	078b      	lsls	r3, r1, #30
   87982:	d0b1      	beq.n	878e8 <memcpy+0xc>
   87984:	f010 0303 	ands.w	r3, r0, #3
   87988:	d0ae      	beq.n	878e8 <memcpy+0xc>
   8798a:	f1c3 0304 	rsb	r3, r3, #4
   8798e:	1ad2      	subs	r2, r2, r3
   87990:	07db      	lsls	r3, r3, #31
   87992:	bf1c      	itt	ne
   87994:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87998:	f800 3b01 	strbne.w	r3, [r0], #1
   8799c:	d3a4      	bcc.n	878e8 <memcpy+0xc>
   8799e:	f831 3b02 	ldrh.w	r3, [r1], #2
   879a2:	f820 3b02 	strh.w	r3, [r0], #2
   879a6:	e79f      	b.n	878e8 <memcpy+0xc>
   879a8:	3a04      	subs	r2, #4
   879aa:	d3d9      	bcc.n	87960 <memcpy+0x84>
   879ac:	3a01      	subs	r2, #1
   879ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   879b2:	f800 3b01 	strb.w	r3, [r0], #1
   879b6:	d2f9      	bcs.n	879ac <memcpy+0xd0>
   879b8:	780b      	ldrb	r3, [r1, #0]
   879ba:	7003      	strb	r3, [r0, #0]
   879bc:	784b      	ldrb	r3, [r1, #1]
   879be:	7043      	strb	r3, [r0, #1]
   879c0:	788b      	ldrb	r3, [r1, #2]
   879c2:	7083      	strb	r3, [r0, #2]
   879c4:	4660      	mov	r0, ip
   879c6:	4770      	bx	lr

000879c8 <memset>:
   879c8:	b4f0      	push	{r4, r5, r6, r7}
   879ca:	0786      	lsls	r6, r0, #30
   879cc:	d046      	beq.n	87a5c <memset+0x94>
   879ce:	1e54      	subs	r4, r2, #1
   879d0:	2a00      	cmp	r2, #0
   879d2:	d03c      	beq.n	87a4e <memset+0x86>
   879d4:	4603      	mov	r3, r0
   879d6:	b2ca      	uxtb	r2, r1
   879d8:	e001      	b.n	879de <memset+0x16>
   879da:	3c01      	subs	r4, #1
   879dc:	d337      	bcc.n	87a4e <memset+0x86>
   879de:	f803 2b01 	strb.w	r2, [r3], #1
   879e2:	079d      	lsls	r5, r3, #30
   879e4:	d1f9      	bne.n	879da <memset+0x12>
   879e6:	2c03      	cmp	r4, #3
   879e8:	d92a      	bls.n	87a40 <memset+0x78>
   879ea:	b2cd      	uxtb	r5, r1
   879ec:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   879f0:	2c0f      	cmp	r4, #15
   879f2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   879f6:	d934      	bls.n	87a62 <memset+0x9a>
   879f8:	f1a4 0210 	sub.w	r2, r4, #16
   879fc:	f022 0c0f 	bic.w	ip, r2, #15
   87a00:	f103 0720 	add.w	r7, r3, #32
   87a04:	0916      	lsrs	r6, r2, #4
   87a06:	4467      	add	r7, ip
   87a08:	f103 0210 	add.w	r2, r3, #16
   87a0c:	e942 5504 	strd	r5, r5, [r2, #-16]
   87a10:	e942 5502 	strd	r5, r5, [r2, #-8]
   87a14:	3210      	adds	r2, #16
   87a16:	42ba      	cmp	r2, r7
   87a18:	d1f8      	bne.n	87a0c <memset+0x44>
   87a1a:	1c72      	adds	r2, r6, #1
   87a1c:	f014 0f0c 	tst.w	r4, #12
   87a20:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   87a24:	f004 060f 	and.w	r6, r4, #15
   87a28:	d013      	beq.n	87a52 <memset+0x8a>
   87a2a:	1f33      	subs	r3, r6, #4
   87a2c:	f023 0303 	bic.w	r3, r3, #3
   87a30:	3304      	adds	r3, #4
   87a32:	4413      	add	r3, r2
   87a34:	f842 5b04 	str.w	r5, [r2], #4
   87a38:	4293      	cmp	r3, r2
   87a3a:	d1fb      	bne.n	87a34 <memset+0x6c>
   87a3c:	f006 0403 	and.w	r4, r6, #3
   87a40:	b12c      	cbz	r4, 87a4e <memset+0x86>
   87a42:	b2ca      	uxtb	r2, r1
   87a44:	441c      	add	r4, r3
   87a46:	f803 2b01 	strb.w	r2, [r3], #1
   87a4a:	429c      	cmp	r4, r3
   87a4c:	d1fb      	bne.n	87a46 <memset+0x7e>
   87a4e:	bcf0      	pop	{r4, r5, r6, r7}
   87a50:	4770      	bx	lr
   87a52:	4634      	mov	r4, r6
   87a54:	4613      	mov	r3, r2
   87a56:	2c00      	cmp	r4, #0
   87a58:	d1f3      	bne.n	87a42 <memset+0x7a>
   87a5a:	e7f8      	b.n	87a4e <memset+0x86>
   87a5c:	4614      	mov	r4, r2
   87a5e:	4603      	mov	r3, r0
   87a60:	e7c1      	b.n	879e6 <memset+0x1e>
   87a62:	461a      	mov	r2, r3
   87a64:	4626      	mov	r6, r4
   87a66:	e7e0      	b.n	87a2a <memset+0x62>

00087a68 <setbuf>:
   87a68:	2900      	cmp	r1, #0
   87a6a:	bf0c      	ite	eq
   87a6c:	2202      	moveq	r2, #2
   87a6e:	2200      	movne	r2, #0
   87a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
   87a74:	f000 b800 	b.w	87a78 <setvbuf>

00087a78 <setvbuf>:
   87a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   87a7c:	4d65      	ldr	r5, [pc, #404]	; (87c14 <setvbuf+0x19c>)
   87a7e:	4604      	mov	r4, r0
   87a80:	f8d5 9000 	ldr.w	r9, [r5]
   87a84:	460f      	mov	r7, r1
   87a86:	4690      	mov	r8, r2
   87a88:	461e      	mov	r6, r3
   87a8a:	b083      	sub	sp, #12
   87a8c:	f1b9 0f00 	cmp.w	r9, #0
   87a90:	d003      	beq.n	87a9a <setvbuf+0x22>
   87a92:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87a96:	2b00      	cmp	r3, #0
   87a98:	d079      	beq.n	87b8e <setvbuf+0x116>
   87a9a:	f1b8 0f02 	cmp.w	r8, #2
   87a9e:	d006      	beq.n	87aae <setvbuf+0x36>
   87aa0:	f1b8 0f01 	cmp.w	r8, #1
   87aa4:	f200 80a3 	bhi.w	87bee <setvbuf+0x176>
   87aa8:	2e00      	cmp	r6, #0
   87aaa:	f2c0 80a0 	blt.w	87bee <setvbuf+0x176>
   87aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   87ab0:	07d9      	lsls	r1, r3, #31
   87ab2:	d552      	bpl.n	87b5a <setvbuf+0xe2>
   87ab4:	4621      	mov	r1, r4
   87ab6:	4648      	mov	r0, r9
   87ab8:	f003 fe92 	bl	8b7e0 <_fflush_r>
   87abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87abe:	b141      	cbz	r1, 87ad2 <setvbuf+0x5a>
   87ac0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87ac4:	4299      	cmp	r1, r3
   87ac6:	d002      	beq.n	87ace <setvbuf+0x56>
   87ac8:	4648      	mov	r0, r9
   87aca:	f004 f809 	bl	8bae0 <_free_r>
   87ace:	2300      	movs	r3, #0
   87ad0:	6323      	str	r3, [r4, #48]	; 0x30
   87ad2:	2300      	movs	r3, #0
   87ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87ad8:	61a3      	str	r3, [r4, #24]
   87ada:	6063      	str	r3, [r4, #4]
   87adc:	062b      	lsls	r3, r5, #24
   87ade:	d465      	bmi.n	87bac <setvbuf+0x134>
   87ae0:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   87ae4:	f025 0503 	bic.w	r5, r5, #3
   87ae8:	f1b8 0f02 	cmp.w	r8, #2
   87aec:	81a5      	strh	r5, [r4, #12]
   87aee:	d064      	beq.n	87bba <setvbuf+0x142>
   87af0:	ab01      	add	r3, sp, #4
   87af2:	466a      	mov	r2, sp
   87af4:	4621      	mov	r1, r4
   87af6:	4648      	mov	r0, r9
   87af8:	f004 faa4 	bl	8c044 <__swhatbuf_r>
   87afc:	89a3      	ldrh	r3, [r4, #12]
   87afe:	4318      	orrs	r0, r3
   87b00:	81a0      	strh	r0, [r4, #12]
   87b02:	2e00      	cmp	r6, #0
   87b04:	d030      	beq.n	87b68 <setvbuf+0xf0>
   87b06:	2f00      	cmp	r7, #0
   87b08:	d02f      	beq.n	87b6a <setvbuf+0xf2>
   87b0a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87b0e:	2b00      	cmp	r3, #0
   87b10:	d039      	beq.n	87b86 <setvbuf+0x10e>
   87b12:	9b00      	ldr	r3, [sp, #0]
   87b14:	e9c4 7604 	strd	r7, r6, [r4, #16]
   87b18:	42b3      	cmp	r3, r6
   87b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87b1e:	6027      	str	r7, [r4, #0]
   87b20:	bf1c      	itt	ne
   87b22:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   87b26:	81a3      	strhne	r3, [r4, #12]
   87b28:	f1b8 0f01 	cmp.w	r8, #1
   87b2c:	bf04      	itt	eq
   87b2e:	f043 0301 	orreq.w	r3, r3, #1
   87b32:	81a3      	strheq	r3, [r4, #12]
   87b34:	b29a      	uxth	r2, r3
   87b36:	f013 0308 	ands.w	r3, r3, #8
   87b3a:	d02c      	beq.n	87b96 <setvbuf+0x11e>
   87b3c:	07d1      	lsls	r1, r2, #31
   87b3e:	d554      	bpl.n	87bea <setvbuf+0x172>
   87b40:	2100      	movs	r1, #0
   87b42:	4276      	negs	r6, r6
   87b44:	61a6      	str	r6, [r4, #24]
   87b46:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87b48:	60a1      	str	r1, [r4, #8]
   87b4a:	f016 0601 	ands.w	r6, r6, #1
   87b4e:	d027      	beq.n	87ba0 <setvbuf+0x128>
   87b50:	2600      	movs	r6, #0
   87b52:	4630      	mov	r0, r6
   87b54:	b003      	add	sp, #12
   87b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87b5a:	89a3      	ldrh	r3, [r4, #12]
   87b5c:	059a      	lsls	r2, r3, #22
   87b5e:	d4a9      	bmi.n	87ab4 <setvbuf+0x3c>
   87b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87b62:	f004 fa6b 	bl	8c03c <__retarget_lock_acquire_recursive>
   87b66:	e7a5      	b.n	87ab4 <setvbuf+0x3c>
   87b68:	9e00      	ldr	r6, [sp, #0]
   87b6a:	4630      	mov	r0, r6
   87b6c:	f004 fae2 	bl	8c134 <malloc>
   87b70:	4607      	mov	r7, r0
   87b72:	2800      	cmp	r0, #0
   87b74:	d03e      	beq.n	87bf4 <setvbuf+0x17c>
   87b76:	89a3      	ldrh	r3, [r4, #12]
   87b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87b7c:	81a3      	strh	r3, [r4, #12]
   87b7e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   87b82:	2b00      	cmp	r3, #0
   87b84:	d1c5      	bne.n	87b12 <setvbuf+0x9a>
   87b86:	4648      	mov	r0, r9
   87b88:	f003 fe86 	bl	8b898 <__sinit>
   87b8c:	e7c1      	b.n	87b12 <setvbuf+0x9a>
   87b8e:	4648      	mov	r0, r9
   87b90:	f003 fe82 	bl	8b898 <__sinit>
   87b94:	e781      	b.n	87a9a <setvbuf+0x22>
   87b96:	60a3      	str	r3, [r4, #8]
   87b98:	6e66      	ldr	r6, [r4, #100]	; 0x64
   87b9a:	f016 0601 	ands.w	r6, r6, #1
   87b9e:	d1d7      	bne.n	87b50 <setvbuf+0xd8>
   87ba0:	0593      	lsls	r3, r2, #22
   87ba2:	d51b      	bpl.n	87bdc <setvbuf+0x164>
   87ba4:	4630      	mov	r0, r6
   87ba6:	b003      	add	sp, #12
   87ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87bac:	4648      	mov	r0, r9
   87bae:	6921      	ldr	r1, [r4, #16]
   87bb0:	f003 ff96 	bl	8bae0 <_free_r>
   87bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87bb8:	e792      	b.n	87ae0 <setvbuf+0x68>
   87bba:	2600      	movs	r6, #0
   87bbc:	2300      	movs	r3, #0
   87bbe:	2101      	movs	r1, #1
   87bc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   87bc2:	f045 0502 	orr.w	r5, r5, #2
   87bc6:	60a3      	str	r3, [r4, #8]
   87bc8:	07d7      	lsls	r7, r2, #31
   87bca:	f104 0343 	add.w	r3, r4, #67	; 0x43
   87bce:	81a5      	strh	r5, [r4, #12]
   87bd0:	6161      	str	r1, [r4, #20]
   87bd2:	6023      	str	r3, [r4, #0]
   87bd4:	6123      	str	r3, [r4, #16]
   87bd6:	d4e5      	bmi.n	87ba4 <setvbuf+0x12c>
   87bd8:	05a8      	lsls	r0, r5, #22
   87bda:	d4e3      	bmi.n	87ba4 <setvbuf+0x12c>
   87bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87bde:	f004 fa2f 	bl	8c040 <__retarget_lock_release_recursive>
   87be2:	4630      	mov	r0, r6
   87be4:	b003      	add	sp, #12
   87be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87bea:	60a6      	str	r6, [r4, #8]
   87bec:	e7d4      	b.n	87b98 <setvbuf+0x120>
   87bee:	f04f 36ff 	mov.w	r6, #4294967295
   87bf2:	e7d7      	b.n	87ba4 <setvbuf+0x12c>
   87bf4:	9d00      	ldr	r5, [sp, #0]
   87bf6:	42b5      	cmp	r5, r6
   87bf8:	d004      	beq.n	87c04 <setvbuf+0x18c>
   87bfa:	4628      	mov	r0, r5
   87bfc:	f004 fa9a 	bl	8c134 <malloc>
   87c00:	4607      	mov	r7, r0
   87c02:	b920      	cbnz	r0, 87c0e <setvbuf+0x196>
   87c04:	f04f 36ff 	mov.w	r6, #4294967295
   87c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   87c0c:	e7d6      	b.n	87bbc <setvbuf+0x144>
   87c0e:	462e      	mov	r6, r5
   87c10:	e7b1      	b.n	87b76 <setvbuf+0xfe>
   87c12:	bf00      	nop
   87c14:	20000718 	.word	0x20000718

00087c18 <sprintf>:
   87c18:	b40e      	push	{r1, r2, r3}
   87c1a:	4601      	mov	r1, r0
   87c1c:	b530      	push	{r4, r5, lr}
   87c1e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   87c22:	b09c      	sub	sp, #112	; 0x70
   87c24:	ab1f      	add	r3, sp, #124	; 0x7c
   87c26:	480b      	ldr	r0, [pc, #44]	; (87c54 <sprintf+0x3c>)
   87c28:	f853 2b04 	ldr.w	r2, [r3], #4
   87c2c:	4d0a      	ldr	r5, [pc, #40]	; (87c58 <sprintf+0x40>)
   87c2e:	9102      	str	r1, [sp, #8]
   87c30:	9106      	str	r1, [sp, #24]
   87c32:	6800      	ldr	r0, [r0, #0]
   87c34:	a902      	add	r1, sp, #8
   87c36:	9301      	str	r3, [sp, #4]
   87c38:	e9cd 4504 	strd	r4, r5, [sp, #16]
   87c3c:	9407      	str	r4, [sp, #28]
   87c3e:	f000 f80d 	bl	87c5c <_svfprintf_r>
   87c42:	2200      	movs	r2, #0
   87c44:	9b02      	ldr	r3, [sp, #8]
   87c46:	701a      	strb	r2, [r3, #0]
   87c48:	b01c      	add	sp, #112	; 0x70
   87c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87c4e:	b003      	add	sp, #12
   87c50:	4770      	bx	lr
   87c52:	bf00      	nop
   87c54:	20000718 	.word	0x20000718
   87c58:	ffff0208 	.word	0xffff0208

00087c5c <_svfprintf_r>:
   87c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87c60:	b0d7      	sub	sp, #348	; 0x15c
   87c62:	468b      	mov	fp, r1
   87c64:	4617      	mov	r7, r2
   87c66:	930e      	str	r3, [sp, #56]	; 0x38
   87c68:	4681      	mov	r9, r0
   87c6a:	f004 f9df 	bl	8c02c <_localeconv_r>
   87c6e:	6803      	ldr	r3, [r0, #0]
   87c70:	4618      	mov	r0, r3
   87c72:	9318      	str	r3, [sp, #96]	; 0x60
   87c74:	f005 fbdc 	bl	8d430 <strlen>
   87c78:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87c7c:	9017      	str	r0, [sp, #92]	; 0x5c
   87c7e:	061d      	lsls	r5, r3, #24
   87c80:	d504      	bpl.n	87c8c <_svfprintf_r+0x30>
   87c82:	f8db 3010 	ldr.w	r3, [fp, #16]
   87c86:	2b00      	cmp	r3, #0
   87c88:	f000 87df 	beq.w	88c4a <_svfprintf_r+0xfee>
   87c8c:	2300      	movs	r3, #0
   87c8e:	2100      	movs	r1, #0
   87c90:	2200      	movs	r2, #0
   87c92:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   87c96:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   87c9a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   87c9e:	9313      	str	r3, [sp, #76]	; 0x4c
   87ca0:	9319      	str	r3, [sp, #100]	; 0x64
   87ca2:	930a      	str	r3, [sp, #40]	; 0x28
   87ca4:	ab2d      	add	r3, sp, #180	; 0xb4
   87ca6:	4698      	mov	r8, r3
   87ca8:	932a      	str	r3, [sp, #168]	; 0xa8
   87caa:	783b      	ldrb	r3, [r7, #0]
   87cac:	46da      	mov	sl, fp
   87cae:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   87cb2:	2b00      	cmp	r3, #0
   87cb4:	f000 81a4 	beq.w	88000 <_svfprintf_r+0x3a4>
   87cb8:	463c      	mov	r4, r7
   87cba:	e004      	b.n	87cc6 <_svfprintf_r+0x6a>
   87cbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87cc0:	2b00      	cmp	r3, #0
   87cc2:	f000 80fd 	beq.w	87ec0 <_svfprintf_r+0x264>
   87cc6:	2b25      	cmp	r3, #37	; 0x25
   87cc8:	d1f8      	bne.n	87cbc <_svfprintf_r+0x60>
   87cca:	1be5      	subs	r5, r4, r7
   87ccc:	f040 80fb 	bne.w	87ec6 <_svfprintf_r+0x26a>
   87cd0:	7823      	ldrb	r3, [r4, #0]
   87cd2:	2b00      	cmp	r3, #0
   87cd4:	f000 8194 	beq.w	88000 <_svfprintf_r+0x3a4>
   87cd8:	2300      	movs	r3, #0
   87cda:	930b      	str	r3, [sp, #44]	; 0x2c
   87cdc:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87ce0:	9307      	str	r3, [sp, #28]
   87ce2:	f04f 33ff 	mov.w	r3, #4294967295
   87ce6:	7866      	ldrb	r6, [r4, #1]
   87ce8:	f104 0b01 	add.w	fp, r4, #1
   87cec:	2120      	movs	r1, #32
   87cee:	242b      	movs	r4, #43	; 0x2b
   87cf0:	9309      	str	r3, [sp, #36]	; 0x24
   87cf2:	f10b 0b01 	add.w	fp, fp, #1
   87cf6:	f1a6 0320 	sub.w	r3, r6, #32
   87cfa:	2b5a      	cmp	r3, #90	; 0x5a
   87cfc:	f200 80ff 	bhi.w	87efe <_svfprintf_r+0x2a2>
   87d00:	e8df f013 	tbh	[pc, r3, lsl #1]
   87d04:	00fd02bc 	.word	0x00fd02bc
   87d08:	02b500fd 	.word	0x02b500fd
   87d0c:	00fd00fd 	.word	0x00fd00fd
   87d10:	029100fd 	.word	0x029100fd
   87d14:	00fd00fd 	.word	0x00fd00fd
   87d18:	02e7006a 	.word	0x02e7006a
   87d1c:	023400fd 	.word	0x023400fd
   87d20:	00fd02cd 	.word	0x00fd02cd
   87d24:	005b02c6 	.word	0x005b02c6
   87d28:	005b005b 	.word	0x005b005b
   87d2c:	005b005b 	.word	0x005b005b
   87d30:	005b005b 	.word	0x005b005b
   87d34:	005b005b 	.word	0x005b005b
   87d38:	00fd00fd 	.word	0x00fd00fd
   87d3c:	00fd00fd 	.word	0x00fd00fd
   87d40:	00fd00fd 	.word	0x00fd00fd
   87d44:	019000fd 	.word	0x019000fd
   87d48:	01f700fd 	.word	0x01f700fd
   87d4c:	0190007c 	.word	0x0190007c
   87d50:	01900190 	.word	0x01900190
   87d54:	00fd00fd 	.word	0x00fd00fd
   87d58:	00fd00fd 	.word	0x00fd00fd
   87d5c:	00fd028a 	.word	0x00fd028a
   87d60:	00a900fd 	.word	0x00a900fd
   87d64:	00fd00fd 	.word	0x00fd00fd
   87d68:	020b00fd 	.word	0x020b00fd
   87d6c:	023b00fd 	.word	0x023b00fd
   87d70:	00fd00fd 	.word	0x00fd00fd
   87d74:	00fd0781 	.word	0x00fd0781
   87d78:	00fd00fd 	.word	0x00fd00fd
   87d7c:	00fd00fd 	.word	0x00fd00fd
   87d80:	00fd00fd 	.word	0x00fd00fd
   87d84:	019000fd 	.word	0x019000fd
   87d88:	01f700fd 	.word	0x01f700fd
   87d8c:	01900080 	.word	0x01900080
   87d90:	01900190 	.word	0x01900190
   87d94:	00800280 	.word	0x00800280
   87d98:	00fd0075 	.word	0x00fd0075
   87d9c:	00fd0276 	.word	0x00fd0276
   87da0:	00ad025e 	.word	0x00ad025e
   87da4:	0075024c 	.word	0x0075024c
   87da8:	020b00fd 	.word	0x020b00fd
   87dac:	075b0072 	.word	0x075b0072
   87db0:	00fd00fd 	.word	0x00fd00fd
   87db4:	00fd075f 	.word	0x00fd075f
   87db8:	0072      	.short	0x0072
   87dba:	2200      	movs	r2, #0
   87dbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87dc0:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87dc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87dc8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87dcc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87dd0:	2b09      	cmp	r3, #9
   87dd2:	d9f5      	bls.n	87dc0 <_svfprintf_r+0x164>
   87dd4:	920b      	str	r2, [sp, #44]	; 0x2c
   87dd6:	e78e      	b.n	87cf6 <_svfprintf_r+0x9a>
   87dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dda:	f853 2b04 	ldr.w	r2, [r3], #4
   87dde:	2a00      	cmp	r2, #0
   87de0:	920b      	str	r2, [sp, #44]	; 0x2c
   87de2:	930e      	str	r3, [sp, #56]	; 0x38
   87de4:	f2c0 81bf 	blt.w	88166 <_svfprintf_r+0x50a>
   87de8:	f89b 6000 	ldrb.w	r6, [fp]
   87dec:	e781      	b.n	87cf2 <_svfprintf_r+0x96>
   87dee:	9b07      	ldr	r3, [sp, #28]
   87df0:	f89b 6000 	ldrb.w	r6, [fp]
   87df4:	f043 0320 	orr.w	r3, r3, #32
   87df8:	9307      	str	r3, [sp, #28]
   87dfa:	e77a      	b.n	87cf2 <_svfprintf_r+0x96>
   87dfc:	9b07      	ldr	r3, [sp, #28]
   87dfe:	f043 0310 	orr.w	r3, r3, #16
   87e02:	9307      	str	r3, [sp, #28]
   87e04:	9b07      	ldr	r3, [sp, #28]
   87e06:	069c      	lsls	r4, r3, #26
   87e08:	f140 8162 	bpl.w	880d0 <_svfprintf_r+0x474>
   87e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e0e:	3307      	adds	r3, #7
   87e10:	f023 0307 	bic.w	r3, r3, #7
   87e14:	4619      	mov	r1, r3
   87e16:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87e1a:	4614      	mov	r4, r2
   87e1c:	461d      	mov	r5, r3
   87e1e:	910e      	str	r1, [sp, #56]	; 0x38
   87e20:	2a00      	cmp	r2, #0
   87e22:	f173 0300 	sbcs.w	r3, r3, #0
   87e26:	f2c0 85ab 	blt.w	88980 <_svfprintf_r+0xd24>
   87e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87e2c:	3301      	adds	r3, #1
   87e2e:	9b07      	ldr	r3, [sp, #28]
   87e30:	f000 8414 	beq.w	8865c <_svfprintf_r+0xa00>
   87e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   87e38:	ea54 0205 	orrs.w	r2, r4, r5
   87e3c:	9308      	str	r3, [sp, #32]
   87e3e:	f040 840e 	bne.w	8865e <_svfprintf_r+0xa02>
   87e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e44:	2a00      	cmp	r2, #0
   87e46:	f040 840f 	bne.w	88668 <_svfprintf_r+0xa0c>
   87e4a:	9307      	str	r3, [sp, #28]
   87e4c:	2300      	movs	r3, #0
   87e4e:	af56      	add	r7, sp, #344	; 0x158
   87e50:	9309      	str	r3, [sp, #36]	; 0x24
   87e52:	930c      	str	r3, [sp, #48]	; 0x30
   87e54:	e26b      	b.n	8832e <_svfprintf_r+0x6d2>
   87e56:	9b07      	ldr	r3, [sp, #28]
   87e58:	f043 0310 	orr.w	r3, r3, #16
   87e5c:	9307      	str	r3, [sp, #28]
   87e5e:	9b07      	ldr	r3, [sp, #28]
   87e60:	069a      	lsls	r2, r3, #26
   87e62:	f140 8126 	bpl.w	880b2 <_svfprintf_r+0x456>
   87e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e68:	3307      	adds	r3, #7
   87e6a:	f023 0307 	bic.w	r3, r3, #7
   87e6e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87e72:	930e      	str	r3, [sp, #56]	; 0x38
   87e74:	9b07      	ldr	r3, [sp, #28]
   87e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   87e7a:	9308      	str	r3, [sp, #32]
   87e7c:	2300      	movs	r3, #0
   87e7e:	2200      	movs	r2, #0
   87e80:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87e86:	4611      	mov	r1, r2
   87e88:	3101      	adds	r1, #1
   87e8a:	f000 8231 	beq.w	882f0 <_svfprintf_r+0x694>
   87e8e:	9908      	ldr	r1, [sp, #32]
   87e90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   87e94:	9107      	str	r1, [sp, #28]
   87e96:	ea54 0105 	orrs.w	r1, r4, r5
   87e9a:	f040 8227 	bne.w	882ec <_svfprintf_r+0x690>
   87e9e:	2a00      	cmp	r2, #0
   87ea0:	f040 837d 	bne.w	8859e <_svfprintf_r+0x942>
   87ea4:	2b00      	cmp	r3, #0
   87ea6:	d1d1      	bne.n	87e4c <_svfprintf_r+0x1f0>
   87ea8:	9b08      	ldr	r3, [sp, #32]
   87eaa:	f013 0301 	ands.w	r3, r3, #1
   87eae:	930c      	str	r3, [sp, #48]	; 0x30
   87eb0:	f000 8590 	beq.w	889d4 <_svfprintf_r+0xd78>
   87eb4:	2330      	movs	r3, #48	; 0x30
   87eb6:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87eba:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   87ebe:	e236      	b.n	8832e <_svfprintf_r+0x6d2>
   87ec0:	1be5      	subs	r5, r4, r7
   87ec2:	f000 809d 	beq.w	88000 <_svfprintf_r+0x3a4>
   87ec6:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   87eca:	3301      	adds	r3, #1
   87ecc:	442a      	add	r2, r5
   87ece:	2b07      	cmp	r3, #7
   87ed0:	e9c8 7500 	strd	r7, r5, [r8]
   87ed4:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   87ed8:	dc06      	bgt.n	87ee8 <_svfprintf_r+0x28c>
   87eda:	f108 0808 	add.w	r8, r8, #8
   87ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87ee0:	7823      	ldrb	r3, [r4, #0]
   87ee2:	442a      	add	r2, r5
   87ee4:	920a      	str	r2, [sp, #40]	; 0x28
   87ee6:	e6f4      	b.n	87cd2 <_svfprintf_r+0x76>
   87ee8:	4651      	mov	r1, sl
   87eea:	4648      	mov	r0, r9
   87eec:	aa2a      	add	r2, sp, #168	; 0xa8
   87eee:	f005 fb01 	bl	8d4f4 <__ssprint_r>
   87ef2:	2800      	cmp	r0, #0
   87ef4:	f041 83ce 	bne.w	89694 <_svfprintf_r+0x1a38>
   87ef8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87efc:	e7ef      	b.n	87ede <_svfprintf_r+0x282>
   87efe:	2e00      	cmp	r6, #0
   87f00:	d07e      	beq.n	88000 <_svfprintf_r+0x3a4>
   87f02:	2300      	movs	r3, #0
   87f04:	2101      	movs	r1, #1
   87f06:	461a      	mov	r2, r3
   87f08:	9108      	str	r1, [sp, #32]
   87f0a:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   87f0e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87f12:	930d      	str	r3, [sp, #52]	; 0x34
   87f14:	9309      	str	r3, [sp, #36]	; 0x24
   87f16:	9312      	str	r3, [sp, #72]	; 0x48
   87f18:	9316      	str	r3, [sp, #88]	; 0x58
   87f1a:	9310      	str	r3, [sp, #64]	; 0x40
   87f1c:	910c      	str	r1, [sp, #48]	; 0x30
   87f1e:	af3d      	add	r7, sp, #244	; 0xf4
   87f20:	9b07      	ldr	r3, [sp, #28]
   87f22:	f013 0302 	ands.w	r3, r3, #2
   87f26:	d002      	beq.n	87f2e <_svfprintf_r+0x2d2>
   87f28:	9908      	ldr	r1, [sp, #32]
   87f2a:	3102      	adds	r1, #2
   87f2c:	9108      	str	r1, [sp, #32]
   87f2e:	9907      	ldr	r1, [sp, #28]
   87f30:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   87f34:	910f      	str	r1, [sp, #60]	; 0x3c
   87f36:	d105      	bne.n	87f44 <_svfprintf_r+0x2e8>
   87f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f3a:	9808      	ldr	r0, [sp, #32]
   87f3c:	1a0d      	subs	r5, r1, r0
   87f3e:	2d00      	cmp	r5, #0
   87f40:	f300 834b 	bgt.w	885da <_svfprintf_r+0x97e>
   87f44:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f46:	b172      	cbz	r2, 87f66 <_svfprintf_r+0x30a>
   87f48:	2001      	movs	r0, #1
   87f4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87f4c:	4404      	add	r4, r0
   87f4e:	4402      	add	r2, r0
   87f50:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   87f54:	2a07      	cmp	r2, #7
   87f56:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87f5a:	e9c8 1000 	strd	r1, r0, [r8]
   87f5e:	f300 83cd 	bgt.w	886fc <_svfprintf_r+0xaa0>
   87f62:	f108 0808 	add.w	r8, r8, #8
   87f66:	b16b      	cbz	r3, 87f84 <_svfprintf_r+0x328>
   87f68:	2102      	movs	r1, #2
   87f6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f6c:	440c      	add	r4, r1
   87f6e:	3301      	adds	r3, #1
   87f70:	aa23      	add	r2, sp, #140	; 0x8c
   87f72:	2b07      	cmp	r3, #7
   87f74:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87f78:	e9c8 2100 	strd	r2, r1, [r8]
   87f7c:	f300 83cc 	bgt.w	88718 <_svfprintf_r+0xabc>
   87f80:	f108 0808 	add.w	r8, r8, #8
   87f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87f86:	2b80      	cmp	r3, #128	; 0x80
   87f88:	f000 8234 	beq.w	883f4 <_svfprintf_r+0x798>
   87f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f90:	1a9d      	subs	r5, r3, r2
   87f92:	2d00      	cmp	r5, #0
   87f94:	f300 826e 	bgt.w	88474 <_svfprintf_r+0x818>
   87f98:	9b07      	ldr	r3, [sp, #28]
   87f9a:	05d9      	lsls	r1, r3, #23
   87f9c:	f100 81d5 	bmi.w	8834a <_svfprintf_r+0x6ee>
   87fa0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87fa4:	3301      	adds	r3, #1
   87fa6:	4414      	add	r4, r2
   87fa8:	2b07      	cmp	r3, #7
   87faa:	e9c8 7200 	strd	r7, r2, [r8]
   87fae:	942c      	str	r4, [sp, #176]	; 0xb0
   87fb0:	932b      	str	r3, [sp, #172]	; 0xac
   87fb2:	f300 8397 	bgt.w	886e4 <_svfprintf_r+0xa88>
   87fb6:	f108 0808 	add.w	r8, r8, #8
   87fba:	9b07      	ldr	r3, [sp, #28]
   87fbc:	0759      	lsls	r1, r3, #29
   87fbe:	d505      	bpl.n	87fcc <_svfprintf_r+0x370>
   87fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87fc2:	9a08      	ldr	r2, [sp, #32]
   87fc4:	1a9d      	subs	r5, r3, r2
   87fc6:	2d00      	cmp	r5, #0
   87fc8:	f300 83b2 	bgt.w	88730 <_svfprintf_r+0xad4>
   87fcc:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   87fd0:	9908      	ldr	r1, [sp, #32]
   87fd2:	428a      	cmp	r2, r1
   87fd4:	bfac      	ite	ge
   87fd6:	189b      	addge	r3, r3, r2
   87fd8:	185b      	addlt	r3, r3, r1
   87fda:	930a      	str	r3, [sp, #40]	; 0x28
   87fdc:	2c00      	cmp	r4, #0
   87fde:	f040 827d 	bne.w	884dc <_svfprintf_r+0x880>
   87fe2:	2300      	movs	r3, #0
   87fe4:	932b      	str	r3, [sp, #172]	; 0xac
   87fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87fe8:	b11b      	cbz	r3, 87ff2 <_svfprintf_r+0x396>
   87fea:	4648      	mov	r0, r9
   87fec:	990d      	ldr	r1, [sp, #52]	; 0x34
   87fee:	f003 fd77 	bl	8bae0 <_free_r>
   87ff2:	465f      	mov	r7, fp
   87ff4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ff8:	783b      	ldrb	r3, [r7, #0]
   87ffa:	2b00      	cmp	r3, #0
   87ffc:	f47f ae5c 	bne.w	87cb8 <_svfprintf_r+0x5c>
   88000:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   88002:	46d3      	mov	fp, sl
   88004:	2b00      	cmp	r3, #0
   88006:	f041 824b 	bne.w	894a0 <_svfprintf_r+0x1844>
   8800a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8800e:	f013 0f40 	tst.w	r3, #64	; 0x40
   88012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88014:	bf18      	it	ne
   88016:	f04f 33ff 	movne.w	r3, #4294967295
   8801a:	930a      	str	r3, [sp, #40]	; 0x28
   8801c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8801e:	b057      	add	sp, #348	; 0x15c
   88020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88026:	3307      	adds	r3, #7
   88028:	f023 0307 	bic.w	r3, r3, #7
   8802c:	4619      	mov	r1, r3
   8802e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88032:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   88036:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8803a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8803e:	461d      	mov	r5, r3
   88040:	4618      	mov	r0, r3
   88042:	910e      	str	r1, [sp, #56]	; 0x38
   88044:	f04f 32ff 	mov.w	r2, #4294967295
   88048:	4621      	mov	r1, r4
   8804a:	4ba4      	ldr	r3, [pc, #656]	; (882dc <_svfprintf_r+0x680>)
   8804c:	f006 f986 	bl	8e35c <__aeabi_dcmpun>
   88050:	2800      	cmp	r0, #0
   88052:	f040 84d9 	bne.w	88a08 <_svfprintf_r+0xdac>
   88056:	4628      	mov	r0, r5
   88058:	4621      	mov	r1, r4
   8805a:	f04f 32ff 	mov.w	r2, #4294967295
   8805e:	4b9f      	ldr	r3, [pc, #636]	; (882dc <_svfprintf_r+0x680>)
   88060:	f006 f95e 	bl	8e320 <__aeabi_dcmple>
   88064:	2800      	cmp	r0, #0
   88066:	f040 84cf 	bne.w	88a08 <_svfprintf_r+0xdac>
   8806a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8806e:	2200      	movs	r2, #0
   88070:	2300      	movs	r3, #0
   88072:	f006 f94b 	bl	8e30c <__aeabi_dcmplt>
   88076:	2800      	cmp	r0, #0
   88078:	f041 800e 	bne.w	89098 <_svfprintf_r+0x143c>
   8807c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88080:	2003      	movs	r0, #3
   88082:	2100      	movs	r1, #0
   88084:	4f96      	ldr	r7, [pc, #600]	; (882e0 <_svfprintf_r+0x684>)
   88086:	4b97      	ldr	r3, [pc, #604]	; (882e4 <_svfprintf_r+0x688>)
   88088:	9008      	str	r0, [sp, #32]
   8808a:	910d      	str	r1, [sp, #52]	; 0x34
   8808c:	2e47      	cmp	r6, #71	; 0x47
   8808e:	bfc8      	it	gt
   88090:	461f      	movgt	r7, r3
   88092:	9c07      	ldr	r4, [sp, #28]
   88094:	900c      	str	r0, [sp, #48]	; 0x30
   88096:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   8809a:	9407      	str	r4, [sp, #28]
   8809c:	9109      	str	r1, [sp, #36]	; 0x24
   8809e:	9112      	str	r1, [sp, #72]	; 0x48
   880a0:	9116      	str	r1, [sp, #88]	; 0x58
   880a2:	9110      	str	r1, [sp, #64]	; 0x40
   880a4:	2a00      	cmp	r2, #0
   880a6:	f43f af3b 	beq.w	87f20 <_svfprintf_r+0x2c4>
   880aa:	9b08      	ldr	r3, [sp, #32]
   880ac:	3301      	adds	r3, #1
   880ae:	9308      	str	r3, [sp, #32]
   880b0:	e736      	b.n	87f20 <_svfprintf_r+0x2c4>
   880b2:	9b07      	ldr	r3, [sp, #28]
   880b4:	06db      	lsls	r3, r3, #27
   880b6:	f100 849c 	bmi.w	889f2 <_svfprintf_r+0xd96>
   880ba:	9b07      	ldr	r3, [sp, #28]
   880bc:	065f      	lsls	r7, r3, #25
   880be:	f140 87b2 	bpl.w	89026 <_svfprintf_r+0x13ca>
   880c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880c4:	2500      	movs	r5, #0
   880c6:	f853 4b04 	ldr.w	r4, [r3], #4
   880ca:	930e      	str	r3, [sp, #56]	; 0x38
   880cc:	b2a4      	uxth	r4, r4
   880ce:	e6d1      	b.n	87e74 <_svfprintf_r+0x218>
   880d0:	9b07      	ldr	r3, [sp, #28]
   880d2:	06d8      	lsls	r0, r3, #27
   880d4:	f100 8568 	bmi.w	88ba8 <_svfprintf_r+0xf4c>
   880d8:	9b07      	ldr	r3, [sp, #28]
   880da:	0659      	lsls	r1, r3, #25
   880dc:	f140 87be 	bpl.w	8905c <_svfprintf_r+0x1400>
   880e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880e2:	f853 4b04 	ldr.w	r4, [r3], #4
   880e6:	b224      	sxth	r4, r4
   880e8:	17e5      	asrs	r5, r4, #31
   880ea:	930e      	str	r3, [sp, #56]	; 0x38
   880ec:	4622      	mov	r2, r4
   880ee:	462b      	mov	r3, r5
   880f0:	e696      	b.n	87e20 <_svfprintf_r+0x1c4>
   880f2:	2100      	movs	r1, #0
   880f4:	2401      	movs	r4, #1
   880f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880f8:	460a      	mov	r2, r1
   880fa:	f853 0b04 	ldr.w	r0, [r3], #4
   880fe:	9408      	str	r4, [sp, #32]
   88100:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   88104:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   88108:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   8810c:	9109      	str	r1, [sp, #36]	; 0x24
   8810e:	9112      	str	r1, [sp, #72]	; 0x48
   88110:	9116      	str	r1, [sp, #88]	; 0x58
   88112:	9110      	str	r1, [sp, #64]	; 0x40
   88114:	940c      	str	r4, [sp, #48]	; 0x30
   88116:	af3d      	add	r7, sp, #244	; 0xf4
   88118:	e702      	b.n	87f20 <_svfprintf_r+0x2c4>
   8811a:	2500      	movs	r5, #0
   8811c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8811e:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   88122:	f854 7b04 	ldr.w	r7, [r4], #4
   88126:	2f00      	cmp	r7, #0
   88128:	f000 859f 	beq.w	88c6a <_svfprintf_r+0x100e>
   8812c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8812e:	4613      	mov	r3, r2
   88130:	3301      	adds	r3, #1
   88132:	f000 8770 	beq.w	89016 <_svfprintf_r+0x13ba>
   88136:	4629      	mov	r1, r5
   88138:	4638      	mov	r0, r7
   8813a:	f004 fac7 	bl	8c6cc <memchr>
   8813e:	900d      	str	r0, [sp, #52]	; 0x34
   88140:	2800      	cmp	r0, #0
   88142:	f001 80b9 	beq.w	892b8 <_svfprintf_r+0x165c>
   88146:	462b      	mov	r3, r5
   88148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8814a:	9509      	str	r5, [sp, #36]	; 0x24
   8814c:	1bd2      	subs	r2, r2, r7
   8814e:	920c      	str	r2, [sp, #48]	; 0x30
   88150:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   88154:	9208      	str	r2, [sp, #32]
   88156:	940e      	str	r4, [sp, #56]	; 0x38
   88158:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8815c:	930d      	str	r3, [sp, #52]	; 0x34
   8815e:	9312      	str	r3, [sp, #72]	; 0x48
   88160:	9316      	str	r3, [sp, #88]	; 0x58
   88162:	9310      	str	r3, [sp, #64]	; 0x40
   88164:	e79e      	b.n	880a4 <_svfprintf_r+0x448>
   88166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88168:	425b      	negs	r3, r3
   8816a:	930b      	str	r3, [sp, #44]	; 0x2c
   8816c:	9b07      	ldr	r3, [sp, #28]
   8816e:	f89b 6000 	ldrb.w	r6, [fp]
   88172:	f043 0304 	orr.w	r3, r3, #4
   88176:	9307      	str	r3, [sp, #28]
   88178:	e5bb      	b.n	87cf2 <_svfprintf_r+0x96>
   8817a:	9b07      	ldr	r3, [sp, #28]
   8817c:	f043 0310 	orr.w	r3, r3, #16
   88180:	9308      	str	r3, [sp, #32]
   88182:	9b08      	ldr	r3, [sp, #32]
   88184:	069d      	lsls	r5, r3, #26
   88186:	f140 83ea 	bpl.w	8895e <_svfprintf_r+0xd02>
   8818a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8818c:	3307      	adds	r3, #7
   8818e:	f023 0307 	bic.w	r3, r3, #7
   88192:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88196:	930e      	str	r3, [sp, #56]	; 0x38
   88198:	2301      	movs	r3, #1
   8819a:	e670      	b.n	87e7e <_svfprintf_r+0x222>
   8819c:	f647 0230 	movw	r2, #30768	; 0x7830
   881a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881a2:	9907      	ldr	r1, [sp, #28]
   881a4:	f853 4b04 	ldr.w	r4, [r3], #4
   881a8:	f041 0102 	orr.w	r1, r1, #2
   881ac:	930e      	str	r3, [sp, #56]	; 0x38
   881ae:	4b4e      	ldr	r3, [pc, #312]	; (882e8 <_svfprintf_r+0x68c>)
   881b0:	2500      	movs	r5, #0
   881b2:	9319      	str	r3, [sp, #100]	; 0x64
   881b4:	2678      	movs	r6, #120	; 0x78
   881b6:	2302      	movs	r3, #2
   881b8:	9108      	str	r1, [sp, #32]
   881ba:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   881be:	e65e      	b.n	87e7e <_svfprintf_r+0x222>
   881c0:	9b07      	ldr	r3, [sp, #28]
   881c2:	069d      	lsls	r5, r3, #26
   881c4:	f100 8408 	bmi.w	889d8 <_svfprintf_r+0xd7c>
   881c8:	9b07      	ldr	r3, [sp, #28]
   881ca:	06dc      	lsls	r4, r3, #27
   881cc:	f100 86e1 	bmi.w	88f92 <_svfprintf_r+0x1336>
   881d0:	9b07      	ldr	r3, [sp, #28]
   881d2:	0658      	lsls	r0, r3, #25
   881d4:	f100 8795 	bmi.w	89102 <_svfprintf_r+0x14a6>
   881d8:	9b07      	ldr	r3, [sp, #28]
   881da:	0599      	lsls	r1, r3, #22
   881dc:	f140 86d9 	bpl.w	88f92 <_svfprintf_r+0x1336>
   881e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881e2:	990a      	ldr	r1, [sp, #40]	; 0x28
   881e4:	f853 2b04 	ldr.w	r2, [r3], #4
   881e8:	465f      	mov	r7, fp
   881ea:	7011      	strb	r1, [r2, #0]
   881ec:	930e      	str	r3, [sp, #56]	; 0x38
   881ee:	e703      	b.n	87ff8 <_svfprintf_r+0x39c>
   881f0:	f89b 6000 	ldrb.w	r6, [fp]
   881f4:	9b07      	ldr	r3, [sp, #28]
   881f6:	2e6c      	cmp	r6, #108	; 0x6c
   881f8:	f000 8508 	beq.w	88c0c <_svfprintf_r+0xfb0>
   881fc:	f043 0310 	orr.w	r3, r3, #16
   88200:	9307      	str	r3, [sp, #28]
   88202:	e576      	b.n	87cf2 <_svfprintf_r+0x96>
   88204:	f89b 6000 	ldrb.w	r6, [fp]
   88208:	9b07      	ldr	r3, [sp, #28]
   8820a:	2e68      	cmp	r6, #104	; 0x68
   8820c:	f000 8507 	beq.w	88c1e <_svfprintf_r+0xfc2>
   88210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88214:	9307      	str	r3, [sp, #28]
   88216:	e56c      	b.n	87cf2 <_svfprintf_r+0x96>
   88218:	9b07      	ldr	r3, [sp, #28]
   8821a:	f89b 6000 	ldrb.w	r6, [fp]
   8821e:	f043 0308 	orr.w	r3, r3, #8
   88222:	9307      	str	r3, [sp, #28]
   88224:	e565      	b.n	87cf2 <_svfprintf_r+0x96>
   88226:	4648      	mov	r0, r9
   88228:	f003 ff00 	bl	8c02c <_localeconv_r>
   8822c:	6843      	ldr	r3, [r0, #4]
   8822e:	4618      	mov	r0, r3
   88230:	931c      	str	r3, [sp, #112]	; 0x70
   88232:	f005 f8fd 	bl	8d430 <strlen>
   88236:	4603      	mov	r3, r0
   88238:	4648      	mov	r0, r9
   8823a:	461d      	mov	r5, r3
   8823c:	931d      	str	r3, [sp, #116]	; 0x74
   8823e:	f003 fef5 	bl	8c02c <_localeconv_r>
   88242:	6882      	ldr	r2, [r0, #8]
   88244:	2120      	movs	r1, #32
   88246:	921a      	str	r2, [sp, #104]	; 0x68
   88248:	2d00      	cmp	r5, #0
   8824a:	f43f adcd 	beq.w	87de8 <_svfprintf_r+0x18c>
   8824e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   88250:	2b00      	cmp	r3, #0
   88252:	f43f adc9 	beq.w	87de8 <_svfprintf_r+0x18c>
   88256:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   88258:	781b      	ldrb	r3, [r3, #0]
   8825a:	2b00      	cmp	r3, #0
   8825c:	f43f adc4 	beq.w	87de8 <_svfprintf_r+0x18c>
   88260:	9b07      	ldr	r3, [sp, #28]
   88262:	f89b 6000 	ldrb.w	r6, [fp]
   88266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8826a:	9307      	str	r3, [sp, #28]
   8826c:	e541      	b.n	87cf2 <_svfprintf_r+0x96>
   8826e:	9b07      	ldr	r3, [sp, #28]
   88270:	f89b 6000 	ldrb.w	r6, [fp]
   88274:	f043 0301 	orr.w	r3, r3, #1
   88278:	9307      	str	r3, [sp, #28]
   8827a:	e53a      	b.n	87cf2 <_svfprintf_r+0x96>
   8827c:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   88280:	2b00      	cmp	r3, #0
   88282:	f47f adb1 	bne.w	87de8 <_svfprintf_r+0x18c>
   88286:	f89b 6000 	ldrb.w	r6, [fp]
   8828a:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   8828e:	e530      	b.n	87cf2 <_svfprintf_r+0x96>
   88290:	9b07      	ldr	r3, [sp, #28]
   88292:	f89b 6000 	ldrb.w	r6, [fp]
   88296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8829a:	9307      	str	r3, [sp, #28]
   8829c:	e529      	b.n	87cf2 <_svfprintf_r+0x96>
   8829e:	465a      	mov	r2, fp
   882a0:	f812 6b01 	ldrb.w	r6, [r2], #1
   882a4:	2e2a      	cmp	r6, #42	; 0x2a
   882a6:	f001 8251 	beq.w	8974c <_svfprintf_r+0x1af0>
   882aa:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   882ae:	2b09      	cmp	r3, #9
   882b0:	4693      	mov	fp, r2
   882b2:	bf98      	it	ls
   882b4:	2200      	movls	r2, #0
   882b6:	f201 80ef 	bhi.w	89498 <_svfprintf_r+0x183c>
   882ba:	f81b 6b01 	ldrb.w	r6, [fp], #1
   882be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   882c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   882c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   882ca:	2b09      	cmp	r3, #9
   882cc:	d9f5      	bls.n	882ba <_svfprintf_r+0x65e>
   882ce:	9209      	str	r2, [sp, #36]	; 0x24
   882d0:	e511      	b.n	87cf6 <_svfprintf_r+0x9a>
   882d2:	f89b 6000 	ldrb.w	r6, [fp]
   882d6:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   882da:	e50a      	b.n	87cf2 <_svfprintf_r+0x96>
   882dc:	7fefffff 	.word	0x7fefffff
   882e0:	0008e668 	.word	0x0008e668
   882e4:	0008e66c 	.word	0x0008e66c
   882e8:	0008e678 	.word	0x0008e678
   882ec:	9a07      	ldr	r2, [sp, #28]
   882ee:	9208      	str	r2, [sp, #32]
   882f0:	2b01      	cmp	r3, #1
   882f2:	f000 81b4 	beq.w	8865e <_svfprintf_r+0xa02>
   882f6:	2b02      	cmp	r3, #2
   882f8:	f000 8159 	beq.w	885ae <_svfprintf_r+0x952>
   882fc:	af56      	add	r7, sp, #344	; 0x158
   882fe:	08e2      	lsrs	r2, r4, #3
   88300:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88304:	08e9      	lsrs	r1, r5, #3
   88306:	f004 0307 	and.w	r3, r4, #7
   8830a:	460d      	mov	r5, r1
   8830c:	4614      	mov	r4, r2
   8830e:	3330      	adds	r3, #48	; 0x30
   88310:	ea54 0105 	orrs.w	r1, r4, r5
   88314:	463a      	mov	r2, r7
   88316:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8831a:	d1f0      	bne.n	882fe <_svfprintf_r+0x6a2>
   8831c:	9908      	ldr	r1, [sp, #32]
   8831e:	4608      	mov	r0, r1
   88320:	07c0      	lsls	r0, r0, #31
   88322:	f100 82b8 	bmi.w	88896 <_svfprintf_r+0xc3a>
   88326:	ab56      	add	r3, sp, #344	; 0x158
   88328:	1bdb      	subs	r3, r3, r7
   8832a:	9107      	str	r1, [sp, #28]
   8832c:	930c      	str	r3, [sp, #48]	; 0x30
   8832e:	2300      	movs	r3, #0
   88330:	9909      	ldr	r1, [sp, #36]	; 0x24
   88332:	930d      	str	r3, [sp, #52]	; 0x34
   88334:	9312      	str	r3, [sp, #72]	; 0x48
   88336:	9316      	str	r3, [sp, #88]	; 0x58
   88338:	9310      	str	r3, [sp, #64]	; 0x40
   8833a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8833c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88340:	428b      	cmp	r3, r1
   88342:	bfb8      	it	lt
   88344:	460b      	movlt	r3, r1
   88346:	9308      	str	r3, [sp, #32]
   88348:	e6ac      	b.n	880a4 <_svfprintf_r+0x448>
   8834a:	2e65      	cmp	r6, #101	; 0x65
   8834c:	f340 80d8 	ble.w	88500 <_svfprintf_r+0x8a4>
   88350:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88354:	2200      	movs	r2, #0
   88356:	2300      	movs	r3, #0
   88358:	f005 ffce 	bl	8e2f8 <__aeabi_dcmpeq>
   8835c:	2800      	cmp	r0, #0
   8835e:	f000 821e 	beq.w	8879e <_svfprintf_r+0xb42>
   88362:	2101      	movs	r1, #1
   88364:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88366:	4ac5      	ldr	r2, [pc, #788]	; (8867c <_svfprintf_r+0xa20>)
   88368:	440b      	add	r3, r1
   8836a:	440c      	add	r4, r1
   8836c:	2b07      	cmp	r3, #7
   8836e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88372:	e9c8 2100 	strd	r2, r1, [r8]
   88376:	f300 85bb 	bgt.w	88ef0 <_svfprintf_r+0x1294>
   8837a:	f108 0808 	add.w	r8, r8, #8
   8837e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88380:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88382:	4293      	cmp	r3, r2
   88384:	f280 8321 	bge.w	889ca <_svfprintf_r+0xd6e>
   88388:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8838a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8838c:	3301      	adds	r3, #1
   8838e:	9918      	ldr	r1, [sp, #96]	; 0x60
   88390:	4414      	add	r4, r2
   88392:	2b07      	cmp	r3, #7
   88394:	e9c8 1200 	strd	r1, r2, [r8]
   88398:	942c      	str	r4, [sp, #176]	; 0xb0
   8839a:	932b      	str	r3, [sp, #172]	; 0xac
   8839c:	f300 8448 	bgt.w	88c30 <_svfprintf_r+0xfd4>
   883a0:	f108 0808 	add.w	r8, r8, #8
   883a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   883a6:	1e5d      	subs	r5, r3, #1
   883a8:	2d00      	cmp	r5, #0
   883aa:	f77f ae06 	ble.w	87fba <_svfprintf_r+0x35e>
   883ae:	2d10      	cmp	r5, #16
   883b0:	f340 85c7 	ble.w	88f42 <_svfprintf_r+0x12e6>
   883b4:	4fb2      	ldr	r7, [pc, #712]	; (88680 <_svfprintf_r+0xa24>)
   883b6:	2610      	movs	r6, #16
   883b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   883ba:	970f      	str	r7, [sp, #60]	; 0x3c
   883bc:	e005      	b.n	883ca <_svfprintf_r+0x76e>
   883be:	f108 0808 	add.w	r8, r8, #8
   883c2:	3d10      	subs	r5, #16
   883c4:	2d10      	cmp	r5, #16
   883c6:	f340 85bf 	ble.w	88f48 <_svfprintf_r+0x12ec>
   883ca:	3301      	adds	r3, #1
   883cc:	3410      	adds	r4, #16
   883ce:	2b07      	cmp	r3, #7
   883d0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   883d4:	e9c8 7600 	strd	r7, r6, [r8]
   883d8:	ddf1      	ble.n	883be <_svfprintf_r+0x762>
   883da:	4651      	mov	r1, sl
   883dc:	4648      	mov	r0, r9
   883de:	aa2a      	add	r2, sp, #168	; 0xa8
   883e0:	f005 f888 	bl	8d4f4 <__ssprint_r>
   883e4:	2800      	cmp	r0, #0
   883e6:	f040 8081 	bne.w	884ec <_svfprintf_r+0x890>
   883ea:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   883ee:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   883f2:	e7e6      	b.n	883c2 <_svfprintf_r+0x766>
   883f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   883f6:	9a08      	ldr	r2, [sp, #32]
   883f8:	1a9d      	subs	r5, r3, r2
   883fa:	2d00      	cmp	r5, #0
   883fc:	f77f adc6 	ble.w	87f8c <_svfprintf_r+0x330>
   88400:	2d10      	cmp	r5, #16
   88402:	f341 8069 	ble.w	894d8 <_svfprintf_r+0x187c>
   88406:	489e      	ldr	r0, [pc, #632]	; (88680 <_svfprintf_r+0xa24>)
   88408:	4621      	mov	r1, r4
   8840a:	2310      	movs	r3, #16
   8840c:	4604      	mov	r4, r0
   8840e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88410:	900f      	str	r0, [sp, #60]	; 0x3c
   88412:	e004      	b.n	8841e <_svfprintf_r+0x7c2>
   88414:	3d10      	subs	r5, #16
   88416:	2d10      	cmp	r5, #16
   88418:	f108 0808 	add.w	r8, r8, #8
   8841c:	dd17      	ble.n	8844e <_svfprintf_r+0x7f2>
   8841e:	3201      	adds	r2, #1
   88420:	3110      	adds	r1, #16
   88422:	2a07      	cmp	r2, #7
   88424:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   88428:	e9c8 4300 	strd	r4, r3, [r8]
   8842c:	ddf2      	ble.n	88414 <_svfprintf_r+0x7b8>
   8842e:	4651      	mov	r1, sl
   88430:	4648      	mov	r0, r9
   88432:	aa2a      	add	r2, sp, #168	; 0xa8
   88434:	f005 f85e 	bl	8d4f4 <__ssprint_r>
   88438:	2800      	cmp	r0, #0
   8843a:	d157      	bne.n	884ec <_svfprintf_r+0x890>
   8843c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88440:	3d10      	subs	r5, #16
   88442:	2d10      	cmp	r5, #16
   88444:	f04f 0310 	mov.w	r3, #16
   88448:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8844c:	dce7      	bgt.n	8841e <_svfprintf_r+0x7c2>
   8844e:	460c      	mov	r4, r1
   88450:	3201      	adds	r2, #1
   88452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88454:	442c      	add	r4, r5
   88456:	2a07      	cmp	r2, #7
   88458:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8845c:	e9c8 3500 	strd	r3, r5, [r8]
   88460:	f300 858a 	bgt.w	88f78 <_svfprintf_r+0x131c>
   88464:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88468:	f108 0808 	add.w	r8, r8, #8
   8846c:	1a9d      	subs	r5, r3, r2
   8846e:	2d00      	cmp	r5, #0
   88470:	f77f ad92 	ble.w	87f98 <_svfprintf_r+0x33c>
   88474:	2d10      	cmp	r5, #16
   88476:	f340 860a 	ble.w	8908e <_svfprintf_r+0x1432>
   8847a:	4881      	ldr	r0, [pc, #516]	; (88680 <_svfprintf_r+0xa24>)
   8847c:	4621      	mov	r1, r4
   8847e:	2310      	movs	r3, #16
   88480:	4604      	mov	r4, r0
   88482:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88484:	900f      	str	r0, [sp, #60]	; 0x3c
   88486:	e004      	b.n	88492 <_svfprintf_r+0x836>
   88488:	3d10      	subs	r5, #16
   8848a:	2d10      	cmp	r5, #16
   8848c:	f108 0808 	add.w	r8, r8, #8
   88490:	dd16      	ble.n	884c0 <_svfprintf_r+0x864>
   88492:	3201      	adds	r2, #1
   88494:	3110      	adds	r1, #16
   88496:	2a07      	cmp	r2, #7
   88498:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   8849c:	e9c8 4300 	strd	r4, r3, [r8]
   884a0:	ddf2      	ble.n	88488 <_svfprintf_r+0x82c>
   884a2:	4651      	mov	r1, sl
   884a4:	4648      	mov	r0, r9
   884a6:	aa2a      	add	r2, sp, #168	; 0xa8
   884a8:	f005 f824 	bl	8d4f4 <__ssprint_r>
   884ac:	b9f0      	cbnz	r0, 884ec <_svfprintf_r+0x890>
   884ae:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   884b2:	3d10      	subs	r5, #16
   884b4:	2d10      	cmp	r5, #16
   884b6:	f04f 0310 	mov.w	r3, #16
   884ba:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884be:	dce8      	bgt.n	88492 <_svfprintf_r+0x836>
   884c0:	460c      	mov	r4, r1
   884c2:	3201      	adds	r2, #1
   884c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   884c6:	442c      	add	r4, r5
   884c8:	2a07      	cmp	r2, #7
   884ca:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   884ce:	e9c8 3500 	strd	r3, r5, [r8]
   884d2:	f300 8237 	bgt.w	88944 <_svfprintf_r+0xce8>
   884d6:	f108 0808 	add.w	r8, r8, #8
   884da:	e55d      	b.n	87f98 <_svfprintf_r+0x33c>
   884dc:	4651      	mov	r1, sl
   884de:	4648      	mov	r0, r9
   884e0:	aa2a      	add	r2, sp, #168	; 0xa8
   884e2:	f005 f807 	bl	8d4f4 <__ssprint_r>
   884e6:	2800      	cmp	r0, #0
   884e8:	f43f ad7b 	beq.w	87fe2 <_svfprintf_r+0x386>
   884ec:	46d3      	mov	fp, sl
   884ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   884f0:	2b00      	cmp	r3, #0
   884f2:	f43f ad8a 	beq.w	8800a <_svfprintf_r+0x3ae>
   884f6:	4648      	mov	r0, r9
   884f8:	990d      	ldr	r1, [sp, #52]	; 0x34
   884fa:	f003 faf1 	bl	8bae0 <_free_r>
   884fe:	e584      	b.n	8800a <_svfprintf_r+0x3ae>
   88500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88502:	2b01      	cmp	r3, #1
   88504:	f340 81d5 	ble.w	888b2 <_svfprintf_r+0xc56>
   88508:	2301      	movs	r3, #1
   8850a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   8850c:	441c      	add	r4, r3
   8850e:	441d      	add	r5, r3
   88510:	2d07      	cmp	r5, #7
   88512:	942c      	str	r4, [sp, #176]	; 0xb0
   88514:	f8c8 7000 	str.w	r7, [r8]
   88518:	952b      	str	r5, [sp, #172]	; 0xac
   8851a:	f8c8 3004 	str.w	r3, [r8, #4]
   8851e:	f300 823a 	bgt.w	88996 <_svfprintf_r+0xd3a>
   88522:	f108 0808 	add.w	r8, r8, #8
   88526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88528:	3501      	adds	r5, #1
   8852a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   8852c:	441c      	add	r4, r3
   8852e:	2d07      	cmp	r5, #7
   88530:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88534:	e9c8 2300 	strd	r2, r3, [r8]
   88538:	f300 823a 	bgt.w	889b0 <_svfprintf_r+0xd54>
   8853c:	f108 0808 	add.w	r8, r8, #8
   88540:	2300      	movs	r3, #0
   88542:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88546:	2200      	movs	r2, #0
   88548:	f005 fed6 	bl	8e2f8 <__aeabi_dcmpeq>
   8854c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8854e:	2800      	cmp	r0, #0
   88550:	f040 81cd 	bne.w	888ee <_svfprintf_r+0xc92>
   88554:	3b01      	subs	r3, #1
   88556:	3501      	adds	r5, #1
   88558:	3701      	adds	r7, #1
   8855a:	441c      	add	r4, r3
   8855c:	2d07      	cmp	r5, #7
   8855e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88562:	f8c8 7000 	str.w	r7, [r8]
   88566:	f8c8 3004 	str.w	r3, [r8, #4]
   8856a:	f300 84dc 	bgt.w	88f26 <_svfprintf_r+0x12ca>
   8856e:	f108 0808 	add.w	r8, r8, #8
   88572:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88574:	3501      	adds	r5, #1
   88576:	4414      	add	r4, r2
   88578:	ab26      	add	r3, sp, #152	; 0x98
   8857a:	2d07      	cmp	r5, #7
   8857c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88580:	e9c8 3200 	strd	r3, r2, [r8]
   88584:	f77f ad17 	ble.w	87fb6 <_svfprintf_r+0x35a>
   88588:	4651      	mov	r1, sl
   8858a:	4648      	mov	r0, r9
   8858c:	aa2a      	add	r2, sp, #168	; 0xa8
   8858e:	f004 ffb1 	bl	8d4f4 <__ssprint_r>
   88592:	2800      	cmp	r0, #0
   88594:	d1aa      	bne.n	884ec <_svfprintf_r+0x890>
   88596:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88598:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8859c:	e50d      	b.n	87fba <_svfprintf_r+0x35e>
   8859e:	2b01      	cmp	r3, #1
   885a0:	f000 87ca 	beq.w	89538 <_svfprintf_r+0x18dc>
   885a4:	2b02      	cmp	r3, #2
   885a6:	9b07      	ldr	r3, [sp, #28]
   885a8:	9308      	str	r3, [sp, #32]
   885aa:	f47f aea7 	bne.w	882fc <_svfprintf_r+0x6a0>
   885ae:	9819      	ldr	r0, [sp, #100]	; 0x64
   885b0:	af56      	add	r7, sp, #344	; 0x158
   885b2:	0923      	lsrs	r3, r4, #4
   885b4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   885b8:	0929      	lsrs	r1, r5, #4
   885ba:	f004 020f 	and.w	r2, r4, #15
   885be:	460d      	mov	r5, r1
   885c0:	461c      	mov	r4, r3
   885c2:	5c83      	ldrb	r3, [r0, r2]
   885c4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   885c8:	ea54 0305 	orrs.w	r3, r4, r5
   885cc:	d1f1      	bne.n	885b2 <_svfprintf_r+0x956>
   885ce:	9b08      	ldr	r3, [sp, #32]
   885d0:	9307      	str	r3, [sp, #28]
   885d2:	ab56      	add	r3, sp, #344	; 0x158
   885d4:	1bdb      	subs	r3, r3, r7
   885d6:	930c      	str	r3, [sp, #48]	; 0x30
   885d8:	e6a9      	b.n	8832e <_svfprintf_r+0x6d2>
   885da:	2d10      	cmp	r5, #16
   885dc:	f340 8668 	ble.w	892b0 <_svfprintf_r+0x1654>
   885e0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   885e4:	931e      	str	r3, [sp, #120]	; 0x78
   885e6:	460b      	mov	r3, r1
   885e8:	4639      	mov	r1, r7
   885ea:	2410      	movs	r4, #16
   885ec:	4637      	mov	r7, r6
   885ee:	4656      	mov	r6, sl
   885f0:	46ca      	mov	sl, r9
   885f2:	4689      	mov	r9, r1
   885f4:	e004      	b.n	88600 <_svfprintf_r+0x9a4>
   885f6:	3d10      	subs	r5, #16
   885f8:	2d10      	cmp	r5, #16
   885fa:	f108 0808 	add.w	r8, r8, #8
   885fe:	dd17      	ble.n	88630 <_svfprintf_r+0x9d4>
   88600:	3201      	adds	r2, #1
   88602:	4920      	ldr	r1, [pc, #128]	; (88684 <_svfprintf_r+0xa28>)
   88604:	3310      	adds	r3, #16
   88606:	2a07      	cmp	r2, #7
   88608:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   8860c:	e9c8 1400 	strd	r1, r4, [r8]
   88610:	ddf1      	ble.n	885f6 <_svfprintf_r+0x99a>
   88612:	4631      	mov	r1, r6
   88614:	4650      	mov	r0, sl
   88616:	aa2a      	add	r2, sp, #168	; 0xa8
   88618:	f004 ff6c 	bl	8d4f4 <__ssprint_r>
   8861c:	2800      	cmp	r0, #0
   8861e:	f040 8458 	bne.w	88ed2 <_svfprintf_r+0x1276>
   88622:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   88626:	3d10      	subs	r5, #16
   88628:	2d10      	cmp	r5, #16
   8862a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8862e:	dce7      	bgt.n	88600 <_svfprintf_r+0x9a4>
   88630:	4648      	mov	r0, r9
   88632:	46d1      	mov	r9, sl
   88634:	46b2      	mov	sl, r6
   88636:	463e      	mov	r6, r7
   88638:	4607      	mov	r7, r0
   8863a:	4619      	mov	r1, r3
   8863c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8863e:	194c      	adds	r4, r1, r5
   88640:	3201      	adds	r2, #1
   88642:	4910      	ldr	r1, [pc, #64]	; (88684 <_svfprintf_r+0xa28>)
   88644:	2a07      	cmp	r2, #7
   88646:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8864a:	e9c8 1500 	strd	r1, r5, [r8]
   8864e:	f300 841f 	bgt.w	88e90 <_svfprintf_r+0x1234>
   88652:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88656:	f108 0808 	add.w	r8, r8, #8
   8865a:	e474      	b.n	87f46 <_svfprintf_r+0x2ea>
   8865c:	9308      	str	r3, [sp, #32]
   8865e:	2d00      	cmp	r5, #0
   88660:	bf08      	it	eq
   88662:	2c0a      	cmpeq	r4, #10
   88664:	f080 83d0 	bcs.w	88e08 <_svfprintf_r+0x11ac>
   88668:	9b08      	ldr	r3, [sp, #32]
   8866a:	3430      	adds	r4, #48	; 0x30
   8866c:	9307      	str	r3, [sp, #28]
   8866e:	2301      	movs	r3, #1
   88670:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   88674:	930c      	str	r3, [sp, #48]	; 0x30
   88676:	f20d 1757 	addw	r7, sp, #343	; 0x157
   8867a:	e658      	b.n	8832e <_svfprintf_r+0x6d2>
   8867c:	0008e6a8 	.word	0x0008e6a8
   88680:	0008e6bc 	.word	0x0008e6bc
   88684:	0008e6ac 	.word	0x0008e6ac
   88688:	4651      	mov	r1, sl
   8868a:	4648      	mov	r0, r9
   8868c:	aa2a      	add	r2, sp, #168	; 0xa8
   8868e:	f004 ff31 	bl	8d4f4 <__ssprint_r>
   88692:	2800      	cmp	r0, #0
   88694:	f47f af2a 	bne.w	884ec <_svfprintf_r+0x890>
   88698:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8869a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8869c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886a0:	2a00      	cmp	r2, #0
   886a2:	f040 847f 	bne.w	88fa4 <_svfprintf_r+0x1348>
   886a6:	9b07      	ldr	r3, [sp, #28]
   886a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886aa:	f003 0301 	and.w	r3, r3, #1
   886ae:	4313      	orrs	r3, r2
   886b0:	f43f ac83 	beq.w	87fba <_svfprintf_r+0x35e>
   886b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   886b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   886b8:	3301      	adds	r3, #1
   886ba:	9918      	ldr	r1, [sp, #96]	; 0x60
   886bc:	4414      	add	r4, r2
   886be:	2b07      	cmp	r3, #7
   886c0:	e9c8 1200 	strd	r1, r2, [r8]
   886c4:	942c      	str	r4, [sp, #176]	; 0xb0
   886c6:	932b      	str	r3, [sp, #172]	; 0xac
   886c8:	f300 8524 	bgt.w	89114 <_svfprintf_r+0x14b8>
   886cc:	f108 0808 	add.w	r8, r8, #8
   886d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886d2:	3301      	adds	r3, #1
   886d4:	4414      	add	r4, r2
   886d6:	2b07      	cmp	r3, #7
   886d8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   886dc:	e9c8 7200 	strd	r7, r2, [r8]
   886e0:	f77f ac69 	ble.w	87fb6 <_svfprintf_r+0x35a>
   886e4:	4651      	mov	r1, sl
   886e6:	4648      	mov	r0, r9
   886e8:	aa2a      	add	r2, sp, #168	; 0xa8
   886ea:	f004 ff03 	bl	8d4f4 <__ssprint_r>
   886ee:	2800      	cmp	r0, #0
   886f0:	f47f aefc 	bne.w	884ec <_svfprintf_r+0x890>
   886f4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   886f6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   886fa:	e45e      	b.n	87fba <_svfprintf_r+0x35e>
   886fc:	4651      	mov	r1, sl
   886fe:	4648      	mov	r0, r9
   88700:	aa2a      	add	r2, sp, #168	; 0xa8
   88702:	931e      	str	r3, [sp, #120]	; 0x78
   88704:	f004 fef6 	bl	8d4f4 <__ssprint_r>
   88708:	2800      	cmp	r0, #0
   8870a:	f47f aeef 	bne.w	884ec <_svfprintf_r+0x890>
   8870e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88710:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88712:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88716:	e426      	b.n	87f66 <_svfprintf_r+0x30a>
   88718:	4651      	mov	r1, sl
   8871a:	4648      	mov	r0, r9
   8871c:	aa2a      	add	r2, sp, #168	; 0xa8
   8871e:	f004 fee9 	bl	8d4f4 <__ssprint_r>
   88722:	2800      	cmp	r0, #0
   88724:	f47f aee2 	bne.w	884ec <_svfprintf_r+0x890>
   88728:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8872a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8872e:	e429      	b.n	87f84 <_svfprintf_r+0x328>
   88730:	2d10      	cmp	r5, #16
   88732:	f340 86be 	ble.w	894b2 <_svfprintf_r+0x1856>
   88736:	2610      	movs	r6, #16
   88738:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8873a:	e004      	b.n	88746 <_svfprintf_r+0xaea>
   8873c:	3d10      	subs	r5, #16
   8873e:	2d10      	cmp	r5, #16
   88740:	f108 0808 	add.w	r8, r8, #8
   88744:	dd17      	ble.n	88776 <_svfprintf_r+0xb1a>
   88746:	3301      	adds	r3, #1
   88748:	4aad      	ldr	r2, [pc, #692]	; (88a00 <_svfprintf_r+0xda4>)
   8874a:	3410      	adds	r4, #16
   8874c:	2b07      	cmp	r3, #7
   8874e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88752:	e9c8 2600 	strd	r2, r6, [r8]
   88756:	ddf1      	ble.n	8873c <_svfprintf_r+0xae0>
   88758:	4651      	mov	r1, sl
   8875a:	4648      	mov	r0, r9
   8875c:	aa2a      	add	r2, sp, #168	; 0xa8
   8875e:	f004 fec9 	bl	8d4f4 <__ssprint_r>
   88762:	2800      	cmp	r0, #0
   88764:	f47f aec2 	bne.w	884ec <_svfprintf_r+0x890>
   88768:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8876c:	3d10      	subs	r5, #16
   8876e:	2d10      	cmp	r5, #16
   88770:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88774:	dce7      	bgt.n	88746 <_svfprintf_r+0xaea>
   88776:	3301      	adds	r3, #1
   88778:	4aa1      	ldr	r2, [pc, #644]	; (88a00 <_svfprintf_r+0xda4>)
   8877a:	442c      	add	r4, r5
   8877c:	2b07      	cmp	r3, #7
   8877e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88782:	e9c8 2500 	strd	r2, r5, [r8]
   88786:	f77f ac21 	ble.w	87fcc <_svfprintf_r+0x370>
   8878a:	4651      	mov	r1, sl
   8878c:	4648      	mov	r0, r9
   8878e:	aa2a      	add	r2, sp, #168	; 0xa8
   88790:	f004 feb0 	bl	8d4f4 <__ssprint_r>
   88794:	2800      	cmp	r0, #0
   88796:	f47f aea9 	bne.w	884ec <_svfprintf_r+0x890>
   8879a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8879c:	e416      	b.n	87fcc <_svfprintf_r+0x370>
   8879e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   887a0:	2a00      	cmp	r2, #0
   887a2:	f340 8386 	ble.w	88eb2 <_svfprintf_r+0x1256>
   887a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   887aa:	4293      	cmp	r3, r2
   887ac:	bfa8      	it	ge
   887ae:	4613      	movge	r3, r2
   887b0:	2b00      	cmp	r3, #0
   887b2:	461d      	mov	r5, r3
   887b4:	dd0b      	ble.n	887ce <_svfprintf_r+0xb72>
   887b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   887b8:	442c      	add	r4, r5
   887ba:	3301      	adds	r3, #1
   887bc:	2b07      	cmp	r3, #7
   887be:	e9c8 7500 	strd	r7, r5, [r8]
   887c2:	942c      	str	r4, [sp, #176]	; 0xb0
   887c4:	932b      	str	r3, [sp, #172]	; 0xac
   887c6:	f300 851e 	bgt.w	89206 <_svfprintf_r+0x15aa>
   887ca:	f108 0808 	add.w	r8, r8, #8
   887ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887d0:	2d00      	cmp	r5, #0
   887d2:	bfa8      	it	ge
   887d4:	1b5b      	subge	r3, r3, r5
   887d6:	2b00      	cmp	r3, #0
   887d8:	461d      	mov	r5, r3
   887da:	f300 8256 	bgt.w	88c8a <_svfprintf_r+0x102e>
   887de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887e0:	443b      	add	r3, r7
   887e2:	461e      	mov	r6, r3
   887e4:	9b07      	ldr	r3, [sp, #28]
   887e6:	055b      	lsls	r3, r3, #21
   887e8:	f100 8277 	bmi.w	88cda <_svfprintf_r+0x107e>
   887ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   887ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   887f0:	4293      	cmp	r3, r2
   887f2:	db03      	blt.n	887fc <_svfprintf_r+0xba0>
   887f4:	9a07      	ldr	r2, [sp, #28]
   887f6:	07d5      	lsls	r5, r2, #31
   887f8:	f140 847a 	bpl.w	890f0 <_svfprintf_r+0x1494>
   887fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   887fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88800:	3201      	adds	r2, #1
   88802:	9818      	ldr	r0, [sp, #96]	; 0x60
   88804:	440c      	add	r4, r1
   88806:	2a07      	cmp	r2, #7
   88808:	e9c8 0100 	strd	r0, r1, [r8]
   8880c:	942c      	str	r4, [sp, #176]	; 0xb0
   8880e:	922b      	str	r2, [sp, #172]	; 0xac
   88810:	f300 8506 	bgt.w	89220 <_svfprintf_r+0x15c4>
   88814:	f108 0808 	add.w	r8, r8, #8
   88818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8881a:	18bd      	adds	r5, r7, r2
   8881c:	1bad      	subs	r5, r5, r6
   8881e:	1ad3      	subs	r3, r2, r3
   88820:	429d      	cmp	r5, r3
   88822:	bfa8      	it	ge
   88824:	461d      	movge	r5, r3
   88826:	2d00      	cmp	r5, #0
   88828:	dd0b      	ble.n	88842 <_svfprintf_r+0xbe6>
   8882a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8882c:	442c      	add	r4, r5
   8882e:	3201      	adds	r2, #1
   88830:	2a07      	cmp	r2, #7
   88832:	e9c8 6500 	strd	r6, r5, [r8]
   88836:	942c      	str	r4, [sp, #176]	; 0xb0
   88838:	922b      	str	r2, [sp, #172]	; 0xac
   8883a:	f300 855f 	bgt.w	892fc <_svfprintf_r+0x16a0>
   8883e:	f108 0808 	add.w	r8, r8, #8
   88842:	2d00      	cmp	r5, #0
   88844:	bfb4      	ite	lt
   88846:	461d      	movlt	r5, r3
   88848:	1b5d      	subge	r5, r3, r5
   8884a:	2d00      	cmp	r5, #0
   8884c:	f77f abb5 	ble.w	87fba <_svfprintf_r+0x35e>
   88850:	2d10      	cmp	r5, #16
   88852:	f340 8376 	ble.w	88f42 <_svfprintf_r+0x12e6>
   88856:	4f6b      	ldr	r7, [pc, #428]	; (88a04 <_svfprintf_r+0xda8>)
   88858:	2610      	movs	r6, #16
   8885a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8885c:	970f      	str	r7, [sp, #60]	; 0x3c
   8885e:	e005      	b.n	8886c <_svfprintf_r+0xc10>
   88860:	f108 0808 	add.w	r8, r8, #8
   88864:	3d10      	subs	r5, #16
   88866:	2d10      	cmp	r5, #16
   88868:	f340 836e 	ble.w	88f48 <_svfprintf_r+0x12ec>
   8886c:	3301      	adds	r3, #1
   8886e:	3410      	adds	r4, #16
   88870:	2b07      	cmp	r3, #7
   88872:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88876:	e9c8 7600 	strd	r7, r6, [r8]
   8887a:	ddf1      	ble.n	88860 <_svfprintf_r+0xc04>
   8887c:	4651      	mov	r1, sl
   8887e:	4648      	mov	r0, r9
   88880:	aa2a      	add	r2, sp, #168	; 0xa8
   88882:	f004 fe37 	bl	8d4f4 <__ssprint_r>
   88886:	2800      	cmp	r0, #0
   88888:	f47f ae30 	bne.w	884ec <_svfprintf_r+0x890>
   8888c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88890:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88894:	e7e6      	b.n	88864 <_svfprintf_r+0xc08>
   88896:	2b30      	cmp	r3, #48	; 0x30
   88898:	f43f ae99 	beq.w	885ce <_svfprintf_r+0x972>
   8889c:	2330      	movs	r3, #48	; 0x30
   8889e:	3a02      	subs	r2, #2
   888a0:	f807 3c01 	strb.w	r3, [r7, #-1]
   888a4:	9908      	ldr	r1, [sp, #32]
   888a6:	ab56      	add	r3, sp, #344	; 0x158
   888a8:	1a9b      	subs	r3, r3, r2
   888aa:	4617      	mov	r7, r2
   888ac:	9107      	str	r1, [sp, #28]
   888ae:	930c      	str	r3, [sp, #48]	; 0x30
   888b0:	e53d      	b.n	8832e <_svfprintf_r+0x6d2>
   888b2:	9b07      	ldr	r3, [sp, #28]
   888b4:	07d8      	lsls	r0, r3, #31
   888b6:	f53f ae27 	bmi.w	88508 <_svfprintf_r+0x8ac>
   888ba:	2301      	movs	r3, #1
   888bc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   888be:	441c      	add	r4, r3
   888c0:	441d      	add	r5, r3
   888c2:	2d07      	cmp	r5, #7
   888c4:	942c      	str	r4, [sp, #176]	; 0xb0
   888c6:	f8c8 7000 	str.w	r7, [r8]
   888ca:	952b      	str	r5, [sp, #172]	; 0xac
   888cc:	f8c8 3004 	str.w	r3, [r8, #4]
   888d0:	f77f ae4d 	ble.w	8856e <_svfprintf_r+0x912>
   888d4:	4651      	mov	r1, sl
   888d6:	4648      	mov	r0, r9
   888d8:	aa2a      	add	r2, sp, #168	; 0xa8
   888da:	f004 fe0b 	bl	8d4f4 <__ssprint_r>
   888de:	2800      	cmp	r0, #0
   888e0:	f47f ae04 	bne.w	884ec <_svfprintf_r+0x890>
   888e4:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   888e8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   888ec:	e641      	b.n	88572 <_svfprintf_r+0x916>
   888ee:	1e5e      	subs	r6, r3, #1
   888f0:	2e00      	cmp	r6, #0
   888f2:	f77f ae3e 	ble.w	88572 <_svfprintf_r+0x916>
   888f6:	2e10      	cmp	r6, #16
   888f8:	f340 871e 	ble.w	89738 <_svfprintf_r+0x1adc>
   888fc:	4b41      	ldr	r3, [pc, #260]	; (88a04 <_svfprintf_r+0xda8>)
   888fe:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   88902:	2710      	movs	r7, #16
   88904:	46d3      	mov	fp, sl
   88906:	930f      	str	r3, [sp, #60]	; 0x3c
   88908:	46ca      	mov	sl, r9
   8890a:	4699      	mov	r9, r3
   8890c:	e005      	b.n	8891a <_svfprintf_r+0xcbe>
   8890e:	f108 0808 	add.w	r8, r8, #8
   88912:	3e10      	subs	r6, #16
   88914:	2e10      	cmp	r6, #16
   88916:	f340 82f8 	ble.w	88f0a <_svfprintf_r+0x12ae>
   8891a:	3501      	adds	r5, #1
   8891c:	3410      	adds	r4, #16
   8891e:	2d07      	cmp	r5, #7
   88920:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88924:	e9c8 9700 	strd	r9, r7, [r8]
   88928:	ddf1      	ble.n	8890e <_svfprintf_r+0xcb2>
   8892a:	4659      	mov	r1, fp
   8892c:	4650      	mov	r0, sl
   8892e:	aa2a      	add	r2, sp, #168	; 0xa8
   88930:	f004 fde0 	bl	8d4f4 <__ssprint_r>
   88934:	2800      	cmp	r0, #0
   88936:	f040 85cc 	bne.w	894d2 <_svfprintf_r+0x1876>
   8893a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8893e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88942:	e7e6      	b.n	88912 <_svfprintf_r+0xcb6>
   88944:	4651      	mov	r1, sl
   88946:	4648      	mov	r0, r9
   88948:	aa2a      	add	r2, sp, #168	; 0xa8
   8894a:	f004 fdd3 	bl	8d4f4 <__ssprint_r>
   8894e:	2800      	cmp	r0, #0
   88950:	f47f adcc 	bne.w	884ec <_svfprintf_r+0x890>
   88954:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88956:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8895a:	f7ff bb1d 	b.w	87f98 <_svfprintf_r+0x33c>
   8895e:	9b08      	ldr	r3, [sp, #32]
   88960:	06dc      	lsls	r4, r3, #27
   88962:	f100 8119 	bmi.w	88b98 <_svfprintf_r+0xf3c>
   88966:	9b08      	ldr	r3, [sp, #32]
   88968:	0658      	lsls	r0, r3, #25
   8896a:	f140 8368 	bpl.w	8903e <_svfprintf_r+0x13e2>
   8896e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88970:	2301      	movs	r3, #1
   88972:	f852 4b04 	ldr.w	r4, [r2], #4
   88976:	2500      	movs	r5, #0
   88978:	920e      	str	r2, [sp, #56]	; 0x38
   8897a:	b2a4      	uxth	r4, r4
   8897c:	f7ff ba7f 	b.w	87e7e <_svfprintf_r+0x222>
   88980:	232d      	movs	r3, #45	; 0x2d
   88982:	9a07      	ldr	r2, [sp, #28]
   88984:	4264      	negs	r4, r4
   88986:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8898a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8898e:	2301      	movs	r3, #1
   88990:	9208      	str	r2, [sp, #32]
   88992:	f7ff ba77 	b.w	87e84 <_svfprintf_r+0x228>
   88996:	4651      	mov	r1, sl
   88998:	4648      	mov	r0, r9
   8899a:	aa2a      	add	r2, sp, #168	; 0xa8
   8899c:	f004 fdaa 	bl	8d4f4 <__ssprint_r>
   889a0:	2800      	cmp	r0, #0
   889a2:	f47f ada3 	bne.w	884ec <_svfprintf_r+0x890>
   889a6:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   889aa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   889ae:	e5ba      	b.n	88526 <_svfprintf_r+0x8ca>
   889b0:	4651      	mov	r1, sl
   889b2:	4648      	mov	r0, r9
   889b4:	aa2a      	add	r2, sp, #168	; 0xa8
   889b6:	f004 fd9d 	bl	8d4f4 <__ssprint_r>
   889ba:	2800      	cmp	r0, #0
   889bc:	f47f ad96 	bne.w	884ec <_svfprintf_r+0x890>
   889c0:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   889c4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   889c8:	e5ba      	b.n	88540 <_svfprintf_r+0x8e4>
   889ca:	9b07      	ldr	r3, [sp, #28]
   889cc:	07da      	lsls	r2, r3, #31
   889ce:	f57f aaf4 	bpl.w	87fba <_svfprintf_r+0x35e>
   889d2:	e4d9      	b.n	88388 <_svfprintf_r+0x72c>
   889d4:	af56      	add	r7, sp, #344	; 0x158
   889d6:	e4aa      	b.n	8832e <_svfprintf_r+0x6d2>
   889d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   889da:	465f      	mov	r7, fp
   889dc:	f853 1b04 	ldr.w	r1, [r3], #4
   889e0:	930e      	str	r3, [sp, #56]	; 0x38
   889e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   889e4:	17dd      	asrs	r5, r3, #31
   889e6:	461a      	mov	r2, r3
   889e8:	462b      	mov	r3, r5
   889ea:	e9c1 2300 	strd	r2, r3, [r1]
   889ee:	f7ff bb03 	b.w	87ff8 <_svfprintf_r+0x39c>
   889f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   889f4:	2500      	movs	r5, #0
   889f6:	f853 4b04 	ldr.w	r4, [r3], #4
   889fa:	930e      	str	r3, [sp, #56]	; 0x38
   889fc:	f7ff ba3a 	b.w	87e74 <_svfprintf_r+0x218>
   88a00:	0008e6ac 	.word	0x0008e6ac
   88a04:	0008e6bc 	.word	0x0008e6bc
   88a08:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88a0c:	460b      	mov	r3, r1
   88a0e:	4602      	mov	r2, r0
   88a10:	f005 fca4 	bl	8e35c <__aeabi_dcmpun>
   88a14:	4601      	mov	r1, r0
   88a16:	2800      	cmp	r0, #0
   88a18:	f040 8643 	bne.w	896a2 <_svfprintf_r+0x1a46>
   88a1c:	2e61      	cmp	r6, #97	; 0x61
   88a1e:	f000 8586 	beq.w	8952e <_svfprintf_r+0x18d2>
   88a22:	2e41      	cmp	r6, #65	; 0x41
   88a24:	f000 847a 	beq.w	8931c <_svfprintf_r+0x16c0>
   88a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a2a:	f026 0520 	bic.w	r5, r6, #32
   88a2e:	1c5a      	adds	r2, r3, #1
   88a30:	9508      	str	r5, [sp, #32]
   88a32:	f000 837d 	beq.w	89130 <_svfprintf_r+0x14d4>
   88a36:	2d47      	cmp	r5, #71	; 0x47
   88a38:	f000 859e 	beq.w	89578 <_svfprintf_r+0x191c>
   88a3c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88a40:	9b07      	ldr	r3, [sp, #28]
   88a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88a46:	9312      	str	r3, [sp, #72]	; 0x48
   88a48:	460b      	mov	r3, r1
   88a4a:	2b00      	cmp	r3, #0
   88a4c:	f2c0 85ba 	blt.w	895c4 <_svfprintf_r+0x1968>
   88a50:	2200      	movs	r2, #0
   88a52:	930f      	str	r3, [sp, #60]	; 0x3c
   88a54:	921e      	str	r2, [sp, #120]	; 0x78
   88a56:	920d      	str	r2, [sp, #52]	; 0x34
   88a58:	900c      	str	r0, [sp, #48]	; 0x30
   88a5a:	2d46      	cmp	r5, #70	; 0x46
   88a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88a5e:	f000 8407 	beq.w	89270 <_svfprintf_r+0x1614>
   88a62:	2d45      	cmp	r5, #69	; 0x45
   88a64:	f04f 0002 	mov.w	r0, #2
   88a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88a6a:	f040 83e7 	bne.w	8923c <_svfprintf_r+0x15e0>
   88a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
   88a70:	9000      	str	r0, [sp, #0]
   88a72:	1c4c      	adds	r4, r1, #1
   88a74:	a928      	add	r1, sp, #160	; 0xa0
   88a76:	a825      	add	r0, sp, #148	; 0x94
   88a78:	9104      	str	r1, [sp, #16]
   88a7a:	a924      	add	r1, sp, #144	; 0x90
   88a7c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88a80:	9401      	str	r4, [sp, #4]
   88a82:	4648      	mov	r0, r9
   88a84:	f001 feb0 	bl	8a7e8 <_dtoa_r>
   88a88:	4607      	mov	r7, r0
   88a8a:	4404      	add	r4, r0
   88a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a8e:	9d07      	ldr	r5, [sp, #28]
   88a90:	9307      	str	r3, [sp, #28]
   88a92:	2200      	movs	r2, #0
   88a94:	2300      	movs	r3, #0
   88a96:	980c      	ldr	r0, [sp, #48]	; 0x30
   88a98:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a9a:	f005 fc2d 	bl	8e2f8 <__aeabi_dcmpeq>
   88a9e:	2800      	cmp	r0, #0
   88aa0:	f000 8398 	beq.w	891d4 <_svfprintf_r+0x1578>
   88aa4:	4623      	mov	r3, r4
   88aa6:	1bdb      	subs	r3, r3, r7
   88aa8:	9313      	str	r3, [sp, #76]	; 0x4c
   88aaa:	9b08      	ldr	r3, [sp, #32]
   88aac:	2b47      	cmp	r3, #71	; 0x47
   88aae:	f000 835e 	beq.w	8916e <_svfprintf_r+0x1512>
   88ab2:	9b08      	ldr	r3, [sp, #32]
   88ab4:	2b46      	cmp	r3, #70	; 0x46
   88ab6:	f000 840b 	beq.w	892d0 <_svfprintf_r+0x1674>
   88aba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88abc:	9310      	str	r3, [sp, #64]	; 0x40
   88abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88ac0:	9a08      	ldr	r2, [sp, #32]
   88ac2:	3b01      	subs	r3, #1
   88ac4:	2a41      	cmp	r2, #65	; 0x41
   88ac6:	9324      	str	r3, [sp, #144]	; 0x90
   88ac8:	f000 85ad 	beq.w	89626 <_svfprintf_r+0x19ca>
   88acc:	2100      	movs	r1, #0
   88ace:	b2f2      	uxtb	r2, r6
   88ad0:	2b00      	cmp	r3, #0
   88ad2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   88ad6:	bfb6      	itet	lt
   88ad8:	222d      	movlt	r2, #45	; 0x2d
   88ada:	222b      	movge	r2, #43	; 0x2b
   88adc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   88ade:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   88ae2:	bfb8      	it	lt
   88ae4:	f1c3 0301 	rsblt	r3, r3, #1
   88ae8:	2b09      	cmp	r3, #9
   88aea:	f340 85a2 	ble.w	89632 <_svfprintf_r+0x19d6>
   88aee:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   88af2:	4672      	mov	r2, lr
   88af4:	469c      	mov	ip, r3
   88af6:	4cbf      	ldr	r4, [pc, #764]	; (88df4 <_svfprintf_r+0x1198>)
   88af8:	4660      	mov	r0, ip
   88afa:	4611      	mov	r1, r2
   88afc:	fb84 230c 	smull	r2, r3, r4, ip
   88b00:	ea4f 72ec 	mov.w	r2, ip, asr #31
   88b04:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   88b08:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   88b0c:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   88b10:	3330      	adds	r3, #48	; 0x30
   88b12:	2863      	cmp	r0, #99	; 0x63
   88b14:	4694      	mov	ip, r2
   88b16:	f801 3c01 	strb.w	r3, [r1, #-1]
   88b1a:	f101 32ff 	add.w	r2, r1, #4294967295
   88b1e:	dceb      	bgt.n	88af8 <_svfprintf_r+0xe9c>
   88b20:	4663      	mov	r3, ip
   88b22:	3330      	adds	r3, #48	; 0x30
   88b24:	b2d8      	uxtb	r0, r3
   88b26:	1e8b      	subs	r3, r1, #2
   88b28:	459e      	cmp	lr, r3
   88b2a:	f802 0c01 	strb.w	r0, [r2, #-1]
   88b2e:	f240 862c 	bls.w	8978a <_svfprintf_r+0x1b2e>
   88b32:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   88b36:	e001      	b.n	88b3c <_svfprintf_r+0xee0>
   88b38:	f812 0b01 	ldrb.w	r0, [r2], #1
   88b3c:	4596      	cmp	lr, r2
   88b3e:	f803 0b01 	strb.w	r0, [r3], #1
   88b42:	d1f9      	bne.n	88b38 <_svfprintf_r+0xedc>
   88b44:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   88b48:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88b4c:	1a5b      	subs	r3, r3, r1
   88b4e:	4413      	add	r3, r2
   88b50:	aa26      	add	r2, sp, #152	; 0x98
   88b52:	1a9b      	subs	r3, r3, r2
   88b54:	931b      	str	r3, [sp, #108]	; 0x6c
   88b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88b58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88b5a:	2b01      	cmp	r3, #1
   88b5c:	441a      	add	r2, r3
   88b5e:	920c      	str	r2, [sp, #48]	; 0x30
   88b60:	f340 85cc 	ble.w	896fc <_svfprintf_r+0x1aa0>
   88b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88b68:	4413      	add	r3, r2
   88b6a:	930c      	str	r3, [sp, #48]	; 0x30
   88b6c:	2300      	movs	r3, #0
   88b6e:	9312      	str	r3, [sp, #72]	; 0x48
   88b70:	9316      	str	r3, [sp, #88]	; 0x58
   88b72:	9310      	str	r3, [sp, #64]	; 0x40
   88b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b76:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   88b7a:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   88b7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88b82:	9207      	str	r2, [sp, #28]
   88b84:	9308      	str	r3, [sp, #32]
   88b86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88b88:	2b00      	cmp	r3, #0
   88b8a:	f040 8317 	bne.w	891bc <_svfprintf_r+0x1560>
   88b8e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88b92:	9309      	str	r3, [sp, #36]	; 0x24
   88b94:	f7ff ba86 	b.w	880a4 <_svfprintf_r+0x448>
   88b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88b9a:	2301      	movs	r3, #1
   88b9c:	f852 4b04 	ldr.w	r4, [r2], #4
   88ba0:	2500      	movs	r5, #0
   88ba2:	920e      	str	r2, [sp, #56]	; 0x38
   88ba4:	f7ff b96b 	b.w	87e7e <_svfprintf_r+0x222>
   88ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88baa:	f853 4b04 	ldr.w	r4, [r3], #4
   88bae:	17e5      	asrs	r5, r4, #31
   88bb0:	930e      	str	r3, [sp, #56]	; 0x38
   88bb2:	4622      	mov	r2, r4
   88bb4:	462b      	mov	r3, r5
   88bb6:	f7ff b933 	b.w	87e20 <_svfprintf_r+0x1c4>
   88bba:	9b07      	ldr	r3, [sp, #28]
   88bbc:	9308      	str	r3, [sp, #32]
   88bbe:	f7ff bae0 	b.w	88182 <_svfprintf_r+0x526>
   88bc2:	4b8d      	ldr	r3, [pc, #564]	; (88df8 <_svfprintf_r+0x119c>)
   88bc4:	9319      	str	r3, [sp, #100]	; 0x64
   88bc6:	9b07      	ldr	r3, [sp, #28]
   88bc8:	0699      	lsls	r1, r3, #26
   88bca:	f140 80fe 	bpl.w	88dca <_svfprintf_r+0x116e>
   88bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88bd0:	3307      	adds	r3, #7
   88bd2:	f023 0307 	bic.w	r3, r3, #7
   88bd6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88bda:	930e      	str	r3, [sp, #56]	; 0x38
   88bdc:	9a07      	ldr	r2, [sp, #28]
   88bde:	07d7      	lsls	r7, r2, #31
   88be0:	d50a      	bpl.n	88bf8 <_svfprintf_r+0xf9c>
   88be2:	ea54 0305 	orrs.w	r3, r4, r5
   88be6:	d007      	beq.n	88bf8 <_svfprintf_r+0xf9c>
   88be8:	2330      	movs	r3, #48	; 0x30
   88bea:	f042 0202 	orr.w	r2, r2, #2
   88bee:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   88bf2:	9207      	str	r2, [sp, #28]
   88bf4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88bf8:	9a07      	ldr	r2, [sp, #28]
   88bfa:	2302      	movs	r3, #2
   88bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   88c00:	9208      	str	r2, [sp, #32]
   88c02:	f7ff b93c 	b.w	87e7e <_svfprintf_r+0x222>
   88c06:	4b7d      	ldr	r3, [pc, #500]	; (88dfc <_svfprintf_r+0x11a0>)
   88c08:	9319      	str	r3, [sp, #100]	; 0x64
   88c0a:	e7dc      	b.n	88bc6 <_svfprintf_r+0xf6a>
   88c0c:	f043 0320 	orr.w	r3, r3, #32
   88c10:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88c14:	9307      	str	r3, [sp, #28]
   88c16:	f10b 0b01 	add.w	fp, fp, #1
   88c1a:	f7ff b86a 	b.w	87cf2 <_svfprintf_r+0x96>
   88c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   88c22:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88c26:	9307      	str	r3, [sp, #28]
   88c28:	f10b 0b01 	add.w	fp, fp, #1
   88c2c:	f7ff b861 	b.w	87cf2 <_svfprintf_r+0x96>
   88c30:	4651      	mov	r1, sl
   88c32:	4648      	mov	r0, r9
   88c34:	aa2a      	add	r2, sp, #168	; 0xa8
   88c36:	f004 fc5d 	bl	8d4f4 <__ssprint_r>
   88c3a:	2800      	cmp	r0, #0
   88c3c:	f47f ac56 	bne.w	884ec <_svfprintf_r+0x890>
   88c40:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88c42:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88c46:	f7ff bbad 	b.w	883a4 <_svfprintf_r+0x748>
   88c4a:	2140      	movs	r1, #64	; 0x40
   88c4c:	4648      	mov	r0, r9
   88c4e:	f003 fa79 	bl	8c144 <_malloc_r>
   88c52:	f8cb 0000 	str.w	r0, [fp]
   88c56:	f8cb 0010 	str.w	r0, [fp, #16]
   88c5a:	2800      	cmp	r0, #0
   88c5c:	f000 858d 	beq.w	8977a <_svfprintf_r+0x1b1e>
   88c60:	2340      	movs	r3, #64	; 0x40
   88c62:	f8cb 3014 	str.w	r3, [fp, #20]
   88c66:	f7ff b811 	b.w	87c8c <_svfprintf_r+0x30>
   88c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88c6c:	463a      	mov	r2, r7
   88c6e:	2b06      	cmp	r3, #6
   88c70:	bf28      	it	cs
   88c72:	2306      	movcs	r3, #6
   88c74:	9709      	str	r7, [sp, #36]	; 0x24
   88c76:	9712      	str	r7, [sp, #72]	; 0x48
   88c78:	9716      	str	r7, [sp, #88]	; 0x58
   88c7a:	9710      	str	r7, [sp, #64]	; 0x40
   88c7c:	970d      	str	r7, [sp, #52]	; 0x34
   88c7e:	9308      	str	r3, [sp, #32]
   88c80:	4f5f      	ldr	r7, [pc, #380]	; (88e00 <_svfprintf_r+0x11a4>)
   88c82:	940e      	str	r4, [sp, #56]	; 0x38
   88c84:	930c      	str	r3, [sp, #48]	; 0x30
   88c86:	f7ff ba0d 	b.w	880a4 <_svfprintf_r+0x448>
   88c8a:	2b10      	cmp	r3, #16
   88c8c:	f340 8558 	ble.w	89740 <_svfprintf_r+0x1ae4>
   88c90:	4651      	mov	r1, sl
   88c92:	4a5c      	ldr	r2, [pc, #368]	; (88e04 <_svfprintf_r+0x11a8>)
   88c94:	46ca      	mov	sl, r9
   88c96:	9709      	str	r7, [sp, #36]	; 0x24
   88c98:	2610      	movs	r6, #16
   88c9a:	4617      	mov	r7, r2
   88c9c:	4689      	mov	r9, r1
   88c9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88ca0:	920f      	str	r2, [sp, #60]	; 0x3c
   88ca2:	e005      	b.n	88cb0 <_svfprintf_r+0x1054>
   88ca4:	f108 0808 	add.w	r8, r8, #8
   88ca8:	3d10      	subs	r5, #16
   88caa:	2d10      	cmp	r5, #16
   88cac:	f340 81fa 	ble.w	890a4 <_svfprintf_r+0x1448>
   88cb0:	3301      	adds	r3, #1
   88cb2:	3410      	adds	r4, #16
   88cb4:	2b07      	cmp	r3, #7
   88cb6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88cba:	e9c8 7600 	strd	r7, r6, [r8]
   88cbe:	ddf1      	ble.n	88ca4 <_svfprintf_r+0x1048>
   88cc0:	4649      	mov	r1, r9
   88cc2:	4650      	mov	r0, sl
   88cc4:	aa2a      	add	r2, sp, #168	; 0xa8
   88cc6:	f004 fc15 	bl	8d4f4 <__ssprint_r>
   88cca:	2800      	cmp	r0, #0
   88ccc:	f040 83fd 	bne.w	894ca <_svfprintf_r+0x186e>
   88cd0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88cd4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88cd8:	e7e6      	b.n	88ca8 <_svfprintf_r+0x104c>
   88cda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88cdc:	4642      	mov	r2, r8
   88cde:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88ce2:	18fb      	adds	r3, r7, r3
   88ce4:	9309      	str	r3, [sp, #36]	; 0x24
   88ce6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   88cea:	970f      	str	r7, [sp, #60]	; 0x3c
   88cec:	4620      	mov	r0, r4
   88cee:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   88cf2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   88cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88cf6:	f1b8 0f00 	cmp.w	r8, #0
   88cfa:	d02d      	beq.n	88d58 <_svfprintf_r+0x10fc>
   88cfc:	bb7b      	cbnz	r3, 88d5e <_svfprintf_r+0x1102>
   88cfe:	3f01      	subs	r7, #1
   88d00:	f108 38ff 	add.w	r8, r8, #4294967295
   88d04:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d06:	991c      	ldr	r1, [sp, #112]	; 0x70
   88d08:	3301      	adds	r3, #1
   88d0a:	4458      	add	r0, fp
   88d0c:	2b07      	cmp	r3, #7
   88d0e:	e9c2 1b00 	strd	r1, fp, [r2]
   88d12:	902c      	str	r0, [sp, #176]	; 0xb0
   88d14:	932b      	str	r3, [sp, #172]	; 0xac
   88d16:	dc62      	bgt.n	88dde <_svfprintf_r+0x1182>
   88d18:	3208      	adds	r2, #8
   88d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
   88d1c:	783b      	ldrb	r3, [r7, #0]
   88d1e:	1b8d      	subs	r5, r1, r6
   88d20:	429d      	cmp	r5, r3
   88d22:	bfa8      	it	ge
   88d24:	461d      	movge	r5, r3
   88d26:	2d00      	cmp	r5, #0
   88d28:	dd0b      	ble.n	88d42 <_svfprintf_r+0x10e6>
   88d2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d2c:	4428      	add	r0, r5
   88d2e:	3301      	adds	r3, #1
   88d30:	2b07      	cmp	r3, #7
   88d32:	e9c2 6500 	strd	r6, r5, [r2]
   88d36:	902c      	str	r0, [sp, #176]	; 0xb0
   88d38:	932b      	str	r3, [sp, #172]	; 0xac
   88d3a:	f300 8111 	bgt.w	88f60 <_svfprintf_r+0x1304>
   88d3e:	783b      	ldrb	r3, [r7, #0]
   88d40:	3208      	adds	r2, #8
   88d42:	2d00      	cmp	r5, #0
   88d44:	bfb4      	ite	lt
   88d46:	461d      	movlt	r5, r3
   88d48:	1b5d      	subge	r5, r3, r5
   88d4a:	2d00      	cmp	r5, #0
   88d4c:	dc0b      	bgt.n	88d66 <_svfprintf_r+0x110a>
   88d4e:	441e      	add	r6, r3
   88d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d52:	f1b8 0f00 	cmp.w	r8, #0
   88d56:	d1d1      	bne.n	88cfc <_svfprintf_r+0x10a0>
   88d58:	2b00      	cmp	r3, #0
   88d5a:	f000 81f9 	beq.w	89150 <_svfprintf_r+0x14f4>
   88d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88d60:	3b01      	subs	r3, #1
   88d62:	9312      	str	r3, [sp, #72]	; 0x48
   88d64:	e7ce      	b.n	88d04 <_svfprintf_r+0x10a8>
   88d66:	2d10      	cmp	r5, #16
   88d68:	f340 84c5 	ble.w	896f6 <_svfprintf_r+0x1a9a>
   88d6c:	992b      	ldr	r1, [sp, #172]	; 0xac
   88d6e:	2410      	movs	r4, #16
   88d70:	460b      	mov	r3, r1
   88d72:	e004      	b.n	88d7e <_svfprintf_r+0x1122>
   88d74:	3d10      	subs	r5, #16
   88d76:	2d10      	cmp	r5, #16
   88d78:	f102 0208 	add.w	r2, r2, #8
   88d7c:	dd16      	ble.n	88dac <_svfprintf_r+0x1150>
   88d7e:	3301      	adds	r3, #1
   88d80:	4920      	ldr	r1, [pc, #128]	; (88e04 <_svfprintf_r+0x11a8>)
   88d82:	3010      	adds	r0, #16
   88d84:	2b07      	cmp	r3, #7
   88d86:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88d8a:	e9c2 1400 	strd	r1, r4, [r2]
   88d8e:	ddf1      	ble.n	88d74 <_svfprintf_r+0x1118>
   88d90:	4651      	mov	r1, sl
   88d92:	4648      	mov	r0, r9
   88d94:	aa2a      	add	r2, sp, #168	; 0xa8
   88d96:	f004 fbad 	bl	8d4f4 <__ssprint_r>
   88d9a:	2800      	cmp	r0, #0
   88d9c:	f47f aba6 	bne.w	884ec <_svfprintf_r+0x890>
   88da0:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   88da4:	3d10      	subs	r5, #16
   88da6:	2d10      	cmp	r5, #16
   88da8:	aa2d      	add	r2, sp, #180	; 0xb4
   88daa:	dce8      	bgt.n	88d7e <_svfprintf_r+0x1122>
   88dac:	4619      	mov	r1, r3
   88dae:	1c4b      	adds	r3, r1, #1
   88db0:	4914      	ldr	r1, [pc, #80]	; (88e04 <_svfprintf_r+0x11a8>)
   88db2:	4428      	add	r0, r5
   88db4:	2b07      	cmp	r3, #7
   88db6:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88dba:	e9c2 1500 	strd	r1, r5, [r2]
   88dbe:	f300 8215 	bgt.w	891ec <_svfprintf_r+0x1590>
   88dc2:	783b      	ldrb	r3, [r7, #0]
   88dc4:	3208      	adds	r2, #8
   88dc6:	441e      	add	r6, r3
   88dc8:	e7c2      	b.n	88d50 <_svfprintf_r+0x10f4>
   88dca:	9b07      	ldr	r3, [sp, #28]
   88dcc:	06da      	lsls	r2, r3, #27
   88dce:	f140 8084 	bpl.w	88eda <_svfprintf_r+0x127e>
   88dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88dd4:	2500      	movs	r5, #0
   88dd6:	f853 4b04 	ldr.w	r4, [r3], #4
   88dda:	930e      	str	r3, [sp, #56]	; 0x38
   88ddc:	e6fe      	b.n	88bdc <_svfprintf_r+0xf80>
   88dde:	4651      	mov	r1, sl
   88de0:	4648      	mov	r0, r9
   88de2:	aa2a      	add	r2, sp, #168	; 0xa8
   88de4:	f004 fb86 	bl	8d4f4 <__ssprint_r>
   88de8:	2800      	cmp	r0, #0
   88dea:	f47f ab7f 	bne.w	884ec <_svfprintf_r+0x890>
   88dee:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88df0:	aa2d      	add	r2, sp, #180	; 0xb4
   88df2:	e792      	b.n	88d1a <_svfprintf_r+0x10be>
   88df4:	66666667 	.word	0x66666667
   88df8:	0008e678 	.word	0x0008e678
   88dfc:	0008e68c 	.word	0x0008e68c
   88e00:	0008e6a0 	.word	0x0008e6a0
   88e04:	0008e6bc 	.word	0x0008e6bc
   88e08:	2200      	movs	r2, #0
   88e0a:	9b08      	ldr	r3, [sp, #32]
   88e0c:	f8cd b01c 	str.w	fp, [sp, #28]
   88e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   88e14:	960c      	str	r6, [sp, #48]	; 0x30
   88e16:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   88e1a:	4693      	mov	fp, r2
   88e1c:	46ca      	mov	sl, r9
   88e1e:	461e      	mov	r6, r3
   88e20:	46c1      	mov	r9, r8
   88e22:	af56      	add	r7, sp, #344	; 0x158
   88e24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   88e28:	e00b      	b.n	88e42 <_svfprintf_r+0x11e6>
   88e2a:	220a      	movs	r2, #10
   88e2c:	2300      	movs	r3, #0
   88e2e:	4620      	mov	r0, r4
   88e30:	4629      	mov	r1, r5
   88e32:	f7fe fb9f 	bl	87574 <__aeabi_uldivmod>
   88e36:	2d00      	cmp	r5, #0
   88e38:	bf08      	it	eq
   88e3a:	2c0a      	cmpeq	r4, #10
   88e3c:	d31b      	bcc.n	88e76 <_svfprintf_r+0x121a>
   88e3e:	4604      	mov	r4, r0
   88e40:	460d      	mov	r5, r1
   88e42:	220a      	movs	r2, #10
   88e44:	2300      	movs	r3, #0
   88e46:	4620      	mov	r0, r4
   88e48:	4629      	mov	r1, r5
   88e4a:	f7fe fb93 	bl	87574 <__aeabi_uldivmod>
   88e4e:	3230      	adds	r2, #48	; 0x30
   88e50:	f807 2c01 	strb.w	r2, [r7, #-1]
   88e54:	f10b 0b01 	add.w	fp, fp, #1
   88e58:	3f01      	subs	r7, #1
   88e5a:	2e00      	cmp	r6, #0
   88e5c:	d0e5      	beq.n	88e2a <_svfprintf_r+0x11ce>
   88e5e:	f898 3000 	ldrb.w	r3, [r8]
   88e62:	459b      	cmp	fp, r3
   88e64:	d1e1      	bne.n	88e2a <_svfprintf_r+0x11ce>
   88e66:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   88e6a:	d0de      	beq.n	88e2a <_svfprintf_r+0x11ce>
   88e6c:	2d00      	cmp	r5, #0
   88e6e:	bf08      	it	eq
   88e70:	2c0a      	cmpeq	r4, #10
   88e72:	f080 8128 	bcs.w	890c6 <_svfprintf_r+0x146a>
   88e76:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   88e7a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   88e7e:	46c8      	mov	r8, r9
   88e80:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88e82:	46d1      	mov	r9, sl
   88e84:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88e88:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   88e8c:	f7ff bb9f 	b.w	885ce <_svfprintf_r+0x972>
   88e90:	4651      	mov	r1, sl
   88e92:	4648      	mov	r0, r9
   88e94:	aa2a      	add	r2, sp, #168	; 0xa8
   88e96:	931e      	str	r3, [sp, #120]	; 0x78
   88e98:	f004 fb2c 	bl	8d4f4 <__ssprint_r>
   88e9c:	2800      	cmp	r0, #0
   88e9e:	f47f ab25 	bne.w	884ec <_svfprintf_r+0x890>
   88ea2:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88ea6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88ea8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88eaa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88eae:	f7ff b84a 	b.w	87f46 <_svfprintf_r+0x2ea>
   88eb2:	2001      	movs	r0, #1
   88eb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88eb6:	49c5      	ldr	r1, [pc, #788]	; (891cc <_svfprintf_r+0x1570>)
   88eb8:	4403      	add	r3, r0
   88eba:	4404      	add	r4, r0
   88ebc:	2b07      	cmp	r3, #7
   88ebe:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88ec2:	e9c8 1000 	strd	r1, r0, [r8]
   88ec6:	f73f abdf 	bgt.w	88688 <_svfprintf_r+0xa2c>
   88eca:	f108 0808 	add.w	r8, r8, #8
   88ece:	f7ff bbe7 	b.w	886a0 <_svfprintf_r+0xa44>
   88ed2:	46d1      	mov	r9, sl
   88ed4:	46b3      	mov	fp, r6
   88ed6:	f7ff bb0a 	b.w	884ee <_svfprintf_r+0x892>
   88eda:	9b07      	ldr	r3, [sp, #28]
   88edc:	065b      	lsls	r3, r3, #25
   88ede:	f140 80cb 	bpl.w	89078 <_svfprintf_r+0x141c>
   88ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88ee4:	2500      	movs	r5, #0
   88ee6:	f853 4b04 	ldr.w	r4, [r3], #4
   88eea:	930e      	str	r3, [sp, #56]	; 0x38
   88eec:	b2a4      	uxth	r4, r4
   88eee:	e675      	b.n	88bdc <_svfprintf_r+0xf80>
   88ef0:	4651      	mov	r1, sl
   88ef2:	4648      	mov	r0, r9
   88ef4:	aa2a      	add	r2, sp, #168	; 0xa8
   88ef6:	f004 fafd 	bl	8d4f4 <__ssprint_r>
   88efa:	2800      	cmp	r0, #0
   88efc:	f47f aaf6 	bne.w	884ec <_svfprintf_r+0x890>
   88f00:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88f02:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f06:	f7ff ba3a 	b.w	8837e <_svfprintf_r+0x722>
   88f0a:	46d1      	mov	r9, sl
   88f0c:	46da      	mov	sl, fp
   88f0e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   88f12:	3501      	adds	r5, #1
   88f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88f16:	4434      	add	r4, r6
   88f18:	2d07      	cmp	r5, #7
   88f1a:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88f1e:	e9c8 3600 	strd	r3, r6, [r8]
   88f22:	f77f ab24 	ble.w	8856e <_svfprintf_r+0x912>
   88f26:	4651      	mov	r1, sl
   88f28:	4648      	mov	r0, r9
   88f2a:	aa2a      	add	r2, sp, #168	; 0xa8
   88f2c:	f004 fae2 	bl	8d4f4 <__ssprint_r>
   88f30:	2800      	cmp	r0, #0
   88f32:	f47f aadb 	bne.w	884ec <_svfprintf_r+0x890>
   88f36:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88f3a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f3e:	f7ff bb18 	b.w	88572 <_svfprintf_r+0x916>
   88f42:	4aa3      	ldr	r2, [pc, #652]	; (891d0 <_svfprintf_r+0x1574>)
   88f44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88f46:	920f      	str	r2, [sp, #60]	; 0x3c
   88f48:	3301      	adds	r3, #1
   88f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88f4c:	442c      	add	r4, r5
   88f4e:	2b07      	cmp	r3, #7
   88f50:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88f54:	e9c8 2500 	strd	r2, r5, [r8]
   88f58:	f77f a82d 	ble.w	87fb6 <_svfprintf_r+0x35a>
   88f5c:	f7ff bbc2 	b.w	886e4 <_svfprintf_r+0xa88>
   88f60:	4651      	mov	r1, sl
   88f62:	4648      	mov	r0, r9
   88f64:	aa2a      	add	r2, sp, #168	; 0xa8
   88f66:	f004 fac5 	bl	8d4f4 <__ssprint_r>
   88f6a:	2800      	cmp	r0, #0
   88f6c:	f47f aabe 	bne.w	884ec <_svfprintf_r+0x890>
   88f70:	783b      	ldrb	r3, [r7, #0]
   88f72:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88f74:	aa2d      	add	r2, sp, #180	; 0xb4
   88f76:	e6e4      	b.n	88d42 <_svfprintf_r+0x10e6>
   88f78:	4651      	mov	r1, sl
   88f7a:	4648      	mov	r0, r9
   88f7c:	aa2a      	add	r2, sp, #168	; 0xa8
   88f7e:	f004 fab9 	bl	8d4f4 <__ssprint_r>
   88f82:	2800      	cmp	r0, #0
   88f84:	f47f aab2 	bne.w	884ec <_svfprintf_r+0x890>
   88f88:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88f8a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88f8e:	f7fe bffd 	b.w	87f8c <_svfprintf_r+0x330>
   88f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88f94:	990a      	ldr	r1, [sp, #40]	; 0x28
   88f96:	f853 2b04 	ldr.w	r2, [r3], #4
   88f9a:	465f      	mov	r7, fp
   88f9c:	6011      	str	r1, [r2, #0]
   88f9e:	930e      	str	r3, [sp, #56]	; 0x38
   88fa0:	f7ff b82a 	b.w	87ff8 <_svfprintf_r+0x39c>
   88fa4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88fa6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88fa8:	3301      	adds	r3, #1
   88faa:	9818      	ldr	r0, [sp, #96]	; 0x60
   88fac:	440c      	add	r4, r1
   88fae:	2b07      	cmp	r3, #7
   88fb0:	e9c8 0100 	strd	r0, r1, [r8]
   88fb4:	942c      	str	r4, [sp, #176]	; 0xb0
   88fb6:	932b      	str	r3, [sp, #172]	; 0xac
   88fb8:	f300 80ac 	bgt.w	89114 <_svfprintf_r+0x14b8>
   88fbc:	f108 0808 	add.w	r8, r8, #8
   88fc0:	2a00      	cmp	r2, #0
   88fc2:	f6bf ab85 	bge.w	886d0 <_svfprintf_r+0xa74>
   88fc6:	4255      	negs	r5, r2
   88fc8:	3210      	adds	r2, #16
   88fca:	f280 83d3 	bge.w	89774 <_svfprintf_r+0x1b18>
   88fce:	4651      	mov	r1, sl
   88fd0:	4a7f      	ldr	r2, [pc, #508]	; (891d0 <_svfprintf_r+0x1574>)
   88fd2:	46ca      	mov	sl, r9
   88fd4:	9709      	str	r7, [sp, #36]	; 0x24
   88fd6:	2610      	movs	r6, #16
   88fd8:	4617      	mov	r7, r2
   88fda:	4689      	mov	r9, r1
   88fdc:	920f      	str	r2, [sp, #60]	; 0x3c
   88fde:	e005      	b.n	88fec <_svfprintf_r+0x1390>
   88fe0:	f108 0808 	add.w	r8, r8, #8
   88fe4:	3d10      	subs	r5, #16
   88fe6:	2d10      	cmp	r5, #16
   88fe8:	f340 82aa 	ble.w	89540 <_svfprintf_r+0x18e4>
   88fec:	3301      	adds	r3, #1
   88fee:	3410      	adds	r4, #16
   88ff0:	2b07      	cmp	r3, #7
   88ff2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88ff6:	e9c8 7600 	strd	r7, r6, [r8]
   88ffa:	ddf1      	ble.n	88fe0 <_svfprintf_r+0x1384>
   88ffc:	4649      	mov	r1, r9
   88ffe:	4650      	mov	r0, sl
   89000:	aa2a      	add	r2, sp, #168	; 0xa8
   89002:	f004 fa77 	bl	8d4f4 <__ssprint_r>
   89006:	2800      	cmp	r0, #0
   89008:	f040 825f 	bne.w	894ca <_svfprintf_r+0x186e>
   8900c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89010:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89014:	e7e6      	b.n	88fe4 <_svfprintf_r+0x1388>
   89016:	4638      	mov	r0, r7
   89018:	f004 fa0a 	bl	8d430 <strlen>
   8901c:	462b      	mov	r3, r5
   8901e:	4602      	mov	r2, r0
   89020:	9509      	str	r5, [sp, #36]	; 0x24
   89022:	f7ff b894 	b.w	8814e <_svfprintf_r+0x4f2>
   89026:	9b07      	ldr	r3, [sp, #28]
   89028:	2500      	movs	r5, #0
   8902a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8902e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89030:	f853 4b04 	ldr.w	r4, [r3], #4
   89034:	930e      	str	r3, [sp, #56]	; 0x38
   89036:	bf18      	it	ne
   89038:	b2e4      	uxtbne	r4, r4
   8903a:	f7fe bf1b 	b.w	87e74 <_svfprintf_r+0x218>
   8903e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   89040:	9b08      	ldr	r3, [sp, #32]
   89042:	f852 4b04 	ldr.w	r4, [r2], #4
   89046:	f413 7f00 	tst.w	r3, #512	; 0x200
   8904a:	f04f 0500 	mov.w	r5, #0
   8904e:	f04f 0301 	mov.w	r3, #1
   89052:	920e      	str	r2, [sp, #56]	; 0x38
   89054:	bf18      	it	ne
   89056:	b2e4      	uxtbne	r4, r4
   89058:	f7fe bf11 	b.w	87e7e <_svfprintf_r+0x222>
   8905c:	9b07      	ldr	r3, [sp, #28]
   8905e:	f413 7f00 	tst.w	r3, #512	; 0x200
   89062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89064:	f853 4b04 	ldr.w	r4, [r3], #4
   89068:	bf18      	it	ne
   8906a:	b264      	sxtbne	r4, r4
   8906c:	17e5      	asrs	r5, r4, #31
   8906e:	930e      	str	r3, [sp, #56]	; 0x38
   89070:	4622      	mov	r2, r4
   89072:	462b      	mov	r3, r5
   89074:	f7fe bed4 	b.w	87e20 <_svfprintf_r+0x1c4>
   89078:	9b07      	ldr	r3, [sp, #28]
   8907a:	2500      	movs	r5, #0
   8907c:	f413 7f00 	tst.w	r3, #512	; 0x200
   89080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89082:	f853 4b04 	ldr.w	r4, [r3], #4
   89086:	930e      	str	r3, [sp, #56]	; 0x38
   89088:	bf18      	it	ne
   8908a:	b2e4      	uxtbne	r4, r4
   8908c:	e5a6      	b.n	88bdc <_svfprintf_r+0xf80>
   8908e:	4b50      	ldr	r3, [pc, #320]	; (891d0 <_svfprintf_r+0x1574>)
   89090:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   89092:	930f      	str	r3, [sp, #60]	; 0x3c
   89094:	f7ff ba15 	b.w	884c2 <_svfprintf_r+0x866>
   89098:	232d      	movs	r3, #45	; 0x2d
   8909a:	461a      	mov	r2, r3
   8909c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   890a0:	f7fe bfee 	b.w	88080 <_svfprintf_r+0x424>
   890a4:	464a      	mov	r2, r9
   890a6:	46d1      	mov	r9, sl
   890a8:	4692      	mov	sl, r2
   890aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
   890ac:	3301      	adds	r3, #1
   890ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   890b0:	442c      	add	r4, r5
   890b2:	2b07      	cmp	r3, #7
   890b4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   890b8:	e9c8 2500 	strd	r2, r5, [r8]
   890bc:	dc3b      	bgt.n	89136 <_svfprintf_r+0x14da>
   890be:	f108 0808 	add.w	r8, r8, #8
   890c2:	f7ff bb8c 	b.w	887de <_svfprintf_r+0xb82>
   890c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   890c8:	991c      	ldr	r1, [sp, #112]	; 0x70
   890ca:	1aff      	subs	r7, r7, r3
   890cc:	461a      	mov	r2, r3
   890ce:	4638      	mov	r0, r7
   890d0:	f004 f9dc 	bl	8d48c <strncpy>
   890d4:	f898 3001 	ldrb.w	r3, [r8, #1]
   890d8:	b10b      	cbz	r3, 890de <_svfprintf_r+0x1482>
   890da:	f108 0801 	add.w	r8, r8, #1
   890de:	220a      	movs	r2, #10
   890e0:	2300      	movs	r3, #0
   890e2:	4620      	mov	r0, r4
   890e4:	4629      	mov	r1, r5
   890e6:	f7fe fa45 	bl	87574 <__aeabi_uldivmod>
   890ea:	f04f 0b00 	mov.w	fp, #0
   890ee:	e6a6      	b.n	88e3e <_svfprintf_r+0x11e2>
   890f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   890f2:	18bd      	adds	r5, r7, r2
   890f4:	1bad      	subs	r5, r5, r6
   890f6:	1ad3      	subs	r3, r2, r3
   890f8:	429d      	cmp	r5, r3
   890fa:	bfa8      	it	ge
   890fc:	461d      	movge	r5, r3
   890fe:	f7ff bba0 	b.w	88842 <_svfprintf_r+0xbe6>
   89102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89104:	990a      	ldr	r1, [sp, #40]	; 0x28
   89106:	f853 2b04 	ldr.w	r2, [r3], #4
   8910a:	465f      	mov	r7, fp
   8910c:	8011      	strh	r1, [r2, #0]
   8910e:	930e      	str	r3, [sp, #56]	; 0x38
   89110:	f7fe bf72 	b.w	87ff8 <_svfprintf_r+0x39c>
   89114:	4651      	mov	r1, sl
   89116:	4648      	mov	r0, r9
   89118:	aa2a      	add	r2, sp, #168	; 0xa8
   8911a:	f004 f9eb 	bl	8d4f4 <__ssprint_r>
   8911e:	2800      	cmp	r0, #0
   89120:	f47f a9e4 	bne.w	884ec <_svfprintf_r+0x890>
   89124:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89128:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8912a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8912e:	e747      	b.n	88fc0 <_svfprintf_r+0x1364>
   89130:	2306      	movs	r3, #6
   89132:	9309      	str	r3, [sp, #36]	; 0x24
   89134:	e482      	b.n	88a3c <_svfprintf_r+0xde0>
   89136:	4651      	mov	r1, sl
   89138:	4648      	mov	r0, r9
   8913a:	aa2a      	add	r2, sp, #168	; 0xa8
   8913c:	f004 f9da 	bl	8d4f4 <__ssprint_r>
   89140:	2800      	cmp	r0, #0
   89142:	f47f a9d3 	bne.w	884ec <_svfprintf_r+0x890>
   89146:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89148:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8914c:	f7ff bb47 	b.w	887de <_svfprintf_r+0xb82>
   89150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89152:	971a      	str	r7, [sp, #104]	; 0x68
   89154:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   89156:	4690      	mov	r8, r2
   89158:	18fb      	adds	r3, r7, r3
   8915a:	429e      	cmp	r6, r3
   8915c:	4632      	mov	r2, r6
   8915e:	bf28      	it	cs
   89160:	461a      	movcs	r2, r3
   89162:	4604      	mov	r4, r0
   89164:	4616      	mov	r6, r2
   89166:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8916a:	f7ff bb3f 	b.w	887ec <_svfprintf_r+0xb90>
   8916e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89170:	1cd8      	adds	r0, r3, #3
   89172:	9310      	str	r3, [sp, #64]	; 0x40
   89174:	db02      	blt.n	8917c <_svfprintf_r+0x1520>
   89176:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89178:	4293      	cmp	r3, r2
   8917a:	dd04      	ble.n	89186 <_svfprintf_r+0x152a>
   8917c:	3e02      	subs	r6, #2
   8917e:	f026 0320 	bic.w	r3, r6, #32
   89182:	9308      	str	r3, [sp, #32]
   89184:	e49b      	b.n	88abe <_svfprintf_r+0xe62>
   89186:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89188:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8918a:	428b      	cmp	r3, r1
   8918c:	f2c0 817a 	blt.w	89484 <_svfprintf_r+0x1828>
   89190:	07ea      	lsls	r2, r5, #31
   89192:	f140 8283 	bpl.w	8969c <_svfprintf_r+0x1a40>
   89196:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89198:	4413      	add	r3, r2
   8919a:	930c      	str	r3, [sp, #48]	; 0x30
   8919c:	056e      	lsls	r6, r5, #21
   8919e:	f140 8277 	bpl.w	89690 <_svfprintf_r+0x1a34>
   891a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   891a4:	2b00      	cmp	r3, #0
   891a6:	f300 8210 	bgt.w	895ca <_svfprintf_r+0x196e>
   891aa:	2667      	movs	r6, #103	; 0x67
   891ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   891ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   891b2:	9308      	str	r3, [sp, #32]
   891b4:	2300      	movs	r3, #0
   891b6:	9312      	str	r3, [sp, #72]	; 0x48
   891b8:	9316      	str	r3, [sp, #88]	; 0x58
   891ba:	e4e4      	b.n	88b86 <_svfprintf_r+0xf2a>
   891bc:	222d      	movs	r2, #45	; 0x2d
   891be:	2300      	movs	r3, #0
   891c0:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   891c4:	9309      	str	r3, [sp, #36]	; 0x24
   891c6:	f7fe bf70 	b.w	880aa <_svfprintf_r+0x44e>
   891ca:	bf00      	nop
   891cc:	0008e6a8 	.word	0x0008e6a8
   891d0:	0008e6bc 	.word	0x0008e6bc
   891d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   891d6:	42a3      	cmp	r3, r4
   891d8:	f4bf ac65 	bcs.w	88aa6 <_svfprintf_r+0xe4a>
   891dc:	2130      	movs	r1, #48	; 0x30
   891de:	1c5a      	adds	r2, r3, #1
   891e0:	9228      	str	r2, [sp, #160]	; 0xa0
   891e2:	7019      	strb	r1, [r3, #0]
   891e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   891e6:	429c      	cmp	r4, r3
   891e8:	d8f9      	bhi.n	891de <_svfprintf_r+0x1582>
   891ea:	e45c      	b.n	88aa6 <_svfprintf_r+0xe4a>
   891ec:	4651      	mov	r1, sl
   891ee:	4648      	mov	r0, r9
   891f0:	aa2a      	add	r2, sp, #168	; 0xa8
   891f2:	f004 f97f 	bl	8d4f4 <__ssprint_r>
   891f6:	2800      	cmp	r0, #0
   891f8:	f47f a978 	bne.w	884ec <_svfprintf_r+0x890>
   891fc:	783b      	ldrb	r3, [r7, #0]
   891fe:	982c      	ldr	r0, [sp, #176]	; 0xb0
   89200:	aa2d      	add	r2, sp, #180	; 0xb4
   89202:	441e      	add	r6, r3
   89204:	e5a4      	b.n	88d50 <_svfprintf_r+0x10f4>
   89206:	4651      	mov	r1, sl
   89208:	4648      	mov	r0, r9
   8920a:	aa2a      	add	r2, sp, #168	; 0xa8
   8920c:	f004 f972 	bl	8d4f4 <__ssprint_r>
   89210:	2800      	cmp	r0, #0
   89212:	f47f a96b 	bne.w	884ec <_svfprintf_r+0x890>
   89216:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89218:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8921c:	f7ff bad7 	b.w	887ce <_svfprintf_r+0xb72>
   89220:	4651      	mov	r1, sl
   89222:	4648      	mov	r0, r9
   89224:	aa2a      	add	r2, sp, #168	; 0xa8
   89226:	f004 f965 	bl	8d4f4 <__ssprint_r>
   8922a:	2800      	cmp	r0, #0
   8922c:	f47f a95e 	bne.w	884ec <_svfprintf_r+0x890>
   89230:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89232:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89234:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89238:	f7ff baee 	b.w	88818 <_svfprintf_r+0xbbc>
   8923c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8923e:	a928      	add	r1, sp, #160	; 0xa0
   89240:	e9cd 0400 	strd	r0, r4, [sp]
   89244:	9104      	str	r1, [sp, #16]
   89246:	a825      	add	r0, sp, #148	; 0x94
   89248:	a924      	add	r1, sp, #144	; 0x90
   8924a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8924e:	4648      	mov	r0, r9
   89250:	f001 faca 	bl	8a7e8 <_dtoa_r>
   89254:	2d47      	cmp	r5, #71	; 0x47
   89256:	4607      	mov	r7, r0
   89258:	d119      	bne.n	8928e <_svfprintf_r+0x1632>
   8925a:	9d07      	ldr	r5, [sp, #28]
   8925c:	462b      	mov	r3, r5
   8925e:	07db      	lsls	r3, r3, #31
   89260:	f100 812a 	bmi.w	894b8 <_svfprintf_r+0x185c>
   89264:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89268:	9207      	str	r2, [sp, #28]
   8926a:	2247      	movs	r2, #71	; 0x47
   8926c:	9208      	str	r2, [sp, #32]
   8926e:	e41a      	b.n	88aa6 <_svfprintf_r+0xe4a>
   89270:	2003      	movs	r0, #3
   89272:	9c09      	ldr	r4, [sp, #36]	; 0x24
   89274:	a928      	add	r1, sp, #160	; 0xa0
   89276:	e9cd 0400 	strd	r0, r4, [sp]
   8927a:	9104      	str	r1, [sp, #16]
   8927c:	a825      	add	r0, sp, #148	; 0x94
   8927e:	a924      	add	r1, sp, #144	; 0x90
   89280:	e9cd 1002 	strd	r1, r0, [sp, #8]
   89284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89286:	4648      	mov	r0, r9
   89288:	f001 faae 	bl	8a7e8 <_dtoa_r>
   8928c:	4607      	mov	r7, r0
   8928e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89290:	2d46      	cmp	r5, #70	; 0x46
   89292:	eb07 0403 	add.w	r4, r7, r3
   89296:	f47f abf9 	bne.w	88a8c <_svfprintf_r+0xe30>
   8929a:	783b      	ldrb	r3, [r7, #0]
   8929c:	2b30      	cmp	r3, #48	; 0x30
   8929e:	f000 821c 	beq.w	896da <_svfprintf_r+0x1a7e>
   892a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   892a6:	9d07      	ldr	r5, [sp, #28]
   892a8:	441c      	add	r4, r3
   892aa:	9207      	str	r2, [sp, #28]
   892ac:	f7ff bbf1 	b.w	88a92 <_svfprintf_r+0xe36>
   892b0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   892b4:	f7ff b9c3 	b.w	8863e <_svfprintf_r+0x9e2>
   892b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   892ba:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   892be:	9308      	str	r3, [sp, #32]
   892c0:	930c      	str	r3, [sp, #48]	; 0x30
   892c2:	9009      	str	r0, [sp, #36]	; 0x24
   892c4:	940e      	str	r4, [sp, #56]	; 0x38
   892c6:	9012      	str	r0, [sp, #72]	; 0x48
   892c8:	9016      	str	r0, [sp, #88]	; 0x58
   892ca:	9010      	str	r0, [sp, #64]	; 0x40
   892cc:	f7fe beea 	b.w	880a4 <_svfprintf_r+0x448>
   892d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   892d2:	2a00      	cmp	r2, #0
   892d4:	9210      	str	r2, [sp, #64]	; 0x40
   892d6:	f340 821b 	ble.w	89710 <_svfprintf_r+0x1ab4>
   892da:	9909      	ldr	r1, [sp, #36]	; 0x24
   892dc:	f005 0301 	and.w	r3, r5, #1
   892e0:	430b      	orrs	r3, r1
   892e2:	f040 819a 	bne.w	8961a <_svfprintf_r+0x19be>
   892e6:	2666      	movs	r6, #102	; 0x66
   892e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   892ea:	930c      	str	r3, [sp, #48]	; 0x30
   892ec:	056a      	lsls	r2, r5, #21
   892ee:	f100 816d 	bmi.w	895cc <_svfprintf_r+0x1970>
   892f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   892f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   892f8:	9308      	str	r3, [sp, #32]
   892fa:	e75b      	b.n	891b4 <_svfprintf_r+0x1558>
   892fc:	4651      	mov	r1, sl
   892fe:	4648      	mov	r0, r9
   89300:	aa2a      	add	r2, sp, #168	; 0xa8
   89302:	f004 f8f7 	bl	8d4f4 <__ssprint_r>
   89306:	2800      	cmp	r0, #0
   89308:	f47f a8f0 	bne.w	884ec <_svfprintf_r+0x890>
   8930c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8930e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   89310:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   89312:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89316:	1ad3      	subs	r3, r2, r3
   89318:	f7ff ba93 	b.w	88842 <_svfprintf_r+0xbe6>
   8931c:	2330      	movs	r3, #48	; 0x30
   8931e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   89322:	2358      	movs	r3, #88	; 0x58
   89324:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   89328:	9b07      	ldr	r3, [sp, #28]
   8932a:	f043 0402 	orr.w	r4, r3, #2
   8932e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89330:	2b63      	cmp	r3, #99	; 0x63
   89332:	f300 80f2 	bgt.w	8951a <_svfprintf_r+0x18be>
   89336:	2300      	movs	r3, #0
   89338:	af3d      	add	r7, sp, #244	; 0xf4
   8933a:	930d      	str	r3, [sp, #52]	; 0x34
   8933c:	9b07      	ldr	r3, [sp, #28]
   8933e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   89342:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   89346:	9312      	str	r3, [sp, #72]	; 0x48
   89348:	4613      	mov	r3, r2
   8934a:	2b00      	cmp	r3, #0
   8934c:	f026 0520 	bic.w	r5, r6, #32
   89350:	9407      	str	r4, [sp, #28]
   89352:	f2c0 808d 	blt.w	89470 <_svfprintf_r+0x1814>
   89356:	930f      	str	r3, [sp, #60]	; 0x3c
   89358:	2300      	movs	r3, #0
   8935a:	9508      	str	r5, [sp, #32]
   8935c:	910c      	str	r1, [sp, #48]	; 0x30
   8935e:	931e      	str	r3, [sp, #120]	; 0x78
   89360:	2e61      	cmp	r6, #97	; 0x61
   89362:	f000 817d 	beq.w	89660 <_svfprintf_r+0x1a04>
   89366:	2e41      	cmp	r6, #65	; 0x41
   89368:	f47f ab77 	bne.w	88a5a <_svfprintf_r+0xdfe>
   8936c:	aa24      	add	r2, sp, #144	; 0x90
   8936e:	980c      	ldr	r0, [sp, #48]	; 0x30
   89370:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89372:	f003 ffcd 	bl	8d310 <frexp>
   89376:	2200      	movs	r2, #0
   89378:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   8937c:	f004 fd54 	bl	8de28 <__aeabi_dmul>
   89380:	4604      	mov	r4, r0
   89382:	460d      	mov	r5, r1
   89384:	2200      	movs	r2, #0
   89386:	2300      	movs	r3, #0
   89388:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   8938c:	f004 ffb4 	bl	8e2f8 <__aeabi_dcmpeq>
   89390:	b108      	cbz	r0, 89396 <_svfprintf_r+0x173a>
   89392:	2301      	movs	r3, #1
   89394:	9324      	str	r3, [sp, #144]	; 0x90
   89396:	4bae      	ldr	r3, [pc, #696]	; (89650 <_svfprintf_r+0x19f4>)
   89398:	930c      	str	r3, [sp, #48]	; 0x30
   8939a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8939c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   893a0:	3b01      	subs	r3, #1
   893a2:	9613      	str	r6, [sp, #76]	; 0x4c
   893a4:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   893a8:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   893ac:	9721      	str	r7, [sp, #132]	; 0x84
   893ae:	46ba      	mov	sl, r7
   893b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   893b4:	4699      	mov	r9, r3
   893b6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   893ba:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   893be:	e006      	b.n	893ce <_svfprintf_r+0x1772>
   893c0:	2200      	movs	r2, #0
   893c2:	2300      	movs	r3, #0
   893c4:	f004 ff98 	bl	8e2f8 <__aeabi_dcmpeq>
   893c8:	f109 39ff 	add.w	r9, r9, #4294967295
   893cc:	b9e8      	cbnz	r0, 8940a <_svfprintf_r+0x17ae>
   893ce:	2200      	movs	r2, #0
   893d0:	4ba0      	ldr	r3, [pc, #640]	; (89654 <_svfprintf_r+0x19f8>)
   893d2:	4630      	mov	r0, r6
   893d4:	4639      	mov	r1, r7
   893d6:	f004 fd27 	bl	8de28 <__aeabi_dmul>
   893da:	460d      	mov	r5, r1
   893dc:	4604      	mov	r4, r0
   893de:	f004 ffd3 	bl	8e388 <__aeabi_d2iz>
   893e2:	4680      	mov	r8, r0
   893e4:	f004 fcb6 	bl	8dd54 <__aeabi_i2d>
   893e8:	460b      	mov	r3, r1
   893ea:	4602      	mov	r2, r0
   893ec:	4629      	mov	r1, r5
   893ee:	4620      	mov	r0, r4
   893f0:	f004 fb62 	bl	8dab8 <__aeabi_dsub>
   893f4:	f81b 3008 	ldrb.w	r3, [fp, r8]
   893f8:	f1b9 3fff 	cmp.w	r9, #4294967295
   893fc:	4655      	mov	r5, sl
   893fe:	4606      	mov	r6, r0
   89400:	460f      	mov	r7, r1
   89402:	464c      	mov	r4, r9
   89404:	f80a 3b01 	strb.w	r3, [sl], #1
   89408:	d1da      	bne.n	893c0 <_svfprintf_r+0x1764>
   8940a:	4630      	mov	r0, r6
   8940c:	4639      	mov	r1, r7
   8940e:	2200      	movs	r2, #0
   89410:	4b91      	ldr	r3, [pc, #580]	; (89658 <_svfprintf_r+0x19fc>)
   89412:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   89416:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   89418:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8941c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   89420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89424:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   89428:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8942c:	9f21      	ldr	r7, [sp, #132]	; 0x84
   8942e:	f004 ff8b 	bl	8e348 <__aeabi_dcmpgt>
   89432:	2800      	cmp	r0, #0
   89434:	d155      	bne.n	894e2 <_svfprintf_r+0x1886>
   89436:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8943a:	2200      	movs	r2, #0
   8943c:	4b86      	ldr	r3, [pc, #536]	; (89658 <_svfprintf_r+0x19fc>)
   8943e:	f004 ff5b 	bl	8e2f8 <__aeabi_dcmpeq>
   89442:	b110      	cbz	r0, 8944a <_svfprintf_r+0x17ee>
   89444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89446:	07db      	lsls	r3, r3, #31
   89448:	d44b      	bmi.n	894e2 <_svfprintf_r+0x1886>
   8944a:	2c00      	cmp	r4, #0
   8944c:	db08      	blt.n	89460 <_svfprintf_r+0x1804>
   8944e:	2230      	movs	r2, #48	; 0x30
   89450:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89452:	1c63      	adds	r3, r4, #1
   89454:	440b      	add	r3, r1
   89456:	f801 2b01 	strb.w	r2, [r1], #1
   8945a:	428b      	cmp	r3, r1
   8945c:	d1fb      	bne.n	89456 <_svfprintf_r+0x17fa>
   8945e:	910f      	str	r1, [sp, #60]	; 0x3c
   89460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89462:	9d07      	ldr	r5, [sp, #28]
   89464:	1bdb      	subs	r3, r3, r7
   89466:	9313      	str	r3, [sp, #76]	; 0x4c
   89468:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8946a:	9307      	str	r3, [sp, #28]
   8946c:	f7ff bb1d 	b.w	88aaa <_svfprintf_r+0xe4e>
   89470:	9508      	str	r5, [sp, #32]
   89472:	232d      	movs	r3, #45	; 0x2d
   89474:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   89478:	931e      	str	r3, [sp, #120]	; 0x78
   8947a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   8947e:	910c      	str	r1, [sp, #48]	; 0x30
   89480:	930f      	str	r3, [sp, #60]	; 0x3c
   89482:	e76d      	b.n	89360 <_svfprintf_r+0x1704>
   89484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   89488:	189a      	adds	r2, r3, r2
   8948a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8948c:	920c      	str	r2, [sp, #48]	; 0x30
   8948e:	2b00      	cmp	r3, #0
   89490:	f340 811a 	ble.w	896c8 <_svfprintf_r+0x1a6c>
   89494:	2667      	movs	r6, #103	; 0x67
   89496:	e729      	b.n	892ec <_svfprintf_r+0x1690>
   89498:	2300      	movs	r3, #0
   8949a:	9309      	str	r3, [sp, #36]	; 0x24
   8949c:	f7fe bc2b 	b.w	87cf6 <_svfprintf_r+0x9a>
   894a0:	4648      	mov	r0, r9
   894a2:	4651      	mov	r1, sl
   894a4:	aa2a      	add	r2, sp, #168	; 0xa8
   894a6:	f004 f825 	bl	8d4f4 <__ssprint_r>
   894aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   894ae:	f7fe bdae 	b.w	8800e <_svfprintf_r+0x3b2>
   894b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   894b4:	f7ff b95f 	b.w	88776 <_svfprintf_r+0xb1a>
   894b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   894ba:	9d07      	ldr	r5, [sp, #28]
   894bc:	18fc      	adds	r4, r7, r3
   894be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   894c0:	9307      	str	r3, [sp, #28]
   894c2:	2347      	movs	r3, #71	; 0x47
   894c4:	9308      	str	r3, [sp, #32]
   894c6:	f7ff bae4 	b.w	88a92 <_svfprintf_r+0xe36>
   894ca:	46cb      	mov	fp, r9
   894cc:	46d1      	mov	r9, sl
   894ce:	f7ff b80e 	b.w	884ee <_svfprintf_r+0x892>
   894d2:	46d1      	mov	r9, sl
   894d4:	f7ff b80b 	b.w	884ee <_svfprintf_r+0x892>
   894d8:	4b60      	ldr	r3, [pc, #384]	; (8965c <_svfprintf_r+0x1a00>)
   894da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   894dc:	930f      	str	r3, [sp, #60]	; 0x3c
   894de:	f7fe bfb7 	b.w	88450 <_svfprintf_r+0x7f4>
   894e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   894e4:	990c      	ldr	r1, [sp, #48]	; 0x30
   894e6:	9528      	str	r5, [sp, #160]	; 0xa0
   894e8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   894ec:	7bc9      	ldrb	r1, [r1, #15]
   894ee:	428a      	cmp	r2, r1
   894f0:	f040 812a 	bne.w	89748 <_svfprintf_r+0x1aec>
   894f4:	2030      	movs	r0, #48	; 0x30
   894f6:	f803 0c01 	strb.w	r0, [r3, #-1]
   894fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   894fc:	1e5a      	subs	r2, r3, #1
   894fe:	9228      	str	r2, [sp, #160]	; 0xa0
   89500:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   89504:	4291      	cmp	r1, r2
   89506:	d0f6      	beq.n	894f6 <_svfprintf_r+0x189a>
   89508:	2a39      	cmp	r2, #57	; 0x39
   8950a:	bf0b      	itete	eq
   8950c:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   8950e:	3201      	addne	r2, #1
   89510:	7a92      	ldrbeq	r2, [r2, #10]
   89512:	b2d2      	uxtbne	r2, r2
   89514:	f803 2c01 	strb.w	r2, [r3, #-1]
   89518:	e7a2      	b.n	89460 <_svfprintf_r+0x1804>
   8951a:	4648      	mov	r0, r9
   8951c:	1c59      	adds	r1, r3, #1
   8951e:	f002 fe11 	bl	8c144 <_malloc_r>
   89522:	4607      	mov	r7, r0
   89524:	2800      	cmp	r0, #0
   89526:	f000 811d 	beq.w	89764 <_svfprintf_r+0x1b08>
   8952a:	900d      	str	r0, [sp, #52]	; 0x34
   8952c:	e706      	b.n	8933c <_svfprintf_r+0x16e0>
   8952e:	2330      	movs	r3, #48	; 0x30
   89530:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   89534:	2378      	movs	r3, #120	; 0x78
   89536:	e6f5      	b.n	89324 <_svfprintf_r+0x16c8>
   89538:	9b07      	ldr	r3, [sp, #28]
   8953a:	9308      	str	r3, [sp, #32]
   8953c:	f7ff b894 	b.w	88668 <_svfprintf_r+0xa0c>
   89540:	464a      	mov	r2, r9
   89542:	46d1      	mov	r9, sl
   89544:	4692      	mov	sl, r2
   89546:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89548:	3301      	adds	r3, #1
   8954a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8954c:	442c      	add	r4, r5
   8954e:	2b07      	cmp	r3, #7
   89550:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   89554:	e9c8 2500 	strd	r2, r5, [r8]
   89558:	f77f a8b8 	ble.w	886cc <_svfprintf_r+0xa70>
   8955c:	4651      	mov	r1, sl
   8955e:	4648      	mov	r0, r9
   89560:	aa2a      	add	r2, sp, #168	; 0xa8
   89562:	f003 ffc7 	bl	8d4f4 <__ssprint_r>
   89566:	2800      	cmp	r0, #0
   89568:	f47e afc0 	bne.w	884ec <_svfprintf_r+0x890>
   8956c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   89570:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   89574:	f7ff b8ac 	b.w	886d0 <_svfprintf_r+0xa74>
   89578:	2b00      	cmp	r3, #0
   8957a:	bf08      	it	eq
   8957c:	2301      	moveq	r3, #1
   8957e:	9309      	str	r3, [sp, #36]	; 0x24
   89580:	9b07      	ldr	r3, [sp, #28]
   89582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   89586:	9312      	str	r3, [sp, #72]	; 0x48
   89588:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8958a:	2b00      	cmp	r3, #0
   8958c:	930c      	str	r3, [sp, #48]	; 0x30
   8958e:	f2c0 80bd 	blt.w	8970c <_svfprintf_r+0x1ab0>
   89592:	2402      	movs	r4, #2
   89594:	9d09      	ldr	r5, [sp, #36]	; 0x24
   89596:	a828      	add	r0, sp, #160	; 0xa0
   89598:	aa25      	add	r2, sp, #148	; 0x94
   8959a:	ab24      	add	r3, sp, #144	; 0x90
   8959c:	e9cd 2003 	strd	r2, r0, [sp, #12]
   895a0:	e9cd 4500 	strd	r4, r5, [sp]
   895a4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   895a8:	9302      	str	r3, [sp, #8]
   895aa:	4622      	mov	r2, r4
   895ac:	462b      	mov	r3, r5
   895ae:	4648      	mov	r0, r9
   895b0:	911e      	str	r1, [sp, #120]	; 0x78
   895b2:	f001 f919 	bl	8a7e8 <_dtoa_r>
   895b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   895b8:	4607      	mov	r7, r0
   895ba:	930f      	str	r3, [sp, #60]	; 0x3c
   895bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   895be:	940c      	str	r4, [sp, #48]	; 0x30
   895c0:	930d      	str	r3, [sp, #52]	; 0x34
   895c2:	e64a      	b.n	8925a <_svfprintf_r+0x15fe>
   895c4:	2300      	movs	r3, #0
   895c6:	930d      	str	r3, [sp, #52]	; 0x34
   895c8:	e753      	b.n	89472 <_svfprintf_r+0x1816>
   895ca:	2667      	movs	r6, #103	; 0x67
   895cc:	991a      	ldr	r1, [sp, #104]	; 0x68
   895ce:	780b      	ldrb	r3, [r1, #0]
   895d0:	2bff      	cmp	r3, #255	; 0xff
   895d2:	f000 80de 	beq.w	89792 <_svfprintf_r+0x1b36>
   895d6:	2400      	movs	r4, #0
   895d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   895da:	4620      	mov	r0, r4
   895dc:	e003      	b.n	895e6 <_svfprintf_r+0x198a>
   895de:	3001      	adds	r0, #1
   895e0:	3101      	adds	r1, #1
   895e2:	2bff      	cmp	r3, #255	; 0xff
   895e4:	d008      	beq.n	895f8 <_svfprintf_r+0x199c>
   895e6:	4293      	cmp	r3, r2
   895e8:	da06      	bge.n	895f8 <_svfprintf_r+0x199c>
   895ea:	1ad2      	subs	r2, r2, r3
   895ec:	784b      	ldrb	r3, [r1, #1]
   895ee:	2b00      	cmp	r3, #0
   895f0:	d1f5      	bne.n	895de <_svfprintf_r+0x1982>
   895f2:	780b      	ldrb	r3, [r1, #0]
   895f4:	3401      	adds	r4, #1
   895f6:	e7f4      	b.n	895e2 <_svfprintf_r+0x1986>
   895f8:	911a      	str	r1, [sp, #104]	; 0x68
   895fa:	9210      	str	r2, [sp, #64]	; 0x40
   895fc:	9016      	str	r0, [sp, #88]	; 0x58
   895fe:	9412      	str	r4, [sp, #72]	; 0x48
   89600:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89602:	9b16      	ldr	r3, [sp, #88]	; 0x58
   89604:	990c      	ldr	r1, [sp, #48]	; 0x30
   89606:	4413      	add	r3, r2
   89608:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   8960a:	fb02 1303 	mla	r3, r2, r3, r1
   8960e:	930c      	str	r3, [sp, #48]	; 0x30
   89610:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   89614:	9308      	str	r3, [sp, #32]
   89616:	f7ff bab6 	b.w	88b86 <_svfprintf_r+0xf2a>
   8961a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8961c:	2666      	movs	r6, #102	; 0x66
   8961e:	18d3      	adds	r3, r2, r3
   89620:	4419      	add	r1, r3
   89622:	910c      	str	r1, [sp, #48]	; 0x30
   89624:	e662      	b.n	892ec <_svfprintf_r+0x1690>
   89626:	f106 020f 	add.w	r2, r6, #15
   8962a:	2101      	movs	r1, #1
   8962c:	b2d2      	uxtb	r2, r2
   8962e:	f7ff ba4f 	b.w	88ad0 <_svfprintf_r+0xe74>
   89632:	2900      	cmp	r1, #0
   89634:	d167      	bne.n	89706 <_svfprintf_r+0x1aaa>
   89636:	2230      	movs	r2, #48	; 0x30
   89638:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   8963c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   89640:	3330      	adds	r3, #48	; 0x30
   89642:	f802 3b01 	strb.w	r3, [r2], #1
   89646:	ab26      	add	r3, sp, #152	; 0x98
   89648:	1ad3      	subs	r3, r2, r3
   8964a:	931b      	str	r3, [sp, #108]	; 0x6c
   8964c:	f7ff ba83 	b.w	88b56 <_svfprintf_r+0xefa>
   89650:	0008e68c 	.word	0x0008e68c
   89654:	40300000 	.word	0x40300000
   89658:	3fe00000 	.word	0x3fe00000
   8965c:	0008e6bc 	.word	0x0008e6bc
   89660:	aa24      	add	r2, sp, #144	; 0x90
   89662:	980c      	ldr	r0, [sp, #48]	; 0x30
   89664:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89666:	f003 fe53 	bl	8d310 <frexp>
   8966a:	2200      	movs	r2, #0
   8966c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   89670:	f004 fbda 	bl	8de28 <__aeabi_dmul>
   89674:	4604      	mov	r4, r0
   89676:	460d      	mov	r5, r1
   89678:	2200      	movs	r2, #0
   8967a:	2300      	movs	r3, #0
   8967c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   89680:	f004 fe3a 	bl	8e2f8 <__aeabi_dcmpeq>
   89684:	b108      	cbz	r0, 8968a <_svfprintf_r+0x1a2e>
   89686:	2301      	movs	r3, #1
   89688:	9324      	str	r3, [sp, #144]	; 0x90
   8968a:	4b44      	ldr	r3, [pc, #272]	; (8979c <_svfprintf_r+0x1b40>)
   8968c:	930c      	str	r3, [sp, #48]	; 0x30
   8968e:	e684      	b.n	8939a <_svfprintf_r+0x173e>
   89690:	2667      	movs	r6, #103	; 0x67
   89692:	e62e      	b.n	892f2 <_svfprintf_r+0x1696>
   89694:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89698:	f7fe bcb9 	b.w	8800e <_svfprintf_r+0x3b2>
   8969c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8969e:	930c      	str	r3, [sp, #48]	; 0x30
   896a0:	e57c      	b.n	8919c <_svfprintf_r+0x1540>
   896a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   896a4:	2003      	movs	r0, #3
   896a6:	2b00      	cmp	r3, #0
   896a8:	bfb8      	it	lt
   896aa:	232d      	movlt	r3, #45	; 0x2d
   896ac:	f04f 0100 	mov.w	r1, #0
   896b0:	bfba      	itte	lt
   896b2:	461a      	movlt	r2, r3
   896b4:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   896b8:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   896bc:	4f38      	ldr	r7, [pc, #224]	; (897a0 <_svfprintf_r+0x1b44>)
   896be:	4b39      	ldr	r3, [pc, #228]	; (897a4 <_svfprintf_r+0x1b48>)
   896c0:	9008      	str	r0, [sp, #32]
   896c2:	910d      	str	r1, [sp, #52]	; 0x34
   896c4:	f7fe bce2 	b.w	8808c <_svfprintf_r+0x430>
   896c8:	f1c3 0301 	rsb	r3, r3, #1
   896cc:	441a      	add	r2, r3
   896ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   896d2:	2667      	movs	r6, #103	; 0x67
   896d4:	920c      	str	r2, [sp, #48]	; 0x30
   896d6:	9308      	str	r3, [sp, #32]
   896d8:	e56c      	b.n	891b4 <_svfprintf_r+0x1558>
   896da:	2200      	movs	r2, #0
   896dc:	2300      	movs	r3, #0
   896de:	980c      	ldr	r0, [sp, #48]	; 0x30
   896e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   896e2:	f004 fe09 	bl	8e2f8 <__aeabi_dcmpeq>
   896e6:	2800      	cmp	r0, #0
   896e8:	f47f addb 	bne.w	892a2 <_svfprintf_r+0x1646>
   896ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   896ee:	f1c3 0301 	rsb	r3, r3, #1
   896f2:	9324      	str	r3, [sp, #144]	; 0x90
   896f4:	e5d6      	b.n	892a4 <_svfprintf_r+0x1648>
   896f6:	992b      	ldr	r1, [sp, #172]	; 0xac
   896f8:	f7ff bb59 	b.w	88dae <_svfprintf_r+0x1152>
   896fc:	07e9      	lsls	r1, r5, #31
   896fe:	f57f aa35 	bpl.w	88b6c <_svfprintf_r+0xf10>
   89702:	f7ff ba2f 	b.w	88b64 <_svfprintf_r+0xf08>
   89706:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8970a:	e799      	b.n	89640 <_svfprintf_r+0x19e4>
   8970c:	900d      	str	r0, [sp, #52]	; 0x34
   8970e:	e6b0      	b.n	89472 <_svfprintf_r+0x1816>
   89710:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89712:	f005 0501 	and.w	r5, r5, #1
   89716:	4613      	mov	r3, r2
   89718:	432b      	orrs	r3, r5
   8971a:	d104      	bne.n	89726 <_svfprintf_r+0x1aca>
   8971c:	2301      	movs	r3, #1
   8971e:	2666      	movs	r6, #102	; 0x66
   89720:	9308      	str	r3, [sp, #32]
   89722:	930c      	str	r3, [sp, #48]	; 0x30
   89724:	e546      	b.n	891b4 <_svfprintf_r+0x1558>
   89726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   89728:	2666      	movs	r6, #102	; 0x66
   8972a:	3301      	adds	r3, #1
   8972c:	441a      	add	r2, r3
   8972e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   89732:	920c      	str	r2, [sp, #48]	; 0x30
   89734:	9308      	str	r3, [sp, #32]
   89736:	e53d      	b.n	891b4 <_svfprintf_r+0x1558>
   89738:	4b1b      	ldr	r3, [pc, #108]	; (897a8 <_svfprintf_r+0x1b4c>)
   8973a:	930f      	str	r3, [sp, #60]	; 0x3c
   8973c:	f7ff bbe9 	b.w	88f12 <_svfprintf_r+0x12b6>
   89740:	4a19      	ldr	r2, [pc, #100]	; (897a8 <_svfprintf_r+0x1b4c>)
   89742:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   89744:	920f      	str	r2, [sp, #60]	; 0x3c
   89746:	e4b1      	b.n	890ac <_svfprintf_r+0x1450>
   89748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8974a:	e6dd      	b.n	89508 <_svfprintf_r+0x18ac>
   8974c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8974e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   89752:	f853 0b04 	ldr.w	r0, [r3], #4
   89756:	4693      	mov	fp, r2
   89758:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8975c:	9009      	str	r0, [sp, #36]	; 0x24
   8975e:	930e      	str	r3, [sp, #56]	; 0x38
   89760:	f7fe bac7 	b.w	87cf2 <_svfprintf_r+0x96>
   89764:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   89768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8976c:	f8aa 300c 	strh.w	r3, [sl, #12]
   89770:	f7fe bc4d 	b.w	8800e <_svfprintf_r+0x3b2>
   89774:	4a0c      	ldr	r2, [pc, #48]	; (897a8 <_svfprintf_r+0x1b4c>)
   89776:	920f      	str	r2, [sp, #60]	; 0x3c
   89778:	e6e6      	b.n	89548 <_svfprintf_r+0x18ec>
   8977a:	230c      	movs	r3, #12
   8977c:	f04f 32ff 	mov.w	r2, #4294967295
   89780:	f8c9 3000 	str.w	r3, [r9]
   89784:	920a      	str	r2, [sp, #40]	; 0x28
   89786:	f7fe bc49 	b.w	8801c <_svfprintf_r+0x3c0>
   8978a:	2302      	movs	r3, #2
   8978c:	931b      	str	r3, [sp, #108]	; 0x6c
   8978e:	f7ff b9e2 	b.w	88b56 <_svfprintf_r+0xefa>
   89792:	2300      	movs	r3, #0
   89794:	9312      	str	r3, [sp, #72]	; 0x48
   89796:	9316      	str	r3, [sp, #88]	; 0x58
   89798:	e732      	b.n	89600 <_svfprintf_r+0x19a4>
   8979a:	bf00      	nop
   8979c:	0008e678 	.word	0x0008e678
   897a0:	0008e670 	.word	0x0008e670
   897a4:	0008e674 	.word	0x0008e674
   897a8:	0008e6bc 	.word	0x0008e6bc

000897ac <__sprint_r.part.0>:
   897ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   897b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   897b2:	4690      	mov	r8, r2
   897b4:	049c      	lsls	r4, r3, #18
   897b6:	d52d      	bpl.n	89814 <__sprint_r.part.0+0x68>
   897b8:	6893      	ldr	r3, [r2, #8]
   897ba:	6812      	ldr	r2, [r2, #0]
   897bc:	b343      	cbz	r3, 89810 <__sprint_r.part.0+0x64>
   897be:	468b      	mov	fp, r1
   897c0:	4606      	mov	r6, r0
   897c2:	f102 0908 	add.w	r9, r2, #8
   897c6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   897ca:	ea5f 079a 	movs.w	r7, sl, lsr #2
   897ce:	d015      	beq.n	897fc <__sprint_r.part.0+0x50>
   897d0:	2400      	movs	r4, #0
   897d2:	3d04      	subs	r5, #4
   897d4:	e001      	b.n	897da <__sprint_r.part.0+0x2e>
   897d6:	42a7      	cmp	r7, r4
   897d8:	d00e      	beq.n	897f8 <__sprint_r.part.0+0x4c>
   897da:	465a      	mov	r2, fp
   897dc:	4630      	mov	r0, r6
   897de:	f855 1f04 	ldr.w	r1, [r5, #4]!
   897e2:	f002 f8f9 	bl	8b9d8 <_fputwc_r>
   897e6:	1c43      	adds	r3, r0, #1
   897e8:	f104 0401 	add.w	r4, r4, #1
   897ec:	d1f3      	bne.n	897d6 <__sprint_r.part.0+0x2a>
   897ee:	2300      	movs	r3, #0
   897f0:	e9c8 3301 	strd	r3, r3, [r8, #4]
   897f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   897fc:	f02a 0a03 	bic.w	sl, sl, #3
   89800:	eba3 030a 	sub.w	r3, r3, sl
   89804:	f8c8 3008 	str.w	r3, [r8, #8]
   89808:	f109 0908 	add.w	r9, r9, #8
   8980c:	2b00      	cmp	r3, #0
   8980e:	d1da      	bne.n	897c6 <__sprint_r.part.0+0x1a>
   89810:	2000      	movs	r0, #0
   89812:	e7ec      	b.n	897ee <__sprint_r.part.0+0x42>
   89814:	f002 fa6a 	bl	8bcec <__sfvwrite_r>
   89818:	2300      	movs	r3, #0
   8981a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8981e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89822:	bf00      	nop

00089824 <_vfiprintf_r>:
   89824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89828:	b0bb      	sub	sp, #236	; 0xec
   8982a:	461c      	mov	r4, r3
   8982c:	4689      	mov	r9, r1
   8982e:	4690      	mov	r8, r2
   89830:	e9cd 3004 	strd	r3, r0, [sp, #16]
   89834:	b118      	cbz	r0, 8983e <_vfiprintf_r+0x1a>
   89836:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89838:	2b00      	cmp	r3, #0
   8983a:	f000 827a 	beq.w	89d32 <_vfiprintf_r+0x50e>
   8983e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89842:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   89846:	07de      	lsls	r6, r3, #31
   89848:	b28a      	uxth	r2, r1
   8984a:	d402      	bmi.n	89852 <_vfiprintf_r+0x2e>
   8984c:	058d      	lsls	r5, r1, #22
   8984e:	f140 851a 	bpl.w	8a286 <_vfiprintf_r+0xa62>
   89852:	0490      	lsls	r0, r2, #18
   89854:	d40a      	bmi.n	8986c <_vfiprintf_r+0x48>
   89856:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8985a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8985e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   89862:	f8a9 200c 	strh.w	r2, [r9, #12]
   89866:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   8986a:	b292      	uxth	r2, r2
   8986c:	0711      	lsls	r1, r2, #28
   8986e:	f140 80f6 	bpl.w	89a5e <_vfiprintf_r+0x23a>
   89872:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89876:	2b00      	cmp	r3, #0
   89878:	f000 80f1 	beq.w	89a5e <_vfiprintf_r+0x23a>
   8987c:	f002 031a 	and.w	r3, r2, #26
   89880:	2b0a      	cmp	r3, #10
   89882:	f000 80fa 	beq.w	89a7a <_vfiprintf_r+0x256>
   89886:	2300      	movs	r3, #0
   89888:	46cb      	mov	fp, r9
   8988a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   8988e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   89892:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   89896:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8989a:	9303      	str	r3, [sp, #12]
   8989c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   898a0:	f898 3000 	ldrb.w	r3, [r8]
   898a4:	2b00      	cmp	r3, #0
   898a6:	f000 81ed 	beq.w	89c84 <_vfiprintf_r+0x460>
   898aa:	4644      	mov	r4, r8
   898ac:	e004      	b.n	898b8 <_vfiprintf_r+0x94>
   898ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   898b2:	2b00      	cmp	r3, #0
   898b4:	f000 8127 	beq.w	89b06 <_vfiprintf_r+0x2e2>
   898b8:	2b25      	cmp	r3, #37	; 0x25
   898ba:	d1f8      	bne.n	898ae <_vfiprintf_r+0x8a>
   898bc:	ebb4 0508 	subs.w	r5, r4, r8
   898c0:	f040 8125 	bne.w	89b0e <_vfiprintf_r+0x2ea>
   898c4:	7823      	ldrb	r3, [r4, #0]
   898c6:	2b00      	cmp	r3, #0
   898c8:	f000 81dc 	beq.w	89c84 <_vfiprintf_r+0x460>
   898cc:	f04f 0200 	mov.w	r2, #0
   898d0:	2300      	movs	r3, #0
   898d2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   898d6:	f04f 32ff 	mov.w	r2, #4294967295
   898da:	252b      	movs	r5, #43	; 0x2b
   898dc:	461f      	mov	r7, r3
   898de:	9302      	str	r3, [sp, #8]
   898e0:	7863      	ldrb	r3, [r4, #1]
   898e2:	f104 0801 	add.w	r8, r4, #1
   898e6:	9200      	str	r2, [sp, #0]
   898e8:	f108 0801 	add.w	r8, r8, #1
   898ec:	f1a3 0220 	sub.w	r2, r3, #32
   898f0:	2a5a      	cmp	r2, #90	; 0x5a
   898f2:	f200 8141 	bhi.w	89b78 <_vfiprintf_r+0x354>
   898f6:	e8df f012 	tbh	[pc, r2, lsl #1]
   898fa:	0272      	.short	0x0272
   898fc:	013f013f 	.word	0x013f013f
   89900:	013f026d 	.word	0x013f026d
   89904:	013f013f 	.word	0x013f013f
   89908:	013f024b 	.word	0x013f024b
   8990c:	006a013f 	.word	0x006a013f
   89910:	013f0227 	.word	0x013f0227
   89914:	02310222 	.word	0x02310222
   89918:	022c013f 	.word	0x022c013f
   8991c:	005b005b 	.word	0x005b005b
   89920:	005b005b 	.word	0x005b005b
   89924:	005b005b 	.word	0x005b005b
   89928:	005b005b 	.word	0x005b005b
   8992c:	013f005b 	.word	0x013f005b
   89930:	013f013f 	.word	0x013f013f
   89934:	013f013f 	.word	0x013f013f
   89938:	013f013f 	.word	0x013f013f
   8993c:	013f013f 	.word	0x013f013f
   89940:	007a020e 	.word	0x007a020e
   89944:	013f013f 	.word	0x013f013f
   89948:	013f013f 	.word	0x013f013f
   8994c:	013f013f 	.word	0x013f013f
   89950:	013f013f 	.word	0x013f013f
   89954:	013f013f 	.word	0x013f013f
   89958:	013f00d7 	.word	0x013f00d7
   8995c:	013f013f 	.word	0x013f013f
   89960:	013f01f2 	.word	0x013f01f2
   89964:	013f0297 	.word	0x013f0297
   89968:	0500013f 	.word	0x0500013f
   8996c:	013f013f 	.word	0x013f013f
   89970:	013f013f 	.word	0x013f013f
   89974:	013f013f 	.word	0x013f013f
   89978:	013f013f 	.word	0x013f013f
   8997c:	013f013f 	.word	0x013f013f
   89980:	007c020e 	.word	0x007c020e
   89984:	013f013f 	.word	0x013f013f
   89988:	028a013f 	.word	0x028a013f
   8998c:	0075007c 	.word	0x0075007c
   89990:	027d013f 	.word	0x027d013f
   89994:	02b6013f 	.word	0x02b6013f
   89998:	02a600d9 	.word	0x02a600d9
   8999c:	013f0075 	.word	0x013f0075
   899a0:	007201f2 	.word	0x007201f2
   899a4:	013f04fe 	.word	0x013f04fe
   899a8:	051c013f 	.word	0x051c013f
   899ac:	0072013f 	.word	0x0072013f
   899b0:	2100      	movs	r1, #0
   899b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   899b6:	f818 3b01 	ldrb.w	r3, [r8], #1
   899ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   899be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   899c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   899c6:	2a09      	cmp	r2, #9
   899c8:	d9f5      	bls.n	899b6 <_vfiprintf_r+0x192>
   899ca:	9102      	str	r1, [sp, #8]
   899cc:	e78e      	b.n	898ec <_vfiprintf_r+0xc8>
   899ce:	9b04      	ldr	r3, [sp, #16]
   899d0:	f853 2b04 	ldr.w	r2, [r3], #4
   899d4:	2a00      	cmp	r2, #0
   899d6:	9202      	str	r2, [sp, #8]
   899d8:	9304      	str	r3, [sp, #16]
   899da:	f2c0 81ad 	blt.w	89d38 <_vfiprintf_r+0x514>
   899de:	f898 3000 	ldrb.w	r3, [r8]
   899e2:	e781      	b.n	898e8 <_vfiprintf_r+0xc4>
   899e4:	f898 3000 	ldrb.w	r3, [r8]
   899e8:	f047 0720 	orr.w	r7, r7, #32
   899ec:	e77c      	b.n	898e8 <_vfiprintf_r+0xc4>
   899ee:	f047 0710 	orr.w	r7, r7, #16
   899f2:	06bc      	lsls	r4, r7, #26
   899f4:	f140 8158 	bpl.w	89ca8 <_vfiprintf_r+0x484>
   899f8:	9c04      	ldr	r4, [sp, #16]
   899fa:	3407      	adds	r4, #7
   899fc:	f024 0307 	bic.w	r3, r4, #7
   89a00:	4619      	mov	r1, r3
   89a02:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   89a06:	4614      	mov	r4, r2
   89a08:	461d      	mov	r5, r3
   89a0a:	9104      	str	r1, [sp, #16]
   89a0c:	2a00      	cmp	r2, #0
   89a0e:	f173 0300 	sbcs.w	r3, r3, #0
   89a12:	f2c0 841e 	blt.w	8a252 <_vfiprintf_r+0xa2e>
   89a16:	9b00      	ldr	r3, [sp, #0]
   89a18:	3301      	adds	r3, #1
   89a1a:	f000 84f0 	beq.w	8a3fe <_vfiprintf_r+0xbda>
   89a1e:	ea54 0305 	orrs.w	r3, r4, r5
   89a22:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   89a26:	f000 83fc 	beq.w	8a222 <_vfiprintf_r+0x9fe>
   89a2a:	2d00      	cmp	r5, #0
   89a2c:	bf08      	it	eq
   89a2e:	2c0a      	cmpeq	r4, #10
   89a30:	f080 84a9 	bcs.w	8a386 <_vfiprintf_r+0xb62>
   89a34:	2301      	movs	r3, #1
   89a36:	464f      	mov	r7, r9
   89a38:	3430      	adds	r4, #48	; 0x30
   89a3a:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   89a3e:	9301      	str	r3, [sp, #4]
   89a40:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89a44:	e9dd 2100 	ldrd	r2, r1, [sp]
   89a48:	428a      	cmp	r2, r1
   89a4a:	bfb8      	it	lt
   89a4c:	460a      	movlt	r2, r1
   89a4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89a52:	4615      	mov	r5, r2
   89a54:	2b00      	cmp	r3, #0
   89a56:	f000 809d 	beq.w	89b94 <_vfiprintf_r+0x370>
   89a5a:	3501      	adds	r5, #1
   89a5c:	e09a      	b.n	89b94 <_vfiprintf_r+0x370>
   89a5e:	4649      	mov	r1, r9
   89a60:	9805      	ldr	r0, [sp, #20]
   89a62:	f000 fdb9 	bl	8a5d8 <__swsetup_r>
   89a66:	2800      	cmp	r0, #0
   89a68:	f040 854a 	bne.w	8a500 <_vfiprintf_r+0xcdc>
   89a6c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89a70:	f002 031a 	and.w	r3, r2, #26
   89a74:	2b0a      	cmp	r3, #10
   89a76:	f47f af06 	bne.w	89886 <_vfiprintf_r+0x62>
   89a7a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   89a7e:	2b00      	cmp	r3, #0
   89a80:	f6ff af01 	blt.w	89886 <_vfiprintf_r+0x62>
   89a84:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89a88:	07de      	lsls	r6, r3, #31
   89a8a:	d402      	bmi.n	89a92 <_vfiprintf_r+0x26e>
   89a8c:	0595      	lsls	r5, r2, #22
   89a8e:	f140 850e 	bpl.w	8a4ae <_vfiprintf_r+0xc8a>
   89a92:	4623      	mov	r3, r4
   89a94:	4642      	mov	r2, r8
   89a96:	4649      	mov	r1, r9
   89a98:	9805      	ldr	r0, [sp, #20]
   89a9a:	f000 fd59 	bl	8a550 <__sbprintf>
   89a9e:	9003      	str	r0, [sp, #12]
   89aa0:	9803      	ldr	r0, [sp, #12]
   89aa2:	b03b      	add	sp, #236	; 0xec
   89aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89aa8:	f047 0710 	orr.w	r7, r7, #16
   89aac:	06b8      	lsls	r0, r7, #26
   89aae:	9c04      	ldr	r4, [sp, #16]
   89ab0:	f140 8109 	bpl.w	89cc6 <_vfiprintf_r+0x4a2>
   89ab4:	3407      	adds	r4, #7
   89ab6:	f024 0307 	bic.w	r3, r4, #7
   89aba:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89abe:	9304      	str	r3, [sp, #16]
   89ac0:	2300      	movs	r3, #0
   89ac2:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89ac6:	f04f 0200 	mov.w	r2, #0
   89aca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89ace:	9a00      	ldr	r2, [sp, #0]
   89ad0:	4611      	mov	r1, r2
   89ad2:	3101      	adds	r1, #1
   89ad4:	f000 81db 	beq.w	89e8e <_vfiprintf_r+0x66a>
   89ad8:	ea54 0105 	orrs.w	r1, r4, r5
   89adc:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   89ae0:	f040 81d4 	bne.w	89e8c <_vfiprintf_r+0x668>
   89ae4:	2a00      	cmp	r2, #0
   89ae6:	f040 848d 	bne.w	8a404 <_vfiprintf_r+0xbe0>
   89aea:	2b00      	cmp	r3, #0
   89aec:	f040 839e 	bne.w	8a22c <_vfiprintf_r+0xa08>
   89af0:	f019 0301 	ands.w	r3, r9, #1
   89af4:	9301      	str	r3, [sp, #4]
   89af6:	f000 83c3 	beq.w	8a280 <_vfiprintf_r+0xa5c>
   89afa:	2330      	movs	r3, #48	; 0x30
   89afc:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89b00:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   89b04:	e79e      	b.n	89a44 <_vfiprintf_r+0x220>
   89b06:	ebb4 0508 	subs.w	r5, r4, r8
   89b0a:	f000 80bb 	beq.w	89c84 <_vfiprintf_r+0x460>
   89b0e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89b12:	3301      	adds	r3, #1
   89b14:	442a      	add	r2, r5
   89b16:	2b07      	cmp	r3, #7
   89b18:	e9ca 8500 	strd	r8, r5, [sl]
   89b1c:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   89b20:	dc06      	bgt.n	89b30 <_vfiprintf_r+0x30c>
   89b22:	f10a 0a08 	add.w	sl, sl, #8
   89b26:	9a03      	ldr	r2, [sp, #12]
   89b28:	7823      	ldrb	r3, [r4, #0]
   89b2a:	442a      	add	r2, r5
   89b2c:	9203      	str	r2, [sp, #12]
   89b2e:	e6ca      	b.n	898c6 <_vfiprintf_r+0xa2>
   89b30:	2a00      	cmp	r2, #0
   89b32:	f000 8372 	beq.w	8a21a <_vfiprintf_r+0x9f6>
   89b36:	4659      	mov	r1, fp
   89b38:	9805      	ldr	r0, [sp, #20]
   89b3a:	aa0e      	add	r2, sp, #56	; 0x38
   89b3c:	f7ff fe36 	bl	897ac <__sprint_r.part.0>
   89b40:	b950      	cbnz	r0, 89b58 <_vfiprintf_r+0x334>
   89b42:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89b46:	e7ee      	b.n	89b26 <_vfiprintf_r+0x302>
   89b48:	4659      	mov	r1, fp
   89b4a:	9805      	ldr	r0, [sp, #20]
   89b4c:	aa0e      	add	r2, sp, #56	; 0x38
   89b4e:	f7ff fe2d 	bl	897ac <__sprint_r.part.0>
   89b52:	2800      	cmp	r0, #0
   89b54:	f000 808d 	beq.w	89c72 <_vfiprintf_r+0x44e>
   89b58:	46d9      	mov	r9, fp
   89b5a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89b5e:	f013 0f01 	tst.w	r3, #1
   89b62:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89b66:	f000 8095 	beq.w	89c94 <_vfiprintf_r+0x470>
   89b6a:	065b      	lsls	r3, r3, #25
   89b6c:	f100 84d4 	bmi.w	8a518 <_vfiprintf_r+0xcf4>
   89b70:	9803      	ldr	r0, [sp, #12]
   89b72:	b03b      	add	sp, #236	; 0xec
   89b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b78:	2b00      	cmp	r3, #0
   89b7a:	f000 8083 	beq.w	89c84 <_vfiprintf_r+0x460>
   89b7e:	2501      	movs	r5, #1
   89b80:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89b84:	f04f 0300 	mov.w	r3, #0
   89b88:	9501      	str	r5, [sp, #4]
   89b8a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89b8e:	ae21      	add	r6, sp, #132	; 0x84
   89b90:	2300      	movs	r3, #0
   89b92:	9300      	str	r3, [sp, #0]
   89b94:	f017 0302 	ands.w	r3, r7, #2
   89b98:	9307      	str	r3, [sp, #28]
   89b9a:	bf18      	it	ne
   89b9c:	3502      	addne	r5, #2
   89b9e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   89ba2:	9306      	str	r3, [sp, #24]
   89ba4:	d104      	bne.n	89bb0 <_vfiprintf_r+0x38c>
   89ba6:	9b02      	ldr	r3, [sp, #8]
   89ba8:	1b5c      	subs	r4, r3, r5
   89baa:	2c00      	cmp	r4, #0
   89bac:	f300 8274 	bgt.w	8a098 <_vfiprintf_r+0x874>
   89bb0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89bb4:	1c48      	adds	r0, r1, #1
   89bb6:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   89bba:	b174      	cbz	r4, 89bda <_vfiprintf_r+0x3b6>
   89bbc:	2101      	movs	r1, #1
   89bbe:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   89bc2:	440a      	add	r2, r1
   89bc4:	2807      	cmp	r0, #7
   89bc6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89bca:	e9ca 4100 	strd	r4, r1, [sl]
   89bce:	f300 8246 	bgt.w	8a05e <_vfiprintf_r+0x83a>
   89bd2:	4601      	mov	r1, r0
   89bd4:	f10a 0a08 	add.w	sl, sl, #8
   89bd8:	3001      	adds	r0, #1
   89bda:	9b07      	ldr	r3, [sp, #28]
   89bdc:	b1c3      	cbz	r3, 89c10 <_vfiprintf_r+0x3ec>
   89bde:	2102      	movs	r1, #2
   89be0:	ab0d      	add	r3, sp, #52	; 0x34
   89be2:	440a      	add	r2, r1
   89be4:	2807      	cmp	r0, #7
   89be6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   89bea:	e9ca 3100 	strd	r3, r1, [sl]
   89bee:	f340 824e 	ble.w	8a08e <_vfiprintf_r+0x86a>
   89bf2:	2a00      	cmp	r2, #0
   89bf4:	f000 830c 	beq.w	8a210 <_vfiprintf_r+0x9ec>
   89bf8:	4659      	mov	r1, fp
   89bfa:	9805      	ldr	r0, [sp, #20]
   89bfc:	aa0e      	add	r2, sp, #56	; 0x38
   89bfe:	f7ff fdd5 	bl	897ac <__sprint_r.part.0>
   89c02:	2800      	cmp	r0, #0
   89c04:	d1a8      	bne.n	89b58 <_vfiprintf_r+0x334>
   89c06:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89c0a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89c0e:	1c48      	adds	r0, r1, #1
   89c10:	9b06      	ldr	r3, [sp, #24]
   89c12:	2b80      	cmp	r3, #128	; 0x80
   89c14:	f000 817e 	beq.w	89f14 <_vfiprintf_r+0x6f0>
   89c18:	e9dd 3400 	ldrd	r3, r4, [sp]
   89c1c:	1b1c      	subs	r4, r3, r4
   89c1e:	2c00      	cmp	r4, #0
   89c20:	f300 81d3 	bgt.w	89fca <_vfiprintf_r+0x7a6>
   89c24:	9b01      	ldr	r3, [sp, #4]
   89c26:	2807      	cmp	r0, #7
   89c28:	441a      	add	r2, r3
   89c2a:	e9ca 6300 	strd	r6, r3, [sl]
   89c2e:	9210      	str	r2, [sp, #64]	; 0x40
   89c30:	900f      	str	r0, [sp, #60]	; 0x3c
   89c32:	f340 816c 	ble.w	89f0e <_vfiprintf_r+0x6ea>
   89c36:	2a00      	cmp	r2, #0
   89c38:	f000 8276 	beq.w	8a128 <_vfiprintf_r+0x904>
   89c3c:	4659      	mov	r1, fp
   89c3e:	9805      	ldr	r0, [sp, #20]
   89c40:	aa0e      	add	r2, sp, #56	; 0x38
   89c42:	f7ff fdb3 	bl	897ac <__sprint_r.part.0>
   89c46:	2800      	cmp	r0, #0
   89c48:	d186      	bne.n	89b58 <_vfiprintf_r+0x334>
   89c4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89c4c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89c50:	0779      	lsls	r1, r7, #29
   89c52:	d504      	bpl.n	89c5e <_vfiprintf_r+0x43a>
   89c54:	9b02      	ldr	r3, [sp, #8]
   89c56:	1b5c      	subs	r4, r3, r5
   89c58:	2c00      	cmp	r4, #0
   89c5a:	f300 826e 	bgt.w	8a13a <_vfiprintf_r+0x916>
   89c5e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   89c62:	42a9      	cmp	r1, r5
   89c64:	bfac      	ite	ge
   89c66:	185b      	addge	r3, r3, r1
   89c68:	195b      	addlt	r3, r3, r5
   89c6a:	9303      	str	r3, [sp, #12]
   89c6c:	2a00      	cmp	r2, #0
   89c6e:	f47f af6b 	bne.w	89b48 <_vfiprintf_r+0x324>
   89c72:	2300      	movs	r3, #0
   89c74:	930f      	str	r3, [sp, #60]	; 0x3c
   89c76:	f898 3000 	ldrb.w	r3, [r8]
   89c7a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89c7e:	2b00      	cmp	r3, #0
   89c80:	f47f ae13 	bne.w	898aa <_vfiprintf_r+0x86>
   89c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89c86:	46d9      	mov	r9, fp
   89c88:	2b00      	cmp	r3, #0
   89c8a:	f040 8426 	bne.w	8a4da <_vfiprintf_r+0xcb6>
   89c8e:	2300      	movs	r3, #0
   89c90:	930f      	str	r3, [sp, #60]	; 0x3c
   89c92:	e762      	b.n	89b5a <_vfiprintf_r+0x336>
   89c94:	059a      	lsls	r2, r3, #22
   89c96:	f53f af68 	bmi.w	89b6a <_vfiprintf_r+0x346>
   89c9a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89c9e:	f002 f9cf 	bl	8c040 <__retarget_lock_release_recursive>
   89ca2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89ca6:	e760      	b.n	89b6a <_vfiprintf_r+0x346>
   89ca8:	9b04      	ldr	r3, [sp, #16]
   89caa:	06f8      	lsls	r0, r7, #27
   89cac:	f853 4b04 	ldr.w	r4, [r3], #4
   89cb0:	f100 8308 	bmi.w	8a2c4 <_vfiprintf_r+0xaa0>
   89cb4:	0679      	lsls	r1, r7, #25
   89cb6:	f140 8302 	bpl.w	8a2be <_vfiprintf_r+0xa9a>
   89cba:	b224      	sxth	r4, r4
   89cbc:	17e5      	asrs	r5, r4, #31
   89cbe:	9304      	str	r3, [sp, #16]
   89cc0:	4622      	mov	r2, r4
   89cc2:	462b      	mov	r3, r5
   89cc4:	e6a2      	b.n	89a0c <_vfiprintf_r+0x1e8>
   89cc6:	f854 3b04 	ldr.w	r3, [r4], #4
   89cca:	06f9      	lsls	r1, r7, #27
   89ccc:	9404      	str	r4, [sp, #16]
   89cce:	f100 82f3 	bmi.w	8a2b8 <_vfiprintf_r+0xa94>
   89cd2:	067a      	lsls	r2, r7, #25
   89cd4:	f140 82ed 	bpl.w	8a2b2 <_vfiprintf_r+0xa8e>
   89cd8:	2500      	movs	r5, #0
   89cda:	b29c      	uxth	r4, r3
   89cdc:	e6f0      	b.n	89ac0 <_vfiprintf_r+0x29c>
   89cde:	f04f 0300 	mov.w	r3, #0
   89ce2:	9c04      	ldr	r4, [sp, #16]
   89ce4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89ce8:	f854 6b04 	ldr.w	r6, [r4], #4
   89cec:	2e00      	cmp	r6, #0
   89cee:	f000 8397 	beq.w	8a420 <_vfiprintf_r+0xbfc>
   89cf2:	9a00      	ldr	r2, [sp, #0]
   89cf4:	4613      	mov	r3, r2
   89cf6:	3301      	adds	r3, #1
   89cf8:	f000 831e 	beq.w	8a338 <_vfiprintf_r+0xb14>
   89cfc:	2100      	movs	r1, #0
   89cfe:	4630      	mov	r0, r6
   89d00:	f002 fce4 	bl	8c6cc <memchr>
   89d04:	2800      	cmp	r0, #0
   89d06:	f000 83d8 	beq.w	8a4ba <_vfiprintf_r+0xc96>
   89d0a:	1b83      	subs	r3, r0, r6
   89d0c:	9301      	str	r3, [sp, #4]
   89d0e:	2300      	movs	r3, #0
   89d10:	9404      	str	r4, [sp, #16]
   89d12:	9300      	str	r3, [sp, #0]
   89d14:	e696      	b.n	89a44 <_vfiprintf_r+0x220>
   89d16:	2501      	movs	r5, #1
   89d18:	f04f 0200 	mov.w	r2, #0
   89d1c:	9c04      	ldr	r4, [sp, #16]
   89d1e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   89d22:	f854 3b04 	ldr.w	r3, [r4], #4
   89d26:	9501      	str	r5, [sp, #4]
   89d28:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89d2c:	9404      	str	r4, [sp, #16]
   89d2e:	ae21      	add	r6, sp, #132	; 0x84
   89d30:	e72e      	b.n	89b90 <_vfiprintf_r+0x36c>
   89d32:	f001 fdb1 	bl	8b898 <__sinit>
   89d36:	e582      	b.n	8983e <_vfiprintf_r+0x1a>
   89d38:	9b02      	ldr	r3, [sp, #8]
   89d3a:	425b      	negs	r3, r3
   89d3c:	9302      	str	r3, [sp, #8]
   89d3e:	f898 3000 	ldrb.w	r3, [r8]
   89d42:	f047 0704 	orr.w	r7, r7, #4
   89d46:	e5cf      	b.n	898e8 <_vfiprintf_r+0xc4>
   89d48:	f898 3000 	ldrb.w	r3, [r8]
   89d4c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89d50:	e5ca      	b.n	898e8 <_vfiprintf_r+0xc4>
   89d52:	f898 3000 	ldrb.w	r3, [r8]
   89d56:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   89d5a:	e5c5      	b.n	898e8 <_vfiprintf_r+0xc4>
   89d5c:	4641      	mov	r1, r8
   89d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
   89d62:	2b2a      	cmp	r3, #42	; 0x2a
   89d64:	f000 83dd 	beq.w	8a522 <_vfiprintf_r+0xcfe>
   89d68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89d6c:	2a09      	cmp	r2, #9
   89d6e:	4688      	mov	r8, r1
   89d70:	bf98      	it	ls
   89d72:	2100      	movls	r1, #0
   89d74:	f200 83ad 	bhi.w	8a4d2 <_vfiprintf_r+0xcae>
   89d78:	f818 3b01 	ldrb.w	r3, [r8], #1
   89d7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89d80:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   89d84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89d88:	2a09      	cmp	r2, #9
   89d8a:	d9f5      	bls.n	89d78 <_vfiprintf_r+0x554>
   89d8c:	9100      	str	r1, [sp, #0]
   89d8e:	e5ad      	b.n	898ec <_vfiprintf_r+0xc8>
   89d90:	9c05      	ldr	r4, [sp, #20]
   89d92:	4620      	mov	r0, r4
   89d94:	f002 f94a 	bl	8c02c <_localeconv_r>
   89d98:	6843      	ldr	r3, [r0, #4]
   89d9a:	4618      	mov	r0, r3
   89d9c:	930a      	str	r3, [sp, #40]	; 0x28
   89d9e:	f003 fb47 	bl	8d430 <strlen>
   89da2:	4603      	mov	r3, r0
   89da4:	4620      	mov	r0, r4
   89da6:	930b      	str	r3, [sp, #44]	; 0x2c
   89da8:	461c      	mov	r4, r3
   89daa:	f002 f93f 	bl	8c02c <_localeconv_r>
   89dae:	6882      	ldr	r2, [r0, #8]
   89db0:	9209      	str	r2, [sp, #36]	; 0x24
   89db2:	2c00      	cmp	r4, #0
   89db4:	f43f ae13 	beq.w	899de <_vfiprintf_r+0x1ba>
   89db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89dba:	2b00      	cmp	r3, #0
   89dbc:	f43f ae0f 	beq.w	899de <_vfiprintf_r+0x1ba>
   89dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89dc2:	781b      	ldrb	r3, [r3, #0]
   89dc4:	2b00      	cmp	r3, #0
   89dc6:	f43f ae0a 	beq.w	899de <_vfiprintf_r+0x1ba>
   89dca:	f898 3000 	ldrb.w	r3, [r8]
   89dce:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   89dd2:	e589      	b.n	898e8 <_vfiprintf_r+0xc4>
   89dd4:	f898 3000 	ldrb.w	r3, [r8]
   89dd8:	f047 0701 	orr.w	r7, r7, #1
   89ddc:	e584      	b.n	898e8 <_vfiprintf_r+0xc4>
   89dde:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89de2:	2b00      	cmp	r3, #0
   89de4:	f47f adfb 	bne.w	899de <_vfiprintf_r+0x1ba>
   89de8:	2320      	movs	r3, #32
   89dea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89dee:	f898 3000 	ldrb.w	r3, [r8]
   89df2:	e579      	b.n	898e8 <_vfiprintf_r+0xc4>
   89df4:	f898 3000 	ldrb.w	r3, [r8]
   89df8:	2b6c      	cmp	r3, #108	; 0x6c
   89dfa:	bf03      	ittte	eq
   89dfc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89e00:	f047 0720 	orreq.w	r7, r7, #32
   89e04:	f108 0801 	addeq.w	r8, r8, #1
   89e08:	f047 0710 	orrne.w	r7, r7, #16
   89e0c:	e56c      	b.n	898e8 <_vfiprintf_r+0xc4>
   89e0e:	f898 3000 	ldrb.w	r3, [r8]
   89e12:	2b68      	cmp	r3, #104	; 0x68
   89e14:	bf03      	ittte	eq
   89e16:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89e1a:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   89e1e:	f108 0801 	addeq.w	r8, r8, #1
   89e22:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   89e26:	e55f      	b.n	898e8 <_vfiprintf_r+0xc4>
   89e28:	f047 0910 	orr.w	r9, r7, #16
   89e2c:	f019 0f20 	tst.w	r9, #32
   89e30:	9c04      	ldr	r4, [sp, #16]
   89e32:	f000 8200 	beq.w	8a236 <_vfiprintf_r+0xa12>
   89e36:	3407      	adds	r4, #7
   89e38:	f024 0307 	bic.w	r3, r4, #7
   89e3c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89e40:	9304      	str	r3, [sp, #16]
   89e42:	2301      	movs	r3, #1
   89e44:	e63f      	b.n	89ac6 <_vfiprintf_r+0x2a2>
   89e46:	f647 0330 	movw	r3, #30768	; 0x7830
   89e4a:	9c04      	ldr	r4, [sp, #16]
   89e4c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89e50:	f854 2b04 	ldr.w	r2, [r4], #4
   89e54:	4bbf      	ldr	r3, [pc, #764]	; (8a154 <_vfiprintf_r+0x930>)
   89e56:	9404      	str	r4, [sp, #16]
   89e58:	9308      	str	r3, [sp, #32]
   89e5a:	4614      	mov	r4, r2
   89e5c:	2500      	movs	r5, #0
   89e5e:	2302      	movs	r3, #2
   89e60:	f047 0902 	orr.w	r9, r7, #2
   89e64:	e62f      	b.n	89ac6 <_vfiprintf_r+0x2a2>
   89e66:	06bb      	lsls	r3, r7, #26
   89e68:	f100 8232 	bmi.w	8a2d0 <_vfiprintf_r+0xaac>
   89e6c:	06fe      	lsls	r6, r7, #27
   89e6e:	f100 82cf 	bmi.w	8a410 <_vfiprintf_r+0xbec>
   89e72:	067d      	lsls	r5, r7, #25
   89e74:	f100 8301 	bmi.w	8a47a <_vfiprintf_r+0xc56>
   89e78:	05bc      	lsls	r4, r7, #22
   89e7a:	f140 82c9 	bpl.w	8a410 <_vfiprintf_r+0xbec>
   89e7e:	9c04      	ldr	r4, [sp, #16]
   89e80:	9a03      	ldr	r2, [sp, #12]
   89e82:	f854 3b04 	ldr.w	r3, [r4], #4
   89e86:	701a      	strb	r2, [r3, #0]
   89e88:	9404      	str	r4, [sp, #16]
   89e8a:	e509      	b.n	898a0 <_vfiprintf_r+0x7c>
   89e8c:	46b9      	mov	r9, r7
   89e8e:	2b01      	cmp	r3, #1
   89e90:	f43f adcb 	beq.w	89a2a <_vfiprintf_r+0x206>
   89e94:	2b02      	cmp	r3, #2
   89e96:	ae3a      	add	r6, sp, #232	; 0xe8
   89e98:	d113      	bne.n	89ec2 <_vfiprintf_r+0x69e>
   89e9a:	9808      	ldr	r0, [sp, #32]
   89e9c:	0923      	lsrs	r3, r4, #4
   89e9e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   89ea2:	0929      	lsrs	r1, r5, #4
   89ea4:	f004 020f 	and.w	r2, r4, #15
   89ea8:	460d      	mov	r5, r1
   89eaa:	461c      	mov	r4, r3
   89eac:	5c83      	ldrb	r3, [r0, r2]
   89eae:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89eb2:	ea54 0305 	orrs.w	r3, r4, r5
   89eb6:	d1f1      	bne.n	89e9c <_vfiprintf_r+0x678>
   89eb8:	ab3a      	add	r3, sp, #232	; 0xe8
   89eba:	1b9b      	subs	r3, r3, r6
   89ebc:	464f      	mov	r7, r9
   89ebe:	9301      	str	r3, [sp, #4]
   89ec0:	e5c0      	b.n	89a44 <_vfiprintf_r+0x220>
   89ec2:	08e2      	lsrs	r2, r4, #3
   89ec4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   89ec8:	08e9      	lsrs	r1, r5, #3
   89eca:	f004 0307 	and.w	r3, r4, #7
   89ece:	460d      	mov	r5, r1
   89ed0:	4614      	mov	r4, r2
   89ed2:	3330      	adds	r3, #48	; 0x30
   89ed4:	ea54 0105 	orrs.w	r1, r4, r5
   89ed8:	4632      	mov	r2, r6
   89eda:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89ede:	d1f0      	bne.n	89ec2 <_vfiprintf_r+0x69e>
   89ee0:	f019 0f01 	tst.w	r9, #1
   89ee4:	d0e8      	beq.n	89eb8 <_vfiprintf_r+0x694>
   89ee6:	2b30      	cmp	r3, #48	; 0x30
   89ee8:	d0e6      	beq.n	89eb8 <_vfiprintf_r+0x694>
   89eea:	2330      	movs	r3, #48	; 0x30
   89eec:	3a02      	subs	r2, #2
   89eee:	f806 3c01 	strb.w	r3, [r6, #-1]
   89ef2:	ab3a      	add	r3, sp, #232	; 0xe8
   89ef4:	1a9b      	subs	r3, r3, r2
   89ef6:	464f      	mov	r7, r9
   89ef8:	4616      	mov	r6, r2
   89efa:	9301      	str	r3, [sp, #4]
   89efc:	e5a2      	b.n	89a44 <_vfiprintf_r+0x220>
   89efe:	2301      	movs	r3, #1
   89f00:	9a01      	ldr	r2, [sp, #4]
   89f02:	930f      	str	r3, [sp, #60]	; 0x3c
   89f04:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   89f08:	9212      	str	r2, [sp, #72]	; 0x48
   89f0a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89f0e:	f10a 0a08 	add.w	sl, sl, #8
   89f12:	e69d      	b.n	89c50 <_vfiprintf_r+0x42c>
   89f14:	9b02      	ldr	r3, [sp, #8]
   89f16:	1b5c      	subs	r4, r3, r5
   89f18:	2c00      	cmp	r4, #0
   89f1a:	f77f ae7d 	ble.w	89c18 <_vfiprintf_r+0x3f4>
   89f1e:	2c10      	cmp	r4, #16
   89f20:	f340 82ea 	ble.w	8a4f8 <_vfiprintf_r+0xcd4>
   89f24:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8a158 <_vfiprintf_r+0x934>
   89f28:	4650      	mov	r0, sl
   89f2a:	9706      	str	r7, [sp, #24]
   89f2c:	46b2      	mov	sl, r6
   89f2e:	464e      	mov	r6, r9
   89f30:	46c1      	mov	r9, r8
   89f32:	46a8      	mov	r8, r5
   89f34:	9d05      	ldr	r5, [sp, #20]
   89f36:	e006      	b.n	89f46 <_vfiprintf_r+0x722>
   89f38:	f101 0c02 	add.w	ip, r1, #2
   89f3c:	4619      	mov	r1, r3
   89f3e:	3008      	adds	r0, #8
   89f40:	3c10      	subs	r4, #16
   89f42:	2c10      	cmp	r4, #16
   89f44:	dd1a      	ble.n	89f7c <_vfiprintf_r+0x758>
   89f46:	2710      	movs	r7, #16
   89f48:	1c4b      	adds	r3, r1, #1
   89f4a:	3210      	adds	r2, #16
   89f4c:	2b07      	cmp	r3, #7
   89f4e:	9210      	str	r2, [sp, #64]	; 0x40
   89f50:	6006      	str	r6, [r0, #0]
   89f52:	6047      	str	r7, [r0, #4]
   89f54:	930f      	str	r3, [sp, #60]	; 0x3c
   89f56:	ddef      	ble.n	89f38 <_vfiprintf_r+0x714>
   89f58:	2a00      	cmp	r2, #0
   89f5a:	d07b      	beq.n	8a054 <_vfiprintf_r+0x830>
   89f5c:	4659      	mov	r1, fp
   89f5e:	4628      	mov	r0, r5
   89f60:	aa0e      	add	r2, sp, #56	; 0x38
   89f62:	f7ff fc23 	bl	897ac <__sprint_r.part.0>
   89f66:	2800      	cmp	r0, #0
   89f68:	f47f adf6 	bne.w	89b58 <_vfiprintf_r+0x334>
   89f6c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89f70:	3c10      	subs	r4, #16
   89f72:	2c10      	cmp	r4, #16
   89f74:	a811      	add	r0, sp, #68	; 0x44
   89f76:	f101 0c01 	add.w	ip, r1, #1
   89f7a:	dce4      	bgt.n	89f46 <_vfiprintf_r+0x722>
   89f7c:	4645      	mov	r5, r8
   89f7e:	46c8      	mov	r8, r9
   89f80:	46b1      	mov	r9, r6
   89f82:	4656      	mov	r6, sl
   89f84:	4682      	mov	sl, r0
   89f86:	9f06      	ldr	r7, [sp, #24]
   89f88:	4422      	add	r2, r4
   89f8a:	f1bc 0f07 	cmp.w	ip, #7
   89f8e:	e9ca 9400 	strd	r9, r4, [sl]
   89f92:	9210      	str	r2, [sp, #64]	; 0x40
   89f94:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   89f98:	f340 817e 	ble.w	8a298 <_vfiprintf_r+0xa74>
   89f9c:	2a00      	cmp	r2, #0
   89f9e:	f000 825c 	beq.w	8a45a <_vfiprintf_r+0xc36>
   89fa2:	4659      	mov	r1, fp
   89fa4:	9805      	ldr	r0, [sp, #20]
   89fa6:	aa0e      	add	r2, sp, #56	; 0x38
   89fa8:	f7ff fc00 	bl	897ac <__sprint_r.part.0>
   89fac:	2800      	cmp	r0, #0
   89fae:	f47f add3 	bne.w	89b58 <_vfiprintf_r+0x334>
   89fb2:	e9dd 3400 	ldrd	r3, r4, [sp]
   89fb6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89fba:	1b1c      	subs	r4, r3, r4
   89fbc:	2c00      	cmp	r4, #0
   89fbe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89fc2:	f101 0001 	add.w	r0, r1, #1
   89fc6:	f77f ae2d 	ble.w	89c24 <_vfiprintf_r+0x400>
   89fca:	2c10      	cmp	r4, #16
   89fcc:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8a158 <_vfiprintf_r+0x934>
   89fd0:	dd2f      	ble.n	8a032 <_vfiprintf_r+0x80e>
   89fd2:	46d4      	mov	ip, sl
   89fd4:	46b2      	mov	sl, r6
   89fd6:	464e      	mov	r6, r9
   89fd8:	46c1      	mov	r9, r8
   89fda:	46a8      	mov	r8, r5
   89fdc:	9d05      	ldr	r5, [sp, #20]
   89fde:	e006      	b.n	89fee <_vfiprintf_r+0x7ca>
   89fe0:	1c88      	adds	r0, r1, #2
   89fe2:	4619      	mov	r1, r3
   89fe4:	f10c 0c08 	add.w	ip, ip, #8
   89fe8:	3c10      	subs	r4, #16
   89fea:	2c10      	cmp	r4, #16
   89fec:	dd1c      	ble.n	8a028 <_vfiprintf_r+0x804>
   89fee:	2010      	movs	r0, #16
   89ff0:	1c4b      	adds	r3, r1, #1
   89ff2:	3210      	adds	r2, #16
   89ff4:	2b07      	cmp	r3, #7
   89ff6:	9210      	str	r2, [sp, #64]	; 0x40
   89ff8:	f8cc 6000 	str.w	r6, [ip]
   89ffc:	f8cc 0004 	str.w	r0, [ip, #4]
   8a000:	930f      	str	r3, [sp, #60]	; 0x3c
   8a002:	dded      	ble.n	89fe0 <_vfiprintf_r+0x7bc>
   8a004:	b30a      	cbz	r2, 8a04a <_vfiprintf_r+0x826>
   8a006:	4659      	mov	r1, fp
   8a008:	4628      	mov	r0, r5
   8a00a:	aa0e      	add	r2, sp, #56	; 0x38
   8a00c:	f7ff fbce 	bl	897ac <__sprint_r.part.0>
   8a010:	2800      	cmp	r0, #0
   8a012:	f47f ada1 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a016:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a01a:	3c10      	subs	r4, #16
   8a01c:	2c10      	cmp	r4, #16
   8a01e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a022:	f101 0001 	add.w	r0, r1, #1
   8a026:	dce2      	bgt.n	89fee <_vfiprintf_r+0x7ca>
   8a028:	4645      	mov	r5, r8
   8a02a:	46c8      	mov	r8, r9
   8a02c:	46b1      	mov	r9, r6
   8a02e:	4656      	mov	r6, sl
   8a030:	46e2      	mov	sl, ip
   8a032:	4422      	add	r2, r4
   8a034:	2807      	cmp	r0, #7
   8a036:	e9ca 9400 	strd	r9, r4, [sl]
   8a03a:	9210      	str	r2, [sp, #64]	; 0x40
   8a03c:	900f      	str	r0, [sp, #60]	; 0x3c
   8a03e:	f300 80d3 	bgt.w	8a1e8 <_vfiprintf_r+0x9c4>
   8a042:	f10a 0a08 	add.w	sl, sl, #8
   8a046:	3001      	adds	r0, #1
   8a048:	e5ec      	b.n	89c24 <_vfiprintf_r+0x400>
   8a04a:	2001      	movs	r0, #1
   8a04c:	4611      	mov	r1, r2
   8a04e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a052:	e7c9      	b.n	89fe8 <_vfiprintf_r+0x7c4>
   8a054:	f04f 0c01 	mov.w	ip, #1
   8a058:	4611      	mov	r1, r2
   8a05a:	a811      	add	r0, sp, #68	; 0x44
   8a05c:	e770      	b.n	89f40 <_vfiprintf_r+0x71c>
   8a05e:	2a00      	cmp	r2, #0
   8a060:	f000 80d3 	beq.w	8a20a <_vfiprintf_r+0x9e6>
   8a064:	4659      	mov	r1, fp
   8a066:	9805      	ldr	r0, [sp, #20]
   8a068:	aa0e      	add	r2, sp, #56	; 0x38
   8a06a:	f7ff fb9f 	bl	897ac <__sprint_r.part.0>
   8a06e:	2800      	cmp	r0, #0
   8a070:	f47f ad72 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a074:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a078:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a07c:	1c48      	adds	r0, r1, #1
   8a07e:	e5ac      	b.n	89bda <_vfiprintf_r+0x3b6>
   8a080:	2202      	movs	r2, #2
   8a082:	2001      	movs	r0, #1
   8a084:	ab0d      	add	r3, sp, #52	; 0x34
   8a086:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a08a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a08e:	4601      	mov	r1, r0
   8a090:	f10a 0a08 	add.w	sl, sl, #8
   8a094:	1c48      	adds	r0, r1, #1
   8a096:	e5bb      	b.n	89c10 <_vfiprintf_r+0x3ec>
   8a098:	2c10      	cmp	r4, #16
   8a09a:	f340 8214 	ble.w	8a4c6 <_vfiprintf_r+0xca2>
   8a09e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a0a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8a15c <_vfiprintf_r+0x938>
   8a0a6:	46d4      	mov	ip, sl
   8a0a8:	46b2      	mov	sl, r6
   8a0aa:	464e      	mov	r6, r9
   8a0ac:	46c1      	mov	r9, r8
   8a0ae:	46a8      	mov	r8, r5
   8a0b0:	9d05      	ldr	r5, [sp, #20]
   8a0b2:	e006      	b.n	8a0c2 <_vfiprintf_r+0x89e>
   8a0b4:	1c99      	adds	r1, r3, #2
   8a0b6:	4603      	mov	r3, r0
   8a0b8:	f10c 0c08 	add.w	ip, ip, #8
   8a0bc:	3c10      	subs	r4, #16
   8a0be:	2c10      	cmp	r4, #16
   8a0c0:	dd1c      	ble.n	8a0fc <_vfiprintf_r+0x8d8>
   8a0c2:	2110      	movs	r1, #16
   8a0c4:	1c58      	adds	r0, r3, #1
   8a0c6:	3210      	adds	r2, #16
   8a0c8:	2807      	cmp	r0, #7
   8a0ca:	9210      	str	r2, [sp, #64]	; 0x40
   8a0cc:	f8cc 6000 	str.w	r6, [ip]
   8a0d0:	f8cc 1004 	str.w	r1, [ip, #4]
   8a0d4:	900f      	str	r0, [sp, #60]	; 0x3c
   8a0d6:	dded      	ble.n	8a0b4 <_vfiprintf_r+0x890>
   8a0d8:	b30a      	cbz	r2, 8a11e <_vfiprintf_r+0x8fa>
   8a0da:	4659      	mov	r1, fp
   8a0dc:	4628      	mov	r0, r5
   8a0de:	aa0e      	add	r2, sp, #56	; 0x38
   8a0e0:	f7ff fb64 	bl	897ac <__sprint_r.part.0>
   8a0e4:	2800      	cmp	r0, #0
   8a0e6:	f47f ad37 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a0ea:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8a0ee:	3c10      	subs	r4, #16
   8a0f0:	2c10      	cmp	r4, #16
   8a0f2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a0f6:	f103 0101 	add.w	r1, r3, #1
   8a0fa:	dce2      	bgt.n	8a0c2 <_vfiprintf_r+0x89e>
   8a0fc:	4645      	mov	r5, r8
   8a0fe:	46c8      	mov	r8, r9
   8a100:	46b1      	mov	r9, r6
   8a102:	4656      	mov	r6, sl
   8a104:	46e2      	mov	sl, ip
   8a106:	4422      	add	r2, r4
   8a108:	2907      	cmp	r1, #7
   8a10a:	e9ca 9400 	strd	r9, r4, [sl]
   8a10e:	9210      	str	r2, [sp, #64]	; 0x40
   8a110:	910f      	str	r1, [sp, #60]	; 0x3c
   8a112:	f300 80a8 	bgt.w	8a266 <_vfiprintf_r+0xa42>
   8a116:	f10a 0a08 	add.w	sl, sl, #8
   8a11a:	1c48      	adds	r0, r1, #1
   8a11c:	e54b      	b.n	89bb6 <_vfiprintf_r+0x392>
   8a11e:	4613      	mov	r3, r2
   8a120:	2101      	movs	r1, #1
   8a122:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8a126:	e7c9      	b.n	8a0bc <_vfiprintf_r+0x898>
   8a128:	0778      	lsls	r0, r7, #29
   8a12a:	920f      	str	r2, [sp, #60]	; 0x3c
   8a12c:	d554      	bpl.n	8a1d8 <_vfiprintf_r+0x9b4>
   8a12e:	9b02      	ldr	r3, [sp, #8]
   8a130:	1b5c      	subs	r4, r3, r5
   8a132:	2c00      	cmp	r4, #0
   8a134:	dd50      	ble.n	8a1d8 <_vfiprintf_r+0x9b4>
   8a136:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a13a:	2c10      	cmp	r4, #16
   8a13c:	f340 81d7 	ble.w	8a4ee <_vfiprintf_r+0xcca>
   8a140:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8a15c <_vfiprintf_r+0x938>
   8a144:	2610      	movs	r6, #16
   8a146:	464b      	mov	r3, r9
   8a148:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8a14a:	46a9      	mov	r9, r5
   8a14c:	9f05      	ldr	r7, [sp, #20]
   8a14e:	461d      	mov	r5, r3
   8a150:	e00d      	b.n	8a16e <_vfiprintf_r+0x94a>
   8a152:	bf00      	nop
   8a154:	0008e678 	.word	0x0008e678
   8a158:	0008e6dc 	.word	0x0008e6dc
   8a15c:	0008e6cc 	.word	0x0008e6cc
   8a160:	1c88      	adds	r0, r1, #2
   8a162:	4619      	mov	r1, r3
   8a164:	f10a 0a08 	add.w	sl, sl, #8
   8a168:	3c10      	subs	r4, #16
   8a16a:	2c10      	cmp	r4, #16
   8a16c:	dd19      	ble.n	8a1a2 <_vfiprintf_r+0x97e>
   8a16e:	1c4b      	adds	r3, r1, #1
   8a170:	3210      	adds	r2, #16
   8a172:	2b07      	cmp	r3, #7
   8a174:	e9ca 5600 	strd	r5, r6, [sl]
   8a178:	9210      	str	r2, [sp, #64]	; 0x40
   8a17a:	930f      	str	r3, [sp, #60]	; 0x3c
   8a17c:	ddf0      	ble.n	8a160 <_vfiprintf_r+0x93c>
   8a17e:	b332      	cbz	r2, 8a1ce <_vfiprintf_r+0x9aa>
   8a180:	4659      	mov	r1, fp
   8a182:	4638      	mov	r0, r7
   8a184:	aa0e      	add	r2, sp, #56	; 0x38
   8a186:	f7ff fb11 	bl	897ac <__sprint_r.part.0>
   8a18a:	2800      	cmp	r0, #0
   8a18c:	f47f ace4 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a190:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a194:	3c10      	subs	r4, #16
   8a196:	2c10      	cmp	r4, #16
   8a198:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a19c:	f101 0001 	add.w	r0, r1, #1
   8a1a0:	dce5      	bgt.n	8a16e <_vfiprintf_r+0x94a>
   8a1a2:	462b      	mov	r3, r5
   8a1a4:	464d      	mov	r5, r9
   8a1a6:	4699      	mov	r9, r3
   8a1a8:	4422      	add	r2, r4
   8a1aa:	2807      	cmp	r0, #7
   8a1ac:	e9ca 9400 	strd	r9, r4, [sl]
   8a1b0:	9210      	str	r2, [sp, #64]	; 0x40
   8a1b2:	900f      	str	r0, [sp, #60]	; 0x3c
   8a1b4:	f77f ad53 	ble.w	89c5e <_vfiprintf_r+0x43a>
   8a1b8:	b172      	cbz	r2, 8a1d8 <_vfiprintf_r+0x9b4>
   8a1ba:	4659      	mov	r1, fp
   8a1bc:	9805      	ldr	r0, [sp, #20]
   8a1be:	aa0e      	add	r2, sp, #56	; 0x38
   8a1c0:	f7ff faf4 	bl	897ac <__sprint_r.part.0>
   8a1c4:	2800      	cmp	r0, #0
   8a1c6:	f47f acc7 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a1ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a1cc:	e547      	b.n	89c5e <_vfiprintf_r+0x43a>
   8a1ce:	2001      	movs	r0, #1
   8a1d0:	4611      	mov	r1, r2
   8a1d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a1d6:	e7c7      	b.n	8a168 <_vfiprintf_r+0x944>
   8a1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a1dc:	42aa      	cmp	r2, r5
   8a1de:	bfac      	ite	ge
   8a1e0:	189b      	addge	r3, r3, r2
   8a1e2:	195b      	addlt	r3, r3, r5
   8a1e4:	9303      	str	r3, [sp, #12]
   8a1e6:	e544      	b.n	89c72 <_vfiprintf_r+0x44e>
   8a1e8:	2a00      	cmp	r2, #0
   8a1ea:	f43f ae88 	beq.w	89efe <_vfiprintf_r+0x6da>
   8a1ee:	4659      	mov	r1, fp
   8a1f0:	9805      	ldr	r0, [sp, #20]
   8a1f2:	aa0e      	add	r2, sp, #56	; 0x38
   8a1f4:	f7ff fada 	bl	897ac <__sprint_r.part.0>
   8a1f8:	2800      	cmp	r0, #0
   8a1fa:	f47f acad 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a1fe:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8a202:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a206:	3001      	adds	r0, #1
   8a208:	e50c      	b.n	89c24 <_vfiprintf_r+0x400>
   8a20a:	9b07      	ldr	r3, [sp, #28]
   8a20c:	2b00      	cmp	r3, #0
   8a20e:	d16b      	bne.n	8a2e8 <_vfiprintf_r+0xac4>
   8a210:	2001      	movs	r0, #1
   8a212:	4611      	mov	r1, r2
   8a214:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a218:	e4fa      	b.n	89c10 <_vfiprintf_r+0x3ec>
   8a21a:	920f      	str	r2, [sp, #60]	; 0x3c
   8a21c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a220:	e481      	b.n	89b26 <_vfiprintf_r+0x302>
   8a222:	9b00      	ldr	r3, [sp, #0]
   8a224:	2b00      	cmp	r3, #0
   8a226:	f47f ac05 	bne.w	89a34 <_vfiprintf_r+0x210>
   8a22a:	464f      	mov	r7, r9
   8a22c:	2300      	movs	r3, #0
   8a22e:	ae3a      	add	r6, sp, #232	; 0xe8
   8a230:	9300      	str	r3, [sp, #0]
   8a232:	9301      	str	r3, [sp, #4]
   8a234:	e406      	b.n	89a44 <_vfiprintf_r+0x220>
   8a236:	f854 2b04 	ldr.w	r2, [r4], #4
   8a23a:	f019 0f10 	tst.w	r9, #16
   8a23e:	f04f 0301 	mov.w	r3, #1
   8a242:	9404      	str	r4, [sp, #16]
   8a244:	d132      	bne.n	8a2ac <_vfiprintf_r+0xa88>
   8a246:	f019 0f40 	tst.w	r9, #64	; 0x40
   8a24a:	d02b      	beq.n	8a2a4 <_vfiprintf_r+0xa80>
   8a24c:	2500      	movs	r5, #0
   8a24e:	b294      	uxth	r4, r2
   8a250:	e439      	b.n	89ac6 <_vfiprintf_r+0x2a2>
   8a252:	232d      	movs	r3, #45	; 0x2d
   8a254:	4264      	negs	r4, r4
   8a256:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8a25a:	46b9      	mov	r9, r7
   8a25c:	f04f 0301 	mov.w	r3, #1
   8a260:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8a264:	e433      	b.n	89ace <_vfiprintf_r+0x2aa>
   8a266:	2a00      	cmp	r2, #0
   8a268:	d06f      	beq.n	8a34a <_vfiprintf_r+0xb26>
   8a26a:	4659      	mov	r1, fp
   8a26c:	9805      	ldr	r0, [sp, #20]
   8a26e:	aa0e      	add	r2, sp, #56	; 0x38
   8a270:	f7ff fa9c 	bl	897ac <__sprint_r.part.0>
   8a274:	2800      	cmp	r0, #0
   8a276:	f47f ac6f 	bne.w	89b58 <_vfiprintf_r+0x334>
   8a27a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a27e:	e497      	b.n	89bb0 <_vfiprintf_r+0x38c>
   8a280:	ae3a      	add	r6, sp, #232	; 0xe8
   8a282:	f7ff bbdf 	b.w	89a44 <_vfiprintf_r+0x220>
   8a286:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a28a:	f001 fed7 	bl	8c03c <__retarget_lock_acquire_recursive>
   8a28e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8a292:	b28a      	uxth	r2, r1
   8a294:	f7ff badd 	b.w	89852 <_vfiprintf_r+0x2e>
   8a298:	4661      	mov	r1, ip
   8a29a:	f10a 0a08 	add.w	sl, sl, #8
   8a29e:	f10c 0001 	add.w	r0, ip, #1
   8a2a2:	e4b9      	b.n	89c18 <_vfiprintf_r+0x3f4>
   8a2a4:	f419 7f00 	tst.w	r9, #512	; 0x200
   8a2a8:	f040 80ef 	bne.w	8a48a <_vfiprintf_r+0xc66>
   8a2ac:	4614      	mov	r4, r2
   8a2ae:	2500      	movs	r5, #0
   8a2b0:	e409      	b.n	89ac6 <_vfiprintf_r+0x2a2>
   8a2b2:	05be      	lsls	r6, r7, #22
   8a2b4:	f100 80f7 	bmi.w	8a4a6 <_vfiprintf_r+0xc82>
   8a2b8:	461c      	mov	r4, r3
   8a2ba:	2500      	movs	r5, #0
   8a2bc:	e400      	b.n	89ac0 <_vfiprintf_r+0x29c>
   8a2be:	05ba      	lsls	r2, r7, #22
   8a2c0:	f100 80ea 	bmi.w	8a498 <_vfiprintf_r+0xc74>
   8a2c4:	17e5      	asrs	r5, r4, #31
   8a2c6:	9304      	str	r3, [sp, #16]
   8a2c8:	4622      	mov	r2, r4
   8a2ca:	462b      	mov	r3, r5
   8a2cc:	f7ff bb9e 	b.w	89a0c <_vfiprintf_r+0x1e8>
   8a2d0:	9b03      	ldr	r3, [sp, #12]
   8a2d2:	9c04      	ldr	r4, [sp, #16]
   8a2d4:	17dd      	asrs	r5, r3, #31
   8a2d6:	461a      	mov	r2, r3
   8a2d8:	462b      	mov	r3, r5
   8a2da:	f854 1b04 	ldr.w	r1, [r4], #4
   8a2de:	e9c1 2300 	strd	r2, r3, [r1]
   8a2e2:	9404      	str	r4, [sp, #16]
   8a2e4:	f7ff badc 	b.w	898a0 <_vfiprintf_r+0x7c>
   8a2e8:	2202      	movs	r2, #2
   8a2ea:	ab0d      	add	r3, sp, #52	; 0x34
   8a2ec:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8a2f0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a2f4:	e6cc      	b.n	8a090 <_vfiprintf_r+0x86c>
   8a2f6:	46b9      	mov	r9, r7
   8a2f8:	e598      	b.n	89e2c <_vfiprintf_r+0x608>
   8a2fa:	4a90      	ldr	r2, [pc, #576]	; (8a53c <_vfiprintf_r+0xd18>)
   8a2fc:	9208      	str	r2, [sp, #32]
   8a2fe:	06bd      	lsls	r5, r7, #26
   8a300:	9c04      	ldr	r4, [sp, #16]
   8a302:	d530      	bpl.n	8a366 <_vfiprintf_r+0xb42>
   8a304:	3407      	adds	r4, #7
   8a306:	f024 0207 	bic.w	r2, r4, #7
   8a30a:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   8a30e:	9204      	str	r2, [sp, #16]
   8a310:	07fe      	lsls	r6, r7, #31
   8a312:	d509      	bpl.n	8a328 <_vfiprintf_r+0xb04>
   8a314:	ea54 0205 	orrs.w	r2, r4, r5
   8a318:	d006      	beq.n	8a328 <_vfiprintf_r+0xb04>
   8a31a:	2230      	movs	r2, #48	; 0x30
   8a31c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   8a320:	f047 0702 	orr.w	r7, r7, #2
   8a324:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   8a328:	2302      	movs	r3, #2
   8a32a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8a32e:	f7ff bbca 	b.w	89ac6 <_vfiprintf_r+0x2a2>
   8a332:	4a83      	ldr	r2, [pc, #524]	; (8a540 <_vfiprintf_r+0xd1c>)
   8a334:	9208      	str	r2, [sp, #32]
   8a336:	e7e2      	b.n	8a2fe <_vfiprintf_r+0xada>
   8a338:	4630      	mov	r0, r6
   8a33a:	f003 f879 	bl	8d430 <strlen>
   8a33e:	2300      	movs	r3, #0
   8a340:	9404      	str	r4, [sp, #16]
   8a342:	9001      	str	r0, [sp, #4]
   8a344:	9300      	str	r3, [sp, #0]
   8a346:	f7ff bb7d 	b.w	89a44 <_vfiprintf_r+0x220>
   8a34a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   8a34e:	2900      	cmp	r1, #0
   8a350:	f040 8089 	bne.w	8a466 <_vfiprintf_r+0xc42>
   8a354:	9b07      	ldr	r3, [sp, #28]
   8a356:	2b00      	cmp	r3, #0
   8a358:	f47f ae92 	bne.w	8a080 <_vfiprintf_r+0x85c>
   8a35c:	4611      	mov	r1, r2
   8a35e:	2001      	movs	r0, #1
   8a360:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a364:	e458      	b.n	89c18 <_vfiprintf_r+0x3f4>
   8a366:	f854 2b04 	ldr.w	r2, [r4], #4
   8a36a:	9404      	str	r4, [sp, #16]
   8a36c:	06fc      	lsls	r4, r7, #27
   8a36e:	d407      	bmi.n	8a380 <_vfiprintf_r+0xb5c>
   8a370:	0678      	lsls	r0, r7, #25
   8a372:	d502      	bpl.n	8a37a <_vfiprintf_r+0xb56>
   8a374:	2500      	movs	r5, #0
   8a376:	b294      	uxth	r4, r2
   8a378:	e7ca      	b.n	8a310 <_vfiprintf_r+0xaec>
   8a37a:	05b9      	lsls	r1, r7, #22
   8a37c:	f100 8089 	bmi.w	8a492 <_vfiprintf_r+0xc6e>
   8a380:	4614      	mov	r4, r2
   8a382:	2500      	movs	r5, #0
   8a384:	e7c4      	b.n	8a310 <_vfiprintf_r+0xaec>
   8a386:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8a38a:	f8cd 9004 	str.w	r9, [sp, #4]
   8a38e:	f8cd 8018 	str.w	r8, [sp, #24]
   8a392:	2700      	movs	r7, #0
   8a394:	4698      	mov	r8, r3
   8a396:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8a39a:	ae3a      	add	r6, sp, #232	; 0xe8
   8a39c:	e00b      	b.n	8a3b6 <_vfiprintf_r+0xb92>
   8a39e:	220a      	movs	r2, #10
   8a3a0:	2300      	movs	r3, #0
   8a3a2:	4620      	mov	r0, r4
   8a3a4:	4629      	mov	r1, r5
   8a3a6:	f7fd f8e5 	bl	87574 <__aeabi_uldivmod>
   8a3aa:	2d00      	cmp	r5, #0
   8a3ac:	bf08      	it	eq
   8a3ae:	2c0a      	cmpeq	r4, #10
   8a3b0:	d319      	bcc.n	8a3e6 <_vfiprintf_r+0xbc2>
   8a3b2:	4604      	mov	r4, r0
   8a3b4:	460d      	mov	r5, r1
   8a3b6:	220a      	movs	r2, #10
   8a3b8:	2300      	movs	r3, #0
   8a3ba:	4620      	mov	r0, r4
   8a3bc:	4629      	mov	r1, r5
   8a3be:	f7fd f8d9 	bl	87574 <__aeabi_uldivmod>
   8a3c2:	3230      	adds	r2, #48	; 0x30
   8a3c4:	f806 2c01 	strb.w	r2, [r6, #-1]
   8a3c8:	3701      	adds	r7, #1
   8a3ca:	3e01      	subs	r6, #1
   8a3cc:	f1b8 0f00 	cmp.w	r8, #0
   8a3d0:	d0e5      	beq.n	8a39e <_vfiprintf_r+0xb7a>
   8a3d2:	f899 3000 	ldrb.w	r3, [r9]
   8a3d6:	42bb      	cmp	r3, r7
   8a3d8:	d1e1      	bne.n	8a39e <_vfiprintf_r+0xb7a>
   8a3da:	2fff      	cmp	r7, #255	; 0xff
   8a3dc:	d0df      	beq.n	8a39e <_vfiprintf_r+0xb7a>
   8a3de:	2d00      	cmp	r5, #0
   8a3e0:	bf08      	it	eq
   8a3e2:	2c0a      	cmpeq	r4, #10
   8a3e4:	d225      	bcs.n	8a432 <_vfiprintf_r+0xc0e>
   8a3e6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   8a3ea:	ab3a      	add	r3, sp, #232	; 0xe8
   8a3ec:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8a3f0:	1b9b      	subs	r3, r3, r6
   8a3f2:	464f      	mov	r7, r9
   8a3f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   8a3f8:	9301      	str	r3, [sp, #4]
   8a3fa:	f7ff bb23 	b.w	89a44 <_vfiprintf_r+0x220>
   8a3fe:	46b9      	mov	r9, r7
   8a400:	f7ff bb13 	b.w	89a2a <_vfiprintf_r+0x206>
   8a404:	2b01      	cmp	r3, #1
   8a406:	46b9      	mov	r9, r7
   8a408:	f47f ad44 	bne.w	89e94 <_vfiprintf_r+0x670>
   8a40c:	f7ff bb12 	b.w	89a34 <_vfiprintf_r+0x210>
   8a410:	9c04      	ldr	r4, [sp, #16]
   8a412:	9a03      	ldr	r2, [sp, #12]
   8a414:	f854 3b04 	ldr.w	r3, [r4], #4
   8a418:	601a      	str	r2, [r3, #0]
   8a41a:	9404      	str	r4, [sp, #16]
   8a41c:	f7ff ba40 	b.w	898a0 <_vfiprintf_r+0x7c>
   8a420:	9d00      	ldr	r5, [sp, #0]
   8a422:	4e48      	ldr	r6, [pc, #288]	; (8a544 <_vfiprintf_r+0xd20>)
   8a424:	2d06      	cmp	r5, #6
   8a426:	bf28      	it	cs
   8a428:	2506      	movcs	r5, #6
   8a42a:	9404      	str	r4, [sp, #16]
   8a42c:	9501      	str	r5, [sp, #4]
   8a42e:	f7ff bbaf 	b.w	89b90 <_vfiprintf_r+0x36c>
   8a432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a434:	990a      	ldr	r1, [sp, #40]	; 0x28
   8a436:	1af6      	subs	r6, r6, r3
   8a438:	461a      	mov	r2, r3
   8a43a:	4630      	mov	r0, r6
   8a43c:	f003 f826 	bl	8d48c <strncpy>
   8a440:	f899 3001 	ldrb.w	r3, [r9, #1]
   8a444:	b10b      	cbz	r3, 8a44a <_vfiprintf_r+0xc26>
   8a446:	f109 0901 	add.w	r9, r9, #1
   8a44a:	220a      	movs	r2, #10
   8a44c:	2300      	movs	r3, #0
   8a44e:	4620      	mov	r0, r4
   8a450:	4629      	mov	r1, r5
   8a452:	f7fd f88f 	bl	87574 <__aeabi_uldivmod>
   8a456:	2700      	movs	r7, #0
   8a458:	e7ab      	b.n	8a3b2 <_vfiprintf_r+0xb8e>
   8a45a:	2001      	movs	r0, #1
   8a45c:	4611      	mov	r1, r2
   8a45e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a462:	f7ff bbd9 	b.w	89c18 <_vfiprintf_r+0x3f4>
   8a466:	2201      	movs	r2, #1
   8a468:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   8a46c:	4610      	mov	r0, r2
   8a46e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8a472:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8a476:	f7ff bbac 	b.w	89bd2 <_vfiprintf_r+0x3ae>
   8a47a:	9c04      	ldr	r4, [sp, #16]
   8a47c:	9a03      	ldr	r2, [sp, #12]
   8a47e:	f854 3b04 	ldr.w	r3, [r4], #4
   8a482:	801a      	strh	r2, [r3, #0]
   8a484:	9404      	str	r4, [sp, #16]
   8a486:	f7ff ba0b 	b.w	898a0 <_vfiprintf_r+0x7c>
   8a48a:	2500      	movs	r5, #0
   8a48c:	b2d4      	uxtb	r4, r2
   8a48e:	f7ff bb1a 	b.w	89ac6 <_vfiprintf_r+0x2a2>
   8a492:	2500      	movs	r5, #0
   8a494:	b2d4      	uxtb	r4, r2
   8a496:	e73b      	b.n	8a310 <_vfiprintf_r+0xaec>
   8a498:	b264      	sxtb	r4, r4
   8a49a:	17e5      	asrs	r5, r4, #31
   8a49c:	9304      	str	r3, [sp, #16]
   8a49e:	4622      	mov	r2, r4
   8a4a0:	462b      	mov	r3, r5
   8a4a2:	f7ff bab3 	b.w	89a0c <_vfiprintf_r+0x1e8>
   8a4a6:	2500      	movs	r5, #0
   8a4a8:	b2dc      	uxtb	r4, r3
   8a4aa:	f7ff bb09 	b.w	89ac0 <_vfiprintf_r+0x29c>
   8a4ae:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a4b2:	f001 fdc5 	bl	8c040 <__retarget_lock_release_recursive>
   8a4b6:	f7ff baec 	b.w	89a92 <_vfiprintf_r+0x26e>
   8a4ba:	9b00      	ldr	r3, [sp, #0]
   8a4bc:	9404      	str	r4, [sp, #16]
   8a4be:	9301      	str	r3, [sp, #4]
   8a4c0:	9000      	str	r0, [sp, #0]
   8a4c2:	f7ff babf 	b.w	89a44 <_vfiprintf_r+0x220>
   8a4c6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8a4ca:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8a548 <_vfiprintf_r+0xd24>
   8a4ce:	3101      	adds	r1, #1
   8a4d0:	e619      	b.n	8a106 <_vfiprintf_r+0x8e2>
   8a4d2:	2200      	movs	r2, #0
   8a4d4:	9200      	str	r2, [sp, #0]
   8a4d6:	f7ff ba09 	b.w	898ec <_vfiprintf_r+0xc8>
   8a4da:	4659      	mov	r1, fp
   8a4dc:	9805      	ldr	r0, [sp, #20]
   8a4de:	aa0e      	add	r2, sp, #56	; 0x38
   8a4e0:	f7ff f964 	bl	897ac <__sprint_r.part.0>
   8a4e4:	2800      	cmp	r0, #0
   8a4e6:	f43f abd2 	beq.w	89c8e <_vfiprintf_r+0x46a>
   8a4ea:	f7ff bb36 	b.w	89b5a <_vfiprintf_r+0x336>
   8a4ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8a4f0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8a548 <_vfiprintf_r+0xd24>
   8a4f4:	3001      	adds	r0, #1
   8a4f6:	e657      	b.n	8a1a8 <_vfiprintf_r+0x984>
   8a4f8:	4684      	mov	ip, r0
   8a4fa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8a54c <_vfiprintf_r+0xd28>
   8a4fe:	e543      	b.n	89f88 <_vfiprintf_r+0x764>
   8a500:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8a504:	07db      	lsls	r3, r3, #31
   8a506:	d407      	bmi.n	8a518 <_vfiprintf_r+0xcf4>
   8a508:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8a50c:	059f      	lsls	r7, r3, #22
   8a50e:	d403      	bmi.n	8a518 <_vfiprintf_r+0xcf4>
   8a510:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8a514:	f001 fd94 	bl	8c040 <__retarget_lock_release_recursive>
   8a518:	f04f 33ff 	mov.w	r3, #4294967295
   8a51c:	9303      	str	r3, [sp, #12]
   8a51e:	f7ff bb27 	b.w	89b70 <_vfiprintf_r+0x34c>
   8a522:	9a04      	ldr	r2, [sp, #16]
   8a524:	f898 3001 	ldrb.w	r3, [r8, #1]
   8a528:	f852 0b04 	ldr.w	r0, [r2], #4
   8a52c:	4688      	mov	r8, r1
   8a52e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8a532:	9000      	str	r0, [sp, #0]
   8a534:	9204      	str	r2, [sp, #16]
   8a536:	f7ff b9d7 	b.w	898e8 <_vfiprintf_r+0xc4>
   8a53a:	bf00      	nop
   8a53c:	0008e68c 	.word	0x0008e68c
   8a540:	0008e678 	.word	0x0008e678
   8a544:	0008e6a0 	.word	0x0008e6a0
   8a548:	0008e6cc 	.word	0x0008e6cc
   8a54c:	0008e6dc 	.word	0x0008e6dc

0008a550 <__sbprintf>:
   8a550:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a552:	460c      	mov	r4, r1
   8a554:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8a558:	f04f 0e00 	mov.w	lr, #0
   8a55c:	4615      	mov	r5, r2
   8a55e:	4606      	mov	r6, r0
   8a560:	461f      	mov	r7, r3
   8a562:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a564:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8a568:	89e2      	ldrh	r2, [r4, #14]
   8a56a:	8989      	ldrh	r1, [r1, #12]
   8a56c:	9319      	str	r3, [sp, #100]	; 0x64
   8a56e:	69e3      	ldr	r3, [r4, #28]
   8a570:	f8ad 200e 	strh.w	r2, [sp, #14]
   8a574:	6a62      	ldr	r2, [r4, #36]	; 0x24
   8a576:	f021 0102 	bic.w	r1, r1, #2
   8a57a:	9307      	str	r3, [sp, #28]
   8a57c:	a816      	add	r0, sp, #88	; 0x58
   8a57e:	ab1a      	add	r3, sp, #104	; 0x68
   8a580:	f8ad 100c 	strh.w	r1, [sp, #12]
   8a584:	f8cd e018 	str.w	lr, [sp, #24]
   8a588:	9209      	str	r2, [sp, #36]	; 0x24
   8a58a:	9300      	str	r3, [sp, #0]
   8a58c:	9304      	str	r3, [sp, #16]
   8a58e:	f8cd c008 	str.w	ip, [sp, #8]
   8a592:	f8cd c014 	str.w	ip, [sp, #20]
   8a596:	f001 fd4d 	bl	8c034 <__retarget_lock_init_recursive>
   8a59a:	462a      	mov	r2, r5
   8a59c:	463b      	mov	r3, r7
   8a59e:	4669      	mov	r1, sp
   8a5a0:	4630      	mov	r0, r6
   8a5a2:	f7ff f93f 	bl	89824 <_vfiprintf_r>
   8a5a6:	1e05      	subs	r5, r0, #0
   8a5a8:	db07      	blt.n	8a5ba <__sbprintf+0x6a>
   8a5aa:	4630      	mov	r0, r6
   8a5ac:	4669      	mov	r1, sp
   8a5ae:	f001 f917 	bl	8b7e0 <_fflush_r>
   8a5b2:	2800      	cmp	r0, #0
   8a5b4:	bf18      	it	ne
   8a5b6:	f04f 35ff 	movne.w	r5, #4294967295
   8a5ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8a5be:	065b      	lsls	r3, r3, #25
   8a5c0:	d503      	bpl.n	8a5ca <__sbprintf+0x7a>
   8a5c2:	89a3      	ldrh	r3, [r4, #12]
   8a5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a5c8:	81a3      	strh	r3, [r4, #12]
   8a5ca:	9816      	ldr	r0, [sp, #88]	; 0x58
   8a5cc:	f001 fd34 	bl	8c038 <__retarget_lock_close_recursive>
   8a5d0:	4628      	mov	r0, r5
   8a5d2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008a5d8 <__swsetup_r>:
   8a5d8:	b538      	push	{r3, r4, r5, lr}
   8a5da:	4b32      	ldr	r3, [pc, #200]	; (8a6a4 <__swsetup_r+0xcc>)
   8a5dc:	4605      	mov	r5, r0
   8a5de:	6818      	ldr	r0, [r3, #0]
   8a5e0:	460c      	mov	r4, r1
   8a5e2:	b110      	cbz	r0, 8a5ea <__swsetup_r+0x12>
   8a5e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a5e6:	2b00      	cmp	r3, #0
   8a5e8:	d03c      	beq.n	8a664 <__swsetup_r+0x8c>
   8a5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a5ee:	0718      	lsls	r0, r3, #28
   8a5f0:	b29a      	uxth	r2, r3
   8a5f2:	d50c      	bpl.n	8a60e <__swsetup_r+0x36>
   8a5f4:	6921      	ldr	r1, [r4, #16]
   8a5f6:	b1a9      	cbz	r1, 8a624 <__swsetup_r+0x4c>
   8a5f8:	f012 0001 	ands.w	r0, r2, #1
   8a5fc:	d022      	beq.n	8a644 <__swsetup_r+0x6c>
   8a5fe:	2500      	movs	r5, #0
   8a600:	6960      	ldr	r0, [r4, #20]
   8a602:	60a5      	str	r5, [r4, #8]
   8a604:	4240      	negs	r0, r0
   8a606:	61a0      	str	r0, [r4, #24]
   8a608:	b311      	cbz	r1, 8a650 <__swsetup_r+0x78>
   8a60a:	2000      	movs	r0, #0
   8a60c:	bd38      	pop	{r3, r4, r5, pc}
   8a60e:	06d1      	lsls	r1, r2, #27
   8a610:	d53f      	bpl.n	8a692 <__swsetup_r+0xba>
   8a612:	0752      	lsls	r2, r2, #29
   8a614:	d429      	bmi.n	8a66a <__swsetup_r+0x92>
   8a616:	6921      	ldr	r1, [r4, #16]
   8a618:	f043 0308 	orr.w	r3, r3, #8
   8a61c:	81a3      	strh	r3, [r4, #12]
   8a61e:	b29a      	uxth	r2, r3
   8a620:	2900      	cmp	r1, #0
   8a622:	d1e9      	bne.n	8a5f8 <__swsetup_r+0x20>
   8a624:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8a628:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8a62c:	d0e4      	beq.n	8a5f8 <__swsetup_r+0x20>
   8a62e:	4628      	mov	r0, r5
   8a630:	4621      	mov	r1, r4
   8a632:	f001 fd35 	bl	8c0a0 <__smakebuf_r>
   8a636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a63a:	6921      	ldr	r1, [r4, #16]
   8a63c:	b29a      	uxth	r2, r3
   8a63e:	f012 0001 	ands.w	r0, r2, #1
   8a642:	d1dc      	bne.n	8a5fe <__swsetup_r+0x26>
   8a644:	0795      	lsls	r5, r2, #30
   8a646:	bf58      	it	pl
   8a648:	6960      	ldrpl	r0, [r4, #20]
   8a64a:	60a0      	str	r0, [r4, #8]
   8a64c:	2900      	cmp	r1, #0
   8a64e:	d1dc      	bne.n	8a60a <__swsetup_r+0x32>
   8a650:	0612      	lsls	r2, r2, #24
   8a652:	bf58      	it	pl
   8a654:	4608      	movpl	r0, r1
   8a656:	d5d9      	bpl.n	8a60c <__swsetup_r+0x34>
   8a658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a65c:	f04f 30ff 	mov.w	r0, #4294967295
   8a660:	81a3      	strh	r3, [r4, #12]
   8a662:	bd38      	pop	{r3, r4, r5, pc}
   8a664:	f001 f918 	bl	8b898 <__sinit>
   8a668:	e7bf      	b.n	8a5ea <__swsetup_r+0x12>
   8a66a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a66c:	b151      	cbz	r1, 8a684 <__swsetup_r+0xac>
   8a66e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8a672:	4291      	cmp	r1, r2
   8a674:	d004      	beq.n	8a680 <__swsetup_r+0xa8>
   8a676:	4628      	mov	r0, r5
   8a678:	f001 fa32 	bl	8bae0 <_free_r>
   8a67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a680:	2200      	movs	r2, #0
   8a682:	6322      	str	r2, [r4, #48]	; 0x30
   8a684:	2200      	movs	r2, #0
   8a686:	6921      	ldr	r1, [r4, #16]
   8a688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8a68c:	e9c4 1200 	strd	r1, r2, [r4]
   8a690:	e7c2      	b.n	8a618 <__swsetup_r+0x40>
   8a692:	2209      	movs	r2, #9
   8a694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a698:	602a      	str	r2, [r5, #0]
   8a69a:	f04f 30ff 	mov.w	r0, #4294967295
   8a69e:	81a3      	strh	r3, [r4, #12]
   8a6a0:	bd38      	pop	{r3, r4, r5, pc}
   8a6a2:	bf00      	nop
   8a6a4:	20000718 	.word	0x20000718

0008a6a8 <register_fini>:
   8a6a8:	4b02      	ldr	r3, [pc, #8]	; (8a6b4 <register_fini+0xc>)
   8a6aa:	b113      	cbz	r3, 8a6b2 <register_fini+0xa>
   8a6ac:	4802      	ldr	r0, [pc, #8]	; (8a6b8 <register_fini+0x10>)
   8a6ae:	f000 b805 	b.w	8a6bc <atexit>
   8a6b2:	4770      	bx	lr
   8a6b4:	00000000 	.word	0x00000000
   8a6b8:	0008b90d 	.word	0x0008b90d

0008a6bc <atexit>:
   8a6bc:	2300      	movs	r3, #0
   8a6be:	4601      	mov	r1, r0
   8a6c0:	461a      	mov	r2, r3
   8a6c2:	4618      	mov	r0, r3
   8a6c4:	f003 b82c 	b.w	8d720 <__register_exitproc>

0008a6c8 <quorem>:
   8a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a6cc:	6903      	ldr	r3, [r0, #16]
   8a6ce:	690d      	ldr	r5, [r1, #16]
   8a6d0:	b083      	sub	sp, #12
   8a6d2:	42ab      	cmp	r3, r5
   8a6d4:	f2c0 8084 	blt.w	8a7e0 <quorem+0x118>
   8a6d8:	3d01      	subs	r5, #1
   8a6da:	f101 0614 	add.w	r6, r1, #20
   8a6de:	f100 0914 	add.w	r9, r0, #20
   8a6e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8a6e6:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a6ea:	3301      	adds	r3, #1
   8a6ec:	468e      	mov	lr, r1
   8a6ee:	00a9      	lsls	r1, r5, #2
   8a6f0:	9100      	str	r1, [sp, #0]
   8a6f2:	429a      	cmp	r2, r3
   8a6f4:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   8a6f8:	4682      	mov	sl, r0
   8a6fa:	fbb2 f7f3 	udiv	r7, r2, r3
   8a6fe:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8a702:	9101      	str	r1, [sp, #4]
   8a704:	d337      	bcc.n	8a776 <quorem+0xae>
   8a706:	2200      	movs	r2, #0
   8a708:	46b4      	mov	ip, r6
   8a70a:	4614      	mov	r4, r2
   8a70c:	4648      	mov	r0, r9
   8a70e:	f85c 3b04 	ldr.w	r3, [ip], #4
   8a712:	6801      	ldr	r1, [r0, #0]
   8a714:	fa1f fb83 	uxth.w	fp, r3
   8a718:	fb07 220b 	mla	r2, r7, fp, r2
   8a71c:	0c1b      	lsrs	r3, r3, #16
   8a71e:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8a722:	fb07 bb03 	mla	fp, r7, r3, fp
   8a726:	b293      	uxth	r3, r2
   8a728:	1ae3      	subs	r3, r4, r3
   8a72a:	b28a      	uxth	r2, r1
   8a72c:	fa1f f48b 	uxth.w	r4, fp
   8a730:	4413      	add	r3, r2
   8a732:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8a736:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8a73a:	b29b      	uxth	r3, r3
   8a73c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8a740:	45e0      	cmp	r8, ip
   8a742:	f840 3b04 	str.w	r3, [r0], #4
   8a746:	ea4f 4424 	mov.w	r4, r4, asr #16
   8a74a:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8a74e:	d2de      	bcs.n	8a70e <quorem+0x46>
   8a750:	9b00      	ldr	r3, [sp, #0]
   8a752:	f859 3003 	ldr.w	r3, [r9, r3]
   8a756:	b973      	cbnz	r3, 8a776 <quorem+0xae>
   8a758:	9b01      	ldr	r3, [sp, #4]
   8a75a:	3b04      	subs	r3, #4
   8a75c:	4599      	cmp	r9, r3
   8a75e:	d304      	bcc.n	8a76a <quorem+0xa2>
   8a760:	e007      	b.n	8a772 <quorem+0xaa>
   8a762:	4599      	cmp	r9, r3
   8a764:	f105 35ff 	add.w	r5, r5, #4294967295
   8a768:	d203      	bcs.n	8a772 <quorem+0xaa>
   8a76a:	f853 2904 	ldr.w	r2, [r3], #-4
   8a76e:	2a00      	cmp	r2, #0
   8a770:	d0f7      	beq.n	8a762 <quorem+0x9a>
   8a772:	f8ca 5010 	str.w	r5, [sl, #16]
   8a776:	4671      	mov	r1, lr
   8a778:	4650      	mov	r0, sl
   8a77a:	f002 fab1 	bl	8cce0 <__mcmp>
   8a77e:	2800      	cmp	r0, #0
   8a780:	db2a      	blt.n	8a7d8 <quorem+0x110>
   8a782:	4648      	mov	r0, r9
   8a784:	2300      	movs	r3, #0
   8a786:	3701      	adds	r7, #1
   8a788:	f856 1b04 	ldr.w	r1, [r6], #4
   8a78c:	6804      	ldr	r4, [r0, #0]
   8a78e:	b28a      	uxth	r2, r1
   8a790:	1a9a      	subs	r2, r3, r2
   8a792:	0c0b      	lsrs	r3, r1, #16
   8a794:	b2a1      	uxth	r1, r4
   8a796:	440a      	add	r2, r1
   8a798:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   8a79c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8a7a0:	b292      	uxth	r2, r2
   8a7a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8a7a6:	45b0      	cmp	r8, r6
   8a7a8:	f840 2b04 	str.w	r2, [r0], #4
   8a7ac:	ea4f 4323 	mov.w	r3, r3, asr #16
   8a7b0:	d2ea      	bcs.n	8a788 <quorem+0xc0>
   8a7b2:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8a7b6:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   8a7ba:	b96a      	cbnz	r2, 8a7d8 <quorem+0x110>
   8a7bc:	3b04      	subs	r3, #4
   8a7be:	4599      	cmp	r9, r3
   8a7c0:	d304      	bcc.n	8a7cc <quorem+0x104>
   8a7c2:	e007      	b.n	8a7d4 <quorem+0x10c>
   8a7c4:	4599      	cmp	r9, r3
   8a7c6:	f105 35ff 	add.w	r5, r5, #4294967295
   8a7ca:	d203      	bcs.n	8a7d4 <quorem+0x10c>
   8a7cc:	f853 2904 	ldr.w	r2, [r3], #-4
   8a7d0:	2a00      	cmp	r2, #0
   8a7d2:	d0f7      	beq.n	8a7c4 <quorem+0xfc>
   8a7d4:	f8ca 5010 	str.w	r5, [sl, #16]
   8a7d8:	4638      	mov	r0, r7
   8a7da:	b003      	add	sp, #12
   8a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a7e0:	2000      	movs	r0, #0
   8a7e2:	b003      	add	sp, #12
   8a7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008a7e8 <_dtoa_r>:
   8a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a7ec:	4616      	mov	r6, r2
   8a7ee:	461f      	mov	r7, r3
   8a7f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8a7f2:	b09b      	sub	sp, #108	; 0x6c
   8a7f4:	4604      	mov	r4, r0
   8a7f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8a7fa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8a7fc:	b141      	cbz	r1, 8a810 <_dtoa_r+0x28>
   8a7fe:	2301      	movs	r3, #1
   8a800:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8a802:	4093      	lsls	r3, r2
   8a804:	e9c1 2301 	strd	r2, r3, [r1, #4]
   8a808:	f002 f83c 	bl	8c884 <_Bfree>
   8a80c:	2300      	movs	r3, #0
   8a80e:	6423      	str	r3, [r4, #64]	; 0x40
   8a810:	f1b7 0900 	subs.w	r9, r7, #0
   8a814:	bfb4      	ite	lt
   8a816:	2301      	movlt	r3, #1
   8a818:	2300      	movge	r3, #0
   8a81a:	602b      	str	r3, [r5, #0]
   8a81c:	4b76      	ldr	r3, [pc, #472]	; (8a9f8 <_dtoa_r+0x210>)
   8a81e:	bfbc      	itt	lt
   8a820:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8a824:	f8cd 9014 	strlt.w	r9, [sp, #20]
   8a828:	ea33 0309 	bics.w	r3, r3, r9
   8a82c:	f000 80ab 	beq.w	8a986 <_dtoa_r+0x19e>
   8a830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a834:	4610      	mov	r0, r2
   8a836:	4619      	mov	r1, r3
   8a838:	2200      	movs	r2, #0
   8a83a:	2300      	movs	r3, #0
   8a83c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   8a840:	f003 fd5a 	bl	8e2f8 <__aeabi_dcmpeq>
   8a844:	4680      	mov	r8, r0
   8a846:	b170      	cbz	r0, 8a866 <_dtoa_r+0x7e>
   8a848:	2301      	movs	r3, #1
   8a84a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a84c:	6013      	str	r3, [r2, #0]
   8a84e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a850:	2b00      	cmp	r3, #0
   8a852:	f000 82c2 	beq.w	8adda <_dtoa_r+0x5f2>
   8a856:	4869      	ldr	r0, [pc, #420]	; (8a9fc <_dtoa_r+0x214>)
   8a858:	6018      	str	r0, [r3, #0]
   8a85a:	1e43      	subs	r3, r0, #1
   8a85c:	9303      	str	r3, [sp, #12]
   8a85e:	9803      	ldr	r0, [sp, #12]
   8a860:	b01b      	add	sp, #108	; 0x6c
   8a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a866:	aa18      	add	r2, sp, #96	; 0x60
   8a868:	ab19      	add	r3, sp, #100	; 0x64
   8a86a:	e9cd 3200 	strd	r3, r2, [sp]
   8a86e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a872:	4620      	mov	r0, r4
   8a874:	f002 fafa 	bl	8ce6c <__d2b>
   8a878:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8a87c:	4682      	mov	sl, r0
   8a87e:	f040 8098 	bne.w	8a9b2 <_dtoa_r+0x1ca>
   8a882:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   8a886:	4445      	add	r5, r8
   8a888:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8a88c:	2820      	cmp	r0, #32
   8a88e:	f340 8390 	ble.w	8afb2 <_dtoa_r+0x7ca>
   8a892:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   8a896:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8a89a:	fa09 f903 	lsl.w	r9, r9, r3
   8a89e:	fa26 f000 	lsr.w	r0, r6, r0
   8a8a2:	ea49 0000 	orr.w	r0, r9, r0
   8a8a6:	f003 fa45 	bl	8dd34 <__aeabi_ui2d>
   8a8aa:	2201      	movs	r2, #1
   8a8ac:	3d01      	subs	r5, #1
   8a8ae:	920f      	str	r2, [sp, #60]	; 0x3c
   8a8b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8a8b4:	2200      	movs	r2, #0
   8a8b6:	4b52      	ldr	r3, [pc, #328]	; (8aa00 <_dtoa_r+0x218>)
   8a8b8:	f003 f8fe 	bl	8dab8 <__aeabi_dsub>
   8a8bc:	a348      	add	r3, pc, #288	; (adr r3, 8a9e0 <_dtoa_r+0x1f8>)
   8a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8c2:	f003 fab1 	bl	8de28 <__aeabi_dmul>
   8a8c6:	a348      	add	r3, pc, #288	; (adr r3, 8a9e8 <_dtoa_r+0x200>)
   8a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8cc:	f003 f8f6 	bl	8dabc <__adddf3>
   8a8d0:	4606      	mov	r6, r0
   8a8d2:	4628      	mov	r0, r5
   8a8d4:	460f      	mov	r7, r1
   8a8d6:	f003 fa3d 	bl	8dd54 <__aeabi_i2d>
   8a8da:	a345      	add	r3, pc, #276	; (adr r3, 8a9f0 <_dtoa_r+0x208>)
   8a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a8e0:	f003 faa2 	bl	8de28 <__aeabi_dmul>
   8a8e4:	4602      	mov	r2, r0
   8a8e6:	460b      	mov	r3, r1
   8a8e8:	4630      	mov	r0, r6
   8a8ea:	4639      	mov	r1, r7
   8a8ec:	f003 f8e6 	bl	8dabc <__adddf3>
   8a8f0:	4606      	mov	r6, r0
   8a8f2:	460f      	mov	r7, r1
   8a8f4:	f003 fd48 	bl	8e388 <__aeabi_d2iz>
   8a8f8:	2200      	movs	r2, #0
   8a8fa:	4683      	mov	fp, r0
   8a8fc:	2300      	movs	r3, #0
   8a8fe:	4630      	mov	r0, r6
   8a900:	4639      	mov	r1, r7
   8a902:	f003 fd03 	bl	8e30c <__aeabi_dcmplt>
   8a906:	2800      	cmp	r0, #0
   8a908:	f040 825a 	bne.w	8adc0 <_dtoa_r+0x5d8>
   8a90c:	f1bb 0f16 	cmp.w	fp, #22
   8a910:	f200 8248 	bhi.w	8ada4 <_dtoa_r+0x5bc>
   8a914:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a918:	4b3a      	ldr	r3, [pc, #232]	; (8aa04 <_dtoa_r+0x21c>)
   8a91a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a922:	f003 fcf3 	bl	8e30c <__aeabi_dcmplt>
   8a926:	2800      	cmp	r0, #0
   8a928:	d072      	beq.n	8aa10 <_dtoa_r+0x228>
   8a92a:	2300      	movs	r3, #0
   8a92c:	eba8 0505 	sub.w	r5, r8, r5
   8a930:	930e      	str	r3, [sp, #56]	; 0x38
   8a932:	1e6b      	subs	r3, r5, #1
   8a934:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a938:	9306      	str	r3, [sp, #24]
   8a93a:	f100 823b 	bmi.w	8adb4 <_dtoa_r+0x5cc>
   8a93e:	2300      	movs	r3, #0
   8a940:	930b      	str	r3, [sp, #44]	; 0x2c
   8a942:	f1bb 0f00 	cmp.w	fp, #0
   8a946:	da6b      	bge.n	8aa20 <_dtoa_r+0x238>
   8a948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a94a:	f8cd b01c 	str.w	fp, [sp, #28]
   8a94e:	eba3 030b 	sub.w	r3, r3, fp
   8a952:	930b      	str	r3, [sp, #44]	; 0x2c
   8a954:	f1cb 0300 	rsb	r3, fp, #0
   8a958:	930d      	str	r3, [sp, #52]	; 0x34
   8a95a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a95c:	f04f 0b00 	mov.w	fp, #0
   8a960:	2b09      	cmp	r3, #9
   8a962:	d866      	bhi.n	8aa32 <_dtoa_r+0x24a>
   8a964:	2b05      	cmp	r3, #5
   8a966:	f340 8322 	ble.w	8afae <_dtoa_r+0x7c6>
   8a96a:	2500      	movs	r5, #0
   8a96c:	3b04      	subs	r3, #4
   8a96e:	9324      	str	r3, [sp, #144]	; 0x90
   8a970:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a972:	3b02      	subs	r3, #2
   8a974:	2b03      	cmp	r3, #3
   8a976:	f200 866e 	bhi.w	8b656 <_dtoa_r+0xe6e>
   8a97a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8a97e:	043b      	.short	0x043b
   8a980:	042f0438 	.word	0x042f0438
   8a984:	0412      	.short	0x0412
   8a986:	f242 730f 	movw	r3, #9999	; 0x270f
   8a98a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8a98c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   8a990:	6013      	str	r3, [r2, #0]
   8a992:	ea59 0306 	orrs.w	r3, r9, r6
   8a996:	d11c      	bne.n	8a9d2 <_dtoa_r+0x1ea>
   8a998:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a99a:	2b00      	cmp	r3, #0
   8a99c:	f000 8657 	beq.w	8b64e <_dtoa_r+0xe66>
   8a9a0:	4b19      	ldr	r3, [pc, #100]	; (8aa08 <_dtoa_r+0x220>)
   8a9a2:	9303      	str	r3, [sp, #12]
   8a9a4:	3308      	adds	r3, #8
   8a9a6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8a9a8:	9803      	ldr	r0, [sp, #12]
   8a9aa:	6013      	str	r3, [r2, #0]
   8a9ac:	b01b      	add	sp, #108	; 0x6c
   8a9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9b2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8a9b6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a9ba:	4608      	mov	r0, r1
   8a9bc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   8a9c0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8a9c4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   8a9c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8a9cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8a9d0:	e770      	b.n	8a8b4 <_dtoa_r+0xcc>
   8a9d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a9d4:	2b00      	cmp	r3, #0
   8a9d6:	f040 83c8 	bne.w	8b16a <_dtoa_r+0x982>
   8a9da:	4b0c      	ldr	r3, [pc, #48]	; (8aa0c <_dtoa_r+0x224>)
   8a9dc:	9303      	str	r3, [sp, #12]
   8a9de:	e73e      	b.n	8a85e <_dtoa_r+0x76>
   8a9e0:	636f4361 	.word	0x636f4361
   8a9e4:	3fd287a7 	.word	0x3fd287a7
   8a9e8:	8b60c8b3 	.word	0x8b60c8b3
   8a9ec:	3fc68a28 	.word	0x3fc68a28
   8a9f0:	509f79fb 	.word	0x509f79fb
   8a9f4:	3fd34413 	.word	0x3fd34413
   8a9f8:	7ff00000 	.word	0x7ff00000
   8a9fc:	0008e6a9 	.word	0x0008e6a9
   8aa00:	3ff80000 	.word	0x3ff80000
   8aa04:	0008e848 	.word	0x0008e848
   8aa08:	0008e6f0 	.word	0x0008e6f0
   8aa0c:	0008e6ec 	.word	0x0008e6ec
   8aa10:	eba8 0505 	sub.w	r5, r8, r5
   8aa14:	1e6b      	subs	r3, r5, #1
   8aa16:	9306      	str	r3, [sp, #24]
   8aa18:	f100 84a9 	bmi.w	8b36e <_dtoa_r+0xb86>
   8aa1c:	900e      	str	r0, [sp, #56]	; 0x38
   8aa1e:	900b      	str	r0, [sp, #44]	; 0x2c
   8aa20:	9b06      	ldr	r3, [sp, #24]
   8aa22:	445b      	add	r3, fp
   8aa24:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8aa28:	2300      	movs	r3, #0
   8aa2a:	930d      	str	r3, [sp, #52]	; 0x34
   8aa2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8aa2e:	2b09      	cmp	r3, #9
   8aa30:	d998      	bls.n	8a964 <_dtoa_r+0x17c>
   8aa32:	2300      	movs	r3, #0
   8aa34:	2501      	movs	r5, #1
   8aa36:	9324      	str	r3, [sp, #144]	; 0x90
   8aa38:	9325      	str	r3, [sp, #148]	; 0x94
   8aa3a:	f04f 33ff 	mov.w	r3, #4294967295
   8aa3e:	950c      	str	r5, [sp, #48]	; 0x30
   8aa40:	930a      	str	r3, [sp, #40]	; 0x28
   8aa42:	2100      	movs	r1, #0
   8aa44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa46:	6461      	str	r1, [r4, #68]	; 0x44
   8aa48:	9312      	str	r3, [sp, #72]	; 0x48
   8aa4a:	4620      	mov	r0, r4
   8aa4c:	f001 fef4 	bl	8c838 <_Balloc>
   8aa50:	9003      	str	r0, [sp, #12]
   8aa52:	2800      	cmp	r0, #0
   8aa54:	f000 8607 	beq.w	8b666 <_dtoa_r+0xe7e>
   8aa58:	9b03      	ldr	r3, [sp, #12]
   8aa5a:	6423      	str	r3, [r4, #64]	; 0x40
   8aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa5e:	2b0e      	cmp	r3, #14
   8aa60:	f200 80e9 	bhi.w	8ac36 <_dtoa_r+0x44e>
   8aa64:	2d00      	cmp	r5, #0
   8aa66:	f000 80e6 	beq.w	8ac36 <_dtoa_r+0x44e>
   8aa6a:	9907      	ldr	r1, [sp, #28]
   8aa6c:	2900      	cmp	r1, #0
   8aa6e:	f340 8452 	ble.w	8b316 <_dtoa_r+0xb2e>
   8aa72:	4bb5      	ldr	r3, [pc, #724]	; (8ad48 <_dtoa_r+0x560>)
   8aa74:	f001 020f 	and.w	r2, r1, #15
   8aa78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8aa7c:	05c8      	lsls	r0, r1, #23
   8aa7e:	ea4f 1521 	mov.w	r5, r1, asr #4
   8aa82:	e9d3 6700 	ldrd	r6, r7, [r3]
   8aa86:	f140 83ee 	bpl.w	8b266 <_dtoa_r+0xa7e>
   8aa8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8aa8e:	4baf      	ldr	r3, [pc, #700]	; (8ad4c <_dtoa_r+0x564>)
   8aa90:	f04f 0903 	mov.w	r9, #3
   8aa94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8aa98:	f003 faf0 	bl	8e07c <__aeabi_ddiv>
   8aa9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8aaa0:	f005 050f 	and.w	r5, r5, #15
   8aaa4:	b18d      	cbz	r5, 8aaca <_dtoa_r+0x2e2>
   8aaa6:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8ad4c <_dtoa_r+0x564>
   8aaaa:	07e9      	lsls	r1, r5, #31
   8aaac:	d509      	bpl.n	8aac2 <_dtoa_r+0x2da>
   8aaae:	e9d8 2300 	ldrd	r2, r3, [r8]
   8aab2:	4630      	mov	r0, r6
   8aab4:	4639      	mov	r1, r7
   8aab6:	f003 f9b7 	bl	8de28 <__aeabi_dmul>
   8aaba:	4606      	mov	r6, r0
   8aabc:	460f      	mov	r7, r1
   8aabe:	f109 0901 	add.w	r9, r9, #1
   8aac2:	106d      	asrs	r5, r5, #1
   8aac4:	f108 0808 	add.w	r8, r8, #8
   8aac8:	d1ef      	bne.n	8aaaa <_dtoa_r+0x2c2>
   8aaca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8aace:	4632      	mov	r2, r6
   8aad0:	463b      	mov	r3, r7
   8aad2:	f003 fad3 	bl	8e07c <__aeabi_ddiv>
   8aad6:	4606      	mov	r6, r0
   8aad8:	460f      	mov	r7, r1
   8aada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8aadc:	b143      	cbz	r3, 8aaf0 <_dtoa_r+0x308>
   8aade:	2200      	movs	r2, #0
   8aae0:	4630      	mov	r0, r6
   8aae2:	4639      	mov	r1, r7
   8aae4:	4b9a      	ldr	r3, [pc, #616]	; (8ad50 <_dtoa_r+0x568>)
   8aae6:	f003 fc11 	bl	8e30c <__aeabi_dcmplt>
   8aaea:	2800      	cmp	r0, #0
   8aaec:	f040 853b 	bne.w	8b566 <_dtoa_r+0xd7e>
   8aaf0:	4648      	mov	r0, r9
   8aaf2:	f003 f92f 	bl	8dd54 <__aeabi_i2d>
   8aaf6:	4632      	mov	r2, r6
   8aaf8:	463b      	mov	r3, r7
   8aafa:	f003 f995 	bl	8de28 <__aeabi_dmul>
   8aafe:	4b95      	ldr	r3, [pc, #596]	; (8ad54 <_dtoa_r+0x56c>)
   8ab00:	2200      	movs	r2, #0
   8ab02:	f002 ffdb 	bl	8dabc <__adddf3>
   8ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ab08:	4680      	mov	r8, r0
   8ab0a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8ab0e:	2b00      	cmp	r3, #0
   8ab10:	f000 83ce 	beq.w	8b2b0 <_dtoa_r+0xac8>
   8ab14:	9b07      	ldr	r3, [sp, #28]
   8ab16:	9313      	str	r3, [sp, #76]	; 0x4c
   8ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ab1a:	9310      	str	r3, [sp, #64]	; 0x40
   8ab1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ab1e:	2b00      	cmp	r3, #0
   8ab20:	f000 84b7 	beq.w	8b492 <_dtoa_r+0xcaa>
   8ab24:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8ab26:	4b88      	ldr	r3, [pc, #544]	; (8ad48 <_dtoa_r+0x560>)
   8ab28:	2000      	movs	r0, #0
   8ab2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ab2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8ab32:	4989      	ldr	r1, [pc, #548]	; (8ad58 <_dtoa_r+0x570>)
   8ab34:	f003 faa2 	bl	8e07c <__aeabi_ddiv>
   8ab38:	4642      	mov	r2, r8
   8ab3a:	464b      	mov	r3, r9
   8ab3c:	f002 ffbc 	bl	8dab8 <__aeabi_dsub>
   8ab40:	4602      	mov	r2, r0
   8ab42:	460b      	mov	r3, r1
   8ab44:	4630      	mov	r0, r6
   8ab46:	4639      	mov	r1, r7
   8ab48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8ab4c:	f003 fc1c 	bl	8e388 <__aeabi_d2iz>
   8ab50:	4680      	mov	r8, r0
   8ab52:	f003 f8ff 	bl	8dd54 <__aeabi_i2d>
   8ab56:	4602      	mov	r2, r0
   8ab58:	460b      	mov	r3, r1
   8ab5a:	4630      	mov	r0, r6
   8ab5c:	4639      	mov	r1, r7
   8ab5e:	f002 ffab 	bl	8dab8 <__aeabi_dsub>
   8ab62:	9d03      	ldr	r5, [sp, #12]
   8ab64:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ab68:	4606      	mov	r6, r0
   8ab6a:	460f      	mov	r7, r1
   8ab6c:	4602      	mov	r2, r0
   8ab6e:	f805 3b01 	strb.w	r3, [r5], #1
   8ab72:	460b      	mov	r3, r1
   8ab74:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8ab78:	f003 fbe6 	bl	8e348 <__aeabi_dcmpgt>
   8ab7c:	2800      	cmp	r0, #0
   8ab7e:	f040 853b 	bne.w	8b5f8 <_dtoa_r+0xe10>
   8ab82:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8ab86:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8ab8a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8ab8e:	f04f 0900 	mov.w	r9, #0
   8ab92:	9410      	str	r4, [sp, #64]	; 0x40
   8ab94:	e02a      	b.n	8abec <_dtoa_r+0x404>
   8ab96:	f109 0901 	add.w	r9, r9, #1
   8ab9a:	45c1      	cmp	r9, r8
   8ab9c:	da48      	bge.n	8ac30 <_dtoa_r+0x448>
   8ab9e:	4650      	mov	r0, sl
   8aba0:	4659      	mov	r1, fp
   8aba2:	2200      	movs	r2, #0
   8aba4:	4b6d      	ldr	r3, [pc, #436]	; (8ad5c <_dtoa_r+0x574>)
   8aba6:	f003 f93f 	bl	8de28 <__aeabi_dmul>
   8abaa:	2200      	movs	r2, #0
   8abac:	4b6b      	ldr	r3, [pc, #428]	; (8ad5c <_dtoa_r+0x574>)
   8abae:	4682      	mov	sl, r0
   8abb0:	468b      	mov	fp, r1
   8abb2:	4630      	mov	r0, r6
   8abb4:	4639      	mov	r1, r7
   8abb6:	f003 f937 	bl	8de28 <__aeabi_dmul>
   8abba:	460f      	mov	r7, r1
   8abbc:	4606      	mov	r6, r0
   8abbe:	f003 fbe3 	bl	8e388 <__aeabi_d2iz>
   8abc2:	4604      	mov	r4, r0
   8abc4:	f003 f8c6 	bl	8dd54 <__aeabi_i2d>
   8abc8:	4602      	mov	r2, r0
   8abca:	460b      	mov	r3, r1
   8abcc:	4630      	mov	r0, r6
   8abce:	4639      	mov	r1, r7
   8abd0:	f002 ff72 	bl	8dab8 <__aeabi_dsub>
   8abd4:	3430      	adds	r4, #48	; 0x30
   8abd6:	4652      	mov	r2, sl
   8abd8:	465b      	mov	r3, fp
   8abda:	f805 4b01 	strb.w	r4, [r5], #1
   8abde:	4606      	mov	r6, r0
   8abe0:	460f      	mov	r7, r1
   8abe2:	f003 fb93 	bl	8e30c <__aeabi_dcmplt>
   8abe6:	2800      	cmp	r0, #0
   8abe8:	f040 8503 	bne.w	8b5f2 <_dtoa_r+0xe0a>
   8abec:	4632      	mov	r2, r6
   8abee:	463b      	mov	r3, r7
   8abf0:	2000      	movs	r0, #0
   8abf2:	4957      	ldr	r1, [pc, #348]	; (8ad50 <_dtoa_r+0x568>)
   8abf4:	f002 ff60 	bl	8dab8 <__aeabi_dsub>
   8abf8:	4652      	mov	r2, sl
   8abfa:	465b      	mov	r3, fp
   8abfc:	f003 fb86 	bl	8e30c <__aeabi_dcmplt>
   8ac00:	2800      	cmp	r0, #0
   8ac02:	d0c8      	beq.n	8ab96 <_dtoa_r+0x3ae>
   8ac04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8ac06:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8ac0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ac0c:	9a03      	ldr	r2, [sp, #12]
   8ac0e:	9307      	str	r3, [sp, #28]
   8ac10:	e002      	b.n	8ac18 <_dtoa_r+0x430>
   8ac12:	4295      	cmp	r5, r2
   8ac14:	f000 84d2 	beq.w	8b5bc <_dtoa_r+0xdd4>
   8ac18:	46a9      	mov	r9, r5
   8ac1a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8ac1e:	2b39      	cmp	r3, #57	; 0x39
   8ac20:	d0f7      	beq.n	8ac12 <_dtoa_r+0x42a>
   8ac22:	3301      	adds	r3, #1
   8ac24:	b2db      	uxtb	r3, r3
   8ac26:	702b      	strb	r3, [r5, #0]
   8ac28:	9b07      	ldr	r3, [sp, #28]
   8ac2a:	3301      	adds	r3, #1
   8ac2c:	9307      	str	r3, [sp, #28]
   8ac2e:	e1a0      	b.n	8af72 <_dtoa_r+0x78a>
   8ac30:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8ac32:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8ac36:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8ac38:	2b00      	cmp	r3, #0
   8ac3a:	f2c0 8093 	blt.w	8ad64 <_dtoa_r+0x57c>
   8ac3e:	9a07      	ldr	r2, [sp, #28]
   8ac40:	2a0e      	cmp	r2, #14
   8ac42:	f300 808f 	bgt.w	8ad64 <_dtoa_r+0x57c>
   8ac46:	4b40      	ldr	r3, [pc, #256]	; (8ad48 <_dtoa_r+0x560>)
   8ac48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8ac4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ac50:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8ac54:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ac56:	2b00      	cmp	r3, #0
   8ac58:	da1a      	bge.n	8ac90 <_dtoa_r+0x4a8>
   8ac5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ac5c:	2b00      	cmp	r3, #0
   8ac5e:	dc17      	bgt.n	8ac90 <_dtoa_r+0x4a8>
   8ac60:	f040 833f 	bne.w	8b2e2 <_dtoa_r+0xafa>
   8ac64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8ac68:	2200      	movs	r2, #0
   8ac6a:	4b3d      	ldr	r3, [pc, #244]	; (8ad60 <_dtoa_r+0x578>)
   8ac6c:	f003 f8dc 	bl	8de28 <__aeabi_dmul>
   8ac70:	4602      	mov	r2, r0
   8ac72:	460b      	mov	r3, r1
   8ac74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac78:	f003 fb52 	bl	8e320 <__aeabi_dcmple>
   8ac7c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8ac80:	4645      	mov	r5, r8
   8ac82:	2800      	cmp	r0, #0
   8ac84:	f000 82cd 	beq.w	8b222 <_dtoa_r+0xa3a>
   8ac88:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8ac8a:	9f03      	ldr	r7, [sp, #12]
   8ac8c:	43de      	mvns	r6, r3
   8ac8e:	e2d0      	b.n	8b232 <_dtoa_r+0xa4a>
   8ac90:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8ac94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8ac98:	4632      	mov	r2, r6
   8ac9a:	463b      	mov	r3, r7
   8ac9c:	f003 f9ee 	bl	8e07c <__aeabi_ddiv>
   8aca0:	f003 fb72 	bl	8e388 <__aeabi_d2iz>
   8aca4:	4680      	mov	r8, r0
   8aca6:	f003 f855 	bl	8dd54 <__aeabi_i2d>
   8acaa:	4632      	mov	r2, r6
   8acac:	463b      	mov	r3, r7
   8acae:	f003 f8bb 	bl	8de28 <__aeabi_dmul>
   8acb2:	460b      	mov	r3, r1
   8acb4:	4602      	mov	r2, r0
   8acb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8acba:	f002 fefd 	bl	8dab8 <__aeabi_dsub>
   8acbe:	9d03      	ldr	r5, [sp, #12]
   8acc0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8acc4:	f805 3b01 	strb.w	r3, [r5], #1
   8acc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8acca:	2b01      	cmp	r3, #1
   8accc:	f000 837f 	beq.w	8b3ce <_dtoa_r+0xbe6>
   8acd0:	f8cd a018 	str.w	sl, [sp, #24]
   8acd4:	f04f 0901 	mov.w	r9, #1
   8acd8:	469b      	mov	fp, r3
   8acda:	46aa      	mov	sl, r5
   8acdc:	9408      	str	r4, [sp, #32]
   8acde:	e01d      	b.n	8ad1c <_dtoa_r+0x534>
   8ace0:	4632      	mov	r2, r6
   8ace2:	463b      	mov	r3, r7
   8ace4:	4620      	mov	r0, r4
   8ace6:	4629      	mov	r1, r5
   8ace8:	f003 f9c8 	bl	8e07c <__aeabi_ddiv>
   8acec:	f003 fb4c 	bl	8e388 <__aeabi_d2iz>
   8acf0:	4680      	mov	r8, r0
   8acf2:	f003 f82f 	bl	8dd54 <__aeabi_i2d>
   8acf6:	4632      	mov	r2, r6
   8acf8:	463b      	mov	r3, r7
   8acfa:	f003 f895 	bl	8de28 <__aeabi_dmul>
   8acfe:	f109 0901 	add.w	r9, r9, #1
   8ad02:	460b      	mov	r3, r1
   8ad04:	4602      	mov	r2, r0
   8ad06:	4629      	mov	r1, r5
   8ad08:	4620      	mov	r0, r4
   8ad0a:	f002 fed5 	bl	8dab8 <__aeabi_dsub>
   8ad0e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8ad12:	45cb      	cmp	fp, r9
   8ad14:	f80a 3b01 	strb.w	r3, [sl], #1
   8ad18:	f000 8355 	beq.w	8b3c6 <_dtoa_r+0xbde>
   8ad1c:	2200      	movs	r2, #0
   8ad1e:	4b0f      	ldr	r3, [pc, #60]	; (8ad5c <_dtoa_r+0x574>)
   8ad20:	f003 f882 	bl	8de28 <__aeabi_dmul>
   8ad24:	2200      	movs	r2, #0
   8ad26:	2300      	movs	r3, #0
   8ad28:	4604      	mov	r4, r0
   8ad2a:	460d      	mov	r5, r1
   8ad2c:	f003 fae4 	bl	8e2f8 <__aeabi_dcmpeq>
   8ad30:	2800      	cmp	r0, #0
   8ad32:	d0d5      	beq.n	8ace0 <_dtoa_r+0x4f8>
   8ad34:	4655      	mov	r5, sl
   8ad36:	9c08      	ldr	r4, [sp, #32]
   8ad38:	f8dd a018 	ldr.w	sl, [sp, #24]
   8ad3c:	9b07      	ldr	r3, [sp, #28]
   8ad3e:	46a9      	mov	r9, r5
   8ad40:	3301      	adds	r3, #1
   8ad42:	9307      	str	r3, [sp, #28]
   8ad44:	e115      	b.n	8af72 <_dtoa_r+0x78a>
   8ad46:	bf00      	nop
   8ad48:	0008e848 	.word	0x0008e848
   8ad4c:	0008e820 	.word	0x0008e820
   8ad50:	3ff00000 	.word	0x3ff00000
   8ad54:	401c0000 	.word	0x401c0000
   8ad58:	3fe00000 	.word	0x3fe00000
   8ad5c:	40240000 	.word	0x40240000
   8ad60:	40140000 	.word	0x40140000
   8ad64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8ad66:	2a00      	cmp	r2, #0
   8ad68:	d03d      	beq.n	8ade6 <_dtoa_r+0x5fe>
   8ad6a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8ad6c:	2a01      	cmp	r2, #1
   8ad6e:	f340 82bc 	ble.w	8b2ea <_dtoa_r+0xb02>
   8ad72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ad74:	1e5f      	subs	r7, r3, #1
   8ad76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ad78:	42bb      	cmp	r3, r7
   8ad7a:	f2c0 826e 	blt.w	8b25a <_dtoa_r+0xa72>
   8ad7e:	1bdf      	subs	r7, r3, r7
   8ad80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ad82:	2b00      	cmp	r3, #0
   8ad84:	f2c0 8354 	blt.w	8b430 <_dtoa_r+0xc48>
   8ad88:	9a06      	ldr	r2, [sp, #24]
   8ad8a:	4611      	mov	r1, r2
   8ad8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8ad8e:	4419      	add	r1, r3
   8ad90:	4616      	mov	r6, r2
   8ad92:	441a      	add	r2, r3
   8ad94:	9106      	str	r1, [sp, #24]
   8ad96:	920b      	str	r2, [sp, #44]	; 0x2c
   8ad98:	2101      	movs	r1, #1
   8ad9a:	4620      	mov	r0, r4
   8ad9c:	f001 fe1a 	bl	8c9d4 <__i2b>
   8ada0:	4605      	mov	r5, r0
   8ada2:	e023      	b.n	8adec <_dtoa_r+0x604>
   8ada4:	2301      	movs	r3, #1
   8ada6:	eba8 0505 	sub.w	r5, r8, r5
   8adaa:	930e      	str	r3, [sp, #56]	; 0x38
   8adac:	1e6b      	subs	r3, r5, #1
   8adae:	9306      	str	r3, [sp, #24]
   8adb0:	f57f adc5 	bpl.w	8a93e <_dtoa_r+0x156>
   8adb4:	f1c5 0301 	rsb	r3, r5, #1
   8adb8:	930b      	str	r3, [sp, #44]	; 0x2c
   8adba:	2300      	movs	r3, #0
   8adbc:	9306      	str	r3, [sp, #24]
   8adbe:	e5c0      	b.n	8a942 <_dtoa_r+0x15a>
   8adc0:	4658      	mov	r0, fp
   8adc2:	f002 ffc7 	bl	8dd54 <__aeabi_i2d>
   8adc6:	4632      	mov	r2, r6
   8adc8:	463b      	mov	r3, r7
   8adca:	f003 fa95 	bl	8e2f8 <__aeabi_dcmpeq>
   8adce:	2800      	cmp	r0, #0
   8add0:	f47f ad9c 	bne.w	8a90c <_dtoa_r+0x124>
   8add4:	f10b 3bff 	add.w	fp, fp, #4294967295
   8add8:	e598      	b.n	8a90c <_dtoa_r+0x124>
   8adda:	4bc7      	ldr	r3, [pc, #796]	; (8b0f8 <_dtoa_r+0x910>)
   8addc:	9303      	str	r3, [sp, #12]
   8adde:	9803      	ldr	r0, [sp, #12]
   8ade0:	b01b      	add	sp, #108	; 0x6c
   8ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ade6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8ade8:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8adec:	2e00      	cmp	r6, #0
   8adee:	dd0c      	ble.n	8ae0a <_dtoa_r+0x622>
   8adf0:	9a06      	ldr	r2, [sp, #24]
   8adf2:	2a00      	cmp	r2, #0
   8adf4:	dd09      	ble.n	8ae0a <_dtoa_r+0x622>
   8adf6:	42b2      	cmp	r2, r6
   8adf8:	4613      	mov	r3, r2
   8adfa:	bfa8      	it	ge
   8adfc:	4633      	movge	r3, r6
   8adfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8ae00:	1af6      	subs	r6, r6, r3
   8ae02:	1ac9      	subs	r1, r1, r3
   8ae04:	1ad3      	subs	r3, r2, r3
   8ae06:	910b      	str	r1, [sp, #44]	; 0x2c
   8ae08:	9306      	str	r3, [sp, #24]
   8ae0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ae0c:	b1d3      	cbz	r3, 8ae44 <_dtoa_r+0x65c>
   8ae0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8ae10:	2b00      	cmp	r3, #0
   8ae12:	f000 81a3 	beq.w	8b15c <_dtoa_r+0x974>
   8ae16:	2f00      	cmp	r7, #0
   8ae18:	dd10      	ble.n	8ae3c <_dtoa_r+0x654>
   8ae1a:	4629      	mov	r1, r5
   8ae1c:	463a      	mov	r2, r7
   8ae1e:	4620      	mov	r0, r4
   8ae20:	f001 fe9e 	bl	8cb60 <__pow5mult>
   8ae24:	4652      	mov	r2, sl
   8ae26:	4601      	mov	r1, r0
   8ae28:	4605      	mov	r5, r0
   8ae2a:	4620      	mov	r0, r4
   8ae2c:	f001 fde8 	bl	8ca00 <__multiply>
   8ae30:	4603      	mov	r3, r0
   8ae32:	4651      	mov	r1, sl
   8ae34:	4620      	mov	r0, r4
   8ae36:	469a      	mov	sl, r3
   8ae38:	f001 fd24 	bl	8c884 <_Bfree>
   8ae3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8ae3e:	1bda      	subs	r2, r3, r7
   8ae40:	f040 818d 	bne.w	8b15e <_dtoa_r+0x976>
   8ae44:	2101      	movs	r1, #1
   8ae46:	4620      	mov	r0, r4
   8ae48:	f001 fdc4 	bl	8c9d4 <__i2b>
   8ae4c:	f1bb 0f00 	cmp.w	fp, #0
   8ae50:	4680      	mov	r8, r0
   8ae52:	f300 80b3 	bgt.w	8afbc <_dtoa_r+0x7d4>
   8ae56:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ae58:	2b01      	cmp	r3, #1
   8ae5a:	f340 818a 	ble.w	8b172 <_dtoa_r+0x98a>
   8ae5e:	f04f 0900 	mov.w	r9, #0
   8ae62:	2001      	movs	r0, #1
   8ae64:	f1bb 0f00 	cmp.w	fp, #0
   8ae68:	f040 80b4 	bne.w	8afd4 <_dtoa_r+0x7ec>
   8ae6c:	9a06      	ldr	r2, [sp, #24]
   8ae6e:	4410      	add	r0, r2
   8ae70:	f010 001f 	ands.w	r0, r0, #31
   8ae74:	f000 8092 	beq.w	8af9c <_dtoa_r+0x7b4>
   8ae78:	f1c0 0320 	rsb	r3, r0, #32
   8ae7c:	2b04      	cmp	r3, #4
   8ae7e:	f340 83f9 	ble.w	8b674 <_dtoa_r+0xe8c>
   8ae82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8ae84:	f1c0 001c 	rsb	r0, r0, #28
   8ae88:	4403      	add	r3, r0
   8ae8a:	4402      	add	r2, r0
   8ae8c:	930b      	str	r3, [sp, #44]	; 0x2c
   8ae8e:	4406      	add	r6, r0
   8ae90:	9206      	str	r2, [sp, #24]
   8ae92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8ae94:	2b00      	cmp	r3, #0
   8ae96:	dd05      	ble.n	8aea4 <_dtoa_r+0x6bc>
   8ae98:	4651      	mov	r1, sl
   8ae9a:	461a      	mov	r2, r3
   8ae9c:	4620      	mov	r0, r4
   8ae9e:	f001 feab 	bl	8cbf8 <__lshift>
   8aea2:	4682      	mov	sl, r0
   8aea4:	9b06      	ldr	r3, [sp, #24]
   8aea6:	2b00      	cmp	r3, #0
   8aea8:	dd05      	ble.n	8aeb6 <_dtoa_r+0x6ce>
   8aeaa:	4641      	mov	r1, r8
   8aeac:	461a      	mov	r2, r3
   8aeae:	4620      	mov	r0, r4
   8aeb0:	f001 fea2 	bl	8cbf8 <__lshift>
   8aeb4:	4680      	mov	r8, r0
   8aeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8aeb8:	2b00      	cmp	r3, #0
   8aeba:	f040 8135 	bne.w	8b128 <_dtoa_r+0x940>
   8aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aec0:	2b00      	cmp	r3, #0
   8aec2:	f340 811b 	ble.w	8b0fc <_dtoa_r+0x914>
   8aec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aec8:	2b00      	cmp	r3, #0
   8aeca:	f040 809a 	bne.w	8b002 <_dtoa_r+0x81a>
   8aece:	9b07      	ldr	r3, [sp, #28]
   8aed0:	3301      	adds	r3, #1
   8aed2:	9307      	str	r3, [sp, #28]
   8aed4:	2601      	movs	r6, #1
   8aed6:	9f03      	ldr	r7, [sp, #12]
   8aed8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8aedc:	e007      	b.n	8aeee <_dtoa_r+0x706>
   8aede:	4651      	mov	r1, sl
   8aee0:	2300      	movs	r3, #0
   8aee2:	220a      	movs	r2, #10
   8aee4:	4620      	mov	r0, r4
   8aee6:	f001 fcd7 	bl	8c898 <__multadd>
   8aeea:	4682      	mov	sl, r0
   8aeec:	3601      	adds	r6, #1
   8aeee:	4641      	mov	r1, r8
   8aef0:	4650      	mov	r0, sl
   8aef2:	f7ff fbe9 	bl	8a6c8 <quorem>
   8aef6:	454e      	cmp	r6, r9
   8aef8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8aefc:	f807 3b01 	strb.w	r3, [r7], #1
   8af00:	dbed      	blt.n	8aede <_dtoa_r+0x6f6>
   8af02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8af04:	2600      	movs	r6, #0
   8af06:	2a00      	cmp	r2, #0
   8af08:	bfcc      	ite	gt
   8af0a:	4693      	movgt	fp, r2
   8af0c:	f04f 0b01 	movle.w	fp, #1
   8af10:	9a03      	ldr	r2, [sp, #12]
   8af12:	4493      	add	fp, r2
   8af14:	4651      	mov	r1, sl
   8af16:	2201      	movs	r2, #1
   8af18:	4620      	mov	r0, r4
   8af1a:	9304      	str	r3, [sp, #16]
   8af1c:	f001 fe6c 	bl	8cbf8 <__lshift>
   8af20:	4641      	mov	r1, r8
   8af22:	4682      	mov	sl, r0
   8af24:	f001 fedc 	bl	8cce0 <__mcmp>
   8af28:	2800      	cmp	r0, #0
   8af2a:	f340 81a8 	ble.w	8b27e <_dtoa_r+0xa96>
   8af2e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8af32:	9a03      	ldr	r2, [sp, #12]
   8af34:	f10b 3bff 	add.w	fp, fp, #4294967295
   8af38:	e004      	b.n	8af44 <_dtoa_r+0x75c>
   8af3a:	455a      	cmp	r2, fp
   8af3c:	f000 81e4 	beq.w	8b308 <_dtoa_r+0xb20>
   8af40:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8af44:	2b39      	cmp	r3, #57	; 0x39
   8af46:	f10b 0901 	add.w	r9, fp, #1
   8af4a:	d0f6      	beq.n	8af3a <_dtoa_r+0x752>
   8af4c:	3301      	adds	r3, #1
   8af4e:	f88b 3000 	strb.w	r3, [fp]
   8af52:	4641      	mov	r1, r8
   8af54:	4620      	mov	r0, r4
   8af56:	f001 fc95 	bl	8c884 <_Bfree>
   8af5a:	b155      	cbz	r5, 8af72 <_dtoa_r+0x78a>
   8af5c:	b12e      	cbz	r6, 8af6a <_dtoa_r+0x782>
   8af5e:	42ae      	cmp	r6, r5
   8af60:	d003      	beq.n	8af6a <_dtoa_r+0x782>
   8af62:	4631      	mov	r1, r6
   8af64:	4620      	mov	r0, r4
   8af66:	f001 fc8d 	bl	8c884 <_Bfree>
   8af6a:	4629      	mov	r1, r5
   8af6c:	4620      	mov	r0, r4
   8af6e:	f001 fc89 	bl	8c884 <_Bfree>
   8af72:	4651      	mov	r1, sl
   8af74:	4620      	mov	r0, r4
   8af76:	f001 fc85 	bl	8c884 <_Bfree>
   8af7a:	2300      	movs	r3, #0
   8af7c:	f889 3000 	strb.w	r3, [r9]
   8af80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8af82:	461a      	mov	r2, r3
   8af84:	9b07      	ldr	r3, [sp, #28]
   8af86:	6013      	str	r3, [r2, #0]
   8af88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8af8a:	2b00      	cmp	r3, #0
   8af8c:	f43f ac67 	beq.w	8a85e <_dtoa_r+0x76>
   8af90:	9803      	ldr	r0, [sp, #12]
   8af92:	f8c3 9000 	str.w	r9, [r3]
   8af96:	b01b      	add	sp, #108	; 0x6c
   8af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af9c:	201c      	movs	r0, #28
   8af9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8afa0:	4406      	add	r6, r0
   8afa2:	4403      	add	r3, r0
   8afa4:	930b      	str	r3, [sp, #44]	; 0x2c
   8afa6:	9b06      	ldr	r3, [sp, #24]
   8afa8:	4403      	add	r3, r0
   8afaa:	9306      	str	r3, [sp, #24]
   8afac:	e771      	b.n	8ae92 <_dtoa_r+0x6aa>
   8afae:	2501      	movs	r5, #1
   8afb0:	e4de      	b.n	8a970 <_dtoa_r+0x188>
   8afb2:	f1c0 0020 	rsb	r0, r0, #32
   8afb6:	fa06 f000 	lsl.w	r0, r6, r0
   8afba:	e474      	b.n	8a8a6 <_dtoa_r+0xbe>
   8afbc:	4601      	mov	r1, r0
   8afbe:	465a      	mov	r2, fp
   8afc0:	4620      	mov	r0, r4
   8afc2:	f001 fdcd 	bl	8cb60 <__pow5mult>
   8afc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8afc8:	4680      	mov	r8, r0
   8afca:	2b01      	cmp	r3, #1
   8afcc:	f340 81d1 	ble.w	8b372 <_dtoa_r+0xb8a>
   8afd0:	f04f 0900 	mov.w	r9, #0
   8afd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8afd8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8afdc:	6918      	ldr	r0, [r3, #16]
   8afde:	f001 fca9 	bl	8c934 <__hi0bits>
   8afe2:	f1c0 0020 	rsb	r0, r0, #32
   8afe6:	e741      	b.n	8ae6c <_dtoa_r+0x684>
   8afe8:	4629      	mov	r1, r5
   8afea:	2300      	movs	r3, #0
   8afec:	220a      	movs	r2, #10
   8afee:	4620      	mov	r0, r4
   8aff0:	f001 fc52 	bl	8c898 <__multadd>
   8aff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8aff6:	4605      	mov	r5, r0
   8aff8:	2b00      	cmp	r3, #0
   8affa:	f340 8315 	ble.w	8b628 <_dtoa_r+0xe40>
   8affe:	9707      	str	r7, [sp, #28]
   8b000:	930a      	str	r3, [sp, #40]	; 0x28
   8b002:	2e00      	cmp	r6, #0
   8b004:	f300 8122 	bgt.w	8b24c <_dtoa_r+0xa64>
   8b008:	f1b9 0f00 	cmp.w	r9, #0
   8b00c:	f040 81f9 	bne.w	8b402 <_dtoa_r+0xc1a>
   8b010:	462f      	mov	r7, r5
   8b012:	9903      	ldr	r1, [sp, #12]
   8b014:	9b04      	ldr	r3, [sp, #16]
   8b016:	460e      	mov	r6, r1
   8b018:	f003 0201 	and.w	r2, r3, #1
   8b01c:	1e4b      	subs	r3, r1, #1
   8b01e:	9924      	ldr	r1, [sp, #144]	; 0x90
   8b020:	920c      	str	r2, [sp, #48]	; 0x30
   8b022:	430a      	orrs	r2, r1
   8b024:	920b      	str	r2, [sp, #44]	; 0x2c
   8b026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b028:	441a      	add	r2, r3
   8b02a:	920a      	str	r2, [sp, #40]	; 0x28
   8b02c:	4641      	mov	r1, r8
   8b02e:	4650      	mov	r0, sl
   8b030:	f7ff fb4a 	bl	8a6c8 <quorem>
   8b034:	4629      	mov	r1, r5
   8b036:	4683      	mov	fp, r0
   8b038:	4650      	mov	r0, sl
   8b03a:	f001 fe51 	bl	8cce0 <__mcmp>
   8b03e:	463a      	mov	r2, r7
   8b040:	4641      	mov	r1, r8
   8b042:	4681      	mov	r9, r0
   8b044:	4620      	mov	r0, r4
   8b046:	f001 fe69 	bl	8cd1c <__mdiff>
   8b04a:	68c2      	ldr	r2, [r0, #12]
   8b04c:	4601      	mov	r1, r0
   8b04e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8b052:	2a00      	cmp	r2, #0
   8b054:	d142      	bne.n	8b0dc <_dtoa_r+0x8f4>
   8b056:	9006      	str	r0, [sp, #24]
   8b058:	4650      	mov	r0, sl
   8b05a:	9308      	str	r3, [sp, #32]
   8b05c:	f001 fe40 	bl	8cce0 <__mcmp>
   8b060:	9906      	ldr	r1, [sp, #24]
   8b062:	9004      	str	r0, [sp, #16]
   8b064:	4620      	mov	r0, r4
   8b066:	f001 fc0d 	bl	8c884 <_Bfree>
   8b06a:	9a04      	ldr	r2, [sp, #16]
   8b06c:	9b08      	ldr	r3, [sp, #32]
   8b06e:	b91a      	cbnz	r2, 8b078 <_dtoa_r+0x890>
   8b070:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b072:	2900      	cmp	r1, #0
   8b074:	f000 82cb 	beq.w	8b60e <_dtoa_r+0xe26>
   8b078:	f1b9 0f00 	cmp.w	r9, #0
   8b07c:	f2c0 8185 	blt.w	8b38a <_dtoa_r+0xba2>
   8b080:	9924      	ldr	r1, [sp, #144]	; 0x90
   8b082:	ea41 0909 	orr.w	r9, r1, r9
   8b086:	990c      	ldr	r1, [sp, #48]	; 0x30
   8b088:	ea51 0109 	orrs.w	r1, r1, r9
   8b08c:	f000 817d 	beq.w	8b38a <_dtoa_r+0xba2>
   8b090:	2a00      	cmp	r2, #0
   8b092:	f300 81d1 	bgt.w	8b438 <_dtoa_r+0xc50>
   8b096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8b098:	f106 0901 	add.w	r9, r6, #1
   8b09c:	4296      	cmp	r6, r2
   8b09e:	46cb      	mov	fp, r9
   8b0a0:	7033      	strb	r3, [r6, #0]
   8b0a2:	f000 81e3 	beq.w	8b46c <_dtoa_r+0xc84>
   8b0a6:	4651      	mov	r1, sl
   8b0a8:	2300      	movs	r3, #0
   8b0aa:	220a      	movs	r2, #10
   8b0ac:	4620      	mov	r0, r4
   8b0ae:	f001 fbf3 	bl	8c898 <__multadd>
   8b0b2:	42bd      	cmp	r5, r7
   8b0b4:	4682      	mov	sl, r0
   8b0b6:	4629      	mov	r1, r5
   8b0b8:	f04f 0300 	mov.w	r3, #0
   8b0bc:	f04f 020a 	mov.w	r2, #10
   8b0c0:	4620      	mov	r0, r4
   8b0c2:	d012      	beq.n	8b0ea <_dtoa_r+0x902>
   8b0c4:	f001 fbe8 	bl	8c898 <__multadd>
   8b0c8:	4639      	mov	r1, r7
   8b0ca:	4605      	mov	r5, r0
   8b0cc:	2300      	movs	r3, #0
   8b0ce:	220a      	movs	r2, #10
   8b0d0:	4620      	mov	r0, r4
   8b0d2:	f001 fbe1 	bl	8c898 <__multadd>
   8b0d6:	464e      	mov	r6, r9
   8b0d8:	4607      	mov	r7, r0
   8b0da:	e7a7      	b.n	8b02c <_dtoa_r+0x844>
   8b0dc:	4620      	mov	r0, r4
   8b0de:	9304      	str	r3, [sp, #16]
   8b0e0:	f001 fbd0 	bl	8c884 <_Bfree>
   8b0e4:	2201      	movs	r2, #1
   8b0e6:	9b04      	ldr	r3, [sp, #16]
   8b0e8:	e7c6      	b.n	8b078 <_dtoa_r+0x890>
   8b0ea:	f001 fbd5 	bl	8c898 <__multadd>
   8b0ee:	464e      	mov	r6, r9
   8b0f0:	4605      	mov	r5, r0
   8b0f2:	4607      	mov	r7, r0
   8b0f4:	e79a      	b.n	8b02c <_dtoa_r+0x844>
   8b0f6:	bf00      	nop
   8b0f8:	0008e6a8 	.word	0x0008e6a8
   8b0fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b0fe:	2b02      	cmp	r3, #2
   8b100:	dc7e      	bgt.n	8b200 <_dtoa_r+0xa18>
   8b102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b104:	2b00      	cmp	r3, #0
   8b106:	f47f af7c 	bne.w	8b002 <_dtoa_r+0x81a>
   8b10a:	4641      	mov	r1, r8
   8b10c:	4650      	mov	r0, sl
   8b10e:	f7ff fadb 	bl	8a6c8 <quorem>
   8b112:	9a07      	ldr	r2, [sp, #28]
   8b114:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8b118:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8b11c:	3201      	adds	r2, #1
   8b11e:	2600      	movs	r6, #0
   8b120:	9207      	str	r2, [sp, #28]
   8b122:	f80b 3b01 	strb.w	r3, [fp], #1
   8b126:	e6f5      	b.n	8af14 <_dtoa_r+0x72c>
   8b128:	4641      	mov	r1, r8
   8b12a:	4650      	mov	r0, sl
   8b12c:	f001 fdd8 	bl	8cce0 <__mcmp>
   8b130:	2800      	cmp	r0, #0
   8b132:	f6bf aec4 	bge.w	8aebe <_dtoa_r+0x6d6>
   8b136:	4651      	mov	r1, sl
   8b138:	2300      	movs	r3, #0
   8b13a:	220a      	movs	r2, #10
   8b13c:	4620      	mov	r0, r4
   8b13e:	f001 fbab 	bl	8c898 <__multadd>
   8b142:	9b07      	ldr	r3, [sp, #28]
   8b144:	4682      	mov	sl, r0
   8b146:	1e5f      	subs	r7, r3, #1
   8b148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b14a:	2b00      	cmp	r3, #0
   8b14c:	f47f af4c 	bne.w	8afe8 <_dtoa_r+0x800>
   8b150:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b152:	2b00      	cmp	r3, #0
   8b154:	f340 8262 	ble.w	8b61c <_dtoa_r+0xe34>
   8b158:	930a      	str	r3, [sp, #40]	; 0x28
   8b15a:	e6bb      	b.n	8aed4 <_dtoa_r+0x6ec>
   8b15c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8b15e:	4651      	mov	r1, sl
   8b160:	4620      	mov	r0, r4
   8b162:	f001 fcfd 	bl	8cb60 <__pow5mult>
   8b166:	4682      	mov	sl, r0
   8b168:	e66c      	b.n	8ae44 <_dtoa_r+0x65c>
   8b16a:	4bba      	ldr	r3, [pc, #744]	; (8b454 <_dtoa_r+0xc6c>)
   8b16c:	9303      	str	r3, [sp, #12]
   8b16e:	3303      	adds	r3, #3
   8b170:	e419      	b.n	8a9a6 <_dtoa_r+0x1be>
   8b172:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b176:	2900      	cmp	r1, #0
   8b178:	f47f ae71 	bne.w	8ae5e <_dtoa_r+0x676>
   8b17c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b180:	2b00      	cmp	r3, #0
   8b182:	f47f ae6c 	bne.w	8ae5e <_dtoa_r+0x676>
   8b186:	4bb4      	ldr	r3, [pc, #720]	; (8b458 <_dtoa_r+0xc70>)
   8b188:	4013      	ands	r3, r2
   8b18a:	2b00      	cmp	r3, #0
   8b18c:	f000 822a 	beq.w	8b5e4 <_dtoa_r+0xdfc>
   8b190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8b192:	f04f 0901 	mov.w	r9, #1
   8b196:	3301      	adds	r3, #1
   8b198:	930b      	str	r3, [sp, #44]	; 0x2c
   8b19a:	9b06      	ldr	r3, [sp, #24]
   8b19c:	3301      	adds	r3, #1
   8b19e:	9306      	str	r3, [sp, #24]
   8b1a0:	e65f      	b.n	8ae62 <_dtoa_r+0x67a>
   8b1a2:	2301      	movs	r3, #1
   8b1a4:	930c      	str	r3, [sp, #48]	; 0x30
   8b1a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b1a8:	9a07      	ldr	r2, [sp, #28]
   8b1aa:	4413      	add	r3, r2
   8b1ac:	9312      	str	r3, [sp, #72]	; 0x48
   8b1ae:	3301      	adds	r3, #1
   8b1b0:	2b01      	cmp	r3, #1
   8b1b2:	461e      	mov	r6, r3
   8b1b4:	bfb8      	it	lt
   8b1b6:	2601      	movlt	r6, #1
   8b1b8:	930a      	str	r3, [sp, #40]	; 0x28
   8b1ba:	2100      	movs	r1, #0
   8b1bc:	2e17      	cmp	r6, #23
   8b1be:	6461      	str	r1, [r4, #68]	; 0x44
   8b1c0:	f77f ac43 	ble.w	8aa4a <_dtoa_r+0x262>
   8b1c4:	2201      	movs	r2, #1
   8b1c6:	2304      	movs	r3, #4
   8b1c8:	005b      	lsls	r3, r3, #1
   8b1ca:	f103 0014 	add.w	r0, r3, #20
   8b1ce:	42b0      	cmp	r0, r6
   8b1d0:	4611      	mov	r1, r2
   8b1d2:	f102 0201 	add.w	r2, r2, #1
   8b1d6:	d9f7      	bls.n	8b1c8 <_dtoa_r+0x9e0>
   8b1d8:	6461      	str	r1, [r4, #68]	; 0x44
   8b1da:	e436      	b.n	8aa4a <_dtoa_r+0x262>
   8b1dc:	2301      	movs	r3, #1
   8b1de:	930c      	str	r3, [sp, #48]	; 0x30
   8b1e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8b1e2:	2b00      	cmp	r3, #0
   8b1e4:	dd46      	ble.n	8b274 <_dtoa_r+0xa8c>
   8b1e6:	461e      	mov	r6, r3
   8b1e8:	9312      	str	r3, [sp, #72]	; 0x48
   8b1ea:	930a      	str	r3, [sp, #40]	; 0x28
   8b1ec:	e7e5      	b.n	8b1ba <_dtoa_r+0x9d2>
   8b1ee:	2300      	movs	r3, #0
   8b1f0:	930c      	str	r3, [sp, #48]	; 0x30
   8b1f2:	e7d8      	b.n	8b1a6 <_dtoa_r+0x9be>
   8b1f4:	2300      	movs	r3, #0
   8b1f6:	930c      	str	r3, [sp, #48]	; 0x30
   8b1f8:	e7f2      	b.n	8b1e0 <_dtoa_r+0x9f8>
   8b1fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b1fc:	9707      	str	r7, [sp, #28]
   8b1fe:	930a      	str	r3, [sp, #40]	; 0x28
   8b200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b202:	2b00      	cmp	r3, #0
   8b204:	f47f ad40 	bne.w	8ac88 <_dtoa_r+0x4a0>
   8b208:	4641      	mov	r1, r8
   8b20a:	2205      	movs	r2, #5
   8b20c:	4620      	mov	r0, r4
   8b20e:	f001 fb43 	bl	8c898 <__multadd>
   8b212:	4680      	mov	r8, r0
   8b214:	4650      	mov	r0, sl
   8b216:	4641      	mov	r1, r8
   8b218:	f001 fd62 	bl	8cce0 <__mcmp>
   8b21c:	2800      	cmp	r0, #0
   8b21e:	f77f ad33 	ble.w	8ac88 <_dtoa_r+0x4a0>
   8b222:	9f03      	ldr	r7, [sp, #12]
   8b224:	2231      	movs	r2, #49	; 0x31
   8b226:	463b      	mov	r3, r7
   8b228:	9e07      	ldr	r6, [sp, #28]
   8b22a:	f803 2b01 	strb.w	r2, [r3], #1
   8b22e:	3601      	adds	r6, #1
   8b230:	9303      	str	r3, [sp, #12]
   8b232:	4641      	mov	r1, r8
   8b234:	4620      	mov	r0, r4
   8b236:	f001 fb25 	bl	8c884 <_Bfree>
   8b23a:	1c73      	adds	r3, r6, #1
   8b23c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8b240:	9307      	str	r3, [sp, #28]
   8b242:	9703      	str	r7, [sp, #12]
   8b244:	2d00      	cmp	r5, #0
   8b246:	f47f ae90 	bne.w	8af6a <_dtoa_r+0x782>
   8b24a:	e692      	b.n	8af72 <_dtoa_r+0x78a>
   8b24c:	4629      	mov	r1, r5
   8b24e:	4632      	mov	r2, r6
   8b250:	4620      	mov	r0, r4
   8b252:	f001 fcd1 	bl	8cbf8 <__lshift>
   8b256:	4605      	mov	r5, r0
   8b258:	e6d6      	b.n	8b008 <_dtoa_r+0x820>
   8b25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8b25c:	970d      	str	r7, [sp, #52]	; 0x34
   8b25e:	1afb      	subs	r3, r7, r3
   8b260:	449b      	add	fp, r3
   8b262:	2700      	movs	r7, #0
   8b264:	e58c      	b.n	8ad80 <_dtoa_r+0x598>
   8b266:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8b26a:	f04f 0902 	mov.w	r9, #2
   8b26e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8b272:	e417      	b.n	8aaa4 <_dtoa_r+0x2bc>
   8b274:	2301      	movs	r3, #1
   8b276:	9325      	str	r3, [sp, #148]	; 0x94
   8b278:	930a      	str	r3, [sp, #40]	; 0x28
   8b27a:	f7ff bbe2 	b.w	8aa42 <_dtoa_r+0x25a>
   8b27e:	d103      	bne.n	8b288 <_dtoa_r+0xaa0>
   8b280:	9b04      	ldr	r3, [sp, #16]
   8b282:	07db      	lsls	r3, r3, #31
   8b284:	f53f ae53 	bmi.w	8af2e <_dtoa_r+0x746>
   8b288:	46d9      	mov	r9, fp
   8b28a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8b28e:	2b30      	cmp	r3, #48	; 0x30
   8b290:	d0fa      	beq.n	8b288 <_dtoa_r+0xaa0>
   8b292:	e65e      	b.n	8af52 <_dtoa_r+0x76a>
   8b294:	4648      	mov	r0, r9
   8b296:	f002 fd5d 	bl	8dd54 <__aeabi_i2d>
   8b29a:	4632      	mov	r2, r6
   8b29c:	463b      	mov	r3, r7
   8b29e:	f002 fdc3 	bl	8de28 <__aeabi_dmul>
   8b2a2:	2200      	movs	r2, #0
   8b2a4:	4b6d      	ldr	r3, [pc, #436]	; (8b45c <_dtoa_r+0xc74>)
   8b2a6:	f002 fc09 	bl	8dabc <__adddf3>
   8b2aa:	4680      	mov	r8, r0
   8b2ac:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b2b0:	4630      	mov	r0, r6
   8b2b2:	4639      	mov	r1, r7
   8b2b4:	2200      	movs	r2, #0
   8b2b6:	4b6a      	ldr	r3, [pc, #424]	; (8b460 <_dtoa_r+0xc78>)
   8b2b8:	f002 fbfe 	bl	8dab8 <__aeabi_dsub>
   8b2bc:	4642      	mov	r2, r8
   8b2be:	464b      	mov	r3, r9
   8b2c0:	4606      	mov	r6, r0
   8b2c2:	460f      	mov	r7, r1
   8b2c4:	f003 f840 	bl	8e348 <__aeabi_dcmpgt>
   8b2c8:	2800      	cmp	r0, #0
   8b2ca:	f040 8187 	bne.w	8b5dc <_dtoa_r+0xdf4>
   8b2ce:	4642      	mov	r2, r8
   8b2d0:	4630      	mov	r0, r6
   8b2d2:	4639      	mov	r1, r7
   8b2d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8b2d8:	f003 f818 	bl	8e30c <__aeabi_dcmplt>
   8b2dc:	2800      	cmp	r0, #0
   8b2de:	f43f acaa 	beq.w	8ac36 <_dtoa_r+0x44e>
   8b2e2:	f04f 0800 	mov.w	r8, #0
   8b2e6:	4645      	mov	r5, r8
   8b2e8:	e4ce      	b.n	8ac88 <_dtoa_r+0x4a0>
   8b2ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8b2ec:	2a00      	cmp	r2, #0
   8b2ee:	f000 80c3 	beq.w	8b478 <_dtoa_r+0xc90>
   8b2f2:	9a06      	ldr	r2, [sp, #24]
   8b2f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8b2f8:	441a      	add	r2, r3
   8b2fa:	9206      	str	r2, [sp, #24]
   8b2fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8b2fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b300:	4616      	mov	r6, r2
   8b302:	441a      	add	r2, r3
   8b304:	920b      	str	r2, [sp, #44]	; 0x2c
   8b306:	e547      	b.n	8ad98 <_dtoa_r+0x5b0>
   8b308:	2331      	movs	r3, #49	; 0x31
   8b30a:	9a07      	ldr	r2, [sp, #28]
   8b30c:	3201      	adds	r2, #1
   8b30e:	9207      	str	r2, [sp, #28]
   8b310:	9a03      	ldr	r2, [sp, #12]
   8b312:	7013      	strb	r3, [r2, #0]
   8b314:	e61d      	b.n	8af52 <_dtoa_r+0x76a>
   8b316:	f000 814b 	beq.w	8b5b0 <_dtoa_r+0xdc8>
   8b31a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8b31e:	9b07      	ldr	r3, [sp, #28]
   8b320:	425d      	negs	r5, r3
   8b322:	4b50      	ldr	r3, [pc, #320]	; (8b464 <_dtoa_r+0xc7c>)
   8b324:	f005 020f 	and.w	r2, r5, #15
   8b328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b330:	f002 fd7a 	bl	8de28 <__aeabi_dmul>
   8b334:	112d      	asrs	r5, r5, #4
   8b336:	4606      	mov	r6, r0
   8b338:	460f      	mov	r7, r1
   8b33a:	f000 817d 	beq.w	8b638 <_dtoa_r+0xe50>
   8b33e:	2300      	movs	r3, #0
   8b340:	f04f 0902 	mov.w	r9, #2
   8b344:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8b468 <_dtoa_r+0xc80>
   8b348:	07ea      	lsls	r2, r5, #31
   8b34a:	d505      	bpl.n	8b358 <_dtoa_r+0xb70>
   8b34c:	e9d8 2300 	ldrd	r2, r3, [r8]
   8b350:	f002 fd6a 	bl	8de28 <__aeabi_dmul>
   8b354:	2301      	movs	r3, #1
   8b356:	4499      	add	r9, r3
   8b358:	106d      	asrs	r5, r5, #1
   8b35a:	f108 0808 	add.w	r8, r8, #8
   8b35e:	d1f3      	bne.n	8b348 <_dtoa_r+0xb60>
   8b360:	2b00      	cmp	r3, #0
   8b362:	f43f abba 	beq.w	8aada <_dtoa_r+0x2f2>
   8b366:	4606      	mov	r6, r0
   8b368:	460f      	mov	r7, r1
   8b36a:	f7ff bbb6 	b.w	8aada <_dtoa_r+0x2f2>
   8b36e:	900e      	str	r0, [sp, #56]	; 0x38
   8b370:	e520      	b.n	8adb4 <_dtoa_r+0x5cc>
   8b372:	9b04      	ldr	r3, [sp, #16]
   8b374:	2b00      	cmp	r3, #0
   8b376:	f47f ae2b 	bne.w	8afd0 <_dtoa_r+0x7e8>
   8b37a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8b37e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8b382:	2b00      	cmp	r3, #0
   8b384:	f43f aeff 	beq.w	8b186 <_dtoa_r+0x99e>
   8b388:	e622      	b.n	8afd0 <_dtoa_r+0x7e8>
   8b38a:	2a00      	cmp	r2, #0
   8b38c:	dd12      	ble.n	8b3b4 <_dtoa_r+0xbcc>
   8b38e:	4651      	mov	r1, sl
   8b390:	2201      	movs	r2, #1
   8b392:	4620      	mov	r0, r4
   8b394:	9304      	str	r3, [sp, #16]
   8b396:	f001 fc2f 	bl	8cbf8 <__lshift>
   8b39a:	4641      	mov	r1, r8
   8b39c:	4682      	mov	sl, r0
   8b39e:	f001 fc9f 	bl	8cce0 <__mcmp>
   8b3a2:	2800      	cmp	r0, #0
   8b3a4:	9b04      	ldr	r3, [sp, #16]
   8b3a6:	f340 812c 	ble.w	8b602 <_dtoa_r+0xe1a>
   8b3aa:	2b39      	cmp	r3, #57	; 0x39
   8b3ac:	f000 810c 	beq.w	8b5c8 <_dtoa_r+0xde0>
   8b3b0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8b3b4:	46b1      	mov	r9, r6
   8b3b6:	f809 3b01 	strb.w	r3, [r9], #1
   8b3ba:	9b07      	ldr	r3, [sp, #28]
   8b3bc:	462e      	mov	r6, r5
   8b3be:	3301      	adds	r3, #1
   8b3c0:	463d      	mov	r5, r7
   8b3c2:	9307      	str	r3, [sp, #28]
   8b3c4:	e5c5      	b.n	8af52 <_dtoa_r+0x76a>
   8b3c6:	4655      	mov	r5, sl
   8b3c8:	9c08      	ldr	r4, [sp, #32]
   8b3ca:	f8dd a018 	ldr.w	sl, [sp, #24]
   8b3ce:	4602      	mov	r2, r0
   8b3d0:	460b      	mov	r3, r1
   8b3d2:	f002 fb73 	bl	8dabc <__adddf3>
   8b3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b3da:	4606      	mov	r6, r0
   8b3dc:	460f      	mov	r7, r1
   8b3de:	f002 ffb3 	bl	8e348 <__aeabi_dcmpgt>
   8b3e2:	b960      	cbnz	r0, 8b3fe <_dtoa_r+0xc16>
   8b3e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8b3e8:	4630      	mov	r0, r6
   8b3ea:	4639      	mov	r1, r7
   8b3ec:	f002 ff84 	bl	8e2f8 <__aeabi_dcmpeq>
   8b3f0:	2800      	cmp	r0, #0
   8b3f2:	f43f aca3 	beq.w	8ad3c <_dtoa_r+0x554>
   8b3f6:	f018 0f01 	tst.w	r8, #1
   8b3fa:	f43f ac9f 	beq.w	8ad3c <_dtoa_r+0x554>
   8b3fe:	9a03      	ldr	r2, [sp, #12]
   8b400:	e40a      	b.n	8ac18 <_dtoa_r+0x430>
   8b402:	4620      	mov	r0, r4
   8b404:	6869      	ldr	r1, [r5, #4]
   8b406:	f001 fa17 	bl	8c838 <_Balloc>
   8b40a:	4606      	mov	r6, r0
   8b40c:	2800      	cmp	r0, #0
   8b40e:	f000 8117 	beq.w	8b640 <_dtoa_r+0xe58>
   8b412:	692b      	ldr	r3, [r5, #16]
   8b414:	f105 010c 	add.w	r1, r5, #12
   8b418:	3302      	adds	r3, #2
   8b41a:	009a      	lsls	r2, r3, #2
   8b41c:	300c      	adds	r0, #12
   8b41e:	f7fc fa5d 	bl	878dc <memcpy>
   8b422:	4631      	mov	r1, r6
   8b424:	2201      	movs	r2, #1
   8b426:	4620      	mov	r0, r4
   8b428:	f001 fbe6 	bl	8cbf8 <__lshift>
   8b42c:	4607      	mov	r7, r0
   8b42e:	e5f0      	b.n	8b012 <_dtoa_r+0x82a>
   8b430:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8b434:	1a9e      	subs	r6, r3, r2
   8b436:	e4af      	b.n	8ad98 <_dtoa_r+0x5b0>
   8b438:	2b39      	cmp	r3, #57	; 0x39
   8b43a:	f000 80c5 	beq.w	8b5c8 <_dtoa_r+0xde0>
   8b43e:	46b1      	mov	r9, r6
   8b440:	3301      	adds	r3, #1
   8b442:	f809 3b01 	strb.w	r3, [r9], #1
   8b446:	9b07      	ldr	r3, [sp, #28]
   8b448:	462e      	mov	r6, r5
   8b44a:	3301      	adds	r3, #1
   8b44c:	463d      	mov	r5, r7
   8b44e:	9307      	str	r3, [sp, #28]
   8b450:	e57f      	b.n	8af52 <_dtoa_r+0x76a>
   8b452:	bf00      	nop
   8b454:	0008e6ec 	.word	0x0008e6ec
   8b458:	7ff00000 	.word	0x7ff00000
   8b45c:	401c0000 	.word	0x401c0000
   8b460:	40140000 	.word	0x40140000
   8b464:	0008e848 	.word	0x0008e848
   8b468:	0008e820 	.word	0x0008e820
   8b46c:	9a07      	ldr	r2, [sp, #28]
   8b46e:	462e      	mov	r6, r5
   8b470:	3201      	adds	r2, #1
   8b472:	463d      	mov	r5, r7
   8b474:	9207      	str	r2, [sp, #28]
   8b476:	e54d      	b.n	8af14 <_dtoa_r+0x72c>
   8b478:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8b47a:	9a06      	ldr	r2, [sp, #24]
   8b47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b47e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8b482:	441a      	add	r2, r3
   8b484:	9206      	str	r2, [sp, #24]
   8b486:	460a      	mov	r2, r1
   8b488:	441a      	add	r2, r3
   8b48a:	460e      	mov	r6, r1
   8b48c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8b48e:	920b      	str	r2, [sp, #44]	; 0x2c
   8b490:	e482      	b.n	8ad98 <_dtoa_r+0x5b0>
   8b492:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b494:	497f      	ldr	r1, [pc, #508]	; (8b694 <_dtoa_r+0xeac>)
   8b496:	4642      	mov	r2, r8
   8b498:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8b49c:	464b      	mov	r3, r9
   8b49e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8b4a2:	f002 fcc1 	bl	8de28 <__aeabi_dmul>
   8b4a6:	4602      	mov	r2, r0
   8b4a8:	460b      	mov	r3, r1
   8b4aa:	4630      	mov	r0, r6
   8b4ac:	4639      	mov	r1, r7
   8b4ae:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8b4b2:	f002 ff69 	bl	8e388 <__aeabi_d2iz>
   8b4b6:	4680      	mov	r8, r0
   8b4b8:	f002 fc4c 	bl	8dd54 <__aeabi_i2d>
   8b4bc:	460b      	mov	r3, r1
   8b4be:	4602      	mov	r2, r0
   8b4c0:	4639      	mov	r1, r7
   8b4c2:	4630      	mov	r0, r6
   8b4c4:	f002 faf8 	bl	8dab8 <__aeabi_dsub>
   8b4c8:	4606      	mov	r6, r0
   8b4ca:	9810      	ldr	r0, [sp, #64]	; 0x40
   8b4cc:	9d03      	ldr	r5, [sp, #12]
   8b4ce:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8b4d2:	2801      	cmp	r0, #1
   8b4d4:	460f      	mov	r7, r1
   8b4d6:	f805 3b01 	strb.w	r3, [r5], #1
   8b4da:	d01e      	beq.n	8b51a <_dtoa_r+0xd32>
   8b4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8b4de:	9a03      	ldr	r2, [sp, #12]
   8b4e0:	4413      	add	r3, r2
   8b4e2:	4698      	mov	r8, r3
   8b4e4:	2200      	movs	r2, #0
   8b4e6:	4b6c      	ldr	r3, [pc, #432]	; (8b698 <_dtoa_r+0xeb0>)
   8b4e8:	4630      	mov	r0, r6
   8b4ea:	4639      	mov	r1, r7
   8b4ec:	f002 fc9c 	bl	8de28 <__aeabi_dmul>
   8b4f0:	460f      	mov	r7, r1
   8b4f2:	4606      	mov	r6, r0
   8b4f4:	f002 ff48 	bl	8e388 <__aeabi_d2iz>
   8b4f8:	4681      	mov	r9, r0
   8b4fa:	f002 fc2b 	bl	8dd54 <__aeabi_i2d>
   8b4fe:	4602      	mov	r2, r0
   8b500:	460b      	mov	r3, r1
   8b502:	4630      	mov	r0, r6
   8b504:	4639      	mov	r1, r7
   8b506:	f002 fad7 	bl	8dab8 <__aeabi_dsub>
   8b50a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8b50e:	f805 9b01 	strb.w	r9, [r5], #1
   8b512:	4545      	cmp	r5, r8
   8b514:	4606      	mov	r6, r0
   8b516:	460f      	mov	r7, r1
   8b518:	d1e4      	bne.n	8b4e4 <_dtoa_r+0xcfc>
   8b51a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8b51e:	2200      	movs	r2, #0
   8b520:	4b5e      	ldr	r3, [pc, #376]	; (8b69c <_dtoa_r+0xeb4>)
   8b522:	4640      	mov	r0, r8
   8b524:	4649      	mov	r1, r9
   8b526:	f002 fac9 	bl	8dabc <__adddf3>
   8b52a:	4632      	mov	r2, r6
   8b52c:	463b      	mov	r3, r7
   8b52e:	f002 feed 	bl	8e30c <__aeabi_dcmplt>
   8b532:	2800      	cmp	r0, #0
   8b534:	d158      	bne.n	8b5e8 <_dtoa_r+0xe00>
   8b536:	4642      	mov	r2, r8
   8b538:	464b      	mov	r3, r9
   8b53a:	2000      	movs	r0, #0
   8b53c:	4957      	ldr	r1, [pc, #348]	; (8b69c <_dtoa_r+0xeb4>)
   8b53e:	f002 fabb 	bl	8dab8 <__aeabi_dsub>
   8b542:	4632      	mov	r2, r6
   8b544:	463b      	mov	r3, r7
   8b546:	f002 feff 	bl	8e348 <__aeabi_dcmpgt>
   8b54a:	2800      	cmp	r0, #0
   8b54c:	f43f ab73 	beq.w	8ac36 <_dtoa_r+0x44e>
   8b550:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8b554:	46a9      	mov	r9, r5
   8b556:	2b30      	cmp	r3, #48	; 0x30
   8b558:	f105 35ff 	add.w	r5, r5, #4294967295
   8b55c:	d0f8      	beq.n	8b550 <_dtoa_r+0xd68>
   8b55e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b560:	3301      	adds	r3, #1
   8b562:	9307      	str	r3, [sp, #28]
   8b564:	e505      	b.n	8af72 <_dtoa_r+0x78a>
   8b566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b568:	2b00      	cmp	r3, #0
   8b56a:	f43f ae93 	beq.w	8b294 <_dtoa_r+0xaac>
   8b56e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8b570:	2d00      	cmp	r5, #0
   8b572:	f77f ab60 	ble.w	8ac36 <_dtoa_r+0x44e>
   8b576:	2200      	movs	r2, #0
   8b578:	4b47      	ldr	r3, [pc, #284]	; (8b698 <_dtoa_r+0xeb0>)
   8b57a:	4630      	mov	r0, r6
   8b57c:	4639      	mov	r1, r7
   8b57e:	f002 fc53 	bl	8de28 <__aeabi_dmul>
   8b582:	4606      	mov	r6, r0
   8b584:	460f      	mov	r7, r1
   8b586:	f109 0001 	add.w	r0, r9, #1
   8b58a:	f002 fbe3 	bl	8dd54 <__aeabi_i2d>
   8b58e:	4632      	mov	r2, r6
   8b590:	463b      	mov	r3, r7
   8b592:	f002 fc49 	bl	8de28 <__aeabi_dmul>
   8b596:	2200      	movs	r2, #0
   8b598:	4b41      	ldr	r3, [pc, #260]	; (8b6a0 <_dtoa_r+0xeb8>)
   8b59a:	f002 fa8f 	bl	8dabc <__adddf3>
   8b59e:	9a07      	ldr	r2, [sp, #28]
   8b5a0:	4680      	mov	r8, r0
   8b5a2:	3a01      	subs	r2, #1
   8b5a4:	9213      	str	r2, [sp, #76]	; 0x4c
   8b5a6:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8b5aa:	9510      	str	r5, [sp, #64]	; 0x40
   8b5ac:	f7ff bab6 	b.w	8ab1c <_dtoa_r+0x334>
   8b5b0:	f04f 0902 	mov.w	r9, #2
   8b5b4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8b5b8:	f7ff ba8f 	b.w	8aada <_dtoa_r+0x2f2>
   8b5bc:	9b07      	ldr	r3, [sp, #28]
   8b5be:	3301      	adds	r3, #1
   8b5c0:	9307      	str	r3, [sp, #28]
   8b5c2:	2331      	movs	r3, #49	; 0x31
   8b5c4:	f7ff bb2f 	b.w	8ac26 <_dtoa_r+0x43e>
   8b5c8:	46b3      	mov	fp, r6
   8b5ca:	2339      	movs	r3, #57	; 0x39
   8b5cc:	9a07      	ldr	r2, [sp, #28]
   8b5ce:	462e      	mov	r6, r5
   8b5d0:	3201      	adds	r2, #1
   8b5d2:	463d      	mov	r5, r7
   8b5d4:	9207      	str	r2, [sp, #28]
   8b5d6:	f80b 3b01 	strb.w	r3, [fp], #1
   8b5da:	e4aa      	b.n	8af32 <_dtoa_r+0x74a>
   8b5dc:	f04f 0800 	mov.w	r8, #0
   8b5e0:	4645      	mov	r5, r8
   8b5e2:	e61e      	b.n	8b222 <_dtoa_r+0xa3a>
   8b5e4:	4699      	mov	r9, r3
   8b5e6:	e43c      	b.n	8ae62 <_dtoa_r+0x67a>
   8b5e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b5ea:	9a03      	ldr	r2, [sp, #12]
   8b5ec:	9307      	str	r3, [sp, #28]
   8b5ee:	f7ff bb13 	b.w	8ac18 <_dtoa_r+0x430>
   8b5f2:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8b5f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8b5f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8b5fa:	46a9      	mov	r9, r5
   8b5fc:	3301      	adds	r3, #1
   8b5fe:	9307      	str	r3, [sp, #28]
   8b600:	e4b7      	b.n	8af72 <_dtoa_r+0x78a>
   8b602:	f47f aed7 	bne.w	8b3b4 <_dtoa_r+0xbcc>
   8b606:	07da      	lsls	r2, r3, #31
   8b608:	f57f aed4 	bpl.w	8b3b4 <_dtoa_r+0xbcc>
   8b60c:	e6cd      	b.n	8b3aa <_dtoa_r+0xbc2>
   8b60e:	2b39      	cmp	r3, #57	; 0x39
   8b610:	d0da      	beq.n	8b5c8 <_dtoa_r+0xde0>
   8b612:	f1b9 0f00 	cmp.w	r9, #0
   8b616:	f73f aecb 	bgt.w	8b3b0 <_dtoa_r+0xbc8>
   8b61a:	e6cb      	b.n	8b3b4 <_dtoa_r+0xbcc>
   8b61c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b61e:	2b02      	cmp	r3, #2
   8b620:	f73f adeb 	bgt.w	8b1fa <_dtoa_r+0xa12>
   8b624:	9707      	str	r7, [sp, #28]
   8b626:	e570      	b.n	8b10a <_dtoa_r+0x922>
   8b628:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8b62a:	2b02      	cmp	r3, #2
   8b62c:	f73f ade5 	bgt.w	8b1fa <_dtoa_r+0xa12>
   8b630:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b632:	9707      	str	r7, [sp, #28]
   8b634:	930a      	str	r3, [sp, #40]	; 0x28
   8b636:	e4e4      	b.n	8b002 <_dtoa_r+0x81a>
   8b638:	f04f 0902 	mov.w	r9, #2
   8b63c:	f7ff ba4d 	b.w	8aada <_dtoa_r+0x2f2>
   8b640:	4602      	mov	r2, r0
   8b642:	f240 21ea 	movw	r1, #746	; 0x2ea
   8b646:	4b17      	ldr	r3, [pc, #92]	; (8b6a4 <_dtoa_r+0xebc>)
   8b648:	4817      	ldr	r0, [pc, #92]	; (8b6a8 <_dtoa_r+0xec0>)
   8b64a:	f002 f8af 	bl	8d7ac <__assert_func>
   8b64e:	4b17      	ldr	r3, [pc, #92]	; (8b6ac <_dtoa_r+0xec4>)
   8b650:	9303      	str	r3, [sp, #12]
   8b652:	f7ff b904 	b.w	8a85e <_dtoa_r+0x76>
   8b656:	2500      	movs	r5, #0
   8b658:	4620      	mov	r0, r4
   8b65a:	4629      	mov	r1, r5
   8b65c:	6465      	str	r5, [r4, #68]	; 0x44
   8b65e:	f001 f8eb 	bl	8c838 <_Balloc>
   8b662:	9003      	str	r0, [sp, #12]
   8b664:	b958      	cbnz	r0, 8b67e <_dtoa_r+0xe96>
   8b666:	2200      	movs	r2, #0
   8b668:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8b66c:	4b0d      	ldr	r3, [pc, #52]	; (8b6a4 <_dtoa_r+0xebc>)
   8b66e:	480e      	ldr	r0, [pc, #56]	; (8b6a8 <_dtoa_r+0xec0>)
   8b670:	f002 f89c 	bl	8d7ac <__assert_func>
   8b674:	f43f ac0d 	beq.w	8ae92 <_dtoa_r+0x6aa>
   8b678:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8b67c:	e48f      	b.n	8af9e <_dtoa_r+0x7b6>
   8b67e:	f04f 33ff 	mov.w	r3, #4294967295
   8b682:	9312      	str	r3, [sp, #72]	; 0x48
   8b684:	930a      	str	r3, [sp, #40]	; 0x28
   8b686:	2301      	movs	r3, #1
   8b688:	9a03      	ldr	r2, [sp, #12]
   8b68a:	9525      	str	r5, [sp, #148]	; 0x94
   8b68c:	6422      	str	r2, [r4, #64]	; 0x40
   8b68e:	930c      	str	r3, [sp, #48]	; 0x30
   8b690:	f7ff bad1 	b.w	8ac36 <_dtoa_r+0x44e>
   8b694:	0008e848 	.word	0x0008e848
   8b698:	40240000 	.word	0x40240000
   8b69c:	3fe00000 	.word	0x3fe00000
   8b6a0:	401c0000 	.word	0x401c0000
   8b6a4:	0008e6fc 	.word	0x0008e6fc
   8b6a8:	0008e710 	.word	0x0008e710
   8b6ac:	0008e6f0 	.word	0x0008e6f0

0008b6b0 <__sflush_r>:
   8b6b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b6b8:	460d      	mov	r5, r1
   8b6ba:	0711      	lsls	r1, r2, #28
   8b6bc:	4680      	mov	r8, r0
   8b6be:	d447      	bmi.n	8b750 <__sflush_r+0xa0>
   8b6c0:	686b      	ldr	r3, [r5, #4]
   8b6c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b6c6:	2b00      	cmp	r3, #0
   8b6c8:	81aa      	strh	r2, [r5, #12]
   8b6ca:	dd5e      	ble.n	8b78a <__sflush_r+0xda>
   8b6cc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b6ce:	2c00      	cmp	r4, #0
   8b6d0:	d058      	beq.n	8b784 <__sflush_r+0xd4>
   8b6d2:	2300      	movs	r3, #0
   8b6d4:	f8d8 6000 	ldr.w	r6, [r8]
   8b6d8:	f8c8 3000 	str.w	r3, [r8]
   8b6dc:	b293      	uxth	r3, r2
   8b6de:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b6e2:	d156      	bne.n	8b792 <__sflush_r+0xe2>
   8b6e4:	2301      	movs	r3, #1
   8b6e6:	4640      	mov	r0, r8
   8b6e8:	69e9      	ldr	r1, [r5, #28]
   8b6ea:	47a0      	blx	r4
   8b6ec:	1c43      	adds	r3, r0, #1
   8b6ee:	d067      	beq.n	8b7c0 <__sflush_r+0x110>
   8b6f0:	89ab      	ldrh	r3, [r5, #12]
   8b6f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8b6f4:	075f      	lsls	r7, r3, #29
   8b6f6:	d505      	bpl.n	8b704 <__sflush_r+0x54>
   8b6f8:	686a      	ldr	r2, [r5, #4]
   8b6fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8b6fc:	1a80      	subs	r0, r0, r2
   8b6fe:	b10b      	cbz	r3, 8b704 <__sflush_r+0x54>
   8b700:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b702:	1ac0      	subs	r0, r0, r3
   8b704:	4602      	mov	r2, r0
   8b706:	69e9      	ldr	r1, [r5, #28]
   8b708:	2300      	movs	r3, #0
   8b70a:	4640      	mov	r0, r8
   8b70c:	47a0      	blx	r4
   8b70e:	1c41      	adds	r1, r0, #1
   8b710:	d141      	bne.n	8b796 <__sflush_r+0xe6>
   8b712:	f8d8 3000 	ldr.w	r3, [r8]
   8b716:	2b00      	cmp	r3, #0
   8b718:	d03d      	beq.n	8b796 <__sflush_r+0xe6>
   8b71a:	2b1d      	cmp	r3, #29
   8b71c:	d001      	beq.n	8b722 <__sflush_r+0x72>
   8b71e:	2b16      	cmp	r3, #22
   8b720:	d156      	bne.n	8b7d0 <__sflush_r+0x120>
   8b722:	2100      	movs	r1, #0
   8b724:	692a      	ldr	r2, [r5, #16]
   8b726:	89ab      	ldrh	r3, [r5, #12]
   8b728:	e9c5 2100 	strd	r2, r1, [r5]
   8b72c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b730:	81ab      	strh	r3, [r5, #12]
   8b732:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8b734:	f8c8 6000 	str.w	r6, [r8]
   8b738:	b321      	cbz	r1, 8b784 <__sflush_r+0xd4>
   8b73a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8b73e:	4299      	cmp	r1, r3
   8b740:	d002      	beq.n	8b748 <__sflush_r+0x98>
   8b742:	4640      	mov	r0, r8
   8b744:	f000 f9cc 	bl	8bae0 <_free_r>
   8b748:	2000      	movs	r0, #0
   8b74a:	6328      	str	r0, [r5, #48]	; 0x30
   8b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b750:	692f      	ldr	r7, [r5, #16]
   8b752:	b1bf      	cbz	r7, 8b784 <__sflush_r+0xd4>
   8b754:	b293      	uxth	r3, r2
   8b756:	079a      	lsls	r2, r3, #30
   8b758:	bf18      	it	ne
   8b75a:	2300      	movne	r3, #0
   8b75c:	682e      	ldr	r6, [r5, #0]
   8b75e:	bf08      	it	eq
   8b760:	696b      	ldreq	r3, [r5, #20]
   8b762:	602f      	str	r7, [r5, #0]
   8b764:	1bf6      	subs	r6, r6, r7
   8b766:	60ab      	str	r3, [r5, #8]
   8b768:	e00a      	b.n	8b780 <__sflush_r+0xd0>
   8b76a:	4633      	mov	r3, r6
   8b76c:	463a      	mov	r2, r7
   8b76e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8b770:	4640      	mov	r0, r8
   8b772:	69e9      	ldr	r1, [r5, #28]
   8b774:	47a0      	blx	r4
   8b776:	1e04      	subs	r4, r0, #0
   8b778:	eba6 0604 	sub.w	r6, r6, r4
   8b77c:	4427      	add	r7, r4
   8b77e:	dd17      	ble.n	8b7b0 <__sflush_r+0x100>
   8b780:	2e00      	cmp	r6, #0
   8b782:	dcf2      	bgt.n	8b76a <__sflush_r+0xba>
   8b784:	2000      	movs	r0, #0
   8b786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b78a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8b78c:	2b00      	cmp	r3, #0
   8b78e:	dc9d      	bgt.n	8b6cc <__sflush_r+0x1c>
   8b790:	e7f8      	b.n	8b784 <__sflush_r+0xd4>
   8b792:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8b794:	e7ae      	b.n	8b6f4 <__sflush_r+0x44>
   8b796:	2100      	movs	r1, #0
   8b798:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8b79c:	692a      	ldr	r2, [r5, #16]
   8b79e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b7a2:	81ab      	strh	r3, [r5, #12]
   8b7a4:	04db      	lsls	r3, r3, #19
   8b7a6:	e9c5 2100 	strd	r2, r1, [r5]
   8b7aa:	d5c2      	bpl.n	8b732 <__sflush_r+0x82>
   8b7ac:	6528      	str	r0, [r5, #80]	; 0x50
   8b7ae:	e7c0      	b.n	8b732 <__sflush_r+0x82>
   8b7b0:	89ab      	ldrh	r3, [r5, #12]
   8b7b2:	f04f 30ff 	mov.w	r0, #4294967295
   8b7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b7ba:	81ab      	strh	r3, [r5, #12]
   8b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b7c0:	f8d8 3000 	ldr.w	r3, [r8]
   8b7c4:	2b00      	cmp	r3, #0
   8b7c6:	d093      	beq.n	8b6f0 <__sflush_r+0x40>
   8b7c8:	2b1d      	cmp	r3, #29
   8b7ca:	d006      	beq.n	8b7da <__sflush_r+0x12a>
   8b7cc:	2b16      	cmp	r3, #22
   8b7ce:	d004      	beq.n	8b7da <__sflush_r+0x12a>
   8b7d0:	89ab      	ldrh	r3, [r5, #12]
   8b7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b7d6:	81ab      	strh	r3, [r5, #12]
   8b7d8:	e7d5      	b.n	8b786 <__sflush_r+0xd6>
   8b7da:	f8c8 6000 	str.w	r6, [r8]
   8b7de:	e7d1      	b.n	8b784 <__sflush_r+0xd4>

0008b7e0 <_fflush_r>:
   8b7e0:	b538      	push	{r3, r4, r5, lr}
   8b7e2:	460c      	mov	r4, r1
   8b7e4:	4605      	mov	r5, r0
   8b7e6:	b108      	cbz	r0, 8b7ec <_fflush_r+0xc>
   8b7e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b7ea:	b1a3      	cbz	r3, 8b816 <_fflush_r+0x36>
   8b7ec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b7f0:	b1b8      	cbz	r0, 8b822 <_fflush_r+0x42>
   8b7f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b7f4:	07db      	lsls	r3, r3, #31
   8b7f6:	d401      	bmi.n	8b7fc <_fflush_r+0x1c>
   8b7f8:	0581      	lsls	r1, r0, #22
   8b7fa:	d515      	bpl.n	8b828 <_fflush_r+0x48>
   8b7fc:	4628      	mov	r0, r5
   8b7fe:	4621      	mov	r1, r4
   8b800:	f7ff ff56 	bl	8b6b0 <__sflush_r>
   8b804:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b806:	4605      	mov	r5, r0
   8b808:	07da      	lsls	r2, r3, #31
   8b80a:	d402      	bmi.n	8b812 <_fflush_r+0x32>
   8b80c:	89a3      	ldrh	r3, [r4, #12]
   8b80e:	059b      	lsls	r3, r3, #22
   8b810:	d50e      	bpl.n	8b830 <_fflush_r+0x50>
   8b812:	4628      	mov	r0, r5
   8b814:	bd38      	pop	{r3, r4, r5, pc}
   8b816:	f000 f83f 	bl	8b898 <__sinit>
   8b81a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b81e:	2800      	cmp	r0, #0
   8b820:	d1e7      	bne.n	8b7f2 <_fflush_r+0x12>
   8b822:	4605      	mov	r5, r0
   8b824:	4628      	mov	r0, r5
   8b826:	bd38      	pop	{r3, r4, r5, pc}
   8b828:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b82a:	f000 fc07 	bl	8c03c <__retarget_lock_acquire_recursive>
   8b82e:	e7e5      	b.n	8b7fc <_fflush_r+0x1c>
   8b830:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b832:	f000 fc05 	bl	8c040 <__retarget_lock_release_recursive>
   8b836:	4628      	mov	r0, r5
   8b838:	bd38      	pop	{r3, r4, r5, pc}
   8b83a:	bf00      	nop

0008b83c <std>:
   8b83c:	2300      	movs	r3, #0
   8b83e:	b510      	push	{r4, lr}
   8b840:	4604      	mov	r4, r0
   8b842:	e9c0 3300 	strd	r3, r3, [r0]
   8b846:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8b84a:	8181      	strh	r1, [r0, #12]
   8b84c:	81c2      	strh	r2, [r0, #14]
   8b84e:	4619      	mov	r1, r3
   8b850:	6083      	str	r3, [r0, #8]
   8b852:	6643      	str	r3, [r0, #100]	; 0x64
   8b854:	6183      	str	r3, [r0, #24]
   8b856:	2208      	movs	r2, #8
   8b858:	305c      	adds	r0, #92	; 0x5c
   8b85a:	f7fc f8b5 	bl	879c8 <memset>
   8b85e:	4807      	ldr	r0, [pc, #28]	; (8b87c <std+0x40>)
   8b860:	4907      	ldr	r1, [pc, #28]	; (8b880 <std+0x44>)
   8b862:	4a08      	ldr	r2, [pc, #32]	; (8b884 <std+0x48>)
   8b864:	4b08      	ldr	r3, [pc, #32]	; (8b888 <std+0x4c>)
   8b866:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8b86a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8b86e:	62e3      	str	r3, [r4, #44]	; 0x2c
   8b870:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8b874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b878:	f000 bbdc 	b.w	8c034 <__retarget_lock_init_recursive>
   8b87c:	0008d3a5 	.word	0x0008d3a5
   8b880:	0008d3c9 	.word	0x0008d3c9
   8b884:	0008d409 	.word	0x0008d409
   8b888:	0008d429 	.word	0x0008d429

0008b88c <_cleanup_r>:
   8b88c:	4901      	ldr	r1, [pc, #4]	; (8b894 <_cleanup_r+0x8>)
   8b88e:	f000 bba3 	b.w	8bfd8 <_fwalk_reent>
   8b892:	bf00      	nop
   8b894:	0008d86d 	.word	0x0008d86d

0008b898 <__sinit>:
   8b898:	b510      	push	{r4, lr}
   8b89a:	4604      	mov	r4, r0
   8b89c:	4813      	ldr	r0, [pc, #76]	; (8b8ec <__sinit+0x54>)
   8b89e:	f000 fbcd 	bl	8c03c <__retarget_lock_acquire_recursive>
   8b8a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8b8a4:	b9ea      	cbnz	r2, 8b8e2 <__sinit+0x4a>
   8b8a6:	2003      	movs	r0, #3
   8b8a8:	4911      	ldr	r1, [pc, #68]	; (8b8f0 <__sinit+0x58>)
   8b8aa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8b8ae:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8b8b2:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8b8b6:	63e1      	str	r1, [r4, #60]	; 0x3c
   8b8b8:	6860      	ldr	r0, [r4, #4]
   8b8ba:	2104      	movs	r1, #4
   8b8bc:	f7ff ffbe 	bl	8b83c <std>
   8b8c0:	68a0      	ldr	r0, [r4, #8]
   8b8c2:	2201      	movs	r2, #1
   8b8c4:	2109      	movs	r1, #9
   8b8c6:	f7ff ffb9 	bl	8b83c <std>
   8b8ca:	68e0      	ldr	r0, [r4, #12]
   8b8cc:	2202      	movs	r2, #2
   8b8ce:	2112      	movs	r1, #18
   8b8d0:	f7ff ffb4 	bl	8b83c <std>
   8b8d4:	2301      	movs	r3, #1
   8b8d6:	4805      	ldr	r0, [pc, #20]	; (8b8ec <__sinit+0x54>)
   8b8d8:	63a3      	str	r3, [r4, #56]	; 0x38
   8b8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b8de:	f000 bbaf 	b.w	8c040 <__retarget_lock_release_recursive>
   8b8e2:	4802      	ldr	r0, [pc, #8]	; (8b8ec <__sinit+0x54>)
   8b8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8b8e8:	f000 bbaa 	b.w	8c040 <__retarget_lock_release_recursive>
   8b8ec:	20002e18 	.word	0x20002e18
   8b8f0:	0008b88d 	.word	0x0008b88d

0008b8f4 <__sfp_lock_acquire>:
   8b8f4:	4801      	ldr	r0, [pc, #4]	; (8b8fc <__sfp_lock_acquire+0x8>)
   8b8f6:	f000 bba1 	b.w	8c03c <__retarget_lock_acquire_recursive>
   8b8fa:	bf00      	nop
   8b8fc:	20002e2c 	.word	0x20002e2c

0008b900 <__sfp_lock_release>:
   8b900:	4801      	ldr	r0, [pc, #4]	; (8b908 <__sfp_lock_release+0x8>)
   8b902:	f000 bb9d 	b.w	8c040 <__retarget_lock_release_recursive>
   8b906:	bf00      	nop
   8b908:	20002e2c 	.word	0x20002e2c

0008b90c <__libc_fini_array>:
   8b90c:	b538      	push	{r3, r4, r5, lr}
   8b90e:	4b08      	ldr	r3, [pc, #32]	; (8b930 <__libc_fini_array+0x24>)
   8b910:	4d08      	ldr	r5, [pc, #32]	; (8b934 <__libc_fini_array+0x28>)
   8b912:	1b5b      	subs	r3, r3, r5
   8b914:	109c      	asrs	r4, r3, #2
   8b916:	d007      	beq.n	8b928 <__libc_fini_array+0x1c>
   8b918:	3b04      	subs	r3, #4
   8b91a:	441d      	add	r5, r3
   8b91c:	3c01      	subs	r4, #1
   8b91e:	f855 3904 	ldr.w	r3, [r5], #-4
   8b922:	4798      	blx	r3
   8b924:	2c00      	cmp	r4, #0
   8b926:	d1f9      	bne.n	8b91c <__libc_fini_array+0x10>
   8b928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b92c:	f003 b8a2 	b.w	8ea74 <_fini>
   8b930:	0008ea84 	.word	0x0008ea84
   8b934:	0008ea80 	.word	0x0008ea80

0008b938 <__fputwc>:
   8b938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b93c:	b083      	sub	sp, #12
   8b93e:	4607      	mov	r7, r0
   8b940:	4688      	mov	r8, r1
   8b942:	4614      	mov	r4, r2
   8b944:	f000 fb6c 	bl	8c020 <__locale_mb_cur_max>
   8b948:	2801      	cmp	r0, #1
   8b94a:	d103      	bne.n	8b954 <__fputwc+0x1c>
   8b94c:	f108 33ff 	add.w	r3, r8, #4294967295
   8b950:	2bfe      	cmp	r3, #254	; 0xfe
   8b952:	d933      	bls.n	8b9bc <__fputwc+0x84>
   8b954:	4642      	mov	r2, r8
   8b956:	4638      	mov	r0, r7
   8b958:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b95c:	a901      	add	r1, sp, #4
   8b95e:	f001 fe9d 	bl	8d69c <_wcrtomb_r>
   8b962:	1c42      	adds	r2, r0, #1
   8b964:	4606      	mov	r6, r0
   8b966:	d02f      	beq.n	8b9c8 <__fputwc+0x90>
   8b968:	b318      	cbz	r0, 8b9b2 <__fputwc+0x7a>
   8b96a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b96e:	2500      	movs	r5, #0
   8b970:	f10d 0904 	add.w	r9, sp, #4
   8b974:	e008      	b.n	8b988 <__fputwc+0x50>
   8b976:	6823      	ldr	r3, [r4, #0]
   8b978:	1c5a      	adds	r2, r3, #1
   8b97a:	6022      	str	r2, [r4, #0]
   8b97c:	7019      	strb	r1, [r3, #0]
   8b97e:	3501      	adds	r5, #1
   8b980:	42b5      	cmp	r5, r6
   8b982:	d216      	bcs.n	8b9b2 <__fputwc+0x7a>
   8b984:	f815 1009 	ldrb.w	r1, [r5, r9]
   8b988:	68a3      	ldr	r3, [r4, #8]
   8b98a:	3b01      	subs	r3, #1
   8b98c:	2b00      	cmp	r3, #0
   8b98e:	60a3      	str	r3, [r4, #8]
   8b990:	daf1      	bge.n	8b976 <__fputwc+0x3e>
   8b992:	69a2      	ldr	r2, [r4, #24]
   8b994:	4293      	cmp	r3, r2
   8b996:	db01      	blt.n	8b99c <__fputwc+0x64>
   8b998:	290a      	cmp	r1, #10
   8b99a:	d1ec      	bne.n	8b976 <__fputwc+0x3e>
   8b99c:	4622      	mov	r2, r4
   8b99e:	4638      	mov	r0, r7
   8b9a0:	f001 fe24 	bl	8d5ec <__swbuf_r>
   8b9a4:	1c43      	adds	r3, r0, #1
   8b9a6:	d1ea      	bne.n	8b97e <__fputwc+0x46>
   8b9a8:	4606      	mov	r6, r0
   8b9aa:	4630      	mov	r0, r6
   8b9ac:	b003      	add	sp, #12
   8b9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b9b2:	4646      	mov	r6, r8
   8b9b4:	4630      	mov	r0, r6
   8b9b6:	b003      	add	sp, #12
   8b9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b9bc:	fa5f f188 	uxtb.w	r1, r8
   8b9c0:	4606      	mov	r6, r0
   8b9c2:	f88d 1004 	strb.w	r1, [sp, #4]
   8b9c6:	e7d2      	b.n	8b96e <__fputwc+0x36>
   8b9c8:	4630      	mov	r0, r6
   8b9ca:	89a3      	ldrh	r3, [r4, #12]
   8b9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b9d0:	81a3      	strh	r3, [r4, #12]
   8b9d2:	b003      	add	sp, #12
   8b9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b9d8 <_fputwc_r>:
   8b9d8:	b530      	push	{r4, r5, lr}
   8b9da:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b9dc:	4614      	mov	r4, r2
   8b9de:	f013 0f01 	tst.w	r3, #1
   8b9e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b9e6:	4605      	mov	r5, r0
   8b9e8:	b083      	sub	sp, #12
   8b9ea:	b29a      	uxth	r2, r3
   8b9ec:	d101      	bne.n	8b9f2 <_fputwc_r+0x1a>
   8b9ee:	0598      	lsls	r0, r3, #22
   8b9f0:	d51c      	bpl.n	8ba2c <_fputwc_r+0x54>
   8b9f2:	0490      	lsls	r0, r2, #18
   8b9f4:	d406      	bmi.n	8ba04 <_fputwc_r+0x2c>
   8b9f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b9f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b9fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8ba00:	81a3      	strh	r3, [r4, #12]
   8ba02:	6662      	str	r2, [r4, #100]	; 0x64
   8ba04:	4628      	mov	r0, r5
   8ba06:	4622      	mov	r2, r4
   8ba08:	f7ff ff96 	bl	8b938 <__fputwc>
   8ba0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ba0e:	4605      	mov	r5, r0
   8ba10:	07da      	lsls	r2, r3, #31
   8ba12:	d402      	bmi.n	8ba1a <_fputwc_r+0x42>
   8ba14:	89a3      	ldrh	r3, [r4, #12]
   8ba16:	059b      	lsls	r3, r3, #22
   8ba18:	d502      	bpl.n	8ba20 <_fputwc_r+0x48>
   8ba1a:	4628      	mov	r0, r5
   8ba1c:	b003      	add	sp, #12
   8ba1e:	bd30      	pop	{r4, r5, pc}
   8ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ba22:	f000 fb0d 	bl	8c040 <__retarget_lock_release_recursive>
   8ba26:	4628      	mov	r0, r5
   8ba28:	b003      	add	sp, #12
   8ba2a:	bd30      	pop	{r4, r5, pc}
   8ba2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ba2e:	9101      	str	r1, [sp, #4]
   8ba30:	f000 fb04 	bl	8c03c <__retarget_lock_acquire_recursive>
   8ba34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ba38:	9901      	ldr	r1, [sp, #4]
   8ba3a:	b29a      	uxth	r2, r3
   8ba3c:	e7d9      	b.n	8b9f2 <_fputwc_r+0x1a>
   8ba3e:	bf00      	nop

0008ba40 <_malloc_trim_r>:
   8ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba42:	460c      	mov	r4, r1
   8ba44:	4f23      	ldr	r7, [pc, #140]	; (8bad4 <_malloc_trim_r+0x94>)
   8ba46:	4606      	mov	r6, r0
   8ba48:	f000 feea 	bl	8c820 <__malloc_lock>
   8ba4c:	68bb      	ldr	r3, [r7, #8]
   8ba4e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8ba52:	685d      	ldr	r5, [r3, #4]
   8ba54:	310f      	adds	r1, #15
   8ba56:	f025 0503 	bic.w	r5, r5, #3
   8ba5a:	194b      	adds	r3, r1, r5
   8ba5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8ba60:	f023 030f 	bic.w	r3, r3, #15
   8ba64:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8ba68:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8ba6c:	db07      	blt.n	8ba7e <_malloc_trim_r+0x3e>
   8ba6e:	2100      	movs	r1, #0
   8ba70:	4630      	mov	r0, r6
   8ba72:	f001 fc85 	bl	8d380 <_sbrk_r>
   8ba76:	68bb      	ldr	r3, [r7, #8]
   8ba78:	442b      	add	r3, r5
   8ba7a:	4298      	cmp	r0, r3
   8ba7c:	d004      	beq.n	8ba88 <_malloc_trim_r+0x48>
   8ba7e:	4630      	mov	r0, r6
   8ba80:	f000 fed4 	bl	8c82c <__malloc_unlock>
   8ba84:	2000      	movs	r0, #0
   8ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba88:	4630      	mov	r0, r6
   8ba8a:	4261      	negs	r1, r4
   8ba8c:	f001 fc78 	bl	8d380 <_sbrk_r>
   8ba90:	3001      	adds	r0, #1
   8ba92:	d00d      	beq.n	8bab0 <_malloc_trim_r+0x70>
   8ba94:	4a10      	ldr	r2, [pc, #64]	; (8bad8 <_malloc_trim_r+0x98>)
   8ba96:	68b9      	ldr	r1, [r7, #8]
   8ba98:	6813      	ldr	r3, [r2, #0]
   8ba9a:	1b2d      	subs	r5, r5, r4
   8ba9c:	f045 0501 	orr.w	r5, r5, #1
   8baa0:	4630      	mov	r0, r6
   8baa2:	1b1b      	subs	r3, r3, r4
   8baa4:	604d      	str	r5, [r1, #4]
   8baa6:	6013      	str	r3, [r2, #0]
   8baa8:	f000 fec0 	bl	8c82c <__malloc_unlock>
   8baac:	2001      	movs	r0, #1
   8baae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bab0:	2100      	movs	r1, #0
   8bab2:	4630      	mov	r0, r6
   8bab4:	f001 fc64 	bl	8d380 <_sbrk_r>
   8bab8:	68ba      	ldr	r2, [r7, #8]
   8baba:	1a83      	subs	r3, r0, r2
   8babc:	2b0f      	cmp	r3, #15
   8babe:	ddde      	ble.n	8ba7e <_malloc_trim_r+0x3e>
   8bac0:	4906      	ldr	r1, [pc, #24]	; (8badc <_malloc_trim_r+0x9c>)
   8bac2:	f043 0301 	orr.w	r3, r3, #1
   8bac6:	680c      	ldr	r4, [r1, #0]
   8bac8:	4903      	ldr	r1, [pc, #12]	; (8bad8 <_malloc_trim_r+0x98>)
   8baca:	1b00      	subs	r0, r0, r4
   8bacc:	6053      	str	r3, [r2, #4]
   8bace:	6008      	str	r0, [r1, #0]
   8bad0:	e7d5      	b.n	8ba7e <_malloc_trim_r+0x3e>
   8bad2:	bf00      	nop
   8bad4:	20000cb8 	.word	0x20000cb8
   8bad8:	200023bc 	.word	0x200023bc
   8badc:	200010c0 	.word	0x200010c0

0008bae0 <_free_r>:
   8bae0:	2900      	cmp	r1, #0
   8bae2:	d05f      	beq.n	8bba4 <_free_r+0xc4>
   8bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bae6:	460c      	mov	r4, r1
   8bae8:	4606      	mov	r6, r0
   8baea:	f000 fe99 	bl	8c820 <__malloc_lock>
   8baee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8baf2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8bce8 <_free_r+0x208>
   8baf6:	f1a4 0008 	sub.w	r0, r4, #8
   8bafa:	f023 0101 	bic.w	r1, r3, #1
   8bafe:	1842      	adds	r2, r0, r1
   8bb00:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8bb04:	6855      	ldr	r5, [r2, #4]
   8bb06:	4297      	cmp	r7, r2
   8bb08:	f025 0503 	bic.w	r5, r5, #3
   8bb0c:	f000 8089 	beq.w	8bc22 <_free_r+0x142>
   8bb10:	07df      	lsls	r7, r3, #31
   8bb12:	6055      	str	r5, [r2, #4]
   8bb14:	d434      	bmi.n	8bb80 <_free_r+0xa0>
   8bb16:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8bb1a:	f10c 0408 	add.w	r4, ip, #8
   8bb1e:	1bc0      	subs	r0, r0, r7
   8bb20:	6883      	ldr	r3, [r0, #8]
   8bb22:	4439      	add	r1, r7
   8bb24:	42a3      	cmp	r3, r4
   8bb26:	d06a      	beq.n	8bbfe <_free_r+0x11e>
   8bb28:	1957      	adds	r7, r2, r5
   8bb2a:	687f      	ldr	r7, [r7, #4]
   8bb2c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8bb30:	f8c3 e00c 	str.w	lr, [r3, #12]
   8bb34:	f8ce 3008 	str.w	r3, [lr, #8]
   8bb38:	07fb      	lsls	r3, r7, #31
   8bb3a:	f140 8097 	bpl.w	8bc6c <_free_r+0x18c>
   8bb3e:	f041 0301 	orr.w	r3, r1, #1
   8bb42:	6043      	str	r3, [r0, #4]
   8bb44:	6011      	str	r1, [r2, #0]
   8bb46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8bb4a:	d234      	bcs.n	8bbb6 <_free_r+0xd6>
   8bb4c:	2201      	movs	r2, #1
   8bb4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8bb52:	08cb      	lsrs	r3, r1, #3
   8bb54:	0949      	lsrs	r1, r1, #5
   8bb56:	4413      	add	r3, r2
   8bb58:	fa02 f101 	lsl.w	r1, r2, r1
   8bb5c:	4321      	orrs	r1, r4
   8bb5e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8bb62:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8bb66:	3a08      	subs	r2, #8
   8bb68:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8bb6c:	f8cc 1004 	str.w	r1, [ip, #4]
   8bb70:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8bb74:	60e0      	str	r0, [r4, #12]
   8bb76:	4630      	mov	r0, r6
   8bb78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bb7c:	f000 be56 	b.w	8c82c <__malloc_unlock>
   8bb80:	1953      	adds	r3, r2, r5
   8bb82:	685b      	ldr	r3, [r3, #4]
   8bb84:	07df      	lsls	r7, r3, #31
   8bb86:	d40e      	bmi.n	8bba6 <_free_r+0xc6>
   8bb88:	4429      	add	r1, r5
   8bb8a:	f10c 0408 	add.w	r4, ip, #8
   8bb8e:	6893      	ldr	r3, [r2, #8]
   8bb90:	42a3      	cmp	r3, r4
   8bb92:	d073      	beq.n	8bc7c <_free_r+0x19c>
   8bb94:	68d4      	ldr	r4, [r2, #12]
   8bb96:	f041 0201 	orr.w	r2, r1, #1
   8bb9a:	60dc      	str	r4, [r3, #12]
   8bb9c:	60a3      	str	r3, [r4, #8]
   8bb9e:	6042      	str	r2, [r0, #4]
   8bba0:	5041      	str	r1, [r0, r1]
   8bba2:	e7d0      	b.n	8bb46 <_free_r+0x66>
   8bba4:	4770      	bx	lr
   8bba6:	f041 0301 	orr.w	r3, r1, #1
   8bbaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8bbae:	f844 3c04 	str.w	r3, [r4, #-4]
   8bbb2:	6011      	str	r1, [r2, #0]
   8bbb4:	d3ca      	bcc.n	8bb4c <_free_r+0x6c>
   8bbb6:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8bbba:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8bbbe:	d24a      	bcs.n	8bc56 <_free_r+0x176>
   8bbc0:	098b      	lsrs	r3, r1, #6
   8bbc2:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8bbc6:	00ed      	lsls	r5, r5, #3
   8bbc8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8bbcc:	f85c 3005 	ldr.w	r3, [ip, r5]
   8bbd0:	eb0c 0405 	add.w	r4, ip, r5
   8bbd4:	3c08      	subs	r4, #8
   8bbd6:	429c      	cmp	r4, r3
   8bbd8:	d059      	beq.n	8bc8e <_free_r+0x1ae>
   8bbda:	685a      	ldr	r2, [r3, #4]
   8bbdc:	f022 0203 	bic.w	r2, r2, #3
   8bbe0:	428a      	cmp	r2, r1
   8bbe2:	d902      	bls.n	8bbea <_free_r+0x10a>
   8bbe4:	689b      	ldr	r3, [r3, #8]
   8bbe6:	429c      	cmp	r4, r3
   8bbe8:	d1f7      	bne.n	8bbda <_free_r+0xfa>
   8bbea:	68dc      	ldr	r4, [r3, #12]
   8bbec:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8bbf0:	60a0      	str	r0, [r4, #8]
   8bbf2:	60d8      	str	r0, [r3, #12]
   8bbf4:	4630      	mov	r0, r6
   8bbf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bbfa:	f000 be17 	b.w	8c82c <__malloc_unlock>
   8bbfe:	1953      	adds	r3, r2, r5
   8bc00:	685b      	ldr	r3, [r3, #4]
   8bc02:	07db      	lsls	r3, r3, #31
   8bc04:	d466      	bmi.n	8bcd4 <_free_r+0x1f4>
   8bc06:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8bc0a:	4429      	add	r1, r5
   8bc0c:	f041 0401 	orr.w	r4, r1, #1
   8bc10:	60d3      	str	r3, [r2, #12]
   8bc12:	609a      	str	r2, [r3, #8]
   8bc14:	6044      	str	r4, [r0, #4]
   8bc16:	5041      	str	r1, [r0, r1]
   8bc18:	4630      	mov	r0, r6
   8bc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8bc1e:	f000 be05 	b.w	8c82c <__malloc_unlock>
   8bc22:	07db      	lsls	r3, r3, #31
   8bc24:	4429      	add	r1, r5
   8bc26:	d407      	bmi.n	8bc38 <_free_r+0x158>
   8bc28:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8bc2c:	1b00      	subs	r0, r0, r4
   8bc2e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8bc32:	4421      	add	r1, r4
   8bc34:	60d3      	str	r3, [r2, #12]
   8bc36:	609a      	str	r2, [r3, #8]
   8bc38:	4b29      	ldr	r3, [pc, #164]	; (8bce0 <_free_r+0x200>)
   8bc3a:	f041 0201 	orr.w	r2, r1, #1
   8bc3e:	681b      	ldr	r3, [r3, #0]
   8bc40:	6042      	str	r2, [r0, #4]
   8bc42:	428b      	cmp	r3, r1
   8bc44:	f8cc 0008 	str.w	r0, [ip, #8]
   8bc48:	d895      	bhi.n	8bb76 <_free_r+0x96>
   8bc4a:	4b26      	ldr	r3, [pc, #152]	; (8bce4 <_free_r+0x204>)
   8bc4c:	4630      	mov	r0, r6
   8bc4e:	6819      	ldr	r1, [r3, #0]
   8bc50:	f7ff fef6 	bl	8ba40 <_malloc_trim_r>
   8bc54:	e78f      	b.n	8bb76 <_free_r+0x96>
   8bc56:	2b14      	cmp	r3, #20
   8bc58:	d90a      	bls.n	8bc70 <_free_r+0x190>
   8bc5a:	2b54      	cmp	r3, #84	; 0x54
   8bc5c:	d821      	bhi.n	8bca2 <_free_r+0x1c2>
   8bc5e:	0b0b      	lsrs	r3, r1, #12
   8bc60:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8bc64:	00ed      	lsls	r5, r5, #3
   8bc66:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8bc6a:	e7af      	b.n	8bbcc <_free_r+0xec>
   8bc6c:	4429      	add	r1, r5
   8bc6e:	e78e      	b.n	8bb8e <_free_r+0xae>
   8bc70:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8bc74:	00ed      	lsls	r5, r5, #3
   8bc76:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8bc7a:	e7a7      	b.n	8bbcc <_free_r+0xec>
   8bc7c:	f041 0301 	orr.w	r3, r1, #1
   8bc80:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8bc84:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8bc88:	6043      	str	r3, [r0, #4]
   8bc8a:	5041      	str	r1, [r0, r1]
   8bc8c:	e773      	b.n	8bb76 <_free_r+0x96>
   8bc8e:	2501      	movs	r5, #1
   8bc90:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8bc94:	1092      	asrs	r2, r2, #2
   8bc96:	fa05 f202 	lsl.w	r2, r5, r2
   8bc9a:	430a      	orrs	r2, r1
   8bc9c:	f8cc 2004 	str.w	r2, [ip, #4]
   8bca0:	e7a4      	b.n	8bbec <_free_r+0x10c>
   8bca2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bca6:	d806      	bhi.n	8bcb6 <_free_r+0x1d6>
   8bca8:	0bcb      	lsrs	r3, r1, #15
   8bcaa:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8bcae:	00ed      	lsls	r5, r5, #3
   8bcb0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8bcb4:	e78a      	b.n	8bbcc <_free_r+0xec>
   8bcb6:	f240 5254 	movw	r2, #1364	; 0x554
   8bcba:	4293      	cmp	r3, r2
   8bcbc:	d806      	bhi.n	8bccc <_free_r+0x1ec>
   8bcbe:	0c8b      	lsrs	r3, r1, #18
   8bcc0:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8bcc4:	00ed      	lsls	r5, r5, #3
   8bcc6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8bcca:	e77f      	b.n	8bbcc <_free_r+0xec>
   8bccc:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8bcd0:	227e      	movs	r2, #126	; 0x7e
   8bcd2:	e77b      	b.n	8bbcc <_free_r+0xec>
   8bcd4:	f041 0301 	orr.w	r3, r1, #1
   8bcd8:	6043      	str	r3, [r0, #4]
   8bcda:	6011      	str	r1, [r2, #0]
   8bcdc:	e74b      	b.n	8bb76 <_free_r+0x96>
   8bcde:	bf00      	nop
   8bce0:	200010c4 	.word	0x200010c4
   8bce4:	200023ec 	.word	0x200023ec
   8bce8:	20000cb8 	.word	0x20000cb8

0008bcec <__sfvwrite_r>:
   8bcec:	6893      	ldr	r3, [r2, #8]
   8bcee:	2b00      	cmp	r3, #0
   8bcf0:	f000 80bd 	beq.w	8be6e <__sfvwrite_r+0x182>
   8bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bcf8:	4690      	mov	r8, r2
   8bcfa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8bcfe:	460c      	mov	r4, r1
   8bd00:	0711      	lsls	r1, r2, #28
   8bd02:	4681      	mov	r9, r0
   8bd04:	b083      	sub	sp, #12
   8bd06:	b293      	uxth	r3, r2
   8bd08:	d527      	bpl.n	8bd5a <__sfvwrite_r+0x6e>
   8bd0a:	6922      	ldr	r2, [r4, #16]
   8bd0c:	b32a      	cbz	r2, 8bd5a <__sfvwrite_r+0x6e>
   8bd0e:	f013 0702 	ands.w	r7, r3, #2
   8bd12:	f8d8 5000 	ldr.w	r5, [r8]
   8bd16:	d02f      	beq.n	8bd78 <__sfvwrite_r+0x8c>
   8bd18:	f04f 0b00 	mov.w	fp, #0
   8bd1c:	465f      	mov	r7, fp
   8bd1e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8bfd4 <__sfvwrite_r+0x2e8>
   8bd22:	2f00      	cmp	r7, #0
   8bd24:	f000 8089 	beq.w	8be3a <__sfvwrite_r+0x14e>
   8bd28:	4557      	cmp	r7, sl
   8bd2a:	463b      	mov	r3, r7
   8bd2c:	465a      	mov	r2, fp
   8bd2e:	bf28      	it	cs
   8bd30:	4653      	movcs	r3, sl
   8bd32:	4648      	mov	r0, r9
   8bd34:	69e1      	ldr	r1, [r4, #28]
   8bd36:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8bd38:	47b0      	blx	r6
   8bd3a:	2800      	cmp	r0, #0
   8bd3c:	f340 808d 	ble.w	8be5a <__sfvwrite_r+0x16e>
   8bd40:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8bd44:	4483      	add	fp, r0
   8bd46:	1a1b      	subs	r3, r3, r0
   8bd48:	1a3f      	subs	r7, r7, r0
   8bd4a:	f8c8 3008 	str.w	r3, [r8, #8]
   8bd4e:	2b00      	cmp	r3, #0
   8bd50:	d1e7      	bne.n	8bd22 <__sfvwrite_r+0x36>
   8bd52:	2000      	movs	r0, #0
   8bd54:	b003      	add	sp, #12
   8bd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd5a:	4621      	mov	r1, r4
   8bd5c:	4648      	mov	r0, r9
   8bd5e:	f7fe fc3b 	bl	8a5d8 <__swsetup_r>
   8bd62:	2800      	cmp	r0, #0
   8bd64:	f040 8132 	bne.w	8bfcc <__sfvwrite_r+0x2e0>
   8bd68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bd6c:	f8d8 5000 	ldr.w	r5, [r8]
   8bd70:	b293      	uxth	r3, r2
   8bd72:	f013 0702 	ands.w	r7, r3, #2
   8bd76:	d1cf      	bne.n	8bd18 <__sfvwrite_r+0x2c>
   8bd78:	f013 0a01 	ands.w	sl, r3, #1
   8bd7c:	d179      	bne.n	8be72 <__sfvwrite_r+0x186>
   8bd7e:	4656      	mov	r6, sl
   8bd80:	2e00      	cmp	r6, #0
   8bd82:	d056      	beq.n	8be32 <__sfvwrite_r+0x146>
   8bd84:	059a      	lsls	r2, r3, #22
   8bd86:	68a7      	ldr	r7, [r4, #8]
   8bd88:	f140 80bd 	bpl.w	8bf06 <__sfvwrite_r+0x21a>
   8bd8c:	42b7      	cmp	r7, r6
   8bd8e:	46bb      	mov	fp, r7
   8bd90:	f200 80d2 	bhi.w	8bf38 <__sfvwrite_r+0x24c>
   8bd94:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bd98:	f000 80d0 	beq.w	8bf3c <__sfvwrite_r+0x250>
   8bd9c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8bda0:	6822      	ldr	r2, [r4, #0]
   8bda2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8bda6:	eba2 0b01 	sub.w	fp, r2, r1
   8bdaa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8bdae:	f10b 0001 	add.w	r0, fp, #1
   8bdb2:	107f      	asrs	r7, r7, #1
   8bdb4:	4430      	add	r0, r6
   8bdb6:	42b8      	cmp	r0, r7
   8bdb8:	463a      	mov	r2, r7
   8bdba:	bf84      	itt	hi
   8bdbc:	4607      	movhi	r7, r0
   8bdbe:	463a      	movhi	r2, r7
   8bdc0:	055b      	lsls	r3, r3, #21
   8bdc2:	f140 80e7 	bpl.w	8bf94 <__sfvwrite_r+0x2a8>
   8bdc6:	4611      	mov	r1, r2
   8bdc8:	4648      	mov	r0, r9
   8bdca:	f000 f9bb 	bl	8c144 <_malloc_r>
   8bdce:	2800      	cmp	r0, #0
   8bdd0:	f000 80f6 	beq.w	8bfc0 <__sfvwrite_r+0x2d4>
   8bdd4:	465a      	mov	r2, fp
   8bdd6:	6921      	ldr	r1, [r4, #16]
   8bdd8:	9000      	str	r0, [sp, #0]
   8bdda:	f7fb fd7f 	bl	878dc <memcpy>
   8bdde:	89a2      	ldrh	r2, [r4, #12]
   8bde0:	9b00      	ldr	r3, [sp, #0]
   8bde2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bde6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bdea:	81a2      	strh	r2, [r4, #12]
   8bdec:	eba7 020b 	sub.w	r2, r7, fp
   8bdf0:	eb03 000b 	add.w	r0, r3, fp
   8bdf4:	6167      	str	r7, [r4, #20]
   8bdf6:	46b3      	mov	fp, r6
   8bdf8:	4637      	mov	r7, r6
   8bdfa:	6123      	str	r3, [r4, #16]
   8bdfc:	6020      	str	r0, [r4, #0]
   8bdfe:	60a2      	str	r2, [r4, #8]
   8be00:	465a      	mov	r2, fp
   8be02:	4651      	mov	r1, sl
   8be04:	f000 fca2 	bl	8c74c <memmove>
   8be08:	68a2      	ldr	r2, [r4, #8]
   8be0a:	6823      	ldr	r3, [r4, #0]
   8be0c:	1bd2      	subs	r2, r2, r7
   8be0e:	4637      	mov	r7, r6
   8be10:	2600      	movs	r6, #0
   8be12:	445b      	add	r3, fp
   8be14:	60a2      	str	r2, [r4, #8]
   8be16:	6023      	str	r3, [r4, #0]
   8be18:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8be1c:	44ba      	add	sl, r7
   8be1e:	1bd7      	subs	r7, r2, r7
   8be20:	f8c8 7008 	str.w	r7, [r8, #8]
   8be24:	2f00      	cmp	r7, #0
   8be26:	d094      	beq.n	8bd52 <__sfvwrite_r+0x66>
   8be28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8be2c:	b29b      	uxth	r3, r3
   8be2e:	2e00      	cmp	r6, #0
   8be30:	d1a8      	bne.n	8bd84 <__sfvwrite_r+0x98>
   8be32:	e9d5 a600 	ldrd	sl, r6, [r5]
   8be36:	3508      	adds	r5, #8
   8be38:	e7a2      	b.n	8bd80 <__sfvwrite_r+0x94>
   8be3a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8be3e:	3508      	adds	r5, #8
   8be40:	e76f      	b.n	8bd22 <__sfvwrite_r+0x36>
   8be42:	4629      	mov	r1, r5
   8be44:	465a      	mov	r2, fp
   8be46:	f000 fc81 	bl	8c74c <memmove>
   8be4a:	6823      	ldr	r3, [r4, #0]
   8be4c:	4621      	mov	r1, r4
   8be4e:	445b      	add	r3, fp
   8be50:	4648      	mov	r0, r9
   8be52:	6023      	str	r3, [r4, #0]
   8be54:	f7ff fcc4 	bl	8b7e0 <_fflush_r>
   8be58:	b358      	cbz	r0, 8beb2 <__sfvwrite_r+0x1c6>
   8be5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8be5e:	f04f 30ff 	mov.w	r0, #4294967295
   8be62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8be66:	81a3      	strh	r3, [r4, #12]
   8be68:	b003      	add	sp, #12
   8be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be6e:	2000      	movs	r0, #0
   8be70:	4770      	bx	lr
   8be72:	463e      	mov	r6, r7
   8be74:	46aa      	mov	sl, r5
   8be76:	4638      	mov	r0, r7
   8be78:	463d      	mov	r5, r7
   8be7a:	9700      	str	r7, [sp, #0]
   8be7c:	b36e      	cbz	r6, 8beda <__sfvwrite_r+0x1ee>
   8be7e:	2800      	cmp	r0, #0
   8be80:	d035      	beq.n	8beee <__sfvwrite_r+0x202>
   8be82:	9a00      	ldr	r2, [sp, #0]
   8be84:	6820      	ldr	r0, [r4, #0]
   8be86:	6921      	ldr	r1, [r4, #16]
   8be88:	42b2      	cmp	r2, r6
   8be8a:	bf28      	it	cs
   8be8c:	4632      	movcs	r2, r6
   8be8e:	4288      	cmp	r0, r1
   8be90:	6963      	ldr	r3, [r4, #20]
   8be92:	d904      	bls.n	8be9e <__sfvwrite_r+0x1b2>
   8be94:	68a1      	ldr	r1, [r4, #8]
   8be96:	eb03 0b01 	add.w	fp, r3, r1
   8be9a:	455a      	cmp	r2, fp
   8be9c:	dcd1      	bgt.n	8be42 <__sfvwrite_r+0x156>
   8be9e:	4293      	cmp	r3, r2
   8bea0:	dc6b      	bgt.n	8bf7a <__sfvwrite_r+0x28e>
   8bea2:	462a      	mov	r2, r5
   8bea4:	4648      	mov	r0, r9
   8bea6:	69e1      	ldr	r1, [r4, #28]
   8bea8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8beaa:	47b8      	blx	r7
   8beac:	f1b0 0b00 	subs.w	fp, r0, #0
   8beb0:	ddd3      	ble.n	8be5a <__sfvwrite_r+0x16e>
   8beb2:	9b00      	ldr	r3, [sp, #0]
   8beb4:	ebb3 030b 	subs.w	r3, r3, fp
   8beb8:	9300      	str	r3, [sp, #0]
   8beba:	d057      	beq.n	8bf6c <__sfvwrite_r+0x280>
   8bebc:	2001      	movs	r0, #1
   8bebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8bec2:	445d      	add	r5, fp
   8bec4:	eba3 030b 	sub.w	r3, r3, fp
   8bec8:	eba6 060b 	sub.w	r6, r6, fp
   8becc:	f8c8 3008 	str.w	r3, [r8, #8]
   8bed0:	2b00      	cmp	r3, #0
   8bed2:	f43f af3e 	beq.w	8bd52 <__sfvwrite_r+0x66>
   8bed6:	2e00      	cmp	r6, #0
   8bed8:	d1d1      	bne.n	8be7e <__sfvwrite_r+0x192>
   8beda:	f10a 0308 	add.w	r3, sl, #8
   8bede:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8bee2:	469a      	mov	sl, r3
   8bee4:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8bee8:	3308      	adds	r3, #8
   8beea:	2e00      	cmp	r6, #0
   8beec:	d0f7      	beq.n	8bede <__sfvwrite_r+0x1f2>
   8beee:	4632      	mov	r2, r6
   8bef0:	210a      	movs	r1, #10
   8bef2:	4628      	mov	r0, r5
   8bef4:	f000 fbea 	bl	8c6cc <memchr>
   8bef8:	2800      	cmp	r0, #0
   8befa:	d05e      	beq.n	8bfba <__sfvwrite_r+0x2ce>
   8befc:	3001      	adds	r0, #1
   8befe:	1b43      	subs	r3, r0, r5
   8bf00:	461a      	mov	r2, r3
   8bf02:	9300      	str	r3, [sp, #0]
   8bf04:	e7be      	b.n	8be84 <__sfvwrite_r+0x198>
   8bf06:	6820      	ldr	r0, [r4, #0]
   8bf08:	6923      	ldr	r3, [r4, #16]
   8bf0a:	4298      	cmp	r0, r3
   8bf0c:	d818      	bhi.n	8bf40 <__sfvwrite_r+0x254>
   8bf0e:	6962      	ldr	r2, [r4, #20]
   8bf10:	42b2      	cmp	r2, r6
   8bf12:	d815      	bhi.n	8bf40 <__sfvwrite_r+0x254>
   8bf14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8bf18:	42b3      	cmp	r3, r6
   8bf1a:	bf28      	it	cs
   8bf1c:	4633      	movcs	r3, r6
   8bf1e:	fb93 f3f2 	sdiv	r3, r3, r2
   8bf22:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8bf24:	fb02 f303 	mul.w	r3, r2, r3
   8bf28:	4648      	mov	r0, r9
   8bf2a:	4652      	mov	r2, sl
   8bf2c:	69e1      	ldr	r1, [r4, #28]
   8bf2e:	47b8      	blx	r7
   8bf30:	1e07      	subs	r7, r0, #0
   8bf32:	dd92      	ble.n	8be5a <__sfvwrite_r+0x16e>
   8bf34:	1bf6      	subs	r6, r6, r7
   8bf36:	e76f      	b.n	8be18 <__sfvwrite_r+0x12c>
   8bf38:	4637      	mov	r7, r6
   8bf3a:	46b3      	mov	fp, r6
   8bf3c:	6820      	ldr	r0, [r4, #0]
   8bf3e:	e75f      	b.n	8be00 <__sfvwrite_r+0x114>
   8bf40:	42b7      	cmp	r7, r6
   8bf42:	bf28      	it	cs
   8bf44:	4637      	movcs	r7, r6
   8bf46:	4651      	mov	r1, sl
   8bf48:	463a      	mov	r2, r7
   8bf4a:	f000 fbff 	bl	8c74c <memmove>
   8bf4e:	68a3      	ldr	r3, [r4, #8]
   8bf50:	6822      	ldr	r2, [r4, #0]
   8bf52:	1bdb      	subs	r3, r3, r7
   8bf54:	443a      	add	r2, r7
   8bf56:	60a3      	str	r3, [r4, #8]
   8bf58:	6022      	str	r2, [r4, #0]
   8bf5a:	2b00      	cmp	r3, #0
   8bf5c:	d1ea      	bne.n	8bf34 <__sfvwrite_r+0x248>
   8bf5e:	4621      	mov	r1, r4
   8bf60:	4648      	mov	r0, r9
   8bf62:	f7ff fc3d 	bl	8b7e0 <_fflush_r>
   8bf66:	2800      	cmp	r0, #0
   8bf68:	d0e4      	beq.n	8bf34 <__sfvwrite_r+0x248>
   8bf6a:	e776      	b.n	8be5a <__sfvwrite_r+0x16e>
   8bf6c:	4621      	mov	r1, r4
   8bf6e:	4648      	mov	r0, r9
   8bf70:	f7ff fc36 	bl	8b7e0 <_fflush_r>
   8bf74:	2800      	cmp	r0, #0
   8bf76:	d0a2      	beq.n	8bebe <__sfvwrite_r+0x1d2>
   8bf78:	e76f      	b.n	8be5a <__sfvwrite_r+0x16e>
   8bf7a:	4629      	mov	r1, r5
   8bf7c:	4693      	mov	fp, r2
   8bf7e:	9201      	str	r2, [sp, #4]
   8bf80:	f000 fbe4 	bl	8c74c <memmove>
   8bf84:	68a1      	ldr	r1, [r4, #8]
   8bf86:	6823      	ldr	r3, [r4, #0]
   8bf88:	9a01      	ldr	r2, [sp, #4]
   8bf8a:	1a89      	subs	r1, r1, r2
   8bf8c:	441a      	add	r2, r3
   8bf8e:	60a1      	str	r1, [r4, #8]
   8bf90:	6022      	str	r2, [r4, #0]
   8bf92:	e78e      	b.n	8beb2 <__sfvwrite_r+0x1c6>
   8bf94:	4648      	mov	r0, r9
   8bf96:	f000 ffcb 	bl	8cf30 <_realloc_r>
   8bf9a:	4603      	mov	r3, r0
   8bf9c:	2800      	cmp	r0, #0
   8bf9e:	f47f af25 	bne.w	8bdec <__sfvwrite_r+0x100>
   8bfa2:	4648      	mov	r0, r9
   8bfa4:	6921      	ldr	r1, [r4, #16]
   8bfa6:	f7ff fd9b 	bl	8bae0 <_free_r>
   8bfaa:	220c      	movs	r2, #12
   8bfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bfb0:	f8c9 2000 	str.w	r2, [r9]
   8bfb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8bfb8:	e751      	b.n	8be5e <__sfvwrite_r+0x172>
   8bfba:	1c72      	adds	r2, r6, #1
   8bfbc:	9200      	str	r2, [sp, #0]
   8bfbe:	e761      	b.n	8be84 <__sfvwrite_r+0x198>
   8bfc0:	220c      	movs	r2, #12
   8bfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bfc6:	f8c9 2000 	str.w	r2, [r9]
   8bfca:	e748      	b.n	8be5e <__sfvwrite_r+0x172>
   8bfcc:	f04f 30ff 	mov.w	r0, #4294967295
   8bfd0:	e6c0      	b.n	8bd54 <__sfvwrite_r+0x68>
   8bfd2:	bf00      	nop
   8bfd4:	7ffffc00 	.word	0x7ffffc00

0008bfd8 <_fwalk_reent>:
   8bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8bfdc:	4607      	mov	r7, r0
   8bfde:	4688      	mov	r8, r1
   8bfe0:	f04f 0900 	mov.w	r9, #0
   8bfe4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8bfe8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8bfec:	3d01      	subs	r5, #1
   8bfee:	d410      	bmi.n	8c012 <_fwalk_reent+0x3a>
   8bff0:	89a3      	ldrh	r3, [r4, #12]
   8bff2:	3d01      	subs	r5, #1
   8bff4:	2b01      	cmp	r3, #1
   8bff6:	d908      	bls.n	8c00a <_fwalk_reent+0x32>
   8bff8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8bffc:	3301      	adds	r3, #1
   8bffe:	d004      	beq.n	8c00a <_fwalk_reent+0x32>
   8c000:	4621      	mov	r1, r4
   8c002:	4638      	mov	r0, r7
   8c004:	47c0      	blx	r8
   8c006:	ea49 0900 	orr.w	r9, r9, r0
   8c00a:	1c6b      	adds	r3, r5, #1
   8c00c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8c010:	d1ee      	bne.n	8bff0 <_fwalk_reent+0x18>
   8c012:	6836      	ldr	r6, [r6, #0]
   8c014:	2e00      	cmp	r6, #0
   8c016:	d1e7      	bne.n	8bfe8 <_fwalk_reent+0x10>
   8c018:	4648      	mov	r0, r9
   8c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c01e:	bf00      	nop

0008c020 <__locale_mb_cur_max>:
   8c020:	4b01      	ldr	r3, [pc, #4]	; (8c028 <__locale_mb_cur_max+0x8>)
   8c022:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8c026:	4770      	bx	lr
   8c028:	20000b4c 	.word	0x20000b4c

0008c02c <_localeconv_r>:
   8c02c:	4800      	ldr	r0, [pc, #0]	; (8c030 <_localeconv_r+0x4>)
   8c02e:	4770      	bx	lr
   8c030:	20000c3c 	.word	0x20000c3c

0008c034 <__retarget_lock_init_recursive>:
   8c034:	4770      	bx	lr
   8c036:	bf00      	nop

0008c038 <__retarget_lock_close_recursive>:
   8c038:	4770      	bx	lr
   8c03a:	bf00      	nop

0008c03c <__retarget_lock_acquire_recursive>:
   8c03c:	4770      	bx	lr
   8c03e:	bf00      	nop

0008c040 <__retarget_lock_release_recursive>:
   8c040:	4770      	bx	lr
   8c042:	bf00      	nop

0008c044 <__swhatbuf_r>:
   8c044:	b570      	push	{r4, r5, r6, lr}
   8c046:	460c      	mov	r4, r1
   8c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c04c:	4615      	mov	r5, r2
   8c04e:	2900      	cmp	r1, #0
   8c050:	461e      	mov	r6, r3
   8c052:	b096      	sub	sp, #88	; 0x58
   8c054:	db14      	blt.n	8c080 <__swhatbuf_r+0x3c>
   8c056:	466a      	mov	r2, sp
   8c058:	f001 fc82 	bl	8d960 <_fstat_r>
   8c05c:	2800      	cmp	r0, #0
   8c05e:	db0f      	blt.n	8c080 <__swhatbuf_r+0x3c>
   8c060:	9a01      	ldr	r2, [sp, #4]
   8c062:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8c06a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8c06e:	fab2 f282 	clz	r2, r2
   8c072:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8c076:	0952      	lsrs	r2, r2, #5
   8c078:	6032      	str	r2, [r6, #0]
   8c07a:	602b      	str	r3, [r5, #0]
   8c07c:	b016      	add	sp, #88	; 0x58
   8c07e:	bd70      	pop	{r4, r5, r6, pc}
   8c080:	2300      	movs	r3, #0
   8c082:	89a1      	ldrh	r1, [r4, #12]
   8c084:	6033      	str	r3, [r6, #0]
   8c086:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8c08a:	d004      	beq.n	8c096 <__swhatbuf_r+0x52>
   8c08c:	2240      	movs	r2, #64	; 0x40
   8c08e:	4618      	mov	r0, r3
   8c090:	602a      	str	r2, [r5, #0]
   8c092:	b016      	add	sp, #88	; 0x58
   8c094:	bd70      	pop	{r4, r5, r6, pc}
   8c096:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8c09a:	602b      	str	r3, [r5, #0]
   8c09c:	b016      	add	sp, #88	; 0x58
   8c09e:	bd70      	pop	{r4, r5, r6, pc}

0008c0a0 <__smakebuf_r>:
   8c0a0:	b570      	push	{r4, r5, r6, lr}
   8c0a2:	898b      	ldrh	r3, [r1, #12]
   8c0a4:	460c      	mov	r4, r1
   8c0a6:	079d      	lsls	r5, r3, #30
   8c0a8:	b082      	sub	sp, #8
   8c0aa:	d507      	bpl.n	8c0bc <__smakebuf_r+0x1c>
   8c0ac:	2201      	movs	r2, #1
   8c0ae:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8c0b2:	614a      	str	r2, [r1, #20]
   8c0b4:	600b      	str	r3, [r1, #0]
   8c0b6:	610b      	str	r3, [r1, #16]
   8c0b8:	b002      	add	sp, #8
   8c0ba:	bd70      	pop	{r4, r5, r6, pc}
   8c0bc:	ab01      	add	r3, sp, #4
   8c0be:	466a      	mov	r2, sp
   8c0c0:	4606      	mov	r6, r0
   8c0c2:	f7ff ffbf 	bl	8c044 <__swhatbuf_r>
   8c0c6:	9900      	ldr	r1, [sp, #0]
   8c0c8:	4605      	mov	r5, r0
   8c0ca:	4630      	mov	r0, r6
   8c0cc:	f000 f83a 	bl	8c144 <_malloc_r>
   8c0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0d4:	b170      	cbz	r0, 8c0f4 <__smakebuf_r+0x54>
   8c0d6:	4916      	ldr	r1, [pc, #88]	; (8c130 <__smakebuf_r+0x90>)
   8c0d8:	9a00      	ldr	r2, [sp, #0]
   8c0da:	63f1      	str	r1, [r6, #60]	; 0x3c
   8c0dc:	9901      	ldr	r1, [sp, #4]
   8c0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8c0e2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8c0e6:	81a3      	strh	r3, [r4, #12]
   8c0e8:	6020      	str	r0, [r4, #0]
   8c0ea:	b989      	cbnz	r1, 8c110 <__smakebuf_r+0x70>
   8c0ec:	432b      	orrs	r3, r5
   8c0ee:	81a3      	strh	r3, [r4, #12]
   8c0f0:	b002      	add	sp, #8
   8c0f2:	bd70      	pop	{r4, r5, r6, pc}
   8c0f4:	059a      	lsls	r2, r3, #22
   8c0f6:	d4df      	bmi.n	8c0b8 <__smakebuf_r+0x18>
   8c0f8:	2101      	movs	r1, #1
   8c0fa:	f023 0303 	bic.w	r3, r3, #3
   8c0fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8c102:	f043 0302 	orr.w	r3, r3, #2
   8c106:	81a3      	strh	r3, [r4, #12]
   8c108:	6161      	str	r1, [r4, #20]
   8c10a:	6022      	str	r2, [r4, #0]
   8c10c:	6122      	str	r2, [r4, #16]
   8c10e:	e7d3      	b.n	8c0b8 <__smakebuf_r+0x18>
   8c110:	4630      	mov	r0, r6
   8c112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c116:	f001 fc39 	bl	8d98c <_isatty_r>
   8c11a:	b910      	cbnz	r0, 8c122 <__smakebuf_r+0x82>
   8c11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c120:	e7e4      	b.n	8c0ec <__smakebuf_r+0x4c>
   8c122:	89a2      	ldrh	r2, [r4, #12]
   8c124:	f022 0203 	bic.w	r2, r2, #3
   8c128:	f042 0201 	orr.w	r2, r2, #1
   8c12c:	b213      	sxth	r3, r2
   8c12e:	e7dd      	b.n	8c0ec <__smakebuf_r+0x4c>
   8c130:	0008b88d 	.word	0x0008b88d

0008c134 <malloc>:
   8c134:	4b02      	ldr	r3, [pc, #8]	; (8c140 <malloc+0xc>)
   8c136:	4601      	mov	r1, r0
   8c138:	6818      	ldr	r0, [r3, #0]
   8c13a:	f000 b803 	b.w	8c144 <_malloc_r>
   8c13e:	bf00      	nop
   8c140:	20000718 	.word	0x20000718

0008c144 <_malloc_r>:
   8c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c148:	f101 050b 	add.w	r5, r1, #11
   8c14c:	2d16      	cmp	r5, #22
   8c14e:	4606      	mov	r6, r0
   8c150:	b083      	sub	sp, #12
   8c152:	d824      	bhi.n	8c19e <_malloc_r+0x5a>
   8c154:	2910      	cmp	r1, #16
   8c156:	f200 80b6 	bhi.w	8c2c6 <_malloc_r+0x182>
   8c15a:	f000 fb61 	bl	8c820 <__malloc_lock>
   8c15e:	2510      	movs	r5, #16
   8c160:	2002      	movs	r0, #2
   8c162:	2318      	movs	r3, #24
   8c164:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8c650 <_malloc_r+0x50c>
   8c168:	4443      	add	r3, r8
   8c16a:	685c      	ldr	r4, [r3, #4]
   8c16c:	f1a3 0208 	sub.w	r2, r3, #8
   8c170:	4294      	cmp	r4, r2
   8c172:	f000 80b4 	beq.w	8c2de <_malloc_r+0x19a>
   8c176:	6863      	ldr	r3, [r4, #4]
   8c178:	68e1      	ldr	r1, [r4, #12]
   8c17a:	f023 0303 	bic.w	r3, r3, #3
   8c17e:	4423      	add	r3, r4
   8c180:	685a      	ldr	r2, [r3, #4]
   8c182:	68a5      	ldr	r5, [r4, #8]
   8c184:	f042 0201 	orr.w	r2, r2, #1
   8c188:	60e9      	str	r1, [r5, #12]
   8c18a:	4630      	mov	r0, r6
   8c18c:	608d      	str	r5, [r1, #8]
   8c18e:	3408      	adds	r4, #8
   8c190:	605a      	str	r2, [r3, #4]
   8c192:	f000 fb4b 	bl	8c82c <__malloc_unlock>
   8c196:	4620      	mov	r0, r4
   8c198:	b003      	add	sp, #12
   8c19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c19e:	f035 0507 	bics.w	r5, r5, #7
   8c1a2:	f100 8090 	bmi.w	8c2c6 <_malloc_r+0x182>
   8c1a6:	42a9      	cmp	r1, r5
   8c1a8:	f200 808d 	bhi.w	8c2c6 <_malloc_r+0x182>
   8c1ac:	f000 fb38 	bl	8c820 <__malloc_lock>
   8c1b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8c1b4:	f0c0 8185 	bcc.w	8c4c2 <_malloc_r+0x37e>
   8c1b8:	0a6b      	lsrs	r3, r5, #9
   8c1ba:	f000 808b 	beq.w	8c2d4 <_malloc_r+0x190>
   8c1be:	2b04      	cmp	r3, #4
   8c1c0:	f200 815b 	bhi.w	8c47a <_malloc_r+0x336>
   8c1c4:	09ab      	lsrs	r3, r5, #6
   8c1c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8c1ca:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8c1ce:	00c1      	lsls	r1, r0, #3
   8c1d0:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8c650 <_malloc_r+0x50c>
   8c1d4:	4441      	add	r1, r8
   8c1d6:	684c      	ldr	r4, [r1, #4]
   8c1d8:	3908      	subs	r1, #8
   8c1da:	42a1      	cmp	r1, r4
   8c1dc:	d106      	bne.n	8c1ec <_malloc_r+0xa8>
   8c1de:	e00c      	b.n	8c1fa <_malloc_r+0xb6>
   8c1e0:	2a00      	cmp	r2, #0
   8c1e2:	f280 8122 	bge.w	8c42a <_malloc_r+0x2e6>
   8c1e6:	68e4      	ldr	r4, [r4, #12]
   8c1e8:	42a1      	cmp	r1, r4
   8c1ea:	d006      	beq.n	8c1fa <_malloc_r+0xb6>
   8c1ec:	6863      	ldr	r3, [r4, #4]
   8c1ee:	f023 0303 	bic.w	r3, r3, #3
   8c1f2:	1b5a      	subs	r2, r3, r5
   8c1f4:	2a0f      	cmp	r2, #15
   8c1f6:	ddf3      	ble.n	8c1e0 <_malloc_r+0x9c>
   8c1f8:	4638      	mov	r0, r7
   8c1fa:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c1fe:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8c654 <_malloc_r+0x510>
   8c202:	4564      	cmp	r4, ip
   8c204:	d077      	beq.n	8c2f6 <_malloc_r+0x1b2>
   8c206:	6862      	ldr	r2, [r4, #4]
   8c208:	f022 0203 	bic.w	r2, r2, #3
   8c20c:	1b53      	subs	r3, r2, r5
   8c20e:	2b0f      	cmp	r3, #15
   8c210:	f300 8165 	bgt.w	8c4de <_malloc_r+0x39a>
   8c214:	2b00      	cmp	r3, #0
   8c216:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8c21a:	f280 8156 	bge.w	8c4ca <_malloc_r+0x386>
   8c21e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8c222:	f080 8106 	bcs.w	8c432 <_malloc_r+0x2ee>
   8c226:	2101      	movs	r1, #1
   8c228:	08d3      	lsrs	r3, r2, #3
   8c22a:	0952      	lsrs	r2, r2, #5
   8c22c:	440b      	add	r3, r1
   8c22e:	fa01 f202 	lsl.w	r2, r1, r2
   8c232:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8c236:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8c23a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8c23e:	430a      	orrs	r2, r1
   8c240:	f1ae 0108 	sub.w	r1, lr, #8
   8c244:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8c248:	f8c8 2004 	str.w	r2, [r8, #4]
   8c24c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8c250:	60fc      	str	r4, [r7, #12]
   8c252:	2101      	movs	r1, #1
   8c254:	1083      	asrs	r3, r0, #2
   8c256:	4099      	lsls	r1, r3
   8c258:	4291      	cmp	r1, r2
   8c25a:	d853      	bhi.n	8c304 <_malloc_r+0x1c0>
   8c25c:	4211      	tst	r1, r2
   8c25e:	d106      	bne.n	8c26e <_malloc_r+0x12a>
   8c260:	f020 0003 	bic.w	r0, r0, #3
   8c264:	0049      	lsls	r1, r1, #1
   8c266:	4211      	tst	r1, r2
   8c268:	f100 0004 	add.w	r0, r0, #4
   8c26c:	d0fa      	beq.n	8c264 <_malloc_r+0x120>
   8c26e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8c272:	464c      	mov	r4, r9
   8c274:	4686      	mov	lr, r0
   8c276:	68e7      	ldr	r7, [r4, #12]
   8c278:	42bc      	cmp	r4, r7
   8c27a:	d107      	bne.n	8c28c <_malloc_r+0x148>
   8c27c:	e109      	b.n	8c492 <_malloc_r+0x34e>
   8c27e:	2b00      	cmp	r3, #0
   8c280:	f280 8110 	bge.w	8c4a4 <_malloc_r+0x360>
   8c284:	68ff      	ldr	r7, [r7, #12]
   8c286:	42bc      	cmp	r4, r7
   8c288:	f000 8103 	beq.w	8c492 <_malloc_r+0x34e>
   8c28c:	687a      	ldr	r2, [r7, #4]
   8c28e:	f022 0203 	bic.w	r2, r2, #3
   8c292:	1b53      	subs	r3, r2, r5
   8c294:	2b0f      	cmp	r3, #15
   8c296:	ddf2      	ble.n	8c27e <_malloc_r+0x13a>
   8c298:	f045 0e01 	orr.w	lr, r5, #1
   8c29c:	4630      	mov	r0, r6
   8c29e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8c2a2:	443d      	add	r5, r7
   8c2a4:	f043 0601 	orr.w	r6, r3, #1
   8c2a8:	f8c7 e004 	str.w	lr, [r7, #4]
   8c2ac:	60e1      	str	r1, [r4, #12]
   8c2ae:	608c      	str	r4, [r1, #8]
   8c2b0:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c2b4:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c2b8:	606e      	str	r6, [r5, #4]
   8c2ba:	50bb      	str	r3, [r7, r2]
   8c2bc:	f000 fab6 	bl	8c82c <__malloc_unlock>
   8c2c0:	f107 0408 	add.w	r4, r7, #8
   8c2c4:	e002      	b.n	8c2cc <_malloc_r+0x188>
   8c2c6:	230c      	movs	r3, #12
   8c2c8:	2400      	movs	r4, #0
   8c2ca:	6033      	str	r3, [r6, #0]
   8c2cc:	4620      	mov	r0, r4
   8c2ce:	b003      	add	sp, #12
   8c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c2d4:	f44f 7100 	mov.w	r1, #512	; 0x200
   8c2d8:	2040      	movs	r0, #64	; 0x40
   8c2da:	273f      	movs	r7, #63	; 0x3f
   8c2dc:	e778      	b.n	8c1d0 <_malloc_r+0x8c>
   8c2de:	68dc      	ldr	r4, [r3, #12]
   8c2e0:	42a3      	cmp	r3, r4
   8c2e2:	bf08      	it	eq
   8c2e4:	3002      	addeq	r0, #2
   8c2e6:	f47f af46 	bne.w	8c176 <_malloc_r+0x32>
   8c2ea:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8c2ee:	f8df c364 	ldr.w	ip, [pc, #868]	; 8c654 <_malloc_r+0x510>
   8c2f2:	4564      	cmp	r4, ip
   8c2f4:	d187      	bne.n	8c206 <_malloc_r+0xc2>
   8c2f6:	2101      	movs	r1, #1
   8c2f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c2fc:	1083      	asrs	r3, r0, #2
   8c2fe:	4099      	lsls	r1, r3
   8c300:	4291      	cmp	r1, r2
   8c302:	d9ab      	bls.n	8c25c <_malloc_r+0x118>
   8c304:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c308:	6867      	ldr	r7, [r4, #4]
   8c30a:	f027 0703 	bic.w	r7, r7, #3
   8c30e:	42bd      	cmp	r5, r7
   8c310:	d802      	bhi.n	8c318 <_malloc_r+0x1d4>
   8c312:	1b7b      	subs	r3, r7, r5
   8c314:	2b0f      	cmp	r3, #15
   8c316:	dc77      	bgt.n	8c408 <_malloc_r+0x2c4>
   8c318:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8c658 <_malloc_r+0x514>
   8c31c:	4bc8      	ldr	r3, [pc, #800]	; (8c640 <_malloc_r+0x4fc>)
   8c31e:	f8d9 2000 	ldr.w	r2, [r9]
   8c322:	681b      	ldr	r3, [r3, #0]
   8c324:	3201      	adds	r2, #1
   8c326:	442b      	add	r3, r5
   8c328:	eb04 0a07 	add.w	sl, r4, r7
   8c32c:	f000 8124 	beq.w	8c578 <_malloc_r+0x434>
   8c330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8c334:	330f      	adds	r3, #15
   8c336:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8c33a:	f02b 0b0f 	bic.w	fp, fp, #15
   8c33e:	4659      	mov	r1, fp
   8c340:	4630      	mov	r0, r6
   8c342:	f001 f81d 	bl	8d380 <_sbrk_r>
   8c346:	1c41      	adds	r1, r0, #1
   8c348:	4602      	mov	r2, r0
   8c34a:	f000 80e1 	beq.w	8c510 <_malloc_r+0x3cc>
   8c34e:	4582      	cmp	sl, r0
   8c350:	f200 80dc 	bhi.w	8c50c <_malloc_r+0x3c8>
   8c354:	4bbb      	ldr	r3, [pc, #748]	; (8c644 <_malloc_r+0x500>)
   8c356:	6819      	ldr	r1, [r3, #0]
   8c358:	4459      	add	r1, fp
   8c35a:	4608      	mov	r0, r1
   8c35c:	6019      	str	r1, [r3, #0]
   8c35e:	f000 8141 	beq.w	8c5e4 <_malloc_r+0x4a0>
   8c362:	f8d9 1000 	ldr.w	r1, [r9]
   8c366:	9301      	str	r3, [sp, #4]
   8c368:	3101      	adds	r1, #1
   8c36a:	bf1b      	ittet	ne
   8c36c:	eba2 0a0a 	subne.w	sl, r2, sl
   8c370:	4450      	addne	r0, sl
   8c372:	f8c9 2000 	streq.w	r2, [r9]
   8c376:	6018      	strne	r0, [r3, #0]
   8c378:	f012 0a07 	ands.w	sl, r2, #7
   8c37c:	f000 810a 	beq.w	8c594 <_malloc_r+0x450>
   8c380:	f1ca 0108 	rsb	r1, sl, #8
   8c384:	440a      	add	r2, r1
   8c386:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8c38a:	4493      	add	fp, r2
   8c38c:	3108      	adds	r1, #8
   8c38e:	eba1 010b 	sub.w	r1, r1, fp
   8c392:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c396:	4649      	mov	r1, r9
   8c398:	4630      	mov	r0, r6
   8c39a:	9200      	str	r2, [sp, #0]
   8c39c:	f000 fff0 	bl	8d380 <_sbrk_r>
   8c3a0:	1c42      	adds	r2, r0, #1
   8c3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c3a6:	f000 8143 	beq.w	8c630 <_malloc_r+0x4ec>
   8c3aa:	1a80      	subs	r0, r0, r2
   8c3ac:	eb00 0b09 	add.w	fp, r0, r9
   8c3b0:	6819      	ldr	r1, [r3, #0]
   8c3b2:	f04b 0001 	orr.w	r0, fp, #1
   8c3b6:	4449      	add	r1, r9
   8c3b8:	4544      	cmp	r4, r8
   8c3ba:	f8c8 2008 	str.w	r2, [r8, #8]
   8c3be:	6019      	str	r1, [r3, #0]
   8c3c0:	6050      	str	r0, [r2, #4]
   8c3c2:	f000 811c 	beq.w	8c5fe <_malloc_r+0x4ba>
   8c3c6:	2f0f      	cmp	r7, #15
   8c3c8:	f240 811b 	bls.w	8c602 <_malloc_r+0x4be>
   8c3cc:	f04f 0c05 	mov.w	ip, #5
   8c3d0:	6860      	ldr	r0, [r4, #4]
   8c3d2:	3f0c      	subs	r7, #12
   8c3d4:	f027 0707 	bic.w	r7, r7, #7
   8c3d8:	f000 0001 	and.w	r0, r0, #1
   8c3dc:	4338      	orrs	r0, r7
   8c3de:	eb04 0e07 	add.w	lr, r4, r7
   8c3e2:	2f0f      	cmp	r7, #15
   8c3e4:	6060      	str	r0, [r4, #4]
   8c3e6:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8c3ea:	f200 8137 	bhi.w	8c65c <_malloc_r+0x518>
   8c3ee:	4614      	mov	r4, r2
   8c3f0:	6850      	ldr	r0, [r2, #4]
   8c3f2:	4b95      	ldr	r3, [pc, #596]	; (8c648 <_malloc_r+0x504>)
   8c3f4:	681a      	ldr	r2, [r3, #0]
   8c3f6:	428a      	cmp	r2, r1
   8c3f8:	bf38      	it	cc
   8c3fa:	6019      	strcc	r1, [r3, #0]
   8c3fc:	4b93      	ldr	r3, [pc, #588]	; (8c64c <_malloc_r+0x508>)
   8c3fe:	681a      	ldr	r2, [r3, #0]
   8c400:	428a      	cmp	r2, r1
   8c402:	bf38      	it	cc
   8c404:	6019      	strcc	r1, [r3, #0]
   8c406:	e086      	b.n	8c516 <_malloc_r+0x3d2>
   8c408:	f045 0201 	orr.w	r2, r5, #1
   8c40c:	f043 0301 	orr.w	r3, r3, #1
   8c410:	4425      	add	r5, r4
   8c412:	6062      	str	r2, [r4, #4]
   8c414:	4630      	mov	r0, r6
   8c416:	f8c8 5008 	str.w	r5, [r8, #8]
   8c41a:	3408      	adds	r4, #8
   8c41c:	606b      	str	r3, [r5, #4]
   8c41e:	f000 fa05 	bl	8c82c <__malloc_unlock>
   8c422:	4620      	mov	r0, r4
   8c424:	b003      	add	sp, #12
   8c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c42a:	4423      	add	r3, r4
   8c42c:	685a      	ldr	r2, [r3, #4]
   8c42e:	68e1      	ldr	r1, [r4, #12]
   8c430:	e6a7      	b.n	8c182 <_malloc_r+0x3e>
   8c432:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8c436:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8c43a:	d361      	bcc.n	8c500 <_malloc_r+0x3bc>
   8c43c:	2b14      	cmp	r3, #20
   8c43e:	f200 80ba 	bhi.w	8c5b6 <_malloc_r+0x472>
   8c442:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8c446:	00c9      	lsls	r1, r1, #3
   8c448:	335b      	adds	r3, #91	; 0x5b
   8c44a:	eb08 0701 	add.w	r7, r8, r1
   8c44e:	f858 1001 	ldr.w	r1, [r8, r1]
   8c452:	3f08      	subs	r7, #8
   8c454:	428f      	cmp	r7, r1
   8c456:	f000 8092 	beq.w	8c57e <_malloc_r+0x43a>
   8c45a:	684b      	ldr	r3, [r1, #4]
   8c45c:	f023 0303 	bic.w	r3, r3, #3
   8c460:	4293      	cmp	r3, r2
   8c462:	d902      	bls.n	8c46a <_malloc_r+0x326>
   8c464:	6889      	ldr	r1, [r1, #8]
   8c466:	428f      	cmp	r7, r1
   8c468:	d1f7      	bne.n	8c45a <_malloc_r+0x316>
   8c46a:	68cf      	ldr	r7, [r1, #12]
   8c46c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8c470:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8c474:	60bc      	str	r4, [r7, #8]
   8c476:	60cc      	str	r4, [r1, #12]
   8c478:	e6eb      	b.n	8c252 <_malloc_r+0x10e>
   8c47a:	2b14      	cmp	r3, #20
   8c47c:	d959      	bls.n	8c532 <_malloc_r+0x3ee>
   8c47e:	2b54      	cmp	r3, #84	; 0x54
   8c480:	f200 80a1 	bhi.w	8c5c6 <_malloc_r+0x482>
   8c484:	0b2b      	lsrs	r3, r5, #12
   8c486:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8c48a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8c48e:	00c1      	lsls	r1, r0, #3
   8c490:	e69e      	b.n	8c1d0 <_malloc_r+0x8c>
   8c492:	f10e 0e01 	add.w	lr, lr, #1
   8c496:	f01e 0f03 	tst.w	lr, #3
   8c49a:	f104 0408 	add.w	r4, r4, #8
   8c49e:	f47f aeea 	bne.w	8c276 <_malloc_r+0x132>
   8c4a2:	e051      	b.n	8c548 <_malloc_r+0x404>
   8c4a4:	463c      	mov	r4, r7
   8c4a6:	443a      	add	r2, r7
   8c4a8:	6853      	ldr	r3, [r2, #4]
   8c4aa:	68f9      	ldr	r1, [r7, #12]
   8c4ac:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8c4b0:	f043 0301 	orr.w	r3, r3, #1
   8c4b4:	6053      	str	r3, [r2, #4]
   8c4b6:	4630      	mov	r0, r6
   8c4b8:	60e9      	str	r1, [r5, #12]
   8c4ba:	608d      	str	r5, [r1, #8]
   8c4bc:	f000 f9b6 	bl	8c82c <__malloc_unlock>
   8c4c0:	e704      	b.n	8c2cc <_malloc_r+0x188>
   8c4c2:	08e8      	lsrs	r0, r5, #3
   8c4c4:	f105 0308 	add.w	r3, r5, #8
   8c4c8:	e64c      	b.n	8c164 <_malloc_r+0x20>
   8c4ca:	4422      	add	r2, r4
   8c4cc:	6853      	ldr	r3, [r2, #4]
   8c4ce:	4630      	mov	r0, r6
   8c4d0:	f043 0301 	orr.w	r3, r3, #1
   8c4d4:	6053      	str	r3, [r2, #4]
   8c4d6:	3408      	adds	r4, #8
   8c4d8:	f000 f9a8 	bl	8c82c <__malloc_unlock>
   8c4dc:	e6f6      	b.n	8c2cc <_malloc_r+0x188>
   8c4de:	f045 0701 	orr.w	r7, r5, #1
   8c4e2:	f043 0101 	orr.w	r1, r3, #1
   8c4e6:	4425      	add	r5, r4
   8c4e8:	6067      	str	r7, [r4, #4]
   8c4ea:	4630      	mov	r0, r6
   8c4ec:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8c4f0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8c4f4:	6069      	str	r1, [r5, #4]
   8c4f6:	50a3      	str	r3, [r4, r2]
   8c4f8:	f000 f998 	bl	8c82c <__malloc_unlock>
   8c4fc:	3408      	adds	r4, #8
   8c4fe:	e6e5      	b.n	8c2cc <_malloc_r+0x188>
   8c500:	0993      	lsrs	r3, r2, #6
   8c502:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8c506:	00c9      	lsls	r1, r1, #3
   8c508:	3338      	adds	r3, #56	; 0x38
   8c50a:	e79e      	b.n	8c44a <_malloc_r+0x306>
   8c50c:	4544      	cmp	r4, r8
   8c50e:	d064      	beq.n	8c5da <_malloc_r+0x496>
   8c510:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c514:	6860      	ldr	r0, [r4, #4]
   8c516:	f020 0b03 	bic.w	fp, r0, #3
   8c51a:	455d      	cmp	r5, fp
   8c51c:	ebab 0305 	sub.w	r3, fp, r5
   8c520:	d802      	bhi.n	8c528 <_malloc_r+0x3e4>
   8c522:	2b0f      	cmp	r3, #15
   8c524:	f73f af70 	bgt.w	8c408 <_malloc_r+0x2c4>
   8c528:	4630      	mov	r0, r6
   8c52a:	f000 f97f 	bl	8c82c <__malloc_unlock>
   8c52e:	2400      	movs	r4, #0
   8c530:	e6cc      	b.n	8c2cc <_malloc_r+0x188>
   8c532:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8c536:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8c53a:	00c1      	lsls	r1, r0, #3
   8c53c:	e648      	b.n	8c1d0 <_malloc_r+0x8c>
   8c53e:	f859 3908 	ldr.w	r3, [r9], #-8
   8c542:	454b      	cmp	r3, r9
   8c544:	f040 80a9 	bne.w	8c69a <_malloc_r+0x556>
   8c548:	f010 0f03 	tst.w	r0, #3
   8c54c:	f100 30ff 	add.w	r0, r0, #4294967295
   8c550:	d1f5      	bne.n	8c53e <_malloc_r+0x3fa>
   8c552:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c556:	ea23 0301 	bic.w	r3, r3, r1
   8c55a:	f8c8 3004 	str.w	r3, [r8, #4]
   8c55e:	0049      	lsls	r1, r1, #1
   8c560:	4299      	cmp	r1, r3
   8c562:	f63f aecf 	bhi.w	8c304 <_malloc_r+0x1c0>
   8c566:	b919      	cbnz	r1, 8c570 <_malloc_r+0x42c>
   8c568:	e6cc      	b.n	8c304 <_malloc_r+0x1c0>
   8c56a:	0049      	lsls	r1, r1, #1
   8c56c:	f10e 0e04 	add.w	lr, lr, #4
   8c570:	4219      	tst	r1, r3
   8c572:	d0fa      	beq.n	8c56a <_malloc_r+0x426>
   8c574:	4670      	mov	r0, lr
   8c576:	e67a      	b.n	8c26e <_malloc_r+0x12a>
   8c578:	f103 0b10 	add.w	fp, r3, #16
   8c57c:	e6df      	b.n	8c33e <_malloc_r+0x1fa>
   8c57e:	f04f 0e01 	mov.w	lr, #1
   8c582:	109a      	asrs	r2, r3, #2
   8c584:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c588:	fa0e f202 	lsl.w	r2, lr, r2
   8c58c:	431a      	orrs	r2, r3
   8c58e:	f8c8 2004 	str.w	r2, [r8, #4]
   8c592:	e76d      	b.n	8c470 <_malloc_r+0x32c>
   8c594:	eb02 010b 	add.w	r1, r2, fp
   8c598:	4249      	negs	r1, r1
   8c59a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8c59e:	4649      	mov	r1, r9
   8c5a0:	4630      	mov	r0, r6
   8c5a2:	9200      	str	r2, [sp, #0]
   8c5a4:	f000 feec 	bl	8d380 <_sbrk_r>
   8c5a8:	1c43      	adds	r3, r0, #1
   8c5aa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c5ae:	f47f aefc 	bne.w	8c3aa <_malloc_r+0x266>
   8c5b2:	46d1      	mov	r9, sl
   8c5b4:	e6fc      	b.n	8c3b0 <_malloc_r+0x26c>
   8c5b6:	2b54      	cmp	r3, #84	; 0x54
   8c5b8:	d826      	bhi.n	8c608 <_malloc_r+0x4c4>
   8c5ba:	0b13      	lsrs	r3, r2, #12
   8c5bc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8c5c0:	00c9      	lsls	r1, r1, #3
   8c5c2:	336e      	adds	r3, #110	; 0x6e
   8c5c4:	e741      	b.n	8c44a <_malloc_r+0x306>
   8c5c6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c5ca:	d826      	bhi.n	8c61a <_malloc_r+0x4d6>
   8c5cc:	0beb      	lsrs	r3, r5, #15
   8c5ce:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8c5d2:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8c5d6:	00c1      	lsls	r1, r0, #3
   8c5d8:	e5fa      	b.n	8c1d0 <_malloc_r+0x8c>
   8c5da:	4b1a      	ldr	r3, [pc, #104]	; (8c644 <_malloc_r+0x500>)
   8c5dc:	6818      	ldr	r0, [r3, #0]
   8c5de:	4458      	add	r0, fp
   8c5e0:	6018      	str	r0, [r3, #0]
   8c5e2:	e6be      	b.n	8c362 <_malloc_r+0x21e>
   8c5e4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8c5e8:	f1bc 0f00 	cmp.w	ip, #0
   8c5ec:	f47f aeb9 	bne.w	8c362 <_malloc_r+0x21e>
   8c5f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c5f4:	44bb      	add	fp, r7
   8c5f6:	f04b 0001 	orr.w	r0, fp, #1
   8c5fa:	6060      	str	r0, [r4, #4]
   8c5fc:	e6f9      	b.n	8c3f2 <_malloc_r+0x2ae>
   8c5fe:	4614      	mov	r4, r2
   8c600:	e6f7      	b.n	8c3f2 <_malloc_r+0x2ae>
   8c602:	2301      	movs	r3, #1
   8c604:	6053      	str	r3, [r2, #4]
   8c606:	e78f      	b.n	8c528 <_malloc_r+0x3e4>
   8c608:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8c60c:	d832      	bhi.n	8c674 <_malloc_r+0x530>
   8c60e:	0bd3      	lsrs	r3, r2, #15
   8c610:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8c614:	00c9      	lsls	r1, r1, #3
   8c616:	3377      	adds	r3, #119	; 0x77
   8c618:	e717      	b.n	8c44a <_malloc_r+0x306>
   8c61a:	f240 5254 	movw	r2, #1364	; 0x554
   8c61e:	4293      	cmp	r3, r2
   8c620:	d832      	bhi.n	8c688 <_malloc_r+0x544>
   8c622:	0cab      	lsrs	r3, r5, #18
   8c624:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8c628:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8c62c:	00c1      	lsls	r1, r0, #3
   8c62e:	e5cf      	b.n	8c1d0 <_malloc_r+0x8c>
   8c630:	f1aa 0a08 	sub.w	sl, sl, #8
   8c634:	44d3      	add	fp, sl
   8c636:	f04f 0900 	mov.w	r9, #0
   8c63a:	ebab 0b02 	sub.w	fp, fp, r2
   8c63e:	e6b7      	b.n	8c3b0 <_malloc_r+0x26c>
   8c640:	200023ec 	.word	0x200023ec
   8c644:	200023bc 	.word	0x200023bc
   8c648:	200023e4 	.word	0x200023e4
   8c64c:	200023e8 	.word	0x200023e8
   8c650:	20000cb8 	.word	0x20000cb8
   8c654:	20000cc0 	.word	0x20000cc0
   8c658:	200010c0 	.word	0x200010c0
   8c65c:	f104 0108 	add.w	r1, r4, #8
   8c660:	4630      	mov	r0, r6
   8c662:	9300      	str	r3, [sp, #0]
   8c664:	f7ff fa3c 	bl	8bae0 <_free_r>
   8c668:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8c66c:	9b00      	ldr	r3, [sp, #0]
   8c66e:	6860      	ldr	r0, [r4, #4]
   8c670:	6819      	ldr	r1, [r3, #0]
   8c672:	e6be      	b.n	8c3f2 <_malloc_r+0x2ae>
   8c674:	f240 5154 	movw	r1, #1364	; 0x554
   8c678:	428b      	cmp	r3, r1
   8c67a:	d80a      	bhi.n	8c692 <_malloc_r+0x54e>
   8c67c:	0c93      	lsrs	r3, r2, #18
   8c67e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8c682:	00c9      	lsls	r1, r1, #3
   8c684:	337c      	adds	r3, #124	; 0x7c
   8c686:	e6e0      	b.n	8c44a <_malloc_r+0x306>
   8c688:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c68c:	207f      	movs	r0, #127	; 0x7f
   8c68e:	277e      	movs	r7, #126	; 0x7e
   8c690:	e59e      	b.n	8c1d0 <_malloc_r+0x8c>
   8c692:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8c696:	237e      	movs	r3, #126	; 0x7e
   8c698:	e6d7      	b.n	8c44a <_malloc_r+0x306>
   8c69a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8c69e:	e75e      	b.n	8c55e <_malloc_r+0x41a>

0008c6a0 <__ascii_mbtowc>:
   8c6a0:	b082      	sub	sp, #8
   8c6a2:	b149      	cbz	r1, 8c6b8 <__ascii_mbtowc+0x18>
   8c6a4:	b15a      	cbz	r2, 8c6be <__ascii_mbtowc+0x1e>
   8c6a6:	b16b      	cbz	r3, 8c6c4 <__ascii_mbtowc+0x24>
   8c6a8:	7813      	ldrb	r3, [r2, #0]
   8c6aa:	600b      	str	r3, [r1, #0]
   8c6ac:	7812      	ldrb	r2, [r2, #0]
   8c6ae:	1e10      	subs	r0, r2, #0
   8c6b0:	bf18      	it	ne
   8c6b2:	2001      	movne	r0, #1
   8c6b4:	b002      	add	sp, #8
   8c6b6:	4770      	bx	lr
   8c6b8:	a901      	add	r1, sp, #4
   8c6ba:	2a00      	cmp	r2, #0
   8c6bc:	d1f3      	bne.n	8c6a6 <__ascii_mbtowc+0x6>
   8c6be:	4610      	mov	r0, r2
   8c6c0:	b002      	add	sp, #8
   8c6c2:	4770      	bx	lr
   8c6c4:	f06f 0001 	mvn.w	r0, #1
   8c6c8:	e7f4      	b.n	8c6b4 <__ascii_mbtowc+0x14>
   8c6ca:	bf00      	nop

0008c6cc <memchr>:
   8c6cc:	b470      	push	{r4, r5, r6}
   8c6ce:	0784      	lsls	r4, r0, #30
   8c6d0:	b2cd      	uxtb	r5, r1
   8c6d2:	d012      	beq.n	8c6fa <memchr+0x2e>
   8c6d4:	4603      	mov	r3, r0
   8c6d6:	1e54      	subs	r4, r2, #1
   8c6d8:	b92a      	cbnz	r2, 8c6e6 <memchr+0x1a>
   8c6da:	e00b      	b.n	8c6f4 <memchr+0x28>
   8c6dc:	079a      	lsls	r2, r3, #30
   8c6de:	4618      	mov	r0, r3
   8c6e0:	d00c      	beq.n	8c6fc <memchr+0x30>
   8c6e2:	3c01      	subs	r4, #1
   8c6e4:	d306      	bcc.n	8c6f4 <memchr+0x28>
   8c6e6:	4618      	mov	r0, r3
   8c6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8c6ec:	42aa      	cmp	r2, r5
   8c6ee:	d1f5      	bne.n	8c6dc <memchr+0x10>
   8c6f0:	bc70      	pop	{r4, r5, r6}
   8c6f2:	4770      	bx	lr
   8c6f4:	2000      	movs	r0, #0
   8c6f6:	bc70      	pop	{r4, r5, r6}
   8c6f8:	4770      	bx	lr
   8c6fa:	4614      	mov	r4, r2
   8c6fc:	2c03      	cmp	r4, #3
   8c6fe:	d80d      	bhi.n	8c71c <memchr+0x50>
   8c700:	2c00      	cmp	r4, #0
   8c702:	d0f7      	beq.n	8c6f4 <memchr+0x28>
   8c704:	4602      	mov	r2, r0
   8c706:	1903      	adds	r3, r0, r4
   8c708:	e001      	b.n	8c70e <memchr+0x42>
   8c70a:	429a      	cmp	r2, r3
   8c70c:	d0f2      	beq.n	8c6f4 <memchr+0x28>
   8c70e:	4610      	mov	r0, r2
   8c710:	f812 1b01 	ldrb.w	r1, [r2], #1
   8c714:	42a9      	cmp	r1, r5
   8c716:	d1f8      	bne.n	8c70a <memchr+0x3e>
   8c718:	bc70      	pop	{r4, r5, r6}
   8c71a:	4770      	bx	lr
   8c71c:	4606      	mov	r6, r0
   8c71e:	020a      	lsls	r2, r1, #8
   8c720:	b292      	uxth	r2, r2
   8c722:	432a      	orrs	r2, r5
   8c724:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8c728:	6833      	ldr	r3, [r6, #0]
   8c72a:	4630      	mov	r0, r6
   8c72c:	4053      	eors	r3, r2
   8c72e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8c732:	ea21 0303 	bic.w	r3, r1, r3
   8c736:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8c73a:	f106 0604 	add.w	r6, r6, #4
   8c73e:	d1e1      	bne.n	8c704 <memchr+0x38>
   8c740:	3c04      	subs	r4, #4
   8c742:	2c03      	cmp	r4, #3
   8c744:	4630      	mov	r0, r6
   8c746:	d8ef      	bhi.n	8c728 <memchr+0x5c>
   8c748:	e7da      	b.n	8c700 <memchr+0x34>
   8c74a:	bf00      	nop

0008c74c <memmove>:
   8c74c:	4288      	cmp	r0, r1
   8c74e:	b4f0      	push	{r4, r5, r6, r7}
   8c750:	d90d      	bls.n	8c76e <memmove+0x22>
   8c752:	188b      	adds	r3, r1, r2
   8c754:	4283      	cmp	r3, r0
   8c756:	d90a      	bls.n	8c76e <memmove+0x22>
   8c758:	1884      	adds	r4, r0, r2
   8c75a:	b132      	cbz	r2, 8c76a <memmove+0x1e>
   8c75c:	4622      	mov	r2, r4
   8c75e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8c762:	4299      	cmp	r1, r3
   8c764:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8c768:	d1f9      	bne.n	8c75e <memmove+0x12>
   8c76a:	bcf0      	pop	{r4, r5, r6, r7}
   8c76c:	4770      	bx	lr
   8c76e:	2a0f      	cmp	r2, #15
   8c770:	d80e      	bhi.n	8c790 <memmove+0x44>
   8c772:	4603      	mov	r3, r0
   8c774:	1e54      	subs	r4, r2, #1
   8c776:	2a00      	cmp	r2, #0
   8c778:	d0f7      	beq.n	8c76a <memmove+0x1e>
   8c77a:	3401      	adds	r4, #1
   8c77c:	440c      	add	r4, r1
   8c77e:	3b01      	subs	r3, #1
   8c780:	f811 2b01 	ldrb.w	r2, [r1], #1
   8c784:	42a1      	cmp	r1, r4
   8c786:	f803 2f01 	strb.w	r2, [r3, #1]!
   8c78a:	d1f9      	bne.n	8c780 <memmove+0x34>
   8c78c:	bcf0      	pop	{r4, r5, r6, r7}
   8c78e:	4770      	bx	lr
   8c790:	ea40 0301 	orr.w	r3, r0, r1
   8c794:	079b      	lsls	r3, r3, #30
   8c796:	d13e      	bne.n	8c816 <memmove+0xca>
   8c798:	f1a2 0310 	sub.w	r3, r2, #16
   8c79c:	f023 040f 	bic.w	r4, r3, #15
   8c7a0:	f101 0720 	add.w	r7, r1, #32
   8c7a4:	4427      	add	r7, r4
   8c7a6:	091b      	lsrs	r3, r3, #4
   8c7a8:	f101 0410 	add.w	r4, r1, #16
   8c7ac:	f100 0510 	add.w	r5, r0, #16
   8c7b0:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8c7b4:	3410      	adds	r4, #16
   8c7b6:	f845 6c10 	str.w	r6, [r5, #-16]
   8c7ba:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8c7be:	3510      	adds	r5, #16
   8c7c0:	f845 6c1c 	str.w	r6, [r5, #-28]
   8c7c4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8c7c8:	f845 6c18 	str.w	r6, [r5, #-24]
   8c7cc:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8c7d0:	42bc      	cmp	r4, r7
   8c7d2:	f845 6c14 	str.w	r6, [r5, #-20]
   8c7d6:	d1eb      	bne.n	8c7b0 <memmove+0x64>
   8c7d8:	3301      	adds	r3, #1
   8c7da:	f012 0f0c 	tst.w	r2, #12
   8c7de:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8c7e2:	f002 040f 	and.w	r4, r2, #15
   8c7e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8c7ea:	d017      	beq.n	8c81c <memmove+0xd0>
   8c7ec:	460e      	mov	r6, r1
   8c7ee:	3c04      	subs	r4, #4
   8c7f0:	f024 0c03 	bic.w	ip, r4, #3
   8c7f4:	08a5      	lsrs	r5, r4, #2
   8c7f6:	449c      	add	ip, r3
   8c7f8:	1f1c      	subs	r4, r3, #4
   8c7fa:	f856 7b04 	ldr.w	r7, [r6], #4
   8c7fe:	f844 7f04 	str.w	r7, [r4, #4]!
   8c802:	4564      	cmp	r4, ip
   8c804:	d1f9      	bne.n	8c7fa <memmove+0xae>
   8c806:	1c6c      	adds	r4, r5, #1
   8c808:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8c80c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8c810:	f002 0203 	and.w	r2, r2, #3
   8c814:	e7ae      	b.n	8c774 <memmove+0x28>
   8c816:	4603      	mov	r3, r0
   8c818:	1e54      	subs	r4, r2, #1
   8c81a:	e7ae      	b.n	8c77a <memmove+0x2e>
   8c81c:	4622      	mov	r2, r4
   8c81e:	e7a9      	b.n	8c774 <memmove+0x28>

0008c820 <__malloc_lock>:
   8c820:	4801      	ldr	r0, [pc, #4]	; (8c828 <__malloc_lock+0x8>)
   8c822:	f7ff bc0b 	b.w	8c03c <__retarget_lock_acquire_recursive>
   8c826:	bf00      	nop
   8c828:	20002e1c 	.word	0x20002e1c

0008c82c <__malloc_unlock>:
   8c82c:	4801      	ldr	r0, [pc, #4]	; (8c834 <__malloc_unlock+0x8>)
   8c82e:	f7ff bc07 	b.w	8c040 <__retarget_lock_release_recursive>
   8c832:	bf00      	nop
   8c834:	20002e1c 	.word	0x20002e1c

0008c838 <_Balloc>:
   8c838:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c83a:	b570      	push	{r4, r5, r6, lr}
   8c83c:	4605      	mov	r5, r0
   8c83e:	460c      	mov	r4, r1
   8c840:	b14b      	cbz	r3, 8c856 <_Balloc+0x1e>
   8c842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8c846:	b180      	cbz	r0, 8c86a <_Balloc+0x32>
   8c848:	6802      	ldr	r2, [r0, #0]
   8c84a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8c84e:	2300      	movs	r3, #0
   8c850:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8c854:	bd70      	pop	{r4, r5, r6, pc}
   8c856:	2221      	movs	r2, #33	; 0x21
   8c858:	2104      	movs	r1, #4
   8c85a:	f000 ffc5 	bl	8d7e8 <_calloc_r>
   8c85e:	4603      	mov	r3, r0
   8c860:	64e8      	str	r0, [r5, #76]	; 0x4c
   8c862:	2800      	cmp	r0, #0
   8c864:	d1ed      	bne.n	8c842 <_Balloc+0xa>
   8c866:	2000      	movs	r0, #0
   8c868:	bd70      	pop	{r4, r5, r6, pc}
   8c86a:	2101      	movs	r1, #1
   8c86c:	fa01 f604 	lsl.w	r6, r1, r4
   8c870:	1d72      	adds	r2, r6, #5
   8c872:	4628      	mov	r0, r5
   8c874:	0092      	lsls	r2, r2, #2
   8c876:	f000 ffb7 	bl	8d7e8 <_calloc_r>
   8c87a:	2800      	cmp	r0, #0
   8c87c:	d0f3      	beq.n	8c866 <_Balloc+0x2e>
   8c87e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8c882:	e7e4      	b.n	8c84e <_Balloc+0x16>

0008c884 <_Bfree>:
   8c884:	b131      	cbz	r1, 8c894 <_Bfree+0x10>
   8c886:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8c888:	684a      	ldr	r2, [r1, #4]
   8c88a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8c88e:	6008      	str	r0, [r1, #0]
   8c890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8c894:	4770      	bx	lr
   8c896:	bf00      	nop

0008c898 <__multadd>:
   8c898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c89c:	4680      	mov	r8, r0
   8c89e:	461c      	mov	r4, r3
   8c8a0:	2000      	movs	r0, #0
   8c8a2:	460f      	mov	r7, r1
   8c8a4:	690e      	ldr	r6, [r1, #16]
   8c8a6:	3114      	adds	r1, #20
   8c8a8:	680d      	ldr	r5, [r1, #0]
   8c8aa:	3001      	adds	r0, #1
   8c8ac:	b2ab      	uxth	r3, r5
   8c8ae:	fb02 4303 	mla	r3, r2, r3, r4
   8c8b2:	0c2c      	lsrs	r4, r5, #16
   8c8b4:	0c1d      	lsrs	r5, r3, #16
   8c8b6:	fb02 5404 	mla	r4, r2, r4, r5
   8c8ba:	b29b      	uxth	r3, r3
   8c8bc:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8c8c0:	4286      	cmp	r6, r0
   8c8c2:	f841 3b04 	str.w	r3, [r1], #4
   8c8c6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8c8ca:	dced      	bgt.n	8c8a8 <__multadd+0x10>
   8c8cc:	b13c      	cbz	r4, 8c8de <__multadd+0x46>
   8c8ce:	68bb      	ldr	r3, [r7, #8]
   8c8d0:	42b3      	cmp	r3, r6
   8c8d2:	dd07      	ble.n	8c8e4 <__multadd+0x4c>
   8c8d4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c8d8:	3601      	adds	r6, #1
   8c8da:	615c      	str	r4, [r3, #20]
   8c8dc:	613e      	str	r6, [r7, #16]
   8c8de:	4638      	mov	r0, r7
   8c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c8e4:	6879      	ldr	r1, [r7, #4]
   8c8e6:	4640      	mov	r0, r8
   8c8e8:	3101      	adds	r1, #1
   8c8ea:	f7ff ffa5 	bl	8c838 <_Balloc>
   8c8ee:	4605      	mov	r5, r0
   8c8f0:	b1b0      	cbz	r0, 8c920 <__multadd+0x88>
   8c8f2:	693a      	ldr	r2, [r7, #16]
   8c8f4:	f107 010c 	add.w	r1, r7, #12
   8c8f8:	3202      	adds	r2, #2
   8c8fa:	0092      	lsls	r2, r2, #2
   8c8fc:	300c      	adds	r0, #12
   8c8fe:	f7fa ffed 	bl	878dc <memcpy>
   8c902:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c906:	687a      	ldr	r2, [r7, #4]
   8c908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c90c:	6039      	str	r1, [r7, #0]
   8c90e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8c912:	462f      	mov	r7, r5
   8c914:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8c918:	3601      	adds	r6, #1
   8c91a:	615c      	str	r4, [r3, #20]
   8c91c:	613e      	str	r6, [r7, #16]
   8c91e:	e7de      	b.n	8c8de <__multadd+0x46>
   8c920:	4602      	mov	r2, r0
   8c922:	21b5      	movs	r1, #181	; 0xb5
   8c924:	4b01      	ldr	r3, [pc, #4]	; (8c92c <__multadd+0x94>)
   8c926:	4802      	ldr	r0, [pc, #8]	; (8c930 <__multadd+0x98>)
   8c928:	f000 ff40 	bl	8d7ac <__assert_func>
   8c92c:	0008e6fc 	.word	0x0008e6fc
   8c930:	0008e79c 	.word	0x0008e79c

0008c934 <__hi0bits>:
   8c934:	0c02      	lsrs	r2, r0, #16
   8c936:	0412      	lsls	r2, r2, #16
   8c938:	4603      	mov	r3, r0
   8c93a:	b9ca      	cbnz	r2, 8c970 <__hi0bits+0x3c>
   8c93c:	0403      	lsls	r3, r0, #16
   8c93e:	2010      	movs	r0, #16
   8c940:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8c944:	bf04      	itt	eq
   8c946:	021b      	lsleq	r3, r3, #8
   8c948:	3008      	addeq	r0, #8
   8c94a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8c94e:	bf04      	itt	eq
   8c950:	011b      	lsleq	r3, r3, #4
   8c952:	3004      	addeq	r0, #4
   8c954:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8c958:	bf04      	itt	eq
   8c95a:	009b      	lsleq	r3, r3, #2
   8c95c:	3002      	addeq	r0, #2
   8c95e:	2b00      	cmp	r3, #0
   8c960:	db05      	blt.n	8c96e <__hi0bits+0x3a>
   8c962:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8c966:	f100 0001 	add.w	r0, r0, #1
   8c96a:	bf08      	it	eq
   8c96c:	2020      	moveq	r0, #32
   8c96e:	4770      	bx	lr
   8c970:	2000      	movs	r0, #0
   8c972:	e7e5      	b.n	8c940 <__hi0bits+0xc>

0008c974 <__lo0bits>:
   8c974:	6803      	ldr	r3, [r0, #0]
   8c976:	4601      	mov	r1, r0
   8c978:	f013 0207 	ands.w	r2, r3, #7
   8c97c:	d007      	beq.n	8c98e <__lo0bits+0x1a>
   8c97e:	07da      	lsls	r2, r3, #31
   8c980:	d420      	bmi.n	8c9c4 <__lo0bits+0x50>
   8c982:	0798      	lsls	r0, r3, #30
   8c984:	d522      	bpl.n	8c9cc <__lo0bits+0x58>
   8c986:	085b      	lsrs	r3, r3, #1
   8c988:	2001      	movs	r0, #1
   8c98a:	600b      	str	r3, [r1, #0]
   8c98c:	4770      	bx	lr
   8c98e:	b298      	uxth	r0, r3
   8c990:	b1a8      	cbz	r0, 8c9be <__lo0bits+0x4a>
   8c992:	4610      	mov	r0, r2
   8c994:	f013 0fff 	tst.w	r3, #255	; 0xff
   8c998:	bf04      	itt	eq
   8c99a:	0a1b      	lsreq	r3, r3, #8
   8c99c:	3008      	addeq	r0, #8
   8c99e:	071a      	lsls	r2, r3, #28
   8c9a0:	bf04      	itt	eq
   8c9a2:	091b      	lsreq	r3, r3, #4
   8c9a4:	3004      	addeq	r0, #4
   8c9a6:	079a      	lsls	r2, r3, #30
   8c9a8:	bf04      	itt	eq
   8c9aa:	089b      	lsreq	r3, r3, #2
   8c9ac:	3002      	addeq	r0, #2
   8c9ae:	07da      	lsls	r2, r3, #31
   8c9b0:	d403      	bmi.n	8c9ba <__lo0bits+0x46>
   8c9b2:	085b      	lsrs	r3, r3, #1
   8c9b4:	f100 0001 	add.w	r0, r0, #1
   8c9b8:	d006      	beq.n	8c9c8 <__lo0bits+0x54>
   8c9ba:	600b      	str	r3, [r1, #0]
   8c9bc:	4770      	bx	lr
   8c9be:	2010      	movs	r0, #16
   8c9c0:	0c1b      	lsrs	r3, r3, #16
   8c9c2:	e7e7      	b.n	8c994 <__lo0bits+0x20>
   8c9c4:	2000      	movs	r0, #0
   8c9c6:	4770      	bx	lr
   8c9c8:	2020      	movs	r0, #32
   8c9ca:	4770      	bx	lr
   8c9cc:	089b      	lsrs	r3, r3, #2
   8c9ce:	2002      	movs	r0, #2
   8c9d0:	600b      	str	r3, [r1, #0]
   8c9d2:	4770      	bx	lr

0008c9d4 <__i2b>:
   8c9d4:	b510      	push	{r4, lr}
   8c9d6:	460c      	mov	r4, r1
   8c9d8:	2101      	movs	r1, #1
   8c9da:	f7ff ff2d 	bl	8c838 <_Balloc>
   8c9de:	4602      	mov	r2, r0
   8c9e0:	b118      	cbz	r0, 8c9ea <__i2b+0x16>
   8c9e2:	2301      	movs	r3, #1
   8c9e4:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8c9e8:	bd10      	pop	{r4, pc}
   8c9ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8c9ee:	4b02      	ldr	r3, [pc, #8]	; (8c9f8 <__i2b+0x24>)
   8c9f0:	4802      	ldr	r0, [pc, #8]	; (8c9fc <__i2b+0x28>)
   8c9f2:	f000 fedb 	bl	8d7ac <__assert_func>
   8c9f6:	bf00      	nop
   8c9f8:	0008e6fc 	.word	0x0008e6fc
   8c9fc:	0008e79c 	.word	0x0008e79c

0008ca00 <__multiply>:
   8ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ca04:	690d      	ldr	r5, [r1, #16]
   8ca06:	6917      	ldr	r7, [r2, #16]
   8ca08:	460e      	mov	r6, r1
   8ca0a:	42bd      	cmp	r5, r7
   8ca0c:	4614      	mov	r4, r2
   8ca0e:	b085      	sub	sp, #20
   8ca10:	db05      	blt.n	8ca1e <__multiply+0x1e>
   8ca12:	463a      	mov	r2, r7
   8ca14:	4623      	mov	r3, r4
   8ca16:	462f      	mov	r7, r5
   8ca18:	460c      	mov	r4, r1
   8ca1a:	4615      	mov	r5, r2
   8ca1c:	461e      	mov	r6, r3
   8ca1e:	68a3      	ldr	r3, [r4, #8]
   8ca20:	6861      	ldr	r1, [r4, #4]
   8ca22:	eb07 0805 	add.w	r8, r7, r5
   8ca26:	4543      	cmp	r3, r8
   8ca28:	bfb8      	it	lt
   8ca2a:	3101      	addlt	r1, #1
   8ca2c:	f7ff ff04 	bl	8c838 <_Balloc>
   8ca30:	9001      	str	r0, [sp, #4]
   8ca32:	2800      	cmp	r0, #0
   8ca34:	f000 8088 	beq.w	8cb48 <__multiply+0x148>
   8ca38:	9b01      	ldr	r3, [sp, #4]
   8ca3a:	f103 0914 	add.w	r9, r3, #20
   8ca3e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8ca42:	45d1      	cmp	r9, sl
   8ca44:	d205      	bcs.n	8ca52 <__multiply+0x52>
   8ca46:	464b      	mov	r3, r9
   8ca48:	2200      	movs	r2, #0
   8ca4a:	f843 2b04 	str.w	r2, [r3], #4
   8ca4e:	459a      	cmp	sl, r3
   8ca50:	d8fb      	bhi.n	8ca4a <__multiply+0x4a>
   8ca52:	f106 0e14 	add.w	lr, r6, #20
   8ca56:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8ca5a:	f104 0314 	add.w	r3, r4, #20
   8ca5e:	45de      	cmp	lr, fp
   8ca60:	461a      	mov	r2, r3
   8ca62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8ca66:	d23e      	bcs.n	8cae6 <__multiply+0xe6>
   8ca68:	1b3b      	subs	r3, r7, r4
   8ca6a:	3b15      	subs	r3, #21
   8ca6c:	f023 0303 	bic.w	r3, r3, #3
   8ca70:	3304      	adds	r3, #4
   8ca72:	3415      	adds	r4, #21
   8ca74:	42a7      	cmp	r7, r4
   8ca76:	bf38      	it	cc
   8ca78:	2304      	movcc	r3, #4
   8ca7a:	e9cd a802 	strd	sl, r8, [sp, #8]
   8ca7e:	4698      	mov	r8, r3
   8ca80:	4692      	mov	sl, r2
   8ca82:	e003      	b.n	8ca8c <__multiply+0x8c>
   8ca84:	45f3      	cmp	fp, lr
   8ca86:	f109 0904 	add.w	r9, r9, #4
   8ca8a:	d92a      	bls.n	8cae2 <__multiply+0xe2>
   8ca8c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8ca90:	b286      	uxth	r6, r0
   8ca92:	2e00      	cmp	r6, #0
   8ca94:	d138      	bne.n	8cb08 <__multiply+0x108>
   8ca96:	0c00      	lsrs	r0, r0, #16
   8ca98:	d0f4      	beq.n	8ca84 <__multiply+0x84>
   8ca9a:	f8d9 3000 	ldr.w	r3, [r9]
   8ca9e:	4654      	mov	r4, sl
   8caa0:	461e      	mov	r6, r3
   8caa2:	464d      	mov	r5, r9
   8caa4:	f04f 0c00 	mov.w	ip, #0
   8caa8:	8822      	ldrh	r2, [r4, #0]
   8caaa:	0c36      	lsrs	r6, r6, #16
   8caac:	fb00 6602 	mla	r6, r0, r2, r6
   8cab0:	b29b      	uxth	r3, r3
   8cab2:	44b4      	add	ip, r6
   8cab4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8cab8:	f845 3b04 	str.w	r3, [r5], #4
   8cabc:	f854 3b04 	ldr.w	r3, [r4], #4
   8cac0:	682e      	ldr	r6, [r5, #0]
   8cac2:	0c1b      	lsrs	r3, r3, #16
   8cac4:	b2b2      	uxth	r2, r6
   8cac6:	fb00 2303 	mla	r3, r0, r3, r2
   8caca:	42a7      	cmp	r7, r4
   8cacc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8cad0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8cad4:	d8e8      	bhi.n	8caa8 <__multiply+0xa8>
   8cad6:	45f3      	cmp	fp, lr
   8cad8:	f849 3008 	str.w	r3, [r9, r8]
   8cadc:	f109 0904 	add.w	r9, r9, #4
   8cae0:	d8d4      	bhi.n	8ca8c <__multiply+0x8c>
   8cae2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8cae6:	f1b8 0f00 	cmp.w	r8, #0
   8caea:	dc03      	bgt.n	8caf4 <__multiply+0xf4>
   8caec:	e006      	b.n	8cafc <__multiply+0xfc>
   8caee:	f1b8 0801 	subs.w	r8, r8, #1
   8caf2:	d003      	beq.n	8cafc <__multiply+0xfc>
   8caf4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8caf8:	2b00      	cmp	r3, #0
   8cafa:	d0f8      	beq.n	8caee <__multiply+0xee>
   8cafc:	9801      	ldr	r0, [sp, #4]
   8cafe:	f8c0 8010 	str.w	r8, [r0, #16]
   8cb02:	b005      	add	sp, #20
   8cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cb08:	4655      	mov	r5, sl
   8cb0a:	464c      	mov	r4, r9
   8cb0c:	2300      	movs	r3, #0
   8cb0e:	f855 1b04 	ldr.w	r1, [r5], #4
   8cb12:	6820      	ldr	r0, [r4, #0]
   8cb14:	b28a      	uxth	r2, r1
   8cb16:	fa1f fc80 	uxth.w	ip, r0
   8cb1a:	fb06 c202 	mla	r2, r6, r2, ip
   8cb1e:	0c09      	lsrs	r1, r1, #16
   8cb20:	0c00      	lsrs	r0, r0, #16
   8cb22:	fb06 0101 	mla	r1, r6, r1, r0
   8cb26:	4413      	add	r3, r2
   8cb28:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8cb2c:	b29b      	uxth	r3, r3
   8cb2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8cb32:	42af      	cmp	r7, r5
   8cb34:	f844 3b04 	str.w	r3, [r4], #4
   8cb38:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8cb3c:	d8e7      	bhi.n	8cb0e <__multiply+0x10e>
   8cb3e:	f849 3008 	str.w	r3, [r9, r8]
   8cb42:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8cb46:	e7a6      	b.n	8ca96 <__multiply+0x96>
   8cb48:	4602      	mov	r2, r0
   8cb4a:	f240 115d 	movw	r1, #349	; 0x15d
   8cb4e:	4b02      	ldr	r3, [pc, #8]	; (8cb58 <__multiply+0x158>)
   8cb50:	4802      	ldr	r0, [pc, #8]	; (8cb5c <__multiply+0x15c>)
   8cb52:	f000 fe2b 	bl	8d7ac <__assert_func>
   8cb56:	bf00      	nop
   8cb58:	0008e6fc 	.word	0x0008e6fc
   8cb5c:	0008e79c 	.word	0x0008e79c

0008cb60 <__pow5mult>:
   8cb60:	f012 0303 	ands.w	r3, r2, #3
   8cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8cb68:	4614      	mov	r4, r2
   8cb6a:	4607      	mov	r7, r0
   8cb6c:	d12e      	bne.n	8cbcc <__pow5mult+0x6c>
   8cb6e:	460e      	mov	r6, r1
   8cb70:	10a4      	asrs	r4, r4, #2
   8cb72:	d01c      	beq.n	8cbae <__pow5mult+0x4e>
   8cb74:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8cb76:	b395      	cbz	r5, 8cbde <__pow5mult+0x7e>
   8cb78:	07e3      	lsls	r3, r4, #31
   8cb7a:	f04f 0800 	mov.w	r8, #0
   8cb7e:	d406      	bmi.n	8cb8e <__pow5mult+0x2e>
   8cb80:	1064      	asrs	r4, r4, #1
   8cb82:	d014      	beq.n	8cbae <__pow5mult+0x4e>
   8cb84:	6828      	ldr	r0, [r5, #0]
   8cb86:	b1a8      	cbz	r0, 8cbb4 <__pow5mult+0x54>
   8cb88:	4605      	mov	r5, r0
   8cb8a:	07e3      	lsls	r3, r4, #31
   8cb8c:	d5f8      	bpl.n	8cb80 <__pow5mult+0x20>
   8cb8e:	462a      	mov	r2, r5
   8cb90:	4631      	mov	r1, r6
   8cb92:	4638      	mov	r0, r7
   8cb94:	f7ff ff34 	bl	8ca00 <__multiply>
   8cb98:	b1b6      	cbz	r6, 8cbc8 <__pow5mult+0x68>
   8cb9a:	6871      	ldr	r1, [r6, #4]
   8cb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8cb9e:	1064      	asrs	r4, r4, #1
   8cba0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8cba4:	6032      	str	r2, [r6, #0]
   8cba6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8cbaa:	4606      	mov	r6, r0
   8cbac:	d1ea      	bne.n	8cb84 <__pow5mult+0x24>
   8cbae:	4630      	mov	r0, r6
   8cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8cbb4:	462a      	mov	r2, r5
   8cbb6:	4629      	mov	r1, r5
   8cbb8:	4638      	mov	r0, r7
   8cbba:	f7ff ff21 	bl	8ca00 <__multiply>
   8cbbe:	6028      	str	r0, [r5, #0]
   8cbc0:	4605      	mov	r5, r0
   8cbc2:	f8c0 8000 	str.w	r8, [r0]
   8cbc6:	e7e0      	b.n	8cb8a <__pow5mult+0x2a>
   8cbc8:	4606      	mov	r6, r0
   8cbca:	e7d9      	b.n	8cb80 <__pow5mult+0x20>
   8cbcc:	4a09      	ldr	r2, [pc, #36]	; (8cbf4 <__pow5mult+0x94>)
   8cbce:	3b01      	subs	r3, #1
   8cbd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8cbd4:	2300      	movs	r3, #0
   8cbd6:	f7ff fe5f 	bl	8c898 <__multadd>
   8cbda:	4606      	mov	r6, r0
   8cbdc:	e7c8      	b.n	8cb70 <__pow5mult+0x10>
   8cbde:	f240 2171 	movw	r1, #625	; 0x271
   8cbe2:	4638      	mov	r0, r7
   8cbe4:	f7ff fef6 	bl	8c9d4 <__i2b>
   8cbe8:	2300      	movs	r3, #0
   8cbea:	64b8      	str	r0, [r7, #72]	; 0x48
   8cbec:	4605      	mov	r5, r0
   8cbee:	6003      	str	r3, [r0, #0]
   8cbf0:	e7c2      	b.n	8cb78 <__pow5mult+0x18>
   8cbf2:	bf00      	nop
   8cbf4:	0008e910 	.word	0x0008e910

0008cbf8 <__lshift>:
   8cbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8cbfc:	690f      	ldr	r7, [r1, #16]
   8cbfe:	688b      	ldr	r3, [r1, #8]
   8cc00:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8cc04:	1c7e      	adds	r6, r7, #1
   8cc06:	429e      	cmp	r6, r3
   8cc08:	460d      	mov	r5, r1
   8cc0a:	4691      	mov	r9, r2
   8cc0c:	4680      	mov	r8, r0
   8cc0e:	6849      	ldr	r1, [r1, #4]
   8cc10:	ea4f 1462 	mov.w	r4, r2, asr #5
   8cc14:	dd04      	ble.n	8cc20 <__lshift+0x28>
   8cc16:	005b      	lsls	r3, r3, #1
   8cc18:	429e      	cmp	r6, r3
   8cc1a:	f101 0101 	add.w	r1, r1, #1
   8cc1e:	dcfa      	bgt.n	8cc16 <__lshift+0x1e>
   8cc20:	4640      	mov	r0, r8
   8cc22:	f7ff fe09 	bl	8c838 <_Balloc>
   8cc26:	2800      	cmp	r0, #0
   8cc28:	d04f      	beq.n	8ccca <__lshift+0xd2>
   8cc2a:	2c00      	cmp	r4, #0
   8cc2c:	f100 0114 	add.w	r1, r0, #20
   8cc30:	dd0d      	ble.n	8cc4e <__lshift+0x56>
   8cc32:	460b      	mov	r3, r1
   8cc34:	2200      	movs	r2, #0
   8cc36:	3405      	adds	r4, #5
   8cc38:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8cc3c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8cc40:	f843 2b04 	str.w	r2, [r3], #4
   8cc44:	42a3      	cmp	r3, r4
   8cc46:	d1fb      	bne.n	8cc40 <__lshift+0x48>
   8cc48:	f1ac 0314 	sub.w	r3, ip, #20
   8cc4c:	4419      	add	r1, r3
   8cc4e:	692c      	ldr	r4, [r5, #16]
   8cc50:	f105 0314 	add.w	r3, r5, #20
   8cc54:	f019 091f 	ands.w	r9, r9, #31
   8cc58:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8cc5c:	d02d      	beq.n	8ccba <__lshift+0xc2>
   8cc5e:	468e      	mov	lr, r1
   8cc60:	f04f 0a00 	mov.w	sl, #0
   8cc64:	f1c9 0220 	rsb	r2, r9, #32
   8cc68:	681c      	ldr	r4, [r3, #0]
   8cc6a:	fa04 f409 	lsl.w	r4, r4, r9
   8cc6e:	ea44 040a 	orr.w	r4, r4, sl
   8cc72:	f84e 4b04 	str.w	r4, [lr], #4
   8cc76:	f853 4b04 	ldr.w	r4, [r3], #4
   8cc7a:	459c      	cmp	ip, r3
   8cc7c:	fa24 fa02 	lsr.w	sl, r4, r2
   8cc80:	d8f2      	bhi.n	8cc68 <__lshift+0x70>
   8cc82:	ebac 0305 	sub.w	r3, ip, r5
   8cc86:	3b15      	subs	r3, #21
   8cc88:	f023 0303 	bic.w	r3, r3, #3
   8cc8c:	3304      	adds	r3, #4
   8cc8e:	f105 0215 	add.w	r2, r5, #21
   8cc92:	4594      	cmp	ip, r2
   8cc94:	bf38      	it	cc
   8cc96:	2304      	movcc	r3, #4
   8cc98:	f1ba 0f00 	cmp.w	sl, #0
   8cc9c:	bf18      	it	ne
   8cc9e:	4637      	movne	r7, r6
   8cca0:	f841 a003 	str.w	sl, [r1, r3]
   8cca4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8cca8:	686a      	ldr	r2, [r5, #4]
   8ccaa:	6107      	str	r7, [r0, #16]
   8ccac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8ccb0:	6029      	str	r1, [r5, #0]
   8ccb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ccba:	3904      	subs	r1, #4
   8ccbc:	f853 2b04 	ldr.w	r2, [r3], #4
   8ccc0:	459c      	cmp	ip, r3
   8ccc2:	f841 2f04 	str.w	r2, [r1, #4]!
   8ccc6:	d8f9      	bhi.n	8ccbc <__lshift+0xc4>
   8ccc8:	e7ec      	b.n	8cca4 <__lshift+0xac>
   8ccca:	4602      	mov	r2, r0
   8cccc:	f240 11d9 	movw	r1, #473	; 0x1d9
   8ccd0:	4b01      	ldr	r3, [pc, #4]	; (8ccd8 <__lshift+0xe0>)
   8ccd2:	4802      	ldr	r0, [pc, #8]	; (8ccdc <__lshift+0xe4>)
   8ccd4:	f000 fd6a 	bl	8d7ac <__assert_func>
   8ccd8:	0008e6fc 	.word	0x0008e6fc
   8ccdc:	0008e79c 	.word	0x0008e79c

0008cce0 <__mcmp>:
   8cce0:	b430      	push	{r4, r5}
   8cce2:	690b      	ldr	r3, [r1, #16]
   8cce4:	4605      	mov	r5, r0
   8cce6:	6900      	ldr	r0, [r0, #16]
   8cce8:	1ac0      	subs	r0, r0, r3
   8ccea:	d111      	bne.n	8cd10 <__mcmp+0x30>
   8ccec:	3514      	adds	r5, #20
   8ccee:	3114      	adds	r1, #20
   8ccf0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8ccf4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8ccf8:	e001      	b.n	8ccfe <__mcmp+0x1e>
   8ccfa:	429d      	cmp	r5, r3
   8ccfc:	d208      	bcs.n	8cd10 <__mcmp+0x30>
   8ccfe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8cd02:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8cd06:	428c      	cmp	r4, r1
   8cd08:	d0f7      	beq.n	8ccfa <__mcmp+0x1a>
   8cd0a:	d203      	bcs.n	8cd14 <__mcmp+0x34>
   8cd0c:	f04f 30ff 	mov.w	r0, #4294967295
   8cd10:	bc30      	pop	{r4, r5}
   8cd12:	4770      	bx	lr
   8cd14:	2001      	movs	r0, #1
   8cd16:	bc30      	pop	{r4, r5}
   8cd18:	4770      	bx	lr
   8cd1a:	bf00      	nop

0008cd1c <__mdiff>:
   8cd1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cd20:	690b      	ldr	r3, [r1, #16]
   8cd22:	460c      	mov	r4, r1
   8cd24:	6911      	ldr	r1, [r2, #16]
   8cd26:	4690      	mov	r8, r2
   8cd28:	eba3 0b01 	sub.w	fp, r3, r1
   8cd2c:	f1bb 0f00 	cmp.w	fp, #0
   8cd30:	d17c      	bne.n	8ce2c <__mdiff+0x110>
   8cd32:	f104 0614 	add.w	r6, r4, #20
   8cd36:	3214      	adds	r2, #20
   8cd38:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8cd3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8cd40:	e001      	b.n	8cd46 <__mdiff+0x2a>
   8cd42:	429e      	cmp	r6, r3
   8cd44:	d276      	bcs.n	8ce34 <__mdiff+0x118>
   8cd46:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8cd4a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8cd4e:	428d      	cmp	r5, r1
   8cd50:	d0f7      	beq.n	8cd42 <__mdiff+0x26>
   8cd52:	d365      	bcc.n	8ce20 <__mdiff+0x104>
   8cd54:	6861      	ldr	r1, [r4, #4]
   8cd56:	f7ff fd6f 	bl	8c838 <_Balloc>
   8cd5a:	2800      	cmp	r0, #0
   8cd5c:	d074      	beq.n	8ce48 <__mdiff+0x12c>
   8cd5e:	f100 0614 	add.w	r6, r0, #20
   8cd62:	46b4      	mov	ip, r6
   8cd64:	2300      	movs	r3, #0
   8cd66:	6927      	ldr	r7, [r4, #16]
   8cd68:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8cd6c:	f104 0a14 	add.w	sl, r4, #20
   8cd70:	f108 0514 	add.w	r5, r8, #20
   8cd74:	f8c0 b00c 	str.w	fp, [r0, #12]
   8cd78:	3410      	adds	r4, #16
   8cd7a:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8cd7e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8cd82:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8cd86:	f855 bb04 	ldr.w	fp, [r5], #4
   8cd8a:	b291      	uxth	r1, r2
   8cd8c:	440b      	add	r3, r1
   8cd8e:	fa1f f18b 	uxth.w	r1, fp
   8cd92:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8cd96:	1a59      	subs	r1, r3, r1
   8cd98:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8cd9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8cda0:	b289      	uxth	r1, r1
   8cda2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8cda6:	45a9      	cmp	r9, r5
   8cda8:	f84c 1b04 	str.w	r1, [ip], #4
   8cdac:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cdb0:	d8e7      	bhi.n	8cd82 <__mdiff+0x66>
   8cdb2:	eba9 0208 	sub.w	r2, r9, r8
   8cdb6:	3a15      	subs	r2, #21
   8cdb8:	f108 0815 	add.w	r8, r8, #21
   8cdbc:	45c1      	cmp	r9, r8
   8cdbe:	f022 0403 	bic.w	r4, r2, #3
   8cdc2:	f104 0404 	add.w	r4, r4, #4
   8cdc6:	bf38      	it	cc
   8cdc8:	2404      	movcc	r4, #4
   8cdca:	f022 0203 	bic.w	r2, r2, #3
   8cdce:	bf38      	it	cc
   8cdd0:	2200      	movcc	r2, #0
   8cdd2:	44a2      	add	sl, r4
   8cdd4:	45d6      	cmp	lr, sl
   8cdd6:	4434      	add	r4, r6
   8cdd8:	4416      	add	r6, r2
   8cdda:	d918      	bls.n	8ce0e <__mdiff+0xf2>
   8cddc:	4625      	mov	r5, r4
   8cdde:	4652      	mov	r2, sl
   8cde0:	f852 6b04 	ldr.w	r6, [r2], #4
   8cde4:	b2b1      	uxth	r1, r6
   8cde6:	4419      	add	r1, r3
   8cde8:	140b      	asrs	r3, r1, #16
   8cdea:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8cdee:	b289      	uxth	r1, r1
   8cdf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8cdf4:	4596      	cmp	lr, r2
   8cdf6:	f845 1b04 	str.w	r1, [r5], #4
   8cdfa:	ea4f 4323 	mov.w	r3, r3, asr #16
   8cdfe:	d8ef      	bhi.n	8cde0 <__mdiff+0xc4>
   8ce00:	f10e 36ff 	add.w	r6, lr, #4294967295
   8ce04:	eba6 060a 	sub.w	r6, r6, sl
   8ce08:	f026 0603 	bic.w	r6, r6, #3
   8ce0c:	4426      	add	r6, r4
   8ce0e:	b921      	cbnz	r1, 8ce1a <__mdiff+0xfe>
   8ce10:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8ce14:	3f01      	subs	r7, #1
   8ce16:	2b00      	cmp	r3, #0
   8ce18:	d0fa      	beq.n	8ce10 <__mdiff+0xf4>
   8ce1a:	6107      	str	r7, [r0, #16]
   8ce1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ce20:	4623      	mov	r3, r4
   8ce22:	f04f 0b01 	mov.w	fp, #1
   8ce26:	4644      	mov	r4, r8
   8ce28:	4698      	mov	r8, r3
   8ce2a:	e793      	b.n	8cd54 <__mdiff+0x38>
   8ce2c:	dbf8      	blt.n	8ce20 <__mdiff+0x104>
   8ce2e:	f04f 0b00 	mov.w	fp, #0
   8ce32:	e78f      	b.n	8cd54 <__mdiff+0x38>
   8ce34:	2100      	movs	r1, #0
   8ce36:	f7ff fcff 	bl	8c838 <_Balloc>
   8ce3a:	b160      	cbz	r0, 8ce56 <__mdiff+0x13a>
   8ce3c:	2201      	movs	r2, #1
   8ce3e:	2300      	movs	r3, #0
   8ce40:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8ce44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ce48:	4602      	mov	r2, r0
   8ce4a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8ce4e:	4b05      	ldr	r3, [pc, #20]	; (8ce64 <__mdiff+0x148>)
   8ce50:	4805      	ldr	r0, [pc, #20]	; (8ce68 <__mdiff+0x14c>)
   8ce52:	f000 fcab 	bl	8d7ac <__assert_func>
   8ce56:	4602      	mov	r2, r0
   8ce58:	f240 2132 	movw	r1, #562	; 0x232
   8ce5c:	4b01      	ldr	r3, [pc, #4]	; (8ce64 <__mdiff+0x148>)
   8ce5e:	4802      	ldr	r0, [pc, #8]	; (8ce68 <__mdiff+0x14c>)
   8ce60:	f000 fca4 	bl	8d7ac <__assert_func>
   8ce64:	0008e6fc 	.word	0x0008e6fc
   8ce68:	0008e79c 	.word	0x0008e79c

0008ce6c <__d2b>:
   8ce6c:	b570      	push	{r4, r5, r6, lr}
   8ce6e:	2101      	movs	r1, #1
   8ce70:	b082      	sub	sp, #8
   8ce72:	4616      	mov	r6, r2
   8ce74:	461d      	mov	r5, r3
   8ce76:	f7ff fcdf 	bl	8c838 <_Balloc>
   8ce7a:	4604      	mov	r4, r0
   8ce7c:	2800      	cmp	r0, #0
   8ce7e:	d04c      	beq.n	8cf1a <__d2b+0xae>
   8ce80:	462b      	mov	r3, r5
   8ce82:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8ce86:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8ce8a:	b10d      	cbz	r5, 8ce90 <__d2b+0x24>
   8ce8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8ce90:	2e00      	cmp	r6, #0
   8ce92:	9301      	str	r3, [sp, #4]
   8ce94:	d022      	beq.n	8cedc <__d2b+0x70>
   8ce96:	4668      	mov	r0, sp
   8ce98:	9600      	str	r6, [sp, #0]
   8ce9a:	f7ff fd6b 	bl	8c974 <__lo0bits>
   8ce9e:	2800      	cmp	r0, #0
   8cea0:	d037      	beq.n	8cf12 <__d2b+0xa6>
   8cea2:	9b01      	ldr	r3, [sp, #4]
   8cea4:	9900      	ldr	r1, [sp, #0]
   8cea6:	f1c0 0220 	rsb	r2, r0, #32
   8ceaa:	fa03 f202 	lsl.w	r2, r3, r2
   8ceae:	430a      	orrs	r2, r1
   8ceb0:	40c3      	lsrs	r3, r0
   8ceb2:	9301      	str	r3, [sp, #4]
   8ceb4:	6162      	str	r2, [r4, #20]
   8ceb6:	2b00      	cmp	r3, #0
   8ceb8:	bf14      	ite	ne
   8ceba:	2102      	movne	r1, #2
   8cebc:	2101      	moveq	r1, #1
   8cebe:	61a3      	str	r3, [r4, #24]
   8cec0:	6121      	str	r1, [r4, #16]
   8cec2:	b1b5      	cbz	r5, 8cef2 <__d2b+0x86>
   8cec4:	9a06      	ldr	r2, [sp, #24]
   8cec6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8ceca:	4403      	add	r3, r0
   8cecc:	6013      	str	r3, [r2, #0]
   8cece:	9b07      	ldr	r3, [sp, #28]
   8ced0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8ced4:	6018      	str	r0, [r3, #0]
   8ced6:	4620      	mov	r0, r4
   8ced8:	b002      	add	sp, #8
   8ceda:	bd70      	pop	{r4, r5, r6, pc}
   8cedc:	a801      	add	r0, sp, #4
   8cede:	f7ff fd49 	bl	8c974 <__lo0bits>
   8cee2:	2301      	movs	r3, #1
   8cee4:	9a01      	ldr	r2, [sp, #4]
   8cee6:	4619      	mov	r1, r3
   8cee8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8ceec:	3020      	adds	r0, #32
   8ceee:	2d00      	cmp	r5, #0
   8cef0:	d1e8      	bne.n	8cec4 <__d2b+0x58>
   8cef2:	9a06      	ldr	r2, [sp, #24]
   8cef4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8cef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8cefc:	6010      	str	r0, [r2, #0]
   8cefe:	6918      	ldr	r0, [r3, #16]
   8cf00:	f7ff fd18 	bl	8c934 <__hi0bits>
   8cf04:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8cf08:	4620      	mov	r0, r4
   8cf0a:	9b07      	ldr	r3, [sp, #28]
   8cf0c:	6019      	str	r1, [r3, #0]
   8cf0e:	b002      	add	sp, #8
   8cf10:	bd70      	pop	{r4, r5, r6, pc}
   8cf12:	e9dd 2300 	ldrd	r2, r3, [sp]
   8cf16:	6162      	str	r2, [r4, #20]
   8cf18:	e7cd      	b.n	8ceb6 <__d2b+0x4a>
   8cf1a:	4602      	mov	r2, r0
   8cf1c:	f240 310a 	movw	r1, #778	; 0x30a
   8cf20:	4b01      	ldr	r3, [pc, #4]	; (8cf28 <__d2b+0xbc>)
   8cf22:	4802      	ldr	r0, [pc, #8]	; (8cf2c <__d2b+0xc0>)
   8cf24:	f000 fc42 	bl	8d7ac <__assert_func>
   8cf28:	0008e6fc 	.word	0x0008e6fc
   8cf2c:	0008e79c 	.word	0x0008e79c

0008cf30 <_realloc_r>:
   8cf30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cf34:	4616      	mov	r6, r2
   8cf36:	2900      	cmp	r1, #0
   8cf38:	f000 80bd 	beq.w	8d0b6 <_realloc_r+0x186>
   8cf3c:	f106 050b 	add.w	r5, r6, #11
   8cf40:	460c      	mov	r4, r1
   8cf42:	4680      	mov	r8, r0
   8cf44:	f7ff fc6c 	bl	8c820 <__malloc_lock>
   8cf48:	2d16      	cmp	r5, #22
   8cf4a:	d85f      	bhi.n	8d00c <_realloc_r+0xdc>
   8cf4c:	2510      	movs	r5, #16
   8cf4e:	462a      	mov	r2, r5
   8cf50:	42ae      	cmp	r6, r5
   8cf52:	d860      	bhi.n	8d016 <_realloc_r+0xe6>
   8cf54:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8cf58:	f1a4 0908 	sub.w	r9, r4, #8
   8cf5c:	f021 0703 	bic.w	r7, r1, #3
   8cf60:	4297      	cmp	r7, r2
   8cf62:	f280 8086 	bge.w	8d072 <_realloc_r+0x142>
   8cf66:	4bc9      	ldr	r3, [pc, #804]	; (8d28c <_realloc_r+0x35c>)
   8cf68:	eb09 0007 	add.w	r0, r9, r7
   8cf6c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8cf70:	4584      	cmp	ip, r0
   8cf72:	f000 80b9 	beq.w	8d0e8 <_realloc_r+0x1b8>
   8cf76:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8cf7a:	f02c 0301 	bic.w	r3, ip, #1
   8cf7e:	4403      	add	r3, r0
   8cf80:	685b      	ldr	r3, [r3, #4]
   8cf82:	07db      	lsls	r3, r3, #31
   8cf84:	f100 808c 	bmi.w	8d0a0 <_realloc_r+0x170>
   8cf88:	f02c 0c03 	bic.w	ip, ip, #3
   8cf8c:	eb07 030c 	add.w	r3, r7, ip
   8cf90:	4293      	cmp	r3, r2
   8cf92:	f280 8115 	bge.w	8d1c0 <_realloc_r+0x290>
   8cf96:	07cb      	lsls	r3, r1, #31
   8cf98:	d40f      	bmi.n	8cfba <_realloc_r+0x8a>
   8cf9a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8cf9e:	eba9 0a03 	sub.w	sl, r9, r3
   8cfa2:	f8da 3004 	ldr.w	r3, [sl, #4]
   8cfa6:	f023 0103 	bic.w	r1, r3, #3
   8cfaa:	448c      	add	ip, r1
   8cfac:	44bc      	add	ip, r7
   8cfae:	4594      	cmp	ip, r2
   8cfb0:	da38      	bge.n	8d024 <_realloc_r+0xf4>
   8cfb2:	187b      	adds	r3, r7, r1
   8cfb4:	4293      	cmp	r3, r2
   8cfb6:	f280 810f 	bge.w	8d1d8 <_realloc_r+0x2a8>
   8cfba:	4631      	mov	r1, r6
   8cfbc:	4640      	mov	r0, r8
   8cfbe:	f7ff f8c1 	bl	8c144 <_malloc_r>
   8cfc2:	4606      	mov	r6, r0
   8cfc4:	b1e0      	cbz	r0, 8d000 <_realloc_r+0xd0>
   8cfc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8cfca:	f1a0 0208 	sub.w	r2, r0, #8
   8cfce:	f023 0301 	bic.w	r3, r3, #1
   8cfd2:	444b      	add	r3, r9
   8cfd4:	4293      	cmp	r3, r2
   8cfd6:	f000 80f9 	beq.w	8d1cc <_realloc_r+0x29c>
   8cfda:	1f3a      	subs	r2, r7, #4
   8cfdc:	2a24      	cmp	r2, #36	; 0x24
   8cfde:	f200 811c 	bhi.w	8d21a <_realloc_r+0x2ea>
   8cfe2:	2a13      	cmp	r2, #19
   8cfe4:	f200 80cd 	bhi.w	8d182 <_realloc_r+0x252>
   8cfe8:	4603      	mov	r3, r0
   8cfea:	4622      	mov	r2, r4
   8cfec:	6811      	ldr	r1, [r2, #0]
   8cfee:	6019      	str	r1, [r3, #0]
   8cff0:	6851      	ldr	r1, [r2, #4]
   8cff2:	6059      	str	r1, [r3, #4]
   8cff4:	6892      	ldr	r2, [r2, #8]
   8cff6:	609a      	str	r2, [r3, #8]
   8cff8:	4621      	mov	r1, r4
   8cffa:	4640      	mov	r0, r8
   8cffc:	f7fe fd70 	bl	8bae0 <_free_r>
   8d000:	4640      	mov	r0, r8
   8d002:	f7ff fc13 	bl	8c82c <__malloc_unlock>
   8d006:	4630      	mov	r0, r6
   8d008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d00c:	f025 0507 	bic.w	r5, r5, #7
   8d010:	2d00      	cmp	r5, #0
   8d012:	462a      	mov	r2, r5
   8d014:	da9c      	bge.n	8cf50 <_realloc_r+0x20>
   8d016:	230c      	movs	r3, #12
   8d018:	2600      	movs	r6, #0
   8d01a:	f8c8 3000 	str.w	r3, [r8]
   8d01e:	4630      	mov	r0, r6
   8d020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d024:	4656      	mov	r6, sl
   8d026:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8d02a:	60cb      	str	r3, [r1, #12]
   8d02c:	6099      	str	r1, [r3, #8]
   8d02e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8d032:	f8da 300c 	ldr.w	r3, [sl, #12]
   8d036:	1f3a      	subs	r2, r7, #4
   8d038:	2a24      	cmp	r2, #36	; 0x24
   8d03a:	60cb      	str	r3, [r1, #12]
   8d03c:	6099      	str	r1, [r3, #8]
   8d03e:	f200 8107 	bhi.w	8d250 <_realloc_r+0x320>
   8d042:	2a13      	cmp	r2, #19
   8d044:	f240 8102 	bls.w	8d24c <_realloc_r+0x31c>
   8d048:	6823      	ldr	r3, [r4, #0]
   8d04a:	2a1b      	cmp	r2, #27
   8d04c:	f8ca 3008 	str.w	r3, [sl, #8]
   8d050:	6863      	ldr	r3, [r4, #4]
   8d052:	f8ca 300c 	str.w	r3, [sl, #12]
   8d056:	f200 811b 	bhi.w	8d290 <_realloc_r+0x360>
   8d05a:	3408      	adds	r4, #8
   8d05c:	f10a 0310 	add.w	r3, sl, #16
   8d060:	6822      	ldr	r2, [r4, #0]
   8d062:	4667      	mov	r7, ip
   8d064:	601a      	str	r2, [r3, #0]
   8d066:	6862      	ldr	r2, [r4, #4]
   8d068:	46d1      	mov	r9, sl
   8d06a:	605a      	str	r2, [r3, #4]
   8d06c:	68a2      	ldr	r2, [r4, #8]
   8d06e:	4634      	mov	r4, r6
   8d070:	609a      	str	r2, [r3, #8]
   8d072:	1b7b      	subs	r3, r7, r5
   8d074:	2b0f      	cmp	r3, #15
   8d076:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8d07a:	d821      	bhi.n	8d0c0 <_realloc_r+0x190>
   8d07c:	f002 0201 	and.w	r2, r2, #1
   8d080:	433a      	orrs	r2, r7
   8d082:	eb09 0107 	add.w	r1, r9, r7
   8d086:	f8c9 2004 	str.w	r2, [r9, #4]
   8d08a:	684b      	ldr	r3, [r1, #4]
   8d08c:	f043 0301 	orr.w	r3, r3, #1
   8d090:	604b      	str	r3, [r1, #4]
   8d092:	4626      	mov	r6, r4
   8d094:	4640      	mov	r0, r8
   8d096:	f7ff fbc9 	bl	8c82c <__malloc_unlock>
   8d09a:	4630      	mov	r0, r6
   8d09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d0a0:	07c9      	lsls	r1, r1, #31
   8d0a2:	d48a      	bmi.n	8cfba <_realloc_r+0x8a>
   8d0a4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8d0a8:	eba9 0a03 	sub.w	sl, r9, r3
   8d0ac:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d0b0:	f021 0103 	bic.w	r1, r1, #3
   8d0b4:	e77d      	b.n	8cfb2 <_realloc_r+0x82>
   8d0b6:	4611      	mov	r1, r2
   8d0b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d0bc:	f7ff b842 	b.w	8c144 <_malloc_r>
   8d0c0:	f002 0201 	and.w	r2, r2, #1
   8d0c4:	eb09 0105 	add.w	r1, r9, r5
   8d0c8:	f043 0301 	orr.w	r3, r3, #1
   8d0cc:	432a      	orrs	r2, r5
   8d0ce:	f8c9 2004 	str.w	r2, [r9, #4]
   8d0d2:	444f      	add	r7, r9
   8d0d4:	604b      	str	r3, [r1, #4]
   8d0d6:	687b      	ldr	r3, [r7, #4]
   8d0d8:	4640      	mov	r0, r8
   8d0da:	f043 0301 	orr.w	r3, r3, #1
   8d0de:	3108      	adds	r1, #8
   8d0e0:	607b      	str	r3, [r7, #4]
   8d0e2:	f7fe fcfd 	bl	8bae0 <_free_r>
   8d0e6:	e7d4      	b.n	8d092 <_realloc_r+0x162>
   8d0e8:	f8dc b004 	ldr.w	fp, [ip, #4]
   8d0ec:	f105 0010 	add.w	r0, r5, #16
   8d0f0:	f02b 0b03 	bic.w	fp, fp, #3
   8d0f4:	eb07 0c0b 	add.w	ip, r7, fp
   8d0f8:	4584      	cmp	ip, r0
   8d0fa:	da4d      	bge.n	8d198 <_realloc_r+0x268>
   8d0fc:	07c9      	lsls	r1, r1, #31
   8d0fe:	f53f af5c 	bmi.w	8cfba <_realloc_r+0x8a>
   8d102:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8d106:	eba9 0a01 	sub.w	sl, r9, r1
   8d10a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8d10e:	f021 0103 	bic.w	r1, r1, #3
   8d112:	448b      	add	fp, r1
   8d114:	44bb      	add	fp, r7
   8d116:	4558      	cmp	r0, fp
   8d118:	f73f af4b 	bgt.w	8cfb2 <_realloc_r+0x82>
   8d11c:	4656      	mov	r6, sl
   8d11e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d122:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d126:	1f3a      	subs	r2, r7, #4
   8d128:	2a24      	cmp	r2, #36	; 0x24
   8d12a:	60c1      	str	r1, [r0, #12]
   8d12c:	6088      	str	r0, [r1, #8]
   8d12e:	f200 80bd 	bhi.w	8d2ac <_realloc_r+0x37c>
   8d132:	2a13      	cmp	r2, #19
   8d134:	f240 80b8 	bls.w	8d2a8 <_realloc_r+0x378>
   8d138:	6821      	ldr	r1, [r4, #0]
   8d13a:	2a1b      	cmp	r2, #27
   8d13c:	f8ca 1008 	str.w	r1, [sl, #8]
   8d140:	6861      	ldr	r1, [r4, #4]
   8d142:	f8ca 100c 	str.w	r1, [sl, #12]
   8d146:	f200 80c1 	bhi.w	8d2cc <_realloc_r+0x39c>
   8d14a:	3408      	adds	r4, #8
   8d14c:	f10a 0210 	add.w	r2, sl, #16
   8d150:	6821      	ldr	r1, [r4, #0]
   8d152:	6011      	str	r1, [r2, #0]
   8d154:	6861      	ldr	r1, [r4, #4]
   8d156:	6051      	str	r1, [r2, #4]
   8d158:	68a1      	ldr	r1, [r4, #8]
   8d15a:	6091      	str	r1, [r2, #8]
   8d15c:	ebab 0205 	sub.w	r2, fp, r5
   8d160:	eb0a 0105 	add.w	r1, sl, r5
   8d164:	f042 0201 	orr.w	r2, r2, #1
   8d168:	6099      	str	r1, [r3, #8]
   8d16a:	604a      	str	r2, [r1, #4]
   8d16c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8d170:	4640      	mov	r0, r8
   8d172:	f003 0301 	and.w	r3, r3, #1
   8d176:	431d      	orrs	r5, r3
   8d178:	f8ca 5004 	str.w	r5, [sl, #4]
   8d17c:	f7ff fb56 	bl	8c82c <__malloc_unlock>
   8d180:	e74d      	b.n	8d01e <_realloc_r+0xee>
   8d182:	6823      	ldr	r3, [r4, #0]
   8d184:	2a1b      	cmp	r2, #27
   8d186:	6003      	str	r3, [r0, #0]
   8d188:	6863      	ldr	r3, [r4, #4]
   8d18a:	6043      	str	r3, [r0, #4]
   8d18c:	d849      	bhi.n	8d222 <_realloc_r+0x2f2>
   8d18e:	f104 0208 	add.w	r2, r4, #8
   8d192:	f100 0308 	add.w	r3, r0, #8
   8d196:	e729      	b.n	8cfec <_realloc_r+0xbc>
   8d198:	ebac 0205 	sub.w	r2, ip, r5
   8d19c:	eb09 0105 	add.w	r1, r9, r5
   8d1a0:	f042 0201 	orr.w	r2, r2, #1
   8d1a4:	6099      	str	r1, [r3, #8]
   8d1a6:	604a      	str	r2, [r1, #4]
   8d1a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8d1ac:	4640      	mov	r0, r8
   8d1ae:	f003 0301 	and.w	r3, r3, #1
   8d1b2:	431d      	orrs	r5, r3
   8d1b4:	f844 5c04 	str.w	r5, [r4, #-4]
   8d1b8:	f7ff fb38 	bl	8c82c <__malloc_unlock>
   8d1bc:	4626      	mov	r6, r4
   8d1be:	e72e      	b.n	8d01e <_realloc_r+0xee>
   8d1c0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8d1c4:	461f      	mov	r7, r3
   8d1c6:	60ca      	str	r2, [r1, #12]
   8d1c8:	6091      	str	r1, [r2, #8]
   8d1ca:	e752      	b.n	8d072 <_realloc_r+0x142>
   8d1cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8d1d0:	f023 0303 	bic.w	r3, r3, #3
   8d1d4:	441f      	add	r7, r3
   8d1d6:	e74c      	b.n	8d072 <_realloc_r+0x142>
   8d1d8:	4656      	mov	r6, sl
   8d1da:	f8da 100c 	ldr.w	r1, [sl, #12]
   8d1de:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8d1e2:	1f3a      	subs	r2, r7, #4
   8d1e4:	2a24      	cmp	r2, #36	; 0x24
   8d1e6:	60c1      	str	r1, [r0, #12]
   8d1e8:	6088      	str	r0, [r1, #8]
   8d1ea:	d827      	bhi.n	8d23c <_realloc_r+0x30c>
   8d1ec:	2a13      	cmp	r2, #19
   8d1ee:	d923      	bls.n	8d238 <_realloc_r+0x308>
   8d1f0:	6821      	ldr	r1, [r4, #0]
   8d1f2:	2a1b      	cmp	r2, #27
   8d1f4:	f8ca 1008 	str.w	r1, [sl, #8]
   8d1f8:	6861      	ldr	r1, [r4, #4]
   8d1fa:	f8ca 100c 	str.w	r1, [sl, #12]
   8d1fe:	d82f      	bhi.n	8d260 <_realloc_r+0x330>
   8d200:	3408      	adds	r4, #8
   8d202:	f10a 0210 	add.w	r2, sl, #16
   8d206:	6821      	ldr	r1, [r4, #0]
   8d208:	461f      	mov	r7, r3
   8d20a:	6011      	str	r1, [r2, #0]
   8d20c:	6863      	ldr	r3, [r4, #4]
   8d20e:	46d1      	mov	r9, sl
   8d210:	6053      	str	r3, [r2, #4]
   8d212:	68a3      	ldr	r3, [r4, #8]
   8d214:	4634      	mov	r4, r6
   8d216:	6093      	str	r3, [r2, #8]
   8d218:	e72b      	b.n	8d072 <_realloc_r+0x142>
   8d21a:	4621      	mov	r1, r4
   8d21c:	f7ff fa96 	bl	8c74c <memmove>
   8d220:	e6ea      	b.n	8cff8 <_realloc_r+0xc8>
   8d222:	68a3      	ldr	r3, [r4, #8]
   8d224:	2a24      	cmp	r2, #36	; 0x24
   8d226:	6083      	str	r3, [r0, #8]
   8d228:	68e3      	ldr	r3, [r4, #12]
   8d22a:	60c3      	str	r3, [r0, #12]
   8d22c:	d024      	beq.n	8d278 <_realloc_r+0x348>
   8d22e:	f104 0210 	add.w	r2, r4, #16
   8d232:	f100 0310 	add.w	r3, r0, #16
   8d236:	e6d9      	b.n	8cfec <_realloc_r+0xbc>
   8d238:	4632      	mov	r2, r6
   8d23a:	e7e4      	b.n	8d206 <_realloc_r+0x2d6>
   8d23c:	4621      	mov	r1, r4
   8d23e:	4630      	mov	r0, r6
   8d240:	461f      	mov	r7, r3
   8d242:	46d1      	mov	r9, sl
   8d244:	f7ff fa82 	bl	8c74c <memmove>
   8d248:	4634      	mov	r4, r6
   8d24a:	e712      	b.n	8d072 <_realloc_r+0x142>
   8d24c:	4633      	mov	r3, r6
   8d24e:	e707      	b.n	8d060 <_realloc_r+0x130>
   8d250:	4621      	mov	r1, r4
   8d252:	4630      	mov	r0, r6
   8d254:	4667      	mov	r7, ip
   8d256:	46d1      	mov	r9, sl
   8d258:	f7ff fa78 	bl	8c74c <memmove>
   8d25c:	4634      	mov	r4, r6
   8d25e:	e708      	b.n	8d072 <_realloc_r+0x142>
   8d260:	68a1      	ldr	r1, [r4, #8]
   8d262:	2a24      	cmp	r2, #36	; 0x24
   8d264:	f8ca 1010 	str.w	r1, [sl, #16]
   8d268:	68e1      	ldr	r1, [r4, #12]
   8d26a:	f8ca 1014 	str.w	r1, [sl, #20]
   8d26e:	d023      	beq.n	8d2b8 <_realloc_r+0x388>
   8d270:	3410      	adds	r4, #16
   8d272:	f10a 0218 	add.w	r2, sl, #24
   8d276:	e7c6      	b.n	8d206 <_realloc_r+0x2d6>
   8d278:	6923      	ldr	r3, [r4, #16]
   8d27a:	f104 0218 	add.w	r2, r4, #24
   8d27e:	6103      	str	r3, [r0, #16]
   8d280:	6961      	ldr	r1, [r4, #20]
   8d282:	f100 0318 	add.w	r3, r0, #24
   8d286:	6141      	str	r1, [r0, #20]
   8d288:	e6b0      	b.n	8cfec <_realloc_r+0xbc>
   8d28a:	bf00      	nop
   8d28c:	20000cb8 	.word	0x20000cb8
   8d290:	68a3      	ldr	r3, [r4, #8]
   8d292:	2a24      	cmp	r2, #36	; 0x24
   8d294:	f8ca 3010 	str.w	r3, [sl, #16]
   8d298:	68e3      	ldr	r3, [r4, #12]
   8d29a:	f8ca 3014 	str.w	r3, [sl, #20]
   8d29e:	d021      	beq.n	8d2e4 <_realloc_r+0x3b4>
   8d2a0:	3410      	adds	r4, #16
   8d2a2:	f10a 0318 	add.w	r3, sl, #24
   8d2a6:	e6db      	b.n	8d060 <_realloc_r+0x130>
   8d2a8:	4632      	mov	r2, r6
   8d2aa:	e751      	b.n	8d150 <_realloc_r+0x220>
   8d2ac:	4621      	mov	r1, r4
   8d2ae:	4630      	mov	r0, r6
   8d2b0:	f7ff fa4c 	bl	8c74c <memmove>
   8d2b4:	4b15      	ldr	r3, [pc, #84]	; (8d30c <_realloc_r+0x3dc>)
   8d2b6:	e751      	b.n	8d15c <_realloc_r+0x22c>
   8d2b8:	6921      	ldr	r1, [r4, #16]
   8d2ba:	f10a 0220 	add.w	r2, sl, #32
   8d2be:	f8ca 1018 	str.w	r1, [sl, #24]
   8d2c2:	6961      	ldr	r1, [r4, #20]
   8d2c4:	3418      	adds	r4, #24
   8d2c6:	f8ca 101c 	str.w	r1, [sl, #28]
   8d2ca:	e79c      	b.n	8d206 <_realloc_r+0x2d6>
   8d2cc:	68a1      	ldr	r1, [r4, #8]
   8d2ce:	2a24      	cmp	r2, #36	; 0x24
   8d2d0:	f8ca 1010 	str.w	r1, [sl, #16]
   8d2d4:	68e1      	ldr	r1, [r4, #12]
   8d2d6:	f8ca 1014 	str.w	r1, [sl, #20]
   8d2da:	d00d      	beq.n	8d2f8 <_realloc_r+0x3c8>
   8d2dc:	3410      	adds	r4, #16
   8d2de:	f10a 0218 	add.w	r2, sl, #24
   8d2e2:	e735      	b.n	8d150 <_realloc_r+0x220>
   8d2e4:	6922      	ldr	r2, [r4, #16]
   8d2e6:	f10a 0320 	add.w	r3, sl, #32
   8d2ea:	f8ca 2018 	str.w	r2, [sl, #24]
   8d2ee:	6962      	ldr	r2, [r4, #20]
   8d2f0:	3418      	adds	r4, #24
   8d2f2:	f8ca 201c 	str.w	r2, [sl, #28]
   8d2f6:	e6b3      	b.n	8d060 <_realloc_r+0x130>
   8d2f8:	6921      	ldr	r1, [r4, #16]
   8d2fa:	f10a 0220 	add.w	r2, sl, #32
   8d2fe:	f8ca 1018 	str.w	r1, [sl, #24]
   8d302:	6961      	ldr	r1, [r4, #20]
   8d304:	3418      	adds	r4, #24
   8d306:	f8ca 101c 	str.w	r1, [sl, #28]
   8d30a:	e721      	b.n	8d150 <_realloc_r+0x220>
   8d30c:	20000cb8 	.word	0x20000cb8

0008d310 <frexp>:
   8d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d312:	4617      	mov	r7, r2
   8d314:	2200      	movs	r2, #0
   8d316:	f8df c060 	ldr.w	ip, [pc, #96]	; 8d378 <frexp+0x68>
   8d31a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d31e:	4563      	cmp	r3, ip
   8d320:	4604      	mov	r4, r0
   8d322:	460d      	mov	r5, r1
   8d324:	603a      	str	r2, [r7, #0]
   8d326:	dc22      	bgt.n	8d36e <frexp+0x5e>
   8d328:	4684      	mov	ip, r0
   8d32a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8d32e:	d01e      	beq.n	8d36e <frexp+0x5e>
   8d330:	f8df c048 	ldr.w	ip, [pc, #72]	; 8d37c <frexp+0x6c>
   8d334:	460e      	mov	r6, r1
   8d336:	ea01 0c0c 	and.w	ip, r1, ip
   8d33a:	f1bc 0f00 	cmp.w	ip, #0
   8d33e:	d109      	bne.n	8d354 <frexp+0x44>
   8d340:	2200      	movs	r2, #0
   8d342:	4b0c      	ldr	r3, [pc, #48]	; (8d374 <frexp+0x64>)
   8d344:	f000 fd70 	bl	8de28 <__aeabi_dmul>
   8d348:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8d34c:	4604      	mov	r4, r0
   8d34e:	460e      	mov	r6, r1
   8d350:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8d354:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8d358:	151b      	asrs	r3, r3, #20
   8d35a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8d35e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8d362:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8d366:	4413      	add	r3, r2
   8d368:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8d36c:	603b      	str	r3, [r7, #0]
   8d36e:	4620      	mov	r0, r4
   8d370:	4629      	mov	r1, r5
   8d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d374:	43500000 	.word	0x43500000
   8d378:	7fefffff 	.word	0x7fefffff
   8d37c:	7ff00000 	.word	0x7ff00000

0008d380 <_sbrk_r>:
   8d380:	2200      	movs	r2, #0
   8d382:	b538      	push	{r3, r4, r5, lr}
   8d384:	4d06      	ldr	r5, [pc, #24]	; (8d3a0 <_sbrk_r+0x20>)
   8d386:	4604      	mov	r4, r0
   8d388:	4608      	mov	r0, r1
   8d38a:	602a      	str	r2, [r5, #0]
   8d38c:	f7f9 febe 	bl	8710c <_sbrk>
   8d390:	1c43      	adds	r3, r0, #1
   8d392:	d000      	beq.n	8d396 <_sbrk_r+0x16>
   8d394:	bd38      	pop	{r3, r4, r5, pc}
   8d396:	682b      	ldr	r3, [r5, #0]
   8d398:	2b00      	cmp	r3, #0
   8d39a:	d0fb      	beq.n	8d394 <_sbrk_r+0x14>
   8d39c:	6023      	str	r3, [r4, #0]
   8d39e:	bd38      	pop	{r3, r4, r5, pc}
   8d3a0:	20002e30 	.word	0x20002e30

0008d3a4 <__sread>:
   8d3a4:	b510      	push	{r4, lr}
   8d3a6:	460c      	mov	r4, r1
   8d3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d3ac:	f000 fb16 	bl	8d9dc <_read_r>
   8d3b0:	2800      	cmp	r0, #0
   8d3b2:	db03      	blt.n	8d3bc <__sread+0x18>
   8d3b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8d3b6:	4403      	add	r3, r0
   8d3b8:	6523      	str	r3, [r4, #80]	; 0x50
   8d3ba:	bd10      	pop	{r4, pc}
   8d3bc:	89a3      	ldrh	r3, [r4, #12]
   8d3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8d3c2:	81a3      	strh	r3, [r4, #12]
   8d3c4:	bd10      	pop	{r4, pc}
   8d3c6:	bf00      	nop

0008d3c8 <__swrite>:
   8d3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8d3cc:	460c      	mov	r4, r1
   8d3ce:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8d3d2:	461f      	mov	r7, r3
   8d3d4:	05cb      	lsls	r3, r1, #23
   8d3d6:	4616      	mov	r6, r2
   8d3d8:	4605      	mov	r5, r0
   8d3da:	d40b      	bmi.n	8d3f4 <__swrite+0x2c>
   8d3dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8d3e0:	81a1      	strh	r1, [r4, #12]
   8d3e2:	463b      	mov	r3, r7
   8d3e4:	4632      	mov	r2, r6
   8d3e6:	4628      	mov	r0, r5
   8d3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8d3f0:	f000 b980 	b.w	8d6f4 <_write_r>
   8d3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8d3f8:	2302      	movs	r3, #2
   8d3fa:	2200      	movs	r2, #0
   8d3fc:	f000 fad8 	bl	8d9b0 <_lseek_r>
   8d400:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8d404:	e7ea      	b.n	8d3dc <__swrite+0x14>
   8d406:	bf00      	nop

0008d408 <__sseek>:
   8d408:	b510      	push	{r4, lr}
   8d40a:	460c      	mov	r4, r1
   8d40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d410:	f000 face 	bl	8d9b0 <_lseek_r>
   8d414:	89a3      	ldrh	r3, [r4, #12]
   8d416:	1c42      	adds	r2, r0, #1
   8d418:	bf0e      	itee	eq
   8d41a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8d41e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8d422:	6520      	strne	r0, [r4, #80]	; 0x50
   8d424:	81a3      	strh	r3, [r4, #12]
   8d426:	bd10      	pop	{r4, pc}

0008d428 <__sclose>:
   8d428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8d42c:	f000 ba0c 	b.w	8d848 <_close_r>

0008d430 <strlen>:
   8d430:	f020 0103 	bic.w	r1, r0, #3
   8d434:	f010 0003 	ands.w	r0, r0, #3
   8d438:	f1c0 0000 	rsb	r0, r0, #0
   8d43c:	f851 3b04 	ldr.w	r3, [r1], #4
   8d440:	f100 0c04 	add.w	ip, r0, #4
   8d444:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8d448:	f06f 0200 	mvn.w	r2, #0
   8d44c:	bf1c      	itt	ne
   8d44e:	fa22 f20c 	lsrne.w	r2, r2, ip
   8d452:	4313      	orrne	r3, r2
   8d454:	f04f 0c01 	mov.w	ip, #1
   8d458:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8d45c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8d460:	eba3 020c 	sub.w	r2, r3, ip
   8d464:	ea22 0203 	bic.w	r2, r2, r3
   8d468:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8d46c:	bf04      	itt	eq
   8d46e:	f851 3b04 	ldreq.w	r3, [r1], #4
   8d472:	3004      	addeq	r0, #4
   8d474:	d0f4      	beq.n	8d460 <strlen+0x30>
   8d476:	f1c2 0100 	rsb	r1, r2, #0
   8d47a:	ea02 0201 	and.w	r2, r2, r1
   8d47e:	fab2 f282 	clz	r2, r2
   8d482:	f1c2 021f 	rsb	r2, r2, #31
   8d486:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8d48a:	4770      	bx	lr

0008d48c <strncpy>:
   8d48c:	b470      	push	{r4, r5, r6}
   8d48e:	ea40 0401 	orr.w	r4, r0, r1
   8d492:	07a3      	lsls	r3, r4, #30
   8d494:	d122      	bne.n	8d4dc <strncpy+0x50>
   8d496:	2a03      	cmp	r2, #3
   8d498:	d920      	bls.n	8d4dc <strncpy+0x50>
   8d49a:	460b      	mov	r3, r1
   8d49c:	4604      	mov	r4, r0
   8d49e:	4619      	mov	r1, r3
   8d4a0:	f853 6b04 	ldr.w	r6, [r3], #4
   8d4a4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8d4a8:	ea25 0506 	bic.w	r5, r5, r6
   8d4ac:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8d4b0:	d115      	bne.n	8d4de <strncpy+0x52>
   8d4b2:	3a04      	subs	r2, #4
   8d4b4:	2a03      	cmp	r2, #3
   8d4b6:	4619      	mov	r1, r3
   8d4b8:	f844 6b04 	str.w	r6, [r4], #4
   8d4bc:	d8ef      	bhi.n	8d49e <strncpy+0x12>
   8d4be:	1e4d      	subs	r5, r1, #1
   8d4c0:	b152      	cbz	r2, 8d4d8 <strncpy+0x4c>
   8d4c2:	4623      	mov	r3, r4
   8d4c4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8d4c8:	1e56      	subs	r6, r2, #1
   8d4ca:	f803 1b01 	strb.w	r1, [r3], #1
   8d4ce:	b141      	cbz	r1, 8d4e2 <strncpy+0x56>
   8d4d0:	4632      	mov	r2, r6
   8d4d2:	461c      	mov	r4, r3
   8d4d4:	2a00      	cmp	r2, #0
   8d4d6:	d1f4      	bne.n	8d4c2 <strncpy+0x36>
   8d4d8:	bc70      	pop	{r4, r5, r6}
   8d4da:	4770      	bx	lr
   8d4dc:	4604      	mov	r4, r0
   8d4de:	1e4d      	subs	r5, r1, #1
   8d4e0:	e7ee      	b.n	8d4c0 <strncpy+0x34>
   8d4e2:	4422      	add	r2, r4
   8d4e4:	2e00      	cmp	r6, #0
   8d4e6:	d0f7      	beq.n	8d4d8 <strncpy+0x4c>
   8d4e8:	f803 1b01 	strb.w	r1, [r3], #1
   8d4ec:	4293      	cmp	r3, r2
   8d4ee:	d1fb      	bne.n	8d4e8 <strncpy+0x5c>
   8d4f0:	bc70      	pop	{r4, r5, r6}
   8d4f2:	4770      	bx	lr

0008d4f4 <__ssprint_r>:
   8d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8d4f8:	6893      	ldr	r3, [r2, #8]
   8d4fa:	4691      	mov	r9, r2
   8d4fc:	b083      	sub	sp, #12
   8d4fe:	2b00      	cmp	r3, #0
   8d500:	d06d      	beq.n	8d5de <__ssprint_r+0xea>
   8d502:	6817      	ldr	r7, [r2, #0]
   8d504:	4680      	mov	r8, r0
   8d506:	460c      	mov	r4, r1
   8d508:	6808      	ldr	r0, [r1, #0]
   8d50a:	688d      	ldr	r5, [r1, #8]
   8d50c:	3708      	adds	r7, #8
   8d50e:	e043      	b.n	8d598 <__ssprint_r+0xa4>
   8d510:	89a3      	ldrh	r3, [r4, #12]
   8d512:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8d516:	d02e      	beq.n	8d576 <__ssprint_r+0x82>
   8d518:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8d51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8d520:	eba0 0a01 	sub.w	sl, r0, r1
   8d524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8d528:	eb0a 0006 	add.w	r0, sl, r6
   8d52c:	106d      	asrs	r5, r5, #1
   8d52e:	3001      	adds	r0, #1
   8d530:	42a8      	cmp	r0, r5
   8d532:	462a      	mov	r2, r5
   8d534:	bf84      	itt	hi
   8d536:	4605      	movhi	r5, r0
   8d538:	462a      	movhi	r2, r5
   8d53a:	055b      	lsls	r3, r3, #21
   8d53c:	d536      	bpl.n	8d5ac <__ssprint_r+0xb8>
   8d53e:	4611      	mov	r1, r2
   8d540:	4640      	mov	r0, r8
   8d542:	f7fe fdff 	bl	8c144 <_malloc_r>
   8d546:	2800      	cmp	r0, #0
   8d548:	d03a      	beq.n	8d5c0 <__ssprint_r+0xcc>
   8d54a:	4652      	mov	r2, sl
   8d54c:	6921      	ldr	r1, [r4, #16]
   8d54e:	9001      	str	r0, [sp, #4]
   8d550:	f7fa f9c4 	bl	878dc <memcpy>
   8d554:	89a2      	ldrh	r2, [r4, #12]
   8d556:	9b01      	ldr	r3, [sp, #4]
   8d558:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8d55c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8d560:	81a2      	strh	r2, [r4, #12]
   8d562:	eba5 020a 	sub.w	r2, r5, sl
   8d566:	eb03 000a 	add.w	r0, r3, sl
   8d56a:	6165      	str	r5, [r4, #20]
   8d56c:	46b2      	mov	sl, r6
   8d56e:	4635      	mov	r5, r6
   8d570:	6123      	str	r3, [r4, #16]
   8d572:	6020      	str	r0, [r4, #0]
   8d574:	60a2      	str	r2, [r4, #8]
   8d576:	4659      	mov	r1, fp
   8d578:	4652      	mov	r2, sl
   8d57a:	f7ff f8e7 	bl	8c74c <memmove>
   8d57e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8d582:	68a1      	ldr	r1, [r4, #8]
   8d584:	6820      	ldr	r0, [r4, #0]
   8d586:	1b4d      	subs	r5, r1, r5
   8d588:	4450      	add	r0, sl
   8d58a:	1b9e      	subs	r6, r3, r6
   8d58c:	60a5      	str	r5, [r4, #8]
   8d58e:	6020      	str	r0, [r4, #0]
   8d590:	f8c9 6008 	str.w	r6, [r9, #8]
   8d594:	b31e      	cbz	r6, 8d5de <__ssprint_r+0xea>
   8d596:	3708      	adds	r7, #8
   8d598:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8d59c:	2e00      	cmp	r6, #0
   8d59e:	d0fa      	beq.n	8d596 <__ssprint_r+0xa2>
   8d5a0:	42b5      	cmp	r5, r6
   8d5a2:	46aa      	mov	sl, r5
   8d5a4:	d9b4      	bls.n	8d510 <__ssprint_r+0x1c>
   8d5a6:	4635      	mov	r5, r6
   8d5a8:	46b2      	mov	sl, r6
   8d5aa:	e7e4      	b.n	8d576 <__ssprint_r+0x82>
   8d5ac:	4640      	mov	r0, r8
   8d5ae:	f7ff fcbf 	bl	8cf30 <_realloc_r>
   8d5b2:	4603      	mov	r3, r0
   8d5b4:	2800      	cmp	r0, #0
   8d5b6:	d1d4      	bne.n	8d562 <__ssprint_r+0x6e>
   8d5b8:	4640      	mov	r0, r8
   8d5ba:	6921      	ldr	r1, [r4, #16]
   8d5bc:	f7fe fa90 	bl	8bae0 <_free_r>
   8d5c0:	230c      	movs	r3, #12
   8d5c2:	2200      	movs	r2, #0
   8d5c4:	f04f 30ff 	mov.w	r0, #4294967295
   8d5c8:	f8c8 3000 	str.w	r3, [r8]
   8d5cc:	89a3      	ldrh	r3, [r4, #12]
   8d5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8d5d2:	81a3      	strh	r3, [r4, #12]
   8d5d4:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8d5d8:	b003      	add	sp, #12
   8d5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d5de:	2000      	movs	r0, #0
   8d5e0:	f8c9 0004 	str.w	r0, [r9, #4]
   8d5e4:	b003      	add	sp, #12
   8d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8d5ea:	bf00      	nop

0008d5ec <__swbuf_r>:
   8d5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d5ee:	460d      	mov	r5, r1
   8d5f0:	4614      	mov	r4, r2
   8d5f2:	4606      	mov	r6, r0
   8d5f4:	b110      	cbz	r0, 8d5fc <__swbuf_r+0x10>
   8d5f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d5f8:	2b00      	cmp	r3, #0
   8d5fa:	d043      	beq.n	8d684 <__swbuf_r+0x98>
   8d5fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d600:	69a3      	ldr	r3, [r4, #24]
   8d602:	0717      	lsls	r7, r2, #28
   8d604:	60a3      	str	r3, [r4, #8]
   8d606:	b290      	uxth	r0, r2
   8d608:	d51b      	bpl.n	8d642 <__swbuf_r+0x56>
   8d60a:	6923      	ldr	r3, [r4, #16]
   8d60c:	b1cb      	cbz	r3, 8d642 <__swbuf_r+0x56>
   8d60e:	b2ed      	uxtb	r5, r5
   8d610:	0481      	lsls	r1, r0, #18
   8d612:	462f      	mov	r7, r5
   8d614:	d522      	bpl.n	8d65c <__swbuf_r+0x70>
   8d616:	6822      	ldr	r2, [r4, #0]
   8d618:	6961      	ldr	r1, [r4, #20]
   8d61a:	1ad3      	subs	r3, r2, r3
   8d61c:	4299      	cmp	r1, r3
   8d61e:	dd29      	ble.n	8d674 <__swbuf_r+0x88>
   8d620:	3301      	adds	r3, #1
   8d622:	68a1      	ldr	r1, [r4, #8]
   8d624:	1c50      	adds	r0, r2, #1
   8d626:	3901      	subs	r1, #1
   8d628:	60a1      	str	r1, [r4, #8]
   8d62a:	6020      	str	r0, [r4, #0]
   8d62c:	7015      	strb	r5, [r2, #0]
   8d62e:	6962      	ldr	r2, [r4, #20]
   8d630:	429a      	cmp	r2, r3
   8d632:	d02a      	beq.n	8d68a <__swbuf_r+0x9e>
   8d634:	89a3      	ldrh	r3, [r4, #12]
   8d636:	07db      	lsls	r3, r3, #31
   8d638:	d501      	bpl.n	8d63e <__swbuf_r+0x52>
   8d63a:	2d0a      	cmp	r5, #10
   8d63c:	d025      	beq.n	8d68a <__swbuf_r+0x9e>
   8d63e:	4638      	mov	r0, r7
   8d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d642:	4621      	mov	r1, r4
   8d644:	4630      	mov	r0, r6
   8d646:	f7fc ffc7 	bl	8a5d8 <__swsetup_r>
   8d64a:	bb20      	cbnz	r0, 8d696 <__swbuf_r+0xaa>
   8d64c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8d650:	b2ed      	uxtb	r5, r5
   8d652:	b290      	uxth	r0, r2
   8d654:	0481      	lsls	r1, r0, #18
   8d656:	462f      	mov	r7, r5
   8d658:	6923      	ldr	r3, [r4, #16]
   8d65a:	d4dc      	bmi.n	8d616 <__swbuf_r+0x2a>
   8d65c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8d65e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8d662:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8d666:	81a2      	strh	r2, [r4, #12]
   8d668:	6822      	ldr	r2, [r4, #0]
   8d66a:	6661      	str	r1, [r4, #100]	; 0x64
   8d66c:	6961      	ldr	r1, [r4, #20]
   8d66e:	1ad3      	subs	r3, r2, r3
   8d670:	4299      	cmp	r1, r3
   8d672:	dcd5      	bgt.n	8d620 <__swbuf_r+0x34>
   8d674:	4621      	mov	r1, r4
   8d676:	4630      	mov	r0, r6
   8d678:	f7fe f8b2 	bl	8b7e0 <_fflush_r>
   8d67c:	b958      	cbnz	r0, 8d696 <__swbuf_r+0xaa>
   8d67e:	2301      	movs	r3, #1
   8d680:	6822      	ldr	r2, [r4, #0]
   8d682:	e7ce      	b.n	8d622 <__swbuf_r+0x36>
   8d684:	f7fe f908 	bl	8b898 <__sinit>
   8d688:	e7b8      	b.n	8d5fc <__swbuf_r+0x10>
   8d68a:	4621      	mov	r1, r4
   8d68c:	4630      	mov	r0, r6
   8d68e:	f7fe f8a7 	bl	8b7e0 <_fflush_r>
   8d692:	2800      	cmp	r0, #0
   8d694:	d0d3      	beq.n	8d63e <__swbuf_r+0x52>
   8d696:	f04f 37ff 	mov.w	r7, #4294967295
   8d69a:	e7d0      	b.n	8d63e <__swbuf_r+0x52>

0008d69c <_wcrtomb_r>:
   8d69c:	b570      	push	{r4, r5, r6, lr}
   8d69e:	4606      	mov	r6, r0
   8d6a0:	461d      	mov	r5, r3
   8d6a2:	b084      	sub	sp, #16
   8d6a4:	b139      	cbz	r1, 8d6b6 <_wcrtomb_r+0x1a>
   8d6a6:	4c0b      	ldr	r4, [pc, #44]	; (8d6d4 <_wcrtomb_r+0x38>)
   8d6a8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8d6ac:	47a0      	blx	r4
   8d6ae:	1c43      	adds	r3, r0, #1
   8d6b0:	d00a      	beq.n	8d6c8 <_wcrtomb_r+0x2c>
   8d6b2:	b004      	add	sp, #16
   8d6b4:	bd70      	pop	{r4, r5, r6, pc}
   8d6b6:	460c      	mov	r4, r1
   8d6b8:	4906      	ldr	r1, [pc, #24]	; (8d6d4 <_wcrtomb_r+0x38>)
   8d6ba:	4622      	mov	r2, r4
   8d6bc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8d6c0:	a901      	add	r1, sp, #4
   8d6c2:	47a0      	blx	r4
   8d6c4:	1c43      	adds	r3, r0, #1
   8d6c6:	d1f4      	bne.n	8d6b2 <_wcrtomb_r+0x16>
   8d6c8:	2200      	movs	r2, #0
   8d6ca:	238a      	movs	r3, #138	; 0x8a
   8d6cc:	602a      	str	r2, [r5, #0]
   8d6ce:	6033      	str	r3, [r6, #0]
   8d6d0:	b004      	add	sp, #16
   8d6d2:	bd70      	pop	{r4, r5, r6, pc}
   8d6d4:	20000b4c 	.word	0x20000b4c

0008d6d8 <__ascii_wctomb>:
   8d6d8:	4603      	mov	r3, r0
   8d6da:	b149      	cbz	r1, 8d6f0 <__ascii_wctomb+0x18>
   8d6dc:	2aff      	cmp	r2, #255	; 0xff
   8d6de:	d802      	bhi.n	8d6e6 <__ascii_wctomb+0xe>
   8d6e0:	2001      	movs	r0, #1
   8d6e2:	700a      	strb	r2, [r1, #0]
   8d6e4:	4770      	bx	lr
   8d6e6:	228a      	movs	r2, #138	; 0x8a
   8d6e8:	f04f 30ff 	mov.w	r0, #4294967295
   8d6ec:	601a      	str	r2, [r3, #0]
   8d6ee:	4770      	bx	lr
   8d6f0:	4608      	mov	r0, r1
   8d6f2:	4770      	bx	lr

0008d6f4 <_write_r>:
   8d6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d6f6:	460f      	mov	r7, r1
   8d6f8:	2600      	movs	r6, #0
   8d6fa:	4d08      	ldr	r5, [pc, #32]	; (8d71c <_write_r+0x28>)
   8d6fc:	4611      	mov	r1, r2
   8d6fe:	4604      	mov	r4, r0
   8d700:	461a      	mov	r2, r3
   8d702:	4638      	mov	r0, r7
   8d704:	602e      	str	r6, [r5, #0]
   8d706:	f7f7 fc4d 	bl	84fa4 <_write>
   8d70a:	1c43      	adds	r3, r0, #1
   8d70c:	d000      	beq.n	8d710 <_write_r+0x1c>
   8d70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d710:	682b      	ldr	r3, [r5, #0]
   8d712:	2b00      	cmp	r3, #0
   8d714:	d0fb      	beq.n	8d70e <_write_r+0x1a>
   8d716:	6023      	str	r3, [r4, #0]
   8d718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d71a:	bf00      	nop
   8d71c:	20002e30 	.word	0x20002e30

0008d720 <__register_exitproc>:
   8d720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d724:	f8df a080 	ldr.w	sl, [pc, #128]	; 8d7a8 <__register_exitproc+0x88>
   8d728:	4606      	mov	r6, r0
   8d72a:	f8da 0000 	ldr.w	r0, [sl]
   8d72e:	4698      	mov	r8, r3
   8d730:	460f      	mov	r7, r1
   8d732:	4691      	mov	r9, r2
   8d734:	f7fe fc82 	bl	8c03c <__retarget_lock_acquire_recursive>
   8d738:	4b1a      	ldr	r3, [pc, #104]	; (8d7a4 <__register_exitproc+0x84>)
   8d73a:	681b      	ldr	r3, [r3, #0]
   8d73c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8d740:	b324      	cbz	r4, 8d78c <__register_exitproc+0x6c>
   8d742:	6865      	ldr	r5, [r4, #4]
   8d744:	2d1f      	cmp	r5, #31
   8d746:	dc26      	bgt.n	8d796 <__register_exitproc+0x76>
   8d748:	b95e      	cbnz	r6, 8d762 <__register_exitproc+0x42>
   8d74a:	1c6b      	adds	r3, r5, #1
   8d74c:	3502      	adds	r5, #2
   8d74e:	f8da 0000 	ldr.w	r0, [sl]
   8d752:	6063      	str	r3, [r4, #4]
   8d754:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8d758:	f7fe fc72 	bl	8c040 <__retarget_lock_release_recursive>
   8d75c:	2000      	movs	r0, #0
   8d75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d762:	2301      	movs	r3, #1
   8d764:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8d768:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8d76c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8d770:	40ab      	lsls	r3, r5
   8d772:	431a      	orrs	r2, r3
   8d774:	2e02      	cmp	r6, #2
   8d776:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8d77a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8d77e:	d1e4      	bne.n	8d74a <__register_exitproc+0x2a>
   8d780:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8d784:	4313      	orrs	r3, r2
   8d786:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8d78a:	e7de      	b.n	8d74a <__register_exitproc+0x2a>
   8d78c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8d790:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8d794:	e7d5      	b.n	8d742 <__register_exitproc+0x22>
   8d796:	f8da 0000 	ldr.w	r0, [sl]
   8d79a:	f7fe fc51 	bl	8c040 <__retarget_lock_release_recursive>
   8d79e:	f04f 30ff 	mov.w	r0, #4294967295
   8d7a2:	e7dc      	b.n	8d75e <__register_exitproc+0x3e>
   8d7a4:	0008e664 	.word	0x0008e664
   8d7a8:	20000b48 	.word	0x20000b48

0008d7ac <__assert_func>:
   8d7ac:	4614      	mov	r4, r2
   8d7ae:	b500      	push	{lr}
   8d7b0:	4d09      	ldr	r5, [pc, #36]	; (8d7d8 <__assert_func+0x2c>)
   8d7b2:	461a      	mov	r2, r3
   8d7b4:	4603      	mov	r3, r0
   8d7b6:	6828      	ldr	r0, [r5, #0]
   8d7b8:	b085      	sub	sp, #20
   8d7ba:	68c0      	ldr	r0, [r0, #12]
   8d7bc:	b144      	cbz	r4, 8d7d0 <__assert_func+0x24>
   8d7be:	4d07      	ldr	r5, [pc, #28]	; (8d7dc <__assert_func+0x30>)
   8d7c0:	9100      	str	r1, [sp, #0]
   8d7c2:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8d7c6:	4906      	ldr	r1, [pc, #24]	; (8d7e0 <__assert_func+0x34>)
   8d7c8:	f000 f8b6 	bl	8d938 <fiprintf>
   8d7cc:	f000 f91c 	bl	8da08 <abort>
   8d7d0:	4d04      	ldr	r5, [pc, #16]	; (8d7e4 <__assert_func+0x38>)
   8d7d2:	462c      	mov	r4, r5
   8d7d4:	e7f4      	b.n	8d7c0 <__assert_func+0x14>
   8d7d6:	bf00      	nop
   8d7d8:	20000718 	.word	0x20000718
   8d7dc:	0008e91c 	.word	0x0008e91c
   8d7e0:	0008e92c 	.word	0x0008e92c
   8d7e4:	0008e5b8 	.word	0x0008e5b8

0008d7e8 <_calloc_r>:
   8d7e8:	b510      	push	{r4, lr}
   8d7ea:	fb02 f101 	mul.w	r1, r2, r1
   8d7ee:	f7fe fca9 	bl	8c144 <_malloc_r>
   8d7f2:	4604      	mov	r4, r0
   8d7f4:	b168      	cbz	r0, 8d812 <_calloc_r+0x2a>
   8d7f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8d7fa:	f022 0203 	bic.w	r2, r2, #3
   8d7fe:	3a04      	subs	r2, #4
   8d800:	2a24      	cmp	r2, #36	; 0x24
   8d802:	d818      	bhi.n	8d836 <_calloc_r+0x4e>
   8d804:	2a13      	cmp	r2, #19
   8d806:	d806      	bhi.n	8d816 <_calloc_r+0x2e>
   8d808:	4602      	mov	r2, r0
   8d80a:	2300      	movs	r3, #0
   8d80c:	e9c2 3300 	strd	r3, r3, [r2]
   8d810:	6093      	str	r3, [r2, #8]
   8d812:	4620      	mov	r0, r4
   8d814:	bd10      	pop	{r4, pc}
   8d816:	2300      	movs	r3, #0
   8d818:	2a1b      	cmp	r2, #27
   8d81a:	e9c0 3300 	strd	r3, r3, [r0]
   8d81e:	d90f      	bls.n	8d840 <_calloc_r+0x58>
   8d820:	2a24      	cmp	r2, #36	; 0x24
   8d822:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8d826:	bf0a      	itet	eq
   8d828:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8d82c:	f100 0210 	addne.w	r2, r0, #16
   8d830:	f100 0218 	addeq.w	r2, r0, #24
   8d834:	e7e9      	b.n	8d80a <_calloc_r+0x22>
   8d836:	2100      	movs	r1, #0
   8d838:	f7fa f8c6 	bl	879c8 <memset>
   8d83c:	4620      	mov	r0, r4
   8d83e:	bd10      	pop	{r4, pc}
   8d840:	f100 0208 	add.w	r2, r0, #8
   8d844:	e7e1      	b.n	8d80a <_calloc_r+0x22>
   8d846:	bf00      	nop

0008d848 <_close_r>:
   8d848:	2200      	movs	r2, #0
   8d84a:	b538      	push	{r3, r4, r5, lr}
   8d84c:	4d06      	ldr	r5, [pc, #24]	; (8d868 <_close_r+0x20>)
   8d84e:	4604      	mov	r4, r0
   8d850:	4608      	mov	r0, r1
   8d852:	602a      	str	r2, [r5, #0]
   8d854:	f7f9 fc76 	bl	87144 <_close>
   8d858:	1c43      	adds	r3, r0, #1
   8d85a:	d000      	beq.n	8d85e <_close_r+0x16>
   8d85c:	bd38      	pop	{r3, r4, r5, pc}
   8d85e:	682b      	ldr	r3, [r5, #0]
   8d860:	2b00      	cmp	r3, #0
   8d862:	d0fb      	beq.n	8d85c <_close_r+0x14>
   8d864:	6023      	str	r3, [r4, #0]
   8d866:	bd38      	pop	{r3, r4, r5, pc}
   8d868:	20002e30 	.word	0x20002e30

0008d86c <_fclose_r>:
   8d86c:	b570      	push	{r4, r5, r6, lr}
   8d86e:	2900      	cmp	r1, #0
   8d870:	d04b      	beq.n	8d90a <_fclose_r+0x9e>
   8d872:	460c      	mov	r4, r1
   8d874:	4605      	mov	r5, r0
   8d876:	b110      	cbz	r0, 8d87e <_fclose_r+0x12>
   8d878:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8d87a:	2b00      	cmp	r3, #0
   8d87c:	d048      	beq.n	8d910 <_fclose_r+0xa4>
   8d87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d880:	07d8      	lsls	r0, r3, #31
   8d882:	d534      	bpl.n	8d8ee <_fclose_r+0x82>
   8d884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d888:	2b00      	cmp	r3, #0
   8d88a:	d03e      	beq.n	8d90a <_fclose_r+0x9e>
   8d88c:	4621      	mov	r1, r4
   8d88e:	4628      	mov	r0, r5
   8d890:	f7fd ff0e 	bl	8b6b0 <__sflush_r>
   8d894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8d896:	4606      	mov	r6, r0
   8d898:	b133      	cbz	r3, 8d8a8 <_fclose_r+0x3c>
   8d89a:	4628      	mov	r0, r5
   8d89c:	69e1      	ldr	r1, [r4, #28]
   8d89e:	4798      	blx	r3
   8d8a0:	2800      	cmp	r0, #0
   8d8a2:	bfb8      	it	lt
   8d8a4:	f04f 36ff 	movlt.w	r6, #4294967295
   8d8a8:	89a3      	ldrh	r3, [r4, #12]
   8d8aa:	061a      	lsls	r2, r3, #24
   8d8ac:	d43b      	bmi.n	8d926 <_fclose_r+0xba>
   8d8ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8d8b0:	b141      	cbz	r1, 8d8c4 <_fclose_r+0x58>
   8d8b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8d8b6:	4299      	cmp	r1, r3
   8d8b8:	d002      	beq.n	8d8c0 <_fclose_r+0x54>
   8d8ba:	4628      	mov	r0, r5
   8d8bc:	f7fe f910 	bl	8bae0 <_free_r>
   8d8c0:	2300      	movs	r3, #0
   8d8c2:	6323      	str	r3, [r4, #48]	; 0x30
   8d8c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8d8c6:	b121      	cbz	r1, 8d8d2 <_fclose_r+0x66>
   8d8c8:	4628      	mov	r0, r5
   8d8ca:	f7fe f909 	bl	8bae0 <_free_r>
   8d8ce:	2300      	movs	r3, #0
   8d8d0:	6463      	str	r3, [r4, #68]	; 0x44
   8d8d2:	f7fe f80f 	bl	8b8f4 <__sfp_lock_acquire>
   8d8d6:	2200      	movs	r2, #0
   8d8d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d8da:	81a2      	strh	r2, [r4, #12]
   8d8dc:	07db      	lsls	r3, r3, #31
   8d8de:	d527      	bpl.n	8d930 <_fclose_r+0xc4>
   8d8e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d8e2:	f7fe fba9 	bl	8c038 <__retarget_lock_close_recursive>
   8d8e6:	f7fe f80b 	bl	8b900 <__sfp_lock_release>
   8d8ea:	4630      	mov	r0, r6
   8d8ec:	bd70      	pop	{r4, r5, r6, pc}
   8d8ee:	89a3      	ldrh	r3, [r4, #12]
   8d8f0:	0599      	lsls	r1, r3, #22
   8d8f2:	d4cb      	bmi.n	8d88c <_fclose_r+0x20>
   8d8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d8f6:	f7fe fba1 	bl	8c03c <__retarget_lock_acquire_recursive>
   8d8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8d8fe:	2b00      	cmp	r3, #0
   8d900:	d1c4      	bne.n	8d88c <_fclose_r+0x20>
   8d902:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8d904:	f016 0601 	ands.w	r6, r6, #1
   8d908:	d008      	beq.n	8d91c <_fclose_r+0xb0>
   8d90a:	2600      	movs	r6, #0
   8d90c:	4630      	mov	r0, r6
   8d90e:	bd70      	pop	{r4, r5, r6, pc}
   8d910:	f7fd ffc2 	bl	8b898 <__sinit>
   8d914:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8d916:	07d8      	lsls	r0, r3, #31
   8d918:	d4b4      	bmi.n	8d884 <_fclose_r+0x18>
   8d91a:	e7e8      	b.n	8d8ee <_fclose_r+0x82>
   8d91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d91e:	f7fe fb8f 	bl	8c040 <__retarget_lock_release_recursive>
   8d922:	4630      	mov	r0, r6
   8d924:	bd70      	pop	{r4, r5, r6, pc}
   8d926:	4628      	mov	r0, r5
   8d928:	6921      	ldr	r1, [r4, #16]
   8d92a:	f7fe f8d9 	bl	8bae0 <_free_r>
   8d92e:	e7be      	b.n	8d8ae <_fclose_r+0x42>
   8d930:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8d932:	f7fe fb85 	bl	8c040 <__retarget_lock_release_recursive>
   8d936:	e7d3      	b.n	8d8e0 <_fclose_r+0x74>

0008d938 <fiprintf>:
   8d938:	b40e      	push	{r1, r2, r3}
   8d93a:	b510      	push	{r4, lr}
   8d93c:	b083      	sub	sp, #12
   8d93e:	ab05      	add	r3, sp, #20
   8d940:	4c06      	ldr	r4, [pc, #24]	; (8d95c <fiprintf+0x24>)
   8d942:	f853 2b04 	ldr.w	r2, [r3], #4
   8d946:	4601      	mov	r1, r0
   8d948:	6820      	ldr	r0, [r4, #0]
   8d94a:	9301      	str	r3, [sp, #4]
   8d94c:	f7fb ff6a 	bl	89824 <_vfiprintf_r>
   8d950:	b003      	add	sp, #12
   8d952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8d956:	b003      	add	sp, #12
   8d958:	4770      	bx	lr
   8d95a:	bf00      	nop
   8d95c:	20000718 	.word	0x20000718

0008d960 <_fstat_r>:
   8d960:	b570      	push	{r4, r5, r6, lr}
   8d962:	460c      	mov	r4, r1
   8d964:	4603      	mov	r3, r0
   8d966:	2600      	movs	r6, #0
   8d968:	4d07      	ldr	r5, [pc, #28]	; (8d988 <_fstat_r+0x28>)
   8d96a:	4620      	mov	r0, r4
   8d96c:	4611      	mov	r1, r2
   8d96e:	461c      	mov	r4, r3
   8d970:	602e      	str	r6, [r5, #0]
   8d972:	f7f9 fbea 	bl	8714a <_fstat>
   8d976:	1c43      	adds	r3, r0, #1
   8d978:	d000      	beq.n	8d97c <_fstat_r+0x1c>
   8d97a:	bd70      	pop	{r4, r5, r6, pc}
   8d97c:	682b      	ldr	r3, [r5, #0]
   8d97e:	2b00      	cmp	r3, #0
   8d980:	d0fb      	beq.n	8d97a <_fstat_r+0x1a>
   8d982:	6023      	str	r3, [r4, #0]
   8d984:	bd70      	pop	{r4, r5, r6, pc}
   8d986:	bf00      	nop
   8d988:	20002e30 	.word	0x20002e30

0008d98c <_isatty_r>:
   8d98c:	2200      	movs	r2, #0
   8d98e:	b538      	push	{r3, r4, r5, lr}
   8d990:	4d06      	ldr	r5, [pc, #24]	; (8d9ac <_isatty_r+0x20>)
   8d992:	4604      	mov	r4, r0
   8d994:	4608      	mov	r0, r1
   8d996:	602a      	str	r2, [r5, #0]
   8d998:	f7f9 fbdc 	bl	87154 <_isatty>
   8d99c:	1c43      	adds	r3, r0, #1
   8d99e:	d000      	beq.n	8d9a2 <_isatty_r+0x16>
   8d9a0:	bd38      	pop	{r3, r4, r5, pc}
   8d9a2:	682b      	ldr	r3, [r5, #0]
   8d9a4:	2b00      	cmp	r3, #0
   8d9a6:	d0fb      	beq.n	8d9a0 <_isatty_r+0x14>
   8d9a8:	6023      	str	r3, [r4, #0]
   8d9aa:	bd38      	pop	{r3, r4, r5, pc}
   8d9ac:	20002e30 	.word	0x20002e30

0008d9b0 <_lseek_r>:
   8d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d9b2:	460f      	mov	r7, r1
   8d9b4:	2600      	movs	r6, #0
   8d9b6:	4d08      	ldr	r5, [pc, #32]	; (8d9d8 <_lseek_r+0x28>)
   8d9b8:	4611      	mov	r1, r2
   8d9ba:	4604      	mov	r4, r0
   8d9bc:	461a      	mov	r2, r3
   8d9be:	4638      	mov	r0, r7
   8d9c0:	602e      	str	r6, [r5, #0]
   8d9c2:	f7f9 fbc9 	bl	87158 <_lseek>
   8d9c6:	1c43      	adds	r3, r0, #1
   8d9c8:	d000      	beq.n	8d9cc <_lseek_r+0x1c>
   8d9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9cc:	682b      	ldr	r3, [r5, #0]
   8d9ce:	2b00      	cmp	r3, #0
   8d9d0:	d0fb      	beq.n	8d9ca <_lseek_r+0x1a>
   8d9d2:	6023      	str	r3, [r4, #0]
   8d9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9d6:	bf00      	nop
   8d9d8:	20002e30 	.word	0x20002e30

0008d9dc <_read_r>:
   8d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d9de:	460f      	mov	r7, r1
   8d9e0:	2600      	movs	r6, #0
   8d9e2:	4d08      	ldr	r5, [pc, #32]	; (8da04 <_read_r+0x28>)
   8d9e4:	4611      	mov	r1, r2
   8d9e6:	4604      	mov	r4, r0
   8d9e8:	461a      	mov	r2, r3
   8d9ea:	4638      	mov	r0, r7
   8d9ec:	602e      	str	r6, [r5, #0]
   8d9ee:	f7f7 fabb 	bl	84f68 <_read>
   8d9f2:	1c43      	adds	r3, r0, #1
   8d9f4:	d000      	beq.n	8d9f8 <_read_r+0x1c>
   8d9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8d9f8:	682b      	ldr	r3, [r5, #0]
   8d9fa:	2b00      	cmp	r3, #0
   8d9fc:	d0fb      	beq.n	8d9f6 <_read_r+0x1a>
   8d9fe:	6023      	str	r3, [r4, #0]
   8da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8da02:	bf00      	nop
   8da04:	20002e30 	.word	0x20002e30

0008da08 <abort>:
   8da08:	2006      	movs	r0, #6
   8da0a:	b508      	push	{r3, lr}
   8da0c:	f000 f830 	bl	8da70 <raise>
   8da10:	2001      	movs	r0, #1
   8da12:	f7f9 fba3 	bl	8715c <_exit>
   8da16:	bf00      	nop

0008da18 <_raise_r>:
   8da18:	291f      	cmp	r1, #31
   8da1a:	b538      	push	{r3, r4, r5, lr}
   8da1c:	4605      	mov	r5, r0
   8da1e:	d821      	bhi.n	8da64 <_raise_r+0x4c>
   8da20:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8da24:	460c      	mov	r4, r1
   8da26:	b16a      	cbz	r2, 8da44 <_raise_r+0x2c>
   8da28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8da2c:	b153      	cbz	r3, 8da44 <_raise_r+0x2c>
   8da2e:	2b01      	cmp	r3, #1
   8da30:	d016      	beq.n	8da60 <_raise_r+0x48>
   8da32:	1c59      	adds	r1, r3, #1
   8da34:	d010      	beq.n	8da58 <_raise_r+0x40>
   8da36:	2500      	movs	r5, #0
   8da38:	4620      	mov	r0, r4
   8da3a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8da3e:	4798      	blx	r3
   8da40:	4628      	mov	r0, r5
   8da42:	bd38      	pop	{r3, r4, r5, pc}
   8da44:	4628      	mov	r0, r5
   8da46:	f000 f831 	bl	8daac <_getpid_r>
   8da4a:	4622      	mov	r2, r4
   8da4c:	4601      	mov	r1, r0
   8da4e:	4628      	mov	r0, r5
   8da50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8da54:	f000 b814 	b.w	8da80 <_kill_r>
   8da58:	2316      	movs	r3, #22
   8da5a:	2001      	movs	r0, #1
   8da5c:	602b      	str	r3, [r5, #0]
   8da5e:	bd38      	pop	{r3, r4, r5, pc}
   8da60:	2000      	movs	r0, #0
   8da62:	bd38      	pop	{r3, r4, r5, pc}
   8da64:	2316      	movs	r3, #22
   8da66:	f04f 30ff 	mov.w	r0, #4294967295
   8da6a:	602b      	str	r3, [r5, #0]
   8da6c:	bd38      	pop	{r3, r4, r5, pc}
   8da6e:	bf00      	nop

0008da70 <raise>:
   8da70:	4b02      	ldr	r3, [pc, #8]	; (8da7c <raise+0xc>)
   8da72:	4601      	mov	r1, r0
   8da74:	6818      	ldr	r0, [r3, #0]
   8da76:	f7ff bfcf 	b.w	8da18 <_raise_r>
   8da7a:	bf00      	nop
   8da7c:	20000718 	.word	0x20000718

0008da80 <_kill_r>:
   8da80:	b570      	push	{r4, r5, r6, lr}
   8da82:	460c      	mov	r4, r1
   8da84:	4603      	mov	r3, r0
   8da86:	2600      	movs	r6, #0
   8da88:	4d07      	ldr	r5, [pc, #28]	; (8daa8 <_kill_r+0x28>)
   8da8a:	4620      	mov	r0, r4
   8da8c:	4611      	mov	r1, r2
   8da8e:	461c      	mov	r4, r3
   8da90:	602e      	str	r6, [r5, #0]
   8da92:	f7f9 fb6d 	bl	87170 <_kill>
   8da96:	1c43      	adds	r3, r0, #1
   8da98:	d000      	beq.n	8da9c <_kill_r+0x1c>
   8da9a:	bd70      	pop	{r4, r5, r6, pc}
   8da9c:	682b      	ldr	r3, [r5, #0]
   8da9e:	2b00      	cmp	r3, #0
   8daa0:	d0fb      	beq.n	8da9a <_kill_r+0x1a>
   8daa2:	6023      	str	r3, [r4, #0]
   8daa4:	bd70      	pop	{r4, r5, r6, pc}
   8daa6:	bf00      	nop
   8daa8:	20002e30 	.word	0x20002e30

0008daac <_getpid_r>:
   8daac:	f7f9 bb61 	b.w	87172 <_getpid>

0008dab0 <__aeabi_drsub>:
   8dab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8dab4:	e002      	b.n	8dabc <__adddf3>
   8dab6:	bf00      	nop

0008dab8 <__aeabi_dsub>:
   8dab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008dabc <__adddf3>:
   8dabc:	b530      	push	{r4, r5, lr}
   8dabe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8dac2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8dac6:	ea94 0f05 	teq	r4, r5
   8daca:	bf08      	it	eq
   8dacc:	ea90 0f02 	teqeq	r0, r2
   8dad0:	bf1f      	itttt	ne
   8dad2:	ea54 0c00 	orrsne.w	ip, r4, r0
   8dad6:	ea55 0c02 	orrsne.w	ip, r5, r2
   8dada:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8dade:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8dae2:	f000 80e2 	beq.w	8dcaa <__adddf3+0x1ee>
   8dae6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8daea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8daee:	bfb8      	it	lt
   8daf0:	426d      	neglt	r5, r5
   8daf2:	dd0c      	ble.n	8db0e <__adddf3+0x52>
   8daf4:	442c      	add	r4, r5
   8daf6:	ea80 0202 	eor.w	r2, r0, r2
   8dafa:	ea81 0303 	eor.w	r3, r1, r3
   8dafe:	ea82 0000 	eor.w	r0, r2, r0
   8db02:	ea83 0101 	eor.w	r1, r3, r1
   8db06:	ea80 0202 	eor.w	r2, r0, r2
   8db0a:	ea81 0303 	eor.w	r3, r1, r3
   8db0e:	2d36      	cmp	r5, #54	; 0x36
   8db10:	bf88      	it	hi
   8db12:	bd30      	pophi	{r4, r5, pc}
   8db14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8db18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8db1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8db20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8db24:	d002      	beq.n	8db2c <__adddf3+0x70>
   8db26:	4240      	negs	r0, r0
   8db28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8db2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8db30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8db34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8db38:	d002      	beq.n	8db40 <__adddf3+0x84>
   8db3a:	4252      	negs	r2, r2
   8db3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8db40:	ea94 0f05 	teq	r4, r5
   8db44:	f000 80a7 	beq.w	8dc96 <__adddf3+0x1da>
   8db48:	f1a4 0401 	sub.w	r4, r4, #1
   8db4c:	f1d5 0e20 	rsbs	lr, r5, #32
   8db50:	db0d      	blt.n	8db6e <__adddf3+0xb2>
   8db52:	fa02 fc0e 	lsl.w	ip, r2, lr
   8db56:	fa22 f205 	lsr.w	r2, r2, r5
   8db5a:	1880      	adds	r0, r0, r2
   8db5c:	f141 0100 	adc.w	r1, r1, #0
   8db60:	fa03 f20e 	lsl.w	r2, r3, lr
   8db64:	1880      	adds	r0, r0, r2
   8db66:	fa43 f305 	asr.w	r3, r3, r5
   8db6a:	4159      	adcs	r1, r3
   8db6c:	e00e      	b.n	8db8c <__adddf3+0xd0>
   8db6e:	f1a5 0520 	sub.w	r5, r5, #32
   8db72:	f10e 0e20 	add.w	lr, lr, #32
   8db76:	2a01      	cmp	r2, #1
   8db78:	fa03 fc0e 	lsl.w	ip, r3, lr
   8db7c:	bf28      	it	cs
   8db7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8db82:	fa43 f305 	asr.w	r3, r3, r5
   8db86:	18c0      	adds	r0, r0, r3
   8db88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8db8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8db90:	d507      	bpl.n	8dba2 <__adddf3+0xe6>
   8db92:	f04f 0e00 	mov.w	lr, #0
   8db96:	f1dc 0c00 	rsbs	ip, ip, #0
   8db9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8db9e:	eb6e 0101 	sbc.w	r1, lr, r1
   8dba2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8dba6:	d31b      	bcc.n	8dbe0 <__adddf3+0x124>
   8dba8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8dbac:	d30c      	bcc.n	8dbc8 <__adddf3+0x10c>
   8dbae:	0849      	lsrs	r1, r1, #1
   8dbb0:	ea5f 0030 	movs.w	r0, r0, rrx
   8dbb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8dbb8:	f104 0401 	add.w	r4, r4, #1
   8dbbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8dbc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8dbc4:	f080 809a 	bcs.w	8dcfc <__adddf3+0x240>
   8dbc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8dbcc:	bf08      	it	eq
   8dbce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8dbd2:	f150 0000 	adcs.w	r0, r0, #0
   8dbd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8dbda:	ea41 0105 	orr.w	r1, r1, r5
   8dbde:	bd30      	pop	{r4, r5, pc}
   8dbe0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8dbe4:	4140      	adcs	r0, r0
   8dbe6:	eb41 0101 	adc.w	r1, r1, r1
   8dbea:	3c01      	subs	r4, #1
   8dbec:	bf28      	it	cs
   8dbee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8dbf2:	d2e9      	bcs.n	8dbc8 <__adddf3+0x10c>
   8dbf4:	f091 0f00 	teq	r1, #0
   8dbf8:	bf04      	itt	eq
   8dbfa:	4601      	moveq	r1, r0
   8dbfc:	2000      	moveq	r0, #0
   8dbfe:	fab1 f381 	clz	r3, r1
   8dc02:	bf08      	it	eq
   8dc04:	3320      	addeq	r3, #32
   8dc06:	f1a3 030b 	sub.w	r3, r3, #11
   8dc0a:	f1b3 0220 	subs.w	r2, r3, #32
   8dc0e:	da0c      	bge.n	8dc2a <__adddf3+0x16e>
   8dc10:	320c      	adds	r2, #12
   8dc12:	dd08      	ble.n	8dc26 <__adddf3+0x16a>
   8dc14:	f102 0c14 	add.w	ip, r2, #20
   8dc18:	f1c2 020c 	rsb	r2, r2, #12
   8dc1c:	fa01 f00c 	lsl.w	r0, r1, ip
   8dc20:	fa21 f102 	lsr.w	r1, r1, r2
   8dc24:	e00c      	b.n	8dc40 <__adddf3+0x184>
   8dc26:	f102 0214 	add.w	r2, r2, #20
   8dc2a:	bfd8      	it	le
   8dc2c:	f1c2 0c20 	rsble	ip, r2, #32
   8dc30:	fa01 f102 	lsl.w	r1, r1, r2
   8dc34:	fa20 fc0c 	lsr.w	ip, r0, ip
   8dc38:	bfdc      	itt	le
   8dc3a:	ea41 010c 	orrle.w	r1, r1, ip
   8dc3e:	4090      	lslle	r0, r2
   8dc40:	1ae4      	subs	r4, r4, r3
   8dc42:	bfa2      	ittt	ge
   8dc44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8dc48:	4329      	orrge	r1, r5
   8dc4a:	bd30      	popge	{r4, r5, pc}
   8dc4c:	ea6f 0404 	mvn.w	r4, r4
   8dc50:	3c1f      	subs	r4, #31
   8dc52:	da1c      	bge.n	8dc8e <__adddf3+0x1d2>
   8dc54:	340c      	adds	r4, #12
   8dc56:	dc0e      	bgt.n	8dc76 <__adddf3+0x1ba>
   8dc58:	f104 0414 	add.w	r4, r4, #20
   8dc5c:	f1c4 0220 	rsb	r2, r4, #32
   8dc60:	fa20 f004 	lsr.w	r0, r0, r4
   8dc64:	fa01 f302 	lsl.w	r3, r1, r2
   8dc68:	ea40 0003 	orr.w	r0, r0, r3
   8dc6c:	fa21 f304 	lsr.w	r3, r1, r4
   8dc70:	ea45 0103 	orr.w	r1, r5, r3
   8dc74:	bd30      	pop	{r4, r5, pc}
   8dc76:	f1c4 040c 	rsb	r4, r4, #12
   8dc7a:	f1c4 0220 	rsb	r2, r4, #32
   8dc7e:	fa20 f002 	lsr.w	r0, r0, r2
   8dc82:	fa01 f304 	lsl.w	r3, r1, r4
   8dc86:	ea40 0003 	orr.w	r0, r0, r3
   8dc8a:	4629      	mov	r1, r5
   8dc8c:	bd30      	pop	{r4, r5, pc}
   8dc8e:	fa21 f004 	lsr.w	r0, r1, r4
   8dc92:	4629      	mov	r1, r5
   8dc94:	bd30      	pop	{r4, r5, pc}
   8dc96:	f094 0f00 	teq	r4, #0
   8dc9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8dc9e:	bf06      	itte	eq
   8dca0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8dca4:	3401      	addeq	r4, #1
   8dca6:	3d01      	subne	r5, #1
   8dca8:	e74e      	b.n	8db48 <__adddf3+0x8c>
   8dcaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dcae:	bf18      	it	ne
   8dcb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8dcb4:	d029      	beq.n	8dd0a <__adddf3+0x24e>
   8dcb6:	ea94 0f05 	teq	r4, r5
   8dcba:	bf08      	it	eq
   8dcbc:	ea90 0f02 	teqeq	r0, r2
   8dcc0:	d005      	beq.n	8dcce <__adddf3+0x212>
   8dcc2:	ea54 0c00 	orrs.w	ip, r4, r0
   8dcc6:	bf04      	itt	eq
   8dcc8:	4619      	moveq	r1, r3
   8dcca:	4610      	moveq	r0, r2
   8dccc:	bd30      	pop	{r4, r5, pc}
   8dcce:	ea91 0f03 	teq	r1, r3
   8dcd2:	bf1e      	ittt	ne
   8dcd4:	2100      	movne	r1, #0
   8dcd6:	2000      	movne	r0, #0
   8dcd8:	bd30      	popne	{r4, r5, pc}
   8dcda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8dcde:	d105      	bne.n	8dcec <__adddf3+0x230>
   8dce0:	0040      	lsls	r0, r0, #1
   8dce2:	4149      	adcs	r1, r1
   8dce4:	bf28      	it	cs
   8dce6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8dcea:	bd30      	pop	{r4, r5, pc}
   8dcec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8dcf0:	bf3c      	itt	cc
   8dcf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8dcf6:	bd30      	popcc	{r4, r5, pc}
   8dcf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8dcfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8dd00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8dd04:	f04f 0000 	mov.w	r0, #0
   8dd08:	bd30      	pop	{r4, r5, pc}
   8dd0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8dd0e:	bf1a      	itte	ne
   8dd10:	4619      	movne	r1, r3
   8dd12:	4610      	movne	r0, r2
   8dd14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8dd18:	bf1c      	itt	ne
   8dd1a:	460b      	movne	r3, r1
   8dd1c:	4602      	movne	r2, r0
   8dd1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8dd22:	bf06      	itte	eq
   8dd24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8dd28:	ea91 0f03 	teqeq	r1, r3
   8dd2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8dd30:	bd30      	pop	{r4, r5, pc}
   8dd32:	bf00      	nop

0008dd34 <__aeabi_ui2d>:
   8dd34:	f090 0f00 	teq	r0, #0
   8dd38:	bf04      	itt	eq
   8dd3a:	2100      	moveq	r1, #0
   8dd3c:	4770      	bxeq	lr
   8dd3e:	b530      	push	{r4, r5, lr}
   8dd40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dd44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dd48:	f04f 0500 	mov.w	r5, #0
   8dd4c:	f04f 0100 	mov.w	r1, #0
   8dd50:	e750      	b.n	8dbf4 <__adddf3+0x138>
   8dd52:	bf00      	nop

0008dd54 <__aeabi_i2d>:
   8dd54:	f090 0f00 	teq	r0, #0
   8dd58:	bf04      	itt	eq
   8dd5a:	2100      	moveq	r1, #0
   8dd5c:	4770      	bxeq	lr
   8dd5e:	b530      	push	{r4, r5, lr}
   8dd60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dd64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8dd68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8dd6c:	bf48      	it	mi
   8dd6e:	4240      	negmi	r0, r0
   8dd70:	f04f 0100 	mov.w	r1, #0
   8dd74:	e73e      	b.n	8dbf4 <__adddf3+0x138>
   8dd76:	bf00      	nop

0008dd78 <__aeabi_f2d>:
   8dd78:	0042      	lsls	r2, r0, #1
   8dd7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8dd7e:	ea4f 0131 	mov.w	r1, r1, rrx
   8dd82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8dd86:	bf1f      	itttt	ne
   8dd88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8dd8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8dd90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8dd94:	4770      	bxne	lr
   8dd96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8dd9a:	bf08      	it	eq
   8dd9c:	4770      	bxeq	lr
   8dd9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8dda2:	bf04      	itt	eq
   8dda4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8dda8:	4770      	bxeq	lr
   8ddaa:	b530      	push	{r4, r5, lr}
   8ddac:	f44f 7460 	mov.w	r4, #896	; 0x380
   8ddb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ddb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8ddb8:	e71c      	b.n	8dbf4 <__adddf3+0x138>
   8ddba:	bf00      	nop

0008ddbc <__aeabi_ul2d>:
   8ddbc:	ea50 0201 	orrs.w	r2, r0, r1
   8ddc0:	bf08      	it	eq
   8ddc2:	4770      	bxeq	lr
   8ddc4:	b530      	push	{r4, r5, lr}
   8ddc6:	f04f 0500 	mov.w	r5, #0
   8ddca:	e00a      	b.n	8dde2 <__aeabi_l2d+0x16>

0008ddcc <__aeabi_l2d>:
   8ddcc:	ea50 0201 	orrs.w	r2, r0, r1
   8ddd0:	bf08      	it	eq
   8ddd2:	4770      	bxeq	lr
   8ddd4:	b530      	push	{r4, r5, lr}
   8ddd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8ddda:	d502      	bpl.n	8dde2 <__aeabi_l2d+0x16>
   8dddc:	4240      	negs	r0, r0
   8ddde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8dde2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8dde6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ddea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8ddee:	f43f aed8 	beq.w	8dba2 <__adddf3+0xe6>
   8ddf2:	f04f 0203 	mov.w	r2, #3
   8ddf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ddfa:	bf18      	it	ne
   8ddfc:	3203      	addne	r2, #3
   8ddfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8de02:	bf18      	it	ne
   8de04:	3203      	addne	r2, #3
   8de06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8de0a:	f1c2 0320 	rsb	r3, r2, #32
   8de0e:	fa00 fc03 	lsl.w	ip, r0, r3
   8de12:	fa20 f002 	lsr.w	r0, r0, r2
   8de16:	fa01 fe03 	lsl.w	lr, r1, r3
   8de1a:	ea40 000e 	orr.w	r0, r0, lr
   8de1e:	fa21 f102 	lsr.w	r1, r1, r2
   8de22:	4414      	add	r4, r2
   8de24:	e6bd      	b.n	8dba2 <__adddf3+0xe6>
   8de26:	bf00      	nop

0008de28 <__aeabi_dmul>:
   8de28:	b570      	push	{r4, r5, r6, lr}
   8de2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8de2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8de32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8de36:	bf1d      	ittte	ne
   8de38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8de3c:	ea94 0f0c 	teqne	r4, ip
   8de40:	ea95 0f0c 	teqne	r5, ip
   8de44:	f000 f8de 	bleq	8e004 <__aeabi_dmul+0x1dc>
   8de48:	442c      	add	r4, r5
   8de4a:	ea81 0603 	eor.w	r6, r1, r3
   8de4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8de52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8de56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8de5a:	bf18      	it	ne
   8de5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8de60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8de64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8de68:	d038      	beq.n	8dedc <__aeabi_dmul+0xb4>
   8de6a:	fba0 ce02 	umull	ip, lr, r0, r2
   8de6e:	f04f 0500 	mov.w	r5, #0
   8de72:	fbe1 e502 	umlal	lr, r5, r1, r2
   8de76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8de7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8de7e:	f04f 0600 	mov.w	r6, #0
   8de82:	fbe1 5603 	umlal	r5, r6, r1, r3
   8de86:	f09c 0f00 	teq	ip, #0
   8de8a:	bf18      	it	ne
   8de8c:	f04e 0e01 	orrne.w	lr, lr, #1
   8de90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8de94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8de98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8de9c:	d204      	bcs.n	8dea8 <__aeabi_dmul+0x80>
   8de9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8dea2:	416d      	adcs	r5, r5
   8dea4:	eb46 0606 	adc.w	r6, r6, r6
   8dea8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8deac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8deb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8deb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8deb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8debc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8dec0:	bf88      	it	hi
   8dec2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8dec6:	d81e      	bhi.n	8df06 <__aeabi_dmul+0xde>
   8dec8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8decc:	bf08      	it	eq
   8dece:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8ded2:	f150 0000 	adcs.w	r0, r0, #0
   8ded6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8deda:	bd70      	pop	{r4, r5, r6, pc}
   8dedc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8dee0:	ea46 0101 	orr.w	r1, r6, r1
   8dee4:	ea40 0002 	orr.w	r0, r0, r2
   8dee8:	ea81 0103 	eor.w	r1, r1, r3
   8deec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8def0:	bfc2      	ittt	gt
   8def2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8def6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8defa:	bd70      	popgt	{r4, r5, r6, pc}
   8defc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8df00:	f04f 0e00 	mov.w	lr, #0
   8df04:	3c01      	subs	r4, #1
   8df06:	f300 80ab 	bgt.w	8e060 <__aeabi_dmul+0x238>
   8df0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8df0e:	bfde      	ittt	le
   8df10:	2000      	movle	r0, #0
   8df12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8df16:	bd70      	pople	{r4, r5, r6, pc}
   8df18:	f1c4 0400 	rsb	r4, r4, #0
   8df1c:	3c20      	subs	r4, #32
   8df1e:	da35      	bge.n	8df8c <__aeabi_dmul+0x164>
   8df20:	340c      	adds	r4, #12
   8df22:	dc1b      	bgt.n	8df5c <__aeabi_dmul+0x134>
   8df24:	f104 0414 	add.w	r4, r4, #20
   8df28:	f1c4 0520 	rsb	r5, r4, #32
   8df2c:	fa00 f305 	lsl.w	r3, r0, r5
   8df30:	fa20 f004 	lsr.w	r0, r0, r4
   8df34:	fa01 f205 	lsl.w	r2, r1, r5
   8df38:	ea40 0002 	orr.w	r0, r0, r2
   8df3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8df40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8df44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8df48:	fa21 f604 	lsr.w	r6, r1, r4
   8df4c:	eb42 0106 	adc.w	r1, r2, r6
   8df50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df54:	bf08      	it	eq
   8df56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df5a:	bd70      	pop	{r4, r5, r6, pc}
   8df5c:	f1c4 040c 	rsb	r4, r4, #12
   8df60:	f1c4 0520 	rsb	r5, r4, #32
   8df64:	fa00 f304 	lsl.w	r3, r0, r4
   8df68:	fa20 f005 	lsr.w	r0, r0, r5
   8df6c:	fa01 f204 	lsl.w	r2, r1, r4
   8df70:	ea40 0002 	orr.w	r0, r0, r2
   8df74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8df78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8df7c:	f141 0100 	adc.w	r1, r1, #0
   8df80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8df84:	bf08      	it	eq
   8df86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8df8a:	bd70      	pop	{r4, r5, r6, pc}
   8df8c:	f1c4 0520 	rsb	r5, r4, #32
   8df90:	fa00 f205 	lsl.w	r2, r0, r5
   8df94:	ea4e 0e02 	orr.w	lr, lr, r2
   8df98:	fa20 f304 	lsr.w	r3, r0, r4
   8df9c:	fa01 f205 	lsl.w	r2, r1, r5
   8dfa0:	ea43 0302 	orr.w	r3, r3, r2
   8dfa4:	fa21 f004 	lsr.w	r0, r1, r4
   8dfa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8dfac:	fa21 f204 	lsr.w	r2, r1, r4
   8dfb0:	ea20 0002 	bic.w	r0, r0, r2
   8dfb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8dfb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8dfbc:	bf08      	it	eq
   8dfbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8dfc2:	bd70      	pop	{r4, r5, r6, pc}
   8dfc4:	f094 0f00 	teq	r4, #0
   8dfc8:	d10f      	bne.n	8dfea <__aeabi_dmul+0x1c2>
   8dfca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8dfce:	0040      	lsls	r0, r0, #1
   8dfd0:	eb41 0101 	adc.w	r1, r1, r1
   8dfd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8dfd8:	bf08      	it	eq
   8dfda:	3c01      	subeq	r4, #1
   8dfdc:	d0f7      	beq.n	8dfce <__aeabi_dmul+0x1a6>
   8dfde:	ea41 0106 	orr.w	r1, r1, r6
   8dfe2:	f095 0f00 	teq	r5, #0
   8dfe6:	bf18      	it	ne
   8dfe8:	4770      	bxne	lr
   8dfea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8dfee:	0052      	lsls	r2, r2, #1
   8dff0:	eb43 0303 	adc.w	r3, r3, r3
   8dff4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8dff8:	bf08      	it	eq
   8dffa:	3d01      	subeq	r5, #1
   8dffc:	d0f7      	beq.n	8dfee <__aeabi_dmul+0x1c6>
   8dffe:	ea43 0306 	orr.w	r3, r3, r6
   8e002:	4770      	bx	lr
   8e004:	ea94 0f0c 	teq	r4, ip
   8e008:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e00c:	bf18      	it	ne
   8e00e:	ea95 0f0c 	teqne	r5, ip
   8e012:	d00c      	beq.n	8e02e <__aeabi_dmul+0x206>
   8e014:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e018:	bf18      	it	ne
   8e01a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e01e:	d1d1      	bne.n	8dfc4 <__aeabi_dmul+0x19c>
   8e020:	ea81 0103 	eor.w	r1, r1, r3
   8e024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e028:	f04f 0000 	mov.w	r0, #0
   8e02c:	bd70      	pop	{r4, r5, r6, pc}
   8e02e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e032:	bf06      	itte	eq
   8e034:	4610      	moveq	r0, r2
   8e036:	4619      	moveq	r1, r3
   8e038:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e03c:	d019      	beq.n	8e072 <__aeabi_dmul+0x24a>
   8e03e:	ea94 0f0c 	teq	r4, ip
   8e042:	d102      	bne.n	8e04a <__aeabi_dmul+0x222>
   8e044:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8e048:	d113      	bne.n	8e072 <__aeabi_dmul+0x24a>
   8e04a:	ea95 0f0c 	teq	r5, ip
   8e04e:	d105      	bne.n	8e05c <__aeabi_dmul+0x234>
   8e050:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8e054:	bf1c      	itt	ne
   8e056:	4610      	movne	r0, r2
   8e058:	4619      	movne	r1, r3
   8e05a:	d10a      	bne.n	8e072 <__aeabi_dmul+0x24a>
   8e05c:	ea81 0103 	eor.w	r1, r1, r3
   8e060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8e064:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8e06c:	f04f 0000 	mov.w	r0, #0
   8e070:	bd70      	pop	{r4, r5, r6, pc}
   8e072:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8e076:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8e07a:	bd70      	pop	{r4, r5, r6, pc}

0008e07c <__aeabi_ddiv>:
   8e07c:	b570      	push	{r4, r5, r6, lr}
   8e07e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8e082:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8e086:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8e08a:	bf1d      	ittte	ne
   8e08c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8e090:	ea94 0f0c 	teqne	r4, ip
   8e094:	ea95 0f0c 	teqne	r5, ip
   8e098:	f000 f8a7 	bleq	8e1ea <__aeabi_ddiv+0x16e>
   8e09c:	eba4 0405 	sub.w	r4, r4, r5
   8e0a0:	ea81 0e03 	eor.w	lr, r1, r3
   8e0a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e0a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8e0ac:	f000 8088 	beq.w	8e1c0 <__aeabi_ddiv+0x144>
   8e0b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8e0b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8e0b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8e0bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8e0c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8e0c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8e0c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8e0cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8e0d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8e0d4:	429d      	cmp	r5, r3
   8e0d6:	bf08      	it	eq
   8e0d8:	4296      	cmpeq	r6, r2
   8e0da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8e0de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8e0e2:	d202      	bcs.n	8e0ea <__aeabi_ddiv+0x6e>
   8e0e4:	085b      	lsrs	r3, r3, #1
   8e0e6:	ea4f 0232 	mov.w	r2, r2, rrx
   8e0ea:	1ab6      	subs	r6, r6, r2
   8e0ec:	eb65 0503 	sbc.w	r5, r5, r3
   8e0f0:	085b      	lsrs	r3, r3, #1
   8e0f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8e0f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8e0fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8e0fe:	ebb6 0e02 	subs.w	lr, r6, r2
   8e102:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e106:	bf22      	ittt	cs
   8e108:	1ab6      	subcs	r6, r6, r2
   8e10a:	4675      	movcs	r5, lr
   8e10c:	ea40 000c 	orrcs.w	r0, r0, ip
   8e110:	085b      	lsrs	r3, r3, #1
   8e112:	ea4f 0232 	mov.w	r2, r2, rrx
   8e116:	ebb6 0e02 	subs.w	lr, r6, r2
   8e11a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e11e:	bf22      	ittt	cs
   8e120:	1ab6      	subcs	r6, r6, r2
   8e122:	4675      	movcs	r5, lr
   8e124:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8e128:	085b      	lsrs	r3, r3, #1
   8e12a:	ea4f 0232 	mov.w	r2, r2, rrx
   8e12e:	ebb6 0e02 	subs.w	lr, r6, r2
   8e132:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e136:	bf22      	ittt	cs
   8e138:	1ab6      	subcs	r6, r6, r2
   8e13a:	4675      	movcs	r5, lr
   8e13c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8e140:	085b      	lsrs	r3, r3, #1
   8e142:	ea4f 0232 	mov.w	r2, r2, rrx
   8e146:	ebb6 0e02 	subs.w	lr, r6, r2
   8e14a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8e14e:	bf22      	ittt	cs
   8e150:	1ab6      	subcs	r6, r6, r2
   8e152:	4675      	movcs	r5, lr
   8e154:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8e158:	ea55 0e06 	orrs.w	lr, r5, r6
   8e15c:	d018      	beq.n	8e190 <__aeabi_ddiv+0x114>
   8e15e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8e162:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8e166:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8e16a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8e16e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8e172:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8e176:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8e17a:	d1c0      	bne.n	8e0fe <__aeabi_ddiv+0x82>
   8e17c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e180:	d10b      	bne.n	8e19a <__aeabi_ddiv+0x11e>
   8e182:	ea41 0100 	orr.w	r1, r1, r0
   8e186:	f04f 0000 	mov.w	r0, #0
   8e18a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8e18e:	e7b6      	b.n	8e0fe <__aeabi_ddiv+0x82>
   8e190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8e194:	bf04      	itt	eq
   8e196:	4301      	orreq	r1, r0
   8e198:	2000      	moveq	r0, #0
   8e19a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8e19e:	bf88      	it	hi
   8e1a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8e1a4:	f63f aeaf 	bhi.w	8df06 <__aeabi_dmul+0xde>
   8e1a8:	ebb5 0c03 	subs.w	ip, r5, r3
   8e1ac:	bf04      	itt	eq
   8e1ae:	ebb6 0c02 	subseq.w	ip, r6, r2
   8e1b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8e1b6:	f150 0000 	adcs.w	r0, r0, #0
   8e1ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8e1be:	bd70      	pop	{r4, r5, r6, pc}
   8e1c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8e1c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8e1c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8e1cc:	bfc2      	ittt	gt
   8e1ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   8e1d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8e1d6:	bd70      	popgt	{r4, r5, r6, pc}
   8e1d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8e1dc:	f04f 0e00 	mov.w	lr, #0
   8e1e0:	3c01      	subs	r4, #1
   8e1e2:	e690      	b.n	8df06 <__aeabi_dmul+0xde>
   8e1e4:	ea45 0e06 	orr.w	lr, r5, r6
   8e1e8:	e68d      	b.n	8df06 <__aeabi_dmul+0xde>
   8e1ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8e1ee:	ea94 0f0c 	teq	r4, ip
   8e1f2:	bf08      	it	eq
   8e1f4:	ea95 0f0c 	teqeq	r5, ip
   8e1f8:	f43f af3b 	beq.w	8e072 <__aeabi_dmul+0x24a>
   8e1fc:	ea94 0f0c 	teq	r4, ip
   8e200:	d10a      	bne.n	8e218 <__aeabi_ddiv+0x19c>
   8e202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8e206:	f47f af34 	bne.w	8e072 <__aeabi_dmul+0x24a>
   8e20a:	ea95 0f0c 	teq	r5, ip
   8e20e:	f47f af25 	bne.w	8e05c <__aeabi_dmul+0x234>
   8e212:	4610      	mov	r0, r2
   8e214:	4619      	mov	r1, r3
   8e216:	e72c      	b.n	8e072 <__aeabi_dmul+0x24a>
   8e218:	ea95 0f0c 	teq	r5, ip
   8e21c:	d106      	bne.n	8e22c <__aeabi_ddiv+0x1b0>
   8e21e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8e222:	f43f aefd 	beq.w	8e020 <__aeabi_dmul+0x1f8>
   8e226:	4610      	mov	r0, r2
   8e228:	4619      	mov	r1, r3
   8e22a:	e722      	b.n	8e072 <__aeabi_dmul+0x24a>
   8e22c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8e230:	bf18      	it	ne
   8e232:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8e236:	f47f aec5 	bne.w	8dfc4 <__aeabi_dmul+0x19c>
   8e23a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8e23e:	f47f af0d 	bne.w	8e05c <__aeabi_dmul+0x234>
   8e242:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8e246:	f47f aeeb 	bne.w	8e020 <__aeabi_dmul+0x1f8>
   8e24a:	e712      	b.n	8e072 <__aeabi_dmul+0x24a>

0008e24c <__gedf2>:
   8e24c:	f04f 3cff 	mov.w	ip, #4294967295
   8e250:	e006      	b.n	8e260 <__cmpdf2+0x4>
   8e252:	bf00      	nop

0008e254 <__ledf2>:
   8e254:	f04f 0c01 	mov.w	ip, #1
   8e258:	e002      	b.n	8e260 <__cmpdf2+0x4>
   8e25a:	bf00      	nop

0008e25c <__cmpdf2>:
   8e25c:	f04f 0c01 	mov.w	ip, #1
   8e260:	f84d cd04 	str.w	ip, [sp, #-4]!
   8e264:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e268:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e26c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e270:	bf18      	it	ne
   8e272:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8e276:	d01b      	beq.n	8e2b0 <__cmpdf2+0x54>
   8e278:	b001      	add	sp, #4
   8e27a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8e27e:	bf0c      	ite	eq
   8e280:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8e284:	ea91 0f03 	teqne	r1, r3
   8e288:	bf02      	ittt	eq
   8e28a:	ea90 0f02 	teqeq	r0, r2
   8e28e:	2000      	moveq	r0, #0
   8e290:	4770      	bxeq	lr
   8e292:	f110 0f00 	cmn.w	r0, #0
   8e296:	ea91 0f03 	teq	r1, r3
   8e29a:	bf58      	it	pl
   8e29c:	4299      	cmppl	r1, r3
   8e29e:	bf08      	it	eq
   8e2a0:	4290      	cmpeq	r0, r2
   8e2a2:	bf2c      	ite	cs
   8e2a4:	17d8      	asrcs	r0, r3, #31
   8e2a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8e2aa:	f040 0001 	orr.w	r0, r0, #1
   8e2ae:	4770      	bx	lr
   8e2b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e2b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e2b8:	d102      	bne.n	8e2c0 <__cmpdf2+0x64>
   8e2ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e2be:	d107      	bne.n	8e2d0 <__cmpdf2+0x74>
   8e2c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e2c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e2c8:	d1d6      	bne.n	8e278 <__cmpdf2+0x1c>
   8e2ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e2ce:	d0d3      	beq.n	8e278 <__cmpdf2+0x1c>
   8e2d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   8e2d4:	4770      	bx	lr
   8e2d6:	bf00      	nop

0008e2d8 <__aeabi_cdrcmple>:
   8e2d8:	4684      	mov	ip, r0
   8e2da:	4610      	mov	r0, r2
   8e2dc:	4662      	mov	r2, ip
   8e2de:	468c      	mov	ip, r1
   8e2e0:	4619      	mov	r1, r3
   8e2e2:	4663      	mov	r3, ip
   8e2e4:	e000      	b.n	8e2e8 <__aeabi_cdcmpeq>
   8e2e6:	bf00      	nop

0008e2e8 <__aeabi_cdcmpeq>:
   8e2e8:	b501      	push	{r0, lr}
   8e2ea:	f7ff ffb7 	bl	8e25c <__cmpdf2>
   8e2ee:	2800      	cmp	r0, #0
   8e2f0:	bf48      	it	mi
   8e2f2:	f110 0f00 	cmnmi.w	r0, #0
   8e2f6:	bd01      	pop	{r0, pc}

0008e2f8 <__aeabi_dcmpeq>:
   8e2f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e2fc:	f7ff fff4 	bl	8e2e8 <__aeabi_cdcmpeq>
   8e300:	bf0c      	ite	eq
   8e302:	2001      	moveq	r0, #1
   8e304:	2000      	movne	r0, #0
   8e306:	f85d fb08 	ldr.w	pc, [sp], #8
   8e30a:	bf00      	nop

0008e30c <__aeabi_dcmplt>:
   8e30c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e310:	f7ff ffea 	bl	8e2e8 <__aeabi_cdcmpeq>
   8e314:	bf34      	ite	cc
   8e316:	2001      	movcc	r0, #1
   8e318:	2000      	movcs	r0, #0
   8e31a:	f85d fb08 	ldr.w	pc, [sp], #8
   8e31e:	bf00      	nop

0008e320 <__aeabi_dcmple>:
   8e320:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e324:	f7ff ffe0 	bl	8e2e8 <__aeabi_cdcmpeq>
   8e328:	bf94      	ite	ls
   8e32a:	2001      	movls	r0, #1
   8e32c:	2000      	movhi	r0, #0
   8e32e:	f85d fb08 	ldr.w	pc, [sp], #8
   8e332:	bf00      	nop

0008e334 <__aeabi_dcmpge>:
   8e334:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e338:	f7ff ffce 	bl	8e2d8 <__aeabi_cdrcmple>
   8e33c:	bf94      	ite	ls
   8e33e:	2001      	movls	r0, #1
   8e340:	2000      	movhi	r0, #0
   8e342:	f85d fb08 	ldr.w	pc, [sp], #8
   8e346:	bf00      	nop

0008e348 <__aeabi_dcmpgt>:
   8e348:	f84d ed08 	str.w	lr, [sp, #-8]!
   8e34c:	f7ff ffc4 	bl	8e2d8 <__aeabi_cdrcmple>
   8e350:	bf34      	ite	cc
   8e352:	2001      	movcc	r0, #1
   8e354:	2000      	movcs	r0, #0
   8e356:	f85d fb08 	ldr.w	pc, [sp], #8
   8e35a:	bf00      	nop

0008e35c <__aeabi_dcmpun>:
   8e35c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8e360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e364:	d102      	bne.n	8e36c <__aeabi_dcmpun+0x10>
   8e366:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8e36a:	d10a      	bne.n	8e382 <__aeabi_dcmpun+0x26>
   8e36c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8e370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8e374:	d102      	bne.n	8e37c <__aeabi_dcmpun+0x20>
   8e376:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8e37a:	d102      	bne.n	8e382 <__aeabi_dcmpun+0x26>
   8e37c:	f04f 0000 	mov.w	r0, #0
   8e380:	4770      	bx	lr
   8e382:	f04f 0001 	mov.w	r0, #1
   8e386:	4770      	bx	lr

0008e388 <__aeabi_d2iz>:
   8e388:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8e38c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8e390:	d215      	bcs.n	8e3be <__aeabi_d2iz+0x36>
   8e392:	d511      	bpl.n	8e3b8 <__aeabi_d2iz+0x30>
   8e394:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8e398:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8e39c:	d912      	bls.n	8e3c4 <__aeabi_d2iz+0x3c>
   8e39e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8e3a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8e3a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8e3aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8e3ae:	fa23 f002 	lsr.w	r0, r3, r2
   8e3b2:	bf18      	it	ne
   8e3b4:	4240      	negne	r0, r0
   8e3b6:	4770      	bx	lr
   8e3b8:	f04f 0000 	mov.w	r0, #0
   8e3bc:	4770      	bx	lr
   8e3be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8e3c2:	d105      	bne.n	8e3d0 <__aeabi_d2iz+0x48>
   8e3c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8e3c8:	bf08      	it	eq
   8e3ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8e3ce:	4770      	bx	lr
   8e3d0:	f04f 0000 	mov.w	r0, #0
   8e3d4:	4770      	bx	lr
   8e3d6:	bf00      	nop
   8e3d8:	706d696c 	.word	0x706d696c
   8e3dc:	006e696b 	.word	0x006e696b
   8e3e0:	00000000 	.word	0x00000000
   8e3e4:	00000174 	.word	0x00000174
   8e3e8:	0000022e 	.word	0x0000022e
   8e3ec:	000002e8 	.word	0x000002e8
   8e3f0:	0000045c 	.word	0x0000045c
   8e3f4:	000005d0 	.word	0x000005d0
   8e3f8:	00000744 	.word	0x00000744
	...
   8e404:	00000200 	.word	0x00000200
   8e408:	00000300 	.word	0x00000300
   8e40c:	00000400 	.word	0x00000400
   8e410:	00000600 	.word	0x00000600
   8e414:	00000800 	.word	0x00000800
	...
   8e424:	00000001 	.word	0x00000001
   8e428:	00000002 	.word	0x00000002
   8e42c:	00000004 	.word	0x00000004
   8e430:	00000008 	.word	0x00000008
   8e434:	00000010 	.word	0x00000010
   8e438:	00000020 	.word	0x00000020
   8e43c:	00000040 	.word	0x00000040
   8e440:	0000000c 	.word	0x0000000c
   8e444:	00000014 	.word	0x00000014
   8e448:	000a7825 	.word	0x000a7825
   8e44c:	20525441 	.word	0x20525441
   8e450:	20642528 	.word	0x20642528
   8e454:	296e656c 	.word	0x296e656c
   8e458:	0000203a 	.word	0x0000203a
   8e45c:	78323025 	.word	0x78323025
   8e460:	00000020 	.word	0x00000020
   8e464:	50525641 	.word	0x50525641
   8e468:	3a474f52 	.word	0x3a474f52
   8e46c:	79615020 	.word	0x79615020
   8e470:	64616f6c 	.word	0x64616f6c
   8e474:	7a697320 	.word	0x7a697320
   8e478:	203d2065 	.word	0x203d2065
   8e47c:	202c6425 	.word	0x202c6425
   8e480:	6f727265 	.word	0x6f727265
   8e484:	0a3f2172 	.word	0x0a3f2172
   8e488:	00000000 	.word	0x00000000
   8e48c:	50525641 	.word	0x50525641
   8e490:	3a474f52 	.word	0x3a474f52
   8e494:	746e4520 	.word	0x746e4520
   8e498:	49207265 	.word	0x49207265
   8e49c:	4d205053 	.word	0x4d205053
   8e4a0:	3a65646f 	.word	0x3a65646f
   8e4a4:	0a782520 	.word	0x0a782520
   8e4a8:	00000000 	.word	0x00000000
   8e4ac:	50525641 	.word	0x50525641
   8e4b0:	3a474f52 	.word	0x3a474f52
   8e4b4:	61724520 	.word	0x61724520
   8e4b8:	203a6573 	.word	0x203a6573
   8e4bc:	6c796150 	.word	0x6c796150
   8e4c0:	2064616f 	.word	0x2064616f
   8e4c4:	657a6973 	.word	0x657a6973
   8e4c8:	25203d20 	.word	0x25203d20
   8e4cc:	65202c64 	.word	0x65202c64
   8e4d0:	726f7272 	.word	0x726f7272
   8e4d4:	000a3f21 	.word	0x000a3f21
   8e4d8:	494c5743 	.word	0x494c5743
   8e4dc:	415f4554 	.word	0x415f4554
   8e4e0:	53495256 	.word	0x53495256
   8e4e4:	00000050 	.word	0x00000050
   8e4e8:	50525641 	.word	0x50525641
   8e4ec:	3a474f52 	.word	0x3a474f52
   8e4f0:	64644120 	.word	0x64644120
   8e4f4:	73736572 	.word	0x73736572
   8e4f8:	25203d20 	.word	0x25203d20
   8e4fc:	0a783230 	.word	0x0a783230
   8e500:	00000000 	.word	0x00000000
   8e504:	62616e45 	.word	0x62616e45
   8e508:	676e696c 	.word	0x676e696c
   8e50c:	41535520 	.word	0x41535520
   8e510:	0a305452 	.word	0x0a305452
   8e514:	00000000 	.word	0x00000000
   8e518:	3a525245 	.word	0x3a525245
   8e51c:	766e4920 	.word	0x766e4920
   8e520:	64696c61 	.word	0x64696c61
   8e524:	41535520 	.word	0x41535520
   8e528:	43205452 	.word	0x43205452
   8e52c:	69666e6f 	.word	0x69666e6f
   8e530:	61727567 	.word	0x61727567
   8e534:	6e6f6974 	.word	0x6e6f6974
   8e538:	63617020 	.word	0x63617020
   8e53c:	3f74656b 	.word	0x3f74656b
   8e540:	0000000a 	.word	0x0000000a

0008e544 <BOS_DESC>:
   8e544:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8e554:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8e570:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8e580:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8e590:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8e5a0:	74697845 20676e69 68746977 61747320     Exiting with sta
   8e5b0:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8e5c0:	00000000 2072614d 32203232 00313230     ....Mar 22 2021.
   8e5d0:	313a3731 31353a31 00000000 70696843     17:11:51....Chip
   8e5e0:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8e5f0:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8e600:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8e610:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8e620:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8e630:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8e640:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8e650:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8e660:	000a2e2e                                ....

0008e664 <_global_impure_ptr>:
   8e664:	20000720 00464e49 00666e69 004e414e      .. INF.inf.NAN.
   8e674:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8e684:	66656463 00000000 33323130 37363534     cdef....01234567
   8e694:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8e6a4:	0000296c 00000030                       l)..0...

0008e6ac <blanks.7335>:
   8e6ac:	20202020 20202020 20202020 20202020                     

0008e6bc <zeroes.7336>:
   8e6bc:	30303030 30303030 30303030 30303030     0000000000000000

0008e6cc <blanks.7328>:
   8e6cc:	20202020 20202020 20202020 20202020                     

0008e6dc <zeroes.7329>:
   8e6dc:	30303030 30303030 30303030 30303030     0000000000000000
   8e6ec:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8e6fc:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8e70c:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8e71c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8e72c:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8e73c:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8e74c:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8e75c:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8e76c:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8e77c:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8e78c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8e79c:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8e7ac:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8e7bc:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8e7cc:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8e7dc:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8e7ec:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8e7fc:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8e80c:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8e81c:	00000000                                ....

0008e820 <__mprec_bigtens>:
   8e820:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8e830:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8e840:	7f73bf3c 75154fdd                       <.s..O.u

0008e848 <__mprec_tens>:
   8e848:	00000000 3ff00000 00000000 40240000     .......?......$@
   8e858:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8e868:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8e878:	00000000 412e8480 00000000 416312d0     .......A......cA
   8e888:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8e898:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8e8a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8e8b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8e8c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8e8d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8e8e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8e8f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8e908:	79d99db4 44ea7843                       ...yCx.D

0008e910 <p05.6122>:
   8e910:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8e920:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8e930:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8e940:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8e950:	2520656e 25732564 00000a73              ne %d%s%s...

0008e95c <_ctype_>:
   8e95c:	20202000 20202020 28282020 20282828     .         ((((( 
   8e96c:	20202020 20202020 20202020 20202020                     
   8e97c:	10108820 10101010 10101010 10101010      ...............
   8e98c:	04040410 04040404 10040404 10101010     ................
   8e99c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8e9ac:	01010101 01010101 01010101 10101010     ................
   8e9bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8e9cc:	02020202 02020202 02020202 10101010     ................
   8e9dc:	00000020 00000000 00000000 00000000      ...............
	...

0008ea60 <_init>:
   8ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ea62:	bf00      	nop
   8ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ea66:	bc08      	pop	{r3}
   8ea68:	469e      	mov	lr, r3
   8ea6a:	4770      	bx	lr

0008ea6c <__init_array_start>:
   8ea6c:	0008a6a9 	.word	0x0008a6a9

0008ea70 <__frame_dummy_init_array_entry>:
   8ea70:	000800e1                                ....

0008ea74 <_fini>:
   8ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ea76:	bf00      	nop
   8ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ea7a:	bc08      	pop	{r3}
   8ea7c:	469e      	mov	lr, r3
   8ea7e:	4770      	bx	lr

0008ea80 <__do_global_dtors_aux_fini_array_entry>:
   8ea80:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	200006f0 	.word	0x200006f0

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	0008019d 000800fd 00080115 00080111     ................
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	000804dd 00080389 0008010d 00080111     ................
200001d0:	00080379                                y...

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400281 02050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02850507 07000040 40020605     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000281 02050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02850507 07000200 00020605     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	200005bc 200001ac 200001c0              ... ... ... 

200002f0 <gs_uc_state>:
200002f0:	                                         .

200002f1 <scard_protocol_version.8943>:
200002f1:	                                         ...

200002f4 <xram>:
200002f4:	60000000                                ...`

200002f8 <avrispmkIIfreqs>:
200002f8:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000308:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000318:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000328:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000338:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000348:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000358:	000099f1 00009586 00008d68 0000861f     ........h.......
20000368:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000378:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000388:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000398:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a8:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b8:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c8:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d8:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e8:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f8:	000016f7 000015e7 000014ef 000013e5     ................
20000408:	00001306 00001219 00001142 00001071     ........B...q...
20000418:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000428:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000438:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000448:	000008d1 00000868 00000804 000007a4     ....h...........
20000458:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000468:	00000603 000005bc 00000576 00000535     ........v...5...
20000478:	000004f7 000004bc 00000483 0000044d     ............M...
20000488:	00000419 000003e8 000003b9 0000038d     ................
20000498:	00000362 0000033a 00000313 000002ee     b...:...........
200004a8:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b8:	0000024e 00000233 00000218 000001ff     N...3...........
200004c8:	000001e7 000001d1 000001bb 000001a6     ................
200004d8:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e8:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f8:	00000112 00000105 000000f9 000000ee     ................
20000508:	000000e2 000000d8 000000ce 000000c4     ................
20000518:	000000bb 000000b2 000000aa 000000a2     ................
20000528:	0000009a 00000093 0000008c 00000086     ................
20000538:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000548:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000558:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000568:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000578:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1 00000003     .!..............

200005a8 <cdc_settings_change>:
200005a8:	                                         ..

200005aa <main_b_vendor_enable>:
200005aa:	                                         ..

200005ac <defaultTimeoutTicks>:
200005ac:	000001f4                                ....

200005b0 <XPROG_Param_EEPageSize>:
200005b0:	00000020                                 ...

200005b4 <XPROG_Param_NVMBase>:
200005b4:	010001c0                                ....

200005b8 <XPROG_Param_NVMCMDRegAddr>:
200005b8:	                                         3

200005b9 <XPROG_Param_NVMCSRRegAddr>:
200005b9:	                                         2..

200005bc <udi_api_vendor>:
200005bc:	00084655 00084679 00084691 00084649     UF..yF...F..IF..
200005cc:	00000000                                ....

200005d0 <udc_string_desc>:
200005d0:	00000300 00000000 00000000 00000000     ................
	...

20000614 <udc_string_desc_languageid>:
20000614:	04090304                                ....

20000618 <udc_string_manufacturer_name>:
20000618:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000628:	636e4920 0000002e                        Inc....

20000630 <udc_string_product_name>:
20000630:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000640:	00006574                                te..

20000644 <winusb_20_desc>:
20000644:	0000000a 06030000 000800ae 00000002     ................
20000654:	001400a4 49570003 4253554e 00000000     ......WINUSB....
20000664:	00000000 00880000 00070004 0044002a     ............*.D.
20000674:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000684:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000694:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
200006a4:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006b4:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006c4:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006d4:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006e4:	00390045 0000007d                        E.9.}.....

200006ee <g_interrupt_enabled>:
200006ee:	                                         ..

200006f0 <SystemCoreClock>:
200006f0:	003d0900                                ..=.

200006f4 <usb_serial_number>:
200006f4:	30303030 30303030 30303030 44414544     000000000000DEAD
20000704:	46454542 00000000 00000000 00000000     BEEF............
20000714:	00000000                                ....

20000718 <_impure_ptr>:
20000718:	20000720 00000000                        .. ....

20000720 <impure_data>:
20000720:	00000000 20000a0c 20000a74 20000adc     ....... t.. ... 
	...
200007c8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d8:	0005deec 0000000b 00000000 00000000     ................
	...

20000b48 <__atexit_recursive_mutex>:
20000b48:	20002e0c                                ... 

20000b4c <__global_locale>:
20000b4c:	00000043 00000000 00000000 00000000     C...............
	...
20000b6c:	00000043 00000000 00000000 00000000     C...............
	...
20000b8c:	00000043 00000000 00000000 00000000     C...............
	...
20000bac:	00000043 00000000 00000000 00000000     C...............
	...
20000bcc:	00000043 00000000 00000000 00000000     C...............
	...
20000bec:	00000043 00000000 00000000 00000000     C...............
	...
20000c0c:	00000043 00000000 00000000 00000000     C...............
	...
20000c2c:	0008d6d9 0008c6a1 00000000 0008e95c     ............\...
20000c3c:	0008e798 0008e5b8 0008e5b8 0008e5b8     ................
20000c4c:	0008e5b8 0008e5b8 0008e5b8 0008e5b8     ................
20000c5c:	0008e5b8 0008e5b8 ffffffff ffffffff     ................
20000c6c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c94:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb8 <__malloc_av_>:
	...
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08 20000e10 20000e10     ... ... ... ... 
20000e20:	20000e18 20000e18 20000e20 20000e20     ... ...  ..  .. 
20000e30:	20000e28 20000e28 20000e30 20000e30     (.. (.. 0.. 0.. 
20000e40:	20000e38 20000e38 20000e40 20000e40     8.. 8.. @.. @.. 
20000e50:	20000e48 20000e48 20000e50 20000e50     H.. H.. P.. P.. 
20000e60:	20000e58 20000e58 20000e60 20000e60     X.. X.. `.. `.. 
20000e70:	20000e68 20000e68 20000e70 20000e70     h.. h.. p.. p.. 
20000e80:	20000e78 20000e78 20000e80 20000e80     x.. x.. ... ... 
20000e90:	20000e88 20000e88 20000e90 20000e90     ... ... ... ... 
20000ea0:	20000e98 20000e98 20000ea0 20000ea0     ... ... ... ... 
20000eb0:	20000ea8 20000ea8 20000eb0 20000eb0     ... ... ... ... 
20000ec0:	20000eb8 20000eb8 20000ec0 20000ec0     ... ... ... ... 
20000ed0:	20000ec8 20000ec8 20000ed0 20000ed0     ... ... ... ... 
20000ee0:	20000ed8 20000ed8 20000ee0 20000ee0     ... ... ... ... 
20000ef0:	20000ee8 20000ee8 20000ef0 20000ef0     ... ... ... ... 
20000f00:	20000ef8 20000ef8 20000f00 20000f00     ... ... ... ... 
20000f10:	20000f08 20000f08 20000f10 20000f10     ... ... ... ... 
20000f20:	20000f18 20000f18 20000f20 20000f20     ... ...  ..  .. 
20000f30:	20000f28 20000f28 20000f30 20000f30     (.. (.. 0.. 0.. 
20000f40:	20000f38 20000f38 20000f40 20000f40     8.. 8.. @.. @.. 
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 
20000fd0:	20000fc8 20000fc8 20000fd0 20000fd0     ... ... ... ... 
20000fe0:	20000fd8 20000fd8 20000fe0 20000fe0     ... ... ... ... 
20000ff0:	20000fe8 20000fe8 20000ff0 20000ff0     ... ... ... ... 
20001000:	20000ff8 20000ff8 20001000 20001000     ... ... ... ... 
20001010:	20001008 20001008 20001010 20001010     ... ... ... ... 
20001020:	20001018 20001018 20001020 20001020     ... ...  ..  .. 
20001030:	20001028 20001028 20001030 20001030     (.. (.. 0.. 0.. 
20001040:	20001038 20001038 20001040 20001040     8.. 8.. @.. @.. 
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 

200010c0 <__malloc_sbrk_base>:
200010c0:	ffffffff                                ....

200010c4 <__malloc_trim_threshold>:
200010c4:	00020000                                ....
