
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c49c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c49c  0008c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001360  20000000  0008c4a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001384  20001360  0008d804  00021360  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00021360  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00021389  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b637  00000000  00000000  000213e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000080be  00000000  00000000  0005ca19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c91e  00000000  00000000  00064ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001538  00000000  00000000  000713f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001618  00000000  00000000  0007292d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020e74  00000000  00000000  00073f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027a8b  00000000  00000000  00094db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005fecd  00000000  00000000  000bc844  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000457c  00000000  00000000  0011c714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 5d 57 08 00 5b 57 08 00 5b 57 08 00     . . ]W..[W..[W..
   80010:	5b 57 08 00 5b 57 08 00 5b 57 08 00 00 00 00 00     [W..[W..[W......
	...
   8002c:	5b 57 08 00 5b 57 08 00 00 00 00 00 5b 57 08 00     [W..[W......[W..
   8003c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 5b 57 08 00     [W..[W..[W..[W..
   8004c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 5b 57 08 00     [W..[W..[W..[W..
   8005c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 81 3e 08 00     [W..[W..[W...>..
   8006c:	95 3e 08 00 5b 57 08 00 dd 1a 08 00 5b 57 08 00     .>..[W......[W..
   8007c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 5b 57 08 00     [W..[W..[W..[W..
   8008c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 a5 2e 08 00     [W..[W..[W......
   8009c:	5b 57 08 00 5b 57 08 00 5b 57 08 00 5b 57 08 00     [W..[W..[W..[W..
   800ac:	5b 57 08 00 5b 57 08 00 f9 45 08 00 5b 57 08 00     [W..[W...E..[W..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001360 	.word	0x20001360
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c4a4 	.word	0x0008c4a4

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008c4a4 	.word	0x0008c4a4
   8011c:	20001364 	.word	0x20001364
   80120:	0008c4a4 	.word	0x0008c4a4
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	20001387 	.word	0x20001387

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	200026a4 	.word	0x200026a4
   801bc:	20001380 	.word	0x20001380
   801c0:	000803dd 	.word	0x000803dd

000801c4 <udi_cdc_comm_enable>:
{
   801c4:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   801c6:	2400      	movs	r4, #0
   801c8:	4b12      	ldr	r3, [pc, #72]	; (80214 <udi_cdc_comm_enable+0x50>)
   801ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801cc:	4b12      	ldr	r3, [pc, #72]	; (80218 <udi_cdc_comm_enable+0x54>)
   801ce:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d0:	4b12      	ldr	r3, [pc, #72]	; (8021c <udi_cdc_comm_enable+0x58>)
   801d2:	22a1      	movs	r2, #161	; 0xa1
   801d4:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801d6:	2220      	movs	r2, #32
   801d8:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801da:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801dc:	2201      	movs	r2, #1
   801de:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e0:	2202      	movs	r2, #2
   801e2:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e4:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801e6:	490e      	ldr	r1, [pc, #56]	; (80220 <udi_cdc_comm_enable+0x5c>)
   801e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801ec:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801ee:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f0:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f2:	2308      	movs	r3, #8
   801f4:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801f6:	4620      	mov	r0, r4
   801f8:	4b0a      	ldr	r3, [pc, #40]	; (80224 <udi_cdc_comm_enable+0x60>)
   801fa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fc:	4620      	mov	r0, r4
   801fe:	4b0a      	ldr	r3, [pc, #40]	; (80228 <udi_cdc_comm_enable+0x64>)
   80200:	4798      	blx	r3
   80202:	4602      	mov	r2, r0
   80204:	b120      	cbz	r0, 80210 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
   80206:	4903      	ldr	r1, [pc, #12]	; (80214 <udi_cdc_comm_enable+0x50>)
   80208:	780b      	ldrb	r3, [r1, #0]
   8020a:	3301      	adds	r3, #1
   8020c:	b2db      	uxtb	r3, r3
   8020e:	700b      	strb	r3, [r1, #0]
}
   80210:	4610      	mov	r0, r2
   80212:	bd10      	pop	{r4, pc}
   80214:	20001387 	.word	0x20001387
   80218:	2000179c 	.word	0x2000179c
   8021c:	20001bb4 	.word	0x20001bb4
   80220:	20001380 	.word	0x20001380
   80224:	00081ff5 	.word	0x00081ff5
   80228:	00081f49 	.word	0x00081f49

0008022c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8022c:	4b42      	ldr	r3, [pc, #264]	; (80338 <udi_cdc_tx_send+0x10c>)
   8022e:	781b      	ldrb	r3, [r3, #0]
   80230:	b103      	cbz	r3, 80234 <udi_cdc_tx_send+0x8>
   80232:	4770      	bx	lr
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80238:	4b40      	ldr	r3, [pc, #256]	; (8033c <udi_cdc_tx_send+0x110>)
   8023a:	4798      	blx	r3
   8023c:	2800      	cmp	r0, #0
   8023e:	d03d      	beq.n	802bc <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80240:	4b3f      	ldr	r3, [pc, #252]	; (80340 <udi_cdc_tx_send+0x114>)
   80242:	881c      	ldrh	r4, [r3, #0]
   80244:	4b3f      	ldr	r3, [pc, #252]	; (80344 <udi_cdc_tx_send+0x118>)
   80246:	4798      	blx	r3
   80248:	4284      	cmp	r4, r0
   8024a:	d072      	beq.n	80332 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8024c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80250:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80252:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80256:	2200      	movs	r2, #0
   80258:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x11c>)
   8025a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8025c:	4b3b      	ldr	r3, [pc, #236]	; (8034c <udi_cdc_tx_send+0x120>)
   8025e:	781c      	ldrb	r4, [r3, #0]
   80260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80262:	4b3b      	ldr	r3, [pc, #236]	; (80350 <udi_cdc_tx_send+0x124>)
   80264:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80268:	2b00      	cmp	r3, #0
   8026a:	d02e      	beq.n	802ca <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8026c:	2200      	movs	r2, #0
   8026e:	4b39      	ldr	r3, [pc, #228]	; (80354 <udi_cdc_tx_send+0x128>)
   80270:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80272:	4b39      	ldr	r3, [pc, #228]	; (80358 <udi_cdc_tx_send+0x12c>)
   80274:	781b      	ldrb	r3, [r3, #0]
   80276:	2b00      	cmp	r3, #0
   80278:	d143      	bne.n	80302 <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8027a:	fab4 f384 	clz	r3, r4
   8027e:	095b      	lsrs	r3, r3, #5
   80280:	4a32      	ldr	r2, [pc, #200]	; (8034c <udi_cdc_tx_send+0x120>)
   80282:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80284:	2201      	movs	r2, #1
   80286:	4b2c      	ldr	r3, [pc, #176]	; (80338 <udi_cdc_tx_send+0x10c>)
   80288:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8028a:	b925      	cbnz	r5, 80296 <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   8028c:	4b2e      	ldr	r3, [pc, #184]	; (80348 <udi_cdc_tx_send+0x11c>)
   8028e:	701a      	strb	r2, [r3, #0]
   80290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80294:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80296:	4626      	mov	r6, r4
   80298:	4b2d      	ldr	r3, [pc, #180]	; (80350 <udi_cdc_tx_send+0x124>)
   8029a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   802a2:	bf14      	ite	ne
   802a4:	2501      	movne	r5, #1
   802a6:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a8:	d034      	beq.n	80314 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x110>)
   802ac:	4798      	blx	r3
   802ae:	2800      	cmp	r0, #0
   802b0:	d02b      	beq.n	8030a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802b2:	4b24      	ldr	r3, [pc, #144]	; (80344 <udi_cdc_tx_send+0x118>)
   802b4:	4798      	blx	r3
   802b6:	4b22      	ldr	r3, [pc, #136]	; (80340 <udi_cdc_tx_send+0x114>)
   802b8:	8018      	strh	r0, [r3, #0]
   802ba:	e02e      	b.n	8031a <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802bc:	4b20      	ldr	r3, [pc, #128]	; (80340 <udi_cdc_tx_send+0x114>)
   802be:	881c      	ldrh	r4, [r3, #0]
   802c0:	4b26      	ldr	r3, [pc, #152]	; (8035c <udi_cdc_tx_send+0x130>)
   802c2:	4798      	blx	r3
   802c4:	4284      	cmp	r4, r0
   802c6:	d1c1      	bne.n	8024c <udi_cdc_tx_send+0x20>
   802c8:	e033      	b.n	80332 <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802ca:	4a22      	ldr	r2, [pc, #136]	; (80354 <udi_cdc_tx_send+0x128>)
   802cc:	8813      	ldrh	r3, [r2, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802d2:	4b1a      	ldr	r3, [pc, #104]	; (8033c <udi_cdc_tx_send+0x110>)
   802d4:	4798      	blx	r3
   802d6:	b918      	cbnz	r0, 802e0 <udi_cdc_tx_send+0xb4>
   802d8:	4b1e      	ldr	r3, [pc, #120]	; (80354 <udi_cdc_tx_send+0x128>)
   802da:	881b      	ldrh	r3, [r3, #0]
   802dc:	2b63      	cmp	r3, #99	; 0x63
   802de:	d908      	bls.n	802f2 <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <udi_cdc_tx_send+0x110>)
   802e2:	4798      	blx	r3
   802e4:	2800      	cmp	r0, #0
   802e6:	d0c1      	beq.n	8026c <udi_cdc_tx_send+0x40>
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <udi_cdc_tx_send+0x128>)
   802ea:	881b      	ldrh	r3, [r3, #0]
   802ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802f0:	d2bc      	bcs.n	8026c <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802f2:	b9f5      	cbnz	r5, 80332 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802f4:	2201      	movs	r2, #1
   802f6:	4b14      	ldr	r3, [pc, #80]	; (80348 <udi_cdc_tx_send+0x11c>)
   802f8:	701a      	strb	r2, [r3, #0]
   802fa:	f3bf 8f5f 	dmb	sy
   802fe:	b662      	cpsie	i
   80300:	e017      	b.n	80332 <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80302:	fab4 f484 	clz	r4, r4
   80306:	0964      	lsrs	r4, r4, #5
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8030a:	4b14      	ldr	r3, [pc, #80]	; (8035c <udi_cdc_tx_send+0x130>)
   8030c:	4798      	blx	r3
   8030e:	4b0c      	ldr	r3, [pc, #48]	; (80340 <udi_cdc_tx_send+0x114>)
   80310:	8018      	strh	r0, [r3, #0]
   80312:	e002      	b.n	8031a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80314:	2200      	movs	r2, #0
   80316:	4b0a      	ldr	r3, [pc, #40]	; (80340 <udi_cdc_tx_send+0x114>)
   80318:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   8031c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80320:	4a0f      	ldr	r2, [pc, #60]	; (80360 <udi_cdc_tx_send+0x134>)
   80322:	9200      	str	r2, [sp, #0]
   80324:	4a0f      	ldr	r2, [pc, #60]	; (80364 <udi_cdc_tx_send+0x138>)
   80326:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8032a:	4629      	mov	r1, r5
   8032c:	2085      	movs	r0, #133	; 0x85
   8032e:	4c0e      	ldr	r4, [pc, #56]	; (80368 <udi_cdc_tx_send+0x13c>)
   80330:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80332:	b002      	add	sp, #8
   80334:	bd70      	pop	{r4, r5, r6, pc}
   80336:	bf00      	nop
   80338:	20001bb0 	.word	0x20001bb0
   8033c:	00084dc9 	.word	0x00084dc9
   80340:	20001bac 	.word	0x20001bac
   80344:	00084e21 	.word	0x00084e21
   80348:	20000986 	.word	0x20000986
   8034c:	20001ba8 	.word	0x20001ba8
   80350:	20001ba4 	.word	0x20001ba4
   80354:	2000137c 	.word	0x2000137c
   80358:	200017a0 	.word	0x200017a0
   8035c:	00084e11 	.word	0x00084e11
   80360:	0008036d 	.word	0x0008036d
   80364:	200017a4 	.word	0x200017a4
   80368:	00085085 	.word	0x00085085

0008036c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8036c:	b100      	cbz	r0, 80370 <udi_cdc_data_sent+0x4>
   8036e:	4770      	bx	lr
{
   80370:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <udi_cdc_data_sent+0x24>)
   80374:	781b      	ldrb	r3, [r3, #0]
   80376:	fab3 f383 	clz	r3, r3
   8037a:	095b      	lsrs	r3, r3, #5
   8037c:	4a05      	ldr	r2, [pc, #20]	; (80394 <udi_cdc_data_sent+0x28>)
   8037e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x2c>)
   80384:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <udi_cdc_data_sent+0x30>)
   80388:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <udi_cdc_data_sent+0x34>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	20001ba8 	.word	0x20001ba8
   80394:	20001ba4 	.word	0x20001ba4
   80398:	200017a0 	.word	0x200017a0
   8039c:	20001bb0 	.word	0x20001bb0
   803a0:	0008022d 	.word	0x0008022d

000803a4 <udi_cdc_data_sof_notify>:
{
   803a4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   803a6:	2000      	movs	r0, #0
   803a8:	4b01      	ldr	r3, [pc, #4]	; (803b0 <udi_cdc_data_sof_notify+0xc>)
   803aa:	4798      	blx	r3
   803ac:	bd08      	pop	{r3, pc}
   803ae:	bf00      	nop
   803b0:	0008022d 	.word	0x0008022d

000803b4 <udi_cdc_data_disable>:
{
   803b4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803b6:	4a06      	ldr	r2, [pc, #24]	; (803d0 <udi_cdc_data_disable+0x1c>)
   803b8:	7813      	ldrb	r3, [r2, #0]
   803ba:	3b01      	subs	r3, #1
   803bc:	b2db      	uxtb	r3, r3
   803be:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803c0:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803c2:	4b04      	ldr	r3, [pc, #16]	; (803d4 <udi_cdc_data_disable+0x20>)
   803c4:	4798      	blx	r3
	udi_cdc_data_running = false;
   803c6:	2200      	movs	r2, #0
   803c8:	4b03      	ldr	r3, [pc, #12]	; (803d8 <udi_cdc_data_disable+0x24>)
   803ca:	701a      	strb	r2, [r3, #0]
   803cc:	bd08      	pop	{r3, pc}
   803ce:	bf00      	nop
   803d0:	20001388 	.word	0x20001388
   803d4:	00081f65 	.word	0x00081f65
   803d8:	2000137e 	.word	0x2000137e

000803dc <udi_cdc_line_coding_received>:
{
   803dc:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803de:	4902      	ldr	r1, [pc, #8]	; (803e8 <udi_cdc_line_coding_received+0xc>)
   803e0:	2000      	movs	r0, #0
   803e2:	4b02      	ldr	r3, [pc, #8]	; (803ec <udi_cdc_line_coding_received+0x10>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	20001380 	.word	0x20001380
   803ec:	00081ff5 	.word	0x00081ff5

000803f0 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803f4:	b672      	cpsid	i
   803f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803fa:	2100      	movs	r1, #0
   803fc:	4a0a      	ldr	r2, [pc, #40]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   803fe:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80400:	4a0a      	ldr	r2, [pc, #40]	; (8042c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80402:	8810      	ldrh	r0, [r2, #0]
   80404:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80406:	490a      	ldr	r1, [pc, #40]	; (80430 <udi_cdc_multi_get_nb_received_data+0x40>)
   80408:	7809      	ldrb	r1, [r1, #0]
   8040a:	b2c9      	uxtb	r1, r1
   8040c:	4809      	ldr	r0, [pc, #36]	; (80434 <udi_cdc_multi_get_nb_received_data+0x44>)
   8040e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   80412:	b280      	uxth	r0, r0
   80414:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   80416:	b92b      	cbnz	r3, 80424 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80418:	2201      	movs	r2, #1
   8041a:	4b03      	ldr	r3, [pc, #12]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   8041c:	701a      	strb	r2, [r3, #0]
   8041e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80422:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	20000986 	.word	0x20000986
   8042c:	20001794 	.word	0x20001794
   80430:	20001790 	.word	0x20001790
   80434:	2000178c 	.word	0x2000178c

00080438 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8043a:	4b03      	ldr	r3, [pc, #12]	; (80448 <udi_cdc_multi_is_rx_ready+0x10>)
   8043c:	4798      	blx	r3
}
   8043e:	3000      	adds	r0, #0
   80440:	bf18      	it	ne
   80442:	2001      	movne	r0, #1
   80444:	bd08      	pop	{r3, pc}
   80446:	bf00      	nop
   80448:	000803f1 	.word	0x000803f1

0008044c <udi_cdc_rx_start>:
{
   8044c:	b510      	push	{r4, lr}
   8044e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80450:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80454:	b672      	cpsid	i
   80456:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8045a:	2100      	movs	r1, #0
   8045c:	4a21      	ldr	r2, [pc, #132]	; (804e4 <udi_cdc_rx_start+0x98>)
   8045e:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80460:	4a21      	ldr	r2, [pc, #132]	; (804e8 <udi_cdc_rx_start+0x9c>)
   80462:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80464:	4a21      	ldr	r2, [pc, #132]	; (804ec <udi_cdc_rx_start+0xa0>)
   80466:	7812      	ldrb	r2, [r2, #0]
   80468:	b94a      	cbnz	r2, 8047e <udi_cdc_rx_start+0x32>
   8046a:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8046c:	4a20      	ldr	r2, [pc, #128]	; (804f0 <udi_cdc_rx_start+0xa4>)
   8046e:	8811      	ldrh	r1, [r2, #0]
   80470:	b289      	uxth	r1, r1
   80472:	4a20      	ldr	r2, [pc, #128]	; (804f4 <udi_cdc_rx_start+0xa8>)
   80474:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80478:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047a:	4291      	cmp	r1, r2
   8047c:	d20a      	bcs.n	80494 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   8047e:	2b00      	cmp	r3, #0
   80480:	d12d      	bne.n	804de <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80482:	2201      	movs	r2, #1
   80484:	4b17      	ldr	r3, [pc, #92]	; (804e4 <udi_cdc_rx_start+0x98>)
   80486:	701a      	strb	r2, [r3, #0]
   80488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8048c:	b662      	cpsie	i
		return false;
   8048e:	2000      	movs	r0, #0
}
   80490:	b002      	add	sp, #8
   80492:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80494:	2100      	movs	r1, #0
   80496:	4a16      	ldr	r2, [pc, #88]	; (804f0 <udi_cdc_rx_start+0xa4>)
   80498:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8049a:	fab4 f284 	clz	r2, r4
   8049e:	0952      	lsrs	r2, r2, #5
   804a0:	4911      	ldr	r1, [pc, #68]	; (804e8 <udi_cdc_rx_start+0x9c>)
   804a2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   804a4:	2101      	movs	r1, #1
   804a6:	4a11      	ldr	r2, [pc, #68]	; (804ec <udi_cdc_rx_start+0xa0>)
   804a8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   804aa:	b923      	cbnz	r3, 804b6 <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_cdc_rx_start+0x98>)
   804ae:	7019      	strb	r1, [r3, #0]
   804b0:	f3bf 8f5f 	dmb	sy
   804b4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   804b6:	2000      	movs	r0, #0
   804b8:	4b0f      	ldr	r3, [pc, #60]	; (804f8 <udi_cdc_rx_start+0xac>)
   804ba:	4798      	blx	r3
   804bc:	b958      	cbnz	r0, 804d6 <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804be:	4b0f      	ldr	r3, [pc, #60]	; (804fc <udi_cdc_rx_start+0xb0>)
   804c0:	9300      	str	r3, [sp, #0]
   804c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804c6:	4a0e      	ldr	r2, [pc, #56]	; (80500 <udi_cdc_rx_start+0xb4>)
   804c8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804cc:	2101      	movs	r1, #1
   804ce:	2006      	movs	r0, #6
   804d0:	4c0c      	ldr	r4, [pc, #48]	; (80504 <udi_cdc_rx_start+0xb8>)
   804d2:	47a0      	blx	r4
   804d4:	e7dc      	b.n	80490 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804d6:	2000      	movs	r0, #0
   804d8:	4b0b      	ldr	r3, [pc, #44]	; (80508 <udi_cdc_rx_start+0xbc>)
   804da:	4798      	blx	r3
   804dc:	e7ef      	b.n	804be <udi_cdc_rx_start+0x72>
		return false;
   804de:	2000      	movs	r0, #0
   804e0:	e7d6      	b.n	80490 <udi_cdc_rx_start+0x44>
   804e2:	bf00      	nop
   804e4:	20000986 	.word	0x20000986
   804e8:	20001790 	.word	0x20001790
   804ec:	20001798 	.word	0x20001798
   804f0:	20001794 	.word	0x20001794
   804f4:	2000178c 	.word	0x2000178c
   804f8:	00080439 	.word	0x00080439
   804fc:	000805a1 	.word	0x000805a1
   80500:	2000138c 	.word	0x2000138c
   80504:	00085085 	.word	0x00085085
   80508:	00081f7d 	.word	0x00081f7d

0008050c <udi_cdc_data_enable>:
{
   8050c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   8050e:	2400      	movs	r4, #0
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <udi_cdc_data_enable+0x60>)
   80512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80514:	4b16      	ldr	r3, [pc, #88]	; (80570 <udi_cdc_data_enable+0x64>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <udi_cdc_data_enable+0x68>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <udi_cdc_data_enable+0x6c>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <udi_cdc_data_enable+0x70>)
   80522:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80524:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   80526:	4b16      	ldr	r3, [pc, #88]	; (80580 <udi_cdc_data_enable+0x74>)
   80528:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8052a:	4620      	mov	r0, r4
   8052c:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x78>)
   8052e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80530:	4b15      	ldr	r3, [pc, #84]	; (80588 <udi_cdc_data_enable+0x7c>)
   80532:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80534:	4b15      	ldr	r3, [pc, #84]	; (8058c <udi_cdc_data_enable+0x80>)
   80536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <udi_cdc_data_enable+0x84>)
   8053a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8053c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8053e:	4b15      	ldr	r3, [pc, #84]	; (80594 <udi_cdc_data_enable+0x88>)
   80540:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80542:	4620      	mov	r0, r4
   80544:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x8c>)
   80546:	4798      	blx	r3
   80548:	4601      	mov	r1, r0
   8054a:	b140      	cbz	r0, 8055e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   8054c:	4a07      	ldr	r2, [pc, #28]	; (8056c <udi_cdc_data_enable+0x60>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3301      	adds	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	b2db      	uxtb	r3, r3
   8055a:	2b01      	cmp	r3, #1
   8055c:	d001      	beq.n	80562 <udi_cdc_data_enable+0x56>
}
   8055e:	4608      	mov	r0, r1
   80560:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80562:	2201      	movs	r2, #1
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <udi_cdc_data_enable+0x90>)
   80566:	701a      	strb	r2, [r3, #0]
   80568:	e7f9      	b.n	8055e <udi_cdc_data_enable+0x52>
   8056a:	bf00      	nop
   8056c:	20001388 	.word	0x20001388
   80570:	20001bb0 	.word	0x20001bb0
   80574:	200017a0 	.word	0x200017a0
   80578:	20001ba8 	.word	0x20001ba8
   8057c:	20001ba4 	.word	0x20001ba4
   80580:	20001bac 	.word	0x20001bac
   80584:	0008022d 	.word	0x0008022d
   80588:	20001798 	.word	0x20001798
   8058c:	20001790 	.word	0x20001790
   80590:	2000178c 	.word	0x2000178c
   80594:	20001794 	.word	0x20001794
   80598:	0008044d 	.word	0x0008044d
   8059c:	2000137e 	.word	0x2000137e

000805a0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   805a0:	b9f0      	cbnz	r0, 805e0 <udi_cdc_data_received+0x40>
{
   805a2:	b510      	push	{r4, lr}
   805a4:	b082      	sub	sp, #8
   805a6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805a8:	4b0e      	ldr	r3, [pc, #56]	; (805e4 <udi_cdc_data_received+0x44>)
   805aa:	781c      	ldrb	r4, [r3, #0]
   805ac:	fab4 f484 	clz	r4, r4
   805b0:	0964      	lsrs	r4, r4, #5
	if (!n) {
   805b2:	b151      	cbz	r1, 805ca <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805b4:	b289      	uxth	r1, r1
   805b6:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_data_received+0x48>)
   805b8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805bc:	2000      	movs	r0, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <udi_cdc_data_received+0x4c>)
   805c0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <udi_cdc_data_received+0x50>)
   805c4:	4798      	blx	r3
}
   805c6:	b002      	add	sp, #8
   805c8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ca:	4b0a      	ldr	r3, [pc, #40]	; (805f4 <udi_cdc_data_received+0x54>)
   805cc:	9300      	str	r3, [sp, #0]
   805ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x58>)
   805d4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805d8:	2101      	movs	r1, #1
   805da:	4c08      	ldr	r4, [pc, #32]	; (805fc <udi_cdc_data_received+0x5c>)
   805dc:	47a0      	blx	r4
		return;
   805de:	e7f2      	b.n	805c6 <udi_cdc_data_received+0x26>
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	20001790 	.word	0x20001790
   805e8:	2000178c 	.word	0x2000178c
   805ec:	20001798 	.word	0x20001798
   805f0:	0008044d 	.word	0x0008044d
   805f4:	000805a1 	.word	0x000805a1
   805f8:	2000138c 	.word	0x2000138c
   805fc:	00085085 	.word	0x00085085

00080600 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   80600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80604:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   80606:	4688      	mov	r8, r1
	cpu_irq_disable();
   80608:	4f20      	ldr	r7, [pc, #128]	; (8068c <udi_cdc_multi_read_buf+0x8c>)
   8060a:	f04f 0b00 	mov.w	fp, #0
   8060e:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80610:	4e1f      	ldr	r6, [pc, #124]	; (80690 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80612:	f8df 9094 	ldr.w	r9, [pc, #148]	; 806a8 <udi_cdc_multi_read_buf+0xa8>
   80616:	e019      	b.n	8064c <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80618:	4a1e      	ldr	r2, [pc, #120]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   8061a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8061e:	b2a4      	uxth	r4, r4
   80620:	1a64      	subs	r4, r4, r1
   80622:	42ac      	cmp	r4, r5
   80624:	bf28      	it	cs
   80626:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80628:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   8062c:	4622      	mov	r2, r4
   8062e:	4b1a      	ldr	r3, [pc, #104]	; (80698 <udi_cdc_multi_read_buf+0x98>)
   80630:	4419      	add	r1, r3
   80632:	4640      	mov	r0, r8
   80634:	4b19      	ldr	r3, [pc, #100]	; (8069c <udi_cdc_multi_read_buf+0x9c>)
   80636:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80638:	8833      	ldrh	r3, [r6, #0]
   8063a:	4423      	add	r3, r4
   8063c:	b29b      	uxth	r3, r3
   8063e:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80640:	44a0      	add	r8, r4
	size -= copy_nb;
   80642:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80644:	4658      	mov	r0, fp
   80646:	4b16      	ldr	r3, [pc, #88]	; (806a0 <udi_cdc_multi_read_buf+0xa0>)
   80648:	4798      	blx	r3

	if (size) {
   8064a:	b1dd      	cbz	r5, 80684 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8064c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80650:	b672      	cpsid	i
   80652:	f3bf 8f5f 	dmb	sy
   80656:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8065a:	8831      	ldrh	r1, [r6, #0]
   8065c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8065e:	f899 3000 	ldrb.w	r3, [r9]
   80662:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80664:	4a0b      	ldr	r2, [pc, #44]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   80666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8066a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8066c:	b920      	cbnz	r0, 80678 <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   8066e:	2001      	movs	r0, #1
   80670:	7038      	strb	r0, [r7, #0]
   80672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80676:	b662      	cpsie	i
	while (again) {
   80678:	4291      	cmp	r1, r2
   8067a:	d3cd      	bcc.n	80618 <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   8067c:	4b09      	ldr	r3, [pc, #36]	; (806a4 <udi_cdc_multi_read_buf+0xa4>)
   8067e:	781b      	ldrb	r3, [r3, #0]
   80680:	2b00      	cmp	r3, #0
   80682:	d1e3      	bne.n	8064c <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80684:	4628      	mov	r0, r5
   80686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8068a:	bf00      	nop
   8068c:	20000986 	.word	0x20000986
   80690:	20001794 	.word	0x20001794
   80694:	2000178c 	.word	0x2000178c
   80698:	2000138c 	.word	0x2000138c
   8069c:	00085ffd 	.word	0x00085ffd
   806a0:	0008044d 	.word	0x0008044d
   806a4:	2000137e 	.word	0x2000137e
   806a8:	20001790 	.word	0x20001790

000806ac <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   806b0:	b672      	cpsid	i
   806b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   806b6:	2100      	movs	r1, #0
   806b8:	4b13      	ldr	r3, [pc, #76]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806ba:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806bc:	4b13      	ldr	r3, [pc, #76]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806c2:	4913      	ldr	r1, [pc, #76]	; (80710 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806cc:	d009      	beq.n	806e2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806ce:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806d2:	b92a      	cbnz	r2, 806e0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806d4:	2201      	movs	r2, #1
   806d6:	4b0c      	ldr	r3, [pc, #48]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806d8:	701a      	strb	r2, [r3, #0]
   806da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806de:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806e0:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806e2:	490c      	ldr	r1, [pc, #48]	; (80714 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806e4:	7809      	ldrb	r1, [r1, #0]
   806e6:	2900      	cmp	r1, #0
   806e8:	d1f1      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ea:	490b      	ldr	r1, [pc, #44]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806ec:	7809      	ldrb	r1, [r1, #0]
   806ee:	2900      	cmp	r1, #0
   806f0:	d1ed      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806f2:	2001      	movs	r0, #1
   806f4:	4908      	ldr	r1, [pc, #32]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806f6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806f8:	fab3 f383 	clz	r3, r3
   806fc:	095b      	lsrs	r3, r3, #5
   806fe:	4903      	ldr	r1, [pc, #12]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80700:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80702:	2000      	movs	r0, #0
   80704:	e7e3      	b.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
   80706:	bf00      	nop
   80708:	20000986 	.word	0x20000986
   8070c:	20001ba8 	.word	0x20001ba8
   80710:	20001ba4 	.word	0x20001ba4
   80714:	20001bb0 	.word	0x20001bb0
   80718:	200017a0 	.word	0x200017a0

0008071c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   8071c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <udi_cdc_multi_is_tx_ready+0x10>)
   80720:	4798      	blx	r3
}
   80722:	3000      	adds	r0, #0
   80724:	bf18      	it	ne
   80726:	2001      	movne	r0, #1
   80728:	bd08      	pop	{r3, pc}
   8072a:	bf00      	nop
   8072c:	000806ad 	.word	0x000806ad

00080730 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80736:	4b1b      	ldr	r3, [pc, #108]	; (807a4 <udi_cdc_multi_putc+0x74>)
   80738:	799d      	ldrb	r5, [r3, #6]
   8073a:	2d09      	cmp	r5, #9
   8073c:	bf14      	ite	ne
   8073e:	2500      	movne	r5, #0
   80740:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80742:	4e19      	ldr	r6, [pc, #100]	; (807a8 <udi_cdc_multi_putc+0x78>)
	cpu_irq_disable();
   80744:	4f19      	ldr	r7, [pc, #100]	; (807ac <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80746:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807bc <udi_cdc_multi_putc+0x8c>
   8074a:	e01d      	b.n	80788 <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8074c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80750:	b672      	cpsid	i
   80752:	f3bf 8f5f 	dmb	sy
   80756:	2300      	movs	r3, #0
   80758:	703b      	strb	r3, [r7, #0]
   8075a:	f898 3000 	ldrb.w	r3, [r8]
   8075e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80760:	4913      	ldr	r1, [pc, #76]	; (807b0 <udi_cdc_multi_putc+0x80>)
   80762:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   80766:	f100 0e01 	add.w	lr, r0, #1
   8076a:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
   8076e:	4911      	ldr	r1, [pc, #68]	; (807b4 <udi_cdc_multi_putc+0x84>)
   80770:	eb01 2343 	add.w	r3, r1, r3, lsl #9
   80774:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80776:	b922      	cbnz	r2, 80782 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   80778:	2301      	movs	r3, #1
   8077a:	703b      	strb	r3, [r7, #0]
   8077c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80780:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80782:	b15d      	cbz	r5, 8079c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80784:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80786:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80788:	2000      	movs	r0, #0
   8078a:	47b0      	blx	r6
   8078c:	2800      	cmp	r0, #0
   8078e:	d1dd      	bne.n	8074c <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80790:	4b09      	ldr	r3, [pc, #36]	; (807b8 <udi_cdc_multi_putc+0x88>)
   80792:	781b      	ldrb	r3, [r3, #0]
   80794:	2b00      	cmp	r3, #0
   80796:	d1f7      	bne.n	80788 <udi_cdc_multi_putc+0x58>
   80798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
   8079c:	2001      	movs	r0, #1
}
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a2:	bf00      	nop
   807a4:	20001380 	.word	0x20001380
   807a8:	0008071d 	.word	0x0008071d
   807ac:	20000986 	.word	0x20000986
   807b0:	20001ba4 	.word	0x20001ba4
   807b4:	200017a4 	.word	0x200017a4
   807b8:	2000137e 	.word	0x2000137e
   807bc:	20001ba8 	.word	0x20001ba8

000807c0 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   807c0:	2300      	movs	r3, #0
   807c2:	6043      	str	r3, [r0, #4]
   807c4:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   807c6:	6083      	str	r3, [r0, #8]
   807c8:	4770      	bx	lr

000807ca <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   807ca:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   807cc:	6804      	ldr	r4, [r0, #0]
    newhead++;
   807ce:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807d0:	2cc8      	cmp	r4, #200	; 0xc8
   807d2:	bf28      	it	cs
   807d4:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   807d6:	6843      	ldr	r3, [r0, #4]
   807d8:	42a3      	cmp	r3, r4
   807da:	d105      	bne.n	807e8 <add_to_circ_buf+0x1e>
    {
        if (!block)
   807dc:	2a00      	cmp	r2, #0
   807de:	d1fa      	bne.n	807d6 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   807e0:	6883      	ldr	r3, [r0, #8]
   807e2:	3301      	adds	r3, #1
   807e4:	6083      	str	r3, [r0, #8]
            return;
   807e6:	e003      	b.n	807f0 <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   807e8:	6803      	ldr	r3, [r0, #0]
   807ea:	4403      	add	r3, r0
   807ec:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   807ee:	6004      	str	r4, [r0, #0]
}
   807f0:	bc10      	pop	{r4}
   807f2:	4770      	bx	lr

000807f4 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   807f4:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   807f6:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   807f8:	6801      	ldr	r1, [r0, #0]
   807fa:	428b      	cmp	r3, r1
   807fc:	d007      	beq.n	8080e <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   807fe:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   80800:	29c8      	cmp	r1, #200	; 0xc8
   80802:	bf28      	it	cs
   80804:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   80806:	4403      	add	r3, r0
   80808:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   8080a:	6051      	str	r1, [r2, #4]

    return retval;
   8080c:	4770      	bx	lr
        return SERIAL_ERR;
   8080e:	20ff      	movs	r0, #255	; 0xff
}
   80810:	4770      	bx	lr

00080812 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   80812:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   80814:	6840      	ldr	r0, [r0, #4]
}
   80816:	1a10      	subs	r0, r2, r0
   80818:	bf18      	it	ne
   8081a:	2001      	movne	r0, #1
   8081c:	4770      	bx	lr

0008081e <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   8081e:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   80820:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   80822:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   80824:	bf48      	it	mi
   80826:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   80828:	4770      	bx	lr
	...

0008082c <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   8082c:	b538      	push	{r3, r4, r5, lr}
   8082e:	4605      	mov	r5, r0
	spi_enable_clock(SPI);
   80830:	4c18      	ldr	r4, [pc, #96]	; (80894 <fpga_program_spi_setup1+0x68>)
   80832:	4620      	mov	r0, r4
   80834:	4b18      	ldr	r3, [pc, #96]	; (80898 <fpga_program_spi_setup1+0x6c>)
   80836:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80838:	2380      	movs	r3, #128	; 0x80
   8083a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8083c:	6863      	ldr	r3, [r4, #4]
   8083e:	f043 0301 	orr.w	r3, r3, #1
   80842:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80844:	6863      	ldr	r3, [r4, #4]
   80846:	f043 0310 	orr.w	r3, r3, #16
   8084a:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8084c:	6863      	ldr	r3, [r4, #4]
   8084e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80852:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80854:	2200      	movs	r2, #0
   80856:	4611      	mov	r1, r2
   80858:	4620      	mov	r0, r4
   8085a:	4b10      	ldr	r3, [pc, #64]	; (8089c <fpga_program_spi_setup1+0x70>)
   8085c:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8085e:	2201      	movs	r2, #1
   80860:	2100      	movs	r1, #0
   80862:	4620      	mov	r0, r4
   80864:	4b0e      	ldr	r3, [pc, #56]	; (808a0 <fpga_program_spi_setup1+0x74>)
   80866:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80868:	490e      	ldr	r1, [pc, #56]	; (808a4 <fpga_program_spi_setup1+0x78>)
   8086a:	4628      	mov	r0, r5
   8086c:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <fpga_program_spi_setup1+0x7c>)
   8086e:	4798      	blx	r3
   80870:	b2c2      	uxtb	r2, r0
   80872:	2100      	movs	r1, #0
   80874:	4620      	mov	r0, r4
   80876:	4b0d      	ldr	r3, [pc, #52]	; (808ac <fpga_program_spi_setup1+0x80>)
   80878:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8087a:	2301      	movs	r3, #1
   8087c:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8087e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80882:	200e      	movs	r0, #14
   80884:	4c0a      	ldr	r4, [pc, #40]	; (808b0 <fpga_program_spi_setup1+0x84>)
   80886:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80888:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8088c:	200f      	movs	r0, #15
   8088e:	47a0      	blx	r4
   80890:	bd38      	pop	{r3, r4, r5, pc}
   80892:	bf00      	nop
   80894:	40008000 	.word	0x40008000
   80898:	000840a9 	.word	0x000840a9
   8089c:	0008412b 	.word	0x0008412b
   808a0:	00084149 	.word	0x00084149
   808a4:	05b8d800 	.word	0x05b8d800
   808a8:	00084167 	.word	0x00084167
   808ac:	0008417d 	.word	0x0008417d
   808b0:	00083cc5 	.word	0x00083cc5

000808b4 <fpga_program_spi_sendbyte>:

}

void fpga_program_spi_sendbyte(uint8_t databyte)
{
   808b4:	b510      	push	{r4, lr}
	spi_write(SPI, databyte, 0, 0);
   808b6:	2300      	movs	r3, #0
   808b8:	461a      	mov	r2, r3
   808ba:	4601      	mov	r1, r0
   808bc:	4801      	ldr	r0, [pc, #4]	; (808c4 <fpga_program_spi_sendbyte+0x10>)
   808be:	4c02      	ldr	r4, [pc, #8]	; (808c8 <fpga_program_spi_sendbyte+0x14>)
   808c0:	47a0      	blx	r4
   808c2:	bd10      	pop	{r4, pc}
   808c4:	40008000 	.word	0x40008000
   808c8:	000840f7 	.word	0x000840f7

000808cc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   808cc:	b538      	push	{r3, r4, r5, lr}
   808ce:	4605      	mov	r5, r0
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   808d0:	2008      	movs	r0, #8
   808d2:	4b19      	ldr	r3, [pc, #100]	; (80938 <fpga_program_setup1+0x6c>)
   808d4:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   808d6:	4c19      	ldr	r4, [pc, #100]	; (8093c <fpga_program_setup1+0x70>)
   808d8:	4620      	mov	r0, r4
   808da:	4b19      	ldr	r3, [pc, #100]	; (80940 <fpga_program_setup1+0x74>)
   808dc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   808de:	2380      	movs	r3, #128	; 0x80
   808e0:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   808e2:	6863      	ldr	r3, [r4, #4]
   808e4:	f043 0301 	orr.w	r3, r3, #1
   808e8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   808ea:	6863      	ldr	r3, [r4, #4]
   808ec:	f043 0310 	orr.w	r3, r3, #16
   808f0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   808f2:	6863      	ldr	r3, [r4, #4]
   808f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   808f8:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   808fa:	2200      	movs	r2, #0
   808fc:	4611      	mov	r1, r2
   808fe:	4620      	mov	r0, r4
   80900:	4b10      	ldr	r3, [pc, #64]	; (80944 <fpga_program_setup1+0x78>)
   80902:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80904:	2201      	movs	r2, #1
   80906:	2100      	movs	r1, #0
   80908:	4620      	mov	r0, r4
   8090a:	4b0f      	ldr	r3, [pc, #60]	; (80948 <fpga_program_setup1+0x7c>)
   8090c:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   8090e:	490f      	ldr	r1, [pc, #60]	; (8094c <fpga_program_setup1+0x80>)
   80910:	4628      	mov	r0, r5
   80912:	4b0f      	ldr	r3, [pc, #60]	; (80950 <fpga_program_setup1+0x84>)
   80914:	4798      	blx	r3
   80916:	b2c2      	uxtb	r2, r0
   80918:	2100      	movs	r1, #0
   8091a:	4620      	mov	r0, r4
   8091c:	4b0d      	ldr	r3, [pc, #52]	; (80954 <fpga_program_setup1+0x88>)
   8091e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80920:	2301      	movs	r3, #1
   80922:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80924:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80928:	200e      	movs	r0, #14
   8092a:	4c0b      	ldr	r4, [pc, #44]	; (80958 <fpga_program_setup1+0x8c>)
   8092c:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8092e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80932:	200f      	movs	r0, #15
   80934:	47a0      	blx	r4
   80936:	bd38      	pop	{r3, r4, r5, pc}
   80938:	00083ca9 	.word	0x00083ca9
   8093c:	40008000 	.word	0x40008000
   80940:	000840a9 	.word	0x000840a9
   80944:	0008412b 	.word	0x0008412b
   80948:	00084149 	.word	0x00084149
   8094c:	05b8d800 	.word	0x05b8d800
   80950:	00084167 	.word	0x00084167
   80954:	0008417d 	.word	0x0008417d
   80958:	00083cc5 	.word	0x00083cc5

0008095c <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   8095c:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8095e:	2008      	movs	r0, #8
   80960:	4b01      	ldr	r3, [pc, #4]	; (80968 <fpga_program_setup2+0xc>)
   80962:	4798      	blx	r3
   80964:	bd08      	pop	{r3, pc}
   80966:	bf00      	nop
   80968:	00083c8f 	.word	0x00083c8f

0008096c <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   8096c:	b510      	push	{r4, lr}
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8096e:	2300      	movs	r3, #0
   80970:	461a      	mov	r2, r3
   80972:	4601      	mov	r1, r0
   80974:	4801      	ldr	r0, [pc, #4]	; (8097c <fpga_program_sendbyte+0x10>)
   80976:	4c02      	ldr	r4, [pc, #8]	; (80980 <fpga_program_sendbyte+0x14>)
   80978:	47a0      	blx	r4
   8097a:	bd10      	pop	{r4, pc}
   8097c:	40008000 	.word	0x40008000
   80980:	000840f7 	.word	0x000840f7

00080984 <ISPProtocol_ProgramMemory>:
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   80984:	4b91      	ldr	r3, [pc, #580]	; (80bcc <ISPProtocol_ProgramMemory+0x248>)
   80986:	899b      	ldrh	r3, [r3, #12]
   80988:	2b09      	cmp	r3, #9
   8098a:	d000      	beq.n	8098e <ISPProtocol_ProgramMemory+0xa>
   8098c:	4770      	bx	lr
{
   8098e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80992:	b08d      	sub	sp, #52	; 0x34
   80994:	4602      	mov	r2, r0
   80996:	460c      	mov	r4, r1
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   80998:	4b8c      	ldr	r3, [pc, #560]	; (80bcc <ISPProtocol_ProgramMemory+0x248>)
   8099a:	689d      	ldr	r5, [r3, #8]
   8099c:	ab09      	add	r3, sp, #36	; 0x24
   8099e:	6828      	ldr	r0, [r5, #0]
   809a0:	6869      	ldr	r1, [r5, #4]
   809a2:	c303      	stmia	r3!, {r0, r1}
   809a4:	8929      	ldrh	r1, [r5, #8]
   809a6:	8019      	strh	r1, [r3, #0]

	if (Write_Memory_Params.BytesToWrite > 256)
   809a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   809ac:	9303      	str	r3, [sp, #12]
   809ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   809b2:	d909      	bls.n	809c8 <ISPProtocol_ProgramMemory+0x44>
	{
		avrisp_status_payload[0] = V2Command;
   809b4:	4b86      	ldr	r3, [pc, #536]	; (80bd0 <ISPProtocol_ProgramMemory+0x24c>)
   809b6:	701a      	strb	r2, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   809b8:	22c0      	movs	r2, #192	; 0xc0
   809ba:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   809bc:	2202      	movs	r2, #2
   809be:	4b85      	ldr	r3, [pc, #532]	; (80bd4 <ISPProtocol_ProgramMemory+0x250>)
   809c0:	801a      	strh	r2, [r3, #0]
	////printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   809c2:	b00d      	add	sp, #52	; 0x34
   809c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   809c8:	2a13      	cmp	r2, #19
   809ca:	bf0c      	ite	eq
   809cc:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   809d0:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   809d4:	9304      	str	r3, [sp, #16]
   809d6:	9405      	str	r4, [sp, #20]
   809d8:	4615      	mov	r5, r2
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   809da:	4b7f      	ldr	r3, [pc, #508]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   809dc:	681b      	ldr	r3, [r3, #0]
   809de:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   809e0:	9b03      	ldr	r3, [sp, #12]
   809e2:	2b00      	cmp	r3, #0
   809e4:	d03e      	beq.n	80a64 <ISPProtocol_ProgramMemory+0xe0>
   809e6:	3b01      	subs	r3, #1
   809e8:	b29b      	uxth	r3, r3
   809ea:	3301      	adds	r3, #1
   809ec:	18e3      	adds	r3, r4, r3
   809ee:	9306      	str	r3, [sp, #24]
   809f0:	4627      	mov	r7, r4
   809f2:	2300      	movs	r3, #0
   809f4:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   809f6:	46ab      	mov	fp, r5
   809f8:	e092      	b.n	80b20 <ISPProtocol_ProgramMemory+0x19c>
			ISPTarget_LoadExtendedAddress();
   809fa:	4b78      	ldr	r3, [pc, #480]	; (80bdc <ISPProtocol_ProgramMemory+0x258>)
   809fc:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   809fe:	4b78      	ldr	r3, [pc, #480]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80a00:	f04f 0200 	mov.w	r2, #0
   80a04:	701a      	strb	r2, [r3, #0]
   80a06:	e099      	b.n	80b3c <ISPProtocol_ProgramMemory+0x1b8>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   80a08:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a0c:	f043 0308 	orr.w	r3, r3, #8
   80a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a14:	4b70      	ldr	r3, [pc, #448]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80a16:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a18:	f019 0f01 	tst.w	r9, #1
   80a1c:	f000 80c6 	beq.w	80bac <ISPProtocol_ProgramMemory+0x228>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a20:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   80a22:	4a6d      	ldr	r2, [pc, #436]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80a24:	6813      	ldr	r3, [r2, #0]
   80a26:	3301      	adds	r3, #1
   80a28:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a2a:	f1bb 0f13 	cmp.w	fp, #19
   80a2e:	d174      	bne.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80a30:	b29b      	uxth	r3, r3
   80a32:	2b00      	cmp	r3, #0
   80a34:	d171      	bne.n	80b1a <ISPProtocol_ProgramMemory+0x196>
			  MustLoadExtendedAddress = true;
   80a36:	2301      	movs	r3, #1
   80a38:	4a69      	ldr	r2, [pc, #420]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80a3a:	7013      	strb	r3, [r2, #0]
   80a3c:	e06d      	b.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80a3e:	9303      	str	r3, [sp, #12]
   80a40:	e056      	b.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a42:	9303      	str	r3, [sp, #12]
   80a44:	e063      	b.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
   80a46:	465d      	mov	r5, fp
   80a48:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80a4a:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   80a4e:	fa4f f488 	sxtb.w	r4, r8
   80a52:	2c00      	cmp	r4, #0
   80a54:	db0a      	blt.n	80a6c <ISPProtocol_ProgramMemory+0xe8>
	avrisp_status_payload[0] = V2Command;
   80a56:	4a5e      	ldr	r2, [pc, #376]	; (80bd0 <ISPProtocol_ProgramMemory+0x24c>)
   80a58:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   80a5a:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80a5c:	2202      	movs	r2, #2
   80a5e:	4b5d      	ldr	r3, [pc, #372]	; (80bd4 <ISPProtocol_ProgramMemory+0x250>)
   80a60:	801a      	strh	r2, [r3, #0]
   80a62:	e7ae      	b.n	809c2 <ISPProtocol_ProgramMemory+0x3e>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80a64:	2300      	movs	r3, #0
   80a66:	e7f0      	b.n	80a4a <ISPProtocol_ProgramMemory+0xc6>
   80a68:	465d      	mov	r5, fp
   80a6a:	e7ee      	b.n	80a4a <ISPProtocol_ProgramMemory+0xc6>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   80a6c:	4f5d      	ldr	r7, [pc, #372]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80a6e:	2300      	movs	r3, #0
   80a70:	461a      	mov	r2, r3
   80a72:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80a76:	4638      	mov	r0, r7
   80a78:	4e5b      	ldr	r6, [pc, #364]	; (80be8 <ISPProtocol_ProgramMemory+0x264>)
   80a7a:	47b0      	blx	r6
   80a7c:	2300      	movs	r3, #0
   80a7e:	461a      	mov	r2, r3
   80a80:	9907      	ldr	r1, [sp, #28]
   80a82:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80a86:	4638      	mov	r0, r7
   80a88:	47b0      	blx	r6
   80a8a:	2300      	movs	r3, #0
   80a8c:	461a      	mov	r2, r3
   80a8e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80a92:	4638      	mov	r0, r7
   80a94:	47b0      	blx	r6
   80a96:	2300      	movs	r3, #0
   80a98:	461a      	mov	r2, r3
   80a9a:	4619      	mov	r1, r3
   80a9c:	4638      	mov	r0, r7
   80a9e:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80aa0:	f018 0f20 	tst.w	r8, #32
   80aa4:	d007      	beq.n	80ab6 <ISPProtocol_ProgramMemory+0x132>
   80aa6:	9b03      	ldr	r3, [sp, #12]
   80aa8:	b92b      	cbnz	r3, 80ab6 <ISPProtocol_ProgramMemory+0x132>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   80aaa:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   80aae:	f043 0310 	orr.w	r3, r3, #16
   80ab2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80ab6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80aba:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80abe:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80ac2:	9200      	str	r2, [sp, #0]
   80ac4:	9a04      	ldr	r2, [sp, #16]
   80ac6:	9903      	ldr	r1, [sp, #12]
   80ac8:	4c48      	ldr	r4, [pc, #288]	; (80bec <ISPProtocol_ProgramMemory+0x268>)
   80aca:	47a0      	blx	r4
   80acc:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80ace:	2d13      	cmp	r5, #19
   80ad0:	d1c1      	bne.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
   80ad2:	4a41      	ldr	r2, [pc, #260]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80ad4:	8812      	ldrh	r2, [r2, #0]
   80ad6:	2a00      	cmp	r2, #0
   80ad8:	d1bd      	bne.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
		  MustLoadExtendedAddress = true;
   80ada:	2101      	movs	r1, #1
   80adc:	4a40      	ldr	r2, [pc, #256]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80ade:	7011      	strb	r1, [r2, #0]
   80ae0:	e7b9      	b.n	80a56 <ISPProtocol_ProgramMemory+0xd2>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80ae2:	f019 0f01 	tst.w	r9, #1
   80ae6:	d064      	beq.n	80bb2 <ISPProtocol_ProgramMemory+0x22e>
   80ae8:	e011      	b.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
   80aea:	f019 0f01 	tst.w	r9, #1
   80aee:	d10e      	bne.n	80b0e <ISPProtocol_ProgramMemory+0x18a>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80af0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80af4:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80af8:	9200      	str	r2, [sp, #0]
   80afa:	9a04      	ldr	r2, [sp, #16]
   80afc:	9903      	ldr	r1, [sp, #12]
   80afe:	4648      	mov	r0, r9
   80b00:	4c3a      	ldr	r4, [pc, #232]	; (80bec <ISPProtocol_ProgramMemory+0x268>)
   80b02:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   80b04:	4603      	mov	r3, r0
   80b06:	2800      	cmp	r0, #0
   80b08:	d1ae      	bne.n	80a68 <ISPProtocol_ProgramMemory+0xe4>
			PollAddress = 0;
   80b0a:	2300      	movs	r3, #0
   80b0c:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80b0e:	f018 0f01 	tst.w	r8, #1
   80b12:	d186      	bne.n	80a22 <ISPProtocol_ProgramMemory+0x9e>
   80b14:	f1bb 0f15 	cmp.w	fp, #21
   80b18:	d053      	beq.n	80bc2 <ISPProtocol_ProgramMemory+0x23e>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80b1a:	9b06      	ldr	r3, [sp, #24]
   80b1c:	429f      	cmp	r7, r3
   80b1e:	d092      	beq.n	80a46 <ISPProtocol_ProgramMemory+0xc2>
   80b20:	9b05      	ldr	r3, [sp, #20]
   80b22:	eba7 0803 	sub.w	r8, r7, r3
   80b26:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80b2a:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80b2e:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80b32:	4b2b      	ldr	r3, [pc, #172]	; (80be0 <ISPProtocol_ProgramMemory+0x25c>)
   80b34:	781b      	ldrb	r3, [r3, #0]
   80b36:	2b00      	cmp	r3, #0
   80b38:	f47f af5f 	bne.w	809fa <ISPProtocol_ProgramMemory+0x76>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80b3c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   80b40:	2300      	movs	r3, #0
   80b42:	461a      	mov	r2, r3
   80b44:	4651      	mov	r1, sl
   80b46:	4827      	ldr	r0, [pc, #156]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b48:	4c27      	ldr	r4, [pc, #156]	; (80be8 <ISPProtocol_ProgramMemory+0x264>)
   80b4a:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b4c:	4d22      	ldr	r5, [pc, #136]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80b4e:	2300      	movs	r3, #0
   80b50:	461a      	mov	r2, r3
   80b52:	7869      	ldrb	r1, [r5, #1]
   80b54:	4823      	ldr	r0, [pc, #140]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b56:	47a0      	blx	r4
   80b58:	2300      	movs	r3, #0
   80b5a:	461a      	mov	r2, r3
   80b5c:	7829      	ldrb	r1, [r5, #0]
   80b5e:	4821      	ldr	r0, [pc, #132]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b60:	47a0      	blx	r4
   80b62:	2300      	movs	r3, #0
   80b64:	461a      	mov	r2, r3
   80b66:	4631      	mov	r1, r6
   80b68:	481e      	ldr	r0, [pc, #120]	; (80be4 <ISPProtocol_ProgramMemory+0x260>)
   80b6a:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80b6c:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80b70:	bf04      	itt	eq
   80b72:	f08a 0a08 	eoreq.w	sl, sl, #8
   80b76:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80b7a:	9b03      	ldr	r3, [sp, #12]
   80b7c:	2b00      	cmp	r3, #0
   80b7e:	d1b4      	bne.n	80aea <ISPProtocol_ProgramMemory+0x166>
   80b80:	9b04      	ldr	r3, [sp, #16]
   80b82:	42b3      	cmp	r3, r6
   80b84:	d0ad      	beq.n	80ae2 <ISPProtocol_ProgramMemory+0x15e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80b86:	f018 0f01 	tst.w	r8, #1
   80b8a:	d003      	beq.n	80b94 <ISPProtocol_ProgramMemory+0x210>
   80b8c:	f1bb 0f13 	cmp.w	fp, #19
   80b90:	f43f af3a 	beq.w	80a08 <ISPProtocol_ProgramMemory+0x84>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80b94:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80b98:	f023 0308 	bic.w	r3, r3, #8
   80b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80ba0:	4b0d      	ldr	r3, [pc, #52]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80ba2:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80ba4:	f019 0f01 	tst.w	r9, #1
   80ba8:	f47f af4b 	bne.w	80a42 <ISPProtocol_ProgramMemory+0xbe>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80bac:	2b00      	cmp	r3, #0
   80bae:	f47f af46 	bne.w	80a3e <ISPProtocol_ProgramMemory+0xba>
   80bb2:	f019 0f08 	tst.w	r9, #8
   80bb6:	d19b      	bne.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80bb8:	f029 0906 	bic.w	r9, r9, #6
   80bbc:	f049 0902 	orr.w	r9, r9, #2
   80bc0:	e796      	b.n	80af0 <ISPProtocol_ProgramMemory+0x16c>
			CurrentAddress++;
   80bc2:	4a05      	ldr	r2, [pc, #20]	; (80bd8 <ISPProtocol_ProgramMemory+0x254>)
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	3301      	adds	r3, #1
   80bc8:	6013      	str	r3, [r2, #0]
   80bca:	e7a6      	b.n	80b1a <ISPProtocol_ProgramMemory+0x196>
   80bcc:	200026a4 	.word	0x200026a4
   80bd0:	20002664 	.word	0x20002664
   80bd4:	20002662 	.word	0x20002662
   80bd8:	20002684 	.word	0x20002684
   80bdc:	00081205 	.word	0x00081205
   80be0:	20002660 	.word	0x20002660
   80be4:	40008000 	.word	0x40008000
   80be8:	000840f7 	.word	0x000840f7
   80bec:	00081245 	.word	0x00081245

00080bf0 <ISPProtocol_ReadMemory>:
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80bf0:	4b43      	ldr	r3, [pc, #268]	; (80d00 <ISPProtocol_ReadMemory+0x110>)
   80bf2:	899b      	ldrh	r3, [r3, #12]
   80bf4:	2b03      	cmp	r3, #3
   80bf6:	d000      	beq.n	80bfa <ISPProtocol_ReadMemory+0xa>
   80bf8:	4770      	bx	lr
{
   80bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80bfe:	b085      	sub	sp, #20
		//printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80c00:	4b3f      	ldr	r3, [pc, #252]	; (80d00 <ISPProtocol_ReadMemory+0x110>)
   80c02:	689b      	ldr	r3, [r3, #8]
   80c04:	681b      	ldr	r3, [r3, #0]
   80c06:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80c08:	4a3e      	ldr	r2, [pc, #248]	; (80d04 <ISPProtocol_ReadMemory+0x114>)
   80c0a:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80c0c:	24c0      	movs	r4, #192	; 0xc0
   80c0e:	7054      	strb	r4, [r2, #1]
	avrisp_status_payload_size = 2;
   80c10:	2402      	movs	r4, #2
   80c12:	4a3d      	ldr	r2, [pc, #244]	; (80d08 <ISPProtocol_ReadMemory+0x118>)
   80c14:	8014      	strh	r4, [r2, #0]
		
	////printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80c16:	b29b      	uxth	r3, r3
   80c18:	9301      	str	r3, [sp, #4]
   80c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80c1e:	d86c      	bhi.n	80cfa <ISPProtocol_ReadMemory+0x10a>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c20:	2b00      	cmp	r3, #0
   80c22:	d064      	beq.n	80cee <ISPProtocol_ReadMemory+0xfe>
   80c24:	4682      	mov	sl, r0
   80c26:	1e4f      	subs	r7, r1, #1
   80c28:	2600      	movs	r6, #0
   80c2a:	4c38      	ldr	r4, [pc, #224]	; (80d0c <ISPProtocol_ReadMemory+0x11c>)
   80c2c:	46b9      	mov	r9, r7
   80c2e:	e023      	b.n	80c78 <ISPProtocol_ReadMemory+0x88>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
   80c30:	4b37      	ldr	r3, [pc, #220]	; (80d10 <ISPProtocol_ReadMemory+0x120>)
   80c32:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80c34:	4b37      	ldr	r3, [pc, #220]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c36:	f04f 0200 	mov.w	r2, #0
   80c3a:	701a      	strb	r2, [r3, #0]
   80c3c:	e022      	b.n	80c84 <ISPProtocol_ReadMemory+0x94>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80c3e:	f088 0808 	eor.w	r8, r8, #8
   80c42:	f88d 800e 	strb.w	r8, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c46:	f01b 0f01 	tst.w	fp, #1
   80c4a:	d010      	beq.n	80c6e <ISPProtocol_ReadMemory+0x7e>
		{
			CurrentAddress++;
   80c4c:	4a32      	ldr	r2, [pc, #200]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c4e:	6813      	ldr	r3, [r2, #0]
   80c50:	3301      	adds	r3, #1
   80c52:	6013      	str	r3, [r2, #0]
   80c54:	e006      	b.n	80c64 <ISPProtocol_ReadMemory+0x74>
   80c56:	4a30      	ldr	r2, [pc, #192]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c58:	6813      	ldr	r3, [r2, #0]
   80c5a:	3301      	adds	r3, #1
   80c5c:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c5e:	f1ba 0f16 	cmp.w	sl, #22
   80c62:	d004      	beq.n	80c6e <ISPProtocol_ReadMemory+0x7e>
   80c64:	b29b      	uxth	r3, r3
   80c66:	b913      	cbnz	r3, 80c6e <ISPProtocol_ReadMemory+0x7e>
			  MustLoadExtendedAddress = true;
   80c68:	2301      	movs	r3, #1
   80c6a:	4a2a      	ldr	r2, [pc, #168]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c6c:	7013      	strb	r3, [r2, #0]
   80c6e:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c70:	b2b3      	uxth	r3, r6
   80c72:	9a01      	ldr	r2, [sp, #4]
   80c74:	429a      	cmp	r2, r3
   80c76:	d93a      	bls.n	80cee <ISPProtocol_ReadMemory+0xfe>
   80c78:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   80c7c:	4b25      	ldr	r3, [pc, #148]	; (80d14 <ISPProtocol_ReadMemory+0x124>)
   80c7e:	781b      	ldrb	r3, [r3, #0]
   80c80:	2b00      	cmp	r3, #0
   80c82:	d1d5      	bne.n	80c30 <ISPProtocol_ReadMemory+0x40>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80c84:	f89d 800e 	ldrb.w	r8, [sp, #14]
   80c88:	2300      	movs	r3, #0
   80c8a:	461a      	mov	r2, r3
   80c8c:	4641      	mov	r1, r8
   80c8e:	4620      	mov	r0, r4
   80c90:	4d22      	ldr	r5, [pc, #136]	; (80d1c <ISPProtocol_ReadMemory+0x12c>)
   80c92:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80c94:	4f20      	ldr	r7, [pc, #128]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80c96:	2300      	movs	r3, #0
   80c98:	461a      	mov	r2, r3
   80c9a:	7879      	ldrb	r1, [r7, #1]
   80c9c:	4620      	mov	r0, r4
   80c9e:	47a8      	blx	r5
   80ca0:	2300      	movs	r3, #0
   80ca2:	461a      	mov	r2, r3
   80ca4:	7839      	ldrb	r1, [r7, #0]
   80ca6:	4620      	mov	r0, r4
   80ca8:	47a8      	blx	r5
   80caa:	2300      	movs	r3, #0
   80cac:	461a      	mov	r2, r3
   80cae:	4619      	mov	r1, r3
   80cb0:	4620      	mov	r0, r4
   80cb2:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80cb4:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   80cb6:	f413 7f00 	tst.w	r3, #512	; 0x200
   80cba:	d0fb      	beq.n	80cb4 <ISPProtocol_ReadMemory+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80cbc:	f10d 0209 	add.w	r2, sp, #9
   80cc0:	f10d 010a 	add.w	r1, sp, #10
   80cc4:	4620      	mov	r0, r4
   80cc6:	4b16      	ldr	r3, [pc, #88]	; (80d20 <ISPProtocol_ReadMemory+0x130>)
   80cc8:	4798      	blx	r3
			return  ReceivedByte;
   80cca:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80cce:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80cd2:	f1ba 0f14 	cmp.w	sl, #20
   80cd6:	d0b2      	beq.n	80c3e <ISPProtocol_ReadMemory+0x4e>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80cd8:	f01b 0f01 	tst.w	fp, #1
   80cdc:	d1bb      	bne.n	80c56 <ISPProtocol_ReadMemory+0x66>
   80cde:	f1ba 0f16 	cmp.w	sl, #22
   80ce2:	d1c4      	bne.n	80c6e <ISPProtocol_ReadMemory+0x7e>
			CurrentAddress++;
   80ce4:	4a0c      	ldr	r2, [pc, #48]	; (80d18 <ISPProtocol_ReadMemory+0x128>)
   80ce6:	6813      	ldr	r3, [r2, #0]
   80ce8:	3301      	adds	r3, #1
   80cea:	6013      	str	r3, [r2, #0]
   80cec:	e7bf      	b.n	80c6e <ISPProtocol_ReadMemory+0x7e>
		}
	}

	////printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cee:	2200      	movs	r2, #0
   80cf0:	4b04      	ldr	r3, [pc, #16]	; (80d04 <ISPProtocol_ReadMemory+0x114>)
   80cf2:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80cf4:	2202      	movs	r2, #2
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <ISPProtocol_ReadMemory+0x118>)
   80cf8:	801a      	strh	r2, [r3, #0]
}
   80cfa:	b005      	add	sp, #20
   80cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d00:	200026a4 	.word	0x200026a4
   80d04:	20002664 	.word	0x20002664
   80d08:	20002662 	.word	0x20002662
   80d0c:	40008000 	.word	0x40008000
   80d10:	00081205 	.word	0x00081205
   80d14:	20002660 	.word	0x20002660
   80d18:	20002684 	.word	0x20002684
   80d1c:	000840f7 	.word	0x000840f7
   80d20:	000840c9 	.word	0x000840c9

00080d24 <ISPProtocol_ReadFuseLockSigOSCCAL>:
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80d24:	4b20      	ldr	r3, [pc, #128]	; (80da8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d26:	899b      	ldrh	r3, [r3, #12]
   80d28:	2b05      	cmp	r3, #5
   80d2a:	d000      	beq.n	80d2e <ISPProtocol_ReadFuseLockSigOSCCAL+0xa>
   80d2c:	4770      	bx	lr
{
   80d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d32:	b085      	sub	sp, #20
   80d34:	4607      	mov	r7, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80d36:	4b1c      	ldr	r3, [pc, #112]	; (80da8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d38:	689b      	ldr	r3, [r3, #8]
   80d3a:	6818      	ldr	r0, [r3, #0]
   80d3c:	9002      	str	r0, [sp, #8]
   80d3e:	791a      	ldrb	r2, [r3, #4]
   80d40:	f88d 200c 	strb.w	r2, [sp, #12]
   80d44:	f893 b000 	ldrb.w	fp, [r3]
   80d48:	f10d 0609 	add.w	r6, sp, #9
   80d4c:	ad01      	add	r5, sp, #4
   80d4e:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d52:	4c16      	ldr	r4, [pc, #88]	; (80dac <ISPProtocol_ReadFuseLockSigOSCCAL+0x88>)
   80d54:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80db8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   80d58:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80dbc <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>
		  spi_write(SPI, data, 0, 0);
   80d5c:	2300      	movs	r3, #0
   80d5e:	461a      	mov	r2, r3
   80d60:	f816 1b01 	ldrb.w	r1, [r6], #1
   80d64:	4620      	mov	r0, r4
   80d66:	47c8      	blx	r9
   80d68:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80d6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d6e:	d0fb      	beq.n	80d68 <ISPProtocol_ReadFuseLockSigOSCCAL+0x44>
			spi_read(SPI, &ReceivedByte, &_);
   80d70:	f10d 0201 	add.w	r2, sp, #1
   80d74:	f10d 0102 	add.w	r1, sp, #2
   80d78:	4620      	mov	r0, r4
   80d7a:	47c0      	blx	r8
			return  ReceivedByte;
   80d7c:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80d80:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80d84:	4555      	cmp	r5, sl
   80d86:	d1e9      	bne.n	80d5c <ISPProtocol_ReadFuseLockSigOSCCAL+0x38>

	avrisp_status_payload[0] = V2Command;
   80d88:	4b09      	ldr	r3, [pc, #36]	; (80db0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80d8a:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d8c:	2200      	movs	r2, #0
   80d8e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80d90:	a904      	add	r1, sp, #16
   80d92:	448b      	add	fp, r1
   80d94:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80d98:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80d9a:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80d9c:	2204      	movs	r2, #4
   80d9e:	4b05      	ldr	r3, [pc, #20]	; (80db4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80da0:	801a      	strh	r2, [r3, #0]
}
   80da2:	b005      	add	sp, #20
   80da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80da8:	200026a4 	.word	0x200026a4
   80dac:	40008000 	.word	0x40008000
   80db0:	20002664 	.word	0x20002664
   80db4:	20002662 	.word	0x20002662
   80db8:	000840f7 	.word	0x000840f7
   80dbc:	000840c9 	.word	0x000840c9

00080dc0 <ISPProtocol_WriteFuseLock>:
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80dc0:	4b13      	ldr	r3, [pc, #76]	; (80e10 <ISPProtocol_WriteFuseLock+0x50>)
   80dc2:	899b      	ldrh	r3, [r3, #12]
   80dc4:	2b04      	cmp	r3, #4
   80dc6:	d000      	beq.n	80dca <ISPProtocol_WriteFuseLock+0xa>
   80dc8:	4770      	bx	lr
{
   80dca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80dce:	b083      	sub	sp, #12
   80dd0:	4681      	mov	r9, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80dd2:	4b0f      	ldr	r3, [pc, #60]	; (80e10 <ISPProtocol_WriteFuseLock+0x50>)
   80dd4:	689b      	ldr	r3, [r3, #8]
   80dd6:	681b      	ldr	r3, [r3, #0]
   80dd8:	ac02      	add	r4, sp, #8
   80dda:	f844 3d04 	str.w	r3, [r4, #-4]!
   80dde:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   80de2:	4f0c      	ldr	r7, [pc, #48]	; (80e14 <ISPProtocol_WriteFuseLock+0x54>)
   80de4:	2600      	movs	r6, #0
   80de6:	4d0c      	ldr	r5, [pc, #48]	; (80e18 <ISPProtocol_WriteFuseLock+0x58>)
   80de8:	4633      	mov	r3, r6
   80dea:	4632      	mov	r2, r6
   80dec:	f814 1b01 	ldrb.w	r1, [r4], #1
   80df0:	4638      	mov	r0, r7
   80df2:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80df4:	4544      	cmp	r4, r8
   80df6:	d1f7      	bne.n	80de8 <ISPProtocol_WriteFuseLock+0x28>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80df8:	4b08      	ldr	r3, [pc, #32]	; (80e1c <ISPProtocol_WriteFuseLock+0x5c>)
   80dfa:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80dfe:	2200      	movs	r2, #0
   80e00:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80e02:	2202      	movs	r2, #2
   80e04:	4b06      	ldr	r3, [pc, #24]	; (80e20 <ISPProtocol_WriteFuseLock+0x60>)
   80e06:	801a      	strh	r2, [r3, #0]
}
   80e08:	b003      	add	sp, #12
   80e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e0e:	bf00      	nop
   80e10:	200026a4 	.word	0x200026a4
   80e14:	40008000 	.word	0x40008000
   80e18:	000840f7 	.word	0x000840f7
   80e1c:	20002664 	.word	0x20002664
   80e20:	20002662 	.word	0x20002662

00080e24 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   80e24:	4770      	bx	lr
	...

00080e28 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80e28:	b900      	cbnz	r0, 80e2c <ISPProtocol_DelayMS+0x4>
   80e2a:	4770      	bx	lr
{
   80e2c:	b538      	push	{r3, r4, r5, lr}
   80e2e:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80e30:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80e34:	2300      	movs	r3, #0
   80e36:	f243 64af 	movw	r4, #13999	; 0x36af
   80e3a:	2500      	movs	r5, #0
   80e3c:	4804      	ldr	r0, [pc, #16]	; (80e50 <ISPProtocol_DelayMS+0x28>)
   80e3e:	fbe0 4501 	umlal	r4, r5, r0, r1
   80e42:	4620      	mov	r0, r4
   80e44:	4629      	mov	r1, r5
   80e46:	4c03      	ldr	r4, [pc, #12]	; (80e54 <ISPProtocol_DelayMS+0x2c>)
   80e48:	47a0      	blx	r4
   80e4a:	4b03      	ldr	r3, [pc, #12]	; (80e58 <ISPProtocol_DelayMS+0x30>)
   80e4c:	4798      	blx	r3
   80e4e:	bd38      	pop	{r3, r4, r5, pc}
   80e50:	05b8d800 	.word	0x05b8d800
   80e54:	00085c75 	.word	0x00085c75
   80e58:	20000089 	.word	0x20000089

00080e5c <ISPProtocol_EnterISPMode>:
	if (udd_g_ctrlreq.payload_size != 11){
   80e5c:	4b43      	ldr	r3, [pc, #268]	; (80f6c <ISPProtocol_EnterISPMode+0x110>)
   80e5e:	899b      	ldrh	r3, [r3, #12]
   80e60:	2b0b      	cmp	r3, #11
   80e62:	d000      	beq.n	80e66 <ISPProtocol_EnterISPMode+0xa>
   80e64:	4770      	bx	lr
{
   80e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e6a:	b08b      	sub	sp, #44	; 0x2c
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80e6c:	4b3f      	ldr	r3, [pc, #252]	; (80f6c <ISPProtocol_EnterISPMode+0x110>)
   80e6e:	689b      	ldr	r3, [r3, #8]
   80e70:	aa07      	add	r2, sp, #28
   80e72:	6818      	ldr	r0, [r3, #0]
   80e74:	6859      	ldr	r1, [r3, #4]
   80e76:	c203      	stmia	r2!, {r0, r1}
   80e78:	8918      	ldrh	r0, [r3, #8]
   80e7a:	7a99      	ldrb	r1, [r3, #10]
   80e7c:	8010      	strh	r0, [r2, #0]
   80e7e:	7091      	strb	r1, [r2, #2]
   80e80:	785a      	ldrb	r2, [r3, #1]
   80e82:	4616      	mov	r6, r2
   80e84:	9203      	str	r2, [sp, #12]
   80e86:	7898      	ldrb	r0, [r3, #2]
   80e88:	78dc      	ldrb	r4, [r3, #3]
   80e8a:	791a      	ldrb	r2, [r3, #4]
   80e8c:	9201      	str	r2, [sp, #4]
   80e8e:	795a      	ldrb	r2, [r3, #5]
   80e90:	9202      	str	r2, [sp, #8]
   80e92:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   80e96:	2200      	movs	r2, #0
   80e98:	4b35      	ldr	r3, [pc, #212]	; (80f70 <ISPProtocol_EnterISPMode+0x114>)
   80e9a:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80e9c:	4d35      	ldr	r5, [pc, #212]	; (80f74 <ISPProtocol_EnterISPMode+0x118>)
   80e9e:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80ea0:	4b35      	ldr	r3, [pc, #212]	; (80f78 <ISPProtocol_EnterISPMode+0x11c>)
   80ea2:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80ea4:	2001      	movs	r0, #1
   80ea6:	4b35      	ldr	r3, [pc, #212]	; (80f7c <ISPProtocol_EnterISPMode+0x120>)
   80ea8:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80eaa:	4630      	mov	r0, r6
   80eac:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80eae:	f104 39ff 	add.w	r9, r4, #4294967295
   80eb2:	fa5f f989 	uxtb.w	r9, r9
   80eb6:	2c00      	cmp	r4, #0
   80eb8:	d051      	beq.n	80f5e <ISPProtocol_EnterISPMode+0x102>
   80eba:	4b31      	ldr	r3, [pc, #196]	; (80f80 <ISPProtocol_EnterISPMode+0x124>)
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	b123      	cbz	r3, 80eca <ISPProtocol_EnterISPMode+0x6e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80ec0:	4f2c      	ldr	r7, [pc, #176]	; (80f74 <ISPProtocol_EnterISPMode+0x118>)
   80ec2:	4c30      	ldr	r4, [pc, #192]	; (80f84 <ISPProtocol_EnterISPMode+0x128>)
   80ec4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80f94 <ISPProtocol_EnterISPMode+0x138>
   80ec8:	e01f      	b.n	80f0a <ISPProtocol_EnterISPMode+0xae>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80eca:	23c0      	movs	r3, #192	; 0xc0
   80ecc:	e03d      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80ece:	f1bb 0f00 	cmp.w	fp, #0
   80ed2:	d039      	beq.n	80f48 <ISPProtocol_EnterISPMode+0xec>
   80ed4:	ab0a      	add	r3, sp, #40	; 0x28
   80ed6:	445b      	add	r3, fp
   80ed8:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80edc:	9a02      	ldr	r2, [sp, #8]
   80ede:	4293      	cmp	r3, r2
   80ee0:	d032      	beq.n	80f48 <ISPProtocol_EnterISPMode+0xec>
			ISPTarget_ChangeTargetResetLine(false);
   80ee2:	2000      	movs	r0, #0
   80ee4:	4d25      	ldr	r5, [pc, #148]	; (80f7c <ISPProtocol_EnterISPMode+0x120>)
   80ee6:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ee8:	9e03      	ldr	r6, [sp, #12]
   80eea:	4630      	mov	r0, r6
   80eec:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80eee:	2001      	movs	r0, #1
   80ef0:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ef2:	4630      	mov	r0, r6
   80ef4:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80ef6:	f109 39ff 	add.w	r9, r9, #4294967295
   80efa:	fa5f f989 	uxtb.w	r9, r9
   80efe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   80f02:	d02e      	beq.n	80f62 <ISPProtocol_EnterISPMode+0x106>
   80f04:	4b1e      	ldr	r3, [pc, #120]	; (80f80 <ISPProtocol_EnterISPMode+0x124>)
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	b36b      	cbz	r3, 80f66 <ISPProtocol_EnterISPMode+0x10a>
   80f0a:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80f0e:	ad06      	add	r5, sp, #24
   80f10:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80f14:	9801      	ldr	r0, [sp, #4]
   80f16:	47b8      	blx	r7
   80f18:	2300      	movs	r3, #0
   80f1a:	461a      	mov	r2, r3
   80f1c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80f20:	4620      	mov	r0, r4
   80f22:	47d0      	blx	sl
   80f24:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80f26:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f2a:	d0fb      	beq.n	80f24 <ISPProtocol_EnterISPMode+0xc8>
			spi_read(SPI, &ReceivedByte, &_);
   80f2c:	f10d 0215 	add.w	r2, sp, #21
   80f30:	f10d 0116 	add.w	r1, sp, #22
   80f34:	4620      	mov	r0, r4
   80f36:	4b14      	ldr	r3, [pc, #80]	; (80f88 <ISPProtocol_EnterISPMode+0x12c>)
   80f38:	4798      	blx	r3
			return  ReceivedByte;
   80f3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80f3e:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80f42:	4545      	cmp	r5, r8
   80f44:	d1e6      	bne.n	80f14 <ISPProtocol_EnterISPMode+0xb8>
   80f46:	e7c2      	b.n	80ece <ISPProtocol_EnterISPMode+0x72>
			ResponseStatus = STATUS_CMD_OK;
   80f48:	2300      	movs	r3, #0
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80f4a:	4a10      	ldr	r2, [pc, #64]	; (80f8c <ISPProtocol_EnterISPMode+0x130>)
   80f4c:	2110      	movs	r1, #16
   80f4e:	7011      	strb	r1, [r2, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f50:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80f52:	2202      	movs	r2, #2
   80f54:	4b0e      	ldr	r3, [pc, #56]	; (80f90 <ISPProtocol_EnterISPMode+0x134>)
   80f56:	801a      	strh	r2, [r3, #0]
}
   80f58:	b00b      	add	sp, #44	; 0x2c
   80f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80f5e:	23c0      	movs	r3, #192	; 0xc0
   80f60:	e7f3      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f62:	23c0      	movs	r3, #192	; 0xc0
   80f64:	e7f1      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f66:	23c0      	movs	r3, #192	; 0xc0
   80f68:	e7ef      	b.n	80f4a <ISPProtocol_EnterISPMode+0xee>
   80f6a:	bf00      	nop
   80f6c:	200026a4 	.word	0x200026a4
   80f70:	20002684 	.word	0x20002684
   80f74:	00080e29 	.word	0x00080e29
   80f78:	00081081 	.word	0x00081081
   80f7c:	00081141 	.word	0x00081141
   80f80:	2000268c 	.word	0x2000268c
   80f84:	40008000 	.word	0x40008000
   80f88:	000840c9 	.word	0x000840c9
   80f8c:	20002664 	.word	0x20002664
   80f90:	20002662 	.word	0x20002662
   80f94:	000840f7 	.word	0x000840f7

00080f98 <ISPProtocol_LeaveISPMode>:
	if (udd_g_ctrlreq.payload_size != 2){
   80f98:	4b10      	ldr	r3, [pc, #64]	; (80fdc <ISPProtocol_LeaveISPMode+0x44>)
   80f9a:	899b      	ldrh	r3, [r3, #12]
   80f9c:	2b02      	cmp	r3, #2
   80f9e:	d000      	beq.n	80fa2 <ISPProtocol_LeaveISPMode+0xa>
   80fa0:	4770      	bx	lr
{
   80fa2:	b510      	push	{r4, lr}
   80fa4:	b082      	sub	sp, #8
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80fa6:	4b0d      	ldr	r3, [pc, #52]	; (80fdc <ISPProtocol_LeaveISPMode+0x44>)
   80fa8:	689b      	ldr	r3, [r3, #8]
   80faa:	8818      	ldrh	r0, [r3, #0]
   80fac:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80fb0:	b2c0      	uxtb	r0, r0
   80fb2:	4c0b      	ldr	r4, [pc, #44]	; (80fe0 <ISPProtocol_LeaveISPMode+0x48>)
   80fb4:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80fb6:	2000      	movs	r0, #0
   80fb8:	4b0a      	ldr	r3, [pc, #40]	; (80fe4 <ISPProtocol_LeaveISPMode+0x4c>)
   80fba:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80fbc:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <ISPProtocol_LeaveISPMode+0x50>)
   80fbe:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80fc0:	f89d 0005 	ldrb.w	r0, [sp, #5]
   80fc4:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80fc6:	4b09      	ldr	r3, [pc, #36]	; (80fec <ISPProtocol_LeaveISPMode+0x54>)
   80fc8:	2211      	movs	r2, #17
   80fca:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80fcc:	2200      	movs	r2, #0
   80fce:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80fd0:	2202      	movs	r2, #2
   80fd2:	4b07      	ldr	r3, [pc, #28]	; (80ff0 <ISPProtocol_LeaveISPMode+0x58>)
   80fd4:	801a      	strh	r2, [r3, #0]
}
   80fd6:	b002      	add	sp, #8
   80fd8:	bd10      	pop	{r4, pc}
   80fda:	bf00      	nop
   80fdc:	200026a4 	.word	0x200026a4
   80fe0:	00080e29 	.word	0x00080e29
   80fe4:	00081141 	.word	0x00081141
   80fe8:	00081129 	.word	0x00081129
   80fec:	20002664 	.word	0x20002664
   80ff0:	20002662 	.word	0x20002662

00080ff4 <ISPProtocol_ChipErase>:
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80ff4:	4b1b      	ldr	r3, [pc, #108]	; (81064 <ISPProtocol_ChipErase+0x70>)
   80ff6:	899b      	ldrh	r3, [r3, #12]
   80ff8:	2b06      	cmp	r3, #6
   80ffa:	d000      	beq.n	80ffe <ISPProtocol_ChipErase+0xa>
   80ffc:	4770      	bx	lr
{
   80ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81002:	b082      	sub	sp, #8
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   81004:	4b17      	ldr	r3, [pc, #92]	; (81064 <ISPProtocol_ChipErase+0x70>)
   81006:	689b      	ldr	r3, [r3, #8]
   81008:	6818      	ldr	r0, [r3, #0]
   8100a:	9000      	str	r0, [sp, #0]
   8100c:	889a      	ldrh	r2, [r3, #4]
   8100e:	f8ad 2004 	strh.w	r2, [sp, #4]
   81012:	f893 a000 	ldrb.w	sl, [r3]
   81016:	f893 9001 	ldrb.w	r9, [r3, #1]
   8101a:	f10d 0402 	add.w	r4, sp, #2
   8101e:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   81022:	4f11      	ldr	r7, [pc, #68]	; (81068 <ISPProtocol_ChipErase+0x74>)
   81024:	2600      	movs	r6, #0
   81026:	4d11      	ldr	r5, [pc, #68]	; (8106c <ISPProtocol_ChipErase+0x78>)
   81028:	4633      	mov	r3, r6
   8102a:	4632      	mov	r2, r6
   8102c:	f814 1b01 	ldrb.w	r1, [r4], #1
   81030:	4638      	mov	r0, r7
   81032:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   81034:	4544      	cmp	r4, r8
   81036:	d1f7      	bne.n	81028 <ISPProtocol_ChipErase+0x34>
	if (!(Erase_Chip_Params.PollMethod))
   81038:	f1b9 0f00 	cmp.w	r9, #0
   8103c:	d10d      	bne.n	8105a <ISPProtocol_ChipErase+0x66>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   8103e:	4650      	mov	r0, sl
   81040:	4b0b      	ldr	r3, [pc, #44]	; (81070 <ISPProtocol_ChipErase+0x7c>)
   81042:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   81044:	4b0b      	ldr	r3, [pc, #44]	; (81074 <ISPProtocol_ChipErase+0x80>)
   81046:	2212      	movs	r2, #18
   81048:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   8104a:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   8104e:	2202      	movs	r2, #2
   81050:	4b09      	ldr	r3, [pc, #36]	; (81078 <ISPProtocol_ChipErase+0x84>)
   81052:	801a      	strh	r2, [r3, #0]
}
   81054:	b002      	add	sp, #8
   81056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   8105a:	4b08      	ldr	r3, [pc, #32]	; (8107c <ISPProtocol_ChipErase+0x88>)
   8105c:	4798      	blx	r3
   8105e:	4681      	mov	r9, r0
   81060:	e7f0      	b.n	81044 <ISPProtocol_ChipErase+0x50>
   81062:	bf00      	nop
   81064:	200026a4 	.word	0x200026a4
   81068:	40008000 	.word	0x40008000
   8106c:	000840f7 	.word	0x000840f7
   81070:	00080e29 	.word	0x00080e29
   81074:	20002664 	.word	0x20002664
   81078:	20002662 	.word	0x20002662
   8107c:	00081185 	.word	0x00081185

00081080 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   81080:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   81082:	2098      	movs	r0, #152	; 0x98
   81084:	4b1e      	ldr	r3, [pc, #120]	; (81100 <ISPTarget_EnableTargetISP+0x80>)
   81086:	4798      	blx	r3
   81088:	4b1e      	ldr	r3, [pc, #120]	; (81104 <ISPTarget_EnableTargetISP+0x84>)
   8108a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   8108e:	4c1e      	ldr	r4, [pc, #120]	; (81108 <ISPTarget_EnableTargetISP+0x88>)
   81090:	4620      	mov	r0, r4
   81092:	4b1e      	ldr	r3, [pc, #120]	; (8110c <ISPTarget_EnableTargetISP+0x8c>)
   81094:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   81096:	2380      	movs	r3, #128	; 0x80
   81098:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8109a:	6863      	ldr	r3, [r4, #4]
   8109c:	f043 0301 	orr.w	r3, r3, #1
   810a0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   810a2:	6863      	ldr	r3, [r4, #4]
   810a4:	f043 0310 	orr.w	r3, r3, #16
   810a8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   810aa:	6863      	ldr	r3, [r4, #4]
   810ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   810b0:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   810b2:	4917      	ldr	r1, [pc, #92]	; (81110 <ISPTarget_EnableTargetISP+0x90>)
   810b4:	4628      	mov	r0, r5
   810b6:	4b17      	ldr	r3, [pc, #92]	; (81114 <ISPTarget_EnableTargetISP+0x94>)
   810b8:	4798      	blx	r3
	if (bauddiv < 0){
   810ba:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   810bc:	bfb8      	it	lt
   810be:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   810c0:	2200      	movs	r2, #0
   810c2:	4611      	mov	r1, r2
   810c4:	4620      	mov	r0, r4
   810c6:	4b14      	ldr	r3, [pc, #80]	; (81118 <ISPTarget_EnableTargetISP+0x98>)
   810c8:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   810ca:	2201      	movs	r2, #1
   810cc:	2100      	movs	r1, #0
   810ce:	4620      	mov	r0, r4
   810d0:	4b12      	ldr	r3, [pc, #72]	; (8111c <ISPTarget_EnableTargetISP+0x9c>)
   810d2:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   810d4:	b2ea      	uxtb	r2, r5
   810d6:	2100      	movs	r1, #0
   810d8:	4620      	mov	r0, r4
   810da:	4b11      	ldr	r3, [pc, #68]	; (81120 <ISPTarget_EnableTargetISP+0xa0>)
   810dc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   810de:	2301      	movs	r3, #1
   810e0:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   810e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810e6:	200e      	movs	r0, #14
   810e8:	4c0e      	ldr	r4, [pc, #56]	; (81124 <ISPTarget_EnableTargetISP+0xa4>)
   810ea:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   810ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810f0:	200d      	movs	r0, #13
   810f2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   810f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810f8:	200f      	movs	r0, #15
   810fa:	47a0      	blx	r4
   810fc:	bd38      	pop	{r3, r4, r5, pc}
   810fe:	bf00      	nop
   81100:	000823bd 	.word	0x000823bd
   81104:	200002f0 	.word	0x200002f0
   81108:	40008000 	.word	0x40008000
   8110c:	000840a9 	.word	0x000840a9
   81110:	05b8d800 	.word	0x05b8d800
   81114:	00084167 	.word	0x00084167
   81118:	0008412b 	.word	0x0008412b
   8111c:	00084149 	.word	0x00084149
   81120:	0008417d 	.word	0x0008417d
   81124:	00083cc5 	.word	0x00083cc5

00081128 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81128:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8112a:	4803      	ldr	r0, [pc, #12]	; (81138 <ISPTarget_DisableTargetISP+0x10>)
   8112c:	2302      	movs	r3, #2
   8112e:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   81130:	4b02      	ldr	r3, [pc, #8]	; (8113c <ISPTarget_DisableTargetISP+0x14>)
   81132:	4798      	blx	r3
   81134:	bd08      	pop	{r3, pc}
   81136:	bf00      	nop
   81138:	40008000 	.word	0x40008000
   8113c:	000840b9 	.word	0x000840b9

00081140 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   81140:	b508      	push	{r3, lr}
	if (ResetTarget)
   81142:	b180      	cbz	r0, 81166 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81144:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81148:	2011      	movs	r0, #17
   8114a:	4b0a      	ldr	r3, [pc, #40]	; (81174 <ISPTarget_ChangeTargetResetLine+0x34>)
   8114c:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8114e:	209e      	movs	r0, #158	; 0x9e
   81150:	4b09      	ldr	r3, [pc, #36]	; (81178 <ISPTarget_ChangeTargetResetLine+0x38>)
   81152:	4798      	blx	r3
   81154:	b918      	cbnz	r0, 8115e <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81156:	2011      	movs	r0, #17
   81158:	4b08      	ldr	r3, [pc, #32]	; (8117c <ISPTarget_ChangeTargetResetLine+0x3c>)
   8115a:	4798      	blx	r3
   8115c:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8115e:	2011      	movs	r0, #17
   81160:	4b07      	ldr	r3, [pc, #28]	; (81180 <ISPTarget_ChangeTargetResetLine+0x40>)
   81162:	4798      	blx	r3
   81164:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81166:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8116a:	2011      	movs	r0, #17
   8116c:	4b01      	ldr	r3, [pc, #4]	; (81174 <ISPTarget_ChangeTargetResetLine+0x34>)
   8116e:	4798      	blx	r3
   81170:	bd08      	pop	{r3, pc}
   81172:	bf00      	nop
   81174:	00083cc5 	.word	0x00083cc5
   81178:	000823bd 	.word	0x000823bd
   8117c:	00083c8f 	.word	0x00083c8f
   81180:	00083ca9 	.word	0x00083ca9

00081184 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   81184:	b570      	push	{r4, r5, r6, lr}
   81186:	b082      	sub	sp, #8
   81188:	4c1a      	ldr	r4, [pc, #104]	; (811f4 <ISPTarget_WaitWhileTargetBusy+0x70>)
   8118a:	2600      	movs	r6, #0
   8118c:	4d1a      	ldr	r5, [pc, #104]	; (811f8 <ISPTarget_WaitWhileTargetBusy+0x74>)
   8118e:	4633      	mov	r3, r6
   81190:	4632      	mov	r2, r6
   81192:	21f0      	movs	r1, #240	; 0xf0
   81194:	4620      	mov	r0, r4
   81196:	47a8      	blx	r5
   81198:	4633      	mov	r3, r6
   8119a:	4632      	mov	r2, r6
   8119c:	4631      	mov	r1, r6
   8119e:	4620      	mov	r0, r4
   811a0:	47a8      	blx	r5
   811a2:	4633      	mov	r3, r6
   811a4:	4632      	mov	r2, r6
   811a6:	4631      	mov	r1, r6
   811a8:	4620      	mov	r0, r4
   811aa:	47a8      	blx	r5
   811ac:	4633      	mov	r3, r6
   811ae:	4632      	mov	r2, r6
   811b0:	4631      	mov	r1, r6
   811b2:	4620      	mov	r0, r4
   811b4:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   811b6:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   811b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   811bc:	d0fb      	beq.n	811b6 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   811be:	f10d 0205 	add.w	r2, sp, #5
   811c2:	f10d 0106 	add.w	r1, sp, #6
   811c6:	4620      	mov	r0, r4
   811c8:	4b0c      	ldr	r3, [pc, #48]	; (811fc <ISPTarget_WaitWhileTargetBusy+0x78>)
   811ca:	4798      	blx	r3
			return  ReceivedByte;
   811cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   811d0:	f013 0f01 	tst.w	r3, #1
   811d4:	d005      	beq.n	811e2 <ISPTarget_WaitWhileTargetBusy+0x5e>
   811d6:	4b0a      	ldr	r3, [pc, #40]	; (81200 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   811d8:	681b      	ldr	r3, [r3, #0]
   811da:	2b00      	cmp	r3, #0
   811dc:	d1d7      	bne.n	8118e <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   811de:	2081      	movs	r0, #129	; 0x81
   811e0:	e005      	b.n	811ee <ISPTarget_WaitWhileTargetBusy+0x6a>
   811e2:	4b07      	ldr	r3, [pc, #28]	; (81200 <ISPTarget_WaitWhileTargetBusy+0x7c>)
   811e4:	681b      	ldr	r3, [r3, #0]
   811e6:	2b00      	cmp	r3, #0
   811e8:	bf14      	ite	ne
   811ea:	2000      	movne	r0, #0
   811ec:	2081      	moveq	r0, #129	; 0x81
}
   811ee:	b002      	add	sp, #8
   811f0:	bd70      	pop	{r4, r5, r6, pc}
   811f2:	bf00      	nop
   811f4:	40008000 	.word	0x40008000
   811f8:	000840f7 	.word	0x000840f7
   811fc:	000840c9 	.word	0x000840c9
   81200:	2000268c 	.word	0x2000268c

00081204 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81204:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81206:	4d0c      	ldr	r5, [pc, #48]	; (81238 <ISPTarget_LoadExtendedAddress+0x34>)
   81208:	2300      	movs	r3, #0
   8120a:	461a      	mov	r2, r3
   8120c:	214d      	movs	r1, #77	; 0x4d
   8120e:	4628      	mov	r0, r5
   81210:	4c0a      	ldr	r4, [pc, #40]	; (8123c <ISPTarget_LoadExtendedAddress+0x38>)
   81212:	47a0      	blx	r4
   81214:	2300      	movs	r3, #0
   81216:	461a      	mov	r2, r3
   81218:	4619      	mov	r1, r3
   8121a:	4628      	mov	r0, r5
   8121c:	47a0      	blx	r4
   8121e:	2300      	movs	r3, #0
   81220:	461a      	mov	r2, r3
   81222:	4907      	ldr	r1, [pc, #28]	; (81240 <ISPTarget_LoadExtendedAddress+0x3c>)
   81224:	7889      	ldrb	r1, [r1, #2]
   81226:	4628      	mov	r0, r5
   81228:	47a0      	blx	r4
   8122a:	2300      	movs	r3, #0
   8122c:	461a      	mov	r2, r3
   8122e:	4619      	mov	r1, r3
   81230:	4628      	mov	r0, r5
   81232:	47a0      	blx	r4
   81234:	bd38      	pop	{r3, r4, r5, pc}
   81236:	bf00      	nop
   81238:	40008000 	.word	0x40008000
   8123c:	000840f7 	.word	0x000840f7
   81240:	20002684 	.word	0x20002684

00081244 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81248:	b082      	sub	sp, #8
   8124a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8124e:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   81252:	2808      	cmp	r0, #8
   81254:	d04d      	beq.n	812f2 <ISPTarget_WaitForProgComplete+0xae>
   81256:	460f      	mov	r7, r1
   81258:	4690      	mov	r8, r2
   8125a:	dd07      	ble.n	8126c <ISPTarget_WaitForProgComplete+0x28>
   8125c:	2820      	cmp	r0, #32
   8125e:	d009      	beq.n	81274 <ISPTarget_WaitForProgComplete+0x30>
   81260:	2840      	cmp	r0, #64	; 0x40
   81262:	d046      	beq.n	812f2 <ISPTarget_WaitForProgComplete+0xae>
   81264:	2810      	cmp	r0, #16
   81266:	d033      	beq.n	812d0 <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81268:	2000      	movs	r0, #0
   8126a:	e035      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8126c:	2802      	cmp	r0, #2
   8126e:	d02f      	beq.n	812d0 <ISPTarget_WaitForProgComplete+0x8c>
   81270:	2804      	cmp	r0, #4
   81272:	d1f9      	bne.n	81268 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   81274:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   81278:	4c1f      	ldr	r4, [pc, #124]	; (812f8 <ISPTarget_WaitForProgComplete+0xb4>)
   8127a:	2600      	movs	r6, #0
   8127c:	4d1f      	ldr	r5, [pc, #124]	; (812fc <ISPTarget_WaitForProgComplete+0xb8>)
   8127e:	4633      	mov	r3, r6
   81280:	4632      	mov	r2, r6
   81282:	4649      	mov	r1, r9
   81284:	4620      	mov	r0, r4
   81286:	47a8      	blx	r5
   81288:	4633      	mov	r3, r6
   8128a:	4632      	mov	r2, r6
   8128c:	4651      	mov	r1, sl
   8128e:	4620      	mov	r0, r4
   81290:	47a8      	blx	r5
   81292:	4633      	mov	r3, r6
   81294:	4632      	mov	r2, r6
   81296:	b2f9      	uxtb	r1, r7
   81298:	4620      	mov	r0, r4
   8129a:	47a8      	blx	r5
   8129c:	4633      	mov	r3, r6
   8129e:	4632      	mov	r2, r6
   812a0:	4631      	mov	r1, r6
   812a2:	4620      	mov	r0, r4
   812a4:	47a8      	blx	r5
   812a6:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   812a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   812ac:	d0fb      	beq.n	812a6 <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   812ae:	f10d 0205 	add.w	r2, sp, #5
   812b2:	f10d 0106 	add.w	r1, sp, #6
   812b6:	4620      	mov	r0, r4
   812b8:	4b11      	ldr	r3, [pc, #68]	; (81300 <ISPTarget_WaitForProgComplete+0xbc>)
   812ba:	4798      	blx	r3
			return  ReceivedByte;
   812bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   812c0:	4598      	cmp	r8, r3
   812c2:	d10f      	bne.n	812e4 <ISPTarget_WaitForProgComplete+0xa0>
   812c4:	4b0f      	ldr	r3, [pc, #60]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812c6:	681b      	ldr	r3, [r3, #0]
   812c8:	2b00      	cmp	r3, #0
   812ca:	d1d8      	bne.n	8127e <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812cc:	2080      	movs	r0, #128	; 0x80
   812ce:	e003      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   812d0:	4618      	mov	r0, r3
   812d2:	4b0d      	ldr	r3, [pc, #52]	; (81308 <ISPTarget_WaitForProgComplete+0xc4>)
   812d4:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   812d6:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   812d8:	2264      	movs	r2, #100	; 0x64
   812da:	4b0a      	ldr	r3, [pc, #40]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812dc:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   812de:	b002      	add	sp, #8
   812e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   812e4:	4b07      	ldr	r3, [pc, #28]	; (81304 <ISPTarget_WaitForProgComplete+0xc0>)
   812e6:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812e8:	2b00      	cmp	r3, #0
   812ea:	bf14      	ite	ne
   812ec:	2000      	movne	r0, #0
   812ee:	2080      	moveq	r0, #128	; 0x80
   812f0:	e7f2      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   812f2:	4b06      	ldr	r3, [pc, #24]	; (8130c <ISPTarget_WaitForProgComplete+0xc8>)
   812f4:	4798      	blx	r3
			break;
   812f6:	e7ef      	b.n	812d8 <ISPTarget_WaitForProgComplete+0x94>
   812f8:	40008000 	.word	0x40008000
   812fc:	000840f7 	.word	0x000840f7
   81300:	000840c9 	.word	0x000840c9
   81304:	2000268c 	.word	0x2000268c
   81308:	00080e29 	.word	0x00080e29
   8130c:	00081185 	.word	0x00081185

00081310 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   81310:	4b06      	ldr	r3, [pc, #24]	; (8132c <naeusb_add_in_handler+0x1c>)
   81312:	781b      	ldrb	r3, [r3, #0]
   81314:	2b0f      	cmp	r3, #15
   81316:	d807      	bhi.n	81328 <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81318:	1c59      	adds	r1, r3, #1
   8131a:	4a04      	ldr	r2, [pc, #16]	; (8132c <naeusb_add_in_handler+0x1c>)
   8131c:	7011      	strb	r1, [r2, #0]
   8131e:	4a04      	ldr	r2, [pc, #16]	; (81330 <naeusb_add_in_handler+0x20>)
   81320:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81324:	2001      	movs	r0, #1
   81326:	4770      	bx	lr
        return false;
   81328:	2000      	movs	r0, #0
}
   8132a:	4770      	bx	lr
   8132c:	20001c00 	.word	0x20001c00
   81330:	20001bc0 	.word	0x20001bc0

00081334 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   81334:	4b06      	ldr	r3, [pc, #24]	; (81350 <naeusb_add_out_handler+0x1c>)
   81336:	781b      	ldrb	r3, [r3, #0]
   81338:	2b0f      	cmp	r3, #15
   8133a:	d807      	bhi.n	8134c <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   8133c:	1c59      	adds	r1, r3, #1
   8133e:	4a04      	ldr	r2, [pc, #16]	; (81350 <naeusb_add_out_handler+0x1c>)
   81340:	7011      	strb	r1, [r2, #0]
   81342:	4a04      	ldr	r2, [pc, #16]	; (81354 <naeusb_add_out_handler+0x20>)
   81344:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81348:	2001      	movs	r0, #1
   8134a:	4770      	bx	lr
        return false;
   8134c:	2000      	movs	r0, #0
}
   8134e:	4770      	bx	lr
   81350:	20001c01 	.word	0x20001c01
   81354:	20001c04 	.word	0x20001c04

00081358 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81358:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   8135a:	4b01      	ldr	r3, [pc, #4]	; (81360 <main_suspend_action+0x8>)
   8135c:	4798      	blx	r3
   8135e:	bd08      	pop	{r3, pc}
   81360:	00082fbd 	.word	0x00082fbd

00081364 <main_resume_action>:
}

void main_resume_action(void)
{
   81364:	b508      	push	{r3, lr}
    ui_wakeup();
   81366:	4b01      	ldr	r3, [pc, #4]	; (8136c <main_resume_action+0x8>)
   81368:	4798      	blx	r3
   8136a:	bd08      	pop	{r3, pc}
   8136c:	00082fd9 	.word	0x00082fd9

00081370 <main_sof_action>:
}

void main_sof_action(void)
{
   81370:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   81372:	4b04      	ldr	r3, [pc, #16]	; (81384 <main_sof_action+0x14>)
   81374:	781b      	ldrb	r3, [r3, #0]
   81376:	b903      	cbnz	r3, 8137a <main_sof_action+0xa>
   81378:	bd08      	pop	{r3, pc}
        return;
    ui_process(udd_get_frame_number());
   8137a:	4b03      	ldr	r3, [pc, #12]	; (81388 <main_sof_action+0x18>)
   8137c:	4798      	blx	r3
   8137e:	4b03      	ldr	r3, [pc, #12]	; (8138c <main_sof_action+0x1c>)
   81380:	4798      	blx	r3
   81382:	e7f9      	b.n	81378 <main_sof_action+0x8>
   81384:	20000580 	.word	0x20000580
   81388:	00084e11 	.word	0x00084e11
   8138c:	00082ff1 	.word	0x00082ff1

00081390 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81390:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   81392:	2401      	movs	r4, #1
   81394:	4b04      	ldr	r3, [pc, #16]	; (813a8 <main_vendor_enable+0x18>)
   81396:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81398:	4a04      	ldr	r2, [pc, #16]	; (813ac <main_vendor_enable+0x1c>)
   8139a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8139e:	4804      	ldr	r0, [pc, #16]	; (813b0 <main_vendor_enable+0x20>)
   813a0:	4b04      	ldr	r3, [pc, #16]	; (813b4 <main_vendor_enable+0x24>)
   813a2:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   813a4:	4620      	mov	r0, r4
   813a6:	bd10      	pop	{r4, pc}
   813a8:	20000580 	.word	0x20000580
   813ac:	00081841 	.word	0x00081841
   813b0:	20002260 	.word	0x20002260
   813b4:	0008317d 	.word	0x0008317d

000813b8 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   813b8:	2200      	movs	r2, #0
   813ba:	4b01      	ldr	r3, [pc, #4]	; (813c0 <main_vendor_disable+0x8>)
   813bc:	701a      	strb	r2, [r3, #0]
   813be:	4770      	bx	lr
   813c0:	20000580 	.word	0x20000580

000813c4 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
   813c4:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   813c6:	4b10      	ldr	r3, [pc, #64]	; (81408 <main_setup_out_received+0x44>)
   813c8:	4a10      	ldr	r2, [pc, #64]	; (8140c <main_setup_out_received+0x48>)
   813ca:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   813cc:	88da      	ldrh	r2, [r3, #6]
   813ce:	2a40      	cmp	r2, #64	; 0x40
   813d0:	bf28      	it	cs
   813d2:	2240      	movcs	r2, #64	; 0x40
   813d4:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813d6:	4b0e      	ldr	r3, [pc, #56]	; (81410 <main_setup_out_received+0x4c>)
   813d8:	781b      	ldrb	r3, [r3, #0]
   813da:	b19b      	cbz	r3, 81404 <main_setup_out_received+0x40>
   813dc:	4d0d      	ldr	r5, [pc, #52]	; (81414 <main_setup_out_received+0x50>)
   813de:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   813e2:	3a01      	subs	r2, #1
   813e4:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   813e8:	3b01      	subs	r3, #1
   813ea:	b2db      	uxtb	r3, r3
   813ec:	1ad3      	subs	r3, r2, r3
   813ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   813f2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813f6:	4798      	blx	r3
        if (handler_status == true) {
   813f8:	4603      	mov	r3, r0
   813fa:	b908      	cbnz	r0, 81400 <main_setup_out_received+0x3c>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813fc:	42ac      	cmp	r4, r5
   813fe:	d1f8      	bne.n	813f2 <main_setup_out_received+0x2e>
        }
    }

    return false;

}
   81400:	4618      	mov	r0, r3
   81402:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81404:	2300      	movs	r3, #0
   81406:	e7fb      	b.n	81400 <main_setup_out_received+0x3c>
   81408:	200026a4 	.word	0x200026a4
   8140c:	20002220 	.word	0x20002220
   81410:	20001c01 	.word	0x20001c01
   81414:	20001c04 	.word	0x20001c04

00081418 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81418:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8141a:	4b0c      	ldr	r3, [pc, #48]	; (8144c <main_setup_in_received+0x34>)
   8141c:	781b      	ldrb	r3, [r3, #0]
   8141e:	b19b      	cbz	r3, 81448 <main_setup_in_received+0x30>
   81420:	4d0b      	ldr	r5, [pc, #44]	; (81450 <main_setup_in_received+0x38>)
   81422:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   81426:	3a01      	subs	r2, #1
   81428:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   8142c:	3b01      	subs	r3, #1
   8142e:	b2db      	uxtb	r3, r3
   81430:	1ad3      	subs	r3, r2, r3
   81432:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81436:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8143a:	4798      	blx	r3
        if (handler_status == true) {
   8143c:	4603      	mov	r3, r0
   8143e:	b908      	cbnz	r0, 81444 <main_setup_in_received+0x2c>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81440:	42ac      	cmp	r4, r5
   81442:	d1f8      	bne.n	81436 <main_setup_in_received+0x1e>
        }
    }

    return false;

   81444:	4618      	mov	r0, r3
   81446:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81448:	2300      	movs	r3, #0
   8144a:	e7fb      	b.n	81444 <main_setup_in_received+0x2c>
   8144c:	20001c00 	.word	0x20001c00
   81450:	20001bc0 	.word	0x20001bc0

00081454 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81454:	4b05      	ldr	r3, [pc, #20]	; (8146c <naeusb_setup_out_received+0x18>)
   81456:	785b      	ldrb	r3, [r3, #1]
   81458:	2b22      	cmp	r3, #34	; 0x22
   8145a:	d104      	bne.n	81466 <naeusb_setup_out_received+0x12>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8145c:	4a04      	ldr	r2, [pc, #16]	; (81470 <naeusb_setup_out_received+0x1c>)
   8145e:	4b03      	ldr	r3, [pc, #12]	; (8146c <naeusb_setup_out_received+0x18>)
   81460:	611a      	str	r2, [r3, #16]
            return true;
   81462:	2001      	movs	r0, #1
   81464:	4770      	bx	lr
            break;
    }
    return false;
   81466:	2000      	movs	r0, #0
}
   81468:	4770      	bx	lr
   8146a:	bf00      	nop
   8146c:	200026a4 	.word	0x200026a4
   81470:	00081475 	.word	0x00081475

00081474 <naeusb_sam_cfg_out>:
{
   81474:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81476:	4b22      	ldr	r3, [pc, #136]	; (81500 <naeusb_sam_cfg_out+0x8c>)
   81478:	789b      	ldrb	r3, [r3, #2]
   8147a:	3b01      	subs	r3, #1
   8147c:	2b10      	cmp	r3, #16
   8147e:	d83e      	bhi.n	814fe <naeusb_sam_cfg_out+0x8a>
   81480:	e8df f003 	tbb	[pc, r3]
   81484:	3d181409 	.word	0x3d181409
   81488:	3d3d3d3d 	.word	0x3d3d3d3d
   8148c:	3d3d3d3d 	.word	0x3d3d3d3d
   81490:	2c3d3d3d 	.word	0x2c3d3d3d
   81494:	3b          	.byte	0x3b
   81495:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   81496:	203e      	movs	r0, #62	; 0x3e
   81498:	4b1a      	ldr	r3, [pc, #104]	; (81504 <naeusb_sam_cfg_out+0x90>)
   8149a:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   8149c:	4c1a      	ldr	r4, [pc, #104]	; (81508 <naeusb_sam_cfg_out+0x94>)
   8149e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814a0:	2800      	cmp	r0, #0
   814a2:	d0fc      	beq.n	8149e <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   814a4:	2010      	movs	r0, #16
   814a6:	4b19      	ldr	r3, [pc, #100]	; (8150c <naeusb_sam_cfg_out+0x98>)
   814a8:	4798      	blx	r3
        break;
   814aa:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814ac:	2010      	movs	r0, #16
   814ae:	4b18      	ldr	r3, [pc, #96]	; (81510 <naeusb_sam_cfg_out+0x9c>)
   814b0:	4798      	blx	r3
        break;
   814b2:	bd10      	pop	{r4, pc}
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   814b4:	2201      	movs	r2, #1
   814b6:	210c      	movs	r1, #12
   814b8:	4816      	ldr	r0, [pc, #88]	; (81514 <naeusb_sam_cfg_out+0xa0>)
   814ba:	4b17      	ldr	r3, [pc, #92]	; (81518 <naeusb_sam_cfg_out+0xa4>)
   814bc:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   814be:	4b17      	ldr	r3, [pc, #92]	; (8151c <naeusb_sam_cfg_out+0xa8>)
   814c0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814c2:	4b17      	ldr	r3, [pc, #92]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814c4:	685a      	ldr	r2, [r3, #4]
   814c6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814ca:	d1fb      	bne.n	814c4 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814cc:	4a14      	ldr	r2, [pc, #80]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814ce:	6813      	ldr	r3, [r2, #0]
   814d0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   814d4:	f043 0305 	orr.w	r3, r3, #5
   814d8:	6013      	str	r3, [r2, #0]
   814da:	e7fe      	b.n	814da <naeusb_sam_cfg_out+0x66>
   814dc:	4b0f      	ldr	r3, [pc, #60]	; (8151c <naeusb_sam_cfg_out+0xa8>)
   814de:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814e0:	4b0f      	ldr	r3, [pc, #60]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814e2:	685a      	ldr	r2, [r3, #4]
   814e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814e8:	d1fb      	bne.n	814e2 <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814ea:	4a0d      	ldr	r2, [pc, #52]	; (81520 <naeusb_sam_cfg_out+0xac>)
   814ec:	6813      	ldr	r3, [r2, #0]
   814ee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   814f2:	f043 0305 	orr.w	r3, r3, #5
   814f6:	6013      	str	r3, [r2, #0]
   814f8:	e7fe      	b.n	814f8 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   814fa:	4b0a      	ldr	r3, [pc, #40]	; (81524 <naeusb_sam_cfg_out+0xb0>)
   814fc:	4798      	blx	r3
   814fe:	bd10      	pop	{r4, pc}
   81500:	200026a4 	.word	0x200026a4
   81504:	00083f71 	.word	0x00083f71
   81508:	00083f99 	.word	0x00083f99
   8150c:	00083ea9 	.word	0x00083ea9
   81510:	00083f0d 	.word	0x00083f0d
   81514:	400e0800 	.word	0x400e0800
   81518:	00082ec9 	.word	0x00082ec9
   8151c:	00084d91 	.word	0x00084d91
   81520:	400e1200 	.word	0x400e1200
   81524:	000820f5 	.word	0x000820f5

00081528 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81528:	4b05      	ldr	r3, [pc, #20]	; (81540 <naeusb_fw_version_in+0x18>)
   8152a:	2200      	movs	r2, #0
   8152c:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8152e:	2134      	movs	r1, #52	; 0x34
   81530:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   81532:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81534:	4a03      	ldr	r2, [pc, #12]	; (81544 <naeusb_fw_version_in+0x1c>)
   81536:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81538:	2303      	movs	r3, #3
   8153a:	8193      	strh	r3, [r2, #12]
}
   8153c:	2001      	movs	r0, #1
   8153e:	4770      	bx	lr
   81540:	200021e0 	.word	0x200021e0
   81544:	200026a4 	.word	0x200026a4

00081548 <naeusb_build_date_in>:
{
   81548:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   8154a:	4c0a      	ldr	r4, [pc, #40]	; (81574 <naeusb_build_date_in+0x2c>)
   8154c:	2240      	movs	r2, #64	; 0x40
   8154e:	490a      	ldr	r1, [pc, #40]	; (81578 <naeusb_build_date_in+0x30>)
   81550:	4620      	mov	r0, r4
   81552:	4d0a      	ldr	r5, [pc, #40]	; (8157c <naeusb_build_date_in+0x34>)
   81554:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81556:	2320      	movs	r3, #32
   81558:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   8155a:	2237      	movs	r2, #55	; 0x37
   8155c:	4908      	ldr	r1, [pc, #32]	; (81580 <naeusb_build_date_in+0x38>)
   8155e:	f104 0009 	add.w	r0, r4, #9
   81562:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81564:	4d07      	ldr	r5, [pc, #28]	; (81584 <naeusb_build_date_in+0x3c>)
   81566:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81568:	4620      	mov	r0, r4
   8156a:	4b07      	ldr	r3, [pc, #28]	; (81588 <naeusb_build_date_in+0x40>)
   8156c:	4798      	blx	r3
   8156e:	81a8      	strh	r0, [r5, #12]
}
   81570:	2001      	movs	r0, #1
   81572:	bd38      	pop	{r3, r4, r5, pc}
   81574:	200021e0 	.word	0x200021e0
   81578:	0008c0ac 	.word	0x0008c0ac
   8157c:	000863cd 	.word	0x000863cd
   81580:	0008c0a0 	.word	0x0008c0a0
   81584:	200026a4 	.word	0x200026a4
   81588:	00086371 	.word	0x00086371

0008158c <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   8158c:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   8158e:	4b07      	ldr	r3, [pc, #28]	; (815ac <naeusb_setup_in_received+0x20>)
   81590:	785b      	ldrb	r3, [r3, #1]
   81592:	2b17      	cmp	r3, #23
   81594:	d003      	beq.n	8159e <naeusb_setup_in_received+0x12>
   81596:	2b40      	cmp	r3, #64	; 0x40
   81598:	d004      	beq.n	815a4 <naeusb_setup_in_received+0x18>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
   8159a:	2000      	movs	r0, #0
}
   8159c:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   8159e:	4b04      	ldr	r3, [pc, #16]	; (815b0 <naeusb_setup_in_received+0x24>)
   815a0:	4798      	blx	r3
   815a2:	bd08      	pop	{r3, pc}
            return naeusb_build_date_in();
   815a4:	4b03      	ldr	r3, [pc, #12]	; (815b4 <naeusb_setup_in_received+0x28>)
   815a6:	4798      	blx	r3
   815a8:	bd08      	pop	{r3, pc}
   815aa:	bf00      	nop
   815ac:	200026a4 	.word	0x200026a4
   815b0:	00081529 	.word	0x00081529
   815b4:	00081549 	.word	0x00081549

000815b8 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   815b8:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   815ba:	4803      	ldr	r0, [pc, #12]	; (815c8 <naeusb_register_handlers+0x10>)
   815bc:	4b03      	ldr	r3, [pc, #12]	; (815cc <naeusb_register_handlers+0x14>)
   815be:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   815c0:	4803      	ldr	r0, [pc, #12]	; (815d0 <naeusb_register_handlers+0x18>)
   815c2:	4b04      	ldr	r3, [pc, #16]	; (815d4 <naeusb_register_handlers+0x1c>)
   815c4:	4798      	blx	r3
   815c6:	bd08      	pop	{r3, pc}
   815c8:	0008158d 	.word	0x0008158d
   815cc:	00081311 	.word	0x00081311
   815d0:	00081455 	.word	0x00081455
   815d4:	00081335 	.word	0x00081335

000815d8 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   815d8:	b508      	push	{r3, lr}
	uint32_t prog_freq = 1E6;
    switch(udd_g_ctrlreq.req.wValue){
   815da:	4b1b      	ldr	r3, [pc, #108]	; (81648 <openadc_progfpga_bulk+0x70>)
   815dc:	885b      	ldrh	r3, [r3, #2]
   815de:	3ba0      	subs	r3, #160	; 0xa0
   815e0:	2b12      	cmp	r3, #18
   815e2:	d830      	bhi.n	81646 <openadc_progfpga_bulk+0x6e>
   815e4:	e8df f003 	tbb	[pc, r3]
   815e8:	2f1a140a 	.word	0x2f1a140a
   815ec:	2f2f2f2f 	.word	0x2f2f2f2f
   815f0:	2f2f2f2f 	.word	0x2f2f2f2f
   815f4:	2f2f2f2f 	.word	0x2f2f2f2f
   815f8:	281e      	.short	0x281e
   815fa:	2c          	.byte	0x2c
   815fb:	00          	.byte	0x00
    case 0xA0:
        
        if (udd_g_ctrlreq.req.wLength == 4) {
   815fc:	4b12      	ldr	r3, [pc, #72]	; (81648 <openadc_progfpga_bulk+0x70>)
   815fe:	88db      	ldrh	r3, [r3, #6]
   81600:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   81602:	bf06      	itte	eq
   81604:	4b11      	ldreq	r3, [pc, #68]	; (8164c <openadc_progfpga_bulk+0x74>)
   81606:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81608:	4811      	ldrne	r0, [pc, #68]	; (81650 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_setup1(prog_freq);
   8160a:	4b12      	ldr	r3, [pc, #72]	; (81654 <openadc_progfpga_bulk+0x7c>)
   8160c:	4798      	blx	r3
        break;
   8160e:	bd08      	pop	{r3, pc}

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81610:	4b11      	ldr	r3, [pc, #68]	; (81658 <openadc_progfpga_bulk+0x80>)
   81612:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81614:	220a      	movs	r2, #10
   81616:	4b11      	ldr	r3, [pc, #68]	; (8165c <openadc_progfpga_bulk+0x84>)
   81618:	701a      	strb	r2, [r3, #0]
        break;
   8161a:	bd08      	pop	{r3, pc}

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   8161c:	2200      	movs	r2, #0
   8161e:	4b0f      	ldr	r3, [pc, #60]	; (8165c <openadc_progfpga_bulk+0x84>)
   81620:	701a      	strb	r2, [r3, #0]
        break;
   81622:	bd08      	pop	{r3, pc}

    case 0xB0:
        if (udd_g_ctrlreq.req.wLength == 4) {
   81624:	4b08      	ldr	r3, [pc, #32]	; (81648 <openadc_progfpga_bulk+0x70>)
   81626:	88db      	ldrh	r3, [r3, #6]
   81628:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   8162a:	bf06      	itte	eq
   8162c:	4b07      	ldreq	r3, [pc, #28]	; (8164c <openadc_progfpga_bulk+0x74>)
   8162e:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81630:	4807      	ldrne	r0, [pc, #28]	; (81650 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_spi_setup1(prog_freq);
   81632:	4b0b      	ldr	r3, [pc, #44]	; (81660 <openadc_progfpga_bulk+0x88>)
   81634:	4798      	blx	r3
        break;
   81636:	bd08      	pop	{r3, pc}

    case 0xB1:
        blockendpoint_usage = bep_fpgabitstreamspi;
   81638:	2214      	movs	r2, #20
   8163a:	4b08      	ldr	r3, [pc, #32]	; (8165c <openadc_progfpga_bulk+0x84>)
   8163c:	701a      	strb	r2, [r3, #0]
        break;
   8163e:	bd08      	pop	{r3, pc}
    
    case 0xB2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81640:	2200      	movs	r2, #0
   81642:	4b06      	ldr	r3, [pc, #24]	; (8165c <openadc_progfpga_bulk+0x84>)
   81644:	701a      	strb	r2, [r3, #0]
   81646:	bd08      	pop	{r3, pc}
   81648:	200026a4 	.word	0x200026a4
   8164c:	20002220 	.word	0x20002220
   81650:	000f4240 	.word	0x000f4240
   81654:	000808cd 	.word	0x000808cd
   81658:	0008095d 	.word	0x0008095d
   8165c:	20001c44 	.word	0x20001c44
   81660:	0008082d 	.word	0x0008082d

00081664 <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   81664:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   81666:	2200      	movs	r2, #0
   81668:	4b20      	ldr	r3, [pc, #128]	; (816ec <openadc_setup_out_received+0x88>)
   8166a:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8166c:	4b20      	ldr	r3, [pc, #128]	; (816f0 <openadc_setup_out_received+0x8c>)
   8166e:	785b      	ldrb	r3, [r3, #1]
   81670:	3b10      	subs	r3, #16
   81672:	2b06      	cmp	r3, #6
   81674:	d82f      	bhi.n	816d6 <openadc_setup_out_received+0x72>
   81676:	e8df f003 	tbb	[pc, r3]
   8167a:	1704      	.short	0x1704
   8167c:	2e2e200e 	.word	0x2e2e200e
   81680:	29          	.byte	0x29
   81681:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81682:	2006      	movs	r0, #6
   81684:	4b1b      	ldr	r3, [pc, #108]	; (816f4 <openadc_setup_out_received+0x90>)
   81686:	4798      	blx	r3
   81688:	2800      	cmp	r0, #0
   8168a:	d026      	beq.n	816da <openadc_setup_out_received+0x76>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   8168c:	4a1a      	ldr	r2, [pc, #104]	; (816f8 <openadc_setup_out_received+0x94>)
   8168e:	4b18      	ldr	r3, [pc, #96]	; (816f0 <openadc_setup_out_received+0x8c>)
   81690:	611a      	str	r2, [r3, #16]
            return true;
   81692:	2001      	movs	r0, #1
   81694:	bd08      	pop	{r3, pc}
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81696:	2006      	movs	r0, #6
   81698:	4b16      	ldr	r3, [pc, #88]	; (816f4 <openadc_setup_out_received+0x90>)
   8169a:	4798      	blx	r3
   8169c:	b1f8      	cbz	r0, 816de <openadc_setup_out_received+0x7a>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   8169e:	4a17      	ldr	r2, [pc, #92]	; (816fc <openadc_setup_out_received+0x98>)
   816a0:	4b13      	ldr	r3, [pc, #76]	; (816f0 <openadc_setup_out_received+0x8c>)
   816a2:	611a      	str	r2, [r3, #16]
            return true;
   816a4:	2001      	movs	r0, #1
   816a6:	bd08      	pop	{r3, pc}
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   816a8:	2006      	movs	r0, #6
   816aa:	4b12      	ldr	r3, [pc, #72]	; (816f4 <openadc_setup_out_received+0x90>)
   816ac:	4798      	blx	r3
   816ae:	b1c0      	cbz	r0, 816e2 <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   816b0:	4a13      	ldr	r2, [pc, #76]	; (81700 <openadc_setup_out_received+0x9c>)
   816b2:	4b0f      	ldr	r3, [pc, #60]	; (816f0 <openadc_setup_out_received+0x8c>)
   816b4:	611a      	str	r2, [r3, #16]
            return true;
   816b6:	2001      	movs	r0, #1
   816b8:	bd08      	pop	{r3, pc}
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   816ba:	2006      	movs	r0, #6
   816bc:	4b0d      	ldr	r3, [pc, #52]	; (816f4 <openadc_setup_out_received+0x90>)
   816be:	4798      	blx	r3
   816c0:	b188      	cbz	r0, 816e6 <openadc_setup_out_received+0x82>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   816c2:	4a10      	ldr	r2, [pc, #64]	; (81704 <openadc_setup_out_received+0xa0>)
   816c4:	4b0a      	ldr	r3, [pc, #40]	; (816f0 <openadc_setup_out_received+0x8c>)
   816c6:	611a      	str	r2, [r3, #16]
            return true;
   816c8:	2001      	movs	r0, #1
   816ca:	bd08      	pop	{r3, pc}
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   816cc:	4a0e      	ldr	r2, [pc, #56]	; (81708 <openadc_setup_out_received+0xa4>)
   816ce:	4b08      	ldr	r3, [pc, #32]	; (816f0 <openadc_setup_out_received+0x8c>)
   816d0:	611a      	str	r2, [r3, #16]
        return true;
   816d2:	2001      	movs	r0, #1
   816d4:	bd08      	pop	{r3, pc}

    default:
        return false;
   816d6:	2000      	movs	r0, #0
   816d8:	bd08      	pop	{r3, pc}
    }

    return false;
   816da:	2000      	movs	r0, #0
   816dc:	bd08      	pop	{r3, pc}
   816de:	2000      	movs	r0, #0
   816e0:	bd08      	pop	{r3, pc}
   816e2:	2000      	movs	r0, #0
   816e4:	bd08      	pop	{r3, pc}
   816e6:	2000      	movs	r0, #0
}
   816e8:	bd08      	pop	{r3, pc}
   816ea:	bf00      	nop
   816ec:	20001c44 	.word	0x20001c44
   816f0:	200026a4 	.word	0x200026a4
   816f4:	000820c9 	.word	0x000820c9
   816f8:	000817d5 	.word	0x000817d5
   816fc:	0008173d 	.word	0x0008173d
   81700:	0008170d 	.word	0x0008170d
   81704:	00081781 	.word	0x00081781
   81708:	000815d9 	.word	0x000815d9

0008170c <openadc_writemem_bulk>:
{
   8170c:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8170e:	4b07      	ldr	r3, [pc, #28]	; (8172c <openadc_writemem_bulk+0x20>)
   81710:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   81712:	4b07      	ldr	r3, [pc, #28]	; (81730 <openadc_writemem_bulk+0x24>)
   81714:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   81716:	2504      	movs	r5, #4
   81718:	4c06      	ldr	r4, [pc, #24]	; (81734 <openadc_writemem_bulk+0x28>)
   8171a:	4628      	mov	r0, r5
   8171c:	47a0      	blx	r4
   8171e:	2800      	cmp	r0, #0
   81720:	d0fb      	beq.n	8171a <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   81722:	4630      	mov	r0, r6
   81724:	4b04      	ldr	r3, [pc, #16]	; (81738 <openadc_writemem_bulk+0x2c>)
   81726:	4798      	blx	r3
   81728:	bd70      	pop	{r4, r5, r6, pc}
   8172a:	bf00      	nop
   8172c:	20002220 	.word	0x20002220
   81730:	000820f5 	.word	0x000820f5
   81734:	000820c9 	.word	0x000820c9
   81738:	0008210d 	.word	0x0008210d

0008173c <openadc_readmem_ctrl>:
{
   8173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8173e:	4b0a      	ldr	r3, [pc, #40]	; (81768 <openadc_readmem_ctrl+0x2c>)
   81740:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81742:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81744:	4b09      	ldr	r3, [pc, #36]	; (8176c <openadc_readmem_ctrl+0x30>)
   81746:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   81748:	2505      	movs	r5, #5
   8174a:	4c09      	ldr	r4, [pc, #36]	; (81770 <openadc_readmem_ctrl+0x34>)
   8174c:	4628      	mov	r0, r5
   8174e:	47a0      	blx	r4
   81750:	2800      	cmp	r0, #0
   81752:	d0fb      	beq.n	8174c <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   81754:	4638      	mov	r0, r7
   81756:	4b07      	ldr	r3, [pc, #28]	; (81774 <openadc_readmem_ctrl+0x38>)
   81758:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   8175a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   8175e:	4b06      	ldr	r3, [pc, #24]	; (81778 <openadc_readmem_ctrl+0x3c>)
   81760:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   81762:	4b06      	ldr	r3, [pc, #24]	; (8177c <openadc_readmem_ctrl+0x40>)
   81764:	601e      	str	r6, [r3, #0]
   81766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81768:	20002220 	.word	0x20002220
   8176c:	000820f5 	.word	0x000820f5
   81770:	000820c9 	.word	0x000820c9
   81774:	0008210d 	.word	0x0008210d
   81778:	20001c48 	.word	0x20001c48
   8177c:	20001c4c 	.word	0x20001c4c

00081780 <openadc_writemem_ctrl>:
{
   81780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81782:	4b0e      	ldr	r3, [pc, #56]	; (817bc <openadc_writemem_ctrl+0x3c>)
   81784:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81786:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81788:	4b0d      	ldr	r3, [pc, #52]	; (817c0 <openadc_writemem_ctrl+0x40>)
   8178a:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   8178c:	2601      	movs	r6, #1
   8178e:	4d0d      	ldr	r5, [pc, #52]	; (817c4 <openadc_writemem_ctrl+0x44>)
   81790:	4630      	mov	r0, r6
   81792:	47a8      	blx	r5
   81794:	2800      	cmp	r0, #0
   81796:	d0fb      	beq.n	81790 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   81798:	4638      	mov	r0, r7
   8179a:	4b0b      	ldr	r3, [pc, #44]	; (817c8 <openadc_writemem_ctrl+0x48>)
   8179c:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   8179e:	b14c      	cbz	r4, 817b4 <openadc_writemem_ctrl+0x34>
   817a0:	4a0a      	ldr	r2, [pc, #40]	; (817cc <openadc_writemem_ctrl+0x4c>)
   817a2:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   817a4:	4d0a      	ldr	r5, [pc, #40]	; (817d0 <openadc_writemem_ctrl+0x50>)
   817a6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   817aa:	6829      	ldr	r1, [r5, #0]
   817ac:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   817ae:	3301      	adds	r3, #1
   817b0:	429c      	cmp	r4, r3
   817b2:	d1f8      	bne.n	817a6 <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   817b4:	4b02      	ldr	r3, [pc, #8]	; (817c0 <openadc_writemem_ctrl+0x40>)
   817b6:	4798      	blx	r3
   817b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   817ba:	bf00      	nop
   817bc:	20002220 	.word	0x20002220
   817c0:	000820f5 	.word	0x000820f5
   817c4:	000820c9 	.word	0x000820c9
   817c8:	0008210d 	.word	0x0008210d
   817cc:	20002227 	.word	0x20002227
   817d0:	20000824 	.word	0x20000824

000817d4 <openadc_readmem_bulk>:
{
   817d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   817d6:	4b0a      	ldr	r3, [pc, #40]	; (81800 <openadc_readmem_bulk+0x2c>)
   817d8:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   817da:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   817dc:	4b09      	ldr	r3, [pc, #36]	; (81804 <openadc_readmem_bulk+0x30>)
   817de:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   817e0:	2502      	movs	r5, #2
   817e2:	4c09      	ldr	r4, [pc, #36]	; (81808 <openadc_readmem_bulk+0x34>)
   817e4:	4628      	mov	r0, r5
   817e6:	47a0      	blx	r4
   817e8:	2800      	cmp	r0, #0
   817ea:	d0fb      	beq.n	817e4 <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   817ec:	4638      	mov	r0, r7
   817ee:	4b07      	ldr	r3, [pc, #28]	; (8180c <openadc_readmem_bulk+0x38>)
   817f0:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   817f2:	4a07      	ldr	r2, [pc, #28]	; (81810 <openadc_readmem_bulk+0x3c>)
   817f4:	4631      	mov	r1, r6
   817f6:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   817fa:	4b06      	ldr	r3, [pc, #24]	; (81814 <openadc_readmem_bulk+0x40>)
   817fc:	4798      	blx	r3
   817fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81800:	20002220 	.word	0x20002220
   81804:	000820f5 	.word	0x000820f5
   81808:	000820c9 	.word	0x000820c9
   8180c:	0008210d 	.word	0x0008210d
   81810:	00081819 	.word	0x00081819
   81814:	00083161 	.word	0x00083161

00081818 <main_vendor_bulk_in_received>:
{
   81818:	b510      	push	{r4, lr}
   8181a:	4604      	mov	r4, r0
    FPGA_releaselock();
   8181c:	4b05      	ldr	r3, [pc, #20]	; (81834 <main_vendor_bulk_in_received+0x1c>)
   8181e:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81820:	b104      	cbz	r4, 81824 <main_vendor_bulk_in_received+0xc>
   81822:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   81824:	4b04      	ldr	r3, [pc, #16]	; (81838 <main_vendor_bulk_in_received+0x20>)
   81826:	4798      	blx	r3
   81828:	2802      	cmp	r0, #2
   8182a:	d1fa      	bne.n	81822 <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   8182c:	2000      	movs	r0, #0
   8182e:	4b03      	ldr	r3, [pc, #12]	; (8183c <main_vendor_bulk_in_received+0x24>)
   81830:	4798      	blx	r3
   81832:	e7f6      	b.n	81822 <main_vendor_bulk_in_received+0xa>
   81834:	000820f5 	.word	0x000820f5
   81838:	00082101 	.word	0x00082101
   8183c:	000820c9 	.word	0x000820c9

00081840 <main_vendor_bulk_out_received>:
{
   81840:	b570      	push	{r4, r5, r6, lr}
   81842:	4605      	mov	r5, r0
   81844:	460c      	mov	r4, r1
    FPGA_releaselock();
   81846:	4b1f      	ldr	r3, [pc, #124]	; (818c4 <main_vendor_bulk_out_received+0x84>)
   81848:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   8184a:	b9bd      	cbnz	r5, 8187c <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   8184c:	4b1e      	ldr	r3, [pc, #120]	; (818c8 <main_vendor_bulk_out_received+0x88>)
   8184e:	781b      	ldrb	r3, [r3, #0]
   81850:	b9f3      	cbnz	r3, 81890 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81852:	b144      	cbz	r4, 81866 <main_vendor_bulk_out_received+0x26>
   81854:	4a1d      	ldr	r2, [pc, #116]	; (818cc <main_vendor_bulk_out_received+0x8c>)
            xram[i] = main_buf_loopback[i];
   81856:	4d1e      	ldr	r5, [pc, #120]	; (818d0 <main_vendor_bulk_out_received+0x90>)
   81858:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   8185c:	6829      	ldr	r1, [r5, #0]
   8185e:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81860:	3301      	adds	r3, #1
   81862:	429c      	cmp	r4, r3
   81864:	d1f8      	bne.n	81858 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   81866:	4b1b      	ldr	r3, [pc, #108]	; (818d4 <main_vendor_bulk_out_received+0x94>)
   81868:	4798      	blx	r3
   8186a:	2804      	cmp	r0, #4
   8186c:	d00d      	beq.n	8188a <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   8186e:	4a1a      	ldr	r2, [pc, #104]	; (818d8 <main_vendor_bulk_out_received+0x98>)
   81870:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81874:	4819      	ldr	r0, [pc, #100]	; (818dc <main_vendor_bulk_out_received+0x9c>)
   81876:	4b1a      	ldr	r3, [pc, #104]	; (818e0 <main_vendor_bulk_out_received+0xa0>)
   81878:	4798      	blx	r3
   8187a:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   8187c:	4a16      	ldr	r2, [pc, #88]	; (818d8 <main_vendor_bulk_out_received+0x98>)
   8187e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81882:	4816      	ldr	r0, [pc, #88]	; (818dc <main_vendor_bulk_out_received+0x9c>)
   81884:	4b16      	ldr	r3, [pc, #88]	; (818e0 <main_vendor_bulk_out_received+0xa0>)
   81886:	4798      	blx	r3
        return;
   81888:	bd70      	pop	{r4, r5, r6, pc}
            FPGA_releaselock();
   8188a:	4b0e      	ldr	r3, [pc, #56]	; (818c4 <main_vendor_bulk_out_received+0x84>)
   8188c:	4798      	blx	r3
   8188e:	e7ee      	b.n	8186e <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81890:	2b0a      	cmp	r3, #10
   81892:	d00c      	beq.n	818ae <main_vendor_bulk_out_received+0x6e>
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   81894:	2b14      	cmp	r3, #20
   81896:	d1ea      	bne.n	8186e <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81898:	2c00      	cmp	r4, #0
   8189a:	d0e8      	beq.n	8186e <main_vendor_bulk_out_received+0x2e>
   8189c:	4d0b      	ldr	r5, [pc, #44]	; (818cc <main_vendor_bulk_out_received+0x8c>)
   8189e:	442c      	add	r4, r5
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   818a0:	4e10      	ldr	r6, [pc, #64]	; (818e4 <main_vendor_bulk_out_received+0xa4>)
   818a2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   818a6:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   818a8:	42a5      	cmp	r5, r4
   818aa:	d1fa      	bne.n	818a2 <main_vendor_bulk_out_received+0x62>
   818ac:	e7df      	b.n	8186e <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   818ae:	2c00      	cmp	r4, #0
   818b0:	d0dd      	beq.n	8186e <main_vendor_bulk_out_received+0x2e>
   818b2:	4d06      	ldr	r5, [pc, #24]	; (818cc <main_vendor_bulk_out_received+0x8c>)
   818b4:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   818b6:	4e0c      	ldr	r6, [pc, #48]	; (818e8 <main_vendor_bulk_out_received+0xa8>)
   818b8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   818bc:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   818be:	42ac      	cmp	r4, r5
   818c0:	d1fa      	bne.n	818b8 <main_vendor_bulk_out_received+0x78>
   818c2:	e7d4      	b.n	8186e <main_vendor_bulk_out_received+0x2e>
   818c4:	000820f5 	.word	0x000820f5
   818c8:	20001c44 	.word	0x20001c44
   818cc:	2000225f 	.word	0x2000225f
   818d0:	20000824 	.word	0x20000824
   818d4:	00082101 	.word	0x00082101
   818d8:	00081841 	.word	0x00081841
   818dc:	20002260 	.word	0x20002260
   818e0:	0008317d 	.word	0x0008317d
   818e4:	000808b5 	.word	0x000808b5
   818e8:	0008096d 	.word	0x0008096d

000818ec <openadc_setup_in_received>:
{
   818ec:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   818ee:	4b13      	ldr	r3, [pc, #76]	; (8193c <openadc_setup_in_received+0x50>)
   818f0:	785b      	ldrb	r3, [r3, #1]
   818f2:	2b12      	cmp	r3, #18
   818f4:	d003      	beq.n	818fe <openadc_setup_in_received+0x12>
   818f6:	2b15      	cmp	r3, #21
   818f8:	d00e      	beq.n	81918 <openadc_setup_in_received+0x2c>
    return false;
   818fa:	2000      	movs	r0, #0
}
   818fc:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   818fe:	4a0f      	ldr	r2, [pc, #60]	; (8193c <openadc_setup_in_received+0x50>)
   81900:	4b0f      	ldr	r3, [pc, #60]	; (81940 <openadc_setup_in_received+0x54>)
   81902:	681b      	ldr	r3, [r3, #0]
   81904:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81906:	4b0f      	ldr	r3, [pc, #60]	; (81944 <openadc_setup_in_received+0x58>)
   81908:	6819      	ldr	r1, [r3, #0]
   8190a:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   8190c:	2200      	movs	r2, #0
   8190e:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   81910:	4b0d      	ldr	r3, [pc, #52]	; (81948 <openadc_setup_in_received+0x5c>)
   81912:	4798      	blx	r3
        return true;
   81914:	2001      	movs	r0, #1
   81916:	bd08      	pop	{r3, pc}
        respbuf[0] = FPGA_ISDONE();
   81918:	200a      	movs	r0, #10
   8191a:	4b0c      	ldr	r3, [pc, #48]	; (8194c <openadc_setup_in_received+0x60>)
   8191c:	4798      	blx	r3
   8191e:	4b0c      	ldr	r3, [pc, #48]	; (81950 <openadc_setup_in_received+0x64>)
   81920:	3000      	adds	r0, #0
   81922:	bf18      	it	ne
   81924:	2001      	movne	r0, #1
   81926:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   81928:	2200      	movs	r2, #0
   8192a:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   8192c:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   8192e:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81930:	4a02      	ldr	r2, [pc, #8]	; (8193c <openadc_setup_in_received+0x50>)
   81932:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81934:	2304      	movs	r3, #4
   81936:	8193      	strh	r3, [r2, #12]
        return true;
   81938:	2001      	movs	r0, #1
   8193a:	bd08      	pop	{r3, pc}
   8193c:	200026a4 	.word	0x200026a4
   81940:	20001c48 	.word	0x20001c48
   81944:	20001c4c 	.word	0x20001c4c
   81948:	000820f5 	.word	0x000820f5
   8194c:	00083c73 	.word	0x00083c73
   81950:	200021e0 	.word	0x200021e0

00081954 <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81954:	b508      	push	{r3, lr}
    FPGA_releaselock();
   81956:	4b04      	ldr	r3, [pc, #16]	; (81968 <openadc_register_handlers+0x14>)
   81958:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   8195a:	4804      	ldr	r0, [pc, #16]	; (8196c <openadc_register_handlers+0x18>)
   8195c:	4b04      	ldr	r3, [pc, #16]	; (81970 <openadc_register_handlers+0x1c>)
   8195e:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81960:	4804      	ldr	r0, [pc, #16]	; (81974 <openadc_register_handlers+0x20>)
   81962:	4b05      	ldr	r3, [pc, #20]	; (81978 <openadc_register_handlers+0x24>)
   81964:	4798      	blx	r3
   81966:	bd08      	pop	{r3, pc}
   81968:	000820f5 	.word	0x000820f5
   8196c:	000818ed 	.word	0x000818ed
   81970:	00081311 	.word	0x00081311
   81974:	00081665 	.word	0x00081665
   81978:	00081335 	.word	0x00081335

0008197c <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   8197c:	4b16      	ldr	r3, [pc, #88]	; (819d8 <usart_setup_out_received+0x5c>)
   8197e:	785b      	ldrb	r3, [r3, #1]
   81980:	3b1a      	subs	r3, #26
   81982:	2b17      	cmp	r3, #23
   81984:	d826      	bhi.n	819d4 <usart_setup_out_received+0x58>
   81986:	e8df f003 	tbb	[pc, r3]
   8198a:	0c11      	.short	0x0c11
   8198c:	25252525 	.word	0x25252525
   81990:	25251b16 	.word	0x25251b16
   81994:	25252525 	.word	0x25252525
   81998:	25252525 	.word	0x25252525
   8199c:	25252525 	.word	0x25252525
   819a0:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   819a2:	4a0e      	ldr	r2, [pc, #56]	; (819dc <usart_setup_out_received+0x60>)
   819a4:	4b0c      	ldr	r3, [pc, #48]	; (819d8 <usart_setup_out_received+0x5c>)
   819a6:	611a      	str	r2, [r3, #16]
        return true;
   819a8:	2001      	movs	r0, #1
   819aa:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   819ac:	4a0c      	ldr	r2, [pc, #48]	; (819e0 <usart_setup_out_received+0x64>)
   819ae:	4b0a      	ldr	r3, [pc, #40]	; (819d8 <usart_setup_out_received+0x5c>)
   819b0:	611a      	str	r2, [r3, #16]
        return true;
   819b2:	2001      	movs	r0, #1
   819b4:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   819b6:	4a0b      	ldr	r2, [pc, #44]	; (819e4 <usart_setup_out_received+0x68>)
   819b8:	4b07      	ldr	r3, [pc, #28]	; (819d8 <usart_setup_out_received+0x5c>)
   819ba:	611a      	str	r2, [r3, #16]
        return true;
   819bc:	2001      	movs	r0, #1
   819be:	4770      	bx	lr
#endif
#ifdef CW_PROG_AVR
		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   819c0:	4a09      	ldr	r2, [pc, #36]	; (819e8 <usart_setup_out_received+0x6c>)
   819c2:	4b05      	ldr	r3, [pc, #20]	; (819d8 <usart_setup_out_received+0x5c>)
   819c4:	611a      	str	r2, [r3, #16]
        return true;
   819c6:	2001      	movs	r0, #1
   819c8:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   819ca:	4a08      	ldr	r2, [pc, #32]	; (819ec <usart_setup_out_received+0x70>)
   819cc:	4b02      	ldr	r3, [pc, #8]	; (819d8 <usart_setup_out_received+0x5c>)
   819ce:	611a      	str	r2, [r3, #16]
        return true;
   819d0:	2001      	movs	r0, #1
   819d2:	4770      	bx	lr
        break;
    }
    return false;
   819d4:	2000      	movs	r0, #0
}
   819d6:	4770      	bx	lr
   819d8:	200026a4 	.word	0x200026a4
   819dc:	00081d7d 	.word	0x00081d7d
   819e0:	00081dc5 	.word	0x00081dc5
   819e4:	000819f1 	.word	0x000819f1
   819e8:	000819fd 	.word	0x000819fd
   819ec:	00081d89 	.word	0x00081d89

000819f0 <ctrl_xmega_program_void>:
{
   819f0:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   819f2:	4b01      	ldr	r3, [pc, #4]	; (819f8 <ctrl_xmega_program_void+0x8>)
   819f4:	4798      	blx	r3
   819f6:	bd08      	pop	{r3, pc}
   819f8:	000827f1 	.word	0x000827f1

000819fc <ctrl_avr_program_void>:
{
   819fc:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   819fe:	4b01      	ldr	r3, [pc, #4]	; (81a04 <ctrl_avr_program_void+0x8>)
   81a00:	4798      	blx	r3
   81a02:	bd08      	pop	{r3, pc}
   81a04:	00082135 	.word	0x00082135

00081a08 <usart0_enableIO>:
{
   81a08:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81a0a:	200d      	movs	r0, #13
   81a0c:	4b0a      	ldr	r3, [pc, #40]	; (81a38 <usart0_enableIO+0x30>)
   81a0e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81a10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a14:	2013      	movs	r0, #19
   81a16:	4c09      	ldr	r4, [pc, #36]	; (81a3c <usart0_enableIO+0x34>)
   81a18:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a1e:	2012      	movs	r0, #18
   81a20:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81a22:	4b07      	ldr	r3, [pc, #28]	; (81a40 <usart0_enableIO+0x38>)
   81a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81a28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81a2c:	2130      	movs	r1, #48	; 0x30
   81a2e:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81a32:	601a      	str	r2, [r3, #0]
   81a34:	bd10      	pop	{r4, pc}
   81a36:	bf00      	nop
   81a38:	00084009 	.word	0x00084009
   81a3c:	00083cc5 	.word	0x00083cc5
   81a40:	e000e100 	.word	0xe000e100

00081a44 <usart_enableIO>:
{
   81a44:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   81a46:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81a4a:	b103      	cbz	r3, 81a4e <usart_enableIO+0xa>
   81a4c:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   81a4e:	4b01      	ldr	r3, [pc, #4]	; (81a54 <usart_enableIO+0x10>)
   81a50:	4798      	blx	r3
}
   81a52:	e7fb      	b.n	81a4c <usart_enableIO+0x8>
   81a54:	00081a09 	.word	0x00081a09

00081a58 <generic_isr>:
{
   81a58:	b570      	push	{r4, r5, r6, lr}
   81a5a:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81a5c:	6800      	ldr	r0, [r0, #0]
   81a5e:	4b19      	ldr	r3, [pc, #100]	; (81ac4 <generic_isr+0x6c>)
   81a60:	4798      	blx	r3
   81a62:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81a64:	f010 0f01 	tst.w	r0, #1
   81a68:	d103      	bne.n	81a72 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81a6a:	f015 0f02 	tst.w	r5, #2
   81a6e:	d115      	bne.n	81a9c <generic_isr+0x44>
   81a70:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81a72:	4620      	mov	r0, r4
   81a74:	f850 3b1c 	ldr.w	r3, [r0], #28
   81a78:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81a7a:	b2f6      	uxtb	r6, r6
   81a7c:	2200      	movs	r2, #0
   81a7e:	4631      	mov	r1, r6
   81a80:	4b11      	ldr	r3, [pc, #68]	; (81ac8 <generic_isr+0x70>)
   81a82:	4798      	blx	r3
        if (driver->cdc_enabled)
   81a84:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81a88:	f013 0f04 	tst.w	r3, #4
   81a8c:	d0ed      	beq.n	81a6a <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   81a8e:	2200      	movs	r2, #0
   81a90:	4631      	mov	r1, r6
   81a92:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81a96:	4b0c      	ldr	r3, [pc, #48]	; (81ac8 <generic_isr+0x70>)
   81a98:	4798      	blx	r3
   81a9a:	e7e6      	b.n	81a6a <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   81a9c:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   81aa0:	4628      	mov	r0, r5
   81aa2:	4b0a      	ldr	r3, [pc, #40]	; (81acc <generic_isr+0x74>)
   81aa4:	4798      	blx	r3
   81aa6:	b920      	cbnz	r0, 81ab2 <generic_isr+0x5a>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81aa8:	2102      	movs	r1, #2
   81aaa:	6820      	ldr	r0, [r4, #0]
   81aac:	4b08      	ldr	r3, [pc, #32]	; (81ad0 <generic_isr+0x78>)
   81aae:	4798      	blx	r3
}
   81ab0:	e7de      	b.n	81a70 <generic_isr+0x18>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81ab2:	6824      	ldr	r4, [r4, #0]
   81ab4:	4628      	mov	r0, r5
   81ab6:	4b07      	ldr	r3, [pc, #28]	; (81ad4 <generic_isr+0x7c>)
   81ab8:	4798      	blx	r3
   81aba:	4601      	mov	r1, r0
   81abc:	4620      	mov	r0, r4
   81abe:	4b06      	ldr	r3, [pc, #24]	; (81ad8 <generic_isr+0x80>)
   81ac0:	4798      	blx	r3
   81ac2:	bd70      	pop	{r4, r5, r6, pc}
   81ac4:	000856b9 	.word	0x000856b9
   81ac8:	000807cb 	.word	0x000807cb
   81acc:	00080813 	.word	0x00080813
   81ad0:	000856b1 	.word	0x000856b1
   81ad4:	000807f5 	.word	0x000807f5
   81ad8:	000856d9 	.word	0x000856d9

00081adc <USART0_Handler>:
{
   81adc:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   81ade:	4802      	ldr	r0, [pc, #8]	; (81ae8 <USART0_Handler+0xc>)
   81ae0:	4b02      	ldr	r3, [pc, #8]	; (81aec <USART0_Handler+0x10>)
   81ae2:	4798      	blx	r3
   81ae4:	bd08      	pop	{r3, pc}
   81ae6:	bf00      	nop
   81ae8:	20000584 	.word	0x20000584
   81aec:	00081a59 	.word	0x00081a59

00081af0 <configure_usart>:
{
   81af0:	b538      	push	{r3, r4, r5, lr}
   81af2:	4604      	mov	r4, r0
   81af4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   81af8:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   81afa:	2a01      	cmp	r2, #1
   81afc:	d00e      	beq.n	81b1c <configure_usart+0x2c>
   81afe:	b122      	cbz	r2, 81b0a <configure_usart+0x1a>
   81b00:	2a02      	cmp	r2, #2
   81b02:	d00f      	beq.n	81b24 <configure_usart+0x34>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81b04:	2200      	movs	r2, #0
   81b06:	6122      	str	r2, [r4, #16]
   81b08:	e001      	b.n	81b0e <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81b0a:	2200      	movs	r2, #0
   81b0c:	6122      	str	r2, [r4, #16]
    switch(parity)
   81b0e:	2b04      	cmp	r3, #4
   81b10:	d827      	bhi.n	81b62 <configure_usart+0x72>
   81b12:	e8df f003 	tbb	[pc, r3]
   81b16:	170b      	.short	0x170b
   81b18:	1e1b      	.short	0x1e1b
   81b1a:	22          	.byte	0x22
   81b1b:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81b20:	6122      	str	r2, [r4, #16]
            break;
   81b22:	e7f4      	b.n	81b0e <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81b28:	6122      	str	r2, [r4, #16]
            break;
   81b2a:	e7f0      	b.n	81b0e <configure_usart+0x1e>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b30:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81b32:	2806      	cmp	r0, #6
   81b34:	d036      	beq.n	81ba4 <configure_usart+0xb4>
   81b36:	2807      	cmp	r0, #7
   81b38:	d037      	beq.n	81baa <configure_usart+0xba>
   81b3a:	2805      	cmp	r0, #5
   81b3c:	d015      	beq.n	81b6a <configure_usart+0x7a>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81b3e:	23c0      	movs	r3, #192	; 0xc0
   81b40:	60a3      	str	r3, [r4, #8]
   81b42:	e014      	b.n	81b6e <configure_usart+0x7e>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81b44:	f44f 7300 	mov.w	r3, #512	; 0x200
   81b48:	60e3      	str	r3, [r4, #12]
            break;
   81b4a:	e7f2      	b.n	81b32 <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81b4c:	2300      	movs	r3, #0
   81b4e:	60e3      	str	r3, [r4, #12]
            break;
   81b50:	e7ef      	b.n	81b32 <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81b52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81b56:	60e3      	str	r3, [r4, #12]
            break;
   81b58:	e7eb      	b.n	81b32 <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81b5e:	60e3      	str	r3, [r4, #12]
            break;							
   81b60:	e7e7      	b.n	81b32 <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b66:	60e3      	str	r3, [r4, #12]
   81b68:	e7e3      	b.n	81b32 <configure_usart+0x42>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81b6a:	2300      	movs	r3, #0
   81b6c:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81b6e:	2300      	movs	r3, #0
   81b70:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   81b72:	4620      	mov	r0, r4
   81b74:	4b0e      	ldr	r3, [pc, #56]	; (81bb0 <configure_usart+0xc0>)
   81b76:	4798      	blx	r3
    driver->enabled = 1;
   81b78:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81b7c:	f043 0302 	orr.w	r3, r3, #2
   81b80:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81b84:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81b88:	4d0a      	ldr	r5, [pc, #40]	; (81bb4 <configure_usart+0xc4>)
   81b8a:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81b8c:	f104 001c 	add.w	r0, r4, #28
   81b90:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81b92:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81b96:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81b98:	4a07      	ldr	r2, [pc, #28]	; (81bb8 <configure_usart+0xc8>)
   81b9a:	1d21      	adds	r1, r4, #4
   81b9c:	6820      	ldr	r0, [r4, #0]
   81b9e:	4b07      	ldr	r3, [pc, #28]	; (81bbc <configure_usart+0xcc>)
   81ba0:	4798      	blx	r3
}
   81ba2:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81ba4:	2340      	movs	r3, #64	; 0x40
   81ba6:	60a3      	str	r3, [r4, #8]
            break;
   81ba8:	e7e1      	b.n	81b6e <configure_usart+0x7e>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81baa:	2380      	movs	r3, #128	; 0x80
   81bac:	60a3      	str	r3, [r4, #8]
            break;					
   81bae:	e7de      	b.n	81b6e <configure_usart+0x7e>
   81bb0:	00081a45 	.word	0x00081a45
   81bb4:	000807c1 	.word	0x000807c1
   81bb8:	05b8d800 	.word	0x05b8d800
   81bbc:	000855d9 	.word	0x000855d9

00081bc0 <usart_driver_putchar>:
{
   81bc0:	b570      	push	{r4, r5, r6, lr}
   81bc2:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81bc4:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81bc8:	2200      	movs	r2, #0
   81bca:	4628      	mov	r0, r5
   81bcc:	4b0e      	ldr	r3, [pc, #56]	; (81c08 <usart_driver_putchar+0x48>)
   81bce:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81bd0:	6820      	ldr	r0, [r4, #0]
   81bd2:	4b0e      	ldr	r3, [pc, #56]	; (81c0c <usart_driver_putchar+0x4c>)
   81bd4:	4798      	blx	r3
   81bd6:	f010 0f02 	tst.w	r0, #2
   81bda:	d000      	beq.n	81bde <usart_driver_putchar+0x1e>
   81bdc:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81bde:	6820      	ldr	r0, [r4, #0]
   81be0:	4b0b      	ldr	r3, [pc, #44]	; (81c10 <usart_driver_putchar+0x50>)
   81be2:	4798      	blx	r3
   81be4:	f010 0f02 	tst.w	r0, #2
   81be8:	d104      	bne.n	81bf4 <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81bea:	2102      	movs	r1, #2
   81bec:	6820      	ldr	r0, [r4, #0]
   81bee:	4b09      	ldr	r3, [pc, #36]	; (81c14 <usart_driver_putchar+0x54>)
   81bf0:	4798      	blx	r3
}
   81bf2:	e7f3      	b.n	81bdc <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81bf4:	6826      	ldr	r6, [r4, #0]
   81bf6:	4628      	mov	r0, r5
   81bf8:	4b07      	ldr	r3, [pc, #28]	; (81c18 <usart_driver_putchar+0x58>)
   81bfa:	4798      	blx	r3
   81bfc:	4601      	mov	r1, r0
   81bfe:	4630      	mov	r0, r6
   81c00:	4b06      	ldr	r3, [pc, #24]	; (81c1c <usart_driver_putchar+0x5c>)
   81c02:	4798      	blx	r3
   81c04:	e7f1      	b.n	81bea <usart_driver_putchar+0x2a>
   81c06:	bf00      	nop
   81c08:	000807cb 	.word	0x000807cb
   81c0c:	000856b5 	.word	0x000856b5
   81c10:	000856b9 	.word	0x000856b9
   81c14:	000856ad 	.word	0x000856ad
   81c18:	000807f5 	.word	0x000807f5
   81c1c:	000856d9 	.word	0x000856d9

00081c20 <get_nth_available_driver>:
		if (port == 0) break;
   81c20:	2800      	cmp	r0, #0
}
   81c22:	4802      	ldr	r0, [pc, #8]	; (81c2c <get_nth_available_driver+0xc>)
   81c24:	bf18      	it	ne
   81c26:	2000      	movne	r0, #0
   81c28:	4770      	bx	lr
   81c2a:	bf00      	nop
   81c2c:	20000584 	.word	0x20000584

00081c30 <ctrl_usart_in>:
{
   81c30:	b510      	push	{r4, lr}
   81c32:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81c34:	4b24      	ldr	r3, [pc, #144]	; (81cc8 <ctrl_usart_in+0x98>)
   81c36:	885c      	ldrh	r4, [r3, #2]
   81c38:	0a20      	lsrs	r0, r4, #8
   81c3a:	4b24      	ldr	r3, [pc, #144]	; (81ccc <ctrl_usart_in+0x9c>)
   81c3c:	4798      	blx	r3
    if (!driver)
   81c3e:	2800      	cmp	r0, #0
   81c40:	d03f      	beq.n	81cc2 <ctrl_usart_in+0x92>
   81c42:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81c44:	b2e0      	uxtb	r0, r4
   81c46:	2814      	cmp	r0, #20
   81c48:	d007      	beq.n	81c5a <ctrl_usart_in+0x2a>
   81c4a:	2818      	cmp	r0, #24
   81c4c:	d01f      	beq.n	81c8e <ctrl_usart_in+0x5e>
    return false;
   81c4e:	2810      	cmp	r0, #16
   81c50:	bf14      	ite	ne
   81c52:	2000      	movne	r0, #0
   81c54:	2001      	moveq	r0, #1
}
   81c56:	b002      	add	sp, #8
   81c58:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81c5a:	4a1b      	ldr	r2, [pc, #108]	; (81cc8 <ctrl_usart_in+0x98>)
   81c5c:	88d2      	ldrh	r2, [r2, #6]
   81c5e:	2a03      	cmp	r2, #3
   81c60:	d801      	bhi.n	81c66 <ctrl_usart_in+0x36>
            return false;
   81c62:	2000      	movs	r0, #0
   81c64:	e7f7      	b.n	81c56 <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   81c66:	4a18      	ldr	r2, [pc, #96]	; (81cc8 <ctrl_usart_in+0x98>)
   81c68:	4c19      	ldr	r4, [pc, #100]	; (81cd0 <ctrl_usart_in+0xa0>)
   81c6a:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81c6c:	2104      	movs	r1, #4
   81c6e:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81c70:	f103 001c 	add.w	r0, r3, #28
   81c74:	4b17      	ldr	r3, [pc, #92]	; (81cd4 <ctrl_usart_in+0xa4>)
   81c76:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81c78:	7020      	strb	r0, [r4, #0]
   81c7a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81c7e:	7063      	strb	r3, [r4, #1]
   81c80:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81c84:	70a3      	strb	r3, [r4, #2]
   81c86:	0e00      	lsrs	r0, r0, #24
   81c88:	70e0      	strb	r0, [r4, #3]
        return true;
   81c8a:	2001      	movs	r0, #1
   81c8c:	e7e3      	b.n	81c56 <ctrl_usart_in+0x26>
        if (udd_g_ctrlreq.req.wLength < 4) {
   81c8e:	4a0e      	ldr	r2, [pc, #56]	; (81cc8 <ctrl_usart_in+0x98>)
   81c90:	88d2      	ldrh	r2, [r2, #6]
   81c92:	2a03      	cmp	r2, #3
   81c94:	d801      	bhi.n	81c9a <ctrl_usart_in+0x6a>
            return false;
   81c96:	2000      	movs	r0, #0
   81c98:	e7dd      	b.n	81c56 <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   81c9a:	4a0b      	ldr	r2, [pc, #44]	; (81cc8 <ctrl_usart_in+0x98>)
   81c9c:	4c0c      	ldr	r4, [pc, #48]	; (81cd0 <ctrl_usart_in+0xa0>)
   81c9e:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81ca0:	2104      	movs	r1, #4
   81ca2:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81ca4:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   81ca8:	4b0a      	ldr	r3, [pc, #40]	; (81cd4 <ctrl_usart_in+0xa4>)
   81caa:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81cac:	7020      	strb	r0, [r4, #0]
   81cae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81cb2:	7063      	strb	r3, [r4, #1]
   81cb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81cb8:	70a3      	strb	r3, [r4, #2]
   81cba:	0e00      	lsrs	r0, r0, #24
   81cbc:	70e0      	strb	r0, [r4, #3]
        return true;
   81cbe:	2001      	movs	r0, #1
   81cc0:	e7c9      	b.n	81c56 <ctrl_usart_in+0x26>
        return false;
   81cc2:	2000      	movs	r0, #0
   81cc4:	e7c7      	b.n	81c56 <ctrl_usart_in+0x26>
   81cc6:	bf00      	nop
   81cc8:	200026a4 	.word	0x200026a4
   81ccc:	00081c21 	.word	0x00081c21
   81cd0:	200021e0 	.word	0x200021e0
   81cd4:	0008081f 	.word	0x0008081f

00081cd8 <ctrl_usart_out>:
{
   81cd8:	b570      	push	{r4, r5, r6, lr}
   81cda:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81cdc:	4b1d      	ldr	r3, [pc, #116]	; (81d54 <ctrl_usart_out+0x7c>)
   81cde:	885c      	ldrh	r4, [r3, #2]
   81ce0:	0a20      	lsrs	r0, r4, #8
   81ce2:	4b1d      	ldr	r3, [pc, #116]	; (81d58 <ctrl_usart_out+0x80>)
   81ce4:	4798      	blx	r3
    if (!driver) return;
   81ce6:	b138      	cbz	r0, 81cf8 <ctrl_usart_out+0x20>
   81ce8:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81cea:	b2e3      	uxtb	r3, r4
   81cec:	2b11      	cmp	r3, #17
   81cee:	d018      	beq.n	81d22 <ctrl_usart_out+0x4a>
   81cf0:	2b12      	cmp	r3, #18
   81cf2:	d023      	beq.n	81d3c <ctrl_usart_out+0x64>
   81cf4:	2b10      	cmp	r3, #16
   81cf6:	d001      	beq.n	81cfc <ctrl_usart_out+0x24>
}
   81cf8:	b002      	add	sp, #8
   81cfa:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   81cfc:	4b15      	ldr	r3, [pc, #84]	; (81d54 <ctrl_usart_out+0x7c>)
   81cfe:	88db      	ldrh	r3, [r3, #6]
   81d00:	2b07      	cmp	r3, #7
   81d02:	d1f9      	bne.n	81cf8 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   81d04:	4c13      	ldr	r4, [pc, #76]	; (81d54 <ctrl_usart_out+0x7c>)
   81d06:	68a3      	ldr	r3, [r4, #8]
   81d08:	681e      	ldr	r6, [r3, #0]
		usart_enableIO(driver);
   81d0a:	4b14      	ldr	r3, [pc, #80]	; (81d5c <ctrl_usart_out+0x84>)
   81d0c:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81d0e:	68a1      	ldr	r1, [r4, #8]
   81d10:	794b      	ldrb	r3, [r1, #5]
   81d12:	790a      	ldrb	r2, [r1, #4]
   81d14:	7989      	ldrb	r1, [r1, #6]
   81d16:	9100      	str	r1, [sp, #0]
   81d18:	4631      	mov	r1, r6
   81d1a:	4628      	mov	r0, r5
   81d1c:	4c10      	ldr	r4, [pc, #64]	; (81d60 <ctrl_usart_out+0x88>)
   81d1e:	47a0      	blx	r4
        return true;
   81d20:	e7ea      	b.n	81cf8 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   81d22:	4b0e      	ldr	r3, [pc, #56]	; (81d5c <ctrl_usart_out+0x84>)
   81d24:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81d26:	6828      	ldr	r0, [r5, #0]
   81d28:	4b0e      	ldr	r3, [pc, #56]	; (81d64 <ctrl_usart_out+0x8c>)
   81d2a:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81d2c:	6828      	ldr	r0, [r5, #0]
   81d2e:	4b0e      	ldr	r3, [pc, #56]	; (81d68 <ctrl_usart_out+0x90>)
   81d30:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81d32:	2101      	movs	r1, #1
   81d34:	6828      	ldr	r0, [r5, #0]
   81d36:	4b0d      	ldr	r3, [pc, #52]	; (81d6c <ctrl_usart_out+0x94>)
   81d38:	4798      	blx	r3
		return;
   81d3a:	e7dd      	b.n	81cf8 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   81d3c:	6800      	ldr	r0, [r0, #0]
   81d3e:	4b0c      	ldr	r3, [pc, #48]	; (81d70 <ctrl_usart_out+0x98>)
   81d40:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81d42:	6828      	ldr	r0, [r5, #0]
   81d44:	4b0b      	ldr	r3, [pc, #44]	; (81d74 <ctrl_usart_out+0x9c>)
   81d46:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81d48:	2103      	movs	r1, #3
   81d4a:	6828      	ldr	r0, [r5, #0]
   81d4c:	4b0a      	ldr	r3, [pc, #40]	; (81d78 <ctrl_usart_out+0xa0>)
   81d4e:	4798      	blx	r3
        return true;
   81d50:	e7d2      	b.n	81cf8 <ctrl_usart_out+0x20>
   81d52:	bf00      	nop
   81d54:	200026a4 	.word	0x200026a4
   81d58:	00081c21 	.word	0x00081c21
   81d5c:	00081a45 	.word	0x00081a45
   81d60:	00081af1 	.word	0x00081af1
   81d64:	000856a1 	.word	0x000856a1
   81d68:	00085695 	.word	0x00085695
   81d6c:	000856ad 	.word	0x000856ad
   81d70:	000856a7 	.word	0x000856a7
   81d74:	0008569b 	.word	0x0008569b
   81d78:	000856b1 	.word	0x000856b1

00081d7c <ctrl_usart_cb>:
{
   81d7c:	b508      	push	{r3, lr}
	ctrl_usart_out();
   81d7e:	4b01      	ldr	r3, [pc, #4]	; (81d84 <ctrl_usart_cb+0x8>)
   81d80:	4798      	blx	r3
   81d82:	bd08      	pop	{r3, pc}
   81d84:	00081cd9 	.word	0x00081cd9

00081d88 <naeusb_cdc_settings_out>:
{
   81d88:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81d8a:	4b0c      	ldr	r3, [pc, #48]	; (81dbc <naeusb_cdc_settings_out+0x34>)
   81d8c:	885e      	ldrh	r6, [r3, #2]
   81d8e:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81d90:	4d0b      	ldr	r5, [pc, #44]	; (81dc0 <naeusb_cdc_settings_out+0x38>)
   81d92:	4620      	mov	r0, r4
   81d94:	47a8      	blx	r5
        if (driver) {
   81d96:	b160      	cbz	r0, 81db2 <naeusb_cdc_settings_out+0x2a>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81d98:	fa46 f204 	asr.w	r2, r6, r4
   81d9c:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   81da0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   81da4:	bf14      	ite	ne
   81da6:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   81daa:	f36f 02c3 	bfceq	r2, #3, #1
   81dae:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   81db2:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < 4; i++) {
   81db4:	2c04      	cmp	r4, #4
   81db6:	d1ec      	bne.n	81d92 <naeusb_cdc_settings_out+0xa>
}
   81db8:	bd70      	pop	{r4, r5, r6, pc}
   81dba:	bf00      	nop
   81dbc:	200026a4 	.word	0x200026a4
   81dc0:	00081c21 	.word	0x00081c21

00081dc4 <ctrl_usart_cb_data>:
{		
   81dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81dc6:	4b0c      	ldr	r3, [pc, #48]	; (81df8 <ctrl_usart_cb_data+0x34>)
   81dc8:	8858      	ldrh	r0, [r3, #2]
   81dca:	0a00      	lsrs	r0, r0, #8
   81dcc:	4b0b      	ldr	r3, [pc, #44]	; (81dfc <ctrl_usart_cb_data+0x38>)
   81dce:	4798      	blx	r3
	if (!driver) return;
   81dd0:	b188      	cbz	r0, 81df6 <ctrl_usart_cb_data+0x32>
   81dd2:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81dd4:	4b08      	ldr	r3, [pc, #32]	; (81df8 <ctrl_usart_cb_data+0x34>)
   81dd6:	88da      	ldrh	r2, [r3, #6]
   81dd8:	899b      	ldrh	r3, [r3, #12]
   81dda:	4293      	cmp	r3, r2
   81ddc:	d30b      	bcc.n	81df6 <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81dde:	b152      	cbz	r2, 81df6 <ctrl_usart_cb_data+0x32>
   81de0:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81de2:	4d05      	ldr	r5, [pc, #20]	; (81df8 <ctrl_usart_cb_data+0x34>)
   81de4:	4f06      	ldr	r7, [pc, #24]	; (81e00 <ctrl_usart_cb_data+0x3c>)
   81de6:	68ab      	ldr	r3, [r5, #8]
   81de8:	5d19      	ldrb	r1, [r3, r4]
   81dea:	4630      	mov	r0, r6
   81dec:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81dee:	3401      	adds	r4, #1
   81df0:	88eb      	ldrh	r3, [r5, #6]
   81df2:	42a3      	cmp	r3, r4
   81df4:	dcf7      	bgt.n	81de6 <ctrl_usart_cb_data+0x22>
   81df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81df8:	200026a4 	.word	0x200026a4
   81dfc:	00081c21 	.word	0x00081c21
   81e00:	00081bc1 	.word	0x00081bc1

00081e04 <naeusart_register_handlers>:
{
   81e04:	b570      	push	{r4, r5, r6, lr}
   81e06:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   81e08:	4d09      	ldr	r5, [pc, #36]	; (81e30 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   81e0a:	4e0a      	ldr	r6, [pc, #40]	; (81e34 <naeusart_register_handlers+0x30>)
   81e0c:	e002      	b.n	81e14 <naeusart_register_handlers+0x10>
   81e0e:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 4; i++) {
   81e10:	2c04      	cmp	r4, #4
   81e12:	d005      	beq.n	81e20 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   81e14:	4620      	mov	r0, r4
   81e16:	47a8      	blx	r5
		if (!driver) continue;
   81e18:	2800      	cmp	r0, #0
   81e1a:	d0f8      	beq.n	81e0e <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   81e1c:	47b0      	blx	r6
   81e1e:	e7f6      	b.n	81e0e <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   81e20:	4805      	ldr	r0, [pc, #20]	; (81e38 <naeusart_register_handlers+0x34>)
   81e22:	4b06      	ldr	r3, [pc, #24]	; (81e3c <naeusart_register_handlers+0x38>)
   81e24:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   81e26:	4806      	ldr	r0, [pc, #24]	; (81e40 <naeusart_register_handlers+0x3c>)
   81e28:	4b06      	ldr	r3, [pc, #24]	; (81e44 <naeusart_register_handlers+0x40>)
   81e2a:	4798      	blx	r3
   81e2c:	bd70      	pop	{r4, r5, r6, pc}
   81e2e:	bf00      	nop
   81e30:	00081c21 	.word	0x00081c21
   81e34:	00081a45 	.word	0x00081a45
   81e38:	00081e8d 	.word	0x00081e8d
   81e3c:	00081311 	.word	0x00081311
   81e40:	0008197d 	.word	0x0008197d
   81e44:	00081335 	.word	0x00081335

00081e48 <naeusb_cdc_settings_in>:
{
   81e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e4a:	4d0d      	ldr	r5, [pc, #52]	; (81e80 <naeusb_cdc_settings_in+0x38>)
   81e4c:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81e4e:	4f0d      	ldr	r7, [pc, #52]	; (81e84 <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   81e50:	4626      	mov	r6, r4
        usart_driver *driver = get_nth_available_driver(i);
   81e52:	4620      	mov	r0, r4
   81e54:	47b8      	blx	r7
		respbuf[i] = 0;
   81e56:	702e      	strb	r6, [r5, #0]
        if (driver)
   81e58:	b120      	cbz	r0, 81e64 <naeusb_cdc_settings_in+0x1c>
            respbuf[i] = driver->cdc_settings_change;
   81e5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   81e62:	702b      	strb	r3, [r5, #0]
   81e64:	3401      	adds	r4, #1
   81e66:	3501      	adds	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   81e68:	2c04      	cmp	r4, #4
   81e6a:	d1f2      	bne.n	81e52 <naeusb_cdc_settings_in+0xa>
    udd_g_ctrlreq.payload = respbuf;
   81e6c:	4b06      	ldr	r3, [pc, #24]	; (81e88 <naeusb_cdc_settings_in+0x40>)
   81e6e:	4a04      	ldr	r2, [pc, #16]	; (81e80 <naeusb_cdc_settings_in+0x38>)
   81e70:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   81e72:	88da      	ldrh	r2, [r3, #6]
   81e74:	2a04      	cmp	r2, #4
   81e76:	bf28      	it	cs
   81e78:	2204      	movcs	r2, #4
   81e7a:	819a      	strh	r2, [r3, #12]
}
   81e7c:	2001      	movs	r0, #1
   81e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81e80:	200021e0 	.word	0x200021e0
   81e84:	00081c21 	.word	0x00081c21
   81e88:	200026a4 	.word	0x200026a4

00081e8c <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81e90:	4b24      	ldr	r3, [pc, #144]	; (81f24 <usart_setup_in_received+0x98>)
   81e92:	785b      	ldrb	r3, [r3, #1]
   81e94:	3b1a      	subs	r3, #26
   81e96:	2b17      	cmp	r3, #23
   81e98:	d83d      	bhi.n	81f16 <usart_setup_in_received+0x8a>
   81e9a:	e8df f003 	tbb	[pc, r3]
   81e9e:	0c10      	.short	0x0c10
   81ea0:	3c3c3c3c 	.word	0x3c3c3c3c
   81ea4:	3c3c3430 	.word	0x3c3c3430
   81ea8:	3c3c3c3c 	.word	0x3c3c3c3c
   81eac:	3c3c3c3c 	.word	0x3c3c3c3c
   81eb0:	3c3c3c3c 	.word	0x3c3c3c3c
   81eb4:	383c      	.short	0x383c
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   81eb6:	4b1c      	ldr	r3, [pc, #112]	; (81f28 <usart_setup_in_received+0x9c>)
   81eb8:	4798      	blx	r3
   81eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81ebe:	4b19      	ldr	r3, [pc, #100]	; (81f24 <usart_setup_in_received+0x98>)
   81ec0:	8858      	ldrh	r0, [r3, #2]
   81ec2:	0a00      	lsrs	r0, r0, #8
   81ec4:	4b19      	ldr	r3, [pc, #100]	; (81f2c <usart_setup_in_received+0xa0>)
   81ec6:	4798      	blx	r3
		if (!driver) return false;
   81ec8:	b340      	cbz	r0, 81f1c <usart_setup_in_received+0x90>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81eca:	4b16      	ldr	r3, [pc, #88]	; (81f24 <usart_setup_in_received+0x98>)
   81ecc:	88db      	ldrh	r3, [r3, #6]
   81ece:	b1a3      	cbz	r3, 81efa <usart_setup_in_received+0x6e>
   81ed0:	4d17      	ldr	r5, [pc, #92]	; (81f30 <usart_setup_in_received+0xa4>)
   81ed2:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   81ed4:	f100 081c 	add.w	r8, r0, #28
   81ed8:	4e16      	ldr	r6, [pc, #88]	; (81f34 <usart_setup_in_received+0xa8>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81eda:	4f12      	ldr	r7, [pc, #72]	; (81f24 <usart_setup_in_received+0x98>)
    return get_from_circ_buf(&driver->rxbuf);
   81edc:	4640      	mov	r0, r8
   81ede:	47b0      	blx	r6
            respbuf[cnt] = usart_driver_getchar(driver);
   81ee0:	f805 0f01 	strb.w	r0, [r5, #1]!
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81ee4:	3401      	adds	r4, #1
   81ee6:	88fb      	ldrh	r3, [r7, #6]
   81ee8:	42a3      	cmp	r3, r4
   81eea:	d8f7      	bhi.n	81edc <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   81eec:	4b0d      	ldr	r3, [pc, #52]	; (81f24 <usart_setup_in_received+0x98>)
   81eee:	4a12      	ldr	r2, [pc, #72]	; (81f38 <usart_setup_in_received+0xac>)
   81ef0:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81ef2:	819c      	strh	r4, [r3, #12]
        return true;
   81ef4:	2001      	movs	r0, #1
   81ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81efa:	2400      	movs	r4, #0
   81efc:	e7f6      	b.n	81eec <usart_setup_in_received+0x60>
        break;
		
#ifdef CW_PROG_XMEGA
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   81efe:	4b0f      	ldr	r3, [pc, #60]	; (81f3c <usart_setup_in_received+0xb0>)
   81f00:	4798      	blx	r3
   81f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif

#ifdef CW_PROG_AVR        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   81f06:	4b0e      	ldr	r3, [pc, #56]	; (81f40 <usart_setup_in_received+0xb4>)
   81f08:	4798      	blx	r3
   81f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   81f0e:	4b0d      	ldr	r3, [pc, #52]	; (81f44 <usart_setup_in_received+0xb8>)
   81f10:	4798      	blx	r3
   81f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
    }
    return false;
   81f16:	2000      	movs	r0, #0
   81f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   81f1c:	2000      	movs	r0, #0
}
   81f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f22:	bf00      	nop
   81f24:	200026a4 	.word	0x200026a4
   81f28:	00081c31 	.word	0x00081c31
   81f2c:	00081c21 	.word	0x00081c21
   81f30:	200021df 	.word	0x200021df
   81f34:	000807f5 	.word	0x000807f5
   81f38:	200021e0 	.word	0x200021e0
   81f3c:	000827f1 	.word	0x000827f1
   81f40:	00082135 	.word	0x00082135
   81f44:	00081e49 	.word	0x00081e49

00081f48 <cdc_enable>:
{
   81f48:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81f4a:	4b05      	ldr	r3, [pc, #20]	; (81f60 <cdc_enable+0x18>)
   81f4c:	4798      	blx	r3
    driver->cdc_enabled = 1;
   81f4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f52:	f043 0304 	orr.w	r3, r3, #4
   81f56:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81f5a:	2001      	movs	r0, #1
   81f5c:	bd08      	pop	{r3, pc}
   81f5e:	bf00      	nop
   81f60:	00081c21 	.word	0x00081c21

00081f64 <cdc_disable>:
{
   81f64:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81f66:	4b04      	ldr	r3, [pc, #16]	; (81f78 <cdc_disable+0x14>)
   81f68:	4798      	blx	r3
    driver->cdc_enabled = 0;
   81f6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f6e:	f36f 0382 	bfc	r3, #2, #1
   81f72:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
   81f76:	bd08      	pop	{r3, pc}
   81f78:	00081c21 	.word	0x00081c21

00081f7c <my_callback_rx_notify>:
{
   81f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f80:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   81f82:	4b17      	ldr	r3, [pc, #92]	; (81fe0 <my_callback_rx_notify+0x64>)
   81f84:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81f86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f8a:	f003 0306 	and.w	r3, r3, #6
   81f8e:	2b06      	cmp	r3, #6
   81f90:	d001      	beq.n	81f96 <my_callback_rx_notify+0x1a>
   81f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f96:	4607      	mov	r7, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   81f98:	4648      	mov	r0, r9
   81f9a:	4b12      	ldr	r3, [pc, #72]	; (81fe4 <my_callback_rx_notify+0x68>)
   81f9c:	4798      	blx	r3
        while (num_char > 0) {
   81f9e:	4605      	mov	r5, r0
   81fa0:	2800      	cmp	r0, #0
   81fa2:	d0f6      	beq.n	81f92 <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81fa4:	4e10      	ldr	r6, [pc, #64]	; (81fe8 <my_callback_rx_notify+0x6c>)
   81fa6:	f8df a044 	ldr.w	sl, [pc, #68]	; 81fec <my_callback_rx_notify+0x70>
                usart_driver_putchar(driver, uart_buf[i]);
   81faa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 81ff0 <my_callback_rx_notify+0x74>
            num_char = (num_char > 512) ? 512 : num_char;
   81fae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   81fb2:	bf28      	it	cs
   81fb4:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81fb8:	462a      	mov	r2, r5
   81fba:	4631      	mov	r1, r6
   81fbc:	4648      	mov	r0, r9
   81fbe:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   81fc0:	b13d      	cbz	r5, 81fd2 <my_callback_rx_notify+0x56>
   81fc2:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   81fc4:	5d31      	ldrb	r1, [r6, r4]
   81fc6:	4638      	mov	r0, r7
   81fc8:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   81fca:	3401      	adds	r4, #1
   81fcc:	b2a4      	uxth	r4, r4
   81fce:	42a5      	cmp	r5, r4
   81fd0:	d8f8      	bhi.n	81fc4 <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   81fd2:	4648      	mov	r0, r9
   81fd4:	4b03      	ldr	r3, [pc, #12]	; (81fe4 <my_callback_rx_notify+0x68>)
   81fd6:	4798      	blx	r3
        while (num_char > 0) {
   81fd8:	4605      	mov	r5, r0
   81fda:	2800      	cmp	r0, #0
   81fdc:	d1e7      	bne.n	81fae <my_callback_rx_notify+0x32>
   81fde:	e7d8      	b.n	81f92 <my_callback_rx_notify+0x16>
   81fe0:	00081c21 	.word	0x00081c21
   81fe4:	000803f1 	.word	0x000803f1
   81fe8:	20001c50 	.word	0x20001c50
   81fec:	00080601 	.word	0x00080601
   81ff0:	00081bc1 	.word	0x00081bc1

00081ff4 <my_callback_config>:
{
   81ff4:	b530      	push	{r4, r5, lr}
   81ff6:	b083      	sub	sp, #12
   81ff8:	460d      	mov	r5, r1
	usart_driver *driver = get_nth_available_driver(port);
   81ffa:	4b14      	ldr	r3, [pc, #80]	; (8204c <my_callback_config+0x58>)
   81ffc:	4798      	blx	r3
    if (driver->cdc_enabled) {
   81ffe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82002:	f013 0f04 	tst.w	r3, #4
   82006:	d003      	beq.n	82010 <my_callback_config+0x1c>
   82008:	4604      	mov	r4, r0
        switch(cfg->bParityType) {
   8200a:	796b      	ldrb	r3, [r5, #5]
   8200c:	2b04      	cmp	r3, #4
   8200e:	d901      	bls.n	82014 <my_callback_config+0x20>
}
   82010:	b003      	add	sp, #12
   82012:	bd30      	pop	{r4, r5, pc}
        uint32_t baud = cfg->dwDTERate;
   82014:	6829      	ldr	r1, [r5, #0]
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82016:	79ab      	ldrb	r3, [r5, #6]
   82018:	3b05      	subs	r3, #5
   8201a:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8201c:	b2db      	uxtb	r3, r3
   8201e:	9300      	str	r3, [sp, #0]
   82020:	2300      	movs	r3, #0
   82022:	461a      	mov	r2, r3
   82024:	4d0a      	ldr	r5, [pc, #40]	; (82050 <my_callback_config+0x5c>)
   82026:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver) & UART_IER_RXRDY)) {
   82028:	4620      	mov	r0, r4
   8202a:	4b0a      	ldr	r3, [pc, #40]	; (82054 <my_callback_config+0x60>)
   8202c:	4798      	blx	r3
   8202e:	f010 0f01 	tst.w	r0, #1
   82032:	d1ed      	bne.n	82010 <my_callback_config+0x1c>
			usart_enable_rx(driver->usart);
   82034:	6820      	ldr	r0, [r4, #0]
   82036:	4b08      	ldr	r3, [pc, #32]	; (82058 <my_callback_config+0x64>)
   82038:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   8203a:	6820      	ldr	r0, [r4, #0]
   8203c:	4b07      	ldr	r3, [pc, #28]	; (8205c <my_callback_config+0x68>)
   8203e:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   82040:	2101      	movs	r1, #1
   82042:	6820      	ldr	r0, [r4, #0]
   82044:	4b06      	ldr	r3, [pc, #24]	; (82060 <my_callback_config+0x6c>)
   82046:	4798      	blx	r3
   82048:	e7e2      	b.n	82010 <my_callback_config+0x1c>
   8204a:	bf00      	nop
   8204c:	00081c21 	.word	0x00081c21
   82050:	00081af1 	.word	0x00081af1
   82054:	000856b5 	.word	0x000856b5
   82058:	000856a1 	.word	0x000856a1
   8205c:	00085695 	.word	0x00085695
   82060:	000856ad 	.word	0x000856ad

00082064 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   82064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82068:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   8206a:	f8df b04c 	ldr.w	fp, [pc, #76]	; 820b8 <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   8206e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 820bc <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82072:	f8df a04c 	ldr.w	sl, [pc, #76]	; 820c0 <cdc_send_to_pc+0x5c>
   82076:	f8df 904c 	ldr.w	r9, [pc, #76]	; 820c4 <cdc_send_to_pc+0x60>
   8207a:	e00d      	b.n	82098 <cdc_send_to_pc+0x34>
   8207c:	4620      	mov	r0, r4
   8207e:	47d0      	blx	sl
   82080:	4601      	mov	r1, r0
   82082:	4638      	mov	r0, r7
   82084:	47c8      	blx	r9
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82086:	f506 74e2 	add.w	r4, r6, #452	; 0x1c4
   8208a:	4620      	mov	r0, r4
   8208c:	47c0      	blx	r8
   8208e:	2800      	cmp	r0, #0
   82090:	d1f4      	bne.n	8207c <cdc_send_to_pc+0x18>
   82092:	3501      	adds	r5, #1
	for (uint8_t i = 0; i < 4; i++) {
   82094:	2d04      	cmp	r5, #4
   82096:	d00c      	beq.n	820b2 <cdc_send_to_pc+0x4e>
   82098:	b2ef      	uxtb	r7, r5
		usart_driver *driver = get_nth_available_driver(i);
   8209a:	4628      	mov	r0, r5
   8209c:	47d8      	blx	fp
		if (!driver) continue;
   8209e:	4606      	mov	r6, r0
   820a0:	2800      	cmp	r0, #0
   820a2:	d0f6      	beq.n	82092 <cdc_send_to_pc+0x2e>
		if (driver->cdc_enabled && driver->enabled) {
   820a4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   820a8:	f003 0306 	and.w	r3, r3, #6
   820ac:	2b06      	cmp	r3, #6
   820ae:	d1f0      	bne.n	82092 <cdc_send_to_pc+0x2e>
   820b0:	e7e9      	b.n	82086 <cdc_send_to_pc+0x22>
			}
		}

	}
	
   820b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820b6:	bf00      	nop
   820b8:	00081c21 	.word	0x00081c21
   820bc:	00080813 	.word	0x00080813
   820c0:	000807f5 	.word	0x000807f5
   820c4:	00080731 	.word	0x00080731

000820c8 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   820c8:	b510      	push	{r4, lr}
   820ca:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   820cc:	4b06      	ldr	r3, [pc, #24]	; (820e8 <FPGA_setlock+0x20>)
   820ce:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   820d0:	4b06      	ldr	r3, [pc, #24]	; (820ec <FPGA_setlock+0x24>)
   820d2:	781b      	ldrb	r3, [r3, #0]
   820d4:	b933      	cbnz	r3, 820e4 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   820d6:	4b05      	ldr	r3, [pc, #20]	; (820ec <FPGA_setlock+0x24>)
   820d8:	701c      	strb	r4, [r3, #0]
    ret = 1;
   820da:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   820dc:	4b04      	ldr	r3, [pc, #16]	; (820f0 <FPGA_setlock+0x28>)
   820de:	4798      	blx	r3
  return ret;
}
   820e0:	4620      	mov	r0, r4
   820e2:	bd10      	pop	{r4, pc}
  int ret = 0;
   820e4:	2400      	movs	r4, #0
   820e6:	e7f9      	b.n	820dc <FPGA_setlock+0x14>
   820e8:	000839b1 	.word	0x000839b1
   820ec:	20001e50 	.word	0x20001e50
   820f0:	000839ed 	.word	0x000839ed

000820f4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   820f4:	2200      	movs	r2, #0
   820f6:	4b01      	ldr	r3, [pc, #4]	; (820fc <FPGA_releaselock+0x8>)
   820f8:	701a      	strb	r2, [r3, #0]
   820fa:	4770      	bx	lr
   820fc:	20001e50 	.word	0x20001e50

00082100 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82100:	4b01      	ldr	r3, [pc, #4]	; (82108 <FPGA_lockstatus+0x8>)
   82102:	7818      	ldrb	r0, [r3, #0]
}
   82104:	4770      	bx	lr
   82106:	bf00      	nop
   82108:	20001e50 	.word	0x20001e50

0008210c <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   8210c:	b508      	push	{r3, lr}
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   8210e:	4601      	mov	r1, r0
   82110:	4804      	ldr	r0, [pc, #16]	; (82124 <FPGA_setaddr+0x18>)
   82112:	4b05      	ldr	r3, [pc, #20]	; (82128 <FPGA_setaddr+0x1c>)
   82114:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   82116:	2035      	movs	r0, #53	; 0x35
   82118:	4b04      	ldr	r3, [pc, #16]	; (8212c <FPGA_setaddr+0x20>)
   8211a:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   8211c:	2035      	movs	r0, #53	; 0x35
   8211e:	4b04      	ldr	r3, [pc, #16]	; (82130 <FPGA_setaddr+0x24>)
   82120:	4798      	blx	r3
   82122:	bd08      	pop	{r3, pc}
   82124:	400e0e00 	.word	0x400e0e00
   82128:	00083c67 	.word	0x00083c67
   8212c:	00083ca9 	.word	0x00083ca9
   82130:	00083c8f 	.word	0x00083c8f

00082134 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   82134:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   82136:	4b7b      	ldr	r3, [pc, #492]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   82138:	789c      	ldrb	r4, [r3, #2]
   8213a:	4b7b      	ldr	r3, [pc, #492]	; (82328 <V2Protocol_ProcessCommand+0x1f4>)
   8213c:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   8213e:	4b7b      	ldr	r3, [pc, #492]	; (8232c <V2Protocol_ProcessCommand+0x1f8>)
   82140:	4798      	blx	r3

	switch (V2Command)
   82142:	1e63      	subs	r3, r4, #1
   82144:	2b21      	cmp	r3, #33	; 0x21
   82146:	f200 80e3 	bhi.w	82310 <V2Protocol_ProcessCommand+0x1dc>
   8214a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8214e:	0022      	.short	0x0022
   82150:	00370037 	.word	0x00370037
   82154:	00e100e1 	.word	0x00e100e1
   82158:	00e1006c 	.word	0x00e1006c
   8215c:	00e100e1 	.word	0x00e100e1
   82160:	00e10088 	.word	0x00e10088
   82164:	00e100e1 	.word	0x00e100e1
   82168:	00e100e1 	.word	0x00e100e1
   8216c:	00940090 	.word	0x00940090
   82170:	009800a4 	.word	0x009800a4
   82174:	0098009e 	.word	0x0098009e
   82178:	00ad009e 	.word	0x00ad009e
   8217c:	00ad00a8 	.word	0x00ad00a8
   82180:	00a800a8 	.word	0x00a800a8
   82184:	00b200a8 	.word	0x00b200a8
   82188:	00e100e1 	.word	0x00e100e1
   8218c:	00cf00b6 	.word	0x00cf00b6
   82190:	00c0      	.short	0x00c0
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82192:	4c65      	ldr	r4, [pc, #404]	; (82328 <V2Protocol_ProcessCommand+0x1f4>)
   82194:	2300      	movs	r3, #0
   82196:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82198:	230d      	movs	r3, #13
   8219a:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   8219c:	4b64      	ldr	r3, [pc, #400]	; (82330 <V2Protocol_ProcessCommand+0x1fc>)
   8219e:	cb07      	ldmia	r3!, {r0, r1, r2}
   821a0:	f8c4 0003 	str.w	r0, [r4, #3]
   821a4:	f8c4 1007 	str.w	r1, [r4, #7]
   821a8:	f8c4 200b 	str.w	r2, [r4, #11]
   821ac:	781b      	ldrb	r3, [r3, #0]
   821ae:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   821b0:	4b5c      	ldr	r3, [pc, #368]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   821b2:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   821b4:	2210      	movs	r2, #16
   821b6:	819a      	strh	r2, [r3, #12]
	return true;
   821b8:	2001      	movs	r0, #1
   821ba:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   821bc:	4b59      	ldr	r3, [pc, #356]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   821be:	689b      	ldr	r3, [r3, #8]
   821c0:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   821c2:	2c02      	cmp	r4, #2
   821c4:	d00c      	beq.n	821e0 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   821c6:	2202      	movs	r2, #2
   821c8:	4b5a      	ldr	r3, [pc, #360]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   821ca:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   821cc:	4628      	mov	r0, r5
   821ce:	4b5a      	ldr	r3, [pc, #360]	; (82338 <V2Protocol_ProcessCommand+0x204>)
   821d0:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   821d2:	2c03      	cmp	r4, #3
   821d4:	d017      	beq.n	82206 <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   821d6:	22c0      	movs	r2, #192	; 0xc0
   821d8:	4b58      	ldr	r3, [pc, #352]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   821da:	705a      	strb	r2, [r3, #1]
	return true;
   821dc:	2001      	movs	r0, #1
   821de:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   821e0:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   821e2:	2202      	movs	r2, #2
   821e4:	4b53      	ldr	r3, [pc, #332]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   821e6:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   821e8:	4628      	mov	r0, r5
   821ea:	4b53      	ldr	r3, [pc, #332]	; (82338 <V2Protocol_ProcessCommand+0x204>)
   821ec:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   821ee:	f010 0f02 	tst.w	r0, #2
   821f2:	d0f0      	beq.n	821d6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   821f4:	2200      	movs	r2, #0
   821f6:	4b51      	ldr	r3, [pc, #324]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   821f8:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   821fa:	4621      	mov	r1, r4
   821fc:	4628      	mov	r0, r5
   821fe:	4b50      	ldr	r3, [pc, #320]	; (82340 <V2Protocol_ProcessCommand+0x20c>)
   82200:	4798      	blx	r3
	return true;
   82202:	2001      	movs	r0, #1
   82204:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82206:	f010 0f01 	tst.w	r0, #1
   8220a:	d0e4      	beq.n	821d6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   8220c:	4c4b      	ldr	r4, [pc, #300]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   8220e:	2300      	movs	r3, #0
   82210:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82212:	4628      	mov	r0, r5
   82214:	4b4b      	ldr	r3, [pc, #300]	; (82344 <V2Protocol_ProcessCommand+0x210>)
   82216:	4798      	blx	r3
   82218:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   8221a:	4a46      	ldr	r2, [pc, #280]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   8221c:	8813      	ldrh	r3, [r2, #0]
   8221e:	3301      	adds	r3, #1
   82220:	8013      	strh	r3, [r2, #0]
	return true;
   82222:	2001      	movs	r0, #1
   82224:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82226:	4b3f      	ldr	r3, [pc, #252]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   82228:	689a      	ldr	r2, [r3, #8]
   8222a:	78d1      	ldrb	r1, [r2, #3]
   8222c:	7893      	ldrb	r3, [r2, #2]
   8222e:	041b      	lsls	r3, r3, #16
   82230:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82234:	7811      	ldrb	r1, [r2, #0]
   82236:	430b      	orrs	r3, r1
   82238:	7852      	ldrb	r2, [r2, #1]
   8223a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8223e:	4a42      	ldr	r2, [pc, #264]	; (82348 <V2Protocol_ProcessCommand+0x214>)
   82240:	6013      	str	r3, [r2, #0]

	if (CurrentAddress & (1UL << 31))
   82242:	2b00      	cmp	r3, #0
   82244:	db07      	blt.n	82256 <V2Protocol_ProcessCommand+0x122>
	  MustLoadExtendedAddress = true;
	  
	// printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82246:	2200      	movs	r2, #0
   82248:	4b3c      	ldr	r3, [pc, #240]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   8224a:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8224c:	2202      	movs	r2, #2
   8224e:	4b39      	ldr	r3, [pc, #228]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   82250:	801a      	strh	r2, [r3, #0]
	return true;
   82252:	2001      	movs	r0, #1
   82254:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   82256:	2201      	movs	r2, #1
   82258:	4b3c      	ldr	r3, [pc, #240]	; (8234c <V2Protocol_ProcessCommand+0x218>)
   8225a:	701a      	strb	r2, [r3, #0]
   8225c:	e7f3      	b.n	82246 <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8225e:	2200      	movs	r2, #0
   82260:	4b36      	ldr	r3, [pc, #216]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   82262:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82264:	2202      	movs	r2, #2
   82266:	4b33      	ldr	r3, [pc, #204]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   82268:	801a      	strh	r2, [r3, #0]
	return true;
   8226a:	2001      	movs	r0, #1
   8226c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   8226e:	4b38      	ldr	r3, [pc, #224]	; (82350 <V2Protocol_ProcessCommand+0x21c>)
   82270:	4798      	blx	r3
	return true;
   82272:	2001      	movs	r0, #1
			break;
   82274:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   82276:	4b37      	ldr	r3, [pc, #220]	; (82354 <V2Protocol_ProcessCommand+0x220>)
   82278:	4798      	blx	r3
	return true;
   8227a:	2001      	movs	r0, #1
			break;
   8227c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   8227e:	4936      	ldr	r1, [pc, #216]	; (82358 <V2Protocol_ProcessCommand+0x224>)
   82280:	4620      	mov	r0, r4
   82282:	4b36      	ldr	r3, [pc, #216]	; (8235c <V2Protocol_ProcessCommand+0x228>)
   82284:	4798      	blx	r3
	return true;
   82286:	2001      	movs	r0, #1
			break;
   82288:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   8228a:	4933      	ldr	r1, [pc, #204]	; (82358 <V2Protocol_ProcessCommand+0x224>)
   8228c:	4620      	mov	r0, r4
   8228e:	4b34      	ldr	r3, [pc, #208]	; (82360 <V2Protocol_ProcessCommand+0x22c>)
   82290:	4798      	blx	r3
	return true;
   82292:	2001      	movs	r0, #1
			break;
   82294:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   82296:	4b33      	ldr	r3, [pc, #204]	; (82364 <V2Protocol_ProcessCommand+0x230>)
   82298:	4798      	blx	r3
	return true;
   8229a:	2001      	movs	r0, #1
			break;
   8229c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   8229e:	4620      	mov	r0, r4
   822a0:	4b31      	ldr	r3, [pc, #196]	; (82368 <V2Protocol_ProcessCommand+0x234>)
   822a2:	4798      	blx	r3
	return true;
   822a4:	2001      	movs	r0, #1
			break;
   822a6:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   822a8:	4620      	mov	r0, r4
   822aa:	4b30      	ldr	r3, [pc, #192]	; (8236c <V2Protocol_ProcessCommand+0x238>)
   822ac:	4798      	blx	r3
	return true;
   822ae:	2001      	movs	r0, #1
			break;
   822b0:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   822b2:	4b2f      	ldr	r3, [pc, #188]	; (82370 <V2Protocol_ProcessCommand+0x23c>)
   822b4:	4798      	blx	r3
	return true;
   822b6:	2001      	movs	r0, #1
			break;
   822b8:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   822ba:	4a1a      	ldr	r2, [pc, #104]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   822bc:	4b1f      	ldr	r3, [pc, #124]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   822be:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   822c0:	4b1c      	ldr	r3, [pc, #112]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   822c2:	8819      	ldrh	r1, [r3, #0]
   822c4:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   822c6:	2200      	movs	r2, #0
   822c8:	801a      	strh	r2, [r3, #0]
			return true;
   822ca:	2001      	movs	r0, #1
   822cc:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   822ce:	4a15      	ldr	r2, [pc, #84]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   822d0:	8853      	ldrh	r3, [r2, #2]
   822d2:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   822d4:	88d2      	ldrh	r2, [r2, #6]
   822d6:	1899      	adds	r1, r3, r2
   822d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   822dc:	dc20      	bgt.n	82320 <V2Protocol_ProcessCommand+0x1ec>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   822de:	4811      	ldr	r0, [pc, #68]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   822e0:	491d      	ldr	r1, [pc, #116]	; (82358 <V2Protocol_ProcessCommand+0x224>)
   822e2:	440b      	add	r3, r1
   822e4:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   822e6:	8182      	strh	r2, [r0, #12]
			return true;
   822e8:	2001      	movs	r0, #1
   822ea:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   822ec:	4a0d      	ldr	r2, [pc, #52]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   822ee:	8853      	ldrh	r3, [r2, #2]
   822f0:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   822f2:	88d2      	ldrh	r2, [r2, #6]
   822f4:	1899      	adds	r1, r3, r2
   822f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   822fa:	dd01      	ble.n	82300 <V2Protocol_ProcessCommand+0x1cc>
				return false;
   822fc:	2000      	movs	r0, #0
   822fe:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82300:	4908      	ldr	r1, [pc, #32]	; (82324 <V2Protocol_ProcessCommand+0x1f0>)
   82302:	6889      	ldr	r1, [r1, #8]
   82304:	4814      	ldr	r0, [pc, #80]	; (82358 <V2Protocol_ProcessCommand+0x224>)
   82306:	4418      	add	r0, r3
   82308:	4b1a      	ldr	r3, [pc, #104]	; (82374 <V2Protocol_ProcessCommand+0x240>)
   8230a:	4798      	blx	r3
			return true;
   8230c:	2001      	movs	r0, #1
   8230e:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82310:	22c9      	movs	r2, #201	; 0xc9
   82312:	4b0a      	ldr	r3, [pc, #40]	; (8233c <V2Protocol_ProcessCommand+0x208>)
   82314:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82316:	2202      	movs	r2, #2
   82318:	4b06      	ldr	r3, [pc, #24]	; (82334 <V2Protocol_ProcessCommand+0x200>)
   8231a:	801a      	strh	r2, [r3, #0]
	return true;
   8231c:	2001      	movs	r0, #1
   8231e:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   82320:	2000      	movs	r0, #0
   82322:	bd38      	pop	{r3, r4, r5, pc}
   82324:	200026a4 	.word	0x200026a4
   82328:	20001f54 	.word	0x20001f54
   8232c:	00082e49 	.word	0x00082e49
   82330:	0008c0b8 	.word	0x0008c0b8
   82334:	20002662 	.word	0x20002662
   82338:	000823a9 	.word	0x000823a9
   8233c:	20002664 	.word	0x20002664
   82340:	000823d1 	.word	0x000823d1
   82344:	000823bd 	.word	0x000823bd
   82348:	20002684 	.word	0x20002684
   8234c:	20002660 	.word	0x20002660
   82350:	00080e5d 	.word	0x00080e5d
   82354:	00080f99 	.word	0x00080f99
   82358:	20001e54 	.word	0x20001e54
   8235c:	00080985 	.word	0x00080985
   82360:	00080bf1 	.word	0x00080bf1
   82364:	00080ff5 	.word	0x00080ff5
   82368:	00080d25 	.word	0x00080d25
   8236c:	00080dc1 	.word	0x00080dc1
   82370:	00080e25 	.word	0x00080e25
   82374:	00085ffd 	.word	0x00085ffd

00082378 <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   82378:	4b09      	ldr	r3, [pc, #36]	; (823a0 <V2Params_GetParamFromTable+0x28>)
   8237a:	781b      	ldrb	r3, [r3, #0]
   8237c:	4283      	cmp	r3, r0
   8237e:	d00a      	beq.n	82396 <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   82380:	4b08      	ldr	r3, [pc, #32]	; (823a4 <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82382:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   82386:	781a      	ldrb	r2, [r3, #0]
   82388:	4282      	cmp	r2, r0
   8238a:	d006      	beq.n	8239a <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   8238c:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   8238e:	428b      	cmp	r3, r1
   82390:	d1f9      	bne.n	82386 <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   82392:	2000      	movs	r0, #0
   82394:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   82396:	4802      	ldr	r0, [pc, #8]	; (823a0 <V2Params_GetParamFromTable+0x28>)
   82398:	4770      	bx	lr
   8239a:	4618      	mov	r0, r3
}
   8239c:	4770      	bx	lr
   8239e:	bf00      	nop
   823a0:	20000828 	.word	0x20000828
   823a4:	2000082b 	.word	0x2000082b

000823a8 <V2Params_GetParameterPrivileges>:
{
   823a8:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   823aa:	4b03      	ldr	r3, [pc, #12]	; (823b8 <V2Params_GetParameterPrivileges+0x10>)
   823ac:	4798      	blx	r3
	if (ParamInfo == NULL)
   823ae:	b108      	cbz	r0, 823b4 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   823b0:	7840      	ldrb	r0, [r0, #1]
   823b2:	bd08      	pop	{r3, pc}
	  return 0;
   823b4:	2000      	movs	r0, #0
}
   823b6:	bd08      	pop	{r3, pc}
   823b8:	00082379 	.word	0x00082379

000823bc <V2Params_GetParameterValue>:
{
   823bc:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   823be:	4b03      	ldr	r3, [pc, #12]	; (823cc <V2Params_GetParameterValue+0x10>)
   823c0:	4798      	blx	r3
	if (ParamInfo == NULL)
   823c2:	b108      	cbz	r0, 823c8 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   823c4:	7880      	ldrb	r0, [r0, #2]
   823c6:	bd08      	pop	{r3, pc}
	  return 0;
   823c8:	2000      	movs	r0, #0
}
   823ca:	bd08      	pop	{r3, pc}
   823cc:	00082379 	.word	0x00082379

000823d0 <V2Params_SetParameterValue>:
{
   823d0:	b510      	push	{r4, lr}
   823d2:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   823d4:	4b02      	ldr	r3, [pc, #8]	; (823e0 <V2Params_SetParameterValue+0x10>)
   823d6:	4798      	blx	r3
	if (ParamInfo == NULL)
   823d8:	b100      	cbz	r0, 823dc <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   823da:	7084      	strb	r4, [r0, #2]
   823dc:	bd10      	pop	{r4, pc}
   823de:	bf00      	nop
   823e0:	00082379 	.word	0x00082379

000823e4 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   823e4:	b538      	push	{r3, r4, r5, lr}
   823e6:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   823e8:	b2c0      	uxtb	r0, r0
   823ea:	4c05      	ldr	r4, [pc, #20]	; (82400 <XMEGANVM_SendAddress+0x1c>)
   823ec:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   823ee:	f3c5 2007 	ubfx	r0, r5, #8, #8
   823f2:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   823f4:	f3c5 4007 	ubfx	r0, r5, #16, #8
   823f8:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   823fa:	0e28      	lsrs	r0, r5, #24
   823fc:	47a0      	blx	r4
   823fe:	bd38      	pop	{r3, r4, r5, pc}
   82400:	00082c79 	.word	0x00082c79

00082404 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   82404:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   82406:	4b03      	ldr	r3, [pc, #12]	; (82414 <XMEGANVM_SendNVMRegAddress+0x10>)
   82408:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   8240a:	4318      	orrs	r0, r3
   8240c:	4b02      	ldr	r3, [pc, #8]	; (82418 <XMEGANVM_SendNVMRegAddress+0x14>)
   8240e:	4798      	blx	r3
   82410:	bd08      	pop	{r3, pc}
   82412:	bf00      	nop
   82414:	20000848 	.word	0x20000848
   82418:	000823e5 	.word	0x000823e5

0008241c <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   8241c:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8241e:	4e07      	ldr	r6, [pc, #28]	; (8243c <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82420:	4d07      	ldr	r5, [pc, #28]	; (82440 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   82422:	4c08      	ldr	r4, [pc, #32]	; (82444 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   82424:	2080      	movs	r0, #128	; 0x80
   82426:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82428:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8242a:	6823      	ldr	r3, [r4, #0]
   8242c:	b123      	cbz	r3, 82438 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   8242e:	f010 0f02 	tst.w	r0, #2
   82432:	d0f7      	beq.n	82424 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   82434:	2001      	movs	r0, #1
   82436:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   82438:	2000      	movs	r0, #0
		}
	}
}
   8243a:	bd70      	pop	{r4, r5, r6, pc}
   8243c:	00082c79 	.word	0x00082c79
   82440:	00082ca5 	.word	0x00082ca5
   82444:	2000268c 	.word	0x2000268c

00082448 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   82448:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8244a:	206b      	movs	r0, #107	; 0x6b
   8244c:	4b09      	ldr	r3, [pc, #36]	; (82474 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   8244e:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   82450:	200f      	movs	r0, #15
   82452:	4b09      	ldr	r3, [pc, #36]	; (82478 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   82454:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   82456:	4e07      	ldr	r6, [pc, #28]	; (82474 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82458:	4d08      	ldr	r5, [pc, #32]	; (8247c <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8245a:	4c09      	ldr	r4, [pc, #36]	; (82480 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8245c:	2020      	movs	r0, #32
   8245e:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82460:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   82462:	6823      	ldr	r3, [r4, #0]
   82464:	b123      	cbz	r3, 82470 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   82466:	f010 0f80 	tst.w	r0, #128	; 0x80
   8246a:	d1f7      	bne.n	8245c <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   8246c:	2001      	movs	r0, #1
   8246e:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   82470:	2000      	movs	r0, #0
		}
	}
}
   82472:	bd70      	pop	{r4, r5, r6, pc}
   82474:	00082c79 	.word	0x00082c79
   82478:	00082405 	.word	0x00082405
   8247c:	00082ca5 	.word	0x00082ca5
   82480:	2000268c 	.word	0x2000268c

00082484 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   82484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82488:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8248a:	4b1a      	ldr	r3, [pc, #104]	; (824f4 <XMEGANVM_EnablePDI+0x70>)
   8248c:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8248e:	20c1      	movs	r0, #193	; 0xc1
   82490:	4c19      	ldr	r4, [pc, #100]	; (824f8 <XMEGANVM_EnablePDI+0x74>)
   82492:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   82494:	2059      	movs	r0, #89	; 0x59
   82496:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   82498:	20c2      	movs	r0, #194	; 0xc2
   8249a:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   8249c:	2002      	movs	r0, #2
   8249e:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   824a0:	20e0      	movs	r0, #224	; 0xe0
   824a2:	47a0      	blx	r4
   824a4:	f10d 0407 	add.w	r4, sp, #7
   824a8:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   824ac:	2712      	movs	r7, #18
   824ae:	2689      	movs	r6, #137	; 0x89
   824b0:	4d11      	ldr	r5, [pc, #68]	; (824f8 <XMEGANVM_EnablePDI+0x74>)
   824b2:	f88d 7000 	strb.w	r7, [sp]
   824b6:	f88d 6001 	strb.w	r6, [sp, #1]
   824ba:	23ab      	movs	r3, #171	; 0xab
   824bc:	f88d 3002 	strb.w	r3, [sp, #2]
   824c0:	2345      	movs	r3, #69	; 0x45
   824c2:	f88d 3003 	strb.w	r3, [sp, #3]
   824c6:	23cd      	movs	r3, #205	; 0xcd
   824c8:	f88d 3004 	strb.w	r3, [sp, #4]
   824cc:	23d8      	movs	r3, #216	; 0xd8
   824ce:	f88d 3005 	strb.w	r3, [sp, #5]
   824d2:	2388      	movs	r3, #136	; 0x88
   824d4:	f88d 3006 	strb.w	r3, [sp, #6]
   824d8:	23ff      	movs	r3, #255	; 0xff
   824da:	f88d 3007 	strb.w	r3, [sp, #7]
   824de:	f814 0901 	ldrb.w	r0, [r4], #-1
   824e2:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   824e4:	4544      	cmp	r4, r8
   824e6:	d1e4      	bne.n	824b2 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   824e8:	4b04      	ldr	r3, [pc, #16]	; (824fc <XMEGANVM_EnablePDI+0x78>)
   824ea:	4798      	blx	r3
}
   824ec:	b002      	add	sp, #8
   824ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   824f2:	bf00      	nop
   824f4:	00082d45 	.word	0x00082d45
   824f8:	00082c79 	.word	0x00082c79
   824fc:	0008241d 	.word	0x0008241d

00082500 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   82500:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   82502:	4b09      	ldr	r3, [pc, #36]	; (82528 <XMEGANVM_DisablePDI+0x28>)
   82504:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   82506:	4c09      	ldr	r4, [pc, #36]	; (8252c <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   82508:	4d09      	ldr	r5, [pc, #36]	; (82530 <XMEGANVM_DisablePDI+0x30>)
   8250a:	4e0a      	ldr	r6, [pc, #40]	; (82534 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8250c:	20c1      	movs	r0, #193	; 0xc1
   8250e:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   82510:	2000      	movs	r0, #0
   82512:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   82514:	2081      	movs	r0, #129	; 0x81
   82516:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   82518:	47a8      	blx	r5
   8251a:	b110      	cbz	r0, 82522 <XMEGANVM_DisablePDI+0x22>
   8251c:	6833      	ldr	r3, [r6, #0]
   8251e:	2b00      	cmp	r3, #0
   82520:	d1f4      	bne.n	8250c <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   82522:	4b05      	ldr	r3, [pc, #20]	; (82538 <XMEGANVM_DisablePDI+0x38>)
   82524:	4798      	blx	r3
   82526:	bd70      	pop	{r4, r5, r6, pc}
   82528:	0008241d 	.word	0x0008241d
   8252c:	00082c79 	.word	0x00082c79
   82530:	00082ca5 	.word	0x00082ca5
   82534:	2000268c 	.word	0x2000268c
   82538:	00082c1d 	.word	0x00082c1d

0008253c <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   8253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8253e:	4607      	mov	r7, r0
   82540:	460d      	mov	r5, r1
   82542:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82544:	4b1e      	ldr	r3, [pc, #120]	; (825c0 <XMEGANVM_ReadMemory+0x84>)
   82546:	4798      	blx	r3
   82548:	4603      	mov	r3, r0
   8254a:	b908      	cbnz	r0, 82550 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   8254c:	4618      	mov	r0, r3
   8254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82550:	204c      	movs	r0, #76	; 0x4c
   82552:	4e1c      	ldr	r6, [pc, #112]	; (825c4 <XMEGANVM_ReadMemory+0x88>)
   82554:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82556:	200a      	movs	r0, #10
   82558:	4b1b      	ldr	r3, [pc, #108]	; (825c8 <XMEGANVM_ReadMemory+0x8c>)
   8255a:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   8255c:	2043      	movs	r0, #67	; 0x43
   8255e:	47b0      	blx	r6
	if (ReadSize > 1)
   82560:	2c01      	cmp	r4, #1
   82562:	d923      	bls.n	825ac <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82564:	206b      	movs	r0, #107	; 0x6b
   82566:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   82568:	4638      	mov	r0, r7
   8256a:	4b18      	ldr	r3, [pc, #96]	; (825cc <XMEGANVM_ReadMemory+0x90>)
   8256c:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8256e:	20a0      	movs	r0, #160	; 0xa0
   82570:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   82572:	1e60      	subs	r0, r4, #1
   82574:	b2c0      	uxtb	r0, r0
   82576:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82578:	2024      	movs	r0, #36	; 0x24
   8257a:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   8257c:	1e63      	subs	r3, r4, #1
   8257e:	b29b      	uxth	r3, r3
   82580:	b174      	cbz	r4, 825a0 <XMEGANVM_ReadMemory+0x64>
   82582:	4a13      	ldr	r2, [pc, #76]	; (825d0 <XMEGANVM_ReadMemory+0x94>)
   82584:	6812      	ldr	r2, [r2, #0]
   82586:	b15a      	cbz	r2, 825a0 <XMEGANVM_ReadMemory+0x64>
   82588:	1e6c      	subs	r4, r5, #1
   8258a:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8258c:	4e11      	ldr	r6, [pc, #68]	; (825d4 <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   8258e:	4f10      	ldr	r7, [pc, #64]	; (825d0 <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   82590:	47b0      	blx	r6
   82592:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   82596:	42ac      	cmp	r4, r5
   82598:	d002      	beq.n	825a0 <XMEGANVM_ReadMemory+0x64>
   8259a:	683b      	ldr	r3, [r7, #0]
   8259c:	2b00      	cmp	r3, #0
   8259e:	d1f7      	bne.n	82590 <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   825a0:	4b0b      	ldr	r3, [pc, #44]	; (825d0 <XMEGANVM_ReadMemory+0x94>)
   825a2:	681b      	ldr	r3, [r3, #0]
   825a4:	3300      	adds	r3, #0
   825a6:	bf18      	it	ne
   825a8:	2301      	movne	r3, #1
   825aa:	e7cf      	b.n	8254c <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825ac:	200c      	movs	r0, #12
   825ae:	4b05      	ldr	r3, [pc, #20]	; (825c4 <XMEGANVM_ReadMemory+0x88>)
   825b0:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   825b2:	4638      	mov	r0, r7
   825b4:	4b05      	ldr	r3, [pc, #20]	; (825cc <XMEGANVM_ReadMemory+0x90>)
   825b6:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   825b8:	4b06      	ldr	r3, [pc, #24]	; (825d4 <XMEGANVM_ReadMemory+0x98>)
   825ba:	4798      	blx	r3
   825bc:	7028      	strb	r0, [r5, #0]
   825be:	e7ef      	b.n	825a0 <XMEGANVM_ReadMemory+0x64>
   825c0:	00082449 	.word	0x00082449
   825c4:	00082c79 	.word	0x00082c79
   825c8:	00082405 	.word	0x00082405
   825cc:	000823e5 	.word	0x000823e5
   825d0:	2000268c 	.word	0x2000268c
   825d4:	00082ca5 	.word	0x00082ca5

000825d8 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   825d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825dc:	4680      	mov	r8, r0
   825de:	460f      	mov	r7, r1
   825e0:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825e2:	4b0b      	ldr	r3, [pc, #44]	; (82610 <XMEGANVM_WriteByteMemory+0x38>)
   825e4:	4798      	blx	r3
   825e6:	4604      	mov	r4, r0
   825e8:	b910      	cbnz	r0, 825f0 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   825ea:	4620      	mov	r0, r4
   825ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825f0:	204c      	movs	r0, #76	; 0x4c
   825f2:	4d08      	ldr	r5, [pc, #32]	; (82614 <XMEGANVM_WriteByteMemory+0x3c>)
   825f4:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825f6:	200a      	movs	r0, #10
   825f8:	4b07      	ldr	r3, [pc, #28]	; (82618 <XMEGANVM_WriteByteMemory+0x40>)
   825fa:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   825fc:	4640      	mov	r0, r8
   825fe:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82600:	204c      	movs	r0, #76	; 0x4c
   82602:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   82604:	4638      	mov	r0, r7
   82606:	4b05      	ldr	r3, [pc, #20]	; (8261c <XMEGANVM_WriteByteMemory+0x44>)
   82608:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   8260a:	4630      	mov	r0, r6
   8260c:	47a8      	blx	r5
	return true;
   8260e:	e7ec      	b.n	825ea <XMEGANVM_WriteByteMemory+0x12>
   82610:	00082449 	.word	0x00082449
   82614:	00082c79 	.word	0x00082c79
   82618:	00082405 	.word	0x00082405
   8261c:	000823e5 	.word	0x000823e5

00082620 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   82620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82624:	4681      	mov	r9, r0
   82626:	4617      	mov	r7, r2
   82628:	461d      	mov	r5, r3
   8262a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   8262e:	f013 0f01 	tst.w	r3, #1
   82632:	d107      	bne.n	82644 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   82634:	b9e6      	cbnz	r6, 82670 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   82636:	f015 0f02 	tst.w	r5, #2
   8263a:	d13f      	bne.n	826bc <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   8263c:	2401      	movs	r4, #1
}
   8263e:	4620      	mov	r0, r4
   82640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82644:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82646:	4b28      	ldr	r3, [pc, #160]	; (826e8 <XMEGANVM_WritePageMemory+0xc8>)
   82648:	4798      	blx	r3
   8264a:	4604      	mov	r4, r0
   8264c:	2800      	cmp	r0, #0
   8264e:	d0f6      	beq.n	8263e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82650:	204c      	movs	r0, #76	; 0x4c
   82652:	4c26      	ldr	r4, [pc, #152]	; (826ec <XMEGANVM_WritePageMemory+0xcc>)
   82654:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82656:	200a      	movs	r0, #10
   82658:	f8df a094 	ldr.w	sl, [pc, #148]	; 826f0 <XMEGANVM_WritePageMemory+0xd0>
   8265c:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   8265e:	4640      	mov	r0, r8
   82660:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82662:	204c      	movs	r0, #76	; 0x4c
   82664:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82666:	200b      	movs	r0, #11
   82668:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8266a:	2001      	movs	r0, #1
   8266c:	47a0      	blx	r4
   8266e:	e7e1      	b.n	82634 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82670:	4b1d      	ldr	r3, [pc, #116]	; (826e8 <XMEGANVM_WritePageMemory+0xc8>)
   82672:	4798      	blx	r3
   82674:	4604      	mov	r4, r0
   82676:	2800      	cmp	r0, #0
   82678:	d0e1      	beq.n	8263e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8267a:	204c      	movs	r0, #76	; 0x4c
   8267c:	4c1b      	ldr	r4, [pc, #108]	; (826ec <XMEGANVM_WritePageMemory+0xcc>)
   8267e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82680:	200a      	movs	r0, #10
   82682:	4b1b      	ldr	r3, [pc, #108]	; (826f0 <XMEGANVM_WritePageMemory+0xd0>)
   82684:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   82686:	4648      	mov	r0, r9
   82688:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8268a:	206b      	movs	r0, #107	; 0x6b
   8268c:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   8268e:	9808      	ldr	r0, [sp, #32]
   82690:	4b18      	ldr	r3, [pc, #96]	; (826f4 <XMEGANVM_WritePageMemory+0xd4>)
   82692:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82694:	20a0      	movs	r0, #160	; 0xa0
   82696:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   82698:	1e70      	subs	r0, r6, #1
   8269a:	b2c0      	uxtb	r0, r0
   8269c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8269e:	2064      	movs	r0, #100	; 0x64
   826a0:	47a0      	blx	r4
   826a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   826a4:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   826a6:	3e01      	subs	r6, #1
   826a8:	b2b6      	uxth	r6, r6
   826aa:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   826ac:	f8df 803c 	ldr.w	r8, [pc, #60]	; 826ec <XMEGANVM_WritePageMemory+0xcc>
   826b0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   826b4:	47c0      	blx	r8
		while (WriteSize--)
   826b6:	42b4      	cmp	r4, r6
   826b8:	d1fa      	bne.n	826b0 <XMEGANVM_WritePageMemory+0x90>
   826ba:	e7bc      	b.n	82636 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   826bc:	4b0a      	ldr	r3, [pc, #40]	; (826e8 <XMEGANVM_WritePageMemory+0xc8>)
   826be:	4798      	blx	r3
   826c0:	4604      	mov	r4, r0
   826c2:	2800      	cmp	r0, #0
   826c4:	d0bb      	beq.n	8263e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826c6:	204c      	movs	r0, #76	; 0x4c
   826c8:	4d08      	ldr	r5, [pc, #32]	; (826ec <XMEGANVM_WritePageMemory+0xcc>)
   826ca:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   826cc:	200a      	movs	r0, #10
   826ce:	4b08      	ldr	r3, [pc, #32]	; (826f0 <XMEGANVM_WritePageMemory+0xd0>)
   826d0:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   826d2:	4638      	mov	r0, r7
   826d4:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826d6:	204c      	movs	r0, #76	; 0x4c
   826d8:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   826da:	9808      	ldr	r0, [sp, #32]
   826dc:	4b05      	ldr	r3, [pc, #20]	; (826f4 <XMEGANVM_WritePageMemory+0xd4>)
   826de:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   826e0:	2000      	movs	r0, #0
   826e2:	47a8      	blx	r5
   826e4:	e7ab      	b.n	8263e <XMEGANVM_WritePageMemory+0x1e>
   826e6:	bf00      	nop
   826e8:	00082449 	.word	0x00082449
   826ec:	00082c79 	.word	0x00082c79
   826f0:	00082405 	.word	0x00082405
   826f4:	000823e5 	.word	0x000823e5

000826f8 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   826f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826fa:	4604      	mov	r4, r0
   826fc:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   826fe:	4b36      	ldr	r3, [pc, #216]	; (827d8 <XMEGANVM_EraseMemory+0xe0>)
   82700:	4798      	blx	r3
   82702:	4603      	mov	r3, r0
   82704:	b1a8      	cbz	r0, 82732 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   82706:	2c40      	cmp	r4, #64	; 0x40
   82708:	d015      	beq.n	82736 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   8270a:	2c30      	cmp	r4, #48	; 0x30
   8270c:	d022      	beq.n	82754 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8270e:	204c      	movs	r0, #76	; 0x4c
   82710:	4d32      	ldr	r5, [pc, #200]	; (827dc <XMEGANVM_EraseMemory+0xe4>)
   82712:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82714:	200a      	movs	r0, #10
   82716:	4b32      	ldr	r3, [pc, #200]	; (827e0 <XMEGANVM_EraseMemory+0xe8>)
   82718:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   8271a:	4620      	mov	r0, r4
   8271c:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8271e:	204c      	movs	r0, #76	; 0x4c
   82720:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   82722:	4630      	mov	r0, r6
   82724:	4b2f      	ldr	r3, [pc, #188]	; (827e4 <XMEGANVM_EraseMemory+0xec>)
   82726:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   82728:	2000      	movs	r0, #0
   8272a:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   8272c:	4b2e      	ldr	r3, [pc, #184]	; (827e8 <XMEGANVM_EraseMemory+0xf0>)
   8272e:	4798      	blx	r3
   82730:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   82732:	4618      	mov	r0, r3
   82734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82736:	204c      	movs	r0, #76	; 0x4c
   82738:	4c28      	ldr	r4, [pc, #160]	; (827dc <XMEGANVM_EraseMemory+0xe4>)
   8273a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8273c:	200a      	movs	r0, #10
   8273e:	4d28      	ldr	r5, [pc, #160]	; (827e0 <XMEGANVM_EraseMemory+0xe8>)
   82740:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   82742:	2040      	movs	r0, #64	; 0x40
   82744:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82746:	204c      	movs	r0, #76	; 0x4c
   82748:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8274a:	200b      	movs	r0, #11
   8274c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8274e:	2001      	movs	r0, #1
   82750:	47a0      	blx	r4
   82752:	e7eb      	b.n	8272c <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82754:	204c      	movs	r0, #76	; 0x4c
   82756:	4c21      	ldr	r4, [pc, #132]	; (827dc <XMEGANVM_EraseMemory+0xe4>)
   82758:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8275a:	200a      	movs	r0, #10
   8275c:	4d20      	ldr	r5, [pc, #128]	; (827e0 <XMEGANVM_EraseMemory+0xe8>)
   8275e:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   82760:	2036      	movs	r0, #54	; 0x36
   82762:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82764:	204c      	movs	r0, #76	; 0x4c
   82766:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82768:	200b      	movs	r0, #11
   8276a:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8276c:	2001      	movs	r0, #1
   8276e:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82770:	4b19      	ldr	r3, [pc, #100]	; (827d8 <XMEGANVM_EraseMemory+0xe0>)
   82772:	4798      	blx	r3
   82774:	4603      	mov	r3, r0
   82776:	2800      	cmp	r0, #0
   82778:	d0db      	beq.n	82732 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8277a:	204c      	movs	r0, #76	; 0x4c
   8277c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8277e:	200a      	movs	r0, #10
   82780:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   82782:	2033      	movs	r0, #51	; 0x33
   82784:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82786:	206b      	movs	r0, #107	; 0x6b
   82788:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   8278a:	4630      	mov	r0, r6
   8278c:	4b15      	ldr	r3, [pc, #84]	; (827e4 <XMEGANVM_EraseMemory+0xec>)
   8278e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82790:	20a0      	movs	r0, #160	; 0xa0
   82792:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   82794:	4d15      	ldr	r5, [pc, #84]	; (827ec <XMEGANVM_EraseMemory+0xf4>)
   82796:	7828      	ldrb	r0, [r5, #0]
   82798:	3801      	subs	r0, #1
   8279a:	b2c0      	uxtb	r0, r0
   8279c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8279e:	2064      	movs	r0, #100	; 0x64
   827a0:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   827a2:	882b      	ldrh	r3, [r5, #0]
   827a4:	b14b      	cbz	r3, 827ba <XMEGANVM_EraseMemory+0xc2>
   827a6:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   827a8:	4627      	mov	r7, r4
   827aa:	4e0c      	ldr	r6, [pc, #48]	; (827dc <XMEGANVM_EraseMemory+0xe4>)
   827ac:	4638      	mov	r0, r7
   827ae:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   827b0:	3401      	adds	r4, #1
   827b2:	b2e4      	uxtb	r4, r4
   827b4:	882b      	ldrh	r3, [r5, #0]
   827b6:	42a3      	cmp	r3, r4
   827b8:	d8f8      	bhi.n	827ac <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   827ba:	204c      	movs	r0, #76	; 0x4c
   827bc:	4c07      	ldr	r4, [pc, #28]	; (827dc <XMEGANVM_EraseMemory+0xe4>)
   827be:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   827c0:	200a      	movs	r0, #10
   827c2:	4d07      	ldr	r5, [pc, #28]	; (827e0 <XMEGANVM_EraseMemory+0xe8>)
   827c4:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   827c6:	2030      	movs	r0, #48	; 0x30
   827c8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   827ca:	204c      	movs	r0, #76	; 0x4c
   827cc:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   827ce:	200b      	movs	r0, #11
   827d0:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   827d2:	2001      	movs	r0, #1
   827d4:	47a0      	blx	r4
   827d6:	e7a9      	b.n	8272c <XMEGANVM_EraseMemory+0x34>
   827d8:	00082449 	.word	0x00082449
   827dc:	00082c79 	.word	0x00082c79
   827e0:	00082405 	.word	0x00082405
   827e4:	000823e5 	.word	0x000823e5
   827e8:	0008241d 	.word	0x0008241d
   827ec:	20000846 	.word	0x20000846

000827f0 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   827f0:	b570      	push	{r4, r5, r6, lr}
   827f2:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   827f4:	4b8e      	ldr	r3, [pc, #568]	; (82a30 <XPROGProtocol_Command+0x240>)
   827f6:	8858      	ldrh	r0, [r3, #2]
   827f8:	b2c3      	uxtb	r3, r0
   827fa:	4a8e      	ldr	r2, [pc, #568]	; (82a34 <XPROGProtocol_Command+0x244>)
   827fc:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   827fe:	3b01      	subs	r3, #1
   82800:	2b21      	cmp	r3, #33	; 0x21
   82802:	d82b      	bhi.n	8285c <XPROGProtocol_Command+0x6c>
   82804:	e8df f013 	tbh	[pc, r3, lsl #1]
   82808:	002f0022 	.word	0x002f0022
   8280c:	00730037 	.word	0x00730037
   82810:	00c900a5 	.word	0x00c900a5
   82814:	002a00cc 	.word	0x002a00cc
   82818:	002a002a 	.word	0x002a002a
   8281c:	002a002a 	.word	0x002a002a
   82820:	002a002a 	.word	0x002a002a
   82824:	002a002a 	.word	0x002a002a
   82828:	002a002a 	.word	0x002a002a
   8282c:	002a002a 	.word	0x002a002a
   82830:	002a002a 	.word	0x002a002a
   82834:	002a002a 	.word	0x002a002a
   82838:	002a002a 	.word	0x002a002a
   8283c:	002a002a 	.word	0x002a002a
   82840:	002a002a 	.word	0x002a002a
   82844:	0160002a 	.word	0x0160002a
   82848:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   8284c:	4b7a      	ldr	r3, [pc, #488]	; (82a38 <XPROGProtocol_Command+0x248>)
   8284e:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   82850:	4b7a      	ldr	r3, [pc, #488]	; (82a3c <XPROGProtocol_Command+0x24c>)
   82852:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   82854:	f080 0001 	eor.w	r0, r0, #1
   82858:	4b79      	ldr	r3, [pc, #484]	; (82a40 <XPROGProtocol_Command+0x250>)
   8285a:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   8285c:	4b79      	ldr	r3, [pc, #484]	; (82a44 <XPROGProtocol_Command+0x254>)
   8285e:	4798      	blx	r3
	return false;
   82860:	2000      	movs	r0, #0
}
   82862:	b004      	add	sp, #16
   82864:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   82866:	4b74      	ldr	r3, [pc, #464]	; (82a38 <XPROGProtocol_Command+0x248>)
   82868:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   8286a:	4b77      	ldr	r3, [pc, #476]	; (82a48 <XPROGProtocol_Command+0x258>)
   8286c:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   8286e:	2200      	movs	r2, #0
   82870:	4b73      	ldr	r3, [pc, #460]	; (82a40 <XPROGProtocol_Command+0x250>)
   82872:	701a      	strb	r2, [r3, #0]
   82874:	e7f2      	b.n	8285c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82876:	4b70      	ldr	r3, [pc, #448]	; (82a38 <XPROGProtocol_Command+0x248>)
   82878:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   8287a:	2200      	movs	r2, #0
   8287c:	4b70      	ldr	r3, [pc, #448]	; (82a40 <XPROGProtocol_Command+0x250>)
   8287e:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   82880:	4b6b      	ldr	r3, [pc, #428]	; (82a30 <XPROGProtocol_Command+0x240>)
   82882:	899b      	ldrh	r3, [r3, #12]
   82884:	2b04      	cmp	r3, #4
   82886:	d915      	bls.n	828b4 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   82888:	4b69      	ldr	r3, [pc, #420]	; (82a30 <XPROGProtocol_Command+0x240>)
   8288a:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8288c:	791a      	ldrb	r2, [r3, #4]
   8288e:	78d9      	ldrb	r1, [r3, #3]
   82890:	0409      	lsls	r1, r1, #16
   82892:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82896:	785a      	ldrb	r2, [r3, #1]
   82898:	4311      	orrs	r1, r2
   8289a:	789a      	ldrb	r2, [r3, #2]
   8289c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   828a0:	781b      	ldrb	r3, [r3, #0]
   828a2:	3b01      	subs	r3, #1
   828a4:	2b07      	cmp	r3, #7
   828a6:	d817      	bhi.n	828d8 <XPROGProtocol_Command+0xe8>
   828a8:	e8df f003 	tbb	[pc, r3]
   828ac:	0c0a0818 	.word	0x0c0a0818
   828b0:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   828b4:	2201      	movs	r2, #1
   828b6:	4b62      	ldr	r3, [pc, #392]	; (82a40 <XPROGProtocol_Command+0x250>)
   828b8:	701a      	strb	r2, [r3, #0]
   828ba:	e7cf      	b.n	8285c <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   828bc:	2020      	movs	r0, #32
   828be:	e00e      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   828c0:	2068      	movs	r0, #104	; 0x68
   828c2:	e00c      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   828c4:	2030      	movs	r0, #48	; 0x30
   828c6:	e00a      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   828c8:	2022      	movs	r0, #34	; 0x22
   828ca:	e008      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   828cc:	202a      	movs	r0, #42	; 0x2a
   828ce:	e006      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   828d0:	2032      	movs	r0, #50	; 0x32
   828d2:	e004      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   828d4:	2018      	movs	r0, #24
   828d6:	e002      	b.n	828de <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   828d8:	2000      	movs	r0, #0
   828da:	e000      	b.n	828de <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   828dc:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   828de:	4b5b      	ldr	r3, [pc, #364]	; (82a4c <XPROGProtocol_Command+0x25c>)
   828e0:	4798      	blx	r3
   828e2:	2800      	cmp	r0, #0
   828e4:	d1ba      	bne.n	8285c <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   828e6:	2203      	movs	r2, #3
   828e8:	4b55      	ldr	r3, [pc, #340]	; (82a40 <XPROGProtocol_Command+0x250>)
   828ea:	701a      	strb	r2, [r3, #0]
   828ec:	e7b6      	b.n	8285c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   828ee:	4b52      	ldr	r3, [pc, #328]	; (82a38 <XPROGProtocol_Command+0x248>)
   828f0:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   828f2:	2200      	movs	r2, #0
   828f4:	4b52      	ldr	r3, [pc, #328]	; (82a40 <XPROGProtocol_Command+0x250>)
   828f6:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   828f8:	4b4d      	ldr	r3, [pc, #308]	; (82a30 <XPROGProtocol_Command+0x240>)
   828fa:	88db      	ldrh	r3, [r3, #6]
   828fc:	2b07      	cmp	r3, #7
   828fe:	d802      	bhi.n	82906 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   82900:	2201      	movs	r2, #1
   82902:	4b4f      	ldr	r3, [pc, #316]	; (82a40 <XPROGProtocol_Command+0x250>)
   82904:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   82906:	4b4a      	ldr	r3, [pc, #296]	; (82a30 <XPROGProtocol_Command+0x240>)
   82908:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8290a:	795a      	ldrb	r2, [r3, #5]
   8290c:	7919      	ldrb	r1, [r3, #4]
   8290e:	0409      	lsls	r1, r1, #16
   82910:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82914:	789a      	ldrb	r2, [r3, #2]
   82916:	4311      	orrs	r1, r2
   82918:	78da      	ldrb	r2, [r3, #3]
   8291a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   8291e:	781a      	ldrb	r2, [r3, #0]
   82920:	3a01      	subs	r2, #1
   82922:	2a05      	cmp	r2, #5
   82924:	d811      	bhi.n	8294a <XPROGProtocol_Command+0x15a>
   82926:	e8df f012 	tbh	[pc, r2, lsl #1]
   8292a:	00e1      	.short	0x00e1
   8292c:	00e50008 	.word	0x00e50008
   82930:	000600fd 	.word	0x000600fd
   82934:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   82936:	2008      	movs	r0, #8
   82938:	e0f5      	b.n	82b26 <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8293a:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8293c:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   8293e:	222c      	movs	r2, #44	; 0x2c
   82940:	e0db      	b.n	82afa <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82942:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82944:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   82946:	221a      	movs	r2, #26
   82948:	e0d7      	b.n	82afa <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   8294a:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8294c:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8294e:	2023      	movs	r0, #35	; 0x23
   82950:	e0d3      	b.n	82afa <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   82952:	4b39      	ldr	r3, [pc, #228]	; (82a38 <XPROGProtocol_Command+0x248>)
   82954:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   82956:	2200      	movs	r2, #0
   82958:	4b39      	ldr	r3, [pc, #228]	; (82a40 <XPROGProtocol_Command+0x250>)
   8295a:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8295c:	4b34      	ldr	r3, [pc, #208]	; (82a30 <XPROGProtocol_Command+0x240>)
   8295e:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   82960:	798b      	ldrb	r3, [r1, #6]
   82962:	794a      	ldrb	r2, [r1, #5]
   82964:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82968:	7908      	ldrb	r0, [r1, #4]
   8296a:	78cb      	ldrb	r3, [r1, #3]
   8296c:	041b      	lsls	r3, r3, #16
   8296e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   82972:	7848      	ldrb	r0, [r1, #1]
   82974:	4303      	orrs	r3, r0
   82976:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   82978:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   8297c:	bf28      	it	cs
   8297e:	f44f 7280 	movcs.w	r2, #256	; 0x100
   82982:	4933      	ldr	r1, [pc, #204]	; (82a50 <XPROGProtocol_Command+0x260>)
   82984:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82988:	4b32      	ldr	r3, [pc, #200]	; (82a54 <XPROGProtocol_Command+0x264>)
   8298a:	4798      	blx	r3
   8298c:	2800      	cmp	r0, #0
   8298e:	f47f af65 	bne.w	8285c <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   82992:	2203      	movs	r2, #3
   82994:	4b2a      	ldr	r3, [pc, #168]	; (82a40 <XPROGProtocol_Command+0x250>)
   82996:	701a      	strb	r2, [r3, #0]
   82998:	e760      	b.n	8285c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8299a:	4b27      	ldr	r3, [pc, #156]	; (82a38 <XPROGProtocol_Command+0x248>)
   8299c:	4798      	blx	r3
			break;
   8299e:	e75d      	b.n	8285c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   829a0:	4b25      	ldr	r3, [pc, #148]	; (82a38 <XPROGProtocol_Command+0x248>)
   829a2:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   829a4:	2200      	movs	r2, #0
   829a6:	4b26      	ldr	r3, [pc, #152]	; (82a40 <XPROGProtocol_Command+0x250>)
   829a8:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   829aa:	4b21      	ldr	r3, [pc, #132]	; (82a30 <XPROGProtocol_Command+0x240>)
   829ac:	8999      	ldrh	r1, [r3, #12]
   829ae:	2901      	cmp	r1, #1
   829b0:	d90b      	bls.n	829ca <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   829b2:	4b1f      	ldr	r3, [pc, #124]	; (82a30 <XPROGProtocol_Command+0x240>)
   829b4:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   829b6:	7813      	ldrb	r3, [r2, #0]
   829b8:	3b01      	subs	r3, #1
   829ba:	2b07      	cmp	r3, #7
   829bc:	d861      	bhi.n	82a82 <XPROGProtocol_Command+0x292>
   829be:	e8df f003 	tbb	[pc, r3]
   829c2:	1b08      	.short	0x1b08
   829c4:	60602c28 	.word	0x60602c28
   829c8:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   829ca:	2201      	movs	r2, #1
   829cc:	4b1c      	ldr	r3, [pc, #112]	; (82a40 <XPROGProtocol_Command+0x250>)
   829ce:	701a      	strb	r2, [r3, #0]
   829d0:	e744      	b.n	8285c <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   829d2:	2904      	cmp	r1, #4
   829d4:	d803      	bhi.n	829de <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   829d6:	2201      	movs	r2, #1
   829d8:	4b19      	ldr	r3, [pc, #100]	; (82a40 <XPROGProtocol_Command+0x250>)
   829da:	701a      	strb	r2, [r3, #0]
   829dc:	e73e      	b.n	8285c <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   829de:	7911      	ldrb	r1, [r2, #4]
   829e0:	78d3      	ldrb	r3, [r2, #3]
   829e2:	041b      	lsls	r3, r3, #16
   829e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   829e8:	7851      	ldrb	r1, [r2, #1]
   829ea:	430b      	orrs	r3, r1
   829ec:	7892      	ldrb	r2, [r2, #2]
   829ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   829f2:	4a19      	ldr	r2, [pc, #100]	; (82a58 <XPROGProtocol_Command+0x268>)
   829f4:	6013      	str	r3, [r2, #0]
   829f6:	e731      	b.n	8285c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   829f8:	2902      	cmp	r1, #2
   829fa:	d803      	bhi.n	82a04 <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   829fc:	2201      	movs	r2, #1
   829fe:	4b10      	ldr	r3, [pc, #64]	; (82a40 <XPROGProtocol_Command+0x250>)
   82a00:	701a      	strb	r2, [r3, #0]
   82a02:	e72b      	b.n	8285c <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   82a04:	7891      	ldrb	r1, [r2, #2]
   82a06:	7853      	ldrb	r3, [r2, #1]
   82a08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   82a0c:	4a13      	ldr	r2, [pc, #76]	; (82a5c <XPROGProtocol_Command+0x26c>)
   82a0e:	8013      	strh	r3, [r2, #0]
   82a10:	e724      	b.n	8285c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   82a12:	7852      	ldrb	r2, [r2, #1]
   82a14:	4b12      	ldr	r3, [pc, #72]	; (82a60 <XPROGProtocol_Command+0x270>)
   82a16:	701a      	strb	r2, [r3, #0]
   82a18:	e720      	b.n	8285c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   82a1a:	7852      	ldrb	r2, [r2, #1]
   82a1c:	4b11      	ldr	r3, [pc, #68]	; (82a64 <XPROGProtocol_Command+0x274>)
   82a1e:	701a      	strb	r2, [r3, #0]
   82a20:	e71c      	b.n	8285c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   82a22:	2904      	cmp	r1, #4
   82a24:	d820      	bhi.n	82a68 <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   82a26:	2201      	movs	r2, #1
   82a28:	4b05      	ldr	r3, [pc, #20]	; (82a40 <XPROGProtocol_Command+0x250>)
   82a2a:	701a      	strb	r2, [r3, #0]
   82a2c:	e716      	b.n	8285c <XPROGProtocol_Command+0x6c>
   82a2e:	bf00      	nop
   82a30:	200026a4 	.word	0x200026a4
   82a34:	20001f74 	.word	0x20001f74
   82a38:	00082e49 	.word	0x00082e49
   82a3c:	00082485 	.word	0x00082485
   82a40:	20002688 	.word	0x20002688
   82a44:	00082e91 	.word	0x00082e91
   82a48:	00082501 	.word	0x00082501
   82a4c:	000826f9 	.word	0x000826f9
   82a50:	20001f78 	.word	0x20001f78
   82a54:	0008253d 	.word	0x0008253d
   82a58:	20000848 	.word	0x20000848
   82a5c:	20000846 	.word	0x20000846
   82a60:	2000084c 	.word	0x2000084c
   82a64:	2000084d 	.word	0x2000084d
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   82a68:	7911      	ldrb	r1, [r2, #4]
   82a6a:	78d3      	ldrb	r3, [r2, #3]
   82a6c:	041b      	lsls	r3, r3, #16
   82a6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82a72:	7851      	ldrb	r1, [r2, #1]
   82a74:	430b      	orrs	r3, r1
   82a76:	7890      	ldrb	r0, [r2, #2]
   82a78:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82a7c:	4b2f      	ldr	r3, [pc, #188]	; (82b3c <XPROGProtocol_Command+0x34c>)
   82a7e:	4798      	blx	r3
   82a80:	e6ec      	b.n	8285c <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   82a82:	2201      	movs	r2, #1
   82a84:	4b2e      	ldr	r3, [pc, #184]	; (82b40 <XPROGProtocol_Command+0x350>)
   82a86:	701a      	strb	r2, [r3, #0]
   82a88:	e6e8      	b.n	8285c <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82a8a:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   82a8c:	4b2d      	ldr	r3, [pc, #180]	; (82b44 <XPROGProtocol_Command+0x354>)
   82a8e:	88db      	ldrh	r3, [r3, #6]
   82a90:	18c2      	adds	r2, r0, r3
   82a92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   82a96:	dc27      	bgt.n	82ae8 <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   82a98:	492a      	ldr	r1, [pc, #168]	; (82b44 <XPROGProtocol_Command+0x354>)
   82a9a:	4a2b      	ldr	r2, [pc, #172]	; (82b48 <XPROGProtocol_Command+0x358>)
   82a9c:	4410      	add	r0, r2
   82a9e:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82aa0:	818b      	strh	r3, [r1, #12]
			return true;
   82aa2:	2001      	movs	r0, #1
   82aa4:	e6dd      	b.n	82862 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82aa6:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   82aa8:	4b26      	ldr	r3, [pc, #152]	; (82b44 <XPROGProtocol_Command+0x354>)
   82aaa:	88da      	ldrh	r2, [r3, #6]
   82aac:	1883      	adds	r3, r0, r2
   82aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82ab2:	dd01      	ble.n	82ab8 <XPROGProtocol_Command+0x2c8>
				return false;
   82ab4:	2000      	movs	r0, #0
   82ab6:	e6d4      	b.n	82862 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82ab8:	4b22      	ldr	r3, [pc, #136]	; (82b44 <XPROGProtocol_Command+0x354>)
   82aba:	6899      	ldr	r1, [r3, #8]
   82abc:	4b22      	ldr	r3, [pc, #136]	; (82b48 <XPROGProtocol_Command+0x358>)
   82abe:	4418      	add	r0, r3
   82ac0:	4b22      	ldr	r3, [pc, #136]	; (82b4c <XPROGProtocol_Command+0x35c>)
   82ac2:	4798      	blx	r3
			return true;
   82ac4:	2001      	movs	r0, #1
   82ac6:	e6cc      	b.n	82862 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   82ac8:	4a21      	ldr	r2, [pc, #132]	; (82b50 <XPROGProtocol_Command+0x360>)
   82aca:	4b1d      	ldr	r3, [pc, #116]	; (82b40 <XPROGProtocol_Command+0x350>)
   82acc:	781b      	ldrb	r3, [r3, #0]
   82ace:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   82ad0:	4b20      	ldr	r3, [pc, #128]	; (82b54 <XPROGProtocol_Command+0x364>)
   82ad2:	681b      	ldr	r3, [r3, #0]
   82ad4:	fab3 f383 	clz	r3, r3
   82ad8:	095b      	lsrs	r3, r3, #5
   82ada:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   82adc:	4b19      	ldr	r3, [pc, #100]	; (82b44 <XPROGProtocol_Command+0x354>)
   82ade:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   82ae0:	2203      	movs	r2, #3
   82ae2:	819a      	strh	r2, [r3, #12]
			return true;
   82ae4:	2001      	movs	r0, #1
   82ae6:	e6bc      	b.n	82862 <XPROGProtocol_Command+0x72>
				return false;
   82ae8:	2000      	movs	r0, #0
   82aea:	e6ba      	b.n	82862 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82aec:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82aee:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   82af0:	2224      	movs	r2, #36	; 0x24
   82af2:	e002      	b.n	82afa <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   82af4:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   82af6:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   82af8:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   82afa:	79de      	ldrb	r6, [r3, #7]
   82afc:	799c      	ldrb	r4, [r3, #6]
   82afe:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82b02:	785b      	ldrb	r3, [r3, #1]
   82b04:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   82b08:	bf28      	it	cs
   82b0a:	f44f 7480 	movcs.w	r4, #256	; 0x100
   82b0e:	9402      	str	r4, [sp, #8]
   82b10:	4c0d      	ldr	r4, [pc, #52]	; (82b48 <XPROGProtocol_Command+0x358>)
   82b12:	9401      	str	r4, [sp, #4]
   82b14:	9100      	str	r1, [sp, #0]
   82b16:	4629      	mov	r1, r5
   82b18:	4c0f      	ldr	r4, [pc, #60]	; (82b58 <XPROGProtocol_Command+0x368>)
   82b1a:	47a0      	blx	r4
   82b1c:	2800      	cmp	r0, #0
   82b1e:	f47f ae9d 	bne.w	8285c <XPROGProtocol_Command+0x6c>
   82b22:	e007      	b.n	82b34 <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   82b24:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   82b26:	4b08      	ldr	r3, [pc, #32]	; (82b48 <XPROGProtocol_Command+0x358>)
   82b28:	781a      	ldrb	r2, [r3, #0]
   82b2a:	4b0c      	ldr	r3, [pc, #48]	; (82b5c <XPROGProtocol_Command+0x36c>)
   82b2c:	4798      	blx	r3
   82b2e:	2800      	cmp	r0, #0
   82b30:	f47f ae94 	bne.w	8285c <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   82b34:	2203      	movs	r2, #3
   82b36:	4b02      	ldr	r3, [pc, #8]	; (82b40 <XPROGProtocol_Command+0x350>)
   82b38:	701a      	strb	r2, [r3, #0]
   82b3a:	e68f      	b.n	8285c <XPROGProtocol_Command+0x6c>
   82b3c:	00082dd9 	.word	0x00082dd9
   82b40:	20002688 	.word	0x20002688
   82b44:	200026a4 	.word	0x200026a4
   82b48:	20001f78 	.word	0x20001f78
   82b4c:	00085ffd 	.word	0x00085ffd
   82b50:	20001f74 	.word	0x20001f74
   82b54:	2000268c 	.word	0x2000268c
   82b58:	00082621 	.word	0x00082621
   82b5c:	000825d9 	.word	0x000825d9

00082b60 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   82b60:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   82b62:	4d0b      	ldr	r5, [pc, #44]	; (82b90 <XPROGTarget_SetRxMode+0x30>)
   82b64:	4c0b      	ldr	r4, [pc, #44]	; (82b94 <XPROGTarget_SetRxMode+0x34>)
   82b66:	4628      	mov	r0, r5
   82b68:	47a0      	blx	r4
   82b6a:	2800      	cmp	r0, #0
   82b6c:	d0fb      	beq.n	82b66 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   82b6e:	4c08      	ldr	r4, [pc, #32]	; (82b90 <XPROGTarget_SetRxMode+0x30>)
   82b70:	4620      	mov	r0, r4
   82b72:	4b09      	ldr	r3, [pc, #36]	; (82b98 <XPROGTarget_SetRxMode+0x38>)
   82b74:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   82b76:	4620      	mov	r0, r4
   82b78:	4b08      	ldr	r3, [pc, #32]	; (82b9c <XPROGTarget_SetRxMode+0x3c>)
   82b7a:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82b7c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b80:	2014      	movs	r0, #20
   82b82:	4b07      	ldr	r3, [pc, #28]	; (82ba0 <XPROGTarget_SetRxMode+0x40>)
   82b84:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   82b86:	2200      	movs	r2, #0
   82b88:	4b06      	ldr	r3, [pc, #24]	; (82ba4 <XPROGTarget_SetRxMode+0x44>)
   82b8a:	701a      	strb	r2, [r3, #0]
   82b8c:	bd38      	pop	{r3, r4, r5, pc}
   82b8e:	bf00      	nop
   82b90:	40094000 	.word	0x40094000
   82b94:	000856bd 	.word	0x000856bd
   82b98:	0008569b 	.word	0x0008569b
   82b9c:	000856a1 	.word	0x000856a1
   82ba0:	00083cc5 	.word	0x00083cc5
   82ba4:	20002078 	.word	0x20002078

00082ba8 <XPROGTarget_SetTxMode>:
{
   82ba8:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82baa:	2518      	movs	r5, #24
   82bac:	4c14      	ldr	r4, [pc, #80]	; (82c00 <XPROGTarget_SetTxMode+0x58>)
   82bae:	4e15      	ldr	r6, [pc, #84]	; (82c04 <XPROGTarget_SetTxMode+0x5c>)
   82bb0:	4628      	mov	r0, r5
   82bb2:	47a0      	blx	r4
   82bb4:	b110      	cbz	r0, 82bbc <XPROGTarget_SetTxMode+0x14>
   82bb6:	6833      	ldr	r3, [r6, #0]
   82bb8:	2b00      	cmp	r3, #0
   82bba:	d1f9      	bne.n	82bb0 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82bbc:	2518      	movs	r5, #24
   82bbe:	4c10      	ldr	r4, [pc, #64]	; (82c00 <XPROGTarget_SetTxMode+0x58>)
   82bc0:	4e10      	ldr	r6, [pc, #64]	; (82c04 <XPROGTarget_SetTxMode+0x5c>)
   82bc2:	4628      	mov	r0, r5
   82bc4:	47a0      	blx	r4
   82bc6:	b910      	cbnz	r0, 82bce <XPROGTarget_SetTxMode+0x26>
   82bc8:	6833      	ldr	r3, [r6, #0]
   82bca:	2b00      	cmp	r3, #0
   82bcc:	d1f9      	bne.n	82bc2 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82bce:	2518      	movs	r5, #24
   82bd0:	4c0b      	ldr	r4, [pc, #44]	; (82c00 <XPROGTarget_SetTxMode+0x58>)
   82bd2:	4e0c      	ldr	r6, [pc, #48]	; (82c04 <XPROGTarget_SetTxMode+0x5c>)
   82bd4:	4628      	mov	r0, r5
   82bd6:	47a0      	blx	r4
   82bd8:	b110      	cbz	r0, 82be0 <XPROGTarget_SetTxMode+0x38>
   82bda:	6833      	ldr	r3, [r6, #0]
   82bdc:	2b00      	cmp	r3, #0
   82bde:	d1f9      	bne.n	82bd4 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   82be0:	4c09      	ldr	r4, [pc, #36]	; (82c08 <XPROGTarget_SetTxMode+0x60>)
   82be2:	4620      	mov	r0, r4
   82be4:	4b09      	ldr	r3, [pc, #36]	; (82c0c <XPROGTarget_SetTxMode+0x64>)
   82be6:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   82be8:	4620      	mov	r0, r4
   82bea:	4b09      	ldr	r3, [pc, #36]	; (82c10 <XPROGTarget_SetTxMode+0x68>)
   82bec:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   82bee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82bf2:	2014      	movs	r0, #20
   82bf4:	4b07      	ldr	r3, [pc, #28]	; (82c14 <XPROGTarget_SetTxMode+0x6c>)
   82bf6:	4798      	blx	r3
	IsSending = true;
   82bf8:	2201      	movs	r2, #1
   82bfa:	4b07      	ldr	r3, [pc, #28]	; (82c18 <XPROGTarget_SetTxMode+0x70>)
   82bfc:	701a      	strb	r2, [r3, #0]
   82bfe:	bd70      	pop	{r4, r5, r6, pc}
   82c00:	00083c73 	.word	0x00083c73
   82c04:	2000268c 	.word	0x2000268c
   82c08:	40094000 	.word	0x40094000
   82c0c:	000856a7 	.word	0x000856a7
   82c10:	00085695 	.word	0x00085695
   82c14:	00083cc5 	.word	0x00083cc5
   82c18:	20002078 	.word	0x20002078

00082c1c <XPROGTarget_DisableTargetPDI>:
{
   82c1c:	b510      	push	{r4, lr}
	if (IsSending)
   82c1e:	4b0f      	ldr	r3, [pc, #60]	; (82c5c <XPROGTarget_DisableTargetPDI+0x40>)
   82c20:	781b      	ldrb	r3, [r3, #0]
   82c22:	b9bb      	cbnz	r3, 82c54 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   82c24:	4c0e      	ldr	r4, [pc, #56]	; (82c60 <XPROGTarget_DisableTargetPDI+0x44>)
   82c26:	4620      	mov	r0, r4
   82c28:	4b0e      	ldr	r3, [pc, #56]	; (82c64 <XPROGTarget_DisableTargetPDI+0x48>)
   82c2a:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   82c2c:	4620      	mov	r0, r4
   82c2e:	4b0e      	ldr	r3, [pc, #56]	; (82c68 <XPROGTarget_DisableTargetPDI+0x4c>)
   82c30:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   82c32:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c36:	2018      	movs	r0, #24
   82c38:	4c0c      	ldr	r4, [pc, #48]	; (82c6c <XPROGTarget_DisableTargetPDI+0x50>)
   82c3a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82c3c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c40:	2015      	movs	r0, #21
   82c42:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82c44:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c48:	2014      	movs	r0, #20
   82c4a:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   82c4c:	200e      	movs	r0, #14
   82c4e:	4b08      	ldr	r3, [pc, #32]	; (82c70 <XPROGTarget_DisableTargetPDI+0x54>)
   82c50:	4798      	blx	r3
   82c52:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   82c54:	4b07      	ldr	r3, [pc, #28]	; (82c74 <XPROGTarget_DisableTargetPDI+0x58>)
   82c56:	4798      	blx	r3
   82c58:	e7e4      	b.n	82c24 <XPROGTarget_DisableTargetPDI+0x8>
   82c5a:	bf00      	nop
   82c5c:	20002078 	.word	0x20002078
   82c60:	40094000 	.word	0x40094000
   82c64:	000856a7 	.word	0x000856a7
   82c68:	0008569b 	.word	0x0008569b
   82c6c:	00083cc5 	.word	0x00083cc5
   82c70:	0008403d 	.word	0x0008403d
   82c74:	00082b61 	.word	0x00082b61

00082c78 <XPROGTarget_SendByte>:
{
   82c78:	b510      	push	{r4, lr}
   82c7a:	4604      	mov	r4, r0
	if (!(IsSending))
   82c7c:	4b05      	ldr	r3, [pc, #20]	; (82c94 <XPROGTarget_SendByte+0x1c>)
   82c7e:	781b      	ldrb	r3, [r3, #0]
   82c80:	b123      	cbz	r3, 82c8c <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   82c82:	4621      	mov	r1, r4
   82c84:	4804      	ldr	r0, [pc, #16]	; (82c98 <XPROGTarget_SendByte+0x20>)
   82c86:	4b05      	ldr	r3, [pc, #20]	; (82c9c <XPROGTarget_SendByte+0x24>)
   82c88:	4798      	blx	r3
   82c8a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   82c8c:	4b04      	ldr	r3, [pc, #16]	; (82ca0 <XPROGTarget_SendByte+0x28>)
   82c8e:	4798      	blx	r3
   82c90:	e7f7      	b.n	82c82 <XPROGTarget_SendByte+0xa>
   82c92:	bf00      	nop
   82c94:	20002078 	.word	0x20002078
   82c98:	40094000 	.word	0x40094000
   82c9c:	000856d9 	.word	0x000856d9
   82ca0:	00082ba9 	.word	0x00082ba9

00082ca4 <XPROGTarget_ReceiveByte>:
{
   82ca4:	b570      	push	{r4, r5, r6, lr}
   82ca6:	b082      	sub	sp, #8
	if (IsSending)
   82ca8:	4b0a      	ldr	r3, [pc, #40]	; (82cd4 <XPROGTarget_ReceiveByte+0x30>)
   82caa:	781b      	ldrb	r3, [r3, #0]
   82cac:	b973      	cbnz	r3, 82ccc <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   82cae:	4d0a      	ldr	r5, [pc, #40]	; (82cd8 <XPROGTarget_ReceiveByte+0x34>)
   82cb0:	4c0a      	ldr	r4, [pc, #40]	; (82cdc <XPROGTarget_ReceiveByte+0x38>)
   82cb2:	4e0b      	ldr	r6, [pc, #44]	; (82ce0 <XPROGTarget_ReceiveByte+0x3c>)
   82cb4:	a901      	add	r1, sp, #4
   82cb6:	4628      	mov	r0, r5
   82cb8:	47a0      	blx	r4
   82cba:	2801      	cmp	r0, #1
   82cbc:	d102      	bne.n	82cc4 <XPROGTarget_ReceiveByte+0x20>
   82cbe:	6833      	ldr	r3, [r6, #0]
   82cc0:	2b00      	cmp	r3, #0
   82cc2:	d1f7      	bne.n	82cb4 <XPROGTarget_ReceiveByte+0x10>
}
   82cc4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   82cc8:	b002      	add	sp, #8
   82cca:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   82ccc:	4b05      	ldr	r3, [pc, #20]	; (82ce4 <XPROGTarget_ReceiveByte+0x40>)
   82cce:	4798      	blx	r3
   82cd0:	e7ed      	b.n	82cae <XPROGTarget_ReceiveByte+0xa>
   82cd2:	bf00      	nop
   82cd4:	20002078 	.word	0x20002078
   82cd8:	40094000 	.word	0x40094000
   82cdc:	000856eb 	.word	0x000856eb
   82ce0:	2000268c 	.word	0x2000268c
   82ce4:	00082b61 	.word	0x00082b61

00082ce8 <XPROGTarget_SendIdle>:
{
   82ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   82cea:	4b12      	ldr	r3, [pc, #72]	; (82d34 <XPROGTarget_SendIdle+0x4c>)
   82cec:	781b      	ldrb	r3, [r3, #0]
   82cee:	b123      	cbz	r3, 82cfa <XPROGTarget_SendIdle+0x12>
{
   82cf0:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82cf2:	2518      	movs	r5, #24
   82cf4:	4c10      	ldr	r4, [pc, #64]	; (82d38 <XPROGTarget_SendIdle+0x50>)
   82cf6:	4e11      	ldr	r6, [pc, #68]	; (82d3c <XPROGTarget_SendIdle+0x54>)
   82cf8:	e006      	b.n	82d08 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   82cfa:	4b11      	ldr	r3, [pc, #68]	; (82d40 <XPROGTarget_SendIdle+0x58>)
   82cfc:	4798      	blx	r3
   82cfe:	e7f7      	b.n	82cf0 <XPROGTarget_SendIdle+0x8>
   82d00:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   82d02:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   82d06:	d013      	beq.n	82d30 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82d08:	4628      	mov	r0, r5
   82d0a:	47a0      	blx	r4
   82d0c:	b110      	cbz	r0, 82d14 <XPROGTarget_SendIdle+0x2c>
   82d0e:	6833      	ldr	r3, [r6, #0]
   82d10:	2b00      	cmp	r3, #0
   82d12:	d1f9      	bne.n	82d08 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82d14:	4628      	mov	r0, r5
   82d16:	47a0      	blx	r4
   82d18:	b910      	cbnz	r0, 82d20 <XPROGTarget_SendIdle+0x38>
   82d1a:	6833      	ldr	r3, [r6, #0]
   82d1c:	2b00      	cmp	r3, #0
   82d1e:	d1f9      	bne.n	82d14 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82d20:	4628      	mov	r0, r5
   82d22:	47a0      	blx	r4
   82d24:	2800      	cmp	r0, #0
   82d26:	d0eb      	beq.n	82d00 <XPROGTarget_SendIdle+0x18>
   82d28:	6833      	ldr	r3, [r6, #0]
   82d2a:	2b00      	cmp	r3, #0
   82d2c:	d1f8      	bne.n	82d20 <XPROGTarget_SendIdle+0x38>
   82d2e:	e7e7      	b.n	82d00 <XPROGTarget_SendIdle+0x18>
}
   82d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d32:	bf00      	nop
   82d34:	20002078 	.word	0x20002078
   82d38:	00083c73 	.word	0x00083c73
   82d3c:	2000268c 	.word	0x2000268c
   82d40:	00082ba9 	.word	0x00082ba9

00082d44 <XPROGTarget_EnableTargetPDI>:
{
   82d44:	b570      	push	{r4, r5, r6, lr}
   82d46:	b086      	sub	sp, #24
	IsSending = false;
   82d48:	2500      	movs	r5, #0
   82d4a:	4b19      	ldr	r3, [pc, #100]	; (82db0 <XPROGTarget_EnableTargetPDI+0x6c>)
   82d4c:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   82d4e:	200e      	movs	r0, #14
   82d50:	4b18      	ldr	r3, [pc, #96]	; (82db4 <XPROGTarget_EnableTargetPDI+0x70>)
   82d52:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   82d54:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d58:	2014      	movs	r0, #20
   82d5a:	4c17      	ldr	r4, [pc, #92]	; (82db8 <XPROGTarget_EnableTargetPDI+0x74>)
   82d5c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82d5e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82d62:	2015      	movs	r0, #21
   82d64:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   82d66:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d6a:	2018      	movs	r0, #24
   82d6c:	47a0      	blx	r4
	delay_us(50);
   82d6e:	f240 1057 	movw	r0, #343	; 0x157
   82d72:	4e12      	ldr	r6, [pc, #72]	; (82dbc <XPROGTarget_EnableTargetPDI+0x78>)
   82d74:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   82d76:	2014      	movs	r0, #20
   82d78:	4b11      	ldr	r3, [pc, #68]	; (82dc0 <XPROGTarget_EnableTargetPDI+0x7c>)
   82d7a:	4798      	blx	r3
	delay_us(10);
   82d7c:	2045      	movs	r0, #69	; 0x45
   82d7e:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   82d80:	9502      	str	r5, [sp, #8]
   82d82:	9504      	str	r5, [sp, #16]
   82d84:	9505      	str	r5, [sp, #20]
   82d86:	4b0f      	ldr	r3, [pc, #60]	; (82dc4 <XPROGTarget_EnableTargetPDI+0x80>)
   82d88:	9300      	str	r3, [sp, #0]
   82d8a:	23c0      	movs	r3, #192	; 0xc0
   82d8c:	9301      	str	r3, [sp, #4]
   82d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82d92:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   82d94:	4a0c      	ldr	r2, [pc, #48]	; (82dc8 <XPROGTarget_EnableTargetPDI+0x84>)
   82d96:	4669      	mov	r1, sp
   82d98:	480c      	ldr	r0, [pc, #48]	; (82dcc <XPROGTarget_EnableTargetPDI+0x88>)
   82d9a:	4b0d      	ldr	r3, [pc, #52]	; (82dd0 <XPROGTarget_EnableTargetPDI+0x8c>)
   82d9c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   82d9e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82da2:	2018      	movs	r0, #24
   82da4:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82da6:	4c0b      	ldr	r4, [pc, #44]	; (82dd4 <XPROGTarget_EnableTargetPDI+0x90>)
   82da8:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82daa:	47a0      	blx	r4
}
   82dac:	b006      	add	sp, #24
   82dae:	bd70      	pop	{r4, r5, r6, pc}
   82db0:	20002078 	.word	0x20002078
   82db4:	00084009 	.word	0x00084009
   82db8:	00083cc5 	.word	0x00083cc5
   82dbc:	20000089 	.word	0x20000089
   82dc0:	00083c8f 	.word	0x00083c8f
   82dc4:	0007a120 	.word	0x0007a120
   82dc8:	0b71b000 	.word	0x0b71b000
   82dcc:	40094000 	.word	0x40094000
   82dd0:	0008562d 	.word	0x0008562d
   82dd4:	00082ce9 	.word	0x00082ce9

00082dd8 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   82dd8:	4b01      	ldr	r3, [pc, #4]	; (82de0 <set_timeout+0x8>)
   82dda:	6018      	str	r0, [r3, #0]
   82ddc:	4770      	bx	lr
   82dde:	bf00      	nop
   82de0:	20000850 	.word	0x20000850

00082de4 <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   82de4:	b538      	push	{r3, r4, r5, lr}
   82de6:	2016      	movs	r0, #22
   82de8:	4b10      	ldr	r3, [pc, #64]	; (82e2c <setup_timeoutcnt+0x48>)
   82dea:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82dec:	4b10      	ldr	r3, [pc, #64]	; (82e30 <setup_timeoutcnt+0x4c>)
   82dee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   82df2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82df6:	2510      	movs	r5, #16
   82df8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82dfc:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   82dfe:	4c0d      	ldr	r4, [pc, #52]	; (82e34 <setup_timeoutcnt+0x50>)
   82e00:	f24c 0201 	movw	r2, #49153	; 0xc001
   82e04:	2100      	movs	r1, #0
   82e06:	4620      	mov	r0, r4
   82e08:	4b0b      	ldr	r3, [pc, #44]	; (82e38 <setup_timeoutcnt+0x54>)
   82e0a:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   82e0c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   82e10:	2100      	movs	r1, #0
   82e12:	4620      	mov	r0, r4
   82e14:	4b09      	ldr	r3, [pc, #36]	; (82e3c <setup_timeoutcnt+0x58>)
   82e16:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   82e18:	462a      	mov	r2, r5
   82e1a:	2100      	movs	r1, #0
   82e1c:	4620      	mov	r0, r4
   82e1e:	4b08      	ldr	r3, [pc, #32]	; (82e40 <setup_timeoutcnt+0x5c>)
   82e20:	4798      	blx	r3
	
	timerEnabled = true;
   82e22:	2201      	movs	r2, #1
   82e24:	4b07      	ldr	r3, [pc, #28]	; (82e44 <setup_timeoutcnt+0x60>)
   82e26:	701a      	strb	r2, [r3, #0]
   82e28:	bd38      	pop	{r3, r4, r5, pc}
   82e2a:	bf00      	nop
   82e2c:	00084009 	.word	0x00084009
   82e30:	e000e100 	.word	0xe000e100
   82e34:	40080000 	.word	0x40080000
   82e38:	00082f19 	.word	0x00082f19
   82e3c:	00082f41 	.word	0x00082f41
   82e40:	00082f49 	.word	0x00082f49
   82e44:	20002079 	.word	0x20002079

00082e48 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   82e48:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   82e4a:	4b0a      	ldr	r3, [pc, #40]	; (82e74 <start_timeoutcnt+0x2c>)
   82e4c:	781b      	ldrb	r3, [r3, #0]
   82e4e:	b16b      	cbz	r3, 82e6c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82e50:	4c09      	ldr	r4, [pc, #36]	; (82e78 <start_timeoutcnt+0x30>)
   82e52:	2100      	movs	r1, #0
   82e54:	4620      	mov	r0, r4
   82e56:	4b09      	ldr	r3, [pc, #36]	; (82e7c <start_timeoutcnt+0x34>)
   82e58:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   82e5a:	4b09      	ldr	r3, [pc, #36]	; (82e80 <start_timeoutcnt+0x38>)
   82e5c:	681a      	ldr	r2, [r3, #0]
   82e5e:	4b09      	ldr	r3, [pc, #36]	; (82e84 <start_timeoutcnt+0x3c>)
   82e60:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   82e62:	2100      	movs	r1, #0
   82e64:	4620      	mov	r0, r4
   82e66:	4b08      	ldr	r3, [pc, #32]	; (82e88 <start_timeoutcnt+0x40>)
   82e68:	4798      	blx	r3
   82e6a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   82e6c:	4b07      	ldr	r3, [pc, #28]	; (82e8c <start_timeoutcnt+0x44>)
   82e6e:	4798      	blx	r3
   82e70:	e7ee      	b.n	82e50 <start_timeoutcnt+0x8>
   82e72:	bf00      	nop
   82e74:	20002079 	.word	0x20002079
   82e78:	40080000 	.word	0x40080000
   82e7c:	00082f39 	.word	0x00082f39
   82e80:	20000850 	.word	0x20000850
   82e84:	2000268c 	.word	0x2000268c
   82e88:	00082f31 	.word	0x00082f31
   82e8c:	00082de5 	.word	0x00082de5

00082e90 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   82e90:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82e92:	2100      	movs	r1, #0
   82e94:	4801      	ldr	r0, [pc, #4]	; (82e9c <stop_timeoutcnt+0xc>)
   82e96:	4b02      	ldr	r3, [pc, #8]	; (82ea0 <stop_timeoutcnt+0x10>)
   82e98:	4798      	blx	r3
   82e9a:	bd08      	pop	{r3, pc}
   82e9c:	40080000 	.word	0x40080000
   82ea0:	00082f39 	.word	0x00082f39

00082ea4 <TC0_Handler>:
}

ISR(TC0_Handler)
{
   82ea4:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   82ea6:	4b05      	ldr	r3, [pc, #20]	; (82ebc <TC0_Handler+0x18>)
   82ea8:	681b      	ldr	r3, [r3, #0]
   82eaa:	b113      	cbz	r3, 82eb2 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   82eac:	3b01      	subs	r3, #1
   82eae:	4a03      	ldr	r2, [pc, #12]	; (82ebc <TC0_Handler+0x18>)
   82eb0:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   82eb2:	2100      	movs	r1, #0
   82eb4:	4802      	ldr	r0, [pc, #8]	; (82ec0 <TC0_Handler+0x1c>)
   82eb6:	4b03      	ldr	r3, [pc, #12]	; (82ec4 <TC0_Handler+0x20>)
   82eb8:	4798      	blx	r3
   82eba:	bd08      	pop	{r3, pc}
   82ebc:	2000268c 	.word	0x2000268c
   82ec0:	40080000 	.word	0x40080000
   82ec4:	00082f51 	.word	0x00082f51

00082ec8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82ec8:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82eca:	f1a1 030e 	sub.w	r3, r1, #14
   82ece:	2b01      	cmp	r3, #1
   82ed0:	d802      	bhi.n	82ed8 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   82ed2:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   82ed6:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ed8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82edc:	b672      	cpsid	i
   82ede:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82ee2:	2500      	movs	r5, #0
   82ee4:	4b0a      	ldr	r3, [pc, #40]	; (82f10 <efc_perform_command+0x48>)
   82ee6:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82ee8:	0212      	lsls	r2, r2, #8
   82eea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   82ef2:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   82ef6:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   82ef8:	4311      	orrs	r1, r2
   82efa:	4b06      	ldr	r3, [pc, #24]	; (82f14 <efc_perform_command+0x4c>)
   82efc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82efe:	2c00      	cmp	r4, #0
   82f00:	d1e9      	bne.n	82ed6 <efc_perform_command+0xe>
		cpu_irq_enable();
   82f02:	2201      	movs	r2, #1
   82f04:	4b02      	ldr	r3, [pc, #8]	; (82f10 <efc_perform_command+0x48>)
   82f06:	701a      	strb	r2, [r3, #0]
   82f08:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82f0c:	b662      	cpsie	i
   82f0e:	bd38      	pop	{r3, r4, r5, pc}
   82f10:	20000986 	.word	0x20000986
   82f14:	2000006d 	.word	0x2000006d

00082f18 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82f18:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82f1a:	0189      	lsls	r1, r1, #6
   82f1c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82f1e:	2402      	movs	r4, #2
   82f20:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82f22:	f04f 31ff 	mov.w	r1, #4294967295
   82f26:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82f28:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82f2a:	605a      	str	r2, [r3, #4]
}
   82f2c:	bc10      	pop	{r4}
   82f2e:	4770      	bx	lr

00082f30 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82f30:	0189      	lsls	r1, r1, #6
   82f32:	2305      	movs	r3, #5
   82f34:	5043      	str	r3, [r0, r1]
   82f36:	4770      	bx	lr

00082f38 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82f38:	0189      	lsls	r1, r1, #6
   82f3a:	2302      	movs	r3, #2
   82f3c:	5043      	str	r3, [r0, r1]
   82f3e:	4770      	bx	lr

00082f40 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82f40:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   82f44:	61ca      	str	r2, [r1, #28]
   82f46:	4770      	bx	lr

00082f48 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82f48:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82f4c:	624a      	str	r2, [r1, #36]	; 0x24
   82f4e:	4770      	bx	lr

00082f50 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82f50:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82f54:	6a08      	ldr	r0, [r1, #32]
}
   82f56:	4770      	bx	lr

00082f58 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82f58:	b570      	push	{r4, r5, r6, lr}
   82f5a:	b086      	sub	sp, #24
   82f5c:	4604      	mov	r4, r0
   82f5e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f60:	2304      	movs	r3, #4
   82f62:	9300      	str	r3, [sp, #0]
   82f64:	ab02      	add	r3, sp, #8
   82f66:	220f      	movs	r2, #15
   82f68:	210e      	movs	r1, #14
   82f6a:	480d      	ldr	r0, [pc, #52]	; (82fa0 <flash_read_unique_id+0x48>)
   82f6c:	4d0d      	ldr	r5, [pc, #52]	; (82fa4 <flash_read_unique_id+0x4c>)
   82f6e:	47a8      	blx	r5
   82f70:	b118      	cbz	r0, 82f7a <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   82f72:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   82f74:	4628      	mov	r0, r5
   82f76:	b006      	add	sp, #24
   82f78:	bd70      	pop	{r4, r5, r6, pc}
   82f7a:	4605      	mov	r5, r0
   82f7c:	2e04      	cmp	r6, #4
   82f7e:	bf28      	it	cs
   82f80:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f82:	b156      	cbz	r6, 82f9a <flash_read_unique_id+0x42>
   82f84:	aa02      	add	r2, sp, #8
   82f86:	4623      	mov	r3, r4
   82f88:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   82f8c:	f852 0b04 	ldr.w	r0, [r2], #4
   82f90:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f94:	428b      	cmp	r3, r1
   82f96:	d1f9      	bne.n	82f8c <flash_read_unique_id+0x34>
   82f98:	e7ec      	b.n	82f74 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   82f9a:	4635      	mov	r5, r6
   82f9c:	e7ea      	b.n	82f74 <flash_read_unique_id+0x1c>
   82f9e:	bf00      	nop
   82fa0:	400e0800 	.word	0x400e0800
   82fa4:	20000001 	.word	0x20000001

00082fa8 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   82fa8:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   82faa:	2006      	movs	r0, #6
   82fac:	4c02      	ldr	r4, [pc, #8]	; (82fb8 <ui_init+0x10>)
   82fae:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82fb0:	2007      	movs	r0, #7
   82fb2:	47a0      	blx	r4
   82fb4:	bd10      	pop	{r4, pc}
   82fb6:	bf00      	nop
   82fb8:	00083b51 	.word	0x00083b51

00082fbc <ui_powerdown>:
}

void ui_powerdown(void)
{
   82fbc:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   82fbe:	2006      	movs	r0, #6
   82fc0:	4c03      	ldr	r4, [pc, #12]	; (82fd0 <ui_powerdown+0x14>)
   82fc2:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82fc4:	2007      	movs	r0, #7
   82fc6:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   82fc8:	201d      	movs	r0, #29
   82fca:	4b02      	ldr	r3, [pc, #8]	; (82fd4 <ui_powerdown+0x18>)
   82fcc:	4798      	blx	r3
   82fce:	bd10      	pop	{r4, pc}
   82fd0:	00083b51 	.word	0x00083b51
   82fd4:	00083ca9 	.word	0x00083ca9

00082fd8 <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   82fd8:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   82fda:	2006      	movs	r0, #6
   82fdc:	4b02      	ldr	r3, [pc, #8]	; (82fe8 <ui_wakeup+0x10>)
   82fde:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   82fe0:	201d      	movs	r0, #29
   82fe2:	4b02      	ldr	r3, [pc, #8]	; (82fec <ui_wakeup+0x14>)
   82fe4:	4798      	blx	r3
   82fe6:	bd08      	pop	{r3, pc}
   82fe8:	00083b75 	.word	0x00083b75
   82fec:	00083c8f 	.word	0x00083c8f

00082ff0 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   82ff0:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   82ff2:	4b0b      	ldr	r3, [pc, #44]	; (83020 <ui_process+0x30>)
   82ff4:	fba3 2300 	umull	r2, r3, r3, r0
   82ff8:	099b      	lsrs	r3, r3, #6
   82ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82ffe:	fb02 0013 	mls	r0, r2, r3, r0
   83002:	b280      	uxth	r0, r0
   83004:	b118      	cbz	r0, 8300e <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   83006:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   8300a:	d004      	beq.n	83016 <ui_process+0x26>
   8300c:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   8300e:	2006      	movs	r0, #6
   83010:	4b04      	ldr	r3, [pc, #16]	; (83024 <ui_process+0x34>)
   83012:	4798      	blx	r3
   83014:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   83016:	2006      	movs	r0, #6
   83018:	4b03      	ldr	r3, [pc, #12]	; (83028 <ui_process+0x38>)
   8301a:	4798      	blx	r3
	}
}
   8301c:	e7f6      	b.n	8300c <ui_process+0x1c>
   8301e:	bf00      	nop
   83020:	10624dd3 	.word	0x10624dd3
   83024:	00083b75 	.word	0x00083b75
   83028:	00083b51 	.word	0x00083b51

0008302c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8302c:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8302e:	203e      	movs	r0, #62	; 0x3e
   83030:	4b07      	ldr	r3, [pc, #28]	; (83050 <sysclk_enable_usb+0x24>)
   83032:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   83034:	4c07      	ldr	r4, [pc, #28]	; (83054 <sysclk_enable_usb+0x28>)
   83036:	47a0      	blx	r4
   83038:	2800      	cmp	r0, #0
   8303a:	d0fc      	beq.n	83036 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8303c:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   83040:	4b05      	ldr	r3, [pc, #20]	; (83058 <sysclk_enable_usb+0x2c>)
   83042:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   83044:	4c05      	ldr	r4, [pc, #20]	; (8305c <sysclk_enable_usb+0x30>)
   83046:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83048:	2800      	cmp	r0, #0
   8304a:	d0fc      	beq.n	83046 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   8304c:	bd10      	pop	{r4, pc}
   8304e:	bf00      	nop
   83050:	00083f71 	.word	0x00083f71
   83054:	00083f99 	.word	0x00083f99
   83058:	400e0400 	.word	0x400e0400
   8305c:	00083ff9 	.word	0x00083ff9

00083060 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83060:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83062:	4812      	ldr	r0, [pc, #72]	; (830ac <sysclk_init+0x4c>)
   83064:	4b12      	ldr	r3, [pc, #72]	; (830b0 <sysclk_init+0x50>)
   83066:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83068:	203e      	movs	r0, #62	; 0x3e
   8306a:	4b12      	ldr	r3, [pc, #72]	; (830b4 <sysclk_init+0x54>)
   8306c:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8306e:	4c12      	ldr	r4, [pc, #72]	; (830b8 <sysclk_init+0x58>)
   83070:	47a0      	blx	r4
   83072:	2800      	cmp	r0, #0
   83074:	d0fc      	beq.n	83070 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83076:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8307a:	4b10      	ldr	r3, [pc, #64]	; (830bc <sysclk_init+0x5c>)
   8307c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8307e:	4c10      	ldr	r4, [pc, #64]	; (830c0 <sysclk_init+0x60>)
   83080:	47a0      	blx	r4
   83082:	2800      	cmp	r0, #0
   83084:	d0fc      	beq.n	83080 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   83086:	4b0f      	ldr	r3, [pc, #60]	; (830c4 <sysclk_init+0x64>)
   83088:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8308a:	4a0f      	ldr	r2, [pc, #60]	; (830c8 <sysclk_init+0x68>)
   8308c:	4b0f      	ldr	r3, [pc, #60]	; (830cc <sysclk_init+0x6c>)
   8308e:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   83090:	4c0f      	ldr	r4, [pc, #60]	; (830d0 <sysclk_init+0x70>)
   83092:	47a0      	blx	r4
   83094:	2800      	cmp	r0, #0
   83096:	d0fc      	beq.n	83092 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83098:	2010      	movs	r0, #16
   8309a:	4b0e      	ldr	r3, [pc, #56]	; (830d4 <sysclk_init+0x74>)
   8309c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8309e:	4b0e      	ldr	r3, [pc, #56]	; (830d8 <sysclk_init+0x78>)
   830a0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   830a2:	4802      	ldr	r0, [pc, #8]	; (830ac <sysclk_init+0x4c>)
   830a4:	4b02      	ldr	r3, [pc, #8]	; (830b0 <sysclk_init+0x50>)
   830a6:	4798      	blx	r3
   830a8:	bd10      	pop	{r4, pc}
   830aa:	bf00      	nop
   830ac:	05b8d800 	.word	0x05b8d800
   830b0:	2000013d 	.word	0x2000013d
   830b4:	00083f71 	.word	0x00083f71
   830b8:	00083f99 	.word	0x00083f99
   830bc:	00083fb9 	.word	0x00083fb9
   830c0:	00083fa9 	.word	0x00083fa9
   830c4:	00083fd9 	.word	0x00083fd9
   830c8:	200f3f01 	.word	0x200f3f01
   830cc:	400e0400 	.word	0x400e0400
   830d0:	00083fe9 	.word	0x00083fe9
   830d4:	00083f0d 	.word	0x00083f0d
   830d8:	000857f5 	.word	0x000857f5

000830dc <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   830dc:	4b01      	ldr	r3, [pc, #4]	; (830e4 <udi_vendor_getsetting+0x8>)
   830de:	7818      	ldrb	r0, [r3, #0]
   830e0:	4770      	bx	lr
   830e2:	bf00      	nop
   830e4:	2000207a 	.word	0x2000207a

000830e8 <udi_vendor_enable>:
{
   830e8:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   830ea:	4b05      	ldr	r3, [pc, #20]	; (83100 <udi_vendor_enable+0x18>)
   830ec:	4798      	blx	r3
   830ee:	78c3      	ldrb	r3, [r0, #3]
   830f0:	4a04      	ldr	r2, [pc, #16]	; (83104 <udi_vendor_enable+0x1c>)
   830f2:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   830f4:	b10b      	cbz	r3, 830fa <udi_vendor_enable+0x12>
	return true;
   830f6:	2001      	movs	r0, #1
}
   830f8:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   830fa:	4b03      	ldr	r3, [pc, #12]	; (83108 <udi_vendor_enable+0x20>)
   830fc:	4798      	blx	r3
   830fe:	bd08      	pop	{r3, pc}
   83100:	00083335 	.word	0x00083335
   83104:	2000207a 	.word	0x2000207a
   83108:	00081391 	.word	0x00081391

0008310c <udi_vendor_disable>:
{
   8310c:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   8310e:	4b03      	ldr	r3, [pc, #12]	; (8311c <udi_vendor_disable+0x10>)
   83110:	781b      	ldrb	r3, [r3, #0]
   83112:	b103      	cbz	r3, 83116 <udi_vendor_disable+0xa>
   83114:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   83116:	4b02      	ldr	r3, [pc, #8]	; (83120 <udi_vendor_disable+0x14>)
   83118:	4798      	blx	r3
}
   8311a:	e7fb      	b.n	83114 <udi_vendor_disable+0x8>
   8311c:	2000207a 	.word	0x2000207a
   83120:	000813b9 	.word	0x000813b9

00083124 <udi_vendor_setup>:
{
   83124:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   83126:	4b0b      	ldr	r3, [pc, #44]	; (83154 <udi_vendor_setup+0x30>)
   83128:	781b      	ldrb	r3, [r3, #0]
   8312a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8312e:	d105      	bne.n	8313c <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83130:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83134:	2b40      	cmp	r3, #64	; 0x40
   83136:	d00a      	beq.n	8314e <udi_vendor_setup+0x2a>
	return false; // Not supported request
   83138:	2000      	movs	r0, #0
}
   8313a:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8313c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83140:	2b40      	cmp	r3, #64	; 0x40
   83142:	d001      	beq.n	83148 <udi_vendor_setup+0x24>
	return false; // Not supported request
   83144:	2000      	movs	r0, #0
   83146:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83148:	4b03      	ldr	r3, [pc, #12]	; (83158 <udi_vendor_setup+0x34>)
   8314a:	4798      	blx	r3
   8314c:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8314e:	4b03      	ldr	r3, [pc, #12]	; (8315c <udi_vendor_setup+0x38>)
   83150:	4798      	blx	r3
   83152:	bd08      	pop	{r3, pc}
   83154:	200026a4 	.word	0x200026a4
   83158:	00081419 	.word	0x00081419
   8315c:	000813c5 	.word	0x000813c5

00083160 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83160:	b510      	push	{r4, lr}
   83162:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83164:	9200      	str	r2, [sp, #0]
   83166:	460b      	mov	r3, r1
   83168:	4602      	mov	r2, r0
   8316a:	2100      	movs	r1, #0
   8316c:	2081      	movs	r0, #129	; 0x81
   8316e:	4c02      	ldr	r4, [pc, #8]	; (83178 <udi_vendor_bulk_in_run+0x18>)
   83170:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   83172:	b002      	add	sp, #8
   83174:	bd10      	pop	{r4, pc}
   83176:	bf00      	nop
   83178:	00085085 	.word	0x00085085

0008317c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8317c:	b510      	push	{r4, lr}
   8317e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83180:	9200      	str	r2, [sp, #0]
   83182:	460b      	mov	r3, r1
   83184:	4602      	mov	r2, r0
   83186:	2100      	movs	r1, #0
   83188:	2002      	movs	r0, #2
   8318a:	4c02      	ldr	r4, [pc, #8]	; (83194 <udi_vendor_bulk_out_run+0x18>)
   8318c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8318e:	b002      	add	sp, #8
   83190:	bd10      	pop	{r4, pc}
   83192:	bf00      	nop
   83194:	00085085 	.word	0x00085085

00083198 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83198:	4b10      	ldr	r3, [pc, #64]	; (831dc <udc_next_desc_in_iface+0x44>)
   8319a:	681b      	ldr	r3, [r3, #0]
   8319c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8319e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   831a0:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   831a2:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   831a4:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   831a6:	4290      	cmp	r0, r2
   831a8:	d211      	bcs.n	831ce <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   831aa:	7843      	ldrb	r3, [r0, #1]
   831ac:	2b04      	cmp	r3, #4
   831ae:	d010      	beq.n	831d2 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   831b0:	428b      	cmp	r3, r1
   831b2:	d009      	beq.n	831c8 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   831b4:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   831b6:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   831b8:	4290      	cmp	r0, r2
   831ba:	d206      	bcs.n	831ca <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   831bc:	7843      	ldrb	r3, [r0, #1]
   831be:	2b04      	cmp	r3, #4
   831c0:	d009      	beq.n	831d6 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   831c2:	428b      	cmp	r3, r1
   831c4:	d1f6      	bne.n	831b4 <udc_next_desc_in_iface+0x1c>
   831c6:	e007      	b.n	831d8 <udc_next_desc_in_iface+0x40>
   831c8:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   831ca:	2000      	movs	r0, #0
   831cc:	4770      	bx	lr
   831ce:	2000      	movs	r0, #0
   831d0:	4770      	bx	lr
   831d2:	2000      	movs	r0, #0
   831d4:	4770      	bx	lr
   831d6:	2000      	movs	r0, #0
}
   831d8:	4770      	bx	lr
   831da:	bf00      	nop
   831dc:	20002084 	.word	0x20002084

000831e0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   831e0:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   831e2:	4b03      	ldr	r3, [pc, #12]	; (831f0 <udc_valid_address+0x10>)
   831e4:	7898      	ldrb	r0, [r3, #2]
   831e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   831ea:	4b02      	ldr	r3, [pc, #8]	; (831f4 <udc_valid_address+0x14>)
   831ec:	4798      	blx	r3
   831ee:	bd08      	pop	{r3, pc}
   831f0:	200026a4 	.word	0x200026a4
   831f4:	00084dd9 	.word	0x00084dd9

000831f8 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   831f8:	4b19      	ldr	r3, [pc, #100]	; (83260 <udc_update_iface_desc+0x68>)
   831fa:	781b      	ldrb	r3, [r3, #0]
   831fc:	b34b      	cbz	r3, 83252 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   831fe:	4b19      	ldr	r3, [pc, #100]	; (83264 <udc_update_iface_desc+0x6c>)
   83200:	681b      	ldr	r3, [r3, #0]
   83202:	681b      	ldr	r3, [r3, #0]
   83204:	791a      	ldrb	r2, [r3, #4]
   83206:	4282      	cmp	r2, r0
   83208:	d925      	bls.n	83256 <udc_update_iface_desc+0x5e>
{
   8320a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   8320c:	4a16      	ldr	r2, [pc, #88]	; (83268 <udc_update_iface_desc+0x70>)
   8320e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   83210:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   83212:	441c      	add	r4, r3
	while (ptr_end_desc >
   83214:	42a3      	cmp	r3, r4
   83216:	d220      	bcs.n	8325a <udc_update_iface_desc+0x62>
   83218:	2500      	movs	r5, #0
   8321a:	2601      	movs	r6, #1
   8321c:	e007      	b.n	8322e <udc_update_iface_desc+0x36>
   8321e:	4a12      	ldr	r2, [pc, #72]	; (83268 <udc_update_iface_desc+0x70>)
   83220:	6013      	str	r3, [r2, #0]
   83222:	e00f      	b.n	83244 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   83224:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83226:	4413      	add	r3, r2
   83228:	4635      	mov	r5, r6
	while (ptr_end_desc >
   8322a:	42a3      	cmp	r3, r4
   8322c:	d20c      	bcs.n	83248 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8322e:	785a      	ldrb	r2, [r3, #1]
   83230:	2a04      	cmp	r2, #4
   83232:	d1f7      	bne.n	83224 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83234:	789a      	ldrb	r2, [r3, #2]
   83236:	4282      	cmp	r2, r0
   83238:	d1f4      	bne.n	83224 <udc_update_iface_desc+0x2c>
   8323a:	78da      	ldrb	r2, [r3, #3]
   8323c:	428a      	cmp	r2, r1
   8323e:	d1f1      	bne.n	83224 <udc_update_iface_desc+0x2c>
   83240:	2d00      	cmp	r5, #0
   83242:	d1ec      	bne.n	8321e <udc_update_iface_desc+0x26>
				return true; // Interface found
   83244:	2001      	movs	r0, #1
   83246:	e002      	b.n	8324e <udc_update_iface_desc+0x56>
   83248:	4a07      	ldr	r2, [pc, #28]	; (83268 <udc_update_iface_desc+0x70>)
   8324a:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   8324c:	2000      	movs	r0, #0
}
   8324e:	bc70      	pop	{r4, r5, r6}
   83250:	4770      	bx	lr
		return false;
   83252:	2000      	movs	r0, #0
   83254:	4770      	bx	lr
		return false;
   83256:	2000      	movs	r0, #0
   83258:	4770      	bx	lr
	return false; // Interface not found
   8325a:	2000      	movs	r0, #0
   8325c:	e7f7      	b.n	8324e <udc_update_iface_desc+0x56>
   8325e:	bf00      	nop
   83260:	20002081 	.word	0x20002081
   83264:	20002084 	.word	0x20002084
   83268:	20002088 	.word	0x20002088

0008326c <udc_iface_disable>:
{
   8326c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83270:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   83272:	2100      	movs	r1, #0
   83274:	4b13      	ldr	r3, [pc, #76]	; (832c4 <udc_iface_disable+0x58>)
   83276:	4798      	blx	r3
   83278:	4680      	mov	r8, r0
   8327a:	b910      	cbnz	r0, 83282 <udc_iface_disable+0x16>
}
   8327c:	4640      	mov	r0, r8
   8327e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83282:	4b11      	ldr	r3, [pc, #68]	; (832c8 <udc_iface_disable+0x5c>)
   83284:	681b      	ldr	r3, [r3, #0]
   83286:	685b      	ldr	r3, [r3, #4]
   83288:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8328c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   83290:	4798      	blx	r3
   83292:	4601      	mov	r1, r0
   83294:	4620      	mov	r0, r4
   83296:	4b0b      	ldr	r3, [pc, #44]	; (832c4 <udc_iface_disable+0x58>)
   83298:	4798      	blx	r3
   8329a:	4680      	mov	r8, r0
   8329c:	2800      	cmp	r0, #0
   8329e:	d0ed      	beq.n	8327c <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   832a0:	4b0a      	ldr	r3, [pc, #40]	; (832cc <udc_iface_disable+0x60>)
   832a2:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   832a4:	2605      	movs	r6, #5
   832a6:	4d0a      	ldr	r5, [pc, #40]	; (832d0 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   832a8:	4f0a      	ldr	r7, [pc, #40]	; (832d4 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   832aa:	4631      	mov	r1, r6
   832ac:	4620      	mov	r0, r4
   832ae:	47a8      	blx	r5
			if (NULL == ep_desc) {
   832b0:	4604      	mov	r4, r0
   832b2:	b110      	cbz	r0, 832ba <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   832b4:	7880      	ldrb	r0, [r0, #2]
   832b6:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   832b8:	e7f7      	b.n	832aa <udc_iface_disable+0x3e>
	udi_api->disable();
   832ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
   832be:	4798      	blx	r3
	return true;
   832c0:	e7dc      	b.n	8327c <udc_iface_disable+0x10>
   832c2:	bf00      	nop
   832c4:	000831f9 	.word	0x000831f9
   832c8:	20002084 	.word	0x20002084
   832cc:	20002088 	.word	0x20002088
   832d0:	00083199 	.word	0x00083199
   832d4:	00084e3d 	.word	0x00084e3d

000832d8 <udc_iface_enable>:
{
   832d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   832dc:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   832de:	4b10      	ldr	r3, [pc, #64]	; (83320 <udc_iface_enable+0x48>)
   832e0:	4798      	blx	r3
   832e2:	4603      	mov	r3, r0
   832e4:	b1c8      	cbz	r0, 8331a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   832e6:	4b0f      	ldr	r3, [pc, #60]	; (83324 <udc_iface_enable+0x4c>)
   832e8:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   832ea:	2605      	movs	r6, #5
   832ec:	4d0e      	ldr	r5, [pc, #56]	; (83328 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   832ee:	4f0f      	ldr	r7, [pc, #60]	; (8332c <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   832f0:	4631      	mov	r1, r6
   832f2:	4620      	mov	r0, r4
   832f4:	47a8      	blx	r5
		if (NULL == ep_desc)
   832f6:	4604      	mov	r4, r0
   832f8:	b138      	cbz	r0, 8330a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   832fa:	8882      	ldrh	r2, [r0, #4]
   832fc:	78c1      	ldrb	r1, [r0, #3]
   832fe:	7880      	ldrb	r0, [r0, #2]
   83300:	47b8      	blx	r7
   83302:	4603      	mov	r3, r0
   83304:	2800      	cmp	r0, #0
   83306:	d1f3      	bne.n	832f0 <udc_iface_enable+0x18>
   83308:	e007      	b.n	8331a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8330a:	4b09      	ldr	r3, [pc, #36]	; (83330 <udc_iface_enable+0x58>)
   8330c:	681b      	ldr	r3, [r3, #0]
   8330e:	685b      	ldr	r3, [r3, #4]
   83310:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   83314:	681b      	ldr	r3, [r3, #0]
   83316:	4798      	blx	r3
   83318:	4603      	mov	r3, r0
}
   8331a:	4618      	mov	r0, r3
   8331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83320:	000831f9 	.word	0x000831f9
   83324:	20002088 	.word	0x20002088
   83328:	00083199 	.word	0x00083199
   8332c:	00085171 	.word	0x00085171
   83330:	20002084 	.word	0x20002084

00083334 <udc_get_interface_desc>:
}
   83334:	4b01      	ldr	r3, [pc, #4]	; (8333c <udc_get_interface_desc+0x8>)
   83336:	6818      	ldr	r0, [r3, #0]
   83338:	4770      	bx	lr
   8333a:	bf00      	nop
   8333c:	20002088 	.word	0x20002088

00083340 <udc_start>:
{
   83340:	b508      	push	{r3, lr}
	udd_enable();
   83342:	4b01      	ldr	r3, [pc, #4]	; (83348 <udc_start+0x8>)
   83344:	4798      	blx	r3
   83346:	bd08      	pop	{r3, pc}
   83348:	00084cbd 	.word	0x00084cbd

0008334c <udc_reset>:
{
   8334c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8334e:	4b0d      	ldr	r3, [pc, #52]	; (83384 <udc_reset+0x38>)
   83350:	781b      	ldrb	r3, [r3, #0]
   83352:	b183      	cbz	r3, 83376 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83354:	4b0c      	ldr	r3, [pc, #48]	; (83388 <udc_reset+0x3c>)
   83356:	681b      	ldr	r3, [r3, #0]
   83358:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8335a:	791b      	ldrb	r3, [r3, #4]
   8335c:	b15b      	cbz	r3, 83376 <udc_reset+0x2a>
   8335e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   83360:	4e0a      	ldr	r6, [pc, #40]	; (8338c <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83362:	4d09      	ldr	r5, [pc, #36]	; (83388 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   83364:	4620      	mov	r0, r4
   83366:	47b0      	blx	r6
				iface_num++) {
   83368:	3401      	adds	r4, #1
   8336a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8336c:	682b      	ldr	r3, [r5, #0]
   8336e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   83370:	791b      	ldrb	r3, [r3, #4]
   83372:	42a3      	cmp	r3, r4
   83374:	d8f6      	bhi.n	83364 <udc_reset+0x18>
	udc_num_configuration = 0;
   83376:	2300      	movs	r3, #0
   83378:	4a02      	ldr	r2, [pc, #8]	; (83384 <udc_reset+0x38>)
   8337a:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   8337c:	4a04      	ldr	r2, [pc, #16]	; (83390 <udc_reset+0x44>)
   8337e:	8013      	strh	r3, [r2, #0]
   83380:	bd70      	pop	{r4, r5, r6, pc}
   83382:	bf00      	nop
   83384:	20002081 	.word	0x20002081
   83388:	20002084 	.word	0x20002084
   8338c:	0008326d 	.word	0x0008326d
   83390:	2000207c 	.word	0x2000207c

00083394 <udc_sof_notify>:
{
   83394:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   83396:	4b0d      	ldr	r3, [pc, #52]	; (833cc <udc_sof_notify+0x38>)
   83398:	781b      	ldrb	r3, [r3, #0]
   8339a:	b1b3      	cbz	r3, 833ca <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8339c:	4b0c      	ldr	r3, [pc, #48]	; (833d0 <udc_sof_notify+0x3c>)
   8339e:	681b      	ldr	r3, [r3, #0]
   833a0:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   833a2:	7912      	ldrb	r2, [r2, #4]
   833a4:	b18a      	cbz	r2, 833ca <udc_sof_notify+0x36>
   833a6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   833a8:	4d09      	ldr	r5, [pc, #36]	; (833d0 <udc_sof_notify+0x3c>)
   833aa:	e006      	b.n	833ba <udc_sof_notify+0x26>
				iface_num++) {
   833ac:	3401      	adds	r4, #1
   833ae:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   833b0:	682b      	ldr	r3, [r5, #0]
   833b2:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   833b4:	7912      	ldrb	r2, [r2, #4]
   833b6:	42a2      	cmp	r2, r4
   833b8:	d907      	bls.n	833ca <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   833ba:	685b      	ldr	r3, [r3, #4]
   833bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   833c0:	691b      	ldr	r3, [r3, #16]
   833c2:	2b00      	cmp	r3, #0
   833c4:	d0f2      	beq.n	833ac <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   833c6:	4798      	blx	r3
   833c8:	e7f0      	b.n	833ac <udc_sof_notify+0x18>
   833ca:	bd38      	pop	{r3, r4, r5, pc}
   833cc:	20002081 	.word	0x20002081
   833d0:	20002084 	.word	0x20002084

000833d4 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   833d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   833d6:	4b95      	ldr	r3, [pc, #596]	; (8362c <udc_process_setup+0x258>)
   833d8:	2200      	movs	r2, #0
   833da:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   833dc:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   833de:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   833e0:	881b      	ldrh	r3, [r3, #0]
   833e2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   833e6:	d019      	beq.n	8341c <udc_process_setup+0x48>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   833e8:	4b90      	ldr	r3, [pc, #576]	; (8362c <udc_process_setup+0x258>)
   833ea:	781b      	ldrb	r3, [r3, #0]
   833ec:	f013 0f80 	tst.w	r3, #128	; 0x80
   833f0:	d11a      	bne.n	83428 <udc_process_setup+0x54>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   833f2:	f013 0f60 	tst.w	r3, #96	; 0x60
   833f6:	f000 8145 	beq.w	83684 <udc_process_setup+0x2b0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   833fa:	4b8c      	ldr	r3, [pc, #560]	; (8362c <udc_process_setup+0x258>)
   833fc:	781b      	ldrb	r3, [r3, #0]
   833fe:	f003 031f 	and.w	r3, r3, #31
   83402:	2b01      	cmp	r3, #1
   83404:	f000 8211 	beq.w	8382a <udc_process_setup+0x456>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83408:	4b88      	ldr	r3, [pc, #544]	; (8362c <udc_process_setup+0x258>)
   8340a:	781b      	ldrb	r3, [r3, #0]
   8340c:	f003 031f 	and.w	r3, r3, #31
   83410:	2b02      	cmp	r3, #2
   83412:	f000 8295 	beq.w	83940 <udc_process_setup+0x56c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83416:	2300      	movs	r3, #0
#endif
}
   83418:	4618      	mov	r0, r3
   8341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8341c:	21ae      	movs	r1, #174	; 0xae
   8341e:	4884      	ldr	r0, [pc, #528]	; (83630 <udc_process_setup+0x25c>)
   83420:	4b84      	ldr	r3, [pc, #528]	; (83634 <udc_process_setup+0x260>)
   83422:	4798      	blx	r3
		return true;
   83424:	2301      	movs	r3, #1
   83426:	e7f7      	b.n	83418 <udc_process_setup+0x44>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83428:	4a80      	ldr	r2, [pc, #512]	; (8362c <udc_process_setup+0x258>)
   8342a:	88d2      	ldrh	r2, [r2, #6]
   8342c:	2a00      	cmp	r2, #0
   8342e:	f000 82b0 	beq.w	83992 <udc_process_setup+0x5be>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   83432:	f013 0f60 	tst.w	r3, #96	; 0x60
   83436:	d1e0      	bne.n	833fa <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83438:	f013 031f 	ands.w	r3, r3, #31
   8343c:	d107      	bne.n	8344e <udc_process_setup+0x7a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8343e:	497b      	ldr	r1, [pc, #492]	; (8362c <udc_process_setup+0x258>)
   83440:	7849      	ldrb	r1, [r1, #1]
   83442:	2906      	cmp	r1, #6
   83444:	d016      	beq.n	83474 <udc_process_setup+0xa0>
   83446:	2908      	cmp	r1, #8
   83448:	f000 80bf 	beq.w	835ca <udc_process_setup+0x1f6>
   8344c:	b159      	cbz	r1, 83466 <udc_process_setup+0x92>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8344e:	2b01      	cmp	r3, #1
   83450:	f000 80c3 	beq.w	835da <udc_process_setup+0x206>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83454:	2b02      	cmp	r3, #2
   83456:	d1d0      	bne.n	833fa <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   83458:	4b74      	ldr	r3, [pc, #464]	; (8362c <udc_process_setup+0x258>)
   8345a:	785b      	ldrb	r3, [r3, #1]
   8345c:	2b00      	cmp	r3, #0
   8345e:	f000 8103 	beq.w	83668 <udc_process_setup+0x294>
	return false;
   83462:	2300      	movs	r3, #0
   83464:	e1d3      	b.n	8380e <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83466:	2a02      	cmp	r2, #2
   83468:	d1ce      	bne.n	83408 <udc_process_setup+0x34>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8346a:	2102      	movs	r1, #2
   8346c:	4872      	ldr	r0, [pc, #456]	; (83638 <udc_process_setup+0x264>)
   8346e:	4b71      	ldr	r3, [pc, #452]	; (83634 <udc_process_setup+0x260>)
   83470:	4798      	blx	r3
   83472:	e124      	b.n	836be <udc_process_setup+0x2ea>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83474:	4b6d      	ldr	r3, [pc, #436]	; (8362c <udc_process_setup+0x258>)
   83476:	885a      	ldrh	r2, [r3, #2]
   83478:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8347a:	0a13      	lsrs	r3, r2, #8
   8347c:	3b01      	subs	r3, #1
   8347e:	2b0e      	cmp	r3, #14
   83480:	f200 8214 	bhi.w	838ac <udc_process_setup+0x4d8>
   83484:	e8df f013 	tbh	[pc, r3, lsl #1]
   83488:	0023000f 	.word	0x0023000f
   8348c:	0212007b 	.word	0x0212007b
   83490:	00450212 	.word	0x00450212
   83494:	02120053 	.word	0x02120053
   83498:	02120212 	.word	0x02120212
   8349c:	02120212 	.word	0x02120212
   834a0:	02120212 	.word	0x02120212
   834a4:	0076      	.short	0x0076
		if (!udd_is_high_speed()) {
   834a6:	4b65      	ldr	r3, [pc, #404]	; (8363c <udc_process_setup+0x268>)
   834a8:	4798      	blx	r3
   834aa:	b928      	cbnz	r0, 834b8 <udc_process_setup+0xe4>
				(uint8_t *) udc_config.confdev_hs,
   834ac:	4b64      	ldr	r3, [pc, #400]	; (83640 <udc_process_setup+0x26c>)
   834ae:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   834b0:	7801      	ldrb	r1, [r0, #0]
   834b2:	4b60      	ldr	r3, [pc, #384]	; (83634 <udc_process_setup+0x260>)
   834b4:	4798      	blx	r3
   834b6:	e031      	b.n	8351c <udc_process_setup+0x148>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   834b8:	4b61      	ldr	r3, [pc, #388]	; (83640 <udc_process_setup+0x26c>)
   834ba:	681a      	ldr	r2, [r3, #0]
   834bc:	2110      	movs	r1, #16
   834be:	7091      	strb	r1, [r2, #2]
   834c0:	2102      	movs	r1, #2
   834c2:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   834c4:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   834c6:	7801      	ldrb	r1, [r0, #0]
   834c8:	4b5a      	ldr	r3, [pc, #360]	; (83634 <udc_process_setup+0x260>)
   834ca:	4798      	blx	r3
   834cc:	e026      	b.n	8351c <udc_process_setup+0x148>
		if (udd_is_high_speed()) {
   834ce:	4b5b      	ldr	r3, [pc, #364]	; (8363c <udc_process_setup+0x268>)
   834d0:	4798      	blx	r3
   834d2:	b180      	cbz	r0, 834f6 <udc_process_setup+0x122>
			if (conf_num >= udc_config.confdev_hs->
   834d4:	4b5a      	ldr	r3, [pc, #360]	; (83640 <udc_process_setup+0x26c>)
   834d6:	689b      	ldr	r3, [r3, #8]
   834d8:	7c5b      	ldrb	r3, [r3, #17]
   834da:	42a3      	cmp	r3, r4
   834dc:	d98d      	bls.n	833fa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   834de:	4b58      	ldr	r3, [pc, #352]	; (83640 <udc_process_setup+0x26c>)
   834e0:	691b      	ldr	r3, [r3, #16]
   834e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   834e6:	8841      	ldrh	r1, [r0, #2]
   834e8:	4b52      	ldr	r3, [pc, #328]	; (83634 <udc_process_setup+0x260>)
   834ea:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   834ec:	4b4f      	ldr	r3, [pc, #316]	; (8362c <udc_process_setup+0x258>)
   834ee:	689b      	ldr	r3, [r3, #8]
   834f0:	2202      	movs	r2, #2
   834f2:	705a      	strb	r2, [r3, #1]
   834f4:	e012      	b.n	8351c <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   834f6:	4b52      	ldr	r3, [pc, #328]	; (83640 <udc_process_setup+0x26c>)
   834f8:	681b      	ldr	r3, [r3, #0]
   834fa:	7c5b      	ldrb	r3, [r3, #17]
   834fc:	42a3      	cmp	r3, r4
   834fe:	f67f af7c 	bls.w	833fa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83502:	4b4f      	ldr	r3, [pc, #316]	; (83640 <udc_process_setup+0x26c>)
   83504:	685b      	ldr	r3, [r3, #4]
   83506:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8350a:	8841      	ldrh	r1, [r0, #2]
   8350c:	4b49      	ldr	r3, [pc, #292]	; (83634 <udc_process_setup+0x260>)
   8350e:	4798      	blx	r3
   83510:	e7ec      	b.n	834ec <udc_process_setup+0x118>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83512:	4b4b      	ldr	r3, [pc, #300]	; (83640 <udc_process_setup+0x26c>)
   83514:	68d8      	ldr	r0, [r3, #12]
   83516:	7801      	ldrb	r1, [r0, #0]
   83518:	4b46      	ldr	r3, [pc, #280]	; (83634 <udc_process_setup+0x260>)
   8351a:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8351c:	4b43      	ldr	r3, [pc, #268]	; (8362c <udc_process_setup+0x258>)
   8351e:	88da      	ldrh	r2, [r3, #6]
   83520:	899b      	ldrh	r3, [r3, #12]
   83522:	4293      	cmp	r3, r2
   83524:	f240 80cb 	bls.w	836be <udc_process_setup+0x2ea>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83528:	4b40      	ldr	r3, [pc, #256]	; (8362c <udc_process_setup+0x258>)
   8352a:	819a      	strh	r2, [r3, #12]
   8352c:	e0c7      	b.n	836be <udc_process_setup+0x2ea>
		if (!udd_is_high_speed()) {
   8352e:	4b43      	ldr	r3, [pc, #268]	; (8363c <udc_process_setup+0x268>)
   83530:	4798      	blx	r3
   83532:	b988      	cbnz	r0, 83558 <udc_process_setup+0x184>
			if (conf_num >= udc_config.confdev_hs->
   83534:	4b42      	ldr	r3, [pc, #264]	; (83640 <udc_process_setup+0x26c>)
   83536:	689b      	ldr	r3, [r3, #8]
   83538:	7c5b      	ldrb	r3, [r3, #17]
   8353a:	42a3      	cmp	r3, r4
   8353c:	f67f af5d 	bls.w	833fa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83540:	4b3f      	ldr	r3, [pc, #252]	; (83640 <udc_process_setup+0x26c>)
   83542:	691b      	ldr	r3, [r3, #16]
   83544:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83548:	8841      	ldrh	r1, [r0, #2]
   8354a:	4b3a      	ldr	r3, [pc, #232]	; (83634 <udc_process_setup+0x260>)
   8354c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8354e:	4b37      	ldr	r3, [pc, #220]	; (8362c <udc_process_setup+0x258>)
   83550:	689b      	ldr	r3, [r3, #8]
   83552:	2207      	movs	r2, #7
   83554:	705a      	strb	r2, [r3, #1]
   83556:	e7e1      	b.n	8351c <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   83558:	4b39      	ldr	r3, [pc, #228]	; (83640 <udc_process_setup+0x26c>)
   8355a:	681b      	ldr	r3, [r3, #0]
   8355c:	7c5b      	ldrb	r3, [r3, #17]
   8355e:	42a3      	cmp	r3, r4
   83560:	f67f af4b 	bls.w	833fa <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83564:	4b36      	ldr	r3, [pc, #216]	; (83640 <udc_process_setup+0x26c>)
   83566:	685b      	ldr	r3, [r3, #4]
   83568:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8356c:	8841      	ldrh	r1, [r0, #2]
   8356e:	4b31      	ldr	r3, [pc, #196]	; (83634 <udc_process_setup+0x260>)
   83570:	4798      	blx	r3
   83572:	e7ec      	b.n	8354e <udc_process_setup+0x17a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83574:	2121      	movs	r1, #33	; 0x21
   83576:	4833      	ldr	r0, [pc, #204]	; (83644 <udc_process_setup+0x270>)
   83578:	4b2e      	ldr	r3, [pc, #184]	; (83634 <udc_process_setup+0x260>)
   8357a:	4798      	blx	r3
   8357c:	e7ce      	b.n	8351c <udc_process_setup+0x148>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8357e:	b2d2      	uxtb	r2, r2
   83580:	2a03      	cmp	r2, #3
   83582:	f63f af3a 	bhi.w	833fa <udc_process_setup+0x26>
   83586:	e8df f012 	tbh	[pc, r2, lsl #1]
   8358a:	0007      	.short	0x0007
   8358c:	0208000c 	.word	0x0208000c
   83590:	0004      	.short	0x0004
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83592:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   83594:	4a2c      	ldr	r2, [pc, #176]	; (83648 <udc_process_setup+0x274>)
   83596:	e006      	b.n	835a6 <udc_process_setup+0x1d2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83598:	2104      	movs	r1, #4
   8359a:	482c      	ldr	r0, [pc, #176]	; (8364c <udc_process_setup+0x278>)
   8359c:	4b25      	ldr	r3, [pc, #148]	; (83634 <udc_process_setup+0x260>)
   8359e:	4798      	blx	r3
   835a0:	e7bc      	b.n	8351c <udc_process_setup+0x148>
		str = udc_string_manufacturer_name;
   835a2:	4a2b      	ldr	r2, [pc, #172]	; (83650 <udc_process_setup+0x27c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   835a4:	2415      	movs	r4, #21
   835a6:	3a01      	subs	r2, #1
   835a8:	492a      	ldr	r1, [pc, #168]	; (83654 <udc_process_setup+0x280>)
   835aa:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   835ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   835b0:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   835b4:	3301      	adds	r3, #1
   835b6:	b2db      	uxtb	r3, r3
   835b8:	429c      	cmp	r4, r3
   835ba:	d8f7      	bhi.n	835ac <udc_process_setup+0x1d8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   835bc:	0061      	lsls	r1, r4, #1
   835be:	3102      	adds	r1, #2
   835c0:	4824      	ldr	r0, [pc, #144]	; (83654 <udc_process_setup+0x280>)
   835c2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   835c4:	4b1b      	ldr	r3, [pc, #108]	; (83634 <udc_process_setup+0x260>)
   835c6:	4798      	blx	r3
   835c8:	e7a8      	b.n	8351c <udc_process_setup+0x148>
	if (udd_g_ctrlreq.req.wLength != 1) {
   835ca:	2a01      	cmp	r2, #1
   835cc:	f47f af1c 	bne.w	83408 <udc_process_setup+0x34>
	udd_set_setup_payload(&udc_num_configuration,1);
   835d0:	2101      	movs	r1, #1
   835d2:	4821      	ldr	r0, [pc, #132]	; (83658 <udc_process_setup+0x284>)
   835d4:	4b17      	ldr	r3, [pc, #92]	; (83634 <udc_process_setup+0x260>)
   835d6:	4798      	blx	r3
   835d8:	e071      	b.n	836be <udc_process_setup+0x2ea>
			switch (udd_g_ctrlreq.req.bRequest) {
   835da:	4914      	ldr	r1, [pc, #80]	; (8362c <udc_process_setup+0x258>)
   835dc:	7849      	ldrb	r1, [r1, #1]
   835de:	290a      	cmp	r1, #10
   835e0:	f47f af38 	bne.w	83454 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wLength != 1) {
   835e4:	2a01      	cmp	r2, #1
   835e6:	f040 8120 	bne.w	8382a <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   835ea:	4b1b      	ldr	r3, [pc, #108]	; (83658 <udc_process_setup+0x284>)
   835ec:	781b      	ldrb	r3, [r3, #0]
   835ee:	2b00      	cmp	r3, #0
   835f0:	f000 811b 	beq.w	8382a <udc_process_setup+0x456>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   835f4:	4b0d      	ldr	r3, [pc, #52]	; (8362c <udc_process_setup+0x258>)
   835f6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   835f8:	4b18      	ldr	r3, [pc, #96]	; (8365c <udc_process_setup+0x288>)
   835fa:	681d      	ldr	r5, [r3, #0]
   835fc:	682b      	ldr	r3, [r5, #0]
   835fe:	791b      	ldrb	r3, [r3, #4]
   83600:	42a3      	cmp	r3, r4
   83602:	f240 8112 	bls.w	8382a <udc_process_setup+0x456>
	if (!udc_update_iface_desc(iface_num, 0)) {
   83606:	2100      	movs	r1, #0
   83608:	4620      	mov	r0, r4
   8360a:	4b15      	ldr	r3, [pc, #84]	; (83660 <udc_process_setup+0x28c>)
   8360c:	4798      	blx	r3
   8360e:	2800      	cmp	r0, #0
   83610:	f43f aef3 	beq.w	833fa <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83614:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   83616:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   8361a:	68db      	ldr	r3, [r3, #12]
   8361c:	4798      	blx	r3
   8361e:	4b11      	ldr	r3, [pc, #68]	; (83664 <udc_process_setup+0x290>)
   83620:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   83622:	2101      	movs	r1, #1
   83624:	4618      	mov	r0, r3
   83626:	4b03      	ldr	r3, [pc, #12]	; (83634 <udc_process_setup+0x260>)
   83628:	4798      	blx	r3
   8362a:	e048      	b.n	836be <udc_process_setup+0x2ea>
   8362c:	200026a4 	.word	0x200026a4
   83630:	200008dc 	.word	0x200008dc
   83634:	00084e31 	.word	0x00084e31
   83638:	2000207c 	.word	0x2000207c
   8363c:	00084dc9 	.word	0x00084dc9
   83640:	200001d4 	.word	0x200001d4
   83644:	0008c0c8 	.word	0x0008c0c8
   83648:	2000098c 	.word	0x2000098c
   8364c:	200008ac 	.word	0x200008ac
   83650:	200008b0 	.word	0x200008b0
   83654:	20000868 	.word	0x20000868
   83658:	20002081 	.word	0x20002081
   8365c:	20002084 	.word	0x20002084
   83660:	000831f9 	.word	0x000831f9
   83664:	20002080 	.word	0x20002080
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83668:	2a02      	cmp	r2, #2
   8366a:	f47f aecd 	bne.w	83408 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8366e:	4b92      	ldr	r3, [pc, #584]	; (838b8 <udc_process_setup+0x4e4>)
   83670:	7918      	ldrb	r0, [r3, #4]
   83672:	4b92      	ldr	r3, [pc, #584]	; (838bc <udc_process_setup+0x4e8>)
   83674:	4798      	blx	r3
   83676:	4b92      	ldr	r3, [pc, #584]	; (838c0 <udc_process_setup+0x4ec>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83678:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8367a:	2102      	movs	r1, #2
   8367c:	4618      	mov	r0, r3
   8367e:	4b91      	ldr	r3, [pc, #580]	; (838c4 <udc_process_setup+0x4f0>)
   83680:	4798      	blx	r3
   83682:	e01c      	b.n	836be <udc_process_setup+0x2ea>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83684:	f013 031f 	ands.w	r3, r3, #31
   83688:	f040 80b5 	bne.w	837f6 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   8368c:	4a8a      	ldr	r2, [pc, #552]	; (838b8 <udc_process_setup+0x4e4>)
   8368e:	7852      	ldrb	r2, [r2, #1]
   83690:	3a01      	subs	r2, #1
   83692:	2a08      	cmp	r2, #8
   83694:	f200 80af 	bhi.w	837f6 <udc_process_setup+0x422>
   83698:	e8df f012 	tbh	[pc, r2, lsl #1]
   8369c:	00ad0013 	.word	0x00ad0013
   836a0:	00ad0023 	.word	0x00ad0023
   836a4:	00ad0009 	.word	0x00ad0009
   836a8:	00ad00ad 	.word	0x00ad00ad
   836ac:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   836ae:	4b82      	ldr	r3, [pc, #520]	; (838b8 <udc_process_setup+0x4e4>)
   836b0:	88db      	ldrh	r3, [r3, #6]
   836b2:	2b00      	cmp	r3, #0
   836b4:	f47f aea8 	bne.w	83408 <udc_process_setup+0x34>
	udd_g_ctrlreq.callback = udc_valid_address;
   836b8:	4a83      	ldr	r2, [pc, #524]	; (838c8 <udc_process_setup+0x4f4>)
   836ba:	4b7f      	ldr	r3, [pc, #508]	; (838b8 <udc_process_setup+0x4e4>)
   836bc:	611a      	str	r2, [r3, #16]
			return true;
   836be:	2301      	movs	r3, #1
   836c0:	e6aa      	b.n	83418 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   836c2:	4b7d      	ldr	r3, [pc, #500]	; (838b8 <udc_process_setup+0x4e4>)
   836c4:	88db      	ldrh	r3, [r3, #6]
   836c6:	2b00      	cmp	r3, #0
   836c8:	f47f ae9e 	bne.w	83408 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   836cc:	4b7a      	ldr	r3, [pc, #488]	; (838b8 <udc_process_setup+0x4e4>)
   836ce:	885b      	ldrh	r3, [r3, #2]
   836d0:	2b01      	cmp	r3, #1
   836d2:	f47f ae99 	bne.w	83408 <udc_process_setup+0x34>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   836d6:	4a7d      	ldr	r2, [pc, #500]	; (838cc <udc_process_setup+0x4f8>)
   836d8:	8813      	ldrh	r3, [r2, #0]
   836da:	f023 0302 	bic.w	r3, r3, #2
   836de:	8013      	strh	r3, [r2, #0]
   836e0:	e7ed      	b.n	836be <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   836e2:	4b75      	ldr	r3, [pc, #468]	; (838b8 <udc_process_setup+0x4e4>)
   836e4:	88db      	ldrh	r3, [r3, #6]
   836e6:	2b00      	cmp	r3, #0
   836e8:	f47f ae8e 	bne.w	83408 <udc_process_setup+0x34>
	switch (udd_g_ctrlreq.req.wValue) {
   836ec:	4b72      	ldr	r3, [pc, #456]	; (838b8 <udc_process_setup+0x4e4>)
   836ee:	885b      	ldrh	r3, [r3, #2]
   836f0:	2b02      	cmp	r3, #2
   836f2:	f040 80dd 	bne.w	838b0 <udc_process_setup+0x4dc>
		if (!udd_is_high_speed()) {
   836f6:	4b76      	ldr	r3, [pc, #472]	; (838d0 <udc_process_setup+0x4fc>)
   836f8:	4798      	blx	r3
   836fa:	2800      	cmp	r0, #0
   836fc:	f43f ae7d 	beq.w	833fa <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83700:	4b6d      	ldr	r3, [pc, #436]	; (838b8 <udc_process_setup+0x4e4>)
   83702:	791b      	ldrb	r3, [r3, #4]
   83704:	2b00      	cmp	r3, #0
   83706:	f47f ae78 	bne.w	833fa <udc_process_setup+0x26>
		udc_reset();
   8370a:	4b72      	ldr	r3, [pc, #456]	; (838d4 <udc_process_setup+0x500>)
   8370c:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8370e:	4b6a      	ldr	r3, [pc, #424]	; (838b8 <udc_process_setup+0x4e4>)
   83710:	889b      	ldrh	r3, [r3, #4]
   83712:	0a1b      	lsrs	r3, r3, #8
   83714:	3b01      	subs	r3, #1
   83716:	2b03      	cmp	r3, #3
   83718:	f200 80cc 	bhi.w	838b4 <udc_process_setup+0x4e0>
   8371c:	e8df f003 	tbb	[pc, r3]
   83720:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83724:	4a6c      	ldr	r2, [pc, #432]	; (838d8 <udc_process_setup+0x504>)
   83726:	4b64      	ldr	r3, [pc, #400]	; (838b8 <udc_process_setup+0x4e4>)
   83728:	611a      	str	r2, [r3, #16]
   8372a:	e7c8      	b.n	836be <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8372c:	4a6b      	ldr	r2, [pc, #428]	; (838dc <udc_process_setup+0x508>)
   8372e:	4b62      	ldr	r3, [pc, #392]	; (838b8 <udc_process_setup+0x4e4>)
   83730:	611a      	str	r2, [r3, #16]
   83732:	e7c4      	b.n	836be <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83734:	4a6a      	ldr	r2, [pc, #424]	; (838e0 <udc_process_setup+0x50c>)
   83736:	4b60      	ldr	r3, [pc, #384]	; (838b8 <udc_process_setup+0x4e4>)
   83738:	611a      	str	r2, [r3, #16]
   8373a:	e7c0      	b.n	836be <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8373c:	4a69      	ldr	r2, [pc, #420]	; (838e4 <udc_process_setup+0x510>)
   8373e:	4b5e      	ldr	r3, [pc, #376]	; (838b8 <udc_process_setup+0x4e4>)
   83740:	611a      	str	r2, [r3, #16]
   83742:	e7bc      	b.n	836be <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   83744:	4b5c      	ldr	r3, [pc, #368]	; (838b8 <udc_process_setup+0x4e4>)
   83746:	88db      	ldrh	r3, [r3, #6]
   83748:	2b00      	cmp	r3, #0
   8374a:	f47f ae5d 	bne.w	83408 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   8374e:	4b66      	ldr	r3, [pc, #408]	; (838e8 <udc_process_setup+0x514>)
   83750:	4798      	blx	r3
   83752:	2800      	cmp	r0, #0
   83754:	f43f ae51 	beq.w	833fa <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   83758:	4b5d      	ldr	r3, [pc, #372]	; (838d0 <udc_process_setup+0x4fc>)
   8375a:	4798      	blx	r3
   8375c:	2800      	cmp	r0, #0
   8375e:	d036      	beq.n	837ce <udc_process_setup+0x3fa>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83760:	4b55      	ldr	r3, [pc, #340]	; (838b8 <udc_process_setup+0x4e4>)
   83762:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   83764:	4b61      	ldr	r3, [pc, #388]	; (838ec <udc_process_setup+0x518>)
   83766:	689b      	ldr	r3, [r3, #8]
   83768:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8376a:	429a      	cmp	r2, r3
   8376c:	f73f ae45 	bgt.w	833fa <udc_process_setup+0x26>
	udc_reset();
   83770:	4b58      	ldr	r3, [pc, #352]	; (838d4 <udc_process_setup+0x500>)
   83772:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83774:	4b50      	ldr	r3, [pc, #320]	; (838b8 <udc_process_setup+0x4e4>)
   83776:	789b      	ldrb	r3, [r3, #2]
   83778:	4a5d      	ldr	r2, [pc, #372]	; (838f0 <udc_process_setup+0x51c>)
   8377a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   8377c:	2b00      	cmp	r3, #0
   8377e:	d09e      	beq.n	836be <udc_process_setup+0x2ea>
	if (udd_is_high_speed()) {
   83780:	4b53      	ldr	r3, [pc, #332]	; (838d0 <udc_process_setup+0x4fc>)
   83782:	4798      	blx	r3
   83784:	2800      	cmp	r0, #0
   83786:	d02a      	beq.n	837de <udc_process_setup+0x40a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83788:	4b59      	ldr	r3, [pc, #356]	; (838f0 <udc_process_setup+0x51c>)
   8378a:	781b      	ldrb	r3, [r3, #0]
   8378c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83790:	3b01      	subs	r3, #1
   83792:	4a56      	ldr	r2, [pc, #344]	; (838ec <udc_process_setup+0x518>)
   83794:	6912      	ldr	r2, [r2, #16]
   83796:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   8379a:	4a56      	ldr	r2, [pc, #344]	; (838f4 <udc_process_setup+0x520>)
   8379c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8379e:	4b55      	ldr	r3, [pc, #340]	; (838f4 <udc_process_setup+0x520>)
   837a0:	681b      	ldr	r3, [r3, #0]
   837a2:	681b      	ldr	r3, [r3, #0]
   837a4:	791b      	ldrb	r3, [r3, #4]
   837a6:	2b00      	cmp	r3, #0
   837a8:	d089      	beq.n	836be <udc_process_setup+0x2ea>
   837aa:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   837ac:	4627      	mov	r7, r4
   837ae:	4e52      	ldr	r6, [pc, #328]	; (838f8 <udc_process_setup+0x524>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   837b0:	4d50      	ldr	r5, [pc, #320]	; (838f4 <udc_process_setup+0x520>)
		if (!udc_iface_enable(iface_num, 0)) {
   837b2:	4639      	mov	r1, r7
   837b4:	4620      	mov	r0, r4
   837b6:	47b0      	blx	r6
   837b8:	2800      	cmp	r0, #0
   837ba:	f43f ae1e 	beq.w	833fa <udc_process_setup+0x26>
			iface_num++) {
   837be:	3401      	adds	r4, #1
   837c0:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   837c2:	682b      	ldr	r3, [r5, #0]
   837c4:	681b      	ldr	r3, [r3, #0]
   837c6:	791b      	ldrb	r3, [r3, #4]
   837c8:	42a3      	cmp	r3, r4
   837ca:	d8f2      	bhi.n	837b2 <udc_process_setup+0x3de>
   837cc:	e777      	b.n	836be <udc_process_setup+0x2ea>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   837ce:	4b3a      	ldr	r3, [pc, #232]	; (838b8 <udc_process_setup+0x4e4>)
   837d0:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   837d2:	4b46      	ldr	r3, [pc, #280]	; (838ec <udc_process_setup+0x518>)
   837d4:	681b      	ldr	r3, [r3, #0]
   837d6:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   837d8:	429a      	cmp	r2, r3
   837da:	ddc9      	ble.n	83770 <udc_process_setup+0x39c>
   837dc:	e60d      	b.n	833fa <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   837de:	4b44      	ldr	r3, [pc, #272]	; (838f0 <udc_process_setup+0x51c>)
   837e0:	781b      	ldrb	r3, [r3, #0]
   837e2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   837e6:	3b01      	subs	r3, #1
   837e8:	4a40      	ldr	r2, [pc, #256]	; (838ec <udc_process_setup+0x518>)
   837ea:	6852      	ldr	r2, [r2, #4]
   837ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   837f0:	4a40      	ldr	r2, [pc, #256]	; (838f4 <udc_process_setup+0x520>)
   837f2:	6013      	str	r3, [r2, #0]
   837f4:	e7d3      	b.n	8379e <udc_process_setup+0x3ca>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   837f6:	2b01      	cmp	r3, #1
   837f8:	d00d      	beq.n	83816 <udc_process_setup+0x442>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   837fa:	2b02      	cmp	r3, #2
   837fc:	f47f adfd 	bne.w	833fa <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   83800:	4b2d      	ldr	r3, [pc, #180]	; (838b8 <udc_process_setup+0x4e4>)
   83802:	785b      	ldrb	r3, [r3, #1]
   83804:	2b01      	cmp	r3, #1
   83806:	d02e      	beq.n	83866 <udc_process_setup+0x492>
   83808:	2b03      	cmp	r3, #3
   8380a:	d03c      	beq.n	83886 <udc_process_setup+0x4b2>
	return false;
   8380c:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   8380e:	2b00      	cmp	r3, #0
   83810:	f47f ae02 	bne.w	83418 <udc_process_setup+0x44>
   83814:	e5f1      	b.n	833fa <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   83816:	4a28      	ldr	r2, [pc, #160]	; (838b8 <udc_process_setup+0x4e4>)
   83818:	7852      	ldrb	r2, [r2, #1]
   8381a:	2a0b      	cmp	r2, #11
   8381c:	d1ed      	bne.n	837fa <udc_process_setup+0x426>
	if (udd_g_ctrlreq.req.wLength) {
   8381e:	4b26      	ldr	r3, [pc, #152]	; (838b8 <udc_process_setup+0x4e4>)
   83820:	88db      	ldrh	r3, [r3, #6]
   83822:	b913      	cbnz	r3, 8382a <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   83824:	4b32      	ldr	r3, [pc, #200]	; (838f0 <udc_process_setup+0x51c>)
   83826:	781b      	ldrb	r3, [r3, #0]
   83828:	b973      	cbnz	r3, 83848 <udc_process_setup+0x474>
	if (0 == udc_num_configuration) {
   8382a:	4b31      	ldr	r3, [pc, #196]	; (838f0 <udc_process_setup+0x51c>)
   8382c:	781b      	ldrb	r3, [r3, #0]
   8382e:	2b00      	cmp	r3, #0
   83830:	f000 80b1 	beq.w	83996 <udc_process_setup+0x5c2>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83834:	4b20      	ldr	r3, [pc, #128]	; (838b8 <udc_process_setup+0x4e4>)
   83836:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83838:	4b2e      	ldr	r3, [pc, #184]	; (838f4 <udc_process_setup+0x520>)
   8383a:	681d      	ldr	r5, [r3, #0]
   8383c:	682b      	ldr	r3, [r5, #0]
   8383e:	791b      	ldrb	r3, [r3, #4]
   83840:	42a3      	cmp	r3, r4
   83842:	d863      	bhi.n	8390c <udc_process_setup+0x538>
	return false;
   83844:	2300      	movs	r3, #0
   83846:	e5e7      	b.n	83418 <udc_process_setup+0x44>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83848:	4b1b      	ldr	r3, [pc, #108]	; (838b8 <udc_process_setup+0x4e4>)
   8384a:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8384c:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   8384e:	4620      	mov	r0, r4
   83850:	4b2a      	ldr	r3, [pc, #168]	; (838fc <udc_process_setup+0x528>)
   83852:	4798      	blx	r3
   83854:	2800      	cmp	r0, #0
   83856:	f43f add0 	beq.w	833fa <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   8385a:	b2e9      	uxtb	r1, r5
   8385c:	4620      	mov	r0, r4
   8385e:	4b26      	ldr	r3, [pc, #152]	; (838f8 <udc_process_setup+0x524>)
   83860:	4798      	blx	r3
   83862:	4603      	mov	r3, r0
   83864:	e7d3      	b.n	8380e <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   83866:	4b14      	ldr	r3, [pc, #80]	; (838b8 <udc_process_setup+0x4e4>)
   83868:	88db      	ldrh	r3, [r3, #6]
   8386a:	2b00      	cmp	r3, #0
   8386c:	f47f adcc 	bne.w	83408 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83870:	4b11      	ldr	r3, [pc, #68]	; (838b8 <udc_process_setup+0x4e4>)
   83872:	885b      	ldrh	r3, [r3, #2]
   83874:	2b00      	cmp	r3, #0
   83876:	f47f adc7 	bne.w	83408 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8387a:	4b0f      	ldr	r3, [pc, #60]	; (838b8 <udc_process_setup+0x4e4>)
   8387c:	7918      	ldrb	r0, [r3, #4]
   8387e:	4b20      	ldr	r3, [pc, #128]	; (83900 <udc_process_setup+0x52c>)
   83880:	4798      	blx	r3
   83882:	4603      	mov	r3, r0
   83884:	e7c3      	b.n	8380e <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   83886:	4b0c      	ldr	r3, [pc, #48]	; (838b8 <udc_process_setup+0x4e4>)
   83888:	88db      	ldrh	r3, [r3, #6]
   8388a:	2b00      	cmp	r3, #0
   8388c:	f47f adbc 	bne.w	83408 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83890:	4b09      	ldr	r3, [pc, #36]	; (838b8 <udc_process_setup+0x4e4>)
   83892:	885b      	ldrh	r3, [r3, #2]
   83894:	2b00      	cmp	r3, #0
   83896:	f47f adb7 	bne.w	83408 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8389a:	4c07      	ldr	r4, [pc, #28]	; (838b8 <udc_process_setup+0x4e4>)
   8389c:	7920      	ldrb	r0, [r4, #4]
   8389e:	4b19      	ldr	r3, [pc, #100]	; (83904 <udc_process_setup+0x530>)
   838a0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   838a2:	7920      	ldrb	r0, [r4, #4]
   838a4:	4b18      	ldr	r3, [pc, #96]	; (83908 <udc_process_setup+0x534>)
   838a6:	4798      	blx	r3
   838a8:	4603      	mov	r3, r0
   838aa:	e7b0      	b.n	8380e <udc_process_setup+0x43a>
		return false;
   838ac:	2300      	movs	r3, #0
   838ae:	e7ae      	b.n	8380e <udc_process_setup+0x43a>
		return false;
   838b0:	2300      	movs	r3, #0
   838b2:	e7ac      	b.n	8380e <udc_process_setup+0x43a>
	return false;
   838b4:	2300      	movs	r3, #0
   838b6:	e7aa      	b.n	8380e <udc_process_setup+0x43a>
   838b8:	200026a4 	.word	0x200026a4
   838bc:	00084e91 	.word	0x00084e91
   838c0:	2000207e 	.word	0x2000207e
   838c4:	00084e31 	.word	0x00084e31
   838c8:	000831e1 	.word	0x000831e1
   838cc:	2000207c 	.word	0x2000207c
   838d0:	00084dc9 	.word	0x00084dc9
   838d4:	0008334d 	.word	0x0008334d
   838d8:	0008545d 	.word	0x0008545d
   838dc:	00085481 	.word	0x00085481
   838e0:	000854a5 	.word	0x000854a5
   838e4:	000854bd 	.word	0x000854bd
   838e8:	00084e01 	.word	0x00084e01
   838ec:	200001d4 	.word	0x200001d4
   838f0:	20002081 	.word	0x20002081
   838f4:	20002084 	.word	0x20002084
   838f8:	000832d9 	.word	0x000832d9
   838fc:	0008326d 	.word	0x0008326d
   83900:	00084f8d 	.word	0x00084f8d
   83904:	000853f9 	.word	0x000853f9
   83908:	00084ec5 	.word	0x00084ec5
	if (!udc_update_iface_desc(iface_num, 0)) {
   8390c:	2100      	movs	r1, #0
   8390e:	4620      	mov	r0, r4
   83910:	4b23      	ldr	r3, [pc, #140]	; (839a0 <udc_process_setup+0x5cc>)
   83912:	4798      	blx	r3
   83914:	2800      	cmp	r0, #0
   83916:	f43f ad77 	beq.w	83408 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8391a:	686b      	ldr	r3, [r5, #4]
   8391c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83920:	68eb      	ldr	r3, [r5, #12]
   83922:	4798      	blx	r3
   83924:	4601      	mov	r1, r0
   83926:	4620      	mov	r0, r4
   83928:	4b1d      	ldr	r3, [pc, #116]	; (839a0 <udc_process_setup+0x5cc>)
   8392a:	4798      	blx	r3
   8392c:	2800      	cmp	r0, #0
   8392e:	f43f ad6b 	beq.w	83408 <udc_process_setup+0x34>
	return udi_api->setup();
   83932:	68ab      	ldr	r3, [r5, #8]
   83934:	4798      	blx	r3
		if (udc_req_iface()) {
   83936:	4603      	mov	r3, r0
   83938:	2800      	cmp	r0, #0
   8393a:	f47f ad6d 	bne.w	83418 <udc_process_setup+0x44>
   8393e:	e563      	b.n	83408 <udc_process_setup+0x34>
	if (0 == udc_num_configuration) {
   83940:	4b18      	ldr	r3, [pc, #96]	; (839a4 <udc_process_setup+0x5d0>)
   83942:	781b      	ldrb	r3, [r3, #0]
   83944:	b30b      	cbz	r3, 8398a <udc_process_setup+0x5b6>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83946:	4b18      	ldr	r3, [pc, #96]	; (839a8 <udc_process_setup+0x5d4>)
   83948:	681a      	ldr	r2, [r3, #0]
   8394a:	6813      	ldr	r3, [r2, #0]
   8394c:	791b      	ldrb	r3, [r3, #4]
   8394e:	b1f3      	cbz	r3, 8398e <udc_process_setup+0x5ba>
   83950:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83952:	4e13      	ldr	r6, [pc, #76]	; (839a0 <udc_process_setup+0x5cc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83954:	4f14      	ldr	r7, [pc, #80]	; (839a8 <udc_process_setup+0x5d4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83956:	6853      	ldr	r3, [r2, #4]
   83958:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8395c:	68eb      	ldr	r3, [r5, #12]
   8395e:	4798      	blx	r3
   83960:	4601      	mov	r1, r0
   83962:	4620      	mov	r0, r4
   83964:	47b0      	blx	r6
   83966:	4603      	mov	r3, r0
   83968:	2800      	cmp	r0, #0
   8396a:	f43f ad55 	beq.w	83418 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   8396e:	68ab      	ldr	r3, [r5, #8]
   83970:	4798      	blx	r3
   83972:	4603      	mov	r3, r0
   83974:	2800      	cmp	r0, #0
   83976:	f47f ad4f 	bne.w	83418 <udc_process_setup+0x44>
			iface_num++) {
   8397a:	3401      	adds	r4, #1
   8397c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8397e:	683a      	ldr	r2, [r7, #0]
   83980:	6811      	ldr	r1, [r2, #0]
   83982:	7909      	ldrb	r1, [r1, #4]
   83984:	42a1      	cmp	r1, r4
   83986:	d8e6      	bhi.n	83956 <udc_process_setup+0x582>
   83988:	e546      	b.n	83418 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   8398a:	2300      	movs	r3, #0
   8398c:	e544      	b.n	83418 <udc_process_setup+0x44>
	return false;
   8398e:	2300      	movs	r3, #0
   83990:	e542      	b.n	83418 <udc_process_setup+0x44>
			return false; // Error from USB host
   83992:	2300      	movs	r3, #0
   83994:	e540      	b.n	83418 <udc_process_setup+0x44>
	return false;
   83996:	2300      	movs	r3, #0
   83998:	e53e      	b.n	83418 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8399a:	2412      	movs	r4, #18
		str = udc_string_product_name;
   8399c:	4a03      	ldr	r2, [pc, #12]	; (839ac <udc_process_setup+0x5d8>)
   8399e:	e602      	b.n	835a6 <udc_process_setup+0x1d2>
   839a0:	000831f9 	.word	0x000831f9
   839a4:	20002081 	.word	0x20002081
   839a8:	20002084 	.word	0x20002084
   839ac:	200008c8 	.word	0x200008c8

000839b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   839b0:	4b0b      	ldr	r3, [pc, #44]	; (839e0 <cpu_irq_enter_critical+0x30>)
   839b2:	681b      	ldr	r3, [r3, #0]
   839b4:	b92b      	cbnz	r3, 839c2 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   839b6:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   839ba:	b13b      	cbz	r3, 839cc <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   839bc:	2200      	movs	r2, #0
   839be:	4b09      	ldr	r3, [pc, #36]	; (839e4 <cpu_irq_enter_critical+0x34>)
   839c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   839c2:	4a07      	ldr	r2, [pc, #28]	; (839e0 <cpu_irq_enter_critical+0x30>)
   839c4:	6813      	ldr	r3, [r2, #0]
   839c6:	3301      	adds	r3, #1
   839c8:	6013      	str	r3, [r2, #0]
   839ca:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   839cc:	b672      	cpsid	i
   839ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   839d2:	2200      	movs	r2, #0
   839d4:	4b04      	ldr	r3, [pc, #16]	; (839e8 <cpu_irq_enter_critical+0x38>)
   839d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   839d8:	2201      	movs	r2, #1
   839da:	4b02      	ldr	r3, [pc, #8]	; (839e4 <cpu_irq_enter_critical+0x34>)
   839dc:	701a      	strb	r2, [r3, #0]
   839de:	e7f0      	b.n	839c2 <cpu_irq_enter_critical+0x12>
   839e0:	2000208c 	.word	0x2000208c
   839e4:	20002090 	.word	0x20002090
   839e8:	20000986 	.word	0x20000986

000839ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   839ec:	4b07      	ldr	r3, [pc, #28]	; (83a0c <cpu_irq_leave_critical+0x20>)
   839ee:	681a      	ldr	r2, [r3, #0]
   839f0:	3a01      	subs	r2, #1
   839f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   839f4:	681b      	ldr	r3, [r3, #0]
   839f6:	b943      	cbnz	r3, 83a0a <cpu_irq_leave_critical+0x1e>
   839f8:	4b05      	ldr	r3, [pc, #20]	; (83a10 <cpu_irq_leave_critical+0x24>)
   839fa:	781b      	ldrb	r3, [r3, #0]
   839fc:	b12b      	cbz	r3, 83a0a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   839fe:	2201      	movs	r2, #1
   83a00:	4b04      	ldr	r3, [pc, #16]	; (83a14 <cpu_irq_leave_critical+0x28>)
   83a02:	701a      	strb	r2, [r3, #0]
   83a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a08:	b662      	cpsie	i
   83a0a:	4770      	bx	lr
   83a0c:	2000208c 	.word	0x2000208c
   83a10:	20002090 	.word	0x20002090
   83a14:	20000986 	.word	0x20000986

00083a18 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   83a1c:	b980      	cbnz	r0, 83a40 <_read+0x28>
   83a1e:	460c      	mov	r4, r1
   83a20:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   83a22:	2a00      	cmp	r2, #0
   83a24:	dd0f      	ble.n	83a46 <_read+0x2e>
   83a26:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83a28:	4e08      	ldr	r6, [pc, #32]	; (83a4c <_read+0x34>)
   83a2a:	4d09      	ldr	r5, [pc, #36]	; (83a50 <_read+0x38>)
   83a2c:	6830      	ldr	r0, [r6, #0]
   83a2e:	4621      	mov	r1, r4
   83a30:	682b      	ldr	r3, [r5, #0]
   83a32:	4798      	blx	r3
		ptr++;
   83a34:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83a36:	42bc      	cmp	r4, r7
   83a38:	d1f8      	bne.n	83a2c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83a3a:	4640      	mov	r0, r8
   83a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83a40:	f04f 38ff 	mov.w	r8, #4294967295
   83a44:	e7f9      	b.n	83a3a <_read+0x22>
	for (; len > 0; --len) {
   83a46:	4680      	mov	r8, r0
   83a48:	e7f7      	b.n	83a3a <_read+0x22>
   83a4a:	bf00      	nop
   83a4c:	200026a0 	.word	0x200026a0
   83a50:	20002698 	.word	0x20002698

00083a54 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83a54:	3801      	subs	r0, #1
   83a56:	2802      	cmp	r0, #2
   83a58:	d815      	bhi.n	83a86 <_write+0x32>
{
   83a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a5e:	460e      	mov	r6, r1
   83a60:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   83a62:	b19a      	cbz	r2, 83a8c <_write+0x38>
   83a64:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83a66:	f8df 8038 	ldr.w	r8, [pc, #56]	; 83aa0 <_write+0x4c>
   83a6a:	4f0c      	ldr	r7, [pc, #48]	; (83a9c <_write+0x48>)
   83a6c:	f8d8 0000 	ldr.w	r0, [r8]
   83a70:	f815 1b01 	ldrb.w	r1, [r5], #1
   83a74:	683b      	ldr	r3, [r7, #0]
   83a76:	4798      	blx	r3
   83a78:	2800      	cmp	r0, #0
   83a7a:	db0a      	blt.n	83a92 <_write+0x3e>
   83a7c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   83a7e:	3c01      	subs	r4, #1
   83a80:	d1f4      	bne.n	83a6c <_write+0x18>
   83a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83a86:	f04f 30ff 	mov.w	r0, #4294967295
   83a8a:	4770      	bx	lr
	for (; len != 0; --len) {
   83a8c:	4610      	mov	r0, r2
   83a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   83a92:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   83a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a9a:	bf00      	nop
   83a9c:	2000269c 	.word	0x2000269c
   83aa0:	200026a0 	.word	0x200026a0

00083aa4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   83aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83aa6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83aaa:	2006      	movs	r0, #6
   83aac:	4c17      	ldr	r4, [pc, #92]	; (83b0c <iopins_normal+0x68>)
   83aae:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83ab0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83ab4:	2007      	movs	r0, #7
   83ab6:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   83ab8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83abc:	201d      	movs	r0, #29
   83abe:	47a0      	blx	r4
	board_power(0);
   83ac0:	201d      	movs	r0, #29
   83ac2:	4b13      	ldr	r3, [pc, #76]	; (83b10 <iopins_normal+0x6c>)
   83ac4:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   83ac6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83aca:	2008      	movs	r0, #8
   83acc:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   83ace:	2008      	movs	r0, #8
   83ad0:	4e10      	ldr	r6, [pc, #64]	; (83b14 <iopins_normal+0x70>)
   83ad2:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   83ad4:	4f10      	ldr	r7, [pc, #64]	; (83b18 <iopins_normal+0x74>)
   83ad6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   83ada:	21ff      	movs	r1, #255	; 0xff
   83adc:	4638      	mov	r0, r7
   83ade:	4d0f      	ldr	r5, [pc, #60]	; (83b1c <iopins_normal+0x78>)
   83ae0:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   83ae2:	21ff      	movs	r1, #255	; 0xff
   83ae4:	4638      	mov	r0, r7
   83ae6:	4b0e      	ldr	r3, [pc, #56]	; (83b20 <iopins_normal+0x7c>)
   83ae8:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   83aea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83aee:	2035      	movs	r0, #53	; 0x35
   83af0:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   83af2:	2035      	movs	r0, #53	; 0x35
   83af4:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83afa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   83afe:	4809      	ldr	r0, [pc, #36]	; (83b24 <iopins_normal+0x80>)
   83b00:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   83b02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83b06:	201b      	movs	r0, #27
   83b08:	47a0      	blx	r4
   83b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b0c:	00083cc5 	.word	0x00083cc5
   83b10:	00083ca9 	.word	0x00083ca9
   83b14:	00083c8f 	.word	0x00083c8f
   83b18:	400e0e00 	.word	0x400e0e00
   83b1c:	00083d95 	.word	0x00083d95
   83b20:	00083c61 	.word	0x00083c61
   83b24:	400e0c00 	.word	0x400e0c00

00083b28 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   83b28:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83b2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83b2e:	4b05      	ldr	r3, [pc, #20]	; (83b44 <board_init+0x1c>)
   83b30:	605a      	str	r2, [r3, #4]
   83b32:	200a      	movs	r0, #10
   83b34:	4c04      	ldr	r4, [pc, #16]	; (83b48 <board_init+0x20>)
   83b36:	47a0      	blx	r4
   83b38:	200b      	movs	r0, #11
   83b3a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83b3c:	4b03      	ldr	r3, [pc, #12]	; (83b4c <board_init+0x24>)
   83b3e:	4798      	blx	r3
   83b40:	bd10      	pop	{r4, pc}
   83b42:	bf00      	nop
   83b44:	400e1250 	.word	0x400e1250
   83b48:	00084009 	.word	0x00084009
   83b4c:	00083aa5 	.word	0x00083aa5

00083b50 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83b50:	b510      	push	{r4, lr}
   83b52:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83b54:	2806      	cmp	r0, #6
   83b56:	d002      	beq.n	83b5e <LED_Off+0xe>
   83b58:	2c07      	cmp	r4, #7
   83b5a:	d004      	beq.n	83b66 <LED_Off+0x16>
   83b5c:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   83b5e:	2006      	movs	r0, #6
   83b60:	4b03      	ldr	r3, [pc, #12]	; (83b70 <LED_Off+0x20>)
   83b62:	4798      	blx	r3
   83b64:	e7f8      	b.n	83b58 <LED_Off+0x8>
   83b66:	2007      	movs	r0, #7
   83b68:	4b01      	ldr	r3, [pc, #4]	; (83b70 <LED_Off+0x20>)
   83b6a:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   83b6c:	e7f6      	b.n	83b5c <LED_Off+0xc>
   83b6e:	bf00      	nop
   83b70:	00083ca9 	.word	0x00083ca9

00083b74 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   83b74:	b510      	push	{r4, lr}
   83b76:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83b78:	2806      	cmp	r0, #6
   83b7a:	d002      	beq.n	83b82 <LED_On+0xe>
   83b7c:	2c07      	cmp	r4, #7
   83b7e:	d004      	beq.n	83b8a <LED_On+0x16>
   83b80:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   83b82:	2006      	movs	r0, #6
   83b84:	4b03      	ldr	r3, [pc, #12]	; (83b94 <LED_On+0x20>)
   83b86:	4798      	blx	r3
   83b88:	e7f8      	b.n	83b7c <LED_On+0x8>
   83b8a:	2007      	movs	r0, #7
   83b8c:	4b01      	ldr	r3, [pc, #4]	; (83b94 <LED_On+0x20>)
   83b8e:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   83b90:	e7f6      	b.n	83b80 <LED_On+0xc>
   83b92:	bf00      	nop
   83b94:	00083c8f 	.word	0x00083c8f

00083b98 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83b98:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83b9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83ba0:	670a      	str	r2, [r1, #112]	; 0x70
   83ba2:	4770      	bx	lr

00083ba4 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83ba4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83ba8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83bac:	674a      	str	r2, [r1, #116]	; 0x74
   83bae:	4770      	bx	lr

00083bb0 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83bb0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83bb8:	678a      	str	r2, [r1, #120]	; 0x78
   83bba:	4770      	bx	lr

00083bbc <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83bbc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83bc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83bc4:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   83bc8:	4770      	bx	lr

00083bca <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83bca:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83bcc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83bd0:	d016      	beq.n	83c00 <pio_set_peripheral+0x36>
   83bd2:	d80b      	bhi.n	83bec <pio_set_peripheral+0x22>
   83bd4:	b149      	cbz	r1, 83bea <pio_set_peripheral+0x20>
   83bd6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83bda:	d105      	bne.n	83be8 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83bdc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83bde:	6f01      	ldr	r1, [r0, #112]	; 0x70
   83be0:	400b      	ands	r3, r1
   83be2:	ea23 0302 	bic.w	r3, r3, r2
   83be6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83be8:	6042      	str	r2, [r0, #4]
   83bea:	4770      	bx	lr
	switch (ul_type) {
   83bec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83bf0:	d0fb      	beq.n	83bea <pio_set_peripheral+0x20>
   83bf2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   83bf6:	d0f8      	beq.n	83bea <pio_set_peripheral+0x20>
   83bf8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83bfc:	d1f4      	bne.n	83be8 <pio_set_peripheral+0x1e>
   83bfe:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   83c00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83c02:	4313      	orrs	r3, r2
   83c04:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83c06:	e7ef      	b.n	83be8 <pio_set_peripheral+0x1e>

00083c08 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83c08:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83c0a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83c0e:	bf14      	ite	ne
   83c10:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c12:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83c14:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83c18:	bf14      	ite	ne
   83c1a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   83c1c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83c1e:	f012 0f02 	tst.w	r2, #2
   83c22:	d107      	bne.n	83c34 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   83c24:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83c28:	bf18      	it	ne
   83c2a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   83c2e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   83c30:	6001      	str	r1, [r0, #0]
   83c32:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   83c34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   83c38:	e7f9      	b.n	83c2e <pio_set_input+0x26>

00083c3a <pio_set_output>:
{
   83c3a:	b410      	push	{r4}
   83c3c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   83c3e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83c40:	b944      	cbnz	r4, 83c54 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   83c42:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   83c44:	b143      	cbz	r3, 83c58 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   83c46:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   83c48:	b942      	cbnz	r2, 83c5c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   83c4a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   83c4c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83c4e:	6001      	str	r1, [r0, #0]
}
   83c50:	bc10      	pop	{r4}
   83c52:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   83c54:	6641      	str	r1, [r0, #100]	; 0x64
   83c56:	e7f5      	b.n	83c44 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   83c58:	6541      	str	r1, [r0, #84]	; 0x54
   83c5a:	e7f5      	b.n	83c48 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   83c5c:	6301      	str	r1, [r0, #48]	; 0x30
   83c5e:	e7f5      	b.n	83c4c <pio_set_output+0x12>

00083c60 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   83c60:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   83c64:	4770      	bx	lr

00083c66 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   83c66:	6381      	str	r1, [r0, #56]	; 0x38
   83c68:	4770      	bx	lr

00083c6a <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83c6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83c6c:	4770      	bx	lr

00083c6e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83c6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83c70:	4770      	bx	lr

00083c72 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83c72:	0943      	lsrs	r3, r0, #5
   83c74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c78:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83c7c:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83c80:	f000 001f 	and.w	r0, r0, #31
   83c84:	fa23 f000 	lsr.w	r0, r3, r0
}
   83c88:	f000 0001 	and.w	r0, r0, #1
   83c8c:	4770      	bx	lr

00083c8e <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83c8e:	0943      	lsrs	r3, r0, #5
   83c90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83c94:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83c98:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83c9a:	f000 001f 	and.w	r0, r0, #31
   83c9e:	2201      	movs	r2, #1
   83ca0:	fa02 f000 	lsl.w	r0, r2, r0
   83ca4:	6318      	str	r0, [r3, #48]	; 0x30
   83ca6:	4770      	bx	lr

00083ca8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83ca8:	0943      	lsrs	r3, r0, #5
   83caa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83cae:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83cb2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83cb4:	f000 001f 	and.w	r0, r0, #31
   83cb8:	2201      	movs	r2, #1
   83cba:	fa02 f000 	lsl.w	r0, r2, r0
   83cbe:	6358      	str	r0, [r3, #52]	; 0x34
   83cc0:	4770      	bx	lr
	...

00083cc4 <pio_configure_pin>:
{
   83cc4:	b570      	push	{r4, r5, r6, lr}
   83cc6:	b082      	sub	sp, #8
   83cc8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83cca:	0943      	lsrs	r3, r0, #5
   83ccc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83cd0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83cd4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83cd6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   83cda:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83cde:	d031      	beq.n	83d44 <pio_configure_pin+0x80>
   83ce0:	d816      	bhi.n	83d10 <pio_configure_pin+0x4c>
   83ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83ce6:	d01b      	beq.n	83d20 <pio_configure_pin+0x5c>
   83ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83cec:	d116      	bne.n	83d1c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83cee:	f000 001f 	and.w	r0, r0, #31
   83cf2:	2601      	movs	r6, #1
   83cf4:	4086      	lsls	r6, r0
   83cf6:	4632      	mov	r2, r6
   83cf8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83cfc:	4620      	mov	r0, r4
   83cfe:	4b22      	ldr	r3, [pc, #136]	; (83d88 <pio_configure_pin+0xc4>)
   83d00:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83d02:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   83d06:	bf14      	ite	ne
   83d08:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83d0a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   83d0c:	2001      	movs	r0, #1
   83d0e:	e017      	b.n	83d40 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83d14:	d021      	beq.n	83d5a <pio_configure_pin+0x96>
   83d16:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83d1a:	d01e      	beq.n	83d5a <pio_configure_pin+0x96>
		return 0;
   83d1c:	2000      	movs	r0, #0
   83d1e:	e00f      	b.n	83d40 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83d20:	f000 001f 	and.w	r0, r0, #31
   83d24:	2601      	movs	r6, #1
   83d26:	4086      	lsls	r6, r0
   83d28:	4632      	mov	r2, r6
   83d2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83d2e:	4620      	mov	r0, r4
   83d30:	4b15      	ldr	r3, [pc, #84]	; (83d88 <pio_configure_pin+0xc4>)
   83d32:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83d34:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   83d38:	bf14      	ite	ne
   83d3a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83d3c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   83d3e:	2001      	movs	r0, #1
}
   83d40:	b002      	add	sp, #8
   83d42:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83d44:	f000 011f 	and.w	r1, r0, #31
   83d48:	2601      	movs	r6, #1
   83d4a:	462a      	mov	r2, r5
   83d4c:	fa06 f101 	lsl.w	r1, r6, r1
   83d50:	4620      	mov	r0, r4
   83d52:	4b0e      	ldr	r3, [pc, #56]	; (83d8c <pio_configure_pin+0xc8>)
   83d54:	4798      	blx	r3
	return 1;
   83d56:	4630      	mov	r0, r6
		break;
   83d58:	e7f2      	b.n	83d40 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83d5a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83d5e:	f000 011f 	and.w	r1, r0, #31
   83d62:	2601      	movs	r6, #1
   83d64:	ea05 0306 	and.w	r3, r5, r6
   83d68:	9300      	str	r3, [sp, #0]
   83d6a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   83d6e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83d72:	bf14      	ite	ne
   83d74:	2200      	movne	r2, #0
   83d76:	2201      	moveq	r2, #1
   83d78:	fa06 f101 	lsl.w	r1, r6, r1
   83d7c:	4620      	mov	r0, r4
   83d7e:	4c04      	ldr	r4, [pc, #16]	; (83d90 <pio_configure_pin+0xcc>)
   83d80:	47a0      	blx	r4
	return 1;
   83d82:	4630      	mov	r0, r6
		break;
   83d84:	e7dc      	b.n	83d40 <pio_configure_pin+0x7c>
   83d86:	bf00      	nop
   83d88:	00083bcb 	.word	0x00083bcb
   83d8c:	00083c09 	.word	0x00083c09
   83d90:	00083c3b 	.word	0x00083c3b

00083d94 <pio_configure_pin_group>:
{
   83d94:	b570      	push	{r4, r5, r6, lr}
   83d96:	b082      	sub	sp, #8
   83d98:	4605      	mov	r5, r0
   83d9a:	460e      	mov	r6, r1
   83d9c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   83d9e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   83da2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83da6:	d027      	beq.n	83df8 <pio_configure_pin_group+0x64>
   83da8:	d811      	bhi.n	83dce <pio_configure_pin_group+0x3a>
   83daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83dae:	d016      	beq.n	83dde <pio_configure_pin_group+0x4a>
   83db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83db4:	d111      	bne.n	83dda <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83db6:	460a      	mov	r2, r1
   83db8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83dbc:	4b19      	ldr	r3, [pc, #100]	; (83e24 <pio_configure_pin_group+0x90>)
   83dbe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83dc0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   83dc4:	bf14      	ite	ne
   83dc6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83dc8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83dca:	2001      	movs	r0, #1
   83dcc:	e012      	b.n	83df4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   83dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83dd2:	d015      	beq.n	83e00 <pio_configure_pin_group+0x6c>
   83dd4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83dd8:	d012      	beq.n	83e00 <pio_configure_pin_group+0x6c>
		return 0;
   83dda:	2000      	movs	r0, #0
   83ddc:	e00a      	b.n	83df4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83dde:	460a      	mov	r2, r1
   83de0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83de4:	4b0f      	ldr	r3, [pc, #60]	; (83e24 <pio_configure_pin_group+0x90>)
   83de6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83de8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   83dec:	bf14      	ite	ne
   83dee:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83df0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83df2:	2001      	movs	r0, #1
}
   83df4:	b002      	add	sp, #8
   83df6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   83df8:	4b0b      	ldr	r3, [pc, #44]	; (83e28 <pio_configure_pin_group+0x94>)
   83dfa:	4798      	blx	r3
	return 1;
   83dfc:	2001      	movs	r0, #1
		break;
   83dfe:	e7f9      	b.n	83df4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83e00:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83e04:	f004 0301 	and.w	r3, r4, #1
   83e08:	9300      	str	r3, [sp, #0]
   83e0a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   83e0e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83e12:	bf14      	ite	ne
   83e14:	2200      	movne	r2, #0
   83e16:	2201      	moveq	r2, #1
   83e18:	4631      	mov	r1, r6
   83e1a:	4628      	mov	r0, r5
   83e1c:	4c03      	ldr	r4, [pc, #12]	; (83e2c <pio_configure_pin_group+0x98>)
   83e1e:	47a0      	blx	r4
	return 1;
   83e20:	2001      	movs	r0, #1
		break;
   83e22:	e7e7      	b.n	83df4 <pio_configure_pin_group+0x60>
   83e24:	00083bcb 	.word	0x00083bcb
   83e28:	00083c09 	.word	0x00083c09
   83e2c:	00083c3b 	.word	0x00083c3b

00083e30 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e34:	4604      	mov	r4, r0
   83e36:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83e38:	4b0e      	ldr	r3, [pc, #56]	; (83e74 <pio_handler_process+0x44>)
   83e3a:	4798      	blx	r3
   83e3c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83e3e:	4620      	mov	r0, r4
   83e40:	4b0d      	ldr	r3, [pc, #52]	; (83e78 <pio_handler_process+0x48>)
   83e42:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83e44:	4005      	ands	r5, r0
   83e46:	d013      	beq.n	83e70 <pio_handler_process+0x40>
   83e48:	4c0c      	ldr	r4, [pc, #48]	; (83e7c <pio_handler_process+0x4c>)
   83e4a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   83e4e:	e003      	b.n	83e58 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83e50:	42b4      	cmp	r4, r6
   83e52:	d00d      	beq.n	83e70 <pio_handler_process+0x40>
   83e54:	3410      	adds	r4, #16
		while (status != 0) {
   83e56:	b15d      	cbz	r5, 83e70 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   83e58:	6820      	ldr	r0, [r4, #0]
   83e5a:	4540      	cmp	r0, r8
   83e5c:	d1f8      	bne.n	83e50 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83e5e:	6861      	ldr	r1, [r4, #4]
   83e60:	4229      	tst	r1, r5
   83e62:	d0f5      	beq.n	83e50 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83e64:	68e3      	ldr	r3, [r4, #12]
   83e66:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   83e68:	6863      	ldr	r3, [r4, #4]
   83e6a:	ea25 0503 	bic.w	r5, r5, r3
   83e6e:	e7ef      	b.n	83e50 <pio_handler_process+0x20>
   83e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e74:	00083c6b 	.word	0x00083c6b
   83e78:	00083c6f 	.word	0x00083c6f
   83e7c:	20002094 	.word	0x20002094

00083e80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83e80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83e82:	210a      	movs	r1, #10
   83e84:	4801      	ldr	r0, [pc, #4]	; (83e8c <PIOA_Handler+0xc>)
   83e86:	4b02      	ldr	r3, [pc, #8]	; (83e90 <PIOA_Handler+0x10>)
   83e88:	4798      	blx	r3
   83e8a:	bd08      	pop	{r3, pc}
   83e8c:	400e0c00 	.word	0x400e0c00
   83e90:	00083e31 	.word	0x00083e31

00083e94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83e94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83e96:	210b      	movs	r1, #11
   83e98:	4801      	ldr	r0, [pc, #4]	; (83ea0 <PIOB_Handler+0xc>)
   83e9a:	4b02      	ldr	r3, [pc, #8]	; (83ea4 <PIOB_Handler+0x10>)
   83e9c:	4798      	blx	r3
   83e9e:	bd08      	pop	{r3, pc}
   83ea0:	400e0e00 	.word	0x400e0e00
   83ea4:	00083e31 	.word	0x00083e31

00083ea8 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83ea8:	4a17      	ldr	r2, [pc, #92]	; (83f08 <pmc_switch_mck_to_mainck+0x60>)
   83eaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83eac:	f023 0303 	bic.w	r3, r3, #3
   83eb0:	f043 0301 	orr.w	r3, r3, #1
   83eb4:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83eb6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83eb8:	f013 0f08 	tst.w	r3, #8
   83ebc:	d10a      	bne.n	83ed4 <pmc_switch_mck_to_mainck+0x2c>
   83ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83ec2:	4911      	ldr	r1, [pc, #68]	; (83f08 <pmc_switch_mck_to_mainck+0x60>)
   83ec4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83ec6:	f012 0f08 	tst.w	r2, #8
   83eca:	d103      	bne.n	83ed4 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83ecc:	3b01      	subs	r3, #1
   83ece:	d1f9      	bne.n	83ec4 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   83ed0:	2001      	movs	r0, #1
   83ed2:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83ed4:	4a0c      	ldr	r2, [pc, #48]	; (83f08 <pmc_switch_mck_to_mainck+0x60>)
   83ed6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83edc:	4318      	orrs	r0, r3
   83ede:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83ee0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83ee2:	f013 0f08 	tst.w	r3, #8
   83ee6:	d10a      	bne.n	83efe <pmc_switch_mck_to_mainck+0x56>
   83ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83eec:	4906      	ldr	r1, [pc, #24]	; (83f08 <pmc_switch_mck_to_mainck+0x60>)
   83eee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83ef0:	f012 0f08 	tst.w	r2, #8
   83ef4:	d105      	bne.n	83f02 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83ef6:	3b01      	subs	r3, #1
   83ef8:	d1f9      	bne.n	83eee <pmc_switch_mck_to_mainck+0x46>
			return 1;
   83efa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83efc:	4770      	bx	lr
	return 0;
   83efe:	2000      	movs	r0, #0
   83f00:	4770      	bx	lr
   83f02:	2000      	movs	r0, #0
   83f04:	4770      	bx	lr
   83f06:	bf00      	nop
   83f08:	400e0400 	.word	0x400e0400

00083f0c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83f0c:	4a17      	ldr	r2, [pc, #92]	; (83f6c <pmc_switch_mck_to_pllack+0x60>)
   83f0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83f14:	4318      	orrs	r0, r3
   83f16:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83f18:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83f1a:	f013 0f08 	tst.w	r3, #8
   83f1e:	d10a      	bne.n	83f36 <pmc_switch_mck_to_pllack+0x2a>
   83f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83f24:	4911      	ldr	r1, [pc, #68]	; (83f6c <pmc_switch_mck_to_pllack+0x60>)
   83f26:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83f28:	f012 0f08 	tst.w	r2, #8
   83f2c:	d103      	bne.n	83f36 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83f2e:	3b01      	subs	r3, #1
   83f30:	d1f9      	bne.n	83f26 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   83f32:	2001      	movs	r0, #1
   83f34:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83f36:	4a0d      	ldr	r2, [pc, #52]	; (83f6c <pmc_switch_mck_to_pllack+0x60>)
   83f38:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83f3a:	f023 0303 	bic.w	r3, r3, #3
   83f3e:	f043 0302 	orr.w	r3, r3, #2
   83f42:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83f44:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83f46:	f013 0f08 	tst.w	r3, #8
   83f4a:	d10a      	bne.n	83f62 <pmc_switch_mck_to_pllack+0x56>
   83f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83f50:	4906      	ldr	r1, [pc, #24]	; (83f6c <pmc_switch_mck_to_pllack+0x60>)
   83f52:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83f54:	f012 0f08 	tst.w	r2, #8
   83f58:	d105      	bne.n	83f66 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83f5a:	3b01      	subs	r3, #1
   83f5c:	d1f9      	bne.n	83f52 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   83f5e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83f60:	4770      	bx	lr
	return 0;
   83f62:	2000      	movs	r0, #0
   83f64:	4770      	bx	lr
   83f66:	2000      	movs	r0, #0
   83f68:	4770      	bx	lr
   83f6a:	bf00      	nop
   83f6c:	400e0400 	.word	0x400e0400

00083f70 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   83f70:	4a08      	ldr	r2, [pc, #32]	; (83f94 <pmc_osc_enable_main_xtal+0x24>)
   83f72:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83f74:	f023 0303 	bic.w	r3, r3, #3
   83f78:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83f7c:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83f80:	0200      	lsls	r0, r0, #8
   83f82:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83f84:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   83f86:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83f88:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83f8a:	f013 0f01 	tst.w	r3, #1
   83f8e:	d0fb      	beq.n	83f88 <pmc_osc_enable_main_xtal+0x18>
}
   83f90:	4770      	bx	lr
   83f92:	bf00      	nop
   83f94:	400e0400 	.word	0x400e0400

00083f98 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83f98:	4b02      	ldr	r3, [pc, #8]	; (83fa4 <pmc_osc_is_ready_main_xtal+0xc>)
   83f9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83f9c:	f000 0001 	and.w	r0, r0, #1
   83fa0:	4770      	bx	lr
   83fa2:	bf00      	nop
   83fa4:	400e0400 	.word	0x400e0400

00083fa8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83fa8:	4b02      	ldr	r3, [pc, #8]	; (83fb4 <pmc_osc_is_ready_mainck+0xc>)
   83faa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83fac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83fb0:	4770      	bx	lr
   83fb2:	bf00      	nop
   83fb4:	400e0400 	.word	0x400e0400

00083fb8 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   83fb8:	4b06      	ldr	r3, [pc, #24]	; (83fd4 <pmc_mainck_osc_select+0x1c>)
   83fba:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   83fbc:	b930      	cbnz	r0, 83fcc <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   83fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83fc2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83fc6:	4a03      	ldr	r2, [pc, #12]	; (83fd4 <pmc_mainck_osc_select+0x1c>)
   83fc8:	6213      	str	r3, [r2, #32]
   83fca:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   83fcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   83fd0:	e7f7      	b.n	83fc2 <pmc_mainck_osc_select+0xa>
   83fd2:	bf00      	nop
   83fd4:	400e0400 	.word	0x400e0400

00083fd8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83fd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83fdc:	4b01      	ldr	r3, [pc, #4]	; (83fe4 <pmc_disable_pllack+0xc>)
   83fde:	629a      	str	r2, [r3, #40]	; 0x28
   83fe0:	4770      	bx	lr
   83fe2:	bf00      	nop
   83fe4:	400e0400 	.word	0x400e0400

00083fe8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83fe8:	4b02      	ldr	r3, [pc, #8]	; (83ff4 <pmc_is_locked_pllack+0xc>)
   83fea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83fec:	f000 0002 	and.w	r0, r0, #2
   83ff0:	4770      	bx	lr
   83ff2:	bf00      	nop
   83ff4:	400e0400 	.word	0x400e0400

00083ff8 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83ff8:	4b02      	ldr	r3, [pc, #8]	; (84004 <pmc_is_locked_upll+0xc>)
   83ffa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ffc:	f000 0040 	and.w	r0, r0, #64	; 0x40
   84000:	4770      	bx	lr
   84002:	bf00      	nop
   84004:	400e0400 	.word	0x400e0400

00084008 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84008:	281d      	cmp	r0, #29
   8400a:	d80e      	bhi.n	8402a <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   8400c:	281f      	cmp	r0, #31
   8400e:	d80e      	bhi.n	8402e <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84010:	4b09      	ldr	r3, [pc, #36]	; (84038 <pmc_enable_periph_clk+0x30>)
   84012:	699a      	ldr	r2, [r3, #24]
   84014:	2301      	movs	r3, #1
   84016:	4083      	lsls	r3, r0
   84018:	4393      	bics	r3, r2
   8401a:	d00a      	beq.n	84032 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8401c:	2301      	movs	r3, #1
   8401e:	fa03 f000 	lsl.w	r0, r3, r0
   84022:	4b05      	ldr	r3, [pc, #20]	; (84038 <pmc_enable_periph_clk+0x30>)
   84024:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84026:	2000      	movs	r0, #0
   84028:	4770      	bx	lr
		return 1;
   8402a:	2001      	movs	r0, #1
   8402c:	4770      	bx	lr
	return 0;
   8402e:	2000      	movs	r0, #0
   84030:	4770      	bx	lr
   84032:	2000      	movs	r0, #0
}
   84034:	4770      	bx	lr
   84036:	bf00      	nop
   84038:	400e0400 	.word	0x400e0400

0008403c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8403c:	281d      	cmp	r0, #29
   8403e:	d810      	bhi.n	84062 <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   84040:	281f      	cmp	r0, #31
   84042:	d810      	bhi.n	84066 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84044:	4b09      	ldr	r3, [pc, #36]	; (8406c <pmc_disable_periph_clk+0x30>)
   84046:	699a      	ldr	r2, [r3, #24]
   84048:	2301      	movs	r3, #1
   8404a:	4083      	lsls	r3, r0
   8404c:	4393      	bics	r3, r2
   8404e:	d001      	beq.n	84054 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   84050:	2000      	movs	r0, #0
}
   84052:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   84054:	2301      	movs	r3, #1
   84056:	fa03 f000 	lsl.w	r0, r3, r0
   8405a:	4b04      	ldr	r3, [pc, #16]	; (8406c <pmc_disable_periph_clk+0x30>)
   8405c:	6158      	str	r0, [r3, #20]
	return 0;
   8405e:	2000      	movs	r0, #0
   84060:	4770      	bx	lr
		return 1;
   84062:	2001      	movs	r0, #1
   84064:	4770      	bx	lr
	return 0;
   84066:	2000      	movs	r0, #0
   84068:	4770      	bx	lr
   8406a:	bf00      	nop
   8406c:	400e0400 	.word	0x400e0400

00084070 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84070:	f44f 7380 	mov.w	r3, #256	; 0x100
   84074:	fa03 f000 	lsl.w	r0, r3, r0
   84078:	4b01      	ldr	r3, [pc, #4]	; (84080 <pmc_enable_pck+0x10>)
   8407a:	6018      	str	r0, [r3, #0]
   8407c:	4770      	bx	lr
   8407e:	bf00      	nop
   84080:	400e0400 	.word	0x400e0400

00084084 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   84084:	4b03      	ldr	r3, [pc, #12]	; (84094 <pmc_set_fast_startup_input+0x10>)
   84086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84088:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   8408c:	4310      	orrs	r0, r2
   8408e:	6718      	str	r0, [r3, #112]	; 0x70
   84090:	4770      	bx	lr
   84092:	bf00      	nop
   84094:	400e0400 	.word	0x400e0400

00084098 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84098:	4b02      	ldr	r3, [pc, #8]	; (840a4 <pmc_is_wakeup_clocks_restored+0xc>)
   8409a:	7818      	ldrb	r0, [r3, #0]
}
   8409c:	f080 0001 	eor.w	r0, r0, #1
   840a0:	4770      	bx	lr
   840a2:	bf00      	nop
   840a4:	20002104 	.word	0x20002104

000840a8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   840a8:	b508      	push	{r3, lr}
   840aa:	2014      	movs	r0, #20
   840ac:	4b01      	ldr	r3, [pc, #4]	; (840b4 <spi_enable_clock+0xc>)
   840ae:	4798      	blx	r3
   840b0:	bd08      	pop	{r3, pc}
   840b2:	bf00      	nop
   840b4:	00084009 	.word	0x00084009

000840b8 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   840b8:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   840ba:	2014      	movs	r0, #20
   840bc:	4b01      	ldr	r3, [pc, #4]	; (840c4 <spi_disable_clock+0xc>)
   840be:	4798      	blx	r3
   840c0:	bd08      	pop	{r3, pc}
   840c2:	bf00      	nop
   840c4:	0008403d 	.word	0x0008403d

000840c8 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   840c8:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   840ca:	f643 2399 	movw	r3, #15001	; 0x3a99
   840ce:	6904      	ldr	r4, [r0, #16]
   840d0:	f014 0f01 	tst.w	r4, #1
   840d4:	d103      	bne.n	840de <spi_read+0x16>
		if (!timeout--) {
   840d6:	3b01      	subs	r3, #1
   840d8:	d1f9      	bne.n	840ce <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   840da:	2001      	movs	r0, #1
   840dc:	e009      	b.n	840f2 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   840de:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   840e0:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   840e2:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   840e6:	bf1c      	itt	ne
   840e8:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   840ec:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   840ee:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   840f0:	2000      	movs	r0, #0
}
   840f2:	bc10      	pop	{r4}
   840f4:	4770      	bx	lr

000840f6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   840f6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   840f8:	f643 2499 	movw	r4, #15001	; 0x3a99
   840fc:	6905      	ldr	r5, [r0, #16]
   840fe:	f015 0f02 	tst.w	r5, #2
   84102:	d103      	bne.n	8410c <spi_write+0x16>
		if (!timeout--) {
   84104:	3c01      	subs	r4, #1
   84106:	d1f9      	bne.n	840fc <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   84108:	2001      	movs	r0, #1
   8410a:	e00c      	b.n	84126 <spi_write+0x30>
   8410c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   8410e:	f014 0f02 	tst.w	r4, #2
   84112:	d006      	beq.n	84122 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   84114:	0412      	lsls	r2, r2, #16
   84116:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8411a:	4311      	orrs	r1, r2
		if (uc_last) {
   8411c:	b10b      	cbz	r3, 84122 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   8411e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   84122:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   84124:	2000      	movs	r0, #0
}
   84126:	bc30      	pop	{r4, r5}
   84128:	4770      	bx	lr

0008412a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   8412a:	b932      	cbnz	r2, 8413a <spi_set_clock_polarity+0x10>
   8412c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   84130:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84132:	f023 0301 	bic.w	r3, r3, #1
   84136:	6303      	str	r3, [r0, #48]	; 0x30
   84138:	4770      	bx	lr
   8413a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8413e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84140:	f043 0301 	orr.w	r3, r3, #1
   84144:	6303      	str	r3, [r0, #48]	; 0x30
   84146:	4770      	bx	lr

00084148 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   84148:	b932      	cbnz	r2, 84158 <spi_set_clock_phase+0x10>
   8414a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8414e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84150:	f023 0302 	bic.w	r3, r3, #2
   84154:	6303      	str	r3, [r0, #48]	; 0x30
   84156:	4770      	bx	lr
   84158:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8415c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8415e:	f043 0302 	orr.w	r3, r3, #2
   84162:	6303      	str	r3, [r0, #48]	; 0x30
   84164:	4770      	bx	lr

00084166 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   84166:	1e43      	subs	r3, r0, #1
   84168:	4419      	add	r1, r3
   8416a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8416e:	1e43      	subs	r3, r0, #1
   84170:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   84172:	bf94      	ite	ls
   84174:	b200      	sxthls	r0, r0
		return -1;
   84176:	f04f 30ff 	movhi.w	r0, #4294967295
}
   8417a:	4770      	bx	lr

0008417c <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8417c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   84180:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   84186:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84188:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8418a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   8418e:	630a      	str	r2, [r1, #48]	; 0x30
   84190:	4770      	bx	lr
	...

00084194 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   84194:	4603      	mov	r3, r0
   84196:	b9a8      	cbnz	r0, 841c4 <udd_sleep_mode+0x30>
   84198:	4a17      	ldr	r2, [pc, #92]	; (841f8 <udd_sleep_mode+0x64>)
   8419a:	7812      	ldrb	r2, [r2, #0]
   8419c:	b342      	cbz	r2, 841f0 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8419e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   841a2:	b672      	cpsid	i
   841a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841a8:	4914      	ldr	r1, [pc, #80]	; (841fc <udd_sleep_mode+0x68>)
   841aa:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   841ac:	4814      	ldr	r0, [pc, #80]	; (84200 <udd_sleep_mode+0x6c>)
   841ae:	7881      	ldrb	r1, [r0, #2]
   841b0:	3901      	subs	r1, #1
   841b2:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   841b4:	b9e2      	cbnz	r2, 841f0 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   841b6:	2101      	movs	r1, #1
   841b8:	4a10      	ldr	r2, [pc, #64]	; (841fc <udd_sleep_mode+0x68>)
   841ba:	7011      	strb	r1, [r2, #0]
   841bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841c0:	b662      	cpsie	i
   841c2:	e015      	b.n	841f0 <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   841c4:	4a0c      	ldr	r2, [pc, #48]	; (841f8 <udd_sleep_mode+0x64>)
   841c6:	7812      	ldrb	r2, [r2, #0]
   841c8:	b992      	cbnz	r2, 841f0 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   841ca:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   841ce:	b672      	cpsid	i
   841d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841d4:	2000      	movs	r0, #0
   841d6:	4909      	ldr	r1, [pc, #36]	; (841fc <udd_sleep_mode+0x68>)
   841d8:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   841da:	4809      	ldr	r0, [pc, #36]	; (84200 <udd_sleep_mode+0x6c>)
   841dc:	7881      	ldrb	r1, [r0, #2]
   841de:	3101      	adds	r1, #1
   841e0:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   841e2:	b92a      	cbnz	r2, 841f0 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   841e4:	2101      	movs	r1, #1
   841e6:	4a05      	ldr	r2, [pc, #20]	; (841fc <udd_sleep_mode+0x68>)
   841e8:	7011      	strb	r1, [r2, #0]
   841ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841ee:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   841f0:	4a01      	ldr	r2, [pc, #4]	; (841f8 <udd_sleep_mode+0x64>)
   841f2:	7013      	strb	r3, [r2, #0]
}
   841f4:	4770      	bx	lr
   841f6:	bf00      	nop
   841f8:	20002106 	.word	0x20002106
   841fc:	20000986 	.word	0x20000986
   84200:	20002690 	.word	0x20002690

00084204 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84204:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84208:	b672      	cpsid	i
   8420a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8420e:	2100      	movs	r1, #0
   84210:	4a0d      	ldr	r2, [pc, #52]	; (84248 <udd_ctrl_init+0x44>)
   84212:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84214:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84218:	4a0c      	ldr	r2, [pc, #48]	; (8424c <udd_ctrl_init+0x48>)
   8421a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8421e:	b92b      	cbnz	r3, 8422c <udd_ctrl_init+0x28>
		cpu_irq_enable();
   84220:	2201      	movs	r2, #1
   84222:	4b09      	ldr	r3, [pc, #36]	; (84248 <udd_ctrl_init+0x44>)
   84224:	701a      	strb	r2, [r3, #0]
   84226:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8422a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   8422c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84230:	4b06      	ldr	r3, [pc, #24]	; (8424c <udd_ctrl_init+0x48>)
   84232:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84236:	4a06      	ldr	r2, [pc, #24]	; (84250 <udd_ctrl_init+0x4c>)
   84238:	2300      	movs	r3, #0
   8423a:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8423c:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   8423e:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84240:	4a04      	ldr	r2, [pc, #16]	; (84254 <udd_ctrl_init+0x50>)
   84242:	7013      	strb	r3, [r2, #0]
   84244:	4770      	bx	lr
   84246:	bf00      	nop
   84248:	20000986 	.word	0x20000986
   8424c:	400a4000 	.word	0x400a4000
   84250:	200026a4 	.word	0x200026a4
   84254:	2000210c 	.word	0x2000210c

00084258 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84258:	2205      	movs	r2, #5
   8425a:	4b03      	ldr	r3, [pc, #12]	; (84268 <udd_ctrl_stall_data+0x10>)
   8425c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8425e:	2220      	movs	r2, #32
   84260:	4b02      	ldr	r3, [pc, #8]	; (8426c <udd_ctrl_stall_data+0x14>)
   84262:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84266:	4770      	bx	lr
   84268:	2000210c 	.word	0x2000210c
   8426c:	400a4000 	.word	0x400a4000

00084270 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84270:	2203      	movs	r2, #3
   84272:	4b11      	ldr	r3, [pc, #68]	; (842b8 <udd_ctrl_send_zlp_in+0x48>)
   84274:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84276:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8427a:	b672      	cpsid	i
   8427c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84280:	2100      	movs	r1, #0
   84282:	4b0e      	ldr	r3, [pc, #56]	; (842bc <udd_ctrl_send_zlp_in+0x4c>)
   84284:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84286:	4b0e      	ldr	r3, [pc, #56]	; (842c0 <udd_ctrl_send_zlp_in+0x50>)
   84288:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8428c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84290:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84294:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84298:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8429c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   842a0:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   842a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   842a8:	b92a      	cbnz	r2, 842b6 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   842aa:	2201      	movs	r2, #1
   842ac:	4b03      	ldr	r3, [pc, #12]	; (842bc <udd_ctrl_send_zlp_in+0x4c>)
   842ae:	701a      	strb	r2, [r3, #0]
   842b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842b4:	b662      	cpsie	i
   842b6:	4770      	bx	lr
   842b8:	2000210c 	.word	0x2000210c
   842bc:	20000986 	.word	0x20000986
   842c0:	400a4000 	.word	0x400a4000

000842c4 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   842c4:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   842c6:	4b02      	ldr	r3, [pc, #8]	; (842d0 <udd_ctrl_endofrequest+0xc>)
   842c8:	691b      	ldr	r3, [r3, #16]
   842ca:	b103      	cbz	r3, 842ce <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   842cc:	4798      	blx	r3
   842ce:	bd08      	pop	{r3, pc}
   842d0:	200026a4 	.word	0x200026a4

000842d4 <udd_ctrl_in_sent>:
{
   842d4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842d6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   842da:	b672      	cpsid	i
   842dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842e0:	2100      	movs	r1, #0
   842e2:	4a4c      	ldr	r2, [pc, #304]	; (84414 <udd_ctrl_in_sent+0x140>)
   842e4:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   842e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   842ea:	4a4b      	ldr	r2, [pc, #300]	; (84418 <udd_ctrl_in_sent+0x144>)
   842ec:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   842f0:	b92b      	cbnz	r3, 842fe <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   842f2:	2201      	movs	r2, #1
   842f4:	4b47      	ldr	r3, [pc, #284]	; (84414 <udd_ctrl_in_sent+0x140>)
   842f6:	701a      	strb	r2, [r3, #0]
   842f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842fc:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   842fe:	4b47      	ldr	r3, [pc, #284]	; (8441c <udd_ctrl_in_sent+0x148>)
   84300:	781b      	ldrb	r3, [r3, #0]
   84302:	2b03      	cmp	r3, #3
   84304:	d057      	beq.n	843b6 <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84306:	4b46      	ldr	r3, [pc, #280]	; (84420 <udd_ctrl_in_sent+0x14c>)
   84308:	881b      	ldrh	r3, [r3, #0]
   8430a:	4a46      	ldr	r2, [pc, #280]	; (84424 <udd_ctrl_in_sent+0x150>)
   8430c:	8994      	ldrh	r4, [r2, #12]
   8430e:	1ae4      	subs	r4, r4, r3
   84310:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   84312:	b9c4      	cbnz	r4, 84346 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84314:	4a44      	ldr	r2, [pc, #272]	; (84428 <udd_ctrl_in_sent+0x154>)
   84316:	8811      	ldrh	r1, [r2, #0]
   84318:	440b      	add	r3, r1
   8431a:	b29b      	uxth	r3, r3
   8431c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8431e:	4a41      	ldr	r2, [pc, #260]	; (84424 <udd_ctrl_in_sent+0x150>)
   84320:	88d2      	ldrh	r2, [r2, #6]
   84322:	429a      	cmp	r2, r3
   84324:	d04c      	beq.n	843c0 <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   84326:	4b41      	ldr	r3, [pc, #260]	; (8442c <udd_ctrl_in_sent+0x158>)
   84328:	781b      	ldrb	r3, [r3, #0]
   8432a:	2b00      	cmp	r3, #0
   8432c:	d148      	bne.n	843c0 <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   8432e:	4b3d      	ldr	r3, [pc, #244]	; (84424 <udd_ctrl_in_sent+0x150>)
   84330:	695b      	ldr	r3, [r3, #20]
   84332:	2b00      	cmp	r3, #0
   84334:	d05f      	beq.n	843f6 <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84336:	4798      	blx	r3
   84338:	2800      	cmp	r0, #0
   8433a:	d05c      	beq.n	843f6 <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   8433c:	2200      	movs	r2, #0
   8433e:	4b38      	ldr	r3, [pc, #224]	; (84420 <udd_ctrl_in_sent+0x14c>)
   84340:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84342:	4b38      	ldr	r3, [pc, #224]	; (84424 <udd_ctrl_in_sent+0x150>)
   84344:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84346:	2c3f      	cmp	r4, #63	; 0x3f
   84348:	d955      	bls.n	843f6 <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   8434a:	2200      	movs	r2, #0
   8434c:	4b37      	ldr	r3, [pc, #220]	; (8442c <udd_ctrl_in_sent+0x158>)
   8434e:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84350:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84352:	4b34      	ldr	r3, [pc, #208]	; (84424 <udd_ctrl_in_sent+0x150>)
   84354:	689a      	ldr	r2, [r3, #8]
   84356:	4b32      	ldr	r3, [pc, #200]	; (84420 <udd_ctrl_in_sent+0x14c>)
   84358:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8435a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8435e:	b672      	cpsid	i
   84360:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84364:	2100      	movs	r1, #0
   84366:	4b2b      	ldr	r3, [pc, #172]	; (84414 <udd_ctrl_in_sent+0x140>)
   84368:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   8436a:	4b2b      	ldr	r3, [pc, #172]	; (84418 <udd_ctrl_in_sent+0x144>)
   8436c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84370:	f413 7f00 	tst.w	r3, #512	; 0x200
   84374:	d143      	bne.n	843fe <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   84376:	b144      	cbz	r4, 8438a <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84378:	442a      	add	r2, r5
   8437a:	4b2d      	ldr	r3, [pc, #180]	; (84430 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   8437c:	f812 1b01 	ldrb.w	r1, [r2], #1
   84380:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   84384:	b2d9      	uxtb	r1, r3
   84386:	42a1      	cmp	r1, r4
   84388:	d3f8      	bcc.n	8437c <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8438a:	442c      	add	r4, r5
   8438c:	4b24      	ldr	r3, [pc, #144]	; (84420 <udd_ctrl_in_sent+0x14c>)
   8438e:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   84390:	4b21      	ldr	r3, [pc, #132]	; (84418 <udd_ctrl_in_sent+0x144>)
   84392:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84396:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8439a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8439e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   843a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   843a6:	b928      	cbnz	r0, 843b4 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   843a8:	2201      	movs	r2, #1
   843aa:	4b1a      	ldr	r3, [pc, #104]	; (84414 <udd_ctrl_in_sent+0x140>)
   843ac:	701a      	strb	r2, [r3, #0]
   843ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   843b2:	b662      	cpsie	i
   843b4:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   843b6:	4b1f      	ldr	r3, [pc, #124]	; (84434 <udd_ctrl_in_sent+0x160>)
   843b8:	4798      	blx	r3
		udd_ctrl_init();
   843ba:	4b1f      	ldr	r3, [pc, #124]	; (84438 <udd_ctrl_in_sent+0x164>)
   843bc:	4798      	blx	r3
		return;
   843be:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   843c0:	2204      	movs	r2, #4
   843c2:	4b16      	ldr	r3, [pc, #88]	; (8441c <udd_ctrl_in_sent+0x148>)
   843c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   843c6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   843ca:	b672      	cpsid	i
   843cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   843d0:	2100      	movs	r1, #0
   843d2:	4a10      	ldr	r2, [pc, #64]	; (84414 <udd_ctrl_in_sent+0x140>)
   843d4:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   843d6:	4a10      	ldr	r2, [pc, #64]	; (84418 <udd_ctrl_in_sent+0x144>)
   843d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   843dc:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   843e0:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   843e4:	2b00      	cmp	r3, #0
   843e6:	d1e5      	bne.n	843b4 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   843e8:	2201      	movs	r2, #1
   843ea:	4b0a      	ldr	r3, [pc, #40]	; (84414 <udd_ctrl_in_sent+0x140>)
   843ec:	701a      	strb	r2, [r3, #0]
   843ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   843f2:	b662      	cpsie	i
   843f4:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   843f6:	2201      	movs	r2, #1
   843f8:	4b0c      	ldr	r3, [pc, #48]	; (8442c <udd_ctrl_in_sent+0x158>)
   843fa:	701a      	strb	r2, [r3, #0]
   843fc:	e7a9      	b.n	84352 <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   843fe:	b928      	cbnz	r0, 8440c <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   84400:	2201      	movs	r2, #1
   84402:	4b04      	ldr	r3, [pc, #16]	; (84414 <udd_ctrl_in_sent+0x140>)
   84404:	701a      	strb	r2, [r3, #0]
   84406:	f3bf 8f5f 	dmb	sy
   8440a:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8440c:	2204      	movs	r2, #4
   8440e:	4b03      	ldr	r3, [pc, #12]	; (8441c <udd_ctrl_in_sent+0x148>)
   84410:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   84412:	bd38      	pop	{r3, r4, r5, pc}
   84414:	20000986 	.word	0x20000986
   84418:	400a4000 	.word	0x400a4000
   8441c:	2000210c 	.word	0x2000210c
   84420:	20002108 	.word	0x20002108
   84424:	200026a4 	.word	0x200026a4
   84428:	2000210a 	.word	0x2000210a
   8442c:	20002105 	.word	0x20002105
   84430:	20180000 	.word	0x20180000
   84434:	000842c5 	.word	0x000842c5
   84438:	00084205 	.word	0x00084205

0008443c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8443c:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   8443e:	7d03      	ldrb	r3, [r0, #20]
   84440:	f013 0f01 	tst.w	r3, #1
   84444:	d013      	beq.n	8446e <udd_ep_finish_job+0x32>
   84446:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   84448:	7d03      	ldrb	r3, [r0, #20]
   8444a:	f36f 0300 	bfc	r3, #0, #1
   8444e:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   84450:	6804      	ldr	r4, [r0, #0]
   84452:	b164      	cbz	r4, 8446e <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   84454:	f102 0308 	add.w	r3, r2, #8
   84458:	015b      	lsls	r3, r3, #5
   8445a:	4905      	ldr	r1, [pc, #20]	; (84470 <udd_ep_finish_job+0x34>)
   8445c:	58cb      	ldr	r3, [r1, r3]
   8445e:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   84462:	bf18      	it	ne
   84464:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84468:	6881      	ldr	r1, [r0, #8]
   8446a:	4628      	mov	r0, r5
   8446c:	47a0      	blx	r4
   8446e:	bd38      	pop	{r3, r4, r5, pc}
   84470:	400a4000 	.word	0x400a4000

00084474 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84476:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84478:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8447c:	4a59      	ldr	r2, [pc, #356]	; (845e4 <udd_ep_trans_done+0x170>)
   8447e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   84482:	7d12      	ldrb	r2, [r2, #20]
   84484:	f012 0f01 	tst.w	r2, #1
   84488:	f000 809e 	beq.w	845c8 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8448c:	460a      	mov	r2, r1
   8448e:	4955      	ldr	r1, [pc, #340]	; (845e4 <udd_ep_trans_done+0x170>)
   84490:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84494:	68d4      	ldr	r4, [r2, #12]
   84496:	6892      	ldr	r2, [r2, #8]
   84498:	4294      	cmp	r4, r2
   8449a:	d079      	beq.n	84590 <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8449c:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8449e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   844a2:	bf92      	itee	ls
   844a4:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   844a6:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   844aa:	2700      	movhi	r7, #0
   844ac:	0141      	lsls	r1, r0, #5
   844ae:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   844b2:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   844b6:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   844ba:	f015 0f08 	tst.w	r5, #8
   844be:	d014      	beq.n	844ea <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   844c0:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   844c4:	f005 0507 	and.w	r5, r5, #7
   844c8:	2108      	movs	r1, #8
   844ca:	40a9      	lsls	r1, r5
   844cc:	3901      	subs	r1, #1
   844ce:	4211      	tst	r1, r2
   844d0:	d013      	beq.n	844fa <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   844d2:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   844d6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   844da:	4d42      	ldr	r5, [pc, #264]	; (845e4 <udd_ep_trans_done+0x170>)
   844dc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   844e0:	7d0d      	ldrb	r5, [r1, #20]
   844e2:	f36f 0541 	bfc	r5, #1, #1
   844e6:	750d      	strb	r5, [r1, #20]
   844e8:	e007      	b.n	844fa <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   844ea:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   844ee:	f3c5 1501 	ubfx	r5, r5, #4, #2
   844f2:	2d01      	cmp	r5, #1
   844f4:	d035      	beq.n	84562 <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   844f6:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   844fa:	493b      	ldr	r1, [pc, #236]	; (845e8 <udd_ep_trans_done+0x174>)
   844fc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   84500:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   84504:	4e37      	ldr	r6, [pc, #220]	; (845e4 <udd_ep_trans_done+0x170>)
   84506:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8450a:	686d      	ldr	r5, [r5, #4]
   8450c:	442c      	add	r4, r5
   8450e:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84510:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84514:	b672      	cpsid	i
   84516:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8451a:	2600      	movs	r6, #0
   8451c:	4c33      	ldr	r4, [pc, #204]	; (845ec <udd_ep_trans_done+0x178>)
   8451e:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   84520:	68cc      	ldr	r4, [r1, #12]
   84522:	f014 0f10 	tst.w	r4, #16
   84526:	d125      	bne.n	84574 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   84528:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8452c:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   8452e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   84532:	492c      	ldr	r1, [pc, #176]	; (845e4 <udd_ep_trans_done+0x170>)
   84534:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84538:	68c8      	ldr	r0, [r1, #12]
   8453a:	4410      	add	r0, r2
   8453c:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   8453e:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84540:	4a2b      	ldr	r2, [pc, #172]	; (845f0 <udd_ep_trans_done+0x17c>)
   84542:	6911      	ldr	r1, [r2, #16]
   84544:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   84548:	fa00 f303 	lsl.w	r3, r0, r3
   8454c:	430b      	orrs	r3, r1
   8454e:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84550:	2d00      	cmp	r5, #0
   84552:	d139      	bne.n	845c8 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   84554:	2201      	movs	r2, #1
   84556:	4b25      	ldr	r3, [pc, #148]	; (845ec <udd_ep_trans_done+0x178>)
   84558:	701a      	strb	r2, [r3, #0]
   8455a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8455e:	b662      	cpsie	i
   84560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84562:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84566:	f005 0507 	and.w	r5, r5, #7
   8456a:	2108      	movs	r1, #8
   8456c:	40a9      	lsls	r1, r5
   8456e:	428a      	cmp	r2, r1
   84570:	d8c3      	bhi.n	844fa <udd_ep_trans_done+0x86>
   84572:	e7c0      	b.n	844f6 <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   84574:	b92d      	cbnz	r5, 84582 <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   84576:	2101      	movs	r1, #1
   84578:	4a1c      	ldr	r2, [pc, #112]	; (845ec <udd_ep_trans_done+0x178>)
   8457a:	7011      	strb	r1, [r2, #0]
   8457c:	f3bf 8f5f 	dmb	sy
   84580:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84582:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84586:	4917      	ldr	r1, [pc, #92]	; (845e4 <udd_ep_trans_done+0x170>)
   84588:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8458c:	68d1      	ldr	r1, [r2, #12]
   8458e:	6091      	str	r1, [r2, #8]
   84590:	0142      	lsls	r2, r0, #5
   84592:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84596:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   8459a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8459e:	f011 0f08 	tst.w	r1, #8
   845a2:	d008      	beq.n	845b6 <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   845a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   845a8:	4c0e      	ldr	r4, [pc, #56]	; (845e4 <udd_ep_trans_done+0x170>)
   845aa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   845ae:	7d09      	ldrb	r1, [r1, #20]
   845b0:	f011 0f02 	tst.w	r1, #2
   845b4:	d109      	bne.n	845ca <udd_ep_trans_done+0x156>
   845b6:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   845b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   845bc:	2100      	movs	r1, #0
   845be:	4809      	ldr	r0, [pc, #36]	; (845e4 <udd_ep_trans_done+0x170>)
   845c0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   845c4:	4b0b      	ldr	r3, [pc, #44]	; (845f4 <udd_ep_trans_done+0x180>)
   845c6:	4798      	blx	r3
   845c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   845ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   845ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   845d2:	4b07      	ldr	r3, [pc, #28]	; (845f0 <udd_ep_trans_done+0x17c>)
   845d4:	6919      	ldr	r1, [r3, #16]
   845d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   845da:	fa02 f000 	lsl.w	r0, r2, r0
   845de:	4308      	orrs	r0, r1
   845e0:	6118      	str	r0, [r3, #16]
			return;
   845e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   845e4:	20002110 	.word	0x20002110
   845e8:	400a4300 	.word	0x400a4300
   845ec:	20000986 	.word	0x20000986
   845f0:	400a4000 	.word	0x400a4000
   845f4:	0008443d 	.word	0x0008443d

000845f8 <UDPHS_Handler>:
{
   845f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   845fc:	201d      	movs	r0, #29
   845fe:	4ba6      	ldr	r3, [pc, #664]	; (84898 <UDPHS_Handler+0x2a0>)
   84600:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84602:	4ba6      	ldr	r3, [pc, #664]	; (8489c <UDPHS_Handler+0x2a4>)
   84604:	4798      	blx	r3
   84606:	b920      	cbnz	r0, 84612 <UDPHS_Handler+0x1a>
   84608:	4ba5      	ldr	r3, [pc, #660]	; (848a0 <UDPHS_Handler+0x2a8>)
   8460a:	695b      	ldr	r3, [r3, #20]
   8460c:	f013 0f02 	tst.w	r3, #2
   84610:	d00f      	beq.n	84632 <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   84612:	4ba3      	ldr	r3, [pc, #652]	; (848a0 <UDPHS_Handler+0x2a8>)
   84614:	695b      	ldr	r3, [r3, #20]
   84616:	f013 0f08 	tst.w	r3, #8
   8461a:	d015      	beq.n	84648 <UDPHS_Handler+0x50>
		udd_ack_sof();
   8461c:	4ba0      	ldr	r3, [pc, #640]	; (848a0 <UDPHS_Handler+0x2a8>)
   8461e:	2208      	movs	r2, #8
   84620:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84622:	695b      	ldr	r3, [r3, #20]
   84624:	f013 0f01 	tst.w	r3, #1
   84628:	d00b      	beq.n	84642 <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   8462a:	4b9e      	ldr	r3, [pc, #632]	; (848a4 <UDPHS_Handler+0x2ac>)
   8462c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8462e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   84632:	b672      	cpsid	i
   84634:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84638:	2200      	movs	r2, #0
   8463a:	4b9b      	ldr	r3, [pc, #620]	; (848a8 <UDPHS_Handler+0x2b0>)
   8463c:	701a      	strb	r2, [r3, #0]
		return;
   8463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   84642:	4b9a      	ldr	r3, [pc, #616]	; (848ac <UDPHS_Handler+0x2b4>)
   84644:	4798      	blx	r3
   84646:	e7f0      	b.n	8462a <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   84648:	4b95      	ldr	r3, [pc, #596]	; (848a0 <UDPHS_Handler+0x2a8>)
   8464a:	695b      	ldr	r3, [r3, #20]
   8464c:	f013 0f04 	tst.w	r3, #4
   84650:	d137      	bne.n	846c2 <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   84652:	4a93      	ldr	r2, [pc, #588]	; (848a0 <UDPHS_Handler+0x2a8>)
   84654:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84658:	6952      	ldr	r2, [r2, #20]
   8465a:	f412 7f80 	tst.w	r2, #256	; 0x100
   8465e:	d029      	beq.n	846b4 <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   84660:	4a8f      	ldr	r2, [pc, #572]	; (848a0 <UDPHS_Handler+0x2a8>)
   84662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84666:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   8466a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8466e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   84672:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   84676:	d12b      	bne.n	846d0 <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   84678:	f413 6f80 	tst.w	r3, #1024	; 0x400
   8467c:	d006      	beq.n	8468c <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8467e:	4a88      	ldr	r2, [pc, #544]	; (848a0 <UDPHS_Handler+0x2a8>)
   84680:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84684:	f412 6f80 	tst.w	r2, #1024	; 0x400
   84688:	f040 808f 	bne.w	847aa <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   8468c:	f413 7f00 	tst.w	r3, #512	; 0x200
   84690:	f040 808f 	bne.w	847b2 <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   84694:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84698:	d004      	beq.n	846a4 <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   8469a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8469e:	4a80      	ldr	r2, [pc, #512]	; (848a0 <UDPHS_Handler+0x2a8>)
   846a0:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   846a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   846a8:	f040 813c 	bne.w	84924 <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   846ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   846b0:	f040 814e 	bne.w	84950 <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   846b4:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   846b6:	497a      	ldr	r1, [pc, #488]	; (848a0 <UDPHS_Handler+0x2a8>)
   846b8:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   846bc:	f44f 7c80 	mov.w	ip, #256	; 0x100
   846c0:	e199      	b.n	849f6 <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   846c2:	2204      	movs	r2, #4
   846c4:	4b76      	ldr	r3, [pc, #472]	; (848a0 <UDPHS_Handler+0x2a8>)
   846c6:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   846c8:	4b78      	ldr	r3, [pc, #480]	; (848ac <UDPHS_Handler+0x2b4>)
   846ca:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   846cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   846d0:	4b77      	ldr	r3, [pc, #476]	; (848b0 <UDPHS_Handler+0x2b8>)
   846d2:	781b      	ldrb	r3, [r3, #0]
   846d4:	2b00      	cmp	r3, #0
   846d6:	d141      	bne.n	8475c <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   846d8:	4b71      	ldr	r3, [pc, #452]	; (848a0 <UDPHS_Handler+0x2a8>)
   846da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   846de:	f3c3 530a 	ubfx	r3, r3, #20, #11
   846e2:	2b08      	cmp	r3, #8
   846e4:	d13f      	bne.n	84766 <UDPHS_Handler+0x16e>
   846e6:	4a73      	ldr	r2, [pc, #460]	; (848b4 <UDPHS_Handler+0x2bc>)
   846e8:	4b73      	ldr	r3, [pc, #460]	; (848b8 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   846ea:	4874      	ldr	r0, [pc, #464]	; (848bc <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   846ec:	f813 1b01 	ldrb.w	r1, [r3], #1
   846f0:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   846f4:	4283      	cmp	r3, r0
   846f6:	d1f9      	bne.n	846ec <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   846f8:	4b71      	ldr	r3, [pc, #452]	; (848c0 <UDPHS_Handler+0x2c8>)
   846fa:	4798      	blx	r3
   846fc:	2800      	cmp	r0, #0
   846fe:	d03b      	beq.n	84778 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   84700:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84704:	4b66      	ldr	r3, [pc, #408]	; (848a0 <UDPHS_Handler+0x2a8>)
   84706:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   8470a:	4b6e      	ldr	r3, [pc, #440]	; (848c4 <UDPHS_Handler+0x2cc>)
   8470c:	f993 3000 	ldrsb.w	r3, [r3]
   84710:	2b00      	cmp	r3, #0
   84712:	db3a      	blt.n	8478a <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84714:	4b6b      	ldr	r3, [pc, #428]	; (848c4 <UDPHS_Handler+0x2cc>)
   84716:	88db      	ldrh	r3, [r3, #6]
   84718:	2b00      	cmp	r3, #0
   8471a:	d042      	beq.n	847a2 <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8471c:	2200      	movs	r2, #0
   8471e:	4b6a      	ldr	r3, [pc, #424]	; (848c8 <UDPHS_Handler+0x2d0>)
   84720:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84722:	4b6a      	ldr	r3, [pc, #424]	; (848cc <UDPHS_Handler+0x2d4>)
   84724:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84726:	2101      	movs	r1, #1
   84728:	4b61      	ldr	r3, [pc, #388]	; (848b0 <UDPHS_Handler+0x2b8>)
   8472a:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   8472c:	495c      	ldr	r1, [pc, #368]	; (848a0 <UDPHS_Handler+0x2a8>)
   8472e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84732:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84736:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8473a:	b672      	cpsid	i
   8473c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84740:	4c59      	ldr	r4, [pc, #356]	; (848a8 <UDPHS_Handler+0x2b0>)
   84742:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   84744:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84748:	2b00      	cmp	r3, #0
   8474a:	f040 8266 	bne.w	84c1a <UDPHS_Handler+0x622>
		cpu_irq_enable();
   8474e:	2201      	movs	r2, #1
   84750:	7022      	strb	r2, [r4, #0]
   84752:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84756:	b662      	cpsie	i
   84758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   8475c:	4b5c      	ldr	r3, [pc, #368]	; (848d0 <UDPHS_Handler+0x2d8>)
   8475e:	4798      	blx	r3
		udd_ctrl_init();
   84760:	4b5c      	ldr	r3, [pc, #368]	; (848d4 <UDPHS_Handler+0x2dc>)
   84762:	4798      	blx	r3
   84764:	e7b8      	b.n	846d8 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   84766:	4b5c      	ldr	r3, [pc, #368]	; (848d8 <UDPHS_Handler+0x2e0>)
   84768:	4798      	blx	r3
		udd_ack_setup_received(0);
   8476a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8476e:	4b4c      	ldr	r3, [pc, #304]	; (848a0 <UDPHS_Handler+0x2a8>)
   84770:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   84778:	4b57      	ldr	r3, [pc, #348]	; (848d8 <UDPHS_Handler+0x2e0>)
   8477a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8477c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84780:	4b47      	ldr	r3, [pc, #284]	; (848a0 <UDPHS_Handler+0x2a8>)
   84782:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   8478a:	2300      	movs	r3, #0
   8478c:	4a4e      	ldr	r2, [pc, #312]	; (848c8 <UDPHS_Handler+0x2d0>)
   8478e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84790:	4a4e      	ldr	r2, [pc, #312]	; (848cc <UDPHS_Handler+0x2d4>)
   84792:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84794:	2202      	movs	r2, #2
   84796:	4b46      	ldr	r3, [pc, #280]	; (848b0 <UDPHS_Handler+0x2b8>)
   84798:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8479a:	4b50      	ldr	r3, [pc, #320]	; (848dc <UDPHS_Handler+0x2e4>)
   8479c:	4798      	blx	r3
   8479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   847a2:	4b4f      	ldr	r3, [pc, #316]	; (848e0 <UDPHS_Handler+0x2e8>)
   847a4:	4798      	blx	r3
   847a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   847aa:	4b4c      	ldr	r3, [pc, #304]	; (848dc <UDPHS_Handler+0x2e4>)
   847ac:	4798      	blx	r3
   847ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   847b2:	4b3f      	ldr	r3, [pc, #252]	; (848b0 <UDPHS_Handler+0x2b8>)
   847b4:	781b      	ldrb	r3, [r3, #0]
   847b6:	2b01      	cmp	r3, #1
   847b8:	d00c      	beq.n	847d4 <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   847ba:	2b02      	cmp	r3, #2
   847bc:	d004      	beq.n	847c8 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   847be:	2b04      	cmp	r3, #4
   847c0:	d002      	beq.n	847c8 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   847c2:	4b45      	ldr	r3, [pc, #276]	; (848d8 <UDPHS_Handler+0x2e0>)
   847c4:	4798      	blx	r3
   847c6:	e001      	b.n	847cc <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   847c8:	4b41      	ldr	r3, [pc, #260]	; (848d0 <UDPHS_Handler+0x2d8>)
   847ca:	4798      	blx	r3
		udd_ctrl_init();
   847cc:	4b41      	ldr	r3, [pc, #260]	; (848d4 <UDPHS_Handler+0x2dc>)
   847ce:	4798      	blx	r3
   847d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   847d4:	4b32      	ldr	r3, [pc, #200]	; (848a0 <UDPHS_Handler+0x2a8>)
   847d6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   847da:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   847de:	4b39      	ldr	r3, [pc, #228]	; (848c4 <UDPHS_Handler+0x2cc>)
   847e0:	899b      	ldrh	r3, [r3, #12]
   847e2:	4a3a      	ldr	r2, [pc, #232]	; (848cc <UDPHS_Handler+0x2d4>)
   847e4:	8814      	ldrh	r4, [r2, #0]
   847e6:	1822      	adds	r2, r4, r0
   847e8:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   847ea:	bfbc      	itt	lt
   847ec:	1b1b      	sublt	r3, r3, r4
   847ee:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   847f0:	4b34      	ldr	r3, [pc, #208]	; (848c4 <UDPHS_Handler+0x2cc>)
   847f2:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   847f4:	b178      	cbz	r0, 84816 <UDPHS_Handler+0x21e>
   847f6:	1e63      	subs	r3, r4, #1
   847f8:	441a      	add	r2, r3
   847fa:	4b2f      	ldr	r3, [pc, #188]	; (848b8 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   847fc:	f813 1b01 	ldrb.w	r1, [r3], #1
   84800:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   84804:	b2d9      	uxtb	r1, r3
   84806:	4281      	cmp	r1, r0
   84808:	d3f8      	bcc.n	847fc <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   8480a:	4404      	add	r4, r0
   8480c:	b2a4      	uxth	r4, r4
   8480e:	4b2f      	ldr	r3, [pc, #188]	; (848cc <UDPHS_Handler+0x2d4>)
   84810:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84812:	2840      	cmp	r0, #64	; 0x40
   84814:	d00e      	beq.n	84834 <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84816:	4b2b      	ldr	r3, [pc, #172]	; (848c4 <UDPHS_Handler+0x2cc>)
   84818:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8481a:	695b      	ldr	r3, [r3, #20]
   8481c:	b10b      	cbz	r3, 84822 <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   8481e:	4798      	blx	r3
   84820:	b380      	cbz	r0, 84884 <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   84822:	f44f 7200 	mov.w	r2, #512	; 0x200
   84826:	4b1e      	ldr	r3, [pc, #120]	; (848a0 <UDPHS_Handler+0x2a8>)
   84828:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8482c:	4b2c      	ldr	r3, [pc, #176]	; (848e0 <UDPHS_Handler+0x2e8>)
   8482e:	4798      	blx	r3
   84830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   84834:	4b23      	ldr	r3, [pc, #140]	; (848c4 <UDPHS_Handler+0x2cc>)
   84836:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   84838:	4b23      	ldr	r3, [pc, #140]	; (848c8 <UDPHS_Handler+0x2d0>)
   8483a:	881b      	ldrh	r3, [r3, #0]
   8483c:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   8483e:	429a      	cmp	r2, r3
   84840:	dde9      	ble.n	84816 <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84842:	4b20      	ldr	r3, [pc, #128]	; (848c4 <UDPHS_Handler+0x2cc>)
   84844:	899b      	ldrh	r3, [r3, #12]
   84846:	42a3      	cmp	r3, r4
   84848:	d04c      	beq.n	848e4 <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   8484a:	4a15      	ldr	r2, [pc, #84]	; (848a0 <UDPHS_Handler+0x2a8>)
   8484c:	f44f 7300 	mov.w	r3, #512	; 0x200
   84850:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   84854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84858:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8485c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84860:	b672      	cpsid	i
   84862:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84866:	2400      	movs	r4, #0
   84868:	480f      	ldr	r0, [pc, #60]	; (848a8 <UDPHS_Handler+0x2b0>)
   8486a:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   8486c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84870:	2b00      	cmp	r3, #0
   84872:	f040 81d2 	bne.w	84c1a <UDPHS_Handler+0x622>
		cpu_irq_enable();
   84876:	2201      	movs	r2, #1
   84878:	7002      	strb	r2, [r0, #0]
   8487a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8487e:	b662      	cpsie	i
   84880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   84884:	4b14      	ldr	r3, [pc, #80]	; (848d8 <UDPHS_Handler+0x2e0>)
   84886:	4798      	blx	r3
				udd_ack_out_received(0);
   84888:	f44f 7200 	mov.w	r2, #512	; 0x200
   8488c:	4b04      	ldr	r3, [pc, #16]	; (848a0 <UDPHS_Handler+0x2a8>)
   8488e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84896:	bf00      	nop
   84898:	00084009 	.word	0x00084009
   8489c:	00084099 	.word	0x00084099
   848a0:	400a4000 	.word	0x400a4000
   848a4:	00081371 	.word	0x00081371
   848a8:	20000986 	.word	0x20000986
   848ac:	00083395 	.word	0x00083395
   848b0:	2000210c 	.word	0x2000210c
   848b4:	200026a3 	.word	0x200026a3
   848b8:	20180000 	.word	0x20180000
   848bc:	20180008 	.word	0x20180008
   848c0:	000833d5 	.word	0x000833d5
   848c4:	200026a4 	.word	0x200026a4
   848c8:	2000210a 	.word	0x2000210a
   848cc:	20002108 	.word	0x20002108
   848d0:	000842c5 	.word	0x000842c5
   848d4:	00084205 	.word	0x00084205
   848d8:	00084259 	.word	0x00084259
   848dc:	000842d5 	.word	0x000842d5
   848e0:	00084271 	.word	0x00084271
		if (!udd_g_ctrlreq.over_under_run) {
   848e4:	4bb0      	ldr	r3, [pc, #704]	; (84ba8 <UDPHS_Handler+0x5b0>)
   848e6:	695b      	ldr	r3, [r3, #20]
   848e8:	b153      	cbz	r3, 84900 <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   848ea:	4798      	blx	r3
   848ec:	b188      	cbz	r0, 84912 <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   848ee:	49af      	ldr	r1, [pc, #700]	; (84bac <UDPHS_Handler+0x5b4>)
   848f0:	4aaf      	ldr	r2, [pc, #700]	; (84bb0 <UDPHS_Handler+0x5b8>)
   848f2:	880b      	ldrh	r3, [r1, #0]
   848f4:	8810      	ldrh	r0, [r2, #0]
   848f6:	4403      	add	r3, r0
   848f8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   848fa:	2300      	movs	r3, #0
   848fc:	8013      	strh	r3, [r2, #0]
   848fe:	e7a4      	b.n	8484a <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   84900:	4bac      	ldr	r3, [pc, #688]	; (84bb4 <UDPHS_Handler+0x5bc>)
   84902:	4798      	blx	r3
			udd_ack_out_received(0);
   84904:	f44f 7200 	mov.w	r2, #512	; 0x200
   84908:	4bab      	ldr	r3, [pc, #684]	; (84bb8 <UDPHS_Handler+0x5c0>)
   8490a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   8490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   84912:	4ba8      	ldr	r3, [pc, #672]	; (84bb4 <UDPHS_Handler+0x5bc>)
   84914:	4798      	blx	r3
			udd_ack_out_received(0);
   84916:	f44f 7200 	mov.w	r2, #512	; 0x200
   8491a:	4ba7      	ldr	r3, [pc, #668]	; (84bb8 <UDPHS_Handler+0x5c0>)
   8491c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   84924:	4ba4      	ldr	r3, [pc, #656]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84926:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8492a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   8492e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84932:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84936:	f040 8170 	bne.w	84c1a <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8493a:	4ba0      	ldr	r3, [pc, #640]	; (84bbc <UDPHS_Handler+0x5c4>)
   8493c:	781b      	ldrb	r3, [r3, #0]
   8493e:	2b03      	cmp	r3, #3
   84940:	f040 816b 	bne.w	84c1a <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   84944:	2220      	movs	r2, #32
   84946:	4b9c      	ldr	r3, [pc, #624]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84948:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   84950:	4b99      	ldr	r3, [pc, #612]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84956:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   8495a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8495e:	f413 7f00 	tst.w	r3, #512	; 0x200
   84962:	f040 815a 	bne.w	84c1a <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84966:	4b95      	ldr	r3, [pc, #596]	; (84bbc <UDPHS_Handler+0x5c4>)
   84968:	781b      	ldrb	r3, [r3, #0]
   8496a:	2b01      	cmp	r3, #1
   8496c:	d008      	beq.n	84980 <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8496e:	2b04      	cmp	r3, #4
   84970:	f040 8153 	bne.w	84c1a <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   84974:	2220      	movs	r2, #32
   84976:	4b90      	ldr	r3, [pc, #576]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84978:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   84980:	4b8f      	ldr	r3, [pc, #572]	; (84bc0 <UDPHS_Handler+0x5c8>)
   84982:	4798      	blx	r3
   84984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   84988:	4b8e      	ldr	r3, [pc, #568]	; (84bc4 <UDPHS_Handler+0x5cc>)
   8498a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   8498e:	68da      	ldr	r2, [r3, #12]
   84990:	f012 0f01 	tst.w	r2, #1
   84994:	f040 8141 	bne.w	84c1a <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   84998:	4987      	ldr	r1, [pc, #540]	; (84bb8 <UDPHS_Handler+0x5c0>)
   8499a:	690a      	ldr	r2, [r1, #16]
   8499c:	ea22 0606 	bic.w	r6, r2, r6
   849a0:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   849a2:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   849a4:	0c1b      	lsrs	r3, r3, #16
   849a6:	d008      	beq.n	849ba <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   849a8:	4a87      	ldr	r2, [pc, #540]	; (84bc8 <UDPHS_Handler+0x5d0>)
   849aa:	006c      	lsls	r4, r5, #1
   849ac:	1965      	adds	r5, r4, r5
   849ae:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   849b2:	68e9      	ldr	r1, [r5, #12]
   849b4:	1acb      	subs	r3, r1, r3
   849b6:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   849b8:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   849ba:	4b84      	ldr	r3, [pc, #528]	; (84bcc <UDPHS_Handler+0x5d4>)
   849bc:	4798      	blx	r3
   849be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   849c2:	0163      	lsls	r3, r4, #5
   849c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   849c8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   849cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   849d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   849d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   849d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   849dc:	4602      	mov	r2, r0
   849de:	2100      	movs	r1, #0
   849e0:	4879      	ldr	r0, [pc, #484]	; (84bc8 <UDPHS_Handler+0x5d0>)
   849e2:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   849e6:	4b7a      	ldr	r3, [pc, #488]	; (84bd0 <UDPHS_Handler+0x5d8>)
   849e8:	4798      	blx	r3
   849ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   849ee:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   849f0:	2b07      	cmp	r3, #7
   849f2:	f000 80fd 	beq.w	84bf0 <UDPHS_Handler+0x5f8>
   849f6:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   849f8:	461c      	mov	r4, r3
   849fa:	1e5d      	subs	r5, r3, #1
   849fc:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   849fe:	690f      	ldr	r7, [r1, #16]
   84a00:	fa0e f605 	lsl.w	r6, lr, r5
   84a04:	4237      	tst	r7, r6
   84a06:	d002      	beq.n	84a0e <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84a08:	694a      	ldr	r2, [r1, #20]
   84a0a:	4216      	tst	r6, r2
   84a0c:	d1bc      	bne.n	84988 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84a0e:	690f      	ldr	r7, [r1, #16]
   84a10:	fa0c f604 	lsl.w	r6, ip, r4
   84a14:	4237      	tst	r7, r6
   84a16:	d0ea      	beq.n	849ee <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84a18:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84a1c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84a20:	f412 6f00 	tst.w	r2, #2048	; 0x800
   84a24:	d006      	beq.n	84a34 <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84a26:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84a2a:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84a2e:	f412 6f00 	tst.w	r2, #2048	; 0x800
   84a32:	d0c6      	beq.n	849c2 <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84a34:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84a38:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84a3c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   84a40:	d0d5      	beq.n	849ee <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   84a42:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84a46:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84a4a:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84a4e:	d1ce      	bne.n	849ee <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84a50:	4b59      	ldr	r3, [pc, #356]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84a52:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   84a56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84a5a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84a5e:	691a      	ldr	r2, [r3, #16]
   84a60:	ea22 0606 	bic.w	r6, r2, r6
   84a64:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84a66:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   84a6a:	4b57      	ldr	r3, [pc, #348]	; (84bc8 <UDPHS_Handler+0x5d0>)
   84a6c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   84a70:	f898 2014 	ldrb.w	r2, [r8, #20]
   84a74:	f36f 0282 	bfc	r2, #2, #1
   84a78:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84a7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   84a80:	f023 0302 	bic.w	r3, r3, #2
   84a84:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84a88:	2320      	movs	r3, #32
   84a8a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   84a8e:	2340      	movs	r3, #64	; 0x40
   84a90:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   84a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   84a98:	2210      	movs	r2, #16
   84a9a:	4b47      	ldr	r3, [pc, #284]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84a9c:	619a      	str	r2, [r3, #24]
   84a9e:	4d4a      	ldr	r5, [pc, #296]	; (84bc8 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84aa0:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   84aa2:	2701      	movs	r7, #1
   84aa4:	4e4a      	ldr	r6, [pc, #296]	; (84bd0 <UDPHS_Handler+0x5d8>)
   84aa6:	3401      	adds	r4, #1
   84aa8:	b2e4      	uxtb	r4, r4
   84aaa:	4622      	mov	r2, r4
   84aac:	4639      	mov	r1, r7
   84aae:	4628      	mov	r0, r5
   84ab0:	47b0      	blx	r6
   84ab2:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84ab4:	2c06      	cmp	r4, #6
   84ab6:	d1f6      	bne.n	84aa6 <UDPHS_Handler+0x4ae>
		udc_reset();
   84ab8:	4b46      	ldr	r3, [pc, #280]	; (84bd4 <UDPHS_Handler+0x5dc>)
   84aba:	4798      	blx	r3
	udd_configure_address(0);
   84abc:	4b3e      	ldr	r3, [pc, #248]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84abe:	681a      	ldr	r2, [r3, #0]
   84ac0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84ac4:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84ac6:	681a      	ldr	r2, [r3, #0]
   84ac8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84acc:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84ace:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84ad2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84ad6:	f022 0203 	bic.w	r2, r2, #3
   84ada:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   84ade:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84ae2:	2201      	movs	r2, #1
   84ae4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ae8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84aec:	b672      	cpsid	i
   84aee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84af2:	2000      	movs	r0, #0
   84af4:	4938      	ldr	r1, [pc, #224]	; (84bd8 <UDPHS_Handler+0x5e0>)
   84af6:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   84af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84afc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84b00:	f44f 7100 	mov.w	r1, #512	; 0x200
   84b04:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84b08:	6919      	ldr	r1, [r3, #16]
   84b0a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   84b0e:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84b10:	b92a      	cbnz	r2, 84b1e <UDPHS_Handler+0x526>
		cpu_irq_enable();
   84b12:	2201      	movs	r2, #1
   84b14:	4b30      	ldr	r3, [pc, #192]	; (84bd8 <UDPHS_Handler+0x5e0>)
   84b16:	701a      	strb	r2, [r3, #0]
   84b18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84b1c:	b662      	cpsie	i
		udd_ctrl_init();
   84b1e:	4b2f      	ldr	r3, [pc, #188]	; (84bdc <UDPHS_Handler+0x5e4>)
   84b20:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84b22:	4b25      	ldr	r3, [pc, #148]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84b24:	691a      	ldr	r2, [r3, #16]
   84b26:	f042 0208 	orr.w	r2, r2, #8
   84b2a:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84b2c:	691a      	ldr	r2, [r3, #16]
   84b2e:	f042 0204 	orr.w	r2, r2, #4
   84b32:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84b34:	691a      	ldr	r2, [r3, #16]
   84b36:	f042 0202 	orr.w	r2, r2, #2
   84b3a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   84b40:	4b1d      	ldr	r3, [pc, #116]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84b42:	2220      	movs	r2, #32
   84b44:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84b46:	691a      	ldr	r2, [r3, #16]
   84b48:	f022 0202 	bic.w	r2, r2, #2
   84b4c:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84b4e:	691a      	ldr	r2, [r3, #16]
   84b50:	f042 0220 	orr.w	r2, r2, #32
   84b54:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84b56:	2202      	movs	r2, #2
   84b58:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   84b5a:	201d      	movs	r0, #29
   84b5c:	4b20      	ldr	r3, [pc, #128]	; (84be0 <UDPHS_Handler+0x5e8>)
   84b5e:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84b60:	4b20      	ldr	r3, [pc, #128]	; (84be4 <UDPHS_Handler+0x5ec>)
   84b62:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84b64:	2000      	movs	r0, #0
   84b66:	4b20      	ldr	r3, [pc, #128]	; (84be8 <UDPHS_Handler+0x5f0>)
   84b68:	4798      	blx	r3
		goto udd_interrupt_end;
   84b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   84b6e:	2001      	movs	r0, #1
   84b70:	4b1d      	ldr	r3, [pc, #116]	; (84be8 <UDPHS_Handler+0x5f0>)
   84b72:	4798      	blx	r3
		udd_ack_suspend();
   84b74:	4b10      	ldr	r3, [pc, #64]	; (84bb8 <UDPHS_Handler+0x5c0>)
   84b76:	2202      	movs	r2, #2
   84b78:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   84b7a:	2220      	movs	r2, #32
   84b7c:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   84b7e:	691a      	ldr	r2, [r3, #16]
   84b80:	f022 0220 	bic.w	r2, r2, #32
   84b84:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84b86:	691a      	ldr	r2, [r3, #16]
   84b88:	f042 0202 	orr.w	r2, r2, #2
   84b8c:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   84b8e:	691a      	ldr	r2, [r3, #16]
   84b90:	f042 0208 	orr.w	r2, r2, #8
   84b94:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84b96:	691a      	ldr	r2, [r3, #16]
   84b98:	f042 0204 	orr.w	r2, r2, #4
   84b9c:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   84b9e:	4b13      	ldr	r3, [pc, #76]	; (84bec <UDPHS_Handler+0x5f4>)
   84ba0:	4798      	blx	r3
		goto udd_interrupt_end;
   84ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ba6:	bf00      	nop
   84ba8:	200026a4 	.word	0x200026a4
   84bac:	2000210a 	.word	0x2000210a
   84bb0:	20002108 	.word	0x20002108
   84bb4:	00084259 	.word	0x00084259
   84bb8:	400a4000 	.word	0x400a4000
   84bbc:	2000210c 	.word	0x2000210c
   84bc0:	00084271 	.word	0x00084271
   84bc4:	400a4300 	.word	0x400a4300
   84bc8:	20002110 	.word	0x20002110
   84bcc:	00084475 	.word	0x00084475
   84bd0:	0008443d 	.word	0x0008443d
   84bd4:	0008334d 	.word	0x0008334d
   84bd8:	20000986 	.word	0x20000986
   84bdc:	00084205 	.word	0x00084205
   84be0:	0008403d 	.word	0x0008403d
   84be4:	00081359 	.word	0x00081359
   84be8:	00084195 	.word	0x00084195
   84bec:	00081365 	.word	0x00081365
	if (Is_udd_reset()) {
   84bf0:	4b0b      	ldr	r3, [pc, #44]	; (84c20 <UDPHS_Handler+0x628>)
   84bf2:	695b      	ldr	r3, [r3, #20]
   84bf4:	f013 0f10 	tst.w	r3, #16
   84bf8:	f47f af4e 	bne.w	84a98 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84bfc:	4b08      	ldr	r3, [pc, #32]	; (84c20 <UDPHS_Handler+0x628>)
   84bfe:	691b      	ldr	r3, [r3, #16]
   84c00:	f013 0f02 	tst.w	r3, #2
   84c04:	d004      	beq.n	84c10 <UDPHS_Handler+0x618>
   84c06:	4b06      	ldr	r3, [pc, #24]	; (84c20 <UDPHS_Handler+0x628>)
   84c08:	695b      	ldr	r3, [r3, #20]
   84c0a:	f013 0f02 	tst.w	r3, #2
   84c0e:	d197      	bne.n	84b40 <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   84c10:	4b03      	ldr	r3, [pc, #12]	; (84c20 <UDPHS_Handler+0x628>)
   84c12:	695b      	ldr	r3, [r3, #20]
   84c14:	f013 0f20 	tst.w	r3, #32
   84c18:	d1a9      	bne.n	84b6e <UDPHS_Handler+0x576>
   84c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84c1e:	bf00      	nop
   84c20:	400a4000 	.word	0x400a4000

00084c24 <udd_attach>:
{
   84c24:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84c2a:	b672      	cpsid	i
   84c2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c30:	2200      	movs	r2, #0
   84c32:	4b1d      	ldr	r3, [pc, #116]	; (84ca8 <udd_attach+0x84>)
   84c34:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   84c36:	2001      	movs	r0, #1
   84c38:	4b1c      	ldr	r3, [pc, #112]	; (84cac <udd_attach+0x88>)
   84c3a:	4798      	blx	r3
	udd_enable_periph_ck();
   84c3c:	201d      	movs	r0, #29
   84c3e:	4b1c      	ldr	r3, [pc, #112]	; (84cb0 <udd_attach+0x8c>)
   84c40:	4798      	blx	r3
	udd_attach_device();
   84c42:	4b1c      	ldr	r3, [pc, #112]	; (84cb4 <udd_attach+0x90>)
   84c44:	681a      	ldr	r2, [r3, #0]
   84c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84c4a:	601a      	str	r2, [r3, #0]
   84c4c:	681a      	ldr	r2, [r3, #0]
   84c4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84c52:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84c54:	691a      	ldr	r2, [r3, #16]
   84c56:	f042 0210 	orr.w	r2, r2, #16
   84c5a:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84c5c:	691a      	ldr	r2, [r3, #16]
   84c5e:	f042 0202 	orr.w	r2, r2, #2
   84c62:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84c64:	691a      	ldr	r2, [r3, #16]
   84c66:	f042 0220 	orr.w	r2, r2, #32
   84c6a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84c6c:	691a      	ldr	r2, [r3, #16]
   84c6e:	f042 0208 	orr.w	r2, r2, #8
   84c72:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84c74:	691a      	ldr	r2, [r3, #16]
   84c76:	f042 0204 	orr.w	r2, r2, #4
   84c7a:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84c7c:	2208      	movs	r2, #8
   84c7e:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84c80:	2204      	movs	r2, #4
   84c82:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84c84:	2210      	movs	r2, #16
   84c86:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84c88:	2202      	movs	r2, #2
   84c8a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84c8c:	2220      	movs	r2, #32
   84c8e:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   84c90:	201d      	movs	r0, #29
   84c92:	4b09      	ldr	r3, [pc, #36]	; (84cb8 <udd_attach+0x94>)
   84c94:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84c96:	b92c      	cbnz	r4, 84ca4 <udd_attach+0x80>
		cpu_irq_enable();
   84c98:	2201      	movs	r2, #1
   84c9a:	4b03      	ldr	r3, [pc, #12]	; (84ca8 <udd_attach+0x84>)
   84c9c:	701a      	strb	r2, [r3, #0]
   84c9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84ca2:	b662      	cpsie	i
   84ca4:	bd10      	pop	{r4, pc}
   84ca6:	bf00      	nop
   84ca8:	20000986 	.word	0x20000986
   84cac:	00084195 	.word	0x00084195
   84cb0:	00084009 	.word	0x00084009
   84cb4:	400a4000 	.word	0x400a4000
   84cb8:	0008403d 	.word	0x0008403d

00084cbc <udd_enable>:
{
   84cbc:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   84cbe:	4b2a      	ldr	r3, [pc, #168]	; (84d68 <udd_enable+0xac>)
   84cc0:	4798      	blx	r3
	udd_enable_periph_ck();
   84cc2:	201d      	movs	r0, #29
   84cc4:	4b29      	ldr	r3, [pc, #164]	; (84d6c <udd_enable+0xb0>)
   84cc6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cc8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84ccc:	b672      	cpsid	i
   84cce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84cd2:	2200      	movs	r2, #0
   84cd4:	4b26      	ldr	r3, [pc, #152]	; (84d70 <udd_enable+0xb4>)
   84cd6:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   84cd8:	4926      	ldr	r1, [pc, #152]	; (84d74 <udd_enable+0xb8>)
   84cda:	680b      	ldr	r3, [r1, #0]
   84cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84ce0:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84ce2:	4b25      	ldr	r3, [pc, #148]	; (84d78 <udd_enable+0xbc>)
   84ce4:	2150      	movs	r1, #80	; 0x50
   84ce6:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84cea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   84cee:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   84cf0:	4822      	ldr	r0, [pc, #136]	; (84d7c <udd_enable+0xc0>)
   84cf2:	0053      	lsls	r3, r2, #1
   84cf4:	1899      	adds	r1, r3, r2
   84cf6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84cfa:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   84cfc:	4413      	add	r3, r2
   84cfe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   84d02:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   84d06:	f36f 0182 	bfc	r1, #2, #1
   84d0a:	7519      	strb	r1, [r3, #20]
   84d0c:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84d0e:	2a06      	cmp	r2, #6
   84d10:	d1ef      	bne.n	84cf2 <udd_enable+0x36>
	udd_high_speed_enable();
   84d12:	4a18      	ldr	r2, [pc, #96]	; (84d74 <udd_enable+0xb8>)
   84d14:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84d18:	f023 0303 	bic.w	r3, r3, #3
   84d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84d20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84d24:	4b16      	ldr	r3, [pc, #88]	; (84d80 <udd_enable+0xc4>)
   84d26:	4798      	blx	r3
	udd_b_idle = false;
   84d28:	2200      	movs	r2, #0
   84d2a:	4b16      	ldr	r3, [pc, #88]	; (84d84 <udd_enable+0xc8>)
   84d2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d2e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84d32:	b672      	cpsid	i
   84d34:	f3bf 8f5f 	dmb	sy
   84d38:	490d      	ldr	r1, [pc, #52]	; (84d70 <udd_enable+0xb4>)
   84d3a:	700a      	strb	r2, [r1, #0]
   84d3c:	4912      	ldr	r1, [pc, #72]	; (84d88 <udd_enable+0xcc>)
   84d3e:	78ca      	ldrb	r2, [r1, #3]
   84d40:	3201      	adds	r2, #1
   84d42:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84d44:	b92b      	cbnz	r3, 84d52 <udd_enable+0x96>
		cpu_irq_enable();
   84d46:	2201      	movs	r2, #1
   84d48:	4b09      	ldr	r3, [pc, #36]	; (84d70 <udd_enable+0xb4>)
   84d4a:	701a      	strb	r2, [r3, #0]
   84d4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d50:	b662      	cpsie	i
	udd_attach();
   84d52:	4b0e      	ldr	r3, [pc, #56]	; (84d8c <udd_enable+0xd0>)
   84d54:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84d56:	b92c      	cbnz	r4, 84d64 <udd_enable+0xa8>
		cpu_irq_enable();
   84d58:	2201      	movs	r2, #1
   84d5a:	4b05      	ldr	r3, [pc, #20]	; (84d70 <udd_enable+0xb4>)
   84d5c:	701a      	strb	r2, [r3, #0]
   84d5e:	f3bf 8f5f 	dmb	sy
   84d62:	b662      	cpsie	i
   84d64:	bd10      	pop	{r4, pc}
   84d66:	bf00      	nop
   84d68:	0008302d 	.word	0x0008302d
   84d6c:	00084009 	.word	0x00084009
   84d70:	20000986 	.word	0x20000986
   84d74:	400a4000 	.word	0x400a4000
   84d78:	e000e100 	.word	0xe000e100
   84d7c:	20002110 	.word	0x20002110
   84d80:	00084085 	.word	0x00084085
   84d84:	20002106 	.word	0x20002106
   84d88:	20002690 	.word	0x20002690
   84d8c:	00084c25 	.word	0x00084c25

00084d90 <udd_detach>:
{
   84d90:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   84d92:	201d      	movs	r0, #29
   84d94:	4b08      	ldr	r3, [pc, #32]	; (84db8 <udd_detach+0x28>)
   84d96:	4798      	blx	r3
	udd_detach_device();
   84d98:	4b08      	ldr	r3, [pc, #32]	; (84dbc <udd_detach+0x2c>)
   84d9a:	681a      	ldr	r2, [r3, #0]
   84d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84da0:	601a      	str	r2, [r3, #0]
   84da2:	681a      	ldr	r2, [r3, #0]
   84da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84da8:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   84daa:	201d      	movs	r0, #29
   84dac:	4b04      	ldr	r3, [pc, #16]	; (84dc0 <udd_detach+0x30>)
   84dae:	4798      	blx	r3
	udd_sleep_mode(false);
   84db0:	2000      	movs	r0, #0
   84db2:	4b04      	ldr	r3, [pc, #16]	; (84dc4 <udd_detach+0x34>)
   84db4:	4798      	blx	r3
   84db6:	bd08      	pop	{r3, pc}
   84db8:	00084009 	.word	0x00084009
   84dbc:	400a4000 	.word	0x400a4000
   84dc0:	0008403d 	.word	0x0008403d
   84dc4:	00084195 	.word	0x00084195

00084dc8 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84dc8:	4b02      	ldr	r3, [pc, #8]	; (84dd4 <udd_is_high_speed+0xc>)
   84dca:	6958      	ldr	r0, [r3, #20]
}
   84dcc:	f000 0001 	and.w	r0, r0, #1
   84dd0:	4770      	bx	lr
   84dd2:	bf00      	nop
   84dd4:	400a4000 	.word	0x400a4000

00084dd8 <udd_set_address>:
	udd_disable_address();
   84dd8:	4b08      	ldr	r3, [pc, #32]	; (84dfc <udd_set_address+0x24>)
   84dda:	681a      	ldr	r2, [r3, #0]
   84ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84de0:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84de2:	681a      	ldr	r2, [r3, #0]
   84de4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84de8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84dec:	4302      	orrs	r2, r0
   84dee:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84df0:	681a      	ldr	r2, [r3, #0]
   84df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84df6:	601a      	str	r2, [r3, #0]
   84df8:	4770      	bx	lr
   84dfa:	bf00      	nop
   84dfc:	400a4000 	.word	0x400a4000

00084e00 <udd_getaddress>:
	return udd_get_configured_address();
   84e00:	4b02      	ldr	r3, [pc, #8]	; (84e0c <udd_getaddress+0xc>)
   84e02:	6818      	ldr	r0, [r3, #0]
}
   84e04:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84e08:	4770      	bx	lr
   84e0a:	bf00      	nop
   84e0c:	400a4000 	.word	0x400a4000

00084e10 <udd_get_frame_number>:
	return udd_frame_number();
   84e10:	4b02      	ldr	r3, [pc, #8]	; (84e1c <udd_get_frame_number+0xc>)
   84e12:	6858      	ldr	r0, [r3, #4]
}
   84e14:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84e18:	4770      	bx	lr
   84e1a:	bf00      	nop
   84e1c:	400a4000 	.word	0x400a4000

00084e20 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84e20:	4b02      	ldr	r3, [pc, #8]	; (84e2c <udd_get_micro_frame_number+0xc>)
   84e22:	6858      	ldr	r0, [r3, #4]
}
   84e24:	f000 0007 	and.w	r0, r0, #7
   84e28:	4770      	bx	lr
   84e2a:	bf00      	nop
   84e2c:	400a4000 	.word	0x400a4000

00084e30 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84e30:	4b01      	ldr	r3, [pc, #4]	; (84e38 <udd_set_setup_payload+0x8>)
   84e32:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84e34:	8199      	strh	r1, [r3, #12]
   84e36:	4770      	bx	lr
   84e38:	200026a4 	.word	0x200026a4

00084e3c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84e3c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84e40:	2a06      	cmp	r2, #6
   84e42:	d900      	bls.n	84e46 <udd_ep_free+0xa>
   84e44:	4770      	bx	lr
{
   84e46:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   84e48:	0153      	lsls	r3, r2, #5
   84e4a:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   84e4e:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84e52:	2101      	movs	r1, #1
   84e54:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   84e58:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   84e5a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   84e5e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   84e62:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84e66:	1e56      	subs	r6, r2, #1
   84e68:	4c07      	ldr	r4, [pc, #28]	; (84e88 <udd_ep_free+0x4c>)
   84e6a:	fa06 f501 	lsl.w	r5, r6, r1
   84e6e:	19a8      	adds	r0, r5, r6
   84e70:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84e74:	4b05      	ldr	r3, [pc, #20]	; (84e8c <udd_ep_free+0x50>)
   84e76:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84e78:	4435      	add	r5, r6
   84e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84e7e:	7d23      	ldrb	r3, [r4, #20]
   84e80:	f36f 0382 	bfc	r3, #2, #1
   84e84:	7523      	strb	r3, [r4, #20]
   84e86:	bd70      	pop	{r4, r5, r6, pc}
   84e88:	20002110 	.word	0x20002110
   84e8c:	0008443d 	.word	0x0008443d

00084e90 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84e90:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84e94:	0143      	lsls	r3, r0, #5
   84e96:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84e9a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84e9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84ea2:	f013 0f20 	tst.w	r3, #32
   84ea6:	d109      	bne.n	84ebc <udd_ep_is_halted+0x2c>
   84ea8:	3801      	subs	r0, #1
   84eaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84eae:	4b04      	ldr	r3, [pc, #16]	; (84ec0 <udd_ep_is_halted+0x30>)
   84eb0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84eb4:	7d00      	ldrb	r0, [r0, #20]
   84eb6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   84eba:	4770      	bx	lr
   84ebc:	2001      	movs	r0, #1
}
   84ebe:	4770      	bx	lr
   84ec0:	20002110 	.word	0x20002110

00084ec4 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84ec4:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84ec8:	2b06      	cmp	r3, #6
   84eca:	d852      	bhi.n	84f72 <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84ecc:	015a      	lsls	r2, r3, #5
   84ece:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84ed2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84ed6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84eda:	f012 0f20 	tst.w	r2, #32
   84ede:	d14a      	bne.n	84f76 <udd_ep_set_halt+0xb2>
{
   84ee0:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84ee2:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84ee4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84ee8:	4a26      	ldr	r2, [pc, #152]	; (84f84 <udd_ep_set_halt+0xc0>)
   84eea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   84eee:	7d12      	ldrb	r2, [r2, #20]
   84ef0:	f012 0f04 	tst.w	r2, #4
   84ef4:	d141      	bne.n	84f7a <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   84ef6:	f012 0f01 	tst.w	r2, #1
   84efa:	d141      	bne.n	84f80 <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84efc:	f010 0f80 	tst.w	r0, #128	; 0x80
   84f00:	d113      	bne.n	84f2a <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84f02:	015b      	lsls	r3, r3, #5
   84f04:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f08:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f0c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84f10:	f022 0202 	bic.w	r2, r2, #2
   84f14:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84f1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84f20:	2220      	movs	r2, #32
   84f22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   84f26:	2001      	movs	r0, #1
   84f28:	e028      	b.n	84f7c <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84f2a:	015a      	lsls	r2, r3, #5
   84f2c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84f30:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84f34:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84f38:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84f3c:	d0e1      	beq.n	84f02 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84f3e:	4a11      	ldr	r2, [pc, #68]	; (84f84 <udd_ep_set_halt+0xc0>)
   84f40:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   84f44:	f101 0210 	add.w	r2, r1, #16
   84f48:	7d09      	ldrb	r1, [r1, #20]
   84f4a:	f041 0104 	orr.w	r1, r1, #4
   84f4e:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   84f50:	490d      	ldr	r1, [pc, #52]	; (84f88 <udd_ep_set_halt+0xc4>)
   84f52:	f103 0208 	add.w	r2, r3, #8
   84f56:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   84f5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84f5e:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   84f60:	6908      	ldr	r0, [r1, #16]
   84f62:	f44f 7280 	mov.w	r2, #256	; 0x100
   84f66:	fa02 f303 	lsl.w	r3, r2, r3
   84f6a:	4303      	orrs	r3, r0
   84f6c:	610b      	str	r3, [r1, #16]
			return true;
   84f6e:	2001      	movs	r0, #1
   84f70:	e004      	b.n	84f7c <udd_ep_set_halt+0xb8>
		return false;
   84f72:	2000      	movs	r0, #0
   84f74:	4770      	bx	lr
		return true; // Already STALL
   84f76:	2001      	movs	r0, #1
   84f78:	4770      	bx	lr
   84f7a:	2001      	movs	r0, #1
}
   84f7c:	bc10      	pop	{r4}
   84f7e:	4770      	bx	lr
		return false; // Job on going, stall impossible
   84f80:	2000      	movs	r0, #0
   84f82:	e7fb      	b.n	84f7c <udd_ep_set_halt+0xb8>
   84f84:	20002110 	.word	0x20002110
   84f88:	400a4000 	.word	0x400a4000

00084f8c <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   84f8c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   84f90:	2806      	cmp	r0, #6
   84f92:	d864      	bhi.n	8505e <udd_ep_clear_halt+0xd2>
{
   84f94:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   84f96:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   84f98:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   84f9c:	4b37      	ldr	r3, [pc, #220]	; (8507c <udd_ep_clear_halt+0xf0>)
   84f9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   84fa2:	7d1b      	ldrb	r3, [r3, #20]
   84fa4:	f013 0f04 	tst.w	r3, #4
   84fa8:	d05b      	beq.n	85062 <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   84faa:	460b      	mov	r3, r1
   84fac:	4933      	ldr	r1, [pc, #204]	; (8507c <udd_ep_clear_halt+0xf0>)
   84fae:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84fb2:	7d19      	ldrb	r1, [r3, #20]
   84fb4:	f36f 0182 	bfc	r1, #2, #1
   84fb8:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   84fba:	4b31      	ldr	r3, [pc, #196]	; (85080 <udd_ep_clear_halt+0xf4>)
   84fbc:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   84fc0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   84fc4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   84fc8:	6919      	ldr	r1, [r3, #16]
   84fca:	f44f 7480 	mov.w	r4, #256	; 0x100
   84fce:	4084      	lsls	r4, r0
   84fd0:	ea21 0104 	bic.w	r1, r1, r4
   84fd4:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   84fd6:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   84fda:	f013 0f20 	tst.w	r3, #32
   84fde:	d024      	beq.n	8502a <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   84fe0:	0143      	lsls	r3, r0, #5
   84fe2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84fe6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84fea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84fee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84ff2:	d00b      	beq.n	8500c <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   84ff4:	0143      	lsls	r3, r0, #5
   84ff6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ffa:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85002:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   85006:	2140      	movs	r1, #64	; 0x40
   85008:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   8500c:	0143      	lsls	r3, r0, #5
   8500e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85012:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85016:	2120      	movs	r1, #32
   85018:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   8501c:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   8501e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   85022:	f043 0302 	orr.w	r3, r3, #2
   85026:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   8502a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8502e:	4913      	ldr	r1, [pc, #76]	; (8507c <udd_ep_clear_halt+0xf0>)
   85030:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85034:	7d1b      	ldrb	r3, [r3, #20]
   85036:	f013 0f01 	tst.w	r3, #1
   8503a:	d101      	bne.n	85040 <udd_ep_clear_halt+0xb4>
	return true;
   8503c:	2001      	movs	r0, #1
   8503e:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   85040:	4608      	mov	r0, r1
   85042:	0051      	lsls	r1, r2, #1
   85044:	188b      	adds	r3, r1, r2
   85046:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   8504a:	7d1c      	ldrb	r4, [r3, #20]
   8504c:	f36f 0400 	bfc	r4, #0, #1
   85050:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   85052:	440a      	add	r2, r1
   85054:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   85058:	4798      	blx	r3
	return true;
   8505a:	2001      	movs	r0, #1
   8505c:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   8505e:	2000      	movs	r0, #0
   85060:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   85062:	0143      	lsls	r3, r0, #5
   85064:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85068:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8506c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85070:	f013 0f20 	tst.w	r3, #32
   85074:	d1b4      	bne.n	84fe0 <udd_ep_clear_halt+0x54>
	return true;
   85076:	2001      	movs	r0, #1
}
   85078:	bd38      	pop	{r3, r4, r5, pc}
   8507a:	bf00      	nop
   8507c:	20002110 	.word	0x20002110
   85080:	400a4000 	.word	0x400a4000

00085084 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   85084:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   85088:	2806      	cmp	r0, #6
   8508a:	d861      	bhi.n	85150 <udd_ep_run+0xcc>
{
   8508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8508e:	0144      	lsls	r4, r0, #5
   85090:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85094:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85098:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   8509c:	f014 0f01 	tst.w	r4, #1
   850a0:	d058      	beq.n	85154 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   850a2:	0144      	lsls	r4, r0, #5
   850a4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   850a8:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   850ac:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   850b0:	f014 0f20 	tst.w	r4, #32
   850b4:	d150      	bne.n	85158 <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   850b6:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   850b8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   850bc:	4d29      	ldr	r5, [pc, #164]	; (85164 <udd_ep_run+0xe0>)
   850be:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   850c2:	7d2d      	ldrb	r5, [r5, #20]
   850c4:	f015 0f04 	tst.w	r5, #4
   850c8:	d148      	bne.n	8515c <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   850ca:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   850ce:	b672      	cpsid	i
   850d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   850d4:	f04f 0e00 	mov.w	lr, #0
   850d8:	4e23      	ldr	r6, [pc, #140]	; (85168 <udd_ep_run+0xe4>)
   850da:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   850de:	f015 0f01 	tst.w	r5, #1
   850e2:	d008      	beq.n	850f6 <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   850e4:	2f00      	cmp	r7, #0
   850e6:	d13b      	bne.n	85160 <udd_ep_run+0xdc>
		cpu_irq_enable();
   850e8:	2201      	movs	r2, #1
   850ea:	7032      	strb	r2, [r6, #0]
   850ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   850f0:	b662      	cpsie	i
		return false; // Job already on going
   850f2:	4670      	mov	r0, lr
   850f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   850f6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   850fa:	4e1a      	ldr	r6, [pc, #104]	; (85164 <udd_ep_run+0xe0>)
   850fc:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85100:	7d2e      	ldrb	r6, [r5, #20]
   85102:	f046 0601 	orr.w	r6, r6, #1
   85106:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85108:	b92f      	cbnz	r7, 85116 <udd_ep_run+0x92>
		cpu_irq_enable();
   8510a:	2601      	movs	r6, #1
   8510c:	4d16      	ldr	r5, [pc, #88]	; (85168 <udd_ep_run+0xe4>)
   8510e:	702e      	strb	r6, [r5, #0]
   85110:	f3bf 8f5f 	dmb	sy
   85114:	b662      	cpsie	i
	ptr_job->buf = buf;
   85116:	4f13      	ldr	r7, [pc, #76]	; (85164 <udd_ep_run+0xe0>)
   85118:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8511c:	00ed      	lsls	r5, r5, #3
   8511e:	197e      	adds	r6, r7, r5
   85120:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   85122:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   85124:	2200      	movs	r2, #0
   85126:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   85128:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   8512a:	9a06      	ldr	r2, [sp, #24]
   8512c:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8512e:	b911      	cbnz	r1, 85136 <udd_ep_run+0xb2>
   85130:	fab3 f183 	clz	r1, r3
   85134:	0949      	lsrs	r1, r1, #5
   85136:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   8513a:	4b0a      	ldr	r3, [pc, #40]	; (85164 <udd_ep_run+0xe0>)
   8513c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   85140:	7d23      	ldrb	r3, [r4, #20]
   85142:	f361 0341 	bfi	r3, r1, #1, #1
   85146:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   85148:	4b08      	ldr	r3, [pc, #32]	; (8516c <udd_ep_run+0xe8>)
   8514a:	4798      	blx	r3
	return true;
   8514c:	2001      	movs	r0, #1
   8514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   85150:	2000      	movs	r0, #0
   85152:	4770      	bx	lr
		return false; // Endpoint is halted
   85154:	2000      	movs	r0, #0
   85156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85158:	2000      	movs	r0, #0
   8515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8515c:	2000      	movs	r0, #0
   8515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   85160:	2000      	movs	r0, #0
}
   85162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85164:	20002110 	.word	0x20002110
   85168:	20000986 	.word	0x20000986
   8516c:	00084475 	.word	0x00084475

00085170 <udd_ep_alloc>:
{
   85170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85174:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85176:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   8517a:	2e06      	cmp	r6, #6
   8517c:	f200 812a 	bhi.w	853d4 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   85180:	0173      	lsls	r3, r6, #5
   85182:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85186:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8518a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   8518e:	f013 0301 	ands.w	r3, r3, #1
   85192:	f040 8124 	bne.w	853de <udd_ep_alloc+0x26e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85196:	f001 0403 	and.w	r4, r1, #3
   8519a:	2c02      	cmp	r4, #2
   8519c:	d03f      	beq.n	8521e <udd_ep_alloc+0xae>
   8519e:	2c03      	cmp	r4, #3
   851a0:	d04b      	beq.n	8523a <udd_ep_alloc+0xca>
   851a2:	2c01      	cmp	r4, #1
   851a4:	d001      	beq.n	851aa <udd_ep_alloc+0x3a>
		return false;
   851a6:	2300      	movs	r3, #0
   851a8:	e115      	b.n	853d6 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   851aa:	b136      	cbz	r6, 851ba <udd_ep_alloc+0x4a>
   851ac:	1ef7      	subs	r7, r6, #3
   851ae:	b2ff      	uxtb	r7, r7
   851b0:	2f01      	cmp	r7, #1
   851b2:	bf94      	ite	ls
   851b4:	2700      	movls	r7, #0
   851b6:	2701      	movhi	r7, #1
   851b8:	e000      	b.n	851bc <udd_ep_alloc+0x4c>
   851ba:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   851bc:	f04f 0c02 	mov.w	ip, #2
	if (b_iso_hbw) {
   851c0:	b3a7      	cbz	r7, 8522c <udd_ep_alloc+0xbc>
		switch(MaxEndpointSize & (0x3u << 11)) {
   851c2:	f402 54c0 	and.w	r4, r2, #6144	; 0x1800
   851c6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   851ca:	d03a      	beq.n	85242 <udd_ep_alloc+0xd2>
			nb_tran = 1;
   851cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   851d0:	bf0c      	ite	eq
   851d2:	f04f 0e03 	moveq.w	lr, #3
   851d6:	f04f 0e01 	movne.w	lr, #1
		MaxEndpointSize &= ~(0x3u << 11);
   851da:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   851de:	b292      	uxth	r2, r2
   851e0:	0174      	lsls	r4, r6, #5
   851e2:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   851e6:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   851ea:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   851ee:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
   851f2:	f025 0503 	bic.w	r5, r5, #3
   851f6:	0109      	lsls	r1, r1, #4
   851f8:	f001 0130 	and.w	r1, r1, #48	; 0x30
   851fc:	b240      	sxtb	r0, r0
   851fe:	2800      	cmp	r0, #0
   85200:	bfac      	ite	ge
   85202:	4618      	movge	r0, r3
   85204:	2008      	movlt	r0, #8
   85206:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   8520a:	fa1f f888 	uxth.w	r8, r8
   8520e:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   85212:	d319      	bcc.n	85248 <udd_ep_alloc+0xd8>
   85214:	2a08      	cmp	r2, #8
   85216:	d932      	bls.n	8527e <udd_ep_alloc+0x10e>
   85218:	0052      	lsls	r2, r2, #1
   8521a:	3a01      	subs	r2, #1
   8521c:	e016      	b.n	8524c <udd_ep_alloc+0xdc>
	bool b_iso_hbw = false;
   8521e:	2700      	movs	r7, #0
   85220:	2e03      	cmp	r6, #3
   85222:	bf34      	ite	cc
   85224:	f04f 0c02 	movcc.w	ip, #2
   85228:	f04f 0c01 	movcs.w	ip, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8522c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85230:	f040 80d7 	bne.w	853e2 <udd_ep_alloc+0x272>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   85234:	f04f 0e00 	mov.w	lr, #0
   85238:	e7d2      	b.n	851e0 <udd_ep_alloc+0x70>
	bool b_iso_hbw = false;
   8523a:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8523c:	f04f 0c01 	mov.w	ip, #1
   85240:	e7be      	b.n	851c0 <udd_ep_alloc+0x50>
			nb_tran = 2;
   85242:	f04f 0e02 	mov.w	lr, #2
   85246:	e7c8      	b.n	851da <udd_ep_alloc+0x6a>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85248:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8524c:	fab2 f282 	clz	r2, r2
   85250:	ea41 1c8c 	orr.w	ip, r1, ip, lsl #6
   85254:	ea4c 0c00 	orr.w	ip, ip, r0
   85258:	f1c2 021c 	rsb	r2, r2, #28
   8525c:	ea4c 0202 	orr.w	r2, ip, r2
   85260:	b10f      	cbz	r7, 85266 <udd_ep_alloc+0xf6>
   85262:	ea4f 230e 	mov.w	r3, lr, lsl #8
   85266:	4313      	orrs	r3, r2
   85268:	f3c3 0309 	ubfx	r3, r3, #0, #10
   8526c:	432b      	orrs	r3, r5
   8526e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   85272:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   85276:	2b00      	cmp	r3, #0
   85278:	db03      	blt.n	85282 <udd_ep_alloc+0x112>
		return false;
   8527a:	2300      	movs	r3, #0
   8527c:	e0ab      	b.n	853d6 <udd_ep_alloc+0x266>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8527e:	220f      	movs	r2, #15
   85280:	e7e4      	b.n	8524c <udd_ep_alloc+0xdc>
	udd_enable_endpoint(ep);
   85282:	2301      	movs	r3, #1
   85284:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   85288:	2306      	movs	r3, #6
   8528a:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   8528c:	4857      	ldr	r0, [pc, #348]	; (853ec <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   8528e:	2401      	movs	r4, #1
   85290:	e003      	b.n	8529a <udd_ep_alloc+0x12a>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85292:	3b01      	subs	r3, #1
   85294:	b2db      	uxtb	r3, r3
   85296:	429e      	cmp	r6, r3
   85298:	d81e      	bhi.n	852d8 <udd_ep_alloc+0x168>
		if (Is_udd_endpoint_enabled(i)) {
   8529a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8529e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   852a2:	f012 0f01 	tst.w	r2, #1
   852a6:	d0f4      	beq.n	85292 <udd_ep_alloc+0x122>
   852a8:	015a      	lsls	r2, r3, #5
   852aa:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   852ae:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   852b2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   852b6:	f3c1 1181 	ubfx	r1, r1, #6, #2
   852ba:	005d      	lsls	r5, r3, #1
   852bc:	40a9      	lsls	r1, r5
   852be:	430f      	orrs	r7, r1
   852c0:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   852c2:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   852c6:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   852ca:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   852ce:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   852d2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   852d6:	e7dc      	b.n	85292 <udd_ep_alloc+0x122>
   852d8:	0075      	lsls	r5, r6, #1
   852da:	4634      	mov	r4, r6
   852dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   852e0:	4b43      	ldr	r3, [pc, #268]	; (853f0 <udd_ep_alloc+0x280>)
   852e2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   852e6:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   852e8:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   852ec:	f8df a104 	ldr.w	sl, [pc, #260]	; 853f4 <udd_ep_alloc+0x284>
   852f0:	e021      	b.n	85336 <udd_ep_alloc+0x1c6>
			if (NULL == ptr_job->call_trans) {
   852f2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   852f6:	4a3e      	ldr	r2, [pc, #248]	; (853f0 <udd_ep_alloc+0x280>)
   852f8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   852fc:	2c00      	cmp	r4, #0
   852fe:	d072      	beq.n	853e6 <udd_ep_alloc+0x276>
			if (Is_udd_endpoint_in(i)) {
   85300:	f10e 0308 	add.w	r3, lr, #8
   85304:	015b      	lsls	r3, r3, #5
   85306:	4a39      	ldr	r2, [pc, #228]	; (853ec <udd_ep_alloc+0x27c>)
   85308:	58d3      	ldr	r3, [r2, r3]
   8530a:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   8530e:	bf18      	it	ne
   85310:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85314:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   85318:	4b35      	ldr	r3, [pc, #212]	; (853f0 <udd_ep_alloc+0x280>)
   8531a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8531e:	4602      	mov	r2, r0
   85320:	68c9      	ldr	r1, [r1, #12]
   85322:	2001      	movs	r0, #1
   85324:	47a0      	blx	r4
			return false;
   85326:	2300      	movs	r3, #0
   85328:	e055      	b.n	853d6 <udd_ep_alloc+0x266>
   8532a:	3502      	adds	r5, #2
   8532c:	3401      	adds	r4, #1
   8532e:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85330:	b2e3      	uxtb	r3, r4
   85332:	2b06      	cmp	r3, #6
   85334:	d84c      	bhi.n	853d0 <udd_ep_alloc+0x260>
   85336:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   85338:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8533a:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   8533e:	f012 0203 	ands.w	r2, r2, #3
   85342:	d0f2      	beq.n	8532a <udd_ep_alloc+0x1ba>
   85344:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   85346:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   8534a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   8534e:	f893 b014 	ldrb.w	fp, [r3, #20]
   85352:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   85356:	f36f 0b00 	bfc	fp, #0, #1
   8535a:	f883 b014 	strb.w	fp, [r3, #20]
   8535e:	0163      	lsls	r3, r4, #5
   85360:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85364:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   85368:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   8536c:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   85370:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   85374:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   85378:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   8537c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85380:	2a00      	cmp	r2, #0
   85382:	dab6      	bge.n	852f2 <udd_ep_alloc+0x182>
		udd_enable_endpoint_bank_autoswitch(i);
   85384:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   85388:	f042 0202 	orr.w	r2, r2, #2
   8538c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   85390:	f1bc 0f00 	cmp.w	ip, #0
   85394:	d0c9      	beq.n	8532a <udd_ep_alloc+0x1ba>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85396:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   8539a:	f856 2c08 	ldr.w	r2, [r6, #-8]
   8539e:	1a9a      	subs	r2, r3, r2
   853a0:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   853a4:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   853a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   853ac:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   853b0:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   853b4:	f856 1c18 	ldr.w	r1, [r6, #-24]
   853b8:	9100      	str	r1, [sp, #0]
   853ba:	1a9b      	subs	r3, r3, r2
   853bc:	f856 1c14 	ldr.w	r1, [r6, #-20]
   853c0:	440a      	add	r2, r1
   853c2:	f3ce 0140 	ubfx	r1, lr, #1, #1
   853c6:	47d0      	blx	sl
			if (!b_restart) {
   853c8:	4603      	mov	r3, r0
   853ca:	2800      	cmp	r0, #0
   853cc:	d1ad      	bne.n	8532a <udd_ep_alloc+0x1ba>
   853ce:	e002      	b.n	853d6 <udd_ep_alloc+0x266>
	return true;
   853d0:	2301      	movs	r3, #1
   853d2:	e000      	b.n	853d6 <udd_ep_alloc+0x266>
		return false;
   853d4:	2300      	movs	r3, #0
}
   853d6:	4618      	mov	r0, r3
   853d8:	b003      	add	sp, #12
   853da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   853de:	2300      	movs	r3, #0
   853e0:	e7f9      	b.n	853d6 <udd_ep_alloc+0x266>
		return false;
   853e2:	2300      	movs	r3, #0
   853e4:	e7f7      	b.n	853d6 <udd_ep_alloc+0x266>
				return false;
   853e6:	2300      	movs	r3, #0
   853e8:	e7f5      	b.n	853d6 <udd_ep_alloc+0x266>
   853ea:	bf00      	nop
   853ec:	400a4000 	.word	0x400a4000
   853f0:	20002110 	.word	0x20002110
   853f4:	00085085 	.word	0x00085085

000853f8 <udd_ep_abort>:
{
   853f8:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   853fa:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   853fe:	4b13      	ldr	r3, [pc, #76]	; (8544c <udd_ep_abort+0x54>)
   85400:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85404:	2100      	movs	r1, #0
   85406:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85408:	f010 0f80 	tst.w	r0, #128	; 0x80
   8540c:	d116      	bne.n	8543c <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8540e:	1e50      	subs	r0, r2, #1
   85410:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85414:	2101      	movs	r1, #1
   85416:	4b0e      	ldr	r3, [pc, #56]	; (85450 <udd_ep_abort+0x58>)
   85418:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   8541c:	4b0d      	ldr	r3, [pc, #52]	; (85454 <udd_ep_abort+0x5c>)
   8541e:	4798      	blx	r3
   85420:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   85422:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   85426:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   8542a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8542e:	d1fa      	bne.n	85426 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   85430:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   85434:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85438:	d1f3      	bne.n	85422 <udd_ep_abort+0x2a>
   8543a:	e7e8      	b.n	8540e <udd_ep_abort+0x16>
   8543c:	4906      	ldr	r1, [pc, #24]	; (85458 <udd_ep_abort+0x60>)
   8543e:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   85442:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   85446:	4601      	mov	r1, r0
   85448:	e7f2      	b.n	85430 <udd_ep_abort+0x38>
   8544a:	bf00      	nop
   8544c:	400a4300 	.word	0x400a4300
   85450:	20002110 	.word	0x20002110
   85454:	0008443d 	.word	0x0008443d
   85458:	400a4000 	.word	0x400a4000

0008545c <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   8545c:	4a07      	ldr	r2, [pc, #28]	; (8547c <udd_test_mode_j+0x20>)
   8545e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85462:	f023 0303 	bic.w	r3, r3, #3
   85466:	f043 0302 	orr.w	r3, r3, #2
   8546a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8546e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85472:	f043 0304 	orr.w	r3, r3, #4
   85476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   8547a:	4770      	bx	lr
   8547c:	400a4000 	.word	0x400a4000

00085480 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   85480:	4a07      	ldr	r2, [pc, #28]	; (854a0 <udd_test_mode_k+0x20>)
   85482:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85486:	f023 0303 	bic.w	r3, r3, #3
   8548a:	f043 0302 	orr.w	r3, r3, #2
   8548e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85492:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85496:	f043 0308 	orr.w	r3, r3, #8
   8549a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   8549e:	4770      	bx	lr
   854a0:	400a4000 	.word	0x400a4000

000854a4 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   854a4:	4a04      	ldr	r2, [pc, #16]	; (854b8 <udd_test_mode_se0_nak+0x14>)
   854a6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   854aa:	f023 0303 	bic.w	r3, r3, #3
   854ae:	f043 0302 	orr.w	r3, r3, #2
   854b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   854b6:	4770      	bx	lr
   854b8:	400a4000 	.word	0x400a4000

000854bc <udd_test_mode_packet>:
{
   854bc:	b430      	push	{r4, r5}
   854be:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   854c0:	466c      	mov	r4, sp
   854c2:	4d20      	ldr	r5, [pc, #128]	; (85544 <udd_test_mode_packet+0x88>)
   854c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   854d4:	f844 0b04 	str.w	r0, [r4], #4
   854d8:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   854da:	4b1b      	ldr	r3, [pc, #108]	; (85548 <udd_test_mode_packet+0x8c>)
   854dc:	2101      	movs	r1, #1
   854de:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   854e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   854e6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   854ea:	f022 0203 	bic.w	r2, r2, #3
   854ee:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   854f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   854f6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   854fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   854fe:	f022 0203 	bic.w	r2, r2, #3
   85502:	f042 0202 	orr.w	r2, r2, #2
   85506:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   8550a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8550e:	f042 0210 	orr.w	r2, r2, #16
   85512:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   85516:	4a0d      	ldr	r2, [pc, #52]	; (8554c <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   85518:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   8551a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   8551e:	f813 1b01 	ldrb.w	r1, [r3], #1
   85522:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   85526:	4283      	cmp	r3, r0
   85528:	d1f9      	bne.n	8551e <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   8552a:	4b07      	ldr	r3, [pc, #28]	; (85548 <udd_test_mode_packet+0x8c>)
   8552c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85530:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85534:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85538:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8553c:	b00e      	add	sp, #56	; 0x38
   8553e:	bc30      	pop	{r4, r5}
   85540:	4770      	bx	lr
   85542:	bf00      	nop
   85544:	0008c0ec 	.word	0x0008c0ec
   85548:	400a4000 	.word	0x400a4000
   8554c:	2017ffff 	.word	0x2017ffff

00085550 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   85550:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   85552:	010b      	lsls	r3, r1, #4
   85554:	4293      	cmp	r3, r2
   85556:	d914      	bls.n	85582 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85558:	00c9      	lsls	r1, r1, #3
   8555a:	084b      	lsrs	r3, r1, #1
   8555c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85560:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   85564:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85566:	1e5c      	subs	r4, r3, #1
   85568:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8556c:	428c      	cmp	r4, r1
   8556e:	d901      	bls.n	85574 <usart_set_async_baudrate+0x24>
		return 1;
   85570:	2001      	movs	r0, #1
   85572:	e017      	b.n	855a4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   85574:	6841      	ldr	r1, [r0, #4]
   85576:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8557a:	6041      	str	r1, [r0, #4]
   8557c:	e00c      	b.n	85598 <usart_set_async_baudrate+0x48>
		return 1;
   8557e:	2001      	movs	r0, #1
   85580:	e010      	b.n	855a4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85582:	0859      	lsrs	r1, r3, #1
   85584:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85588:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   8558c:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8558e:	1e5c      	subs	r4, r3, #1
   85590:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85594:	428c      	cmp	r4, r1
   85596:	d8f2      	bhi.n	8557e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   85598:	0412      	lsls	r2, r2, #16
   8559a:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8559e:	431a      	orrs	r2, r3
   855a0:	6202      	str	r2, [r0, #32]

	return 0;
   855a2:	2000      	movs	r0, #0
}
   855a4:	bc10      	pop	{r4}
   855a6:	4770      	bx	lr

000855a8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   855a8:	4b0a      	ldr	r3, [pc, #40]	; (855d4 <usart_reset+0x2c>)
   855aa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   855ae:	2300      	movs	r3, #0
   855b0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   855b2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   855b4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   855b6:	2388      	movs	r3, #136	; 0x88
   855b8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   855ba:	2324      	movs	r3, #36	; 0x24
   855bc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   855be:	f44f 7380 	mov.w	r3, #256	; 0x100
   855c2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   855c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   855c8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   855ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   855ce:	6003      	str	r3, [r0, #0]
   855d0:	4770      	bx	lr
   855d2:	bf00      	nop
   855d4:	55534100 	.word	0x55534100

000855d8 <usart_init_rs232>:
{
   855d8:	b570      	push	{r4, r5, r6, lr}
   855da:	4605      	mov	r5, r0
   855dc:	460c      	mov	r4, r1
   855de:	4616      	mov	r6, r2
	usart_reset(p_usart);
   855e0:	4b0f      	ldr	r3, [pc, #60]	; (85620 <usart_init_rs232+0x48>)
   855e2:	4798      	blx	r3
	ul_reg_val = 0;
   855e4:	2200      	movs	r2, #0
   855e6:	4b0f      	ldr	r3, [pc, #60]	; (85624 <usart_init_rs232+0x4c>)
   855e8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   855ea:	b1a4      	cbz	r4, 85616 <usart_init_rs232+0x3e>
   855ec:	4632      	mov	r2, r6
   855ee:	6821      	ldr	r1, [r4, #0]
   855f0:	4628      	mov	r0, r5
   855f2:	4b0d      	ldr	r3, [pc, #52]	; (85628 <usart_init_rs232+0x50>)
   855f4:	4798      	blx	r3
   855f6:	4602      	mov	r2, r0
   855f8:	b978      	cbnz	r0, 8561a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   855fa:	6863      	ldr	r3, [r4, #4]
   855fc:	68a1      	ldr	r1, [r4, #8]
   855fe:	430b      	orrs	r3, r1
   85600:	6921      	ldr	r1, [r4, #16]
   85602:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85604:	68e1      	ldr	r1, [r4, #12]
   85606:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85608:	4906      	ldr	r1, [pc, #24]	; (85624 <usart_init_rs232+0x4c>)
   8560a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   8560c:	6869      	ldr	r1, [r5, #4]
   8560e:	430b      	orrs	r3, r1
   85610:	606b      	str	r3, [r5, #4]
}
   85612:	4610      	mov	r0, r2
   85614:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85616:	2201      	movs	r2, #1
   85618:	e7fb      	b.n	85612 <usart_init_rs232+0x3a>
   8561a:	2201      	movs	r2, #1
   8561c:	e7f9      	b.n	85612 <usart_init_rs232+0x3a>
   8561e:	bf00      	nop
   85620:	000855a9 	.word	0x000855a9
   85624:	200021a0 	.word	0x200021a0
   85628:	00085551 	.word	0x00085551

0008562c <usart_init_sync_master>:
{
   8562c:	b570      	push	{r4, r5, r6, lr}
   8562e:	4604      	mov	r4, r0
   85630:	460e      	mov	r6, r1
   85632:	4615      	mov	r5, r2
	usart_reset(p_usart);
   85634:	4b15      	ldr	r3, [pc, #84]	; (8568c <usart_init_sync_master+0x60>)
   85636:	4798      	blx	r3
	ul_reg_val = 0;
   85638:	2200      	movs	r2, #0
   8563a:	4b15      	ldr	r3, [pc, #84]	; (85690 <usart_init_sync_master+0x64>)
   8563c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   8563e:	b306      	cbz	r6, 85682 <usart_init_sync_master+0x56>
   85640:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   85642:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   85646:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8564a:	1e51      	subs	r1, r2, #1
   8564c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   85650:	4299      	cmp	r1, r3
   85652:	d818      	bhi.n	85686 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85654:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85656:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   85658:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   8565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85660:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85662:	6873      	ldr	r3, [r6, #4]
   85664:	68b2      	ldr	r2, [r6, #8]
   85666:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   85668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8566c:	6932      	ldr	r2, [r6, #16]
   8566e:	4313      	orrs	r3, r2
   85670:	68f2      	ldr	r2, [r6, #12]
   85672:	4313      	orrs	r3, r2
   85674:	4a06      	ldr	r2, [pc, #24]	; (85690 <usart_init_sync_master+0x64>)
   85676:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   85678:	6862      	ldr	r2, [r4, #4]
   8567a:	4313      	orrs	r3, r2
   8567c:	6063      	str	r3, [r4, #4]
	return 0;
   8567e:	2000      	movs	r0, #0
   85680:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85682:	2001      	movs	r0, #1
   85684:	bd70      	pop	{r4, r5, r6, pc}
   85686:	2001      	movs	r0, #1
}
   85688:	bd70      	pop	{r4, r5, r6, pc}
   8568a:	bf00      	nop
   8568c:	000855a9 	.word	0x000855a9
   85690:	200021a4 	.word	0x200021a4

00085694 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   85694:	2340      	movs	r3, #64	; 0x40
   85696:	6003      	str	r3, [r0, #0]
   85698:	4770      	bx	lr

0008569a <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8569a:	2380      	movs	r3, #128	; 0x80
   8569c:	6003      	str	r3, [r0, #0]
   8569e:	4770      	bx	lr

000856a0 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   856a0:	2310      	movs	r3, #16
   856a2:	6003      	str	r3, [r0, #0]
   856a4:	4770      	bx	lr

000856a6 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   856a6:	2320      	movs	r3, #32
   856a8:	6003      	str	r3, [r0, #0]
   856aa:	4770      	bx	lr

000856ac <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   856ac:	6081      	str	r1, [r0, #8]
   856ae:	4770      	bx	lr

000856b0 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   856b0:	60c1      	str	r1, [r0, #12]
   856b2:	4770      	bx	lr

000856b4 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   856b4:	6900      	ldr	r0, [r0, #16]
}
   856b6:	4770      	bx	lr

000856b8 <usart_get_status>:
	return p_usart->US_CSR;
   856b8:	6940      	ldr	r0, [r0, #20]
}
   856ba:	4770      	bx	lr

000856bc <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   856bc:	6940      	ldr	r0, [r0, #20]
}
   856be:	f3c0 2040 	ubfx	r0, r0, #9, #1
   856c2:	4770      	bx	lr

000856c4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   856c4:	6943      	ldr	r3, [r0, #20]
   856c6:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   856ca:	bf1d      	ittte	ne
   856cc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   856d0:	61c1      	strne	r1, [r0, #28]
	return 0;
   856d2:	2000      	movne	r0, #0
		return 1;
   856d4:	2001      	moveq	r0, #1
}
   856d6:	4770      	bx	lr

000856d8 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   856d8:	6943      	ldr	r3, [r0, #20]
   856da:	f013 0f02 	tst.w	r3, #2
   856de:	d0fb      	beq.n	856d8 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   856e0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   856e4:	61c1      	str	r1, [r0, #28]
}
   856e6:	2000      	movs	r0, #0
   856e8:	4770      	bx	lr

000856ea <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   856ea:	6943      	ldr	r3, [r0, #20]
   856ec:	f013 0f01 	tst.w	r3, #1
   856f0:	d005      	beq.n	856fe <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   856f2:	6983      	ldr	r3, [r0, #24]
   856f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   856f8:	600b      	str	r3, [r1, #0]
	return 0;
   856fa:	2000      	movs	r0, #0
   856fc:	4770      	bx	lr
		return 1;
   856fe:	2001      	movs	r0, #1
}
   85700:	4770      	bx	lr

00085702 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   85702:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85704:	23ac      	movs	r3, #172	; 0xac
   85706:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85708:	680b      	ldr	r3, [r1, #0]
   8570a:	684a      	ldr	r2, [r1, #4]
   8570c:	fbb3 f3f2 	udiv	r3, r3, r2
   85710:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   85712:	1e5c      	subs	r4, r3, #1
   85714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   85718:	4294      	cmp	r4, r2
   8571a:	d80b      	bhi.n	85734 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8571c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8571e:	688b      	ldr	r3, [r1, #8]
   85720:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   85722:	f240 2302 	movw	r3, #514	; 0x202
   85726:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8572a:	2350      	movs	r3, #80	; 0x50
   8572c:	6003      	str	r3, [r0, #0]

	return 0;
   8572e:	2000      	movs	r0, #0
}
   85730:	bc10      	pop	{r4}
   85732:	4770      	bx	lr
		return 1;
   85734:	2001      	movs	r0, #1
   85736:	e7fb      	b.n	85730 <uart_init+0x2e>

00085738 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   85738:	6943      	ldr	r3, [r0, #20]
   8573a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8573e:	bf1a      	itte	ne
   85740:	61c1      	strne	r1, [r0, #28]
	return 0;
   85742:	2000      	movne	r0, #0
		return 1;
   85744:	2001      	moveq	r0, #1
}
   85746:	4770      	bx	lr

00085748 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   85748:	6943      	ldr	r3, [r0, #20]
   8574a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8574e:	bf1d      	ittte	ne
   85750:	6983      	ldrne	r3, [r0, #24]
   85752:	700b      	strbne	r3, [r1, #0]
	return 0;
   85754:	2000      	movne	r0, #0
		return 1;
   85756:	2001      	moveq	r0, #1
}
   85758:	4770      	bx	lr

0008575a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8575a:	e7fe      	b.n	8575a <Dummy_Handler>

0008575c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8575c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8575e:	4b1c      	ldr	r3, [pc, #112]	; (857d0 <Reset_Handler+0x74>)
   85760:	4a1c      	ldr	r2, [pc, #112]	; (857d4 <Reset_Handler+0x78>)
   85762:	429a      	cmp	r2, r3
   85764:	d010      	beq.n	85788 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   85766:	4b1c      	ldr	r3, [pc, #112]	; (857d8 <Reset_Handler+0x7c>)
   85768:	4a19      	ldr	r2, [pc, #100]	; (857d0 <Reset_Handler+0x74>)
   8576a:	429a      	cmp	r2, r3
   8576c:	d20c      	bcs.n	85788 <Reset_Handler+0x2c>
   8576e:	3b01      	subs	r3, #1
   85770:	1a9b      	subs	r3, r3, r2
   85772:	f023 0303 	bic.w	r3, r3, #3
   85776:	3304      	adds	r3, #4
   85778:	4413      	add	r3, r2
   8577a:	4916      	ldr	r1, [pc, #88]	; (857d4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8577c:	f851 0b04 	ldr.w	r0, [r1], #4
   85780:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   85784:	429a      	cmp	r2, r3
   85786:	d1f9      	bne.n	8577c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   85788:	4b14      	ldr	r3, [pc, #80]	; (857dc <Reset_Handler+0x80>)
   8578a:	4a15      	ldr	r2, [pc, #84]	; (857e0 <Reset_Handler+0x84>)
   8578c:	429a      	cmp	r2, r3
   8578e:	d20a      	bcs.n	857a6 <Reset_Handler+0x4a>
   85790:	3b01      	subs	r3, #1
   85792:	1a9b      	subs	r3, r3, r2
   85794:	f023 0303 	bic.w	r3, r3, #3
   85798:	3304      	adds	r3, #4
   8579a:	4413      	add	r3, r2
		*pDest++ = 0;
   8579c:	2100      	movs	r1, #0
   8579e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   857a2:	4293      	cmp	r3, r2
   857a4:	d1fb      	bne.n	8579e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   857a6:	4b0f      	ldr	r3, [pc, #60]	; (857e4 <Reset_Handler+0x88>)
   857a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   857ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   857b0:	490d      	ldr	r1, [pc, #52]	; (857e8 <Reset_Handler+0x8c>)
   857b2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   857b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   857b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   857bc:	d203      	bcs.n	857c6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   857be:	688b      	ldr	r3, [r1, #8]
   857c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   857c4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   857c6:	4b09      	ldr	r3, [pc, #36]	; (857ec <Reset_Handler+0x90>)
   857c8:	4798      	blx	r3

	/* Branch to main function */
	main();
   857ca:	4b09      	ldr	r3, [pc, #36]	; (857f0 <Reset_Handler+0x94>)
   857cc:	4798      	blx	r3
   857ce:	e7fe      	b.n	857ce <Reset_Handler+0x72>
   857d0:	20000000 	.word	0x20000000
   857d4:	0008c4a4 	.word	0x0008c4a4
   857d8:	20001360 	.word	0x20001360
   857dc:	200026e4 	.word	0x200026e4
   857e0:	20001360 	.word	0x20001360
   857e4:	00080000 	.word	0x00080000
   857e8:	e000ed00 	.word	0xe000ed00
   857ec:	00085f85 	.word	0x00085f85
   857f0:	00085a69 	.word	0x00085a69

000857f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   857f4:	4b3d      	ldr	r3, [pc, #244]	; (858ec <SystemCoreClockUpdate+0xf8>)
   857f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857f8:	f003 0303 	and.w	r3, r3, #3
   857fc:	2b03      	cmp	r3, #3
   857fe:	d80e      	bhi.n	8581e <SystemCoreClockUpdate+0x2a>
   85800:	e8df f003 	tbb	[pc, r3]
   85804:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85808:	4b39      	ldr	r3, [pc, #228]	; (858f0 <SystemCoreClockUpdate+0xfc>)
   8580a:	695b      	ldr	r3, [r3, #20]
   8580c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85810:	bf14      	ite	ne
   85812:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85816:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8581a:	4b36      	ldr	r3, [pc, #216]	; (858f4 <SystemCoreClockUpdate+0x100>)
   8581c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8581e:	4b33      	ldr	r3, [pc, #204]	; (858ec <SystemCoreClockUpdate+0xf8>)
   85820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85822:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85826:	2b70      	cmp	r3, #112	; 0x70
   85828:	d057      	beq.n	858da <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8582a:	4b30      	ldr	r3, [pc, #192]	; (858ec <SystemCoreClockUpdate+0xf8>)
   8582c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8582e:	4931      	ldr	r1, [pc, #196]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85830:	f3c2 1202 	ubfx	r2, r2, #4, #3
   85834:	680b      	ldr	r3, [r1, #0]
   85836:	40d3      	lsrs	r3, r2
   85838:	600b      	str	r3, [r1, #0]
   8583a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8583c:	4b2b      	ldr	r3, [pc, #172]	; (858ec <SystemCoreClockUpdate+0xf8>)
   8583e:	6a1b      	ldr	r3, [r3, #32]
   85840:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85844:	d003      	beq.n	8584e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85846:	4a2c      	ldr	r2, [pc, #176]	; (858f8 <SystemCoreClockUpdate+0x104>)
   85848:	4b2a      	ldr	r3, [pc, #168]	; (858f4 <SystemCoreClockUpdate+0x100>)
   8584a:	601a      	str	r2, [r3, #0]
   8584c:	e7e7      	b.n	8581e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8584e:	4a2b      	ldr	r2, [pc, #172]	; (858fc <SystemCoreClockUpdate+0x108>)
   85850:	4b28      	ldr	r3, [pc, #160]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85852:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85854:	4b25      	ldr	r3, [pc, #148]	; (858ec <SystemCoreClockUpdate+0xf8>)
   85856:	6a1b      	ldr	r3, [r3, #32]
   85858:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8585c:	2b10      	cmp	r3, #16
   8585e:	d005      	beq.n	8586c <SystemCoreClockUpdate+0x78>
   85860:	2b20      	cmp	r3, #32
   85862:	d1dc      	bne.n	8581e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   85864:	4a24      	ldr	r2, [pc, #144]	; (858f8 <SystemCoreClockUpdate+0x104>)
   85866:	4b23      	ldr	r3, [pc, #140]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85868:	601a      	str	r2, [r3, #0]
				break;
   8586a:	e7d8      	b.n	8581e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8586c:	4a24      	ldr	r2, [pc, #144]	; (85900 <SystemCoreClockUpdate+0x10c>)
   8586e:	4b21      	ldr	r3, [pc, #132]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85870:	601a      	str	r2, [r3, #0]
				break;
   85872:	e7d4      	b.n	8581e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85874:	4b1d      	ldr	r3, [pc, #116]	; (858ec <SystemCoreClockUpdate+0xf8>)
   85876:	6a1b      	ldr	r3, [r3, #32]
   85878:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8587c:	d00c      	beq.n	85898 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8587e:	4a1e      	ldr	r2, [pc, #120]	; (858f8 <SystemCoreClockUpdate+0x104>)
   85880:	4b1c      	ldr	r3, [pc, #112]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85882:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85884:	4b19      	ldr	r3, [pc, #100]	; (858ec <SystemCoreClockUpdate+0xf8>)
   85886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85888:	f003 0303 	and.w	r3, r3, #3
   8588c:	2b02      	cmp	r3, #2
   8588e:	d016      	beq.n	858be <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85890:	4a1c      	ldr	r2, [pc, #112]	; (85904 <SystemCoreClockUpdate+0x110>)
   85892:	4b18      	ldr	r3, [pc, #96]	; (858f4 <SystemCoreClockUpdate+0x100>)
   85894:	601a      	str	r2, [r3, #0]
   85896:	e7c2      	b.n	8581e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85898:	4a18      	ldr	r2, [pc, #96]	; (858fc <SystemCoreClockUpdate+0x108>)
   8589a:	4b16      	ldr	r3, [pc, #88]	; (858f4 <SystemCoreClockUpdate+0x100>)
   8589c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8589e:	4b13      	ldr	r3, [pc, #76]	; (858ec <SystemCoreClockUpdate+0xf8>)
   858a0:	6a1b      	ldr	r3, [r3, #32]
   858a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   858a6:	2b10      	cmp	r3, #16
   858a8:	d005      	beq.n	858b6 <SystemCoreClockUpdate+0xc2>
   858aa:	2b20      	cmp	r3, #32
   858ac:	d1ea      	bne.n	85884 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   858ae:	4a12      	ldr	r2, [pc, #72]	; (858f8 <SystemCoreClockUpdate+0x104>)
   858b0:	4b10      	ldr	r3, [pc, #64]	; (858f4 <SystemCoreClockUpdate+0x100>)
   858b2:	601a      	str	r2, [r3, #0]
				break;
   858b4:	e7e6      	b.n	85884 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   858b6:	4a12      	ldr	r2, [pc, #72]	; (85900 <SystemCoreClockUpdate+0x10c>)
   858b8:	4b0e      	ldr	r3, [pc, #56]	; (858f4 <SystemCoreClockUpdate+0x100>)
   858ba:	601a      	str	r2, [r3, #0]
				break;
   858bc:	e7e2      	b.n	85884 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   858be:	4a0b      	ldr	r2, [pc, #44]	; (858ec <SystemCoreClockUpdate+0xf8>)
   858c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   858c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   858c4:	480b      	ldr	r0, [pc, #44]	; (858f4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   858c6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   858ca:	6803      	ldr	r3, [r0, #0]
   858cc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   858d0:	b2d2      	uxtb	r2, r2
   858d2:	fbb3 f3f2 	udiv	r3, r3, r2
   858d6:	6003      	str	r3, [r0, #0]
   858d8:	e7a1      	b.n	8581e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   858da:	4a06      	ldr	r2, [pc, #24]	; (858f4 <SystemCoreClockUpdate+0x100>)
   858dc:	6813      	ldr	r3, [r2, #0]
   858de:	490a      	ldr	r1, [pc, #40]	; (85908 <SystemCoreClockUpdate+0x114>)
   858e0:	fba1 1303 	umull	r1, r3, r1, r3
   858e4:	085b      	lsrs	r3, r3, #1
   858e6:	6013      	str	r3, [r2, #0]
   858e8:	4770      	bx	lr
   858ea:	bf00      	nop
   858ec:	400e0400 	.word	0x400e0400
   858f0:	400e1210 	.word	0x400e1210
   858f4:	20000988 	.word	0x20000988
   858f8:	00b71b00 	.word	0x00b71b00
   858fc:	003d0900 	.word	0x003d0900
   85900:	007a1200 	.word	0x007a1200
   85904:	0e4e1c00 	.word	0x0e4e1c00
   85908:	aaaaaaab 	.word	0xaaaaaaab

0008590c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8590c:	4b0a      	ldr	r3, [pc, #40]	; (85938 <_sbrk+0x2c>)
   8590e:	681b      	ldr	r3, [r3, #0]
   85910:	b153      	cbz	r3, 85928 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   85912:	4b09      	ldr	r3, [pc, #36]	; (85938 <_sbrk+0x2c>)
   85914:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   85916:	181a      	adds	r2, r3, r0
   85918:	4908      	ldr	r1, [pc, #32]	; (8593c <_sbrk+0x30>)
   8591a:	4291      	cmp	r1, r2
   8591c:	db08      	blt.n	85930 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8591e:	4610      	mov	r0, r2
   85920:	4a05      	ldr	r2, [pc, #20]	; (85938 <_sbrk+0x2c>)
   85922:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   85924:	4618      	mov	r0, r3
   85926:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   85928:	4a05      	ldr	r2, [pc, #20]	; (85940 <_sbrk+0x34>)
   8592a:	4b03      	ldr	r3, [pc, #12]	; (85938 <_sbrk+0x2c>)
   8592c:	601a      	str	r2, [r3, #0]
   8592e:	e7f0      	b.n	85912 <_sbrk+0x6>
		return (caddr_t) -1;	
   85930:	f04f 30ff 	mov.w	r0, #4294967295
}
   85934:	4770      	bx	lr
   85936:	bf00      	nop
   85938:	200021a8 	.word	0x200021a8
   8593c:	2007fffc 	.word	0x2007fffc
   85940:	20082000 	.word	0x20082000

00085944 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85944:	f04f 30ff 	mov.w	r0, #4294967295
   85948:	4770      	bx	lr

0008594a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8594a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8594e:	604b      	str	r3, [r1, #4]

	return 0;
}
   85950:	2000      	movs	r0, #0
   85952:	4770      	bx	lr

00085954 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85954:	2001      	movs	r0, #1
   85956:	4770      	bx	lr

00085958 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85958:	2000      	movs	r0, #0
   8595a:	4770      	bx	lr

0008595c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8595c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8595e:	b083      	sub	sp, #12
   85960:	4604      	mov	r4, r0
   85962:	460d      	mov	r5, r1
	uint32_t val = 0;
   85964:	2300      	movs	r3, #0
   85966:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   85968:	4b19      	ldr	r3, [pc, #100]	; (859d0 <usart_serial_getchar+0x74>)
   8596a:	4298      	cmp	r0, r3
   8596c:	d00a      	beq.n	85984 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8596e:	4b19      	ldr	r3, [pc, #100]	; (859d4 <usart_serial_getchar+0x78>)
   85970:	4298      	cmp	r0, r3
   85972:	d00f      	beq.n	85994 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   85974:	4b18      	ldr	r3, [pc, #96]	; (859d8 <usart_serial_getchar+0x7c>)
   85976:	4298      	cmp	r0, r3
   85978:	d016      	beq.n	859a8 <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8597a:	4b18      	ldr	r3, [pc, #96]	; (859dc <usart_serial_getchar+0x80>)
   8597c:	429c      	cmp	r4, r3
   8597e:	d01d      	beq.n	859bc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   85980:	b003      	add	sp, #12
   85982:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   85984:	461f      	mov	r7, r3
   85986:	4e16      	ldr	r6, [pc, #88]	; (859e0 <usart_serial_getchar+0x84>)
   85988:	4629      	mov	r1, r5
   8598a:	4638      	mov	r0, r7
   8598c:	47b0      	blx	r6
   8598e:	2800      	cmp	r0, #0
   85990:	d1fa      	bne.n	85988 <usart_serial_getchar+0x2c>
   85992:	e7f2      	b.n	8597a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   85994:	461e      	mov	r6, r3
   85996:	4c13      	ldr	r4, [pc, #76]	; (859e4 <usart_serial_getchar+0x88>)
   85998:	a901      	add	r1, sp, #4
   8599a:	4630      	mov	r0, r6
   8599c:	47a0      	blx	r4
   8599e:	2800      	cmp	r0, #0
   859a0:	d1fa      	bne.n	85998 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   859a2:	9b01      	ldr	r3, [sp, #4]
   859a4:	702b      	strb	r3, [r5, #0]
   859a6:	e7eb      	b.n	85980 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   859a8:	461e      	mov	r6, r3
   859aa:	4c0e      	ldr	r4, [pc, #56]	; (859e4 <usart_serial_getchar+0x88>)
   859ac:	a901      	add	r1, sp, #4
   859ae:	4630      	mov	r0, r6
   859b0:	47a0      	blx	r4
   859b2:	2800      	cmp	r0, #0
   859b4:	d1fa      	bne.n	859ac <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   859b6:	9b01      	ldr	r3, [sp, #4]
   859b8:	702b      	strb	r3, [r5, #0]
   859ba:	e7e1      	b.n	85980 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   859bc:	461e      	mov	r6, r3
   859be:	4c09      	ldr	r4, [pc, #36]	; (859e4 <usart_serial_getchar+0x88>)
   859c0:	a901      	add	r1, sp, #4
   859c2:	4630      	mov	r0, r6
   859c4:	47a0      	blx	r4
   859c6:	2800      	cmp	r0, #0
   859c8:	d1fa      	bne.n	859c0 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   859ca:	9b01      	ldr	r3, [sp, #4]
   859cc:	702b      	strb	r3, [r5, #0]
}
   859ce:	e7d7      	b.n	85980 <usart_serial_getchar+0x24>
   859d0:	400e0600 	.word	0x400e0600
   859d4:	40090000 	.word	0x40090000
   859d8:	40094000 	.word	0x40094000
   859dc:	40098000 	.word	0x40098000
   859e0:	00085749 	.word	0x00085749
   859e4:	000856eb 	.word	0x000856eb

000859e8 <usart_serial_putchar>:
{
   859e8:	b570      	push	{r4, r5, r6, lr}
   859ea:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   859ec:	4b18      	ldr	r3, [pc, #96]	; (85a50 <usart_serial_putchar+0x68>)
   859ee:	4298      	cmp	r0, r3
   859f0:	d00a      	beq.n	85a08 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   859f2:	4b18      	ldr	r3, [pc, #96]	; (85a54 <usart_serial_putchar+0x6c>)
   859f4:	4298      	cmp	r0, r3
   859f6:	d010      	beq.n	85a1a <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   859f8:	4b17      	ldr	r3, [pc, #92]	; (85a58 <usart_serial_putchar+0x70>)
   859fa:	4298      	cmp	r0, r3
   859fc:	d016      	beq.n	85a2c <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   859fe:	4b17      	ldr	r3, [pc, #92]	; (85a5c <usart_serial_putchar+0x74>)
   85a00:	4298      	cmp	r0, r3
   85a02:	d01c      	beq.n	85a3e <usart_serial_putchar+0x56>
	return 0;
   85a04:	2000      	movs	r0, #0
}
   85a06:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   85a08:	461e      	mov	r6, r3
   85a0a:	4d15      	ldr	r5, [pc, #84]	; (85a60 <usart_serial_putchar+0x78>)
   85a0c:	4621      	mov	r1, r4
   85a0e:	4630      	mov	r0, r6
   85a10:	47a8      	blx	r5
   85a12:	2800      	cmp	r0, #0
   85a14:	d1fa      	bne.n	85a0c <usart_serial_putchar+0x24>
		return 1;
   85a16:	2001      	movs	r0, #1
   85a18:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85a1a:	461e      	mov	r6, r3
   85a1c:	4d11      	ldr	r5, [pc, #68]	; (85a64 <usart_serial_putchar+0x7c>)
   85a1e:	4621      	mov	r1, r4
   85a20:	4630      	mov	r0, r6
   85a22:	47a8      	blx	r5
   85a24:	2800      	cmp	r0, #0
   85a26:	d1fa      	bne.n	85a1e <usart_serial_putchar+0x36>
		return 1;
   85a28:	2001      	movs	r0, #1
   85a2a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85a2c:	461e      	mov	r6, r3
   85a2e:	4d0d      	ldr	r5, [pc, #52]	; (85a64 <usart_serial_putchar+0x7c>)
   85a30:	4621      	mov	r1, r4
   85a32:	4630      	mov	r0, r6
   85a34:	47a8      	blx	r5
   85a36:	2800      	cmp	r0, #0
   85a38:	d1fa      	bne.n	85a30 <usart_serial_putchar+0x48>
		return 1;
   85a3a:	2001      	movs	r0, #1
   85a3c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85a3e:	461e      	mov	r6, r3
   85a40:	4d08      	ldr	r5, [pc, #32]	; (85a64 <usart_serial_putchar+0x7c>)
   85a42:	4621      	mov	r1, r4
   85a44:	4630      	mov	r0, r6
   85a46:	47a8      	blx	r5
   85a48:	2800      	cmp	r0, #0
   85a4a:	d1fa      	bne.n	85a42 <usart_serial_putchar+0x5a>
		return 1;
   85a4c:	2001      	movs	r0, #1
   85a4e:	bd70      	pop	{r4, r5, r6, pc}
   85a50:	400e0600 	.word	0x400e0600
   85a54:	40090000 	.word	0x40090000
   85a58:	40094000 	.word	0x40094000
   85a5c:	40098000 	.word	0x40098000
   85a60:	00085739 	.word	0x00085739
   85a64:	000856c5 	.word	0x000856c5

00085a68 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   85a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a6c:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   85a6e:	2110      	movs	r1, #16
   85a70:	eb0d 0001 	add.w	r0, sp, r1
   85a74:	4b52      	ldr	r3, [pc, #328]	; (85bc0 <main+0x158>)
   85a76:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   85a78:	2008      	movs	r0, #8
   85a7a:	4d52      	ldr	r5, [pc, #328]	; (85bc4 <main+0x15c>)
   85a7c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   85a7e:	4c52      	ldr	r4, [pc, #328]	; (85bc8 <main+0x160>)
   85a80:	4b52      	ldr	r3, [pc, #328]	; (85bcc <main+0x164>)
   85a82:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   85a84:	4a52      	ldr	r2, [pc, #328]	; (85bd0 <main+0x168>)
   85a86:	4b53      	ldr	r3, [pc, #332]	; (85bd4 <main+0x16c>)
   85a88:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   85a8a:	4a53      	ldr	r2, [pc, #332]	; (85bd8 <main+0x170>)
   85a8c:	4b53      	ldr	r3, [pc, #332]	; (85bdc <main+0x174>)
   85a8e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   85a90:	4b53      	ldr	r3, [pc, #332]	; (85be0 <main+0x178>)
   85a92:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   85a94:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   85a98:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   85a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85a9e:	9303      	str	r3, [sp, #12]
   85aa0:	2008      	movs	r0, #8
   85aa2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   85aa4:	a901      	add	r1, sp, #4
   85aa6:	4620      	mov	r0, r4
   85aa8:	4b4e      	ldr	r3, [pc, #312]	; (85be4 <main+0x17c>)
   85aaa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   85aac:	4d4e      	ldr	r5, [pc, #312]	; (85be8 <main+0x180>)
   85aae:	682b      	ldr	r3, [r5, #0]
   85ab0:	2100      	movs	r1, #0
   85ab2:	6898      	ldr	r0, [r3, #8]
   85ab4:	4c4d      	ldr	r4, [pc, #308]	; (85bec <main+0x184>)
   85ab6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   85ab8:	682b      	ldr	r3, [r5, #0]
   85aba:	2100      	movs	r1, #0
   85abc:	6858      	ldr	r0, [r3, #4]
   85abe:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   85ac0:	2101      	movs	r1, #1
   85ac2:	4b4b      	ldr	r3, [pc, #300]	; (85bf0 <main+0x188>)
   85ac4:	7019      	strb	r1, [r3, #0]
   85ac6:	f3bf 8f5f 	dmb	sy
   85aca:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   85acc:	4b49      	ldr	r3, [pc, #292]	; (85bf4 <main+0x18c>)
   85ace:	2200      	movs	r2, #0
   85ad0:	701a      	strb	r2, [r3, #0]
   85ad2:	705a      	strb	r2, [r3, #1]
   85ad4:	709a      	strb	r2, [r3, #2]
   85ad6:	70da      	strb	r2, [r3, #3]
   85ad8:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   85ada:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85adc:	4b46      	ldr	r3, [pc, #280]	; (85bf8 <main+0x190>)
   85ade:	4798      	blx	r3
	board_init();
   85ae0:	4b46      	ldr	r3, [pc, #280]	; (85bfc <main+0x194>)
   85ae2:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   85ae4:	4b46      	ldr	r3, [pc, #280]	; (85c00 <main+0x198>)
   85ae6:	4798      	blx	r3
   85ae8:	ad04      	add	r5, sp, #16
   85aea:	4c46      	ldr	r4, [pc, #280]	; (85c04 <main+0x19c>)
   85aec:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   85af0:	4f45      	ldr	r7, [pc, #276]	; (85c08 <main+0x1a0>)
   85af2:	4e46      	ldr	r6, [pc, #280]	; (85c0c <main+0x1a4>)
   85af4:	f855 2b04 	ldr.w	r2, [r5], #4
   85af8:	4639      	mov	r1, r7
   85afa:	4620      	mov	r0, r4
   85afc:	47b0      	blx	r6
   85afe:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   85b00:	45a0      	cmp	r8, r4
   85b02:	d1f7      	bne.n	85af4 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   85b04:	4c3f      	ldr	r4, [pc, #252]	; (85c04 <main+0x19c>)
   85b06:	2600      	movs	r6, #0
   85b08:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   85b0c:	4a40      	ldr	r2, [pc, #256]	; (85c10 <main+0x1a8>)
   85b0e:	4941      	ldr	r1, [pc, #260]	; (85c14 <main+0x1ac>)
   85b10:	4841      	ldr	r0, [pc, #260]	; (85c18 <main+0x1b0>)
   85b12:	4f42      	ldr	r7, [pc, #264]	; (85c1c <main+0x1b4>)
   85b14:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   85b16:	4621      	mov	r1, r4
   85b18:	4841      	ldr	r0, [pc, #260]	; (85c20 <main+0x1b8>)
   85b1a:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   85b1c:	2009      	movs	r0, #9
   85b1e:	4b29      	ldr	r3, [pc, #164]	; (85bc4 <main+0x15c>)
   85b20:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   85b22:	4d40      	ldr	r5, [pc, #256]	; (85c24 <main+0x1bc>)
   85b24:	4629      	mov	r1, r5
   85b26:	2029      	movs	r0, #41	; 0x29
   85b28:	4c3f      	ldr	r4, [pc, #252]	; (85c28 <main+0x1c0>)
   85b2a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   85b2c:	4629      	mov	r1, r5
   85b2e:	202a      	movs	r0, #42	; 0x2a
   85b30:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   85b32:	4629      	mov	r1, r5
   85b34:	202b      	movs	r0, #43	; 0x2b
   85b36:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   85b38:	4629      	mov	r1, r5
   85b3a:	202c      	movs	r0, #44	; 0x2c
   85b3c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   85b3e:	4629      	mov	r1, r5
   85b40:	202d      	movs	r0, #45	; 0x2d
   85b42:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   85b44:	4629      	mov	r1, r5
   85b46:	202e      	movs	r0, #46	; 0x2e
   85b48:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   85b4a:	4629      	mov	r1, r5
   85b4c:	202f      	movs	r0, #47	; 0x2f
   85b4e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   85b50:	4629      	mov	r1, r5
   85b52:	2030      	movs	r0, #48	; 0x30
   85b54:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   85b56:	4629      	mov	r1, r5
   85b58:	2033      	movs	r0, #51	; 0x33
   85b5a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   85b5c:	4629      	mov	r1, r5
   85b5e:	2037      	movs	r0, #55	; 0x37
   85b60:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   85b62:	4629      	mov	r1, r5
   85b64:	2034      	movs	r0, #52	; 0x34
   85b66:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   85b68:	4830      	ldr	r0, [pc, #192]	; (85c2c <main+0x1c4>)
   85b6a:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   85b6c:	4c30      	ldr	r4, [pc, #192]	; (85c30 <main+0x1c8>)
   85b6e:	4a31      	ldr	r2, [pc, #196]	; (85c34 <main+0x1cc>)
   85b70:	4631      	mov	r1, r6
   85b72:	4620      	mov	r0, r4
   85b74:	4b30      	ldr	r3, [pc, #192]	; (85c38 <main+0x1d0>)
   85b76:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   85b78:	4a30      	ldr	r2, [pc, #192]	; (85c3c <main+0x1d4>)
   85b7a:	4631      	mov	r1, r6
   85b7c:	4620      	mov	r0, r4
   85b7e:	4b30      	ldr	r3, [pc, #192]	; (85c40 <main+0x1d8>)
   85b80:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   85b82:	4a30      	ldr	r2, [pc, #192]	; (85c44 <main+0x1dc>)
   85b84:	4631      	mov	r1, r6
   85b86:	4620      	mov	r0, r4
   85b88:	4b2f      	ldr	r3, [pc, #188]	; (85c48 <main+0x1e0>)
   85b8a:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   85b8c:	2203      	movs	r2, #3
   85b8e:	4631      	mov	r1, r6
   85b90:	4620      	mov	r0, r4
   85b92:	4b2e      	ldr	r3, [pc, #184]	; (85c4c <main+0x1e4>)
   85b94:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   85b96:	4b2e      	ldr	r3, [pc, #184]	; (85c50 <main+0x1e8>)
   85b98:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   85b9a:	4b2e      	ldr	r3, [pc, #184]	; (85c54 <main+0x1ec>)
   85b9c:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   85b9e:	2204      	movs	r2, #4
   85ba0:	4b2d      	ldr	r3, [pc, #180]	; (85c58 <main+0x1f0>)
   85ba2:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   85ba4:	4630      	mov	r0, r6
   85ba6:	4b2d      	ldr	r3, [pc, #180]	; (85c5c <main+0x1f4>)
   85ba8:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   85baa:	482d      	ldr	r0, [pc, #180]	; (85c60 <main+0x1f8>)
   85bac:	47b8      	blx	r7
	naeusb_register_handlers();
   85bae:	4b2d      	ldr	r3, [pc, #180]	; (85c64 <main+0x1fc>)
   85bb0:	4798      	blx	r3
	naeusart_register_handlers();
   85bb2:	4b2d      	ldr	r3, [pc, #180]	; (85c68 <main+0x200>)
   85bb4:	4798      	blx	r3
	openadc_register_handlers();
   85bb6:	4b2d      	ldr	r3, [pc, #180]	; (85c6c <main+0x204>)
   85bb8:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   85bba:	4c2d      	ldr	r4, [pc, #180]	; (85c70 <main+0x208>)
   85bbc:	47a0      	blx	r4
   85bbe:	e7fd      	b.n	85bbc <main+0x154>
   85bc0:	00082f59 	.word	0x00082f59
   85bc4:	00084009 	.word	0x00084009
   85bc8:	400e0600 	.word	0x400e0600
   85bcc:	200026a0 	.word	0x200026a0
   85bd0:	000859e9 	.word	0x000859e9
   85bd4:	2000269c 	.word	0x2000269c
   85bd8:	0008595d 	.word	0x0008595d
   85bdc:	20002698 	.word	0x20002698
   85be0:	05b8d800 	.word	0x05b8d800
   85be4:	00085703 	.word	0x00085703
   85be8:	200009b0 	.word	0x200009b0
   85bec:	00086185 	.word	0x00086185
   85bf0:	20000986 	.word	0x20000986
   85bf4:	20002690 	.word	0x20002690
   85bf8:	00083061 	.word	0x00083061
   85bfc:	00083b29 	.word	0x00083b29
   85c00:	00082c1d 	.word	0x00082c1d
   85c04:	2000098c 	.word	0x2000098c
   85c08:	0008c124 	.word	0x0008c124
   85c0c:	00086325 	.word	0x00086325
   85c10:	0008c12c 	.word	0x0008c12c
   85c14:	0008c138 	.word	0x0008c138
   85c18:	0008c144 	.word	0x0008c144
   85c1c:	00085fd5 	.word	0x00085fd5
   85c20:	0008c178 	.word	0x0008c178
   85c24:	08000001 	.word	0x08000001
   85c28:	00083cc5 	.word	0x00083cc5
   85c2c:	0008c18c 	.word	0x0008c18c
   85c30:	400e0000 	.word	0x400e0000
   85c34:	01010100 	.word	0x01010100
   85c38:	00083b99 	.word	0x00083b99
   85c3c:	01030101 	.word	0x01030101
   85c40:	00083ba5 	.word	0x00083ba5
   85c44:	00040002 	.word	0x00040002
   85c48:	00083bb1 	.word	0x00083bb1
   85c4c:	00083bbd 	.word	0x00083bbd
   85c50:	00082fa9 	.word	0x00082fa9
   85c54:	00083341 	.word	0x00083341
   85c58:	400e0400 	.word	0x400e0400
   85c5c:	00084071 	.word	0x00084071
   85c60:	0008c1ac 	.word	0x0008c1ac
   85c64:	000815b9 	.word	0x000815b9
   85c68:	00081e05 	.word	0x00081e05
   85c6c:	00081955 	.word	0x00081955
   85c70:	00082065 	.word	0x00082065

00085c74 <__aeabi_uldivmod>:
   85c74:	b953      	cbnz	r3, 85c8c <__aeabi_uldivmod+0x18>
   85c76:	b94a      	cbnz	r2, 85c8c <__aeabi_uldivmod+0x18>
   85c78:	2900      	cmp	r1, #0
   85c7a:	bf08      	it	eq
   85c7c:	2800      	cmpeq	r0, #0
   85c7e:	bf1c      	itt	ne
   85c80:	f04f 31ff 	movne.w	r1, #4294967295
   85c84:	f04f 30ff 	movne.w	r0, #4294967295
   85c88:	f000 b97a 	b.w	85f80 <__aeabi_idiv0>
   85c8c:	f1ad 0c08 	sub.w	ip, sp, #8
   85c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85c94:	f000 f806 	bl	85ca4 <__udivmoddi4>
   85c98:	f8dd e004 	ldr.w	lr, [sp, #4]
   85c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85ca0:	b004      	add	sp, #16
   85ca2:	4770      	bx	lr

00085ca4 <__udivmoddi4>:
   85ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85ca8:	468c      	mov	ip, r1
   85caa:	460e      	mov	r6, r1
   85cac:	4604      	mov	r4, r0
   85cae:	9d08      	ldr	r5, [sp, #32]
   85cb0:	2b00      	cmp	r3, #0
   85cb2:	d150      	bne.n	85d56 <__udivmoddi4+0xb2>
   85cb4:	428a      	cmp	r2, r1
   85cb6:	4617      	mov	r7, r2
   85cb8:	d96c      	bls.n	85d94 <__udivmoddi4+0xf0>
   85cba:	fab2 fe82 	clz	lr, r2
   85cbe:	f1be 0f00 	cmp.w	lr, #0
   85cc2:	d00b      	beq.n	85cdc <__udivmoddi4+0x38>
   85cc4:	f1ce 0c20 	rsb	ip, lr, #32
   85cc8:	fa01 f60e 	lsl.w	r6, r1, lr
   85ccc:	fa20 fc0c 	lsr.w	ip, r0, ip
   85cd0:	fa02 f70e 	lsl.w	r7, r2, lr
   85cd4:	ea4c 0c06 	orr.w	ip, ip, r6
   85cd8:	fa00 f40e 	lsl.w	r4, r0, lr
   85cdc:	0c3a      	lsrs	r2, r7, #16
   85cde:	fbbc f9f2 	udiv	r9, ip, r2
   85ce2:	b2bb      	uxth	r3, r7
   85ce4:	fb02 cc19 	mls	ip, r2, r9, ip
   85ce8:	fb09 fa03 	mul.w	sl, r9, r3
   85cec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85cf0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   85cf4:	45b2      	cmp	sl, r6
   85cf6:	d90a      	bls.n	85d0e <__udivmoddi4+0x6a>
   85cf8:	19f6      	adds	r6, r6, r7
   85cfa:	f109 31ff 	add.w	r1, r9, #4294967295
   85cfe:	f080 8125 	bcs.w	85f4c <__udivmoddi4+0x2a8>
   85d02:	45b2      	cmp	sl, r6
   85d04:	f240 8122 	bls.w	85f4c <__udivmoddi4+0x2a8>
   85d08:	f1a9 0902 	sub.w	r9, r9, #2
   85d0c:	443e      	add	r6, r7
   85d0e:	eba6 060a 	sub.w	r6, r6, sl
   85d12:	fbb6 f0f2 	udiv	r0, r6, r2
   85d16:	fb02 6610 	mls	r6, r2, r0, r6
   85d1a:	fb00 f303 	mul.w	r3, r0, r3
   85d1e:	b2a4      	uxth	r4, r4
   85d20:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   85d24:	42a3      	cmp	r3, r4
   85d26:	d909      	bls.n	85d3c <__udivmoddi4+0x98>
   85d28:	19e4      	adds	r4, r4, r7
   85d2a:	f100 32ff 	add.w	r2, r0, #4294967295
   85d2e:	f080 810b 	bcs.w	85f48 <__udivmoddi4+0x2a4>
   85d32:	42a3      	cmp	r3, r4
   85d34:	f240 8108 	bls.w	85f48 <__udivmoddi4+0x2a4>
   85d38:	3802      	subs	r0, #2
   85d3a:	443c      	add	r4, r7
   85d3c:	2100      	movs	r1, #0
   85d3e:	1ae4      	subs	r4, r4, r3
   85d40:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85d44:	2d00      	cmp	r5, #0
   85d46:	d062      	beq.n	85e0e <__udivmoddi4+0x16a>
   85d48:	2300      	movs	r3, #0
   85d4a:	fa24 f40e 	lsr.w	r4, r4, lr
   85d4e:	602c      	str	r4, [r5, #0]
   85d50:	606b      	str	r3, [r5, #4]
   85d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85d56:	428b      	cmp	r3, r1
   85d58:	d907      	bls.n	85d6a <__udivmoddi4+0xc6>
   85d5a:	2d00      	cmp	r5, #0
   85d5c:	d055      	beq.n	85e0a <__udivmoddi4+0x166>
   85d5e:	2100      	movs	r1, #0
   85d60:	e885 0041 	stmia.w	r5, {r0, r6}
   85d64:	4608      	mov	r0, r1
   85d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85d6a:	fab3 f183 	clz	r1, r3
   85d6e:	2900      	cmp	r1, #0
   85d70:	f040 808f 	bne.w	85e92 <__udivmoddi4+0x1ee>
   85d74:	42b3      	cmp	r3, r6
   85d76:	d302      	bcc.n	85d7e <__udivmoddi4+0xda>
   85d78:	4282      	cmp	r2, r0
   85d7a:	f200 80fc 	bhi.w	85f76 <__udivmoddi4+0x2d2>
   85d7e:	1a84      	subs	r4, r0, r2
   85d80:	eb66 0603 	sbc.w	r6, r6, r3
   85d84:	2001      	movs	r0, #1
   85d86:	46b4      	mov	ip, r6
   85d88:	2d00      	cmp	r5, #0
   85d8a:	d040      	beq.n	85e0e <__udivmoddi4+0x16a>
   85d8c:	e885 1010 	stmia.w	r5, {r4, ip}
   85d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85d94:	b912      	cbnz	r2, 85d9c <__udivmoddi4+0xf8>
   85d96:	2701      	movs	r7, #1
   85d98:	fbb7 f7f2 	udiv	r7, r7, r2
   85d9c:	fab7 fe87 	clz	lr, r7
   85da0:	f1be 0f00 	cmp.w	lr, #0
   85da4:	d135      	bne.n	85e12 <__udivmoddi4+0x16e>
   85da6:	2101      	movs	r1, #1
   85da8:	1bf6      	subs	r6, r6, r7
   85daa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85dae:	fa1f f887 	uxth.w	r8, r7
   85db2:	fbb6 f2fc 	udiv	r2, r6, ip
   85db6:	fb0c 6612 	mls	r6, ip, r2, r6
   85dba:	fb08 f002 	mul.w	r0, r8, r2
   85dbe:	0c23      	lsrs	r3, r4, #16
   85dc0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   85dc4:	42b0      	cmp	r0, r6
   85dc6:	d907      	bls.n	85dd8 <__udivmoddi4+0x134>
   85dc8:	19f6      	adds	r6, r6, r7
   85dca:	f102 33ff 	add.w	r3, r2, #4294967295
   85dce:	d202      	bcs.n	85dd6 <__udivmoddi4+0x132>
   85dd0:	42b0      	cmp	r0, r6
   85dd2:	f200 80d2 	bhi.w	85f7a <__udivmoddi4+0x2d6>
   85dd6:	461a      	mov	r2, r3
   85dd8:	1a36      	subs	r6, r6, r0
   85dda:	fbb6 f0fc 	udiv	r0, r6, ip
   85dde:	fb0c 6610 	mls	r6, ip, r0, r6
   85de2:	fb08 f800 	mul.w	r8, r8, r0
   85de6:	b2a3      	uxth	r3, r4
   85de8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   85dec:	45a0      	cmp	r8, r4
   85dee:	d907      	bls.n	85e00 <__udivmoddi4+0x15c>
   85df0:	19e4      	adds	r4, r4, r7
   85df2:	f100 33ff 	add.w	r3, r0, #4294967295
   85df6:	d202      	bcs.n	85dfe <__udivmoddi4+0x15a>
   85df8:	45a0      	cmp	r8, r4
   85dfa:	f200 80b9 	bhi.w	85f70 <__udivmoddi4+0x2cc>
   85dfe:	4618      	mov	r0, r3
   85e00:	eba4 0408 	sub.w	r4, r4, r8
   85e04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85e08:	e79c      	b.n	85d44 <__udivmoddi4+0xa0>
   85e0a:	4629      	mov	r1, r5
   85e0c:	4628      	mov	r0, r5
   85e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85e12:	fa07 f70e 	lsl.w	r7, r7, lr
   85e16:	f1ce 0320 	rsb	r3, lr, #32
   85e1a:	fa26 f203 	lsr.w	r2, r6, r3
   85e1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85e22:	fbb2 f1fc 	udiv	r1, r2, ip
   85e26:	fa1f f887 	uxth.w	r8, r7
   85e2a:	fb0c 2211 	mls	r2, ip, r1, r2
   85e2e:	fa06 f60e 	lsl.w	r6, r6, lr
   85e32:	fa20 f303 	lsr.w	r3, r0, r3
   85e36:	fb01 f908 	mul.w	r9, r1, r8
   85e3a:	4333      	orrs	r3, r6
   85e3c:	0c1e      	lsrs	r6, r3, #16
   85e3e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85e42:	45b1      	cmp	r9, r6
   85e44:	fa00 f40e 	lsl.w	r4, r0, lr
   85e48:	d909      	bls.n	85e5e <__udivmoddi4+0x1ba>
   85e4a:	19f6      	adds	r6, r6, r7
   85e4c:	f101 32ff 	add.w	r2, r1, #4294967295
   85e50:	f080 808c 	bcs.w	85f6c <__udivmoddi4+0x2c8>
   85e54:	45b1      	cmp	r9, r6
   85e56:	f240 8089 	bls.w	85f6c <__udivmoddi4+0x2c8>
   85e5a:	3902      	subs	r1, #2
   85e5c:	443e      	add	r6, r7
   85e5e:	eba6 0609 	sub.w	r6, r6, r9
   85e62:	fbb6 f0fc 	udiv	r0, r6, ip
   85e66:	fb0c 6210 	mls	r2, ip, r0, r6
   85e6a:	fb00 f908 	mul.w	r9, r0, r8
   85e6e:	b29e      	uxth	r6, r3
   85e70:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85e74:	45b1      	cmp	r9, r6
   85e76:	d907      	bls.n	85e88 <__udivmoddi4+0x1e4>
   85e78:	19f6      	adds	r6, r6, r7
   85e7a:	f100 33ff 	add.w	r3, r0, #4294967295
   85e7e:	d271      	bcs.n	85f64 <__udivmoddi4+0x2c0>
   85e80:	45b1      	cmp	r9, r6
   85e82:	d96f      	bls.n	85f64 <__udivmoddi4+0x2c0>
   85e84:	3802      	subs	r0, #2
   85e86:	443e      	add	r6, r7
   85e88:	eba6 0609 	sub.w	r6, r6, r9
   85e8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85e90:	e78f      	b.n	85db2 <__udivmoddi4+0x10e>
   85e92:	f1c1 0720 	rsb	r7, r1, #32
   85e96:	fa22 f807 	lsr.w	r8, r2, r7
   85e9a:	408b      	lsls	r3, r1
   85e9c:	ea48 0303 	orr.w	r3, r8, r3
   85ea0:	fa26 f407 	lsr.w	r4, r6, r7
   85ea4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   85ea8:	fbb4 f9fe 	udiv	r9, r4, lr
   85eac:	fa1f fc83 	uxth.w	ip, r3
   85eb0:	fb0e 4419 	mls	r4, lr, r9, r4
   85eb4:	408e      	lsls	r6, r1
   85eb6:	fa20 f807 	lsr.w	r8, r0, r7
   85eba:	fb09 fa0c 	mul.w	sl, r9, ip
   85ebe:	ea48 0806 	orr.w	r8, r8, r6
   85ec2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   85ec6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85eca:	45a2      	cmp	sl, r4
   85ecc:	fa02 f201 	lsl.w	r2, r2, r1
   85ed0:	fa00 f601 	lsl.w	r6, r0, r1
   85ed4:	d908      	bls.n	85ee8 <__udivmoddi4+0x244>
   85ed6:	18e4      	adds	r4, r4, r3
   85ed8:	f109 30ff 	add.w	r0, r9, #4294967295
   85edc:	d244      	bcs.n	85f68 <__udivmoddi4+0x2c4>
   85ede:	45a2      	cmp	sl, r4
   85ee0:	d942      	bls.n	85f68 <__udivmoddi4+0x2c4>
   85ee2:	f1a9 0902 	sub.w	r9, r9, #2
   85ee6:	441c      	add	r4, r3
   85ee8:	eba4 040a 	sub.w	r4, r4, sl
   85eec:	fbb4 f0fe 	udiv	r0, r4, lr
   85ef0:	fb0e 4410 	mls	r4, lr, r0, r4
   85ef4:	fb00 fc0c 	mul.w	ip, r0, ip
   85ef8:	fa1f f888 	uxth.w	r8, r8
   85efc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85f00:	45a4      	cmp	ip, r4
   85f02:	d907      	bls.n	85f14 <__udivmoddi4+0x270>
   85f04:	18e4      	adds	r4, r4, r3
   85f06:	f100 3eff 	add.w	lr, r0, #4294967295
   85f0a:	d229      	bcs.n	85f60 <__udivmoddi4+0x2bc>
   85f0c:	45a4      	cmp	ip, r4
   85f0e:	d927      	bls.n	85f60 <__udivmoddi4+0x2bc>
   85f10:	3802      	subs	r0, #2
   85f12:	441c      	add	r4, r3
   85f14:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85f18:	fba0 8902 	umull	r8, r9, r0, r2
   85f1c:	eba4 0c0c 	sub.w	ip, r4, ip
   85f20:	45cc      	cmp	ip, r9
   85f22:	46c2      	mov	sl, r8
   85f24:	46ce      	mov	lr, r9
   85f26:	d315      	bcc.n	85f54 <__udivmoddi4+0x2b0>
   85f28:	d012      	beq.n	85f50 <__udivmoddi4+0x2ac>
   85f2a:	b155      	cbz	r5, 85f42 <__udivmoddi4+0x29e>
   85f2c:	ebb6 030a 	subs.w	r3, r6, sl
   85f30:	eb6c 060e 	sbc.w	r6, ip, lr
   85f34:	fa06 f707 	lsl.w	r7, r6, r7
   85f38:	40cb      	lsrs	r3, r1
   85f3a:	431f      	orrs	r7, r3
   85f3c:	40ce      	lsrs	r6, r1
   85f3e:	602f      	str	r7, [r5, #0]
   85f40:	606e      	str	r6, [r5, #4]
   85f42:	2100      	movs	r1, #0
   85f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85f48:	4610      	mov	r0, r2
   85f4a:	e6f7      	b.n	85d3c <__udivmoddi4+0x98>
   85f4c:	4689      	mov	r9, r1
   85f4e:	e6de      	b.n	85d0e <__udivmoddi4+0x6a>
   85f50:	4546      	cmp	r6, r8
   85f52:	d2ea      	bcs.n	85f2a <__udivmoddi4+0x286>
   85f54:	ebb8 0a02 	subs.w	sl, r8, r2
   85f58:	eb69 0e03 	sbc.w	lr, r9, r3
   85f5c:	3801      	subs	r0, #1
   85f5e:	e7e4      	b.n	85f2a <__udivmoddi4+0x286>
   85f60:	4670      	mov	r0, lr
   85f62:	e7d7      	b.n	85f14 <__udivmoddi4+0x270>
   85f64:	4618      	mov	r0, r3
   85f66:	e78f      	b.n	85e88 <__udivmoddi4+0x1e4>
   85f68:	4681      	mov	r9, r0
   85f6a:	e7bd      	b.n	85ee8 <__udivmoddi4+0x244>
   85f6c:	4611      	mov	r1, r2
   85f6e:	e776      	b.n	85e5e <__udivmoddi4+0x1ba>
   85f70:	3802      	subs	r0, #2
   85f72:	443c      	add	r4, r7
   85f74:	e744      	b.n	85e00 <__udivmoddi4+0x15c>
   85f76:	4608      	mov	r0, r1
   85f78:	e706      	b.n	85d88 <__udivmoddi4+0xe4>
   85f7a:	3a02      	subs	r2, #2
   85f7c:	443e      	add	r6, r7
   85f7e:	e72b      	b.n	85dd8 <__udivmoddi4+0x134>

00085f80 <__aeabi_idiv0>:
   85f80:	4770      	bx	lr
   85f82:	bf00      	nop

00085f84 <__libc_init_array>:
   85f84:	b570      	push	{r4, r5, r6, lr}
   85f86:	4e0f      	ldr	r6, [pc, #60]	; (85fc4 <__libc_init_array+0x40>)
   85f88:	4d0f      	ldr	r5, [pc, #60]	; (85fc8 <__libc_init_array+0x44>)
   85f8a:	1b76      	subs	r6, r6, r5
   85f8c:	10b6      	asrs	r6, r6, #2
   85f8e:	bf18      	it	ne
   85f90:	2400      	movne	r4, #0
   85f92:	d005      	beq.n	85fa0 <__libc_init_array+0x1c>
   85f94:	3401      	adds	r4, #1
   85f96:	f855 3b04 	ldr.w	r3, [r5], #4
   85f9a:	4798      	blx	r3
   85f9c:	42a6      	cmp	r6, r4
   85f9e:	d1f9      	bne.n	85f94 <__libc_init_array+0x10>
   85fa0:	4e0a      	ldr	r6, [pc, #40]	; (85fcc <__libc_init_array+0x48>)
   85fa2:	4d0b      	ldr	r5, [pc, #44]	; (85fd0 <__libc_init_array+0x4c>)
   85fa4:	f006 fa68 	bl	8c478 <_init>
   85fa8:	1b76      	subs	r6, r6, r5
   85faa:	10b6      	asrs	r6, r6, #2
   85fac:	bf18      	it	ne
   85fae:	2400      	movne	r4, #0
   85fb0:	d006      	beq.n	85fc0 <__libc_init_array+0x3c>
   85fb2:	3401      	adds	r4, #1
   85fb4:	f855 3b04 	ldr.w	r3, [r5], #4
   85fb8:	4798      	blx	r3
   85fba:	42a6      	cmp	r6, r4
   85fbc:	d1f9      	bne.n	85fb2 <__libc_init_array+0x2e>
   85fbe:	bd70      	pop	{r4, r5, r6, pc}
   85fc0:	bd70      	pop	{r4, r5, r6, pc}
   85fc2:	bf00      	nop
   85fc4:	0008c484 	.word	0x0008c484
   85fc8:	0008c484 	.word	0x0008c484
   85fcc:	0008c48c 	.word	0x0008c48c
   85fd0:	0008c484 	.word	0x0008c484

00085fd4 <iprintf>:
   85fd4:	b40f      	push	{r0, r1, r2, r3}
   85fd6:	b510      	push	{r4, lr}
   85fd8:	4b07      	ldr	r3, [pc, #28]	; (85ff8 <iprintf+0x24>)
   85fda:	b082      	sub	sp, #8
   85fdc:	ac04      	add	r4, sp, #16
   85fde:	f854 2b04 	ldr.w	r2, [r4], #4
   85fe2:	6818      	ldr	r0, [r3, #0]
   85fe4:	4623      	mov	r3, r4
   85fe6:	6881      	ldr	r1, [r0, #8]
   85fe8:	9401      	str	r4, [sp, #4]
   85fea:	f001 fce1 	bl	879b0 <_vfiprintf_r>
   85fee:	b002      	add	sp, #8
   85ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85ff4:	b004      	add	sp, #16
   85ff6:	4770      	bx	lr
   85ff8:	200009b0 	.word	0x200009b0

00085ffc <memcpy>:
   85ffc:	4684      	mov	ip, r0
   85ffe:	ea41 0300 	orr.w	r3, r1, r0
   86002:	f013 0303 	ands.w	r3, r3, #3
   86006:	d149      	bne.n	8609c <memcpy+0xa0>
   86008:	3a40      	subs	r2, #64	; 0x40
   8600a:	d323      	bcc.n	86054 <memcpy+0x58>
   8600c:	680b      	ldr	r3, [r1, #0]
   8600e:	6003      	str	r3, [r0, #0]
   86010:	684b      	ldr	r3, [r1, #4]
   86012:	6043      	str	r3, [r0, #4]
   86014:	688b      	ldr	r3, [r1, #8]
   86016:	6083      	str	r3, [r0, #8]
   86018:	68cb      	ldr	r3, [r1, #12]
   8601a:	60c3      	str	r3, [r0, #12]
   8601c:	690b      	ldr	r3, [r1, #16]
   8601e:	6103      	str	r3, [r0, #16]
   86020:	694b      	ldr	r3, [r1, #20]
   86022:	6143      	str	r3, [r0, #20]
   86024:	698b      	ldr	r3, [r1, #24]
   86026:	6183      	str	r3, [r0, #24]
   86028:	69cb      	ldr	r3, [r1, #28]
   8602a:	61c3      	str	r3, [r0, #28]
   8602c:	6a0b      	ldr	r3, [r1, #32]
   8602e:	6203      	str	r3, [r0, #32]
   86030:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86032:	6243      	str	r3, [r0, #36]	; 0x24
   86034:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86036:	6283      	str	r3, [r0, #40]	; 0x28
   86038:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8603a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8603c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8603e:	6303      	str	r3, [r0, #48]	; 0x30
   86040:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86042:	6343      	str	r3, [r0, #52]	; 0x34
   86044:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86046:	6383      	str	r3, [r0, #56]	; 0x38
   86048:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8604a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8604c:	3040      	adds	r0, #64	; 0x40
   8604e:	3140      	adds	r1, #64	; 0x40
   86050:	3a40      	subs	r2, #64	; 0x40
   86052:	d2db      	bcs.n	8600c <memcpy+0x10>
   86054:	3230      	adds	r2, #48	; 0x30
   86056:	d30b      	bcc.n	86070 <memcpy+0x74>
   86058:	680b      	ldr	r3, [r1, #0]
   8605a:	6003      	str	r3, [r0, #0]
   8605c:	684b      	ldr	r3, [r1, #4]
   8605e:	6043      	str	r3, [r0, #4]
   86060:	688b      	ldr	r3, [r1, #8]
   86062:	6083      	str	r3, [r0, #8]
   86064:	68cb      	ldr	r3, [r1, #12]
   86066:	60c3      	str	r3, [r0, #12]
   86068:	3010      	adds	r0, #16
   8606a:	3110      	adds	r1, #16
   8606c:	3a10      	subs	r2, #16
   8606e:	d2f3      	bcs.n	86058 <memcpy+0x5c>
   86070:	320c      	adds	r2, #12
   86072:	d305      	bcc.n	86080 <memcpy+0x84>
   86074:	f851 3b04 	ldr.w	r3, [r1], #4
   86078:	f840 3b04 	str.w	r3, [r0], #4
   8607c:	3a04      	subs	r2, #4
   8607e:	d2f9      	bcs.n	86074 <memcpy+0x78>
   86080:	3204      	adds	r2, #4
   86082:	d008      	beq.n	86096 <memcpy+0x9a>
   86084:	07d2      	lsls	r2, r2, #31
   86086:	bf1c      	itt	ne
   86088:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8608c:	f800 3b01 	strbne.w	r3, [r0], #1
   86090:	d301      	bcc.n	86096 <memcpy+0x9a>
   86092:	880b      	ldrh	r3, [r1, #0]
   86094:	8003      	strh	r3, [r0, #0]
   86096:	4660      	mov	r0, ip
   86098:	4770      	bx	lr
   8609a:	bf00      	nop
   8609c:	2a08      	cmp	r2, #8
   8609e:	d313      	bcc.n	860c8 <memcpy+0xcc>
   860a0:	078b      	lsls	r3, r1, #30
   860a2:	d0b1      	beq.n	86008 <memcpy+0xc>
   860a4:	f010 0303 	ands.w	r3, r0, #3
   860a8:	d0ae      	beq.n	86008 <memcpy+0xc>
   860aa:	f1c3 0304 	rsb	r3, r3, #4
   860ae:	1ad2      	subs	r2, r2, r3
   860b0:	07db      	lsls	r3, r3, #31
   860b2:	bf1c      	itt	ne
   860b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   860b8:	f800 3b01 	strbne.w	r3, [r0], #1
   860bc:	d3a4      	bcc.n	86008 <memcpy+0xc>
   860be:	f831 3b02 	ldrh.w	r3, [r1], #2
   860c2:	f820 3b02 	strh.w	r3, [r0], #2
   860c6:	e79f      	b.n	86008 <memcpy+0xc>
   860c8:	3a04      	subs	r2, #4
   860ca:	d3d9      	bcc.n	86080 <memcpy+0x84>
   860cc:	3a01      	subs	r2, #1
   860ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   860d2:	f800 3b01 	strb.w	r3, [r0], #1
   860d6:	d2f9      	bcs.n	860cc <memcpy+0xd0>
   860d8:	780b      	ldrb	r3, [r1, #0]
   860da:	7003      	strb	r3, [r0, #0]
   860dc:	784b      	ldrb	r3, [r1, #1]
   860de:	7043      	strb	r3, [r0, #1]
   860e0:	788b      	ldrb	r3, [r1, #2]
   860e2:	7083      	strb	r3, [r0, #2]
   860e4:	4660      	mov	r0, ip
   860e6:	4770      	bx	lr

000860e8 <memset>:
   860e8:	b470      	push	{r4, r5, r6}
   860ea:	0786      	lsls	r6, r0, #30
   860ec:	d046      	beq.n	8617c <memset+0x94>
   860ee:	1e54      	subs	r4, r2, #1
   860f0:	2a00      	cmp	r2, #0
   860f2:	d041      	beq.n	86178 <memset+0x90>
   860f4:	b2ca      	uxtb	r2, r1
   860f6:	4603      	mov	r3, r0
   860f8:	e002      	b.n	86100 <memset+0x18>
   860fa:	f114 34ff 	adds.w	r4, r4, #4294967295
   860fe:	d33b      	bcc.n	86178 <memset+0x90>
   86100:	f803 2b01 	strb.w	r2, [r3], #1
   86104:	079d      	lsls	r5, r3, #30
   86106:	d1f8      	bne.n	860fa <memset+0x12>
   86108:	2c03      	cmp	r4, #3
   8610a:	d92e      	bls.n	8616a <memset+0x82>
   8610c:	b2cd      	uxtb	r5, r1
   8610e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86112:	2c0f      	cmp	r4, #15
   86114:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86118:	d919      	bls.n	8614e <memset+0x66>
   8611a:	4626      	mov	r6, r4
   8611c:	f103 0210 	add.w	r2, r3, #16
   86120:	3e10      	subs	r6, #16
   86122:	2e0f      	cmp	r6, #15
   86124:	f842 5c10 	str.w	r5, [r2, #-16]
   86128:	f842 5c0c 	str.w	r5, [r2, #-12]
   8612c:	f842 5c08 	str.w	r5, [r2, #-8]
   86130:	f842 5c04 	str.w	r5, [r2, #-4]
   86134:	f102 0210 	add.w	r2, r2, #16
   86138:	d8f2      	bhi.n	86120 <memset+0x38>
   8613a:	f1a4 0210 	sub.w	r2, r4, #16
   8613e:	f022 020f 	bic.w	r2, r2, #15
   86142:	f004 040f 	and.w	r4, r4, #15
   86146:	3210      	adds	r2, #16
   86148:	2c03      	cmp	r4, #3
   8614a:	4413      	add	r3, r2
   8614c:	d90d      	bls.n	8616a <memset+0x82>
   8614e:	461e      	mov	r6, r3
   86150:	4622      	mov	r2, r4
   86152:	3a04      	subs	r2, #4
   86154:	2a03      	cmp	r2, #3
   86156:	f846 5b04 	str.w	r5, [r6], #4
   8615a:	d8fa      	bhi.n	86152 <memset+0x6a>
   8615c:	1f22      	subs	r2, r4, #4
   8615e:	f022 0203 	bic.w	r2, r2, #3
   86162:	3204      	adds	r2, #4
   86164:	4413      	add	r3, r2
   86166:	f004 0403 	and.w	r4, r4, #3
   8616a:	b12c      	cbz	r4, 86178 <memset+0x90>
   8616c:	b2c9      	uxtb	r1, r1
   8616e:	441c      	add	r4, r3
   86170:	f803 1b01 	strb.w	r1, [r3], #1
   86174:	429c      	cmp	r4, r3
   86176:	d1fb      	bne.n	86170 <memset+0x88>
   86178:	bc70      	pop	{r4, r5, r6}
   8617a:	4770      	bx	lr
   8617c:	4614      	mov	r4, r2
   8617e:	4603      	mov	r3, r0
   86180:	e7c2      	b.n	86108 <memset+0x20>
   86182:	bf00      	nop

00086184 <setbuf>:
   86184:	2900      	cmp	r1, #0
   86186:	bf0c      	ite	eq
   86188:	2202      	moveq	r2, #2
   8618a:	2200      	movne	r2, #0
   8618c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86190:	f000 b800 	b.w	86194 <setvbuf>

00086194 <setvbuf>:
   86194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86198:	4d61      	ldr	r5, [pc, #388]	; (86320 <setvbuf+0x18c>)
   8619a:	b083      	sub	sp, #12
   8619c:	682d      	ldr	r5, [r5, #0]
   8619e:	4604      	mov	r4, r0
   861a0:	460f      	mov	r7, r1
   861a2:	4690      	mov	r8, r2
   861a4:	461e      	mov	r6, r3
   861a6:	b115      	cbz	r5, 861ae <setvbuf+0x1a>
   861a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   861aa:	2b00      	cmp	r3, #0
   861ac:	d064      	beq.n	86278 <setvbuf+0xe4>
   861ae:	f1b8 0f02 	cmp.w	r8, #2
   861b2:	d006      	beq.n	861c2 <setvbuf+0x2e>
   861b4:	f1b8 0f01 	cmp.w	r8, #1
   861b8:	f200 809f 	bhi.w	862fa <setvbuf+0x166>
   861bc:	2e00      	cmp	r6, #0
   861be:	f2c0 809c 	blt.w	862fa <setvbuf+0x166>
   861c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   861c4:	07d8      	lsls	r0, r3, #31
   861c6:	d534      	bpl.n	86232 <setvbuf+0x9e>
   861c8:	4621      	mov	r1, r4
   861ca:	4628      	mov	r0, r5
   861cc:	f003 fb3e 	bl	8984c <_fflush_r>
   861d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   861d2:	b141      	cbz	r1, 861e6 <setvbuf+0x52>
   861d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   861d8:	4299      	cmp	r1, r3
   861da:	d002      	beq.n	861e2 <setvbuf+0x4e>
   861dc:	4628      	mov	r0, r5
   861de:	f003 fcb3 	bl	89b48 <_free_r>
   861e2:	2300      	movs	r3, #0
   861e4:	6323      	str	r3, [r4, #48]	; 0x30
   861e6:	2200      	movs	r2, #0
   861e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   861ec:	61a2      	str	r2, [r4, #24]
   861ee:	6062      	str	r2, [r4, #4]
   861f0:	061a      	lsls	r2, r3, #24
   861f2:	d43a      	bmi.n	8626a <setvbuf+0xd6>
   861f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   861f8:	f023 0303 	bic.w	r3, r3, #3
   861fc:	f1b8 0f02 	cmp.w	r8, #2
   86200:	81a3      	strh	r3, [r4, #12]
   86202:	d01d      	beq.n	86240 <setvbuf+0xac>
   86204:	ab01      	add	r3, sp, #4
   86206:	466a      	mov	r2, sp
   86208:	4621      	mov	r1, r4
   8620a:	4628      	mov	r0, r5
   8620c:	f003 ff48 	bl	8a0a0 <__swhatbuf_r>
   86210:	89a3      	ldrh	r3, [r4, #12]
   86212:	4318      	orrs	r0, r3
   86214:	81a0      	strh	r0, [r4, #12]
   86216:	2e00      	cmp	r6, #0
   86218:	d132      	bne.n	86280 <setvbuf+0xec>
   8621a:	9e00      	ldr	r6, [sp, #0]
   8621c:	4630      	mov	r0, r6
   8621e:	f003 ffb7 	bl	8a190 <malloc>
   86222:	4607      	mov	r7, r0
   86224:	2800      	cmp	r0, #0
   86226:	d06b      	beq.n	86300 <setvbuf+0x16c>
   86228:	89a3      	ldrh	r3, [r4, #12]
   8622a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8622e:	81a3      	strh	r3, [r4, #12]
   86230:	e028      	b.n	86284 <setvbuf+0xf0>
   86232:	89a3      	ldrh	r3, [r4, #12]
   86234:	0599      	lsls	r1, r3, #22
   86236:	d4c7      	bmi.n	861c8 <setvbuf+0x34>
   86238:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8623a:	f003 ff2d 	bl	8a098 <__retarget_lock_acquire_recursive>
   8623e:	e7c3      	b.n	861c8 <setvbuf+0x34>
   86240:	2500      	movs	r5, #0
   86242:	2600      	movs	r6, #0
   86244:	2001      	movs	r0, #1
   86246:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86248:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8624c:	f043 0302 	orr.w	r3, r3, #2
   86250:	60a6      	str	r6, [r4, #8]
   86252:	07ce      	lsls	r6, r1, #31
   86254:	81a3      	strh	r3, [r4, #12]
   86256:	6160      	str	r0, [r4, #20]
   86258:	6022      	str	r2, [r4, #0]
   8625a:	6122      	str	r2, [r4, #16]
   8625c:	d401      	bmi.n	86262 <setvbuf+0xce>
   8625e:	0598      	lsls	r0, r3, #22
   86260:	d53e      	bpl.n	862e0 <setvbuf+0x14c>
   86262:	4628      	mov	r0, r5
   86264:	b003      	add	sp, #12
   86266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8626a:	6921      	ldr	r1, [r4, #16]
   8626c:	4628      	mov	r0, r5
   8626e:	f003 fc6b 	bl	89b48 <_free_r>
   86272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86276:	e7bd      	b.n	861f4 <setvbuf+0x60>
   86278:	4628      	mov	r0, r5
   8627a:	f003 fb3f 	bl	898fc <__sinit>
   8627e:	e796      	b.n	861ae <setvbuf+0x1a>
   86280:	2f00      	cmp	r7, #0
   86282:	d0cb      	beq.n	8621c <setvbuf+0x88>
   86284:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86286:	2b00      	cmp	r3, #0
   86288:	d033      	beq.n	862f2 <setvbuf+0x15e>
   8628a:	9b00      	ldr	r3, [sp, #0]
   8628c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86290:	429e      	cmp	r6, r3
   86292:	bf1c      	itt	ne
   86294:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   86298:	81a2      	strhne	r2, [r4, #12]
   8629a:	f1b8 0f01 	cmp.w	r8, #1
   8629e:	bf04      	itt	eq
   862a0:	f042 0201 	orreq.w	r2, r2, #1
   862a4:	81a2      	strheq	r2, [r4, #12]
   862a6:	b292      	uxth	r2, r2
   862a8:	f012 0308 	ands.w	r3, r2, #8
   862ac:	6027      	str	r7, [r4, #0]
   862ae:	6127      	str	r7, [r4, #16]
   862b0:	6166      	str	r6, [r4, #20]
   862b2:	d00e      	beq.n	862d2 <setvbuf+0x13e>
   862b4:	07d1      	lsls	r1, r2, #31
   862b6:	d51a      	bpl.n	862ee <setvbuf+0x15a>
   862b8:	2300      	movs	r3, #0
   862ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
   862bc:	4276      	negs	r6, r6
   862be:	f015 0501 	ands.w	r5, r5, #1
   862c2:	61a6      	str	r6, [r4, #24]
   862c4:	60a3      	str	r3, [r4, #8]
   862c6:	d009      	beq.n	862dc <setvbuf+0x148>
   862c8:	2500      	movs	r5, #0
   862ca:	4628      	mov	r0, r5
   862cc:	b003      	add	sp, #12
   862ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   862d2:	60a3      	str	r3, [r4, #8]
   862d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   862d6:	f015 0501 	ands.w	r5, r5, #1
   862da:	d1f5      	bne.n	862c8 <setvbuf+0x134>
   862dc:	0593      	lsls	r3, r2, #22
   862de:	d4c0      	bmi.n	86262 <setvbuf+0xce>
   862e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   862e2:	f003 fedb 	bl	8a09c <__retarget_lock_release_recursive>
   862e6:	4628      	mov	r0, r5
   862e8:	b003      	add	sp, #12
   862ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   862ee:	60a6      	str	r6, [r4, #8]
   862f0:	e7f0      	b.n	862d4 <setvbuf+0x140>
   862f2:	4628      	mov	r0, r5
   862f4:	f003 fb02 	bl	898fc <__sinit>
   862f8:	e7c7      	b.n	8628a <setvbuf+0xf6>
   862fa:	f04f 35ff 	mov.w	r5, #4294967295
   862fe:	e7b0      	b.n	86262 <setvbuf+0xce>
   86300:	f8dd 9000 	ldr.w	r9, [sp]
   86304:	45b1      	cmp	r9, r6
   86306:	d004      	beq.n	86312 <setvbuf+0x17e>
   86308:	4648      	mov	r0, r9
   8630a:	f003 ff41 	bl	8a190 <malloc>
   8630e:	4607      	mov	r7, r0
   86310:	b920      	cbnz	r0, 8631c <setvbuf+0x188>
   86312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86316:	f04f 35ff 	mov.w	r5, #4294967295
   8631a:	e792      	b.n	86242 <setvbuf+0xae>
   8631c:	464e      	mov	r6, r9
   8631e:	e783      	b.n	86228 <setvbuf+0x94>
   86320:	200009b0 	.word	0x200009b0

00086324 <sprintf>:
   86324:	b40e      	push	{r1, r2, r3}
   86326:	4601      	mov	r1, r0
   86328:	b5f0      	push	{r4, r5, r6, r7, lr}
   8632a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8632e:	f44f 7702 	mov.w	r7, #520	; 0x208
   86332:	f64f 76ff 	movw	r6, #65535	; 0xffff
   86336:	b09c      	sub	sp, #112	; 0x70
   86338:	ac21      	add	r4, sp, #132	; 0x84
   8633a:	f854 2b04 	ldr.w	r2, [r4], #4
   8633e:	4b0b      	ldr	r3, [pc, #44]	; (8636c <sprintf+0x48>)
   86340:	9102      	str	r1, [sp, #8]
   86342:	9106      	str	r1, [sp, #24]
   86344:	6818      	ldr	r0, [r3, #0]
   86346:	a902      	add	r1, sp, #8
   86348:	4623      	mov	r3, r4
   8634a:	9401      	str	r4, [sp, #4]
   8634c:	f8ad 7014 	strh.w	r7, [sp, #20]
   86350:	9504      	str	r5, [sp, #16]
   86352:	9507      	str	r5, [sp, #28]
   86354:	f8ad 6016 	strh.w	r6, [sp, #22]
   86358:	f000 f86a 	bl	86430 <_svfprintf_r>
   8635c:	2200      	movs	r2, #0
   8635e:	9b02      	ldr	r3, [sp, #8]
   86360:	701a      	strb	r2, [r3, #0]
   86362:	b01c      	add	sp, #112	; 0x70
   86364:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   86368:	b003      	add	sp, #12
   8636a:	4770      	bx	lr
   8636c:	200009b0 	.word	0x200009b0

00086370 <strlen>:
   86370:	f020 0103 	bic.w	r1, r0, #3
   86374:	f010 0003 	ands.w	r0, r0, #3
   86378:	f1c0 0000 	rsb	r0, r0, #0
   8637c:	f851 3b04 	ldr.w	r3, [r1], #4
   86380:	f100 0c04 	add.w	ip, r0, #4
   86384:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86388:	f06f 0200 	mvn.w	r2, #0
   8638c:	bf1c      	itt	ne
   8638e:	fa22 f20c 	lsrne.w	r2, r2, ip
   86392:	4313      	orrne	r3, r2
   86394:	f04f 0c01 	mov.w	ip, #1
   86398:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8639c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   863a0:	eba3 020c 	sub.w	r2, r3, ip
   863a4:	ea22 0203 	bic.w	r2, r2, r3
   863a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   863ac:	bf04      	itt	eq
   863ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   863b2:	3004      	addeq	r0, #4
   863b4:	d0f4      	beq.n	863a0 <strlen+0x30>
   863b6:	f1c2 0100 	rsb	r1, r2, #0
   863ba:	ea02 0201 	and.w	r2, r2, r1
   863be:	fab2 f282 	clz	r2, r2
   863c2:	f1c2 021f 	rsb	r2, r2, #31
   863c6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   863ca:	4770      	bx	lr

000863cc <strncpy>:
   863cc:	ea40 0301 	orr.w	r3, r0, r1
   863d0:	f013 0f03 	tst.w	r3, #3
   863d4:	b470      	push	{r4, r5, r6}
   863d6:	4603      	mov	r3, r0
   863d8:	d024      	beq.n	86424 <strncpy+0x58>
   863da:	b1a2      	cbz	r2, 86406 <strncpy+0x3a>
   863dc:	780c      	ldrb	r4, [r1, #0]
   863de:	3a01      	subs	r2, #1
   863e0:	701c      	strb	r4, [r3, #0]
   863e2:	3101      	adds	r1, #1
   863e4:	3301      	adds	r3, #1
   863e6:	b13c      	cbz	r4, 863f8 <strncpy+0x2c>
   863e8:	b16a      	cbz	r2, 86406 <strncpy+0x3a>
   863ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   863ee:	3a01      	subs	r2, #1
   863f0:	f803 4b01 	strb.w	r4, [r3], #1
   863f4:	2c00      	cmp	r4, #0
   863f6:	d1f7      	bne.n	863e8 <strncpy+0x1c>
   863f8:	b12a      	cbz	r2, 86406 <strncpy+0x3a>
   863fa:	2100      	movs	r1, #0
   863fc:	441a      	add	r2, r3
   863fe:	f803 1b01 	strb.w	r1, [r3], #1
   86402:	429a      	cmp	r2, r3
   86404:	d1fb      	bne.n	863fe <strncpy+0x32>
   86406:	bc70      	pop	{r4, r5, r6}
   86408:	4770      	bx	lr
   8640a:	460e      	mov	r6, r1
   8640c:	f851 5b04 	ldr.w	r5, [r1], #4
   86410:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86414:	ea24 0405 	bic.w	r4, r4, r5
   86418:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   8641c:	d105      	bne.n	8642a <strncpy+0x5e>
   8641e:	3a04      	subs	r2, #4
   86420:	f843 5b04 	str.w	r5, [r3], #4
   86424:	2a03      	cmp	r2, #3
   86426:	d8f0      	bhi.n	8640a <strncpy+0x3e>
   86428:	e7d7      	b.n	863da <strncpy+0xe>
   8642a:	4631      	mov	r1, r6
   8642c:	e7d6      	b.n	863dc <strncpy+0x10>
   8642e:	bf00      	nop

00086430 <_svfprintf_r>:
   86430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86434:	b0c3      	sub	sp, #268	; 0x10c
   86436:	460c      	mov	r4, r1
   86438:	910b      	str	r1, [sp, #44]	; 0x2c
   8643a:	4692      	mov	sl, r2
   8643c:	930f      	str	r3, [sp, #60]	; 0x3c
   8643e:	900c      	str	r0, [sp, #48]	; 0x30
   86440:	f003 fe18 	bl	8a074 <_localeconv_r>
   86444:	6803      	ldr	r3, [r0, #0]
   86446:	4618      	mov	r0, r3
   86448:	931a      	str	r3, [sp, #104]	; 0x68
   8644a:	f7ff ff91 	bl	86370 <strlen>
   8644e:	89a3      	ldrh	r3, [r4, #12]
   86450:	9019      	str	r0, [sp, #100]	; 0x64
   86452:	0619      	lsls	r1, r3, #24
   86454:	d503      	bpl.n	8645e <_svfprintf_r+0x2e>
   86456:	6923      	ldr	r3, [r4, #16]
   86458:	2b00      	cmp	r3, #0
   8645a:	f001 8035 	beq.w	874c8 <_svfprintf_r+0x1098>
   8645e:	2300      	movs	r3, #0
   86460:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   86464:	46c8      	mov	r8, r9
   86466:	9315      	str	r3, [sp, #84]	; 0x54
   86468:	9313      	str	r3, [sp, #76]	; 0x4c
   8646a:	9314      	str	r3, [sp, #80]	; 0x50
   8646c:	9318      	str	r3, [sp, #96]	; 0x60
   8646e:	931b      	str	r3, [sp, #108]	; 0x6c
   86470:	9309      	str	r3, [sp, #36]	; 0x24
   86472:	9316      	str	r3, [sp, #88]	; 0x58
   86474:	9317      	str	r3, [sp, #92]	; 0x5c
   86476:	9327      	str	r3, [sp, #156]	; 0x9c
   86478:	9326      	str	r3, [sp, #152]	; 0x98
   8647a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8647e:	f89a 3000 	ldrb.w	r3, [sl]
   86482:	4654      	mov	r4, sl
   86484:	b1eb      	cbz	r3, 864c2 <_svfprintf_r+0x92>
   86486:	2b25      	cmp	r3, #37	; 0x25
   86488:	d102      	bne.n	86490 <_svfprintf_r+0x60>
   8648a:	e01a      	b.n	864c2 <_svfprintf_r+0x92>
   8648c:	2b25      	cmp	r3, #37	; 0x25
   8648e:	d003      	beq.n	86498 <_svfprintf_r+0x68>
   86490:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86494:	2b00      	cmp	r3, #0
   86496:	d1f9      	bne.n	8648c <_svfprintf_r+0x5c>
   86498:	eba4 050a 	sub.w	r5, r4, sl
   8649c:	b18d      	cbz	r5, 864c2 <_svfprintf_r+0x92>
   8649e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   864a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   864a2:	3301      	adds	r3, #1
   864a4:	442a      	add	r2, r5
   864a6:	2b07      	cmp	r3, #7
   864a8:	f8c8 a000 	str.w	sl, [r8]
   864ac:	f8c8 5004 	str.w	r5, [r8, #4]
   864b0:	9227      	str	r2, [sp, #156]	; 0x9c
   864b2:	9326      	str	r3, [sp, #152]	; 0x98
   864b4:	f300 808a 	bgt.w	865cc <_svfprintf_r+0x19c>
   864b8:	f108 0808 	add.w	r8, r8, #8
   864bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   864be:	442b      	add	r3, r5
   864c0:	9309      	str	r3, [sp, #36]	; 0x24
   864c2:	7823      	ldrb	r3, [r4, #0]
   864c4:	2b00      	cmp	r3, #0
   864c6:	f000 8089 	beq.w	865dc <_svfprintf_r+0x1ac>
   864ca:	2300      	movs	r3, #0
   864cc:	f04f 30ff 	mov.w	r0, #4294967295
   864d0:	461a      	mov	r2, r3
   864d2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   864d6:	4619      	mov	r1, r3
   864d8:	930d      	str	r3, [sp, #52]	; 0x34
   864da:	469b      	mov	fp, r3
   864dc:	7863      	ldrb	r3, [r4, #1]
   864de:	f104 0a01 	add.w	sl, r4, #1
   864e2:	900a      	str	r0, [sp, #40]	; 0x28
   864e4:	f10a 0a01 	add.w	sl, sl, #1
   864e8:	f1a3 0020 	sub.w	r0, r3, #32
   864ec:	2858      	cmp	r0, #88	; 0x58
   864ee:	f200 83b7 	bhi.w	86c60 <_svfprintf_r+0x830>
   864f2:	e8df f010 	tbh	[pc, r0, lsl #1]
   864f6:	034c      	.short	0x034c
   864f8:	03b503b5 	.word	0x03b503b5
   864fc:	03b50354 	.word	0x03b50354
   86500:	03b503b5 	.word	0x03b503b5
   86504:	03b503b5 	.word	0x03b503b5
   86508:	005903b5 	.word	0x005903b5
   8650c:	03b50359 	.word	0x03b50359
   86510:	02140066 	.word	0x02140066
   86514:	022f03b5 	.word	0x022f03b5
   86518:	03a503a5 	.word	0x03a503a5
   8651c:	03a503a5 	.word	0x03a503a5
   86520:	03a503a5 	.word	0x03a503a5
   86524:	03a503a5 	.word	0x03a503a5
   86528:	03b503a5 	.word	0x03b503a5
   8652c:	03b503b5 	.word	0x03b503b5
   86530:	03b503b5 	.word	0x03b503b5
   86534:	03b503b5 	.word	0x03b503b5
   86538:	03b503b5 	.word	0x03b503b5
   8653c:	028b03b5 	.word	0x028b03b5
   86540:	03b502d3 	.word	0x03b502d3
   86544:	03b502d3 	.word	0x03b502d3
   86548:	03b503b5 	.word	0x03b503b5
   8654c:	031b03b5 	.word	0x031b03b5
   86550:	03b503b5 	.word	0x03b503b5
   86554:	03b50320 	.word	0x03b50320
   86558:	03b503b5 	.word	0x03b503b5
   8655c:	03b503b5 	.word	0x03b503b5
   86560:	03b50234 	.word	0x03b50234
   86564:	024b03b5 	.word	0x024b03b5
   86568:	03b503b5 	.word	0x03b503b5
   8656c:	03b503b5 	.word	0x03b503b5
   86570:	03b503b5 	.word	0x03b503b5
   86574:	03b503b5 	.word	0x03b503b5
   86578:	03b503b5 	.word	0x03b503b5
   8657c:	039e0276 	.word	0x039e0276
   86580:	02d302d3 	.word	0x02d302d3
   86584:	036302d3 	.word	0x036302d3
   86588:	03b5039e 	.word	0x03b5039e
   8658c:	036803b5 	.word	0x036803b5
   86590:	037503b5 	.word	0x037503b5
   86594:	038c01dd 	.word	0x038c01dd
   86598:	03b5035e 	.word	0x03b5035e
   8659c:	03b501f2 	.word	0x03b501f2
   865a0:	03b50087 	.word	0x03b50087
   865a4:	033203b5 	.word	0x033203b5
   865a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   865aa:	6823      	ldr	r3, [r4, #0]
   865ac:	4618      	mov	r0, r3
   865ae:	930d      	str	r3, [sp, #52]	; 0x34
   865b0:	4623      	mov	r3, r4
   865b2:	2800      	cmp	r0, #0
   865b4:	f103 0304 	add.w	r3, r3, #4
   865b8:	930f      	str	r3, [sp, #60]	; 0x3c
   865ba:	da04      	bge.n	865c6 <_svfprintf_r+0x196>
   865bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   865be:	425b      	negs	r3, r3
   865c0:	930d      	str	r3, [sp, #52]	; 0x34
   865c2:	f04b 0b04 	orr.w	fp, fp, #4
   865c6:	f89a 3000 	ldrb.w	r3, [sl]
   865ca:	e78b      	b.n	864e4 <_svfprintf_r+0xb4>
   865cc:	aa25      	add	r2, sp, #148	; 0x94
   865ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   865d2:	f004 fe5b 	bl	8b28c <__ssprint_r>
   865d6:	b940      	cbnz	r0, 865ea <_svfprintf_r+0x1ba>
   865d8:	46c8      	mov	r8, r9
   865da:	e76f      	b.n	864bc <_svfprintf_r+0x8c>
   865dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   865de:	b123      	cbz	r3, 865ea <_svfprintf_r+0x1ba>
   865e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   865e2:	aa25      	add	r2, sp, #148	; 0x94
   865e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   865e6:	f004 fe51 	bl	8b28c <__ssprint_r>
   865ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   865ec:	899b      	ldrh	r3, [r3, #12]
   865ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   865f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   865f4:	bf18      	it	ne
   865f6:	f04f 33ff 	movne.w	r3, #4294967295
   865fa:	9309      	str	r3, [sp, #36]	; 0x24
   865fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   865fe:	b043      	add	sp, #268	; 0x10c
   86600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86604:	f01b 0f20 	tst.w	fp, #32
   86608:	9311      	str	r3, [sp, #68]	; 0x44
   8660a:	f040 81af 	bne.w	8696c <_svfprintf_r+0x53c>
   8660e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86610:	f01b 0f10 	tst.w	fp, #16
   86614:	4613      	mov	r3, r2
   86616:	f040 859a 	bne.w	8714e <_svfprintf_r+0xd1e>
   8661a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8661e:	f000 8596 	beq.w	8714e <_svfprintf_r+0xd1e>
   86622:	2500      	movs	r5, #0
   86624:	2301      	movs	r3, #1
   86626:	8814      	ldrh	r4, [r2, #0]
   86628:	3204      	adds	r2, #4
   8662a:	920f      	str	r2, [sp, #60]	; 0x3c
   8662c:	2200      	movs	r2, #0
   8662e:	4617      	mov	r7, r2
   86630:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   86634:	990a      	ldr	r1, [sp, #40]	; 0x28
   86636:	1c4a      	adds	r2, r1, #1
   86638:	f000 8210 	beq.w	86a5c <_svfprintf_r+0x62c>
   8663c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   86640:	9207      	str	r2, [sp, #28]
   86642:	ea54 0205 	orrs.w	r2, r4, r5
   86646:	f040 820f 	bne.w	86a68 <_svfprintf_r+0x638>
   8664a:	2900      	cmp	r1, #0
   8664c:	f040 8431 	bne.w	86eb2 <_svfprintf_r+0xa82>
   86650:	2b00      	cmp	r3, #0
   86652:	f040 8539 	bne.w	870c8 <_svfprintf_r+0xc98>
   86656:	f01b 0301 	ands.w	r3, fp, #1
   8665a:	930e      	str	r3, [sp, #56]	; 0x38
   8665c:	f000 8662 	beq.w	87324 <_svfprintf_r+0xef4>
   86660:	2330      	movs	r3, #48	; 0x30
   86662:	ae42      	add	r6, sp, #264	; 0x108
   86664:	f806 3d41 	strb.w	r3, [r6, #-65]!
   86668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8666a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8666c:	4293      	cmp	r3, r2
   8666e:	bfb8      	it	lt
   86670:	4613      	movlt	r3, r2
   86672:	9308      	str	r3, [sp, #32]
   86674:	2300      	movs	r3, #0
   86676:	9312      	str	r3, [sp, #72]	; 0x48
   86678:	b117      	cbz	r7, 86680 <_svfprintf_r+0x250>
   8667a:	9b08      	ldr	r3, [sp, #32]
   8667c:	3301      	adds	r3, #1
   8667e:	9308      	str	r3, [sp, #32]
   86680:	9b07      	ldr	r3, [sp, #28]
   86682:	f013 0302 	ands.w	r3, r3, #2
   86686:	9310      	str	r3, [sp, #64]	; 0x40
   86688:	d002      	beq.n	86690 <_svfprintf_r+0x260>
   8668a:	9b08      	ldr	r3, [sp, #32]
   8668c:	3302      	adds	r3, #2
   8668e:	9308      	str	r3, [sp, #32]
   86690:	9b07      	ldr	r3, [sp, #28]
   86692:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   86696:	f040 8310 	bne.w	86cba <_svfprintf_r+0x88a>
   8669a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8669c:	9a08      	ldr	r2, [sp, #32]
   8669e:	eba3 0b02 	sub.w	fp, r3, r2
   866a2:	f1bb 0f00 	cmp.w	fp, #0
   866a6:	f340 8308 	ble.w	86cba <_svfprintf_r+0x88a>
   866aa:	f1bb 0f10 	cmp.w	fp, #16
   866ae:	f340 87b2 	ble.w	87616 <_svfprintf_r+0x11e6>
   866b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   866b4:	4643      	mov	r3, r8
   866b6:	4621      	mov	r1, r4
   866b8:	46a8      	mov	r8, r5
   866ba:	2710      	movs	r7, #16
   866bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   866be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   866c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   866c2:	e006      	b.n	866d2 <_svfprintf_r+0x2a2>
   866c4:	f1ab 0b10 	sub.w	fp, fp, #16
   866c8:	f1bb 0f10 	cmp.w	fp, #16
   866cc:	f103 0308 	add.w	r3, r3, #8
   866d0:	dd18      	ble.n	86704 <_svfprintf_r+0x2d4>
   866d2:	3201      	adds	r2, #1
   866d4:	48ab      	ldr	r0, [pc, #684]	; (86984 <_svfprintf_r+0x554>)
   866d6:	3110      	adds	r1, #16
   866d8:	2a07      	cmp	r2, #7
   866da:	9127      	str	r1, [sp, #156]	; 0x9c
   866dc:	9226      	str	r2, [sp, #152]	; 0x98
   866de:	e883 0081 	stmia.w	r3, {r0, r7}
   866e2:	ddef      	ble.n	866c4 <_svfprintf_r+0x294>
   866e4:	aa25      	add	r2, sp, #148	; 0x94
   866e6:	4629      	mov	r1, r5
   866e8:	4620      	mov	r0, r4
   866ea:	f004 fdcf 	bl	8b28c <__ssprint_r>
   866ee:	2800      	cmp	r0, #0
   866f0:	f47f af7b 	bne.w	865ea <_svfprintf_r+0x1ba>
   866f4:	f1ab 0b10 	sub.w	fp, fp, #16
   866f8:	f1bb 0f10 	cmp.w	fp, #16
   866fc:	464b      	mov	r3, r9
   866fe:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86700:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86702:	dce6      	bgt.n	866d2 <_svfprintf_r+0x2a2>
   86704:	4645      	mov	r5, r8
   86706:	460c      	mov	r4, r1
   86708:	4698      	mov	r8, r3
   8670a:	3201      	adds	r2, #1
   8670c:	4b9d      	ldr	r3, [pc, #628]	; (86984 <_svfprintf_r+0x554>)
   8670e:	445c      	add	r4, fp
   86710:	2a07      	cmp	r2, #7
   86712:	9427      	str	r4, [sp, #156]	; 0x9c
   86714:	9226      	str	r2, [sp, #152]	; 0x98
   86716:	e888 0808 	stmia.w	r8, {r3, fp}
   8671a:	f300 82c3 	bgt.w	86ca4 <_svfprintf_r+0x874>
   8671e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86722:	f108 0808 	add.w	r8, r8, #8
   86726:	b187      	cbz	r7, 8674a <_svfprintf_r+0x31a>
   86728:	2101      	movs	r1, #1
   8672a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8672c:	440c      	add	r4, r1
   8672e:	440b      	add	r3, r1
   86730:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   86734:	2b07      	cmp	r3, #7
   86736:	9427      	str	r4, [sp, #156]	; 0x9c
   86738:	9326      	str	r3, [sp, #152]	; 0x98
   8673a:	f8c8 1004 	str.w	r1, [r8, #4]
   8673e:	f8c8 2000 	str.w	r2, [r8]
   86742:	f300 83cd 	bgt.w	86ee0 <_svfprintf_r+0xab0>
   86746:	f108 0808 	add.w	r8, r8, #8
   8674a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8674c:	b17b      	cbz	r3, 8676e <_svfprintf_r+0x33e>
   8674e:	2102      	movs	r1, #2
   86750:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86752:	440c      	add	r4, r1
   86754:	3301      	adds	r3, #1
   86756:	aa1e      	add	r2, sp, #120	; 0x78
   86758:	2b07      	cmp	r3, #7
   8675a:	9427      	str	r4, [sp, #156]	; 0x9c
   8675c:	9326      	str	r3, [sp, #152]	; 0x98
   8675e:	f8c8 1004 	str.w	r1, [r8, #4]
   86762:	f8c8 2000 	str.w	r2, [r8]
   86766:	f300 8411 	bgt.w	86f8c <_svfprintf_r+0xb5c>
   8676a:	f108 0808 	add.w	r8, r8, #8
   8676e:	2d80      	cmp	r5, #128	; 0x80
   86770:	f000 8304 	beq.w	86d7c <_svfprintf_r+0x94c>
   86774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86778:	1a9f      	subs	r7, r3, r2
   8677a:	2f00      	cmp	r7, #0
   8677c:	dd37      	ble.n	867ee <_svfprintf_r+0x3be>
   8677e:	2f10      	cmp	r7, #16
   86780:	f340 8679 	ble.w	87476 <_svfprintf_r+0x1046>
   86784:	4d80      	ldr	r5, [pc, #512]	; (86988 <_svfprintf_r+0x558>)
   86786:	4642      	mov	r2, r8
   86788:	4621      	mov	r1, r4
   8678a:	46b0      	mov	r8, r6
   8678c:	f04f 0b10 	mov.w	fp, #16
   86790:	462e      	mov	r6, r5
   86792:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86794:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86796:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86798:	e004      	b.n	867a4 <_svfprintf_r+0x374>
   8679a:	3f10      	subs	r7, #16
   8679c:	2f10      	cmp	r7, #16
   8679e:	f102 0208 	add.w	r2, r2, #8
   867a2:	dd15      	ble.n	867d0 <_svfprintf_r+0x3a0>
   867a4:	3301      	adds	r3, #1
   867a6:	3110      	adds	r1, #16
   867a8:	2b07      	cmp	r3, #7
   867aa:	9127      	str	r1, [sp, #156]	; 0x9c
   867ac:	9326      	str	r3, [sp, #152]	; 0x98
   867ae:	e882 0840 	stmia.w	r2, {r6, fp}
   867b2:	ddf2      	ble.n	8679a <_svfprintf_r+0x36a>
   867b4:	aa25      	add	r2, sp, #148	; 0x94
   867b6:	4629      	mov	r1, r5
   867b8:	4620      	mov	r0, r4
   867ba:	f004 fd67 	bl	8b28c <__ssprint_r>
   867be:	2800      	cmp	r0, #0
   867c0:	f47f af13 	bne.w	865ea <_svfprintf_r+0x1ba>
   867c4:	3f10      	subs	r7, #16
   867c6:	2f10      	cmp	r7, #16
   867c8:	464a      	mov	r2, r9
   867ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
   867cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867ce:	dce9      	bgt.n	867a4 <_svfprintf_r+0x374>
   867d0:	4635      	mov	r5, r6
   867d2:	460c      	mov	r4, r1
   867d4:	4646      	mov	r6, r8
   867d6:	4690      	mov	r8, r2
   867d8:	3301      	adds	r3, #1
   867da:	443c      	add	r4, r7
   867dc:	2b07      	cmp	r3, #7
   867de:	9427      	str	r4, [sp, #156]	; 0x9c
   867e0:	9326      	str	r3, [sp, #152]	; 0x98
   867e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   867e6:	f300 8370 	bgt.w	86eca <_svfprintf_r+0xa9a>
   867ea:	f108 0808 	add.w	r8, r8, #8
   867ee:	9b07      	ldr	r3, [sp, #28]
   867f0:	05df      	lsls	r7, r3, #23
   867f2:	f100 8264 	bmi.w	86cbe <_svfprintf_r+0x88e>
   867f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   867f8:	990e      	ldr	r1, [sp, #56]	; 0x38
   867fa:	3301      	adds	r3, #1
   867fc:	440c      	add	r4, r1
   867fe:	2b07      	cmp	r3, #7
   86800:	9427      	str	r4, [sp, #156]	; 0x9c
   86802:	f8c8 6000 	str.w	r6, [r8]
   86806:	f8c8 1004 	str.w	r1, [r8, #4]
   8680a:	9326      	str	r3, [sp, #152]	; 0x98
   8680c:	f300 83b3 	bgt.w	86f76 <_svfprintf_r+0xb46>
   86810:	f108 0808 	add.w	r8, r8, #8
   86814:	9b07      	ldr	r3, [sp, #28]
   86816:	075b      	lsls	r3, r3, #29
   86818:	d53b      	bpl.n	86892 <_svfprintf_r+0x462>
   8681a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8681c:	9a08      	ldr	r2, [sp, #32]
   8681e:	1a9d      	subs	r5, r3, r2
   86820:	2d00      	cmp	r5, #0
   86822:	dd36      	ble.n	86892 <_svfprintf_r+0x462>
   86824:	2d10      	cmp	r5, #16
   86826:	f340 8721 	ble.w	8766c <_svfprintf_r+0x123c>
   8682a:	2610      	movs	r6, #16
   8682c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8682e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86830:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   86834:	e004      	b.n	86840 <_svfprintf_r+0x410>
   86836:	3d10      	subs	r5, #16
   86838:	2d10      	cmp	r5, #16
   8683a:	f108 0808 	add.w	r8, r8, #8
   8683e:	dd16      	ble.n	8686e <_svfprintf_r+0x43e>
   86840:	3301      	adds	r3, #1
   86842:	4a50      	ldr	r2, [pc, #320]	; (86984 <_svfprintf_r+0x554>)
   86844:	3410      	adds	r4, #16
   86846:	2b07      	cmp	r3, #7
   86848:	9427      	str	r4, [sp, #156]	; 0x9c
   8684a:	9326      	str	r3, [sp, #152]	; 0x98
   8684c:	e888 0044 	stmia.w	r8, {r2, r6}
   86850:	ddf1      	ble.n	86836 <_svfprintf_r+0x406>
   86852:	aa25      	add	r2, sp, #148	; 0x94
   86854:	4659      	mov	r1, fp
   86856:	4638      	mov	r0, r7
   86858:	f004 fd18 	bl	8b28c <__ssprint_r>
   8685c:	2800      	cmp	r0, #0
   8685e:	f47f aec4 	bne.w	865ea <_svfprintf_r+0x1ba>
   86862:	3d10      	subs	r5, #16
   86864:	2d10      	cmp	r5, #16
   86866:	46c8      	mov	r8, r9
   86868:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8686a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8686c:	dce8      	bgt.n	86840 <_svfprintf_r+0x410>
   8686e:	3301      	adds	r3, #1
   86870:	4a44      	ldr	r2, [pc, #272]	; (86984 <_svfprintf_r+0x554>)
   86872:	442c      	add	r4, r5
   86874:	2b07      	cmp	r3, #7
   86876:	9427      	str	r4, [sp, #156]	; 0x9c
   86878:	9326      	str	r3, [sp, #152]	; 0x98
   8687a:	e888 0024 	stmia.w	r8, {r2, r5}
   8687e:	dd08      	ble.n	86892 <_svfprintf_r+0x462>
   86880:	aa25      	add	r2, sp, #148	; 0x94
   86882:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86884:	980c      	ldr	r0, [sp, #48]	; 0x30
   86886:	f004 fd01 	bl	8b28c <__ssprint_r>
   8688a:	2800      	cmp	r0, #0
   8688c:	f47f aead 	bne.w	865ea <_svfprintf_r+0x1ba>
   86890:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86892:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86896:	9908      	ldr	r1, [sp, #32]
   86898:	428a      	cmp	r2, r1
   8689a:	bfac      	ite	ge
   8689c:	189b      	addge	r3, r3, r2
   8689e:	185b      	addlt	r3, r3, r1
   868a0:	9309      	str	r3, [sp, #36]	; 0x24
   868a2:	2c00      	cmp	r4, #0
   868a4:	f040 82fb 	bne.w	86e9e <_svfprintf_r+0xa6e>
   868a8:	2300      	movs	r3, #0
   868aa:	46c8      	mov	r8, r9
   868ac:	9326      	str	r3, [sp, #152]	; 0x98
   868ae:	e5e6      	b.n	8647e <_svfprintf_r+0x4e>
   868b0:	9311      	str	r3, [sp, #68]	; 0x44
   868b2:	f01b 0320 	ands.w	r3, fp, #32
   868b6:	f040 8145 	bne.w	86b44 <_svfprintf_r+0x714>
   868ba:	f01b 0210 	ands.w	r2, fp, #16
   868be:	f040 8466 	bne.w	8718e <_svfprintf_r+0xd5e>
   868c2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   868c6:	f000 8462 	beq.w	8718e <_svfprintf_r+0xd5e>
   868ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   868cc:	4613      	mov	r3, r2
   868ce:	460a      	mov	r2, r1
   868d0:	3204      	adds	r2, #4
   868d2:	880c      	ldrh	r4, [r1, #0]
   868d4:	2500      	movs	r5, #0
   868d6:	920f      	str	r2, [sp, #60]	; 0x3c
   868d8:	e6a8      	b.n	8662c <_svfprintf_r+0x1fc>
   868da:	2500      	movs	r5, #0
   868dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   868de:	9311      	str	r3, [sp, #68]	; 0x44
   868e0:	6816      	ldr	r6, [r2, #0]
   868e2:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   868e6:	1d14      	adds	r4, r2, #4
   868e8:	2e00      	cmp	r6, #0
   868ea:	f000 86cd 	beq.w	87688 <_svfprintf_r+0x1258>
   868ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   868f0:	1c53      	adds	r3, r2, #1
   868f2:	f000 861b 	beq.w	8752c <_svfprintf_r+0x10fc>
   868f6:	4629      	mov	r1, r5
   868f8:	4630      	mov	r0, r6
   868fa:	f003 ff09 	bl	8a710 <memchr>
   868fe:	2800      	cmp	r0, #0
   86900:	f000 870d 	beq.w	8771e <_svfprintf_r+0x12ee>
   86904:	1b83      	subs	r3, r0, r6
   86906:	950a      	str	r5, [sp, #40]	; 0x28
   86908:	930e      	str	r3, [sp, #56]	; 0x38
   8690a:	940f      	str	r4, [sp, #60]	; 0x3c
   8690c:	f8cd b01c 	str.w	fp, [sp, #28]
   86910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86914:	9308      	str	r3, [sp, #32]
   86916:	9512      	str	r5, [sp, #72]	; 0x48
   86918:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8691c:	e6ac      	b.n	86678 <_svfprintf_r+0x248>
   8691e:	f89a 3000 	ldrb.w	r3, [sl]
   86922:	f10a 0401 	add.w	r4, sl, #1
   86926:	2b2a      	cmp	r3, #42	; 0x2a
   86928:	f000 87c2 	beq.w	878b0 <_svfprintf_r+0x1480>
   8692c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86930:	2809      	cmp	r0, #9
   86932:	46a2      	mov	sl, r4
   86934:	f200 8718 	bhi.w	87768 <_svfprintf_r+0x1338>
   86938:	2300      	movs	r3, #0
   8693a:	461c      	mov	r4, r3
   8693c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86940:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86944:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86948:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8694c:	2809      	cmp	r0, #9
   8694e:	d9f5      	bls.n	8693c <_svfprintf_r+0x50c>
   86950:	940a      	str	r4, [sp, #40]	; 0x28
   86952:	e5c9      	b.n	864e8 <_svfprintf_r+0xb8>
   86954:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   86958:	f89a 3000 	ldrb.w	r3, [sl]
   8695c:	e5c2      	b.n	864e4 <_svfprintf_r+0xb4>
   8695e:	f04b 0b10 	orr.w	fp, fp, #16
   86962:	f01b 0f20 	tst.w	fp, #32
   86966:	9311      	str	r3, [sp, #68]	; 0x44
   86968:	f43f ae51 	beq.w	8660e <_svfprintf_r+0x1de>
   8696c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8696e:	3407      	adds	r4, #7
   86970:	f024 0307 	bic.w	r3, r4, #7
   86974:	f103 0208 	add.w	r2, r3, #8
   86978:	e9d3 4500 	ldrd	r4, r5, [r3]
   8697c:	920f      	str	r2, [sp, #60]	; 0x3c
   8697e:	2301      	movs	r3, #1
   86980:	e654      	b.n	8662c <_svfprintf_r+0x1fc>
   86982:	bf00      	nop
   86984:	0008c214 	.word	0x0008c214
   86988:	0008c224 	.word	0x0008c224
   8698c:	9311      	str	r3, [sp, #68]	; 0x44
   8698e:	2a00      	cmp	r2, #0
   86990:	f040 87ad 	bne.w	878ee <_svfprintf_r+0x14be>
   86994:	4bbe      	ldr	r3, [pc, #760]	; (86c90 <_svfprintf_r+0x860>)
   86996:	f01b 0f20 	tst.w	fp, #32
   8699a:	9318      	str	r3, [sp, #96]	; 0x60
   8699c:	f040 80e7 	bne.w	86b6e <_svfprintf_r+0x73e>
   869a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   869a2:	f01b 0f10 	tst.w	fp, #16
   869a6:	4613      	mov	r3, r2
   869a8:	f040 83d8 	bne.w	8715c <_svfprintf_r+0xd2c>
   869ac:	f01b 0f40 	tst.w	fp, #64	; 0x40
   869b0:	f000 83d4 	beq.w	8715c <_svfprintf_r+0xd2c>
   869b4:	2500      	movs	r5, #0
   869b6:	3304      	adds	r3, #4
   869b8:	8814      	ldrh	r4, [r2, #0]
   869ba:	930f      	str	r3, [sp, #60]	; 0x3c
   869bc:	f01b 0f01 	tst.w	fp, #1
   869c0:	f000 80e3 	beq.w	86b8a <_svfprintf_r+0x75a>
   869c4:	ea54 0305 	orrs.w	r3, r4, r5
   869c8:	f000 80df 	beq.w	86b8a <_svfprintf_r+0x75a>
   869cc:	2330      	movs	r3, #48	; 0x30
   869ce:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   869d2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   869d6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   869da:	f04b 0b02 	orr.w	fp, fp, #2
   869de:	2302      	movs	r3, #2
   869e0:	e624      	b.n	8662c <_svfprintf_r+0x1fc>
   869e2:	2201      	movs	r2, #1
   869e4:	9311      	str	r3, [sp, #68]	; 0x44
   869e6:	2300      	movs	r3, #0
   869e8:	4611      	mov	r1, r2
   869ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   869ec:	9208      	str	r2, [sp, #32]
   869ee:	6802      	ldr	r2, [r0, #0]
   869f0:	461f      	mov	r7, r3
   869f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   869f6:	930a      	str	r3, [sp, #40]	; 0x28
   869f8:	9312      	str	r3, [sp, #72]	; 0x48
   869fa:	1d03      	adds	r3, r0, #4
   869fc:	f8cd b01c 	str.w	fp, [sp, #28]
   86a00:	910e      	str	r1, [sp, #56]	; 0x38
   86a02:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86a06:	930f      	str	r3, [sp, #60]	; 0x3c
   86a08:	ae28      	add	r6, sp, #160	; 0xa0
   86a0a:	e639      	b.n	86680 <_svfprintf_r+0x250>
   86a0c:	9311      	str	r3, [sp, #68]	; 0x44
   86a0e:	2a00      	cmp	r2, #0
   86a10:	f040 8784 	bne.w	8791c <_svfprintf_r+0x14ec>
   86a14:	f04b 0b10 	orr.w	fp, fp, #16
   86a18:	f01b 0f20 	tst.w	fp, #32
   86a1c:	f040 8475 	bne.w	8730a <_svfprintf_r+0xeda>
   86a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86a22:	f01b 0f10 	tst.w	fp, #16
   86a26:	4613      	mov	r3, r2
   86a28:	f040 839d 	bne.w	87166 <_svfprintf_r+0xd36>
   86a2c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86a30:	f000 8399 	beq.w	87166 <_svfprintf_r+0xd36>
   86a34:	f9b2 4000 	ldrsh.w	r4, [r2]
   86a38:	3304      	adds	r3, #4
   86a3a:	17e5      	asrs	r5, r4, #31
   86a3c:	930f      	str	r3, [sp, #60]	; 0x3c
   86a3e:	4622      	mov	r2, r4
   86a40:	462b      	mov	r3, r5
   86a42:	2a00      	cmp	r2, #0
   86a44:	f173 0300 	sbcs.w	r3, r3, #0
   86a48:	f2c0 8398 	blt.w	8717c <_svfprintf_r+0xd4c>
   86a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
   86a4e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86a52:	1c4a      	adds	r2, r1, #1
   86a54:	f04f 0301 	mov.w	r3, #1
   86a58:	f47f adf0 	bne.w	8663c <_svfprintf_r+0x20c>
   86a5c:	ea54 0205 	orrs.w	r2, r4, r5
   86a60:	f000 8229 	beq.w	86eb6 <_svfprintf_r+0xa86>
   86a64:	f8cd b01c 	str.w	fp, [sp, #28]
   86a68:	2b01      	cmp	r3, #1
   86a6a:	f000 830e 	beq.w	8708a <_svfprintf_r+0xc5a>
   86a6e:	2b02      	cmp	r3, #2
   86a70:	f040 829c 	bne.w	86fac <_svfprintf_r+0xb7c>
   86a74:	464e      	mov	r6, r9
   86a76:	9818      	ldr	r0, [sp, #96]	; 0x60
   86a78:	0923      	lsrs	r3, r4, #4
   86a7a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86a7e:	0929      	lsrs	r1, r5, #4
   86a80:	f004 020f 	and.w	r2, r4, #15
   86a84:	460d      	mov	r5, r1
   86a86:	461c      	mov	r4, r3
   86a88:	5c83      	ldrb	r3, [r0, r2]
   86a8a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   86a8e:	ea54 0305 	orrs.w	r3, r4, r5
   86a92:	d1f1      	bne.n	86a78 <_svfprintf_r+0x648>
   86a94:	eba9 0306 	sub.w	r3, r9, r6
   86a98:	930e      	str	r3, [sp, #56]	; 0x38
   86a9a:	e5e5      	b.n	86668 <_svfprintf_r+0x238>
   86a9c:	9311      	str	r3, [sp, #68]	; 0x44
   86a9e:	2a00      	cmp	r2, #0
   86aa0:	f040 8738 	bne.w	87914 <_svfprintf_r+0x14e4>
   86aa4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86aa6:	f01b 0f08 	tst.w	fp, #8
   86aaa:	f104 0407 	add.w	r4, r4, #7
   86aae:	f000 84cf 	beq.w	87450 <_svfprintf_r+0x1020>
   86ab2:	f024 0307 	bic.w	r3, r4, #7
   86ab6:	f103 0208 	add.w	r2, r3, #8
   86aba:	920f      	str	r2, [sp, #60]	; 0x3c
   86abc:	681a      	ldr	r2, [r3, #0]
   86abe:	685b      	ldr	r3, [r3, #4]
   86ac0:	9215      	str	r2, [sp, #84]	; 0x54
   86ac2:	9314      	str	r3, [sp, #80]	; 0x50
   86ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86ac6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   86ac8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   86acc:	4628      	mov	r0, r5
   86ace:	4621      	mov	r1, r4
   86ad0:	f04f 32ff 	mov.w	r2, #4294967295
   86ad4:	4b6f      	ldr	r3, [pc, #444]	; (86c94 <_svfprintf_r+0x864>)
   86ad6:	f005 faa5 	bl	8c024 <__aeabi_dcmpun>
   86ada:	2800      	cmp	r0, #0
   86adc:	f040 8434 	bne.w	87348 <_svfprintf_r+0xf18>
   86ae0:	4628      	mov	r0, r5
   86ae2:	4621      	mov	r1, r4
   86ae4:	f04f 32ff 	mov.w	r2, #4294967295
   86ae8:	4b6a      	ldr	r3, [pc, #424]	; (86c94 <_svfprintf_r+0x864>)
   86aea:	f005 fa7d 	bl	8bfe8 <__aeabi_dcmple>
   86aee:	2800      	cmp	r0, #0
   86af0:	f040 842a 	bne.w	87348 <_svfprintf_r+0xf18>
   86af4:	a815      	add	r0, sp, #84	; 0x54
   86af6:	c80d      	ldmia	r0, {r0, r2, r3}
   86af8:	9914      	ldr	r1, [sp, #80]	; 0x50
   86afa:	f005 fa6b 	bl	8bfd4 <__aeabi_dcmplt>
   86afe:	2800      	cmp	r0, #0
   86b00:	f040 85d4 	bne.w	876ac <_svfprintf_r+0x127c>
   86b04:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86b08:	2303      	movs	r3, #3
   86b0a:	461a      	mov	r2, r3
   86b0c:	9308      	str	r3, [sp, #32]
   86b0e:	2300      	movs	r3, #0
   86b10:	4e61      	ldr	r6, [pc, #388]	; (86c98 <_svfprintf_r+0x868>)
   86b12:	4619      	mov	r1, r3
   86b14:	930a      	str	r3, [sp, #40]	; 0x28
   86b16:	4b61      	ldr	r3, [pc, #388]	; (86c9c <_svfprintf_r+0x86c>)
   86b18:	920e      	str	r2, [sp, #56]	; 0x38
   86b1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86b1c:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   86b20:	9007      	str	r0, [sp, #28]
   86b22:	9112      	str	r1, [sp, #72]	; 0x48
   86b24:	2a47      	cmp	r2, #71	; 0x47
   86b26:	bfd8      	it	le
   86b28:	461e      	movle	r6, r3
   86b2a:	e5a5      	b.n	86678 <_svfprintf_r+0x248>
   86b2c:	f04b 0b08 	orr.w	fp, fp, #8
   86b30:	f89a 3000 	ldrb.w	r3, [sl]
   86b34:	e4d6      	b.n	864e4 <_svfprintf_r+0xb4>
   86b36:	f04b 0b10 	orr.w	fp, fp, #16
   86b3a:	9311      	str	r3, [sp, #68]	; 0x44
   86b3c:	f01b 0320 	ands.w	r3, fp, #32
   86b40:	f43f aebb 	beq.w	868ba <_svfprintf_r+0x48a>
   86b44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86b46:	3407      	adds	r4, #7
   86b48:	f024 0307 	bic.w	r3, r4, #7
   86b4c:	f103 0208 	add.w	r2, r3, #8
   86b50:	e9d3 4500 	ldrd	r4, r5, [r3]
   86b54:	920f      	str	r2, [sp, #60]	; 0x3c
   86b56:	2300      	movs	r3, #0
   86b58:	e568      	b.n	8662c <_svfprintf_r+0x1fc>
   86b5a:	9311      	str	r3, [sp, #68]	; 0x44
   86b5c:	2a00      	cmp	r2, #0
   86b5e:	f040 86c2 	bne.w	878e6 <_svfprintf_r+0x14b6>
   86b62:	4b4f      	ldr	r3, [pc, #316]	; (86ca0 <_svfprintf_r+0x870>)
   86b64:	f01b 0f20 	tst.w	fp, #32
   86b68:	9318      	str	r3, [sp, #96]	; 0x60
   86b6a:	f43f af19 	beq.w	869a0 <_svfprintf_r+0x570>
   86b6e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86b70:	f01b 0f01 	tst.w	fp, #1
   86b74:	f104 0407 	add.w	r4, r4, #7
   86b78:	f024 0307 	bic.w	r3, r4, #7
   86b7c:	f103 0208 	add.w	r2, r3, #8
   86b80:	920f      	str	r2, [sp, #60]	; 0x3c
   86b82:	e9d3 4500 	ldrd	r4, r5, [r3]
   86b86:	f47f af1d 	bne.w	869c4 <_svfprintf_r+0x594>
   86b8a:	2302      	movs	r3, #2
   86b8c:	e54e      	b.n	8662c <_svfprintf_r+0x1fc>
   86b8e:	f89a 3000 	ldrb.w	r3, [sl]
   86b92:	2900      	cmp	r1, #0
   86b94:	f47f aca6 	bne.w	864e4 <_svfprintf_r+0xb4>
   86b98:	2201      	movs	r2, #1
   86b9a:	2120      	movs	r1, #32
   86b9c:	e4a2      	b.n	864e4 <_svfprintf_r+0xb4>
   86b9e:	f04b 0b01 	orr.w	fp, fp, #1
   86ba2:	f89a 3000 	ldrb.w	r3, [sl]
   86ba6:	e49d      	b.n	864e4 <_svfprintf_r+0xb4>
   86ba8:	f89a 3000 	ldrb.w	r3, [sl]
   86bac:	2201      	movs	r2, #1
   86bae:	212b      	movs	r1, #43	; 0x2b
   86bb0:	e498      	b.n	864e4 <_svfprintf_r+0xb4>
   86bb2:	f04b 0b20 	orr.w	fp, fp, #32
   86bb6:	f89a 3000 	ldrb.w	r3, [sl]
   86bba:	e493      	b.n	864e4 <_svfprintf_r+0xb4>
   86bbc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   86bc0:	f89a 3000 	ldrb.w	r3, [sl]
   86bc4:	e48e      	b.n	864e4 <_svfprintf_r+0xb4>
   86bc6:	f89a 3000 	ldrb.w	r3, [sl]
   86bca:	2b6c      	cmp	r3, #108	; 0x6c
   86bcc:	bf03      	ittte	eq
   86bce:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   86bd2:	f04b 0b20 	orreq.w	fp, fp, #32
   86bd6:	f10a 0a01 	addeq.w	sl, sl, #1
   86bda:	f04b 0b10 	orrne.w	fp, fp, #16
   86bde:	e481      	b.n	864e4 <_svfprintf_r+0xb4>
   86be0:	2a00      	cmp	r2, #0
   86be2:	f040 867c 	bne.w	878de <_svfprintf_r+0x14ae>
   86be6:	f01b 0f20 	tst.w	fp, #32
   86bea:	f040 8452 	bne.w	87492 <_svfprintf_r+0x1062>
   86bee:	f01b 0f10 	tst.w	fp, #16
   86bf2:	f040 8438 	bne.w	87466 <_svfprintf_r+0x1036>
   86bf6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86bfa:	f000 8434 	beq.w	87466 <_svfprintf_r+0x1036>
   86bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86c00:	6813      	ldr	r3, [r2, #0]
   86c02:	3204      	adds	r2, #4
   86c04:	920f      	str	r2, [sp, #60]	; 0x3c
   86c06:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   86c0a:	801a      	strh	r2, [r3, #0]
   86c0c:	e437      	b.n	8647e <_svfprintf_r+0x4e>
   86c0e:	2378      	movs	r3, #120	; 0x78
   86c10:	2230      	movs	r2, #48	; 0x30
   86c12:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86c14:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   86c18:	9311      	str	r3, [sp, #68]	; 0x44
   86c1a:	1d03      	adds	r3, r0, #4
   86c1c:	930f      	str	r3, [sp, #60]	; 0x3c
   86c1e:	4b20      	ldr	r3, [pc, #128]	; (86ca0 <_svfprintf_r+0x870>)
   86c20:	6804      	ldr	r4, [r0, #0]
   86c22:	9318      	str	r3, [sp, #96]	; 0x60
   86c24:	f04b 0b02 	orr.w	fp, fp, #2
   86c28:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   86c2c:	2500      	movs	r5, #0
   86c2e:	2302      	movs	r3, #2
   86c30:	e4fc      	b.n	8662c <_svfprintf_r+0x1fc>
   86c32:	9311      	str	r3, [sp, #68]	; 0x44
   86c34:	2a00      	cmp	r2, #0
   86c36:	f43f aeef 	beq.w	86a18 <_svfprintf_r+0x5e8>
   86c3a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   86c3e:	e6eb      	b.n	86a18 <_svfprintf_r+0x5e8>
   86c40:	2000      	movs	r0, #0
   86c42:	4604      	mov	r4, r0
   86c44:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86c48:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86c4c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86c50:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86c54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86c58:	2809      	cmp	r0, #9
   86c5a:	d9f5      	bls.n	86c48 <_svfprintf_r+0x818>
   86c5c:	940d      	str	r4, [sp, #52]	; 0x34
   86c5e:	e443      	b.n	864e8 <_svfprintf_r+0xb8>
   86c60:	9311      	str	r3, [sp, #68]	; 0x44
   86c62:	2a00      	cmp	r2, #0
   86c64:	f040 864a 	bne.w	878fc <_svfprintf_r+0x14cc>
   86c68:	9a11      	ldr	r2, [sp, #68]	; 0x44
   86c6a:	2a00      	cmp	r2, #0
   86c6c:	f43f acb6 	beq.w	865dc <_svfprintf_r+0x1ac>
   86c70:	2300      	movs	r3, #0
   86c72:	2101      	movs	r1, #1
   86c74:	461f      	mov	r7, r3
   86c76:	9108      	str	r1, [sp, #32]
   86c78:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86c7c:	f8cd b01c 	str.w	fp, [sp, #28]
   86c80:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86c84:	930a      	str	r3, [sp, #40]	; 0x28
   86c86:	9312      	str	r3, [sp, #72]	; 0x48
   86c88:	910e      	str	r1, [sp, #56]	; 0x38
   86c8a:	ae28      	add	r6, sp, #160	; 0xa0
   86c8c:	e4f8      	b.n	86680 <_svfprintf_r+0x250>
   86c8e:	bf00      	nop
   86c90:	0008c1e0 	.word	0x0008c1e0
   86c94:	7fefffff 	.word	0x7fefffff
   86c98:	0008c1d4 	.word	0x0008c1d4
   86c9c:	0008c1d0 	.word	0x0008c1d0
   86ca0:	0008c1f4 	.word	0x0008c1f4
   86ca4:	aa25      	add	r2, sp, #148	; 0x94
   86ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ca8:	980c      	ldr	r0, [sp, #48]	; 0x30
   86caa:	f004 faef 	bl	8b28c <__ssprint_r>
   86cae:	2800      	cmp	r0, #0
   86cb0:	f47f ac9b 	bne.w	865ea <_svfprintf_r+0x1ba>
   86cb4:	46c8      	mov	r8, r9
   86cb6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86cba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86cbc:	e533      	b.n	86726 <_svfprintf_r+0x2f6>
   86cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86cc0:	2b65      	cmp	r3, #101	; 0x65
   86cc2:	f340 809a 	ble.w	86dfa <_svfprintf_r+0x9ca>
   86cc6:	a815      	add	r0, sp, #84	; 0x54
   86cc8:	c80d      	ldmia	r0, {r0, r2, r3}
   86cca:	9914      	ldr	r1, [sp, #80]	; 0x50
   86ccc:	f005 f978 	bl	8bfc0 <__aeabi_dcmpeq>
   86cd0:	2800      	cmp	r0, #0
   86cd2:	f000 8193 	beq.w	86ffc <_svfprintf_r+0xbcc>
   86cd6:	2101      	movs	r1, #1
   86cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cda:	4ab5      	ldr	r2, [pc, #724]	; (86fb0 <_svfprintf_r+0xb80>)
   86cdc:	440b      	add	r3, r1
   86cde:	440c      	add	r4, r1
   86ce0:	2b07      	cmp	r3, #7
   86ce2:	9427      	str	r4, [sp, #156]	; 0x9c
   86ce4:	9326      	str	r3, [sp, #152]	; 0x98
   86ce6:	f8c8 1004 	str.w	r1, [r8, #4]
   86cea:	f8c8 2000 	str.w	r2, [r8]
   86cee:	f300 83c6 	bgt.w	8747e <_svfprintf_r+0x104e>
   86cf2:	f108 0808 	add.w	r8, r8, #8
   86cf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   86cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86cfa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86cfc:	4293      	cmp	r3, r2
   86cfe:	db03      	blt.n	86d08 <_svfprintf_r+0x8d8>
   86d00:	9b07      	ldr	r3, [sp, #28]
   86d02:	07dd      	lsls	r5, r3, #31
   86d04:	f57f ad86 	bpl.w	86814 <_svfprintf_r+0x3e4>
   86d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d0a:	9919      	ldr	r1, [sp, #100]	; 0x64
   86d0c:	3301      	adds	r3, #1
   86d0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86d10:	440c      	add	r4, r1
   86d12:	2b07      	cmp	r3, #7
   86d14:	f8c8 2000 	str.w	r2, [r8]
   86d18:	f8c8 1004 	str.w	r1, [r8, #4]
   86d1c:	9427      	str	r4, [sp, #156]	; 0x9c
   86d1e:	9326      	str	r3, [sp, #152]	; 0x98
   86d20:	f300 83c4 	bgt.w	874ac <_svfprintf_r+0x107c>
   86d24:	f108 0808 	add.w	r8, r8, #8
   86d28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86d2a:	1e5e      	subs	r6, r3, #1
   86d2c:	2e00      	cmp	r6, #0
   86d2e:	f77f ad71 	ble.w	86814 <_svfprintf_r+0x3e4>
   86d32:	2e10      	cmp	r6, #16
   86d34:	f340 8575 	ble.w	87822 <_svfprintf_r+0x13f2>
   86d38:	4622      	mov	r2, r4
   86d3a:	2710      	movs	r7, #16
   86d3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d3e:	4d9d      	ldr	r5, [pc, #628]	; (86fb4 <_svfprintf_r+0xb84>)
   86d40:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86d44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86d46:	e005      	b.n	86d54 <_svfprintf_r+0x924>
   86d48:	f108 0808 	add.w	r8, r8, #8
   86d4c:	3e10      	subs	r6, #16
   86d4e:	2e10      	cmp	r6, #16
   86d50:	f340 8225 	ble.w	8719e <_svfprintf_r+0xd6e>
   86d54:	3301      	adds	r3, #1
   86d56:	3210      	adds	r2, #16
   86d58:	2b07      	cmp	r3, #7
   86d5a:	9227      	str	r2, [sp, #156]	; 0x9c
   86d5c:	9326      	str	r3, [sp, #152]	; 0x98
   86d5e:	e888 00a0 	stmia.w	r8, {r5, r7}
   86d62:	ddf1      	ble.n	86d48 <_svfprintf_r+0x918>
   86d64:	aa25      	add	r2, sp, #148	; 0x94
   86d66:	4621      	mov	r1, r4
   86d68:	4658      	mov	r0, fp
   86d6a:	f004 fa8f 	bl	8b28c <__ssprint_r>
   86d6e:	2800      	cmp	r0, #0
   86d70:	f47f ac3b 	bne.w	865ea <_svfprintf_r+0x1ba>
   86d74:	46c8      	mov	r8, r9
   86d76:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   86d78:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d7a:	e7e7      	b.n	86d4c <_svfprintf_r+0x91c>
   86d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86d7e:	9a08      	ldr	r2, [sp, #32]
   86d80:	1a9f      	subs	r7, r3, r2
   86d82:	2f00      	cmp	r7, #0
   86d84:	f77f acf6 	ble.w	86774 <_svfprintf_r+0x344>
   86d88:	2f10      	cmp	r7, #16
   86d8a:	f340 84a8 	ble.w	876de <_svfprintf_r+0x12ae>
   86d8e:	4d89      	ldr	r5, [pc, #548]	; (86fb4 <_svfprintf_r+0xb84>)
   86d90:	4642      	mov	r2, r8
   86d92:	4621      	mov	r1, r4
   86d94:	46b0      	mov	r8, r6
   86d96:	f04f 0b10 	mov.w	fp, #16
   86d9a:	462e      	mov	r6, r5
   86d9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86da0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86da2:	e004      	b.n	86dae <_svfprintf_r+0x97e>
   86da4:	3f10      	subs	r7, #16
   86da6:	2f10      	cmp	r7, #16
   86da8:	f102 0208 	add.w	r2, r2, #8
   86dac:	dd15      	ble.n	86dda <_svfprintf_r+0x9aa>
   86dae:	3301      	adds	r3, #1
   86db0:	3110      	adds	r1, #16
   86db2:	2b07      	cmp	r3, #7
   86db4:	9127      	str	r1, [sp, #156]	; 0x9c
   86db6:	9326      	str	r3, [sp, #152]	; 0x98
   86db8:	e882 0840 	stmia.w	r2, {r6, fp}
   86dbc:	ddf2      	ble.n	86da4 <_svfprintf_r+0x974>
   86dbe:	aa25      	add	r2, sp, #148	; 0x94
   86dc0:	4629      	mov	r1, r5
   86dc2:	4620      	mov	r0, r4
   86dc4:	f004 fa62 	bl	8b28c <__ssprint_r>
   86dc8:	2800      	cmp	r0, #0
   86dca:	f47f ac0e 	bne.w	865ea <_svfprintf_r+0x1ba>
   86dce:	3f10      	subs	r7, #16
   86dd0:	2f10      	cmp	r7, #16
   86dd2:	464a      	mov	r2, r9
   86dd4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86dd8:	dce9      	bgt.n	86dae <_svfprintf_r+0x97e>
   86dda:	4635      	mov	r5, r6
   86ddc:	460c      	mov	r4, r1
   86dde:	4646      	mov	r6, r8
   86de0:	4690      	mov	r8, r2
   86de2:	3301      	adds	r3, #1
   86de4:	443c      	add	r4, r7
   86de6:	2b07      	cmp	r3, #7
   86de8:	9427      	str	r4, [sp, #156]	; 0x9c
   86dea:	9326      	str	r3, [sp, #152]	; 0x98
   86dec:	e888 00a0 	stmia.w	r8, {r5, r7}
   86df0:	f300 829e 	bgt.w	87330 <_svfprintf_r+0xf00>
   86df4:	f108 0808 	add.w	r8, r8, #8
   86df8:	e4bc      	b.n	86774 <_svfprintf_r+0x344>
   86dfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86dfc:	2b01      	cmp	r3, #1
   86dfe:	f340 824f 	ble.w	872a0 <_svfprintf_r+0xe70>
   86e02:	2301      	movs	r3, #1
   86e04:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86e06:	441c      	add	r4, r3
   86e08:	441f      	add	r7, r3
   86e0a:	2f07      	cmp	r7, #7
   86e0c:	9427      	str	r4, [sp, #156]	; 0x9c
   86e0e:	f8c8 6000 	str.w	r6, [r8]
   86e12:	9726      	str	r7, [sp, #152]	; 0x98
   86e14:	f8c8 3004 	str.w	r3, [r8, #4]
   86e18:	f300 825f 	bgt.w	872da <_svfprintf_r+0xeaa>
   86e1c:	f108 0808 	add.w	r8, r8, #8
   86e20:	9a19      	ldr	r2, [sp, #100]	; 0x64
   86e22:	3701      	adds	r7, #1
   86e24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86e26:	4414      	add	r4, r2
   86e28:	2f07      	cmp	r7, #7
   86e2a:	9427      	str	r4, [sp, #156]	; 0x9c
   86e2c:	9726      	str	r7, [sp, #152]	; 0x98
   86e2e:	f8c8 3000 	str.w	r3, [r8]
   86e32:	f8c8 2004 	str.w	r2, [r8, #4]
   86e36:	f300 825c 	bgt.w	872f2 <_svfprintf_r+0xec2>
   86e3a:	f108 0808 	add.w	r8, r8, #8
   86e3e:	a815      	add	r0, sp, #84	; 0x54
   86e40:	c80d      	ldmia	r0, {r0, r2, r3}
   86e42:	9914      	ldr	r1, [sp, #80]	; 0x50
   86e44:	f005 f8bc 	bl	8bfc0 <__aeabi_dcmpeq>
   86e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86e4a:	2800      	cmp	r0, #0
   86e4c:	f040 8141 	bne.w	870d2 <_svfprintf_r+0xca2>
   86e50:	3b01      	subs	r3, #1
   86e52:	3701      	adds	r7, #1
   86e54:	3601      	adds	r6, #1
   86e56:	441c      	add	r4, r3
   86e58:	2f07      	cmp	r7, #7
   86e5a:	f8c8 6000 	str.w	r6, [r8]
   86e5e:	9726      	str	r7, [sp, #152]	; 0x98
   86e60:	9427      	str	r4, [sp, #156]	; 0x9c
   86e62:	f8c8 3004 	str.w	r3, [r8, #4]
   86e66:	f300 8166 	bgt.w	87136 <_svfprintf_r+0xd06>
   86e6a:	f108 0808 	add.w	r8, r8, #8
   86e6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86e70:	3701      	adds	r7, #1
   86e72:	4414      	add	r4, r2
   86e74:	ab21      	add	r3, sp, #132	; 0x84
   86e76:	2f07      	cmp	r7, #7
   86e78:	9427      	str	r4, [sp, #156]	; 0x9c
   86e7a:	9726      	str	r7, [sp, #152]	; 0x98
   86e7c:	f8c8 2004 	str.w	r2, [r8, #4]
   86e80:	f8c8 3000 	str.w	r3, [r8]
   86e84:	f77f acc4 	ble.w	86810 <_svfprintf_r+0x3e0>
   86e88:	aa25      	add	r2, sp, #148	; 0x94
   86e8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86e8c:	980c      	ldr	r0, [sp, #48]	; 0x30
   86e8e:	f004 f9fd 	bl	8b28c <__ssprint_r>
   86e92:	2800      	cmp	r0, #0
   86e94:	f47f aba9 	bne.w	865ea <_svfprintf_r+0x1ba>
   86e98:	46c8      	mov	r8, r9
   86e9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86e9c:	e4ba      	b.n	86814 <_svfprintf_r+0x3e4>
   86e9e:	aa25      	add	r2, sp, #148	; 0x94
   86ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ea4:	f004 f9f2 	bl	8b28c <__ssprint_r>
   86ea8:	2800      	cmp	r0, #0
   86eaa:	f43f acfd 	beq.w	868a8 <_svfprintf_r+0x478>
   86eae:	f7ff bb9c 	b.w	865ea <_svfprintf_r+0x1ba>
   86eb2:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86eb6:	2b01      	cmp	r3, #1
   86eb8:	f000 817e 	beq.w	871b8 <_svfprintf_r+0xd88>
   86ebc:	2b02      	cmp	r3, #2
   86ebe:	d171      	bne.n	86fa4 <_svfprintf_r+0xb74>
   86ec0:	f8cd b01c 	str.w	fp, [sp, #28]
   86ec4:	2400      	movs	r4, #0
   86ec6:	2500      	movs	r5, #0
   86ec8:	e5d4      	b.n	86a74 <_svfprintf_r+0x644>
   86eca:	aa25      	add	r2, sp, #148	; 0x94
   86ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ece:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ed0:	f004 f9dc 	bl	8b28c <__ssprint_r>
   86ed4:	2800      	cmp	r0, #0
   86ed6:	f47f ab88 	bne.w	865ea <_svfprintf_r+0x1ba>
   86eda:	46c8      	mov	r8, r9
   86edc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86ede:	e486      	b.n	867ee <_svfprintf_r+0x3be>
   86ee0:	aa25      	add	r2, sp, #148	; 0x94
   86ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ee4:	980c      	ldr	r0, [sp, #48]	; 0x30
   86ee6:	f004 f9d1 	bl	8b28c <__ssprint_r>
   86eea:	2800      	cmp	r0, #0
   86eec:	f47f ab7d 	bne.w	865ea <_svfprintf_r+0x1ba>
   86ef0:	46c8      	mov	r8, r9
   86ef2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86ef4:	e429      	b.n	8674a <_svfprintf_r+0x31a>
   86ef6:	2001      	movs	r0, #1
   86ef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86efa:	4a2d      	ldr	r2, [pc, #180]	; (86fb0 <_svfprintf_r+0xb80>)
   86efc:	4403      	add	r3, r0
   86efe:	4404      	add	r4, r0
   86f00:	2b07      	cmp	r3, #7
   86f02:	9427      	str	r4, [sp, #156]	; 0x9c
   86f04:	9326      	str	r3, [sp, #152]	; 0x98
   86f06:	f8c8 0004 	str.w	r0, [r8, #4]
   86f0a:	f8c8 2000 	str.w	r2, [r8]
   86f0e:	f340 82d8 	ble.w	874c2 <_svfprintf_r+0x1092>
   86f12:	aa25      	add	r2, sp, #148	; 0x94
   86f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f16:	980c      	ldr	r0, [sp, #48]	; 0x30
   86f18:	f004 f9b8 	bl	8b28c <__ssprint_r>
   86f1c:	2800      	cmp	r0, #0
   86f1e:	f47f ab64 	bne.w	865ea <_svfprintf_r+0x1ba>
   86f22:	46c8      	mov	r8, r9
   86f24:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86f26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86f28:	b929      	cbnz	r1, 86f36 <_svfprintf_r+0xb06>
   86f2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86f2c:	b91b      	cbnz	r3, 86f36 <_svfprintf_r+0xb06>
   86f2e:	9b07      	ldr	r3, [sp, #28]
   86f30:	07d8      	lsls	r0, r3, #31
   86f32:	f57f ac6f 	bpl.w	86814 <_svfprintf_r+0x3e4>
   86f36:	9819      	ldr	r0, [sp, #100]	; 0x64
   86f38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86f3a:	4602      	mov	r2, r0
   86f3c:	3301      	adds	r3, #1
   86f3e:	4422      	add	r2, r4
   86f40:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   86f42:	2b07      	cmp	r3, #7
   86f44:	9227      	str	r2, [sp, #156]	; 0x9c
   86f46:	f8c8 4000 	str.w	r4, [r8]
   86f4a:	f8c8 0004 	str.w	r0, [r8, #4]
   86f4e:	9326      	str	r3, [sp, #152]	; 0x98
   86f50:	f300 8431 	bgt.w	877b6 <_svfprintf_r+0x1386>
   86f54:	f108 0808 	add.w	r8, r8, #8
   86f58:	2900      	cmp	r1, #0
   86f5a:	f2c0 8409 	blt.w	87770 <_svfprintf_r+0x1340>
   86f5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   86f60:	3301      	adds	r3, #1
   86f62:	188c      	adds	r4, r1, r2
   86f64:	2b07      	cmp	r3, #7
   86f66:	9427      	str	r4, [sp, #156]	; 0x9c
   86f68:	9326      	str	r3, [sp, #152]	; 0x98
   86f6a:	f8c8 6000 	str.w	r6, [r8]
   86f6e:	f8c8 1004 	str.w	r1, [r8, #4]
   86f72:	f77f ac4d 	ble.w	86810 <_svfprintf_r+0x3e0>
   86f76:	aa25      	add	r2, sp, #148	; 0x94
   86f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f7a:	980c      	ldr	r0, [sp, #48]	; 0x30
   86f7c:	f004 f986 	bl	8b28c <__ssprint_r>
   86f80:	2800      	cmp	r0, #0
   86f82:	f47f ab32 	bne.w	865ea <_svfprintf_r+0x1ba>
   86f86:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86f88:	46c8      	mov	r8, r9
   86f8a:	e443      	b.n	86814 <_svfprintf_r+0x3e4>
   86f8c:	aa25      	add	r2, sp, #148	; 0x94
   86f8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f90:	980c      	ldr	r0, [sp, #48]	; 0x30
   86f92:	f004 f97b 	bl	8b28c <__ssprint_r>
   86f96:	2800      	cmp	r0, #0
   86f98:	f47f ab27 	bne.w	865ea <_svfprintf_r+0x1ba>
   86f9c:	46c8      	mov	r8, r9
   86f9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86fa0:	f7ff bbe5 	b.w	8676e <_svfprintf_r+0x33e>
   86fa4:	2400      	movs	r4, #0
   86fa6:	2500      	movs	r5, #0
   86fa8:	f8cd b01c 	str.w	fp, [sp, #28]
   86fac:	4649      	mov	r1, r9
   86fae:	e004      	b.n	86fba <_svfprintf_r+0xb8a>
   86fb0:	0008c210 	.word	0x0008c210
   86fb4:	0008c224 	.word	0x0008c224
   86fb8:	4631      	mov	r1, r6
   86fba:	08e2      	lsrs	r2, r4, #3
   86fbc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86fc0:	08e8      	lsrs	r0, r5, #3
   86fc2:	f004 0307 	and.w	r3, r4, #7
   86fc6:	4605      	mov	r5, r0
   86fc8:	4614      	mov	r4, r2
   86fca:	3330      	adds	r3, #48	; 0x30
   86fcc:	ea54 0205 	orrs.w	r2, r4, r5
   86fd0:	f801 3c01 	strb.w	r3, [r1, #-1]
   86fd4:	f101 36ff 	add.w	r6, r1, #4294967295
   86fd8:	d1ee      	bne.n	86fb8 <_svfprintf_r+0xb88>
   86fda:	9a07      	ldr	r2, [sp, #28]
   86fdc:	07d2      	lsls	r2, r2, #31
   86fde:	f57f ad59 	bpl.w	86a94 <_svfprintf_r+0x664>
   86fe2:	2b30      	cmp	r3, #48	; 0x30
   86fe4:	f43f ad56 	beq.w	86a94 <_svfprintf_r+0x664>
   86fe8:	2330      	movs	r3, #48	; 0x30
   86fea:	3902      	subs	r1, #2
   86fec:	f806 3c01 	strb.w	r3, [r6, #-1]
   86ff0:	eba9 0301 	sub.w	r3, r9, r1
   86ff4:	930e      	str	r3, [sp, #56]	; 0x38
   86ff6:	460e      	mov	r6, r1
   86ff8:	f7ff bb36 	b.w	86668 <_svfprintf_r+0x238>
   86ffc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   86ffe:	2900      	cmp	r1, #0
   87000:	f77f af79 	ble.w	86ef6 <_svfprintf_r+0xac6>
   87004:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87006:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87008:	4293      	cmp	r3, r2
   8700a:	bfa8      	it	ge
   8700c:	4613      	movge	r3, r2
   8700e:	2b00      	cmp	r3, #0
   87010:	461f      	mov	r7, r3
   87012:	dd0b      	ble.n	8702c <_svfprintf_r+0xbfc>
   87014:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87016:	443c      	add	r4, r7
   87018:	3301      	adds	r3, #1
   8701a:	2b07      	cmp	r3, #7
   8701c:	9427      	str	r4, [sp, #156]	; 0x9c
   8701e:	e888 00c0 	stmia.w	r8, {r6, r7}
   87022:	9326      	str	r3, [sp, #152]	; 0x98
   87024:	f300 82fb 	bgt.w	8761e <_svfprintf_r+0x11ee>
   87028:	f108 0808 	add.w	r8, r8, #8
   8702c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8702e:	2f00      	cmp	r7, #0
   87030:	bfa8      	it	ge
   87032:	1bdb      	subge	r3, r3, r7
   87034:	2b00      	cmp	r3, #0
   87036:	461f      	mov	r7, r3
   87038:	f340 80d7 	ble.w	871ea <_svfprintf_r+0xdba>
   8703c:	2b10      	cmp	r3, #16
   8703e:	f340 8434 	ble.w	878aa <_svfprintf_r+0x147a>
   87042:	4dba      	ldr	r5, [pc, #744]	; (8732c <_svfprintf_r+0xefc>)
   87044:	4642      	mov	r2, r8
   87046:	4621      	mov	r1, r4
   87048:	46b0      	mov	r8, r6
   8704a:	f04f 0b10 	mov.w	fp, #16
   8704e:	462e      	mov	r6, r5
   87050:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87052:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87054:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87056:	e004      	b.n	87062 <_svfprintf_r+0xc32>
   87058:	3208      	adds	r2, #8
   8705a:	3f10      	subs	r7, #16
   8705c:	2f10      	cmp	r7, #16
   8705e:	f340 80b5 	ble.w	871cc <_svfprintf_r+0xd9c>
   87062:	3301      	adds	r3, #1
   87064:	3110      	adds	r1, #16
   87066:	2b07      	cmp	r3, #7
   87068:	9127      	str	r1, [sp, #156]	; 0x9c
   8706a:	9326      	str	r3, [sp, #152]	; 0x98
   8706c:	e882 0840 	stmia.w	r2, {r6, fp}
   87070:	ddf2      	ble.n	87058 <_svfprintf_r+0xc28>
   87072:	aa25      	add	r2, sp, #148	; 0x94
   87074:	4629      	mov	r1, r5
   87076:	4620      	mov	r0, r4
   87078:	f004 f908 	bl	8b28c <__ssprint_r>
   8707c:	2800      	cmp	r0, #0
   8707e:	f47f aab4 	bne.w	865ea <_svfprintf_r+0x1ba>
   87082:	464a      	mov	r2, r9
   87084:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87086:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87088:	e7e7      	b.n	8705a <_svfprintf_r+0xc2a>
   8708a:	2d00      	cmp	r5, #0
   8708c:	bf08      	it	eq
   8708e:	2c0a      	cmpeq	r4, #10
   87090:	f0c0 8090 	bcc.w	871b4 <_svfprintf_r+0xd84>
   87094:	464e      	mov	r6, r9
   87096:	4620      	mov	r0, r4
   87098:	4629      	mov	r1, r5
   8709a:	220a      	movs	r2, #10
   8709c:	2300      	movs	r3, #0
   8709e:	f7fe fde9 	bl	85c74 <__aeabi_uldivmod>
   870a2:	3230      	adds	r2, #48	; 0x30
   870a4:	f806 2d01 	strb.w	r2, [r6, #-1]!
   870a8:	4620      	mov	r0, r4
   870aa:	4629      	mov	r1, r5
   870ac:	2300      	movs	r3, #0
   870ae:	220a      	movs	r2, #10
   870b0:	f7fe fde0 	bl	85c74 <__aeabi_uldivmod>
   870b4:	4604      	mov	r4, r0
   870b6:	460d      	mov	r5, r1
   870b8:	ea54 0305 	orrs.w	r3, r4, r5
   870bc:	d1eb      	bne.n	87096 <_svfprintf_r+0xc66>
   870be:	eba9 0306 	sub.w	r3, r9, r6
   870c2:	930e      	str	r3, [sp, #56]	; 0x38
   870c4:	f7ff bad0 	b.w	86668 <_svfprintf_r+0x238>
   870c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870ca:	464e      	mov	r6, r9
   870cc:	930e      	str	r3, [sp, #56]	; 0x38
   870ce:	f7ff bacb 	b.w	86668 <_svfprintf_r+0x238>
   870d2:	1e5e      	subs	r6, r3, #1
   870d4:	2e00      	cmp	r6, #0
   870d6:	f77f aeca 	ble.w	86e6e <_svfprintf_r+0xa3e>
   870da:	2e10      	cmp	r6, #16
   870dc:	f340 83e3 	ble.w	878a6 <_svfprintf_r+0x1476>
   870e0:	4622      	mov	r2, r4
   870e2:	f04f 0b10 	mov.w	fp, #16
   870e6:	4d91      	ldr	r5, [pc, #580]	; (8732c <_svfprintf_r+0xefc>)
   870e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   870ea:	e004      	b.n	870f6 <_svfprintf_r+0xcc6>
   870ec:	3e10      	subs	r6, #16
   870ee:	2e10      	cmp	r6, #16
   870f0:	f108 0808 	add.w	r8, r8, #8
   870f4:	dd15      	ble.n	87122 <_svfprintf_r+0xcf2>
   870f6:	3701      	adds	r7, #1
   870f8:	3210      	adds	r2, #16
   870fa:	2f07      	cmp	r7, #7
   870fc:	9227      	str	r2, [sp, #156]	; 0x9c
   870fe:	9726      	str	r7, [sp, #152]	; 0x98
   87100:	e888 0820 	stmia.w	r8, {r5, fp}
   87104:	ddf2      	ble.n	870ec <_svfprintf_r+0xcbc>
   87106:	aa25      	add	r2, sp, #148	; 0x94
   87108:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8710a:	4620      	mov	r0, r4
   8710c:	f004 f8be 	bl	8b28c <__ssprint_r>
   87110:	2800      	cmp	r0, #0
   87112:	f47f aa6a 	bne.w	865ea <_svfprintf_r+0x1ba>
   87116:	3e10      	subs	r6, #16
   87118:	2e10      	cmp	r6, #16
   8711a:	46c8      	mov	r8, r9
   8711c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8711e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87120:	dce9      	bgt.n	870f6 <_svfprintf_r+0xcc6>
   87122:	4614      	mov	r4, r2
   87124:	3701      	adds	r7, #1
   87126:	4434      	add	r4, r6
   87128:	2f07      	cmp	r7, #7
   8712a:	9427      	str	r4, [sp, #156]	; 0x9c
   8712c:	9726      	str	r7, [sp, #152]	; 0x98
   8712e:	e888 0060 	stmia.w	r8, {r5, r6}
   87132:	f77f ae9a 	ble.w	86e6a <_svfprintf_r+0xa3a>
   87136:	aa25      	add	r2, sp, #148	; 0x94
   87138:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8713a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8713c:	f004 f8a6 	bl	8b28c <__ssprint_r>
   87140:	2800      	cmp	r0, #0
   87142:	f47f aa52 	bne.w	865ea <_svfprintf_r+0x1ba>
   87146:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87148:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8714a:	46c8      	mov	r8, r9
   8714c:	e68f      	b.n	86e6e <_svfprintf_r+0xa3e>
   8714e:	3204      	adds	r2, #4
   87150:	681c      	ldr	r4, [r3, #0]
   87152:	2500      	movs	r5, #0
   87154:	2301      	movs	r3, #1
   87156:	920f      	str	r2, [sp, #60]	; 0x3c
   87158:	f7ff ba68 	b.w	8662c <_svfprintf_r+0x1fc>
   8715c:	681c      	ldr	r4, [r3, #0]
   8715e:	3304      	adds	r3, #4
   87160:	930f      	str	r3, [sp, #60]	; 0x3c
   87162:	2500      	movs	r5, #0
   87164:	e42a      	b.n	869bc <_svfprintf_r+0x58c>
   87166:	681c      	ldr	r4, [r3, #0]
   87168:	3304      	adds	r3, #4
   8716a:	17e5      	asrs	r5, r4, #31
   8716c:	4622      	mov	r2, r4
   8716e:	930f      	str	r3, [sp, #60]	; 0x3c
   87170:	462b      	mov	r3, r5
   87172:	2a00      	cmp	r2, #0
   87174:	f173 0300 	sbcs.w	r3, r3, #0
   87178:	f6bf ac68 	bge.w	86a4c <_svfprintf_r+0x61c>
   8717c:	272d      	movs	r7, #45	; 0x2d
   8717e:	4264      	negs	r4, r4
   87180:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87184:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   87188:	2301      	movs	r3, #1
   8718a:	f7ff ba53 	b.w	86634 <_svfprintf_r+0x204>
   8718e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87190:	2500      	movs	r5, #0
   87192:	460a      	mov	r2, r1
   87194:	3204      	adds	r2, #4
   87196:	680c      	ldr	r4, [r1, #0]
   87198:	920f      	str	r2, [sp, #60]	; 0x3c
   8719a:	f7ff ba47 	b.w	8662c <_svfprintf_r+0x1fc>
   8719e:	4614      	mov	r4, r2
   871a0:	3301      	adds	r3, #1
   871a2:	4434      	add	r4, r6
   871a4:	2b07      	cmp	r3, #7
   871a6:	9427      	str	r4, [sp, #156]	; 0x9c
   871a8:	9326      	str	r3, [sp, #152]	; 0x98
   871aa:	e888 0060 	stmia.w	r8, {r5, r6}
   871ae:	f77f ab2f 	ble.w	86810 <_svfprintf_r+0x3e0>
   871b2:	e6e0      	b.n	86f76 <_svfprintf_r+0xb46>
   871b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   871b8:	2301      	movs	r3, #1
   871ba:	ae42      	add	r6, sp, #264	; 0x108
   871bc:	3430      	adds	r4, #48	; 0x30
   871be:	f8cd b01c 	str.w	fp, [sp, #28]
   871c2:	f806 4d41 	strb.w	r4, [r6, #-65]!
   871c6:	930e      	str	r3, [sp, #56]	; 0x38
   871c8:	f7ff ba4e 	b.w	86668 <_svfprintf_r+0x238>
   871cc:	4635      	mov	r5, r6
   871ce:	460c      	mov	r4, r1
   871d0:	4646      	mov	r6, r8
   871d2:	4690      	mov	r8, r2
   871d4:	3301      	adds	r3, #1
   871d6:	443c      	add	r4, r7
   871d8:	2b07      	cmp	r3, #7
   871da:	9427      	str	r4, [sp, #156]	; 0x9c
   871dc:	9326      	str	r3, [sp, #152]	; 0x98
   871de:	e888 00a0 	stmia.w	r8, {r5, r7}
   871e2:	f300 8246 	bgt.w	87672 <_svfprintf_r+0x1242>
   871e6:	f108 0808 	add.w	r8, r8, #8
   871ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   871ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   871ee:	429a      	cmp	r2, r3
   871f0:	db45      	blt.n	8727e <_svfprintf_r+0xe4e>
   871f2:	9b07      	ldr	r3, [sp, #28]
   871f4:	07d9      	lsls	r1, r3, #31
   871f6:	d442      	bmi.n	8727e <_svfprintf_r+0xe4e>
   871f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   871fa:	9812      	ldr	r0, [sp, #72]	; 0x48
   871fc:	1a9a      	subs	r2, r3, r2
   871fe:	1a1d      	subs	r5, r3, r0
   87200:	4295      	cmp	r5, r2
   87202:	bfa8      	it	ge
   87204:	4615      	movge	r5, r2
   87206:	2d00      	cmp	r5, #0
   87208:	dd0e      	ble.n	87228 <_svfprintf_r+0xdf8>
   8720a:	9926      	ldr	r1, [sp, #152]	; 0x98
   8720c:	4406      	add	r6, r0
   8720e:	3101      	adds	r1, #1
   87210:	442c      	add	r4, r5
   87212:	2907      	cmp	r1, #7
   87214:	f8c8 6000 	str.w	r6, [r8]
   87218:	9427      	str	r4, [sp, #156]	; 0x9c
   8721a:	f8c8 5004 	str.w	r5, [r8, #4]
   8721e:	9126      	str	r1, [sp, #152]	; 0x98
   87220:	f300 8216 	bgt.w	87650 <_svfprintf_r+0x1220>
   87224:	f108 0808 	add.w	r8, r8, #8
   87228:	2d00      	cmp	r5, #0
   8722a:	bfb4      	ite	lt
   8722c:	4616      	movlt	r6, r2
   8722e:	1b56      	subge	r6, r2, r5
   87230:	2e00      	cmp	r6, #0
   87232:	f77f aaef 	ble.w	86814 <_svfprintf_r+0x3e4>
   87236:	2e10      	cmp	r6, #16
   87238:	f340 82f3 	ble.w	87822 <_svfprintf_r+0x13f2>
   8723c:	4622      	mov	r2, r4
   8723e:	2710      	movs	r7, #16
   87240:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87242:	4d3a      	ldr	r5, [pc, #232]	; (8732c <_svfprintf_r+0xefc>)
   87244:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87248:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8724a:	e004      	b.n	87256 <_svfprintf_r+0xe26>
   8724c:	f108 0808 	add.w	r8, r8, #8
   87250:	3e10      	subs	r6, #16
   87252:	2e10      	cmp	r6, #16
   87254:	dda3      	ble.n	8719e <_svfprintf_r+0xd6e>
   87256:	3301      	adds	r3, #1
   87258:	3210      	adds	r2, #16
   8725a:	2b07      	cmp	r3, #7
   8725c:	9227      	str	r2, [sp, #156]	; 0x9c
   8725e:	9326      	str	r3, [sp, #152]	; 0x98
   87260:	e888 00a0 	stmia.w	r8, {r5, r7}
   87264:	ddf2      	ble.n	8724c <_svfprintf_r+0xe1c>
   87266:	aa25      	add	r2, sp, #148	; 0x94
   87268:	4621      	mov	r1, r4
   8726a:	4658      	mov	r0, fp
   8726c:	f004 f80e 	bl	8b28c <__ssprint_r>
   87270:	2800      	cmp	r0, #0
   87272:	f47f a9ba 	bne.w	865ea <_svfprintf_r+0x1ba>
   87276:	46c8      	mov	r8, r9
   87278:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8727c:	e7e8      	b.n	87250 <_svfprintf_r+0xe20>
   8727e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87280:	9819      	ldr	r0, [sp, #100]	; 0x64
   87282:	3301      	adds	r3, #1
   87284:	991a      	ldr	r1, [sp, #104]	; 0x68
   87286:	4404      	add	r4, r0
   87288:	2b07      	cmp	r3, #7
   8728a:	9427      	str	r4, [sp, #156]	; 0x9c
   8728c:	f8c8 1000 	str.w	r1, [r8]
   87290:	f8c8 0004 	str.w	r0, [r8, #4]
   87294:	9326      	str	r3, [sp, #152]	; 0x98
   87296:	f300 81cf 	bgt.w	87638 <_svfprintf_r+0x1208>
   8729a:	f108 0808 	add.w	r8, r8, #8
   8729e:	e7ab      	b.n	871f8 <_svfprintf_r+0xdc8>
   872a0:	9b07      	ldr	r3, [sp, #28]
   872a2:	07da      	lsls	r2, r3, #31
   872a4:	f53f adad 	bmi.w	86e02 <_svfprintf_r+0x9d2>
   872a8:	2301      	movs	r3, #1
   872aa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   872ac:	441c      	add	r4, r3
   872ae:	441f      	add	r7, r3
   872b0:	2f07      	cmp	r7, #7
   872b2:	9427      	str	r4, [sp, #156]	; 0x9c
   872b4:	f8c8 6000 	str.w	r6, [r8]
   872b8:	9726      	str	r7, [sp, #152]	; 0x98
   872ba:	f8c8 3004 	str.w	r3, [r8, #4]
   872be:	f77f add4 	ble.w	86e6a <_svfprintf_r+0xa3a>
   872c2:	aa25      	add	r2, sp, #148	; 0x94
   872c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   872c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   872c8:	f003 ffe0 	bl	8b28c <__ssprint_r>
   872cc:	2800      	cmp	r0, #0
   872ce:	f47f a98c 	bne.w	865ea <_svfprintf_r+0x1ba>
   872d2:	46c8      	mov	r8, r9
   872d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   872d6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   872d8:	e5c9      	b.n	86e6e <_svfprintf_r+0xa3e>
   872da:	aa25      	add	r2, sp, #148	; 0x94
   872dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   872de:	980c      	ldr	r0, [sp, #48]	; 0x30
   872e0:	f003 ffd4 	bl	8b28c <__ssprint_r>
   872e4:	2800      	cmp	r0, #0
   872e6:	f47f a980 	bne.w	865ea <_svfprintf_r+0x1ba>
   872ea:	46c8      	mov	r8, r9
   872ec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   872ee:	9f26      	ldr	r7, [sp, #152]	; 0x98
   872f0:	e596      	b.n	86e20 <_svfprintf_r+0x9f0>
   872f2:	aa25      	add	r2, sp, #148	; 0x94
   872f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   872f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   872f8:	f003 ffc8 	bl	8b28c <__ssprint_r>
   872fc:	2800      	cmp	r0, #0
   872fe:	f47f a974 	bne.w	865ea <_svfprintf_r+0x1ba>
   87302:	46c8      	mov	r8, r9
   87304:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87306:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87308:	e599      	b.n	86e3e <_svfprintf_r+0xa0e>
   8730a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8730c:	3407      	adds	r4, #7
   8730e:	f024 0407 	bic.w	r4, r4, #7
   87312:	f104 0108 	add.w	r1, r4, #8
   87316:	e9d4 2300 	ldrd	r2, r3, [r4]
   8731a:	910f      	str	r1, [sp, #60]	; 0x3c
   8731c:	4614      	mov	r4, r2
   8731e:	461d      	mov	r5, r3
   87320:	f7ff bb8f 	b.w	86a42 <_svfprintf_r+0x612>
   87324:	464e      	mov	r6, r9
   87326:	f7ff b99f 	b.w	86668 <_svfprintf_r+0x238>
   8732a:	bf00      	nop
   8732c:	0008c224 	.word	0x0008c224
   87330:	aa25      	add	r2, sp, #148	; 0x94
   87332:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87334:	980c      	ldr	r0, [sp, #48]	; 0x30
   87336:	f003 ffa9 	bl	8b28c <__ssprint_r>
   8733a:	2800      	cmp	r0, #0
   8733c:	f47f a955 	bne.w	865ea <_svfprintf_r+0x1ba>
   87340:	46c8      	mov	r8, r9
   87342:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87344:	f7ff ba16 	b.w	86774 <_svfprintf_r+0x344>
   87348:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8734a:	4622      	mov	r2, r4
   8734c:	4620      	mov	r0, r4
   8734e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   87350:	4623      	mov	r3, r4
   87352:	4621      	mov	r1, r4
   87354:	f004 fe66 	bl	8c024 <__aeabi_dcmpun>
   87358:	2800      	cmp	r0, #0
   8735a:	f040 8273 	bne.w	87844 <_svfprintf_r+0x1414>
   8735e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87360:	3301      	adds	r3, #1
   87362:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87364:	f023 0320 	bic.w	r3, r3, #32
   87368:	930e      	str	r3, [sp, #56]	; 0x38
   8736a:	f000 819c 	beq.w	876a6 <_svfprintf_r+0x1276>
   8736e:	2b47      	cmp	r3, #71	; 0x47
   87370:	f000 80d6 	beq.w	87520 <_svfprintf_r+0x10f0>
   87374:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   87378:	9307      	str	r3, [sp, #28]
   8737a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8737c:	1e1f      	subs	r7, r3, #0
   8737e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87380:	9308      	str	r3, [sp, #32]
   87382:	bfb7      	itett	lt
   87384:	463b      	movlt	r3, r7
   87386:	2300      	movge	r3, #0
   87388:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   8738c:	232d      	movlt	r3, #45	; 0x2d
   8738e:	9310      	str	r3, [sp, #64]	; 0x40
   87390:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87392:	2b66      	cmp	r3, #102	; 0x66
   87394:	f000 8190 	beq.w	876b8 <_svfprintf_r+0x1288>
   87398:	2b46      	cmp	r3, #70	; 0x46
   8739a:	f000 80a4 	beq.w	874e6 <_svfprintf_r+0x10b6>
   8739e:	2002      	movs	r0, #2
   873a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873a2:	a923      	add	r1, sp, #140	; 0x8c
   873a4:	2b45      	cmp	r3, #69	; 0x45
   873a6:	bf0a      	itet	eq
   873a8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   873aa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   873ac:	1c5d      	addeq	r5, r3, #1
   873ae:	e88d 0021 	stmia.w	sp, {r0, r5}
   873b2:	9104      	str	r1, [sp, #16]
   873b4:	a820      	add	r0, sp, #128	; 0x80
   873b6:	a91f      	add	r1, sp, #124	; 0x7c
   873b8:	463b      	mov	r3, r7
   873ba:	9003      	str	r0, [sp, #12]
   873bc:	9a08      	ldr	r2, [sp, #32]
   873be:	9102      	str	r1, [sp, #8]
   873c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   873c2:	f001 fa85 	bl	888d0 <_dtoa_r>
   873c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   873c8:	4606      	mov	r6, r0
   873ca:	2b67      	cmp	r3, #103	; 0x67
   873cc:	f040 81ba 	bne.w	87744 <_svfprintf_r+0x1314>
   873d0:	f01b 0f01 	tst.w	fp, #1
   873d4:	f000 8223 	beq.w	8781e <_svfprintf_r+0x13ee>
   873d8:	1974      	adds	r4, r6, r5
   873da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   873dc:	9808      	ldr	r0, [sp, #32]
   873de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   873e0:	4639      	mov	r1, r7
   873e2:	f004 fded 	bl	8bfc0 <__aeabi_dcmpeq>
   873e6:	2800      	cmp	r0, #0
   873e8:	f040 8124 	bne.w	87634 <_svfprintf_r+0x1204>
   873ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   873ee:	42a3      	cmp	r3, r4
   873f0:	d206      	bcs.n	87400 <_svfprintf_r+0xfd0>
   873f2:	2130      	movs	r1, #48	; 0x30
   873f4:	1c5a      	adds	r2, r3, #1
   873f6:	9223      	str	r2, [sp, #140]	; 0x8c
   873f8:	7019      	strb	r1, [r3, #0]
   873fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   873fc:	429c      	cmp	r4, r3
   873fe:	d8f9      	bhi.n	873f4 <_svfprintf_r+0xfc4>
   87400:	1b9b      	subs	r3, r3, r6
   87402:	9313      	str	r3, [sp, #76]	; 0x4c
   87404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87406:	2b47      	cmp	r3, #71	; 0x47
   87408:	f000 80a2 	beq.w	87550 <_svfprintf_r+0x1120>
   8740c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8740e:	2b65      	cmp	r3, #101	; 0x65
   87410:	f340 81a7 	ble.w	87762 <_svfprintf_r+0x1332>
   87414:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87416:	2b66      	cmp	r3, #102	; 0x66
   87418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8741a:	9312      	str	r3, [sp, #72]	; 0x48
   8741c:	f000 8171 	beq.w	87702 <_svfprintf_r+0x12d2>
   87420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87422:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87424:	4619      	mov	r1, r3
   87426:	4291      	cmp	r1, r2
   87428:	f300 815d 	bgt.w	876e6 <_svfprintf_r+0x12b6>
   8742c:	f01b 0f01 	tst.w	fp, #1
   87430:	f040 81f0 	bne.w	87814 <_svfprintf_r+0x13e4>
   87434:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87438:	9308      	str	r3, [sp, #32]
   8743a:	2367      	movs	r3, #103	; 0x67
   8743c:	920e      	str	r2, [sp, #56]	; 0x38
   8743e:	9311      	str	r3, [sp, #68]	; 0x44
   87440:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87442:	2b00      	cmp	r3, #0
   87444:	d17d      	bne.n	87542 <_svfprintf_r+0x1112>
   87446:	930a      	str	r3, [sp, #40]	; 0x28
   87448:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8744c:	f7ff b914 	b.w	86678 <_svfprintf_r+0x248>
   87450:	f024 0407 	bic.w	r4, r4, #7
   87454:	6823      	ldr	r3, [r4, #0]
   87456:	9315      	str	r3, [sp, #84]	; 0x54
   87458:	6863      	ldr	r3, [r4, #4]
   8745a:	9314      	str	r3, [sp, #80]	; 0x50
   8745c:	f104 0308 	add.w	r3, r4, #8
   87460:	930f      	str	r3, [sp, #60]	; 0x3c
   87462:	f7ff bb2f 	b.w	86ac4 <_svfprintf_r+0x694>
   87466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87468:	6813      	ldr	r3, [r2, #0]
   8746a:	3204      	adds	r2, #4
   8746c:	920f      	str	r2, [sp, #60]	; 0x3c
   8746e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87470:	601a      	str	r2, [r3, #0]
   87472:	f7ff b804 	b.w	8647e <_svfprintf_r+0x4e>
   87476:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87478:	4daf      	ldr	r5, [pc, #700]	; (87738 <_svfprintf_r+0x1308>)
   8747a:	f7ff b9ad 	b.w	867d8 <_svfprintf_r+0x3a8>
   8747e:	aa25      	add	r2, sp, #148	; 0x94
   87480:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87482:	980c      	ldr	r0, [sp, #48]	; 0x30
   87484:	f003 ff02 	bl	8b28c <__ssprint_r>
   87488:	2800      	cmp	r0, #0
   8748a:	f47f a8ae 	bne.w	865ea <_svfprintf_r+0x1ba>
   8748e:	46c8      	mov	r8, r9
   87490:	e431      	b.n	86cf6 <_svfprintf_r+0x8c6>
   87492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87494:	4613      	mov	r3, r2
   87496:	3304      	adds	r3, #4
   87498:	930f      	str	r3, [sp, #60]	; 0x3c
   8749a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8749c:	6811      	ldr	r1, [r2, #0]
   8749e:	17dd      	asrs	r5, r3, #31
   874a0:	461a      	mov	r2, r3
   874a2:	462b      	mov	r3, r5
   874a4:	e9c1 2300 	strd	r2, r3, [r1]
   874a8:	f7fe bfe9 	b.w	8647e <_svfprintf_r+0x4e>
   874ac:	aa25      	add	r2, sp, #148	; 0x94
   874ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   874b2:	f003 feeb 	bl	8b28c <__ssprint_r>
   874b6:	2800      	cmp	r0, #0
   874b8:	f47f a897 	bne.w	865ea <_svfprintf_r+0x1ba>
   874bc:	46c8      	mov	r8, r9
   874be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   874c0:	e432      	b.n	86d28 <_svfprintf_r+0x8f8>
   874c2:	f108 0808 	add.w	r8, r8, #8
   874c6:	e52f      	b.n	86f28 <_svfprintf_r+0xaf8>
   874c8:	2140      	movs	r1, #64	; 0x40
   874ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   874cc:	f002 fe68 	bl	8a1a0 <_malloc_r>
   874d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   874d2:	6010      	str	r0, [r2, #0]
   874d4:	6110      	str	r0, [r2, #16]
   874d6:	2800      	cmp	r0, #0
   874d8:	f000 8214 	beq.w	87904 <_svfprintf_r+0x14d4>
   874dc:	2340      	movs	r3, #64	; 0x40
   874de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   874e0:	6153      	str	r3, [r2, #20]
   874e2:	f7fe bfbc 	b.w	8645e <_svfprintf_r+0x2e>
   874e6:	2003      	movs	r0, #3
   874e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   874ea:	a923      	add	r1, sp, #140	; 0x8c
   874ec:	e88d 0011 	stmia.w	sp, {r0, r4}
   874f0:	9104      	str	r1, [sp, #16]
   874f2:	a820      	add	r0, sp, #128	; 0x80
   874f4:	a91f      	add	r1, sp, #124	; 0x7c
   874f6:	9003      	str	r0, [sp, #12]
   874f8:	9a08      	ldr	r2, [sp, #32]
   874fa:	463b      	mov	r3, r7
   874fc:	9102      	str	r1, [sp, #8]
   874fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   87500:	f001 f9e6 	bl	888d0 <_dtoa_r>
   87504:	4625      	mov	r5, r4
   87506:	4606      	mov	r6, r0
   87508:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8750a:	1974      	adds	r4, r6, r5
   8750c:	2b46      	cmp	r3, #70	; 0x46
   8750e:	f47f af64 	bne.w	873da <_svfprintf_r+0xfaa>
   87512:	7833      	ldrb	r3, [r6, #0]
   87514:	2b30      	cmp	r3, #48	; 0x30
   87516:	f000 8187 	beq.w	87828 <_svfprintf_r+0x13f8>
   8751a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   8751c:	442c      	add	r4, r5
   8751e:	e75c      	b.n	873da <_svfprintf_r+0xfaa>
   87520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87522:	2b00      	cmp	r3, #0
   87524:	bf08      	it	eq
   87526:	2301      	moveq	r3, #1
   87528:	930a      	str	r3, [sp, #40]	; 0x28
   8752a:	e723      	b.n	87374 <_svfprintf_r+0xf44>
   8752c:	4630      	mov	r0, r6
   8752e:	950a      	str	r5, [sp, #40]	; 0x28
   87530:	f7fe ff1e 	bl	86370 <strlen>
   87534:	940f      	str	r4, [sp, #60]	; 0x3c
   87536:	900e      	str	r0, [sp, #56]	; 0x38
   87538:	f8cd b01c 	str.w	fp, [sp, #28]
   8753c:	4603      	mov	r3, r0
   8753e:	f7ff b9e7 	b.w	86910 <_svfprintf_r+0x4e0>
   87542:	272d      	movs	r7, #45	; 0x2d
   87544:	2300      	movs	r3, #0
   87546:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   8754a:	930a      	str	r3, [sp, #40]	; 0x28
   8754c:	f7ff b895 	b.w	8667a <_svfprintf_r+0x24a>
   87550:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87552:	461a      	mov	r2, r3
   87554:	9312      	str	r3, [sp, #72]	; 0x48
   87556:	3303      	adds	r3, #3
   87558:	db04      	blt.n	87564 <_svfprintf_r+0x1134>
   8755a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8755c:	4619      	mov	r1, r3
   8755e:	4291      	cmp	r1, r2
   87560:	f6bf af5e 	bge.w	87420 <_svfprintf_r+0xff0>
   87564:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87566:	3b02      	subs	r3, #2
   87568:	9311      	str	r3, [sp, #68]	; 0x44
   8756a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8756c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   87570:	3b01      	subs	r3, #1
   87572:	2b00      	cmp	r3, #0
   87574:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   87578:	bfb4      	ite	lt
   8757a:	222d      	movlt	r2, #45	; 0x2d
   8757c:	222b      	movge	r2, #43	; 0x2b
   8757e:	931f      	str	r3, [sp, #124]	; 0x7c
   87580:	bfb8      	it	lt
   87582:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   87584:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   87588:	bfb8      	it	lt
   8758a:	f1c3 0301 	rsblt	r3, r3, #1
   8758e:	2b09      	cmp	r3, #9
   87590:	f340 811f 	ble.w	877d2 <_svfprintf_r+0x13a2>
   87594:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   87598:	4601      	mov	r1, r0
   8759a:	4c68      	ldr	r4, [pc, #416]	; (8773c <_svfprintf_r+0x130c>)
   8759c:	e000      	b.n	875a0 <_svfprintf_r+0x1170>
   8759e:	4611      	mov	r1, r2
   875a0:	fb84 5203 	smull	r5, r2, r4, r3
   875a4:	17dd      	asrs	r5, r3, #31
   875a6:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   875aa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   875ae:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   875b2:	3230      	adds	r2, #48	; 0x30
   875b4:	2d09      	cmp	r5, #9
   875b6:	f801 2c01 	strb.w	r2, [r1, #-1]
   875ba:	462b      	mov	r3, r5
   875bc:	f101 32ff 	add.w	r2, r1, #4294967295
   875c0:	dced      	bgt.n	8759e <_svfprintf_r+0x116e>
   875c2:	3330      	adds	r3, #48	; 0x30
   875c4:	3902      	subs	r1, #2
   875c6:	b2dc      	uxtb	r4, r3
   875c8:	4288      	cmp	r0, r1
   875ca:	f802 4c01 	strb.w	r4, [r2, #-1]
   875ce:	f240 8192 	bls.w	878f6 <_svfprintf_r+0x14c6>
   875d2:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   875d6:	4613      	mov	r3, r2
   875d8:	e001      	b.n	875de <_svfprintf_r+0x11ae>
   875da:	f813 4b01 	ldrb.w	r4, [r3], #1
   875de:	4283      	cmp	r3, r0
   875e0:	f801 4b01 	strb.w	r4, [r1], #1
   875e4:	d1f9      	bne.n	875da <_svfprintf_r+0x11aa>
   875e6:	3301      	adds	r3, #1
   875e8:	1a9b      	subs	r3, r3, r2
   875ea:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   875ee:	4413      	add	r3, r2
   875f0:	aa21      	add	r2, sp, #132	; 0x84
   875f2:	1a9b      	subs	r3, r3, r2
   875f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   875f6:	931b      	str	r3, [sp, #108]	; 0x6c
   875f8:	2a01      	cmp	r2, #1
   875fa:	4413      	add	r3, r2
   875fc:	930e      	str	r3, [sp, #56]	; 0x38
   875fe:	f340 8148 	ble.w	87892 <_svfprintf_r+0x1462>
   87602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87604:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87606:	4413      	add	r3, r2
   87608:	930e      	str	r3, [sp, #56]	; 0x38
   8760a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8760e:	9308      	str	r3, [sp, #32]
   87610:	2300      	movs	r3, #0
   87612:	9312      	str	r3, [sp, #72]	; 0x48
   87614:	e714      	b.n	87440 <_svfprintf_r+0x1010>
   87616:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87618:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8761a:	f7ff b876 	b.w	8670a <_svfprintf_r+0x2da>
   8761e:	aa25      	add	r2, sp, #148	; 0x94
   87620:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87622:	980c      	ldr	r0, [sp, #48]	; 0x30
   87624:	f003 fe32 	bl	8b28c <__ssprint_r>
   87628:	2800      	cmp	r0, #0
   8762a:	f47e afde 	bne.w	865ea <_svfprintf_r+0x1ba>
   8762e:	46c8      	mov	r8, r9
   87630:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87632:	e4fb      	b.n	8702c <_svfprintf_r+0xbfc>
   87634:	4623      	mov	r3, r4
   87636:	e6e3      	b.n	87400 <_svfprintf_r+0xfd0>
   87638:	aa25      	add	r2, sp, #148	; 0x94
   8763a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8763c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8763e:	f003 fe25 	bl	8b28c <__ssprint_r>
   87642:	2800      	cmp	r0, #0
   87644:	f47e afd1 	bne.w	865ea <_svfprintf_r+0x1ba>
   87648:	46c8      	mov	r8, r9
   8764a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8764c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8764e:	e5d3      	b.n	871f8 <_svfprintf_r+0xdc8>
   87650:	aa25      	add	r2, sp, #148	; 0x94
   87652:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87654:	980c      	ldr	r0, [sp, #48]	; 0x30
   87656:	f003 fe19 	bl	8b28c <__ssprint_r>
   8765a:	2800      	cmp	r0, #0
   8765c:	f47e afc5 	bne.w	865ea <_svfprintf_r+0x1ba>
   87660:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87662:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87664:	46c8      	mov	r8, r9
   87666:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87668:	1a9a      	subs	r2, r3, r2
   8766a:	e5dd      	b.n	87228 <_svfprintf_r+0xdf8>
   8766c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8766e:	f7ff b8fe 	b.w	8686e <_svfprintf_r+0x43e>
   87672:	aa25      	add	r2, sp, #148	; 0x94
   87674:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87676:	980c      	ldr	r0, [sp, #48]	; 0x30
   87678:	f003 fe08 	bl	8b28c <__ssprint_r>
   8767c:	2800      	cmp	r0, #0
   8767e:	f47e afb4 	bne.w	865ea <_svfprintf_r+0x1ba>
   87682:	46c8      	mov	r8, r9
   87684:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87686:	e5b0      	b.n	871ea <_svfprintf_r+0xdba>
   87688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8768a:	4637      	mov	r7, r6
   8768c:	2b06      	cmp	r3, #6
   8768e:	bf28      	it	cs
   87690:	2306      	movcs	r3, #6
   87692:	960a      	str	r6, [sp, #40]	; 0x28
   87694:	9612      	str	r6, [sp, #72]	; 0x48
   87696:	9308      	str	r3, [sp, #32]
   87698:	940f      	str	r4, [sp, #60]	; 0x3c
   8769a:	f8cd b01c 	str.w	fp, [sp, #28]
   8769e:	930e      	str	r3, [sp, #56]	; 0x38
   876a0:	4e27      	ldr	r6, [pc, #156]	; (87740 <_svfprintf_r+0x1310>)
   876a2:	f7fe bfe9 	b.w	86678 <_svfprintf_r+0x248>
   876a6:	2306      	movs	r3, #6
   876a8:	930a      	str	r3, [sp, #40]	; 0x28
   876aa:	e663      	b.n	87374 <_svfprintf_r+0xf44>
   876ac:	232d      	movs	r3, #45	; 0x2d
   876ae:	461f      	mov	r7, r3
   876b0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   876b4:	f7ff ba28 	b.w	86b08 <_svfprintf_r+0x6d8>
   876b8:	2003      	movs	r0, #3
   876ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   876bc:	a923      	add	r1, sp, #140	; 0x8c
   876be:	e88d 0011 	stmia.w	sp, {r0, r4}
   876c2:	9104      	str	r1, [sp, #16]
   876c4:	a820      	add	r0, sp, #128	; 0x80
   876c6:	a91f      	add	r1, sp, #124	; 0x7c
   876c8:	9003      	str	r0, [sp, #12]
   876ca:	9a08      	ldr	r2, [sp, #32]
   876cc:	463b      	mov	r3, r7
   876ce:	9102      	str	r1, [sp, #8]
   876d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   876d2:	f001 f8fd 	bl	888d0 <_dtoa_r>
   876d6:	4625      	mov	r5, r4
   876d8:	4606      	mov	r6, r0
   876da:	1904      	adds	r4, r0, r4
   876dc:	e719      	b.n	87512 <_svfprintf_r+0x10e2>
   876de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   876e0:	4d15      	ldr	r5, [pc, #84]	; (87738 <_svfprintf_r+0x1308>)
   876e2:	f7ff bb7e 	b.w	86de2 <_svfprintf_r+0x9b2>
   876e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   876e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   876ea:	4413      	add	r3, r2
   876ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   876ee:	930e      	str	r3, [sp, #56]	; 0x38
   876f0:	2a00      	cmp	r2, #0
   876f2:	f340 80c7 	ble.w	87884 <_svfprintf_r+0x1454>
   876f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   876fa:	9308      	str	r3, [sp, #32]
   876fc:	2367      	movs	r3, #103	; 0x67
   876fe:	9311      	str	r3, [sp, #68]	; 0x44
   87700:	e69e      	b.n	87440 <_svfprintf_r+0x1010>
   87702:	2b00      	cmp	r3, #0
   87704:	f340 80e1 	ble.w	878ca <_svfprintf_r+0x149a>
   87708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8770a:	2a00      	cmp	r2, #0
   8770c:	f040 80b0 	bne.w	87870 <_svfprintf_r+0x1440>
   87710:	f01b 0f01 	tst.w	fp, #1
   87714:	f040 80ac 	bne.w	87870 <_svfprintf_r+0x1440>
   87718:	9308      	str	r3, [sp, #32]
   8771a:	930e      	str	r3, [sp, #56]	; 0x38
   8771c:	e690      	b.n	87440 <_svfprintf_r+0x1010>
   8771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87720:	940f      	str	r4, [sp, #60]	; 0x3c
   87722:	9308      	str	r3, [sp, #32]
   87724:	930e      	str	r3, [sp, #56]	; 0x38
   87726:	900a      	str	r0, [sp, #40]	; 0x28
   87728:	f8cd b01c 	str.w	fp, [sp, #28]
   8772c:	9012      	str	r0, [sp, #72]	; 0x48
   8772e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87732:	f7fe bfa1 	b.w	86678 <_svfprintf_r+0x248>
   87736:	bf00      	nop
   87738:	0008c224 	.word	0x0008c224
   8773c:	66666667 	.word	0x66666667
   87740:	0008c208 	.word	0x0008c208
   87744:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87746:	2b47      	cmp	r3, #71	; 0x47
   87748:	f47f ae46 	bne.w	873d8 <_svfprintf_r+0xfa8>
   8774c:	f01b 0f01 	tst.w	fp, #1
   87750:	f47f aeda 	bne.w	87508 <_svfprintf_r+0x10d8>
   87754:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87756:	1b9b      	subs	r3, r3, r6
   87758:	9313      	str	r3, [sp, #76]	; 0x4c
   8775a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8775c:	2b47      	cmp	r3, #71	; 0x47
   8775e:	f43f aef7 	beq.w	87550 <_svfprintf_r+0x1120>
   87762:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87764:	9312      	str	r3, [sp, #72]	; 0x48
   87766:	e700      	b.n	8756a <_svfprintf_r+0x113a>
   87768:	2000      	movs	r0, #0
   8776a:	900a      	str	r0, [sp, #40]	; 0x28
   8776c:	f7fe bebc 	b.w	864e8 <_svfprintf_r+0xb8>
   87770:	424f      	negs	r7, r1
   87772:	3110      	adds	r1, #16
   87774:	da35      	bge.n	877e2 <_svfprintf_r+0x13b2>
   87776:	2410      	movs	r4, #16
   87778:	4d6a      	ldr	r5, [pc, #424]	; (87924 <_svfprintf_r+0x14f4>)
   8777a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8777e:	e004      	b.n	8778a <_svfprintf_r+0x135a>
   87780:	f108 0808 	add.w	r8, r8, #8
   87784:	3f10      	subs	r7, #16
   87786:	2f10      	cmp	r7, #16
   87788:	dd2c      	ble.n	877e4 <_svfprintf_r+0x13b4>
   8778a:	3301      	adds	r3, #1
   8778c:	3210      	adds	r2, #16
   8778e:	2b07      	cmp	r3, #7
   87790:	9227      	str	r2, [sp, #156]	; 0x9c
   87792:	9326      	str	r3, [sp, #152]	; 0x98
   87794:	f8c8 5000 	str.w	r5, [r8]
   87798:	f8c8 4004 	str.w	r4, [r8, #4]
   8779c:	ddf0      	ble.n	87780 <_svfprintf_r+0x1350>
   8779e:	aa25      	add	r2, sp, #148	; 0x94
   877a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877a2:	4658      	mov	r0, fp
   877a4:	f003 fd72 	bl	8b28c <__ssprint_r>
   877a8:	2800      	cmp	r0, #0
   877aa:	f47e af1e 	bne.w	865ea <_svfprintf_r+0x1ba>
   877ae:	46c8      	mov	r8, r9
   877b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   877b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877b4:	e7e6      	b.n	87784 <_svfprintf_r+0x1354>
   877b6:	aa25      	add	r2, sp, #148	; 0x94
   877b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   877bc:	f003 fd66 	bl	8b28c <__ssprint_r>
   877c0:	2800      	cmp	r0, #0
   877c2:	f47e af12 	bne.w	865ea <_svfprintf_r+0x1ba>
   877c6:	46c8      	mov	r8, r9
   877c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   877ca:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   877cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877ce:	f7ff bbc3 	b.w	86f58 <_svfprintf_r+0xb28>
   877d2:	2230      	movs	r2, #48	; 0x30
   877d4:	4413      	add	r3, r2
   877d6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   877da:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   877de:	ab22      	add	r3, sp, #136	; 0x88
   877e0:	e706      	b.n	875f0 <_svfprintf_r+0x11c0>
   877e2:	4d50      	ldr	r5, [pc, #320]	; (87924 <_svfprintf_r+0x14f4>)
   877e4:	3301      	adds	r3, #1
   877e6:	443a      	add	r2, r7
   877e8:	2b07      	cmp	r3, #7
   877ea:	e888 00a0 	stmia.w	r8, {r5, r7}
   877ee:	9227      	str	r2, [sp, #156]	; 0x9c
   877f0:	9326      	str	r3, [sp, #152]	; 0x98
   877f2:	f108 0808 	add.w	r8, r8, #8
   877f6:	f77f abb2 	ble.w	86f5e <_svfprintf_r+0xb2e>
   877fa:	aa25      	add	r2, sp, #148	; 0x94
   877fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   87800:	f003 fd44 	bl	8b28c <__ssprint_r>
   87804:	2800      	cmp	r0, #0
   87806:	f47e aef0 	bne.w	865ea <_svfprintf_r+0x1ba>
   8780a:	46c8      	mov	r8, r9
   8780c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8780e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87810:	f7ff bba5 	b.w	86f5e <_svfprintf_r+0xb2e>
   87814:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87816:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87818:	4413      	add	r3, r2
   8781a:	930e      	str	r3, [sp, #56]	; 0x38
   8781c:	e76b      	b.n	876f6 <_svfprintf_r+0x12c6>
   8781e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87820:	e5ee      	b.n	87400 <_svfprintf_r+0xfd0>
   87822:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87824:	4d3f      	ldr	r5, [pc, #252]	; (87924 <_svfprintf_r+0x14f4>)
   87826:	e4bb      	b.n	871a0 <_svfprintf_r+0xd70>
   87828:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8782a:	9808      	ldr	r0, [sp, #32]
   8782c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8782e:	4639      	mov	r1, r7
   87830:	f004 fbc6 	bl	8bfc0 <__aeabi_dcmpeq>
   87834:	2800      	cmp	r0, #0
   87836:	f47f ae70 	bne.w	8751a <_svfprintf_r+0x10ea>
   8783a:	f1c5 0501 	rsb	r5, r5, #1
   8783e:	951f      	str	r5, [sp, #124]	; 0x7c
   87840:	442c      	add	r4, r5
   87842:	e5ca      	b.n	873da <_svfprintf_r+0xfaa>
   87844:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87846:	4e38      	ldr	r6, [pc, #224]	; (87928 <_svfprintf_r+0x14f8>)
   87848:	2b00      	cmp	r3, #0
   8784a:	bfbe      	ittt	lt
   8784c:	232d      	movlt	r3, #45	; 0x2d
   8784e:	461f      	movlt	r7, r3
   87850:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   87854:	f04f 0303 	mov.w	r3, #3
   87858:	461a      	mov	r2, r3
   8785a:	9308      	str	r3, [sp, #32]
   8785c:	f04f 0300 	mov.w	r3, #0
   87860:	bfa8      	it	ge
   87862:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   87866:	4619      	mov	r1, r3
   87868:	930a      	str	r3, [sp, #40]	; 0x28
   8786a:	4b30      	ldr	r3, [pc, #192]	; (8792c <_svfprintf_r+0x14fc>)
   8786c:	f7ff b954 	b.w	86b18 <_svfprintf_r+0x6e8>
   87870:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87872:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87874:	4413      	add	r3, r2
   87876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87878:	441a      	add	r2, r3
   8787a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8787e:	920e      	str	r2, [sp, #56]	; 0x38
   87880:	9308      	str	r3, [sp, #32]
   87882:	e5dd      	b.n	87440 <_svfprintf_r+0x1010>
   87884:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87888:	f1c3 0301 	rsb	r3, r3, #1
   8788c:	441a      	add	r2, r3
   8788e:	4613      	mov	r3, r2
   87890:	e7c3      	b.n	8781a <_svfprintf_r+0x13ea>
   87892:	f01b 0301 	ands.w	r3, fp, #1
   87896:	9312      	str	r3, [sp, #72]	; 0x48
   87898:	f47f aeb3 	bne.w	87602 <_svfprintf_r+0x11d2>
   8789c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8789e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   878a2:	9308      	str	r3, [sp, #32]
   878a4:	e5cc      	b.n	87440 <_svfprintf_r+0x1010>
   878a6:	4d1f      	ldr	r5, [pc, #124]	; (87924 <_svfprintf_r+0x14f4>)
   878a8:	e43c      	b.n	87124 <_svfprintf_r+0xcf4>
   878aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   878ac:	4d1d      	ldr	r5, [pc, #116]	; (87924 <_svfprintf_r+0x14f4>)
   878ae:	e491      	b.n	871d4 <_svfprintf_r+0xda4>
   878b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   878b2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   878b6:	6828      	ldr	r0, [r5, #0]
   878b8:	46a2      	mov	sl, r4
   878ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   878be:	900a      	str	r0, [sp, #40]	; 0x28
   878c0:	4628      	mov	r0, r5
   878c2:	3004      	adds	r0, #4
   878c4:	900f      	str	r0, [sp, #60]	; 0x3c
   878c6:	f7fe be0d 	b.w	864e4 <_svfprintf_r+0xb4>
   878ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   878cc:	b913      	cbnz	r3, 878d4 <_svfprintf_r+0x14a4>
   878ce:	f01b 0f01 	tst.w	fp, #1
   878d2:	d002      	beq.n	878da <_svfprintf_r+0x14aa>
   878d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   878d6:	3301      	adds	r3, #1
   878d8:	e7cd      	b.n	87876 <_svfprintf_r+0x1446>
   878da:	2301      	movs	r3, #1
   878dc:	e71c      	b.n	87718 <_svfprintf_r+0x12e8>
   878de:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   878e2:	f7ff b980 	b.w	86be6 <_svfprintf_r+0x7b6>
   878e6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   878ea:	f7ff b93a 	b.w	86b62 <_svfprintf_r+0x732>
   878ee:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   878f2:	f7ff b84f 	b.w	86994 <_svfprintf_r+0x564>
   878f6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   878fa:	e679      	b.n	875f0 <_svfprintf_r+0x11c0>
   878fc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87900:	f7ff b9b2 	b.w	86c68 <_svfprintf_r+0x838>
   87904:	f04f 32ff 	mov.w	r2, #4294967295
   87908:	230c      	movs	r3, #12
   8790a:	9209      	str	r2, [sp, #36]	; 0x24
   8790c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8790e:	6013      	str	r3, [r2, #0]
   87910:	f7fe be74 	b.w	865fc <_svfprintf_r+0x1cc>
   87914:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87918:	f7ff b8c4 	b.w	86aa4 <_svfprintf_r+0x674>
   8791c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87920:	f7ff b878 	b.w	86a14 <_svfprintf_r+0x5e4>
   87924:	0008c224 	.word	0x0008c224
   87928:	0008c1dc 	.word	0x0008c1dc
   8792c:	0008c1d8 	.word	0x0008c1d8

00087930 <__sprint_r.part.0>:
   87930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87934:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87936:	4693      	mov	fp, r2
   87938:	049c      	lsls	r4, r3, #18
   8793a:	d52f      	bpl.n	8799c <__sprint_r.part.0+0x6c>
   8793c:	6893      	ldr	r3, [r2, #8]
   8793e:	6812      	ldr	r2, [r2, #0]
   87940:	b353      	cbz	r3, 87998 <__sprint_r.part.0+0x68>
   87942:	460e      	mov	r6, r1
   87944:	4607      	mov	r7, r0
   87946:	f102 0908 	add.w	r9, r2, #8
   8794a:	e919 0420 	ldmdb	r9, {r5, sl}
   8794e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   87952:	d017      	beq.n	87984 <__sprint_r.part.0+0x54>
   87954:	2400      	movs	r4, #0
   87956:	3d04      	subs	r5, #4
   87958:	e001      	b.n	8795e <__sprint_r.part.0+0x2e>
   8795a:	45a0      	cmp	r8, r4
   8795c:	d010      	beq.n	87980 <__sprint_r.part.0+0x50>
   8795e:	4632      	mov	r2, r6
   87960:	f855 1f04 	ldr.w	r1, [r5, #4]!
   87964:	4638      	mov	r0, r7
   87966:	f002 f86b 	bl	89a40 <_fputwc_r>
   8796a:	1c43      	adds	r3, r0, #1
   8796c:	f104 0401 	add.w	r4, r4, #1
   87970:	d1f3      	bne.n	8795a <__sprint_r.part.0+0x2a>
   87972:	2300      	movs	r3, #0
   87974:	f8cb 3008 	str.w	r3, [fp, #8]
   87978:	f8cb 3004 	str.w	r3, [fp, #4]
   8797c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87980:	f8db 3008 	ldr.w	r3, [fp, #8]
   87984:	f02a 0a03 	bic.w	sl, sl, #3
   87988:	eba3 030a 	sub.w	r3, r3, sl
   8798c:	f8cb 3008 	str.w	r3, [fp, #8]
   87990:	f109 0908 	add.w	r9, r9, #8
   87994:	2b00      	cmp	r3, #0
   87996:	d1d8      	bne.n	8794a <__sprint_r.part.0+0x1a>
   87998:	2000      	movs	r0, #0
   8799a:	e7ea      	b.n	87972 <__sprint_r.part.0+0x42>
   8799c:	f002 f9ba 	bl	89d14 <__sfvwrite_r>
   879a0:	2300      	movs	r3, #0
   879a2:	f8cb 3008 	str.w	r3, [fp, #8]
   879a6:	f8cb 3004 	str.w	r3, [fp, #4]
   879aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   879ae:	bf00      	nop

000879b0 <_vfiprintf_r>:
   879b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   879b4:	b0ad      	sub	sp, #180	; 0xb4
   879b6:	461d      	mov	r5, r3
   879b8:	468b      	mov	fp, r1
   879ba:	4690      	mov	r8, r2
   879bc:	9307      	str	r3, [sp, #28]
   879be:	9006      	str	r0, [sp, #24]
   879c0:	b118      	cbz	r0, 879ca <_vfiprintf_r+0x1a>
   879c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   879c4:	2b00      	cmp	r3, #0
   879c6:	f000 80f3 	beq.w	87bb0 <_vfiprintf_r+0x200>
   879ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   879ce:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   879d2:	07df      	lsls	r7, r3, #31
   879d4:	b281      	uxth	r1, r0
   879d6:	d402      	bmi.n	879de <_vfiprintf_r+0x2e>
   879d8:	058e      	lsls	r6, r1, #22
   879da:	f140 80fc 	bpl.w	87bd6 <_vfiprintf_r+0x226>
   879de:	048c      	lsls	r4, r1, #18
   879e0:	d40a      	bmi.n	879f8 <_vfiprintf_r+0x48>
   879e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   879e6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   879ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   879ee:	f8ab 100c 	strh.w	r1, [fp, #12]
   879f2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   879f6:	b289      	uxth	r1, r1
   879f8:	0708      	lsls	r0, r1, #28
   879fa:	f140 80b3 	bpl.w	87b64 <_vfiprintf_r+0x1b4>
   879fe:	f8db 3010 	ldr.w	r3, [fp, #16]
   87a02:	2b00      	cmp	r3, #0
   87a04:	f000 80ae 	beq.w	87b64 <_vfiprintf_r+0x1b4>
   87a08:	f001 031a 	and.w	r3, r1, #26
   87a0c:	2b0a      	cmp	r3, #10
   87a0e:	f000 80b5 	beq.w	87b7c <_vfiprintf_r+0x1cc>
   87a12:	2300      	movs	r3, #0
   87a14:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   87a18:	46d1      	mov	r9, sl
   87a1a:	930b      	str	r3, [sp, #44]	; 0x2c
   87a1c:	9303      	str	r3, [sp, #12]
   87a1e:	9311      	str	r3, [sp, #68]	; 0x44
   87a20:	9310      	str	r3, [sp, #64]	; 0x40
   87a22:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87a26:	f8cd b010 	str.w	fp, [sp, #16]
   87a2a:	f898 3000 	ldrb.w	r3, [r8]
   87a2e:	4644      	mov	r4, r8
   87a30:	b1fb      	cbz	r3, 87a72 <_vfiprintf_r+0xc2>
   87a32:	2b25      	cmp	r3, #37	; 0x25
   87a34:	d102      	bne.n	87a3c <_vfiprintf_r+0x8c>
   87a36:	e01c      	b.n	87a72 <_vfiprintf_r+0xc2>
   87a38:	2b25      	cmp	r3, #37	; 0x25
   87a3a:	d003      	beq.n	87a44 <_vfiprintf_r+0x94>
   87a3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87a40:	2b00      	cmp	r3, #0
   87a42:	d1f9      	bne.n	87a38 <_vfiprintf_r+0x88>
   87a44:	eba4 0508 	sub.w	r5, r4, r8
   87a48:	b19d      	cbz	r5, 87a72 <_vfiprintf_r+0xc2>
   87a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   87a4e:	3301      	adds	r3, #1
   87a50:	442a      	add	r2, r5
   87a52:	2b07      	cmp	r3, #7
   87a54:	f8c9 8000 	str.w	r8, [r9]
   87a58:	f8c9 5004 	str.w	r5, [r9, #4]
   87a5c:	9211      	str	r2, [sp, #68]	; 0x44
   87a5e:	9310      	str	r3, [sp, #64]	; 0x40
   87a60:	dd7a      	ble.n	87b58 <_vfiprintf_r+0x1a8>
   87a62:	2a00      	cmp	r2, #0
   87a64:	f040 84b5 	bne.w	883d2 <_vfiprintf_r+0xa22>
   87a68:	46d1      	mov	r9, sl
   87a6a:	9b03      	ldr	r3, [sp, #12]
   87a6c:	9210      	str	r2, [sp, #64]	; 0x40
   87a6e:	442b      	add	r3, r5
   87a70:	9303      	str	r3, [sp, #12]
   87a72:	7823      	ldrb	r3, [r4, #0]
   87a74:	2b00      	cmp	r3, #0
   87a76:	f000 83e5 	beq.w	88244 <_vfiprintf_r+0x894>
   87a7a:	2000      	movs	r0, #0
   87a7c:	f04f 0300 	mov.w	r3, #0
   87a80:	f104 0801 	add.w	r8, r4, #1
   87a84:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   87a88:	7862      	ldrb	r2, [r4, #1]
   87a8a:	4606      	mov	r6, r0
   87a8c:	4605      	mov	r5, r0
   87a8e:	4603      	mov	r3, r0
   87a90:	f04f 34ff 	mov.w	r4, #4294967295
   87a94:	f108 0801 	add.w	r8, r8, #1
   87a98:	f1a2 0120 	sub.w	r1, r2, #32
   87a9c:	2958      	cmp	r1, #88	; 0x58
   87a9e:	f200 82d9 	bhi.w	88054 <_vfiprintf_r+0x6a4>
   87aa2:	e8df f011 	tbh	[pc, r1, lsl #1]
   87aa6:	0228      	.short	0x0228
   87aa8:	02d702d7 	.word	0x02d702d7
   87aac:	02d70230 	.word	0x02d70230
   87ab0:	02d702d7 	.word	0x02d702d7
   87ab4:	02d702d7 	.word	0x02d702d7
   87ab8:	00a002d7 	.word	0x00a002d7
   87abc:	02d70288 	.word	0x02d70288
   87ac0:	02b800a8 	.word	0x02b800a8
   87ac4:	01a602d7 	.word	0x01a602d7
   87ac8:	01ab01ab 	.word	0x01ab01ab
   87acc:	01ab01ab 	.word	0x01ab01ab
   87ad0:	01ab01ab 	.word	0x01ab01ab
   87ad4:	01ab01ab 	.word	0x01ab01ab
   87ad8:	02d701ab 	.word	0x02d701ab
   87adc:	02d702d7 	.word	0x02d702d7
   87ae0:	02d702d7 	.word	0x02d702d7
   87ae4:	02d702d7 	.word	0x02d702d7
   87ae8:	02d702d7 	.word	0x02d702d7
   87aec:	01b902d7 	.word	0x01b902d7
   87af0:	02d702d7 	.word	0x02d702d7
   87af4:	02d702d7 	.word	0x02d702d7
   87af8:	02d702d7 	.word	0x02d702d7
   87afc:	02d702d7 	.word	0x02d702d7
   87b00:	02d702d7 	.word	0x02d702d7
   87b04:	02d7019e 	.word	0x02d7019e
   87b08:	02d702d7 	.word	0x02d702d7
   87b0c:	02d702d7 	.word	0x02d702d7
   87b10:	02d701a2 	.word	0x02d701a2
   87b14:	025a02d7 	.word	0x025a02d7
   87b18:	02d702d7 	.word	0x02d702d7
   87b1c:	02d702d7 	.word	0x02d702d7
   87b20:	02d702d7 	.word	0x02d702d7
   87b24:	02d702d7 	.word	0x02d702d7
   87b28:	02d702d7 	.word	0x02d702d7
   87b2c:	02220261 	.word	0x02220261
   87b30:	02d702d7 	.word	0x02d702d7
   87b34:	027602d7 	.word	0x027602d7
   87b38:	02d70222 	.word	0x02d70222
   87b3c:	027b02d7 	.word	0x027b02d7
   87b40:	01fc02d7 	.word	0x01fc02d7
   87b44:	02100189 	.word	0x02100189
   87b48:	02d702d2 	.word	0x02d702d2
   87b4c:	02d70295 	.word	0x02d70295
   87b50:	02d700ad 	.word	0x02d700ad
   87b54:	023502d7 	.word	0x023502d7
   87b58:	f109 0908 	add.w	r9, r9, #8
   87b5c:	9b03      	ldr	r3, [sp, #12]
   87b5e:	442b      	add	r3, r5
   87b60:	9303      	str	r3, [sp, #12]
   87b62:	e786      	b.n	87a72 <_vfiprintf_r+0xc2>
   87b64:	4659      	mov	r1, fp
   87b66:	9806      	ldr	r0, [sp, #24]
   87b68:	f000 fdaa 	bl	886c0 <__swsetup_r>
   87b6c:	bb18      	cbnz	r0, 87bb6 <_vfiprintf_r+0x206>
   87b6e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   87b72:	f001 031a 	and.w	r3, r1, #26
   87b76:	2b0a      	cmp	r3, #10
   87b78:	f47f af4b 	bne.w	87a12 <_vfiprintf_r+0x62>
   87b7c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   87b80:	2b00      	cmp	r3, #0
   87b82:	f6ff af46 	blt.w	87a12 <_vfiprintf_r+0x62>
   87b86:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   87b8a:	07db      	lsls	r3, r3, #31
   87b8c:	d405      	bmi.n	87b9a <_vfiprintf_r+0x1ea>
   87b8e:	058f      	lsls	r7, r1, #22
   87b90:	d403      	bmi.n	87b9a <_vfiprintf_r+0x1ea>
   87b92:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   87b96:	f002 fa81 	bl	8a09c <__retarget_lock_release_recursive>
   87b9a:	462b      	mov	r3, r5
   87b9c:	4642      	mov	r2, r8
   87b9e:	4659      	mov	r1, fp
   87ba0:	9806      	ldr	r0, [sp, #24]
   87ba2:	f000 fd49 	bl	88638 <__sbprintf>
   87ba6:	9003      	str	r0, [sp, #12]
   87ba8:	9803      	ldr	r0, [sp, #12]
   87baa:	b02d      	add	sp, #180	; 0xb4
   87bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bb0:	f001 fea4 	bl	898fc <__sinit>
   87bb4:	e709      	b.n	879ca <_vfiprintf_r+0x1a>
   87bb6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   87bba:	07d9      	lsls	r1, r3, #31
   87bbc:	d404      	bmi.n	87bc8 <_vfiprintf_r+0x218>
   87bbe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87bc2:	059a      	lsls	r2, r3, #22
   87bc4:	f140 84ae 	bpl.w	88524 <_vfiprintf_r+0xb74>
   87bc8:	f04f 33ff 	mov.w	r3, #4294967295
   87bcc:	9303      	str	r3, [sp, #12]
   87bce:	9803      	ldr	r0, [sp, #12]
   87bd0:	b02d      	add	sp, #180	; 0xb4
   87bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bd6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   87bda:	f002 fa5d 	bl	8a098 <__retarget_lock_acquire_recursive>
   87bde:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   87be2:	b281      	uxth	r1, r0
   87be4:	e6fb      	b.n	879de <_vfiprintf_r+0x2e>
   87be6:	9907      	ldr	r1, [sp, #28]
   87be8:	460a      	mov	r2, r1
   87bea:	680d      	ldr	r5, [r1, #0]
   87bec:	3204      	adds	r2, #4
   87bee:	2d00      	cmp	r5, #0
   87bf0:	9207      	str	r2, [sp, #28]
   87bf2:	da02      	bge.n	87bfa <_vfiprintf_r+0x24a>
   87bf4:	426d      	negs	r5, r5
   87bf6:	f043 0304 	orr.w	r3, r3, #4
   87bfa:	f898 2000 	ldrb.w	r2, [r8]
   87bfe:	e749      	b.n	87a94 <_vfiprintf_r+0xe4>
   87c00:	9508      	str	r5, [sp, #32]
   87c02:	069e      	lsls	r6, r3, #26
   87c04:	f100 845a 	bmi.w	884bc <_vfiprintf_r+0xb0c>
   87c08:	9907      	ldr	r1, [sp, #28]
   87c0a:	06dd      	lsls	r5, r3, #27
   87c0c:	460a      	mov	r2, r1
   87c0e:	f100 83ef 	bmi.w	883f0 <_vfiprintf_r+0xa40>
   87c12:	0658      	lsls	r0, r3, #25
   87c14:	f140 83ec 	bpl.w	883f0 <_vfiprintf_r+0xa40>
   87c18:	2700      	movs	r7, #0
   87c1a:	2201      	movs	r2, #1
   87c1c:	880e      	ldrh	r6, [r1, #0]
   87c1e:	3104      	adds	r1, #4
   87c20:	9107      	str	r1, [sp, #28]
   87c22:	f04f 0100 	mov.w	r1, #0
   87c26:	2500      	movs	r5, #0
   87c28:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   87c2c:	1c61      	adds	r1, r4, #1
   87c2e:	f000 8117 	beq.w	87e60 <_vfiprintf_r+0x4b0>
   87c32:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   87c36:	9102      	str	r1, [sp, #8]
   87c38:	ea56 0107 	orrs.w	r1, r6, r7
   87c3c:	f040 8115 	bne.w	87e6a <_vfiprintf_r+0x4ba>
   87c40:	2c00      	cmp	r4, #0
   87c42:	f040 835b 	bne.w	882fc <_vfiprintf_r+0x94c>
   87c46:	2a00      	cmp	r2, #0
   87c48:	f040 83b6 	bne.w	883b8 <_vfiprintf_r+0xa08>
   87c4c:	f013 0301 	ands.w	r3, r3, #1
   87c50:	9305      	str	r3, [sp, #20]
   87c52:	f000 8455 	beq.w	88500 <_vfiprintf_r+0xb50>
   87c56:	2330      	movs	r3, #48	; 0x30
   87c58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   87c5c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   87c60:	9b05      	ldr	r3, [sp, #20]
   87c62:	42a3      	cmp	r3, r4
   87c64:	bfb8      	it	lt
   87c66:	4623      	movlt	r3, r4
   87c68:	9301      	str	r3, [sp, #4]
   87c6a:	b10d      	cbz	r5, 87c70 <_vfiprintf_r+0x2c0>
   87c6c:	3301      	adds	r3, #1
   87c6e:	9301      	str	r3, [sp, #4]
   87c70:	9b02      	ldr	r3, [sp, #8]
   87c72:	f013 0302 	ands.w	r3, r3, #2
   87c76:	9309      	str	r3, [sp, #36]	; 0x24
   87c78:	d002      	beq.n	87c80 <_vfiprintf_r+0x2d0>
   87c7a:	9b01      	ldr	r3, [sp, #4]
   87c7c:	3302      	adds	r3, #2
   87c7e:	9301      	str	r3, [sp, #4]
   87c80:	9b02      	ldr	r3, [sp, #8]
   87c82:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   87c86:	930a      	str	r3, [sp, #40]	; 0x28
   87c88:	f040 8215 	bne.w	880b6 <_vfiprintf_r+0x706>
   87c8c:	9b08      	ldr	r3, [sp, #32]
   87c8e:	9a01      	ldr	r2, [sp, #4]
   87c90:	1a9d      	subs	r5, r3, r2
   87c92:	2d00      	cmp	r5, #0
   87c94:	f340 820f 	ble.w	880b6 <_vfiprintf_r+0x706>
   87c98:	2d10      	cmp	r5, #16
   87c9a:	f340 8484 	ble.w	885a6 <_vfiprintf_r+0xbf6>
   87c9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87ca0:	46ce      	mov	lr, r9
   87ca2:	2710      	movs	r7, #16
   87ca4:	46a1      	mov	r9, r4
   87ca6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   87ca8:	4ec5      	ldr	r6, [pc, #788]	; (87fc0 <_vfiprintf_r+0x610>)
   87caa:	4619      	mov	r1, r3
   87cac:	9c06      	ldr	r4, [sp, #24]
   87cae:	e007      	b.n	87cc0 <_vfiprintf_r+0x310>
   87cb0:	f101 0c02 	add.w	ip, r1, #2
   87cb4:	4601      	mov	r1, r0
   87cb6:	f10e 0e08 	add.w	lr, lr, #8
   87cba:	3d10      	subs	r5, #16
   87cbc:	2d10      	cmp	r5, #16
   87cbe:	dd11      	ble.n	87ce4 <_vfiprintf_r+0x334>
   87cc0:	1c48      	adds	r0, r1, #1
   87cc2:	3210      	adds	r2, #16
   87cc4:	2807      	cmp	r0, #7
   87cc6:	9211      	str	r2, [sp, #68]	; 0x44
   87cc8:	e88e 00c0 	stmia.w	lr, {r6, r7}
   87ccc:	9010      	str	r0, [sp, #64]	; 0x40
   87cce:	ddef      	ble.n	87cb0 <_vfiprintf_r+0x300>
   87cd0:	2a00      	cmp	r2, #0
   87cd2:	f040 81d9 	bne.w	88088 <_vfiprintf_r+0x6d8>
   87cd6:	3d10      	subs	r5, #16
   87cd8:	2d10      	cmp	r5, #16
   87cda:	4611      	mov	r1, r2
   87cdc:	f04f 0c01 	mov.w	ip, #1
   87ce0:	46d6      	mov	lr, sl
   87ce2:	dced      	bgt.n	87cc0 <_vfiprintf_r+0x310>
   87ce4:	464c      	mov	r4, r9
   87ce6:	4661      	mov	r1, ip
   87ce8:	46f1      	mov	r9, lr
   87cea:	442a      	add	r2, r5
   87cec:	2907      	cmp	r1, #7
   87cee:	9211      	str	r2, [sp, #68]	; 0x44
   87cf0:	f8c9 6000 	str.w	r6, [r9]
   87cf4:	f8c9 5004 	str.w	r5, [r9, #4]
   87cf8:	9110      	str	r1, [sp, #64]	; 0x40
   87cfa:	f300 82eb 	bgt.w	882d4 <_vfiprintf_r+0x924>
   87cfe:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   87d02:	f109 0908 	add.w	r9, r9, #8
   87d06:	1c48      	adds	r0, r1, #1
   87d08:	2d00      	cmp	r5, #0
   87d0a:	f040 81dc 	bne.w	880c6 <_vfiprintf_r+0x716>
   87d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87d10:	2b00      	cmp	r3, #0
   87d12:	f000 81f6 	beq.w	88102 <_vfiprintf_r+0x752>
   87d16:	2102      	movs	r1, #2
   87d18:	ab0e      	add	r3, sp, #56	; 0x38
   87d1a:	440a      	add	r2, r1
   87d1c:	2807      	cmp	r0, #7
   87d1e:	9211      	str	r2, [sp, #68]	; 0x44
   87d20:	9010      	str	r0, [sp, #64]	; 0x40
   87d22:	f8c9 1004 	str.w	r1, [r9, #4]
   87d26:	f8c9 3000 	str.w	r3, [r9]
   87d2a:	f340 81e6 	ble.w	880fa <_vfiprintf_r+0x74a>
   87d2e:	2a00      	cmp	r2, #0
   87d30:	f040 8395 	bne.w	8845e <_vfiprintf_r+0xaae>
   87d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87d36:	2001      	movs	r0, #1
   87d38:	2b80      	cmp	r3, #128	; 0x80
   87d3a:	4611      	mov	r1, r2
   87d3c:	46d1      	mov	r9, sl
   87d3e:	f040 81e4 	bne.w	8810a <_vfiprintf_r+0x75a>
   87d42:	9b08      	ldr	r3, [sp, #32]
   87d44:	9d01      	ldr	r5, [sp, #4]
   87d46:	1b5e      	subs	r6, r3, r5
   87d48:	2e00      	cmp	r6, #0
   87d4a:	f340 81de 	ble.w	8810a <_vfiprintf_r+0x75a>
   87d4e:	2e10      	cmp	r6, #16
   87d50:	f340 843c 	ble.w	885cc <_vfiprintf_r+0xc1c>
   87d54:	46cc      	mov	ip, r9
   87d56:	2710      	movs	r7, #16
   87d58:	46a1      	mov	r9, r4
   87d5a:	4d9a      	ldr	r5, [pc, #616]	; (87fc4 <_vfiprintf_r+0x614>)
   87d5c:	9c06      	ldr	r4, [sp, #24]
   87d5e:	e007      	b.n	87d70 <_vfiprintf_r+0x3c0>
   87d60:	f101 0e02 	add.w	lr, r1, #2
   87d64:	4601      	mov	r1, r0
   87d66:	f10c 0c08 	add.w	ip, ip, #8
   87d6a:	3e10      	subs	r6, #16
   87d6c:	2e10      	cmp	r6, #16
   87d6e:	dd11      	ble.n	87d94 <_vfiprintf_r+0x3e4>
   87d70:	1c48      	adds	r0, r1, #1
   87d72:	3210      	adds	r2, #16
   87d74:	2807      	cmp	r0, #7
   87d76:	9211      	str	r2, [sp, #68]	; 0x44
   87d78:	e88c 00a0 	stmia.w	ip, {r5, r7}
   87d7c:	9010      	str	r0, [sp, #64]	; 0x40
   87d7e:	ddef      	ble.n	87d60 <_vfiprintf_r+0x3b0>
   87d80:	2a00      	cmp	r2, #0
   87d82:	f040 829b 	bne.w	882bc <_vfiprintf_r+0x90c>
   87d86:	3e10      	subs	r6, #16
   87d88:	2e10      	cmp	r6, #16
   87d8a:	f04f 0e01 	mov.w	lr, #1
   87d8e:	4611      	mov	r1, r2
   87d90:	46d4      	mov	ip, sl
   87d92:	dced      	bgt.n	87d70 <_vfiprintf_r+0x3c0>
   87d94:	464c      	mov	r4, r9
   87d96:	46e1      	mov	r9, ip
   87d98:	4432      	add	r2, r6
   87d9a:	f1be 0f07 	cmp.w	lr, #7
   87d9e:	9211      	str	r2, [sp, #68]	; 0x44
   87da0:	e889 0060 	stmia.w	r9, {r5, r6}
   87da4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   87da8:	f300 8366 	bgt.w	88478 <_vfiprintf_r+0xac8>
   87dac:	f109 0908 	add.w	r9, r9, #8
   87db0:	f10e 0001 	add.w	r0, lr, #1
   87db4:	4671      	mov	r1, lr
   87db6:	e1a8      	b.n	8810a <_vfiprintf_r+0x75a>
   87db8:	9508      	str	r5, [sp, #32]
   87dba:	f013 0220 	ands.w	r2, r3, #32
   87dbe:	f040 8389 	bne.w	884d4 <_vfiprintf_r+0xb24>
   87dc2:	f013 0110 	ands.w	r1, r3, #16
   87dc6:	f040 8319 	bne.w	883fc <_vfiprintf_r+0xa4c>
   87dca:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   87dce:	f000 8315 	beq.w	883fc <_vfiprintf_r+0xa4c>
   87dd2:	9807      	ldr	r0, [sp, #28]
   87dd4:	460a      	mov	r2, r1
   87dd6:	4601      	mov	r1, r0
   87dd8:	3104      	adds	r1, #4
   87dda:	8806      	ldrh	r6, [r0, #0]
   87ddc:	2700      	movs	r7, #0
   87dde:	9107      	str	r1, [sp, #28]
   87de0:	e71f      	b.n	87c22 <_vfiprintf_r+0x272>
   87de2:	9508      	str	r5, [sp, #32]
   87de4:	f043 0310 	orr.w	r3, r3, #16
   87de8:	e7e7      	b.n	87dba <_vfiprintf_r+0x40a>
   87dea:	9508      	str	r5, [sp, #32]
   87dec:	f043 0310 	orr.w	r3, r3, #16
   87df0:	e707      	b.n	87c02 <_vfiprintf_r+0x252>
   87df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87df6:	f898 2000 	ldrb.w	r2, [r8]
   87dfa:	e64b      	b.n	87a94 <_vfiprintf_r+0xe4>
   87dfc:	2500      	movs	r5, #0
   87dfe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   87e02:	f818 2b01 	ldrb.w	r2, [r8], #1
   87e06:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   87e0a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   87e0e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   87e12:	2909      	cmp	r1, #9
   87e14:	d9f5      	bls.n	87e02 <_vfiprintf_r+0x452>
   87e16:	e63f      	b.n	87a98 <_vfiprintf_r+0xe8>
   87e18:	9508      	str	r5, [sp, #32]
   87e1a:	2800      	cmp	r0, #0
   87e1c:	f040 8402 	bne.w	88624 <_vfiprintf_r+0xc74>
   87e20:	f043 0310 	orr.w	r3, r3, #16
   87e24:	069e      	lsls	r6, r3, #26
   87e26:	f100 833d 	bmi.w	884a4 <_vfiprintf_r+0xaf4>
   87e2a:	9907      	ldr	r1, [sp, #28]
   87e2c:	06dd      	lsls	r5, r3, #27
   87e2e:	460a      	mov	r2, r1
   87e30:	f100 82f0 	bmi.w	88414 <_vfiprintf_r+0xa64>
   87e34:	0658      	lsls	r0, r3, #25
   87e36:	f140 82ed 	bpl.w	88414 <_vfiprintf_r+0xa64>
   87e3a:	f9b1 6000 	ldrsh.w	r6, [r1]
   87e3e:	3204      	adds	r2, #4
   87e40:	17f7      	asrs	r7, r6, #31
   87e42:	4630      	mov	r0, r6
   87e44:	4639      	mov	r1, r7
   87e46:	9207      	str	r2, [sp, #28]
   87e48:	2800      	cmp	r0, #0
   87e4a:	f171 0200 	sbcs.w	r2, r1, #0
   87e4e:	f2c0 835a 	blt.w	88506 <_vfiprintf_r+0xb56>
   87e52:	1c61      	adds	r1, r4, #1
   87e54:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   87e58:	f04f 0201 	mov.w	r2, #1
   87e5c:	f47f aee9 	bne.w	87c32 <_vfiprintf_r+0x282>
   87e60:	ea56 0107 	orrs.w	r1, r6, r7
   87e64:	f000 824b 	beq.w	882fe <_vfiprintf_r+0x94e>
   87e68:	9302      	str	r3, [sp, #8]
   87e6a:	2a01      	cmp	r2, #1
   87e6c:	f000 828a 	beq.w	88384 <_vfiprintf_r+0x9d4>
   87e70:	2a02      	cmp	r2, #2
   87e72:	f040 825a 	bne.w	8832a <_vfiprintf_r+0x97a>
   87e76:	46d3      	mov	fp, sl
   87e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
   87e7a:	0933      	lsrs	r3, r6, #4
   87e7c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   87e80:	0939      	lsrs	r1, r7, #4
   87e82:	f006 020f 	and.w	r2, r6, #15
   87e86:	460f      	mov	r7, r1
   87e88:	461e      	mov	r6, r3
   87e8a:	5c83      	ldrb	r3, [r0, r2]
   87e8c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   87e90:	ea56 0307 	orrs.w	r3, r6, r7
   87e94:	d1f1      	bne.n	87e7a <_vfiprintf_r+0x4ca>
   87e96:	ebaa 030b 	sub.w	r3, sl, fp
   87e9a:	9305      	str	r3, [sp, #20]
   87e9c:	e6e0      	b.n	87c60 <_vfiprintf_r+0x2b0>
   87e9e:	2800      	cmp	r0, #0
   87ea0:	f040 83bd 	bne.w	8861e <_vfiprintf_r+0xc6e>
   87ea4:	0699      	lsls	r1, r3, #26
   87ea6:	f100 8359 	bmi.w	8855c <_vfiprintf_r+0xbac>
   87eaa:	06da      	lsls	r2, r3, #27
   87eac:	f100 80e5 	bmi.w	8807a <_vfiprintf_r+0x6ca>
   87eb0:	065b      	lsls	r3, r3, #25
   87eb2:	f140 80e2 	bpl.w	8807a <_vfiprintf_r+0x6ca>
   87eb6:	9a07      	ldr	r2, [sp, #28]
   87eb8:	6813      	ldr	r3, [r2, #0]
   87eba:	3204      	adds	r2, #4
   87ebc:	9207      	str	r2, [sp, #28]
   87ebe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   87ec2:	801a      	strh	r2, [r3, #0]
   87ec4:	e5b1      	b.n	87a2a <_vfiprintf_r+0x7a>
   87ec6:	2278      	movs	r2, #120	; 0x78
   87ec8:	2130      	movs	r1, #48	; 0x30
   87eca:	9508      	str	r5, [sp, #32]
   87ecc:	9d07      	ldr	r5, [sp, #28]
   87ece:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   87ed2:	1d2a      	adds	r2, r5, #4
   87ed4:	9207      	str	r2, [sp, #28]
   87ed6:	4a3c      	ldr	r2, [pc, #240]	; (87fc8 <_vfiprintf_r+0x618>)
   87ed8:	682e      	ldr	r6, [r5, #0]
   87eda:	920b      	str	r2, [sp, #44]	; 0x2c
   87edc:	f043 0302 	orr.w	r3, r3, #2
   87ee0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   87ee4:	2700      	movs	r7, #0
   87ee6:	2202      	movs	r2, #2
   87ee8:	e69b      	b.n	87c22 <_vfiprintf_r+0x272>
   87eea:	9508      	str	r5, [sp, #32]
   87eec:	2800      	cmp	r0, #0
   87eee:	d099      	beq.n	87e24 <_vfiprintf_r+0x474>
   87ef0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   87ef4:	e796      	b.n	87e24 <_vfiprintf_r+0x474>
   87ef6:	f898 2000 	ldrb.w	r2, [r8]
   87efa:	2e00      	cmp	r6, #0
   87efc:	f47f adca 	bne.w	87a94 <_vfiprintf_r+0xe4>
   87f00:	2001      	movs	r0, #1
   87f02:	2620      	movs	r6, #32
   87f04:	e5c6      	b.n	87a94 <_vfiprintf_r+0xe4>
   87f06:	f043 0301 	orr.w	r3, r3, #1
   87f0a:	f898 2000 	ldrb.w	r2, [r8]
   87f0e:	e5c1      	b.n	87a94 <_vfiprintf_r+0xe4>
   87f10:	9508      	str	r5, [sp, #32]
   87f12:	2800      	cmp	r0, #0
   87f14:	f040 8380 	bne.w	88618 <_vfiprintf_r+0xc68>
   87f18:	492b      	ldr	r1, [pc, #172]	; (87fc8 <_vfiprintf_r+0x618>)
   87f1a:	910b      	str	r1, [sp, #44]	; 0x2c
   87f1c:	069f      	lsls	r7, r3, #26
   87f1e:	f100 82e5 	bmi.w	884ec <_vfiprintf_r+0xb3c>
   87f22:	9807      	ldr	r0, [sp, #28]
   87f24:	06de      	lsls	r6, r3, #27
   87f26:	4601      	mov	r1, r0
   87f28:	f100 826f 	bmi.w	8840a <_vfiprintf_r+0xa5a>
   87f2c:	065d      	lsls	r5, r3, #25
   87f2e:	f140 826c 	bpl.w	8840a <_vfiprintf_r+0xa5a>
   87f32:	2700      	movs	r7, #0
   87f34:	3104      	adds	r1, #4
   87f36:	8806      	ldrh	r6, [r0, #0]
   87f38:	9107      	str	r1, [sp, #28]
   87f3a:	07d8      	lsls	r0, r3, #31
   87f3c:	f140 8220 	bpl.w	88380 <_vfiprintf_r+0x9d0>
   87f40:	ea56 0107 	orrs.w	r1, r6, r7
   87f44:	f000 821c 	beq.w	88380 <_vfiprintf_r+0x9d0>
   87f48:	2130      	movs	r1, #48	; 0x30
   87f4a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   87f4e:	f043 0302 	orr.w	r3, r3, #2
   87f52:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   87f56:	2202      	movs	r2, #2
   87f58:	e663      	b.n	87c22 <_vfiprintf_r+0x272>
   87f5a:	9508      	str	r5, [sp, #32]
   87f5c:	2800      	cmp	r0, #0
   87f5e:	f040 8355 	bne.w	8860c <_vfiprintf_r+0xc5c>
   87f62:	491a      	ldr	r1, [pc, #104]	; (87fcc <_vfiprintf_r+0x61c>)
   87f64:	910b      	str	r1, [sp, #44]	; 0x2c
   87f66:	e7d9      	b.n	87f1c <_vfiprintf_r+0x56c>
   87f68:	2201      	movs	r2, #1
   87f6a:	9807      	ldr	r0, [sp, #28]
   87f6c:	4611      	mov	r1, r2
   87f6e:	9201      	str	r2, [sp, #4]
   87f70:	6802      	ldr	r2, [r0, #0]
   87f72:	f04f 0400 	mov.w	r4, #0
   87f76:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   87f7a:	4602      	mov	r2, r0
   87f7c:	3204      	adds	r2, #4
   87f7e:	9508      	str	r5, [sp, #32]
   87f80:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   87f84:	9105      	str	r1, [sp, #20]
   87f86:	9207      	str	r2, [sp, #28]
   87f88:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   87f8c:	9302      	str	r3, [sp, #8]
   87f8e:	2400      	movs	r4, #0
   87f90:	e66e      	b.n	87c70 <_vfiprintf_r+0x2c0>
   87f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87f96:	f898 2000 	ldrb.w	r2, [r8]
   87f9a:	e57b      	b.n	87a94 <_vfiprintf_r+0xe4>
   87f9c:	f898 2000 	ldrb.w	r2, [r8]
   87fa0:	2a6c      	cmp	r2, #108	; 0x6c
   87fa2:	bf03      	ittte	eq
   87fa4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   87fa8:	f043 0320 	orreq.w	r3, r3, #32
   87fac:	f108 0801 	addeq.w	r8, r8, #1
   87fb0:	f043 0310 	orrne.w	r3, r3, #16
   87fb4:	e56e      	b.n	87a94 <_vfiprintf_r+0xe4>
   87fb6:	f898 2000 	ldrb.w	r2, [r8]
   87fba:	2001      	movs	r0, #1
   87fbc:	262b      	movs	r6, #43	; 0x2b
   87fbe:	e569      	b.n	87a94 <_vfiprintf_r+0xe4>
   87fc0:	0008c234 	.word	0x0008c234
   87fc4:	0008c244 	.word	0x0008c244
   87fc8:	0008c1f4 	.word	0x0008c1f4
   87fcc:	0008c1e0 	.word	0x0008c1e0
   87fd0:	f04f 0200 	mov.w	r2, #0
   87fd4:	9907      	ldr	r1, [sp, #28]
   87fd6:	9508      	str	r5, [sp, #32]
   87fd8:	f8d1 b000 	ldr.w	fp, [r1]
   87fdc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   87fe0:	1d0d      	adds	r5, r1, #4
   87fe2:	f1bb 0f00 	cmp.w	fp, #0
   87fe6:	f000 82e4 	beq.w	885b2 <_vfiprintf_r+0xc02>
   87fea:	1c67      	adds	r7, r4, #1
   87fec:	f000 82c3 	beq.w	88576 <_vfiprintf_r+0xbc6>
   87ff0:	4622      	mov	r2, r4
   87ff2:	2100      	movs	r1, #0
   87ff4:	4658      	mov	r0, fp
   87ff6:	9301      	str	r3, [sp, #4]
   87ff8:	f002 fb8a 	bl	8a710 <memchr>
   87ffc:	9b01      	ldr	r3, [sp, #4]
   87ffe:	2800      	cmp	r0, #0
   88000:	f000 82e8 	beq.w	885d4 <_vfiprintf_r+0xc24>
   88004:	eba0 020b 	sub.w	r2, r0, fp
   88008:	9507      	str	r5, [sp, #28]
   8800a:	9205      	str	r2, [sp, #20]
   8800c:	9302      	str	r3, [sp, #8]
   8800e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88012:	2400      	movs	r4, #0
   88014:	e624      	b.n	87c60 <_vfiprintf_r+0x2b0>
   88016:	f898 2000 	ldrb.w	r2, [r8]
   8801a:	f108 0701 	add.w	r7, r8, #1
   8801e:	2a2a      	cmp	r2, #42	; 0x2a
   88020:	f000 82e9 	beq.w	885f6 <_vfiprintf_r+0xc46>
   88024:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88028:	2909      	cmp	r1, #9
   8802a:	46b8      	mov	r8, r7
   8802c:	f04f 0400 	mov.w	r4, #0
   88030:	f63f ad32 	bhi.w	87a98 <_vfiprintf_r+0xe8>
   88034:	f818 2b01 	ldrb.w	r2, [r8], #1
   88038:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8803c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   88040:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88044:	2909      	cmp	r1, #9
   88046:	d9f5      	bls.n	88034 <_vfiprintf_r+0x684>
   88048:	e526      	b.n	87a98 <_vfiprintf_r+0xe8>
   8804a:	f043 0320 	orr.w	r3, r3, #32
   8804e:	f898 2000 	ldrb.w	r2, [r8]
   88052:	e51f      	b.n	87a94 <_vfiprintf_r+0xe4>
   88054:	9508      	str	r5, [sp, #32]
   88056:	2800      	cmp	r0, #0
   88058:	f040 82db 	bne.w	88612 <_vfiprintf_r+0xc62>
   8805c:	2a00      	cmp	r2, #0
   8805e:	f000 80f1 	beq.w	88244 <_vfiprintf_r+0x894>
   88062:	2101      	movs	r1, #1
   88064:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88068:	f04f 0200 	mov.w	r2, #0
   8806c:	9101      	str	r1, [sp, #4]
   8806e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88072:	9105      	str	r1, [sp, #20]
   88074:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   88078:	e788      	b.n	87f8c <_vfiprintf_r+0x5dc>
   8807a:	9a07      	ldr	r2, [sp, #28]
   8807c:	6813      	ldr	r3, [r2, #0]
   8807e:	3204      	adds	r2, #4
   88080:	9207      	str	r2, [sp, #28]
   88082:	9a03      	ldr	r2, [sp, #12]
   88084:	601a      	str	r2, [r3, #0]
   88086:	e4d0      	b.n	87a2a <_vfiprintf_r+0x7a>
   88088:	aa0f      	add	r2, sp, #60	; 0x3c
   8808a:	9904      	ldr	r1, [sp, #16]
   8808c:	4620      	mov	r0, r4
   8808e:	f7ff fc4f 	bl	87930 <__sprint_r.part.0>
   88092:	2800      	cmp	r0, #0
   88094:	f040 8143 	bne.w	8831e <_vfiprintf_r+0x96e>
   88098:	9910      	ldr	r1, [sp, #64]	; 0x40
   8809a:	46d6      	mov	lr, sl
   8809c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8809e:	f101 0c01 	add.w	ip, r1, #1
   880a2:	e60a      	b.n	87cba <_vfiprintf_r+0x30a>
   880a4:	aa0f      	add	r2, sp, #60	; 0x3c
   880a6:	9904      	ldr	r1, [sp, #16]
   880a8:	9806      	ldr	r0, [sp, #24]
   880aa:	f7ff fc41 	bl	87930 <__sprint_r.part.0>
   880ae:	2800      	cmp	r0, #0
   880b0:	f040 8135 	bne.w	8831e <_vfiprintf_r+0x96e>
   880b4:	46d1      	mov	r9, sl
   880b6:	9910      	ldr	r1, [sp, #64]	; 0x40
   880b8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   880bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   880be:	1c48      	adds	r0, r1, #1
   880c0:	2d00      	cmp	r5, #0
   880c2:	f43f ae24 	beq.w	87d0e <_vfiprintf_r+0x35e>
   880c6:	2101      	movs	r1, #1
   880c8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   880cc:	440a      	add	r2, r1
   880ce:	2807      	cmp	r0, #7
   880d0:	9211      	str	r2, [sp, #68]	; 0x44
   880d2:	9010      	str	r0, [sp, #64]	; 0x40
   880d4:	f8c9 1004 	str.w	r1, [r9, #4]
   880d8:	f8c9 5000 	str.w	r5, [r9]
   880dc:	f340 8109 	ble.w	882f2 <_vfiprintf_r+0x942>
   880e0:	2a00      	cmp	r2, #0
   880e2:	f040 81af 	bne.w	88444 <_vfiprintf_r+0xa94>
   880e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   880e8:	2b00      	cmp	r3, #0
   880ea:	f43f ae23 	beq.w	87d34 <_vfiprintf_r+0x384>
   880ee:	2202      	movs	r2, #2
   880f0:	4608      	mov	r0, r1
   880f2:	46d1      	mov	r9, sl
   880f4:	ab0e      	add	r3, sp, #56	; 0x38
   880f6:	921d      	str	r2, [sp, #116]	; 0x74
   880f8:	931c      	str	r3, [sp, #112]	; 0x70
   880fa:	4601      	mov	r1, r0
   880fc:	f109 0908 	add.w	r9, r9, #8
   88100:	3001      	adds	r0, #1
   88102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88104:	2b80      	cmp	r3, #128	; 0x80
   88106:	f43f ae1c 	beq.w	87d42 <_vfiprintf_r+0x392>
   8810a:	9b05      	ldr	r3, [sp, #20]
   8810c:	1ae4      	subs	r4, r4, r3
   8810e:	2c00      	cmp	r4, #0
   88110:	dd2f      	ble.n	88172 <_vfiprintf_r+0x7c2>
   88112:	2c10      	cmp	r4, #16
   88114:	f340 8220 	ble.w	88558 <_vfiprintf_r+0xba8>
   88118:	46ce      	mov	lr, r9
   8811a:	2610      	movs	r6, #16
   8811c:	4db2      	ldr	r5, [pc, #712]	; (883e8 <_vfiprintf_r+0xa38>)
   8811e:	9f06      	ldr	r7, [sp, #24]
   88120:	f8dd 9010 	ldr.w	r9, [sp, #16]
   88124:	e006      	b.n	88134 <_vfiprintf_r+0x784>
   88126:	1c88      	adds	r0, r1, #2
   88128:	4619      	mov	r1, r3
   8812a:	f10e 0e08 	add.w	lr, lr, #8
   8812e:	3c10      	subs	r4, #16
   88130:	2c10      	cmp	r4, #16
   88132:	dd10      	ble.n	88156 <_vfiprintf_r+0x7a6>
   88134:	1c4b      	adds	r3, r1, #1
   88136:	3210      	adds	r2, #16
   88138:	2b07      	cmp	r3, #7
   8813a:	9211      	str	r2, [sp, #68]	; 0x44
   8813c:	e88e 0060 	stmia.w	lr, {r5, r6}
   88140:	9310      	str	r3, [sp, #64]	; 0x40
   88142:	ddf0      	ble.n	88126 <_vfiprintf_r+0x776>
   88144:	2a00      	cmp	r2, #0
   88146:	d165      	bne.n	88214 <_vfiprintf_r+0x864>
   88148:	3c10      	subs	r4, #16
   8814a:	2c10      	cmp	r4, #16
   8814c:	f04f 0001 	mov.w	r0, #1
   88150:	4611      	mov	r1, r2
   88152:	46d6      	mov	lr, sl
   88154:	dcee      	bgt.n	88134 <_vfiprintf_r+0x784>
   88156:	46f1      	mov	r9, lr
   88158:	4422      	add	r2, r4
   8815a:	2807      	cmp	r0, #7
   8815c:	9211      	str	r2, [sp, #68]	; 0x44
   8815e:	f8c9 5000 	str.w	r5, [r9]
   88162:	f8c9 4004 	str.w	r4, [r9, #4]
   88166:	9010      	str	r0, [sp, #64]	; 0x40
   88168:	f300 8085 	bgt.w	88276 <_vfiprintf_r+0x8c6>
   8816c:	f109 0908 	add.w	r9, r9, #8
   88170:	3001      	adds	r0, #1
   88172:	9905      	ldr	r1, [sp, #20]
   88174:	2807      	cmp	r0, #7
   88176:	440a      	add	r2, r1
   88178:	9211      	str	r2, [sp, #68]	; 0x44
   8817a:	f8c9 b000 	str.w	fp, [r9]
   8817e:	f8c9 1004 	str.w	r1, [r9, #4]
   88182:	9010      	str	r0, [sp, #64]	; 0x40
   88184:	f340 8082 	ble.w	8828c <_vfiprintf_r+0x8dc>
   88188:	2a00      	cmp	r2, #0
   8818a:	f040 8118 	bne.w	883be <_vfiprintf_r+0xa0e>
   8818e:	9b02      	ldr	r3, [sp, #8]
   88190:	9210      	str	r2, [sp, #64]	; 0x40
   88192:	0758      	lsls	r0, r3, #29
   88194:	d535      	bpl.n	88202 <_vfiprintf_r+0x852>
   88196:	9b08      	ldr	r3, [sp, #32]
   88198:	9901      	ldr	r1, [sp, #4]
   8819a:	1a5c      	subs	r4, r3, r1
   8819c:	2c00      	cmp	r4, #0
   8819e:	f340 80e7 	ble.w	88370 <_vfiprintf_r+0x9c0>
   881a2:	46d1      	mov	r9, sl
   881a4:	2c10      	cmp	r4, #16
   881a6:	f340 820d 	ble.w	885c4 <_vfiprintf_r+0xc14>
   881aa:	2510      	movs	r5, #16
   881ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   881ae:	4e8f      	ldr	r6, [pc, #572]	; (883ec <_vfiprintf_r+0xa3c>)
   881b0:	9f06      	ldr	r7, [sp, #24]
   881b2:	f8dd b010 	ldr.w	fp, [sp, #16]
   881b6:	e006      	b.n	881c6 <_vfiprintf_r+0x816>
   881b8:	1c88      	adds	r0, r1, #2
   881ba:	4619      	mov	r1, r3
   881bc:	f109 0908 	add.w	r9, r9, #8
   881c0:	3c10      	subs	r4, #16
   881c2:	2c10      	cmp	r4, #16
   881c4:	dd11      	ble.n	881ea <_vfiprintf_r+0x83a>
   881c6:	1c4b      	adds	r3, r1, #1
   881c8:	3210      	adds	r2, #16
   881ca:	2b07      	cmp	r3, #7
   881cc:	9211      	str	r2, [sp, #68]	; 0x44
   881ce:	f8c9 6000 	str.w	r6, [r9]
   881d2:	f8c9 5004 	str.w	r5, [r9, #4]
   881d6:	9310      	str	r3, [sp, #64]	; 0x40
   881d8:	ddee      	ble.n	881b8 <_vfiprintf_r+0x808>
   881da:	bb42      	cbnz	r2, 8822e <_vfiprintf_r+0x87e>
   881dc:	3c10      	subs	r4, #16
   881de:	2c10      	cmp	r4, #16
   881e0:	f04f 0001 	mov.w	r0, #1
   881e4:	4611      	mov	r1, r2
   881e6:	46d1      	mov	r9, sl
   881e8:	dced      	bgt.n	881c6 <_vfiprintf_r+0x816>
   881ea:	4422      	add	r2, r4
   881ec:	2807      	cmp	r0, #7
   881ee:	9211      	str	r2, [sp, #68]	; 0x44
   881f0:	f8c9 6000 	str.w	r6, [r9]
   881f4:	f8c9 4004 	str.w	r4, [r9, #4]
   881f8:	9010      	str	r0, [sp, #64]	; 0x40
   881fa:	dd51      	ble.n	882a0 <_vfiprintf_r+0x8f0>
   881fc:	2a00      	cmp	r2, #0
   881fe:	f040 819a 	bne.w	88536 <_vfiprintf_r+0xb86>
   88202:	9b03      	ldr	r3, [sp, #12]
   88204:	9a08      	ldr	r2, [sp, #32]
   88206:	9901      	ldr	r1, [sp, #4]
   88208:	428a      	cmp	r2, r1
   8820a:	bfac      	ite	ge
   8820c:	189b      	addge	r3, r3, r2
   8820e:	185b      	addlt	r3, r3, r1
   88210:	9303      	str	r3, [sp, #12]
   88212:	e04e      	b.n	882b2 <_vfiprintf_r+0x902>
   88214:	aa0f      	add	r2, sp, #60	; 0x3c
   88216:	4649      	mov	r1, r9
   88218:	4638      	mov	r0, r7
   8821a:	f7ff fb89 	bl	87930 <__sprint_r.part.0>
   8821e:	2800      	cmp	r0, #0
   88220:	f040 813e 	bne.w	884a0 <_vfiprintf_r+0xaf0>
   88224:	9910      	ldr	r1, [sp, #64]	; 0x40
   88226:	46d6      	mov	lr, sl
   88228:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8822a:	1c48      	adds	r0, r1, #1
   8822c:	e77f      	b.n	8812e <_vfiprintf_r+0x77e>
   8822e:	aa0f      	add	r2, sp, #60	; 0x3c
   88230:	4659      	mov	r1, fp
   88232:	4638      	mov	r0, r7
   88234:	f7ff fb7c 	bl	87930 <__sprint_r.part.0>
   88238:	b960      	cbnz	r0, 88254 <_vfiprintf_r+0x8a4>
   8823a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8823c:	46d1      	mov	r9, sl
   8823e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88240:	1c48      	adds	r0, r1, #1
   88242:	e7bd      	b.n	881c0 <_vfiprintf_r+0x810>
   88244:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88246:	f8dd b010 	ldr.w	fp, [sp, #16]
   8824a:	2b00      	cmp	r3, #0
   8824c:	f040 81ca 	bne.w	885e4 <_vfiprintf_r+0xc34>
   88250:	2300      	movs	r3, #0
   88252:	9310      	str	r3, [sp, #64]	; 0x40
   88254:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88258:	f013 0f01 	tst.w	r3, #1
   8825c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   88260:	d102      	bne.n	88268 <_vfiprintf_r+0x8b8>
   88262:	059a      	lsls	r2, r3, #22
   88264:	f140 80dd 	bpl.w	88422 <_vfiprintf_r+0xa72>
   88268:	065b      	lsls	r3, r3, #25
   8826a:	f53f acad 	bmi.w	87bc8 <_vfiprintf_r+0x218>
   8826e:	9803      	ldr	r0, [sp, #12]
   88270:	b02d      	add	sp, #180	; 0xb4
   88272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88276:	2a00      	cmp	r2, #0
   88278:	f040 8105 	bne.w	88486 <_vfiprintf_r+0xad6>
   8827c:	2301      	movs	r3, #1
   8827e:	46d1      	mov	r9, sl
   88280:	9a05      	ldr	r2, [sp, #20]
   88282:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   88286:	921d      	str	r2, [sp, #116]	; 0x74
   88288:	9211      	str	r2, [sp, #68]	; 0x44
   8828a:	9310      	str	r3, [sp, #64]	; 0x40
   8828c:	f109 0908 	add.w	r9, r9, #8
   88290:	9b02      	ldr	r3, [sp, #8]
   88292:	0759      	lsls	r1, r3, #29
   88294:	d504      	bpl.n	882a0 <_vfiprintf_r+0x8f0>
   88296:	9b08      	ldr	r3, [sp, #32]
   88298:	9901      	ldr	r1, [sp, #4]
   8829a:	1a5c      	subs	r4, r3, r1
   8829c:	2c00      	cmp	r4, #0
   8829e:	dc81      	bgt.n	881a4 <_vfiprintf_r+0x7f4>
   882a0:	9b03      	ldr	r3, [sp, #12]
   882a2:	9908      	ldr	r1, [sp, #32]
   882a4:	9801      	ldr	r0, [sp, #4]
   882a6:	4281      	cmp	r1, r0
   882a8:	bfac      	ite	ge
   882aa:	185b      	addge	r3, r3, r1
   882ac:	181b      	addlt	r3, r3, r0
   882ae:	9303      	str	r3, [sp, #12]
   882b0:	bb72      	cbnz	r2, 88310 <_vfiprintf_r+0x960>
   882b2:	2300      	movs	r3, #0
   882b4:	46d1      	mov	r9, sl
   882b6:	9310      	str	r3, [sp, #64]	; 0x40
   882b8:	f7ff bbb7 	b.w	87a2a <_vfiprintf_r+0x7a>
   882bc:	aa0f      	add	r2, sp, #60	; 0x3c
   882be:	9904      	ldr	r1, [sp, #16]
   882c0:	4620      	mov	r0, r4
   882c2:	f7ff fb35 	bl	87930 <__sprint_r.part.0>
   882c6:	bb50      	cbnz	r0, 8831e <_vfiprintf_r+0x96e>
   882c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   882ca:	46d4      	mov	ip, sl
   882cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   882ce:	f101 0e01 	add.w	lr, r1, #1
   882d2:	e54a      	b.n	87d6a <_vfiprintf_r+0x3ba>
   882d4:	2a00      	cmp	r2, #0
   882d6:	f47f aee5 	bne.w	880a4 <_vfiprintf_r+0x6f4>
   882da:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   882de:	2900      	cmp	r1, #0
   882e0:	f000 811a 	beq.w	88518 <_vfiprintf_r+0xb68>
   882e4:	2201      	movs	r2, #1
   882e6:	46d1      	mov	r9, sl
   882e8:	4610      	mov	r0, r2
   882ea:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   882ee:	921d      	str	r2, [sp, #116]	; 0x74
   882f0:	911c      	str	r1, [sp, #112]	; 0x70
   882f2:	4601      	mov	r1, r0
   882f4:	f109 0908 	add.w	r9, r9, #8
   882f8:	3001      	adds	r0, #1
   882fa:	e508      	b.n	87d0e <_vfiprintf_r+0x35e>
   882fc:	9b02      	ldr	r3, [sp, #8]
   882fe:	2a01      	cmp	r2, #1
   88300:	f000 8097 	beq.w	88432 <_vfiprintf_r+0xa82>
   88304:	2a02      	cmp	r2, #2
   88306:	d10d      	bne.n	88324 <_vfiprintf_r+0x974>
   88308:	9302      	str	r3, [sp, #8]
   8830a:	2600      	movs	r6, #0
   8830c:	2700      	movs	r7, #0
   8830e:	e5b2      	b.n	87e76 <_vfiprintf_r+0x4c6>
   88310:	aa0f      	add	r2, sp, #60	; 0x3c
   88312:	9904      	ldr	r1, [sp, #16]
   88314:	9806      	ldr	r0, [sp, #24]
   88316:	f7ff fb0b 	bl	87930 <__sprint_r.part.0>
   8831a:	2800      	cmp	r0, #0
   8831c:	d0c9      	beq.n	882b2 <_vfiprintf_r+0x902>
   8831e:	f8dd b010 	ldr.w	fp, [sp, #16]
   88322:	e797      	b.n	88254 <_vfiprintf_r+0x8a4>
   88324:	2600      	movs	r6, #0
   88326:	2700      	movs	r7, #0
   88328:	9302      	str	r3, [sp, #8]
   8832a:	4651      	mov	r1, sl
   8832c:	e000      	b.n	88330 <_vfiprintf_r+0x980>
   8832e:	4659      	mov	r1, fp
   88330:	08f2      	lsrs	r2, r6, #3
   88332:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   88336:	08f8      	lsrs	r0, r7, #3
   88338:	f006 0307 	and.w	r3, r6, #7
   8833c:	4607      	mov	r7, r0
   8833e:	4616      	mov	r6, r2
   88340:	3330      	adds	r3, #48	; 0x30
   88342:	ea56 0207 	orrs.w	r2, r6, r7
   88346:	f801 3c01 	strb.w	r3, [r1, #-1]
   8834a:	f101 3bff 	add.w	fp, r1, #4294967295
   8834e:	d1ee      	bne.n	8832e <_vfiprintf_r+0x97e>
   88350:	9a02      	ldr	r2, [sp, #8]
   88352:	07d6      	lsls	r6, r2, #31
   88354:	f57f ad9f 	bpl.w	87e96 <_vfiprintf_r+0x4e6>
   88358:	2b30      	cmp	r3, #48	; 0x30
   8835a:	f43f ad9c 	beq.w	87e96 <_vfiprintf_r+0x4e6>
   8835e:	2330      	movs	r3, #48	; 0x30
   88360:	3902      	subs	r1, #2
   88362:	f80b 3c01 	strb.w	r3, [fp, #-1]
   88366:	ebaa 0301 	sub.w	r3, sl, r1
   8836a:	9305      	str	r3, [sp, #20]
   8836c:	468b      	mov	fp, r1
   8836e:	e477      	b.n	87c60 <_vfiprintf_r+0x2b0>
   88370:	9b03      	ldr	r3, [sp, #12]
   88372:	9a08      	ldr	r2, [sp, #32]
   88374:	428a      	cmp	r2, r1
   88376:	bfac      	ite	ge
   88378:	189b      	addge	r3, r3, r2
   8837a:	185b      	addlt	r3, r3, r1
   8837c:	9303      	str	r3, [sp, #12]
   8837e:	e798      	b.n	882b2 <_vfiprintf_r+0x902>
   88380:	2202      	movs	r2, #2
   88382:	e44e      	b.n	87c22 <_vfiprintf_r+0x272>
   88384:	2f00      	cmp	r7, #0
   88386:	bf08      	it	eq
   88388:	2e0a      	cmpeq	r6, #10
   8838a:	d351      	bcc.n	88430 <_vfiprintf_r+0xa80>
   8838c:	46d3      	mov	fp, sl
   8838e:	4630      	mov	r0, r6
   88390:	4639      	mov	r1, r7
   88392:	220a      	movs	r2, #10
   88394:	2300      	movs	r3, #0
   88396:	f7fd fc6d 	bl	85c74 <__aeabi_uldivmod>
   8839a:	3230      	adds	r2, #48	; 0x30
   8839c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   883a0:	4630      	mov	r0, r6
   883a2:	4639      	mov	r1, r7
   883a4:	2300      	movs	r3, #0
   883a6:	220a      	movs	r2, #10
   883a8:	f7fd fc64 	bl	85c74 <__aeabi_uldivmod>
   883ac:	4606      	mov	r6, r0
   883ae:	460f      	mov	r7, r1
   883b0:	ea56 0307 	orrs.w	r3, r6, r7
   883b4:	d1eb      	bne.n	8838e <_vfiprintf_r+0x9de>
   883b6:	e56e      	b.n	87e96 <_vfiprintf_r+0x4e6>
   883b8:	9405      	str	r4, [sp, #20]
   883ba:	46d3      	mov	fp, sl
   883bc:	e450      	b.n	87c60 <_vfiprintf_r+0x2b0>
   883be:	aa0f      	add	r2, sp, #60	; 0x3c
   883c0:	9904      	ldr	r1, [sp, #16]
   883c2:	9806      	ldr	r0, [sp, #24]
   883c4:	f7ff fab4 	bl	87930 <__sprint_r.part.0>
   883c8:	2800      	cmp	r0, #0
   883ca:	d1a8      	bne.n	8831e <_vfiprintf_r+0x96e>
   883cc:	46d1      	mov	r9, sl
   883ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   883d0:	e75e      	b.n	88290 <_vfiprintf_r+0x8e0>
   883d2:	aa0f      	add	r2, sp, #60	; 0x3c
   883d4:	9904      	ldr	r1, [sp, #16]
   883d6:	9806      	ldr	r0, [sp, #24]
   883d8:	f7ff faaa 	bl	87930 <__sprint_r.part.0>
   883dc:	2800      	cmp	r0, #0
   883de:	d19e      	bne.n	8831e <_vfiprintf_r+0x96e>
   883e0:	46d1      	mov	r9, sl
   883e2:	f7ff bbbb 	b.w	87b5c <_vfiprintf_r+0x1ac>
   883e6:	bf00      	nop
   883e8:	0008c244 	.word	0x0008c244
   883ec:	0008c234 	.word	0x0008c234
   883f0:	3104      	adds	r1, #4
   883f2:	6816      	ldr	r6, [r2, #0]
   883f4:	2700      	movs	r7, #0
   883f6:	2201      	movs	r2, #1
   883f8:	9107      	str	r1, [sp, #28]
   883fa:	e412      	b.n	87c22 <_vfiprintf_r+0x272>
   883fc:	9807      	ldr	r0, [sp, #28]
   883fe:	2700      	movs	r7, #0
   88400:	4601      	mov	r1, r0
   88402:	3104      	adds	r1, #4
   88404:	6806      	ldr	r6, [r0, #0]
   88406:	9107      	str	r1, [sp, #28]
   88408:	e40b      	b.n	87c22 <_vfiprintf_r+0x272>
   8840a:	680e      	ldr	r6, [r1, #0]
   8840c:	3104      	adds	r1, #4
   8840e:	9107      	str	r1, [sp, #28]
   88410:	2700      	movs	r7, #0
   88412:	e592      	b.n	87f3a <_vfiprintf_r+0x58a>
   88414:	6816      	ldr	r6, [r2, #0]
   88416:	3204      	adds	r2, #4
   88418:	17f7      	asrs	r7, r6, #31
   8841a:	9207      	str	r2, [sp, #28]
   8841c:	4630      	mov	r0, r6
   8841e:	4639      	mov	r1, r7
   88420:	e512      	b.n	87e48 <_vfiprintf_r+0x498>
   88422:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88426:	f001 fe39 	bl	8a09c <__retarget_lock_release_recursive>
   8842a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8842e:	e71b      	b.n	88268 <_vfiprintf_r+0x8b8>
   88430:	9b02      	ldr	r3, [sp, #8]
   88432:	9302      	str	r3, [sp, #8]
   88434:	2301      	movs	r3, #1
   88436:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8843a:	3630      	adds	r6, #48	; 0x30
   8843c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   88440:	9305      	str	r3, [sp, #20]
   88442:	e40d      	b.n	87c60 <_vfiprintf_r+0x2b0>
   88444:	aa0f      	add	r2, sp, #60	; 0x3c
   88446:	9904      	ldr	r1, [sp, #16]
   88448:	9806      	ldr	r0, [sp, #24]
   8844a:	f7ff fa71 	bl	87930 <__sprint_r.part.0>
   8844e:	2800      	cmp	r0, #0
   88450:	f47f af65 	bne.w	8831e <_vfiprintf_r+0x96e>
   88454:	9910      	ldr	r1, [sp, #64]	; 0x40
   88456:	46d1      	mov	r9, sl
   88458:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8845a:	1c48      	adds	r0, r1, #1
   8845c:	e457      	b.n	87d0e <_vfiprintf_r+0x35e>
   8845e:	aa0f      	add	r2, sp, #60	; 0x3c
   88460:	9904      	ldr	r1, [sp, #16]
   88462:	9806      	ldr	r0, [sp, #24]
   88464:	f7ff fa64 	bl	87930 <__sprint_r.part.0>
   88468:	2800      	cmp	r0, #0
   8846a:	f47f af58 	bne.w	8831e <_vfiprintf_r+0x96e>
   8846e:	9910      	ldr	r1, [sp, #64]	; 0x40
   88470:	46d1      	mov	r9, sl
   88472:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88474:	1c48      	adds	r0, r1, #1
   88476:	e644      	b.n	88102 <_vfiprintf_r+0x752>
   88478:	2a00      	cmp	r2, #0
   8847a:	f040 8087 	bne.w	8858c <_vfiprintf_r+0xbdc>
   8847e:	2001      	movs	r0, #1
   88480:	4611      	mov	r1, r2
   88482:	46d1      	mov	r9, sl
   88484:	e641      	b.n	8810a <_vfiprintf_r+0x75a>
   88486:	aa0f      	add	r2, sp, #60	; 0x3c
   88488:	9904      	ldr	r1, [sp, #16]
   8848a:	9806      	ldr	r0, [sp, #24]
   8848c:	f7ff fa50 	bl	87930 <__sprint_r.part.0>
   88490:	2800      	cmp	r0, #0
   88492:	f47f af44 	bne.w	8831e <_vfiprintf_r+0x96e>
   88496:	9810      	ldr	r0, [sp, #64]	; 0x40
   88498:	46d1      	mov	r9, sl
   8849a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8849c:	3001      	adds	r0, #1
   8849e:	e668      	b.n	88172 <_vfiprintf_r+0x7c2>
   884a0:	46cb      	mov	fp, r9
   884a2:	e6d7      	b.n	88254 <_vfiprintf_r+0x8a4>
   884a4:	9d07      	ldr	r5, [sp, #28]
   884a6:	3507      	adds	r5, #7
   884a8:	f025 0507 	bic.w	r5, r5, #7
   884ac:	f105 0208 	add.w	r2, r5, #8
   884b0:	e9d5 0100 	ldrd	r0, r1, [r5]
   884b4:	9207      	str	r2, [sp, #28]
   884b6:	4606      	mov	r6, r0
   884b8:	460f      	mov	r7, r1
   884ba:	e4c5      	b.n	87e48 <_vfiprintf_r+0x498>
   884bc:	9d07      	ldr	r5, [sp, #28]
   884be:	3507      	adds	r5, #7
   884c0:	f025 0207 	bic.w	r2, r5, #7
   884c4:	f102 0108 	add.w	r1, r2, #8
   884c8:	e9d2 6700 	ldrd	r6, r7, [r2]
   884cc:	9107      	str	r1, [sp, #28]
   884ce:	2201      	movs	r2, #1
   884d0:	f7ff bba7 	b.w	87c22 <_vfiprintf_r+0x272>
   884d4:	9d07      	ldr	r5, [sp, #28]
   884d6:	3507      	adds	r5, #7
   884d8:	f025 0207 	bic.w	r2, r5, #7
   884dc:	f102 0108 	add.w	r1, r2, #8
   884e0:	e9d2 6700 	ldrd	r6, r7, [r2]
   884e4:	9107      	str	r1, [sp, #28]
   884e6:	2200      	movs	r2, #0
   884e8:	f7ff bb9b 	b.w	87c22 <_vfiprintf_r+0x272>
   884ec:	9d07      	ldr	r5, [sp, #28]
   884ee:	3507      	adds	r5, #7
   884f0:	f025 0107 	bic.w	r1, r5, #7
   884f4:	f101 0008 	add.w	r0, r1, #8
   884f8:	9007      	str	r0, [sp, #28]
   884fa:	e9d1 6700 	ldrd	r6, r7, [r1]
   884fe:	e51c      	b.n	87f3a <_vfiprintf_r+0x58a>
   88500:	46d3      	mov	fp, sl
   88502:	f7ff bbad 	b.w	87c60 <_vfiprintf_r+0x2b0>
   88506:	252d      	movs	r5, #45	; 0x2d
   88508:	4276      	negs	r6, r6
   8850a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8850e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   88512:	2201      	movs	r2, #1
   88514:	f7ff bb8a 	b.w	87c2c <_vfiprintf_r+0x27c>
   88518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8851a:	b9b3      	cbnz	r3, 8854a <_vfiprintf_r+0xb9a>
   8851c:	4611      	mov	r1, r2
   8851e:	2001      	movs	r0, #1
   88520:	46d1      	mov	r9, sl
   88522:	e5f2      	b.n	8810a <_vfiprintf_r+0x75a>
   88524:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88528:	f001 fdb8 	bl	8a09c <__retarget_lock_release_recursive>
   8852c:	f04f 33ff 	mov.w	r3, #4294967295
   88530:	9303      	str	r3, [sp, #12]
   88532:	f7ff bb4c 	b.w	87bce <_vfiprintf_r+0x21e>
   88536:	aa0f      	add	r2, sp, #60	; 0x3c
   88538:	9904      	ldr	r1, [sp, #16]
   8853a:	9806      	ldr	r0, [sp, #24]
   8853c:	f7ff f9f8 	bl	87930 <__sprint_r.part.0>
   88540:	2800      	cmp	r0, #0
   88542:	f47f aeec 	bne.w	8831e <_vfiprintf_r+0x96e>
   88546:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88548:	e6aa      	b.n	882a0 <_vfiprintf_r+0x8f0>
   8854a:	2202      	movs	r2, #2
   8854c:	ab0e      	add	r3, sp, #56	; 0x38
   8854e:	921d      	str	r2, [sp, #116]	; 0x74
   88550:	931c      	str	r3, [sp, #112]	; 0x70
   88552:	2001      	movs	r0, #1
   88554:	46d1      	mov	r9, sl
   88556:	e5d0      	b.n	880fa <_vfiprintf_r+0x74a>
   88558:	4d34      	ldr	r5, [pc, #208]	; (8862c <_vfiprintf_r+0xc7c>)
   8855a:	e5fd      	b.n	88158 <_vfiprintf_r+0x7a8>
   8855c:	9a07      	ldr	r2, [sp, #28]
   8855e:	4613      	mov	r3, r2
   88560:	3304      	adds	r3, #4
   88562:	9307      	str	r3, [sp, #28]
   88564:	9b03      	ldr	r3, [sp, #12]
   88566:	6811      	ldr	r1, [r2, #0]
   88568:	17dd      	asrs	r5, r3, #31
   8856a:	461a      	mov	r2, r3
   8856c:	462b      	mov	r3, r5
   8856e:	e9c1 2300 	strd	r2, r3, [r1]
   88572:	f7ff ba5a 	b.w	87a2a <_vfiprintf_r+0x7a>
   88576:	4658      	mov	r0, fp
   88578:	9507      	str	r5, [sp, #28]
   8857a:	9302      	str	r3, [sp, #8]
   8857c:	f7fd fef8 	bl	86370 <strlen>
   88580:	2400      	movs	r4, #0
   88582:	9005      	str	r0, [sp, #20]
   88584:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88588:	f7ff bb6a 	b.w	87c60 <_vfiprintf_r+0x2b0>
   8858c:	aa0f      	add	r2, sp, #60	; 0x3c
   8858e:	9904      	ldr	r1, [sp, #16]
   88590:	9806      	ldr	r0, [sp, #24]
   88592:	f7ff f9cd 	bl	87930 <__sprint_r.part.0>
   88596:	2800      	cmp	r0, #0
   88598:	f47f aec1 	bne.w	8831e <_vfiprintf_r+0x96e>
   8859c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8859e:	46d1      	mov	r9, sl
   885a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   885a2:	1c48      	adds	r0, r1, #1
   885a4:	e5b1      	b.n	8810a <_vfiprintf_r+0x75a>
   885a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   885a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   885aa:	3101      	adds	r1, #1
   885ac:	4e20      	ldr	r6, [pc, #128]	; (88630 <_vfiprintf_r+0xc80>)
   885ae:	f7ff bb9c 	b.w	87cea <_vfiprintf_r+0x33a>
   885b2:	2c06      	cmp	r4, #6
   885b4:	bf28      	it	cs
   885b6:	2406      	movcs	r4, #6
   885b8:	9507      	str	r5, [sp, #28]
   885ba:	9405      	str	r4, [sp, #20]
   885bc:	9401      	str	r4, [sp, #4]
   885be:	f8df b074 	ldr.w	fp, [pc, #116]	; 88634 <_vfiprintf_r+0xc84>
   885c2:	e4e3      	b.n	87f8c <_vfiprintf_r+0x5dc>
   885c4:	9810      	ldr	r0, [sp, #64]	; 0x40
   885c6:	4e1a      	ldr	r6, [pc, #104]	; (88630 <_vfiprintf_r+0xc80>)
   885c8:	3001      	adds	r0, #1
   885ca:	e60e      	b.n	881ea <_vfiprintf_r+0x83a>
   885cc:	4686      	mov	lr, r0
   885ce:	4d17      	ldr	r5, [pc, #92]	; (8862c <_vfiprintf_r+0xc7c>)
   885d0:	f7ff bbe2 	b.w	87d98 <_vfiprintf_r+0x3e8>
   885d4:	9405      	str	r4, [sp, #20]
   885d6:	9507      	str	r5, [sp, #28]
   885d8:	9302      	str	r3, [sp, #8]
   885da:	4604      	mov	r4, r0
   885dc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   885e0:	f7ff bb3e 	b.w	87c60 <_vfiprintf_r+0x2b0>
   885e4:	9806      	ldr	r0, [sp, #24]
   885e6:	aa0f      	add	r2, sp, #60	; 0x3c
   885e8:	4659      	mov	r1, fp
   885ea:	f7ff f9a1 	bl	87930 <__sprint_r.part.0>
   885ee:	2800      	cmp	r0, #0
   885f0:	f43f ae2e 	beq.w	88250 <_vfiprintf_r+0x8a0>
   885f4:	e62e      	b.n	88254 <_vfiprintf_r+0x8a4>
   885f6:	9907      	ldr	r1, [sp, #28]
   885f8:	f898 2001 	ldrb.w	r2, [r8, #1]
   885fc:	680c      	ldr	r4, [r1, #0]
   885fe:	3104      	adds	r1, #4
   88600:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   88604:	46b8      	mov	r8, r7
   88606:	9107      	str	r1, [sp, #28]
   88608:	f7ff ba44 	b.w	87a94 <_vfiprintf_r+0xe4>
   8860c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88610:	e4a7      	b.n	87f62 <_vfiprintf_r+0x5b2>
   88612:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88616:	e521      	b.n	8805c <_vfiprintf_r+0x6ac>
   88618:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8861c:	e47c      	b.n	87f18 <_vfiprintf_r+0x568>
   8861e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88622:	e43f      	b.n	87ea4 <_vfiprintf_r+0x4f4>
   88624:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88628:	f7ff bbfa 	b.w	87e20 <_vfiprintf_r+0x470>
   8862c:	0008c244 	.word	0x0008c244
   88630:	0008c234 	.word	0x0008c234
   88634:	0008c208 	.word	0x0008c208

00088638 <__sbprintf>:
   88638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8863c:	460c      	mov	r4, r1
   8863e:	f04f 0e00 	mov.w	lr, #0
   88642:	f44f 6580 	mov.w	r5, #1024	; 0x400
   88646:	4606      	mov	r6, r0
   88648:	4617      	mov	r7, r2
   8864a:	4698      	mov	r8, r3
   8864c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8864e:	89e3      	ldrh	r3, [r4, #14]
   88650:	8989      	ldrh	r1, [r1, #12]
   88652:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   88656:	f021 0102 	bic.w	r1, r1, #2
   8865a:	9219      	str	r2, [sp, #100]	; 0x64
   8865c:	f8ad 300e 	strh.w	r3, [sp, #14]
   88660:	69e2      	ldr	r2, [r4, #28]
   88662:	6a63      	ldr	r3, [r4, #36]	; 0x24
   88664:	f8ad 100c 	strh.w	r1, [sp, #12]
   88668:	a816      	add	r0, sp, #88	; 0x58
   8866a:	a91a      	add	r1, sp, #104	; 0x68
   8866c:	f8cd e018 	str.w	lr, [sp, #24]
   88670:	9207      	str	r2, [sp, #28]
   88672:	9309      	str	r3, [sp, #36]	; 0x24
   88674:	9100      	str	r1, [sp, #0]
   88676:	9104      	str	r1, [sp, #16]
   88678:	9502      	str	r5, [sp, #8]
   8867a:	9505      	str	r5, [sp, #20]
   8867c:	f001 fd08 	bl	8a090 <__retarget_lock_init_recursive>
   88680:	4643      	mov	r3, r8
   88682:	463a      	mov	r2, r7
   88684:	4669      	mov	r1, sp
   88686:	4630      	mov	r0, r6
   88688:	f7ff f992 	bl	879b0 <_vfiprintf_r>
   8868c:	1e05      	subs	r5, r0, #0
   8868e:	db07      	blt.n	886a0 <__sbprintf+0x68>
   88690:	4630      	mov	r0, r6
   88692:	4669      	mov	r1, sp
   88694:	f001 f8da 	bl	8984c <_fflush_r>
   88698:	2800      	cmp	r0, #0
   8869a:	bf18      	it	ne
   8869c:	f04f 35ff 	movne.w	r5, #4294967295
   886a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   886a4:	065b      	lsls	r3, r3, #25
   886a6:	d503      	bpl.n	886b0 <__sbprintf+0x78>
   886a8:	89a3      	ldrh	r3, [r4, #12]
   886aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   886ae:	81a3      	strh	r3, [r4, #12]
   886b0:	9816      	ldr	r0, [sp, #88]	; 0x58
   886b2:	f001 fcef 	bl	8a094 <__retarget_lock_close_recursive>
   886b6:	4628      	mov	r0, r5
   886b8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   886bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000886c0 <__swsetup_r>:
   886c0:	b538      	push	{r3, r4, r5, lr}
   886c2:	4b30      	ldr	r3, [pc, #192]	; (88784 <__swsetup_r+0xc4>)
   886c4:	4605      	mov	r5, r0
   886c6:	6818      	ldr	r0, [r3, #0]
   886c8:	460c      	mov	r4, r1
   886ca:	b110      	cbz	r0, 886d2 <__swsetup_r+0x12>
   886cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   886ce:	2b00      	cmp	r3, #0
   886d0:	d038      	beq.n	88744 <__swsetup_r+0x84>
   886d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   886d6:	b293      	uxth	r3, r2
   886d8:	0718      	lsls	r0, r3, #28
   886da:	d50c      	bpl.n	886f6 <__swsetup_r+0x36>
   886dc:	6920      	ldr	r0, [r4, #16]
   886de:	b1a8      	cbz	r0, 8870c <__swsetup_r+0x4c>
   886e0:	f013 0201 	ands.w	r2, r3, #1
   886e4:	d01e      	beq.n	88724 <__swsetup_r+0x64>
   886e6:	2200      	movs	r2, #0
   886e8:	6963      	ldr	r3, [r4, #20]
   886ea:	60a2      	str	r2, [r4, #8]
   886ec:	425b      	negs	r3, r3
   886ee:	61a3      	str	r3, [r4, #24]
   886f0:	b1f0      	cbz	r0, 88730 <__swsetup_r+0x70>
   886f2:	2000      	movs	r0, #0
   886f4:	bd38      	pop	{r3, r4, r5, pc}
   886f6:	06d9      	lsls	r1, r3, #27
   886f8:	d53b      	bpl.n	88772 <__swsetup_r+0xb2>
   886fa:	0758      	lsls	r0, r3, #29
   886fc:	d425      	bmi.n	8874a <__swsetup_r+0x8a>
   886fe:	6920      	ldr	r0, [r4, #16]
   88700:	f042 0308 	orr.w	r3, r2, #8
   88704:	81a3      	strh	r3, [r4, #12]
   88706:	b29b      	uxth	r3, r3
   88708:	2800      	cmp	r0, #0
   8870a:	d1e9      	bne.n	886e0 <__swsetup_r+0x20>
   8870c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   88710:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88714:	d0e4      	beq.n	886e0 <__swsetup_r+0x20>
   88716:	4628      	mov	r0, r5
   88718:	4621      	mov	r1, r4
   8871a:	f001 fcef 	bl	8a0fc <__smakebuf_r>
   8871e:	89a3      	ldrh	r3, [r4, #12]
   88720:	6920      	ldr	r0, [r4, #16]
   88722:	e7dd      	b.n	886e0 <__swsetup_r+0x20>
   88724:	0799      	lsls	r1, r3, #30
   88726:	bf58      	it	pl
   88728:	6962      	ldrpl	r2, [r4, #20]
   8872a:	60a2      	str	r2, [r4, #8]
   8872c:	2800      	cmp	r0, #0
   8872e:	d1e0      	bne.n	886f2 <__swsetup_r+0x32>
   88730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88734:	061a      	lsls	r2, r3, #24
   88736:	d5dd      	bpl.n	886f4 <__swsetup_r+0x34>
   88738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8873c:	81a3      	strh	r3, [r4, #12]
   8873e:	f04f 30ff 	mov.w	r0, #4294967295
   88742:	bd38      	pop	{r3, r4, r5, pc}
   88744:	f001 f8da 	bl	898fc <__sinit>
   88748:	e7c3      	b.n	886d2 <__swsetup_r+0x12>
   8874a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8874c:	b151      	cbz	r1, 88764 <__swsetup_r+0xa4>
   8874e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   88752:	4299      	cmp	r1, r3
   88754:	d004      	beq.n	88760 <__swsetup_r+0xa0>
   88756:	4628      	mov	r0, r5
   88758:	f001 f9f6 	bl	89b48 <_free_r>
   8875c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   88760:	2300      	movs	r3, #0
   88762:	6323      	str	r3, [r4, #48]	; 0x30
   88764:	2300      	movs	r3, #0
   88766:	6920      	ldr	r0, [r4, #16]
   88768:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8876c:	e884 0009 	stmia.w	r4, {r0, r3}
   88770:	e7c6      	b.n	88700 <__swsetup_r+0x40>
   88772:	2309      	movs	r3, #9
   88774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   88778:	602b      	str	r3, [r5, #0]
   8877a:	f04f 30ff 	mov.w	r0, #4294967295
   8877e:	81a2      	strh	r2, [r4, #12]
   88780:	bd38      	pop	{r3, r4, r5, pc}
   88782:	bf00      	nop
   88784:	200009b0 	.word	0x200009b0

00088788 <register_fini>:
   88788:	4b02      	ldr	r3, [pc, #8]	; (88794 <register_fini+0xc>)
   8878a:	b113      	cbz	r3, 88792 <register_fini+0xa>
   8878c:	4802      	ldr	r0, [pc, #8]	; (88798 <register_fini+0x10>)
   8878e:	f000 b805 	b.w	8879c <atexit>
   88792:	4770      	bx	lr
   88794:	00000000 	.word	0x00000000
   88798:	00089975 	.word	0x00089975

0008879c <atexit>:
   8879c:	2300      	movs	r3, #0
   8879e:	4601      	mov	r1, r0
   887a0:	461a      	mov	r2, r3
   887a2:	4618      	mov	r0, r3
   887a4:	f002 be94 	b.w	8b4d0 <__register_exitproc>

000887a8 <quorem>:
   887a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887ac:	6903      	ldr	r3, [r0, #16]
   887ae:	690f      	ldr	r7, [r1, #16]
   887b0:	b083      	sub	sp, #12
   887b2:	429f      	cmp	r7, r3
   887b4:	f300 8088 	bgt.w	888c8 <quorem+0x120>
   887b8:	3f01      	subs	r7, #1
   887ba:	f101 0614 	add.w	r6, r1, #20
   887be:	f100 0a14 	add.w	sl, r0, #20
   887c2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   887c6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   887ca:	3301      	adds	r3, #1
   887cc:	fbb2 f8f3 	udiv	r8, r2, r3
   887d0:	00bb      	lsls	r3, r7, #2
   887d2:	9300      	str	r3, [sp, #0]
   887d4:	eb06 0903 	add.w	r9, r6, r3
   887d8:	4453      	add	r3, sl
   887da:	9301      	str	r3, [sp, #4]
   887dc:	f1b8 0f00 	cmp.w	r8, #0
   887e0:	d03b      	beq.n	8885a <quorem+0xb2>
   887e2:	2300      	movs	r3, #0
   887e4:	46b4      	mov	ip, r6
   887e6:	461c      	mov	r4, r3
   887e8:	46d6      	mov	lr, sl
   887ea:	f85c 2b04 	ldr.w	r2, [ip], #4
   887ee:	f8de 5000 	ldr.w	r5, [lr]
   887f2:	fa1f fb82 	uxth.w	fp, r2
   887f6:	fb08 330b 	mla	r3, r8, fp, r3
   887fa:	0c12      	lsrs	r2, r2, #16
   887fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   88800:	fb08 bb02 	mla	fp, r8, r2, fp
   88804:	b29a      	uxth	r2, r3
   88806:	1aa2      	subs	r2, r4, r2
   88808:	b2ab      	uxth	r3, r5
   8880a:	fa1f f48b 	uxth.w	r4, fp
   8880e:	441a      	add	r2, r3
   88810:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   88814:	eb04 4422 	add.w	r4, r4, r2, asr #16
   88818:	b292      	uxth	r2, r2
   8881a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8881e:	45e1      	cmp	r9, ip
   88820:	f84e 2b04 	str.w	r2, [lr], #4
   88824:	ea4f 4424 	mov.w	r4, r4, asr #16
   88828:	ea4f 431b 	mov.w	r3, fp, lsr #16
   8882c:	d2dd      	bcs.n	887ea <quorem+0x42>
   8882e:	9b00      	ldr	r3, [sp, #0]
   88830:	f85a 3003 	ldr.w	r3, [sl, r3]
   88834:	b98b      	cbnz	r3, 8885a <quorem+0xb2>
   88836:	9c01      	ldr	r4, [sp, #4]
   88838:	1f23      	subs	r3, r4, #4
   8883a:	459a      	cmp	sl, r3
   8883c:	d20c      	bcs.n	88858 <quorem+0xb0>
   8883e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88842:	b94b      	cbnz	r3, 88858 <quorem+0xb0>
   88844:	f1a4 0308 	sub.w	r3, r4, #8
   88848:	e002      	b.n	88850 <quorem+0xa8>
   8884a:	681a      	ldr	r2, [r3, #0]
   8884c:	3b04      	subs	r3, #4
   8884e:	b91a      	cbnz	r2, 88858 <quorem+0xb0>
   88850:	459a      	cmp	sl, r3
   88852:	f107 37ff 	add.w	r7, r7, #4294967295
   88856:	d3f8      	bcc.n	8884a <quorem+0xa2>
   88858:	6107      	str	r7, [r0, #16]
   8885a:	4604      	mov	r4, r0
   8885c:	f002 fa0c 	bl	8ac78 <__mcmp>
   88860:	2800      	cmp	r0, #0
   88862:	db2d      	blt.n	888c0 <quorem+0x118>
   88864:	4655      	mov	r5, sl
   88866:	2300      	movs	r3, #0
   88868:	f108 0801 	add.w	r8, r8, #1
   8886c:	f856 1b04 	ldr.w	r1, [r6], #4
   88870:	6828      	ldr	r0, [r5, #0]
   88872:	b28a      	uxth	r2, r1
   88874:	1a9a      	subs	r2, r3, r2
   88876:	0c0b      	lsrs	r3, r1, #16
   88878:	b281      	uxth	r1, r0
   8887a:	440a      	add	r2, r1
   8887c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   88880:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88884:	b292      	uxth	r2, r2
   88886:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8888a:	45b1      	cmp	r9, r6
   8888c:	f845 2b04 	str.w	r2, [r5], #4
   88890:	ea4f 4323 	mov.w	r3, r3, asr #16
   88894:	d2ea      	bcs.n	8886c <quorem+0xc4>
   88896:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8889a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8889e:	b97a      	cbnz	r2, 888c0 <quorem+0x118>
   888a0:	1f1a      	subs	r2, r3, #4
   888a2:	4592      	cmp	sl, r2
   888a4:	d20b      	bcs.n	888be <quorem+0x116>
   888a6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   888aa:	b942      	cbnz	r2, 888be <quorem+0x116>
   888ac:	3b08      	subs	r3, #8
   888ae:	e002      	b.n	888b6 <quorem+0x10e>
   888b0:	681a      	ldr	r2, [r3, #0]
   888b2:	3b04      	subs	r3, #4
   888b4:	b91a      	cbnz	r2, 888be <quorem+0x116>
   888b6:	459a      	cmp	sl, r3
   888b8:	f107 37ff 	add.w	r7, r7, #4294967295
   888bc:	d3f8      	bcc.n	888b0 <quorem+0x108>
   888be:	6127      	str	r7, [r4, #16]
   888c0:	4640      	mov	r0, r8
   888c2:	b003      	add	sp, #12
   888c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888c8:	2000      	movs	r0, #0
   888ca:	b003      	add	sp, #12
   888cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000888d0 <_dtoa_r>:
   888d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   888d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
   888d6:	b09b      	sub	sp, #108	; 0x6c
   888d8:	4604      	mov	r4, r0
   888da:	4692      	mov	sl, r2
   888dc:	469b      	mov	fp, r3
   888de:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   888e0:	b14d      	cbz	r5, 888f6 <_dtoa_r+0x26>
   888e2:	2301      	movs	r3, #1
   888e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   888e6:	4629      	mov	r1, r5
   888e8:	4093      	lsls	r3, r2
   888ea:	60ab      	str	r3, [r5, #8]
   888ec:	606a      	str	r2, [r5, #4]
   888ee:	f001 ffeb 	bl	8a8c8 <_Bfree>
   888f2:	2300      	movs	r3, #0
   888f4:	6423      	str	r3, [r4, #64]	; 0x40
   888f6:	f1bb 0f00 	cmp.w	fp, #0
   888fa:	465d      	mov	r5, fp
   888fc:	db35      	blt.n	8896a <_dtoa_r+0x9a>
   888fe:	2300      	movs	r3, #0
   88900:	6033      	str	r3, [r6, #0]
   88902:	4b9d      	ldr	r3, [pc, #628]	; (88b78 <_dtoa_r+0x2a8>)
   88904:	43ab      	bics	r3, r5
   88906:	d015      	beq.n	88934 <_dtoa_r+0x64>
   88908:	2200      	movs	r2, #0
   8890a:	2300      	movs	r3, #0
   8890c:	4650      	mov	r0, sl
   8890e:	4659      	mov	r1, fp
   88910:	f003 fb56 	bl	8bfc0 <__aeabi_dcmpeq>
   88914:	4680      	mov	r8, r0
   88916:	2800      	cmp	r0, #0
   88918:	d02d      	beq.n	88976 <_dtoa_r+0xa6>
   8891a:	2301      	movs	r3, #1
   8891c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8891e:	6013      	str	r3, [r2, #0]
   88920:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88922:	2b00      	cmp	r3, #0
   88924:	f000 80bd 	beq.w	88aa2 <_dtoa_r+0x1d2>
   88928:	4894      	ldr	r0, [pc, #592]	; (88b7c <_dtoa_r+0x2ac>)
   8892a:	6018      	str	r0, [r3, #0]
   8892c:	3801      	subs	r0, #1
   8892e:	b01b      	add	sp, #108	; 0x6c
   88930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88934:	f242 730f 	movw	r3, #9999	; 0x270f
   88938:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8893a:	6013      	str	r3, [r2, #0]
   8893c:	f1ba 0f00 	cmp.w	sl, #0
   88940:	d10d      	bne.n	8895e <_dtoa_r+0x8e>
   88942:	f3c5 0513 	ubfx	r5, r5, #0, #20
   88946:	b955      	cbnz	r5, 8895e <_dtoa_r+0x8e>
   88948:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8894a:	488d      	ldr	r0, [pc, #564]	; (88b80 <_dtoa_r+0x2b0>)
   8894c:	2b00      	cmp	r3, #0
   8894e:	d0ee      	beq.n	8892e <_dtoa_r+0x5e>
   88950:	f100 0308 	add.w	r3, r0, #8
   88954:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   88956:	6013      	str	r3, [r2, #0]
   88958:	b01b      	add	sp, #108	; 0x6c
   8895a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8895e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88960:	4888      	ldr	r0, [pc, #544]	; (88b84 <_dtoa_r+0x2b4>)
   88962:	2b00      	cmp	r3, #0
   88964:	d0e3      	beq.n	8892e <_dtoa_r+0x5e>
   88966:	1cc3      	adds	r3, r0, #3
   88968:	e7f4      	b.n	88954 <_dtoa_r+0x84>
   8896a:	2301      	movs	r3, #1
   8896c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   88970:	6033      	str	r3, [r6, #0]
   88972:	46ab      	mov	fp, r5
   88974:	e7c5      	b.n	88902 <_dtoa_r+0x32>
   88976:	aa18      	add	r2, sp, #96	; 0x60
   88978:	ab19      	add	r3, sp, #100	; 0x64
   8897a:	9201      	str	r2, [sp, #4]
   8897c:	9300      	str	r3, [sp, #0]
   8897e:	4652      	mov	r2, sl
   88980:	465b      	mov	r3, fp
   88982:	4620      	mov	r0, r4
   88984:	f002 fa22 	bl	8adcc <__d2b>
   88988:	0d2b      	lsrs	r3, r5, #20
   8898a:	4681      	mov	r9, r0
   8898c:	d071      	beq.n	88a72 <_dtoa_r+0x1a2>
   8898e:	4650      	mov	r0, sl
   88990:	f3cb 0213 	ubfx	r2, fp, #0, #20
   88994:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   88998:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8899a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8899e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   889a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   889a6:	2200      	movs	r2, #0
   889a8:	4b77      	ldr	r3, [pc, #476]	; (88b88 <_dtoa_r+0x2b8>)
   889aa:	f002 feed 	bl	8b788 <__aeabi_dsub>
   889ae:	a36c      	add	r3, pc, #432	; (adr r3, 88b60 <_dtoa_r+0x290>)
   889b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   889b4:	f003 f89c 	bl	8baf0 <__aeabi_dmul>
   889b8:	a36b      	add	r3, pc, #428	; (adr r3, 88b68 <_dtoa_r+0x298>)
   889ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   889be:	f002 fee5 	bl	8b78c <__adddf3>
   889c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   889c6:	4630      	mov	r0, r6
   889c8:	f003 f82c 	bl	8ba24 <__aeabi_i2d>
   889cc:	a368      	add	r3, pc, #416	; (adr r3, 88b70 <_dtoa_r+0x2a0>)
   889ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   889d2:	f003 f88d 	bl	8baf0 <__aeabi_dmul>
   889d6:	4602      	mov	r2, r0
   889d8:	460b      	mov	r3, r1
   889da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   889de:	f002 fed5 	bl	8b78c <__adddf3>
   889e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   889e6:	f003 fb33 	bl	8c050 <__aeabi_d2iz>
   889ea:	2200      	movs	r2, #0
   889ec:	9002      	str	r0, [sp, #8]
   889ee:	2300      	movs	r3, #0
   889f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   889f4:	f003 faee 	bl	8bfd4 <__aeabi_dcmplt>
   889f8:	2800      	cmp	r0, #0
   889fa:	f040 816d 	bne.w	88cd8 <_dtoa_r+0x408>
   889fe:	9d02      	ldr	r5, [sp, #8]
   88a00:	2d16      	cmp	r5, #22
   88a02:	f200 8157 	bhi.w	88cb4 <_dtoa_r+0x3e4>
   88a06:	4961      	ldr	r1, [pc, #388]	; (88b8c <_dtoa_r+0x2bc>)
   88a08:	4652      	mov	r2, sl
   88a0a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   88a0e:	465b      	mov	r3, fp
   88a10:	e9d1 0100 	ldrd	r0, r1, [r1]
   88a14:	f003 fafc 	bl	8c010 <__aeabi_dcmpgt>
   88a18:	2800      	cmp	r0, #0
   88a1a:	f000 81be 	beq.w	88d9a <_dtoa_r+0x4ca>
   88a1e:	1e6b      	subs	r3, r5, #1
   88a20:	9302      	str	r3, [sp, #8]
   88a22:	2300      	movs	r3, #0
   88a24:	930e      	str	r3, [sp, #56]	; 0x38
   88a26:	1bbf      	subs	r7, r7, r6
   88a28:	1e7b      	subs	r3, r7, #1
   88a2a:	9308      	str	r3, [sp, #32]
   88a2c:	f100 814e 	bmi.w	88ccc <_dtoa_r+0x3fc>
   88a30:	2300      	movs	r3, #0
   88a32:	930a      	str	r3, [sp, #40]	; 0x28
   88a34:	9b02      	ldr	r3, [sp, #8]
   88a36:	2b00      	cmp	r3, #0
   88a38:	f2c0 813f 	blt.w	88cba <_dtoa_r+0x3ea>
   88a3c:	9a08      	ldr	r2, [sp, #32]
   88a3e:	930d      	str	r3, [sp, #52]	; 0x34
   88a40:	4611      	mov	r1, r2
   88a42:	4419      	add	r1, r3
   88a44:	2300      	movs	r3, #0
   88a46:	9108      	str	r1, [sp, #32]
   88a48:	930c      	str	r3, [sp, #48]	; 0x30
   88a4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88a4c:	2b09      	cmp	r3, #9
   88a4e:	d82a      	bhi.n	88aa6 <_dtoa_r+0x1d6>
   88a50:	2b05      	cmp	r3, #5
   88a52:	f340 8658 	ble.w	89706 <_dtoa_r+0xe36>
   88a56:	2500      	movs	r5, #0
   88a58:	3b04      	subs	r3, #4
   88a5a:	9324      	str	r3, [sp, #144]	; 0x90
   88a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88a5e:	3b02      	subs	r3, #2
   88a60:	2b03      	cmp	r3, #3
   88a62:	f200 863f 	bhi.w	896e4 <_dtoa_r+0xe14>
   88a66:	e8df f013 	tbh	[pc, r3, lsl #1]
   88a6a:	03ce      	.short	0x03ce
   88a6c:	03d902c3 	.word	0x03d902c3
   88a70:	045b      	.short	0x045b
   88a72:	9f18      	ldr	r7, [sp, #96]	; 0x60
   88a74:	9e19      	ldr	r6, [sp, #100]	; 0x64
   88a76:	443e      	add	r6, r7
   88a78:	f206 4332 	addw	r3, r6, #1074	; 0x432
   88a7c:	2b20      	cmp	r3, #32
   88a7e:	f340 8187 	ble.w	88d90 <_dtoa_r+0x4c0>
   88a82:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   88a86:	f206 4012 	addw	r0, r6, #1042	; 0x412
   88a8a:	409d      	lsls	r5, r3
   88a8c:	fa2a f000 	lsr.w	r0, sl, r0
   88a90:	4328      	orrs	r0, r5
   88a92:	f002 ffb7 	bl	8ba04 <__aeabi_ui2d>
   88a96:	2301      	movs	r3, #1
   88a98:	3e01      	subs	r6, #1
   88a9a:	9314      	str	r3, [sp, #80]	; 0x50
   88a9c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   88aa0:	e781      	b.n	889a6 <_dtoa_r+0xd6>
   88aa2:	483b      	ldr	r0, [pc, #236]	; (88b90 <_dtoa_r+0x2c0>)
   88aa4:	e743      	b.n	8892e <_dtoa_r+0x5e>
   88aa6:	2100      	movs	r1, #0
   88aa8:	4620      	mov	r0, r4
   88aaa:	6461      	str	r1, [r4, #68]	; 0x44
   88aac:	9125      	str	r1, [sp, #148]	; 0x94
   88aae:	f001 fee5 	bl	8a87c <_Balloc>
   88ab2:	f04f 33ff 	mov.w	r3, #4294967295
   88ab6:	9307      	str	r3, [sp, #28]
   88ab8:	930f      	str	r3, [sp, #60]	; 0x3c
   88aba:	2301      	movs	r3, #1
   88abc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   88abe:	9004      	str	r0, [sp, #16]
   88ac0:	6420      	str	r0, [r4, #64]	; 0x40
   88ac2:	9224      	str	r2, [sp, #144]	; 0x90
   88ac4:	930b      	str	r3, [sp, #44]	; 0x2c
   88ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   88ac8:	2b00      	cmp	r3, #0
   88aca:	f2c0 80d3 	blt.w	88c74 <_dtoa_r+0x3a4>
   88ace:	9a02      	ldr	r2, [sp, #8]
   88ad0:	2a0e      	cmp	r2, #14
   88ad2:	f300 80cf 	bgt.w	88c74 <_dtoa_r+0x3a4>
   88ad6:	4b2d      	ldr	r3, [pc, #180]	; (88b8c <_dtoa_r+0x2bc>)
   88ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   88ae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   88ae4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   88ae6:	2b00      	cmp	r3, #0
   88ae8:	f2c0 83b4 	blt.w	89254 <_dtoa_r+0x984>
   88aec:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   88af0:	4650      	mov	r0, sl
   88af2:	462a      	mov	r2, r5
   88af4:	4633      	mov	r3, r6
   88af6:	4659      	mov	r1, fp
   88af8:	f003 f924 	bl	8bd44 <__aeabi_ddiv>
   88afc:	f003 faa8 	bl	8c050 <__aeabi_d2iz>
   88b00:	4680      	mov	r8, r0
   88b02:	f002 ff8f 	bl	8ba24 <__aeabi_i2d>
   88b06:	462a      	mov	r2, r5
   88b08:	4633      	mov	r3, r6
   88b0a:	f002 fff1 	bl	8baf0 <__aeabi_dmul>
   88b0e:	4602      	mov	r2, r0
   88b10:	460b      	mov	r3, r1
   88b12:	4650      	mov	r0, sl
   88b14:	4659      	mov	r1, fp
   88b16:	f002 fe37 	bl	8b788 <__aeabi_dsub>
   88b1a:	9e07      	ldr	r6, [sp, #28]
   88b1c:	9f04      	ldr	r7, [sp, #16]
   88b1e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   88b22:	2e01      	cmp	r6, #1
   88b24:	703d      	strb	r5, [r7, #0]
   88b26:	4602      	mov	r2, r0
   88b28:	460b      	mov	r3, r1
   88b2a:	f107 0501 	add.w	r5, r7, #1
   88b2e:	d064      	beq.n	88bfa <_dtoa_r+0x32a>
   88b30:	2200      	movs	r2, #0
   88b32:	4b18      	ldr	r3, [pc, #96]	; (88b94 <_dtoa_r+0x2c4>)
   88b34:	f002 ffdc 	bl	8baf0 <__aeabi_dmul>
   88b38:	2200      	movs	r2, #0
   88b3a:	2300      	movs	r3, #0
   88b3c:	4606      	mov	r6, r0
   88b3e:	460f      	mov	r7, r1
   88b40:	f003 fa3e 	bl	8bfc0 <__aeabi_dcmpeq>
   88b44:	2800      	cmp	r0, #0
   88b46:	f040 8082 	bne.w	88c4e <_dtoa_r+0x37e>
   88b4a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   88b4e:	f04f 0a00 	mov.w	sl, #0
   88b52:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   88b56:	f04f 0b00 	mov.w	fp, #0
   88b5a:	940b      	str	r4, [sp, #44]	; 0x2c
   88b5c:	e029      	b.n	88bb2 <_dtoa_r+0x2e2>
   88b5e:	bf00      	nop
   88b60:	636f4361 	.word	0x636f4361
   88b64:	3fd287a7 	.word	0x3fd287a7
   88b68:	8b60c8b3 	.word	0x8b60c8b3
   88b6c:	3fc68a28 	.word	0x3fc68a28
   88b70:	509f79fb 	.word	0x509f79fb
   88b74:	3fd34413 	.word	0x3fd34413
   88b78:	7ff00000 	.word	0x7ff00000
   88b7c:	0008c211 	.word	0x0008c211
   88b80:	0008c254 	.word	0x0008c254
   88b84:	0008c260 	.word	0x0008c260
   88b88:	3ff80000 	.word	0x3ff80000
   88b8c:	0008c2a0 	.word	0x0008c2a0
   88b90:	0008c210 	.word	0x0008c210
   88b94:	40240000 	.word	0x40240000
   88b98:	2200      	movs	r2, #0
   88b9a:	4b81      	ldr	r3, [pc, #516]	; (88da0 <_dtoa_r+0x4d0>)
   88b9c:	f002 ffa8 	bl	8baf0 <__aeabi_dmul>
   88ba0:	4652      	mov	r2, sl
   88ba2:	465b      	mov	r3, fp
   88ba4:	4606      	mov	r6, r0
   88ba6:	460f      	mov	r7, r1
   88ba8:	f003 fa0a 	bl	8bfc0 <__aeabi_dcmpeq>
   88bac:	2800      	cmp	r0, #0
   88bae:	f040 83ba 	bne.w	89326 <_dtoa_r+0xa56>
   88bb2:	4642      	mov	r2, r8
   88bb4:	464b      	mov	r3, r9
   88bb6:	4630      	mov	r0, r6
   88bb8:	4639      	mov	r1, r7
   88bba:	f003 f8c3 	bl	8bd44 <__aeabi_ddiv>
   88bbe:	f003 fa47 	bl	8c050 <__aeabi_d2iz>
   88bc2:	4604      	mov	r4, r0
   88bc4:	f002 ff2e 	bl	8ba24 <__aeabi_i2d>
   88bc8:	4642      	mov	r2, r8
   88bca:	464b      	mov	r3, r9
   88bcc:	f002 ff90 	bl	8baf0 <__aeabi_dmul>
   88bd0:	4602      	mov	r2, r0
   88bd2:	460b      	mov	r3, r1
   88bd4:	4630      	mov	r0, r6
   88bd6:	4639      	mov	r1, r7
   88bd8:	f002 fdd6 	bl	8b788 <__aeabi_dsub>
   88bdc:	f104 0630 	add.w	r6, r4, #48	; 0x30
   88be0:	f805 6b01 	strb.w	r6, [r5], #1
   88be4:	9e04      	ldr	r6, [sp, #16]
   88be6:	9f07      	ldr	r7, [sp, #28]
   88be8:	1bae      	subs	r6, r5, r6
   88bea:	42be      	cmp	r6, r7
   88bec:	4602      	mov	r2, r0
   88bee:	460b      	mov	r3, r1
   88bf0:	d1d2      	bne.n	88b98 <_dtoa_r+0x2c8>
   88bf2:	46a0      	mov	r8, r4
   88bf4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   88bf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   88bfa:	4610      	mov	r0, r2
   88bfc:	4619      	mov	r1, r3
   88bfe:	f002 fdc5 	bl	8b78c <__adddf3>
   88c02:	4606      	mov	r6, r0
   88c04:	460f      	mov	r7, r1
   88c06:	4602      	mov	r2, r0
   88c08:	460b      	mov	r3, r1
   88c0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88c0e:	f003 f9e1 	bl	8bfd4 <__aeabi_dcmplt>
   88c12:	b948      	cbnz	r0, 88c28 <_dtoa_r+0x358>
   88c14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88c18:	4632      	mov	r2, r6
   88c1a:	463b      	mov	r3, r7
   88c1c:	f003 f9d0 	bl	8bfc0 <__aeabi_dcmpeq>
   88c20:	b1a8      	cbz	r0, 88c4e <_dtoa_r+0x37e>
   88c22:	f018 0f01 	tst.w	r8, #1
   88c26:	d012      	beq.n	88c4e <_dtoa_r+0x37e>
   88c28:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   88c2c:	1e6b      	subs	r3, r5, #1
   88c2e:	9a04      	ldr	r2, [sp, #16]
   88c30:	e004      	b.n	88c3c <_dtoa_r+0x36c>
   88c32:	429a      	cmp	r2, r3
   88c34:	f000 8402 	beq.w	8943c <_dtoa_r+0xb6c>
   88c38:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   88c3c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   88c40:	f103 0501 	add.w	r5, r3, #1
   88c44:	d0f5      	beq.n	88c32 <_dtoa_r+0x362>
   88c46:	f108 0801 	add.w	r8, r8, #1
   88c4a:	f883 8000 	strb.w	r8, [r3]
   88c4e:	4649      	mov	r1, r9
   88c50:	4620      	mov	r0, r4
   88c52:	f001 fe39 	bl	8a8c8 <_Bfree>
   88c56:	2200      	movs	r2, #0
   88c58:	9b02      	ldr	r3, [sp, #8]
   88c5a:	702a      	strb	r2, [r5, #0]
   88c5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88c5e:	3301      	adds	r3, #1
   88c60:	6013      	str	r3, [r2, #0]
   88c62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88c64:	2b00      	cmp	r3, #0
   88c66:	f000 839f 	beq.w	893a8 <_dtoa_r+0xad8>
   88c6a:	9804      	ldr	r0, [sp, #16]
   88c6c:	601d      	str	r5, [r3, #0]
   88c6e:	b01b      	add	sp, #108	; 0x6c
   88c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88c76:	2a00      	cmp	r2, #0
   88c78:	d03e      	beq.n	88cf8 <_dtoa_r+0x428>
   88c7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88c7c:	2a01      	cmp	r2, #1
   88c7e:	f340 8311 	ble.w	892a4 <_dtoa_r+0x9d4>
   88c82:	9b07      	ldr	r3, [sp, #28]
   88c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88c86:	1e5f      	subs	r7, r3, #1
   88c88:	42ba      	cmp	r2, r7
   88c8a:	f2c0 8390 	blt.w	893ae <_dtoa_r+0xade>
   88c8e:	1bd7      	subs	r7, r2, r7
   88c90:	9b07      	ldr	r3, [sp, #28]
   88c92:	2b00      	cmp	r3, #0
   88c94:	f2c0 848c 	blt.w	895b0 <_dtoa_r+0xce0>
   88c98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   88c9a:	9b07      	ldr	r3, [sp, #28]
   88c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88c9e:	2101      	movs	r1, #1
   88ca0:	441a      	add	r2, r3
   88ca2:	920a      	str	r2, [sp, #40]	; 0x28
   88ca4:	9a08      	ldr	r2, [sp, #32]
   88ca6:	4620      	mov	r0, r4
   88ca8:	441a      	add	r2, r3
   88caa:	9208      	str	r2, [sp, #32]
   88cac:	f001 fea8 	bl	8aa00 <__i2b>
   88cb0:	4606      	mov	r6, r0
   88cb2:	e023      	b.n	88cfc <_dtoa_r+0x42c>
   88cb4:	2301      	movs	r3, #1
   88cb6:	930e      	str	r3, [sp, #56]	; 0x38
   88cb8:	e6b5      	b.n	88a26 <_dtoa_r+0x156>
   88cba:	2300      	movs	r3, #0
   88cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88cbe:	930d      	str	r3, [sp, #52]	; 0x34
   88cc0:	9b02      	ldr	r3, [sp, #8]
   88cc2:	1ad2      	subs	r2, r2, r3
   88cc4:	425b      	negs	r3, r3
   88cc6:	920a      	str	r2, [sp, #40]	; 0x28
   88cc8:	930c      	str	r3, [sp, #48]	; 0x30
   88cca:	e6be      	b.n	88a4a <_dtoa_r+0x17a>
   88ccc:	f1c7 0301 	rsb	r3, r7, #1
   88cd0:	930a      	str	r3, [sp, #40]	; 0x28
   88cd2:	2300      	movs	r3, #0
   88cd4:	9308      	str	r3, [sp, #32]
   88cd6:	e6ad      	b.n	88a34 <_dtoa_r+0x164>
   88cd8:	9d02      	ldr	r5, [sp, #8]
   88cda:	4628      	mov	r0, r5
   88cdc:	f002 fea2 	bl	8ba24 <__aeabi_i2d>
   88ce0:	4602      	mov	r2, r0
   88ce2:	460b      	mov	r3, r1
   88ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   88ce8:	f003 f96a 	bl	8bfc0 <__aeabi_dcmpeq>
   88cec:	2800      	cmp	r0, #0
   88cee:	f47f ae86 	bne.w	889fe <_dtoa_r+0x12e>
   88cf2:	1e6b      	subs	r3, r5, #1
   88cf4:	9302      	str	r3, [sp, #8]
   88cf6:	e682      	b.n	889fe <_dtoa_r+0x12e>
   88cf8:	ad0a      	add	r5, sp, #40	; 0x28
   88cfa:	cde0      	ldmia	r5, {r5, r6, r7}
   88cfc:	2d00      	cmp	r5, #0
   88cfe:	dd0c      	ble.n	88d1a <_dtoa_r+0x44a>
   88d00:	9908      	ldr	r1, [sp, #32]
   88d02:	2900      	cmp	r1, #0
   88d04:	460b      	mov	r3, r1
   88d06:	dd08      	ble.n	88d1a <_dtoa_r+0x44a>
   88d08:	42a9      	cmp	r1, r5
   88d0a:	bfa8      	it	ge
   88d0c:	462b      	movge	r3, r5
   88d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88d10:	1aed      	subs	r5, r5, r3
   88d12:	1ad2      	subs	r2, r2, r3
   88d14:	1acb      	subs	r3, r1, r3
   88d16:	920a      	str	r2, [sp, #40]	; 0x28
   88d18:	9308      	str	r3, [sp, #32]
   88d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88d1c:	b1d3      	cbz	r3, 88d54 <_dtoa_r+0x484>
   88d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88d20:	2b00      	cmp	r3, #0
   88d22:	f000 82b8 	beq.w	89296 <_dtoa_r+0x9c6>
   88d26:	2f00      	cmp	r7, #0
   88d28:	dd10      	ble.n	88d4c <_dtoa_r+0x47c>
   88d2a:	4631      	mov	r1, r6
   88d2c:	463a      	mov	r2, r7
   88d2e:	4620      	mov	r0, r4
   88d30:	f001 ff02 	bl	8ab38 <__pow5mult>
   88d34:	464a      	mov	r2, r9
   88d36:	4601      	mov	r1, r0
   88d38:	4606      	mov	r6, r0
   88d3a:	4620      	mov	r0, r4
   88d3c:	f001 fe6a 	bl	8aa14 <__multiply>
   88d40:	4603      	mov	r3, r0
   88d42:	4649      	mov	r1, r9
   88d44:	4620      	mov	r0, r4
   88d46:	4699      	mov	r9, r3
   88d48:	f001 fdbe 	bl	8a8c8 <_Bfree>
   88d4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88d4e:	1bda      	subs	r2, r3, r7
   88d50:	f040 82a2 	bne.w	89298 <_dtoa_r+0x9c8>
   88d54:	2101      	movs	r1, #1
   88d56:	4620      	mov	r0, r4
   88d58:	f001 fe52 	bl	8aa00 <__i2b>
   88d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88d5e:	4680      	mov	r8, r0
   88d60:	2b00      	cmp	r3, #0
   88d62:	dd1f      	ble.n	88da4 <_dtoa_r+0x4d4>
   88d64:	4601      	mov	r1, r0
   88d66:	461a      	mov	r2, r3
   88d68:	4620      	mov	r0, r4
   88d6a:	f001 fee5 	bl	8ab38 <__pow5mult>
   88d6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88d70:	4680      	mov	r8, r0
   88d72:	2b01      	cmp	r3, #1
   88d74:	f340 8255 	ble.w	89222 <_dtoa_r+0x952>
   88d78:	2300      	movs	r3, #0
   88d7a:	930c      	str	r3, [sp, #48]	; 0x30
   88d7c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   88d80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   88d84:	6918      	ldr	r0, [r3, #16]
   88d86:	f001 fdeb 	bl	8a960 <__hi0bits>
   88d8a:	f1c0 0020 	rsb	r0, r0, #32
   88d8e:	e013      	b.n	88db8 <_dtoa_r+0x4e8>
   88d90:	f1c3 0520 	rsb	r5, r3, #32
   88d94:	fa0a f005 	lsl.w	r0, sl, r5
   88d98:	e67b      	b.n	88a92 <_dtoa_r+0x1c2>
   88d9a:	900e      	str	r0, [sp, #56]	; 0x38
   88d9c:	e643      	b.n	88a26 <_dtoa_r+0x156>
   88d9e:	bf00      	nop
   88da0:	40240000 	.word	0x40240000
   88da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88da6:	2b01      	cmp	r3, #1
   88da8:	f340 8285 	ble.w	892b6 <_dtoa_r+0x9e6>
   88dac:	2300      	movs	r3, #0
   88dae:	930c      	str	r3, [sp, #48]	; 0x30
   88db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88db2:	2001      	movs	r0, #1
   88db4:	2b00      	cmp	r3, #0
   88db6:	d1e1      	bne.n	88d7c <_dtoa_r+0x4ac>
   88db8:	9a08      	ldr	r2, [sp, #32]
   88dba:	4410      	add	r0, r2
   88dbc:	f010 001f 	ands.w	r0, r0, #31
   88dc0:	f000 80a1 	beq.w	88f06 <_dtoa_r+0x636>
   88dc4:	f1c0 0320 	rsb	r3, r0, #32
   88dc8:	2b04      	cmp	r3, #4
   88dca:	f340 8486 	ble.w	896da <_dtoa_r+0xe0a>
   88dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88dd0:	f1c0 001c 	rsb	r0, r0, #28
   88dd4:	4403      	add	r3, r0
   88dd6:	930a      	str	r3, [sp, #40]	; 0x28
   88dd8:	4613      	mov	r3, r2
   88dda:	4403      	add	r3, r0
   88ddc:	4405      	add	r5, r0
   88dde:	9308      	str	r3, [sp, #32]
   88de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88de2:	2b00      	cmp	r3, #0
   88de4:	dd05      	ble.n	88df2 <_dtoa_r+0x522>
   88de6:	4649      	mov	r1, r9
   88de8:	461a      	mov	r2, r3
   88dea:	4620      	mov	r0, r4
   88dec:	f001 fef4 	bl	8abd8 <__lshift>
   88df0:	4681      	mov	r9, r0
   88df2:	9b08      	ldr	r3, [sp, #32]
   88df4:	2b00      	cmp	r3, #0
   88df6:	dd05      	ble.n	88e04 <_dtoa_r+0x534>
   88df8:	4641      	mov	r1, r8
   88dfa:	461a      	mov	r2, r3
   88dfc:	4620      	mov	r0, r4
   88dfe:	f001 feeb 	bl	8abd8 <__lshift>
   88e02:	4680      	mov	r8, r0
   88e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88e06:	2b00      	cmp	r3, #0
   88e08:	f040 8086 	bne.w	88f18 <_dtoa_r+0x648>
   88e0c:	9b07      	ldr	r3, [sp, #28]
   88e0e:	2b00      	cmp	r3, #0
   88e10:	f340 8264 	ble.w	892dc <_dtoa_r+0xa0c>
   88e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88e16:	2b00      	cmp	r3, #0
   88e18:	f000 8098 	beq.w	88f4c <_dtoa_r+0x67c>
   88e1c:	2d00      	cmp	r5, #0
   88e1e:	dd05      	ble.n	88e2c <_dtoa_r+0x55c>
   88e20:	4631      	mov	r1, r6
   88e22:	462a      	mov	r2, r5
   88e24:	4620      	mov	r0, r4
   88e26:	f001 fed7 	bl	8abd8 <__lshift>
   88e2a:	4606      	mov	r6, r0
   88e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88e2e:	2b00      	cmp	r3, #0
   88e30:	f040 8336 	bne.w	894a0 <_dtoa_r+0xbd0>
   88e34:	9608      	str	r6, [sp, #32]
   88e36:	9b07      	ldr	r3, [sp, #28]
   88e38:	9a04      	ldr	r2, [sp, #16]
   88e3a:	3b01      	subs	r3, #1
   88e3c:	18d3      	adds	r3, r2, r3
   88e3e:	930b      	str	r3, [sp, #44]	; 0x2c
   88e40:	4617      	mov	r7, r2
   88e42:	f00a 0301 	and.w	r3, sl, #1
   88e46:	46c2      	mov	sl, r8
   88e48:	f8dd b020 	ldr.w	fp, [sp, #32]
   88e4c:	930c      	str	r3, [sp, #48]	; 0x30
   88e4e:	4651      	mov	r1, sl
   88e50:	4648      	mov	r0, r9
   88e52:	f7ff fca9 	bl	887a8 <quorem>
   88e56:	4631      	mov	r1, r6
   88e58:	4605      	mov	r5, r0
   88e5a:	4648      	mov	r0, r9
   88e5c:	f001 ff0c 	bl	8ac78 <__mcmp>
   88e60:	465a      	mov	r2, fp
   88e62:	9007      	str	r0, [sp, #28]
   88e64:	4651      	mov	r1, sl
   88e66:	4620      	mov	r0, r4
   88e68:	f001 ff22 	bl	8acb0 <__mdiff>
   88e6c:	68c2      	ldr	r2, [r0, #12]
   88e6e:	4680      	mov	r8, r0
   88e70:	f105 0330 	add.w	r3, r5, #48	; 0x30
   88e74:	2a00      	cmp	r2, #0
   88e76:	f040 8229 	bne.w	892cc <_dtoa_r+0x9fc>
   88e7a:	4601      	mov	r1, r0
   88e7c:	4648      	mov	r0, r9
   88e7e:	930a      	str	r3, [sp, #40]	; 0x28
   88e80:	f001 fefa 	bl	8ac78 <__mcmp>
   88e84:	4641      	mov	r1, r8
   88e86:	9008      	str	r0, [sp, #32]
   88e88:	4620      	mov	r0, r4
   88e8a:	f001 fd1d 	bl	8a8c8 <_Bfree>
   88e8e:	9a08      	ldr	r2, [sp, #32]
   88e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88e92:	b932      	cbnz	r2, 88ea2 <_dtoa_r+0x5d2>
   88e94:	9924      	ldr	r1, [sp, #144]	; 0x90
   88e96:	b921      	cbnz	r1, 88ea2 <_dtoa_r+0x5d2>
   88e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88e9a:	2a00      	cmp	r2, #0
   88e9c:	f000 83ee 	beq.w	8967c <_dtoa_r+0xdac>
   88ea0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88ea2:	9907      	ldr	r1, [sp, #28]
   88ea4:	2900      	cmp	r1, #0
   88ea6:	f2c0 829f 	blt.w	893e8 <_dtoa_r+0xb18>
   88eaa:	d105      	bne.n	88eb8 <_dtoa_r+0x5e8>
   88eac:	9924      	ldr	r1, [sp, #144]	; 0x90
   88eae:	b919      	cbnz	r1, 88eb8 <_dtoa_r+0x5e8>
   88eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
   88eb2:	2900      	cmp	r1, #0
   88eb4:	f000 8298 	beq.w	893e8 <_dtoa_r+0xb18>
   88eb8:	2a00      	cmp	r2, #0
   88eba:	f300 8305 	bgt.w	894c8 <_dtoa_r+0xbf8>
   88ebe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   88ec0:	f107 0801 	add.w	r8, r7, #1
   88ec4:	4297      	cmp	r7, r2
   88ec6:	703b      	strb	r3, [r7, #0]
   88ec8:	4645      	mov	r5, r8
   88eca:	f000 830b 	beq.w	894e4 <_dtoa_r+0xc14>
   88ece:	4649      	mov	r1, r9
   88ed0:	2300      	movs	r3, #0
   88ed2:	220a      	movs	r2, #10
   88ed4:	4620      	mov	r0, r4
   88ed6:	f001 fd01 	bl	8a8dc <__multadd>
   88eda:	455e      	cmp	r6, fp
   88edc:	4681      	mov	r9, r0
   88ede:	4631      	mov	r1, r6
   88ee0:	f04f 0300 	mov.w	r3, #0
   88ee4:	f04f 020a 	mov.w	r2, #10
   88ee8:	4620      	mov	r0, r4
   88eea:	f000 81e9 	beq.w	892c0 <_dtoa_r+0x9f0>
   88eee:	f001 fcf5 	bl	8a8dc <__multadd>
   88ef2:	4659      	mov	r1, fp
   88ef4:	4606      	mov	r6, r0
   88ef6:	2300      	movs	r3, #0
   88ef8:	220a      	movs	r2, #10
   88efa:	4620      	mov	r0, r4
   88efc:	f001 fcee 	bl	8a8dc <__multadd>
   88f00:	4647      	mov	r7, r8
   88f02:	4683      	mov	fp, r0
   88f04:	e7a3      	b.n	88e4e <_dtoa_r+0x57e>
   88f06:	201c      	movs	r0, #28
   88f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88f0a:	4405      	add	r5, r0
   88f0c:	4403      	add	r3, r0
   88f0e:	930a      	str	r3, [sp, #40]	; 0x28
   88f10:	9b08      	ldr	r3, [sp, #32]
   88f12:	4403      	add	r3, r0
   88f14:	9308      	str	r3, [sp, #32]
   88f16:	e763      	b.n	88de0 <_dtoa_r+0x510>
   88f18:	4641      	mov	r1, r8
   88f1a:	4648      	mov	r0, r9
   88f1c:	f001 feac 	bl	8ac78 <__mcmp>
   88f20:	2800      	cmp	r0, #0
   88f22:	f6bf af73 	bge.w	88e0c <_dtoa_r+0x53c>
   88f26:	9f02      	ldr	r7, [sp, #8]
   88f28:	4649      	mov	r1, r9
   88f2a:	2300      	movs	r3, #0
   88f2c:	220a      	movs	r2, #10
   88f2e:	4620      	mov	r0, r4
   88f30:	3f01      	subs	r7, #1
   88f32:	9702      	str	r7, [sp, #8]
   88f34:	f001 fcd2 	bl	8a8dc <__multadd>
   88f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88f3a:	4681      	mov	r9, r0
   88f3c:	2b00      	cmp	r3, #0
   88f3e:	f040 83b5 	bne.w	896ac <_dtoa_r+0xddc>
   88f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88f44:	2b00      	cmp	r3, #0
   88f46:	f340 83be 	ble.w	896c6 <_dtoa_r+0xdf6>
   88f4a:	9307      	str	r3, [sp, #28]
   88f4c:	f8dd a010 	ldr.w	sl, [sp, #16]
   88f50:	9f07      	ldr	r7, [sp, #28]
   88f52:	4655      	mov	r5, sl
   88f54:	e006      	b.n	88f64 <_dtoa_r+0x694>
   88f56:	4649      	mov	r1, r9
   88f58:	2300      	movs	r3, #0
   88f5a:	220a      	movs	r2, #10
   88f5c:	4620      	mov	r0, r4
   88f5e:	f001 fcbd 	bl	8a8dc <__multadd>
   88f62:	4681      	mov	r9, r0
   88f64:	4641      	mov	r1, r8
   88f66:	4648      	mov	r0, r9
   88f68:	f7ff fc1e 	bl	887a8 <quorem>
   88f6c:	3030      	adds	r0, #48	; 0x30
   88f6e:	f805 0b01 	strb.w	r0, [r5], #1
   88f72:	eba5 030a 	sub.w	r3, r5, sl
   88f76:	42bb      	cmp	r3, r7
   88f78:	dbed      	blt.n	88f56 <_dtoa_r+0x686>
   88f7a:	9b04      	ldr	r3, [sp, #16]
   88f7c:	9a07      	ldr	r2, [sp, #28]
   88f7e:	4682      	mov	sl, r0
   88f80:	2a01      	cmp	r2, #1
   88f82:	bfac      	ite	ge
   88f84:	189b      	addge	r3, r3, r2
   88f86:	3301      	addlt	r3, #1
   88f88:	f04f 0b00 	mov.w	fp, #0
   88f8c:	461d      	mov	r5, r3
   88f8e:	4649      	mov	r1, r9
   88f90:	2201      	movs	r2, #1
   88f92:	4620      	mov	r0, r4
   88f94:	f001 fe20 	bl	8abd8 <__lshift>
   88f98:	4641      	mov	r1, r8
   88f9a:	4681      	mov	r9, r0
   88f9c:	f001 fe6c 	bl	8ac78 <__mcmp>
   88fa0:	2800      	cmp	r0, #0
   88fa2:	f340 823f 	ble.w	89424 <_dtoa_r+0xb54>
   88fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   88faa:	1e6b      	subs	r3, r5, #1
   88fac:	9904      	ldr	r1, [sp, #16]
   88fae:	e004      	b.n	88fba <_dtoa_r+0x6ea>
   88fb0:	428b      	cmp	r3, r1
   88fb2:	f000 81ae 	beq.w	89312 <_dtoa_r+0xa42>
   88fb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   88fba:	2a39      	cmp	r2, #57	; 0x39
   88fbc:	f103 0501 	add.w	r5, r3, #1
   88fc0:	d0f6      	beq.n	88fb0 <_dtoa_r+0x6e0>
   88fc2:	3201      	adds	r2, #1
   88fc4:	701a      	strb	r2, [r3, #0]
   88fc6:	4641      	mov	r1, r8
   88fc8:	4620      	mov	r0, r4
   88fca:	f001 fc7d 	bl	8a8c8 <_Bfree>
   88fce:	2e00      	cmp	r6, #0
   88fd0:	f43f ae3d 	beq.w	88c4e <_dtoa_r+0x37e>
   88fd4:	f1bb 0f00 	cmp.w	fp, #0
   88fd8:	d005      	beq.n	88fe6 <_dtoa_r+0x716>
   88fda:	45b3      	cmp	fp, r6
   88fdc:	d003      	beq.n	88fe6 <_dtoa_r+0x716>
   88fde:	4659      	mov	r1, fp
   88fe0:	4620      	mov	r0, r4
   88fe2:	f001 fc71 	bl	8a8c8 <_Bfree>
   88fe6:	4631      	mov	r1, r6
   88fe8:	4620      	mov	r0, r4
   88fea:	f001 fc6d 	bl	8a8c8 <_Bfree>
   88fee:	e62e      	b.n	88c4e <_dtoa_r+0x37e>
   88ff0:	2300      	movs	r3, #0
   88ff2:	930b      	str	r3, [sp, #44]	; 0x2c
   88ff4:	9b02      	ldr	r3, [sp, #8]
   88ff6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   88ff8:	4413      	add	r3, r2
   88ffa:	930f      	str	r3, [sp, #60]	; 0x3c
   88ffc:	3301      	adds	r3, #1
   88ffe:	2b01      	cmp	r3, #1
   89000:	461f      	mov	r7, r3
   89002:	461e      	mov	r6, r3
   89004:	bfb8      	it	lt
   89006:	2701      	movlt	r7, #1
   89008:	9307      	str	r3, [sp, #28]
   8900a:	2100      	movs	r1, #0
   8900c:	2f17      	cmp	r7, #23
   8900e:	6461      	str	r1, [r4, #68]	; 0x44
   89010:	d90a      	bls.n	89028 <_dtoa_r+0x758>
   89012:	2201      	movs	r2, #1
   89014:	2304      	movs	r3, #4
   89016:	005b      	lsls	r3, r3, #1
   89018:	f103 0014 	add.w	r0, r3, #20
   8901c:	4287      	cmp	r7, r0
   8901e:	4611      	mov	r1, r2
   89020:	f102 0201 	add.w	r2, r2, #1
   89024:	d2f7      	bcs.n	89016 <_dtoa_r+0x746>
   89026:	6461      	str	r1, [r4, #68]	; 0x44
   89028:	4620      	mov	r0, r4
   8902a:	f001 fc27 	bl	8a87c <_Balloc>
   8902e:	2e0e      	cmp	r6, #14
   89030:	9004      	str	r0, [sp, #16]
   89032:	6420      	str	r0, [r4, #64]	; 0x40
   89034:	f63f ad47 	bhi.w	88ac6 <_dtoa_r+0x1f6>
   89038:	2d00      	cmp	r5, #0
   8903a:	f43f ad44 	beq.w	88ac6 <_dtoa_r+0x1f6>
   8903e:	9902      	ldr	r1, [sp, #8]
   89040:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   89044:	2900      	cmp	r1, #0
   89046:	f340 8203 	ble.w	89450 <_dtoa_r+0xb80>
   8904a:	4bb9      	ldr	r3, [pc, #740]	; (89330 <_dtoa_r+0xa60>)
   8904c:	f001 020f 	and.w	r2, r1, #15
   89050:	110d      	asrs	r5, r1, #4
   89052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89056:	06e9      	lsls	r1, r5, #27
   89058:	e9d3 6700 	ldrd	r6, r7, [r3]
   8905c:	f140 81af 	bpl.w	893be <_dtoa_r+0xaee>
   89060:	4bb4      	ldr	r3, [pc, #720]	; (89334 <_dtoa_r+0xa64>)
   89062:	4650      	mov	r0, sl
   89064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89068:	4659      	mov	r1, fp
   8906a:	f002 fe6b 	bl	8bd44 <__aeabi_ddiv>
   8906e:	f04f 0a03 	mov.w	sl, #3
   89072:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   89076:	f005 050f 	and.w	r5, r5, #15
   8907a:	b18d      	cbz	r5, 890a0 <_dtoa_r+0x7d0>
   8907c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 89334 <_dtoa_r+0xa64>
   89080:	07ea      	lsls	r2, r5, #31
   89082:	d509      	bpl.n	89098 <_dtoa_r+0x7c8>
   89084:	e9d8 2300 	ldrd	r2, r3, [r8]
   89088:	4630      	mov	r0, r6
   8908a:	4639      	mov	r1, r7
   8908c:	f002 fd30 	bl	8baf0 <__aeabi_dmul>
   89090:	4606      	mov	r6, r0
   89092:	460f      	mov	r7, r1
   89094:	f10a 0a01 	add.w	sl, sl, #1
   89098:	106d      	asrs	r5, r5, #1
   8909a:	f108 0808 	add.w	r8, r8, #8
   8909e:	d1ef      	bne.n	89080 <_dtoa_r+0x7b0>
   890a0:	463b      	mov	r3, r7
   890a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   890a6:	4632      	mov	r2, r6
   890a8:	f002 fe4c 	bl	8bd44 <__aeabi_ddiv>
   890ac:	4607      	mov	r7, r0
   890ae:	4688      	mov	r8, r1
   890b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   890b2:	b143      	cbz	r3, 890c6 <_dtoa_r+0x7f6>
   890b4:	2200      	movs	r2, #0
   890b6:	4ba0      	ldr	r3, [pc, #640]	; (89338 <_dtoa_r+0xa68>)
   890b8:	4638      	mov	r0, r7
   890ba:	4641      	mov	r1, r8
   890bc:	f002 ff8a 	bl	8bfd4 <__aeabi_dcmplt>
   890c0:	2800      	cmp	r0, #0
   890c2:	f040 8287 	bne.w	895d4 <_dtoa_r+0xd04>
   890c6:	4650      	mov	r0, sl
   890c8:	f002 fcac 	bl	8ba24 <__aeabi_i2d>
   890cc:	463a      	mov	r2, r7
   890ce:	4643      	mov	r3, r8
   890d0:	f002 fd0e 	bl	8baf0 <__aeabi_dmul>
   890d4:	4b99      	ldr	r3, [pc, #612]	; (8933c <_dtoa_r+0xa6c>)
   890d6:	2200      	movs	r2, #0
   890d8:	f002 fb58 	bl	8b78c <__adddf3>
   890dc:	9b07      	ldr	r3, [sp, #28]
   890de:	4605      	mov	r5, r0
   890e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   890e4:	2b00      	cmp	r3, #0
   890e6:	f000 813f 	beq.w	89368 <_dtoa_r+0xa98>
   890ea:	9b02      	ldr	r3, [sp, #8]
   890ec:	9315      	str	r3, [sp, #84]	; 0x54
   890ee:	9b07      	ldr	r3, [sp, #28]
   890f0:	9312      	str	r3, [sp, #72]	; 0x48
   890f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   890f4:	2b00      	cmp	r3, #0
   890f6:	f000 81fb 	beq.w	894f0 <_dtoa_r+0xc20>
   890fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   890fc:	4b8c      	ldr	r3, [pc, #560]	; (89330 <_dtoa_r+0xa60>)
   890fe:	2000      	movs	r0, #0
   89100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89104:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89108:	498d      	ldr	r1, [pc, #564]	; (89340 <_dtoa_r+0xa70>)
   8910a:	f002 fe1b 	bl	8bd44 <__aeabi_ddiv>
   8910e:	462a      	mov	r2, r5
   89110:	4633      	mov	r3, r6
   89112:	f002 fb39 	bl	8b788 <__aeabi_dsub>
   89116:	4682      	mov	sl, r0
   89118:	468b      	mov	fp, r1
   8911a:	4638      	mov	r0, r7
   8911c:	4641      	mov	r1, r8
   8911e:	f002 ff97 	bl	8c050 <__aeabi_d2iz>
   89122:	4605      	mov	r5, r0
   89124:	f002 fc7e 	bl	8ba24 <__aeabi_i2d>
   89128:	4602      	mov	r2, r0
   8912a:	460b      	mov	r3, r1
   8912c:	4638      	mov	r0, r7
   8912e:	4641      	mov	r1, r8
   89130:	f002 fb2a 	bl	8b788 <__aeabi_dsub>
   89134:	3530      	adds	r5, #48	; 0x30
   89136:	fa5f f885 	uxtb.w	r8, r5
   8913a:	9d04      	ldr	r5, [sp, #16]
   8913c:	4606      	mov	r6, r0
   8913e:	460f      	mov	r7, r1
   89140:	f885 8000 	strb.w	r8, [r5]
   89144:	4602      	mov	r2, r0
   89146:	460b      	mov	r3, r1
   89148:	4650      	mov	r0, sl
   8914a:	4659      	mov	r1, fp
   8914c:	3501      	adds	r5, #1
   8914e:	f002 ff5f 	bl	8c010 <__aeabi_dcmpgt>
   89152:	2800      	cmp	r0, #0
   89154:	d154      	bne.n	89200 <_dtoa_r+0x930>
   89156:	4632      	mov	r2, r6
   89158:	463b      	mov	r3, r7
   8915a:	2000      	movs	r0, #0
   8915c:	4976      	ldr	r1, [pc, #472]	; (89338 <_dtoa_r+0xa68>)
   8915e:	f002 fb13 	bl	8b788 <__aeabi_dsub>
   89162:	4602      	mov	r2, r0
   89164:	460b      	mov	r3, r1
   89166:	4650      	mov	r0, sl
   89168:	4659      	mov	r1, fp
   8916a:	f002 ff51 	bl	8c010 <__aeabi_dcmpgt>
   8916e:	2800      	cmp	r0, #0
   89170:	f040 8270 	bne.w	89654 <_dtoa_r+0xd84>
   89174:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89176:	2a01      	cmp	r2, #1
   89178:	f000 8112 	beq.w	893a0 <_dtoa_r+0xad0>
   8917c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8917e:	9a04      	ldr	r2, [sp, #16]
   89180:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   89184:	4413      	add	r3, r2
   89186:	4699      	mov	r9, r3
   89188:	e00f      	b.n	891aa <_dtoa_r+0x8da>
   8918a:	4632      	mov	r2, r6
   8918c:	463b      	mov	r3, r7
   8918e:	2000      	movs	r0, #0
   89190:	4969      	ldr	r1, [pc, #420]	; (89338 <_dtoa_r+0xa68>)
   89192:	f002 faf9 	bl	8b788 <__aeabi_dsub>
   89196:	4652      	mov	r2, sl
   89198:	465b      	mov	r3, fp
   8919a:	f002 ff1b 	bl	8bfd4 <__aeabi_dcmplt>
   8919e:	2800      	cmp	r0, #0
   891a0:	f040 8256 	bne.w	89650 <_dtoa_r+0xd80>
   891a4:	454d      	cmp	r5, r9
   891a6:	f000 80f9 	beq.w	8939c <_dtoa_r+0xacc>
   891aa:	4650      	mov	r0, sl
   891ac:	4659      	mov	r1, fp
   891ae:	2200      	movs	r2, #0
   891b0:	4b64      	ldr	r3, [pc, #400]	; (89344 <_dtoa_r+0xa74>)
   891b2:	f002 fc9d 	bl	8baf0 <__aeabi_dmul>
   891b6:	2200      	movs	r2, #0
   891b8:	4b62      	ldr	r3, [pc, #392]	; (89344 <_dtoa_r+0xa74>)
   891ba:	4682      	mov	sl, r0
   891bc:	468b      	mov	fp, r1
   891be:	4630      	mov	r0, r6
   891c0:	4639      	mov	r1, r7
   891c2:	f002 fc95 	bl	8baf0 <__aeabi_dmul>
   891c6:	460f      	mov	r7, r1
   891c8:	4606      	mov	r6, r0
   891ca:	f002 ff41 	bl	8c050 <__aeabi_d2iz>
   891ce:	4680      	mov	r8, r0
   891d0:	f002 fc28 	bl	8ba24 <__aeabi_i2d>
   891d4:	4602      	mov	r2, r0
   891d6:	460b      	mov	r3, r1
   891d8:	4630      	mov	r0, r6
   891da:	4639      	mov	r1, r7
   891dc:	f002 fad4 	bl	8b788 <__aeabi_dsub>
   891e0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   891e4:	fa5f f888 	uxtb.w	r8, r8
   891e8:	f805 8b01 	strb.w	r8, [r5], #1
   891ec:	4652      	mov	r2, sl
   891ee:	465b      	mov	r3, fp
   891f0:	4606      	mov	r6, r0
   891f2:	460f      	mov	r7, r1
   891f4:	f002 feee 	bl	8bfd4 <__aeabi_dcmplt>
   891f8:	2800      	cmp	r0, #0
   891fa:	d0c6      	beq.n	8918a <_dtoa_r+0x8ba>
   891fc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89200:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89202:	9302      	str	r3, [sp, #8]
   89204:	e523      	b.n	88c4e <_dtoa_r+0x37e>
   89206:	2300      	movs	r3, #0
   89208:	930b      	str	r3, [sp, #44]	; 0x2c
   8920a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8920c:	2b00      	cmp	r3, #0
   8920e:	f340 80dd 	ble.w	893cc <_dtoa_r+0xafc>
   89212:	461f      	mov	r7, r3
   89214:	461e      	mov	r6, r3
   89216:	930f      	str	r3, [sp, #60]	; 0x3c
   89218:	9307      	str	r3, [sp, #28]
   8921a:	e6f6      	b.n	8900a <_dtoa_r+0x73a>
   8921c:	2301      	movs	r3, #1
   8921e:	930b      	str	r3, [sp, #44]	; 0x2c
   89220:	e7f3      	b.n	8920a <_dtoa_r+0x93a>
   89222:	f1ba 0f00 	cmp.w	sl, #0
   89226:	f47f ada7 	bne.w	88d78 <_dtoa_r+0x4a8>
   8922a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8922e:	2b00      	cmp	r3, #0
   89230:	f47f adbc 	bne.w	88dac <_dtoa_r+0x4dc>
   89234:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   89238:	0d3f      	lsrs	r7, r7, #20
   8923a:	053f      	lsls	r7, r7, #20
   8923c:	2f00      	cmp	r7, #0
   8923e:	f000 820d 	beq.w	8965c <_dtoa_r+0xd8c>
   89242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89244:	3301      	adds	r3, #1
   89246:	930a      	str	r3, [sp, #40]	; 0x28
   89248:	9b08      	ldr	r3, [sp, #32]
   8924a:	3301      	adds	r3, #1
   8924c:	9308      	str	r3, [sp, #32]
   8924e:	2301      	movs	r3, #1
   89250:	930c      	str	r3, [sp, #48]	; 0x30
   89252:	e5ad      	b.n	88db0 <_dtoa_r+0x4e0>
   89254:	9b07      	ldr	r3, [sp, #28]
   89256:	2b00      	cmp	r3, #0
   89258:	f73f ac48 	bgt.w	88aec <_dtoa_r+0x21c>
   8925c:	f040 8222 	bne.w	896a4 <_dtoa_r+0xdd4>
   89260:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89264:	2200      	movs	r2, #0
   89266:	4b38      	ldr	r3, [pc, #224]	; (89348 <_dtoa_r+0xa78>)
   89268:	f002 fc42 	bl	8baf0 <__aeabi_dmul>
   8926c:	4652      	mov	r2, sl
   8926e:	465b      	mov	r3, fp
   89270:	f002 fec4 	bl	8bffc <__aeabi_dcmpge>
   89274:	f8dd 801c 	ldr.w	r8, [sp, #28]
   89278:	4646      	mov	r6, r8
   8927a:	2800      	cmp	r0, #0
   8927c:	d041      	beq.n	89302 <_dtoa_r+0xa32>
   8927e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89280:	9d04      	ldr	r5, [sp, #16]
   89282:	43db      	mvns	r3, r3
   89284:	9302      	str	r3, [sp, #8]
   89286:	4641      	mov	r1, r8
   89288:	4620      	mov	r0, r4
   8928a:	f001 fb1d 	bl	8a8c8 <_Bfree>
   8928e:	2e00      	cmp	r6, #0
   89290:	f43f acdd 	beq.w	88c4e <_dtoa_r+0x37e>
   89294:	e6a7      	b.n	88fe6 <_dtoa_r+0x716>
   89296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89298:	4649      	mov	r1, r9
   8929a:	4620      	mov	r0, r4
   8929c:	f001 fc4c 	bl	8ab38 <__pow5mult>
   892a0:	4681      	mov	r9, r0
   892a2:	e557      	b.n	88d54 <_dtoa_r+0x484>
   892a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   892a6:	2a00      	cmp	r2, #0
   892a8:	f000 8188 	beq.w	895bc <_dtoa_r+0xcec>
   892ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
   892b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   892b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   892b4:	e4f2      	b.n	88c9c <_dtoa_r+0x3cc>
   892b6:	f1ba 0f00 	cmp.w	sl, #0
   892ba:	f47f ad77 	bne.w	88dac <_dtoa_r+0x4dc>
   892be:	e7b4      	b.n	8922a <_dtoa_r+0x95a>
   892c0:	f001 fb0c 	bl	8a8dc <__multadd>
   892c4:	4647      	mov	r7, r8
   892c6:	4606      	mov	r6, r0
   892c8:	4683      	mov	fp, r0
   892ca:	e5c0      	b.n	88e4e <_dtoa_r+0x57e>
   892cc:	4601      	mov	r1, r0
   892ce:	4620      	mov	r0, r4
   892d0:	9308      	str	r3, [sp, #32]
   892d2:	f001 faf9 	bl	8a8c8 <_Bfree>
   892d6:	2201      	movs	r2, #1
   892d8:	9b08      	ldr	r3, [sp, #32]
   892da:	e5e2      	b.n	88ea2 <_dtoa_r+0x5d2>
   892dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892de:	2b02      	cmp	r3, #2
   892e0:	f77f ad98 	ble.w	88e14 <_dtoa_r+0x544>
   892e4:	9b07      	ldr	r3, [sp, #28]
   892e6:	2b00      	cmp	r3, #0
   892e8:	d1c9      	bne.n	8927e <_dtoa_r+0x9ae>
   892ea:	4641      	mov	r1, r8
   892ec:	2205      	movs	r2, #5
   892ee:	4620      	mov	r0, r4
   892f0:	f001 faf4 	bl	8a8dc <__multadd>
   892f4:	4601      	mov	r1, r0
   892f6:	4680      	mov	r8, r0
   892f8:	4648      	mov	r0, r9
   892fa:	f001 fcbd 	bl	8ac78 <__mcmp>
   892fe:	2800      	cmp	r0, #0
   89300:	ddbd      	ble.n	8927e <_dtoa_r+0x9ae>
   89302:	2331      	movs	r3, #49	; 0x31
   89304:	9a02      	ldr	r2, [sp, #8]
   89306:	9904      	ldr	r1, [sp, #16]
   89308:	3201      	adds	r2, #1
   8930a:	9202      	str	r2, [sp, #8]
   8930c:	700b      	strb	r3, [r1, #0]
   8930e:	1c4d      	adds	r5, r1, #1
   89310:	e7b9      	b.n	89286 <_dtoa_r+0x9b6>
   89312:	2331      	movs	r3, #49	; 0x31
   89314:	9a02      	ldr	r2, [sp, #8]
   89316:	3201      	adds	r2, #1
   89318:	9202      	str	r2, [sp, #8]
   8931a:	9a04      	ldr	r2, [sp, #16]
   8931c:	7013      	strb	r3, [r2, #0]
   8931e:	e652      	b.n	88fc6 <_dtoa_r+0x6f6>
   89320:	2301      	movs	r3, #1
   89322:	930b      	str	r3, [sp, #44]	; 0x2c
   89324:	e666      	b.n	88ff4 <_dtoa_r+0x724>
   89326:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8932a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8932c:	e48f      	b.n	88c4e <_dtoa_r+0x37e>
   8932e:	bf00      	nop
   89330:	0008c2a0 	.word	0x0008c2a0
   89334:	0008c278 	.word	0x0008c278
   89338:	3ff00000 	.word	0x3ff00000
   8933c:	401c0000 	.word	0x401c0000
   89340:	3fe00000 	.word	0x3fe00000
   89344:	40240000 	.word	0x40240000
   89348:	40140000 	.word	0x40140000
   8934c:	4650      	mov	r0, sl
   8934e:	f002 fb69 	bl	8ba24 <__aeabi_i2d>
   89352:	463a      	mov	r2, r7
   89354:	4643      	mov	r3, r8
   89356:	f002 fbcb 	bl	8baf0 <__aeabi_dmul>
   8935a:	2200      	movs	r2, #0
   8935c:	4bc1      	ldr	r3, [pc, #772]	; (89664 <_dtoa_r+0xd94>)
   8935e:	f002 fa15 	bl	8b78c <__adddf3>
   89362:	4605      	mov	r5, r0
   89364:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89368:	4641      	mov	r1, r8
   8936a:	2200      	movs	r2, #0
   8936c:	4bbe      	ldr	r3, [pc, #760]	; (89668 <_dtoa_r+0xd98>)
   8936e:	4638      	mov	r0, r7
   89370:	f002 fa0a 	bl	8b788 <__aeabi_dsub>
   89374:	462a      	mov	r2, r5
   89376:	4633      	mov	r3, r6
   89378:	4682      	mov	sl, r0
   8937a:	468b      	mov	fp, r1
   8937c:	f002 fe48 	bl	8c010 <__aeabi_dcmpgt>
   89380:	4680      	mov	r8, r0
   89382:	2800      	cmp	r0, #0
   89384:	f040 8110 	bne.w	895a8 <_dtoa_r+0xcd8>
   89388:	462a      	mov	r2, r5
   8938a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8938e:	4650      	mov	r0, sl
   89390:	4659      	mov	r1, fp
   89392:	f002 fe1f 	bl	8bfd4 <__aeabi_dcmplt>
   89396:	b118      	cbz	r0, 893a0 <_dtoa_r+0xad0>
   89398:	4646      	mov	r6, r8
   8939a:	e770      	b.n	8927e <_dtoa_r+0x9ae>
   8939c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   893a0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   893a4:	f7ff bb8f 	b.w	88ac6 <_dtoa_r+0x1f6>
   893a8:	9804      	ldr	r0, [sp, #16]
   893aa:	f7ff bac0 	b.w	8892e <_dtoa_r+0x5e>
   893ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   893b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   893b2:	1afb      	subs	r3, r7, r3
   893b4:	441a      	add	r2, r3
   893b6:	970c      	str	r7, [sp, #48]	; 0x30
   893b8:	920d      	str	r2, [sp, #52]	; 0x34
   893ba:	2700      	movs	r7, #0
   893bc:	e468      	b.n	88c90 <_dtoa_r+0x3c0>
   893be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   893c2:	f04f 0a02 	mov.w	sl, #2
   893c6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   893ca:	e656      	b.n	8907a <_dtoa_r+0x7aa>
   893cc:	2100      	movs	r1, #0
   893ce:	2301      	movs	r3, #1
   893d0:	4620      	mov	r0, r4
   893d2:	6461      	str	r1, [r4, #68]	; 0x44
   893d4:	9325      	str	r3, [sp, #148]	; 0x94
   893d6:	f001 fa51 	bl	8a87c <_Balloc>
   893da:	9b25      	ldr	r3, [sp, #148]	; 0x94
   893dc:	9004      	str	r0, [sp, #16]
   893de:	9307      	str	r3, [sp, #28]
   893e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   893e2:	6420      	str	r0, [r4, #64]	; 0x40
   893e4:	930f      	str	r3, [sp, #60]	; 0x3c
   893e6:	e627      	b.n	89038 <_dtoa_r+0x768>
   893e8:	2a00      	cmp	r2, #0
   893ea:	46d0      	mov	r8, sl
   893ec:	f8cd b020 	str.w	fp, [sp, #32]
   893f0:	469a      	mov	sl, r3
   893f2:	dd11      	ble.n	89418 <_dtoa_r+0xb48>
   893f4:	4649      	mov	r1, r9
   893f6:	2201      	movs	r2, #1
   893f8:	4620      	mov	r0, r4
   893fa:	f001 fbed 	bl	8abd8 <__lshift>
   893fe:	4641      	mov	r1, r8
   89400:	4681      	mov	r9, r0
   89402:	f001 fc39 	bl	8ac78 <__mcmp>
   89406:	2800      	cmp	r0, #0
   89408:	f340 8145 	ble.w	89696 <_dtoa_r+0xdc6>
   8940c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   89410:	f000 8105 	beq.w	8961e <_dtoa_r+0xd4e>
   89414:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   89418:	46b3      	mov	fp, r6
   8941a:	f887 a000 	strb.w	sl, [r7]
   8941e:	1c7d      	adds	r5, r7, #1
   89420:	9e08      	ldr	r6, [sp, #32]
   89422:	e5d0      	b.n	88fc6 <_dtoa_r+0x6f6>
   89424:	d104      	bne.n	89430 <_dtoa_r+0xb60>
   89426:	f01a 0f01 	tst.w	sl, #1
   8942a:	d001      	beq.n	89430 <_dtoa_r+0xb60>
   8942c:	e5bb      	b.n	88fa6 <_dtoa_r+0x6d6>
   8942e:	4615      	mov	r5, r2
   89430:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89434:	1e6a      	subs	r2, r5, #1
   89436:	2b30      	cmp	r3, #48	; 0x30
   89438:	d0f9      	beq.n	8942e <_dtoa_r+0xb5e>
   8943a:	e5c4      	b.n	88fc6 <_dtoa_r+0x6f6>
   8943c:	2230      	movs	r2, #48	; 0x30
   8943e:	9904      	ldr	r1, [sp, #16]
   89440:	700a      	strb	r2, [r1, #0]
   89442:	9a02      	ldr	r2, [sp, #8]
   89444:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   89448:	3201      	adds	r2, #1
   8944a:	9202      	str	r2, [sp, #8]
   8944c:	f7ff bbfb 	b.w	88c46 <_dtoa_r+0x376>
   89450:	f000 80bb 	beq.w	895ca <_dtoa_r+0xcfa>
   89454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89458:	9b02      	ldr	r3, [sp, #8]
   8945a:	f04f 0a02 	mov.w	sl, #2
   8945e:	425d      	negs	r5, r3
   89460:	4b82      	ldr	r3, [pc, #520]	; (8966c <_dtoa_r+0xd9c>)
   89462:	f005 020f 	and.w	r2, r5, #15
   89466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8946a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8946e:	f002 fb3f 	bl	8baf0 <__aeabi_dmul>
   89472:	112d      	asrs	r5, r5, #4
   89474:	4607      	mov	r7, r0
   89476:	4688      	mov	r8, r1
   89478:	f43f ae1a 	beq.w	890b0 <_dtoa_r+0x7e0>
   8947c:	4e7c      	ldr	r6, [pc, #496]	; (89670 <_dtoa_r+0xda0>)
   8947e:	07eb      	lsls	r3, r5, #31
   89480:	d509      	bpl.n	89496 <_dtoa_r+0xbc6>
   89482:	e9d6 2300 	ldrd	r2, r3, [r6]
   89486:	4638      	mov	r0, r7
   89488:	4641      	mov	r1, r8
   8948a:	f002 fb31 	bl	8baf0 <__aeabi_dmul>
   8948e:	4607      	mov	r7, r0
   89490:	4688      	mov	r8, r1
   89492:	f10a 0a01 	add.w	sl, sl, #1
   89496:	106d      	asrs	r5, r5, #1
   89498:	f106 0608 	add.w	r6, r6, #8
   8949c:	d1ef      	bne.n	8947e <_dtoa_r+0xbae>
   8949e:	e607      	b.n	890b0 <_dtoa_r+0x7e0>
   894a0:	6871      	ldr	r1, [r6, #4]
   894a2:	4620      	mov	r0, r4
   894a4:	f001 f9ea 	bl	8a87c <_Balloc>
   894a8:	4605      	mov	r5, r0
   894aa:	6933      	ldr	r3, [r6, #16]
   894ac:	f106 010c 	add.w	r1, r6, #12
   894b0:	3302      	adds	r3, #2
   894b2:	009a      	lsls	r2, r3, #2
   894b4:	300c      	adds	r0, #12
   894b6:	f7fc fda1 	bl	85ffc <memcpy>
   894ba:	4629      	mov	r1, r5
   894bc:	2201      	movs	r2, #1
   894be:	4620      	mov	r0, r4
   894c0:	f001 fb8a 	bl	8abd8 <__lshift>
   894c4:	9008      	str	r0, [sp, #32]
   894c6:	e4b6      	b.n	88e36 <_dtoa_r+0x566>
   894c8:	2b39      	cmp	r3, #57	; 0x39
   894ca:	f8cd b020 	str.w	fp, [sp, #32]
   894ce:	46d0      	mov	r8, sl
   894d0:	f000 80a5 	beq.w	8961e <_dtoa_r+0xd4e>
   894d4:	f103 0a01 	add.w	sl, r3, #1
   894d8:	46b3      	mov	fp, r6
   894da:	f887 a000 	strb.w	sl, [r7]
   894de:	1c7d      	adds	r5, r7, #1
   894e0:	9e08      	ldr	r6, [sp, #32]
   894e2:	e570      	b.n	88fc6 <_dtoa_r+0x6f6>
   894e4:	465a      	mov	r2, fp
   894e6:	46d0      	mov	r8, sl
   894e8:	46b3      	mov	fp, r6
   894ea:	469a      	mov	sl, r3
   894ec:	4616      	mov	r6, r2
   894ee:	e54e      	b.n	88f8e <_dtoa_r+0x6be>
   894f0:	9812      	ldr	r0, [sp, #72]	; 0x48
   894f2:	495e      	ldr	r1, [pc, #376]	; (8966c <_dtoa_r+0xd9c>)
   894f4:	462a      	mov	r2, r5
   894f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   894fa:	4633      	mov	r3, r6
   894fc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89500:	f002 faf6 	bl	8baf0 <__aeabi_dmul>
   89504:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   89508:	4638      	mov	r0, r7
   8950a:	4641      	mov	r1, r8
   8950c:	f002 fda0 	bl	8c050 <__aeabi_d2iz>
   89510:	4605      	mov	r5, r0
   89512:	f002 fa87 	bl	8ba24 <__aeabi_i2d>
   89516:	4602      	mov	r2, r0
   89518:	460b      	mov	r3, r1
   8951a:	4638      	mov	r0, r7
   8951c:	4641      	mov	r1, r8
   8951e:	f002 f933 	bl	8b788 <__aeabi_dsub>
   89522:	4606      	mov	r6, r0
   89524:	9812      	ldr	r0, [sp, #72]	; 0x48
   89526:	9a04      	ldr	r2, [sp, #16]
   89528:	3530      	adds	r5, #48	; 0x30
   8952a:	2801      	cmp	r0, #1
   8952c:	7015      	strb	r5, [r2, #0]
   8952e:	460f      	mov	r7, r1
   89530:	f102 0501 	add.w	r5, r2, #1
   89534:	d026      	beq.n	89584 <_dtoa_r+0xcb4>
   89536:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89538:	9a04      	ldr	r2, [sp, #16]
   8953a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8953e:	4413      	add	r3, r2
   89540:	f04f 0a00 	mov.w	sl, #0
   89544:	4699      	mov	r9, r3
   89546:	f8df b130 	ldr.w	fp, [pc, #304]	; 89678 <_dtoa_r+0xda8>
   8954a:	4652      	mov	r2, sl
   8954c:	465b      	mov	r3, fp
   8954e:	4630      	mov	r0, r6
   89550:	4639      	mov	r1, r7
   89552:	f002 facd 	bl	8baf0 <__aeabi_dmul>
   89556:	460f      	mov	r7, r1
   89558:	4606      	mov	r6, r0
   8955a:	f002 fd79 	bl	8c050 <__aeabi_d2iz>
   8955e:	4680      	mov	r8, r0
   89560:	f002 fa60 	bl	8ba24 <__aeabi_i2d>
   89564:	4602      	mov	r2, r0
   89566:	460b      	mov	r3, r1
   89568:	4630      	mov	r0, r6
   8956a:	4639      	mov	r1, r7
   8956c:	f002 f90c 	bl	8b788 <__aeabi_dsub>
   89570:	f108 0830 	add.w	r8, r8, #48	; 0x30
   89574:	f805 8b01 	strb.w	r8, [r5], #1
   89578:	454d      	cmp	r5, r9
   8957a:	4606      	mov	r6, r0
   8957c:	460f      	mov	r7, r1
   8957e:	d1e4      	bne.n	8954a <_dtoa_r+0xc7a>
   89580:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89584:	2200      	movs	r2, #0
   89586:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8958a:	4b3a      	ldr	r3, [pc, #232]	; (89674 <_dtoa_r+0xda4>)
   8958c:	f002 f8fe 	bl	8b78c <__adddf3>
   89590:	4632      	mov	r2, r6
   89592:	463b      	mov	r3, r7
   89594:	f002 fd1e 	bl	8bfd4 <__aeabi_dcmplt>
   89598:	2800      	cmp	r0, #0
   8959a:	d046      	beq.n	8962a <_dtoa_r+0xd5a>
   8959c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8959e:	9302      	str	r3, [sp, #8]
   895a0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   895a4:	f7ff bb42 	b.w	88c2c <_dtoa_r+0x35c>
   895a8:	f04f 0800 	mov.w	r8, #0
   895ac:	4646      	mov	r6, r8
   895ae:	e6a8      	b.n	89302 <_dtoa_r+0xa32>
   895b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   895b2:	9a07      	ldr	r2, [sp, #28]
   895b4:	1a9d      	subs	r5, r3, r2
   895b6:	2300      	movs	r3, #0
   895b8:	f7ff bb70 	b.w	88c9c <_dtoa_r+0x3cc>
   895bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   895be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   895c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   895c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   895c6:	f7ff bb69 	b.w	88c9c <_dtoa_r+0x3cc>
   895ca:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   895ce:	f04f 0a02 	mov.w	sl, #2
   895d2:	e56d      	b.n	890b0 <_dtoa_r+0x7e0>
   895d4:	9b07      	ldr	r3, [sp, #28]
   895d6:	2b00      	cmp	r3, #0
   895d8:	f43f aeb8 	beq.w	8934c <_dtoa_r+0xa7c>
   895dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   895de:	2b00      	cmp	r3, #0
   895e0:	f77f aede 	ble.w	893a0 <_dtoa_r+0xad0>
   895e4:	2200      	movs	r2, #0
   895e6:	4b24      	ldr	r3, [pc, #144]	; (89678 <_dtoa_r+0xda8>)
   895e8:	4638      	mov	r0, r7
   895ea:	4641      	mov	r1, r8
   895ec:	f002 fa80 	bl	8baf0 <__aeabi_dmul>
   895f0:	4607      	mov	r7, r0
   895f2:	4688      	mov	r8, r1
   895f4:	f10a 0001 	add.w	r0, sl, #1
   895f8:	f002 fa14 	bl	8ba24 <__aeabi_i2d>
   895fc:	463a      	mov	r2, r7
   895fe:	4643      	mov	r3, r8
   89600:	f002 fa76 	bl	8baf0 <__aeabi_dmul>
   89604:	2200      	movs	r2, #0
   89606:	4b17      	ldr	r3, [pc, #92]	; (89664 <_dtoa_r+0xd94>)
   89608:	f002 f8c0 	bl	8b78c <__adddf3>
   8960c:	9a02      	ldr	r2, [sp, #8]
   8960e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89610:	3a01      	subs	r2, #1
   89612:	4605      	mov	r5, r0
   89614:	9215      	str	r2, [sp, #84]	; 0x54
   89616:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8961a:	9312      	str	r3, [sp, #72]	; 0x48
   8961c:	e569      	b.n	890f2 <_dtoa_r+0x822>
   8961e:	2239      	movs	r2, #57	; 0x39
   89620:	46b3      	mov	fp, r6
   89622:	703a      	strb	r2, [r7, #0]
   89624:	9e08      	ldr	r6, [sp, #32]
   89626:	1c7d      	adds	r5, r7, #1
   89628:	e4bf      	b.n	88faa <_dtoa_r+0x6da>
   8962a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8962e:	2000      	movs	r0, #0
   89630:	4910      	ldr	r1, [pc, #64]	; (89674 <_dtoa_r+0xda4>)
   89632:	f002 f8a9 	bl	8b788 <__aeabi_dsub>
   89636:	4632      	mov	r2, r6
   89638:	463b      	mov	r3, r7
   8963a:	f002 fce9 	bl	8c010 <__aeabi_dcmpgt>
   8963e:	b908      	cbnz	r0, 89644 <_dtoa_r+0xd74>
   89640:	e6ae      	b.n	893a0 <_dtoa_r+0xad0>
   89642:	4615      	mov	r5, r2
   89644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89648:	1e6a      	subs	r2, r5, #1
   8964a:	2b30      	cmp	r3, #48	; 0x30
   8964c:	d0f9      	beq.n	89642 <_dtoa_r+0xd72>
   8964e:	e5d7      	b.n	89200 <_dtoa_r+0x930>
   89650:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89654:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89656:	9302      	str	r3, [sp, #8]
   89658:	f7ff bae8 	b.w	88c2c <_dtoa_r+0x35c>
   8965c:	970c      	str	r7, [sp, #48]	; 0x30
   8965e:	f7ff bba7 	b.w	88db0 <_dtoa_r+0x4e0>
   89662:	bf00      	nop
   89664:	401c0000 	.word	0x401c0000
   89668:	40140000 	.word	0x40140000
   8966c:	0008c2a0 	.word	0x0008c2a0
   89670:	0008c278 	.word	0x0008c278
   89674:	3fe00000 	.word	0x3fe00000
   89678:	40240000 	.word	0x40240000
   8967c:	2b39      	cmp	r3, #57	; 0x39
   8967e:	f8cd b020 	str.w	fp, [sp, #32]
   89682:	46d0      	mov	r8, sl
   89684:	f8dd b01c 	ldr.w	fp, [sp, #28]
   89688:	469a      	mov	sl, r3
   8968a:	d0c8      	beq.n	8961e <_dtoa_r+0xd4e>
   8968c:	f1bb 0f00 	cmp.w	fp, #0
   89690:	f73f aec0 	bgt.w	89414 <_dtoa_r+0xb44>
   89694:	e6c0      	b.n	89418 <_dtoa_r+0xb48>
   89696:	f47f aebf 	bne.w	89418 <_dtoa_r+0xb48>
   8969a:	f01a 0f01 	tst.w	sl, #1
   8969e:	f43f aebb 	beq.w	89418 <_dtoa_r+0xb48>
   896a2:	e6b3      	b.n	8940c <_dtoa_r+0xb3c>
   896a4:	f04f 0800 	mov.w	r8, #0
   896a8:	4646      	mov	r6, r8
   896aa:	e5e8      	b.n	8927e <_dtoa_r+0x9ae>
   896ac:	4631      	mov	r1, r6
   896ae:	2300      	movs	r3, #0
   896b0:	220a      	movs	r2, #10
   896b2:	4620      	mov	r0, r4
   896b4:	f001 f912 	bl	8a8dc <__multadd>
   896b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   896ba:	4606      	mov	r6, r0
   896bc:	2b00      	cmp	r3, #0
   896be:	dd07      	ble.n	896d0 <_dtoa_r+0xe00>
   896c0:	9307      	str	r3, [sp, #28]
   896c2:	f7ff bbab 	b.w	88e1c <_dtoa_r+0x54c>
   896c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896c8:	2b02      	cmp	r3, #2
   896ca:	dc1f      	bgt.n	8970c <_dtoa_r+0xe3c>
   896cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   896ce:	e43c      	b.n	88f4a <_dtoa_r+0x67a>
   896d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896d2:	2b02      	cmp	r3, #2
   896d4:	dc1a      	bgt.n	8970c <_dtoa_r+0xe3c>
   896d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   896d8:	e7f2      	b.n	896c0 <_dtoa_r+0xdf0>
   896da:	f43f ab81 	beq.w	88de0 <_dtoa_r+0x510>
   896de:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   896e2:	e411      	b.n	88f08 <_dtoa_r+0x638>
   896e4:	2500      	movs	r5, #0
   896e6:	4620      	mov	r0, r4
   896e8:	6465      	str	r5, [r4, #68]	; 0x44
   896ea:	4629      	mov	r1, r5
   896ec:	f001 f8c6 	bl	8a87c <_Balloc>
   896f0:	f04f 33ff 	mov.w	r3, #4294967295
   896f4:	9307      	str	r3, [sp, #28]
   896f6:	930f      	str	r3, [sp, #60]	; 0x3c
   896f8:	2301      	movs	r3, #1
   896fa:	9004      	str	r0, [sp, #16]
   896fc:	9525      	str	r5, [sp, #148]	; 0x94
   896fe:	6420      	str	r0, [r4, #64]	; 0x40
   89700:	930b      	str	r3, [sp, #44]	; 0x2c
   89702:	f7ff b9e0 	b.w	88ac6 <_dtoa_r+0x1f6>
   89706:	2501      	movs	r5, #1
   89708:	f7ff b9a8 	b.w	88a5c <_dtoa_r+0x18c>
   8970c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8970e:	9307      	str	r3, [sp, #28]
   89710:	e5e8      	b.n	892e4 <_dtoa_r+0xa14>
   89712:	bf00      	nop

00089714 <__sflush_r>:
   89714:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   89718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8971c:	b29a      	uxth	r2, r3
   8971e:	460d      	mov	r5, r1
   89720:	0711      	lsls	r1, r2, #28
   89722:	4680      	mov	r8, r0
   89724:	d43a      	bmi.n	8979c <__sflush_r+0x88>
   89726:	686a      	ldr	r2, [r5, #4]
   89728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8972c:	2a00      	cmp	r2, #0
   8972e:	81ab      	strh	r3, [r5, #12]
   89730:	dd70      	ble.n	89814 <__sflush_r+0x100>
   89732:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89734:	2c00      	cmp	r4, #0
   89736:	d04a      	beq.n	897ce <__sflush_r+0xba>
   89738:	2200      	movs	r2, #0
   8973a:	b29b      	uxth	r3, r3
   8973c:	f8d8 6000 	ldr.w	r6, [r8]
   89740:	f8c8 2000 	str.w	r2, [r8]
   89744:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   89748:	d068      	beq.n	8981c <__sflush_r+0x108>
   8974a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8974c:	075f      	lsls	r7, r3, #29
   8974e:	d505      	bpl.n	8975c <__sflush_r+0x48>
   89750:	6869      	ldr	r1, [r5, #4]
   89752:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89754:	1a52      	subs	r2, r2, r1
   89756:	b10b      	cbz	r3, 8975c <__sflush_r+0x48>
   89758:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8975a:	1ad2      	subs	r2, r2, r3
   8975c:	2300      	movs	r3, #0
   8975e:	69e9      	ldr	r1, [r5, #28]
   89760:	4640      	mov	r0, r8
   89762:	47a0      	blx	r4
   89764:	1c44      	adds	r4, r0, #1
   89766:	d03d      	beq.n	897e4 <__sflush_r+0xd0>
   89768:	2100      	movs	r1, #0
   8976a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8976e:	692a      	ldr	r2, [r5, #16]
   89770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89774:	81ab      	strh	r3, [r5, #12]
   89776:	04db      	lsls	r3, r3, #19
   89778:	6069      	str	r1, [r5, #4]
   8977a:	602a      	str	r2, [r5, #0]
   8977c:	d448      	bmi.n	89810 <__sflush_r+0xfc>
   8977e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   89780:	f8c8 6000 	str.w	r6, [r8]
   89784:	b319      	cbz	r1, 897ce <__sflush_r+0xba>
   89786:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8978a:	4299      	cmp	r1, r3
   8978c:	d002      	beq.n	89794 <__sflush_r+0x80>
   8978e:	4640      	mov	r0, r8
   89790:	f000 f9da 	bl	89b48 <_free_r>
   89794:	2000      	movs	r0, #0
   89796:	6328      	str	r0, [r5, #48]	; 0x30
   89798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8979c:	692e      	ldr	r6, [r5, #16]
   8979e:	b1b6      	cbz	r6, 897ce <__sflush_r+0xba>
   897a0:	0791      	lsls	r1, r2, #30
   897a2:	bf18      	it	ne
   897a4:	2300      	movne	r3, #0
   897a6:	682c      	ldr	r4, [r5, #0]
   897a8:	bf08      	it	eq
   897aa:	696b      	ldreq	r3, [r5, #20]
   897ac:	602e      	str	r6, [r5, #0]
   897ae:	1ba4      	subs	r4, r4, r6
   897b0:	60ab      	str	r3, [r5, #8]
   897b2:	e00a      	b.n	897ca <__sflush_r+0xb6>
   897b4:	4623      	mov	r3, r4
   897b6:	4632      	mov	r2, r6
   897b8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   897ba:	69e9      	ldr	r1, [r5, #28]
   897bc:	4640      	mov	r0, r8
   897be:	47b8      	blx	r7
   897c0:	2800      	cmp	r0, #0
   897c2:	eba4 0400 	sub.w	r4, r4, r0
   897c6:	4406      	add	r6, r0
   897c8:	dd04      	ble.n	897d4 <__sflush_r+0xc0>
   897ca:	2c00      	cmp	r4, #0
   897cc:	dcf2      	bgt.n	897b4 <__sflush_r+0xa0>
   897ce:	2000      	movs	r0, #0
   897d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   897d4:	89ab      	ldrh	r3, [r5, #12]
   897d6:	f04f 30ff 	mov.w	r0, #4294967295
   897da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   897de:	81ab      	strh	r3, [r5, #12]
   897e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   897e4:	f8d8 4000 	ldr.w	r4, [r8]
   897e8:	2c1d      	cmp	r4, #29
   897ea:	d8f3      	bhi.n	897d4 <__sflush_r+0xc0>
   897ec:	4b16      	ldr	r3, [pc, #88]	; (89848 <__sflush_r+0x134>)
   897ee:	40e3      	lsrs	r3, r4
   897f0:	43db      	mvns	r3, r3
   897f2:	f013 0301 	ands.w	r3, r3, #1
   897f6:	d1ed      	bne.n	897d4 <__sflush_r+0xc0>
   897f8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   897fc:	6929      	ldr	r1, [r5, #16]
   897fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   89802:	81aa      	strh	r2, [r5, #12]
   89804:	04d2      	lsls	r2, r2, #19
   89806:	606b      	str	r3, [r5, #4]
   89808:	6029      	str	r1, [r5, #0]
   8980a:	d5b8      	bpl.n	8977e <__sflush_r+0x6a>
   8980c:	2c00      	cmp	r4, #0
   8980e:	d1b6      	bne.n	8977e <__sflush_r+0x6a>
   89810:	6528      	str	r0, [r5, #80]	; 0x50
   89812:	e7b4      	b.n	8977e <__sflush_r+0x6a>
   89814:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   89816:	2a00      	cmp	r2, #0
   89818:	dc8b      	bgt.n	89732 <__sflush_r+0x1e>
   8981a:	e7d8      	b.n	897ce <__sflush_r+0xba>
   8981c:	2301      	movs	r3, #1
   8981e:	69e9      	ldr	r1, [r5, #28]
   89820:	4640      	mov	r0, r8
   89822:	47a0      	blx	r4
   89824:	1c43      	adds	r3, r0, #1
   89826:	4602      	mov	r2, r0
   89828:	d002      	beq.n	89830 <__sflush_r+0x11c>
   8982a:	89ab      	ldrh	r3, [r5, #12]
   8982c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8982e:	e78d      	b.n	8974c <__sflush_r+0x38>
   89830:	f8d8 3000 	ldr.w	r3, [r8]
   89834:	2b00      	cmp	r3, #0
   89836:	d0f8      	beq.n	8982a <__sflush_r+0x116>
   89838:	2b1d      	cmp	r3, #29
   8983a:	d001      	beq.n	89840 <__sflush_r+0x12c>
   8983c:	2b16      	cmp	r3, #22
   8983e:	d1c9      	bne.n	897d4 <__sflush_r+0xc0>
   89840:	f8c8 6000 	str.w	r6, [r8]
   89844:	e7c3      	b.n	897ce <__sflush_r+0xba>
   89846:	bf00      	nop
   89848:	20400001 	.word	0x20400001

0008984c <_fflush_r>:
   8984c:	b538      	push	{r3, r4, r5, lr}
   8984e:	460d      	mov	r5, r1
   89850:	4604      	mov	r4, r0
   89852:	b108      	cbz	r0, 89858 <_fflush_r+0xc>
   89854:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89856:	b1bb      	cbz	r3, 89888 <_fflush_r+0x3c>
   89858:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8985c:	b188      	cbz	r0, 89882 <_fflush_r+0x36>
   8985e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   89860:	07db      	lsls	r3, r3, #31
   89862:	d401      	bmi.n	89868 <_fflush_r+0x1c>
   89864:	0581      	lsls	r1, r0, #22
   89866:	d517      	bpl.n	89898 <_fflush_r+0x4c>
   89868:	4620      	mov	r0, r4
   8986a:	4629      	mov	r1, r5
   8986c:	f7ff ff52 	bl	89714 <__sflush_r>
   89870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   89872:	4604      	mov	r4, r0
   89874:	07da      	lsls	r2, r3, #31
   89876:	d402      	bmi.n	8987e <_fflush_r+0x32>
   89878:	89ab      	ldrh	r3, [r5, #12]
   8987a:	059b      	lsls	r3, r3, #22
   8987c:	d507      	bpl.n	8988e <_fflush_r+0x42>
   8987e:	4620      	mov	r0, r4
   89880:	bd38      	pop	{r3, r4, r5, pc}
   89882:	4604      	mov	r4, r0
   89884:	4620      	mov	r0, r4
   89886:	bd38      	pop	{r3, r4, r5, pc}
   89888:	f000 f838 	bl	898fc <__sinit>
   8988c:	e7e4      	b.n	89858 <_fflush_r+0xc>
   8988e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   89890:	f000 fc04 	bl	8a09c <__retarget_lock_release_recursive>
   89894:	4620      	mov	r0, r4
   89896:	bd38      	pop	{r3, r4, r5, pc}
   89898:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8989a:	f000 fbfd 	bl	8a098 <__retarget_lock_acquire_recursive>
   8989e:	e7e3      	b.n	89868 <_fflush_r+0x1c>

000898a0 <_cleanup_r>:
   898a0:	4901      	ldr	r1, [pc, #4]	; (898a8 <_cleanup_r+0x8>)
   898a2:	f000 bbb1 	b.w	8a008 <_fwalk_reent>
   898a6:	bf00      	nop
   898a8:	0008b619 	.word	0x0008b619

000898ac <std.isra.0>:
   898ac:	2300      	movs	r3, #0
   898ae:	b510      	push	{r4, lr}
   898b0:	4604      	mov	r4, r0
   898b2:	8181      	strh	r1, [r0, #12]
   898b4:	81c2      	strh	r2, [r0, #14]
   898b6:	6003      	str	r3, [r0, #0]
   898b8:	6043      	str	r3, [r0, #4]
   898ba:	6083      	str	r3, [r0, #8]
   898bc:	6643      	str	r3, [r0, #100]	; 0x64
   898be:	6103      	str	r3, [r0, #16]
   898c0:	6143      	str	r3, [r0, #20]
   898c2:	6183      	str	r3, [r0, #24]
   898c4:	4619      	mov	r1, r3
   898c6:	2208      	movs	r2, #8
   898c8:	305c      	adds	r0, #92	; 0x5c
   898ca:	f7fc fc0d 	bl	860e8 <memset>
   898ce:	4807      	ldr	r0, [pc, #28]	; (898ec <std.isra.0+0x40>)
   898d0:	4907      	ldr	r1, [pc, #28]	; (898f0 <std.isra.0+0x44>)
   898d2:	4a08      	ldr	r2, [pc, #32]	; (898f4 <std.isra.0+0x48>)
   898d4:	4b08      	ldr	r3, [pc, #32]	; (898f8 <std.isra.0+0x4c>)
   898d6:	6220      	str	r0, [r4, #32]
   898d8:	61e4      	str	r4, [r4, #28]
   898da:	6261      	str	r1, [r4, #36]	; 0x24
   898dc:	62a2      	str	r2, [r4, #40]	; 0x28
   898de:	62e3      	str	r3, [r4, #44]	; 0x2c
   898e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   898e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   898e8:	f000 bbd2 	b.w	8a090 <__retarget_lock_init_recursive>
   898ec:	0008b205 	.word	0x0008b205
   898f0:	0008b229 	.word	0x0008b229
   898f4:	0008b265 	.word	0x0008b265
   898f8:	0008b285 	.word	0x0008b285

000898fc <__sinit>:
   898fc:	b510      	push	{r4, lr}
   898fe:	4604      	mov	r4, r0
   89900:	4814      	ldr	r0, [pc, #80]	; (89954 <__sinit+0x58>)
   89902:	f000 fbc9 	bl	8a098 <__retarget_lock_acquire_recursive>
   89906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   89908:	b9fa      	cbnz	r2, 8994a <__sinit+0x4e>
   8990a:	2003      	movs	r0, #3
   8990c:	4912      	ldr	r1, [pc, #72]	; (89958 <__sinit+0x5c>)
   8990e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   89912:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   89916:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8991a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8991e:	63e1      	str	r1, [r4, #60]	; 0x3c
   89920:	6860      	ldr	r0, [r4, #4]
   89922:	2104      	movs	r1, #4
   89924:	f7ff ffc2 	bl	898ac <std.isra.0>
   89928:	68a0      	ldr	r0, [r4, #8]
   8992a:	2201      	movs	r2, #1
   8992c:	2109      	movs	r1, #9
   8992e:	f7ff ffbd 	bl	898ac <std.isra.0>
   89932:	68e0      	ldr	r0, [r4, #12]
   89934:	2202      	movs	r2, #2
   89936:	2112      	movs	r1, #18
   89938:	f7ff ffb8 	bl	898ac <std.isra.0>
   8993c:	2301      	movs	r3, #1
   8993e:	4805      	ldr	r0, [pc, #20]	; (89954 <__sinit+0x58>)
   89940:	63a3      	str	r3, [r4, #56]	; 0x38
   89942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89946:	f000 bba9 	b.w	8a09c <__retarget_lock_release_recursive>
   8994a:	4802      	ldr	r0, [pc, #8]	; (89954 <__sinit+0x58>)
   8994c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89950:	f000 bba4 	b.w	8a09c <__retarget_lock_release_recursive>
   89954:	200026c8 	.word	0x200026c8
   89958:	000898a1 	.word	0x000898a1

0008995c <__sfp_lock_acquire>:
   8995c:	4801      	ldr	r0, [pc, #4]	; (89964 <__sfp_lock_acquire+0x8>)
   8995e:	f000 bb9b 	b.w	8a098 <__retarget_lock_acquire_recursive>
   89962:	bf00      	nop
   89964:	200026dc 	.word	0x200026dc

00089968 <__sfp_lock_release>:
   89968:	4801      	ldr	r0, [pc, #4]	; (89970 <__sfp_lock_release+0x8>)
   8996a:	f000 bb97 	b.w	8a09c <__retarget_lock_release_recursive>
   8996e:	bf00      	nop
   89970:	200026dc 	.word	0x200026dc

00089974 <__libc_fini_array>:
   89974:	b538      	push	{r3, r4, r5, lr}
   89976:	4c0a      	ldr	r4, [pc, #40]	; (899a0 <__libc_fini_array+0x2c>)
   89978:	4d0a      	ldr	r5, [pc, #40]	; (899a4 <__libc_fini_array+0x30>)
   8997a:	1b64      	subs	r4, r4, r5
   8997c:	10a4      	asrs	r4, r4, #2
   8997e:	d00a      	beq.n	89996 <__libc_fini_array+0x22>
   89980:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   89984:	3b01      	subs	r3, #1
   89986:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8998a:	3c01      	subs	r4, #1
   8998c:	f855 3904 	ldr.w	r3, [r5], #-4
   89990:	4798      	blx	r3
   89992:	2c00      	cmp	r4, #0
   89994:	d1f9      	bne.n	8998a <__libc_fini_array+0x16>
   89996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8999a:	f002 bd77 	b.w	8c48c <_fini>
   8999e:	bf00      	nop
   899a0:	0008c49c 	.word	0x0008c49c
   899a4:	0008c498 	.word	0x0008c498

000899a8 <__fputwc>:
   899a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   899ac:	b083      	sub	sp, #12
   899ae:	4607      	mov	r7, r0
   899b0:	4688      	mov	r8, r1
   899b2:	4614      	mov	r4, r2
   899b4:	f000 fb50 	bl	8a058 <__locale_mb_cur_max>
   899b8:	2801      	cmp	r0, #1
   899ba:	d033      	beq.n	89a24 <__fputwc+0x7c>
   899bc:	4642      	mov	r2, r8
   899be:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   899c2:	a901      	add	r1, sp, #4
   899c4:	4638      	mov	r0, r7
   899c6:	f001 fd37 	bl	8b438 <_wcrtomb_r>
   899ca:	1c42      	adds	r2, r0, #1
   899cc:	4606      	mov	r6, r0
   899ce:	d022      	beq.n	89a16 <__fputwc+0x6e>
   899d0:	b390      	cbz	r0, 89a38 <__fputwc+0x90>
   899d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   899d6:	2500      	movs	r5, #0
   899d8:	f10d 0904 	add.w	r9, sp, #4
   899dc:	e008      	b.n	899f0 <__fputwc+0x48>
   899de:	6823      	ldr	r3, [r4, #0]
   899e0:	1c5a      	adds	r2, r3, #1
   899e2:	6022      	str	r2, [r4, #0]
   899e4:	7019      	strb	r1, [r3, #0]
   899e6:	3501      	adds	r5, #1
   899e8:	42b5      	cmp	r5, r6
   899ea:	d225      	bcs.n	89a38 <__fputwc+0x90>
   899ec:	f815 1009 	ldrb.w	r1, [r5, r9]
   899f0:	68a3      	ldr	r3, [r4, #8]
   899f2:	3b01      	subs	r3, #1
   899f4:	2b00      	cmp	r3, #0
   899f6:	60a3      	str	r3, [r4, #8]
   899f8:	daf1      	bge.n	899de <__fputwc+0x36>
   899fa:	69a2      	ldr	r2, [r4, #24]
   899fc:	4293      	cmp	r3, r2
   899fe:	db01      	blt.n	89a04 <__fputwc+0x5c>
   89a00:	290a      	cmp	r1, #10
   89a02:	d1ec      	bne.n	899de <__fputwc+0x36>
   89a04:	4622      	mov	r2, r4
   89a06:	4638      	mov	r0, r7
   89a08:	f001 fcbe 	bl	8b388 <__swbuf_r>
   89a0c:	1c43      	adds	r3, r0, #1
   89a0e:	d1ea      	bne.n	899e6 <__fputwc+0x3e>
   89a10:	b003      	add	sp, #12
   89a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89a16:	89a3      	ldrh	r3, [r4, #12]
   89a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89a1c:	81a3      	strh	r3, [r4, #12]
   89a1e:	b003      	add	sp, #12
   89a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89a24:	f108 33ff 	add.w	r3, r8, #4294967295
   89a28:	2bfe      	cmp	r3, #254	; 0xfe
   89a2a:	d8c7      	bhi.n	899bc <__fputwc+0x14>
   89a2c:	fa5f f188 	uxtb.w	r1, r8
   89a30:	4606      	mov	r6, r0
   89a32:	f88d 1004 	strb.w	r1, [sp, #4]
   89a36:	e7ce      	b.n	899d6 <__fputwc+0x2e>
   89a38:	4640      	mov	r0, r8
   89a3a:	b003      	add	sp, #12
   89a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00089a40 <_fputwc_r>:
   89a40:	b530      	push	{r4, r5, lr}
   89a42:	6e53      	ldr	r3, [r2, #100]	; 0x64
   89a44:	4614      	mov	r4, r2
   89a46:	f013 0f01 	tst.w	r3, #1
   89a4a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   89a4e:	b083      	sub	sp, #12
   89a50:	4605      	mov	r5, r0
   89a52:	b29a      	uxth	r2, r3
   89a54:	d101      	bne.n	89a5a <_fputwc_r+0x1a>
   89a56:	0590      	lsls	r0, r2, #22
   89a58:	d51c      	bpl.n	89a94 <_fputwc_r+0x54>
   89a5a:	0490      	lsls	r0, r2, #18
   89a5c:	d406      	bmi.n	89a6c <_fputwc_r+0x2c>
   89a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   89a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89a68:	81a3      	strh	r3, [r4, #12]
   89a6a:	6662      	str	r2, [r4, #100]	; 0x64
   89a6c:	4628      	mov	r0, r5
   89a6e:	4622      	mov	r2, r4
   89a70:	f7ff ff9a 	bl	899a8 <__fputwc>
   89a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89a76:	4605      	mov	r5, r0
   89a78:	07da      	lsls	r2, r3, #31
   89a7a:	d402      	bmi.n	89a82 <_fputwc_r+0x42>
   89a7c:	89a3      	ldrh	r3, [r4, #12]
   89a7e:	059b      	lsls	r3, r3, #22
   89a80:	d502      	bpl.n	89a88 <_fputwc_r+0x48>
   89a82:	4628      	mov	r0, r5
   89a84:	b003      	add	sp, #12
   89a86:	bd30      	pop	{r4, r5, pc}
   89a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89a8a:	f000 fb07 	bl	8a09c <__retarget_lock_release_recursive>
   89a8e:	4628      	mov	r0, r5
   89a90:	b003      	add	sp, #12
   89a92:	bd30      	pop	{r4, r5, pc}
   89a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89a96:	9101      	str	r1, [sp, #4]
   89a98:	f000 fafe 	bl	8a098 <__retarget_lock_acquire_recursive>
   89a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89aa0:	9901      	ldr	r1, [sp, #4]
   89aa2:	b29a      	uxth	r2, r3
   89aa4:	e7d9      	b.n	89a5a <_fputwc_r+0x1a>
   89aa6:	bf00      	nop

00089aa8 <_malloc_trim_r>:
   89aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89aaa:	460c      	mov	r4, r1
   89aac:	4f23      	ldr	r7, [pc, #140]	; (89b3c <_malloc_trim_r+0x94>)
   89aae:	4606      	mov	r6, r0
   89ab0:	f000 fed8 	bl	8a864 <__malloc_lock>
   89ab4:	68bb      	ldr	r3, [r7, #8]
   89ab6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   89aba:	685d      	ldr	r5, [r3, #4]
   89abc:	310f      	adds	r1, #15
   89abe:	f025 0503 	bic.w	r5, r5, #3
   89ac2:	4429      	add	r1, r5
   89ac4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   89ac8:	f021 010f 	bic.w	r1, r1, #15
   89acc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   89ad0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   89ad4:	db07      	blt.n	89ae6 <_malloc_trim_r+0x3e>
   89ad6:	2100      	movs	r1, #0
   89ad8:	4630      	mov	r0, r6
   89ada:	f001 fb81 	bl	8b1e0 <_sbrk_r>
   89ade:	68bb      	ldr	r3, [r7, #8]
   89ae0:	442b      	add	r3, r5
   89ae2:	4298      	cmp	r0, r3
   89ae4:	d004      	beq.n	89af0 <_malloc_trim_r+0x48>
   89ae6:	4630      	mov	r0, r6
   89ae8:	f000 fec2 	bl	8a870 <__malloc_unlock>
   89aec:	2000      	movs	r0, #0
   89aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89af0:	4261      	negs	r1, r4
   89af2:	4630      	mov	r0, r6
   89af4:	f001 fb74 	bl	8b1e0 <_sbrk_r>
   89af8:	3001      	adds	r0, #1
   89afa:	d00d      	beq.n	89b18 <_malloc_trim_r+0x70>
   89afc:	4b10      	ldr	r3, [pc, #64]	; (89b40 <_malloc_trim_r+0x98>)
   89afe:	68ba      	ldr	r2, [r7, #8]
   89b00:	6819      	ldr	r1, [r3, #0]
   89b02:	1b2d      	subs	r5, r5, r4
   89b04:	f045 0501 	orr.w	r5, r5, #1
   89b08:	4630      	mov	r0, r6
   89b0a:	1b09      	subs	r1, r1, r4
   89b0c:	6055      	str	r5, [r2, #4]
   89b0e:	6019      	str	r1, [r3, #0]
   89b10:	f000 feae 	bl	8a870 <__malloc_unlock>
   89b14:	2001      	movs	r0, #1
   89b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89b18:	2100      	movs	r1, #0
   89b1a:	4630      	mov	r0, r6
   89b1c:	f001 fb60 	bl	8b1e0 <_sbrk_r>
   89b20:	68ba      	ldr	r2, [r7, #8]
   89b22:	1a83      	subs	r3, r0, r2
   89b24:	2b0f      	cmp	r3, #15
   89b26:	ddde      	ble.n	89ae6 <_malloc_trim_r+0x3e>
   89b28:	4c06      	ldr	r4, [pc, #24]	; (89b44 <_malloc_trim_r+0x9c>)
   89b2a:	4905      	ldr	r1, [pc, #20]	; (89b40 <_malloc_trim_r+0x98>)
   89b2c:	6824      	ldr	r4, [r4, #0]
   89b2e:	f043 0301 	orr.w	r3, r3, #1
   89b32:	1b00      	subs	r0, r0, r4
   89b34:	6053      	str	r3, [r2, #4]
   89b36:	6008      	str	r0, [r1, #0]
   89b38:	e7d5      	b.n	89ae6 <_malloc_trim_r+0x3e>
   89b3a:	bf00      	nop
   89b3c:	20000f50 	.word	0x20000f50
   89b40:	200021ac 	.word	0x200021ac
   89b44:	20001358 	.word	0x20001358

00089b48 <_free_r>:
   89b48:	2900      	cmp	r1, #0
   89b4a:	d044      	beq.n	89bd6 <_free_r+0x8e>
   89b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89b50:	460d      	mov	r5, r1
   89b52:	4680      	mov	r8, r0
   89b54:	f000 fe86 	bl	8a864 <__malloc_lock>
   89b58:	f855 7c04 	ldr.w	r7, [r5, #-4]
   89b5c:	4969      	ldr	r1, [pc, #420]	; (89d04 <_free_r+0x1bc>)
   89b5e:	f1a5 0408 	sub.w	r4, r5, #8
   89b62:	f027 0301 	bic.w	r3, r7, #1
   89b66:	18e2      	adds	r2, r4, r3
   89b68:	688e      	ldr	r6, [r1, #8]
   89b6a:	6850      	ldr	r0, [r2, #4]
   89b6c:	42b2      	cmp	r2, r6
   89b6e:	f020 0003 	bic.w	r0, r0, #3
   89b72:	d05e      	beq.n	89c32 <_free_r+0xea>
   89b74:	07fe      	lsls	r6, r7, #31
   89b76:	6050      	str	r0, [r2, #4]
   89b78:	d40b      	bmi.n	89b92 <_free_r+0x4a>
   89b7a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   89b7e:	f101 0e08 	add.w	lr, r1, #8
   89b82:	1be4      	subs	r4, r4, r7
   89b84:	68a5      	ldr	r5, [r4, #8]
   89b86:	443b      	add	r3, r7
   89b88:	4575      	cmp	r5, lr
   89b8a:	d06d      	beq.n	89c68 <_free_r+0x120>
   89b8c:	68e7      	ldr	r7, [r4, #12]
   89b8e:	60ef      	str	r7, [r5, #12]
   89b90:	60bd      	str	r5, [r7, #8]
   89b92:	1815      	adds	r5, r2, r0
   89b94:	686d      	ldr	r5, [r5, #4]
   89b96:	07ed      	lsls	r5, r5, #31
   89b98:	d53e      	bpl.n	89c18 <_free_r+0xd0>
   89b9a:	f043 0201 	orr.w	r2, r3, #1
   89b9e:	6062      	str	r2, [r4, #4]
   89ba0:	50e3      	str	r3, [r4, r3]
   89ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   89ba6:	d217      	bcs.n	89bd8 <_free_r+0x90>
   89ba8:	2201      	movs	r2, #1
   89baa:	08db      	lsrs	r3, r3, #3
   89bac:	1098      	asrs	r0, r3, #2
   89bae:	684d      	ldr	r5, [r1, #4]
   89bb0:	4413      	add	r3, r2
   89bb2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   89bb6:	4082      	lsls	r2, r0
   89bb8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   89bbc:	432a      	orrs	r2, r5
   89bbe:	3808      	subs	r0, #8
   89bc0:	60e0      	str	r0, [r4, #12]
   89bc2:	60a7      	str	r7, [r4, #8]
   89bc4:	604a      	str	r2, [r1, #4]
   89bc6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   89bca:	60fc      	str	r4, [r7, #12]
   89bcc:	4640      	mov	r0, r8
   89bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   89bd2:	f000 be4d 	b.w	8a870 <__malloc_unlock>
   89bd6:	4770      	bx	lr
   89bd8:	0a5a      	lsrs	r2, r3, #9
   89bda:	2a04      	cmp	r2, #4
   89bdc:	d852      	bhi.n	89c84 <_free_r+0x13c>
   89bde:	099a      	lsrs	r2, r3, #6
   89be0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   89be4:	00ff      	lsls	r7, r7, #3
   89be6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   89bea:	19c8      	adds	r0, r1, r7
   89bec:	59ca      	ldr	r2, [r1, r7]
   89bee:	3808      	subs	r0, #8
   89bf0:	4290      	cmp	r0, r2
   89bf2:	d04f      	beq.n	89c94 <_free_r+0x14c>
   89bf4:	6851      	ldr	r1, [r2, #4]
   89bf6:	f021 0103 	bic.w	r1, r1, #3
   89bfa:	428b      	cmp	r3, r1
   89bfc:	d232      	bcs.n	89c64 <_free_r+0x11c>
   89bfe:	6892      	ldr	r2, [r2, #8]
   89c00:	4290      	cmp	r0, r2
   89c02:	d1f7      	bne.n	89bf4 <_free_r+0xac>
   89c04:	68c3      	ldr	r3, [r0, #12]
   89c06:	60a0      	str	r0, [r4, #8]
   89c08:	60e3      	str	r3, [r4, #12]
   89c0a:	609c      	str	r4, [r3, #8]
   89c0c:	60c4      	str	r4, [r0, #12]
   89c0e:	4640      	mov	r0, r8
   89c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   89c14:	f000 be2c 	b.w	8a870 <__malloc_unlock>
   89c18:	6895      	ldr	r5, [r2, #8]
   89c1a:	4f3b      	ldr	r7, [pc, #236]	; (89d08 <_free_r+0x1c0>)
   89c1c:	4403      	add	r3, r0
   89c1e:	42bd      	cmp	r5, r7
   89c20:	d040      	beq.n	89ca4 <_free_r+0x15c>
   89c22:	68d0      	ldr	r0, [r2, #12]
   89c24:	f043 0201 	orr.w	r2, r3, #1
   89c28:	60e8      	str	r0, [r5, #12]
   89c2a:	6085      	str	r5, [r0, #8]
   89c2c:	6062      	str	r2, [r4, #4]
   89c2e:	50e3      	str	r3, [r4, r3]
   89c30:	e7b7      	b.n	89ba2 <_free_r+0x5a>
   89c32:	07ff      	lsls	r7, r7, #31
   89c34:	4403      	add	r3, r0
   89c36:	d407      	bmi.n	89c48 <_free_r+0x100>
   89c38:	f855 5c08 	ldr.w	r5, [r5, #-8]
   89c3c:	1b64      	subs	r4, r4, r5
   89c3e:	68e2      	ldr	r2, [r4, #12]
   89c40:	68a0      	ldr	r0, [r4, #8]
   89c42:	442b      	add	r3, r5
   89c44:	60c2      	str	r2, [r0, #12]
   89c46:	6090      	str	r0, [r2, #8]
   89c48:	4a30      	ldr	r2, [pc, #192]	; (89d0c <_free_r+0x1c4>)
   89c4a:	f043 0001 	orr.w	r0, r3, #1
   89c4e:	6812      	ldr	r2, [r2, #0]
   89c50:	6060      	str	r0, [r4, #4]
   89c52:	4293      	cmp	r3, r2
   89c54:	608c      	str	r4, [r1, #8]
   89c56:	d3b9      	bcc.n	89bcc <_free_r+0x84>
   89c58:	4b2d      	ldr	r3, [pc, #180]	; (89d10 <_free_r+0x1c8>)
   89c5a:	4640      	mov	r0, r8
   89c5c:	6819      	ldr	r1, [r3, #0]
   89c5e:	f7ff ff23 	bl	89aa8 <_malloc_trim_r>
   89c62:	e7b3      	b.n	89bcc <_free_r+0x84>
   89c64:	4610      	mov	r0, r2
   89c66:	e7cd      	b.n	89c04 <_free_r+0xbc>
   89c68:	1811      	adds	r1, r2, r0
   89c6a:	6849      	ldr	r1, [r1, #4]
   89c6c:	07c9      	lsls	r1, r1, #31
   89c6e:	d444      	bmi.n	89cfa <_free_r+0x1b2>
   89c70:	6891      	ldr	r1, [r2, #8]
   89c72:	4403      	add	r3, r0
   89c74:	68d2      	ldr	r2, [r2, #12]
   89c76:	f043 0001 	orr.w	r0, r3, #1
   89c7a:	60ca      	str	r2, [r1, #12]
   89c7c:	6091      	str	r1, [r2, #8]
   89c7e:	6060      	str	r0, [r4, #4]
   89c80:	50e3      	str	r3, [r4, r3]
   89c82:	e7a3      	b.n	89bcc <_free_r+0x84>
   89c84:	2a14      	cmp	r2, #20
   89c86:	d816      	bhi.n	89cb6 <_free_r+0x16e>
   89c88:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   89c8c:	00ff      	lsls	r7, r7, #3
   89c8e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   89c92:	e7aa      	b.n	89bea <_free_r+0xa2>
   89c94:	2301      	movs	r3, #1
   89c96:	10aa      	asrs	r2, r5, #2
   89c98:	684d      	ldr	r5, [r1, #4]
   89c9a:	4093      	lsls	r3, r2
   89c9c:	432b      	orrs	r3, r5
   89c9e:	604b      	str	r3, [r1, #4]
   89ca0:	4603      	mov	r3, r0
   89ca2:	e7b0      	b.n	89c06 <_free_r+0xbe>
   89ca4:	f043 0201 	orr.w	r2, r3, #1
   89ca8:	614c      	str	r4, [r1, #20]
   89caa:	610c      	str	r4, [r1, #16]
   89cac:	60e5      	str	r5, [r4, #12]
   89cae:	60a5      	str	r5, [r4, #8]
   89cb0:	6062      	str	r2, [r4, #4]
   89cb2:	50e3      	str	r3, [r4, r3]
   89cb4:	e78a      	b.n	89bcc <_free_r+0x84>
   89cb6:	2a54      	cmp	r2, #84	; 0x54
   89cb8:	d806      	bhi.n	89cc8 <_free_r+0x180>
   89cba:	0b1a      	lsrs	r2, r3, #12
   89cbc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   89cc0:	00ff      	lsls	r7, r7, #3
   89cc2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   89cc6:	e790      	b.n	89bea <_free_r+0xa2>
   89cc8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   89ccc:	d806      	bhi.n	89cdc <_free_r+0x194>
   89cce:	0bda      	lsrs	r2, r3, #15
   89cd0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   89cd4:	00ff      	lsls	r7, r7, #3
   89cd6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   89cda:	e786      	b.n	89bea <_free_r+0xa2>
   89cdc:	f240 5054 	movw	r0, #1364	; 0x554
   89ce0:	4282      	cmp	r2, r0
   89ce2:	d806      	bhi.n	89cf2 <_free_r+0x1aa>
   89ce4:	0c9a      	lsrs	r2, r3, #18
   89ce6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   89cea:	00ff      	lsls	r7, r7, #3
   89cec:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   89cf0:	e77b      	b.n	89bea <_free_r+0xa2>
   89cf2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   89cf6:	257e      	movs	r5, #126	; 0x7e
   89cf8:	e777      	b.n	89bea <_free_r+0xa2>
   89cfa:	f043 0101 	orr.w	r1, r3, #1
   89cfe:	6061      	str	r1, [r4, #4]
   89d00:	6013      	str	r3, [r2, #0]
   89d02:	e763      	b.n	89bcc <_free_r+0x84>
   89d04:	20000f50 	.word	0x20000f50
   89d08:	20000f58 	.word	0x20000f58
   89d0c:	2000135c 	.word	0x2000135c
   89d10:	200021dc 	.word	0x200021dc

00089d14 <__sfvwrite_r>:
   89d14:	6893      	ldr	r3, [r2, #8]
   89d16:	2b00      	cmp	r3, #0
   89d18:	d071      	beq.n	89dfe <__sfvwrite_r+0xea>
   89d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89d1e:	898b      	ldrh	r3, [r1, #12]
   89d20:	b083      	sub	sp, #12
   89d22:	460c      	mov	r4, r1
   89d24:	0719      	lsls	r1, r3, #28
   89d26:	9000      	str	r0, [sp, #0]
   89d28:	4616      	mov	r6, r2
   89d2a:	d525      	bpl.n	89d78 <__sfvwrite_r+0x64>
   89d2c:	6922      	ldr	r2, [r4, #16]
   89d2e:	b31a      	cbz	r2, 89d78 <__sfvwrite_r+0x64>
   89d30:	f013 0002 	ands.w	r0, r3, #2
   89d34:	6835      	ldr	r5, [r6, #0]
   89d36:	d02b      	beq.n	89d90 <__sfvwrite_r+0x7c>
   89d38:	f04f 0900 	mov.w	r9, #0
   89d3c:	46b0      	mov	r8, r6
   89d3e:	464f      	mov	r7, r9
   89d40:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8a004 <__sfvwrite_r+0x2f0>
   89d44:	2f00      	cmp	r7, #0
   89d46:	d055      	beq.n	89df4 <__sfvwrite_r+0xe0>
   89d48:	4557      	cmp	r7, sl
   89d4a:	463b      	mov	r3, r7
   89d4c:	464a      	mov	r2, r9
   89d4e:	bf28      	it	cs
   89d50:	4653      	movcs	r3, sl
   89d52:	69e1      	ldr	r1, [r4, #28]
   89d54:	9800      	ldr	r0, [sp, #0]
   89d56:	6a66      	ldr	r6, [r4, #36]	; 0x24
   89d58:	47b0      	blx	r6
   89d5a:	2800      	cmp	r0, #0
   89d5c:	dd56      	ble.n	89e0c <__sfvwrite_r+0xf8>
   89d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89d62:	4481      	add	r9, r0
   89d64:	1a1b      	subs	r3, r3, r0
   89d66:	1a3f      	subs	r7, r7, r0
   89d68:	f8c8 3008 	str.w	r3, [r8, #8]
   89d6c:	2b00      	cmp	r3, #0
   89d6e:	d1e9      	bne.n	89d44 <__sfvwrite_r+0x30>
   89d70:	2000      	movs	r0, #0
   89d72:	b003      	add	sp, #12
   89d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d78:	4621      	mov	r1, r4
   89d7a:	9800      	ldr	r0, [sp, #0]
   89d7c:	f7fe fca0 	bl	886c0 <__swsetup_r>
   89d80:	2800      	cmp	r0, #0
   89d82:	f040 8135 	bne.w	89ff0 <__sfvwrite_r+0x2dc>
   89d86:	89a3      	ldrh	r3, [r4, #12]
   89d88:	6835      	ldr	r5, [r6, #0]
   89d8a:	f013 0002 	ands.w	r0, r3, #2
   89d8e:	d1d3      	bne.n	89d38 <__sfvwrite_r+0x24>
   89d90:	f013 0901 	ands.w	r9, r3, #1
   89d94:	d144      	bne.n	89e20 <__sfvwrite_r+0x10c>
   89d96:	464f      	mov	r7, r9
   89d98:	9601      	str	r6, [sp, #4]
   89d9a:	b337      	cbz	r7, 89dea <__sfvwrite_r+0xd6>
   89d9c:	059a      	lsls	r2, r3, #22
   89d9e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   89da2:	f140 8085 	bpl.w	89eb0 <__sfvwrite_r+0x19c>
   89da6:	4547      	cmp	r7, r8
   89da8:	46c3      	mov	fp, r8
   89daa:	f0c0 80ad 	bcc.w	89f08 <__sfvwrite_r+0x1f4>
   89dae:	f413 6f90 	tst.w	r3, #1152	; 0x480
   89db2:	f040 80ae 	bne.w	89f12 <__sfvwrite_r+0x1fe>
   89db6:	46ba      	mov	sl, r7
   89db8:	6820      	ldr	r0, [r4, #0]
   89dba:	465a      	mov	r2, fp
   89dbc:	4649      	mov	r1, r9
   89dbe:	f000 fced 	bl	8a79c <memmove>
   89dc2:	68a2      	ldr	r2, [r4, #8]
   89dc4:	6823      	ldr	r3, [r4, #0]
   89dc6:	eba2 0208 	sub.w	r2, r2, r8
   89dca:	445b      	add	r3, fp
   89dcc:	60a2      	str	r2, [r4, #8]
   89dce:	6023      	str	r3, [r4, #0]
   89dd0:	9a01      	ldr	r2, [sp, #4]
   89dd2:	44d1      	add	r9, sl
   89dd4:	6893      	ldr	r3, [r2, #8]
   89dd6:	eba7 070a 	sub.w	r7, r7, sl
   89dda:	eba3 030a 	sub.w	r3, r3, sl
   89dde:	6093      	str	r3, [r2, #8]
   89de0:	2b00      	cmp	r3, #0
   89de2:	d0c5      	beq.n	89d70 <__sfvwrite_r+0x5c>
   89de4:	89a3      	ldrh	r3, [r4, #12]
   89de6:	2f00      	cmp	r7, #0
   89de8:	d1d8      	bne.n	89d9c <__sfvwrite_r+0x88>
   89dea:	f8d5 9000 	ldr.w	r9, [r5]
   89dee:	686f      	ldr	r7, [r5, #4]
   89df0:	3508      	adds	r5, #8
   89df2:	e7d2      	b.n	89d9a <__sfvwrite_r+0x86>
   89df4:	f8d5 9000 	ldr.w	r9, [r5]
   89df8:	686f      	ldr	r7, [r5, #4]
   89dfa:	3508      	adds	r5, #8
   89dfc:	e7a2      	b.n	89d44 <__sfvwrite_r+0x30>
   89dfe:	2000      	movs	r0, #0
   89e00:	4770      	bx	lr
   89e02:	4621      	mov	r1, r4
   89e04:	9800      	ldr	r0, [sp, #0]
   89e06:	f7ff fd21 	bl	8984c <_fflush_r>
   89e0a:	b378      	cbz	r0, 89e6c <__sfvwrite_r+0x158>
   89e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89e10:	f04f 30ff 	mov.w	r0, #4294967295
   89e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89e18:	81a3      	strh	r3, [r4, #12]
   89e1a:	b003      	add	sp, #12
   89e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e20:	4681      	mov	r9, r0
   89e22:	4633      	mov	r3, r6
   89e24:	464e      	mov	r6, r9
   89e26:	46a8      	mov	r8, r5
   89e28:	469a      	mov	sl, r3
   89e2a:	464d      	mov	r5, r9
   89e2c:	b356      	cbz	r6, 89e84 <__sfvwrite_r+0x170>
   89e2e:	2800      	cmp	r0, #0
   89e30:	d032      	beq.n	89e98 <__sfvwrite_r+0x184>
   89e32:	45b1      	cmp	r9, r6
   89e34:	46cb      	mov	fp, r9
   89e36:	bf28      	it	cs
   89e38:	46b3      	movcs	fp, r6
   89e3a:	6820      	ldr	r0, [r4, #0]
   89e3c:	6923      	ldr	r3, [r4, #16]
   89e3e:	465f      	mov	r7, fp
   89e40:	4298      	cmp	r0, r3
   89e42:	6962      	ldr	r2, [r4, #20]
   89e44:	d904      	bls.n	89e50 <__sfvwrite_r+0x13c>
   89e46:	68a3      	ldr	r3, [r4, #8]
   89e48:	4413      	add	r3, r2
   89e4a:	459b      	cmp	fp, r3
   89e4c:	f300 80a8 	bgt.w	89fa0 <__sfvwrite_r+0x28c>
   89e50:	4593      	cmp	fp, r2
   89e52:	db4d      	blt.n	89ef0 <__sfvwrite_r+0x1dc>
   89e54:	4613      	mov	r3, r2
   89e56:	6a67      	ldr	r7, [r4, #36]	; 0x24
   89e58:	462a      	mov	r2, r5
   89e5a:	69e1      	ldr	r1, [r4, #28]
   89e5c:	9800      	ldr	r0, [sp, #0]
   89e5e:	47b8      	blx	r7
   89e60:	1e07      	subs	r7, r0, #0
   89e62:	ddd3      	ble.n	89e0c <__sfvwrite_r+0xf8>
   89e64:	ebb9 0907 	subs.w	r9, r9, r7
   89e68:	d0cb      	beq.n	89e02 <__sfvwrite_r+0xee>
   89e6a:	2001      	movs	r0, #1
   89e6c:	f8da 3008 	ldr.w	r3, [sl, #8]
   89e70:	443d      	add	r5, r7
   89e72:	1bdb      	subs	r3, r3, r7
   89e74:	1bf6      	subs	r6, r6, r7
   89e76:	f8ca 3008 	str.w	r3, [sl, #8]
   89e7a:	2b00      	cmp	r3, #0
   89e7c:	f43f af78 	beq.w	89d70 <__sfvwrite_r+0x5c>
   89e80:	2e00      	cmp	r6, #0
   89e82:	d1d4      	bne.n	89e2e <__sfvwrite_r+0x11a>
   89e84:	f108 0308 	add.w	r3, r8, #8
   89e88:	f853 6c04 	ldr.w	r6, [r3, #-4]
   89e8c:	4698      	mov	r8, r3
   89e8e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   89e92:	3308      	adds	r3, #8
   89e94:	2e00      	cmp	r6, #0
   89e96:	d0f7      	beq.n	89e88 <__sfvwrite_r+0x174>
   89e98:	4632      	mov	r2, r6
   89e9a:	210a      	movs	r1, #10
   89e9c:	4628      	mov	r0, r5
   89e9e:	f000 fc37 	bl	8a710 <memchr>
   89ea2:	2800      	cmp	r0, #0
   89ea4:	f000 80a1 	beq.w	89fea <__sfvwrite_r+0x2d6>
   89ea8:	3001      	adds	r0, #1
   89eaa:	eba0 0905 	sub.w	r9, r0, r5
   89eae:	e7c0      	b.n	89e32 <__sfvwrite_r+0x11e>
   89eb0:	6820      	ldr	r0, [r4, #0]
   89eb2:	6923      	ldr	r3, [r4, #16]
   89eb4:	4298      	cmp	r0, r3
   89eb6:	d802      	bhi.n	89ebe <__sfvwrite_r+0x1aa>
   89eb8:	6963      	ldr	r3, [r4, #20]
   89eba:	429f      	cmp	r7, r3
   89ebc:	d25d      	bcs.n	89f7a <__sfvwrite_r+0x266>
   89ebe:	45b8      	cmp	r8, r7
   89ec0:	bf28      	it	cs
   89ec2:	46b8      	movcs	r8, r7
   89ec4:	4649      	mov	r1, r9
   89ec6:	4642      	mov	r2, r8
   89ec8:	f000 fc68 	bl	8a79c <memmove>
   89ecc:	68a3      	ldr	r3, [r4, #8]
   89ece:	6822      	ldr	r2, [r4, #0]
   89ed0:	eba3 0308 	sub.w	r3, r3, r8
   89ed4:	4442      	add	r2, r8
   89ed6:	60a3      	str	r3, [r4, #8]
   89ed8:	6022      	str	r2, [r4, #0]
   89eda:	b10b      	cbz	r3, 89ee0 <__sfvwrite_r+0x1cc>
   89edc:	46c2      	mov	sl, r8
   89ede:	e777      	b.n	89dd0 <__sfvwrite_r+0xbc>
   89ee0:	4621      	mov	r1, r4
   89ee2:	9800      	ldr	r0, [sp, #0]
   89ee4:	f7ff fcb2 	bl	8984c <_fflush_r>
   89ee8:	2800      	cmp	r0, #0
   89eea:	d18f      	bne.n	89e0c <__sfvwrite_r+0xf8>
   89eec:	46c2      	mov	sl, r8
   89eee:	e76f      	b.n	89dd0 <__sfvwrite_r+0xbc>
   89ef0:	465a      	mov	r2, fp
   89ef2:	4629      	mov	r1, r5
   89ef4:	f000 fc52 	bl	8a79c <memmove>
   89ef8:	68a2      	ldr	r2, [r4, #8]
   89efa:	6823      	ldr	r3, [r4, #0]
   89efc:	eba2 020b 	sub.w	r2, r2, fp
   89f00:	445b      	add	r3, fp
   89f02:	60a2      	str	r2, [r4, #8]
   89f04:	6023      	str	r3, [r4, #0]
   89f06:	e7ad      	b.n	89e64 <__sfvwrite_r+0x150>
   89f08:	46b8      	mov	r8, r7
   89f0a:	46ba      	mov	sl, r7
   89f0c:	46bb      	mov	fp, r7
   89f0e:	6820      	ldr	r0, [r4, #0]
   89f10:	e753      	b.n	89dba <__sfvwrite_r+0xa6>
   89f12:	6962      	ldr	r2, [r4, #20]
   89f14:	6820      	ldr	r0, [r4, #0]
   89f16:	6921      	ldr	r1, [r4, #16]
   89f18:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   89f1c:	eba0 0a01 	sub.w	sl, r0, r1
   89f20:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   89f24:	f10a 0001 	add.w	r0, sl, #1
   89f28:	ea4f 0868 	mov.w	r8, r8, asr #1
   89f2c:	4438      	add	r0, r7
   89f2e:	4540      	cmp	r0, r8
   89f30:	4642      	mov	r2, r8
   89f32:	bf84      	itt	hi
   89f34:	4680      	movhi	r8, r0
   89f36:	4642      	movhi	r2, r8
   89f38:	055b      	lsls	r3, r3, #21
   89f3a:	d544      	bpl.n	89fc6 <__sfvwrite_r+0x2b2>
   89f3c:	4611      	mov	r1, r2
   89f3e:	9800      	ldr	r0, [sp, #0]
   89f40:	f000 f92e 	bl	8a1a0 <_malloc_r>
   89f44:	4683      	mov	fp, r0
   89f46:	2800      	cmp	r0, #0
   89f48:	d055      	beq.n	89ff6 <__sfvwrite_r+0x2e2>
   89f4a:	4652      	mov	r2, sl
   89f4c:	6921      	ldr	r1, [r4, #16]
   89f4e:	f7fc f855 	bl	85ffc <memcpy>
   89f52:	89a3      	ldrh	r3, [r4, #12]
   89f54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   89f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   89f5c:	81a3      	strh	r3, [r4, #12]
   89f5e:	eb0b 000a 	add.w	r0, fp, sl
   89f62:	eba8 030a 	sub.w	r3, r8, sl
   89f66:	f8c4 b010 	str.w	fp, [r4, #16]
   89f6a:	f8c4 8014 	str.w	r8, [r4, #20]
   89f6e:	6020      	str	r0, [r4, #0]
   89f70:	60a3      	str	r3, [r4, #8]
   89f72:	46b8      	mov	r8, r7
   89f74:	46ba      	mov	sl, r7
   89f76:	46bb      	mov	fp, r7
   89f78:	e71f      	b.n	89dba <__sfvwrite_r+0xa6>
   89f7a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   89f7e:	42ba      	cmp	r2, r7
   89f80:	bf28      	it	cs
   89f82:	463a      	movcs	r2, r7
   89f84:	fb92 f2f3 	sdiv	r2, r2, r3
   89f88:	69e1      	ldr	r1, [r4, #28]
   89f8a:	fb03 f302 	mul.w	r3, r3, r2
   89f8e:	9800      	ldr	r0, [sp, #0]
   89f90:	464a      	mov	r2, r9
   89f92:	6a66      	ldr	r6, [r4, #36]	; 0x24
   89f94:	47b0      	blx	r6
   89f96:	f1b0 0a00 	subs.w	sl, r0, #0
   89f9a:	f73f af19 	bgt.w	89dd0 <__sfvwrite_r+0xbc>
   89f9e:	e735      	b.n	89e0c <__sfvwrite_r+0xf8>
   89fa0:	461a      	mov	r2, r3
   89fa2:	4629      	mov	r1, r5
   89fa4:	9301      	str	r3, [sp, #4]
   89fa6:	f000 fbf9 	bl	8a79c <memmove>
   89faa:	6822      	ldr	r2, [r4, #0]
   89fac:	9b01      	ldr	r3, [sp, #4]
   89fae:	4621      	mov	r1, r4
   89fb0:	441a      	add	r2, r3
   89fb2:	6022      	str	r2, [r4, #0]
   89fb4:	9800      	ldr	r0, [sp, #0]
   89fb6:	f7ff fc49 	bl	8984c <_fflush_r>
   89fba:	9b01      	ldr	r3, [sp, #4]
   89fbc:	2800      	cmp	r0, #0
   89fbe:	f47f af25 	bne.w	89e0c <__sfvwrite_r+0xf8>
   89fc2:	461f      	mov	r7, r3
   89fc4:	e74e      	b.n	89e64 <__sfvwrite_r+0x150>
   89fc6:	9800      	ldr	r0, [sp, #0]
   89fc8:	f000 ff54 	bl	8ae74 <_realloc_r>
   89fcc:	4683      	mov	fp, r0
   89fce:	2800      	cmp	r0, #0
   89fd0:	d1c5      	bne.n	89f5e <__sfvwrite_r+0x24a>
   89fd2:	9d00      	ldr	r5, [sp, #0]
   89fd4:	6921      	ldr	r1, [r4, #16]
   89fd6:	4628      	mov	r0, r5
   89fd8:	f7ff fdb6 	bl	89b48 <_free_r>
   89fdc:	220c      	movs	r2, #12
   89fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89fe2:	602a      	str	r2, [r5, #0]
   89fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   89fe8:	e712      	b.n	89e10 <__sfvwrite_r+0xfc>
   89fea:	f106 0901 	add.w	r9, r6, #1
   89fee:	e720      	b.n	89e32 <__sfvwrite_r+0x11e>
   89ff0:	f04f 30ff 	mov.w	r0, #4294967295
   89ff4:	e6bd      	b.n	89d72 <__sfvwrite_r+0x5e>
   89ff6:	220c      	movs	r2, #12
   89ff8:	9900      	ldr	r1, [sp, #0]
   89ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89ffe:	600a      	str	r2, [r1, #0]
   8a000:	e706      	b.n	89e10 <__sfvwrite_r+0xfc>
   8a002:	bf00      	nop
   8a004:	7ffffc00 	.word	0x7ffffc00

0008a008 <_fwalk_reent>:
   8a008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a00c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8a010:	d01e      	beq.n	8a050 <_fwalk_reent+0x48>
   8a012:	4688      	mov	r8, r1
   8a014:	4607      	mov	r7, r0
   8a016:	f04f 0900 	mov.w	r9, #0
   8a01a:	6875      	ldr	r5, [r6, #4]
   8a01c:	68b4      	ldr	r4, [r6, #8]
   8a01e:	3d01      	subs	r5, #1
   8a020:	d410      	bmi.n	8a044 <_fwalk_reent+0x3c>
   8a022:	89a3      	ldrh	r3, [r4, #12]
   8a024:	3d01      	subs	r5, #1
   8a026:	2b01      	cmp	r3, #1
   8a028:	d908      	bls.n	8a03c <_fwalk_reent+0x34>
   8a02a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a02e:	3301      	adds	r3, #1
   8a030:	d004      	beq.n	8a03c <_fwalk_reent+0x34>
   8a032:	4621      	mov	r1, r4
   8a034:	4638      	mov	r0, r7
   8a036:	47c0      	blx	r8
   8a038:	ea49 0900 	orr.w	r9, r9, r0
   8a03c:	1c6b      	adds	r3, r5, #1
   8a03e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a042:	d1ee      	bne.n	8a022 <_fwalk_reent+0x1a>
   8a044:	6836      	ldr	r6, [r6, #0]
   8a046:	2e00      	cmp	r6, #0
   8a048:	d1e7      	bne.n	8a01a <_fwalk_reent+0x12>
   8a04a:	4648      	mov	r0, r9
   8a04c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a050:	46b1      	mov	r9, r6
   8a052:	4648      	mov	r0, r9
   8a054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008a058 <__locale_mb_cur_max>:
   8a058:	4b04      	ldr	r3, [pc, #16]	; (8a06c <__locale_mb_cur_max+0x14>)
   8a05a:	4a05      	ldr	r2, [pc, #20]	; (8a070 <__locale_mb_cur_max+0x18>)
   8a05c:	681b      	ldr	r3, [r3, #0]
   8a05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8a060:	2b00      	cmp	r3, #0
   8a062:	bf08      	it	eq
   8a064:	4613      	moveq	r3, r2
   8a066:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a06a:	4770      	bx	lr
   8a06c:	200009b0 	.word	0x200009b0
   8a070:	20000de4 	.word	0x20000de4

0008a074 <_localeconv_r>:
   8a074:	4a04      	ldr	r2, [pc, #16]	; (8a088 <_localeconv_r+0x14>)
   8a076:	4b05      	ldr	r3, [pc, #20]	; (8a08c <_localeconv_r+0x18>)
   8a078:	6812      	ldr	r2, [r2, #0]
   8a07a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8a07c:	2800      	cmp	r0, #0
   8a07e:	bf08      	it	eq
   8a080:	4618      	moveq	r0, r3
   8a082:	30f0      	adds	r0, #240	; 0xf0
   8a084:	4770      	bx	lr
   8a086:	bf00      	nop
   8a088:	200009b0 	.word	0x200009b0
   8a08c:	20000de4 	.word	0x20000de4

0008a090 <__retarget_lock_init_recursive>:
   8a090:	4770      	bx	lr
   8a092:	bf00      	nop

0008a094 <__retarget_lock_close_recursive>:
   8a094:	4770      	bx	lr
   8a096:	bf00      	nop

0008a098 <__retarget_lock_acquire_recursive>:
   8a098:	4770      	bx	lr
   8a09a:	bf00      	nop

0008a09c <__retarget_lock_release_recursive>:
   8a09c:	4770      	bx	lr
   8a09e:	bf00      	nop

0008a0a0 <__swhatbuf_r>:
   8a0a0:	b570      	push	{r4, r5, r6, lr}
   8a0a2:	460c      	mov	r4, r1
   8a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a0a8:	b090      	sub	sp, #64	; 0x40
   8a0aa:	2900      	cmp	r1, #0
   8a0ac:	4615      	mov	r5, r2
   8a0ae:	461e      	mov	r6, r3
   8a0b0:	db14      	blt.n	8a0dc <__swhatbuf_r+0x3c>
   8a0b2:	aa01      	add	r2, sp, #4
   8a0b4:	f001 fb12 	bl	8b6dc <_fstat_r>
   8a0b8:	2800      	cmp	r0, #0
   8a0ba:	db0f      	blt.n	8a0dc <__swhatbuf_r+0x3c>
   8a0bc:	9a02      	ldr	r2, [sp, #8]
   8a0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a0c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a0c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a0ca:	fab2 f282 	clz	r2, r2
   8a0ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a0d2:	0952      	lsrs	r2, r2, #5
   8a0d4:	6032      	str	r2, [r6, #0]
   8a0d6:	602b      	str	r3, [r5, #0]
   8a0d8:	b010      	add	sp, #64	; 0x40
   8a0da:	bd70      	pop	{r4, r5, r6, pc}
   8a0dc:	2300      	movs	r3, #0
   8a0de:	89a2      	ldrh	r2, [r4, #12]
   8a0e0:	6033      	str	r3, [r6, #0]
   8a0e2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8a0e6:	d004      	beq.n	8a0f2 <__swhatbuf_r+0x52>
   8a0e8:	2240      	movs	r2, #64	; 0x40
   8a0ea:	4618      	mov	r0, r3
   8a0ec:	602a      	str	r2, [r5, #0]
   8a0ee:	b010      	add	sp, #64	; 0x40
   8a0f0:	bd70      	pop	{r4, r5, r6, pc}
   8a0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a0f6:	602b      	str	r3, [r5, #0]
   8a0f8:	b010      	add	sp, #64	; 0x40
   8a0fa:	bd70      	pop	{r4, r5, r6, pc}

0008a0fc <__smakebuf_r>:
   8a0fc:	898a      	ldrh	r2, [r1, #12]
   8a0fe:	460b      	mov	r3, r1
   8a100:	0792      	lsls	r2, r2, #30
   8a102:	d506      	bpl.n	8a112 <__smakebuf_r+0x16>
   8a104:	2101      	movs	r1, #1
   8a106:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8a10a:	6159      	str	r1, [r3, #20]
   8a10c:	601a      	str	r2, [r3, #0]
   8a10e:	611a      	str	r2, [r3, #16]
   8a110:	4770      	bx	lr
   8a112:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a114:	b083      	sub	sp, #12
   8a116:	ab01      	add	r3, sp, #4
   8a118:	466a      	mov	r2, sp
   8a11a:	460c      	mov	r4, r1
   8a11c:	4606      	mov	r6, r0
   8a11e:	f7ff ffbf 	bl	8a0a0 <__swhatbuf_r>
   8a122:	9900      	ldr	r1, [sp, #0]
   8a124:	4605      	mov	r5, r0
   8a126:	4630      	mov	r0, r6
   8a128:	f000 f83a 	bl	8a1a0 <_malloc_r>
   8a12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a130:	b1d8      	cbz	r0, 8a16a <__smakebuf_r+0x6e>
   8a132:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8a136:	4f15      	ldr	r7, [pc, #84]	; (8a18c <__smakebuf_r+0x90>)
   8a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a13c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8a13e:	81a3      	strh	r3, [r4, #12]
   8a140:	6020      	str	r0, [r4, #0]
   8a142:	6120      	str	r0, [r4, #16]
   8a144:	6161      	str	r1, [r4, #20]
   8a146:	b91a      	cbnz	r2, 8a150 <__smakebuf_r+0x54>
   8a148:	432b      	orrs	r3, r5
   8a14a:	81a3      	strh	r3, [r4, #12]
   8a14c:	b003      	add	sp, #12
   8a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a150:	4630      	mov	r0, r6
   8a152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a156:	f001 fad5 	bl	8b704 <_isatty_r>
   8a15a:	b1a0      	cbz	r0, 8a186 <__smakebuf_r+0x8a>
   8a15c:	89a3      	ldrh	r3, [r4, #12]
   8a15e:	f023 0303 	bic.w	r3, r3, #3
   8a162:	f043 0301 	orr.w	r3, r3, #1
   8a166:	b21b      	sxth	r3, r3
   8a168:	e7ee      	b.n	8a148 <__smakebuf_r+0x4c>
   8a16a:	059a      	lsls	r2, r3, #22
   8a16c:	d4ee      	bmi.n	8a14c <__smakebuf_r+0x50>
   8a16e:	2101      	movs	r1, #1
   8a170:	f023 0303 	bic.w	r3, r3, #3
   8a174:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a178:	f043 0302 	orr.w	r3, r3, #2
   8a17c:	81a3      	strh	r3, [r4, #12]
   8a17e:	6161      	str	r1, [r4, #20]
   8a180:	6022      	str	r2, [r4, #0]
   8a182:	6122      	str	r2, [r4, #16]
   8a184:	e7e2      	b.n	8a14c <__smakebuf_r+0x50>
   8a186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a18a:	e7dd      	b.n	8a148 <__smakebuf_r+0x4c>
   8a18c:	000898a1 	.word	0x000898a1

0008a190 <malloc>:
   8a190:	4b02      	ldr	r3, [pc, #8]	; (8a19c <malloc+0xc>)
   8a192:	4601      	mov	r1, r0
   8a194:	6818      	ldr	r0, [r3, #0]
   8a196:	f000 b803 	b.w	8a1a0 <_malloc_r>
   8a19a:	bf00      	nop
   8a19c:	200009b0 	.word	0x200009b0

0008a1a0 <_malloc_r>:
   8a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a1a4:	f101 060b 	add.w	r6, r1, #11
   8a1a8:	2e16      	cmp	r6, #22
   8a1aa:	b083      	sub	sp, #12
   8a1ac:	4605      	mov	r5, r0
   8a1ae:	f240 809e 	bls.w	8a2ee <_malloc_r+0x14e>
   8a1b2:	f036 0607 	bics.w	r6, r6, #7
   8a1b6:	f100 80bd 	bmi.w	8a334 <_malloc_r+0x194>
   8a1ba:	42b1      	cmp	r1, r6
   8a1bc:	f200 80ba 	bhi.w	8a334 <_malloc_r+0x194>
   8a1c0:	f000 fb50 	bl	8a864 <__malloc_lock>
   8a1c4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8a1c8:	f0c0 8285 	bcc.w	8a6d6 <_malloc_r+0x536>
   8a1cc:	0a73      	lsrs	r3, r6, #9
   8a1ce:	f000 80b8 	beq.w	8a342 <_malloc_r+0x1a2>
   8a1d2:	2b04      	cmp	r3, #4
   8a1d4:	f200 816c 	bhi.w	8a4b0 <_malloc_r+0x310>
   8a1d8:	09b3      	lsrs	r3, r6, #6
   8a1da:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a1de:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8a1e2:	00c1      	lsls	r1, r0, #3
   8a1e4:	4fb8      	ldr	r7, [pc, #736]	; (8a4c8 <_malloc_r+0x328>)
   8a1e6:	4439      	add	r1, r7
   8a1e8:	684c      	ldr	r4, [r1, #4]
   8a1ea:	3908      	subs	r1, #8
   8a1ec:	42a1      	cmp	r1, r4
   8a1ee:	d106      	bne.n	8a1fe <_malloc_r+0x5e>
   8a1f0:	e00c      	b.n	8a20c <_malloc_r+0x6c>
   8a1f2:	2a00      	cmp	r2, #0
   8a1f4:	f280 80ab 	bge.w	8a34e <_malloc_r+0x1ae>
   8a1f8:	68e4      	ldr	r4, [r4, #12]
   8a1fa:	42a1      	cmp	r1, r4
   8a1fc:	d006      	beq.n	8a20c <_malloc_r+0x6c>
   8a1fe:	6863      	ldr	r3, [r4, #4]
   8a200:	f023 0303 	bic.w	r3, r3, #3
   8a204:	1b9a      	subs	r2, r3, r6
   8a206:	2a0f      	cmp	r2, #15
   8a208:	ddf3      	ble.n	8a1f2 <_malloc_r+0x52>
   8a20a:	4670      	mov	r0, lr
   8a20c:	693c      	ldr	r4, [r7, #16]
   8a20e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8a4dc <_malloc_r+0x33c>
   8a212:	4574      	cmp	r4, lr
   8a214:	f000 819e 	beq.w	8a554 <_malloc_r+0x3b4>
   8a218:	6863      	ldr	r3, [r4, #4]
   8a21a:	f023 0303 	bic.w	r3, r3, #3
   8a21e:	1b9a      	subs	r2, r3, r6
   8a220:	2a0f      	cmp	r2, #15
   8a222:	f300 8183 	bgt.w	8a52c <_malloc_r+0x38c>
   8a226:	2a00      	cmp	r2, #0
   8a228:	f8c7 e014 	str.w	lr, [r7, #20]
   8a22c:	f8c7 e010 	str.w	lr, [r7, #16]
   8a230:	f280 8091 	bge.w	8a356 <_malloc_r+0x1b6>
   8a234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a238:	f080 8154 	bcs.w	8a4e4 <_malloc_r+0x344>
   8a23c:	2201      	movs	r2, #1
   8a23e:	08db      	lsrs	r3, r3, #3
   8a240:	6879      	ldr	r1, [r7, #4]
   8a242:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8a246:	4413      	add	r3, r2
   8a248:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8a24c:	fa02 f20c 	lsl.w	r2, r2, ip
   8a250:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8a254:	430a      	orrs	r2, r1
   8a256:	f1ac 0108 	sub.w	r1, ip, #8
   8a25a:	60e1      	str	r1, [r4, #12]
   8a25c:	f8c4 8008 	str.w	r8, [r4, #8]
   8a260:	607a      	str	r2, [r7, #4]
   8a262:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8a266:	f8c8 400c 	str.w	r4, [r8, #12]
   8a26a:	2401      	movs	r4, #1
   8a26c:	1083      	asrs	r3, r0, #2
   8a26e:	409c      	lsls	r4, r3
   8a270:	4294      	cmp	r4, r2
   8a272:	d87d      	bhi.n	8a370 <_malloc_r+0x1d0>
   8a274:	4214      	tst	r4, r2
   8a276:	d106      	bne.n	8a286 <_malloc_r+0xe6>
   8a278:	f020 0003 	bic.w	r0, r0, #3
   8a27c:	0064      	lsls	r4, r4, #1
   8a27e:	4214      	tst	r4, r2
   8a280:	f100 0004 	add.w	r0, r0, #4
   8a284:	d0fa      	beq.n	8a27c <_malloc_r+0xdc>
   8a286:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8a28a:	46cc      	mov	ip, r9
   8a28c:	4680      	mov	r8, r0
   8a28e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8a292:	459c      	cmp	ip, r3
   8a294:	d107      	bne.n	8a2a6 <_malloc_r+0x106>
   8a296:	e15f      	b.n	8a558 <_malloc_r+0x3b8>
   8a298:	2a00      	cmp	r2, #0
   8a29a:	f280 816d 	bge.w	8a578 <_malloc_r+0x3d8>
   8a29e:	68db      	ldr	r3, [r3, #12]
   8a2a0:	459c      	cmp	ip, r3
   8a2a2:	f000 8159 	beq.w	8a558 <_malloc_r+0x3b8>
   8a2a6:	6859      	ldr	r1, [r3, #4]
   8a2a8:	f021 0103 	bic.w	r1, r1, #3
   8a2ac:	1b8a      	subs	r2, r1, r6
   8a2ae:	2a0f      	cmp	r2, #15
   8a2b0:	ddf2      	ble.n	8a298 <_malloc_r+0xf8>
   8a2b2:	68dc      	ldr	r4, [r3, #12]
   8a2b4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a2b8:	f046 0801 	orr.w	r8, r6, #1
   8a2bc:	4628      	mov	r0, r5
   8a2be:	441e      	add	r6, r3
   8a2c0:	f042 0501 	orr.w	r5, r2, #1
   8a2c4:	f8c3 8004 	str.w	r8, [r3, #4]
   8a2c8:	f8cc 400c 	str.w	r4, [ip, #12]
   8a2cc:	f8c4 c008 	str.w	ip, [r4, #8]
   8a2d0:	617e      	str	r6, [r7, #20]
   8a2d2:	613e      	str	r6, [r7, #16]
   8a2d4:	f8c6 e00c 	str.w	lr, [r6, #12]
   8a2d8:	f8c6 e008 	str.w	lr, [r6, #8]
   8a2dc:	6075      	str	r5, [r6, #4]
   8a2de:	505a      	str	r2, [r3, r1]
   8a2e0:	9300      	str	r3, [sp, #0]
   8a2e2:	f000 fac5 	bl	8a870 <__malloc_unlock>
   8a2e6:	9b00      	ldr	r3, [sp, #0]
   8a2e8:	f103 0408 	add.w	r4, r3, #8
   8a2ec:	e01e      	b.n	8a32c <_malloc_r+0x18c>
   8a2ee:	2910      	cmp	r1, #16
   8a2f0:	d820      	bhi.n	8a334 <_malloc_r+0x194>
   8a2f2:	f000 fab7 	bl	8a864 <__malloc_lock>
   8a2f6:	2610      	movs	r6, #16
   8a2f8:	2318      	movs	r3, #24
   8a2fa:	2002      	movs	r0, #2
   8a2fc:	4f72      	ldr	r7, [pc, #456]	; (8a4c8 <_malloc_r+0x328>)
   8a2fe:	443b      	add	r3, r7
   8a300:	685c      	ldr	r4, [r3, #4]
   8a302:	f1a3 0208 	sub.w	r2, r3, #8
   8a306:	4294      	cmp	r4, r2
   8a308:	f000 812f 	beq.w	8a56a <_malloc_r+0x3ca>
   8a30c:	6863      	ldr	r3, [r4, #4]
   8a30e:	68e1      	ldr	r1, [r4, #12]
   8a310:	f023 0303 	bic.w	r3, r3, #3
   8a314:	4423      	add	r3, r4
   8a316:	685a      	ldr	r2, [r3, #4]
   8a318:	68a6      	ldr	r6, [r4, #8]
   8a31a:	f042 0201 	orr.w	r2, r2, #1
   8a31e:	60f1      	str	r1, [r6, #12]
   8a320:	4628      	mov	r0, r5
   8a322:	608e      	str	r6, [r1, #8]
   8a324:	605a      	str	r2, [r3, #4]
   8a326:	f000 faa3 	bl	8a870 <__malloc_unlock>
   8a32a:	3408      	adds	r4, #8
   8a32c:	4620      	mov	r0, r4
   8a32e:	b003      	add	sp, #12
   8a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a334:	2400      	movs	r4, #0
   8a336:	230c      	movs	r3, #12
   8a338:	4620      	mov	r0, r4
   8a33a:	602b      	str	r3, [r5, #0]
   8a33c:	b003      	add	sp, #12
   8a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a342:	2040      	movs	r0, #64	; 0x40
   8a344:	f44f 7100 	mov.w	r1, #512	; 0x200
   8a348:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8a34c:	e74a      	b.n	8a1e4 <_malloc_r+0x44>
   8a34e:	4423      	add	r3, r4
   8a350:	685a      	ldr	r2, [r3, #4]
   8a352:	68e1      	ldr	r1, [r4, #12]
   8a354:	e7e0      	b.n	8a318 <_malloc_r+0x178>
   8a356:	4423      	add	r3, r4
   8a358:	685a      	ldr	r2, [r3, #4]
   8a35a:	4628      	mov	r0, r5
   8a35c:	f042 0201 	orr.w	r2, r2, #1
   8a360:	605a      	str	r2, [r3, #4]
   8a362:	3408      	adds	r4, #8
   8a364:	f000 fa84 	bl	8a870 <__malloc_unlock>
   8a368:	4620      	mov	r0, r4
   8a36a:	b003      	add	sp, #12
   8a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a370:	68bc      	ldr	r4, [r7, #8]
   8a372:	6863      	ldr	r3, [r4, #4]
   8a374:	f023 0803 	bic.w	r8, r3, #3
   8a378:	45b0      	cmp	r8, r6
   8a37a:	d304      	bcc.n	8a386 <_malloc_r+0x1e6>
   8a37c:	eba8 0306 	sub.w	r3, r8, r6
   8a380:	2b0f      	cmp	r3, #15
   8a382:	f300 8085 	bgt.w	8a490 <_malloc_r+0x2f0>
   8a386:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8a4e0 <_malloc_r+0x340>
   8a38a:	4b50      	ldr	r3, [pc, #320]	; (8a4cc <_malloc_r+0x32c>)
   8a38c:	f8d9 2000 	ldr.w	r2, [r9]
   8a390:	681b      	ldr	r3, [r3, #0]
   8a392:	3201      	adds	r2, #1
   8a394:	4433      	add	r3, r6
   8a396:	eb04 0a08 	add.w	sl, r4, r8
   8a39a:	f000 8154 	beq.w	8a646 <_malloc_r+0x4a6>
   8a39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8a3a2:	330f      	adds	r3, #15
   8a3a4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8a3a8:	f02b 0b0f 	bic.w	fp, fp, #15
   8a3ac:	4659      	mov	r1, fp
   8a3ae:	4628      	mov	r0, r5
   8a3b0:	f000 ff16 	bl	8b1e0 <_sbrk_r>
   8a3b4:	1c41      	adds	r1, r0, #1
   8a3b6:	4602      	mov	r2, r0
   8a3b8:	f000 80fb 	beq.w	8a5b2 <_malloc_r+0x412>
   8a3bc:	4582      	cmp	sl, r0
   8a3be:	f200 80f6 	bhi.w	8a5ae <_malloc_r+0x40e>
   8a3c2:	4b43      	ldr	r3, [pc, #268]	; (8a4d0 <_malloc_r+0x330>)
   8a3c4:	6819      	ldr	r1, [r3, #0]
   8a3c6:	4459      	add	r1, fp
   8a3c8:	6019      	str	r1, [r3, #0]
   8a3ca:	f000 814c 	beq.w	8a666 <_malloc_r+0x4c6>
   8a3ce:	f8d9 0000 	ldr.w	r0, [r9]
   8a3d2:	3001      	adds	r0, #1
   8a3d4:	bf1b      	ittet	ne
   8a3d6:	eba2 0a0a 	subne.w	sl, r2, sl
   8a3da:	4451      	addne	r1, sl
   8a3dc:	f8c9 2000 	streq.w	r2, [r9]
   8a3e0:	6019      	strne	r1, [r3, #0]
   8a3e2:	f012 0107 	ands.w	r1, r2, #7
   8a3e6:	f000 8114 	beq.w	8a612 <_malloc_r+0x472>
   8a3ea:	f1c1 0008 	rsb	r0, r1, #8
   8a3ee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8a3f2:	4402      	add	r2, r0
   8a3f4:	3108      	adds	r1, #8
   8a3f6:	eb02 090b 	add.w	r9, r2, fp
   8a3fa:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8a3fe:	eba1 0909 	sub.w	r9, r1, r9
   8a402:	4649      	mov	r1, r9
   8a404:	4628      	mov	r0, r5
   8a406:	9301      	str	r3, [sp, #4]
   8a408:	9200      	str	r2, [sp, #0]
   8a40a:	f000 fee9 	bl	8b1e0 <_sbrk_r>
   8a40e:	1c43      	adds	r3, r0, #1
   8a410:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8a414:	f000 8142 	beq.w	8a69c <_malloc_r+0x4fc>
   8a418:	1a80      	subs	r0, r0, r2
   8a41a:	4448      	add	r0, r9
   8a41c:	f040 0001 	orr.w	r0, r0, #1
   8a420:	6819      	ldr	r1, [r3, #0]
   8a422:	42bc      	cmp	r4, r7
   8a424:	4449      	add	r1, r9
   8a426:	60ba      	str	r2, [r7, #8]
   8a428:	6019      	str	r1, [r3, #0]
   8a42a:	6050      	str	r0, [r2, #4]
   8a42c:	d017      	beq.n	8a45e <_malloc_r+0x2be>
   8a42e:	f1b8 0f0f 	cmp.w	r8, #15
   8a432:	f240 80fa 	bls.w	8a62a <_malloc_r+0x48a>
   8a436:	f04f 0c05 	mov.w	ip, #5
   8a43a:	6862      	ldr	r2, [r4, #4]
   8a43c:	f1a8 000c 	sub.w	r0, r8, #12
   8a440:	f020 0007 	bic.w	r0, r0, #7
   8a444:	f002 0201 	and.w	r2, r2, #1
   8a448:	eb04 0e00 	add.w	lr, r4, r0
   8a44c:	4302      	orrs	r2, r0
   8a44e:	280f      	cmp	r0, #15
   8a450:	6062      	str	r2, [r4, #4]
   8a452:	f8ce c004 	str.w	ip, [lr, #4]
   8a456:	f8ce c008 	str.w	ip, [lr, #8]
   8a45a:	f200 8116 	bhi.w	8a68a <_malloc_r+0x4ea>
   8a45e:	4b1d      	ldr	r3, [pc, #116]	; (8a4d4 <_malloc_r+0x334>)
   8a460:	68bc      	ldr	r4, [r7, #8]
   8a462:	681a      	ldr	r2, [r3, #0]
   8a464:	4291      	cmp	r1, r2
   8a466:	bf88      	it	hi
   8a468:	6019      	strhi	r1, [r3, #0]
   8a46a:	4b1b      	ldr	r3, [pc, #108]	; (8a4d8 <_malloc_r+0x338>)
   8a46c:	681a      	ldr	r2, [r3, #0]
   8a46e:	4291      	cmp	r1, r2
   8a470:	6862      	ldr	r2, [r4, #4]
   8a472:	bf88      	it	hi
   8a474:	6019      	strhi	r1, [r3, #0]
   8a476:	f022 0203 	bic.w	r2, r2, #3
   8a47a:	4296      	cmp	r6, r2
   8a47c:	eba2 0306 	sub.w	r3, r2, r6
   8a480:	d801      	bhi.n	8a486 <_malloc_r+0x2e6>
   8a482:	2b0f      	cmp	r3, #15
   8a484:	dc04      	bgt.n	8a490 <_malloc_r+0x2f0>
   8a486:	4628      	mov	r0, r5
   8a488:	f000 f9f2 	bl	8a870 <__malloc_unlock>
   8a48c:	2400      	movs	r4, #0
   8a48e:	e74d      	b.n	8a32c <_malloc_r+0x18c>
   8a490:	f046 0201 	orr.w	r2, r6, #1
   8a494:	f043 0301 	orr.w	r3, r3, #1
   8a498:	4426      	add	r6, r4
   8a49a:	6062      	str	r2, [r4, #4]
   8a49c:	4628      	mov	r0, r5
   8a49e:	60be      	str	r6, [r7, #8]
   8a4a0:	3408      	adds	r4, #8
   8a4a2:	6073      	str	r3, [r6, #4]
   8a4a4:	f000 f9e4 	bl	8a870 <__malloc_unlock>
   8a4a8:	4620      	mov	r0, r4
   8a4aa:	b003      	add	sp, #12
   8a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a4b0:	2b14      	cmp	r3, #20
   8a4b2:	d970      	bls.n	8a596 <_malloc_r+0x3f6>
   8a4b4:	2b54      	cmp	r3, #84	; 0x54
   8a4b6:	f200 80a2 	bhi.w	8a5fe <_malloc_r+0x45e>
   8a4ba:	0b33      	lsrs	r3, r6, #12
   8a4bc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8a4c0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8a4c4:	00c1      	lsls	r1, r0, #3
   8a4c6:	e68d      	b.n	8a1e4 <_malloc_r+0x44>
   8a4c8:	20000f50 	.word	0x20000f50
   8a4cc:	200021dc 	.word	0x200021dc
   8a4d0:	200021ac 	.word	0x200021ac
   8a4d4:	200021d4 	.word	0x200021d4
   8a4d8:	200021d8 	.word	0x200021d8
   8a4dc:	20000f58 	.word	0x20000f58
   8a4e0:	20001358 	.word	0x20001358
   8a4e4:	0a5a      	lsrs	r2, r3, #9
   8a4e6:	2a04      	cmp	r2, #4
   8a4e8:	d95b      	bls.n	8a5a2 <_malloc_r+0x402>
   8a4ea:	2a14      	cmp	r2, #20
   8a4ec:	f200 80ae 	bhi.w	8a64c <_malloc_r+0x4ac>
   8a4f0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8a4f4:	00c9      	lsls	r1, r1, #3
   8a4f6:	325b      	adds	r2, #91	; 0x5b
   8a4f8:	eb07 0c01 	add.w	ip, r7, r1
   8a4fc:	5879      	ldr	r1, [r7, r1]
   8a4fe:	f1ac 0c08 	sub.w	ip, ip, #8
   8a502:	458c      	cmp	ip, r1
   8a504:	f000 8088 	beq.w	8a618 <_malloc_r+0x478>
   8a508:	684a      	ldr	r2, [r1, #4]
   8a50a:	f022 0203 	bic.w	r2, r2, #3
   8a50e:	4293      	cmp	r3, r2
   8a510:	d273      	bcs.n	8a5fa <_malloc_r+0x45a>
   8a512:	6889      	ldr	r1, [r1, #8]
   8a514:	458c      	cmp	ip, r1
   8a516:	d1f7      	bne.n	8a508 <_malloc_r+0x368>
   8a518:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8a51c:	687a      	ldr	r2, [r7, #4]
   8a51e:	60e3      	str	r3, [r4, #12]
   8a520:	f8c4 c008 	str.w	ip, [r4, #8]
   8a524:	609c      	str	r4, [r3, #8]
   8a526:	f8cc 400c 	str.w	r4, [ip, #12]
   8a52a:	e69e      	b.n	8a26a <_malloc_r+0xca>
   8a52c:	f046 0c01 	orr.w	ip, r6, #1
   8a530:	f042 0101 	orr.w	r1, r2, #1
   8a534:	4426      	add	r6, r4
   8a536:	f8c4 c004 	str.w	ip, [r4, #4]
   8a53a:	4628      	mov	r0, r5
   8a53c:	617e      	str	r6, [r7, #20]
   8a53e:	613e      	str	r6, [r7, #16]
   8a540:	f8c6 e00c 	str.w	lr, [r6, #12]
   8a544:	f8c6 e008 	str.w	lr, [r6, #8]
   8a548:	6071      	str	r1, [r6, #4]
   8a54a:	50e2      	str	r2, [r4, r3]
   8a54c:	f000 f990 	bl	8a870 <__malloc_unlock>
   8a550:	3408      	adds	r4, #8
   8a552:	e6eb      	b.n	8a32c <_malloc_r+0x18c>
   8a554:	687a      	ldr	r2, [r7, #4]
   8a556:	e688      	b.n	8a26a <_malloc_r+0xca>
   8a558:	f108 0801 	add.w	r8, r8, #1
   8a55c:	f018 0f03 	tst.w	r8, #3
   8a560:	f10c 0c08 	add.w	ip, ip, #8
   8a564:	f47f ae93 	bne.w	8a28e <_malloc_r+0xee>
   8a568:	e02d      	b.n	8a5c6 <_malloc_r+0x426>
   8a56a:	68dc      	ldr	r4, [r3, #12]
   8a56c:	42a3      	cmp	r3, r4
   8a56e:	bf08      	it	eq
   8a570:	3002      	addeq	r0, #2
   8a572:	f43f ae4b 	beq.w	8a20c <_malloc_r+0x6c>
   8a576:	e6c9      	b.n	8a30c <_malloc_r+0x16c>
   8a578:	461c      	mov	r4, r3
   8a57a:	4419      	add	r1, r3
   8a57c:	684a      	ldr	r2, [r1, #4]
   8a57e:	68db      	ldr	r3, [r3, #12]
   8a580:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8a584:	f042 0201 	orr.w	r2, r2, #1
   8a588:	604a      	str	r2, [r1, #4]
   8a58a:	4628      	mov	r0, r5
   8a58c:	60f3      	str	r3, [r6, #12]
   8a58e:	609e      	str	r6, [r3, #8]
   8a590:	f000 f96e 	bl	8a870 <__malloc_unlock>
   8a594:	e6ca      	b.n	8a32c <_malloc_r+0x18c>
   8a596:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8a59a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8a59e:	00c1      	lsls	r1, r0, #3
   8a5a0:	e620      	b.n	8a1e4 <_malloc_r+0x44>
   8a5a2:	099a      	lsrs	r2, r3, #6
   8a5a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8a5a8:	00c9      	lsls	r1, r1, #3
   8a5aa:	3238      	adds	r2, #56	; 0x38
   8a5ac:	e7a4      	b.n	8a4f8 <_malloc_r+0x358>
   8a5ae:	42bc      	cmp	r4, r7
   8a5b0:	d054      	beq.n	8a65c <_malloc_r+0x4bc>
   8a5b2:	68bc      	ldr	r4, [r7, #8]
   8a5b4:	6862      	ldr	r2, [r4, #4]
   8a5b6:	f022 0203 	bic.w	r2, r2, #3
   8a5ba:	e75e      	b.n	8a47a <_malloc_r+0x2da>
   8a5bc:	f859 3908 	ldr.w	r3, [r9], #-8
   8a5c0:	4599      	cmp	r9, r3
   8a5c2:	f040 8086 	bne.w	8a6d2 <_malloc_r+0x532>
   8a5c6:	f010 0f03 	tst.w	r0, #3
   8a5ca:	f100 30ff 	add.w	r0, r0, #4294967295
   8a5ce:	d1f5      	bne.n	8a5bc <_malloc_r+0x41c>
   8a5d0:	687b      	ldr	r3, [r7, #4]
   8a5d2:	ea23 0304 	bic.w	r3, r3, r4
   8a5d6:	607b      	str	r3, [r7, #4]
   8a5d8:	0064      	lsls	r4, r4, #1
   8a5da:	429c      	cmp	r4, r3
   8a5dc:	f63f aec8 	bhi.w	8a370 <_malloc_r+0x1d0>
   8a5e0:	2c00      	cmp	r4, #0
   8a5e2:	f43f aec5 	beq.w	8a370 <_malloc_r+0x1d0>
   8a5e6:	421c      	tst	r4, r3
   8a5e8:	4640      	mov	r0, r8
   8a5ea:	f47f ae4c 	bne.w	8a286 <_malloc_r+0xe6>
   8a5ee:	0064      	lsls	r4, r4, #1
   8a5f0:	421c      	tst	r4, r3
   8a5f2:	f100 0004 	add.w	r0, r0, #4
   8a5f6:	d0fa      	beq.n	8a5ee <_malloc_r+0x44e>
   8a5f8:	e645      	b.n	8a286 <_malloc_r+0xe6>
   8a5fa:	468c      	mov	ip, r1
   8a5fc:	e78c      	b.n	8a518 <_malloc_r+0x378>
   8a5fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a602:	d815      	bhi.n	8a630 <_malloc_r+0x490>
   8a604:	0bf3      	lsrs	r3, r6, #15
   8a606:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8a60a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8a60e:	00c1      	lsls	r1, r0, #3
   8a610:	e5e8      	b.n	8a1e4 <_malloc_r+0x44>
   8a612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8a616:	e6ee      	b.n	8a3f6 <_malloc_r+0x256>
   8a618:	2101      	movs	r1, #1
   8a61a:	687b      	ldr	r3, [r7, #4]
   8a61c:	1092      	asrs	r2, r2, #2
   8a61e:	fa01 f202 	lsl.w	r2, r1, r2
   8a622:	431a      	orrs	r2, r3
   8a624:	607a      	str	r2, [r7, #4]
   8a626:	4663      	mov	r3, ip
   8a628:	e779      	b.n	8a51e <_malloc_r+0x37e>
   8a62a:	2301      	movs	r3, #1
   8a62c:	6053      	str	r3, [r2, #4]
   8a62e:	e72a      	b.n	8a486 <_malloc_r+0x2e6>
   8a630:	f240 5254 	movw	r2, #1364	; 0x554
   8a634:	4293      	cmp	r3, r2
   8a636:	d822      	bhi.n	8a67e <_malloc_r+0x4de>
   8a638:	0cb3      	lsrs	r3, r6, #18
   8a63a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8a63e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8a642:	00c1      	lsls	r1, r0, #3
   8a644:	e5ce      	b.n	8a1e4 <_malloc_r+0x44>
   8a646:	f103 0b10 	add.w	fp, r3, #16
   8a64a:	e6af      	b.n	8a3ac <_malloc_r+0x20c>
   8a64c:	2a54      	cmp	r2, #84	; 0x54
   8a64e:	d829      	bhi.n	8a6a4 <_malloc_r+0x504>
   8a650:	0b1a      	lsrs	r2, r3, #12
   8a652:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8a656:	00c9      	lsls	r1, r1, #3
   8a658:	326e      	adds	r2, #110	; 0x6e
   8a65a:	e74d      	b.n	8a4f8 <_malloc_r+0x358>
   8a65c:	4b20      	ldr	r3, [pc, #128]	; (8a6e0 <_malloc_r+0x540>)
   8a65e:	6819      	ldr	r1, [r3, #0]
   8a660:	4459      	add	r1, fp
   8a662:	6019      	str	r1, [r3, #0]
   8a664:	e6b3      	b.n	8a3ce <_malloc_r+0x22e>
   8a666:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8a66a:	2800      	cmp	r0, #0
   8a66c:	f47f aeaf 	bne.w	8a3ce <_malloc_r+0x22e>
   8a670:	eb08 030b 	add.w	r3, r8, fp
   8a674:	68ba      	ldr	r2, [r7, #8]
   8a676:	f043 0301 	orr.w	r3, r3, #1
   8a67a:	6053      	str	r3, [r2, #4]
   8a67c:	e6ef      	b.n	8a45e <_malloc_r+0x2be>
   8a67e:	207f      	movs	r0, #127	; 0x7f
   8a680:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8a684:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8a688:	e5ac      	b.n	8a1e4 <_malloc_r+0x44>
   8a68a:	f104 0108 	add.w	r1, r4, #8
   8a68e:	4628      	mov	r0, r5
   8a690:	9300      	str	r3, [sp, #0]
   8a692:	f7ff fa59 	bl	89b48 <_free_r>
   8a696:	9b00      	ldr	r3, [sp, #0]
   8a698:	6819      	ldr	r1, [r3, #0]
   8a69a:	e6e0      	b.n	8a45e <_malloc_r+0x2be>
   8a69c:	2001      	movs	r0, #1
   8a69e:	f04f 0900 	mov.w	r9, #0
   8a6a2:	e6bd      	b.n	8a420 <_malloc_r+0x280>
   8a6a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8a6a8:	d805      	bhi.n	8a6b6 <_malloc_r+0x516>
   8a6aa:	0bda      	lsrs	r2, r3, #15
   8a6ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8a6b0:	00c9      	lsls	r1, r1, #3
   8a6b2:	3277      	adds	r2, #119	; 0x77
   8a6b4:	e720      	b.n	8a4f8 <_malloc_r+0x358>
   8a6b6:	f240 5154 	movw	r1, #1364	; 0x554
   8a6ba:	428a      	cmp	r2, r1
   8a6bc:	d805      	bhi.n	8a6ca <_malloc_r+0x52a>
   8a6be:	0c9a      	lsrs	r2, r3, #18
   8a6c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8a6c4:	00c9      	lsls	r1, r1, #3
   8a6c6:	327c      	adds	r2, #124	; 0x7c
   8a6c8:	e716      	b.n	8a4f8 <_malloc_r+0x358>
   8a6ca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8a6ce:	227e      	movs	r2, #126	; 0x7e
   8a6d0:	e712      	b.n	8a4f8 <_malloc_r+0x358>
   8a6d2:	687b      	ldr	r3, [r7, #4]
   8a6d4:	e780      	b.n	8a5d8 <_malloc_r+0x438>
   8a6d6:	08f0      	lsrs	r0, r6, #3
   8a6d8:	f106 0308 	add.w	r3, r6, #8
   8a6dc:	e60e      	b.n	8a2fc <_malloc_r+0x15c>
   8a6de:	bf00      	nop
   8a6e0:	200021ac 	.word	0x200021ac

0008a6e4 <__ascii_mbtowc>:
   8a6e4:	b082      	sub	sp, #8
   8a6e6:	b149      	cbz	r1, 8a6fc <__ascii_mbtowc+0x18>
   8a6e8:	b15a      	cbz	r2, 8a702 <__ascii_mbtowc+0x1e>
   8a6ea:	b16b      	cbz	r3, 8a708 <__ascii_mbtowc+0x24>
   8a6ec:	7813      	ldrb	r3, [r2, #0]
   8a6ee:	600b      	str	r3, [r1, #0]
   8a6f0:	7812      	ldrb	r2, [r2, #0]
   8a6f2:	1c10      	adds	r0, r2, #0
   8a6f4:	bf18      	it	ne
   8a6f6:	2001      	movne	r0, #1
   8a6f8:	b002      	add	sp, #8
   8a6fa:	4770      	bx	lr
   8a6fc:	a901      	add	r1, sp, #4
   8a6fe:	2a00      	cmp	r2, #0
   8a700:	d1f3      	bne.n	8a6ea <__ascii_mbtowc+0x6>
   8a702:	4610      	mov	r0, r2
   8a704:	b002      	add	sp, #8
   8a706:	4770      	bx	lr
   8a708:	f06f 0001 	mvn.w	r0, #1
   8a70c:	e7f4      	b.n	8a6f8 <__ascii_mbtowc+0x14>
   8a70e:	bf00      	nop

0008a710 <memchr>:
   8a710:	0783      	lsls	r3, r0, #30
   8a712:	b470      	push	{r4, r5, r6}
   8a714:	b2cd      	uxtb	r5, r1
   8a716:	d03d      	beq.n	8a794 <memchr+0x84>
   8a718:	1e54      	subs	r4, r2, #1
   8a71a:	b30a      	cbz	r2, 8a760 <memchr+0x50>
   8a71c:	7803      	ldrb	r3, [r0, #0]
   8a71e:	42ab      	cmp	r3, r5
   8a720:	d01f      	beq.n	8a762 <memchr+0x52>
   8a722:	1c43      	adds	r3, r0, #1
   8a724:	e005      	b.n	8a732 <memchr+0x22>
   8a726:	f114 34ff 	adds.w	r4, r4, #4294967295
   8a72a:	d319      	bcc.n	8a760 <memchr+0x50>
   8a72c:	7802      	ldrb	r2, [r0, #0]
   8a72e:	42aa      	cmp	r2, r5
   8a730:	d017      	beq.n	8a762 <memchr+0x52>
   8a732:	f013 0f03 	tst.w	r3, #3
   8a736:	4618      	mov	r0, r3
   8a738:	f103 0301 	add.w	r3, r3, #1
   8a73c:	d1f3      	bne.n	8a726 <memchr+0x16>
   8a73e:	2c03      	cmp	r4, #3
   8a740:	d811      	bhi.n	8a766 <memchr+0x56>
   8a742:	b34c      	cbz	r4, 8a798 <memchr+0x88>
   8a744:	7803      	ldrb	r3, [r0, #0]
   8a746:	42ab      	cmp	r3, r5
   8a748:	d00b      	beq.n	8a762 <memchr+0x52>
   8a74a:	4404      	add	r4, r0
   8a74c:	1c43      	adds	r3, r0, #1
   8a74e:	e002      	b.n	8a756 <memchr+0x46>
   8a750:	7802      	ldrb	r2, [r0, #0]
   8a752:	42aa      	cmp	r2, r5
   8a754:	d005      	beq.n	8a762 <memchr+0x52>
   8a756:	429c      	cmp	r4, r3
   8a758:	4618      	mov	r0, r3
   8a75a:	f103 0301 	add.w	r3, r3, #1
   8a75e:	d1f7      	bne.n	8a750 <memchr+0x40>
   8a760:	2000      	movs	r0, #0
   8a762:	bc70      	pop	{r4, r5, r6}
   8a764:	4770      	bx	lr
   8a766:	0209      	lsls	r1, r1, #8
   8a768:	b289      	uxth	r1, r1
   8a76a:	4329      	orrs	r1, r5
   8a76c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8a770:	6803      	ldr	r3, [r0, #0]
   8a772:	4606      	mov	r6, r0
   8a774:	404b      	eors	r3, r1
   8a776:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8a77a:	ea22 0303 	bic.w	r3, r2, r3
   8a77e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8a782:	f100 0004 	add.w	r0, r0, #4
   8a786:	d103      	bne.n	8a790 <memchr+0x80>
   8a788:	3c04      	subs	r4, #4
   8a78a:	2c03      	cmp	r4, #3
   8a78c:	d8f0      	bhi.n	8a770 <memchr+0x60>
   8a78e:	e7d8      	b.n	8a742 <memchr+0x32>
   8a790:	4630      	mov	r0, r6
   8a792:	e7d7      	b.n	8a744 <memchr+0x34>
   8a794:	4614      	mov	r4, r2
   8a796:	e7d2      	b.n	8a73e <memchr+0x2e>
   8a798:	4620      	mov	r0, r4
   8a79a:	e7e2      	b.n	8a762 <memchr+0x52>

0008a79c <memmove>:
   8a79c:	4288      	cmp	r0, r1
   8a79e:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a7a0:	d90d      	bls.n	8a7be <memmove+0x22>
   8a7a2:	188b      	adds	r3, r1, r2
   8a7a4:	4298      	cmp	r0, r3
   8a7a6:	d20a      	bcs.n	8a7be <memmove+0x22>
   8a7a8:	1884      	adds	r4, r0, r2
   8a7aa:	2a00      	cmp	r2, #0
   8a7ac:	d051      	beq.n	8a852 <memmove+0xb6>
   8a7ae:	4622      	mov	r2, r4
   8a7b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8a7b4:	4299      	cmp	r1, r3
   8a7b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8a7ba:	d1f9      	bne.n	8a7b0 <memmove+0x14>
   8a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a7be:	2a0f      	cmp	r2, #15
   8a7c0:	d948      	bls.n	8a854 <memmove+0xb8>
   8a7c2:	ea41 0300 	orr.w	r3, r1, r0
   8a7c6:	079b      	lsls	r3, r3, #30
   8a7c8:	d146      	bne.n	8a858 <memmove+0xbc>
   8a7ca:	4615      	mov	r5, r2
   8a7cc:	f100 0410 	add.w	r4, r0, #16
   8a7d0:	f101 0310 	add.w	r3, r1, #16
   8a7d4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8a7d8:	3d10      	subs	r5, #16
   8a7da:	f844 6c10 	str.w	r6, [r4, #-16]
   8a7de:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8a7e2:	2d0f      	cmp	r5, #15
   8a7e4:	f844 6c0c 	str.w	r6, [r4, #-12]
   8a7e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8a7ec:	f104 0410 	add.w	r4, r4, #16
   8a7f0:	f844 6c18 	str.w	r6, [r4, #-24]
   8a7f4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a7f8:	f103 0310 	add.w	r3, r3, #16
   8a7fc:	f844 6c14 	str.w	r6, [r4, #-20]
   8a800:	d8e8      	bhi.n	8a7d4 <memmove+0x38>
   8a802:	f1a2 0310 	sub.w	r3, r2, #16
   8a806:	f023 030f 	bic.w	r3, r3, #15
   8a80a:	f002 0e0f 	and.w	lr, r2, #15
   8a80e:	3310      	adds	r3, #16
   8a810:	f1be 0f03 	cmp.w	lr, #3
   8a814:	4419      	add	r1, r3
   8a816:	4403      	add	r3, r0
   8a818:	d921      	bls.n	8a85e <memmove+0xc2>
   8a81a:	460e      	mov	r6, r1
   8a81c:	4674      	mov	r4, lr
   8a81e:	1f1d      	subs	r5, r3, #4
   8a820:	f856 7b04 	ldr.w	r7, [r6], #4
   8a824:	3c04      	subs	r4, #4
   8a826:	2c03      	cmp	r4, #3
   8a828:	f845 7f04 	str.w	r7, [r5, #4]!
   8a82c:	d8f8      	bhi.n	8a820 <memmove+0x84>
   8a82e:	f1ae 0404 	sub.w	r4, lr, #4
   8a832:	f024 0403 	bic.w	r4, r4, #3
   8a836:	3404      	adds	r4, #4
   8a838:	4421      	add	r1, r4
   8a83a:	4423      	add	r3, r4
   8a83c:	f002 0203 	and.w	r2, r2, #3
   8a840:	b162      	cbz	r2, 8a85c <memmove+0xc0>
   8a842:	3b01      	subs	r3, #1
   8a844:	440a      	add	r2, r1
   8a846:	f811 4b01 	ldrb.w	r4, [r1], #1
   8a84a:	428a      	cmp	r2, r1
   8a84c:	f803 4f01 	strb.w	r4, [r3, #1]!
   8a850:	d1f9      	bne.n	8a846 <memmove+0xaa>
   8a852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a854:	4603      	mov	r3, r0
   8a856:	e7f3      	b.n	8a840 <memmove+0xa4>
   8a858:	4603      	mov	r3, r0
   8a85a:	e7f2      	b.n	8a842 <memmove+0xa6>
   8a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a85e:	4672      	mov	r2, lr
   8a860:	e7ee      	b.n	8a840 <memmove+0xa4>
   8a862:	bf00      	nop

0008a864 <__malloc_lock>:
   8a864:	4801      	ldr	r0, [pc, #4]	; (8a86c <__malloc_lock+0x8>)
   8a866:	f7ff bc17 	b.w	8a098 <__retarget_lock_acquire_recursive>
   8a86a:	bf00      	nop
   8a86c:	200026cc 	.word	0x200026cc

0008a870 <__malloc_unlock>:
   8a870:	4801      	ldr	r0, [pc, #4]	; (8a878 <__malloc_unlock+0x8>)
   8a872:	f7ff bc13 	b.w	8a09c <__retarget_lock_release_recursive>
   8a876:	bf00      	nop
   8a878:	200026cc 	.word	0x200026cc

0008a87c <_Balloc>:
   8a87c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a87e:	b570      	push	{r4, r5, r6, lr}
   8a880:	4605      	mov	r5, r0
   8a882:	460c      	mov	r4, r1
   8a884:	b14b      	cbz	r3, 8a89a <_Balloc+0x1e>
   8a886:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8a88a:	b180      	cbz	r0, 8a8ae <_Balloc+0x32>
   8a88c:	6802      	ldr	r2, [r0, #0]
   8a88e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8a892:	2300      	movs	r3, #0
   8a894:	6103      	str	r3, [r0, #16]
   8a896:	60c3      	str	r3, [r0, #12]
   8a898:	bd70      	pop	{r4, r5, r6, pc}
   8a89a:	2221      	movs	r2, #33	; 0x21
   8a89c:	2104      	movs	r1, #4
   8a89e:	f000 fe79 	bl	8b594 <_calloc_r>
   8a8a2:	64e8      	str	r0, [r5, #76]	; 0x4c
   8a8a4:	4603      	mov	r3, r0
   8a8a6:	2800      	cmp	r0, #0
   8a8a8:	d1ed      	bne.n	8a886 <_Balloc+0xa>
   8a8aa:	2000      	movs	r0, #0
   8a8ac:	bd70      	pop	{r4, r5, r6, pc}
   8a8ae:	2101      	movs	r1, #1
   8a8b0:	fa01 f604 	lsl.w	r6, r1, r4
   8a8b4:	1d72      	adds	r2, r6, #5
   8a8b6:	4628      	mov	r0, r5
   8a8b8:	0092      	lsls	r2, r2, #2
   8a8ba:	f000 fe6b 	bl	8b594 <_calloc_r>
   8a8be:	2800      	cmp	r0, #0
   8a8c0:	d0f3      	beq.n	8a8aa <_Balloc+0x2e>
   8a8c2:	6044      	str	r4, [r0, #4]
   8a8c4:	6086      	str	r6, [r0, #8]
   8a8c6:	e7e4      	b.n	8a892 <_Balloc+0x16>

0008a8c8 <_Bfree>:
   8a8c8:	b131      	cbz	r1, 8a8d8 <_Bfree+0x10>
   8a8ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a8cc:	684a      	ldr	r2, [r1, #4]
   8a8ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8a8d2:	6008      	str	r0, [r1, #0]
   8a8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8a8d8:	4770      	bx	lr
   8a8da:	bf00      	nop

0008a8dc <__multadd>:
   8a8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a8de:	460c      	mov	r4, r1
   8a8e0:	4605      	mov	r5, r0
   8a8e2:	f04f 0e00 	mov.w	lr, #0
   8a8e6:	690e      	ldr	r6, [r1, #16]
   8a8e8:	b083      	sub	sp, #12
   8a8ea:	f101 0714 	add.w	r7, r1, #20
   8a8ee:	6838      	ldr	r0, [r7, #0]
   8a8f0:	f10e 0e01 	add.w	lr, lr, #1
   8a8f4:	b281      	uxth	r1, r0
   8a8f6:	fb02 3301 	mla	r3, r2, r1, r3
   8a8fa:	0c01      	lsrs	r1, r0, #16
   8a8fc:	0c18      	lsrs	r0, r3, #16
   8a8fe:	fb02 0101 	mla	r1, r2, r1, r0
   8a902:	b29b      	uxth	r3, r3
   8a904:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8a908:	4576      	cmp	r6, lr
   8a90a:	f847 3b04 	str.w	r3, [r7], #4
   8a90e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8a912:	dcec      	bgt.n	8a8ee <__multadd+0x12>
   8a914:	b13b      	cbz	r3, 8a926 <__multadd+0x4a>
   8a916:	68a2      	ldr	r2, [r4, #8]
   8a918:	4296      	cmp	r6, r2
   8a91a:	da07      	bge.n	8a92c <__multadd+0x50>
   8a91c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8a920:	3601      	adds	r6, #1
   8a922:	6153      	str	r3, [r2, #20]
   8a924:	6126      	str	r6, [r4, #16]
   8a926:	4620      	mov	r0, r4
   8a928:	b003      	add	sp, #12
   8a92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a92c:	6861      	ldr	r1, [r4, #4]
   8a92e:	4628      	mov	r0, r5
   8a930:	3101      	adds	r1, #1
   8a932:	9301      	str	r3, [sp, #4]
   8a934:	f7ff ffa2 	bl	8a87c <_Balloc>
   8a938:	4607      	mov	r7, r0
   8a93a:	6922      	ldr	r2, [r4, #16]
   8a93c:	f104 010c 	add.w	r1, r4, #12
   8a940:	3202      	adds	r2, #2
   8a942:	0092      	lsls	r2, r2, #2
   8a944:	300c      	adds	r0, #12
   8a946:	f7fb fb59 	bl	85ffc <memcpy>
   8a94a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8a94c:	6861      	ldr	r1, [r4, #4]
   8a94e:	9b01      	ldr	r3, [sp, #4]
   8a950:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8a954:	6020      	str	r0, [r4, #0]
   8a956:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8a95a:	463c      	mov	r4, r7
   8a95c:	e7de      	b.n	8a91c <__multadd+0x40>
   8a95e:	bf00      	nop

0008a960 <__hi0bits>:
   8a960:	0c02      	lsrs	r2, r0, #16
   8a962:	0412      	lsls	r2, r2, #16
   8a964:	4603      	mov	r3, r0
   8a966:	b9b2      	cbnz	r2, 8a996 <__hi0bits+0x36>
   8a968:	0403      	lsls	r3, r0, #16
   8a96a:	2010      	movs	r0, #16
   8a96c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a970:	bf04      	itt	eq
   8a972:	021b      	lsleq	r3, r3, #8
   8a974:	3008      	addeq	r0, #8
   8a976:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a97a:	bf04      	itt	eq
   8a97c:	011b      	lsleq	r3, r3, #4
   8a97e:	3004      	addeq	r0, #4
   8a980:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a984:	bf04      	itt	eq
   8a986:	009b      	lsleq	r3, r3, #2
   8a988:	3002      	addeq	r0, #2
   8a98a:	2b00      	cmp	r3, #0
   8a98c:	db02      	blt.n	8a994 <__hi0bits+0x34>
   8a98e:	005b      	lsls	r3, r3, #1
   8a990:	d403      	bmi.n	8a99a <__hi0bits+0x3a>
   8a992:	2020      	movs	r0, #32
   8a994:	4770      	bx	lr
   8a996:	2000      	movs	r0, #0
   8a998:	e7e8      	b.n	8a96c <__hi0bits+0xc>
   8a99a:	3001      	adds	r0, #1
   8a99c:	4770      	bx	lr
   8a99e:	bf00      	nop

0008a9a0 <__lo0bits>:
   8a9a0:	6803      	ldr	r3, [r0, #0]
   8a9a2:	4601      	mov	r1, r0
   8a9a4:	f013 0207 	ands.w	r2, r3, #7
   8a9a8:	d007      	beq.n	8a9ba <__lo0bits+0x1a>
   8a9aa:	07da      	lsls	r2, r3, #31
   8a9ac:	d421      	bmi.n	8a9f2 <__lo0bits+0x52>
   8a9ae:	0798      	lsls	r0, r3, #30
   8a9b0:	d421      	bmi.n	8a9f6 <__lo0bits+0x56>
   8a9b2:	089b      	lsrs	r3, r3, #2
   8a9b4:	600b      	str	r3, [r1, #0]
   8a9b6:	2002      	movs	r0, #2
   8a9b8:	4770      	bx	lr
   8a9ba:	b298      	uxth	r0, r3
   8a9bc:	b198      	cbz	r0, 8a9e6 <__lo0bits+0x46>
   8a9be:	4610      	mov	r0, r2
   8a9c0:	f013 0fff 	tst.w	r3, #255	; 0xff
   8a9c4:	bf04      	itt	eq
   8a9c6:	0a1b      	lsreq	r3, r3, #8
   8a9c8:	3008      	addeq	r0, #8
   8a9ca:	071a      	lsls	r2, r3, #28
   8a9cc:	bf04      	itt	eq
   8a9ce:	091b      	lsreq	r3, r3, #4
   8a9d0:	3004      	addeq	r0, #4
   8a9d2:	079a      	lsls	r2, r3, #30
   8a9d4:	bf04      	itt	eq
   8a9d6:	089b      	lsreq	r3, r3, #2
   8a9d8:	3002      	addeq	r0, #2
   8a9da:	07da      	lsls	r2, r3, #31
   8a9dc:	d407      	bmi.n	8a9ee <__lo0bits+0x4e>
   8a9de:	085b      	lsrs	r3, r3, #1
   8a9e0:	d104      	bne.n	8a9ec <__lo0bits+0x4c>
   8a9e2:	2020      	movs	r0, #32
   8a9e4:	4770      	bx	lr
   8a9e6:	0c1b      	lsrs	r3, r3, #16
   8a9e8:	2010      	movs	r0, #16
   8a9ea:	e7e9      	b.n	8a9c0 <__lo0bits+0x20>
   8a9ec:	3001      	adds	r0, #1
   8a9ee:	600b      	str	r3, [r1, #0]
   8a9f0:	4770      	bx	lr
   8a9f2:	2000      	movs	r0, #0
   8a9f4:	4770      	bx	lr
   8a9f6:	085b      	lsrs	r3, r3, #1
   8a9f8:	600b      	str	r3, [r1, #0]
   8a9fa:	2001      	movs	r0, #1
   8a9fc:	4770      	bx	lr
   8a9fe:	bf00      	nop

0008aa00 <__i2b>:
   8aa00:	b510      	push	{r4, lr}
   8aa02:	460c      	mov	r4, r1
   8aa04:	2101      	movs	r1, #1
   8aa06:	f7ff ff39 	bl	8a87c <_Balloc>
   8aa0a:	2201      	movs	r2, #1
   8aa0c:	6144      	str	r4, [r0, #20]
   8aa0e:	6102      	str	r2, [r0, #16]
   8aa10:	bd10      	pop	{r4, pc}
   8aa12:	bf00      	nop

0008aa14 <__multiply>:
   8aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa18:	690c      	ldr	r4, [r1, #16]
   8aa1a:	6915      	ldr	r5, [r2, #16]
   8aa1c:	b083      	sub	sp, #12
   8aa1e:	42ac      	cmp	r4, r5
   8aa20:	468b      	mov	fp, r1
   8aa22:	4616      	mov	r6, r2
   8aa24:	da04      	bge.n	8aa30 <__multiply+0x1c>
   8aa26:	4622      	mov	r2, r4
   8aa28:	46b3      	mov	fp, r6
   8aa2a:	462c      	mov	r4, r5
   8aa2c:	460e      	mov	r6, r1
   8aa2e:	4615      	mov	r5, r2
   8aa30:	f8db 3008 	ldr.w	r3, [fp, #8]
   8aa34:	eb04 0805 	add.w	r8, r4, r5
   8aa38:	f8db 1004 	ldr.w	r1, [fp, #4]
   8aa3c:	4598      	cmp	r8, r3
   8aa3e:	bfc8      	it	gt
   8aa40:	3101      	addgt	r1, #1
   8aa42:	f7ff ff1b 	bl	8a87c <_Balloc>
   8aa46:	f100 0914 	add.w	r9, r0, #20
   8aa4a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8aa4e:	45d1      	cmp	r9, sl
   8aa50:	9000      	str	r0, [sp, #0]
   8aa52:	d205      	bcs.n	8aa60 <__multiply+0x4c>
   8aa54:	464b      	mov	r3, r9
   8aa56:	2100      	movs	r1, #0
   8aa58:	f843 1b04 	str.w	r1, [r3], #4
   8aa5c:	459a      	cmp	sl, r3
   8aa5e:	d8fb      	bhi.n	8aa58 <__multiply+0x44>
   8aa60:	f106 0c14 	add.w	ip, r6, #20
   8aa64:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8aa68:	f10b 0b14 	add.w	fp, fp, #20
   8aa6c:	459c      	cmp	ip, r3
   8aa6e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8aa72:	d24b      	bcs.n	8ab0c <__multiply+0xf8>
   8aa74:	f8cd a004 	str.w	sl, [sp, #4]
   8aa78:	469a      	mov	sl, r3
   8aa7a:	f8dc 5000 	ldr.w	r5, [ip]
   8aa7e:	b2af      	uxth	r7, r5
   8aa80:	b1e7      	cbz	r7, 8aabc <__multiply+0xa8>
   8aa82:	464d      	mov	r5, r9
   8aa84:	465e      	mov	r6, fp
   8aa86:	2100      	movs	r1, #0
   8aa88:	f856 2b04 	ldr.w	r2, [r6], #4
   8aa8c:	6828      	ldr	r0, [r5, #0]
   8aa8e:	b293      	uxth	r3, r2
   8aa90:	b284      	uxth	r4, r0
   8aa92:	0c12      	lsrs	r2, r2, #16
   8aa94:	fb07 4303 	mla	r3, r7, r3, r4
   8aa98:	0c00      	lsrs	r0, r0, #16
   8aa9a:	fb07 0202 	mla	r2, r7, r2, r0
   8aa9e:	440b      	add	r3, r1
   8aaa0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8aaa4:	b29b      	uxth	r3, r3
   8aaa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8aaaa:	45b6      	cmp	lr, r6
   8aaac:	f845 3b04 	str.w	r3, [r5], #4
   8aab0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8aab4:	d8e8      	bhi.n	8aa88 <__multiply+0x74>
   8aab6:	6029      	str	r1, [r5, #0]
   8aab8:	f8dc 5000 	ldr.w	r5, [ip]
   8aabc:	0c2d      	lsrs	r5, r5, #16
   8aabe:	d01d      	beq.n	8aafc <__multiply+0xe8>
   8aac0:	f8d9 3000 	ldr.w	r3, [r9]
   8aac4:	4648      	mov	r0, r9
   8aac6:	461c      	mov	r4, r3
   8aac8:	4659      	mov	r1, fp
   8aaca:	2200      	movs	r2, #0
   8aacc:	880e      	ldrh	r6, [r1, #0]
   8aace:	0c24      	lsrs	r4, r4, #16
   8aad0:	fb05 4406 	mla	r4, r5, r6, r4
   8aad4:	b29b      	uxth	r3, r3
   8aad6:	4422      	add	r2, r4
   8aad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8aadc:	f840 3b04 	str.w	r3, [r0], #4
   8aae0:	f851 3b04 	ldr.w	r3, [r1], #4
   8aae4:	6804      	ldr	r4, [r0, #0]
   8aae6:	0c1b      	lsrs	r3, r3, #16
   8aae8:	b2a6      	uxth	r6, r4
   8aaea:	fb05 6303 	mla	r3, r5, r3, r6
   8aaee:	458e      	cmp	lr, r1
   8aaf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8aaf4:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8aaf8:	d8e8      	bhi.n	8aacc <__multiply+0xb8>
   8aafa:	6003      	str	r3, [r0, #0]
   8aafc:	f10c 0c04 	add.w	ip, ip, #4
   8ab00:	45e2      	cmp	sl, ip
   8ab02:	f109 0904 	add.w	r9, r9, #4
   8ab06:	d8b8      	bhi.n	8aa7a <__multiply+0x66>
   8ab08:	f8dd a004 	ldr.w	sl, [sp, #4]
   8ab0c:	f1b8 0f00 	cmp.w	r8, #0
   8ab10:	dd0b      	ble.n	8ab2a <__multiply+0x116>
   8ab12:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8ab16:	f1aa 0a04 	sub.w	sl, sl, #4
   8ab1a:	b11b      	cbz	r3, 8ab24 <__multiply+0x110>
   8ab1c:	e005      	b.n	8ab2a <__multiply+0x116>
   8ab1e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8ab22:	b913      	cbnz	r3, 8ab2a <__multiply+0x116>
   8ab24:	f1b8 0801 	subs.w	r8, r8, #1
   8ab28:	d1f9      	bne.n	8ab1e <__multiply+0x10a>
   8ab2a:	9800      	ldr	r0, [sp, #0]
   8ab2c:	f8c0 8010 	str.w	r8, [r0, #16]
   8ab30:	b003      	add	sp, #12
   8ab32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab36:	bf00      	nop

0008ab38 <__pow5mult>:
   8ab38:	f012 0303 	ands.w	r3, r2, #3
   8ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ab40:	4614      	mov	r4, r2
   8ab42:	4607      	mov	r7, r0
   8ab44:	d12e      	bne.n	8aba4 <__pow5mult+0x6c>
   8ab46:	460d      	mov	r5, r1
   8ab48:	10a4      	asrs	r4, r4, #2
   8ab4a:	d01c      	beq.n	8ab86 <__pow5mult+0x4e>
   8ab4c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8ab4e:	b396      	cbz	r6, 8abb6 <__pow5mult+0x7e>
   8ab50:	07e3      	lsls	r3, r4, #31
   8ab52:	f04f 0800 	mov.w	r8, #0
   8ab56:	d406      	bmi.n	8ab66 <__pow5mult+0x2e>
   8ab58:	1064      	asrs	r4, r4, #1
   8ab5a:	d014      	beq.n	8ab86 <__pow5mult+0x4e>
   8ab5c:	6830      	ldr	r0, [r6, #0]
   8ab5e:	b1a8      	cbz	r0, 8ab8c <__pow5mult+0x54>
   8ab60:	4606      	mov	r6, r0
   8ab62:	07e3      	lsls	r3, r4, #31
   8ab64:	d5f8      	bpl.n	8ab58 <__pow5mult+0x20>
   8ab66:	4632      	mov	r2, r6
   8ab68:	4629      	mov	r1, r5
   8ab6a:	4638      	mov	r0, r7
   8ab6c:	f7ff ff52 	bl	8aa14 <__multiply>
   8ab70:	b1b5      	cbz	r5, 8aba0 <__pow5mult+0x68>
   8ab72:	686a      	ldr	r2, [r5, #4]
   8ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8ab76:	1064      	asrs	r4, r4, #1
   8ab78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8ab7c:	6029      	str	r1, [r5, #0]
   8ab7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8ab82:	4605      	mov	r5, r0
   8ab84:	d1ea      	bne.n	8ab5c <__pow5mult+0x24>
   8ab86:	4628      	mov	r0, r5
   8ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ab8c:	4632      	mov	r2, r6
   8ab8e:	4631      	mov	r1, r6
   8ab90:	4638      	mov	r0, r7
   8ab92:	f7ff ff3f 	bl	8aa14 <__multiply>
   8ab96:	6030      	str	r0, [r6, #0]
   8ab98:	f8c0 8000 	str.w	r8, [r0]
   8ab9c:	4606      	mov	r6, r0
   8ab9e:	e7e0      	b.n	8ab62 <__pow5mult+0x2a>
   8aba0:	4605      	mov	r5, r0
   8aba2:	e7d9      	b.n	8ab58 <__pow5mult+0x20>
   8aba4:	4a0b      	ldr	r2, [pc, #44]	; (8abd4 <__pow5mult+0x9c>)
   8aba6:	3b01      	subs	r3, #1
   8aba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8abac:	2300      	movs	r3, #0
   8abae:	f7ff fe95 	bl	8a8dc <__multadd>
   8abb2:	4605      	mov	r5, r0
   8abb4:	e7c8      	b.n	8ab48 <__pow5mult+0x10>
   8abb6:	2101      	movs	r1, #1
   8abb8:	4638      	mov	r0, r7
   8abba:	f7ff fe5f 	bl	8a87c <_Balloc>
   8abbe:	f240 2171 	movw	r1, #625	; 0x271
   8abc2:	2201      	movs	r2, #1
   8abc4:	2300      	movs	r3, #0
   8abc6:	6141      	str	r1, [r0, #20]
   8abc8:	6102      	str	r2, [r0, #16]
   8abca:	4606      	mov	r6, r0
   8abcc:	64b8      	str	r0, [r7, #72]	; 0x48
   8abce:	6003      	str	r3, [r0, #0]
   8abd0:	e7be      	b.n	8ab50 <__pow5mult+0x18>
   8abd2:	bf00      	nop
   8abd4:	0008c368 	.word	0x0008c368

0008abd8 <__lshift>:
   8abd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8abdc:	690b      	ldr	r3, [r1, #16]
   8abde:	1154      	asrs	r4, r2, #5
   8abe0:	eb04 0803 	add.w	r8, r4, r3
   8abe4:	688b      	ldr	r3, [r1, #8]
   8abe6:	f108 0501 	add.w	r5, r8, #1
   8abea:	429d      	cmp	r5, r3
   8abec:	460e      	mov	r6, r1
   8abee:	4691      	mov	r9, r2
   8abf0:	4607      	mov	r7, r0
   8abf2:	6849      	ldr	r1, [r1, #4]
   8abf4:	dd04      	ble.n	8ac00 <__lshift+0x28>
   8abf6:	005b      	lsls	r3, r3, #1
   8abf8:	429d      	cmp	r5, r3
   8abfa:	f101 0101 	add.w	r1, r1, #1
   8abfe:	dcfa      	bgt.n	8abf6 <__lshift+0x1e>
   8ac00:	4638      	mov	r0, r7
   8ac02:	f7ff fe3b 	bl	8a87c <_Balloc>
   8ac06:	2c00      	cmp	r4, #0
   8ac08:	f100 0314 	add.w	r3, r0, #20
   8ac0c:	dd06      	ble.n	8ac1c <__lshift+0x44>
   8ac0e:	2100      	movs	r1, #0
   8ac10:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8ac14:	f843 1b04 	str.w	r1, [r3], #4
   8ac18:	429a      	cmp	r2, r3
   8ac1a:	d1fb      	bne.n	8ac14 <__lshift+0x3c>
   8ac1c:	6934      	ldr	r4, [r6, #16]
   8ac1e:	f106 0114 	add.w	r1, r6, #20
   8ac22:	f019 091f 	ands.w	r9, r9, #31
   8ac26:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8ac2a:	d01d      	beq.n	8ac68 <__lshift+0x90>
   8ac2c:	2200      	movs	r2, #0
   8ac2e:	f1c9 0c20 	rsb	ip, r9, #32
   8ac32:	680c      	ldr	r4, [r1, #0]
   8ac34:	fa04 f409 	lsl.w	r4, r4, r9
   8ac38:	4314      	orrs	r4, r2
   8ac3a:	f843 4b04 	str.w	r4, [r3], #4
   8ac3e:	f851 2b04 	ldr.w	r2, [r1], #4
   8ac42:	458e      	cmp	lr, r1
   8ac44:	fa22 f20c 	lsr.w	r2, r2, ip
   8ac48:	d8f3      	bhi.n	8ac32 <__lshift+0x5a>
   8ac4a:	601a      	str	r2, [r3, #0]
   8ac4c:	b10a      	cbz	r2, 8ac52 <__lshift+0x7a>
   8ac4e:	f108 0502 	add.w	r5, r8, #2
   8ac52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8ac54:	6872      	ldr	r2, [r6, #4]
   8ac56:	3d01      	subs	r5, #1
   8ac58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8ac5c:	6105      	str	r5, [r0, #16]
   8ac5e:	6031      	str	r1, [r6, #0]
   8ac60:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8ac64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ac68:	3b04      	subs	r3, #4
   8ac6a:	f851 2b04 	ldr.w	r2, [r1], #4
   8ac6e:	458e      	cmp	lr, r1
   8ac70:	f843 2f04 	str.w	r2, [r3, #4]!
   8ac74:	d8f9      	bhi.n	8ac6a <__lshift+0x92>
   8ac76:	e7ec      	b.n	8ac52 <__lshift+0x7a>

0008ac78 <__mcmp>:
   8ac78:	b430      	push	{r4, r5}
   8ac7a:	690b      	ldr	r3, [r1, #16]
   8ac7c:	4605      	mov	r5, r0
   8ac7e:	6900      	ldr	r0, [r0, #16]
   8ac80:	1ac0      	subs	r0, r0, r3
   8ac82:	d10f      	bne.n	8aca4 <__mcmp+0x2c>
   8ac84:	009b      	lsls	r3, r3, #2
   8ac86:	3514      	adds	r5, #20
   8ac88:	3114      	adds	r1, #20
   8ac8a:	4419      	add	r1, r3
   8ac8c:	442b      	add	r3, r5
   8ac8e:	e001      	b.n	8ac94 <__mcmp+0x1c>
   8ac90:	429d      	cmp	r5, r3
   8ac92:	d207      	bcs.n	8aca4 <__mcmp+0x2c>
   8ac94:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8ac98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8ac9c:	4294      	cmp	r4, r2
   8ac9e:	d0f7      	beq.n	8ac90 <__mcmp+0x18>
   8aca0:	d302      	bcc.n	8aca8 <__mcmp+0x30>
   8aca2:	2001      	movs	r0, #1
   8aca4:	bc30      	pop	{r4, r5}
   8aca6:	4770      	bx	lr
   8aca8:	f04f 30ff 	mov.w	r0, #4294967295
   8acac:	e7fa      	b.n	8aca4 <__mcmp+0x2c>
   8acae:	bf00      	nop

0008acb0 <__mdiff>:
   8acb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8acb4:	690c      	ldr	r4, [r1, #16]
   8acb6:	4689      	mov	r9, r1
   8acb8:	6911      	ldr	r1, [r2, #16]
   8acba:	4692      	mov	sl, r2
   8acbc:	1a64      	subs	r4, r4, r1
   8acbe:	2c00      	cmp	r4, #0
   8acc0:	d117      	bne.n	8acf2 <__mdiff+0x42>
   8acc2:	0089      	lsls	r1, r1, #2
   8acc4:	f109 0714 	add.w	r7, r9, #20
   8acc8:	f102 0614 	add.w	r6, r2, #20
   8accc:	187b      	adds	r3, r7, r1
   8acce:	4431      	add	r1, r6
   8acd0:	e001      	b.n	8acd6 <__mdiff+0x26>
   8acd2:	429f      	cmp	r7, r3
   8acd4:	d265      	bcs.n	8ada2 <__mdiff+0xf2>
   8acd6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8acda:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8acde:	4295      	cmp	r5, r2
   8ace0:	d0f7      	beq.n	8acd2 <__mdiff+0x22>
   8ace2:	d267      	bcs.n	8adb4 <__mdiff+0x104>
   8ace4:	464b      	mov	r3, r9
   8ace6:	46bb      	mov	fp, r7
   8ace8:	46d1      	mov	r9, sl
   8acea:	4637      	mov	r7, r6
   8acec:	469a      	mov	sl, r3
   8acee:	2401      	movs	r4, #1
   8acf0:	e005      	b.n	8acfe <__mdiff+0x4e>
   8acf2:	db61      	blt.n	8adb8 <__mdiff+0x108>
   8acf4:	2400      	movs	r4, #0
   8acf6:	f109 0714 	add.w	r7, r9, #20
   8acfa:	f10a 0b14 	add.w	fp, sl, #20
   8acfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8ad02:	f7ff fdbb 	bl	8a87c <_Balloc>
   8ad06:	465d      	mov	r5, fp
   8ad08:	f04f 0800 	mov.w	r8, #0
   8ad0c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8ad10:	f8da 3010 	ldr.w	r3, [sl, #16]
   8ad14:	463e      	mov	r6, r7
   8ad16:	60c4      	str	r4, [r0, #12]
   8ad18:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8ad1c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8ad20:	f100 0414 	add.w	r4, r0, #20
   8ad24:	f856 9b04 	ldr.w	r9, [r6], #4
   8ad28:	f855 2b04 	ldr.w	r2, [r5], #4
   8ad2c:	fa1f f389 	uxth.w	r3, r9
   8ad30:	4443      	add	r3, r8
   8ad32:	fa1f f882 	uxth.w	r8, r2
   8ad36:	0c12      	lsrs	r2, r2, #16
   8ad38:	eba3 0308 	sub.w	r3, r3, r8
   8ad3c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8ad40:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8ad44:	b29b      	uxth	r3, r3
   8ad46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8ad4a:	45ac      	cmp	ip, r5
   8ad4c:	f844 3b04 	str.w	r3, [r4], #4
   8ad50:	ea4f 4822 	mov.w	r8, r2, asr #16
   8ad54:	d8e6      	bhi.n	8ad24 <__mdiff+0x74>
   8ad56:	42b7      	cmp	r7, r6
   8ad58:	d917      	bls.n	8ad8a <__mdiff+0xda>
   8ad5a:	46a4      	mov	ip, r4
   8ad5c:	4635      	mov	r5, r6
   8ad5e:	f855 3b04 	ldr.w	r3, [r5], #4
   8ad62:	b299      	uxth	r1, r3
   8ad64:	4441      	add	r1, r8
   8ad66:	140a      	asrs	r2, r1, #16
   8ad68:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8ad6c:	b289      	uxth	r1, r1
   8ad6e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8ad72:	42af      	cmp	r7, r5
   8ad74:	f84c 3b04 	str.w	r3, [ip], #4
   8ad78:	ea4f 4822 	mov.w	r8, r2, asr #16
   8ad7c:	d8ef      	bhi.n	8ad5e <__mdiff+0xae>
   8ad7e:	43f6      	mvns	r6, r6
   8ad80:	4437      	add	r7, r6
   8ad82:	f027 0703 	bic.w	r7, r7, #3
   8ad86:	3704      	adds	r7, #4
   8ad88:	443c      	add	r4, r7
   8ad8a:	3c04      	subs	r4, #4
   8ad8c:	b92b      	cbnz	r3, 8ad9a <__mdiff+0xea>
   8ad8e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8ad92:	f10e 3eff 	add.w	lr, lr, #4294967295
   8ad96:	2b00      	cmp	r3, #0
   8ad98:	d0f9      	beq.n	8ad8e <__mdiff+0xde>
   8ad9a:	f8c0 e010 	str.w	lr, [r0, #16]
   8ad9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ada2:	2100      	movs	r1, #0
   8ada4:	f7ff fd6a 	bl	8a87c <_Balloc>
   8ada8:	2201      	movs	r2, #1
   8adaa:	2300      	movs	r3, #0
   8adac:	6102      	str	r2, [r0, #16]
   8adae:	6143      	str	r3, [r0, #20]
   8adb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8adb4:	46b3      	mov	fp, r6
   8adb6:	e7a2      	b.n	8acfe <__mdiff+0x4e>
   8adb8:	464b      	mov	r3, r9
   8adba:	f109 0b14 	add.w	fp, r9, #20
   8adbe:	f102 0714 	add.w	r7, r2, #20
   8adc2:	4691      	mov	r9, r2
   8adc4:	2401      	movs	r4, #1
   8adc6:	469a      	mov	sl, r3
   8adc8:	e799      	b.n	8acfe <__mdiff+0x4e>
   8adca:	bf00      	nop

0008adcc <__d2b>:
   8adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   8adce:	2101      	movs	r1, #1
   8add0:	b083      	sub	sp, #12
   8add2:	461c      	mov	r4, r3
   8add4:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8add8:	4616      	mov	r6, r2
   8adda:	f7ff fd4f 	bl	8a87c <_Balloc>
   8adde:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8ade2:	4607      	mov	r7, r0
   8ade4:	b10d      	cbz	r5, 8adea <__d2b+0x1e>
   8ade6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8adea:	9401      	str	r4, [sp, #4]
   8adec:	b306      	cbz	r6, 8ae30 <__d2b+0x64>
   8adee:	a802      	add	r0, sp, #8
   8adf0:	f840 6d08 	str.w	r6, [r0, #-8]!
   8adf4:	f7ff fdd4 	bl	8a9a0 <__lo0bits>
   8adf8:	2800      	cmp	r0, #0
   8adfa:	d130      	bne.n	8ae5e <__d2b+0x92>
   8adfc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8ae00:	617a      	str	r2, [r7, #20]
   8ae02:	2b00      	cmp	r3, #0
   8ae04:	bf0c      	ite	eq
   8ae06:	2101      	moveq	r1, #1
   8ae08:	2102      	movne	r1, #2
   8ae0a:	61bb      	str	r3, [r7, #24]
   8ae0c:	6139      	str	r1, [r7, #16]
   8ae0e:	b9d5      	cbnz	r5, 8ae46 <__d2b+0x7a>
   8ae10:	9a08      	ldr	r2, [sp, #32]
   8ae12:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8ae16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8ae1a:	6010      	str	r0, [r2, #0]
   8ae1c:	6918      	ldr	r0, [r3, #16]
   8ae1e:	f7ff fd9f 	bl	8a960 <__hi0bits>
   8ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8ae24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8ae28:	6018      	str	r0, [r3, #0]
   8ae2a:	4638      	mov	r0, r7
   8ae2c:	b003      	add	sp, #12
   8ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ae30:	a801      	add	r0, sp, #4
   8ae32:	f7ff fdb5 	bl	8a9a0 <__lo0bits>
   8ae36:	2201      	movs	r2, #1
   8ae38:	9b01      	ldr	r3, [sp, #4]
   8ae3a:	4611      	mov	r1, r2
   8ae3c:	3020      	adds	r0, #32
   8ae3e:	613a      	str	r2, [r7, #16]
   8ae40:	617b      	str	r3, [r7, #20]
   8ae42:	2d00      	cmp	r5, #0
   8ae44:	d0e4      	beq.n	8ae10 <__d2b+0x44>
   8ae46:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8ae4a:	9a08      	ldr	r2, [sp, #32]
   8ae4c:	4403      	add	r3, r0
   8ae4e:	6013      	str	r3, [r2, #0]
   8ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8ae52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8ae56:	6018      	str	r0, [r3, #0]
   8ae58:	4638      	mov	r0, r7
   8ae5a:	b003      	add	sp, #12
   8ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ae5e:	9b01      	ldr	r3, [sp, #4]
   8ae60:	f1c0 0220 	rsb	r2, r0, #32
   8ae64:	9900      	ldr	r1, [sp, #0]
   8ae66:	fa03 f202 	lsl.w	r2, r3, r2
   8ae6a:	430a      	orrs	r2, r1
   8ae6c:	40c3      	lsrs	r3, r0
   8ae6e:	9301      	str	r3, [sp, #4]
   8ae70:	617a      	str	r2, [r7, #20]
   8ae72:	e7c6      	b.n	8ae02 <__d2b+0x36>

0008ae74 <_realloc_r>:
   8ae74:	2900      	cmp	r1, #0
   8ae76:	f000 8094 	beq.w	8afa2 <_realloc_r+0x12e>
   8ae7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ae7e:	460c      	mov	r4, r1
   8ae80:	4615      	mov	r5, r2
   8ae82:	b083      	sub	sp, #12
   8ae84:	4680      	mov	r8, r0
   8ae86:	f105 060b 	add.w	r6, r5, #11
   8ae8a:	f7ff fceb 	bl	8a864 <__malloc_lock>
   8ae8e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8ae92:	2e16      	cmp	r6, #22
   8ae94:	f02e 0703 	bic.w	r7, lr, #3
   8ae98:	f1a4 0908 	sub.w	r9, r4, #8
   8ae9c:	d83c      	bhi.n	8af18 <_realloc_r+0xa4>
   8ae9e:	2210      	movs	r2, #16
   8aea0:	4616      	mov	r6, r2
   8aea2:	42b5      	cmp	r5, r6
   8aea4:	d83d      	bhi.n	8af22 <_realloc_r+0xae>
   8aea6:	4297      	cmp	r7, r2
   8aea8:	da43      	bge.n	8af32 <_realloc_r+0xbe>
   8aeaa:	4bc6      	ldr	r3, [pc, #792]	; (8b1c4 <_realloc_r+0x350>)
   8aeac:	eb09 0007 	add.w	r0, r9, r7
   8aeb0:	6899      	ldr	r1, [r3, #8]
   8aeb2:	4288      	cmp	r0, r1
   8aeb4:	f000 80c3 	beq.w	8b03e <_realloc_r+0x1ca>
   8aeb8:	6843      	ldr	r3, [r0, #4]
   8aeba:	f023 0101 	bic.w	r1, r3, #1
   8aebe:	4401      	add	r1, r0
   8aec0:	6849      	ldr	r1, [r1, #4]
   8aec2:	07c9      	lsls	r1, r1, #31
   8aec4:	d54d      	bpl.n	8af62 <_realloc_r+0xee>
   8aec6:	f01e 0f01 	tst.w	lr, #1
   8aeca:	f000 809b 	beq.w	8b004 <_realloc_r+0x190>
   8aece:	4629      	mov	r1, r5
   8aed0:	4640      	mov	r0, r8
   8aed2:	f7ff f965 	bl	8a1a0 <_malloc_r>
   8aed6:	4605      	mov	r5, r0
   8aed8:	2800      	cmp	r0, #0
   8aeda:	d03b      	beq.n	8af54 <_realloc_r+0xe0>
   8aedc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8aee0:	f1a0 0208 	sub.w	r2, r0, #8
   8aee4:	f023 0301 	bic.w	r3, r3, #1
   8aee8:	444b      	add	r3, r9
   8aeea:	429a      	cmp	r2, r3
   8aeec:	f000 812b 	beq.w	8b146 <_realloc_r+0x2d2>
   8aef0:	1f3a      	subs	r2, r7, #4
   8aef2:	2a24      	cmp	r2, #36	; 0x24
   8aef4:	f200 8118 	bhi.w	8b128 <_realloc_r+0x2b4>
   8aef8:	2a13      	cmp	r2, #19
   8aefa:	f200 80eb 	bhi.w	8b0d4 <_realloc_r+0x260>
   8aefe:	4603      	mov	r3, r0
   8af00:	4622      	mov	r2, r4
   8af02:	6811      	ldr	r1, [r2, #0]
   8af04:	6019      	str	r1, [r3, #0]
   8af06:	6851      	ldr	r1, [r2, #4]
   8af08:	6059      	str	r1, [r3, #4]
   8af0a:	6892      	ldr	r2, [r2, #8]
   8af0c:	609a      	str	r2, [r3, #8]
   8af0e:	4621      	mov	r1, r4
   8af10:	4640      	mov	r0, r8
   8af12:	f7fe fe19 	bl	89b48 <_free_r>
   8af16:	e01d      	b.n	8af54 <_realloc_r+0xe0>
   8af18:	f026 0607 	bic.w	r6, r6, #7
   8af1c:	2e00      	cmp	r6, #0
   8af1e:	4632      	mov	r2, r6
   8af20:	dabf      	bge.n	8aea2 <_realloc_r+0x2e>
   8af22:	2500      	movs	r5, #0
   8af24:	230c      	movs	r3, #12
   8af26:	4628      	mov	r0, r5
   8af28:	f8c8 3000 	str.w	r3, [r8]
   8af2c:	b003      	add	sp, #12
   8af2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af32:	4625      	mov	r5, r4
   8af34:	1bbb      	subs	r3, r7, r6
   8af36:	2b0f      	cmp	r3, #15
   8af38:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8af3c:	d81d      	bhi.n	8af7a <_realloc_r+0x106>
   8af3e:	f002 0201 	and.w	r2, r2, #1
   8af42:	433a      	orrs	r2, r7
   8af44:	eb09 0107 	add.w	r1, r9, r7
   8af48:	f8c9 2004 	str.w	r2, [r9, #4]
   8af4c:	684b      	ldr	r3, [r1, #4]
   8af4e:	f043 0301 	orr.w	r3, r3, #1
   8af52:	604b      	str	r3, [r1, #4]
   8af54:	4640      	mov	r0, r8
   8af56:	f7ff fc8b 	bl	8a870 <__malloc_unlock>
   8af5a:	4628      	mov	r0, r5
   8af5c:	b003      	add	sp, #12
   8af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af62:	f023 0303 	bic.w	r3, r3, #3
   8af66:	18f9      	adds	r1, r7, r3
   8af68:	4291      	cmp	r1, r2
   8af6a:	db1d      	blt.n	8afa8 <_realloc_r+0x134>
   8af6c:	68c3      	ldr	r3, [r0, #12]
   8af6e:	6882      	ldr	r2, [r0, #8]
   8af70:	4625      	mov	r5, r4
   8af72:	60d3      	str	r3, [r2, #12]
   8af74:	460f      	mov	r7, r1
   8af76:	609a      	str	r2, [r3, #8]
   8af78:	e7dc      	b.n	8af34 <_realloc_r+0xc0>
   8af7a:	f002 0201 	and.w	r2, r2, #1
   8af7e:	eb09 0106 	add.w	r1, r9, r6
   8af82:	f043 0301 	orr.w	r3, r3, #1
   8af86:	4332      	orrs	r2, r6
   8af88:	f8c9 2004 	str.w	r2, [r9, #4]
   8af8c:	444f      	add	r7, r9
   8af8e:	604b      	str	r3, [r1, #4]
   8af90:	687b      	ldr	r3, [r7, #4]
   8af92:	3108      	adds	r1, #8
   8af94:	f043 0301 	orr.w	r3, r3, #1
   8af98:	607b      	str	r3, [r7, #4]
   8af9a:	4640      	mov	r0, r8
   8af9c:	f7fe fdd4 	bl	89b48 <_free_r>
   8afa0:	e7d8      	b.n	8af54 <_realloc_r+0xe0>
   8afa2:	4611      	mov	r1, r2
   8afa4:	f7ff b8fc 	b.w	8a1a0 <_malloc_r>
   8afa8:	f01e 0f01 	tst.w	lr, #1
   8afac:	d18f      	bne.n	8aece <_realloc_r+0x5a>
   8afae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8afb2:	eba9 0a01 	sub.w	sl, r9, r1
   8afb6:	f8da 1004 	ldr.w	r1, [sl, #4]
   8afba:	f021 0103 	bic.w	r1, r1, #3
   8afbe:	440b      	add	r3, r1
   8afc0:	443b      	add	r3, r7
   8afc2:	4293      	cmp	r3, r2
   8afc4:	db26      	blt.n	8b014 <_realloc_r+0x1a0>
   8afc6:	4655      	mov	r5, sl
   8afc8:	68c1      	ldr	r1, [r0, #12]
   8afca:	6880      	ldr	r0, [r0, #8]
   8afcc:	1f3a      	subs	r2, r7, #4
   8afce:	60c1      	str	r1, [r0, #12]
   8afd0:	6088      	str	r0, [r1, #8]
   8afd2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8afd6:	f8da 100c 	ldr.w	r1, [sl, #12]
   8afda:	2a24      	cmp	r2, #36	; 0x24
   8afdc:	60c1      	str	r1, [r0, #12]
   8afde:	6088      	str	r0, [r1, #8]
   8afe0:	d826      	bhi.n	8b030 <_realloc_r+0x1bc>
   8afe2:	2a13      	cmp	r2, #19
   8afe4:	f240 8081 	bls.w	8b0ea <_realloc_r+0x276>
   8afe8:	6821      	ldr	r1, [r4, #0]
   8afea:	2a1b      	cmp	r2, #27
   8afec:	f8ca 1008 	str.w	r1, [sl, #8]
   8aff0:	6861      	ldr	r1, [r4, #4]
   8aff2:	f8ca 100c 	str.w	r1, [sl, #12]
   8aff6:	f200 80ad 	bhi.w	8b154 <_realloc_r+0x2e0>
   8affa:	f104 0008 	add.w	r0, r4, #8
   8affe:	f10a 0210 	add.w	r2, sl, #16
   8b002:	e074      	b.n	8b0ee <_realloc_r+0x27a>
   8b004:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b008:	eba9 0a03 	sub.w	sl, r9, r3
   8b00c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b010:	f021 0103 	bic.w	r1, r1, #3
   8b014:	187b      	adds	r3, r7, r1
   8b016:	4293      	cmp	r3, r2
   8b018:	f6ff af59 	blt.w	8aece <_realloc_r+0x5a>
   8b01c:	4655      	mov	r5, sl
   8b01e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b022:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b026:	1f3a      	subs	r2, r7, #4
   8b028:	2a24      	cmp	r2, #36	; 0x24
   8b02a:	60c1      	str	r1, [r0, #12]
   8b02c:	6088      	str	r0, [r1, #8]
   8b02e:	d9d8      	bls.n	8afe2 <_realloc_r+0x16e>
   8b030:	4621      	mov	r1, r4
   8b032:	4628      	mov	r0, r5
   8b034:	461f      	mov	r7, r3
   8b036:	46d1      	mov	r9, sl
   8b038:	f7ff fbb0 	bl	8a79c <memmove>
   8b03c:	e77a      	b.n	8af34 <_realloc_r+0xc0>
   8b03e:	6841      	ldr	r1, [r0, #4]
   8b040:	f106 0010 	add.w	r0, r6, #16
   8b044:	f021 0b03 	bic.w	fp, r1, #3
   8b048:	44bb      	add	fp, r7
   8b04a:	4583      	cmp	fp, r0
   8b04c:	da58      	bge.n	8b100 <_realloc_r+0x28c>
   8b04e:	f01e 0f01 	tst.w	lr, #1
   8b052:	f47f af3c 	bne.w	8aece <_realloc_r+0x5a>
   8b056:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b05a:	eba9 0a01 	sub.w	sl, r9, r1
   8b05e:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b062:	f021 0103 	bic.w	r1, r1, #3
   8b066:	448b      	add	fp, r1
   8b068:	4558      	cmp	r0, fp
   8b06a:	dcd3      	bgt.n	8b014 <_realloc_r+0x1a0>
   8b06c:	4655      	mov	r5, sl
   8b06e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b072:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b076:	1f3a      	subs	r2, r7, #4
   8b078:	2a24      	cmp	r2, #36	; 0x24
   8b07a:	60c1      	str	r1, [r0, #12]
   8b07c:	6088      	str	r0, [r1, #8]
   8b07e:	f200 808d 	bhi.w	8b19c <_realloc_r+0x328>
   8b082:	2a13      	cmp	r2, #19
   8b084:	f240 8087 	bls.w	8b196 <_realloc_r+0x322>
   8b088:	6821      	ldr	r1, [r4, #0]
   8b08a:	2a1b      	cmp	r2, #27
   8b08c:	f8ca 1008 	str.w	r1, [sl, #8]
   8b090:	6861      	ldr	r1, [r4, #4]
   8b092:	f8ca 100c 	str.w	r1, [sl, #12]
   8b096:	f200 8088 	bhi.w	8b1aa <_realloc_r+0x336>
   8b09a:	f104 0108 	add.w	r1, r4, #8
   8b09e:	f10a 0210 	add.w	r2, sl, #16
   8b0a2:	6808      	ldr	r0, [r1, #0]
   8b0a4:	6010      	str	r0, [r2, #0]
   8b0a6:	6848      	ldr	r0, [r1, #4]
   8b0a8:	6050      	str	r0, [r2, #4]
   8b0aa:	6889      	ldr	r1, [r1, #8]
   8b0ac:	6091      	str	r1, [r2, #8]
   8b0ae:	ebab 0206 	sub.w	r2, fp, r6
   8b0b2:	eb0a 0106 	add.w	r1, sl, r6
   8b0b6:	f042 0201 	orr.w	r2, r2, #1
   8b0ba:	6099      	str	r1, [r3, #8]
   8b0bc:	604a      	str	r2, [r1, #4]
   8b0be:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b0c2:	4640      	mov	r0, r8
   8b0c4:	f003 0301 	and.w	r3, r3, #1
   8b0c8:	431e      	orrs	r6, r3
   8b0ca:	f8ca 6004 	str.w	r6, [sl, #4]
   8b0ce:	f7ff fbcf 	bl	8a870 <__malloc_unlock>
   8b0d2:	e742      	b.n	8af5a <_realloc_r+0xe6>
   8b0d4:	6823      	ldr	r3, [r4, #0]
   8b0d6:	2a1b      	cmp	r2, #27
   8b0d8:	6003      	str	r3, [r0, #0]
   8b0da:	6863      	ldr	r3, [r4, #4]
   8b0dc:	6043      	str	r3, [r0, #4]
   8b0de:	d827      	bhi.n	8b130 <_realloc_r+0x2bc>
   8b0e0:	f100 0308 	add.w	r3, r0, #8
   8b0e4:	f104 0208 	add.w	r2, r4, #8
   8b0e8:	e70b      	b.n	8af02 <_realloc_r+0x8e>
   8b0ea:	4620      	mov	r0, r4
   8b0ec:	462a      	mov	r2, r5
   8b0ee:	6801      	ldr	r1, [r0, #0]
   8b0f0:	461f      	mov	r7, r3
   8b0f2:	6011      	str	r1, [r2, #0]
   8b0f4:	6841      	ldr	r1, [r0, #4]
   8b0f6:	46d1      	mov	r9, sl
   8b0f8:	6051      	str	r1, [r2, #4]
   8b0fa:	6883      	ldr	r3, [r0, #8]
   8b0fc:	6093      	str	r3, [r2, #8]
   8b0fe:	e719      	b.n	8af34 <_realloc_r+0xc0>
   8b100:	ebab 0b06 	sub.w	fp, fp, r6
   8b104:	eb09 0106 	add.w	r1, r9, r6
   8b108:	f04b 0201 	orr.w	r2, fp, #1
   8b10c:	6099      	str	r1, [r3, #8]
   8b10e:	604a      	str	r2, [r1, #4]
   8b110:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b114:	4640      	mov	r0, r8
   8b116:	f003 0301 	and.w	r3, r3, #1
   8b11a:	431e      	orrs	r6, r3
   8b11c:	f844 6c04 	str.w	r6, [r4, #-4]
   8b120:	f7ff fba6 	bl	8a870 <__malloc_unlock>
   8b124:	4625      	mov	r5, r4
   8b126:	e718      	b.n	8af5a <_realloc_r+0xe6>
   8b128:	4621      	mov	r1, r4
   8b12a:	f7ff fb37 	bl	8a79c <memmove>
   8b12e:	e6ee      	b.n	8af0e <_realloc_r+0x9a>
   8b130:	68a3      	ldr	r3, [r4, #8]
   8b132:	2a24      	cmp	r2, #36	; 0x24
   8b134:	6083      	str	r3, [r0, #8]
   8b136:	68e3      	ldr	r3, [r4, #12]
   8b138:	60c3      	str	r3, [r0, #12]
   8b13a:	d018      	beq.n	8b16e <_realloc_r+0x2fa>
   8b13c:	f100 0310 	add.w	r3, r0, #16
   8b140:	f104 0210 	add.w	r2, r4, #16
   8b144:	e6dd      	b.n	8af02 <_realloc_r+0x8e>
   8b146:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b14a:	4625      	mov	r5, r4
   8b14c:	f023 0303 	bic.w	r3, r3, #3
   8b150:	441f      	add	r7, r3
   8b152:	e6ef      	b.n	8af34 <_realloc_r+0xc0>
   8b154:	68a1      	ldr	r1, [r4, #8]
   8b156:	2a24      	cmp	r2, #36	; 0x24
   8b158:	f8ca 1010 	str.w	r1, [sl, #16]
   8b15c:	68e1      	ldr	r1, [r4, #12]
   8b15e:	f8ca 1014 	str.w	r1, [sl, #20]
   8b162:	d00d      	beq.n	8b180 <_realloc_r+0x30c>
   8b164:	f104 0010 	add.w	r0, r4, #16
   8b168:	f10a 0218 	add.w	r2, sl, #24
   8b16c:	e7bf      	b.n	8b0ee <_realloc_r+0x27a>
   8b16e:	6922      	ldr	r2, [r4, #16]
   8b170:	f100 0318 	add.w	r3, r0, #24
   8b174:	6102      	str	r2, [r0, #16]
   8b176:	6961      	ldr	r1, [r4, #20]
   8b178:	f104 0218 	add.w	r2, r4, #24
   8b17c:	6141      	str	r1, [r0, #20]
   8b17e:	e6c0      	b.n	8af02 <_realloc_r+0x8e>
   8b180:	6922      	ldr	r2, [r4, #16]
   8b182:	f104 0018 	add.w	r0, r4, #24
   8b186:	f8ca 2018 	str.w	r2, [sl, #24]
   8b18a:	6961      	ldr	r1, [r4, #20]
   8b18c:	f10a 0220 	add.w	r2, sl, #32
   8b190:	f8ca 101c 	str.w	r1, [sl, #28]
   8b194:	e7ab      	b.n	8b0ee <_realloc_r+0x27a>
   8b196:	4621      	mov	r1, r4
   8b198:	462a      	mov	r2, r5
   8b19a:	e782      	b.n	8b0a2 <_realloc_r+0x22e>
   8b19c:	4621      	mov	r1, r4
   8b19e:	4628      	mov	r0, r5
   8b1a0:	9301      	str	r3, [sp, #4]
   8b1a2:	f7ff fafb 	bl	8a79c <memmove>
   8b1a6:	9b01      	ldr	r3, [sp, #4]
   8b1a8:	e781      	b.n	8b0ae <_realloc_r+0x23a>
   8b1aa:	68a1      	ldr	r1, [r4, #8]
   8b1ac:	2a24      	cmp	r2, #36	; 0x24
   8b1ae:	f8ca 1010 	str.w	r1, [sl, #16]
   8b1b2:	68e1      	ldr	r1, [r4, #12]
   8b1b4:	f8ca 1014 	str.w	r1, [sl, #20]
   8b1b8:	d006      	beq.n	8b1c8 <_realloc_r+0x354>
   8b1ba:	f104 0110 	add.w	r1, r4, #16
   8b1be:	f10a 0218 	add.w	r2, sl, #24
   8b1c2:	e76e      	b.n	8b0a2 <_realloc_r+0x22e>
   8b1c4:	20000f50 	.word	0x20000f50
   8b1c8:	6922      	ldr	r2, [r4, #16]
   8b1ca:	f104 0118 	add.w	r1, r4, #24
   8b1ce:	f8ca 2018 	str.w	r2, [sl, #24]
   8b1d2:	6960      	ldr	r0, [r4, #20]
   8b1d4:	f10a 0220 	add.w	r2, sl, #32
   8b1d8:	f8ca 001c 	str.w	r0, [sl, #28]
   8b1dc:	e761      	b.n	8b0a2 <_realloc_r+0x22e>
   8b1de:	bf00      	nop

0008b1e0 <_sbrk_r>:
   8b1e0:	b538      	push	{r3, r4, r5, lr}
   8b1e2:	2300      	movs	r3, #0
   8b1e4:	4c06      	ldr	r4, [pc, #24]	; (8b200 <_sbrk_r+0x20>)
   8b1e6:	4605      	mov	r5, r0
   8b1e8:	4608      	mov	r0, r1
   8b1ea:	6023      	str	r3, [r4, #0]
   8b1ec:	f7fa fb8e 	bl	8590c <_sbrk>
   8b1f0:	1c43      	adds	r3, r0, #1
   8b1f2:	d000      	beq.n	8b1f6 <_sbrk_r+0x16>
   8b1f4:	bd38      	pop	{r3, r4, r5, pc}
   8b1f6:	6823      	ldr	r3, [r4, #0]
   8b1f8:	2b00      	cmp	r3, #0
   8b1fa:	d0fb      	beq.n	8b1f4 <_sbrk_r+0x14>
   8b1fc:	602b      	str	r3, [r5, #0]
   8b1fe:	bd38      	pop	{r3, r4, r5, pc}
   8b200:	200026e0 	.word	0x200026e0

0008b204 <__sread>:
   8b204:	b510      	push	{r4, lr}
   8b206:	460c      	mov	r4, r1
   8b208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b20c:	f000 faa2 	bl	8b754 <_read_r>
   8b210:	2800      	cmp	r0, #0
   8b212:	db03      	blt.n	8b21c <__sread+0x18>
   8b214:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8b216:	4403      	add	r3, r0
   8b218:	6523      	str	r3, [r4, #80]	; 0x50
   8b21a:	bd10      	pop	{r4, pc}
   8b21c:	89a3      	ldrh	r3, [r4, #12]
   8b21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8b222:	81a3      	strh	r3, [r4, #12]
   8b224:	bd10      	pop	{r4, pc}
   8b226:	bf00      	nop

0008b228 <__swrite>:
   8b228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b22c:	460c      	mov	r4, r1
   8b22e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8b232:	461f      	mov	r7, r3
   8b234:	05cb      	lsls	r3, r1, #23
   8b236:	4616      	mov	r6, r2
   8b238:	4605      	mov	r5, r0
   8b23a:	d507      	bpl.n	8b24c <__swrite+0x24>
   8b23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b240:	2302      	movs	r3, #2
   8b242:	2200      	movs	r2, #0
   8b244:	f000 fa70 	bl	8b728 <_lseek_r>
   8b248:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8b24c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8b250:	81a1      	strh	r1, [r4, #12]
   8b252:	463b      	mov	r3, r7
   8b254:	4632      	mov	r2, r6
   8b256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b25a:	4628      	mov	r0, r5
   8b25c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b260:	f000 b920 	b.w	8b4a4 <_write_r>

0008b264 <__sseek>:
   8b264:	b510      	push	{r4, lr}
   8b266:	460c      	mov	r4, r1
   8b268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b26c:	f000 fa5c 	bl	8b728 <_lseek_r>
   8b270:	89a3      	ldrh	r3, [r4, #12]
   8b272:	1c42      	adds	r2, r0, #1
   8b274:	bf0e      	itee	eq
   8b276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8b27a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8b27e:	6520      	strne	r0, [r4, #80]	; 0x50
   8b280:	81a3      	strh	r3, [r4, #12]
   8b282:	bd10      	pop	{r4, pc}

0008b284 <__sclose>:
   8b284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b288:	f000 b9b4 	b.w	8b5f4 <_close_r>

0008b28c <__ssprint_r>:
   8b28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b290:	6893      	ldr	r3, [r2, #8]
   8b292:	b083      	sub	sp, #12
   8b294:	4690      	mov	r8, r2
   8b296:	2b00      	cmp	r3, #0
   8b298:	d070      	beq.n	8b37c <__ssprint_r+0xf0>
   8b29a:	4682      	mov	sl, r0
   8b29c:	460c      	mov	r4, r1
   8b29e:	6817      	ldr	r7, [r2, #0]
   8b2a0:	688d      	ldr	r5, [r1, #8]
   8b2a2:	6808      	ldr	r0, [r1, #0]
   8b2a4:	e042      	b.n	8b32c <__ssprint_r+0xa0>
   8b2a6:	89a3      	ldrh	r3, [r4, #12]
   8b2a8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b2ac:	d02e      	beq.n	8b30c <__ssprint_r+0x80>
   8b2ae:	6965      	ldr	r5, [r4, #20]
   8b2b0:	6921      	ldr	r1, [r4, #16]
   8b2b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8b2b6:	eba0 0b01 	sub.w	fp, r0, r1
   8b2ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8b2be:	f10b 0001 	add.w	r0, fp, #1
   8b2c2:	106d      	asrs	r5, r5, #1
   8b2c4:	4430      	add	r0, r6
   8b2c6:	42a8      	cmp	r0, r5
   8b2c8:	462a      	mov	r2, r5
   8b2ca:	bf84      	itt	hi
   8b2cc:	4605      	movhi	r5, r0
   8b2ce:	462a      	movhi	r2, r5
   8b2d0:	055b      	lsls	r3, r3, #21
   8b2d2:	d538      	bpl.n	8b346 <__ssprint_r+0xba>
   8b2d4:	4611      	mov	r1, r2
   8b2d6:	4650      	mov	r0, sl
   8b2d8:	f7fe ff62 	bl	8a1a0 <_malloc_r>
   8b2dc:	2800      	cmp	r0, #0
   8b2de:	d03c      	beq.n	8b35a <__ssprint_r+0xce>
   8b2e0:	465a      	mov	r2, fp
   8b2e2:	6921      	ldr	r1, [r4, #16]
   8b2e4:	9001      	str	r0, [sp, #4]
   8b2e6:	f7fa fe89 	bl	85ffc <memcpy>
   8b2ea:	89a2      	ldrh	r2, [r4, #12]
   8b2ec:	9b01      	ldr	r3, [sp, #4]
   8b2ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b2f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b2f6:	81a2      	strh	r2, [r4, #12]
   8b2f8:	eba5 020b 	sub.w	r2, r5, fp
   8b2fc:	eb03 000b 	add.w	r0, r3, fp
   8b300:	6165      	str	r5, [r4, #20]
   8b302:	46b3      	mov	fp, r6
   8b304:	4635      	mov	r5, r6
   8b306:	6123      	str	r3, [r4, #16]
   8b308:	6020      	str	r0, [r4, #0]
   8b30a:	60a2      	str	r2, [r4, #8]
   8b30c:	465a      	mov	r2, fp
   8b30e:	4649      	mov	r1, r9
   8b310:	f7ff fa44 	bl	8a79c <memmove>
   8b314:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b318:	68a2      	ldr	r2, [r4, #8]
   8b31a:	6820      	ldr	r0, [r4, #0]
   8b31c:	1b55      	subs	r5, r2, r5
   8b31e:	4458      	add	r0, fp
   8b320:	1b9e      	subs	r6, r3, r6
   8b322:	60a5      	str	r5, [r4, #8]
   8b324:	6020      	str	r0, [r4, #0]
   8b326:	f8c8 6008 	str.w	r6, [r8, #8]
   8b32a:	b33e      	cbz	r6, 8b37c <__ssprint_r+0xf0>
   8b32c:	687e      	ldr	r6, [r7, #4]
   8b32e:	463b      	mov	r3, r7
   8b330:	3708      	adds	r7, #8
   8b332:	2e00      	cmp	r6, #0
   8b334:	d0fa      	beq.n	8b32c <__ssprint_r+0xa0>
   8b336:	42ae      	cmp	r6, r5
   8b338:	f8d3 9000 	ldr.w	r9, [r3]
   8b33c:	46ab      	mov	fp, r5
   8b33e:	d2b2      	bcs.n	8b2a6 <__ssprint_r+0x1a>
   8b340:	4635      	mov	r5, r6
   8b342:	46b3      	mov	fp, r6
   8b344:	e7e2      	b.n	8b30c <__ssprint_r+0x80>
   8b346:	4650      	mov	r0, sl
   8b348:	f7ff fd94 	bl	8ae74 <_realloc_r>
   8b34c:	4603      	mov	r3, r0
   8b34e:	2800      	cmp	r0, #0
   8b350:	d1d2      	bne.n	8b2f8 <__ssprint_r+0x6c>
   8b352:	6921      	ldr	r1, [r4, #16]
   8b354:	4650      	mov	r0, sl
   8b356:	f7fe fbf7 	bl	89b48 <_free_r>
   8b35a:	230c      	movs	r3, #12
   8b35c:	2200      	movs	r2, #0
   8b35e:	f04f 30ff 	mov.w	r0, #4294967295
   8b362:	f8ca 3000 	str.w	r3, [sl]
   8b366:	89a3      	ldrh	r3, [r4, #12]
   8b368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b36c:	81a3      	strh	r3, [r4, #12]
   8b36e:	f8c8 2008 	str.w	r2, [r8, #8]
   8b372:	f8c8 2004 	str.w	r2, [r8, #4]
   8b376:	b003      	add	sp, #12
   8b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b37c:	2000      	movs	r0, #0
   8b37e:	f8c8 0004 	str.w	r0, [r8, #4]
   8b382:	b003      	add	sp, #12
   8b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008b388 <__swbuf_r>:
   8b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b38a:	460d      	mov	r5, r1
   8b38c:	4614      	mov	r4, r2
   8b38e:	4606      	mov	r6, r0
   8b390:	b110      	cbz	r0, 8b398 <__swbuf_r+0x10>
   8b392:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b394:	2b00      	cmp	r3, #0
   8b396:	d04b      	beq.n	8b430 <__swbuf_r+0xa8>
   8b398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b39c:	69a3      	ldr	r3, [r4, #24]
   8b39e:	b291      	uxth	r1, r2
   8b3a0:	0708      	lsls	r0, r1, #28
   8b3a2:	60a3      	str	r3, [r4, #8]
   8b3a4:	d539      	bpl.n	8b41a <__swbuf_r+0x92>
   8b3a6:	6923      	ldr	r3, [r4, #16]
   8b3a8:	2b00      	cmp	r3, #0
   8b3aa:	d036      	beq.n	8b41a <__swbuf_r+0x92>
   8b3ac:	b2ed      	uxtb	r5, r5
   8b3ae:	0489      	lsls	r1, r1, #18
   8b3b0:	462f      	mov	r7, r5
   8b3b2:	d515      	bpl.n	8b3e0 <__swbuf_r+0x58>
   8b3b4:	6822      	ldr	r2, [r4, #0]
   8b3b6:	6961      	ldr	r1, [r4, #20]
   8b3b8:	1ad3      	subs	r3, r2, r3
   8b3ba:	428b      	cmp	r3, r1
   8b3bc:	da1c      	bge.n	8b3f8 <__swbuf_r+0x70>
   8b3be:	3301      	adds	r3, #1
   8b3c0:	68a1      	ldr	r1, [r4, #8]
   8b3c2:	1c50      	adds	r0, r2, #1
   8b3c4:	3901      	subs	r1, #1
   8b3c6:	60a1      	str	r1, [r4, #8]
   8b3c8:	6020      	str	r0, [r4, #0]
   8b3ca:	7015      	strb	r5, [r2, #0]
   8b3cc:	6962      	ldr	r2, [r4, #20]
   8b3ce:	429a      	cmp	r2, r3
   8b3d0:	d01a      	beq.n	8b408 <__swbuf_r+0x80>
   8b3d2:	89a3      	ldrh	r3, [r4, #12]
   8b3d4:	07db      	lsls	r3, r3, #31
   8b3d6:	d501      	bpl.n	8b3dc <__swbuf_r+0x54>
   8b3d8:	2d0a      	cmp	r5, #10
   8b3da:	d015      	beq.n	8b408 <__swbuf_r+0x80>
   8b3dc:	4638      	mov	r0, r7
   8b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b3e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8b3e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b3e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8b3ea:	81a2      	strh	r2, [r4, #12]
   8b3ec:	6822      	ldr	r2, [r4, #0]
   8b3ee:	6661      	str	r1, [r4, #100]	; 0x64
   8b3f0:	6961      	ldr	r1, [r4, #20]
   8b3f2:	1ad3      	subs	r3, r2, r3
   8b3f4:	428b      	cmp	r3, r1
   8b3f6:	dbe2      	blt.n	8b3be <__swbuf_r+0x36>
   8b3f8:	4621      	mov	r1, r4
   8b3fa:	4630      	mov	r0, r6
   8b3fc:	f7fe fa26 	bl	8984c <_fflush_r>
   8b400:	b940      	cbnz	r0, 8b414 <__swbuf_r+0x8c>
   8b402:	2301      	movs	r3, #1
   8b404:	6822      	ldr	r2, [r4, #0]
   8b406:	e7db      	b.n	8b3c0 <__swbuf_r+0x38>
   8b408:	4621      	mov	r1, r4
   8b40a:	4630      	mov	r0, r6
   8b40c:	f7fe fa1e 	bl	8984c <_fflush_r>
   8b410:	2800      	cmp	r0, #0
   8b412:	d0e3      	beq.n	8b3dc <__swbuf_r+0x54>
   8b414:	f04f 37ff 	mov.w	r7, #4294967295
   8b418:	e7e0      	b.n	8b3dc <__swbuf_r+0x54>
   8b41a:	4621      	mov	r1, r4
   8b41c:	4630      	mov	r0, r6
   8b41e:	f7fd f94f 	bl	886c0 <__swsetup_r>
   8b422:	2800      	cmp	r0, #0
   8b424:	d1f6      	bne.n	8b414 <__swbuf_r+0x8c>
   8b426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b42a:	6923      	ldr	r3, [r4, #16]
   8b42c:	b291      	uxth	r1, r2
   8b42e:	e7bd      	b.n	8b3ac <__swbuf_r+0x24>
   8b430:	f7fe fa64 	bl	898fc <__sinit>
   8b434:	e7b0      	b.n	8b398 <__swbuf_r+0x10>
   8b436:	bf00      	nop

0008b438 <_wcrtomb_r>:
   8b438:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b43a:	4606      	mov	r6, r0
   8b43c:	b085      	sub	sp, #20
   8b43e:	461f      	mov	r7, r3
   8b440:	b189      	cbz	r1, 8b466 <_wcrtomb_r+0x2e>
   8b442:	4c10      	ldr	r4, [pc, #64]	; (8b484 <_wcrtomb_r+0x4c>)
   8b444:	4d10      	ldr	r5, [pc, #64]	; (8b488 <_wcrtomb_r+0x50>)
   8b446:	6824      	ldr	r4, [r4, #0]
   8b448:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8b44a:	2c00      	cmp	r4, #0
   8b44c:	bf08      	it	eq
   8b44e:	462c      	moveq	r4, r5
   8b450:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8b454:	47a0      	blx	r4
   8b456:	1c43      	adds	r3, r0, #1
   8b458:	d103      	bne.n	8b462 <_wcrtomb_r+0x2a>
   8b45a:	2200      	movs	r2, #0
   8b45c:	238a      	movs	r3, #138	; 0x8a
   8b45e:	603a      	str	r2, [r7, #0]
   8b460:	6033      	str	r3, [r6, #0]
   8b462:	b005      	add	sp, #20
   8b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b466:	460c      	mov	r4, r1
   8b468:	4a06      	ldr	r2, [pc, #24]	; (8b484 <_wcrtomb_r+0x4c>)
   8b46a:	4d07      	ldr	r5, [pc, #28]	; (8b488 <_wcrtomb_r+0x50>)
   8b46c:	6811      	ldr	r1, [r2, #0]
   8b46e:	4622      	mov	r2, r4
   8b470:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8b472:	a901      	add	r1, sp, #4
   8b474:	2c00      	cmp	r4, #0
   8b476:	bf08      	it	eq
   8b478:	462c      	moveq	r4, r5
   8b47a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8b47e:	47a0      	blx	r4
   8b480:	e7e9      	b.n	8b456 <_wcrtomb_r+0x1e>
   8b482:	bf00      	nop
   8b484:	200009b0 	.word	0x200009b0
   8b488:	20000de4 	.word	0x20000de4

0008b48c <__ascii_wctomb>:
   8b48c:	b119      	cbz	r1, 8b496 <__ascii_wctomb+0xa>
   8b48e:	2aff      	cmp	r2, #255	; 0xff
   8b490:	d803      	bhi.n	8b49a <__ascii_wctomb+0xe>
   8b492:	700a      	strb	r2, [r1, #0]
   8b494:	2101      	movs	r1, #1
   8b496:	4608      	mov	r0, r1
   8b498:	4770      	bx	lr
   8b49a:	238a      	movs	r3, #138	; 0x8a
   8b49c:	f04f 31ff 	mov.w	r1, #4294967295
   8b4a0:	6003      	str	r3, [r0, #0]
   8b4a2:	e7f8      	b.n	8b496 <__ascii_wctomb+0xa>

0008b4a4 <_write_r>:
   8b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b4a6:	460e      	mov	r6, r1
   8b4a8:	2500      	movs	r5, #0
   8b4aa:	4c08      	ldr	r4, [pc, #32]	; (8b4cc <_write_r+0x28>)
   8b4ac:	4611      	mov	r1, r2
   8b4ae:	4607      	mov	r7, r0
   8b4b0:	461a      	mov	r2, r3
   8b4b2:	4630      	mov	r0, r6
   8b4b4:	6025      	str	r5, [r4, #0]
   8b4b6:	f7f8 facd 	bl	83a54 <_write>
   8b4ba:	1c43      	adds	r3, r0, #1
   8b4bc:	d000      	beq.n	8b4c0 <_write_r+0x1c>
   8b4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b4c0:	6823      	ldr	r3, [r4, #0]
   8b4c2:	2b00      	cmp	r3, #0
   8b4c4:	d0fb      	beq.n	8b4be <_write_r+0x1a>
   8b4c6:	603b      	str	r3, [r7, #0]
   8b4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b4ca:	bf00      	nop
   8b4cc:	200026e0 	.word	0x200026e0

0008b4d0 <__register_exitproc>:
   8b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b4d4:	4d2c      	ldr	r5, [pc, #176]	; (8b588 <__register_exitproc+0xb8>)
   8b4d6:	4606      	mov	r6, r0
   8b4d8:	6828      	ldr	r0, [r5, #0]
   8b4da:	4698      	mov	r8, r3
   8b4dc:	460f      	mov	r7, r1
   8b4de:	4691      	mov	r9, r2
   8b4e0:	f7fe fdda 	bl	8a098 <__retarget_lock_acquire_recursive>
   8b4e4:	4b29      	ldr	r3, [pc, #164]	; (8b58c <__register_exitproc+0xbc>)
   8b4e6:	681c      	ldr	r4, [r3, #0]
   8b4e8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8b4ec:	2b00      	cmp	r3, #0
   8b4ee:	d03e      	beq.n	8b56e <__register_exitproc+0x9e>
   8b4f0:	685a      	ldr	r2, [r3, #4]
   8b4f2:	2a1f      	cmp	r2, #31
   8b4f4:	dc1c      	bgt.n	8b530 <__register_exitproc+0x60>
   8b4f6:	f102 0e01 	add.w	lr, r2, #1
   8b4fa:	b176      	cbz	r6, 8b51a <__register_exitproc+0x4a>
   8b4fc:	2101      	movs	r1, #1
   8b4fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8b502:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8b506:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8b50a:	4091      	lsls	r1, r2
   8b50c:	4308      	orrs	r0, r1
   8b50e:	2e02      	cmp	r6, #2
   8b510:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8b514:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8b518:	d023      	beq.n	8b562 <__register_exitproc+0x92>
   8b51a:	3202      	adds	r2, #2
   8b51c:	f8c3 e004 	str.w	lr, [r3, #4]
   8b520:	6828      	ldr	r0, [r5, #0]
   8b522:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b526:	f7fe fdb9 	bl	8a09c <__retarget_lock_release_recursive>
   8b52a:	2000      	movs	r0, #0
   8b52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b530:	4b17      	ldr	r3, [pc, #92]	; (8b590 <__register_exitproc+0xc0>)
   8b532:	b30b      	cbz	r3, 8b578 <__register_exitproc+0xa8>
   8b534:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8b538:	f7fe fe2a 	bl	8a190 <malloc>
   8b53c:	4603      	mov	r3, r0
   8b53e:	b1d8      	cbz	r0, 8b578 <__register_exitproc+0xa8>
   8b540:	2000      	movs	r0, #0
   8b542:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8b546:	f04f 0e01 	mov.w	lr, #1
   8b54a:	6058      	str	r0, [r3, #4]
   8b54c:	6019      	str	r1, [r3, #0]
   8b54e:	4602      	mov	r2, r0
   8b550:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8b554:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8b558:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8b55c:	2e00      	cmp	r6, #0
   8b55e:	d0dc      	beq.n	8b51a <__register_exitproc+0x4a>
   8b560:	e7cc      	b.n	8b4fc <__register_exitproc+0x2c>
   8b562:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8b566:	4301      	orrs	r1, r0
   8b568:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8b56c:	e7d5      	b.n	8b51a <__register_exitproc+0x4a>
   8b56e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8b572:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8b576:	e7bb      	b.n	8b4f0 <__register_exitproc+0x20>
   8b578:	6828      	ldr	r0, [r5, #0]
   8b57a:	f7fe fd8f 	bl	8a09c <__retarget_lock_release_recursive>
   8b57e:	f04f 30ff 	mov.w	r0, #4294967295
   8b582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b586:	bf00      	nop
   8b588:	20000de0 	.word	0x20000de0
   8b58c:	0008c1cc 	.word	0x0008c1cc
   8b590:	0008a191 	.word	0x0008a191

0008b594 <_calloc_r>:
   8b594:	b510      	push	{r4, lr}
   8b596:	fb02 f101 	mul.w	r1, r2, r1
   8b59a:	f7fe fe01 	bl	8a1a0 <_malloc_r>
   8b59e:	4604      	mov	r4, r0
   8b5a0:	b1d8      	cbz	r0, 8b5da <_calloc_r+0x46>
   8b5a2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8b5a6:	f022 0203 	bic.w	r2, r2, #3
   8b5aa:	3a04      	subs	r2, #4
   8b5ac:	2a24      	cmp	r2, #36	; 0x24
   8b5ae:	d818      	bhi.n	8b5e2 <_calloc_r+0x4e>
   8b5b0:	2a13      	cmp	r2, #19
   8b5b2:	d914      	bls.n	8b5de <_calloc_r+0x4a>
   8b5b4:	2300      	movs	r3, #0
   8b5b6:	2a1b      	cmp	r2, #27
   8b5b8:	6003      	str	r3, [r0, #0]
   8b5ba:	6043      	str	r3, [r0, #4]
   8b5bc:	d916      	bls.n	8b5ec <_calloc_r+0x58>
   8b5be:	2a24      	cmp	r2, #36	; 0x24
   8b5c0:	6083      	str	r3, [r0, #8]
   8b5c2:	60c3      	str	r3, [r0, #12]
   8b5c4:	bf11      	iteee	ne
   8b5c6:	f100 0210 	addne.w	r2, r0, #16
   8b5ca:	6103      	streq	r3, [r0, #16]
   8b5cc:	6143      	streq	r3, [r0, #20]
   8b5ce:	f100 0218 	addeq.w	r2, r0, #24
   8b5d2:	2300      	movs	r3, #0
   8b5d4:	6013      	str	r3, [r2, #0]
   8b5d6:	6053      	str	r3, [r2, #4]
   8b5d8:	6093      	str	r3, [r2, #8]
   8b5da:	4620      	mov	r0, r4
   8b5dc:	bd10      	pop	{r4, pc}
   8b5de:	4602      	mov	r2, r0
   8b5e0:	e7f7      	b.n	8b5d2 <_calloc_r+0x3e>
   8b5e2:	2100      	movs	r1, #0
   8b5e4:	f7fa fd80 	bl	860e8 <memset>
   8b5e8:	4620      	mov	r0, r4
   8b5ea:	bd10      	pop	{r4, pc}
   8b5ec:	f100 0208 	add.w	r2, r0, #8
   8b5f0:	e7ef      	b.n	8b5d2 <_calloc_r+0x3e>
   8b5f2:	bf00      	nop

0008b5f4 <_close_r>:
   8b5f4:	b538      	push	{r3, r4, r5, lr}
   8b5f6:	2300      	movs	r3, #0
   8b5f8:	4c06      	ldr	r4, [pc, #24]	; (8b614 <_close_r+0x20>)
   8b5fa:	4605      	mov	r5, r0
   8b5fc:	4608      	mov	r0, r1
   8b5fe:	6023      	str	r3, [r4, #0]
   8b600:	f7fa f9a0 	bl	85944 <_close>
   8b604:	1c43      	adds	r3, r0, #1
   8b606:	d000      	beq.n	8b60a <_close_r+0x16>
   8b608:	bd38      	pop	{r3, r4, r5, pc}
   8b60a:	6823      	ldr	r3, [r4, #0]
   8b60c:	2b00      	cmp	r3, #0
   8b60e:	d0fb      	beq.n	8b608 <_close_r+0x14>
   8b610:	602b      	str	r3, [r5, #0]
   8b612:	bd38      	pop	{r3, r4, r5, pc}
   8b614:	200026e0 	.word	0x200026e0

0008b618 <_fclose_r>:
   8b618:	b570      	push	{r4, r5, r6, lr}
   8b61a:	b159      	cbz	r1, 8b634 <_fclose_r+0x1c>
   8b61c:	4605      	mov	r5, r0
   8b61e:	460c      	mov	r4, r1
   8b620:	b110      	cbz	r0, 8b628 <_fclose_r+0x10>
   8b622:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b624:	2b00      	cmp	r3, #0
   8b626:	d03c      	beq.n	8b6a2 <_fclose_r+0x8a>
   8b628:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b62a:	07d8      	lsls	r0, r3, #31
   8b62c:	d505      	bpl.n	8b63a <_fclose_r+0x22>
   8b62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b632:	b92b      	cbnz	r3, 8b640 <_fclose_r+0x28>
   8b634:	2600      	movs	r6, #0
   8b636:	4630      	mov	r0, r6
   8b638:	bd70      	pop	{r4, r5, r6, pc}
   8b63a:	89a3      	ldrh	r3, [r4, #12]
   8b63c:	0599      	lsls	r1, r3, #22
   8b63e:	d53c      	bpl.n	8b6ba <_fclose_r+0xa2>
   8b640:	4621      	mov	r1, r4
   8b642:	4628      	mov	r0, r5
   8b644:	f7fe f866 	bl	89714 <__sflush_r>
   8b648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8b64a:	4606      	mov	r6, r0
   8b64c:	b133      	cbz	r3, 8b65c <_fclose_r+0x44>
   8b64e:	69e1      	ldr	r1, [r4, #28]
   8b650:	4628      	mov	r0, r5
   8b652:	4798      	blx	r3
   8b654:	2800      	cmp	r0, #0
   8b656:	bfb8      	it	lt
   8b658:	f04f 36ff 	movlt.w	r6, #4294967295
   8b65c:	89a3      	ldrh	r3, [r4, #12]
   8b65e:	061a      	lsls	r2, r3, #24
   8b660:	d422      	bmi.n	8b6a8 <_fclose_r+0x90>
   8b662:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b664:	b141      	cbz	r1, 8b678 <_fclose_r+0x60>
   8b666:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b66a:	4299      	cmp	r1, r3
   8b66c:	d002      	beq.n	8b674 <_fclose_r+0x5c>
   8b66e:	4628      	mov	r0, r5
   8b670:	f7fe fa6a 	bl	89b48 <_free_r>
   8b674:	2300      	movs	r3, #0
   8b676:	6323      	str	r3, [r4, #48]	; 0x30
   8b678:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8b67a:	b121      	cbz	r1, 8b686 <_fclose_r+0x6e>
   8b67c:	4628      	mov	r0, r5
   8b67e:	f7fe fa63 	bl	89b48 <_free_r>
   8b682:	2300      	movs	r3, #0
   8b684:	6463      	str	r3, [r4, #68]	; 0x44
   8b686:	f7fe f969 	bl	8995c <__sfp_lock_acquire>
   8b68a:	2200      	movs	r2, #0
   8b68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b68e:	81a2      	strh	r2, [r4, #12]
   8b690:	07db      	lsls	r3, r3, #31
   8b692:	d50e      	bpl.n	8b6b2 <_fclose_r+0x9a>
   8b694:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b696:	f7fe fcfd 	bl	8a094 <__retarget_lock_close_recursive>
   8b69a:	f7fe f965 	bl	89968 <__sfp_lock_release>
   8b69e:	4630      	mov	r0, r6
   8b6a0:	bd70      	pop	{r4, r5, r6, pc}
   8b6a2:	f7fe f92b 	bl	898fc <__sinit>
   8b6a6:	e7bf      	b.n	8b628 <_fclose_r+0x10>
   8b6a8:	6921      	ldr	r1, [r4, #16]
   8b6aa:	4628      	mov	r0, r5
   8b6ac:	f7fe fa4c 	bl	89b48 <_free_r>
   8b6b0:	e7d7      	b.n	8b662 <_fclose_r+0x4a>
   8b6b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b6b4:	f7fe fcf2 	bl	8a09c <__retarget_lock_release_recursive>
   8b6b8:	e7ec      	b.n	8b694 <_fclose_r+0x7c>
   8b6ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b6bc:	f7fe fcec 	bl	8a098 <__retarget_lock_acquire_recursive>
   8b6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6c4:	2b00      	cmp	r3, #0
   8b6c6:	d1bb      	bne.n	8b640 <_fclose_r+0x28>
   8b6c8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8b6ca:	f016 0601 	ands.w	r6, r6, #1
   8b6ce:	d1b1      	bne.n	8b634 <_fclose_r+0x1c>
   8b6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b6d2:	f7fe fce3 	bl	8a09c <__retarget_lock_release_recursive>
   8b6d6:	4630      	mov	r0, r6
   8b6d8:	bd70      	pop	{r4, r5, r6, pc}
   8b6da:	bf00      	nop

0008b6dc <_fstat_r>:
   8b6dc:	b570      	push	{r4, r5, r6, lr}
   8b6de:	460d      	mov	r5, r1
   8b6e0:	2300      	movs	r3, #0
   8b6e2:	4c07      	ldr	r4, [pc, #28]	; (8b700 <_fstat_r+0x24>)
   8b6e4:	4606      	mov	r6, r0
   8b6e6:	4611      	mov	r1, r2
   8b6e8:	4628      	mov	r0, r5
   8b6ea:	6023      	str	r3, [r4, #0]
   8b6ec:	f7fa f92d 	bl	8594a <_fstat>
   8b6f0:	1c43      	adds	r3, r0, #1
   8b6f2:	d000      	beq.n	8b6f6 <_fstat_r+0x1a>
   8b6f4:	bd70      	pop	{r4, r5, r6, pc}
   8b6f6:	6823      	ldr	r3, [r4, #0]
   8b6f8:	2b00      	cmp	r3, #0
   8b6fa:	d0fb      	beq.n	8b6f4 <_fstat_r+0x18>
   8b6fc:	6033      	str	r3, [r6, #0]
   8b6fe:	bd70      	pop	{r4, r5, r6, pc}
   8b700:	200026e0 	.word	0x200026e0

0008b704 <_isatty_r>:
   8b704:	b538      	push	{r3, r4, r5, lr}
   8b706:	2300      	movs	r3, #0
   8b708:	4c06      	ldr	r4, [pc, #24]	; (8b724 <_isatty_r+0x20>)
   8b70a:	4605      	mov	r5, r0
   8b70c:	4608      	mov	r0, r1
   8b70e:	6023      	str	r3, [r4, #0]
   8b710:	f7fa f920 	bl	85954 <_isatty>
   8b714:	1c43      	adds	r3, r0, #1
   8b716:	d000      	beq.n	8b71a <_isatty_r+0x16>
   8b718:	bd38      	pop	{r3, r4, r5, pc}
   8b71a:	6823      	ldr	r3, [r4, #0]
   8b71c:	2b00      	cmp	r3, #0
   8b71e:	d0fb      	beq.n	8b718 <_isatty_r+0x14>
   8b720:	602b      	str	r3, [r5, #0]
   8b722:	bd38      	pop	{r3, r4, r5, pc}
   8b724:	200026e0 	.word	0x200026e0

0008b728 <_lseek_r>:
   8b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b72a:	460e      	mov	r6, r1
   8b72c:	2500      	movs	r5, #0
   8b72e:	4c08      	ldr	r4, [pc, #32]	; (8b750 <_lseek_r+0x28>)
   8b730:	4611      	mov	r1, r2
   8b732:	4607      	mov	r7, r0
   8b734:	461a      	mov	r2, r3
   8b736:	4630      	mov	r0, r6
   8b738:	6025      	str	r5, [r4, #0]
   8b73a:	f7fa f90d 	bl	85958 <_lseek>
   8b73e:	1c43      	adds	r3, r0, #1
   8b740:	d000      	beq.n	8b744 <_lseek_r+0x1c>
   8b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b744:	6823      	ldr	r3, [r4, #0]
   8b746:	2b00      	cmp	r3, #0
   8b748:	d0fb      	beq.n	8b742 <_lseek_r+0x1a>
   8b74a:	603b      	str	r3, [r7, #0]
   8b74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b74e:	bf00      	nop
   8b750:	200026e0 	.word	0x200026e0

0008b754 <_read_r>:
   8b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b756:	460e      	mov	r6, r1
   8b758:	2500      	movs	r5, #0
   8b75a:	4c08      	ldr	r4, [pc, #32]	; (8b77c <_read_r+0x28>)
   8b75c:	4611      	mov	r1, r2
   8b75e:	4607      	mov	r7, r0
   8b760:	461a      	mov	r2, r3
   8b762:	4630      	mov	r0, r6
   8b764:	6025      	str	r5, [r4, #0]
   8b766:	f7f8 f957 	bl	83a18 <_read>
   8b76a:	1c43      	adds	r3, r0, #1
   8b76c:	d000      	beq.n	8b770 <_read_r+0x1c>
   8b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b770:	6823      	ldr	r3, [r4, #0]
   8b772:	2b00      	cmp	r3, #0
   8b774:	d0fb      	beq.n	8b76e <_read_r+0x1a>
   8b776:	603b      	str	r3, [r7, #0]
   8b778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b77a:	bf00      	nop
   8b77c:	200026e0 	.word	0x200026e0

0008b780 <__aeabi_drsub>:
   8b780:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8b784:	e002      	b.n	8b78c <__adddf3>
   8b786:	bf00      	nop

0008b788 <__aeabi_dsub>:
   8b788:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008b78c <__adddf3>:
   8b78c:	b530      	push	{r4, r5, lr}
   8b78e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8b792:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8b796:	ea94 0f05 	teq	r4, r5
   8b79a:	bf08      	it	eq
   8b79c:	ea90 0f02 	teqeq	r0, r2
   8b7a0:	bf1f      	itttt	ne
   8b7a2:	ea54 0c00 	orrsne.w	ip, r4, r0
   8b7a6:	ea55 0c02 	orrsne.w	ip, r5, r2
   8b7aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8b7ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b7b2:	f000 80e2 	beq.w	8b97a <__adddf3+0x1ee>
   8b7b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8b7ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8b7be:	bfb8      	it	lt
   8b7c0:	426d      	neglt	r5, r5
   8b7c2:	dd0c      	ble.n	8b7de <__adddf3+0x52>
   8b7c4:	442c      	add	r4, r5
   8b7c6:	ea80 0202 	eor.w	r2, r0, r2
   8b7ca:	ea81 0303 	eor.w	r3, r1, r3
   8b7ce:	ea82 0000 	eor.w	r0, r2, r0
   8b7d2:	ea83 0101 	eor.w	r1, r3, r1
   8b7d6:	ea80 0202 	eor.w	r2, r0, r2
   8b7da:	ea81 0303 	eor.w	r3, r1, r3
   8b7de:	2d36      	cmp	r5, #54	; 0x36
   8b7e0:	bf88      	it	hi
   8b7e2:	bd30      	pophi	{r4, r5, pc}
   8b7e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8b7e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8b7ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8b7f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8b7f4:	d002      	beq.n	8b7fc <__adddf3+0x70>
   8b7f6:	4240      	negs	r0, r0
   8b7f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8b7fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8b800:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8b804:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8b808:	d002      	beq.n	8b810 <__adddf3+0x84>
   8b80a:	4252      	negs	r2, r2
   8b80c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8b810:	ea94 0f05 	teq	r4, r5
   8b814:	f000 80a7 	beq.w	8b966 <__adddf3+0x1da>
   8b818:	f1a4 0401 	sub.w	r4, r4, #1
   8b81c:	f1d5 0e20 	rsbs	lr, r5, #32
   8b820:	db0d      	blt.n	8b83e <__adddf3+0xb2>
   8b822:	fa02 fc0e 	lsl.w	ip, r2, lr
   8b826:	fa22 f205 	lsr.w	r2, r2, r5
   8b82a:	1880      	adds	r0, r0, r2
   8b82c:	f141 0100 	adc.w	r1, r1, #0
   8b830:	fa03 f20e 	lsl.w	r2, r3, lr
   8b834:	1880      	adds	r0, r0, r2
   8b836:	fa43 f305 	asr.w	r3, r3, r5
   8b83a:	4159      	adcs	r1, r3
   8b83c:	e00e      	b.n	8b85c <__adddf3+0xd0>
   8b83e:	f1a5 0520 	sub.w	r5, r5, #32
   8b842:	f10e 0e20 	add.w	lr, lr, #32
   8b846:	2a01      	cmp	r2, #1
   8b848:	fa03 fc0e 	lsl.w	ip, r3, lr
   8b84c:	bf28      	it	cs
   8b84e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8b852:	fa43 f305 	asr.w	r3, r3, r5
   8b856:	18c0      	adds	r0, r0, r3
   8b858:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8b85c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b860:	d507      	bpl.n	8b872 <__adddf3+0xe6>
   8b862:	f04f 0e00 	mov.w	lr, #0
   8b866:	f1dc 0c00 	rsbs	ip, ip, #0
   8b86a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8b86e:	eb6e 0101 	sbc.w	r1, lr, r1
   8b872:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8b876:	d31b      	bcc.n	8b8b0 <__adddf3+0x124>
   8b878:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8b87c:	d30c      	bcc.n	8b898 <__adddf3+0x10c>
   8b87e:	0849      	lsrs	r1, r1, #1
   8b880:	ea5f 0030 	movs.w	r0, r0, rrx
   8b884:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8b888:	f104 0401 	add.w	r4, r4, #1
   8b88c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8b890:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8b894:	f080 809a 	bcs.w	8b9cc <__adddf3+0x240>
   8b898:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8b89c:	bf08      	it	eq
   8b89e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8b8a2:	f150 0000 	adcs.w	r0, r0, #0
   8b8a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8b8aa:	ea41 0105 	orr.w	r1, r1, r5
   8b8ae:	bd30      	pop	{r4, r5, pc}
   8b8b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8b8b4:	4140      	adcs	r0, r0
   8b8b6:	eb41 0101 	adc.w	r1, r1, r1
   8b8ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8b8be:	f1a4 0401 	sub.w	r4, r4, #1
   8b8c2:	d1e9      	bne.n	8b898 <__adddf3+0x10c>
   8b8c4:	f091 0f00 	teq	r1, #0
   8b8c8:	bf04      	itt	eq
   8b8ca:	4601      	moveq	r1, r0
   8b8cc:	2000      	moveq	r0, #0
   8b8ce:	fab1 f381 	clz	r3, r1
   8b8d2:	bf08      	it	eq
   8b8d4:	3320      	addeq	r3, #32
   8b8d6:	f1a3 030b 	sub.w	r3, r3, #11
   8b8da:	f1b3 0220 	subs.w	r2, r3, #32
   8b8de:	da0c      	bge.n	8b8fa <__adddf3+0x16e>
   8b8e0:	320c      	adds	r2, #12
   8b8e2:	dd08      	ble.n	8b8f6 <__adddf3+0x16a>
   8b8e4:	f102 0c14 	add.w	ip, r2, #20
   8b8e8:	f1c2 020c 	rsb	r2, r2, #12
   8b8ec:	fa01 f00c 	lsl.w	r0, r1, ip
   8b8f0:	fa21 f102 	lsr.w	r1, r1, r2
   8b8f4:	e00c      	b.n	8b910 <__adddf3+0x184>
   8b8f6:	f102 0214 	add.w	r2, r2, #20
   8b8fa:	bfd8      	it	le
   8b8fc:	f1c2 0c20 	rsble	ip, r2, #32
   8b900:	fa01 f102 	lsl.w	r1, r1, r2
   8b904:	fa20 fc0c 	lsr.w	ip, r0, ip
   8b908:	bfdc      	itt	le
   8b90a:	ea41 010c 	orrle.w	r1, r1, ip
   8b90e:	4090      	lslle	r0, r2
   8b910:	1ae4      	subs	r4, r4, r3
   8b912:	bfa2      	ittt	ge
   8b914:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8b918:	4329      	orrge	r1, r5
   8b91a:	bd30      	popge	{r4, r5, pc}
   8b91c:	ea6f 0404 	mvn.w	r4, r4
   8b920:	3c1f      	subs	r4, #31
   8b922:	da1c      	bge.n	8b95e <__adddf3+0x1d2>
   8b924:	340c      	adds	r4, #12
   8b926:	dc0e      	bgt.n	8b946 <__adddf3+0x1ba>
   8b928:	f104 0414 	add.w	r4, r4, #20
   8b92c:	f1c4 0220 	rsb	r2, r4, #32
   8b930:	fa20 f004 	lsr.w	r0, r0, r4
   8b934:	fa01 f302 	lsl.w	r3, r1, r2
   8b938:	ea40 0003 	orr.w	r0, r0, r3
   8b93c:	fa21 f304 	lsr.w	r3, r1, r4
   8b940:	ea45 0103 	orr.w	r1, r5, r3
   8b944:	bd30      	pop	{r4, r5, pc}
   8b946:	f1c4 040c 	rsb	r4, r4, #12
   8b94a:	f1c4 0220 	rsb	r2, r4, #32
   8b94e:	fa20 f002 	lsr.w	r0, r0, r2
   8b952:	fa01 f304 	lsl.w	r3, r1, r4
   8b956:	ea40 0003 	orr.w	r0, r0, r3
   8b95a:	4629      	mov	r1, r5
   8b95c:	bd30      	pop	{r4, r5, pc}
   8b95e:	fa21 f004 	lsr.w	r0, r1, r4
   8b962:	4629      	mov	r1, r5
   8b964:	bd30      	pop	{r4, r5, pc}
   8b966:	f094 0f00 	teq	r4, #0
   8b96a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8b96e:	bf06      	itte	eq
   8b970:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8b974:	3401      	addeq	r4, #1
   8b976:	3d01      	subne	r5, #1
   8b978:	e74e      	b.n	8b818 <__adddf3+0x8c>
   8b97a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b97e:	bf18      	it	ne
   8b980:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8b984:	d029      	beq.n	8b9da <__adddf3+0x24e>
   8b986:	ea94 0f05 	teq	r4, r5
   8b98a:	bf08      	it	eq
   8b98c:	ea90 0f02 	teqeq	r0, r2
   8b990:	d005      	beq.n	8b99e <__adddf3+0x212>
   8b992:	ea54 0c00 	orrs.w	ip, r4, r0
   8b996:	bf04      	itt	eq
   8b998:	4619      	moveq	r1, r3
   8b99a:	4610      	moveq	r0, r2
   8b99c:	bd30      	pop	{r4, r5, pc}
   8b99e:	ea91 0f03 	teq	r1, r3
   8b9a2:	bf1e      	ittt	ne
   8b9a4:	2100      	movne	r1, #0
   8b9a6:	2000      	movne	r0, #0
   8b9a8:	bd30      	popne	{r4, r5, pc}
   8b9aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8b9ae:	d105      	bne.n	8b9bc <__adddf3+0x230>
   8b9b0:	0040      	lsls	r0, r0, #1
   8b9b2:	4149      	adcs	r1, r1
   8b9b4:	bf28      	it	cs
   8b9b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8b9ba:	bd30      	pop	{r4, r5, pc}
   8b9bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8b9c0:	bf3c      	itt	cc
   8b9c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8b9c6:	bd30      	popcc	{r4, r5, pc}
   8b9c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8b9cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8b9d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8b9d4:	f04f 0000 	mov.w	r0, #0
   8b9d8:	bd30      	pop	{r4, r5, pc}
   8b9da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8b9de:	bf1a      	itte	ne
   8b9e0:	4619      	movne	r1, r3
   8b9e2:	4610      	movne	r0, r2
   8b9e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8b9e8:	bf1c      	itt	ne
   8b9ea:	460b      	movne	r3, r1
   8b9ec:	4602      	movne	r2, r0
   8b9ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8b9f2:	bf06      	itte	eq
   8b9f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8b9f8:	ea91 0f03 	teqeq	r1, r3
   8b9fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8ba00:	bd30      	pop	{r4, r5, pc}
   8ba02:	bf00      	nop

0008ba04 <__aeabi_ui2d>:
   8ba04:	f090 0f00 	teq	r0, #0
   8ba08:	bf04      	itt	eq
   8ba0a:	2100      	moveq	r1, #0
   8ba0c:	4770      	bxeq	lr
   8ba0e:	b530      	push	{r4, r5, lr}
   8ba10:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ba14:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ba18:	f04f 0500 	mov.w	r5, #0
   8ba1c:	f04f 0100 	mov.w	r1, #0
   8ba20:	e750      	b.n	8b8c4 <__adddf3+0x138>
   8ba22:	bf00      	nop

0008ba24 <__aeabi_i2d>:
   8ba24:	f090 0f00 	teq	r0, #0
   8ba28:	bf04      	itt	eq
   8ba2a:	2100      	moveq	r1, #0
   8ba2c:	4770      	bxeq	lr
   8ba2e:	b530      	push	{r4, r5, lr}
   8ba30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ba34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ba38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8ba3c:	bf48      	it	mi
   8ba3e:	4240      	negmi	r0, r0
   8ba40:	f04f 0100 	mov.w	r1, #0
   8ba44:	e73e      	b.n	8b8c4 <__adddf3+0x138>
   8ba46:	bf00      	nop

0008ba48 <__aeabi_f2d>:
   8ba48:	0042      	lsls	r2, r0, #1
   8ba4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8ba4e:	ea4f 0131 	mov.w	r1, r1, rrx
   8ba52:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8ba56:	bf1f      	itttt	ne
   8ba58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8ba5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8ba60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8ba64:	4770      	bxne	lr
   8ba66:	f092 0f00 	teq	r2, #0
   8ba6a:	bf14      	ite	ne
   8ba6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8ba70:	4770      	bxeq	lr
   8ba72:	b530      	push	{r4, r5, lr}
   8ba74:	f44f 7460 	mov.w	r4, #896	; 0x380
   8ba78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ba7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8ba80:	e720      	b.n	8b8c4 <__adddf3+0x138>
   8ba82:	bf00      	nop

0008ba84 <__aeabi_ul2d>:
   8ba84:	ea50 0201 	orrs.w	r2, r0, r1
   8ba88:	bf08      	it	eq
   8ba8a:	4770      	bxeq	lr
   8ba8c:	b530      	push	{r4, r5, lr}
   8ba8e:	f04f 0500 	mov.w	r5, #0
   8ba92:	e00a      	b.n	8baaa <__aeabi_l2d+0x16>

0008ba94 <__aeabi_l2d>:
   8ba94:	ea50 0201 	orrs.w	r2, r0, r1
   8ba98:	bf08      	it	eq
   8ba9a:	4770      	bxeq	lr
   8ba9c:	b530      	push	{r4, r5, lr}
   8ba9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8baa2:	d502      	bpl.n	8baaa <__aeabi_l2d+0x16>
   8baa4:	4240      	negs	r0, r0
   8baa6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8baaa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8baae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bab2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8bab6:	f43f aedc 	beq.w	8b872 <__adddf3+0xe6>
   8baba:	f04f 0203 	mov.w	r2, #3
   8babe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8bac2:	bf18      	it	ne
   8bac4:	3203      	addne	r2, #3
   8bac6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8baca:	bf18      	it	ne
   8bacc:	3203      	addne	r2, #3
   8bace:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8bad2:	f1c2 0320 	rsb	r3, r2, #32
   8bad6:	fa00 fc03 	lsl.w	ip, r0, r3
   8bada:	fa20 f002 	lsr.w	r0, r0, r2
   8bade:	fa01 fe03 	lsl.w	lr, r1, r3
   8bae2:	ea40 000e 	orr.w	r0, r0, lr
   8bae6:	fa21 f102 	lsr.w	r1, r1, r2
   8baea:	4414      	add	r4, r2
   8baec:	e6c1      	b.n	8b872 <__adddf3+0xe6>
   8baee:	bf00      	nop

0008baf0 <__aeabi_dmul>:
   8baf0:	b570      	push	{r4, r5, r6, lr}
   8baf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8baf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8bafa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8bafe:	bf1d      	ittte	ne
   8bb00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8bb04:	ea94 0f0c 	teqne	r4, ip
   8bb08:	ea95 0f0c 	teqne	r5, ip
   8bb0c:	f000 f8de 	bleq	8bccc <__aeabi_dmul+0x1dc>
   8bb10:	442c      	add	r4, r5
   8bb12:	ea81 0603 	eor.w	r6, r1, r3
   8bb16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8bb1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8bb1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8bb22:	bf18      	it	ne
   8bb24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8bb28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8bb2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8bb30:	d038      	beq.n	8bba4 <__aeabi_dmul+0xb4>
   8bb32:	fba0 ce02 	umull	ip, lr, r0, r2
   8bb36:	f04f 0500 	mov.w	r5, #0
   8bb3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8bb3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8bb42:	fbe0 e503 	umlal	lr, r5, r0, r3
   8bb46:	f04f 0600 	mov.w	r6, #0
   8bb4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8bb4e:	f09c 0f00 	teq	ip, #0
   8bb52:	bf18      	it	ne
   8bb54:	f04e 0e01 	orrne.w	lr, lr, #1
   8bb58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8bb5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8bb60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8bb64:	d204      	bcs.n	8bb70 <__aeabi_dmul+0x80>
   8bb66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8bb6a:	416d      	adcs	r5, r5
   8bb6c:	eb46 0606 	adc.w	r6, r6, r6
   8bb70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8bb74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8bb78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8bb7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8bb80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8bb84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8bb88:	bf88      	it	hi
   8bb8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8bb8e:	d81e      	bhi.n	8bbce <__aeabi_dmul+0xde>
   8bb90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8bb94:	bf08      	it	eq
   8bb96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8bb9a:	f150 0000 	adcs.w	r0, r0, #0
   8bb9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bba2:	bd70      	pop	{r4, r5, r6, pc}
   8bba4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8bba8:	ea46 0101 	orr.w	r1, r6, r1
   8bbac:	ea40 0002 	orr.w	r0, r0, r2
   8bbb0:	ea81 0103 	eor.w	r1, r1, r3
   8bbb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8bbb8:	bfc2      	ittt	gt
   8bbba:	ebd4 050c 	rsbsgt	r5, r4, ip
   8bbbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8bbc2:	bd70      	popgt	{r4, r5, r6, pc}
   8bbc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8bbc8:	f04f 0e00 	mov.w	lr, #0
   8bbcc:	3c01      	subs	r4, #1
   8bbce:	f300 80ab 	bgt.w	8bd28 <__aeabi_dmul+0x238>
   8bbd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8bbd6:	bfde      	ittt	le
   8bbd8:	2000      	movle	r0, #0
   8bbda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8bbde:	bd70      	pople	{r4, r5, r6, pc}
   8bbe0:	f1c4 0400 	rsb	r4, r4, #0
   8bbe4:	3c20      	subs	r4, #32
   8bbe6:	da35      	bge.n	8bc54 <__aeabi_dmul+0x164>
   8bbe8:	340c      	adds	r4, #12
   8bbea:	dc1b      	bgt.n	8bc24 <__aeabi_dmul+0x134>
   8bbec:	f104 0414 	add.w	r4, r4, #20
   8bbf0:	f1c4 0520 	rsb	r5, r4, #32
   8bbf4:	fa00 f305 	lsl.w	r3, r0, r5
   8bbf8:	fa20 f004 	lsr.w	r0, r0, r4
   8bbfc:	fa01 f205 	lsl.w	r2, r1, r5
   8bc00:	ea40 0002 	orr.w	r0, r0, r2
   8bc04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8bc08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8bc0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8bc10:	fa21 f604 	lsr.w	r6, r1, r4
   8bc14:	eb42 0106 	adc.w	r1, r2, r6
   8bc18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8bc1c:	bf08      	it	eq
   8bc1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8bc22:	bd70      	pop	{r4, r5, r6, pc}
   8bc24:	f1c4 040c 	rsb	r4, r4, #12
   8bc28:	f1c4 0520 	rsb	r5, r4, #32
   8bc2c:	fa00 f304 	lsl.w	r3, r0, r4
   8bc30:	fa20 f005 	lsr.w	r0, r0, r5
   8bc34:	fa01 f204 	lsl.w	r2, r1, r4
   8bc38:	ea40 0002 	orr.w	r0, r0, r2
   8bc3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8bc40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8bc44:	f141 0100 	adc.w	r1, r1, #0
   8bc48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8bc4c:	bf08      	it	eq
   8bc4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8bc52:	bd70      	pop	{r4, r5, r6, pc}
   8bc54:	f1c4 0520 	rsb	r5, r4, #32
   8bc58:	fa00 f205 	lsl.w	r2, r0, r5
   8bc5c:	ea4e 0e02 	orr.w	lr, lr, r2
   8bc60:	fa20 f304 	lsr.w	r3, r0, r4
   8bc64:	fa01 f205 	lsl.w	r2, r1, r5
   8bc68:	ea43 0302 	orr.w	r3, r3, r2
   8bc6c:	fa21 f004 	lsr.w	r0, r1, r4
   8bc70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8bc74:	fa21 f204 	lsr.w	r2, r1, r4
   8bc78:	ea20 0002 	bic.w	r0, r0, r2
   8bc7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8bc80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8bc84:	bf08      	it	eq
   8bc86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8bc8a:	bd70      	pop	{r4, r5, r6, pc}
   8bc8c:	f094 0f00 	teq	r4, #0
   8bc90:	d10f      	bne.n	8bcb2 <__aeabi_dmul+0x1c2>
   8bc92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8bc96:	0040      	lsls	r0, r0, #1
   8bc98:	eb41 0101 	adc.w	r1, r1, r1
   8bc9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8bca0:	bf08      	it	eq
   8bca2:	3c01      	subeq	r4, #1
   8bca4:	d0f7      	beq.n	8bc96 <__aeabi_dmul+0x1a6>
   8bca6:	ea41 0106 	orr.w	r1, r1, r6
   8bcaa:	f095 0f00 	teq	r5, #0
   8bcae:	bf18      	it	ne
   8bcb0:	4770      	bxne	lr
   8bcb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8bcb6:	0052      	lsls	r2, r2, #1
   8bcb8:	eb43 0303 	adc.w	r3, r3, r3
   8bcbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8bcc0:	bf08      	it	eq
   8bcc2:	3d01      	subeq	r5, #1
   8bcc4:	d0f7      	beq.n	8bcb6 <__aeabi_dmul+0x1c6>
   8bcc6:	ea43 0306 	orr.w	r3, r3, r6
   8bcca:	4770      	bx	lr
   8bccc:	ea94 0f0c 	teq	r4, ip
   8bcd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8bcd4:	bf18      	it	ne
   8bcd6:	ea95 0f0c 	teqne	r5, ip
   8bcda:	d00c      	beq.n	8bcf6 <__aeabi_dmul+0x206>
   8bcdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8bce0:	bf18      	it	ne
   8bce2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8bce6:	d1d1      	bne.n	8bc8c <__aeabi_dmul+0x19c>
   8bce8:	ea81 0103 	eor.w	r1, r1, r3
   8bcec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8bcf0:	f04f 0000 	mov.w	r0, #0
   8bcf4:	bd70      	pop	{r4, r5, r6, pc}
   8bcf6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8bcfa:	bf06      	itte	eq
   8bcfc:	4610      	moveq	r0, r2
   8bcfe:	4619      	moveq	r1, r3
   8bd00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8bd04:	d019      	beq.n	8bd3a <__aeabi_dmul+0x24a>
   8bd06:	ea94 0f0c 	teq	r4, ip
   8bd0a:	d102      	bne.n	8bd12 <__aeabi_dmul+0x222>
   8bd0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8bd10:	d113      	bne.n	8bd3a <__aeabi_dmul+0x24a>
   8bd12:	ea95 0f0c 	teq	r5, ip
   8bd16:	d105      	bne.n	8bd24 <__aeabi_dmul+0x234>
   8bd18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8bd1c:	bf1c      	itt	ne
   8bd1e:	4610      	movne	r0, r2
   8bd20:	4619      	movne	r1, r3
   8bd22:	d10a      	bne.n	8bd3a <__aeabi_dmul+0x24a>
   8bd24:	ea81 0103 	eor.w	r1, r1, r3
   8bd28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8bd2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8bd30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8bd34:	f04f 0000 	mov.w	r0, #0
   8bd38:	bd70      	pop	{r4, r5, r6, pc}
   8bd3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8bd3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8bd42:	bd70      	pop	{r4, r5, r6, pc}

0008bd44 <__aeabi_ddiv>:
   8bd44:	b570      	push	{r4, r5, r6, lr}
   8bd46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8bd4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8bd4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8bd52:	bf1d      	ittte	ne
   8bd54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8bd58:	ea94 0f0c 	teqne	r4, ip
   8bd5c:	ea95 0f0c 	teqne	r5, ip
   8bd60:	f000 f8a7 	bleq	8beb2 <__aeabi_ddiv+0x16e>
   8bd64:	eba4 0405 	sub.w	r4, r4, r5
   8bd68:	ea81 0e03 	eor.w	lr, r1, r3
   8bd6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8bd70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bd74:	f000 8088 	beq.w	8be88 <__aeabi_ddiv+0x144>
   8bd78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8bd7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8bd80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8bd84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8bd88:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8bd8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8bd90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8bd94:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8bd98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8bd9c:	429d      	cmp	r5, r3
   8bd9e:	bf08      	it	eq
   8bda0:	4296      	cmpeq	r6, r2
   8bda2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8bda6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8bdaa:	d202      	bcs.n	8bdb2 <__aeabi_ddiv+0x6e>
   8bdac:	085b      	lsrs	r3, r3, #1
   8bdae:	ea4f 0232 	mov.w	r2, r2, rrx
   8bdb2:	1ab6      	subs	r6, r6, r2
   8bdb4:	eb65 0503 	sbc.w	r5, r5, r3
   8bdb8:	085b      	lsrs	r3, r3, #1
   8bdba:	ea4f 0232 	mov.w	r2, r2, rrx
   8bdbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8bdc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8bdc6:	ebb6 0e02 	subs.w	lr, r6, r2
   8bdca:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bdce:	bf22      	ittt	cs
   8bdd0:	1ab6      	subcs	r6, r6, r2
   8bdd2:	4675      	movcs	r5, lr
   8bdd4:	ea40 000c 	orrcs.w	r0, r0, ip
   8bdd8:	085b      	lsrs	r3, r3, #1
   8bdda:	ea4f 0232 	mov.w	r2, r2, rrx
   8bdde:	ebb6 0e02 	subs.w	lr, r6, r2
   8bde2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bde6:	bf22      	ittt	cs
   8bde8:	1ab6      	subcs	r6, r6, r2
   8bdea:	4675      	movcs	r5, lr
   8bdec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8bdf0:	085b      	lsrs	r3, r3, #1
   8bdf2:	ea4f 0232 	mov.w	r2, r2, rrx
   8bdf6:	ebb6 0e02 	subs.w	lr, r6, r2
   8bdfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8bdfe:	bf22      	ittt	cs
   8be00:	1ab6      	subcs	r6, r6, r2
   8be02:	4675      	movcs	r5, lr
   8be04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8be08:	085b      	lsrs	r3, r3, #1
   8be0a:	ea4f 0232 	mov.w	r2, r2, rrx
   8be0e:	ebb6 0e02 	subs.w	lr, r6, r2
   8be12:	eb75 0e03 	sbcs.w	lr, r5, r3
   8be16:	bf22      	ittt	cs
   8be18:	1ab6      	subcs	r6, r6, r2
   8be1a:	4675      	movcs	r5, lr
   8be1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8be20:	ea55 0e06 	orrs.w	lr, r5, r6
   8be24:	d018      	beq.n	8be58 <__aeabi_ddiv+0x114>
   8be26:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8be2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8be2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8be32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8be36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8be3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8be3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8be42:	d1c0      	bne.n	8bdc6 <__aeabi_ddiv+0x82>
   8be44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8be48:	d10b      	bne.n	8be62 <__aeabi_ddiv+0x11e>
   8be4a:	ea41 0100 	orr.w	r1, r1, r0
   8be4e:	f04f 0000 	mov.w	r0, #0
   8be52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8be56:	e7b6      	b.n	8bdc6 <__aeabi_ddiv+0x82>
   8be58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8be5c:	bf04      	itt	eq
   8be5e:	4301      	orreq	r1, r0
   8be60:	2000      	moveq	r0, #0
   8be62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8be66:	bf88      	it	hi
   8be68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8be6c:	f63f aeaf 	bhi.w	8bbce <__aeabi_dmul+0xde>
   8be70:	ebb5 0c03 	subs.w	ip, r5, r3
   8be74:	bf04      	itt	eq
   8be76:	ebb6 0c02 	subseq.w	ip, r6, r2
   8be7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8be7e:	f150 0000 	adcs.w	r0, r0, #0
   8be82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8be86:	bd70      	pop	{r4, r5, r6, pc}
   8be88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8be8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8be90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8be94:	bfc2      	ittt	gt
   8be96:	ebd4 050c 	rsbsgt	r5, r4, ip
   8be9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8be9e:	bd70      	popgt	{r4, r5, r6, pc}
   8bea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8bea4:	f04f 0e00 	mov.w	lr, #0
   8bea8:	3c01      	subs	r4, #1
   8beaa:	e690      	b.n	8bbce <__aeabi_dmul+0xde>
   8beac:	ea45 0e06 	orr.w	lr, r5, r6
   8beb0:	e68d      	b.n	8bbce <__aeabi_dmul+0xde>
   8beb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8beb6:	ea94 0f0c 	teq	r4, ip
   8beba:	bf08      	it	eq
   8bebc:	ea95 0f0c 	teqeq	r5, ip
   8bec0:	f43f af3b 	beq.w	8bd3a <__aeabi_dmul+0x24a>
   8bec4:	ea94 0f0c 	teq	r4, ip
   8bec8:	d10a      	bne.n	8bee0 <__aeabi_ddiv+0x19c>
   8beca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8bece:	f47f af34 	bne.w	8bd3a <__aeabi_dmul+0x24a>
   8bed2:	ea95 0f0c 	teq	r5, ip
   8bed6:	f47f af25 	bne.w	8bd24 <__aeabi_dmul+0x234>
   8beda:	4610      	mov	r0, r2
   8bedc:	4619      	mov	r1, r3
   8bede:	e72c      	b.n	8bd3a <__aeabi_dmul+0x24a>
   8bee0:	ea95 0f0c 	teq	r5, ip
   8bee4:	d106      	bne.n	8bef4 <__aeabi_ddiv+0x1b0>
   8bee6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8beea:	f43f aefd 	beq.w	8bce8 <__aeabi_dmul+0x1f8>
   8beee:	4610      	mov	r0, r2
   8bef0:	4619      	mov	r1, r3
   8bef2:	e722      	b.n	8bd3a <__aeabi_dmul+0x24a>
   8bef4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8bef8:	bf18      	it	ne
   8befa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8befe:	f47f aec5 	bne.w	8bc8c <__aeabi_dmul+0x19c>
   8bf02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8bf06:	f47f af0d 	bne.w	8bd24 <__aeabi_dmul+0x234>
   8bf0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8bf0e:	f47f aeeb 	bne.w	8bce8 <__aeabi_dmul+0x1f8>
   8bf12:	e712      	b.n	8bd3a <__aeabi_dmul+0x24a>

0008bf14 <__gedf2>:
   8bf14:	f04f 3cff 	mov.w	ip, #4294967295
   8bf18:	e006      	b.n	8bf28 <__cmpdf2+0x4>
   8bf1a:	bf00      	nop

0008bf1c <__ledf2>:
   8bf1c:	f04f 0c01 	mov.w	ip, #1
   8bf20:	e002      	b.n	8bf28 <__cmpdf2+0x4>
   8bf22:	bf00      	nop

0008bf24 <__cmpdf2>:
   8bf24:	f04f 0c01 	mov.w	ip, #1
   8bf28:	f84d cd04 	str.w	ip, [sp, #-4]!
   8bf2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bf30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bf34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bf38:	bf18      	it	ne
   8bf3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8bf3e:	d01b      	beq.n	8bf78 <__cmpdf2+0x54>
   8bf40:	b001      	add	sp, #4
   8bf42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8bf46:	bf0c      	ite	eq
   8bf48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8bf4c:	ea91 0f03 	teqne	r1, r3
   8bf50:	bf02      	ittt	eq
   8bf52:	ea90 0f02 	teqeq	r0, r2
   8bf56:	2000      	moveq	r0, #0
   8bf58:	4770      	bxeq	lr
   8bf5a:	f110 0f00 	cmn.w	r0, #0
   8bf5e:	ea91 0f03 	teq	r1, r3
   8bf62:	bf58      	it	pl
   8bf64:	4299      	cmppl	r1, r3
   8bf66:	bf08      	it	eq
   8bf68:	4290      	cmpeq	r0, r2
   8bf6a:	bf2c      	ite	cs
   8bf6c:	17d8      	asrcs	r0, r3, #31
   8bf6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8bf72:	f040 0001 	orr.w	r0, r0, #1
   8bf76:	4770      	bx	lr
   8bf78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8bf7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bf80:	d102      	bne.n	8bf88 <__cmpdf2+0x64>
   8bf82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8bf86:	d107      	bne.n	8bf98 <__cmpdf2+0x74>
   8bf88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8bf8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8bf90:	d1d6      	bne.n	8bf40 <__cmpdf2+0x1c>
   8bf92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8bf96:	d0d3      	beq.n	8bf40 <__cmpdf2+0x1c>
   8bf98:	f85d 0b04 	ldr.w	r0, [sp], #4
   8bf9c:	4770      	bx	lr
   8bf9e:	bf00      	nop

0008bfa0 <__aeabi_cdrcmple>:
   8bfa0:	4684      	mov	ip, r0
   8bfa2:	4610      	mov	r0, r2
   8bfa4:	4662      	mov	r2, ip
   8bfa6:	468c      	mov	ip, r1
   8bfa8:	4619      	mov	r1, r3
   8bfaa:	4663      	mov	r3, ip
   8bfac:	e000      	b.n	8bfb0 <__aeabi_cdcmpeq>
   8bfae:	bf00      	nop

0008bfb0 <__aeabi_cdcmpeq>:
   8bfb0:	b501      	push	{r0, lr}
   8bfb2:	f7ff ffb7 	bl	8bf24 <__cmpdf2>
   8bfb6:	2800      	cmp	r0, #0
   8bfb8:	bf48      	it	mi
   8bfba:	f110 0f00 	cmnmi.w	r0, #0
   8bfbe:	bd01      	pop	{r0, pc}

0008bfc0 <__aeabi_dcmpeq>:
   8bfc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bfc4:	f7ff fff4 	bl	8bfb0 <__aeabi_cdcmpeq>
   8bfc8:	bf0c      	ite	eq
   8bfca:	2001      	moveq	r0, #1
   8bfcc:	2000      	movne	r0, #0
   8bfce:	f85d fb08 	ldr.w	pc, [sp], #8
   8bfd2:	bf00      	nop

0008bfd4 <__aeabi_dcmplt>:
   8bfd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bfd8:	f7ff ffea 	bl	8bfb0 <__aeabi_cdcmpeq>
   8bfdc:	bf34      	ite	cc
   8bfde:	2001      	movcc	r0, #1
   8bfe0:	2000      	movcs	r0, #0
   8bfe2:	f85d fb08 	ldr.w	pc, [sp], #8
   8bfe6:	bf00      	nop

0008bfe8 <__aeabi_dcmple>:
   8bfe8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8bfec:	f7ff ffe0 	bl	8bfb0 <__aeabi_cdcmpeq>
   8bff0:	bf94      	ite	ls
   8bff2:	2001      	movls	r0, #1
   8bff4:	2000      	movhi	r0, #0
   8bff6:	f85d fb08 	ldr.w	pc, [sp], #8
   8bffa:	bf00      	nop

0008bffc <__aeabi_dcmpge>:
   8bffc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c000:	f7ff ffce 	bl	8bfa0 <__aeabi_cdrcmple>
   8c004:	bf94      	ite	ls
   8c006:	2001      	movls	r0, #1
   8c008:	2000      	movhi	r0, #0
   8c00a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c00e:	bf00      	nop

0008c010 <__aeabi_dcmpgt>:
   8c010:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c014:	f7ff ffc4 	bl	8bfa0 <__aeabi_cdrcmple>
   8c018:	bf34      	ite	cc
   8c01a:	2001      	movcc	r0, #1
   8c01c:	2000      	movcs	r0, #0
   8c01e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c022:	bf00      	nop

0008c024 <__aeabi_dcmpun>:
   8c024:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c02c:	d102      	bne.n	8c034 <__aeabi_dcmpun+0x10>
   8c02e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c032:	d10a      	bne.n	8c04a <__aeabi_dcmpun+0x26>
   8c034:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c03c:	d102      	bne.n	8c044 <__aeabi_dcmpun+0x20>
   8c03e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c042:	d102      	bne.n	8c04a <__aeabi_dcmpun+0x26>
   8c044:	f04f 0000 	mov.w	r0, #0
   8c048:	4770      	bx	lr
   8c04a:	f04f 0001 	mov.w	r0, #1
   8c04e:	4770      	bx	lr

0008c050 <__aeabi_d2iz>:
   8c050:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c054:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c058:	d215      	bcs.n	8c086 <__aeabi_d2iz+0x36>
   8c05a:	d511      	bpl.n	8c080 <__aeabi_d2iz+0x30>
   8c05c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c060:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c064:	d912      	bls.n	8c08c <__aeabi_d2iz+0x3c>
   8c066:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c06a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c06e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c072:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c076:	fa23 f002 	lsr.w	r0, r3, r2
   8c07a:	bf18      	it	ne
   8c07c:	4240      	negne	r0, r0
   8c07e:	4770      	bx	lr
   8c080:	f04f 0000 	mov.w	r0, #0
   8c084:	4770      	bx	lr
   8c086:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c08a:	d105      	bne.n	8c098 <__aeabi_d2iz+0x48>
   8c08c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c090:	bf08      	it	eq
   8c092:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c096:	4770      	bx	lr
   8c098:	f04f 0000 	mov.w	r0, #0
   8c09c:	4770      	bx	lr
   8c09e:	bf00      	nop

0008c0a0 <BUILD_DATE>:
   8c0a0:	634f 2074 3531 3220 3230 0031               Oct 15 2021.

0008c0ac <BUILD_TIME>:
   8c0ac:	3831 323a 3a36 3230 0000 0000 5743 494c     18:26:02....CWLI
   8c0bc:	4554 415f 5256 5349 0050 0000               TE_AVRISP...

0008c0c8 <BOS_DESC>:
   8c0c8:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
   8c0d8:	9c4c 65d2 9e9d 8a64 009f 0300 ae06 0100     L..e..d.........
	...
   8c0f4:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8c104:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8c114:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...
   8c124:	3025 7838 0000 0000 634f 2074 3531 3220     %08x....Oct 15 2
   8c134:	3230 0031 3831 323a 3a36 3330 0000 0000     021.18:26:03....
   8c144:	6843 7069 6857 7369 6570 6572 2d72 694c     ChipWhisperer-Li
   8c154:	6574 4f20 6c6e 6e69 2e65 4620 7269 776d     te Online. Firmw
   8c164:	7261 2065 7562 6c69 3a64 2520 2f73 7325     are build: %s/%s
   8c174:	000a 0000 6553 6972 6c61 6e20 6d75 6562     ....Serial numbe
   8c184:	3a72 2520 0a73 0000 6553 7474 6e69 2067     r: %s...Setting 
   8c194:	7075 4620 4750 2041 6f43 6d6d 6e75 6369     up FPGA Communic
   8c1a4:	7461 6f69 0a6e 0000 7645 6e65 2074 6f4c     ation...Event Lo
   8c1b4:	706f 4520 746e 7265 6465 202c 6177 7469     op Entered, wait
   8c1c4:	6e69 2e67 2e2e 000a                         ing.....

0008c1cc <_global_impure_ptr>:
   8c1cc:	09b8 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   8c1dc:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   8c1ec:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   8c1fc:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   8c20c:	296c 0000 0030 0000                         l)..0...

0008c214 <blanks.7223>:
   8c214:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c224 <zeroes.7224>:
   8c224:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008c234 <blanks.7217>:
   8c234:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c244 <zeroes.7218>:
   8c244:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8c254:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   8c264:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......
   8c274:	0000 0000                                   ....

0008c278 <__mprec_bigtens>:
   8c278:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8c288:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8c298:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008c2a0 <__mprec_tens>:
   8c2a0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8c2b0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8c2c0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8c2d0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8c2e0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8c2f0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8c300:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8c310:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8c320:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8c330:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8c340:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8c350:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8c360:	9db4 79d9 7843 44ea                         ...yCx.D

0008c368 <p05.6055>:
   8c368:	0005 0000 0019 0000 007d 0000               ........}...

0008c374 <_ctype_>:
   8c374:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8c384:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8c394:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8c3a4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8c3b4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8c3c4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8c3d4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8c3e4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8c3f4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008c478 <_init>:
   8c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c47a:	bf00      	nop
   8c47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c47e:	bc08      	pop	{r3}
   8c480:	469e      	mov	lr, r3
   8c482:	4770      	bx	lr

0008c484 <__init_array_start>:
   8c484:	00088789 	.word	0x00088789

0008c488 <__frame_dummy_init_array_entry>:
   8c488:	000800e1                                ....

0008c48c <_fini>:
   8c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c48e:	bf00      	nop
   8c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c492:	bc08      	pop	{r3}
   8c494:	469e      	mov	lr, r3
   8c496:	4770      	bx	lr

0008c498 <__fini_array_start>:
   8c498:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	20000988 	.word	0x20000988

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c5 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	0008050d 000803b5 00080139 0008013d     ........9...=...
200001d0:	000803a5                                ....

200001d4 <udc_config>:
200001d4:	200002c4 200001f4 200002c4 200002d8     ... ... ... ... 
200001e4:	200001ec 00000000                       ... ....

200001ec <udc_config_hs>:
200001ec:	20000260 200002e4                       `.. ... 

200001f4 <udc_config_lsfs>:
200001f4:	200001fc 200002e4                       ... ... 

200001fc <udc_desc_fs>:
200001fc:	00620209 80000103 000409fa ffff0200     ..b.............
2000020c:	050700ff 00400281 02050700 00004002     ......@......@..
2000021c:	02010b08 00010202 00010409 01020201     ................
2000022c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000023c:	02030124 03830507 09100040 02000204     $.......@.......
2000024c:	0000000a 02850507 07000040 40020605     ........@......@
2000025c:	00000000                                ....

20000260 <udc_desc_hs>:
20000260:	00620209 80000103 000409fa ffff0200     ..b.............
20000270:	050700ff 02000281 02050700 00020002     ................
20000280:	02010b08 00010202 00010409 01020201     ................
20000290:	00240500 24040110 24050202 05020106     ..$....$...$....
200002a0:	02030124 03830507 09100040 02000204     $.......@.......
200002b0:	0000000a 02850507 07000200 00020605     ................
200002c0:	00000002                                ....

200002c4 <udc_device_desc>:
200002c4:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d4:	00000103                                ....

200002d8 <udc_device_qual>:
200002d8:	0200060a 40000000 00000001              .......@....

200002e4 <udi_apis>:
200002e4:	20000854 200001ac 200001c0              T.. ... ... 

200002f0 <avrispmkIIfreqs>:
200002f0:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
20000300:	0007a120 0003d090 0001e848 00017882      .......H....x..
20000310:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
20000320:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000330:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000340:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000350:	000099f1 00009586 00008d68 0000861f     ........h.......
20000360:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000370:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000380:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000390:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
200003a0:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003b0:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003c0:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003d0:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003e0:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003f0:	000016f7 000015e7 000014ef 000013e5     ................
20000400:	00001306 00001219 00001142 00001071     ........B...q...
20000410:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
20000420:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000430:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000440:	000008d1 00000868 00000804 000007a4     ....h...........
20000450:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000460:	00000603 000005bc 00000576 00000535     ........v...5...
20000470:	000004f7 000004bc 00000483 0000044d     ............M...
20000480:	00000419 000003e8 000003b9 0000038d     ................
20000490:	00000362 0000033a 00000313 000002ee     b...:...........
200004a0:	000002cb 000002aa 0000028a 0000026b     ............k...
200004b0:	0000024e 00000233 00000218 000001ff     N...3...........
200004c0:	000001e7 000001d1 000001bb 000001a6     ................
200004d0:	00000192 00000180 0000016e 0000015d     ........n...]...
200004e0:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004f0:	00000112 00000105 000000f9 000000ee     ................
20000500:	000000e2 000000d8 000000ce 000000c4     ................
20000510:	000000bb 000000b2 000000aa 000000a2     ................
20000520:	0000009a 00000093 0000008c 00000086     ................
20000530:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000540:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000550:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000560:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000570:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000580 <main_b_vendor_enable>:
20000580:	00000001                                ....

20000584 <usart0_driver>:
20000584:	40090000 00000000 00000000 00000000     ...@............
	...
20000820:	00000009                                ....

20000824 <xram>:
20000824:	60000000                                ...`

20000828 <ParameterTable>:
20000828:	81000180 01900001 01019100 94170192     ................
20000838:	03982101 01039e06 a40001a1 00200003              .!............

20000846 <XPROG_Param_EEPageSize>:
20000846:	01c00020                                          .

20000848 <XPROG_Param_NVMBase>:
20000848:	010001c0                                ....

2000084c <XPROG_Param_NVMCMDRegAddr>:
2000084c:	00003233                                         3

2000084d <XPROG_Param_NVMCSRRegAddr>:
2000084d:	f4000032                                         2..

20000850 <defaultTimeoutTicks>:
20000850:	000001f4                                ....

20000854 <udi_api_vendor>:
20000854:	000830e9 0008310d 00083125 000830dd     .0...1..%1...0..
20000864:	00000000                                ....

20000868 <udc_string_desc>:
20000868:	00000300 00000000 00000000 00000000     ................
	...

200008ac <udc_string_desc_languageid>:
200008ac:	04090304                                ....

200008b0 <udc_string_manufacturer_name>:
200008b0:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200008c0:	636e4920 0000002e                        Inc....

200008c8 <udc_string_product_name>:
200008c8:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
200008d8:	00006574                                te..

200008dc <winusb_20_desc>:
200008dc:	0000000a 06030000 000800ae 00000002     ................
200008ec:	001400a4 49570003 4253554e 00000000     ......WINUSB....
200008fc:	00000000 00880000 00070004 0044002a     ............*.D.
2000090c:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
2000091c:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
2000092c:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
2000093c:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
2000094c:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
2000095c:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
2000096c:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
2000097c:	00390045 0000007d 00010000                       E.9.}.....

20000986 <g_interrupt_enabled>:
20000986:	09000001                                         ..

20000988 <SystemCoreClock>:
20000988:	003d0900                                ..=.

2000098c <usb_serial_number>:
2000098c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000099c:	46454542 00000000 00000000 00000000     BEEF............
200009ac:	00000000                                ....

200009b0 <_impure_ptr>:
200009b0:	200009b8 00000000                       ... ....

200009b8 <impure_data>:
200009b8:	00000000 20000ca4 20000d0c 20000d74     ....... ... t.. 
	...
20000a60:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000a70:	0005deec 0000000b 00000000 00000000     ................
	...

20000de0 <__atexit_recursive_mutex>:
20000de0:	200026bc                                .&. 

20000de4 <__global_locale>:
20000de4:	00000043 00000000 00000000 00000000     C...............
	...
20000e04:	00000043 00000000 00000000 00000000     C...............
	...
20000e24:	00000043 00000000 00000000 00000000     C...............
	...
20000e44:	00000043 00000000 00000000 00000000     C...............
	...
20000e64:	00000043 00000000 00000000 00000000     C...............
	...
20000e84:	00000043 00000000 00000000 00000000     C...............
	...
20000ea4:	00000043 00000000 00000000 00000000     C...............
	...
20000ec4:	0008b48d 0008a6e5 00000000 0008c374     ............t...
20000ed4:	0008c270 0008c140 0008c140 0008c140     p...@...@...@...
20000ee4:	0008c140 0008c140 0008c140 0008c140     @...@...@...@...
20000ef4:	0008c140 0008c140 ffffffff ffffffff     @...@...........
20000f04:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000f2c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000f50 <__malloc_av_>:
	...
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 
20000fd8:	20000fd0 20000fd0 20000fd8 20000fd8     ... ... ... ... 
20000fe8:	20000fe0 20000fe0 20000fe8 20000fe8     ... ... ... ... 
20000ff8:	20000ff0 20000ff0 20000ff8 20000ff8     ... ... ... ... 
20001008:	20001000 20001000 20001008 20001008     ... ... ... ... 
20001018:	20001010 20001010 20001018 20001018     ... ... ... ... 
20001028:	20001020 20001020 20001028 20001028      ..  .. (.. (.. 
20001038:	20001030 20001030 20001038 20001038     0.. 0.. 8.. 8.. 
20001048:	20001040 20001040 20001048 20001048     @.. @.. H.. H.. 
20001058:	20001050 20001050 20001058 20001058     P.. P.. X.. X.. 
20001068:	20001060 20001060 20001068 20001068     `.. `.. h.. h.. 
20001078:	20001070 20001070 20001078 20001078     p.. p.. x.. x.. 
20001088:	20001080 20001080 20001088 20001088     ... ... ... ... 
20001098:	20001090 20001090 20001098 20001098     ... ... ... ... 
200010a8:	200010a0 200010a0 200010a8 200010a8     ... ... ... ... 
200010b8:	200010b0 200010b0 200010b8 200010b8     ... ... ... ... 
200010c8:	200010c0 200010c0 200010c8 200010c8     ... ... ... ... 
200010d8:	200010d0 200010d0 200010d8 200010d8     ... ... ... ... 
200010e8:	200010e0 200010e0 200010e8 200010e8     ... ... ... ... 
200010f8:	200010f0 200010f0 200010f8 200010f8     ... ... ... ... 
20001108:	20001100 20001100 20001108 20001108     ... ... ... ... 
20001118:	20001110 20001110 20001118 20001118     ... ... ... ... 
20001128:	20001120 20001120 20001128 20001128      ..  .. (.. (.. 
20001138:	20001130 20001130 20001138 20001138     0.. 0.. 8.. 8.. 
20001148:	20001140 20001140 20001148 20001148     @.. @.. H.. H.. 
20001158:	20001150 20001150 20001158 20001158     P.. P.. X.. X.. 
20001168:	20001160 20001160 20001168 20001168     `.. `.. h.. h.. 
20001178:	20001170 20001170 20001178 20001178     p.. p.. x.. x.. 
20001188:	20001180 20001180 20001188 20001188     ... ... ... ... 
20001198:	20001190 20001190 20001198 20001198     ... ... ... ... 
200011a8:	200011a0 200011a0 200011a8 200011a8     ... ... ... ... 
200011b8:	200011b0 200011b0 200011b8 200011b8     ... ... ... ... 
200011c8:	200011c0 200011c0 200011c8 200011c8     ... ... ... ... 
200011d8:	200011d0 200011d0 200011d8 200011d8     ... ... ... ... 
200011e8:	200011e0 200011e0 200011e8 200011e8     ... ... ... ... 
200011f8:	200011f0 200011f0 200011f8 200011f8     ... ... ... ... 
20001208:	20001200 20001200 20001208 20001208     ... ... ... ... 
20001218:	20001210 20001210 20001218 20001218     ... ... ... ... 
20001228:	20001220 20001220 20001228 20001228      ..  .. (.. (.. 
20001238:	20001230 20001230 20001238 20001238     0.. 0.. 8.. 8.. 
20001248:	20001240 20001240 20001248 20001248     @.. @.. H.. H.. 
20001258:	20001250 20001250 20001258 20001258     P.. P.. X.. X.. 
20001268:	20001260 20001260 20001268 20001268     `.. `.. h.. h.. 
20001278:	20001270 20001270 20001278 20001278     p.. p.. x.. x.. 
20001288:	20001280 20001280 20001288 20001288     ... ... ... ... 
20001298:	20001290 20001290 20001298 20001298     ... ... ... ... 
200012a8:	200012a0 200012a0 200012a8 200012a8     ... ... ... ... 
200012b8:	200012b0 200012b0 200012b8 200012b8     ... ... ... ... 
200012c8:	200012c0 200012c0 200012c8 200012c8     ... ... ... ... 
200012d8:	200012d0 200012d0 200012d8 200012d8     ... ... ... ... 
200012e8:	200012e0 200012e0 200012e8 200012e8     ... ... ... ... 
200012f8:	200012f0 200012f0 200012f8 200012f8     ... ... ... ... 
20001308:	20001300 20001300 20001308 20001308     ... ... ... ... 
20001318:	20001310 20001310 20001318 20001318     ... ... ... ... 
20001328:	20001320 20001320 20001328 20001328      ..  .. (.. (.. 
20001338:	20001330 20001330 20001338 20001338     0.. 0.. 8.. 8.. 
20001348:	20001340 20001340 20001348 20001348     @.. @.. H.. H.. 

20001358 <__malloc_sbrk_base>:
20001358:	ffffffff                                ....

2000135c <__malloc_trim_threshold>:
2000135c:	00020000                                ....
