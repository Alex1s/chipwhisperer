
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cff4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cff4  0008cff4  0001cff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001358  20000000  0008cffc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001384  20001358  0008e354  00021358  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00021358  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00021381  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003b0bd  00000000  00000000  000213cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00009362  00000000  00000000  0005c48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c6c4  00000000  00000000  000657ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001520  00000000  00000000  00071eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001ea8  00000000  00000000  000733d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021225  00000000  00000000  00075278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002fc9a  00000000  00000000  0009649d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000604f1  00000000  00000000  000c6137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  000047c8  00000000  00000000  00126628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 69 56 08 00 67 56 08 00 67 56 08 00     . . iV..gV..gV..
   80010:	67 56 08 00 67 56 08 00 67 56 08 00 00 00 00 00     gV..gV..gV......
	...
   8002c:	67 56 08 00 67 56 08 00 00 00 00 00 67 56 08 00     gV..gV......gV..
   8003c:	67 56 08 00 67 56 08 00 67 56 08 00 67 56 08 00     gV..gV..gV..gV..
   8004c:	67 56 08 00 67 56 08 00 67 56 08 00 67 56 08 00     gV..gV..gV..gV..
   8005c:	67 56 08 00 67 56 08 00 67 56 08 00 61 3d 08 00     gV..gV..gV..a=..
   8006c:	75 3d 08 00 67 56 08 00 15 1a 08 00 67 56 08 00     u=..gV......gV..
   8007c:	67 56 08 00 67 56 08 00 67 56 08 00 67 56 08 00     gV..gV..gV..gV..
   8008c:	67 56 08 00 67 56 08 00 67 56 08 00 9d 2d 08 00     gV..gV..gV...-..
   8009c:	67 56 08 00 67 56 08 00 67 56 08 00 67 56 08 00     gV..gV..gV..gV..
   800ac:	67 56 08 00 67 56 08 00 0d 45 08 00 67 56 08 00     gV..gV...E..gV..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001358 	.word	0x20001358
   800d8:	00000000 	.word	0x00000000
   800dc:	0008cffc 	.word	0x0008cffc

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	2000135c 	.word	0x2000135c
   800f8:	0008cffc 	.word	0x0008cffc

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	2000137f 	.word	0x2000137f

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	2000269c 	.word	0x2000269c
   80194:	20001378 	.word	0x20001378
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	2000137f 	.word	0x2000137f
   801ec:	20001794 	.word	0x20001794
   801f0:	20001bac 	.word	0x20001bac
   801f4:	20001378 	.word	0x20001378
   801f8:	00081f25 	.word	0x00081f25
   801fc:	00081e71 	.word	0x00081e71

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001ba8 	.word	0x20001ba8
   80310:	00084cb1 	.word	0x00084cb1
   80314:	20001ba4 	.word	0x20001ba4
   80318:	00084d09 	.word	0x00084d09
   8031c:	20000982 	.word	0x20000982
   80320:	20001ba0 	.word	0x20001ba0
   80324:	20001b9c 	.word	0x20001b9c
   80328:	20001374 	.word	0x20001374
   8032c:	20001798 	.word	0x20001798
   80330:	00080341 	.word	0x00080341
   80334:	2000179c 	.word	0x2000179c
   80338:	00084f6d 	.word	0x00084f6d
   8033c:	00084cf9 	.word	0x00084cf9

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001ba0 	.word	0x20001ba0
   80368:	20001b9c 	.word	0x20001b9c
   8036c:	20001798 	.word	0x20001798
   80370:	20001ba8 	.word	0x20001ba8
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	20001380 	.word	0x20001380
   803a8:	00081e8d 	.word	0x00081e8d
   803ac:	20001376 	.word	0x20001376

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	20001378 	.word	0x20001378
   803c0:	00081f25 	.word	0x00081f25

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	20000982 	.word	0x20000982
   80400:	2000178c 	.word	0x2000178c
   80404:	20001788 	.word	0x20001788
   80408:	20001784 	.word	0x20001784

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	20000982 	.word	0x20000982
   804b8:	20001788 	.word	0x20001788
   804bc:	20001790 	.word	0x20001790
   804c0:	2000178c 	.word	0x2000178c
   804c4:	20001784 	.word	0x20001784
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	20001384 	.word	0x20001384
   804d4:	00084f6d 	.word	0x00084f6d
   804d8:	00081ea5 	.word	0x00081ea5

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	20001380 	.word	0x20001380
   8053c:	20001ba8 	.word	0x20001ba8
   80540:	20001798 	.word	0x20001798
   80544:	20001ba0 	.word	0x20001ba0
   80548:	20001b9c 	.word	0x20001b9c
   8054c:	20001ba4 	.word	0x20001ba4
   80550:	00080201 	.word	0x00080201
   80554:	20001790 	.word	0x20001790
   80558:	20001788 	.word	0x20001788
   8055c:	20001784 	.word	0x20001784
   80560:	2000178c 	.word	0x2000178c
   80564:	00080421 	.word	0x00080421
   80568:	20001376 	.word	0x20001376

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	20001788 	.word	0x20001788
   805b4:	20001784 	.word	0x20001784
   805b8:	20001790 	.word	0x20001790
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	20001384 	.word	0x20001384
   805c8:	00084f6d 	.word	0x00084f6d

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	20000982 	.word	0x20000982
   80660:	2000178c 	.word	0x2000178c
   80664:	20001376 	.word	0x20001376
   80668:	20001784 	.word	0x20001784
   8066c:	20001384 	.word	0x20001384
   80670:	00085f01 	.word	0x00085f01
   80674:	00080421 	.word	0x00080421
   80678:	20001788 	.word	0x20001788

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	20000982 	.word	0x20000982
   806e0:	20001ba0 	.word	0x20001ba0
   806e4:	20001b9c 	.word	0x20001b9c
   806e8:	20001ba8 	.word	0x20001ba8
   806ec:	20001798 	.word	0x20001798

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	20001378 	.word	0x20001378
   80778:	000806f1 	.word	0x000806f1
   8077c:	20000982 	.word	0x20000982
   80780:	20001b9c 	.word	0x20001b9c
   80784:	2000179c 	.word	0x2000179c
   80788:	20001376 	.word	0x20001376
   8078c:	20001ba0 	.word	0x20001ba0

00080790 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80790:	2300      	movs	r3, #0
   80792:	6043      	str	r3, [r0, #4]
   80794:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   80796:	6083      	str	r3, [r0, #8]
}
   80798:	4770      	bx	lr

0008079a <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   8079a:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   8079c:	6804      	ldr	r4, [r0, #0]
    newhead++;
   8079e:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807a0:	2cc8      	cmp	r4, #200	; 0xc8
   807a2:	bf28      	it	cs
   807a4:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   807a6:	6843      	ldr	r3, [r0, #4]
   807a8:	42a3      	cmp	r3, r4
   807aa:	d105      	bne.n	807b8 <add_to_circ_buf+0x1e>
    {
        if (!block)
   807ac:	2a00      	cmp	r2, #0
   807ae:	d1fa      	bne.n	807a6 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   807b0:	6883      	ldr	r3, [r0, #8]
   807b2:	3301      	adds	r3, #1
   807b4:	6083      	str	r3, [r0, #8]
            return;
   807b6:	e003      	b.n	807c0 <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   807b8:	6803      	ldr	r3, [r0, #0]
   807ba:	4403      	add	r3, r0
   807bc:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   807be:	6004      	str	r4, [r0, #0]
}
   807c0:	bc10      	pop	{r4}
   807c2:	4770      	bx	lr

000807c4 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   807c4:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   807c6:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   807c8:	18c1      	adds	r1, r0, r3
   807ca:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head)
   807cc:	6811      	ldr	r1, [r2, #0]
   807ce:	4299      	cmp	r1, r3
   807d0:	d005      	beq.n	807de <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   807d2:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   807d4:	2bc8      	cmp	r3, #200	; 0xc8
   807d6:	bf28      	it	cs
   807d8:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   807da:	6053      	str	r3, [r2, #4]

    return retval;
   807dc:	4770      	bx	lr
        return SERIAL_ERR;
   807de:	20ff      	movs	r0, #255	; 0xff
}
   807e0:	4770      	bx	lr

000807e2 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   807e2:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   807e4:	6840      	ldr	r0, [r0, #4]
}
   807e6:	1ac0      	subs	r0, r0, r3
   807e8:	bf18      	it	ne
   807ea:	2001      	movne	r0, #1
   807ec:	4770      	bx	lr

000807ee <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   807ee:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   807f0:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   807f2:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   807f4:	bf48      	it	mi
   807f6:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   807f8:	4770      	bx	lr
	...

000807fc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   807fc:	b510      	push	{r4, lr}
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   807fe:	4c18      	ldr	r4, [pc, #96]	; (80860 <fpga_program_setup1+0x64>)
   80800:	4620      	mov	r0, r4
   80802:	4b18      	ldr	r3, [pc, #96]	; (80864 <fpga_program_setup1+0x68>)
   80804:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80806:	2380      	movs	r3, #128	; 0x80
   80808:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8080a:	6863      	ldr	r3, [r4, #4]
   8080c:	f043 0301 	orr.w	r3, r3, #1
   80810:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80812:	6863      	ldr	r3, [r4, #4]
   80814:	f043 0310 	orr.w	r3, r3, #16
   80818:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8081a:	6863      	ldr	r3, [r4, #4]
   8081c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80820:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80822:	2200      	movs	r2, #0
   80824:	4611      	mov	r1, r2
   80826:	4620      	mov	r0, r4
   80828:	4b0f      	ldr	r3, [pc, #60]	; (80868 <fpga_program_setup1+0x6c>)
   8082a:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8082c:	2201      	movs	r2, #1
   8082e:	2100      	movs	r1, #0
   80830:	4620      	mov	r0, r4
   80832:	4b0e      	ldr	r3, [pc, #56]	; (8086c <fpga_program_setup1+0x70>)
   80834:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   80836:	490e      	ldr	r1, [pc, #56]	; (80870 <fpga_program_setup1+0x74>)
   80838:	480e      	ldr	r0, [pc, #56]	; (80874 <fpga_program_setup1+0x78>)
   8083a:	4b0f      	ldr	r3, [pc, #60]	; (80878 <fpga_program_setup1+0x7c>)
   8083c:	4798      	blx	r3
   8083e:	b2c2      	uxtb	r2, r0
   80840:	2100      	movs	r1, #0
   80842:	4620      	mov	r0, r4
   80844:	4b0d      	ldr	r3, [pc, #52]	; (8087c <fpga_program_setup1+0x80>)
   80846:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80848:	2301      	movs	r3, #1
   8084a:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8084c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80850:	200e      	movs	r0, #14
   80852:	4c0b      	ldr	r4, [pc, #44]	; (80880 <fpga_program_setup1+0x84>)
   80854:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80856:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8085a:	200f      	movs	r0, #15
   8085c:	47a0      	blx	r4
	#endif
#endif
}
   8085e:	bd10      	pop	{r4, pc}
   80860:	40008000 	.word	0x40008000
   80864:	00083f6d 	.word	0x00083f6d
   80868:	00083fef 	.word	0x00083fef
   8086c:	0008400d 	.word	0x0008400d
   80870:	05b8d800 	.word	0x05b8d800
   80874:	000f4240 	.word	0x000f4240
   80878:	0008402b 	.word	0x0008402b
   8087c:	00084041 	.word	0x00084041
   80880:	00083ba5 	.word	0x00083ba5

00080884 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80884:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   80886:	2008      	movs	r0, #8
   80888:	4b01      	ldr	r3, [pc, #4]	; (80890 <fpga_program_setup2+0xc>)
   8088a:	4798      	blx	r3
}
   8088c:	bd08      	pop	{r3, pc}
   8088e:	bf00      	nop
   80890:	00083b71 	.word	0x00083b71

00080894 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80894:	b510      	push	{r4, lr}
   80896:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   80898:	2300      	movs	r3, #0
   8089a:	461a      	mov	r2, r3
   8089c:	4801      	ldr	r0, [pc, #4]	; (808a4 <fpga_program_sendbyte+0x10>)
   8089e:	4c02      	ldr	r4, [pc, #8]	; (808a8 <fpga_program_sendbyte+0x14>)
   808a0:	47a0      	blx	r4
		#endif
	#endif
}
   808a2:	bd10      	pop	{r4, pc}
   808a4:	40008000 	.word	0x40008000
   808a8:	00083fbb 	.word	0x00083fbb

000808ac <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   808ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808b0:	b08d      	sub	sp, #52	; 0x34
   808b2:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   808b4:	4b92      	ldr	r3, [pc, #584]	; (80b00 <ISPProtocol_ProgramMemory+0x254>)
   808b6:	8999      	ldrh	r1, [r3, #12]
   808b8:	2909      	cmp	r1, #9
   808ba:	d005      	beq.n	808c8 <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   808bc:	4891      	ldr	r0, [pc, #580]	; (80b04 <ISPProtocol_ProgramMemory+0x258>)
   808be:	4b92      	ldr	r3, [pc, #584]	; (80b08 <ISPProtocol_ProgramMemory+0x25c>)
   808c0:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   808c2:	b00d      	add	sp, #52	; 0x34
   808c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808c8:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   808ca:	4b8d      	ldr	r3, [pc, #564]	; (80b00 <ISPProtocol_ProgramMemory+0x254>)
   808cc:	689a      	ldr	r2, [r3, #8]
   808ce:	ab09      	add	r3, sp, #36	; 0x24
   808d0:	6810      	ldr	r0, [r2, #0]
   808d2:	6851      	ldr	r1, [r2, #4]
   808d4:	c303      	stmia	r3!, {r0, r1}
   808d6:	8912      	ldrh	r2, [r2, #8]
   808d8:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   808da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   808de:	9305      	str	r3, [sp, #20]
   808e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   808e4:	d813      	bhi.n	8090e <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   808e6:	f1bb 0f13 	cmp.w	fp, #19
   808ea:	bf0c      	ite	eq
   808ec:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   808f0:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   808f4:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   808f6:	4b85      	ldr	r3, [pc, #532]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   808f8:	681b      	ldr	r3, [r3, #0]
   808fa:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   808fc:	9b05      	ldr	r3, [sp, #20]
   808fe:	2b00      	cmp	r3, #0
   80900:	d043      	beq.n	8098a <ISPProtocol_ProgramMemory+0xde>
   80902:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   80904:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   80906:	4627      	mov	r7, r4
   80908:	f8cd b008 	str.w	fp, [sp, #8]
   8090c:	e0a6      	b.n	80a5c <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   8090e:	4b80      	ldr	r3, [pc, #512]	; (80b10 <ISPProtocol_ProgramMemory+0x264>)
   80910:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80914:	22c0      	movs	r2, #192	; 0xc0
   80916:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   80918:	4b7e      	ldr	r3, [pc, #504]	; (80b14 <ISPProtocol_ProgramMemory+0x268>)
   8091a:	2202      	movs	r2, #2
   8091c:	801a      	strh	r2, [r3, #0]
		return;
   8091e:	e7d0      	b.n	808c2 <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   80920:	4b7d      	ldr	r3, [pc, #500]	; (80b18 <ISPProtocol_ProgramMemory+0x26c>)
   80922:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80924:	4b7d      	ldr	r3, [pc, #500]	; (80b1c <ISPProtocol_ProgramMemory+0x270>)
   80926:	701f      	strb	r7, [r3, #0]
   80928:	e0a3      	b.n	80a72 <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   8092a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   8092e:	f043 0308 	orr.w	r3, r3, #8
   80932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80936:	4b75      	ldr	r3, [pc, #468]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   80938:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   8093a:	f018 0f01 	tst.w	r8, #1
   8093e:	f000 80d4 	beq.w	80aea <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   80942:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   80944:	4a71      	ldr	r2, [pc, #452]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   80946:	6813      	ldr	r3, [r2, #0]
   80948:	3301      	adds	r3, #1
   8094a:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8094c:	9a02      	ldr	r2, [sp, #8]
   8094e:	2a13      	cmp	r2, #19
   80950:	d17f      	bne.n	80a52 <ISPProtocol_ProgramMemory+0x1a6>
   80952:	b29b      	uxth	r3, r3
   80954:	2b00      	cmp	r3, #0
   80956:	d17c      	bne.n	80a52 <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   80958:	2301      	movs	r3, #1
   8095a:	4a70      	ldr	r2, [pc, #448]	; (80b1c <ISPProtocol_ProgramMemory+0x270>)
   8095c:	7013      	strb	r3, [r2, #0]
   8095e:	e078      	b.n	80a52 <ISPProtocol_ProgramMemory+0x1a6>
   80960:	9304      	str	r3, [sp, #16]
   80962:	e061      	b.n	80a28 <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80964:	9304      	str	r3, [sp, #16]
   80966:	e06d      	b.n	80a44 <ISPProtocol_ProgramMemory+0x198>
   80968:	f8dd b008 	ldr.w	fp, [sp, #8]
   8096c:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   8096e:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   80972:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   80976:	2c00      	cmp	r4, #0
   80978:	db0e      	blt.n	80998 <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   8097a:	4a65      	ldr	r2, [pc, #404]	; (80b10 <ISPProtocol_ProgramMemory+0x264>)
   8097c:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   80980:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80982:	4b64      	ldr	r3, [pc, #400]	; (80b14 <ISPProtocol_ProgramMemory+0x268>)
   80984:	2202      	movs	r2, #2
   80986:	801a      	strh	r2, [r3, #0]
   80988:	e79b      	b.n	808c2 <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   8098a:	9b05      	ldr	r3, [sp, #20]
   8098c:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   8098e:	2300      	movs	r3, #0
   80990:	e7ed      	b.n	8096e <ISPProtocol_ProgramMemory+0xc2>
   80992:	f8dd b008 	ldr.w	fp, [sp, #8]
   80996:	e7ea      	b.n	8096e <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   80998:	4f61      	ldr	r7, [pc, #388]	; (80b20 <ISPProtocol_ProgramMemory+0x274>)
   8099a:	2300      	movs	r3, #0
   8099c:	461a      	mov	r2, r3
   8099e:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   809a2:	4638      	mov	r0, r7
   809a4:	4e5f      	ldr	r6, [pc, #380]	; (80b24 <ISPProtocol_ProgramMemory+0x278>)
   809a6:	47b0      	blx	r6
   809a8:	2300      	movs	r3, #0
   809aa:	461a      	mov	r2, r3
   809ac:	9907      	ldr	r1, [sp, #28]
   809ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
   809b2:	4638      	mov	r0, r7
   809b4:	47b0      	blx	r6
   809b6:	2300      	movs	r3, #0
   809b8:	461a      	mov	r2, r3
   809ba:	f89d 101c 	ldrb.w	r1, [sp, #28]
   809be:	4638      	mov	r0, r7
   809c0:	47b0      	blx	r6
   809c2:	2300      	movs	r3, #0
   809c4:	461a      	mov	r2, r3
   809c6:	4619      	mov	r1, r3
   809c8:	4638      	mov	r0, r7
   809ca:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   809cc:	f015 0f20 	tst.w	r5, #32
   809d0:	d007      	beq.n	809e2 <ISPProtocol_ProgramMemory+0x136>
   809d2:	9b04      	ldr	r3, [sp, #16]
   809d4:	b92b      	cbnz	r3, 809e2 <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   809d6:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   809da:	f043 0310 	orr.w	r3, r3, #16
   809de:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   809e2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   809e6:	9300      	str	r3, [sp, #0]
   809e8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   809ec:	9a06      	ldr	r2, [sp, #24]
   809ee:	9904      	ldr	r1, [sp, #16]
   809f0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   809f4:	4c4c      	ldr	r4, [pc, #304]	; (80b28 <ISPProtocol_ProgramMemory+0x27c>)
   809f6:	47a0      	blx	r4
   809f8:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   809fa:	f1bb 0f13 	cmp.w	fp, #19
   809fe:	d1bc      	bne.n	8097a <ISPProtocol_ProgramMemory+0xce>
   80a00:	4a42      	ldr	r2, [pc, #264]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   80a02:	8812      	ldrh	r2, [r2, #0]
   80a04:	2a00      	cmp	r2, #0
   80a06:	d1b8      	bne.n	8097a <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   80a08:	4a44      	ldr	r2, [pc, #272]	; (80b1c <ISPProtocol_ProgramMemory+0x270>)
   80a0a:	2101      	movs	r1, #1
   80a0c:	7011      	strb	r1, [r2, #0]
   80a0e:	e7b4      	b.n	8097a <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   80a10:	4a3e      	ldr	r2, [pc, #248]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   80a12:	6813      	ldr	r3, [r2, #0]
   80a14:	3301      	adds	r3, #1
   80a16:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a18:	e01b      	b.n	80a52 <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a1a:	f018 0f01 	tst.w	r8, #1
   80a1e:	d067      	beq.n	80af0 <ISPProtocol_ProgramMemory+0x244>
   80a20:	e010      	b.n	80a44 <ISPProtocol_ProgramMemory+0x198>
   80a22:	f018 0f01 	tst.w	r8, #1
   80a26:	d10d      	bne.n	80a44 <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80a28:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a2c:	9300      	str	r3, [sp, #0]
   80a2e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80a32:	9a06      	ldr	r2, [sp, #24]
   80a34:	9904      	ldr	r1, [sp, #16]
   80a36:	4640      	mov	r0, r8
   80a38:	4d3b      	ldr	r5, [pc, #236]	; (80b28 <ISPProtocol_ProgramMemory+0x27c>)
   80a3a:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   80a3c:	4603      	mov	r3, r0
   80a3e:	2800      	cmp	r0, #0
   80a40:	d1a7      	bne.n	80992 <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   80a42:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80a44:	f014 0f01 	tst.w	r4, #1
   80a48:	f47f af7c 	bne.w	80944 <ISPProtocol_ProgramMemory+0x98>
   80a4c:	9b02      	ldr	r3, [sp, #8]
   80a4e:	2b15      	cmp	r3, #21
   80a50:	d0de      	beq.n	80a10 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80a52:	3401      	adds	r4, #1
   80a54:	b2a4      	uxth	r4, r4
   80a56:	9b05      	ldr	r3, [sp, #20]
   80a58:	42a3      	cmp	r3, r4
   80a5a:	d085      	beq.n	80968 <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80a5c:	9b03      	ldr	r3, [sp, #12]
   80a5e:	f813 bb01 	ldrb.w	fp, [r3], #1
   80a62:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80a64:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80a68:	4b2c      	ldr	r3, [pc, #176]	; (80b1c <ISPProtocol_ProgramMemory+0x270>)
   80a6a:	781b      	ldrb	r3, [r3, #0]
   80a6c:	2b00      	cmp	r3, #0
   80a6e:	f47f af57 	bne.w	80920 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80a72:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   80a76:	4e2a      	ldr	r6, [pc, #168]	; (80b20 <ISPProtocol_ProgramMemory+0x274>)
   80a78:	463b      	mov	r3, r7
   80a7a:	463a      	mov	r2, r7
   80a7c:	4649      	mov	r1, r9
   80a7e:	4630      	mov	r0, r6
   80a80:	4d28      	ldr	r5, [pc, #160]	; (80b24 <ISPProtocol_ProgramMemory+0x278>)
   80a82:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80a84:	f8df a084 	ldr.w	sl, [pc, #132]	; 80b0c <ISPProtocol_ProgramMemory+0x260>
   80a88:	463b      	mov	r3, r7
   80a8a:	463a      	mov	r2, r7
   80a8c:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80a90:	4630      	mov	r0, r6
   80a92:	47a8      	blx	r5
   80a94:	463b      	mov	r3, r7
   80a96:	463a      	mov	r2, r7
   80a98:	f89a 1000 	ldrb.w	r1, [sl]
   80a9c:	4630      	mov	r0, r6
   80a9e:	47a8      	blx	r5
   80aa0:	463b      	mov	r3, r7
   80aa2:	463a      	mov	r2, r7
   80aa4:	4659      	mov	r1, fp
   80aa6:	4630      	mov	r0, r6
   80aa8:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80aaa:	9b02      	ldr	r3, [sp, #8]
   80aac:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80aae:	bf04      	itt	eq
   80ab0:	f089 0908 	eoreq.w	r9, r9, #8
   80ab4:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80ab8:	9b04      	ldr	r3, [sp, #16]
   80aba:	2b00      	cmp	r3, #0
   80abc:	d1b1      	bne.n	80a22 <ISPProtocol_ProgramMemory+0x176>
   80abe:	9b06      	ldr	r3, [sp, #24]
   80ac0:	455b      	cmp	r3, fp
   80ac2:	d0aa      	beq.n	80a1a <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80ac4:	f014 0f01 	tst.w	r4, #1
   80ac8:	d003      	beq.n	80ad2 <ISPProtocol_ProgramMemory+0x226>
   80aca:	9b02      	ldr	r3, [sp, #8]
   80acc:	2b13      	cmp	r3, #19
   80ace:	f43f af2c 	beq.w	8092a <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80ad2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80ad6:	f023 0308 	bic.w	r3, r3, #8
   80ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80ade:	4b0b      	ldr	r3, [pc, #44]	; (80b0c <ISPProtocol_ProgramMemory+0x260>)
   80ae0:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80ae2:	f018 0f01 	tst.w	r8, #1
   80ae6:	f47f af3d 	bne.w	80964 <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80aea:	2b00      	cmp	r3, #0
   80aec:	f47f af38 	bne.w	80960 <ISPProtocol_ProgramMemory+0xb4>
   80af0:	f018 0f08 	tst.w	r8, #8
   80af4:	d198      	bne.n	80a28 <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80af6:	f028 0806 	bic.w	r8, r8, #6
   80afa:	f048 0802 	orr.w	r8, r8, #2
   80afe:	e793      	b.n	80a28 <ISPProtocol_ProgramMemory+0x17c>
   80b00:	2000269c 	.word	0x2000269c
   80b04:	0008ca54 	.word	0x0008ca54
   80b08:	00085ed9 	.word	0x00085ed9
   80b0c:	2000267c 	.word	0x2000267c
   80b10:	2000265c 	.word	0x2000265c
   80b14:	2000265a 	.word	0x2000265a
   80b18:	0008118d 	.word	0x0008118d
   80b1c:	20002658 	.word	0x20002658
   80b20:	40008000 	.word	0x40008000
   80b24:	00083fbb 	.word	0x00083fbb
   80b28:	000811cd 	.word	0x000811cd

00080b2c <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   80b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b30:	b085      	sub	sp, #20
   80b32:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80b34:	4b45      	ldr	r3, [pc, #276]	; (80c4c <ISPProtocol_ReadMemory+0x120>)
   80b36:	899b      	ldrh	r3, [r3, #12]
   80b38:	2b03      	cmp	r3, #3
   80b3a:	d118      	bne.n	80b6e <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80b3c:	4b43      	ldr	r3, [pc, #268]	; (80c4c <ISPProtocol_ReadMemory+0x120>)
   80b3e:	689b      	ldr	r3, [r3, #8]
   80b40:	681b      	ldr	r3, [r3, #0]
   80b42:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80b44:	4a42      	ldr	r2, [pc, #264]	; (80c50 <ISPProtocol_ReadMemory+0x124>)
   80b46:	9800      	ldr	r0, [sp, #0]
   80b48:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80b4a:	20c0      	movs	r0, #192	; 0xc0
   80b4c:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   80b4e:	4a41      	ldr	r2, [pc, #260]	; (80c54 <ISPProtocol_ReadMemory+0x128>)
   80b50:	2002      	movs	r0, #2
   80b52:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80b54:	b29b      	uxth	r3, r3
   80b56:	9301      	str	r3, [sp, #4]
   80b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80b5c:	d872      	bhi.n	80c44 <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80b5e:	2b00      	cmp	r3, #0
   80b60:	d06a      	beq.n	80c38 <ISPProtocol_ReadMemory+0x10c>
   80b62:	f101 38ff 	add.w	r8, r1, #4294967295
   80b66:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   80b68:	463e      	mov	r6, r7
   80b6a:	4c3b      	ldr	r4, [pc, #236]	; (80c58 <ISPProtocol_ReadMemory+0x12c>)
   80b6c:	e026      	b.n	80bbc <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80b6e:	4619      	mov	r1, r3
   80b70:	483a      	ldr	r0, [pc, #232]	; (80c5c <ISPProtocol_ReadMemory+0x130>)
   80b72:	4b3b      	ldr	r3, [pc, #236]	; (80c60 <ISPProtocol_ReadMemory+0x134>)
   80b74:	4798      	blx	r3
		return;
   80b76:	e065      	b.n	80c44 <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   80b78:	4b3a      	ldr	r3, [pc, #232]	; (80c64 <ISPProtocol_ReadMemory+0x138>)
   80b7a:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80b7c:	4b3a      	ldr	r3, [pc, #232]	; (80c68 <ISPProtocol_ReadMemory+0x13c>)
   80b7e:	701e      	strb	r6, [r3, #0]
   80b80:	e022      	b.n	80bc8 <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80b82:	f089 0908 	eor.w	r9, r9, #8
   80b86:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80b8a:	f01b 0f01 	tst.w	fp, #1
   80b8e:	d010      	beq.n	80bb2 <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   80b90:	4a36      	ldr	r2, [pc, #216]	; (80c6c <ISPProtocol_ReadMemory+0x140>)
   80b92:	6813      	ldr	r3, [r2, #0]
   80b94:	3301      	adds	r3, #1
   80b96:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80b98:	e006      	b.n	80ba8 <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   80b9a:	4a34      	ldr	r2, [pc, #208]	; (80c6c <ISPProtocol_ReadMemory+0x140>)
   80b9c:	6813      	ldr	r3, [r2, #0]
   80b9e:	3301      	adds	r3, #1
   80ba0:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80ba2:	9a00      	ldr	r2, [sp, #0]
   80ba4:	2a16      	cmp	r2, #22
   80ba6:	d004      	beq.n	80bb2 <ISPProtocol_ReadMemory+0x86>
   80ba8:	b29b      	uxth	r3, r3
   80baa:	b913      	cbnz	r3, 80bb2 <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   80bac:	2301      	movs	r3, #1
   80bae:	4a2e      	ldr	r2, [pc, #184]	; (80c68 <ISPProtocol_ReadMemory+0x13c>)
   80bb0:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80bb2:	3701      	adds	r7, #1
   80bb4:	b2bb      	uxth	r3, r7
   80bb6:	9a01      	ldr	r2, [sp, #4]
   80bb8:	429a      	cmp	r2, r3
   80bba:	d93d      	bls.n	80c38 <ISPProtocol_ReadMemory+0x10c>
   80bbc:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   80bc0:	4b29      	ldr	r3, [pc, #164]	; (80c68 <ISPProtocol_ReadMemory+0x13c>)
   80bc2:	781b      	ldrb	r3, [r3, #0]
   80bc4:	2b00      	cmp	r3, #0
   80bc6:	d1d7      	bne.n	80b78 <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80bc8:	f89d 900e 	ldrb.w	r9, [sp, #14]
   80bcc:	4633      	mov	r3, r6
   80bce:	4632      	mov	r2, r6
   80bd0:	4649      	mov	r1, r9
   80bd2:	4620      	mov	r0, r4
   80bd4:	4d26      	ldr	r5, [pc, #152]	; (80c70 <ISPProtocol_ReadMemory+0x144>)
   80bd6:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80bd8:	f8df a090 	ldr.w	sl, [pc, #144]	; 80c6c <ISPProtocol_ReadMemory+0x140>
   80bdc:	4633      	mov	r3, r6
   80bde:	4632      	mov	r2, r6
   80be0:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80be4:	4620      	mov	r0, r4
   80be6:	47a8      	blx	r5
   80be8:	4633      	mov	r3, r6
   80bea:	4632      	mov	r2, r6
   80bec:	f89a 1000 	ldrb.w	r1, [sl]
   80bf0:	4620      	mov	r0, r4
   80bf2:	47a8      	blx	r5
   80bf4:	4633      	mov	r3, r6
   80bf6:	4632      	mov	r2, r6
   80bf8:	4631      	mov	r1, r6
   80bfa:	4620      	mov	r0, r4
   80bfc:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80bfe:	6923      	ldr	r3, [r4, #16]
   80c00:	f413 7f00 	tst.w	r3, #512	; 0x200
   80c04:	d0fb      	beq.n	80bfe <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   80c06:	f10d 0209 	add.w	r2, sp, #9
   80c0a:	f10d 010a 	add.w	r1, sp, #10
   80c0e:	4620      	mov	r0, r4
   80c10:	4b18      	ldr	r3, [pc, #96]	; (80c74 <ISPProtocol_ReadMemory+0x148>)
   80c12:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   80c14:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80c18:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80c1c:	9b00      	ldr	r3, [sp, #0]
   80c1e:	2b14      	cmp	r3, #20
   80c20:	d0af      	beq.n	80b82 <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c22:	f01b 0f01 	tst.w	fp, #1
   80c26:	d1b8      	bne.n	80b9a <ISPProtocol_ReadMemory+0x6e>
   80c28:	9b00      	ldr	r3, [sp, #0]
   80c2a:	2b16      	cmp	r3, #22
   80c2c:	d1c1      	bne.n	80bb2 <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   80c2e:	4a0f      	ldr	r2, [pc, #60]	; (80c6c <ISPProtocol_ReadMemory+0x140>)
   80c30:	6813      	ldr	r3, [r2, #0]
   80c32:	3301      	adds	r3, #1
   80c34:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c36:	e7bc      	b.n	80bb2 <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80c38:	4b05      	ldr	r3, [pc, #20]	; (80c50 <ISPProtocol_ReadMemory+0x124>)
   80c3a:	2200      	movs	r2, #0
   80c3c:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80c3e:	4b05      	ldr	r3, [pc, #20]	; (80c54 <ISPProtocol_ReadMemory+0x128>)
   80c40:	2202      	movs	r2, #2
   80c42:	801a      	strh	r2, [r3, #0]
}
   80c44:	b005      	add	sp, #20
   80c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c4a:	bf00      	nop
   80c4c:	2000269c 	.word	0x2000269c
   80c50:	2000265c 	.word	0x2000265c
   80c54:	2000265a 	.word	0x2000265a
   80c58:	40008000 	.word	0x40008000
   80c5c:	0008c9fc 	.word	0x0008c9fc
   80c60:	00085ed9 	.word	0x00085ed9
   80c64:	0008118d 	.word	0x0008118d
   80c68:	20002658 	.word	0x20002658
   80c6c:	2000267c 	.word	0x2000267c
   80c70:	00083fbb 	.word	0x00083fbb
   80c74:	00083f8d 	.word	0x00083f8d

00080c78 <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   80c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c7c:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80c7e:	4b21      	ldr	r3, [pc, #132]	; (80d04 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c80:	8999      	ldrh	r1, [r3, #12]
   80c82:	2905      	cmp	r1, #5
   80c84:	d139      	bne.n	80cfa <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   80c86:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80c88:	4b1e      	ldr	r3, [pc, #120]	; (80d04 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c8a:	689b      	ldr	r3, [r3, #8]
   80c8c:	6818      	ldr	r0, [r3, #0]
   80c8e:	9002      	str	r0, [sp, #8]
   80c90:	791a      	ldrb	r2, [r3, #4]
   80c92:	f88d 200c 	strb.w	r2, [sp, #12]
   80c96:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80c9a:	f10d 0609 	add.w	r6, sp, #9
   80c9e:	ad01      	add	r5, sp, #4
   80ca0:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80ca4:	4c18      	ldr	r4, [pc, #96]	; (80d08 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80ca6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80d1c <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   80caa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80d20 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   80cae:	2300      	movs	r3, #0
   80cb0:	461a      	mov	r2, r3
   80cb2:	f816 1b01 	ldrb.w	r1, [r6], #1
   80cb6:	4620      	mov	r0, r4
   80cb8:	47c8      	blx	r9
   80cba:	6923      	ldr	r3, [r4, #16]
   80cbc:	f413 7f00 	tst.w	r3, #512	; 0x200
   80cc0:	d0fb      	beq.n	80cba <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   80cc2:	f10d 0201 	add.w	r2, sp, #1
   80cc6:	f10d 0102 	add.w	r1, sp, #2
   80cca:	4620      	mov	r0, r4
   80ccc:	47c0      	blx	r8
			return  ReceivedByte;
   80cce:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80cd2:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80cd6:	4555      	cmp	r5, sl
   80cd8:	d1e9      	bne.n	80cae <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   80cda:	4b0c      	ldr	r3, [pc, #48]	; (80d0c <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   80cdc:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cde:	2200      	movs	r2, #0
   80ce0:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80ce2:	a904      	add	r1, sp, #16
   80ce4:	448b      	add	fp, r1
   80ce6:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80cea:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80cec:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80cee:	4b08      	ldr	r3, [pc, #32]	; (80d10 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   80cf0:	2204      	movs	r2, #4
   80cf2:	801a      	strh	r2, [r3, #0]
}
   80cf4:	b005      	add	sp, #20
   80cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80cfa:	4806      	ldr	r0, [pc, #24]	; (80d14 <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   80cfc:	4b06      	ldr	r3, [pc, #24]	; (80d18 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   80cfe:	4798      	blx	r3
		return;
   80d00:	e7f8      	b.n	80cf4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   80d02:	bf00      	nop
   80d04:	2000269c 	.word	0x2000269c
   80d08:	40008000 	.word	0x40008000
   80d0c:	2000265c 	.word	0x2000265c
   80d10:	2000265a 	.word	0x2000265a
   80d14:	0008ca54 	.word	0x0008ca54
   80d18:	00085ed9 	.word	0x00085ed9
   80d1c:	00083fbb 	.word	0x00083fbb
   80d20:	00083f8d 	.word	0x00083f8d

00080d24 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   80d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80d28:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80d2a:	4b13      	ldr	r3, [pc, #76]	; (80d78 <ISPProtocol_WriteFuseLock+0x54>)
   80d2c:	8999      	ldrh	r1, [r3, #12]
   80d2e:	2904      	cmp	r1, #4
   80d30:	d11d      	bne.n	80d6e <ISPProtocol_WriteFuseLock+0x4a>
   80d32:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80d34:	4b10      	ldr	r3, [pc, #64]	; (80d78 <ISPProtocol_WriteFuseLock+0x54>)
   80d36:	689b      	ldr	r3, [r3, #8]
   80d38:	681b      	ldr	r3, [r3, #0]
   80d3a:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80d3c:	ac01      	add	r4, sp, #4
   80d3e:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d42:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80d90 <ISPProtocol_WriteFuseLock+0x6c>
   80d46:	2700      	movs	r7, #0
   80d48:	4e0c      	ldr	r6, [pc, #48]	; (80d7c <ISPProtocol_WriteFuseLock+0x58>)
   80d4a:	463b      	mov	r3, r7
   80d4c:	463a      	mov	r2, r7
   80d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   80d52:	4640      	mov	r0, r8
   80d54:	47b0      	blx	r6
   80d56:	454c      	cmp	r4, r9
   80d58:	d1f7      	bne.n	80d4a <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80d5a:	4b09      	ldr	r3, [pc, #36]	; (80d80 <ISPProtocol_WriteFuseLock+0x5c>)
   80d5c:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d5e:	2200      	movs	r2, #0
   80d60:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80d62:	4b08      	ldr	r3, [pc, #32]	; (80d84 <ISPProtocol_WriteFuseLock+0x60>)
   80d64:	2202      	movs	r2, #2
   80d66:	801a      	strh	r2, [r3, #0]
}
   80d68:	b003      	add	sp, #12
   80d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d6e:	4806      	ldr	r0, [pc, #24]	; (80d88 <ISPProtocol_WriteFuseLock+0x64>)
   80d70:	4b06      	ldr	r3, [pc, #24]	; (80d8c <ISPProtocol_WriteFuseLock+0x68>)
   80d72:	4798      	blx	r3
		return;
   80d74:	e7f8      	b.n	80d68 <ISPProtocol_WriteFuseLock+0x44>
   80d76:	bf00      	nop
   80d78:	2000269c 	.word	0x2000269c
   80d7c:	00083fbb 	.word	0x00083fbb
   80d80:	2000265c 	.word	0x2000265c
   80d84:	2000265a 	.word	0x2000265a
   80d88:	0008ca54 	.word	0x0008ca54
   80d8c:	00085ed9 	.word	0x00085ed9
   80d90:	40008000 	.word	0x40008000

00080d94 <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   80d94:	4770      	bx	lr
	...

00080d98 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80d98:	b900      	cbnz	r0, 80d9c <ISPProtocol_DelayMS+0x4>
   80d9a:	4770      	bx	lr
{
   80d9c:	b538      	push	{r3, r4, r5, lr}
   80d9e:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80da0:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80da4:	2300      	movs	r3, #0
   80da6:	4806      	ldr	r0, [pc, #24]	; (80dc0 <ISPProtocol_DelayMS+0x28>)
   80da8:	f243 64af 	movw	r4, #13999	; 0x36af
   80dac:	2500      	movs	r5, #0
   80dae:	fbe0 4501 	umlal	r4, r5, r0, r1
   80db2:	4620      	mov	r0, r4
   80db4:	4629      	mov	r1, r5
   80db6:	4c03      	ldr	r4, [pc, #12]	; (80dc4 <ISPProtocol_DelayMS+0x2c>)
   80db8:	47a0      	blx	r4
   80dba:	4b03      	ldr	r3, [pc, #12]	; (80dc8 <ISPProtocol_DelayMS+0x30>)
   80dbc:	4798      	blx	r3
}
   80dbe:	bd38      	pop	{r3, r4, r5, pc}
   80dc0:	05b8d800 	.word	0x05b8d800
   80dc4:	00085b99 	.word	0x00085b99
   80dc8:	20000087 	.word	0x20000087

00080dcc <ISPProtocol_EnterISPMode>:
{
   80dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dd0:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   80dd2:	4b42      	ldr	r3, [pc, #264]	; (80edc <ISPProtocol_EnterISPMode+0x110>)
   80dd4:	8999      	ldrh	r1, [r3, #12]
   80dd6:	290b      	cmp	r1, #11
   80dd8:	d003      	beq.n	80de2 <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80dda:	4841      	ldr	r0, [pc, #260]	; (80ee0 <ISPProtocol_EnterISPMode+0x114>)
   80ddc:	4b41      	ldr	r3, [pc, #260]	; (80ee4 <ISPProtocol_EnterISPMode+0x118>)
   80dde:	4798      	blx	r3
		return;
   80de0:	e074      	b.n	80ecc <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80de2:	4b3e      	ldr	r3, [pc, #248]	; (80edc <ISPProtocol_EnterISPMode+0x110>)
   80de4:	689b      	ldr	r3, [r3, #8]
   80de6:	aa07      	add	r2, sp, #28
   80de8:	6818      	ldr	r0, [r3, #0]
   80dea:	6859      	ldr	r1, [r3, #4]
   80dec:	c203      	stmia	r2!, {r0, r1}
   80dee:	8918      	ldrh	r0, [r3, #8]
   80df0:	7a99      	ldrb	r1, [r3, #10]
   80df2:	8010      	strh	r0, [r2, #0]
   80df4:	7091      	strb	r1, [r2, #2]
   80df6:	785e      	ldrb	r6, [r3, #1]
   80df8:	9603      	str	r6, [sp, #12]
   80dfa:	7898      	ldrb	r0, [r3, #2]
   80dfc:	78dc      	ldrb	r4, [r3, #3]
   80dfe:	f893 b004 	ldrb.w	fp, [r3, #4]
   80e02:	795a      	ldrb	r2, [r3, #5]
   80e04:	9202      	str	r2, [sp, #8]
   80e06:	799b      	ldrb	r3, [r3, #6]
   80e08:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   80e0a:	4b37      	ldr	r3, [pc, #220]	; (80ee8 <ISPProtocol_EnterISPMode+0x11c>)
   80e0c:	2200      	movs	r2, #0
   80e0e:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80e10:	4d36      	ldr	r5, [pc, #216]	; (80eec <ISPProtocol_EnterISPMode+0x120>)
   80e12:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80e14:	4b36      	ldr	r3, [pc, #216]	; (80ef0 <ISPProtocol_EnterISPMode+0x124>)
   80e16:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80e18:	2001      	movs	r0, #1
   80e1a:	4b36      	ldr	r3, [pc, #216]	; (80ef4 <ISPProtocol_EnterISPMode+0x128>)
   80e1c:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e1e:	4630      	mov	r0, r6
   80e20:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80e22:	f104 38ff 	add.w	r8, r4, #4294967295
   80e26:	fa5f f888 	uxtb.w	r8, r8
   80e2a:	b114      	cbz	r4, 80e32 <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e2c:	462f      	mov	r7, r5
   80e2e:	4c32      	ldr	r4, [pc, #200]	; (80ef8 <ISPProtocol_EnterISPMode+0x12c>)
   80e30:	e01c      	b.n	80e6c <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80e32:	24c0      	movs	r4, #192	; 0xc0
   80e34:	e03f      	b.n	80eb6 <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80e36:	9b01      	ldr	r3, [sp, #4]
   80e38:	2b00      	cmp	r3, #0
   80e3a:	d03b      	beq.n	80eb4 <ISPProtocol_EnterISPMode+0xe8>
   80e3c:	aa0a      	add	r2, sp, #40	; 0x28
   80e3e:	18d3      	adds	r3, r2, r3
   80e40:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80e44:	9a02      	ldr	r2, [sp, #8]
   80e46:	4293      	cmp	r3, r2
   80e48:	d034      	beq.n	80eb4 <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   80e4a:	2000      	movs	r0, #0
   80e4c:	4d29      	ldr	r5, [pc, #164]	; (80ef4 <ISPProtocol_EnterISPMode+0x128>)
   80e4e:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e50:	9e03      	ldr	r6, [sp, #12]
   80e52:	4630      	mov	r0, r6
   80e54:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80e56:	2001      	movs	r0, #1
   80e58:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80e5a:	4630      	mov	r0, r6
   80e5c:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80e5e:	f108 38ff 	add.w	r8, r8, #4294967295
   80e62:	fa5f f888 	uxtb.w	r8, r8
   80e66:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   80e6a:	d034      	beq.n	80ed6 <ISPProtocol_EnterISPMode+0x10a>
   80e6c:	4b23      	ldr	r3, [pc, #140]	; (80efc <ISPProtocol_EnterISPMode+0x130>)
   80e6e:	681b      	ldr	r3, [r3, #0]
   80e70:	b37b      	cbz	r3, 80ed2 <ISPProtocol_EnterISPMode+0x106>
   80e72:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80e76:	ad06      	add	r5, sp, #24
   80e78:	f10d 0a1c 	add.w	sl, sp, #28
   80e7c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80f10 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e80:	4658      	mov	r0, fp
   80e82:	47b8      	blx	r7
   80e84:	2300      	movs	r3, #0
   80e86:	461a      	mov	r2, r3
   80e88:	f816 1b01 	ldrb.w	r1, [r6], #1
   80e8c:	4620      	mov	r0, r4
   80e8e:	47c8      	blx	r9
   80e90:	6923      	ldr	r3, [r4, #16]
   80e92:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e96:	d0fb      	beq.n	80e90 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80e98:	f10d 0215 	add.w	r2, sp, #21
   80e9c:	f10d 0116 	add.w	r1, sp, #22
   80ea0:	4620      	mov	r0, r4
   80ea2:	4b17      	ldr	r3, [pc, #92]	; (80f00 <ISPProtocol_EnterISPMode+0x134>)
   80ea4:	4798      	blx	r3
			return  ReceivedByte;
   80ea6:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80eaa:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80eae:	4555      	cmp	r5, sl
   80eb0:	d1e6      	bne.n	80e80 <ISPProtocol_EnterISPMode+0xb4>
   80eb2:	e7c0      	b.n	80e36 <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   80eb4:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   80eb6:	4621      	mov	r1, r4
   80eb8:	4812      	ldr	r0, [pc, #72]	; (80f04 <ISPProtocol_EnterISPMode+0x138>)
   80eba:	4b0a      	ldr	r3, [pc, #40]	; (80ee4 <ISPProtocol_EnterISPMode+0x118>)
   80ebc:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80ebe:	4b12      	ldr	r3, [pc, #72]	; (80f08 <ISPProtocol_EnterISPMode+0x13c>)
   80ec0:	2210      	movs	r2, #16
   80ec2:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80ec4:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   80ec6:	4b11      	ldr	r3, [pc, #68]	; (80f0c <ISPProtocol_EnterISPMode+0x140>)
   80ec8:	2202      	movs	r2, #2
   80eca:	801a      	strh	r2, [r3, #0]
}
   80ecc:	b00b      	add	sp, #44	; 0x2c
   80ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80ed2:	24c0      	movs	r4, #192	; 0xc0
   80ed4:	e7ef      	b.n	80eb6 <ISPProtocol_EnterISPMode+0xea>
   80ed6:	24c0      	movs	r4, #192	; 0xc0
   80ed8:	e7ed      	b.n	80eb6 <ISPProtocol_EnterISPMode+0xea>
   80eda:	bf00      	nop
   80edc:	2000269c 	.word	0x2000269c
   80ee0:	0008ca54 	.word	0x0008ca54
   80ee4:	00085ed9 	.word	0x00085ed9
   80ee8:	2000267c 	.word	0x2000267c
   80eec:	00080d99 	.word	0x00080d99
   80ef0:	0008100d 	.word	0x0008100d
   80ef4:	000810cd 	.word	0x000810cd
   80ef8:	40008000 	.word	0x40008000
   80efc:	20002684 	.word	0x20002684
   80f00:	00083f8d 	.word	0x00083f8d
   80f04:	0008ca24 	.word	0x0008ca24
   80f08:	2000265c 	.word	0x2000265c
   80f0c:	2000265a 	.word	0x2000265a
   80f10:	00083fbb 	.word	0x00083fbb

00080f14 <ISPProtocol_LeaveISPMode>:
{
   80f14:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   80f16:	4b0f      	ldr	r3, [pc, #60]	; (80f54 <ISPProtocol_LeaveISPMode+0x40>)
   80f18:	8999      	ldrh	r1, [r3, #12]
   80f1a:	2902      	cmp	r1, #2
   80f1c:	d003      	beq.n	80f26 <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80f1e:	480e      	ldr	r0, [pc, #56]	; (80f58 <ISPProtocol_LeaveISPMode+0x44>)
   80f20:	4b0e      	ldr	r3, [pc, #56]	; (80f5c <ISPProtocol_LeaveISPMode+0x48>)
   80f22:	4798      	blx	r3
}
   80f24:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80f26:	4b0b      	ldr	r3, [pc, #44]	; (80f54 <ISPProtocol_LeaveISPMode+0x40>)
   80f28:	689b      	ldr	r3, [r3, #8]
   80f2a:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80f2c:	b2e8      	uxtb	r0, r5
   80f2e:	4c0c      	ldr	r4, [pc, #48]	; (80f60 <ISPProtocol_LeaveISPMode+0x4c>)
   80f30:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80f32:	2000      	movs	r0, #0
   80f34:	4b0b      	ldr	r3, [pc, #44]	; (80f64 <ISPProtocol_LeaveISPMode+0x50>)
   80f36:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80f38:	4b0b      	ldr	r3, [pc, #44]	; (80f68 <ISPProtocol_LeaveISPMode+0x54>)
   80f3a:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80f3c:	0a28      	lsrs	r0, r5, #8
   80f3e:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80f40:	4b0a      	ldr	r3, [pc, #40]	; (80f6c <ISPProtocol_LeaveISPMode+0x58>)
   80f42:	2211      	movs	r2, #17
   80f44:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80f46:	2200      	movs	r2, #0
   80f48:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80f4a:	4b09      	ldr	r3, [pc, #36]	; (80f70 <ISPProtocol_LeaveISPMode+0x5c>)
   80f4c:	2202      	movs	r2, #2
   80f4e:	801a      	strh	r2, [r3, #0]
   80f50:	e7e8      	b.n	80f24 <ISPProtocol_LeaveISPMode+0x10>
   80f52:	bf00      	nop
   80f54:	2000269c 	.word	0x2000269c
   80f58:	0008ca54 	.word	0x0008ca54
   80f5c:	00085ed9 	.word	0x00085ed9
   80f60:	00080d99 	.word	0x00080d99
   80f64:	000810cd 	.word	0x000810cd
   80f68:	000810b5 	.word	0x000810b5
   80f6c:	2000265c 	.word	0x2000265c
   80f70:	2000265a 	.word	0x2000265a

00080f74 <ISPProtocol_ChipErase>:
{
   80f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f78:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80f7a:	4b1b      	ldr	r3, [pc, #108]	; (80fe8 <ISPProtocol_ChipErase+0x74>)
   80f7c:	8999      	ldrh	r1, [r3, #12]
   80f7e:	2906      	cmp	r1, #6
   80f80:	d12a      	bne.n	80fd8 <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   80f82:	4b19      	ldr	r3, [pc, #100]	; (80fe8 <ISPProtocol_ChipErase+0x74>)
   80f84:	689b      	ldr	r3, [r3, #8]
   80f86:	6818      	ldr	r0, [r3, #0]
   80f88:	9000      	str	r0, [sp, #0]
   80f8a:	889a      	ldrh	r2, [r3, #4]
   80f8c:	f8ad 2004 	strh.w	r2, [sp, #4]
   80f90:	f893 a000 	ldrb.w	sl, [r3]
   80f94:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   80f98:	f10d 0402 	add.w	r4, sp, #2
   80f9c:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   80fa0:	4f12      	ldr	r7, [pc, #72]	; (80fec <ISPProtocol_ChipErase+0x78>)
   80fa2:	2600      	movs	r6, #0
   80fa4:	4d12      	ldr	r5, [pc, #72]	; (80ff0 <ISPProtocol_ChipErase+0x7c>)
   80fa6:	4633      	mov	r3, r6
   80fa8:	4632      	mov	r2, r6
   80faa:	f814 1b01 	ldrb.w	r1, [r4], #1
   80fae:	4638      	mov	r0, r7
   80fb0:	47a8      	blx	r5
   80fb2:	4544      	cmp	r4, r8
   80fb4:	d1f7      	bne.n	80fa6 <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   80fb6:	f1b9 0f00 	cmp.w	r9, #0
   80fba:	d111      	bne.n	80fe0 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   80fbc:	4650      	mov	r0, sl
   80fbe:	4b0d      	ldr	r3, [pc, #52]	; (80ff4 <ISPProtocol_ChipErase+0x80>)
   80fc0:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   80fc2:	4b0d      	ldr	r3, [pc, #52]	; (80ff8 <ISPProtocol_ChipErase+0x84>)
   80fc4:	2212      	movs	r2, #18
   80fc6:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80fc8:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   80fcc:	4b0b      	ldr	r3, [pc, #44]	; (80ffc <ISPProtocol_ChipErase+0x88>)
   80fce:	2202      	movs	r2, #2
   80fd0:	801a      	strh	r2, [r3, #0]
}
   80fd2:	b002      	add	sp, #8
   80fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80fd8:	4809      	ldr	r0, [pc, #36]	; (81000 <ISPProtocol_ChipErase+0x8c>)
   80fda:	4b0a      	ldr	r3, [pc, #40]	; (81004 <ISPProtocol_ChipErase+0x90>)
   80fdc:	4798      	blx	r3
		return;
   80fde:	e7f8      	b.n	80fd2 <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   80fe0:	4b09      	ldr	r3, [pc, #36]	; (81008 <ISPProtocol_ChipErase+0x94>)
   80fe2:	4798      	blx	r3
   80fe4:	4681      	mov	r9, r0
   80fe6:	e7ec      	b.n	80fc2 <ISPProtocol_ChipErase+0x4e>
   80fe8:	2000269c 	.word	0x2000269c
   80fec:	40008000 	.word	0x40008000
   80ff0:	00083fbb 	.word	0x00083fbb
   80ff4:	00080d99 	.word	0x00080d99
   80ff8:	2000265c 	.word	0x2000265c
   80ffc:	2000265a 	.word	0x2000265a
   81000:	0008ca44 	.word	0x0008ca44
   81004:	00085ed9 	.word	0x00085ed9
   81008:	00081111 	.word	0x00081111

0008100c <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   8100c:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   8100e:	2098      	movs	r0, #152	; 0x98
   81010:	4b1e      	ldr	r3, [pc, #120]	; (8108c <ISPTarget_EnableTargetISP+0x80>)
   81012:	4798      	blx	r3
   81014:	4b1e      	ldr	r3, [pc, #120]	; (81090 <ISPTarget_EnableTargetISP+0x84>)
   81016:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   8101a:	4c1e      	ldr	r4, [pc, #120]	; (81094 <ISPTarget_EnableTargetISP+0x88>)
   8101c:	4620      	mov	r0, r4
   8101e:	4b1e      	ldr	r3, [pc, #120]	; (81098 <ISPTarget_EnableTargetISP+0x8c>)
   81020:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   81022:	2380      	movs	r3, #128	; 0x80
   81024:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81026:	6863      	ldr	r3, [r4, #4]
   81028:	f043 0301 	orr.w	r3, r3, #1
   8102c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8102e:	6863      	ldr	r3, [r4, #4]
   81030:	f043 0310 	orr.w	r3, r3, #16
   81034:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   81036:	6863      	ldr	r3, [r4, #4]
   81038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8103c:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   8103e:	4917      	ldr	r1, [pc, #92]	; (8109c <ISPTarget_EnableTargetISP+0x90>)
   81040:	4628      	mov	r0, r5
   81042:	4b17      	ldr	r3, [pc, #92]	; (810a0 <ISPTarget_EnableTargetISP+0x94>)
   81044:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   81046:	1e04      	subs	r4, r0, #0
   81048:	bfb8      	it	lt
   8104a:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   8104c:	4d11      	ldr	r5, [pc, #68]	; (81094 <ISPTarget_EnableTargetISP+0x88>)
   8104e:	2200      	movs	r2, #0
   81050:	4611      	mov	r1, r2
   81052:	4628      	mov	r0, r5
   81054:	4b13      	ldr	r3, [pc, #76]	; (810a4 <ISPTarget_EnableTargetISP+0x98>)
   81056:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   81058:	2201      	movs	r2, #1
   8105a:	2100      	movs	r1, #0
   8105c:	4628      	mov	r0, r5
   8105e:	4b12      	ldr	r3, [pc, #72]	; (810a8 <ISPTarget_EnableTargetISP+0x9c>)
   81060:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   81062:	b2e2      	uxtb	r2, r4
   81064:	2100      	movs	r1, #0
   81066:	4628      	mov	r0, r5
   81068:	4b10      	ldr	r3, [pc, #64]	; (810ac <ISPTarget_EnableTargetISP+0xa0>)
   8106a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8106c:	2301      	movs	r3, #1
   8106e:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   81070:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81074:	200e      	movs	r0, #14
   81076:	4c0e      	ldr	r4, [pc, #56]	; (810b0 <ISPTarget_EnableTargetISP+0xa4>)
   81078:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   8107a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8107e:	200d      	movs	r0, #13
   81080:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81082:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81086:	200f      	movs	r0, #15
   81088:	47a0      	blx	r4
#endif

}
   8108a:	bd38      	pop	{r3, r4, r5, pc}
   8108c:	000822bd 	.word	0x000822bd
   81090:	200002ec 	.word	0x200002ec
   81094:	40008000 	.word	0x40008000
   81098:	00083f6d 	.word	0x00083f6d
   8109c:	05b8d800 	.word	0x05b8d800
   810a0:	0008402b 	.word	0x0008402b
   810a4:	00083fef 	.word	0x00083fef
   810a8:	0008400d 	.word	0x0008400d
   810ac:	00084041 	.word	0x00084041
   810b0:	00083ba5 	.word	0x00083ba5

000810b4 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   810b4:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   810b6:	4803      	ldr	r0, [pc, #12]	; (810c4 <ISPTarget_DisableTargetISP+0x10>)
   810b8:	2302      	movs	r3, #2
   810ba:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   810bc:	4b02      	ldr	r3, [pc, #8]	; (810c8 <ISPTarget_DisableTargetISP+0x14>)
   810be:	4798      	blx	r3
#endif
}
   810c0:	bd08      	pop	{r3, pc}
   810c2:	bf00      	nop
   810c4:	40008000 	.word	0x40008000
   810c8:	00083f7d 	.word	0x00083f7d

000810cc <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   810cc:	b508      	push	{r3, lr}
	if (ResetTarget)
   810ce:	b180      	cbz	r0, 810f2 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   810d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810d4:	2011      	movs	r0, #17
   810d6:	4b0a      	ldr	r3, [pc, #40]	; (81100 <ISPTarget_ChangeTargetResetLine+0x34>)
   810d8:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   810da:	209e      	movs	r0, #158	; 0x9e
   810dc:	4b09      	ldr	r3, [pc, #36]	; (81104 <ISPTarget_ChangeTargetResetLine+0x38>)
   810de:	4798      	blx	r3
   810e0:	b918      	cbnz	r0, 810ea <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   810e2:	2011      	movs	r0, #17
   810e4:	4b08      	ldr	r3, [pc, #32]	; (81108 <ISPTarget_ChangeTargetResetLine+0x3c>)
   810e6:	4798      	blx	r3
   810e8:	e008      	b.n	810fc <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   810ea:	2011      	movs	r0, #17
   810ec:	4b07      	ldr	r3, [pc, #28]	; (8110c <ISPTarget_ChangeTargetResetLine+0x40>)
   810ee:	4798      	blx	r3
   810f0:	e004      	b.n	810fc <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   810f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   810f6:	2011      	movs	r0, #17
   810f8:	4b01      	ldr	r3, [pc, #4]	; (81100 <ISPTarget_ChangeTargetResetLine+0x34>)
   810fa:	4798      	blx	r3
	}
}
   810fc:	bd08      	pop	{r3, pc}
   810fe:	bf00      	nop
   81100:	00083ba5 	.word	0x00083ba5
   81104:	000822bd 	.word	0x000822bd
   81108:	00083b71 	.word	0x00083b71
   8110c:	00083b8b 	.word	0x00083b8b

00081110 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   81110:	b570      	push	{r4, r5, r6, lr}
   81112:	b082      	sub	sp, #8
   81114:	4c19      	ldr	r4, [pc, #100]	; (8117c <ISPTarget_WaitWhileTargetBusy+0x6c>)
   81116:	2600      	movs	r6, #0
   81118:	4d19      	ldr	r5, [pc, #100]	; (81180 <ISPTarget_WaitWhileTargetBusy+0x70>)
   8111a:	4633      	mov	r3, r6
   8111c:	4632      	mov	r2, r6
   8111e:	21f0      	movs	r1, #240	; 0xf0
   81120:	4620      	mov	r0, r4
   81122:	47a8      	blx	r5
   81124:	4633      	mov	r3, r6
   81126:	4632      	mov	r2, r6
   81128:	4631      	mov	r1, r6
   8112a:	4620      	mov	r0, r4
   8112c:	47a8      	blx	r5
   8112e:	4633      	mov	r3, r6
   81130:	4632      	mov	r2, r6
   81132:	4631      	mov	r1, r6
   81134:	4620      	mov	r0, r4
   81136:	47a8      	blx	r5
   81138:	4633      	mov	r3, r6
   8113a:	4632      	mov	r2, r6
   8113c:	4631      	mov	r1, r6
   8113e:	4620      	mov	r0, r4
   81140:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   81142:	6923      	ldr	r3, [r4, #16]
   81144:	f413 7f00 	tst.w	r3, #512	; 0x200
   81148:	d0fb      	beq.n	81142 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   8114a:	f10d 0205 	add.w	r2, sp, #5
   8114e:	f10d 0106 	add.w	r1, sp, #6
   81152:	4620      	mov	r0, r4
   81154:	4b0b      	ldr	r3, [pc, #44]	; (81184 <ISPTarget_WaitWhileTargetBusy+0x74>)
   81156:	4798      	blx	r3
			return  ReceivedByte;
   81158:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   8115c:	f010 0001 	ands.w	r0, r0, #1
   81160:	d005      	beq.n	8116e <ISPTarget_WaitWhileTargetBusy+0x5e>
   81162:	4b09      	ldr	r3, [pc, #36]	; (81188 <ISPTarget_WaitWhileTargetBusy+0x78>)
   81164:	681b      	ldr	r3, [r3, #0]
   81166:	2b00      	cmp	r3, #0
   81168:	d1d7      	bne.n	8111a <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   8116a:	2081      	movs	r0, #129	; 0x81
   8116c:	e004      	b.n	81178 <ISPTarget_WaitWhileTargetBusy+0x68>
   8116e:	4b06      	ldr	r3, [pc, #24]	; (81188 <ISPTarget_WaitWhileTargetBusy+0x78>)
   81170:	681b      	ldr	r3, [r3, #0]
   81172:	2b00      	cmp	r3, #0
   81174:	bf08      	it	eq
   81176:	2081      	moveq	r0, #129	; 0x81
}
   81178:	b002      	add	sp, #8
   8117a:	bd70      	pop	{r4, r5, r6, pc}
   8117c:	40008000 	.word	0x40008000
   81180:	00083fbb 	.word	0x00083fbb
   81184:	00083f8d 	.word	0x00083f8d
   81188:	20002684 	.word	0x20002684

0008118c <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   8118c:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   8118e:	4d0c      	ldr	r5, [pc, #48]	; (811c0 <ISPTarget_LoadExtendedAddress+0x34>)
   81190:	2300      	movs	r3, #0
   81192:	461a      	mov	r2, r3
   81194:	214d      	movs	r1, #77	; 0x4d
   81196:	4628      	mov	r0, r5
   81198:	4c0a      	ldr	r4, [pc, #40]	; (811c4 <ISPTarget_LoadExtendedAddress+0x38>)
   8119a:	47a0      	blx	r4
   8119c:	2300      	movs	r3, #0
   8119e:	461a      	mov	r2, r3
   811a0:	4619      	mov	r1, r3
   811a2:	4628      	mov	r0, r5
   811a4:	47a0      	blx	r4
   811a6:	2300      	movs	r3, #0
   811a8:	461a      	mov	r2, r3
   811aa:	4907      	ldr	r1, [pc, #28]	; (811c8 <ISPTarget_LoadExtendedAddress+0x3c>)
   811ac:	7889      	ldrb	r1, [r1, #2]
   811ae:	4628      	mov	r0, r5
   811b0:	47a0      	blx	r4
   811b2:	2300      	movs	r3, #0
   811b4:	461a      	mov	r2, r3
   811b6:	4619      	mov	r1, r3
   811b8:	4628      	mov	r0, r5
   811ba:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   811bc:	bd38      	pop	{r3, r4, r5, pc}
   811be:	bf00      	nop
   811c0:	40008000 	.word	0x40008000
   811c4:	00083fbb 	.word	0x00083fbb
   811c8:	2000267c 	.word	0x2000267c

000811cc <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   811cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   811d0:	b082      	sub	sp, #8
   811d2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   811d6:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   811da:	2c20      	cmp	r4, #32
   811dc:	dc18      	bgt.n	81210 <ISPTarget_WaitForProgComplete+0x44>
   811de:	460e      	mov	r6, r1
   811e0:	4617      	mov	r7, r2
   811e2:	2c01      	cmp	r4, #1
   811e4:	dd5b      	ble.n	8129e <ISPTarget_WaitForProgComplete+0xd2>
   811e6:	3c02      	subs	r4, #2
   811e8:	2c1e      	cmp	r4, #30
   811ea:	d85a      	bhi.n	812a2 <ISPTarget_WaitForProgComplete+0xd6>
   811ec:	e8df f004 	tbb	[pc, r4]
   811f0:	591e5919 	.word	0x591e5919
   811f4:	59545959 	.word	0x59545959
   811f8:	59595959 	.word	0x59595959
   811fc:	59195959 	.word	0x59195959
   81200:	59595959 	.word	0x59595959
   81204:	59595959 	.word	0x59595959
   81208:	59595959 	.word	0x59595959
   8120c:	5959      	.short	0x5959
   8120e:	1e          	.byte	0x1e
   8120f:	00          	.byte	0x00
   81210:	2c40      	cmp	r4, #64	; 0x40
   81212:	d041      	beq.n	81298 <ISPTarget_WaitForProgComplete+0xcc>
   81214:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81216:	4b24      	ldr	r3, [pc, #144]	; (812a8 <ISPTarget_WaitForProgComplete+0xdc>)
   81218:	2264      	movs	r2, #100	; 0x64
   8121a:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   8121c:	b002      	add	sp, #8
   8121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   81222:	4618      	mov	r0, r3
   81224:	4b21      	ldr	r3, [pc, #132]	; (812ac <ISPTarget_WaitForProgComplete+0xe0>)
   81226:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81228:	2000      	movs	r0, #0
			break;
   8122a:	e7f4      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   8122c:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   81230:	4c1f      	ldr	r4, [pc, #124]	; (812b0 <ISPTarget_WaitForProgComplete+0xe4>)
   81232:	f04f 0900 	mov.w	r9, #0
   81236:	4d1f      	ldr	r5, [pc, #124]	; (812b4 <ISPTarget_WaitForProgComplete+0xe8>)
   81238:	464b      	mov	r3, r9
   8123a:	464a      	mov	r2, r9
   8123c:	4641      	mov	r1, r8
   8123e:	4620      	mov	r0, r4
   81240:	47a8      	blx	r5
   81242:	464b      	mov	r3, r9
   81244:	464a      	mov	r2, r9
   81246:	4651      	mov	r1, sl
   81248:	4620      	mov	r0, r4
   8124a:	47a8      	blx	r5
   8124c:	464b      	mov	r3, r9
   8124e:	464a      	mov	r2, r9
   81250:	b2f1      	uxtb	r1, r6
   81252:	4620      	mov	r0, r4
   81254:	47a8      	blx	r5
   81256:	464b      	mov	r3, r9
   81258:	464a      	mov	r2, r9
   8125a:	4649      	mov	r1, r9
   8125c:	4620      	mov	r0, r4
   8125e:	47a8      	blx	r5
   81260:	6923      	ldr	r3, [r4, #16]
   81262:	f413 7f00 	tst.w	r3, #512	; 0x200
   81266:	d0fb      	beq.n	81260 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   81268:	f10d 0205 	add.w	r2, sp, #5
   8126c:	f10d 0106 	add.w	r1, sp, #6
   81270:	4620      	mov	r0, r4
   81272:	4b11      	ldr	r3, [pc, #68]	; (812b8 <ISPTarget_WaitForProgComplete+0xec>)
   81274:	4798      	blx	r3
			return  ReceivedByte;
   81276:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   8127a:	429f      	cmp	r7, r3
   8127c:	d105      	bne.n	8128a <ISPTarget_WaitForProgComplete+0xbe>
   8127e:	4b0a      	ldr	r3, [pc, #40]	; (812a8 <ISPTarget_WaitForProgComplete+0xdc>)
   81280:	681b      	ldr	r3, [r3, #0]
   81282:	2b00      	cmp	r3, #0
   81284:	d1d8      	bne.n	81238 <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81286:	2080      	movs	r0, #128	; 0x80
   81288:	e7c5      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   8128a:	4b07      	ldr	r3, [pc, #28]	; (812a8 <ISPTarget_WaitForProgComplete+0xdc>)
   8128c:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8128e:	2b00      	cmp	r3, #0
   81290:	bf14      	ite	ne
   81292:	2000      	movne	r0, #0
   81294:	2080      	moveq	r0, #128	; 0x80
   81296:	e7be      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   81298:	4b08      	ldr	r3, [pc, #32]	; (812bc <ISPTarget_WaitForProgComplete+0xf0>)
   8129a:	4798      	blx	r3
			break;
   8129c:	e7bb      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8129e:	2000      	movs	r0, #0
   812a0:	e7b9      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
   812a2:	2000      	movs	r0, #0
   812a4:	e7b7      	b.n	81216 <ISPTarget_WaitForProgComplete+0x4a>
   812a6:	bf00      	nop
   812a8:	20002684 	.word	0x20002684
   812ac:	00080d99 	.word	0x00080d99
   812b0:	40008000 	.word	0x40008000
   812b4:	00083fbb 	.word	0x00083fbb
   812b8:	00083f8d 	.word	0x00083f8d
   812bc:	00081111 	.word	0x00081111

000812c0 <naeusb_add_in_handler>:
COMPILER_WORD_ALIGNED
uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   812c0:	4b06      	ldr	r3, [pc, #24]	; (812dc <naeusb_add_in_handler+0x1c>)
   812c2:	781b      	ldrb	r3, [r3, #0]
   812c4:	2b0f      	cmp	r3, #15
   812c6:	d807      	bhi.n	812d8 <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   812c8:	1c59      	adds	r1, r3, #1
   812ca:	4a04      	ldr	r2, [pc, #16]	; (812dc <naeusb_add_in_handler+0x1c>)
   812cc:	7011      	strb	r1, [r2, #0]
   812ce:	4a04      	ldr	r2, [pc, #16]	; (812e0 <naeusb_add_in_handler+0x20>)
   812d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   812d4:	2001      	movs	r0, #1
   812d6:	4770      	bx	lr
        return false;
   812d8:	2000      	movs	r0, #0
}
   812da:	4770      	bx	lr
   812dc:	20001bf8 	.word	0x20001bf8
   812e0:	20001bb8 	.word	0x20001bb8

000812e4 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   812e4:	4b06      	ldr	r3, [pc, #24]	; (81300 <naeusb_add_out_handler+0x1c>)
   812e6:	781b      	ldrb	r3, [r3, #0]
   812e8:	2b0f      	cmp	r3, #15
   812ea:	d807      	bhi.n	812fc <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   812ec:	1c59      	adds	r1, r3, #1
   812ee:	4a04      	ldr	r2, [pc, #16]	; (81300 <naeusb_add_out_handler+0x1c>)
   812f0:	7011      	strb	r1, [r2, #0]
   812f2:	4a04      	ldr	r2, [pc, #16]	; (81304 <naeusb_add_out_handler+0x20>)
   812f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   812f8:	2001      	movs	r0, #1
   812fa:	4770      	bx	lr
        return false;
   812fc:	2000      	movs	r0, #0
}
   812fe:	4770      	bx	lr
   81300:	20001bf9 	.word	0x20001bf9
   81304:	20001bfc 	.word	0x20001bfc

00081308 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81308:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   8130a:	4b01      	ldr	r3, [pc, #4]	; (81310 <main_suspend_action+0x8>)
   8130c:	4798      	blx	r3
}
   8130e:	bd08      	pop	{r3, pc}
   81310:	00082eb5 	.word	0x00082eb5

00081314 <main_resume_action>:

void main_resume_action(void)
{
   81314:	b508      	push	{r3, lr}
    ui_wakeup();
   81316:	4b01      	ldr	r3, [pc, #4]	; (8131c <main_resume_action+0x8>)
   81318:	4798      	blx	r3
}
   8131a:	bd08      	pop	{r3, pc}
   8131c:	00082ed1 	.word	0x00082ed1

00081320 <main_sof_action>:

void main_sof_action(void)
{
   81320:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   81322:	4b04      	ldr	r3, [pc, #16]	; (81334 <main_sof_action+0x14>)
   81324:	781b      	ldrb	r3, [r3, #0]
   81326:	b903      	cbnz	r3, 8132a <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   81328:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   8132a:	4b03      	ldr	r3, [pc, #12]	; (81338 <main_sof_action+0x18>)
   8132c:	4798      	blx	r3
   8132e:	4b03      	ldr	r3, [pc, #12]	; (8133c <main_sof_action+0x1c>)
   81330:	4798      	blx	r3
   81332:	e7f9      	b.n	81328 <main_sof_action+0x8>
   81334:	2000057c 	.word	0x2000057c
   81338:	00084cf9 	.word	0x00084cf9
   8133c:	00082ee9 	.word	0x00082ee9

00081340 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81340:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   81342:	2401      	movs	r4, #1
   81344:	4b04      	ldr	r3, [pc, #16]	; (81358 <main_vendor_enable+0x18>)
   81346:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81348:	4a04      	ldr	r2, [pc, #16]	; (8135c <main_vendor_enable+0x1c>)
   8134a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8134e:	4804      	ldr	r0, [pc, #16]	; (81360 <main_vendor_enable+0x20>)
   81350:	4b04      	ldr	r3, [pc, #16]	; (81364 <main_vendor_enable+0x24>)
   81352:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81354:	4620      	mov	r0, r4
   81356:	bd10      	pop	{r4, pc}
   81358:	2000057c 	.word	0x2000057c
   8135c:	00081799 	.word	0x00081799
   81360:	20002258 	.word	0x20002258
   81364:	00083079 	.word	0x00083079

00081368 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81368:	4b01      	ldr	r3, [pc, #4]	; (81370 <main_vendor_disable+0x8>)
   8136a:	2200      	movs	r2, #0
   8136c:	701a      	strb	r2, [r3, #0]
}
   8136e:	4770      	bx	lr
   81370:	2000057c 	.word	0x2000057c

00081374 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81374:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81376:	4b0f      	ldr	r3, [pc, #60]	; (813b4 <main_setup_out_received+0x40>)
   81378:	4a0f      	ldr	r2, [pc, #60]	; (813b8 <main_setup_out_received+0x44>)
   8137a:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8137c:	88da      	ldrh	r2, [r3, #6]
   8137e:	2a40      	cmp	r2, #64	; 0x40
   81380:	bf28      	it	cs
   81382:	2240      	movcs	r2, #64	; 0x40
   81384:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81386:	4b0d      	ldr	r3, [pc, #52]	; (813bc <main_setup_out_received+0x48>)
   81388:	781d      	ldrb	r5, [r3, #0]
   8138a:	b18d      	cbz	r5, 813b0 <main_setup_out_received+0x3c>
   8138c:	4b0c      	ldr	r3, [pc, #48]	; (813c0 <main_setup_out_received+0x4c>)
   8138e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   81392:	1e6a      	subs	r2, r5, #1
   81394:	b2d2      	uxtb	r2, r2
   81396:	1aad      	subs	r5, r5, r2
   81398:	3b04      	subs	r3, #4
   8139a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   8139e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813a2:	4798      	blx	r3
        if (handler_status == true) {
   813a4:	4603      	mov	r3, r0
   813a6:	b908      	cbnz	r0, 813ac <main_setup_out_received+0x38>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   813a8:	42ac      	cmp	r4, r5
   813aa:	d1f8      	bne.n	8139e <main_setup_out_received+0x2a>
        }
    }

    return false;

}
   813ac:	4618      	mov	r0, r3
   813ae:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   813b0:	2300      	movs	r3, #0
   813b2:	e7fb      	b.n	813ac <main_setup_out_received+0x38>
   813b4:	2000269c 	.word	0x2000269c
   813b8:	20002218 	.word	0x20002218
   813bc:	20001bf9 	.word	0x20001bf9
   813c0:	20001bfc 	.word	0x20001bfc

000813c4 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   813c4:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   813c6:	4b0b      	ldr	r3, [pc, #44]	; (813f4 <main_setup_in_received+0x30>)
   813c8:	781d      	ldrb	r5, [r3, #0]
   813ca:	b18d      	cbz	r5, 813f0 <main_setup_in_received+0x2c>
   813cc:	4b0a      	ldr	r3, [pc, #40]	; (813f8 <main_setup_in_received+0x34>)
   813ce:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   813d2:	1e6a      	subs	r2, r5, #1
   813d4:	b2d2      	uxtb	r2, r2
   813d6:	1aad      	subs	r5, r5, r2
   813d8:	3b04      	subs	r3, #4
   813da:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   813de:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   813e2:	4798      	blx	r3
        if (handler_status == true) {
   813e4:	4603      	mov	r3, r0
   813e6:	b908      	cbnz	r0, 813ec <main_setup_in_received+0x28>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   813e8:	42ac      	cmp	r4, r5
   813ea:	d1f8      	bne.n	813de <main_setup_in_received+0x1a>
        }
    }

    return false;

   813ec:	4618      	mov	r0, r3
   813ee:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   813f0:	2300      	movs	r3, #0
   813f2:	e7fb      	b.n	813ec <main_setup_in_received+0x28>
   813f4:	20001bf8 	.word	0x20001bf8
   813f8:	20001bb8 	.word	0x20001bb8

000813fc <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   813fc:	4b05      	ldr	r3, [pc, #20]	; (81414 <naeusb_setup_out_received+0x18>)
   813fe:	785b      	ldrb	r3, [r3, #1]
   81400:	2b22      	cmp	r3, #34	; 0x22
   81402:	d001      	beq.n	81408 <naeusb_setup_out_received+0xc>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
            return true;
            break;
    }
    return false;
   81404:	2000      	movs	r0, #0
}
   81406:	4770      	bx	lr
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81408:	4b02      	ldr	r3, [pc, #8]	; (81414 <naeusb_setup_out_received+0x18>)
   8140a:	4a03      	ldr	r2, [pc, #12]	; (81418 <naeusb_setup_out_received+0x1c>)
   8140c:	611a      	str	r2, [r3, #16]
            return true;
   8140e:	2001      	movs	r0, #1
   81410:	4770      	bx	lr
   81412:	bf00      	nop
   81414:	2000269c 	.word	0x2000269c
   81418:	0008141d 	.word	0x0008141d

0008141c <naeusb_sam_cfg_out>:
{
   8141c:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8141e:	4b22      	ldr	r3, [pc, #136]	; (814a8 <naeusb_sam_cfg_out+0x8c>)
   81420:	789b      	ldrb	r3, [r3, #2]
   81422:	3b01      	subs	r3, #1
   81424:	2b10      	cmp	r3, #16
   81426:	d814      	bhi.n	81452 <naeusb_sam_cfg_out+0x36>
   81428:	e8df f003 	tbb	[pc, r3]
   8142c:	13181409 	.word	0x13181409
   81430:	13131313 	.word	0x13131313
   81434:	13131313 	.word	0x13131313
   81438:	2c131313 	.word	0x2c131313
   8143c:	3b          	.byte	0x3b
   8143d:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8143e:	203e      	movs	r0, #62	; 0x3e
   81440:	4b1a      	ldr	r3, [pc, #104]	; (814ac <naeusb_sam_cfg_out+0x90>)
   81442:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81444:	4c1a      	ldr	r4, [pc, #104]	; (814b0 <naeusb_sam_cfg_out+0x94>)
   81446:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81448:	2800      	cmp	r0, #0
   8144a:	d0fc      	beq.n	81446 <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   8144c:	2010      	movs	r0, #16
   8144e:	4b19      	ldr	r3, [pc, #100]	; (814b4 <naeusb_sam_cfg_out+0x98>)
   81450:	4798      	blx	r3
}
   81452:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81454:	2010      	movs	r0, #16
   81456:	4b18      	ldr	r3, [pc, #96]	; (814b8 <naeusb_sam_cfg_out+0x9c>)
   81458:	4798      	blx	r3
        break;
   8145a:	e7fa      	b.n	81452 <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   8145c:	2201      	movs	r2, #1
   8145e:	210c      	movs	r1, #12
   81460:	4816      	ldr	r0, [pc, #88]	; (814bc <naeusb_sam_cfg_out+0xa0>)
   81462:	4b17      	ldr	r3, [pc, #92]	; (814c0 <naeusb_sam_cfg_out+0xa4>)
   81464:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81466:	4b17      	ldr	r3, [pc, #92]	; (814c4 <naeusb_sam_cfg_out+0xa8>)
   81468:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8146a:	4b17      	ldr	r3, [pc, #92]	; (814c8 <naeusb_sam_cfg_out+0xac>)
   8146c:	685a      	ldr	r2, [r3, #4]
   8146e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81472:	d1fb      	bne.n	8146c <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81474:	4a14      	ldr	r2, [pc, #80]	; (814c8 <naeusb_sam_cfg_out+0xac>)
   81476:	6813      	ldr	r3, [r2, #0]
   81478:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8147c:	f043 0305 	orr.w	r3, r3, #5
   81480:	6013      	str	r3, [r2, #0]
        while(1);
   81482:	e7fe      	b.n	81482 <naeusb_sam_cfg_out+0x66>
   81484:	4b0f      	ldr	r3, [pc, #60]	; (814c4 <naeusb_sam_cfg_out+0xa8>)
   81486:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81488:	4b0f      	ldr	r3, [pc, #60]	; (814c8 <naeusb_sam_cfg_out+0xac>)
   8148a:	685a      	ldr	r2, [r3, #4]
   8148c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81490:	d1fb      	bne.n	8148a <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81492:	4a0d      	ldr	r2, [pc, #52]	; (814c8 <naeusb_sam_cfg_out+0xac>)
   81494:	6813      	ldr	r3, [r2, #0]
   81496:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8149a:	f043 0305 	orr.w	r3, r3, #5
   8149e:	6013      	str	r3, [r2, #0]
        while(1);
   814a0:	e7fe      	b.n	814a0 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   814a2:	4b0a      	ldr	r3, [pc, #40]	; (814cc <naeusb_sam_cfg_out+0xb0>)
   814a4:	4798      	blx	r3
}
   814a6:	e7d4      	b.n	81452 <naeusb_sam_cfg_out+0x36>
   814a8:	2000269c 	.word	0x2000269c
   814ac:	00083e49 	.word	0x00083e49
   814b0:	00083e71 	.word	0x00083e71
   814b4:	00083d89 	.word	0x00083d89
   814b8:	00083de9 	.word	0x00083de9
   814bc:	400e0800 	.word	0x400e0800
   814c0:	00082dc1 	.word	0x00082dc1
   814c4:	00084c79 	.word	0x00084c79
   814c8:	400e1200 	.word	0x400e1200
   814cc:	00081ff5 	.word	0x00081ff5

000814d0 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   814d0:	4b05      	ldr	r3, [pc, #20]	; (814e8 <naeusb_fw_version_in+0x18>)
   814d2:	2200      	movs	r2, #0
   814d4:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   814d6:	2132      	movs	r1, #50	; 0x32
   814d8:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   814da:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   814dc:	4a03      	ldr	r2, [pc, #12]	; (814ec <naeusb_fw_version_in+0x1c>)
   814de:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   814e0:	2303      	movs	r3, #3
   814e2:	8193      	strh	r3, [r2, #12]
}
   814e4:	2001      	movs	r0, #1
   814e6:	4770      	bx	lr
   814e8:	200021d8 	.word	0x200021d8
   814ec:	2000269c 	.word	0x2000269c

000814f0 <naeusb_build_date_in>:
{
   814f0:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   814f2:	4c0a      	ldr	r4, [pc, #40]	; (8151c <naeusb_build_date_in+0x2c>)
   814f4:	2240      	movs	r2, #64	; 0x40
   814f6:	490a      	ldr	r1, [pc, #40]	; (81520 <naeusb_build_date_in+0x30>)
   814f8:	4620      	mov	r0, r4
   814fa:	4d0a      	ldr	r5, [pc, #40]	; (81524 <naeusb_build_date_in+0x34>)
   814fc:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   814fe:	2320      	movs	r3, #32
   81500:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81502:	2237      	movs	r2, #55	; 0x37
   81504:	4908      	ldr	r1, [pc, #32]	; (81528 <naeusb_build_date_in+0x38>)
   81506:	f104 0009 	add.w	r0, r4, #9
   8150a:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   8150c:	4d07      	ldr	r5, [pc, #28]	; (8152c <naeusb_build_date_in+0x3c>)
   8150e:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81510:	4620      	mov	r0, r4
   81512:	4b07      	ldr	r3, [pc, #28]	; (81530 <naeusb_build_date_in+0x40>)
   81514:	4798      	blx	r3
   81516:	81a8      	strh	r0, [r5, #12]
}
   81518:	2001      	movs	r0, #1
   8151a:	bd38      	pop	{r3, r4, r5, pc}
   8151c:	200021d8 	.word	0x200021d8
   81520:	0008ca7c 	.word	0x0008ca7c
   81524:	000862dd 	.word	0x000862dd
   81528:	0008ca70 	.word	0x0008ca70
   8152c:	2000269c 	.word	0x2000269c
   81530:	00086281 	.word	0x00086281

00081534 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   81534:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81536:	4b07      	ldr	r3, [pc, #28]	; (81554 <naeusb_setup_in_received+0x20>)
   81538:	785b      	ldrb	r3, [r3, #1]
   8153a:	2b17      	cmp	r3, #23
   8153c:	d003      	beq.n	81546 <naeusb_setup_in_received+0x12>
   8153e:	2b40      	cmp	r3, #64	; 0x40
   81540:	d004      	beq.n	8154c <naeusb_setup_in_received+0x18>
   81542:	2000      	movs	r0, #0
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
}
   81544:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   81546:	4b04      	ldr	r3, [pc, #16]	; (81558 <naeusb_setup_in_received+0x24>)
   81548:	4798      	blx	r3
   8154a:	e7fb      	b.n	81544 <naeusb_setup_in_received+0x10>
            return naeusb_build_date_in();
   8154c:	4b03      	ldr	r3, [pc, #12]	; (8155c <naeusb_setup_in_received+0x28>)
   8154e:	4798      	blx	r3
   81550:	e7f8      	b.n	81544 <naeusb_setup_in_received+0x10>
   81552:	bf00      	nop
   81554:	2000269c 	.word	0x2000269c
   81558:	000814d1 	.word	0x000814d1
   8155c:	000814f1 	.word	0x000814f1

00081560 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81560:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81562:	4803      	ldr	r0, [pc, #12]	; (81570 <naeusb_register_handlers+0x10>)
   81564:	4b03      	ldr	r3, [pc, #12]	; (81574 <naeusb_register_handlers+0x14>)
   81566:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81568:	4803      	ldr	r0, [pc, #12]	; (81578 <naeusb_register_handlers+0x18>)
   8156a:	4b04      	ldr	r3, [pc, #16]	; (8157c <naeusb_register_handlers+0x1c>)
   8156c:	4798      	blx	r3
   8156e:	bd08      	pop	{r3, pc}
   81570:	00081535 	.word	0x00081535
   81574:	000812c1 	.word	0x000812c1
   81578:	000813fd 	.word	0x000813fd
   8157c:	000812e5 	.word	0x000812e5

00081580 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81580:	b508      	push	{r3, lr}

    switch(udd_g_ctrlreq.req.wValue){
   81582:	4b0b      	ldr	r3, [pc, #44]	; (815b0 <openadc_progfpga_bulk+0x30>)
   81584:	885b      	ldrh	r3, [r3, #2]
   81586:	2ba1      	cmp	r3, #161	; 0xa1
   81588:	d007      	beq.n	8159a <openadc_progfpga_bulk+0x1a>
   8158a:	2ba2      	cmp	r3, #162	; 0xa2
   8158c:	d00b      	beq.n	815a6 <openadc_progfpga_bulk+0x26>
   8158e:	2ba0      	cmp	r3, #160	; 0xa0
   81590:	d000      	beq.n	81594 <openadc_progfpga_bulk+0x14>
        break;

    default:
        break;
    }
}
   81592:	bd08      	pop	{r3, pc}
        fpga_program_setup1();
   81594:	4b07      	ldr	r3, [pc, #28]	; (815b4 <openadc_progfpga_bulk+0x34>)
   81596:	4798      	blx	r3
        break;
   81598:	e7fb      	b.n	81592 <openadc_progfpga_bulk+0x12>
        fpga_program_setup2();
   8159a:	4b07      	ldr	r3, [pc, #28]	; (815b8 <openadc_progfpga_bulk+0x38>)
   8159c:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   8159e:	4b07      	ldr	r3, [pc, #28]	; (815bc <openadc_progfpga_bulk+0x3c>)
   815a0:	220a      	movs	r2, #10
   815a2:	701a      	strb	r2, [r3, #0]
        break;
   815a4:	e7f5      	b.n	81592 <openadc_progfpga_bulk+0x12>
        blockendpoint_usage = bep_emem;
   815a6:	4b05      	ldr	r3, [pc, #20]	; (815bc <openadc_progfpga_bulk+0x3c>)
   815a8:	2200      	movs	r2, #0
   815aa:	701a      	strb	r2, [r3, #0]
}
   815ac:	e7f1      	b.n	81592 <openadc_progfpga_bulk+0x12>
   815ae:	bf00      	nop
   815b0:	2000269c 	.word	0x2000269c
   815b4:	000807fd 	.word	0x000807fd
   815b8:	00080885 	.word	0x00080885
   815bc:	20001c3c 	.word	0x20001c3c

000815c0 <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   815c0:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   815c2:	4b20      	ldr	r3, [pc, #128]	; (81644 <openadc_setup_out_received+0x84>)
   815c4:	2200      	movs	r2, #0
   815c6:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   815c8:	4b1f      	ldr	r3, [pc, #124]	; (81648 <openadc_setup_out_received+0x88>)
   815ca:	785b      	ldrb	r3, [r3, #1]
   815cc:	3b10      	subs	r3, #16
   815ce:	2b06      	cmp	r3, #6
   815d0:	d836      	bhi.n	81640 <openadc_setup_out_received+0x80>
   815d2:	e8df f003 	tbb	[pc, r3]
   815d6:	1a04      	.short	0x1a04
   815d8:	3535250f 	.word	0x3535250f
   815dc:	30          	.byte	0x30
   815dd:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   815de:	2006      	movs	r0, #6
   815e0:	4b1a      	ldr	r3, [pc, #104]	; (8164c <openadc_setup_out_received+0x8c>)
   815e2:	4798      	blx	r3
   815e4:	b908      	cbnz	r0, 815ea <openadc_setup_out_received+0x2a>

    default:
        return false;
    }

    return false;
   815e6:	2000      	movs	r0, #0
   815e8:	e029      	b.n	8163e <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   815ea:	4b17      	ldr	r3, [pc, #92]	; (81648 <openadc_setup_out_received+0x88>)
   815ec:	4a18      	ldr	r2, [pc, #96]	; (81650 <openadc_setup_out_received+0x90>)
   815ee:	611a      	str	r2, [r3, #16]
            return true;
   815f0:	2001      	movs	r0, #1
   815f2:	e024      	b.n	8163e <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   815f4:	2006      	movs	r0, #6
   815f6:	4b15      	ldr	r3, [pc, #84]	; (8164c <openadc_setup_out_received+0x8c>)
   815f8:	4798      	blx	r3
   815fa:	b908      	cbnz	r0, 81600 <openadc_setup_out_received+0x40>
    return false;
   815fc:	2000      	movs	r0, #0
   815fe:	e01e      	b.n	8163e <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   81600:	4b11      	ldr	r3, [pc, #68]	; (81648 <openadc_setup_out_received+0x88>)
   81602:	4a14      	ldr	r2, [pc, #80]	; (81654 <openadc_setup_out_received+0x94>)
   81604:	611a      	str	r2, [r3, #16]
            return true;
   81606:	2001      	movs	r0, #1
   81608:	e019      	b.n	8163e <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   8160a:	2006      	movs	r0, #6
   8160c:	4b0f      	ldr	r3, [pc, #60]	; (8164c <openadc_setup_out_received+0x8c>)
   8160e:	4798      	blx	r3
   81610:	b908      	cbnz	r0, 81616 <openadc_setup_out_received+0x56>
    return false;
   81612:	2000      	movs	r0, #0
   81614:	e013      	b.n	8163e <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   81616:	4b0c      	ldr	r3, [pc, #48]	; (81648 <openadc_setup_out_received+0x88>)
   81618:	4a0f      	ldr	r2, [pc, #60]	; (81658 <openadc_setup_out_received+0x98>)
   8161a:	611a      	str	r2, [r3, #16]
            return true;
   8161c:	2001      	movs	r0, #1
   8161e:	e00e      	b.n	8163e <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   81620:	2006      	movs	r0, #6
   81622:	4b0a      	ldr	r3, [pc, #40]	; (8164c <openadc_setup_out_received+0x8c>)
   81624:	4798      	blx	r3
   81626:	b908      	cbnz	r0, 8162c <openadc_setup_out_received+0x6c>
    return false;
   81628:	2000      	movs	r0, #0
   8162a:	e008      	b.n	8163e <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   8162c:	4b06      	ldr	r3, [pc, #24]	; (81648 <openadc_setup_out_received+0x88>)
   8162e:	4a0b      	ldr	r2, [pc, #44]	; (8165c <openadc_setup_out_received+0x9c>)
   81630:	611a      	str	r2, [r3, #16]
            return true;
   81632:	2001      	movs	r0, #1
   81634:	e003      	b.n	8163e <openadc_setup_out_received+0x7e>
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   81636:	4b04      	ldr	r3, [pc, #16]	; (81648 <openadc_setup_out_received+0x88>)
   81638:	4a09      	ldr	r2, [pc, #36]	; (81660 <openadc_setup_out_received+0xa0>)
   8163a:	611a      	str	r2, [r3, #16]
        return true;
   8163c:	2001      	movs	r0, #1
}
   8163e:	bd08      	pop	{r3, pc}
    switch(udd_g_ctrlreq.req.bRequest){
   81640:	2000      	movs	r0, #0
   81642:	e7fc      	b.n	8163e <openadc_setup_out_received+0x7e>
   81644:	20001c3c 	.word	0x20001c3c
   81648:	2000269c 	.word	0x2000269c
   8164c:	00081fc9 	.word	0x00081fc9
   81650:	0008172d 	.word	0x0008172d
   81654:	00081695 	.word	0x00081695
   81658:	00081665 	.word	0x00081665
   8165c:	000816d9 	.word	0x000816d9
   81660:	00081581 	.word	0x00081581

00081664 <openadc_writemem_bulk>:
{
   81664:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81666:	4b07      	ldr	r3, [pc, #28]	; (81684 <openadc_writemem_bulk+0x20>)
   81668:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   8166a:	4b07      	ldr	r3, [pc, #28]	; (81688 <openadc_writemem_bulk+0x24>)
   8166c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   8166e:	2504      	movs	r5, #4
   81670:	4c06      	ldr	r4, [pc, #24]	; (8168c <openadc_writemem_bulk+0x28>)
   81672:	4628      	mov	r0, r5
   81674:	47a0      	blx	r4
   81676:	2800      	cmp	r0, #0
   81678:	d0fb      	beq.n	81672 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   8167a:	4630      	mov	r0, r6
   8167c:	4b04      	ldr	r3, [pc, #16]	; (81690 <openadc_writemem_bulk+0x2c>)
   8167e:	4798      	blx	r3
}
   81680:	bd70      	pop	{r4, r5, r6, pc}
   81682:	bf00      	nop
   81684:	20002218 	.word	0x20002218
   81688:	00081ff5 	.word	0x00081ff5
   8168c:	00081fc9 	.word	0x00081fc9
   81690:	0008200d 	.word	0x0008200d

00081694 <openadc_readmem_ctrl>:
{
   81694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81696:	4b0a      	ldr	r3, [pc, #40]	; (816c0 <openadc_readmem_ctrl+0x2c>)
   81698:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8169a:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   8169c:	4b09      	ldr	r3, [pc, #36]	; (816c4 <openadc_readmem_ctrl+0x30>)
   8169e:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   816a0:	2505      	movs	r5, #5
   816a2:	4c09      	ldr	r4, [pc, #36]	; (816c8 <openadc_readmem_ctrl+0x34>)
   816a4:	4628      	mov	r0, r5
   816a6:	47a0      	blx	r4
   816a8:	2800      	cmp	r0, #0
   816aa:	d0fb      	beq.n	816a4 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   816ac:	4638      	mov	r0, r7
   816ae:	4b07      	ldr	r3, [pc, #28]	; (816cc <openadc_readmem_ctrl+0x38>)
   816b0:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   816b2:	4b07      	ldr	r3, [pc, #28]	; (816d0 <openadc_readmem_ctrl+0x3c>)
   816b4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   816b8:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   816ba:	4b06      	ldr	r3, [pc, #24]	; (816d4 <openadc_readmem_ctrl+0x40>)
   816bc:	601e      	str	r6, [r3, #0]
}
   816be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816c0:	20002218 	.word	0x20002218
   816c4:	00081ff5 	.word	0x00081ff5
   816c8:	00081fc9 	.word	0x00081fc9
   816cc:	0008200d 	.word	0x0008200d
   816d0:	20001c40 	.word	0x20001c40
   816d4:	20001c44 	.word	0x20001c44

000816d8 <openadc_writemem_ctrl>:
{
   816d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   816da:	4b0e      	ldr	r3, [pc, #56]	; (81714 <openadc_writemem_ctrl+0x3c>)
   816dc:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816de:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   816e0:	4b0d      	ldr	r3, [pc, #52]	; (81718 <openadc_writemem_ctrl+0x40>)
   816e2:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   816e4:	2601      	movs	r6, #1
   816e6:	4d0d      	ldr	r5, [pc, #52]	; (8171c <openadc_writemem_ctrl+0x44>)
   816e8:	4630      	mov	r0, r6
   816ea:	47a8      	blx	r5
   816ec:	2800      	cmp	r0, #0
   816ee:	d0fb      	beq.n	816e8 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   816f0:	4638      	mov	r0, r7
   816f2:	4b0b      	ldr	r3, [pc, #44]	; (81720 <openadc_writemem_ctrl+0x48>)
   816f4:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   816f6:	b14c      	cbz	r4, 8170c <openadc_writemem_ctrl+0x34>
   816f8:	4a0a      	ldr	r2, [pc, #40]	; (81724 <openadc_writemem_ctrl+0x4c>)
   816fa:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   816fc:	4d0a      	ldr	r5, [pc, #40]	; (81728 <openadc_writemem_ctrl+0x50>)
   816fe:	6829      	ldr	r1, [r5, #0]
   81700:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   81704:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   81706:	3301      	adds	r3, #1
   81708:	429c      	cmp	r4, r3
   8170a:	d1f8      	bne.n	816fe <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   8170c:	4b02      	ldr	r3, [pc, #8]	; (81718 <openadc_writemem_ctrl+0x40>)
   8170e:	4798      	blx	r3
}
   81710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81712:	bf00      	nop
   81714:	20002218 	.word	0x20002218
   81718:	00081ff5 	.word	0x00081ff5
   8171c:	00081fc9 	.word	0x00081fc9
   81720:	0008200d 	.word	0x0008200d
   81724:	2000221f 	.word	0x2000221f
   81728:	20000820 	.word	0x20000820

0008172c <openadc_readmem_bulk>:
{
   8172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8172e:	4b0a      	ldr	r3, [pc, #40]	; (81758 <openadc_readmem_bulk+0x2c>)
   81730:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81732:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81734:	4b09      	ldr	r3, [pc, #36]	; (8175c <openadc_readmem_bulk+0x30>)
   81736:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   81738:	2502      	movs	r5, #2
   8173a:	4c09      	ldr	r4, [pc, #36]	; (81760 <openadc_readmem_bulk+0x34>)
   8173c:	4628      	mov	r0, r5
   8173e:	47a0      	blx	r4
   81740:	2800      	cmp	r0, #0
   81742:	d0fb      	beq.n	8173c <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   81744:	4638      	mov	r0, r7
   81746:	4b07      	ldr	r3, [pc, #28]	; (81764 <openadc_readmem_bulk+0x38>)
   81748:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   8174a:	4a07      	ldr	r2, [pc, #28]	; (81768 <openadc_readmem_bulk+0x3c>)
   8174c:	4631      	mov	r1, r6
   8174e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   81752:	4b06      	ldr	r3, [pc, #24]	; (8176c <openadc_readmem_bulk+0x40>)
   81754:	4798      	blx	r3
}
   81756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81758:	20002218 	.word	0x20002218
   8175c:	00081ff5 	.word	0x00081ff5
   81760:	00081fc9 	.word	0x00081fc9
   81764:	0008200d 	.word	0x0008200d
   81768:	00081771 	.word	0x00081771
   8176c:	0008305d 	.word	0x0008305d

00081770 <main_vendor_bulk_in_received>:
{
   81770:	b510      	push	{r4, lr}
   81772:	4604      	mov	r4, r0
    FPGA_releaselock();
   81774:	4b05      	ldr	r3, [pc, #20]	; (8178c <main_vendor_bulk_in_received+0x1c>)
   81776:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81778:	b104      	cbz	r4, 8177c <main_vendor_bulk_in_received+0xc>
}
   8177a:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   8177c:	4b04      	ldr	r3, [pc, #16]	; (81790 <main_vendor_bulk_in_received+0x20>)
   8177e:	4798      	blx	r3
   81780:	2802      	cmp	r0, #2
   81782:	d1fa      	bne.n	8177a <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   81784:	2000      	movs	r0, #0
   81786:	4b03      	ldr	r3, [pc, #12]	; (81794 <main_vendor_bulk_in_received+0x24>)
   81788:	4798      	blx	r3
   8178a:	e7f6      	b.n	8177a <main_vendor_bulk_in_received+0xa>
   8178c:	00081ff5 	.word	0x00081ff5
   81790:	00082001 	.word	0x00082001
   81794:	00081fc9 	.word	0x00081fc9

00081798 <main_vendor_bulk_out_received>:
{
   81798:	b570      	push	{r4, r5, r6, lr}
   8179a:	4605      	mov	r5, r0
   8179c:	460c      	mov	r4, r1
    FPGA_releaselock();
   8179e:	4b19      	ldr	r3, [pc, #100]	; (81804 <main_vendor_bulk_out_received+0x6c>)
   817a0:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   817a2:	b9bd      	cbnz	r5, 817d4 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   817a4:	4b18      	ldr	r3, [pc, #96]	; (81808 <main_vendor_bulk_out_received+0x70>)
   817a6:	781b      	ldrb	r3, [r3, #0]
   817a8:	b9f3      	cbnz	r3, 817e8 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   817aa:	b144      	cbz	r4, 817be <main_vendor_bulk_out_received+0x26>
   817ac:	4a17      	ldr	r2, [pc, #92]	; (8180c <main_vendor_bulk_out_received+0x74>)
            xram[i] = main_buf_loopback[i];
   817ae:	4d18      	ldr	r5, [pc, #96]	; (81810 <main_vendor_bulk_out_received+0x78>)
   817b0:	6829      	ldr	r1, [r5, #0]
   817b2:	f812 0b01 	ldrb.w	r0, [r2], #1
   817b6:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   817b8:	3301      	adds	r3, #1
   817ba:	429c      	cmp	r4, r3
   817bc:	d1f8      	bne.n	817b0 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   817be:	4b15      	ldr	r3, [pc, #84]	; (81814 <main_vendor_bulk_out_received+0x7c>)
   817c0:	4798      	blx	r3
   817c2:	2804      	cmp	r0, #4
   817c4:	d00d      	beq.n	817e2 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   817c6:	4a14      	ldr	r2, [pc, #80]	; (81818 <main_vendor_bulk_out_received+0x80>)
   817c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817cc:	480f      	ldr	r0, [pc, #60]	; (8180c <main_vendor_bulk_out_received+0x74>)
   817ce:	4b13      	ldr	r3, [pc, #76]	; (8181c <main_vendor_bulk_out_received+0x84>)
   817d0:	4798      	blx	r3
}
   817d2:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   817d4:	4a10      	ldr	r2, [pc, #64]	; (81818 <main_vendor_bulk_out_received+0x80>)
   817d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817da:	480c      	ldr	r0, [pc, #48]	; (8180c <main_vendor_bulk_out_received+0x74>)
   817dc:	4b0f      	ldr	r3, [pc, #60]	; (8181c <main_vendor_bulk_out_received+0x84>)
   817de:	4798      	blx	r3
        return;
   817e0:	e7f7      	b.n	817d2 <main_vendor_bulk_out_received+0x3a>
            FPGA_releaselock();
   817e2:	4b08      	ldr	r3, [pc, #32]	; (81804 <main_vendor_bulk_out_received+0x6c>)
   817e4:	4798      	blx	r3
   817e6:	e7ee      	b.n	817c6 <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   817e8:	2b0a      	cmp	r3, #10
   817ea:	d1ec      	bne.n	817c6 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   817ec:	2c00      	cmp	r4, #0
   817ee:	d0ea      	beq.n	817c6 <main_vendor_bulk_out_received+0x2e>
   817f0:	4d06      	ldr	r5, [pc, #24]	; (8180c <main_vendor_bulk_out_received+0x74>)
   817f2:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   817f4:	4e0a      	ldr	r6, [pc, #40]	; (81820 <main_vendor_bulk_out_received+0x88>)
   817f6:	f815 0b01 	ldrb.w	r0, [r5], #1
   817fa:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   817fc:	42a5      	cmp	r5, r4
   817fe:	d1fa      	bne.n	817f6 <main_vendor_bulk_out_received+0x5e>
   81800:	e7e1      	b.n	817c6 <main_vendor_bulk_out_received+0x2e>
   81802:	bf00      	nop
   81804:	00081ff5 	.word	0x00081ff5
   81808:	20001c3c 	.word	0x20001c3c
   8180c:	20002258 	.word	0x20002258
   81810:	20000820 	.word	0x20000820
   81814:	00082001 	.word	0x00082001
   81818:	00081799 	.word	0x00081799
   8181c:	00083079 	.word	0x00083079
   81820:	00080895 	.word	0x00080895

00081824 <openadc_setup_in_received>:
{
   81824:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81826:	4b13      	ldr	r3, [pc, #76]	; (81874 <openadc_setup_in_received+0x50>)
   81828:	785b      	ldrb	r3, [r3, #1]
   8182a:	2b12      	cmp	r3, #18
   8182c:	d003      	beq.n	81836 <openadc_setup_in_received+0x12>
   8182e:	2b15      	cmp	r3, #21
   81830:	d00e      	beq.n	81850 <openadc_setup_in_received+0x2c>
   81832:	2000      	movs	r0, #0
}
   81834:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81836:	4a0f      	ldr	r2, [pc, #60]	; (81874 <openadc_setup_in_received+0x50>)
   81838:	4b0f      	ldr	r3, [pc, #60]	; (81878 <openadc_setup_in_received+0x54>)
   8183a:	681b      	ldr	r3, [r3, #0]
   8183c:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8183e:	4b0f      	ldr	r3, [pc, #60]	; (8187c <openadc_setup_in_received+0x58>)
   81840:	6819      	ldr	r1, [r3, #0]
   81842:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   81844:	2200      	movs	r2, #0
   81846:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   81848:	4b0d      	ldr	r3, [pc, #52]	; (81880 <openadc_setup_in_received+0x5c>)
   8184a:	4798      	blx	r3
        return true;
   8184c:	2001      	movs	r0, #1
   8184e:	e7f1      	b.n	81834 <openadc_setup_in_received+0x10>
        respbuf[0] = FPGA_ISDONE();
   81850:	200a      	movs	r0, #10
   81852:	4b0c      	ldr	r3, [pc, #48]	; (81884 <openadc_setup_in_received+0x60>)
   81854:	4798      	blx	r3
   81856:	4b0c      	ldr	r3, [pc, #48]	; (81888 <openadc_setup_in_received+0x64>)
   81858:	3800      	subs	r0, #0
   8185a:	bf18      	it	ne
   8185c:	2001      	movne	r0, #1
   8185e:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   81860:	2200      	movs	r2, #0
   81862:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81864:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81866:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81868:	4a02      	ldr	r2, [pc, #8]	; (81874 <openadc_setup_in_received+0x50>)
   8186a:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   8186c:	2304      	movs	r3, #4
   8186e:	8193      	strh	r3, [r2, #12]
        return true;
   81870:	2001      	movs	r0, #1
   81872:	e7df      	b.n	81834 <openadc_setup_in_received+0x10>
   81874:	2000269c 	.word	0x2000269c
   81878:	20001c40 	.word	0x20001c40
   8187c:	20001c44 	.word	0x20001c44
   81880:	00081ff5 	.word	0x00081ff5
   81884:	00083b55 	.word	0x00083b55
   81888:	200021d8 	.word	0x200021d8

0008188c <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   8188c:	b508      	push	{r3, lr}
    FPGA_releaselock();
   8188e:	4b04      	ldr	r3, [pc, #16]	; (818a0 <openadc_register_handlers+0x14>)
   81890:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81892:	4804      	ldr	r0, [pc, #16]	; (818a4 <openadc_register_handlers+0x18>)
   81894:	4b04      	ldr	r3, [pc, #16]	; (818a8 <openadc_register_handlers+0x1c>)
   81896:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81898:	4804      	ldr	r0, [pc, #16]	; (818ac <openadc_register_handlers+0x20>)
   8189a:	4b05      	ldr	r3, [pc, #20]	; (818b0 <openadc_register_handlers+0x24>)
   8189c:	4798      	blx	r3
}
   8189e:	bd08      	pop	{r3, pc}
   818a0:	00081ff5 	.word	0x00081ff5
   818a4:	00081825 	.word	0x00081825
   818a8:	000812c1 	.word	0x000812c1
   818ac:	000815c1 	.word	0x000815c1
   818b0:	000812e5 	.word	0x000812e5

000818b4 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   818b4:	4b16      	ldr	r3, [pc, #88]	; (81910 <usart_setup_out_received+0x5c>)
   818b6:	785b      	ldrb	r3, [r3, #1]
   818b8:	3b1a      	subs	r3, #26
   818ba:	2b17      	cmp	r3, #23
   818bc:	d826      	bhi.n	8190c <usart_setup_out_received+0x58>
   818be:	e8df f003 	tbb	[pc, r3]
   818c2:	0c11      	.short	0x0c11
   818c4:	25252525 	.word	0x25252525
   818c8:	25251b16 	.word	0x25251b16
   818cc:	25252525 	.word	0x25252525
   818d0:	25252525 	.word	0x25252525
   818d4:	25252525 	.word	0x25252525
   818d8:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   818da:	4b0d      	ldr	r3, [pc, #52]	; (81910 <usart_setup_out_received+0x5c>)
   818dc:	4a0d      	ldr	r2, [pc, #52]	; (81914 <usart_setup_out_received+0x60>)
   818de:	611a      	str	r2, [r3, #16]
        return true;
   818e0:	2001      	movs	r0, #1
   818e2:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   818e4:	4b0a      	ldr	r3, [pc, #40]	; (81910 <usart_setup_out_received+0x5c>)
   818e6:	4a0c      	ldr	r2, [pc, #48]	; (81918 <usart_setup_out_received+0x64>)
   818e8:	611a      	str	r2, [r3, #16]
        return true;
   818ea:	2001      	movs	r0, #1
   818ec:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   818ee:	4b08      	ldr	r3, [pc, #32]	; (81910 <usart_setup_out_received+0x5c>)
   818f0:	4a0a      	ldr	r2, [pc, #40]	; (8191c <usart_setup_out_received+0x68>)
   818f2:	611a      	str	r2, [r3, #16]
        return true;
   818f4:	2001      	movs	r0, #1
   818f6:	4770      	bx	lr

		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   818f8:	4b05      	ldr	r3, [pc, #20]	; (81910 <usart_setup_out_received+0x5c>)
   818fa:	4a09      	ldr	r2, [pc, #36]	; (81920 <usart_setup_out_received+0x6c>)
   818fc:	611a      	str	r2, [r3, #16]
        return true;
   818fe:	2001      	movs	r0, #1
   81900:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81902:	4b03      	ldr	r3, [pc, #12]	; (81910 <usart_setup_out_received+0x5c>)
   81904:	4a07      	ldr	r2, [pc, #28]	; (81924 <usart_setup_out_received+0x70>)
   81906:	611a      	str	r2, [r3, #16]
        return true;
   81908:	2001      	movs	r0, #1
   8190a:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest) {
   8190c:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   8190e:	4770      	bx	lr
   81910:	2000269c 	.word	0x2000269c
   81914:	00081cad 	.word	0x00081cad
   81918:	00081cf9 	.word	0x00081cf9
   8191c:	00081929 	.word	0x00081929
   81920:	00081935 	.word	0x00081935
   81924:	00081cb9 	.word	0x00081cb9

00081928 <ctrl_xmega_program_void>:
{
   81928:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   8192a:	4b01      	ldr	r3, [pc, #4]	; (81930 <ctrl_xmega_program_void+0x8>)
   8192c:	4798      	blx	r3
}
   8192e:	bd08      	pop	{r3, pc}
   81930:	000826e9 	.word	0x000826e9

00081934 <ctrl_avr_program_void>:
{
   81934:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   81936:	4b01      	ldr	r3, [pc, #4]	; (8193c <ctrl_avr_program_void+0x8>)
   81938:	4798      	blx	r3
}
   8193a:	bd08      	pop	{r3, pc}
   8193c:	00082035 	.word	0x00082035

00081940 <usart0_enableIO>:
{
   81940:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81942:	200d      	movs	r0, #13
   81944:	4b0a      	ldr	r3, [pc, #40]	; (81970 <usart0_enableIO+0x30>)
   81946:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81948:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8194c:	2013      	movs	r0, #19
   8194e:	4c09      	ldr	r4, [pc, #36]	; (81974 <usart0_enableIO+0x34>)
   81950:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81952:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81956:	2012      	movs	r0, #18
   81958:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8195a:	4b07      	ldr	r3, [pc, #28]	; (81978 <usart0_enableIO+0x38>)
   8195c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81960:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81964:	2150      	movs	r1, #80	; 0x50
   81966:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8196a:	601a      	str	r2, [r3, #0]
}
   8196c:	bd10      	pop	{r4, pc}
   8196e:	bf00      	nop
   81970:	00083ee1 	.word	0x00083ee1
   81974:	00083ba5 	.word	0x00083ba5
   81978:	e000e100 	.word	0xe000e100

0008197c <usart_enableIO>:
{
   8197c:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   8197e:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81982:	b103      	cbz	r3, 81986 <usart_enableIO+0xa>
}
   81984:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   81986:	4b01      	ldr	r3, [pc, #4]	; (8198c <usart_enableIO+0x10>)
   81988:	4798      	blx	r3
}
   8198a:	e7fb      	b.n	81984 <usart_enableIO+0x8>
   8198c:	00081941 	.word	0x00081941

00081990 <generic_isr>:
{
   81990:	b570      	push	{r4, r5, r6, lr}
   81992:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81994:	6800      	ldr	r0, [r0, #0]
   81996:	4b19      	ldr	r3, [pc, #100]	; (819fc <generic_isr+0x6c>)
   81998:	4798      	blx	r3
   8199a:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   8199c:	f010 0f01 	tst.w	r0, #1
   819a0:	d103      	bne.n	819aa <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   819a2:	f015 0f02 	tst.w	r5, #2
   819a6:	d115      	bne.n	819d4 <generic_isr+0x44>
}
   819a8:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   819aa:	4620      	mov	r0, r4
   819ac:	f850 3b1c 	ldr.w	r3, [r0], #28
   819b0:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   819b2:	b2f6      	uxtb	r6, r6
   819b4:	2200      	movs	r2, #0
   819b6:	4631      	mov	r1, r6
   819b8:	4b11      	ldr	r3, [pc, #68]	; (81a00 <generic_isr+0x70>)
   819ba:	4798      	blx	r3
        if (driver->cdc_enabled)
   819bc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   819c0:	f013 0f04 	tst.w	r3, #4
   819c4:	d0ed      	beq.n	819a2 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   819c6:	2200      	movs	r2, #0
   819c8:	4631      	mov	r1, r6
   819ca:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   819ce:	4b0c      	ldr	r3, [pc, #48]	; (81a00 <generic_isr+0x70>)
   819d0:	4798      	blx	r3
   819d2:	e7e6      	b.n	819a2 <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   819d4:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   819d8:	4628      	mov	r0, r5
   819da:	4b0a      	ldr	r3, [pc, #40]	; (81a04 <generic_isr+0x74>)
   819dc:	4798      	blx	r3
   819de:	b140      	cbz	r0, 819f2 <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   819e0:	6824      	ldr	r4, [r4, #0]
   819e2:	4628      	mov	r0, r5
   819e4:	4b08      	ldr	r3, [pc, #32]	; (81a08 <generic_isr+0x78>)
   819e6:	4798      	blx	r3
   819e8:	4601      	mov	r1, r0
   819ea:	4620      	mov	r0, r4
   819ec:	4b07      	ldr	r3, [pc, #28]	; (81a0c <generic_isr+0x7c>)
   819ee:	4798      	blx	r3
   819f0:	e7da      	b.n	819a8 <generic_isr+0x18>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   819f2:	2102      	movs	r1, #2
   819f4:	6820      	ldr	r0, [r4, #0]
   819f6:	4b06      	ldr	r3, [pc, #24]	; (81a10 <generic_isr+0x80>)
   819f8:	4798      	blx	r3
}
   819fa:	e7d5      	b.n	819a8 <generic_isr+0x18>
   819fc:	000855c5 	.word	0x000855c5
   81a00:	0008079b 	.word	0x0008079b
   81a04:	000807e3 	.word	0x000807e3
   81a08:	000807c5 	.word	0x000807c5
   81a0c:	000855e5 	.word	0x000855e5
   81a10:	000855bd 	.word	0x000855bd

00081a14 <USART0_Handler>:
{
   81a14:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   81a16:	4802      	ldr	r0, [pc, #8]	; (81a20 <USART0_Handler+0xc>)
   81a18:	4b02      	ldr	r3, [pc, #8]	; (81a24 <USART0_Handler+0x10>)
   81a1a:	4798      	blx	r3
}
   81a1c:	bd08      	pop	{r3, pc}
   81a1e:	bf00      	nop
   81a20:	20000580 	.word	0x20000580
   81a24:	00081991 	.word	0x00081991

00081a28 <configure_usart>:
{
   81a28:	b538      	push	{r3, r4, r5, lr}
   81a2a:	4604      	mov	r4, r0
   81a2c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   81a30:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   81a32:	2a01      	cmp	r2, #1
   81a34:	d00d      	beq.n	81a52 <configure_usart+0x2a>
   81a36:	2a02      	cmp	r2, #2
   81a38:	d00f      	beq.n	81a5a <configure_usart+0x32>
   81a3a:	b112      	cbz	r2, 81a42 <configure_usart+0x1a>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81a3c:	2200      	movs	r2, #0
   81a3e:	6122      	str	r2, [r4, #16]
   81a40:	e000      	b.n	81a44 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81a42:	6122      	str	r2, [r4, #16]
    switch(parity)
   81a44:	2b04      	cmp	r3, #4
   81a46:	d827      	bhi.n	81a98 <configure_usart+0x70>
   81a48:	e8df f003 	tbb	[pc, r3]
   81a4c:	1e1b170b 	.word	0x1e1b170b
   81a50:	22          	.byte	0x22
   81a51:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81a56:	6122      	str	r2, [r4, #16]
            break;
   81a58:	e7f4      	b.n	81a44 <configure_usart+0x1c>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81a5e:	6122      	str	r2, [r4, #16]
            break;
   81a60:	e7f0      	b.n	81a44 <configure_usart+0x1c>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a66:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81a68:	2806      	cmp	r0, #6
   81a6a:	d037      	beq.n	81adc <configure_usart+0xb4>
   81a6c:	2807      	cmp	r0, #7
   81a6e:	d038      	beq.n	81ae2 <configure_usart+0xba>
   81a70:	2805      	cmp	r0, #5
   81a72:	d015      	beq.n	81aa0 <configure_usart+0x78>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81a74:	23c0      	movs	r3, #192	; 0xc0
   81a76:	60a3      	str	r3, [r4, #8]
   81a78:	e014      	b.n	81aa4 <configure_usart+0x7c>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
   81a7e:	60e3      	str	r3, [r4, #12]
            break;
   81a80:	e7f2      	b.n	81a68 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81a82:	2300      	movs	r3, #0
   81a84:	60e3      	str	r3, [r4, #12]
            break;
   81a86:	e7ef      	b.n	81a68 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81a88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81a8c:	60e3      	str	r3, [r4, #12]
            break;
   81a8e:	e7eb      	b.n	81a68 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81a94:	60e3      	str	r3, [r4, #12]
            break;							
   81a96:	e7e7      	b.n	81a68 <configure_usart+0x40>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81a9c:	60e3      	str	r3, [r4, #12]
   81a9e:	e7e3      	b.n	81a68 <configure_usart+0x40>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81aa0:	2300      	movs	r3, #0
   81aa2:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81aa4:	2300      	movs	r3, #0
   81aa6:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   81aa8:	4620      	mov	r0, r4
   81aaa:	4b0f      	ldr	r3, [pc, #60]	; (81ae8 <configure_usart+0xc0>)
   81aac:	4798      	blx	r3
    driver->enabled = 1;
   81aae:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81ab2:	f043 0302 	orr.w	r3, r3, #2
   81ab6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81aba:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81abe:	4d0b      	ldr	r5, [pc, #44]	; (81aec <configure_usart+0xc4>)
   81ac0:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81ac2:	f104 001c 	add.w	r0, r4, #28
   81ac6:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81ac8:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81acc:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81ace:	4621      	mov	r1, r4
   81ad0:	f851 0b04 	ldr.w	r0, [r1], #4
   81ad4:	4a06      	ldr	r2, [pc, #24]	; (81af0 <configure_usart+0xc8>)
   81ad6:	4b07      	ldr	r3, [pc, #28]	; (81af4 <configure_usart+0xcc>)
   81ad8:	4798      	blx	r3
}
   81ada:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81adc:	2340      	movs	r3, #64	; 0x40
   81ade:	60a3      	str	r3, [r4, #8]
            break;
   81ae0:	e7e0      	b.n	81aa4 <configure_usart+0x7c>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81ae2:	2380      	movs	r3, #128	; 0x80
   81ae4:	60a3      	str	r3, [r4, #8]
            break;					
   81ae6:	e7dd      	b.n	81aa4 <configure_usart+0x7c>
   81ae8:	0008197d 	.word	0x0008197d
   81aec:	00080791 	.word	0x00080791
   81af0:	05b8d800 	.word	0x05b8d800
   81af4:	000854e9 	.word	0x000854e9

00081af8 <usart_driver_putchar>:
{
   81af8:	b570      	push	{r4, r5, r6, lr}
   81afa:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81afc:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81b00:	2200      	movs	r2, #0
   81b02:	4628      	mov	r0, r5
   81b04:	4b0e      	ldr	r3, [pc, #56]	; (81b40 <usart_driver_putchar+0x48>)
   81b06:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81b08:	6820      	ldr	r0, [r4, #0]
   81b0a:	4b0e      	ldr	r3, [pc, #56]	; (81b44 <usart_driver_putchar+0x4c>)
   81b0c:	4798      	blx	r3
   81b0e:	f010 0f02 	tst.w	r0, #2
   81b12:	d000      	beq.n	81b16 <usart_driver_putchar+0x1e>
}
   81b14:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81b16:	6820      	ldr	r0, [r4, #0]
   81b18:	4b0b      	ldr	r3, [pc, #44]	; (81b48 <usart_driver_putchar+0x50>)
   81b1a:	4798      	blx	r3
   81b1c:	f010 0f02 	tst.w	r0, #2
   81b20:	d104      	bne.n	81b2c <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81b22:	2102      	movs	r1, #2
   81b24:	6820      	ldr	r0, [r4, #0]
   81b26:	4b09      	ldr	r3, [pc, #36]	; (81b4c <usart_driver_putchar+0x54>)
   81b28:	4798      	blx	r3
}
   81b2a:	e7f3      	b.n	81b14 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81b2c:	6826      	ldr	r6, [r4, #0]
   81b2e:	4628      	mov	r0, r5
   81b30:	4b07      	ldr	r3, [pc, #28]	; (81b50 <usart_driver_putchar+0x58>)
   81b32:	4798      	blx	r3
   81b34:	4601      	mov	r1, r0
   81b36:	4630      	mov	r0, r6
   81b38:	4b06      	ldr	r3, [pc, #24]	; (81b54 <usart_driver_putchar+0x5c>)
   81b3a:	4798      	blx	r3
   81b3c:	e7f1      	b.n	81b22 <usart_driver_putchar+0x2a>
   81b3e:	bf00      	nop
   81b40:	0008079b 	.word	0x0008079b
   81b44:	000855c1 	.word	0x000855c1
   81b48:	000855c5 	.word	0x000855c5
   81b4c:	000855b9 	.word	0x000855b9
   81b50:	000807c5 	.word	0x000807c5
   81b54:	000855e5 	.word	0x000855e5

00081b58 <get_nth_available_driver>:
        if (id == 0) return &usart0_driver;
   81b58:	2800      	cmp	r0, #0
}
   81b5a:	4802      	ldr	r0, [pc, #8]	; (81b64 <get_nth_available_driver+0xc>)
   81b5c:	bf18      	it	ne
   81b5e:	2000      	movne	r0, #0
   81b60:	4770      	bx	lr
   81b62:	bf00      	nop
   81b64:	20000580 	.word	0x20000580

00081b68 <ctrl_usart_in>:
{
   81b68:	b510      	push	{r4, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81b6a:	4b25      	ldr	r3, [pc, #148]	; (81c00 <ctrl_usart_in+0x98>)
   81b6c:	885c      	ldrh	r4, [r3, #2]
   81b6e:	0a20      	lsrs	r0, r4, #8
   81b70:	4b24      	ldr	r3, [pc, #144]	; (81c04 <ctrl_usart_in+0x9c>)
   81b72:	4798      	blx	r3
    if (!driver)
   81b74:	2800      	cmp	r0, #0
   81b76:	d040      	beq.n	81bfa <ctrl_usart_in+0x92>
   81b78:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81b7a:	b2e0      	uxtb	r0, r4
   81b7c:	2814      	cmp	r0, #20
   81b7e:	d006      	beq.n	81b8e <ctrl_usart_in+0x26>
   81b80:	2818      	cmp	r0, #24
   81b82:	d01f      	beq.n	81bc4 <ctrl_usart_in+0x5c>
   81b84:	2810      	cmp	r0, #16
   81b86:	bf14      	ite	ne
   81b88:	2000      	movne	r0, #0
   81b8a:	2001      	moveq	r0, #1
}
   81b8c:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81b8e:	4a1c      	ldr	r2, [pc, #112]	; (81c00 <ctrl_usart_in+0x98>)
   81b90:	88d2      	ldrh	r2, [r2, #6]
   81b92:	2a03      	cmp	r2, #3
   81b94:	d801      	bhi.n	81b9a <ctrl_usart_in+0x32>
            return false;
   81b96:	2000      	movs	r0, #0
   81b98:	e7f8      	b.n	81b8c <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81b9a:	4a19      	ldr	r2, [pc, #100]	; (81c00 <ctrl_usart_in+0x98>)
   81b9c:	4c1a      	ldr	r4, [pc, #104]	; (81c08 <ctrl_usart_in+0xa0>)
   81b9e:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81ba0:	2104      	movs	r1, #4
   81ba2:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81ba4:	f103 001c 	add.w	r0, r3, #28
   81ba8:	4b18      	ldr	r3, [pc, #96]	; (81c0c <ctrl_usart_in+0xa4>)
   81baa:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81bac:	7020      	strb	r0, [r4, #0]
   81bae:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81bb2:	7063      	strb	r3, [r4, #1]
   81bb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81bb8:	70a3      	strb	r3, [r4, #2]
   81bba:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81bbe:	70e0      	strb	r0, [r4, #3]
        return true;
   81bc0:	2001      	movs	r0, #1
   81bc2:	e7e3      	b.n	81b8c <ctrl_usart_in+0x24>
        if (udd_g_ctrlreq.req.wLength < 4) {
   81bc4:	4a0e      	ldr	r2, [pc, #56]	; (81c00 <ctrl_usart_in+0x98>)
   81bc6:	88d2      	ldrh	r2, [r2, #6]
   81bc8:	2a03      	cmp	r2, #3
   81bca:	d801      	bhi.n	81bd0 <ctrl_usart_in+0x68>
            return false;
   81bcc:	2000      	movs	r0, #0
   81bce:	e7dd      	b.n	81b8c <ctrl_usart_in+0x24>
        udd_g_ctrlreq.payload = respbuf;
   81bd0:	4a0b      	ldr	r2, [pc, #44]	; (81c00 <ctrl_usart_in+0x98>)
   81bd2:	4c0d      	ldr	r4, [pc, #52]	; (81c08 <ctrl_usart_in+0xa0>)
   81bd4:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81bd6:	2104      	movs	r1, #4
   81bd8:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81bda:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   81bde:	4b0b      	ldr	r3, [pc, #44]	; (81c0c <ctrl_usart_in+0xa4>)
   81be0:	4798      	blx	r3
        word2buf(respbuf, cnt);
   81be2:	7020      	strb	r0, [r4, #0]
   81be4:	f3c0 2307 	ubfx	r3, r0, #8, #8
   81be8:	7063      	strb	r3, [r4, #1]
   81bea:	f3c0 4307 	ubfx	r3, r0, #16, #8
   81bee:	70a3      	strb	r3, [r4, #2]
   81bf0:	f3c0 6007 	ubfx	r0, r0, #24, #8
   81bf4:	70e0      	strb	r0, [r4, #3]
        return true;
   81bf6:	2001      	movs	r0, #1
   81bf8:	e7c8      	b.n	81b8c <ctrl_usart_in+0x24>
        return false;
   81bfa:	2000      	movs	r0, #0
   81bfc:	e7c6      	b.n	81b8c <ctrl_usart_in+0x24>
   81bfe:	bf00      	nop
   81c00:	2000269c 	.word	0x2000269c
   81c04:	00081b59 	.word	0x00081b59
   81c08:	200021d8 	.word	0x200021d8
   81c0c:	000807ef 	.word	0x000807ef

00081c10 <ctrl_usart_out>:
{
   81c10:	b530      	push	{r4, r5, lr}
   81c12:	b083      	sub	sp, #12
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81c14:	4b1b      	ldr	r3, [pc, #108]	; (81c84 <ctrl_usart_out+0x74>)
   81c16:	885c      	ldrh	r4, [r3, #2]
   81c18:	0a20      	lsrs	r0, r4, #8
   81c1a:	4b1b      	ldr	r3, [pc, #108]	; (81c88 <ctrl_usart_out+0x78>)
   81c1c:	4798      	blx	r3
    if (!driver) return;
   81c1e:	b138      	cbz	r0, 81c30 <ctrl_usart_out+0x20>
   81c20:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81c22:	b2e3      	uxtb	r3, r4
   81c24:	2b11      	cmp	r3, #17
   81c26:	d014      	beq.n	81c52 <ctrl_usart_out+0x42>
   81c28:	2b12      	cmp	r3, #18
   81c2a:	d01f      	beq.n	81c6c <ctrl_usart_out+0x5c>
   81c2c:	2b10      	cmp	r3, #16
   81c2e:	d001      	beq.n	81c34 <ctrl_usart_out+0x24>
}
   81c30:	b003      	add	sp, #12
   81c32:	bd30      	pop	{r4, r5, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   81c34:	4b13      	ldr	r3, [pc, #76]	; (81c84 <ctrl_usart_out+0x74>)
   81c36:	88db      	ldrh	r3, [r3, #6]
   81c38:	2b07      	cmp	r3, #7
   81c3a:	d1f9      	bne.n	81c30 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   81c3c:	4b11      	ldr	r3, [pc, #68]	; (81c84 <ctrl_usart_out+0x74>)
   81c3e:	6898      	ldr	r0, [r3, #8]
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81c40:	7943      	ldrb	r3, [r0, #5]
   81c42:	7902      	ldrb	r2, [r0, #4]
   81c44:	6801      	ldr	r1, [r0, #0]
   81c46:	7980      	ldrb	r0, [r0, #6]
   81c48:	9000      	str	r0, [sp, #0]
   81c4a:	4628      	mov	r0, r5
   81c4c:	4c0f      	ldr	r4, [pc, #60]	; (81c8c <ctrl_usart_out+0x7c>)
   81c4e:	47a0      	blx	r4
        return true;
   81c50:	e7ee      	b.n	81c30 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   81c52:	4b0f      	ldr	r3, [pc, #60]	; (81c90 <ctrl_usart_out+0x80>)
   81c54:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81c56:	6828      	ldr	r0, [r5, #0]
   81c58:	4b0e      	ldr	r3, [pc, #56]	; (81c94 <ctrl_usart_out+0x84>)
   81c5a:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81c5c:	6828      	ldr	r0, [r5, #0]
   81c5e:	4b0e      	ldr	r3, [pc, #56]	; (81c98 <ctrl_usart_out+0x88>)
   81c60:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81c62:	2101      	movs	r1, #1
   81c64:	6828      	ldr	r0, [r5, #0]
   81c66:	4b0d      	ldr	r3, [pc, #52]	; (81c9c <ctrl_usart_out+0x8c>)
   81c68:	4798      	blx	r3
		return;
   81c6a:	e7e1      	b.n	81c30 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   81c6c:	6800      	ldr	r0, [r0, #0]
   81c6e:	4b0c      	ldr	r3, [pc, #48]	; (81ca0 <ctrl_usart_out+0x90>)
   81c70:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81c72:	6828      	ldr	r0, [r5, #0]
   81c74:	4b0b      	ldr	r3, [pc, #44]	; (81ca4 <ctrl_usart_out+0x94>)
   81c76:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81c78:	2103      	movs	r1, #3
   81c7a:	6828      	ldr	r0, [r5, #0]
   81c7c:	4b0a      	ldr	r3, [pc, #40]	; (81ca8 <ctrl_usart_out+0x98>)
   81c7e:	4798      	blx	r3
        return true;
   81c80:	e7d6      	b.n	81c30 <ctrl_usart_out+0x20>
   81c82:	bf00      	nop
   81c84:	2000269c 	.word	0x2000269c
   81c88:	00081b59 	.word	0x00081b59
   81c8c:	00081a29 	.word	0x00081a29
   81c90:	0008197d 	.word	0x0008197d
   81c94:	000855ad 	.word	0x000855ad
   81c98:	000855a1 	.word	0x000855a1
   81c9c:	000855b9 	.word	0x000855b9
   81ca0:	000855b3 	.word	0x000855b3
   81ca4:	000855a7 	.word	0x000855a7
   81ca8:	000855bd 	.word	0x000855bd

00081cac <ctrl_usart_cb>:
{
   81cac:	b508      	push	{r3, lr}
	ctrl_usart_out();
   81cae:	4b01      	ldr	r3, [pc, #4]	; (81cb4 <ctrl_usart_cb+0x8>)
   81cb0:	4798      	blx	r3
}
   81cb2:	bd08      	pop	{r3, pc}
   81cb4:	00081c11 	.word	0x00081c11

00081cb8 <naeusb_cdc_settings_out>:
{
   81cb8:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81cba:	4b0d      	ldr	r3, [pc, #52]	; (81cf0 <naeusb_cdc_settings_out+0x38>)
   81cbc:	885e      	ldrh	r6, [r3, #2]
   81cbe:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81cc0:	4d0c      	ldr	r5, [pc, #48]	; (81cf4 <naeusb_cdc_settings_out+0x3c>)
   81cc2:	e002      	b.n	81cca <naeusb_cdc_settings_out+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81cc4:	3401      	adds	r4, #1
   81cc6:	2c04      	cmp	r4, #4
   81cc8:	d011      	beq.n	81cee <naeusb_cdc_settings_out+0x36>
        usart_driver *driver = get_nth_available_driver(i);
   81cca:	4620      	mov	r0, r4
   81ccc:	47a8      	blx	r5
        if (driver) {
   81cce:	2800      	cmp	r0, #0
   81cd0:	d0f8      	beq.n	81cc4 <naeusb_cdc_settings_out+0xc>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81cd2:	fa46 f204 	asr.w	r2, r6, r4
   81cd6:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   81cda:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   81cde:	bf14      	ite	ne
   81ce0:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   81ce4:	f36f 02c3 	bfceq	r2, #3, #1
   81ce8:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   81cec:	e7ea      	b.n	81cc4 <naeusb_cdc_settings_out+0xc>
}
   81cee:	bd70      	pop	{r4, r5, r6, pc}
   81cf0:	2000269c 	.word	0x2000269c
   81cf4:	00081b59 	.word	0x00081b59

00081cf8 <ctrl_usart_cb_data>:
{		
   81cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81cfa:	4b0c      	ldr	r3, [pc, #48]	; (81d2c <ctrl_usart_cb_data+0x34>)
   81cfc:	8858      	ldrh	r0, [r3, #2]
   81cfe:	0a00      	lsrs	r0, r0, #8
   81d00:	4b0b      	ldr	r3, [pc, #44]	; (81d30 <ctrl_usart_cb_data+0x38>)
   81d02:	4798      	blx	r3
	if (!driver) return;
   81d04:	b188      	cbz	r0, 81d2a <ctrl_usart_cb_data+0x32>
   81d06:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81d08:	4b08      	ldr	r3, [pc, #32]	; (81d2c <ctrl_usart_cb_data+0x34>)
   81d0a:	88da      	ldrh	r2, [r3, #6]
   81d0c:	899b      	ldrh	r3, [r3, #12]
   81d0e:	4293      	cmp	r3, r2
   81d10:	d30b      	bcc.n	81d2a <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81d12:	b152      	cbz	r2, 81d2a <ctrl_usart_cb_data+0x32>
   81d14:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81d16:	4d05      	ldr	r5, [pc, #20]	; (81d2c <ctrl_usart_cb_data+0x34>)
   81d18:	4f06      	ldr	r7, [pc, #24]	; (81d34 <ctrl_usart_cb_data+0x3c>)
   81d1a:	68ab      	ldr	r3, [r5, #8]
   81d1c:	5d19      	ldrb	r1, [r3, r4]
   81d1e:	4630      	mov	r0, r6
   81d20:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81d22:	3401      	adds	r4, #1
   81d24:	88eb      	ldrh	r3, [r5, #6]
   81d26:	42a3      	cmp	r3, r4
   81d28:	dcf7      	bgt.n	81d1a <ctrl_usart_cb_data+0x22>
}
   81d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d2c:	2000269c 	.word	0x2000269c
   81d30:	00081b59 	.word	0x00081b59
   81d34:	00081af9 	.word	0x00081af9

00081d38 <naeusart_register_handlers>:
{
   81d38:	b570      	push	{r4, r5, r6, lr}
   81d3a:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   81d3c:	4d09      	ldr	r5, [pc, #36]	; (81d64 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   81d3e:	4e0a      	ldr	r6, [pc, #40]	; (81d68 <naeusart_register_handlers+0x30>)
   81d40:	e002      	b.n	81d48 <naeusart_register_handlers+0x10>
	for (uint8_t i = 0; i < 4; i++) {
   81d42:	3401      	adds	r4, #1
   81d44:	2c04      	cmp	r4, #4
   81d46:	d005      	beq.n	81d54 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   81d48:	4620      	mov	r0, r4
   81d4a:	47a8      	blx	r5
		if (!driver) continue;
   81d4c:	2800      	cmp	r0, #0
   81d4e:	d0f8      	beq.n	81d42 <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   81d50:	47b0      	blx	r6
   81d52:	e7f6      	b.n	81d42 <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   81d54:	4805      	ldr	r0, [pc, #20]	; (81d6c <naeusart_register_handlers+0x34>)
   81d56:	4b06      	ldr	r3, [pc, #24]	; (81d70 <naeusart_register_handlers+0x38>)
   81d58:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   81d5a:	4806      	ldr	r0, [pc, #24]	; (81d74 <naeusart_register_handlers+0x3c>)
   81d5c:	4b06      	ldr	r3, [pc, #24]	; (81d78 <naeusart_register_handlers+0x40>)
   81d5e:	4798      	blx	r3
}
   81d60:	bd70      	pop	{r4, r5, r6, pc}
   81d62:	bf00      	nop
   81d64:	00081b59 	.word	0x00081b59
   81d68:	0008197d 	.word	0x0008197d
   81d6c:	00081dc5 	.word	0x00081dc5
   81d70:	000812c1 	.word	0x000812c1
   81d74:	000818b5 	.word	0x000818b5
   81d78:	000812e5 	.word	0x000812e5

00081d7c <naeusb_cdc_settings_in>:
{
   81d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < 4; i++) {
   81d7e:	4d0e      	ldr	r5, [pc, #56]	; (81db8 <naeusb_cdc_settings_in+0x3c>)
{
   81d80:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   81d82:	4f0e      	ldr	r7, [pc, #56]	; (81dbc <naeusb_cdc_settings_in+0x40>)
		respbuf[i] = 0;
   81d84:	4626      	mov	r6, r4
   81d86:	e002      	b.n	81d8e <naeusb_cdc_settings_in+0x12>
    for (uint8_t i = 0; i < 4; i++) {
   81d88:	3401      	adds	r4, #1
   81d8a:	2c04      	cmp	r4, #4
   81d8c:	d00c      	beq.n	81da8 <naeusb_cdc_settings_in+0x2c>
        usart_driver *driver = get_nth_available_driver(i);
   81d8e:	4620      	mov	r0, r4
   81d90:	47b8      	blx	r7
		respbuf[i] = 0;
   81d92:	f805 6b01 	strb.w	r6, [r5], #1
        if (driver)
   81d96:	2800      	cmp	r0, #0
   81d98:	d0f6      	beq.n	81d88 <naeusb_cdc_settings_in+0xc>
            respbuf[i] = driver->cdc_settings_change;
   81d9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81d9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   81da2:	f805 3c01 	strb.w	r3, [r5, #-1]
   81da6:	e7ef      	b.n	81d88 <naeusb_cdc_settings_in+0xc>
    udd_g_ctrlreq.payload = respbuf;
   81da8:	4b05      	ldr	r3, [pc, #20]	; (81dc0 <naeusb_cdc_settings_in+0x44>)
   81daa:	4a03      	ldr	r2, [pc, #12]	; (81db8 <naeusb_cdc_settings_in+0x3c>)
   81dac:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 4;
   81dae:	2204      	movs	r2, #4
   81db0:	819a      	strh	r2, [r3, #12]
}
   81db2:	2001      	movs	r0, #1
   81db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81db6:	bf00      	nop
   81db8:	200021d8 	.word	0x200021d8
   81dbc:	00081b59 	.word	0x00081b59
   81dc0:	2000269c 	.word	0x2000269c

00081dc4 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81dc8:	4b21      	ldr	r3, [pc, #132]	; (81e50 <usart_setup_in_received+0x8c>)
   81dca:	785b      	ldrb	r3, [r3, #1]
   81dcc:	3b1a      	subs	r3, #26
   81dce:	2b17      	cmp	r3, #23
   81dd0:	d839      	bhi.n	81e46 <usart_setup_in_received+0x82>
   81dd2:	e8df f003 	tbb	[pc, r3]
   81dd6:	0c0f      	.short	0x0c0f
   81dd8:	38383838 	.word	0x38383838
   81ddc:	3838322f 	.word	0x3838322f
   81de0:	38383838 	.word	0x38383838
   81de4:	38383838 	.word	0x38383838
   81de8:	38383838 	.word	0x38383838
   81dec:	3538      	.short	0x3538
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   81dee:	4b19      	ldr	r3, [pc, #100]	; (81e54 <usart_setup_in_received+0x90>)
   81df0:	4798      	blx	r3
   81df2:	e029      	b.n	81e48 <usart_setup_in_received+0x84>
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81df4:	4b16      	ldr	r3, [pc, #88]	; (81e50 <usart_setup_in_received+0x8c>)
   81df6:	8858      	ldrh	r0, [r3, #2]
   81df8:	0a00      	lsrs	r0, r0, #8
   81dfa:	4b17      	ldr	r3, [pc, #92]	; (81e58 <usart_setup_in_received+0x94>)
   81dfc:	4798      	blx	r3
		if (!driver) return false;
   81dfe:	4606      	mov	r6, r0
   81e00:	b320      	cbz	r0, 81e4c <usart_setup_in_received+0x88>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e02:	4b13      	ldr	r3, [pc, #76]	; (81e50 <usart_setup_in_received+0x8c>)
   81e04:	88db      	ldrh	r3, [r3, #6]
   81e06:	b19b      	cbz	r3, 81e30 <usart_setup_in_received+0x6c>
   81e08:	4d14      	ldr	r5, [pc, #80]	; (81e5c <usart_setup_in_received+0x98>)
   81e0a:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   81e0c:	361c      	adds	r6, #28
   81e0e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 81e6c <usart_setup_in_received+0xa8>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e12:	4f0f      	ldr	r7, [pc, #60]	; (81e50 <usart_setup_in_received+0x8c>)
    return get_from_circ_buf(&driver->rxbuf);
   81e14:	4630      	mov	r0, r6
   81e16:	47c0      	blx	r8
            respbuf[cnt] = usart_driver_getchar(driver);
   81e18:	f805 0b01 	strb.w	r0, [r5], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e1c:	3401      	adds	r4, #1
   81e1e:	88fb      	ldrh	r3, [r7, #6]
   81e20:	42a3      	cmp	r3, r4
   81e22:	d8f7      	bhi.n	81e14 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   81e24:	4b0a      	ldr	r3, [pc, #40]	; (81e50 <usart_setup_in_received+0x8c>)
   81e26:	4a0d      	ldr	r2, [pc, #52]	; (81e5c <usart_setup_in_received+0x98>)
   81e28:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81e2a:	819c      	strh	r4, [r3, #12]
        return true;
   81e2c:	2001      	movs	r0, #1
   81e2e:	e00b      	b.n	81e48 <usart_setup_in_received+0x84>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81e30:	2400      	movs	r4, #0
   81e32:	e7f7      	b.n	81e24 <usart_setup_in_received+0x60>
        break;
		
	#if USB_DEVICE_PRODUCT_ID != 0xACE0
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   81e34:	4b0a      	ldr	r3, [pc, #40]	; (81e60 <usart_setup_in_received+0x9c>)
   81e36:	4798      	blx	r3
   81e38:	e006      	b.n	81e48 <usart_setup_in_received+0x84>
        break;
        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   81e3a:	4b0a      	ldr	r3, [pc, #40]	; (81e64 <usart_setup_in_received+0xa0>)
   81e3c:	4798      	blx	r3
   81e3e:	e003      	b.n	81e48 <usart_setup_in_received+0x84>
        break;
	#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   81e40:	4b09      	ldr	r3, [pc, #36]	; (81e68 <usart_setup_in_received+0xa4>)
   81e42:	4798      	blx	r3
   81e44:	e000      	b.n	81e48 <usart_setup_in_received+0x84>
    switch(udd_g_ctrlreq.req.bRequest) {
   81e46:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   81e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   81e4c:	2000      	movs	r0, #0
   81e4e:	e7fb      	b.n	81e48 <usart_setup_in_received+0x84>
   81e50:	2000269c 	.word	0x2000269c
   81e54:	00081b69 	.word	0x00081b69
   81e58:	00081b59 	.word	0x00081b59
   81e5c:	200021d8 	.word	0x200021d8
   81e60:	000826e9 	.word	0x000826e9
   81e64:	00082035 	.word	0x00082035
   81e68:	00081d7d 	.word	0x00081d7d
   81e6c:	000807c5 	.word	0x000807c5

00081e70 <cdc_enable>:
{
   81e70:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81e72:	4b05      	ldr	r3, [pc, #20]	; (81e88 <cdc_enable+0x18>)
   81e74:	4798      	blx	r3
    driver->cdc_enabled = 1;
   81e76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e7a:	f043 0304 	orr.w	r3, r3, #4
   81e7e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81e82:	2001      	movs	r0, #1
   81e84:	bd08      	pop	{r3, pc}
   81e86:	bf00      	nop
   81e88:	00081b59 	.word	0x00081b59

00081e8c <cdc_disable>:
{
   81e8c:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   81e8e:	4b04      	ldr	r3, [pc, #16]	; (81ea0 <cdc_disable+0x14>)
   81e90:	4798      	blx	r3
    driver->cdc_enabled = 0;
   81e92:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81e96:	f36f 0382 	bfc	r3, #2, #1
   81e9a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   81e9e:	bd08      	pop	{r3, pc}
   81ea0:	00081b59 	.word	0x00081b59

00081ea4 <my_callback_rx_notify>:
{
   81ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ea8:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   81eaa:	4b19      	ldr	r3, [pc, #100]	; (81f10 <my_callback_rx_notify+0x6c>)
   81eac:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81eae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81eb2:	f003 0306 	and.w	r3, r3, #6
   81eb6:	2b06      	cmp	r3, #6
   81eb8:	d001      	beq.n	81ebe <my_callback_rx_notify+0x1a>
}
   81eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81ebe:	4605      	mov	r5, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   81ec0:	4648      	mov	r0, r9
   81ec2:	4b14      	ldr	r3, [pc, #80]	; (81f14 <my_callback_rx_notify+0x70>)
   81ec4:	4798      	blx	r3
        while (num_char > 0) {
   81ec6:	4604      	mov	r4, r0
   81ec8:	2800      	cmp	r0, #0
   81eca:	d0f6      	beq.n	81eba <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81ecc:	4f12      	ldr	r7, [pc, #72]	; (81f18 <my_callback_rx_notify+0x74>)
   81ece:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81f1c <my_callback_rx_notify+0x78>
                usart_driver_putchar(driver, uart_buf[i]);
   81ed2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81f20 <my_callback_rx_notify+0x7c>
   81ed6:	e005      	b.n	81ee4 <my_callback_rx_notify+0x40>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   81ed8:	4648      	mov	r0, r9
   81eda:	4b0e      	ldr	r3, [pc, #56]	; (81f14 <my_callback_rx_notify+0x70>)
   81edc:	4798      	blx	r3
        while (num_char > 0) {
   81ede:	4604      	mov	r4, r0
   81ee0:	2800      	cmp	r0, #0
   81ee2:	d0ea      	beq.n	81eba <my_callback_rx_notify+0x16>
            num_char = (num_char > 512) ? 512 : num_char;
   81ee4:	4626      	mov	r6, r4
   81ee6:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   81eea:	bf28      	it	cs
   81eec:	f44f 7600 	movcs.w	r6, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   81ef0:	4632      	mov	r2, r6
   81ef2:	4639      	mov	r1, r7
   81ef4:	4648      	mov	r0, r9
   81ef6:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   81ef8:	2c00      	cmp	r4, #0
   81efa:	d0ed      	beq.n	81ed8 <my_callback_rx_notify+0x34>
   81efc:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   81efe:	5d39      	ldrb	r1, [r7, r4]
   81f00:	4628      	mov	r0, r5
   81f02:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   81f04:	3401      	adds	r4, #1
   81f06:	b2a4      	uxth	r4, r4
   81f08:	42b4      	cmp	r4, r6
   81f0a:	d3f8      	bcc.n	81efe <my_callback_rx_notify+0x5a>
   81f0c:	e7e4      	b.n	81ed8 <my_callback_rx_notify+0x34>
   81f0e:	bf00      	nop
   81f10:	00081b59 	.word	0x00081b59
   81f14:	000803c5 	.word	0x000803c5
   81f18:	20001c48 	.word	0x20001c48
   81f1c:	000805cd 	.word	0x000805cd
   81f20:	00081af9 	.word	0x00081af9

00081f24 <my_callback_config>:
{
   81f24:	b510      	push	{r4, lr}
   81f26:	b082      	sub	sp, #8
   81f28:	460c      	mov	r4, r1
	usart_driver *driver = get_nth_available_driver(port);
   81f2a:	4b0c      	ldr	r3, [pc, #48]	; (81f5c <my_callback_config+0x38>)
   81f2c:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   81f2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f32:	f003 0306 	and.w	r3, r3, #6
   81f36:	2b06      	cmp	r3, #6
   81f38:	d001      	beq.n	81f3e <my_callback_config+0x1a>
}
   81f3a:	b002      	add	sp, #8
   81f3c:	bd10      	pop	{r4, pc}
        switch(cfg->bParityType) {
   81f3e:	7963      	ldrb	r3, [r4, #5]
   81f40:	2b04      	cmp	r3, #4
   81f42:	d8fa      	bhi.n	81f3a <my_callback_config+0x16>
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   81f44:	79a3      	ldrb	r3, [r4, #6]
   81f46:	3b05      	subs	r3, #5
   81f48:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   81f4a:	b2db      	uxtb	r3, r3
   81f4c:	9300      	str	r3, [sp, #0]
   81f4e:	2300      	movs	r3, #0
   81f50:	461a      	mov	r2, r3
   81f52:	6821      	ldr	r1, [r4, #0]
   81f54:	4c02      	ldr	r4, [pc, #8]	; (81f60 <my_callback_config+0x3c>)
   81f56:	47a0      	blx	r4
   81f58:	e7ef      	b.n	81f3a <my_callback_config+0x16>
   81f5a:	bf00      	nop
   81f5c:	00081b59 	.word	0x00081b59
   81f60:	00081a29 	.word	0x00081a29

00081f64 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   81f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f68:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   81f6a:	f8df b04c 	ldr.w	fp, [pc, #76]	; 81fb8 <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81f6e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81fbc <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81f72:	f8df a04c 	ldr.w	sl, [pc, #76]	; 81fc0 <cdc_send_to_pc+0x5c>
   81f76:	f8df 904c 	ldr.w	r9, [pc, #76]	; 81fc4 <cdc_send_to_pc+0x60>
   81f7a:	e002      	b.n	81f82 <cdc_send_to_pc+0x1e>
	for (uint8_t i = 0; i < 4; i++) {
   81f7c:	3401      	adds	r4, #1
   81f7e:	2c04      	cmp	r4, #4
   81f80:	d017      	beq.n	81fb2 <cdc_send_to_pc+0x4e>
   81f82:	b2e7      	uxtb	r7, r4
		usart_driver *driver = get_nth_available_driver(i);
   81f84:	4620      	mov	r0, r4
   81f86:	47d8      	blx	fp
		if (!driver) continue;
   81f88:	4606      	mov	r6, r0
   81f8a:	2800      	cmp	r0, #0
   81f8c:	d0f6      	beq.n	81f7c <cdc_send_to_pc+0x18>
		if (driver->cdc_enabled && driver->enabled) {
   81f8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   81f92:	f003 0306 	and.w	r3, r3, #6
   81f96:	2b06      	cmp	r3, #6
   81f98:	d1f0      	bne.n	81f7c <cdc_send_to_pc+0x18>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   81f9a:	f506 75e2 	add.w	r5, r6, #452	; 0x1c4
   81f9e:	4628      	mov	r0, r5
   81fa0:	47c0      	blx	r8
   81fa2:	2800      	cmp	r0, #0
   81fa4:	d0ea      	beq.n	81f7c <cdc_send_to_pc+0x18>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   81fa6:	4628      	mov	r0, r5
   81fa8:	47d0      	blx	sl
   81faa:	4601      	mov	r1, r0
   81fac:	4638      	mov	r0, r7
   81fae:	47c8      	blx	r9
   81fb0:	e7f3      	b.n	81f9a <cdc_send_to_pc+0x36>
			}
		}

	}
	
   81fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fb6:	bf00      	nop
   81fb8:	00081b59 	.word	0x00081b59
   81fbc:	000807e3 	.word	0x000807e3
   81fc0:	000807c5 	.word	0x000807c5
   81fc4:	00080705 	.word	0x00080705

00081fc8 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81fc8:	b510      	push	{r4, lr}
   81fca:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   81fcc:	4b06      	ldr	r3, [pc, #24]	; (81fe8 <FPGA_setlock+0x20>)
   81fce:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81fd0:	4b06      	ldr	r3, [pc, #24]	; (81fec <FPGA_setlock+0x24>)
   81fd2:	781b      	ldrb	r3, [r3, #0]
   81fd4:	b933      	cbnz	r3, 81fe4 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   81fd6:	4b05      	ldr	r3, [pc, #20]	; (81fec <FPGA_setlock+0x24>)
   81fd8:	701c      	strb	r4, [r3, #0]
    ret = 1;
   81fda:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   81fdc:	4b04      	ldr	r3, [pc, #16]	; (81ff0 <FPGA_setlock+0x28>)
   81fde:	4798      	blx	r3
  return ret;
}
   81fe0:	4620      	mov	r0, r4
   81fe2:	bd10      	pop	{r4, pc}
  int ret = 0;
   81fe4:	2400      	movs	r4, #0
   81fe6:	e7f9      	b.n	81fdc <FPGA_setlock+0x14>
   81fe8:	0008388d 	.word	0x0008388d
   81fec:	20001e48 	.word	0x20001e48
   81ff0:	000838c9 	.word	0x000838c9

00081ff4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   81ff4:	4b01      	ldr	r3, [pc, #4]	; (81ffc <FPGA_releaselock+0x8>)
   81ff6:	2200      	movs	r2, #0
   81ff8:	701a      	strb	r2, [r3, #0]
}
   81ffa:	4770      	bx	lr
   81ffc:	20001e48 	.word	0x20001e48

00082000 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82000:	4b01      	ldr	r3, [pc, #4]	; (82008 <FPGA_lockstatus+0x8>)
   82002:	7818      	ldrb	r0, [r3, #0]
}
   82004:	4770      	bx	lr
   82006:	bf00      	nop
   82008:	20001e48 	.word	0x20001e48

0008200c <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   8200c:	b508      	push	{r3, lr}
   8200e:	4601      	mov	r1, r0
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   82010:	4804      	ldr	r0, [pc, #16]	; (82024 <FPGA_setaddr+0x18>)
   82012:	4b05      	ldr	r3, [pc, #20]	; (82028 <FPGA_setaddr+0x1c>)
   82014:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   82016:	2035      	movs	r0, #53	; 0x35
   82018:	4b04      	ldr	r3, [pc, #16]	; (8202c <FPGA_setaddr+0x20>)
   8201a:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   8201c:	2035      	movs	r0, #53	; 0x35
   8201e:	4b04      	ldr	r3, [pc, #16]	; (82030 <FPGA_setaddr+0x24>)
   82020:	4798      	blx	r3
	#endif
}
   82022:	bd08      	pop	{r3, pc}
   82024:	400e0e00 	.word	0x400e0e00
   82028:	00083b49 	.word	0x00083b49
   8202c:	00083b8b 	.word	0x00083b8b
   82030:	00083b71 	.word	0x00083b71

00082034 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   82034:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   82036:	4b7e      	ldr	r3, [pc, #504]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   82038:	789c      	ldrb	r4, [r3, #2]
   8203a:	4b7e      	ldr	r3, [pc, #504]	; (82234 <V2Protocol_ProcessCommand+0x200>)
   8203c:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   8203e:	4b7e      	ldr	r3, [pc, #504]	; (82238 <V2Protocol_ProcessCommand+0x204>)
   82040:	4798      	blx	r3

	switch (V2Command)
   82042:	1e63      	subs	r3, r4, #1
   82044:	2b21      	cmp	r3, #33	; 0x21
   82046:	f200 80e8 	bhi.w	8221a <V2Protocol_ProcessCommand+0x1e6>
   8204a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8204e:	0022      	.short	0x0022
   82050:	00370037 	.word	0x00370037
   82054:	00e600e6 	.word	0x00e600e6
   82058:	00e6006c 	.word	0x00e6006c
   8205c:	00e600e6 	.word	0x00e600e6
   82060:	00e6008b 	.word	0x00e6008b
   82064:	00e600e6 	.word	0x00e600e6
   82068:	00e600e6 	.word	0x00e600e6
   8206c:	00970093 	.word	0x00970093
   82070:	009b00a7 	.word	0x009b00a7
   82074:	009b00a1 	.word	0x009b00a1
   82078:	00b000a1 	.word	0x00b000a1
   8207c:	00b000ab 	.word	0x00b000ab
   82080:	00ab00ab 	.word	0x00ab00ab
   82084:	00b500ab 	.word	0x00b500ab
   82088:	00e600e6 	.word	0x00e600e6
   8208c:	00d300b9 	.word	0x00d300b9
   82090:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82092:	4b68      	ldr	r3, [pc, #416]	; (82234 <V2Protocol_ProcessCommand+0x200>)
   82094:	2200      	movs	r2, #0
   82096:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82098:	220d      	movs	r2, #13
   8209a:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   8209c:	4c67      	ldr	r4, [pc, #412]	; (8223c <V2Protocol_ProcessCommand+0x208>)
   8209e:	cc07      	ldmia	r4!, {r0, r1, r2}
   820a0:	f8c3 0003 	str.w	r0, [r3, #3]
   820a4:	f8c3 1007 	str.w	r1, [r3, #7]
   820a8:	f8c3 200b 	str.w	r2, [r3, #11]
   820ac:	7822      	ldrb	r2, [r4, #0]
   820ae:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   820b0:	4a5f      	ldr	r2, [pc, #380]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   820b2:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   820b4:	2310      	movs	r3, #16
   820b6:	8193      	strh	r3, [r2, #12]
	return true;
   820b8:	2001      	movs	r0, #1
}
   820ba:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   820bc:	4b5c      	ldr	r3, [pc, #368]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   820be:	689b      	ldr	r3, [r3, #8]
   820c0:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   820c2:	2c02      	cmp	r4, #2
   820c4:	d00c      	beq.n	820e0 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   820c6:	4b5e      	ldr	r3, [pc, #376]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   820c8:	2202      	movs	r2, #2
   820ca:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   820cc:	4628      	mov	r0, r5
   820ce:	4b5d      	ldr	r3, [pc, #372]	; (82244 <V2Protocol_ProcessCommand+0x210>)
   820d0:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   820d2:	2c03      	cmp	r4, #3
   820d4:	d017      	beq.n	82106 <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   820d6:	4b5c      	ldr	r3, [pc, #368]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   820d8:	22c0      	movs	r2, #192	; 0xc0
   820da:	705a      	strb	r2, [r3, #1]
	return true;
   820dc:	2001      	movs	r0, #1
   820de:	e7ec      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   820e0:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   820e2:	4b57      	ldr	r3, [pc, #348]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   820e4:	2202      	movs	r2, #2
   820e6:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   820e8:	4628      	mov	r0, r5
   820ea:	4b56      	ldr	r3, [pc, #344]	; (82244 <V2Protocol_ProcessCommand+0x210>)
   820ec:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   820ee:	f010 0f02 	tst.w	r0, #2
   820f2:	d0f0      	beq.n	820d6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   820f4:	4b54      	ldr	r3, [pc, #336]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   820f6:	2200      	movs	r2, #0
   820f8:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   820fa:	4621      	mov	r1, r4
   820fc:	4628      	mov	r0, r5
   820fe:	4b53      	ldr	r3, [pc, #332]	; (8224c <V2Protocol_ProcessCommand+0x218>)
   82100:	4798      	blx	r3
	return true;
   82102:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   82104:	e7d9      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82106:	f010 0f01 	tst.w	r0, #1
   8210a:	d0e4      	beq.n	820d6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   8210c:	4c4e      	ldr	r4, [pc, #312]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   8210e:	2300      	movs	r3, #0
   82110:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82112:	4628      	mov	r0, r5
   82114:	4b4e      	ldr	r3, [pc, #312]	; (82250 <V2Protocol_ProcessCommand+0x21c>)
   82116:	4798      	blx	r3
   82118:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   8211a:	4a49      	ldr	r2, [pc, #292]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   8211c:	8813      	ldrh	r3, [r2, #0]
   8211e:	3301      	adds	r3, #1
   82120:	8013      	strh	r3, [r2, #0]
	return true;
   82122:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   82124:	e7c9      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82126:	4b42      	ldr	r3, [pc, #264]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   82128:	689b      	ldr	r3, [r3, #8]
   8212a:	78da      	ldrb	r2, [r3, #3]
   8212c:	7899      	ldrb	r1, [r3, #2]
   8212e:	0409      	lsls	r1, r1, #16
   82130:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82134:	781a      	ldrb	r2, [r3, #0]
   82136:	4311      	orrs	r1, r2
   82138:	785b      	ldrb	r3, [r3, #1]
   8213a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   8213e:	4b45      	ldr	r3, [pc, #276]	; (82254 <V2Protocol_ProcessCommand+0x220>)
   82140:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   82142:	2900      	cmp	r1, #0
   82144:	db0a      	blt.n	8215c <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   82146:	4844      	ldr	r0, [pc, #272]	; (82258 <V2Protocol_ProcessCommand+0x224>)
   82148:	4b44      	ldr	r3, [pc, #272]	; (8225c <V2Protocol_ProcessCommand+0x228>)
   8214a:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   8214c:	4b3e      	ldr	r3, [pc, #248]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   8214e:	2200      	movs	r2, #0
   82150:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82152:	4b3b      	ldr	r3, [pc, #236]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   82154:	2202      	movs	r2, #2
   82156:	801a      	strh	r2, [r3, #0]
	return true;
   82158:	2001      	movs	r0, #1
}
   8215a:	e7ae      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   8215c:	4b40      	ldr	r3, [pc, #256]	; (82260 <V2Protocol_ProcessCommand+0x22c>)
   8215e:	2201      	movs	r2, #1
   82160:	701a      	strb	r2, [r3, #0]
   82162:	e7f0      	b.n	82146 <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82164:	4b38      	ldr	r3, [pc, #224]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   82166:	2200      	movs	r2, #0
   82168:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8216a:	4b35      	ldr	r3, [pc, #212]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   8216c:	2202      	movs	r2, #2
   8216e:	801a      	strh	r2, [r3, #0]
	return true;
   82170:	2001      	movs	r0, #1
}
   82172:	e7a2      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   82174:	4b3b      	ldr	r3, [pc, #236]	; (82264 <V2Protocol_ProcessCommand+0x230>)
   82176:	4798      	blx	r3
	return true;
   82178:	2001      	movs	r0, #1
			break;
   8217a:	e79e      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   8217c:	4b3a      	ldr	r3, [pc, #232]	; (82268 <V2Protocol_ProcessCommand+0x234>)
   8217e:	4798      	blx	r3
	return true;
   82180:	2001      	movs	r0, #1
			break;
   82182:	e79a      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82184:	4939      	ldr	r1, [pc, #228]	; (8226c <V2Protocol_ProcessCommand+0x238>)
   82186:	4620      	mov	r0, r4
   82188:	4b39      	ldr	r3, [pc, #228]	; (82270 <V2Protocol_ProcessCommand+0x23c>)
   8218a:	4798      	blx	r3
	return true;
   8218c:	2001      	movs	r0, #1
			break;
   8218e:	e794      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82190:	4936      	ldr	r1, [pc, #216]	; (8226c <V2Protocol_ProcessCommand+0x238>)
   82192:	4620      	mov	r0, r4
   82194:	4b37      	ldr	r3, [pc, #220]	; (82274 <V2Protocol_ProcessCommand+0x240>)
   82196:	4798      	blx	r3
	return true;
   82198:	2001      	movs	r0, #1
			break;
   8219a:	e78e      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   8219c:	4b36      	ldr	r3, [pc, #216]	; (82278 <V2Protocol_ProcessCommand+0x244>)
   8219e:	4798      	blx	r3
	return true;
   821a0:	2001      	movs	r0, #1
			break;
   821a2:	e78a      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   821a4:	4620      	mov	r0, r4
   821a6:	4b35      	ldr	r3, [pc, #212]	; (8227c <V2Protocol_ProcessCommand+0x248>)
   821a8:	4798      	blx	r3
	return true;
   821aa:	2001      	movs	r0, #1
			break;
   821ac:	e785      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   821ae:	4620      	mov	r0, r4
   821b0:	4b33      	ldr	r3, [pc, #204]	; (82280 <V2Protocol_ProcessCommand+0x24c>)
   821b2:	4798      	blx	r3
	return true;
   821b4:	2001      	movs	r0, #1
			break;
   821b6:	e780      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   821b8:	4b32      	ldr	r3, [pc, #200]	; (82284 <V2Protocol_ProcessCommand+0x250>)
   821ba:	4798      	blx	r3
	return true;
   821bc:	2001      	movs	r0, #1
			break;
   821be:	e77c      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   821c0:	4a1b      	ldr	r2, [pc, #108]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   821c2:	4b21      	ldr	r3, [pc, #132]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   821c4:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   821c6:	4b1e      	ldr	r3, [pc, #120]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   821c8:	8819      	ldrh	r1, [r3, #0]
   821ca:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   821cc:	2200      	movs	r2, #0
   821ce:	801a      	strh	r2, [r3, #0]
			return true;
   821d0:	2001      	movs	r0, #1
   821d2:	e772      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   821d4:	4a16      	ldr	r2, [pc, #88]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   821d6:	8853      	ldrh	r3, [r2, #2]
   821d8:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   821da:	88d2      	ldrh	r2, [r2, #6]
   821dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   821e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   821e4:	dc21      	bgt.n	8222a <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   821e6:	4912      	ldr	r1, [pc, #72]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   821e8:	4b20      	ldr	r3, [pc, #128]	; (8226c <V2Protocol_ProcessCommand+0x238>)
   821ea:	4403      	add	r3, r0
   821ec:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   821ee:	818a      	strh	r2, [r1, #12]
			return true;
   821f0:	2001      	movs	r0, #1
   821f2:	e762      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   821f4:	4a0e      	ldr	r2, [pc, #56]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   821f6:	8853      	ldrh	r3, [r2, #2]
   821f8:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   821fa:	88d2      	ldrh	r2, [r2, #6]
   821fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   82200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82204:	dd01      	ble.n	8220a <V2Protocol_ProcessCommand+0x1d6>
				return false;
   82206:	2000      	movs	r0, #0
   82208:	e757      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8220a:	4b09      	ldr	r3, [pc, #36]	; (82230 <V2Protocol_ProcessCommand+0x1fc>)
   8220c:	6899      	ldr	r1, [r3, #8]
   8220e:	4b17      	ldr	r3, [pc, #92]	; (8226c <V2Protocol_ProcessCommand+0x238>)
   82210:	4418      	add	r0, r3
   82212:	4b1d      	ldr	r3, [pc, #116]	; (82288 <V2Protocol_ProcessCommand+0x254>)
   82214:	4798      	blx	r3
			return true;
   82216:	2001      	movs	r0, #1
   82218:	e74f      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   8221a:	4b0b      	ldr	r3, [pc, #44]	; (82248 <V2Protocol_ProcessCommand+0x214>)
   8221c:	22c9      	movs	r2, #201	; 0xc9
   8221e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82220:	4b07      	ldr	r3, [pc, #28]	; (82240 <V2Protocol_ProcessCommand+0x20c>)
   82222:	2202      	movs	r2, #2
   82224:	801a      	strh	r2, [r3, #0]
	return true;
   82226:	2001      	movs	r0, #1
}
   82228:	e747      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
				return false;
   8222a:	2000      	movs	r0, #0
   8222c:	e745      	b.n	820ba <V2Protocol_ProcessCommand+0x86>
   8222e:	bf00      	nop
   82230:	2000269c 	.word	0x2000269c
   82234:	20001f4c 	.word	0x20001f4c
   82238:	00082d41 	.word	0x00082d41
   8223c:	0008ca88 	.word	0x0008ca88
   82240:	2000265a 	.word	0x2000265a
   82244:	000822a9 	.word	0x000822a9
   82248:	2000265c 	.word	0x2000265c
   8224c:	000822d1 	.word	0x000822d1
   82250:	000822bd 	.word	0x000822bd
   82254:	2000267c 	.word	0x2000267c
   82258:	0008ca98 	.word	0x0008ca98
   8225c:	00085ed9 	.word	0x00085ed9
   82260:	20002658 	.word	0x20002658
   82264:	00080dcd 	.word	0x00080dcd
   82268:	00080f15 	.word	0x00080f15
   8226c:	20001e4c 	.word	0x20001e4c
   82270:	000808ad 	.word	0x000808ad
   82274:	00080b2d 	.word	0x00080b2d
   82278:	00080f75 	.word	0x00080f75
   8227c:	00080c79 	.word	0x00080c79
   82280:	00080d25 	.word	0x00080d25
   82284:	00080d95 	.word	0x00080d95
   82288:	00085f01 	.word	0x00085f01

0008228c <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   8228c:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   8228e:	4805      	ldr	r0, [pc, #20]	; (822a4 <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82290:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   82294:	7803      	ldrb	r3, [r0, #0]
   82296:	4293      	cmp	r3, r2
   82298:	d003      	beq.n	822a2 <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   8229a:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   8229c:	4288      	cmp	r0, r1
   8229e:	d1f9      	bne.n	82294 <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   822a0:	2000      	movs	r0, #0
}
   822a2:	4770      	bx	lr
   822a4:	20000824 	.word	0x20000824

000822a8 <V2Params_GetParameterPrivileges>:
{
   822a8:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822aa:	4b03      	ldr	r3, [pc, #12]	; (822b8 <V2Params_GetParameterPrivileges+0x10>)
   822ac:	4798      	blx	r3
	if (ParamInfo == NULL)
   822ae:	b108      	cbz	r0, 822b4 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   822b0:	7840      	ldrb	r0, [r0, #1]
}
   822b2:	bd08      	pop	{r3, pc}
	  return 0;
   822b4:	2000      	movs	r0, #0
   822b6:	e7fc      	b.n	822b2 <V2Params_GetParameterPrivileges+0xa>
   822b8:	0008228d 	.word	0x0008228d

000822bc <V2Params_GetParameterValue>:
{
   822bc:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822be:	4b03      	ldr	r3, [pc, #12]	; (822cc <V2Params_GetParameterValue+0x10>)
   822c0:	4798      	blx	r3
	if (ParamInfo == NULL)
   822c2:	b108      	cbz	r0, 822c8 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   822c4:	7880      	ldrb	r0, [r0, #2]
}
   822c6:	bd08      	pop	{r3, pc}
	  return 0;
   822c8:	2000      	movs	r0, #0
   822ca:	e7fc      	b.n	822c6 <V2Params_GetParameterValue+0xa>
   822cc:	0008228d 	.word	0x0008228d

000822d0 <V2Params_SetParameterValue>:
{
   822d0:	b510      	push	{r4, lr}
   822d2:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   822d4:	4b02      	ldr	r3, [pc, #8]	; (822e0 <V2Params_SetParameterValue+0x10>)
   822d6:	4798      	blx	r3
	if (ParamInfo == NULL)
   822d8:	b100      	cbz	r0, 822dc <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   822da:	7084      	strb	r4, [r0, #2]
}
   822dc:	bd10      	pop	{r4, pc}
   822de:	bf00      	nop
   822e0:	0008228d 	.word	0x0008228d

000822e4 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   822e4:	b538      	push	{r3, r4, r5, lr}
   822e6:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   822e8:	b2c0      	uxtb	r0, r0
   822ea:	4d05      	ldr	r5, [pc, #20]	; (82300 <XMEGANVM_SendAddress+0x1c>)
   822ec:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   822ee:	f3c4 2007 	ubfx	r0, r4, #8, #8
   822f2:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   822f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
   822f8:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   822fa:	0e20      	lsrs	r0, r4, #24
   822fc:	47a8      	blx	r5
}
   822fe:	bd38      	pop	{r3, r4, r5, pc}
   82300:	00082b71 	.word	0x00082b71

00082304 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   82304:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   82306:	4b03      	ldr	r3, [pc, #12]	; (82314 <XMEGANVM_SendNVMRegAddress+0x10>)
   82308:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   8230a:	4318      	orrs	r0, r3
   8230c:	4b02      	ldr	r3, [pc, #8]	; (82318 <XMEGANVM_SendNVMRegAddress+0x14>)
   8230e:	4798      	blx	r3
}
   82310:	bd08      	pop	{r3, pc}
   82312:	bf00      	nop
   82314:	20000844 	.word	0x20000844
   82318:	000822e5 	.word	0x000822e5

0008231c <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   8231c:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8231e:	4e07      	ldr	r6, [pc, #28]	; (8233c <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82320:	4d07      	ldr	r5, [pc, #28]	; (82340 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   82322:	4c08      	ldr	r4, [pc, #32]	; (82344 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   82324:	2080      	movs	r0, #128	; 0x80
   82326:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82328:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8232a:	6823      	ldr	r3, [r4, #0]
   8232c:	b123      	cbz	r3, 82338 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   8232e:	f010 0f02 	tst.w	r0, #2
   82332:	d0f7      	beq.n	82324 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   82334:	2001      	movs	r0, #1
   82336:	e000      	b.n	8233a <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   82338:	2000      	movs	r0, #0
		}
	}
}
   8233a:	bd70      	pop	{r4, r5, r6, pc}
   8233c:	00082b71 	.word	0x00082b71
   82340:	00082b9d 	.word	0x00082b9d
   82344:	20002684 	.word	0x20002684

00082348 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   82348:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8234a:	206b      	movs	r0, #107	; 0x6b
   8234c:	4b09      	ldr	r3, [pc, #36]	; (82374 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   8234e:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   82350:	200f      	movs	r0, #15
   82352:	4b09      	ldr	r3, [pc, #36]	; (82378 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   82354:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   82356:	4e07      	ldr	r6, [pc, #28]	; (82374 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82358:	4d08      	ldr	r5, [pc, #32]	; (8237c <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8235a:	4c09      	ldr	r4, [pc, #36]	; (82380 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8235c:	2020      	movs	r0, #32
   8235e:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82360:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   82362:	6823      	ldr	r3, [r4, #0]
   82364:	b123      	cbz	r3, 82370 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   82366:	f010 0f80 	tst.w	r0, #128	; 0x80
   8236a:	d1f7      	bne.n	8235c <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   8236c:	2001      	movs	r0, #1
   8236e:	e000      	b.n	82372 <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   82370:	2000      	movs	r0, #0
		}
	}
}
   82372:	bd70      	pop	{r4, r5, r6, pc}
   82374:	00082b71 	.word	0x00082b71
   82378:	00082305 	.word	0x00082305
   8237c:	00082b9d 	.word	0x00082b9d
   82380:	20002684 	.word	0x20002684

00082384 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   82384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82388:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8238a:	4b1a      	ldr	r3, [pc, #104]	; (823f4 <XMEGANVM_EnablePDI+0x70>)
   8238c:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8238e:	20c1      	movs	r0, #193	; 0xc1
   82390:	4c19      	ldr	r4, [pc, #100]	; (823f8 <XMEGANVM_EnablePDI+0x74>)
   82392:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   82394:	2059      	movs	r0, #89	; 0x59
   82396:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   82398:	20c2      	movs	r0, #194	; 0xc2
   8239a:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   8239c:	2002      	movs	r0, #2
   8239e:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   823a0:	20e0      	movs	r0, #224	; 0xe0
   823a2:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   823a4:	f10d 0407 	add.w	r4, sp, #7
   823a8:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   823aa:	f04f 0812 	mov.w	r8, #18
   823ae:	2789      	movs	r7, #137	; 0x89
   823b0:	4e11      	ldr	r6, [pc, #68]	; (823f8 <XMEGANVM_EnablePDI+0x74>)
   823b2:	f88d 8000 	strb.w	r8, [sp]
   823b6:	f88d 7001 	strb.w	r7, [sp, #1]
   823ba:	23ab      	movs	r3, #171	; 0xab
   823bc:	f88d 3002 	strb.w	r3, [sp, #2]
   823c0:	2345      	movs	r3, #69	; 0x45
   823c2:	f88d 3003 	strb.w	r3, [sp, #3]
   823c6:	23cd      	movs	r3, #205	; 0xcd
   823c8:	f88d 3004 	strb.w	r3, [sp, #4]
   823cc:	23d8      	movs	r3, #216	; 0xd8
   823ce:	f88d 3005 	strb.w	r3, [sp, #5]
   823d2:	2388      	movs	r3, #136	; 0x88
   823d4:	f88d 3006 	strb.w	r3, [sp, #6]
   823d8:	23ff      	movs	r3, #255	; 0xff
   823da:	f88d 3007 	strb.w	r3, [sp, #7]
   823de:	7820      	ldrb	r0, [r4, #0]
   823e0:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   823e2:	454c      	cmp	r4, r9
   823e4:	f104 34ff 	add.w	r4, r4, #4294967295
   823e8:	d1e3      	bne.n	823b2 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   823ea:	4b04      	ldr	r3, [pc, #16]	; (823fc <XMEGANVM_EnablePDI+0x78>)
   823ec:	4798      	blx	r3
}
   823ee:	b003      	add	sp, #12
   823f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   823f4:	00082c3d 	.word	0x00082c3d
   823f8:	00082b71 	.word	0x00082b71
   823fc:	0008231d 	.word	0x0008231d

00082400 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   82400:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   82402:	4b09      	ldr	r3, [pc, #36]	; (82428 <XMEGANVM_DisablePDI+0x28>)
   82404:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   82406:	4c09      	ldr	r4, [pc, #36]	; (8242c <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   82408:	4d09      	ldr	r5, [pc, #36]	; (82430 <XMEGANVM_DisablePDI+0x30>)
   8240a:	4e0a      	ldr	r6, [pc, #40]	; (82434 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8240c:	20c1      	movs	r0, #193	; 0xc1
   8240e:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   82410:	2000      	movs	r0, #0
   82412:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   82414:	2081      	movs	r0, #129	; 0x81
   82416:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   82418:	47a8      	blx	r5
   8241a:	b110      	cbz	r0, 82422 <XMEGANVM_DisablePDI+0x22>
   8241c:	6833      	ldr	r3, [r6, #0]
   8241e:	2b00      	cmp	r3, #0
   82420:	d1f4      	bne.n	8240c <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   82422:	4b05      	ldr	r3, [pc, #20]	; (82438 <XMEGANVM_DisablePDI+0x38>)
   82424:	4798      	blx	r3
}
   82426:	bd70      	pop	{r4, r5, r6, pc}
   82428:	0008231d 	.word	0x0008231d
   8242c:	00082b71 	.word	0x00082b71
   82430:	00082b9d 	.word	0x00082b9d
   82434:	20002684 	.word	0x20002684
   82438:	00082b15 	.word	0x00082b15

0008243c <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   8243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8243e:	4606      	mov	r6, r0
   82440:	460c      	mov	r4, r1
   82442:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82444:	4b1c      	ldr	r3, [pc, #112]	; (824b8 <XMEGANVM_ReadMemory+0x7c>)
   82446:	4798      	blx	r3
   82448:	4603      	mov	r3, r0
   8244a:	b908      	cbnz	r0, 82450 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   8244c:	4618      	mov	r0, r3
   8244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82450:	204c      	movs	r0, #76	; 0x4c
   82452:	4f1a      	ldr	r7, [pc, #104]	; (824bc <XMEGANVM_ReadMemory+0x80>)
   82454:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82456:	200a      	movs	r0, #10
   82458:	4b19      	ldr	r3, [pc, #100]	; (824c0 <XMEGANVM_ReadMemory+0x84>)
   8245a:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   8245c:	2043      	movs	r0, #67	; 0x43
   8245e:	47b8      	blx	r7
	if (ReadSize > 1)
   82460:	2d01      	cmp	r5, #1
   82462:	d919      	bls.n	82498 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82464:	206b      	movs	r0, #107	; 0x6b
   82466:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   82468:	4630      	mov	r0, r6
   8246a:	4b16      	ldr	r3, [pc, #88]	; (824c4 <XMEGANVM_ReadMemory+0x88>)
   8246c:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8246e:	20a0      	movs	r0, #160	; 0xa0
   82470:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   82472:	1e68      	subs	r0, r5, #1
   82474:	b2c0      	uxtb	r0, r0
   82476:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82478:	2024      	movs	r0, #36	; 0x24
   8247a:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   8247c:	3d01      	subs	r5, #1
   8247e:	b2ad      	uxth	r5, r5
   82480:	3501      	adds	r5, #1
   82482:	4425      	add	r5, r4
   82484:	4e10      	ldr	r6, [pc, #64]	; (824c8 <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   82486:	4f11      	ldr	r7, [pc, #68]	; (824cc <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   82488:	6833      	ldr	r3, [r6, #0]
   8248a:	b173      	cbz	r3, 824aa <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8248c:	47b8      	blx	r7
   8248e:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   82492:	42ac      	cmp	r4, r5
   82494:	d1f8      	bne.n	82488 <XMEGANVM_ReadMemory+0x4c>
   82496:	e008      	b.n	824aa <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82498:	200c      	movs	r0, #12
   8249a:	4b08      	ldr	r3, [pc, #32]	; (824bc <XMEGANVM_ReadMemory+0x80>)
   8249c:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   8249e:	4630      	mov	r0, r6
   824a0:	4b08      	ldr	r3, [pc, #32]	; (824c4 <XMEGANVM_ReadMemory+0x88>)
   824a2:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   824a4:	4b09      	ldr	r3, [pc, #36]	; (824cc <XMEGANVM_ReadMemory+0x90>)
   824a6:	4798      	blx	r3
   824a8:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   824aa:	4b07      	ldr	r3, [pc, #28]	; (824c8 <XMEGANVM_ReadMemory+0x8c>)
   824ac:	681b      	ldr	r3, [r3, #0]
   824ae:	3b00      	subs	r3, #0
   824b0:	bf18      	it	ne
   824b2:	2301      	movne	r3, #1
   824b4:	e7ca      	b.n	8244c <XMEGANVM_ReadMemory+0x10>
   824b6:	bf00      	nop
   824b8:	00082349 	.word	0x00082349
   824bc:	00082b71 	.word	0x00082b71
   824c0:	00082305 	.word	0x00082305
   824c4:	000822e5 	.word	0x000822e5
   824c8:	20002684 	.word	0x20002684
   824cc:	00082b9d 	.word	0x00082b9d

000824d0 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   824d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824d4:	4607      	mov	r7, r0
   824d6:	4688      	mov	r8, r1
   824d8:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   824da:	4b0b      	ldr	r3, [pc, #44]	; (82508 <XMEGANVM_WriteByteMemory+0x38>)
   824dc:	4798      	blx	r3
   824de:	4605      	mov	r5, r0
   824e0:	b910      	cbnz	r0, 824e8 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   824e2:	4628      	mov	r0, r5
   824e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824e8:	204c      	movs	r0, #76	; 0x4c
   824ea:	4c08      	ldr	r4, [pc, #32]	; (8250c <XMEGANVM_WriteByteMemory+0x3c>)
   824ec:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   824ee:	200a      	movs	r0, #10
   824f0:	4b07      	ldr	r3, [pc, #28]	; (82510 <XMEGANVM_WriteByteMemory+0x40>)
   824f2:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   824f4:	4638      	mov	r0, r7
   824f6:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   824f8:	204c      	movs	r0, #76	; 0x4c
   824fa:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   824fc:	4640      	mov	r0, r8
   824fe:	4b05      	ldr	r3, [pc, #20]	; (82514 <XMEGANVM_WriteByteMemory+0x44>)
   82500:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   82502:	4630      	mov	r0, r6
   82504:	47a0      	blx	r4
	return true;
   82506:	e7ec      	b.n	824e2 <XMEGANVM_WriteByteMemory+0x12>
   82508:	00082349 	.word	0x00082349
   8250c:	00082b71 	.word	0x00082b71
   82510:	00082305 	.word	0x00082305
   82514:	000822e5 	.word	0x000822e5

00082518 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   82518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8251c:	4681      	mov	r9, r0
   8251e:	4617      	mov	r7, r2
   82520:	461c      	mov	r4, r3
   82522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82524:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   82528:	f013 0f01 	tst.w	r3, #1
   8252c:	d108      	bne.n	82540 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   8252e:	b9f6      	cbnz	r6, 8256e <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   82530:	f014 0f02 	tst.w	r4, #2
   82534:	d13f      	bne.n	825b6 <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   82536:	f04f 0a01 	mov.w	sl, #1
}
   8253a:	4650      	mov	r0, sl
   8253c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82540:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82542:	4b27      	ldr	r3, [pc, #156]	; (825e0 <XMEGANVM_WritePageMemory+0xc8>)
   82544:	4798      	blx	r3
   82546:	4682      	mov	sl, r0
   82548:	2800      	cmp	r0, #0
   8254a:	d0f6      	beq.n	8253a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8254c:	204c      	movs	r0, #76	; 0x4c
   8254e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 825ec <XMEGANVM_WritePageMemory+0xd4>
   82552:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82554:	200a      	movs	r0, #10
   82556:	f8df b08c 	ldr.w	fp, [pc, #140]	; 825e4 <XMEGANVM_WritePageMemory+0xcc>
   8255a:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   8255c:	4640      	mov	r0, r8
   8255e:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82560:	204c      	movs	r0, #76	; 0x4c
   82562:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82564:	200b      	movs	r0, #11
   82566:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   82568:	2001      	movs	r0, #1
   8256a:	47d0      	blx	sl
   8256c:	e7df      	b.n	8252e <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8256e:	4b1c      	ldr	r3, [pc, #112]	; (825e0 <XMEGANVM_WritePageMemory+0xc8>)
   82570:	4798      	blx	r3
   82572:	4682      	mov	sl, r0
   82574:	2800      	cmp	r0, #0
   82576:	d0e0      	beq.n	8253a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82578:	204c      	movs	r0, #76	; 0x4c
   8257a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 825ec <XMEGANVM_WritePageMemory+0xd4>
   8257e:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82580:	200a      	movs	r0, #10
   82582:	4b18      	ldr	r3, [pc, #96]	; (825e4 <XMEGANVM_WritePageMemory+0xcc>)
   82584:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   82586:	4648      	mov	r0, r9
   82588:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8258a:	206b      	movs	r0, #107	; 0x6b
   8258c:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   8258e:	980a      	ldr	r0, [sp, #40]	; 0x28
   82590:	4b15      	ldr	r3, [pc, #84]	; (825e8 <XMEGANVM_WritePageMemory+0xd0>)
   82592:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82594:	20a0      	movs	r0, #160	; 0xa0
   82596:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   82598:	1e70      	subs	r0, r6, #1
   8259a:	b2c0      	uxtb	r0, r0
   8259c:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8259e:	2064      	movs	r0, #100	; 0x64
   825a0:	47c0      	blx	r8
		while (WriteSize--)
   825a2:	3e01      	subs	r6, #1
   825a4:	b2b6      	uxth	r6, r6
   825a6:	3601      	adds	r6, #1
   825a8:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   825aa:	f815 0b01 	ldrb.w	r0, [r5], #1
   825ae:	47c0      	blx	r8
		while (WriteSize--)
   825b0:	42b5      	cmp	r5, r6
   825b2:	d1fa      	bne.n	825aa <XMEGANVM_WritePageMemory+0x92>
   825b4:	e7bc      	b.n	82530 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825b6:	4b0a      	ldr	r3, [pc, #40]	; (825e0 <XMEGANVM_WritePageMemory+0xc8>)
   825b8:	4798      	blx	r3
   825ba:	4682      	mov	sl, r0
   825bc:	2800      	cmp	r0, #0
   825be:	d0bc      	beq.n	8253a <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825c0:	204c      	movs	r0, #76	; 0x4c
   825c2:	4c0a      	ldr	r4, [pc, #40]	; (825ec <XMEGANVM_WritePageMemory+0xd4>)
   825c4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825c6:	200a      	movs	r0, #10
   825c8:	4b06      	ldr	r3, [pc, #24]	; (825e4 <XMEGANVM_WritePageMemory+0xcc>)
   825ca:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   825cc:	4638      	mov	r0, r7
   825ce:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825d0:	204c      	movs	r0, #76	; 0x4c
   825d2:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   825d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   825d6:	4b04      	ldr	r3, [pc, #16]	; (825e8 <XMEGANVM_WritePageMemory+0xd0>)
   825d8:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   825da:	2000      	movs	r0, #0
   825dc:	47a0      	blx	r4
   825de:	e7ac      	b.n	8253a <XMEGANVM_WritePageMemory+0x22>
   825e0:	00082349 	.word	0x00082349
   825e4:	00082305 	.word	0x00082305
   825e8:	000822e5 	.word	0x000822e5
   825ec:	00082b71 	.word	0x00082b71

000825f0 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   825f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   825f2:	4604      	mov	r4, r0
   825f4:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825f6:	4b36      	ldr	r3, [pc, #216]	; (826d0 <XMEGANVM_EraseMemory+0xe0>)
   825f8:	4798      	blx	r3
   825fa:	4603      	mov	r3, r0
   825fc:	b1a8      	cbz	r0, 8262a <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   825fe:	2c40      	cmp	r4, #64	; 0x40
   82600:	d015      	beq.n	8262e <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   82602:	2c30      	cmp	r4, #48	; 0x30
   82604:	d022      	beq.n	8264c <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82606:	204c      	movs	r0, #76	; 0x4c
   82608:	4e32      	ldr	r6, [pc, #200]	; (826d4 <XMEGANVM_EraseMemory+0xe4>)
   8260a:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8260c:	200a      	movs	r0, #10
   8260e:	4b32      	ldr	r3, [pc, #200]	; (826d8 <XMEGANVM_EraseMemory+0xe8>)
   82610:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   82612:	4620      	mov	r0, r4
   82614:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82616:	204c      	movs	r0, #76	; 0x4c
   82618:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   8261a:	4628      	mov	r0, r5
   8261c:	4b2f      	ldr	r3, [pc, #188]	; (826dc <XMEGANVM_EraseMemory+0xec>)
   8261e:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   82620:	2000      	movs	r0, #0
   82622:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   82624:	4b2e      	ldr	r3, [pc, #184]	; (826e0 <XMEGANVM_EraseMemory+0xf0>)
   82626:	4798      	blx	r3
   82628:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   8262a:	4618      	mov	r0, r3
   8262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8262e:	204c      	movs	r0, #76	; 0x4c
   82630:	4c28      	ldr	r4, [pc, #160]	; (826d4 <XMEGANVM_EraseMemory+0xe4>)
   82632:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82634:	200a      	movs	r0, #10
   82636:	4d28      	ldr	r5, [pc, #160]	; (826d8 <XMEGANVM_EraseMemory+0xe8>)
   82638:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   8263a:	2040      	movs	r0, #64	; 0x40
   8263c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8263e:	204c      	movs	r0, #76	; 0x4c
   82640:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82642:	200b      	movs	r0, #11
   82644:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   82646:	2001      	movs	r0, #1
   82648:	47a0      	blx	r4
   8264a:	e7eb      	b.n	82624 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8264c:	204c      	movs	r0, #76	; 0x4c
   8264e:	4c21      	ldr	r4, [pc, #132]	; (826d4 <XMEGANVM_EraseMemory+0xe4>)
   82650:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82652:	200a      	movs	r0, #10
   82654:	4e20      	ldr	r6, [pc, #128]	; (826d8 <XMEGANVM_EraseMemory+0xe8>)
   82656:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   82658:	2036      	movs	r0, #54	; 0x36
   8265a:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8265c:	204c      	movs	r0, #76	; 0x4c
   8265e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82660:	200b      	movs	r0, #11
   82662:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   82664:	2001      	movs	r0, #1
   82666:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82668:	4b19      	ldr	r3, [pc, #100]	; (826d0 <XMEGANVM_EraseMemory+0xe0>)
   8266a:	4798      	blx	r3
   8266c:	4603      	mov	r3, r0
   8266e:	2800      	cmp	r0, #0
   82670:	d0db      	beq.n	8262a <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82672:	204c      	movs	r0, #76	; 0x4c
   82674:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82676:	200a      	movs	r0, #10
   82678:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   8267a:	2033      	movs	r0, #51	; 0x33
   8267c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8267e:	206b      	movs	r0, #107	; 0x6b
   82680:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   82682:	4628      	mov	r0, r5
   82684:	4b15      	ldr	r3, [pc, #84]	; (826dc <XMEGANVM_EraseMemory+0xec>)
   82686:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82688:	20a0      	movs	r0, #160	; 0xa0
   8268a:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   8268c:	4d15      	ldr	r5, [pc, #84]	; (826e4 <XMEGANVM_EraseMemory+0xf4>)
   8268e:	7828      	ldrb	r0, [r5, #0]
   82690:	3801      	subs	r0, #1
   82692:	b2c0      	uxtb	r0, r0
   82694:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82696:	2064      	movs	r0, #100	; 0x64
   82698:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   8269a:	882b      	ldrh	r3, [r5, #0]
   8269c:	b14b      	cbz	r3, 826b2 <XMEGANVM_EraseMemory+0xc2>
   8269e:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   826a0:	4627      	mov	r7, r4
   826a2:	4e0c      	ldr	r6, [pc, #48]	; (826d4 <XMEGANVM_EraseMemory+0xe4>)
   826a4:	4638      	mov	r0, r7
   826a6:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   826a8:	1c63      	adds	r3, r4, #1
   826aa:	b2dc      	uxtb	r4, r3
   826ac:	882a      	ldrh	r2, [r5, #0]
   826ae:	42a2      	cmp	r2, r4
   826b0:	d8f8      	bhi.n	826a4 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826b2:	204c      	movs	r0, #76	; 0x4c
   826b4:	4c07      	ldr	r4, [pc, #28]	; (826d4 <XMEGANVM_EraseMemory+0xe4>)
   826b6:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   826b8:	200a      	movs	r0, #10
   826ba:	4d07      	ldr	r5, [pc, #28]	; (826d8 <XMEGANVM_EraseMemory+0xe8>)
   826bc:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   826be:	2030      	movs	r0, #48	; 0x30
   826c0:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826c2:	204c      	movs	r0, #76	; 0x4c
   826c4:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   826c6:	200b      	movs	r0, #11
   826c8:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   826ca:	2001      	movs	r0, #1
   826cc:	47a0      	blx	r4
   826ce:	e7a9      	b.n	82624 <XMEGANVM_EraseMemory+0x34>
   826d0:	00082349 	.word	0x00082349
   826d4:	00082b71 	.word	0x00082b71
   826d8:	00082305 	.word	0x00082305
   826dc:	000822e5 	.word	0x000822e5
   826e0:	0008231d 	.word	0x0008231d
   826e4:	20000842 	.word	0x20000842

000826e8 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   826e8:	b570      	push	{r4, r5, r6, lr}
   826ea:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   826ec:	4b8f      	ldr	r3, [pc, #572]	; (8292c <XPROGProtocol_Command+0x244>)
   826ee:	8859      	ldrh	r1, [r3, #2]
   826f0:	b2cb      	uxtb	r3, r1
   826f2:	4a8f      	ldr	r2, [pc, #572]	; (82930 <XPROGProtocol_Command+0x248>)
   826f4:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   826f6:	3b01      	subs	r3, #1
   826f8:	2b21      	cmp	r3, #33	; 0x21
   826fa:	d82b      	bhi.n	82754 <XPROGProtocol_Command+0x6c>
   826fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   82700:	002f0022 	.word	0x002f0022
   82704:	00730037 	.word	0x00730037
   82708:	00e600c2 	.word	0x00e600c2
   8270c:	002a00e9 	.word	0x002a00e9
   82710:	002a002a 	.word	0x002a002a
   82714:	002a002a 	.word	0x002a002a
   82718:	002a002a 	.word	0x002a002a
   8271c:	002a002a 	.word	0x002a002a
   82720:	002a002a 	.word	0x002a002a
   82724:	002a002a 	.word	0x002a002a
   82728:	002a002a 	.word	0x002a002a
   8272c:	002a002a 	.word	0x002a002a
   82730:	002a002a 	.word	0x002a002a
   82734:	002a002a 	.word	0x002a002a
   82738:	002a002a 	.word	0x002a002a
   8273c:	017c002a 	.word	0x017c002a
   82740:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   82744:	4b7b      	ldr	r3, [pc, #492]	; (82934 <XPROGProtocol_Command+0x24c>)
   82746:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   82748:	4b7b      	ldr	r3, [pc, #492]	; (82938 <XPROGProtocol_Command+0x250>)
   8274a:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   8274c:	f080 0001 	eor.w	r0, r0, #1
   82750:	4b7a      	ldr	r3, [pc, #488]	; (8293c <XPROGProtocol_Command+0x254>)
   82752:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   82754:	4b7a      	ldr	r3, [pc, #488]	; (82940 <XPROGProtocol_Command+0x258>)
   82756:	4798      	blx	r3
	return false;
   82758:	2000      	movs	r0, #0
}
   8275a:	b004      	add	sp, #16
   8275c:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   8275e:	4b75      	ldr	r3, [pc, #468]	; (82934 <XPROGProtocol_Command+0x24c>)
   82760:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   82762:	4b78      	ldr	r3, [pc, #480]	; (82944 <XPROGProtocol_Command+0x25c>)
   82764:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   82766:	4b75      	ldr	r3, [pc, #468]	; (8293c <XPROGProtocol_Command+0x254>)
   82768:	2200      	movs	r2, #0
   8276a:	701a      	strb	r2, [r3, #0]
}
   8276c:	e7f2      	b.n	82754 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8276e:	4b71      	ldr	r3, [pc, #452]	; (82934 <XPROGProtocol_Command+0x24c>)
   82770:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   82772:	4b72      	ldr	r3, [pc, #456]	; (8293c <XPROGProtocol_Command+0x254>)
   82774:	2200      	movs	r2, #0
   82776:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   82778:	4b6c      	ldr	r3, [pc, #432]	; (8292c <XPROGProtocol_Command+0x244>)
   8277a:	899b      	ldrh	r3, [r3, #12]
   8277c:	2b04      	cmp	r3, #4
   8277e:	d915      	bls.n	827ac <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   82780:	4b6a      	ldr	r3, [pc, #424]	; (8292c <XPROGProtocol_Command+0x244>)
   82782:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82784:	791a      	ldrb	r2, [r3, #4]
   82786:	78d9      	ldrb	r1, [r3, #3]
   82788:	0409      	lsls	r1, r1, #16
   8278a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   8278e:	785a      	ldrb	r2, [r3, #1]
   82790:	4311      	orrs	r1, r2
   82792:	789a      	ldrb	r2, [r3, #2]
   82794:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   82798:	781b      	ldrb	r3, [r3, #0]
   8279a:	3b01      	subs	r3, #1
   8279c:	2b07      	cmp	r3, #7
   8279e:	d81e      	bhi.n	827de <XPROGProtocol_Command+0xf6>
   827a0:	e8df f003 	tbb	[pc, r3]
   827a4:	1311081f 	.word	0x1311081f
   827a8:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   827ac:	4b63      	ldr	r3, [pc, #396]	; (8293c <XPROGProtocol_Command+0x254>)
   827ae:	2201      	movs	r2, #1
   827b0:	701a      	strb	r2, [r3, #0]
		return;
   827b2:	e7cf      	b.n	82754 <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   827b4:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   827b6:	4b64      	ldr	r3, [pc, #400]	; (82948 <XPROGProtocol_Command+0x260>)
   827b8:	4798      	blx	r3
   827ba:	2800      	cmp	r0, #0
   827bc:	d1ca      	bne.n	82754 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   827be:	4b5f      	ldr	r3, [pc, #380]	; (8293c <XPROGProtocol_Command+0x254>)
   827c0:	2203      	movs	r2, #3
   827c2:	701a      	strb	r2, [r3, #0]
   827c4:	e7c6      	b.n	82754 <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   827c6:	2068      	movs	r0, #104	; 0x68
		break;
   827c8:	e7f5      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   827ca:	2030      	movs	r0, #48	; 0x30
		break;
   827cc:	e7f3      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   827ce:	2022      	movs	r0, #34	; 0x22
		break;
   827d0:	e7f1      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   827d2:	202a      	movs	r0, #42	; 0x2a
		break;
   827d4:	e7ef      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   827d6:	2032      	movs	r0, #50	; 0x32
		break;
   827d8:	e7ed      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   827da:	2018      	movs	r0, #24
		break;
   827dc:	e7eb      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   827de:	2000      	movs	r0, #0
		break;
   827e0:	e7e9      	b.n	827b6 <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   827e2:	2040      	movs	r0, #64	; 0x40
   827e4:	e7e7      	b.n	827b6 <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   827e6:	4b53      	ldr	r3, [pc, #332]	; (82934 <XPROGProtocol_Command+0x24c>)
   827e8:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   827ea:	4b54      	ldr	r3, [pc, #336]	; (8293c <XPROGProtocol_Command+0x254>)
   827ec:	2200      	movs	r2, #0
   827ee:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   827f0:	4b4e      	ldr	r3, [pc, #312]	; (8292c <XPROGProtocol_Command+0x244>)
   827f2:	88db      	ldrh	r3, [r3, #6]
   827f4:	2b07      	cmp	r3, #7
   827f6:	d802      	bhi.n	827fe <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   827f8:	4b50      	ldr	r3, [pc, #320]	; (8293c <XPROGProtocol_Command+0x254>)
   827fa:	2201      	movs	r2, #1
   827fc:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   827fe:	4b4b      	ldr	r3, [pc, #300]	; (8292c <XPROGProtocol_Command+0x244>)
   82800:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82802:	795a      	ldrb	r2, [r3, #5]
   82804:	7919      	ldrb	r1, [r3, #4]
   82806:	0409      	lsls	r1, r1, #16
   82808:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   8280c:	789a      	ldrb	r2, [r3, #2]
   8280e:	4311      	orrs	r1, r2
   82810:	78da      	ldrb	r2, [r3, #3]
   82812:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   82816:	781a      	ldrb	r2, [r3, #0]
   82818:	3a01      	subs	r2, #1
   8281a:	2a05      	cmp	r2, #5
   8281c:	d82e      	bhi.n	8287c <XPROGProtocol_Command+0x194>
   8281e:	e8df f012 	tbh	[pc, r2, lsl #1]
   82822:	00fd      	.short	0x00fd
   82824:	0101000e 	.word	0x0101000e
   82828:	00060105 	.word	0x00060105
   8282c:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8282e:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   82830:	4b46      	ldr	r3, [pc, #280]	; (8294c <XPROGProtocol_Command+0x264>)
   82832:	781a      	ldrb	r2, [r3, #0]
   82834:	4b46      	ldr	r3, [pc, #280]	; (82950 <XPROGProtocol_Command+0x268>)
   82836:	4798      	blx	r3
   82838:	2800      	cmp	r0, #0
   8283a:	d18b      	bne.n	82754 <XPROGProtocol_Command+0x6c>
   8283c:	e016      	b.n	8286c <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8283e:	2526      	movs	r5, #38	; 0x26
   82840:	2023      	movs	r0, #35	; 0x23
   82842:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   82844:	79de      	ldrb	r6, [r3, #7]
   82846:	799c      	ldrb	r4, [r3, #6]
   82848:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   8284c:	785b      	ldrb	r3, [r3, #1]
   8284e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   82852:	bf28      	it	cs
   82854:	f44f 7480 	movcs.w	r4, #256	; 0x100
   82858:	9402      	str	r4, [sp, #8]
   8285a:	4c3c      	ldr	r4, [pc, #240]	; (8294c <XPROGProtocol_Command+0x264>)
   8285c:	9401      	str	r4, [sp, #4]
   8285e:	9100      	str	r1, [sp, #0]
   82860:	4629      	mov	r1, r5
   82862:	4c3c      	ldr	r4, [pc, #240]	; (82954 <XPROGProtocol_Command+0x26c>)
   82864:	47a0      	blx	r4
   82866:	2800      	cmp	r0, #0
   82868:	f47f af74 	bne.w	82754 <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   8286c:	4b33      	ldr	r3, [pc, #204]	; (8293c <XPROGProtocol_Command+0x254>)
   8286e:	2203      	movs	r2, #3
   82870:	701a      	strb	r2, [r3, #0]
   82872:	e76f      	b.n	82754 <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82874:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82876:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   82878:	221a      	movs	r2, #26
		break;
   8287a:	e7e3      	b.n	82844 <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   8287c:	222e      	movs	r2, #46	; 0x2e
   8287e:	2526      	movs	r5, #38	; 0x26
   82880:	2023      	movs	r0, #35	; 0x23
   82882:	e7df      	b.n	82844 <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   82884:	4b2b      	ldr	r3, [pc, #172]	; (82934 <XPROGProtocol_Command+0x24c>)
   82886:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   82888:	4b2c      	ldr	r3, [pc, #176]	; (8293c <XPROGProtocol_Command+0x254>)
   8288a:	2200      	movs	r2, #0
   8288c:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8288e:	4b27      	ldr	r3, [pc, #156]	; (8292c <XPROGProtocol_Command+0x244>)
   82890:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   82892:	798b      	ldrb	r3, [r1, #6]
   82894:	794a      	ldrb	r2, [r1, #5]
   82896:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8289a:	7908      	ldrb	r0, [r1, #4]
   8289c:	78cb      	ldrb	r3, [r1, #3]
   8289e:	041b      	lsls	r3, r3, #16
   828a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   828a4:	7848      	ldrb	r0, [r1, #1]
   828a6:	4303      	orrs	r3, r0
   828a8:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   828aa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   828ae:	bf28      	it	cs
   828b0:	f44f 7280 	movcs.w	r2, #256	; 0x100
   828b4:	4925      	ldr	r1, [pc, #148]	; (8294c <XPROGProtocol_Command+0x264>)
   828b6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   828ba:	4b27      	ldr	r3, [pc, #156]	; (82958 <XPROGProtocol_Command+0x270>)
   828bc:	4798      	blx	r3
   828be:	2800      	cmp	r0, #0
   828c0:	f47f af48 	bne.w	82754 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   828c4:	4b1d      	ldr	r3, [pc, #116]	; (8293c <XPROGProtocol_Command+0x254>)
   828c6:	2203      	movs	r2, #3
   828c8:	701a      	strb	r2, [r3, #0]
   828ca:	e743      	b.n	82754 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   828cc:	4b19      	ldr	r3, [pc, #100]	; (82934 <XPROGProtocol_Command+0x24c>)
   828ce:	4798      	blx	r3
			break;
   828d0:	e740      	b.n	82754 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   828d2:	4b18      	ldr	r3, [pc, #96]	; (82934 <XPROGProtocol_Command+0x24c>)
   828d4:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   828d6:	4b19      	ldr	r3, [pc, #100]	; (8293c <XPROGProtocol_Command+0x254>)
   828d8:	2200      	movs	r2, #0
   828da:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   828dc:	4b13      	ldr	r3, [pc, #76]	; (8292c <XPROGProtocol_Command+0x244>)
   828de:	8999      	ldrh	r1, [r3, #12]
   828e0:	2901      	cmp	r1, #1
   828e2:	d90b      	bls.n	828fc <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   828e4:	4b11      	ldr	r3, [pc, #68]	; (8292c <XPROGProtocol_Command+0x244>)
   828e6:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   828e8:	7813      	ldrb	r3, [r2, #0]
   828ea:	3b01      	subs	r3, #1
   828ec:	2b07      	cmp	r3, #7
   828ee:	d85f      	bhi.n	829b0 <XPROGProtocol_Command+0x2c8>
   828f0:	e8df f003 	tbb	[pc, r3]
   828f4:	47433608 	.word	0x47433608
   828f8:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   828fc:	4b0f      	ldr	r3, [pc, #60]	; (8293c <XPROGProtocol_Command+0x254>)
   828fe:	2201      	movs	r2, #1
   82900:	701a      	strb	r2, [r3, #0]
		return;
   82902:	e727      	b.n	82754 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   82904:	2904      	cmp	r1, #4
   82906:	d90c      	bls.n	82922 <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82908:	7911      	ldrb	r1, [r2, #4]
   8290a:	78d3      	ldrb	r3, [r2, #3]
   8290c:	041b      	lsls	r3, r3, #16
   8290e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82912:	7851      	ldrb	r1, [r2, #1]
   82914:	430b      	orrs	r3, r1
   82916:	7892      	ldrb	r2, [r2, #2]
   82918:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8291c:	4a0f      	ldr	r2, [pc, #60]	; (8295c <XPROGProtocol_Command+0x274>)
   8291e:	6013      	str	r3, [r2, #0]
			break;
   82920:	e718      	b.n	82754 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82922:	4b06      	ldr	r3, [pc, #24]	; (8293c <XPROGProtocol_Command+0x254>)
   82924:	2201      	movs	r2, #1
   82926:	701a      	strb	r2, [r3, #0]
				return;
   82928:	e714      	b.n	82754 <XPROGProtocol_Command+0x6c>
   8292a:	bf00      	nop
   8292c:	2000269c 	.word	0x2000269c
   82930:	20001f6c 	.word	0x20001f6c
   82934:	00082d41 	.word	0x00082d41
   82938:	00082385 	.word	0x00082385
   8293c:	20002680 	.word	0x20002680
   82940:	00082d89 	.word	0x00082d89
   82944:	00082401 	.word	0x00082401
   82948:	000825f1 	.word	0x000825f1
   8294c:	20001f70 	.word	0x20001f70
   82950:	000824d1 	.word	0x000824d1
   82954:	00082519 	.word	0x00082519
   82958:	0008243d 	.word	0x0008243d
   8295c:	20000844 	.word	0x20000844
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   82960:	2902      	cmp	r1, #2
   82962:	d906      	bls.n	82972 <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   82964:	7891      	ldrb	r1, [r2, #2]
   82966:	7853      	ldrb	r3, [r2, #1]
   82968:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   8296c:	4a30      	ldr	r2, [pc, #192]	; (82a30 <XPROGProtocol_Command+0x348>)
   8296e:	8013      	strh	r3, [r2, #0]
			break;
   82970:	e6f0      	b.n	82754 <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82972:	4b30      	ldr	r3, [pc, #192]	; (82a34 <XPROGProtocol_Command+0x34c>)
   82974:	2201      	movs	r2, #1
   82976:	701a      	strb	r2, [r3, #0]
				return;
   82978:	e6ec      	b.n	82754 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   8297a:	7852      	ldrb	r2, [r2, #1]
   8297c:	4b2e      	ldr	r3, [pc, #184]	; (82a38 <XPROGProtocol_Command+0x350>)
   8297e:	701a      	strb	r2, [r3, #0]
			break;
   82980:	e6e8      	b.n	82754 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   82982:	7852      	ldrb	r2, [r2, #1]
   82984:	4b2d      	ldr	r3, [pc, #180]	; (82a3c <XPROGProtocol_Command+0x354>)
   82986:	701a      	strb	r2, [r3, #0]
			break;
   82988:	e6e4      	b.n	82754 <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   8298a:	2904      	cmp	r1, #4
   8298c:	d803      	bhi.n	82996 <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   8298e:	4b29      	ldr	r3, [pc, #164]	; (82a34 <XPROGProtocol_Command+0x34c>)
   82990:	2201      	movs	r2, #1
   82992:	701a      	strb	r2, [r3, #0]
				return;
   82994:	e6de      	b.n	82754 <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   82996:	7911      	ldrb	r1, [r2, #4]
   82998:	78d3      	ldrb	r3, [r2, #3]
   8299a:	041b      	lsls	r3, r3, #16
   8299c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   829a0:	7851      	ldrb	r1, [r2, #1]
   829a2:	430b      	orrs	r3, r1
   829a4:	7890      	ldrb	r0, [r2, #2]
   829a6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   829aa:	4b25      	ldr	r3, [pc, #148]	; (82a40 <XPROGProtocol_Command+0x358>)
   829ac:	4798      	blx	r3
			break;
   829ae:	e6d1      	b.n	82754 <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   829b0:	4b20      	ldr	r3, [pc, #128]	; (82a34 <XPROGProtocol_Command+0x34c>)
   829b2:	2201      	movs	r2, #1
   829b4:	701a      	strb	r2, [r3, #0]
			break;
   829b6:	e6cd      	b.n	82754 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   829b8:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   829ba:	4b22      	ldr	r3, [pc, #136]	; (82a44 <XPROGProtocol_Command+0x35c>)
   829bc:	88db      	ldrh	r3, [r3, #6]
   829be:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   829c2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   829c6:	dc27      	bgt.n	82a18 <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   829c8:	491e      	ldr	r1, [pc, #120]	; (82a44 <XPROGProtocol_Command+0x35c>)
   829ca:	4a1f      	ldr	r2, [pc, #124]	; (82a48 <XPROGProtocol_Command+0x360>)
   829cc:	4402      	add	r2, r0
   829ce:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   829d0:	818b      	strh	r3, [r1, #12]
			return true;
   829d2:	2001      	movs	r0, #1
   829d4:	e6c1      	b.n	8275a <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   829d6:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   829d8:	4b1a      	ldr	r3, [pc, #104]	; (82a44 <XPROGProtocol_Command+0x35c>)
   829da:	88da      	ldrh	r2, [r3, #6]
   829dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   829e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   829e4:	dd01      	ble.n	829ea <XPROGProtocol_Command+0x302>
				return false;
   829e6:	2000      	movs	r0, #0
   829e8:	e6b7      	b.n	8275a <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   829ea:	6899      	ldr	r1, [r3, #8]
   829ec:	4b16      	ldr	r3, [pc, #88]	; (82a48 <XPROGProtocol_Command+0x360>)
   829ee:	4418      	add	r0, r3
   829f0:	4b16      	ldr	r3, [pc, #88]	; (82a4c <XPROGProtocol_Command+0x364>)
   829f2:	4798      	blx	r3
			return true;
   829f4:	2001      	movs	r0, #1
   829f6:	e6b0      	b.n	8275a <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   829f8:	4a15      	ldr	r2, [pc, #84]	; (82a50 <XPROGProtocol_Command+0x368>)
   829fa:	4b0e      	ldr	r3, [pc, #56]	; (82a34 <XPROGProtocol_Command+0x34c>)
   829fc:	781b      	ldrb	r3, [r3, #0]
   829fe:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   82a00:	4b14      	ldr	r3, [pc, #80]	; (82a54 <XPROGProtocol_Command+0x36c>)
   82a02:	681b      	ldr	r3, [r3, #0]
   82a04:	fab3 f383 	clz	r3, r3
   82a08:	095b      	lsrs	r3, r3, #5
   82a0a:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   82a0c:	4b0d      	ldr	r3, [pc, #52]	; (82a44 <XPROGProtocol_Command+0x35c>)
   82a0e:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   82a10:	2203      	movs	r2, #3
   82a12:	819a      	strh	r2, [r3, #12]
			return true;
   82a14:	2001      	movs	r0, #1
   82a16:	e6a0      	b.n	8275a <XPROGProtocol_Command+0x72>
				return false;
   82a18:	2000      	movs	r0, #0
   82a1a:	e69e      	b.n	8275a <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82a1c:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82a1e:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   82a20:	2224      	movs	r2, #36	; 0x24
   82a22:	e70f      	b.n	82844 <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   82a24:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   82a26:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   82a28:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82a2a:	e70b      	b.n	82844 <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   82a2c:	204c      	movs	r0, #76	; 0x4c
   82a2e:	e6ff      	b.n	82830 <XPROGProtocol_Command+0x148>
   82a30:	20000842 	.word	0x20000842
   82a34:	20002680 	.word	0x20002680
   82a38:	20000848 	.word	0x20000848
   82a3c:	20000849 	.word	0x20000849
   82a40:	00082cd1 	.word	0x00082cd1
   82a44:	2000269c 	.word	0x2000269c
   82a48:	20001f70 	.word	0x20001f70
   82a4c:	00085f01 	.word	0x00085f01
   82a50:	20001f6c 	.word	0x20001f6c
   82a54:	20002684 	.word	0x20002684

00082a58 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   82a58:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   82a5a:	4d0b      	ldr	r5, [pc, #44]	; (82a88 <XPROGTarget_SetRxMode+0x30>)
   82a5c:	4c0b      	ldr	r4, [pc, #44]	; (82a8c <XPROGTarget_SetRxMode+0x34>)
   82a5e:	4628      	mov	r0, r5
   82a60:	47a0      	blx	r4
   82a62:	2800      	cmp	r0, #0
   82a64:	d0fb      	beq.n	82a5e <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   82a66:	4c08      	ldr	r4, [pc, #32]	; (82a88 <XPROGTarget_SetRxMode+0x30>)
   82a68:	4620      	mov	r0, r4
   82a6a:	4b09      	ldr	r3, [pc, #36]	; (82a90 <XPROGTarget_SetRxMode+0x38>)
   82a6c:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   82a6e:	4620      	mov	r0, r4
   82a70:	4b08      	ldr	r3, [pc, #32]	; (82a94 <XPROGTarget_SetRxMode+0x3c>)
   82a72:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82a74:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82a78:	2014      	movs	r0, #20
   82a7a:	4b07      	ldr	r3, [pc, #28]	; (82a98 <XPROGTarget_SetRxMode+0x40>)
   82a7c:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   82a7e:	4b07      	ldr	r3, [pc, #28]	; (82a9c <XPROGTarget_SetRxMode+0x44>)
   82a80:	2200      	movs	r2, #0
   82a82:	701a      	strb	r2, [r3, #0]
}
   82a84:	bd38      	pop	{r3, r4, r5, pc}
   82a86:	bf00      	nop
   82a88:	40094000 	.word	0x40094000
   82a8c:	000855c9 	.word	0x000855c9
   82a90:	000855a7 	.word	0x000855a7
   82a94:	000855ad 	.word	0x000855ad
   82a98:	00083ba5 	.word	0x00083ba5
   82a9c:	20002070 	.word	0x20002070

00082aa0 <XPROGTarget_SetTxMode>:
{
   82aa0:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82aa2:	2518      	movs	r5, #24
   82aa4:	4c14      	ldr	r4, [pc, #80]	; (82af8 <XPROGTarget_SetTxMode+0x58>)
   82aa6:	4e15      	ldr	r6, [pc, #84]	; (82afc <XPROGTarget_SetTxMode+0x5c>)
   82aa8:	4628      	mov	r0, r5
   82aaa:	47a0      	blx	r4
   82aac:	b110      	cbz	r0, 82ab4 <XPROGTarget_SetTxMode+0x14>
   82aae:	6833      	ldr	r3, [r6, #0]
   82ab0:	2b00      	cmp	r3, #0
   82ab2:	d1f9      	bne.n	82aa8 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ab4:	2518      	movs	r5, #24
   82ab6:	4c10      	ldr	r4, [pc, #64]	; (82af8 <XPROGTarget_SetTxMode+0x58>)
   82ab8:	4e10      	ldr	r6, [pc, #64]	; (82afc <XPROGTarget_SetTxMode+0x5c>)
   82aba:	4628      	mov	r0, r5
   82abc:	47a0      	blx	r4
   82abe:	b910      	cbnz	r0, 82ac6 <XPROGTarget_SetTxMode+0x26>
   82ac0:	6833      	ldr	r3, [r6, #0]
   82ac2:	2b00      	cmp	r3, #0
   82ac4:	d1f9      	bne.n	82aba <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ac6:	2518      	movs	r5, #24
   82ac8:	4c0b      	ldr	r4, [pc, #44]	; (82af8 <XPROGTarget_SetTxMode+0x58>)
   82aca:	4e0c      	ldr	r6, [pc, #48]	; (82afc <XPROGTarget_SetTxMode+0x5c>)
   82acc:	4628      	mov	r0, r5
   82ace:	47a0      	blx	r4
   82ad0:	b110      	cbz	r0, 82ad8 <XPROGTarget_SetTxMode+0x38>
   82ad2:	6833      	ldr	r3, [r6, #0]
   82ad4:	2b00      	cmp	r3, #0
   82ad6:	d1f9      	bne.n	82acc <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   82ad8:	4c09      	ldr	r4, [pc, #36]	; (82b00 <XPROGTarget_SetTxMode+0x60>)
   82ada:	4620      	mov	r0, r4
   82adc:	4b09      	ldr	r3, [pc, #36]	; (82b04 <XPROGTarget_SetTxMode+0x64>)
   82ade:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   82ae0:	4620      	mov	r0, r4
   82ae2:	4b09      	ldr	r3, [pc, #36]	; (82b08 <XPROGTarget_SetTxMode+0x68>)
   82ae4:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   82ae6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82aea:	2014      	movs	r0, #20
   82aec:	4b07      	ldr	r3, [pc, #28]	; (82b0c <XPROGTarget_SetTxMode+0x6c>)
   82aee:	4798      	blx	r3
	IsSending = true;
   82af0:	4b07      	ldr	r3, [pc, #28]	; (82b10 <XPROGTarget_SetTxMode+0x70>)
   82af2:	2201      	movs	r2, #1
   82af4:	701a      	strb	r2, [r3, #0]
}
   82af6:	bd70      	pop	{r4, r5, r6, pc}
   82af8:	00083b55 	.word	0x00083b55
   82afc:	20002684 	.word	0x20002684
   82b00:	40094000 	.word	0x40094000
   82b04:	000855b3 	.word	0x000855b3
   82b08:	000855a1 	.word	0x000855a1
   82b0c:	00083ba5 	.word	0x00083ba5
   82b10:	20002070 	.word	0x20002070

00082b14 <XPROGTarget_DisableTargetPDI>:
{
   82b14:	b510      	push	{r4, lr}
	if (IsSending)
   82b16:	4b0f      	ldr	r3, [pc, #60]	; (82b54 <XPROGTarget_DisableTargetPDI+0x40>)
   82b18:	781b      	ldrb	r3, [r3, #0]
   82b1a:	b9bb      	cbnz	r3, 82b4c <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   82b1c:	4c0e      	ldr	r4, [pc, #56]	; (82b58 <XPROGTarget_DisableTargetPDI+0x44>)
   82b1e:	4620      	mov	r0, r4
   82b20:	4b0e      	ldr	r3, [pc, #56]	; (82b5c <XPROGTarget_DisableTargetPDI+0x48>)
   82b22:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   82b24:	4620      	mov	r0, r4
   82b26:	4b0e      	ldr	r3, [pc, #56]	; (82b60 <XPROGTarget_DisableTargetPDI+0x4c>)
   82b28:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   82b2a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b2e:	2018      	movs	r0, #24
   82b30:	4c0c      	ldr	r4, [pc, #48]	; (82b64 <XPROGTarget_DisableTargetPDI+0x50>)
   82b32:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82b34:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b38:	2015      	movs	r0, #21
   82b3a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82b3c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b40:	2014      	movs	r0, #20
   82b42:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   82b44:	200e      	movs	r0, #14
   82b46:	4b08      	ldr	r3, [pc, #32]	; (82b68 <XPROGTarget_DisableTargetPDI+0x54>)
   82b48:	4798      	blx	r3
}
   82b4a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   82b4c:	4b07      	ldr	r3, [pc, #28]	; (82b6c <XPROGTarget_DisableTargetPDI+0x58>)
   82b4e:	4798      	blx	r3
   82b50:	e7e4      	b.n	82b1c <XPROGTarget_DisableTargetPDI+0x8>
   82b52:	bf00      	nop
   82b54:	20002070 	.word	0x20002070
   82b58:	40094000 	.word	0x40094000
   82b5c:	000855b3 	.word	0x000855b3
   82b60:	000855a7 	.word	0x000855a7
   82b64:	00083ba5 	.word	0x00083ba5
   82b68:	00083f0d 	.word	0x00083f0d
   82b6c:	00082a59 	.word	0x00082a59

00082b70 <XPROGTarget_SendByte>:
{
   82b70:	b510      	push	{r4, lr}
   82b72:	4604      	mov	r4, r0
	if (!(IsSending))
   82b74:	4b05      	ldr	r3, [pc, #20]	; (82b8c <XPROGTarget_SendByte+0x1c>)
   82b76:	781b      	ldrb	r3, [r3, #0]
   82b78:	b123      	cbz	r3, 82b84 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   82b7a:	4621      	mov	r1, r4
   82b7c:	4804      	ldr	r0, [pc, #16]	; (82b90 <XPROGTarget_SendByte+0x20>)
   82b7e:	4b05      	ldr	r3, [pc, #20]	; (82b94 <XPROGTarget_SendByte+0x24>)
   82b80:	4798      	blx	r3
}
   82b82:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   82b84:	4b04      	ldr	r3, [pc, #16]	; (82b98 <XPROGTarget_SendByte+0x28>)
   82b86:	4798      	blx	r3
   82b88:	e7f7      	b.n	82b7a <XPROGTarget_SendByte+0xa>
   82b8a:	bf00      	nop
   82b8c:	20002070 	.word	0x20002070
   82b90:	40094000 	.word	0x40094000
   82b94:	000855e5 	.word	0x000855e5
   82b98:	00082aa1 	.word	0x00082aa1

00082b9c <XPROGTarget_ReceiveByte>:
{
   82b9c:	b570      	push	{r4, r5, r6, lr}
   82b9e:	b082      	sub	sp, #8
	if (IsSending)
   82ba0:	4b0a      	ldr	r3, [pc, #40]	; (82bcc <XPROGTarget_ReceiveByte+0x30>)
   82ba2:	781b      	ldrb	r3, [r3, #0]
   82ba4:	b973      	cbnz	r3, 82bc4 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   82ba6:	4d0a      	ldr	r5, [pc, #40]	; (82bd0 <XPROGTarget_ReceiveByte+0x34>)
   82ba8:	4c0a      	ldr	r4, [pc, #40]	; (82bd4 <XPROGTarget_ReceiveByte+0x38>)
   82baa:	4e0b      	ldr	r6, [pc, #44]	; (82bd8 <XPROGTarget_ReceiveByte+0x3c>)
   82bac:	a901      	add	r1, sp, #4
   82bae:	4628      	mov	r0, r5
   82bb0:	47a0      	blx	r4
   82bb2:	2801      	cmp	r0, #1
   82bb4:	d102      	bne.n	82bbc <XPROGTarget_ReceiveByte+0x20>
   82bb6:	6833      	ldr	r3, [r6, #0]
   82bb8:	2b00      	cmp	r3, #0
   82bba:	d1f7      	bne.n	82bac <XPROGTarget_ReceiveByte+0x10>
}
   82bbc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   82bc0:	b002      	add	sp, #8
   82bc2:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   82bc4:	4b05      	ldr	r3, [pc, #20]	; (82bdc <XPROGTarget_ReceiveByte+0x40>)
   82bc6:	4798      	blx	r3
   82bc8:	e7ed      	b.n	82ba6 <XPROGTarget_ReceiveByte+0xa>
   82bca:	bf00      	nop
   82bcc:	20002070 	.word	0x20002070
   82bd0:	40094000 	.word	0x40094000
   82bd4:	000855f7 	.word	0x000855f7
   82bd8:	20002684 	.word	0x20002684
   82bdc:	00082a59 	.word	0x00082a59

00082be0 <XPROGTarget_SendIdle>:
{
   82be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   82be2:	4b12      	ldr	r3, [pc, #72]	; (82c2c <XPROGTarget_SendIdle+0x4c>)
   82be4:	781b      	ldrb	r3, [r3, #0]
   82be6:	b123      	cbz	r3, 82bf2 <XPROGTarget_SendIdle+0x12>
{
   82be8:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82bea:	2518      	movs	r5, #24
   82bec:	4c10      	ldr	r4, [pc, #64]	; (82c30 <XPROGTarget_SendIdle+0x50>)
   82bee:	4e11      	ldr	r6, [pc, #68]	; (82c34 <XPROGTarget_SendIdle+0x54>)
   82bf0:	e006      	b.n	82c00 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   82bf2:	4b11      	ldr	r3, [pc, #68]	; (82c38 <XPROGTarget_SendIdle+0x58>)
   82bf4:	4798      	blx	r3
   82bf6:	e7f7      	b.n	82be8 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   82bf8:	3f01      	subs	r7, #1
   82bfa:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   82bfe:	d013      	beq.n	82c28 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c00:	4628      	mov	r0, r5
   82c02:	47a0      	blx	r4
   82c04:	b110      	cbz	r0, 82c0c <XPROGTarget_SendIdle+0x2c>
   82c06:	6833      	ldr	r3, [r6, #0]
   82c08:	2b00      	cmp	r3, #0
   82c0a:	d1f9      	bne.n	82c00 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c0c:	4628      	mov	r0, r5
   82c0e:	47a0      	blx	r4
   82c10:	b910      	cbnz	r0, 82c18 <XPROGTarget_SendIdle+0x38>
   82c12:	6833      	ldr	r3, [r6, #0]
   82c14:	2b00      	cmp	r3, #0
   82c16:	d1f9      	bne.n	82c0c <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82c18:	4628      	mov	r0, r5
   82c1a:	47a0      	blx	r4
   82c1c:	2800      	cmp	r0, #0
   82c1e:	d0eb      	beq.n	82bf8 <XPROGTarget_SendIdle+0x18>
   82c20:	6833      	ldr	r3, [r6, #0]
   82c22:	2b00      	cmp	r3, #0
   82c24:	d1f8      	bne.n	82c18 <XPROGTarget_SendIdle+0x38>
   82c26:	e7e7      	b.n	82bf8 <XPROGTarget_SendIdle+0x18>
}
   82c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c2a:	bf00      	nop
   82c2c:	20002070 	.word	0x20002070
   82c30:	00083b55 	.word	0x00083b55
   82c34:	20002684 	.word	0x20002684
   82c38:	00082aa1 	.word	0x00082aa1

00082c3c <XPROGTarget_EnableTargetPDI>:
{
   82c3c:	b570      	push	{r4, r5, r6, lr}
   82c3e:	b086      	sub	sp, #24
	IsSending = false;
   82c40:	2500      	movs	r5, #0
   82c42:	4b19      	ldr	r3, [pc, #100]	; (82ca8 <XPROGTarget_EnableTargetPDI+0x6c>)
   82c44:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   82c46:	200e      	movs	r0, #14
   82c48:	4b18      	ldr	r3, [pc, #96]	; (82cac <XPROGTarget_EnableTargetPDI+0x70>)
   82c4a:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   82c4c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82c50:	2014      	movs	r0, #20
   82c52:	4c17      	ldr	r4, [pc, #92]	; (82cb0 <XPROGTarget_EnableTargetPDI+0x74>)
   82c54:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82c56:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c5a:	2015      	movs	r0, #21
   82c5c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   82c5e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82c62:	2018      	movs	r0, #24
   82c64:	47a0      	blx	r4
	delay_us(50);
   82c66:	f240 1057 	movw	r0, #343	; 0x157
   82c6a:	4e12      	ldr	r6, [pc, #72]	; (82cb4 <XPROGTarget_EnableTargetPDI+0x78>)
   82c6c:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   82c6e:	2014      	movs	r0, #20
   82c70:	4b11      	ldr	r3, [pc, #68]	; (82cb8 <XPROGTarget_EnableTargetPDI+0x7c>)
   82c72:	4798      	blx	r3
	delay_us(10);
   82c74:	2045      	movs	r0, #69	; 0x45
   82c76:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   82c78:	9502      	str	r5, [sp, #8]
   82c7a:	9504      	str	r5, [sp, #16]
   82c7c:	9505      	str	r5, [sp, #20]
   82c7e:	4b0f      	ldr	r3, [pc, #60]	; (82cbc <XPROGTarget_EnableTargetPDI+0x80>)
   82c80:	9300      	str	r3, [sp, #0]
   82c82:	23c0      	movs	r3, #192	; 0xc0
   82c84:	9301      	str	r3, [sp, #4]
   82c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82c8a:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   82c8c:	4a0c      	ldr	r2, [pc, #48]	; (82cc0 <XPROGTarget_EnableTargetPDI+0x84>)
   82c8e:	4669      	mov	r1, sp
   82c90:	480c      	ldr	r0, [pc, #48]	; (82cc4 <XPROGTarget_EnableTargetPDI+0x88>)
   82c92:	4b0d      	ldr	r3, [pc, #52]	; (82cc8 <XPROGTarget_EnableTargetPDI+0x8c>)
   82c94:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   82c96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82c9a:	2018      	movs	r0, #24
   82c9c:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82c9e:	4c0b      	ldr	r4, [pc, #44]	; (82ccc <XPROGTarget_EnableTargetPDI+0x90>)
   82ca0:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82ca2:	47a0      	blx	r4
}
   82ca4:	b006      	add	sp, #24
   82ca6:	bd70      	pop	{r4, r5, r6, pc}
   82ca8:	20002070 	.word	0x20002070
   82cac:	00083ee1 	.word	0x00083ee1
   82cb0:	00083ba5 	.word	0x00083ba5
   82cb4:	20000087 	.word	0x20000087
   82cb8:	00083b71 	.word	0x00083b71
   82cbc:	0007a120 	.word	0x0007a120
   82cc0:	0b71b000 	.word	0x0b71b000
   82cc4:	40094000 	.word	0x40094000
   82cc8:	00085539 	.word	0x00085539
   82ccc:	00082be1 	.word	0x00082be1

00082cd0 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   82cd0:	4b01      	ldr	r3, [pc, #4]	; (82cd8 <set_timeout+0x8>)
   82cd2:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   82cd4:	4770      	bx	lr
   82cd6:	bf00      	nop
   82cd8:	2000084c 	.word	0x2000084c

00082cdc <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   82cdc:	b538      	push	{r3, r4, r5, lr}
   82cde:	2016      	movs	r0, #22
   82ce0:	4b10      	ldr	r3, [pc, #64]	; (82d24 <setup_timeoutcnt+0x48>)
   82ce2:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82ce4:	4b10      	ldr	r3, [pc, #64]	; (82d28 <setup_timeoutcnt+0x4c>)
   82ce6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   82cea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82cee:	2510      	movs	r5, #16
   82cf0:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82cf4:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   82cf6:	4c0d      	ldr	r4, [pc, #52]	; (82d2c <setup_timeoutcnt+0x50>)
   82cf8:	f24c 0201 	movw	r2, #49153	; 0xc001
   82cfc:	2100      	movs	r1, #0
   82cfe:	4620      	mov	r0, r4
   82d00:	4b0b      	ldr	r3, [pc, #44]	; (82d30 <setup_timeoutcnt+0x54>)
   82d02:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   82d04:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   82d08:	2100      	movs	r1, #0
   82d0a:	4620      	mov	r0, r4
   82d0c:	4b09      	ldr	r3, [pc, #36]	; (82d34 <setup_timeoutcnt+0x58>)
   82d0e:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   82d10:	462a      	mov	r2, r5
   82d12:	2100      	movs	r1, #0
   82d14:	4620      	mov	r0, r4
   82d16:	4b08      	ldr	r3, [pc, #32]	; (82d38 <setup_timeoutcnt+0x5c>)
   82d18:	4798      	blx	r3
	
	timerEnabled = true;
   82d1a:	4b08      	ldr	r3, [pc, #32]	; (82d3c <setup_timeoutcnt+0x60>)
   82d1c:	2201      	movs	r2, #1
   82d1e:	701a      	strb	r2, [r3, #0]
}
   82d20:	bd38      	pop	{r3, r4, r5, pc}
   82d22:	bf00      	nop
   82d24:	00083ee1 	.word	0x00083ee1
   82d28:	e000e100 	.word	0xe000e100
   82d2c:	40080000 	.word	0x40080000
   82d30:	00082e11 	.word	0x00082e11
   82d34:	00082e3b 	.word	0x00082e3b
   82d38:	00082e43 	.word	0x00082e43
   82d3c:	20002071 	.word	0x20002071

00082d40 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   82d40:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   82d42:	4b0a      	ldr	r3, [pc, #40]	; (82d6c <start_timeoutcnt+0x2c>)
   82d44:	781b      	ldrb	r3, [r3, #0]
   82d46:	b16b      	cbz	r3, 82d64 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82d48:	4c09      	ldr	r4, [pc, #36]	; (82d70 <start_timeoutcnt+0x30>)
   82d4a:	2100      	movs	r1, #0
   82d4c:	4620      	mov	r0, r4
   82d4e:	4b09      	ldr	r3, [pc, #36]	; (82d74 <start_timeoutcnt+0x34>)
   82d50:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   82d52:	4b09      	ldr	r3, [pc, #36]	; (82d78 <start_timeoutcnt+0x38>)
   82d54:	681a      	ldr	r2, [r3, #0]
   82d56:	4b09      	ldr	r3, [pc, #36]	; (82d7c <start_timeoutcnt+0x3c>)
   82d58:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   82d5a:	2100      	movs	r1, #0
   82d5c:	4620      	mov	r0, r4
   82d5e:	4b08      	ldr	r3, [pc, #32]	; (82d80 <start_timeoutcnt+0x40>)
   82d60:	4798      	blx	r3
}
   82d62:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   82d64:	4b07      	ldr	r3, [pc, #28]	; (82d84 <start_timeoutcnt+0x44>)
   82d66:	4798      	blx	r3
   82d68:	e7ee      	b.n	82d48 <start_timeoutcnt+0x8>
   82d6a:	bf00      	nop
   82d6c:	20002071 	.word	0x20002071
   82d70:	40080000 	.word	0x40080000
   82d74:	00082e33 	.word	0x00082e33
   82d78:	2000084c 	.word	0x2000084c
   82d7c:	20002684 	.word	0x20002684
   82d80:	00082e2b 	.word	0x00082e2b
   82d84:	00082cdd 	.word	0x00082cdd

00082d88 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   82d88:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82d8a:	2100      	movs	r1, #0
   82d8c:	4801      	ldr	r0, [pc, #4]	; (82d94 <stop_timeoutcnt+0xc>)
   82d8e:	4b02      	ldr	r3, [pc, #8]	; (82d98 <stop_timeoutcnt+0x10>)
   82d90:	4798      	blx	r3
}
   82d92:	bd08      	pop	{r3, pc}
   82d94:	40080000 	.word	0x40080000
   82d98:	00082e33 	.word	0x00082e33

00082d9c <TC0_Handler>:

ISR(TC0_Handler)
{
   82d9c:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   82d9e:	4b05      	ldr	r3, [pc, #20]	; (82db4 <TC0_Handler+0x18>)
   82da0:	681b      	ldr	r3, [r3, #0]
   82da2:	b113      	cbz	r3, 82daa <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   82da4:	3b01      	subs	r3, #1
   82da6:	4a03      	ldr	r2, [pc, #12]	; (82db4 <TC0_Handler+0x18>)
   82da8:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   82daa:	2100      	movs	r1, #0
   82dac:	4802      	ldr	r0, [pc, #8]	; (82db8 <TC0_Handler+0x1c>)
   82dae:	4b03      	ldr	r3, [pc, #12]	; (82dbc <TC0_Handler+0x20>)
   82db0:	4798      	blx	r3
}
   82db2:	bd08      	pop	{r3, pc}
   82db4:	20002684 	.word	0x20002684
   82db8:	40080000 	.word	0x40080000
   82dbc:	00082e4b 	.word	0x00082e4b

00082dc0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82dc0:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82dc2:	f1a1 030e 	sub.w	r3, r1, #14
   82dc6:	2b01      	cmp	r3, #1
   82dc8:	d91a      	bls.n	82e00 <efc_perform_command+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82dca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82dce:	b672      	cpsid	i
   82dd0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82dd4:	4b0c      	ldr	r3, [pc, #48]	; (82e08 <efc_perform_command+0x48>)
   82dd6:	2500      	movs	r5, #0
   82dd8:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82dda:	0212      	lsls	r2, r2, #8
   82ddc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82de0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82de4:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82de6:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   82de8:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   82dec:	4b07      	ldr	r3, [pc, #28]	; (82e0c <efc_perform_command+0x4c>)
   82dee:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82df0:	b92c      	cbnz	r4, 82dfe <efc_perform_command+0x3e>
		cpu_irq_enable();
   82df2:	4b05      	ldr	r3, [pc, #20]	; (82e08 <efc_perform_command+0x48>)
   82df4:	2201      	movs	r2, #1
   82df6:	701a      	strb	r2, [r3, #0]
   82df8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82dfc:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82dfe:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   82e00:	f04f 30ff 	mov.w	r0, #4294967295
   82e04:	e7fb      	b.n	82dfe <efc_perform_command+0x3e>
   82e06:	bf00      	nop
   82e08:	20000982 	.word	0x20000982
   82e0c:	2000006d 	.word	0x2000006d

00082e10 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82e10:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e12:	018b      	lsls	r3, r1, #6
   82e14:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82e18:	2402      	movs	r4, #2
   82e1a:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82e1c:	f04f 33ff 	mov.w	r3, #4294967295
   82e20:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82e22:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82e24:	604a      	str	r2, [r1, #4]
}
   82e26:	bc10      	pop	{r4}
   82e28:	4770      	bx	lr

00082e2a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82e2a:	0189      	lsls	r1, r1, #6
   82e2c:	2305      	movs	r3, #5
   82e2e:	5043      	str	r3, [r0, r1]
}
   82e30:	4770      	bx	lr

00082e32 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82e32:	0189      	lsls	r1, r1, #6
   82e34:	2302      	movs	r3, #2
   82e36:	5043      	str	r3, [r0, r1]
}
   82e38:	4770      	bx	lr

00082e3a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82e3a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   82e3e:	61c2      	str	r2, [r0, #28]
}
   82e40:	4770      	bx	lr

00082e42 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e42:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82e46:	6242      	str	r2, [r0, #36]	; 0x24
}
   82e48:	4770      	bx	lr

00082e4a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82e4a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82e4e:	6a00      	ldr	r0, [r0, #32]
}
   82e50:	4770      	bx	lr
	...

00082e54 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82e54:	b570      	push	{r4, r5, r6, lr}
   82e56:	b086      	sub	sp, #24
   82e58:	4604      	mov	r4, r0
   82e5a:	460d      	mov	r5, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82e5c:	2304      	movs	r3, #4
   82e5e:	9300      	str	r3, [sp, #0]
   82e60:	ab02      	add	r3, sp, #8
   82e62:	220f      	movs	r2, #15
   82e64:	210e      	movs	r1, #14
   82e66:	480c      	ldr	r0, [pc, #48]	; (82e98 <flash_read_unique_id+0x44>)
   82e68:	4e0c      	ldr	r6, [pc, #48]	; (82e9c <flash_read_unique_id+0x48>)
   82e6a:	47b0      	blx	r6
   82e6c:	b980      	cbnz	r0, 82e90 <flash_read_unique_id+0x3c>
   82e6e:	4603      	mov	r3, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82e70:	462e      	mov	r6, r5
   82e72:	2d04      	cmp	r5, #4
   82e74:	bf28      	it	cs
   82e76:	2604      	movcs	r6, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e78:	b165      	cbz	r5, 82e94 <flash_read_unique_id+0x40>
   82e7a:	a902      	add	r1, sp, #8
   82e7c:	1f22      	subs	r2, r4, #4
		pul_data[ul_idx] = uid_buf[ul_idx];
   82e7e:	f851 4b04 	ldr.w	r4, [r1], #4
   82e82:	f842 4f04 	str.w	r4, [r2, #4]!
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e86:	3301      	adds	r3, #1
   82e88:	429e      	cmp	r6, r3
   82e8a:	d8f8      	bhi.n	82e7e <flash_read_unique_id+0x2a>
	}

	return FLASH_RC_OK;
}
   82e8c:	b006      	add	sp, #24
   82e8e:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82e90:	2010      	movs	r0, #16
   82e92:	e7fb      	b.n	82e8c <flash_read_unique_id+0x38>
	return FLASH_RC_OK;
   82e94:	4628      	mov	r0, r5
   82e96:	e7f9      	b.n	82e8c <flash_read_unique_id+0x38>
   82e98:	400e0800 	.word	0x400e0800
   82e9c:	20000001 	.word	0x20000001

00082ea0 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   82ea0:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   82ea2:	2006      	movs	r0, #6
   82ea4:	4c02      	ldr	r4, [pc, #8]	; (82eb0 <ui_init+0x10>)
   82ea6:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82ea8:	2007      	movs	r0, #7
   82eaa:	47a0      	blx	r4
}
   82eac:	bd10      	pop	{r4, pc}
   82eae:	bf00      	nop
   82eb0:	00083a35 	.word	0x00083a35

00082eb4 <ui_powerdown>:

void ui_powerdown(void)
{
   82eb4:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   82eb6:	2006      	movs	r0, #6
   82eb8:	4c03      	ldr	r4, [pc, #12]	; (82ec8 <ui_powerdown+0x14>)
   82eba:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   82ebc:	2007      	movs	r0, #7
   82ebe:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   82ec0:	201d      	movs	r0, #29
   82ec2:	4b02      	ldr	r3, [pc, #8]	; (82ecc <ui_powerdown+0x18>)
   82ec4:	4798      	blx	r3
		
}
   82ec6:	bd10      	pop	{r4, pc}
   82ec8:	00083a35 	.word	0x00083a35
   82ecc:	00083b8b 	.word	0x00083b8b

00082ed0 <ui_wakeup>:

void ui_wakeup(void)
{
   82ed0:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   82ed2:	2006      	movs	r0, #6
   82ed4:	4b02      	ldr	r3, [pc, #8]	; (82ee0 <ui_wakeup+0x10>)
   82ed6:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   82ed8:	201d      	movs	r0, #29
   82eda:	4b02      	ldr	r3, [pc, #8]	; (82ee4 <ui_wakeup+0x14>)
   82edc:	4798      	blx	r3
}
   82ede:	bd08      	pop	{r3, pc}
   82ee0:	00083a59 	.word	0x00083a59
   82ee4:	00083b71 	.word	0x00083b71

00082ee8 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   82ee8:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   82eea:	4b0b      	ldr	r3, [pc, #44]	; (82f18 <ui_process+0x30>)
   82eec:	fba3 2300 	umull	r2, r3, r3, r0
   82ef0:	099b      	lsrs	r3, r3, #6
   82ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82ef6:	fb02 0013 	mls	r0, r2, r3, r0
   82efa:	b280      	uxth	r0, r0
   82efc:	b118      	cbz	r0, 82f06 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   82efe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   82f02:	d004      	beq.n	82f0e <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   82f04:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   82f06:	2006      	movs	r0, #6
   82f08:	4b04      	ldr	r3, [pc, #16]	; (82f1c <ui_process+0x34>)
   82f0a:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   82f0c:	e7fa      	b.n	82f04 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   82f0e:	2006      	movs	r0, #6
   82f10:	4b03      	ldr	r3, [pc, #12]	; (82f20 <ui_process+0x38>)
   82f12:	4798      	blx	r3
}
   82f14:	e7f6      	b.n	82f04 <ui_process+0x1c>
   82f16:	bf00      	nop
   82f18:	10624dd3 	.word	0x10624dd3
   82f1c:	00083a59 	.word	0x00083a59
   82f20:	00083a35 	.word	0x00083a35

00082f24 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82f24:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f26:	203e      	movs	r0, #62	; 0x3e
   82f28:	4b07      	ldr	r3, [pc, #28]	; (82f48 <sysclk_enable_usb+0x24>)
   82f2a:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82f2c:	4c07      	ldr	r4, [pc, #28]	; (82f4c <sysclk_enable_usb+0x28>)
   82f2e:	47a0      	blx	r4
   82f30:	2800      	cmp	r0, #0
   82f32:	d0fc      	beq.n	82f2e <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82f34:	4b06      	ldr	r3, [pc, #24]	; (82f50 <sysclk_enable_usb+0x2c>)
   82f36:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   82f3a:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   82f3c:	4c05      	ldr	r4, [pc, #20]	; (82f54 <sysclk_enable_usb+0x30>)
   82f3e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82f40:	2800      	cmp	r0, #0
   82f42:	d0fc      	beq.n	82f3e <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   82f44:	bd10      	pop	{r4, pc}
   82f46:	bf00      	nop
   82f48:	00083e49 	.word	0x00083e49
   82f4c:	00083e71 	.word	0x00083e71
   82f50:	400e0400 	.word	0x400e0400
   82f54:	00083ed1 	.word	0x00083ed1

00082f58 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82f58:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82f5a:	4812      	ldr	r0, [pc, #72]	; (82fa4 <sysclk_init+0x4c>)
   82f5c:	4b12      	ldr	r3, [pc, #72]	; (82fa8 <sysclk_init+0x50>)
   82f5e:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   82f60:	203e      	movs	r0, #62	; 0x3e
   82f62:	4b12      	ldr	r3, [pc, #72]	; (82fac <sysclk_init+0x54>)
   82f64:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   82f66:	4c12      	ldr	r4, [pc, #72]	; (82fb0 <sysclk_init+0x58>)
   82f68:	47a0      	blx	r4
   82f6a:	2800      	cmp	r0, #0
   82f6c:	d0fc      	beq.n	82f68 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82f6e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82f72:	4b10      	ldr	r3, [pc, #64]	; (82fb4 <sysclk_init+0x5c>)
   82f74:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82f76:	4c10      	ldr	r4, [pc, #64]	; (82fb8 <sysclk_init+0x60>)
   82f78:	47a0      	blx	r4
   82f7a:	2800      	cmp	r0, #0
   82f7c:	d0fc      	beq.n	82f78 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   82f7e:	4b0f      	ldr	r3, [pc, #60]	; (82fbc <sysclk_init+0x64>)
   82f80:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82f82:	4b0f      	ldr	r3, [pc, #60]	; (82fc0 <sysclk_init+0x68>)
   82f84:	4a0f      	ldr	r2, [pc, #60]	; (82fc4 <sysclk_init+0x6c>)
   82f86:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   82f88:	4c0f      	ldr	r4, [pc, #60]	; (82fc8 <sysclk_init+0x70>)
   82f8a:	47a0      	blx	r4
   82f8c:	2800      	cmp	r0, #0
   82f8e:	d0fc      	beq.n	82f8a <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82f90:	2010      	movs	r0, #16
   82f92:	4b0e      	ldr	r3, [pc, #56]	; (82fcc <sysclk_init+0x74>)
   82f94:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82f96:	4b0e      	ldr	r3, [pc, #56]	; (82fd0 <sysclk_init+0x78>)
   82f98:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82f9a:	4802      	ldr	r0, [pc, #8]	; (82fa4 <sysclk_init+0x4c>)
   82f9c:	4b02      	ldr	r3, [pc, #8]	; (82fa8 <sysclk_init+0x50>)
   82f9e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82fa0:	bd10      	pop	{r4, pc}
   82fa2:	bf00      	nop
   82fa4:	05b8d800 	.word	0x05b8d800
   82fa8:	20000139 	.word	0x20000139
   82fac:	00083e49 	.word	0x00083e49
   82fb0:	00083e71 	.word	0x00083e71
   82fb4:	00083e91 	.word	0x00083e91
   82fb8:	00083e81 	.word	0x00083e81
   82fbc:	00083eb1 	.word	0x00083eb1
   82fc0:	400e0400 	.word	0x400e0400
   82fc4:	200f3f01 	.word	0x200f3f01
   82fc8:	00083ec1 	.word	0x00083ec1
   82fcc:	00083de9 	.word	0x00083de9
   82fd0:	00085705 	.word	0x00085705

00082fd4 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   82fd4:	4b01      	ldr	r3, [pc, #4]	; (82fdc <udi_vendor_getsetting+0x8>)
   82fd6:	7818      	ldrb	r0, [r3, #0]
   82fd8:	4770      	bx	lr
   82fda:	bf00      	nop
   82fdc:	20002072 	.word	0x20002072

00082fe0 <udi_vendor_enable>:
{
   82fe0:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   82fe2:	4b05      	ldr	r3, [pc, #20]	; (82ff8 <udi_vendor_enable+0x18>)
   82fe4:	4798      	blx	r3
   82fe6:	78c3      	ldrb	r3, [r0, #3]
   82fe8:	4a04      	ldr	r2, [pc, #16]	; (82ffc <udi_vendor_enable+0x1c>)
   82fea:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   82fec:	b10b      	cbz	r3, 82ff2 <udi_vendor_enable+0x12>
	return true;
   82fee:	2001      	movs	r0, #1
}
   82ff0:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   82ff2:	4b03      	ldr	r3, [pc, #12]	; (83000 <udi_vendor_enable+0x20>)
   82ff4:	4798      	blx	r3
   82ff6:	e7fb      	b.n	82ff0 <udi_vendor_enable+0x10>
   82ff8:	00083215 	.word	0x00083215
   82ffc:	20002072 	.word	0x20002072
   83000:	00081341 	.word	0x00081341

00083004 <udi_vendor_disable>:
{
   83004:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   83006:	4b03      	ldr	r3, [pc, #12]	; (83014 <udi_vendor_disable+0x10>)
   83008:	781b      	ldrb	r3, [r3, #0]
   8300a:	b103      	cbz	r3, 8300e <udi_vendor_disable+0xa>
}
   8300c:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   8300e:	4b02      	ldr	r3, [pc, #8]	; (83018 <udi_vendor_disable+0x14>)
   83010:	4798      	blx	r3
}
   83012:	e7fb      	b.n	8300c <udi_vendor_disable+0x8>
   83014:	20002072 	.word	0x20002072
   83018:	00081369 	.word	0x00081369

0008301c <udi_vendor_setup>:
{
   8301c:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   8301e:	4a0c      	ldr	r2, [pc, #48]	; (83050 <udi_vendor_setup+0x34>)
   83020:	7813      	ldrb	r3, [r2, #0]
   83022:	f992 2000 	ldrsb.w	r2, [r2]
   83026:	2a00      	cmp	r2, #0
   83028:	db06      	blt.n	83038 <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8302a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8302e:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   83030:	bf18      	it	ne
   83032:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83034:	d009      	beq.n	8304a <udi_vendor_setup+0x2e>
}
   83036:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83038:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8303c:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   8303e:	bf18      	it	ne
   83040:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83042:	d1f8      	bne.n	83036 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83044:	4b03      	ldr	r3, [pc, #12]	; (83054 <udi_vendor_setup+0x38>)
   83046:	4798      	blx	r3
   83048:	e7f5      	b.n	83036 <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8304a:	4b03      	ldr	r3, [pc, #12]	; (83058 <udi_vendor_setup+0x3c>)
   8304c:	4798      	blx	r3
   8304e:	e7f2      	b.n	83036 <udi_vendor_setup+0x1a>
   83050:	2000269c 	.word	0x2000269c
   83054:	000813c5 	.word	0x000813c5
   83058:	00081375 	.word	0x00081375

0008305c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8305c:	b510      	push	{r4, lr}
   8305e:	b082      	sub	sp, #8
   83060:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83062:	9200      	str	r2, [sp, #0]
   83064:	4602      	mov	r2, r0
   83066:	2100      	movs	r1, #0
   83068:	2081      	movs	r0, #129	; 0x81
   8306a:	4c02      	ldr	r4, [pc, #8]	; (83074 <udi_vendor_bulk_in_run+0x18>)
   8306c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8306e:	b002      	add	sp, #8
   83070:	bd10      	pop	{r4, pc}
   83072:	bf00      	nop
   83074:	00084f6d 	.word	0x00084f6d

00083078 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83078:	b510      	push	{r4, lr}
   8307a:	b082      	sub	sp, #8
   8307c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8307e:	9200      	str	r2, [sp, #0]
   83080:	4602      	mov	r2, r0
   83082:	2100      	movs	r1, #0
   83084:	2002      	movs	r0, #2
   83086:	4c02      	ldr	r4, [pc, #8]	; (83090 <udi_vendor_bulk_out_run+0x18>)
   83088:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8308a:	b002      	add	sp, #8
   8308c:	bd10      	pop	{r4, pc}
   8308e:	bf00      	nop
   83090:	00084f6d 	.word	0x00084f6d

00083094 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83094:	4b0b      	ldr	r3, [pc, #44]	; (830c4 <udc_next_desc_in_iface+0x30>)
   83096:	681b      	ldr	r3, [r3, #0]
   83098:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8309a:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8309c:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8309e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830a0:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   830a2:	4290      	cmp	r0, r2
   830a4:	d20a      	bcs.n	830bc <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   830a6:	7843      	ldrb	r3, [r0, #1]
   830a8:	2b04      	cmp	r3, #4
   830aa:	d009      	beq.n	830c0 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   830ac:	428b      	cmp	r3, r1
   830ae:	d008      	beq.n	830c2 <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   830b0:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830b2:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   830b4:	4290      	cmp	r0, r2
   830b6:	d3f6      	bcc.n	830a6 <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   830b8:	2000      	movs	r0, #0
   830ba:	4770      	bx	lr
   830bc:	2000      	movs	r0, #0
   830be:	4770      	bx	lr
   830c0:	2000      	movs	r0, #0
}
   830c2:	4770      	bx	lr
   830c4:	2000207c 	.word	0x2000207c

000830c8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   830c8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   830ca:	4b03      	ldr	r3, [pc, #12]	; (830d8 <udc_valid_address+0x10>)
   830cc:	7898      	ldrb	r0, [r3, #2]
   830ce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   830d2:	4b02      	ldr	r3, [pc, #8]	; (830dc <udc_valid_address+0x14>)
   830d4:	4798      	blx	r3
}
   830d6:	bd08      	pop	{r3, pc}
   830d8:	2000269c 	.word	0x2000269c
   830dc:	00084cc1 	.word	0x00084cc1

000830e0 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   830e0:	4b18      	ldr	r3, [pc, #96]	; (83144 <udc_update_iface_desc+0x64>)
   830e2:	781b      	ldrb	r3, [r3, #0]
   830e4:	b33b      	cbz	r3, 83136 <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   830e6:	4b18      	ldr	r3, [pc, #96]	; (83148 <udc_update_iface_desc+0x68>)
   830e8:	681b      	ldr	r3, [r3, #0]
   830ea:	681b      	ldr	r3, [r3, #0]
   830ec:	791a      	ldrb	r2, [r3, #4]
   830ee:	4282      	cmp	r2, r0
   830f0:	d923      	bls.n	8313a <udc_update_iface_desc+0x5a>
{
   830f2:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   830f4:	4a15      	ldr	r2, [pc, #84]	; (8314c <udc_update_iface_desc+0x6c>)
   830f6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   830f8:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   830fa:	441c      	add	r4, r3
	while (ptr_end_desc >
   830fc:	42a3      	cmp	r3, r4
   830fe:	d21e      	bcs.n	8313e <udc_update_iface_desc+0x5e>
   83100:	2500      	movs	r5, #0
   83102:	2601      	movs	r6, #1
   83104:	e004      	b.n	83110 <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   83106:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83108:	4413      	add	r3, r2
	while (ptr_end_desc >
   8310a:	4635      	mov	r5, r6
   8310c:	42a3      	cmp	r3, r4
   8310e:	d20d      	bcs.n	8312c <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83110:	785a      	ldrb	r2, [r3, #1]
   83112:	2a04      	cmp	r2, #4
   83114:	d1f7      	bne.n	83106 <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83116:	789a      	ldrb	r2, [r3, #2]
   83118:	4282      	cmp	r2, r0
   8311a:	d1f4      	bne.n	83106 <udc_update_iface_desc+0x26>
   8311c:	78da      	ldrb	r2, [r3, #3]
   8311e:	428a      	cmp	r2, r1
   83120:	d1f1      	bne.n	83106 <udc_update_iface_desc+0x26>
   83122:	b10d      	cbz	r5, 83128 <udc_update_iface_desc+0x48>
   83124:	4a09      	ldr	r2, [pc, #36]	; (8314c <udc_update_iface_desc+0x6c>)
   83126:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   83128:	2001      	movs	r0, #1
   8312a:	e002      	b.n	83132 <udc_update_iface_desc+0x52>
   8312c:	4a07      	ldr	r2, [pc, #28]	; (8314c <udc_update_iface_desc+0x6c>)
   8312e:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   83130:	2000      	movs	r0, #0
}
   83132:	bc70      	pop	{r4, r5, r6}
   83134:	4770      	bx	lr
		return false;
   83136:	2000      	movs	r0, #0
   83138:	4770      	bx	lr
		return false;
   8313a:	2000      	movs	r0, #0
}
   8313c:	4770      	bx	lr
	return false; // Interface not found
   8313e:	2000      	movs	r0, #0
   83140:	e7f7      	b.n	83132 <udc_update_iface_desc+0x52>
   83142:	bf00      	nop
   83144:	20002079 	.word	0x20002079
   83148:	2000207c 	.word	0x2000207c
   8314c:	20002080 	.word	0x20002080

00083150 <udc_iface_disable>:
{
   83150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83154:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   83156:	2100      	movs	r1, #0
   83158:	4b12      	ldr	r3, [pc, #72]	; (831a4 <udc_iface_disable+0x54>)
   8315a:	4798      	blx	r3
   8315c:	4680      	mov	r8, r0
   8315e:	b1f0      	cbz	r0, 8319e <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83160:	4b11      	ldr	r3, [pc, #68]	; (831a8 <udc_iface_disable+0x58>)
   83162:	681b      	ldr	r3, [r3, #0]
   83164:	685b      	ldr	r3, [r3, #4]
   83166:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8316a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8316e:	4798      	blx	r3
   83170:	4601      	mov	r1, r0
   83172:	4620      	mov	r0, r4
   83174:	4b0b      	ldr	r3, [pc, #44]	; (831a4 <udc_iface_disable+0x54>)
   83176:	4798      	blx	r3
   83178:	4680      	mov	r8, r0
   8317a:	b180      	cbz	r0, 8319e <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8317c:	4b0b      	ldr	r3, [pc, #44]	; (831ac <udc_iface_disable+0x5c>)
   8317e:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83180:	2605      	movs	r6, #5
   83182:	4d0b      	ldr	r5, [pc, #44]	; (831b0 <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   83184:	4f0b      	ldr	r7, [pc, #44]	; (831b4 <udc_iface_disable+0x64>)
   83186:	e001      	b.n	8318c <udc_iface_disable+0x3c>
   83188:	7880      	ldrb	r0, [r0, #2]
   8318a:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8318c:	4631      	mov	r1, r6
   8318e:	4620      	mov	r0, r4
   83190:	47a8      	blx	r5
			if (NULL == ep_desc) {
   83192:	4604      	mov	r4, r0
   83194:	2800      	cmp	r0, #0
   83196:	d1f7      	bne.n	83188 <udc_iface_disable+0x38>
	udi_api->disable();
   83198:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8319c:	4798      	blx	r3
}
   8319e:	4640      	mov	r0, r8
   831a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   831a4:	000830e1 	.word	0x000830e1
   831a8:	2000207c 	.word	0x2000207c
   831ac:	20002080 	.word	0x20002080
   831b0:	00083095 	.word	0x00083095
   831b4:	00084d25 	.word	0x00084d25

000831b8 <udc_iface_enable>:
{
   831b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   831bc:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   831be:	4b10      	ldr	r3, [pc, #64]	; (83200 <udc_iface_enable+0x48>)
   831c0:	4798      	blx	r3
   831c2:	4603      	mov	r3, r0
   831c4:	b1c8      	cbz	r0, 831fa <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   831c6:	4b0f      	ldr	r3, [pc, #60]	; (83204 <udc_iface_enable+0x4c>)
   831c8:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   831ca:	2605      	movs	r6, #5
   831cc:	4d0e      	ldr	r5, [pc, #56]	; (83208 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   831ce:	4f0f      	ldr	r7, [pc, #60]	; (8320c <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   831d0:	4631      	mov	r1, r6
   831d2:	4620      	mov	r0, r4
   831d4:	47a8      	blx	r5
		if (NULL == ep_desc)
   831d6:	4604      	mov	r4, r0
   831d8:	b138      	cbz	r0, 831ea <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   831da:	8882      	ldrh	r2, [r0, #4]
   831dc:	78c1      	ldrb	r1, [r0, #3]
   831de:	7880      	ldrb	r0, [r0, #2]
   831e0:	47b8      	blx	r7
   831e2:	4603      	mov	r3, r0
   831e4:	2800      	cmp	r0, #0
   831e6:	d1f3      	bne.n	831d0 <udc_iface_enable+0x18>
   831e8:	e007      	b.n	831fa <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   831ea:	4b09      	ldr	r3, [pc, #36]	; (83210 <udc_iface_enable+0x58>)
   831ec:	681b      	ldr	r3, [r3, #0]
   831ee:	685b      	ldr	r3, [r3, #4]
   831f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   831f4:	681b      	ldr	r3, [r3, #0]
   831f6:	4798      	blx	r3
   831f8:	4603      	mov	r3, r0
}
   831fa:	4618      	mov	r0, r3
   831fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83200:	000830e1 	.word	0x000830e1
   83204:	20002080 	.word	0x20002080
   83208:	00083095 	.word	0x00083095
   8320c:	00085069 	.word	0x00085069
   83210:	2000207c 	.word	0x2000207c

00083214 <udc_get_interface_desc>:
}
   83214:	4b01      	ldr	r3, [pc, #4]	; (8321c <udc_get_interface_desc+0x8>)
   83216:	6818      	ldr	r0, [r3, #0]
   83218:	4770      	bx	lr
   8321a:	bf00      	nop
   8321c:	20002080 	.word	0x20002080

00083220 <udc_start>:
{
   83220:	b508      	push	{r3, lr}
	udd_enable();
   83222:	4b01      	ldr	r3, [pc, #4]	; (83228 <udc_start+0x8>)
   83224:	4798      	blx	r3
}
   83226:	bd08      	pop	{r3, pc}
   83228:	00084ba5 	.word	0x00084ba5

0008322c <udc_reset>:
{
   8322c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   8322e:	4b0d      	ldr	r3, [pc, #52]	; (83264 <udc_reset+0x38>)
   83230:	781b      	ldrb	r3, [r3, #0]
   83232:	b183      	cbz	r3, 83256 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83234:	4b0c      	ldr	r3, [pc, #48]	; (83268 <udc_reset+0x3c>)
   83236:	681b      	ldr	r3, [r3, #0]
   83238:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8323a:	791b      	ldrb	r3, [r3, #4]
   8323c:	b15b      	cbz	r3, 83256 <udc_reset+0x2a>
   8323e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   83240:	4e0a      	ldr	r6, [pc, #40]	; (8326c <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83242:	4d09      	ldr	r5, [pc, #36]	; (83268 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   83244:	b2e0      	uxtb	r0, r4
   83246:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83248:	3401      	adds	r4, #1
   8324a:	682b      	ldr	r3, [r5, #0]
   8324c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8324e:	791a      	ldrb	r2, [r3, #4]
   83250:	b2e3      	uxtb	r3, r4
   83252:	429a      	cmp	r2, r3
   83254:	d8f6      	bhi.n	83244 <udc_reset+0x18>
	udc_num_configuration = 0;
   83256:	2300      	movs	r3, #0
   83258:	4a02      	ldr	r2, [pc, #8]	; (83264 <udc_reset+0x38>)
   8325a:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   8325c:	4a04      	ldr	r2, [pc, #16]	; (83270 <udc_reset+0x44>)
   8325e:	8013      	strh	r3, [r2, #0]
}
   83260:	bd70      	pop	{r4, r5, r6, pc}
   83262:	bf00      	nop
   83264:	20002079 	.word	0x20002079
   83268:	2000207c 	.word	0x2000207c
   8326c:	00083151 	.word	0x00083151
   83270:	20002074 	.word	0x20002074

00083274 <udc_sof_notify>:
{
   83274:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   83276:	4b0e      	ldr	r3, [pc, #56]	; (832b0 <udc_sof_notify+0x3c>)
   83278:	781b      	ldrb	r3, [r3, #0]
   8327a:	b1bb      	cbz	r3, 832ac <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8327c:	4b0d      	ldr	r3, [pc, #52]	; (832b4 <udc_sof_notify+0x40>)
   8327e:	681a      	ldr	r2, [r3, #0]
   83280:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83282:	791b      	ldrb	r3, [r3, #4]
   83284:	b193      	cbz	r3, 832ac <udc_sof_notify+0x38>
   83286:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83288:	4d0a      	ldr	r5, [pc, #40]	; (832b4 <udc_sof_notify+0x40>)
   8328a:	e006      	b.n	8329a <udc_sof_notify+0x26>
   8328c:	682a      	ldr	r2, [r5, #0]
   8328e:	3401      	adds	r4, #1
   83290:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83292:	7919      	ldrb	r1, [r3, #4]
   83294:	b2e3      	uxtb	r3, r4
   83296:	4299      	cmp	r1, r3
   83298:	d908      	bls.n	832ac <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8329a:	b2e3      	uxtb	r3, r4
   8329c:	6852      	ldr	r2, [r2, #4]
   8329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   832a2:	691b      	ldr	r3, [r3, #16]
   832a4:	2b00      	cmp	r3, #0
   832a6:	d0f1      	beq.n	8328c <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   832a8:	4798      	blx	r3
   832aa:	e7ef      	b.n	8328c <udc_sof_notify+0x18>
}
   832ac:	bd38      	pop	{r3, r4, r5, pc}
   832ae:	bf00      	nop
   832b0:	20002079 	.word	0x20002079
   832b4:	2000207c 	.word	0x2000207c

000832b8 <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   832b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   832bc:	4b91      	ldr	r3, [pc, #580]	; (83504 <udc_process_setup+0x24c>)
   832be:	2200      	movs	r2, #0
   832c0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   832c2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   832c4:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   832c6:	881b      	ldrh	r3, [r3, #0]
   832c8:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   832cc:	d01b      	beq.n	83306 <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   832ce:	4b8d      	ldr	r3, [pc, #564]	; (83504 <udc_process_setup+0x24c>)
   832d0:	781a      	ldrb	r2, [r3, #0]
   832d2:	f993 3000 	ldrsb.w	r3, [r3]
   832d6:	2b00      	cmp	r3, #0
   832d8:	db1b      	blt.n	83312 <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   832da:	f012 0f60 	tst.w	r2, #96	; 0x60
   832de:	f000 8147 	beq.w	83570 <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   832e2:	4b88      	ldr	r3, [pc, #544]	; (83504 <udc_process_setup+0x24c>)
   832e4:	781b      	ldrb	r3, [r3, #0]
   832e6:	f003 031f 	and.w	r3, r3, #31
   832ea:	2b01      	cmp	r3, #1
   832ec:	f000 8245 	beq.w	8377a <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   832f0:	4b84      	ldr	r3, [pc, #528]	; (83504 <udc_process_setup+0x24c>)
   832f2:	781b      	ldrb	r3, [r3, #0]
   832f4:	f003 031f 	and.w	r3, r3, #31
   832f8:	2b02      	cmp	r3, #2
   832fa:	f000 8291 	beq.w	83820 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   832fe:	2300      	movs	r3, #0
#endif
}
   83300:	4618      	mov	r0, r3
   83302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   83306:	21ae      	movs	r1, #174	; 0xae
   83308:	487f      	ldr	r0, [pc, #508]	; (83508 <udc_process_setup+0x250>)
   8330a:	4b80      	ldr	r3, [pc, #512]	; (8350c <udc_process_setup+0x254>)
   8330c:	4798      	blx	r3
		return true;
   8330e:	2301      	movs	r3, #1
   83310:	e7f6      	b.n	83300 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83312:	4b7c      	ldr	r3, [pc, #496]	; (83504 <udc_process_setup+0x24c>)
   83314:	88db      	ldrh	r3, [r3, #6]
   83316:	2b00      	cmp	r3, #0
   83318:	f000 82ae 	beq.w	83878 <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8331c:	f012 0f60 	tst.w	r2, #96	; 0x60
   83320:	d1df      	bne.n	832e2 <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83322:	f012 021f 	ands.w	r2, r2, #31
   83326:	f040 80c1 	bne.w	834ac <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   8332a:	4a76      	ldr	r2, [pc, #472]	; (83504 <udc_process_setup+0x24c>)
   8332c:	7852      	ldrb	r2, [r2, #1]
   8332e:	2a06      	cmp	r2, #6
   83330:	d00b      	beq.n	8334a <udc_process_setup+0x92>
   83332:	2a08      	cmp	r2, #8
   83334:	f000 80b2 	beq.w	8349c <udc_process_setup+0x1e4>
   83338:	2a00      	cmp	r2, #0
   8333a:	d1d2      	bne.n	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8333c:	2b02      	cmp	r3, #2
   8333e:	d1d0      	bne.n	832e2 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83340:	2102      	movs	r1, #2
   83342:	4873      	ldr	r0, [pc, #460]	; (83510 <udc_process_setup+0x258>)
   83344:	4b71      	ldr	r3, [pc, #452]	; (8350c <udc_process_setup+0x254>)
   83346:	4798      	blx	r3
	return true;
   83348:	e12f      	b.n	835aa <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8334a:	4b6e      	ldr	r3, [pc, #440]	; (83504 <udc_process_setup+0x24c>)
   8334c:	885a      	ldrh	r2, [r3, #2]
   8334e:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83350:	0a13      	lsrs	r3, r2, #8
   83352:	3b01      	subs	r3, #1
   83354:	2b0e      	cmp	r3, #14
   83356:	f200 8209 	bhi.w	8376c <udc_process_setup+0x4b4>
   8335a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8335e:	000f      	.short	0x000f
   83360:	007a0023 	.word	0x007a0023
   83364:	02070207 	.word	0x02070207
   83368:	00520044 	.word	0x00520044
   8336c:	02070207 	.word	0x02070207
   83370:	02070207 	.word	0x02070207
   83374:	02070207 	.word	0x02070207
   83378:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   8337c:	4b65      	ldr	r3, [pc, #404]	; (83514 <udc_process_setup+0x25c>)
   8337e:	4798      	blx	r3
   83380:	b928      	cbnz	r0, 8338e <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   83382:	4b65      	ldr	r3, [pc, #404]	; (83518 <udc_process_setup+0x260>)
   83384:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   83386:	7801      	ldrb	r1, [r0, #0]
   83388:	4b60      	ldr	r3, [pc, #384]	; (8350c <udc_process_setup+0x254>)
   8338a:	4798      	blx	r3
   8338c:	e030      	b.n	833f0 <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8338e:	4b62      	ldr	r3, [pc, #392]	; (83518 <udc_process_setup+0x260>)
   83390:	681a      	ldr	r2, [r3, #0]
   83392:	2110      	movs	r1, #16
   83394:	7091      	strb	r1, [r2, #2]
   83396:	2102      	movs	r1, #2
   83398:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8339a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   8339c:	7801      	ldrb	r1, [r0, #0]
   8339e:	4b5b      	ldr	r3, [pc, #364]	; (8350c <udc_process_setup+0x254>)
   833a0:	4798      	blx	r3
   833a2:	e025      	b.n	833f0 <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   833a4:	4b5b      	ldr	r3, [pc, #364]	; (83514 <udc_process_setup+0x25c>)
   833a6:	4798      	blx	r3
   833a8:	b180      	cbz	r0, 833cc <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   833aa:	4b5b      	ldr	r3, [pc, #364]	; (83518 <udc_process_setup+0x260>)
   833ac:	689b      	ldr	r3, [r3, #8]
   833ae:	7c5b      	ldrb	r3, [r3, #17]
   833b0:	42a3      	cmp	r3, r4
   833b2:	d996      	bls.n	832e2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   833b4:	4b58      	ldr	r3, [pc, #352]	; (83518 <udc_process_setup+0x260>)
   833b6:	691b      	ldr	r3, [r3, #16]
   833b8:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   833bc:	8841      	ldrh	r1, [r0, #2]
   833be:	4b53      	ldr	r3, [pc, #332]	; (8350c <udc_process_setup+0x254>)
   833c0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   833c2:	4b50      	ldr	r3, [pc, #320]	; (83504 <udc_process_setup+0x24c>)
   833c4:	689b      	ldr	r3, [r3, #8]
   833c6:	2202      	movs	r2, #2
   833c8:	705a      	strb	r2, [r3, #1]
		break;
   833ca:	e011      	b.n	833f0 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   833cc:	4b52      	ldr	r3, [pc, #328]	; (83518 <udc_process_setup+0x260>)
   833ce:	681b      	ldr	r3, [r3, #0]
   833d0:	7c5b      	ldrb	r3, [r3, #17]
   833d2:	42a3      	cmp	r3, r4
   833d4:	d985      	bls.n	832e2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   833d6:	4b50      	ldr	r3, [pc, #320]	; (83518 <udc_process_setup+0x260>)
   833d8:	685b      	ldr	r3, [r3, #4]
   833da:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   833de:	8841      	ldrh	r1, [r0, #2]
   833e0:	4b4a      	ldr	r3, [pc, #296]	; (8350c <udc_process_setup+0x254>)
   833e2:	4798      	blx	r3
   833e4:	e7ed      	b.n	833c2 <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   833e6:	4b4c      	ldr	r3, [pc, #304]	; (83518 <udc_process_setup+0x260>)
   833e8:	68d8      	ldr	r0, [r3, #12]
   833ea:	7801      	ldrb	r1, [r0, #0]
   833ec:	4b47      	ldr	r3, [pc, #284]	; (8350c <udc_process_setup+0x254>)
   833ee:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   833f0:	4b44      	ldr	r3, [pc, #272]	; (83504 <udc_process_setup+0x24c>)
   833f2:	88da      	ldrh	r2, [r3, #6]
   833f4:	899b      	ldrh	r3, [r3, #12]
   833f6:	4293      	cmp	r3, r2
   833f8:	f240 80d7 	bls.w	835aa <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   833fc:	4b41      	ldr	r3, [pc, #260]	; (83504 <udc_process_setup+0x24c>)
   833fe:	819a      	strh	r2, [r3, #12]
   83400:	e0d3      	b.n	835aa <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   83402:	4b44      	ldr	r3, [pc, #272]	; (83514 <udc_process_setup+0x25c>)
   83404:	4798      	blx	r3
   83406:	b988      	cbnz	r0, 8342c <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   83408:	4b43      	ldr	r3, [pc, #268]	; (83518 <udc_process_setup+0x260>)
   8340a:	689b      	ldr	r3, [r3, #8]
   8340c:	7c5b      	ldrb	r3, [r3, #17]
   8340e:	42a3      	cmp	r3, r4
   83410:	f67f af67 	bls.w	832e2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83414:	4b40      	ldr	r3, [pc, #256]	; (83518 <udc_process_setup+0x260>)
   83416:	691b      	ldr	r3, [r3, #16]
   83418:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8341c:	8841      	ldrh	r1, [r0, #2]
   8341e:	4b3b      	ldr	r3, [pc, #236]	; (8350c <udc_process_setup+0x254>)
   83420:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83422:	4b38      	ldr	r3, [pc, #224]	; (83504 <udc_process_setup+0x24c>)
   83424:	689b      	ldr	r3, [r3, #8]
   83426:	2207      	movs	r2, #7
   83428:	705a      	strb	r2, [r3, #1]
		break;
   8342a:	e7e1      	b.n	833f0 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   8342c:	4b3a      	ldr	r3, [pc, #232]	; (83518 <udc_process_setup+0x260>)
   8342e:	681b      	ldr	r3, [r3, #0]
   83430:	7c5b      	ldrb	r3, [r3, #17]
   83432:	42a3      	cmp	r3, r4
   83434:	f67f af55 	bls.w	832e2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83438:	4b37      	ldr	r3, [pc, #220]	; (83518 <udc_process_setup+0x260>)
   8343a:	685b      	ldr	r3, [r3, #4]
   8343c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83440:	8841      	ldrh	r1, [r0, #2]
   83442:	4b32      	ldr	r3, [pc, #200]	; (8350c <udc_process_setup+0x254>)
   83444:	4798      	blx	r3
   83446:	e7ec      	b.n	83422 <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83448:	2121      	movs	r1, #33	; 0x21
   8344a:	4834      	ldr	r0, [pc, #208]	; (8351c <udc_process_setup+0x264>)
   8344c:	4b2f      	ldr	r3, [pc, #188]	; (8350c <udc_process_setup+0x254>)
   8344e:	4798      	blx	r3
		break;
   83450:	e7ce      	b.n	833f0 <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83452:	b2d2      	uxtb	r2, r2
   83454:	2a03      	cmp	r2, #3
   83456:	f63f af44 	bhi.w	832e2 <udc_process_setup+0x2a>
   8345a:	e8df f002 	tbb	[pc, r2]
   8345e:	1914      	.short	0x1914
   83460:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83462:	2020      	movs	r0, #32
   83464:	4a2e      	ldr	r2, [pc, #184]	; (83520 <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   83466:	4613      	mov	r3, r2
   83468:	492e      	ldr	r1, [pc, #184]	; (83524 <udc_process_setup+0x26c>)
   8346a:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8346c:	f813 4b01 	ldrb.w	r4, [r3], #1
   83470:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   83474:	429a      	cmp	r2, r3
   83476:	d1f9      	bne.n	8346c <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83478:	0041      	lsls	r1, r0, #1
   8347a:	3102      	adds	r1, #2
   8347c:	4829      	ldr	r0, [pc, #164]	; (83524 <udc_process_setup+0x26c>)
   8347e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   83480:	4b22      	ldr	r3, [pc, #136]	; (8350c <udc_process_setup+0x254>)
   83482:	4798      	blx	r3
   83484:	e7b4      	b.n	833f0 <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83486:	2104      	movs	r1, #4
   83488:	4827      	ldr	r0, [pc, #156]	; (83528 <udc_process_setup+0x270>)
   8348a:	4b20      	ldr	r3, [pc, #128]	; (8350c <udc_process_setup+0x254>)
   8348c:	4798      	blx	r3
	if (str_length) {
   8348e:	e7af      	b.n	833f0 <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83490:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   83492:	4a26      	ldr	r2, [pc, #152]	; (8352c <udc_process_setup+0x274>)
   83494:	e7e7      	b.n	83466 <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83496:	2012      	movs	r0, #18
		str = udc_string_product_name;
   83498:	4a25      	ldr	r2, [pc, #148]	; (83530 <udc_process_setup+0x278>)
   8349a:	e7e4      	b.n	83466 <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8349c:	2b01      	cmp	r3, #1
   8349e:	f47f af20 	bne.w	832e2 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   834a2:	2101      	movs	r1, #1
   834a4:	4823      	ldr	r0, [pc, #140]	; (83534 <udc_process_setup+0x27c>)
   834a6:	4b19      	ldr	r3, [pc, #100]	; (8350c <udc_process_setup+0x254>)
   834a8:	4798      	blx	r3
	return true;
   834aa:	e07e      	b.n	835aa <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   834ac:	2a01      	cmp	r2, #1
   834ae:	d149      	bne.n	83544 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   834b0:	4a14      	ldr	r2, [pc, #80]	; (83504 <udc_process_setup+0x24c>)
   834b2:	7852      	ldrb	r2, [r2, #1]
   834b4:	2a0a      	cmp	r2, #10
   834b6:	f47f af14 	bne.w	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   834ba:	2b01      	cmp	r3, #1
   834bc:	f47f af11 	bne.w	832e2 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   834c0:	4b1c      	ldr	r3, [pc, #112]	; (83534 <udc_process_setup+0x27c>)
   834c2:	781b      	ldrb	r3, [r3, #0]
   834c4:	2b00      	cmp	r3, #0
   834c6:	f43f af0c 	beq.w	832e2 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   834ca:	4b0e      	ldr	r3, [pc, #56]	; (83504 <udc_process_setup+0x24c>)
   834cc:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   834ce:	4b1a      	ldr	r3, [pc, #104]	; (83538 <udc_process_setup+0x280>)
   834d0:	681d      	ldr	r5, [r3, #0]
   834d2:	682b      	ldr	r3, [r5, #0]
   834d4:	791b      	ldrb	r3, [r3, #4]
   834d6:	42a3      	cmp	r3, r4
   834d8:	f67f af03 	bls.w	832e2 <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   834dc:	2100      	movs	r1, #0
   834de:	4620      	mov	r0, r4
   834e0:	4b16      	ldr	r3, [pc, #88]	; (8353c <udc_process_setup+0x284>)
   834e2:	4798      	blx	r3
   834e4:	2800      	cmp	r0, #0
   834e6:	f43f aefc 	beq.w	832e2 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   834ea:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   834ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   834f0:	68db      	ldr	r3, [r3, #12]
   834f2:	4798      	blx	r3
   834f4:	4b12      	ldr	r3, [pc, #72]	; (83540 <udc_process_setup+0x288>)
   834f6:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   834f8:	2101      	movs	r1, #1
   834fa:	4618      	mov	r0, r3
   834fc:	4b03      	ldr	r3, [pc, #12]	; (8350c <udc_process_setup+0x254>)
   834fe:	4798      	blx	r3
	return true;
   83500:	e053      	b.n	835aa <udc_process_setup+0x2f2>
   83502:	bf00      	nop
   83504:	2000269c 	.word	0x2000269c
   83508:	200008d8 	.word	0x200008d8
   8350c:	00084d19 	.word	0x00084d19
   83510:	20002074 	.word	0x20002074
   83514:	00084cb1 	.word	0x00084cb1
   83518:	200001d0 	.word	0x200001d0
   8351c:	0008cab4 	.word	0x0008cab4
   83520:	20000988 	.word	0x20000988
   83524:	20000864 	.word	0x20000864
   83528:	200008a8 	.word	0x200008a8
   8352c:	200008ac 	.word	0x200008ac
   83530:	200008c4 	.word	0x200008c4
   83534:	20002079 	.word	0x20002079
   83538:	2000207c 	.word	0x2000207c
   8353c:	000830e1 	.word	0x000830e1
   83540:	20002078 	.word	0x20002078
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83544:	2a02      	cmp	r2, #2
   83546:	f47f aecc 	bne.w	832e2 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8354a:	4a93      	ldr	r2, [pc, #588]	; (83798 <udc_process_setup+0x4e0>)
   8354c:	7852      	ldrb	r2, [r2, #1]
   8354e:	2a00      	cmp	r2, #0
   83550:	f47f aec7 	bne.w	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83554:	2b02      	cmp	r3, #2
   83556:	f47f aec4 	bne.w	832e2 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8355a:	4b8f      	ldr	r3, [pc, #572]	; (83798 <udc_process_setup+0x4e0>)
   8355c:	7918      	ldrb	r0, [r3, #4]
   8355e:	4b8f      	ldr	r3, [pc, #572]	; (8379c <udc_process_setup+0x4e4>)
   83560:	4798      	blx	r3
   83562:	4b8f      	ldr	r3, [pc, #572]	; (837a0 <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83564:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83566:	2102      	movs	r1, #2
   83568:	4618      	mov	r0, r3
   8356a:	4b8e      	ldr	r3, [pc, #568]	; (837a4 <udc_process_setup+0x4ec>)
   8356c:	4798      	blx	r3
	return true;
   8356e:	e01c      	b.n	835aa <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83570:	f012 021f 	ands.w	r2, r2, #31
   83574:	f040 80b1 	bne.w	836da <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   83578:	4b87      	ldr	r3, [pc, #540]	; (83798 <udc_process_setup+0x4e0>)
   8357a:	785b      	ldrb	r3, [r3, #1]
   8357c:	3b01      	subs	r3, #1
   8357e:	2b08      	cmp	r3, #8
   83580:	f200 80ab 	bhi.w	836da <udc_process_setup+0x422>
   83584:	e8df f013 	tbh	[pc, r3, lsl #1]
   83588:	00a90013 	.word	0x00a90013
   8358c:	00a90023 	.word	0x00a90023
   83590:	00a90009 	.word	0x00a90009
   83594:	00a900a9 	.word	0x00a900a9
   83598:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   8359a:	4b7f      	ldr	r3, [pc, #508]	; (83798 <udc_process_setup+0x4e0>)
   8359c:	88db      	ldrh	r3, [r3, #6]
   8359e:	2b00      	cmp	r3, #0
   835a0:	f47f ae9f 	bne.w	832e2 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   835a4:	4b7c      	ldr	r3, [pc, #496]	; (83798 <udc_process_setup+0x4e0>)
   835a6:	4a80      	ldr	r2, [pc, #512]	; (837a8 <udc_process_setup+0x4f0>)
   835a8:	611a      	str	r2, [r3, #16]
			return true;
   835aa:	2301      	movs	r3, #1
   835ac:	e6a8      	b.n	83300 <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   835ae:	4b7a      	ldr	r3, [pc, #488]	; (83798 <udc_process_setup+0x4e0>)
   835b0:	88db      	ldrh	r3, [r3, #6]
   835b2:	2b00      	cmp	r3, #0
   835b4:	f47f ae95 	bne.w	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   835b8:	4b77      	ldr	r3, [pc, #476]	; (83798 <udc_process_setup+0x4e0>)
   835ba:	885b      	ldrh	r3, [r3, #2]
   835bc:	2b01      	cmp	r3, #1
   835be:	f47f ae90 	bne.w	832e2 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   835c2:	4a7a      	ldr	r2, [pc, #488]	; (837ac <udc_process_setup+0x4f4>)
   835c4:	8813      	ldrh	r3, [r2, #0]
   835c6:	f023 0302 	bic.w	r3, r3, #2
   835ca:	8013      	strh	r3, [r2, #0]
		return true;
   835cc:	e7ed      	b.n	835aa <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   835ce:	4b72      	ldr	r3, [pc, #456]	; (83798 <udc_process_setup+0x4e0>)
   835d0:	88db      	ldrh	r3, [r3, #6]
   835d2:	2b00      	cmp	r3, #0
   835d4:	f47f ae85 	bne.w	832e2 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   835d8:	4b6f      	ldr	r3, [pc, #444]	; (83798 <udc_process_setup+0x4e0>)
   835da:	885b      	ldrh	r3, [r3, #2]
   835dc:	2b02      	cmp	r3, #2
   835de:	f47f ae80 	bne.w	832e2 <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   835e2:	4b73      	ldr	r3, [pc, #460]	; (837b0 <udc_process_setup+0x4f8>)
   835e4:	4798      	blx	r3
   835e6:	2800      	cmp	r0, #0
   835e8:	f43f ae7b 	beq.w	832e2 <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   835ec:	4b6a      	ldr	r3, [pc, #424]	; (83798 <udc_process_setup+0x4e0>)
   835ee:	791b      	ldrb	r3, [r3, #4]
   835f0:	2b00      	cmp	r3, #0
   835f2:	f47f ae76 	bne.w	832e2 <udc_process_setup+0x2a>
		udc_reset();
   835f6:	4b6f      	ldr	r3, [pc, #444]	; (837b4 <udc_process_setup+0x4fc>)
   835f8:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   835fa:	4b67      	ldr	r3, [pc, #412]	; (83798 <udc_process_setup+0x4e0>)
   835fc:	889b      	ldrh	r3, [r3, #4]
   835fe:	0a1b      	lsrs	r3, r3, #8
   83600:	3b01      	subs	r3, #1
   83602:	2b03      	cmp	r3, #3
   83604:	f200 80b7 	bhi.w	83776 <udc_process_setup+0x4be>
   83608:	e8df f003 	tbb	[pc, r3]
   8360c:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83610:	4b61      	ldr	r3, [pc, #388]	; (83798 <udc_process_setup+0x4e0>)
   83612:	4a69      	ldr	r2, [pc, #420]	; (837b8 <udc_process_setup+0x500>)
   83614:	611a      	str	r2, [r3, #16]
			return true;
   83616:	e7c8      	b.n	835aa <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83618:	4b5f      	ldr	r3, [pc, #380]	; (83798 <udc_process_setup+0x4e0>)
   8361a:	4a68      	ldr	r2, [pc, #416]	; (837bc <udc_process_setup+0x504>)
   8361c:	611a      	str	r2, [r3, #16]
			return true;
   8361e:	e7c4      	b.n	835aa <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83620:	4b5d      	ldr	r3, [pc, #372]	; (83798 <udc_process_setup+0x4e0>)
   83622:	4a67      	ldr	r2, [pc, #412]	; (837c0 <udc_process_setup+0x508>)
   83624:	611a      	str	r2, [r3, #16]
			return true;
   83626:	e7c0      	b.n	835aa <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83628:	4b5b      	ldr	r3, [pc, #364]	; (83798 <udc_process_setup+0x4e0>)
   8362a:	4a66      	ldr	r2, [pc, #408]	; (837c4 <udc_process_setup+0x50c>)
   8362c:	611a      	str	r2, [r3, #16]
			return true;
   8362e:	e7bc      	b.n	835aa <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   83630:	4b59      	ldr	r3, [pc, #356]	; (83798 <udc_process_setup+0x4e0>)
   83632:	88db      	ldrh	r3, [r3, #6]
   83634:	2b00      	cmp	r3, #0
   83636:	f47f ae54 	bne.w	832e2 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   8363a:	4b63      	ldr	r3, [pc, #396]	; (837c8 <udc_process_setup+0x510>)
   8363c:	4798      	blx	r3
   8363e:	2800      	cmp	r0, #0
   83640:	f43f ae4f 	beq.w	832e2 <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   83644:	4b5a      	ldr	r3, [pc, #360]	; (837b0 <udc_process_setup+0x4f8>)
   83646:	4798      	blx	r3
   83648:	2800      	cmp	r0, #0
   8364a:	d034      	beq.n	836b6 <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   8364c:	4b5f      	ldr	r3, [pc, #380]	; (837cc <udc_process_setup+0x514>)
   8364e:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83650:	7c5a      	ldrb	r2, [r3, #17]
   83652:	4b51      	ldr	r3, [pc, #324]	; (83798 <udc_process_setup+0x4e0>)
   83654:	789b      	ldrb	r3, [r3, #2]
   83656:	429a      	cmp	r2, r3
   83658:	f4ff ae43 	bcc.w	832e2 <udc_process_setup+0x2a>
	udc_reset();
   8365c:	4b55      	ldr	r3, [pc, #340]	; (837b4 <udc_process_setup+0x4fc>)
   8365e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83660:	4b4d      	ldr	r3, [pc, #308]	; (83798 <udc_process_setup+0x4e0>)
   83662:	789b      	ldrb	r3, [r3, #2]
   83664:	4a5a      	ldr	r2, [pc, #360]	; (837d0 <udc_process_setup+0x518>)
   83666:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   83668:	2b00      	cmp	r3, #0
   8366a:	d09e      	beq.n	835aa <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   8366c:	4b50      	ldr	r3, [pc, #320]	; (837b0 <udc_process_setup+0x4f8>)
   8366e:	4798      	blx	r3
   83670:	2800      	cmp	r0, #0
   83672:	d028      	beq.n	836c6 <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83674:	4b56      	ldr	r3, [pc, #344]	; (837d0 <udc_process_setup+0x518>)
   83676:	781b      	ldrb	r3, [r3, #0]
   83678:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   8367c:	3a01      	subs	r2, #1
   8367e:	4b53      	ldr	r3, [pc, #332]	; (837cc <udc_process_setup+0x514>)
   83680:	691b      	ldr	r3, [r3, #16]
   83682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83686:	4a53      	ldr	r2, [pc, #332]	; (837d4 <udc_process_setup+0x51c>)
   83688:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8368a:	681b      	ldr	r3, [r3, #0]
   8368c:	791b      	ldrb	r3, [r3, #4]
   8368e:	2b00      	cmp	r3, #0
   83690:	d08b      	beq.n	835aa <udc_process_setup+0x2f2>
   83692:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   83694:	4626      	mov	r6, r4
   83696:	4d50      	ldr	r5, [pc, #320]	; (837d8 <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83698:	4f4e      	ldr	r7, [pc, #312]	; (837d4 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   8369a:	4631      	mov	r1, r6
   8369c:	b2e0      	uxtb	r0, r4
   8369e:	47a8      	blx	r5
   836a0:	2800      	cmp	r0, #0
   836a2:	f43f ae1e 	beq.w	832e2 <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   836a6:	3401      	adds	r4, #1
   836a8:	683b      	ldr	r3, [r7, #0]
   836aa:	681b      	ldr	r3, [r3, #0]
   836ac:	791a      	ldrb	r2, [r3, #4]
   836ae:	b2e3      	uxtb	r3, r4
   836b0:	429a      	cmp	r2, r3
   836b2:	d8f2      	bhi.n	8369a <udc_process_setup+0x3e2>
   836b4:	e779      	b.n	835aa <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   836b6:	4b45      	ldr	r3, [pc, #276]	; (837cc <udc_process_setup+0x514>)
   836b8:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   836ba:	7c5a      	ldrb	r2, [r3, #17]
   836bc:	4b36      	ldr	r3, [pc, #216]	; (83798 <udc_process_setup+0x4e0>)
   836be:	789b      	ldrb	r3, [r3, #2]
   836c0:	429a      	cmp	r2, r3
   836c2:	d2cb      	bcs.n	8365c <udc_process_setup+0x3a4>
   836c4:	e60d      	b.n	832e2 <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   836c6:	4b42      	ldr	r3, [pc, #264]	; (837d0 <udc_process_setup+0x518>)
   836c8:	781b      	ldrb	r3, [r3, #0]
   836ca:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   836ce:	3a01      	subs	r2, #1
   836d0:	4b3e      	ldr	r3, [pc, #248]	; (837cc <udc_process_setup+0x514>)
   836d2:	685b      	ldr	r3, [r3, #4]
   836d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   836d8:	e7d5      	b.n	83686 <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   836da:	2a01      	cmp	r2, #1
   836dc:	d01a      	beq.n	83714 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   836de:	2a02      	cmp	r2, #2
   836e0:	f47f adff 	bne.w	832e2 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   836e4:	4b2c      	ldr	r3, [pc, #176]	; (83798 <udc_process_setup+0x4e0>)
   836e6:	785b      	ldrb	r3, [r3, #1]
   836e8:	2b01      	cmp	r3, #1
   836ea:	d031      	beq.n	83750 <udc_process_setup+0x498>
   836ec:	2b03      	cmp	r3, #3
   836ee:	f47f adf8 	bne.w	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   836f2:	4a29      	ldr	r2, [pc, #164]	; (83798 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   836f4:	88d3      	ldrh	r3, [r2, #6]
   836f6:	8852      	ldrh	r2, [r2, #2]
   836f8:	4313      	orrs	r3, r2
   836fa:	b29b      	uxth	r3, r3
   836fc:	2b00      	cmp	r3, #0
   836fe:	f47f adf0 	bne.w	832e2 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83702:	4c25      	ldr	r4, [pc, #148]	; (83798 <udc_process_setup+0x4e0>)
   83704:	7920      	ldrb	r0, [r4, #4]
   83706:	4b35      	ldr	r3, [pc, #212]	; (837dc <udc_process_setup+0x524>)
   83708:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8370a:	7920      	ldrb	r0, [r4, #4]
   8370c:	4b34      	ldr	r3, [pc, #208]	; (837e0 <udc_process_setup+0x528>)
   8370e:	4798      	blx	r3
   83710:	4603      	mov	r3, r0
   83712:	e02c      	b.n	8376e <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   83714:	4b20      	ldr	r3, [pc, #128]	; (83798 <udc_process_setup+0x4e0>)
   83716:	785b      	ldrb	r3, [r3, #1]
   83718:	2b0b      	cmp	r3, #11
   8371a:	f47f ade2 	bne.w	832e2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   8371e:	4b1e      	ldr	r3, [pc, #120]	; (83798 <udc_process_setup+0x4e0>)
   83720:	88db      	ldrh	r3, [r3, #6]
   83722:	2b00      	cmp	r3, #0
   83724:	f47f addd 	bne.w	832e2 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   83728:	4b29      	ldr	r3, [pc, #164]	; (837d0 <udc_process_setup+0x518>)
   8372a:	781b      	ldrb	r3, [r3, #0]
   8372c:	2b00      	cmp	r3, #0
   8372e:	f43f add8 	beq.w	832e2 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83732:	4b19      	ldr	r3, [pc, #100]	; (83798 <udc_process_setup+0x4e0>)
   83734:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   83736:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   83738:	4620      	mov	r0, r4
   8373a:	4b2a      	ldr	r3, [pc, #168]	; (837e4 <udc_process_setup+0x52c>)
   8373c:	4798      	blx	r3
   8373e:	2800      	cmp	r0, #0
   83740:	f43f adcf 	beq.w	832e2 <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   83744:	b2e9      	uxtb	r1, r5
   83746:	4620      	mov	r0, r4
   83748:	4b23      	ldr	r3, [pc, #140]	; (837d8 <udc_process_setup+0x520>)
   8374a:	4798      	blx	r3
   8374c:	4603      	mov	r3, r0
   8374e:	e00e      	b.n	8376e <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   83750:	4a11      	ldr	r2, [pc, #68]	; (83798 <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83752:	88d3      	ldrh	r3, [r2, #6]
   83754:	8852      	ldrh	r2, [r2, #2]
   83756:	4313      	orrs	r3, r2
   83758:	b29b      	uxth	r3, r3
   8375a:	2b00      	cmp	r3, #0
   8375c:	f47f adc1 	bne.w	832e2 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83760:	4b0d      	ldr	r3, [pc, #52]	; (83798 <udc_process_setup+0x4e0>)
   83762:	7918      	ldrb	r0, [r3, #4]
   83764:	4b20      	ldr	r3, [pc, #128]	; (837e8 <udc_process_setup+0x530>)
   83766:	4798      	blx	r3
   83768:	4603      	mov	r3, r0
   8376a:	e000      	b.n	8376e <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8376c:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   8376e:	2b00      	cmp	r3, #0
   83770:	f47f adc6 	bne.w	83300 <udc_process_setup+0x48>
   83774:	e5b5      	b.n	832e2 <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83776:	2300      	movs	r3, #0
   83778:	e7f9      	b.n	8376e <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   8377a:	4b15      	ldr	r3, [pc, #84]	; (837d0 <udc_process_setup+0x518>)
   8377c:	781b      	ldrb	r3, [r3, #0]
   8377e:	2b00      	cmp	r3, #0
   83780:	d07c      	beq.n	8387c <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83782:	4b05      	ldr	r3, [pc, #20]	; (83798 <udc_process_setup+0x4e0>)
   83784:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83786:	4b13      	ldr	r3, [pc, #76]	; (837d4 <udc_process_setup+0x51c>)
   83788:	681d      	ldr	r5, [r3, #0]
   8378a:	682b      	ldr	r3, [r5, #0]
   8378c:	791b      	ldrb	r3, [r3, #4]
   8378e:	42a3      	cmp	r3, r4
   83790:	d82c      	bhi.n	837ec <udc_process_setup+0x534>
	return false;
   83792:	2300      	movs	r3, #0
   83794:	e5b4      	b.n	83300 <udc_process_setup+0x48>
   83796:	bf00      	nop
   83798:	2000269c 	.word	0x2000269c
   8379c:	00084d7d 	.word	0x00084d7d
   837a0:	20002076 	.word	0x20002076
   837a4:	00084d19 	.word	0x00084d19
   837a8:	000830c9 	.word	0x000830c9
   837ac:	20002074 	.word	0x20002074
   837b0:	00084cb1 	.word	0x00084cb1
   837b4:	0008322d 	.word	0x0008322d
   837b8:	00085365 	.word	0x00085365
   837bc:	00085389 	.word	0x00085389
   837c0:	000853ad 	.word	0x000853ad
   837c4:	000853c5 	.word	0x000853c5
   837c8:	00084ce9 	.word	0x00084ce9
   837cc:	200001d0 	.word	0x200001d0
   837d0:	20002079 	.word	0x20002079
   837d4:	2000207c 	.word	0x2000207c
   837d8:	000831b9 	.word	0x000831b9
   837dc:	000852f1 	.word	0x000852f1
   837e0:	00084db1 	.word	0x00084db1
   837e4:	00083151 	.word	0x00083151
   837e8:	00084e75 	.word	0x00084e75
	if (!udc_update_iface_desc(iface_num, 0)) {
   837ec:	2100      	movs	r1, #0
   837ee:	4620      	mov	r0, r4
   837f0:	4b23      	ldr	r3, [pc, #140]	; (83880 <udc_process_setup+0x5c8>)
   837f2:	4798      	blx	r3
   837f4:	2800      	cmp	r0, #0
   837f6:	f43f ad7b 	beq.w	832f0 <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   837fa:	686b      	ldr	r3, [r5, #4]
   837fc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83800:	68eb      	ldr	r3, [r5, #12]
   83802:	4798      	blx	r3
   83804:	4601      	mov	r1, r0
   83806:	4620      	mov	r0, r4
   83808:	4b1d      	ldr	r3, [pc, #116]	; (83880 <udc_process_setup+0x5c8>)
   8380a:	4798      	blx	r3
   8380c:	2800      	cmp	r0, #0
   8380e:	f43f ad6f 	beq.w	832f0 <udc_process_setup+0x38>
	return udi_api->setup();
   83812:	68ab      	ldr	r3, [r5, #8]
   83814:	4798      	blx	r3
		if (udc_req_iface()) {
   83816:	4603      	mov	r3, r0
   83818:	2800      	cmp	r0, #0
   8381a:	f47f ad71 	bne.w	83300 <udc_process_setup+0x48>
   8381e:	e567      	b.n	832f0 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   83820:	4b18      	ldr	r3, [pc, #96]	; (83884 <udc_process_setup+0x5cc>)
   83822:	781b      	ldrb	r3, [r3, #0]
   83824:	b323      	cbz	r3, 83870 <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83826:	4b18      	ldr	r3, [pc, #96]	; (83888 <udc_process_setup+0x5d0>)
   83828:	681a      	ldr	r2, [r3, #0]
   8382a:	6813      	ldr	r3, [r2, #0]
   8382c:	791b      	ldrb	r3, [r3, #4]
   8382e:	b30b      	cbz	r3, 83874 <udc_process_setup+0x5bc>
   83830:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83832:	4e13      	ldr	r6, [pc, #76]	; (83880 <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83834:	4f14      	ldr	r7, [pc, #80]	; (83888 <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83836:	b2ec      	uxtb	r4, r5
   83838:	6853      	ldr	r3, [r2, #4]
   8383a:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8383e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   83842:	4798      	blx	r3
   83844:	4601      	mov	r1, r0
   83846:	4620      	mov	r0, r4
   83848:	47b0      	blx	r6
   8384a:	4603      	mov	r3, r0
   8384c:	2800      	cmp	r0, #0
   8384e:	f43f ad57 	beq.w	83300 <udc_process_setup+0x48>
		if (udi_api->setup()) {
   83852:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83856:	4798      	blx	r3
   83858:	4603      	mov	r3, r0
   8385a:	2800      	cmp	r0, #0
   8385c:	f47f ad50 	bne.w	83300 <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83860:	683a      	ldr	r2, [r7, #0]
   83862:	3501      	adds	r5, #1
   83864:	6811      	ldr	r1, [r2, #0]
   83866:	7908      	ldrb	r0, [r1, #4]
   83868:	b2e9      	uxtb	r1, r5
   8386a:	4288      	cmp	r0, r1
   8386c:	d8e3      	bhi.n	83836 <udc_process_setup+0x57e>
   8386e:	e547      	b.n	83300 <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   83870:	2300      	movs	r3, #0
   83872:	e545      	b.n	83300 <udc_process_setup+0x48>
	return false;
   83874:	2300      	movs	r3, #0
   83876:	e543      	b.n	83300 <udc_process_setup+0x48>
			return false; // Error from USB host
   83878:	2300      	movs	r3, #0
   8387a:	e541      	b.n	83300 <udc_process_setup+0x48>
	return false;
   8387c:	2300      	movs	r3, #0
   8387e:	e53f      	b.n	83300 <udc_process_setup+0x48>
   83880:	000830e1 	.word	0x000830e1
   83884:	20002079 	.word	0x20002079
   83888:	2000207c 	.word	0x2000207c

0008388c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   8388c:	4b0b      	ldr	r3, [pc, #44]	; (838bc <cpu_irq_enter_critical+0x30>)
   8388e:	681b      	ldr	r3, [r3, #0]
   83890:	b95b      	cbnz	r3, 838aa <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83892:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   83896:	b96b      	cbnz	r3, 838b4 <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   83898:	b672      	cpsid	i
   8389a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   8389e:	4b08      	ldr	r3, [pc, #32]	; (838c0 <cpu_irq_enter_critical+0x34>)
   838a0:	2200      	movs	r2, #0
   838a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   838a4:	4b07      	ldr	r3, [pc, #28]	; (838c4 <cpu_irq_enter_critical+0x38>)
   838a6:	2201      	movs	r2, #1
   838a8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   838aa:	4a04      	ldr	r2, [pc, #16]	; (838bc <cpu_irq_enter_critical+0x30>)
   838ac:	6813      	ldr	r3, [r2, #0]
   838ae:	3301      	adds	r3, #1
   838b0:	6013      	str	r3, [r2, #0]
}
   838b2:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   838b4:	4b03      	ldr	r3, [pc, #12]	; (838c4 <cpu_irq_enter_critical+0x38>)
   838b6:	2200      	movs	r2, #0
   838b8:	701a      	strb	r2, [r3, #0]
   838ba:	e7f6      	b.n	838aa <cpu_irq_enter_critical+0x1e>
   838bc:	20002084 	.word	0x20002084
   838c0:	20000982 	.word	0x20000982
   838c4:	20002088 	.word	0x20002088

000838c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   838c8:	4b07      	ldr	r3, [pc, #28]	; (838e8 <cpu_irq_leave_critical+0x20>)
   838ca:	681a      	ldr	r2, [r3, #0]
   838cc:	3a01      	subs	r2, #1
   838ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   838d0:	681b      	ldr	r3, [r3, #0]
   838d2:	b943      	cbnz	r3, 838e6 <cpu_irq_leave_critical+0x1e>
   838d4:	4b05      	ldr	r3, [pc, #20]	; (838ec <cpu_irq_leave_critical+0x24>)
   838d6:	781b      	ldrb	r3, [r3, #0]
   838d8:	b12b      	cbz	r3, 838e6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   838da:	4b05      	ldr	r3, [pc, #20]	; (838f0 <cpu_irq_leave_critical+0x28>)
   838dc:	2201      	movs	r2, #1
   838de:	701a      	strb	r2, [r3, #0]
   838e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   838e4:	b662      	cpsie	i
	}
}
   838e6:	4770      	bx	lr
   838e8:	20002084 	.word	0x20002084
   838ec:	20002088 	.word	0x20002088
   838f0:	20000982 	.word	0x20000982

000838f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   838f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   838f8:	b980      	cbnz	r0, 8391c <_read+0x28>
   838fa:	460c      	mov	r4, r1
   838fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   838fe:	2a00      	cmp	r2, #0
   83900:	dd0f      	ble.n	83922 <_read+0x2e>
   83902:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83904:	4e08      	ldr	r6, [pc, #32]	; (83928 <_read+0x34>)
   83906:	4d09      	ldr	r5, [pc, #36]	; (8392c <_read+0x38>)
   83908:	6830      	ldr	r0, [r6, #0]
   8390a:	682b      	ldr	r3, [r5, #0]
   8390c:	4621      	mov	r1, r4
   8390e:	4798      	blx	r3
		ptr++;
   83910:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83912:	42bc      	cmp	r4, r7
   83914:	d1f8      	bne.n	83908 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83916:	4640      	mov	r0, r8
   83918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8391c:	f04f 38ff 	mov.w	r8, #4294967295
   83920:	e7f9      	b.n	83916 <_read+0x22>
	int nChars = 0;
   83922:	4680      	mov	r8, r0
   83924:	e7f7      	b.n	83916 <_read+0x22>
   83926:	bf00      	nop
   83928:	20002698 	.word	0x20002698
   8392c:	20002690 	.word	0x20002690

00083930 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83930:	3801      	subs	r0, #1
   83932:	2802      	cmp	r0, #2
   83934:	d81a      	bhi.n	8396c <_write+0x3c>
{
   83936:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8393a:	460e      	mov	r6, r1
   8393c:	4617      	mov	r7, r2
		return -1;
	}

	for (; len != 0; --len) {
   8393e:	b1c2      	cbz	r2, 83972 <_write+0x42>
   83940:	1e4d      	subs	r5, r1, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83942:	f8df 903c 	ldr.w	r9, [pc, #60]	; 83980 <_write+0x50>
   83946:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83984 <_write+0x54>
   8394a:	f8d9 0000 	ldr.w	r0, [r9]
   8394e:	462c      	mov	r4, r5
   83950:	f8d8 3000 	ldr.w	r3, [r8]
   83954:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   83958:	4798      	blx	r3
   8395a:	2800      	cmp	r0, #0
   8395c:	db0b      	blt.n	83976 <_write+0x46>
			return -1;
		}
		++nChars;
   8395e:	3402      	adds	r4, #2
   83960:	1ba0      	subs	r0, r4, r6
	for (; len != 0; --len) {
   83962:	43eb      	mvns	r3, r5
   83964:	443b      	add	r3, r7
   83966:	42f3      	cmn	r3, r6
   83968:	d1ef      	bne.n	8394a <_write+0x1a>
   8396a:	e006      	b.n	8397a <_write+0x4a>
		return -1;
   8396c:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return nChars;
}
   83970:	4770      	bx	lr
	int nChars = 0;
   83972:	4610      	mov	r0, r2
   83974:	e001      	b.n	8397a <_write+0x4a>
			return -1;
   83976:	f04f 30ff 	mov.w	r0, #4294967295
}
   8397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8397e:	bf00      	nop
   83980:	20002698 	.word	0x20002698
   83984:	20002694 	.word	0x20002694

00083988 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   83988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8398a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8398e:	2006      	movs	r0, #6
   83990:	4c17      	ldr	r4, [pc, #92]	; (839f0 <iopins_normal+0x68>)
   83992:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83994:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83998:	2007      	movs	r0, #7
   8399a:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   8399c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   839a0:	201d      	movs	r0, #29
   839a2:	47a0      	blx	r4
	board_power(0);
   839a4:	201d      	movs	r0, #29
   839a6:	4b13      	ldr	r3, [pc, #76]	; (839f4 <iopins_normal+0x6c>)
   839a8:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   839aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839ae:	2008      	movs	r0, #8
   839b0:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   839b2:	2008      	movs	r0, #8
   839b4:	4e10      	ldr	r6, [pc, #64]	; (839f8 <iopins_normal+0x70>)
   839b6:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   839b8:	4f10      	ldr	r7, [pc, #64]	; (839fc <iopins_normal+0x74>)
   839ba:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   839be:	21ff      	movs	r1, #255	; 0xff
   839c0:	4638      	mov	r0, r7
   839c2:	4d0f      	ldr	r5, [pc, #60]	; (83a00 <iopins_normal+0x78>)
   839c4:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   839c6:	21ff      	movs	r1, #255	; 0xff
   839c8:	4638      	mov	r0, r7
   839ca:	4b0e      	ldr	r3, [pc, #56]	; (83a04 <iopins_normal+0x7c>)
   839cc:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   839ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   839d2:	2035      	movs	r0, #53	; 0x35
   839d4:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   839d6:	2035      	movs	r0, #53	; 0x35
   839d8:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   839da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   839de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   839e2:	4809      	ldr	r0, [pc, #36]	; (83a08 <iopins_normal+0x80>)
   839e4:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   839e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   839ea:	201b      	movs	r0, #27
   839ec:	47a0      	blx	r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   839ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839f0:	00083ba5 	.word	0x00083ba5
   839f4:	00083b8b 	.word	0x00083b8b
   839f8:	00083b71 	.word	0x00083b71
   839fc:	400e0e00 	.word	0x400e0e00
   83a00:	00083c75 	.word	0x00083c75
   83a04:	00083b43 	.word	0x00083b43
   83a08:	400e0c00 	.word	0x400e0c00

00083a0c <board_init>:

void board_init(void)
{
   83a0c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83a0e:	4b06      	ldr	r3, [pc, #24]	; (83a28 <board_init+0x1c>)
   83a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83a14:	605a      	str	r2, [r3, #4]
   83a16:	200a      	movs	r0, #10
   83a18:	4c04      	ldr	r4, [pc, #16]	; (83a2c <board_init+0x20>)
   83a1a:	47a0      	blx	r4
   83a1c:	200b      	movs	r0, #11
   83a1e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83a20:	4b03      	ldr	r3, [pc, #12]	; (83a30 <board_init+0x24>)
   83a22:	4798      	blx	r3

}
   83a24:	bd10      	pop	{r4, pc}
   83a26:	bf00      	nop
   83a28:	400e1250 	.word	0x400e1250
   83a2c:	00083ee1 	.word	0x00083ee1
   83a30:	00083989 	.word	0x00083989

00083a34 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83a34:	b510      	push	{r4, lr}
   83a36:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83a38:	2806      	cmp	r0, #6
   83a3a:	d002      	beq.n	83a42 <LED_Off+0xe>
   83a3c:	2c07      	cmp	r4, #7
   83a3e:	d004      	beq.n	83a4a <LED_Off+0x16>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   83a40:	bd10      	pop	{r4, pc}
				gpio_set_pin_low(led_gpio);
   83a42:	2006      	movs	r0, #6
   83a44:	4b03      	ldr	r3, [pc, #12]	; (83a54 <LED_Off+0x20>)
   83a46:	4798      	blx	r3
   83a48:	e7f8      	b.n	83a3c <LED_Off+0x8>
   83a4a:	2007      	movs	r0, #7
   83a4c:	4b01      	ldr	r3, [pc, #4]	; (83a54 <LED_Off+0x20>)
   83a4e:	4798      	blx	r3
}
   83a50:	e7f6      	b.n	83a40 <LED_Off+0xc>
   83a52:	bf00      	nop
   83a54:	00083b8b 	.word	0x00083b8b

00083a58 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   83a58:	b510      	push	{r4, lr}
   83a5a:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83a5c:	2806      	cmp	r0, #6
   83a5e:	d002      	beq.n	83a66 <LED_On+0xe>
   83a60:	2c07      	cmp	r4, #7
   83a62:	d004      	beq.n	83a6e <LED_On+0x16>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   83a64:	bd10      	pop	{r4, pc}
				gpio_set_pin_high(led_gpio);
   83a66:	2006      	movs	r0, #6
   83a68:	4b03      	ldr	r3, [pc, #12]	; (83a78 <LED_On+0x20>)
   83a6a:	4798      	blx	r3
   83a6c:	e7f8      	b.n	83a60 <LED_On+0x8>
   83a6e:	2007      	movs	r0, #7
   83a70:	4b01      	ldr	r3, [pc, #4]	; (83a78 <LED_On+0x20>)
   83a72:	4798      	blx	r3
}
   83a74:	e7f6      	b.n	83a64 <LED_On+0xc>
   83a76:	bf00      	nop
   83a78:	00083b71 	.word	0x00083b71

00083a7c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83a7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83a80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83a84:	670a      	str	r2, [r1, #112]	; 0x70
}
   83a86:	4770      	bx	lr

00083a88 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83a88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83a8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83a90:	674a      	str	r2, [r1, #116]	; 0x74
}
   83a92:	4770      	bx	lr

00083a94 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83a94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83a98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83a9c:	678a      	str	r2, [r1, #120]	; 0x78
}
   83a9e:	4770      	bx	lr

00083aa0 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83aa0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83aa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83aa8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   83aac:	4770      	bx	lr

00083aae <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83aae:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83ab0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83ab4:	d015      	beq.n	83ae2 <pio_set_peripheral+0x34>
   83ab6:	d80a      	bhi.n	83ace <pio_set_peripheral+0x20>
   83ab8:	b191      	cbz	r1, 83ae0 <pio_set_peripheral+0x32>
   83aba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83abe:	d10e      	bne.n	83ade <pio_set_peripheral+0x30>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83ac0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83ac2:	6f03      	ldr	r3, [r0, #112]	; 0x70
   83ac4:	400b      	ands	r3, r1
   83ac6:	ea23 0302 	bic.w	r3, r3, r2
   83aca:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83acc:	e007      	b.n	83ade <pio_set_peripheral+0x30>
	switch (ul_type) {
   83ace:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83ad2:	d005      	beq.n	83ae0 <pio_set_peripheral+0x32>
   83ad4:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
   83ad8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83adc:	d000      	beq.n	83ae0 <pio_set_peripheral+0x32>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83ade:	6042      	str	r2, [r0, #4]
}
   83ae0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   83ae2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83ae4:	4313      	orrs	r3, r2
   83ae6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83ae8:	e7f9      	b.n	83ade <pio_set_peripheral+0x30>

00083aea <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83aea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83aec:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83af0:	bf14      	ite	ne
   83af2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83af4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83af6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83afa:	bf14      	ite	ne
   83afc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   83afe:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83b00:	f012 0f02 	tst.w	r2, #2
   83b04:	d004      	beq.n	83b10 <pio_set_input+0x26>
		p_pio->PIO_SCIFSR = ul_mask;
   83b06:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   83b0a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   83b0c:	6001      	str	r1, [r0, #0]
}
   83b0e:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
   83b10:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83b14:	bf18      	it	ne
   83b16:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
   83b1a:	e7f6      	b.n	83b0a <pio_set_input+0x20>

00083b1c <pio_set_output>:
{
   83b1c:	b410      	push	{r4}
   83b1e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   83b20:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83b22:	b144      	cbz	r4, 83b36 <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83b24:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
   83b26:	b143      	cbz	r3, 83b3a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   83b28:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   83b2a:	b142      	cbz	r2, 83b3e <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
   83b2c:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   83b2e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83b30:	6001      	str	r1, [r0, #0]
}
   83b32:	bc10      	pop	{r4}
   83b34:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
   83b36:	6601      	str	r1, [r0, #96]	; 0x60
   83b38:	e7f5      	b.n	83b26 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   83b3a:	6541      	str	r1, [r0, #84]	; 0x54
   83b3c:	e7f5      	b.n	83b2a <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
   83b3e:	6341      	str	r1, [r0, #52]	; 0x34
   83b40:	e7f5      	b.n	83b2e <pio_set_output+0x12>

00083b42 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   83b42:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   83b46:	4770      	bx	lr

00083b48 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   83b48:	6381      	str	r1, [r0, #56]	; 0x38
}
   83b4a:	4770      	bx	lr

00083b4c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83b4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83b4e:	4770      	bx	lr

00083b50 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83b50:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83b52:	4770      	bx	lr

00083b54 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b54:	0943      	lsrs	r3, r0, #5
   83b56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b5a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83b5e:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b62:	f000 001f 	and.w	r0, r0, #31
   83b66:	fa23 f000 	lsr.w	r0, r3, r0
}
   83b6a:	f000 0001 	and.w	r0, r0, #1
   83b6e:	4770      	bx	lr

00083b70 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b70:	0943      	lsrs	r3, r0, #5
   83b72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b76:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83b7a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83b7c:	f000 001f 	and.w	r0, r0, #31
   83b80:	2201      	movs	r2, #1
   83b82:	fa02 f000 	lsl.w	r0, r2, r0
   83b86:	6318      	str	r0, [r3, #48]	; 0x30
}
   83b88:	4770      	bx	lr

00083b8a <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83b8a:	0943      	lsrs	r3, r0, #5
   83b8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83b90:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83b94:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83b96:	f000 001f 	and.w	r0, r0, #31
   83b9a:	2201      	movs	r2, #1
   83b9c:	fa02 f000 	lsl.w	r0, r2, r0
   83ba0:	6358      	str	r0, [r3, #52]	; 0x34
}
   83ba2:	4770      	bx	lr

00083ba4 <pio_configure_pin>:
{
   83ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   83ba6:	b083      	sub	sp, #12
   83ba8:	460e      	mov	r6, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83baa:	0943      	lsrs	r3, r0, #5
   83bac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83bb0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83bb4:	025d      	lsls	r5, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83bb6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   83bba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83bbe:	d032      	beq.n	83c26 <pio_configure_pin+0x82>
   83bc0:	d818      	bhi.n	83bf4 <pio_configure_pin+0x50>
   83bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83bc6:	d01d      	beq.n	83c04 <pio_configure_pin+0x60>
   83bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83bcc:	bf18      	it	ne
   83bce:	2000      	movne	r0, #0
   83bd0:	d116      	bne.n	83c00 <pio_configure_pin+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83bd2:	f000 001f 	and.w	r0, r0, #31
   83bd6:	2401      	movs	r4, #1
   83bd8:	4084      	lsls	r4, r0
   83bda:	4622      	mov	r2, r4
   83bdc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83be0:	4628      	mov	r0, r5
   83be2:	4b21      	ldr	r3, [pc, #132]	; (83c68 <pio_configure_pin+0xc4>)
   83be4:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83be6:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83bea:	bf12      	itee	ne
   83bec:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83bee:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83bf0:	2001      	moveq	r0, #1
   83bf2:	e005      	b.n	83c00 <pio_configure_pin+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83bf4:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
   83bf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83bfc:	d01e      	beq.n	83c3c <pio_configure_pin+0x98>
   83bfe:	2000      	movs	r0, #0
}
   83c00:	b003      	add	sp, #12
   83c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83c04:	f000 001f 	and.w	r0, r0, #31
   83c08:	2401      	movs	r4, #1
   83c0a:	4084      	lsls	r4, r0
   83c0c:	4622      	mov	r2, r4
   83c0e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83c12:	4628      	mov	r0, r5
   83c14:	4b14      	ldr	r3, [pc, #80]	; (83c68 <pio_configure_pin+0xc4>)
   83c16:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83c18:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83c1c:	bf12      	itee	ne
   83c1e:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83c20:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83c22:	2001      	moveq	r0, #1
   83c24:	e7ec      	b.n	83c00 <pio_configure_pin+0x5c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83c26:	f000 011f 	and.w	r1, r0, #31
   83c2a:	2401      	movs	r4, #1
   83c2c:	4632      	mov	r2, r6
   83c2e:	fa04 f101 	lsl.w	r1, r4, r1
   83c32:	4628      	mov	r0, r5
   83c34:	4b0d      	ldr	r3, [pc, #52]	; (83c6c <pio_configure_pin+0xc8>)
   83c36:	4798      	blx	r3
	return 1;
   83c38:	4620      	mov	r0, r4
		break;
   83c3a:	e7e1      	b.n	83c00 <pio_configure_pin+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83c3c:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83c40:	f000 011f 	and.w	r1, r0, #31
   83c44:	2701      	movs	r7, #1
   83c46:	ea06 0307 	and.w	r3, r6, r7
   83c4a:	9300      	str	r3, [sp, #0]
   83c4c:	f3c6 0380 	ubfx	r3, r6, #2, #1
   83c50:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83c54:	bf14      	ite	ne
   83c56:	2200      	movne	r2, #0
   83c58:	2201      	moveq	r2, #1
   83c5a:	fa07 f101 	lsl.w	r1, r7, r1
   83c5e:	4628      	mov	r0, r5
   83c60:	4c03      	ldr	r4, [pc, #12]	; (83c70 <pio_configure_pin+0xcc>)
   83c62:	47a0      	blx	r4
	return 1;
   83c64:	4638      	mov	r0, r7
		break;
   83c66:	e7cb      	b.n	83c00 <pio_configure_pin+0x5c>
   83c68:	00083aaf 	.word	0x00083aaf
   83c6c:	00083aeb 	.word	0x00083aeb
   83c70:	00083b1d 	.word	0x00083b1d

00083c74 <pio_configure_pin_group>:
{
   83c74:	b570      	push	{r4, r5, r6, lr}
   83c76:	b082      	sub	sp, #8
   83c78:	4605      	mov	r5, r0
   83c7a:	460e      	mov	r6, r1
   83c7c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   83c7e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   83c82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83c86:	d029      	beq.n	83cdc <pio_configure_pin_group+0x68>
   83c88:	d814      	bhi.n	83cb4 <pio_configure_pin_group+0x40>
   83c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83c8e:	d019      	beq.n	83cc4 <pio_configure_pin_group+0x50>
   83c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83c94:	bf18      	it	ne
   83c96:	2000      	movne	r0, #0
   83c98:	d112      	bne.n	83cc0 <pio_configure_pin_group+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83c9a:	460a      	mov	r2, r1
   83c9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83ca0:	4628      	mov	r0, r5
   83ca2:	4b18      	ldr	r3, [pc, #96]	; (83d04 <pio_configure_pin_group+0x90>)
   83ca4:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83ca6:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83caa:	bf12      	itee	ne
   83cac:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83cae:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83cb0:	2001      	moveq	r0, #1
   83cb2:	e005      	b.n	83cc0 <pio_configure_pin_group+0x4c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83cb4:	f002 43e0 	and.w	r3, r2, #1879048192	; 0x70000000
   83cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83cbc:	d012      	beq.n	83ce4 <pio_configure_pin_group+0x70>
   83cbe:	2000      	movs	r0, #0
}
   83cc0:	b002      	add	sp, #8
   83cc2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83cc4:	460a      	mov	r2, r1
   83cc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83cca:	4b0e      	ldr	r3, [pc, #56]	; (83d04 <pio_configure_pin_group+0x90>)
   83ccc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83cce:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83cd2:	bf12      	itee	ne
   83cd4:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83cd6:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83cd8:	2001      	moveq	r0, #1
   83cda:	e7f1      	b.n	83cc0 <pio_configure_pin_group+0x4c>
		pio_set_input(p_pio, ul_mask, ul_flags);
   83cdc:	4b0a      	ldr	r3, [pc, #40]	; (83d08 <pio_configure_pin_group+0x94>)
   83cde:	4798      	blx	r3
	return 1;
   83ce0:	2001      	movs	r0, #1
		break;
   83ce2:	e7ed      	b.n	83cc0 <pio_configure_pin_group+0x4c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83ce4:	f002 5260 	and.w	r2, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83ce8:	f004 0301 	and.w	r3, r4, #1
   83cec:	9300      	str	r3, [sp, #0]
   83cee:	f3c4 0380 	ubfx	r3, r4, #2, #1
   83cf2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83cf6:	bf14      	ite	ne
   83cf8:	2200      	movne	r2, #0
   83cfa:	2201      	moveq	r2, #1
   83cfc:	4c03      	ldr	r4, [pc, #12]	; (83d0c <pio_configure_pin_group+0x98>)
   83cfe:	47a0      	blx	r4
	return 1;
   83d00:	2001      	movs	r0, #1
		break;
   83d02:	e7dd      	b.n	83cc0 <pio_configure_pin_group+0x4c>
   83d04:	00083aaf 	.word	0x00083aaf
   83d08:	00083aeb 	.word	0x00083aeb
   83d0c:	00083b1d 	.word	0x00083b1d

00083d10 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d14:	4604      	mov	r4, r0
   83d16:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83d18:	4b0e      	ldr	r3, [pc, #56]	; (83d54 <pio_handler_process+0x44>)
   83d1a:	4798      	blx	r3
   83d1c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83d1e:	4620      	mov	r0, r4
   83d20:	4b0d      	ldr	r3, [pc, #52]	; (83d58 <pio_handler_process+0x48>)
   83d22:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83d24:	4005      	ands	r5, r0
   83d26:	d013      	beq.n	83d50 <pio_handler_process+0x40>
   83d28:	4c0c      	ldr	r4, [pc, #48]	; (83d5c <pio_handler_process+0x4c>)
   83d2a:	f104 0860 	add.w	r8, r4, #96	; 0x60
   83d2e:	e003      	b.n	83d38 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83d30:	4544      	cmp	r4, r8
   83d32:	d00d      	beq.n	83d50 <pio_handler_process+0x40>
		while (status != 0) {
   83d34:	3410      	adds	r4, #16
   83d36:	b15d      	cbz	r5, 83d50 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   83d38:	6820      	ldr	r0, [r4, #0]
   83d3a:	42b0      	cmp	r0, r6
   83d3c:	d1f8      	bne.n	83d30 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83d3e:	6861      	ldr	r1, [r4, #4]
   83d40:	4229      	tst	r1, r5
   83d42:	d0f5      	beq.n	83d30 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83d44:	68e3      	ldr	r3, [r4, #12]
   83d46:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   83d48:	6863      	ldr	r3, [r4, #4]
   83d4a:	ea25 0503 	bic.w	r5, r5, r3
   83d4e:	e7ef      	b.n	83d30 <pio_handler_process+0x20>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d54:	00083b4d 	.word	0x00083b4d
   83d58:	00083b51 	.word	0x00083b51
   83d5c:	2000208c 	.word	0x2000208c

00083d60 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83d60:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83d62:	210a      	movs	r1, #10
   83d64:	4801      	ldr	r0, [pc, #4]	; (83d6c <PIOA_Handler+0xc>)
   83d66:	4b02      	ldr	r3, [pc, #8]	; (83d70 <PIOA_Handler+0x10>)
   83d68:	4798      	blx	r3
}
   83d6a:	bd08      	pop	{r3, pc}
   83d6c:	400e0c00 	.word	0x400e0c00
   83d70:	00083d11 	.word	0x00083d11

00083d74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83d74:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83d76:	210b      	movs	r1, #11
   83d78:	4801      	ldr	r0, [pc, #4]	; (83d80 <PIOB_Handler+0xc>)
   83d7a:	4b02      	ldr	r3, [pc, #8]	; (83d84 <PIOB_Handler+0x10>)
   83d7c:	4798      	blx	r3
}
   83d7e:	bd08      	pop	{r3, pc}
   83d80:	400e0e00 	.word	0x400e0e00
   83d84:	00083d11 	.word	0x00083d11

00083d88 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83d88:	4a16      	ldr	r2, [pc, #88]	; (83de4 <pmc_switch_mck_to_mainck+0x5c>)
   83d8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83d8c:	f023 0303 	bic.w	r3, r3, #3
   83d90:	f043 0301 	orr.w	r3, r3, #1
   83d94:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83d96:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83d98:	f013 0f08 	tst.w	r3, #8
   83d9c:	d10a      	bne.n	83db4 <pmc_switch_mck_to_mainck+0x2c>
   83d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83da2:	4910      	ldr	r1, [pc, #64]	; (83de4 <pmc_switch_mck_to_mainck+0x5c>)
   83da4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83da6:	f012 0f08 	tst.w	r2, #8
   83daa:	d103      	bne.n	83db4 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83dac:	3b01      	subs	r3, #1
   83dae:	d1f9      	bne.n	83da4 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   83db0:	2001      	movs	r0, #1
   83db2:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83db4:	4a0b      	ldr	r2, [pc, #44]	; (83de4 <pmc_switch_mck_to_mainck+0x5c>)
   83db6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83dbc:	4303      	orrs	r3, r0
   83dbe:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83dc0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83dc2:	f010 0008 	ands.w	r0, r0, #8
   83dc6:	d10a      	bne.n	83dde <pmc_switch_mck_to_mainck+0x56>
   83dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83dcc:	4905      	ldr	r1, [pc, #20]	; (83de4 <pmc_switch_mck_to_mainck+0x5c>)
   83dce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83dd0:	f012 0f08 	tst.w	r2, #8
   83dd4:	d105      	bne.n	83de2 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83dd6:	3b01      	subs	r3, #1
   83dd8:	d1f9      	bne.n	83dce <pmc_switch_mck_to_mainck+0x46>
			return 1;
   83dda:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83ddc:	4770      	bx	lr
	return 0;
   83dde:	2000      	movs	r0, #0
   83de0:	4770      	bx	lr
   83de2:	4770      	bx	lr
   83de4:	400e0400 	.word	0x400e0400

00083de8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83de8:	4a16      	ldr	r2, [pc, #88]	; (83e44 <pmc_switch_mck_to_pllack+0x5c>)
   83dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83df0:	4303      	orrs	r3, r0
   83df2:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83df4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83df6:	f013 0f08 	tst.w	r3, #8
   83dfa:	d10a      	bne.n	83e12 <pmc_switch_mck_to_pllack+0x2a>
   83dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e00:	4910      	ldr	r1, [pc, #64]	; (83e44 <pmc_switch_mck_to_pllack+0x5c>)
   83e02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e04:	f012 0f08 	tst.w	r2, #8
   83e08:	d103      	bne.n	83e12 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e0a:	3b01      	subs	r3, #1
   83e0c:	d1f9      	bne.n	83e02 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   83e0e:	2001      	movs	r0, #1
   83e10:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83e12:	4a0c      	ldr	r2, [pc, #48]	; (83e44 <pmc_switch_mck_to_pllack+0x5c>)
   83e14:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83e16:	f023 0303 	bic.w	r3, r3, #3
   83e1a:	f043 0302 	orr.w	r3, r3, #2
   83e1e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83e20:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83e22:	f010 0008 	ands.w	r0, r0, #8
   83e26:	d10a      	bne.n	83e3e <pmc_switch_mck_to_pllack+0x56>
   83e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83e2c:	4905      	ldr	r1, [pc, #20]	; (83e44 <pmc_switch_mck_to_pllack+0x5c>)
   83e2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83e30:	f012 0f08 	tst.w	r2, #8
   83e34:	d105      	bne.n	83e42 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83e36:	3b01      	subs	r3, #1
   83e38:	d1f9      	bne.n	83e2e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   83e3a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83e3c:	4770      	bx	lr
	return 0;
   83e3e:	2000      	movs	r0, #0
   83e40:	4770      	bx	lr
   83e42:	4770      	bx	lr
   83e44:	400e0400 	.word	0x400e0400

00083e48 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   83e48:	4908      	ldr	r1, [pc, #32]	; (83e6c <pmc_osc_enable_main_xtal+0x24>)
   83e4a:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83e4c:	0203      	lsls	r3, r0, #8
   83e4e:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83e50:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83e54:	4313      	orrs	r3, r2
   83e56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e5a:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   83e5e:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83e60:	460a      	mov	r2, r1
   83e62:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83e64:	f013 0f01 	tst.w	r3, #1
   83e68:	d0fb      	beq.n	83e62 <pmc_osc_enable_main_xtal+0x1a>
}
   83e6a:	4770      	bx	lr
   83e6c:	400e0400 	.word	0x400e0400

00083e70 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83e70:	4b02      	ldr	r3, [pc, #8]	; (83e7c <pmc_osc_is_ready_main_xtal+0xc>)
   83e72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83e74:	f000 0001 	and.w	r0, r0, #1
   83e78:	4770      	bx	lr
   83e7a:	bf00      	nop
   83e7c:	400e0400 	.word	0x400e0400

00083e80 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83e80:	4b02      	ldr	r3, [pc, #8]	; (83e8c <pmc_osc_is_ready_mainck+0xc>)
   83e82:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83e84:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83e88:	4770      	bx	lr
   83e8a:	bf00      	nop
   83e8c:	400e0400 	.word	0x400e0400

00083e90 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   83e90:	4b06      	ldr	r3, [pc, #24]	; (83eac <pmc_mainck_osc_select+0x1c>)
   83e92:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   83e94:	b130      	cbz	r0, 83ea4 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   83e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83e9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e9e:	4a03      	ldr	r2, [pc, #12]	; (83eac <pmc_mainck_osc_select+0x1c>)
   83ea0:	6213      	str	r3, [r2, #32]
}
   83ea2:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   83ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83ea8:	e7f7      	b.n	83e9a <pmc_mainck_osc_select+0xa>
   83eaa:	bf00      	nop
   83eac:	400e0400 	.word	0x400e0400

00083eb0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83eb0:	4b02      	ldr	r3, [pc, #8]	; (83ebc <pmc_disable_pllack+0xc>)
   83eb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83eb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83eb8:	4770      	bx	lr
   83eba:	bf00      	nop
   83ebc:	400e0400 	.word	0x400e0400

00083ec0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83ec0:	4b02      	ldr	r3, [pc, #8]	; (83ecc <pmc_is_locked_pllack+0xc>)
   83ec2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ec4:	f000 0002 	and.w	r0, r0, #2
   83ec8:	4770      	bx	lr
   83eca:	bf00      	nop
   83ecc:	400e0400 	.word	0x400e0400

00083ed0 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83ed0:	4b02      	ldr	r3, [pc, #8]	; (83edc <pmc_is_locked_upll+0xc>)
   83ed2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83ed4:	f000 0040 	and.w	r0, r0, #64	; 0x40
   83ed8:	4770      	bx	lr
   83eda:	bf00      	nop
   83edc:	400e0400 	.word	0x400e0400

00083ee0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83ee0:	281d      	cmp	r0, #29
   83ee2:	d80c      	bhi.n	83efe <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83ee4:	4b08      	ldr	r3, [pc, #32]	; (83f08 <pmc_enable_periph_clk+0x28>)
   83ee6:	699a      	ldr	r2, [r3, #24]
   83ee8:	2301      	movs	r3, #1
   83eea:	4083      	lsls	r3, r0
   83eec:	4393      	bics	r3, r2
   83eee:	d008      	beq.n	83f02 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
   83ef0:	2301      	movs	r3, #1
   83ef2:	fa03 f000 	lsl.w	r0, r3, r0
   83ef6:	4b04      	ldr	r3, [pc, #16]	; (83f08 <pmc_enable_periph_clk+0x28>)
   83ef8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83efa:	2000      	movs	r0, #0
   83efc:	4770      	bx	lr
		return 1;
   83efe:	2001      	movs	r0, #1
   83f00:	4770      	bx	lr
	return 0;
   83f02:	2000      	movs	r0, #0
}
   83f04:	4770      	bx	lr
   83f06:	bf00      	nop
   83f08:	400e0400 	.word	0x400e0400

00083f0c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   83f0c:	281d      	cmp	r0, #29
   83f0e:	d80e      	bhi.n	83f2e <pmc_disable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83f10:	4b08      	ldr	r3, [pc, #32]	; (83f34 <pmc_disable_periph_clk+0x28>)
   83f12:	699a      	ldr	r2, [r3, #24]
   83f14:	2301      	movs	r3, #1
   83f16:	4083      	lsls	r3, r0
   83f18:	4393      	bics	r3, r2
   83f1a:	d001      	beq.n	83f20 <pmc_disable_periph_clk+0x14>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83f1c:	2000      	movs	r0, #0
}
   83f1e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   83f20:	2301      	movs	r3, #1
   83f22:	fa03 f000 	lsl.w	r0, r3, r0
   83f26:	4b03      	ldr	r3, [pc, #12]	; (83f34 <pmc_disable_periph_clk+0x28>)
   83f28:	6158      	str	r0, [r3, #20]
	return 0;
   83f2a:	2000      	movs	r0, #0
   83f2c:	4770      	bx	lr
		return 1;
   83f2e:	2001      	movs	r0, #1
   83f30:	4770      	bx	lr
   83f32:	bf00      	nop
   83f34:	400e0400 	.word	0x400e0400

00083f38 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83f38:	f44f 7380 	mov.w	r3, #256	; 0x100
   83f3c:	4083      	lsls	r3, r0
   83f3e:	4a01      	ldr	r2, [pc, #4]	; (83f44 <pmc_enable_pck+0xc>)
   83f40:	6013      	str	r3, [r2, #0]
}
   83f42:	4770      	bx	lr
   83f44:	400e0400 	.word	0x400e0400

00083f48 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83f48:	4b03      	ldr	r3, [pc, #12]	; (83f58 <pmc_set_fast_startup_input+0x10>)
   83f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83f4c:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   83f50:	4310      	orrs	r0, r2
   83f52:	6718      	str	r0, [r3, #112]	; 0x70
}
   83f54:	4770      	bx	lr
   83f56:	bf00      	nop
   83f58:	400e0400 	.word	0x400e0400

00083f5c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83f5c:	4b02      	ldr	r3, [pc, #8]	; (83f68 <pmc_is_wakeup_clocks_restored+0xc>)
   83f5e:	7818      	ldrb	r0, [r3, #0]
}
   83f60:	f080 0001 	eor.w	r0, r0, #1
   83f64:	4770      	bx	lr
   83f66:	bf00      	nop
   83f68:	200020fc 	.word	0x200020fc

00083f6c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   83f6c:	b508      	push	{r3, lr}
   83f6e:	2014      	movs	r0, #20
   83f70:	4b01      	ldr	r3, [pc, #4]	; (83f78 <spi_enable_clock+0xc>)
   83f72:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   83f74:	bd08      	pop	{r3, pc}
   83f76:	bf00      	nop
   83f78:	00083ee1 	.word	0x00083ee1

00083f7c <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   83f7c:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   83f7e:	2014      	movs	r0, #20
   83f80:	4b01      	ldr	r3, [pc, #4]	; (83f88 <spi_disable_clock+0xc>)
   83f82:	4798      	blx	r3
		}
	#endif
#elif SAM4L
	sysclk_disable_peripheral_clock(p_spi);
#endif
}
   83f84:	bd08      	pop	{r3, pc}
   83f86:	bf00      	nop
   83f88:	00083f0d 	.word	0x00083f0d

00083f8c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   83f8c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   83f8e:	f643 2399 	movw	r3, #15001	; 0x3a99
   83f92:	6904      	ldr	r4, [r0, #16]
   83f94:	f014 0f01 	tst.w	r4, #1
   83f98:	d103      	bne.n	83fa2 <spi_read+0x16>
		if (!timeout--) {
   83f9a:	3b01      	subs	r3, #1
   83f9c:	d1f9      	bne.n	83f92 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   83f9e:	2001      	movs	r0, #1
   83fa0:	e009      	b.n	83fb6 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   83fa2:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   83fa4:	6840      	ldr	r0, [r0, #4]
   83fa6:	f010 0f02 	tst.w	r0, #2
	if (spi_get_peripheral_select_mode(p_spi)) {
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   83faa:	bf1c      	itt	ne
   83fac:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   83fb0:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   83fb2:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   83fb4:	2000      	movs	r0, #0
}
   83fb6:	bc10      	pop	{r4}
   83fb8:	4770      	bx	lr

00083fba <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   83fba:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   83fbc:	f643 2499 	movw	r4, #15001	; 0x3a99
   83fc0:	6905      	ldr	r5, [r0, #16]
   83fc2:	f015 0f02 	tst.w	r5, #2
   83fc6:	d103      	bne.n	83fd0 <spi_write+0x16>
		if (!timeout--) {
   83fc8:	3c01      	subs	r4, #1
   83fca:	d1f9      	bne.n	83fc0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   83fcc:	2001      	movs	r0, #1
   83fce:	e00c      	b.n	83fea <spi_write+0x30>
   83fd0:	6844      	ldr	r4, [r0, #4]
   83fd2:	f014 0f02 	tst.w	r4, #2
   83fd6:	d006      	beq.n	83fe6 <spi_write+0x2c>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   83fd8:	0412      	lsls	r2, r2, #16
   83fda:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   83fde:	4311      	orrs	r1, r2
		if (uc_last) {
   83fe0:	b10b      	cbz	r3, 83fe6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   83fe2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   83fe6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   83fe8:	2000      	movs	r0, #0
}
   83fea:	bc30      	pop	{r4, r5}
   83fec:	4770      	bx	lr

00083fee <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   83fee:	b132      	cbz	r2, 83ffe <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   83ff0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   83ff4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   83ff6:	f043 0301 	orr.w	r3, r3, #1
   83ffa:	6303      	str	r3, [r0, #48]	; 0x30
   83ffc:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   83ffe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84002:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84004:	f023 0301 	bic.w	r3, r3, #1
   84008:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   8400a:	4770      	bx	lr

0008400c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8400c:	b132      	cbz	r2, 8401c <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8400e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84012:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84014:	f043 0302 	orr.w	r3, r3, #2
   84018:	6303      	str	r3, [r0, #48]	; 0x30
   8401a:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8401c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   84020:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84022:	f023 0302 	bic.w	r3, r3, #2
   84026:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   84028:	4770      	bx	lr

0008402a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8402a:	1e43      	subs	r3, r0, #1
   8402c:	440b      	add	r3, r1
   8402e:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   84032:	1e43      	subs	r3, r0, #1
   84034:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   84036:	bf94      	ite	ls
   84038:	b200      	sxthls	r0, r0
		return -1;
   8403a:	f04f 30ff 	movhi.w	r0, #4294967295
}
   8403e:	4770      	bx	lr

00084040 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   84040:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84044:	6b08      	ldr	r0, [r1, #48]	; 0x30
   84046:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   8404a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   8404c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8404e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   84052:	630b      	str	r3, [r1, #48]	; 0x30
}
   84054:	4770      	bx	lr
	...

00084058 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   84058:	4603      	mov	r3, r0
   8405a:	b9c0      	cbnz	r0, 8408e <udd_sleep_mode+0x36>
   8405c:	4a18      	ldr	r2, [pc, #96]	; (840c0 <udd_sleep_mode+0x68>)
   8405e:	7812      	ldrb	r2, [r2, #0]
   84060:	b192      	cbz	r2, 84088 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84062:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84066:	b672      	cpsid	i
   84068:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8406c:	4a15      	ldr	r2, [pc, #84]	; (840c4 <udd_sleep_mode+0x6c>)
   8406e:	2100      	movs	r1, #0
   84070:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84072:	4915      	ldr	r1, [pc, #84]	; (840c8 <udd_sleep_mode+0x70>)
   84074:	788a      	ldrb	r2, [r1, #2]
   84076:	3a01      	subs	r2, #1
   84078:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8407a:	b928      	cbnz	r0, 84088 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   8407c:	4a11      	ldr	r2, [pc, #68]	; (840c4 <udd_sleep_mode+0x6c>)
   8407e:	2101      	movs	r1, #1
   84080:	7011      	strb	r1, [r2, #0]
   84082:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84086:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84088:	4a0d      	ldr	r2, [pc, #52]	; (840c0 <udd_sleep_mode+0x68>)
   8408a:	7013      	strb	r3, [r2, #0]
}
   8408c:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   8408e:	4a0c      	ldr	r2, [pc, #48]	; (840c0 <udd_sleep_mode+0x68>)
   84090:	7812      	ldrb	r2, [r2, #0]
   84092:	2a00      	cmp	r2, #0
   84094:	d1f8      	bne.n	84088 <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84096:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8409a:	b672      	cpsid	i
   8409c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840a0:	4a08      	ldr	r2, [pc, #32]	; (840c4 <udd_sleep_mode+0x6c>)
   840a2:	2100      	movs	r1, #0
   840a4:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   840a6:	4908      	ldr	r1, [pc, #32]	; (840c8 <udd_sleep_mode+0x70>)
   840a8:	788a      	ldrb	r2, [r1, #2]
   840aa:	3201      	adds	r2, #1
   840ac:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   840ae:	2800      	cmp	r0, #0
   840b0:	d1ea      	bne.n	84088 <udd_sleep_mode+0x30>
		cpu_irq_enable();
   840b2:	4a04      	ldr	r2, [pc, #16]	; (840c4 <udd_sleep_mode+0x6c>)
   840b4:	2101      	movs	r1, #1
   840b6:	7011      	strb	r1, [r2, #0]
   840b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   840bc:	b662      	cpsie	i
}
   840be:	e7e3      	b.n	84088 <udd_sleep_mode+0x30>
   840c0:	200020fe 	.word	0x200020fe
   840c4:	20000982 	.word	0x20000982
   840c8:	20002688 	.word	0x20002688

000840cc <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   840cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   840d0:	b672      	cpsid	i
   840d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840d6:	4a0e      	ldr	r2, [pc, #56]	; (84110 <udd_ctrl_init+0x44>)
   840d8:	2100      	movs	r1, #0
   840da:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   840dc:	4a0d      	ldr	r2, [pc, #52]	; (84114 <udd_ctrl_init+0x48>)
   840de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   840e2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   840e6:	b92b      	cbnz	r3, 840f4 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   840e8:	4b09      	ldr	r3, [pc, #36]	; (84110 <udd_ctrl_init+0x44>)
   840ea:	2201      	movs	r2, #1
   840ec:	701a      	strb	r2, [r3, #0]
   840ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   840f2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   840f4:	4b07      	ldr	r3, [pc, #28]	; (84114 <udd_ctrl_init+0x48>)
   840f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   840fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   840fe:	4a06      	ldr	r2, [pc, #24]	; (84118 <udd_ctrl_init+0x4c>)
   84100:	2300      	movs	r3, #0
   84102:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84104:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84106:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84108:	4a04      	ldr	r2, [pc, #16]	; (8411c <udd_ctrl_init+0x50>)
   8410a:	7013      	strb	r3, [r2, #0]
}
   8410c:	4770      	bx	lr
   8410e:	bf00      	nop
   84110:	20000982 	.word	0x20000982
   84114:	400a4000 	.word	0x400a4000
   84118:	2000269c 	.word	0x2000269c
   8411c:	20002104 	.word	0x20002104

00084120 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84120:	4b03      	ldr	r3, [pc, #12]	; (84130 <udd_ctrl_stall_data+0x10>)
   84122:	2205      	movs	r2, #5
   84124:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   84126:	4b03      	ldr	r3, [pc, #12]	; (84134 <udd_ctrl_stall_data+0x14>)
   84128:	2220      	movs	r2, #32
   8412a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8412e:	4770      	bx	lr
   84130:	20002104 	.word	0x20002104
   84134:	400a4000 	.word	0x400a4000

00084138 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84138:	4b11      	ldr	r3, [pc, #68]	; (84180 <udd_ctrl_send_zlp_in+0x48>)
   8413a:	2203      	movs	r2, #3
   8413c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8413e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84142:	b672      	cpsid	i
   84144:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84148:	4b0e      	ldr	r3, [pc, #56]	; (84184 <udd_ctrl_send_zlp_in+0x4c>)
   8414a:	2200      	movs	r2, #0
   8414c:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8414e:	4b0e      	ldr	r3, [pc, #56]	; (84188 <udd_ctrl_send_zlp_in+0x50>)
   84150:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84154:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84158:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8415c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84160:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84168:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8416c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84170:	b929      	cbnz	r1, 8417e <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84172:	4b04      	ldr	r3, [pc, #16]	; (84184 <udd_ctrl_send_zlp_in+0x4c>)
   84174:	2201      	movs	r2, #1
   84176:	701a      	strb	r2, [r3, #0]
   84178:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8417c:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   8417e:	4770      	bx	lr
   84180:	20002104 	.word	0x20002104
   84184:	20000982 	.word	0x20000982
   84188:	400a4000 	.word	0x400a4000

0008418c <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   8418c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8418e:	4b02      	ldr	r3, [pc, #8]	; (84198 <udd_ctrl_endofrequest+0xc>)
   84190:	691b      	ldr	r3, [r3, #16]
   84192:	b103      	cbz	r3, 84196 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84194:	4798      	blx	r3
	}
}
   84196:	bd08      	pop	{r3, pc}
   84198:	2000269c 	.word	0x2000269c

0008419c <udd_ctrl_in_sent>:
{
   8419c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8419e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   841a2:	b672      	cpsid	i
   841a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841a8:	4a4c      	ldr	r2, [pc, #304]	; (842dc <udd_ctrl_in_sent+0x140>)
   841aa:	2100      	movs	r1, #0
   841ac:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   841ae:	4a4c      	ldr	r2, [pc, #304]	; (842e0 <udd_ctrl_in_sent+0x144>)
   841b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   841b4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   841b8:	b92b      	cbnz	r3, 841c6 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   841ba:	4b48      	ldr	r3, [pc, #288]	; (842dc <udd_ctrl_in_sent+0x140>)
   841bc:	2201      	movs	r2, #1
   841be:	701a      	strb	r2, [r3, #0]
   841c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841c4:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   841c6:	4b47      	ldr	r3, [pc, #284]	; (842e4 <udd_ctrl_in_sent+0x148>)
   841c8:	781b      	ldrb	r3, [r3, #0]
   841ca:	2b03      	cmp	r3, #3
   841cc:	d05a      	beq.n	84284 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   841ce:	4b46      	ldr	r3, [pc, #280]	; (842e8 <udd_ctrl_in_sent+0x14c>)
   841d0:	881b      	ldrh	r3, [r3, #0]
   841d2:	4a46      	ldr	r2, [pc, #280]	; (842ec <udd_ctrl_in_sent+0x150>)
   841d4:	8994      	ldrh	r4, [r2, #12]
   841d6:	1ae4      	subs	r4, r4, r3
   841d8:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   841da:	b9c4      	cbnz	r4, 8420e <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   841dc:	4a44      	ldr	r2, [pc, #272]	; (842f0 <udd_ctrl_in_sent+0x154>)
   841de:	8811      	ldrh	r1, [r2, #0]
   841e0:	440b      	add	r3, r1
   841e2:	b29b      	uxth	r3, r3
   841e4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   841e6:	4a41      	ldr	r2, [pc, #260]	; (842ec <udd_ctrl_in_sent+0x150>)
   841e8:	88d2      	ldrh	r2, [r2, #6]
   841ea:	429a      	cmp	r2, r3
   841ec:	d04f      	beq.n	8428e <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   841ee:	4b41      	ldr	r3, [pc, #260]	; (842f4 <udd_ctrl_in_sent+0x158>)
   841f0:	781b      	ldrb	r3, [r3, #0]
   841f2:	2b00      	cmp	r3, #0
   841f4:	d14b      	bne.n	8428e <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   841f6:	4b3d      	ldr	r3, [pc, #244]	; (842ec <udd_ctrl_in_sent+0x150>)
   841f8:	695b      	ldr	r3, [r3, #20]
   841fa:	2b00      	cmp	r3, #0
   841fc:	d06c      	beq.n	842d8 <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   841fe:	4798      	blx	r3
   84200:	2800      	cmp	r0, #0
   84202:	d069      	beq.n	842d8 <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   84204:	4b38      	ldr	r3, [pc, #224]	; (842e8 <udd_ctrl_in_sent+0x14c>)
   84206:	2200      	movs	r2, #0
   84208:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8420a:	4b38      	ldr	r3, [pc, #224]	; (842ec <udd_ctrl_in_sent+0x150>)
   8420c:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8420e:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   84210:	bf92      	itee	ls
   84212:	2201      	movls	r2, #1
		b_shortpacket = false;
   84214:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84216:	2440      	movhi	r4, #64	; 0x40
   84218:	4b36      	ldr	r3, [pc, #216]	; (842f4 <udd_ctrl_in_sent+0x158>)
   8421a:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8421c:	4b33      	ldr	r3, [pc, #204]	; (842ec <udd_ctrl_in_sent+0x150>)
   8421e:	689a      	ldr	r2, [r3, #8]
   84220:	4b31      	ldr	r3, [pc, #196]	; (842e8 <udd_ctrl_in_sent+0x14c>)
   84222:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84224:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84228:	b672      	cpsid	i
   8422a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8422e:	4b2b      	ldr	r3, [pc, #172]	; (842dc <udd_ctrl_in_sent+0x140>)
   84230:	2100      	movs	r1, #0
   84232:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   84234:	4b2a      	ldr	r3, [pc, #168]	; (842e0 <udd_ctrl_in_sent+0x144>)
   84236:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8423a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8423e:	d140      	bne.n	842c2 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   84240:	b14c      	cbz	r4, 84256 <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84242:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84244:	4b2c      	ldr	r3, [pc, #176]	; (842f8 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   84246:	4619      	mov	r1, r3
   84248:	3301      	adds	r3, #1
   8424a:	f812 0b01 	ldrb.w	r0, [r2], #1
   8424e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   84250:	b2d9      	uxtb	r1, r3
   84252:	42a1      	cmp	r1, r4
   84254:	d3f7      	bcc.n	84246 <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   84256:	4a24      	ldr	r2, [pc, #144]	; (842e8 <udd_ctrl_in_sent+0x14c>)
   84258:	8813      	ldrh	r3, [r2, #0]
   8425a:	441c      	add	r4, r3
   8425c:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   8425e:	4b20      	ldr	r3, [pc, #128]	; (842e0 <udd_ctrl_in_sent+0x144>)
   84260:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84264:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84268:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8426c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84270:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84274:	bb7d      	cbnz	r5, 842d6 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   84276:	4b19      	ldr	r3, [pc, #100]	; (842dc <udd_ctrl_in_sent+0x140>)
   84278:	2201      	movs	r2, #1
   8427a:	701a      	strb	r2, [r3, #0]
   8427c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84280:	b662      	cpsie	i
}
   84282:	e028      	b.n	842d6 <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   84284:	4b1d      	ldr	r3, [pc, #116]	; (842fc <udd_ctrl_in_sent+0x160>)
   84286:	4798      	blx	r3
		udd_ctrl_init();
   84288:	4b1d      	ldr	r3, [pc, #116]	; (84300 <udd_ctrl_in_sent+0x164>)
   8428a:	4798      	blx	r3
		return;
   8428c:	e023      	b.n	842d6 <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8428e:	4b15      	ldr	r3, [pc, #84]	; (842e4 <udd_ctrl_in_sent+0x148>)
   84290:	2204      	movs	r2, #4
   84292:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84294:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84298:	b672      	cpsid	i
   8429a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8429e:	4b0f      	ldr	r3, [pc, #60]	; (842dc <udd_ctrl_in_sent+0x140>)
   842a0:	2200      	movs	r2, #0
   842a2:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   842a4:	4b0e      	ldr	r3, [pc, #56]	; (842e0 <udd_ctrl_in_sent+0x144>)
   842a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   842aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   842ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   842b2:	b981      	cbnz	r1, 842d6 <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   842b4:	4b09      	ldr	r3, [pc, #36]	; (842dc <udd_ctrl_in_sent+0x140>)
   842b6:	2201      	movs	r2, #1
   842b8:	701a      	strb	r2, [r3, #0]
   842ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842be:	b662      	cpsie	i
}
   842c0:	e009      	b.n	842d6 <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   842c2:	b92d      	cbnz	r5, 842d0 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   842c4:	4b05      	ldr	r3, [pc, #20]	; (842dc <udd_ctrl_in_sent+0x140>)
   842c6:	2201      	movs	r2, #1
   842c8:	701a      	strb	r2, [r3, #0]
   842ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842ce:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   842d0:	4b04      	ldr	r3, [pc, #16]	; (842e4 <udd_ctrl_in_sent+0x148>)
   842d2:	2204      	movs	r2, #4
   842d4:	701a      	strb	r2, [r3, #0]
}
   842d6:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   842d8:	2201      	movs	r2, #1
   842da:	e79d      	b.n	84218 <udd_ctrl_in_sent+0x7c>
   842dc:	20000982 	.word	0x20000982
   842e0:	400a4000 	.word	0x400a4000
   842e4:	20002104 	.word	0x20002104
   842e8:	20002100 	.word	0x20002100
   842ec:	2000269c 	.word	0x2000269c
   842f0:	20002102 	.word	0x20002102
   842f4:	200020fd 	.word	0x200020fd
   842f8:	20180000 	.word	0x20180000
   842fc:	0008418d 	.word	0x0008418d
   84300:	000840cd 	.word	0x000840cd

00084304 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   84304:	b538      	push	{r3, r4, r5, lr}
   84306:	4603      	mov	r3, r0
   84308:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   8430a:	7d19      	ldrb	r1, [r3, #20]
   8430c:	f011 0f01 	tst.w	r1, #1
   84310:	d011      	beq.n	84336 <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   84312:	7d19      	ldrb	r1, [r3, #20]
   84314:	f36f 0100 	bfc	r1, #0, #1
   84318:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   8431a:	681c      	ldr	r4, [r3, #0]
   8431c:	b15c      	cbz	r4, 84336 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8431e:	f102 0108 	add.w	r1, r2, #8
   84322:	0149      	lsls	r1, r1, #5
   84324:	4d04      	ldr	r5, [pc, #16]	; (84338 <udd_ep_finish_job+0x34>)
   84326:	5869      	ldr	r1, [r5, r1]
   84328:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   8432c:	bf18      	it	ne
   8432e:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84332:	6899      	ldr	r1, [r3, #8]
   84334:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   84336:	bd38      	pop	{r3, r4, r5, pc}
   84338:	400a4000 	.word	0x400a4000

0008433c <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   8433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8433e:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84340:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84342:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   84346:	496c      	ldr	r1, [pc, #432]	; (844f8 <udd_ep_trans_done+0x1bc>)
   84348:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8434c:	7d09      	ldrb	r1, [r1, #20]
   8434e:	f011 0f01 	tst.w	r1, #1
   84352:	f000 80ca 	beq.w	844ea <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   84356:	4601      	mov	r1, r0
   84358:	4867      	ldr	r0, [pc, #412]	; (844f8 <udd_ep_trans_done+0x1bc>)
   8435a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   8435e:	68cd      	ldr	r5, [r1, #12]
   84360:	6888      	ldr	r0, [r1, #8]
   84362:	4285      	cmp	r5, r0
   84364:	f000 80a6 	beq.w	844b4 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   84368:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8436a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   8436e:	d863      	bhi.n	84438 <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84370:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   84372:	0151      	lsls	r1, r2, #5
   84374:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84378:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8437c:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   84380:	f016 0f08 	tst.w	r6, #8
   84384:	d014      	beq.n	843b0 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84386:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8438a:	f006 0607 	and.w	r6, r6, #7
   8438e:	2108      	movs	r1, #8
   84390:	40b1      	lsls	r1, r6
   84392:	3901      	subs	r1, #1
   84394:	4201      	tst	r1, r0
   84396:	d068      	beq.n	8446a <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   84398:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   8439c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   843a0:	4e55      	ldr	r6, [pc, #340]	; (844f8 <udd_ep_trans_done+0x1bc>)
   843a2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   843a6:	7d0e      	ldrb	r6, [r1, #20]
   843a8:	f36f 0641 	bfc	r6, #1, #1
   843ac:	750e      	strb	r6, [r1, #20]
   843ae:	e05c      	b.n	8446a <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   843b0:	0151      	lsls	r1, r2, #5
   843b2:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   843b6:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   843ba:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843be:	f3c6 1601 	ubfx	r6, r6, #4, #2
   843c2:	2e01      	cmp	r6, #1
   843c4:	d14f      	bne.n	84466 <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   843c6:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   843ca:	f006 0607 	and.w	r6, r6, #7
   843ce:	2108      	movs	r1, #8
   843d0:	40b1      	lsls	r1, r6
   843d2:	4281      	cmp	r1, r0
   843d4:	d247      	bcs.n	84466 <udd_ep_trans_done+0x12a>
   843d6:	e048      	b.n	8446a <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   843d8:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   843dc:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   843de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   843e2:	4a45      	ldr	r2, [pc, #276]	; (844f8 <udd_ep_trans_done+0x1bc>)
   843e4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   843e8:	68d1      	ldr	r1, [r2, #12]
   843ea:	4401      	add	r1, r0
   843ec:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   843ee:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   843f0:	4a42      	ldr	r2, [pc, #264]	; (844fc <udd_ep_trans_done+0x1c0>)
   843f2:	6911      	ldr	r1, [r2, #16]
   843f4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   843f8:	fa00 f303 	lsl.w	r3, r0, r3
   843fc:	430b      	orrs	r3, r1
   843fe:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84400:	2d00      	cmp	r5, #0
   84402:	d172      	bne.n	844ea <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   84404:	4b3e      	ldr	r3, [pc, #248]	; (84500 <udd_ep_trans_done+0x1c4>)
   84406:	2201      	movs	r2, #1
   84408:	701a      	strb	r2, [r3, #0]
   8440a:	f3bf 8f5f 	dmb	sy
   8440e:	b662      	cpsie	i
}
   84410:	e06b      	b.n	844ea <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   84412:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84416:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   8441a:	4b38      	ldr	r3, [pc, #224]	; (844fc <udd_ep_trans_done+0x1c0>)
   8441c:	6919      	ldr	r1, [r3, #16]
   8441e:	f44f 7080 	mov.w	r0, #256	; 0x100
   84422:	fa00 f202 	lsl.w	r2, r0, r2
   84426:	430a      	orrs	r2, r1
   84428:	611a      	str	r2, [r3, #16]
			return;
   8442a:	e05e      	b.n	844ea <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8442c:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84430:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84434:	2400      	movs	r4, #0
   84436:	e018      	b.n	8446a <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   84438:	0151      	lsls	r1, r2, #5
   8443a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8443e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84442:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   84446:	f014 0408 	ands.w	r4, r4, #8
   8444a:	d1ef      	bne.n	8442c <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8444c:	0151      	lsls	r1, r2, #5
   8444e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84452:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84456:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   8445a:	f3c0 1001 	ubfx	r0, r0, #4, #2
   8445e:	2801      	cmp	r0, #1
   84460:	d044      	beq.n	844ec <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84462:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   84466:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8446a:	4926      	ldr	r1, [pc, #152]	; (84504 <udd_ep_trans_done+0x1c8>)
   8446c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   84470:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   84474:	4f20      	ldr	r7, [pc, #128]	; (844f8 <udd_ep_trans_done+0x1bc>)
   84476:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8447a:	6876      	ldr	r6, [r6, #4]
   8447c:	4435      	add	r5, r6
   8447e:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84480:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84484:	b672      	cpsid	i
   84486:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8448a:	4e1d      	ldr	r6, [pc, #116]	; (84500 <udd_ep_trans_done+0x1c4>)
   8448c:	2700      	movs	r7, #0
   8448e:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   84490:	68ce      	ldr	r6, [r1, #12]
   84492:	f016 0f10 	tst.w	r6, #16
   84496:	d09f      	beq.n	843d8 <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   84498:	b92d      	cbnz	r5, 844a6 <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   8449a:	4919      	ldr	r1, [pc, #100]	; (84500 <udd_ep_trans_done+0x1c4>)
   8449c:	2001      	movs	r0, #1
   8449e:	7008      	strb	r0, [r1, #0]
   844a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   844a4:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   844a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   844aa:	4813      	ldr	r0, [pc, #76]	; (844f8 <udd_ep_trans_done+0x1bc>)
   844ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   844b0:	68c8      	ldr	r0, [r1, #12]
   844b2:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   844b4:	0151      	lsls	r1, r2, #5
   844b6:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   844ba:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   844be:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   844c2:	f010 0f08 	tst.w	r0, #8
   844c6:	d008      	beq.n	844da <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   844c8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   844cc:	4c0a      	ldr	r4, [pc, #40]	; (844f8 <udd_ep_trans_done+0x1bc>)
   844ce:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   844d2:	7d00      	ldrb	r0, [r0, #20]
   844d4:	f010 0f02 	tst.w	r0, #2
   844d8:	d19b      	bne.n	84412 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   844da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   844de:	2100      	movs	r1, #0
   844e0:	4805      	ldr	r0, [pc, #20]	; (844f8 <udd_ep_trans_done+0x1bc>)
   844e2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   844e6:	4b08      	ldr	r3, [pc, #32]	; (84508 <udd_ep_trans_done+0x1cc>)
   844e8:	4798      	blx	r3
}
   844ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   844ec:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   844f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   844f4:	e7b9      	b.n	8446a <udd_ep_trans_done+0x12e>
   844f6:	bf00      	nop
   844f8:	20002108 	.word	0x20002108
   844fc:	400a4000 	.word	0x400a4000
   84500:	20000982 	.word	0x20000982
   84504:	400a4300 	.word	0x400a4300
   84508:	00084305 	.word	0x00084305

0008450c <UDPHS_Handler>:
{
   8450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   84510:	201d      	movs	r0, #29
   84512:	4ba0      	ldr	r3, [pc, #640]	; (84794 <UDPHS_Handler+0x288>)
   84514:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84516:	4ba0      	ldr	r3, [pc, #640]	; (84798 <UDPHS_Handler+0x28c>)
   84518:	4798      	blx	r3
   8451a:	b920      	cbnz	r0, 84526 <UDPHS_Handler+0x1a>
   8451c:	4b9f      	ldr	r3, [pc, #636]	; (8479c <UDPHS_Handler+0x290>)
   8451e:	695b      	ldr	r3, [r3, #20]
   84520:	f013 0f02 	tst.w	r3, #2
   84524:	d041      	beq.n	845aa <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   84526:	4b9d      	ldr	r3, [pc, #628]	; (8479c <UDPHS_Handler+0x290>)
   84528:	695b      	ldr	r3, [r3, #20]
   8452a:	f013 0f08 	tst.w	r3, #8
   8452e:	d143      	bne.n	845b8 <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   84530:	4b9a      	ldr	r3, [pc, #616]	; (8479c <UDPHS_Handler+0x290>)
   84532:	695b      	ldr	r3, [r3, #20]
   84534:	f013 0f04 	tst.w	r3, #4
   84538:	d14c      	bne.n	845d4 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   8453a:	4a98      	ldr	r2, [pc, #608]	; (8479c <UDPHS_Handler+0x290>)
   8453c:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84540:	6952      	ldr	r2, [r2, #20]
   84542:	f412 7f80 	tst.w	r2, #256	; 0x100
   84546:	d029      	beq.n	8459c <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   84548:	4a94      	ldr	r2, [pc, #592]	; (8479c <UDPHS_Handler+0x290>)
   8454a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8454e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   84552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84556:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8455a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8455e:	d13f      	bne.n	845e0 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   84560:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84564:	d006      	beq.n	84574 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   84566:	4a8d      	ldr	r2, [pc, #564]	; (8479c <UDPHS_Handler+0x290>)
   84568:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8456c:	f412 6f80 	tst.w	r2, #1024	; 0x400
   84570:	f040 809e 	bne.w	846b0 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   84574:	f413 7f00 	tst.w	r3, #512	; 0x200
   84578:	f040 809d 	bne.w	846b6 <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   8457c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84580:	d004      	beq.n	8458c <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   84582:	4a86      	ldr	r2, [pc, #536]	; (8479c <UDPHS_Handler+0x290>)
   84584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84588:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   8458c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   84590:	f040 8144 	bne.w	8481c <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   84594:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   84598:	f040 8155 	bne.w	84846 <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8459c:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8459e:	497f      	ldr	r1, [pc, #508]	; (8479c <UDPHS_Handler+0x290>)
   845a0:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   845a4:	f44f 7e80 	mov.w	lr, #256	; 0x100
   845a8:	e19c      	b.n	848e4 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   845aa:	b672      	cpsid	i
   845ac:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   845b0:	4b7b      	ldr	r3, [pc, #492]	; (847a0 <UDPHS_Handler+0x294>)
   845b2:	2200      	movs	r2, #0
   845b4:	701a      	strb	r2, [r3, #0]
		return;
   845b6:	e008      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ack_sof();
   845b8:	4b78      	ldr	r3, [pc, #480]	; (8479c <UDPHS_Handler+0x290>)
   845ba:	2208      	movs	r2, #8
   845bc:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   845be:	695b      	ldr	r3, [r3, #20]
   845c0:	f013 0f01 	tst.w	r3, #1
   845c4:	d003      	beq.n	845ce <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   845c6:	4b77      	ldr	r3, [pc, #476]	; (847a4 <UDPHS_Handler+0x298>)
   845c8:	4798      	blx	r3
}
   845ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   845ce:	4b76      	ldr	r3, [pc, #472]	; (847a8 <UDPHS_Handler+0x29c>)
   845d0:	4798      	blx	r3
   845d2:	e7f8      	b.n	845c6 <UDPHS_Handler+0xba>
		udd_ack_msof();
   845d4:	4b71      	ldr	r3, [pc, #452]	; (8479c <UDPHS_Handler+0x290>)
   845d6:	2204      	movs	r2, #4
   845d8:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   845da:	4b73      	ldr	r3, [pc, #460]	; (847a8 <UDPHS_Handler+0x29c>)
   845dc:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   845de:	e7f4      	b.n	845ca <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   845e0:	4b72      	ldr	r3, [pc, #456]	; (847ac <UDPHS_Handler+0x2a0>)
   845e2:	781b      	ldrb	r3, [r3, #0]
   845e4:	2b00      	cmp	r3, #0
   845e6:	d140      	bne.n	8466a <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   845e8:	4b6c      	ldr	r3, [pc, #432]	; (8479c <UDPHS_Handler+0x290>)
   845ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   845ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
   845f2:	2b08      	cmp	r3, #8
   845f4:	d13e      	bne.n	84674 <UDPHS_Handler+0x168>
   845f6:	4a6e      	ldr	r2, [pc, #440]	; (847b0 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   845f8:	4b6e      	ldr	r3, [pc, #440]	; (847b4 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   845fa:	486f      	ldr	r0, [pc, #444]	; (847b8 <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   845fc:	4619      	mov	r1, r3
   845fe:	3301      	adds	r3, #1
   84600:	7809      	ldrb	r1, [r1, #0]
   84602:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84606:	4283      	cmp	r3, r0
   84608:	d1f8      	bne.n	845fc <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   8460a:	4b6c      	ldr	r3, [pc, #432]	; (847bc <UDPHS_Handler+0x2b0>)
   8460c:	4798      	blx	r3
   8460e:	2800      	cmp	r0, #0
   84610:	d038      	beq.n	84684 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   84612:	4b62      	ldr	r3, [pc, #392]	; (8479c <UDPHS_Handler+0x290>)
   84614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84618:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   8461c:	4b68      	ldr	r3, [pc, #416]	; (847c0 <UDPHS_Handler+0x2b4>)
   8461e:	f993 3000 	ldrsb.w	r3, [r3]
   84622:	2b00      	cmp	r3, #0
   84624:	db36      	blt.n	84694 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84626:	4b66      	ldr	r3, [pc, #408]	; (847c0 <UDPHS_Handler+0x2b4>)
   84628:	88db      	ldrh	r3, [r3, #6]
   8462a:	2b00      	cmp	r3, #0
   8462c:	d03d      	beq.n	846aa <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   8462e:	2300      	movs	r3, #0
   84630:	4a64      	ldr	r2, [pc, #400]	; (847c4 <UDPHS_Handler+0x2b8>)
   84632:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84634:	4a64      	ldr	r2, [pc, #400]	; (847c8 <UDPHS_Handler+0x2bc>)
   84636:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84638:	4a5c      	ldr	r2, [pc, #368]	; (847ac <UDPHS_Handler+0x2a0>)
   8463a:	2101      	movs	r1, #1
   8463c:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   8463e:	4a57      	ldr	r2, [pc, #348]	; (8479c <UDPHS_Handler+0x290>)
   84640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84644:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84648:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8464c:	b672      	cpsid	i
   8464e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84652:	4c53      	ldr	r4, [pc, #332]	; (847a0 <UDPHS_Handler+0x294>)
   84654:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   84656:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8465a:	2800      	cmp	r0, #0
   8465c:	d1b5      	bne.n	845ca <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   8465e:	2201      	movs	r2, #1
   84660:	7022      	strb	r2, [r4, #0]
   84662:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84666:	b662      	cpsie	i
}
   84668:	e7af      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   8466a:	4b58      	ldr	r3, [pc, #352]	; (847cc <UDPHS_Handler+0x2c0>)
   8466c:	4798      	blx	r3
		udd_ctrl_init();
   8466e:	4b58      	ldr	r3, [pc, #352]	; (847d0 <UDPHS_Handler+0x2c4>)
   84670:	4798      	blx	r3
   84672:	e7b9      	b.n	845e8 <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   84674:	4b57      	ldr	r3, [pc, #348]	; (847d4 <UDPHS_Handler+0x2c8>)
   84676:	4798      	blx	r3
		udd_ack_setup_received(0);
   84678:	4b48      	ldr	r3, [pc, #288]	; (8479c <UDPHS_Handler+0x290>)
   8467a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8467e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84682:	e7a2      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   84684:	4b53      	ldr	r3, [pc, #332]	; (847d4 <UDPHS_Handler+0x2c8>)
   84686:	4798      	blx	r3
		udd_ack_setup_received(0);
   84688:	4b44      	ldr	r3, [pc, #272]	; (8479c <UDPHS_Handler+0x290>)
   8468a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8468e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84692:	e79a      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84694:	2300      	movs	r3, #0
   84696:	4a4b      	ldr	r2, [pc, #300]	; (847c4 <UDPHS_Handler+0x2b8>)
   84698:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8469a:	4a4b      	ldr	r2, [pc, #300]	; (847c8 <UDPHS_Handler+0x2bc>)
   8469c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8469e:	4b43      	ldr	r3, [pc, #268]	; (847ac <UDPHS_Handler+0x2a0>)
   846a0:	2202      	movs	r2, #2
   846a2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   846a4:	4b4c      	ldr	r3, [pc, #304]	; (847d8 <UDPHS_Handler+0x2cc>)
   846a6:	4798      	blx	r3
   846a8:	e78f      	b.n	845ca <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   846aa:	4b4c      	ldr	r3, [pc, #304]	; (847dc <UDPHS_Handler+0x2d0>)
   846ac:	4798      	blx	r3
			return;
   846ae:	e78c      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   846b0:	4b49      	ldr	r3, [pc, #292]	; (847d8 <UDPHS_Handler+0x2cc>)
   846b2:	4798      	blx	r3
		return true;
   846b4:	e789      	b.n	845ca <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   846b6:	4b3d      	ldr	r3, [pc, #244]	; (847ac <UDPHS_Handler+0x2a0>)
   846b8:	781b      	ldrb	r3, [r3, #0]
   846ba:	2b01      	cmp	r3, #1
   846bc:	d00b      	beq.n	846d6 <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   846be:	2b02      	cmp	r3, #2
   846c0:	d001      	beq.n	846c6 <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   846c2:	2b04      	cmp	r3, #4
   846c4:	d104      	bne.n	846d0 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   846c6:	4b41      	ldr	r3, [pc, #260]	; (847cc <UDPHS_Handler+0x2c0>)
   846c8:	4798      	blx	r3
		udd_ctrl_init();
   846ca:	4b41      	ldr	r3, [pc, #260]	; (847d0 <UDPHS_Handler+0x2c4>)
   846cc:	4798      	blx	r3
		return;
   846ce:	e77c      	b.n	845ca <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   846d0:	4b40      	ldr	r3, [pc, #256]	; (847d4 <UDPHS_Handler+0x2c8>)
   846d2:	4798      	blx	r3
   846d4:	e7f9      	b.n	846ca <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   846d6:	4b31      	ldr	r3, [pc, #196]	; (8479c <UDPHS_Handler+0x290>)
   846d8:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   846dc:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   846e0:	4b37      	ldr	r3, [pc, #220]	; (847c0 <UDPHS_Handler+0x2b4>)
   846e2:	899b      	ldrh	r3, [r3, #12]
   846e4:	4a38      	ldr	r2, [pc, #224]	; (847c8 <UDPHS_Handler+0x2bc>)
   846e6:	8814      	ldrh	r4, [r2, #0]
   846e8:	1822      	adds	r2, r4, r0
   846ea:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   846ec:	bfbc      	itt	lt
   846ee:	1b1b      	sublt	r3, r3, r4
   846f0:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   846f2:	4b33      	ldr	r3, [pc, #204]	; (847c0 <UDPHS_Handler+0x2b4>)
   846f4:	689a      	ldr	r2, [r3, #8]
   846f6:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   846f8:	b170      	cbz	r0, 84718 <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   846fa:	4b2e      	ldr	r3, [pc, #184]	; (847b4 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   846fc:	4619      	mov	r1, r3
   846fe:	3301      	adds	r3, #1
   84700:	7809      	ldrb	r1, [r1, #0]
   84702:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   84706:	b2d9      	uxtb	r1, r3
   84708:	4281      	cmp	r1, r0
   8470a:	d3f7      	bcc.n	846fc <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   8470c:	4404      	add	r4, r0
   8470e:	b2a4      	uxth	r4, r4
   84710:	4b2d      	ldr	r3, [pc, #180]	; (847c8 <UDPHS_Handler+0x2bc>)
   84712:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84714:	2840      	cmp	r0, #64	; 0x40
   84716:	d00d      	beq.n	84734 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84718:	4b29      	ldr	r3, [pc, #164]	; (847c0 <UDPHS_Handler+0x2b4>)
   8471a:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8471c:	695b      	ldr	r3, [r3, #20]
   8471e:	b10b      	cbz	r3, 84724 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   84720:	4798      	blx	r3
   84722:	b370      	cbz	r0, 84782 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   84724:	4b1d      	ldr	r3, [pc, #116]	; (8479c <UDPHS_Handler+0x290>)
   84726:	f44f 7200 	mov.w	r2, #512	; 0x200
   8472a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8472e:	4b2b      	ldr	r3, [pc, #172]	; (847dc <UDPHS_Handler+0x2d0>)
   84730:	4798      	blx	r3
		return;
   84732:	e74a      	b.n	845ca <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   84734:	4b22      	ldr	r3, [pc, #136]	; (847c0 <UDPHS_Handler+0x2b4>)
   84736:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   84738:	4b22      	ldr	r3, [pc, #136]	; (847c4 <UDPHS_Handler+0x2b8>)
   8473a:	881b      	ldrh	r3, [r3, #0]
   8473c:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   8473e:	429a      	cmp	r2, r3
   84740:	ddea      	ble.n	84718 <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84742:	4b1f      	ldr	r3, [pc, #124]	; (847c0 <UDPHS_Handler+0x2b4>)
   84744:	899b      	ldrh	r3, [r3, #12]
   84746:	42a3      	cmp	r3, r4
   84748:	d04a      	beq.n	847e0 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   8474a:	4b14      	ldr	r3, [pc, #80]	; (8479c <UDPHS_Handler+0x290>)
   8474c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84750:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   84754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84758:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8475c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84760:	b672      	cpsid	i
   84762:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84766:	480e      	ldr	r0, [pc, #56]	; (847a0 <UDPHS_Handler+0x294>)
   84768:	2400      	movs	r4, #0
   8476a:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   8476c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84770:	2900      	cmp	r1, #0
   84772:	f47f af2a 	bne.w	845ca <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   84776:	2201      	movs	r2, #1
   84778:	7002      	strb	r2, [r0, #0]
   8477a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8477e:	b662      	cpsie	i
}
   84780:	e723      	b.n	845ca <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   84782:	4b14      	ldr	r3, [pc, #80]	; (847d4 <UDPHS_Handler+0x2c8>)
   84784:	4798      	blx	r3
				udd_ack_out_received(0);
   84786:	4b05      	ldr	r3, [pc, #20]	; (8479c <UDPHS_Handler+0x290>)
   84788:	f44f 7200 	mov.w	r2, #512	; 0x200
   8478c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   84790:	e71b      	b.n	845ca <UDPHS_Handler+0xbe>
   84792:	bf00      	nop
   84794:	00083ee1 	.word	0x00083ee1
   84798:	00083f5d 	.word	0x00083f5d
   8479c:	400a4000 	.word	0x400a4000
   847a0:	20000982 	.word	0x20000982
   847a4:	00081321 	.word	0x00081321
   847a8:	00083275 	.word	0x00083275
   847ac:	20002104 	.word	0x20002104
   847b0:	2000269b 	.word	0x2000269b
   847b4:	20180000 	.word	0x20180000
   847b8:	20180008 	.word	0x20180008
   847bc:	000832b9 	.word	0x000832b9
   847c0:	2000269c 	.word	0x2000269c
   847c4:	20002102 	.word	0x20002102
   847c8:	20002100 	.word	0x20002100
   847cc:	0008418d 	.word	0x0008418d
   847d0:	000840cd 	.word	0x000840cd
   847d4:	00084121 	.word	0x00084121
   847d8:	0008419d 	.word	0x0008419d
   847dc:	00084139 	.word	0x00084139
		if (!udd_g_ctrlreq.over_under_run) {
   847e0:	4b9d      	ldr	r3, [pc, #628]	; (84a58 <UDPHS_Handler+0x54c>)
   847e2:	695b      	ldr	r3, [r3, #20]
   847e4:	b153      	cbz	r3, 847fc <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   847e6:	4798      	blx	r3
   847e8:	b180      	cbz	r0, 8480c <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   847ea:	499c      	ldr	r1, [pc, #624]	; (84a5c <UDPHS_Handler+0x550>)
   847ec:	4a9c      	ldr	r2, [pc, #624]	; (84a60 <UDPHS_Handler+0x554>)
   847ee:	880b      	ldrh	r3, [r1, #0]
   847f0:	8810      	ldrh	r0, [r2, #0]
   847f2:	4403      	add	r3, r0
   847f4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   847f6:	2300      	movs	r3, #0
   847f8:	8013      	strh	r3, [r2, #0]
   847fa:	e7a6      	b.n	8474a <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   847fc:	4b99      	ldr	r3, [pc, #612]	; (84a64 <UDPHS_Handler+0x558>)
   847fe:	4798      	blx	r3
			udd_ack_out_received(0);
   84800:	4b99      	ldr	r3, [pc, #612]	; (84a68 <UDPHS_Handler+0x55c>)
   84802:	f44f 7200 	mov.w	r2, #512	; 0x200
   84806:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8480a:	e6de      	b.n	845ca <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   8480c:	4b95      	ldr	r3, [pc, #596]	; (84a64 <UDPHS_Handler+0x558>)
   8480e:	4798      	blx	r3
			udd_ack_out_received(0);
   84810:	4b95      	ldr	r3, [pc, #596]	; (84a68 <UDPHS_Handler+0x55c>)
   84812:	f44f 7200 	mov.w	r2, #512	; 0x200
   84816:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   8481a:	e6d6      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   8481c:	4b92      	ldr	r3, [pc, #584]	; (84a68 <UDPHS_Handler+0x55c>)
   8481e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84822:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   84826:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8482a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   8482e:	f47f aecc 	bne.w	845ca <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84832:	4b8e      	ldr	r3, [pc, #568]	; (84a6c <UDPHS_Handler+0x560>)
   84834:	781b      	ldrb	r3, [r3, #0]
   84836:	2b03      	cmp	r3, #3
   84838:	f47f aec7 	bne.w	845ca <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   8483c:	4b8a      	ldr	r3, [pc, #552]	; (84a68 <UDPHS_Handler+0x55c>)
   8483e:	2220      	movs	r2, #32
   84840:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84844:	e6c1      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   84846:	4b88      	ldr	r3, [pc, #544]	; (84a68 <UDPHS_Handler+0x55c>)
   84848:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8484c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   84850:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84854:	f413 7f00 	tst.w	r3, #512	; 0x200
   84858:	f47f aeb7 	bne.w	845ca <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8485c:	4b83      	ldr	r3, [pc, #524]	; (84a6c <UDPHS_Handler+0x560>)
   8485e:	781b      	ldrb	r3, [r3, #0]
   84860:	2b01      	cmp	r3, #1
   84862:	d007      	beq.n	84874 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84864:	2b04      	cmp	r3, #4
   84866:	f47f aeb0 	bne.w	845ca <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   8486a:	4b7f      	ldr	r3, [pc, #508]	; (84a68 <UDPHS_Handler+0x55c>)
   8486c:	2220      	movs	r2, #32
   8486e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84872:	e6aa      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   84874:	4b7e      	ldr	r3, [pc, #504]	; (84a70 <UDPHS_Handler+0x564>)
   84876:	4798      	blx	r3
   84878:	e6a7      	b.n	845ca <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   8487a:	4b7e      	ldr	r3, [pc, #504]	; (84a74 <UDPHS_Handler+0x568>)
   8487c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   84880:	68d9      	ldr	r1, [r3, #12]
   84882:	f011 0f01 	tst.w	r1, #1
   84886:	f47f aea0 	bne.w	845ca <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   8488a:	4877      	ldr	r0, [pc, #476]	; (84a68 <UDPHS_Handler+0x55c>)
   8488c:	6901      	ldr	r1, [r0, #16]
   8488e:	ea21 0606 	bic.w	r6, r1, r6
   84892:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84894:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   84896:	0c1b      	lsrs	r3, r3, #16
   84898:	d008      	beq.n	848ac <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   8489a:	4977      	ldr	r1, [pc, #476]	; (84a78 <UDPHS_Handler+0x56c>)
   8489c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   848a0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   848a4:	68e0      	ldr	r0, [r4, #12]
   848a6:	1ac3      	subs	r3, r0, r3
   848a8:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   848aa:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   848ac:	4610      	mov	r0, r2
   848ae:	4b73      	ldr	r3, [pc, #460]	; (84a7c <UDPHS_Handler+0x570>)
   848b0:	4798      	blx	r3
			return true;
   848b2:	e68a      	b.n	845ca <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   848b4:	0163      	lsls	r3, r4, #5
   848b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   848ba:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   848be:	f44f 6100 	mov.w	r1, #2048	; 0x800
   848c2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   848c6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   848ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   848ce:	2100      	movs	r1, #0
   848d0:	4869      	ldr	r0, [pc, #420]	; (84a78 <UDPHS_Handler+0x56c>)
   848d2:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   848d6:	4b6a      	ldr	r3, [pc, #424]	; (84a80 <UDPHS_Handler+0x574>)
   848d8:	4798      	blx	r3
				return true;
   848da:	e676      	b.n	845ca <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   848dc:	3301      	adds	r3, #1
   848de:	2b07      	cmp	r3, #7
   848e0:	f000 80dc 	beq.w	84a9c <UDPHS_Handler+0x590>
   848e4:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   848e6:	461c      	mov	r4, r3
   848e8:	1e5d      	subs	r5, r3, #1
   848ea:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   848ec:	690f      	ldr	r7, [r1, #16]
   848ee:	fa0c f605 	lsl.w	r6, ip, r5
   848f2:	4237      	tst	r7, r6
   848f4:	d002      	beq.n	848fc <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   848f6:	6948      	ldr	r0, [r1, #20]
   848f8:	4206      	tst	r6, r0
   848fa:	d1be      	bne.n	8487a <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   848fc:	690f      	ldr	r7, [r1, #16]
   848fe:	fa0e f604 	lsl.w	r6, lr, r4
   84902:	4237      	tst	r7, r6
   84904:	d0ea      	beq.n	848dc <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84906:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   8490a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   8490e:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84912:	d006      	beq.n	84922 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84914:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   84918:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   8491c:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84920:	d0c8      	beq.n	848b4 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84922:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84926:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8492a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   8492e:	d0d5      	beq.n	848dc <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84930:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84934:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84938:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   8493c:	d1ce      	bne.n	848dc <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8493e:	4b4a      	ldr	r3, [pc, #296]	; (84a68 <UDPHS_Handler+0x55c>)
   84940:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   84944:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84948:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   8494c:	691a      	ldr	r2, [r3, #16]
   8494e:	ea22 0606 	bic.w	r6, r2, r6
   84952:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84954:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   84958:	4b47      	ldr	r3, [pc, #284]	; (84a78 <UDPHS_Handler+0x56c>)
   8495a:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   8495e:	f898 3014 	ldrb.w	r3, [r8, #20]
   84962:	f36f 0382 	bfc	r3, #2, #1
   84966:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8496a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   8496e:	f023 0302 	bic.w	r3, r3, #2
   84972:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84976:	2320      	movs	r3, #32
   84978:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   8497c:	2340      	movs	r3, #64	; 0x40
   8497e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   84982:	e622      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ack_reset();
   84984:	4b38      	ldr	r3, [pc, #224]	; (84a68 <UDPHS_Handler+0x55c>)
   84986:	2210      	movs	r2, #16
   84988:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8498a:	4d3b      	ldr	r5, [pc, #236]	; (84a78 <UDPHS_Handler+0x56c>)
   8498c:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8498e:	2701      	movs	r7, #1
   84990:	4e3b      	ldr	r6, [pc, #236]	; (84a80 <UDPHS_Handler+0x574>)
   84992:	3401      	adds	r4, #1
   84994:	b2e4      	uxtb	r4, r4
   84996:	4622      	mov	r2, r4
   84998:	4639      	mov	r1, r7
   8499a:	4628      	mov	r0, r5
   8499c:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8499e:	3518      	adds	r5, #24
   849a0:	2c06      	cmp	r4, #6
   849a2:	d1f6      	bne.n	84992 <UDPHS_Handler+0x486>
		udc_reset();
   849a4:	4b37      	ldr	r3, [pc, #220]	; (84a84 <UDPHS_Handler+0x578>)
   849a6:	4798      	blx	r3
	udd_configure_address(0);
   849a8:	4b2f      	ldr	r3, [pc, #188]	; (84a68 <UDPHS_Handler+0x55c>)
   849aa:	681a      	ldr	r2, [r3, #0]
   849ac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   849b0:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   849b2:	681a      	ldr	r2, [r3, #0]
   849b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   849b8:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   849ba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   849be:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   849c2:	f022 0203 	bic.w	r2, r2, #3
   849c6:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   849ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   849ce:	2201      	movs	r2, #1
   849d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   849d4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   849d8:	b672      	cpsid	i
   849da:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   849de:	4a2a      	ldr	r2, [pc, #168]	; (84a88 <UDPHS_Handler+0x57c>)
   849e0:	2000      	movs	r0, #0
   849e2:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   849e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   849e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   849ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   849f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   849f4:	691a      	ldr	r2, [r3, #16]
   849f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   849fa:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   849fc:	b929      	cbnz	r1, 84a0a <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   849fe:	4b22      	ldr	r3, [pc, #136]	; (84a88 <UDPHS_Handler+0x57c>)
   84a00:	2201      	movs	r2, #1
   84a02:	701a      	strb	r2, [r3, #0]
   84a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a08:	b662      	cpsie	i
		udd_ctrl_init();
   84a0a:	4b20      	ldr	r3, [pc, #128]	; (84a8c <UDPHS_Handler+0x580>)
   84a0c:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84a0e:	4b16      	ldr	r3, [pc, #88]	; (84a68 <UDPHS_Handler+0x55c>)
   84a10:	691a      	ldr	r2, [r3, #16]
   84a12:	f042 0208 	orr.w	r2, r2, #8
   84a16:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84a18:	691a      	ldr	r2, [r3, #16]
   84a1a:	f042 0204 	orr.w	r2, r2, #4
   84a1e:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84a20:	691a      	ldr	r2, [r3, #16]
   84a22:	f042 0202 	orr.w	r2, r2, #2
   84a26:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84a28:	e5cf      	b.n	845ca <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   84a2a:	4b0f      	ldr	r3, [pc, #60]	; (84a68 <UDPHS_Handler+0x55c>)
   84a2c:	2220      	movs	r2, #32
   84a2e:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84a30:	691a      	ldr	r2, [r3, #16]
   84a32:	f022 0202 	bic.w	r2, r2, #2
   84a36:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84a38:	691a      	ldr	r2, [r3, #16]
   84a3a:	f042 0220 	orr.w	r2, r2, #32
   84a3e:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84a40:	2202      	movs	r2, #2
   84a42:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   84a44:	201d      	movs	r0, #29
   84a46:	4b12      	ldr	r3, [pc, #72]	; (84a90 <UDPHS_Handler+0x584>)
   84a48:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84a4a:	4b12      	ldr	r3, [pc, #72]	; (84a94 <UDPHS_Handler+0x588>)
   84a4c:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84a4e:	2000      	movs	r0, #0
   84a50:	4b11      	ldr	r3, [pc, #68]	; (84a98 <UDPHS_Handler+0x58c>)
   84a52:	4798      	blx	r3
		goto udd_interrupt_end;
   84a54:	e5b9      	b.n	845ca <UDPHS_Handler+0xbe>
   84a56:	bf00      	nop
   84a58:	2000269c 	.word	0x2000269c
   84a5c:	20002102 	.word	0x20002102
   84a60:	20002100 	.word	0x20002100
   84a64:	00084121 	.word	0x00084121
   84a68:	400a4000 	.word	0x400a4000
   84a6c:	20002104 	.word	0x20002104
   84a70:	00084139 	.word	0x00084139
   84a74:	400a4300 	.word	0x400a4300
   84a78:	20002108 	.word	0x20002108
   84a7c:	0008433d 	.word	0x0008433d
   84a80:	00084305 	.word	0x00084305
   84a84:	0008322d 	.word	0x0008322d
   84a88:	20000982 	.word	0x20000982
   84a8c:	000840cd 	.word	0x000840cd
   84a90:	00083f0d 	.word	0x00083f0d
   84a94:	00081309 	.word	0x00081309
   84a98:	00084059 	.word	0x00084059
	if (Is_udd_reset()) {
   84a9c:	4b18      	ldr	r3, [pc, #96]	; (84b00 <UDPHS_Handler+0x5f4>)
   84a9e:	695b      	ldr	r3, [r3, #20]
   84aa0:	f013 0f10 	tst.w	r3, #16
   84aa4:	f47f af6e 	bne.w	84984 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84aa8:	4b15      	ldr	r3, [pc, #84]	; (84b00 <UDPHS_Handler+0x5f4>)
   84aaa:	691b      	ldr	r3, [r3, #16]
   84aac:	f013 0f02 	tst.w	r3, #2
   84ab0:	d004      	beq.n	84abc <UDPHS_Handler+0x5b0>
   84ab2:	4b13      	ldr	r3, [pc, #76]	; (84b00 <UDPHS_Handler+0x5f4>)
   84ab4:	695b      	ldr	r3, [r3, #20]
   84ab6:	f013 0f02 	tst.w	r3, #2
   84aba:	d1b6      	bne.n	84a2a <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   84abc:	4b10      	ldr	r3, [pc, #64]	; (84b00 <UDPHS_Handler+0x5f4>)
   84abe:	695b      	ldr	r3, [r3, #20]
   84ac0:	f013 0f20 	tst.w	r3, #32
   84ac4:	f43f ad81 	beq.w	845ca <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   84ac8:	2001      	movs	r0, #1
   84aca:	4b0e      	ldr	r3, [pc, #56]	; (84b04 <UDPHS_Handler+0x5f8>)
   84acc:	4798      	blx	r3
		udd_ack_suspend();
   84ace:	4b0c      	ldr	r3, [pc, #48]	; (84b00 <UDPHS_Handler+0x5f4>)
   84ad0:	2202      	movs	r2, #2
   84ad2:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   84ad4:	2220      	movs	r2, #32
   84ad6:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   84ad8:	691a      	ldr	r2, [r3, #16]
   84ada:	f022 0220 	bic.w	r2, r2, #32
   84ade:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84ae0:	691a      	ldr	r2, [r3, #16]
   84ae2:	f042 0202 	orr.w	r2, r2, #2
   84ae6:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   84ae8:	691a      	ldr	r2, [r3, #16]
   84aea:	f042 0208 	orr.w	r2, r2, #8
   84aee:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84af0:	691a      	ldr	r2, [r3, #16]
   84af2:	f042 0204 	orr.w	r2, r2, #4
   84af6:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   84af8:	4b03      	ldr	r3, [pc, #12]	; (84b08 <UDPHS_Handler+0x5fc>)
   84afa:	4798      	blx	r3
		goto udd_interrupt_end;
   84afc:	e565      	b.n	845ca <UDPHS_Handler+0xbe>
   84afe:	bf00      	nop
   84b00:	400a4000 	.word	0x400a4000
   84b04:	00084059 	.word	0x00084059
   84b08:	00081315 	.word	0x00081315

00084b0c <udd_attach>:
{
   84b0c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84b0e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84b12:	b672      	cpsid	i
   84b14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84b18:	4b1d      	ldr	r3, [pc, #116]	; (84b90 <udd_attach+0x84>)
   84b1a:	2200      	movs	r2, #0
   84b1c:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   84b1e:	2001      	movs	r0, #1
   84b20:	4b1c      	ldr	r3, [pc, #112]	; (84b94 <udd_attach+0x88>)
   84b22:	4798      	blx	r3
	udd_enable_periph_ck();
   84b24:	201d      	movs	r0, #29
   84b26:	4b1c      	ldr	r3, [pc, #112]	; (84b98 <udd_attach+0x8c>)
   84b28:	4798      	blx	r3
	udd_attach_device();
   84b2a:	4b1c      	ldr	r3, [pc, #112]	; (84b9c <udd_attach+0x90>)
   84b2c:	681a      	ldr	r2, [r3, #0]
   84b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84b32:	601a      	str	r2, [r3, #0]
   84b34:	681a      	ldr	r2, [r3, #0]
   84b36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84b3a:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84b3c:	691a      	ldr	r2, [r3, #16]
   84b3e:	f042 0210 	orr.w	r2, r2, #16
   84b42:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84b44:	691a      	ldr	r2, [r3, #16]
   84b46:	f042 0202 	orr.w	r2, r2, #2
   84b4a:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84b4c:	691a      	ldr	r2, [r3, #16]
   84b4e:	f042 0220 	orr.w	r2, r2, #32
   84b52:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84b54:	691a      	ldr	r2, [r3, #16]
   84b56:	f042 0208 	orr.w	r2, r2, #8
   84b5a:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84b5c:	691a      	ldr	r2, [r3, #16]
   84b5e:	f042 0204 	orr.w	r2, r2, #4
   84b62:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84b64:	2208      	movs	r2, #8
   84b66:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84b68:	2204      	movs	r2, #4
   84b6a:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84b6c:	2210      	movs	r2, #16
   84b6e:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84b70:	2202      	movs	r2, #2
   84b72:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84b74:	2220      	movs	r2, #32
   84b76:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   84b78:	201d      	movs	r0, #29
   84b7a:	4b09      	ldr	r3, [pc, #36]	; (84ba0 <udd_attach+0x94>)
   84b7c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84b7e:	b92c      	cbnz	r4, 84b8c <udd_attach+0x80>
		cpu_irq_enable();
   84b80:	4b03      	ldr	r3, [pc, #12]	; (84b90 <udd_attach+0x84>)
   84b82:	2201      	movs	r2, #1
   84b84:	701a      	strb	r2, [r3, #0]
   84b86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84b8a:	b662      	cpsie	i
}
   84b8c:	bd10      	pop	{r4, pc}
   84b8e:	bf00      	nop
   84b90:	20000982 	.word	0x20000982
   84b94:	00084059 	.word	0x00084059
   84b98:	00083ee1 	.word	0x00083ee1
   84b9c:	400a4000 	.word	0x400a4000
   84ba0:	00083f0d 	.word	0x00083f0d

00084ba4 <udd_enable>:
{
   84ba4:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   84ba6:	4b2a      	ldr	r3, [pc, #168]	; (84c50 <udd_enable+0xac>)
   84ba8:	4798      	blx	r3
	udd_enable_periph_ck();
   84baa:	201d      	movs	r0, #29
   84bac:	4b29      	ldr	r3, [pc, #164]	; (84c54 <udd_enable+0xb0>)
   84bae:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84bb0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84bb4:	b672      	cpsid	i
   84bb6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84bba:	2300      	movs	r3, #0
   84bbc:	4a26      	ldr	r2, [pc, #152]	; (84c58 <udd_enable+0xb4>)
   84bbe:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   84bc0:	4926      	ldr	r1, [pc, #152]	; (84c5c <udd_enable+0xb8>)
   84bc2:	680a      	ldr	r2, [r1, #0]
   84bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84bc8:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84bca:	4a25      	ldr	r2, [pc, #148]	; (84c60 <udd_enable+0xbc>)
   84bcc:	2150      	movs	r1, #80	; 0x50
   84bce:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84bd2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   84bd6:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   84bd8:	4822      	ldr	r0, [pc, #136]	; (84c64 <udd_enable+0xc0>)
   84bda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84bde:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   84be2:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   84be4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84be8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   84bf0:	f36f 0282 	bfc	r2, #2, #1
   84bf4:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84bf6:	3301      	adds	r3, #1
   84bf8:	2b06      	cmp	r3, #6
   84bfa:	d1ee      	bne.n	84bda <udd_enable+0x36>
	udd_high_speed_enable();
   84bfc:	4a17      	ldr	r2, [pc, #92]	; (84c5c <udd_enable+0xb8>)
   84bfe:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84c02:	f023 0303 	bic.w	r3, r3, #3
   84c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84c0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84c0e:	4b16      	ldr	r3, [pc, #88]	; (84c68 <udd_enable+0xc4>)
   84c10:	4798      	blx	r3
	udd_b_idle = false;
   84c12:	2300      	movs	r3, #0
   84c14:	4a15      	ldr	r2, [pc, #84]	; (84c6c <udd_enable+0xc8>)
   84c16:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84c18:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84c1c:	b672      	cpsid	i
   84c1e:	f3bf 8f5f 	dmb	sy
   84c22:	4a0d      	ldr	r2, [pc, #52]	; (84c58 <udd_enable+0xb4>)
   84c24:	7013      	strb	r3, [r2, #0]
   84c26:	4a12      	ldr	r2, [pc, #72]	; (84c70 <udd_enable+0xcc>)
   84c28:	78d3      	ldrb	r3, [r2, #3]
   84c2a:	3301      	adds	r3, #1
   84c2c:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84c2e:	b929      	cbnz	r1, 84c3c <udd_enable+0x98>
		cpu_irq_enable();
   84c30:	4b09      	ldr	r3, [pc, #36]	; (84c58 <udd_enable+0xb4>)
   84c32:	2201      	movs	r2, #1
   84c34:	701a      	strb	r2, [r3, #0]
   84c36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c3a:	b662      	cpsie	i
	udd_attach();
   84c3c:	4b0d      	ldr	r3, [pc, #52]	; (84c74 <udd_enable+0xd0>)
   84c3e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84c40:	b92c      	cbnz	r4, 84c4e <udd_enable+0xaa>
		cpu_irq_enable();
   84c42:	4b05      	ldr	r3, [pc, #20]	; (84c58 <udd_enable+0xb4>)
   84c44:	2201      	movs	r2, #1
   84c46:	701a      	strb	r2, [r3, #0]
   84c48:	f3bf 8f5f 	dmb	sy
   84c4c:	b662      	cpsie	i
}
   84c4e:	bd10      	pop	{r4, pc}
   84c50:	00082f25 	.word	0x00082f25
   84c54:	00083ee1 	.word	0x00083ee1
   84c58:	20000982 	.word	0x20000982
   84c5c:	400a4000 	.word	0x400a4000
   84c60:	e000e100 	.word	0xe000e100
   84c64:	20002108 	.word	0x20002108
   84c68:	00083f49 	.word	0x00083f49
   84c6c:	200020fe 	.word	0x200020fe
   84c70:	20002688 	.word	0x20002688
   84c74:	00084b0d 	.word	0x00084b0d

00084c78 <udd_detach>:
{
   84c78:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   84c7a:	201d      	movs	r0, #29
   84c7c:	4b08      	ldr	r3, [pc, #32]	; (84ca0 <udd_detach+0x28>)
   84c7e:	4798      	blx	r3
	udd_detach_device();
   84c80:	4b08      	ldr	r3, [pc, #32]	; (84ca4 <udd_detach+0x2c>)
   84c82:	681a      	ldr	r2, [r3, #0]
   84c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84c88:	601a      	str	r2, [r3, #0]
   84c8a:	681a      	ldr	r2, [r3, #0]
   84c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84c90:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   84c92:	201d      	movs	r0, #29
   84c94:	4b04      	ldr	r3, [pc, #16]	; (84ca8 <udd_detach+0x30>)
   84c96:	4798      	blx	r3
	udd_sleep_mode(false);
   84c98:	2000      	movs	r0, #0
   84c9a:	4b04      	ldr	r3, [pc, #16]	; (84cac <udd_detach+0x34>)
   84c9c:	4798      	blx	r3
}
   84c9e:	bd08      	pop	{r3, pc}
   84ca0:	00083ee1 	.word	0x00083ee1
   84ca4:	400a4000 	.word	0x400a4000
   84ca8:	00083f0d 	.word	0x00083f0d
   84cac:	00084059 	.word	0x00084059

00084cb0 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84cb0:	4b02      	ldr	r3, [pc, #8]	; (84cbc <udd_is_high_speed+0xc>)
   84cb2:	6958      	ldr	r0, [r3, #20]
}
   84cb4:	f000 0001 	and.w	r0, r0, #1
   84cb8:	4770      	bx	lr
   84cba:	bf00      	nop
   84cbc:	400a4000 	.word	0x400a4000

00084cc0 <udd_set_address>:
	udd_disable_address();
   84cc0:	4b08      	ldr	r3, [pc, #32]	; (84ce4 <udd_set_address+0x24>)
   84cc2:	681a      	ldr	r2, [r3, #0]
   84cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84cc8:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84cca:	681a      	ldr	r2, [r3, #0]
   84ccc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84cd0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84cd4:	4302      	orrs	r2, r0
   84cd6:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84cd8:	681a      	ldr	r2, [r3, #0]
   84cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84cde:	601a      	str	r2, [r3, #0]
}
   84ce0:	4770      	bx	lr
   84ce2:	bf00      	nop
   84ce4:	400a4000 	.word	0x400a4000

00084ce8 <udd_getaddress>:
	return udd_get_configured_address();
   84ce8:	4b02      	ldr	r3, [pc, #8]	; (84cf4 <udd_getaddress+0xc>)
   84cea:	6818      	ldr	r0, [r3, #0]
}
   84cec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84cf0:	4770      	bx	lr
   84cf2:	bf00      	nop
   84cf4:	400a4000 	.word	0x400a4000

00084cf8 <udd_get_frame_number>:
	return udd_frame_number();
   84cf8:	4b02      	ldr	r3, [pc, #8]	; (84d04 <udd_get_frame_number+0xc>)
   84cfa:	6858      	ldr	r0, [r3, #4]
}
   84cfc:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84d00:	4770      	bx	lr
   84d02:	bf00      	nop
   84d04:	400a4000 	.word	0x400a4000

00084d08 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84d08:	4b02      	ldr	r3, [pc, #8]	; (84d14 <udd_get_micro_frame_number+0xc>)
   84d0a:	6858      	ldr	r0, [r3, #4]
}
   84d0c:	f000 0007 	and.w	r0, r0, #7
   84d10:	4770      	bx	lr
   84d12:	bf00      	nop
   84d14:	400a4000 	.word	0x400a4000

00084d18 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84d18:	4b01      	ldr	r3, [pc, #4]	; (84d20 <udd_set_setup_payload+0x8>)
   84d1a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84d1c:	8199      	strh	r1, [r3, #12]
}
   84d1e:	4770      	bx	lr
   84d20:	2000269c 	.word	0x2000269c

00084d24 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84d24:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84d28:	2a06      	cmp	r2, #6
   84d2a:	d900      	bls.n	84d2e <udd_ep_free+0xa>
   84d2c:	4770      	bx	lr
{
   84d2e:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   84d30:	0153      	lsls	r3, r2, #5
   84d32:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   84d36:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84d3a:	2101      	movs	r1, #1
   84d3c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   84d40:	4603      	mov	r3, r0
   84d42:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   84d46:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   84d4a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84d4e:	1e55      	subs	r5, r2, #1
   84d50:	4c08      	ldr	r4, [pc, #32]	; (84d74 <udd_ep_free+0x50>)
   84d52:	fa05 f601 	lsl.w	r6, r5, r1
   84d56:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   84d5a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84d5e:	4b06      	ldr	r3, [pc, #24]	; (84d78 <udd_ep_free+0x54>)
   84d60:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84d62:	4435      	add	r5, r6
   84d64:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84d68:	7d23      	ldrb	r3, [r4, #20]
   84d6a:	f36f 0382 	bfc	r3, #2, #1
   84d6e:	7523      	strb	r3, [r4, #20]
}
   84d70:	bd70      	pop	{r4, r5, r6, pc}
   84d72:	bf00      	nop
   84d74:	20002108 	.word	0x20002108
   84d78:	00084305 	.word	0x00084305

00084d7c <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84d7c:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84d80:	0143      	lsls	r3, r0, #5
   84d82:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84d86:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84d8a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84d8e:	f013 0f20 	tst.w	r3, #32
   84d92:	d109      	bne.n	84da8 <udd_ep_is_halted+0x2c>
   84d94:	3801      	subs	r0, #1
   84d96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84d9a:	4b04      	ldr	r3, [pc, #16]	; (84dac <udd_ep_is_halted+0x30>)
   84d9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84da0:	7d00      	ldrb	r0, [r0, #20]
   84da2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   84da6:	4770      	bx	lr
   84da8:	2001      	movs	r0, #1
}
   84daa:	4770      	bx	lr
   84dac:	20002108 	.word	0x20002108

00084db0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84db0:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84db4:	2b06      	cmp	r3, #6
   84db6:	d851      	bhi.n	84e5c <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84db8:	015a      	lsls	r2, r3, #5
   84dba:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84dbe:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84dc2:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84dc6:	f012 0f20 	tst.w	r2, #32
   84dca:	d149      	bne.n	84e60 <udd_ep_set_halt+0xb0>
{
   84dcc:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84dce:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84dd0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84dd4:	4a25      	ldr	r2, [pc, #148]	; (84e6c <udd_ep_set_halt+0xbc>)
   84dd6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   84dda:	7d12      	ldrb	r2, [r2, #20]
   84ddc:	f012 0f04 	tst.w	r2, #4
   84de0:	d140      	bne.n	84e64 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   84de2:	f012 0f01 	tst.w	r2, #1
   84de6:	d13f      	bne.n	84e68 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84de8:	f010 0f80 	tst.w	r0, #128	; 0x80
   84dec:	d114      	bne.n	84e18 <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84dee:	015b      	lsls	r3, r3, #5
   84df0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84df4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84df8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84dfc:	f022 0202 	bic.w	r2, r2, #2
   84e00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84e04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84e08:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84e0c:	2220      	movs	r2, #32
   84e0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   84e12:	2001      	movs	r0, #1
}
   84e14:	bc10      	pop	{r4}
   84e16:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84e18:	015a      	lsls	r2, r3, #5
   84e1a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84e1e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84e22:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84e26:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84e2a:	d0e0      	beq.n	84dee <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84e2c:	4a0f      	ldr	r2, [pc, #60]	; (84e6c <udd_ep_set_halt+0xbc>)
   84e2e:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   84e32:	7d0a      	ldrb	r2, [r1, #20]
   84e34:	f042 0204 	orr.w	r2, r2, #4
   84e38:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   84e3a:	490d      	ldr	r1, [pc, #52]	; (84e70 <udd_ep_set_halt+0xc0>)
   84e3c:	f103 0208 	add.w	r2, r3, #8
   84e40:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   84e44:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84e48:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   84e4a:	6908      	ldr	r0, [r1, #16]
   84e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   84e50:	fa02 f303 	lsl.w	r3, r2, r3
   84e54:	4303      	orrs	r3, r0
   84e56:	610b      	str	r3, [r1, #16]
			return true;
   84e58:	2001      	movs	r0, #1
   84e5a:	e7db      	b.n	84e14 <udd_ep_set_halt+0x64>
		return false;
   84e5c:	2000      	movs	r0, #0
   84e5e:	4770      	bx	lr
		return true; // Already STALL
   84e60:	2001      	movs	r0, #1
}
   84e62:	4770      	bx	lr
		return true; // Already STALL
   84e64:	2001      	movs	r0, #1
   84e66:	e7d5      	b.n	84e14 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   84e68:	2000      	movs	r0, #0
   84e6a:	e7d3      	b.n	84e14 <udd_ep_set_halt+0x64>
   84e6c:	20002108 	.word	0x20002108
   84e70:	400a4000 	.word	0x400a4000

00084e74 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   84e74:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   84e78:	2806      	cmp	r0, #6
   84e7a:	d862      	bhi.n	84f42 <udd_ep_clear_halt+0xce>
{
   84e7c:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   84e7e:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   84e80:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   84e84:	4b37      	ldr	r3, [pc, #220]	; (84f64 <udd_ep_clear_halt+0xf0>)
   84e86:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   84e8a:	7d1b      	ldrb	r3, [r3, #20]
   84e8c:	f013 0f04 	tst.w	r3, #4
   84e90:	d05b      	beq.n	84f4a <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   84e92:	460b      	mov	r3, r1
   84e94:	4933      	ldr	r1, [pc, #204]	; (84f64 <udd_ep_clear_halt+0xf0>)
   84e96:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84e9a:	7d19      	ldrb	r1, [r3, #20]
   84e9c:	f36f 0182 	bfc	r1, #2, #1
   84ea0:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   84ea2:	4b31      	ldr	r3, [pc, #196]	; (84f68 <udd_ep_clear_halt+0xf4>)
   84ea4:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   84ea8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   84eac:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   84eb0:	6919      	ldr	r1, [r3, #16]
   84eb2:	f44f 7480 	mov.w	r4, #256	; 0x100
   84eb6:	4084      	lsls	r4, r0
   84eb8:	ea21 0104 	bic.w	r1, r1, r4
   84ebc:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   84ebe:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   84ec2:	f013 0f20 	tst.w	r3, #32
   84ec6:	d024      	beq.n	84f12 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   84ec8:	0143      	lsls	r3, r0, #5
   84eca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ece:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84ed2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84ed6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84eda:	d00b      	beq.n	84ef4 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   84edc:	0143      	lsls	r3, r0, #5
   84ede:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84ee2:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84eea:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   84eee:	2140      	movs	r1, #64	; 0x40
   84ef0:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   84ef4:	0143      	lsls	r3, r0, #5
   84ef6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84efa:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84efe:	2120      	movs	r1, #32
   84f00:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   84f04:	4618      	mov	r0, r3
   84f06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   84f0a:	f043 0302 	orr.w	r3, r3, #2
   84f0e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   84f12:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f16:	4913      	ldr	r1, [pc, #76]	; (84f64 <udd_ep_clear_halt+0xf0>)
   84f18:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f1c:	7d1b      	ldrb	r3, [r3, #20]
   84f1e:	f013 0f01 	tst.w	r3, #1
   84f22:	d010      	beq.n	84f46 <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   84f24:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   84f28:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   84f2c:	7d18      	ldrb	r0, [r3, #20]
   84f2e:	f36f 0000 	bfc	r0, #0, #1
   84f32:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   84f34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   84f38:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   84f3c:	4798      	blx	r3
	return true;
   84f3e:	2001      	movs	r0, #1
   84f40:	e002      	b.n	84f48 <udd_ep_clear_halt+0xd4>
		return false;
   84f42:	2000      	movs	r0, #0
}
   84f44:	4770      	bx	lr
	return true;
   84f46:	2001      	movs	r0, #1
}
   84f48:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   84f4a:	0143      	lsls	r3, r0, #5
   84f4c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f50:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84f58:	f013 0f20 	tst.w	r3, #32
   84f5c:	d1b4      	bne.n	84ec8 <udd_ep_clear_halt+0x54>
	return true;
   84f5e:	2001      	movs	r0, #1
   84f60:	e7f2      	b.n	84f48 <udd_ep_clear_halt+0xd4>
   84f62:	bf00      	nop
   84f64:	20002108 	.word	0x20002108
   84f68:	400a4000 	.word	0x400a4000

00084f6c <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   84f6c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   84f70:	2806      	cmp	r0, #6
   84f72:	d868      	bhi.n	85046 <udd_ep_run+0xda>
{
   84f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   84f76:	0144      	lsls	r4, r0, #5
   84f78:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84f7c:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84f80:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   84f84:	f014 0f01 	tst.w	r4, #1
   84f88:	d05f      	beq.n	8504a <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   84f8a:	0144      	lsls	r4, r0, #5
   84f8c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   84f90:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   84f94:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   84f98:	f014 0f20 	tst.w	r4, #32
   84f9c:	d157      	bne.n	8504e <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   84f9e:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   84fa0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   84fa4:	4d2d      	ldr	r5, [pc, #180]	; (8505c <udd_ep_run+0xf0>)
   84fa6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   84faa:	7d2d      	ldrb	r5, [r5, #20]
   84fac:	f015 0f04 	tst.w	r5, #4
   84fb0:	d14f      	bne.n	85052 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84fb2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   84fb6:	b672      	cpsid	i
   84fb8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84fbc:	4d28      	ldr	r5, [pc, #160]	; (85060 <udd_ep_run+0xf4>)
   84fbe:	2600      	movs	r6, #0
   84fc0:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   84fc2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   84fc6:	4e25      	ldr	r6, [pc, #148]	; (8505c <udd_ep_run+0xf0>)
   84fc8:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84fcc:	7d2d      	ldrb	r5, [r5, #20]
   84fce:	f015 0f01 	tst.w	r5, #1
   84fd2:	d121      	bne.n	85018 <udd_ep_run+0xac>
	ptr_job->busy = true;
   84fd4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   84fd8:	4e20      	ldr	r6, [pc, #128]	; (8505c <udd_ep_run+0xf0>)
   84fda:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   84fde:	7d2e      	ldrb	r6, [r5, #20]
   84fe0:	f046 0601 	orr.w	r6, r6, #1
   84fe4:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   84fe6:	b92f      	cbnz	r7, 84ff4 <udd_ep_run+0x88>
		cpu_irq_enable();
   84fe8:	4d1d      	ldr	r5, [pc, #116]	; (85060 <udd_ep_run+0xf4>)
   84fea:	2601      	movs	r6, #1
   84fec:	702e      	strb	r6, [r5, #0]
   84fee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84ff2:	b662      	cpsie	i
	ptr_job->buf = buf;
   84ff4:	4e19      	ldr	r6, [pc, #100]	; (8505c <udd_ep_run+0xf0>)
   84ff6:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   84ffa:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   84ffe:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   85000:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   85002:	2200      	movs	r2, #0
   85004:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   85006:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   85008:	9a06      	ldr	r2, [sp, #24]
   8500a:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8500e:	b961      	cbnz	r1, 8502a <udd_ep_run+0xbe>
   85010:	fab3 f383 	clz	r3, r3
   85014:	095b      	lsrs	r3, r3, #5
   85016:	e009      	b.n	8502c <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   85018:	b9ef      	cbnz	r7, 85056 <udd_ep_run+0xea>
		cpu_irq_enable();
   8501a:	4b11      	ldr	r3, [pc, #68]	; (85060 <udd_ep_run+0xf4>)
   8501c:	2201      	movs	r2, #1
   8501e:	701a      	strb	r2, [r3, #0]
   85020:	f3bf 8f5f 	dmb	sy
   85024:	b662      	cpsie	i
		return false; // Job already on going
   85026:	2000      	movs	r0, #0
}
   85028:	e010      	b.n	8504c <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8502a:	2301      	movs	r3, #1
   8502c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   85030:	4a0a      	ldr	r2, [pc, #40]	; (8505c <udd_ep_run+0xf0>)
   85032:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   85036:	7d22      	ldrb	r2, [r4, #20]
   85038:	f363 0241 	bfi	r2, r3, #1, #1
   8503c:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   8503e:	4b09      	ldr	r3, [pc, #36]	; (85064 <udd_ep_run+0xf8>)
   85040:	4798      	blx	r3
	return true;
   85042:	2001      	movs	r0, #1
   85044:	e002      	b.n	8504c <udd_ep_run+0xe0>
		return false;
   85046:	2000      	movs	r0, #0
}
   85048:	4770      	bx	lr
		return false; // Endpoint is halted
   8504a:	2000      	movs	r0, #0
}
   8504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   8504e:	2000      	movs	r0, #0
   85050:	e7fc      	b.n	8504c <udd_ep_run+0xe0>
   85052:	2000      	movs	r0, #0
   85054:	e7fa      	b.n	8504c <udd_ep_run+0xe0>
		return false; // Job already on going
   85056:	2000      	movs	r0, #0
   85058:	e7f8      	b.n	8504c <udd_ep_run+0xe0>
   8505a:	bf00      	nop
   8505c:	20002108 	.word	0x20002108
   85060:	20000982 	.word	0x20000982
   85064:	0008433d 	.word	0x0008433d

00085068 <udd_ep_alloc>:
{
   85068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8506c:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   8506e:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   85072:	2d06      	cmp	r5, #6
   85074:	f200 812a 	bhi.w	852cc <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   85078:	016c      	lsls	r4, r5, #5
   8507a:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   8507e:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85082:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   85086:	f014 0401 	ands.w	r4, r4, #1
   8508a:	f040 8123 	bne.w	852d4 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8508e:	f001 0c03 	and.w	ip, r1, #3
   85092:	f1bc 0f02 	cmp.w	ip, #2
   85096:	d05e      	beq.n	85156 <udd_ep_alloc+0xee>
   85098:	f1bc 0f03 	cmp.w	ip, #3
   8509c:	d064      	beq.n	85168 <udd_ep_alloc+0x100>
   8509e:	f1bc 0f01 	cmp.w	ip, #1
   850a2:	d001      	beq.n	850a8 <udd_ep_alloc+0x40>
   850a4:	2000      	movs	r0, #0
   850a6:	e112      	b.n	852ce <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   850a8:	2d00      	cmp	r5, #0
   850aa:	d052      	beq.n	85152 <udd_ep_alloc+0xea>
   850ac:	1eeb      	subs	r3, r5, #3
   850ae:	b2db      	uxtb	r3, r3
   850b0:	2b01      	cmp	r3, #1
   850b2:	bf94      	ite	ls
   850b4:	2300      	movls	r3, #0
   850b6:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   850b8:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   850ba:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   850be:	2b00      	cmp	r3, #0
   850c0:	d054      	beq.n	8516c <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   850c2:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   850c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   850ca:	d04a      	beq.n	85162 <udd_ep_alloc+0xfa>
   850cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   850d0:	bf08      	it	eq
   850d2:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   850d6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   850da:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   850dc:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   850e0:	016f      	lsls	r7, r5, #5
   850e2:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   850e6:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   850ea:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   850ee:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   850f2:	f026 0603 	bic.w	r6, r6, #3
   850f6:	010b      	lsls	r3, r1, #4
   850f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
   850fc:	f010 0f80 	tst.w	r0, #128	; 0x80
   85100:	bf0c      	ite	eq
   85102:	4621      	moveq	r1, r4
   85104:	2108      	movne	r1, #8
   85106:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8510a:	d237      	bcs.n	8517c <udd_ep_alloc+0x114>
   8510c:	2a08      	cmp	r2, #8
   8510e:	bf38      	it	cc
   85110:	2208      	movcc	r2, #8
   85112:	0052      	lsls	r2, r2, #1
   85114:	3a01      	subs	r2, #1
   85116:	fab2 f282 	clz	r2, r2
   8511a:	f1c2 021c 	rsb	r2, r2, #28
   8511e:	4333      	orrs	r3, r6
   85120:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   85124:	430b      	orrs	r3, r1
   85126:	f1be 0f00 	cmp.w	lr, #0
   8512a:	d001      	beq.n	85130 <udd_ep_alloc+0xc8>
   8512c:	ea4f 240c 	mov.w	r4, ip, lsl #8
   85130:	431a      	orrs	r2, r3
   85132:	4322      	orrs	r2, r4
   85134:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   85138:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   8513c:	2b00      	cmp	r3, #0
   8513e:	f280 80cd 	bge.w	852dc <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   85142:	2301      	movs	r3, #1
   85144:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85148:	2306      	movs	r3, #6
	ep_allocated = 0;
   8514a:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   8514c:	4865      	ldr	r0, [pc, #404]	; (852e4 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   8514e:	2401      	movs	r4, #1
   85150:	e01b      	b.n	8518a <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85152:	2300      	movs	r3, #0
   85154:	e7b0      	b.n	850b8 <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   85156:	2d03      	cmp	r5, #3
   85158:	bf34      	ite	cc
   8515a:	46e0      	movcc	r8, ip
   8515c:	f04f 0801 	movcs.w	r8, #1
   85160:	e004      	b.n	8516c <udd_ep_alloc+0x104>
			nb_tran = 2;
   85162:	f04f 0c02 	mov.w	ip, #2
   85166:	e7b6      	b.n	850d6 <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85168:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8516c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85170:	f040 80b2 	bne.w	852d8 <udd_ep_alloc+0x270>
   85174:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   85178:	46f4      	mov	ip, lr
   8517a:	e7b1      	b.n	850e0 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8517c:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85180:	e7c9      	b.n	85116 <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85182:	3b01      	subs	r3, #1
   85184:	b2db      	uxtb	r3, r3
   85186:	429d      	cmp	r5, r3
   85188:	d81e      	bhi.n	851c8 <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   8518a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   8518e:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85192:	f012 0f01 	tst.w	r2, #1
   85196:	d0f4      	beq.n	85182 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   85198:	015a      	lsls	r2, r3, #5
   8519a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8519e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   851a2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   851a6:	f3c1 1181 	ubfx	r1, r1, #6, #2
   851aa:	005f      	lsls	r7, r3, #1
   851ac:	40b9      	lsls	r1, r7
   851ae:	430e      	orrs	r6, r1
   851b0:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   851b2:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   851b6:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   851ba:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   851be:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   851c2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   851c6:	e7dc      	b.n	85182 <udd_ep_alloc+0x11a>
   851c8:	462c      	mov	r4, r5
   851ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   851ce:	4d46      	ldr	r5, [pc, #280]	; (852e8 <udd_ep_alloc+0x280>)
   851d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   851d4:	4f44      	ldr	r7, [pc, #272]	; (852e8 <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   851d6:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   851da:	f8df 9110 	ldr.w	r9, [pc, #272]	; 852ec <udd_ep_alloc+0x284>
   851de:	e023      	b.n	85228 <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   851e0:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   851e4:	4a40      	ldr	r2, [pc, #256]	; (852e8 <udd_ep_alloc+0x280>)
   851e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   851ea:	2c00      	cmp	r4, #0
   851ec:	d078      	beq.n	852e0 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   851ee:	f10c 0c08 	add.w	ip, ip, #8
   851f2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   851f6:	4b3b      	ldr	r3, [pc, #236]	; (852e4 <udd_ep_alloc+0x27c>)
   851f8:	f853 300c 	ldr.w	r3, [r3, ip]
   851fc:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   85200:	bf18      	it	ne
   85202:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85206:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8520a:	4b37      	ldr	r3, [pc, #220]	; (852e8 <udd_ep_alloc+0x280>)
   8520c:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   85210:	4602      	mov	r2, r0
   85212:	f8de 100c 	ldr.w	r1, [lr, #12]
   85216:	2001      	movs	r0, #1
   85218:	47a0      	blx	r4
			return false;
   8521a:	2000      	movs	r0, #0
   8521c:	e057      	b.n	852ce <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8521e:	3401      	adds	r4, #1
   85220:	3518      	adds	r5, #24
   85222:	b2e3      	uxtb	r3, r4
   85224:	2b06      	cmp	r3, #6
   85226:	d84f      	bhi.n	852c8 <udd_ep_alloc+0x260>
   85228:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8522a:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8522c:	0063      	lsls	r3, r4, #1
   8522e:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   85232:	f013 0203 	ands.w	r2, r3, #3
   85236:	d0f2      	beq.n	8521e <udd_ep_alloc+0x1b6>
   85238:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   8523c:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   85240:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   85244:	7d0b      	ldrb	r3, [r1, #20]
   85246:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   8524a:	f36f 0300 	bfc	r3, #0, #1
   8524e:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   85250:	0163      	lsls	r3, r4, #5
   85252:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85256:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8525a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   8525e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85262:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   85266:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   8526a:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   8526e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85272:	2a00      	cmp	r2, #0
   85274:	dab4      	bge.n	851e0 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   85276:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   8527a:	f042 0202 	orr.w	r2, r2, #2
   8527e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   85282:	f1ba 0f00 	cmp.w	sl, #0
   85286:	d0ca      	beq.n	8521e <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85288:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   8528c:	f855 2c08 	ldr.w	r2, [r5, #-8]
   85290:	ebab 0102 	sub.w	r1, fp, r2
   85294:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   85298:	f855 3c10 	ldr.w	r3, [r5, #-16]
   8529c:	eb02 0a03 	add.w	sl, r2, r3
   852a0:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   852a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   852a8:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   852ac:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   852b0:	f855 3c18 	ldr.w	r3, [r5, #-24]
   852b4:	9300      	str	r3, [sp, #0]
   852b6:	ebaa 030b 	sub.w	r3, sl, fp
   852ba:	440a      	add	r2, r1
   852bc:	f3cc 0140 	ubfx	r1, ip, #1, #1
   852c0:	47c8      	blx	r9
			if (!b_restart) {
   852c2:	2800      	cmp	r0, #0
   852c4:	d1ab      	bne.n	8521e <udd_ep_alloc+0x1b6>
   852c6:	e002      	b.n	852ce <udd_ep_alloc+0x266>
	return true;
   852c8:	2001      	movs	r0, #1
   852ca:	e000      	b.n	852ce <udd_ep_alloc+0x266>
		return false;
   852cc:	2000      	movs	r0, #0
}
   852ce:	b003      	add	sp, #12
   852d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   852d4:	2000      	movs	r0, #0
   852d6:	e7fa      	b.n	852ce <udd_ep_alloc+0x266>
		return false;
   852d8:	2000      	movs	r0, #0
   852da:	e7f8      	b.n	852ce <udd_ep_alloc+0x266>
		return false;
   852dc:	2000      	movs	r0, #0
   852de:	e7f6      	b.n	852ce <udd_ep_alloc+0x266>
				return false;
   852e0:	2000      	movs	r0, #0
   852e2:	e7f4      	b.n	852ce <udd_ep_alloc+0x266>
   852e4:	400a4000 	.word	0x400a4000
   852e8:	20002108 	.word	0x20002108
   852ec:	00084f6d 	.word	0x00084f6d

000852f0 <udd_ep_abort>:
{
   852f0:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   852f2:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   852f6:	4b18      	ldr	r3, [pc, #96]	; (85358 <udd_ep_abort+0x68>)
   852f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   852fc:	2100      	movs	r1, #0
   852fe:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85300:	f010 0f80 	tst.w	r0, #128	; 0x80
   85304:	d109      	bne.n	8531a <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85306:	1e50      	subs	r0, r2, #1
   85308:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8530c:	2101      	movs	r1, #1
   8530e:	4b13      	ldr	r3, [pc, #76]	; (8535c <udd_ep_abort+0x6c>)
   85310:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85314:	4b12      	ldr	r3, [pc, #72]	; (85360 <udd_ep_abort+0x70>)
   85316:	4798      	blx	r3
}
   85318:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   8531a:	0151      	lsls	r1, r2, #5
   8531c:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   85320:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85324:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   85328:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   8532c:	d0eb      	beq.n	85306 <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   8532e:	0153      	lsls	r3, r2, #5
   85330:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   85334:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   85338:	f501 748a 	add.w	r4, r1, #276	; 0x114
   8533c:	f44f 7000 	mov.w	r0, #512	; 0x200
   85340:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   85342:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   85346:	f413 7f00 	tst.w	r3, #512	; 0x200
   8534a:	d1fa      	bne.n	85342 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   8534c:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   85350:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85354:	d1f4      	bne.n	85340 <udd_ep_abort+0x50>
   85356:	e7d6      	b.n	85306 <udd_ep_abort+0x16>
   85358:	400a4300 	.word	0x400a4300
   8535c:	20002108 	.word	0x20002108
   85360:	00084305 	.word	0x00084305

00085364 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   85364:	4a07      	ldr	r2, [pc, #28]	; (85384 <udd_test_mode_j+0x20>)
   85366:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8536a:	f023 0303 	bic.w	r3, r3, #3
   8536e:	f043 0302 	orr.w	r3, r3, #2
   85372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   85376:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8537a:	f043 0304 	orr.w	r3, r3, #4
   8537e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85382:	4770      	bx	lr
   85384:	400a4000 	.word	0x400a4000

00085388 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   85388:	4a07      	ldr	r2, [pc, #28]	; (853a8 <udd_test_mode_k+0x20>)
   8538a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8538e:	f023 0303 	bic.w	r3, r3, #3
   85392:	f043 0302 	orr.w	r3, r3, #2
   85396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8539a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8539e:	f043 0308 	orr.w	r3, r3, #8
   853a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   853a6:	4770      	bx	lr
   853a8:	400a4000 	.word	0x400a4000

000853ac <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   853ac:	4a04      	ldr	r2, [pc, #16]	; (853c0 <udd_test_mode_se0_nak+0x14>)
   853ae:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   853b2:	f023 0303 	bic.w	r3, r3, #3
   853b6:	f043 0302 	orr.w	r3, r3, #2
   853ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   853be:	4770      	bx	lr
   853c0:	400a4000 	.word	0x400a4000

000853c4 <udd_test_mode_packet>:
{
   853c4:	b430      	push	{r4, r5}
   853c6:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   853c8:	466c      	mov	r4, sp
   853ca:	4d21      	ldr	r5, [pc, #132]	; (85450 <udd_test_mode_packet+0x8c>)
   853cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   853d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   853d8:	e895 0003 	ldmia.w	r5, {r0, r1}
   853dc:	f844 0b04 	str.w	r0, [r4], #4
   853e0:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   853e2:	4b1c      	ldr	r3, [pc, #112]	; (85454 <udd_test_mode_packet+0x90>)
   853e4:	2101      	movs	r1, #1
   853e6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   853ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   853ee:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   853f2:	f022 0203 	bic.w	r2, r2, #3
   853f6:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   853fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   853fe:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   85402:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85406:	f022 0203 	bic.w	r2, r2, #3
   8540a:	f042 0202 	orr.w	r2, r2, #2
   8540e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85412:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85416:	f042 0210 	orr.w	r2, r2, #16
   8541a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   8541e:	466b      	mov	r3, sp
   85420:	480d      	ldr	r0, [pc, #52]	; (85458 <udd_test_mode_packet+0x94>)
   85422:	aa0e      	add	r2, sp, #56	; 0x38
   85424:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   85426:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   8542a:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   8542c:	f813 1b01 	ldrb.w	r1, [r3], #1
   85430:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85432:	42a3      	cmp	r3, r4
   85434:	d1f9      	bne.n	8542a <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   85436:	4b07      	ldr	r3, [pc, #28]	; (85454 <udd_test_mode_packet+0x90>)
   85438:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8543c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85440:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85444:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85448:	b00e      	add	sp, #56	; 0x38
   8544a:	bc30      	pop	{r4, r5}
   8544c:	4770      	bx	lr
   8544e:	bf00      	nop
   85450:	0008cad8 	.word	0x0008cad8
   85454:	400a4000 	.word	0x400a4000
   85458:	20180038 	.word	0x20180038

0008545c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8545c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8545e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
   85462:	d214      	bcs.n	8548e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85464:	00c9      	lsls	r1, r1, #3
   85466:	084b      	lsrs	r3, r1, #1
   85468:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   8546c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   85470:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85472:	1e5c      	subs	r4, r3, #1
   85474:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85478:	428c      	cmp	r4, r1
   8547a:	d901      	bls.n	85480 <usart_set_async_baudrate+0x24>
		return 1;
   8547c:	2001      	movs	r0, #1
   8547e:	e018      	b.n	854b2 <usart_set_async_baudrate+0x56>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   85480:	6841      	ldr	r1, [r0, #4]
   85482:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   85486:	6041      	str	r1, [r0, #4]
   85488:	e00d      	b.n	854a6 <usart_set_async_baudrate+0x4a>
		return 1;
   8548a:	2001      	movs	r0, #1
   8548c:	e011      	b.n	854b2 <usart_set_async_baudrate+0x56>
   8548e:	010c      	lsls	r4, r1, #4
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85490:	0863      	lsrs	r3, r4, #1
   85492:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85496:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   8549a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8549c:	1e5c      	subs	r4, r3, #1
   8549e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   854a2:	428c      	cmp	r4, r1
   854a4:	d8f1      	bhi.n	8548a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   854a6:	0412      	lsls	r2, r2, #16
   854a8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   854ac:	431a      	orrs	r2, r3
   854ae:	6202      	str	r2, [r0, #32]

	return 0;
   854b0:	2000      	movs	r0, #0
}
   854b2:	bc10      	pop	{r4}
   854b4:	4770      	bx	lr
	...

000854b8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   854b8:	4b0a      	ldr	r3, [pc, #40]	; (854e4 <usart_reset+0x2c>)
   854ba:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   854be:	2300      	movs	r3, #0
   854c0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   854c2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   854c4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   854c6:	2388      	movs	r3, #136	; 0x88
   854c8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   854ca:	2324      	movs	r3, #36	; 0x24
   854cc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   854ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   854d2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   854d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   854d8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   854da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   854de:	6003      	str	r3, [r0, #0]
}
   854e0:	4770      	bx	lr
   854e2:	bf00      	nop
   854e4:	55534100 	.word	0x55534100

000854e8 <usart_init_rs232>:
{
   854e8:	b570      	push	{r4, r5, r6, lr}
   854ea:	4605      	mov	r5, r0
   854ec:	460c      	mov	r4, r1
   854ee:	4616      	mov	r6, r2
	usart_reset(p_usart);
   854f0:	4b0e      	ldr	r3, [pc, #56]	; (8552c <usart_init_rs232+0x44>)
   854f2:	4798      	blx	r3
	ul_reg_val = 0;
   854f4:	4b0e      	ldr	r3, [pc, #56]	; (85530 <usart_init_rs232+0x48>)
   854f6:	2200      	movs	r2, #0
   854f8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   854fa:	b194      	cbz	r4, 85522 <usart_init_rs232+0x3a>
   854fc:	4632      	mov	r2, r6
   854fe:	6821      	ldr	r1, [r4, #0]
   85500:	4628      	mov	r0, r5
   85502:	4b0c      	ldr	r3, [pc, #48]	; (85534 <usart_init_rs232+0x4c>)
   85504:	4798      	blx	r3
   85506:	b970      	cbnz	r0, 85526 <usart_init_rs232+0x3e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85508:	6863      	ldr	r3, [r4, #4]
   8550a:	68a2      	ldr	r2, [r4, #8]
   8550c:	4313      	orrs	r3, r2
   8550e:	6922      	ldr	r2, [r4, #16]
   85510:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85512:	68e2      	ldr	r2, [r4, #12]
   85514:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85516:	4a06      	ldr	r2, [pc, #24]	; (85530 <usart_init_rs232+0x48>)
   85518:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   8551a:	686a      	ldr	r2, [r5, #4]
   8551c:	4313      	orrs	r3, r2
   8551e:	606b      	str	r3, [r5, #4]
}
   85520:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85522:	2001      	movs	r0, #1
   85524:	e7fc      	b.n	85520 <usart_init_rs232+0x38>
   85526:	2001      	movs	r0, #1
   85528:	e7fa      	b.n	85520 <usart_init_rs232+0x38>
   8552a:	bf00      	nop
   8552c:	000854b9 	.word	0x000854b9
   85530:	20002198 	.word	0x20002198
   85534:	0008545d 	.word	0x0008545d

00085538 <usart_init_sync_master>:
{
   85538:	b570      	push	{r4, r5, r6, lr}
   8553a:	4606      	mov	r6, r0
   8553c:	460d      	mov	r5, r1
   8553e:	4614      	mov	r4, r2
	usart_reset(p_usart);
   85540:	4b15      	ldr	r3, [pc, #84]	; (85598 <usart_init_sync_master+0x60>)
   85542:	4798      	blx	r3
	ul_reg_val = 0;
   85544:	4b15      	ldr	r3, [pc, #84]	; (8559c <usart_init_sync_master+0x64>)
   85546:	2200      	movs	r2, #0
   85548:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   8554a:	b305      	cbz	r5, 8558e <usart_init_sync_master+0x56>
   8554c:	682b      	ldr	r3, [r5, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   8554e:	eb04 0253 	add.w	r2, r4, r3, lsr #1
   85552:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85556:	1e51      	subs	r1, r2, #1
   85558:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   8555c:	4299      	cmp	r1, r3
   8555e:	d818      	bhi.n	85592 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85560:	6232      	str	r2, [r6, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85562:	6873      	ldr	r3, [r6, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   85564:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   85568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   8556c:	6073      	str	r3, [r6, #4]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8556e:	686b      	ldr	r3, [r5, #4]
   85570:	68ea      	ldr	r2, [r5, #12]
   85572:	4313      	orrs	r3, r2
   85574:	68aa      	ldr	r2, [r5, #8]
   85576:	4313      	orrs	r3, r2
   85578:	692a      	ldr	r2, [r5, #16]
   8557a:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   8557c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   85580:	4a06      	ldr	r2, [pc, #24]	; (8559c <usart_init_sync_master+0x64>)
   85582:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   85584:	6872      	ldr	r2, [r6, #4]
   85586:	4313      	orrs	r3, r2
   85588:	6073      	str	r3, [r6, #4]
	return 0;
   8558a:	2000      	movs	r0, #0
}
   8558c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   8558e:	2001      	movs	r0, #1
   85590:	e7fc      	b.n	8558c <usart_init_sync_master+0x54>
   85592:	2001      	movs	r0, #1
   85594:	e7fa      	b.n	8558c <usart_init_sync_master+0x54>
   85596:	bf00      	nop
   85598:	000854b9 	.word	0x000854b9
   8559c:	2000219c 	.word	0x2000219c

000855a0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   855a0:	2340      	movs	r3, #64	; 0x40
   855a2:	6003      	str	r3, [r0, #0]
}
   855a4:	4770      	bx	lr

000855a6 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   855a6:	2380      	movs	r3, #128	; 0x80
   855a8:	6003      	str	r3, [r0, #0]
}
   855aa:	4770      	bx	lr

000855ac <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   855ac:	2310      	movs	r3, #16
   855ae:	6003      	str	r3, [r0, #0]
}
   855b0:	4770      	bx	lr

000855b2 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   855b2:	2320      	movs	r3, #32
   855b4:	6003      	str	r3, [r0, #0]
}
   855b6:	4770      	bx	lr

000855b8 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   855b8:	6081      	str	r1, [r0, #8]
}
   855ba:	4770      	bx	lr

000855bc <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   855bc:	60c1      	str	r1, [r0, #12]
}
   855be:	4770      	bx	lr

000855c0 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   855c0:	6900      	ldr	r0, [r0, #16]
}
   855c2:	4770      	bx	lr

000855c4 <usart_get_status>:
	return p_usart->US_CSR;
   855c4:	6940      	ldr	r0, [r0, #20]
}
   855c6:	4770      	bx	lr

000855c8 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   855c8:	6940      	ldr	r0, [r0, #20]
}
   855ca:	f3c0 2040 	ubfx	r0, r0, #9, #1
   855ce:	4770      	bx	lr

000855d0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   855d0:	6943      	ldr	r3, [r0, #20]
   855d2:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   855d6:	bf1d      	ittte	ne
   855d8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   855dc:	61c1      	strne	r1, [r0, #28]
	return 0;
   855de:	2000      	movne	r0, #0
		return 1;
   855e0:	2001      	moveq	r0, #1
}
   855e2:	4770      	bx	lr

000855e4 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   855e4:	6943      	ldr	r3, [r0, #20]
   855e6:	f013 0f02 	tst.w	r3, #2
   855ea:	d0fb      	beq.n	855e4 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   855ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
   855f0:	61c1      	str	r1, [r0, #28]
}
   855f2:	2000      	movs	r0, #0
   855f4:	4770      	bx	lr

000855f6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   855f6:	6943      	ldr	r3, [r0, #20]
   855f8:	f013 0f01 	tst.w	r3, #1
   855fc:	d005      	beq.n	8560a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   855fe:	6983      	ldr	r3, [r0, #24]
   85600:	f3c3 0308 	ubfx	r3, r3, #0, #9
   85604:	600b      	str	r3, [r1, #0]
	return 0;
   85606:	2000      	movs	r0, #0
   85608:	4770      	bx	lr
		return 1;
   8560a:	2001      	movs	r0, #1
}
   8560c:	4770      	bx	lr

0008560e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8560e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85610:	23ac      	movs	r3, #172	; 0xac
   85612:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85614:	680b      	ldr	r3, [r1, #0]
   85616:	684a      	ldr	r2, [r1, #4]
   85618:	fbb3 f3f2 	udiv	r3, r3, r2
   8561c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8561e:	1e5c      	subs	r4, r3, #1
   85620:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   85624:	4294      	cmp	r4, r2
   85626:	d80b      	bhi.n	85640 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   85628:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8562a:	688b      	ldr	r3, [r1, #8]
   8562c:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8562e:	f240 2302 	movw	r3, #514	; 0x202
   85632:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   85636:	2350      	movs	r3, #80	; 0x50
   85638:	6003      	str	r3, [r0, #0]

	return 0;
   8563a:	2000      	movs	r0, #0
}
   8563c:	bc10      	pop	{r4}
   8563e:	4770      	bx	lr
		return 1;
   85640:	2001      	movs	r0, #1
   85642:	e7fb      	b.n	8563c <uart_init+0x2e>

00085644 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   85644:	6943      	ldr	r3, [r0, #20]
   85646:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8564a:	bf1a      	itte	ne
   8564c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8564e:	2000      	movne	r0, #0
		return 1;
   85650:	2001      	moveq	r0, #1
}
   85652:	4770      	bx	lr

00085654 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   85654:	6943      	ldr	r3, [r0, #20]
   85656:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8565a:	bf1d      	ittte	ne
   8565c:	6983      	ldrne	r3, [r0, #24]
   8565e:	700b      	strbne	r3, [r1, #0]
	return 0;
   85660:	2000      	movne	r0, #0
		return 1;
   85662:	2001      	moveq	r0, #1
}
   85664:	4770      	bx	lr

00085666 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   85666:	e7fe      	b.n	85666 <Dummy_Handler>

00085668 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   85668:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8566a:	4a1d      	ldr	r2, [pc, #116]	; (856e0 <Reset_Handler+0x78>)
   8566c:	4b1d      	ldr	r3, [pc, #116]	; (856e4 <Reset_Handler+0x7c>)
   8566e:	429a      	cmp	r2, r3
   85670:	d011      	beq.n	85696 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
   85672:	461a      	mov	r2, r3
   85674:	4b1c      	ldr	r3, [pc, #112]	; (856e8 <Reset_Handler+0x80>)
   85676:	429a      	cmp	r2, r3
   85678:	d20d      	bcs.n	85696 <Reset_Handler+0x2e>
   8567a:	4611      	mov	r1, r2
   8567c:	3b01      	subs	r3, #1
   8567e:	1a9b      	subs	r3, r3, r2
   85680:	f023 0303 	bic.w	r3, r3, #3
   85684:	3304      	adds	r3, #4
   85686:	4a16      	ldr	r2, [pc, #88]	; (856e0 <Reset_Handler+0x78>)
   85688:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
   8568a:	f852 0b04 	ldr.w	r0, [r2], #4
   8568e:	f841 0b04 	str.w	r0, [r1], #4
		for (; pDest < &_erelocate;) {
   85692:	429a      	cmp	r2, r3
   85694:	d1f9      	bne.n	8568a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   85696:	4a15      	ldr	r2, [pc, #84]	; (856ec <Reset_Handler+0x84>)
   85698:	4b15      	ldr	r3, [pc, #84]	; (856f0 <Reset_Handler+0x88>)
   8569a:	429a      	cmp	r2, r3
   8569c:	d20a      	bcs.n	856b4 <Reset_Handler+0x4c>
   8569e:	3b01      	subs	r3, #1
   856a0:	1a9b      	subs	r3, r3, r2
   856a2:	f023 0303 	bic.w	r3, r3, #3
   856a6:	3304      	adds	r3, #4
   856a8:	4413      	add	r3, r2
		*pDest++ = 0;
   856aa:	2100      	movs	r1, #0
   856ac:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   856b0:	4293      	cmp	r3, r2
   856b2:	d1fb      	bne.n	856ac <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   856b4:	4b0f      	ldr	r3, [pc, #60]	; (856f4 <Reset_Handler+0x8c>)
   856b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   856ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   856be:	490e      	ldr	r1, [pc, #56]	; (856f8 <Reset_Handler+0x90>)
   856c0:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   856c2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   856c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   856ca:	d203      	bcs.n	856d4 <Reset_Handler+0x6c>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   856cc:	688b      	ldr	r3, [r1, #8]
   856ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   856d2:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   856d4:	4b09      	ldr	r3, [pc, #36]	; (856fc <Reset_Handler+0x94>)
   856d6:	4798      	blx	r3

	/* Branch to main function */
	main();
   856d8:	4b09      	ldr	r3, [pc, #36]	; (85700 <Reset_Handler+0x98>)
   856da:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   856dc:	e7fe      	b.n	856dc <Reset_Handler+0x74>
   856de:	bf00      	nop
   856e0:	0008cffc 	.word	0x0008cffc
   856e4:	20000000 	.word	0x20000000
   856e8:	20001358 	.word	0x20001358
   856ec:	20001358 	.word	0x20001358
   856f0:	200026dc 	.word	0x200026dc
   856f4:	00080000 	.word	0x00080000
   856f8:	e000ed00 	.word	0xe000ed00
   856fc:	00085e91 	.word	0x00085e91
   85700:	0008598d 	.word	0x0008598d

00085704 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85704:	4b3d      	ldr	r3, [pc, #244]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85708:	f002 0303 	and.w	r3, r2, #3
   8570c:	2b01      	cmp	r3, #1
   8570e:	d032      	beq.n	85776 <SystemCoreClockUpdate+0x72>
   85710:	f012 0f02 	tst.w	r2, #2
   85714:	d11b      	bne.n	8574e <SystemCoreClockUpdate+0x4a>
   85716:	b953      	cbnz	r3, 8572e <SystemCoreClockUpdate+0x2a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85718:	4b39      	ldr	r3, [pc, #228]	; (85800 <SystemCoreClockUpdate+0xfc>)
   8571a:	695b      	ldr	r3, [r3, #20]
   8571c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85720:	4b38      	ldr	r3, [pc, #224]	; (85804 <SystemCoreClockUpdate+0x100>)
   85722:	bf14      	ite	ne
   85724:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85728:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8572c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8572e:	4b33      	ldr	r3, [pc, #204]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85732:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85736:	2b70      	cmp	r3, #112	; 0x70
   85738:	d058      	beq.n	857ec <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8573a:	4b30      	ldr	r3, [pc, #192]	; (857fc <SystemCoreClockUpdate+0xf8>)
   8573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8573e:	f3c2 1202 	ubfx	r2, r2, #4, #3
   85742:	4b30      	ldr	r3, [pc, #192]	; (85804 <SystemCoreClockUpdate+0x100>)
   85744:	681b      	ldr	r3, [r3, #0]
   85746:	40d3      	lsrs	r3, r2
   85748:	4a2e      	ldr	r2, [pc, #184]	; (85804 <SystemCoreClockUpdate+0x100>)
   8574a:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   8574c:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8574e:	4b2b      	ldr	r3, [pc, #172]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85750:	6a1b      	ldr	r3, [r3, #32]
   85752:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85756:	d12a      	bne.n	857ae <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85758:	4b2a      	ldr	r3, [pc, #168]	; (85804 <SystemCoreClockUpdate+0x100>)
   8575a:	4a2b      	ldr	r2, [pc, #172]	; (85808 <SystemCoreClockUpdate+0x104>)
   8575c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8575e:	4b27      	ldr	r3, [pc, #156]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85760:	6a1b      	ldr	r3, [r3, #32]
   85762:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85766:	2b10      	cmp	r3, #16
   85768:	d02e      	beq.n	857c8 <SystemCoreClockUpdate+0xc4>
   8576a:	2b20      	cmp	r3, #32
   8576c:	d122      	bne.n	857b4 <SystemCoreClockUpdate+0xb0>
				SystemCoreClock *= 3U;
   8576e:	4b25      	ldr	r3, [pc, #148]	; (85804 <SystemCoreClockUpdate+0x100>)
   85770:	4a26      	ldr	r2, [pc, #152]	; (8580c <SystemCoreClockUpdate+0x108>)
   85772:	601a      	str	r2, [r3, #0]
				break;
   85774:	e01e      	b.n	857b4 <SystemCoreClockUpdate+0xb0>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85776:	4b21      	ldr	r3, [pc, #132]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85778:	6a1b      	ldr	r3, [r3, #32]
   8577a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8577e:	d003      	beq.n	85788 <SystemCoreClockUpdate+0x84>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85780:	4b20      	ldr	r3, [pc, #128]	; (85804 <SystemCoreClockUpdate+0x100>)
   85782:	4a22      	ldr	r2, [pc, #136]	; (8580c <SystemCoreClockUpdate+0x108>)
   85784:	601a      	str	r2, [r3, #0]
   85786:	e7d2      	b.n	8572e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85788:	4b1e      	ldr	r3, [pc, #120]	; (85804 <SystemCoreClockUpdate+0x100>)
   8578a:	4a1f      	ldr	r2, [pc, #124]	; (85808 <SystemCoreClockUpdate+0x104>)
   8578c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8578e:	4b1b      	ldr	r3, [pc, #108]	; (857fc <SystemCoreClockUpdate+0xf8>)
   85790:	6a1b      	ldr	r3, [r3, #32]
   85792:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85796:	2b10      	cmp	r3, #16
   85798:	d005      	beq.n	857a6 <SystemCoreClockUpdate+0xa2>
   8579a:	2b20      	cmp	r3, #32
   8579c:	d1c7      	bne.n	8572e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8579e:	4b19      	ldr	r3, [pc, #100]	; (85804 <SystemCoreClockUpdate+0x100>)
   857a0:	4a1a      	ldr	r2, [pc, #104]	; (8580c <SystemCoreClockUpdate+0x108>)
   857a2:	601a      	str	r2, [r3, #0]
				break;
   857a4:	e7c3      	b.n	8572e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   857a6:	4b17      	ldr	r3, [pc, #92]	; (85804 <SystemCoreClockUpdate+0x100>)
   857a8:	4a19      	ldr	r2, [pc, #100]	; (85810 <SystemCoreClockUpdate+0x10c>)
   857aa:	601a      	str	r2, [r3, #0]
				break;
   857ac:	e7bf      	b.n	8572e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   857ae:	4b15      	ldr	r3, [pc, #84]	; (85804 <SystemCoreClockUpdate+0x100>)
   857b0:	4a16      	ldr	r2, [pc, #88]	; (8580c <SystemCoreClockUpdate+0x108>)
   857b2:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   857b4:	4b11      	ldr	r3, [pc, #68]	; (857fc <SystemCoreClockUpdate+0xf8>)
   857b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857b8:	f003 0303 	and.w	r3, r3, #3
   857bc:	2b02      	cmp	r3, #2
   857be:	d007      	beq.n	857d0 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   857c0:	4b10      	ldr	r3, [pc, #64]	; (85804 <SystemCoreClockUpdate+0x100>)
   857c2:	4a14      	ldr	r2, [pc, #80]	; (85814 <SystemCoreClockUpdate+0x110>)
   857c4:	601a      	str	r2, [r3, #0]
   857c6:	e7b2      	b.n	8572e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   857c8:	4b0e      	ldr	r3, [pc, #56]	; (85804 <SystemCoreClockUpdate+0x100>)
   857ca:	4a11      	ldr	r2, [pc, #68]	; (85810 <SystemCoreClockUpdate+0x10c>)
   857cc:	601a      	str	r2, [r3, #0]
				break;
   857ce:	e7f1      	b.n	857b4 <SystemCoreClockUpdate+0xb0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   857d0:	4a0a      	ldr	r2, [pc, #40]	; (857fc <SystemCoreClockUpdate+0xf8>)
   857d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   857d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
   857d6:	480b      	ldr	r0, [pc, #44]	; (85804 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   857d8:	f3c1 410a 	ubfx	r1, r1, #16, #11
   857dc:	6803      	ldr	r3, [r0, #0]
   857de:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   857e2:	b2d2      	uxtb	r2, r2
   857e4:	fbb3 f3f2 	udiv	r3, r3, r2
   857e8:	6003      	str	r3, [r0, #0]
   857ea:	e7a0      	b.n	8572e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   857ec:	4b05      	ldr	r3, [pc, #20]	; (85804 <SystemCoreClockUpdate+0x100>)
   857ee:	681b      	ldr	r3, [r3, #0]
   857f0:	4a09      	ldr	r2, [pc, #36]	; (85818 <SystemCoreClockUpdate+0x114>)
   857f2:	fba2 2303 	umull	r2, r3, r2, r3
   857f6:	085b      	lsrs	r3, r3, #1
   857f8:	e7a6      	b.n	85748 <SystemCoreClockUpdate+0x44>
   857fa:	bf00      	nop
   857fc:	400e0400 	.word	0x400e0400
   85800:	400e1210 	.word	0x400e1210
   85804:	20000984 	.word	0x20000984
   85808:	003d0900 	.word	0x003d0900
   8580c:	00b71b00 	.word	0x00b71b00
   85810:	007a1200 	.word	0x007a1200
   85814:	0e4e1c00 	.word	0x0e4e1c00
   85818:	aaaaaaab 	.word	0xaaaaaaab

0008581c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8581c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8581e:	4a09      	ldr	r2, [pc, #36]	; (85844 <_sbrk+0x28>)
   85820:	6812      	ldr	r2, [r2, #0]
   85822:	b15a      	cbz	r2, 8583c <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   85824:	4a07      	ldr	r2, [pc, #28]	; (85844 <_sbrk+0x28>)
   85826:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   85828:	18c1      	adds	r1, r0, r3
   8582a:	4a07      	ldr	r2, [pc, #28]	; (85848 <_sbrk+0x2c>)
   8582c:	4291      	cmp	r1, r2
		return (caddr_t) -1;	
	}

	heap += incr;
   8582e:	bfdd      	ittte	le
   85830:	460b      	movle	r3, r1
   85832:	4a04      	ldrle	r2, [pc, #16]	; (85844 <_sbrk+0x28>)
   85834:	6013      	strle	r3, [r2, #0]
		return (caddr_t) -1;	
   85836:	f04f 30ff 	movgt.w	r0, #4294967295

	return (caddr_t) prev_heap;
}
   8583a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8583c:	4a01      	ldr	r2, [pc, #4]	; (85844 <_sbrk+0x28>)
   8583e:	4903      	ldr	r1, [pc, #12]	; (8584c <_sbrk+0x30>)
   85840:	6011      	str	r1, [r2, #0]
   85842:	e7ef      	b.n	85824 <_sbrk+0x8>
   85844:	200021a0 	.word	0x200021a0
   85848:	2007fffc 	.word	0x2007fffc
   8584c:	20082000 	.word	0x20082000

00085850 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85850:	f04f 30ff 	mov.w	r0, #4294967295
   85854:	4770      	bx	lr

00085856 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   85856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8585a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8585c:	2000      	movs	r0, #0
   8585e:	4770      	bx	lr

00085860 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85860:	2001      	movs	r0, #1
   85862:	4770      	bx	lr

00085864 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85864:	2000      	movs	r0, #0
   85866:	4770      	bx	lr

00085868 <_exit>:

extern void _exit(int status)
{
   85868:	b508      	push	{r3, lr}
   8586a:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   8586c:	4801      	ldr	r0, [pc, #4]	; (85874 <_exit+0xc>)
   8586e:	4b02      	ldr	r3, [pc, #8]	; (85878 <_exit+0x10>)
   85870:	4798      	blx	r3

	for (;;);
   85872:	e7fe      	b.n	85872 <_exit+0xa>
   85874:	0008cb10 	.word	0x0008cb10
   85878:	00085ed9 	.word	0x00085ed9

0008587c <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   8587c:	4770      	bx	lr

0008587e <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   8587e:	f04f 30ff 	mov.w	r0, #4294967295
   85882:	4770      	bx	lr

00085884 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   85884:	b5f0      	push	{r4, r5, r6, r7, lr}
   85886:	b083      	sub	sp, #12
   85888:	4605      	mov	r5, r0
   8588a:	460c      	mov	r4, r1
	uint32_t val = 0;
   8588c:	2300      	movs	r3, #0
   8588e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   85890:	4b18      	ldr	r3, [pc, #96]	; (858f4 <usart_serial_getchar+0x70>)
   85892:	4298      	cmp	r0, r3
   85894:	d010      	beq.n	858b8 <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   85896:	4b18      	ldr	r3, [pc, #96]	; (858f8 <usart_serial_getchar+0x74>)
   85898:	4298      	cmp	r0, r3
   8589a:	d021      	beq.n	858e0 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8589c:	4b17      	ldr	r3, [pc, #92]	; (858fc <usart_serial_getchar+0x78>)
   8589e:	4298      	cmp	r0, r3
   858a0:	d111      	bne.n	858c6 <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   858a2:	461e      	mov	r6, r3
   858a4:	4d16      	ldr	r5, [pc, #88]	; (85900 <usart_serial_getchar+0x7c>)
   858a6:	a901      	add	r1, sp, #4
   858a8:	4630      	mov	r0, r6
   858aa:	47a8      	blx	r5
   858ac:	2800      	cmp	r0, #0
   858ae:	d1fa      	bne.n	858a6 <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   858b0:	9b01      	ldr	r3, [sp, #4]
   858b2:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   858b4:	b003      	add	sp, #12
   858b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   858b8:	461f      	mov	r7, r3
   858ba:	4e12      	ldr	r6, [pc, #72]	; (85904 <usart_serial_getchar+0x80>)
   858bc:	4621      	mov	r1, r4
   858be:	4638      	mov	r0, r7
   858c0:	47b0      	blx	r6
   858c2:	2800      	cmp	r0, #0
   858c4:	d1fa      	bne.n	858bc <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   858c6:	4b10      	ldr	r3, [pc, #64]	; (85908 <usart_serial_getchar+0x84>)
   858c8:	429d      	cmp	r5, r3
   858ca:	d1f3      	bne.n	858b4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   858cc:	461e      	mov	r6, r3
   858ce:	4d0c      	ldr	r5, [pc, #48]	; (85900 <usart_serial_getchar+0x7c>)
   858d0:	a901      	add	r1, sp, #4
   858d2:	4630      	mov	r0, r6
   858d4:	47a8      	blx	r5
   858d6:	2800      	cmp	r0, #0
   858d8:	d1fa      	bne.n	858d0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   858da:	9b01      	ldr	r3, [sp, #4]
   858dc:	7023      	strb	r3, [r4, #0]
}
   858de:	e7e9      	b.n	858b4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   858e0:	461e      	mov	r6, r3
   858e2:	4d07      	ldr	r5, [pc, #28]	; (85900 <usart_serial_getchar+0x7c>)
   858e4:	a901      	add	r1, sp, #4
   858e6:	4630      	mov	r0, r6
   858e8:	47a8      	blx	r5
   858ea:	2800      	cmp	r0, #0
   858ec:	d1fa      	bne.n	858e4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   858ee:	9b01      	ldr	r3, [sp, #4]
   858f0:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   858f2:	e7df      	b.n	858b4 <usart_serial_getchar+0x30>
   858f4:	400e0600 	.word	0x400e0600
   858f8:	40090000 	.word	0x40090000
   858fc:	40094000 	.word	0x40094000
   85900:	000855f7 	.word	0x000855f7
   85904:	00085655 	.word	0x00085655
   85908:	40098000 	.word	0x40098000

0008590c <usart_serial_putchar>:
{
   8590c:	b570      	push	{r4, r5, r6, lr}
   8590e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   85910:	4b18      	ldr	r3, [pc, #96]	; (85974 <usart_serial_putchar+0x68>)
   85912:	4298      	cmp	r0, r3
   85914:	d00a      	beq.n	8592c <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   85916:	4b18      	ldr	r3, [pc, #96]	; (85978 <usart_serial_putchar+0x6c>)
   85918:	4298      	cmp	r0, r3
   8591a:	d010      	beq.n	8593e <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   8591c:	4b17      	ldr	r3, [pc, #92]	; (8597c <usart_serial_putchar+0x70>)
   8591e:	4298      	cmp	r0, r3
   85920:	d016      	beq.n	85950 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   85922:	4b17      	ldr	r3, [pc, #92]	; (85980 <usart_serial_putchar+0x74>)
   85924:	4298      	cmp	r0, r3
   85926:	d01c      	beq.n	85962 <usart_serial_putchar+0x56>
	return 0;
   85928:	2000      	movs	r0, #0
}
   8592a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8592c:	461e      	mov	r6, r3
   8592e:	4d15      	ldr	r5, [pc, #84]	; (85984 <usart_serial_putchar+0x78>)
   85930:	4621      	mov	r1, r4
   85932:	4630      	mov	r0, r6
   85934:	47a8      	blx	r5
   85936:	2800      	cmp	r0, #0
   85938:	d1fa      	bne.n	85930 <usart_serial_putchar+0x24>
		return 1;
   8593a:	2001      	movs	r0, #1
   8593c:	e7f5      	b.n	8592a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   8593e:	461e      	mov	r6, r3
   85940:	4d11      	ldr	r5, [pc, #68]	; (85988 <usart_serial_putchar+0x7c>)
   85942:	4621      	mov	r1, r4
   85944:	4630      	mov	r0, r6
   85946:	47a8      	blx	r5
   85948:	2800      	cmp	r0, #0
   8594a:	d1fa      	bne.n	85942 <usart_serial_putchar+0x36>
		return 1;
   8594c:	2001      	movs	r0, #1
   8594e:	e7ec      	b.n	8592a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85950:	461e      	mov	r6, r3
   85952:	4d0d      	ldr	r5, [pc, #52]	; (85988 <usart_serial_putchar+0x7c>)
   85954:	4621      	mov	r1, r4
   85956:	4630      	mov	r0, r6
   85958:	47a8      	blx	r5
   8595a:	2800      	cmp	r0, #0
   8595c:	d1fa      	bne.n	85954 <usart_serial_putchar+0x48>
		return 1;
   8595e:	2001      	movs	r0, #1
   85960:	e7e3      	b.n	8592a <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85962:	461e      	mov	r6, r3
   85964:	4d08      	ldr	r5, [pc, #32]	; (85988 <usart_serial_putchar+0x7c>)
   85966:	4621      	mov	r1, r4
   85968:	4630      	mov	r0, r6
   8596a:	47a8      	blx	r5
   8596c:	2800      	cmp	r0, #0
   8596e:	d1fa      	bne.n	85966 <usart_serial_putchar+0x5a>
		return 1;
   85970:	2001      	movs	r0, #1
   85972:	e7da      	b.n	8592a <usart_serial_putchar+0x1e>
   85974:	400e0600 	.word	0x400e0600
   85978:	40090000 	.word	0x40090000
   8597c:	40094000 	.word	0x40094000
   85980:	40098000 	.word	0x40098000
   85984:	00085645 	.word	0x00085645
   85988:	000855d1 	.word	0x000855d1

0008598c <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   8598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85990:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   85992:	2110      	movs	r1, #16
   85994:	eb0d 0001 	add.w	r0, sp, r1
   85998:	4b52      	ldr	r3, [pc, #328]	; (85ae4 <main+0x158>)
   8599a:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   8599c:	2008      	movs	r0, #8
   8599e:	4d52      	ldr	r5, [pc, #328]	; (85ae8 <main+0x15c>)
   859a0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   859a2:	4c52      	ldr	r4, [pc, #328]	; (85aec <main+0x160>)
   859a4:	4b52      	ldr	r3, [pc, #328]	; (85af0 <main+0x164>)
   859a6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   859a8:	4b52      	ldr	r3, [pc, #328]	; (85af4 <main+0x168>)
   859aa:	4a53      	ldr	r2, [pc, #332]	; (85af8 <main+0x16c>)
   859ac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   859ae:	4b53      	ldr	r3, [pc, #332]	; (85afc <main+0x170>)
   859b0:	4a53      	ldr	r2, [pc, #332]	; (85b00 <main+0x174>)
   859b2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   859b4:	4b53      	ldr	r3, [pc, #332]	; (85b04 <main+0x178>)
   859b6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   859b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   859bc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   859be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   859c2:	9303      	str	r3, [sp, #12]
   859c4:	2008      	movs	r0, #8
   859c6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   859c8:	a901      	add	r1, sp, #4
   859ca:	4620      	mov	r0, r4
   859cc:	4b4e      	ldr	r3, [pc, #312]	; (85b08 <main+0x17c>)
   859ce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   859d0:	4d4e      	ldr	r5, [pc, #312]	; (85b0c <main+0x180>)
   859d2:	682b      	ldr	r3, [r5, #0]
   859d4:	2100      	movs	r1, #0
   859d6:	6898      	ldr	r0, [r3, #8]
   859d8:	4c4d      	ldr	r4, [pc, #308]	; (85b10 <main+0x184>)
   859da:	47a0      	blx	r4
	setbuf(stdin, NULL);
   859dc:	682b      	ldr	r3, [r5, #0]
   859de:	2100      	movs	r1, #0
   859e0:	6858      	ldr	r0, [r3, #4]
   859e2:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   859e4:	2101      	movs	r1, #1
   859e6:	4b4b      	ldr	r3, [pc, #300]	; (85b14 <main+0x188>)
   859e8:	7019      	strb	r1, [r3, #0]
   859ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   859ee:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   859f0:	4b49      	ldr	r3, [pc, #292]	; (85b18 <main+0x18c>)
   859f2:	2200      	movs	r2, #0
   859f4:	701a      	strb	r2, [r3, #0]
   859f6:	705a      	strb	r2, [r3, #1]
   859f8:	709a      	strb	r2, [r3, #2]
   859fa:	70da      	strb	r2, [r3, #3]
   859fc:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   859fe:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85a00:	4b46      	ldr	r3, [pc, #280]	; (85b1c <main+0x190>)
   85a02:	4798      	blx	r3
	board_init();
   85a04:	4b46      	ldr	r3, [pc, #280]	; (85b20 <main+0x194>)
   85a06:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   85a08:	4b46      	ldr	r3, [pc, #280]	; (85b24 <main+0x198>)
   85a0a:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   85a0c:	ac04      	add	r4, sp, #16
   85a0e:	4d46      	ldr	r5, [pc, #280]	; (85b28 <main+0x19c>)
   85a10:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   85a14:	4f45      	ldr	r7, [pc, #276]	; (85b2c <main+0x1a0>)
   85a16:	4e46      	ldr	r6, [pc, #280]	; (85b30 <main+0x1a4>)
   85a18:	f854 2b04 	ldr.w	r2, [r4], #4
   85a1c:	4639      	mov	r1, r7
   85a1e:	4628      	mov	r0, r5
   85a20:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   85a22:	3508      	adds	r5, #8
   85a24:	45a0      	cmp	r8, r4
   85a26:	d1f7      	bne.n	85a18 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   85a28:	4c3f      	ldr	r4, [pc, #252]	; (85b28 <main+0x19c>)
   85a2a:	2600      	movs	r6, #0
   85a2c:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   85a30:	4a40      	ldr	r2, [pc, #256]	; (85b34 <main+0x1a8>)
   85a32:	4941      	ldr	r1, [pc, #260]	; (85b38 <main+0x1ac>)
   85a34:	4841      	ldr	r0, [pc, #260]	; (85b3c <main+0x1b0>)
   85a36:	4f42      	ldr	r7, [pc, #264]	; (85b40 <main+0x1b4>)
   85a38:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   85a3a:	4621      	mov	r1, r4
   85a3c:	4841      	ldr	r0, [pc, #260]	; (85b44 <main+0x1b8>)
   85a3e:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   85a40:	2009      	movs	r0, #9
   85a42:	4b29      	ldr	r3, [pc, #164]	; (85ae8 <main+0x15c>)
   85a44:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   85a46:	4d40      	ldr	r5, [pc, #256]	; (85b48 <main+0x1bc>)
   85a48:	4629      	mov	r1, r5
   85a4a:	2029      	movs	r0, #41	; 0x29
   85a4c:	4c3f      	ldr	r4, [pc, #252]	; (85b4c <main+0x1c0>)
   85a4e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   85a50:	4629      	mov	r1, r5
   85a52:	202a      	movs	r0, #42	; 0x2a
   85a54:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   85a56:	4629      	mov	r1, r5
   85a58:	202b      	movs	r0, #43	; 0x2b
   85a5a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   85a5c:	4629      	mov	r1, r5
   85a5e:	202c      	movs	r0, #44	; 0x2c
   85a60:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   85a62:	4629      	mov	r1, r5
   85a64:	202d      	movs	r0, #45	; 0x2d
   85a66:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   85a68:	4629      	mov	r1, r5
   85a6a:	202e      	movs	r0, #46	; 0x2e
   85a6c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   85a6e:	4629      	mov	r1, r5
   85a70:	202f      	movs	r0, #47	; 0x2f
   85a72:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   85a74:	4629      	mov	r1, r5
   85a76:	2030      	movs	r0, #48	; 0x30
   85a78:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   85a7a:	4629      	mov	r1, r5
   85a7c:	2033      	movs	r0, #51	; 0x33
   85a7e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   85a80:	4629      	mov	r1, r5
   85a82:	2037      	movs	r0, #55	; 0x37
   85a84:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   85a86:	4629      	mov	r1, r5
   85a88:	2034      	movs	r0, #52	; 0x34
   85a8a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   85a8c:	4830      	ldr	r0, [pc, #192]	; (85b50 <main+0x1c4>)
   85a8e:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   85a90:	4c30      	ldr	r4, [pc, #192]	; (85b54 <main+0x1c8>)
   85a92:	4a31      	ldr	r2, [pc, #196]	; (85b58 <main+0x1cc>)
   85a94:	4631      	mov	r1, r6
   85a96:	4620      	mov	r0, r4
   85a98:	4b30      	ldr	r3, [pc, #192]	; (85b5c <main+0x1d0>)
   85a9a:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   85a9c:	4a30      	ldr	r2, [pc, #192]	; (85b60 <main+0x1d4>)
   85a9e:	4631      	mov	r1, r6
   85aa0:	4620      	mov	r0, r4
   85aa2:	4b30      	ldr	r3, [pc, #192]	; (85b64 <main+0x1d8>)
   85aa4:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   85aa6:	4a30      	ldr	r2, [pc, #192]	; (85b68 <main+0x1dc>)
   85aa8:	4631      	mov	r1, r6
   85aaa:	4620      	mov	r0, r4
   85aac:	4b2f      	ldr	r3, [pc, #188]	; (85b6c <main+0x1e0>)
   85aae:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   85ab0:	2203      	movs	r2, #3
   85ab2:	4631      	mov	r1, r6
   85ab4:	4620      	mov	r0, r4
   85ab6:	4b2e      	ldr	r3, [pc, #184]	; (85b70 <main+0x1e4>)
   85ab8:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   85aba:	4b2e      	ldr	r3, [pc, #184]	; (85b74 <main+0x1e8>)
   85abc:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   85abe:	4b2e      	ldr	r3, [pc, #184]	; (85b78 <main+0x1ec>)
   85ac0:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   85ac2:	4b2e      	ldr	r3, [pc, #184]	; (85b7c <main+0x1f0>)
   85ac4:	2204      	movs	r2, #4
   85ac6:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   85ac8:	4630      	mov	r0, r6
   85aca:	4b2d      	ldr	r3, [pc, #180]	; (85b80 <main+0x1f4>)
   85acc:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   85ace:	482d      	ldr	r0, [pc, #180]	; (85b84 <main+0x1f8>)
   85ad0:	47b8      	blx	r7
	naeusb_register_handlers();
   85ad2:	4b2d      	ldr	r3, [pc, #180]	; (85b88 <main+0x1fc>)
   85ad4:	4798      	blx	r3
	naeusart_register_handlers();
   85ad6:	4b2d      	ldr	r3, [pc, #180]	; (85b8c <main+0x200>)
   85ad8:	4798      	blx	r3
	openadc_register_handlers();
   85ada:	4b2d      	ldr	r3, [pc, #180]	; (85b90 <main+0x204>)
   85adc:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   85ade:	4c2d      	ldr	r4, [pc, #180]	; (85b94 <main+0x208>)
   85ae0:	47a0      	blx	r4
	while (true) {
   85ae2:	e7fd      	b.n	85ae0 <main+0x154>
   85ae4:	00082e55 	.word	0x00082e55
   85ae8:	00083ee1 	.word	0x00083ee1
   85aec:	400e0600 	.word	0x400e0600
   85af0:	20002698 	.word	0x20002698
   85af4:	20002694 	.word	0x20002694
   85af8:	0008590d 	.word	0x0008590d
   85afc:	20002690 	.word	0x20002690
   85b00:	00085885 	.word	0x00085885
   85b04:	05b8d800 	.word	0x05b8d800
   85b08:	0008560f 	.word	0x0008560f
   85b0c:	200009ac 	.word	0x200009ac
   85b10:	0008608d 	.word	0x0008608d
   85b14:	20000982 	.word	0x20000982
   85b18:	20002688 	.word	0x20002688
   85b1c:	00082f59 	.word	0x00082f59
   85b20:	00083a0d 	.word	0x00083a0d
   85b24:	00082b15 	.word	0x00082b15
   85b28:	20000988 	.word	0x20000988
   85b2c:	0008cb2c 	.word	0x0008cb2c
   85b30:	0008623d 	.word	0x0008623d
   85b34:	0008cb34 	.word	0x0008cb34
   85b38:	0008cb40 	.word	0x0008cb40
   85b3c:	0008cb4c 	.word	0x0008cb4c
   85b40:	00085ed9 	.word	0x00085ed9
   85b44:	0008cb80 	.word	0x0008cb80
   85b48:	08000001 	.word	0x08000001
   85b4c:	00083ba5 	.word	0x00083ba5
   85b50:	0008cb94 	.word	0x0008cb94
   85b54:	400e0000 	.word	0x400e0000
   85b58:	01010100 	.word	0x01010100
   85b5c:	00083a7d 	.word	0x00083a7d
   85b60:	01030101 	.word	0x01030101
   85b64:	00083a89 	.word	0x00083a89
   85b68:	00040002 	.word	0x00040002
   85b6c:	00083a95 	.word	0x00083a95
   85b70:	00083aa1 	.word	0x00083aa1
   85b74:	00082ea1 	.word	0x00082ea1
   85b78:	00083221 	.word	0x00083221
   85b7c:	400e0400 	.word	0x400e0400
   85b80:	00083f39 	.word	0x00083f39
   85b84:	0008cbb4 	.word	0x0008cbb4
   85b88:	00081561 	.word	0x00081561
   85b8c:	00081d39 	.word	0x00081d39
   85b90:	0008188d 	.word	0x0008188d
   85b94:	00081f65 	.word	0x00081f65

00085b98 <__aeabi_uldivmod>:
   85b98:	b953      	cbnz	r3, 85bb0 <__aeabi_uldivmod+0x18>
   85b9a:	b94a      	cbnz	r2, 85bb0 <__aeabi_uldivmod+0x18>
   85b9c:	2900      	cmp	r1, #0
   85b9e:	bf08      	it	eq
   85ba0:	2800      	cmpeq	r0, #0
   85ba2:	bf1c      	itt	ne
   85ba4:	f04f 31ff 	movne.w	r1, #4294967295
   85ba8:	f04f 30ff 	movne.w	r0, #4294967295
   85bac:	f000 b96e 	b.w	85e8c <__aeabi_idiv0>
   85bb0:	f1ad 0c08 	sub.w	ip, sp, #8
   85bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85bb8:	f000 f806 	bl	85bc8 <__udivmoddi4>
   85bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
   85bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85bc4:	b004      	add	sp, #16
   85bc6:	4770      	bx	lr

00085bc8 <__udivmoddi4>:
   85bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85bcc:	9e08      	ldr	r6, [sp, #32]
   85bce:	460d      	mov	r5, r1
   85bd0:	4604      	mov	r4, r0
   85bd2:	468e      	mov	lr, r1
   85bd4:	2b00      	cmp	r3, #0
   85bd6:	f040 8083 	bne.w	85ce0 <__udivmoddi4+0x118>
   85bda:	428a      	cmp	r2, r1
   85bdc:	4617      	mov	r7, r2
   85bde:	d947      	bls.n	85c70 <__udivmoddi4+0xa8>
   85be0:	fab2 f382 	clz	r3, r2
   85be4:	b14b      	cbz	r3, 85bfa <__udivmoddi4+0x32>
   85be6:	f1c3 0120 	rsb	r1, r3, #32
   85bea:	fa05 fe03 	lsl.w	lr, r5, r3
   85bee:	fa20 f101 	lsr.w	r1, r0, r1
   85bf2:	409f      	lsls	r7, r3
   85bf4:	ea41 0e0e 	orr.w	lr, r1, lr
   85bf8:	409c      	lsls	r4, r3
   85bfa:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85bfe:	fbbe fcf8 	udiv	ip, lr, r8
   85c02:	fa1f f987 	uxth.w	r9, r7
   85c06:	fb08 e21c 	mls	r2, r8, ip, lr
   85c0a:	fb0c f009 	mul.w	r0, ip, r9
   85c0e:	0c21      	lsrs	r1, r4, #16
   85c10:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   85c14:	4290      	cmp	r0, r2
   85c16:	d90a      	bls.n	85c2e <__udivmoddi4+0x66>
   85c18:	18ba      	adds	r2, r7, r2
   85c1a:	f10c 31ff 	add.w	r1, ip, #4294967295
   85c1e:	f080 8118 	bcs.w	85e52 <__udivmoddi4+0x28a>
   85c22:	4290      	cmp	r0, r2
   85c24:	f240 8115 	bls.w	85e52 <__udivmoddi4+0x28a>
   85c28:	f1ac 0c02 	sub.w	ip, ip, #2
   85c2c:	443a      	add	r2, r7
   85c2e:	1a12      	subs	r2, r2, r0
   85c30:	fbb2 f0f8 	udiv	r0, r2, r8
   85c34:	fb08 2210 	mls	r2, r8, r0, r2
   85c38:	fb00 f109 	mul.w	r1, r0, r9
   85c3c:	b2a4      	uxth	r4, r4
   85c3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   85c42:	42a1      	cmp	r1, r4
   85c44:	d909      	bls.n	85c5a <__udivmoddi4+0x92>
   85c46:	193c      	adds	r4, r7, r4
   85c48:	f100 32ff 	add.w	r2, r0, #4294967295
   85c4c:	f080 8103 	bcs.w	85e56 <__udivmoddi4+0x28e>
   85c50:	42a1      	cmp	r1, r4
   85c52:	f240 8100 	bls.w	85e56 <__udivmoddi4+0x28e>
   85c56:	3802      	subs	r0, #2
   85c58:	443c      	add	r4, r7
   85c5a:	1a64      	subs	r4, r4, r1
   85c5c:	2100      	movs	r1, #0
   85c5e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85c62:	b11e      	cbz	r6, 85c6c <__udivmoddi4+0xa4>
   85c64:	2200      	movs	r2, #0
   85c66:	40dc      	lsrs	r4, r3
   85c68:	e9c6 4200 	strd	r4, r2, [r6]
   85c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c70:	b902      	cbnz	r2, 85c74 <__udivmoddi4+0xac>
   85c72:	deff      	udf	#255	; 0xff
   85c74:	fab2 f382 	clz	r3, r2
   85c78:	2b00      	cmp	r3, #0
   85c7a:	d14f      	bne.n	85d1c <__udivmoddi4+0x154>
   85c7c:	1a8d      	subs	r5, r1, r2
   85c7e:	2101      	movs	r1, #1
   85c80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   85c84:	fa1f f882 	uxth.w	r8, r2
   85c88:	fbb5 fcfe 	udiv	ip, r5, lr
   85c8c:	fb0e 551c 	mls	r5, lr, ip, r5
   85c90:	fb08 f00c 	mul.w	r0, r8, ip
   85c94:	0c22      	lsrs	r2, r4, #16
   85c96:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85c9a:	42a8      	cmp	r0, r5
   85c9c:	d907      	bls.n	85cae <__udivmoddi4+0xe6>
   85c9e:	197d      	adds	r5, r7, r5
   85ca0:	f10c 32ff 	add.w	r2, ip, #4294967295
   85ca4:	d202      	bcs.n	85cac <__udivmoddi4+0xe4>
   85ca6:	42a8      	cmp	r0, r5
   85ca8:	f200 80e9 	bhi.w	85e7e <__udivmoddi4+0x2b6>
   85cac:	4694      	mov	ip, r2
   85cae:	1a2d      	subs	r5, r5, r0
   85cb0:	fbb5 f0fe 	udiv	r0, r5, lr
   85cb4:	fb0e 5510 	mls	r5, lr, r0, r5
   85cb8:	fb08 f800 	mul.w	r8, r8, r0
   85cbc:	b2a4      	uxth	r4, r4
   85cbe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   85cc2:	45a0      	cmp	r8, r4
   85cc4:	d907      	bls.n	85cd6 <__udivmoddi4+0x10e>
   85cc6:	193c      	adds	r4, r7, r4
   85cc8:	f100 32ff 	add.w	r2, r0, #4294967295
   85ccc:	d202      	bcs.n	85cd4 <__udivmoddi4+0x10c>
   85cce:	45a0      	cmp	r8, r4
   85cd0:	f200 80d9 	bhi.w	85e86 <__udivmoddi4+0x2be>
   85cd4:	4610      	mov	r0, r2
   85cd6:	eba4 0408 	sub.w	r4, r4, r8
   85cda:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85cde:	e7c0      	b.n	85c62 <__udivmoddi4+0x9a>
   85ce0:	428b      	cmp	r3, r1
   85ce2:	d908      	bls.n	85cf6 <__udivmoddi4+0x12e>
   85ce4:	2e00      	cmp	r6, #0
   85ce6:	f000 80b1 	beq.w	85e4c <__udivmoddi4+0x284>
   85cea:	2100      	movs	r1, #0
   85cec:	e9c6 0500 	strd	r0, r5, [r6]
   85cf0:	4608      	mov	r0, r1
   85cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85cf6:	fab3 f183 	clz	r1, r3
   85cfa:	2900      	cmp	r1, #0
   85cfc:	d14b      	bne.n	85d96 <__udivmoddi4+0x1ce>
   85cfe:	42ab      	cmp	r3, r5
   85d00:	d302      	bcc.n	85d08 <__udivmoddi4+0x140>
   85d02:	4282      	cmp	r2, r0
   85d04:	f200 80b9 	bhi.w	85e7a <__udivmoddi4+0x2b2>
   85d08:	1a84      	subs	r4, r0, r2
   85d0a:	eb65 0303 	sbc.w	r3, r5, r3
   85d0e:	2001      	movs	r0, #1
   85d10:	469e      	mov	lr, r3
   85d12:	2e00      	cmp	r6, #0
   85d14:	d0aa      	beq.n	85c6c <__udivmoddi4+0xa4>
   85d16:	e9c6 4e00 	strd	r4, lr, [r6]
   85d1a:	e7a7      	b.n	85c6c <__udivmoddi4+0xa4>
   85d1c:	409f      	lsls	r7, r3
   85d1e:	f1c3 0220 	rsb	r2, r3, #32
   85d22:	40d1      	lsrs	r1, r2
   85d24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   85d28:	fbb1 f0fe 	udiv	r0, r1, lr
   85d2c:	fa1f f887 	uxth.w	r8, r7
   85d30:	fb0e 1110 	mls	r1, lr, r0, r1
   85d34:	fa24 f202 	lsr.w	r2, r4, r2
   85d38:	409d      	lsls	r5, r3
   85d3a:	fb00 fc08 	mul.w	ip, r0, r8
   85d3e:	432a      	orrs	r2, r5
   85d40:	0c15      	lsrs	r5, r2, #16
   85d42:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85d46:	45ac      	cmp	ip, r5
   85d48:	fa04 f403 	lsl.w	r4, r4, r3
   85d4c:	d909      	bls.n	85d62 <__udivmoddi4+0x19a>
   85d4e:	197d      	adds	r5, r7, r5
   85d50:	f100 31ff 	add.w	r1, r0, #4294967295
   85d54:	f080 808f 	bcs.w	85e76 <__udivmoddi4+0x2ae>
   85d58:	45ac      	cmp	ip, r5
   85d5a:	f240 808c 	bls.w	85e76 <__udivmoddi4+0x2ae>
   85d5e:	3802      	subs	r0, #2
   85d60:	443d      	add	r5, r7
   85d62:	eba5 050c 	sub.w	r5, r5, ip
   85d66:	fbb5 f1fe 	udiv	r1, r5, lr
   85d6a:	fb0e 5c11 	mls	ip, lr, r1, r5
   85d6e:	fb01 f908 	mul.w	r9, r1, r8
   85d72:	b295      	uxth	r5, r2
   85d74:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   85d78:	45a9      	cmp	r9, r5
   85d7a:	d907      	bls.n	85d8c <__udivmoddi4+0x1c4>
   85d7c:	197d      	adds	r5, r7, r5
   85d7e:	f101 32ff 	add.w	r2, r1, #4294967295
   85d82:	d274      	bcs.n	85e6e <__udivmoddi4+0x2a6>
   85d84:	45a9      	cmp	r9, r5
   85d86:	d972      	bls.n	85e6e <__udivmoddi4+0x2a6>
   85d88:	3902      	subs	r1, #2
   85d8a:	443d      	add	r5, r7
   85d8c:	eba5 0509 	sub.w	r5, r5, r9
   85d90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   85d94:	e778      	b.n	85c88 <__udivmoddi4+0xc0>
   85d96:	f1c1 0720 	rsb	r7, r1, #32
   85d9a:	408b      	lsls	r3, r1
   85d9c:	fa22 fc07 	lsr.w	ip, r2, r7
   85da0:	ea4c 0c03 	orr.w	ip, ip, r3
   85da4:	fa25 f407 	lsr.w	r4, r5, r7
   85da8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   85dac:	fbb4 f9fe 	udiv	r9, r4, lr
   85db0:	fa1f f88c 	uxth.w	r8, ip
   85db4:	fb0e 4419 	mls	r4, lr, r9, r4
   85db8:	fa20 f307 	lsr.w	r3, r0, r7
   85dbc:	fb09 fa08 	mul.w	sl, r9, r8
   85dc0:	408d      	lsls	r5, r1
   85dc2:	431d      	orrs	r5, r3
   85dc4:	0c2b      	lsrs	r3, r5, #16
   85dc6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   85dca:	45a2      	cmp	sl, r4
   85dcc:	fa02 f201 	lsl.w	r2, r2, r1
   85dd0:	fa00 f301 	lsl.w	r3, r0, r1
   85dd4:	d909      	bls.n	85dea <__udivmoddi4+0x222>
   85dd6:	eb1c 0404 	adds.w	r4, ip, r4
   85dda:	f109 30ff 	add.w	r0, r9, #4294967295
   85dde:	d248      	bcs.n	85e72 <__udivmoddi4+0x2aa>
   85de0:	45a2      	cmp	sl, r4
   85de2:	d946      	bls.n	85e72 <__udivmoddi4+0x2aa>
   85de4:	f1a9 0902 	sub.w	r9, r9, #2
   85de8:	4464      	add	r4, ip
   85dea:	eba4 040a 	sub.w	r4, r4, sl
   85dee:	fbb4 f0fe 	udiv	r0, r4, lr
   85df2:	fb0e 4410 	mls	r4, lr, r0, r4
   85df6:	fb00 fa08 	mul.w	sl, r0, r8
   85dfa:	b2ad      	uxth	r5, r5
   85dfc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   85e00:	45a2      	cmp	sl, r4
   85e02:	d908      	bls.n	85e16 <__udivmoddi4+0x24e>
   85e04:	eb1c 0404 	adds.w	r4, ip, r4
   85e08:	f100 35ff 	add.w	r5, r0, #4294967295
   85e0c:	d22d      	bcs.n	85e6a <__udivmoddi4+0x2a2>
   85e0e:	45a2      	cmp	sl, r4
   85e10:	d92b      	bls.n	85e6a <__udivmoddi4+0x2a2>
   85e12:	3802      	subs	r0, #2
   85e14:	4464      	add	r4, ip
   85e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85e1a:	fba0 8902 	umull	r8, r9, r0, r2
   85e1e:	eba4 040a 	sub.w	r4, r4, sl
   85e22:	454c      	cmp	r4, r9
   85e24:	46c6      	mov	lr, r8
   85e26:	464d      	mov	r5, r9
   85e28:	d319      	bcc.n	85e5e <__udivmoddi4+0x296>
   85e2a:	d016      	beq.n	85e5a <__udivmoddi4+0x292>
   85e2c:	b15e      	cbz	r6, 85e46 <__udivmoddi4+0x27e>
   85e2e:	ebb3 020e 	subs.w	r2, r3, lr
   85e32:	eb64 0405 	sbc.w	r4, r4, r5
   85e36:	fa04 f707 	lsl.w	r7, r4, r7
   85e3a:	fa22 f301 	lsr.w	r3, r2, r1
   85e3e:	431f      	orrs	r7, r3
   85e40:	40cc      	lsrs	r4, r1
   85e42:	e9c6 7400 	strd	r7, r4, [r6]
   85e46:	2100      	movs	r1, #0
   85e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85e4c:	4631      	mov	r1, r6
   85e4e:	4630      	mov	r0, r6
   85e50:	e70c      	b.n	85c6c <__udivmoddi4+0xa4>
   85e52:	468c      	mov	ip, r1
   85e54:	e6eb      	b.n	85c2e <__udivmoddi4+0x66>
   85e56:	4610      	mov	r0, r2
   85e58:	e6ff      	b.n	85c5a <__udivmoddi4+0x92>
   85e5a:	4543      	cmp	r3, r8
   85e5c:	d2e6      	bcs.n	85e2c <__udivmoddi4+0x264>
   85e5e:	ebb8 0e02 	subs.w	lr, r8, r2
   85e62:	eb69 050c 	sbc.w	r5, r9, ip
   85e66:	3801      	subs	r0, #1
   85e68:	e7e0      	b.n	85e2c <__udivmoddi4+0x264>
   85e6a:	4628      	mov	r0, r5
   85e6c:	e7d3      	b.n	85e16 <__udivmoddi4+0x24e>
   85e6e:	4611      	mov	r1, r2
   85e70:	e78c      	b.n	85d8c <__udivmoddi4+0x1c4>
   85e72:	4681      	mov	r9, r0
   85e74:	e7b9      	b.n	85dea <__udivmoddi4+0x222>
   85e76:	4608      	mov	r0, r1
   85e78:	e773      	b.n	85d62 <__udivmoddi4+0x19a>
   85e7a:	4608      	mov	r0, r1
   85e7c:	e749      	b.n	85d12 <__udivmoddi4+0x14a>
   85e7e:	f1ac 0c02 	sub.w	ip, ip, #2
   85e82:	443d      	add	r5, r7
   85e84:	e713      	b.n	85cae <__udivmoddi4+0xe6>
   85e86:	3802      	subs	r0, #2
   85e88:	443c      	add	r4, r7
   85e8a:	e724      	b.n	85cd6 <__udivmoddi4+0x10e>

00085e8c <__aeabi_idiv0>:
   85e8c:	4770      	bx	lr
   85e8e:	bf00      	nop

00085e90 <__libc_init_array>:
   85e90:	b570      	push	{r4, r5, r6, lr}
   85e92:	4e0d      	ldr	r6, [pc, #52]	; (85ec8 <__libc_init_array+0x38>)
   85e94:	4d0d      	ldr	r5, [pc, #52]	; (85ecc <__libc_init_array+0x3c>)
   85e96:	1b76      	subs	r6, r6, r5
   85e98:	10b6      	asrs	r6, r6, #2
   85e9a:	d006      	beq.n	85eaa <__libc_init_array+0x1a>
   85e9c:	2400      	movs	r4, #0
   85e9e:	f855 3b04 	ldr.w	r3, [r5], #4
   85ea2:	3401      	adds	r4, #1
   85ea4:	4798      	blx	r3
   85ea6:	42a6      	cmp	r6, r4
   85ea8:	d1f9      	bne.n	85e9e <__libc_init_array+0xe>
   85eaa:	4e09      	ldr	r6, [pc, #36]	; (85ed0 <__libc_init_array+0x40>)
   85eac:	4d09      	ldr	r5, [pc, #36]	; (85ed4 <__libc_init_array+0x44>)
   85eae:	f007 f88f 	bl	8cfd0 <_init>
   85eb2:	1b76      	subs	r6, r6, r5
   85eb4:	10b6      	asrs	r6, r6, #2
   85eb6:	d006      	beq.n	85ec6 <__libc_init_array+0x36>
   85eb8:	2400      	movs	r4, #0
   85eba:	f855 3b04 	ldr.w	r3, [r5], #4
   85ebe:	3401      	adds	r4, #1
   85ec0:	4798      	blx	r3
   85ec2:	42a6      	cmp	r6, r4
   85ec4:	d1f9      	bne.n	85eba <__libc_init_array+0x2a>
   85ec6:	bd70      	pop	{r4, r5, r6, pc}
   85ec8:	0008cfdc 	.word	0x0008cfdc
   85ecc:	0008cfdc 	.word	0x0008cfdc
   85ed0:	0008cfe4 	.word	0x0008cfe4
   85ed4:	0008cfdc 	.word	0x0008cfdc

00085ed8 <iprintf>:
   85ed8:	b40f      	push	{r0, r1, r2, r3}
   85eda:	b500      	push	{lr}
   85edc:	4907      	ldr	r1, [pc, #28]	; (85efc <iprintf+0x24>)
   85ede:	b083      	sub	sp, #12
   85ee0:	ab04      	add	r3, sp, #16
   85ee2:	6808      	ldr	r0, [r1, #0]
   85ee4:	f853 2b04 	ldr.w	r2, [r3], #4
   85ee8:	6881      	ldr	r1, [r0, #8]
   85eea:	9301      	str	r3, [sp, #4]
   85eec:	f002 f80e 	bl	87f0c <_vfiprintf_r>
   85ef0:	b003      	add	sp, #12
   85ef2:	f85d eb04 	ldr.w	lr, [sp], #4
   85ef6:	b004      	add	sp, #16
   85ef8:	4770      	bx	lr
   85efa:	bf00      	nop
   85efc:	200009ac 	.word	0x200009ac

00085f00 <memcpy>:
   85f00:	4684      	mov	ip, r0
   85f02:	ea41 0300 	orr.w	r3, r1, r0
   85f06:	f013 0303 	ands.w	r3, r3, #3
   85f0a:	d149      	bne.n	85fa0 <memcpy+0xa0>
   85f0c:	3a40      	subs	r2, #64	; 0x40
   85f0e:	d323      	bcc.n	85f58 <memcpy+0x58>
   85f10:	680b      	ldr	r3, [r1, #0]
   85f12:	6003      	str	r3, [r0, #0]
   85f14:	684b      	ldr	r3, [r1, #4]
   85f16:	6043      	str	r3, [r0, #4]
   85f18:	688b      	ldr	r3, [r1, #8]
   85f1a:	6083      	str	r3, [r0, #8]
   85f1c:	68cb      	ldr	r3, [r1, #12]
   85f1e:	60c3      	str	r3, [r0, #12]
   85f20:	690b      	ldr	r3, [r1, #16]
   85f22:	6103      	str	r3, [r0, #16]
   85f24:	694b      	ldr	r3, [r1, #20]
   85f26:	6143      	str	r3, [r0, #20]
   85f28:	698b      	ldr	r3, [r1, #24]
   85f2a:	6183      	str	r3, [r0, #24]
   85f2c:	69cb      	ldr	r3, [r1, #28]
   85f2e:	61c3      	str	r3, [r0, #28]
   85f30:	6a0b      	ldr	r3, [r1, #32]
   85f32:	6203      	str	r3, [r0, #32]
   85f34:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85f36:	6243      	str	r3, [r0, #36]	; 0x24
   85f38:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85f3a:	6283      	str	r3, [r0, #40]	; 0x28
   85f3c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85f3e:	62c3      	str	r3, [r0, #44]	; 0x2c
   85f40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85f42:	6303      	str	r3, [r0, #48]	; 0x30
   85f44:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85f46:	6343      	str	r3, [r0, #52]	; 0x34
   85f48:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85f4a:	6383      	str	r3, [r0, #56]	; 0x38
   85f4c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85f4e:	63c3      	str	r3, [r0, #60]	; 0x3c
   85f50:	3040      	adds	r0, #64	; 0x40
   85f52:	3140      	adds	r1, #64	; 0x40
   85f54:	3a40      	subs	r2, #64	; 0x40
   85f56:	d2db      	bcs.n	85f10 <memcpy+0x10>
   85f58:	3230      	adds	r2, #48	; 0x30
   85f5a:	d30b      	bcc.n	85f74 <memcpy+0x74>
   85f5c:	680b      	ldr	r3, [r1, #0]
   85f5e:	6003      	str	r3, [r0, #0]
   85f60:	684b      	ldr	r3, [r1, #4]
   85f62:	6043      	str	r3, [r0, #4]
   85f64:	688b      	ldr	r3, [r1, #8]
   85f66:	6083      	str	r3, [r0, #8]
   85f68:	68cb      	ldr	r3, [r1, #12]
   85f6a:	60c3      	str	r3, [r0, #12]
   85f6c:	3010      	adds	r0, #16
   85f6e:	3110      	adds	r1, #16
   85f70:	3a10      	subs	r2, #16
   85f72:	d2f3      	bcs.n	85f5c <memcpy+0x5c>
   85f74:	320c      	adds	r2, #12
   85f76:	d305      	bcc.n	85f84 <memcpy+0x84>
   85f78:	f851 3b04 	ldr.w	r3, [r1], #4
   85f7c:	f840 3b04 	str.w	r3, [r0], #4
   85f80:	3a04      	subs	r2, #4
   85f82:	d2f9      	bcs.n	85f78 <memcpy+0x78>
   85f84:	3204      	adds	r2, #4
   85f86:	d008      	beq.n	85f9a <memcpy+0x9a>
   85f88:	07d2      	lsls	r2, r2, #31
   85f8a:	bf1c      	itt	ne
   85f8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85f90:	f800 3b01 	strbne.w	r3, [r0], #1
   85f94:	d301      	bcc.n	85f9a <memcpy+0x9a>
   85f96:	880b      	ldrh	r3, [r1, #0]
   85f98:	8003      	strh	r3, [r0, #0]
   85f9a:	4660      	mov	r0, ip
   85f9c:	4770      	bx	lr
   85f9e:	bf00      	nop
   85fa0:	2a08      	cmp	r2, #8
   85fa2:	d313      	bcc.n	85fcc <memcpy+0xcc>
   85fa4:	078b      	lsls	r3, r1, #30
   85fa6:	d0b1      	beq.n	85f0c <memcpy+0xc>
   85fa8:	f010 0303 	ands.w	r3, r0, #3
   85fac:	d0ae      	beq.n	85f0c <memcpy+0xc>
   85fae:	f1c3 0304 	rsb	r3, r3, #4
   85fb2:	1ad2      	subs	r2, r2, r3
   85fb4:	07db      	lsls	r3, r3, #31
   85fb6:	bf1c      	itt	ne
   85fb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85fbc:	f800 3b01 	strbne.w	r3, [r0], #1
   85fc0:	d3a4      	bcc.n	85f0c <memcpy+0xc>
   85fc2:	f831 3b02 	ldrh.w	r3, [r1], #2
   85fc6:	f820 3b02 	strh.w	r3, [r0], #2
   85fca:	e79f      	b.n	85f0c <memcpy+0xc>
   85fcc:	3a04      	subs	r2, #4
   85fce:	d3d9      	bcc.n	85f84 <memcpy+0x84>
   85fd0:	3a01      	subs	r2, #1
   85fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
   85fd6:	f800 3b01 	strb.w	r3, [r0], #1
   85fda:	d2f9      	bcs.n	85fd0 <memcpy+0xd0>
   85fdc:	780b      	ldrb	r3, [r1, #0]
   85fde:	7003      	strb	r3, [r0, #0]
   85fe0:	784b      	ldrb	r3, [r1, #1]
   85fe2:	7043      	strb	r3, [r0, #1]
   85fe4:	788b      	ldrb	r3, [r1, #2]
   85fe6:	7083      	strb	r3, [r0, #2]
   85fe8:	4660      	mov	r0, ip
   85fea:	4770      	bx	lr

00085fec <memset>:
   85fec:	b4f0      	push	{r4, r5, r6, r7}
   85fee:	0786      	lsls	r6, r0, #30
   85ff0:	d046      	beq.n	86080 <memset+0x94>
   85ff2:	1e54      	subs	r4, r2, #1
   85ff4:	2a00      	cmp	r2, #0
   85ff6:	d03c      	beq.n	86072 <memset+0x86>
   85ff8:	4603      	mov	r3, r0
   85ffa:	b2ca      	uxtb	r2, r1
   85ffc:	e001      	b.n	86002 <memset+0x16>
   85ffe:	3c01      	subs	r4, #1
   86000:	d337      	bcc.n	86072 <memset+0x86>
   86002:	f803 2b01 	strb.w	r2, [r3], #1
   86006:	079d      	lsls	r5, r3, #30
   86008:	d1f9      	bne.n	85ffe <memset+0x12>
   8600a:	2c03      	cmp	r4, #3
   8600c:	d92a      	bls.n	86064 <memset+0x78>
   8600e:	b2cd      	uxtb	r5, r1
   86010:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86014:	2c0f      	cmp	r4, #15
   86016:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8601a:	d934      	bls.n	86086 <memset+0x9a>
   8601c:	f1a4 0210 	sub.w	r2, r4, #16
   86020:	f022 0c0f 	bic.w	ip, r2, #15
   86024:	f103 0720 	add.w	r7, r3, #32
   86028:	0916      	lsrs	r6, r2, #4
   8602a:	4467      	add	r7, ip
   8602c:	f103 0210 	add.w	r2, r3, #16
   86030:	e942 5504 	strd	r5, r5, [r2, #-16]
   86034:	e942 5502 	strd	r5, r5, [r2, #-8]
   86038:	3210      	adds	r2, #16
   8603a:	42ba      	cmp	r2, r7
   8603c:	d1f8      	bne.n	86030 <memset+0x44>
   8603e:	1c72      	adds	r2, r6, #1
   86040:	f014 0f0c 	tst.w	r4, #12
   86044:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86048:	f004 060f 	and.w	r6, r4, #15
   8604c:	d013      	beq.n	86076 <memset+0x8a>
   8604e:	1f33      	subs	r3, r6, #4
   86050:	f023 0303 	bic.w	r3, r3, #3
   86054:	3304      	adds	r3, #4
   86056:	4413      	add	r3, r2
   86058:	f842 5b04 	str.w	r5, [r2], #4
   8605c:	4293      	cmp	r3, r2
   8605e:	d1fb      	bne.n	86058 <memset+0x6c>
   86060:	f006 0403 	and.w	r4, r6, #3
   86064:	b12c      	cbz	r4, 86072 <memset+0x86>
   86066:	b2ca      	uxtb	r2, r1
   86068:	441c      	add	r4, r3
   8606a:	f803 2b01 	strb.w	r2, [r3], #1
   8606e:	429c      	cmp	r4, r3
   86070:	d1fb      	bne.n	8606a <memset+0x7e>
   86072:	bcf0      	pop	{r4, r5, r6, r7}
   86074:	4770      	bx	lr
   86076:	4634      	mov	r4, r6
   86078:	4613      	mov	r3, r2
   8607a:	2c00      	cmp	r4, #0
   8607c:	d1f3      	bne.n	86066 <memset+0x7a>
   8607e:	e7f8      	b.n	86072 <memset+0x86>
   86080:	4614      	mov	r4, r2
   86082:	4603      	mov	r3, r0
   86084:	e7c1      	b.n	8600a <memset+0x1e>
   86086:	461a      	mov	r2, r3
   86088:	4626      	mov	r6, r4
   8608a:	e7e0      	b.n	8604e <memset+0x62>

0008608c <setbuf>:
   8608c:	2900      	cmp	r1, #0
   8608e:	bf0c      	ite	eq
   86090:	2202      	moveq	r2, #2
   86092:	2200      	movne	r2, #0
   86094:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86098:	f000 b800 	b.w	8609c <setvbuf>

0008609c <setvbuf>:
   8609c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   860a0:	4d65      	ldr	r5, [pc, #404]	; (86238 <setvbuf+0x19c>)
   860a2:	4604      	mov	r4, r0
   860a4:	f8d5 9000 	ldr.w	r9, [r5]
   860a8:	460f      	mov	r7, r1
   860aa:	4690      	mov	r8, r2
   860ac:	461e      	mov	r6, r3
   860ae:	b083      	sub	sp, #12
   860b0:	f1b9 0f00 	cmp.w	r9, #0
   860b4:	d003      	beq.n	860be <setvbuf+0x22>
   860b6:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   860ba:	2b00      	cmp	r3, #0
   860bc:	d079      	beq.n	861b2 <setvbuf+0x116>
   860be:	f1b8 0f02 	cmp.w	r8, #2
   860c2:	d006      	beq.n	860d2 <setvbuf+0x36>
   860c4:	f1b8 0f01 	cmp.w	r8, #1
   860c8:	f200 80a3 	bhi.w	86212 <setvbuf+0x176>
   860cc:	2e00      	cmp	r6, #0
   860ce:	f2c0 80a0 	blt.w	86212 <setvbuf+0x176>
   860d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   860d4:	07d9      	lsls	r1, r3, #31
   860d6:	d552      	bpl.n	8617e <setvbuf+0xe2>
   860d8:	4621      	mov	r1, r4
   860da:	4648      	mov	r0, r9
   860dc:	f003 fef4 	bl	89ec8 <_fflush_r>
   860e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   860e2:	b141      	cbz	r1, 860f6 <setvbuf+0x5a>
   860e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   860e8:	4299      	cmp	r1, r3
   860ea:	d002      	beq.n	860f2 <setvbuf+0x56>
   860ec:	4648      	mov	r0, r9
   860ee:	f004 f86b 	bl	8a1c8 <_free_r>
   860f2:	2300      	movs	r3, #0
   860f4:	6323      	str	r3, [r4, #48]	; 0x30
   860f6:	2300      	movs	r3, #0
   860f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   860fc:	61a3      	str	r3, [r4, #24]
   860fe:	6063      	str	r3, [r4, #4]
   86100:	062b      	lsls	r3, r5, #24
   86102:	d465      	bmi.n	861d0 <setvbuf+0x134>
   86104:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   86108:	f025 0503 	bic.w	r5, r5, #3
   8610c:	f1b8 0f02 	cmp.w	r8, #2
   86110:	81a5      	strh	r5, [r4, #12]
   86112:	d064      	beq.n	861de <setvbuf+0x142>
   86114:	ab01      	add	r3, sp, #4
   86116:	466a      	mov	r2, sp
   86118:	4621      	mov	r1, r4
   8611a:	4648      	mov	r0, r9
   8611c:	f004 fb06 	bl	8a72c <__swhatbuf_r>
   86120:	89a3      	ldrh	r3, [r4, #12]
   86122:	4318      	orrs	r0, r3
   86124:	81a0      	strh	r0, [r4, #12]
   86126:	2e00      	cmp	r6, #0
   86128:	d030      	beq.n	8618c <setvbuf+0xf0>
   8612a:	2f00      	cmp	r7, #0
   8612c:	d02f      	beq.n	8618e <setvbuf+0xf2>
   8612e:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   86132:	2b00      	cmp	r3, #0
   86134:	d039      	beq.n	861aa <setvbuf+0x10e>
   86136:	9b00      	ldr	r3, [sp, #0]
   86138:	e9c4 7604 	strd	r7, r6, [r4, #16]
   8613c:	42b3      	cmp	r3, r6
   8613e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86142:	6027      	str	r7, [r4, #0]
   86144:	bf1c      	itt	ne
   86146:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   8614a:	81a3      	strhne	r3, [r4, #12]
   8614c:	f1b8 0f01 	cmp.w	r8, #1
   86150:	bf04      	itt	eq
   86152:	f043 0301 	orreq.w	r3, r3, #1
   86156:	81a3      	strheq	r3, [r4, #12]
   86158:	b29a      	uxth	r2, r3
   8615a:	f013 0308 	ands.w	r3, r3, #8
   8615e:	d02c      	beq.n	861ba <setvbuf+0x11e>
   86160:	07d1      	lsls	r1, r2, #31
   86162:	d554      	bpl.n	8620e <setvbuf+0x172>
   86164:	2100      	movs	r1, #0
   86166:	4276      	negs	r6, r6
   86168:	61a6      	str	r6, [r4, #24]
   8616a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8616c:	60a1      	str	r1, [r4, #8]
   8616e:	f016 0601 	ands.w	r6, r6, #1
   86172:	d027      	beq.n	861c4 <setvbuf+0x128>
   86174:	2600      	movs	r6, #0
   86176:	4630      	mov	r0, r6
   86178:	b003      	add	sp, #12
   8617a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8617e:	89a3      	ldrh	r3, [r4, #12]
   86180:	059a      	lsls	r2, r3, #22
   86182:	d4a9      	bmi.n	860d8 <setvbuf+0x3c>
   86184:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86186:	f004 facd 	bl	8a724 <__retarget_lock_acquire_recursive>
   8618a:	e7a5      	b.n	860d8 <setvbuf+0x3c>
   8618c:	9e00      	ldr	r6, [sp, #0]
   8618e:	4630      	mov	r0, r6
   86190:	f004 fb44 	bl	8a81c <malloc>
   86194:	4607      	mov	r7, r0
   86196:	2800      	cmp	r0, #0
   86198:	d03e      	beq.n	86218 <setvbuf+0x17c>
   8619a:	89a3      	ldrh	r3, [r4, #12]
   8619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   861a0:	81a3      	strh	r3, [r4, #12]
   861a2:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   861a6:	2b00      	cmp	r3, #0
   861a8:	d1c5      	bne.n	86136 <setvbuf+0x9a>
   861aa:	4648      	mov	r0, r9
   861ac:	f003 fee8 	bl	89f80 <__sinit>
   861b0:	e7c1      	b.n	86136 <setvbuf+0x9a>
   861b2:	4648      	mov	r0, r9
   861b4:	f003 fee4 	bl	89f80 <__sinit>
   861b8:	e781      	b.n	860be <setvbuf+0x22>
   861ba:	60a3      	str	r3, [r4, #8]
   861bc:	6e66      	ldr	r6, [r4, #100]	; 0x64
   861be:	f016 0601 	ands.w	r6, r6, #1
   861c2:	d1d7      	bne.n	86174 <setvbuf+0xd8>
   861c4:	0593      	lsls	r3, r2, #22
   861c6:	d51b      	bpl.n	86200 <setvbuf+0x164>
   861c8:	4630      	mov	r0, r6
   861ca:	b003      	add	sp, #12
   861cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   861d0:	4648      	mov	r0, r9
   861d2:	6921      	ldr	r1, [r4, #16]
   861d4:	f003 fff8 	bl	8a1c8 <_free_r>
   861d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   861dc:	e792      	b.n	86104 <setvbuf+0x68>
   861de:	2600      	movs	r6, #0
   861e0:	2300      	movs	r3, #0
   861e2:	2101      	movs	r1, #1
   861e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   861e6:	f045 0502 	orr.w	r5, r5, #2
   861ea:	60a3      	str	r3, [r4, #8]
   861ec:	07d7      	lsls	r7, r2, #31
   861ee:	f104 0343 	add.w	r3, r4, #67	; 0x43
   861f2:	81a5      	strh	r5, [r4, #12]
   861f4:	6161      	str	r1, [r4, #20]
   861f6:	6023      	str	r3, [r4, #0]
   861f8:	6123      	str	r3, [r4, #16]
   861fa:	d4e5      	bmi.n	861c8 <setvbuf+0x12c>
   861fc:	05a8      	lsls	r0, r5, #22
   861fe:	d4e3      	bmi.n	861c8 <setvbuf+0x12c>
   86200:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86202:	f004 fa91 	bl	8a728 <__retarget_lock_release_recursive>
   86206:	4630      	mov	r0, r6
   86208:	b003      	add	sp, #12
   8620a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8620e:	60a6      	str	r6, [r4, #8]
   86210:	e7d4      	b.n	861bc <setvbuf+0x120>
   86212:	f04f 36ff 	mov.w	r6, #4294967295
   86216:	e7d7      	b.n	861c8 <setvbuf+0x12c>
   86218:	9d00      	ldr	r5, [sp, #0]
   8621a:	42b5      	cmp	r5, r6
   8621c:	d004      	beq.n	86228 <setvbuf+0x18c>
   8621e:	4628      	mov	r0, r5
   86220:	f004 fafc 	bl	8a81c <malloc>
   86224:	4607      	mov	r7, r0
   86226:	b920      	cbnz	r0, 86232 <setvbuf+0x196>
   86228:	f04f 36ff 	mov.w	r6, #4294967295
   8622c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86230:	e7d6      	b.n	861e0 <setvbuf+0x144>
   86232:	462e      	mov	r6, r5
   86234:	e7b1      	b.n	8619a <setvbuf+0xfe>
   86236:	bf00      	nop
   86238:	200009ac 	.word	0x200009ac

0008623c <sprintf>:
   8623c:	b40e      	push	{r1, r2, r3}
   8623e:	4601      	mov	r1, r0
   86240:	b530      	push	{r4, r5, lr}
   86242:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   86246:	b09c      	sub	sp, #112	; 0x70
   86248:	ab1f      	add	r3, sp, #124	; 0x7c
   8624a:	480b      	ldr	r0, [pc, #44]	; (86278 <sprintf+0x3c>)
   8624c:	f853 2b04 	ldr.w	r2, [r3], #4
   86250:	4d0a      	ldr	r5, [pc, #40]	; (8627c <sprintf+0x40>)
   86252:	9102      	str	r1, [sp, #8]
   86254:	9106      	str	r1, [sp, #24]
   86256:	6800      	ldr	r0, [r0, #0]
   86258:	a902      	add	r1, sp, #8
   8625a:	9301      	str	r3, [sp, #4]
   8625c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86260:	9407      	str	r4, [sp, #28]
   86262:	f000 f86f 	bl	86344 <_svfprintf_r>
   86266:	2200      	movs	r2, #0
   86268:	9b02      	ldr	r3, [sp, #8]
   8626a:	701a      	strb	r2, [r3, #0]
   8626c:	b01c      	add	sp, #112	; 0x70
   8626e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86272:	b003      	add	sp, #12
   86274:	4770      	bx	lr
   86276:	bf00      	nop
   86278:	200009ac 	.word	0x200009ac
   8627c:	ffff0208 	.word	0xffff0208

00086280 <strlen>:
   86280:	f020 0103 	bic.w	r1, r0, #3
   86284:	f010 0003 	ands.w	r0, r0, #3
   86288:	f1c0 0000 	rsb	r0, r0, #0
   8628c:	f851 3b04 	ldr.w	r3, [r1], #4
   86290:	f100 0c04 	add.w	ip, r0, #4
   86294:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86298:	f06f 0200 	mvn.w	r2, #0
   8629c:	bf1c      	itt	ne
   8629e:	fa22 f20c 	lsrne.w	r2, r2, ip
   862a2:	4313      	orrne	r3, r2
   862a4:	f04f 0c01 	mov.w	ip, #1
   862a8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   862ac:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   862b0:	eba3 020c 	sub.w	r2, r3, ip
   862b4:	ea22 0203 	bic.w	r2, r2, r3
   862b8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   862bc:	bf04      	itt	eq
   862be:	f851 3b04 	ldreq.w	r3, [r1], #4
   862c2:	3004      	addeq	r0, #4
   862c4:	d0f4      	beq.n	862b0 <strlen+0x30>
   862c6:	f1c2 0100 	rsb	r1, r2, #0
   862ca:	ea02 0201 	and.w	r2, r2, r1
   862ce:	fab2 f282 	clz	r2, r2
   862d2:	f1c2 021f 	rsb	r2, r2, #31
   862d6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   862da:	4770      	bx	lr

000862dc <strncpy>:
   862dc:	b470      	push	{r4, r5, r6}
   862de:	ea40 0401 	orr.w	r4, r0, r1
   862e2:	07a3      	lsls	r3, r4, #30
   862e4:	d122      	bne.n	8632c <strncpy+0x50>
   862e6:	2a03      	cmp	r2, #3
   862e8:	d920      	bls.n	8632c <strncpy+0x50>
   862ea:	460b      	mov	r3, r1
   862ec:	4604      	mov	r4, r0
   862ee:	4619      	mov	r1, r3
   862f0:	f853 6b04 	ldr.w	r6, [r3], #4
   862f4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   862f8:	ea25 0506 	bic.w	r5, r5, r6
   862fc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   86300:	d115      	bne.n	8632e <strncpy+0x52>
   86302:	3a04      	subs	r2, #4
   86304:	2a03      	cmp	r2, #3
   86306:	4619      	mov	r1, r3
   86308:	f844 6b04 	str.w	r6, [r4], #4
   8630c:	d8ef      	bhi.n	862ee <strncpy+0x12>
   8630e:	1e4d      	subs	r5, r1, #1
   86310:	b152      	cbz	r2, 86328 <strncpy+0x4c>
   86312:	4623      	mov	r3, r4
   86314:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   86318:	1e56      	subs	r6, r2, #1
   8631a:	f803 1b01 	strb.w	r1, [r3], #1
   8631e:	b141      	cbz	r1, 86332 <strncpy+0x56>
   86320:	4632      	mov	r2, r6
   86322:	461c      	mov	r4, r3
   86324:	2a00      	cmp	r2, #0
   86326:	d1f4      	bne.n	86312 <strncpy+0x36>
   86328:	bc70      	pop	{r4, r5, r6}
   8632a:	4770      	bx	lr
   8632c:	4604      	mov	r4, r0
   8632e:	1e4d      	subs	r5, r1, #1
   86330:	e7ee      	b.n	86310 <strncpy+0x34>
   86332:	4422      	add	r2, r4
   86334:	2e00      	cmp	r6, #0
   86336:	d0f7      	beq.n	86328 <strncpy+0x4c>
   86338:	f803 1b01 	strb.w	r1, [r3], #1
   8633c:	4293      	cmp	r3, r2
   8633e:	d1fb      	bne.n	86338 <strncpy+0x5c>
   86340:	bc70      	pop	{r4, r5, r6}
   86342:	4770      	bx	lr

00086344 <_svfprintf_r>:
   86344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86348:	b0d7      	sub	sp, #348	; 0x15c
   8634a:	468b      	mov	fp, r1
   8634c:	4617      	mov	r7, r2
   8634e:	930e      	str	r3, [sp, #56]	; 0x38
   86350:	4681      	mov	r9, r0
   86352:	f004 f9df 	bl	8a714 <_localeconv_r>
   86356:	6803      	ldr	r3, [r0, #0]
   86358:	4618      	mov	r0, r3
   8635a:	9318      	str	r3, [sp, #96]	; 0x60
   8635c:	f7ff ff90 	bl	86280 <strlen>
   86360:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86364:	9017      	str	r0, [sp, #92]	; 0x5c
   86366:	061d      	lsls	r5, r3, #24
   86368:	d504      	bpl.n	86374 <_svfprintf_r+0x30>
   8636a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8636e:	2b00      	cmp	r3, #0
   86370:	f000 87df 	beq.w	87332 <_svfprintf_r+0xfee>
   86374:	2300      	movs	r3, #0
   86376:	2100      	movs	r1, #0
   86378:	2200      	movs	r2, #0
   8637a:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   8637e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   86382:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   86386:	9313      	str	r3, [sp, #76]	; 0x4c
   86388:	9319      	str	r3, [sp, #100]	; 0x64
   8638a:	930a      	str	r3, [sp, #40]	; 0x28
   8638c:	ab2d      	add	r3, sp, #180	; 0xb4
   8638e:	4698      	mov	r8, r3
   86390:	932a      	str	r3, [sp, #168]	; 0xa8
   86392:	783b      	ldrb	r3, [r7, #0]
   86394:	46da      	mov	sl, fp
   86396:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   8639a:	2b00      	cmp	r3, #0
   8639c:	f000 81a4 	beq.w	866e8 <_svfprintf_r+0x3a4>
   863a0:	463c      	mov	r4, r7
   863a2:	e004      	b.n	863ae <_svfprintf_r+0x6a>
   863a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   863a8:	2b00      	cmp	r3, #0
   863aa:	f000 80fd 	beq.w	865a8 <_svfprintf_r+0x264>
   863ae:	2b25      	cmp	r3, #37	; 0x25
   863b0:	d1f8      	bne.n	863a4 <_svfprintf_r+0x60>
   863b2:	1be5      	subs	r5, r4, r7
   863b4:	f040 80fb 	bne.w	865ae <_svfprintf_r+0x26a>
   863b8:	7823      	ldrb	r3, [r4, #0]
   863ba:	2b00      	cmp	r3, #0
   863bc:	f000 8194 	beq.w	866e8 <_svfprintf_r+0x3a4>
   863c0:	2300      	movs	r3, #0
   863c2:	930b      	str	r3, [sp, #44]	; 0x2c
   863c4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   863c8:	9307      	str	r3, [sp, #28]
   863ca:	f04f 33ff 	mov.w	r3, #4294967295
   863ce:	7866      	ldrb	r6, [r4, #1]
   863d0:	f104 0b01 	add.w	fp, r4, #1
   863d4:	2120      	movs	r1, #32
   863d6:	242b      	movs	r4, #43	; 0x2b
   863d8:	9309      	str	r3, [sp, #36]	; 0x24
   863da:	f10b 0b01 	add.w	fp, fp, #1
   863de:	f1a6 0320 	sub.w	r3, r6, #32
   863e2:	2b5a      	cmp	r3, #90	; 0x5a
   863e4:	f200 80ff 	bhi.w	865e6 <_svfprintf_r+0x2a2>
   863e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   863ec:	00fd02bc 	.word	0x00fd02bc
   863f0:	02b500fd 	.word	0x02b500fd
   863f4:	00fd00fd 	.word	0x00fd00fd
   863f8:	029100fd 	.word	0x029100fd
   863fc:	00fd00fd 	.word	0x00fd00fd
   86400:	02e7006a 	.word	0x02e7006a
   86404:	023400fd 	.word	0x023400fd
   86408:	00fd02cd 	.word	0x00fd02cd
   8640c:	005b02c6 	.word	0x005b02c6
   86410:	005b005b 	.word	0x005b005b
   86414:	005b005b 	.word	0x005b005b
   86418:	005b005b 	.word	0x005b005b
   8641c:	005b005b 	.word	0x005b005b
   86420:	00fd00fd 	.word	0x00fd00fd
   86424:	00fd00fd 	.word	0x00fd00fd
   86428:	00fd00fd 	.word	0x00fd00fd
   8642c:	019000fd 	.word	0x019000fd
   86430:	01f700fd 	.word	0x01f700fd
   86434:	0190007c 	.word	0x0190007c
   86438:	01900190 	.word	0x01900190
   8643c:	00fd00fd 	.word	0x00fd00fd
   86440:	00fd00fd 	.word	0x00fd00fd
   86444:	00fd028a 	.word	0x00fd028a
   86448:	00a900fd 	.word	0x00a900fd
   8644c:	00fd00fd 	.word	0x00fd00fd
   86450:	020b00fd 	.word	0x020b00fd
   86454:	023b00fd 	.word	0x023b00fd
   86458:	00fd00fd 	.word	0x00fd00fd
   8645c:	00fd0781 	.word	0x00fd0781
   86460:	00fd00fd 	.word	0x00fd00fd
   86464:	00fd00fd 	.word	0x00fd00fd
   86468:	00fd00fd 	.word	0x00fd00fd
   8646c:	019000fd 	.word	0x019000fd
   86470:	01f700fd 	.word	0x01f700fd
   86474:	01900080 	.word	0x01900080
   86478:	01900190 	.word	0x01900190
   8647c:	00800280 	.word	0x00800280
   86480:	00fd0075 	.word	0x00fd0075
   86484:	00fd0276 	.word	0x00fd0276
   86488:	00ad025e 	.word	0x00ad025e
   8648c:	0075024c 	.word	0x0075024c
   86490:	020b00fd 	.word	0x020b00fd
   86494:	075b0072 	.word	0x075b0072
   86498:	00fd00fd 	.word	0x00fd00fd
   8649c:	00fd075f 	.word	0x00fd075f
   864a0:	0072      	.short	0x0072
   864a2:	2200      	movs	r2, #0
   864a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   864a8:	f81b 6b01 	ldrb.w	r6, [fp], #1
   864ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   864b0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   864b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   864b8:	2b09      	cmp	r3, #9
   864ba:	d9f5      	bls.n	864a8 <_svfprintf_r+0x164>
   864bc:	920b      	str	r2, [sp, #44]	; 0x2c
   864be:	e78e      	b.n	863de <_svfprintf_r+0x9a>
   864c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864c2:	f853 2b04 	ldr.w	r2, [r3], #4
   864c6:	2a00      	cmp	r2, #0
   864c8:	920b      	str	r2, [sp, #44]	; 0x2c
   864ca:	930e      	str	r3, [sp, #56]	; 0x38
   864cc:	f2c0 81bf 	blt.w	8684e <_svfprintf_r+0x50a>
   864d0:	f89b 6000 	ldrb.w	r6, [fp]
   864d4:	e781      	b.n	863da <_svfprintf_r+0x96>
   864d6:	9b07      	ldr	r3, [sp, #28]
   864d8:	f89b 6000 	ldrb.w	r6, [fp]
   864dc:	f043 0320 	orr.w	r3, r3, #32
   864e0:	9307      	str	r3, [sp, #28]
   864e2:	e77a      	b.n	863da <_svfprintf_r+0x96>
   864e4:	9b07      	ldr	r3, [sp, #28]
   864e6:	f043 0310 	orr.w	r3, r3, #16
   864ea:	9307      	str	r3, [sp, #28]
   864ec:	9b07      	ldr	r3, [sp, #28]
   864ee:	069c      	lsls	r4, r3, #26
   864f0:	f140 8162 	bpl.w	867b8 <_svfprintf_r+0x474>
   864f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864f6:	3307      	adds	r3, #7
   864f8:	f023 0307 	bic.w	r3, r3, #7
   864fc:	4619      	mov	r1, r3
   864fe:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86502:	4614      	mov	r4, r2
   86504:	461d      	mov	r5, r3
   86506:	910e      	str	r1, [sp, #56]	; 0x38
   86508:	2a00      	cmp	r2, #0
   8650a:	f173 0300 	sbcs.w	r3, r3, #0
   8650e:	f2c0 85ab 	blt.w	87068 <_svfprintf_r+0xd24>
   86512:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86514:	3301      	adds	r3, #1
   86516:	9b07      	ldr	r3, [sp, #28]
   86518:	f000 8414 	beq.w	86d44 <_svfprintf_r+0xa00>
   8651c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86520:	ea54 0205 	orrs.w	r2, r4, r5
   86524:	9308      	str	r3, [sp, #32]
   86526:	f040 840e 	bne.w	86d46 <_svfprintf_r+0xa02>
   8652a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8652c:	2a00      	cmp	r2, #0
   8652e:	f040 840f 	bne.w	86d50 <_svfprintf_r+0xa0c>
   86532:	9307      	str	r3, [sp, #28]
   86534:	2300      	movs	r3, #0
   86536:	af56      	add	r7, sp, #344	; 0x158
   86538:	9309      	str	r3, [sp, #36]	; 0x24
   8653a:	930c      	str	r3, [sp, #48]	; 0x30
   8653c:	e26b      	b.n	86a16 <_svfprintf_r+0x6d2>
   8653e:	9b07      	ldr	r3, [sp, #28]
   86540:	f043 0310 	orr.w	r3, r3, #16
   86544:	9307      	str	r3, [sp, #28]
   86546:	9b07      	ldr	r3, [sp, #28]
   86548:	069a      	lsls	r2, r3, #26
   8654a:	f140 8126 	bpl.w	8679a <_svfprintf_r+0x456>
   8654e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86550:	3307      	adds	r3, #7
   86552:	f023 0307 	bic.w	r3, r3, #7
   86556:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8655a:	930e      	str	r3, [sp, #56]	; 0x38
   8655c:	9b07      	ldr	r3, [sp, #28]
   8655e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86562:	9308      	str	r3, [sp, #32]
   86564:	2300      	movs	r3, #0
   86566:	2200      	movs	r2, #0
   86568:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8656c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8656e:	4611      	mov	r1, r2
   86570:	3101      	adds	r1, #1
   86572:	f000 8231 	beq.w	869d8 <_svfprintf_r+0x694>
   86576:	9908      	ldr	r1, [sp, #32]
   86578:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   8657c:	9107      	str	r1, [sp, #28]
   8657e:	ea54 0105 	orrs.w	r1, r4, r5
   86582:	f040 8227 	bne.w	869d4 <_svfprintf_r+0x690>
   86586:	2a00      	cmp	r2, #0
   86588:	f040 837d 	bne.w	86c86 <_svfprintf_r+0x942>
   8658c:	2b00      	cmp	r3, #0
   8658e:	d1d1      	bne.n	86534 <_svfprintf_r+0x1f0>
   86590:	9b08      	ldr	r3, [sp, #32]
   86592:	f013 0301 	ands.w	r3, r3, #1
   86596:	930c      	str	r3, [sp, #48]	; 0x30
   86598:	f000 8590 	beq.w	870bc <_svfprintf_r+0xd78>
   8659c:	2330      	movs	r3, #48	; 0x30
   8659e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   865a2:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   865a6:	e236      	b.n	86a16 <_svfprintf_r+0x6d2>
   865a8:	1be5      	subs	r5, r4, r7
   865aa:	f000 809d 	beq.w	866e8 <_svfprintf_r+0x3a4>
   865ae:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   865b2:	3301      	adds	r3, #1
   865b4:	442a      	add	r2, r5
   865b6:	2b07      	cmp	r3, #7
   865b8:	e9c8 7500 	strd	r7, r5, [r8]
   865bc:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   865c0:	dc06      	bgt.n	865d0 <_svfprintf_r+0x28c>
   865c2:	f108 0808 	add.w	r8, r8, #8
   865c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   865c8:	7823      	ldrb	r3, [r4, #0]
   865ca:	442a      	add	r2, r5
   865cc:	920a      	str	r2, [sp, #40]	; 0x28
   865ce:	e6f4      	b.n	863ba <_svfprintf_r+0x76>
   865d0:	4651      	mov	r1, sl
   865d2:	4648      	mov	r0, r9
   865d4:	aa2a      	add	r2, sp, #168	; 0xa8
   865d6:	f005 fa9f 	bl	8bb18 <__ssprint_r>
   865da:	2800      	cmp	r0, #0
   865dc:	f041 83ce 	bne.w	87d7c <_svfprintf_r+0x1a38>
   865e0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   865e4:	e7ef      	b.n	865c6 <_svfprintf_r+0x282>
   865e6:	2e00      	cmp	r6, #0
   865e8:	d07e      	beq.n	866e8 <_svfprintf_r+0x3a4>
   865ea:	2300      	movs	r3, #0
   865ec:	2101      	movs	r1, #1
   865ee:	461a      	mov	r2, r3
   865f0:	9108      	str	r1, [sp, #32]
   865f2:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   865f6:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   865fa:	930d      	str	r3, [sp, #52]	; 0x34
   865fc:	9309      	str	r3, [sp, #36]	; 0x24
   865fe:	9312      	str	r3, [sp, #72]	; 0x48
   86600:	9316      	str	r3, [sp, #88]	; 0x58
   86602:	9310      	str	r3, [sp, #64]	; 0x40
   86604:	910c      	str	r1, [sp, #48]	; 0x30
   86606:	af3d      	add	r7, sp, #244	; 0xf4
   86608:	9b07      	ldr	r3, [sp, #28]
   8660a:	f013 0302 	ands.w	r3, r3, #2
   8660e:	d002      	beq.n	86616 <_svfprintf_r+0x2d2>
   86610:	9908      	ldr	r1, [sp, #32]
   86612:	3102      	adds	r1, #2
   86614:	9108      	str	r1, [sp, #32]
   86616:	9907      	ldr	r1, [sp, #28]
   86618:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   8661c:	910f      	str	r1, [sp, #60]	; 0x3c
   8661e:	d105      	bne.n	8662c <_svfprintf_r+0x2e8>
   86620:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86622:	9808      	ldr	r0, [sp, #32]
   86624:	1a0d      	subs	r5, r1, r0
   86626:	2d00      	cmp	r5, #0
   86628:	f300 834b 	bgt.w	86cc2 <_svfprintf_r+0x97e>
   8662c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8662e:	b172      	cbz	r2, 8664e <_svfprintf_r+0x30a>
   86630:	2001      	movs	r0, #1
   86632:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86634:	4404      	add	r4, r0
   86636:	4402      	add	r2, r0
   86638:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   8663c:	2a07      	cmp	r2, #7
   8663e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86642:	e9c8 1000 	strd	r1, r0, [r8]
   86646:	f300 83cd 	bgt.w	86de4 <_svfprintf_r+0xaa0>
   8664a:	f108 0808 	add.w	r8, r8, #8
   8664e:	b16b      	cbz	r3, 8666c <_svfprintf_r+0x328>
   86650:	2102      	movs	r1, #2
   86652:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86654:	440c      	add	r4, r1
   86656:	3301      	adds	r3, #1
   86658:	aa23      	add	r2, sp, #140	; 0x8c
   8665a:	2b07      	cmp	r3, #7
   8665c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86660:	e9c8 2100 	strd	r2, r1, [r8]
   86664:	f300 83cc 	bgt.w	86e00 <_svfprintf_r+0xabc>
   86668:	f108 0808 	add.w	r8, r8, #8
   8666c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8666e:	2b80      	cmp	r3, #128	; 0x80
   86670:	f000 8234 	beq.w	86adc <_svfprintf_r+0x798>
   86674:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86678:	1a9d      	subs	r5, r3, r2
   8667a:	2d00      	cmp	r5, #0
   8667c:	f300 826e 	bgt.w	86b5c <_svfprintf_r+0x818>
   86680:	9b07      	ldr	r3, [sp, #28]
   86682:	05d9      	lsls	r1, r3, #23
   86684:	f100 81d5 	bmi.w	86a32 <_svfprintf_r+0x6ee>
   86688:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8668a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8668c:	3301      	adds	r3, #1
   8668e:	4414      	add	r4, r2
   86690:	2b07      	cmp	r3, #7
   86692:	e9c8 7200 	strd	r7, r2, [r8]
   86696:	942c      	str	r4, [sp, #176]	; 0xb0
   86698:	932b      	str	r3, [sp, #172]	; 0xac
   8669a:	f300 8397 	bgt.w	86dcc <_svfprintf_r+0xa88>
   8669e:	f108 0808 	add.w	r8, r8, #8
   866a2:	9b07      	ldr	r3, [sp, #28]
   866a4:	0759      	lsls	r1, r3, #29
   866a6:	d505      	bpl.n	866b4 <_svfprintf_r+0x370>
   866a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   866aa:	9a08      	ldr	r2, [sp, #32]
   866ac:	1a9d      	subs	r5, r3, r2
   866ae:	2d00      	cmp	r5, #0
   866b0:	f300 83b2 	bgt.w	86e18 <_svfprintf_r+0xad4>
   866b4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   866b8:	9908      	ldr	r1, [sp, #32]
   866ba:	428a      	cmp	r2, r1
   866bc:	bfac      	ite	ge
   866be:	189b      	addge	r3, r3, r2
   866c0:	185b      	addlt	r3, r3, r1
   866c2:	930a      	str	r3, [sp, #40]	; 0x28
   866c4:	2c00      	cmp	r4, #0
   866c6:	f040 827d 	bne.w	86bc4 <_svfprintf_r+0x880>
   866ca:	2300      	movs	r3, #0
   866cc:	932b      	str	r3, [sp, #172]	; 0xac
   866ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   866d0:	b11b      	cbz	r3, 866da <_svfprintf_r+0x396>
   866d2:	4648      	mov	r0, r9
   866d4:	990d      	ldr	r1, [sp, #52]	; 0x34
   866d6:	f003 fd77 	bl	8a1c8 <_free_r>
   866da:	465f      	mov	r7, fp
   866dc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   866e0:	783b      	ldrb	r3, [r7, #0]
   866e2:	2b00      	cmp	r3, #0
   866e4:	f47f ae5c 	bne.w	863a0 <_svfprintf_r+0x5c>
   866e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   866ea:	46d3      	mov	fp, sl
   866ec:	2b00      	cmp	r3, #0
   866ee:	f041 824b 	bne.w	87b88 <_svfprintf_r+0x1844>
   866f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   866f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   866fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   866fc:	bf18      	it	ne
   866fe:	f04f 33ff 	movne.w	r3, #4294967295
   86702:	930a      	str	r3, [sp, #40]	; 0x28
   86704:	980a      	ldr	r0, [sp, #40]	; 0x28
   86706:	b057      	add	sp, #348	; 0x15c
   86708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8670c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8670e:	3307      	adds	r3, #7
   86710:	f023 0307 	bic.w	r3, r3, #7
   86714:	4619      	mov	r1, r3
   86716:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8671a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8671e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86722:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86726:	461d      	mov	r5, r3
   86728:	4618      	mov	r0, r3
   8672a:	910e      	str	r1, [sp, #56]	; 0x38
   8672c:	f04f 32ff 	mov.w	r2, #4294967295
   86730:	4621      	mov	r1, r4
   86732:	4ba4      	ldr	r3, [pc, #656]	; (869c4 <_svfprintf_r+0x680>)
   86734:	f006 f924 	bl	8c980 <__aeabi_dcmpun>
   86738:	2800      	cmp	r0, #0
   8673a:	f040 84d9 	bne.w	870f0 <_svfprintf_r+0xdac>
   8673e:	4628      	mov	r0, r5
   86740:	4621      	mov	r1, r4
   86742:	f04f 32ff 	mov.w	r2, #4294967295
   86746:	4b9f      	ldr	r3, [pc, #636]	; (869c4 <_svfprintf_r+0x680>)
   86748:	f006 f8fc 	bl	8c944 <__aeabi_dcmple>
   8674c:	2800      	cmp	r0, #0
   8674e:	f040 84cf 	bne.w	870f0 <_svfprintf_r+0xdac>
   86752:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86756:	2200      	movs	r2, #0
   86758:	2300      	movs	r3, #0
   8675a:	f006 f8e9 	bl	8c930 <__aeabi_dcmplt>
   8675e:	2800      	cmp	r0, #0
   86760:	f041 800e 	bne.w	87780 <_svfprintf_r+0x143c>
   86764:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86768:	2003      	movs	r0, #3
   8676a:	2100      	movs	r1, #0
   8676c:	4f96      	ldr	r7, [pc, #600]	; (869c8 <_svfprintf_r+0x684>)
   8676e:	4b97      	ldr	r3, [pc, #604]	; (869cc <_svfprintf_r+0x688>)
   86770:	9008      	str	r0, [sp, #32]
   86772:	910d      	str	r1, [sp, #52]	; 0x34
   86774:	2e47      	cmp	r6, #71	; 0x47
   86776:	bfc8      	it	gt
   86778:	461f      	movgt	r7, r3
   8677a:	9c07      	ldr	r4, [sp, #28]
   8677c:	900c      	str	r0, [sp, #48]	; 0x30
   8677e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   86782:	9407      	str	r4, [sp, #28]
   86784:	9109      	str	r1, [sp, #36]	; 0x24
   86786:	9112      	str	r1, [sp, #72]	; 0x48
   86788:	9116      	str	r1, [sp, #88]	; 0x58
   8678a:	9110      	str	r1, [sp, #64]	; 0x40
   8678c:	2a00      	cmp	r2, #0
   8678e:	f43f af3b 	beq.w	86608 <_svfprintf_r+0x2c4>
   86792:	9b08      	ldr	r3, [sp, #32]
   86794:	3301      	adds	r3, #1
   86796:	9308      	str	r3, [sp, #32]
   86798:	e736      	b.n	86608 <_svfprintf_r+0x2c4>
   8679a:	9b07      	ldr	r3, [sp, #28]
   8679c:	06db      	lsls	r3, r3, #27
   8679e:	f100 849c 	bmi.w	870da <_svfprintf_r+0xd96>
   867a2:	9b07      	ldr	r3, [sp, #28]
   867a4:	065f      	lsls	r7, r3, #25
   867a6:	f140 87b2 	bpl.w	8770e <_svfprintf_r+0x13ca>
   867aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867ac:	2500      	movs	r5, #0
   867ae:	f853 4b04 	ldr.w	r4, [r3], #4
   867b2:	930e      	str	r3, [sp, #56]	; 0x38
   867b4:	b2a4      	uxth	r4, r4
   867b6:	e6d1      	b.n	8655c <_svfprintf_r+0x218>
   867b8:	9b07      	ldr	r3, [sp, #28]
   867ba:	06d8      	lsls	r0, r3, #27
   867bc:	f100 8568 	bmi.w	87290 <_svfprintf_r+0xf4c>
   867c0:	9b07      	ldr	r3, [sp, #28]
   867c2:	0659      	lsls	r1, r3, #25
   867c4:	f140 87be 	bpl.w	87744 <_svfprintf_r+0x1400>
   867c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867ca:	f853 4b04 	ldr.w	r4, [r3], #4
   867ce:	b224      	sxth	r4, r4
   867d0:	17e5      	asrs	r5, r4, #31
   867d2:	930e      	str	r3, [sp, #56]	; 0x38
   867d4:	4622      	mov	r2, r4
   867d6:	462b      	mov	r3, r5
   867d8:	e696      	b.n	86508 <_svfprintf_r+0x1c4>
   867da:	2100      	movs	r1, #0
   867dc:	2401      	movs	r4, #1
   867de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   867e0:	460a      	mov	r2, r1
   867e2:	f853 0b04 	ldr.w	r0, [r3], #4
   867e6:	9408      	str	r4, [sp, #32]
   867e8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   867ec:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   867f0:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   867f4:	9109      	str	r1, [sp, #36]	; 0x24
   867f6:	9112      	str	r1, [sp, #72]	; 0x48
   867f8:	9116      	str	r1, [sp, #88]	; 0x58
   867fa:	9110      	str	r1, [sp, #64]	; 0x40
   867fc:	940c      	str	r4, [sp, #48]	; 0x30
   867fe:	af3d      	add	r7, sp, #244	; 0xf4
   86800:	e702      	b.n	86608 <_svfprintf_r+0x2c4>
   86802:	2500      	movs	r5, #0
   86804:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86806:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8680a:	f854 7b04 	ldr.w	r7, [r4], #4
   8680e:	2f00      	cmp	r7, #0
   86810:	f000 859f 	beq.w	87352 <_svfprintf_r+0x100e>
   86814:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86816:	4613      	mov	r3, r2
   86818:	3301      	adds	r3, #1
   8681a:	f000 8770 	beq.w	876fe <_svfprintf_r+0x13ba>
   8681e:	4629      	mov	r1, r5
   86820:	4638      	mov	r0, r7
   86822:	f004 fac7 	bl	8adb4 <memchr>
   86826:	900d      	str	r0, [sp, #52]	; 0x34
   86828:	2800      	cmp	r0, #0
   8682a:	f001 80b9 	beq.w	879a0 <_svfprintf_r+0x165c>
   8682e:	462b      	mov	r3, r5
   86830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86832:	9509      	str	r5, [sp, #36]	; 0x24
   86834:	1bd2      	subs	r2, r2, r7
   86836:	920c      	str	r2, [sp, #48]	; 0x30
   86838:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   8683c:	9208      	str	r2, [sp, #32]
   8683e:	940e      	str	r4, [sp, #56]	; 0x38
   86840:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86844:	930d      	str	r3, [sp, #52]	; 0x34
   86846:	9312      	str	r3, [sp, #72]	; 0x48
   86848:	9316      	str	r3, [sp, #88]	; 0x58
   8684a:	9310      	str	r3, [sp, #64]	; 0x40
   8684c:	e79e      	b.n	8678c <_svfprintf_r+0x448>
   8684e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86850:	425b      	negs	r3, r3
   86852:	930b      	str	r3, [sp, #44]	; 0x2c
   86854:	9b07      	ldr	r3, [sp, #28]
   86856:	f89b 6000 	ldrb.w	r6, [fp]
   8685a:	f043 0304 	orr.w	r3, r3, #4
   8685e:	9307      	str	r3, [sp, #28]
   86860:	e5bb      	b.n	863da <_svfprintf_r+0x96>
   86862:	9b07      	ldr	r3, [sp, #28]
   86864:	f043 0310 	orr.w	r3, r3, #16
   86868:	9308      	str	r3, [sp, #32]
   8686a:	9b08      	ldr	r3, [sp, #32]
   8686c:	069d      	lsls	r5, r3, #26
   8686e:	f140 83ea 	bpl.w	87046 <_svfprintf_r+0xd02>
   86872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86874:	3307      	adds	r3, #7
   86876:	f023 0307 	bic.w	r3, r3, #7
   8687a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8687e:	930e      	str	r3, [sp, #56]	; 0x38
   86880:	2301      	movs	r3, #1
   86882:	e670      	b.n	86566 <_svfprintf_r+0x222>
   86884:	f647 0230 	movw	r2, #30768	; 0x7830
   86888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8688a:	9907      	ldr	r1, [sp, #28]
   8688c:	f853 4b04 	ldr.w	r4, [r3], #4
   86890:	f041 0102 	orr.w	r1, r1, #2
   86894:	930e      	str	r3, [sp, #56]	; 0x38
   86896:	4b4e      	ldr	r3, [pc, #312]	; (869d0 <_svfprintf_r+0x68c>)
   86898:	2500      	movs	r5, #0
   8689a:	9319      	str	r3, [sp, #100]	; 0x64
   8689c:	2678      	movs	r6, #120	; 0x78
   8689e:	2302      	movs	r3, #2
   868a0:	9108      	str	r1, [sp, #32]
   868a2:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   868a6:	e65e      	b.n	86566 <_svfprintf_r+0x222>
   868a8:	9b07      	ldr	r3, [sp, #28]
   868aa:	069d      	lsls	r5, r3, #26
   868ac:	f100 8408 	bmi.w	870c0 <_svfprintf_r+0xd7c>
   868b0:	9b07      	ldr	r3, [sp, #28]
   868b2:	06dc      	lsls	r4, r3, #27
   868b4:	f100 86e1 	bmi.w	8767a <_svfprintf_r+0x1336>
   868b8:	9b07      	ldr	r3, [sp, #28]
   868ba:	0658      	lsls	r0, r3, #25
   868bc:	f100 8795 	bmi.w	877ea <_svfprintf_r+0x14a6>
   868c0:	9b07      	ldr	r3, [sp, #28]
   868c2:	0599      	lsls	r1, r3, #22
   868c4:	f140 86d9 	bpl.w	8767a <_svfprintf_r+0x1336>
   868c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   868ca:	990a      	ldr	r1, [sp, #40]	; 0x28
   868cc:	f853 2b04 	ldr.w	r2, [r3], #4
   868d0:	465f      	mov	r7, fp
   868d2:	7011      	strb	r1, [r2, #0]
   868d4:	930e      	str	r3, [sp, #56]	; 0x38
   868d6:	e703      	b.n	866e0 <_svfprintf_r+0x39c>
   868d8:	f89b 6000 	ldrb.w	r6, [fp]
   868dc:	9b07      	ldr	r3, [sp, #28]
   868de:	2e6c      	cmp	r6, #108	; 0x6c
   868e0:	f000 8508 	beq.w	872f4 <_svfprintf_r+0xfb0>
   868e4:	f043 0310 	orr.w	r3, r3, #16
   868e8:	9307      	str	r3, [sp, #28]
   868ea:	e576      	b.n	863da <_svfprintf_r+0x96>
   868ec:	f89b 6000 	ldrb.w	r6, [fp]
   868f0:	9b07      	ldr	r3, [sp, #28]
   868f2:	2e68      	cmp	r6, #104	; 0x68
   868f4:	f000 8507 	beq.w	87306 <_svfprintf_r+0xfc2>
   868f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   868fc:	9307      	str	r3, [sp, #28]
   868fe:	e56c      	b.n	863da <_svfprintf_r+0x96>
   86900:	9b07      	ldr	r3, [sp, #28]
   86902:	f89b 6000 	ldrb.w	r6, [fp]
   86906:	f043 0308 	orr.w	r3, r3, #8
   8690a:	9307      	str	r3, [sp, #28]
   8690c:	e565      	b.n	863da <_svfprintf_r+0x96>
   8690e:	4648      	mov	r0, r9
   86910:	f003 ff00 	bl	8a714 <_localeconv_r>
   86914:	6843      	ldr	r3, [r0, #4]
   86916:	4618      	mov	r0, r3
   86918:	931c      	str	r3, [sp, #112]	; 0x70
   8691a:	f7ff fcb1 	bl	86280 <strlen>
   8691e:	4603      	mov	r3, r0
   86920:	4648      	mov	r0, r9
   86922:	461d      	mov	r5, r3
   86924:	931d      	str	r3, [sp, #116]	; 0x74
   86926:	f003 fef5 	bl	8a714 <_localeconv_r>
   8692a:	6882      	ldr	r2, [r0, #8]
   8692c:	2120      	movs	r1, #32
   8692e:	921a      	str	r2, [sp, #104]	; 0x68
   86930:	2d00      	cmp	r5, #0
   86932:	f43f adcd 	beq.w	864d0 <_svfprintf_r+0x18c>
   86936:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86938:	2b00      	cmp	r3, #0
   8693a:	f43f adc9 	beq.w	864d0 <_svfprintf_r+0x18c>
   8693e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86940:	781b      	ldrb	r3, [r3, #0]
   86942:	2b00      	cmp	r3, #0
   86944:	f43f adc4 	beq.w	864d0 <_svfprintf_r+0x18c>
   86948:	9b07      	ldr	r3, [sp, #28]
   8694a:	f89b 6000 	ldrb.w	r6, [fp]
   8694e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86952:	9307      	str	r3, [sp, #28]
   86954:	e541      	b.n	863da <_svfprintf_r+0x96>
   86956:	9b07      	ldr	r3, [sp, #28]
   86958:	f89b 6000 	ldrb.w	r6, [fp]
   8695c:	f043 0301 	orr.w	r3, r3, #1
   86960:	9307      	str	r3, [sp, #28]
   86962:	e53a      	b.n	863da <_svfprintf_r+0x96>
   86964:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   86968:	2b00      	cmp	r3, #0
   8696a:	f47f adb1 	bne.w	864d0 <_svfprintf_r+0x18c>
   8696e:	f89b 6000 	ldrb.w	r6, [fp]
   86972:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86976:	e530      	b.n	863da <_svfprintf_r+0x96>
   86978:	9b07      	ldr	r3, [sp, #28]
   8697a:	f89b 6000 	ldrb.w	r6, [fp]
   8697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86982:	9307      	str	r3, [sp, #28]
   86984:	e529      	b.n	863da <_svfprintf_r+0x96>
   86986:	465a      	mov	r2, fp
   86988:	f812 6b01 	ldrb.w	r6, [r2], #1
   8698c:	2e2a      	cmp	r6, #42	; 0x2a
   8698e:	f001 8251 	beq.w	87e34 <_svfprintf_r+0x1af0>
   86992:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86996:	2b09      	cmp	r3, #9
   86998:	4693      	mov	fp, r2
   8699a:	bf98      	it	ls
   8699c:	2200      	movls	r2, #0
   8699e:	f201 80ef 	bhi.w	87b80 <_svfprintf_r+0x183c>
   869a2:	f81b 6b01 	ldrb.w	r6, [fp], #1
   869a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   869aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   869ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   869b2:	2b09      	cmp	r3, #9
   869b4:	d9f5      	bls.n	869a2 <_svfprintf_r+0x65e>
   869b6:	9209      	str	r2, [sp, #36]	; 0x24
   869b8:	e511      	b.n	863de <_svfprintf_r+0x9a>
   869ba:	f89b 6000 	ldrb.w	r6, [fp]
   869be:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   869c2:	e50a      	b.n	863da <_svfprintf_r+0x96>
   869c4:	7fefffff 	.word	0x7fefffff
   869c8:	0008cbd8 	.word	0x0008cbd8
   869cc:	0008cbdc 	.word	0x0008cbdc
   869d0:	0008cbe8 	.word	0x0008cbe8
   869d4:	9a07      	ldr	r2, [sp, #28]
   869d6:	9208      	str	r2, [sp, #32]
   869d8:	2b01      	cmp	r3, #1
   869da:	f000 81b4 	beq.w	86d46 <_svfprintf_r+0xa02>
   869de:	2b02      	cmp	r3, #2
   869e0:	f000 8159 	beq.w	86c96 <_svfprintf_r+0x952>
   869e4:	af56      	add	r7, sp, #344	; 0x158
   869e6:	08e2      	lsrs	r2, r4, #3
   869e8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   869ec:	08e9      	lsrs	r1, r5, #3
   869ee:	f004 0307 	and.w	r3, r4, #7
   869f2:	460d      	mov	r5, r1
   869f4:	4614      	mov	r4, r2
   869f6:	3330      	adds	r3, #48	; 0x30
   869f8:	ea54 0105 	orrs.w	r1, r4, r5
   869fc:	463a      	mov	r2, r7
   869fe:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86a02:	d1f0      	bne.n	869e6 <_svfprintf_r+0x6a2>
   86a04:	9908      	ldr	r1, [sp, #32]
   86a06:	4608      	mov	r0, r1
   86a08:	07c0      	lsls	r0, r0, #31
   86a0a:	f100 82b8 	bmi.w	86f7e <_svfprintf_r+0xc3a>
   86a0e:	ab56      	add	r3, sp, #344	; 0x158
   86a10:	1bdb      	subs	r3, r3, r7
   86a12:	9107      	str	r1, [sp, #28]
   86a14:	930c      	str	r3, [sp, #48]	; 0x30
   86a16:	2300      	movs	r3, #0
   86a18:	9909      	ldr	r1, [sp, #36]	; 0x24
   86a1a:	930d      	str	r3, [sp, #52]	; 0x34
   86a1c:	9312      	str	r3, [sp, #72]	; 0x48
   86a1e:	9316      	str	r3, [sp, #88]	; 0x58
   86a20:	9310      	str	r3, [sp, #64]	; 0x40
   86a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86a24:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86a28:	428b      	cmp	r3, r1
   86a2a:	bfb8      	it	lt
   86a2c:	460b      	movlt	r3, r1
   86a2e:	9308      	str	r3, [sp, #32]
   86a30:	e6ac      	b.n	8678c <_svfprintf_r+0x448>
   86a32:	2e65      	cmp	r6, #101	; 0x65
   86a34:	f340 80d8 	ble.w	86be8 <_svfprintf_r+0x8a4>
   86a38:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86a3c:	2200      	movs	r2, #0
   86a3e:	2300      	movs	r3, #0
   86a40:	f005 ff6c 	bl	8c91c <__aeabi_dcmpeq>
   86a44:	2800      	cmp	r0, #0
   86a46:	f000 821e 	beq.w	86e86 <_svfprintf_r+0xb42>
   86a4a:	2101      	movs	r1, #1
   86a4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86a4e:	4ac5      	ldr	r2, [pc, #788]	; (86d64 <_svfprintf_r+0xa20>)
   86a50:	440b      	add	r3, r1
   86a52:	440c      	add	r4, r1
   86a54:	2b07      	cmp	r3, #7
   86a56:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86a5a:	e9c8 2100 	strd	r2, r1, [r8]
   86a5e:	f300 85bb 	bgt.w	875d8 <_svfprintf_r+0x1294>
   86a62:	f108 0808 	add.w	r8, r8, #8
   86a66:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86a6a:	4293      	cmp	r3, r2
   86a6c:	f280 8321 	bge.w	870b2 <_svfprintf_r+0xd6e>
   86a70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86a72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86a74:	3301      	adds	r3, #1
   86a76:	9918      	ldr	r1, [sp, #96]	; 0x60
   86a78:	4414      	add	r4, r2
   86a7a:	2b07      	cmp	r3, #7
   86a7c:	e9c8 1200 	strd	r1, r2, [r8]
   86a80:	942c      	str	r4, [sp, #176]	; 0xb0
   86a82:	932b      	str	r3, [sp, #172]	; 0xac
   86a84:	f300 8448 	bgt.w	87318 <_svfprintf_r+0xfd4>
   86a88:	f108 0808 	add.w	r8, r8, #8
   86a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86a8e:	1e5d      	subs	r5, r3, #1
   86a90:	2d00      	cmp	r5, #0
   86a92:	f77f ae06 	ble.w	866a2 <_svfprintf_r+0x35e>
   86a96:	2d10      	cmp	r5, #16
   86a98:	f340 85c7 	ble.w	8762a <_svfprintf_r+0x12e6>
   86a9c:	4fb2      	ldr	r7, [pc, #712]	; (86d68 <_svfprintf_r+0xa24>)
   86a9e:	2610      	movs	r6, #16
   86aa0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86aa2:	970f      	str	r7, [sp, #60]	; 0x3c
   86aa4:	e005      	b.n	86ab2 <_svfprintf_r+0x76e>
   86aa6:	f108 0808 	add.w	r8, r8, #8
   86aaa:	3d10      	subs	r5, #16
   86aac:	2d10      	cmp	r5, #16
   86aae:	f340 85bf 	ble.w	87630 <_svfprintf_r+0x12ec>
   86ab2:	3301      	adds	r3, #1
   86ab4:	3410      	adds	r4, #16
   86ab6:	2b07      	cmp	r3, #7
   86ab8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86abc:	e9c8 7600 	strd	r7, r6, [r8]
   86ac0:	ddf1      	ble.n	86aa6 <_svfprintf_r+0x762>
   86ac2:	4651      	mov	r1, sl
   86ac4:	4648      	mov	r0, r9
   86ac6:	aa2a      	add	r2, sp, #168	; 0xa8
   86ac8:	f005 f826 	bl	8bb18 <__ssprint_r>
   86acc:	2800      	cmp	r0, #0
   86ace:	f040 8081 	bne.w	86bd4 <_svfprintf_r+0x890>
   86ad2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86ad6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ada:	e7e6      	b.n	86aaa <_svfprintf_r+0x766>
   86adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86ade:	9a08      	ldr	r2, [sp, #32]
   86ae0:	1a9d      	subs	r5, r3, r2
   86ae2:	2d00      	cmp	r5, #0
   86ae4:	f77f adc6 	ble.w	86674 <_svfprintf_r+0x330>
   86ae8:	2d10      	cmp	r5, #16
   86aea:	f341 8069 	ble.w	87bc0 <_svfprintf_r+0x187c>
   86aee:	489e      	ldr	r0, [pc, #632]	; (86d68 <_svfprintf_r+0xa24>)
   86af0:	4621      	mov	r1, r4
   86af2:	2310      	movs	r3, #16
   86af4:	4604      	mov	r4, r0
   86af6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86af8:	900f      	str	r0, [sp, #60]	; 0x3c
   86afa:	e004      	b.n	86b06 <_svfprintf_r+0x7c2>
   86afc:	3d10      	subs	r5, #16
   86afe:	2d10      	cmp	r5, #16
   86b00:	f108 0808 	add.w	r8, r8, #8
   86b04:	dd17      	ble.n	86b36 <_svfprintf_r+0x7f2>
   86b06:	3201      	adds	r2, #1
   86b08:	3110      	adds	r1, #16
   86b0a:	2a07      	cmp	r2, #7
   86b0c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86b10:	e9c8 4300 	strd	r4, r3, [r8]
   86b14:	ddf2      	ble.n	86afc <_svfprintf_r+0x7b8>
   86b16:	4651      	mov	r1, sl
   86b18:	4648      	mov	r0, r9
   86b1a:	aa2a      	add	r2, sp, #168	; 0xa8
   86b1c:	f004 fffc 	bl	8bb18 <__ssprint_r>
   86b20:	2800      	cmp	r0, #0
   86b22:	d157      	bne.n	86bd4 <_svfprintf_r+0x890>
   86b24:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86b28:	3d10      	subs	r5, #16
   86b2a:	2d10      	cmp	r5, #16
   86b2c:	f04f 0310 	mov.w	r3, #16
   86b30:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86b34:	dce7      	bgt.n	86b06 <_svfprintf_r+0x7c2>
   86b36:	460c      	mov	r4, r1
   86b38:	3201      	adds	r2, #1
   86b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86b3c:	442c      	add	r4, r5
   86b3e:	2a07      	cmp	r2, #7
   86b40:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86b44:	e9c8 3500 	strd	r3, r5, [r8]
   86b48:	f300 858a 	bgt.w	87660 <_svfprintf_r+0x131c>
   86b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86b50:	f108 0808 	add.w	r8, r8, #8
   86b54:	1a9d      	subs	r5, r3, r2
   86b56:	2d00      	cmp	r5, #0
   86b58:	f77f ad92 	ble.w	86680 <_svfprintf_r+0x33c>
   86b5c:	2d10      	cmp	r5, #16
   86b5e:	f340 860a 	ble.w	87776 <_svfprintf_r+0x1432>
   86b62:	4881      	ldr	r0, [pc, #516]	; (86d68 <_svfprintf_r+0xa24>)
   86b64:	4621      	mov	r1, r4
   86b66:	2310      	movs	r3, #16
   86b68:	4604      	mov	r4, r0
   86b6a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86b6c:	900f      	str	r0, [sp, #60]	; 0x3c
   86b6e:	e004      	b.n	86b7a <_svfprintf_r+0x836>
   86b70:	3d10      	subs	r5, #16
   86b72:	2d10      	cmp	r5, #16
   86b74:	f108 0808 	add.w	r8, r8, #8
   86b78:	dd16      	ble.n	86ba8 <_svfprintf_r+0x864>
   86b7a:	3201      	adds	r2, #1
   86b7c:	3110      	adds	r1, #16
   86b7e:	2a07      	cmp	r2, #7
   86b80:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86b84:	e9c8 4300 	strd	r4, r3, [r8]
   86b88:	ddf2      	ble.n	86b70 <_svfprintf_r+0x82c>
   86b8a:	4651      	mov	r1, sl
   86b8c:	4648      	mov	r0, r9
   86b8e:	aa2a      	add	r2, sp, #168	; 0xa8
   86b90:	f004 ffc2 	bl	8bb18 <__ssprint_r>
   86b94:	b9f0      	cbnz	r0, 86bd4 <_svfprintf_r+0x890>
   86b96:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86b9a:	3d10      	subs	r5, #16
   86b9c:	2d10      	cmp	r5, #16
   86b9e:	f04f 0310 	mov.w	r3, #16
   86ba2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ba6:	dce8      	bgt.n	86b7a <_svfprintf_r+0x836>
   86ba8:	460c      	mov	r4, r1
   86baa:	3201      	adds	r2, #1
   86bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86bae:	442c      	add	r4, r5
   86bb0:	2a07      	cmp	r2, #7
   86bb2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86bb6:	e9c8 3500 	strd	r3, r5, [r8]
   86bba:	f300 8237 	bgt.w	8702c <_svfprintf_r+0xce8>
   86bbe:	f108 0808 	add.w	r8, r8, #8
   86bc2:	e55d      	b.n	86680 <_svfprintf_r+0x33c>
   86bc4:	4651      	mov	r1, sl
   86bc6:	4648      	mov	r0, r9
   86bc8:	aa2a      	add	r2, sp, #168	; 0xa8
   86bca:	f004 ffa5 	bl	8bb18 <__ssprint_r>
   86bce:	2800      	cmp	r0, #0
   86bd0:	f43f ad7b 	beq.w	866ca <_svfprintf_r+0x386>
   86bd4:	46d3      	mov	fp, sl
   86bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86bd8:	2b00      	cmp	r3, #0
   86bda:	f43f ad8a 	beq.w	866f2 <_svfprintf_r+0x3ae>
   86bde:	4648      	mov	r0, r9
   86be0:	990d      	ldr	r1, [sp, #52]	; 0x34
   86be2:	f003 faf1 	bl	8a1c8 <_free_r>
   86be6:	e584      	b.n	866f2 <_svfprintf_r+0x3ae>
   86be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86bea:	2b01      	cmp	r3, #1
   86bec:	f340 81d5 	ble.w	86f9a <_svfprintf_r+0xc56>
   86bf0:	2301      	movs	r3, #1
   86bf2:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86bf4:	441c      	add	r4, r3
   86bf6:	441d      	add	r5, r3
   86bf8:	2d07      	cmp	r5, #7
   86bfa:	942c      	str	r4, [sp, #176]	; 0xb0
   86bfc:	f8c8 7000 	str.w	r7, [r8]
   86c00:	952b      	str	r5, [sp, #172]	; 0xac
   86c02:	f8c8 3004 	str.w	r3, [r8, #4]
   86c06:	f300 823a 	bgt.w	8707e <_svfprintf_r+0xd3a>
   86c0a:	f108 0808 	add.w	r8, r8, #8
   86c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86c10:	3501      	adds	r5, #1
   86c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86c14:	441c      	add	r4, r3
   86c16:	2d07      	cmp	r5, #7
   86c18:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c1c:	e9c8 2300 	strd	r2, r3, [r8]
   86c20:	f300 823a 	bgt.w	87098 <_svfprintf_r+0xd54>
   86c24:	f108 0808 	add.w	r8, r8, #8
   86c28:	2300      	movs	r3, #0
   86c2a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c2e:	2200      	movs	r2, #0
   86c30:	f005 fe74 	bl	8c91c <__aeabi_dcmpeq>
   86c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c36:	2800      	cmp	r0, #0
   86c38:	f040 81cd 	bne.w	86fd6 <_svfprintf_r+0xc92>
   86c3c:	3b01      	subs	r3, #1
   86c3e:	3501      	adds	r5, #1
   86c40:	3701      	adds	r7, #1
   86c42:	441c      	add	r4, r3
   86c44:	2d07      	cmp	r5, #7
   86c46:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c4a:	f8c8 7000 	str.w	r7, [r8]
   86c4e:	f8c8 3004 	str.w	r3, [r8, #4]
   86c52:	f300 84dc 	bgt.w	8760e <_svfprintf_r+0x12ca>
   86c56:	f108 0808 	add.w	r8, r8, #8
   86c5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86c5c:	3501      	adds	r5, #1
   86c5e:	4414      	add	r4, r2
   86c60:	ab26      	add	r3, sp, #152	; 0x98
   86c62:	2d07      	cmp	r5, #7
   86c64:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86c68:	e9c8 3200 	strd	r3, r2, [r8]
   86c6c:	f77f ad17 	ble.w	8669e <_svfprintf_r+0x35a>
   86c70:	4651      	mov	r1, sl
   86c72:	4648      	mov	r0, r9
   86c74:	aa2a      	add	r2, sp, #168	; 0xa8
   86c76:	f004 ff4f 	bl	8bb18 <__ssprint_r>
   86c7a:	2800      	cmp	r0, #0
   86c7c:	d1aa      	bne.n	86bd4 <_svfprintf_r+0x890>
   86c7e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86c80:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c84:	e50d      	b.n	866a2 <_svfprintf_r+0x35e>
   86c86:	2b01      	cmp	r3, #1
   86c88:	f000 87ca 	beq.w	87c20 <_svfprintf_r+0x18dc>
   86c8c:	2b02      	cmp	r3, #2
   86c8e:	9b07      	ldr	r3, [sp, #28]
   86c90:	9308      	str	r3, [sp, #32]
   86c92:	f47f aea7 	bne.w	869e4 <_svfprintf_r+0x6a0>
   86c96:	9819      	ldr	r0, [sp, #100]	; 0x64
   86c98:	af56      	add	r7, sp, #344	; 0x158
   86c9a:	0923      	lsrs	r3, r4, #4
   86c9c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86ca0:	0929      	lsrs	r1, r5, #4
   86ca2:	f004 020f 	and.w	r2, r4, #15
   86ca6:	460d      	mov	r5, r1
   86ca8:	461c      	mov	r4, r3
   86caa:	5c83      	ldrb	r3, [r0, r2]
   86cac:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86cb0:	ea54 0305 	orrs.w	r3, r4, r5
   86cb4:	d1f1      	bne.n	86c9a <_svfprintf_r+0x956>
   86cb6:	9b08      	ldr	r3, [sp, #32]
   86cb8:	9307      	str	r3, [sp, #28]
   86cba:	ab56      	add	r3, sp, #344	; 0x158
   86cbc:	1bdb      	subs	r3, r3, r7
   86cbe:	930c      	str	r3, [sp, #48]	; 0x30
   86cc0:	e6a9      	b.n	86a16 <_svfprintf_r+0x6d2>
   86cc2:	2d10      	cmp	r5, #16
   86cc4:	f340 8668 	ble.w	87998 <_svfprintf_r+0x1654>
   86cc8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86ccc:	931e      	str	r3, [sp, #120]	; 0x78
   86cce:	460b      	mov	r3, r1
   86cd0:	4639      	mov	r1, r7
   86cd2:	2410      	movs	r4, #16
   86cd4:	4637      	mov	r7, r6
   86cd6:	4656      	mov	r6, sl
   86cd8:	46ca      	mov	sl, r9
   86cda:	4689      	mov	r9, r1
   86cdc:	e004      	b.n	86ce8 <_svfprintf_r+0x9a4>
   86cde:	3d10      	subs	r5, #16
   86ce0:	2d10      	cmp	r5, #16
   86ce2:	f108 0808 	add.w	r8, r8, #8
   86ce6:	dd17      	ble.n	86d18 <_svfprintf_r+0x9d4>
   86ce8:	3201      	adds	r2, #1
   86cea:	4920      	ldr	r1, [pc, #128]	; (86d6c <_svfprintf_r+0xa28>)
   86cec:	3310      	adds	r3, #16
   86cee:	2a07      	cmp	r2, #7
   86cf0:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   86cf4:	e9c8 1400 	strd	r1, r4, [r8]
   86cf8:	ddf1      	ble.n	86cde <_svfprintf_r+0x99a>
   86cfa:	4631      	mov	r1, r6
   86cfc:	4650      	mov	r0, sl
   86cfe:	aa2a      	add	r2, sp, #168	; 0xa8
   86d00:	f004 ff0a 	bl	8bb18 <__ssprint_r>
   86d04:	2800      	cmp	r0, #0
   86d06:	f040 8458 	bne.w	875ba <_svfprintf_r+0x1276>
   86d0a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   86d0e:	3d10      	subs	r5, #16
   86d10:	2d10      	cmp	r5, #16
   86d12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d16:	dce7      	bgt.n	86ce8 <_svfprintf_r+0x9a4>
   86d18:	4648      	mov	r0, r9
   86d1a:	46d1      	mov	r9, sl
   86d1c:	46b2      	mov	sl, r6
   86d1e:	463e      	mov	r6, r7
   86d20:	4607      	mov	r7, r0
   86d22:	4619      	mov	r1, r3
   86d24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86d26:	194c      	adds	r4, r1, r5
   86d28:	3201      	adds	r2, #1
   86d2a:	4910      	ldr	r1, [pc, #64]	; (86d6c <_svfprintf_r+0xa28>)
   86d2c:	2a07      	cmp	r2, #7
   86d2e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86d32:	e9c8 1500 	strd	r1, r5, [r8]
   86d36:	f300 841f 	bgt.w	87578 <_svfprintf_r+0x1234>
   86d3a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86d3e:	f108 0808 	add.w	r8, r8, #8
   86d42:	e474      	b.n	8662e <_svfprintf_r+0x2ea>
   86d44:	9308      	str	r3, [sp, #32]
   86d46:	2d00      	cmp	r5, #0
   86d48:	bf08      	it	eq
   86d4a:	2c0a      	cmpeq	r4, #10
   86d4c:	f080 83d0 	bcs.w	874f0 <_svfprintf_r+0x11ac>
   86d50:	9b08      	ldr	r3, [sp, #32]
   86d52:	3430      	adds	r4, #48	; 0x30
   86d54:	9307      	str	r3, [sp, #28]
   86d56:	2301      	movs	r3, #1
   86d58:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   86d5c:	930c      	str	r3, [sp, #48]	; 0x30
   86d5e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86d62:	e658      	b.n	86a16 <_svfprintf_r+0x6d2>
   86d64:	0008cc18 	.word	0x0008cc18
   86d68:	0008cc2c 	.word	0x0008cc2c
   86d6c:	0008cc1c 	.word	0x0008cc1c
   86d70:	4651      	mov	r1, sl
   86d72:	4648      	mov	r0, r9
   86d74:	aa2a      	add	r2, sp, #168	; 0xa8
   86d76:	f004 fecf 	bl	8bb18 <__ssprint_r>
   86d7a:	2800      	cmp	r0, #0
   86d7c:	f47f af2a 	bne.w	86bd4 <_svfprintf_r+0x890>
   86d80:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86d82:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86d84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d88:	2a00      	cmp	r2, #0
   86d8a:	f040 847f 	bne.w	8768c <_svfprintf_r+0x1348>
   86d8e:	9b07      	ldr	r3, [sp, #28]
   86d90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86d92:	f003 0301 	and.w	r3, r3, #1
   86d96:	4313      	orrs	r3, r2
   86d98:	f43f ac83 	beq.w	866a2 <_svfprintf_r+0x35e>
   86d9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86d9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86da0:	3301      	adds	r3, #1
   86da2:	9918      	ldr	r1, [sp, #96]	; 0x60
   86da4:	4414      	add	r4, r2
   86da6:	2b07      	cmp	r3, #7
   86da8:	e9c8 1200 	strd	r1, r2, [r8]
   86dac:	942c      	str	r4, [sp, #176]	; 0xb0
   86dae:	932b      	str	r3, [sp, #172]	; 0xac
   86db0:	f300 8524 	bgt.w	877fc <_svfprintf_r+0x14b8>
   86db4:	f108 0808 	add.w	r8, r8, #8
   86db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86dba:	3301      	adds	r3, #1
   86dbc:	4414      	add	r4, r2
   86dbe:	2b07      	cmp	r3, #7
   86dc0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86dc4:	e9c8 7200 	strd	r7, r2, [r8]
   86dc8:	f77f ac69 	ble.w	8669e <_svfprintf_r+0x35a>
   86dcc:	4651      	mov	r1, sl
   86dce:	4648      	mov	r0, r9
   86dd0:	aa2a      	add	r2, sp, #168	; 0xa8
   86dd2:	f004 fea1 	bl	8bb18 <__ssprint_r>
   86dd6:	2800      	cmp	r0, #0
   86dd8:	f47f aefc 	bne.w	86bd4 <_svfprintf_r+0x890>
   86ddc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86dde:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86de2:	e45e      	b.n	866a2 <_svfprintf_r+0x35e>
   86de4:	4651      	mov	r1, sl
   86de6:	4648      	mov	r0, r9
   86de8:	aa2a      	add	r2, sp, #168	; 0xa8
   86dea:	931e      	str	r3, [sp, #120]	; 0x78
   86dec:	f004 fe94 	bl	8bb18 <__ssprint_r>
   86df0:	2800      	cmp	r0, #0
   86df2:	f47f aeef 	bne.w	86bd4 <_svfprintf_r+0x890>
   86df6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86df8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86dfa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86dfe:	e426      	b.n	8664e <_svfprintf_r+0x30a>
   86e00:	4651      	mov	r1, sl
   86e02:	4648      	mov	r0, r9
   86e04:	aa2a      	add	r2, sp, #168	; 0xa8
   86e06:	f004 fe87 	bl	8bb18 <__ssprint_r>
   86e0a:	2800      	cmp	r0, #0
   86e0c:	f47f aee2 	bne.w	86bd4 <_svfprintf_r+0x890>
   86e10:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e16:	e429      	b.n	8666c <_svfprintf_r+0x328>
   86e18:	2d10      	cmp	r5, #16
   86e1a:	f340 86be 	ble.w	87b9a <_svfprintf_r+0x1856>
   86e1e:	2610      	movs	r6, #16
   86e20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86e22:	e004      	b.n	86e2e <_svfprintf_r+0xaea>
   86e24:	3d10      	subs	r5, #16
   86e26:	2d10      	cmp	r5, #16
   86e28:	f108 0808 	add.w	r8, r8, #8
   86e2c:	dd17      	ble.n	86e5e <_svfprintf_r+0xb1a>
   86e2e:	3301      	adds	r3, #1
   86e30:	4aad      	ldr	r2, [pc, #692]	; (870e8 <_svfprintf_r+0xda4>)
   86e32:	3410      	adds	r4, #16
   86e34:	2b07      	cmp	r3, #7
   86e36:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86e3a:	e9c8 2600 	strd	r2, r6, [r8]
   86e3e:	ddf1      	ble.n	86e24 <_svfprintf_r+0xae0>
   86e40:	4651      	mov	r1, sl
   86e42:	4648      	mov	r0, r9
   86e44:	aa2a      	add	r2, sp, #168	; 0xa8
   86e46:	f004 fe67 	bl	8bb18 <__ssprint_r>
   86e4a:	2800      	cmp	r0, #0
   86e4c:	f47f aec2 	bne.w	86bd4 <_svfprintf_r+0x890>
   86e50:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86e54:	3d10      	subs	r5, #16
   86e56:	2d10      	cmp	r5, #16
   86e58:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e5c:	dce7      	bgt.n	86e2e <_svfprintf_r+0xaea>
   86e5e:	3301      	adds	r3, #1
   86e60:	4aa1      	ldr	r2, [pc, #644]	; (870e8 <_svfprintf_r+0xda4>)
   86e62:	442c      	add	r4, r5
   86e64:	2b07      	cmp	r3, #7
   86e66:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86e6a:	e9c8 2500 	strd	r2, r5, [r8]
   86e6e:	f77f ac21 	ble.w	866b4 <_svfprintf_r+0x370>
   86e72:	4651      	mov	r1, sl
   86e74:	4648      	mov	r0, r9
   86e76:	aa2a      	add	r2, sp, #168	; 0xa8
   86e78:	f004 fe4e 	bl	8bb18 <__ssprint_r>
   86e7c:	2800      	cmp	r0, #0
   86e7e:	f47f aea9 	bne.w	86bd4 <_svfprintf_r+0x890>
   86e82:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e84:	e416      	b.n	866b4 <_svfprintf_r+0x370>
   86e86:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86e88:	2a00      	cmp	r2, #0
   86e8a:	f340 8386 	ble.w	8759a <_svfprintf_r+0x1256>
   86e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86e92:	4293      	cmp	r3, r2
   86e94:	bfa8      	it	ge
   86e96:	4613      	movge	r3, r2
   86e98:	2b00      	cmp	r3, #0
   86e9a:	461d      	mov	r5, r3
   86e9c:	dd0b      	ble.n	86eb6 <_svfprintf_r+0xb72>
   86e9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ea0:	442c      	add	r4, r5
   86ea2:	3301      	adds	r3, #1
   86ea4:	2b07      	cmp	r3, #7
   86ea6:	e9c8 7500 	strd	r7, r5, [r8]
   86eaa:	942c      	str	r4, [sp, #176]	; 0xb0
   86eac:	932b      	str	r3, [sp, #172]	; 0xac
   86eae:	f300 851e 	bgt.w	878ee <_svfprintf_r+0x15aa>
   86eb2:	f108 0808 	add.w	r8, r8, #8
   86eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86eb8:	2d00      	cmp	r5, #0
   86eba:	bfa8      	it	ge
   86ebc:	1b5b      	subge	r3, r3, r5
   86ebe:	2b00      	cmp	r3, #0
   86ec0:	461d      	mov	r5, r3
   86ec2:	f300 8256 	bgt.w	87372 <_svfprintf_r+0x102e>
   86ec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86ec8:	443b      	add	r3, r7
   86eca:	461e      	mov	r6, r3
   86ecc:	9b07      	ldr	r3, [sp, #28]
   86ece:	055b      	lsls	r3, r3, #21
   86ed0:	f100 8277 	bmi.w	873c2 <_svfprintf_r+0x107e>
   86ed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86ed6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86ed8:	4293      	cmp	r3, r2
   86eda:	db03      	blt.n	86ee4 <_svfprintf_r+0xba0>
   86edc:	9a07      	ldr	r2, [sp, #28]
   86ede:	07d5      	lsls	r5, r2, #31
   86ee0:	f140 847a 	bpl.w	877d8 <_svfprintf_r+0x1494>
   86ee4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86ee6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86ee8:	3201      	adds	r2, #1
   86eea:	9818      	ldr	r0, [sp, #96]	; 0x60
   86eec:	440c      	add	r4, r1
   86eee:	2a07      	cmp	r2, #7
   86ef0:	e9c8 0100 	strd	r0, r1, [r8]
   86ef4:	942c      	str	r4, [sp, #176]	; 0xb0
   86ef6:	922b      	str	r2, [sp, #172]	; 0xac
   86ef8:	f300 8506 	bgt.w	87908 <_svfprintf_r+0x15c4>
   86efc:	f108 0808 	add.w	r8, r8, #8
   86f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f02:	18bd      	adds	r5, r7, r2
   86f04:	1bad      	subs	r5, r5, r6
   86f06:	1ad3      	subs	r3, r2, r3
   86f08:	429d      	cmp	r5, r3
   86f0a:	bfa8      	it	ge
   86f0c:	461d      	movge	r5, r3
   86f0e:	2d00      	cmp	r5, #0
   86f10:	dd0b      	ble.n	86f2a <_svfprintf_r+0xbe6>
   86f12:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86f14:	442c      	add	r4, r5
   86f16:	3201      	adds	r2, #1
   86f18:	2a07      	cmp	r2, #7
   86f1a:	e9c8 6500 	strd	r6, r5, [r8]
   86f1e:	942c      	str	r4, [sp, #176]	; 0xb0
   86f20:	922b      	str	r2, [sp, #172]	; 0xac
   86f22:	f300 855f 	bgt.w	879e4 <_svfprintf_r+0x16a0>
   86f26:	f108 0808 	add.w	r8, r8, #8
   86f2a:	2d00      	cmp	r5, #0
   86f2c:	bfb4      	ite	lt
   86f2e:	461d      	movlt	r5, r3
   86f30:	1b5d      	subge	r5, r3, r5
   86f32:	2d00      	cmp	r5, #0
   86f34:	f77f abb5 	ble.w	866a2 <_svfprintf_r+0x35e>
   86f38:	2d10      	cmp	r5, #16
   86f3a:	f340 8376 	ble.w	8762a <_svfprintf_r+0x12e6>
   86f3e:	4f6b      	ldr	r7, [pc, #428]	; (870ec <_svfprintf_r+0xda8>)
   86f40:	2610      	movs	r6, #16
   86f42:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f44:	970f      	str	r7, [sp, #60]	; 0x3c
   86f46:	e005      	b.n	86f54 <_svfprintf_r+0xc10>
   86f48:	f108 0808 	add.w	r8, r8, #8
   86f4c:	3d10      	subs	r5, #16
   86f4e:	2d10      	cmp	r5, #16
   86f50:	f340 836e 	ble.w	87630 <_svfprintf_r+0x12ec>
   86f54:	3301      	adds	r3, #1
   86f56:	3410      	adds	r4, #16
   86f58:	2b07      	cmp	r3, #7
   86f5a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86f5e:	e9c8 7600 	strd	r7, r6, [r8]
   86f62:	ddf1      	ble.n	86f48 <_svfprintf_r+0xc04>
   86f64:	4651      	mov	r1, sl
   86f66:	4648      	mov	r0, r9
   86f68:	aa2a      	add	r2, sp, #168	; 0xa8
   86f6a:	f004 fdd5 	bl	8bb18 <__ssprint_r>
   86f6e:	2800      	cmp	r0, #0
   86f70:	f47f ae30 	bne.w	86bd4 <_svfprintf_r+0x890>
   86f74:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86f78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f7c:	e7e6      	b.n	86f4c <_svfprintf_r+0xc08>
   86f7e:	2b30      	cmp	r3, #48	; 0x30
   86f80:	f43f ae99 	beq.w	86cb6 <_svfprintf_r+0x972>
   86f84:	2330      	movs	r3, #48	; 0x30
   86f86:	3a02      	subs	r2, #2
   86f88:	f807 3c01 	strb.w	r3, [r7, #-1]
   86f8c:	9908      	ldr	r1, [sp, #32]
   86f8e:	ab56      	add	r3, sp, #344	; 0x158
   86f90:	1a9b      	subs	r3, r3, r2
   86f92:	4617      	mov	r7, r2
   86f94:	9107      	str	r1, [sp, #28]
   86f96:	930c      	str	r3, [sp, #48]	; 0x30
   86f98:	e53d      	b.n	86a16 <_svfprintf_r+0x6d2>
   86f9a:	9b07      	ldr	r3, [sp, #28]
   86f9c:	07d8      	lsls	r0, r3, #31
   86f9e:	f53f ae27 	bmi.w	86bf0 <_svfprintf_r+0x8ac>
   86fa2:	2301      	movs	r3, #1
   86fa4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86fa6:	441c      	add	r4, r3
   86fa8:	441d      	add	r5, r3
   86faa:	2d07      	cmp	r5, #7
   86fac:	942c      	str	r4, [sp, #176]	; 0xb0
   86fae:	f8c8 7000 	str.w	r7, [r8]
   86fb2:	952b      	str	r5, [sp, #172]	; 0xac
   86fb4:	f8c8 3004 	str.w	r3, [r8, #4]
   86fb8:	f77f ae4d 	ble.w	86c56 <_svfprintf_r+0x912>
   86fbc:	4651      	mov	r1, sl
   86fbe:	4648      	mov	r0, r9
   86fc0:	aa2a      	add	r2, sp, #168	; 0xa8
   86fc2:	f004 fda9 	bl	8bb18 <__ssprint_r>
   86fc6:	2800      	cmp	r0, #0
   86fc8:	f47f ae04 	bne.w	86bd4 <_svfprintf_r+0x890>
   86fcc:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   86fd0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86fd4:	e641      	b.n	86c5a <_svfprintf_r+0x916>
   86fd6:	1e5e      	subs	r6, r3, #1
   86fd8:	2e00      	cmp	r6, #0
   86fda:	f77f ae3e 	ble.w	86c5a <_svfprintf_r+0x916>
   86fde:	2e10      	cmp	r6, #16
   86fe0:	f340 871e 	ble.w	87e20 <_svfprintf_r+0x1adc>
   86fe4:	4b41      	ldr	r3, [pc, #260]	; (870ec <_svfprintf_r+0xda8>)
   86fe6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   86fea:	2710      	movs	r7, #16
   86fec:	46d3      	mov	fp, sl
   86fee:	930f      	str	r3, [sp, #60]	; 0x3c
   86ff0:	46ca      	mov	sl, r9
   86ff2:	4699      	mov	r9, r3
   86ff4:	e005      	b.n	87002 <_svfprintf_r+0xcbe>
   86ff6:	f108 0808 	add.w	r8, r8, #8
   86ffa:	3e10      	subs	r6, #16
   86ffc:	2e10      	cmp	r6, #16
   86ffe:	f340 82f8 	ble.w	875f2 <_svfprintf_r+0x12ae>
   87002:	3501      	adds	r5, #1
   87004:	3410      	adds	r4, #16
   87006:	2d07      	cmp	r5, #7
   87008:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8700c:	e9c8 9700 	strd	r9, r7, [r8]
   87010:	ddf1      	ble.n	86ff6 <_svfprintf_r+0xcb2>
   87012:	4659      	mov	r1, fp
   87014:	4650      	mov	r0, sl
   87016:	aa2a      	add	r2, sp, #168	; 0xa8
   87018:	f004 fd7e 	bl	8bb18 <__ssprint_r>
   8701c:	2800      	cmp	r0, #0
   8701e:	f040 85cc 	bne.w	87bba <_svfprintf_r+0x1876>
   87022:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87026:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8702a:	e7e6      	b.n	86ffa <_svfprintf_r+0xcb6>
   8702c:	4651      	mov	r1, sl
   8702e:	4648      	mov	r0, r9
   87030:	aa2a      	add	r2, sp, #168	; 0xa8
   87032:	f004 fd71 	bl	8bb18 <__ssprint_r>
   87036:	2800      	cmp	r0, #0
   87038:	f47f adcc 	bne.w	86bd4 <_svfprintf_r+0x890>
   8703c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8703e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87042:	f7ff bb1d 	b.w	86680 <_svfprintf_r+0x33c>
   87046:	9b08      	ldr	r3, [sp, #32]
   87048:	06dc      	lsls	r4, r3, #27
   8704a:	f100 8119 	bmi.w	87280 <_svfprintf_r+0xf3c>
   8704e:	9b08      	ldr	r3, [sp, #32]
   87050:	0658      	lsls	r0, r3, #25
   87052:	f140 8368 	bpl.w	87726 <_svfprintf_r+0x13e2>
   87056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87058:	2301      	movs	r3, #1
   8705a:	f852 4b04 	ldr.w	r4, [r2], #4
   8705e:	2500      	movs	r5, #0
   87060:	920e      	str	r2, [sp, #56]	; 0x38
   87062:	b2a4      	uxth	r4, r4
   87064:	f7ff ba7f 	b.w	86566 <_svfprintf_r+0x222>
   87068:	232d      	movs	r3, #45	; 0x2d
   8706a:	9a07      	ldr	r2, [sp, #28]
   8706c:	4264      	negs	r4, r4
   8706e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87072:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87076:	2301      	movs	r3, #1
   87078:	9208      	str	r2, [sp, #32]
   8707a:	f7ff ba77 	b.w	8656c <_svfprintf_r+0x228>
   8707e:	4651      	mov	r1, sl
   87080:	4648      	mov	r0, r9
   87082:	aa2a      	add	r2, sp, #168	; 0xa8
   87084:	f004 fd48 	bl	8bb18 <__ssprint_r>
   87088:	2800      	cmp	r0, #0
   8708a:	f47f ada3 	bne.w	86bd4 <_svfprintf_r+0x890>
   8708e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87092:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87096:	e5ba      	b.n	86c0e <_svfprintf_r+0x8ca>
   87098:	4651      	mov	r1, sl
   8709a:	4648      	mov	r0, r9
   8709c:	aa2a      	add	r2, sp, #168	; 0xa8
   8709e:	f004 fd3b 	bl	8bb18 <__ssprint_r>
   870a2:	2800      	cmp	r0, #0
   870a4:	f47f ad96 	bne.w	86bd4 <_svfprintf_r+0x890>
   870a8:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   870ac:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870b0:	e5ba      	b.n	86c28 <_svfprintf_r+0x8e4>
   870b2:	9b07      	ldr	r3, [sp, #28]
   870b4:	07da      	lsls	r2, r3, #31
   870b6:	f57f aaf4 	bpl.w	866a2 <_svfprintf_r+0x35e>
   870ba:	e4d9      	b.n	86a70 <_svfprintf_r+0x72c>
   870bc:	af56      	add	r7, sp, #344	; 0x158
   870be:	e4aa      	b.n	86a16 <_svfprintf_r+0x6d2>
   870c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870c2:	465f      	mov	r7, fp
   870c4:	f853 1b04 	ldr.w	r1, [r3], #4
   870c8:	930e      	str	r3, [sp, #56]	; 0x38
   870ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   870cc:	17dd      	asrs	r5, r3, #31
   870ce:	461a      	mov	r2, r3
   870d0:	462b      	mov	r3, r5
   870d2:	e9c1 2300 	strd	r2, r3, [r1]
   870d6:	f7ff bb03 	b.w	866e0 <_svfprintf_r+0x39c>
   870da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870dc:	2500      	movs	r5, #0
   870de:	f853 4b04 	ldr.w	r4, [r3], #4
   870e2:	930e      	str	r3, [sp, #56]	; 0x38
   870e4:	f7ff ba3a 	b.w	8655c <_svfprintf_r+0x218>
   870e8:	0008cc1c 	.word	0x0008cc1c
   870ec:	0008cc2c 	.word	0x0008cc2c
   870f0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   870f4:	460b      	mov	r3, r1
   870f6:	4602      	mov	r2, r0
   870f8:	f005 fc42 	bl	8c980 <__aeabi_dcmpun>
   870fc:	4601      	mov	r1, r0
   870fe:	2800      	cmp	r0, #0
   87100:	f040 8643 	bne.w	87d8a <_svfprintf_r+0x1a46>
   87104:	2e61      	cmp	r6, #97	; 0x61
   87106:	f000 8586 	beq.w	87c16 <_svfprintf_r+0x18d2>
   8710a:	2e41      	cmp	r6, #65	; 0x41
   8710c:	f000 847a 	beq.w	87a04 <_svfprintf_r+0x16c0>
   87110:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87112:	f026 0520 	bic.w	r5, r6, #32
   87116:	1c5a      	adds	r2, r3, #1
   87118:	9508      	str	r5, [sp, #32]
   8711a:	f000 837d 	beq.w	87818 <_svfprintf_r+0x14d4>
   8711e:	2d47      	cmp	r5, #71	; 0x47
   87120:	f000 859e 	beq.w	87c60 <_svfprintf_r+0x191c>
   87124:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87128:	9b07      	ldr	r3, [sp, #28]
   8712a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8712e:	9312      	str	r3, [sp, #72]	; 0x48
   87130:	460b      	mov	r3, r1
   87132:	2b00      	cmp	r3, #0
   87134:	f2c0 85ba 	blt.w	87cac <_svfprintf_r+0x1968>
   87138:	2200      	movs	r2, #0
   8713a:	930f      	str	r3, [sp, #60]	; 0x3c
   8713c:	921e      	str	r2, [sp, #120]	; 0x78
   8713e:	920d      	str	r2, [sp, #52]	; 0x34
   87140:	900c      	str	r0, [sp, #48]	; 0x30
   87142:	2d46      	cmp	r5, #70	; 0x46
   87144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87146:	f000 8407 	beq.w	87958 <_svfprintf_r+0x1614>
   8714a:	2d45      	cmp	r5, #69	; 0x45
   8714c:	f04f 0002 	mov.w	r0, #2
   87150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87152:	f040 83e7 	bne.w	87924 <_svfprintf_r+0x15e0>
   87156:	9909      	ldr	r1, [sp, #36]	; 0x24
   87158:	9000      	str	r0, [sp, #0]
   8715a:	1c4c      	adds	r4, r1, #1
   8715c:	a928      	add	r1, sp, #160	; 0xa0
   8715e:	a825      	add	r0, sp, #148	; 0x94
   87160:	9104      	str	r1, [sp, #16]
   87162:	a924      	add	r1, sp, #144	; 0x90
   87164:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87168:	9401      	str	r4, [sp, #4]
   8716a:	4648      	mov	r0, r9
   8716c:	f001 feb0 	bl	88ed0 <_dtoa_r>
   87170:	4607      	mov	r7, r0
   87172:	4404      	add	r4, r0
   87174:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87176:	9d07      	ldr	r5, [sp, #28]
   87178:	9307      	str	r3, [sp, #28]
   8717a:	2200      	movs	r2, #0
   8717c:	2300      	movs	r3, #0
   8717e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87180:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87182:	f005 fbcb 	bl	8c91c <__aeabi_dcmpeq>
   87186:	2800      	cmp	r0, #0
   87188:	f000 8398 	beq.w	878bc <_svfprintf_r+0x1578>
   8718c:	4623      	mov	r3, r4
   8718e:	1bdb      	subs	r3, r3, r7
   87190:	9313      	str	r3, [sp, #76]	; 0x4c
   87192:	9b08      	ldr	r3, [sp, #32]
   87194:	2b47      	cmp	r3, #71	; 0x47
   87196:	f000 835e 	beq.w	87856 <_svfprintf_r+0x1512>
   8719a:	9b08      	ldr	r3, [sp, #32]
   8719c:	2b46      	cmp	r3, #70	; 0x46
   8719e:	f000 840b 	beq.w	879b8 <_svfprintf_r+0x1674>
   871a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   871a4:	9310      	str	r3, [sp, #64]	; 0x40
   871a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   871a8:	9a08      	ldr	r2, [sp, #32]
   871aa:	3b01      	subs	r3, #1
   871ac:	2a41      	cmp	r2, #65	; 0x41
   871ae:	9324      	str	r3, [sp, #144]	; 0x90
   871b0:	f000 85ad 	beq.w	87d0e <_svfprintf_r+0x19ca>
   871b4:	2100      	movs	r1, #0
   871b6:	b2f2      	uxtb	r2, r6
   871b8:	2b00      	cmp	r3, #0
   871ba:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   871be:	bfb6      	itet	lt
   871c0:	222d      	movlt	r2, #45	; 0x2d
   871c2:	222b      	movge	r2, #43	; 0x2b
   871c4:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   871c6:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   871ca:	bfb8      	it	lt
   871cc:	f1c3 0301 	rsblt	r3, r3, #1
   871d0:	2b09      	cmp	r3, #9
   871d2:	f340 85a2 	ble.w	87d1a <_svfprintf_r+0x19d6>
   871d6:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   871da:	4672      	mov	r2, lr
   871dc:	469c      	mov	ip, r3
   871de:	4cbf      	ldr	r4, [pc, #764]	; (874dc <_svfprintf_r+0x1198>)
   871e0:	4660      	mov	r0, ip
   871e2:	4611      	mov	r1, r2
   871e4:	fb84 230c 	smull	r2, r3, r4, ip
   871e8:	ea4f 72ec 	mov.w	r2, ip, asr #31
   871ec:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   871f0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   871f4:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   871f8:	3330      	adds	r3, #48	; 0x30
   871fa:	2863      	cmp	r0, #99	; 0x63
   871fc:	4694      	mov	ip, r2
   871fe:	f801 3c01 	strb.w	r3, [r1, #-1]
   87202:	f101 32ff 	add.w	r2, r1, #4294967295
   87206:	dceb      	bgt.n	871e0 <_svfprintf_r+0xe9c>
   87208:	4663      	mov	r3, ip
   8720a:	3330      	adds	r3, #48	; 0x30
   8720c:	b2d8      	uxtb	r0, r3
   8720e:	1e8b      	subs	r3, r1, #2
   87210:	459e      	cmp	lr, r3
   87212:	f802 0c01 	strb.w	r0, [r2, #-1]
   87216:	f240 862c 	bls.w	87e72 <_svfprintf_r+0x1b2e>
   8721a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   8721e:	e001      	b.n	87224 <_svfprintf_r+0xee0>
   87220:	f812 0b01 	ldrb.w	r0, [r2], #1
   87224:	4596      	cmp	lr, r2
   87226:	f803 0b01 	strb.w	r0, [r3], #1
   8722a:	d1f9      	bne.n	87220 <_svfprintf_r+0xedc>
   8722c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87230:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87234:	1a5b      	subs	r3, r3, r1
   87236:	4413      	add	r3, r2
   87238:	aa26      	add	r2, sp, #152	; 0x98
   8723a:	1a9b      	subs	r3, r3, r2
   8723c:	931b      	str	r3, [sp, #108]	; 0x6c
   8723e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87240:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87242:	2b01      	cmp	r3, #1
   87244:	441a      	add	r2, r3
   87246:	920c      	str	r2, [sp, #48]	; 0x30
   87248:	f340 85cc 	ble.w	87de4 <_svfprintf_r+0x1aa0>
   8724c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8724e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87250:	4413      	add	r3, r2
   87252:	930c      	str	r3, [sp, #48]	; 0x30
   87254:	2300      	movs	r3, #0
   87256:	9312      	str	r3, [sp, #72]	; 0x48
   87258:	9316      	str	r3, [sp, #88]	; 0x58
   8725a:	9310      	str	r3, [sp, #64]	; 0x40
   8725c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8725e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   87262:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   87266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8726a:	9207      	str	r2, [sp, #28]
   8726c:	9308      	str	r3, [sp, #32]
   8726e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87270:	2b00      	cmp	r3, #0
   87272:	f040 8317 	bne.w	878a4 <_svfprintf_r+0x1560>
   87276:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8727a:	9309      	str	r3, [sp, #36]	; 0x24
   8727c:	f7ff ba86 	b.w	8678c <_svfprintf_r+0x448>
   87280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87282:	2301      	movs	r3, #1
   87284:	f852 4b04 	ldr.w	r4, [r2], #4
   87288:	2500      	movs	r5, #0
   8728a:	920e      	str	r2, [sp, #56]	; 0x38
   8728c:	f7ff b96b 	b.w	86566 <_svfprintf_r+0x222>
   87290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87292:	f853 4b04 	ldr.w	r4, [r3], #4
   87296:	17e5      	asrs	r5, r4, #31
   87298:	930e      	str	r3, [sp, #56]	; 0x38
   8729a:	4622      	mov	r2, r4
   8729c:	462b      	mov	r3, r5
   8729e:	f7ff b933 	b.w	86508 <_svfprintf_r+0x1c4>
   872a2:	9b07      	ldr	r3, [sp, #28]
   872a4:	9308      	str	r3, [sp, #32]
   872a6:	f7ff bae0 	b.w	8686a <_svfprintf_r+0x526>
   872aa:	4b8d      	ldr	r3, [pc, #564]	; (874e0 <_svfprintf_r+0x119c>)
   872ac:	9319      	str	r3, [sp, #100]	; 0x64
   872ae:	9b07      	ldr	r3, [sp, #28]
   872b0:	0699      	lsls	r1, r3, #26
   872b2:	f140 80fe 	bpl.w	874b2 <_svfprintf_r+0x116e>
   872b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872b8:	3307      	adds	r3, #7
   872ba:	f023 0307 	bic.w	r3, r3, #7
   872be:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   872c2:	930e      	str	r3, [sp, #56]	; 0x38
   872c4:	9a07      	ldr	r2, [sp, #28]
   872c6:	07d7      	lsls	r7, r2, #31
   872c8:	d50a      	bpl.n	872e0 <_svfprintf_r+0xf9c>
   872ca:	ea54 0305 	orrs.w	r3, r4, r5
   872ce:	d007      	beq.n	872e0 <_svfprintf_r+0xf9c>
   872d0:	2330      	movs	r3, #48	; 0x30
   872d2:	f042 0202 	orr.w	r2, r2, #2
   872d6:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   872da:	9207      	str	r2, [sp, #28]
   872dc:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   872e0:	9a07      	ldr	r2, [sp, #28]
   872e2:	2302      	movs	r3, #2
   872e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   872e8:	9208      	str	r2, [sp, #32]
   872ea:	f7ff b93c 	b.w	86566 <_svfprintf_r+0x222>
   872ee:	4b7d      	ldr	r3, [pc, #500]	; (874e4 <_svfprintf_r+0x11a0>)
   872f0:	9319      	str	r3, [sp, #100]	; 0x64
   872f2:	e7dc      	b.n	872ae <_svfprintf_r+0xf6a>
   872f4:	f043 0320 	orr.w	r3, r3, #32
   872f8:	f89b 6001 	ldrb.w	r6, [fp, #1]
   872fc:	9307      	str	r3, [sp, #28]
   872fe:	f10b 0b01 	add.w	fp, fp, #1
   87302:	f7ff b86a 	b.w	863da <_svfprintf_r+0x96>
   87306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8730a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8730e:	9307      	str	r3, [sp, #28]
   87310:	f10b 0b01 	add.w	fp, fp, #1
   87314:	f7ff b861 	b.w	863da <_svfprintf_r+0x96>
   87318:	4651      	mov	r1, sl
   8731a:	4648      	mov	r0, r9
   8731c:	aa2a      	add	r2, sp, #168	; 0xa8
   8731e:	f004 fbfb 	bl	8bb18 <__ssprint_r>
   87322:	2800      	cmp	r0, #0
   87324:	f47f ac56 	bne.w	86bd4 <_svfprintf_r+0x890>
   87328:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8732a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8732e:	f7ff bbad 	b.w	86a8c <_svfprintf_r+0x748>
   87332:	2140      	movs	r1, #64	; 0x40
   87334:	4648      	mov	r0, r9
   87336:	f003 fa79 	bl	8a82c <_malloc_r>
   8733a:	f8cb 0000 	str.w	r0, [fp]
   8733e:	f8cb 0010 	str.w	r0, [fp, #16]
   87342:	2800      	cmp	r0, #0
   87344:	f000 858d 	beq.w	87e62 <_svfprintf_r+0x1b1e>
   87348:	2340      	movs	r3, #64	; 0x40
   8734a:	f8cb 3014 	str.w	r3, [fp, #20]
   8734e:	f7ff b811 	b.w	86374 <_svfprintf_r+0x30>
   87352:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87354:	463a      	mov	r2, r7
   87356:	2b06      	cmp	r3, #6
   87358:	bf28      	it	cs
   8735a:	2306      	movcs	r3, #6
   8735c:	9709      	str	r7, [sp, #36]	; 0x24
   8735e:	9712      	str	r7, [sp, #72]	; 0x48
   87360:	9716      	str	r7, [sp, #88]	; 0x58
   87362:	9710      	str	r7, [sp, #64]	; 0x40
   87364:	970d      	str	r7, [sp, #52]	; 0x34
   87366:	9308      	str	r3, [sp, #32]
   87368:	4f5f      	ldr	r7, [pc, #380]	; (874e8 <_svfprintf_r+0x11a4>)
   8736a:	940e      	str	r4, [sp, #56]	; 0x38
   8736c:	930c      	str	r3, [sp, #48]	; 0x30
   8736e:	f7ff ba0d 	b.w	8678c <_svfprintf_r+0x448>
   87372:	2b10      	cmp	r3, #16
   87374:	f340 8558 	ble.w	87e28 <_svfprintf_r+0x1ae4>
   87378:	4651      	mov	r1, sl
   8737a:	4a5c      	ldr	r2, [pc, #368]	; (874ec <_svfprintf_r+0x11a8>)
   8737c:	46ca      	mov	sl, r9
   8737e:	9709      	str	r7, [sp, #36]	; 0x24
   87380:	2610      	movs	r6, #16
   87382:	4617      	mov	r7, r2
   87384:	4689      	mov	r9, r1
   87386:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87388:	920f      	str	r2, [sp, #60]	; 0x3c
   8738a:	e005      	b.n	87398 <_svfprintf_r+0x1054>
   8738c:	f108 0808 	add.w	r8, r8, #8
   87390:	3d10      	subs	r5, #16
   87392:	2d10      	cmp	r5, #16
   87394:	f340 81fa 	ble.w	8778c <_svfprintf_r+0x1448>
   87398:	3301      	adds	r3, #1
   8739a:	3410      	adds	r4, #16
   8739c:	2b07      	cmp	r3, #7
   8739e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   873a2:	e9c8 7600 	strd	r7, r6, [r8]
   873a6:	ddf1      	ble.n	8738c <_svfprintf_r+0x1048>
   873a8:	4649      	mov	r1, r9
   873aa:	4650      	mov	r0, sl
   873ac:	aa2a      	add	r2, sp, #168	; 0xa8
   873ae:	f004 fbb3 	bl	8bb18 <__ssprint_r>
   873b2:	2800      	cmp	r0, #0
   873b4:	f040 83fd 	bne.w	87bb2 <_svfprintf_r+0x186e>
   873b8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   873bc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   873c0:	e7e6      	b.n	87390 <_svfprintf_r+0x104c>
   873c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   873c4:	4642      	mov	r2, r8
   873c6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   873ca:	18fb      	adds	r3, r7, r3
   873cc:	9309      	str	r3, [sp, #36]	; 0x24
   873ce:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   873d2:	970f      	str	r7, [sp, #60]	; 0x3c
   873d4:	4620      	mov	r0, r4
   873d6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   873da:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   873dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   873de:	f1b8 0f00 	cmp.w	r8, #0
   873e2:	d02d      	beq.n	87440 <_svfprintf_r+0x10fc>
   873e4:	bb7b      	cbnz	r3, 87446 <_svfprintf_r+0x1102>
   873e6:	3f01      	subs	r7, #1
   873e8:	f108 38ff 	add.w	r8, r8, #4294967295
   873ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   873ee:	991c      	ldr	r1, [sp, #112]	; 0x70
   873f0:	3301      	adds	r3, #1
   873f2:	4458      	add	r0, fp
   873f4:	2b07      	cmp	r3, #7
   873f6:	e9c2 1b00 	strd	r1, fp, [r2]
   873fa:	902c      	str	r0, [sp, #176]	; 0xb0
   873fc:	932b      	str	r3, [sp, #172]	; 0xac
   873fe:	dc62      	bgt.n	874c6 <_svfprintf_r+0x1182>
   87400:	3208      	adds	r2, #8
   87402:	9909      	ldr	r1, [sp, #36]	; 0x24
   87404:	783b      	ldrb	r3, [r7, #0]
   87406:	1b8d      	subs	r5, r1, r6
   87408:	429d      	cmp	r5, r3
   8740a:	bfa8      	it	ge
   8740c:	461d      	movge	r5, r3
   8740e:	2d00      	cmp	r5, #0
   87410:	dd0b      	ble.n	8742a <_svfprintf_r+0x10e6>
   87412:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87414:	4428      	add	r0, r5
   87416:	3301      	adds	r3, #1
   87418:	2b07      	cmp	r3, #7
   8741a:	e9c2 6500 	strd	r6, r5, [r2]
   8741e:	902c      	str	r0, [sp, #176]	; 0xb0
   87420:	932b      	str	r3, [sp, #172]	; 0xac
   87422:	f300 8111 	bgt.w	87648 <_svfprintf_r+0x1304>
   87426:	783b      	ldrb	r3, [r7, #0]
   87428:	3208      	adds	r2, #8
   8742a:	2d00      	cmp	r5, #0
   8742c:	bfb4      	ite	lt
   8742e:	461d      	movlt	r5, r3
   87430:	1b5d      	subge	r5, r3, r5
   87432:	2d00      	cmp	r5, #0
   87434:	dc0b      	bgt.n	8744e <_svfprintf_r+0x110a>
   87436:	441e      	add	r6, r3
   87438:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8743a:	f1b8 0f00 	cmp.w	r8, #0
   8743e:	d1d1      	bne.n	873e4 <_svfprintf_r+0x10a0>
   87440:	2b00      	cmp	r3, #0
   87442:	f000 81f9 	beq.w	87838 <_svfprintf_r+0x14f4>
   87446:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87448:	3b01      	subs	r3, #1
   8744a:	9312      	str	r3, [sp, #72]	; 0x48
   8744c:	e7ce      	b.n	873ec <_svfprintf_r+0x10a8>
   8744e:	2d10      	cmp	r5, #16
   87450:	f340 84c5 	ble.w	87dde <_svfprintf_r+0x1a9a>
   87454:	992b      	ldr	r1, [sp, #172]	; 0xac
   87456:	2410      	movs	r4, #16
   87458:	460b      	mov	r3, r1
   8745a:	e004      	b.n	87466 <_svfprintf_r+0x1122>
   8745c:	3d10      	subs	r5, #16
   8745e:	2d10      	cmp	r5, #16
   87460:	f102 0208 	add.w	r2, r2, #8
   87464:	dd16      	ble.n	87494 <_svfprintf_r+0x1150>
   87466:	3301      	adds	r3, #1
   87468:	4920      	ldr	r1, [pc, #128]	; (874ec <_svfprintf_r+0x11a8>)
   8746a:	3010      	adds	r0, #16
   8746c:	2b07      	cmp	r3, #7
   8746e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87472:	e9c2 1400 	strd	r1, r4, [r2]
   87476:	ddf1      	ble.n	8745c <_svfprintf_r+0x1118>
   87478:	4651      	mov	r1, sl
   8747a:	4648      	mov	r0, r9
   8747c:	aa2a      	add	r2, sp, #168	; 0xa8
   8747e:	f004 fb4b 	bl	8bb18 <__ssprint_r>
   87482:	2800      	cmp	r0, #0
   87484:	f47f aba6 	bne.w	86bd4 <_svfprintf_r+0x890>
   87488:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   8748c:	3d10      	subs	r5, #16
   8748e:	2d10      	cmp	r5, #16
   87490:	aa2d      	add	r2, sp, #180	; 0xb4
   87492:	dce8      	bgt.n	87466 <_svfprintf_r+0x1122>
   87494:	4619      	mov	r1, r3
   87496:	1c4b      	adds	r3, r1, #1
   87498:	4914      	ldr	r1, [pc, #80]	; (874ec <_svfprintf_r+0x11a8>)
   8749a:	4428      	add	r0, r5
   8749c:	2b07      	cmp	r3, #7
   8749e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   874a2:	e9c2 1500 	strd	r1, r5, [r2]
   874a6:	f300 8215 	bgt.w	878d4 <_svfprintf_r+0x1590>
   874aa:	783b      	ldrb	r3, [r7, #0]
   874ac:	3208      	adds	r2, #8
   874ae:	441e      	add	r6, r3
   874b0:	e7c2      	b.n	87438 <_svfprintf_r+0x10f4>
   874b2:	9b07      	ldr	r3, [sp, #28]
   874b4:	06da      	lsls	r2, r3, #27
   874b6:	f140 8084 	bpl.w	875c2 <_svfprintf_r+0x127e>
   874ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874bc:	2500      	movs	r5, #0
   874be:	f853 4b04 	ldr.w	r4, [r3], #4
   874c2:	930e      	str	r3, [sp, #56]	; 0x38
   874c4:	e6fe      	b.n	872c4 <_svfprintf_r+0xf80>
   874c6:	4651      	mov	r1, sl
   874c8:	4648      	mov	r0, r9
   874ca:	aa2a      	add	r2, sp, #168	; 0xa8
   874cc:	f004 fb24 	bl	8bb18 <__ssprint_r>
   874d0:	2800      	cmp	r0, #0
   874d2:	f47f ab7f 	bne.w	86bd4 <_svfprintf_r+0x890>
   874d6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   874d8:	aa2d      	add	r2, sp, #180	; 0xb4
   874da:	e792      	b.n	87402 <_svfprintf_r+0x10be>
   874dc:	66666667 	.word	0x66666667
   874e0:	0008cbe8 	.word	0x0008cbe8
   874e4:	0008cbfc 	.word	0x0008cbfc
   874e8:	0008cc10 	.word	0x0008cc10
   874ec:	0008cc2c 	.word	0x0008cc2c
   874f0:	2200      	movs	r2, #0
   874f2:	9b08      	ldr	r3, [sp, #32]
   874f4:	f8cd b01c 	str.w	fp, [sp, #28]
   874f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   874fc:	960c      	str	r6, [sp, #48]	; 0x30
   874fe:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87502:	4693      	mov	fp, r2
   87504:	46ca      	mov	sl, r9
   87506:	461e      	mov	r6, r3
   87508:	46c1      	mov	r9, r8
   8750a:	af56      	add	r7, sp, #344	; 0x158
   8750c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87510:	e00b      	b.n	8752a <_svfprintf_r+0x11e6>
   87512:	220a      	movs	r2, #10
   87514:	2300      	movs	r3, #0
   87516:	4620      	mov	r0, r4
   87518:	4629      	mov	r1, r5
   8751a:	f7fe fb3d 	bl	85b98 <__aeabi_uldivmod>
   8751e:	2d00      	cmp	r5, #0
   87520:	bf08      	it	eq
   87522:	2c0a      	cmpeq	r4, #10
   87524:	d31b      	bcc.n	8755e <_svfprintf_r+0x121a>
   87526:	4604      	mov	r4, r0
   87528:	460d      	mov	r5, r1
   8752a:	220a      	movs	r2, #10
   8752c:	2300      	movs	r3, #0
   8752e:	4620      	mov	r0, r4
   87530:	4629      	mov	r1, r5
   87532:	f7fe fb31 	bl	85b98 <__aeabi_uldivmod>
   87536:	3230      	adds	r2, #48	; 0x30
   87538:	f807 2c01 	strb.w	r2, [r7, #-1]
   8753c:	f10b 0b01 	add.w	fp, fp, #1
   87540:	3f01      	subs	r7, #1
   87542:	2e00      	cmp	r6, #0
   87544:	d0e5      	beq.n	87512 <_svfprintf_r+0x11ce>
   87546:	f898 3000 	ldrb.w	r3, [r8]
   8754a:	459b      	cmp	fp, r3
   8754c:	d1e1      	bne.n	87512 <_svfprintf_r+0x11ce>
   8754e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87552:	d0de      	beq.n	87512 <_svfprintf_r+0x11ce>
   87554:	2d00      	cmp	r5, #0
   87556:	bf08      	it	eq
   87558:	2c0a      	cmpeq	r4, #10
   8755a:	f080 8128 	bcs.w	877ae <_svfprintf_r+0x146a>
   8755e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87562:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87566:	46c8      	mov	r8, r9
   87568:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8756a:	46d1      	mov	r9, sl
   8756c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87570:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87574:	f7ff bb9f 	b.w	86cb6 <_svfprintf_r+0x972>
   87578:	4651      	mov	r1, sl
   8757a:	4648      	mov	r0, r9
   8757c:	aa2a      	add	r2, sp, #168	; 0xa8
   8757e:	931e      	str	r3, [sp, #120]	; 0x78
   87580:	f004 faca 	bl	8bb18 <__ssprint_r>
   87584:	2800      	cmp	r0, #0
   87586:	f47f ab25 	bne.w	86bd4 <_svfprintf_r+0x890>
   8758a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8758e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87590:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87592:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87596:	f7ff b84a 	b.w	8662e <_svfprintf_r+0x2ea>
   8759a:	2001      	movs	r0, #1
   8759c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8759e:	49c5      	ldr	r1, [pc, #788]	; (878b4 <_svfprintf_r+0x1570>)
   875a0:	4403      	add	r3, r0
   875a2:	4404      	add	r4, r0
   875a4:	2b07      	cmp	r3, #7
   875a6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   875aa:	e9c8 1000 	strd	r1, r0, [r8]
   875ae:	f73f abdf 	bgt.w	86d70 <_svfprintf_r+0xa2c>
   875b2:	f108 0808 	add.w	r8, r8, #8
   875b6:	f7ff bbe7 	b.w	86d88 <_svfprintf_r+0xa44>
   875ba:	46d1      	mov	r9, sl
   875bc:	46b3      	mov	fp, r6
   875be:	f7ff bb0a 	b.w	86bd6 <_svfprintf_r+0x892>
   875c2:	9b07      	ldr	r3, [sp, #28]
   875c4:	065b      	lsls	r3, r3, #25
   875c6:	f140 80cb 	bpl.w	87760 <_svfprintf_r+0x141c>
   875ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875cc:	2500      	movs	r5, #0
   875ce:	f853 4b04 	ldr.w	r4, [r3], #4
   875d2:	930e      	str	r3, [sp, #56]	; 0x38
   875d4:	b2a4      	uxth	r4, r4
   875d6:	e675      	b.n	872c4 <_svfprintf_r+0xf80>
   875d8:	4651      	mov	r1, sl
   875da:	4648      	mov	r0, r9
   875dc:	aa2a      	add	r2, sp, #168	; 0xa8
   875de:	f004 fa9b 	bl	8bb18 <__ssprint_r>
   875e2:	2800      	cmp	r0, #0
   875e4:	f47f aaf6 	bne.w	86bd4 <_svfprintf_r+0x890>
   875e8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   875ea:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875ee:	f7ff ba3a 	b.w	86a66 <_svfprintf_r+0x722>
   875f2:	46d1      	mov	r9, sl
   875f4:	46da      	mov	sl, fp
   875f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   875fa:	3501      	adds	r5, #1
   875fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   875fe:	4434      	add	r4, r6
   87600:	2d07      	cmp	r5, #7
   87602:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87606:	e9c8 3600 	strd	r3, r6, [r8]
   8760a:	f77f ab24 	ble.w	86c56 <_svfprintf_r+0x912>
   8760e:	4651      	mov	r1, sl
   87610:	4648      	mov	r0, r9
   87612:	aa2a      	add	r2, sp, #168	; 0xa8
   87614:	f004 fa80 	bl	8bb18 <__ssprint_r>
   87618:	2800      	cmp	r0, #0
   8761a:	f47f aadb 	bne.w	86bd4 <_svfprintf_r+0x890>
   8761e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87622:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87626:	f7ff bb18 	b.w	86c5a <_svfprintf_r+0x916>
   8762a:	4aa3      	ldr	r2, [pc, #652]	; (878b8 <_svfprintf_r+0x1574>)
   8762c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8762e:	920f      	str	r2, [sp, #60]	; 0x3c
   87630:	3301      	adds	r3, #1
   87632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87634:	442c      	add	r4, r5
   87636:	2b07      	cmp	r3, #7
   87638:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8763c:	e9c8 2500 	strd	r2, r5, [r8]
   87640:	f77f a82d 	ble.w	8669e <_svfprintf_r+0x35a>
   87644:	f7ff bbc2 	b.w	86dcc <_svfprintf_r+0xa88>
   87648:	4651      	mov	r1, sl
   8764a:	4648      	mov	r0, r9
   8764c:	aa2a      	add	r2, sp, #168	; 0xa8
   8764e:	f004 fa63 	bl	8bb18 <__ssprint_r>
   87652:	2800      	cmp	r0, #0
   87654:	f47f aabe 	bne.w	86bd4 <_svfprintf_r+0x890>
   87658:	783b      	ldrb	r3, [r7, #0]
   8765a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8765c:	aa2d      	add	r2, sp, #180	; 0xb4
   8765e:	e6e4      	b.n	8742a <_svfprintf_r+0x10e6>
   87660:	4651      	mov	r1, sl
   87662:	4648      	mov	r0, r9
   87664:	aa2a      	add	r2, sp, #168	; 0xa8
   87666:	f004 fa57 	bl	8bb18 <__ssprint_r>
   8766a:	2800      	cmp	r0, #0
   8766c:	f47f aab2 	bne.w	86bd4 <_svfprintf_r+0x890>
   87670:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87672:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87676:	f7fe bffd 	b.w	86674 <_svfprintf_r+0x330>
   8767a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8767c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8767e:	f853 2b04 	ldr.w	r2, [r3], #4
   87682:	465f      	mov	r7, fp
   87684:	6011      	str	r1, [r2, #0]
   87686:	930e      	str	r3, [sp, #56]	; 0x38
   87688:	f7ff b82a 	b.w	866e0 <_svfprintf_r+0x39c>
   8768c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8768e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87690:	3301      	adds	r3, #1
   87692:	9818      	ldr	r0, [sp, #96]	; 0x60
   87694:	440c      	add	r4, r1
   87696:	2b07      	cmp	r3, #7
   87698:	e9c8 0100 	strd	r0, r1, [r8]
   8769c:	942c      	str	r4, [sp, #176]	; 0xb0
   8769e:	932b      	str	r3, [sp, #172]	; 0xac
   876a0:	f300 80ac 	bgt.w	877fc <_svfprintf_r+0x14b8>
   876a4:	f108 0808 	add.w	r8, r8, #8
   876a8:	2a00      	cmp	r2, #0
   876aa:	f6bf ab85 	bge.w	86db8 <_svfprintf_r+0xa74>
   876ae:	4255      	negs	r5, r2
   876b0:	3210      	adds	r2, #16
   876b2:	f280 83d3 	bge.w	87e5c <_svfprintf_r+0x1b18>
   876b6:	4651      	mov	r1, sl
   876b8:	4a7f      	ldr	r2, [pc, #508]	; (878b8 <_svfprintf_r+0x1574>)
   876ba:	46ca      	mov	sl, r9
   876bc:	9709      	str	r7, [sp, #36]	; 0x24
   876be:	2610      	movs	r6, #16
   876c0:	4617      	mov	r7, r2
   876c2:	4689      	mov	r9, r1
   876c4:	920f      	str	r2, [sp, #60]	; 0x3c
   876c6:	e005      	b.n	876d4 <_svfprintf_r+0x1390>
   876c8:	f108 0808 	add.w	r8, r8, #8
   876cc:	3d10      	subs	r5, #16
   876ce:	2d10      	cmp	r5, #16
   876d0:	f340 82aa 	ble.w	87c28 <_svfprintf_r+0x18e4>
   876d4:	3301      	adds	r3, #1
   876d6:	3410      	adds	r4, #16
   876d8:	2b07      	cmp	r3, #7
   876da:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   876de:	e9c8 7600 	strd	r7, r6, [r8]
   876e2:	ddf1      	ble.n	876c8 <_svfprintf_r+0x1384>
   876e4:	4649      	mov	r1, r9
   876e6:	4650      	mov	r0, sl
   876e8:	aa2a      	add	r2, sp, #168	; 0xa8
   876ea:	f004 fa15 	bl	8bb18 <__ssprint_r>
   876ee:	2800      	cmp	r0, #0
   876f0:	f040 825f 	bne.w	87bb2 <_svfprintf_r+0x186e>
   876f4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   876f8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876fc:	e7e6      	b.n	876cc <_svfprintf_r+0x1388>
   876fe:	4638      	mov	r0, r7
   87700:	f7fe fdbe 	bl	86280 <strlen>
   87704:	462b      	mov	r3, r5
   87706:	4602      	mov	r2, r0
   87708:	9509      	str	r5, [sp, #36]	; 0x24
   8770a:	f7ff b894 	b.w	86836 <_svfprintf_r+0x4f2>
   8770e:	9b07      	ldr	r3, [sp, #28]
   87710:	2500      	movs	r5, #0
   87712:	f413 7f00 	tst.w	r3, #512	; 0x200
   87716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87718:	f853 4b04 	ldr.w	r4, [r3], #4
   8771c:	930e      	str	r3, [sp, #56]	; 0x38
   8771e:	bf18      	it	ne
   87720:	b2e4      	uxtbne	r4, r4
   87722:	f7fe bf1b 	b.w	8655c <_svfprintf_r+0x218>
   87726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87728:	9b08      	ldr	r3, [sp, #32]
   8772a:	f852 4b04 	ldr.w	r4, [r2], #4
   8772e:	f413 7f00 	tst.w	r3, #512	; 0x200
   87732:	f04f 0500 	mov.w	r5, #0
   87736:	f04f 0301 	mov.w	r3, #1
   8773a:	920e      	str	r2, [sp, #56]	; 0x38
   8773c:	bf18      	it	ne
   8773e:	b2e4      	uxtbne	r4, r4
   87740:	f7fe bf11 	b.w	86566 <_svfprintf_r+0x222>
   87744:	9b07      	ldr	r3, [sp, #28]
   87746:	f413 7f00 	tst.w	r3, #512	; 0x200
   8774a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8774c:	f853 4b04 	ldr.w	r4, [r3], #4
   87750:	bf18      	it	ne
   87752:	b264      	sxtbne	r4, r4
   87754:	17e5      	asrs	r5, r4, #31
   87756:	930e      	str	r3, [sp, #56]	; 0x38
   87758:	4622      	mov	r2, r4
   8775a:	462b      	mov	r3, r5
   8775c:	f7fe bed4 	b.w	86508 <_svfprintf_r+0x1c4>
   87760:	9b07      	ldr	r3, [sp, #28]
   87762:	2500      	movs	r5, #0
   87764:	f413 7f00 	tst.w	r3, #512	; 0x200
   87768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8776a:	f853 4b04 	ldr.w	r4, [r3], #4
   8776e:	930e      	str	r3, [sp, #56]	; 0x38
   87770:	bf18      	it	ne
   87772:	b2e4      	uxtbne	r4, r4
   87774:	e5a6      	b.n	872c4 <_svfprintf_r+0xf80>
   87776:	4b50      	ldr	r3, [pc, #320]	; (878b8 <_svfprintf_r+0x1574>)
   87778:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8777a:	930f      	str	r3, [sp, #60]	; 0x3c
   8777c:	f7ff ba15 	b.w	86baa <_svfprintf_r+0x866>
   87780:	232d      	movs	r3, #45	; 0x2d
   87782:	461a      	mov	r2, r3
   87784:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87788:	f7fe bfee 	b.w	86768 <_svfprintf_r+0x424>
   8778c:	464a      	mov	r2, r9
   8778e:	46d1      	mov	r9, sl
   87790:	4692      	mov	sl, r2
   87792:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87794:	3301      	adds	r3, #1
   87796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87798:	442c      	add	r4, r5
   8779a:	2b07      	cmp	r3, #7
   8779c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877a0:	e9c8 2500 	strd	r2, r5, [r8]
   877a4:	dc3b      	bgt.n	8781e <_svfprintf_r+0x14da>
   877a6:	f108 0808 	add.w	r8, r8, #8
   877aa:	f7ff bb8c 	b.w	86ec6 <_svfprintf_r+0xb82>
   877ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   877b0:	991c      	ldr	r1, [sp, #112]	; 0x70
   877b2:	1aff      	subs	r7, r7, r3
   877b4:	461a      	mov	r2, r3
   877b6:	4638      	mov	r0, r7
   877b8:	f7fe fd90 	bl	862dc <strncpy>
   877bc:	f898 3001 	ldrb.w	r3, [r8, #1]
   877c0:	b10b      	cbz	r3, 877c6 <_svfprintf_r+0x1482>
   877c2:	f108 0801 	add.w	r8, r8, #1
   877c6:	220a      	movs	r2, #10
   877c8:	2300      	movs	r3, #0
   877ca:	4620      	mov	r0, r4
   877cc:	4629      	mov	r1, r5
   877ce:	f7fe f9e3 	bl	85b98 <__aeabi_uldivmod>
   877d2:	f04f 0b00 	mov.w	fp, #0
   877d6:	e6a6      	b.n	87526 <_svfprintf_r+0x11e2>
   877d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   877da:	18bd      	adds	r5, r7, r2
   877dc:	1bad      	subs	r5, r5, r6
   877de:	1ad3      	subs	r3, r2, r3
   877e0:	429d      	cmp	r5, r3
   877e2:	bfa8      	it	ge
   877e4:	461d      	movge	r5, r3
   877e6:	f7ff bba0 	b.w	86f2a <_svfprintf_r+0xbe6>
   877ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   877ee:	f853 2b04 	ldr.w	r2, [r3], #4
   877f2:	465f      	mov	r7, fp
   877f4:	8011      	strh	r1, [r2, #0]
   877f6:	930e      	str	r3, [sp, #56]	; 0x38
   877f8:	f7fe bf72 	b.w	866e0 <_svfprintf_r+0x39c>
   877fc:	4651      	mov	r1, sl
   877fe:	4648      	mov	r0, r9
   87800:	aa2a      	add	r2, sp, #168	; 0xa8
   87802:	f004 f989 	bl	8bb18 <__ssprint_r>
   87806:	2800      	cmp	r0, #0
   87808:	f47f a9e4 	bne.w	86bd4 <_svfprintf_r+0x890>
   8780c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87810:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87812:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87816:	e747      	b.n	876a8 <_svfprintf_r+0x1364>
   87818:	2306      	movs	r3, #6
   8781a:	9309      	str	r3, [sp, #36]	; 0x24
   8781c:	e482      	b.n	87124 <_svfprintf_r+0xde0>
   8781e:	4651      	mov	r1, sl
   87820:	4648      	mov	r0, r9
   87822:	aa2a      	add	r2, sp, #168	; 0xa8
   87824:	f004 f978 	bl	8bb18 <__ssprint_r>
   87828:	2800      	cmp	r0, #0
   8782a:	f47f a9d3 	bne.w	86bd4 <_svfprintf_r+0x890>
   8782e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87830:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87834:	f7ff bb47 	b.w	86ec6 <_svfprintf_r+0xb82>
   87838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8783a:	971a      	str	r7, [sp, #104]	; 0x68
   8783c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8783e:	4690      	mov	r8, r2
   87840:	18fb      	adds	r3, r7, r3
   87842:	429e      	cmp	r6, r3
   87844:	4632      	mov	r2, r6
   87846:	bf28      	it	cs
   87848:	461a      	movcs	r2, r3
   8784a:	4604      	mov	r4, r0
   8784c:	4616      	mov	r6, r2
   8784e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87852:	f7ff bb3f 	b.w	86ed4 <_svfprintf_r+0xb90>
   87856:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87858:	1cd8      	adds	r0, r3, #3
   8785a:	9310      	str	r3, [sp, #64]	; 0x40
   8785c:	db02      	blt.n	87864 <_svfprintf_r+0x1520>
   8785e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87860:	4293      	cmp	r3, r2
   87862:	dd04      	ble.n	8786e <_svfprintf_r+0x152a>
   87864:	3e02      	subs	r6, #2
   87866:	f026 0320 	bic.w	r3, r6, #32
   8786a:	9308      	str	r3, [sp, #32]
   8786c:	e49b      	b.n	871a6 <_svfprintf_r+0xe62>
   8786e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87870:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87872:	428b      	cmp	r3, r1
   87874:	f2c0 817a 	blt.w	87b6c <_svfprintf_r+0x1828>
   87878:	07ea      	lsls	r2, r5, #31
   8787a:	f140 8283 	bpl.w	87d84 <_svfprintf_r+0x1a40>
   8787e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87880:	4413      	add	r3, r2
   87882:	930c      	str	r3, [sp, #48]	; 0x30
   87884:	056e      	lsls	r6, r5, #21
   87886:	f140 8277 	bpl.w	87d78 <_svfprintf_r+0x1a34>
   8788a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8788c:	2b00      	cmp	r3, #0
   8788e:	f300 8210 	bgt.w	87cb2 <_svfprintf_r+0x196e>
   87892:	2667      	movs	r6, #103	; 0x67
   87894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8789a:	9308      	str	r3, [sp, #32]
   8789c:	2300      	movs	r3, #0
   8789e:	9312      	str	r3, [sp, #72]	; 0x48
   878a0:	9316      	str	r3, [sp, #88]	; 0x58
   878a2:	e4e4      	b.n	8726e <_svfprintf_r+0xf2a>
   878a4:	222d      	movs	r2, #45	; 0x2d
   878a6:	2300      	movs	r3, #0
   878a8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   878ac:	9309      	str	r3, [sp, #36]	; 0x24
   878ae:	f7fe bf70 	b.w	86792 <_svfprintf_r+0x44e>
   878b2:	bf00      	nop
   878b4:	0008cc18 	.word	0x0008cc18
   878b8:	0008cc2c 	.word	0x0008cc2c
   878bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   878be:	42a3      	cmp	r3, r4
   878c0:	f4bf ac65 	bcs.w	8718e <_svfprintf_r+0xe4a>
   878c4:	2130      	movs	r1, #48	; 0x30
   878c6:	1c5a      	adds	r2, r3, #1
   878c8:	9228      	str	r2, [sp, #160]	; 0xa0
   878ca:	7019      	strb	r1, [r3, #0]
   878cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   878ce:	429c      	cmp	r4, r3
   878d0:	d8f9      	bhi.n	878c6 <_svfprintf_r+0x1582>
   878d2:	e45c      	b.n	8718e <_svfprintf_r+0xe4a>
   878d4:	4651      	mov	r1, sl
   878d6:	4648      	mov	r0, r9
   878d8:	aa2a      	add	r2, sp, #168	; 0xa8
   878da:	f004 f91d 	bl	8bb18 <__ssprint_r>
   878de:	2800      	cmp	r0, #0
   878e0:	f47f a978 	bne.w	86bd4 <_svfprintf_r+0x890>
   878e4:	783b      	ldrb	r3, [r7, #0]
   878e6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   878e8:	aa2d      	add	r2, sp, #180	; 0xb4
   878ea:	441e      	add	r6, r3
   878ec:	e5a4      	b.n	87438 <_svfprintf_r+0x10f4>
   878ee:	4651      	mov	r1, sl
   878f0:	4648      	mov	r0, r9
   878f2:	aa2a      	add	r2, sp, #168	; 0xa8
   878f4:	f004 f910 	bl	8bb18 <__ssprint_r>
   878f8:	2800      	cmp	r0, #0
   878fa:	f47f a96b 	bne.w	86bd4 <_svfprintf_r+0x890>
   878fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87900:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87904:	f7ff bad7 	b.w	86eb6 <_svfprintf_r+0xb72>
   87908:	4651      	mov	r1, sl
   8790a:	4648      	mov	r0, r9
   8790c:	aa2a      	add	r2, sp, #168	; 0xa8
   8790e:	f004 f903 	bl	8bb18 <__ssprint_r>
   87912:	2800      	cmp	r0, #0
   87914:	f47f a95e 	bne.w	86bd4 <_svfprintf_r+0x890>
   87918:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8791a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8791c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87920:	f7ff baee 	b.w	86f00 <_svfprintf_r+0xbbc>
   87924:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87926:	a928      	add	r1, sp, #160	; 0xa0
   87928:	e9cd 0400 	strd	r0, r4, [sp]
   8792c:	9104      	str	r1, [sp, #16]
   8792e:	a825      	add	r0, sp, #148	; 0x94
   87930:	a924      	add	r1, sp, #144	; 0x90
   87932:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87936:	4648      	mov	r0, r9
   87938:	f001 faca 	bl	88ed0 <_dtoa_r>
   8793c:	2d47      	cmp	r5, #71	; 0x47
   8793e:	4607      	mov	r7, r0
   87940:	d119      	bne.n	87976 <_svfprintf_r+0x1632>
   87942:	9d07      	ldr	r5, [sp, #28]
   87944:	462b      	mov	r3, r5
   87946:	07db      	lsls	r3, r3, #31
   87948:	f100 812a 	bmi.w	87ba0 <_svfprintf_r+0x185c>
   8794c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8794e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87950:	9207      	str	r2, [sp, #28]
   87952:	2247      	movs	r2, #71	; 0x47
   87954:	9208      	str	r2, [sp, #32]
   87956:	e41a      	b.n	8718e <_svfprintf_r+0xe4a>
   87958:	2003      	movs	r0, #3
   8795a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8795c:	a928      	add	r1, sp, #160	; 0xa0
   8795e:	e9cd 0400 	strd	r0, r4, [sp]
   87962:	9104      	str	r1, [sp, #16]
   87964:	a825      	add	r0, sp, #148	; 0x94
   87966:	a924      	add	r1, sp, #144	; 0x90
   87968:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8796c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8796e:	4648      	mov	r0, r9
   87970:	f001 faae 	bl	88ed0 <_dtoa_r>
   87974:	4607      	mov	r7, r0
   87976:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87978:	2d46      	cmp	r5, #70	; 0x46
   8797a:	eb07 0403 	add.w	r4, r7, r3
   8797e:	f47f abf9 	bne.w	87174 <_svfprintf_r+0xe30>
   87982:	783b      	ldrb	r3, [r7, #0]
   87984:	2b30      	cmp	r3, #48	; 0x30
   87986:	f000 821c 	beq.w	87dc2 <_svfprintf_r+0x1a7e>
   8798a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8798c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8798e:	9d07      	ldr	r5, [sp, #28]
   87990:	441c      	add	r4, r3
   87992:	9207      	str	r2, [sp, #28]
   87994:	f7ff bbf1 	b.w	8717a <_svfprintf_r+0xe36>
   87998:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8799c:	f7ff b9c3 	b.w	86d26 <_svfprintf_r+0x9e2>
   879a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879a2:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   879a6:	9308      	str	r3, [sp, #32]
   879a8:	930c      	str	r3, [sp, #48]	; 0x30
   879aa:	9009      	str	r0, [sp, #36]	; 0x24
   879ac:	940e      	str	r4, [sp, #56]	; 0x38
   879ae:	9012      	str	r0, [sp, #72]	; 0x48
   879b0:	9016      	str	r0, [sp, #88]	; 0x58
   879b2:	9010      	str	r0, [sp, #64]	; 0x40
   879b4:	f7fe beea 	b.w	8678c <_svfprintf_r+0x448>
   879b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   879ba:	2a00      	cmp	r2, #0
   879bc:	9210      	str	r2, [sp, #64]	; 0x40
   879be:	f340 821b 	ble.w	87df8 <_svfprintf_r+0x1ab4>
   879c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   879c4:	f005 0301 	and.w	r3, r5, #1
   879c8:	430b      	orrs	r3, r1
   879ca:	f040 819a 	bne.w	87d02 <_svfprintf_r+0x19be>
   879ce:	2666      	movs	r6, #102	; 0x66
   879d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   879d2:	930c      	str	r3, [sp, #48]	; 0x30
   879d4:	056a      	lsls	r2, r5, #21
   879d6:	f100 816d 	bmi.w	87cb4 <_svfprintf_r+0x1970>
   879da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   879dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   879e0:	9308      	str	r3, [sp, #32]
   879e2:	e75b      	b.n	8789c <_svfprintf_r+0x1558>
   879e4:	4651      	mov	r1, sl
   879e6:	4648      	mov	r0, r9
   879e8:	aa2a      	add	r2, sp, #168	; 0xa8
   879ea:	f004 f895 	bl	8bb18 <__ssprint_r>
   879ee:	2800      	cmp	r0, #0
   879f0:	f47f a8f0 	bne.w	86bd4 <_svfprintf_r+0x890>
   879f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   879f8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   879fa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879fe:	1ad3      	subs	r3, r2, r3
   87a00:	f7ff ba93 	b.w	86f2a <_svfprintf_r+0xbe6>
   87a04:	2330      	movs	r3, #48	; 0x30
   87a06:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87a0a:	2358      	movs	r3, #88	; 0x58
   87a0c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87a10:	9b07      	ldr	r3, [sp, #28]
   87a12:	f043 0402 	orr.w	r4, r3, #2
   87a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a18:	2b63      	cmp	r3, #99	; 0x63
   87a1a:	f300 80f2 	bgt.w	87c02 <_svfprintf_r+0x18be>
   87a1e:	2300      	movs	r3, #0
   87a20:	af3d      	add	r7, sp, #244	; 0xf4
   87a22:	930d      	str	r3, [sp, #52]	; 0x34
   87a24:	9b07      	ldr	r3, [sp, #28]
   87a26:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87a2a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87a2e:	9312      	str	r3, [sp, #72]	; 0x48
   87a30:	4613      	mov	r3, r2
   87a32:	2b00      	cmp	r3, #0
   87a34:	f026 0520 	bic.w	r5, r6, #32
   87a38:	9407      	str	r4, [sp, #28]
   87a3a:	f2c0 808d 	blt.w	87b58 <_svfprintf_r+0x1814>
   87a3e:	930f      	str	r3, [sp, #60]	; 0x3c
   87a40:	2300      	movs	r3, #0
   87a42:	9508      	str	r5, [sp, #32]
   87a44:	910c      	str	r1, [sp, #48]	; 0x30
   87a46:	931e      	str	r3, [sp, #120]	; 0x78
   87a48:	2e61      	cmp	r6, #97	; 0x61
   87a4a:	f000 817d 	beq.w	87d48 <_svfprintf_r+0x1a04>
   87a4e:	2e41      	cmp	r6, #65	; 0x41
   87a50:	f47f ab77 	bne.w	87142 <_svfprintf_r+0xdfe>
   87a54:	aa24      	add	r2, sp, #144	; 0x90
   87a56:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87a5a:	f003 ffcd 	bl	8b9f8 <frexp>
   87a5e:	2200      	movs	r2, #0
   87a60:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87a64:	f004 fcf2 	bl	8c44c <__aeabi_dmul>
   87a68:	4604      	mov	r4, r0
   87a6a:	460d      	mov	r5, r1
   87a6c:	2200      	movs	r2, #0
   87a6e:	2300      	movs	r3, #0
   87a70:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87a74:	f004 ff52 	bl	8c91c <__aeabi_dcmpeq>
   87a78:	b108      	cbz	r0, 87a7e <_svfprintf_r+0x173a>
   87a7a:	2301      	movs	r3, #1
   87a7c:	9324      	str	r3, [sp, #144]	; 0x90
   87a7e:	4bae      	ldr	r3, [pc, #696]	; (87d38 <_svfprintf_r+0x19f4>)
   87a80:	930c      	str	r3, [sp, #48]	; 0x30
   87a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a84:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87a88:	3b01      	subs	r3, #1
   87a8a:	9613      	str	r6, [sp, #76]	; 0x4c
   87a8c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   87a90:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   87a94:	9721      	str	r7, [sp, #132]	; 0x84
   87a96:	46ba      	mov	sl, r7
   87a98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87a9c:	4699      	mov	r9, r3
   87a9e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87aa2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87aa6:	e006      	b.n	87ab6 <_svfprintf_r+0x1772>
   87aa8:	2200      	movs	r2, #0
   87aaa:	2300      	movs	r3, #0
   87aac:	f004 ff36 	bl	8c91c <__aeabi_dcmpeq>
   87ab0:	f109 39ff 	add.w	r9, r9, #4294967295
   87ab4:	b9e8      	cbnz	r0, 87af2 <_svfprintf_r+0x17ae>
   87ab6:	2200      	movs	r2, #0
   87ab8:	4ba0      	ldr	r3, [pc, #640]	; (87d3c <_svfprintf_r+0x19f8>)
   87aba:	4630      	mov	r0, r6
   87abc:	4639      	mov	r1, r7
   87abe:	f004 fcc5 	bl	8c44c <__aeabi_dmul>
   87ac2:	460d      	mov	r5, r1
   87ac4:	4604      	mov	r4, r0
   87ac6:	f004 ff71 	bl	8c9ac <__aeabi_d2iz>
   87aca:	4680      	mov	r8, r0
   87acc:	f004 fc54 	bl	8c378 <__aeabi_i2d>
   87ad0:	460b      	mov	r3, r1
   87ad2:	4602      	mov	r2, r0
   87ad4:	4629      	mov	r1, r5
   87ad6:	4620      	mov	r0, r4
   87ad8:	f004 fb00 	bl	8c0dc <__aeabi_dsub>
   87adc:	f81b 3008 	ldrb.w	r3, [fp, r8]
   87ae0:	f1b9 3fff 	cmp.w	r9, #4294967295
   87ae4:	4655      	mov	r5, sl
   87ae6:	4606      	mov	r6, r0
   87ae8:	460f      	mov	r7, r1
   87aea:	464c      	mov	r4, r9
   87aec:	f80a 3b01 	strb.w	r3, [sl], #1
   87af0:	d1da      	bne.n	87aa8 <_svfprintf_r+0x1764>
   87af2:	4630      	mov	r0, r6
   87af4:	4639      	mov	r1, r7
   87af6:	2200      	movs	r2, #0
   87af8:	4b91      	ldr	r3, [pc, #580]	; (87d40 <_svfprintf_r+0x19fc>)
   87afa:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   87afe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87b00:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87b04:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   87b08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87b0c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   87b10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87b14:	9f21      	ldr	r7, [sp, #132]	; 0x84
   87b16:	f004 ff29 	bl	8c96c <__aeabi_dcmpgt>
   87b1a:	2800      	cmp	r0, #0
   87b1c:	d155      	bne.n	87bca <_svfprintf_r+0x1886>
   87b1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87b22:	2200      	movs	r2, #0
   87b24:	4b86      	ldr	r3, [pc, #536]	; (87d40 <_svfprintf_r+0x19fc>)
   87b26:	f004 fef9 	bl	8c91c <__aeabi_dcmpeq>
   87b2a:	b110      	cbz	r0, 87b32 <_svfprintf_r+0x17ee>
   87b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b2e:	07db      	lsls	r3, r3, #31
   87b30:	d44b      	bmi.n	87bca <_svfprintf_r+0x1886>
   87b32:	2c00      	cmp	r4, #0
   87b34:	db08      	blt.n	87b48 <_svfprintf_r+0x1804>
   87b36:	2230      	movs	r2, #48	; 0x30
   87b38:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87b3a:	1c63      	adds	r3, r4, #1
   87b3c:	440b      	add	r3, r1
   87b3e:	f801 2b01 	strb.w	r2, [r1], #1
   87b42:	428b      	cmp	r3, r1
   87b44:	d1fb      	bne.n	87b3e <_svfprintf_r+0x17fa>
   87b46:	910f      	str	r1, [sp, #60]	; 0x3c
   87b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87b4a:	9d07      	ldr	r5, [sp, #28]
   87b4c:	1bdb      	subs	r3, r3, r7
   87b4e:	9313      	str	r3, [sp, #76]	; 0x4c
   87b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87b52:	9307      	str	r3, [sp, #28]
   87b54:	f7ff bb1d 	b.w	87192 <_svfprintf_r+0xe4e>
   87b58:	9508      	str	r5, [sp, #32]
   87b5a:	232d      	movs	r3, #45	; 0x2d
   87b5c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87b60:	931e      	str	r3, [sp, #120]	; 0x78
   87b62:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   87b66:	910c      	str	r1, [sp, #48]	; 0x30
   87b68:	930f      	str	r3, [sp, #60]	; 0x3c
   87b6a:	e76d      	b.n	87a48 <_svfprintf_r+0x1704>
   87b6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87b70:	189a      	adds	r2, r3, r2
   87b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87b74:	920c      	str	r2, [sp, #48]	; 0x30
   87b76:	2b00      	cmp	r3, #0
   87b78:	f340 811a 	ble.w	87db0 <_svfprintf_r+0x1a6c>
   87b7c:	2667      	movs	r6, #103	; 0x67
   87b7e:	e729      	b.n	879d4 <_svfprintf_r+0x1690>
   87b80:	2300      	movs	r3, #0
   87b82:	9309      	str	r3, [sp, #36]	; 0x24
   87b84:	f7fe bc2b 	b.w	863de <_svfprintf_r+0x9a>
   87b88:	4648      	mov	r0, r9
   87b8a:	4651      	mov	r1, sl
   87b8c:	aa2a      	add	r2, sp, #168	; 0xa8
   87b8e:	f003 ffc3 	bl	8bb18 <__ssprint_r>
   87b92:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87b96:	f7fe bdae 	b.w	866f6 <_svfprintf_r+0x3b2>
   87b9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87b9c:	f7ff b95f 	b.w	86e5e <_svfprintf_r+0xb1a>
   87ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87ba2:	9d07      	ldr	r5, [sp, #28]
   87ba4:	18fc      	adds	r4, r7, r3
   87ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ba8:	9307      	str	r3, [sp, #28]
   87baa:	2347      	movs	r3, #71	; 0x47
   87bac:	9308      	str	r3, [sp, #32]
   87bae:	f7ff bae4 	b.w	8717a <_svfprintf_r+0xe36>
   87bb2:	46cb      	mov	fp, r9
   87bb4:	46d1      	mov	r9, sl
   87bb6:	f7ff b80e 	b.w	86bd6 <_svfprintf_r+0x892>
   87bba:	46d1      	mov	r9, sl
   87bbc:	f7ff b80b 	b.w	86bd6 <_svfprintf_r+0x892>
   87bc0:	4b60      	ldr	r3, [pc, #384]	; (87d44 <_svfprintf_r+0x1a00>)
   87bc2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87bc4:	930f      	str	r3, [sp, #60]	; 0x3c
   87bc6:	f7fe bfb7 	b.w	86b38 <_svfprintf_r+0x7f4>
   87bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87bcc:	990c      	ldr	r1, [sp, #48]	; 0x30
   87bce:	9528      	str	r5, [sp, #160]	; 0xa0
   87bd0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87bd4:	7bc9      	ldrb	r1, [r1, #15]
   87bd6:	428a      	cmp	r2, r1
   87bd8:	f040 812a 	bne.w	87e30 <_svfprintf_r+0x1aec>
   87bdc:	2030      	movs	r0, #48	; 0x30
   87bde:	f803 0c01 	strb.w	r0, [r3, #-1]
   87be2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87be4:	1e5a      	subs	r2, r3, #1
   87be6:	9228      	str	r2, [sp, #160]	; 0xa0
   87be8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87bec:	4291      	cmp	r1, r2
   87bee:	d0f6      	beq.n	87bde <_svfprintf_r+0x189a>
   87bf0:	2a39      	cmp	r2, #57	; 0x39
   87bf2:	bf0b      	itete	eq
   87bf4:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   87bf6:	3201      	addne	r2, #1
   87bf8:	7a92      	ldrbeq	r2, [r2, #10]
   87bfa:	b2d2      	uxtbne	r2, r2
   87bfc:	f803 2c01 	strb.w	r2, [r3, #-1]
   87c00:	e7a2      	b.n	87b48 <_svfprintf_r+0x1804>
   87c02:	4648      	mov	r0, r9
   87c04:	1c59      	adds	r1, r3, #1
   87c06:	f002 fe11 	bl	8a82c <_malloc_r>
   87c0a:	4607      	mov	r7, r0
   87c0c:	2800      	cmp	r0, #0
   87c0e:	f000 811d 	beq.w	87e4c <_svfprintf_r+0x1b08>
   87c12:	900d      	str	r0, [sp, #52]	; 0x34
   87c14:	e706      	b.n	87a24 <_svfprintf_r+0x16e0>
   87c16:	2330      	movs	r3, #48	; 0x30
   87c18:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c1c:	2378      	movs	r3, #120	; 0x78
   87c1e:	e6f5      	b.n	87a0c <_svfprintf_r+0x16c8>
   87c20:	9b07      	ldr	r3, [sp, #28]
   87c22:	9308      	str	r3, [sp, #32]
   87c24:	f7ff b894 	b.w	86d50 <_svfprintf_r+0xa0c>
   87c28:	464a      	mov	r2, r9
   87c2a:	46d1      	mov	r9, sl
   87c2c:	4692      	mov	sl, r2
   87c2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87c30:	3301      	adds	r3, #1
   87c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87c34:	442c      	add	r4, r5
   87c36:	2b07      	cmp	r3, #7
   87c38:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c3c:	e9c8 2500 	strd	r2, r5, [r8]
   87c40:	f77f a8b8 	ble.w	86db4 <_svfprintf_r+0xa70>
   87c44:	4651      	mov	r1, sl
   87c46:	4648      	mov	r0, r9
   87c48:	aa2a      	add	r2, sp, #168	; 0xa8
   87c4a:	f003 ff65 	bl	8bb18 <__ssprint_r>
   87c4e:	2800      	cmp	r0, #0
   87c50:	f47e afc0 	bne.w	86bd4 <_svfprintf_r+0x890>
   87c54:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87c58:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c5c:	f7ff b8ac 	b.w	86db8 <_svfprintf_r+0xa74>
   87c60:	2b00      	cmp	r3, #0
   87c62:	bf08      	it	eq
   87c64:	2301      	moveq	r3, #1
   87c66:	9309      	str	r3, [sp, #36]	; 0x24
   87c68:	9b07      	ldr	r3, [sp, #28]
   87c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87c6e:	9312      	str	r3, [sp, #72]	; 0x48
   87c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87c72:	2b00      	cmp	r3, #0
   87c74:	930c      	str	r3, [sp, #48]	; 0x30
   87c76:	f2c0 80bd 	blt.w	87df4 <_svfprintf_r+0x1ab0>
   87c7a:	2402      	movs	r4, #2
   87c7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87c7e:	a828      	add	r0, sp, #160	; 0xa0
   87c80:	aa25      	add	r2, sp, #148	; 0x94
   87c82:	ab24      	add	r3, sp, #144	; 0x90
   87c84:	e9cd 2003 	strd	r2, r0, [sp, #12]
   87c88:	e9cd 4500 	strd	r4, r5, [sp]
   87c8c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   87c90:	9302      	str	r3, [sp, #8]
   87c92:	4622      	mov	r2, r4
   87c94:	462b      	mov	r3, r5
   87c96:	4648      	mov	r0, r9
   87c98:	911e      	str	r1, [sp, #120]	; 0x78
   87c9a:	f001 f919 	bl	88ed0 <_dtoa_r>
   87c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87ca0:	4607      	mov	r7, r0
   87ca2:	930f      	str	r3, [sp, #60]	; 0x3c
   87ca4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87ca6:	940c      	str	r4, [sp, #48]	; 0x30
   87ca8:	930d      	str	r3, [sp, #52]	; 0x34
   87caa:	e64a      	b.n	87942 <_svfprintf_r+0x15fe>
   87cac:	2300      	movs	r3, #0
   87cae:	930d      	str	r3, [sp, #52]	; 0x34
   87cb0:	e753      	b.n	87b5a <_svfprintf_r+0x1816>
   87cb2:	2667      	movs	r6, #103	; 0x67
   87cb4:	991a      	ldr	r1, [sp, #104]	; 0x68
   87cb6:	780b      	ldrb	r3, [r1, #0]
   87cb8:	2bff      	cmp	r3, #255	; 0xff
   87cba:	f000 80de 	beq.w	87e7a <_svfprintf_r+0x1b36>
   87cbe:	2400      	movs	r4, #0
   87cc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87cc2:	4620      	mov	r0, r4
   87cc4:	e003      	b.n	87cce <_svfprintf_r+0x198a>
   87cc6:	3001      	adds	r0, #1
   87cc8:	3101      	adds	r1, #1
   87cca:	2bff      	cmp	r3, #255	; 0xff
   87ccc:	d008      	beq.n	87ce0 <_svfprintf_r+0x199c>
   87cce:	4293      	cmp	r3, r2
   87cd0:	da06      	bge.n	87ce0 <_svfprintf_r+0x199c>
   87cd2:	1ad2      	subs	r2, r2, r3
   87cd4:	784b      	ldrb	r3, [r1, #1]
   87cd6:	2b00      	cmp	r3, #0
   87cd8:	d1f5      	bne.n	87cc6 <_svfprintf_r+0x1982>
   87cda:	780b      	ldrb	r3, [r1, #0]
   87cdc:	3401      	adds	r4, #1
   87cde:	e7f4      	b.n	87cca <_svfprintf_r+0x1986>
   87ce0:	911a      	str	r1, [sp, #104]	; 0x68
   87ce2:	9210      	str	r2, [sp, #64]	; 0x40
   87ce4:	9016      	str	r0, [sp, #88]	; 0x58
   87ce6:	9412      	str	r4, [sp, #72]	; 0x48
   87ce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87cea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87cec:	990c      	ldr	r1, [sp, #48]	; 0x30
   87cee:	4413      	add	r3, r2
   87cf0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   87cf2:	fb02 1303 	mla	r3, r2, r3, r1
   87cf6:	930c      	str	r3, [sp, #48]	; 0x30
   87cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87cfc:	9308      	str	r3, [sp, #32]
   87cfe:	f7ff bab6 	b.w	8726e <_svfprintf_r+0xf2a>
   87d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87d04:	2666      	movs	r6, #102	; 0x66
   87d06:	18d3      	adds	r3, r2, r3
   87d08:	4419      	add	r1, r3
   87d0a:	910c      	str	r1, [sp, #48]	; 0x30
   87d0c:	e662      	b.n	879d4 <_svfprintf_r+0x1690>
   87d0e:	f106 020f 	add.w	r2, r6, #15
   87d12:	2101      	movs	r1, #1
   87d14:	b2d2      	uxtb	r2, r2
   87d16:	f7ff ba4f 	b.w	871b8 <_svfprintf_r+0xe74>
   87d1a:	2900      	cmp	r1, #0
   87d1c:	d167      	bne.n	87dee <_svfprintf_r+0x1aaa>
   87d1e:	2230      	movs	r2, #48	; 0x30
   87d20:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   87d24:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   87d28:	3330      	adds	r3, #48	; 0x30
   87d2a:	f802 3b01 	strb.w	r3, [r2], #1
   87d2e:	ab26      	add	r3, sp, #152	; 0x98
   87d30:	1ad3      	subs	r3, r2, r3
   87d32:	931b      	str	r3, [sp, #108]	; 0x6c
   87d34:	f7ff ba83 	b.w	8723e <_svfprintf_r+0xefa>
   87d38:	0008cbfc 	.word	0x0008cbfc
   87d3c:	40300000 	.word	0x40300000
   87d40:	3fe00000 	.word	0x3fe00000
   87d44:	0008cc2c 	.word	0x0008cc2c
   87d48:	aa24      	add	r2, sp, #144	; 0x90
   87d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
   87d4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87d4e:	f003 fe53 	bl	8b9f8 <frexp>
   87d52:	2200      	movs	r2, #0
   87d54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87d58:	f004 fb78 	bl	8c44c <__aeabi_dmul>
   87d5c:	4604      	mov	r4, r0
   87d5e:	460d      	mov	r5, r1
   87d60:	2200      	movs	r2, #0
   87d62:	2300      	movs	r3, #0
   87d64:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87d68:	f004 fdd8 	bl	8c91c <__aeabi_dcmpeq>
   87d6c:	b108      	cbz	r0, 87d72 <_svfprintf_r+0x1a2e>
   87d6e:	2301      	movs	r3, #1
   87d70:	9324      	str	r3, [sp, #144]	; 0x90
   87d72:	4b44      	ldr	r3, [pc, #272]	; (87e84 <_svfprintf_r+0x1b40>)
   87d74:	930c      	str	r3, [sp, #48]	; 0x30
   87d76:	e684      	b.n	87a82 <_svfprintf_r+0x173e>
   87d78:	2667      	movs	r6, #103	; 0x67
   87d7a:	e62e      	b.n	879da <_svfprintf_r+0x1696>
   87d7c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87d80:	f7fe bcb9 	b.w	866f6 <_svfprintf_r+0x3b2>
   87d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d86:	930c      	str	r3, [sp, #48]	; 0x30
   87d88:	e57c      	b.n	87884 <_svfprintf_r+0x1540>
   87d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87d8c:	2003      	movs	r0, #3
   87d8e:	2b00      	cmp	r3, #0
   87d90:	bfb8      	it	lt
   87d92:	232d      	movlt	r3, #45	; 0x2d
   87d94:	f04f 0100 	mov.w	r1, #0
   87d98:	bfba      	itte	lt
   87d9a:	461a      	movlt	r2, r3
   87d9c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   87da0:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   87da4:	4f38      	ldr	r7, [pc, #224]	; (87e88 <_svfprintf_r+0x1b44>)
   87da6:	4b39      	ldr	r3, [pc, #228]	; (87e8c <_svfprintf_r+0x1b48>)
   87da8:	9008      	str	r0, [sp, #32]
   87daa:	910d      	str	r1, [sp, #52]	; 0x34
   87dac:	f7fe bce2 	b.w	86774 <_svfprintf_r+0x430>
   87db0:	f1c3 0301 	rsb	r3, r3, #1
   87db4:	441a      	add	r2, r3
   87db6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87dba:	2667      	movs	r6, #103	; 0x67
   87dbc:	920c      	str	r2, [sp, #48]	; 0x30
   87dbe:	9308      	str	r3, [sp, #32]
   87dc0:	e56c      	b.n	8789c <_svfprintf_r+0x1558>
   87dc2:	2200      	movs	r2, #0
   87dc4:	2300      	movs	r3, #0
   87dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   87dc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87dca:	f004 fda7 	bl	8c91c <__aeabi_dcmpeq>
   87dce:	2800      	cmp	r0, #0
   87dd0:	f47f addb 	bne.w	8798a <_svfprintf_r+0x1646>
   87dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87dd6:	f1c3 0301 	rsb	r3, r3, #1
   87dda:	9324      	str	r3, [sp, #144]	; 0x90
   87ddc:	e5d6      	b.n	8798c <_svfprintf_r+0x1648>
   87dde:	992b      	ldr	r1, [sp, #172]	; 0xac
   87de0:	f7ff bb59 	b.w	87496 <_svfprintf_r+0x1152>
   87de4:	07e9      	lsls	r1, r5, #31
   87de6:	f57f aa35 	bpl.w	87254 <_svfprintf_r+0xf10>
   87dea:	f7ff ba2f 	b.w	8724c <_svfprintf_r+0xf08>
   87dee:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87df2:	e799      	b.n	87d28 <_svfprintf_r+0x19e4>
   87df4:	900d      	str	r0, [sp, #52]	; 0x34
   87df6:	e6b0      	b.n	87b5a <_svfprintf_r+0x1816>
   87df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87dfa:	f005 0501 	and.w	r5, r5, #1
   87dfe:	4613      	mov	r3, r2
   87e00:	432b      	orrs	r3, r5
   87e02:	d104      	bne.n	87e0e <_svfprintf_r+0x1aca>
   87e04:	2301      	movs	r3, #1
   87e06:	2666      	movs	r6, #102	; 0x66
   87e08:	9308      	str	r3, [sp, #32]
   87e0a:	930c      	str	r3, [sp, #48]	; 0x30
   87e0c:	e546      	b.n	8789c <_svfprintf_r+0x1558>
   87e0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87e10:	2666      	movs	r6, #102	; 0x66
   87e12:	3301      	adds	r3, #1
   87e14:	441a      	add	r2, r3
   87e16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87e1a:	920c      	str	r2, [sp, #48]	; 0x30
   87e1c:	9308      	str	r3, [sp, #32]
   87e1e:	e53d      	b.n	8789c <_svfprintf_r+0x1558>
   87e20:	4b1b      	ldr	r3, [pc, #108]	; (87e90 <_svfprintf_r+0x1b4c>)
   87e22:	930f      	str	r3, [sp, #60]	; 0x3c
   87e24:	f7ff bbe9 	b.w	875fa <_svfprintf_r+0x12b6>
   87e28:	4a19      	ldr	r2, [pc, #100]	; (87e90 <_svfprintf_r+0x1b4c>)
   87e2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e2c:	920f      	str	r2, [sp, #60]	; 0x3c
   87e2e:	e4b1      	b.n	87794 <_svfprintf_r+0x1450>
   87e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87e32:	e6dd      	b.n	87bf0 <_svfprintf_r+0x18ac>
   87e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e36:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87e3a:	f853 0b04 	ldr.w	r0, [r3], #4
   87e3e:	4693      	mov	fp, r2
   87e40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87e44:	9009      	str	r0, [sp, #36]	; 0x24
   87e46:	930e      	str	r3, [sp, #56]	; 0x38
   87e48:	f7fe bac7 	b.w	863da <_svfprintf_r+0x96>
   87e4c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87e54:	f8aa 300c 	strh.w	r3, [sl, #12]
   87e58:	f7fe bc4d 	b.w	866f6 <_svfprintf_r+0x3b2>
   87e5c:	4a0c      	ldr	r2, [pc, #48]	; (87e90 <_svfprintf_r+0x1b4c>)
   87e5e:	920f      	str	r2, [sp, #60]	; 0x3c
   87e60:	e6e6      	b.n	87c30 <_svfprintf_r+0x18ec>
   87e62:	230c      	movs	r3, #12
   87e64:	f04f 32ff 	mov.w	r2, #4294967295
   87e68:	f8c9 3000 	str.w	r3, [r9]
   87e6c:	920a      	str	r2, [sp, #40]	; 0x28
   87e6e:	f7fe bc49 	b.w	86704 <_svfprintf_r+0x3c0>
   87e72:	2302      	movs	r3, #2
   87e74:	931b      	str	r3, [sp, #108]	; 0x6c
   87e76:	f7ff b9e2 	b.w	8723e <_svfprintf_r+0xefa>
   87e7a:	2300      	movs	r3, #0
   87e7c:	9312      	str	r3, [sp, #72]	; 0x48
   87e7e:	9316      	str	r3, [sp, #88]	; 0x58
   87e80:	e732      	b.n	87ce8 <_svfprintf_r+0x19a4>
   87e82:	bf00      	nop
   87e84:	0008cbe8 	.word	0x0008cbe8
   87e88:	0008cbe0 	.word	0x0008cbe0
   87e8c:	0008cbe4 	.word	0x0008cbe4
   87e90:	0008cc2c 	.word	0x0008cc2c

00087e94 <__sprint_r.part.0>:
   87e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87e98:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87e9a:	4690      	mov	r8, r2
   87e9c:	049c      	lsls	r4, r3, #18
   87e9e:	d52d      	bpl.n	87efc <__sprint_r.part.0+0x68>
   87ea0:	6893      	ldr	r3, [r2, #8]
   87ea2:	6812      	ldr	r2, [r2, #0]
   87ea4:	b343      	cbz	r3, 87ef8 <__sprint_r.part.0+0x64>
   87ea6:	468b      	mov	fp, r1
   87ea8:	4606      	mov	r6, r0
   87eaa:	f102 0908 	add.w	r9, r2, #8
   87eae:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   87eb2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   87eb6:	d015      	beq.n	87ee4 <__sprint_r.part.0+0x50>
   87eb8:	2400      	movs	r4, #0
   87eba:	3d04      	subs	r5, #4
   87ebc:	e001      	b.n	87ec2 <__sprint_r.part.0+0x2e>
   87ebe:	42a7      	cmp	r7, r4
   87ec0:	d00e      	beq.n	87ee0 <__sprint_r.part.0+0x4c>
   87ec2:	465a      	mov	r2, fp
   87ec4:	4630      	mov	r0, r6
   87ec6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   87eca:	f002 f8f9 	bl	8a0c0 <_fputwc_r>
   87ece:	1c43      	adds	r3, r0, #1
   87ed0:	f104 0401 	add.w	r4, r4, #1
   87ed4:	d1f3      	bne.n	87ebe <__sprint_r.part.0+0x2a>
   87ed6:	2300      	movs	r3, #0
   87ed8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87edc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ee0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87ee4:	f02a 0a03 	bic.w	sl, sl, #3
   87ee8:	eba3 030a 	sub.w	r3, r3, sl
   87eec:	f8c8 3008 	str.w	r3, [r8, #8]
   87ef0:	f109 0908 	add.w	r9, r9, #8
   87ef4:	2b00      	cmp	r3, #0
   87ef6:	d1da      	bne.n	87eae <__sprint_r.part.0+0x1a>
   87ef8:	2000      	movs	r0, #0
   87efa:	e7ec      	b.n	87ed6 <__sprint_r.part.0+0x42>
   87efc:	f002 fa6a 	bl	8a3d4 <__sfvwrite_r>
   87f00:	2300      	movs	r3, #0
   87f02:	e9c8 3301 	strd	r3, r3, [r8, #4]
   87f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87f0a:	bf00      	nop

00087f0c <_vfiprintf_r>:
   87f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87f10:	b0bb      	sub	sp, #236	; 0xec
   87f12:	461c      	mov	r4, r3
   87f14:	4689      	mov	r9, r1
   87f16:	4690      	mov	r8, r2
   87f18:	e9cd 3004 	strd	r3, r0, [sp, #16]
   87f1c:	b118      	cbz	r0, 87f26 <_vfiprintf_r+0x1a>
   87f1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87f20:	2b00      	cmp	r3, #0
   87f22:	f000 827a 	beq.w	8841a <_vfiprintf_r+0x50e>
   87f26:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87f2a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   87f2e:	07de      	lsls	r6, r3, #31
   87f30:	b28a      	uxth	r2, r1
   87f32:	d402      	bmi.n	87f3a <_vfiprintf_r+0x2e>
   87f34:	058d      	lsls	r5, r1, #22
   87f36:	f140 851a 	bpl.w	8896e <_vfiprintf_r+0xa62>
   87f3a:	0490      	lsls	r0, r2, #18
   87f3c:	d40a      	bmi.n	87f54 <_vfiprintf_r+0x48>
   87f3e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   87f42:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   87f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87f4a:	f8a9 200c 	strh.w	r2, [r9, #12]
   87f4e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   87f52:	b292      	uxth	r2, r2
   87f54:	0711      	lsls	r1, r2, #28
   87f56:	f140 80f6 	bpl.w	88146 <_vfiprintf_r+0x23a>
   87f5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   87f5e:	2b00      	cmp	r3, #0
   87f60:	f000 80f1 	beq.w	88146 <_vfiprintf_r+0x23a>
   87f64:	f002 031a 	and.w	r3, r2, #26
   87f68:	2b0a      	cmp	r3, #10
   87f6a:	f000 80fa 	beq.w	88162 <_vfiprintf_r+0x256>
   87f6e:	2300      	movs	r3, #0
   87f70:	46cb      	mov	fp, r9
   87f72:	e9cd 3308 	strd	r3, r3, [sp, #32]
   87f76:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   87f7a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   87f7e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   87f82:	9303      	str	r3, [sp, #12]
   87f84:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   87f88:	f898 3000 	ldrb.w	r3, [r8]
   87f8c:	2b00      	cmp	r3, #0
   87f8e:	f000 81ed 	beq.w	8836c <_vfiprintf_r+0x460>
   87f92:	4644      	mov	r4, r8
   87f94:	e004      	b.n	87fa0 <_vfiprintf_r+0x94>
   87f96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87f9a:	2b00      	cmp	r3, #0
   87f9c:	f000 8127 	beq.w	881ee <_vfiprintf_r+0x2e2>
   87fa0:	2b25      	cmp	r3, #37	; 0x25
   87fa2:	d1f8      	bne.n	87f96 <_vfiprintf_r+0x8a>
   87fa4:	ebb4 0508 	subs.w	r5, r4, r8
   87fa8:	f040 8125 	bne.w	881f6 <_vfiprintf_r+0x2ea>
   87fac:	7823      	ldrb	r3, [r4, #0]
   87fae:	2b00      	cmp	r3, #0
   87fb0:	f000 81dc 	beq.w	8836c <_vfiprintf_r+0x460>
   87fb4:	f04f 0200 	mov.w	r2, #0
   87fb8:	2300      	movs	r3, #0
   87fba:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   87fbe:	f04f 32ff 	mov.w	r2, #4294967295
   87fc2:	252b      	movs	r5, #43	; 0x2b
   87fc4:	461f      	mov	r7, r3
   87fc6:	9302      	str	r3, [sp, #8]
   87fc8:	7863      	ldrb	r3, [r4, #1]
   87fca:	f104 0801 	add.w	r8, r4, #1
   87fce:	9200      	str	r2, [sp, #0]
   87fd0:	f108 0801 	add.w	r8, r8, #1
   87fd4:	f1a3 0220 	sub.w	r2, r3, #32
   87fd8:	2a5a      	cmp	r2, #90	; 0x5a
   87fda:	f200 8141 	bhi.w	88260 <_vfiprintf_r+0x354>
   87fde:	e8df f012 	tbh	[pc, r2, lsl #1]
   87fe2:	0272      	.short	0x0272
   87fe4:	013f013f 	.word	0x013f013f
   87fe8:	013f026d 	.word	0x013f026d
   87fec:	013f013f 	.word	0x013f013f
   87ff0:	013f024b 	.word	0x013f024b
   87ff4:	006a013f 	.word	0x006a013f
   87ff8:	013f0227 	.word	0x013f0227
   87ffc:	02310222 	.word	0x02310222
   88000:	022c013f 	.word	0x022c013f
   88004:	005b005b 	.word	0x005b005b
   88008:	005b005b 	.word	0x005b005b
   8800c:	005b005b 	.word	0x005b005b
   88010:	005b005b 	.word	0x005b005b
   88014:	013f005b 	.word	0x013f005b
   88018:	013f013f 	.word	0x013f013f
   8801c:	013f013f 	.word	0x013f013f
   88020:	013f013f 	.word	0x013f013f
   88024:	013f013f 	.word	0x013f013f
   88028:	007a020e 	.word	0x007a020e
   8802c:	013f013f 	.word	0x013f013f
   88030:	013f013f 	.word	0x013f013f
   88034:	013f013f 	.word	0x013f013f
   88038:	013f013f 	.word	0x013f013f
   8803c:	013f013f 	.word	0x013f013f
   88040:	013f00d7 	.word	0x013f00d7
   88044:	013f013f 	.word	0x013f013f
   88048:	013f01f2 	.word	0x013f01f2
   8804c:	013f0297 	.word	0x013f0297
   88050:	0500013f 	.word	0x0500013f
   88054:	013f013f 	.word	0x013f013f
   88058:	013f013f 	.word	0x013f013f
   8805c:	013f013f 	.word	0x013f013f
   88060:	013f013f 	.word	0x013f013f
   88064:	013f013f 	.word	0x013f013f
   88068:	007c020e 	.word	0x007c020e
   8806c:	013f013f 	.word	0x013f013f
   88070:	028a013f 	.word	0x028a013f
   88074:	0075007c 	.word	0x0075007c
   88078:	027d013f 	.word	0x027d013f
   8807c:	02b6013f 	.word	0x02b6013f
   88080:	02a600d9 	.word	0x02a600d9
   88084:	013f0075 	.word	0x013f0075
   88088:	007201f2 	.word	0x007201f2
   8808c:	013f04fe 	.word	0x013f04fe
   88090:	051c013f 	.word	0x051c013f
   88094:	0072013f 	.word	0x0072013f
   88098:	2100      	movs	r1, #0
   8809a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8809e:	f818 3b01 	ldrb.w	r3, [r8], #1
   880a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   880a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   880aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   880ae:	2a09      	cmp	r2, #9
   880b0:	d9f5      	bls.n	8809e <_vfiprintf_r+0x192>
   880b2:	9102      	str	r1, [sp, #8]
   880b4:	e78e      	b.n	87fd4 <_vfiprintf_r+0xc8>
   880b6:	9b04      	ldr	r3, [sp, #16]
   880b8:	f853 2b04 	ldr.w	r2, [r3], #4
   880bc:	2a00      	cmp	r2, #0
   880be:	9202      	str	r2, [sp, #8]
   880c0:	9304      	str	r3, [sp, #16]
   880c2:	f2c0 81ad 	blt.w	88420 <_vfiprintf_r+0x514>
   880c6:	f898 3000 	ldrb.w	r3, [r8]
   880ca:	e781      	b.n	87fd0 <_vfiprintf_r+0xc4>
   880cc:	f898 3000 	ldrb.w	r3, [r8]
   880d0:	f047 0720 	orr.w	r7, r7, #32
   880d4:	e77c      	b.n	87fd0 <_vfiprintf_r+0xc4>
   880d6:	f047 0710 	orr.w	r7, r7, #16
   880da:	06bc      	lsls	r4, r7, #26
   880dc:	f140 8158 	bpl.w	88390 <_vfiprintf_r+0x484>
   880e0:	9c04      	ldr	r4, [sp, #16]
   880e2:	3407      	adds	r4, #7
   880e4:	f024 0307 	bic.w	r3, r4, #7
   880e8:	4619      	mov	r1, r3
   880ea:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   880ee:	4614      	mov	r4, r2
   880f0:	461d      	mov	r5, r3
   880f2:	9104      	str	r1, [sp, #16]
   880f4:	2a00      	cmp	r2, #0
   880f6:	f173 0300 	sbcs.w	r3, r3, #0
   880fa:	f2c0 841e 	blt.w	8893a <_vfiprintf_r+0xa2e>
   880fe:	9b00      	ldr	r3, [sp, #0]
   88100:	3301      	adds	r3, #1
   88102:	f000 84f0 	beq.w	88ae6 <_vfiprintf_r+0xbda>
   88106:	ea54 0305 	orrs.w	r3, r4, r5
   8810a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8810e:	f000 83fc 	beq.w	8890a <_vfiprintf_r+0x9fe>
   88112:	2d00      	cmp	r5, #0
   88114:	bf08      	it	eq
   88116:	2c0a      	cmpeq	r4, #10
   88118:	f080 84a9 	bcs.w	88a6e <_vfiprintf_r+0xb62>
   8811c:	2301      	movs	r3, #1
   8811e:	464f      	mov	r7, r9
   88120:	3430      	adds	r4, #48	; 0x30
   88122:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   88126:	9301      	str	r3, [sp, #4]
   88128:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8812c:	e9dd 2100 	ldrd	r2, r1, [sp]
   88130:	428a      	cmp	r2, r1
   88132:	bfb8      	it	lt
   88134:	460a      	movlt	r2, r1
   88136:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8813a:	4615      	mov	r5, r2
   8813c:	2b00      	cmp	r3, #0
   8813e:	f000 809d 	beq.w	8827c <_vfiprintf_r+0x370>
   88142:	3501      	adds	r5, #1
   88144:	e09a      	b.n	8827c <_vfiprintf_r+0x370>
   88146:	4649      	mov	r1, r9
   88148:	9805      	ldr	r0, [sp, #20]
   8814a:	f000 fdb9 	bl	88cc0 <__swsetup_r>
   8814e:	2800      	cmp	r0, #0
   88150:	f040 854a 	bne.w	88be8 <_vfiprintf_r+0xcdc>
   88154:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   88158:	f002 031a 	and.w	r3, r2, #26
   8815c:	2b0a      	cmp	r3, #10
   8815e:	f47f af06 	bne.w	87f6e <_vfiprintf_r+0x62>
   88162:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   88166:	2b00      	cmp	r3, #0
   88168:	f6ff af01 	blt.w	87f6e <_vfiprintf_r+0x62>
   8816c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88170:	07de      	lsls	r6, r3, #31
   88172:	d402      	bmi.n	8817a <_vfiprintf_r+0x26e>
   88174:	0595      	lsls	r5, r2, #22
   88176:	f140 850e 	bpl.w	88b96 <_vfiprintf_r+0xc8a>
   8817a:	4623      	mov	r3, r4
   8817c:	4642      	mov	r2, r8
   8817e:	4649      	mov	r1, r9
   88180:	9805      	ldr	r0, [sp, #20]
   88182:	f000 fd59 	bl	88c38 <__sbprintf>
   88186:	9003      	str	r0, [sp, #12]
   88188:	9803      	ldr	r0, [sp, #12]
   8818a:	b03b      	add	sp, #236	; 0xec
   8818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88190:	f047 0710 	orr.w	r7, r7, #16
   88194:	06b8      	lsls	r0, r7, #26
   88196:	9c04      	ldr	r4, [sp, #16]
   88198:	f140 8109 	bpl.w	883ae <_vfiprintf_r+0x4a2>
   8819c:	3407      	adds	r4, #7
   8819e:	f024 0307 	bic.w	r3, r4, #7
   881a2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   881a6:	9304      	str	r3, [sp, #16]
   881a8:	2300      	movs	r3, #0
   881aa:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   881ae:	f04f 0200 	mov.w	r2, #0
   881b2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   881b6:	9a00      	ldr	r2, [sp, #0]
   881b8:	4611      	mov	r1, r2
   881ba:	3101      	adds	r1, #1
   881bc:	f000 81db 	beq.w	88576 <_vfiprintf_r+0x66a>
   881c0:	ea54 0105 	orrs.w	r1, r4, r5
   881c4:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   881c8:	f040 81d4 	bne.w	88574 <_vfiprintf_r+0x668>
   881cc:	2a00      	cmp	r2, #0
   881ce:	f040 848d 	bne.w	88aec <_vfiprintf_r+0xbe0>
   881d2:	2b00      	cmp	r3, #0
   881d4:	f040 839e 	bne.w	88914 <_vfiprintf_r+0xa08>
   881d8:	f019 0301 	ands.w	r3, r9, #1
   881dc:	9301      	str	r3, [sp, #4]
   881de:	f000 83c3 	beq.w	88968 <_vfiprintf_r+0xa5c>
   881e2:	2330      	movs	r3, #48	; 0x30
   881e4:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   881e8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   881ec:	e79e      	b.n	8812c <_vfiprintf_r+0x220>
   881ee:	ebb4 0508 	subs.w	r5, r4, r8
   881f2:	f000 80bb 	beq.w	8836c <_vfiprintf_r+0x460>
   881f6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   881fa:	3301      	adds	r3, #1
   881fc:	442a      	add	r2, r5
   881fe:	2b07      	cmp	r3, #7
   88200:	e9ca 8500 	strd	r8, r5, [sl]
   88204:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88208:	dc06      	bgt.n	88218 <_vfiprintf_r+0x30c>
   8820a:	f10a 0a08 	add.w	sl, sl, #8
   8820e:	9a03      	ldr	r2, [sp, #12]
   88210:	7823      	ldrb	r3, [r4, #0]
   88212:	442a      	add	r2, r5
   88214:	9203      	str	r2, [sp, #12]
   88216:	e6ca      	b.n	87fae <_vfiprintf_r+0xa2>
   88218:	2a00      	cmp	r2, #0
   8821a:	f000 8372 	beq.w	88902 <_vfiprintf_r+0x9f6>
   8821e:	4659      	mov	r1, fp
   88220:	9805      	ldr	r0, [sp, #20]
   88222:	aa0e      	add	r2, sp, #56	; 0x38
   88224:	f7ff fe36 	bl	87e94 <__sprint_r.part.0>
   88228:	b950      	cbnz	r0, 88240 <_vfiprintf_r+0x334>
   8822a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8822e:	e7ee      	b.n	8820e <_vfiprintf_r+0x302>
   88230:	4659      	mov	r1, fp
   88232:	9805      	ldr	r0, [sp, #20]
   88234:	aa0e      	add	r2, sp, #56	; 0x38
   88236:	f7ff fe2d 	bl	87e94 <__sprint_r.part.0>
   8823a:	2800      	cmp	r0, #0
   8823c:	f000 808d 	beq.w	8835a <_vfiprintf_r+0x44e>
   88240:	46d9      	mov	r9, fp
   88242:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88246:	f013 0f01 	tst.w	r3, #1
   8824a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8824e:	f000 8095 	beq.w	8837c <_vfiprintf_r+0x470>
   88252:	065b      	lsls	r3, r3, #25
   88254:	f100 84d4 	bmi.w	88c00 <_vfiprintf_r+0xcf4>
   88258:	9803      	ldr	r0, [sp, #12]
   8825a:	b03b      	add	sp, #236	; 0xec
   8825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88260:	2b00      	cmp	r3, #0
   88262:	f000 8083 	beq.w	8836c <_vfiprintf_r+0x460>
   88266:	2501      	movs	r5, #1
   88268:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8826c:	f04f 0300 	mov.w	r3, #0
   88270:	9501      	str	r5, [sp, #4]
   88272:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88276:	ae21      	add	r6, sp, #132	; 0x84
   88278:	2300      	movs	r3, #0
   8827a:	9300      	str	r3, [sp, #0]
   8827c:	f017 0302 	ands.w	r3, r7, #2
   88280:	9307      	str	r3, [sp, #28]
   88282:	bf18      	it	ne
   88284:	3502      	addne	r5, #2
   88286:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8828a:	9306      	str	r3, [sp, #24]
   8828c:	d104      	bne.n	88298 <_vfiprintf_r+0x38c>
   8828e:	9b02      	ldr	r3, [sp, #8]
   88290:	1b5c      	subs	r4, r3, r5
   88292:	2c00      	cmp	r4, #0
   88294:	f300 8274 	bgt.w	88780 <_vfiprintf_r+0x874>
   88298:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8829c:	1c48      	adds	r0, r1, #1
   8829e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   882a2:	b174      	cbz	r4, 882c2 <_vfiprintf_r+0x3b6>
   882a4:	2101      	movs	r1, #1
   882a6:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   882aa:	440a      	add	r2, r1
   882ac:	2807      	cmp	r0, #7
   882ae:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   882b2:	e9ca 4100 	strd	r4, r1, [sl]
   882b6:	f300 8246 	bgt.w	88746 <_vfiprintf_r+0x83a>
   882ba:	4601      	mov	r1, r0
   882bc:	f10a 0a08 	add.w	sl, sl, #8
   882c0:	3001      	adds	r0, #1
   882c2:	9b07      	ldr	r3, [sp, #28]
   882c4:	b1c3      	cbz	r3, 882f8 <_vfiprintf_r+0x3ec>
   882c6:	2102      	movs	r1, #2
   882c8:	ab0d      	add	r3, sp, #52	; 0x34
   882ca:	440a      	add	r2, r1
   882cc:	2807      	cmp	r0, #7
   882ce:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   882d2:	e9ca 3100 	strd	r3, r1, [sl]
   882d6:	f340 824e 	ble.w	88776 <_vfiprintf_r+0x86a>
   882da:	2a00      	cmp	r2, #0
   882dc:	f000 830c 	beq.w	888f8 <_vfiprintf_r+0x9ec>
   882e0:	4659      	mov	r1, fp
   882e2:	9805      	ldr	r0, [sp, #20]
   882e4:	aa0e      	add	r2, sp, #56	; 0x38
   882e6:	f7ff fdd5 	bl	87e94 <__sprint_r.part.0>
   882ea:	2800      	cmp	r0, #0
   882ec:	d1a8      	bne.n	88240 <_vfiprintf_r+0x334>
   882ee:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   882f2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   882f6:	1c48      	adds	r0, r1, #1
   882f8:	9b06      	ldr	r3, [sp, #24]
   882fa:	2b80      	cmp	r3, #128	; 0x80
   882fc:	f000 817e 	beq.w	885fc <_vfiprintf_r+0x6f0>
   88300:	e9dd 3400 	ldrd	r3, r4, [sp]
   88304:	1b1c      	subs	r4, r3, r4
   88306:	2c00      	cmp	r4, #0
   88308:	f300 81d3 	bgt.w	886b2 <_vfiprintf_r+0x7a6>
   8830c:	9b01      	ldr	r3, [sp, #4]
   8830e:	2807      	cmp	r0, #7
   88310:	441a      	add	r2, r3
   88312:	e9ca 6300 	strd	r6, r3, [sl]
   88316:	9210      	str	r2, [sp, #64]	; 0x40
   88318:	900f      	str	r0, [sp, #60]	; 0x3c
   8831a:	f340 816c 	ble.w	885f6 <_vfiprintf_r+0x6ea>
   8831e:	2a00      	cmp	r2, #0
   88320:	f000 8276 	beq.w	88810 <_vfiprintf_r+0x904>
   88324:	4659      	mov	r1, fp
   88326:	9805      	ldr	r0, [sp, #20]
   88328:	aa0e      	add	r2, sp, #56	; 0x38
   8832a:	f7ff fdb3 	bl	87e94 <__sprint_r.part.0>
   8832e:	2800      	cmp	r0, #0
   88330:	d186      	bne.n	88240 <_vfiprintf_r+0x334>
   88332:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88334:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88338:	0779      	lsls	r1, r7, #29
   8833a:	d504      	bpl.n	88346 <_vfiprintf_r+0x43a>
   8833c:	9b02      	ldr	r3, [sp, #8]
   8833e:	1b5c      	subs	r4, r3, r5
   88340:	2c00      	cmp	r4, #0
   88342:	f300 826e 	bgt.w	88822 <_vfiprintf_r+0x916>
   88346:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8834a:	42a9      	cmp	r1, r5
   8834c:	bfac      	ite	ge
   8834e:	185b      	addge	r3, r3, r1
   88350:	195b      	addlt	r3, r3, r5
   88352:	9303      	str	r3, [sp, #12]
   88354:	2a00      	cmp	r2, #0
   88356:	f47f af6b 	bne.w	88230 <_vfiprintf_r+0x324>
   8835a:	2300      	movs	r3, #0
   8835c:	930f      	str	r3, [sp, #60]	; 0x3c
   8835e:	f898 3000 	ldrb.w	r3, [r8]
   88362:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88366:	2b00      	cmp	r3, #0
   88368:	f47f ae13 	bne.w	87f92 <_vfiprintf_r+0x86>
   8836c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8836e:	46d9      	mov	r9, fp
   88370:	2b00      	cmp	r3, #0
   88372:	f040 8426 	bne.w	88bc2 <_vfiprintf_r+0xcb6>
   88376:	2300      	movs	r3, #0
   88378:	930f      	str	r3, [sp, #60]	; 0x3c
   8837a:	e762      	b.n	88242 <_vfiprintf_r+0x336>
   8837c:	059a      	lsls	r2, r3, #22
   8837e:	f53f af68 	bmi.w	88252 <_vfiprintf_r+0x346>
   88382:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88386:	f002 f9cf 	bl	8a728 <__retarget_lock_release_recursive>
   8838a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8838e:	e760      	b.n	88252 <_vfiprintf_r+0x346>
   88390:	9b04      	ldr	r3, [sp, #16]
   88392:	06f8      	lsls	r0, r7, #27
   88394:	f853 4b04 	ldr.w	r4, [r3], #4
   88398:	f100 8308 	bmi.w	889ac <_vfiprintf_r+0xaa0>
   8839c:	0679      	lsls	r1, r7, #25
   8839e:	f140 8302 	bpl.w	889a6 <_vfiprintf_r+0xa9a>
   883a2:	b224      	sxth	r4, r4
   883a4:	17e5      	asrs	r5, r4, #31
   883a6:	9304      	str	r3, [sp, #16]
   883a8:	4622      	mov	r2, r4
   883aa:	462b      	mov	r3, r5
   883ac:	e6a2      	b.n	880f4 <_vfiprintf_r+0x1e8>
   883ae:	f854 3b04 	ldr.w	r3, [r4], #4
   883b2:	06f9      	lsls	r1, r7, #27
   883b4:	9404      	str	r4, [sp, #16]
   883b6:	f100 82f3 	bmi.w	889a0 <_vfiprintf_r+0xa94>
   883ba:	067a      	lsls	r2, r7, #25
   883bc:	f140 82ed 	bpl.w	8899a <_vfiprintf_r+0xa8e>
   883c0:	2500      	movs	r5, #0
   883c2:	b29c      	uxth	r4, r3
   883c4:	e6f0      	b.n	881a8 <_vfiprintf_r+0x29c>
   883c6:	f04f 0300 	mov.w	r3, #0
   883ca:	9c04      	ldr	r4, [sp, #16]
   883cc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   883d0:	f854 6b04 	ldr.w	r6, [r4], #4
   883d4:	2e00      	cmp	r6, #0
   883d6:	f000 8397 	beq.w	88b08 <_vfiprintf_r+0xbfc>
   883da:	9a00      	ldr	r2, [sp, #0]
   883dc:	4613      	mov	r3, r2
   883de:	3301      	adds	r3, #1
   883e0:	f000 831e 	beq.w	88a20 <_vfiprintf_r+0xb14>
   883e4:	2100      	movs	r1, #0
   883e6:	4630      	mov	r0, r6
   883e8:	f002 fce4 	bl	8adb4 <memchr>
   883ec:	2800      	cmp	r0, #0
   883ee:	f000 83d8 	beq.w	88ba2 <_vfiprintf_r+0xc96>
   883f2:	1b83      	subs	r3, r0, r6
   883f4:	9301      	str	r3, [sp, #4]
   883f6:	2300      	movs	r3, #0
   883f8:	9404      	str	r4, [sp, #16]
   883fa:	9300      	str	r3, [sp, #0]
   883fc:	e696      	b.n	8812c <_vfiprintf_r+0x220>
   883fe:	2501      	movs	r5, #1
   88400:	f04f 0200 	mov.w	r2, #0
   88404:	9c04      	ldr	r4, [sp, #16]
   88406:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8840a:	f854 3b04 	ldr.w	r3, [r4], #4
   8840e:	9501      	str	r5, [sp, #4]
   88410:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88414:	9404      	str	r4, [sp, #16]
   88416:	ae21      	add	r6, sp, #132	; 0x84
   88418:	e72e      	b.n	88278 <_vfiprintf_r+0x36c>
   8841a:	f001 fdb1 	bl	89f80 <__sinit>
   8841e:	e582      	b.n	87f26 <_vfiprintf_r+0x1a>
   88420:	9b02      	ldr	r3, [sp, #8]
   88422:	425b      	negs	r3, r3
   88424:	9302      	str	r3, [sp, #8]
   88426:	f898 3000 	ldrb.w	r3, [r8]
   8842a:	f047 0704 	orr.w	r7, r7, #4
   8842e:	e5cf      	b.n	87fd0 <_vfiprintf_r+0xc4>
   88430:	f898 3000 	ldrb.w	r3, [r8]
   88434:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   88438:	e5ca      	b.n	87fd0 <_vfiprintf_r+0xc4>
   8843a:	f898 3000 	ldrb.w	r3, [r8]
   8843e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88442:	e5c5      	b.n	87fd0 <_vfiprintf_r+0xc4>
   88444:	4641      	mov	r1, r8
   88446:	f811 3b01 	ldrb.w	r3, [r1], #1
   8844a:	2b2a      	cmp	r3, #42	; 0x2a
   8844c:	f000 83dd 	beq.w	88c0a <_vfiprintf_r+0xcfe>
   88450:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88454:	2a09      	cmp	r2, #9
   88456:	4688      	mov	r8, r1
   88458:	bf98      	it	ls
   8845a:	2100      	movls	r1, #0
   8845c:	f200 83ad 	bhi.w	88bba <_vfiprintf_r+0xcae>
   88460:	f818 3b01 	ldrb.w	r3, [r8], #1
   88464:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88468:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8846c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88470:	2a09      	cmp	r2, #9
   88472:	d9f5      	bls.n	88460 <_vfiprintf_r+0x554>
   88474:	9100      	str	r1, [sp, #0]
   88476:	e5ad      	b.n	87fd4 <_vfiprintf_r+0xc8>
   88478:	9c05      	ldr	r4, [sp, #20]
   8847a:	4620      	mov	r0, r4
   8847c:	f002 f94a 	bl	8a714 <_localeconv_r>
   88480:	6843      	ldr	r3, [r0, #4]
   88482:	4618      	mov	r0, r3
   88484:	930a      	str	r3, [sp, #40]	; 0x28
   88486:	f7fd fefb 	bl	86280 <strlen>
   8848a:	4603      	mov	r3, r0
   8848c:	4620      	mov	r0, r4
   8848e:	930b      	str	r3, [sp, #44]	; 0x2c
   88490:	461c      	mov	r4, r3
   88492:	f002 f93f 	bl	8a714 <_localeconv_r>
   88496:	6882      	ldr	r2, [r0, #8]
   88498:	9209      	str	r2, [sp, #36]	; 0x24
   8849a:	2c00      	cmp	r4, #0
   8849c:	f43f ae13 	beq.w	880c6 <_vfiprintf_r+0x1ba>
   884a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   884a2:	2b00      	cmp	r3, #0
   884a4:	f43f ae0f 	beq.w	880c6 <_vfiprintf_r+0x1ba>
   884a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   884aa:	781b      	ldrb	r3, [r3, #0]
   884ac:	2b00      	cmp	r3, #0
   884ae:	f43f ae0a 	beq.w	880c6 <_vfiprintf_r+0x1ba>
   884b2:	f898 3000 	ldrb.w	r3, [r8]
   884b6:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   884ba:	e589      	b.n	87fd0 <_vfiprintf_r+0xc4>
   884bc:	f898 3000 	ldrb.w	r3, [r8]
   884c0:	f047 0701 	orr.w	r7, r7, #1
   884c4:	e584      	b.n	87fd0 <_vfiprintf_r+0xc4>
   884c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   884ca:	2b00      	cmp	r3, #0
   884cc:	f47f adfb 	bne.w	880c6 <_vfiprintf_r+0x1ba>
   884d0:	2320      	movs	r3, #32
   884d2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   884d6:	f898 3000 	ldrb.w	r3, [r8]
   884da:	e579      	b.n	87fd0 <_vfiprintf_r+0xc4>
   884dc:	f898 3000 	ldrb.w	r3, [r8]
   884e0:	2b6c      	cmp	r3, #108	; 0x6c
   884e2:	bf03      	ittte	eq
   884e4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   884e8:	f047 0720 	orreq.w	r7, r7, #32
   884ec:	f108 0801 	addeq.w	r8, r8, #1
   884f0:	f047 0710 	orrne.w	r7, r7, #16
   884f4:	e56c      	b.n	87fd0 <_vfiprintf_r+0xc4>
   884f6:	f898 3000 	ldrb.w	r3, [r8]
   884fa:	2b68      	cmp	r3, #104	; 0x68
   884fc:	bf03      	ittte	eq
   884fe:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88502:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88506:	f108 0801 	addeq.w	r8, r8, #1
   8850a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8850e:	e55f      	b.n	87fd0 <_vfiprintf_r+0xc4>
   88510:	f047 0910 	orr.w	r9, r7, #16
   88514:	f019 0f20 	tst.w	r9, #32
   88518:	9c04      	ldr	r4, [sp, #16]
   8851a:	f000 8200 	beq.w	8891e <_vfiprintf_r+0xa12>
   8851e:	3407      	adds	r4, #7
   88520:	f024 0307 	bic.w	r3, r4, #7
   88524:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88528:	9304      	str	r3, [sp, #16]
   8852a:	2301      	movs	r3, #1
   8852c:	e63f      	b.n	881ae <_vfiprintf_r+0x2a2>
   8852e:	f647 0330 	movw	r3, #30768	; 0x7830
   88532:	9c04      	ldr	r4, [sp, #16]
   88534:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88538:	f854 2b04 	ldr.w	r2, [r4], #4
   8853c:	4bbf      	ldr	r3, [pc, #764]	; (8883c <_vfiprintf_r+0x930>)
   8853e:	9404      	str	r4, [sp, #16]
   88540:	9308      	str	r3, [sp, #32]
   88542:	4614      	mov	r4, r2
   88544:	2500      	movs	r5, #0
   88546:	2302      	movs	r3, #2
   88548:	f047 0902 	orr.w	r9, r7, #2
   8854c:	e62f      	b.n	881ae <_vfiprintf_r+0x2a2>
   8854e:	06bb      	lsls	r3, r7, #26
   88550:	f100 8232 	bmi.w	889b8 <_vfiprintf_r+0xaac>
   88554:	06fe      	lsls	r6, r7, #27
   88556:	f100 82cf 	bmi.w	88af8 <_vfiprintf_r+0xbec>
   8855a:	067d      	lsls	r5, r7, #25
   8855c:	f100 8301 	bmi.w	88b62 <_vfiprintf_r+0xc56>
   88560:	05bc      	lsls	r4, r7, #22
   88562:	f140 82c9 	bpl.w	88af8 <_vfiprintf_r+0xbec>
   88566:	9c04      	ldr	r4, [sp, #16]
   88568:	9a03      	ldr	r2, [sp, #12]
   8856a:	f854 3b04 	ldr.w	r3, [r4], #4
   8856e:	701a      	strb	r2, [r3, #0]
   88570:	9404      	str	r4, [sp, #16]
   88572:	e509      	b.n	87f88 <_vfiprintf_r+0x7c>
   88574:	46b9      	mov	r9, r7
   88576:	2b01      	cmp	r3, #1
   88578:	f43f adcb 	beq.w	88112 <_vfiprintf_r+0x206>
   8857c:	2b02      	cmp	r3, #2
   8857e:	ae3a      	add	r6, sp, #232	; 0xe8
   88580:	d113      	bne.n	885aa <_vfiprintf_r+0x69e>
   88582:	9808      	ldr	r0, [sp, #32]
   88584:	0923      	lsrs	r3, r4, #4
   88586:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8858a:	0929      	lsrs	r1, r5, #4
   8858c:	f004 020f 	and.w	r2, r4, #15
   88590:	460d      	mov	r5, r1
   88592:	461c      	mov	r4, r3
   88594:	5c83      	ldrb	r3, [r0, r2]
   88596:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8859a:	ea54 0305 	orrs.w	r3, r4, r5
   8859e:	d1f1      	bne.n	88584 <_vfiprintf_r+0x678>
   885a0:	ab3a      	add	r3, sp, #232	; 0xe8
   885a2:	1b9b      	subs	r3, r3, r6
   885a4:	464f      	mov	r7, r9
   885a6:	9301      	str	r3, [sp, #4]
   885a8:	e5c0      	b.n	8812c <_vfiprintf_r+0x220>
   885aa:	08e2      	lsrs	r2, r4, #3
   885ac:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   885b0:	08e9      	lsrs	r1, r5, #3
   885b2:	f004 0307 	and.w	r3, r4, #7
   885b6:	460d      	mov	r5, r1
   885b8:	4614      	mov	r4, r2
   885ba:	3330      	adds	r3, #48	; 0x30
   885bc:	ea54 0105 	orrs.w	r1, r4, r5
   885c0:	4632      	mov	r2, r6
   885c2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   885c6:	d1f0      	bne.n	885aa <_vfiprintf_r+0x69e>
   885c8:	f019 0f01 	tst.w	r9, #1
   885cc:	d0e8      	beq.n	885a0 <_vfiprintf_r+0x694>
   885ce:	2b30      	cmp	r3, #48	; 0x30
   885d0:	d0e6      	beq.n	885a0 <_vfiprintf_r+0x694>
   885d2:	2330      	movs	r3, #48	; 0x30
   885d4:	3a02      	subs	r2, #2
   885d6:	f806 3c01 	strb.w	r3, [r6, #-1]
   885da:	ab3a      	add	r3, sp, #232	; 0xe8
   885dc:	1a9b      	subs	r3, r3, r2
   885de:	464f      	mov	r7, r9
   885e0:	4616      	mov	r6, r2
   885e2:	9301      	str	r3, [sp, #4]
   885e4:	e5a2      	b.n	8812c <_vfiprintf_r+0x220>
   885e6:	2301      	movs	r3, #1
   885e8:	9a01      	ldr	r2, [sp, #4]
   885ea:	930f      	str	r3, [sp, #60]	; 0x3c
   885ec:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   885f0:	9212      	str	r2, [sp, #72]	; 0x48
   885f2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   885f6:	f10a 0a08 	add.w	sl, sl, #8
   885fa:	e69d      	b.n	88338 <_vfiprintf_r+0x42c>
   885fc:	9b02      	ldr	r3, [sp, #8]
   885fe:	1b5c      	subs	r4, r3, r5
   88600:	2c00      	cmp	r4, #0
   88602:	f77f ae7d 	ble.w	88300 <_vfiprintf_r+0x3f4>
   88606:	2c10      	cmp	r4, #16
   88608:	f340 82ea 	ble.w	88be0 <_vfiprintf_r+0xcd4>
   8860c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88840 <_vfiprintf_r+0x934>
   88610:	4650      	mov	r0, sl
   88612:	9706      	str	r7, [sp, #24]
   88614:	46b2      	mov	sl, r6
   88616:	464e      	mov	r6, r9
   88618:	46c1      	mov	r9, r8
   8861a:	46a8      	mov	r8, r5
   8861c:	9d05      	ldr	r5, [sp, #20]
   8861e:	e006      	b.n	8862e <_vfiprintf_r+0x722>
   88620:	f101 0c02 	add.w	ip, r1, #2
   88624:	4619      	mov	r1, r3
   88626:	3008      	adds	r0, #8
   88628:	3c10      	subs	r4, #16
   8862a:	2c10      	cmp	r4, #16
   8862c:	dd1a      	ble.n	88664 <_vfiprintf_r+0x758>
   8862e:	2710      	movs	r7, #16
   88630:	1c4b      	adds	r3, r1, #1
   88632:	3210      	adds	r2, #16
   88634:	2b07      	cmp	r3, #7
   88636:	9210      	str	r2, [sp, #64]	; 0x40
   88638:	6006      	str	r6, [r0, #0]
   8863a:	6047      	str	r7, [r0, #4]
   8863c:	930f      	str	r3, [sp, #60]	; 0x3c
   8863e:	ddef      	ble.n	88620 <_vfiprintf_r+0x714>
   88640:	2a00      	cmp	r2, #0
   88642:	d07b      	beq.n	8873c <_vfiprintf_r+0x830>
   88644:	4659      	mov	r1, fp
   88646:	4628      	mov	r0, r5
   88648:	aa0e      	add	r2, sp, #56	; 0x38
   8864a:	f7ff fc23 	bl	87e94 <__sprint_r.part.0>
   8864e:	2800      	cmp	r0, #0
   88650:	f47f adf6 	bne.w	88240 <_vfiprintf_r+0x334>
   88654:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88658:	3c10      	subs	r4, #16
   8865a:	2c10      	cmp	r4, #16
   8865c:	a811      	add	r0, sp, #68	; 0x44
   8865e:	f101 0c01 	add.w	ip, r1, #1
   88662:	dce4      	bgt.n	8862e <_vfiprintf_r+0x722>
   88664:	4645      	mov	r5, r8
   88666:	46c8      	mov	r8, r9
   88668:	46b1      	mov	r9, r6
   8866a:	4656      	mov	r6, sl
   8866c:	4682      	mov	sl, r0
   8866e:	9f06      	ldr	r7, [sp, #24]
   88670:	4422      	add	r2, r4
   88672:	f1bc 0f07 	cmp.w	ip, #7
   88676:	e9ca 9400 	strd	r9, r4, [sl]
   8867a:	9210      	str	r2, [sp, #64]	; 0x40
   8867c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88680:	f340 817e 	ble.w	88980 <_vfiprintf_r+0xa74>
   88684:	2a00      	cmp	r2, #0
   88686:	f000 825c 	beq.w	88b42 <_vfiprintf_r+0xc36>
   8868a:	4659      	mov	r1, fp
   8868c:	9805      	ldr	r0, [sp, #20]
   8868e:	aa0e      	add	r2, sp, #56	; 0x38
   88690:	f7ff fc00 	bl	87e94 <__sprint_r.part.0>
   88694:	2800      	cmp	r0, #0
   88696:	f47f add3 	bne.w	88240 <_vfiprintf_r+0x334>
   8869a:	e9dd 3400 	ldrd	r3, r4, [sp]
   8869e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   886a2:	1b1c      	subs	r4, r3, r4
   886a4:	2c00      	cmp	r4, #0
   886a6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   886aa:	f101 0001 	add.w	r0, r1, #1
   886ae:	f77f ae2d 	ble.w	8830c <_vfiprintf_r+0x400>
   886b2:	2c10      	cmp	r4, #16
   886b4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88840 <_vfiprintf_r+0x934>
   886b8:	dd2f      	ble.n	8871a <_vfiprintf_r+0x80e>
   886ba:	46d4      	mov	ip, sl
   886bc:	46b2      	mov	sl, r6
   886be:	464e      	mov	r6, r9
   886c0:	46c1      	mov	r9, r8
   886c2:	46a8      	mov	r8, r5
   886c4:	9d05      	ldr	r5, [sp, #20]
   886c6:	e006      	b.n	886d6 <_vfiprintf_r+0x7ca>
   886c8:	1c88      	adds	r0, r1, #2
   886ca:	4619      	mov	r1, r3
   886cc:	f10c 0c08 	add.w	ip, ip, #8
   886d0:	3c10      	subs	r4, #16
   886d2:	2c10      	cmp	r4, #16
   886d4:	dd1c      	ble.n	88710 <_vfiprintf_r+0x804>
   886d6:	2010      	movs	r0, #16
   886d8:	1c4b      	adds	r3, r1, #1
   886da:	3210      	adds	r2, #16
   886dc:	2b07      	cmp	r3, #7
   886de:	9210      	str	r2, [sp, #64]	; 0x40
   886e0:	f8cc 6000 	str.w	r6, [ip]
   886e4:	f8cc 0004 	str.w	r0, [ip, #4]
   886e8:	930f      	str	r3, [sp, #60]	; 0x3c
   886ea:	dded      	ble.n	886c8 <_vfiprintf_r+0x7bc>
   886ec:	b30a      	cbz	r2, 88732 <_vfiprintf_r+0x826>
   886ee:	4659      	mov	r1, fp
   886f0:	4628      	mov	r0, r5
   886f2:	aa0e      	add	r2, sp, #56	; 0x38
   886f4:	f7ff fbce 	bl	87e94 <__sprint_r.part.0>
   886f8:	2800      	cmp	r0, #0
   886fa:	f47f ada1 	bne.w	88240 <_vfiprintf_r+0x334>
   886fe:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88702:	3c10      	subs	r4, #16
   88704:	2c10      	cmp	r4, #16
   88706:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8870a:	f101 0001 	add.w	r0, r1, #1
   8870e:	dce2      	bgt.n	886d6 <_vfiprintf_r+0x7ca>
   88710:	4645      	mov	r5, r8
   88712:	46c8      	mov	r8, r9
   88714:	46b1      	mov	r9, r6
   88716:	4656      	mov	r6, sl
   88718:	46e2      	mov	sl, ip
   8871a:	4422      	add	r2, r4
   8871c:	2807      	cmp	r0, #7
   8871e:	e9ca 9400 	strd	r9, r4, [sl]
   88722:	9210      	str	r2, [sp, #64]	; 0x40
   88724:	900f      	str	r0, [sp, #60]	; 0x3c
   88726:	f300 80d3 	bgt.w	888d0 <_vfiprintf_r+0x9c4>
   8872a:	f10a 0a08 	add.w	sl, sl, #8
   8872e:	3001      	adds	r0, #1
   88730:	e5ec      	b.n	8830c <_vfiprintf_r+0x400>
   88732:	2001      	movs	r0, #1
   88734:	4611      	mov	r1, r2
   88736:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8873a:	e7c9      	b.n	886d0 <_vfiprintf_r+0x7c4>
   8873c:	f04f 0c01 	mov.w	ip, #1
   88740:	4611      	mov	r1, r2
   88742:	a811      	add	r0, sp, #68	; 0x44
   88744:	e770      	b.n	88628 <_vfiprintf_r+0x71c>
   88746:	2a00      	cmp	r2, #0
   88748:	f000 80d3 	beq.w	888f2 <_vfiprintf_r+0x9e6>
   8874c:	4659      	mov	r1, fp
   8874e:	9805      	ldr	r0, [sp, #20]
   88750:	aa0e      	add	r2, sp, #56	; 0x38
   88752:	f7ff fb9f 	bl	87e94 <__sprint_r.part.0>
   88756:	2800      	cmp	r0, #0
   88758:	f47f ad72 	bne.w	88240 <_vfiprintf_r+0x334>
   8875c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88760:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88764:	1c48      	adds	r0, r1, #1
   88766:	e5ac      	b.n	882c2 <_vfiprintf_r+0x3b6>
   88768:	2202      	movs	r2, #2
   8876a:	2001      	movs	r0, #1
   8876c:	ab0d      	add	r3, sp, #52	; 0x34
   8876e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88772:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88776:	4601      	mov	r1, r0
   88778:	f10a 0a08 	add.w	sl, sl, #8
   8877c:	1c48      	adds	r0, r1, #1
   8877e:	e5bb      	b.n	882f8 <_vfiprintf_r+0x3ec>
   88780:	2c10      	cmp	r4, #16
   88782:	f340 8214 	ble.w	88bae <_vfiprintf_r+0xca2>
   88786:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8878a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88844 <_vfiprintf_r+0x938>
   8878e:	46d4      	mov	ip, sl
   88790:	46b2      	mov	sl, r6
   88792:	464e      	mov	r6, r9
   88794:	46c1      	mov	r9, r8
   88796:	46a8      	mov	r8, r5
   88798:	9d05      	ldr	r5, [sp, #20]
   8879a:	e006      	b.n	887aa <_vfiprintf_r+0x89e>
   8879c:	1c99      	adds	r1, r3, #2
   8879e:	4603      	mov	r3, r0
   887a0:	f10c 0c08 	add.w	ip, ip, #8
   887a4:	3c10      	subs	r4, #16
   887a6:	2c10      	cmp	r4, #16
   887a8:	dd1c      	ble.n	887e4 <_vfiprintf_r+0x8d8>
   887aa:	2110      	movs	r1, #16
   887ac:	1c58      	adds	r0, r3, #1
   887ae:	3210      	adds	r2, #16
   887b0:	2807      	cmp	r0, #7
   887b2:	9210      	str	r2, [sp, #64]	; 0x40
   887b4:	f8cc 6000 	str.w	r6, [ip]
   887b8:	f8cc 1004 	str.w	r1, [ip, #4]
   887bc:	900f      	str	r0, [sp, #60]	; 0x3c
   887be:	dded      	ble.n	8879c <_vfiprintf_r+0x890>
   887c0:	b30a      	cbz	r2, 88806 <_vfiprintf_r+0x8fa>
   887c2:	4659      	mov	r1, fp
   887c4:	4628      	mov	r0, r5
   887c6:	aa0e      	add	r2, sp, #56	; 0x38
   887c8:	f7ff fb64 	bl	87e94 <__sprint_r.part.0>
   887cc:	2800      	cmp	r0, #0
   887ce:	f47f ad37 	bne.w	88240 <_vfiprintf_r+0x334>
   887d2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   887d6:	3c10      	subs	r4, #16
   887d8:	2c10      	cmp	r4, #16
   887da:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   887de:	f103 0101 	add.w	r1, r3, #1
   887e2:	dce2      	bgt.n	887aa <_vfiprintf_r+0x89e>
   887e4:	4645      	mov	r5, r8
   887e6:	46c8      	mov	r8, r9
   887e8:	46b1      	mov	r9, r6
   887ea:	4656      	mov	r6, sl
   887ec:	46e2      	mov	sl, ip
   887ee:	4422      	add	r2, r4
   887f0:	2907      	cmp	r1, #7
   887f2:	e9ca 9400 	strd	r9, r4, [sl]
   887f6:	9210      	str	r2, [sp, #64]	; 0x40
   887f8:	910f      	str	r1, [sp, #60]	; 0x3c
   887fa:	f300 80a8 	bgt.w	8894e <_vfiprintf_r+0xa42>
   887fe:	f10a 0a08 	add.w	sl, sl, #8
   88802:	1c48      	adds	r0, r1, #1
   88804:	e54b      	b.n	8829e <_vfiprintf_r+0x392>
   88806:	4613      	mov	r3, r2
   88808:	2101      	movs	r1, #1
   8880a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8880e:	e7c9      	b.n	887a4 <_vfiprintf_r+0x898>
   88810:	0778      	lsls	r0, r7, #29
   88812:	920f      	str	r2, [sp, #60]	; 0x3c
   88814:	d554      	bpl.n	888c0 <_vfiprintf_r+0x9b4>
   88816:	9b02      	ldr	r3, [sp, #8]
   88818:	1b5c      	subs	r4, r3, r5
   8881a:	2c00      	cmp	r4, #0
   8881c:	dd50      	ble.n	888c0 <_vfiprintf_r+0x9b4>
   8881e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88822:	2c10      	cmp	r4, #16
   88824:	f340 81d7 	ble.w	88bd6 <_vfiprintf_r+0xcca>
   88828:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88844 <_vfiprintf_r+0x938>
   8882c:	2610      	movs	r6, #16
   8882e:	464b      	mov	r3, r9
   88830:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88832:	46a9      	mov	r9, r5
   88834:	9f05      	ldr	r7, [sp, #20]
   88836:	461d      	mov	r5, r3
   88838:	e00d      	b.n	88856 <_vfiprintf_r+0x94a>
   8883a:	bf00      	nop
   8883c:	0008cbe8 	.word	0x0008cbe8
   88840:	0008cc4c 	.word	0x0008cc4c
   88844:	0008cc3c 	.word	0x0008cc3c
   88848:	1c88      	adds	r0, r1, #2
   8884a:	4619      	mov	r1, r3
   8884c:	f10a 0a08 	add.w	sl, sl, #8
   88850:	3c10      	subs	r4, #16
   88852:	2c10      	cmp	r4, #16
   88854:	dd19      	ble.n	8888a <_vfiprintf_r+0x97e>
   88856:	1c4b      	adds	r3, r1, #1
   88858:	3210      	adds	r2, #16
   8885a:	2b07      	cmp	r3, #7
   8885c:	e9ca 5600 	strd	r5, r6, [sl]
   88860:	9210      	str	r2, [sp, #64]	; 0x40
   88862:	930f      	str	r3, [sp, #60]	; 0x3c
   88864:	ddf0      	ble.n	88848 <_vfiprintf_r+0x93c>
   88866:	b332      	cbz	r2, 888b6 <_vfiprintf_r+0x9aa>
   88868:	4659      	mov	r1, fp
   8886a:	4638      	mov	r0, r7
   8886c:	aa0e      	add	r2, sp, #56	; 0x38
   8886e:	f7ff fb11 	bl	87e94 <__sprint_r.part.0>
   88872:	2800      	cmp	r0, #0
   88874:	f47f ace4 	bne.w	88240 <_vfiprintf_r+0x334>
   88878:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8887c:	3c10      	subs	r4, #16
   8887e:	2c10      	cmp	r4, #16
   88880:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88884:	f101 0001 	add.w	r0, r1, #1
   88888:	dce5      	bgt.n	88856 <_vfiprintf_r+0x94a>
   8888a:	462b      	mov	r3, r5
   8888c:	464d      	mov	r5, r9
   8888e:	4699      	mov	r9, r3
   88890:	4422      	add	r2, r4
   88892:	2807      	cmp	r0, #7
   88894:	e9ca 9400 	strd	r9, r4, [sl]
   88898:	9210      	str	r2, [sp, #64]	; 0x40
   8889a:	900f      	str	r0, [sp, #60]	; 0x3c
   8889c:	f77f ad53 	ble.w	88346 <_vfiprintf_r+0x43a>
   888a0:	b172      	cbz	r2, 888c0 <_vfiprintf_r+0x9b4>
   888a2:	4659      	mov	r1, fp
   888a4:	9805      	ldr	r0, [sp, #20]
   888a6:	aa0e      	add	r2, sp, #56	; 0x38
   888a8:	f7ff faf4 	bl	87e94 <__sprint_r.part.0>
   888ac:	2800      	cmp	r0, #0
   888ae:	f47f acc7 	bne.w	88240 <_vfiprintf_r+0x334>
   888b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   888b4:	e547      	b.n	88346 <_vfiprintf_r+0x43a>
   888b6:	2001      	movs	r0, #1
   888b8:	4611      	mov	r1, r2
   888ba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888be:	e7c7      	b.n	88850 <_vfiprintf_r+0x944>
   888c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   888c4:	42aa      	cmp	r2, r5
   888c6:	bfac      	ite	ge
   888c8:	189b      	addge	r3, r3, r2
   888ca:	195b      	addlt	r3, r3, r5
   888cc:	9303      	str	r3, [sp, #12]
   888ce:	e544      	b.n	8835a <_vfiprintf_r+0x44e>
   888d0:	2a00      	cmp	r2, #0
   888d2:	f43f ae88 	beq.w	885e6 <_vfiprintf_r+0x6da>
   888d6:	4659      	mov	r1, fp
   888d8:	9805      	ldr	r0, [sp, #20]
   888da:	aa0e      	add	r2, sp, #56	; 0x38
   888dc:	f7ff fada 	bl	87e94 <__sprint_r.part.0>
   888e0:	2800      	cmp	r0, #0
   888e2:	f47f acad 	bne.w	88240 <_vfiprintf_r+0x334>
   888e6:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   888ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888ee:	3001      	adds	r0, #1
   888f0:	e50c      	b.n	8830c <_vfiprintf_r+0x400>
   888f2:	9b07      	ldr	r3, [sp, #28]
   888f4:	2b00      	cmp	r3, #0
   888f6:	d16b      	bne.n	889d0 <_vfiprintf_r+0xac4>
   888f8:	2001      	movs	r0, #1
   888fa:	4611      	mov	r1, r2
   888fc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88900:	e4fa      	b.n	882f8 <_vfiprintf_r+0x3ec>
   88902:	920f      	str	r2, [sp, #60]	; 0x3c
   88904:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88908:	e481      	b.n	8820e <_vfiprintf_r+0x302>
   8890a:	9b00      	ldr	r3, [sp, #0]
   8890c:	2b00      	cmp	r3, #0
   8890e:	f47f ac05 	bne.w	8811c <_vfiprintf_r+0x210>
   88912:	464f      	mov	r7, r9
   88914:	2300      	movs	r3, #0
   88916:	ae3a      	add	r6, sp, #232	; 0xe8
   88918:	9300      	str	r3, [sp, #0]
   8891a:	9301      	str	r3, [sp, #4]
   8891c:	e406      	b.n	8812c <_vfiprintf_r+0x220>
   8891e:	f854 2b04 	ldr.w	r2, [r4], #4
   88922:	f019 0f10 	tst.w	r9, #16
   88926:	f04f 0301 	mov.w	r3, #1
   8892a:	9404      	str	r4, [sp, #16]
   8892c:	d132      	bne.n	88994 <_vfiprintf_r+0xa88>
   8892e:	f019 0f40 	tst.w	r9, #64	; 0x40
   88932:	d02b      	beq.n	8898c <_vfiprintf_r+0xa80>
   88934:	2500      	movs	r5, #0
   88936:	b294      	uxth	r4, r2
   88938:	e439      	b.n	881ae <_vfiprintf_r+0x2a2>
   8893a:	232d      	movs	r3, #45	; 0x2d
   8893c:	4264      	negs	r4, r4
   8893e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88942:	46b9      	mov	r9, r7
   88944:	f04f 0301 	mov.w	r3, #1
   88948:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8894c:	e433      	b.n	881b6 <_vfiprintf_r+0x2aa>
   8894e:	2a00      	cmp	r2, #0
   88950:	d06f      	beq.n	88a32 <_vfiprintf_r+0xb26>
   88952:	4659      	mov	r1, fp
   88954:	9805      	ldr	r0, [sp, #20]
   88956:	aa0e      	add	r2, sp, #56	; 0x38
   88958:	f7ff fa9c 	bl	87e94 <__sprint_r.part.0>
   8895c:	2800      	cmp	r0, #0
   8895e:	f47f ac6f 	bne.w	88240 <_vfiprintf_r+0x334>
   88962:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88966:	e497      	b.n	88298 <_vfiprintf_r+0x38c>
   88968:	ae3a      	add	r6, sp, #232	; 0xe8
   8896a:	f7ff bbdf 	b.w	8812c <_vfiprintf_r+0x220>
   8896e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88972:	f001 fed7 	bl	8a724 <__retarget_lock_acquire_recursive>
   88976:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8897a:	b28a      	uxth	r2, r1
   8897c:	f7ff badd 	b.w	87f3a <_vfiprintf_r+0x2e>
   88980:	4661      	mov	r1, ip
   88982:	f10a 0a08 	add.w	sl, sl, #8
   88986:	f10c 0001 	add.w	r0, ip, #1
   8898a:	e4b9      	b.n	88300 <_vfiprintf_r+0x3f4>
   8898c:	f419 7f00 	tst.w	r9, #512	; 0x200
   88990:	f040 80ef 	bne.w	88b72 <_vfiprintf_r+0xc66>
   88994:	4614      	mov	r4, r2
   88996:	2500      	movs	r5, #0
   88998:	e409      	b.n	881ae <_vfiprintf_r+0x2a2>
   8899a:	05be      	lsls	r6, r7, #22
   8899c:	f100 80f7 	bmi.w	88b8e <_vfiprintf_r+0xc82>
   889a0:	461c      	mov	r4, r3
   889a2:	2500      	movs	r5, #0
   889a4:	e400      	b.n	881a8 <_vfiprintf_r+0x29c>
   889a6:	05ba      	lsls	r2, r7, #22
   889a8:	f100 80ea 	bmi.w	88b80 <_vfiprintf_r+0xc74>
   889ac:	17e5      	asrs	r5, r4, #31
   889ae:	9304      	str	r3, [sp, #16]
   889b0:	4622      	mov	r2, r4
   889b2:	462b      	mov	r3, r5
   889b4:	f7ff bb9e 	b.w	880f4 <_vfiprintf_r+0x1e8>
   889b8:	9b03      	ldr	r3, [sp, #12]
   889ba:	9c04      	ldr	r4, [sp, #16]
   889bc:	17dd      	asrs	r5, r3, #31
   889be:	461a      	mov	r2, r3
   889c0:	462b      	mov	r3, r5
   889c2:	f854 1b04 	ldr.w	r1, [r4], #4
   889c6:	e9c1 2300 	strd	r2, r3, [r1]
   889ca:	9404      	str	r4, [sp, #16]
   889cc:	f7ff badc 	b.w	87f88 <_vfiprintf_r+0x7c>
   889d0:	2202      	movs	r2, #2
   889d2:	ab0d      	add	r3, sp, #52	; 0x34
   889d4:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   889d8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889dc:	e6cc      	b.n	88778 <_vfiprintf_r+0x86c>
   889de:	46b9      	mov	r9, r7
   889e0:	e598      	b.n	88514 <_vfiprintf_r+0x608>
   889e2:	4a90      	ldr	r2, [pc, #576]	; (88c24 <_vfiprintf_r+0xd18>)
   889e4:	9208      	str	r2, [sp, #32]
   889e6:	06bd      	lsls	r5, r7, #26
   889e8:	9c04      	ldr	r4, [sp, #16]
   889ea:	d530      	bpl.n	88a4e <_vfiprintf_r+0xb42>
   889ec:	3407      	adds	r4, #7
   889ee:	f024 0207 	bic.w	r2, r4, #7
   889f2:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   889f6:	9204      	str	r2, [sp, #16]
   889f8:	07fe      	lsls	r6, r7, #31
   889fa:	d509      	bpl.n	88a10 <_vfiprintf_r+0xb04>
   889fc:	ea54 0205 	orrs.w	r2, r4, r5
   88a00:	d006      	beq.n	88a10 <_vfiprintf_r+0xb04>
   88a02:	2230      	movs	r2, #48	; 0x30
   88a04:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88a08:	f047 0702 	orr.w	r7, r7, #2
   88a0c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88a10:	2302      	movs	r3, #2
   88a12:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88a16:	f7ff bbca 	b.w	881ae <_vfiprintf_r+0x2a2>
   88a1a:	4a83      	ldr	r2, [pc, #524]	; (88c28 <_vfiprintf_r+0xd1c>)
   88a1c:	9208      	str	r2, [sp, #32]
   88a1e:	e7e2      	b.n	889e6 <_vfiprintf_r+0xada>
   88a20:	4630      	mov	r0, r6
   88a22:	f7fd fc2d 	bl	86280 <strlen>
   88a26:	2300      	movs	r3, #0
   88a28:	9404      	str	r4, [sp, #16]
   88a2a:	9001      	str	r0, [sp, #4]
   88a2c:	9300      	str	r3, [sp, #0]
   88a2e:	f7ff bb7d 	b.w	8812c <_vfiprintf_r+0x220>
   88a32:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88a36:	2900      	cmp	r1, #0
   88a38:	f040 8089 	bne.w	88b4e <_vfiprintf_r+0xc42>
   88a3c:	9b07      	ldr	r3, [sp, #28]
   88a3e:	2b00      	cmp	r3, #0
   88a40:	f47f ae92 	bne.w	88768 <_vfiprintf_r+0x85c>
   88a44:	4611      	mov	r1, r2
   88a46:	2001      	movs	r0, #1
   88a48:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a4c:	e458      	b.n	88300 <_vfiprintf_r+0x3f4>
   88a4e:	f854 2b04 	ldr.w	r2, [r4], #4
   88a52:	9404      	str	r4, [sp, #16]
   88a54:	06fc      	lsls	r4, r7, #27
   88a56:	d407      	bmi.n	88a68 <_vfiprintf_r+0xb5c>
   88a58:	0678      	lsls	r0, r7, #25
   88a5a:	d502      	bpl.n	88a62 <_vfiprintf_r+0xb56>
   88a5c:	2500      	movs	r5, #0
   88a5e:	b294      	uxth	r4, r2
   88a60:	e7ca      	b.n	889f8 <_vfiprintf_r+0xaec>
   88a62:	05b9      	lsls	r1, r7, #22
   88a64:	f100 8089 	bmi.w	88b7a <_vfiprintf_r+0xc6e>
   88a68:	4614      	mov	r4, r2
   88a6a:	2500      	movs	r5, #0
   88a6c:	e7c4      	b.n	889f8 <_vfiprintf_r+0xaec>
   88a6e:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88a72:	f8cd 9004 	str.w	r9, [sp, #4]
   88a76:	f8cd 8018 	str.w	r8, [sp, #24]
   88a7a:	2700      	movs	r7, #0
   88a7c:	4698      	mov	r8, r3
   88a7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88a82:	ae3a      	add	r6, sp, #232	; 0xe8
   88a84:	e00b      	b.n	88a9e <_vfiprintf_r+0xb92>
   88a86:	220a      	movs	r2, #10
   88a88:	2300      	movs	r3, #0
   88a8a:	4620      	mov	r0, r4
   88a8c:	4629      	mov	r1, r5
   88a8e:	f7fd f883 	bl	85b98 <__aeabi_uldivmod>
   88a92:	2d00      	cmp	r5, #0
   88a94:	bf08      	it	eq
   88a96:	2c0a      	cmpeq	r4, #10
   88a98:	d319      	bcc.n	88ace <_vfiprintf_r+0xbc2>
   88a9a:	4604      	mov	r4, r0
   88a9c:	460d      	mov	r5, r1
   88a9e:	220a      	movs	r2, #10
   88aa0:	2300      	movs	r3, #0
   88aa2:	4620      	mov	r0, r4
   88aa4:	4629      	mov	r1, r5
   88aa6:	f7fd f877 	bl	85b98 <__aeabi_uldivmod>
   88aaa:	3230      	adds	r2, #48	; 0x30
   88aac:	f806 2c01 	strb.w	r2, [r6, #-1]
   88ab0:	3701      	adds	r7, #1
   88ab2:	3e01      	subs	r6, #1
   88ab4:	f1b8 0f00 	cmp.w	r8, #0
   88ab8:	d0e5      	beq.n	88a86 <_vfiprintf_r+0xb7a>
   88aba:	f899 3000 	ldrb.w	r3, [r9]
   88abe:	42bb      	cmp	r3, r7
   88ac0:	d1e1      	bne.n	88a86 <_vfiprintf_r+0xb7a>
   88ac2:	2fff      	cmp	r7, #255	; 0xff
   88ac4:	d0df      	beq.n	88a86 <_vfiprintf_r+0xb7a>
   88ac6:	2d00      	cmp	r5, #0
   88ac8:	bf08      	it	eq
   88aca:	2c0a      	cmpeq	r4, #10
   88acc:	d225      	bcs.n	88b1a <_vfiprintf_r+0xc0e>
   88ace:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   88ad2:	ab3a      	add	r3, sp, #232	; 0xe8
   88ad4:	f8dd 9004 	ldr.w	r9, [sp, #4]
   88ad8:	1b9b      	subs	r3, r3, r6
   88ada:	464f      	mov	r7, r9
   88adc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   88ae0:	9301      	str	r3, [sp, #4]
   88ae2:	f7ff bb23 	b.w	8812c <_vfiprintf_r+0x220>
   88ae6:	46b9      	mov	r9, r7
   88ae8:	f7ff bb13 	b.w	88112 <_vfiprintf_r+0x206>
   88aec:	2b01      	cmp	r3, #1
   88aee:	46b9      	mov	r9, r7
   88af0:	f47f ad44 	bne.w	8857c <_vfiprintf_r+0x670>
   88af4:	f7ff bb12 	b.w	8811c <_vfiprintf_r+0x210>
   88af8:	9c04      	ldr	r4, [sp, #16]
   88afa:	9a03      	ldr	r2, [sp, #12]
   88afc:	f854 3b04 	ldr.w	r3, [r4], #4
   88b00:	601a      	str	r2, [r3, #0]
   88b02:	9404      	str	r4, [sp, #16]
   88b04:	f7ff ba40 	b.w	87f88 <_vfiprintf_r+0x7c>
   88b08:	9d00      	ldr	r5, [sp, #0]
   88b0a:	4e48      	ldr	r6, [pc, #288]	; (88c2c <_vfiprintf_r+0xd20>)
   88b0c:	2d06      	cmp	r5, #6
   88b0e:	bf28      	it	cs
   88b10:	2506      	movcs	r5, #6
   88b12:	9404      	str	r4, [sp, #16]
   88b14:	9501      	str	r5, [sp, #4]
   88b16:	f7ff bbaf 	b.w	88278 <_vfiprintf_r+0x36c>
   88b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
   88b1e:	1af6      	subs	r6, r6, r3
   88b20:	461a      	mov	r2, r3
   88b22:	4630      	mov	r0, r6
   88b24:	f7fd fbda 	bl	862dc <strncpy>
   88b28:	f899 3001 	ldrb.w	r3, [r9, #1]
   88b2c:	b10b      	cbz	r3, 88b32 <_vfiprintf_r+0xc26>
   88b2e:	f109 0901 	add.w	r9, r9, #1
   88b32:	220a      	movs	r2, #10
   88b34:	2300      	movs	r3, #0
   88b36:	4620      	mov	r0, r4
   88b38:	4629      	mov	r1, r5
   88b3a:	f7fd f82d 	bl	85b98 <__aeabi_uldivmod>
   88b3e:	2700      	movs	r7, #0
   88b40:	e7ab      	b.n	88a9a <_vfiprintf_r+0xb8e>
   88b42:	2001      	movs	r0, #1
   88b44:	4611      	mov	r1, r2
   88b46:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b4a:	f7ff bbd9 	b.w	88300 <_vfiprintf_r+0x3f4>
   88b4e:	2201      	movs	r2, #1
   88b50:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   88b54:	4610      	mov	r0, r2
   88b56:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88b5a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b5e:	f7ff bbac 	b.w	882ba <_vfiprintf_r+0x3ae>
   88b62:	9c04      	ldr	r4, [sp, #16]
   88b64:	9a03      	ldr	r2, [sp, #12]
   88b66:	f854 3b04 	ldr.w	r3, [r4], #4
   88b6a:	801a      	strh	r2, [r3, #0]
   88b6c:	9404      	str	r4, [sp, #16]
   88b6e:	f7ff ba0b 	b.w	87f88 <_vfiprintf_r+0x7c>
   88b72:	2500      	movs	r5, #0
   88b74:	b2d4      	uxtb	r4, r2
   88b76:	f7ff bb1a 	b.w	881ae <_vfiprintf_r+0x2a2>
   88b7a:	2500      	movs	r5, #0
   88b7c:	b2d4      	uxtb	r4, r2
   88b7e:	e73b      	b.n	889f8 <_vfiprintf_r+0xaec>
   88b80:	b264      	sxtb	r4, r4
   88b82:	17e5      	asrs	r5, r4, #31
   88b84:	9304      	str	r3, [sp, #16]
   88b86:	4622      	mov	r2, r4
   88b88:	462b      	mov	r3, r5
   88b8a:	f7ff bab3 	b.w	880f4 <_vfiprintf_r+0x1e8>
   88b8e:	2500      	movs	r5, #0
   88b90:	b2dc      	uxtb	r4, r3
   88b92:	f7ff bb09 	b.w	881a8 <_vfiprintf_r+0x29c>
   88b96:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88b9a:	f001 fdc5 	bl	8a728 <__retarget_lock_release_recursive>
   88b9e:	f7ff baec 	b.w	8817a <_vfiprintf_r+0x26e>
   88ba2:	9b00      	ldr	r3, [sp, #0]
   88ba4:	9404      	str	r4, [sp, #16]
   88ba6:	9301      	str	r3, [sp, #4]
   88ba8:	9000      	str	r0, [sp, #0]
   88baa:	f7ff babf 	b.w	8812c <_vfiprintf_r+0x220>
   88bae:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88bb2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 88c30 <_vfiprintf_r+0xd24>
   88bb6:	3101      	adds	r1, #1
   88bb8:	e619      	b.n	887ee <_vfiprintf_r+0x8e2>
   88bba:	2200      	movs	r2, #0
   88bbc:	9200      	str	r2, [sp, #0]
   88bbe:	f7ff ba09 	b.w	87fd4 <_vfiprintf_r+0xc8>
   88bc2:	4659      	mov	r1, fp
   88bc4:	9805      	ldr	r0, [sp, #20]
   88bc6:	aa0e      	add	r2, sp, #56	; 0x38
   88bc8:	f7ff f964 	bl	87e94 <__sprint_r.part.0>
   88bcc:	2800      	cmp	r0, #0
   88bce:	f43f abd2 	beq.w	88376 <_vfiprintf_r+0x46a>
   88bd2:	f7ff bb36 	b.w	88242 <_vfiprintf_r+0x336>
   88bd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   88bd8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 88c30 <_vfiprintf_r+0xd24>
   88bdc:	3001      	adds	r0, #1
   88bde:	e657      	b.n	88890 <_vfiprintf_r+0x984>
   88be0:	4684      	mov	ip, r0
   88be2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 88c34 <_vfiprintf_r+0xd28>
   88be6:	e543      	b.n	88670 <_vfiprintf_r+0x764>
   88be8:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88bec:	07db      	lsls	r3, r3, #31
   88bee:	d407      	bmi.n	88c00 <_vfiprintf_r+0xcf4>
   88bf0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88bf4:	059f      	lsls	r7, r3, #22
   88bf6:	d403      	bmi.n	88c00 <_vfiprintf_r+0xcf4>
   88bf8:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88bfc:	f001 fd94 	bl	8a728 <__retarget_lock_release_recursive>
   88c00:	f04f 33ff 	mov.w	r3, #4294967295
   88c04:	9303      	str	r3, [sp, #12]
   88c06:	f7ff bb27 	b.w	88258 <_vfiprintf_r+0x34c>
   88c0a:	9a04      	ldr	r2, [sp, #16]
   88c0c:	f898 3001 	ldrb.w	r3, [r8, #1]
   88c10:	f852 0b04 	ldr.w	r0, [r2], #4
   88c14:	4688      	mov	r8, r1
   88c16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88c1a:	9000      	str	r0, [sp, #0]
   88c1c:	9204      	str	r2, [sp, #16]
   88c1e:	f7ff b9d7 	b.w	87fd0 <_vfiprintf_r+0xc4>
   88c22:	bf00      	nop
   88c24:	0008cbfc 	.word	0x0008cbfc
   88c28:	0008cbe8 	.word	0x0008cbe8
   88c2c:	0008cc10 	.word	0x0008cc10
   88c30:	0008cc3c 	.word	0x0008cc3c
   88c34:	0008cc4c 	.word	0x0008cc4c

00088c38 <__sbprintf>:
   88c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   88c3a:	460c      	mov	r4, r1
   88c3c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   88c40:	f04f 0e00 	mov.w	lr, #0
   88c44:	4615      	mov	r5, r2
   88c46:	4606      	mov	r6, r0
   88c48:	461f      	mov	r7, r3
   88c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88c4c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88c50:	89e2      	ldrh	r2, [r4, #14]
   88c52:	8989      	ldrh	r1, [r1, #12]
   88c54:	9319      	str	r3, [sp, #100]	; 0x64
   88c56:	69e3      	ldr	r3, [r4, #28]
   88c58:	f8ad 200e 	strh.w	r2, [sp, #14]
   88c5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   88c5e:	f021 0102 	bic.w	r1, r1, #2
   88c62:	9307      	str	r3, [sp, #28]
   88c64:	a816      	add	r0, sp, #88	; 0x58
   88c66:	ab1a      	add	r3, sp, #104	; 0x68
   88c68:	f8ad 100c 	strh.w	r1, [sp, #12]
   88c6c:	f8cd e018 	str.w	lr, [sp, #24]
   88c70:	9209      	str	r2, [sp, #36]	; 0x24
   88c72:	9300      	str	r3, [sp, #0]
   88c74:	9304      	str	r3, [sp, #16]
   88c76:	f8cd c008 	str.w	ip, [sp, #8]
   88c7a:	f8cd c014 	str.w	ip, [sp, #20]
   88c7e:	f001 fd4d 	bl	8a71c <__retarget_lock_init_recursive>
   88c82:	462a      	mov	r2, r5
   88c84:	463b      	mov	r3, r7
   88c86:	4669      	mov	r1, sp
   88c88:	4630      	mov	r0, r6
   88c8a:	f7ff f93f 	bl	87f0c <_vfiprintf_r>
   88c8e:	1e05      	subs	r5, r0, #0
   88c90:	db07      	blt.n	88ca2 <__sbprintf+0x6a>
   88c92:	4630      	mov	r0, r6
   88c94:	4669      	mov	r1, sp
   88c96:	f001 f917 	bl	89ec8 <_fflush_r>
   88c9a:	2800      	cmp	r0, #0
   88c9c:	bf18      	it	ne
   88c9e:	f04f 35ff 	movne.w	r5, #4294967295
   88ca2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88ca6:	065b      	lsls	r3, r3, #25
   88ca8:	d503      	bpl.n	88cb2 <__sbprintf+0x7a>
   88caa:	89a3      	ldrh	r3, [r4, #12]
   88cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88cb0:	81a3      	strh	r3, [r4, #12]
   88cb2:	9816      	ldr	r0, [sp, #88]	; 0x58
   88cb4:	f001 fd34 	bl	8a720 <__retarget_lock_close_recursive>
   88cb8:	4628      	mov	r0, r5
   88cba:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   88cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088cc0 <__swsetup_r>:
   88cc0:	b538      	push	{r3, r4, r5, lr}
   88cc2:	4b32      	ldr	r3, [pc, #200]	; (88d8c <__swsetup_r+0xcc>)
   88cc4:	4605      	mov	r5, r0
   88cc6:	6818      	ldr	r0, [r3, #0]
   88cc8:	460c      	mov	r4, r1
   88cca:	b110      	cbz	r0, 88cd2 <__swsetup_r+0x12>
   88ccc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88cce:	2b00      	cmp	r3, #0
   88cd0:	d03c      	beq.n	88d4c <__swsetup_r+0x8c>
   88cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88cd6:	0718      	lsls	r0, r3, #28
   88cd8:	b29a      	uxth	r2, r3
   88cda:	d50c      	bpl.n	88cf6 <__swsetup_r+0x36>
   88cdc:	6921      	ldr	r1, [r4, #16]
   88cde:	b1a9      	cbz	r1, 88d0c <__swsetup_r+0x4c>
   88ce0:	f012 0001 	ands.w	r0, r2, #1
   88ce4:	d022      	beq.n	88d2c <__swsetup_r+0x6c>
   88ce6:	2500      	movs	r5, #0
   88ce8:	6960      	ldr	r0, [r4, #20]
   88cea:	60a5      	str	r5, [r4, #8]
   88cec:	4240      	negs	r0, r0
   88cee:	61a0      	str	r0, [r4, #24]
   88cf0:	b311      	cbz	r1, 88d38 <__swsetup_r+0x78>
   88cf2:	2000      	movs	r0, #0
   88cf4:	bd38      	pop	{r3, r4, r5, pc}
   88cf6:	06d1      	lsls	r1, r2, #27
   88cf8:	d53f      	bpl.n	88d7a <__swsetup_r+0xba>
   88cfa:	0752      	lsls	r2, r2, #29
   88cfc:	d429      	bmi.n	88d52 <__swsetup_r+0x92>
   88cfe:	6921      	ldr	r1, [r4, #16]
   88d00:	f043 0308 	orr.w	r3, r3, #8
   88d04:	81a3      	strh	r3, [r4, #12]
   88d06:	b29a      	uxth	r2, r3
   88d08:	2900      	cmp	r1, #0
   88d0a:	d1e9      	bne.n	88ce0 <__swsetup_r+0x20>
   88d0c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88d10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   88d14:	d0e4      	beq.n	88ce0 <__swsetup_r+0x20>
   88d16:	4628      	mov	r0, r5
   88d18:	4621      	mov	r1, r4
   88d1a:	f001 fd35 	bl	8a788 <__smakebuf_r>
   88d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d22:	6921      	ldr	r1, [r4, #16]
   88d24:	b29a      	uxth	r2, r3
   88d26:	f012 0001 	ands.w	r0, r2, #1
   88d2a:	d1dc      	bne.n	88ce6 <__swsetup_r+0x26>
   88d2c:	0795      	lsls	r5, r2, #30
   88d2e:	bf58      	it	pl
   88d30:	6960      	ldrpl	r0, [r4, #20]
   88d32:	60a0      	str	r0, [r4, #8]
   88d34:	2900      	cmp	r1, #0
   88d36:	d1dc      	bne.n	88cf2 <__swsetup_r+0x32>
   88d38:	0612      	lsls	r2, r2, #24
   88d3a:	bf58      	it	pl
   88d3c:	4608      	movpl	r0, r1
   88d3e:	d5d9      	bpl.n	88cf4 <__swsetup_r+0x34>
   88d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d44:	f04f 30ff 	mov.w	r0, #4294967295
   88d48:	81a3      	strh	r3, [r4, #12]
   88d4a:	bd38      	pop	{r3, r4, r5, pc}
   88d4c:	f001 f918 	bl	89f80 <__sinit>
   88d50:	e7bf      	b.n	88cd2 <__swsetup_r+0x12>
   88d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88d54:	b151      	cbz	r1, 88d6c <__swsetup_r+0xac>
   88d56:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88d5a:	4291      	cmp	r1, r2
   88d5c:	d004      	beq.n	88d68 <__swsetup_r+0xa8>
   88d5e:	4628      	mov	r0, r5
   88d60:	f001 fa32 	bl	8a1c8 <_free_r>
   88d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88d68:	2200      	movs	r2, #0
   88d6a:	6322      	str	r2, [r4, #48]	; 0x30
   88d6c:	2200      	movs	r2, #0
   88d6e:	6921      	ldr	r1, [r4, #16]
   88d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88d74:	e9c4 1200 	strd	r1, r2, [r4]
   88d78:	e7c2      	b.n	88d00 <__swsetup_r+0x40>
   88d7a:	2209      	movs	r2, #9
   88d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d80:	602a      	str	r2, [r5, #0]
   88d82:	f04f 30ff 	mov.w	r0, #4294967295
   88d86:	81a3      	strh	r3, [r4, #12]
   88d88:	bd38      	pop	{r3, r4, r5, pc}
   88d8a:	bf00      	nop
   88d8c:	200009ac 	.word	0x200009ac

00088d90 <register_fini>:
   88d90:	4b02      	ldr	r3, [pc, #8]	; (88d9c <register_fini+0xc>)
   88d92:	b113      	cbz	r3, 88d9a <register_fini+0xa>
   88d94:	4802      	ldr	r0, [pc, #8]	; (88da0 <register_fini+0x10>)
   88d96:	f000 b805 	b.w	88da4 <atexit>
   88d9a:	4770      	bx	lr
   88d9c:	00000000 	.word	0x00000000
   88da0:	00089ff5 	.word	0x00089ff5

00088da4 <atexit>:
   88da4:	2300      	movs	r3, #0
   88da6:	4601      	mov	r1, r0
   88da8:	461a      	mov	r2, r3
   88daa:	4618      	mov	r0, r3
   88dac:	f002 bfca 	b.w	8bd44 <__register_exitproc>

00088db0 <quorem>:
   88db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88db4:	6903      	ldr	r3, [r0, #16]
   88db6:	690d      	ldr	r5, [r1, #16]
   88db8:	b083      	sub	sp, #12
   88dba:	42ab      	cmp	r3, r5
   88dbc:	f2c0 8084 	blt.w	88ec8 <quorem+0x118>
   88dc0:	3d01      	subs	r5, #1
   88dc2:	f101 0614 	add.w	r6, r1, #20
   88dc6:	f100 0914 	add.w	r9, r0, #20
   88dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   88dce:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88dd2:	3301      	adds	r3, #1
   88dd4:	468e      	mov	lr, r1
   88dd6:	00a9      	lsls	r1, r5, #2
   88dd8:	9100      	str	r1, [sp, #0]
   88dda:	429a      	cmp	r2, r3
   88ddc:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   88de0:	4682      	mov	sl, r0
   88de2:	fbb2 f7f3 	udiv	r7, r2, r3
   88de6:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   88dea:	9101      	str	r1, [sp, #4]
   88dec:	d337      	bcc.n	88e5e <quorem+0xae>
   88dee:	2200      	movs	r2, #0
   88df0:	46b4      	mov	ip, r6
   88df2:	4614      	mov	r4, r2
   88df4:	4648      	mov	r0, r9
   88df6:	f85c 3b04 	ldr.w	r3, [ip], #4
   88dfa:	6801      	ldr	r1, [r0, #0]
   88dfc:	fa1f fb83 	uxth.w	fp, r3
   88e00:	fb07 220b 	mla	r2, r7, fp, r2
   88e04:	0c1b      	lsrs	r3, r3, #16
   88e06:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   88e0a:	fb07 bb03 	mla	fp, r7, r3, fp
   88e0e:	b293      	uxth	r3, r2
   88e10:	1ae3      	subs	r3, r4, r3
   88e12:	b28a      	uxth	r2, r1
   88e14:	fa1f f48b 	uxth.w	r4, fp
   88e18:	4413      	add	r3, r2
   88e1a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   88e1e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   88e22:	b29b      	uxth	r3, r3
   88e24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   88e28:	45e0      	cmp	r8, ip
   88e2a:	f840 3b04 	str.w	r3, [r0], #4
   88e2e:	ea4f 4424 	mov.w	r4, r4, asr #16
   88e32:	ea4f 421b 	mov.w	r2, fp, lsr #16
   88e36:	d2de      	bcs.n	88df6 <quorem+0x46>
   88e38:	9b00      	ldr	r3, [sp, #0]
   88e3a:	f859 3003 	ldr.w	r3, [r9, r3]
   88e3e:	b973      	cbnz	r3, 88e5e <quorem+0xae>
   88e40:	9b01      	ldr	r3, [sp, #4]
   88e42:	3b04      	subs	r3, #4
   88e44:	4599      	cmp	r9, r3
   88e46:	d304      	bcc.n	88e52 <quorem+0xa2>
   88e48:	e007      	b.n	88e5a <quorem+0xaa>
   88e4a:	4599      	cmp	r9, r3
   88e4c:	f105 35ff 	add.w	r5, r5, #4294967295
   88e50:	d203      	bcs.n	88e5a <quorem+0xaa>
   88e52:	f853 2904 	ldr.w	r2, [r3], #-4
   88e56:	2a00      	cmp	r2, #0
   88e58:	d0f7      	beq.n	88e4a <quorem+0x9a>
   88e5a:	f8ca 5010 	str.w	r5, [sl, #16]
   88e5e:	4671      	mov	r1, lr
   88e60:	4650      	mov	r0, sl
   88e62:	f002 fab1 	bl	8b3c8 <__mcmp>
   88e66:	2800      	cmp	r0, #0
   88e68:	db2a      	blt.n	88ec0 <quorem+0x110>
   88e6a:	4648      	mov	r0, r9
   88e6c:	2300      	movs	r3, #0
   88e6e:	3701      	adds	r7, #1
   88e70:	f856 1b04 	ldr.w	r1, [r6], #4
   88e74:	6804      	ldr	r4, [r0, #0]
   88e76:	b28a      	uxth	r2, r1
   88e78:	1a9a      	subs	r2, r3, r2
   88e7a:	0c0b      	lsrs	r3, r1, #16
   88e7c:	b2a1      	uxth	r1, r4
   88e7e:	440a      	add	r2, r1
   88e80:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   88e84:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88e88:	b292      	uxth	r2, r2
   88e8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88e8e:	45b0      	cmp	r8, r6
   88e90:	f840 2b04 	str.w	r2, [r0], #4
   88e94:	ea4f 4323 	mov.w	r3, r3, asr #16
   88e98:	d2ea      	bcs.n	88e70 <quorem+0xc0>
   88e9a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88e9e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   88ea2:	b96a      	cbnz	r2, 88ec0 <quorem+0x110>
   88ea4:	3b04      	subs	r3, #4
   88ea6:	4599      	cmp	r9, r3
   88ea8:	d304      	bcc.n	88eb4 <quorem+0x104>
   88eaa:	e007      	b.n	88ebc <quorem+0x10c>
   88eac:	4599      	cmp	r9, r3
   88eae:	f105 35ff 	add.w	r5, r5, #4294967295
   88eb2:	d203      	bcs.n	88ebc <quorem+0x10c>
   88eb4:	f853 2904 	ldr.w	r2, [r3], #-4
   88eb8:	2a00      	cmp	r2, #0
   88eba:	d0f7      	beq.n	88eac <quorem+0xfc>
   88ebc:	f8ca 5010 	str.w	r5, [sl, #16]
   88ec0:	4638      	mov	r0, r7
   88ec2:	b003      	add	sp, #12
   88ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ec8:	2000      	movs	r0, #0
   88eca:	b003      	add	sp, #12
   88ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088ed0 <_dtoa_r>:
   88ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88ed4:	4616      	mov	r6, r2
   88ed6:	461f      	mov	r7, r3
   88ed8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88eda:	b09b      	sub	sp, #108	; 0x6c
   88edc:	4604      	mov	r4, r0
   88ede:	e9cd 6704 	strd	r6, r7, [sp, #16]
   88ee2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   88ee4:	b141      	cbz	r1, 88ef8 <_dtoa_r+0x28>
   88ee6:	2301      	movs	r3, #1
   88ee8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88eea:	4093      	lsls	r3, r2
   88eec:	e9c1 2301 	strd	r2, r3, [r1, #4]
   88ef0:	f002 f83c 	bl	8af6c <_Bfree>
   88ef4:	2300      	movs	r3, #0
   88ef6:	6423      	str	r3, [r4, #64]	; 0x40
   88ef8:	f1b7 0900 	subs.w	r9, r7, #0
   88efc:	bfb4      	ite	lt
   88efe:	2301      	movlt	r3, #1
   88f00:	2300      	movge	r3, #0
   88f02:	602b      	str	r3, [r5, #0]
   88f04:	4b76      	ldr	r3, [pc, #472]	; (890e0 <_dtoa_r+0x210>)
   88f06:	bfbc      	itt	lt
   88f08:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   88f0c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   88f10:	ea33 0309 	bics.w	r3, r3, r9
   88f14:	f000 80ab 	beq.w	8906e <_dtoa_r+0x19e>
   88f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88f1c:	4610      	mov	r0, r2
   88f1e:	4619      	mov	r1, r3
   88f20:	2200      	movs	r2, #0
   88f22:	2300      	movs	r3, #0
   88f24:	e9cd 0108 	strd	r0, r1, [sp, #32]
   88f28:	f003 fcf8 	bl	8c91c <__aeabi_dcmpeq>
   88f2c:	4680      	mov	r8, r0
   88f2e:	b170      	cbz	r0, 88f4e <_dtoa_r+0x7e>
   88f30:	2301      	movs	r3, #1
   88f32:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88f34:	6013      	str	r3, [r2, #0]
   88f36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88f38:	2b00      	cmp	r3, #0
   88f3a:	f000 82c2 	beq.w	894c2 <_dtoa_r+0x5f2>
   88f3e:	4869      	ldr	r0, [pc, #420]	; (890e4 <_dtoa_r+0x214>)
   88f40:	6018      	str	r0, [r3, #0]
   88f42:	1e43      	subs	r3, r0, #1
   88f44:	9303      	str	r3, [sp, #12]
   88f46:	9803      	ldr	r0, [sp, #12]
   88f48:	b01b      	add	sp, #108	; 0x6c
   88f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f4e:	aa18      	add	r2, sp, #96	; 0x60
   88f50:	ab19      	add	r3, sp, #100	; 0x64
   88f52:	e9cd 3200 	strd	r3, r2, [sp]
   88f56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88f5a:	4620      	mov	r0, r4
   88f5c:	f002 fafa 	bl	8b554 <__d2b>
   88f60:	ea5f 5519 	movs.w	r5, r9, lsr #20
   88f64:	4682      	mov	sl, r0
   88f66:	f040 8098 	bne.w	8909a <_dtoa_r+0x1ca>
   88f6a:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   88f6e:	4445      	add	r5, r8
   88f70:	f205 4032 	addw	r0, r5, #1074	; 0x432
   88f74:	2820      	cmp	r0, #32
   88f76:	f340 8390 	ble.w	8969a <_dtoa_r+0x7ca>
   88f7a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   88f7e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   88f82:	fa09 f903 	lsl.w	r9, r9, r3
   88f86:	fa26 f000 	lsr.w	r0, r6, r0
   88f8a:	ea49 0000 	orr.w	r0, r9, r0
   88f8e:	f003 f9e3 	bl	8c358 <__aeabi_ui2d>
   88f92:	2201      	movs	r2, #1
   88f94:	3d01      	subs	r5, #1
   88f96:	920f      	str	r2, [sp, #60]	; 0x3c
   88f98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   88f9c:	2200      	movs	r2, #0
   88f9e:	4b52      	ldr	r3, [pc, #328]	; (890e8 <_dtoa_r+0x218>)
   88fa0:	f003 f89c 	bl	8c0dc <__aeabi_dsub>
   88fa4:	a348      	add	r3, pc, #288	; (adr r3, 890c8 <_dtoa_r+0x1f8>)
   88fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   88faa:	f003 fa4f 	bl	8c44c <__aeabi_dmul>
   88fae:	a348      	add	r3, pc, #288	; (adr r3, 890d0 <_dtoa_r+0x200>)
   88fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   88fb4:	f003 f894 	bl	8c0e0 <__adddf3>
   88fb8:	4606      	mov	r6, r0
   88fba:	4628      	mov	r0, r5
   88fbc:	460f      	mov	r7, r1
   88fbe:	f003 f9db 	bl	8c378 <__aeabi_i2d>
   88fc2:	a345      	add	r3, pc, #276	; (adr r3, 890d8 <_dtoa_r+0x208>)
   88fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   88fc8:	f003 fa40 	bl	8c44c <__aeabi_dmul>
   88fcc:	4602      	mov	r2, r0
   88fce:	460b      	mov	r3, r1
   88fd0:	4630      	mov	r0, r6
   88fd2:	4639      	mov	r1, r7
   88fd4:	f003 f884 	bl	8c0e0 <__adddf3>
   88fd8:	4606      	mov	r6, r0
   88fda:	460f      	mov	r7, r1
   88fdc:	f003 fce6 	bl	8c9ac <__aeabi_d2iz>
   88fe0:	2200      	movs	r2, #0
   88fe2:	4683      	mov	fp, r0
   88fe4:	2300      	movs	r3, #0
   88fe6:	4630      	mov	r0, r6
   88fe8:	4639      	mov	r1, r7
   88fea:	f003 fca1 	bl	8c930 <__aeabi_dcmplt>
   88fee:	2800      	cmp	r0, #0
   88ff0:	f040 825a 	bne.w	894a8 <_dtoa_r+0x5d8>
   88ff4:	f1bb 0f16 	cmp.w	fp, #22
   88ff8:	f200 8248 	bhi.w	8948c <_dtoa_r+0x5bc>
   88ffc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89000:	4b3a      	ldr	r3, [pc, #232]	; (890ec <_dtoa_r+0x21c>)
   89002:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89006:	e9d3 2300 	ldrd	r2, r3, [r3]
   8900a:	f003 fc91 	bl	8c930 <__aeabi_dcmplt>
   8900e:	2800      	cmp	r0, #0
   89010:	d072      	beq.n	890f8 <_dtoa_r+0x228>
   89012:	2300      	movs	r3, #0
   89014:	eba8 0505 	sub.w	r5, r8, r5
   89018:	930e      	str	r3, [sp, #56]	; 0x38
   8901a:	1e6b      	subs	r3, r5, #1
   8901c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89020:	9306      	str	r3, [sp, #24]
   89022:	f100 823b 	bmi.w	8949c <_dtoa_r+0x5cc>
   89026:	2300      	movs	r3, #0
   89028:	930b      	str	r3, [sp, #44]	; 0x2c
   8902a:	f1bb 0f00 	cmp.w	fp, #0
   8902e:	da6b      	bge.n	89108 <_dtoa_r+0x238>
   89030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89032:	f8cd b01c 	str.w	fp, [sp, #28]
   89036:	eba3 030b 	sub.w	r3, r3, fp
   8903a:	930b      	str	r3, [sp, #44]	; 0x2c
   8903c:	f1cb 0300 	rsb	r3, fp, #0
   89040:	930d      	str	r3, [sp, #52]	; 0x34
   89042:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89044:	f04f 0b00 	mov.w	fp, #0
   89048:	2b09      	cmp	r3, #9
   8904a:	d866      	bhi.n	8911a <_dtoa_r+0x24a>
   8904c:	2b05      	cmp	r3, #5
   8904e:	f340 8322 	ble.w	89696 <_dtoa_r+0x7c6>
   89052:	2500      	movs	r5, #0
   89054:	3b04      	subs	r3, #4
   89056:	9324      	str	r3, [sp, #144]	; 0x90
   89058:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8905a:	3b02      	subs	r3, #2
   8905c:	2b03      	cmp	r3, #3
   8905e:	f200 866e 	bhi.w	89d3e <_dtoa_r+0xe6e>
   89062:	e8df f013 	tbh	[pc, r3, lsl #1]
   89066:	043b      	.short	0x043b
   89068:	042f0438 	.word	0x042f0438
   8906c:	0412      	.short	0x0412
   8906e:	f242 730f 	movw	r3, #9999	; 0x270f
   89072:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89074:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89078:	6013      	str	r3, [r2, #0]
   8907a:	ea59 0306 	orrs.w	r3, r9, r6
   8907e:	d11c      	bne.n	890ba <_dtoa_r+0x1ea>
   89080:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89082:	2b00      	cmp	r3, #0
   89084:	f000 8657 	beq.w	89d36 <_dtoa_r+0xe66>
   89088:	4b19      	ldr	r3, [pc, #100]	; (890f0 <_dtoa_r+0x220>)
   8908a:	9303      	str	r3, [sp, #12]
   8908c:	3308      	adds	r3, #8
   8908e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89090:	9803      	ldr	r0, [sp, #12]
   89092:	6013      	str	r3, [r2, #0]
   89094:	b01b      	add	sp, #108	; 0x6c
   89096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8909a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8909e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   890a2:	4608      	mov	r0, r1
   890a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   890a8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   890ac:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   890b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   890b4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   890b8:	e770      	b.n	88f9c <_dtoa_r+0xcc>
   890ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   890bc:	2b00      	cmp	r3, #0
   890be:	f040 83c8 	bne.w	89852 <_dtoa_r+0x982>
   890c2:	4b0c      	ldr	r3, [pc, #48]	; (890f4 <_dtoa_r+0x224>)
   890c4:	9303      	str	r3, [sp, #12]
   890c6:	e73e      	b.n	88f46 <_dtoa_r+0x76>
   890c8:	636f4361 	.word	0x636f4361
   890cc:	3fd287a7 	.word	0x3fd287a7
   890d0:	8b60c8b3 	.word	0x8b60c8b3
   890d4:	3fc68a28 	.word	0x3fc68a28
   890d8:	509f79fb 	.word	0x509f79fb
   890dc:	3fd34413 	.word	0x3fd34413
   890e0:	7ff00000 	.word	0x7ff00000
   890e4:	0008cc19 	.word	0x0008cc19
   890e8:	3ff80000 	.word	0x3ff80000
   890ec:	0008cdb8 	.word	0x0008cdb8
   890f0:	0008cc60 	.word	0x0008cc60
   890f4:	0008cc5c 	.word	0x0008cc5c
   890f8:	eba8 0505 	sub.w	r5, r8, r5
   890fc:	1e6b      	subs	r3, r5, #1
   890fe:	9306      	str	r3, [sp, #24]
   89100:	f100 84a9 	bmi.w	89a56 <_dtoa_r+0xb86>
   89104:	900e      	str	r0, [sp, #56]	; 0x38
   89106:	900b      	str	r0, [sp, #44]	; 0x2c
   89108:	9b06      	ldr	r3, [sp, #24]
   8910a:	445b      	add	r3, fp
   8910c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89110:	2300      	movs	r3, #0
   89112:	930d      	str	r3, [sp, #52]	; 0x34
   89114:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89116:	2b09      	cmp	r3, #9
   89118:	d998      	bls.n	8904c <_dtoa_r+0x17c>
   8911a:	2300      	movs	r3, #0
   8911c:	2501      	movs	r5, #1
   8911e:	9324      	str	r3, [sp, #144]	; 0x90
   89120:	9325      	str	r3, [sp, #148]	; 0x94
   89122:	f04f 33ff 	mov.w	r3, #4294967295
   89126:	950c      	str	r5, [sp, #48]	; 0x30
   89128:	930a      	str	r3, [sp, #40]	; 0x28
   8912a:	2100      	movs	r1, #0
   8912c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8912e:	6461      	str	r1, [r4, #68]	; 0x44
   89130:	9312      	str	r3, [sp, #72]	; 0x48
   89132:	4620      	mov	r0, r4
   89134:	f001 fef4 	bl	8af20 <_Balloc>
   89138:	9003      	str	r0, [sp, #12]
   8913a:	2800      	cmp	r0, #0
   8913c:	f000 8607 	beq.w	89d4e <_dtoa_r+0xe7e>
   89140:	9b03      	ldr	r3, [sp, #12]
   89142:	6423      	str	r3, [r4, #64]	; 0x40
   89144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89146:	2b0e      	cmp	r3, #14
   89148:	f200 80e9 	bhi.w	8931e <_dtoa_r+0x44e>
   8914c:	2d00      	cmp	r5, #0
   8914e:	f000 80e6 	beq.w	8931e <_dtoa_r+0x44e>
   89152:	9907      	ldr	r1, [sp, #28]
   89154:	2900      	cmp	r1, #0
   89156:	f340 8452 	ble.w	899fe <_dtoa_r+0xb2e>
   8915a:	4bb5      	ldr	r3, [pc, #724]	; (89430 <_dtoa_r+0x560>)
   8915c:	f001 020f 	and.w	r2, r1, #15
   89160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89164:	05c8      	lsls	r0, r1, #23
   89166:	ea4f 1521 	mov.w	r5, r1, asr #4
   8916a:	e9d3 6700 	ldrd	r6, r7, [r3]
   8916e:	f140 83ee 	bpl.w	8994e <_dtoa_r+0xa7e>
   89172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89176:	4baf      	ldr	r3, [pc, #700]	; (89434 <_dtoa_r+0x564>)
   89178:	f04f 0903 	mov.w	r9, #3
   8917c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89180:	f003 fa8e 	bl	8c6a0 <__aeabi_ddiv>
   89184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89188:	f005 050f 	and.w	r5, r5, #15
   8918c:	b18d      	cbz	r5, 891b2 <_dtoa_r+0x2e2>
   8918e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 89434 <_dtoa_r+0x564>
   89192:	07e9      	lsls	r1, r5, #31
   89194:	d509      	bpl.n	891aa <_dtoa_r+0x2da>
   89196:	e9d8 2300 	ldrd	r2, r3, [r8]
   8919a:	4630      	mov	r0, r6
   8919c:	4639      	mov	r1, r7
   8919e:	f003 f955 	bl	8c44c <__aeabi_dmul>
   891a2:	4606      	mov	r6, r0
   891a4:	460f      	mov	r7, r1
   891a6:	f109 0901 	add.w	r9, r9, #1
   891aa:	106d      	asrs	r5, r5, #1
   891ac:	f108 0808 	add.w	r8, r8, #8
   891b0:	d1ef      	bne.n	89192 <_dtoa_r+0x2c2>
   891b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   891b6:	4632      	mov	r2, r6
   891b8:	463b      	mov	r3, r7
   891ba:	f003 fa71 	bl	8c6a0 <__aeabi_ddiv>
   891be:	4606      	mov	r6, r0
   891c0:	460f      	mov	r7, r1
   891c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   891c4:	b143      	cbz	r3, 891d8 <_dtoa_r+0x308>
   891c6:	2200      	movs	r2, #0
   891c8:	4630      	mov	r0, r6
   891ca:	4639      	mov	r1, r7
   891cc:	4b9a      	ldr	r3, [pc, #616]	; (89438 <_dtoa_r+0x568>)
   891ce:	f003 fbaf 	bl	8c930 <__aeabi_dcmplt>
   891d2:	2800      	cmp	r0, #0
   891d4:	f040 853b 	bne.w	89c4e <_dtoa_r+0xd7e>
   891d8:	4648      	mov	r0, r9
   891da:	f003 f8cd 	bl	8c378 <__aeabi_i2d>
   891de:	4632      	mov	r2, r6
   891e0:	463b      	mov	r3, r7
   891e2:	f003 f933 	bl	8c44c <__aeabi_dmul>
   891e6:	4b95      	ldr	r3, [pc, #596]	; (8943c <_dtoa_r+0x56c>)
   891e8:	2200      	movs	r2, #0
   891ea:	f002 ff79 	bl	8c0e0 <__adddf3>
   891ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   891f0:	4680      	mov	r8, r0
   891f2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   891f6:	2b00      	cmp	r3, #0
   891f8:	f000 83ce 	beq.w	89998 <_dtoa_r+0xac8>
   891fc:	9b07      	ldr	r3, [sp, #28]
   891fe:	9313      	str	r3, [sp, #76]	; 0x4c
   89200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89202:	9310      	str	r3, [sp, #64]	; 0x40
   89204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89206:	2b00      	cmp	r3, #0
   89208:	f000 84b7 	beq.w	89b7a <_dtoa_r+0xcaa>
   8920c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8920e:	4b88      	ldr	r3, [pc, #544]	; (89430 <_dtoa_r+0x560>)
   89210:	2000      	movs	r0, #0
   89212:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8921a:	4989      	ldr	r1, [pc, #548]	; (89440 <_dtoa_r+0x570>)
   8921c:	f003 fa40 	bl	8c6a0 <__aeabi_ddiv>
   89220:	4642      	mov	r2, r8
   89222:	464b      	mov	r3, r9
   89224:	f002 ff5a 	bl	8c0dc <__aeabi_dsub>
   89228:	4602      	mov	r2, r0
   8922a:	460b      	mov	r3, r1
   8922c:	4630      	mov	r0, r6
   8922e:	4639      	mov	r1, r7
   89230:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89234:	f003 fbba 	bl	8c9ac <__aeabi_d2iz>
   89238:	4680      	mov	r8, r0
   8923a:	f003 f89d 	bl	8c378 <__aeabi_i2d>
   8923e:	4602      	mov	r2, r0
   89240:	460b      	mov	r3, r1
   89242:	4630      	mov	r0, r6
   89244:	4639      	mov	r1, r7
   89246:	f002 ff49 	bl	8c0dc <__aeabi_dsub>
   8924a:	9d03      	ldr	r5, [sp, #12]
   8924c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89250:	4606      	mov	r6, r0
   89252:	460f      	mov	r7, r1
   89254:	4602      	mov	r2, r0
   89256:	f805 3b01 	strb.w	r3, [r5], #1
   8925a:	460b      	mov	r3, r1
   8925c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89260:	f003 fb84 	bl	8c96c <__aeabi_dcmpgt>
   89264:	2800      	cmp	r0, #0
   89266:	f040 853b 	bne.w	89ce0 <_dtoa_r+0xe10>
   8926a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8926e:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   89272:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   89276:	f04f 0900 	mov.w	r9, #0
   8927a:	9410      	str	r4, [sp, #64]	; 0x40
   8927c:	e02a      	b.n	892d4 <_dtoa_r+0x404>
   8927e:	f109 0901 	add.w	r9, r9, #1
   89282:	45c1      	cmp	r9, r8
   89284:	da48      	bge.n	89318 <_dtoa_r+0x448>
   89286:	4650      	mov	r0, sl
   89288:	4659      	mov	r1, fp
   8928a:	2200      	movs	r2, #0
   8928c:	4b6d      	ldr	r3, [pc, #436]	; (89444 <_dtoa_r+0x574>)
   8928e:	f003 f8dd 	bl	8c44c <__aeabi_dmul>
   89292:	2200      	movs	r2, #0
   89294:	4b6b      	ldr	r3, [pc, #428]	; (89444 <_dtoa_r+0x574>)
   89296:	4682      	mov	sl, r0
   89298:	468b      	mov	fp, r1
   8929a:	4630      	mov	r0, r6
   8929c:	4639      	mov	r1, r7
   8929e:	f003 f8d5 	bl	8c44c <__aeabi_dmul>
   892a2:	460f      	mov	r7, r1
   892a4:	4606      	mov	r6, r0
   892a6:	f003 fb81 	bl	8c9ac <__aeabi_d2iz>
   892aa:	4604      	mov	r4, r0
   892ac:	f003 f864 	bl	8c378 <__aeabi_i2d>
   892b0:	4602      	mov	r2, r0
   892b2:	460b      	mov	r3, r1
   892b4:	4630      	mov	r0, r6
   892b6:	4639      	mov	r1, r7
   892b8:	f002 ff10 	bl	8c0dc <__aeabi_dsub>
   892bc:	3430      	adds	r4, #48	; 0x30
   892be:	4652      	mov	r2, sl
   892c0:	465b      	mov	r3, fp
   892c2:	f805 4b01 	strb.w	r4, [r5], #1
   892c6:	4606      	mov	r6, r0
   892c8:	460f      	mov	r7, r1
   892ca:	f003 fb31 	bl	8c930 <__aeabi_dcmplt>
   892ce:	2800      	cmp	r0, #0
   892d0:	f040 8503 	bne.w	89cda <_dtoa_r+0xe0a>
   892d4:	4632      	mov	r2, r6
   892d6:	463b      	mov	r3, r7
   892d8:	2000      	movs	r0, #0
   892da:	4957      	ldr	r1, [pc, #348]	; (89438 <_dtoa_r+0x568>)
   892dc:	f002 fefe 	bl	8c0dc <__aeabi_dsub>
   892e0:	4652      	mov	r2, sl
   892e2:	465b      	mov	r3, fp
   892e4:	f003 fb24 	bl	8c930 <__aeabi_dcmplt>
   892e8:	2800      	cmp	r0, #0
   892ea:	d0c8      	beq.n	8927e <_dtoa_r+0x3ae>
   892ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   892ee:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   892f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   892f4:	9a03      	ldr	r2, [sp, #12]
   892f6:	9307      	str	r3, [sp, #28]
   892f8:	e002      	b.n	89300 <_dtoa_r+0x430>
   892fa:	4295      	cmp	r5, r2
   892fc:	f000 84d2 	beq.w	89ca4 <_dtoa_r+0xdd4>
   89300:	46a9      	mov	r9, r5
   89302:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   89306:	2b39      	cmp	r3, #57	; 0x39
   89308:	d0f7      	beq.n	892fa <_dtoa_r+0x42a>
   8930a:	3301      	adds	r3, #1
   8930c:	b2db      	uxtb	r3, r3
   8930e:	702b      	strb	r3, [r5, #0]
   89310:	9b07      	ldr	r3, [sp, #28]
   89312:	3301      	adds	r3, #1
   89314:	9307      	str	r3, [sp, #28]
   89316:	e1a0      	b.n	8965a <_dtoa_r+0x78a>
   89318:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8931a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8931e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89320:	2b00      	cmp	r3, #0
   89322:	f2c0 8093 	blt.w	8944c <_dtoa_r+0x57c>
   89326:	9a07      	ldr	r2, [sp, #28]
   89328:	2a0e      	cmp	r2, #14
   8932a:	f300 808f 	bgt.w	8944c <_dtoa_r+0x57c>
   8932e:	4b40      	ldr	r3, [pc, #256]	; (89430 <_dtoa_r+0x560>)
   89330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89334:	e9d3 2300 	ldrd	r2, r3, [r3]
   89338:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8933c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8933e:	2b00      	cmp	r3, #0
   89340:	da1a      	bge.n	89378 <_dtoa_r+0x4a8>
   89342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89344:	2b00      	cmp	r3, #0
   89346:	dc17      	bgt.n	89378 <_dtoa_r+0x4a8>
   89348:	f040 833f 	bne.w	899ca <_dtoa_r+0xafa>
   8934c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89350:	2200      	movs	r2, #0
   89352:	4b3d      	ldr	r3, [pc, #244]	; (89448 <_dtoa_r+0x578>)
   89354:	f003 f87a 	bl	8c44c <__aeabi_dmul>
   89358:	4602      	mov	r2, r0
   8935a:	460b      	mov	r3, r1
   8935c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89360:	f003 faf0 	bl	8c944 <__aeabi_dcmple>
   89364:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   89368:	4645      	mov	r5, r8
   8936a:	2800      	cmp	r0, #0
   8936c:	f000 82cd 	beq.w	8990a <_dtoa_r+0xa3a>
   89370:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89372:	9f03      	ldr	r7, [sp, #12]
   89374:	43de      	mvns	r6, r3
   89376:	e2d0      	b.n	8991a <_dtoa_r+0xa4a>
   89378:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8937c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89380:	4632      	mov	r2, r6
   89382:	463b      	mov	r3, r7
   89384:	f003 f98c 	bl	8c6a0 <__aeabi_ddiv>
   89388:	f003 fb10 	bl	8c9ac <__aeabi_d2iz>
   8938c:	4680      	mov	r8, r0
   8938e:	f002 fff3 	bl	8c378 <__aeabi_i2d>
   89392:	4632      	mov	r2, r6
   89394:	463b      	mov	r3, r7
   89396:	f003 f859 	bl	8c44c <__aeabi_dmul>
   8939a:	460b      	mov	r3, r1
   8939c:	4602      	mov	r2, r0
   8939e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   893a2:	f002 fe9b 	bl	8c0dc <__aeabi_dsub>
   893a6:	9d03      	ldr	r5, [sp, #12]
   893a8:	f108 0330 	add.w	r3, r8, #48	; 0x30
   893ac:	f805 3b01 	strb.w	r3, [r5], #1
   893b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893b2:	2b01      	cmp	r3, #1
   893b4:	f000 837f 	beq.w	89ab6 <_dtoa_r+0xbe6>
   893b8:	f8cd a018 	str.w	sl, [sp, #24]
   893bc:	f04f 0901 	mov.w	r9, #1
   893c0:	469b      	mov	fp, r3
   893c2:	46aa      	mov	sl, r5
   893c4:	9408      	str	r4, [sp, #32]
   893c6:	e01d      	b.n	89404 <_dtoa_r+0x534>
   893c8:	4632      	mov	r2, r6
   893ca:	463b      	mov	r3, r7
   893cc:	4620      	mov	r0, r4
   893ce:	4629      	mov	r1, r5
   893d0:	f003 f966 	bl	8c6a0 <__aeabi_ddiv>
   893d4:	f003 faea 	bl	8c9ac <__aeabi_d2iz>
   893d8:	4680      	mov	r8, r0
   893da:	f002 ffcd 	bl	8c378 <__aeabi_i2d>
   893de:	4632      	mov	r2, r6
   893e0:	463b      	mov	r3, r7
   893e2:	f003 f833 	bl	8c44c <__aeabi_dmul>
   893e6:	f109 0901 	add.w	r9, r9, #1
   893ea:	460b      	mov	r3, r1
   893ec:	4602      	mov	r2, r0
   893ee:	4629      	mov	r1, r5
   893f0:	4620      	mov	r0, r4
   893f2:	f002 fe73 	bl	8c0dc <__aeabi_dsub>
   893f6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   893fa:	45cb      	cmp	fp, r9
   893fc:	f80a 3b01 	strb.w	r3, [sl], #1
   89400:	f000 8355 	beq.w	89aae <_dtoa_r+0xbde>
   89404:	2200      	movs	r2, #0
   89406:	4b0f      	ldr	r3, [pc, #60]	; (89444 <_dtoa_r+0x574>)
   89408:	f003 f820 	bl	8c44c <__aeabi_dmul>
   8940c:	2200      	movs	r2, #0
   8940e:	2300      	movs	r3, #0
   89410:	4604      	mov	r4, r0
   89412:	460d      	mov	r5, r1
   89414:	f003 fa82 	bl	8c91c <__aeabi_dcmpeq>
   89418:	2800      	cmp	r0, #0
   8941a:	d0d5      	beq.n	893c8 <_dtoa_r+0x4f8>
   8941c:	4655      	mov	r5, sl
   8941e:	9c08      	ldr	r4, [sp, #32]
   89420:	f8dd a018 	ldr.w	sl, [sp, #24]
   89424:	9b07      	ldr	r3, [sp, #28]
   89426:	46a9      	mov	r9, r5
   89428:	3301      	adds	r3, #1
   8942a:	9307      	str	r3, [sp, #28]
   8942c:	e115      	b.n	8965a <_dtoa_r+0x78a>
   8942e:	bf00      	nop
   89430:	0008cdb8 	.word	0x0008cdb8
   89434:	0008cd90 	.word	0x0008cd90
   89438:	3ff00000 	.word	0x3ff00000
   8943c:	401c0000 	.word	0x401c0000
   89440:	3fe00000 	.word	0x3fe00000
   89444:	40240000 	.word	0x40240000
   89448:	40140000 	.word	0x40140000
   8944c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8944e:	2a00      	cmp	r2, #0
   89450:	d03d      	beq.n	894ce <_dtoa_r+0x5fe>
   89452:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89454:	2a01      	cmp	r2, #1
   89456:	f340 82bc 	ble.w	899d2 <_dtoa_r+0xb02>
   8945a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8945c:	1e5f      	subs	r7, r3, #1
   8945e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89460:	42bb      	cmp	r3, r7
   89462:	f2c0 826e 	blt.w	89942 <_dtoa_r+0xa72>
   89466:	1bdf      	subs	r7, r3, r7
   89468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8946a:	2b00      	cmp	r3, #0
   8946c:	f2c0 8354 	blt.w	89b18 <_dtoa_r+0xc48>
   89470:	9a06      	ldr	r2, [sp, #24]
   89472:	4611      	mov	r1, r2
   89474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89476:	4419      	add	r1, r3
   89478:	4616      	mov	r6, r2
   8947a:	441a      	add	r2, r3
   8947c:	9106      	str	r1, [sp, #24]
   8947e:	920b      	str	r2, [sp, #44]	; 0x2c
   89480:	2101      	movs	r1, #1
   89482:	4620      	mov	r0, r4
   89484:	f001 fe1a 	bl	8b0bc <__i2b>
   89488:	4605      	mov	r5, r0
   8948a:	e023      	b.n	894d4 <_dtoa_r+0x604>
   8948c:	2301      	movs	r3, #1
   8948e:	eba8 0505 	sub.w	r5, r8, r5
   89492:	930e      	str	r3, [sp, #56]	; 0x38
   89494:	1e6b      	subs	r3, r5, #1
   89496:	9306      	str	r3, [sp, #24]
   89498:	f57f adc5 	bpl.w	89026 <_dtoa_r+0x156>
   8949c:	f1c5 0301 	rsb	r3, r5, #1
   894a0:	930b      	str	r3, [sp, #44]	; 0x2c
   894a2:	2300      	movs	r3, #0
   894a4:	9306      	str	r3, [sp, #24]
   894a6:	e5c0      	b.n	8902a <_dtoa_r+0x15a>
   894a8:	4658      	mov	r0, fp
   894aa:	f002 ff65 	bl	8c378 <__aeabi_i2d>
   894ae:	4632      	mov	r2, r6
   894b0:	463b      	mov	r3, r7
   894b2:	f003 fa33 	bl	8c91c <__aeabi_dcmpeq>
   894b6:	2800      	cmp	r0, #0
   894b8:	f47f ad9c 	bne.w	88ff4 <_dtoa_r+0x124>
   894bc:	f10b 3bff 	add.w	fp, fp, #4294967295
   894c0:	e598      	b.n	88ff4 <_dtoa_r+0x124>
   894c2:	4bc7      	ldr	r3, [pc, #796]	; (897e0 <_dtoa_r+0x910>)
   894c4:	9303      	str	r3, [sp, #12]
   894c6:	9803      	ldr	r0, [sp, #12]
   894c8:	b01b      	add	sp, #108	; 0x6c
   894ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   894ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   894d0:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   894d4:	2e00      	cmp	r6, #0
   894d6:	dd0c      	ble.n	894f2 <_dtoa_r+0x622>
   894d8:	9a06      	ldr	r2, [sp, #24]
   894da:	2a00      	cmp	r2, #0
   894dc:	dd09      	ble.n	894f2 <_dtoa_r+0x622>
   894de:	42b2      	cmp	r2, r6
   894e0:	4613      	mov	r3, r2
   894e2:	bfa8      	it	ge
   894e4:	4633      	movge	r3, r6
   894e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   894e8:	1af6      	subs	r6, r6, r3
   894ea:	1ac9      	subs	r1, r1, r3
   894ec:	1ad3      	subs	r3, r2, r3
   894ee:	910b      	str	r1, [sp, #44]	; 0x2c
   894f0:	9306      	str	r3, [sp, #24]
   894f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   894f4:	b1d3      	cbz	r3, 8952c <_dtoa_r+0x65c>
   894f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   894f8:	2b00      	cmp	r3, #0
   894fa:	f000 81a3 	beq.w	89844 <_dtoa_r+0x974>
   894fe:	2f00      	cmp	r7, #0
   89500:	dd10      	ble.n	89524 <_dtoa_r+0x654>
   89502:	4629      	mov	r1, r5
   89504:	463a      	mov	r2, r7
   89506:	4620      	mov	r0, r4
   89508:	f001 fe9e 	bl	8b248 <__pow5mult>
   8950c:	4652      	mov	r2, sl
   8950e:	4601      	mov	r1, r0
   89510:	4605      	mov	r5, r0
   89512:	4620      	mov	r0, r4
   89514:	f001 fde8 	bl	8b0e8 <__multiply>
   89518:	4603      	mov	r3, r0
   8951a:	4651      	mov	r1, sl
   8951c:	4620      	mov	r0, r4
   8951e:	469a      	mov	sl, r3
   89520:	f001 fd24 	bl	8af6c <_Bfree>
   89524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89526:	1bda      	subs	r2, r3, r7
   89528:	f040 818d 	bne.w	89846 <_dtoa_r+0x976>
   8952c:	2101      	movs	r1, #1
   8952e:	4620      	mov	r0, r4
   89530:	f001 fdc4 	bl	8b0bc <__i2b>
   89534:	f1bb 0f00 	cmp.w	fp, #0
   89538:	4680      	mov	r8, r0
   8953a:	f300 80b3 	bgt.w	896a4 <_dtoa_r+0x7d4>
   8953e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89540:	2b01      	cmp	r3, #1
   89542:	f340 818a 	ble.w	8985a <_dtoa_r+0x98a>
   89546:	f04f 0900 	mov.w	r9, #0
   8954a:	2001      	movs	r0, #1
   8954c:	f1bb 0f00 	cmp.w	fp, #0
   89550:	f040 80b4 	bne.w	896bc <_dtoa_r+0x7ec>
   89554:	9a06      	ldr	r2, [sp, #24]
   89556:	4410      	add	r0, r2
   89558:	f010 001f 	ands.w	r0, r0, #31
   8955c:	f000 8092 	beq.w	89684 <_dtoa_r+0x7b4>
   89560:	f1c0 0320 	rsb	r3, r0, #32
   89564:	2b04      	cmp	r3, #4
   89566:	f340 83f9 	ble.w	89d5c <_dtoa_r+0xe8c>
   8956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8956c:	f1c0 001c 	rsb	r0, r0, #28
   89570:	4403      	add	r3, r0
   89572:	4402      	add	r2, r0
   89574:	930b      	str	r3, [sp, #44]	; 0x2c
   89576:	4406      	add	r6, r0
   89578:	9206      	str	r2, [sp, #24]
   8957a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8957c:	2b00      	cmp	r3, #0
   8957e:	dd05      	ble.n	8958c <_dtoa_r+0x6bc>
   89580:	4651      	mov	r1, sl
   89582:	461a      	mov	r2, r3
   89584:	4620      	mov	r0, r4
   89586:	f001 feab 	bl	8b2e0 <__lshift>
   8958a:	4682      	mov	sl, r0
   8958c:	9b06      	ldr	r3, [sp, #24]
   8958e:	2b00      	cmp	r3, #0
   89590:	dd05      	ble.n	8959e <_dtoa_r+0x6ce>
   89592:	4641      	mov	r1, r8
   89594:	461a      	mov	r2, r3
   89596:	4620      	mov	r0, r4
   89598:	f001 fea2 	bl	8b2e0 <__lshift>
   8959c:	4680      	mov	r8, r0
   8959e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   895a0:	2b00      	cmp	r3, #0
   895a2:	f040 8135 	bne.w	89810 <_dtoa_r+0x940>
   895a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   895a8:	2b00      	cmp	r3, #0
   895aa:	f340 811b 	ble.w	897e4 <_dtoa_r+0x914>
   895ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   895b0:	2b00      	cmp	r3, #0
   895b2:	f040 809a 	bne.w	896ea <_dtoa_r+0x81a>
   895b6:	9b07      	ldr	r3, [sp, #28]
   895b8:	3301      	adds	r3, #1
   895ba:	9307      	str	r3, [sp, #28]
   895bc:	2601      	movs	r6, #1
   895be:	9f03      	ldr	r7, [sp, #12]
   895c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   895c4:	e007      	b.n	895d6 <_dtoa_r+0x706>
   895c6:	4651      	mov	r1, sl
   895c8:	2300      	movs	r3, #0
   895ca:	220a      	movs	r2, #10
   895cc:	4620      	mov	r0, r4
   895ce:	f001 fcd7 	bl	8af80 <__multadd>
   895d2:	4682      	mov	sl, r0
   895d4:	3601      	adds	r6, #1
   895d6:	4641      	mov	r1, r8
   895d8:	4650      	mov	r0, sl
   895da:	f7ff fbe9 	bl	88db0 <quorem>
   895de:	454e      	cmp	r6, r9
   895e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   895e4:	f807 3b01 	strb.w	r3, [r7], #1
   895e8:	dbed      	blt.n	895c6 <_dtoa_r+0x6f6>
   895ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   895ec:	2600      	movs	r6, #0
   895ee:	2a00      	cmp	r2, #0
   895f0:	bfcc      	ite	gt
   895f2:	4693      	movgt	fp, r2
   895f4:	f04f 0b01 	movle.w	fp, #1
   895f8:	9a03      	ldr	r2, [sp, #12]
   895fa:	4493      	add	fp, r2
   895fc:	4651      	mov	r1, sl
   895fe:	2201      	movs	r2, #1
   89600:	4620      	mov	r0, r4
   89602:	9304      	str	r3, [sp, #16]
   89604:	f001 fe6c 	bl	8b2e0 <__lshift>
   89608:	4641      	mov	r1, r8
   8960a:	4682      	mov	sl, r0
   8960c:	f001 fedc 	bl	8b3c8 <__mcmp>
   89610:	2800      	cmp	r0, #0
   89612:	f340 81a8 	ble.w	89966 <_dtoa_r+0xa96>
   89616:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8961a:	9a03      	ldr	r2, [sp, #12]
   8961c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89620:	e004      	b.n	8962c <_dtoa_r+0x75c>
   89622:	455a      	cmp	r2, fp
   89624:	f000 81e4 	beq.w	899f0 <_dtoa_r+0xb20>
   89628:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8962c:	2b39      	cmp	r3, #57	; 0x39
   8962e:	f10b 0901 	add.w	r9, fp, #1
   89632:	d0f6      	beq.n	89622 <_dtoa_r+0x752>
   89634:	3301      	adds	r3, #1
   89636:	f88b 3000 	strb.w	r3, [fp]
   8963a:	4641      	mov	r1, r8
   8963c:	4620      	mov	r0, r4
   8963e:	f001 fc95 	bl	8af6c <_Bfree>
   89642:	b155      	cbz	r5, 8965a <_dtoa_r+0x78a>
   89644:	b12e      	cbz	r6, 89652 <_dtoa_r+0x782>
   89646:	42ae      	cmp	r6, r5
   89648:	d003      	beq.n	89652 <_dtoa_r+0x782>
   8964a:	4631      	mov	r1, r6
   8964c:	4620      	mov	r0, r4
   8964e:	f001 fc8d 	bl	8af6c <_Bfree>
   89652:	4629      	mov	r1, r5
   89654:	4620      	mov	r0, r4
   89656:	f001 fc89 	bl	8af6c <_Bfree>
   8965a:	4651      	mov	r1, sl
   8965c:	4620      	mov	r0, r4
   8965e:	f001 fc85 	bl	8af6c <_Bfree>
   89662:	2300      	movs	r3, #0
   89664:	f889 3000 	strb.w	r3, [r9]
   89668:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8966a:	461a      	mov	r2, r3
   8966c:	9b07      	ldr	r3, [sp, #28]
   8966e:	6013      	str	r3, [r2, #0]
   89670:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89672:	2b00      	cmp	r3, #0
   89674:	f43f ac67 	beq.w	88f46 <_dtoa_r+0x76>
   89678:	9803      	ldr	r0, [sp, #12]
   8967a:	f8c3 9000 	str.w	r9, [r3]
   8967e:	b01b      	add	sp, #108	; 0x6c
   89680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89684:	201c      	movs	r0, #28
   89686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89688:	4406      	add	r6, r0
   8968a:	4403      	add	r3, r0
   8968c:	930b      	str	r3, [sp, #44]	; 0x2c
   8968e:	9b06      	ldr	r3, [sp, #24]
   89690:	4403      	add	r3, r0
   89692:	9306      	str	r3, [sp, #24]
   89694:	e771      	b.n	8957a <_dtoa_r+0x6aa>
   89696:	2501      	movs	r5, #1
   89698:	e4de      	b.n	89058 <_dtoa_r+0x188>
   8969a:	f1c0 0020 	rsb	r0, r0, #32
   8969e:	fa06 f000 	lsl.w	r0, r6, r0
   896a2:	e474      	b.n	88f8e <_dtoa_r+0xbe>
   896a4:	4601      	mov	r1, r0
   896a6:	465a      	mov	r2, fp
   896a8:	4620      	mov	r0, r4
   896aa:	f001 fdcd 	bl	8b248 <__pow5mult>
   896ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896b0:	4680      	mov	r8, r0
   896b2:	2b01      	cmp	r3, #1
   896b4:	f340 81d1 	ble.w	89a5a <_dtoa_r+0xb8a>
   896b8:	f04f 0900 	mov.w	r9, #0
   896bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   896c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   896c4:	6918      	ldr	r0, [r3, #16]
   896c6:	f001 fca9 	bl	8b01c <__hi0bits>
   896ca:	f1c0 0020 	rsb	r0, r0, #32
   896ce:	e741      	b.n	89554 <_dtoa_r+0x684>
   896d0:	4629      	mov	r1, r5
   896d2:	2300      	movs	r3, #0
   896d4:	220a      	movs	r2, #10
   896d6:	4620      	mov	r0, r4
   896d8:	f001 fc52 	bl	8af80 <__multadd>
   896dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   896de:	4605      	mov	r5, r0
   896e0:	2b00      	cmp	r3, #0
   896e2:	f340 8315 	ble.w	89d10 <_dtoa_r+0xe40>
   896e6:	9707      	str	r7, [sp, #28]
   896e8:	930a      	str	r3, [sp, #40]	; 0x28
   896ea:	2e00      	cmp	r6, #0
   896ec:	f300 8122 	bgt.w	89934 <_dtoa_r+0xa64>
   896f0:	f1b9 0f00 	cmp.w	r9, #0
   896f4:	f040 81f9 	bne.w	89aea <_dtoa_r+0xc1a>
   896f8:	462f      	mov	r7, r5
   896fa:	9903      	ldr	r1, [sp, #12]
   896fc:	9b04      	ldr	r3, [sp, #16]
   896fe:	460e      	mov	r6, r1
   89700:	f003 0201 	and.w	r2, r3, #1
   89704:	1e4b      	subs	r3, r1, #1
   89706:	9924      	ldr	r1, [sp, #144]	; 0x90
   89708:	920c      	str	r2, [sp, #48]	; 0x30
   8970a:	430a      	orrs	r2, r1
   8970c:	920b      	str	r2, [sp, #44]	; 0x2c
   8970e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89710:	441a      	add	r2, r3
   89712:	920a      	str	r2, [sp, #40]	; 0x28
   89714:	4641      	mov	r1, r8
   89716:	4650      	mov	r0, sl
   89718:	f7ff fb4a 	bl	88db0 <quorem>
   8971c:	4629      	mov	r1, r5
   8971e:	4683      	mov	fp, r0
   89720:	4650      	mov	r0, sl
   89722:	f001 fe51 	bl	8b3c8 <__mcmp>
   89726:	463a      	mov	r2, r7
   89728:	4641      	mov	r1, r8
   8972a:	4681      	mov	r9, r0
   8972c:	4620      	mov	r0, r4
   8972e:	f001 fe69 	bl	8b404 <__mdiff>
   89732:	68c2      	ldr	r2, [r0, #12]
   89734:	4601      	mov	r1, r0
   89736:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8973a:	2a00      	cmp	r2, #0
   8973c:	d142      	bne.n	897c4 <_dtoa_r+0x8f4>
   8973e:	9006      	str	r0, [sp, #24]
   89740:	4650      	mov	r0, sl
   89742:	9308      	str	r3, [sp, #32]
   89744:	f001 fe40 	bl	8b3c8 <__mcmp>
   89748:	9906      	ldr	r1, [sp, #24]
   8974a:	9004      	str	r0, [sp, #16]
   8974c:	4620      	mov	r0, r4
   8974e:	f001 fc0d 	bl	8af6c <_Bfree>
   89752:	9a04      	ldr	r2, [sp, #16]
   89754:	9b08      	ldr	r3, [sp, #32]
   89756:	b91a      	cbnz	r2, 89760 <_dtoa_r+0x890>
   89758:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8975a:	2900      	cmp	r1, #0
   8975c:	f000 82cb 	beq.w	89cf6 <_dtoa_r+0xe26>
   89760:	f1b9 0f00 	cmp.w	r9, #0
   89764:	f2c0 8185 	blt.w	89a72 <_dtoa_r+0xba2>
   89768:	9924      	ldr	r1, [sp, #144]	; 0x90
   8976a:	ea41 0909 	orr.w	r9, r1, r9
   8976e:	990c      	ldr	r1, [sp, #48]	; 0x30
   89770:	ea51 0109 	orrs.w	r1, r1, r9
   89774:	f000 817d 	beq.w	89a72 <_dtoa_r+0xba2>
   89778:	2a00      	cmp	r2, #0
   8977a:	f300 81d1 	bgt.w	89b20 <_dtoa_r+0xc50>
   8977e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89780:	f106 0901 	add.w	r9, r6, #1
   89784:	4296      	cmp	r6, r2
   89786:	46cb      	mov	fp, r9
   89788:	7033      	strb	r3, [r6, #0]
   8978a:	f000 81e3 	beq.w	89b54 <_dtoa_r+0xc84>
   8978e:	4651      	mov	r1, sl
   89790:	2300      	movs	r3, #0
   89792:	220a      	movs	r2, #10
   89794:	4620      	mov	r0, r4
   89796:	f001 fbf3 	bl	8af80 <__multadd>
   8979a:	42bd      	cmp	r5, r7
   8979c:	4682      	mov	sl, r0
   8979e:	4629      	mov	r1, r5
   897a0:	f04f 0300 	mov.w	r3, #0
   897a4:	f04f 020a 	mov.w	r2, #10
   897a8:	4620      	mov	r0, r4
   897aa:	d012      	beq.n	897d2 <_dtoa_r+0x902>
   897ac:	f001 fbe8 	bl	8af80 <__multadd>
   897b0:	4639      	mov	r1, r7
   897b2:	4605      	mov	r5, r0
   897b4:	2300      	movs	r3, #0
   897b6:	220a      	movs	r2, #10
   897b8:	4620      	mov	r0, r4
   897ba:	f001 fbe1 	bl	8af80 <__multadd>
   897be:	464e      	mov	r6, r9
   897c0:	4607      	mov	r7, r0
   897c2:	e7a7      	b.n	89714 <_dtoa_r+0x844>
   897c4:	4620      	mov	r0, r4
   897c6:	9304      	str	r3, [sp, #16]
   897c8:	f001 fbd0 	bl	8af6c <_Bfree>
   897cc:	2201      	movs	r2, #1
   897ce:	9b04      	ldr	r3, [sp, #16]
   897d0:	e7c6      	b.n	89760 <_dtoa_r+0x890>
   897d2:	f001 fbd5 	bl	8af80 <__multadd>
   897d6:	464e      	mov	r6, r9
   897d8:	4605      	mov	r5, r0
   897da:	4607      	mov	r7, r0
   897dc:	e79a      	b.n	89714 <_dtoa_r+0x844>
   897de:	bf00      	nop
   897e0:	0008cc18 	.word	0x0008cc18
   897e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   897e6:	2b02      	cmp	r3, #2
   897e8:	dc7e      	bgt.n	898e8 <_dtoa_r+0xa18>
   897ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   897ec:	2b00      	cmp	r3, #0
   897ee:	f47f af7c 	bne.w	896ea <_dtoa_r+0x81a>
   897f2:	4641      	mov	r1, r8
   897f4:	4650      	mov	r0, sl
   897f6:	f7ff fadb 	bl	88db0 <quorem>
   897fa:	9a07      	ldr	r2, [sp, #28]
   897fc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89800:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89804:	3201      	adds	r2, #1
   89806:	2600      	movs	r6, #0
   89808:	9207      	str	r2, [sp, #28]
   8980a:	f80b 3b01 	strb.w	r3, [fp], #1
   8980e:	e6f5      	b.n	895fc <_dtoa_r+0x72c>
   89810:	4641      	mov	r1, r8
   89812:	4650      	mov	r0, sl
   89814:	f001 fdd8 	bl	8b3c8 <__mcmp>
   89818:	2800      	cmp	r0, #0
   8981a:	f6bf aec4 	bge.w	895a6 <_dtoa_r+0x6d6>
   8981e:	4651      	mov	r1, sl
   89820:	2300      	movs	r3, #0
   89822:	220a      	movs	r2, #10
   89824:	4620      	mov	r0, r4
   89826:	f001 fbab 	bl	8af80 <__multadd>
   8982a:	9b07      	ldr	r3, [sp, #28]
   8982c:	4682      	mov	sl, r0
   8982e:	1e5f      	subs	r7, r3, #1
   89830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89832:	2b00      	cmp	r3, #0
   89834:	f47f af4c 	bne.w	896d0 <_dtoa_r+0x800>
   89838:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8983a:	2b00      	cmp	r3, #0
   8983c:	f340 8262 	ble.w	89d04 <_dtoa_r+0xe34>
   89840:	930a      	str	r3, [sp, #40]	; 0x28
   89842:	e6bb      	b.n	895bc <_dtoa_r+0x6ec>
   89844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89846:	4651      	mov	r1, sl
   89848:	4620      	mov	r0, r4
   8984a:	f001 fcfd 	bl	8b248 <__pow5mult>
   8984e:	4682      	mov	sl, r0
   89850:	e66c      	b.n	8952c <_dtoa_r+0x65c>
   89852:	4bba      	ldr	r3, [pc, #744]	; (89b3c <_dtoa_r+0xc6c>)
   89854:	9303      	str	r3, [sp, #12]
   89856:	3303      	adds	r3, #3
   89858:	e419      	b.n	8908e <_dtoa_r+0x1be>
   8985a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8985e:	2900      	cmp	r1, #0
   89860:	f47f ae71 	bne.w	89546 <_dtoa_r+0x676>
   89864:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89868:	2b00      	cmp	r3, #0
   8986a:	f47f ae6c 	bne.w	89546 <_dtoa_r+0x676>
   8986e:	4bb4      	ldr	r3, [pc, #720]	; (89b40 <_dtoa_r+0xc70>)
   89870:	4013      	ands	r3, r2
   89872:	2b00      	cmp	r3, #0
   89874:	f000 822a 	beq.w	89ccc <_dtoa_r+0xdfc>
   89878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8987a:	f04f 0901 	mov.w	r9, #1
   8987e:	3301      	adds	r3, #1
   89880:	930b      	str	r3, [sp, #44]	; 0x2c
   89882:	9b06      	ldr	r3, [sp, #24]
   89884:	3301      	adds	r3, #1
   89886:	9306      	str	r3, [sp, #24]
   89888:	e65f      	b.n	8954a <_dtoa_r+0x67a>
   8988a:	2301      	movs	r3, #1
   8988c:	930c      	str	r3, [sp, #48]	; 0x30
   8988e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89890:	9a07      	ldr	r2, [sp, #28]
   89892:	4413      	add	r3, r2
   89894:	9312      	str	r3, [sp, #72]	; 0x48
   89896:	3301      	adds	r3, #1
   89898:	2b01      	cmp	r3, #1
   8989a:	461e      	mov	r6, r3
   8989c:	bfb8      	it	lt
   8989e:	2601      	movlt	r6, #1
   898a0:	930a      	str	r3, [sp, #40]	; 0x28
   898a2:	2100      	movs	r1, #0
   898a4:	2e17      	cmp	r6, #23
   898a6:	6461      	str	r1, [r4, #68]	; 0x44
   898a8:	f77f ac43 	ble.w	89132 <_dtoa_r+0x262>
   898ac:	2201      	movs	r2, #1
   898ae:	2304      	movs	r3, #4
   898b0:	005b      	lsls	r3, r3, #1
   898b2:	f103 0014 	add.w	r0, r3, #20
   898b6:	42b0      	cmp	r0, r6
   898b8:	4611      	mov	r1, r2
   898ba:	f102 0201 	add.w	r2, r2, #1
   898be:	d9f7      	bls.n	898b0 <_dtoa_r+0x9e0>
   898c0:	6461      	str	r1, [r4, #68]	; 0x44
   898c2:	e436      	b.n	89132 <_dtoa_r+0x262>
   898c4:	2301      	movs	r3, #1
   898c6:	930c      	str	r3, [sp, #48]	; 0x30
   898c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   898ca:	2b00      	cmp	r3, #0
   898cc:	dd46      	ble.n	8995c <_dtoa_r+0xa8c>
   898ce:	461e      	mov	r6, r3
   898d0:	9312      	str	r3, [sp, #72]	; 0x48
   898d2:	930a      	str	r3, [sp, #40]	; 0x28
   898d4:	e7e5      	b.n	898a2 <_dtoa_r+0x9d2>
   898d6:	2300      	movs	r3, #0
   898d8:	930c      	str	r3, [sp, #48]	; 0x30
   898da:	e7d8      	b.n	8988e <_dtoa_r+0x9be>
   898dc:	2300      	movs	r3, #0
   898de:	930c      	str	r3, [sp, #48]	; 0x30
   898e0:	e7f2      	b.n	898c8 <_dtoa_r+0x9f8>
   898e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   898e4:	9707      	str	r7, [sp, #28]
   898e6:	930a      	str	r3, [sp, #40]	; 0x28
   898e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   898ea:	2b00      	cmp	r3, #0
   898ec:	f47f ad40 	bne.w	89370 <_dtoa_r+0x4a0>
   898f0:	4641      	mov	r1, r8
   898f2:	2205      	movs	r2, #5
   898f4:	4620      	mov	r0, r4
   898f6:	f001 fb43 	bl	8af80 <__multadd>
   898fa:	4680      	mov	r8, r0
   898fc:	4650      	mov	r0, sl
   898fe:	4641      	mov	r1, r8
   89900:	f001 fd62 	bl	8b3c8 <__mcmp>
   89904:	2800      	cmp	r0, #0
   89906:	f77f ad33 	ble.w	89370 <_dtoa_r+0x4a0>
   8990a:	9f03      	ldr	r7, [sp, #12]
   8990c:	2231      	movs	r2, #49	; 0x31
   8990e:	463b      	mov	r3, r7
   89910:	9e07      	ldr	r6, [sp, #28]
   89912:	f803 2b01 	strb.w	r2, [r3], #1
   89916:	3601      	adds	r6, #1
   89918:	9303      	str	r3, [sp, #12]
   8991a:	4641      	mov	r1, r8
   8991c:	4620      	mov	r0, r4
   8991e:	f001 fb25 	bl	8af6c <_Bfree>
   89922:	1c73      	adds	r3, r6, #1
   89924:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89928:	9307      	str	r3, [sp, #28]
   8992a:	9703      	str	r7, [sp, #12]
   8992c:	2d00      	cmp	r5, #0
   8992e:	f47f ae90 	bne.w	89652 <_dtoa_r+0x782>
   89932:	e692      	b.n	8965a <_dtoa_r+0x78a>
   89934:	4629      	mov	r1, r5
   89936:	4632      	mov	r2, r6
   89938:	4620      	mov	r0, r4
   8993a:	f001 fcd1 	bl	8b2e0 <__lshift>
   8993e:	4605      	mov	r5, r0
   89940:	e6d6      	b.n	896f0 <_dtoa_r+0x820>
   89942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89944:	970d      	str	r7, [sp, #52]	; 0x34
   89946:	1afb      	subs	r3, r7, r3
   89948:	449b      	add	fp, r3
   8994a:	2700      	movs	r7, #0
   8994c:	e58c      	b.n	89468 <_dtoa_r+0x598>
   8994e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89952:	f04f 0902 	mov.w	r9, #2
   89956:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8995a:	e417      	b.n	8918c <_dtoa_r+0x2bc>
   8995c:	2301      	movs	r3, #1
   8995e:	9325      	str	r3, [sp, #148]	; 0x94
   89960:	930a      	str	r3, [sp, #40]	; 0x28
   89962:	f7ff bbe2 	b.w	8912a <_dtoa_r+0x25a>
   89966:	d103      	bne.n	89970 <_dtoa_r+0xaa0>
   89968:	9b04      	ldr	r3, [sp, #16]
   8996a:	07db      	lsls	r3, r3, #31
   8996c:	f53f ae53 	bmi.w	89616 <_dtoa_r+0x746>
   89970:	46d9      	mov	r9, fp
   89972:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89976:	2b30      	cmp	r3, #48	; 0x30
   89978:	d0fa      	beq.n	89970 <_dtoa_r+0xaa0>
   8997a:	e65e      	b.n	8963a <_dtoa_r+0x76a>
   8997c:	4648      	mov	r0, r9
   8997e:	f002 fcfb 	bl	8c378 <__aeabi_i2d>
   89982:	4632      	mov	r2, r6
   89984:	463b      	mov	r3, r7
   89986:	f002 fd61 	bl	8c44c <__aeabi_dmul>
   8998a:	2200      	movs	r2, #0
   8998c:	4b6d      	ldr	r3, [pc, #436]	; (89b44 <_dtoa_r+0xc74>)
   8998e:	f002 fba7 	bl	8c0e0 <__adddf3>
   89992:	4680      	mov	r8, r0
   89994:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89998:	4630      	mov	r0, r6
   8999a:	4639      	mov	r1, r7
   8999c:	2200      	movs	r2, #0
   8999e:	4b6a      	ldr	r3, [pc, #424]	; (89b48 <_dtoa_r+0xc78>)
   899a0:	f002 fb9c 	bl	8c0dc <__aeabi_dsub>
   899a4:	4642      	mov	r2, r8
   899a6:	464b      	mov	r3, r9
   899a8:	4606      	mov	r6, r0
   899aa:	460f      	mov	r7, r1
   899ac:	f002 ffde 	bl	8c96c <__aeabi_dcmpgt>
   899b0:	2800      	cmp	r0, #0
   899b2:	f040 8187 	bne.w	89cc4 <_dtoa_r+0xdf4>
   899b6:	4642      	mov	r2, r8
   899b8:	4630      	mov	r0, r6
   899ba:	4639      	mov	r1, r7
   899bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   899c0:	f002 ffb6 	bl	8c930 <__aeabi_dcmplt>
   899c4:	2800      	cmp	r0, #0
   899c6:	f43f acaa 	beq.w	8931e <_dtoa_r+0x44e>
   899ca:	f04f 0800 	mov.w	r8, #0
   899ce:	4645      	mov	r5, r8
   899d0:	e4ce      	b.n	89370 <_dtoa_r+0x4a0>
   899d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   899d4:	2a00      	cmp	r2, #0
   899d6:	f000 80c3 	beq.w	89b60 <_dtoa_r+0xc90>
   899da:	9a06      	ldr	r2, [sp, #24]
   899dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   899e0:	441a      	add	r2, r3
   899e2:	9206      	str	r2, [sp, #24]
   899e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   899e6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   899e8:	4616      	mov	r6, r2
   899ea:	441a      	add	r2, r3
   899ec:	920b      	str	r2, [sp, #44]	; 0x2c
   899ee:	e547      	b.n	89480 <_dtoa_r+0x5b0>
   899f0:	2331      	movs	r3, #49	; 0x31
   899f2:	9a07      	ldr	r2, [sp, #28]
   899f4:	3201      	adds	r2, #1
   899f6:	9207      	str	r2, [sp, #28]
   899f8:	9a03      	ldr	r2, [sp, #12]
   899fa:	7013      	strb	r3, [r2, #0]
   899fc:	e61d      	b.n	8963a <_dtoa_r+0x76a>
   899fe:	f000 814b 	beq.w	89c98 <_dtoa_r+0xdc8>
   89a02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a06:	9b07      	ldr	r3, [sp, #28]
   89a08:	425d      	negs	r5, r3
   89a0a:	4b50      	ldr	r3, [pc, #320]	; (89b4c <_dtoa_r+0xc7c>)
   89a0c:	f005 020f 	and.w	r2, r5, #15
   89a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89a14:	e9d3 2300 	ldrd	r2, r3, [r3]
   89a18:	f002 fd18 	bl	8c44c <__aeabi_dmul>
   89a1c:	112d      	asrs	r5, r5, #4
   89a1e:	4606      	mov	r6, r0
   89a20:	460f      	mov	r7, r1
   89a22:	f000 817d 	beq.w	89d20 <_dtoa_r+0xe50>
   89a26:	2300      	movs	r3, #0
   89a28:	f04f 0902 	mov.w	r9, #2
   89a2c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 89b50 <_dtoa_r+0xc80>
   89a30:	07ea      	lsls	r2, r5, #31
   89a32:	d505      	bpl.n	89a40 <_dtoa_r+0xb70>
   89a34:	e9d8 2300 	ldrd	r2, r3, [r8]
   89a38:	f002 fd08 	bl	8c44c <__aeabi_dmul>
   89a3c:	2301      	movs	r3, #1
   89a3e:	4499      	add	r9, r3
   89a40:	106d      	asrs	r5, r5, #1
   89a42:	f108 0808 	add.w	r8, r8, #8
   89a46:	d1f3      	bne.n	89a30 <_dtoa_r+0xb60>
   89a48:	2b00      	cmp	r3, #0
   89a4a:	f43f abba 	beq.w	891c2 <_dtoa_r+0x2f2>
   89a4e:	4606      	mov	r6, r0
   89a50:	460f      	mov	r7, r1
   89a52:	f7ff bbb6 	b.w	891c2 <_dtoa_r+0x2f2>
   89a56:	900e      	str	r0, [sp, #56]	; 0x38
   89a58:	e520      	b.n	8949c <_dtoa_r+0x5cc>
   89a5a:	9b04      	ldr	r3, [sp, #16]
   89a5c:	2b00      	cmp	r3, #0
   89a5e:	f47f ae2b 	bne.w	896b8 <_dtoa_r+0x7e8>
   89a62:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89a66:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89a6a:	2b00      	cmp	r3, #0
   89a6c:	f43f aeff 	beq.w	8986e <_dtoa_r+0x99e>
   89a70:	e622      	b.n	896b8 <_dtoa_r+0x7e8>
   89a72:	2a00      	cmp	r2, #0
   89a74:	dd12      	ble.n	89a9c <_dtoa_r+0xbcc>
   89a76:	4651      	mov	r1, sl
   89a78:	2201      	movs	r2, #1
   89a7a:	4620      	mov	r0, r4
   89a7c:	9304      	str	r3, [sp, #16]
   89a7e:	f001 fc2f 	bl	8b2e0 <__lshift>
   89a82:	4641      	mov	r1, r8
   89a84:	4682      	mov	sl, r0
   89a86:	f001 fc9f 	bl	8b3c8 <__mcmp>
   89a8a:	2800      	cmp	r0, #0
   89a8c:	9b04      	ldr	r3, [sp, #16]
   89a8e:	f340 812c 	ble.w	89cea <_dtoa_r+0xe1a>
   89a92:	2b39      	cmp	r3, #57	; 0x39
   89a94:	f000 810c 	beq.w	89cb0 <_dtoa_r+0xde0>
   89a98:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   89a9c:	46b1      	mov	r9, r6
   89a9e:	f809 3b01 	strb.w	r3, [r9], #1
   89aa2:	9b07      	ldr	r3, [sp, #28]
   89aa4:	462e      	mov	r6, r5
   89aa6:	3301      	adds	r3, #1
   89aa8:	463d      	mov	r5, r7
   89aaa:	9307      	str	r3, [sp, #28]
   89aac:	e5c5      	b.n	8963a <_dtoa_r+0x76a>
   89aae:	4655      	mov	r5, sl
   89ab0:	9c08      	ldr	r4, [sp, #32]
   89ab2:	f8dd a018 	ldr.w	sl, [sp, #24]
   89ab6:	4602      	mov	r2, r0
   89ab8:	460b      	mov	r3, r1
   89aba:	f002 fb11 	bl	8c0e0 <__adddf3>
   89abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89ac2:	4606      	mov	r6, r0
   89ac4:	460f      	mov	r7, r1
   89ac6:	f002 ff51 	bl	8c96c <__aeabi_dcmpgt>
   89aca:	b960      	cbnz	r0, 89ae6 <_dtoa_r+0xc16>
   89acc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89ad0:	4630      	mov	r0, r6
   89ad2:	4639      	mov	r1, r7
   89ad4:	f002 ff22 	bl	8c91c <__aeabi_dcmpeq>
   89ad8:	2800      	cmp	r0, #0
   89ada:	f43f aca3 	beq.w	89424 <_dtoa_r+0x554>
   89ade:	f018 0f01 	tst.w	r8, #1
   89ae2:	f43f ac9f 	beq.w	89424 <_dtoa_r+0x554>
   89ae6:	9a03      	ldr	r2, [sp, #12]
   89ae8:	e40a      	b.n	89300 <_dtoa_r+0x430>
   89aea:	4620      	mov	r0, r4
   89aec:	6869      	ldr	r1, [r5, #4]
   89aee:	f001 fa17 	bl	8af20 <_Balloc>
   89af2:	4606      	mov	r6, r0
   89af4:	2800      	cmp	r0, #0
   89af6:	f000 8117 	beq.w	89d28 <_dtoa_r+0xe58>
   89afa:	692b      	ldr	r3, [r5, #16]
   89afc:	f105 010c 	add.w	r1, r5, #12
   89b00:	3302      	adds	r3, #2
   89b02:	009a      	lsls	r2, r3, #2
   89b04:	300c      	adds	r0, #12
   89b06:	f7fc f9fb 	bl	85f00 <memcpy>
   89b0a:	4631      	mov	r1, r6
   89b0c:	2201      	movs	r2, #1
   89b0e:	4620      	mov	r0, r4
   89b10:	f001 fbe6 	bl	8b2e0 <__lshift>
   89b14:	4607      	mov	r7, r0
   89b16:	e5f0      	b.n	896fa <_dtoa_r+0x82a>
   89b18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89b1c:	1a9e      	subs	r6, r3, r2
   89b1e:	e4af      	b.n	89480 <_dtoa_r+0x5b0>
   89b20:	2b39      	cmp	r3, #57	; 0x39
   89b22:	f000 80c5 	beq.w	89cb0 <_dtoa_r+0xde0>
   89b26:	46b1      	mov	r9, r6
   89b28:	3301      	adds	r3, #1
   89b2a:	f809 3b01 	strb.w	r3, [r9], #1
   89b2e:	9b07      	ldr	r3, [sp, #28]
   89b30:	462e      	mov	r6, r5
   89b32:	3301      	adds	r3, #1
   89b34:	463d      	mov	r5, r7
   89b36:	9307      	str	r3, [sp, #28]
   89b38:	e57f      	b.n	8963a <_dtoa_r+0x76a>
   89b3a:	bf00      	nop
   89b3c:	0008cc5c 	.word	0x0008cc5c
   89b40:	7ff00000 	.word	0x7ff00000
   89b44:	401c0000 	.word	0x401c0000
   89b48:	40140000 	.word	0x40140000
   89b4c:	0008cdb8 	.word	0x0008cdb8
   89b50:	0008cd90 	.word	0x0008cd90
   89b54:	9a07      	ldr	r2, [sp, #28]
   89b56:	462e      	mov	r6, r5
   89b58:	3201      	adds	r2, #1
   89b5a:	463d      	mov	r5, r7
   89b5c:	9207      	str	r2, [sp, #28]
   89b5e:	e54d      	b.n	895fc <_dtoa_r+0x72c>
   89b60:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89b62:	9a06      	ldr	r2, [sp, #24]
   89b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89b6a:	441a      	add	r2, r3
   89b6c:	9206      	str	r2, [sp, #24]
   89b6e:	460a      	mov	r2, r1
   89b70:	441a      	add	r2, r3
   89b72:	460e      	mov	r6, r1
   89b74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89b76:	920b      	str	r2, [sp, #44]	; 0x2c
   89b78:	e482      	b.n	89480 <_dtoa_r+0x5b0>
   89b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
   89b7c:	497f      	ldr	r1, [pc, #508]	; (89d7c <_dtoa_r+0xeac>)
   89b7e:	4642      	mov	r2, r8
   89b80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89b84:	464b      	mov	r3, r9
   89b86:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89b8a:	f002 fc5f 	bl	8c44c <__aeabi_dmul>
   89b8e:	4602      	mov	r2, r0
   89b90:	460b      	mov	r3, r1
   89b92:	4630      	mov	r0, r6
   89b94:	4639      	mov	r1, r7
   89b96:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89b9a:	f002 ff07 	bl	8c9ac <__aeabi_d2iz>
   89b9e:	4680      	mov	r8, r0
   89ba0:	f002 fbea 	bl	8c378 <__aeabi_i2d>
   89ba4:	460b      	mov	r3, r1
   89ba6:	4602      	mov	r2, r0
   89ba8:	4639      	mov	r1, r7
   89baa:	4630      	mov	r0, r6
   89bac:	f002 fa96 	bl	8c0dc <__aeabi_dsub>
   89bb0:	4606      	mov	r6, r0
   89bb2:	9810      	ldr	r0, [sp, #64]	; 0x40
   89bb4:	9d03      	ldr	r5, [sp, #12]
   89bb6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89bba:	2801      	cmp	r0, #1
   89bbc:	460f      	mov	r7, r1
   89bbe:	f805 3b01 	strb.w	r3, [r5], #1
   89bc2:	d01e      	beq.n	89c02 <_dtoa_r+0xd32>
   89bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89bc6:	9a03      	ldr	r2, [sp, #12]
   89bc8:	4413      	add	r3, r2
   89bca:	4698      	mov	r8, r3
   89bcc:	2200      	movs	r2, #0
   89bce:	4b6c      	ldr	r3, [pc, #432]	; (89d80 <_dtoa_r+0xeb0>)
   89bd0:	4630      	mov	r0, r6
   89bd2:	4639      	mov	r1, r7
   89bd4:	f002 fc3a 	bl	8c44c <__aeabi_dmul>
   89bd8:	460f      	mov	r7, r1
   89bda:	4606      	mov	r6, r0
   89bdc:	f002 fee6 	bl	8c9ac <__aeabi_d2iz>
   89be0:	4681      	mov	r9, r0
   89be2:	f002 fbc9 	bl	8c378 <__aeabi_i2d>
   89be6:	4602      	mov	r2, r0
   89be8:	460b      	mov	r3, r1
   89bea:	4630      	mov	r0, r6
   89bec:	4639      	mov	r1, r7
   89bee:	f002 fa75 	bl	8c0dc <__aeabi_dsub>
   89bf2:	f109 0930 	add.w	r9, r9, #48	; 0x30
   89bf6:	f805 9b01 	strb.w	r9, [r5], #1
   89bfa:	4545      	cmp	r5, r8
   89bfc:	4606      	mov	r6, r0
   89bfe:	460f      	mov	r7, r1
   89c00:	d1e4      	bne.n	89bcc <_dtoa_r+0xcfc>
   89c02:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   89c06:	2200      	movs	r2, #0
   89c08:	4b5e      	ldr	r3, [pc, #376]	; (89d84 <_dtoa_r+0xeb4>)
   89c0a:	4640      	mov	r0, r8
   89c0c:	4649      	mov	r1, r9
   89c0e:	f002 fa67 	bl	8c0e0 <__adddf3>
   89c12:	4632      	mov	r2, r6
   89c14:	463b      	mov	r3, r7
   89c16:	f002 fe8b 	bl	8c930 <__aeabi_dcmplt>
   89c1a:	2800      	cmp	r0, #0
   89c1c:	d158      	bne.n	89cd0 <_dtoa_r+0xe00>
   89c1e:	4642      	mov	r2, r8
   89c20:	464b      	mov	r3, r9
   89c22:	2000      	movs	r0, #0
   89c24:	4957      	ldr	r1, [pc, #348]	; (89d84 <_dtoa_r+0xeb4>)
   89c26:	f002 fa59 	bl	8c0dc <__aeabi_dsub>
   89c2a:	4632      	mov	r2, r6
   89c2c:	463b      	mov	r3, r7
   89c2e:	f002 fe9d 	bl	8c96c <__aeabi_dcmpgt>
   89c32:	2800      	cmp	r0, #0
   89c34:	f43f ab73 	beq.w	8931e <_dtoa_r+0x44e>
   89c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89c3c:	46a9      	mov	r9, r5
   89c3e:	2b30      	cmp	r3, #48	; 0x30
   89c40:	f105 35ff 	add.w	r5, r5, #4294967295
   89c44:	d0f8      	beq.n	89c38 <_dtoa_r+0xd68>
   89c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89c48:	3301      	adds	r3, #1
   89c4a:	9307      	str	r3, [sp, #28]
   89c4c:	e505      	b.n	8965a <_dtoa_r+0x78a>
   89c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89c50:	2b00      	cmp	r3, #0
   89c52:	f43f ae93 	beq.w	8997c <_dtoa_r+0xaac>
   89c56:	9d12      	ldr	r5, [sp, #72]	; 0x48
   89c58:	2d00      	cmp	r5, #0
   89c5a:	f77f ab60 	ble.w	8931e <_dtoa_r+0x44e>
   89c5e:	2200      	movs	r2, #0
   89c60:	4b47      	ldr	r3, [pc, #284]	; (89d80 <_dtoa_r+0xeb0>)
   89c62:	4630      	mov	r0, r6
   89c64:	4639      	mov	r1, r7
   89c66:	f002 fbf1 	bl	8c44c <__aeabi_dmul>
   89c6a:	4606      	mov	r6, r0
   89c6c:	460f      	mov	r7, r1
   89c6e:	f109 0001 	add.w	r0, r9, #1
   89c72:	f002 fb81 	bl	8c378 <__aeabi_i2d>
   89c76:	4632      	mov	r2, r6
   89c78:	463b      	mov	r3, r7
   89c7a:	f002 fbe7 	bl	8c44c <__aeabi_dmul>
   89c7e:	2200      	movs	r2, #0
   89c80:	4b41      	ldr	r3, [pc, #260]	; (89d88 <_dtoa_r+0xeb8>)
   89c82:	f002 fa2d 	bl	8c0e0 <__adddf3>
   89c86:	9a07      	ldr	r2, [sp, #28]
   89c88:	4680      	mov	r8, r0
   89c8a:	3a01      	subs	r2, #1
   89c8c:	9213      	str	r2, [sp, #76]	; 0x4c
   89c8e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89c92:	9510      	str	r5, [sp, #64]	; 0x40
   89c94:	f7ff bab6 	b.w	89204 <_dtoa_r+0x334>
   89c98:	f04f 0902 	mov.w	r9, #2
   89c9c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   89ca0:	f7ff ba8f 	b.w	891c2 <_dtoa_r+0x2f2>
   89ca4:	9b07      	ldr	r3, [sp, #28]
   89ca6:	3301      	adds	r3, #1
   89ca8:	9307      	str	r3, [sp, #28]
   89caa:	2331      	movs	r3, #49	; 0x31
   89cac:	f7ff bb2f 	b.w	8930e <_dtoa_r+0x43e>
   89cb0:	46b3      	mov	fp, r6
   89cb2:	2339      	movs	r3, #57	; 0x39
   89cb4:	9a07      	ldr	r2, [sp, #28]
   89cb6:	462e      	mov	r6, r5
   89cb8:	3201      	adds	r2, #1
   89cba:	463d      	mov	r5, r7
   89cbc:	9207      	str	r2, [sp, #28]
   89cbe:	f80b 3b01 	strb.w	r3, [fp], #1
   89cc2:	e4aa      	b.n	8961a <_dtoa_r+0x74a>
   89cc4:	f04f 0800 	mov.w	r8, #0
   89cc8:	4645      	mov	r5, r8
   89cca:	e61e      	b.n	8990a <_dtoa_r+0xa3a>
   89ccc:	4699      	mov	r9, r3
   89cce:	e43c      	b.n	8954a <_dtoa_r+0x67a>
   89cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89cd2:	9a03      	ldr	r2, [sp, #12]
   89cd4:	9307      	str	r3, [sp, #28]
   89cd6:	f7ff bb13 	b.w	89300 <_dtoa_r+0x430>
   89cda:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89cde:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89ce2:	46a9      	mov	r9, r5
   89ce4:	3301      	adds	r3, #1
   89ce6:	9307      	str	r3, [sp, #28]
   89ce8:	e4b7      	b.n	8965a <_dtoa_r+0x78a>
   89cea:	f47f aed7 	bne.w	89a9c <_dtoa_r+0xbcc>
   89cee:	07da      	lsls	r2, r3, #31
   89cf0:	f57f aed4 	bpl.w	89a9c <_dtoa_r+0xbcc>
   89cf4:	e6cd      	b.n	89a92 <_dtoa_r+0xbc2>
   89cf6:	2b39      	cmp	r3, #57	; 0x39
   89cf8:	d0da      	beq.n	89cb0 <_dtoa_r+0xde0>
   89cfa:	f1b9 0f00 	cmp.w	r9, #0
   89cfe:	f73f aecb 	bgt.w	89a98 <_dtoa_r+0xbc8>
   89d02:	e6cb      	b.n	89a9c <_dtoa_r+0xbcc>
   89d04:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d06:	2b02      	cmp	r3, #2
   89d08:	f73f adeb 	bgt.w	898e2 <_dtoa_r+0xa12>
   89d0c:	9707      	str	r7, [sp, #28]
   89d0e:	e570      	b.n	897f2 <_dtoa_r+0x922>
   89d10:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d12:	2b02      	cmp	r3, #2
   89d14:	f73f ade5 	bgt.w	898e2 <_dtoa_r+0xa12>
   89d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89d1a:	9707      	str	r7, [sp, #28]
   89d1c:	930a      	str	r3, [sp, #40]	; 0x28
   89d1e:	e4e4      	b.n	896ea <_dtoa_r+0x81a>
   89d20:	f04f 0902 	mov.w	r9, #2
   89d24:	f7ff ba4d 	b.w	891c2 <_dtoa_r+0x2f2>
   89d28:	4602      	mov	r2, r0
   89d2a:	f240 21ea 	movw	r1, #746	; 0x2ea
   89d2e:	4b17      	ldr	r3, [pc, #92]	; (89d8c <_dtoa_r+0xebc>)
   89d30:	4817      	ldr	r0, [pc, #92]	; (89d90 <_dtoa_r+0xec0>)
   89d32:	f002 f84d 	bl	8bdd0 <__assert_func>
   89d36:	4b17      	ldr	r3, [pc, #92]	; (89d94 <_dtoa_r+0xec4>)
   89d38:	9303      	str	r3, [sp, #12]
   89d3a:	f7ff b904 	b.w	88f46 <_dtoa_r+0x76>
   89d3e:	2500      	movs	r5, #0
   89d40:	4620      	mov	r0, r4
   89d42:	4629      	mov	r1, r5
   89d44:	6465      	str	r5, [r4, #68]	; 0x44
   89d46:	f001 f8eb 	bl	8af20 <_Balloc>
   89d4a:	9003      	str	r0, [sp, #12]
   89d4c:	b958      	cbnz	r0, 89d66 <_dtoa_r+0xe96>
   89d4e:	2200      	movs	r2, #0
   89d50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89d54:	4b0d      	ldr	r3, [pc, #52]	; (89d8c <_dtoa_r+0xebc>)
   89d56:	480e      	ldr	r0, [pc, #56]	; (89d90 <_dtoa_r+0xec0>)
   89d58:	f002 f83a 	bl	8bdd0 <__assert_func>
   89d5c:	f43f ac0d 	beq.w	8957a <_dtoa_r+0x6aa>
   89d60:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89d64:	e48f      	b.n	89686 <_dtoa_r+0x7b6>
   89d66:	f04f 33ff 	mov.w	r3, #4294967295
   89d6a:	9312      	str	r3, [sp, #72]	; 0x48
   89d6c:	930a      	str	r3, [sp, #40]	; 0x28
   89d6e:	2301      	movs	r3, #1
   89d70:	9a03      	ldr	r2, [sp, #12]
   89d72:	9525      	str	r5, [sp, #148]	; 0x94
   89d74:	6422      	str	r2, [r4, #64]	; 0x40
   89d76:	930c      	str	r3, [sp, #48]	; 0x30
   89d78:	f7ff bad1 	b.w	8931e <_dtoa_r+0x44e>
   89d7c:	0008cdb8 	.word	0x0008cdb8
   89d80:	40240000 	.word	0x40240000
   89d84:	3fe00000 	.word	0x3fe00000
   89d88:	401c0000 	.word	0x401c0000
   89d8c:	0008cc6c 	.word	0x0008cc6c
   89d90:	0008cc80 	.word	0x0008cc80
   89d94:	0008cc60 	.word	0x0008cc60

00089d98 <__sflush_r>:
   89d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89da0:	460d      	mov	r5, r1
   89da2:	0711      	lsls	r1, r2, #28
   89da4:	4680      	mov	r8, r0
   89da6:	d447      	bmi.n	89e38 <__sflush_r+0xa0>
   89da8:	686b      	ldr	r3, [r5, #4]
   89daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   89dae:	2b00      	cmp	r3, #0
   89db0:	81aa      	strh	r2, [r5, #12]
   89db2:	dd5e      	ble.n	89e72 <__sflush_r+0xda>
   89db4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89db6:	2c00      	cmp	r4, #0
   89db8:	d058      	beq.n	89e6c <__sflush_r+0xd4>
   89dba:	2300      	movs	r3, #0
   89dbc:	f8d8 6000 	ldr.w	r6, [r8]
   89dc0:	f8c8 3000 	str.w	r3, [r8]
   89dc4:	b293      	uxth	r3, r2
   89dc6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89dca:	d156      	bne.n	89e7a <__sflush_r+0xe2>
   89dcc:	2301      	movs	r3, #1
   89dce:	4640      	mov	r0, r8
   89dd0:	69e9      	ldr	r1, [r5, #28]
   89dd2:	47a0      	blx	r4
   89dd4:	1c43      	adds	r3, r0, #1
   89dd6:	d067      	beq.n	89ea8 <__sflush_r+0x110>
   89dd8:	89ab      	ldrh	r3, [r5, #12]
   89dda:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89ddc:	075f      	lsls	r7, r3, #29
   89dde:	d505      	bpl.n	89dec <__sflush_r+0x54>
   89de0:	686a      	ldr	r2, [r5, #4]
   89de2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89de4:	1a80      	subs	r0, r0, r2
   89de6:	b10b      	cbz	r3, 89dec <__sflush_r+0x54>
   89de8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89dea:	1ac0      	subs	r0, r0, r3
   89dec:	4602      	mov	r2, r0
   89dee:	69e9      	ldr	r1, [r5, #28]
   89df0:	2300      	movs	r3, #0
   89df2:	4640      	mov	r0, r8
   89df4:	47a0      	blx	r4
   89df6:	1c41      	adds	r1, r0, #1
   89df8:	d141      	bne.n	89e7e <__sflush_r+0xe6>
   89dfa:	f8d8 3000 	ldr.w	r3, [r8]
   89dfe:	2b00      	cmp	r3, #0
   89e00:	d03d      	beq.n	89e7e <__sflush_r+0xe6>
   89e02:	2b1d      	cmp	r3, #29
   89e04:	d001      	beq.n	89e0a <__sflush_r+0x72>
   89e06:	2b16      	cmp	r3, #22
   89e08:	d156      	bne.n	89eb8 <__sflush_r+0x120>
   89e0a:	2100      	movs	r1, #0
   89e0c:	692a      	ldr	r2, [r5, #16]
   89e0e:	89ab      	ldrh	r3, [r5, #12]
   89e10:	e9c5 2100 	strd	r2, r1, [r5]
   89e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89e18:	81ab      	strh	r3, [r5, #12]
   89e1a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   89e1c:	f8c8 6000 	str.w	r6, [r8]
   89e20:	b321      	cbz	r1, 89e6c <__sflush_r+0xd4>
   89e22:	f105 0340 	add.w	r3, r5, #64	; 0x40
   89e26:	4299      	cmp	r1, r3
   89e28:	d002      	beq.n	89e30 <__sflush_r+0x98>
   89e2a:	4640      	mov	r0, r8
   89e2c:	f000 f9cc 	bl	8a1c8 <_free_r>
   89e30:	2000      	movs	r0, #0
   89e32:	6328      	str	r0, [r5, #48]	; 0x30
   89e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89e38:	692f      	ldr	r7, [r5, #16]
   89e3a:	b1bf      	cbz	r7, 89e6c <__sflush_r+0xd4>
   89e3c:	b293      	uxth	r3, r2
   89e3e:	079a      	lsls	r2, r3, #30
   89e40:	bf18      	it	ne
   89e42:	2300      	movne	r3, #0
   89e44:	682e      	ldr	r6, [r5, #0]
   89e46:	bf08      	it	eq
   89e48:	696b      	ldreq	r3, [r5, #20]
   89e4a:	602f      	str	r7, [r5, #0]
   89e4c:	1bf6      	subs	r6, r6, r7
   89e4e:	60ab      	str	r3, [r5, #8]
   89e50:	e00a      	b.n	89e68 <__sflush_r+0xd0>
   89e52:	4633      	mov	r3, r6
   89e54:	463a      	mov	r2, r7
   89e56:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   89e58:	4640      	mov	r0, r8
   89e5a:	69e9      	ldr	r1, [r5, #28]
   89e5c:	47a0      	blx	r4
   89e5e:	1e04      	subs	r4, r0, #0
   89e60:	eba6 0604 	sub.w	r6, r6, r4
   89e64:	4427      	add	r7, r4
   89e66:	dd17      	ble.n	89e98 <__sflush_r+0x100>
   89e68:	2e00      	cmp	r6, #0
   89e6a:	dcf2      	bgt.n	89e52 <__sflush_r+0xba>
   89e6c:	2000      	movs	r0, #0
   89e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89e72:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89e74:	2b00      	cmp	r3, #0
   89e76:	dc9d      	bgt.n	89db4 <__sflush_r+0x1c>
   89e78:	e7f8      	b.n	89e6c <__sflush_r+0xd4>
   89e7a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   89e7c:	e7ae      	b.n	89ddc <__sflush_r+0x44>
   89e7e:	2100      	movs	r1, #0
   89e80:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   89e84:	692a      	ldr	r2, [r5, #16]
   89e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89e8a:	81ab      	strh	r3, [r5, #12]
   89e8c:	04db      	lsls	r3, r3, #19
   89e8e:	e9c5 2100 	strd	r2, r1, [r5]
   89e92:	d5c2      	bpl.n	89e1a <__sflush_r+0x82>
   89e94:	6528      	str	r0, [r5, #80]	; 0x50
   89e96:	e7c0      	b.n	89e1a <__sflush_r+0x82>
   89e98:	89ab      	ldrh	r3, [r5, #12]
   89e9a:	f04f 30ff 	mov.w	r0, #4294967295
   89e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89ea2:	81ab      	strh	r3, [r5, #12]
   89ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ea8:	f8d8 3000 	ldr.w	r3, [r8]
   89eac:	2b00      	cmp	r3, #0
   89eae:	d093      	beq.n	89dd8 <__sflush_r+0x40>
   89eb0:	2b1d      	cmp	r3, #29
   89eb2:	d006      	beq.n	89ec2 <__sflush_r+0x12a>
   89eb4:	2b16      	cmp	r3, #22
   89eb6:	d004      	beq.n	89ec2 <__sflush_r+0x12a>
   89eb8:	89ab      	ldrh	r3, [r5, #12]
   89eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89ebe:	81ab      	strh	r3, [r5, #12]
   89ec0:	e7d5      	b.n	89e6e <__sflush_r+0xd6>
   89ec2:	f8c8 6000 	str.w	r6, [r8]
   89ec6:	e7d1      	b.n	89e6c <__sflush_r+0xd4>

00089ec8 <_fflush_r>:
   89ec8:	b538      	push	{r3, r4, r5, lr}
   89eca:	460c      	mov	r4, r1
   89ecc:	4605      	mov	r5, r0
   89ece:	b108      	cbz	r0, 89ed4 <_fflush_r+0xc>
   89ed0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89ed2:	b1a3      	cbz	r3, 89efe <_fflush_r+0x36>
   89ed4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89ed8:	b1b8      	cbz	r0, 89f0a <_fflush_r+0x42>
   89eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89edc:	07db      	lsls	r3, r3, #31
   89ede:	d401      	bmi.n	89ee4 <_fflush_r+0x1c>
   89ee0:	0581      	lsls	r1, r0, #22
   89ee2:	d515      	bpl.n	89f10 <_fflush_r+0x48>
   89ee4:	4628      	mov	r0, r5
   89ee6:	4621      	mov	r1, r4
   89ee8:	f7ff ff56 	bl	89d98 <__sflush_r>
   89eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89eee:	4605      	mov	r5, r0
   89ef0:	07da      	lsls	r2, r3, #31
   89ef2:	d402      	bmi.n	89efa <_fflush_r+0x32>
   89ef4:	89a3      	ldrh	r3, [r4, #12]
   89ef6:	059b      	lsls	r3, r3, #22
   89ef8:	d50e      	bpl.n	89f18 <_fflush_r+0x50>
   89efa:	4628      	mov	r0, r5
   89efc:	bd38      	pop	{r3, r4, r5, pc}
   89efe:	f000 f83f 	bl	89f80 <__sinit>
   89f02:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   89f06:	2800      	cmp	r0, #0
   89f08:	d1e7      	bne.n	89eda <_fflush_r+0x12>
   89f0a:	4605      	mov	r5, r0
   89f0c:	4628      	mov	r0, r5
   89f0e:	bd38      	pop	{r3, r4, r5, pc}
   89f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f12:	f000 fc07 	bl	8a724 <__retarget_lock_acquire_recursive>
   89f16:	e7e5      	b.n	89ee4 <_fflush_r+0x1c>
   89f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89f1a:	f000 fc05 	bl	8a728 <__retarget_lock_release_recursive>
   89f1e:	4628      	mov	r0, r5
   89f20:	bd38      	pop	{r3, r4, r5, pc}
   89f22:	bf00      	nop

00089f24 <std>:
   89f24:	2300      	movs	r3, #0
   89f26:	b510      	push	{r4, lr}
   89f28:	4604      	mov	r4, r0
   89f2a:	e9c0 3300 	strd	r3, r3, [r0]
   89f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   89f32:	8181      	strh	r1, [r0, #12]
   89f34:	81c2      	strh	r2, [r0, #14]
   89f36:	4619      	mov	r1, r3
   89f38:	6083      	str	r3, [r0, #8]
   89f3a:	6643      	str	r3, [r0, #100]	; 0x64
   89f3c:	6183      	str	r3, [r0, #24]
   89f3e:	2208      	movs	r2, #8
   89f40:	305c      	adds	r0, #92	; 0x5c
   89f42:	f7fc f853 	bl	85fec <memset>
   89f46:	4807      	ldr	r0, [pc, #28]	; (89f64 <std+0x40>)
   89f48:	4907      	ldr	r1, [pc, #28]	; (89f68 <std+0x44>)
   89f4a:	4a08      	ldr	r2, [pc, #32]	; (89f6c <std+0x48>)
   89f4c:	4b08      	ldr	r3, [pc, #32]	; (89f70 <std+0x4c>)
   89f4e:	e9c4 4007 	strd	r4, r0, [r4, #28]
   89f52:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   89f56:	62e3      	str	r3, [r4, #44]	; 0x2c
   89f58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   89f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89f60:	f000 bbdc 	b.w	8a71c <__retarget_lock_init_recursive>
   89f64:	0008ba8d 	.word	0x0008ba8d
   89f68:	0008bab1 	.word	0x0008bab1
   89f6c:	0008baf1 	.word	0x0008baf1
   89f70:	0008bb11 	.word	0x0008bb11

00089f74 <_cleanup_r>:
   89f74:	4901      	ldr	r1, [pc, #4]	; (89f7c <_cleanup_r+0x8>)
   89f76:	f000 bba3 	b.w	8a6c0 <_fwalk_reent>
   89f7a:	bf00      	nop
   89f7c:	0008be91 	.word	0x0008be91

00089f80 <__sinit>:
   89f80:	b510      	push	{r4, lr}
   89f82:	4604      	mov	r4, r0
   89f84:	4813      	ldr	r0, [pc, #76]	; (89fd4 <__sinit+0x54>)
   89f86:	f000 fbcd 	bl	8a724 <__retarget_lock_acquire_recursive>
   89f8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   89f8c:	b9ea      	cbnz	r2, 89fca <__sinit+0x4a>
   89f8e:	2003      	movs	r0, #3
   89f90:	4911      	ldr	r1, [pc, #68]	; (89fd8 <__sinit+0x58>)
   89f92:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   89f96:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   89f9a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   89f9e:	63e1      	str	r1, [r4, #60]	; 0x3c
   89fa0:	6860      	ldr	r0, [r4, #4]
   89fa2:	2104      	movs	r1, #4
   89fa4:	f7ff ffbe 	bl	89f24 <std>
   89fa8:	68a0      	ldr	r0, [r4, #8]
   89faa:	2201      	movs	r2, #1
   89fac:	2109      	movs	r1, #9
   89fae:	f7ff ffb9 	bl	89f24 <std>
   89fb2:	68e0      	ldr	r0, [r4, #12]
   89fb4:	2202      	movs	r2, #2
   89fb6:	2112      	movs	r1, #18
   89fb8:	f7ff ffb4 	bl	89f24 <std>
   89fbc:	2301      	movs	r3, #1
   89fbe:	4805      	ldr	r0, [pc, #20]	; (89fd4 <__sinit+0x54>)
   89fc0:	63a3      	str	r3, [r4, #56]	; 0x38
   89fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89fc6:	f000 bbaf 	b.w	8a728 <__retarget_lock_release_recursive>
   89fca:	4802      	ldr	r0, [pc, #8]	; (89fd4 <__sinit+0x54>)
   89fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89fd0:	f000 bbaa 	b.w	8a728 <__retarget_lock_release_recursive>
   89fd4:	200026c0 	.word	0x200026c0
   89fd8:	00089f75 	.word	0x00089f75

00089fdc <__sfp_lock_acquire>:
   89fdc:	4801      	ldr	r0, [pc, #4]	; (89fe4 <__sfp_lock_acquire+0x8>)
   89fde:	f000 bba1 	b.w	8a724 <__retarget_lock_acquire_recursive>
   89fe2:	bf00      	nop
   89fe4:	200026d4 	.word	0x200026d4

00089fe8 <__sfp_lock_release>:
   89fe8:	4801      	ldr	r0, [pc, #4]	; (89ff0 <__sfp_lock_release+0x8>)
   89fea:	f000 bb9d 	b.w	8a728 <__retarget_lock_release_recursive>
   89fee:	bf00      	nop
   89ff0:	200026d4 	.word	0x200026d4

00089ff4 <__libc_fini_array>:
   89ff4:	b538      	push	{r3, r4, r5, lr}
   89ff6:	4b08      	ldr	r3, [pc, #32]	; (8a018 <__libc_fini_array+0x24>)
   89ff8:	4d08      	ldr	r5, [pc, #32]	; (8a01c <__libc_fini_array+0x28>)
   89ffa:	1b5b      	subs	r3, r3, r5
   89ffc:	109c      	asrs	r4, r3, #2
   89ffe:	d007      	beq.n	8a010 <__libc_fini_array+0x1c>
   8a000:	3b04      	subs	r3, #4
   8a002:	441d      	add	r5, r3
   8a004:	3c01      	subs	r4, #1
   8a006:	f855 3904 	ldr.w	r3, [r5], #-4
   8a00a:	4798      	blx	r3
   8a00c:	2c00      	cmp	r4, #0
   8a00e:	d1f9      	bne.n	8a004 <__libc_fini_array+0x10>
   8a010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a014:	f002 bfe6 	b.w	8cfe4 <_fini>
   8a018:	0008cff4 	.word	0x0008cff4
   8a01c:	0008cff0 	.word	0x0008cff0

0008a020 <__fputwc>:
   8a020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a024:	b083      	sub	sp, #12
   8a026:	4607      	mov	r7, r0
   8a028:	4688      	mov	r8, r1
   8a02a:	4614      	mov	r4, r2
   8a02c:	f000 fb6c 	bl	8a708 <__locale_mb_cur_max>
   8a030:	2801      	cmp	r0, #1
   8a032:	d103      	bne.n	8a03c <__fputwc+0x1c>
   8a034:	f108 33ff 	add.w	r3, r8, #4294967295
   8a038:	2bfe      	cmp	r3, #254	; 0xfe
   8a03a:	d933      	bls.n	8a0a4 <__fputwc+0x84>
   8a03c:	4642      	mov	r2, r8
   8a03e:	4638      	mov	r0, r7
   8a040:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a044:	a901      	add	r1, sp, #4
   8a046:	f001 fe3b 	bl	8bcc0 <_wcrtomb_r>
   8a04a:	1c42      	adds	r2, r0, #1
   8a04c:	4606      	mov	r6, r0
   8a04e:	d02f      	beq.n	8a0b0 <__fputwc+0x90>
   8a050:	b318      	cbz	r0, 8a09a <__fputwc+0x7a>
   8a052:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a056:	2500      	movs	r5, #0
   8a058:	f10d 0904 	add.w	r9, sp, #4
   8a05c:	e008      	b.n	8a070 <__fputwc+0x50>
   8a05e:	6823      	ldr	r3, [r4, #0]
   8a060:	1c5a      	adds	r2, r3, #1
   8a062:	6022      	str	r2, [r4, #0]
   8a064:	7019      	strb	r1, [r3, #0]
   8a066:	3501      	adds	r5, #1
   8a068:	42b5      	cmp	r5, r6
   8a06a:	d216      	bcs.n	8a09a <__fputwc+0x7a>
   8a06c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a070:	68a3      	ldr	r3, [r4, #8]
   8a072:	3b01      	subs	r3, #1
   8a074:	2b00      	cmp	r3, #0
   8a076:	60a3      	str	r3, [r4, #8]
   8a078:	daf1      	bge.n	8a05e <__fputwc+0x3e>
   8a07a:	69a2      	ldr	r2, [r4, #24]
   8a07c:	4293      	cmp	r3, r2
   8a07e:	db01      	blt.n	8a084 <__fputwc+0x64>
   8a080:	290a      	cmp	r1, #10
   8a082:	d1ec      	bne.n	8a05e <__fputwc+0x3e>
   8a084:	4622      	mov	r2, r4
   8a086:	4638      	mov	r0, r7
   8a088:	f001 fdc2 	bl	8bc10 <__swbuf_r>
   8a08c:	1c43      	adds	r3, r0, #1
   8a08e:	d1ea      	bne.n	8a066 <__fputwc+0x46>
   8a090:	4606      	mov	r6, r0
   8a092:	4630      	mov	r0, r6
   8a094:	b003      	add	sp, #12
   8a096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a09a:	4646      	mov	r6, r8
   8a09c:	4630      	mov	r0, r6
   8a09e:	b003      	add	sp, #12
   8a0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a0a4:	fa5f f188 	uxtb.w	r1, r8
   8a0a8:	4606      	mov	r6, r0
   8a0aa:	f88d 1004 	strb.w	r1, [sp, #4]
   8a0ae:	e7d2      	b.n	8a056 <__fputwc+0x36>
   8a0b0:	4630      	mov	r0, r6
   8a0b2:	89a3      	ldrh	r3, [r4, #12]
   8a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a0b8:	81a3      	strh	r3, [r4, #12]
   8a0ba:	b003      	add	sp, #12
   8a0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a0c0 <_fputwc_r>:
   8a0c0:	b530      	push	{r4, r5, lr}
   8a0c2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a0c4:	4614      	mov	r4, r2
   8a0c6:	f013 0f01 	tst.w	r3, #1
   8a0ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a0ce:	4605      	mov	r5, r0
   8a0d0:	b083      	sub	sp, #12
   8a0d2:	b29a      	uxth	r2, r3
   8a0d4:	d101      	bne.n	8a0da <_fputwc_r+0x1a>
   8a0d6:	0598      	lsls	r0, r3, #22
   8a0d8:	d51c      	bpl.n	8a114 <_fputwc_r+0x54>
   8a0da:	0490      	lsls	r0, r2, #18
   8a0dc:	d406      	bmi.n	8a0ec <_fputwc_r+0x2c>
   8a0de:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a0e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a0e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a0e8:	81a3      	strh	r3, [r4, #12]
   8a0ea:	6662      	str	r2, [r4, #100]	; 0x64
   8a0ec:	4628      	mov	r0, r5
   8a0ee:	4622      	mov	r2, r4
   8a0f0:	f7ff ff96 	bl	8a020 <__fputwc>
   8a0f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a0f6:	4605      	mov	r5, r0
   8a0f8:	07da      	lsls	r2, r3, #31
   8a0fa:	d402      	bmi.n	8a102 <_fputwc_r+0x42>
   8a0fc:	89a3      	ldrh	r3, [r4, #12]
   8a0fe:	059b      	lsls	r3, r3, #22
   8a100:	d502      	bpl.n	8a108 <_fputwc_r+0x48>
   8a102:	4628      	mov	r0, r5
   8a104:	b003      	add	sp, #12
   8a106:	bd30      	pop	{r4, r5, pc}
   8a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a10a:	f000 fb0d 	bl	8a728 <__retarget_lock_release_recursive>
   8a10e:	4628      	mov	r0, r5
   8a110:	b003      	add	sp, #12
   8a112:	bd30      	pop	{r4, r5, pc}
   8a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a116:	9101      	str	r1, [sp, #4]
   8a118:	f000 fb04 	bl	8a724 <__retarget_lock_acquire_recursive>
   8a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a120:	9901      	ldr	r1, [sp, #4]
   8a122:	b29a      	uxth	r2, r3
   8a124:	e7d9      	b.n	8a0da <_fputwc_r+0x1a>
   8a126:	bf00      	nop

0008a128 <_malloc_trim_r>:
   8a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a12a:	460c      	mov	r4, r1
   8a12c:	4f23      	ldr	r7, [pc, #140]	; (8a1bc <_malloc_trim_r+0x94>)
   8a12e:	4606      	mov	r6, r0
   8a130:	f000 feea 	bl	8af08 <__malloc_lock>
   8a134:	68bb      	ldr	r3, [r7, #8]
   8a136:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a13a:	685d      	ldr	r5, [r3, #4]
   8a13c:	310f      	adds	r1, #15
   8a13e:	f025 0503 	bic.w	r5, r5, #3
   8a142:	194b      	adds	r3, r1, r5
   8a144:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a148:	f023 030f 	bic.w	r3, r3, #15
   8a14c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a150:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a154:	db07      	blt.n	8a166 <_malloc_trim_r+0x3e>
   8a156:	2100      	movs	r1, #0
   8a158:	4630      	mov	r0, r6
   8a15a:	f001 fc85 	bl	8ba68 <_sbrk_r>
   8a15e:	68bb      	ldr	r3, [r7, #8]
   8a160:	442b      	add	r3, r5
   8a162:	4298      	cmp	r0, r3
   8a164:	d004      	beq.n	8a170 <_malloc_trim_r+0x48>
   8a166:	4630      	mov	r0, r6
   8a168:	f000 fed4 	bl	8af14 <__malloc_unlock>
   8a16c:	2000      	movs	r0, #0
   8a16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a170:	4630      	mov	r0, r6
   8a172:	4261      	negs	r1, r4
   8a174:	f001 fc78 	bl	8ba68 <_sbrk_r>
   8a178:	3001      	adds	r0, #1
   8a17a:	d00d      	beq.n	8a198 <_malloc_trim_r+0x70>
   8a17c:	4a10      	ldr	r2, [pc, #64]	; (8a1c0 <_malloc_trim_r+0x98>)
   8a17e:	68b9      	ldr	r1, [r7, #8]
   8a180:	6813      	ldr	r3, [r2, #0]
   8a182:	1b2d      	subs	r5, r5, r4
   8a184:	f045 0501 	orr.w	r5, r5, #1
   8a188:	4630      	mov	r0, r6
   8a18a:	1b1b      	subs	r3, r3, r4
   8a18c:	604d      	str	r5, [r1, #4]
   8a18e:	6013      	str	r3, [r2, #0]
   8a190:	f000 fec0 	bl	8af14 <__malloc_unlock>
   8a194:	2001      	movs	r0, #1
   8a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a198:	2100      	movs	r1, #0
   8a19a:	4630      	mov	r0, r6
   8a19c:	f001 fc64 	bl	8ba68 <_sbrk_r>
   8a1a0:	68ba      	ldr	r2, [r7, #8]
   8a1a2:	1a83      	subs	r3, r0, r2
   8a1a4:	2b0f      	cmp	r3, #15
   8a1a6:	ddde      	ble.n	8a166 <_malloc_trim_r+0x3e>
   8a1a8:	4906      	ldr	r1, [pc, #24]	; (8a1c4 <_malloc_trim_r+0x9c>)
   8a1aa:	f043 0301 	orr.w	r3, r3, #1
   8a1ae:	680c      	ldr	r4, [r1, #0]
   8a1b0:	4903      	ldr	r1, [pc, #12]	; (8a1c0 <_malloc_trim_r+0x98>)
   8a1b2:	1b00      	subs	r0, r0, r4
   8a1b4:	6053      	str	r3, [r2, #4]
   8a1b6:	6008      	str	r0, [r1, #0]
   8a1b8:	e7d5      	b.n	8a166 <_malloc_trim_r+0x3e>
   8a1ba:	bf00      	nop
   8a1bc:	20000f48 	.word	0x20000f48
   8a1c0:	200021a4 	.word	0x200021a4
   8a1c4:	20001350 	.word	0x20001350

0008a1c8 <_free_r>:
   8a1c8:	2900      	cmp	r1, #0
   8a1ca:	d05f      	beq.n	8a28c <_free_r+0xc4>
   8a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a1ce:	460c      	mov	r4, r1
   8a1d0:	4606      	mov	r6, r0
   8a1d2:	f000 fe99 	bl	8af08 <__malloc_lock>
   8a1d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a1da:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a3d0 <_free_r+0x208>
   8a1de:	f1a4 0008 	sub.w	r0, r4, #8
   8a1e2:	f023 0101 	bic.w	r1, r3, #1
   8a1e6:	1842      	adds	r2, r0, r1
   8a1e8:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a1ec:	6855      	ldr	r5, [r2, #4]
   8a1ee:	4297      	cmp	r7, r2
   8a1f0:	f025 0503 	bic.w	r5, r5, #3
   8a1f4:	f000 8089 	beq.w	8a30a <_free_r+0x142>
   8a1f8:	07df      	lsls	r7, r3, #31
   8a1fa:	6055      	str	r5, [r2, #4]
   8a1fc:	d434      	bmi.n	8a268 <_free_r+0xa0>
   8a1fe:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a202:	f10c 0408 	add.w	r4, ip, #8
   8a206:	1bc0      	subs	r0, r0, r7
   8a208:	6883      	ldr	r3, [r0, #8]
   8a20a:	4439      	add	r1, r7
   8a20c:	42a3      	cmp	r3, r4
   8a20e:	d06a      	beq.n	8a2e6 <_free_r+0x11e>
   8a210:	1957      	adds	r7, r2, r5
   8a212:	687f      	ldr	r7, [r7, #4]
   8a214:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a218:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a21c:	f8ce 3008 	str.w	r3, [lr, #8]
   8a220:	07fb      	lsls	r3, r7, #31
   8a222:	f140 8097 	bpl.w	8a354 <_free_r+0x18c>
   8a226:	f041 0301 	orr.w	r3, r1, #1
   8a22a:	6043      	str	r3, [r0, #4]
   8a22c:	6011      	str	r1, [r2, #0]
   8a22e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a232:	d234      	bcs.n	8a29e <_free_r+0xd6>
   8a234:	2201      	movs	r2, #1
   8a236:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a23a:	08cb      	lsrs	r3, r1, #3
   8a23c:	0949      	lsrs	r1, r1, #5
   8a23e:	4413      	add	r3, r2
   8a240:	fa02 f101 	lsl.w	r1, r2, r1
   8a244:	4321      	orrs	r1, r4
   8a246:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a24a:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a24e:	3a08      	subs	r2, #8
   8a250:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a254:	f8cc 1004 	str.w	r1, [ip, #4]
   8a258:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a25c:	60e0      	str	r0, [r4, #12]
   8a25e:	4630      	mov	r0, r6
   8a260:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a264:	f000 be56 	b.w	8af14 <__malloc_unlock>
   8a268:	1953      	adds	r3, r2, r5
   8a26a:	685b      	ldr	r3, [r3, #4]
   8a26c:	07df      	lsls	r7, r3, #31
   8a26e:	d40e      	bmi.n	8a28e <_free_r+0xc6>
   8a270:	4429      	add	r1, r5
   8a272:	f10c 0408 	add.w	r4, ip, #8
   8a276:	6893      	ldr	r3, [r2, #8]
   8a278:	42a3      	cmp	r3, r4
   8a27a:	d073      	beq.n	8a364 <_free_r+0x19c>
   8a27c:	68d4      	ldr	r4, [r2, #12]
   8a27e:	f041 0201 	orr.w	r2, r1, #1
   8a282:	60dc      	str	r4, [r3, #12]
   8a284:	60a3      	str	r3, [r4, #8]
   8a286:	6042      	str	r2, [r0, #4]
   8a288:	5041      	str	r1, [r0, r1]
   8a28a:	e7d0      	b.n	8a22e <_free_r+0x66>
   8a28c:	4770      	bx	lr
   8a28e:	f041 0301 	orr.w	r3, r1, #1
   8a292:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a296:	f844 3c04 	str.w	r3, [r4, #-4]
   8a29a:	6011      	str	r1, [r2, #0]
   8a29c:	d3ca      	bcc.n	8a234 <_free_r+0x6c>
   8a29e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a2a2:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a2a6:	d24a      	bcs.n	8a33e <_free_r+0x176>
   8a2a8:	098b      	lsrs	r3, r1, #6
   8a2aa:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a2ae:	00ed      	lsls	r5, r5, #3
   8a2b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a2b4:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a2b8:	eb0c 0405 	add.w	r4, ip, r5
   8a2bc:	3c08      	subs	r4, #8
   8a2be:	429c      	cmp	r4, r3
   8a2c0:	d059      	beq.n	8a376 <_free_r+0x1ae>
   8a2c2:	685a      	ldr	r2, [r3, #4]
   8a2c4:	f022 0203 	bic.w	r2, r2, #3
   8a2c8:	428a      	cmp	r2, r1
   8a2ca:	d902      	bls.n	8a2d2 <_free_r+0x10a>
   8a2cc:	689b      	ldr	r3, [r3, #8]
   8a2ce:	429c      	cmp	r4, r3
   8a2d0:	d1f7      	bne.n	8a2c2 <_free_r+0xfa>
   8a2d2:	68dc      	ldr	r4, [r3, #12]
   8a2d4:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a2d8:	60a0      	str	r0, [r4, #8]
   8a2da:	60d8      	str	r0, [r3, #12]
   8a2dc:	4630      	mov	r0, r6
   8a2de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a2e2:	f000 be17 	b.w	8af14 <__malloc_unlock>
   8a2e6:	1953      	adds	r3, r2, r5
   8a2e8:	685b      	ldr	r3, [r3, #4]
   8a2ea:	07db      	lsls	r3, r3, #31
   8a2ec:	d466      	bmi.n	8a3bc <_free_r+0x1f4>
   8a2ee:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a2f2:	4429      	add	r1, r5
   8a2f4:	f041 0401 	orr.w	r4, r1, #1
   8a2f8:	60d3      	str	r3, [r2, #12]
   8a2fa:	609a      	str	r2, [r3, #8]
   8a2fc:	6044      	str	r4, [r0, #4]
   8a2fe:	5041      	str	r1, [r0, r1]
   8a300:	4630      	mov	r0, r6
   8a302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a306:	f000 be05 	b.w	8af14 <__malloc_unlock>
   8a30a:	07db      	lsls	r3, r3, #31
   8a30c:	4429      	add	r1, r5
   8a30e:	d407      	bmi.n	8a320 <_free_r+0x158>
   8a310:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a314:	1b00      	subs	r0, r0, r4
   8a316:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a31a:	4421      	add	r1, r4
   8a31c:	60d3      	str	r3, [r2, #12]
   8a31e:	609a      	str	r2, [r3, #8]
   8a320:	4b29      	ldr	r3, [pc, #164]	; (8a3c8 <_free_r+0x200>)
   8a322:	f041 0201 	orr.w	r2, r1, #1
   8a326:	681b      	ldr	r3, [r3, #0]
   8a328:	6042      	str	r2, [r0, #4]
   8a32a:	428b      	cmp	r3, r1
   8a32c:	f8cc 0008 	str.w	r0, [ip, #8]
   8a330:	d895      	bhi.n	8a25e <_free_r+0x96>
   8a332:	4b26      	ldr	r3, [pc, #152]	; (8a3cc <_free_r+0x204>)
   8a334:	4630      	mov	r0, r6
   8a336:	6819      	ldr	r1, [r3, #0]
   8a338:	f7ff fef6 	bl	8a128 <_malloc_trim_r>
   8a33c:	e78f      	b.n	8a25e <_free_r+0x96>
   8a33e:	2b14      	cmp	r3, #20
   8a340:	d90a      	bls.n	8a358 <_free_r+0x190>
   8a342:	2b54      	cmp	r3, #84	; 0x54
   8a344:	d821      	bhi.n	8a38a <_free_r+0x1c2>
   8a346:	0b0b      	lsrs	r3, r1, #12
   8a348:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a34c:	00ed      	lsls	r5, r5, #3
   8a34e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a352:	e7af      	b.n	8a2b4 <_free_r+0xec>
   8a354:	4429      	add	r1, r5
   8a356:	e78e      	b.n	8a276 <_free_r+0xae>
   8a358:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a35c:	00ed      	lsls	r5, r5, #3
   8a35e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a362:	e7a7      	b.n	8a2b4 <_free_r+0xec>
   8a364:	f041 0301 	orr.w	r3, r1, #1
   8a368:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a36c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a370:	6043      	str	r3, [r0, #4]
   8a372:	5041      	str	r1, [r0, r1]
   8a374:	e773      	b.n	8a25e <_free_r+0x96>
   8a376:	2501      	movs	r5, #1
   8a378:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a37c:	1092      	asrs	r2, r2, #2
   8a37e:	fa05 f202 	lsl.w	r2, r5, r2
   8a382:	430a      	orrs	r2, r1
   8a384:	f8cc 2004 	str.w	r2, [ip, #4]
   8a388:	e7a4      	b.n	8a2d4 <_free_r+0x10c>
   8a38a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a38e:	d806      	bhi.n	8a39e <_free_r+0x1d6>
   8a390:	0bcb      	lsrs	r3, r1, #15
   8a392:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a396:	00ed      	lsls	r5, r5, #3
   8a398:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a39c:	e78a      	b.n	8a2b4 <_free_r+0xec>
   8a39e:	f240 5254 	movw	r2, #1364	; 0x554
   8a3a2:	4293      	cmp	r3, r2
   8a3a4:	d806      	bhi.n	8a3b4 <_free_r+0x1ec>
   8a3a6:	0c8b      	lsrs	r3, r1, #18
   8a3a8:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a3ac:	00ed      	lsls	r5, r5, #3
   8a3ae:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a3b2:	e77f      	b.n	8a2b4 <_free_r+0xec>
   8a3b4:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a3b8:	227e      	movs	r2, #126	; 0x7e
   8a3ba:	e77b      	b.n	8a2b4 <_free_r+0xec>
   8a3bc:	f041 0301 	orr.w	r3, r1, #1
   8a3c0:	6043      	str	r3, [r0, #4]
   8a3c2:	6011      	str	r1, [r2, #0]
   8a3c4:	e74b      	b.n	8a25e <_free_r+0x96>
   8a3c6:	bf00      	nop
   8a3c8:	20001354 	.word	0x20001354
   8a3cc:	200021d4 	.word	0x200021d4
   8a3d0:	20000f48 	.word	0x20000f48

0008a3d4 <__sfvwrite_r>:
   8a3d4:	6893      	ldr	r3, [r2, #8]
   8a3d6:	2b00      	cmp	r3, #0
   8a3d8:	f000 80bd 	beq.w	8a556 <__sfvwrite_r+0x182>
   8a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a3e0:	4690      	mov	r8, r2
   8a3e2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a3e6:	460c      	mov	r4, r1
   8a3e8:	0711      	lsls	r1, r2, #28
   8a3ea:	4681      	mov	r9, r0
   8a3ec:	b083      	sub	sp, #12
   8a3ee:	b293      	uxth	r3, r2
   8a3f0:	d527      	bpl.n	8a442 <__sfvwrite_r+0x6e>
   8a3f2:	6922      	ldr	r2, [r4, #16]
   8a3f4:	b32a      	cbz	r2, 8a442 <__sfvwrite_r+0x6e>
   8a3f6:	f013 0702 	ands.w	r7, r3, #2
   8a3fa:	f8d8 5000 	ldr.w	r5, [r8]
   8a3fe:	d02f      	beq.n	8a460 <__sfvwrite_r+0x8c>
   8a400:	f04f 0b00 	mov.w	fp, #0
   8a404:	465f      	mov	r7, fp
   8a406:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8a6bc <__sfvwrite_r+0x2e8>
   8a40a:	2f00      	cmp	r7, #0
   8a40c:	f000 8089 	beq.w	8a522 <__sfvwrite_r+0x14e>
   8a410:	4557      	cmp	r7, sl
   8a412:	463b      	mov	r3, r7
   8a414:	465a      	mov	r2, fp
   8a416:	bf28      	it	cs
   8a418:	4653      	movcs	r3, sl
   8a41a:	4648      	mov	r0, r9
   8a41c:	69e1      	ldr	r1, [r4, #28]
   8a41e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a420:	47b0      	blx	r6
   8a422:	2800      	cmp	r0, #0
   8a424:	f340 808d 	ble.w	8a542 <__sfvwrite_r+0x16e>
   8a428:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a42c:	4483      	add	fp, r0
   8a42e:	1a1b      	subs	r3, r3, r0
   8a430:	1a3f      	subs	r7, r7, r0
   8a432:	f8c8 3008 	str.w	r3, [r8, #8]
   8a436:	2b00      	cmp	r3, #0
   8a438:	d1e7      	bne.n	8a40a <__sfvwrite_r+0x36>
   8a43a:	2000      	movs	r0, #0
   8a43c:	b003      	add	sp, #12
   8a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a442:	4621      	mov	r1, r4
   8a444:	4648      	mov	r0, r9
   8a446:	f7fe fc3b 	bl	88cc0 <__swsetup_r>
   8a44a:	2800      	cmp	r0, #0
   8a44c:	f040 8132 	bne.w	8a6b4 <__sfvwrite_r+0x2e0>
   8a450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a454:	f8d8 5000 	ldr.w	r5, [r8]
   8a458:	b293      	uxth	r3, r2
   8a45a:	f013 0702 	ands.w	r7, r3, #2
   8a45e:	d1cf      	bne.n	8a400 <__sfvwrite_r+0x2c>
   8a460:	f013 0a01 	ands.w	sl, r3, #1
   8a464:	d179      	bne.n	8a55a <__sfvwrite_r+0x186>
   8a466:	4656      	mov	r6, sl
   8a468:	2e00      	cmp	r6, #0
   8a46a:	d056      	beq.n	8a51a <__sfvwrite_r+0x146>
   8a46c:	059a      	lsls	r2, r3, #22
   8a46e:	68a7      	ldr	r7, [r4, #8]
   8a470:	f140 80bd 	bpl.w	8a5ee <__sfvwrite_r+0x21a>
   8a474:	42b7      	cmp	r7, r6
   8a476:	46bb      	mov	fp, r7
   8a478:	f200 80d2 	bhi.w	8a620 <__sfvwrite_r+0x24c>
   8a47c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a480:	f000 80d0 	beq.w	8a624 <__sfvwrite_r+0x250>
   8a484:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8a488:	6822      	ldr	r2, [r4, #0]
   8a48a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8a48e:	eba2 0b01 	sub.w	fp, r2, r1
   8a492:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8a496:	f10b 0001 	add.w	r0, fp, #1
   8a49a:	107f      	asrs	r7, r7, #1
   8a49c:	4430      	add	r0, r6
   8a49e:	42b8      	cmp	r0, r7
   8a4a0:	463a      	mov	r2, r7
   8a4a2:	bf84      	itt	hi
   8a4a4:	4607      	movhi	r7, r0
   8a4a6:	463a      	movhi	r2, r7
   8a4a8:	055b      	lsls	r3, r3, #21
   8a4aa:	f140 80e7 	bpl.w	8a67c <__sfvwrite_r+0x2a8>
   8a4ae:	4611      	mov	r1, r2
   8a4b0:	4648      	mov	r0, r9
   8a4b2:	f000 f9bb 	bl	8a82c <_malloc_r>
   8a4b6:	2800      	cmp	r0, #0
   8a4b8:	f000 80f6 	beq.w	8a6a8 <__sfvwrite_r+0x2d4>
   8a4bc:	465a      	mov	r2, fp
   8a4be:	6921      	ldr	r1, [r4, #16]
   8a4c0:	9000      	str	r0, [sp, #0]
   8a4c2:	f7fb fd1d 	bl	85f00 <memcpy>
   8a4c6:	89a2      	ldrh	r2, [r4, #12]
   8a4c8:	9b00      	ldr	r3, [sp, #0]
   8a4ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a4ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a4d2:	81a2      	strh	r2, [r4, #12]
   8a4d4:	eba7 020b 	sub.w	r2, r7, fp
   8a4d8:	eb03 000b 	add.w	r0, r3, fp
   8a4dc:	6167      	str	r7, [r4, #20]
   8a4de:	46b3      	mov	fp, r6
   8a4e0:	4637      	mov	r7, r6
   8a4e2:	6123      	str	r3, [r4, #16]
   8a4e4:	6020      	str	r0, [r4, #0]
   8a4e6:	60a2      	str	r2, [r4, #8]
   8a4e8:	465a      	mov	r2, fp
   8a4ea:	4651      	mov	r1, sl
   8a4ec:	f000 fca2 	bl	8ae34 <memmove>
   8a4f0:	68a2      	ldr	r2, [r4, #8]
   8a4f2:	6823      	ldr	r3, [r4, #0]
   8a4f4:	1bd2      	subs	r2, r2, r7
   8a4f6:	4637      	mov	r7, r6
   8a4f8:	2600      	movs	r6, #0
   8a4fa:	445b      	add	r3, fp
   8a4fc:	60a2      	str	r2, [r4, #8]
   8a4fe:	6023      	str	r3, [r4, #0]
   8a500:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8a504:	44ba      	add	sl, r7
   8a506:	1bd7      	subs	r7, r2, r7
   8a508:	f8c8 7008 	str.w	r7, [r8, #8]
   8a50c:	2f00      	cmp	r7, #0
   8a50e:	d094      	beq.n	8a43a <__sfvwrite_r+0x66>
   8a510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a514:	b29b      	uxth	r3, r3
   8a516:	2e00      	cmp	r6, #0
   8a518:	d1a8      	bne.n	8a46c <__sfvwrite_r+0x98>
   8a51a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8a51e:	3508      	adds	r5, #8
   8a520:	e7a2      	b.n	8a468 <__sfvwrite_r+0x94>
   8a522:	e9d5 b700 	ldrd	fp, r7, [r5]
   8a526:	3508      	adds	r5, #8
   8a528:	e76f      	b.n	8a40a <__sfvwrite_r+0x36>
   8a52a:	4629      	mov	r1, r5
   8a52c:	465a      	mov	r2, fp
   8a52e:	f000 fc81 	bl	8ae34 <memmove>
   8a532:	6823      	ldr	r3, [r4, #0]
   8a534:	4621      	mov	r1, r4
   8a536:	445b      	add	r3, fp
   8a538:	4648      	mov	r0, r9
   8a53a:	6023      	str	r3, [r4, #0]
   8a53c:	f7ff fcc4 	bl	89ec8 <_fflush_r>
   8a540:	b358      	cbz	r0, 8a59a <__sfvwrite_r+0x1c6>
   8a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a546:	f04f 30ff 	mov.w	r0, #4294967295
   8a54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a54e:	81a3      	strh	r3, [r4, #12]
   8a550:	b003      	add	sp, #12
   8a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a556:	2000      	movs	r0, #0
   8a558:	4770      	bx	lr
   8a55a:	463e      	mov	r6, r7
   8a55c:	46aa      	mov	sl, r5
   8a55e:	4638      	mov	r0, r7
   8a560:	463d      	mov	r5, r7
   8a562:	9700      	str	r7, [sp, #0]
   8a564:	b36e      	cbz	r6, 8a5c2 <__sfvwrite_r+0x1ee>
   8a566:	2800      	cmp	r0, #0
   8a568:	d035      	beq.n	8a5d6 <__sfvwrite_r+0x202>
   8a56a:	9a00      	ldr	r2, [sp, #0]
   8a56c:	6820      	ldr	r0, [r4, #0]
   8a56e:	6921      	ldr	r1, [r4, #16]
   8a570:	42b2      	cmp	r2, r6
   8a572:	bf28      	it	cs
   8a574:	4632      	movcs	r2, r6
   8a576:	4288      	cmp	r0, r1
   8a578:	6963      	ldr	r3, [r4, #20]
   8a57a:	d904      	bls.n	8a586 <__sfvwrite_r+0x1b2>
   8a57c:	68a1      	ldr	r1, [r4, #8]
   8a57e:	eb03 0b01 	add.w	fp, r3, r1
   8a582:	455a      	cmp	r2, fp
   8a584:	dcd1      	bgt.n	8a52a <__sfvwrite_r+0x156>
   8a586:	4293      	cmp	r3, r2
   8a588:	dc6b      	bgt.n	8a662 <__sfvwrite_r+0x28e>
   8a58a:	462a      	mov	r2, r5
   8a58c:	4648      	mov	r0, r9
   8a58e:	69e1      	ldr	r1, [r4, #28]
   8a590:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a592:	47b8      	blx	r7
   8a594:	f1b0 0b00 	subs.w	fp, r0, #0
   8a598:	ddd3      	ble.n	8a542 <__sfvwrite_r+0x16e>
   8a59a:	9b00      	ldr	r3, [sp, #0]
   8a59c:	ebb3 030b 	subs.w	r3, r3, fp
   8a5a0:	9300      	str	r3, [sp, #0]
   8a5a2:	d057      	beq.n	8a654 <__sfvwrite_r+0x280>
   8a5a4:	2001      	movs	r0, #1
   8a5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a5aa:	445d      	add	r5, fp
   8a5ac:	eba3 030b 	sub.w	r3, r3, fp
   8a5b0:	eba6 060b 	sub.w	r6, r6, fp
   8a5b4:	f8c8 3008 	str.w	r3, [r8, #8]
   8a5b8:	2b00      	cmp	r3, #0
   8a5ba:	f43f af3e 	beq.w	8a43a <__sfvwrite_r+0x66>
   8a5be:	2e00      	cmp	r6, #0
   8a5c0:	d1d1      	bne.n	8a566 <__sfvwrite_r+0x192>
   8a5c2:	f10a 0308 	add.w	r3, sl, #8
   8a5c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a5ca:	469a      	mov	sl, r3
   8a5cc:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a5d0:	3308      	adds	r3, #8
   8a5d2:	2e00      	cmp	r6, #0
   8a5d4:	d0f7      	beq.n	8a5c6 <__sfvwrite_r+0x1f2>
   8a5d6:	4632      	mov	r2, r6
   8a5d8:	210a      	movs	r1, #10
   8a5da:	4628      	mov	r0, r5
   8a5dc:	f000 fbea 	bl	8adb4 <memchr>
   8a5e0:	2800      	cmp	r0, #0
   8a5e2:	d05e      	beq.n	8a6a2 <__sfvwrite_r+0x2ce>
   8a5e4:	3001      	adds	r0, #1
   8a5e6:	1b43      	subs	r3, r0, r5
   8a5e8:	461a      	mov	r2, r3
   8a5ea:	9300      	str	r3, [sp, #0]
   8a5ec:	e7be      	b.n	8a56c <__sfvwrite_r+0x198>
   8a5ee:	6820      	ldr	r0, [r4, #0]
   8a5f0:	6923      	ldr	r3, [r4, #16]
   8a5f2:	4298      	cmp	r0, r3
   8a5f4:	d818      	bhi.n	8a628 <__sfvwrite_r+0x254>
   8a5f6:	6962      	ldr	r2, [r4, #20]
   8a5f8:	42b2      	cmp	r2, r6
   8a5fa:	d815      	bhi.n	8a628 <__sfvwrite_r+0x254>
   8a5fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8a600:	42b3      	cmp	r3, r6
   8a602:	bf28      	it	cs
   8a604:	4633      	movcs	r3, r6
   8a606:	fb93 f3f2 	sdiv	r3, r3, r2
   8a60a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a60c:	fb02 f303 	mul.w	r3, r2, r3
   8a610:	4648      	mov	r0, r9
   8a612:	4652      	mov	r2, sl
   8a614:	69e1      	ldr	r1, [r4, #28]
   8a616:	47b8      	blx	r7
   8a618:	1e07      	subs	r7, r0, #0
   8a61a:	dd92      	ble.n	8a542 <__sfvwrite_r+0x16e>
   8a61c:	1bf6      	subs	r6, r6, r7
   8a61e:	e76f      	b.n	8a500 <__sfvwrite_r+0x12c>
   8a620:	4637      	mov	r7, r6
   8a622:	46b3      	mov	fp, r6
   8a624:	6820      	ldr	r0, [r4, #0]
   8a626:	e75f      	b.n	8a4e8 <__sfvwrite_r+0x114>
   8a628:	42b7      	cmp	r7, r6
   8a62a:	bf28      	it	cs
   8a62c:	4637      	movcs	r7, r6
   8a62e:	4651      	mov	r1, sl
   8a630:	463a      	mov	r2, r7
   8a632:	f000 fbff 	bl	8ae34 <memmove>
   8a636:	68a3      	ldr	r3, [r4, #8]
   8a638:	6822      	ldr	r2, [r4, #0]
   8a63a:	1bdb      	subs	r3, r3, r7
   8a63c:	443a      	add	r2, r7
   8a63e:	60a3      	str	r3, [r4, #8]
   8a640:	6022      	str	r2, [r4, #0]
   8a642:	2b00      	cmp	r3, #0
   8a644:	d1ea      	bne.n	8a61c <__sfvwrite_r+0x248>
   8a646:	4621      	mov	r1, r4
   8a648:	4648      	mov	r0, r9
   8a64a:	f7ff fc3d 	bl	89ec8 <_fflush_r>
   8a64e:	2800      	cmp	r0, #0
   8a650:	d0e4      	beq.n	8a61c <__sfvwrite_r+0x248>
   8a652:	e776      	b.n	8a542 <__sfvwrite_r+0x16e>
   8a654:	4621      	mov	r1, r4
   8a656:	4648      	mov	r0, r9
   8a658:	f7ff fc36 	bl	89ec8 <_fflush_r>
   8a65c:	2800      	cmp	r0, #0
   8a65e:	d0a2      	beq.n	8a5a6 <__sfvwrite_r+0x1d2>
   8a660:	e76f      	b.n	8a542 <__sfvwrite_r+0x16e>
   8a662:	4629      	mov	r1, r5
   8a664:	4693      	mov	fp, r2
   8a666:	9201      	str	r2, [sp, #4]
   8a668:	f000 fbe4 	bl	8ae34 <memmove>
   8a66c:	68a1      	ldr	r1, [r4, #8]
   8a66e:	6823      	ldr	r3, [r4, #0]
   8a670:	9a01      	ldr	r2, [sp, #4]
   8a672:	1a89      	subs	r1, r1, r2
   8a674:	441a      	add	r2, r3
   8a676:	60a1      	str	r1, [r4, #8]
   8a678:	6022      	str	r2, [r4, #0]
   8a67a:	e78e      	b.n	8a59a <__sfvwrite_r+0x1c6>
   8a67c:	4648      	mov	r0, r9
   8a67e:	f000 ffcb 	bl	8b618 <_realloc_r>
   8a682:	4603      	mov	r3, r0
   8a684:	2800      	cmp	r0, #0
   8a686:	f47f af25 	bne.w	8a4d4 <__sfvwrite_r+0x100>
   8a68a:	4648      	mov	r0, r9
   8a68c:	6921      	ldr	r1, [r4, #16]
   8a68e:	f7ff fd9b 	bl	8a1c8 <_free_r>
   8a692:	220c      	movs	r2, #12
   8a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a698:	f8c9 2000 	str.w	r2, [r9]
   8a69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a6a0:	e751      	b.n	8a546 <__sfvwrite_r+0x172>
   8a6a2:	1c72      	adds	r2, r6, #1
   8a6a4:	9200      	str	r2, [sp, #0]
   8a6a6:	e761      	b.n	8a56c <__sfvwrite_r+0x198>
   8a6a8:	220c      	movs	r2, #12
   8a6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a6ae:	f8c9 2000 	str.w	r2, [r9]
   8a6b2:	e748      	b.n	8a546 <__sfvwrite_r+0x172>
   8a6b4:	f04f 30ff 	mov.w	r0, #4294967295
   8a6b8:	e6c0      	b.n	8a43c <__sfvwrite_r+0x68>
   8a6ba:	bf00      	nop
   8a6bc:	7ffffc00 	.word	0x7ffffc00

0008a6c0 <_fwalk_reent>:
   8a6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a6c4:	4607      	mov	r7, r0
   8a6c6:	4688      	mov	r8, r1
   8a6c8:	f04f 0900 	mov.w	r9, #0
   8a6cc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a6d0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a6d4:	3d01      	subs	r5, #1
   8a6d6:	d410      	bmi.n	8a6fa <_fwalk_reent+0x3a>
   8a6d8:	89a3      	ldrh	r3, [r4, #12]
   8a6da:	3d01      	subs	r5, #1
   8a6dc:	2b01      	cmp	r3, #1
   8a6de:	d908      	bls.n	8a6f2 <_fwalk_reent+0x32>
   8a6e0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a6e4:	3301      	adds	r3, #1
   8a6e6:	d004      	beq.n	8a6f2 <_fwalk_reent+0x32>
   8a6e8:	4621      	mov	r1, r4
   8a6ea:	4638      	mov	r0, r7
   8a6ec:	47c0      	blx	r8
   8a6ee:	ea49 0900 	orr.w	r9, r9, r0
   8a6f2:	1c6b      	adds	r3, r5, #1
   8a6f4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a6f8:	d1ee      	bne.n	8a6d8 <_fwalk_reent+0x18>
   8a6fa:	6836      	ldr	r6, [r6, #0]
   8a6fc:	2e00      	cmp	r6, #0
   8a6fe:	d1e7      	bne.n	8a6d0 <_fwalk_reent+0x10>
   8a700:	4648      	mov	r0, r9
   8a702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a706:	bf00      	nop

0008a708 <__locale_mb_cur_max>:
   8a708:	4b01      	ldr	r3, [pc, #4]	; (8a710 <__locale_mb_cur_max+0x8>)
   8a70a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a70e:	4770      	bx	lr
   8a710:	20000ddc 	.word	0x20000ddc

0008a714 <_localeconv_r>:
   8a714:	4800      	ldr	r0, [pc, #0]	; (8a718 <_localeconv_r+0x4>)
   8a716:	4770      	bx	lr
   8a718:	20000ecc 	.word	0x20000ecc

0008a71c <__retarget_lock_init_recursive>:
   8a71c:	4770      	bx	lr
   8a71e:	bf00      	nop

0008a720 <__retarget_lock_close_recursive>:
   8a720:	4770      	bx	lr
   8a722:	bf00      	nop

0008a724 <__retarget_lock_acquire_recursive>:
   8a724:	4770      	bx	lr
   8a726:	bf00      	nop

0008a728 <__retarget_lock_release_recursive>:
   8a728:	4770      	bx	lr
   8a72a:	bf00      	nop

0008a72c <__swhatbuf_r>:
   8a72c:	b570      	push	{r4, r5, r6, lr}
   8a72e:	460c      	mov	r4, r1
   8a730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a734:	4615      	mov	r5, r2
   8a736:	2900      	cmp	r1, #0
   8a738:	461e      	mov	r6, r3
   8a73a:	b096      	sub	sp, #88	; 0x58
   8a73c:	db14      	blt.n	8a768 <__swhatbuf_r+0x3c>
   8a73e:	466a      	mov	r2, sp
   8a740:	f001 fc20 	bl	8bf84 <_fstat_r>
   8a744:	2800      	cmp	r0, #0
   8a746:	db0f      	blt.n	8a768 <__swhatbuf_r+0x3c>
   8a748:	9a01      	ldr	r2, [sp, #4]
   8a74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a74e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a752:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a756:	fab2 f282 	clz	r2, r2
   8a75a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a75e:	0952      	lsrs	r2, r2, #5
   8a760:	6032      	str	r2, [r6, #0]
   8a762:	602b      	str	r3, [r5, #0]
   8a764:	b016      	add	sp, #88	; 0x58
   8a766:	bd70      	pop	{r4, r5, r6, pc}
   8a768:	2300      	movs	r3, #0
   8a76a:	89a1      	ldrh	r1, [r4, #12]
   8a76c:	6033      	str	r3, [r6, #0]
   8a76e:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a772:	d004      	beq.n	8a77e <__swhatbuf_r+0x52>
   8a774:	2240      	movs	r2, #64	; 0x40
   8a776:	4618      	mov	r0, r3
   8a778:	602a      	str	r2, [r5, #0]
   8a77a:	b016      	add	sp, #88	; 0x58
   8a77c:	bd70      	pop	{r4, r5, r6, pc}
   8a77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a782:	602b      	str	r3, [r5, #0]
   8a784:	b016      	add	sp, #88	; 0x58
   8a786:	bd70      	pop	{r4, r5, r6, pc}

0008a788 <__smakebuf_r>:
   8a788:	b570      	push	{r4, r5, r6, lr}
   8a78a:	898b      	ldrh	r3, [r1, #12]
   8a78c:	460c      	mov	r4, r1
   8a78e:	079d      	lsls	r5, r3, #30
   8a790:	b082      	sub	sp, #8
   8a792:	d507      	bpl.n	8a7a4 <__smakebuf_r+0x1c>
   8a794:	2201      	movs	r2, #1
   8a796:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8a79a:	614a      	str	r2, [r1, #20]
   8a79c:	600b      	str	r3, [r1, #0]
   8a79e:	610b      	str	r3, [r1, #16]
   8a7a0:	b002      	add	sp, #8
   8a7a2:	bd70      	pop	{r4, r5, r6, pc}
   8a7a4:	ab01      	add	r3, sp, #4
   8a7a6:	466a      	mov	r2, sp
   8a7a8:	4606      	mov	r6, r0
   8a7aa:	f7ff ffbf 	bl	8a72c <__swhatbuf_r>
   8a7ae:	9900      	ldr	r1, [sp, #0]
   8a7b0:	4605      	mov	r5, r0
   8a7b2:	4630      	mov	r0, r6
   8a7b4:	f000 f83a 	bl	8a82c <_malloc_r>
   8a7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a7bc:	b170      	cbz	r0, 8a7dc <__smakebuf_r+0x54>
   8a7be:	4916      	ldr	r1, [pc, #88]	; (8a818 <__smakebuf_r+0x90>)
   8a7c0:	9a00      	ldr	r2, [sp, #0]
   8a7c2:	63f1      	str	r1, [r6, #60]	; 0x3c
   8a7c4:	9901      	ldr	r1, [sp, #4]
   8a7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a7ca:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8a7ce:	81a3      	strh	r3, [r4, #12]
   8a7d0:	6020      	str	r0, [r4, #0]
   8a7d2:	b989      	cbnz	r1, 8a7f8 <__smakebuf_r+0x70>
   8a7d4:	432b      	orrs	r3, r5
   8a7d6:	81a3      	strh	r3, [r4, #12]
   8a7d8:	b002      	add	sp, #8
   8a7da:	bd70      	pop	{r4, r5, r6, pc}
   8a7dc:	059a      	lsls	r2, r3, #22
   8a7de:	d4df      	bmi.n	8a7a0 <__smakebuf_r+0x18>
   8a7e0:	2101      	movs	r1, #1
   8a7e2:	f023 0303 	bic.w	r3, r3, #3
   8a7e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a7ea:	f043 0302 	orr.w	r3, r3, #2
   8a7ee:	81a3      	strh	r3, [r4, #12]
   8a7f0:	6161      	str	r1, [r4, #20]
   8a7f2:	6022      	str	r2, [r4, #0]
   8a7f4:	6122      	str	r2, [r4, #16]
   8a7f6:	e7d3      	b.n	8a7a0 <__smakebuf_r+0x18>
   8a7f8:	4630      	mov	r0, r6
   8a7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a7fe:	f001 fbd7 	bl	8bfb0 <_isatty_r>
   8a802:	b910      	cbnz	r0, 8a80a <__smakebuf_r+0x82>
   8a804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a808:	e7e4      	b.n	8a7d4 <__smakebuf_r+0x4c>
   8a80a:	89a2      	ldrh	r2, [r4, #12]
   8a80c:	f022 0203 	bic.w	r2, r2, #3
   8a810:	f042 0201 	orr.w	r2, r2, #1
   8a814:	b213      	sxth	r3, r2
   8a816:	e7dd      	b.n	8a7d4 <__smakebuf_r+0x4c>
   8a818:	00089f75 	.word	0x00089f75

0008a81c <malloc>:
   8a81c:	4b02      	ldr	r3, [pc, #8]	; (8a828 <malloc+0xc>)
   8a81e:	4601      	mov	r1, r0
   8a820:	6818      	ldr	r0, [r3, #0]
   8a822:	f000 b803 	b.w	8a82c <_malloc_r>
   8a826:	bf00      	nop
   8a828:	200009ac 	.word	0x200009ac

0008a82c <_malloc_r>:
   8a82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a830:	f101 050b 	add.w	r5, r1, #11
   8a834:	2d16      	cmp	r5, #22
   8a836:	4606      	mov	r6, r0
   8a838:	b083      	sub	sp, #12
   8a83a:	d824      	bhi.n	8a886 <_malloc_r+0x5a>
   8a83c:	2910      	cmp	r1, #16
   8a83e:	f200 80b6 	bhi.w	8a9ae <_malloc_r+0x182>
   8a842:	f000 fb61 	bl	8af08 <__malloc_lock>
   8a846:	2510      	movs	r5, #16
   8a848:	2002      	movs	r0, #2
   8a84a:	2318      	movs	r3, #24
   8a84c:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8ad38 <_malloc_r+0x50c>
   8a850:	4443      	add	r3, r8
   8a852:	685c      	ldr	r4, [r3, #4]
   8a854:	f1a3 0208 	sub.w	r2, r3, #8
   8a858:	4294      	cmp	r4, r2
   8a85a:	f000 80b4 	beq.w	8a9c6 <_malloc_r+0x19a>
   8a85e:	6863      	ldr	r3, [r4, #4]
   8a860:	68e1      	ldr	r1, [r4, #12]
   8a862:	f023 0303 	bic.w	r3, r3, #3
   8a866:	4423      	add	r3, r4
   8a868:	685a      	ldr	r2, [r3, #4]
   8a86a:	68a5      	ldr	r5, [r4, #8]
   8a86c:	f042 0201 	orr.w	r2, r2, #1
   8a870:	60e9      	str	r1, [r5, #12]
   8a872:	4630      	mov	r0, r6
   8a874:	608d      	str	r5, [r1, #8]
   8a876:	3408      	adds	r4, #8
   8a878:	605a      	str	r2, [r3, #4]
   8a87a:	f000 fb4b 	bl	8af14 <__malloc_unlock>
   8a87e:	4620      	mov	r0, r4
   8a880:	b003      	add	sp, #12
   8a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a886:	f035 0507 	bics.w	r5, r5, #7
   8a88a:	f100 8090 	bmi.w	8a9ae <_malloc_r+0x182>
   8a88e:	42a9      	cmp	r1, r5
   8a890:	f200 808d 	bhi.w	8a9ae <_malloc_r+0x182>
   8a894:	f000 fb38 	bl	8af08 <__malloc_lock>
   8a898:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8a89c:	f0c0 8185 	bcc.w	8abaa <_malloc_r+0x37e>
   8a8a0:	0a6b      	lsrs	r3, r5, #9
   8a8a2:	f000 808b 	beq.w	8a9bc <_malloc_r+0x190>
   8a8a6:	2b04      	cmp	r3, #4
   8a8a8:	f200 815b 	bhi.w	8ab62 <_malloc_r+0x336>
   8a8ac:	09ab      	lsrs	r3, r5, #6
   8a8ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a8b2:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8a8b6:	00c1      	lsls	r1, r0, #3
   8a8b8:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8ad38 <_malloc_r+0x50c>
   8a8bc:	4441      	add	r1, r8
   8a8be:	684c      	ldr	r4, [r1, #4]
   8a8c0:	3908      	subs	r1, #8
   8a8c2:	42a1      	cmp	r1, r4
   8a8c4:	d106      	bne.n	8a8d4 <_malloc_r+0xa8>
   8a8c6:	e00c      	b.n	8a8e2 <_malloc_r+0xb6>
   8a8c8:	2a00      	cmp	r2, #0
   8a8ca:	f280 8122 	bge.w	8ab12 <_malloc_r+0x2e6>
   8a8ce:	68e4      	ldr	r4, [r4, #12]
   8a8d0:	42a1      	cmp	r1, r4
   8a8d2:	d006      	beq.n	8a8e2 <_malloc_r+0xb6>
   8a8d4:	6863      	ldr	r3, [r4, #4]
   8a8d6:	f023 0303 	bic.w	r3, r3, #3
   8a8da:	1b5a      	subs	r2, r3, r5
   8a8dc:	2a0f      	cmp	r2, #15
   8a8de:	ddf3      	ble.n	8a8c8 <_malloc_r+0x9c>
   8a8e0:	4638      	mov	r0, r7
   8a8e2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8a8e6:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8ad3c <_malloc_r+0x510>
   8a8ea:	4564      	cmp	r4, ip
   8a8ec:	d077      	beq.n	8a9de <_malloc_r+0x1b2>
   8a8ee:	6862      	ldr	r2, [r4, #4]
   8a8f0:	f022 0203 	bic.w	r2, r2, #3
   8a8f4:	1b53      	subs	r3, r2, r5
   8a8f6:	2b0f      	cmp	r3, #15
   8a8f8:	f300 8165 	bgt.w	8abc6 <_malloc_r+0x39a>
   8a8fc:	2b00      	cmp	r3, #0
   8a8fe:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8a902:	f280 8156 	bge.w	8abb2 <_malloc_r+0x386>
   8a906:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8a90a:	f080 8106 	bcs.w	8ab1a <_malloc_r+0x2ee>
   8a90e:	2101      	movs	r1, #1
   8a910:	08d3      	lsrs	r3, r2, #3
   8a912:	0952      	lsrs	r2, r2, #5
   8a914:	440b      	add	r3, r1
   8a916:	fa01 f202 	lsl.w	r2, r1, r2
   8a91a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8a91e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8a922:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8a926:	430a      	orrs	r2, r1
   8a928:	f1ae 0108 	sub.w	r1, lr, #8
   8a92c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8a930:	f8c8 2004 	str.w	r2, [r8, #4]
   8a934:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8a938:	60fc      	str	r4, [r7, #12]
   8a93a:	2101      	movs	r1, #1
   8a93c:	1083      	asrs	r3, r0, #2
   8a93e:	4099      	lsls	r1, r3
   8a940:	4291      	cmp	r1, r2
   8a942:	d853      	bhi.n	8a9ec <_malloc_r+0x1c0>
   8a944:	4211      	tst	r1, r2
   8a946:	d106      	bne.n	8a956 <_malloc_r+0x12a>
   8a948:	f020 0003 	bic.w	r0, r0, #3
   8a94c:	0049      	lsls	r1, r1, #1
   8a94e:	4211      	tst	r1, r2
   8a950:	f100 0004 	add.w	r0, r0, #4
   8a954:	d0fa      	beq.n	8a94c <_malloc_r+0x120>
   8a956:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8a95a:	464c      	mov	r4, r9
   8a95c:	4686      	mov	lr, r0
   8a95e:	68e7      	ldr	r7, [r4, #12]
   8a960:	42bc      	cmp	r4, r7
   8a962:	d107      	bne.n	8a974 <_malloc_r+0x148>
   8a964:	e109      	b.n	8ab7a <_malloc_r+0x34e>
   8a966:	2b00      	cmp	r3, #0
   8a968:	f280 8110 	bge.w	8ab8c <_malloc_r+0x360>
   8a96c:	68ff      	ldr	r7, [r7, #12]
   8a96e:	42bc      	cmp	r4, r7
   8a970:	f000 8103 	beq.w	8ab7a <_malloc_r+0x34e>
   8a974:	687a      	ldr	r2, [r7, #4]
   8a976:	f022 0203 	bic.w	r2, r2, #3
   8a97a:	1b53      	subs	r3, r2, r5
   8a97c:	2b0f      	cmp	r3, #15
   8a97e:	ddf2      	ble.n	8a966 <_malloc_r+0x13a>
   8a980:	f045 0e01 	orr.w	lr, r5, #1
   8a984:	4630      	mov	r0, r6
   8a986:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8a98a:	443d      	add	r5, r7
   8a98c:	f043 0601 	orr.w	r6, r3, #1
   8a990:	f8c7 e004 	str.w	lr, [r7, #4]
   8a994:	60e1      	str	r1, [r4, #12]
   8a996:	608c      	str	r4, [r1, #8]
   8a998:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8a99c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8a9a0:	606e      	str	r6, [r5, #4]
   8a9a2:	50bb      	str	r3, [r7, r2]
   8a9a4:	f000 fab6 	bl	8af14 <__malloc_unlock>
   8a9a8:	f107 0408 	add.w	r4, r7, #8
   8a9ac:	e002      	b.n	8a9b4 <_malloc_r+0x188>
   8a9ae:	230c      	movs	r3, #12
   8a9b0:	2400      	movs	r4, #0
   8a9b2:	6033      	str	r3, [r6, #0]
   8a9b4:	4620      	mov	r0, r4
   8a9b6:	b003      	add	sp, #12
   8a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9bc:	f44f 7100 	mov.w	r1, #512	; 0x200
   8a9c0:	2040      	movs	r0, #64	; 0x40
   8a9c2:	273f      	movs	r7, #63	; 0x3f
   8a9c4:	e778      	b.n	8a8b8 <_malloc_r+0x8c>
   8a9c6:	68dc      	ldr	r4, [r3, #12]
   8a9c8:	42a3      	cmp	r3, r4
   8a9ca:	bf08      	it	eq
   8a9cc:	3002      	addeq	r0, #2
   8a9ce:	f47f af46 	bne.w	8a85e <_malloc_r+0x32>
   8a9d2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8a9d6:	f8df c364 	ldr.w	ip, [pc, #868]	; 8ad3c <_malloc_r+0x510>
   8a9da:	4564      	cmp	r4, ip
   8a9dc:	d187      	bne.n	8a8ee <_malloc_r+0xc2>
   8a9de:	2101      	movs	r1, #1
   8a9e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8a9e4:	1083      	asrs	r3, r0, #2
   8a9e6:	4099      	lsls	r1, r3
   8a9e8:	4291      	cmp	r1, r2
   8a9ea:	d9ab      	bls.n	8a944 <_malloc_r+0x118>
   8a9ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8a9f0:	6867      	ldr	r7, [r4, #4]
   8a9f2:	f027 0703 	bic.w	r7, r7, #3
   8a9f6:	42bd      	cmp	r5, r7
   8a9f8:	d802      	bhi.n	8aa00 <_malloc_r+0x1d4>
   8a9fa:	1b7b      	subs	r3, r7, r5
   8a9fc:	2b0f      	cmp	r3, #15
   8a9fe:	dc77      	bgt.n	8aaf0 <_malloc_r+0x2c4>
   8aa00:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8ad40 <_malloc_r+0x514>
   8aa04:	4bc8      	ldr	r3, [pc, #800]	; (8ad28 <_malloc_r+0x4fc>)
   8aa06:	f8d9 2000 	ldr.w	r2, [r9]
   8aa0a:	681b      	ldr	r3, [r3, #0]
   8aa0c:	3201      	adds	r2, #1
   8aa0e:	442b      	add	r3, r5
   8aa10:	eb04 0a07 	add.w	sl, r4, r7
   8aa14:	f000 8124 	beq.w	8ac60 <_malloc_r+0x434>
   8aa18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8aa1c:	330f      	adds	r3, #15
   8aa1e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8aa22:	f02b 0b0f 	bic.w	fp, fp, #15
   8aa26:	4659      	mov	r1, fp
   8aa28:	4630      	mov	r0, r6
   8aa2a:	f001 f81d 	bl	8ba68 <_sbrk_r>
   8aa2e:	1c41      	adds	r1, r0, #1
   8aa30:	4602      	mov	r2, r0
   8aa32:	f000 80e1 	beq.w	8abf8 <_malloc_r+0x3cc>
   8aa36:	4582      	cmp	sl, r0
   8aa38:	f200 80dc 	bhi.w	8abf4 <_malloc_r+0x3c8>
   8aa3c:	4bbb      	ldr	r3, [pc, #748]	; (8ad2c <_malloc_r+0x500>)
   8aa3e:	6819      	ldr	r1, [r3, #0]
   8aa40:	4459      	add	r1, fp
   8aa42:	4608      	mov	r0, r1
   8aa44:	6019      	str	r1, [r3, #0]
   8aa46:	f000 8141 	beq.w	8accc <_malloc_r+0x4a0>
   8aa4a:	f8d9 1000 	ldr.w	r1, [r9]
   8aa4e:	9301      	str	r3, [sp, #4]
   8aa50:	3101      	adds	r1, #1
   8aa52:	bf1b      	ittet	ne
   8aa54:	eba2 0a0a 	subne.w	sl, r2, sl
   8aa58:	4450      	addne	r0, sl
   8aa5a:	f8c9 2000 	streq.w	r2, [r9]
   8aa5e:	6018      	strne	r0, [r3, #0]
   8aa60:	f012 0a07 	ands.w	sl, r2, #7
   8aa64:	f000 810a 	beq.w	8ac7c <_malloc_r+0x450>
   8aa68:	f1ca 0108 	rsb	r1, sl, #8
   8aa6c:	440a      	add	r2, r1
   8aa6e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8aa72:	4493      	add	fp, r2
   8aa74:	3108      	adds	r1, #8
   8aa76:	eba1 010b 	sub.w	r1, r1, fp
   8aa7a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8aa7e:	4649      	mov	r1, r9
   8aa80:	4630      	mov	r0, r6
   8aa82:	9200      	str	r2, [sp, #0]
   8aa84:	f000 fff0 	bl	8ba68 <_sbrk_r>
   8aa88:	1c42      	adds	r2, r0, #1
   8aa8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aa8e:	f000 8143 	beq.w	8ad18 <_malloc_r+0x4ec>
   8aa92:	1a80      	subs	r0, r0, r2
   8aa94:	eb00 0b09 	add.w	fp, r0, r9
   8aa98:	6819      	ldr	r1, [r3, #0]
   8aa9a:	f04b 0001 	orr.w	r0, fp, #1
   8aa9e:	4449      	add	r1, r9
   8aaa0:	4544      	cmp	r4, r8
   8aaa2:	f8c8 2008 	str.w	r2, [r8, #8]
   8aaa6:	6019      	str	r1, [r3, #0]
   8aaa8:	6050      	str	r0, [r2, #4]
   8aaaa:	f000 811c 	beq.w	8ace6 <_malloc_r+0x4ba>
   8aaae:	2f0f      	cmp	r7, #15
   8aab0:	f240 811b 	bls.w	8acea <_malloc_r+0x4be>
   8aab4:	f04f 0c05 	mov.w	ip, #5
   8aab8:	6860      	ldr	r0, [r4, #4]
   8aaba:	3f0c      	subs	r7, #12
   8aabc:	f027 0707 	bic.w	r7, r7, #7
   8aac0:	f000 0001 	and.w	r0, r0, #1
   8aac4:	4338      	orrs	r0, r7
   8aac6:	eb04 0e07 	add.w	lr, r4, r7
   8aaca:	2f0f      	cmp	r7, #15
   8aacc:	6060      	str	r0, [r4, #4]
   8aace:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8aad2:	f200 8137 	bhi.w	8ad44 <_malloc_r+0x518>
   8aad6:	4614      	mov	r4, r2
   8aad8:	6850      	ldr	r0, [r2, #4]
   8aada:	4b95      	ldr	r3, [pc, #596]	; (8ad30 <_malloc_r+0x504>)
   8aadc:	681a      	ldr	r2, [r3, #0]
   8aade:	428a      	cmp	r2, r1
   8aae0:	bf38      	it	cc
   8aae2:	6019      	strcc	r1, [r3, #0]
   8aae4:	4b93      	ldr	r3, [pc, #588]	; (8ad34 <_malloc_r+0x508>)
   8aae6:	681a      	ldr	r2, [r3, #0]
   8aae8:	428a      	cmp	r2, r1
   8aaea:	bf38      	it	cc
   8aaec:	6019      	strcc	r1, [r3, #0]
   8aaee:	e086      	b.n	8abfe <_malloc_r+0x3d2>
   8aaf0:	f045 0201 	orr.w	r2, r5, #1
   8aaf4:	f043 0301 	orr.w	r3, r3, #1
   8aaf8:	4425      	add	r5, r4
   8aafa:	6062      	str	r2, [r4, #4]
   8aafc:	4630      	mov	r0, r6
   8aafe:	f8c8 5008 	str.w	r5, [r8, #8]
   8ab02:	3408      	adds	r4, #8
   8ab04:	606b      	str	r3, [r5, #4]
   8ab06:	f000 fa05 	bl	8af14 <__malloc_unlock>
   8ab0a:	4620      	mov	r0, r4
   8ab0c:	b003      	add	sp, #12
   8ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab12:	4423      	add	r3, r4
   8ab14:	685a      	ldr	r2, [r3, #4]
   8ab16:	68e1      	ldr	r1, [r4, #12]
   8ab18:	e6a7      	b.n	8a86a <_malloc_r+0x3e>
   8ab1a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ab1e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ab22:	d361      	bcc.n	8abe8 <_malloc_r+0x3bc>
   8ab24:	2b14      	cmp	r3, #20
   8ab26:	f200 80ba 	bhi.w	8ac9e <_malloc_r+0x472>
   8ab2a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ab2e:	00c9      	lsls	r1, r1, #3
   8ab30:	335b      	adds	r3, #91	; 0x5b
   8ab32:	eb08 0701 	add.w	r7, r8, r1
   8ab36:	f858 1001 	ldr.w	r1, [r8, r1]
   8ab3a:	3f08      	subs	r7, #8
   8ab3c:	428f      	cmp	r7, r1
   8ab3e:	f000 8092 	beq.w	8ac66 <_malloc_r+0x43a>
   8ab42:	684b      	ldr	r3, [r1, #4]
   8ab44:	f023 0303 	bic.w	r3, r3, #3
   8ab48:	4293      	cmp	r3, r2
   8ab4a:	d902      	bls.n	8ab52 <_malloc_r+0x326>
   8ab4c:	6889      	ldr	r1, [r1, #8]
   8ab4e:	428f      	cmp	r7, r1
   8ab50:	d1f7      	bne.n	8ab42 <_malloc_r+0x316>
   8ab52:	68cf      	ldr	r7, [r1, #12]
   8ab54:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ab58:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ab5c:	60bc      	str	r4, [r7, #8]
   8ab5e:	60cc      	str	r4, [r1, #12]
   8ab60:	e6eb      	b.n	8a93a <_malloc_r+0x10e>
   8ab62:	2b14      	cmp	r3, #20
   8ab64:	d959      	bls.n	8ac1a <_malloc_r+0x3ee>
   8ab66:	2b54      	cmp	r3, #84	; 0x54
   8ab68:	f200 80a1 	bhi.w	8acae <_malloc_r+0x482>
   8ab6c:	0b2b      	lsrs	r3, r5, #12
   8ab6e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ab72:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ab76:	00c1      	lsls	r1, r0, #3
   8ab78:	e69e      	b.n	8a8b8 <_malloc_r+0x8c>
   8ab7a:	f10e 0e01 	add.w	lr, lr, #1
   8ab7e:	f01e 0f03 	tst.w	lr, #3
   8ab82:	f104 0408 	add.w	r4, r4, #8
   8ab86:	f47f aeea 	bne.w	8a95e <_malloc_r+0x132>
   8ab8a:	e051      	b.n	8ac30 <_malloc_r+0x404>
   8ab8c:	463c      	mov	r4, r7
   8ab8e:	443a      	add	r2, r7
   8ab90:	6853      	ldr	r3, [r2, #4]
   8ab92:	68f9      	ldr	r1, [r7, #12]
   8ab94:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ab98:	f043 0301 	orr.w	r3, r3, #1
   8ab9c:	6053      	str	r3, [r2, #4]
   8ab9e:	4630      	mov	r0, r6
   8aba0:	60e9      	str	r1, [r5, #12]
   8aba2:	608d      	str	r5, [r1, #8]
   8aba4:	f000 f9b6 	bl	8af14 <__malloc_unlock>
   8aba8:	e704      	b.n	8a9b4 <_malloc_r+0x188>
   8abaa:	08e8      	lsrs	r0, r5, #3
   8abac:	f105 0308 	add.w	r3, r5, #8
   8abb0:	e64c      	b.n	8a84c <_malloc_r+0x20>
   8abb2:	4422      	add	r2, r4
   8abb4:	6853      	ldr	r3, [r2, #4]
   8abb6:	4630      	mov	r0, r6
   8abb8:	f043 0301 	orr.w	r3, r3, #1
   8abbc:	6053      	str	r3, [r2, #4]
   8abbe:	3408      	adds	r4, #8
   8abc0:	f000 f9a8 	bl	8af14 <__malloc_unlock>
   8abc4:	e6f6      	b.n	8a9b4 <_malloc_r+0x188>
   8abc6:	f045 0701 	orr.w	r7, r5, #1
   8abca:	f043 0101 	orr.w	r1, r3, #1
   8abce:	4425      	add	r5, r4
   8abd0:	6067      	str	r7, [r4, #4]
   8abd2:	4630      	mov	r0, r6
   8abd4:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8abd8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8abdc:	6069      	str	r1, [r5, #4]
   8abde:	50a3      	str	r3, [r4, r2]
   8abe0:	f000 f998 	bl	8af14 <__malloc_unlock>
   8abe4:	3408      	adds	r4, #8
   8abe6:	e6e5      	b.n	8a9b4 <_malloc_r+0x188>
   8abe8:	0993      	lsrs	r3, r2, #6
   8abea:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8abee:	00c9      	lsls	r1, r1, #3
   8abf0:	3338      	adds	r3, #56	; 0x38
   8abf2:	e79e      	b.n	8ab32 <_malloc_r+0x306>
   8abf4:	4544      	cmp	r4, r8
   8abf6:	d064      	beq.n	8acc2 <_malloc_r+0x496>
   8abf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8abfc:	6860      	ldr	r0, [r4, #4]
   8abfe:	f020 0b03 	bic.w	fp, r0, #3
   8ac02:	455d      	cmp	r5, fp
   8ac04:	ebab 0305 	sub.w	r3, fp, r5
   8ac08:	d802      	bhi.n	8ac10 <_malloc_r+0x3e4>
   8ac0a:	2b0f      	cmp	r3, #15
   8ac0c:	f73f af70 	bgt.w	8aaf0 <_malloc_r+0x2c4>
   8ac10:	4630      	mov	r0, r6
   8ac12:	f000 f97f 	bl	8af14 <__malloc_unlock>
   8ac16:	2400      	movs	r4, #0
   8ac18:	e6cc      	b.n	8a9b4 <_malloc_r+0x188>
   8ac1a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8ac1e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8ac22:	00c1      	lsls	r1, r0, #3
   8ac24:	e648      	b.n	8a8b8 <_malloc_r+0x8c>
   8ac26:	f859 3908 	ldr.w	r3, [r9], #-8
   8ac2a:	454b      	cmp	r3, r9
   8ac2c:	f040 80a9 	bne.w	8ad82 <_malloc_r+0x556>
   8ac30:	f010 0f03 	tst.w	r0, #3
   8ac34:	f100 30ff 	add.w	r0, r0, #4294967295
   8ac38:	d1f5      	bne.n	8ac26 <_malloc_r+0x3fa>
   8ac3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ac3e:	ea23 0301 	bic.w	r3, r3, r1
   8ac42:	f8c8 3004 	str.w	r3, [r8, #4]
   8ac46:	0049      	lsls	r1, r1, #1
   8ac48:	4299      	cmp	r1, r3
   8ac4a:	f63f aecf 	bhi.w	8a9ec <_malloc_r+0x1c0>
   8ac4e:	b919      	cbnz	r1, 8ac58 <_malloc_r+0x42c>
   8ac50:	e6cc      	b.n	8a9ec <_malloc_r+0x1c0>
   8ac52:	0049      	lsls	r1, r1, #1
   8ac54:	f10e 0e04 	add.w	lr, lr, #4
   8ac58:	4219      	tst	r1, r3
   8ac5a:	d0fa      	beq.n	8ac52 <_malloc_r+0x426>
   8ac5c:	4670      	mov	r0, lr
   8ac5e:	e67a      	b.n	8a956 <_malloc_r+0x12a>
   8ac60:	f103 0b10 	add.w	fp, r3, #16
   8ac64:	e6df      	b.n	8aa26 <_malloc_r+0x1fa>
   8ac66:	f04f 0e01 	mov.w	lr, #1
   8ac6a:	109a      	asrs	r2, r3, #2
   8ac6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ac70:	fa0e f202 	lsl.w	r2, lr, r2
   8ac74:	431a      	orrs	r2, r3
   8ac76:	f8c8 2004 	str.w	r2, [r8, #4]
   8ac7a:	e76d      	b.n	8ab58 <_malloc_r+0x32c>
   8ac7c:	eb02 010b 	add.w	r1, r2, fp
   8ac80:	4249      	negs	r1, r1
   8ac82:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8ac86:	4649      	mov	r1, r9
   8ac88:	4630      	mov	r0, r6
   8ac8a:	9200      	str	r2, [sp, #0]
   8ac8c:	f000 feec 	bl	8ba68 <_sbrk_r>
   8ac90:	1c43      	adds	r3, r0, #1
   8ac92:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ac96:	f47f aefc 	bne.w	8aa92 <_malloc_r+0x266>
   8ac9a:	46d1      	mov	r9, sl
   8ac9c:	e6fc      	b.n	8aa98 <_malloc_r+0x26c>
   8ac9e:	2b54      	cmp	r3, #84	; 0x54
   8aca0:	d826      	bhi.n	8acf0 <_malloc_r+0x4c4>
   8aca2:	0b13      	lsrs	r3, r2, #12
   8aca4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8aca8:	00c9      	lsls	r1, r1, #3
   8acaa:	336e      	adds	r3, #110	; 0x6e
   8acac:	e741      	b.n	8ab32 <_malloc_r+0x306>
   8acae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8acb2:	d826      	bhi.n	8ad02 <_malloc_r+0x4d6>
   8acb4:	0beb      	lsrs	r3, r5, #15
   8acb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8acba:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8acbe:	00c1      	lsls	r1, r0, #3
   8acc0:	e5fa      	b.n	8a8b8 <_malloc_r+0x8c>
   8acc2:	4b1a      	ldr	r3, [pc, #104]	; (8ad2c <_malloc_r+0x500>)
   8acc4:	6818      	ldr	r0, [r3, #0]
   8acc6:	4458      	add	r0, fp
   8acc8:	6018      	str	r0, [r3, #0]
   8acca:	e6be      	b.n	8aa4a <_malloc_r+0x21e>
   8accc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8acd0:	f1bc 0f00 	cmp.w	ip, #0
   8acd4:	f47f aeb9 	bne.w	8aa4a <_malloc_r+0x21e>
   8acd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8acdc:	44bb      	add	fp, r7
   8acde:	f04b 0001 	orr.w	r0, fp, #1
   8ace2:	6060      	str	r0, [r4, #4]
   8ace4:	e6f9      	b.n	8aada <_malloc_r+0x2ae>
   8ace6:	4614      	mov	r4, r2
   8ace8:	e6f7      	b.n	8aada <_malloc_r+0x2ae>
   8acea:	2301      	movs	r3, #1
   8acec:	6053      	str	r3, [r2, #4]
   8acee:	e78f      	b.n	8ac10 <_malloc_r+0x3e4>
   8acf0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8acf4:	d832      	bhi.n	8ad5c <_malloc_r+0x530>
   8acf6:	0bd3      	lsrs	r3, r2, #15
   8acf8:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8acfc:	00c9      	lsls	r1, r1, #3
   8acfe:	3377      	adds	r3, #119	; 0x77
   8ad00:	e717      	b.n	8ab32 <_malloc_r+0x306>
   8ad02:	f240 5254 	movw	r2, #1364	; 0x554
   8ad06:	4293      	cmp	r3, r2
   8ad08:	d832      	bhi.n	8ad70 <_malloc_r+0x544>
   8ad0a:	0cab      	lsrs	r3, r5, #18
   8ad0c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8ad10:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8ad14:	00c1      	lsls	r1, r0, #3
   8ad16:	e5cf      	b.n	8a8b8 <_malloc_r+0x8c>
   8ad18:	f1aa 0a08 	sub.w	sl, sl, #8
   8ad1c:	44d3      	add	fp, sl
   8ad1e:	f04f 0900 	mov.w	r9, #0
   8ad22:	ebab 0b02 	sub.w	fp, fp, r2
   8ad26:	e6b7      	b.n	8aa98 <_malloc_r+0x26c>
   8ad28:	200021d4 	.word	0x200021d4
   8ad2c:	200021a4 	.word	0x200021a4
   8ad30:	200021cc 	.word	0x200021cc
   8ad34:	200021d0 	.word	0x200021d0
   8ad38:	20000f48 	.word	0x20000f48
   8ad3c:	20000f50 	.word	0x20000f50
   8ad40:	20001350 	.word	0x20001350
   8ad44:	f104 0108 	add.w	r1, r4, #8
   8ad48:	4630      	mov	r0, r6
   8ad4a:	9300      	str	r3, [sp, #0]
   8ad4c:	f7ff fa3c 	bl	8a1c8 <_free_r>
   8ad50:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8ad54:	9b00      	ldr	r3, [sp, #0]
   8ad56:	6860      	ldr	r0, [r4, #4]
   8ad58:	6819      	ldr	r1, [r3, #0]
   8ad5a:	e6be      	b.n	8aada <_malloc_r+0x2ae>
   8ad5c:	f240 5154 	movw	r1, #1364	; 0x554
   8ad60:	428b      	cmp	r3, r1
   8ad62:	d80a      	bhi.n	8ad7a <_malloc_r+0x54e>
   8ad64:	0c93      	lsrs	r3, r2, #18
   8ad66:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8ad6a:	00c9      	lsls	r1, r1, #3
   8ad6c:	337c      	adds	r3, #124	; 0x7c
   8ad6e:	e6e0      	b.n	8ab32 <_malloc_r+0x306>
   8ad70:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ad74:	207f      	movs	r0, #127	; 0x7f
   8ad76:	277e      	movs	r7, #126	; 0x7e
   8ad78:	e59e      	b.n	8a8b8 <_malloc_r+0x8c>
   8ad7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8ad7e:	237e      	movs	r3, #126	; 0x7e
   8ad80:	e6d7      	b.n	8ab32 <_malloc_r+0x306>
   8ad82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ad86:	e75e      	b.n	8ac46 <_malloc_r+0x41a>

0008ad88 <__ascii_mbtowc>:
   8ad88:	b082      	sub	sp, #8
   8ad8a:	b149      	cbz	r1, 8ada0 <__ascii_mbtowc+0x18>
   8ad8c:	b15a      	cbz	r2, 8ada6 <__ascii_mbtowc+0x1e>
   8ad8e:	b16b      	cbz	r3, 8adac <__ascii_mbtowc+0x24>
   8ad90:	7813      	ldrb	r3, [r2, #0]
   8ad92:	600b      	str	r3, [r1, #0]
   8ad94:	7812      	ldrb	r2, [r2, #0]
   8ad96:	1e10      	subs	r0, r2, #0
   8ad98:	bf18      	it	ne
   8ad9a:	2001      	movne	r0, #1
   8ad9c:	b002      	add	sp, #8
   8ad9e:	4770      	bx	lr
   8ada0:	a901      	add	r1, sp, #4
   8ada2:	2a00      	cmp	r2, #0
   8ada4:	d1f3      	bne.n	8ad8e <__ascii_mbtowc+0x6>
   8ada6:	4610      	mov	r0, r2
   8ada8:	b002      	add	sp, #8
   8adaa:	4770      	bx	lr
   8adac:	f06f 0001 	mvn.w	r0, #1
   8adb0:	e7f4      	b.n	8ad9c <__ascii_mbtowc+0x14>
   8adb2:	bf00      	nop

0008adb4 <memchr>:
   8adb4:	b470      	push	{r4, r5, r6}
   8adb6:	0784      	lsls	r4, r0, #30
   8adb8:	b2cd      	uxtb	r5, r1
   8adba:	d012      	beq.n	8ade2 <memchr+0x2e>
   8adbc:	4603      	mov	r3, r0
   8adbe:	1e54      	subs	r4, r2, #1
   8adc0:	b92a      	cbnz	r2, 8adce <memchr+0x1a>
   8adc2:	e00b      	b.n	8addc <memchr+0x28>
   8adc4:	079a      	lsls	r2, r3, #30
   8adc6:	4618      	mov	r0, r3
   8adc8:	d00c      	beq.n	8ade4 <memchr+0x30>
   8adca:	3c01      	subs	r4, #1
   8adcc:	d306      	bcc.n	8addc <memchr+0x28>
   8adce:	4618      	mov	r0, r3
   8add0:	f813 2b01 	ldrb.w	r2, [r3], #1
   8add4:	42aa      	cmp	r2, r5
   8add6:	d1f5      	bne.n	8adc4 <memchr+0x10>
   8add8:	bc70      	pop	{r4, r5, r6}
   8adda:	4770      	bx	lr
   8addc:	2000      	movs	r0, #0
   8adde:	bc70      	pop	{r4, r5, r6}
   8ade0:	4770      	bx	lr
   8ade2:	4614      	mov	r4, r2
   8ade4:	2c03      	cmp	r4, #3
   8ade6:	d80d      	bhi.n	8ae04 <memchr+0x50>
   8ade8:	2c00      	cmp	r4, #0
   8adea:	d0f7      	beq.n	8addc <memchr+0x28>
   8adec:	4602      	mov	r2, r0
   8adee:	1903      	adds	r3, r0, r4
   8adf0:	e001      	b.n	8adf6 <memchr+0x42>
   8adf2:	429a      	cmp	r2, r3
   8adf4:	d0f2      	beq.n	8addc <memchr+0x28>
   8adf6:	4610      	mov	r0, r2
   8adf8:	f812 1b01 	ldrb.w	r1, [r2], #1
   8adfc:	42a9      	cmp	r1, r5
   8adfe:	d1f8      	bne.n	8adf2 <memchr+0x3e>
   8ae00:	bc70      	pop	{r4, r5, r6}
   8ae02:	4770      	bx	lr
   8ae04:	4606      	mov	r6, r0
   8ae06:	020a      	lsls	r2, r1, #8
   8ae08:	b292      	uxth	r2, r2
   8ae0a:	432a      	orrs	r2, r5
   8ae0c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8ae10:	6833      	ldr	r3, [r6, #0]
   8ae12:	4630      	mov	r0, r6
   8ae14:	4053      	eors	r3, r2
   8ae16:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8ae1a:	ea21 0303 	bic.w	r3, r1, r3
   8ae1e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8ae22:	f106 0604 	add.w	r6, r6, #4
   8ae26:	d1e1      	bne.n	8adec <memchr+0x38>
   8ae28:	3c04      	subs	r4, #4
   8ae2a:	2c03      	cmp	r4, #3
   8ae2c:	4630      	mov	r0, r6
   8ae2e:	d8ef      	bhi.n	8ae10 <memchr+0x5c>
   8ae30:	e7da      	b.n	8ade8 <memchr+0x34>
   8ae32:	bf00      	nop

0008ae34 <memmove>:
   8ae34:	4288      	cmp	r0, r1
   8ae36:	b4f0      	push	{r4, r5, r6, r7}
   8ae38:	d90d      	bls.n	8ae56 <memmove+0x22>
   8ae3a:	188b      	adds	r3, r1, r2
   8ae3c:	4283      	cmp	r3, r0
   8ae3e:	d90a      	bls.n	8ae56 <memmove+0x22>
   8ae40:	1884      	adds	r4, r0, r2
   8ae42:	b132      	cbz	r2, 8ae52 <memmove+0x1e>
   8ae44:	4622      	mov	r2, r4
   8ae46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8ae4a:	4299      	cmp	r1, r3
   8ae4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8ae50:	d1f9      	bne.n	8ae46 <memmove+0x12>
   8ae52:	bcf0      	pop	{r4, r5, r6, r7}
   8ae54:	4770      	bx	lr
   8ae56:	2a0f      	cmp	r2, #15
   8ae58:	d80e      	bhi.n	8ae78 <memmove+0x44>
   8ae5a:	4603      	mov	r3, r0
   8ae5c:	1e54      	subs	r4, r2, #1
   8ae5e:	2a00      	cmp	r2, #0
   8ae60:	d0f7      	beq.n	8ae52 <memmove+0x1e>
   8ae62:	3401      	adds	r4, #1
   8ae64:	440c      	add	r4, r1
   8ae66:	3b01      	subs	r3, #1
   8ae68:	f811 2b01 	ldrb.w	r2, [r1], #1
   8ae6c:	42a1      	cmp	r1, r4
   8ae6e:	f803 2f01 	strb.w	r2, [r3, #1]!
   8ae72:	d1f9      	bne.n	8ae68 <memmove+0x34>
   8ae74:	bcf0      	pop	{r4, r5, r6, r7}
   8ae76:	4770      	bx	lr
   8ae78:	ea40 0301 	orr.w	r3, r0, r1
   8ae7c:	079b      	lsls	r3, r3, #30
   8ae7e:	d13e      	bne.n	8aefe <memmove+0xca>
   8ae80:	f1a2 0310 	sub.w	r3, r2, #16
   8ae84:	f023 040f 	bic.w	r4, r3, #15
   8ae88:	f101 0720 	add.w	r7, r1, #32
   8ae8c:	4427      	add	r7, r4
   8ae8e:	091b      	lsrs	r3, r3, #4
   8ae90:	f101 0410 	add.w	r4, r1, #16
   8ae94:	f100 0510 	add.w	r5, r0, #16
   8ae98:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8ae9c:	3410      	adds	r4, #16
   8ae9e:	f845 6c10 	str.w	r6, [r5, #-16]
   8aea2:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8aea6:	3510      	adds	r5, #16
   8aea8:	f845 6c1c 	str.w	r6, [r5, #-28]
   8aeac:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8aeb0:	f845 6c18 	str.w	r6, [r5, #-24]
   8aeb4:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8aeb8:	42bc      	cmp	r4, r7
   8aeba:	f845 6c14 	str.w	r6, [r5, #-20]
   8aebe:	d1eb      	bne.n	8ae98 <memmove+0x64>
   8aec0:	3301      	adds	r3, #1
   8aec2:	f012 0f0c 	tst.w	r2, #12
   8aec6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8aeca:	f002 040f 	and.w	r4, r2, #15
   8aece:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8aed2:	d017      	beq.n	8af04 <memmove+0xd0>
   8aed4:	460e      	mov	r6, r1
   8aed6:	3c04      	subs	r4, #4
   8aed8:	f024 0c03 	bic.w	ip, r4, #3
   8aedc:	08a5      	lsrs	r5, r4, #2
   8aede:	449c      	add	ip, r3
   8aee0:	1f1c      	subs	r4, r3, #4
   8aee2:	f856 7b04 	ldr.w	r7, [r6], #4
   8aee6:	f844 7f04 	str.w	r7, [r4, #4]!
   8aeea:	4564      	cmp	r4, ip
   8aeec:	d1f9      	bne.n	8aee2 <memmove+0xae>
   8aeee:	1c6c      	adds	r4, r5, #1
   8aef0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8aef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8aef8:	f002 0203 	and.w	r2, r2, #3
   8aefc:	e7ae      	b.n	8ae5c <memmove+0x28>
   8aefe:	4603      	mov	r3, r0
   8af00:	1e54      	subs	r4, r2, #1
   8af02:	e7ae      	b.n	8ae62 <memmove+0x2e>
   8af04:	4622      	mov	r2, r4
   8af06:	e7a9      	b.n	8ae5c <memmove+0x28>

0008af08 <__malloc_lock>:
   8af08:	4801      	ldr	r0, [pc, #4]	; (8af10 <__malloc_lock+0x8>)
   8af0a:	f7ff bc0b 	b.w	8a724 <__retarget_lock_acquire_recursive>
   8af0e:	bf00      	nop
   8af10:	200026c4 	.word	0x200026c4

0008af14 <__malloc_unlock>:
   8af14:	4801      	ldr	r0, [pc, #4]	; (8af1c <__malloc_unlock+0x8>)
   8af16:	f7ff bc07 	b.w	8a728 <__retarget_lock_release_recursive>
   8af1a:	bf00      	nop
   8af1c:	200026c4 	.word	0x200026c4

0008af20 <_Balloc>:
   8af20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8af22:	b570      	push	{r4, r5, r6, lr}
   8af24:	4605      	mov	r5, r0
   8af26:	460c      	mov	r4, r1
   8af28:	b14b      	cbz	r3, 8af3e <_Balloc+0x1e>
   8af2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8af2e:	b180      	cbz	r0, 8af52 <_Balloc+0x32>
   8af30:	6802      	ldr	r2, [r0, #0]
   8af32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8af36:	2300      	movs	r3, #0
   8af38:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8af3c:	bd70      	pop	{r4, r5, r6, pc}
   8af3e:	2221      	movs	r2, #33	; 0x21
   8af40:	2104      	movs	r1, #4
   8af42:	f000 ff63 	bl	8be0c <_calloc_r>
   8af46:	4603      	mov	r3, r0
   8af48:	64e8      	str	r0, [r5, #76]	; 0x4c
   8af4a:	2800      	cmp	r0, #0
   8af4c:	d1ed      	bne.n	8af2a <_Balloc+0xa>
   8af4e:	2000      	movs	r0, #0
   8af50:	bd70      	pop	{r4, r5, r6, pc}
   8af52:	2101      	movs	r1, #1
   8af54:	fa01 f604 	lsl.w	r6, r1, r4
   8af58:	1d72      	adds	r2, r6, #5
   8af5a:	4628      	mov	r0, r5
   8af5c:	0092      	lsls	r2, r2, #2
   8af5e:	f000 ff55 	bl	8be0c <_calloc_r>
   8af62:	2800      	cmp	r0, #0
   8af64:	d0f3      	beq.n	8af4e <_Balloc+0x2e>
   8af66:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8af6a:	e7e4      	b.n	8af36 <_Balloc+0x16>

0008af6c <_Bfree>:
   8af6c:	b131      	cbz	r1, 8af7c <_Bfree+0x10>
   8af6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8af70:	684a      	ldr	r2, [r1, #4]
   8af72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8af76:	6008      	str	r0, [r1, #0]
   8af78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8af7c:	4770      	bx	lr
   8af7e:	bf00      	nop

0008af80 <__multadd>:
   8af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8af84:	4680      	mov	r8, r0
   8af86:	461c      	mov	r4, r3
   8af88:	2000      	movs	r0, #0
   8af8a:	460f      	mov	r7, r1
   8af8c:	690e      	ldr	r6, [r1, #16]
   8af8e:	3114      	adds	r1, #20
   8af90:	680d      	ldr	r5, [r1, #0]
   8af92:	3001      	adds	r0, #1
   8af94:	b2ab      	uxth	r3, r5
   8af96:	fb02 4303 	mla	r3, r2, r3, r4
   8af9a:	0c2c      	lsrs	r4, r5, #16
   8af9c:	0c1d      	lsrs	r5, r3, #16
   8af9e:	fb02 5404 	mla	r4, r2, r4, r5
   8afa2:	b29b      	uxth	r3, r3
   8afa4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8afa8:	4286      	cmp	r6, r0
   8afaa:	f841 3b04 	str.w	r3, [r1], #4
   8afae:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8afb2:	dced      	bgt.n	8af90 <__multadd+0x10>
   8afb4:	b13c      	cbz	r4, 8afc6 <__multadd+0x46>
   8afb6:	68bb      	ldr	r3, [r7, #8]
   8afb8:	42b3      	cmp	r3, r6
   8afba:	dd07      	ble.n	8afcc <__multadd+0x4c>
   8afbc:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8afc0:	3601      	adds	r6, #1
   8afc2:	615c      	str	r4, [r3, #20]
   8afc4:	613e      	str	r6, [r7, #16]
   8afc6:	4638      	mov	r0, r7
   8afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8afcc:	6879      	ldr	r1, [r7, #4]
   8afce:	4640      	mov	r0, r8
   8afd0:	3101      	adds	r1, #1
   8afd2:	f7ff ffa5 	bl	8af20 <_Balloc>
   8afd6:	4605      	mov	r5, r0
   8afd8:	b1b0      	cbz	r0, 8b008 <__multadd+0x88>
   8afda:	693a      	ldr	r2, [r7, #16]
   8afdc:	f107 010c 	add.w	r1, r7, #12
   8afe0:	3202      	adds	r2, #2
   8afe2:	0092      	lsls	r2, r2, #2
   8afe4:	300c      	adds	r0, #12
   8afe6:	f7fa ff8b 	bl	85f00 <memcpy>
   8afea:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8afee:	687a      	ldr	r2, [r7, #4]
   8aff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8aff4:	6039      	str	r1, [r7, #0]
   8aff6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8affa:	462f      	mov	r7, r5
   8affc:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b000:	3601      	adds	r6, #1
   8b002:	615c      	str	r4, [r3, #20]
   8b004:	613e      	str	r6, [r7, #16]
   8b006:	e7de      	b.n	8afc6 <__multadd+0x46>
   8b008:	4602      	mov	r2, r0
   8b00a:	21b5      	movs	r1, #181	; 0xb5
   8b00c:	4b01      	ldr	r3, [pc, #4]	; (8b014 <__multadd+0x94>)
   8b00e:	4802      	ldr	r0, [pc, #8]	; (8b018 <__multadd+0x98>)
   8b010:	f000 fede 	bl	8bdd0 <__assert_func>
   8b014:	0008cc6c 	.word	0x0008cc6c
   8b018:	0008cd0c 	.word	0x0008cd0c

0008b01c <__hi0bits>:
   8b01c:	0c02      	lsrs	r2, r0, #16
   8b01e:	0412      	lsls	r2, r2, #16
   8b020:	4603      	mov	r3, r0
   8b022:	b9ca      	cbnz	r2, 8b058 <__hi0bits+0x3c>
   8b024:	0403      	lsls	r3, r0, #16
   8b026:	2010      	movs	r0, #16
   8b028:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b02c:	bf04      	itt	eq
   8b02e:	021b      	lsleq	r3, r3, #8
   8b030:	3008      	addeq	r0, #8
   8b032:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b036:	bf04      	itt	eq
   8b038:	011b      	lsleq	r3, r3, #4
   8b03a:	3004      	addeq	r0, #4
   8b03c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b040:	bf04      	itt	eq
   8b042:	009b      	lsleq	r3, r3, #2
   8b044:	3002      	addeq	r0, #2
   8b046:	2b00      	cmp	r3, #0
   8b048:	db05      	blt.n	8b056 <__hi0bits+0x3a>
   8b04a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b04e:	f100 0001 	add.w	r0, r0, #1
   8b052:	bf08      	it	eq
   8b054:	2020      	moveq	r0, #32
   8b056:	4770      	bx	lr
   8b058:	2000      	movs	r0, #0
   8b05a:	e7e5      	b.n	8b028 <__hi0bits+0xc>

0008b05c <__lo0bits>:
   8b05c:	6803      	ldr	r3, [r0, #0]
   8b05e:	4601      	mov	r1, r0
   8b060:	f013 0207 	ands.w	r2, r3, #7
   8b064:	d007      	beq.n	8b076 <__lo0bits+0x1a>
   8b066:	07da      	lsls	r2, r3, #31
   8b068:	d420      	bmi.n	8b0ac <__lo0bits+0x50>
   8b06a:	0798      	lsls	r0, r3, #30
   8b06c:	d522      	bpl.n	8b0b4 <__lo0bits+0x58>
   8b06e:	085b      	lsrs	r3, r3, #1
   8b070:	2001      	movs	r0, #1
   8b072:	600b      	str	r3, [r1, #0]
   8b074:	4770      	bx	lr
   8b076:	b298      	uxth	r0, r3
   8b078:	b1a8      	cbz	r0, 8b0a6 <__lo0bits+0x4a>
   8b07a:	4610      	mov	r0, r2
   8b07c:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b080:	bf04      	itt	eq
   8b082:	0a1b      	lsreq	r3, r3, #8
   8b084:	3008      	addeq	r0, #8
   8b086:	071a      	lsls	r2, r3, #28
   8b088:	bf04      	itt	eq
   8b08a:	091b      	lsreq	r3, r3, #4
   8b08c:	3004      	addeq	r0, #4
   8b08e:	079a      	lsls	r2, r3, #30
   8b090:	bf04      	itt	eq
   8b092:	089b      	lsreq	r3, r3, #2
   8b094:	3002      	addeq	r0, #2
   8b096:	07da      	lsls	r2, r3, #31
   8b098:	d403      	bmi.n	8b0a2 <__lo0bits+0x46>
   8b09a:	085b      	lsrs	r3, r3, #1
   8b09c:	f100 0001 	add.w	r0, r0, #1
   8b0a0:	d006      	beq.n	8b0b0 <__lo0bits+0x54>
   8b0a2:	600b      	str	r3, [r1, #0]
   8b0a4:	4770      	bx	lr
   8b0a6:	2010      	movs	r0, #16
   8b0a8:	0c1b      	lsrs	r3, r3, #16
   8b0aa:	e7e7      	b.n	8b07c <__lo0bits+0x20>
   8b0ac:	2000      	movs	r0, #0
   8b0ae:	4770      	bx	lr
   8b0b0:	2020      	movs	r0, #32
   8b0b2:	4770      	bx	lr
   8b0b4:	089b      	lsrs	r3, r3, #2
   8b0b6:	2002      	movs	r0, #2
   8b0b8:	600b      	str	r3, [r1, #0]
   8b0ba:	4770      	bx	lr

0008b0bc <__i2b>:
   8b0bc:	b510      	push	{r4, lr}
   8b0be:	460c      	mov	r4, r1
   8b0c0:	2101      	movs	r1, #1
   8b0c2:	f7ff ff2d 	bl	8af20 <_Balloc>
   8b0c6:	4602      	mov	r2, r0
   8b0c8:	b118      	cbz	r0, 8b0d2 <__i2b+0x16>
   8b0ca:	2301      	movs	r3, #1
   8b0cc:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b0d0:	bd10      	pop	{r4, pc}
   8b0d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b0d6:	4b02      	ldr	r3, [pc, #8]	; (8b0e0 <__i2b+0x24>)
   8b0d8:	4802      	ldr	r0, [pc, #8]	; (8b0e4 <__i2b+0x28>)
   8b0da:	f000 fe79 	bl	8bdd0 <__assert_func>
   8b0de:	bf00      	nop
   8b0e0:	0008cc6c 	.word	0x0008cc6c
   8b0e4:	0008cd0c 	.word	0x0008cd0c

0008b0e8 <__multiply>:
   8b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b0ec:	690d      	ldr	r5, [r1, #16]
   8b0ee:	6917      	ldr	r7, [r2, #16]
   8b0f0:	460e      	mov	r6, r1
   8b0f2:	42bd      	cmp	r5, r7
   8b0f4:	4614      	mov	r4, r2
   8b0f6:	b085      	sub	sp, #20
   8b0f8:	db05      	blt.n	8b106 <__multiply+0x1e>
   8b0fa:	463a      	mov	r2, r7
   8b0fc:	4623      	mov	r3, r4
   8b0fe:	462f      	mov	r7, r5
   8b100:	460c      	mov	r4, r1
   8b102:	4615      	mov	r5, r2
   8b104:	461e      	mov	r6, r3
   8b106:	68a3      	ldr	r3, [r4, #8]
   8b108:	6861      	ldr	r1, [r4, #4]
   8b10a:	eb07 0805 	add.w	r8, r7, r5
   8b10e:	4543      	cmp	r3, r8
   8b110:	bfb8      	it	lt
   8b112:	3101      	addlt	r1, #1
   8b114:	f7ff ff04 	bl	8af20 <_Balloc>
   8b118:	9001      	str	r0, [sp, #4]
   8b11a:	2800      	cmp	r0, #0
   8b11c:	f000 8088 	beq.w	8b230 <__multiply+0x148>
   8b120:	9b01      	ldr	r3, [sp, #4]
   8b122:	f103 0914 	add.w	r9, r3, #20
   8b126:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b12a:	45d1      	cmp	r9, sl
   8b12c:	d205      	bcs.n	8b13a <__multiply+0x52>
   8b12e:	464b      	mov	r3, r9
   8b130:	2200      	movs	r2, #0
   8b132:	f843 2b04 	str.w	r2, [r3], #4
   8b136:	459a      	cmp	sl, r3
   8b138:	d8fb      	bhi.n	8b132 <__multiply+0x4a>
   8b13a:	f106 0e14 	add.w	lr, r6, #20
   8b13e:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b142:	f104 0314 	add.w	r3, r4, #20
   8b146:	45de      	cmp	lr, fp
   8b148:	461a      	mov	r2, r3
   8b14a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b14e:	d23e      	bcs.n	8b1ce <__multiply+0xe6>
   8b150:	1b3b      	subs	r3, r7, r4
   8b152:	3b15      	subs	r3, #21
   8b154:	f023 0303 	bic.w	r3, r3, #3
   8b158:	3304      	adds	r3, #4
   8b15a:	3415      	adds	r4, #21
   8b15c:	42a7      	cmp	r7, r4
   8b15e:	bf38      	it	cc
   8b160:	2304      	movcc	r3, #4
   8b162:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b166:	4698      	mov	r8, r3
   8b168:	4692      	mov	sl, r2
   8b16a:	e003      	b.n	8b174 <__multiply+0x8c>
   8b16c:	45f3      	cmp	fp, lr
   8b16e:	f109 0904 	add.w	r9, r9, #4
   8b172:	d92a      	bls.n	8b1ca <__multiply+0xe2>
   8b174:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b178:	b286      	uxth	r6, r0
   8b17a:	2e00      	cmp	r6, #0
   8b17c:	d138      	bne.n	8b1f0 <__multiply+0x108>
   8b17e:	0c00      	lsrs	r0, r0, #16
   8b180:	d0f4      	beq.n	8b16c <__multiply+0x84>
   8b182:	f8d9 3000 	ldr.w	r3, [r9]
   8b186:	4654      	mov	r4, sl
   8b188:	461e      	mov	r6, r3
   8b18a:	464d      	mov	r5, r9
   8b18c:	f04f 0c00 	mov.w	ip, #0
   8b190:	8822      	ldrh	r2, [r4, #0]
   8b192:	0c36      	lsrs	r6, r6, #16
   8b194:	fb00 6602 	mla	r6, r0, r2, r6
   8b198:	b29b      	uxth	r3, r3
   8b19a:	44b4      	add	ip, r6
   8b19c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b1a0:	f845 3b04 	str.w	r3, [r5], #4
   8b1a4:	f854 3b04 	ldr.w	r3, [r4], #4
   8b1a8:	682e      	ldr	r6, [r5, #0]
   8b1aa:	0c1b      	lsrs	r3, r3, #16
   8b1ac:	b2b2      	uxth	r2, r6
   8b1ae:	fb00 2303 	mla	r3, r0, r3, r2
   8b1b2:	42a7      	cmp	r7, r4
   8b1b4:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b1b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b1bc:	d8e8      	bhi.n	8b190 <__multiply+0xa8>
   8b1be:	45f3      	cmp	fp, lr
   8b1c0:	f849 3008 	str.w	r3, [r9, r8]
   8b1c4:	f109 0904 	add.w	r9, r9, #4
   8b1c8:	d8d4      	bhi.n	8b174 <__multiply+0x8c>
   8b1ca:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b1ce:	f1b8 0f00 	cmp.w	r8, #0
   8b1d2:	dc03      	bgt.n	8b1dc <__multiply+0xf4>
   8b1d4:	e006      	b.n	8b1e4 <__multiply+0xfc>
   8b1d6:	f1b8 0801 	subs.w	r8, r8, #1
   8b1da:	d003      	beq.n	8b1e4 <__multiply+0xfc>
   8b1dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b1e0:	2b00      	cmp	r3, #0
   8b1e2:	d0f8      	beq.n	8b1d6 <__multiply+0xee>
   8b1e4:	9801      	ldr	r0, [sp, #4]
   8b1e6:	f8c0 8010 	str.w	r8, [r0, #16]
   8b1ea:	b005      	add	sp, #20
   8b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b1f0:	4655      	mov	r5, sl
   8b1f2:	464c      	mov	r4, r9
   8b1f4:	2300      	movs	r3, #0
   8b1f6:	f855 1b04 	ldr.w	r1, [r5], #4
   8b1fa:	6820      	ldr	r0, [r4, #0]
   8b1fc:	b28a      	uxth	r2, r1
   8b1fe:	fa1f fc80 	uxth.w	ip, r0
   8b202:	fb06 c202 	mla	r2, r6, r2, ip
   8b206:	0c09      	lsrs	r1, r1, #16
   8b208:	0c00      	lsrs	r0, r0, #16
   8b20a:	fb06 0101 	mla	r1, r6, r1, r0
   8b20e:	4413      	add	r3, r2
   8b210:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b214:	b29b      	uxth	r3, r3
   8b216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b21a:	42af      	cmp	r7, r5
   8b21c:	f844 3b04 	str.w	r3, [r4], #4
   8b220:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b224:	d8e7      	bhi.n	8b1f6 <__multiply+0x10e>
   8b226:	f849 3008 	str.w	r3, [r9, r8]
   8b22a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b22e:	e7a6      	b.n	8b17e <__multiply+0x96>
   8b230:	4602      	mov	r2, r0
   8b232:	f240 115d 	movw	r1, #349	; 0x15d
   8b236:	4b02      	ldr	r3, [pc, #8]	; (8b240 <__multiply+0x158>)
   8b238:	4802      	ldr	r0, [pc, #8]	; (8b244 <__multiply+0x15c>)
   8b23a:	f000 fdc9 	bl	8bdd0 <__assert_func>
   8b23e:	bf00      	nop
   8b240:	0008cc6c 	.word	0x0008cc6c
   8b244:	0008cd0c 	.word	0x0008cd0c

0008b248 <__pow5mult>:
   8b248:	f012 0303 	ands.w	r3, r2, #3
   8b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b250:	4614      	mov	r4, r2
   8b252:	4607      	mov	r7, r0
   8b254:	d12e      	bne.n	8b2b4 <__pow5mult+0x6c>
   8b256:	460e      	mov	r6, r1
   8b258:	10a4      	asrs	r4, r4, #2
   8b25a:	d01c      	beq.n	8b296 <__pow5mult+0x4e>
   8b25c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b25e:	b395      	cbz	r5, 8b2c6 <__pow5mult+0x7e>
   8b260:	07e3      	lsls	r3, r4, #31
   8b262:	f04f 0800 	mov.w	r8, #0
   8b266:	d406      	bmi.n	8b276 <__pow5mult+0x2e>
   8b268:	1064      	asrs	r4, r4, #1
   8b26a:	d014      	beq.n	8b296 <__pow5mult+0x4e>
   8b26c:	6828      	ldr	r0, [r5, #0]
   8b26e:	b1a8      	cbz	r0, 8b29c <__pow5mult+0x54>
   8b270:	4605      	mov	r5, r0
   8b272:	07e3      	lsls	r3, r4, #31
   8b274:	d5f8      	bpl.n	8b268 <__pow5mult+0x20>
   8b276:	462a      	mov	r2, r5
   8b278:	4631      	mov	r1, r6
   8b27a:	4638      	mov	r0, r7
   8b27c:	f7ff ff34 	bl	8b0e8 <__multiply>
   8b280:	b1b6      	cbz	r6, 8b2b0 <__pow5mult+0x68>
   8b282:	6871      	ldr	r1, [r6, #4]
   8b284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b286:	1064      	asrs	r4, r4, #1
   8b288:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b28c:	6032      	str	r2, [r6, #0]
   8b28e:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b292:	4606      	mov	r6, r0
   8b294:	d1ea      	bne.n	8b26c <__pow5mult+0x24>
   8b296:	4630      	mov	r0, r6
   8b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b29c:	462a      	mov	r2, r5
   8b29e:	4629      	mov	r1, r5
   8b2a0:	4638      	mov	r0, r7
   8b2a2:	f7ff ff21 	bl	8b0e8 <__multiply>
   8b2a6:	6028      	str	r0, [r5, #0]
   8b2a8:	4605      	mov	r5, r0
   8b2aa:	f8c0 8000 	str.w	r8, [r0]
   8b2ae:	e7e0      	b.n	8b272 <__pow5mult+0x2a>
   8b2b0:	4606      	mov	r6, r0
   8b2b2:	e7d9      	b.n	8b268 <__pow5mult+0x20>
   8b2b4:	4a09      	ldr	r2, [pc, #36]	; (8b2dc <__pow5mult+0x94>)
   8b2b6:	3b01      	subs	r3, #1
   8b2b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b2bc:	2300      	movs	r3, #0
   8b2be:	f7ff fe5f 	bl	8af80 <__multadd>
   8b2c2:	4606      	mov	r6, r0
   8b2c4:	e7c8      	b.n	8b258 <__pow5mult+0x10>
   8b2c6:	f240 2171 	movw	r1, #625	; 0x271
   8b2ca:	4638      	mov	r0, r7
   8b2cc:	f7ff fef6 	bl	8b0bc <__i2b>
   8b2d0:	2300      	movs	r3, #0
   8b2d2:	64b8      	str	r0, [r7, #72]	; 0x48
   8b2d4:	4605      	mov	r5, r0
   8b2d6:	6003      	str	r3, [r0, #0]
   8b2d8:	e7c2      	b.n	8b260 <__pow5mult+0x18>
   8b2da:	bf00      	nop
   8b2dc:	0008ce80 	.word	0x0008ce80

0008b2e0 <__lshift>:
   8b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b2e4:	690f      	ldr	r7, [r1, #16]
   8b2e6:	688b      	ldr	r3, [r1, #8]
   8b2e8:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b2ec:	1c7e      	adds	r6, r7, #1
   8b2ee:	429e      	cmp	r6, r3
   8b2f0:	460d      	mov	r5, r1
   8b2f2:	4691      	mov	r9, r2
   8b2f4:	4680      	mov	r8, r0
   8b2f6:	6849      	ldr	r1, [r1, #4]
   8b2f8:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b2fc:	dd04      	ble.n	8b308 <__lshift+0x28>
   8b2fe:	005b      	lsls	r3, r3, #1
   8b300:	429e      	cmp	r6, r3
   8b302:	f101 0101 	add.w	r1, r1, #1
   8b306:	dcfa      	bgt.n	8b2fe <__lshift+0x1e>
   8b308:	4640      	mov	r0, r8
   8b30a:	f7ff fe09 	bl	8af20 <_Balloc>
   8b30e:	2800      	cmp	r0, #0
   8b310:	d04f      	beq.n	8b3b2 <__lshift+0xd2>
   8b312:	2c00      	cmp	r4, #0
   8b314:	f100 0114 	add.w	r1, r0, #20
   8b318:	dd0d      	ble.n	8b336 <__lshift+0x56>
   8b31a:	460b      	mov	r3, r1
   8b31c:	2200      	movs	r2, #0
   8b31e:	3405      	adds	r4, #5
   8b320:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b324:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b328:	f843 2b04 	str.w	r2, [r3], #4
   8b32c:	42a3      	cmp	r3, r4
   8b32e:	d1fb      	bne.n	8b328 <__lshift+0x48>
   8b330:	f1ac 0314 	sub.w	r3, ip, #20
   8b334:	4419      	add	r1, r3
   8b336:	692c      	ldr	r4, [r5, #16]
   8b338:	f105 0314 	add.w	r3, r5, #20
   8b33c:	f019 091f 	ands.w	r9, r9, #31
   8b340:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b344:	d02d      	beq.n	8b3a2 <__lshift+0xc2>
   8b346:	468e      	mov	lr, r1
   8b348:	f04f 0a00 	mov.w	sl, #0
   8b34c:	f1c9 0220 	rsb	r2, r9, #32
   8b350:	681c      	ldr	r4, [r3, #0]
   8b352:	fa04 f409 	lsl.w	r4, r4, r9
   8b356:	ea44 040a 	orr.w	r4, r4, sl
   8b35a:	f84e 4b04 	str.w	r4, [lr], #4
   8b35e:	f853 4b04 	ldr.w	r4, [r3], #4
   8b362:	459c      	cmp	ip, r3
   8b364:	fa24 fa02 	lsr.w	sl, r4, r2
   8b368:	d8f2      	bhi.n	8b350 <__lshift+0x70>
   8b36a:	ebac 0305 	sub.w	r3, ip, r5
   8b36e:	3b15      	subs	r3, #21
   8b370:	f023 0303 	bic.w	r3, r3, #3
   8b374:	3304      	adds	r3, #4
   8b376:	f105 0215 	add.w	r2, r5, #21
   8b37a:	4594      	cmp	ip, r2
   8b37c:	bf38      	it	cc
   8b37e:	2304      	movcc	r3, #4
   8b380:	f1ba 0f00 	cmp.w	sl, #0
   8b384:	bf18      	it	ne
   8b386:	4637      	movne	r7, r6
   8b388:	f841 a003 	str.w	sl, [r1, r3]
   8b38c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b390:	686a      	ldr	r2, [r5, #4]
   8b392:	6107      	str	r7, [r0, #16]
   8b394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b398:	6029      	str	r1, [r5, #0]
   8b39a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b3a2:	3904      	subs	r1, #4
   8b3a4:	f853 2b04 	ldr.w	r2, [r3], #4
   8b3a8:	459c      	cmp	ip, r3
   8b3aa:	f841 2f04 	str.w	r2, [r1, #4]!
   8b3ae:	d8f9      	bhi.n	8b3a4 <__lshift+0xc4>
   8b3b0:	e7ec      	b.n	8b38c <__lshift+0xac>
   8b3b2:	4602      	mov	r2, r0
   8b3b4:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b3b8:	4b01      	ldr	r3, [pc, #4]	; (8b3c0 <__lshift+0xe0>)
   8b3ba:	4802      	ldr	r0, [pc, #8]	; (8b3c4 <__lshift+0xe4>)
   8b3bc:	f000 fd08 	bl	8bdd0 <__assert_func>
   8b3c0:	0008cc6c 	.word	0x0008cc6c
   8b3c4:	0008cd0c 	.word	0x0008cd0c

0008b3c8 <__mcmp>:
   8b3c8:	b430      	push	{r4, r5}
   8b3ca:	690b      	ldr	r3, [r1, #16]
   8b3cc:	4605      	mov	r5, r0
   8b3ce:	6900      	ldr	r0, [r0, #16]
   8b3d0:	1ac0      	subs	r0, r0, r3
   8b3d2:	d111      	bne.n	8b3f8 <__mcmp+0x30>
   8b3d4:	3514      	adds	r5, #20
   8b3d6:	3114      	adds	r1, #20
   8b3d8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b3dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b3e0:	e001      	b.n	8b3e6 <__mcmp+0x1e>
   8b3e2:	429d      	cmp	r5, r3
   8b3e4:	d208      	bcs.n	8b3f8 <__mcmp+0x30>
   8b3e6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b3ea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b3ee:	428c      	cmp	r4, r1
   8b3f0:	d0f7      	beq.n	8b3e2 <__mcmp+0x1a>
   8b3f2:	d203      	bcs.n	8b3fc <__mcmp+0x34>
   8b3f4:	f04f 30ff 	mov.w	r0, #4294967295
   8b3f8:	bc30      	pop	{r4, r5}
   8b3fa:	4770      	bx	lr
   8b3fc:	2001      	movs	r0, #1
   8b3fe:	bc30      	pop	{r4, r5}
   8b400:	4770      	bx	lr
   8b402:	bf00      	nop

0008b404 <__mdiff>:
   8b404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b408:	690b      	ldr	r3, [r1, #16]
   8b40a:	460c      	mov	r4, r1
   8b40c:	6911      	ldr	r1, [r2, #16]
   8b40e:	4690      	mov	r8, r2
   8b410:	eba3 0b01 	sub.w	fp, r3, r1
   8b414:	f1bb 0f00 	cmp.w	fp, #0
   8b418:	d17c      	bne.n	8b514 <__mdiff+0x110>
   8b41a:	f104 0614 	add.w	r6, r4, #20
   8b41e:	3214      	adds	r2, #20
   8b420:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b424:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b428:	e001      	b.n	8b42e <__mdiff+0x2a>
   8b42a:	429e      	cmp	r6, r3
   8b42c:	d276      	bcs.n	8b51c <__mdiff+0x118>
   8b42e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b432:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b436:	428d      	cmp	r5, r1
   8b438:	d0f7      	beq.n	8b42a <__mdiff+0x26>
   8b43a:	d365      	bcc.n	8b508 <__mdiff+0x104>
   8b43c:	6861      	ldr	r1, [r4, #4]
   8b43e:	f7ff fd6f 	bl	8af20 <_Balloc>
   8b442:	2800      	cmp	r0, #0
   8b444:	d074      	beq.n	8b530 <__mdiff+0x12c>
   8b446:	f100 0614 	add.w	r6, r0, #20
   8b44a:	46b4      	mov	ip, r6
   8b44c:	2300      	movs	r3, #0
   8b44e:	6927      	ldr	r7, [r4, #16]
   8b450:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b454:	f104 0a14 	add.w	sl, r4, #20
   8b458:	f108 0514 	add.w	r5, r8, #20
   8b45c:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b460:	3410      	adds	r4, #16
   8b462:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b466:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b46a:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b46e:	f855 bb04 	ldr.w	fp, [r5], #4
   8b472:	b291      	uxth	r1, r2
   8b474:	440b      	add	r3, r1
   8b476:	fa1f f18b 	uxth.w	r1, fp
   8b47a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b47e:	1a59      	subs	r1, r3, r1
   8b480:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b484:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b488:	b289      	uxth	r1, r1
   8b48a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b48e:	45a9      	cmp	r9, r5
   8b490:	f84c 1b04 	str.w	r1, [ip], #4
   8b494:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b498:	d8e7      	bhi.n	8b46a <__mdiff+0x66>
   8b49a:	eba9 0208 	sub.w	r2, r9, r8
   8b49e:	3a15      	subs	r2, #21
   8b4a0:	f108 0815 	add.w	r8, r8, #21
   8b4a4:	45c1      	cmp	r9, r8
   8b4a6:	f022 0403 	bic.w	r4, r2, #3
   8b4aa:	f104 0404 	add.w	r4, r4, #4
   8b4ae:	bf38      	it	cc
   8b4b0:	2404      	movcc	r4, #4
   8b4b2:	f022 0203 	bic.w	r2, r2, #3
   8b4b6:	bf38      	it	cc
   8b4b8:	2200      	movcc	r2, #0
   8b4ba:	44a2      	add	sl, r4
   8b4bc:	45d6      	cmp	lr, sl
   8b4be:	4434      	add	r4, r6
   8b4c0:	4416      	add	r6, r2
   8b4c2:	d918      	bls.n	8b4f6 <__mdiff+0xf2>
   8b4c4:	4625      	mov	r5, r4
   8b4c6:	4652      	mov	r2, sl
   8b4c8:	f852 6b04 	ldr.w	r6, [r2], #4
   8b4cc:	b2b1      	uxth	r1, r6
   8b4ce:	4419      	add	r1, r3
   8b4d0:	140b      	asrs	r3, r1, #16
   8b4d2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8b4d6:	b289      	uxth	r1, r1
   8b4d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b4dc:	4596      	cmp	lr, r2
   8b4de:	f845 1b04 	str.w	r1, [r5], #4
   8b4e2:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b4e6:	d8ef      	bhi.n	8b4c8 <__mdiff+0xc4>
   8b4e8:	f10e 36ff 	add.w	r6, lr, #4294967295
   8b4ec:	eba6 060a 	sub.w	r6, r6, sl
   8b4f0:	f026 0603 	bic.w	r6, r6, #3
   8b4f4:	4426      	add	r6, r4
   8b4f6:	b921      	cbnz	r1, 8b502 <__mdiff+0xfe>
   8b4f8:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8b4fc:	3f01      	subs	r7, #1
   8b4fe:	2b00      	cmp	r3, #0
   8b500:	d0fa      	beq.n	8b4f8 <__mdiff+0xf4>
   8b502:	6107      	str	r7, [r0, #16]
   8b504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b508:	4623      	mov	r3, r4
   8b50a:	f04f 0b01 	mov.w	fp, #1
   8b50e:	4644      	mov	r4, r8
   8b510:	4698      	mov	r8, r3
   8b512:	e793      	b.n	8b43c <__mdiff+0x38>
   8b514:	dbf8      	blt.n	8b508 <__mdiff+0x104>
   8b516:	f04f 0b00 	mov.w	fp, #0
   8b51a:	e78f      	b.n	8b43c <__mdiff+0x38>
   8b51c:	2100      	movs	r1, #0
   8b51e:	f7ff fcff 	bl	8af20 <_Balloc>
   8b522:	b160      	cbz	r0, 8b53e <__mdiff+0x13a>
   8b524:	2201      	movs	r2, #1
   8b526:	2300      	movs	r3, #0
   8b528:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b530:	4602      	mov	r2, r0
   8b532:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b536:	4b05      	ldr	r3, [pc, #20]	; (8b54c <__mdiff+0x148>)
   8b538:	4805      	ldr	r0, [pc, #20]	; (8b550 <__mdiff+0x14c>)
   8b53a:	f000 fc49 	bl	8bdd0 <__assert_func>
   8b53e:	4602      	mov	r2, r0
   8b540:	f240 2132 	movw	r1, #562	; 0x232
   8b544:	4b01      	ldr	r3, [pc, #4]	; (8b54c <__mdiff+0x148>)
   8b546:	4802      	ldr	r0, [pc, #8]	; (8b550 <__mdiff+0x14c>)
   8b548:	f000 fc42 	bl	8bdd0 <__assert_func>
   8b54c:	0008cc6c 	.word	0x0008cc6c
   8b550:	0008cd0c 	.word	0x0008cd0c

0008b554 <__d2b>:
   8b554:	b570      	push	{r4, r5, r6, lr}
   8b556:	2101      	movs	r1, #1
   8b558:	b082      	sub	sp, #8
   8b55a:	4616      	mov	r6, r2
   8b55c:	461d      	mov	r5, r3
   8b55e:	f7ff fcdf 	bl	8af20 <_Balloc>
   8b562:	4604      	mov	r4, r0
   8b564:	2800      	cmp	r0, #0
   8b566:	d04c      	beq.n	8b602 <__d2b+0xae>
   8b568:	462b      	mov	r3, r5
   8b56a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b572:	b10d      	cbz	r5, 8b578 <__d2b+0x24>
   8b574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b578:	2e00      	cmp	r6, #0
   8b57a:	9301      	str	r3, [sp, #4]
   8b57c:	d022      	beq.n	8b5c4 <__d2b+0x70>
   8b57e:	4668      	mov	r0, sp
   8b580:	9600      	str	r6, [sp, #0]
   8b582:	f7ff fd6b 	bl	8b05c <__lo0bits>
   8b586:	2800      	cmp	r0, #0
   8b588:	d037      	beq.n	8b5fa <__d2b+0xa6>
   8b58a:	9b01      	ldr	r3, [sp, #4]
   8b58c:	9900      	ldr	r1, [sp, #0]
   8b58e:	f1c0 0220 	rsb	r2, r0, #32
   8b592:	fa03 f202 	lsl.w	r2, r3, r2
   8b596:	430a      	orrs	r2, r1
   8b598:	40c3      	lsrs	r3, r0
   8b59a:	9301      	str	r3, [sp, #4]
   8b59c:	6162      	str	r2, [r4, #20]
   8b59e:	2b00      	cmp	r3, #0
   8b5a0:	bf14      	ite	ne
   8b5a2:	2102      	movne	r1, #2
   8b5a4:	2101      	moveq	r1, #1
   8b5a6:	61a3      	str	r3, [r4, #24]
   8b5a8:	6121      	str	r1, [r4, #16]
   8b5aa:	b1b5      	cbz	r5, 8b5da <__d2b+0x86>
   8b5ac:	9a06      	ldr	r2, [sp, #24]
   8b5ae:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b5b2:	4403      	add	r3, r0
   8b5b4:	6013      	str	r3, [r2, #0]
   8b5b6:	9b07      	ldr	r3, [sp, #28]
   8b5b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b5bc:	6018      	str	r0, [r3, #0]
   8b5be:	4620      	mov	r0, r4
   8b5c0:	b002      	add	sp, #8
   8b5c2:	bd70      	pop	{r4, r5, r6, pc}
   8b5c4:	a801      	add	r0, sp, #4
   8b5c6:	f7ff fd49 	bl	8b05c <__lo0bits>
   8b5ca:	2301      	movs	r3, #1
   8b5cc:	9a01      	ldr	r2, [sp, #4]
   8b5ce:	4619      	mov	r1, r3
   8b5d0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b5d4:	3020      	adds	r0, #32
   8b5d6:	2d00      	cmp	r5, #0
   8b5d8:	d1e8      	bne.n	8b5ac <__d2b+0x58>
   8b5da:	9a06      	ldr	r2, [sp, #24]
   8b5dc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8b5e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b5e4:	6010      	str	r0, [r2, #0]
   8b5e6:	6918      	ldr	r0, [r3, #16]
   8b5e8:	f7ff fd18 	bl	8b01c <__hi0bits>
   8b5ec:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b5f0:	4620      	mov	r0, r4
   8b5f2:	9b07      	ldr	r3, [sp, #28]
   8b5f4:	6019      	str	r1, [r3, #0]
   8b5f6:	b002      	add	sp, #8
   8b5f8:	bd70      	pop	{r4, r5, r6, pc}
   8b5fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b5fe:	6162      	str	r2, [r4, #20]
   8b600:	e7cd      	b.n	8b59e <__d2b+0x4a>
   8b602:	4602      	mov	r2, r0
   8b604:	f240 310a 	movw	r1, #778	; 0x30a
   8b608:	4b01      	ldr	r3, [pc, #4]	; (8b610 <__d2b+0xbc>)
   8b60a:	4802      	ldr	r0, [pc, #8]	; (8b614 <__d2b+0xc0>)
   8b60c:	f000 fbe0 	bl	8bdd0 <__assert_func>
   8b610:	0008cc6c 	.word	0x0008cc6c
   8b614:	0008cd0c 	.word	0x0008cd0c

0008b618 <_realloc_r>:
   8b618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b61c:	4616      	mov	r6, r2
   8b61e:	2900      	cmp	r1, #0
   8b620:	f000 80bd 	beq.w	8b79e <_realloc_r+0x186>
   8b624:	f106 050b 	add.w	r5, r6, #11
   8b628:	460c      	mov	r4, r1
   8b62a:	4680      	mov	r8, r0
   8b62c:	f7ff fc6c 	bl	8af08 <__malloc_lock>
   8b630:	2d16      	cmp	r5, #22
   8b632:	d85f      	bhi.n	8b6f4 <_realloc_r+0xdc>
   8b634:	2510      	movs	r5, #16
   8b636:	462a      	mov	r2, r5
   8b638:	42ae      	cmp	r6, r5
   8b63a:	d860      	bhi.n	8b6fe <_realloc_r+0xe6>
   8b63c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b640:	f1a4 0908 	sub.w	r9, r4, #8
   8b644:	f021 0703 	bic.w	r7, r1, #3
   8b648:	4297      	cmp	r7, r2
   8b64a:	f280 8086 	bge.w	8b75a <_realloc_r+0x142>
   8b64e:	4bc9      	ldr	r3, [pc, #804]	; (8b974 <_realloc_r+0x35c>)
   8b650:	eb09 0007 	add.w	r0, r9, r7
   8b654:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b658:	4584      	cmp	ip, r0
   8b65a:	f000 80b9 	beq.w	8b7d0 <_realloc_r+0x1b8>
   8b65e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b662:	f02c 0301 	bic.w	r3, ip, #1
   8b666:	4403      	add	r3, r0
   8b668:	685b      	ldr	r3, [r3, #4]
   8b66a:	07db      	lsls	r3, r3, #31
   8b66c:	f100 808c 	bmi.w	8b788 <_realloc_r+0x170>
   8b670:	f02c 0c03 	bic.w	ip, ip, #3
   8b674:	eb07 030c 	add.w	r3, r7, ip
   8b678:	4293      	cmp	r3, r2
   8b67a:	f280 8115 	bge.w	8b8a8 <_realloc_r+0x290>
   8b67e:	07cb      	lsls	r3, r1, #31
   8b680:	d40f      	bmi.n	8b6a2 <_realloc_r+0x8a>
   8b682:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b686:	eba9 0a03 	sub.w	sl, r9, r3
   8b68a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b68e:	f023 0103 	bic.w	r1, r3, #3
   8b692:	448c      	add	ip, r1
   8b694:	44bc      	add	ip, r7
   8b696:	4594      	cmp	ip, r2
   8b698:	da38      	bge.n	8b70c <_realloc_r+0xf4>
   8b69a:	187b      	adds	r3, r7, r1
   8b69c:	4293      	cmp	r3, r2
   8b69e:	f280 810f 	bge.w	8b8c0 <_realloc_r+0x2a8>
   8b6a2:	4631      	mov	r1, r6
   8b6a4:	4640      	mov	r0, r8
   8b6a6:	f7ff f8c1 	bl	8a82c <_malloc_r>
   8b6aa:	4606      	mov	r6, r0
   8b6ac:	b1e0      	cbz	r0, 8b6e8 <_realloc_r+0xd0>
   8b6ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b6b2:	f1a0 0208 	sub.w	r2, r0, #8
   8b6b6:	f023 0301 	bic.w	r3, r3, #1
   8b6ba:	444b      	add	r3, r9
   8b6bc:	4293      	cmp	r3, r2
   8b6be:	f000 80f9 	beq.w	8b8b4 <_realloc_r+0x29c>
   8b6c2:	1f3a      	subs	r2, r7, #4
   8b6c4:	2a24      	cmp	r2, #36	; 0x24
   8b6c6:	f200 811c 	bhi.w	8b902 <_realloc_r+0x2ea>
   8b6ca:	2a13      	cmp	r2, #19
   8b6cc:	f200 80cd 	bhi.w	8b86a <_realloc_r+0x252>
   8b6d0:	4603      	mov	r3, r0
   8b6d2:	4622      	mov	r2, r4
   8b6d4:	6811      	ldr	r1, [r2, #0]
   8b6d6:	6019      	str	r1, [r3, #0]
   8b6d8:	6851      	ldr	r1, [r2, #4]
   8b6da:	6059      	str	r1, [r3, #4]
   8b6dc:	6892      	ldr	r2, [r2, #8]
   8b6de:	609a      	str	r2, [r3, #8]
   8b6e0:	4621      	mov	r1, r4
   8b6e2:	4640      	mov	r0, r8
   8b6e4:	f7fe fd70 	bl	8a1c8 <_free_r>
   8b6e8:	4640      	mov	r0, r8
   8b6ea:	f7ff fc13 	bl	8af14 <__malloc_unlock>
   8b6ee:	4630      	mov	r0, r6
   8b6f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b6f4:	f025 0507 	bic.w	r5, r5, #7
   8b6f8:	2d00      	cmp	r5, #0
   8b6fa:	462a      	mov	r2, r5
   8b6fc:	da9c      	bge.n	8b638 <_realloc_r+0x20>
   8b6fe:	230c      	movs	r3, #12
   8b700:	2600      	movs	r6, #0
   8b702:	f8c8 3000 	str.w	r3, [r8]
   8b706:	4630      	mov	r0, r6
   8b708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b70c:	4656      	mov	r6, sl
   8b70e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b712:	60cb      	str	r3, [r1, #12]
   8b714:	6099      	str	r1, [r3, #8]
   8b716:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b71a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b71e:	1f3a      	subs	r2, r7, #4
   8b720:	2a24      	cmp	r2, #36	; 0x24
   8b722:	60cb      	str	r3, [r1, #12]
   8b724:	6099      	str	r1, [r3, #8]
   8b726:	f200 8107 	bhi.w	8b938 <_realloc_r+0x320>
   8b72a:	2a13      	cmp	r2, #19
   8b72c:	f240 8102 	bls.w	8b934 <_realloc_r+0x31c>
   8b730:	6823      	ldr	r3, [r4, #0]
   8b732:	2a1b      	cmp	r2, #27
   8b734:	f8ca 3008 	str.w	r3, [sl, #8]
   8b738:	6863      	ldr	r3, [r4, #4]
   8b73a:	f8ca 300c 	str.w	r3, [sl, #12]
   8b73e:	f200 811b 	bhi.w	8b978 <_realloc_r+0x360>
   8b742:	3408      	adds	r4, #8
   8b744:	f10a 0310 	add.w	r3, sl, #16
   8b748:	6822      	ldr	r2, [r4, #0]
   8b74a:	4667      	mov	r7, ip
   8b74c:	601a      	str	r2, [r3, #0]
   8b74e:	6862      	ldr	r2, [r4, #4]
   8b750:	46d1      	mov	r9, sl
   8b752:	605a      	str	r2, [r3, #4]
   8b754:	68a2      	ldr	r2, [r4, #8]
   8b756:	4634      	mov	r4, r6
   8b758:	609a      	str	r2, [r3, #8]
   8b75a:	1b7b      	subs	r3, r7, r5
   8b75c:	2b0f      	cmp	r3, #15
   8b75e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b762:	d821      	bhi.n	8b7a8 <_realloc_r+0x190>
   8b764:	f002 0201 	and.w	r2, r2, #1
   8b768:	433a      	orrs	r2, r7
   8b76a:	eb09 0107 	add.w	r1, r9, r7
   8b76e:	f8c9 2004 	str.w	r2, [r9, #4]
   8b772:	684b      	ldr	r3, [r1, #4]
   8b774:	f043 0301 	orr.w	r3, r3, #1
   8b778:	604b      	str	r3, [r1, #4]
   8b77a:	4626      	mov	r6, r4
   8b77c:	4640      	mov	r0, r8
   8b77e:	f7ff fbc9 	bl	8af14 <__malloc_unlock>
   8b782:	4630      	mov	r0, r6
   8b784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b788:	07c9      	lsls	r1, r1, #31
   8b78a:	d48a      	bmi.n	8b6a2 <_realloc_r+0x8a>
   8b78c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b790:	eba9 0a03 	sub.w	sl, r9, r3
   8b794:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b798:	f021 0103 	bic.w	r1, r1, #3
   8b79c:	e77d      	b.n	8b69a <_realloc_r+0x82>
   8b79e:	4611      	mov	r1, r2
   8b7a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b7a4:	f7ff b842 	b.w	8a82c <_malloc_r>
   8b7a8:	f002 0201 	and.w	r2, r2, #1
   8b7ac:	eb09 0105 	add.w	r1, r9, r5
   8b7b0:	f043 0301 	orr.w	r3, r3, #1
   8b7b4:	432a      	orrs	r2, r5
   8b7b6:	f8c9 2004 	str.w	r2, [r9, #4]
   8b7ba:	444f      	add	r7, r9
   8b7bc:	604b      	str	r3, [r1, #4]
   8b7be:	687b      	ldr	r3, [r7, #4]
   8b7c0:	4640      	mov	r0, r8
   8b7c2:	f043 0301 	orr.w	r3, r3, #1
   8b7c6:	3108      	adds	r1, #8
   8b7c8:	607b      	str	r3, [r7, #4]
   8b7ca:	f7fe fcfd 	bl	8a1c8 <_free_r>
   8b7ce:	e7d4      	b.n	8b77a <_realloc_r+0x162>
   8b7d0:	f8dc b004 	ldr.w	fp, [ip, #4]
   8b7d4:	f105 0010 	add.w	r0, r5, #16
   8b7d8:	f02b 0b03 	bic.w	fp, fp, #3
   8b7dc:	eb07 0c0b 	add.w	ip, r7, fp
   8b7e0:	4584      	cmp	ip, r0
   8b7e2:	da4d      	bge.n	8b880 <_realloc_r+0x268>
   8b7e4:	07c9      	lsls	r1, r1, #31
   8b7e6:	f53f af5c 	bmi.w	8b6a2 <_realloc_r+0x8a>
   8b7ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b7ee:	eba9 0a01 	sub.w	sl, r9, r1
   8b7f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b7f6:	f021 0103 	bic.w	r1, r1, #3
   8b7fa:	448b      	add	fp, r1
   8b7fc:	44bb      	add	fp, r7
   8b7fe:	4558      	cmp	r0, fp
   8b800:	f73f af4b 	bgt.w	8b69a <_realloc_r+0x82>
   8b804:	4656      	mov	r6, sl
   8b806:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b80a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b80e:	1f3a      	subs	r2, r7, #4
   8b810:	2a24      	cmp	r2, #36	; 0x24
   8b812:	60c1      	str	r1, [r0, #12]
   8b814:	6088      	str	r0, [r1, #8]
   8b816:	f200 80bd 	bhi.w	8b994 <_realloc_r+0x37c>
   8b81a:	2a13      	cmp	r2, #19
   8b81c:	f240 80b8 	bls.w	8b990 <_realloc_r+0x378>
   8b820:	6821      	ldr	r1, [r4, #0]
   8b822:	2a1b      	cmp	r2, #27
   8b824:	f8ca 1008 	str.w	r1, [sl, #8]
   8b828:	6861      	ldr	r1, [r4, #4]
   8b82a:	f8ca 100c 	str.w	r1, [sl, #12]
   8b82e:	f200 80c1 	bhi.w	8b9b4 <_realloc_r+0x39c>
   8b832:	3408      	adds	r4, #8
   8b834:	f10a 0210 	add.w	r2, sl, #16
   8b838:	6821      	ldr	r1, [r4, #0]
   8b83a:	6011      	str	r1, [r2, #0]
   8b83c:	6861      	ldr	r1, [r4, #4]
   8b83e:	6051      	str	r1, [r2, #4]
   8b840:	68a1      	ldr	r1, [r4, #8]
   8b842:	6091      	str	r1, [r2, #8]
   8b844:	ebab 0205 	sub.w	r2, fp, r5
   8b848:	eb0a 0105 	add.w	r1, sl, r5
   8b84c:	f042 0201 	orr.w	r2, r2, #1
   8b850:	6099      	str	r1, [r3, #8]
   8b852:	604a      	str	r2, [r1, #4]
   8b854:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b858:	4640      	mov	r0, r8
   8b85a:	f003 0301 	and.w	r3, r3, #1
   8b85e:	431d      	orrs	r5, r3
   8b860:	f8ca 5004 	str.w	r5, [sl, #4]
   8b864:	f7ff fb56 	bl	8af14 <__malloc_unlock>
   8b868:	e74d      	b.n	8b706 <_realloc_r+0xee>
   8b86a:	6823      	ldr	r3, [r4, #0]
   8b86c:	2a1b      	cmp	r2, #27
   8b86e:	6003      	str	r3, [r0, #0]
   8b870:	6863      	ldr	r3, [r4, #4]
   8b872:	6043      	str	r3, [r0, #4]
   8b874:	d849      	bhi.n	8b90a <_realloc_r+0x2f2>
   8b876:	f104 0208 	add.w	r2, r4, #8
   8b87a:	f100 0308 	add.w	r3, r0, #8
   8b87e:	e729      	b.n	8b6d4 <_realloc_r+0xbc>
   8b880:	ebac 0205 	sub.w	r2, ip, r5
   8b884:	eb09 0105 	add.w	r1, r9, r5
   8b888:	f042 0201 	orr.w	r2, r2, #1
   8b88c:	6099      	str	r1, [r3, #8]
   8b88e:	604a      	str	r2, [r1, #4]
   8b890:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b894:	4640      	mov	r0, r8
   8b896:	f003 0301 	and.w	r3, r3, #1
   8b89a:	431d      	orrs	r5, r3
   8b89c:	f844 5c04 	str.w	r5, [r4, #-4]
   8b8a0:	f7ff fb38 	bl	8af14 <__malloc_unlock>
   8b8a4:	4626      	mov	r6, r4
   8b8a6:	e72e      	b.n	8b706 <_realloc_r+0xee>
   8b8a8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8b8ac:	461f      	mov	r7, r3
   8b8ae:	60ca      	str	r2, [r1, #12]
   8b8b0:	6091      	str	r1, [r2, #8]
   8b8b2:	e752      	b.n	8b75a <_realloc_r+0x142>
   8b8b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b8b8:	f023 0303 	bic.w	r3, r3, #3
   8b8bc:	441f      	add	r7, r3
   8b8be:	e74c      	b.n	8b75a <_realloc_r+0x142>
   8b8c0:	4656      	mov	r6, sl
   8b8c2:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b8c6:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b8ca:	1f3a      	subs	r2, r7, #4
   8b8cc:	2a24      	cmp	r2, #36	; 0x24
   8b8ce:	60c1      	str	r1, [r0, #12]
   8b8d0:	6088      	str	r0, [r1, #8]
   8b8d2:	d827      	bhi.n	8b924 <_realloc_r+0x30c>
   8b8d4:	2a13      	cmp	r2, #19
   8b8d6:	d923      	bls.n	8b920 <_realloc_r+0x308>
   8b8d8:	6821      	ldr	r1, [r4, #0]
   8b8da:	2a1b      	cmp	r2, #27
   8b8dc:	f8ca 1008 	str.w	r1, [sl, #8]
   8b8e0:	6861      	ldr	r1, [r4, #4]
   8b8e2:	f8ca 100c 	str.w	r1, [sl, #12]
   8b8e6:	d82f      	bhi.n	8b948 <_realloc_r+0x330>
   8b8e8:	3408      	adds	r4, #8
   8b8ea:	f10a 0210 	add.w	r2, sl, #16
   8b8ee:	6821      	ldr	r1, [r4, #0]
   8b8f0:	461f      	mov	r7, r3
   8b8f2:	6011      	str	r1, [r2, #0]
   8b8f4:	6863      	ldr	r3, [r4, #4]
   8b8f6:	46d1      	mov	r9, sl
   8b8f8:	6053      	str	r3, [r2, #4]
   8b8fa:	68a3      	ldr	r3, [r4, #8]
   8b8fc:	4634      	mov	r4, r6
   8b8fe:	6093      	str	r3, [r2, #8]
   8b900:	e72b      	b.n	8b75a <_realloc_r+0x142>
   8b902:	4621      	mov	r1, r4
   8b904:	f7ff fa96 	bl	8ae34 <memmove>
   8b908:	e6ea      	b.n	8b6e0 <_realloc_r+0xc8>
   8b90a:	68a3      	ldr	r3, [r4, #8]
   8b90c:	2a24      	cmp	r2, #36	; 0x24
   8b90e:	6083      	str	r3, [r0, #8]
   8b910:	68e3      	ldr	r3, [r4, #12]
   8b912:	60c3      	str	r3, [r0, #12]
   8b914:	d024      	beq.n	8b960 <_realloc_r+0x348>
   8b916:	f104 0210 	add.w	r2, r4, #16
   8b91a:	f100 0310 	add.w	r3, r0, #16
   8b91e:	e6d9      	b.n	8b6d4 <_realloc_r+0xbc>
   8b920:	4632      	mov	r2, r6
   8b922:	e7e4      	b.n	8b8ee <_realloc_r+0x2d6>
   8b924:	4621      	mov	r1, r4
   8b926:	4630      	mov	r0, r6
   8b928:	461f      	mov	r7, r3
   8b92a:	46d1      	mov	r9, sl
   8b92c:	f7ff fa82 	bl	8ae34 <memmove>
   8b930:	4634      	mov	r4, r6
   8b932:	e712      	b.n	8b75a <_realloc_r+0x142>
   8b934:	4633      	mov	r3, r6
   8b936:	e707      	b.n	8b748 <_realloc_r+0x130>
   8b938:	4621      	mov	r1, r4
   8b93a:	4630      	mov	r0, r6
   8b93c:	4667      	mov	r7, ip
   8b93e:	46d1      	mov	r9, sl
   8b940:	f7ff fa78 	bl	8ae34 <memmove>
   8b944:	4634      	mov	r4, r6
   8b946:	e708      	b.n	8b75a <_realloc_r+0x142>
   8b948:	68a1      	ldr	r1, [r4, #8]
   8b94a:	2a24      	cmp	r2, #36	; 0x24
   8b94c:	f8ca 1010 	str.w	r1, [sl, #16]
   8b950:	68e1      	ldr	r1, [r4, #12]
   8b952:	f8ca 1014 	str.w	r1, [sl, #20]
   8b956:	d023      	beq.n	8b9a0 <_realloc_r+0x388>
   8b958:	3410      	adds	r4, #16
   8b95a:	f10a 0218 	add.w	r2, sl, #24
   8b95e:	e7c6      	b.n	8b8ee <_realloc_r+0x2d6>
   8b960:	6923      	ldr	r3, [r4, #16]
   8b962:	f104 0218 	add.w	r2, r4, #24
   8b966:	6103      	str	r3, [r0, #16]
   8b968:	6961      	ldr	r1, [r4, #20]
   8b96a:	f100 0318 	add.w	r3, r0, #24
   8b96e:	6141      	str	r1, [r0, #20]
   8b970:	e6b0      	b.n	8b6d4 <_realloc_r+0xbc>
   8b972:	bf00      	nop
   8b974:	20000f48 	.word	0x20000f48
   8b978:	68a3      	ldr	r3, [r4, #8]
   8b97a:	2a24      	cmp	r2, #36	; 0x24
   8b97c:	f8ca 3010 	str.w	r3, [sl, #16]
   8b980:	68e3      	ldr	r3, [r4, #12]
   8b982:	f8ca 3014 	str.w	r3, [sl, #20]
   8b986:	d021      	beq.n	8b9cc <_realloc_r+0x3b4>
   8b988:	3410      	adds	r4, #16
   8b98a:	f10a 0318 	add.w	r3, sl, #24
   8b98e:	e6db      	b.n	8b748 <_realloc_r+0x130>
   8b990:	4632      	mov	r2, r6
   8b992:	e751      	b.n	8b838 <_realloc_r+0x220>
   8b994:	4621      	mov	r1, r4
   8b996:	4630      	mov	r0, r6
   8b998:	f7ff fa4c 	bl	8ae34 <memmove>
   8b99c:	4b15      	ldr	r3, [pc, #84]	; (8b9f4 <_realloc_r+0x3dc>)
   8b99e:	e751      	b.n	8b844 <_realloc_r+0x22c>
   8b9a0:	6921      	ldr	r1, [r4, #16]
   8b9a2:	f10a 0220 	add.w	r2, sl, #32
   8b9a6:	f8ca 1018 	str.w	r1, [sl, #24]
   8b9aa:	6961      	ldr	r1, [r4, #20]
   8b9ac:	3418      	adds	r4, #24
   8b9ae:	f8ca 101c 	str.w	r1, [sl, #28]
   8b9b2:	e79c      	b.n	8b8ee <_realloc_r+0x2d6>
   8b9b4:	68a1      	ldr	r1, [r4, #8]
   8b9b6:	2a24      	cmp	r2, #36	; 0x24
   8b9b8:	f8ca 1010 	str.w	r1, [sl, #16]
   8b9bc:	68e1      	ldr	r1, [r4, #12]
   8b9be:	f8ca 1014 	str.w	r1, [sl, #20]
   8b9c2:	d00d      	beq.n	8b9e0 <_realloc_r+0x3c8>
   8b9c4:	3410      	adds	r4, #16
   8b9c6:	f10a 0218 	add.w	r2, sl, #24
   8b9ca:	e735      	b.n	8b838 <_realloc_r+0x220>
   8b9cc:	6922      	ldr	r2, [r4, #16]
   8b9ce:	f10a 0320 	add.w	r3, sl, #32
   8b9d2:	f8ca 2018 	str.w	r2, [sl, #24]
   8b9d6:	6962      	ldr	r2, [r4, #20]
   8b9d8:	3418      	adds	r4, #24
   8b9da:	f8ca 201c 	str.w	r2, [sl, #28]
   8b9de:	e6b3      	b.n	8b748 <_realloc_r+0x130>
   8b9e0:	6921      	ldr	r1, [r4, #16]
   8b9e2:	f10a 0220 	add.w	r2, sl, #32
   8b9e6:	f8ca 1018 	str.w	r1, [sl, #24]
   8b9ea:	6961      	ldr	r1, [r4, #20]
   8b9ec:	3418      	adds	r4, #24
   8b9ee:	f8ca 101c 	str.w	r1, [sl, #28]
   8b9f2:	e721      	b.n	8b838 <_realloc_r+0x220>
   8b9f4:	20000f48 	.word	0x20000f48

0008b9f8 <frexp>:
   8b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b9fa:	4617      	mov	r7, r2
   8b9fc:	2200      	movs	r2, #0
   8b9fe:	f8df c060 	ldr.w	ip, [pc, #96]	; 8ba60 <frexp+0x68>
   8ba02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ba06:	4563      	cmp	r3, ip
   8ba08:	4604      	mov	r4, r0
   8ba0a:	460d      	mov	r5, r1
   8ba0c:	603a      	str	r2, [r7, #0]
   8ba0e:	dc22      	bgt.n	8ba56 <frexp+0x5e>
   8ba10:	4684      	mov	ip, r0
   8ba12:	ea53 0c0c 	orrs.w	ip, r3, ip
   8ba16:	d01e      	beq.n	8ba56 <frexp+0x5e>
   8ba18:	f8df c048 	ldr.w	ip, [pc, #72]	; 8ba64 <frexp+0x6c>
   8ba1c:	460e      	mov	r6, r1
   8ba1e:	ea01 0c0c 	and.w	ip, r1, ip
   8ba22:	f1bc 0f00 	cmp.w	ip, #0
   8ba26:	d109      	bne.n	8ba3c <frexp+0x44>
   8ba28:	2200      	movs	r2, #0
   8ba2a:	4b0c      	ldr	r3, [pc, #48]	; (8ba5c <frexp+0x64>)
   8ba2c:	f000 fd0e 	bl	8c44c <__aeabi_dmul>
   8ba30:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8ba34:	4604      	mov	r4, r0
   8ba36:	460e      	mov	r6, r1
   8ba38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ba3c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8ba40:	151b      	asrs	r3, r3, #20
   8ba42:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8ba46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ba4a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8ba4e:	4413      	add	r3, r2
   8ba50:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ba54:	603b      	str	r3, [r7, #0]
   8ba56:	4620      	mov	r0, r4
   8ba58:	4629      	mov	r1, r5
   8ba5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ba5c:	43500000 	.word	0x43500000
   8ba60:	7fefffff 	.word	0x7fefffff
   8ba64:	7ff00000 	.word	0x7ff00000

0008ba68 <_sbrk_r>:
   8ba68:	2200      	movs	r2, #0
   8ba6a:	b538      	push	{r3, r4, r5, lr}
   8ba6c:	4d06      	ldr	r5, [pc, #24]	; (8ba88 <_sbrk_r+0x20>)
   8ba6e:	4604      	mov	r4, r0
   8ba70:	4608      	mov	r0, r1
   8ba72:	602a      	str	r2, [r5, #0]
   8ba74:	f7f9 fed2 	bl	8581c <_sbrk>
   8ba78:	1c43      	adds	r3, r0, #1
   8ba7a:	d000      	beq.n	8ba7e <_sbrk_r+0x16>
   8ba7c:	bd38      	pop	{r3, r4, r5, pc}
   8ba7e:	682b      	ldr	r3, [r5, #0]
   8ba80:	2b00      	cmp	r3, #0
   8ba82:	d0fb      	beq.n	8ba7c <_sbrk_r+0x14>
   8ba84:	6023      	str	r3, [r4, #0]
   8ba86:	bd38      	pop	{r3, r4, r5, pc}
   8ba88:	200026d8 	.word	0x200026d8

0008ba8c <__sread>:
   8ba8c:	b510      	push	{r4, lr}
   8ba8e:	460c      	mov	r4, r1
   8ba90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ba94:	f000 fab4 	bl	8c000 <_read_r>
   8ba98:	2800      	cmp	r0, #0
   8ba9a:	db03      	blt.n	8baa4 <__sread+0x18>
   8ba9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8ba9e:	4403      	add	r3, r0
   8baa0:	6523      	str	r3, [r4, #80]	; 0x50
   8baa2:	bd10      	pop	{r4, pc}
   8baa4:	89a3      	ldrh	r3, [r4, #12]
   8baa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8baaa:	81a3      	strh	r3, [r4, #12]
   8baac:	bd10      	pop	{r4, pc}
   8baae:	bf00      	nop

0008bab0 <__swrite>:
   8bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bab4:	460c      	mov	r4, r1
   8bab6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8baba:	461f      	mov	r7, r3
   8babc:	05cb      	lsls	r3, r1, #23
   8babe:	4616      	mov	r6, r2
   8bac0:	4605      	mov	r5, r0
   8bac2:	d40b      	bmi.n	8badc <__swrite+0x2c>
   8bac4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bac8:	81a1      	strh	r1, [r4, #12]
   8baca:	463b      	mov	r3, r7
   8bacc:	4632      	mov	r2, r6
   8bace:	4628      	mov	r0, r5
   8bad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bad8:	f000 b91e 	b.w	8bd18 <_write_r>
   8badc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bae0:	2302      	movs	r3, #2
   8bae2:	2200      	movs	r2, #0
   8bae4:	f000 fa76 	bl	8bfd4 <_lseek_r>
   8bae8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8baec:	e7ea      	b.n	8bac4 <__swrite+0x14>
   8baee:	bf00      	nop

0008baf0 <__sseek>:
   8baf0:	b510      	push	{r4, lr}
   8baf2:	460c      	mov	r4, r1
   8baf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8baf8:	f000 fa6c 	bl	8bfd4 <_lseek_r>
   8bafc:	89a3      	ldrh	r3, [r4, #12]
   8bafe:	1c42      	adds	r2, r0, #1
   8bb00:	bf0e      	itee	eq
   8bb02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bb06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bb0a:	6520      	strne	r0, [r4, #80]	; 0x50
   8bb0c:	81a3      	strh	r3, [r4, #12]
   8bb0e:	bd10      	pop	{r4, pc}

0008bb10 <__sclose>:
   8bb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb14:	f000 b9aa 	b.w	8be6c <_close_r>

0008bb18 <__ssprint_r>:
   8bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb1c:	6893      	ldr	r3, [r2, #8]
   8bb1e:	4691      	mov	r9, r2
   8bb20:	b083      	sub	sp, #12
   8bb22:	2b00      	cmp	r3, #0
   8bb24:	d06d      	beq.n	8bc02 <__ssprint_r+0xea>
   8bb26:	6817      	ldr	r7, [r2, #0]
   8bb28:	4680      	mov	r8, r0
   8bb2a:	460c      	mov	r4, r1
   8bb2c:	6808      	ldr	r0, [r1, #0]
   8bb2e:	688d      	ldr	r5, [r1, #8]
   8bb30:	3708      	adds	r7, #8
   8bb32:	e043      	b.n	8bbbc <__ssprint_r+0xa4>
   8bb34:	89a3      	ldrh	r3, [r4, #12]
   8bb36:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bb3a:	d02e      	beq.n	8bb9a <__ssprint_r+0x82>
   8bb3c:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8bb40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bb44:	eba0 0a01 	sub.w	sl, r0, r1
   8bb48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bb4c:	eb0a 0006 	add.w	r0, sl, r6
   8bb50:	106d      	asrs	r5, r5, #1
   8bb52:	3001      	adds	r0, #1
   8bb54:	42a8      	cmp	r0, r5
   8bb56:	462a      	mov	r2, r5
   8bb58:	bf84      	itt	hi
   8bb5a:	4605      	movhi	r5, r0
   8bb5c:	462a      	movhi	r2, r5
   8bb5e:	055b      	lsls	r3, r3, #21
   8bb60:	d536      	bpl.n	8bbd0 <__ssprint_r+0xb8>
   8bb62:	4611      	mov	r1, r2
   8bb64:	4640      	mov	r0, r8
   8bb66:	f7fe fe61 	bl	8a82c <_malloc_r>
   8bb6a:	2800      	cmp	r0, #0
   8bb6c:	d03a      	beq.n	8bbe4 <__ssprint_r+0xcc>
   8bb6e:	4652      	mov	r2, sl
   8bb70:	6921      	ldr	r1, [r4, #16]
   8bb72:	9001      	str	r0, [sp, #4]
   8bb74:	f7fa f9c4 	bl	85f00 <memcpy>
   8bb78:	89a2      	ldrh	r2, [r4, #12]
   8bb7a:	9b01      	ldr	r3, [sp, #4]
   8bb7c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bb80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bb84:	81a2      	strh	r2, [r4, #12]
   8bb86:	eba5 020a 	sub.w	r2, r5, sl
   8bb8a:	eb03 000a 	add.w	r0, r3, sl
   8bb8e:	6165      	str	r5, [r4, #20]
   8bb90:	46b2      	mov	sl, r6
   8bb92:	4635      	mov	r5, r6
   8bb94:	6123      	str	r3, [r4, #16]
   8bb96:	6020      	str	r0, [r4, #0]
   8bb98:	60a2      	str	r2, [r4, #8]
   8bb9a:	4659      	mov	r1, fp
   8bb9c:	4652      	mov	r2, sl
   8bb9e:	f7ff f949 	bl	8ae34 <memmove>
   8bba2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8bba6:	68a1      	ldr	r1, [r4, #8]
   8bba8:	6820      	ldr	r0, [r4, #0]
   8bbaa:	1b4d      	subs	r5, r1, r5
   8bbac:	4450      	add	r0, sl
   8bbae:	1b9e      	subs	r6, r3, r6
   8bbb0:	60a5      	str	r5, [r4, #8]
   8bbb2:	6020      	str	r0, [r4, #0]
   8bbb4:	f8c9 6008 	str.w	r6, [r9, #8]
   8bbb8:	b31e      	cbz	r6, 8bc02 <__ssprint_r+0xea>
   8bbba:	3708      	adds	r7, #8
   8bbbc:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8bbc0:	2e00      	cmp	r6, #0
   8bbc2:	d0fa      	beq.n	8bbba <__ssprint_r+0xa2>
   8bbc4:	42b5      	cmp	r5, r6
   8bbc6:	46aa      	mov	sl, r5
   8bbc8:	d9b4      	bls.n	8bb34 <__ssprint_r+0x1c>
   8bbca:	4635      	mov	r5, r6
   8bbcc:	46b2      	mov	sl, r6
   8bbce:	e7e4      	b.n	8bb9a <__ssprint_r+0x82>
   8bbd0:	4640      	mov	r0, r8
   8bbd2:	f7ff fd21 	bl	8b618 <_realloc_r>
   8bbd6:	4603      	mov	r3, r0
   8bbd8:	2800      	cmp	r0, #0
   8bbda:	d1d4      	bne.n	8bb86 <__ssprint_r+0x6e>
   8bbdc:	4640      	mov	r0, r8
   8bbde:	6921      	ldr	r1, [r4, #16]
   8bbe0:	f7fe faf2 	bl	8a1c8 <_free_r>
   8bbe4:	230c      	movs	r3, #12
   8bbe6:	2200      	movs	r2, #0
   8bbe8:	f04f 30ff 	mov.w	r0, #4294967295
   8bbec:	f8c8 3000 	str.w	r3, [r8]
   8bbf0:	89a3      	ldrh	r3, [r4, #12]
   8bbf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bbf6:	81a3      	strh	r3, [r4, #12]
   8bbf8:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8bbfc:	b003      	add	sp, #12
   8bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc02:	2000      	movs	r0, #0
   8bc04:	f8c9 0004 	str.w	r0, [r9, #4]
   8bc08:	b003      	add	sp, #12
   8bc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc0e:	bf00      	nop

0008bc10 <__swbuf_r>:
   8bc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc12:	460d      	mov	r5, r1
   8bc14:	4614      	mov	r4, r2
   8bc16:	4606      	mov	r6, r0
   8bc18:	b110      	cbz	r0, 8bc20 <__swbuf_r+0x10>
   8bc1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bc1c:	2b00      	cmp	r3, #0
   8bc1e:	d043      	beq.n	8bca8 <__swbuf_r+0x98>
   8bc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc24:	69a3      	ldr	r3, [r4, #24]
   8bc26:	0717      	lsls	r7, r2, #28
   8bc28:	60a3      	str	r3, [r4, #8]
   8bc2a:	b290      	uxth	r0, r2
   8bc2c:	d51b      	bpl.n	8bc66 <__swbuf_r+0x56>
   8bc2e:	6923      	ldr	r3, [r4, #16]
   8bc30:	b1cb      	cbz	r3, 8bc66 <__swbuf_r+0x56>
   8bc32:	b2ed      	uxtb	r5, r5
   8bc34:	0481      	lsls	r1, r0, #18
   8bc36:	462f      	mov	r7, r5
   8bc38:	d522      	bpl.n	8bc80 <__swbuf_r+0x70>
   8bc3a:	6822      	ldr	r2, [r4, #0]
   8bc3c:	6961      	ldr	r1, [r4, #20]
   8bc3e:	1ad3      	subs	r3, r2, r3
   8bc40:	4299      	cmp	r1, r3
   8bc42:	dd29      	ble.n	8bc98 <__swbuf_r+0x88>
   8bc44:	3301      	adds	r3, #1
   8bc46:	68a1      	ldr	r1, [r4, #8]
   8bc48:	1c50      	adds	r0, r2, #1
   8bc4a:	3901      	subs	r1, #1
   8bc4c:	60a1      	str	r1, [r4, #8]
   8bc4e:	6020      	str	r0, [r4, #0]
   8bc50:	7015      	strb	r5, [r2, #0]
   8bc52:	6962      	ldr	r2, [r4, #20]
   8bc54:	429a      	cmp	r2, r3
   8bc56:	d02a      	beq.n	8bcae <__swbuf_r+0x9e>
   8bc58:	89a3      	ldrh	r3, [r4, #12]
   8bc5a:	07db      	lsls	r3, r3, #31
   8bc5c:	d501      	bpl.n	8bc62 <__swbuf_r+0x52>
   8bc5e:	2d0a      	cmp	r5, #10
   8bc60:	d025      	beq.n	8bcae <__swbuf_r+0x9e>
   8bc62:	4638      	mov	r0, r7
   8bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc66:	4621      	mov	r1, r4
   8bc68:	4630      	mov	r0, r6
   8bc6a:	f7fd f829 	bl	88cc0 <__swsetup_r>
   8bc6e:	bb20      	cbnz	r0, 8bcba <__swbuf_r+0xaa>
   8bc70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc74:	b2ed      	uxtb	r5, r5
   8bc76:	b290      	uxth	r0, r2
   8bc78:	0481      	lsls	r1, r0, #18
   8bc7a:	462f      	mov	r7, r5
   8bc7c:	6923      	ldr	r3, [r4, #16]
   8bc7e:	d4dc      	bmi.n	8bc3a <__swbuf_r+0x2a>
   8bc80:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8bc82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bc86:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8bc8a:	81a2      	strh	r2, [r4, #12]
   8bc8c:	6822      	ldr	r2, [r4, #0]
   8bc8e:	6661      	str	r1, [r4, #100]	; 0x64
   8bc90:	6961      	ldr	r1, [r4, #20]
   8bc92:	1ad3      	subs	r3, r2, r3
   8bc94:	4299      	cmp	r1, r3
   8bc96:	dcd5      	bgt.n	8bc44 <__swbuf_r+0x34>
   8bc98:	4621      	mov	r1, r4
   8bc9a:	4630      	mov	r0, r6
   8bc9c:	f7fe f914 	bl	89ec8 <_fflush_r>
   8bca0:	b958      	cbnz	r0, 8bcba <__swbuf_r+0xaa>
   8bca2:	2301      	movs	r3, #1
   8bca4:	6822      	ldr	r2, [r4, #0]
   8bca6:	e7ce      	b.n	8bc46 <__swbuf_r+0x36>
   8bca8:	f7fe f96a 	bl	89f80 <__sinit>
   8bcac:	e7b8      	b.n	8bc20 <__swbuf_r+0x10>
   8bcae:	4621      	mov	r1, r4
   8bcb0:	4630      	mov	r0, r6
   8bcb2:	f7fe f909 	bl	89ec8 <_fflush_r>
   8bcb6:	2800      	cmp	r0, #0
   8bcb8:	d0d3      	beq.n	8bc62 <__swbuf_r+0x52>
   8bcba:	f04f 37ff 	mov.w	r7, #4294967295
   8bcbe:	e7d0      	b.n	8bc62 <__swbuf_r+0x52>

0008bcc0 <_wcrtomb_r>:
   8bcc0:	b570      	push	{r4, r5, r6, lr}
   8bcc2:	4606      	mov	r6, r0
   8bcc4:	461d      	mov	r5, r3
   8bcc6:	b084      	sub	sp, #16
   8bcc8:	b139      	cbz	r1, 8bcda <_wcrtomb_r+0x1a>
   8bcca:	4c0b      	ldr	r4, [pc, #44]	; (8bcf8 <_wcrtomb_r+0x38>)
   8bccc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bcd0:	47a0      	blx	r4
   8bcd2:	1c43      	adds	r3, r0, #1
   8bcd4:	d00a      	beq.n	8bcec <_wcrtomb_r+0x2c>
   8bcd6:	b004      	add	sp, #16
   8bcd8:	bd70      	pop	{r4, r5, r6, pc}
   8bcda:	460c      	mov	r4, r1
   8bcdc:	4906      	ldr	r1, [pc, #24]	; (8bcf8 <_wcrtomb_r+0x38>)
   8bcde:	4622      	mov	r2, r4
   8bce0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8bce4:	a901      	add	r1, sp, #4
   8bce6:	47a0      	blx	r4
   8bce8:	1c43      	adds	r3, r0, #1
   8bcea:	d1f4      	bne.n	8bcd6 <_wcrtomb_r+0x16>
   8bcec:	2200      	movs	r2, #0
   8bcee:	238a      	movs	r3, #138	; 0x8a
   8bcf0:	602a      	str	r2, [r5, #0]
   8bcf2:	6033      	str	r3, [r6, #0]
   8bcf4:	b004      	add	sp, #16
   8bcf6:	bd70      	pop	{r4, r5, r6, pc}
   8bcf8:	20000ddc 	.word	0x20000ddc

0008bcfc <__ascii_wctomb>:
   8bcfc:	4603      	mov	r3, r0
   8bcfe:	b149      	cbz	r1, 8bd14 <__ascii_wctomb+0x18>
   8bd00:	2aff      	cmp	r2, #255	; 0xff
   8bd02:	d802      	bhi.n	8bd0a <__ascii_wctomb+0xe>
   8bd04:	2001      	movs	r0, #1
   8bd06:	700a      	strb	r2, [r1, #0]
   8bd08:	4770      	bx	lr
   8bd0a:	228a      	movs	r2, #138	; 0x8a
   8bd0c:	f04f 30ff 	mov.w	r0, #4294967295
   8bd10:	601a      	str	r2, [r3, #0]
   8bd12:	4770      	bx	lr
   8bd14:	4608      	mov	r0, r1
   8bd16:	4770      	bx	lr

0008bd18 <_write_r>:
   8bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bd1a:	460f      	mov	r7, r1
   8bd1c:	2600      	movs	r6, #0
   8bd1e:	4d08      	ldr	r5, [pc, #32]	; (8bd40 <_write_r+0x28>)
   8bd20:	4611      	mov	r1, r2
   8bd22:	4604      	mov	r4, r0
   8bd24:	461a      	mov	r2, r3
   8bd26:	4638      	mov	r0, r7
   8bd28:	602e      	str	r6, [r5, #0]
   8bd2a:	f7f7 fe01 	bl	83930 <_write>
   8bd2e:	1c43      	adds	r3, r0, #1
   8bd30:	d000      	beq.n	8bd34 <_write_r+0x1c>
   8bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bd34:	682b      	ldr	r3, [r5, #0]
   8bd36:	2b00      	cmp	r3, #0
   8bd38:	d0fb      	beq.n	8bd32 <_write_r+0x1a>
   8bd3a:	6023      	str	r3, [r4, #0]
   8bd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bd3e:	bf00      	nop
   8bd40:	200026d8 	.word	0x200026d8

0008bd44 <__register_exitproc>:
   8bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bd48:	f8df a080 	ldr.w	sl, [pc, #128]	; 8bdcc <__register_exitproc+0x88>
   8bd4c:	4606      	mov	r6, r0
   8bd4e:	f8da 0000 	ldr.w	r0, [sl]
   8bd52:	4698      	mov	r8, r3
   8bd54:	460f      	mov	r7, r1
   8bd56:	4691      	mov	r9, r2
   8bd58:	f7fe fce4 	bl	8a724 <__retarget_lock_acquire_recursive>
   8bd5c:	4b1a      	ldr	r3, [pc, #104]	; (8bdc8 <__register_exitproc+0x84>)
   8bd5e:	681b      	ldr	r3, [r3, #0]
   8bd60:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8bd64:	b324      	cbz	r4, 8bdb0 <__register_exitproc+0x6c>
   8bd66:	6865      	ldr	r5, [r4, #4]
   8bd68:	2d1f      	cmp	r5, #31
   8bd6a:	dc26      	bgt.n	8bdba <__register_exitproc+0x76>
   8bd6c:	b95e      	cbnz	r6, 8bd86 <__register_exitproc+0x42>
   8bd6e:	1c6b      	adds	r3, r5, #1
   8bd70:	3502      	adds	r5, #2
   8bd72:	f8da 0000 	ldr.w	r0, [sl]
   8bd76:	6063      	str	r3, [r4, #4]
   8bd78:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8bd7c:	f7fe fcd4 	bl	8a728 <__retarget_lock_release_recursive>
   8bd80:	2000      	movs	r0, #0
   8bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bd86:	2301      	movs	r3, #1
   8bd88:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8bd8c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8bd90:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8bd94:	40ab      	lsls	r3, r5
   8bd96:	431a      	orrs	r2, r3
   8bd98:	2e02      	cmp	r6, #2
   8bd9a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8bd9e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8bda2:	d1e4      	bne.n	8bd6e <__register_exitproc+0x2a>
   8bda4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8bda8:	4313      	orrs	r3, r2
   8bdaa:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8bdae:	e7de      	b.n	8bd6e <__register_exitproc+0x2a>
   8bdb0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8bdb4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8bdb8:	e7d5      	b.n	8bd66 <__register_exitproc+0x22>
   8bdba:	f8da 0000 	ldr.w	r0, [sl]
   8bdbe:	f7fe fcb3 	bl	8a728 <__retarget_lock_release_recursive>
   8bdc2:	f04f 30ff 	mov.w	r0, #4294967295
   8bdc6:	e7dc      	b.n	8bd82 <__register_exitproc+0x3e>
   8bdc8:	0008cbd4 	.word	0x0008cbd4
   8bdcc:	20000dd8 	.word	0x20000dd8

0008bdd0 <__assert_func>:
   8bdd0:	4614      	mov	r4, r2
   8bdd2:	b500      	push	{lr}
   8bdd4:	4d09      	ldr	r5, [pc, #36]	; (8bdfc <__assert_func+0x2c>)
   8bdd6:	461a      	mov	r2, r3
   8bdd8:	4603      	mov	r3, r0
   8bdda:	6828      	ldr	r0, [r5, #0]
   8bddc:	b085      	sub	sp, #20
   8bdde:	68c0      	ldr	r0, [r0, #12]
   8bde0:	b144      	cbz	r4, 8bdf4 <__assert_func+0x24>
   8bde2:	4d07      	ldr	r5, [pc, #28]	; (8be00 <__assert_func+0x30>)
   8bde4:	9100      	str	r1, [sp, #0]
   8bde6:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8bdea:	4906      	ldr	r1, [pc, #24]	; (8be04 <__assert_func+0x34>)
   8bdec:	f000 f8b6 	bl	8bf5c <fiprintf>
   8bdf0:	f000 f91c 	bl	8c02c <abort>
   8bdf4:	4d04      	ldr	r5, [pc, #16]	; (8be08 <__assert_func+0x38>)
   8bdf6:	462c      	mov	r4, r5
   8bdf8:	e7f4      	b.n	8bde4 <__assert_func+0x14>
   8bdfa:	bf00      	nop
   8bdfc:	200009ac 	.word	0x200009ac
   8be00:	0008ce8c 	.word	0x0008ce8c
   8be04:	0008ce9c 	.word	0x0008ce9c
   8be08:	0008cb28 	.word	0x0008cb28

0008be0c <_calloc_r>:
   8be0c:	b510      	push	{r4, lr}
   8be0e:	fb02 f101 	mul.w	r1, r2, r1
   8be12:	f7fe fd0b 	bl	8a82c <_malloc_r>
   8be16:	4604      	mov	r4, r0
   8be18:	b168      	cbz	r0, 8be36 <_calloc_r+0x2a>
   8be1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8be1e:	f022 0203 	bic.w	r2, r2, #3
   8be22:	3a04      	subs	r2, #4
   8be24:	2a24      	cmp	r2, #36	; 0x24
   8be26:	d818      	bhi.n	8be5a <_calloc_r+0x4e>
   8be28:	2a13      	cmp	r2, #19
   8be2a:	d806      	bhi.n	8be3a <_calloc_r+0x2e>
   8be2c:	4602      	mov	r2, r0
   8be2e:	2300      	movs	r3, #0
   8be30:	e9c2 3300 	strd	r3, r3, [r2]
   8be34:	6093      	str	r3, [r2, #8]
   8be36:	4620      	mov	r0, r4
   8be38:	bd10      	pop	{r4, pc}
   8be3a:	2300      	movs	r3, #0
   8be3c:	2a1b      	cmp	r2, #27
   8be3e:	e9c0 3300 	strd	r3, r3, [r0]
   8be42:	d90f      	bls.n	8be64 <_calloc_r+0x58>
   8be44:	2a24      	cmp	r2, #36	; 0x24
   8be46:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8be4a:	bf0a      	itet	eq
   8be4c:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8be50:	f100 0210 	addne.w	r2, r0, #16
   8be54:	f100 0218 	addeq.w	r2, r0, #24
   8be58:	e7e9      	b.n	8be2e <_calloc_r+0x22>
   8be5a:	2100      	movs	r1, #0
   8be5c:	f7fa f8c6 	bl	85fec <memset>
   8be60:	4620      	mov	r0, r4
   8be62:	bd10      	pop	{r4, pc}
   8be64:	f100 0208 	add.w	r2, r0, #8
   8be68:	e7e1      	b.n	8be2e <_calloc_r+0x22>
   8be6a:	bf00      	nop

0008be6c <_close_r>:
   8be6c:	2200      	movs	r2, #0
   8be6e:	b538      	push	{r3, r4, r5, lr}
   8be70:	4d06      	ldr	r5, [pc, #24]	; (8be8c <_close_r+0x20>)
   8be72:	4604      	mov	r4, r0
   8be74:	4608      	mov	r0, r1
   8be76:	602a      	str	r2, [r5, #0]
   8be78:	f7f9 fcea 	bl	85850 <_close>
   8be7c:	1c43      	adds	r3, r0, #1
   8be7e:	d000      	beq.n	8be82 <_close_r+0x16>
   8be80:	bd38      	pop	{r3, r4, r5, pc}
   8be82:	682b      	ldr	r3, [r5, #0]
   8be84:	2b00      	cmp	r3, #0
   8be86:	d0fb      	beq.n	8be80 <_close_r+0x14>
   8be88:	6023      	str	r3, [r4, #0]
   8be8a:	bd38      	pop	{r3, r4, r5, pc}
   8be8c:	200026d8 	.word	0x200026d8

0008be90 <_fclose_r>:
   8be90:	b570      	push	{r4, r5, r6, lr}
   8be92:	2900      	cmp	r1, #0
   8be94:	d04b      	beq.n	8bf2e <_fclose_r+0x9e>
   8be96:	460c      	mov	r4, r1
   8be98:	4605      	mov	r5, r0
   8be9a:	b110      	cbz	r0, 8bea2 <_fclose_r+0x12>
   8be9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8be9e:	2b00      	cmp	r3, #0
   8bea0:	d048      	beq.n	8bf34 <_fclose_r+0xa4>
   8bea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bea4:	07d8      	lsls	r0, r3, #31
   8bea6:	d534      	bpl.n	8bf12 <_fclose_r+0x82>
   8bea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8beac:	2b00      	cmp	r3, #0
   8beae:	d03e      	beq.n	8bf2e <_fclose_r+0x9e>
   8beb0:	4621      	mov	r1, r4
   8beb2:	4628      	mov	r0, r5
   8beb4:	f7fd ff70 	bl	89d98 <__sflush_r>
   8beb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8beba:	4606      	mov	r6, r0
   8bebc:	b133      	cbz	r3, 8becc <_fclose_r+0x3c>
   8bebe:	4628      	mov	r0, r5
   8bec0:	69e1      	ldr	r1, [r4, #28]
   8bec2:	4798      	blx	r3
   8bec4:	2800      	cmp	r0, #0
   8bec6:	bfb8      	it	lt
   8bec8:	f04f 36ff 	movlt.w	r6, #4294967295
   8becc:	89a3      	ldrh	r3, [r4, #12]
   8bece:	061a      	lsls	r2, r3, #24
   8bed0:	d43b      	bmi.n	8bf4a <_fclose_r+0xba>
   8bed2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bed4:	b141      	cbz	r1, 8bee8 <_fclose_r+0x58>
   8bed6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8beda:	4299      	cmp	r1, r3
   8bedc:	d002      	beq.n	8bee4 <_fclose_r+0x54>
   8bede:	4628      	mov	r0, r5
   8bee0:	f7fe f972 	bl	8a1c8 <_free_r>
   8bee4:	2300      	movs	r3, #0
   8bee6:	6323      	str	r3, [r4, #48]	; 0x30
   8bee8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8beea:	b121      	cbz	r1, 8bef6 <_fclose_r+0x66>
   8beec:	4628      	mov	r0, r5
   8beee:	f7fe f96b 	bl	8a1c8 <_free_r>
   8bef2:	2300      	movs	r3, #0
   8bef4:	6463      	str	r3, [r4, #68]	; 0x44
   8bef6:	f7fe f871 	bl	89fdc <__sfp_lock_acquire>
   8befa:	2200      	movs	r2, #0
   8befc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8befe:	81a2      	strh	r2, [r4, #12]
   8bf00:	07db      	lsls	r3, r3, #31
   8bf02:	d527      	bpl.n	8bf54 <_fclose_r+0xc4>
   8bf04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf06:	f7fe fc0b 	bl	8a720 <__retarget_lock_close_recursive>
   8bf0a:	f7fe f86d 	bl	89fe8 <__sfp_lock_release>
   8bf0e:	4630      	mov	r0, r6
   8bf10:	bd70      	pop	{r4, r5, r6, pc}
   8bf12:	89a3      	ldrh	r3, [r4, #12]
   8bf14:	0599      	lsls	r1, r3, #22
   8bf16:	d4cb      	bmi.n	8beb0 <_fclose_r+0x20>
   8bf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf1a:	f7fe fc03 	bl	8a724 <__retarget_lock_acquire_recursive>
   8bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bf22:	2b00      	cmp	r3, #0
   8bf24:	d1c4      	bne.n	8beb0 <_fclose_r+0x20>
   8bf26:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8bf28:	f016 0601 	ands.w	r6, r6, #1
   8bf2c:	d008      	beq.n	8bf40 <_fclose_r+0xb0>
   8bf2e:	2600      	movs	r6, #0
   8bf30:	4630      	mov	r0, r6
   8bf32:	bd70      	pop	{r4, r5, r6, pc}
   8bf34:	f7fe f824 	bl	89f80 <__sinit>
   8bf38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bf3a:	07d8      	lsls	r0, r3, #31
   8bf3c:	d4b4      	bmi.n	8bea8 <_fclose_r+0x18>
   8bf3e:	e7e8      	b.n	8bf12 <_fclose_r+0x82>
   8bf40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf42:	f7fe fbf1 	bl	8a728 <__retarget_lock_release_recursive>
   8bf46:	4630      	mov	r0, r6
   8bf48:	bd70      	pop	{r4, r5, r6, pc}
   8bf4a:	4628      	mov	r0, r5
   8bf4c:	6921      	ldr	r1, [r4, #16]
   8bf4e:	f7fe f93b 	bl	8a1c8 <_free_r>
   8bf52:	e7be      	b.n	8bed2 <_fclose_r+0x42>
   8bf54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bf56:	f7fe fbe7 	bl	8a728 <__retarget_lock_release_recursive>
   8bf5a:	e7d3      	b.n	8bf04 <_fclose_r+0x74>

0008bf5c <fiprintf>:
   8bf5c:	b40e      	push	{r1, r2, r3}
   8bf5e:	b510      	push	{r4, lr}
   8bf60:	b083      	sub	sp, #12
   8bf62:	ab05      	add	r3, sp, #20
   8bf64:	4c06      	ldr	r4, [pc, #24]	; (8bf80 <fiprintf+0x24>)
   8bf66:	f853 2b04 	ldr.w	r2, [r3], #4
   8bf6a:	4601      	mov	r1, r0
   8bf6c:	6820      	ldr	r0, [r4, #0]
   8bf6e:	9301      	str	r3, [sp, #4]
   8bf70:	f7fb ffcc 	bl	87f0c <_vfiprintf_r>
   8bf74:	b003      	add	sp, #12
   8bf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8bf7a:	b003      	add	sp, #12
   8bf7c:	4770      	bx	lr
   8bf7e:	bf00      	nop
   8bf80:	200009ac 	.word	0x200009ac

0008bf84 <_fstat_r>:
   8bf84:	b570      	push	{r4, r5, r6, lr}
   8bf86:	460c      	mov	r4, r1
   8bf88:	4603      	mov	r3, r0
   8bf8a:	2600      	movs	r6, #0
   8bf8c:	4d07      	ldr	r5, [pc, #28]	; (8bfac <_fstat_r+0x28>)
   8bf8e:	4620      	mov	r0, r4
   8bf90:	4611      	mov	r1, r2
   8bf92:	461c      	mov	r4, r3
   8bf94:	602e      	str	r6, [r5, #0]
   8bf96:	f7f9 fc5e 	bl	85856 <_fstat>
   8bf9a:	1c43      	adds	r3, r0, #1
   8bf9c:	d000      	beq.n	8bfa0 <_fstat_r+0x1c>
   8bf9e:	bd70      	pop	{r4, r5, r6, pc}
   8bfa0:	682b      	ldr	r3, [r5, #0]
   8bfa2:	2b00      	cmp	r3, #0
   8bfa4:	d0fb      	beq.n	8bf9e <_fstat_r+0x1a>
   8bfa6:	6023      	str	r3, [r4, #0]
   8bfa8:	bd70      	pop	{r4, r5, r6, pc}
   8bfaa:	bf00      	nop
   8bfac:	200026d8 	.word	0x200026d8

0008bfb0 <_isatty_r>:
   8bfb0:	2200      	movs	r2, #0
   8bfb2:	b538      	push	{r3, r4, r5, lr}
   8bfb4:	4d06      	ldr	r5, [pc, #24]	; (8bfd0 <_isatty_r+0x20>)
   8bfb6:	4604      	mov	r4, r0
   8bfb8:	4608      	mov	r0, r1
   8bfba:	602a      	str	r2, [r5, #0]
   8bfbc:	f7f9 fc50 	bl	85860 <_isatty>
   8bfc0:	1c43      	adds	r3, r0, #1
   8bfc2:	d000      	beq.n	8bfc6 <_isatty_r+0x16>
   8bfc4:	bd38      	pop	{r3, r4, r5, pc}
   8bfc6:	682b      	ldr	r3, [r5, #0]
   8bfc8:	2b00      	cmp	r3, #0
   8bfca:	d0fb      	beq.n	8bfc4 <_isatty_r+0x14>
   8bfcc:	6023      	str	r3, [r4, #0]
   8bfce:	bd38      	pop	{r3, r4, r5, pc}
   8bfd0:	200026d8 	.word	0x200026d8

0008bfd4 <_lseek_r>:
   8bfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bfd6:	460f      	mov	r7, r1
   8bfd8:	2600      	movs	r6, #0
   8bfda:	4d08      	ldr	r5, [pc, #32]	; (8bffc <_lseek_r+0x28>)
   8bfdc:	4611      	mov	r1, r2
   8bfde:	4604      	mov	r4, r0
   8bfe0:	461a      	mov	r2, r3
   8bfe2:	4638      	mov	r0, r7
   8bfe4:	602e      	str	r6, [r5, #0]
   8bfe6:	f7f9 fc3d 	bl	85864 <_lseek>
   8bfea:	1c43      	adds	r3, r0, #1
   8bfec:	d000      	beq.n	8bff0 <_lseek_r+0x1c>
   8bfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bff0:	682b      	ldr	r3, [r5, #0]
   8bff2:	2b00      	cmp	r3, #0
   8bff4:	d0fb      	beq.n	8bfee <_lseek_r+0x1a>
   8bff6:	6023      	str	r3, [r4, #0]
   8bff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bffa:	bf00      	nop
   8bffc:	200026d8 	.word	0x200026d8

0008c000 <_read_r>:
   8c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c002:	460f      	mov	r7, r1
   8c004:	2600      	movs	r6, #0
   8c006:	4d08      	ldr	r5, [pc, #32]	; (8c028 <_read_r+0x28>)
   8c008:	4611      	mov	r1, r2
   8c00a:	4604      	mov	r4, r0
   8c00c:	461a      	mov	r2, r3
   8c00e:	4638      	mov	r0, r7
   8c010:	602e      	str	r6, [r5, #0]
   8c012:	f7f7 fc6f 	bl	838f4 <_read>
   8c016:	1c43      	adds	r3, r0, #1
   8c018:	d000      	beq.n	8c01c <_read_r+0x1c>
   8c01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c01c:	682b      	ldr	r3, [r5, #0]
   8c01e:	2b00      	cmp	r3, #0
   8c020:	d0fb      	beq.n	8c01a <_read_r+0x1a>
   8c022:	6023      	str	r3, [r4, #0]
   8c024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c026:	bf00      	nop
   8c028:	200026d8 	.word	0x200026d8

0008c02c <abort>:
   8c02c:	2006      	movs	r0, #6
   8c02e:	b508      	push	{r3, lr}
   8c030:	f000 f830 	bl	8c094 <raise>
   8c034:	2001      	movs	r0, #1
   8c036:	f7f9 fc17 	bl	85868 <_exit>
   8c03a:	bf00      	nop

0008c03c <_raise_r>:
   8c03c:	291f      	cmp	r1, #31
   8c03e:	b538      	push	{r3, r4, r5, lr}
   8c040:	4605      	mov	r5, r0
   8c042:	d821      	bhi.n	8c088 <_raise_r+0x4c>
   8c044:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c048:	460c      	mov	r4, r1
   8c04a:	b16a      	cbz	r2, 8c068 <_raise_r+0x2c>
   8c04c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c050:	b153      	cbz	r3, 8c068 <_raise_r+0x2c>
   8c052:	2b01      	cmp	r3, #1
   8c054:	d016      	beq.n	8c084 <_raise_r+0x48>
   8c056:	1c59      	adds	r1, r3, #1
   8c058:	d010      	beq.n	8c07c <_raise_r+0x40>
   8c05a:	2500      	movs	r5, #0
   8c05c:	4620      	mov	r0, r4
   8c05e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c062:	4798      	blx	r3
   8c064:	4628      	mov	r0, r5
   8c066:	bd38      	pop	{r3, r4, r5, pc}
   8c068:	4628      	mov	r0, r5
   8c06a:	f000 f831 	bl	8c0d0 <_getpid_r>
   8c06e:	4622      	mov	r2, r4
   8c070:	4601      	mov	r1, r0
   8c072:	4628      	mov	r0, r5
   8c074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c078:	f000 b814 	b.w	8c0a4 <_kill_r>
   8c07c:	2316      	movs	r3, #22
   8c07e:	2001      	movs	r0, #1
   8c080:	602b      	str	r3, [r5, #0]
   8c082:	bd38      	pop	{r3, r4, r5, pc}
   8c084:	2000      	movs	r0, #0
   8c086:	bd38      	pop	{r3, r4, r5, pc}
   8c088:	2316      	movs	r3, #22
   8c08a:	f04f 30ff 	mov.w	r0, #4294967295
   8c08e:	602b      	str	r3, [r5, #0]
   8c090:	bd38      	pop	{r3, r4, r5, pc}
   8c092:	bf00      	nop

0008c094 <raise>:
   8c094:	4b02      	ldr	r3, [pc, #8]	; (8c0a0 <raise+0xc>)
   8c096:	4601      	mov	r1, r0
   8c098:	6818      	ldr	r0, [r3, #0]
   8c09a:	f7ff bfcf 	b.w	8c03c <_raise_r>
   8c09e:	bf00      	nop
   8c0a0:	200009ac 	.word	0x200009ac

0008c0a4 <_kill_r>:
   8c0a4:	b570      	push	{r4, r5, r6, lr}
   8c0a6:	460c      	mov	r4, r1
   8c0a8:	4603      	mov	r3, r0
   8c0aa:	2600      	movs	r6, #0
   8c0ac:	4d07      	ldr	r5, [pc, #28]	; (8c0cc <_kill_r+0x28>)
   8c0ae:	4620      	mov	r0, r4
   8c0b0:	4611      	mov	r1, r2
   8c0b2:	461c      	mov	r4, r3
   8c0b4:	602e      	str	r6, [r5, #0]
   8c0b6:	f7f9 fbe1 	bl	8587c <_kill>
   8c0ba:	1c43      	adds	r3, r0, #1
   8c0bc:	d000      	beq.n	8c0c0 <_kill_r+0x1c>
   8c0be:	bd70      	pop	{r4, r5, r6, pc}
   8c0c0:	682b      	ldr	r3, [r5, #0]
   8c0c2:	2b00      	cmp	r3, #0
   8c0c4:	d0fb      	beq.n	8c0be <_kill_r+0x1a>
   8c0c6:	6023      	str	r3, [r4, #0]
   8c0c8:	bd70      	pop	{r4, r5, r6, pc}
   8c0ca:	bf00      	nop
   8c0cc:	200026d8 	.word	0x200026d8

0008c0d0 <_getpid_r>:
   8c0d0:	f7f9 bbd5 	b.w	8587e <_getpid>

0008c0d4 <__aeabi_drsub>:
   8c0d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c0d8:	e002      	b.n	8c0e0 <__adddf3>
   8c0da:	bf00      	nop

0008c0dc <__aeabi_dsub>:
   8c0dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c0e0 <__adddf3>:
   8c0e0:	b530      	push	{r4, r5, lr}
   8c0e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c0e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c0ea:	ea94 0f05 	teq	r4, r5
   8c0ee:	bf08      	it	eq
   8c0f0:	ea90 0f02 	teqeq	r0, r2
   8c0f4:	bf1f      	itttt	ne
   8c0f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c0fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c0fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c102:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c106:	f000 80e2 	beq.w	8c2ce <__adddf3+0x1ee>
   8c10a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c10e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c112:	bfb8      	it	lt
   8c114:	426d      	neglt	r5, r5
   8c116:	dd0c      	ble.n	8c132 <__adddf3+0x52>
   8c118:	442c      	add	r4, r5
   8c11a:	ea80 0202 	eor.w	r2, r0, r2
   8c11e:	ea81 0303 	eor.w	r3, r1, r3
   8c122:	ea82 0000 	eor.w	r0, r2, r0
   8c126:	ea83 0101 	eor.w	r1, r3, r1
   8c12a:	ea80 0202 	eor.w	r2, r0, r2
   8c12e:	ea81 0303 	eor.w	r3, r1, r3
   8c132:	2d36      	cmp	r5, #54	; 0x36
   8c134:	bf88      	it	hi
   8c136:	bd30      	pophi	{r4, r5, pc}
   8c138:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c13c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c140:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c144:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c148:	d002      	beq.n	8c150 <__adddf3+0x70>
   8c14a:	4240      	negs	r0, r0
   8c14c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c150:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c154:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c158:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c15c:	d002      	beq.n	8c164 <__adddf3+0x84>
   8c15e:	4252      	negs	r2, r2
   8c160:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c164:	ea94 0f05 	teq	r4, r5
   8c168:	f000 80a7 	beq.w	8c2ba <__adddf3+0x1da>
   8c16c:	f1a4 0401 	sub.w	r4, r4, #1
   8c170:	f1d5 0e20 	rsbs	lr, r5, #32
   8c174:	db0d      	blt.n	8c192 <__adddf3+0xb2>
   8c176:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c17a:	fa22 f205 	lsr.w	r2, r2, r5
   8c17e:	1880      	adds	r0, r0, r2
   8c180:	f141 0100 	adc.w	r1, r1, #0
   8c184:	fa03 f20e 	lsl.w	r2, r3, lr
   8c188:	1880      	adds	r0, r0, r2
   8c18a:	fa43 f305 	asr.w	r3, r3, r5
   8c18e:	4159      	adcs	r1, r3
   8c190:	e00e      	b.n	8c1b0 <__adddf3+0xd0>
   8c192:	f1a5 0520 	sub.w	r5, r5, #32
   8c196:	f10e 0e20 	add.w	lr, lr, #32
   8c19a:	2a01      	cmp	r2, #1
   8c19c:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c1a0:	bf28      	it	cs
   8c1a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c1a6:	fa43 f305 	asr.w	r3, r3, r5
   8c1aa:	18c0      	adds	r0, r0, r3
   8c1ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c1b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c1b4:	d507      	bpl.n	8c1c6 <__adddf3+0xe6>
   8c1b6:	f04f 0e00 	mov.w	lr, #0
   8c1ba:	f1dc 0c00 	rsbs	ip, ip, #0
   8c1be:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c1c2:	eb6e 0101 	sbc.w	r1, lr, r1
   8c1c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c1ca:	d31b      	bcc.n	8c204 <__adddf3+0x124>
   8c1cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c1d0:	d30c      	bcc.n	8c1ec <__adddf3+0x10c>
   8c1d2:	0849      	lsrs	r1, r1, #1
   8c1d4:	ea5f 0030 	movs.w	r0, r0, rrx
   8c1d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c1dc:	f104 0401 	add.w	r4, r4, #1
   8c1e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c1e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c1e8:	f080 809a 	bcs.w	8c320 <__adddf3+0x240>
   8c1ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c1f0:	bf08      	it	eq
   8c1f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c1f6:	f150 0000 	adcs.w	r0, r0, #0
   8c1fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c1fe:	ea41 0105 	orr.w	r1, r1, r5
   8c202:	bd30      	pop	{r4, r5, pc}
   8c204:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c208:	4140      	adcs	r0, r0
   8c20a:	eb41 0101 	adc.w	r1, r1, r1
   8c20e:	3c01      	subs	r4, #1
   8c210:	bf28      	it	cs
   8c212:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c216:	d2e9      	bcs.n	8c1ec <__adddf3+0x10c>
   8c218:	f091 0f00 	teq	r1, #0
   8c21c:	bf04      	itt	eq
   8c21e:	4601      	moveq	r1, r0
   8c220:	2000      	moveq	r0, #0
   8c222:	fab1 f381 	clz	r3, r1
   8c226:	bf08      	it	eq
   8c228:	3320      	addeq	r3, #32
   8c22a:	f1a3 030b 	sub.w	r3, r3, #11
   8c22e:	f1b3 0220 	subs.w	r2, r3, #32
   8c232:	da0c      	bge.n	8c24e <__adddf3+0x16e>
   8c234:	320c      	adds	r2, #12
   8c236:	dd08      	ble.n	8c24a <__adddf3+0x16a>
   8c238:	f102 0c14 	add.w	ip, r2, #20
   8c23c:	f1c2 020c 	rsb	r2, r2, #12
   8c240:	fa01 f00c 	lsl.w	r0, r1, ip
   8c244:	fa21 f102 	lsr.w	r1, r1, r2
   8c248:	e00c      	b.n	8c264 <__adddf3+0x184>
   8c24a:	f102 0214 	add.w	r2, r2, #20
   8c24e:	bfd8      	it	le
   8c250:	f1c2 0c20 	rsble	ip, r2, #32
   8c254:	fa01 f102 	lsl.w	r1, r1, r2
   8c258:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c25c:	bfdc      	itt	le
   8c25e:	ea41 010c 	orrle.w	r1, r1, ip
   8c262:	4090      	lslle	r0, r2
   8c264:	1ae4      	subs	r4, r4, r3
   8c266:	bfa2      	ittt	ge
   8c268:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c26c:	4329      	orrge	r1, r5
   8c26e:	bd30      	popge	{r4, r5, pc}
   8c270:	ea6f 0404 	mvn.w	r4, r4
   8c274:	3c1f      	subs	r4, #31
   8c276:	da1c      	bge.n	8c2b2 <__adddf3+0x1d2>
   8c278:	340c      	adds	r4, #12
   8c27a:	dc0e      	bgt.n	8c29a <__adddf3+0x1ba>
   8c27c:	f104 0414 	add.w	r4, r4, #20
   8c280:	f1c4 0220 	rsb	r2, r4, #32
   8c284:	fa20 f004 	lsr.w	r0, r0, r4
   8c288:	fa01 f302 	lsl.w	r3, r1, r2
   8c28c:	ea40 0003 	orr.w	r0, r0, r3
   8c290:	fa21 f304 	lsr.w	r3, r1, r4
   8c294:	ea45 0103 	orr.w	r1, r5, r3
   8c298:	bd30      	pop	{r4, r5, pc}
   8c29a:	f1c4 040c 	rsb	r4, r4, #12
   8c29e:	f1c4 0220 	rsb	r2, r4, #32
   8c2a2:	fa20 f002 	lsr.w	r0, r0, r2
   8c2a6:	fa01 f304 	lsl.w	r3, r1, r4
   8c2aa:	ea40 0003 	orr.w	r0, r0, r3
   8c2ae:	4629      	mov	r1, r5
   8c2b0:	bd30      	pop	{r4, r5, pc}
   8c2b2:	fa21 f004 	lsr.w	r0, r1, r4
   8c2b6:	4629      	mov	r1, r5
   8c2b8:	bd30      	pop	{r4, r5, pc}
   8c2ba:	f094 0f00 	teq	r4, #0
   8c2be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c2c2:	bf06      	itte	eq
   8c2c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c2c8:	3401      	addeq	r4, #1
   8c2ca:	3d01      	subne	r5, #1
   8c2cc:	e74e      	b.n	8c16c <__adddf3+0x8c>
   8c2ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c2d2:	bf18      	it	ne
   8c2d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c2d8:	d029      	beq.n	8c32e <__adddf3+0x24e>
   8c2da:	ea94 0f05 	teq	r4, r5
   8c2de:	bf08      	it	eq
   8c2e0:	ea90 0f02 	teqeq	r0, r2
   8c2e4:	d005      	beq.n	8c2f2 <__adddf3+0x212>
   8c2e6:	ea54 0c00 	orrs.w	ip, r4, r0
   8c2ea:	bf04      	itt	eq
   8c2ec:	4619      	moveq	r1, r3
   8c2ee:	4610      	moveq	r0, r2
   8c2f0:	bd30      	pop	{r4, r5, pc}
   8c2f2:	ea91 0f03 	teq	r1, r3
   8c2f6:	bf1e      	ittt	ne
   8c2f8:	2100      	movne	r1, #0
   8c2fa:	2000      	movne	r0, #0
   8c2fc:	bd30      	popne	{r4, r5, pc}
   8c2fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c302:	d105      	bne.n	8c310 <__adddf3+0x230>
   8c304:	0040      	lsls	r0, r0, #1
   8c306:	4149      	adcs	r1, r1
   8c308:	bf28      	it	cs
   8c30a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c30e:	bd30      	pop	{r4, r5, pc}
   8c310:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c314:	bf3c      	itt	cc
   8c316:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c31a:	bd30      	popcc	{r4, r5, pc}
   8c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c320:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c324:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c328:	f04f 0000 	mov.w	r0, #0
   8c32c:	bd30      	pop	{r4, r5, pc}
   8c32e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c332:	bf1a      	itte	ne
   8c334:	4619      	movne	r1, r3
   8c336:	4610      	movne	r0, r2
   8c338:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c33c:	bf1c      	itt	ne
   8c33e:	460b      	movne	r3, r1
   8c340:	4602      	movne	r2, r0
   8c342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c346:	bf06      	itte	eq
   8c348:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c34c:	ea91 0f03 	teqeq	r1, r3
   8c350:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c354:	bd30      	pop	{r4, r5, pc}
   8c356:	bf00      	nop

0008c358 <__aeabi_ui2d>:
   8c358:	f090 0f00 	teq	r0, #0
   8c35c:	bf04      	itt	eq
   8c35e:	2100      	moveq	r1, #0
   8c360:	4770      	bxeq	lr
   8c362:	b530      	push	{r4, r5, lr}
   8c364:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c368:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c36c:	f04f 0500 	mov.w	r5, #0
   8c370:	f04f 0100 	mov.w	r1, #0
   8c374:	e750      	b.n	8c218 <__adddf3+0x138>
   8c376:	bf00      	nop

0008c378 <__aeabi_i2d>:
   8c378:	f090 0f00 	teq	r0, #0
   8c37c:	bf04      	itt	eq
   8c37e:	2100      	moveq	r1, #0
   8c380:	4770      	bxeq	lr
   8c382:	b530      	push	{r4, r5, lr}
   8c384:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c388:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c38c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c390:	bf48      	it	mi
   8c392:	4240      	negmi	r0, r0
   8c394:	f04f 0100 	mov.w	r1, #0
   8c398:	e73e      	b.n	8c218 <__adddf3+0x138>
   8c39a:	bf00      	nop

0008c39c <__aeabi_f2d>:
   8c39c:	0042      	lsls	r2, r0, #1
   8c39e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c3a2:	ea4f 0131 	mov.w	r1, r1, rrx
   8c3a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c3aa:	bf1f      	itttt	ne
   8c3ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c3b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c3b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c3b8:	4770      	bxne	lr
   8c3ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c3be:	bf08      	it	eq
   8c3c0:	4770      	bxeq	lr
   8c3c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c3c6:	bf04      	itt	eq
   8c3c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c3cc:	4770      	bxeq	lr
   8c3ce:	b530      	push	{r4, r5, lr}
   8c3d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c3d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c3d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c3dc:	e71c      	b.n	8c218 <__adddf3+0x138>
   8c3de:	bf00      	nop

0008c3e0 <__aeabi_ul2d>:
   8c3e0:	ea50 0201 	orrs.w	r2, r0, r1
   8c3e4:	bf08      	it	eq
   8c3e6:	4770      	bxeq	lr
   8c3e8:	b530      	push	{r4, r5, lr}
   8c3ea:	f04f 0500 	mov.w	r5, #0
   8c3ee:	e00a      	b.n	8c406 <__aeabi_l2d+0x16>

0008c3f0 <__aeabi_l2d>:
   8c3f0:	ea50 0201 	orrs.w	r2, r0, r1
   8c3f4:	bf08      	it	eq
   8c3f6:	4770      	bxeq	lr
   8c3f8:	b530      	push	{r4, r5, lr}
   8c3fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c3fe:	d502      	bpl.n	8c406 <__aeabi_l2d+0x16>
   8c400:	4240      	negs	r0, r0
   8c402:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c406:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c40a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c40e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c412:	f43f aed8 	beq.w	8c1c6 <__adddf3+0xe6>
   8c416:	f04f 0203 	mov.w	r2, #3
   8c41a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c41e:	bf18      	it	ne
   8c420:	3203      	addne	r2, #3
   8c422:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c426:	bf18      	it	ne
   8c428:	3203      	addne	r2, #3
   8c42a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c42e:	f1c2 0320 	rsb	r3, r2, #32
   8c432:	fa00 fc03 	lsl.w	ip, r0, r3
   8c436:	fa20 f002 	lsr.w	r0, r0, r2
   8c43a:	fa01 fe03 	lsl.w	lr, r1, r3
   8c43e:	ea40 000e 	orr.w	r0, r0, lr
   8c442:	fa21 f102 	lsr.w	r1, r1, r2
   8c446:	4414      	add	r4, r2
   8c448:	e6bd      	b.n	8c1c6 <__adddf3+0xe6>
   8c44a:	bf00      	nop

0008c44c <__aeabi_dmul>:
   8c44c:	b570      	push	{r4, r5, r6, lr}
   8c44e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c452:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c456:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c45a:	bf1d      	ittte	ne
   8c45c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c460:	ea94 0f0c 	teqne	r4, ip
   8c464:	ea95 0f0c 	teqne	r5, ip
   8c468:	f000 f8de 	bleq	8c628 <__aeabi_dmul+0x1dc>
   8c46c:	442c      	add	r4, r5
   8c46e:	ea81 0603 	eor.w	r6, r1, r3
   8c472:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c476:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c47a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c47e:	bf18      	it	ne
   8c480:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c48c:	d038      	beq.n	8c500 <__aeabi_dmul+0xb4>
   8c48e:	fba0 ce02 	umull	ip, lr, r0, r2
   8c492:	f04f 0500 	mov.w	r5, #0
   8c496:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c49a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c49e:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c4a2:	f04f 0600 	mov.w	r6, #0
   8c4a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c4aa:	f09c 0f00 	teq	ip, #0
   8c4ae:	bf18      	it	ne
   8c4b0:	f04e 0e01 	orrne.w	lr, lr, #1
   8c4b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c4b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c4bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c4c0:	d204      	bcs.n	8c4cc <__aeabi_dmul+0x80>
   8c4c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c4c6:	416d      	adcs	r5, r5
   8c4c8:	eb46 0606 	adc.w	r6, r6, r6
   8c4cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c4d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c4d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c4d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c4dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c4e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c4e4:	bf88      	it	hi
   8c4e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c4ea:	d81e      	bhi.n	8c52a <__aeabi_dmul+0xde>
   8c4ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c4f0:	bf08      	it	eq
   8c4f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c4f6:	f150 0000 	adcs.w	r0, r0, #0
   8c4fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c4fe:	bd70      	pop	{r4, r5, r6, pc}
   8c500:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c504:	ea46 0101 	orr.w	r1, r6, r1
   8c508:	ea40 0002 	orr.w	r0, r0, r2
   8c50c:	ea81 0103 	eor.w	r1, r1, r3
   8c510:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c514:	bfc2      	ittt	gt
   8c516:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c51a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c51e:	bd70      	popgt	{r4, r5, r6, pc}
   8c520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c524:	f04f 0e00 	mov.w	lr, #0
   8c528:	3c01      	subs	r4, #1
   8c52a:	f300 80ab 	bgt.w	8c684 <__aeabi_dmul+0x238>
   8c52e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c532:	bfde      	ittt	le
   8c534:	2000      	movle	r0, #0
   8c536:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c53a:	bd70      	pople	{r4, r5, r6, pc}
   8c53c:	f1c4 0400 	rsb	r4, r4, #0
   8c540:	3c20      	subs	r4, #32
   8c542:	da35      	bge.n	8c5b0 <__aeabi_dmul+0x164>
   8c544:	340c      	adds	r4, #12
   8c546:	dc1b      	bgt.n	8c580 <__aeabi_dmul+0x134>
   8c548:	f104 0414 	add.w	r4, r4, #20
   8c54c:	f1c4 0520 	rsb	r5, r4, #32
   8c550:	fa00 f305 	lsl.w	r3, r0, r5
   8c554:	fa20 f004 	lsr.w	r0, r0, r4
   8c558:	fa01 f205 	lsl.w	r2, r1, r5
   8c55c:	ea40 0002 	orr.w	r0, r0, r2
   8c560:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c568:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c56c:	fa21 f604 	lsr.w	r6, r1, r4
   8c570:	eb42 0106 	adc.w	r1, r2, r6
   8c574:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c578:	bf08      	it	eq
   8c57a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c57e:	bd70      	pop	{r4, r5, r6, pc}
   8c580:	f1c4 040c 	rsb	r4, r4, #12
   8c584:	f1c4 0520 	rsb	r5, r4, #32
   8c588:	fa00 f304 	lsl.w	r3, r0, r4
   8c58c:	fa20 f005 	lsr.w	r0, r0, r5
   8c590:	fa01 f204 	lsl.w	r2, r1, r4
   8c594:	ea40 0002 	orr.w	r0, r0, r2
   8c598:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c59c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c5a0:	f141 0100 	adc.w	r1, r1, #0
   8c5a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c5a8:	bf08      	it	eq
   8c5aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c5ae:	bd70      	pop	{r4, r5, r6, pc}
   8c5b0:	f1c4 0520 	rsb	r5, r4, #32
   8c5b4:	fa00 f205 	lsl.w	r2, r0, r5
   8c5b8:	ea4e 0e02 	orr.w	lr, lr, r2
   8c5bc:	fa20 f304 	lsr.w	r3, r0, r4
   8c5c0:	fa01 f205 	lsl.w	r2, r1, r5
   8c5c4:	ea43 0302 	orr.w	r3, r3, r2
   8c5c8:	fa21 f004 	lsr.w	r0, r1, r4
   8c5cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c5d0:	fa21 f204 	lsr.w	r2, r1, r4
   8c5d4:	ea20 0002 	bic.w	r0, r0, r2
   8c5d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c5dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c5e0:	bf08      	it	eq
   8c5e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c5e6:	bd70      	pop	{r4, r5, r6, pc}
   8c5e8:	f094 0f00 	teq	r4, #0
   8c5ec:	d10f      	bne.n	8c60e <__aeabi_dmul+0x1c2>
   8c5ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c5f2:	0040      	lsls	r0, r0, #1
   8c5f4:	eb41 0101 	adc.w	r1, r1, r1
   8c5f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c5fc:	bf08      	it	eq
   8c5fe:	3c01      	subeq	r4, #1
   8c600:	d0f7      	beq.n	8c5f2 <__aeabi_dmul+0x1a6>
   8c602:	ea41 0106 	orr.w	r1, r1, r6
   8c606:	f095 0f00 	teq	r5, #0
   8c60a:	bf18      	it	ne
   8c60c:	4770      	bxne	lr
   8c60e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c612:	0052      	lsls	r2, r2, #1
   8c614:	eb43 0303 	adc.w	r3, r3, r3
   8c618:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c61c:	bf08      	it	eq
   8c61e:	3d01      	subeq	r5, #1
   8c620:	d0f7      	beq.n	8c612 <__aeabi_dmul+0x1c6>
   8c622:	ea43 0306 	orr.w	r3, r3, r6
   8c626:	4770      	bx	lr
   8c628:	ea94 0f0c 	teq	r4, ip
   8c62c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c630:	bf18      	it	ne
   8c632:	ea95 0f0c 	teqne	r5, ip
   8c636:	d00c      	beq.n	8c652 <__aeabi_dmul+0x206>
   8c638:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c63c:	bf18      	it	ne
   8c63e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c642:	d1d1      	bne.n	8c5e8 <__aeabi_dmul+0x19c>
   8c644:	ea81 0103 	eor.w	r1, r1, r3
   8c648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c64c:	f04f 0000 	mov.w	r0, #0
   8c650:	bd70      	pop	{r4, r5, r6, pc}
   8c652:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c656:	bf06      	itte	eq
   8c658:	4610      	moveq	r0, r2
   8c65a:	4619      	moveq	r1, r3
   8c65c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c660:	d019      	beq.n	8c696 <__aeabi_dmul+0x24a>
   8c662:	ea94 0f0c 	teq	r4, ip
   8c666:	d102      	bne.n	8c66e <__aeabi_dmul+0x222>
   8c668:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c66c:	d113      	bne.n	8c696 <__aeabi_dmul+0x24a>
   8c66e:	ea95 0f0c 	teq	r5, ip
   8c672:	d105      	bne.n	8c680 <__aeabi_dmul+0x234>
   8c674:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c678:	bf1c      	itt	ne
   8c67a:	4610      	movne	r0, r2
   8c67c:	4619      	movne	r1, r3
   8c67e:	d10a      	bne.n	8c696 <__aeabi_dmul+0x24a>
   8c680:	ea81 0103 	eor.w	r1, r1, r3
   8c684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c688:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c68c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c690:	f04f 0000 	mov.w	r0, #0
   8c694:	bd70      	pop	{r4, r5, r6, pc}
   8c696:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c69a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c69e:	bd70      	pop	{r4, r5, r6, pc}

0008c6a0 <__aeabi_ddiv>:
   8c6a0:	b570      	push	{r4, r5, r6, lr}
   8c6a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c6a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c6aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c6ae:	bf1d      	ittte	ne
   8c6b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c6b4:	ea94 0f0c 	teqne	r4, ip
   8c6b8:	ea95 0f0c 	teqne	r5, ip
   8c6bc:	f000 f8a7 	bleq	8c80e <__aeabi_ddiv+0x16e>
   8c6c0:	eba4 0405 	sub.w	r4, r4, r5
   8c6c4:	ea81 0e03 	eor.w	lr, r1, r3
   8c6c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c6cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c6d0:	f000 8088 	beq.w	8c7e4 <__aeabi_ddiv+0x144>
   8c6d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c6d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c6dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c6e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c6e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c6e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c6ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c6f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c6f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c6f8:	429d      	cmp	r5, r3
   8c6fa:	bf08      	it	eq
   8c6fc:	4296      	cmpeq	r6, r2
   8c6fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c702:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c706:	d202      	bcs.n	8c70e <__aeabi_ddiv+0x6e>
   8c708:	085b      	lsrs	r3, r3, #1
   8c70a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c70e:	1ab6      	subs	r6, r6, r2
   8c710:	eb65 0503 	sbc.w	r5, r5, r3
   8c714:	085b      	lsrs	r3, r3, #1
   8c716:	ea4f 0232 	mov.w	r2, r2, rrx
   8c71a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c71e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c722:	ebb6 0e02 	subs.w	lr, r6, r2
   8c726:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c72a:	bf22      	ittt	cs
   8c72c:	1ab6      	subcs	r6, r6, r2
   8c72e:	4675      	movcs	r5, lr
   8c730:	ea40 000c 	orrcs.w	r0, r0, ip
   8c734:	085b      	lsrs	r3, r3, #1
   8c736:	ea4f 0232 	mov.w	r2, r2, rrx
   8c73a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c73e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c742:	bf22      	ittt	cs
   8c744:	1ab6      	subcs	r6, r6, r2
   8c746:	4675      	movcs	r5, lr
   8c748:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c74c:	085b      	lsrs	r3, r3, #1
   8c74e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c752:	ebb6 0e02 	subs.w	lr, r6, r2
   8c756:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c75a:	bf22      	ittt	cs
   8c75c:	1ab6      	subcs	r6, r6, r2
   8c75e:	4675      	movcs	r5, lr
   8c760:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c764:	085b      	lsrs	r3, r3, #1
   8c766:	ea4f 0232 	mov.w	r2, r2, rrx
   8c76a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c76e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c772:	bf22      	ittt	cs
   8c774:	1ab6      	subcs	r6, r6, r2
   8c776:	4675      	movcs	r5, lr
   8c778:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c77c:	ea55 0e06 	orrs.w	lr, r5, r6
   8c780:	d018      	beq.n	8c7b4 <__aeabi_ddiv+0x114>
   8c782:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c786:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c78a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c78e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c792:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c796:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c79a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c79e:	d1c0      	bne.n	8c722 <__aeabi_ddiv+0x82>
   8c7a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c7a4:	d10b      	bne.n	8c7be <__aeabi_ddiv+0x11e>
   8c7a6:	ea41 0100 	orr.w	r1, r1, r0
   8c7aa:	f04f 0000 	mov.w	r0, #0
   8c7ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c7b2:	e7b6      	b.n	8c722 <__aeabi_ddiv+0x82>
   8c7b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c7b8:	bf04      	itt	eq
   8c7ba:	4301      	orreq	r1, r0
   8c7bc:	2000      	moveq	r0, #0
   8c7be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c7c2:	bf88      	it	hi
   8c7c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c7c8:	f63f aeaf 	bhi.w	8c52a <__aeabi_dmul+0xde>
   8c7cc:	ebb5 0c03 	subs.w	ip, r5, r3
   8c7d0:	bf04      	itt	eq
   8c7d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c7d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c7da:	f150 0000 	adcs.w	r0, r0, #0
   8c7de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c7e2:	bd70      	pop	{r4, r5, r6, pc}
   8c7e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c7e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c7ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c7f0:	bfc2      	ittt	gt
   8c7f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c7f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c7fa:	bd70      	popgt	{r4, r5, r6, pc}
   8c7fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c800:	f04f 0e00 	mov.w	lr, #0
   8c804:	3c01      	subs	r4, #1
   8c806:	e690      	b.n	8c52a <__aeabi_dmul+0xde>
   8c808:	ea45 0e06 	orr.w	lr, r5, r6
   8c80c:	e68d      	b.n	8c52a <__aeabi_dmul+0xde>
   8c80e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c812:	ea94 0f0c 	teq	r4, ip
   8c816:	bf08      	it	eq
   8c818:	ea95 0f0c 	teqeq	r5, ip
   8c81c:	f43f af3b 	beq.w	8c696 <__aeabi_dmul+0x24a>
   8c820:	ea94 0f0c 	teq	r4, ip
   8c824:	d10a      	bne.n	8c83c <__aeabi_ddiv+0x19c>
   8c826:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c82a:	f47f af34 	bne.w	8c696 <__aeabi_dmul+0x24a>
   8c82e:	ea95 0f0c 	teq	r5, ip
   8c832:	f47f af25 	bne.w	8c680 <__aeabi_dmul+0x234>
   8c836:	4610      	mov	r0, r2
   8c838:	4619      	mov	r1, r3
   8c83a:	e72c      	b.n	8c696 <__aeabi_dmul+0x24a>
   8c83c:	ea95 0f0c 	teq	r5, ip
   8c840:	d106      	bne.n	8c850 <__aeabi_ddiv+0x1b0>
   8c842:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c846:	f43f aefd 	beq.w	8c644 <__aeabi_dmul+0x1f8>
   8c84a:	4610      	mov	r0, r2
   8c84c:	4619      	mov	r1, r3
   8c84e:	e722      	b.n	8c696 <__aeabi_dmul+0x24a>
   8c850:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c854:	bf18      	it	ne
   8c856:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c85a:	f47f aec5 	bne.w	8c5e8 <__aeabi_dmul+0x19c>
   8c85e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c862:	f47f af0d 	bne.w	8c680 <__aeabi_dmul+0x234>
   8c866:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c86a:	f47f aeeb 	bne.w	8c644 <__aeabi_dmul+0x1f8>
   8c86e:	e712      	b.n	8c696 <__aeabi_dmul+0x24a>

0008c870 <__gedf2>:
   8c870:	f04f 3cff 	mov.w	ip, #4294967295
   8c874:	e006      	b.n	8c884 <__cmpdf2+0x4>
   8c876:	bf00      	nop

0008c878 <__ledf2>:
   8c878:	f04f 0c01 	mov.w	ip, #1
   8c87c:	e002      	b.n	8c884 <__cmpdf2+0x4>
   8c87e:	bf00      	nop

0008c880 <__cmpdf2>:
   8c880:	f04f 0c01 	mov.w	ip, #1
   8c884:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c888:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c88c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c890:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c894:	bf18      	it	ne
   8c896:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c89a:	d01b      	beq.n	8c8d4 <__cmpdf2+0x54>
   8c89c:	b001      	add	sp, #4
   8c89e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c8a2:	bf0c      	ite	eq
   8c8a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c8a8:	ea91 0f03 	teqne	r1, r3
   8c8ac:	bf02      	ittt	eq
   8c8ae:	ea90 0f02 	teqeq	r0, r2
   8c8b2:	2000      	moveq	r0, #0
   8c8b4:	4770      	bxeq	lr
   8c8b6:	f110 0f00 	cmn.w	r0, #0
   8c8ba:	ea91 0f03 	teq	r1, r3
   8c8be:	bf58      	it	pl
   8c8c0:	4299      	cmppl	r1, r3
   8c8c2:	bf08      	it	eq
   8c8c4:	4290      	cmpeq	r0, r2
   8c8c6:	bf2c      	ite	cs
   8c8c8:	17d8      	asrcs	r0, r3, #31
   8c8ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c8ce:	f040 0001 	orr.w	r0, r0, #1
   8c8d2:	4770      	bx	lr
   8c8d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c8d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c8dc:	d102      	bne.n	8c8e4 <__cmpdf2+0x64>
   8c8de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c8e2:	d107      	bne.n	8c8f4 <__cmpdf2+0x74>
   8c8e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c8e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c8ec:	d1d6      	bne.n	8c89c <__cmpdf2+0x1c>
   8c8ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c8f2:	d0d3      	beq.n	8c89c <__cmpdf2+0x1c>
   8c8f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c8f8:	4770      	bx	lr
   8c8fa:	bf00      	nop

0008c8fc <__aeabi_cdrcmple>:
   8c8fc:	4684      	mov	ip, r0
   8c8fe:	4610      	mov	r0, r2
   8c900:	4662      	mov	r2, ip
   8c902:	468c      	mov	ip, r1
   8c904:	4619      	mov	r1, r3
   8c906:	4663      	mov	r3, ip
   8c908:	e000      	b.n	8c90c <__aeabi_cdcmpeq>
   8c90a:	bf00      	nop

0008c90c <__aeabi_cdcmpeq>:
   8c90c:	b501      	push	{r0, lr}
   8c90e:	f7ff ffb7 	bl	8c880 <__cmpdf2>
   8c912:	2800      	cmp	r0, #0
   8c914:	bf48      	it	mi
   8c916:	f110 0f00 	cmnmi.w	r0, #0
   8c91a:	bd01      	pop	{r0, pc}

0008c91c <__aeabi_dcmpeq>:
   8c91c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c920:	f7ff fff4 	bl	8c90c <__aeabi_cdcmpeq>
   8c924:	bf0c      	ite	eq
   8c926:	2001      	moveq	r0, #1
   8c928:	2000      	movne	r0, #0
   8c92a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c92e:	bf00      	nop

0008c930 <__aeabi_dcmplt>:
   8c930:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c934:	f7ff ffea 	bl	8c90c <__aeabi_cdcmpeq>
   8c938:	bf34      	ite	cc
   8c93a:	2001      	movcc	r0, #1
   8c93c:	2000      	movcs	r0, #0
   8c93e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c942:	bf00      	nop

0008c944 <__aeabi_dcmple>:
   8c944:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c948:	f7ff ffe0 	bl	8c90c <__aeabi_cdcmpeq>
   8c94c:	bf94      	ite	ls
   8c94e:	2001      	movls	r0, #1
   8c950:	2000      	movhi	r0, #0
   8c952:	f85d fb08 	ldr.w	pc, [sp], #8
   8c956:	bf00      	nop

0008c958 <__aeabi_dcmpge>:
   8c958:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c95c:	f7ff ffce 	bl	8c8fc <__aeabi_cdrcmple>
   8c960:	bf94      	ite	ls
   8c962:	2001      	movls	r0, #1
   8c964:	2000      	movhi	r0, #0
   8c966:	f85d fb08 	ldr.w	pc, [sp], #8
   8c96a:	bf00      	nop

0008c96c <__aeabi_dcmpgt>:
   8c96c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c970:	f7ff ffc4 	bl	8c8fc <__aeabi_cdrcmple>
   8c974:	bf34      	ite	cc
   8c976:	2001      	movcc	r0, #1
   8c978:	2000      	movcs	r0, #0
   8c97a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c97e:	bf00      	nop

0008c980 <__aeabi_dcmpun>:
   8c980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c988:	d102      	bne.n	8c990 <__aeabi_dcmpun+0x10>
   8c98a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c98e:	d10a      	bne.n	8c9a6 <__aeabi_dcmpun+0x26>
   8c990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c998:	d102      	bne.n	8c9a0 <__aeabi_dcmpun+0x20>
   8c99a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c99e:	d102      	bne.n	8c9a6 <__aeabi_dcmpun+0x26>
   8c9a0:	f04f 0000 	mov.w	r0, #0
   8c9a4:	4770      	bx	lr
   8c9a6:	f04f 0001 	mov.w	r0, #1
   8c9aa:	4770      	bx	lr

0008c9ac <__aeabi_d2iz>:
   8c9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c9b4:	d215      	bcs.n	8c9e2 <__aeabi_d2iz+0x36>
   8c9b6:	d511      	bpl.n	8c9dc <__aeabi_d2iz+0x30>
   8c9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c9c0:	d912      	bls.n	8c9e8 <__aeabi_d2iz+0x3c>
   8c9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c9d2:	fa23 f002 	lsr.w	r0, r3, r2
   8c9d6:	bf18      	it	ne
   8c9d8:	4240      	negne	r0, r0
   8c9da:	4770      	bx	lr
   8c9dc:	f04f 0000 	mov.w	r0, #0
   8c9e0:	4770      	bx	lr
   8c9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c9e6:	d105      	bne.n	8c9f4 <__aeabi_d2iz+0x48>
   8c9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c9ec:	bf08      	it	eq
   8c9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c9f2:	4770      	bx	lr
   8c9f4:	f04f 0000 	mov.w	r0, #0
   8c9f8:	4770      	bx	lr
   8c9fa:	bf00      	nop
   8c9fc:	50525641 	.word	0x50525641
   8ca00:	3a474f52 	.word	0x3a474f52
   8ca04:	79615020 	.word	0x79615020
   8ca08:	64616f6c 	.word	0x64616f6c
   8ca0c:	7a697320 	.word	0x7a697320
   8ca10:	203d2065 	.word	0x203d2065
   8ca14:	202c6425 	.word	0x202c6425
   8ca18:	6f727265 	.word	0x6f727265
   8ca1c:	0a3f2172 	.word	0x0a3f2172
   8ca20:	00000000 	.word	0x00000000
   8ca24:	50525641 	.word	0x50525641
   8ca28:	3a474f52 	.word	0x3a474f52
   8ca2c:	746e4520 	.word	0x746e4520
   8ca30:	49207265 	.word	0x49207265
   8ca34:	4d205053 	.word	0x4d205053
   8ca38:	3a65646f 	.word	0x3a65646f
   8ca3c:	0a782520 	.word	0x0a782520
   8ca40:	00000000 	.word	0x00000000
   8ca44:	50525641 	.word	0x50525641
   8ca48:	3a474f52 	.word	0x3a474f52
   8ca4c:	61724520 	.word	0x61724520
   8ca50:	203a6573 	.word	0x203a6573
   8ca54:	6c796150 	.word	0x6c796150
   8ca58:	2064616f 	.word	0x2064616f
   8ca5c:	657a6973 	.word	0x657a6973
   8ca60:	25203d20 	.word	0x25203d20
   8ca64:	65202c64 	.word	0x65202c64
   8ca68:	726f7272 	.word	0x726f7272
   8ca6c:	000a3f21 	.word	0x000a3f21

0008ca70 <BUILD_DATE>:
   8ca70:	206c754a 32203920 00313230              Jul  9 2021.

0008ca7c <BUILD_TIME>:
   8ca7c:	343a3431 31343a36 00000000 494c5743     14:46:41....CWLI
   8ca8c:	415f4554 53495256 00000050 50525641     TE_AVRISP...AVRP
   8ca9c:	3a474f52 64644120 73736572 25203d20     ROG: Address = %
   8caac:	0a783230 00000000                       02x.....

0008cab4 <BOS_DESC>:
   8cab4:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8cac4:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8cae0:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8caf0:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8cb00:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8cb10:	74697845 20676e69 68746977 61747320     Exiting with sta
   8cb20:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8cb30:	00000000 206c754a 32203920 00313230     ....Jul  9 2021.
   8cb40:	343a3431 31343a36 00000000 70696843     14:46:41....Chip
   8cb50:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8cb60:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8cb70:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8cb80:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8cb90:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8cba0:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8cbb0:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8cbc0:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8cbd0:	000a2e2e                                ....

0008cbd4 <_global_impure_ptr>:
   8cbd4:	200009b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8cbe4:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cbf4:	66656463 00000000 33323130 37363534     cdef....01234567
   8cc04:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8cc14:	0000296c 00000030                       l)..0...

0008cc1c <blanks.7335>:
   8cc1c:	20202020 20202020 20202020 20202020                     

0008cc2c <zeroes.7336>:
   8cc2c:	30303030 30303030 30303030 30303030     0000000000000000

0008cc3c <blanks.7328>:
   8cc3c:	20202020 20202020 20202020 20202020                     

0008cc4c <zeroes.7329>:
   8cc4c:	30303030 30303030 30303030 30303030     0000000000000000
   8cc5c:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8cc6c:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8cc7c:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8cc8c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cc9c:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8ccac:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8ccbc:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8cccc:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8ccdc:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8ccec:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8ccfc:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8cd0c:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8cd1c:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8cd2c:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8cd3c:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8cd4c:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8cd5c:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8cd6c:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8cd7c:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8cd8c:	00000000                                ....

0008cd90 <__mprec_bigtens>:
   8cd90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cda0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cdb0:	7f73bf3c 75154fdd                       <.s..O.u

0008cdb8 <__mprec_tens>:
   8cdb8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cdc8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cdd8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cde8:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cdf8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ce08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ce18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ce28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ce38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ce48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8ce58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ce68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8ce78:	79d99db4 44ea7843                       ...yCx.D

0008ce80 <p05.6122>:
   8ce80:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8ce90:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cea0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8ceb0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8cec0:	2520656e 25732564 00000a73              ne %d%s%s...

0008cecc <_ctype_>:
   8cecc:	20202000 20202020 28282020 20282828     .         ((((( 
   8cedc:	20202020 20202020 20202020 20202020                     
   8ceec:	10108820 10101010 10101010 10101010      ...............
   8cefc:	04040410 04040404 10040404 10101010     ................
   8cf0c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cf1c:	01010101 01010101 01010101 10101010     ................
   8cf2c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cf3c:	02020202 02020202 02020202 10101010     ................
   8cf4c:	00000020 00000000 00000000 00000000      ...............
	...

0008cfd0 <_init>:
   8cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cfd2:	bf00      	nop
   8cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cfd6:	bc08      	pop	{r3}
   8cfd8:	469e      	mov	lr, r3
   8cfda:	4770      	bx	lr

0008cfdc <__init_array_start>:
   8cfdc:	00088d91 	.word	0x00088d91

0008cfe0 <__frame_dummy_init_array_entry>:
   8cfe0:	000800e1                                ....

0008cfe4 <_fini>:
   8cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cfe6:	bf00      	nop
   8cfe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cfea:	bc08      	pop	{r3}
   8cfec:	469e      	mov	lr, r3
   8cfee:	4770      	bx	lr

0008cff0 <__do_global_dtors_aux_fini_array_entry>:
   8cff0:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b36b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x64>
20000008:	4604      	mov	r4, r0
2000000a:	461d      	mov	r5, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	68a3      	ldr	r3, [r4, #8]
2000001e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000020:	9801      	ldr	r0, [sp, #4]
20000022:	f010 0001 	ands.w	r0, r0, #1
20000026:	d1f9      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000028:	b15e      	cbz	r6, 20000042 <efc_perform_read_sequence+0x42>
2000002a:	1f2b      	subs	r3, r5, #4
2000002c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
20000030:	3e04      	subs	r6, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000032:	f5c5 2500 	rsb	r5, r5, #524288	; 0x80000
20000036:	3504      	adds	r5, #4
20000038:	58e9      	ldr	r1, [r5, r3]
2000003a:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42b3      	cmp	r3, r6
20000040:	d1fa      	bne.n	20000038 <efc_perform_read_sequence+0x38>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	68a3      	ldr	r3, [r4, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	f013 0f01 	tst.w	r3, #1
20000054:	d0f9      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000056:	6823      	ldr	r3, [r4, #0]
20000058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005c:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
20000066:	e7fa      	b.n	2000005e <efc_perform_read_sequence+0x5e>

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
}
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr

20000086 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000086:	f3bf 8f5f 	dmb	sy
2000008a:	3801      	subs	r0, #1
2000008c:	d1fb      	bne.n	20000086 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
2000008e:	4770      	bx	lr

20000090 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000090:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000094:	4a21      	ldr	r2, [pc, #132]	; (2000011c <SystemInit+0x8c>)
20000096:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000098:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000009c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a6:	6a1b      	ldr	r3, [r3, #32]
200000a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000ac:	d107      	bne.n	200000be <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ae:	4b1c      	ldr	r3, [pc, #112]	; (20000120 <SystemInit+0x90>)
200000b0:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x94>)
200000b2:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	461a      	mov	r2, r3
200000b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b8:	f013 0f01 	tst.w	r3, #1
200000bc:	d0fb      	beq.n	200000b6 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000be:	4b18      	ldr	r3, [pc, #96]	; (20000120 <SystemInit+0x90>)
200000c0:	4a19      	ldr	r2, [pc, #100]	; (20000128 <SystemInit+0x98>)
200000c2:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c4:	461a      	mov	r2, r3
200000c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000cc:	d0fb      	beq.n	200000c6 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ce:	4a14      	ldr	r2, [pc, #80]	; (20000120 <SystemInit+0x90>)
200000d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d2:	f023 0303 	bic.w	r3, r3, #3
200000d6:	f043 0301 	orr.w	r3, r3, #1
200000da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000de:	f013 0f08 	tst.w	r3, #8
200000e2:	d0fb      	beq.n	200000dc <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e4:	4b0e      	ldr	r3, [pc, #56]	; (20000120 <SystemInit+0x90>)
200000e6:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0x9c>)
200000e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ea:	461a      	mov	r2, r3
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	f013 0f02 	tst.w	r3, #2
200000f2:	d0fb      	beq.n	200000ec <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f4:	4b0a      	ldr	r3, [pc, #40]	; (20000120 <SystemInit+0x90>)
200000f6:	2211      	movs	r2, #17
200000f8:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fa:	461a      	mov	r2, r3
200000fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000fe:	f013 0f08 	tst.w	r3, #8
20000102:	d0fb      	beq.n	200000fc <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000104:	4b06      	ldr	r3, [pc, #24]	; (20000120 <SystemInit+0x90>)
20000106:	2212      	movs	r2, #18
20000108:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010a:	461a      	mov	r2, r3
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	f013 0f08 	tst.w	r3, #8
20000112:	d0fb      	beq.n	2000010c <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000114:	4b06      	ldr	r3, [pc, #24]	; (20000130 <SystemInit+0xa0>)
20000116:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa4>)
20000118:	601a      	str	r2, [r3, #0]
}
2000011a:	4770      	bx	lr
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	20000984 	.word	0x20000984
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b16      	ldr	r3, [pc, #88]	; (20000194 <system_init_flash+0x5c>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a15      	ldr	r2, [pc, #84]	; (20000198 <system_init_flash+0x60>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b13      	ldr	r3, [pc, #76]	; (2000019c <system_init_flash+0x64>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a10      	ldr	r2, [pc, #64]	; (20000198 <system_init_flash+0x60>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b0f      	ldr	r3, [pc, #60]	; (200001a0 <system_init_flash+0x68>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0a      	ldr	r2, [pc, #40]	; (20000198 <system_init_flash+0x60>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <system_init_flash+0x6c>)
2000017a:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017c:	bf94      	ite	ls
2000017e:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000182:	f44f 6380 	movhi.w	r3, #1024	; 0x400
20000186:	4a04      	ldr	r2, [pc, #16]	; (20000198 <system_init_flash+0x60>)
20000188:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000018a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018e:	6013      	str	r3, [r2, #0]
	}
}
20000190:	4770      	bx	lr
20000192:	bf00      	nop
20000194:	016e3600 	.word	0x016e3600
20000198:	400e0800 	.word	0x400e0800
2000019c:	02625a00 	.word	0x02625a00
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff

200001a8 <udi_api_cdc_comm>:
200001a8:	0008019d 000800fd 00080115 00080111     ................
200001b8:	00000000                                ....

200001bc <udi_api_cdc_data>:
200001bc:	000804dd 00080389 0008010d 00080111     ................
200001cc:	00080379                                y...

200001d0 <udc_config>:
200001d0:	200002c0 200001f0 200002c0 200002d4     ... ... ... ... 
200001e0:	200001e8 00000000                       ... ....

200001e8 <udc_config_hs>:
200001e8:	2000025c 200002e0                       \.. ... 

200001f0 <udc_config_lsfs>:
200001f0:	200001f8 200002e0                       ... ... 

200001f8 <udc_desc_fs>:
200001f8:	00620209 80000103 000409fa ffff0200     ..b.............
20000208:	050700ff 00400281 02050700 00004002     ......@......@..
20000218:	02010b08 00010202 00010409 01020201     ................
20000228:	00240500 24040110 24050202 05020106     ..$....$...$....
20000238:	02030124 03830507 09100040 02000204     $.......@.......
20000248:	0000000a 02850507 07000040 40020605     ........@......@
20000258:	00000000                                ....

2000025c <udc_desc_hs>:
2000025c:	00620209 80000103 000409fa ffff0200     ..b.............
2000026c:	050700ff 02000281 02050700 00020002     ................
2000027c:	02010b08 00010202 00010409 01020201     ................
2000028c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000029c:	02030124 03830507 09100040 02000204     $.......@.......
200002ac:	0000000a 02850507 07000200 00020605     ................
200002bc:	00000002                                ....

200002c0 <udc_device_desc>:
200002c0:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d0:	00000103                                ....

200002d4 <udc_device_qual>:
200002d4:	0200060a 40000000 00000001              .......@....

200002e0 <udi_apis>:
200002e0:	20000850 200001a8 200001bc              P.. ... ... 

200002ec <avrispmkIIfreqs>:
200002ec:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200002fc:	0007a120 0003d090 0001e848 00017882      .......H....x..
2000030c:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
2000031c:	0001148d 0001069b 0000fa00 0000ee8d     ................
2000032c:	0000e41b 0000da89 0000c99d 0000c21a     ................
2000033c:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
2000034c:	000099f1 00009586 00008d68 0000861f     ........h.......
2000035c:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
2000036c:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
2000037c:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
2000038c:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
2000039c:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003ac:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003bc:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003cc:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003dc:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003ec:	000016f7 000015e7 000014ef 000013e5     ................
200003fc:	00001306 00001219 00001142 00001071     ........B...q...
2000040c:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
2000041c:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
2000042c:	00000aae 00000a33 000009b4 00000941     ....3.......A...
2000043c:	000008d1 00000868 00000804 000007a4     ....h...........
2000044c:	0000074a 000006f3 0000069f 0000064f     J...........O...
2000045c:	00000603 000005bc 00000576 00000535     ........v...5...
2000046c:	000004f7 000004bc 00000483 0000044d     ............M...
2000047c:	00000419 000003e8 000003b9 0000038d     ................
2000048c:	00000362 0000033a 00000313 000002ee     b...:...........
2000049c:	000002cb 000002aa 0000028a 0000026b     ............k...
200004ac:	0000024e 00000233 00000218 000001ff     N...3...........
200004bc:	000001e7 000001d1 000001bb 000001a6     ................
200004cc:	00000192 00000180 0000016e 0000015d     ........n...]...
200004dc:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004ec:	00000112 00000105 000000f9 000000ee     ................
200004fc:	000000e2 000000d8 000000ce 000000c4     ................
2000050c:	000000bb 000000b2 000000aa 000000a2     ................
2000051c:	0000009a 00000093 0000008c 00000086     ................
2000052c:	00000080 0000007a 00000074 0000006f     ....z...t...o...
2000053c:	00000069 00000064 0000005f 0000005b     i...d..._...[...
2000054c:	00000057 00000053 0000004f 0000004b     W...S...O...K...
2000055c:	00000047 00000044 00000041 0000003e     G...D...A...>...
2000056c:	0000003b 00000038 00000036 00000033     ;...8...6...3...

2000057c <main_b_vendor_enable>:
2000057c:	00000001                                ....

20000580 <usart0_driver>:
20000580:	40090000 00000000 00000000 00000000     ...@............
	...
2000081c:	00000009                                ....

20000820 <xram>:
20000820:	60000000                                ...`

20000824 <ParameterTable>:
20000824:	81000180 01900001 01019100 94170192     ................
20000834:	03982101 01039e06 a40001a1               .!............

20000842 <XPROG_Param_EEPageSize>:
20000842:	                                          .

20000844 <XPROG_Param_NVMBase>:
20000844:	010001c0                                ....

20000848 <XPROG_Param_NVMCMDRegAddr>:
20000848:	                                         3

20000849 <XPROG_Param_NVMCSRRegAddr>:
20000849:	                                         2..

2000084c <defaultTimeoutTicks>:
2000084c:	000001f4                                ....

20000850 <udi_api_vendor>:
20000850:	00082fe1 00083005 0008301d 00082fd5     ./...0...0.../..
20000860:	00000000                                ....

20000864 <udc_string_desc>:
20000864:	00000300 00000000 00000000 00000000     ................
	...

200008a8 <udc_string_desc_languageid>:
200008a8:	04090304                                ....

200008ac <udc_string_manufacturer_name>:
200008ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200008bc:	636e4920 0000002e                        Inc....

200008c4 <udc_string_product_name>:
200008c4:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
200008d4:	00006574                                te..

200008d8 <winusb_20_desc>:
200008d8:	0000000a 06030000 000800ae 00000002     ................
200008e8:	001400a4 49570003 4253554e 00000000     ......WINUSB....
200008f8:	00000000 00880000 00070004 0044002a     ............*.D.
20000908:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000918:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000928:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
20000938:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
20000948:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
20000958:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
20000968:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
20000978:	00390045 0000007d                        E.9.}.....

20000982 <g_interrupt_enabled>:
20000982:	                                         ..

20000984 <SystemCoreClock>:
20000984:	003d0900                                ..=.

20000988 <usb_serial_number>:
20000988:	30303030 30303030 30303030 44414544     000000000000DEAD
20000998:	46454542 00000000 00000000 00000000     BEEF............
200009a8:	00000000                                ....

200009ac <_impure_ptr>:
200009ac:	200009b0                                ... 

200009b0 <impure_data>:
200009b0:	00000000 20000c9c 20000d04 20000d6c     ....... ... l.. 
	...
20000a58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000a68:	0005deec 0000000b 00000000 00000000     ................
	...

20000dd8 <__atexit_recursive_mutex>:
20000dd8:	200026b4                                .&. 

20000ddc <__global_locale>:
20000ddc:	00000043 00000000 00000000 00000000     C...............
	...
20000dfc:	00000043 00000000 00000000 00000000     C...............
	...
20000e1c:	00000043 00000000 00000000 00000000     C...............
	...
20000e3c:	00000043 00000000 00000000 00000000     C...............
	...
20000e5c:	00000043 00000000 00000000 00000000     C...............
	...
20000e7c:	00000043 00000000 00000000 00000000     C...............
	...
20000e9c:	00000043 00000000 00000000 00000000     C...............
	...
20000ebc:	0008bcfd 0008ad89 00000000 0008cecc     ................
20000ecc:	0008cd08 0008cb28 0008cb28 0008cb28     ....(...(...(...
20000edc:	0008cb28 0008cb28 0008cb28 0008cb28     (...(...(...(...
20000eec:	0008cb28 0008cb28 ffffffff ffffffff     (...(...........
20000efc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000f24:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000f48 <__malloc_av_>:
	...
20000f50:	20000f48 20000f48 20000f50 20000f50     H.. H.. P.. P.. 
20000f60:	20000f58 20000f58 20000f60 20000f60     X.. X.. `.. `.. 
20000f70:	20000f68 20000f68 20000f70 20000f70     h.. h.. p.. p.. 
20000f80:	20000f78 20000f78 20000f80 20000f80     x.. x.. ... ... 
20000f90:	20000f88 20000f88 20000f90 20000f90     ... ... ... ... 
20000fa0:	20000f98 20000f98 20000fa0 20000fa0     ... ... ... ... 
20000fb0:	20000fa8 20000fa8 20000fb0 20000fb0     ... ... ... ... 
20000fc0:	20000fb8 20000fb8 20000fc0 20000fc0     ... ... ... ... 
20000fd0:	20000fc8 20000fc8 20000fd0 20000fd0     ... ... ... ... 
20000fe0:	20000fd8 20000fd8 20000fe0 20000fe0     ... ... ... ... 
20000ff0:	20000fe8 20000fe8 20000ff0 20000ff0     ... ... ... ... 
20001000:	20000ff8 20000ff8 20001000 20001000     ... ... ... ... 
20001010:	20001008 20001008 20001010 20001010     ... ... ... ... 
20001020:	20001018 20001018 20001020 20001020     ... ...  ..  .. 
20001030:	20001028 20001028 20001030 20001030     (.. (.. 0.. 0.. 
20001040:	20001038 20001038 20001040 20001040     8.. 8.. @.. @.. 
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 
200010c0:	200010b8 200010b8 200010c0 200010c0     ... ... ... ... 
200010d0:	200010c8 200010c8 200010d0 200010d0     ... ... ... ... 
200010e0:	200010d8 200010d8 200010e0 200010e0     ... ... ... ... 
200010f0:	200010e8 200010e8 200010f0 200010f0     ... ... ... ... 
20001100:	200010f8 200010f8 20001100 20001100     ... ... ... ... 
20001110:	20001108 20001108 20001110 20001110     ... ... ... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 

20001350 <__malloc_sbrk_base>:
20001350:	ffffffff                                ....

20001354 <__malloc_trim_threshold>:
20001354:	00020000                                ....
