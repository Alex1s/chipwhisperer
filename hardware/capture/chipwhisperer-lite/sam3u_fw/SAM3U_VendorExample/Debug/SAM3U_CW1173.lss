
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c9a4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008c9a4  0008c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001458  20000000  0008c9ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001590  20001458  0008de04  00021458  2**2
                  ALLOC
  4 .stack        00001500  200029e8  0008f394  00021458  2**0
                  ALLOC
  5 .mpssemem     00004000  20080000  20080000  00030000  2**2
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00021458  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00021481  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003d08d  00000000  00000000  000214da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000083ee  00000000  00000000  0005e567  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ce25  00000000  00000000  00066955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015b0  00000000  00000000  0007377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001688  00000000  00000000  00074d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021670  00000000  00000000  000763b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028c9b  00000000  00000000  00097a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0006130f  00000000  00000000  000c06bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000046ec  00000000  00000000  001219cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 3e 00 20 7d 5c 08 00 7b 5c 08 00 7b 5c 08 00     .>. }\..{\..{\..
   80010:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 00 00 00 00     {\..{\..{\......
	...
   8002c:	7b 5c 08 00 7b 5c 08 00 00 00 00 00 7b 5c 08 00     {\..{\......{\..
   8003c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 7b 5c 08 00     {\..{\..{\..{\..
   8004c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 7b 5c 08 00     {\..{\..{\..{\..
   8005c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 2d 43 08 00     {\..{\..{\..-C..
   8006c:	41 43 08 00 7b 5c 08 00 65 1f 08 00 7b 5c 08 00     AC..{\..e...{\..
   8007c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 7b 5c 08 00     {\..{\..{\..{\..
   8008c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 59 3b 08 00     {\..{\..{\..Y;..
   8009c:	7b 5c 08 00 7b 5c 08 00 7b 5c 08 00 7b 5c 08 00     {\..{\..{\..{\..
   800ac:	7b 5c 08 00 7b 5c 08 00 a5 4a 08 00 7b 5c 08 00     {\..{\...J..{\..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001458 	.word	0x20001458
   800d8:	00000000 	.word	0x00000000
   800dc:	0008c9ac 	.word	0x0008c9ac

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008c9ac 	.word	0x0008c9ac
   8011c:	2000145c 	.word	0x2000145c
   80120:	0008c9ac 	.word	0x0008c9ac
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	2000147f 	.word	0x2000147f

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	200029a8 	.word	0x200029a8
   801bc:	20001478 	.word	0x20001478
   801c0:	000803dd 	.word	0x000803dd

000801c4 <udi_cdc_comm_enable>:
{
   801c4:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   801c6:	2400      	movs	r4, #0
   801c8:	4b12      	ldr	r3, [pc, #72]	; (80214 <udi_cdc_comm_enable+0x50>)
   801ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801cc:	4b12      	ldr	r3, [pc, #72]	; (80218 <udi_cdc_comm_enable+0x54>)
   801ce:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d0:	4b12      	ldr	r3, [pc, #72]	; (8021c <udi_cdc_comm_enable+0x58>)
   801d2:	22a1      	movs	r2, #161	; 0xa1
   801d4:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801d6:	2220      	movs	r2, #32
   801d8:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801da:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801dc:	2201      	movs	r2, #1
   801de:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e0:	2202      	movs	r2, #2
   801e2:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e4:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801e6:	490e      	ldr	r1, [pc, #56]	; (80220 <udi_cdc_comm_enable+0x5c>)
   801e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801ec:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801ee:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f0:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f2:	2308      	movs	r3, #8
   801f4:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801f6:	4620      	mov	r0, r4
   801f8:	4b0a      	ldr	r3, [pc, #40]	; (80224 <udi_cdc_comm_enable+0x60>)
   801fa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fc:	4620      	mov	r0, r4
   801fe:	4b0a      	ldr	r3, [pc, #40]	; (80228 <udi_cdc_comm_enable+0x64>)
   80200:	4798      	blx	r3
   80202:	4602      	mov	r2, r0
   80204:	b120      	cbz	r0, 80210 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
   80206:	4903      	ldr	r1, [pc, #12]	; (80214 <udi_cdc_comm_enable+0x50>)
   80208:	780b      	ldrb	r3, [r1, #0]
   8020a:	3301      	adds	r3, #1
   8020c:	b2db      	uxtb	r3, r3
   8020e:	700b      	strb	r3, [r1, #0]
}
   80210:	4610      	mov	r0, r2
   80212:	bd10      	pop	{r4, pc}
   80214:	2000147f 	.word	0x2000147f
   80218:	20001894 	.word	0x20001894
   8021c:	20001cac 	.word	0x20001cac
   80220:	20001478 	.word	0x20001478
   80224:	0008247d 	.word	0x0008247d
   80228:	000823d1 	.word	0x000823d1

0008022c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8022c:	4b42      	ldr	r3, [pc, #264]	; (80338 <udi_cdc_tx_send+0x10c>)
   8022e:	781b      	ldrb	r3, [r3, #0]
   80230:	b103      	cbz	r3, 80234 <udi_cdc_tx_send+0x8>
   80232:	4770      	bx	lr
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80238:	4b40      	ldr	r3, [pc, #256]	; (8033c <udi_cdc_tx_send+0x110>)
   8023a:	4798      	blx	r3
   8023c:	2800      	cmp	r0, #0
   8023e:	d03d      	beq.n	802bc <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80240:	4b3f      	ldr	r3, [pc, #252]	; (80340 <udi_cdc_tx_send+0x114>)
   80242:	881c      	ldrh	r4, [r3, #0]
   80244:	4b3f      	ldr	r3, [pc, #252]	; (80344 <udi_cdc_tx_send+0x118>)
   80246:	4798      	blx	r3
   80248:	4284      	cmp	r4, r0
   8024a:	d072      	beq.n	80332 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8024c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80250:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80252:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80256:	2200      	movs	r2, #0
   80258:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x11c>)
   8025a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8025c:	4b3b      	ldr	r3, [pc, #236]	; (8034c <udi_cdc_tx_send+0x120>)
   8025e:	781c      	ldrb	r4, [r3, #0]
   80260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80262:	4b3b      	ldr	r3, [pc, #236]	; (80350 <udi_cdc_tx_send+0x124>)
   80264:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80268:	2b00      	cmp	r3, #0
   8026a:	d02e      	beq.n	802ca <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8026c:	2200      	movs	r2, #0
   8026e:	4b39      	ldr	r3, [pc, #228]	; (80354 <udi_cdc_tx_send+0x128>)
   80270:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80272:	4b39      	ldr	r3, [pc, #228]	; (80358 <udi_cdc_tx_send+0x12c>)
   80274:	781b      	ldrb	r3, [r3, #0]
   80276:	2b00      	cmp	r3, #0
   80278:	d143      	bne.n	80302 <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8027a:	fab4 f384 	clz	r3, r4
   8027e:	095b      	lsrs	r3, r3, #5
   80280:	4a32      	ldr	r2, [pc, #200]	; (8034c <udi_cdc_tx_send+0x120>)
   80282:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80284:	2201      	movs	r2, #1
   80286:	4b2c      	ldr	r3, [pc, #176]	; (80338 <udi_cdc_tx_send+0x10c>)
   80288:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8028a:	b925      	cbnz	r5, 80296 <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   8028c:	4b2e      	ldr	r3, [pc, #184]	; (80348 <udi_cdc_tx_send+0x11c>)
   8028e:	701a      	strb	r2, [r3, #0]
   80290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80294:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80296:	4626      	mov	r6, r4
   80298:	4b2d      	ldr	r3, [pc, #180]	; (80350 <udi_cdc_tx_send+0x124>)
   8029a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   802a2:	bf14      	ite	ne
   802a4:	2501      	movne	r5, #1
   802a6:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a8:	d034      	beq.n	80314 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x110>)
   802ac:	4798      	blx	r3
   802ae:	2800      	cmp	r0, #0
   802b0:	d02b      	beq.n	8030a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802b2:	4b24      	ldr	r3, [pc, #144]	; (80344 <udi_cdc_tx_send+0x118>)
   802b4:	4798      	blx	r3
   802b6:	4b22      	ldr	r3, [pc, #136]	; (80340 <udi_cdc_tx_send+0x114>)
   802b8:	8018      	strh	r0, [r3, #0]
   802ba:	e02e      	b.n	8031a <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802bc:	4b20      	ldr	r3, [pc, #128]	; (80340 <udi_cdc_tx_send+0x114>)
   802be:	881c      	ldrh	r4, [r3, #0]
   802c0:	4b26      	ldr	r3, [pc, #152]	; (8035c <udi_cdc_tx_send+0x130>)
   802c2:	4798      	blx	r3
   802c4:	4284      	cmp	r4, r0
   802c6:	d1c1      	bne.n	8024c <udi_cdc_tx_send+0x20>
   802c8:	e033      	b.n	80332 <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802ca:	4a22      	ldr	r2, [pc, #136]	; (80354 <udi_cdc_tx_send+0x128>)
   802cc:	8813      	ldrh	r3, [r2, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802d2:	4b1a      	ldr	r3, [pc, #104]	; (8033c <udi_cdc_tx_send+0x110>)
   802d4:	4798      	blx	r3
   802d6:	b918      	cbnz	r0, 802e0 <udi_cdc_tx_send+0xb4>
   802d8:	4b1e      	ldr	r3, [pc, #120]	; (80354 <udi_cdc_tx_send+0x128>)
   802da:	881b      	ldrh	r3, [r3, #0]
   802dc:	2b63      	cmp	r3, #99	; 0x63
   802de:	d908      	bls.n	802f2 <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <udi_cdc_tx_send+0x110>)
   802e2:	4798      	blx	r3
   802e4:	2800      	cmp	r0, #0
   802e6:	d0c1      	beq.n	8026c <udi_cdc_tx_send+0x40>
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <udi_cdc_tx_send+0x128>)
   802ea:	881b      	ldrh	r3, [r3, #0]
   802ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802f0:	d2bc      	bcs.n	8026c <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802f2:	b9f5      	cbnz	r5, 80332 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802f4:	2201      	movs	r2, #1
   802f6:	4b14      	ldr	r3, [pc, #80]	; (80348 <udi_cdc_tx_send+0x11c>)
   802f8:	701a      	strb	r2, [r3, #0]
   802fa:	f3bf 8f5f 	dmb	sy
   802fe:	b662      	cpsie	i
   80300:	e017      	b.n	80332 <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80302:	fab4 f484 	clz	r4, r4
   80306:	0964      	lsrs	r4, r4, #5
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8030a:	4b14      	ldr	r3, [pc, #80]	; (8035c <udi_cdc_tx_send+0x130>)
   8030c:	4798      	blx	r3
   8030e:	4b0c      	ldr	r3, [pc, #48]	; (80340 <udi_cdc_tx_send+0x114>)
   80310:	8018      	strh	r0, [r3, #0]
   80312:	e002      	b.n	8031a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80314:	2200      	movs	r2, #0
   80316:	4b0a      	ldr	r3, [pc, #40]	; (80340 <udi_cdc_tx_send+0x114>)
   80318:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   8031c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80320:	4a0f      	ldr	r2, [pc, #60]	; (80360 <udi_cdc_tx_send+0x134>)
   80322:	9200      	str	r2, [sp, #0]
   80324:	4a0f      	ldr	r2, [pc, #60]	; (80364 <udi_cdc_tx_send+0x138>)
   80326:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8032a:	4629      	mov	r1, r5
   8032c:	2085      	movs	r0, #133	; 0x85
   8032e:	4c0e      	ldr	r4, [pc, #56]	; (80368 <udi_cdc_tx_send+0x13c>)
   80330:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80332:	b002      	add	sp, #8
   80334:	bd70      	pop	{r4, r5, r6, pc}
   80336:	bf00      	nop
   80338:	20001ca8 	.word	0x20001ca8
   8033c:	000852e9 	.word	0x000852e9
   80340:	20001ca4 	.word	0x20001ca4
   80344:	00085341 	.word	0x00085341
   80348:	20000a7c 	.word	0x20000a7c
   8034c:	20001ca0 	.word	0x20001ca0
   80350:	20001c9c 	.word	0x20001c9c
   80354:	20001474 	.word	0x20001474
   80358:	20001898 	.word	0x20001898
   8035c:	00085331 	.word	0x00085331
   80360:	0008036d 	.word	0x0008036d
   80364:	2000189c 	.word	0x2000189c
   80368:	000855a5 	.word	0x000855a5

0008036c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8036c:	b100      	cbz	r0, 80370 <udi_cdc_data_sent+0x4>
   8036e:	4770      	bx	lr
{
   80370:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <udi_cdc_data_sent+0x24>)
   80374:	781b      	ldrb	r3, [r3, #0]
   80376:	fab3 f383 	clz	r3, r3
   8037a:	095b      	lsrs	r3, r3, #5
   8037c:	4a05      	ldr	r2, [pc, #20]	; (80394 <udi_cdc_data_sent+0x28>)
   8037e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x2c>)
   80384:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <udi_cdc_data_sent+0x30>)
   80388:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <udi_cdc_data_sent+0x34>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	20001ca0 	.word	0x20001ca0
   80394:	20001c9c 	.word	0x20001c9c
   80398:	20001898 	.word	0x20001898
   8039c:	20001ca8 	.word	0x20001ca8
   803a0:	0008022d 	.word	0x0008022d

000803a4 <udi_cdc_data_sof_notify>:
{
   803a4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   803a6:	2000      	movs	r0, #0
   803a8:	4b01      	ldr	r3, [pc, #4]	; (803b0 <udi_cdc_data_sof_notify+0xc>)
   803aa:	4798      	blx	r3
   803ac:	bd08      	pop	{r3, pc}
   803ae:	bf00      	nop
   803b0:	0008022d 	.word	0x0008022d

000803b4 <udi_cdc_data_disable>:
{
   803b4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803b6:	4a06      	ldr	r2, [pc, #24]	; (803d0 <udi_cdc_data_disable+0x1c>)
   803b8:	7813      	ldrb	r3, [r2, #0]
   803ba:	3b01      	subs	r3, #1
   803bc:	b2db      	uxtb	r3, r3
   803be:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803c0:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803c2:	4b04      	ldr	r3, [pc, #16]	; (803d4 <udi_cdc_data_disable+0x20>)
   803c4:	4798      	blx	r3
	udi_cdc_data_running = false;
   803c6:	2200      	movs	r2, #0
   803c8:	4b03      	ldr	r3, [pc, #12]	; (803d8 <udi_cdc_data_disable+0x24>)
   803ca:	701a      	strb	r2, [r3, #0]
   803cc:	bd08      	pop	{r3, pc}
   803ce:	bf00      	nop
   803d0:	20001480 	.word	0x20001480
   803d4:	000823ed 	.word	0x000823ed
   803d8:	20001476 	.word	0x20001476

000803dc <udi_cdc_line_coding_received>:
{
   803dc:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803de:	4902      	ldr	r1, [pc, #8]	; (803e8 <udi_cdc_line_coding_received+0xc>)
   803e0:	2000      	movs	r0, #0
   803e2:	4b02      	ldr	r3, [pc, #8]	; (803ec <udi_cdc_line_coding_received+0x10>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	20001478 	.word	0x20001478
   803ec:	0008247d 	.word	0x0008247d

000803f0 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803f4:	b672      	cpsid	i
   803f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803fa:	2100      	movs	r1, #0
   803fc:	4a0a      	ldr	r2, [pc, #40]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   803fe:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80400:	4a0a      	ldr	r2, [pc, #40]	; (8042c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80402:	8810      	ldrh	r0, [r2, #0]
   80404:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80406:	490a      	ldr	r1, [pc, #40]	; (80430 <udi_cdc_multi_get_nb_received_data+0x40>)
   80408:	7809      	ldrb	r1, [r1, #0]
   8040a:	b2c9      	uxtb	r1, r1
   8040c:	4809      	ldr	r0, [pc, #36]	; (80434 <udi_cdc_multi_get_nb_received_data+0x44>)
   8040e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   80412:	b280      	uxth	r0, r0
   80414:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   80416:	b92b      	cbnz	r3, 80424 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80418:	2201      	movs	r2, #1
   8041a:	4b03      	ldr	r3, [pc, #12]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   8041c:	701a      	strb	r2, [r3, #0]
   8041e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80422:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	20000a7c 	.word	0x20000a7c
   8042c:	2000188c 	.word	0x2000188c
   80430:	20001888 	.word	0x20001888
   80434:	20001884 	.word	0x20001884

00080438 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8043a:	4b03      	ldr	r3, [pc, #12]	; (80448 <udi_cdc_multi_is_rx_ready+0x10>)
   8043c:	4798      	blx	r3
}
   8043e:	3000      	adds	r0, #0
   80440:	bf18      	it	ne
   80442:	2001      	movne	r0, #1
   80444:	bd08      	pop	{r3, pc}
   80446:	bf00      	nop
   80448:	000803f1 	.word	0x000803f1

0008044c <udi_cdc_rx_start>:
{
   8044c:	b510      	push	{r4, lr}
   8044e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80450:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80454:	b672      	cpsid	i
   80456:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8045a:	2100      	movs	r1, #0
   8045c:	4a21      	ldr	r2, [pc, #132]	; (804e4 <udi_cdc_rx_start+0x98>)
   8045e:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80460:	4a21      	ldr	r2, [pc, #132]	; (804e8 <udi_cdc_rx_start+0x9c>)
   80462:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80464:	4a21      	ldr	r2, [pc, #132]	; (804ec <udi_cdc_rx_start+0xa0>)
   80466:	7812      	ldrb	r2, [r2, #0]
   80468:	b94a      	cbnz	r2, 8047e <udi_cdc_rx_start+0x32>
   8046a:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8046c:	4a20      	ldr	r2, [pc, #128]	; (804f0 <udi_cdc_rx_start+0xa4>)
   8046e:	8811      	ldrh	r1, [r2, #0]
   80470:	b289      	uxth	r1, r1
   80472:	4a20      	ldr	r2, [pc, #128]	; (804f4 <udi_cdc_rx_start+0xa8>)
   80474:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80478:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047a:	4291      	cmp	r1, r2
   8047c:	d20a      	bcs.n	80494 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   8047e:	2b00      	cmp	r3, #0
   80480:	d12d      	bne.n	804de <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80482:	2201      	movs	r2, #1
   80484:	4b17      	ldr	r3, [pc, #92]	; (804e4 <udi_cdc_rx_start+0x98>)
   80486:	701a      	strb	r2, [r3, #0]
   80488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8048c:	b662      	cpsie	i
		return false;
   8048e:	2000      	movs	r0, #0
}
   80490:	b002      	add	sp, #8
   80492:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80494:	2100      	movs	r1, #0
   80496:	4a16      	ldr	r2, [pc, #88]	; (804f0 <udi_cdc_rx_start+0xa4>)
   80498:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8049a:	fab4 f284 	clz	r2, r4
   8049e:	0952      	lsrs	r2, r2, #5
   804a0:	4911      	ldr	r1, [pc, #68]	; (804e8 <udi_cdc_rx_start+0x9c>)
   804a2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   804a4:	2101      	movs	r1, #1
   804a6:	4a11      	ldr	r2, [pc, #68]	; (804ec <udi_cdc_rx_start+0xa0>)
   804a8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   804aa:	b923      	cbnz	r3, 804b6 <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_cdc_rx_start+0x98>)
   804ae:	7019      	strb	r1, [r3, #0]
   804b0:	f3bf 8f5f 	dmb	sy
   804b4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   804b6:	2000      	movs	r0, #0
   804b8:	4b0f      	ldr	r3, [pc, #60]	; (804f8 <udi_cdc_rx_start+0xac>)
   804ba:	4798      	blx	r3
   804bc:	b958      	cbnz	r0, 804d6 <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804be:	4b0f      	ldr	r3, [pc, #60]	; (804fc <udi_cdc_rx_start+0xb0>)
   804c0:	9300      	str	r3, [sp, #0]
   804c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804c6:	4a0e      	ldr	r2, [pc, #56]	; (80500 <udi_cdc_rx_start+0xb4>)
   804c8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804cc:	2101      	movs	r1, #1
   804ce:	2006      	movs	r0, #6
   804d0:	4c0c      	ldr	r4, [pc, #48]	; (80504 <udi_cdc_rx_start+0xb8>)
   804d2:	47a0      	blx	r4
   804d4:	e7dc      	b.n	80490 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804d6:	2000      	movs	r0, #0
   804d8:	4b0b      	ldr	r3, [pc, #44]	; (80508 <udi_cdc_rx_start+0xbc>)
   804da:	4798      	blx	r3
   804dc:	e7ef      	b.n	804be <udi_cdc_rx_start+0x72>
		return false;
   804de:	2000      	movs	r0, #0
   804e0:	e7d6      	b.n	80490 <udi_cdc_rx_start+0x44>
   804e2:	bf00      	nop
   804e4:	20000a7c 	.word	0x20000a7c
   804e8:	20001888 	.word	0x20001888
   804ec:	20001890 	.word	0x20001890
   804f0:	2000188c 	.word	0x2000188c
   804f4:	20001884 	.word	0x20001884
   804f8:	00080439 	.word	0x00080439
   804fc:	000805a1 	.word	0x000805a1
   80500:	20001484 	.word	0x20001484
   80504:	000855a5 	.word	0x000855a5
   80508:	00082405 	.word	0x00082405

0008050c <udi_cdc_data_enable>:
{
   8050c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   8050e:	2400      	movs	r4, #0
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <udi_cdc_data_enable+0x60>)
   80512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80514:	4b16      	ldr	r3, [pc, #88]	; (80570 <udi_cdc_data_enable+0x64>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <udi_cdc_data_enable+0x68>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <udi_cdc_data_enable+0x6c>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <udi_cdc_data_enable+0x70>)
   80522:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80524:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   80526:	4b16      	ldr	r3, [pc, #88]	; (80580 <udi_cdc_data_enable+0x74>)
   80528:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8052a:	4620      	mov	r0, r4
   8052c:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x78>)
   8052e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80530:	4b15      	ldr	r3, [pc, #84]	; (80588 <udi_cdc_data_enable+0x7c>)
   80532:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80534:	4b15      	ldr	r3, [pc, #84]	; (8058c <udi_cdc_data_enable+0x80>)
   80536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <udi_cdc_data_enable+0x84>)
   8053a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8053c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8053e:	4b15      	ldr	r3, [pc, #84]	; (80594 <udi_cdc_data_enable+0x88>)
   80540:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80542:	4620      	mov	r0, r4
   80544:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x8c>)
   80546:	4798      	blx	r3
   80548:	4601      	mov	r1, r0
   8054a:	b140      	cbz	r0, 8055e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   8054c:	4a07      	ldr	r2, [pc, #28]	; (8056c <udi_cdc_data_enable+0x60>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3301      	adds	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	b2db      	uxtb	r3, r3
   8055a:	2b01      	cmp	r3, #1
   8055c:	d001      	beq.n	80562 <udi_cdc_data_enable+0x56>
}
   8055e:	4608      	mov	r0, r1
   80560:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80562:	2201      	movs	r2, #1
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <udi_cdc_data_enable+0x90>)
   80566:	701a      	strb	r2, [r3, #0]
   80568:	e7f9      	b.n	8055e <udi_cdc_data_enable+0x52>
   8056a:	bf00      	nop
   8056c:	20001480 	.word	0x20001480
   80570:	20001ca8 	.word	0x20001ca8
   80574:	20001898 	.word	0x20001898
   80578:	20001ca0 	.word	0x20001ca0
   8057c:	20001c9c 	.word	0x20001c9c
   80580:	20001ca4 	.word	0x20001ca4
   80584:	0008022d 	.word	0x0008022d
   80588:	20001890 	.word	0x20001890
   8058c:	20001888 	.word	0x20001888
   80590:	20001884 	.word	0x20001884
   80594:	2000188c 	.word	0x2000188c
   80598:	0008044d 	.word	0x0008044d
   8059c:	20001476 	.word	0x20001476

000805a0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   805a0:	b9f0      	cbnz	r0, 805e0 <udi_cdc_data_received+0x40>
{
   805a2:	b510      	push	{r4, lr}
   805a4:	b082      	sub	sp, #8
   805a6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805a8:	4b0e      	ldr	r3, [pc, #56]	; (805e4 <udi_cdc_data_received+0x44>)
   805aa:	781c      	ldrb	r4, [r3, #0]
   805ac:	fab4 f484 	clz	r4, r4
   805b0:	0964      	lsrs	r4, r4, #5
	if (!n) {
   805b2:	b151      	cbz	r1, 805ca <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805b4:	b289      	uxth	r1, r1
   805b6:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_data_received+0x48>)
   805b8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805bc:	2000      	movs	r0, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <udi_cdc_data_received+0x4c>)
   805c0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <udi_cdc_data_received+0x50>)
   805c4:	4798      	blx	r3
}
   805c6:	b002      	add	sp, #8
   805c8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ca:	4b0a      	ldr	r3, [pc, #40]	; (805f4 <udi_cdc_data_received+0x54>)
   805cc:	9300      	str	r3, [sp, #0]
   805ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x58>)
   805d4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805d8:	2101      	movs	r1, #1
   805da:	4c08      	ldr	r4, [pc, #32]	; (805fc <udi_cdc_data_received+0x5c>)
   805dc:	47a0      	blx	r4
		return;
   805de:	e7f2      	b.n	805c6 <udi_cdc_data_received+0x26>
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	20001888 	.word	0x20001888
   805e8:	20001884 	.word	0x20001884
   805ec:	20001890 	.word	0x20001890
   805f0:	0008044d 	.word	0x0008044d
   805f4:	000805a1 	.word	0x000805a1
   805f8:	20001484 	.word	0x20001484
   805fc:	000855a5 	.word	0x000855a5

00080600 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   80600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80604:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   80606:	4688      	mov	r8, r1
	cpu_irq_disable();
   80608:	4f20      	ldr	r7, [pc, #128]	; (8068c <udi_cdc_multi_read_buf+0x8c>)
   8060a:	f04f 0b00 	mov.w	fp, #0
   8060e:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80610:	4e1f      	ldr	r6, [pc, #124]	; (80690 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80612:	f8df 9094 	ldr.w	r9, [pc, #148]	; 806a8 <udi_cdc_multi_read_buf+0xa8>
   80616:	e019      	b.n	8064c <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80618:	4a1e      	ldr	r2, [pc, #120]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   8061a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8061e:	b2a4      	uxth	r4, r4
   80620:	1a64      	subs	r4, r4, r1
   80622:	42ac      	cmp	r4, r5
   80624:	bf28      	it	cs
   80626:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80628:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   8062c:	4622      	mov	r2, r4
   8062e:	4b1a      	ldr	r3, [pc, #104]	; (80698 <udi_cdc_multi_read_buf+0x98>)
   80630:	4419      	add	r1, r3
   80632:	4640      	mov	r0, r8
   80634:	4b19      	ldr	r3, [pc, #100]	; (8069c <udi_cdc_multi_read_buf+0x9c>)
   80636:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80638:	8833      	ldrh	r3, [r6, #0]
   8063a:	4423      	add	r3, r4
   8063c:	b29b      	uxth	r3, r3
   8063e:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80640:	44a0      	add	r8, r4
	size -= copy_nb;
   80642:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80644:	4658      	mov	r0, fp
   80646:	4b16      	ldr	r3, [pc, #88]	; (806a0 <udi_cdc_multi_read_buf+0xa0>)
   80648:	4798      	blx	r3

	if (size) {
   8064a:	b1dd      	cbz	r5, 80684 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8064c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80650:	b672      	cpsid	i
   80652:	f3bf 8f5f 	dmb	sy
   80656:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8065a:	8831      	ldrh	r1, [r6, #0]
   8065c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8065e:	f899 3000 	ldrb.w	r3, [r9]
   80662:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80664:	4a0b      	ldr	r2, [pc, #44]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   80666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8066a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8066c:	b920      	cbnz	r0, 80678 <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   8066e:	2001      	movs	r0, #1
   80670:	7038      	strb	r0, [r7, #0]
   80672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80676:	b662      	cpsie	i
	while (again) {
   80678:	4291      	cmp	r1, r2
   8067a:	d3cd      	bcc.n	80618 <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   8067c:	4b09      	ldr	r3, [pc, #36]	; (806a4 <udi_cdc_multi_read_buf+0xa4>)
   8067e:	781b      	ldrb	r3, [r3, #0]
   80680:	2b00      	cmp	r3, #0
   80682:	d1e3      	bne.n	8064c <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80684:	4628      	mov	r0, r5
   80686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8068a:	bf00      	nop
   8068c:	20000a7c 	.word	0x20000a7c
   80690:	2000188c 	.word	0x2000188c
   80694:	20001884 	.word	0x20001884
   80698:	20001484 	.word	0x20001484
   8069c:	0008652d 	.word	0x0008652d
   806a0:	0008044d 	.word	0x0008044d
   806a4:	20001476 	.word	0x20001476
   806a8:	20001888 	.word	0x20001888

000806ac <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   806b0:	b672      	cpsid	i
   806b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   806b6:	2100      	movs	r1, #0
   806b8:	4b13      	ldr	r3, [pc, #76]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806ba:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806bc:	4b13      	ldr	r3, [pc, #76]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806c2:	4913      	ldr	r1, [pc, #76]	; (80710 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806cc:	d009      	beq.n	806e2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806ce:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806d2:	b92a      	cbnz	r2, 806e0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806d4:	2201      	movs	r2, #1
   806d6:	4b0c      	ldr	r3, [pc, #48]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806d8:	701a      	strb	r2, [r3, #0]
   806da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806de:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806e0:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806e2:	490c      	ldr	r1, [pc, #48]	; (80714 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806e4:	7809      	ldrb	r1, [r1, #0]
   806e6:	2900      	cmp	r1, #0
   806e8:	d1f1      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ea:	490b      	ldr	r1, [pc, #44]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806ec:	7809      	ldrb	r1, [r1, #0]
   806ee:	2900      	cmp	r1, #0
   806f0:	d1ed      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806f2:	2001      	movs	r0, #1
   806f4:	4908      	ldr	r1, [pc, #32]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806f6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806f8:	fab3 f383 	clz	r3, r3
   806fc:	095b      	lsrs	r3, r3, #5
   806fe:	4903      	ldr	r1, [pc, #12]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80700:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80702:	2000      	movs	r0, #0
   80704:	e7e3      	b.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
   80706:	bf00      	nop
   80708:	20000a7c 	.word	0x20000a7c
   8070c:	20001ca0 	.word	0x20001ca0
   80710:	20001c9c 	.word	0x20001c9c
   80714:	20001ca8 	.word	0x20001ca8
   80718:	20001898 	.word	0x20001898

0008071c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   8071c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <udi_cdc_multi_is_tx_ready+0x10>)
   80720:	4798      	blx	r3
}
   80722:	3000      	adds	r0, #0
   80724:	bf18      	it	ne
   80726:	2001      	movne	r0, #1
   80728:	bd08      	pop	{r3, pc}
   8072a:	bf00      	nop
   8072c:	000806ad 	.word	0x000806ad

00080730 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80736:	4b1b      	ldr	r3, [pc, #108]	; (807a4 <udi_cdc_multi_putc+0x74>)
   80738:	799d      	ldrb	r5, [r3, #6]
   8073a:	2d09      	cmp	r5, #9
   8073c:	bf14      	ite	ne
   8073e:	2500      	movne	r5, #0
   80740:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80742:	4e19      	ldr	r6, [pc, #100]	; (807a8 <udi_cdc_multi_putc+0x78>)
	cpu_irq_disable();
   80744:	4f19      	ldr	r7, [pc, #100]	; (807ac <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80746:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807bc <udi_cdc_multi_putc+0x8c>
   8074a:	e01d      	b.n	80788 <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8074c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80750:	b672      	cpsid	i
   80752:	f3bf 8f5f 	dmb	sy
   80756:	2300      	movs	r3, #0
   80758:	703b      	strb	r3, [r7, #0]
   8075a:	f898 3000 	ldrb.w	r3, [r8]
   8075e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80760:	4913      	ldr	r1, [pc, #76]	; (807b0 <udi_cdc_multi_putc+0x80>)
   80762:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   80766:	f100 0e01 	add.w	lr, r0, #1
   8076a:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
   8076e:	4911      	ldr	r1, [pc, #68]	; (807b4 <udi_cdc_multi_putc+0x84>)
   80770:	eb01 2343 	add.w	r3, r1, r3, lsl #9
   80774:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80776:	b922      	cbnz	r2, 80782 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   80778:	2301      	movs	r3, #1
   8077a:	703b      	strb	r3, [r7, #0]
   8077c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80780:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80782:	b15d      	cbz	r5, 8079c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80784:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80786:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80788:	2000      	movs	r0, #0
   8078a:	47b0      	blx	r6
   8078c:	2800      	cmp	r0, #0
   8078e:	d1dd      	bne.n	8074c <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80790:	4b09      	ldr	r3, [pc, #36]	; (807b8 <udi_cdc_multi_putc+0x88>)
   80792:	781b      	ldrb	r3, [r3, #0]
   80794:	2b00      	cmp	r3, #0
   80796:	d1f7      	bne.n	80788 <udi_cdc_multi_putc+0x58>
   80798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
   8079c:	2001      	movs	r0, #1
}
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a2:	bf00      	nop
   807a4:	20001478 	.word	0x20001478
   807a8:	0008071d 	.word	0x0008071d
   807ac:	20000a7c 	.word	0x20000a7c
   807b0:	20001c9c 	.word	0x20001c9c
   807b4:	2000189c 	.word	0x2000189c
   807b8:	20001476 	.word	0x20001476
   807bc:	20001ca0 	.word	0x20001ca0

000807c0 <switch_configurations>:
};

// hack to get around windows being unable to handle multiple configurations
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   807c0:	4b06      	ldr	r3, [pc, #24]	; (807dc <switch_configurations+0x1c>)
   807c2:	685a      	ldr	r2, [r3, #4]
   807c4:	4906      	ldr	r1, [pc, #24]	; (807e0 <switch_configurations+0x20>)
   807c6:	6011      	str	r1, [r2, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   807c8:	6859      	ldr	r1, [r3, #4]
   807ca:	4a06      	ldr	r2, [pc, #24]	; (807e4 <switch_configurations+0x24>)
   807cc:	604a      	str	r2, [r1, #4]
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   807ce:	6919      	ldr	r1, [r3, #16]
   807d0:	4805      	ldr	r0, [pc, #20]	; (807e8 <switch_configurations+0x28>)
   807d2:	6008      	str	r0, [r1, #0]
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
   807d4:	691b      	ldr	r3, [r3, #16]
   807d6:	605a      	str	r2, [r3, #4]
   807d8:	4770      	bx	lr
   807da:	bf00      	nop
   807dc:	200001dc 	.word	0x200001dc
   807e0:	20000268 	.word	0x20000268
   807e4:	200001d4 	.word	0x200001d4
   807e8:	20000330 	.word	0x20000330

000807ec <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   807ec:	2300      	movs	r3, #0
   807ee:	6043      	str	r3, [r0, #4]
   807f0:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   807f2:	6083      	str	r3, [r0, #8]
   807f4:	4770      	bx	lr

000807f6 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   807f6:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   807f8:	6804      	ldr	r4, [r0, #0]
    newhead++;
   807fa:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807fc:	2cc8      	cmp	r4, #200	; 0xc8
   807fe:	bf28      	it	cs
   80800:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   80802:	6843      	ldr	r3, [r0, #4]
   80804:	42a3      	cmp	r3, r4
   80806:	d105      	bne.n	80814 <add_to_circ_buf+0x1e>
    {
        if (!block)
   80808:	2a00      	cmp	r2, #0
   8080a:	d1fa      	bne.n	80802 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   8080c:	6883      	ldr	r3, [r0, #8]
   8080e:	3301      	adds	r3, #1
   80810:	6083      	str	r3, [r0, #8]
            return;
   80812:	e003      	b.n	8081c <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   80814:	6803      	ldr	r3, [r0, #0]
   80816:	4403      	add	r3, r0
   80818:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   8081a:	6004      	str	r4, [r0, #0]
}
   8081c:	bc10      	pop	{r4}
   8081e:	4770      	bx	lr

00080820 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   80820:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   80822:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   80824:	6801      	ldr	r1, [r0, #0]
   80826:	428b      	cmp	r3, r1
   80828:	d007      	beq.n	8083a <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   8082a:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   8082c:	29c8      	cmp	r1, #200	; 0xc8
   8082e:	bf28      	it	cs
   80830:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   80832:	4403      	add	r3, r0
   80834:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   80836:	6051      	str	r1, [r2, #4]

    return retval;
   80838:	4770      	bx	lr
        return SERIAL_ERR;
   8083a:	20ff      	movs	r0, #255	; 0xff
}
   8083c:	4770      	bx	lr

0008083e <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8083e:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   80840:	6840      	ldr	r0, [r0, #4]
}
   80842:	1a10      	subs	r0, r2, r0
   80844:	bf18      	it	ne
   80846:	2001      	movne	r0, #1
   80848:	4770      	bx	lr

0008084a <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   8084a:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8084c:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8084e:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   80850:	bf48      	it	mi
   80852:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   80854:	4770      	bx	lr
	...

00080858 <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   80858:	b538      	push	{r3, r4, r5, lr}
   8085a:	4605      	mov	r5, r0
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
	#else
	spi_enable_clock(SPI);
   8085c:	4c18      	ldr	r4, [pc, #96]	; (808c0 <fpga_program_spi_setup1+0x68>)
   8085e:	4620      	mov	r0, r4
   80860:	4b18      	ldr	r3, [pc, #96]	; (808c4 <fpga_program_spi_setup1+0x6c>)
   80862:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80864:	2380      	movs	r3, #128	; 0x80
   80866:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80868:	6863      	ldr	r3, [r4, #4]
   8086a:	f043 0301 	orr.w	r3, r3, #1
   8086e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80870:	6863      	ldr	r3, [r4, #4]
   80872:	f043 0310 	orr.w	r3, r3, #16
   80876:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80878:	6863      	ldr	r3, [r4, #4]
   8087a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8087e:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80880:	2200      	movs	r2, #0
   80882:	4611      	mov	r1, r2
   80884:	4620      	mov	r0, r4
   80886:	4b10      	ldr	r3, [pc, #64]	; (808c8 <fpga_program_spi_setup1+0x70>)
   80888:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8088a:	2201      	movs	r2, #1
   8088c:	2100      	movs	r1, #0
   8088e:	4620      	mov	r0, r4
   80890:	4b0e      	ldr	r3, [pc, #56]	; (808cc <fpga_program_spi_setup1+0x74>)
   80892:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80894:	490e      	ldr	r1, [pc, #56]	; (808d0 <fpga_program_spi_setup1+0x78>)
   80896:	4628      	mov	r0, r5
   80898:	4b0e      	ldr	r3, [pc, #56]	; (808d4 <fpga_program_spi_setup1+0x7c>)
   8089a:	4798      	blx	r3
   8089c:	b2c2      	uxtb	r2, r0
   8089e:	2100      	movs	r1, #0
   808a0:	4620      	mov	r0, r4
   808a2:	4b0d      	ldr	r3, [pc, #52]	; (808d8 <fpga_program_spi_setup1+0x80>)
   808a4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   808a6:	2301      	movs	r3, #1
   808a8:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   808aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808ae:	200e      	movs	r0, #14
   808b0:	4c0a      	ldr	r4, [pc, #40]	; (808dc <fpga_program_spi_setup1+0x84>)
   808b2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   808b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808b8:	200f      	movs	r0, #15
   808ba:	47a0      	blx	r4
   808bc:	bd38      	pop	{r3, r4, r5, pc}
   808be:	bf00      	nop
   808c0:	40008000 	.word	0x40008000
   808c4:	00084555 	.word	0x00084555
   808c8:	000845d7 	.word	0x000845d7
   808cc:	000845f5 	.word	0x000845f5
   808d0:	05b8d800 	.word	0x05b8d800
   808d4:	00084613 	.word	0x00084613
   808d8:	00084629 	.word	0x00084629
   808dc:	00084171 	.word	0x00084171

000808e0 <fpga_program_spi_sendbyte>:
	#endif

}

void fpga_program_spi_sendbyte(uint8_t databyte)
{
   808e0:	b510      	push	{r4, lr}
	#if AVRISP_USEUART
	usart_putchar(AVRISP_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   808e2:	2300      	movs	r3, #0
   808e4:	461a      	mov	r2, r3
   808e6:	4601      	mov	r1, r0
   808e8:	4801      	ldr	r0, [pc, #4]	; (808f0 <fpga_program_spi_sendbyte+0x10>)
   808ea:	4c02      	ldr	r4, [pc, #8]	; (808f4 <fpga_program_spi_sendbyte+0x14>)
   808ec:	47a0      	blx	r4
   808ee:	bd10      	pop	{r4, pc}
   808f0:	40008000 	.word	0x40008000
   808f4:	000845a3 	.word	0x000845a3

000808f8 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   808f8:	b538      	push	{r3, r4, r5, lr}
   808fa:	4605      	mov	r5, r0
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   808fc:	2008      	movs	r0, #8
   808fe:	4b19      	ldr	r3, [pc, #100]	; (80964 <fpga_program_setup1+0x6c>)
   80900:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80902:	4c19      	ldr	r4, [pc, #100]	; (80968 <fpga_program_setup1+0x70>)
   80904:	4620      	mov	r0, r4
   80906:	4b19      	ldr	r3, [pc, #100]	; (8096c <fpga_program_setup1+0x74>)
   80908:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8090a:	2380      	movs	r3, #128	; 0x80
   8090c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8090e:	6863      	ldr	r3, [r4, #4]
   80910:	f043 0301 	orr.w	r3, r3, #1
   80914:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80916:	6863      	ldr	r3, [r4, #4]
   80918:	f043 0310 	orr.w	r3, r3, #16
   8091c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8091e:	6863      	ldr	r3, [r4, #4]
   80920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80924:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80926:	2200      	movs	r2, #0
   80928:	4611      	mov	r1, r2
   8092a:	4620      	mov	r0, r4
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <fpga_program_setup1+0x78>)
   8092e:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80930:	2201      	movs	r2, #1
   80932:	2100      	movs	r1, #0
   80934:	4620      	mov	r0, r4
   80936:	4b0f      	ldr	r3, [pc, #60]	; (80974 <fpga_program_setup1+0x7c>)
   80938:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   8093a:	490f      	ldr	r1, [pc, #60]	; (80978 <fpga_program_setup1+0x80>)
   8093c:	4628      	mov	r0, r5
   8093e:	4b0f      	ldr	r3, [pc, #60]	; (8097c <fpga_program_setup1+0x84>)
   80940:	4798      	blx	r3
   80942:	b2c2      	uxtb	r2, r0
   80944:	2100      	movs	r1, #0
   80946:	4620      	mov	r0, r4
   80948:	4b0d      	ldr	r3, [pc, #52]	; (80980 <fpga_program_setup1+0x88>)
   8094a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8094c:	2301      	movs	r3, #1
   8094e:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80950:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80954:	200e      	movs	r0, #14
   80956:	4c0b      	ldr	r4, [pc, #44]	; (80984 <fpga_program_setup1+0x8c>)
   80958:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8095a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8095e:	200f      	movs	r0, #15
   80960:	47a0      	blx	r4
   80962:	bd38      	pop	{r3, r4, r5, pc}
   80964:	00084155 	.word	0x00084155
   80968:	40008000 	.word	0x40008000
   8096c:	00084555 	.word	0x00084555
   80970:	000845d7 	.word	0x000845d7
   80974:	000845f5 	.word	0x000845f5
   80978:	05b8d800 	.word	0x05b8d800
   8097c:	00084613 	.word	0x00084613
   80980:	00084629 	.word	0x00084629
   80984:	00084171 	.word	0x00084171

00080988 <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80988:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8098a:	2008      	movs	r0, #8
   8098c:	4b01      	ldr	r3, [pc, #4]	; (80994 <fpga_program_setup2+0xc>)
   8098e:	4798      	blx	r3
   80990:	bd08      	pop	{r3, pc}
   80992:	bf00      	nop
   80994:	0008413b 	.word	0x0008413b

00080998 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80998:	b510      	push	{r4, lr}
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8099a:	2300      	movs	r3, #0
   8099c:	461a      	mov	r2, r3
   8099e:	4601      	mov	r1, r0
   809a0:	4801      	ldr	r0, [pc, #4]	; (809a8 <fpga_program_sendbyte+0x10>)
   809a2:	4c02      	ldr	r4, [pc, #8]	; (809ac <fpga_program_sendbyte+0x14>)
   809a4:	47a0      	blx	r4
   809a6:	bd10      	pop	{r4, pc}
   809a8:	40008000 	.word	0x40008000
   809ac:	000845a3 	.word	0x000845a3

000809b0 <ISPProtocol_ProgramMemory>:
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   809b0:	4b91      	ldr	r3, [pc, #580]	; (80bf8 <ISPProtocol_ProgramMemory+0x248>)
   809b2:	899b      	ldrh	r3, [r3, #12]
   809b4:	2b09      	cmp	r3, #9
   809b6:	d000      	beq.n	809ba <ISPProtocol_ProgramMemory+0xa>
   809b8:	4770      	bx	lr
{
   809ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809be:	b08d      	sub	sp, #52	; 0x34
   809c0:	4602      	mov	r2, r0
   809c2:	460c      	mov	r4, r1
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   809c4:	4b8c      	ldr	r3, [pc, #560]	; (80bf8 <ISPProtocol_ProgramMemory+0x248>)
   809c6:	689d      	ldr	r5, [r3, #8]
   809c8:	ab09      	add	r3, sp, #36	; 0x24
   809ca:	6828      	ldr	r0, [r5, #0]
   809cc:	6869      	ldr	r1, [r5, #4]
   809ce:	c303      	stmia	r3!, {r0, r1}
   809d0:	8929      	ldrh	r1, [r5, #8]
   809d2:	8019      	strh	r1, [r3, #0]

	if (Write_Memory_Params.BytesToWrite > 256)
   809d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   809d8:	9303      	str	r3, [sp, #12]
   809da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   809de:	d909      	bls.n	809f4 <ISPProtocol_ProgramMemory+0x44>
	{
		avrisp_status_payload[0] = V2Command;
   809e0:	4b86      	ldr	r3, [pc, #536]	; (80bfc <ISPProtocol_ProgramMemory+0x24c>)
   809e2:	701a      	strb	r2, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   809e4:	22c0      	movs	r2, #192	; 0xc0
   809e6:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   809e8:	2202      	movs	r2, #2
   809ea:	4b85      	ldr	r3, [pc, #532]	; (80c00 <ISPProtocol_ProgramMemory+0x250>)
   809ec:	801a      	strh	r2, [r3, #0]
	////printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   809ee:	b00d      	add	sp, #52	; 0x34
   809f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   809f4:	2a13      	cmp	r2, #19
   809f6:	bf0c      	ite	eq
   809f8:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   809fc:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   80a00:	9304      	str	r3, [sp, #16]
   80a02:	9405      	str	r4, [sp, #20]
   80a04:	4615      	mov	r5, r2
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   80a06:	4b7f      	ldr	r3, [pc, #508]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a08:	681b      	ldr	r3, [r3, #0]
   80a0a:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80a0c:	9b03      	ldr	r3, [sp, #12]
   80a0e:	2b00      	cmp	r3, #0
   80a10:	d03e      	beq.n	80a90 <ISPProtocol_ProgramMemory+0xe0>
   80a12:	3b01      	subs	r3, #1
   80a14:	b29b      	uxth	r3, r3
   80a16:	3301      	adds	r3, #1
   80a18:	18e3      	adds	r3, r4, r3
   80a1a:	9306      	str	r3, [sp, #24]
   80a1c:	4627      	mov	r7, r4
   80a1e:	2300      	movs	r3, #0
   80a20:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   80a22:	46ab      	mov	fp, r5
   80a24:	e092      	b.n	80b4c <ISPProtocol_ProgramMemory+0x19c>
			ISPTarget_LoadExtendedAddress();
   80a26:	4b78      	ldr	r3, [pc, #480]	; (80c08 <ISPProtocol_ProgramMemory+0x258>)
   80a28:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80a2a:	4b78      	ldr	r3, [pc, #480]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80a2c:	f04f 0200 	mov.w	r2, #0
   80a30:	701a      	strb	r2, [r3, #0]
   80a32:	e099      	b.n	80b68 <ISPProtocol_ProgramMemory+0x1b8>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   80a34:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a38:	f043 0308 	orr.w	r3, r3, #8
   80a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a40:	4b70      	ldr	r3, [pc, #448]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a42:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a44:	f019 0f01 	tst.w	r9, #1
   80a48:	f000 80c6 	beq.w	80bd8 <ISPProtocol_ProgramMemory+0x228>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a4c:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   80a4e:	4a6d      	ldr	r2, [pc, #436]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a50:	6813      	ldr	r3, [r2, #0]
   80a52:	3301      	adds	r3, #1
   80a54:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a56:	f1bb 0f13 	cmp.w	fp, #19
   80a5a:	d174      	bne.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80a5c:	b29b      	uxth	r3, r3
   80a5e:	2b00      	cmp	r3, #0
   80a60:	d171      	bne.n	80b46 <ISPProtocol_ProgramMemory+0x196>
			  MustLoadExtendedAddress = true;
   80a62:	2301      	movs	r3, #1
   80a64:	4a69      	ldr	r2, [pc, #420]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80a66:	7013      	strb	r3, [r2, #0]
   80a68:	e06d      	b.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80a6a:	9303      	str	r3, [sp, #12]
   80a6c:	e056      	b.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a6e:	9303      	str	r3, [sp, #12]
   80a70:	e063      	b.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
   80a72:	465d      	mov	r5, fp
   80a74:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80a76:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   80a7a:	fa4f f488 	sxtb.w	r4, r8
   80a7e:	2c00      	cmp	r4, #0
   80a80:	db0a      	blt.n	80a98 <ISPProtocol_ProgramMemory+0xe8>
	avrisp_status_payload[0] = V2Command;
   80a82:	4a5e      	ldr	r2, [pc, #376]	; (80bfc <ISPProtocol_ProgramMemory+0x24c>)
   80a84:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   80a86:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80a88:	2202      	movs	r2, #2
   80a8a:	4b5d      	ldr	r3, [pc, #372]	; (80c00 <ISPProtocol_ProgramMemory+0x250>)
   80a8c:	801a      	strh	r2, [r3, #0]
   80a8e:	e7ae      	b.n	809ee <ISPProtocol_ProgramMemory+0x3e>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80a90:	2300      	movs	r3, #0
   80a92:	e7f0      	b.n	80a76 <ISPProtocol_ProgramMemory+0xc6>
   80a94:	465d      	mov	r5, fp
   80a96:	e7ee      	b.n	80a76 <ISPProtocol_ProgramMemory+0xc6>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   80a98:	4f5d      	ldr	r7, [pc, #372]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80a9a:	2300      	movs	r3, #0
   80a9c:	461a      	mov	r2, r3
   80a9e:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80aa2:	4638      	mov	r0, r7
   80aa4:	4e5b      	ldr	r6, [pc, #364]	; (80c14 <ISPProtocol_ProgramMemory+0x264>)
   80aa6:	47b0      	blx	r6
   80aa8:	2300      	movs	r3, #0
   80aaa:	461a      	mov	r2, r3
   80aac:	9907      	ldr	r1, [sp, #28]
   80aae:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80ab2:	4638      	mov	r0, r7
   80ab4:	47b0      	blx	r6
   80ab6:	2300      	movs	r3, #0
   80ab8:	461a      	mov	r2, r3
   80aba:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80abe:	4638      	mov	r0, r7
   80ac0:	47b0      	blx	r6
   80ac2:	2300      	movs	r3, #0
   80ac4:	461a      	mov	r2, r3
   80ac6:	4619      	mov	r1, r3
   80ac8:	4638      	mov	r0, r7
   80aca:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80acc:	f018 0f20 	tst.w	r8, #32
   80ad0:	d007      	beq.n	80ae2 <ISPProtocol_ProgramMemory+0x132>
   80ad2:	9b03      	ldr	r3, [sp, #12]
   80ad4:	b92b      	cbnz	r3, 80ae2 <ISPProtocol_ProgramMemory+0x132>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   80ad6:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   80ada:	f043 0310 	orr.w	r3, r3, #16
   80ade:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80ae2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80ae6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80aea:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80aee:	9200      	str	r2, [sp, #0]
   80af0:	9a04      	ldr	r2, [sp, #16]
   80af2:	9903      	ldr	r1, [sp, #12]
   80af4:	4c48      	ldr	r4, [pc, #288]	; (80c18 <ISPProtocol_ProgramMemory+0x268>)
   80af6:	47a0      	blx	r4
   80af8:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80afa:	2d13      	cmp	r5, #19
   80afc:	d1c1      	bne.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
   80afe:	4a41      	ldr	r2, [pc, #260]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80b00:	8812      	ldrh	r2, [r2, #0]
   80b02:	2a00      	cmp	r2, #0
   80b04:	d1bd      	bne.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
		  MustLoadExtendedAddress = true;
   80b06:	2101      	movs	r1, #1
   80b08:	4a40      	ldr	r2, [pc, #256]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80b0a:	7011      	strb	r1, [r2, #0]
   80b0c:	e7b9      	b.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80b0e:	f019 0f01 	tst.w	r9, #1
   80b12:	d064      	beq.n	80bde <ISPProtocol_ProgramMemory+0x22e>
   80b14:	e011      	b.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
   80b16:	f019 0f01 	tst.w	r9, #1
   80b1a:	d10e      	bne.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80b1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80b20:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80b24:	9200      	str	r2, [sp, #0]
   80b26:	9a04      	ldr	r2, [sp, #16]
   80b28:	9903      	ldr	r1, [sp, #12]
   80b2a:	4648      	mov	r0, r9
   80b2c:	4c3a      	ldr	r4, [pc, #232]	; (80c18 <ISPProtocol_ProgramMemory+0x268>)
   80b2e:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   80b30:	4603      	mov	r3, r0
   80b32:	2800      	cmp	r0, #0
   80b34:	d1ae      	bne.n	80a94 <ISPProtocol_ProgramMemory+0xe4>
			PollAddress = 0;
   80b36:	2300      	movs	r3, #0
   80b38:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80b3a:	f018 0f01 	tst.w	r8, #1
   80b3e:	d186      	bne.n	80a4e <ISPProtocol_ProgramMemory+0x9e>
   80b40:	f1bb 0f15 	cmp.w	fp, #21
   80b44:	d053      	beq.n	80bee <ISPProtocol_ProgramMemory+0x23e>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80b46:	9b06      	ldr	r3, [sp, #24]
   80b48:	429f      	cmp	r7, r3
   80b4a:	d092      	beq.n	80a72 <ISPProtocol_ProgramMemory+0xc2>
   80b4c:	9b05      	ldr	r3, [sp, #20]
   80b4e:	eba7 0803 	sub.w	r8, r7, r3
   80b52:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80b56:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80b5a:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80b5e:	4b2b      	ldr	r3, [pc, #172]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80b60:	781b      	ldrb	r3, [r3, #0]
   80b62:	2b00      	cmp	r3, #0
   80b64:	f47f af5f 	bne.w	80a26 <ISPProtocol_ProgramMemory+0x76>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80b68:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   80b6c:	2300      	movs	r3, #0
   80b6e:	461a      	mov	r2, r3
   80b70:	4651      	mov	r1, sl
   80b72:	4827      	ldr	r0, [pc, #156]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b74:	4c27      	ldr	r4, [pc, #156]	; (80c14 <ISPProtocol_ProgramMemory+0x264>)
   80b76:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b78:	4d22      	ldr	r5, [pc, #136]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80b7a:	2300      	movs	r3, #0
   80b7c:	461a      	mov	r2, r3
   80b7e:	7869      	ldrb	r1, [r5, #1]
   80b80:	4823      	ldr	r0, [pc, #140]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b82:	47a0      	blx	r4
   80b84:	2300      	movs	r3, #0
   80b86:	461a      	mov	r2, r3
   80b88:	7829      	ldrb	r1, [r5, #0]
   80b8a:	4821      	ldr	r0, [pc, #132]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b8c:	47a0      	blx	r4
   80b8e:	2300      	movs	r3, #0
   80b90:	461a      	mov	r2, r3
   80b92:	4631      	mov	r1, r6
   80b94:	481e      	ldr	r0, [pc, #120]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b96:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80b98:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80b9c:	bf04      	itt	eq
   80b9e:	f08a 0a08 	eoreq.w	sl, sl, #8
   80ba2:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80ba6:	9b03      	ldr	r3, [sp, #12]
   80ba8:	2b00      	cmp	r3, #0
   80baa:	d1b4      	bne.n	80b16 <ISPProtocol_ProgramMemory+0x166>
   80bac:	9b04      	ldr	r3, [sp, #16]
   80bae:	42b3      	cmp	r3, r6
   80bb0:	d0ad      	beq.n	80b0e <ISPProtocol_ProgramMemory+0x15e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80bb2:	f018 0f01 	tst.w	r8, #1
   80bb6:	d003      	beq.n	80bc0 <ISPProtocol_ProgramMemory+0x210>
   80bb8:	f1bb 0f13 	cmp.w	fp, #19
   80bbc:	f43f af3a 	beq.w	80a34 <ISPProtocol_ProgramMemory+0x84>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80bc0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80bc4:	f023 0308 	bic.w	r3, r3, #8
   80bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80bcc:	4b0d      	ldr	r3, [pc, #52]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80bce:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80bd0:	f019 0f01 	tst.w	r9, #1
   80bd4:	f47f af4b 	bne.w	80a6e <ISPProtocol_ProgramMemory+0xbe>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80bd8:	2b00      	cmp	r3, #0
   80bda:	f47f af46 	bne.w	80a6a <ISPProtocol_ProgramMemory+0xba>
   80bde:	f019 0f08 	tst.w	r9, #8
   80be2:	d19b      	bne.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80be4:	f029 0906 	bic.w	r9, r9, #6
   80be8:	f049 0902 	orr.w	r9, r9, #2
   80bec:	e796      	b.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			CurrentAddress++;
   80bee:	4a05      	ldr	r2, [pc, #20]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80bf0:	6813      	ldr	r3, [r2, #0]
   80bf2:	3301      	adds	r3, #1
   80bf4:	6013      	str	r3, [r2, #0]
   80bf6:	e7a6      	b.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80bf8:	200029a8 	.word	0x200029a8
   80bfc:	20002968 	.word	0x20002968
   80c00:	20002966 	.word	0x20002966
   80c04:	20002988 	.word	0x20002988
   80c08:	00081231 	.word	0x00081231
   80c0c:	20002964 	.word	0x20002964
   80c10:	40008000 	.word	0x40008000
   80c14:	000845a3 	.word	0x000845a3
   80c18:	00081271 	.word	0x00081271

00080c1c <ISPProtocol_ReadMemory>:
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80c1c:	4b43      	ldr	r3, [pc, #268]	; (80d2c <ISPProtocol_ReadMemory+0x110>)
   80c1e:	899b      	ldrh	r3, [r3, #12]
   80c20:	2b03      	cmp	r3, #3
   80c22:	d000      	beq.n	80c26 <ISPProtocol_ReadMemory+0xa>
   80c24:	4770      	bx	lr
{
   80c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c2a:	b085      	sub	sp, #20
		//printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80c2c:	4b3f      	ldr	r3, [pc, #252]	; (80d2c <ISPProtocol_ReadMemory+0x110>)
   80c2e:	689b      	ldr	r3, [r3, #8]
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80c34:	4a3e      	ldr	r2, [pc, #248]	; (80d30 <ISPProtocol_ReadMemory+0x114>)
   80c36:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80c38:	24c0      	movs	r4, #192	; 0xc0
   80c3a:	7054      	strb	r4, [r2, #1]
	avrisp_status_payload_size = 2;
   80c3c:	2402      	movs	r4, #2
   80c3e:	4a3d      	ldr	r2, [pc, #244]	; (80d34 <ISPProtocol_ReadMemory+0x118>)
   80c40:	8014      	strh	r4, [r2, #0]
		
	////printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80c42:	b29b      	uxth	r3, r3
   80c44:	9301      	str	r3, [sp, #4]
   80c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80c4a:	d86c      	bhi.n	80d26 <ISPProtocol_ReadMemory+0x10a>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c4c:	2b00      	cmp	r3, #0
   80c4e:	d064      	beq.n	80d1a <ISPProtocol_ReadMemory+0xfe>
   80c50:	4682      	mov	sl, r0
   80c52:	1e4f      	subs	r7, r1, #1
   80c54:	2600      	movs	r6, #0
   80c56:	4c38      	ldr	r4, [pc, #224]	; (80d38 <ISPProtocol_ReadMemory+0x11c>)
   80c58:	46b9      	mov	r9, r7
   80c5a:	e023      	b.n	80ca4 <ISPProtocol_ReadMemory+0x88>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
   80c5c:	4b37      	ldr	r3, [pc, #220]	; (80d3c <ISPProtocol_ReadMemory+0x120>)
   80c5e:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80c60:	4b37      	ldr	r3, [pc, #220]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80c62:	f04f 0200 	mov.w	r2, #0
   80c66:	701a      	strb	r2, [r3, #0]
   80c68:	e022      	b.n	80cb0 <ISPProtocol_ReadMemory+0x94>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80c6a:	f088 0808 	eor.w	r8, r8, #8
   80c6e:	f88d 800e 	strb.w	r8, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c72:	f01b 0f01 	tst.w	fp, #1
   80c76:	d010      	beq.n	80c9a <ISPProtocol_ReadMemory+0x7e>
		{
			CurrentAddress++;
   80c78:	4a32      	ldr	r2, [pc, #200]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80c7a:	6813      	ldr	r3, [r2, #0]
   80c7c:	3301      	adds	r3, #1
   80c7e:	6013      	str	r3, [r2, #0]
   80c80:	e006      	b.n	80c90 <ISPProtocol_ReadMemory+0x74>
   80c82:	4a30      	ldr	r2, [pc, #192]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80c84:	6813      	ldr	r3, [r2, #0]
   80c86:	3301      	adds	r3, #1
   80c88:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c8a:	f1ba 0f16 	cmp.w	sl, #22
   80c8e:	d004      	beq.n	80c9a <ISPProtocol_ReadMemory+0x7e>
   80c90:	b29b      	uxth	r3, r3
   80c92:	b913      	cbnz	r3, 80c9a <ISPProtocol_ReadMemory+0x7e>
			  MustLoadExtendedAddress = true;
   80c94:	2301      	movs	r3, #1
   80c96:	4a2a      	ldr	r2, [pc, #168]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80c98:	7013      	strb	r3, [r2, #0]
   80c9a:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c9c:	b2b3      	uxth	r3, r6
   80c9e:	9a01      	ldr	r2, [sp, #4]
   80ca0:	429a      	cmp	r2, r3
   80ca2:	d93a      	bls.n	80d1a <ISPProtocol_ReadMemory+0xfe>
   80ca4:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   80ca8:	4b25      	ldr	r3, [pc, #148]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	2b00      	cmp	r3, #0
   80cae:	d1d5      	bne.n	80c5c <ISPProtocol_ReadMemory+0x40>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80cb0:	f89d 800e 	ldrb.w	r8, [sp, #14]
   80cb4:	2300      	movs	r3, #0
   80cb6:	461a      	mov	r2, r3
   80cb8:	4641      	mov	r1, r8
   80cba:	4620      	mov	r0, r4
   80cbc:	4d22      	ldr	r5, [pc, #136]	; (80d48 <ISPProtocol_ReadMemory+0x12c>)
   80cbe:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80cc0:	4f20      	ldr	r7, [pc, #128]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80cc2:	2300      	movs	r3, #0
   80cc4:	461a      	mov	r2, r3
   80cc6:	7879      	ldrb	r1, [r7, #1]
   80cc8:	4620      	mov	r0, r4
   80cca:	47a8      	blx	r5
   80ccc:	2300      	movs	r3, #0
   80cce:	461a      	mov	r2, r3
   80cd0:	7839      	ldrb	r1, [r7, #0]
   80cd2:	4620      	mov	r0, r4
   80cd4:	47a8      	blx	r5
   80cd6:	2300      	movs	r3, #0
   80cd8:	461a      	mov	r2, r3
   80cda:	4619      	mov	r1, r3
   80cdc:	4620      	mov	r0, r4
   80cde:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80ce0:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   80ce2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ce6:	d0fb      	beq.n	80ce0 <ISPProtocol_ReadMemory+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80ce8:	f10d 0209 	add.w	r2, sp, #9
   80cec:	f10d 010a 	add.w	r1, sp, #10
   80cf0:	4620      	mov	r0, r4
   80cf2:	4b16      	ldr	r3, [pc, #88]	; (80d4c <ISPProtocol_ReadMemory+0x130>)
   80cf4:	4798      	blx	r3
			return  ReceivedByte;
   80cf6:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80cfa:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80cfe:	f1ba 0f14 	cmp.w	sl, #20
   80d02:	d0b2      	beq.n	80c6a <ISPProtocol_ReadMemory+0x4e>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80d04:	f01b 0f01 	tst.w	fp, #1
   80d08:	d1bb      	bne.n	80c82 <ISPProtocol_ReadMemory+0x66>
   80d0a:	f1ba 0f16 	cmp.w	sl, #22
   80d0e:	d1c4      	bne.n	80c9a <ISPProtocol_ReadMemory+0x7e>
			CurrentAddress++;
   80d10:	4a0c      	ldr	r2, [pc, #48]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80d12:	6813      	ldr	r3, [r2, #0]
   80d14:	3301      	adds	r3, #1
   80d16:	6013      	str	r3, [r2, #0]
   80d18:	e7bf      	b.n	80c9a <ISPProtocol_ReadMemory+0x7e>
		}
	}

	////printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d1a:	2200      	movs	r2, #0
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <ISPProtocol_ReadMemory+0x114>)
   80d1e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80d20:	2202      	movs	r2, #2
   80d22:	4b04      	ldr	r3, [pc, #16]	; (80d34 <ISPProtocol_ReadMemory+0x118>)
   80d24:	801a      	strh	r2, [r3, #0]
}
   80d26:	b005      	add	sp, #20
   80d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d2c:	200029a8 	.word	0x200029a8
   80d30:	20002968 	.word	0x20002968
   80d34:	20002966 	.word	0x20002966
   80d38:	40008000 	.word	0x40008000
   80d3c:	00081231 	.word	0x00081231
   80d40:	20002964 	.word	0x20002964
   80d44:	20002988 	.word	0x20002988
   80d48:	000845a3 	.word	0x000845a3
   80d4c:	00084575 	.word	0x00084575

00080d50 <ISPProtocol_ReadFuseLockSigOSCCAL>:
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80d50:	4b20      	ldr	r3, [pc, #128]	; (80dd4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d52:	899b      	ldrh	r3, [r3, #12]
   80d54:	2b05      	cmp	r3, #5
   80d56:	d000      	beq.n	80d5a <ISPProtocol_ReadFuseLockSigOSCCAL+0xa>
   80d58:	4770      	bx	lr
{
   80d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d5e:	b085      	sub	sp, #20
   80d60:	4607      	mov	r7, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80d62:	4b1c      	ldr	r3, [pc, #112]	; (80dd4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d64:	689b      	ldr	r3, [r3, #8]
   80d66:	6818      	ldr	r0, [r3, #0]
   80d68:	9002      	str	r0, [sp, #8]
   80d6a:	791a      	ldrb	r2, [r3, #4]
   80d6c:	f88d 200c 	strb.w	r2, [sp, #12]
   80d70:	f893 b000 	ldrb.w	fp, [r3]
   80d74:	f10d 0609 	add.w	r6, sp, #9
   80d78:	ad01      	add	r5, sp, #4
   80d7a:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d7e:	4c16      	ldr	r4, [pc, #88]	; (80dd8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x88>)
   80d80:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80de4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   80d84:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80de8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>
		  spi_write(SPI, data, 0, 0);
   80d88:	2300      	movs	r3, #0
   80d8a:	461a      	mov	r2, r3
   80d8c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80d90:	4620      	mov	r0, r4
   80d92:	47c8      	blx	r9
   80d94:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80d96:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d9a:	d0fb      	beq.n	80d94 <ISPProtocol_ReadFuseLockSigOSCCAL+0x44>
			spi_read(SPI, &ReceivedByte, &_);
   80d9c:	f10d 0201 	add.w	r2, sp, #1
   80da0:	f10d 0102 	add.w	r1, sp, #2
   80da4:	4620      	mov	r0, r4
   80da6:	47c0      	blx	r8
			return  ReceivedByte;
   80da8:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80dac:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80db0:	4555      	cmp	r5, sl
   80db2:	d1e9      	bne.n	80d88 <ISPProtocol_ReadFuseLockSigOSCCAL+0x38>

	avrisp_status_payload[0] = V2Command;
   80db4:	4b09      	ldr	r3, [pc, #36]	; (80ddc <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80db6:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80db8:	2200      	movs	r2, #0
   80dba:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80dbc:	a904      	add	r1, sp, #16
   80dbe:	448b      	add	fp, r1
   80dc0:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80dc4:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80dc6:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80dc8:	2204      	movs	r2, #4
   80dca:	4b05      	ldr	r3, [pc, #20]	; (80de0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80dcc:	801a      	strh	r2, [r3, #0]
}
   80dce:	b005      	add	sp, #20
   80dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80dd4:	200029a8 	.word	0x200029a8
   80dd8:	40008000 	.word	0x40008000
   80ddc:	20002968 	.word	0x20002968
   80de0:	20002966 	.word	0x20002966
   80de4:	000845a3 	.word	0x000845a3
   80de8:	00084575 	.word	0x00084575

00080dec <ISPProtocol_WriteFuseLock>:
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80dec:	4b13      	ldr	r3, [pc, #76]	; (80e3c <ISPProtocol_WriteFuseLock+0x50>)
   80dee:	899b      	ldrh	r3, [r3, #12]
   80df0:	2b04      	cmp	r3, #4
   80df2:	d000      	beq.n	80df6 <ISPProtocol_WriteFuseLock+0xa>
   80df4:	4770      	bx	lr
{
   80df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80dfa:	b083      	sub	sp, #12
   80dfc:	4681      	mov	r9, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80dfe:	4b0f      	ldr	r3, [pc, #60]	; (80e3c <ISPProtocol_WriteFuseLock+0x50>)
   80e00:	689b      	ldr	r3, [r3, #8]
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	ac02      	add	r4, sp, #8
   80e06:	f844 3d04 	str.w	r3, [r4, #-4]!
   80e0a:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   80e0e:	4f0c      	ldr	r7, [pc, #48]	; (80e40 <ISPProtocol_WriteFuseLock+0x54>)
   80e10:	2600      	movs	r6, #0
   80e12:	4d0c      	ldr	r5, [pc, #48]	; (80e44 <ISPProtocol_WriteFuseLock+0x58>)
   80e14:	4633      	mov	r3, r6
   80e16:	4632      	mov	r2, r6
   80e18:	f814 1b01 	ldrb.w	r1, [r4], #1
   80e1c:	4638      	mov	r0, r7
   80e1e:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80e20:	4544      	cmp	r4, r8
   80e22:	d1f7      	bne.n	80e14 <ISPProtocol_WriteFuseLock+0x28>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80e24:	4b08      	ldr	r3, [pc, #32]	; (80e48 <ISPProtocol_WriteFuseLock+0x5c>)
   80e26:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80e2a:	2200      	movs	r2, #0
   80e2c:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80e2e:	2202      	movs	r2, #2
   80e30:	4b06      	ldr	r3, [pc, #24]	; (80e4c <ISPProtocol_WriteFuseLock+0x60>)
   80e32:	801a      	strh	r2, [r3, #0]
}
   80e34:	b003      	add	sp, #12
   80e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e3a:	bf00      	nop
   80e3c:	200029a8 	.word	0x200029a8
   80e40:	40008000 	.word	0x40008000
   80e44:	000845a3 	.word	0x000845a3
   80e48:	20002968 	.word	0x20002968
   80e4c:	20002966 	.word	0x20002966

00080e50 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   80e50:	4770      	bx	lr
	...

00080e54 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80e54:	b900      	cbnz	r0, 80e58 <ISPProtocol_DelayMS+0x4>
   80e56:	4770      	bx	lr
{
   80e58:	b538      	push	{r3, r4, r5, lr}
   80e5a:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80e5c:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80e60:	2300      	movs	r3, #0
   80e62:	f243 64af 	movw	r4, #13999	; 0x36af
   80e66:	2500      	movs	r5, #0
   80e68:	4804      	ldr	r0, [pc, #16]	; (80e7c <ISPProtocol_DelayMS+0x28>)
   80e6a:	fbe0 4501 	umlal	r4, r5, r0, r1
   80e6e:	4620      	mov	r0, r4
   80e70:	4629      	mov	r1, r5
   80e72:	4c03      	ldr	r4, [pc, #12]	; (80e80 <ISPProtocol_DelayMS+0x2c>)
   80e74:	47a0      	blx	r4
   80e76:	4b03      	ldr	r3, [pc, #12]	; (80e84 <ISPProtocol_DelayMS+0x30>)
   80e78:	4798      	blx	r3
   80e7a:	bd38      	pop	{r3, r4, r5, pc}
   80e7c:	05b8d800 	.word	0x05b8d800
   80e80:	000861a5 	.word	0x000861a5
   80e84:	20000089 	.word	0x20000089

00080e88 <ISPProtocol_EnterISPMode>:
	if (udd_g_ctrlreq.payload_size != 11){
   80e88:	4b43      	ldr	r3, [pc, #268]	; (80f98 <ISPProtocol_EnterISPMode+0x110>)
   80e8a:	899b      	ldrh	r3, [r3, #12]
   80e8c:	2b0b      	cmp	r3, #11
   80e8e:	d000      	beq.n	80e92 <ISPProtocol_EnterISPMode+0xa>
   80e90:	4770      	bx	lr
{
   80e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e96:	b08b      	sub	sp, #44	; 0x2c
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80e98:	4b3f      	ldr	r3, [pc, #252]	; (80f98 <ISPProtocol_EnterISPMode+0x110>)
   80e9a:	689b      	ldr	r3, [r3, #8]
   80e9c:	aa07      	add	r2, sp, #28
   80e9e:	6818      	ldr	r0, [r3, #0]
   80ea0:	6859      	ldr	r1, [r3, #4]
   80ea2:	c203      	stmia	r2!, {r0, r1}
   80ea4:	8918      	ldrh	r0, [r3, #8]
   80ea6:	7a99      	ldrb	r1, [r3, #10]
   80ea8:	8010      	strh	r0, [r2, #0]
   80eaa:	7091      	strb	r1, [r2, #2]
   80eac:	785a      	ldrb	r2, [r3, #1]
   80eae:	4616      	mov	r6, r2
   80eb0:	9203      	str	r2, [sp, #12]
   80eb2:	7898      	ldrb	r0, [r3, #2]
   80eb4:	78dc      	ldrb	r4, [r3, #3]
   80eb6:	791a      	ldrb	r2, [r3, #4]
   80eb8:	9201      	str	r2, [sp, #4]
   80eba:	795a      	ldrb	r2, [r3, #5]
   80ebc:	9202      	str	r2, [sp, #8]
   80ebe:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   80ec2:	2200      	movs	r2, #0
   80ec4:	4b35      	ldr	r3, [pc, #212]	; (80f9c <ISPProtocol_EnterISPMode+0x114>)
   80ec6:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80ec8:	4d35      	ldr	r5, [pc, #212]	; (80fa0 <ISPProtocol_EnterISPMode+0x118>)
   80eca:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80ecc:	4b35      	ldr	r3, [pc, #212]	; (80fa4 <ISPProtocol_EnterISPMode+0x11c>)
   80ece:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80ed0:	2001      	movs	r0, #1
   80ed2:	4b35      	ldr	r3, [pc, #212]	; (80fa8 <ISPProtocol_EnterISPMode+0x120>)
   80ed4:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ed6:	4630      	mov	r0, r6
   80ed8:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80eda:	f104 39ff 	add.w	r9, r4, #4294967295
   80ede:	fa5f f989 	uxtb.w	r9, r9
   80ee2:	2c00      	cmp	r4, #0
   80ee4:	d051      	beq.n	80f8a <ISPProtocol_EnterISPMode+0x102>
   80ee6:	4b31      	ldr	r3, [pc, #196]	; (80fac <ISPProtocol_EnterISPMode+0x124>)
   80ee8:	681b      	ldr	r3, [r3, #0]
   80eea:	b123      	cbz	r3, 80ef6 <ISPProtocol_EnterISPMode+0x6e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80eec:	4f2c      	ldr	r7, [pc, #176]	; (80fa0 <ISPProtocol_EnterISPMode+0x118>)
   80eee:	4c30      	ldr	r4, [pc, #192]	; (80fb0 <ISPProtocol_EnterISPMode+0x128>)
   80ef0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80fc0 <ISPProtocol_EnterISPMode+0x138>
   80ef4:	e01f      	b.n	80f36 <ISPProtocol_EnterISPMode+0xae>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80ef6:	23c0      	movs	r3, #192	; 0xc0
   80ef8:	e03d      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80efa:	f1bb 0f00 	cmp.w	fp, #0
   80efe:	d039      	beq.n	80f74 <ISPProtocol_EnterISPMode+0xec>
   80f00:	ab0a      	add	r3, sp, #40	; 0x28
   80f02:	445b      	add	r3, fp
   80f04:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80f08:	9a02      	ldr	r2, [sp, #8]
   80f0a:	4293      	cmp	r3, r2
   80f0c:	d032      	beq.n	80f74 <ISPProtocol_EnterISPMode+0xec>
			ISPTarget_ChangeTargetResetLine(false);
   80f0e:	2000      	movs	r0, #0
   80f10:	4d25      	ldr	r5, [pc, #148]	; (80fa8 <ISPProtocol_EnterISPMode+0x120>)
   80f12:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80f14:	9e03      	ldr	r6, [sp, #12]
   80f16:	4630      	mov	r0, r6
   80f18:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80f1a:	2001      	movs	r0, #1
   80f1c:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80f1e:	4630      	mov	r0, r6
   80f20:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80f22:	f109 39ff 	add.w	r9, r9, #4294967295
   80f26:	fa5f f989 	uxtb.w	r9, r9
   80f2a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   80f2e:	d02e      	beq.n	80f8e <ISPProtocol_EnterISPMode+0x106>
   80f30:	4b1e      	ldr	r3, [pc, #120]	; (80fac <ISPProtocol_EnterISPMode+0x124>)
   80f32:	681b      	ldr	r3, [r3, #0]
   80f34:	b36b      	cbz	r3, 80f92 <ISPProtocol_EnterISPMode+0x10a>
   80f36:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80f3a:	ad06      	add	r5, sp, #24
   80f3c:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80f40:	9801      	ldr	r0, [sp, #4]
   80f42:	47b8      	blx	r7
   80f44:	2300      	movs	r3, #0
   80f46:	461a      	mov	r2, r3
   80f48:	f816 1b01 	ldrb.w	r1, [r6], #1
   80f4c:	4620      	mov	r0, r4
   80f4e:	47d0      	blx	sl
   80f50:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80f52:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f56:	d0fb      	beq.n	80f50 <ISPProtocol_EnterISPMode+0xc8>
			spi_read(SPI, &ReceivedByte, &_);
   80f58:	f10d 0215 	add.w	r2, sp, #21
   80f5c:	f10d 0116 	add.w	r1, sp, #22
   80f60:	4620      	mov	r0, r4
   80f62:	4b14      	ldr	r3, [pc, #80]	; (80fb4 <ISPProtocol_EnterISPMode+0x12c>)
   80f64:	4798      	blx	r3
			return  ReceivedByte;
   80f66:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80f6a:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80f6e:	4545      	cmp	r5, r8
   80f70:	d1e6      	bne.n	80f40 <ISPProtocol_EnterISPMode+0xb8>
   80f72:	e7c2      	b.n	80efa <ISPProtocol_EnterISPMode+0x72>
			ResponseStatus = STATUS_CMD_OK;
   80f74:	2300      	movs	r3, #0
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80f76:	4a10      	ldr	r2, [pc, #64]	; (80fb8 <ISPProtocol_EnterISPMode+0x130>)
   80f78:	2110      	movs	r1, #16
   80f7a:	7011      	strb	r1, [r2, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f7c:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80f7e:	2202      	movs	r2, #2
   80f80:	4b0e      	ldr	r3, [pc, #56]	; (80fbc <ISPProtocol_EnterISPMode+0x134>)
   80f82:	801a      	strh	r2, [r3, #0]
}
   80f84:	b00b      	add	sp, #44	; 0x2c
   80f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80f8a:	23c0      	movs	r3, #192	; 0xc0
   80f8c:	e7f3      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f8e:	23c0      	movs	r3, #192	; 0xc0
   80f90:	e7f1      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f92:	23c0      	movs	r3, #192	; 0xc0
   80f94:	e7ef      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f96:	bf00      	nop
   80f98:	200029a8 	.word	0x200029a8
   80f9c:	20002988 	.word	0x20002988
   80fa0:	00080e55 	.word	0x00080e55
   80fa4:	000810ad 	.word	0x000810ad
   80fa8:	0008116d 	.word	0x0008116d
   80fac:	20002990 	.word	0x20002990
   80fb0:	40008000 	.word	0x40008000
   80fb4:	00084575 	.word	0x00084575
   80fb8:	20002968 	.word	0x20002968
   80fbc:	20002966 	.word	0x20002966
   80fc0:	000845a3 	.word	0x000845a3

00080fc4 <ISPProtocol_LeaveISPMode>:
	if (udd_g_ctrlreq.payload_size != 2){
   80fc4:	4b10      	ldr	r3, [pc, #64]	; (81008 <ISPProtocol_LeaveISPMode+0x44>)
   80fc6:	899b      	ldrh	r3, [r3, #12]
   80fc8:	2b02      	cmp	r3, #2
   80fca:	d000      	beq.n	80fce <ISPProtocol_LeaveISPMode+0xa>
   80fcc:	4770      	bx	lr
{
   80fce:	b510      	push	{r4, lr}
   80fd0:	b082      	sub	sp, #8
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80fd2:	4b0d      	ldr	r3, [pc, #52]	; (81008 <ISPProtocol_LeaveISPMode+0x44>)
   80fd4:	689b      	ldr	r3, [r3, #8]
   80fd6:	8818      	ldrh	r0, [r3, #0]
   80fd8:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80fdc:	b2c0      	uxtb	r0, r0
   80fde:	4c0b      	ldr	r4, [pc, #44]	; (8100c <ISPProtocol_LeaveISPMode+0x48>)
   80fe0:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80fe2:	2000      	movs	r0, #0
   80fe4:	4b0a      	ldr	r3, [pc, #40]	; (81010 <ISPProtocol_LeaveISPMode+0x4c>)
   80fe6:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80fe8:	4b0a      	ldr	r3, [pc, #40]	; (81014 <ISPProtocol_LeaveISPMode+0x50>)
   80fea:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80fec:	f89d 0005 	ldrb.w	r0, [sp, #5]
   80ff0:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80ff2:	4b09      	ldr	r3, [pc, #36]	; (81018 <ISPProtocol_LeaveISPMode+0x54>)
   80ff4:	2211      	movs	r2, #17
   80ff6:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80ff8:	2200      	movs	r2, #0
   80ffa:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80ffc:	2202      	movs	r2, #2
   80ffe:	4b07      	ldr	r3, [pc, #28]	; (8101c <ISPProtocol_LeaveISPMode+0x58>)
   81000:	801a      	strh	r2, [r3, #0]
}
   81002:	b002      	add	sp, #8
   81004:	bd10      	pop	{r4, pc}
   81006:	bf00      	nop
   81008:	200029a8 	.word	0x200029a8
   8100c:	00080e55 	.word	0x00080e55
   81010:	0008116d 	.word	0x0008116d
   81014:	00081155 	.word	0x00081155
   81018:	20002968 	.word	0x20002968
   8101c:	20002966 	.word	0x20002966

00081020 <ISPProtocol_ChipErase>:
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   81020:	4b1b      	ldr	r3, [pc, #108]	; (81090 <ISPProtocol_ChipErase+0x70>)
   81022:	899b      	ldrh	r3, [r3, #12]
   81024:	2b06      	cmp	r3, #6
   81026:	d000      	beq.n	8102a <ISPProtocol_ChipErase+0xa>
   81028:	4770      	bx	lr
{
   8102a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8102e:	b082      	sub	sp, #8
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   81030:	4b17      	ldr	r3, [pc, #92]	; (81090 <ISPProtocol_ChipErase+0x70>)
   81032:	689b      	ldr	r3, [r3, #8]
   81034:	6818      	ldr	r0, [r3, #0]
   81036:	9000      	str	r0, [sp, #0]
   81038:	889a      	ldrh	r2, [r3, #4]
   8103a:	f8ad 2004 	strh.w	r2, [sp, #4]
   8103e:	f893 a000 	ldrb.w	sl, [r3]
   81042:	f893 9001 	ldrb.w	r9, [r3, #1]
   81046:	f10d 0402 	add.w	r4, sp, #2
   8104a:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   8104e:	4f11      	ldr	r7, [pc, #68]	; (81094 <ISPProtocol_ChipErase+0x74>)
   81050:	2600      	movs	r6, #0
   81052:	4d11      	ldr	r5, [pc, #68]	; (81098 <ISPProtocol_ChipErase+0x78>)
   81054:	4633      	mov	r3, r6
   81056:	4632      	mov	r2, r6
   81058:	f814 1b01 	ldrb.w	r1, [r4], #1
   8105c:	4638      	mov	r0, r7
   8105e:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   81060:	4544      	cmp	r4, r8
   81062:	d1f7      	bne.n	81054 <ISPProtocol_ChipErase+0x34>
	if (!(Erase_Chip_Params.PollMethod))
   81064:	f1b9 0f00 	cmp.w	r9, #0
   81068:	d10d      	bne.n	81086 <ISPProtocol_ChipErase+0x66>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   8106a:	4650      	mov	r0, sl
   8106c:	4b0b      	ldr	r3, [pc, #44]	; (8109c <ISPProtocol_ChipErase+0x7c>)
   8106e:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   81070:	4b0b      	ldr	r3, [pc, #44]	; (810a0 <ISPProtocol_ChipErase+0x80>)
   81072:	2212      	movs	r2, #18
   81074:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   81076:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   8107a:	2202      	movs	r2, #2
   8107c:	4b09      	ldr	r3, [pc, #36]	; (810a4 <ISPProtocol_ChipErase+0x84>)
   8107e:	801a      	strh	r2, [r3, #0]
}
   81080:	b002      	add	sp, #8
   81082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   81086:	4b08      	ldr	r3, [pc, #32]	; (810a8 <ISPProtocol_ChipErase+0x88>)
   81088:	4798      	blx	r3
   8108a:	4681      	mov	r9, r0
   8108c:	e7f0      	b.n	81070 <ISPProtocol_ChipErase+0x50>
   8108e:	bf00      	nop
   81090:	200029a8 	.word	0x200029a8
   81094:	40008000 	.word	0x40008000
   81098:	000845a3 	.word	0x000845a3
   8109c:	00080e55 	.word	0x00080e55
   810a0:	20002968 	.word	0x20002968
   810a4:	20002966 	.word	0x20002966
   810a8:	000811b1 	.word	0x000811b1

000810ac <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   810ac:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   810ae:	2098      	movs	r0, #152	; 0x98
   810b0:	4b1e      	ldr	r3, [pc, #120]	; (8112c <ISPTarget_EnableTargetISP+0x80>)
   810b2:	4798      	blx	r3
   810b4:	4b1e      	ldr	r3, [pc, #120]	; (81130 <ISPTarget_EnableTargetISP+0x84>)
   810b6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   810ba:	4c1e      	ldr	r4, [pc, #120]	; (81134 <ISPTarget_EnableTargetISP+0x88>)
   810bc:	4620      	mov	r0, r4
   810be:	4b1e      	ldr	r3, [pc, #120]	; (81138 <ISPTarget_EnableTargetISP+0x8c>)
   810c0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   810c2:	2380      	movs	r3, #128	; 0x80
   810c4:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   810c6:	6863      	ldr	r3, [r4, #4]
   810c8:	f043 0301 	orr.w	r3, r3, #1
   810cc:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   810ce:	6863      	ldr	r3, [r4, #4]
   810d0:	f043 0310 	orr.w	r3, r3, #16
   810d4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   810d6:	6863      	ldr	r3, [r4, #4]
   810d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   810dc:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   810de:	4917      	ldr	r1, [pc, #92]	; (8113c <ISPTarget_EnableTargetISP+0x90>)
   810e0:	4628      	mov	r0, r5
   810e2:	4b17      	ldr	r3, [pc, #92]	; (81140 <ISPTarget_EnableTargetISP+0x94>)
   810e4:	4798      	blx	r3
	if (bauddiv < 0){
   810e6:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   810e8:	bfb8      	it	lt
   810ea:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   810ec:	2200      	movs	r2, #0
   810ee:	4611      	mov	r1, r2
   810f0:	4620      	mov	r0, r4
   810f2:	4b14      	ldr	r3, [pc, #80]	; (81144 <ISPTarget_EnableTargetISP+0x98>)
   810f4:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   810f6:	2201      	movs	r2, #1
   810f8:	2100      	movs	r1, #0
   810fa:	4620      	mov	r0, r4
   810fc:	4b12      	ldr	r3, [pc, #72]	; (81148 <ISPTarget_EnableTargetISP+0x9c>)
   810fe:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   81100:	b2ea      	uxtb	r2, r5
   81102:	2100      	movs	r1, #0
   81104:	4620      	mov	r0, r4
   81106:	4b11      	ldr	r3, [pc, #68]	; (8114c <ISPTarget_EnableTargetISP+0xa0>)
   81108:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8110a:	2301      	movs	r3, #1
   8110c:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8110e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81112:	200e      	movs	r0, #14
   81114:	4c0e      	ldr	r4, [pc, #56]	; (81150 <ISPTarget_EnableTargetISP+0xa4>)
   81116:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   81118:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8111c:	200d      	movs	r0, #13
   8111e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81120:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81124:	200f      	movs	r0, #15
   81126:	47a0      	blx	r4
   81128:	bd38      	pop	{r3, r4, r5, pc}
   8112a:	bf00      	nop
   8112c:	00083071 	.word	0x00083071
   81130:	200003c0 	.word	0x200003c0
   81134:	40008000 	.word	0x40008000
   81138:	00084555 	.word	0x00084555
   8113c:	05b8d800 	.word	0x05b8d800
   81140:	00084613 	.word	0x00084613
   81144:	000845d7 	.word	0x000845d7
   81148:	000845f5 	.word	0x000845f5
   8114c:	00084629 	.word	0x00084629
   81150:	00084171 	.word	0x00084171

00081154 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81154:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81156:	4803      	ldr	r0, [pc, #12]	; (81164 <ISPTarget_DisableTargetISP+0x10>)
   81158:	2302      	movs	r3, #2
   8115a:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   8115c:	4b02      	ldr	r3, [pc, #8]	; (81168 <ISPTarget_DisableTargetISP+0x14>)
   8115e:	4798      	blx	r3
   81160:	bd08      	pop	{r3, pc}
   81162:	bf00      	nop
   81164:	40008000 	.word	0x40008000
   81168:	00084565 	.word	0x00084565

0008116c <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   8116c:	b508      	push	{r3, lr}
	if (ResetTarget)
   8116e:	b180      	cbz	r0, 81192 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81170:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81174:	2011      	movs	r0, #17
   81176:	4b0a      	ldr	r3, [pc, #40]	; (811a0 <ISPTarget_ChangeTargetResetLine+0x34>)
   81178:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8117a:	209e      	movs	r0, #158	; 0x9e
   8117c:	4b09      	ldr	r3, [pc, #36]	; (811a4 <ISPTarget_ChangeTargetResetLine+0x38>)
   8117e:	4798      	blx	r3
   81180:	b918      	cbnz	r0, 8118a <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81182:	2011      	movs	r0, #17
   81184:	4b08      	ldr	r3, [pc, #32]	; (811a8 <ISPTarget_ChangeTargetResetLine+0x3c>)
   81186:	4798      	blx	r3
   81188:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8118a:	2011      	movs	r0, #17
   8118c:	4b07      	ldr	r3, [pc, #28]	; (811ac <ISPTarget_ChangeTargetResetLine+0x40>)
   8118e:	4798      	blx	r3
   81190:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81192:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81196:	2011      	movs	r0, #17
   81198:	4b01      	ldr	r3, [pc, #4]	; (811a0 <ISPTarget_ChangeTargetResetLine+0x34>)
   8119a:	4798      	blx	r3
   8119c:	bd08      	pop	{r3, pc}
   8119e:	bf00      	nop
   811a0:	00084171 	.word	0x00084171
   811a4:	00083071 	.word	0x00083071
   811a8:	0008413b 	.word	0x0008413b
   811ac:	00084155 	.word	0x00084155

000811b0 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   811b0:	b570      	push	{r4, r5, r6, lr}
   811b2:	b082      	sub	sp, #8
   811b4:	4c1a      	ldr	r4, [pc, #104]	; (81220 <ISPTarget_WaitWhileTargetBusy+0x70>)
   811b6:	2600      	movs	r6, #0
   811b8:	4d1a      	ldr	r5, [pc, #104]	; (81224 <ISPTarget_WaitWhileTargetBusy+0x74>)
   811ba:	4633      	mov	r3, r6
   811bc:	4632      	mov	r2, r6
   811be:	21f0      	movs	r1, #240	; 0xf0
   811c0:	4620      	mov	r0, r4
   811c2:	47a8      	blx	r5
   811c4:	4633      	mov	r3, r6
   811c6:	4632      	mov	r2, r6
   811c8:	4631      	mov	r1, r6
   811ca:	4620      	mov	r0, r4
   811cc:	47a8      	blx	r5
   811ce:	4633      	mov	r3, r6
   811d0:	4632      	mov	r2, r6
   811d2:	4631      	mov	r1, r6
   811d4:	4620      	mov	r0, r4
   811d6:	47a8      	blx	r5
   811d8:	4633      	mov	r3, r6
   811da:	4632      	mov	r2, r6
   811dc:	4631      	mov	r1, r6
   811de:	4620      	mov	r0, r4
   811e0:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   811e2:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   811e4:	f413 7f00 	tst.w	r3, #512	; 0x200
   811e8:	d0fb      	beq.n	811e2 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   811ea:	f10d 0205 	add.w	r2, sp, #5
   811ee:	f10d 0106 	add.w	r1, sp, #6
   811f2:	4620      	mov	r0, r4
   811f4:	4b0c      	ldr	r3, [pc, #48]	; (81228 <ISPTarget_WaitWhileTargetBusy+0x78>)
   811f6:	4798      	blx	r3
			return  ReceivedByte;
   811f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   811fc:	f013 0f01 	tst.w	r3, #1
   81200:	d005      	beq.n	8120e <ISPTarget_WaitWhileTargetBusy+0x5e>
   81202:	4b0a      	ldr	r3, [pc, #40]	; (8122c <ISPTarget_WaitWhileTargetBusy+0x7c>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	2b00      	cmp	r3, #0
   81208:	d1d7      	bne.n	811ba <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   8120a:	2081      	movs	r0, #129	; 0x81
   8120c:	e005      	b.n	8121a <ISPTarget_WaitWhileTargetBusy+0x6a>
   8120e:	4b07      	ldr	r3, [pc, #28]	; (8122c <ISPTarget_WaitWhileTargetBusy+0x7c>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	2b00      	cmp	r3, #0
   81214:	bf14      	ite	ne
   81216:	2000      	movne	r0, #0
   81218:	2081      	moveq	r0, #129	; 0x81
}
   8121a:	b002      	add	sp, #8
   8121c:	bd70      	pop	{r4, r5, r6, pc}
   8121e:	bf00      	nop
   81220:	40008000 	.word	0x40008000
   81224:	000845a3 	.word	0x000845a3
   81228:	00084575 	.word	0x00084575
   8122c:	20002990 	.word	0x20002990

00081230 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81230:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81232:	4d0c      	ldr	r5, [pc, #48]	; (81264 <ISPTarget_LoadExtendedAddress+0x34>)
   81234:	2300      	movs	r3, #0
   81236:	461a      	mov	r2, r3
   81238:	214d      	movs	r1, #77	; 0x4d
   8123a:	4628      	mov	r0, r5
   8123c:	4c0a      	ldr	r4, [pc, #40]	; (81268 <ISPTarget_LoadExtendedAddress+0x38>)
   8123e:	47a0      	blx	r4
   81240:	2300      	movs	r3, #0
   81242:	461a      	mov	r2, r3
   81244:	4619      	mov	r1, r3
   81246:	4628      	mov	r0, r5
   81248:	47a0      	blx	r4
   8124a:	2300      	movs	r3, #0
   8124c:	461a      	mov	r2, r3
   8124e:	4907      	ldr	r1, [pc, #28]	; (8126c <ISPTarget_LoadExtendedAddress+0x3c>)
   81250:	7889      	ldrb	r1, [r1, #2]
   81252:	4628      	mov	r0, r5
   81254:	47a0      	blx	r4
   81256:	2300      	movs	r3, #0
   81258:	461a      	mov	r2, r3
   8125a:	4619      	mov	r1, r3
   8125c:	4628      	mov	r0, r5
   8125e:	47a0      	blx	r4
   81260:	bd38      	pop	{r3, r4, r5, pc}
   81262:	bf00      	nop
   81264:	40008000 	.word	0x40008000
   81268:	000845a3 	.word	0x000845a3
   8126c:	20002988 	.word	0x20002988

00081270 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81274:	b082      	sub	sp, #8
   81276:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8127a:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   8127e:	2808      	cmp	r0, #8
   81280:	d04d      	beq.n	8131e <ISPTarget_WaitForProgComplete+0xae>
   81282:	460f      	mov	r7, r1
   81284:	4690      	mov	r8, r2
   81286:	dd07      	ble.n	81298 <ISPTarget_WaitForProgComplete+0x28>
   81288:	2820      	cmp	r0, #32
   8128a:	d009      	beq.n	812a0 <ISPTarget_WaitForProgComplete+0x30>
   8128c:	2840      	cmp	r0, #64	; 0x40
   8128e:	d046      	beq.n	8131e <ISPTarget_WaitForProgComplete+0xae>
   81290:	2810      	cmp	r0, #16
   81292:	d033      	beq.n	812fc <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81294:	2000      	movs	r0, #0
   81296:	e035      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81298:	2802      	cmp	r0, #2
   8129a:	d02f      	beq.n	812fc <ISPTarget_WaitForProgComplete+0x8c>
   8129c:	2804      	cmp	r0, #4
   8129e:	d1f9      	bne.n	81294 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   812a0:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   812a4:	4c1f      	ldr	r4, [pc, #124]	; (81324 <ISPTarget_WaitForProgComplete+0xb4>)
   812a6:	2600      	movs	r6, #0
   812a8:	4d1f      	ldr	r5, [pc, #124]	; (81328 <ISPTarget_WaitForProgComplete+0xb8>)
   812aa:	4633      	mov	r3, r6
   812ac:	4632      	mov	r2, r6
   812ae:	4649      	mov	r1, r9
   812b0:	4620      	mov	r0, r4
   812b2:	47a8      	blx	r5
   812b4:	4633      	mov	r3, r6
   812b6:	4632      	mov	r2, r6
   812b8:	4651      	mov	r1, sl
   812ba:	4620      	mov	r0, r4
   812bc:	47a8      	blx	r5
   812be:	4633      	mov	r3, r6
   812c0:	4632      	mov	r2, r6
   812c2:	b2f9      	uxtb	r1, r7
   812c4:	4620      	mov	r0, r4
   812c6:	47a8      	blx	r5
   812c8:	4633      	mov	r3, r6
   812ca:	4632      	mov	r2, r6
   812cc:	4631      	mov	r1, r6
   812ce:	4620      	mov	r0, r4
   812d0:	47a8      	blx	r5
   812d2:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   812d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   812d8:	d0fb      	beq.n	812d2 <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   812da:	f10d 0205 	add.w	r2, sp, #5
   812de:	f10d 0106 	add.w	r1, sp, #6
   812e2:	4620      	mov	r0, r4
   812e4:	4b11      	ldr	r3, [pc, #68]	; (8132c <ISPTarget_WaitForProgComplete+0xbc>)
   812e6:	4798      	blx	r3
			return  ReceivedByte;
   812e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   812ec:	4598      	cmp	r8, r3
   812ee:	d10f      	bne.n	81310 <ISPTarget_WaitForProgComplete+0xa0>
   812f0:	4b0f      	ldr	r3, [pc, #60]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	2b00      	cmp	r3, #0
   812f6:	d1d8      	bne.n	812aa <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812f8:	2080      	movs	r0, #128	; 0x80
   812fa:	e003      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   812fc:	4618      	mov	r0, r3
   812fe:	4b0d      	ldr	r3, [pc, #52]	; (81334 <ISPTarget_WaitForProgComplete+0xc4>)
   81300:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81302:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81304:	2264      	movs	r2, #100	; 0x64
   81306:	4b0a      	ldr	r3, [pc, #40]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   81308:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   8130a:	b002      	add	sp, #8
   8130c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   81310:	4b07      	ldr	r3, [pc, #28]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   81312:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81314:	2b00      	cmp	r3, #0
   81316:	bf14      	ite	ne
   81318:	2000      	movne	r0, #0
   8131a:	2080      	moveq	r0, #128	; 0x80
   8131c:	e7f2      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   8131e:	4b06      	ldr	r3, [pc, #24]	; (81338 <ISPTarget_WaitForProgComplete+0xc8>)
   81320:	4798      	blx	r3
			break;
   81322:	e7ef      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
   81324:	40008000 	.word	0x40008000
   81328:	000845a3 	.word	0x000845a3
   8132c:	00084575 	.word	0x00084575
   81330:	20002990 	.word	0x20002990
   81334:	00080e55 	.word	0x00080e55
   81338:	000811b1 	.word	0x000811b1

0008133c <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   8133c:	4b06      	ldr	r3, [pc, #24]	; (81358 <naeusb_add_in_handler+0x1c>)
   8133e:	781b      	ldrb	r3, [r3, #0]
   81340:	2b0f      	cmp	r3, #15
   81342:	d807      	bhi.n	81354 <naeusb_add_in_handler+0x18>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81344:	1c59      	adds	r1, r3, #1
   81346:	4a04      	ldr	r2, [pc, #16]	; (81358 <naeusb_add_in_handler+0x1c>)
   81348:	7011      	strb	r1, [r2, #0]
   8134a:	4a04      	ldr	r2, [pc, #16]	; (8135c <naeusb_add_in_handler+0x20>)
   8134c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81350:	2001      	movs	r0, #1
   81352:	4770      	bx	lr
    }
    return false;
   81354:	2000      	movs	r0, #0
    
}
   81356:	4770      	bx	lr
   81358:	20001cf8 	.word	0x20001cf8
   8135c:	20001cb8 	.word	0x20001cb8

00081360 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81360:	4b06      	ldr	r3, [pc, #24]	; (8137c <naeusb_add_out_handler+0x1c>)
   81362:	781b      	ldrb	r3, [r3, #0]
   81364:	2b0f      	cmp	r3, #15
   81366:	d807      	bhi.n	81378 <naeusb_add_out_handler+0x18>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81368:	1c59      	adds	r1, r3, #1
   8136a:	4a04      	ldr	r2, [pc, #16]	; (8137c <naeusb_add_out_handler+0x1c>)
   8136c:	7011      	strb	r1, [r2, #0]
   8136e:	4a04      	ldr	r2, [pc, #16]	; (81380 <naeusb_add_out_handler+0x20>)
   81370:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81374:	2001      	movs	r0, #1
   81376:	4770      	bx	lr
    }
    return false;
   81378:	2000      	movs	r0, #0
    
}
   8137a:	4770      	bx	lr
   8137c:	20001cf9 	.word	0x20001cf9
   81380:	20001cfc 	.word	0x20001cfc

00081384 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81384:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   81386:	4b01      	ldr	r3, [pc, #4]	; (8138c <main_suspend_action+0x8>)
   81388:	4798      	blx	r3
   8138a:	bd08      	pop	{r3, pc}
   8138c:	00083c71 	.word	0x00083c71

00081390 <main_resume_action>:
}

void main_resume_action(void)
{
   81390:	b508      	push	{r3, lr}
    ui_wakeup();
   81392:	4b01      	ldr	r3, [pc, #4]	; (81398 <main_resume_action+0x8>)
   81394:	4798      	blx	r3
   81396:	bd08      	pop	{r3, pc}
   81398:	00083c8d 	.word	0x00083c8d

0008139c <main_sof_action>:
}

void main_sof_action(void)
{
   8139c:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   8139e:	4b04      	ldr	r3, [pc, #16]	; (813b0 <main_sof_action+0x14>)
   813a0:	781b      	ldrb	r3, [r3, #0]
   813a2:	b903      	cbnz	r3, 813a6 <main_sof_action+0xa>
   813a4:	bd08      	pop	{r3, pc}
        return;
    ui_process(udd_get_frame_number());
   813a6:	4b03      	ldr	r3, [pc, #12]	; (813b4 <main_sof_action+0x18>)
   813a8:	4798      	blx	r3
   813aa:	4b03      	ldr	r3, [pc, #12]	; (813b8 <main_sof_action+0x1c>)
   813ac:	4798      	blx	r3
   813ae:	e7f9      	b.n	813a4 <main_sof_action+0x8>
   813b0:	20000650 	.word	0x20000650
   813b4:	00085331 	.word	0x00085331
   813b8:	00083ca5 	.word	0x00083ca5

000813bc <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   813bc:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   813be:	2401      	movs	r4, #1
   813c0:	4b04      	ldr	r3, [pc, #16]	; (813d4 <main_vendor_enable+0x18>)
   813c2:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   813c4:	4a04      	ldr	r2, [pc, #16]	; (813d8 <main_vendor_enable+0x1c>)
   813c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   813ca:	4804      	ldr	r0, [pc, #16]	; (813dc <main_vendor_enable+0x20>)
   813cc:	4b04      	ldr	r3, [pc, #16]	; (813e0 <main_vendor_enable+0x24>)
   813ce:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   813d0:	4620      	mov	r0, r4
   813d2:	bd10      	pop	{r4, pc}
   813d4:	20000650 	.word	0x20000650
   813d8:	00081cc9 	.word	0x00081cc9
   813dc:	20002564 	.word	0x20002564
   813e0:	00083e41 	.word	0x00083e41

000813e4 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   813e4:	2200      	movs	r2, #0
   813e6:	4b01      	ldr	r3, [pc, #4]	; (813ec <main_vendor_disable+0x8>)
   813e8:	701a      	strb	r2, [r3, #0]
   813ea:	4770      	bx	lr
   813ec:	20000650 	.word	0x20000650

000813f0 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
   813f0:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   813f2:	4b10      	ldr	r3, [pc, #64]	; (81434 <main_setup_out_received+0x44>)
   813f4:	4a10      	ldr	r2, [pc, #64]	; (81438 <main_setup_out_received+0x48>)
   813f6:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   813f8:	88da      	ldrh	r2, [r3, #6]
   813fa:	2a40      	cmp	r2, #64	; 0x40
   813fc:	bf28      	it	cs
   813fe:	2240      	movcs	r2, #64	; 0x40
   81400:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81402:	4b0e      	ldr	r3, [pc, #56]	; (8143c <main_setup_out_received+0x4c>)
   81404:	781b      	ldrb	r3, [r3, #0]
   81406:	b19b      	cbz	r3, 81430 <main_setup_out_received+0x40>
   81408:	4d0d      	ldr	r5, [pc, #52]	; (81440 <main_setup_out_received+0x50>)
   8140a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   8140e:	3a01      	subs	r2, #1
   81410:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   81414:	3b01      	subs	r3, #1
   81416:	b2db      	uxtb	r3, r3
   81418:	1ad3      	subs	r3, r2, r3
   8141a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   8141e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81422:	4798      	blx	r3
        if (handler_status == true) {
   81424:	4603      	mov	r3, r0
   81426:	b908      	cbnz	r0, 8142c <main_setup_out_received+0x3c>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81428:	42ac      	cmp	r4, r5
   8142a:	d1f8      	bne.n	8141e <main_setup_out_received+0x2e>
        }
    }

    return false;

}
   8142c:	4618      	mov	r0, r3
   8142e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81430:	2300      	movs	r3, #0
   81432:	e7fb      	b.n	8142c <main_setup_out_received+0x3c>
   81434:	200029a8 	.word	0x200029a8
   81438:	20002524 	.word	0x20002524
   8143c:	20001cf9 	.word	0x20001cf9
   81440:	20001cfc 	.word	0x20001cfc

00081444 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81444:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81446:	4b0c      	ldr	r3, [pc, #48]	; (81478 <main_setup_in_received+0x34>)
   81448:	781b      	ldrb	r3, [r3, #0]
   8144a:	b19b      	cbz	r3, 81474 <main_setup_in_received+0x30>
   8144c:	4d0b      	ldr	r5, [pc, #44]	; (8147c <main_setup_in_received+0x38>)
   8144e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   81452:	3a01      	subs	r2, #1
   81454:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   81458:	3b01      	subs	r3, #1
   8145a:	b2db      	uxtb	r3, r3
   8145c:	1ad3      	subs	r3, r2, r3
   8145e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81462:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81466:	4798      	blx	r3
        if (handler_status == true) {
   81468:	4603      	mov	r3, r0
   8146a:	b908      	cbnz	r0, 81470 <main_setup_in_received+0x2c>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8146c:	42ac      	cmp	r4, r5
   8146e:	d1f8      	bne.n	81462 <main_setup_in_received+0x1e>
        }
    }

    return false;

   81470:	4618      	mov	r0, r3
   81472:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81474:	2300      	movs	r3, #0
   81476:	e7fb      	b.n	81470 <main_setup_in_received+0x2c>
   81478:	20001cf8 	.word	0x20001cf8
   8147c:	20001cb8 	.word	0x20001cb8

00081480 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81480:	4b05      	ldr	r3, [pc, #20]	; (81498 <naeusb_setup_out_received+0x18>)
   81482:	785b      	ldrb	r3, [r3, #1]
   81484:	2b22      	cmp	r3, #34	; 0x22
   81486:	d104      	bne.n	81492 <naeusb_setup_out_received+0x12>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81488:	4a04      	ldr	r2, [pc, #16]	; (8149c <naeusb_setup_out_received+0x1c>)
   8148a:	4b03      	ldr	r3, [pc, #12]	; (81498 <naeusb_setup_out_received+0x18>)
   8148c:	611a      	str	r2, [r3, #16]
            return true;
   8148e:	2001      	movs	r0, #1
   81490:	4770      	bx	lr
            break;
    }
    return false;
   81492:	2000      	movs	r0, #0
}
   81494:	4770      	bx	lr
   81496:	bf00      	nop
   81498:	200029a8 	.word	0x200029a8
   8149c:	000814a1 	.word	0x000814a1

000814a0 <naeusb_sam_cfg_out>:
{
   814a0:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   814a2:	4b22      	ldr	r3, [pc, #136]	; (8152c <naeusb_sam_cfg_out+0x8c>)
   814a4:	789b      	ldrb	r3, [r3, #2]
   814a6:	3b01      	subs	r3, #1
   814a8:	2b10      	cmp	r3, #16
   814aa:	d83e      	bhi.n	8152a <naeusb_sam_cfg_out+0x8a>
   814ac:	e8df f003 	tbb	[pc, r3]
   814b0:	3d181409 	.word	0x3d181409
   814b4:	3d3d3d3d 	.word	0x3d3d3d3d
   814b8:	3d3d3d3d 	.word	0x3d3d3d3d
   814bc:	2c3d3d3d 	.word	0x2c3d3d3d
   814c0:	3b          	.byte	0x3b
   814c1:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   814c2:	203e      	movs	r0, #62	; 0x3e
   814c4:	4b1a      	ldr	r3, [pc, #104]	; (81530 <naeusb_sam_cfg_out+0x90>)
   814c6:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   814c8:	4c1a      	ldr	r4, [pc, #104]	; (81534 <naeusb_sam_cfg_out+0x94>)
   814ca:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814cc:	2800      	cmp	r0, #0
   814ce:	d0fc      	beq.n	814ca <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   814d0:	2010      	movs	r0, #16
   814d2:	4b19      	ldr	r3, [pc, #100]	; (81538 <naeusb_sam_cfg_out+0x98>)
   814d4:	4798      	blx	r3
        break;
   814d6:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814d8:	2010      	movs	r0, #16
   814da:	4b18      	ldr	r3, [pc, #96]	; (8153c <naeusb_sam_cfg_out+0x9c>)
   814dc:	4798      	blx	r3
        break;
   814de:	bd10      	pop	{r4, pc}
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   814e0:	2201      	movs	r2, #1
   814e2:	210c      	movs	r1, #12
   814e4:	4816      	ldr	r0, [pc, #88]	; (81540 <naeusb_sam_cfg_out+0xa0>)
   814e6:	4b17      	ldr	r3, [pc, #92]	; (81544 <naeusb_sam_cfg_out+0xa4>)
   814e8:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   814ea:	4b17      	ldr	r3, [pc, #92]	; (81548 <naeusb_sam_cfg_out+0xa8>)
   814ec:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814ee:	4b17      	ldr	r3, [pc, #92]	; (8154c <naeusb_sam_cfg_out+0xac>)
   814f0:	685a      	ldr	r2, [r3, #4]
   814f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814f6:	d1fb      	bne.n	814f0 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814f8:	4a14      	ldr	r2, [pc, #80]	; (8154c <naeusb_sam_cfg_out+0xac>)
   814fa:	6813      	ldr	r3, [r2, #0]
   814fc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81500:	f043 0305 	orr.w	r3, r3, #5
   81504:	6013      	str	r3, [r2, #0]
   81506:	e7fe      	b.n	81506 <naeusb_sam_cfg_out+0x66>
   81508:	4b0f      	ldr	r3, [pc, #60]	; (81548 <naeusb_sam_cfg_out+0xa8>)
   8150a:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8150c:	4b0f      	ldr	r3, [pc, #60]	; (8154c <naeusb_sam_cfg_out+0xac>)
   8150e:	685a      	ldr	r2, [r3, #4]
   81510:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81514:	d1fb      	bne.n	8150e <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81516:	4a0d      	ldr	r2, [pc, #52]	; (8154c <naeusb_sam_cfg_out+0xac>)
   81518:	6813      	ldr	r3, [r2, #0]
   8151a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8151e:	f043 0305 	orr.w	r3, r3, #5
   81522:	6013      	str	r3, [r2, #0]
   81524:	e7fe      	b.n	81524 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   81526:	4b0a      	ldr	r3, [pc, #40]	; (81550 <naeusb_sam_cfg_out+0xb0>)
   81528:	4798      	blx	r3
   8152a:	bd10      	pop	{r4, pc}
   8152c:	200029a8 	.word	0x200029a8
   81530:	0008441d 	.word	0x0008441d
   81534:	00084445 	.word	0x00084445
   81538:	00084355 	.word	0x00084355
   8153c:	000843b9 	.word	0x000843b9
   81540:	400e0800 	.word	0x400e0800
   81544:	00083b7d 	.word	0x00083b7d
   81548:	000852b1 	.word	0x000852b1
   8154c:	400e1200 	.word	0x400e1200
   81550:	00082da9 	.word	0x00082da9

00081554 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81554:	4b05      	ldr	r3, [pc, #20]	; (8156c <naeusb_fw_version_in+0x18>)
   81556:	2200      	movs	r2, #0
   81558:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8155a:	2134      	movs	r1, #52	; 0x34
   8155c:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8155e:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81560:	4a03      	ldr	r2, [pc, #12]	; (81570 <naeusb_fw_version_in+0x1c>)
   81562:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81564:	2303      	movs	r3, #3
   81566:	8193      	strh	r3, [r2, #12]
}
   81568:	2001      	movs	r0, #1
   8156a:	4770      	bx	lr
   8156c:	200024e4 	.word	0x200024e4
   81570:	200029a8 	.word	0x200029a8

00081574 <naeusb_build_date_in>:
{
   81574:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   81576:	4c0a      	ldr	r4, [pc, #40]	; (815a0 <naeusb_build_date_in+0x2c>)
   81578:	2240      	movs	r2, #64	; 0x40
   8157a:	490a      	ldr	r1, [pc, #40]	; (815a4 <naeusb_build_date_in+0x30>)
   8157c:	4620      	mov	r0, r4
   8157e:	4d0a      	ldr	r5, [pc, #40]	; (815a8 <naeusb_build_date_in+0x34>)
   81580:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81582:	2320      	movs	r3, #32
   81584:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81586:	2237      	movs	r2, #55	; 0x37
   81588:	4908      	ldr	r1, [pc, #32]	; (815ac <naeusb_build_date_in+0x38>)
   8158a:	f104 0009 	add.w	r0, r4, #9
   8158e:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81590:	4d07      	ldr	r5, [pc, #28]	; (815b0 <naeusb_build_date_in+0x3c>)
   81592:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81594:	4620      	mov	r0, r4
   81596:	4b07      	ldr	r3, [pc, #28]	; (815b4 <naeusb_build_date_in+0x40>)
   81598:	4798      	blx	r3
   8159a:	81a8      	strh	r0, [r5, #12]
}
   8159c:	2001      	movs	r0, #1
   8159e:	bd38      	pop	{r3, r4, r5, pc}
   815a0:	200024e4 	.word	0x200024e4
   815a4:	0008c5dc 	.word	0x0008c5dc
   815a8:	000868fd 	.word	0x000868fd
   815ac:	0008c5d0 	.word	0x0008c5d0
   815b0:	200029a8 	.word	0x200029a8
   815b4:	000868a1 	.word	0x000868a1

000815b8 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   815b8:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   815ba:	4b07      	ldr	r3, [pc, #28]	; (815d8 <naeusb_setup_in_received+0x20>)
   815bc:	785b      	ldrb	r3, [r3, #1]
   815be:	2b17      	cmp	r3, #23
   815c0:	d003      	beq.n	815ca <naeusb_setup_in_received+0x12>
   815c2:	2b40      	cmp	r3, #64	; 0x40
   815c4:	d004      	beq.n	815d0 <naeusb_setup_in_received+0x18>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
   815c6:	2000      	movs	r0, #0
}
   815c8:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <naeusb_setup_in_received+0x24>)
   815cc:	4798      	blx	r3
   815ce:	bd08      	pop	{r3, pc}
            return naeusb_build_date_in();
   815d0:	4b03      	ldr	r3, [pc, #12]	; (815e0 <naeusb_setup_in_received+0x28>)
   815d2:	4798      	blx	r3
   815d4:	bd08      	pop	{r3, pc}
   815d6:	bf00      	nop
   815d8:	200029a8 	.word	0x200029a8
   815dc:	00081555 	.word	0x00081555
   815e0:	00081575 	.word	0x00081575

000815e4 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   815e4:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   815e6:	4803      	ldr	r0, [pc, #12]	; (815f4 <naeusb_register_handlers+0x10>)
   815e8:	4b03      	ldr	r3, [pc, #12]	; (815f8 <naeusb_register_handlers+0x14>)
   815ea:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   815ec:	4803      	ldr	r0, [pc, #12]	; (815fc <naeusb_register_handlers+0x18>)
   815ee:	4b04      	ldr	r3, [pc, #16]	; (81600 <naeusb_register_handlers+0x1c>)
   815f0:	4798      	blx	r3
   815f2:	bd08      	pop	{r3, pc}
   815f4:	000815b9 	.word	0x000815b9
   815f8:	0008133d 	.word	0x0008133d
   815fc:	00081481 	.word	0x00081481
   81600:	00081361 	.word	0x00081361

00081604 <mpsse_setup_out_received>:
// latency timer request
// purge tx and TX on reset
// set bitmode - just selects MPSSE mode
// I think we can just ignore all this stuff, since they're just to setup 
bool mpsse_setup_out_received(void)
{
   81604:	b508      	push	{r3, lr}
    // don't handle 
    uint8_t wValue = udd_g_ctrlreq.req.wValue & 0xFF;
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   81606:	4b0b      	ldr	r3, [pc, #44]	; (81634 <mpsse_setup_out_received+0x30>)
   81608:	789b      	ldrb	r3, [r3, #2]
   8160a:	2b42      	cmp	r3, #66	; 0x42
   8160c:	d006      	beq.n	8161c <mpsse_setup_out_received+0x18>
        udc_stop();
        switch_configurations();
        udc_start();
        return true;
    }
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   8160e:	4b09      	ldr	r3, [pc, #36]	; (81634 <mpsse_setup_out_received+0x30>)
   81610:	8898      	ldrh	r0, [r3, #4]
   81612:	2801      	cmp	r0, #1
   81614:	bf14      	ite	ne
   81616:	2000      	movne	r0, #0
   81618:	2001      	moveq	r0, #1
        return false;
    }
    return true;
}
   8161a:	bd08      	pop	{r3, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   8161c:	4b05      	ldr	r3, [pc, #20]	; (81634 <mpsse_setup_out_received+0x30>)
   8161e:	785b      	ldrb	r3, [r3, #1]
   81620:	2b22      	cmp	r3, #34	; 0x22
   81622:	d1f4      	bne.n	8160e <mpsse_setup_out_received+0xa>
        udc_stop();
   81624:	4b04      	ldr	r3, [pc, #16]	; (81638 <mpsse_setup_out_received+0x34>)
   81626:	4798      	blx	r3
        switch_configurations();
   81628:	4b04      	ldr	r3, [pc, #16]	; (8163c <mpsse_setup_out_received+0x38>)
   8162a:	4798      	blx	r3
        udc_start();
   8162c:	4b04      	ldr	r3, [pc, #16]	; (81640 <mpsse_setup_out_received+0x3c>)
   8162e:	4798      	blx	r3
        return true;
   81630:	2001      	movs	r0, #1
   81632:	bd08      	pop	{r3, pc}
   81634:	200029a8 	.word	0x200029a8
   81638:	0008274d 	.word	0x0008274d
   8163c:	000807c1 	.word	0x000807c1
   81640:	000826f9 	.word	0x000826f9

00081644 <mpsse_setup_in_received>:


bool mpsse_setup_in_received(void)
{
    // don't handle 
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   81644:	4b0e      	ldr	r3, [pc, #56]	; (81680 <mpsse_setup_in_received+0x3c>)
   81646:	889b      	ldrh	r3, [r3, #4]
   81648:	2b01      	cmp	r3, #1
   8164a:	d001      	beq.n	81650 <mpsse_setup_in_received+0xc>
        return false;
   8164c:	2000      	movs	r0, #0
   8164e:	4770      	bx	lr
    }
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
   81650:	4b0b      	ldr	r3, [pc, #44]	; (81680 <mpsse_setup_in_received+0x3c>)
   81652:	785b      	ldrb	r3, [r3, #1]
   81654:	b10b      	cbz	r3, 8165a <mpsse_setup_in_received+0x16>
        // TODO: cancel old run if one setup
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, false, MPSSE_TX_BUFFER, 512, mpsse_vendor_bulk_out_received);
        MPSSE_TRANSACTION_LOCK = 1;
    }
    return true;
   81656:	2001      	movs	r0, #1
   81658:	4770      	bx	lr
{
   8165a:	b510      	push	{r4, lr}
   8165c:	b082      	sub	sp, #8
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
   8165e:	2006      	movs	r0, #6
   81660:	4b08      	ldr	r3, [pc, #32]	; (81684 <mpsse_setup_in_received+0x40>)
   81662:	4798      	blx	r3
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, false, MPSSE_TX_BUFFER, 512, mpsse_vendor_bulk_out_received);
   81664:	4b08      	ldr	r3, [pc, #32]	; (81688 <mpsse_setup_in_received+0x44>)
   81666:	9300      	str	r3, [sp, #0]
   81668:	f44f 7300 	mov.w	r3, #512	; 0x200
   8166c:	4a07      	ldr	r2, [pc, #28]	; (8168c <mpsse_setup_in_received+0x48>)
   8166e:	2100      	movs	r1, #0
   81670:	2006      	movs	r0, #6
   81672:	4c07      	ldr	r4, [pc, #28]	; (81690 <mpsse_setup_in_received+0x4c>)
   81674:	47a0      	blx	r4
        MPSSE_TRANSACTION_LOCK = 1;
   81676:	2001      	movs	r0, #1
   81678:	4b06      	ldr	r3, [pc, #24]	; (81694 <mpsse_setup_in_received+0x50>)
   8167a:	7018      	strb	r0, [r3, #0]
}
   8167c:	b002      	add	sp, #8
   8167e:	bd10      	pop	{r4, pc}
   81680:	200029a8 	.word	0x200029a8
   81684:	00085919 	.word	0x00085919
   81688:	00081699 	.word	0x00081699
   8168c:	20001d44 	.word	0x20001d44
   81690:	000855a5 	.word	0x000855a5
   81694:	20000651 	.word	0x20000651

00081698 <mpsse_vendor_bulk_out_received>:

void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
    // we just receive stuff here, then handle in main()
    MPSSE_TX_BYTES = nb_transfered;
   81698:	4b0a      	ldr	r3, [pc, #40]	; (816c4 <mpsse_vendor_bulk_out_received+0x2c>)
   8169a:	8019      	strh	r1, [r3, #0]
    MPSSE_TX_IDX = 0;
   8169c:	2300      	movs	r3, #0
   8169e:	4a0a      	ldr	r2, [pc, #40]	; (816c8 <mpsse_vendor_bulk_out_received+0x30>)
   816a0:	8013      	strh	r3, [r2, #0]
    MPSSE_CUR_CMD = 0;
   816a2:	4a0a      	ldr	r2, [pc, #40]	; (816cc <mpsse_vendor_bulk_out_received+0x34>)
   816a4:	7013      	strb	r3, [r2, #0]
    if (UDD_EP_TRANSFER_OK != status) {
   816a6:	b900      	cbnz	r0, 816aa <mpsse_vendor_bulk_out_received+0x12>
   816a8:	4770      	bx	lr
{
   816aa:	b510      	push	{r4, lr}
   816ac:	b082      	sub	sp, #8
        // restart
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 512, mpsse_vendor_bulk_out_received);
   816ae:	4b08      	ldr	r3, [pc, #32]	; (816d0 <mpsse_vendor_bulk_out_received+0x38>)
   816b0:	9300      	str	r3, [sp, #0]
   816b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   816b6:	4a07      	ldr	r2, [pc, #28]	; (816d4 <mpsse_vendor_bulk_out_received+0x3c>)
   816b8:	2100      	movs	r1, #0
   816ba:	2006      	movs	r0, #6
   816bc:	4c06      	ldr	r4, [pc, #24]	; (816d8 <mpsse_vendor_bulk_out_received+0x40>)
   816be:	47a0      	blx	r4
    }
}
   816c0:	b002      	add	sp, #8
   816c2:	bd10      	pop	{r4, pc}
   816c4:	20001f44 	.word	0x20001f44
   816c8:	20001f46 	.word	0x20001f46
   816cc:	20001d3c 	.word	0x20001d3c
   816d0:	00081699 	.word	0x00081699
   816d4:	20001d44 	.word	0x20001d44
   816d8:	000855a5 	.word	0x000855a5

000816dc <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
   816dc:	b530      	push	{r4, r5, lr}
   816de:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
   816e0:	b9b0      	cbnz	r0, 81710 <mpsse_vendor_bulk_in_received+0x34>
        // I think this is the right thing to do
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (MPSSE_RX_BYTES - nb_transferred); i++) {
   816e2:	4b14      	ldr	r3, [pc, #80]	; (81734 <mpsse_vendor_bulk_in_received+0x58>)
   816e4:	881d      	ldrh	r5, [r3, #0]
   816e6:	1a6c      	subs	r4, r5, r1
   816e8:	d00b      	beq.n	81702 <mpsse_vendor_bulk_in_received+0x26>
   816ea:	2200      	movs	r2, #0
   816ec:	4613      	mov	r3, r2
        // move data to start of buffer
        // simplifies things, plus avoids buffer alignment issues
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   816ee:	4812      	ldr	r0, [pc, #72]	; (81738 <mpsse_vendor_bulk_in_received+0x5c>)
   816f0:	440a      	add	r2, r1
   816f2:	5c82      	ldrb	r2, [r0, r2]
   816f4:	b2d2      	uxtb	r2, r2
   816f6:	54c2      	strb	r2, [r0, r3]
    for (uint16_t i = 0; i < (MPSSE_RX_BYTES - nb_transferred); i++) {
   816f8:	3301      	adds	r3, #1
   816fa:	b29b      	uxth	r3, r3
   816fc:	461a      	mov	r2, r3
   816fe:	42a3      	cmp	r3, r4
   81700:	d3f6      	bcc.n	816f0 <mpsse_vendor_bulk_in_received+0x14>
    }
    MPSSE_RX_BYTES -= nb_transferred;
   81702:	1a69      	subs	r1, r5, r1
   81704:	b28b      	uxth	r3, r1
   81706:	4a0b      	ldr	r2, [pc, #44]	; (81734 <mpsse_vendor_bulk_in_received+0x58>)
   81708:	8013      	strh	r3, [r2, #0]
    
    if (MPSSE_RX_BYTES) {
   8170a:	b95b      	cbnz	r3, 81724 <mpsse_vendor_bulk_in_received+0x48>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
    }

}
   8170c:	b003      	add	sp, #12
   8170e:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81710:	4b08      	ldr	r3, [pc, #32]	; (81734 <mpsse_vendor_bulk_in_received+0x58>)
   81712:	881b      	ldrh	r3, [r3, #0]
   81714:	4a09      	ldr	r2, [pc, #36]	; (8173c <mpsse_vendor_bulk_in_received+0x60>)
   81716:	9200      	str	r2, [sp, #0]
   81718:	4a07      	ldr	r2, [pc, #28]	; (81738 <mpsse_vendor_bulk_in_received+0x5c>)
   8171a:	2100      	movs	r1, #0
   8171c:	2085      	movs	r0, #133	; 0x85
   8171e:	4c08      	ldr	r4, [pc, #32]	; (81740 <mpsse_vendor_bulk_in_received+0x64>)
   81720:	47a0      	blx	r4
        return;
   81722:	e7f3      	b.n	8170c <mpsse_vendor_bulk_in_received+0x30>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81724:	4a05      	ldr	r2, [pc, #20]	; (8173c <mpsse_vendor_bulk_in_received+0x60>)
   81726:	9200      	str	r2, [sp, #0]
   81728:	4a03      	ldr	r2, [pc, #12]	; (81738 <mpsse_vendor_bulk_in_received+0x5c>)
   8172a:	2100      	movs	r1, #0
   8172c:	2085      	movs	r0, #133	; 0x85
   8172e:	4c04      	ldr	r4, [pc, #16]	; (81740 <mpsse_vendor_bulk_in_received+0x64>)
   81730:	47a0      	blx	r4
   81732:	e7eb      	b.n	8170c <mpsse_vendor_bulk_in_received+0x30>
   81734:	20001d3e 	.word	0x20001d3e
   81738:	20080000 	.word	0x20080000
   8173c:	000816dd 	.word	0x000816dd
   81740:	000855a5 	.word	0x000855a5

00081744 <mpsse_send_bit>:
    if (MPSSE_LOOPBACK_ENABLED) {
   81744:	4b03      	ldr	r3, [pc, #12]	; (81754 <mpsse_send_bit+0x10>)
   81746:	781b      	ldrb	r3, [r3, #0]
   81748:	b10b      	cbz	r3, 8174e <mpsse_send_bit+0xa>
    value &= 0x01;
   8174a:	f000 0201 	and.w	r2, r0, #1
}
   8174e:	f002 0001 	and.w	r0, r2, #1
   81752:	4770      	bx	lr
   81754:	20001d3d 	.word	0x20001d3d

00081758 <mpsse_send_bits>:
{
   81758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (uint8_t i = 0; i < num_bits; i++) {
   8175c:	b371      	cbz	r1, 817bc <mpsse_send_bits+0x64>
   8175e:	4606      	mov	r6, r0
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81760:	4b18      	ldr	r3, [pc, #96]	; (817c4 <mpsse_send_bits+0x6c>)
   81762:	781f      	ldrb	r7, [r3, #0]
   81764:	f007 0708 	and.w	r7, r7, #8
   81768:	f101 39ff 	add.w	r9, r1, #4294967295
   8176c:	fa5f f989 	uxtb.w	r9, r9
   81770:	f1c9 0906 	rsb	r9, r9, #6
   81774:	2407      	movs	r4, #7
   81776:	f04f 0a00 	mov.w	sl, #0
            read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   8177a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 817c8 <mpsse_send_bits+0x70>
   8177e:	e00d      	b.n	8179c <mpsse_send_bits+0x44>
   81780:	fa46 f004 	asr.w	r0, r6, r4
   81784:	f000 0001 	and.w	r0, r0, #1
   81788:	47c0      	blx	r8
   8178a:	fa00 f504 	lsl.w	r5, r0, r4
   8178e:	ea45 050a 	orr.w	r5, r5, sl
   81792:	fa5f fa85 	uxtb.w	sl, r5
   81796:	3c01      	subs	r4, #1
    for (uint8_t i = 0; i < num_bits; i++) {
   81798:	454c      	cmp	r4, r9
   8179a:	d010      	beq.n	817be <mpsse_send_bits+0x66>
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   8179c:	2f00      	cmp	r7, #0
   8179e:	d0ef      	beq.n	81780 <mpsse_send_bits+0x28>
   817a0:	f1c4 0507 	rsb	r5, r4, #7
            read_value |= mpsse_send_bit((value >> i) & 0x01) << i;
   817a4:	fa46 f005 	asr.w	r0, r6, r5
   817a8:	f000 0001 	and.w	r0, r0, #1
   817ac:	47c0      	blx	r8
   817ae:	fa00 f505 	lsl.w	r5, r0, r5
   817b2:	ea45 050a 	orr.w	r5, r5, sl
   817b6:	fa5f fa85 	uxtb.w	sl, r5
   817ba:	e7ec      	b.n	81796 <mpsse_send_bits+0x3e>
    uint8_t read_value = 0;
   817bc:	468a      	mov	sl, r1
}
   817be:	4650      	mov	r0, sl
   817c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   817c4:	20001d3c 	.word	0x20001d3c
   817c8:	00081745 	.word	0x00081745

000817cc <mpsse_send_byte>:
{
   817cc:	b508      	push	{r3, lr}
    return mpsse_send_bits(value, 8);
   817ce:	2108      	movs	r1, #8
   817d0:	4b01      	ldr	r3, [pc, #4]	; (817d8 <mpsse_send_byte+0xc>)
   817d2:	4798      	blx	r3
}
   817d4:	bd08      	pop	{r3, pc}
   817d6:	bf00      	nop
   817d8:	00081759 	.word	0x00081759

000817dc <mpsse_handle_transmission>:
{
   817dc:	b510      	push	{r4, lr}
    if (MPSSE_TRANSMISSION_LEN == 0) {
   817de:	4b2b      	ldr	r3, [pc, #172]	; (8188c <mpsse_handle_transmission+0xb0>)
   817e0:	881b      	ldrh	r3, [r3, #0]
   817e2:	b9bb      	cbnz	r3, 81814 <mpsse_handle_transmission+0x38>
        MPSSE_TRANSMISSION_LEN = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   817e4:	492a      	ldr	r1, [pc, #168]	; (81890 <mpsse_handle_transmission+0xb4>)
   817e6:	880b      	ldrh	r3, [r1, #0]
   817e8:	1c5a      	adds	r2, r3, #1
   817ea:	b292      	uxth	r2, r2
   817ec:	800a      	strh	r2, [r1, #0]
   817ee:	4929      	ldr	r1, [pc, #164]	; (81894 <mpsse_handle_transmission+0xb8>)
   817f0:	5cc9      	ldrb	r1, [r1, r3]
   817f2:	b2c9      	uxtb	r1, r1
   817f4:	4825      	ldr	r0, [pc, #148]	; (8188c <mpsse_handle_transmission+0xb0>)
   817f6:	8001      	strh	r1, [r0, #0]
        if (!(MPSSE_CUR_CMD & FTDI_BIT_MODE)) {
   817f8:	4827      	ldr	r0, [pc, #156]	; (81898 <mpsse_handle_transmission+0xbc>)
   817fa:	7804      	ldrb	r4, [r0, #0]
   817fc:	f014 0f02 	tst.w	r4, #2
   81800:	d128      	bne.n	81854 <mpsse_handle_transmission+0x78>
            MPSSE_TRANSMISSION_LEN |= MPSSE_TX_BUFFER[MPSSE_TX_IDX++] << 8;
   81802:	3302      	adds	r3, #2
   81804:	4822      	ldr	r0, [pc, #136]	; (81890 <mpsse_handle_transmission+0xb4>)
   81806:	8003      	strh	r3, [r0, #0]
   81808:	4b22      	ldr	r3, [pc, #136]	; (81894 <mpsse_handle_transmission+0xb8>)
   8180a:	5c9b      	ldrb	r3, [r3, r2]
   8180c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   81810:	4b1e      	ldr	r3, [pc, #120]	; (8188c <mpsse_handle_transmission+0xb0>)
   81812:	8019      	strh	r1, [r3, #0]
    if (MPSSE_CUR_CMD & (FTDI_WRITE_TDI | FTDI_WRITE_TMS)) {
   81814:	4b20      	ldr	r3, [pc, #128]	; (81898 <mpsse_handle_transmission+0xbc>)
   81816:	781c      	ldrb	r4, [r3, #0]
   81818:	f014 0f50 	tst.w	r4, #80	; 0x50
   8181c:	d031      	beq.n	81882 <mpsse_handle_transmission+0xa6>
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[MPSSE_TX_IDX++]);
   8181e:	4a1c      	ldr	r2, [pc, #112]	; (81890 <mpsse_handle_transmission+0xb4>)
   81820:	8813      	ldrh	r3, [r2, #0]
   81822:	1c59      	adds	r1, r3, #1
   81824:	8011      	strh	r1, [r2, #0]
   81826:	4a1b      	ldr	r2, [pc, #108]	; (81894 <mpsse_handle_transmission+0xb8>)
   81828:	5cd0      	ldrb	r0, [r2, r3]
   8182a:	4b1c      	ldr	r3, [pc, #112]	; (8189c <mpsse_handle_transmission+0xc0>)
   8182c:	4798      	blx	r3
    if (MPSSE_CUR_CMD & FTDI_READ_TDO) {
   8182e:	f014 0f20 	tst.w	r4, #32
   81832:	d005      	beq.n	81840 <mpsse_handle_transmission+0x64>
        MPSSE_RX_BUFFER[MPSSE_RX_BYTES++] = read_val;
   81834:	4a1a      	ldr	r2, [pc, #104]	; (818a0 <mpsse_handle_transmission+0xc4>)
   81836:	8813      	ldrh	r3, [r2, #0]
   81838:	1c59      	adds	r1, r3, #1
   8183a:	8011      	strh	r1, [r2, #0]
   8183c:	4a19      	ldr	r2, [pc, #100]	; (818a4 <mpsse_handle_transmission+0xc8>)
   8183e:	54d0      	strb	r0, [r2, r3]
    if (--MPSSE_TRANSMISSION_LEN == 0) {
   81840:	4a12      	ldr	r2, [pc, #72]	; (8188c <mpsse_handle_transmission+0xb0>)
   81842:	8813      	ldrh	r3, [r2, #0]
   81844:	3b01      	subs	r3, #1
   81846:	b29b      	uxth	r3, r3
   81848:	8013      	strh	r3, [r2, #0]
   8184a:	b913      	cbnz	r3, 81852 <mpsse_handle_transmission+0x76>
        MPSSE_CUR_CMD = 0;
   8184c:	2200      	movs	r2, #0
   8184e:	4b12      	ldr	r3, [pc, #72]	; (81898 <mpsse_handle_transmission+0xbc>)
   81850:	701a      	strb	r2, [r3, #0]
   81852:	bd10      	pop	{r4, pc}
            read_val = mpsse_send_bits(MPSSE_TX_BUFFER[MPSSE_TX_IDX++], MPSSE_TRANSMISSION_LEN);
   81854:	3302      	adds	r3, #2
   81856:	480e      	ldr	r0, [pc, #56]	; (81890 <mpsse_handle_transmission+0xb4>)
   81858:	8003      	strh	r3, [r0, #0]
   8185a:	4b0e      	ldr	r3, [pc, #56]	; (81894 <mpsse_handle_transmission+0xb8>)
   8185c:	5c98      	ldrb	r0, [r3, r2]
   8185e:	4b12      	ldr	r3, [pc, #72]	; (818a8 <mpsse_handle_transmission+0xcc>)
   81860:	4798      	blx	r3
            MPSSE_TRANSMISSION_LEN = 0;
   81862:	2200      	movs	r2, #0
   81864:	4b09      	ldr	r3, [pc, #36]	; (8188c <mpsse_handle_transmission+0xb0>)
   81866:	801a      	strh	r2, [r3, #0]
            if (MPSSE_CUR_CMD & FTDI_READ_TDO) {
   81868:	f014 0f20 	tst.w	r4, #32
   8186c:	d005      	beq.n	8187a <mpsse_handle_transmission+0x9e>
                MPSSE_RX_BUFFER[MPSSE_RX_BYTES++] = read_val;
   8186e:	4a0c      	ldr	r2, [pc, #48]	; (818a0 <mpsse_handle_transmission+0xc4>)
   81870:	8813      	ldrh	r3, [r2, #0]
   81872:	1c59      	adds	r1, r3, #1
   81874:	8011      	strh	r1, [r2, #0]
   81876:	4a0b      	ldr	r2, [pc, #44]	; (818a4 <mpsse_handle_transmission+0xc8>)
   81878:	54d0      	strb	r0, [r2, r3]
            MPSSE_CUR_CMD = 0;
   8187a:	2200      	movs	r2, #0
   8187c:	4b06      	ldr	r3, [pc, #24]	; (81898 <mpsse_handle_transmission+0xbc>)
   8187e:	701a      	strb	r2, [r3, #0]
            return;
   81880:	bd10      	pop	{r4, pc}
        read_val = mpsse_send_byte(0);
   81882:	2000      	movs	r0, #0
   81884:	4b05      	ldr	r3, [pc, #20]	; (8189c <mpsse_handle_transmission+0xc0>)
   81886:	4798      	blx	r3
   81888:	e7d1      	b.n	8182e <mpsse_handle_transmission+0x52>
   8188a:	bf00      	nop
   8188c:	20001d40 	.word	0x20001d40
   81890:	20001f46 	.word	0x20001f46
   81894:	20001d44 	.word	0x20001d44
   81898:	20001d3c 	.word	0x20001d3c
   8189c:	000817cd 	.word	0x000817cd
   818a0:	20001d3e 	.word	0x20001d3e
   818a4:	20080000 	.word	0x20080000
   818a8:	00081759 	.word	0x00081759

000818ac <mpsse_handle_special>:
{
   818ac:	b510      	push	{r4, lr}
   818ae:	b082      	sub	sp, #8
    switch (MPSSE_CUR_CMD) {
   818b0:	4b3a      	ldr	r3, [pc, #232]	; (8199c <mpsse_handle_special+0xf0>)
   818b2:	781b      	ldrb	r3, [r3, #0]
   818b4:	3b80      	subs	r3, #128	; 0x80
   818b6:	2b07      	cmp	r3, #7
   818b8:	d811      	bhi.n	818de <mpsse_handle_special+0x32>
   818ba:	e8df f003 	tbb	[pc, r3]
   818be:	1f04      	.short	0x1f04
   818c0:	52473312 	.word	0x52473312
   818c4:	5c10      	.short	0x5c10
        MPSSE_CUR_CMD = 0x00;
   818c6:	2200      	movs	r2, #0
   818c8:	4b34      	ldr	r3, [pc, #208]	; (8199c <mpsse_handle_special+0xf0>)
   818ca:	701a      	strb	r2, [r3, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818cc:	4934      	ldr	r1, [pc, #208]	; (819a0 <mpsse_handle_special+0xf4>)
   818ce:	880b      	ldrh	r3, [r1, #0]
   818d0:	4a34      	ldr	r2, [pc, #208]	; (819a4 <mpsse_handle_special+0xf8>)
   818d2:	5cd0      	ldrb	r0, [r2, r3]
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818d4:	1c98      	adds	r0, r3, #2
   818d6:	8008      	strh	r0, [r1, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818d8:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818da:	b29b      	uxth	r3, r3
   818dc:	5cd3      	ldrb	r3, [r2, r3]
}
   818de:	b002      	add	sp, #8
   818e0:	bd10      	pop	{r4, pc}
        MPSSE_CUR_CMD = 0x00;
   818e2:	2200      	movs	r2, #0
   818e4:	4b2d      	ldr	r3, [pc, #180]	; (8199c <mpsse_handle_special+0xf0>)
   818e6:	701a      	strb	r2, [r3, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818e8:	492d      	ldr	r1, [pc, #180]	; (819a0 <mpsse_handle_special+0xf4>)
   818ea:	880b      	ldrh	r3, [r1, #0]
   818ec:	4a2d      	ldr	r2, [pc, #180]	; (819a4 <mpsse_handle_special+0xf8>)
   818ee:	5cd0      	ldrb	r0, [r2, r3]
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818f0:	1c98      	adds	r0, r3, #2
   818f2:	8008      	strh	r0, [r1, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818f4:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   818f6:	b29b      	uxth	r3, r3
   818f8:	5cd3      	ldrb	r3, [r2, r3]
        break;
   818fa:	e7f0      	b.n	818de <mpsse_handle_special+0x32>
        MPSSE_CUR_CMD = 0x00;
   818fc:	2100      	movs	r1, #0
   818fe:	4b27      	ldr	r3, [pc, #156]	; (8199c <mpsse_handle_special+0xf0>)
   81900:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[0] = 0x00;
   81902:	4a29      	ldr	r2, [pc, #164]	; (819a8 <mpsse_handle_special+0xfc>)
   81904:	7011      	strb	r1, [r2, #0]
        MPSSE_RX_BYTES = 1;
   81906:	2301      	movs	r3, #1
   81908:	4828      	ldr	r0, [pc, #160]	; (819ac <mpsse_handle_special+0x100>)
   8190a:	8003      	strh	r3, [r0, #0]
        MPSSE_TRANSACTION_LOCK = 1;
   8190c:	4828      	ldr	r0, [pc, #160]	; (819b0 <mpsse_handle_special+0x104>)
   8190e:	7003      	strb	r3, [r0, #0]
        MPSSE_TX_IDX++;
   81910:	4c23      	ldr	r4, [pc, #140]	; (819a0 <mpsse_handle_special+0xf4>)
   81912:	8820      	ldrh	r0, [r4, #0]
   81914:	4418      	add	r0, r3
   81916:	8020      	strh	r0, [r4, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81918:	4826      	ldr	r0, [pc, #152]	; (819b4 <mpsse_handle_special+0x108>)
   8191a:	9000      	str	r0, [sp, #0]
   8191c:	2085      	movs	r0, #133	; 0x85
   8191e:	4c26      	ldr	r4, [pc, #152]	; (819b8 <mpsse_handle_special+0x10c>)
   81920:	47a0      	blx	r4
        break;
   81922:	e7dc      	b.n	818de <mpsse_handle_special+0x32>
        MPSSE_CUR_CMD = 0x00;
   81924:	2100      	movs	r1, #0
   81926:	4b1d      	ldr	r3, [pc, #116]	; (8199c <mpsse_handle_special+0xf0>)
   81928:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[0] = 0x00;
   8192a:	4a1f      	ldr	r2, [pc, #124]	; (819a8 <mpsse_handle_special+0xfc>)
   8192c:	7011      	strb	r1, [r2, #0]
        MPSSE_RX_BYTES = 1;
   8192e:	2301      	movs	r3, #1
   81930:	481e      	ldr	r0, [pc, #120]	; (819ac <mpsse_handle_special+0x100>)
   81932:	8003      	strh	r3, [r0, #0]
        MPSSE_TRANSACTION_LOCK = 1;
   81934:	481e      	ldr	r0, [pc, #120]	; (819b0 <mpsse_handle_special+0x104>)
   81936:	7003      	strb	r3, [r0, #0]
        MPSSE_TX_IDX++;
   81938:	4c19      	ldr	r4, [pc, #100]	; (819a0 <mpsse_handle_special+0xf4>)
   8193a:	8820      	ldrh	r0, [r4, #0]
   8193c:	4418      	add	r0, r3
   8193e:	8020      	strh	r0, [r4, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81940:	481c      	ldr	r0, [pc, #112]	; (819b4 <mpsse_handle_special+0x108>)
   81942:	9000      	str	r0, [sp, #0]
   81944:	2085      	movs	r0, #133	; 0x85
   81946:	4c1c      	ldr	r4, [pc, #112]	; (819b8 <mpsse_handle_special+0x10c>)
   81948:	47a0      	blx	r4
        break;
   8194a:	e7c8      	b.n	818de <mpsse_handle_special+0x32>
        MPSSE_LOOPBACK_ENABLED = 1;
   8194c:	2201      	movs	r2, #1
   8194e:	4b1b      	ldr	r3, [pc, #108]	; (819bc <mpsse_handle_special+0x110>)
   81950:	701a      	strb	r2, [r3, #0]
        MPSSE_CUR_CMD = 0x00;
   81952:	2200      	movs	r2, #0
   81954:	4b11      	ldr	r3, [pc, #68]	; (8199c <mpsse_handle_special+0xf0>)
   81956:	701a      	strb	r2, [r3, #0]
        MPSSE_TX_IDX++;
   81958:	4a11      	ldr	r2, [pc, #68]	; (819a0 <mpsse_handle_special+0xf4>)
   8195a:	8813      	ldrh	r3, [r2, #0]
   8195c:	3301      	adds	r3, #1
   8195e:	8013      	strh	r3, [r2, #0]
        break;
   81960:	e7bd      	b.n	818de <mpsse_handle_special+0x32>
        MPSSE_LOOPBACK_ENABLED = 0;
   81962:	2300      	movs	r3, #0
   81964:	4a15      	ldr	r2, [pc, #84]	; (819bc <mpsse_handle_special+0x110>)
   81966:	7013      	strb	r3, [r2, #0]
        MPSSE_CUR_CMD = 0x00;
   81968:	4a0c      	ldr	r2, [pc, #48]	; (8199c <mpsse_handle_special+0xf0>)
   8196a:	7013      	strb	r3, [r2, #0]
        MPSSE_TX_IDX++;
   8196c:	4a0c      	ldr	r2, [pc, #48]	; (819a0 <mpsse_handle_special+0xf4>)
   8196e:	8813      	ldrh	r3, [r2, #0]
   81970:	3301      	adds	r3, #1
   81972:	8013      	strh	r3, [r2, #0]
        break;
   81974:	e7b3      	b.n	818de <mpsse_handle_special+0x32>
        MPSSE_TRANSACTION_LOCK = 1;
   81976:	2201      	movs	r2, #1
   81978:	4b0d      	ldr	r3, [pc, #52]	; (819b0 <mpsse_handle_special+0x104>)
   8197a:	701a      	strb	r2, [r3, #0]
        MPSSE_CUR_CMD = 0x00;
   8197c:	2100      	movs	r1, #0
   8197e:	4b07      	ldr	r3, [pc, #28]	; (8199c <mpsse_handle_special+0xf0>)
   81980:	7019      	strb	r1, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81982:	4b0a      	ldr	r3, [pc, #40]	; (819ac <mpsse_handle_special+0x100>)
   81984:	881b      	ldrh	r3, [r3, #0]
   81986:	4a0b      	ldr	r2, [pc, #44]	; (819b4 <mpsse_handle_special+0x108>)
   81988:	9200      	str	r2, [sp, #0]
   8198a:	4a07      	ldr	r2, [pc, #28]	; (819a8 <mpsse_handle_special+0xfc>)
   8198c:	2085      	movs	r0, #133	; 0x85
   8198e:	4c0a      	ldr	r4, [pc, #40]	; (819b8 <mpsse_handle_special+0x10c>)
   81990:	47a0      	blx	r4
        MPSSE_TX_IDX++;
   81992:	4a03      	ldr	r2, [pc, #12]	; (819a0 <mpsse_handle_special+0xf4>)
   81994:	8813      	ldrh	r3, [r2, #0]
   81996:	3301      	adds	r3, #1
   81998:	8013      	strh	r3, [r2, #0]
}
   8199a:	e7a0      	b.n	818de <mpsse_handle_special+0x32>
   8199c:	20001d3c 	.word	0x20001d3c
   819a0:	20001f46 	.word	0x20001f46
   819a4:	20001d44 	.word	0x20001d44
   819a8:	20080000 	.word	0x20080000
   819ac:	20001d3e 	.word	0x20001d3e
   819b0:	20000651 	.word	0x20000651
   819b4:	000816dd 	.word	0x000816dd
   819b8:	000855a5 	.word	0x000855a5
   819bc:	20001d3d 	.word	0x20001d3d

000819c0 <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
   819c0:	b508      	push	{r3, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
   819c2:	4803      	ldr	r0, [pc, #12]	; (819d0 <mpsse_register_handlers+0x10>)
   819c4:	4b03      	ldr	r3, [pc, #12]	; (819d4 <mpsse_register_handlers+0x14>)
   819c6:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
   819c8:	4803      	ldr	r0, [pc, #12]	; (819d8 <mpsse_register_handlers+0x18>)
   819ca:	4b04      	ldr	r3, [pc, #16]	; (819dc <mpsse_register_handlers+0x1c>)
   819cc:	4798      	blx	r3
   819ce:	bd08      	pop	{r3, pc}
   819d0:	00081605 	.word	0x00081605
   819d4:	00081361 	.word	0x00081361
   819d8:	00081645 	.word	0x00081645
   819dc:	0008133d 	.word	0x0008133d

000819e0 <MPSSE_main_sendrecv_byte>:
// TODO: do writing here as we have time
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
    // return;
    if (MPSSE_TRANSACTION_LOCK) {
   819e0:	4b16      	ldr	r3, [pc, #88]	; (81a3c <MPSSE_main_sendrecv_byte+0x5c>)
   819e2:	781b      	ldrb	r3, [r3, #0]
   819e4:	2b00      	cmp	r3, #0
   819e6:	d128      	bne.n	81a3a <MPSSE_main_sendrecv_byte+0x5a>
{
   819e8:	b510      	push	{r4, lr}
   819ea:	b082      	sub	sp, #8
        // current doing a send back to PC, so wait until that's done
        return;
    }

    // we're at end of the TX buffer, so read more in
    if (MPSSE_TX_IDX == MPSSE_TX_BYTES) {
   819ec:	4b14      	ldr	r3, [pc, #80]	; (81a40 <MPSSE_main_sendrecv_byte+0x60>)
   819ee:	881b      	ldrh	r3, [r3, #0]
   819f0:	4a14      	ldr	r2, [pc, #80]	; (81a44 <MPSSE_main_sendrecv_byte+0x64>)
   819f2:	8812      	ldrh	r2, [r2, #0]
   819f4:	429a      	cmp	r2, r3
   819f6:	d013      	beq.n	81a20 <MPSSE_main_sendrecv_byte+0x40>
        MPSSE_TRANSACTION_LOCK = 1;
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 512, mpsse_vendor_bulk_out_received);
        return;
    }

    if (MPSSE_CUR_CMD == 0x00) {
   819f8:	4a13      	ldr	r2, [pc, #76]	; (81a48 <MPSSE_main_sendrecv_byte+0x68>)
   819fa:	7812      	ldrb	r2, [r2, #0]
   819fc:	b932      	cbnz	r2, 81a0c <MPSSE_main_sendrecv_byte+0x2c>
        MPSSE_CUR_CMD = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   819fe:	1c59      	adds	r1, r3, #1
   81a00:	4a0f      	ldr	r2, [pc, #60]	; (81a40 <MPSSE_main_sendrecv_byte+0x60>)
   81a02:	8011      	strh	r1, [r2, #0]
   81a04:	4a11      	ldr	r2, [pc, #68]	; (81a4c <MPSSE_main_sendrecv_byte+0x6c>)
   81a06:	5cd2      	ldrb	r2, [r2, r3]
   81a08:	4b0f      	ldr	r3, [pc, #60]	; (81a48 <MPSSE_main_sendrecv_byte+0x68>)
   81a0a:	701a      	strb	r2, [r3, #0]
    }

    if (MPSSE_CUR_CMD & 0x80) {
   81a0c:	4b0e      	ldr	r3, [pc, #56]	; (81a48 <MPSSE_main_sendrecv_byte+0x68>)
   81a0e:	f993 3000 	ldrsb.w	r3, [r3]
   81a12:	2b00      	cmp	r3, #0
        mpsse_handle_special();
   81a14:	bfb4      	ite	lt
   81a16:	4b0e      	ldrlt	r3, [pc, #56]	; (81a50 <MPSSE_main_sendrecv_byte+0x70>)
    } else {
        mpsse_handle_transmission();
   81a18:	4b0e      	ldrge	r3, [pc, #56]	; (81a54 <MPSSE_main_sendrecv_byte+0x74>)
   81a1a:	4798      	blx	r3
    }

   81a1c:	b002      	add	sp, #8
   81a1e:	bd10      	pop	{r4, pc}
        MPSSE_TRANSACTION_LOCK = 1;
   81a20:	2201      	movs	r2, #1
   81a22:	4b06      	ldr	r3, [pc, #24]	; (81a3c <MPSSE_main_sendrecv_byte+0x5c>)
   81a24:	701a      	strb	r2, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 512, mpsse_vendor_bulk_out_received);
   81a26:	4b0c      	ldr	r3, [pc, #48]	; (81a58 <MPSSE_main_sendrecv_byte+0x78>)
   81a28:	9300      	str	r3, [sp, #0]
   81a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
   81a2e:	4a07      	ldr	r2, [pc, #28]	; (81a4c <MPSSE_main_sendrecv_byte+0x6c>)
   81a30:	2100      	movs	r1, #0
   81a32:	2006      	movs	r0, #6
   81a34:	4c09      	ldr	r4, [pc, #36]	; (81a5c <MPSSE_main_sendrecv_byte+0x7c>)
   81a36:	47a0      	blx	r4
        return;
   81a38:	e7f0      	b.n	81a1c <MPSSE_main_sendrecv_byte+0x3c>
   81a3a:	4770      	bx	lr
   81a3c:	20000651 	.word	0x20000651
   81a40:	20001f46 	.word	0x20001f46
   81a44:	20001f44 	.word	0x20001f44
   81a48:	20001d3c 	.word	0x20001d3c
   81a4c:	20001d44 	.word	0x20001d44
   81a50:	000818ad 	.word	0x000818ad
   81a54:	000817dd 	.word	0x000817dd
   81a58:	00081699 	.word	0x00081699
   81a5c:	000855a5 	.word	0x000855a5

00081a60 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81a60:	b508      	push	{r3, lr}
	uint32_t prog_freq = 1E6;
    switch(udd_g_ctrlreq.req.wValue){
   81a62:	4b1b      	ldr	r3, [pc, #108]	; (81ad0 <openadc_progfpga_bulk+0x70>)
   81a64:	885b      	ldrh	r3, [r3, #2]
   81a66:	3ba0      	subs	r3, #160	; 0xa0
   81a68:	2b12      	cmp	r3, #18
   81a6a:	d830      	bhi.n	81ace <openadc_progfpga_bulk+0x6e>
   81a6c:	e8df f003 	tbb	[pc, r3]
   81a70:	2f1a140a 	.word	0x2f1a140a
   81a74:	2f2f2f2f 	.word	0x2f2f2f2f
   81a78:	2f2f2f2f 	.word	0x2f2f2f2f
   81a7c:	2f2f2f2f 	.word	0x2f2f2f2f
   81a80:	281e      	.short	0x281e
   81a82:	2c          	.byte	0x2c
   81a83:	00          	.byte	0x00
    case 0xA0:
        
        if (udd_g_ctrlreq.req.wLength == 4) {
   81a84:	4b12      	ldr	r3, [pc, #72]	; (81ad0 <openadc_progfpga_bulk+0x70>)
   81a86:	88db      	ldrh	r3, [r3, #6]
   81a88:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   81a8a:	bf06      	itte	eq
   81a8c:	4b11      	ldreq	r3, [pc, #68]	; (81ad4 <openadc_progfpga_bulk+0x74>)
   81a8e:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81a90:	4811      	ldrne	r0, [pc, #68]	; (81ad8 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_setup1(prog_freq);
   81a92:	4b12      	ldr	r3, [pc, #72]	; (81adc <openadc_progfpga_bulk+0x7c>)
   81a94:	4798      	blx	r3
        break;
   81a96:	bd08      	pop	{r3, pc}

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81a98:	4b11      	ldr	r3, [pc, #68]	; (81ae0 <openadc_progfpga_bulk+0x80>)
   81a9a:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81a9c:	220a      	movs	r2, #10
   81a9e:	4b11      	ldr	r3, [pc, #68]	; (81ae4 <openadc_progfpga_bulk+0x84>)
   81aa0:	701a      	strb	r2, [r3, #0]
        break;
   81aa2:	bd08      	pop	{r3, pc}

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81aa4:	2200      	movs	r2, #0
   81aa6:	4b0f      	ldr	r3, [pc, #60]	; (81ae4 <openadc_progfpga_bulk+0x84>)
   81aa8:	701a      	strb	r2, [r3, #0]
        break;
   81aaa:	bd08      	pop	{r3, pc}

    case 0xB0:
        if (udd_g_ctrlreq.req.wLength == 4) {
   81aac:	4b08      	ldr	r3, [pc, #32]	; (81ad0 <openadc_progfpga_bulk+0x70>)
   81aae:	88db      	ldrh	r3, [r3, #6]
   81ab0:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   81ab2:	bf06      	itte	eq
   81ab4:	4b07      	ldreq	r3, [pc, #28]	; (81ad4 <openadc_progfpga_bulk+0x74>)
   81ab6:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   81ab8:	4807      	ldrne	r0, [pc, #28]	; (81ad8 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_spi_setup1(prog_freq);
   81aba:	4b0b      	ldr	r3, [pc, #44]	; (81ae8 <openadc_progfpga_bulk+0x88>)
   81abc:	4798      	blx	r3
        break;
   81abe:	bd08      	pop	{r3, pc}

    case 0xB1:
        blockendpoint_usage = bep_fpgabitstreamspi;
   81ac0:	2214      	movs	r2, #20
   81ac2:	4b08      	ldr	r3, [pc, #32]	; (81ae4 <openadc_progfpga_bulk+0x84>)
   81ac4:	701a      	strb	r2, [r3, #0]
        break;
   81ac6:	bd08      	pop	{r3, pc}
    
    case 0xB2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81ac8:	2200      	movs	r2, #0
   81aca:	4b06      	ldr	r3, [pc, #24]	; (81ae4 <openadc_progfpga_bulk+0x84>)
   81acc:	701a      	strb	r2, [r3, #0]
   81ace:	bd08      	pop	{r3, pc}
   81ad0:	200029a8 	.word	0x200029a8
   81ad4:	20002524 	.word	0x20002524
   81ad8:	000f4240 	.word	0x000f4240
   81adc:	000808f9 	.word	0x000808f9
   81ae0:	00080989 	.word	0x00080989
   81ae4:	20001f48 	.word	0x20001f48
   81ae8:	00080859 	.word	0x00080859

00081aec <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   81aec:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   81aee:	2200      	movs	r2, #0
   81af0:	4b20      	ldr	r3, [pc, #128]	; (81b74 <openadc_setup_out_received+0x88>)
   81af2:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81af4:	4b20      	ldr	r3, [pc, #128]	; (81b78 <openadc_setup_out_received+0x8c>)
   81af6:	785b      	ldrb	r3, [r3, #1]
   81af8:	3b10      	subs	r3, #16
   81afa:	2b06      	cmp	r3, #6
   81afc:	d82f      	bhi.n	81b5e <openadc_setup_out_received+0x72>
   81afe:	e8df f003 	tbb	[pc, r3]
   81b02:	1704      	.short	0x1704
   81b04:	2e2e200e 	.word	0x2e2e200e
   81b08:	29          	.byte	0x29
   81b09:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81b0a:	2006      	movs	r0, #6
   81b0c:	4b1b      	ldr	r3, [pc, #108]	; (81b7c <openadc_setup_out_received+0x90>)
   81b0e:	4798      	blx	r3
   81b10:	2800      	cmp	r0, #0
   81b12:	d026      	beq.n	81b62 <openadc_setup_out_received+0x76>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   81b14:	4a1a      	ldr	r2, [pc, #104]	; (81b80 <openadc_setup_out_received+0x94>)
   81b16:	4b18      	ldr	r3, [pc, #96]	; (81b78 <openadc_setup_out_received+0x8c>)
   81b18:	611a      	str	r2, [r3, #16]
            return true;
   81b1a:	2001      	movs	r0, #1
   81b1c:	bd08      	pop	{r3, pc}
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81b1e:	2006      	movs	r0, #6
   81b20:	4b16      	ldr	r3, [pc, #88]	; (81b7c <openadc_setup_out_received+0x90>)
   81b22:	4798      	blx	r3
   81b24:	b1f8      	cbz	r0, 81b66 <openadc_setup_out_received+0x7a>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   81b26:	4a17      	ldr	r2, [pc, #92]	; (81b84 <openadc_setup_out_received+0x98>)
   81b28:	4b13      	ldr	r3, [pc, #76]	; (81b78 <openadc_setup_out_received+0x8c>)
   81b2a:	611a      	str	r2, [r3, #16]
            return true;
   81b2c:	2001      	movs	r0, #1
   81b2e:	bd08      	pop	{r3, pc}
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81b30:	2006      	movs	r0, #6
   81b32:	4b12      	ldr	r3, [pc, #72]	; (81b7c <openadc_setup_out_received+0x90>)
   81b34:	4798      	blx	r3
   81b36:	b1c0      	cbz	r0, 81b6a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   81b38:	4a13      	ldr	r2, [pc, #76]	; (81b88 <openadc_setup_out_received+0x9c>)
   81b3a:	4b0f      	ldr	r3, [pc, #60]	; (81b78 <openadc_setup_out_received+0x8c>)
   81b3c:	611a      	str	r2, [r3, #16]
            return true;
   81b3e:	2001      	movs	r0, #1
   81b40:	bd08      	pop	{r3, pc}
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81b42:	2006      	movs	r0, #6
   81b44:	4b0d      	ldr	r3, [pc, #52]	; (81b7c <openadc_setup_out_received+0x90>)
   81b46:	4798      	blx	r3
   81b48:	b188      	cbz	r0, 81b6e <openadc_setup_out_received+0x82>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   81b4a:	4a10      	ldr	r2, [pc, #64]	; (81b8c <openadc_setup_out_received+0xa0>)
   81b4c:	4b0a      	ldr	r3, [pc, #40]	; (81b78 <openadc_setup_out_received+0x8c>)
   81b4e:	611a      	str	r2, [r3, #16]
            return true;
   81b50:	2001      	movs	r0, #1
   81b52:	bd08      	pop	{r3, pc}
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   81b54:	4a0e      	ldr	r2, [pc, #56]	; (81b90 <openadc_setup_out_received+0xa4>)
   81b56:	4b08      	ldr	r3, [pc, #32]	; (81b78 <openadc_setup_out_received+0x8c>)
   81b58:	611a      	str	r2, [r3, #16]
        return true;
   81b5a:	2001      	movs	r0, #1
   81b5c:	bd08      	pop	{r3, pc}

    default:
        return false;
   81b5e:	2000      	movs	r0, #0
   81b60:	bd08      	pop	{r3, pc}
    }

    return false;
   81b62:	2000      	movs	r0, #0
   81b64:	bd08      	pop	{r3, pc}
   81b66:	2000      	movs	r0, #0
   81b68:	bd08      	pop	{r3, pc}
   81b6a:	2000      	movs	r0, #0
   81b6c:	bd08      	pop	{r3, pc}
   81b6e:	2000      	movs	r0, #0
}
   81b70:	bd08      	pop	{r3, pc}
   81b72:	bf00      	nop
   81b74:	20001f48 	.word	0x20001f48
   81b78:	200029a8 	.word	0x200029a8
   81b7c:	00082d7d 	.word	0x00082d7d
   81b80:	00081c5d 	.word	0x00081c5d
   81b84:	00081bc5 	.word	0x00081bc5
   81b88:	00081b95 	.word	0x00081b95
   81b8c:	00081c09 	.word	0x00081c09
   81b90:	00081a61 	.word	0x00081a61

00081b94 <openadc_writemem_bulk>:
{
   81b94:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81b96:	4b07      	ldr	r3, [pc, #28]	; (81bb4 <openadc_writemem_bulk+0x20>)
   81b98:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   81b9a:	4b07      	ldr	r3, [pc, #28]	; (81bb8 <openadc_writemem_bulk+0x24>)
   81b9c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   81b9e:	2504      	movs	r5, #4
   81ba0:	4c06      	ldr	r4, [pc, #24]	; (81bbc <openadc_writemem_bulk+0x28>)
   81ba2:	4628      	mov	r0, r5
   81ba4:	47a0      	blx	r4
   81ba6:	2800      	cmp	r0, #0
   81ba8:	d0fb      	beq.n	81ba2 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   81baa:	4630      	mov	r0, r6
   81bac:	4b04      	ldr	r3, [pc, #16]	; (81bc0 <openadc_writemem_bulk+0x2c>)
   81bae:	4798      	blx	r3
   81bb0:	bd70      	pop	{r4, r5, r6, pc}
   81bb2:	bf00      	nop
   81bb4:	20002524 	.word	0x20002524
   81bb8:	00082da9 	.word	0x00082da9
   81bbc:	00082d7d 	.word	0x00082d7d
   81bc0:	00082dc1 	.word	0x00082dc1

00081bc4 <openadc_readmem_ctrl>:
{
   81bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81bc6:	4b0a      	ldr	r3, [pc, #40]	; (81bf0 <openadc_readmem_ctrl+0x2c>)
   81bc8:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81bca:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81bcc:	4b09      	ldr	r3, [pc, #36]	; (81bf4 <openadc_readmem_ctrl+0x30>)
   81bce:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   81bd0:	2505      	movs	r5, #5
   81bd2:	4c09      	ldr	r4, [pc, #36]	; (81bf8 <openadc_readmem_ctrl+0x34>)
   81bd4:	4628      	mov	r0, r5
   81bd6:	47a0      	blx	r4
   81bd8:	2800      	cmp	r0, #0
   81bda:	d0fb      	beq.n	81bd4 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   81bdc:	4638      	mov	r0, r7
   81bde:	4b07      	ldr	r3, [pc, #28]	; (81bfc <openadc_readmem_ctrl+0x38>)
   81be0:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   81be2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   81be6:	4b06      	ldr	r3, [pc, #24]	; (81c00 <openadc_readmem_ctrl+0x3c>)
   81be8:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   81bea:	4b06      	ldr	r3, [pc, #24]	; (81c04 <openadc_readmem_ctrl+0x40>)
   81bec:	601e      	str	r6, [r3, #0]
   81bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81bf0:	20002524 	.word	0x20002524
   81bf4:	00082da9 	.word	0x00082da9
   81bf8:	00082d7d 	.word	0x00082d7d
   81bfc:	00082dc1 	.word	0x00082dc1
   81c00:	20001f4c 	.word	0x20001f4c
   81c04:	20001f50 	.word	0x20001f50

00081c08 <openadc_writemem_ctrl>:
{
   81c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c0a:	4b0e      	ldr	r3, [pc, #56]	; (81c44 <openadc_writemem_ctrl+0x3c>)
   81c0c:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81c0e:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81c10:	4b0d      	ldr	r3, [pc, #52]	; (81c48 <openadc_writemem_ctrl+0x40>)
   81c12:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   81c14:	2601      	movs	r6, #1
   81c16:	4d0d      	ldr	r5, [pc, #52]	; (81c4c <openadc_writemem_ctrl+0x44>)
   81c18:	4630      	mov	r0, r6
   81c1a:	47a8      	blx	r5
   81c1c:	2800      	cmp	r0, #0
   81c1e:	d0fb      	beq.n	81c18 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   81c20:	4638      	mov	r0, r7
   81c22:	4b0b      	ldr	r3, [pc, #44]	; (81c50 <openadc_writemem_ctrl+0x48>)
   81c24:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81c26:	b14c      	cbz	r4, 81c3c <openadc_writemem_ctrl+0x34>
   81c28:	4a0a      	ldr	r2, [pc, #40]	; (81c54 <openadc_writemem_ctrl+0x4c>)
   81c2a:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   81c2c:	4d0a      	ldr	r5, [pc, #40]	; (81c58 <openadc_writemem_ctrl+0x50>)
   81c2e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   81c32:	6829      	ldr	r1, [r5, #0]
   81c34:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   81c36:	3301      	adds	r3, #1
   81c38:	429c      	cmp	r4, r3
   81c3a:	d1f8      	bne.n	81c2e <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   81c3c:	4b02      	ldr	r3, [pc, #8]	; (81c48 <openadc_writemem_ctrl+0x40>)
   81c3e:	4798      	blx	r3
   81c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c42:	bf00      	nop
   81c44:	20002524 	.word	0x20002524
   81c48:	00082da9 	.word	0x00082da9
   81c4c:	00082d7d 	.word	0x00082d7d
   81c50:	00082dc1 	.word	0x00082dc1
   81c54:	2000252b 	.word	0x2000252b
   81c58:	20000a38 	.word	0x20000a38

00081c5c <openadc_readmem_bulk>:
{
   81c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81c5e:	4b0a      	ldr	r3, [pc, #40]	; (81c88 <openadc_readmem_bulk+0x2c>)
   81c60:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81c62:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81c64:	4b09      	ldr	r3, [pc, #36]	; (81c8c <openadc_readmem_bulk+0x30>)
   81c66:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   81c68:	2502      	movs	r5, #2
   81c6a:	4c09      	ldr	r4, [pc, #36]	; (81c90 <openadc_readmem_bulk+0x34>)
   81c6c:	4628      	mov	r0, r5
   81c6e:	47a0      	blx	r4
   81c70:	2800      	cmp	r0, #0
   81c72:	d0fb      	beq.n	81c6c <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   81c74:	4638      	mov	r0, r7
   81c76:	4b07      	ldr	r3, [pc, #28]	; (81c94 <openadc_readmem_bulk+0x38>)
   81c78:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   81c7a:	4a07      	ldr	r2, [pc, #28]	; (81c98 <openadc_readmem_bulk+0x3c>)
   81c7c:	4631      	mov	r1, r6
   81c7e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   81c82:	4b06      	ldr	r3, [pc, #24]	; (81c9c <openadc_readmem_bulk+0x40>)
   81c84:	4798      	blx	r3
   81c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c88:	20002524 	.word	0x20002524
   81c8c:	00082da9 	.word	0x00082da9
   81c90:	00082d7d 	.word	0x00082d7d
   81c94:	00082dc1 	.word	0x00082dc1
   81c98:	00081ca1 	.word	0x00081ca1
   81c9c:	00083e25 	.word	0x00083e25

00081ca0 <main_vendor_bulk_in_received>:
{
   81ca0:	b510      	push	{r4, lr}
   81ca2:	4604      	mov	r4, r0
    FPGA_releaselock();
   81ca4:	4b05      	ldr	r3, [pc, #20]	; (81cbc <main_vendor_bulk_in_received+0x1c>)
   81ca6:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81ca8:	b104      	cbz	r4, 81cac <main_vendor_bulk_in_received+0xc>
   81caa:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   81cac:	4b04      	ldr	r3, [pc, #16]	; (81cc0 <main_vendor_bulk_in_received+0x20>)
   81cae:	4798      	blx	r3
   81cb0:	2802      	cmp	r0, #2
   81cb2:	d1fa      	bne.n	81caa <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   81cb4:	2000      	movs	r0, #0
   81cb6:	4b03      	ldr	r3, [pc, #12]	; (81cc4 <main_vendor_bulk_in_received+0x24>)
   81cb8:	4798      	blx	r3
   81cba:	e7f6      	b.n	81caa <main_vendor_bulk_in_received+0xa>
   81cbc:	00082da9 	.word	0x00082da9
   81cc0:	00082db5 	.word	0x00082db5
   81cc4:	00082d7d 	.word	0x00082d7d

00081cc8 <main_vendor_bulk_out_received>:
{
   81cc8:	b570      	push	{r4, r5, r6, lr}
   81cca:	4605      	mov	r5, r0
   81ccc:	460c      	mov	r4, r1
    FPGA_releaselock();
   81cce:	4b1f      	ldr	r3, [pc, #124]	; (81d4c <main_vendor_bulk_out_received+0x84>)
   81cd0:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81cd2:	b9bd      	cbnz	r5, 81d04 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   81cd4:	4b1e      	ldr	r3, [pc, #120]	; (81d50 <main_vendor_bulk_out_received+0x88>)
   81cd6:	781b      	ldrb	r3, [r3, #0]
   81cd8:	b9f3      	cbnz	r3, 81d18 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81cda:	b144      	cbz	r4, 81cee <main_vendor_bulk_out_received+0x26>
   81cdc:	4a1d      	ldr	r2, [pc, #116]	; (81d54 <main_vendor_bulk_out_received+0x8c>)
            xram[i] = main_buf_loopback[i];
   81cde:	4d1e      	ldr	r5, [pc, #120]	; (81d58 <main_vendor_bulk_out_received+0x90>)
   81ce0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   81ce4:	6829      	ldr	r1, [r5, #0]
   81ce6:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81ce8:	3301      	adds	r3, #1
   81cea:	429c      	cmp	r4, r3
   81cec:	d1f8      	bne.n	81ce0 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   81cee:	4b1b      	ldr	r3, [pc, #108]	; (81d5c <main_vendor_bulk_out_received+0x94>)
   81cf0:	4798      	blx	r3
   81cf2:	2804      	cmp	r0, #4
   81cf4:	d00d      	beq.n	81d12 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   81cf6:	4a1a      	ldr	r2, [pc, #104]	; (81d60 <main_vendor_bulk_out_received+0x98>)
   81cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81cfc:	4819      	ldr	r0, [pc, #100]	; (81d64 <main_vendor_bulk_out_received+0x9c>)
   81cfe:	4b1a      	ldr	r3, [pc, #104]	; (81d68 <main_vendor_bulk_out_received+0xa0>)
   81d00:	4798      	blx	r3
   81d02:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   81d04:	4a16      	ldr	r2, [pc, #88]	; (81d60 <main_vendor_bulk_out_received+0x98>)
   81d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81d0a:	4816      	ldr	r0, [pc, #88]	; (81d64 <main_vendor_bulk_out_received+0x9c>)
   81d0c:	4b16      	ldr	r3, [pc, #88]	; (81d68 <main_vendor_bulk_out_received+0xa0>)
   81d0e:	4798      	blx	r3
        return;
   81d10:	bd70      	pop	{r4, r5, r6, pc}
            FPGA_releaselock();
   81d12:	4b0e      	ldr	r3, [pc, #56]	; (81d4c <main_vendor_bulk_out_received+0x84>)
   81d14:	4798      	blx	r3
   81d16:	e7ee      	b.n	81cf6 <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81d18:	2b0a      	cmp	r3, #10
   81d1a:	d00c      	beq.n	81d36 <main_vendor_bulk_out_received+0x6e>
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   81d1c:	2b14      	cmp	r3, #20
   81d1e:	d1ea      	bne.n	81cf6 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d20:	2c00      	cmp	r4, #0
   81d22:	d0e8      	beq.n	81cf6 <main_vendor_bulk_out_received+0x2e>
   81d24:	4d0b      	ldr	r5, [pc, #44]	; (81d54 <main_vendor_bulk_out_received+0x8c>)
   81d26:	442c      	add	r4, r5
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   81d28:	4e10      	ldr	r6, [pc, #64]	; (81d6c <main_vendor_bulk_out_received+0xa4>)
   81d2a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   81d2e:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d30:	42a5      	cmp	r5, r4
   81d32:	d1fa      	bne.n	81d2a <main_vendor_bulk_out_received+0x62>
   81d34:	e7df      	b.n	81cf6 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d36:	2c00      	cmp	r4, #0
   81d38:	d0dd      	beq.n	81cf6 <main_vendor_bulk_out_received+0x2e>
   81d3a:	4d06      	ldr	r5, [pc, #24]	; (81d54 <main_vendor_bulk_out_received+0x8c>)
   81d3c:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81d3e:	4e0c      	ldr	r6, [pc, #48]	; (81d70 <main_vendor_bulk_out_received+0xa8>)
   81d40:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   81d44:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   81d46:	42ac      	cmp	r4, r5
   81d48:	d1fa      	bne.n	81d40 <main_vendor_bulk_out_received+0x78>
   81d4a:	e7d4      	b.n	81cf6 <main_vendor_bulk_out_received+0x2e>
   81d4c:	00082da9 	.word	0x00082da9
   81d50:	20001f48 	.word	0x20001f48
   81d54:	20002563 	.word	0x20002563
   81d58:	20000a38 	.word	0x20000a38
   81d5c:	00082db5 	.word	0x00082db5
   81d60:	00081cc9 	.word	0x00081cc9
   81d64:	20002564 	.word	0x20002564
   81d68:	00083e41 	.word	0x00083e41
   81d6c:	000808e1 	.word	0x000808e1
   81d70:	00080999 	.word	0x00080999

00081d74 <openadc_setup_in_received>:
{
   81d74:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   81d76:	4b13      	ldr	r3, [pc, #76]	; (81dc4 <openadc_setup_in_received+0x50>)
   81d78:	785b      	ldrb	r3, [r3, #1]
   81d7a:	2b12      	cmp	r3, #18
   81d7c:	d003      	beq.n	81d86 <openadc_setup_in_received+0x12>
   81d7e:	2b15      	cmp	r3, #21
   81d80:	d00e      	beq.n	81da0 <openadc_setup_in_received+0x2c>
    return false;
   81d82:	2000      	movs	r0, #0
}
   81d84:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81d86:	4a0f      	ldr	r2, [pc, #60]	; (81dc4 <openadc_setup_in_received+0x50>)
   81d88:	4b0f      	ldr	r3, [pc, #60]	; (81dc8 <openadc_setup_in_received+0x54>)
   81d8a:	681b      	ldr	r3, [r3, #0]
   81d8c:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81d8e:	4b0f      	ldr	r3, [pc, #60]	; (81dcc <openadc_setup_in_received+0x58>)
   81d90:	6819      	ldr	r1, [r3, #0]
   81d92:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   81d94:	2200      	movs	r2, #0
   81d96:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   81d98:	4b0d      	ldr	r3, [pc, #52]	; (81dd0 <openadc_setup_in_received+0x5c>)
   81d9a:	4798      	blx	r3
        return true;
   81d9c:	2001      	movs	r0, #1
   81d9e:	bd08      	pop	{r3, pc}
        respbuf[0] = FPGA_ISDONE();
   81da0:	200a      	movs	r0, #10
   81da2:	4b0c      	ldr	r3, [pc, #48]	; (81dd4 <openadc_setup_in_received+0x60>)
   81da4:	4798      	blx	r3
   81da6:	4b0c      	ldr	r3, [pc, #48]	; (81dd8 <openadc_setup_in_received+0x64>)
   81da8:	3000      	adds	r0, #0
   81daa:	bf18      	it	ne
   81dac:	2001      	movne	r0, #1
   81dae:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   81db0:	2200      	movs	r2, #0
   81db2:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81db4:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81db6:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81db8:	4a02      	ldr	r2, [pc, #8]	; (81dc4 <openadc_setup_in_received+0x50>)
   81dba:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81dbc:	2304      	movs	r3, #4
   81dbe:	8193      	strh	r3, [r2, #12]
        return true;
   81dc0:	2001      	movs	r0, #1
   81dc2:	bd08      	pop	{r3, pc}
   81dc4:	200029a8 	.word	0x200029a8
   81dc8:	20001f4c 	.word	0x20001f4c
   81dcc:	20001f50 	.word	0x20001f50
   81dd0:	00082da9 	.word	0x00082da9
   81dd4:	0008411f 	.word	0x0008411f
   81dd8:	200024e4 	.word	0x200024e4

00081ddc <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81ddc:	b508      	push	{r3, lr}
    FPGA_releaselock();
   81dde:	4b04      	ldr	r3, [pc, #16]	; (81df0 <openadc_register_handlers+0x14>)
   81de0:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81de2:	4804      	ldr	r0, [pc, #16]	; (81df4 <openadc_register_handlers+0x18>)
   81de4:	4b04      	ldr	r3, [pc, #16]	; (81df8 <openadc_register_handlers+0x1c>)
   81de6:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81de8:	4804      	ldr	r0, [pc, #16]	; (81dfc <openadc_register_handlers+0x20>)
   81dea:	4b05      	ldr	r3, [pc, #20]	; (81e00 <openadc_register_handlers+0x24>)
   81dec:	4798      	blx	r3
   81dee:	bd08      	pop	{r3, pc}
   81df0:	00082da9 	.word	0x00082da9
   81df4:	00081d75 	.word	0x00081d75
   81df8:	0008133d 	.word	0x0008133d
   81dfc:	00081aed 	.word	0x00081aed
   81e00:	00081361 	.word	0x00081361

00081e04 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81e04:	4b16      	ldr	r3, [pc, #88]	; (81e60 <usart_setup_out_received+0x5c>)
   81e06:	785b      	ldrb	r3, [r3, #1]
   81e08:	3b1a      	subs	r3, #26
   81e0a:	2b17      	cmp	r3, #23
   81e0c:	d826      	bhi.n	81e5c <usart_setup_out_received+0x58>
   81e0e:	e8df f003 	tbb	[pc, r3]
   81e12:	0c11      	.short	0x0c11
   81e14:	25252525 	.word	0x25252525
   81e18:	25251b16 	.word	0x25251b16
   81e1c:	25252525 	.word	0x25252525
   81e20:	25252525 	.word	0x25252525
   81e24:	25252525 	.word	0x25252525
   81e28:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81e2a:	4a0e      	ldr	r2, [pc, #56]	; (81e64 <usart_setup_out_received+0x60>)
   81e2c:	4b0c      	ldr	r3, [pc, #48]	; (81e60 <usart_setup_out_received+0x5c>)
   81e2e:	611a      	str	r2, [r3, #16]
        return true;
   81e30:	2001      	movs	r0, #1
   81e32:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81e34:	4a0c      	ldr	r2, [pc, #48]	; (81e68 <usart_setup_out_received+0x64>)
   81e36:	4b0a      	ldr	r3, [pc, #40]	; (81e60 <usart_setup_out_received+0x5c>)
   81e38:	611a      	str	r2, [r3, #16]
        return true;
   81e3a:	2001      	movs	r0, #1
   81e3c:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81e3e:	4a0b      	ldr	r2, [pc, #44]	; (81e6c <usart_setup_out_received+0x68>)
   81e40:	4b07      	ldr	r3, [pc, #28]	; (81e60 <usart_setup_out_received+0x5c>)
   81e42:	611a      	str	r2, [r3, #16]
        return true;
   81e44:	2001      	movs	r0, #1
   81e46:	4770      	bx	lr
#endif
#ifdef CW_PROG_AVR
		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   81e48:	4a09      	ldr	r2, [pc, #36]	; (81e70 <usart_setup_out_received+0x6c>)
   81e4a:	4b05      	ldr	r3, [pc, #20]	; (81e60 <usart_setup_out_received+0x5c>)
   81e4c:	611a      	str	r2, [r3, #16]
        return true;
   81e4e:	2001      	movs	r0, #1
   81e50:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81e52:	4a08      	ldr	r2, [pc, #32]	; (81e74 <usart_setup_out_received+0x70>)
   81e54:	4b02      	ldr	r3, [pc, #8]	; (81e60 <usart_setup_out_received+0x5c>)
   81e56:	611a      	str	r2, [r3, #16]
        return true;
   81e58:	2001      	movs	r0, #1
   81e5a:	4770      	bx	lr
        break;
    }
    return false;
   81e5c:	2000      	movs	r0, #0
}
   81e5e:	4770      	bx	lr
   81e60:	200029a8 	.word	0x200029a8
   81e64:	00082205 	.word	0x00082205
   81e68:	0008224d 	.word	0x0008224d
   81e6c:	00081e79 	.word	0x00081e79
   81e70:	00081e85 	.word	0x00081e85
   81e74:	00082211 	.word	0x00082211

00081e78 <ctrl_xmega_program_void>:
{
   81e78:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   81e7a:	4b01      	ldr	r3, [pc, #4]	; (81e80 <ctrl_xmega_program_void+0x8>)
   81e7c:	4798      	blx	r3
   81e7e:	bd08      	pop	{r3, pc}
   81e80:	000834a5 	.word	0x000834a5

00081e84 <ctrl_avr_program_void>:
{
   81e84:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   81e86:	4b01      	ldr	r3, [pc, #4]	; (81e8c <ctrl_avr_program_void+0x8>)
   81e88:	4798      	blx	r3
   81e8a:	bd08      	pop	{r3, pc}
   81e8c:	00082de9 	.word	0x00082de9

00081e90 <usart0_enableIO>:
{
   81e90:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81e92:	200d      	movs	r0, #13
   81e94:	4b0a      	ldr	r3, [pc, #40]	; (81ec0 <usart0_enableIO+0x30>)
   81e96:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81e98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e9c:	2013      	movs	r0, #19
   81e9e:	4c09      	ldr	r4, [pc, #36]	; (81ec4 <usart0_enableIO+0x34>)
   81ea0:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81ea2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ea6:	2012      	movs	r0, #18
   81ea8:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81eaa:	4b07      	ldr	r3, [pc, #28]	; (81ec8 <usart0_enableIO+0x38>)
   81eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81eb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81eb4:	2130      	movs	r1, #48	; 0x30
   81eb6:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81eba:	601a      	str	r2, [r3, #0]
   81ebc:	bd10      	pop	{r4, pc}
   81ebe:	bf00      	nop
   81ec0:	000844b5 	.word	0x000844b5
   81ec4:	00084171 	.word	0x00084171
   81ec8:	e000e100 	.word	0xe000e100

00081ecc <usart_enableIO>:
{
   81ecc:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   81ece:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81ed2:	b103      	cbz	r3, 81ed6 <usart_enableIO+0xa>
   81ed4:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   81ed6:	4b01      	ldr	r3, [pc, #4]	; (81edc <usart_enableIO+0x10>)
   81ed8:	4798      	blx	r3
}
   81eda:	e7fb      	b.n	81ed4 <usart_enableIO+0x8>
   81edc:	00081e91 	.word	0x00081e91

00081ee0 <generic_isr>:
{
   81ee0:	b570      	push	{r4, r5, r6, lr}
   81ee2:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81ee4:	6800      	ldr	r0, [r0, #0]
   81ee6:	4b19      	ldr	r3, [pc, #100]	; (81f4c <generic_isr+0x6c>)
   81ee8:	4798      	blx	r3
   81eea:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81eec:	f010 0f01 	tst.w	r0, #1
   81ef0:	d103      	bne.n	81efa <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81ef2:	f015 0f02 	tst.w	r5, #2
   81ef6:	d115      	bne.n	81f24 <generic_isr+0x44>
   81ef8:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81efa:	4620      	mov	r0, r4
   81efc:	f850 3b1c 	ldr.w	r3, [r0], #28
   81f00:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81f02:	b2f6      	uxtb	r6, r6
   81f04:	2200      	movs	r2, #0
   81f06:	4631      	mov	r1, r6
   81f08:	4b11      	ldr	r3, [pc, #68]	; (81f50 <generic_isr+0x70>)
   81f0a:	4798      	blx	r3
        if (driver->cdc_enabled)
   81f0c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81f10:	f013 0f04 	tst.w	r3, #4
   81f14:	d0ed      	beq.n	81ef2 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   81f16:	2200      	movs	r2, #0
   81f18:	4631      	mov	r1, r6
   81f1a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81f1e:	4b0c      	ldr	r3, [pc, #48]	; (81f50 <generic_isr+0x70>)
   81f20:	4798      	blx	r3
   81f22:	e7e6      	b.n	81ef2 <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   81f24:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   81f28:	4628      	mov	r0, r5
   81f2a:	4b0a      	ldr	r3, [pc, #40]	; (81f54 <generic_isr+0x74>)
   81f2c:	4798      	blx	r3
   81f2e:	b920      	cbnz	r0, 81f3a <generic_isr+0x5a>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81f30:	2102      	movs	r1, #2
   81f32:	6820      	ldr	r0, [r4, #0]
   81f34:	4b08      	ldr	r3, [pc, #32]	; (81f58 <generic_isr+0x78>)
   81f36:	4798      	blx	r3
}
   81f38:	e7de      	b.n	81ef8 <generic_isr+0x18>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81f3a:	6824      	ldr	r4, [r4, #0]
   81f3c:	4628      	mov	r0, r5
   81f3e:	4b07      	ldr	r3, [pc, #28]	; (81f5c <generic_isr+0x7c>)
   81f40:	4798      	blx	r3
   81f42:	4601      	mov	r1, r0
   81f44:	4620      	mov	r0, r4
   81f46:	4b06      	ldr	r3, [pc, #24]	; (81f60 <generic_isr+0x80>)
   81f48:	4798      	blx	r3
   81f4a:	bd70      	pop	{r4, r5, r6, pc}
   81f4c:	00085bd9 	.word	0x00085bd9
   81f50:	000807f7 	.word	0x000807f7
   81f54:	0008083f 	.word	0x0008083f
   81f58:	00085bd1 	.word	0x00085bd1
   81f5c:	00080821 	.word	0x00080821
   81f60:	00085bf9 	.word	0x00085bf9

00081f64 <USART0_Handler>:
{
   81f64:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   81f66:	4802      	ldr	r0, [pc, #8]	; (81f70 <USART0_Handler+0xc>)
   81f68:	4b02      	ldr	r3, [pc, #8]	; (81f74 <USART0_Handler+0x10>)
   81f6a:	4798      	blx	r3
   81f6c:	bd08      	pop	{r3, pc}
   81f6e:	bf00      	nop
   81f70:	20000654 	.word	0x20000654
   81f74:	00081ee1 	.word	0x00081ee1

00081f78 <configure_usart>:
{
   81f78:	b538      	push	{r3, r4, r5, lr}
   81f7a:	4604      	mov	r4, r0
   81f7c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   81f80:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   81f82:	2a01      	cmp	r2, #1
   81f84:	d00e      	beq.n	81fa4 <configure_usart+0x2c>
   81f86:	b122      	cbz	r2, 81f92 <configure_usart+0x1a>
   81f88:	2a02      	cmp	r2, #2
   81f8a:	d00f      	beq.n	81fac <configure_usart+0x34>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81f8c:	2200      	movs	r2, #0
   81f8e:	6122      	str	r2, [r4, #16]
   81f90:	e001      	b.n	81f96 <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81f92:	2200      	movs	r2, #0
   81f94:	6122      	str	r2, [r4, #16]
    switch(parity)
   81f96:	2b04      	cmp	r3, #4
   81f98:	d827      	bhi.n	81fea <configure_usart+0x72>
   81f9a:	e8df f003 	tbb	[pc, r3]
   81f9e:	170b      	.short	0x170b
   81fa0:	1e1b      	.short	0x1e1b
   81fa2:	22          	.byte	0x22
   81fa3:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81fa8:	6122      	str	r2, [r4, #16]
            break;
   81faa:	e7f4      	b.n	81f96 <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81fb0:	6122      	str	r2, [r4, #16]
            break;
   81fb2:	e7f0      	b.n	81f96 <configure_usart+0x1e>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81fb8:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81fba:	2806      	cmp	r0, #6
   81fbc:	d036      	beq.n	8202c <configure_usart+0xb4>
   81fbe:	2807      	cmp	r0, #7
   81fc0:	d037      	beq.n	82032 <configure_usart+0xba>
   81fc2:	2805      	cmp	r0, #5
   81fc4:	d015      	beq.n	81ff2 <configure_usart+0x7a>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81fc6:	23c0      	movs	r3, #192	; 0xc0
   81fc8:	60a3      	str	r3, [r4, #8]
   81fca:	e014      	b.n	81ff6 <configure_usart+0x7e>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
   81fd0:	60e3      	str	r3, [r4, #12]
            break;
   81fd2:	e7f2      	b.n	81fba <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81fd4:	2300      	movs	r3, #0
   81fd6:	60e3      	str	r3, [r4, #12]
            break;
   81fd8:	e7ef      	b.n	81fba <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81fde:	60e3      	str	r3, [r4, #12]
            break;
   81fe0:	e7eb      	b.n	81fba <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81fe6:	60e3      	str	r3, [r4, #12]
            break;							
   81fe8:	e7e7      	b.n	81fba <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81fee:	60e3      	str	r3, [r4, #12]
   81ff0:	e7e3      	b.n	81fba <configure_usart+0x42>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81ff2:	2300      	movs	r3, #0
   81ff4:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81ff6:	2300      	movs	r3, #0
   81ff8:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   81ffa:	4620      	mov	r0, r4
   81ffc:	4b0e      	ldr	r3, [pc, #56]	; (82038 <configure_usart+0xc0>)
   81ffe:	4798      	blx	r3
    driver->enabled = 1;
   82000:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82004:	f043 0302 	orr.w	r3, r3, #2
   82008:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   8200c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   82010:	4d0a      	ldr	r5, [pc, #40]	; (8203c <configure_usart+0xc4>)
   82012:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   82014:	f104 001c 	add.w	r0, r4, #28
   82018:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   8201a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   8201e:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   82020:	4a07      	ldr	r2, [pc, #28]	; (82040 <configure_usart+0xc8>)
   82022:	1d21      	adds	r1, r4, #4
   82024:	6820      	ldr	r0, [r4, #0]
   82026:	4b07      	ldr	r3, [pc, #28]	; (82044 <configure_usart+0xcc>)
   82028:	4798      	blx	r3
}
   8202a:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   8202c:	2340      	movs	r3, #64	; 0x40
   8202e:	60a3      	str	r3, [r4, #8]
            break;
   82030:	e7e1      	b.n	81ff6 <configure_usart+0x7e>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   82032:	2380      	movs	r3, #128	; 0x80
   82034:	60a3      	str	r3, [r4, #8]
            break;					
   82036:	e7de      	b.n	81ff6 <configure_usart+0x7e>
   82038:	00081ecd 	.word	0x00081ecd
   8203c:	000807ed 	.word	0x000807ed
   82040:	05b8d800 	.word	0x05b8d800
   82044:	00085af9 	.word	0x00085af9

00082048 <usart_driver_putchar>:
{
   82048:	b570      	push	{r4, r5, r6, lr}
   8204a:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   8204c:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   82050:	2200      	movs	r2, #0
   82052:	4628      	mov	r0, r5
   82054:	4b0e      	ldr	r3, [pc, #56]	; (82090 <usart_driver_putchar+0x48>)
   82056:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   82058:	6820      	ldr	r0, [r4, #0]
   8205a:	4b0e      	ldr	r3, [pc, #56]	; (82094 <usart_driver_putchar+0x4c>)
   8205c:	4798      	blx	r3
   8205e:	f010 0f02 	tst.w	r0, #2
   82062:	d000      	beq.n	82066 <usart_driver_putchar+0x1e>
   82064:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   82066:	6820      	ldr	r0, [r4, #0]
   82068:	4b0b      	ldr	r3, [pc, #44]	; (82098 <usart_driver_putchar+0x50>)
   8206a:	4798      	blx	r3
   8206c:	f010 0f02 	tst.w	r0, #2
   82070:	d104      	bne.n	8207c <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   82072:	2102      	movs	r1, #2
   82074:	6820      	ldr	r0, [r4, #0]
   82076:	4b09      	ldr	r3, [pc, #36]	; (8209c <usart_driver_putchar+0x54>)
   82078:	4798      	blx	r3
}
   8207a:	e7f3      	b.n	82064 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   8207c:	6826      	ldr	r6, [r4, #0]
   8207e:	4628      	mov	r0, r5
   82080:	4b07      	ldr	r3, [pc, #28]	; (820a0 <usart_driver_putchar+0x58>)
   82082:	4798      	blx	r3
   82084:	4601      	mov	r1, r0
   82086:	4630      	mov	r0, r6
   82088:	4b06      	ldr	r3, [pc, #24]	; (820a4 <usart_driver_putchar+0x5c>)
   8208a:	4798      	blx	r3
   8208c:	e7f1      	b.n	82072 <usart_driver_putchar+0x2a>
   8208e:	bf00      	nop
   82090:	000807f7 	.word	0x000807f7
   82094:	00085bd5 	.word	0x00085bd5
   82098:	00085bd9 	.word	0x00085bd9
   8209c:	00085bcd 	.word	0x00085bcd
   820a0:	00080821 	.word	0x00080821
   820a4:	00085bf9 	.word	0x00085bf9

000820a8 <get_nth_available_driver>:
		if (port == 0) break;
   820a8:	2800      	cmp	r0, #0
}
   820aa:	4802      	ldr	r0, [pc, #8]	; (820b4 <get_nth_available_driver+0xc>)
   820ac:	bf18      	it	ne
   820ae:	2000      	movne	r0, #0
   820b0:	4770      	bx	lr
   820b2:	bf00      	nop
   820b4:	20000654 	.word	0x20000654

000820b8 <ctrl_usart_in>:
{
   820b8:	b510      	push	{r4, lr}
   820ba:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   820bc:	4b24      	ldr	r3, [pc, #144]	; (82150 <ctrl_usart_in+0x98>)
   820be:	885c      	ldrh	r4, [r3, #2]
   820c0:	0a20      	lsrs	r0, r4, #8
   820c2:	4b24      	ldr	r3, [pc, #144]	; (82154 <ctrl_usart_in+0x9c>)
   820c4:	4798      	blx	r3
    if (!driver)
   820c6:	2800      	cmp	r0, #0
   820c8:	d03f      	beq.n	8214a <ctrl_usart_in+0x92>
   820ca:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   820cc:	b2e0      	uxtb	r0, r4
   820ce:	2814      	cmp	r0, #20
   820d0:	d007      	beq.n	820e2 <ctrl_usart_in+0x2a>
   820d2:	2818      	cmp	r0, #24
   820d4:	d01f      	beq.n	82116 <ctrl_usart_in+0x5e>
    return false;
   820d6:	2810      	cmp	r0, #16
   820d8:	bf14      	ite	ne
   820da:	2000      	movne	r0, #0
   820dc:	2001      	moveq	r0, #1
}
   820de:	b002      	add	sp, #8
   820e0:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   820e2:	4a1b      	ldr	r2, [pc, #108]	; (82150 <ctrl_usart_in+0x98>)
   820e4:	88d2      	ldrh	r2, [r2, #6]
   820e6:	2a03      	cmp	r2, #3
   820e8:	d801      	bhi.n	820ee <ctrl_usart_in+0x36>
            return false;
   820ea:	2000      	movs	r0, #0
   820ec:	e7f7      	b.n	820de <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   820ee:	4a18      	ldr	r2, [pc, #96]	; (82150 <ctrl_usart_in+0x98>)
   820f0:	4c19      	ldr	r4, [pc, #100]	; (82158 <ctrl_usart_in+0xa0>)
   820f2:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   820f4:	2104      	movs	r1, #4
   820f6:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   820f8:	f103 001c 	add.w	r0, r3, #28
   820fc:	4b17      	ldr	r3, [pc, #92]	; (8215c <ctrl_usart_in+0xa4>)
   820fe:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82100:	7020      	strb	r0, [r4, #0]
   82102:	f3c0 2307 	ubfx	r3, r0, #8, #8
   82106:	7063      	strb	r3, [r4, #1]
   82108:	f3c0 4307 	ubfx	r3, r0, #16, #8
   8210c:	70a3      	strb	r3, [r4, #2]
   8210e:	0e00      	lsrs	r0, r0, #24
   82110:	70e0      	strb	r0, [r4, #3]
        return true;
   82112:	2001      	movs	r0, #1
   82114:	e7e3      	b.n	820de <ctrl_usart_in+0x26>
        if (udd_g_ctrlreq.req.wLength < 4) {
   82116:	4a0e      	ldr	r2, [pc, #56]	; (82150 <ctrl_usart_in+0x98>)
   82118:	88d2      	ldrh	r2, [r2, #6]
   8211a:	2a03      	cmp	r2, #3
   8211c:	d801      	bhi.n	82122 <ctrl_usart_in+0x6a>
            return false;
   8211e:	2000      	movs	r0, #0
   82120:	e7dd      	b.n	820de <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   82122:	4a0b      	ldr	r2, [pc, #44]	; (82150 <ctrl_usart_in+0x98>)
   82124:	4c0c      	ldr	r4, [pc, #48]	; (82158 <ctrl_usart_in+0xa0>)
   82126:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   82128:	2104      	movs	r1, #4
   8212a:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   8212c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   82130:	4b0a      	ldr	r3, [pc, #40]	; (8215c <ctrl_usart_in+0xa4>)
   82132:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82134:	7020      	strb	r0, [r4, #0]
   82136:	f3c0 2307 	ubfx	r3, r0, #8, #8
   8213a:	7063      	strb	r3, [r4, #1]
   8213c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   82140:	70a3      	strb	r3, [r4, #2]
   82142:	0e00      	lsrs	r0, r0, #24
   82144:	70e0      	strb	r0, [r4, #3]
        return true;
   82146:	2001      	movs	r0, #1
   82148:	e7c9      	b.n	820de <ctrl_usart_in+0x26>
        return false;
   8214a:	2000      	movs	r0, #0
   8214c:	e7c7      	b.n	820de <ctrl_usart_in+0x26>
   8214e:	bf00      	nop
   82150:	200029a8 	.word	0x200029a8
   82154:	000820a9 	.word	0x000820a9
   82158:	200024e4 	.word	0x200024e4
   8215c:	0008084b 	.word	0x0008084b

00082160 <ctrl_usart_out>:
{
   82160:	b570      	push	{r4, r5, r6, lr}
   82162:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82164:	4b1d      	ldr	r3, [pc, #116]	; (821dc <ctrl_usart_out+0x7c>)
   82166:	885c      	ldrh	r4, [r3, #2]
   82168:	0a20      	lsrs	r0, r4, #8
   8216a:	4b1d      	ldr	r3, [pc, #116]	; (821e0 <ctrl_usart_out+0x80>)
   8216c:	4798      	blx	r3
    if (!driver) return;
   8216e:	b138      	cbz	r0, 82180 <ctrl_usart_out+0x20>
   82170:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82172:	b2e3      	uxtb	r3, r4
   82174:	2b11      	cmp	r3, #17
   82176:	d018      	beq.n	821aa <ctrl_usart_out+0x4a>
   82178:	2b12      	cmp	r3, #18
   8217a:	d023      	beq.n	821c4 <ctrl_usart_out+0x64>
   8217c:	2b10      	cmp	r3, #16
   8217e:	d001      	beq.n	82184 <ctrl_usart_out+0x24>
}
   82180:	b002      	add	sp, #8
   82182:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   82184:	4b15      	ldr	r3, [pc, #84]	; (821dc <ctrl_usart_out+0x7c>)
   82186:	88db      	ldrh	r3, [r3, #6]
   82188:	2b07      	cmp	r3, #7
   8218a:	d1f9      	bne.n	82180 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   8218c:	4c13      	ldr	r4, [pc, #76]	; (821dc <ctrl_usart_out+0x7c>)
   8218e:	68a3      	ldr	r3, [r4, #8]
   82190:	681e      	ldr	r6, [r3, #0]
		usart_enableIO(driver);
   82192:	4b14      	ldr	r3, [pc, #80]	; (821e4 <ctrl_usart_out+0x84>)
   82194:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   82196:	68a1      	ldr	r1, [r4, #8]
   82198:	794b      	ldrb	r3, [r1, #5]
   8219a:	790a      	ldrb	r2, [r1, #4]
   8219c:	7989      	ldrb	r1, [r1, #6]
   8219e:	9100      	str	r1, [sp, #0]
   821a0:	4631      	mov	r1, r6
   821a2:	4628      	mov	r0, r5
   821a4:	4c10      	ldr	r4, [pc, #64]	; (821e8 <ctrl_usart_out+0x88>)
   821a6:	47a0      	blx	r4
        return true;
   821a8:	e7ea      	b.n	82180 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   821aa:	4b0e      	ldr	r3, [pc, #56]	; (821e4 <ctrl_usart_out+0x84>)
   821ac:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   821ae:	6828      	ldr	r0, [r5, #0]
   821b0:	4b0e      	ldr	r3, [pc, #56]	; (821ec <ctrl_usart_out+0x8c>)
   821b2:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   821b4:	6828      	ldr	r0, [r5, #0]
   821b6:	4b0e      	ldr	r3, [pc, #56]	; (821f0 <ctrl_usart_out+0x90>)
   821b8:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   821ba:	2101      	movs	r1, #1
   821bc:	6828      	ldr	r0, [r5, #0]
   821be:	4b0d      	ldr	r3, [pc, #52]	; (821f4 <ctrl_usart_out+0x94>)
   821c0:	4798      	blx	r3
		return;
   821c2:	e7dd      	b.n	82180 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   821c4:	6800      	ldr	r0, [r0, #0]
   821c6:	4b0c      	ldr	r3, [pc, #48]	; (821f8 <ctrl_usart_out+0x98>)
   821c8:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   821ca:	6828      	ldr	r0, [r5, #0]
   821cc:	4b0b      	ldr	r3, [pc, #44]	; (821fc <ctrl_usart_out+0x9c>)
   821ce:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   821d0:	2103      	movs	r1, #3
   821d2:	6828      	ldr	r0, [r5, #0]
   821d4:	4b0a      	ldr	r3, [pc, #40]	; (82200 <ctrl_usart_out+0xa0>)
   821d6:	4798      	blx	r3
        return true;
   821d8:	e7d2      	b.n	82180 <ctrl_usart_out+0x20>
   821da:	bf00      	nop
   821dc:	200029a8 	.word	0x200029a8
   821e0:	000820a9 	.word	0x000820a9
   821e4:	00081ecd 	.word	0x00081ecd
   821e8:	00081f79 	.word	0x00081f79
   821ec:	00085bc1 	.word	0x00085bc1
   821f0:	00085bb5 	.word	0x00085bb5
   821f4:	00085bcd 	.word	0x00085bcd
   821f8:	00085bc7 	.word	0x00085bc7
   821fc:	00085bbb 	.word	0x00085bbb
   82200:	00085bd1 	.word	0x00085bd1

00082204 <ctrl_usart_cb>:
{
   82204:	b508      	push	{r3, lr}
	ctrl_usart_out();
   82206:	4b01      	ldr	r3, [pc, #4]	; (8220c <ctrl_usart_cb+0x8>)
   82208:	4798      	blx	r3
   8220a:	bd08      	pop	{r3, pc}
   8220c:	00082161 	.word	0x00082161

00082210 <naeusb_cdc_settings_out>:
{
   82210:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82212:	4b0c      	ldr	r3, [pc, #48]	; (82244 <naeusb_cdc_settings_out+0x34>)
   82214:	885e      	ldrh	r6, [r3, #2]
   82216:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   82218:	4d0b      	ldr	r5, [pc, #44]	; (82248 <naeusb_cdc_settings_out+0x38>)
   8221a:	4620      	mov	r0, r4
   8221c:	47a8      	blx	r5
        if (driver) {
   8221e:	b160      	cbz	r0, 8223a <naeusb_cdc_settings_out+0x2a>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82220:	fa46 f204 	asr.w	r2, r6, r4
   82224:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   82228:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   8222c:	bf14      	ite	ne
   8222e:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   82232:	f36f 02c3 	bfceq	r2, #3, #1
   82236:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   8223a:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < 4; i++) {
   8223c:	2c04      	cmp	r4, #4
   8223e:	d1ec      	bne.n	8221a <naeusb_cdc_settings_out+0xa>
}
   82240:	bd70      	pop	{r4, r5, r6, pc}
   82242:	bf00      	nop
   82244:	200029a8 	.word	0x200029a8
   82248:	000820a9 	.word	0x000820a9

0008224c <ctrl_usart_cb_data>:
{		
   8224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   8224e:	4b0c      	ldr	r3, [pc, #48]	; (82280 <ctrl_usart_cb_data+0x34>)
   82250:	8858      	ldrh	r0, [r3, #2]
   82252:	0a00      	lsrs	r0, r0, #8
   82254:	4b0b      	ldr	r3, [pc, #44]	; (82284 <ctrl_usart_cb_data+0x38>)
   82256:	4798      	blx	r3
	if (!driver) return;
   82258:	b188      	cbz	r0, 8227e <ctrl_usart_cb_data+0x32>
   8225a:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8225c:	4b08      	ldr	r3, [pc, #32]	; (82280 <ctrl_usart_cb_data+0x34>)
   8225e:	88da      	ldrh	r2, [r3, #6]
   82260:	899b      	ldrh	r3, [r3, #12]
   82262:	4293      	cmp	r3, r2
   82264:	d30b      	bcc.n	8227e <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82266:	b152      	cbz	r2, 8227e <ctrl_usart_cb_data+0x32>
   82268:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   8226a:	4d05      	ldr	r5, [pc, #20]	; (82280 <ctrl_usart_cb_data+0x34>)
   8226c:	4f06      	ldr	r7, [pc, #24]	; (82288 <ctrl_usart_cb_data+0x3c>)
   8226e:	68ab      	ldr	r3, [r5, #8]
   82270:	5d19      	ldrb	r1, [r3, r4]
   82272:	4630      	mov	r0, r6
   82274:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82276:	3401      	adds	r4, #1
   82278:	88eb      	ldrh	r3, [r5, #6]
   8227a:	42a3      	cmp	r3, r4
   8227c:	dcf7      	bgt.n	8226e <ctrl_usart_cb_data+0x22>
   8227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82280:	200029a8 	.word	0x200029a8
   82284:	000820a9 	.word	0x000820a9
   82288:	00082049 	.word	0x00082049

0008228c <naeusart_register_handlers>:
{
   8228c:	b570      	push	{r4, r5, r6, lr}
   8228e:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   82290:	4d09      	ldr	r5, [pc, #36]	; (822b8 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   82292:	4e0a      	ldr	r6, [pc, #40]	; (822bc <naeusart_register_handlers+0x30>)
   82294:	e002      	b.n	8229c <naeusart_register_handlers+0x10>
   82296:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 4; i++) {
   82298:	2c04      	cmp	r4, #4
   8229a:	d005      	beq.n	822a8 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   8229c:	4620      	mov	r0, r4
   8229e:	47a8      	blx	r5
		if (!driver) continue;
   822a0:	2800      	cmp	r0, #0
   822a2:	d0f8      	beq.n	82296 <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   822a4:	47b0      	blx	r6
   822a6:	e7f6      	b.n	82296 <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   822a8:	4805      	ldr	r0, [pc, #20]	; (822c0 <naeusart_register_handlers+0x34>)
   822aa:	4b06      	ldr	r3, [pc, #24]	; (822c4 <naeusart_register_handlers+0x38>)
   822ac:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   822ae:	4806      	ldr	r0, [pc, #24]	; (822c8 <naeusart_register_handlers+0x3c>)
   822b0:	4b06      	ldr	r3, [pc, #24]	; (822cc <naeusart_register_handlers+0x40>)
   822b2:	4798      	blx	r3
   822b4:	bd70      	pop	{r4, r5, r6, pc}
   822b6:	bf00      	nop
   822b8:	000820a9 	.word	0x000820a9
   822bc:	00081ecd 	.word	0x00081ecd
   822c0:	00082315 	.word	0x00082315
   822c4:	0008133d 	.word	0x0008133d
   822c8:	00081e05 	.word	0x00081e05
   822cc:	00081361 	.word	0x00081361

000822d0 <naeusb_cdc_settings_in>:
{
   822d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822d2:	4d0d      	ldr	r5, [pc, #52]	; (82308 <naeusb_cdc_settings_in+0x38>)
   822d4:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   822d6:	4f0d      	ldr	r7, [pc, #52]	; (8230c <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   822d8:	4626      	mov	r6, r4
        usart_driver *driver = get_nth_available_driver(i);
   822da:	4620      	mov	r0, r4
   822dc:	47b8      	blx	r7
		respbuf[i] = 0;
   822de:	702e      	strb	r6, [r5, #0]
        if (driver)
   822e0:	b120      	cbz	r0, 822ec <naeusb_cdc_settings_in+0x1c>
            respbuf[i] = driver->cdc_settings_change;
   822e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   822e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   822ea:	702b      	strb	r3, [r5, #0]
   822ec:	3401      	adds	r4, #1
   822ee:	3501      	adds	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   822f0:	2c04      	cmp	r4, #4
   822f2:	d1f2      	bne.n	822da <naeusb_cdc_settings_in+0xa>
    udd_g_ctrlreq.payload = respbuf;
   822f4:	4b06      	ldr	r3, [pc, #24]	; (82310 <naeusb_cdc_settings_in+0x40>)
   822f6:	4a04      	ldr	r2, [pc, #16]	; (82308 <naeusb_cdc_settings_in+0x38>)
   822f8:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   822fa:	88da      	ldrh	r2, [r3, #6]
   822fc:	2a04      	cmp	r2, #4
   822fe:	bf28      	it	cs
   82300:	2204      	movcs	r2, #4
   82302:	819a      	strh	r2, [r3, #12]
}
   82304:	2001      	movs	r0, #1
   82306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82308:	200024e4 	.word	0x200024e4
   8230c:	000820a9 	.word	0x000820a9
   82310:	200029a8 	.word	0x200029a8

00082314 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   82314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   82318:	4b24      	ldr	r3, [pc, #144]	; (823ac <usart_setup_in_received+0x98>)
   8231a:	785b      	ldrb	r3, [r3, #1]
   8231c:	3b1a      	subs	r3, #26
   8231e:	2b17      	cmp	r3, #23
   82320:	d83d      	bhi.n	8239e <usart_setup_in_received+0x8a>
   82322:	e8df f003 	tbb	[pc, r3]
   82326:	0c10      	.short	0x0c10
   82328:	3c3c3c3c 	.word	0x3c3c3c3c
   8232c:	3c3c3430 	.word	0x3c3c3430
   82330:	3c3c3c3c 	.word	0x3c3c3c3c
   82334:	3c3c3c3c 	.word	0x3c3c3c3c
   82338:	3c3c3c3c 	.word	0x3c3c3c3c
   8233c:	383c      	.short	0x383c
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   8233e:	4b1c      	ldr	r3, [pc, #112]	; (823b0 <usart_setup_in_received+0x9c>)
   82340:	4798      	blx	r3
   82342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82346:	4b19      	ldr	r3, [pc, #100]	; (823ac <usart_setup_in_received+0x98>)
   82348:	8858      	ldrh	r0, [r3, #2]
   8234a:	0a00      	lsrs	r0, r0, #8
   8234c:	4b19      	ldr	r3, [pc, #100]	; (823b4 <usart_setup_in_received+0xa0>)
   8234e:	4798      	blx	r3
		if (!driver) return false;
   82350:	b340      	cbz	r0, 823a4 <usart_setup_in_received+0x90>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82352:	4b16      	ldr	r3, [pc, #88]	; (823ac <usart_setup_in_received+0x98>)
   82354:	88db      	ldrh	r3, [r3, #6]
   82356:	b1a3      	cbz	r3, 82382 <usart_setup_in_received+0x6e>
   82358:	4d17      	ldr	r5, [pc, #92]	; (823b8 <usart_setup_in_received+0xa4>)
   8235a:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   8235c:	f100 081c 	add.w	r8, r0, #28
   82360:	4e16      	ldr	r6, [pc, #88]	; (823bc <usart_setup_in_received+0xa8>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82362:	4f12      	ldr	r7, [pc, #72]	; (823ac <usart_setup_in_received+0x98>)
    return get_from_circ_buf(&driver->rxbuf);
   82364:	4640      	mov	r0, r8
   82366:	47b0      	blx	r6
            respbuf[cnt] = usart_driver_getchar(driver);
   82368:	f805 0f01 	strb.w	r0, [r5, #1]!
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8236c:	3401      	adds	r4, #1
   8236e:	88fb      	ldrh	r3, [r7, #6]
   82370:	42a3      	cmp	r3, r4
   82372:	d8f7      	bhi.n	82364 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   82374:	4b0d      	ldr	r3, [pc, #52]	; (823ac <usart_setup_in_received+0x98>)
   82376:	4a12      	ldr	r2, [pc, #72]	; (823c0 <usart_setup_in_received+0xac>)
   82378:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   8237a:	819c      	strh	r4, [r3, #12]
        return true;
   8237c:	2001      	movs	r0, #1
   8237e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82382:	2400      	movs	r4, #0
   82384:	e7f6      	b.n	82374 <usart_setup_in_received+0x60>
        break;
		
#ifdef CW_PROG_XMEGA
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   82386:	4b0f      	ldr	r3, [pc, #60]	; (823c4 <usart_setup_in_received+0xb0>)
   82388:	4798      	blx	r3
   8238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif

#ifdef CW_PROG_AVR        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   8238e:	4b0e      	ldr	r3, [pc, #56]	; (823c8 <usart_setup_in_received+0xb4>)
   82390:	4798      	blx	r3
   82392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   82396:	4b0d      	ldr	r3, [pc, #52]	; (823cc <usart_setup_in_received+0xb8>)
   82398:	4798      	blx	r3
   8239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
    }
    return false;
   8239e:	2000      	movs	r0, #0
   823a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   823a4:	2000      	movs	r0, #0
}
   823a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823aa:	bf00      	nop
   823ac:	200029a8 	.word	0x200029a8
   823b0:	000820b9 	.word	0x000820b9
   823b4:	000820a9 	.word	0x000820a9
   823b8:	200024e3 	.word	0x200024e3
   823bc:	00080821 	.word	0x00080821
   823c0:	200024e4 	.word	0x200024e4
   823c4:	000834a5 	.word	0x000834a5
   823c8:	00082de9 	.word	0x00082de9
   823cc:	000822d1 	.word	0x000822d1

000823d0 <cdc_enable>:
{
   823d0:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   823d2:	4b05      	ldr	r3, [pc, #20]	; (823e8 <cdc_enable+0x18>)
   823d4:	4798      	blx	r3
    driver->cdc_enabled = 1;
   823d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   823da:	f043 0304 	orr.w	r3, r3, #4
   823de:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   823e2:	2001      	movs	r0, #1
   823e4:	bd08      	pop	{r3, pc}
   823e6:	bf00      	nop
   823e8:	000820a9 	.word	0x000820a9

000823ec <cdc_disable>:
{
   823ec:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   823ee:	4b04      	ldr	r3, [pc, #16]	; (82400 <cdc_disable+0x14>)
   823f0:	4798      	blx	r3
    driver->cdc_enabled = 0;
   823f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   823f6:	f36f 0382 	bfc	r3, #2, #1
   823fa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
   823fe:	bd08      	pop	{r3, pc}
   82400:	000820a9 	.word	0x000820a9

00082404 <my_callback_rx_notify>:
{
   82404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82408:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   8240a:	4b17      	ldr	r3, [pc, #92]	; (82468 <my_callback_rx_notify+0x64>)
   8240c:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   8240e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82412:	f003 0306 	and.w	r3, r3, #6
   82416:	2b06      	cmp	r3, #6
   82418:	d001      	beq.n	8241e <my_callback_rx_notify+0x1a>
   8241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8241e:	4607      	mov	r7, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   82420:	4648      	mov	r0, r9
   82422:	4b12      	ldr	r3, [pc, #72]	; (8246c <my_callback_rx_notify+0x68>)
   82424:	4798      	blx	r3
        while (num_char > 0) {
   82426:	4605      	mov	r5, r0
   82428:	2800      	cmp	r0, #0
   8242a:	d0f6      	beq.n	8241a <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8242c:	4e10      	ldr	r6, [pc, #64]	; (82470 <my_callback_rx_notify+0x6c>)
   8242e:	f8df a044 	ldr.w	sl, [pc, #68]	; 82474 <my_callback_rx_notify+0x70>
                usart_driver_putchar(driver, uart_buf[i]);
   82432:	f8df 8044 	ldr.w	r8, [pc, #68]	; 82478 <my_callback_rx_notify+0x74>
            num_char = (num_char > 512) ? 512 : num_char;
   82436:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   8243a:	bf28      	it	cs
   8243c:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82440:	462a      	mov	r2, r5
   82442:	4631      	mov	r1, r6
   82444:	4648      	mov	r0, r9
   82446:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   82448:	b13d      	cbz	r5, 8245a <my_callback_rx_notify+0x56>
   8244a:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   8244c:	5d31      	ldrb	r1, [r6, r4]
   8244e:	4638      	mov	r0, r7
   82450:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   82452:	3401      	adds	r4, #1
   82454:	b2a4      	uxth	r4, r4
   82456:	42a5      	cmp	r5, r4
   82458:	d8f8      	bhi.n	8244c <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   8245a:	4648      	mov	r0, r9
   8245c:	4b03      	ldr	r3, [pc, #12]	; (8246c <my_callback_rx_notify+0x68>)
   8245e:	4798      	blx	r3
        while (num_char > 0) {
   82460:	4605      	mov	r5, r0
   82462:	2800      	cmp	r0, #0
   82464:	d1e7      	bne.n	82436 <my_callback_rx_notify+0x32>
   82466:	e7d8      	b.n	8241a <my_callback_rx_notify+0x16>
   82468:	000820a9 	.word	0x000820a9
   8246c:	000803f1 	.word	0x000803f1
   82470:	20001f54 	.word	0x20001f54
   82474:	00080601 	.word	0x00080601
   82478:	00082049 	.word	0x00082049

0008247c <my_callback_config>:
{
   8247c:	b530      	push	{r4, r5, lr}
   8247e:	b083      	sub	sp, #12
   82480:	460d      	mov	r5, r1
	usart_driver *driver = get_nth_available_driver(port);
   82482:	4b14      	ldr	r3, [pc, #80]	; (824d4 <my_callback_config+0x58>)
   82484:	4798      	blx	r3
    if (driver->cdc_enabled) {
   82486:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   8248a:	f013 0f04 	tst.w	r3, #4
   8248e:	d003      	beq.n	82498 <my_callback_config+0x1c>
   82490:	4604      	mov	r4, r0
        switch(cfg->bParityType) {
   82492:	796b      	ldrb	r3, [r5, #5]
   82494:	2b04      	cmp	r3, #4
   82496:	d901      	bls.n	8249c <my_callback_config+0x20>
}
   82498:	b003      	add	sp, #12
   8249a:	bd30      	pop	{r4, r5, pc}
        uint32_t baud = cfg->dwDTERate;
   8249c:	6829      	ldr	r1, [r5, #0]
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   8249e:	79ab      	ldrb	r3, [r5, #6]
   824a0:	3b05      	subs	r3, #5
   824a2:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   824a4:	b2db      	uxtb	r3, r3
   824a6:	9300      	str	r3, [sp, #0]
   824a8:	2300      	movs	r3, #0
   824aa:	461a      	mov	r2, r3
   824ac:	4d0a      	ldr	r5, [pc, #40]	; (824d8 <my_callback_config+0x5c>)
   824ae:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver) & UART_IER_RXRDY)) {
   824b0:	4620      	mov	r0, r4
   824b2:	4b0a      	ldr	r3, [pc, #40]	; (824dc <my_callback_config+0x60>)
   824b4:	4798      	blx	r3
   824b6:	f010 0f01 	tst.w	r0, #1
   824ba:	d1ed      	bne.n	82498 <my_callback_config+0x1c>
			usart_enable_rx(driver->usart);
   824bc:	6820      	ldr	r0, [r4, #0]
   824be:	4b08      	ldr	r3, [pc, #32]	; (824e0 <my_callback_config+0x64>)
   824c0:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   824c2:	6820      	ldr	r0, [r4, #0]
   824c4:	4b07      	ldr	r3, [pc, #28]	; (824e4 <my_callback_config+0x68>)
   824c6:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   824c8:	2101      	movs	r1, #1
   824ca:	6820      	ldr	r0, [r4, #0]
   824cc:	4b06      	ldr	r3, [pc, #24]	; (824e8 <my_callback_config+0x6c>)
   824ce:	4798      	blx	r3
   824d0:	e7e2      	b.n	82498 <my_callback_config+0x1c>
   824d2:	bf00      	nop
   824d4:	000820a9 	.word	0x000820a9
   824d8:	00081f79 	.word	0x00081f79
   824dc:	00085bd5 	.word	0x00085bd5
   824e0:	00085bc1 	.word	0x00085bc1
   824e4:	00085bb5 	.word	0x00085bb5
   824e8:	00085bcd 	.word	0x00085bcd

000824ec <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   824ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824f0:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   824f2:	f8df b04c 	ldr.w	fp, [pc, #76]	; 82540 <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   824f6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82544 <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   824fa:	f8df a04c 	ldr.w	sl, [pc, #76]	; 82548 <cdc_send_to_pc+0x5c>
   824fe:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8254c <cdc_send_to_pc+0x60>
   82502:	e00d      	b.n	82520 <cdc_send_to_pc+0x34>
   82504:	4620      	mov	r0, r4
   82506:	47d0      	blx	sl
   82508:	4601      	mov	r1, r0
   8250a:	4638      	mov	r0, r7
   8250c:	47c8      	blx	r9
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   8250e:	f506 74e2 	add.w	r4, r6, #452	; 0x1c4
   82512:	4620      	mov	r0, r4
   82514:	47c0      	blx	r8
   82516:	2800      	cmp	r0, #0
   82518:	d1f4      	bne.n	82504 <cdc_send_to_pc+0x18>
   8251a:	3501      	adds	r5, #1
	for (uint8_t i = 0; i < 4; i++) {
   8251c:	2d04      	cmp	r5, #4
   8251e:	d00c      	beq.n	8253a <cdc_send_to_pc+0x4e>
   82520:	b2ef      	uxtb	r7, r5
		usart_driver *driver = get_nth_available_driver(i);
   82522:	4628      	mov	r0, r5
   82524:	47d8      	blx	fp
		if (!driver) continue;
   82526:	4606      	mov	r6, r0
   82528:	2800      	cmp	r0, #0
   8252a:	d0f6      	beq.n	8251a <cdc_send_to_pc+0x2e>
		if (driver->cdc_enabled && driver->enabled) {
   8252c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82530:	f003 0306 	and.w	r3, r3, #6
   82534:	2b06      	cmp	r3, #6
   82536:	d1f0      	bne.n	8251a <cdc_send_to_pc+0x2e>
   82538:	e7e9      	b.n	8250e <cdc_send_to_pc+0x22>
			}
		}

	}
	
   8253a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8253e:	bf00      	nop
   82540:	000820a9 	.word	0x000820a9
   82544:	0008083f 	.word	0x0008083f
   82548:	00080821 	.word	0x00080821
   8254c:	00080731 	.word	0x00080731

00082550 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82550:	4b10      	ldr	r3, [pc, #64]	; (82594 <udc_next_desc_in_iface+0x44>)
   82552:	681b      	ldr	r3, [r3, #0]
   82554:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82556:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82558:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8255a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8255c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8255e:	4290      	cmp	r0, r2
   82560:	d211      	bcs.n	82586 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82562:	7843      	ldrb	r3, [r0, #1]
   82564:	2b04      	cmp	r3, #4
   82566:	d010      	beq.n	8258a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82568:	428b      	cmp	r3, r1
   8256a:	d009      	beq.n	82580 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8256c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8256e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   82570:	4290      	cmp	r0, r2
   82572:	d206      	bcs.n	82582 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82574:	7843      	ldrb	r3, [r0, #1]
   82576:	2b04      	cmp	r3, #4
   82578:	d009      	beq.n	8258e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   8257a:	428b      	cmp	r3, r1
   8257c:	d1f6      	bne.n	8256c <udc_next_desc_in_iface+0x1c>
   8257e:	e007      	b.n	82590 <udc_next_desc_in_iface+0x40>
   82580:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   82582:	2000      	movs	r0, #0
   82584:	4770      	bx	lr
   82586:	2000      	movs	r0, #0
   82588:	4770      	bx	lr
   8258a:	2000      	movs	r0, #0
   8258c:	4770      	bx	lr
   8258e:	2000      	movs	r0, #0
}
   82590:	4770      	bx	lr
   82592:	bf00      	nop
   82594:	2000215c 	.word	0x2000215c

00082598 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   82598:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8259a:	4b03      	ldr	r3, [pc, #12]	; (825a8 <udc_valid_address+0x10>)
   8259c:	7898      	ldrb	r0, [r3, #2]
   8259e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   825a2:	4b02      	ldr	r3, [pc, #8]	; (825ac <udc_valid_address+0x14>)
   825a4:	4798      	blx	r3
   825a6:	bd08      	pop	{r3, pc}
   825a8:	200029a8 	.word	0x200029a8
   825ac:	000852f9 	.word	0x000852f9

000825b0 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   825b0:	4b19      	ldr	r3, [pc, #100]	; (82618 <udc_update_iface_desc+0x68>)
   825b2:	781b      	ldrb	r3, [r3, #0]
   825b4:	b34b      	cbz	r3, 8260a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   825b6:	4b19      	ldr	r3, [pc, #100]	; (8261c <udc_update_iface_desc+0x6c>)
   825b8:	681b      	ldr	r3, [r3, #0]
   825ba:	681b      	ldr	r3, [r3, #0]
   825bc:	791a      	ldrb	r2, [r3, #4]
   825be:	4282      	cmp	r2, r0
   825c0:	d925      	bls.n	8260e <udc_update_iface_desc+0x5e>
{
   825c2:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   825c4:	4a16      	ldr	r2, [pc, #88]	; (82620 <udc_update_iface_desc+0x70>)
   825c6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   825c8:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   825ca:	441c      	add	r4, r3
	while (ptr_end_desc >
   825cc:	42a3      	cmp	r3, r4
   825ce:	d220      	bcs.n	82612 <udc_update_iface_desc+0x62>
   825d0:	2500      	movs	r5, #0
   825d2:	2601      	movs	r6, #1
   825d4:	e007      	b.n	825e6 <udc_update_iface_desc+0x36>
   825d6:	4a12      	ldr	r2, [pc, #72]	; (82620 <udc_update_iface_desc+0x70>)
   825d8:	6013      	str	r3, [r2, #0]
   825da:	e00f      	b.n	825fc <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   825dc:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   825de:	4413      	add	r3, r2
   825e0:	4635      	mov	r5, r6
	while (ptr_end_desc >
   825e2:	42a3      	cmp	r3, r4
   825e4:	d20c      	bcs.n	82600 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   825e6:	785a      	ldrb	r2, [r3, #1]
   825e8:	2a04      	cmp	r2, #4
   825ea:	d1f7      	bne.n	825dc <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   825ec:	789a      	ldrb	r2, [r3, #2]
   825ee:	4282      	cmp	r2, r0
   825f0:	d1f4      	bne.n	825dc <udc_update_iface_desc+0x2c>
   825f2:	78da      	ldrb	r2, [r3, #3]
   825f4:	428a      	cmp	r2, r1
   825f6:	d1f1      	bne.n	825dc <udc_update_iface_desc+0x2c>
   825f8:	2d00      	cmp	r5, #0
   825fa:	d1ec      	bne.n	825d6 <udc_update_iface_desc+0x26>
				return true; // Interface found
   825fc:	2001      	movs	r0, #1
   825fe:	e002      	b.n	82606 <udc_update_iface_desc+0x56>
   82600:	4a07      	ldr	r2, [pc, #28]	; (82620 <udc_update_iface_desc+0x70>)
   82602:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   82604:	2000      	movs	r0, #0
}
   82606:	bc70      	pop	{r4, r5, r6}
   82608:	4770      	bx	lr
		return false;
   8260a:	2000      	movs	r0, #0
   8260c:	4770      	bx	lr
		return false;
   8260e:	2000      	movs	r0, #0
   82610:	4770      	bx	lr
	return false; // Interface not found
   82612:	2000      	movs	r0, #0
   82614:	e7f7      	b.n	82606 <udc_update_iface_desc+0x56>
   82616:	bf00      	nop
   82618:	20002159 	.word	0x20002159
   8261c:	2000215c 	.word	0x2000215c
   82620:	20002160 	.word	0x20002160

00082624 <udc_iface_disable>:
{
   82624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82628:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8262a:	2100      	movs	r1, #0
   8262c:	4b13      	ldr	r3, [pc, #76]	; (8267c <udc_iface_disable+0x58>)
   8262e:	4798      	blx	r3
   82630:	4680      	mov	r8, r0
   82632:	b910      	cbnz	r0, 8263a <udc_iface_disable+0x16>
}
   82634:	4640      	mov	r0, r8
   82636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8263a:	4b11      	ldr	r3, [pc, #68]	; (82680 <udc_iface_disable+0x5c>)
   8263c:	681b      	ldr	r3, [r3, #0]
   8263e:	685b      	ldr	r3, [r3, #4]
   82640:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82644:	f8d9 300c 	ldr.w	r3, [r9, #12]
   82648:	4798      	blx	r3
   8264a:	4601      	mov	r1, r0
   8264c:	4620      	mov	r0, r4
   8264e:	4b0b      	ldr	r3, [pc, #44]	; (8267c <udc_iface_disable+0x58>)
   82650:	4798      	blx	r3
   82652:	4680      	mov	r8, r0
   82654:	2800      	cmp	r0, #0
   82656:	d0ed      	beq.n	82634 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82658:	4b0a      	ldr	r3, [pc, #40]	; (82684 <udc_iface_disable+0x60>)
   8265a:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8265c:	2605      	movs	r6, #5
   8265e:	4d0a      	ldr	r5, [pc, #40]	; (82688 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   82660:	4f0a      	ldr	r7, [pc, #40]	; (8268c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82662:	4631      	mov	r1, r6
   82664:	4620      	mov	r0, r4
   82666:	47a8      	blx	r5
			if (NULL == ep_desc) {
   82668:	4604      	mov	r4, r0
   8266a:	b110      	cbz	r0, 82672 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   8266c:	7880      	ldrb	r0, [r0, #2]
   8266e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82670:	e7f7      	b.n	82662 <udc_iface_disable+0x3e>
	udi_api->disable();
   82672:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82676:	4798      	blx	r3
	return true;
   82678:	e7dc      	b.n	82634 <udc_iface_disable+0x10>
   8267a:	bf00      	nop
   8267c:	000825b1 	.word	0x000825b1
   82680:	2000215c 	.word	0x2000215c
   82684:	20002160 	.word	0x20002160
   82688:	00082551 	.word	0x00082551
   8268c:	0008535d 	.word	0x0008535d

00082690 <udc_iface_enable>:
{
   82690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82694:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82696:	4b10      	ldr	r3, [pc, #64]	; (826d8 <udc_iface_enable+0x48>)
   82698:	4798      	blx	r3
   8269a:	4603      	mov	r3, r0
   8269c:	b1c8      	cbz	r0, 826d2 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8269e:	4b0f      	ldr	r3, [pc, #60]	; (826dc <udc_iface_enable+0x4c>)
   826a0:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   826a2:	2605      	movs	r6, #5
   826a4:	4d0e      	ldr	r5, [pc, #56]	; (826e0 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   826a6:	4f0f      	ldr	r7, [pc, #60]	; (826e4 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   826a8:	4631      	mov	r1, r6
   826aa:	4620      	mov	r0, r4
   826ac:	47a8      	blx	r5
		if (NULL == ep_desc)
   826ae:	4604      	mov	r4, r0
   826b0:	b138      	cbz	r0, 826c2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   826b2:	8882      	ldrh	r2, [r0, #4]
   826b4:	78c1      	ldrb	r1, [r0, #3]
   826b6:	7880      	ldrb	r0, [r0, #2]
   826b8:	47b8      	blx	r7
   826ba:	4603      	mov	r3, r0
   826bc:	2800      	cmp	r0, #0
   826be:	d1f3      	bne.n	826a8 <udc_iface_enable+0x18>
   826c0:	e007      	b.n	826d2 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   826c2:	4b09      	ldr	r3, [pc, #36]	; (826e8 <udc_iface_enable+0x58>)
   826c4:	681b      	ldr	r3, [r3, #0]
   826c6:	685b      	ldr	r3, [r3, #4]
   826c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   826cc:	681b      	ldr	r3, [r3, #0]
   826ce:	4798      	blx	r3
   826d0:	4603      	mov	r3, r0
}
   826d2:	4618      	mov	r0, r3
   826d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826d8:	000825b1 	.word	0x000825b1
   826dc:	20002160 	.word	0x20002160
   826e0:	00082551 	.word	0x00082551
   826e4:	00085691 	.word	0x00085691
   826e8:	2000215c 	.word	0x2000215c

000826ec <udc_get_interface_desc>:
}
   826ec:	4b01      	ldr	r3, [pc, #4]	; (826f4 <udc_get_interface_desc+0x8>)
   826ee:	6818      	ldr	r0, [r3, #0]
   826f0:	4770      	bx	lr
   826f2:	bf00      	nop
   826f4:	20002160 	.word	0x20002160

000826f8 <udc_start>:
{
   826f8:	b508      	push	{r3, lr}
	udd_enable();
   826fa:	4b01      	ldr	r3, [pc, #4]	; (82700 <udc_start+0x8>)
   826fc:	4798      	blx	r3
   826fe:	bd08      	pop	{r3, pc}
   82700:	000851dd 	.word	0x000851dd

00082704 <udc_reset>:
{
   82704:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   82706:	4b0d      	ldr	r3, [pc, #52]	; (8273c <udc_reset+0x38>)
   82708:	781b      	ldrb	r3, [r3, #0]
   8270a:	b183      	cbz	r3, 8272e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8270c:	4b0c      	ldr	r3, [pc, #48]	; (82740 <udc_reset+0x3c>)
   8270e:	681b      	ldr	r3, [r3, #0]
   82710:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82712:	791b      	ldrb	r3, [r3, #4]
   82714:	b15b      	cbz	r3, 8272e <udc_reset+0x2a>
   82716:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   82718:	4e0a      	ldr	r6, [pc, #40]	; (82744 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8271a:	4d09      	ldr	r5, [pc, #36]	; (82740 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   8271c:	4620      	mov	r0, r4
   8271e:	47b0      	blx	r6
				iface_num++) {
   82720:	3401      	adds	r4, #1
   82722:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82724:	682b      	ldr	r3, [r5, #0]
   82726:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82728:	791b      	ldrb	r3, [r3, #4]
   8272a:	42a3      	cmp	r3, r4
   8272c:	d8f6      	bhi.n	8271c <udc_reset+0x18>
	udc_num_configuration = 0;
   8272e:	2300      	movs	r3, #0
   82730:	4a02      	ldr	r2, [pc, #8]	; (8273c <udc_reset+0x38>)
   82732:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   82734:	4a04      	ldr	r2, [pc, #16]	; (82748 <udc_reset+0x44>)
   82736:	8013      	strh	r3, [r2, #0]
   82738:	bd70      	pop	{r4, r5, r6, pc}
   8273a:	bf00      	nop
   8273c:	20002159 	.word	0x20002159
   82740:	2000215c 	.word	0x2000215c
   82744:	00082625 	.word	0x00082625
   82748:	20002154 	.word	0x20002154

0008274c <udc_stop>:
{
   8274c:	b508      	push	{r3, lr}
	udd_disable();
   8274e:	4b02      	ldr	r3, [pc, #8]	; (82758 <udc_stop+0xc>)
   82750:	4798      	blx	r3
	udc_reset();
   82752:	4b02      	ldr	r3, [pc, #8]	; (8275c <udc_stop+0x10>)
   82754:	4798      	blx	r3
   82756:	bd08      	pop	{r3, pc}
   82758:	000850d1 	.word	0x000850d1
   8275c:	00082705 	.word	0x00082705

00082760 <udc_sof_notify>:
{
   82760:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   82762:	4b0d      	ldr	r3, [pc, #52]	; (82798 <udc_sof_notify+0x38>)
   82764:	781b      	ldrb	r3, [r3, #0]
   82766:	b1b3      	cbz	r3, 82796 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82768:	4b0c      	ldr	r3, [pc, #48]	; (8279c <udc_sof_notify+0x3c>)
   8276a:	681b      	ldr	r3, [r3, #0]
   8276c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   8276e:	7912      	ldrb	r2, [r2, #4]
   82770:	b18a      	cbz	r2, 82796 <udc_sof_notify+0x36>
   82772:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82774:	4d09      	ldr	r5, [pc, #36]	; (8279c <udc_sof_notify+0x3c>)
   82776:	e006      	b.n	82786 <udc_sof_notify+0x26>
				iface_num++) {
   82778:	3401      	adds	r4, #1
   8277a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8277c:	682b      	ldr	r3, [r5, #0]
   8277e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82780:	7912      	ldrb	r2, [r2, #4]
   82782:	42a2      	cmp	r2, r4
   82784:	d907      	bls.n	82796 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82786:	685b      	ldr	r3, [r3, #4]
   82788:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   8278c:	691b      	ldr	r3, [r3, #16]
   8278e:	2b00      	cmp	r3, #0
   82790:	d0f2      	beq.n	82778 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82792:	4798      	blx	r3
   82794:	e7f0      	b.n	82778 <udc_sof_notify+0x18>
   82796:	bd38      	pop	{r3, r4, r5, pc}
   82798:	20002159 	.word	0x20002159
   8279c:	2000215c 	.word	0x2000215c

000827a0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   827a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   827a2:	4b95      	ldr	r3, [pc, #596]	; (829f8 <udc_process_setup+0x258>)
   827a4:	2200      	movs	r2, #0
   827a6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   827a8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   827aa:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   827ac:	881b      	ldrh	r3, [r3, #0]
   827ae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   827b2:	d019      	beq.n	827e8 <udc_process_setup+0x48>
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   827b4:	4b90      	ldr	r3, [pc, #576]	; (829f8 <udc_process_setup+0x258>)
   827b6:	781b      	ldrb	r3, [r3, #0]
   827b8:	f013 0f80 	tst.w	r3, #128	; 0x80
   827bc:	d11a      	bne.n	827f4 <udc_process_setup+0x54>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   827be:	f013 0f60 	tst.w	r3, #96	; 0x60
   827c2:	f000 8145 	beq.w	82a50 <udc_process_setup+0x2b0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   827c6:	4b8c      	ldr	r3, [pc, #560]	; (829f8 <udc_process_setup+0x258>)
   827c8:	781b      	ldrb	r3, [r3, #0]
   827ca:	f003 031f 	and.w	r3, r3, #31
   827ce:	2b01      	cmp	r3, #1
   827d0:	f000 8211 	beq.w	82bf6 <udc_process_setup+0x456>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   827d4:	4b88      	ldr	r3, [pc, #544]	; (829f8 <udc_process_setup+0x258>)
   827d6:	781b      	ldrb	r3, [r3, #0]
   827d8:	f003 031f 	and.w	r3, r3, #31
   827dc:	2b02      	cmp	r3, #2
   827de:	f000 8295 	beq.w	82d0c <udc_process_setup+0x56c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   827e2:	2300      	movs	r3, #0
#endif
}
   827e4:	4618      	mov	r0, r3
   827e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   827e8:	21aa      	movs	r1, #170	; 0xaa
   827ea:	4884      	ldr	r0, [pc, #528]	; (829fc <udc_process_setup+0x25c>)
   827ec:	4b84      	ldr	r3, [pc, #528]	; (82a00 <udc_process_setup+0x260>)
   827ee:	4798      	blx	r3
		return true;
   827f0:	2301      	movs	r3, #1
   827f2:	e7f7      	b.n	827e4 <udc_process_setup+0x44>
		if (udd_g_ctrlreq.req.wLength == 0) {
   827f4:	4a80      	ldr	r2, [pc, #512]	; (829f8 <udc_process_setup+0x258>)
   827f6:	88d2      	ldrh	r2, [r2, #6]
   827f8:	2a00      	cmp	r2, #0
   827fa:	f000 82b0 	beq.w	82d5e <udc_process_setup+0x5be>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   827fe:	f013 0f60 	tst.w	r3, #96	; 0x60
   82802:	d1e0      	bne.n	827c6 <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82804:	f013 031f 	ands.w	r3, r3, #31
   82808:	d107      	bne.n	8281a <udc_process_setup+0x7a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8280a:	497b      	ldr	r1, [pc, #492]	; (829f8 <udc_process_setup+0x258>)
   8280c:	7849      	ldrb	r1, [r1, #1]
   8280e:	2906      	cmp	r1, #6
   82810:	d016      	beq.n	82840 <udc_process_setup+0xa0>
   82812:	2908      	cmp	r1, #8
   82814:	f000 80bf 	beq.w	82996 <udc_process_setup+0x1f6>
   82818:	b159      	cbz	r1, 82832 <udc_process_setup+0x92>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8281a:	2b01      	cmp	r3, #1
   8281c:	f000 80c3 	beq.w	829a6 <udc_process_setup+0x206>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82820:	2b02      	cmp	r3, #2
   82822:	d1d0      	bne.n	827c6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   82824:	4b74      	ldr	r3, [pc, #464]	; (829f8 <udc_process_setup+0x258>)
   82826:	785b      	ldrb	r3, [r3, #1]
   82828:	2b00      	cmp	r3, #0
   8282a:	f000 8103 	beq.w	82a34 <udc_process_setup+0x294>
	return false;
   8282e:	2300      	movs	r3, #0
   82830:	e1d3      	b.n	82bda <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   82832:	2a02      	cmp	r2, #2
   82834:	d1ce      	bne.n	827d4 <udc_process_setup+0x34>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   82836:	2102      	movs	r1, #2
   82838:	4872      	ldr	r0, [pc, #456]	; (82a04 <udc_process_setup+0x264>)
   8283a:	4b71      	ldr	r3, [pc, #452]	; (82a00 <udc_process_setup+0x260>)
   8283c:	4798      	blx	r3
   8283e:	e124      	b.n	82a8a <udc_process_setup+0x2ea>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   82840:	4b6d      	ldr	r3, [pc, #436]	; (829f8 <udc_process_setup+0x258>)
   82842:	885a      	ldrh	r2, [r3, #2]
   82844:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82846:	0a13      	lsrs	r3, r2, #8
   82848:	3b01      	subs	r3, #1
   8284a:	2b0e      	cmp	r3, #14
   8284c:	f200 8214 	bhi.w	82c78 <udc_process_setup+0x4d8>
   82850:	e8df f013 	tbh	[pc, r3, lsl #1]
   82854:	0023000f 	.word	0x0023000f
   82858:	0212007b 	.word	0x0212007b
   8285c:	00450212 	.word	0x00450212
   82860:	02120053 	.word	0x02120053
   82864:	02120212 	.word	0x02120212
   82868:	02120212 	.word	0x02120212
   8286c:	02120212 	.word	0x02120212
   82870:	0076      	.short	0x0076
		if (!udd_is_high_speed()) {
   82872:	4b65      	ldr	r3, [pc, #404]	; (82a08 <udc_process_setup+0x268>)
   82874:	4798      	blx	r3
   82876:	b928      	cbnz	r0, 82884 <udc_process_setup+0xe4>
				(uint8_t *) udc_config.confdev_hs,
   82878:	4b64      	ldr	r3, [pc, #400]	; (82a0c <udc_process_setup+0x26c>)
   8287a:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8287c:	7801      	ldrb	r1, [r0, #0]
   8287e:	4b60      	ldr	r3, [pc, #384]	; (82a00 <udc_process_setup+0x260>)
   82880:	4798      	blx	r3
   82882:	e031      	b.n	828e8 <udc_process_setup+0x148>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82884:	4b61      	ldr	r3, [pc, #388]	; (82a0c <udc_process_setup+0x26c>)
   82886:	681a      	ldr	r2, [r3, #0]
   82888:	2110      	movs	r1, #16
   8288a:	7091      	strb	r1, [r2, #2]
   8288c:	2102      	movs	r1, #2
   8288e:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82890:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82892:	7801      	ldrb	r1, [r0, #0]
   82894:	4b5a      	ldr	r3, [pc, #360]	; (82a00 <udc_process_setup+0x260>)
   82896:	4798      	blx	r3
   82898:	e026      	b.n	828e8 <udc_process_setup+0x148>
		if (udd_is_high_speed()) {
   8289a:	4b5b      	ldr	r3, [pc, #364]	; (82a08 <udc_process_setup+0x268>)
   8289c:	4798      	blx	r3
   8289e:	b180      	cbz	r0, 828c2 <udc_process_setup+0x122>
			if (conf_num >= udc_config.confdev_hs->
   828a0:	4b5a      	ldr	r3, [pc, #360]	; (82a0c <udc_process_setup+0x26c>)
   828a2:	689b      	ldr	r3, [r3, #8]
   828a4:	7c5b      	ldrb	r3, [r3, #17]
   828a6:	42a3      	cmp	r3, r4
   828a8:	d98d      	bls.n	827c6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   828aa:	4b58      	ldr	r3, [pc, #352]	; (82a0c <udc_process_setup+0x26c>)
   828ac:	691b      	ldr	r3, [r3, #16]
   828ae:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   828b2:	8841      	ldrh	r1, [r0, #2]
   828b4:	4b52      	ldr	r3, [pc, #328]	; (82a00 <udc_process_setup+0x260>)
   828b6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   828b8:	4b4f      	ldr	r3, [pc, #316]	; (829f8 <udc_process_setup+0x258>)
   828ba:	689b      	ldr	r3, [r3, #8]
   828bc:	2202      	movs	r2, #2
   828be:	705a      	strb	r2, [r3, #1]
   828c0:	e012      	b.n	828e8 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   828c2:	4b52      	ldr	r3, [pc, #328]	; (82a0c <udc_process_setup+0x26c>)
   828c4:	681b      	ldr	r3, [r3, #0]
   828c6:	7c5b      	ldrb	r3, [r3, #17]
   828c8:	42a3      	cmp	r3, r4
   828ca:	f67f af7c 	bls.w	827c6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   828ce:	4b4f      	ldr	r3, [pc, #316]	; (82a0c <udc_process_setup+0x26c>)
   828d0:	685b      	ldr	r3, [r3, #4]
   828d2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   828d6:	8841      	ldrh	r1, [r0, #2]
   828d8:	4b49      	ldr	r3, [pc, #292]	; (82a00 <udc_process_setup+0x260>)
   828da:	4798      	blx	r3
   828dc:	e7ec      	b.n	828b8 <udc_process_setup+0x118>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   828de:	4b4b      	ldr	r3, [pc, #300]	; (82a0c <udc_process_setup+0x26c>)
   828e0:	68d8      	ldr	r0, [r3, #12]
   828e2:	7801      	ldrb	r1, [r0, #0]
   828e4:	4b46      	ldr	r3, [pc, #280]	; (82a00 <udc_process_setup+0x260>)
   828e6:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   828e8:	4b43      	ldr	r3, [pc, #268]	; (829f8 <udc_process_setup+0x258>)
   828ea:	88da      	ldrh	r2, [r3, #6]
   828ec:	899b      	ldrh	r3, [r3, #12]
   828ee:	4293      	cmp	r3, r2
   828f0:	f240 80cb 	bls.w	82a8a <udc_process_setup+0x2ea>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   828f4:	4b40      	ldr	r3, [pc, #256]	; (829f8 <udc_process_setup+0x258>)
   828f6:	819a      	strh	r2, [r3, #12]
   828f8:	e0c7      	b.n	82a8a <udc_process_setup+0x2ea>
		if (!udd_is_high_speed()) {
   828fa:	4b43      	ldr	r3, [pc, #268]	; (82a08 <udc_process_setup+0x268>)
   828fc:	4798      	blx	r3
   828fe:	b988      	cbnz	r0, 82924 <udc_process_setup+0x184>
			if (conf_num >= udc_config.confdev_hs->
   82900:	4b42      	ldr	r3, [pc, #264]	; (82a0c <udc_process_setup+0x26c>)
   82902:	689b      	ldr	r3, [r3, #8]
   82904:	7c5b      	ldrb	r3, [r3, #17]
   82906:	42a3      	cmp	r3, r4
   82908:	f67f af5d 	bls.w	827c6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8290c:	4b3f      	ldr	r3, [pc, #252]	; (82a0c <udc_process_setup+0x26c>)
   8290e:	691b      	ldr	r3, [r3, #16]
   82910:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82914:	8841      	ldrh	r1, [r0, #2]
   82916:	4b3a      	ldr	r3, [pc, #232]	; (82a00 <udc_process_setup+0x260>)
   82918:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8291a:	4b37      	ldr	r3, [pc, #220]	; (829f8 <udc_process_setup+0x258>)
   8291c:	689b      	ldr	r3, [r3, #8]
   8291e:	2207      	movs	r2, #7
   82920:	705a      	strb	r2, [r3, #1]
   82922:	e7e1      	b.n	828e8 <udc_process_setup+0x148>
			if (conf_num >= udc_config.confdev_lsfs->
   82924:	4b39      	ldr	r3, [pc, #228]	; (82a0c <udc_process_setup+0x26c>)
   82926:	681b      	ldr	r3, [r3, #0]
   82928:	7c5b      	ldrb	r3, [r3, #17]
   8292a:	42a3      	cmp	r3, r4
   8292c:	f67f af4b 	bls.w	827c6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82930:	4b36      	ldr	r3, [pc, #216]	; (82a0c <udc_process_setup+0x26c>)
   82932:	685b      	ldr	r3, [r3, #4]
   82934:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82938:	8841      	ldrh	r1, [r0, #2]
   8293a:	4b31      	ldr	r3, [pc, #196]	; (82a00 <udc_process_setup+0x260>)
   8293c:	4798      	blx	r3
   8293e:	e7ec      	b.n	8291a <udc_process_setup+0x17a>
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   82940:	2121      	movs	r1, #33	; 0x21
   82942:	4833      	ldr	r0, [pc, #204]	; (82a10 <udc_process_setup+0x270>)
   82944:	4b2e      	ldr	r3, [pc, #184]	; (82a00 <udc_process_setup+0x260>)
   82946:	4798      	blx	r3
   82948:	e7ce      	b.n	828e8 <udc_process_setup+0x148>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8294a:	b2d2      	uxtb	r2, r2
   8294c:	2a03      	cmp	r2, #3
   8294e:	f63f af3a 	bhi.w	827c6 <udc_process_setup+0x26>
   82952:	e8df f012 	tbh	[pc, r2, lsl #1]
   82956:	0007      	.short	0x0007
   82958:	0208000c 	.word	0x0208000c
   8295c:	0004      	.short	0x0004
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8295e:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   82960:	4a2c      	ldr	r2, [pc, #176]	; (82a14 <udc_process_setup+0x274>)
   82962:	e006      	b.n	82972 <udc_process_setup+0x1d2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   82964:	2104      	movs	r1, #4
   82966:	482c      	ldr	r0, [pc, #176]	; (82a18 <udc_process_setup+0x278>)
   82968:	4b25      	ldr	r3, [pc, #148]	; (82a00 <udc_process_setup+0x260>)
   8296a:	4798      	blx	r3
   8296c:	e7bc      	b.n	828e8 <udc_process_setup+0x148>
		str = udc_string_manufacturer_name;
   8296e:	4a2b      	ldr	r2, [pc, #172]	; (82a1c <udc_process_setup+0x27c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   82970:	2415      	movs	r4, #21
   82972:	3a01      	subs	r2, #1
   82974:	492a      	ldr	r1, [pc, #168]	; (82a20 <udc_process_setup+0x280>)
   82976:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   82978:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   8297c:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   82980:	3301      	adds	r3, #1
   82982:	b2db      	uxtb	r3, r3
   82984:	429c      	cmp	r4, r3
   82986:	d8f7      	bhi.n	82978 <udc_process_setup+0x1d8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   82988:	0061      	lsls	r1, r4, #1
   8298a:	3102      	adds	r1, #2
   8298c:	4824      	ldr	r0, [pc, #144]	; (82a20 <udc_process_setup+0x280>)
   8298e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   82990:	4b1b      	ldr	r3, [pc, #108]	; (82a00 <udc_process_setup+0x260>)
   82992:	4798      	blx	r3
   82994:	e7a8      	b.n	828e8 <udc_process_setup+0x148>
	if (udd_g_ctrlreq.req.wLength != 1) {
   82996:	2a01      	cmp	r2, #1
   82998:	f47f af1c 	bne.w	827d4 <udc_process_setup+0x34>
	udd_set_setup_payload(&udc_num_configuration,1);
   8299c:	2101      	movs	r1, #1
   8299e:	4821      	ldr	r0, [pc, #132]	; (82a24 <udc_process_setup+0x284>)
   829a0:	4b17      	ldr	r3, [pc, #92]	; (82a00 <udc_process_setup+0x260>)
   829a2:	4798      	blx	r3
   829a4:	e071      	b.n	82a8a <udc_process_setup+0x2ea>
			switch (udd_g_ctrlreq.req.bRequest) {
   829a6:	4914      	ldr	r1, [pc, #80]	; (829f8 <udc_process_setup+0x258>)
   829a8:	7849      	ldrb	r1, [r1, #1]
   829aa:	290a      	cmp	r1, #10
   829ac:	f47f af38 	bne.w	82820 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wLength != 1) {
   829b0:	2a01      	cmp	r2, #1
   829b2:	f040 8120 	bne.w	82bf6 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   829b6:	4b1b      	ldr	r3, [pc, #108]	; (82a24 <udc_process_setup+0x284>)
   829b8:	781b      	ldrb	r3, [r3, #0]
   829ba:	2b00      	cmp	r3, #0
   829bc:	f000 811b 	beq.w	82bf6 <udc_process_setup+0x456>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   829c0:	4b0d      	ldr	r3, [pc, #52]	; (829f8 <udc_process_setup+0x258>)
   829c2:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   829c4:	4b18      	ldr	r3, [pc, #96]	; (82a28 <udc_process_setup+0x288>)
   829c6:	681d      	ldr	r5, [r3, #0]
   829c8:	682b      	ldr	r3, [r5, #0]
   829ca:	791b      	ldrb	r3, [r3, #4]
   829cc:	42a3      	cmp	r3, r4
   829ce:	f240 8112 	bls.w	82bf6 <udc_process_setup+0x456>
	if (!udc_update_iface_desc(iface_num, 0)) {
   829d2:	2100      	movs	r1, #0
   829d4:	4620      	mov	r0, r4
   829d6:	4b15      	ldr	r3, [pc, #84]	; (82a2c <udc_process_setup+0x28c>)
   829d8:	4798      	blx	r3
   829da:	2800      	cmp	r0, #0
   829dc:	f43f aef3 	beq.w	827c6 <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   829e0:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   829e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   829e6:	68db      	ldr	r3, [r3, #12]
   829e8:	4798      	blx	r3
   829ea:	4b11      	ldr	r3, [pc, #68]	; (82a30 <udc_process_setup+0x290>)
   829ec:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   829ee:	2101      	movs	r1, #1
   829f0:	4618      	mov	r0, r3
   829f2:	4b03      	ldr	r3, [pc, #12]	; (82a00 <udc_process_setup+0x260>)
   829f4:	4798      	blx	r3
   829f6:	e048      	b.n	82a8a <udc_process_setup+0x2ea>
   829f8:	200029a8 	.word	0x200029a8
   829fc:	20000918 	.word	0x20000918
   82a00:	00085351 	.word	0x00085351
   82a04:	20002154 	.word	0x20002154
   82a08:	000852e9 	.word	0x000852e9
   82a0c:	200001dc 	.word	0x200001dc
   82a10:	200008f4 	.word	0x200008f4
   82a14:	20000a84 	.word	0x20000a84
   82a18:	20000a08 	.word	0x20000a08
   82a1c:	20000a0c 	.word	0x20000a0c
   82a20:	200009c4 	.word	0x200009c4
   82a24:	20002159 	.word	0x20002159
   82a28:	2000215c 	.word	0x2000215c
   82a2c:	000825b1 	.word	0x000825b1
   82a30:	20002158 	.word	0x20002158
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   82a34:	2a02      	cmp	r2, #2
   82a36:	f47f aecd 	bne.w	827d4 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   82a3a:	4b92      	ldr	r3, [pc, #584]	; (82c84 <udc_process_setup+0x4e4>)
   82a3c:	7918      	ldrb	r0, [r3, #4]
   82a3e:	4b92      	ldr	r3, [pc, #584]	; (82c88 <udc_process_setup+0x4e8>)
   82a40:	4798      	blx	r3
   82a42:	4b92      	ldr	r3, [pc, #584]	; (82c8c <udc_process_setup+0x4ec>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   82a44:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   82a46:	2102      	movs	r1, #2
   82a48:	4618      	mov	r0, r3
   82a4a:	4b91      	ldr	r3, [pc, #580]	; (82c90 <udc_process_setup+0x4f0>)
   82a4c:	4798      	blx	r3
   82a4e:	e01c      	b.n	82a8a <udc_process_setup+0x2ea>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82a50:	f013 031f 	ands.w	r3, r3, #31
   82a54:	f040 80b5 	bne.w	82bc2 <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   82a58:	4a8a      	ldr	r2, [pc, #552]	; (82c84 <udc_process_setup+0x4e4>)
   82a5a:	7852      	ldrb	r2, [r2, #1]
   82a5c:	3a01      	subs	r2, #1
   82a5e:	2a08      	cmp	r2, #8
   82a60:	f200 80af 	bhi.w	82bc2 <udc_process_setup+0x422>
   82a64:	e8df f012 	tbh	[pc, r2, lsl #1]
   82a68:	00ad0013 	.word	0x00ad0013
   82a6c:	00ad0023 	.word	0x00ad0023
   82a70:	00ad0009 	.word	0x00ad0009
   82a74:	00ad00ad 	.word	0x00ad00ad
   82a78:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   82a7a:	4b82      	ldr	r3, [pc, #520]	; (82c84 <udc_process_setup+0x4e4>)
   82a7c:	88db      	ldrh	r3, [r3, #6]
   82a7e:	2b00      	cmp	r3, #0
   82a80:	f47f aea8 	bne.w	827d4 <udc_process_setup+0x34>
	udd_g_ctrlreq.callback = udc_valid_address;
   82a84:	4a83      	ldr	r2, [pc, #524]	; (82c94 <udc_process_setup+0x4f4>)
   82a86:	4b7f      	ldr	r3, [pc, #508]	; (82c84 <udc_process_setup+0x4e4>)
   82a88:	611a      	str	r2, [r3, #16]
			return true;
   82a8a:	2301      	movs	r3, #1
   82a8c:	e6aa      	b.n	827e4 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   82a8e:	4b7d      	ldr	r3, [pc, #500]	; (82c84 <udc_process_setup+0x4e4>)
   82a90:	88db      	ldrh	r3, [r3, #6]
   82a92:	2b00      	cmp	r3, #0
   82a94:	f47f ae9e 	bne.w	827d4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   82a98:	4b7a      	ldr	r3, [pc, #488]	; (82c84 <udc_process_setup+0x4e4>)
   82a9a:	885b      	ldrh	r3, [r3, #2]
   82a9c:	2b01      	cmp	r3, #1
   82a9e:	f47f ae99 	bne.w	827d4 <udc_process_setup+0x34>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   82aa2:	4a7d      	ldr	r2, [pc, #500]	; (82c98 <udc_process_setup+0x4f8>)
   82aa4:	8813      	ldrh	r3, [r2, #0]
   82aa6:	f023 0302 	bic.w	r3, r3, #2
   82aaa:	8013      	strh	r3, [r2, #0]
   82aac:	e7ed      	b.n	82a8a <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   82aae:	4b75      	ldr	r3, [pc, #468]	; (82c84 <udc_process_setup+0x4e4>)
   82ab0:	88db      	ldrh	r3, [r3, #6]
   82ab2:	2b00      	cmp	r3, #0
   82ab4:	f47f ae8e 	bne.w	827d4 <udc_process_setup+0x34>
	switch (udd_g_ctrlreq.req.wValue) {
   82ab8:	4b72      	ldr	r3, [pc, #456]	; (82c84 <udc_process_setup+0x4e4>)
   82aba:	885b      	ldrh	r3, [r3, #2]
   82abc:	2b02      	cmp	r3, #2
   82abe:	f040 80dd 	bne.w	82c7c <udc_process_setup+0x4dc>
		if (!udd_is_high_speed()) {
   82ac2:	4b76      	ldr	r3, [pc, #472]	; (82c9c <udc_process_setup+0x4fc>)
   82ac4:	4798      	blx	r3
   82ac6:	2800      	cmp	r0, #0
   82ac8:	f43f ae7d 	beq.w	827c6 <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   82acc:	4b6d      	ldr	r3, [pc, #436]	; (82c84 <udc_process_setup+0x4e4>)
   82ace:	791b      	ldrb	r3, [r3, #4]
   82ad0:	2b00      	cmp	r3, #0
   82ad2:	f47f ae78 	bne.w	827c6 <udc_process_setup+0x26>
		udc_reset();
   82ad6:	4b72      	ldr	r3, [pc, #456]	; (82ca0 <udc_process_setup+0x500>)
   82ad8:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   82ada:	4b6a      	ldr	r3, [pc, #424]	; (82c84 <udc_process_setup+0x4e4>)
   82adc:	889b      	ldrh	r3, [r3, #4]
   82ade:	0a1b      	lsrs	r3, r3, #8
   82ae0:	3b01      	subs	r3, #1
   82ae2:	2b03      	cmp	r3, #3
   82ae4:	f200 80cc 	bhi.w	82c80 <udc_process_setup+0x4e0>
   82ae8:	e8df f003 	tbb	[pc, r3]
   82aec:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   82af0:	4a6c      	ldr	r2, [pc, #432]	; (82ca4 <udc_process_setup+0x504>)
   82af2:	4b64      	ldr	r3, [pc, #400]	; (82c84 <udc_process_setup+0x4e4>)
   82af4:	611a      	str	r2, [r3, #16]
   82af6:	e7c8      	b.n	82a8a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   82af8:	4a6b      	ldr	r2, [pc, #428]	; (82ca8 <udc_process_setup+0x508>)
   82afa:	4b62      	ldr	r3, [pc, #392]	; (82c84 <udc_process_setup+0x4e4>)
   82afc:	611a      	str	r2, [r3, #16]
   82afe:	e7c4      	b.n	82a8a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   82b00:	4a6a      	ldr	r2, [pc, #424]	; (82cac <udc_process_setup+0x50c>)
   82b02:	4b60      	ldr	r3, [pc, #384]	; (82c84 <udc_process_setup+0x4e4>)
   82b04:	611a      	str	r2, [r3, #16]
   82b06:	e7c0      	b.n	82a8a <udc_process_setup+0x2ea>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   82b08:	4a69      	ldr	r2, [pc, #420]	; (82cb0 <udc_process_setup+0x510>)
   82b0a:	4b5e      	ldr	r3, [pc, #376]	; (82c84 <udc_process_setup+0x4e4>)
   82b0c:	611a      	str	r2, [r3, #16]
   82b0e:	e7bc      	b.n	82a8a <udc_process_setup+0x2ea>
	if (udd_g_ctrlreq.req.wLength) {
   82b10:	4b5c      	ldr	r3, [pc, #368]	; (82c84 <udc_process_setup+0x4e4>)
   82b12:	88db      	ldrh	r3, [r3, #6]
   82b14:	2b00      	cmp	r3, #0
   82b16:	f47f ae5d 	bne.w	827d4 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   82b1a:	4b66      	ldr	r3, [pc, #408]	; (82cb4 <udc_process_setup+0x514>)
   82b1c:	4798      	blx	r3
   82b1e:	2800      	cmp	r0, #0
   82b20:	f43f ae51 	beq.w	827c6 <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   82b24:	4b5d      	ldr	r3, [pc, #372]	; (82c9c <udc_process_setup+0x4fc>)
   82b26:	4798      	blx	r3
   82b28:	2800      	cmp	r0, #0
   82b2a:	d036      	beq.n	82b9a <udc_process_setup+0x3fa>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82b2c:	4b55      	ldr	r3, [pc, #340]	; (82c84 <udc_process_setup+0x4e4>)
   82b2e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   82b30:	4b61      	ldr	r3, [pc, #388]	; (82cb8 <udc_process_setup+0x518>)
   82b32:	689b      	ldr	r3, [r3, #8]
   82b34:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82b36:	429a      	cmp	r2, r3
   82b38:	f73f ae45 	bgt.w	827c6 <udc_process_setup+0x26>
	udc_reset();
   82b3c:	4b58      	ldr	r3, [pc, #352]	; (82ca0 <udc_process_setup+0x500>)
   82b3e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   82b40:	4b50      	ldr	r3, [pc, #320]	; (82c84 <udc_process_setup+0x4e4>)
   82b42:	789b      	ldrb	r3, [r3, #2]
   82b44:	4a5d      	ldr	r2, [pc, #372]	; (82cbc <udc_process_setup+0x51c>)
   82b46:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   82b48:	2b00      	cmp	r3, #0
   82b4a:	d09e      	beq.n	82a8a <udc_process_setup+0x2ea>
	if (udd_is_high_speed()) {
   82b4c:	4b53      	ldr	r3, [pc, #332]	; (82c9c <udc_process_setup+0x4fc>)
   82b4e:	4798      	blx	r3
   82b50:	2800      	cmp	r0, #0
   82b52:	d02a      	beq.n	82baa <udc_process_setup+0x40a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   82b54:	4b59      	ldr	r3, [pc, #356]	; (82cbc <udc_process_setup+0x51c>)
   82b56:	781b      	ldrb	r3, [r3, #0]
   82b58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   82b5c:	3b01      	subs	r3, #1
   82b5e:	4a56      	ldr	r2, [pc, #344]	; (82cb8 <udc_process_setup+0x518>)
   82b60:	6912      	ldr	r2, [r2, #16]
   82b62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   82b66:	4a56      	ldr	r2, [pc, #344]	; (82cc0 <udc_process_setup+0x520>)
   82b68:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b6a:	4b55      	ldr	r3, [pc, #340]	; (82cc0 <udc_process_setup+0x520>)
   82b6c:	681b      	ldr	r3, [r3, #0]
   82b6e:	681b      	ldr	r3, [r3, #0]
   82b70:	791b      	ldrb	r3, [r3, #4]
   82b72:	2b00      	cmp	r3, #0
   82b74:	d089      	beq.n	82a8a <udc_process_setup+0x2ea>
   82b76:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   82b78:	4627      	mov	r7, r4
   82b7a:	4e52      	ldr	r6, [pc, #328]	; (82cc4 <udc_process_setup+0x524>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b7c:	4d50      	ldr	r5, [pc, #320]	; (82cc0 <udc_process_setup+0x520>)
		if (!udc_iface_enable(iface_num, 0)) {
   82b7e:	4639      	mov	r1, r7
   82b80:	4620      	mov	r0, r4
   82b82:	47b0      	blx	r6
   82b84:	2800      	cmp	r0, #0
   82b86:	f43f ae1e 	beq.w	827c6 <udc_process_setup+0x26>
			iface_num++) {
   82b8a:	3401      	adds	r4, #1
   82b8c:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82b8e:	682b      	ldr	r3, [r5, #0]
   82b90:	681b      	ldr	r3, [r3, #0]
   82b92:	791b      	ldrb	r3, [r3, #4]
   82b94:	42a3      	cmp	r3, r4
   82b96:	d8f2      	bhi.n	82b7e <udc_process_setup+0x3de>
   82b98:	e777      	b.n	82a8a <udc_process_setup+0x2ea>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82b9a:	4b3a      	ldr	r3, [pc, #232]	; (82c84 <udc_process_setup+0x4e4>)
   82b9c:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   82b9e:	4b46      	ldr	r3, [pc, #280]	; (82cb8 <udc_process_setup+0x518>)
   82ba0:	681b      	ldr	r3, [r3, #0]
   82ba2:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82ba4:	429a      	cmp	r2, r3
   82ba6:	ddc9      	ble.n	82b3c <udc_process_setup+0x39c>
   82ba8:	e60d      	b.n	827c6 <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   82baa:	4b44      	ldr	r3, [pc, #272]	; (82cbc <udc_process_setup+0x51c>)
   82bac:	781b      	ldrb	r3, [r3, #0]
   82bae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   82bb2:	3b01      	subs	r3, #1
   82bb4:	4a40      	ldr	r2, [pc, #256]	; (82cb8 <udc_process_setup+0x518>)
   82bb6:	6852      	ldr	r2, [r2, #4]
   82bb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   82bbc:	4a40      	ldr	r2, [pc, #256]	; (82cc0 <udc_process_setup+0x520>)
   82bbe:	6013      	str	r3, [r2, #0]
   82bc0:	e7d3      	b.n	82b6a <udc_process_setup+0x3ca>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82bc2:	2b01      	cmp	r3, #1
   82bc4:	d00d      	beq.n	82be2 <udc_process_setup+0x442>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82bc6:	2b02      	cmp	r3, #2
   82bc8:	f47f adfd 	bne.w	827c6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   82bcc:	4b2d      	ldr	r3, [pc, #180]	; (82c84 <udc_process_setup+0x4e4>)
   82bce:	785b      	ldrb	r3, [r3, #1]
   82bd0:	2b01      	cmp	r3, #1
   82bd2:	d02e      	beq.n	82c32 <udc_process_setup+0x492>
   82bd4:	2b03      	cmp	r3, #3
   82bd6:	d03c      	beq.n	82c52 <udc_process_setup+0x4b2>
	return false;
   82bd8:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   82bda:	2b00      	cmp	r3, #0
   82bdc:	f47f ae02 	bne.w	827e4 <udc_process_setup+0x44>
   82be0:	e5f1      	b.n	827c6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   82be2:	4a28      	ldr	r2, [pc, #160]	; (82c84 <udc_process_setup+0x4e4>)
   82be4:	7852      	ldrb	r2, [r2, #1]
   82be6:	2a0b      	cmp	r2, #11
   82be8:	d1ed      	bne.n	82bc6 <udc_process_setup+0x426>
	if (udd_g_ctrlreq.req.wLength) {
   82bea:	4b26      	ldr	r3, [pc, #152]	; (82c84 <udc_process_setup+0x4e4>)
   82bec:	88db      	ldrh	r3, [r3, #6]
   82bee:	b913      	cbnz	r3, 82bf6 <udc_process_setup+0x456>
	if (!udc_num_configuration) {
   82bf0:	4b32      	ldr	r3, [pc, #200]	; (82cbc <udc_process_setup+0x51c>)
   82bf2:	781b      	ldrb	r3, [r3, #0]
   82bf4:	b973      	cbnz	r3, 82c14 <udc_process_setup+0x474>
	if (0 == udc_num_configuration) {
   82bf6:	4b31      	ldr	r3, [pc, #196]	; (82cbc <udc_process_setup+0x51c>)
   82bf8:	781b      	ldrb	r3, [r3, #0]
   82bfa:	2b00      	cmp	r3, #0
   82bfc:	f000 80b1 	beq.w	82d62 <udc_process_setup+0x5c2>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82c00:	4b20      	ldr	r3, [pc, #128]	; (82c84 <udc_process_setup+0x4e4>)
   82c02:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82c04:	4b2e      	ldr	r3, [pc, #184]	; (82cc0 <udc_process_setup+0x520>)
   82c06:	681d      	ldr	r5, [r3, #0]
   82c08:	682b      	ldr	r3, [r5, #0]
   82c0a:	791b      	ldrb	r3, [r3, #4]
   82c0c:	42a3      	cmp	r3, r4
   82c0e:	d863      	bhi.n	82cd8 <udc_process_setup+0x538>
	return false;
   82c10:	2300      	movs	r3, #0
   82c12:	e5e7      	b.n	827e4 <udc_process_setup+0x44>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82c14:	4b1b      	ldr	r3, [pc, #108]	; (82c84 <udc_process_setup+0x4e4>)
   82c16:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   82c18:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   82c1a:	4620      	mov	r0, r4
   82c1c:	4b2a      	ldr	r3, [pc, #168]	; (82cc8 <udc_process_setup+0x528>)
   82c1e:	4798      	blx	r3
   82c20:	2800      	cmp	r0, #0
   82c22:	f43f add0 	beq.w	827c6 <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   82c26:	b2e9      	uxtb	r1, r5
   82c28:	4620      	mov	r0, r4
   82c2a:	4b26      	ldr	r3, [pc, #152]	; (82cc4 <udc_process_setup+0x524>)
   82c2c:	4798      	blx	r3
   82c2e:	4603      	mov	r3, r0
   82c30:	e7d3      	b.n	82bda <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   82c32:	4b14      	ldr	r3, [pc, #80]	; (82c84 <udc_process_setup+0x4e4>)
   82c34:	88db      	ldrh	r3, [r3, #6]
   82c36:	2b00      	cmp	r3, #0
   82c38:	f47f adcc 	bne.w	827d4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82c3c:	4b11      	ldr	r3, [pc, #68]	; (82c84 <udc_process_setup+0x4e4>)
   82c3e:	885b      	ldrh	r3, [r3, #2]
   82c40:	2b00      	cmp	r3, #0
   82c42:	f47f adc7 	bne.w	827d4 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82c46:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <udc_process_setup+0x4e4>)
   82c48:	7918      	ldrb	r0, [r3, #4]
   82c4a:	4b20      	ldr	r3, [pc, #128]	; (82ccc <udc_process_setup+0x52c>)
   82c4c:	4798      	blx	r3
   82c4e:	4603      	mov	r3, r0
   82c50:	e7c3      	b.n	82bda <udc_process_setup+0x43a>
	if (udd_g_ctrlreq.req.wLength) {
   82c52:	4b0c      	ldr	r3, [pc, #48]	; (82c84 <udc_process_setup+0x4e4>)
   82c54:	88db      	ldrh	r3, [r3, #6]
   82c56:	2b00      	cmp	r3, #0
   82c58:	f47f adbc 	bne.w	827d4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   82c5c:	4b09      	ldr	r3, [pc, #36]	; (82c84 <udc_process_setup+0x4e4>)
   82c5e:	885b      	ldrh	r3, [r3, #2]
   82c60:	2b00      	cmp	r3, #0
   82c62:	f47f adb7 	bne.w	827d4 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   82c66:	4c07      	ldr	r4, [pc, #28]	; (82c84 <udc_process_setup+0x4e4>)
   82c68:	7920      	ldrb	r0, [r4, #4]
   82c6a:	4b19      	ldr	r3, [pc, #100]	; (82cd0 <udc_process_setup+0x530>)
   82c6c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82c6e:	7920      	ldrb	r0, [r4, #4]
   82c70:	4b18      	ldr	r3, [pc, #96]	; (82cd4 <udc_process_setup+0x534>)
   82c72:	4798      	blx	r3
   82c74:	4603      	mov	r3, r0
   82c76:	e7b0      	b.n	82bda <udc_process_setup+0x43a>
		return false;
   82c78:	2300      	movs	r3, #0
   82c7a:	e7ae      	b.n	82bda <udc_process_setup+0x43a>
		return false;
   82c7c:	2300      	movs	r3, #0
   82c7e:	e7ac      	b.n	82bda <udc_process_setup+0x43a>
	return false;
   82c80:	2300      	movs	r3, #0
   82c82:	e7aa      	b.n	82bda <udc_process_setup+0x43a>
   82c84:	200029a8 	.word	0x200029a8
   82c88:	000853b1 	.word	0x000853b1
   82c8c:	20002156 	.word	0x20002156
   82c90:	00085351 	.word	0x00085351
   82c94:	00082599 	.word	0x00082599
   82c98:	20002154 	.word	0x20002154
   82c9c:	000852e9 	.word	0x000852e9
   82ca0:	00082705 	.word	0x00082705
   82ca4:	0008597d 	.word	0x0008597d
   82ca8:	000859a1 	.word	0x000859a1
   82cac:	000859c5 	.word	0x000859c5
   82cb0:	000859dd 	.word	0x000859dd
   82cb4:	00085321 	.word	0x00085321
   82cb8:	200001dc 	.word	0x200001dc
   82cbc:	20002159 	.word	0x20002159
   82cc0:	2000215c 	.word	0x2000215c
   82cc4:	00082691 	.word	0x00082691
   82cc8:	00082625 	.word	0x00082625
   82ccc:	000854ad 	.word	0x000854ad
   82cd0:	00085919 	.word	0x00085919
   82cd4:	000853e5 	.word	0x000853e5
	if (!udc_update_iface_desc(iface_num, 0)) {
   82cd8:	2100      	movs	r1, #0
   82cda:	4620      	mov	r0, r4
   82cdc:	4b23      	ldr	r3, [pc, #140]	; (82d6c <udc_process_setup+0x5cc>)
   82cde:	4798      	blx	r3
   82ce0:	2800      	cmp	r0, #0
   82ce2:	f43f ad77 	beq.w	827d4 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82ce6:	686b      	ldr	r3, [r5, #4]
   82ce8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82cec:	68eb      	ldr	r3, [r5, #12]
   82cee:	4798      	blx	r3
   82cf0:	4601      	mov	r1, r0
   82cf2:	4620      	mov	r0, r4
   82cf4:	4b1d      	ldr	r3, [pc, #116]	; (82d6c <udc_process_setup+0x5cc>)
   82cf6:	4798      	blx	r3
   82cf8:	2800      	cmp	r0, #0
   82cfa:	f43f ad6b 	beq.w	827d4 <udc_process_setup+0x34>
	return udi_api->setup();
   82cfe:	68ab      	ldr	r3, [r5, #8]
   82d00:	4798      	blx	r3
		if (udc_req_iface()) {
   82d02:	4603      	mov	r3, r0
   82d04:	2800      	cmp	r0, #0
   82d06:	f47f ad6d 	bne.w	827e4 <udc_process_setup+0x44>
   82d0a:	e563      	b.n	827d4 <udc_process_setup+0x34>
	if (0 == udc_num_configuration) {
   82d0c:	4b18      	ldr	r3, [pc, #96]	; (82d70 <udc_process_setup+0x5d0>)
   82d0e:	781b      	ldrb	r3, [r3, #0]
   82d10:	b30b      	cbz	r3, 82d56 <udc_process_setup+0x5b6>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82d12:	4b18      	ldr	r3, [pc, #96]	; (82d74 <udc_process_setup+0x5d4>)
   82d14:	681a      	ldr	r2, [r3, #0]
   82d16:	6813      	ldr	r3, [r2, #0]
   82d18:	791b      	ldrb	r3, [r3, #4]
   82d1a:	b1f3      	cbz	r3, 82d5a <udc_process_setup+0x5ba>
   82d1c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82d1e:	4e13      	ldr	r6, [pc, #76]	; (82d6c <udc_process_setup+0x5cc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82d20:	4f14      	ldr	r7, [pc, #80]	; (82d74 <udc_process_setup+0x5d4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   82d22:	6853      	ldr	r3, [r2, #4]
   82d24:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82d28:	68eb      	ldr	r3, [r5, #12]
   82d2a:	4798      	blx	r3
   82d2c:	4601      	mov	r1, r0
   82d2e:	4620      	mov	r0, r4
   82d30:	47b0      	blx	r6
   82d32:	4603      	mov	r3, r0
   82d34:	2800      	cmp	r0, #0
   82d36:	f43f ad55 	beq.w	827e4 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   82d3a:	68ab      	ldr	r3, [r5, #8]
   82d3c:	4798      	blx	r3
   82d3e:	4603      	mov	r3, r0
   82d40:	2800      	cmp	r0, #0
   82d42:	f47f ad4f 	bne.w	827e4 <udc_process_setup+0x44>
			iface_num++) {
   82d46:	3401      	adds	r4, #1
   82d48:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82d4a:	683a      	ldr	r2, [r7, #0]
   82d4c:	6811      	ldr	r1, [r2, #0]
   82d4e:	7909      	ldrb	r1, [r1, #4]
   82d50:	42a1      	cmp	r1, r4
   82d52:	d8e6      	bhi.n	82d22 <udc_process_setup+0x582>
   82d54:	e546      	b.n	827e4 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   82d56:	2300      	movs	r3, #0
   82d58:	e544      	b.n	827e4 <udc_process_setup+0x44>
	return false;
   82d5a:	2300      	movs	r3, #0
   82d5c:	e542      	b.n	827e4 <udc_process_setup+0x44>
			return false; // Error from USB host
   82d5e:	2300      	movs	r3, #0
   82d60:	e540      	b.n	827e4 <udc_process_setup+0x44>
	return false;
   82d62:	2300      	movs	r3, #0
   82d64:	e53e      	b.n	827e4 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   82d66:	2412      	movs	r4, #18
		str = udc_string_product_name;
   82d68:	4a03      	ldr	r2, [pc, #12]	; (82d78 <udc_process_setup+0x5d8>)
   82d6a:	e602      	b.n	82972 <udc_process_setup+0x1d2>
   82d6c:	000825b1 	.word	0x000825b1
   82d70:	20002159 	.word	0x20002159
   82d74:	2000215c 	.word	0x2000215c
   82d78:	20000a24 	.word	0x20000a24

00082d7c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   82d7c:	b510      	push	{r4, lr}
   82d7e:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   82d80:	4b06      	ldr	r3, [pc, #24]	; (82d9c <FPGA_setlock+0x20>)
   82d82:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   82d84:	4b06      	ldr	r3, [pc, #24]	; (82da0 <FPGA_setlock+0x24>)
   82d86:	781b      	ldrb	r3, [r3, #0]
   82d88:	b933      	cbnz	r3, 82d98 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   82d8a:	4b05      	ldr	r3, [pc, #20]	; (82da0 <FPGA_setlock+0x24>)
   82d8c:	701c      	strb	r4, [r3, #0]
    ret = 1;
   82d8e:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   82d90:	4b04      	ldr	r3, [pc, #16]	; (82da4 <FPGA_setlock+0x28>)
   82d92:	4798      	blx	r3
  return ret;
}
   82d94:	4620      	mov	r0, r4
   82d96:	bd10      	pop	{r4, pc}
  int ret = 0;
   82d98:	2400      	movs	r4, #0
   82d9a:	e7f9      	b.n	82d90 <FPGA_setlock+0x14>
   82d9c:	00083e5d 	.word	0x00083e5d
   82da0:	20002164 	.word	0x20002164
   82da4:	00083e99 	.word	0x00083e99

00082da8 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   82da8:	2200      	movs	r2, #0
   82daa:	4b01      	ldr	r3, [pc, #4]	; (82db0 <FPGA_releaselock+0x8>)
   82dac:	701a      	strb	r2, [r3, #0]
   82dae:	4770      	bx	lr
   82db0:	20002164 	.word	0x20002164

00082db4 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82db4:	4b01      	ldr	r3, [pc, #4]	; (82dbc <FPGA_lockstatus+0x8>)
   82db6:	7818      	ldrb	r0, [r3, #0]
}
   82db8:	4770      	bx	lr
   82dba:	bf00      	nop
   82dbc:	20002164 	.word	0x20002164

00082dc0 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   82dc0:	b508      	push	{r3, lr}
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   82dc2:	4601      	mov	r1, r0
   82dc4:	4804      	ldr	r0, [pc, #16]	; (82dd8 <FPGA_setaddr+0x18>)
   82dc6:	4b05      	ldr	r3, [pc, #20]	; (82ddc <FPGA_setaddr+0x1c>)
   82dc8:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   82dca:	2035      	movs	r0, #53	; 0x35
   82dcc:	4b04      	ldr	r3, [pc, #16]	; (82de0 <FPGA_setaddr+0x20>)
   82dce:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   82dd0:	2035      	movs	r0, #53	; 0x35
   82dd2:	4b04      	ldr	r3, [pc, #16]	; (82de4 <FPGA_setaddr+0x24>)
   82dd4:	4798      	blx	r3
   82dd6:	bd08      	pop	{r3, pc}
   82dd8:	400e0e00 	.word	0x400e0e00
   82ddc:	00084113 	.word	0x00084113
   82de0:	00084155 	.word	0x00084155
   82de4:	0008413b 	.word	0x0008413b

00082de8 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   82de8:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   82dea:	4b7b      	ldr	r3, [pc, #492]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82dec:	789c      	ldrb	r4, [r3, #2]
   82dee:	4b7b      	ldr	r3, [pc, #492]	; (82fdc <V2Protocol_ProcessCommand+0x1f4>)
   82df0:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   82df2:	4b7b      	ldr	r3, [pc, #492]	; (82fe0 <V2Protocol_ProcessCommand+0x1f8>)
   82df4:	4798      	blx	r3

	switch (V2Command)
   82df6:	1e63      	subs	r3, r4, #1
   82df8:	2b21      	cmp	r3, #33	; 0x21
   82dfa:	f200 80e3 	bhi.w	82fc4 <V2Protocol_ProcessCommand+0x1dc>
   82dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   82e02:	0022      	.short	0x0022
   82e04:	00370037 	.word	0x00370037
   82e08:	00e100e1 	.word	0x00e100e1
   82e0c:	00e1006c 	.word	0x00e1006c
   82e10:	00e100e1 	.word	0x00e100e1
   82e14:	00e10088 	.word	0x00e10088
   82e18:	00e100e1 	.word	0x00e100e1
   82e1c:	00e100e1 	.word	0x00e100e1
   82e20:	00940090 	.word	0x00940090
   82e24:	009800a4 	.word	0x009800a4
   82e28:	0098009e 	.word	0x0098009e
   82e2c:	00ad009e 	.word	0x00ad009e
   82e30:	00ad00a8 	.word	0x00ad00a8
   82e34:	00a800a8 	.word	0x00a800a8
   82e38:	00b200a8 	.word	0x00b200a8
   82e3c:	00e100e1 	.word	0x00e100e1
   82e40:	00cf00b6 	.word	0x00cf00b6
   82e44:	00c0      	.short	0x00c0
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   82e46:	4c65      	ldr	r4, [pc, #404]	; (82fdc <V2Protocol_ProcessCommand+0x1f4>)
   82e48:	2300      	movs	r3, #0
   82e4a:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82e4c:	230d      	movs	r3, #13
   82e4e:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82e50:	4b64      	ldr	r3, [pc, #400]	; (82fe4 <V2Protocol_ProcessCommand+0x1fc>)
   82e52:	cb07      	ldmia	r3!, {r0, r1, r2}
   82e54:	f8c4 0003 	str.w	r0, [r4, #3]
   82e58:	f8c4 1007 	str.w	r1, [r4, #7]
   82e5c:	f8c4 200b 	str.w	r2, [r4, #11]
   82e60:	781b      	ldrb	r3, [r3, #0]
   82e62:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   82e64:	4b5c      	ldr	r3, [pc, #368]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82e66:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   82e68:	2210      	movs	r2, #16
   82e6a:	819a      	strh	r2, [r3, #12]
	return true;
   82e6c:	2001      	movs	r0, #1
   82e6e:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82e70:	4b59      	ldr	r3, [pc, #356]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82e72:	689b      	ldr	r3, [r3, #8]
   82e74:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   82e76:	2c02      	cmp	r4, #2
   82e78:	d00c      	beq.n	82e94 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   82e7a:	2202      	movs	r2, #2
   82e7c:	4b5a      	ldr	r3, [pc, #360]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82e7e:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82e80:	4628      	mov	r0, r5
   82e82:	4b5a      	ldr	r3, [pc, #360]	; (82fec <V2Protocol_ProcessCommand+0x204>)
   82e84:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82e86:	2c03      	cmp	r4, #3
   82e88:	d017      	beq.n	82eba <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   82e8a:	22c0      	movs	r2, #192	; 0xc0
   82e8c:	4b58      	ldr	r3, [pc, #352]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82e8e:	705a      	strb	r2, [r3, #1]
	return true;
   82e90:	2001      	movs	r0, #1
   82e92:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   82e94:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   82e96:	2202      	movs	r2, #2
   82e98:	4b53      	ldr	r3, [pc, #332]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82e9a:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   82e9c:	4628      	mov	r0, r5
   82e9e:	4b53      	ldr	r3, [pc, #332]	; (82fec <V2Protocol_ProcessCommand+0x204>)
   82ea0:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   82ea2:	f010 0f02 	tst.w	r0, #2
   82ea6:	d0f0      	beq.n	82e8a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82ea8:	2200      	movs	r2, #0
   82eaa:	4b51      	ldr	r3, [pc, #324]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82eac:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   82eae:	4621      	mov	r1, r4
   82eb0:	4628      	mov	r0, r5
   82eb2:	4b50      	ldr	r3, [pc, #320]	; (82ff4 <V2Protocol_ProcessCommand+0x20c>)
   82eb4:	4798      	blx	r3
	return true;
   82eb6:	2001      	movs	r0, #1
   82eb8:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   82eba:	f010 0f01 	tst.w	r0, #1
   82ebe:	d0e4      	beq.n	82e8a <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   82ec0:	4c4b      	ldr	r4, [pc, #300]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82ec2:	2300      	movs	r3, #0
   82ec4:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   82ec6:	4628      	mov	r0, r5
   82ec8:	4b4b      	ldr	r3, [pc, #300]	; (82ff8 <V2Protocol_ProcessCommand+0x210>)
   82eca:	4798      	blx	r3
   82ecc:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   82ece:	4a46      	ldr	r2, [pc, #280]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82ed0:	8813      	ldrh	r3, [r2, #0]
   82ed2:	3301      	adds	r3, #1
   82ed4:	8013      	strh	r3, [r2, #0]
	return true;
   82ed6:	2001      	movs	r0, #1
   82ed8:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   82eda:	4b3f      	ldr	r3, [pc, #252]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82edc:	689a      	ldr	r2, [r3, #8]
   82ede:	78d1      	ldrb	r1, [r2, #3]
   82ee0:	7893      	ldrb	r3, [r2, #2]
   82ee2:	041b      	lsls	r3, r3, #16
   82ee4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82ee8:	7811      	ldrb	r1, [r2, #0]
   82eea:	430b      	orrs	r3, r1
   82eec:	7852      	ldrb	r2, [r2, #1]
   82eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   82ef2:	4a42      	ldr	r2, [pc, #264]	; (82ffc <V2Protocol_ProcessCommand+0x214>)
   82ef4:	6013      	str	r3, [r2, #0]

	if (CurrentAddress & (1UL << 31))
   82ef6:	2b00      	cmp	r3, #0
   82ef8:	db07      	blt.n	82f0a <V2Protocol_ProcessCommand+0x122>
	  MustLoadExtendedAddress = true;
	  
	// printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82efa:	2200      	movs	r2, #0
   82efc:	4b3c      	ldr	r3, [pc, #240]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82efe:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82f00:	2202      	movs	r2, #2
   82f02:	4b39      	ldr	r3, [pc, #228]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82f04:	801a      	strh	r2, [r3, #0]
	return true;
   82f06:	2001      	movs	r0, #1
   82f08:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   82f0a:	2201      	movs	r2, #1
   82f0c:	4b3c      	ldr	r3, [pc, #240]	; (83000 <V2Protocol_ProcessCommand+0x218>)
   82f0e:	701a      	strb	r2, [r3, #0]
   82f10:	e7f3      	b.n	82efa <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   82f12:	2200      	movs	r2, #0
   82f14:	4b36      	ldr	r3, [pc, #216]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82f16:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82f18:	2202      	movs	r2, #2
   82f1a:	4b33      	ldr	r3, [pc, #204]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82f1c:	801a      	strh	r2, [r3, #0]
	return true;
   82f1e:	2001      	movs	r0, #1
   82f20:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   82f22:	4b38      	ldr	r3, [pc, #224]	; (83004 <V2Protocol_ProcessCommand+0x21c>)
   82f24:	4798      	blx	r3
	return true;
   82f26:	2001      	movs	r0, #1
			break;
   82f28:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   82f2a:	4b37      	ldr	r3, [pc, #220]	; (83008 <V2Protocol_ProcessCommand+0x220>)
   82f2c:	4798      	blx	r3
	return true;
   82f2e:	2001      	movs	r0, #1
			break;
   82f30:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   82f32:	4936      	ldr	r1, [pc, #216]	; (8300c <V2Protocol_ProcessCommand+0x224>)
   82f34:	4620      	mov	r0, r4
   82f36:	4b36      	ldr	r3, [pc, #216]	; (83010 <V2Protocol_ProcessCommand+0x228>)
   82f38:	4798      	blx	r3
	return true;
   82f3a:	2001      	movs	r0, #1
			break;
   82f3c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82f3e:	4933      	ldr	r1, [pc, #204]	; (8300c <V2Protocol_ProcessCommand+0x224>)
   82f40:	4620      	mov	r0, r4
   82f42:	4b34      	ldr	r3, [pc, #208]	; (83014 <V2Protocol_ProcessCommand+0x22c>)
   82f44:	4798      	blx	r3
	return true;
   82f46:	2001      	movs	r0, #1
			break;
   82f48:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   82f4a:	4b33      	ldr	r3, [pc, #204]	; (83018 <V2Protocol_ProcessCommand+0x230>)
   82f4c:	4798      	blx	r3
	return true;
   82f4e:	2001      	movs	r0, #1
			break;
   82f50:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   82f52:	4620      	mov	r0, r4
   82f54:	4b31      	ldr	r3, [pc, #196]	; (8301c <V2Protocol_ProcessCommand+0x234>)
   82f56:	4798      	blx	r3
	return true;
   82f58:	2001      	movs	r0, #1
			break;
   82f5a:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   82f5c:	4620      	mov	r0, r4
   82f5e:	4b30      	ldr	r3, [pc, #192]	; (83020 <V2Protocol_ProcessCommand+0x238>)
   82f60:	4798      	blx	r3
	return true;
   82f62:	2001      	movs	r0, #1
			break;
   82f64:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   82f66:	4b2f      	ldr	r3, [pc, #188]	; (83024 <V2Protocol_ProcessCommand+0x23c>)
   82f68:	4798      	blx	r3
	return true;
   82f6a:	2001      	movs	r0, #1
			break;
   82f6c:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82f6e:	4a1a      	ldr	r2, [pc, #104]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82f70:	4b1f      	ldr	r3, [pc, #124]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82f72:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   82f74:	4b1c      	ldr	r3, [pc, #112]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82f76:	8819      	ldrh	r1, [r3, #0]
   82f78:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   82f7a:	2200      	movs	r2, #0
   82f7c:	801a      	strh	r2, [r3, #0]
			return true;
   82f7e:	2001      	movs	r0, #1
   82f80:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82f82:	4a15      	ldr	r2, [pc, #84]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82f84:	8853      	ldrh	r3, [r2, #2]
   82f86:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82f88:	88d2      	ldrh	r2, [r2, #6]
   82f8a:	1899      	adds	r1, r3, r2
   82f8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82f90:	dc20      	bgt.n	82fd4 <V2Protocol_ProcessCommand+0x1ec>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   82f92:	4811      	ldr	r0, [pc, #68]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82f94:	491d      	ldr	r1, [pc, #116]	; (8300c <V2Protocol_ProcessCommand+0x224>)
   82f96:	440b      	add	r3, r1
   82f98:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82f9a:	8182      	strh	r2, [r0, #12]
			return true;
   82f9c:	2001      	movs	r0, #1
   82f9e:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82fa0:	4a0d      	ldr	r2, [pc, #52]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82fa2:	8853      	ldrh	r3, [r2, #2]
   82fa4:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   82fa6:	88d2      	ldrh	r2, [r2, #6]
   82fa8:	1899      	adds	r1, r3, r2
   82faa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82fae:	dd01      	ble.n	82fb4 <V2Protocol_ProcessCommand+0x1cc>
				return false;
   82fb0:	2000      	movs	r0, #0
   82fb2:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82fb4:	4908      	ldr	r1, [pc, #32]	; (82fd8 <V2Protocol_ProcessCommand+0x1f0>)
   82fb6:	6889      	ldr	r1, [r1, #8]
   82fb8:	4814      	ldr	r0, [pc, #80]	; (8300c <V2Protocol_ProcessCommand+0x224>)
   82fba:	4418      	add	r0, r3
   82fbc:	4b1a      	ldr	r3, [pc, #104]	; (83028 <V2Protocol_ProcessCommand+0x240>)
   82fbe:	4798      	blx	r3
			return true;
   82fc0:	2001      	movs	r0, #1
   82fc2:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   82fc4:	22c9      	movs	r2, #201	; 0xc9
   82fc6:	4b0a      	ldr	r3, [pc, #40]	; (82ff0 <V2Protocol_ProcessCommand+0x208>)
   82fc8:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82fca:	2202      	movs	r2, #2
   82fcc:	4b06      	ldr	r3, [pc, #24]	; (82fe8 <V2Protocol_ProcessCommand+0x200>)
   82fce:	801a      	strh	r2, [r3, #0]
	return true;
   82fd0:	2001      	movs	r0, #1
   82fd2:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   82fd4:	2000      	movs	r0, #0
   82fd6:	bd38      	pop	{r3, r4, r5, pc}
   82fd8:	200029a8 	.word	0x200029a8
   82fdc:	20002268 	.word	0x20002268
   82fe0:	00083afd 	.word	0x00083afd
   82fe4:	0008c5e8 	.word	0x0008c5e8
   82fe8:	20002966 	.word	0x20002966
   82fec:	0008305d 	.word	0x0008305d
   82ff0:	20002968 	.word	0x20002968
   82ff4:	00083085 	.word	0x00083085
   82ff8:	00083071 	.word	0x00083071
   82ffc:	20002988 	.word	0x20002988
   83000:	20002964 	.word	0x20002964
   83004:	00080e89 	.word	0x00080e89
   83008:	00080fc5 	.word	0x00080fc5
   8300c:	20002168 	.word	0x20002168
   83010:	000809b1 	.word	0x000809b1
   83014:	00080c1d 	.word	0x00080c1d
   83018:	00081021 	.word	0x00081021
   8301c:	00080d51 	.word	0x00080d51
   83020:	00080ded 	.word	0x00080ded
   83024:	00080e51 	.word	0x00080e51
   83028:	0008652d 	.word	0x0008652d

0008302c <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   8302c:	4b09      	ldr	r3, [pc, #36]	; (83054 <V2Params_GetParamFromTable+0x28>)
   8302e:	781b      	ldrb	r3, [r3, #0]
   83030:	4283      	cmp	r3, r0
   83032:	d00a      	beq.n	8304a <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   83034:	4b08      	ldr	r3, [pc, #32]	; (83058 <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   83036:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   8303a:	781a      	ldrb	r2, [r3, #0]
   8303c:	4282      	cmp	r2, r0
   8303e:	d006      	beq.n	8304e <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   83040:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   83042:	428b      	cmp	r3, r1
   83044:	d1f9      	bne.n	8303a <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   83046:	2000      	movs	r0, #0
   83048:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   8304a:	4802      	ldr	r0, [pc, #8]	; (83054 <V2Params_GetParamFromTable+0x28>)
   8304c:	4770      	bx	lr
   8304e:	4618      	mov	r0, r3
}
   83050:	4770      	bx	lr
   83052:	bf00      	nop
   83054:	20000a3c 	.word	0x20000a3c
   83058:	20000a3f 	.word	0x20000a3f

0008305c <V2Params_GetParameterPrivileges>:
{
   8305c:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   8305e:	4b03      	ldr	r3, [pc, #12]	; (8306c <V2Params_GetParameterPrivileges+0x10>)
   83060:	4798      	blx	r3
	if (ParamInfo == NULL)
   83062:	b108      	cbz	r0, 83068 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   83064:	7840      	ldrb	r0, [r0, #1]
   83066:	bd08      	pop	{r3, pc}
	  return 0;
   83068:	2000      	movs	r0, #0
}
   8306a:	bd08      	pop	{r3, pc}
   8306c:	0008302d 	.word	0x0008302d

00083070 <V2Params_GetParameterValue>:
{
   83070:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   83072:	4b03      	ldr	r3, [pc, #12]	; (83080 <V2Params_GetParameterValue+0x10>)
   83074:	4798      	blx	r3
	if (ParamInfo == NULL)
   83076:	b108      	cbz	r0, 8307c <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   83078:	7880      	ldrb	r0, [r0, #2]
   8307a:	bd08      	pop	{r3, pc}
	  return 0;
   8307c:	2000      	movs	r0, #0
}
   8307e:	bd08      	pop	{r3, pc}
   83080:	0008302d 	.word	0x0008302d

00083084 <V2Params_SetParameterValue>:
{
   83084:	b510      	push	{r4, lr}
   83086:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   83088:	4b02      	ldr	r3, [pc, #8]	; (83094 <V2Params_SetParameterValue+0x10>)
   8308a:	4798      	blx	r3
	if (ParamInfo == NULL)
   8308c:	b100      	cbz	r0, 83090 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   8308e:	7084      	strb	r4, [r0, #2]
   83090:	bd10      	pop	{r4, pc}
   83092:	bf00      	nop
   83094:	0008302d 	.word	0x0008302d

00083098 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   83098:	b538      	push	{r3, r4, r5, lr}
   8309a:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   8309c:	b2c0      	uxtb	r0, r0
   8309e:	4c05      	ldr	r4, [pc, #20]	; (830b4 <XMEGANVM_SendAddress+0x1c>)
   830a0:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   830a2:	f3c5 2007 	ubfx	r0, r5, #8, #8
   830a6:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   830a8:	f3c5 4007 	ubfx	r0, r5, #16, #8
   830ac:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   830ae:	0e28      	lsrs	r0, r5, #24
   830b0:	47a0      	blx	r4
   830b2:	bd38      	pop	{r3, r4, r5, pc}
   830b4:	0008392d 	.word	0x0008392d

000830b8 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   830b8:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   830ba:	4b03      	ldr	r3, [pc, #12]	; (830c8 <XMEGANVM_SendNVMRegAddress+0x10>)
   830bc:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   830be:	4318      	orrs	r0, r3
   830c0:	4b02      	ldr	r3, [pc, #8]	; (830cc <XMEGANVM_SendNVMRegAddress+0x14>)
   830c2:	4798      	blx	r3
   830c4:	bd08      	pop	{r3, pc}
   830c6:	bf00      	nop
   830c8:	20000a5c 	.word	0x20000a5c
   830cc:	00083099 	.word	0x00083099

000830d0 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   830d0:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   830d2:	4e07      	ldr	r6, [pc, #28]	; (830f0 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   830d4:	4d07      	ldr	r5, [pc, #28]	; (830f4 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   830d6:	4c08      	ldr	r4, [pc, #32]	; (830f8 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   830d8:	2080      	movs	r0, #128	; 0x80
   830da:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   830dc:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   830de:	6823      	ldr	r3, [r4, #0]
   830e0:	b123      	cbz	r3, 830ec <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   830e2:	f010 0f02 	tst.w	r0, #2
   830e6:	d0f7      	beq.n	830d8 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   830e8:	2001      	movs	r0, #1
   830ea:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   830ec:	2000      	movs	r0, #0
		}
	}
}
   830ee:	bd70      	pop	{r4, r5, r6, pc}
   830f0:	0008392d 	.word	0x0008392d
   830f4:	00083959 	.word	0x00083959
   830f8:	20002990 	.word	0x20002990

000830fc <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   830fc:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   830fe:	206b      	movs	r0, #107	; 0x6b
   83100:	4b09      	ldr	r3, [pc, #36]	; (83128 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   83102:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83104:	200f      	movs	r0, #15
   83106:	4b09      	ldr	r3, [pc, #36]	; (8312c <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83108:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8310a:	4e07      	ldr	r6, [pc, #28]	; (83128 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   8310c:	4d08      	ldr	r5, [pc, #32]	; (83130 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8310e:	4c09      	ldr	r4, [pc, #36]	; (83134 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83110:	2020      	movs	r0, #32
   83112:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83114:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83116:	6823      	ldr	r3, [r4, #0]
   83118:	b123      	cbz	r3, 83124 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   8311a:	f010 0f80 	tst.w	r0, #128	; 0x80
   8311e:	d1f7      	bne.n	83110 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   83120:	2001      	movs	r0, #1
   83122:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83124:	2000      	movs	r0, #0
		}
	}
}
   83126:	bd70      	pop	{r4, r5, r6, pc}
   83128:	0008392d 	.word	0x0008392d
   8312c:	000830b9 	.word	0x000830b9
   83130:	00083959 	.word	0x00083959
   83134:	20002990 	.word	0x20002990

00083138 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8313c:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8313e:	4b1a      	ldr	r3, [pc, #104]	; (831a8 <XMEGANVM_EnablePDI+0x70>)
   83140:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   83142:	20c1      	movs	r0, #193	; 0xc1
   83144:	4c19      	ldr	r4, [pc, #100]	; (831ac <XMEGANVM_EnablePDI+0x74>)
   83146:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83148:	2059      	movs	r0, #89	; 0x59
   8314a:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   8314c:	20c2      	movs	r0, #194	; 0xc2
   8314e:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   83150:	2002      	movs	r0, #2
   83152:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83154:	20e0      	movs	r0, #224	; 0xe0
   83156:	47a0      	blx	r4
   83158:	f10d 0407 	add.w	r4, sp, #7
   8315c:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   83160:	2712      	movs	r7, #18
   83162:	2689      	movs	r6, #137	; 0x89
   83164:	4d11      	ldr	r5, [pc, #68]	; (831ac <XMEGANVM_EnablePDI+0x74>)
   83166:	f88d 7000 	strb.w	r7, [sp]
   8316a:	f88d 6001 	strb.w	r6, [sp, #1]
   8316e:	23ab      	movs	r3, #171	; 0xab
   83170:	f88d 3002 	strb.w	r3, [sp, #2]
   83174:	2345      	movs	r3, #69	; 0x45
   83176:	f88d 3003 	strb.w	r3, [sp, #3]
   8317a:	23cd      	movs	r3, #205	; 0xcd
   8317c:	f88d 3004 	strb.w	r3, [sp, #4]
   83180:	23d8      	movs	r3, #216	; 0xd8
   83182:	f88d 3005 	strb.w	r3, [sp, #5]
   83186:	2388      	movs	r3, #136	; 0x88
   83188:	f88d 3006 	strb.w	r3, [sp, #6]
   8318c:	23ff      	movs	r3, #255	; 0xff
   8318e:	f88d 3007 	strb.w	r3, [sp, #7]
   83192:	f814 0901 	ldrb.w	r0, [r4], #-1
   83196:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   83198:	4544      	cmp	r4, r8
   8319a:	d1e4      	bne.n	83166 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   8319c:	4b04      	ldr	r3, [pc, #16]	; (831b0 <XMEGANVM_EnablePDI+0x78>)
   8319e:	4798      	blx	r3
}
   831a0:	b002      	add	sp, #8
   831a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831a6:	bf00      	nop
   831a8:	000839f9 	.word	0x000839f9
   831ac:	0008392d 	.word	0x0008392d
   831b0:	000830d1 	.word	0x000830d1

000831b4 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   831b4:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   831b6:	4b09      	ldr	r3, [pc, #36]	; (831dc <XMEGANVM_DisablePDI+0x28>)
   831b8:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   831ba:	4c09      	ldr	r4, [pc, #36]	; (831e0 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   831bc:	4d09      	ldr	r5, [pc, #36]	; (831e4 <XMEGANVM_DisablePDI+0x30>)
   831be:	4e0a      	ldr	r6, [pc, #40]	; (831e8 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   831c0:	20c1      	movs	r0, #193	; 0xc1
   831c2:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   831c4:	2000      	movs	r0, #0
   831c6:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   831c8:	2081      	movs	r0, #129	; 0x81
   831ca:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   831cc:	47a8      	blx	r5
   831ce:	b110      	cbz	r0, 831d6 <XMEGANVM_DisablePDI+0x22>
   831d0:	6833      	ldr	r3, [r6, #0]
   831d2:	2b00      	cmp	r3, #0
   831d4:	d1f4      	bne.n	831c0 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   831d6:	4b05      	ldr	r3, [pc, #20]	; (831ec <XMEGANVM_DisablePDI+0x38>)
   831d8:	4798      	blx	r3
   831da:	bd70      	pop	{r4, r5, r6, pc}
   831dc:	000830d1 	.word	0x000830d1
   831e0:	0008392d 	.word	0x0008392d
   831e4:	00083959 	.word	0x00083959
   831e8:	20002990 	.word	0x20002990
   831ec:	000838d1 	.word	0x000838d1

000831f0 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   831f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   831f2:	4607      	mov	r7, r0
   831f4:	460d      	mov	r5, r1
   831f6:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   831f8:	4b1e      	ldr	r3, [pc, #120]	; (83274 <XMEGANVM_ReadMemory+0x84>)
   831fa:	4798      	blx	r3
   831fc:	4603      	mov	r3, r0
   831fe:	b908      	cbnz	r0, 83204 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   83200:	4618      	mov	r0, r3
   83202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83204:	204c      	movs	r0, #76	; 0x4c
   83206:	4e1c      	ldr	r6, [pc, #112]	; (83278 <XMEGANVM_ReadMemory+0x88>)
   83208:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8320a:	200a      	movs	r0, #10
   8320c:	4b1b      	ldr	r3, [pc, #108]	; (8327c <XMEGANVM_ReadMemory+0x8c>)
   8320e:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   83210:	2043      	movs	r0, #67	; 0x43
   83212:	47b0      	blx	r6
	if (ReadSize > 1)
   83214:	2c01      	cmp	r4, #1
   83216:	d923      	bls.n	83260 <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83218:	206b      	movs	r0, #107	; 0x6b
   8321a:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   8321c:	4638      	mov	r0, r7
   8321e:	4b18      	ldr	r3, [pc, #96]	; (83280 <XMEGANVM_ReadMemory+0x90>)
   83220:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83222:	20a0      	movs	r0, #160	; 0xa0
   83224:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   83226:	1e60      	subs	r0, r4, #1
   83228:	b2c0      	uxtb	r0, r0
   8322a:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8322c:	2024      	movs	r0, #36	; 0x24
   8322e:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   83230:	1e63      	subs	r3, r4, #1
   83232:	b29b      	uxth	r3, r3
   83234:	b174      	cbz	r4, 83254 <XMEGANVM_ReadMemory+0x64>
   83236:	4a13      	ldr	r2, [pc, #76]	; (83284 <XMEGANVM_ReadMemory+0x94>)
   83238:	6812      	ldr	r2, [r2, #0]
   8323a:	b15a      	cbz	r2, 83254 <XMEGANVM_ReadMemory+0x64>
   8323c:	1e6c      	subs	r4, r5, #1
   8323e:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83240:	4e11      	ldr	r6, [pc, #68]	; (83288 <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   83242:	4f10      	ldr	r7, [pc, #64]	; (83284 <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83244:	47b0      	blx	r6
   83246:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   8324a:	42ac      	cmp	r4, r5
   8324c:	d002      	beq.n	83254 <XMEGANVM_ReadMemory+0x64>
   8324e:	683b      	ldr	r3, [r7, #0]
   83250:	2b00      	cmp	r3, #0
   83252:	d1f7      	bne.n	83244 <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   83254:	4b0b      	ldr	r3, [pc, #44]	; (83284 <XMEGANVM_ReadMemory+0x94>)
   83256:	681b      	ldr	r3, [r3, #0]
   83258:	3300      	adds	r3, #0
   8325a:	bf18      	it	ne
   8325c:	2301      	movne	r3, #1
   8325e:	e7cf      	b.n	83200 <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83260:	200c      	movs	r0, #12
   83262:	4b05      	ldr	r3, [pc, #20]	; (83278 <XMEGANVM_ReadMemory+0x88>)
   83264:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   83266:	4638      	mov	r0, r7
   83268:	4b05      	ldr	r3, [pc, #20]	; (83280 <XMEGANVM_ReadMemory+0x90>)
   8326a:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8326c:	4b06      	ldr	r3, [pc, #24]	; (83288 <XMEGANVM_ReadMemory+0x98>)
   8326e:	4798      	blx	r3
   83270:	7028      	strb	r0, [r5, #0]
   83272:	e7ef      	b.n	83254 <XMEGANVM_ReadMemory+0x64>
   83274:	000830fd 	.word	0x000830fd
   83278:	0008392d 	.word	0x0008392d
   8327c:	000830b9 	.word	0x000830b9
   83280:	00083099 	.word	0x00083099
   83284:	20002990 	.word	0x20002990
   83288:	00083959 	.word	0x00083959

0008328c <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   8328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83290:	4680      	mov	r8, r0
   83292:	460f      	mov	r7, r1
   83294:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83296:	4b0b      	ldr	r3, [pc, #44]	; (832c4 <XMEGANVM_WriteByteMemory+0x38>)
   83298:	4798      	blx	r3
   8329a:	4604      	mov	r4, r0
   8329c:	b910      	cbnz	r0, 832a4 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   8329e:	4620      	mov	r0, r4
   832a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   832a4:	204c      	movs	r0, #76	; 0x4c
   832a6:	4d08      	ldr	r5, [pc, #32]	; (832c8 <XMEGANVM_WriteByteMemory+0x3c>)
   832a8:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   832aa:	200a      	movs	r0, #10
   832ac:	4b07      	ldr	r3, [pc, #28]	; (832cc <XMEGANVM_WriteByteMemory+0x40>)
   832ae:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   832b0:	4640      	mov	r0, r8
   832b2:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   832b4:	204c      	movs	r0, #76	; 0x4c
   832b6:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   832b8:	4638      	mov	r0, r7
   832ba:	4b05      	ldr	r3, [pc, #20]	; (832d0 <XMEGANVM_WriteByteMemory+0x44>)
   832bc:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   832be:	4630      	mov	r0, r6
   832c0:	47a8      	blx	r5
	return true;
   832c2:	e7ec      	b.n	8329e <XMEGANVM_WriteByteMemory+0x12>
   832c4:	000830fd 	.word	0x000830fd
   832c8:	0008392d 	.word	0x0008392d
   832cc:	000830b9 	.word	0x000830b9
   832d0:	00083099 	.word	0x00083099

000832d4 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   832d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   832d8:	4681      	mov	r9, r0
   832da:	4617      	mov	r7, r2
   832dc:	461d      	mov	r5, r3
   832de:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   832e2:	f013 0f01 	tst.w	r3, #1
   832e6:	d107      	bne.n	832f8 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   832e8:	b9e6      	cbnz	r6, 83324 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   832ea:	f015 0f02 	tst.w	r5, #2
   832ee:	d13f      	bne.n	83370 <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   832f0:	2401      	movs	r4, #1
}
   832f2:	4620      	mov	r0, r4
   832f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   832f8:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   832fa:	4b28      	ldr	r3, [pc, #160]	; (8339c <XMEGANVM_WritePageMemory+0xc8>)
   832fc:	4798      	blx	r3
   832fe:	4604      	mov	r4, r0
   83300:	2800      	cmp	r0, #0
   83302:	d0f6      	beq.n	832f2 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83304:	204c      	movs	r0, #76	; 0x4c
   83306:	4c26      	ldr	r4, [pc, #152]	; (833a0 <XMEGANVM_WritePageMemory+0xcc>)
   83308:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8330a:	200a      	movs	r0, #10
   8330c:	f8df a094 	ldr.w	sl, [pc, #148]	; 833a4 <XMEGANVM_WritePageMemory+0xd0>
   83310:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   83312:	4640      	mov	r0, r8
   83314:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83316:	204c      	movs	r0, #76	; 0x4c
   83318:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8331a:	200b      	movs	r0, #11
   8331c:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8331e:	2001      	movs	r0, #1
   83320:	47a0      	blx	r4
   83322:	e7e1      	b.n	832e8 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83324:	4b1d      	ldr	r3, [pc, #116]	; (8339c <XMEGANVM_WritePageMemory+0xc8>)
   83326:	4798      	blx	r3
   83328:	4604      	mov	r4, r0
   8332a:	2800      	cmp	r0, #0
   8332c:	d0e1      	beq.n	832f2 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8332e:	204c      	movs	r0, #76	; 0x4c
   83330:	4c1b      	ldr	r4, [pc, #108]	; (833a0 <XMEGANVM_WritePageMemory+0xcc>)
   83332:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83334:	200a      	movs	r0, #10
   83336:	4b1b      	ldr	r3, [pc, #108]	; (833a4 <XMEGANVM_WritePageMemory+0xd0>)
   83338:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   8333a:	4648      	mov	r0, r9
   8333c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8333e:	206b      	movs	r0, #107	; 0x6b
   83340:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83342:	9808      	ldr	r0, [sp, #32]
   83344:	4b18      	ldr	r3, [pc, #96]	; (833a8 <XMEGANVM_WritePageMemory+0xd4>)
   83346:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83348:	20a0      	movs	r0, #160	; 0xa0
   8334a:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   8334c:	1e70      	subs	r0, r6, #1
   8334e:	b2c0      	uxtb	r0, r0
   83350:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83352:	2064      	movs	r0, #100	; 0x64
   83354:	47a0      	blx	r4
   83356:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83358:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   8335a:	3e01      	subs	r6, #1
   8335c:	b2b6      	uxth	r6, r6
   8335e:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83360:	f8df 803c 	ldr.w	r8, [pc, #60]	; 833a0 <XMEGANVM_WritePageMemory+0xcc>
   83364:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   83368:	47c0      	blx	r8
		while (WriteSize--)
   8336a:	42b4      	cmp	r4, r6
   8336c:	d1fa      	bne.n	83364 <XMEGANVM_WritePageMemory+0x90>
   8336e:	e7bc      	b.n	832ea <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83370:	4b0a      	ldr	r3, [pc, #40]	; (8339c <XMEGANVM_WritePageMemory+0xc8>)
   83372:	4798      	blx	r3
   83374:	4604      	mov	r4, r0
   83376:	2800      	cmp	r0, #0
   83378:	d0bb      	beq.n	832f2 <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8337a:	204c      	movs	r0, #76	; 0x4c
   8337c:	4d08      	ldr	r5, [pc, #32]	; (833a0 <XMEGANVM_WritePageMemory+0xcc>)
   8337e:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83380:	200a      	movs	r0, #10
   83382:	4b08      	ldr	r3, [pc, #32]	; (833a4 <XMEGANVM_WritePageMemory+0xd0>)
   83384:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83386:	4638      	mov	r0, r7
   83388:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8338a:	204c      	movs	r0, #76	; 0x4c
   8338c:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   8338e:	9808      	ldr	r0, [sp, #32]
   83390:	4b05      	ldr	r3, [pc, #20]	; (833a8 <XMEGANVM_WritePageMemory+0xd4>)
   83392:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83394:	2000      	movs	r0, #0
   83396:	47a8      	blx	r5
   83398:	e7ab      	b.n	832f2 <XMEGANVM_WritePageMemory+0x1e>
   8339a:	bf00      	nop
   8339c:	000830fd 	.word	0x000830fd
   833a0:	0008392d 	.word	0x0008392d
   833a4:	000830b9 	.word	0x000830b9
   833a8:	00083099 	.word	0x00083099

000833ac <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   833ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   833ae:	4604      	mov	r4, r0
   833b0:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   833b2:	4b36      	ldr	r3, [pc, #216]	; (8348c <XMEGANVM_EraseMemory+0xe0>)
   833b4:	4798      	blx	r3
   833b6:	4603      	mov	r3, r0
   833b8:	b1a8      	cbz	r0, 833e6 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   833ba:	2c40      	cmp	r4, #64	; 0x40
   833bc:	d015      	beq.n	833ea <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   833be:	2c30      	cmp	r4, #48	; 0x30
   833c0:	d022      	beq.n	83408 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   833c2:	204c      	movs	r0, #76	; 0x4c
   833c4:	4d32      	ldr	r5, [pc, #200]	; (83490 <XMEGANVM_EraseMemory+0xe4>)
   833c6:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   833c8:	200a      	movs	r0, #10
   833ca:	4b32      	ldr	r3, [pc, #200]	; (83494 <XMEGANVM_EraseMemory+0xe8>)
   833cc:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   833ce:	4620      	mov	r0, r4
   833d0:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   833d2:	204c      	movs	r0, #76	; 0x4c
   833d4:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   833d6:	4630      	mov	r0, r6
   833d8:	4b2f      	ldr	r3, [pc, #188]	; (83498 <XMEGANVM_EraseMemory+0xec>)
   833da:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   833dc:	2000      	movs	r0, #0
   833de:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   833e0:	4b2e      	ldr	r3, [pc, #184]	; (8349c <XMEGANVM_EraseMemory+0xf0>)
   833e2:	4798      	blx	r3
   833e4:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   833e6:	4618      	mov	r0, r3
   833e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   833ea:	204c      	movs	r0, #76	; 0x4c
   833ec:	4c28      	ldr	r4, [pc, #160]	; (83490 <XMEGANVM_EraseMemory+0xe4>)
   833ee:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   833f0:	200a      	movs	r0, #10
   833f2:	4d28      	ldr	r5, [pc, #160]	; (83494 <XMEGANVM_EraseMemory+0xe8>)
   833f4:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   833f6:	2040      	movs	r0, #64	; 0x40
   833f8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   833fa:	204c      	movs	r0, #76	; 0x4c
   833fc:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   833fe:	200b      	movs	r0, #11
   83400:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83402:	2001      	movs	r0, #1
   83404:	47a0      	blx	r4
   83406:	e7eb      	b.n	833e0 <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83408:	204c      	movs	r0, #76	; 0x4c
   8340a:	4c21      	ldr	r4, [pc, #132]	; (83490 <XMEGANVM_EraseMemory+0xe4>)
   8340c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8340e:	200a      	movs	r0, #10
   83410:	4d20      	ldr	r5, [pc, #128]	; (83494 <XMEGANVM_EraseMemory+0xe8>)
   83412:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83414:	2036      	movs	r0, #54	; 0x36
   83416:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83418:	204c      	movs	r0, #76	; 0x4c
   8341a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8341c:	200b      	movs	r0, #11
   8341e:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83420:	2001      	movs	r0, #1
   83422:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83424:	4b19      	ldr	r3, [pc, #100]	; (8348c <XMEGANVM_EraseMemory+0xe0>)
   83426:	4798      	blx	r3
   83428:	4603      	mov	r3, r0
   8342a:	2800      	cmp	r0, #0
   8342c:	d0db      	beq.n	833e6 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8342e:	204c      	movs	r0, #76	; 0x4c
   83430:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83432:	200a      	movs	r0, #10
   83434:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83436:	2033      	movs	r0, #51	; 0x33
   83438:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8343a:	206b      	movs	r0, #107	; 0x6b
   8343c:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   8343e:	4630      	mov	r0, r6
   83440:	4b15      	ldr	r3, [pc, #84]	; (83498 <XMEGANVM_EraseMemory+0xec>)
   83442:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83444:	20a0      	movs	r0, #160	; 0xa0
   83446:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83448:	4d15      	ldr	r5, [pc, #84]	; (834a0 <XMEGANVM_EraseMemory+0xf4>)
   8344a:	7828      	ldrb	r0, [r5, #0]
   8344c:	3801      	subs	r0, #1
   8344e:	b2c0      	uxtb	r0, r0
   83450:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83452:	2064      	movs	r0, #100	; 0x64
   83454:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83456:	882b      	ldrh	r3, [r5, #0]
   83458:	b14b      	cbz	r3, 8346e <XMEGANVM_EraseMemory+0xc2>
   8345a:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   8345c:	4627      	mov	r7, r4
   8345e:	4e0c      	ldr	r6, [pc, #48]	; (83490 <XMEGANVM_EraseMemory+0xe4>)
   83460:	4638      	mov	r0, r7
   83462:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83464:	3401      	adds	r4, #1
   83466:	b2e4      	uxtb	r4, r4
   83468:	882b      	ldrh	r3, [r5, #0]
   8346a:	42a3      	cmp	r3, r4
   8346c:	d8f8      	bhi.n	83460 <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8346e:	204c      	movs	r0, #76	; 0x4c
   83470:	4c07      	ldr	r4, [pc, #28]	; (83490 <XMEGANVM_EraseMemory+0xe4>)
   83472:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83474:	200a      	movs	r0, #10
   83476:	4d07      	ldr	r5, [pc, #28]	; (83494 <XMEGANVM_EraseMemory+0xe8>)
   83478:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   8347a:	2030      	movs	r0, #48	; 0x30
   8347c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8347e:	204c      	movs	r0, #76	; 0x4c
   83480:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83482:	200b      	movs	r0, #11
   83484:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83486:	2001      	movs	r0, #1
   83488:	47a0      	blx	r4
   8348a:	e7a9      	b.n	833e0 <XMEGANVM_EraseMemory+0x34>
   8348c:	000830fd 	.word	0x000830fd
   83490:	0008392d 	.word	0x0008392d
   83494:	000830b9 	.word	0x000830b9
   83498:	00083099 	.word	0x00083099
   8349c:	000830d1 	.word	0x000830d1
   834a0:	20000a5a 	.word	0x20000a5a

000834a4 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   834a4:	b570      	push	{r4, r5, r6, lr}
   834a6:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   834a8:	4b8e      	ldr	r3, [pc, #568]	; (836e4 <XPROGProtocol_Command+0x240>)
   834aa:	8858      	ldrh	r0, [r3, #2]
   834ac:	b2c3      	uxtb	r3, r0
   834ae:	4a8e      	ldr	r2, [pc, #568]	; (836e8 <XPROGProtocol_Command+0x244>)
   834b0:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   834b2:	3b01      	subs	r3, #1
   834b4:	2b21      	cmp	r3, #33	; 0x21
   834b6:	d82b      	bhi.n	83510 <XPROGProtocol_Command+0x6c>
   834b8:	e8df f013 	tbh	[pc, r3, lsl #1]
   834bc:	002f0022 	.word	0x002f0022
   834c0:	00730037 	.word	0x00730037
   834c4:	00c900a5 	.word	0x00c900a5
   834c8:	002a00cc 	.word	0x002a00cc
   834cc:	002a002a 	.word	0x002a002a
   834d0:	002a002a 	.word	0x002a002a
   834d4:	002a002a 	.word	0x002a002a
   834d8:	002a002a 	.word	0x002a002a
   834dc:	002a002a 	.word	0x002a002a
   834e0:	002a002a 	.word	0x002a002a
   834e4:	002a002a 	.word	0x002a002a
   834e8:	002a002a 	.word	0x002a002a
   834ec:	002a002a 	.word	0x002a002a
   834f0:	002a002a 	.word	0x002a002a
   834f4:	002a002a 	.word	0x002a002a
   834f8:	0160002a 	.word	0x0160002a
   834fc:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83500:	4b7a      	ldr	r3, [pc, #488]	; (836ec <XPROGProtocol_Command+0x248>)
   83502:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83504:	4b7a      	ldr	r3, [pc, #488]	; (836f0 <XPROGProtocol_Command+0x24c>)
   83506:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83508:	f080 0001 	eor.w	r0, r0, #1
   8350c:	4b79      	ldr	r3, [pc, #484]	; (836f4 <XPROGProtocol_Command+0x250>)
   8350e:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83510:	4b79      	ldr	r3, [pc, #484]	; (836f8 <XPROGProtocol_Command+0x254>)
   83512:	4798      	blx	r3
	return false;
   83514:	2000      	movs	r0, #0
}
   83516:	b004      	add	sp, #16
   83518:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   8351a:	4b74      	ldr	r3, [pc, #464]	; (836ec <XPROGProtocol_Command+0x248>)
   8351c:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   8351e:	4b77      	ldr	r3, [pc, #476]	; (836fc <XPROGProtocol_Command+0x258>)
   83520:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83522:	2200      	movs	r2, #0
   83524:	4b73      	ldr	r3, [pc, #460]	; (836f4 <XPROGProtocol_Command+0x250>)
   83526:	701a      	strb	r2, [r3, #0]
   83528:	e7f2      	b.n	83510 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8352a:	4b70      	ldr	r3, [pc, #448]	; (836ec <XPROGProtocol_Command+0x248>)
   8352c:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   8352e:	2200      	movs	r2, #0
   83530:	4b70      	ldr	r3, [pc, #448]	; (836f4 <XPROGProtocol_Command+0x250>)
   83532:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83534:	4b6b      	ldr	r3, [pc, #428]	; (836e4 <XPROGProtocol_Command+0x240>)
   83536:	899b      	ldrh	r3, [r3, #12]
   83538:	2b04      	cmp	r3, #4
   8353a:	d915      	bls.n	83568 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   8353c:	4b69      	ldr	r3, [pc, #420]	; (836e4 <XPROGProtocol_Command+0x240>)
   8353e:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83540:	791a      	ldrb	r2, [r3, #4]
   83542:	78d9      	ldrb	r1, [r3, #3]
   83544:	0409      	lsls	r1, r1, #16
   83546:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   8354a:	785a      	ldrb	r2, [r3, #1]
   8354c:	4311      	orrs	r1, r2
   8354e:	789a      	ldrb	r2, [r3, #2]
   83550:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83554:	781b      	ldrb	r3, [r3, #0]
   83556:	3b01      	subs	r3, #1
   83558:	2b07      	cmp	r3, #7
   8355a:	d817      	bhi.n	8358c <XPROGProtocol_Command+0xe8>
   8355c:	e8df f003 	tbb	[pc, r3]
   83560:	0c0a0818 	.word	0x0c0a0818
   83564:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   83568:	2201      	movs	r2, #1
   8356a:	4b62      	ldr	r3, [pc, #392]	; (836f4 <XPROGProtocol_Command+0x250>)
   8356c:	701a      	strb	r2, [r3, #0]
   8356e:	e7cf      	b.n	83510 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   83570:	2020      	movs	r0, #32
   83572:	e00e      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83574:	2068      	movs	r0, #104	; 0x68
   83576:	e00c      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83578:	2030      	movs	r0, #48	; 0x30
   8357a:	e00a      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   8357c:	2022      	movs	r0, #34	; 0x22
   8357e:	e008      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83580:	202a      	movs	r0, #42	; 0x2a
   83582:	e006      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83584:	2032      	movs	r0, #50	; 0x32
   83586:	e004      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83588:	2018      	movs	r0, #24
   8358a:	e002      	b.n	83592 <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   8358c:	2000      	movs	r0, #0
   8358e:	e000      	b.n	83592 <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83590:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83592:	4b5b      	ldr	r3, [pc, #364]	; (83700 <XPROGProtocol_Command+0x25c>)
   83594:	4798      	blx	r3
   83596:	2800      	cmp	r0, #0
   83598:	d1ba      	bne.n	83510 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   8359a:	2203      	movs	r2, #3
   8359c:	4b55      	ldr	r3, [pc, #340]	; (836f4 <XPROGProtocol_Command+0x250>)
   8359e:	701a      	strb	r2, [r3, #0]
   835a0:	e7b6      	b.n	83510 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   835a2:	4b52      	ldr	r3, [pc, #328]	; (836ec <XPROGProtocol_Command+0x248>)
   835a4:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   835a6:	2200      	movs	r2, #0
   835a8:	4b52      	ldr	r3, [pc, #328]	; (836f4 <XPROGProtocol_Command+0x250>)
   835aa:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   835ac:	4b4d      	ldr	r3, [pc, #308]	; (836e4 <XPROGProtocol_Command+0x240>)
   835ae:	88db      	ldrh	r3, [r3, #6]
   835b0:	2b07      	cmp	r3, #7
   835b2:	d802      	bhi.n	835ba <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   835b4:	2201      	movs	r2, #1
   835b6:	4b4f      	ldr	r3, [pc, #316]	; (836f4 <XPROGProtocol_Command+0x250>)
   835b8:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   835ba:	4b4a      	ldr	r3, [pc, #296]	; (836e4 <XPROGProtocol_Command+0x240>)
   835bc:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   835be:	795a      	ldrb	r2, [r3, #5]
   835c0:	7919      	ldrb	r1, [r3, #4]
   835c2:	0409      	lsls	r1, r1, #16
   835c4:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   835c8:	789a      	ldrb	r2, [r3, #2]
   835ca:	4311      	orrs	r1, r2
   835cc:	78da      	ldrb	r2, [r3, #3]
   835ce:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   835d2:	781a      	ldrb	r2, [r3, #0]
   835d4:	3a01      	subs	r2, #1
   835d6:	2a05      	cmp	r2, #5
   835d8:	d811      	bhi.n	835fe <XPROGProtocol_Command+0x15a>
   835da:	e8df f012 	tbh	[pc, r2, lsl #1]
   835de:	00e1      	.short	0x00e1
   835e0:	00e50008 	.word	0x00e50008
   835e4:	000600fd 	.word	0x000600fd
   835e8:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   835ea:	2008      	movs	r0, #8
   835ec:	e0f5      	b.n	837da <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   835ee:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   835f0:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   835f2:	222c      	movs	r2, #44	; 0x2c
   835f4:	e0db      	b.n	837ae <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   835f6:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   835f8:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   835fa:	221a      	movs	r2, #26
   835fc:	e0d7      	b.n	837ae <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   835fe:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83600:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83602:	2023      	movs	r0, #35	; 0x23
   83604:	e0d3      	b.n	837ae <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   83606:	4b39      	ldr	r3, [pc, #228]	; (836ec <XPROGProtocol_Command+0x248>)
   83608:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   8360a:	2200      	movs	r2, #0
   8360c:	4b39      	ldr	r3, [pc, #228]	; (836f4 <XPROGProtocol_Command+0x250>)
   8360e:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83610:	4b34      	ldr	r3, [pc, #208]	; (836e4 <XPROGProtocol_Command+0x240>)
   83612:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   83614:	798b      	ldrb	r3, [r1, #6]
   83616:	794a      	ldrb	r2, [r1, #5]
   83618:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8361c:	7908      	ldrb	r0, [r1, #4]
   8361e:	78cb      	ldrb	r3, [r1, #3]
   83620:	041b      	lsls	r3, r3, #16
   83622:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   83626:	7848      	ldrb	r0, [r1, #1]
   83628:	4303      	orrs	r3, r0
   8362a:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   8362c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83630:	bf28      	it	cs
   83632:	f44f 7280 	movcs.w	r2, #256	; 0x100
   83636:	4933      	ldr	r1, [pc, #204]	; (83704 <XPROGProtocol_Command+0x260>)
   83638:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   8363c:	4b32      	ldr	r3, [pc, #200]	; (83708 <XPROGProtocol_Command+0x264>)
   8363e:	4798      	blx	r3
   83640:	2800      	cmp	r0, #0
   83642:	f47f af65 	bne.w	83510 <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   83646:	2203      	movs	r2, #3
   83648:	4b2a      	ldr	r3, [pc, #168]	; (836f4 <XPROGProtocol_Command+0x250>)
   8364a:	701a      	strb	r2, [r3, #0]
   8364c:	e760      	b.n	83510 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   8364e:	4b27      	ldr	r3, [pc, #156]	; (836ec <XPROGProtocol_Command+0x248>)
   83650:	4798      	blx	r3
			break;
   83652:	e75d      	b.n	83510 <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83654:	4b25      	ldr	r3, [pc, #148]	; (836ec <XPROGProtocol_Command+0x248>)
   83656:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83658:	2200      	movs	r2, #0
   8365a:	4b26      	ldr	r3, [pc, #152]	; (836f4 <XPROGProtocol_Command+0x250>)
   8365c:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   8365e:	4b21      	ldr	r3, [pc, #132]	; (836e4 <XPROGProtocol_Command+0x240>)
   83660:	8999      	ldrh	r1, [r3, #12]
   83662:	2901      	cmp	r1, #1
   83664:	d90b      	bls.n	8367e <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   83666:	4b1f      	ldr	r3, [pc, #124]	; (836e4 <XPROGProtocol_Command+0x240>)
   83668:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   8366a:	7813      	ldrb	r3, [r2, #0]
   8366c:	3b01      	subs	r3, #1
   8366e:	2b07      	cmp	r3, #7
   83670:	d861      	bhi.n	83736 <XPROGProtocol_Command+0x292>
   83672:	e8df f003 	tbb	[pc, r3]
   83676:	1b08      	.short	0x1b08
   83678:	60602c28 	.word	0x60602c28
   8367c:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   8367e:	2201      	movs	r2, #1
   83680:	4b1c      	ldr	r3, [pc, #112]	; (836f4 <XPROGProtocol_Command+0x250>)
   83682:	701a      	strb	r2, [r3, #0]
   83684:	e744      	b.n	83510 <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83686:	2904      	cmp	r1, #4
   83688:	d803      	bhi.n	83692 <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   8368a:	2201      	movs	r2, #1
   8368c:	4b19      	ldr	r3, [pc, #100]	; (836f4 <XPROGProtocol_Command+0x250>)
   8368e:	701a      	strb	r2, [r3, #0]
   83690:	e73e      	b.n	83510 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83692:	7911      	ldrb	r1, [r2, #4]
   83694:	78d3      	ldrb	r3, [r2, #3]
   83696:	041b      	lsls	r3, r3, #16
   83698:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   8369c:	7851      	ldrb	r1, [r2, #1]
   8369e:	430b      	orrs	r3, r1
   836a0:	7892      	ldrb	r2, [r2, #2]
   836a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   836a6:	4a19      	ldr	r2, [pc, #100]	; (8370c <XPROGProtocol_Command+0x268>)
   836a8:	6013      	str	r3, [r2, #0]
   836aa:	e731      	b.n	83510 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   836ac:	2902      	cmp	r1, #2
   836ae:	d803      	bhi.n	836b8 <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   836b0:	2201      	movs	r2, #1
   836b2:	4b10      	ldr	r3, [pc, #64]	; (836f4 <XPROGProtocol_Command+0x250>)
   836b4:	701a      	strb	r2, [r3, #0]
   836b6:	e72b      	b.n	83510 <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   836b8:	7891      	ldrb	r1, [r2, #2]
   836ba:	7853      	ldrb	r3, [r2, #1]
   836bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   836c0:	4a13      	ldr	r2, [pc, #76]	; (83710 <XPROGProtocol_Command+0x26c>)
   836c2:	8013      	strh	r3, [r2, #0]
   836c4:	e724      	b.n	83510 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   836c6:	7852      	ldrb	r2, [r2, #1]
   836c8:	4b12      	ldr	r3, [pc, #72]	; (83714 <XPROGProtocol_Command+0x270>)
   836ca:	701a      	strb	r2, [r3, #0]
   836cc:	e720      	b.n	83510 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   836ce:	7852      	ldrb	r2, [r2, #1]
   836d0:	4b11      	ldr	r3, [pc, #68]	; (83718 <XPROGProtocol_Command+0x274>)
   836d2:	701a      	strb	r2, [r3, #0]
   836d4:	e71c      	b.n	83510 <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   836d6:	2904      	cmp	r1, #4
   836d8:	d820      	bhi.n	8371c <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   836da:	2201      	movs	r2, #1
   836dc:	4b05      	ldr	r3, [pc, #20]	; (836f4 <XPROGProtocol_Command+0x250>)
   836de:	701a      	strb	r2, [r3, #0]
   836e0:	e716      	b.n	83510 <XPROGProtocol_Command+0x6c>
   836e2:	bf00      	nop
   836e4:	200029a8 	.word	0x200029a8
   836e8:	20002288 	.word	0x20002288
   836ec:	00083afd 	.word	0x00083afd
   836f0:	00083139 	.word	0x00083139
   836f4:	2000298c 	.word	0x2000298c
   836f8:	00083b45 	.word	0x00083b45
   836fc:	000831b5 	.word	0x000831b5
   83700:	000833ad 	.word	0x000833ad
   83704:	2000228c 	.word	0x2000228c
   83708:	000831f1 	.word	0x000831f1
   8370c:	20000a5c 	.word	0x20000a5c
   83710:	20000a5a 	.word	0x20000a5a
   83714:	20000a60 	.word	0x20000a60
   83718:	20000a61 	.word	0x20000a61
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   8371c:	7911      	ldrb	r1, [r2, #4]
   8371e:	78d3      	ldrb	r3, [r2, #3]
   83720:	041b      	lsls	r3, r3, #16
   83722:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83726:	7851      	ldrb	r1, [r2, #1]
   83728:	430b      	orrs	r3, r1
   8372a:	7890      	ldrb	r0, [r2, #2]
   8372c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83730:	4b2f      	ldr	r3, [pc, #188]	; (837f0 <XPROGProtocol_Command+0x34c>)
   83732:	4798      	blx	r3
   83734:	e6ec      	b.n	83510 <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   83736:	2201      	movs	r2, #1
   83738:	4b2e      	ldr	r3, [pc, #184]	; (837f4 <XPROGProtocol_Command+0x350>)
   8373a:	701a      	strb	r2, [r3, #0]
   8373c:	e6e8      	b.n	83510 <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8373e:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   83740:	4b2d      	ldr	r3, [pc, #180]	; (837f8 <XPROGProtocol_Command+0x354>)
   83742:	88db      	ldrh	r3, [r3, #6]
   83744:	18c2      	adds	r2, r0, r3
   83746:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   8374a:	dc27      	bgt.n	8379c <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   8374c:	492a      	ldr	r1, [pc, #168]	; (837f8 <XPROGProtocol_Command+0x354>)
   8374e:	4a2b      	ldr	r2, [pc, #172]	; (837fc <XPROGProtocol_Command+0x358>)
   83750:	4410      	add	r0, r2
   83752:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83754:	818b      	strh	r3, [r1, #12]
			return true;
   83756:	2001      	movs	r0, #1
   83758:	e6dd      	b.n	83516 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   8375a:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   8375c:	4b26      	ldr	r3, [pc, #152]	; (837f8 <XPROGProtocol_Command+0x354>)
   8375e:	88da      	ldrh	r2, [r3, #6]
   83760:	1883      	adds	r3, r0, r2
   83762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   83766:	dd01      	ble.n	8376c <XPROGProtocol_Command+0x2c8>
				return false;
   83768:	2000      	movs	r0, #0
   8376a:	e6d4      	b.n	83516 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   8376c:	4b22      	ldr	r3, [pc, #136]	; (837f8 <XPROGProtocol_Command+0x354>)
   8376e:	6899      	ldr	r1, [r3, #8]
   83770:	4b22      	ldr	r3, [pc, #136]	; (837fc <XPROGProtocol_Command+0x358>)
   83772:	4418      	add	r0, r3
   83774:	4b22      	ldr	r3, [pc, #136]	; (83800 <XPROGProtocol_Command+0x35c>)
   83776:	4798      	blx	r3
			return true;
   83778:	2001      	movs	r0, #1
   8377a:	e6cc      	b.n	83516 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   8377c:	4a21      	ldr	r2, [pc, #132]	; (83804 <XPROGProtocol_Command+0x360>)
   8377e:	4b1d      	ldr	r3, [pc, #116]	; (837f4 <XPROGProtocol_Command+0x350>)
   83780:	781b      	ldrb	r3, [r3, #0]
   83782:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   83784:	4b20      	ldr	r3, [pc, #128]	; (83808 <XPROGProtocol_Command+0x364>)
   83786:	681b      	ldr	r3, [r3, #0]
   83788:	fab3 f383 	clz	r3, r3
   8378c:	095b      	lsrs	r3, r3, #5
   8378e:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   83790:	4b19      	ldr	r3, [pc, #100]	; (837f8 <XPROGProtocol_Command+0x354>)
   83792:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   83794:	2203      	movs	r2, #3
   83796:	819a      	strh	r2, [r3, #12]
			return true;
   83798:	2001      	movs	r0, #1
   8379a:	e6bc      	b.n	83516 <XPROGProtocol_Command+0x72>
				return false;
   8379c:	2000      	movs	r0, #0
   8379e:	e6ba      	b.n	83516 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   837a0:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   837a2:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   837a4:	2224      	movs	r2, #36	; 0x24
   837a6:	e002      	b.n	837ae <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   837a8:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   837aa:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   837ac:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   837ae:	79de      	ldrb	r6, [r3, #7]
   837b0:	799c      	ldrb	r4, [r3, #6]
   837b2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   837b6:	785b      	ldrb	r3, [r3, #1]
   837b8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   837bc:	bf28      	it	cs
   837be:	f44f 7480 	movcs.w	r4, #256	; 0x100
   837c2:	9402      	str	r4, [sp, #8]
   837c4:	4c0d      	ldr	r4, [pc, #52]	; (837fc <XPROGProtocol_Command+0x358>)
   837c6:	9401      	str	r4, [sp, #4]
   837c8:	9100      	str	r1, [sp, #0]
   837ca:	4629      	mov	r1, r5
   837cc:	4c0f      	ldr	r4, [pc, #60]	; (8380c <XPROGProtocol_Command+0x368>)
   837ce:	47a0      	blx	r4
   837d0:	2800      	cmp	r0, #0
   837d2:	f47f ae9d 	bne.w	83510 <XPROGProtocol_Command+0x6c>
   837d6:	e007      	b.n	837e8 <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   837d8:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   837da:	4b08      	ldr	r3, [pc, #32]	; (837fc <XPROGProtocol_Command+0x358>)
   837dc:	781a      	ldrb	r2, [r3, #0]
   837de:	4b0c      	ldr	r3, [pc, #48]	; (83810 <XPROGProtocol_Command+0x36c>)
   837e0:	4798      	blx	r3
   837e2:	2800      	cmp	r0, #0
   837e4:	f47f ae94 	bne.w	83510 <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   837e8:	2203      	movs	r2, #3
   837ea:	4b02      	ldr	r3, [pc, #8]	; (837f4 <XPROGProtocol_Command+0x350>)
   837ec:	701a      	strb	r2, [r3, #0]
   837ee:	e68f      	b.n	83510 <XPROGProtocol_Command+0x6c>
   837f0:	00083a8d 	.word	0x00083a8d
   837f4:	2000298c 	.word	0x2000298c
   837f8:	200029a8 	.word	0x200029a8
   837fc:	2000228c 	.word	0x2000228c
   83800:	0008652d 	.word	0x0008652d
   83804:	20002288 	.word	0x20002288
   83808:	20002990 	.word	0x20002990
   8380c:	000832d5 	.word	0x000832d5
   83810:	0008328d 	.word	0x0008328d

00083814 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   83814:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   83816:	4d0b      	ldr	r5, [pc, #44]	; (83844 <XPROGTarget_SetRxMode+0x30>)
   83818:	4c0b      	ldr	r4, [pc, #44]	; (83848 <XPROGTarget_SetRxMode+0x34>)
   8381a:	4628      	mov	r0, r5
   8381c:	47a0      	blx	r4
   8381e:	2800      	cmp	r0, #0
   83820:	d0fb      	beq.n	8381a <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   83822:	4c08      	ldr	r4, [pc, #32]	; (83844 <XPROGTarget_SetRxMode+0x30>)
   83824:	4620      	mov	r0, r4
   83826:	4b09      	ldr	r3, [pc, #36]	; (8384c <XPROGTarget_SetRxMode+0x38>)
   83828:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   8382a:	4620      	mov	r0, r4
   8382c:	4b08      	ldr	r3, [pc, #32]	; (83850 <XPROGTarget_SetRxMode+0x3c>)
   8382e:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   83830:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83834:	2014      	movs	r0, #20
   83836:	4b07      	ldr	r3, [pc, #28]	; (83854 <XPROGTarget_SetRxMode+0x40>)
   83838:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   8383a:	2200      	movs	r2, #0
   8383c:	4b06      	ldr	r3, [pc, #24]	; (83858 <XPROGTarget_SetRxMode+0x44>)
   8383e:	701a      	strb	r2, [r3, #0]
   83840:	bd38      	pop	{r3, r4, r5, pc}
   83842:	bf00      	nop
   83844:	40094000 	.word	0x40094000
   83848:	00085bdd 	.word	0x00085bdd
   8384c:	00085bbb 	.word	0x00085bbb
   83850:	00085bc1 	.word	0x00085bc1
   83854:	00084171 	.word	0x00084171
   83858:	2000238c 	.word	0x2000238c

0008385c <XPROGTarget_SetTxMode>:
{
   8385c:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   8385e:	2518      	movs	r5, #24
   83860:	4c14      	ldr	r4, [pc, #80]	; (838b4 <XPROGTarget_SetTxMode+0x58>)
   83862:	4e15      	ldr	r6, [pc, #84]	; (838b8 <XPROGTarget_SetTxMode+0x5c>)
   83864:	4628      	mov	r0, r5
   83866:	47a0      	blx	r4
   83868:	b110      	cbz	r0, 83870 <XPROGTarget_SetTxMode+0x14>
   8386a:	6833      	ldr	r3, [r6, #0]
   8386c:	2b00      	cmp	r3, #0
   8386e:	d1f9      	bne.n	83864 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83870:	2518      	movs	r5, #24
   83872:	4c10      	ldr	r4, [pc, #64]	; (838b4 <XPROGTarget_SetTxMode+0x58>)
   83874:	4e10      	ldr	r6, [pc, #64]	; (838b8 <XPROGTarget_SetTxMode+0x5c>)
   83876:	4628      	mov	r0, r5
   83878:	47a0      	blx	r4
   8387a:	b910      	cbnz	r0, 83882 <XPROGTarget_SetTxMode+0x26>
   8387c:	6833      	ldr	r3, [r6, #0]
   8387e:	2b00      	cmp	r3, #0
   83880:	d1f9      	bne.n	83876 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83882:	2518      	movs	r5, #24
   83884:	4c0b      	ldr	r4, [pc, #44]	; (838b4 <XPROGTarget_SetTxMode+0x58>)
   83886:	4e0c      	ldr	r6, [pc, #48]	; (838b8 <XPROGTarget_SetTxMode+0x5c>)
   83888:	4628      	mov	r0, r5
   8388a:	47a0      	blx	r4
   8388c:	b110      	cbz	r0, 83894 <XPROGTarget_SetTxMode+0x38>
   8388e:	6833      	ldr	r3, [r6, #0]
   83890:	2b00      	cmp	r3, #0
   83892:	d1f9      	bne.n	83888 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   83894:	4c09      	ldr	r4, [pc, #36]	; (838bc <XPROGTarget_SetTxMode+0x60>)
   83896:	4620      	mov	r0, r4
   83898:	4b09      	ldr	r3, [pc, #36]	; (838c0 <XPROGTarget_SetTxMode+0x64>)
   8389a:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   8389c:	4620      	mov	r0, r4
   8389e:	4b09      	ldr	r3, [pc, #36]	; (838c4 <XPROGTarget_SetTxMode+0x68>)
   838a0:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   838a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838a6:	2014      	movs	r0, #20
   838a8:	4b07      	ldr	r3, [pc, #28]	; (838c8 <XPROGTarget_SetTxMode+0x6c>)
   838aa:	4798      	blx	r3
	IsSending = true;
   838ac:	2201      	movs	r2, #1
   838ae:	4b07      	ldr	r3, [pc, #28]	; (838cc <XPROGTarget_SetTxMode+0x70>)
   838b0:	701a      	strb	r2, [r3, #0]
   838b2:	bd70      	pop	{r4, r5, r6, pc}
   838b4:	0008411f 	.word	0x0008411f
   838b8:	20002990 	.word	0x20002990
   838bc:	40094000 	.word	0x40094000
   838c0:	00085bc7 	.word	0x00085bc7
   838c4:	00085bb5 	.word	0x00085bb5
   838c8:	00084171 	.word	0x00084171
   838cc:	2000238c 	.word	0x2000238c

000838d0 <XPROGTarget_DisableTargetPDI>:
{
   838d0:	b510      	push	{r4, lr}
	if (IsSending)
   838d2:	4b0f      	ldr	r3, [pc, #60]	; (83910 <XPROGTarget_DisableTargetPDI+0x40>)
   838d4:	781b      	ldrb	r3, [r3, #0]
   838d6:	b9bb      	cbnz	r3, 83908 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   838d8:	4c0e      	ldr	r4, [pc, #56]	; (83914 <XPROGTarget_DisableTargetPDI+0x44>)
   838da:	4620      	mov	r0, r4
   838dc:	4b0e      	ldr	r3, [pc, #56]	; (83918 <XPROGTarget_DisableTargetPDI+0x48>)
   838de:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   838e0:	4620      	mov	r0, r4
   838e2:	4b0e      	ldr	r3, [pc, #56]	; (8391c <XPROGTarget_DisableTargetPDI+0x4c>)
   838e4:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   838e6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   838ea:	2018      	movs	r0, #24
   838ec:	4c0c      	ldr	r4, [pc, #48]	; (83920 <XPROGTarget_DisableTargetPDI+0x50>)
   838ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   838f0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   838f4:	2015      	movs	r0, #21
   838f6:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   838f8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   838fc:	2014      	movs	r0, #20
   838fe:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   83900:	200e      	movs	r0, #14
   83902:	4b08      	ldr	r3, [pc, #32]	; (83924 <XPROGTarget_DisableTargetPDI+0x54>)
   83904:	4798      	blx	r3
   83906:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   83908:	4b07      	ldr	r3, [pc, #28]	; (83928 <XPROGTarget_DisableTargetPDI+0x58>)
   8390a:	4798      	blx	r3
   8390c:	e7e4      	b.n	838d8 <XPROGTarget_DisableTargetPDI+0x8>
   8390e:	bf00      	nop
   83910:	2000238c 	.word	0x2000238c
   83914:	40094000 	.word	0x40094000
   83918:	00085bc7 	.word	0x00085bc7
   8391c:	00085bbb 	.word	0x00085bbb
   83920:	00084171 	.word	0x00084171
   83924:	000844e9 	.word	0x000844e9
   83928:	00083815 	.word	0x00083815

0008392c <XPROGTarget_SendByte>:
{
   8392c:	b510      	push	{r4, lr}
   8392e:	4604      	mov	r4, r0
	if (!(IsSending))
   83930:	4b05      	ldr	r3, [pc, #20]	; (83948 <XPROGTarget_SendByte+0x1c>)
   83932:	781b      	ldrb	r3, [r3, #0]
   83934:	b123      	cbz	r3, 83940 <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   83936:	4621      	mov	r1, r4
   83938:	4804      	ldr	r0, [pc, #16]	; (8394c <XPROGTarget_SendByte+0x20>)
   8393a:	4b05      	ldr	r3, [pc, #20]	; (83950 <XPROGTarget_SendByte+0x24>)
   8393c:	4798      	blx	r3
   8393e:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   83940:	4b04      	ldr	r3, [pc, #16]	; (83954 <XPROGTarget_SendByte+0x28>)
   83942:	4798      	blx	r3
   83944:	e7f7      	b.n	83936 <XPROGTarget_SendByte+0xa>
   83946:	bf00      	nop
   83948:	2000238c 	.word	0x2000238c
   8394c:	40094000 	.word	0x40094000
   83950:	00085bf9 	.word	0x00085bf9
   83954:	0008385d 	.word	0x0008385d

00083958 <XPROGTarget_ReceiveByte>:
{
   83958:	b570      	push	{r4, r5, r6, lr}
   8395a:	b082      	sub	sp, #8
	if (IsSending)
   8395c:	4b0a      	ldr	r3, [pc, #40]	; (83988 <XPROGTarget_ReceiveByte+0x30>)
   8395e:	781b      	ldrb	r3, [r3, #0]
   83960:	b973      	cbnz	r3, 83980 <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   83962:	4d0a      	ldr	r5, [pc, #40]	; (8398c <XPROGTarget_ReceiveByte+0x34>)
   83964:	4c0a      	ldr	r4, [pc, #40]	; (83990 <XPROGTarget_ReceiveByte+0x38>)
   83966:	4e0b      	ldr	r6, [pc, #44]	; (83994 <XPROGTarget_ReceiveByte+0x3c>)
   83968:	a901      	add	r1, sp, #4
   8396a:	4628      	mov	r0, r5
   8396c:	47a0      	blx	r4
   8396e:	2801      	cmp	r0, #1
   83970:	d102      	bne.n	83978 <XPROGTarget_ReceiveByte+0x20>
   83972:	6833      	ldr	r3, [r6, #0]
   83974:	2b00      	cmp	r3, #0
   83976:	d1f7      	bne.n	83968 <XPROGTarget_ReceiveByte+0x10>
}
   83978:	f89d 0004 	ldrb.w	r0, [sp, #4]
   8397c:	b002      	add	sp, #8
   8397e:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   83980:	4b05      	ldr	r3, [pc, #20]	; (83998 <XPROGTarget_ReceiveByte+0x40>)
   83982:	4798      	blx	r3
   83984:	e7ed      	b.n	83962 <XPROGTarget_ReceiveByte+0xa>
   83986:	bf00      	nop
   83988:	2000238c 	.word	0x2000238c
   8398c:	40094000 	.word	0x40094000
   83990:	00085c0b 	.word	0x00085c0b
   83994:	20002990 	.word	0x20002990
   83998:	00083815 	.word	0x00083815

0008399c <XPROGTarget_SendIdle>:
{
   8399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   8399e:	4b12      	ldr	r3, [pc, #72]	; (839e8 <XPROGTarget_SendIdle+0x4c>)
   839a0:	781b      	ldrb	r3, [r3, #0]
   839a2:	b123      	cbz	r3, 839ae <XPROGTarget_SendIdle+0x12>
{
   839a4:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   839a6:	2518      	movs	r5, #24
   839a8:	4c10      	ldr	r4, [pc, #64]	; (839ec <XPROGTarget_SendIdle+0x50>)
   839aa:	4e11      	ldr	r6, [pc, #68]	; (839f0 <XPROGTarget_SendIdle+0x54>)
   839ac:	e006      	b.n	839bc <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   839ae:	4b11      	ldr	r3, [pc, #68]	; (839f4 <XPROGTarget_SendIdle+0x58>)
   839b0:	4798      	blx	r3
   839b2:	e7f7      	b.n	839a4 <XPROGTarget_SendIdle+0x8>
   839b4:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   839b6:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   839ba:	d013      	beq.n	839e4 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   839bc:	4628      	mov	r0, r5
   839be:	47a0      	blx	r4
   839c0:	b110      	cbz	r0, 839c8 <XPROGTarget_SendIdle+0x2c>
   839c2:	6833      	ldr	r3, [r6, #0]
   839c4:	2b00      	cmp	r3, #0
   839c6:	d1f9      	bne.n	839bc <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   839c8:	4628      	mov	r0, r5
   839ca:	47a0      	blx	r4
   839cc:	b910      	cbnz	r0, 839d4 <XPROGTarget_SendIdle+0x38>
   839ce:	6833      	ldr	r3, [r6, #0]
   839d0:	2b00      	cmp	r3, #0
   839d2:	d1f9      	bne.n	839c8 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   839d4:	4628      	mov	r0, r5
   839d6:	47a0      	blx	r4
   839d8:	2800      	cmp	r0, #0
   839da:	d0eb      	beq.n	839b4 <XPROGTarget_SendIdle+0x18>
   839dc:	6833      	ldr	r3, [r6, #0]
   839de:	2b00      	cmp	r3, #0
   839e0:	d1f8      	bne.n	839d4 <XPROGTarget_SendIdle+0x38>
   839e2:	e7e7      	b.n	839b4 <XPROGTarget_SendIdle+0x18>
}
   839e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839e6:	bf00      	nop
   839e8:	2000238c 	.word	0x2000238c
   839ec:	0008411f 	.word	0x0008411f
   839f0:	20002990 	.word	0x20002990
   839f4:	0008385d 	.word	0x0008385d

000839f8 <XPROGTarget_EnableTargetPDI>:
{
   839f8:	b570      	push	{r4, r5, r6, lr}
   839fa:	b086      	sub	sp, #24
	IsSending = false;
   839fc:	2500      	movs	r5, #0
   839fe:	4b19      	ldr	r3, [pc, #100]	; (83a64 <XPROGTarget_EnableTargetPDI+0x6c>)
   83a00:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   83a02:	200e      	movs	r0, #14
   83a04:	4b18      	ldr	r3, [pc, #96]	; (83a68 <XPROGTarget_EnableTargetPDI+0x70>)
   83a06:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   83a08:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83a0c:	2014      	movs	r0, #20
   83a0e:	4c17      	ldr	r4, [pc, #92]	; (83a6c <XPROGTarget_EnableTargetPDI+0x74>)
   83a10:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   83a12:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83a16:	2015      	movs	r0, #21
   83a18:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   83a1a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83a1e:	2018      	movs	r0, #24
   83a20:	47a0      	blx	r4
	delay_us(50);
   83a22:	f240 1057 	movw	r0, #343	; 0x157
   83a26:	4e12      	ldr	r6, [pc, #72]	; (83a70 <XPROGTarget_EnableTargetPDI+0x78>)
   83a28:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   83a2a:	2014      	movs	r0, #20
   83a2c:	4b11      	ldr	r3, [pc, #68]	; (83a74 <XPROGTarget_EnableTargetPDI+0x7c>)
   83a2e:	4798      	blx	r3
	delay_us(10);
   83a30:	2045      	movs	r0, #69	; 0x45
   83a32:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   83a34:	9502      	str	r5, [sp, #8]
   83a36:	9504      	str	r5, [sp, #16]
   83a38:	9505      	str	r5, [sp, #20]
   83a3a:	4b0f      	ldr	r3, [pc, #60]	; (83a78 <XPROGTarget_EnableTargetPDI+0x80>)
   83a3c:	9300      	str	r3, [sp, #0]
   83a3e:	23c0      	movs	r3, #192	; 0xc0
   83a40:	9301      	str	r3, [sp, #4]
   83a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83a46:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   83a48:	4a0c      	ldr	r2, [pc, #48]	; (83a7c <XPROGTarget_EnableTargetPDI+0x84>)
   83a4a:	4669      	mov	r1, sp
   83a4c:	480c      	ldr	r0, [pc, #48]	; (83a80 <XPROGTarget_EnableTargetPDI+0x88>)
   83a4e:	4b0d      	ldr	r3, [pc, #52]	; (83a84 <XPROGTarget_EnableTargetPDI+0x8c>)
   83a50:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   83a52:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83a56:	2018      	movs	r0, #24
   83a58:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   83a5a:	4c0b      	ldr	r4, [pc, #44]	; (83a88 <XPROGTarget_EnableTargetPDI+0x90>)
   83a5c:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   83a5e:	47a0      	blx	r4
}
   83a60:	b006      	add	sp, #24
   83a62:	bd70      	pop	{r4, r5, r6, pc}
   83a64:	2000238c 	.word	0x2000238c
   83a68:	000844b5 	.word	0x000844b5
   83a6c:	00084171 	.word	0x00084171
   83a70:	20000089 	.word	0x20000089
   83a74:	0008413b 	.word	0x0008413b
   83a78:	0007a120 	.word	0x0007a120
   83a7c:	0b71b000 	.word	0x0b71b000
   83a80:	40094000 	.word	0x40094000
   83a84:	00085b4d 	.word	0x00085b4d
   83a88:	0008399d 	.word	0x0008399d

00083a8c <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   83a8c:	4b01      	ldr	r3, [pc, #4]	; (83a94 <set_timeout+0x8>)
   83a8e:	6018      	str	r0, [r3, #0]
   83a90:	4770      	bx	lr
   83a92:	bf00      	nop
   83a94:	20000a64 	.word	0x20000a64

00083a98 <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   83a98:	b538      	push	{r3, r4, r5, lr}
   83a9a:	2016      	movs	r0, #22
   83a9c:	4b10      	ldr	r3, [pc, #64]	; (83ae0 <setup_timeoutcnt+0x48>)
   83a9e:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   83aa0:	4b10      	ldr	r3, [pc, #64]	; (83ae4 <setup_timeoutcnt+0x4c>)
   83aa2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   83aa6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83aaa:	2510      	movs	r5, #16
   83aac:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83ab0:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   83ab2:	4c0d      	ldr	r4, [pc, #52]	; (83ae8 <setup_timeoutcnt+0x50>)
   83ab4:	f24c 0201 	movw	r2, #49153	; 0xc001
   83ab8:	2100      	movs	r1, #0
   83aba:	4620      	mov	r0, r4
   83abc:	4b0b      	ldr	r3, [pc, #44]	; (83aec <setup_timeoutcnt+0x54>)
   83abe:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   83ac0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   83ac4:	2100      	movs	r1, #0
   83ac6:	4620      	mov	r0, r4
   83ac8:	4b09      	ldr	r3, [pc, #36]	; (83af0 <setup_timeoutcnt+0x58>)
   83aca:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   83acc:	462a      	mov	r2, r5
   83ace:	2100      	movs	r1, #0
   83ad0:	4620      	mov	r0, r4
   83ad2:	4b08      	ldr	r3, [pc, #32]	; (83af4 <setup_timeoutcnt+0x5c>)
   83ad4:	4798      	blx	r3
	
	timerEnabled = true;
   83ad6:	2201      	movs	r2, #1
   83ad8:	4b07      	ldr	r3, [pc, #28]	; (83af8 <setup_timeoutcnt+0x60>)
   83ada:	701a      	strb	r2, [r3, #0]
   83adc:	bd38      	pop	{r3, r4, r5, pc}
   83ade:	bf00      	nop
   83ae0:	000844b5 	.word	0x000844b5
   83ae4:	e000e100 	.word	0xe000e100
   83ae8:	40080000 	.word	0x40080000
   83aec:	00083bcd 	.word	0x00083bcd
   83af0:	00083bf5 	.word	0x00083bf5
   83af4:	00083bfd 	.word	0x00083bfd
   83af8:	2000238d 	.word	0x2000238d

00083afc <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   83afc:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   83afe:	4b0a      	ldr	r3, [pc, #40]	; (83b28 <start_timeoutcnt+0x2c>)
   83b00:	781b      	ldrb	r3, [r3, #0]
   83b02:	b16b      	cbz	r3, 83b20 <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83b04:	4c09      	ldr	r4, [pc, #36]	; (83b2c <start_timeoutcnt+0x30>)
   83b06:	2100      	movs	r1, #0
   83b08:	4620      	mov	r0, r4
   83b0a:	4b09      	ldr	r3, [pc, #36]	; (83b30 <start_timeoutcnt+0x34>)
   83b0c:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   83b0e:	4b09      	ldr	r3, [pc, #36]	; (83b34 <start_timeoutcnt+0x38>)
   83b10:	681a      	ldr	r2, [r3, #0]
   83b12:	4b09      	ldr	r3, [pc, #36]	; (83b38 <start_timeoutcnt+0x3c>)
   83b14:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   83b16:	2100      	movs	r1, #0
   83b18:	4620      	mov	r0, r4
   83b1a:	4b08      	ldr	r3, [pc, #32]	; (83b3c <start_timeoutcnt+0x40>)
   83b1c:	4798      	blx	r3
   83b1e:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   83b20:	4b07      	ldr	r3, [pc, #28]	; (83b40 <start_timeoutcnt+0x44>)
   83b22:	4798      	blx	r3
   83b24:	e7ee      	b.n	83b04 <start_timeoutcnt+0x8>
   83b26:	bf00      	nop
   83b28:	2000238d 	.word	0x2000238d
   83b2c:	40080000 	.word	0x40080000
   83b30:	00083bed 	.word	0x00083bed
   83b34:	20000a64 	.word	0x20000a64
   83b38:	20002990 	.word	0x20002990
   83b3c:	00083be5 	.word	0x00083be5
   83b40:	00083a99 	.word	0x00083a99

00083b44 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   83b44:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   83b46:	2100      	movs	r1, #0
   83b48:	4801      	ldr	r0, [pc, #4]	; (83b50 <stop_timeoutcnt+0xc>)
   83b4a:	4b02      	ldr	r3, [pc, #8]	; (83b54 <stop_timeoutcnt+0x10>)
   83b4c:	4798      	blx	r3
   83b4e:	bd08      	pop	{r3, pc}
   83b50:	40080000 	.word	0x40080000
   83b54:	00083bed 	.word	0x00083bed

00083b58 <TC0_Handler>:
}

ISR(TC0_Handler)
{
   83b58:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   83b5a:	4b05      	ldr	r3, [pc, #20]	; (83b70 <TC0_Handler+0x18>)
   83b5c:	681b      	ldr	r3, [r3, #0]
   83b5e:	b113      	cbz	r3, 83b66 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   83b60:	3b01      	subs	r3, #1
   83b62:	4a03      	ldr	r2, [pc, #12]	; (83b70 <TC0_Handler+0x18>)
   83b64:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   83b66:	2100      	movs	r1, #0
   83b68:	4802      	ldr	r0, [pc, #8]	; (83b74 <TC0_Handler+0x1c>)
   83b6a:	4b03      	ldr	r3, [pc, #12]	; (83b78 <TC0_Handler+0x20>)
   83b6c:	4798      	blx	r3
   83b6e:	bd08      	pop	{r3, pc}
   83b70:	20002990 	.word	0x20002990
   83b74:	40080000 	.word	0x40080000
   83b78:	00083c05 	.word	0x00083c05

00083b7c <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   83b7c:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   83b7e:	f1a1 030e 	sub.w	r3, r1, #14
   83b82:	2b01      	cmp	r3, #1
   83b84:	d802      	bhi.n	83b8c <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   83b86:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   83b8a:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83b8c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   83b90:	b672      	cpsid	i
   83b92:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83b96:	2500      	movs	r5, #0
   83b98:	4b0a      	ldr	r3, [pc, #40]	; (83bc4 <efc_perform_command+0x48>)
   83b9a:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   83b9c:	0212      	lsls	r2, r2, #8
   83b9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   83ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   83ba6:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   83baa:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   83bac:	4311      	orrs	r1, r2
   83bae:	4b06      	ldr	r3, [pc, #24]	; (83bc8 <efc_perform_command+0x4c>)
   83bb0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   83bb2:	2c00      	cmp	r4, #0
   83bb4:	d1e9      	bne.n	83b8a <efc_perform_command+0xe>
		cpu_irq_enable();
   83bb6:	2201      	movs	r2, #1
   83bb8:	4b02      	ldr	r3, [pc, #8]	; (83bc4 <efc_perform_command+0x48>)
   83bba:	701a      	strb	r2, [r3, #0]
   83bbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83bc0:	b662      	cpsie	i
   83bc2:	bd38      	pop	{r3, r4, r5, pc}
   83bc4:	20000a7c 	.word	0x20000a7c
   83bc8:	2000006d 	.word	0x2000006d

00083bcc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   83bcc:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   83bce:	0189      	lsls	r1, r1, #6
   83bd0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   83bd2:	2402      	movs	r4, #2
   83bd4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   83bd6:	f04f 31ff 	mov.w	r1, #4294967295
   83bda:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   83bdc:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   83bde:	605a      	str	r2, [r3, #4]
}
   83be0:	bc10      	pop	{r4}
   83be2:	4770      	bx	lr

00083be4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   83be4:	0189      	lsls	r1, r1, #6
   83be6:	2305      	movs	r3, #5
   83be8:	5043      	str	r3, [r0, r1]
   83bea:	4770      	bx	lr

00083bec <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   83bec:	0189      	lsls	r1, r1, #6
   83bee:	2302      	movs	r3, #2
   83bf0:	5043      	str	r3, [r0, r1]
   83bf2:	4770      	bx	lr

00083bf4 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   83bf4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   83bf8:	61ca      	str	r2, [r1, #28]
   83bfa:	4770      	bx	lr

00083bfc <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   83bfc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   83c00:	624a      	str	r2, [r1, #36]	; 0x24
   83c02:	4770      	bx	lr

00083c04 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   83c04:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   83c08:	6a08      	ldr	r0, [r1, #32]
}
   83c0a:	4770      	bx	lr

00083c0c <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   83c0c:	b570      	push	{r4, r5, r6, lr}
   83c0e:	b086      	sub	sp, #24
   83c10:	4604      	mov	r4, r0
   83c12:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   83c14:	2304      	movs	r3, #4
   83c16:	9300      	str	r3, [sp, #0]
   83c18:	ab02      	add	r3, sp, #8
   83c1a:	220f      	movs	r2, #15
   83c1c:	210e      	movs	r1, #14
   83c1e:	480d      	ldr	r0, [pc, #52]	; (83c54 <flash_read_unique_id+0x48>)
   83c20:	4d0d      	ldr	r5, [pc, #52]	; (83c58 <flash_read_unique_id+0x4c>)
   83c22:	47a8      	blx	r5
   83c24:	b118      	cbz	r0, 83c2e <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   83c26:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   83c28:	4628      	mov	r0, r5
   83c2a:	b006      	add	sp, #24
   83c2c:	bd70      	pop	{r4, r5, r6, pc}
   83c2e:	4605      	mov	r5, r0
   83c30:	2e04      	cmp	r6, #4
   83c32:	bf28      	it	cs
   83c34:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   83c36:	b156      	cbz	r6, 83c4e <flash_read_unique_id+0x42>
   83c38:	aa02      	add	r2, sp, #8
   83c3a:	4623      	mov	r3, r4
   83c3c:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   83c40:	f852 0b04 	ldr.w	r0, [r2], #4
   83c44:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   83c48:	428b      	cmp	r3, r1
   83c4a:	d1f9      	bne.n	83c40 <flash_read_unique_id+0x34>
   83c4c:	e7ec      	b.n	83c28 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   83c4e:	4635      	mov	r5, r6
   83c50:	e7ea      	b.n	83c28 <flash_read_unique_id+0x1c>
   83c52:	bf00      	nop
   83c54:	400e0800 	.word	0x400e0800
   83c58:	20000001 	.word	0x20000001

00083c5c <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   83c5c:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   83c5e:	2006      	movs	r0, #6
   83c60:	4c02      	ldr	r4, [pc, #8]	; (83c6c <ui_init+0x10>)
   83c62:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83c64:	2007      	movs	r0, #7
   83c66:	47a0      	blx	r4
   83c68:	bd10      	pop	{r4, pc}
   83c6a:	bf00      	nop
   83c6c:	00083ffd 	.word	0x00083ffd

00083c70 <ui_powerdown>:
}

void ui_powerdown(void)
{
   83c70:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   83c72:	2006      	movs	r0, #6
   83c74:	4c03      	ldr	r4, [pc, #12]	; (83c84 <ui_powerdown+0x14>)
   83c76:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83c78:	2007      	movs	r0, #7
   83c7a:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   83c7c:	201d      	movs	r0, #29
   83c7e:	4b02      	ldr	r3, [pc, #8]	; (83c88 <ui_powerdown+0x18>)
   83c80:	4798      	blx	r3
   83c82:	bd10      	pop	{r4, pc}
   83c84:	00083ffd 	.word	0x00083ffd
   83c88:	00084155 	.word	0x00084155

00083c8c <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   83c8c:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   83c8e:	2006      	movs	r0, #6
   83c90:	4b02      	ldr	r3, [pc, #8]	; (83c9c <ui_wakeup+0x10>)
   83c92:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   83c94:	201d      	movs	r0, #29
   83c96:	4b02      	ldr	r3, [pc, #8]	; (83ca0 <ui_wakeup+0x14>)
   83c98:	4798      	blx	r3
   83c9a:	bd08      	pop	{r3, pc}
   83c9c:	00084021 	.word	0x00084021
   83ca0:	0008413b 	.word	0x0008413b

00083ca4 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   83ca4:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   83ca6:	4b0b      	ldr	r3, [pc, #44]	; (83cd4 <ui_process+0x30>)
   83ca8:	fba3 2300 	umull	r2, r3, r3, r0
   83cac:	099b      	lsrs	r3, r3, #6
   83cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   83cb2:	fb02 0013 	mls	r0, r2, r3, r0
   83cb6:	b280      	uxth	r0, r0
   83cb8:	b118      	cbz	r0, 83cc2 <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   83cba:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   83cbe:	d004      	beq.n	83cca <ui_process+0x26>
   83cc0:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   83cc2:	2006      	movs	r0, #6
   83cc4:	4b04      	ldr	r3, [pc, #16]	; (83cd8 <ui_process+0x34>)
   83cc6:	4798      	blx	r3
   83cc8:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   83cca:	2006      	movs	r0, #6
   83ccc:	4b03      	ldr	r3, [pc, #12]	; (83cdc <ui_process+0x38>)
   83cce:	4798      	blx	r3
	}
}
   83cd0:	e7f6      	b.n	83cc0 <ui_process+0x1c>
   83cd2:	bf00      	nop
   83cd4:	10624dd3 	.word	0x10624dd3
   83cd8:	00084021 	.word	0x00084021
   83cdc:	00083ffd 	.word	0x00083ffd

00083ce0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83ce0:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83ce2:	203e      	movs	r0, #62	; 0x3e
   83ce4:	4b07      	ldr	r3, [pc, #28]	; (83d04 <sysclk_enable_usb+0x24>)
   83ce6:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   83ce8:	4c07      	ldr	r4, [pc, #28]	; (83d08 <sysclk_enable_usb+0x28>)
   83cea:	47a0      	blx	r4
   83cec:	2800      	cmp	r0, #0
   83cee:	d0fc      	beq.n	83cea <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83cf0:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   83cf4:	4b05      	ldr	r3, [pc, #20]	; (83d0c <sysclk_enable_usb+0x2c>)
   83cf6:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   83cf8:	4c05      	ldr	r4, [pc, #20]	; (83d10 <sysclk_enable_usb+0x30>)
   83cfa:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83cfc:	2800      	cmp	r0, #0
   83cfe:	d0fc      	beq.n	83cfa <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   83d00:	bd10      	pop	{r4, pc}
   83d02:	bf00      	nop
   83d04:	0008441d 	.word	0x0008441d
   83d08:	00084445 	.word	0x00084445
   83d0c:	400e0400 	.word	0x400e0400
   83d10:	000844a5 	.word	0x000844a5

00083d14 <sysclk_disable_usb>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83d14:	4a02      	ldr	r2, [pc, #8]	; (83d20 <sysclk_disable_usb+0xc>)
   83d16:	69d3      	ldr	r3, [r2, #28]
   83d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83d1c:	61d3      	str	r3, [r2, #28]
   83d1e:	4770      	bx	lr
   83d20:	400e0400 	.word	0x400e0400

00083d24 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83d24:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83d26:	4812      	ldr	r0, [pc, #72]	; (83d70 <sysclk_init+0x4c>)
   83d28:	4b12      	ldr	r3, [pc, #72]	; (83d74 <sysclk_init+0x50>)
   83d2a:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83d2c:	203e      	movs	r0, #62	; 0x3e
   83d2e:	4b12      	ldr	r3, [pc, #72]	; (83d78 <sysclk_init+0x54>)
   83d30:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   83d32:	4c12      	ldr	r4, [pc, #72]	; (83d7c <sysclk_init+0x58>)
   83d34:	47a0      	blx	r4
   83d36:	2800      	cmp	r0, #0
   83d38:	d0fc      	beq.n	83d34 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83d3a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83d3e:	4b10      	ldr	r3, [pc, #64]	; (83d80 <sysclk_init+0x5c>)
   83d40:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83d42:	4c10      	ldr	r4, [pc, #64]	; (83d84 <sysclk_init+0x60>)
   83d44:	47a0      	blx	r4
   83d46:	2800      	cmp	r0, #0
   83d48:	d0fc      	beq.n	83d44 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   83d4a:	4b0f      	ldr	r3, [pc, #60]	; (83d88 <sysclk_init+0x64>)
   83d4c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83d4e:	4a0f      	ldr	r2, [pc, #60]	; (83d8c <sysclk_init+0x68>)
   83d50:	4b0f      	ldr	r3, [pc, #60]	; (83d90 <sysclk_init+0x6c>)
   83d52:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   83d54:	4c0f      	ldr	r4, [pc, #60]	; (83d94 <sysclk_init+0x70>)
   83d56:	47a0      	blx	r4
   83d58:	2800      	cmp	r0, #0
   83d5a:	d0fc      	beq.n	83d56 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83d5c:	2010      	movs	r0, #16
   83d5e:	4b0e      	ldr	r3, [pc, #56]	; (83d98 <sysclk_init+0x74>)
   83d60:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83d62:	4b0e      	ldr	r3, [pc, #56]	; (83d9c <sysclk_init+0x78>)
   83d64:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83d66:	4802      	ldr	r0, [pc, #8]	; (83d70 <sysclk_init+0x4c>)
   83d68:	4b02      	ldr	r3, [pc, #8]	; (83d74 <sysclk_init+0x50>)
   83d6a:	4798      	blx	r3
   83d6c:	bd10      	pop	{r4, pc}
   83d6e:	bf00      	nop
   83d70:	05b8d800 	.word	0x05b8d800
   83d74:	2000013d 	.word	0x2000013d
   83d78:	0008441d 	.word	0x0008441d
   83d7c:	00084445 	.word	0x00084445
   83d80:	00084465 	.word	0x00084465
   83d84:	00084455 	.word	0x00084455
   83d88:	00084485 	.word	0x00084485
   83d8c:	200f3f01 	.word	0x200f3f01
   83d90:	400e0400 	.word	0x400e0400
   83d94:	00084495 	.word	0x00084495
   83d98:	000843b9 	.word	0x000843b9
   83d9c:	00085d15 	.word	0x00085d15

00083da0 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   83da0:	4b01      	ldr	r3, [pc, #4]	; (83da8 <udi_vendor_getsetting+0x8>)
   83da2:	7818      	ldrb	r0, [r3, #0]
   83da4:	4770      	bx	lr
   83da6:	bf00      	nop
   83da8:	2000238e 	.word	0x2000238e

00083dac <udi_vendor_enable>:
{
   83dac:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83dae:	4b05      	ldr	r3, [pc, #20]	; (83dc4 <udi_vendor_enable+0x18>)
   83db0:	4798      	blx	r3
   83db2:	78c3      	ldrb	r3, [r0, #3]
   83db4:	4a04      	ldr	r2, [pc, #16]	; (83dc8 <udi_vendor_enable+0x1c>)
   83db6:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83db8:	b10b      	cbz	r3, 83dbe <udi_vendor_enable+0x12>
	return true;
   83dba:	2001      	movs	r0, #1
}
   83dbc:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83dbe:	4b03      	ldr	r3, [pc, #12]	; (83dcc <udi_vendor_enable+0x20>)
   83dc0:	4798      	blx	r3
   83dc2:	bd08      	pop	{r3, pc}
   83dc4:	000826ed 	.word	0x000826ed
   83dc8:	2000238e 	.word	0x2000238e
   83dcc:	000813bd 	.word	0x000813bd

00083dd0 <udi_vendor_disable>:
{
   83dd0:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   83dd2:	4b03      	ldr	r3, [pc, #12]	; (83de0 <udi_vendor_disable+0x10>)
   83dd4:	781b      	ldrb	r3, [r3, #0]
   83dd6:	b103      	cbz	r3, 83dda <udi_vendor_disable+0xa>
   83dd8:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   83dda:	4b02      	ldr	r3, [pc, #8]	; (83de4 <udi_vendor_disable+0x14>)
   83ddc:	4798      	blx	r3
}
   83dde:	e7fb      	b.n	83dd8 <udi_vendor_disable+0x8>
   83de0:	2000238e 	.word	0x2000238e
   83de4:	000813e5 	.word	0x000813e5

00083de8 <udi_vendor_setup>:
{
   83de8:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   83dea:	4b0b      	ldr	r3, [pc, #44]	; (83e18 <udi_vendor_setup+0x30>)
   83dec:	781b      	ldrb	r3, [r3, #0]
   83dee:	f013 0f80 	tst.w	r3, #128	; 0x80
   83df2:	d105      	bne.n	83e00 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83df8:	2b40      	cmp	r3, #64	; 0x40
   83dfa:	d00a      	beq.n	83e12 <udi_vendor_setup+0x2a>
	return false; // Not supported request
   83dfc:	2000      	movs	r0, #0
}
   83dfe:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83e00:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83e04:	2b40      	cmp	r3, #64	; 0x40
   83e06:	d001      	beq.n	83e0c <udi_vendor_setup+0x24>
	return false; // Not supported request
   83e08:	2000      	movs	r0, #0
   83e0a:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83e0c:	4b03      	ldr	r3, [pc, #12]	; (83e1c <udi_vendor_setup+0x34>)
   83e0e:	4798      	blx	r3
   83e10:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83e12:	4b03      	ldr	r3, [pc, #12]	; (83e20 <udi_vendor_setup+0x38>)
   83e14:	4798      	blx	r3
   83e16:	bd08      	pop	{r3, pc}
   83e18:	200029a8 	.word	0x200029a8
   83e1c:	00081445 	.word	0x00081445
   83e20:	000813f1 	.word	0x000813f1

00083e24 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83e24:	b510      	push	{r4, lr}
   83e26:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83e28:	9200      	str	r2, [sp, #0]
   83e2a:	460b      	mov	r3, r1
   83e2c:	4602      	mov	r2, r0
   83e2e:	2100      	movs	r1, #0
   83e30:	2081      	movs	r0, #129	; 0x81
   83e32:	4c02      	ldr	r4, [pc, #8]	; (83e3c <udi_vendor_bulk_in_run+0x18>)
   83e34:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   83e36:	b002      	add	sp, #8
   83e38:	bd10      	pop	{r4, pc}
   83e3a:	bf00      	nop
   83e3c:	000855a5 	.word	0x000855a5

00083e40 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83e40:	b510      	push	{r4, lr}
   83e42:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83e44:	9200      	str	r2, [sp, #0]
   83e46:	460b      	mov	r3, r1
   83e48:	4602      	mov	r2, r0
   83e4a:	2100      	movs	r1, #0
   83e4c:	2002      	movs	r0, #2
   83e4e:	4c02      	ldr	r4, [pc, #8]	; (83e58 <udi_vendor_bulk_out_run+0x18>)
   83e50:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   83e52:	b002      	add	sp, #8
   83e54:	bd10      	pop	{r4, pc}
   83e56:	bf00      	nop
   83e58:	000855a5 	.word	0x000855a5

00083e5c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   83e5c:	4b0b      	ldr	r3, [pc, #44]	; (83e8c <cpu_irq_enter_critical+0x30>)
   83e5e:	681b      	ldr	r3, [r3, #0]
   83e60:	b92b      	cbnz	r3, 83e6e <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83e62:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   83e66:	b13b      	cbz	r3, 83e78 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   83e68:	2200      	movs	r2, #0
   83e6a:	4b09      	ldr	r3, [pc, #36]	; (83e90 <cpu_irq_enter_critical+0x34>)
   83e6c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   83e6e:	4a07      	ldr	r2, [pc, #28]	; (83e8c <cpu_irq_enter_critical+0x30>)
   83e70:	6813      	ldr	r3, [r2, #0]
   83e72:	3301      	adds	r3, #1
   83e74:	6013      	str	r3, [r2, #0]
   83e76:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   83e78:	b672      	cpsid	i
   83e7a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   83e7e:	2200      	movs	r2, #0
   83e80:	4b04      	ldr	r3, [pc, #16]	; (83e94 <cpu_irq_enter_critical+0x38>)
   83e82:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   83e84:	2201      	movs	r2, #1
   83e86:	4b02      	ldr	r3, [pc, #8]	; (83e90 <cpu_irq_enter_critical+0x34>)
   83e88:	701a      	strb	r2, [r3, #0]
   83e8a:	e7f0      	b.n	83e6e <cpu_irq_enter_critical+0x12>
   83e8c:	20002390 	.word	0x20002390
   83e90:	20002394 	.word	0x20002394
   83e94:	20000a7c 	.word	0x20000a7c

00083e98 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   83e98:	4b07      	ldr	r3, [pc, #28]	; (83eb8 <cpu_irq_leave_critical+0x20>)
   83e9a:	681a      	ldr	r2, [r3, #0]
   83e9c:	3a01      	subs	r2, #1
   83e9e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   83ea0:	681b      	ldr	r3, [r3, #0]
   83ea2:	b943      	cbnz	r3, 83eb6 <cpu_irq_leave_critical+0x1e>
   83ea4:	4b05      	ldr	r3, [pc, #20]	; (83ebc <cpu_irq_leave_critical+0x24>)
   83ea6:	781b      	ldrb	r3, [r3, #0]
   83ea8:	b12b      	cbz	r3, 83eb6 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   83eaa:	2201      	movs	r2, #1
   83eac:	4b04      	ldr	r3, [pc, #16]	; (83ec0 <cpu_irq_leave_critical+0x28>)
   83eae:	701a      	strb	r2, [r3, #0]
   83eb0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83eb4:	b662      	cpsie	i
   83eb6:	4770      	bx	lr
   83eb8:	20002390 	.word	0x20002390
   83ebc:	20002394 	.word	0x20002394
   83ec0:	20000a7c 	.word	0x20000a7c

00083ec4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   83ec8:	b980      	cbnz	r0, 83eec <_read+0x28>
   83eca:	460c      	mov	r4, r1
   83ecc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   83ece:	2a00      	cmp	r2, #0
   83ed0:	dd0f      	ble.n	83ef2 <_read+0x2e>
   83ed2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83ed4:	4e08      	ldr	r6, [pc, #32]	; (83ef8 <_read+0x34>)
   83ed6:	4d09      	ldr	r5, [pc, #36]	; (83efc <_read+0x38>)
   83ed8:	6830      	ldr	r0, [r6, #0]
   83eda:	4621      	mov	r1, r4
   83edc:	682b      	ldr	r3, [r5, #0]
   83ede:	4798      	blx	r3
		ptr++;
   83ee0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83ee2:	42bc      	cmp	r4, r7
   83ee4:	d1f8      	bne.n	83ed8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83ee6:	4640      	mov	r0, r8
   83ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83eec:	f04f 38ff 	mov.w	r8, #4294967295
   83ef0:	e7f9      	b.n	83ee6 <_read+0x22>
	for (; len > 0; --len) {
   83ef2:	4680      	mov	r8, r0
   83ef4:	e7f7      	b.n	83ee6 <_read+0x22>
   83ef6:	bf00      	nop
   83ef8:	200029a4 	.word	0x200029a4
   83efc:	2000299c 	.word	0x2000299c

00083f00 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83f00:	3801      	subs	r0, #1
   83f02:	2802      	cmp	r0, #2
   83f04:	d815      	bhi.n	83f32 <_write+0x32>
{
   83f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f0a:	460e      	mov	r6, r1
   83f0c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   83f0e:	b19a      	cbz	r2, 83f38 <_write+0x38>
   83f10:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83f12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 83f4c <_write+0x4c>
   83f16:	4f0c      	ldr	r7, [pc, #48]	; (83f48 <_write+0x48>)
   83f18:	f8d8 0000 	ldr.w	r0, [r8]
   83f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   83f20:	683b      	ldr	r3, [r7, #0]
   83f22:	4798      	blx	r3
   83f24:	2800      	cmp	r0, #0
   83f26:	db0a      	blt.n	83f3e <_write+0x3e>
   83f28:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   83f2a:	3c01      	subs	r4, #1
   83f2c:	d1f4      	bne.n	83f18 <_write+0x18>
   83f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83f32:	f04f 30ff 	mov.w	r0, #4294967295
   83f36:	4770      	bx	lr
	for (; len != 0; --len) {
   83f38:	4610      	mov	r0, r2
   83f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   83f3e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   83f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f46:	bf00      	nop
   83f48:	200029a0 	.word	0x200029a0
   83f4c:	200029a4 	.word	0x200029a4

00083f50 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   83f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83f52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83f56:	2006      	movs	r0, #6
   83f58:	4c17      	ldr	r4, [pc, #92]	; (83fb8 <iopins_normal+0x68>)
   83f5a:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83f5c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83f60:	2007      	movs	r0, #7
   83f62:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   83f64:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83f68:	201d      	movs	r0, #29
   83f6a:	47a0      	blx	r4
	board_power(0);
   83f6c:	201d      	movs	r0, #29
   83f6e:	4b13      	ldr	r3, [pc, #76]	; (83fbc <iopins_normal+0x6c>)
   83f70:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   83f72:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83f76:	2008      	movs	r0, #8
   83f78:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   83f7a:	2008      	movs	r0, #8
   83f7c:	4e10      	ldr	r6, [pc, #64]	; (83fc0 <iopins_normal+0x70>)
   83f7e:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   83f80:	4f10      	ldr	r7, [pc, #64]	; (83fc4 <iopins_normal+0x74>)
   83f82:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   83f86:	21ff      	movs	r1, #255	; 0xff
   83f88:	4638      	mov	r0, r7
   83f8a:	4d0f      	ldr	r5, [pc, #60]	; (83fc8 <iopins_normal+0x78>)
   83f8c:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   83f8e:	21ff      	movs	r1, #255	; 0xff
   83f90:	4638      	mov	r0, r7
   83f92:	4b0e      	ldr	r3, [pc, #56]	; (83fcc <iopins_normal+0x7c>)
   83f94:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   83f96:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83f9a:	2035      	movs	r0, #53	; 0x35
   83f9c:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   83f9e:	2035      	movs	r0, #53	; 0x35
   83fa0:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83fa6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   83faa:	4809      	ldr	r0, [pc, #36]	; (83fd0 <iopins_normal+0x80>)
   83fac:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   83fae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83fb2:	201b      	movs	r0, #27
   83fb4:	47a0      	blx	r4
   83fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83fb8:	00084171 	.word	0x00084171
   83fbc:	00084155 	.word	0x00084155
   83fc0:	0008413b 	.word	0x0008413b
   83fc4:	400e0e00 	.word	0x400e0e00
   83fc8:	00084241 	.word	0x00084241
   83fcc:	0008410d 	.word	0x0008410d
   83fd0:	400e0c00 	.word	0x400e0c00

00083fd4 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   83fd4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83fd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83fda:	4b05      	ldr	r3, [pc, #20]	; (83ff0 <board_init+0x1c>)
   83fdc:	605a      	str	r2, [r3, #4]
   83fde:	200a      	movs	r0, #10
   83fe0:	4c04      	ldr	r4, [pc, #16]	; (83ff4 <board_init+0x20>)
   83fe2:	47a0      	blx	r4
   83fe4:	200b      	movs	r0, #11
   83fe6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83fe8:	4b03      	ldr	r3, [pc, #12]	; (83ff8 <board_init+0x24>)
   83fea:	4798      	blx	r3
   83fec:	bd10      	pop	{r4, pc}
   83fee:	bf00      	nop
   83ff0:	400e1250 	.word	0x400e1250
   83ff4:	000844b5 	.word	0x000844b5
   83ff8:	00083f51 	.word	0x00083f51

00083ffc <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83ffc:	b510      	push	{r4, lr}
   83ffe:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84000:	2806      	cmp	r0, #6
   84002:	d002      	beq.n	8400a <LED_Off+0xe>
   84004:	2c07      	cmp	r4, #7
   84006:	d004      	beq.n	84012 <LED_Off+0x16>
   84008:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   8400a:	2006      	movs	r0, #6
   8400c:	4b03      	ldr	r3, [pc, #12]	; (8401c <LED_Off+0x20>)
   8400e:	4798      	blx	r3
   84010:	e7f8      	b.n	84004 <LED_Off+0x8>
   84012:	2007      	movs	r0, #7
   84014:	4b01      	ldr	r3, [pc, #4]	; (8401c <LED_Off+0x20>)
   84016:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   84018:	e7f6      	b.n	84008 <LED_Off+0xc>
   8401a:	bf00      	nop
   8401c:	00084155 	.word	0x00084155

00084020 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84020:	b510      	push	{r4, lr}
   84022:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84024:	2806      	cmp	r0, #6
   84026:	d002      	beq.n	8402e <LED_On+0xe>
   84028:	2c07      	cmp	r4, #7
   8402a:	d004      	beq.n	84036 <LED_On+0x16>
   8402c:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8402e:	2006      	movs	r0, #6
   84030:	4b03      	ldr	r3, [pc, #12]	; (84040 <LED_On+0x20>)
   84032:	4798      	blx	r3
   84034:	e7f8      	b.n	84028 <LED_On+0x8>
   84036:	2007      	movs	r0, #7
   84038:	4b01      	ldr	r3, [pc, #4]	; (84040 <LED_On+0x20>)
   8403a:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   8403c:	e7f6      	b.n	8402c <LED_On+0xc>
   8403e:	bf00      	nop
   84040:	0008413b 	.word	0x0008413b

00084044 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   84044:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84048:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8404c:	670a      	str	r2, [r1, #112]	; 0x70
   8404e:	4770      	bx	lr

00084050 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   84050:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84054:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84058:	674a      	str	r2, [r1, #116]	; 0x74
   8405a:	4770      	bx	lr

0008405c <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8405c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84060:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84064:	678a      	str	r2, [r1, #120]	; 0x78
   84066:	4770      	bx	lr

00084068 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   84068:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8406c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84070:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   84074:	4770      	bx	lr

00084076 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84076:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84078:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8407c:	d016      	beq.n	840ac <pio_set_peripheral+0x36>
   8407e:	d80b      	bhi.n	84098 <pio_set_peripheral+0x22>
   84080:	b149      	cbz	r1, 84096 <pio_set_peripheral+0x20>
   84082:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   84086:	d105      	bne.n	84094 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84088:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8408a:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8408c:	400b      	ands	r3, r1
   8408e:	ea23 0302 	bic.w	r3, r3, r2
   84092:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84094:	6042      	str	r2, [r0, #4]
   84096:	4770      	bx	lr
	switch (ul_type) {
   84098:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8409c:	d0fb      	beq.n	84096 <pio_set_peripheral+0x20>
   8409e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   840a2:	d0f8      	beq.n	84096 <pio_set_peripheral+0x20>
   840a4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   840a8:	d1f4      	bne.n	84094 <pio_set_peripheral+0x1e>
   840aa:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   840ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   840ae:	4313      	orrs	r3, r2
   840b0:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   840b2:	e7ef      	b.n	84094 <pio_set_peripheral+0x1e>

000840b4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   840b4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   840b6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   840ba:	bf14      	ite	ne
   840bc:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   840be:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   840c0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   840c4:	bf14      	ite	ne
   840c6:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   840c8:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   840ca:	f012 0f02 	tst.w	r2, #2
   840ce:	d107      	bne.n	840e0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   840d0:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   840d4:	bf18      	it	ne
   840d6:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   840da:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   840dc:	6001      	str	r1, [r0, #0]
   840de:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   840e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   840e4:	e7f9      	b.n	840da <pio_set_input+0x26>

000840e6 <pio_set_output>:
{
   840e6:	b410      	push	{r4}
   840e8:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   840ea:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   840ec:	b944      	cbnz	r4, 84100 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   840ee:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   840f0:	b143      	cbz	r3, 84104 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   840f2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   840f4:	b942      	cbnz	r2, 84108 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   840f6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   840f8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   840fa:	6001      	str	r1, [r0, #0]
}
   840fc:	bc10      	pop	{r4}
   840fe:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   84100:	6641      	str	r1, [r0, #100]	; 0x64
   84102:	e7f5      	b.n	840f0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   84104:	6541      	str	r1, [r0, #84]	; 0x54
   84106:	e7f5      	b.n	840f4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   84108:	6301      	str	r1, [r0, #48]	; 0x30
   8410a:	e7f5      	b.n	840f8 <pio_set_output+0x12>

0008410c <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   8410c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   84110:	4770      	bx	lr

00084112 <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   84112:	6381      	str	r1, [r0, #56]	; 0x38
   84114:	4770      	bx	lr

00084116 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84116:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84118:	4770      	bx	lr

0008411a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8411a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8411c:	4770      	bx	lr

0008411e <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8411e:	0943      	lsrs	r3, r0, #5
   84120:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84124:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84128:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8412c:	f000 001f 	and.w	r0, r0, #31
   84130:	fa23 f000 	lsr.w	r0, r3, r0
}
   84134:	f000 0001 	and.w	r0, r0, #1
   84138:	4770      	bx	lr

0008413a <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8413a:	0943      	lsrs	r3, r0, #5
   8413c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84140:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84144:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84146:	f000 001f 	and.w	r0, r0, #31
   8414a:	2201      	movs	r2, #1
   8414c:	fa02 f000 	lsl.w	r0, r2, r0
   84150:	6318      	str	r0, [r3, #48]	; 0x30
   84152:	4770      	bx	lr

00084154 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84154:	0943      	lsrs	r3, r0, #5
   84156:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8415a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8415e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84160:	f000 001f 	and.w	r0, r0, #31
   84164:	2201      	movs	r2, #1
   84166:	fa02 f000 	lsl.w	r0, r2, r0
   8416a:	6358      	str	r0, [r3, #52]	; 0x34
   8416c:	4770      	bx	lr
	...

00084170 <pio_configure_pin>:
{
   84170:	b570      	push	{r4, r5, r6, lr}
   84172:	b082      	sub	sp, #8
   84174:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84176:	0943      	lsrs	r3, r0, #5
   84178:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8417c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84180:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   84182:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   84186:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8418a:	d031      	beq.n	841f0 <pio_configure_pin+0x80>
   8418c:	d816      	bhi.n	841bc <pio_configure_pin+0x4c>
   8418e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84192:	d01b      	beq.n	841cc <pio_configure_pin+0x5c>
   84194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84198:	d116      	bne.n	841c8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8419a:	f000 001f 	and.w	r0, r0, #31
   8419e:	2601      	movs	r6, #1
   841a0:	4086      	lsls	r6, r0
   841a2:	4632      	mov	r2, r6
   841a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   841a8:	4620      	mov	r0, r4
   841aa:	4b22      	ldr	r3, [pc, #136]	; (84234 <pio_configure_pin+0xc4>)
   841ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
   841ae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   841b2:	bf14      	ite	ne
   841b4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   841b6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   841b8:	2001      	movs	r0, #1
   841ba:	e017      	b.n	841ec <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   841bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   841c0:	d021      	beq.n	84206 <pio_configure_pin+0x96>
   841c2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   841c6:	d01e      	beq.n	84206 <pio_configure_pin+0x96>
		return 0;
   841c8:	2000      	movs	r0, #0
   841ca:	e00f      	b.n	841ec <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   841cc:	f000 001f 	and.w	r0, r0, #31
   841d0:	2601      	movs	r6, #1
   841d2:	4086      	lsls	r6, r0
   841d4:	4632      	mov	r2, r6
   841d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   841da:	4620      	mov	r0, r4
   841dc:	4b15      	ldr	r3, [pc, #84]	; (84234 <pio_configure_pin+0xc4>)
   841de:	4798      	blx	r3
	if (ul_pull_up_enable) {
   841e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   841e4:	bf14      	ite	ne
   841e6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   841e8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   841ea:	2001      	movs	r0, #1
}
   841ec:	b002      	add	sp, #8
   841ee:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   841f0:	f000 011f 	and.w	r1, r0, #31
   841f4:	2601      	movs	r6, #1
   841f6:	462a      	mov	r2, r5
   841f8:	fa06 f101 	lsl.w	r1, r6, r1
   841fc:	4620      	mov	r0, r4
   841fe:	4b0e      	ldr	r3, [pc, #56]	; (84238 <pio_configure_pin+0xc8>)
   84200:	4798      	blx	r3
	return 1;
   84202:	4630      	mov	r0, r6
		break;
   84204:	e7f2      	b.n	841ec <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84206:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8420a:	f000 011f 	and.w	r1, r0, #31
   8420e:	2601      	movs	r6, #1
   84210:	ea05 0306 	and.w	r3, r5, r6
   84214:	9300      	str	r3, [sp, #0]
   84216:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8421a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8421e:	bf14      	ite	ne
   84220:	2200      	movne	r2, #0
   84222:	2201      	moveq	r2, #1
   84224:	fa06 f101 	lsl.w	r1, r6, r1
   84228:	4620      	mov	r0, r4
   8422a:	4c04      	ldr	r4, [pc, #16]	; (8423c <pio_configure_pin+0xcc>)
   8422c:	47a0      	blx	r4
	return 1;
   8422e:	4630      	mov	r0, r6
		break;
   84230:	e7dc      	b.n	841ec <pio_configure_pin+0x7c>
   84232:	bf00      	nop
   84234:	00084077 	.word	0x00084077
   84238:	000840b5 	.word	0x000840b5
   8423c:	000840e7 	.word	0x000840e7

00084240 <pio_configure_pin_group>:
{
   84240:	b570      	push	{r4, r5, r6, lr}
   84242:	b082      	sub	sp, #8
   84244:	4605      	mov	r5, r0
   84246:	460e      	mov	r6, r1
   84248:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8424a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8424e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84252:	d027      	beq.n	842a4 <pio_configure_pin_group+0x64>
   84254:	d811      	bhi.n	8427a <pio_configure_pin_group+0x3a>
   84256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8425a:	d016      	beq.n	8428a <pio_configure_pin_group+0x4a>
   8425c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84260:	d111      	bne.n	84286 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84262:	460a      	mov	r2, r1
   84264:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84268:	4b19      	ldr	r3, [pc, #100]	; (842d0 <pio_configure_pin_group+0x90>)
   8426a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8426c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   84270:	bf14      	ite	ne
   84272:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84274:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   84276:	2001      	movs	r0, #1
   84278:	e012      	b.n	842a0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8427a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8427e:	d015      	beq.n	842ac <pio_configure_pin_group+0x6c>
   84280:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84284:	d012      	beq.n	842ac <pio_configure_pin_group+0x6c>
		return 0;
   84286:	2000      	movs	r0, #0
   84288:	e00a      	b.n	842a0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8428a:	460a      	mov	r2, r1
   8428c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84290:	4b0f      	ldr	r3, [pc, #60]	; (842d0 <pio_configure_pin_group+0x90>)
   84292:	4798      	blx	r3
	if (ul_pull_up_enable) {
   84294:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   84298:	bf14      	ite	ne
   8429a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8429c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8429e:	2001      	movs	r0, #1
}
   842a0:	b002      	add	sp, #8
   842a2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   842a4:	4b0b      	ldr	r3, [pc, #44]	; (842d4 <pio_configure_pin_group+0x94>)
   842a6:	4798      	blx	r3
	return 1;
   842a8:	2001      	movs	r0, #1
		break;
   842aa:	e7f9      	b.n	842a0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   842ac:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   842b0:	f004 0301 	and.w	r3, r4, #1
   842b4:	9300      	str	r3, [sp, #0]
   842b6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   842ba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   842be:	bf14      	ite	ne
   842c0:	2200      	movne	r2, #0
   842c2:	2201      	moveq	r2, #1
   842c4:	4631      	mov	r1, r6
   842c6:	4628      	mov	r0, r5
   842c8:	4c03      	ldr	r4, [pc, #12]	; (842d8 <pio_configure_pin_group+0x98>)
   842ca:	47a0      	blx	r4
	return 1;
   842cc:	2001      	movs	r0, #1
		break;
   842ce:	e7e7      	b.n	842a0 <pio_configure_pin_group+0x60>
   842d0:	00084077 	.word	0x00084077
   842d4:	000840b5 	.word	0x000840b5
   842d8:	000840e7 	.word	0x000840e7

000842dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   842dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   842e0:	4604      	mov	r4, r0
   842e2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   842e4:	4b0e      	ldr	r3, [pc, #56]	; (84320 <pio_handler_process+0x44>)
   842e6:	4798      	blx	r3
   842e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   842ea:	4620      	mov	r0, r4
   842ec:	4b0d      	ldr	r3, [pc, #52]	; (84324 <pio_handler_process+0x48>)
   842ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   842f0:	4005      	ands	r5, r0
   842f2:	d013      	beq.n	8431c <pio_handler_process+0x40>
   842f4:	4c0c      	ldr	r4, [pc, #48]	; (84328 <pio_handler_process+0x4c>)
   842f6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   842fa:	e003      	b.n	84304 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   842fc:	42b4      	cmp	r4, r6
   842fe:	d00d      	beq.n	8431c <pio_handler_process+0x40>
   84300:	3410      	adds	r4, #16
		while (status != 0) {
   84302:	b15d      	cbz	r5, 8431c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   84304:	6820      	ldr	r0, [r4, #0]
   84306:	4540      	cmp	r0, r8
   84308:	d1f8      	bne.n	842fc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8430a:	6861      	ldr	r1, [r4, #4]
   8430c:	4229      	tst	r1, r5
   8430e:	d0f5      	beq.n	842fc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   84310:	68e3      	ldr	r3, [r4, #12]
   84312:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   84314:	6863      	ldr	r3, [r4, #4]
   84316:	ea25 0503 	bic.w	r5, r5, r3
   8431a:	e7ef      	b.n	842fc <pio_handler_process+0x20>
   8431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84320:	00084117 	.word	0x00084117
   84324:	0008411b 	.word	0x0008411b
   84328:	20002398 	.word	0x20002398

0008432c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8432c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8432e:	210a      	movs	r1, #10
   84330:	4801      	ldr	r0, [pc, #4]	; (84338 <PIOA_Handler+0xc>)
   84332:	4b02      	ldr	r3, [pc, #8]	; (8433c <PIOA_Handler+0x10>)
   84334:	4798      	blx	r3
   84336:	bd08      	pop	{r3, pc}
   84338:	400e0c00 	.word	0x400e0c00
   8433c:	000842dd 	.word	0x000842dd

00084340 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   84340:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   84342:	210b      	movs	r1, #11
   84344:	4801      	ldr	r0, [pc, #4]	; (8434c <PIOB_Handler+0xc>)
   84346:	4b02      	ldr	r3, [pc, #8]	; (84350 <PIOB_Handler+0x10>)
   84348:	4798      	blx	r3
   8434a:	bd08      	pop	{r3, pc}
   8434c:	400e0e00 	.word	0x400e0e00
   84350:	000842dd 	.word	0x000842dd

00084354 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84354:	4a17      	ldr	r2, [pc, #92]	; (843b4 <pmc_switch_mck_to_mainck+0x60>)
   84356:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84358:	f023 0303 	bic.w	r3, r3, #3
   8435c:	f043 0301 	orr.w	r3, r3, #1
   84360:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84362:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84364:	f013 0f08 	tst.w	r3, #8
   84368:	d10a      	bne.n	84380 <pmc_switch_mck_to_mainck+0x2c>
   8436a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8436e:	4911      	ldr	r1, [pc, #68]	; (843b4 <pmc_switch_mck_to_mainck+0x60>)
   84370:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84372:	f012 0f08 	tst.w	r2, #8
   84376:	d103      	bne.n	84380 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84378:	3b01      	subs	r3, #1
   8437a:	d1f9      	bne.n	84370 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   8437c:	2001      	movs	r0, #1
   8437e:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84380:	4a0c      	ldr	r2, [pc, #48]	; (843b4 <pmc_switch_mck_to_mainck+0x60>)
   84382:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84388:	4318      	orrs	r0, r3
   8438a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8438c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8438e:	f013 0f08 	tst.w	r3, #8
   84392:	d10a      	bne.n	843aa <pmc_switch_mck_to_mainck+0x56>
   84394:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84398:	4906      	ldr	r1, [pc, #24]	; (843b4 <pmc_switch_mck_to_mainck+0x60>)
   8439a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8439c:	f012 0f08 	tst.w	r2, #8
   843a0:	d105      	bne.n	843ae <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   843a2:	3b01      	subs	r3, #1
   843a4:	d1f9      	bne.n	8439a <pmc_switch_mck_to_mainck+0x46>
			return 1;
   843a6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   843a8:	4770      	bx	lr
	return 0;
   843aa:	2000      	movs	r0, #0
   843ac:	4770      	bx	lr
   843ae:	2000      	movs	r0, #0
   843b0:	4770      	bx	lr
   843b2:	bf00      	nop
   843b4:	400e0400 	.word	0x400e0400

000843b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   843b8:	4a17      	ldr	r2, [pc, #92]	; (84418 <pmc_switch_mck_to_pllack+0x60>)
   843ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   843bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   843c0:	4318      	orrs	r0, r3
   843c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   843c6:	f013 0f08 	tst.w	r3, #8
   843ca:	d10a      	bne.n	843e2 <pmc_switch_mck_to_pllack+0x2a>
   843cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   843d0:	4911      	ldr	r1, [pc, #68]	; (84418 <pmc_switch_mck_to_pllack+0x60>)
   843d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   843d4:	f012 0f08 	tst.w	r2, #8
   843d8:	d103      	bne.n	843e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   843da:	3b01      	subs	r3, #1
   843dc:	d1f9      	bne.n	843d2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   843de:	2001      	movs	r0, #1
   843e0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   843e2:	4a0d      	ldr	r2, [pc, #52]	; (84418 <pmc_switch_mck_to_pllack+0x60>)
   843e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   843e6:	f023 0303 	bic.w	r3, r3, #3
   843ea:	f043 0302 	orr.w	r3, r3, #2
   843ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   843f2:	f013 0f08 	tst.w	r3, #8
   843f6:	d10a      	bne.n	8440e <pmc_switch_mck_to_pllack+0x56>
   843f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   843fc:	4906      	ldr	r1, [pc, #24]	; (84418 <pmc_switch_mck_to_pllack+0x60>)
   843fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84400:	f012 0f08 	tst.w	r2, #8
   84404:	d105      	bne.n	84412 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84406:	3b01      	subs	r3, #1
   84408:	d1f9      	bne.n	843fe <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8440a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8440c:	4770      	bx	lr
	return 0;
   8440e:	2000      	movs	r0, #0
   84410:	4770      	bx	lr
   84412:	2000      	movs	r0, #0
   84414:	4770      	bx	lr
   84416:	bf00      	nop
   84418:	400e0400 	.word	0x400e0400

0008441c <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   8441c:	4a08      	ldr	r2, [pc, #32]	; (84440 <pmc_osc_enable_main_xtal+0x24>)
   8441e:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84420:	f023 0303 	bic.w	r3, r3, #3
   84424:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84428:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8442c:	0200      	lsls	r0, r0, #8
   8442e:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84430:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   84432:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84434:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84436:	f013 0f01 	tst.w	r3, #1
   8443a:	d0fb      	beq.n	84434 <pmc_osc_enable_main_xtal+0x18>
}
   8443c:	4770      	bx	lr
   8443e:	bf00      	nop
   84440:	400e0400 	.word	0x400e0400

00084444 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84444:	4b02      	ldr	r3, [pc, #8]	; (84450 <pmc_osc_is_ready_main_xtal+0xc>)
   84446:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84448:	f000 0001 	and.w	r0, r0, #1
   8444c:	4770      	bx	lr
   8444e:	bf00      	nop
   84450:	400e0400 	.word	0x400e0400

00084454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84454:	4b02      	ldr	r3, [pc, #8]	; (84460 <pmc_osc_is_ready_mainck+0xc>)
   84456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8445c:	4770      	bx	lr
   8445e:	bf00      	nop
   84460:	400e0400 	.word	0x400e0400

00084464 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84464:	4b06      	ldr	r3, [pc, #24]	; (84480 <pmc_mainck_osc_select+0x1c>)
   84466:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84468:	b930      	cbnz	r0, 84478 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8446a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8446e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84472:	4a03      	ldr	r2, [pc, #12]	; (84480 <pmc_mainck_osc_select+0x1c>)
   84474:	6213      	str	r3, [r2, #32]
   84476:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   84478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8447c:	e7f7      	b.n	8446e <pmc_mainck_osc_select+0xa>
   8447e:	bf00      	nop
   84480:	400e0400 	.word	0x400e0400

00084484 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84484:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84488:	4b01      	ldr	r3, [pc, #4]	; (84490 <pmc_disable_pllack+0xc>)
   8448a:	629a      	str	r2, [r3, #40]	; 0x28
   8448c:	4770      	bx	lr
   8448e:	bf00      	nop
   84490:	400e0400 	.word	0x400e0400

00084494 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84494:	4b02      	ldr	r3, [pc, #8]	; (844a0 <pmc_is_locked_pllack+0xc>)
   84496:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84498:	f000 0002 	and.w	r0, r0, #2
   8449c:	4770      	bx	lr
   8449e:	bf00      	nop
   844a0:	400e0400 	.word	0x400e0400

000844a4 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   844a4:	4b02      	ldr	r3, [pc, #8]	; (844b0 <pmc_is_locked_upll+0xc>)
   844a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   844a8:	f000 0040 	and.w	r0, r0, #64	; 0x40
   844ac:	4770      	bx	lr
   844ae:	bf00      	nop
   844b0:	400e0400 	.word	0x400e0400

000844b4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   844b4:	281d      	cmp	r0, #29
   844b6:	d80e      	bhi.n	844d6 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   844b8:	281f      	cmp	r0, #31
   844ba:	d80e      	bhi.n	844da <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   844bc:	4b09      	ldr	r3, [pc, #36]	; (844e4 <pmc_enable_periph_clk+0x30>)
   844be:	699a      	ldr	r2, [r3, #24]
   844c0:	2301      	movs	r3, #1
   844c2:	4083      	lsls	r3, r0
   844c4:	4393      	bics	r3, r2
   844c6:	d00a      	beq.n	844de <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   844c8:	2301      	movs	r3, #1
   844ca:	fa03 f000 	lsl.w	r0, r3, r0
   844ce:	4b05      	ldr	r3, [pc, #20]	; (844e4 <pmc_enable_periph_clk+0x30>)
   844d0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   844d2:	2000      	movs	r0, #0
   844d4:	4770      	bx	lr
		return 1;
   844d6:	2001      	movs	r0, #1
   844d8:	4770      	bx	lr
	return 0;
   844da:	2000      	movs	r0, #0
   844dc:	4770      	bx	lr
   844de:	2000      	movs	r0, #0
}
   844e0:	4770      	bx	lr
   844e2:	bf00      	nop
   844e4:	400e0400 	.word	0x400e0400

000844e8 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   844e8:	281d      	cmp	r0, #29
   844ea:	d810      	bhi.n	8450e <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   844ec:	281f      	cmp	r0, #31
   844ee:	d810      	bhi.n	84512 <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   844f0:	4b09      	ldr	r3, [pc, #36]	; (84518 <pmc_disable_periph_clk+0x30>)
   844f2:	699a      	ldr	r2, [r3, #24]
   844f4:	2301      	movs	r3, #1
   844f6:	4083      	lsls	r3, r0
   844f8:	4393      	bics	r3, r2
   844fa:	d001      	beq.n	84500 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   844fc:	2000      	movs	r0, #0
}
   844fe:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   84500:	2301      	movs	r3, #1
   84502:	fa03 f000 	lsl.w	r0, r3, r0
   84506:	4b04      	ldr	r3, [pc, #16]	; (84518 <pmc_disable_periph_clk+0x30>)
   84508:	6158      	str	r0, [r3, #20]
	return 0;
   8450a:	2000      	movs	r0, #0
   8450c:	4770      	bx	lr
		return 1;
   8450e:	2001      	movs	r0, #1
   84510:	4770      	bx	lr
	return 0;
   84512:	2000      	movs	r0, #0
   84514:	4770      	bx	lr
   84516:	bf00      	nop
   84518:	400e0400 	.word	0x400e0400

0008451c <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8451c:	f44f 7380 	mov.w	r3, #256	; 0x100
   84520:	fa03 f000 	lsl.w	r0, r3, r0
   84524:	4b01      	ldr	r3, [pc, #4]	; (8452c <pmc_enable_pck+0x10>)
   84526:	6018      	str	r0, [r3, #0]
   84528:	4770      	bx	lr
   8452a:	bf00      	nop
   8452c:	400e0400 	.word	0x400e0400

00084530 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   84530:	4b03      	ldr	r3, [pc, #12]	; (84540 <pmc_set_fast_startup_input+0x10>)
   84532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84534:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84538:	4310      	orrs	r0, r2
   8453a:	6718      	str	r0, [r3, #112]	; 0x70
   8453c:	4770      	bx	lr
   8453e:	bf00      	nop
   84540:	400e0400 	.word	0x400e0400

00084544 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84544:	4b02      	ldr	r3, [pc, #8]	; (84550 <pmc_is_wakeup_clocks_restored+0xc>)
   84546:	7818      	ldrb	r0, [r3, #0]
}
   84548:	f080 0001 	eor.w	r0, r0, #1
   8454c:	4770      	bx	lr
   8454e:	bf00      	nop
   84550:	20002408 	.word	0x20002408

00084554 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   84554:	b508      	push	{r3, lr}
   84556:	2014      	movs	r0, #20
   84558:	4b01      	ldr	r3, [pc, #4]	; (84560 <spi_enable_clock+0xc>)
   8455a:	4798      	blx	r3
   8455c:	bd08      	pop	{r3, pc}
   8455e:	bf00      	nop
   84560:	000844b5 	.word	0x000844b5

00084564 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   84564:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   84566:	2014      	movs	r0, #20
   84568:	4b01      	ldr	r3, [pc, #4]	; (84570 <spi_disable_clock+0xc>)
   8456a:	4798      	blx	r3
   8456c:	bd08      	pop	{r3, pc}
   8456e:	bf00      	nop
   84570:	000844e9 	.word	0x000844e9

00084574 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   84574:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   84576:	f643 2399 	movw	r3, #15001	; 0x3a99
   8457a:	6904      	ldr	r4, [r0, #16]
   8457c:	f014 0f01 	tst.w	r4, #1
   84580:	d103      	bne.n	8458a <spi_read+0x16>
		if (!timeout--) {
   84582:	3b01      	subs	r3, #1
   84584:	d1f9      	bne.n	8457a <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   84586:	2001      	movs	r0, #1
   84588:	e009      	b.n	8459e <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   8458a:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   8458c:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   8458e:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   84592:	bf1c      	itt	ne
   84594:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   84598:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   8459a:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   8459c:	2000      	movs	r0, #0
}
   8459e:	bc10      	pop	{r4}
   845a0:	4770      	bx	lr

000845a2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   845a2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   845a4:	f643 2499 	movw	r4, #15001	; 0x3a99
   845a8:	6905      	ldr	r5, [r0, #16]
   845aa:	f015 0f02 	tst.w	r5, #2
   845ae:	d103      	bne.n	845b8 <spi_write+0x16>
		if (!timeout--) {
   845b0:	3c01      	subs	r4, #1
   845b2:	d1f9      	bne.n	845a8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   845b4:	2001      	movs	r0, #1
   845b6:	e00c      	b.n	845d2 <spi_write+0x30>
   845b8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   845ba:	f014 0f02 	tst.w	r4, #2
   845be:	d006      	beq.n	845ce <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   845c0:	0412      	lsls	r2, r2, #16
   845c2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   845c6:	4311      	orrs	r1, r2
		if (uc_last) {
   845c8:	b10b      	cbz	r3, 845ce <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   845ca:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   845ce:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   845d0:	2000      	movs	r0, #0
}
   845d2:	bc30      	pop	{r4, r5}
   845d4:	4770      	bx	lr

000845d6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   845d6:	b932      	cbnz	r2, 845e6 <spi_set_clock_polarity+0x10>
   845d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   845dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   845de:	f023 0301 	bic.w	r3, r3, #1
   845e2:	6303      	str	r3, [r0, #48]	; 0x30
   845e4:	4770      	bx	lr
   845e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   845ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
   845ec:	f043 0301 	orr.w	r3, r3, #1
   845f0:	6303      	str	r3, [r0, #48]	; 0x30
   845f2:	4770      	bx	lr

000845f4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   845f4:	b932      	cbnz	r2, 84604 <spi_set_clock_phase+0x10>
   845f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   845fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
   845fc:	f023 0302 	bic.w	r3, r3, #2
   84600:	6303      	str	r3, [r0, #48]	; 0x30
   84602:	4770      	bx	lr
   84604:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84608:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8460a:	f043 0302 	orr.w	r3, r3, #2
   8460e:	6303      	str	r3, [r0, #48]	; 0x30
   84610:	4770      	bx	lr

00084612 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   84612:	1e43      	subs	r3, r0, #1
   84614:	4419      	add	r1, r3
   84616:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8461a:	1e43      	subs	r3, r0, #1
   8461c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8461e:	bf94      	ite	ls
   84620:	b200      	sxthls	r0, r0
		return -1;
   84622:	f04f 30ff 	movhi.w	r0, #4294967295
}
   84626:	4770      	bx	lr

00084628 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   84628:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8462c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   84632:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84634:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84636:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   8463a:	630a      	str	r2, [r1, #48]	; 0x30
   8463c:	4770      	bx	lr
	...

00084640 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   84640:	4603      	mov	r3, r0
   84642:	b9a8      	cbnz	r0, 84670 <udd_sleep_mode+0x30>
   84644:	4a17      	ldr	r2, [pc, #92]	; (846a4 <udd_sleep_mode+0x64>)
   84646:	7812      	ldrb	r2, [r2, #0]
   84648:	b342      	cbz	r2, 8469c <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8464a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8464e:	b672      	cpsid	i
   84650:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84654:	4914      	ldr	r1, [pc, #80]	; (846a8 <udd_sleep_mode+0x68>)
   84656:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84658:	4814      	ldr	r0, [pc, #80]	; (846ac <udd_sleep_mode+0x6c>)
   8465a:	7881      	ldrb	r1, [r0, #2]
   8465c:	3901      	subs	r1, #1
   8465e:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84660:	b9e2      	cbnz	r2, 8469c <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84662:	2101      	movs	r1, #1
   84664:	4a10      	ldr	r2, [pc, #64]	; (846a8 <udd_sleep_mode+0x68>)
   84666:	7011      	strb	r1, [r2, #0]
   84668:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8466c:	b662      	cpsie	i
   8466e:	e015      	b.n	8469c <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   84670:	4a0c      	ldr	r2, [pc, #48]	; (846a4 <udd_sleep_mode+0x64>)
   84672:	7812      	ldrb	r2, [r2, #0]
   84674:	b992      	cbnz	r2, 8469c <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84676:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   8467a:	b672      	cpsid	i
   8467c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84680:	2000      	movs	r0, #0
   84682:	4909      	ldr	r1, [pc, #36]	; (846a8 <udd_sleep_mode+0x68>)
   84684:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   84686:	4809      	ldr	r0, [pc, #36]	; (846ac <udd_sleep_mode+0x6c>)
   84688:	7881      	ldrb	r1, [r0, #2]
   8468a:	3101      	adds	r1, #1
   8468c:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8468e:	b92a      	cbnz	r2, 8469c <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84690:	2101      	movs	r1, #1
   84692:	4a05      	ldr	r2, [pc, #20]	; (846a8 <udd_sleep_mode+0x68>)
   84694:	7011      	strb	r1, [r2, #0]
   84696:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8469a:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8469c:	4a01      	ldr	r2, [pc, #4]	; (846a4 <udd_sleep_mode+0x64>)
   8469e:	7013      	strb	r3, [r2, #0]
}
   846a0:	4770      	bx	lr
   846a2:	bf00      	nop
   846a4:	2000240a 	.word	0x2000240a
   846a8:	20000a7c 	.word	0x20000a7c
   846ac:	20002994 	.word	0x20002994

000846b0 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   846b0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   846b4:	b672      	cpsid	i
   846b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   846ba:	2100      	movs	r1, #0
   846bc:	4a0d      	ldr	r2, [pc, #52]	; (846f4 <udd_ctrl_init+0x44>)
   846be:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   846c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   846c4:	4a0c      	ldr	r2, [pc, #48]	; (846f8 <udd_ctrl_init+0x48>)
   846c6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   846ca:	b92b      	cbnz	r3, 846d8 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   846cc:	2201      	movs	r2, #1
   846ce:	4b09      	ldr	r3, [pc, #36]	; (846f4 <udd_ctrl_init+0x44>)
   846d0:	701a      	strb	r2, [r3, #0]
   846d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   846d6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   846d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   846dc:	4b06      	ldr	r3, [pc, #24]	; (846f8 <udd_ctrl_init+0x48>)
   846de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   846e2:	4a06      	ldr	r2, [pc, #24]	; (846fc <udd_ctrl_init+0x4c>)
   846e4:	2300      	movs	r3, #0
   846e6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   846e8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   846ea:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   846ec:	4a04      	ldr	r2, [pc, #16]	; (84700 <udd_ctrl_init+0x50>)
   846ee:	7013      	strb	r3, [r2, #0]
   846f0:	4770      	bx	lr
   846f2:	bf00      	nop
   846f4:	20000a7c 	.word	0x20000a7c
   846f8:	400a4000 	.word	0x400a4000
   846fc:	200029a8 	.word	0x200029a8
   84700:	20002410 	.word	0x20002410

00084704 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84704:	2205      	movs	r2, #5
   84706:	4b03      	ldr	r3, [pc, #12]	; (84714 <udd_ctrl_stall_data+0x10>)
   84708:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8470a:	2220      	movs	r2, #32
   8470c:	4b02      	ldr	r3, [pc, #8]	; (84718 <udd_ctrl_stall_data+0x14>)
   8470e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84712:	4770      	bx	lr
   84714:	20002410 	.word	0x20002410
   84718:	400a4000 	.word	0x400a4000

0008471c <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8471c:	2203      	movs	r2, #3
   8471e:	4b11      	ldr	r3, [pc, #68]	; (84764 <udd_ctrl_send_zlp_in+0x48>)
   84720:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84722:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84726:	b672      	cpsid	i
   84728:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8472c:	2100      	movs	r1, #0
   8472e:	4b0e      	ldr	r3, [pc, #56]	; (84768 <udd_ctrl_send_zlp_in+0x4c>)
   84730:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84732:	4b0e      	ldr	r3, [pc, #56]	; (8476c <udd_ctrl_send_zlp_in+0x50>)
   84734:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84738:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8473c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84740:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84744:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8474c:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84750:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84754:	b92a      	cbnz	r2, 84762 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84756:	2201      	movs	r2, #1
   84758:	4b03      	ldr	r3, [pc, #12]	; (84768 <udd_ctrl_send_zlp_in+0x4c>)
   8475a:	701a      	strb	r2, [r3, #0]
   8475c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84760:	b662      	cpsie	i
   84762:	4770      	bx	lr
   84764:	20002410 	.word	0x20002410
   84768:	20000a7c 	.word	0x20000a7c
   8476c:	400a4000 	.word	0x400a4000

00084770 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   84770:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   84772:	4b02      	ldr	r3, [pc, #8]	; (8477c <udd_ctrl_endofrequest+0xc>)
   84774:	691b      	ldr	r3, [r3, #16]
   84776:	b103      	cbz	r3, 8477a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84778:	4798      	blx	r3
   8477a:	bd08      	pop	{r3, pc}
   8477c:	200029a8 	.word	0x200029a8

00084780 <udd_ctrl_in_sent>:
{
   84780:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84782:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84786:	b672      	cpsid	i
   84788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8478c:	2100      	movs	r1, #0
   8478e:	4a4c      	ldr	r2, [pc, #304]	; (848c0 <udd_ctrl_in_sent+0x140>)
   84790:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   84792:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84796:	4a4b      	ldr	r2, [pc, #300]	; (848c4 <udd_ctrl_in_sent+0x144>)
   84798:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8479c:	b92b      	cbnz	r3, 847aa <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8479e:	2201      	movs	r2, #1
   847a0:	4b47      	ldr	r3, [pc, #284]	; (848c0 <udd_ctrl_in_sent+0x140>)
   847a2:	701a      	strb	r2, [r3, #0]
   847a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   847a8:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   847aa:	4b47      	ldr	r3, [pc, #284]	; (848c8 <udd_ctrl_in_sent+0x148>)
   847ac:	781b      	ldrb	r3, [r3, #0]
   847ae:	2b03      	cmp	r3, #3
   847b0:	d057      	beq.n	84862 <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   847b2:	4b46      	ldr	r3, [pc, #280]	; (848cc <udd_ctrl_in_sent+0x14c>)
   847b4:	881b      	ldrh	r3, [r3, #0]
   847b6:	4a46      	ldr	r2, [pc, #280]	; (848d0 <udd_ctrl_in_sent+0x150>)
   847b8:	8994      	ldrh	r4, [r2, #12]
   847ba:	1ae4      	subs	r4, r4, r3
   847bc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   847be:	b9c4      	cbnz	r4, 847f2 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   847c0:	4a44      	ldr	r2, [pc, #272]	; (848d4 <udd_ctrl_in_sent+0x154>)
   847c2:	8811      	ldrh	r1, [r2, #0]
   847c4:	440b      	add	r3, r1
   847c6:	b29b      	uxth	r3, r3
   847c8:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   847ca:	4a41      	ldr	r2, [pc, #260]	; (848d0 <udd_ctrl_in_sent+0x150>)
   847cc:	88d2      	ldrh	r2, [r2, #6]
   847ce:	429a      	cmp	r2, r3
   847d0:	d04c      	beq.n	8486c <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   847d2:	4b41      	ldr	r3, [pc, #260]	; (848d8 <udd_ctrl_in_sent+0x158>)
   847d4:	781b      	ldrb	r3, [r3, #0]
   847d6:	2b00      	cmp	r3, #0
   847d8:	d148      	bne.n	8486c <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   847da:	4b3d      	ldr	r3, [pc, #244]	; (848d0 <udd_ctrl_in_sent+0x150>)
   847dc:	695b      	ldr	r3, [r3, #20]
   847de:	2b00      	cmp	r3, #0
   847e0:	d05f      	beq.n	848a2 <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   847e2:	4798      	blx	r3
   847e4:	2800      	cmp	r0, #0
   847e6:	d05c      	beq.n	848a2 <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   847e8:	2200      	movs	r2, #0
   847ea:	4b38      	ldr	r3, [pc, #224]	; (848cc <udd_ctrl_in_sent+0x14c>)
   847ec:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   847ee:	4b38      	ldr	r3, [pc, #224]	; (848d0 <udd_ctrl_in_sent+0x150>)
   847f0:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   847f2:	2c3f      	cmp	r4, #63	; 0x3f
   847f4:	d955      	bls.n	848a2 <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   847f6:	2200      	movs	r2, #0
   847f8:	4b37      	ldr	r3, [pc, #220]	; (848d8 <udd_ctrl_in_sent+0x158>)
   847fa:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   847fc:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   847fe:	4b34      	ldr	r3, [pc, #208]	; (848d0 <udd_ctrl_in_sent+0x150>)
   84800:	689a      	ldr	r2, [r3, #8]
   84802:	4b32      	ldr	r3, [pc, #200]	; (848cc <udd_ctrl_in_sent+0x14c>)
   84804:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84806:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8480a:	b672      	cpsid	i
   8480c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84810:	2100      	movs	r1, #0
   84812:	4b2b      	ldr	r3, [pc, #172]	; (848c0 <udd_ctrl_in_sent+0x140>)
   84814:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   84816:	4b2b      	ldr	r3, [pc, #172]	; (848c4 <udd_ctrl_in_sent+0x144>)
   84818:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8481c:	f413 7f00 	tst.w	r3, #512	; 0x200
   84820:	d143      	bne.n	848aa <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   84822:	b144      	cbz	r4, 84836 <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84824:	442a      	add	r2, r5
   84826:	4b2d      	ldr	r3, [pc, #180]	; (848dc <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   84828:	f812 1b01 	ldrb.w	r1, [r2], #1
   8482c:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   84830:	b2d9      	uxtb	r1, r3
   84832:	42a1      	cmp	r1, r4
   84834:	d3f8      	bcc.n	84828 <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   84836:	442c      	add	r4, r5
   84838:	4b24      	ldr	r3, [pc, #144]	; (848cc <udd_ctrl_in_sent+0x14c>)
   8483a:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   8483c:	4b21      	ldr	r3, [pc, #132]	; (848c4 <udd_ctrl_in_sent+0x144>)
   8483e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84842:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84846:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8484a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8484e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84852:	b928      	cbnz	r0, 84860 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84854:	2201      	movs	r2, #1
   84856:	4b1a      	ldr	r3, [pc, #104]	; (848c0 <udd_ctrl_in_sent+0x140>)
   84858:	701a      	strb	r2, [r3, #0]
   8485a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8485e:	b662      	cpsie	i
   84860:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   84862:	4b1f      	ldr	r3, [pc, #124]	; (848e0 <udd_ctrl_in_sent+0x160>)
   84864:	4798      	blx	r3
		udd_ctrl_init();
   84866:	4b1f      	ldr	r3, [pc, #124]	; (848e4 <udd_ctrl_in_sent+0x164>)
   84868:	4798      	blx	r3
		return;
   8486a:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8486c:	2204      	movs	r2, #4
   8486e:	4b16      	ldr	r3, [pc, #88]	; (848c8 <udd_ctrl_in_sent+0x148>)
   84870:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84872:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84876:	b672      	cpsid	i
   84878:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8487c:	2100      	movs	r1, #0
   8487e:	4a10      	ldr	r2, [pc, #64]	; (848c0 <udd_ctrl_in_sent+0x140>)
   84880:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   84882:	4a10      	ldr	r2, [pc, #64]	; (848c4 <udd_ctrl_in_sent+0x144>)
   84884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84888:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8488c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84890:	2b00      	cmp	r3, #0
   84892:	d1e5      	bne.n	84860 <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84894:	2201      	movs	r2, #1
   84896:	4b0a      	ldr	r3, [pc, #40]	; (848c0 <udd_ctrl_in_sent+0x140>)
   84898:	701a      	strb	r2, [r3, #0]
   8489a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8489e:	b662      	cpsie	i
   848a0:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   848a2:	2201      	movs	r2, #1
   848a4:	4b0c      	ldr	r3, [pc, #48]	; (848d8 <udd_ctrl_in_sent+0x158>)
   848a6:	701a      	strb	r2, [r3, #0]
   848a8:	e7a9      	b.n	847fe <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   848aa:	b928      	cbnz	r0, 848b8 <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   848ac:	2201      	movs	r2, #1
   848ae:	4b04      	ldr	r3, [pc, #16]	; (848c0 <udd_ctrl_in_sent+0x140>)
   848b0:	701a      	strb	r2, [r3, #0]
   848b2:	f3bf 8f5f 	dmb	sy
   848b6:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   848b8:	2204      	movs	r2, #4
   848ba:	4b03      	ldr	r3, [pc, #12]	; (848c8 <udd_ctrl_in_sent+0x148>)
   848bc:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   848be:	bd38      	pop	{r3, r4, r5, pc}
   848c0:	20000a7c 	.word	0x20000a7c
   848c4:	400a4000 	.word	0x400a4000
   848c8:	20002410 	.word	0x20002410
   848cc:	2000240c 	.word	0x2000240c
   848d0:	200029a8 	.word	0x200029a8
   848d4:	2000240e 	.word	0x2000240e
   848d8:	20002409 	.word	0x20002409
   848dc:	20180000 	.word	0x20180000
   848e0:	00084771 	.word	0x00084771
   848e4:	000846b1 	.word	0x000846b1

000848e8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   848e8:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   848ea:	7d03      	ldrb	r3, [r0, #20]
   848ec:	f013 0f01 	tst.w	r3, #1
   848f0:	d013      	beq.n	8491a <udd_ep_finish_job+0x32>
   848f2:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   848f4:	7d03      	ldrb	r3, [r0, #20]
   848f6:	f36f 0300 	bfc	r3, #0, #1
   848fa:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   848fc:	6804      	ldr	r4, [r0, #0]
   848fe:	b164      	cbz	r4, 8491a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   84900:	f102 0308 	add.w	r3, r2, #8
   84904:	015b      	lsls	r3, r3, #5
   84906:	4905      	ldr	r1, [pc, #20]	; (8491c <udd_ep_finish_job+0x34>)
   84908:	58cb      	ldr	r3, [r1, r3]
   8490a:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   8490e:	bf18      	it	ne
   84910:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84914:	6881      	ldr	r1, [r0, #8]
   84916:	4628      	mov	r0, r5
   84918:	47a0      	blx	r4
   8491a:	bd38      	pop	{r3, r4, r5, pc}
   8491c:	400a4000 	.word	0x400a4000

00084920 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   84922:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   84924:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84928:	4a59      	ldr	r2, [pc, #356]	; (84a90 <udd_ep_trans_done+0x170>)
   8492a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8492e:	7d12      	ldrb	r2, [r2, #20]
   84930:	f012 0f01 	tst.w	r2, #1
   84934:	f000 809e 	beq.w	84a74 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   84938:	460a      	mov	r2, r1
   8493a:	4955      	ldr	r1, [pc, #340]	; (84a90 <udd_ep_trans_done+0x170>)
   8493c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84940:	68d4      	ldr	r4, [r2, #12]
   84942:	6892      	ldr	r2, [r2, #8]
   84944:	4294      	cmp	r4, r2
   84946:	d079      	beq.n	84a3c <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   84948:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8494a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8494e:	bf92      	itee	ls
   84950:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84952:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84956:	2700      	movhi	r7, #0
   84958:	0141      	lsls	r1, r0, #5
   8495a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8495e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   84962:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84966:	f015 0f08 	tst.w	r5, #8
   8496a:	d014      	beq.n	84996 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8496c:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84970:	f005 0507 	and.w	r5, r5, #7
   84974:	2108      	movs	r1, #8
   84976:	40a9      	lsls	r1, r5
   84978:	3901      	subs	r1, #1
   8497a:	4211      	tst	r1, r2
   8497c:	d013      	beq.n	849a6 <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8497e:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84982:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84986:	4d42      	ldr	r5, [pc, #264]	; (84a90 <udd_ep_trans_done+0x170>)
   84988:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   8498c:	7d0d      	ldrb	r5, [r1, #20]
   8498e:	f36f 0541 	bfc	r5, #1, #1
   84992:	750d      	strb	r5, [r1, #20]
   84994:	e007      	b.n	849a6 <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84996:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   8499a:	f3c5 1501 	ubfx	r5, r5, #4, #2
   8499e:	2d01      	cmp	r5, #1
   849a0:	d035      	beq.n	84a0e <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   849a2:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   849a6:	493b      	ldr	r1, [pc, #236]	; (84a94 <udd_ep_trans_done+0x174>)
   849a8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   849ac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   849b0:	4e37      	ldr	r6, [pc, #220]	; (84a90 <udd_ep_trans_done+0x170>)
   849b2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   849b6:	686d      	ldr	r5, [r5, #4]
   849b8:	442c      	add	r4, r5
   849ba:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   849bc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   849c0:	b672      	cpsid	i
   849c2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   849c6:	2600      	movs	r6, #0
   849c8:	4c33      	ldr	r4, [pc, #204]	; (84a98 <udd_ep_trans_done+0x178>)
   849ca:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   849cc:	68cc      	ldr	r4, [r1, #12]
   849ce:	f014 0f10 	tst.w	r4, #16
   849d2:	d125      	bne.n	84a20 <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   849d4:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   849d8:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   849da:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   849de:	492c      	ldr	r1, [pc, #176]	; (84a90 <udd_ep_trans_done+0x170>)
   849e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   849e4:	68c8      	ldr	r0, [r1, #12]
   849e6:	4410      	add	r0, r2
   849e8:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   849ea:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   849ec:	4a2b      	ldr	r2, [pc, #172]	; (84a9c <udd_ep_trans_done+0x17c>)
   849ee:	6911      	ldr	r1, [r2, #16]
   849f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   849f4:	fa00 f303 	lsl.w	r3, r0, r3
   849f8:	430b      	orrs	r3, r1
   849fa:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   849fc:	2d00      	cmp	r5, #0
   849fe:	d139      	bne.n	84a74 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   84a00:	2201      	movs	r2, #1
   84a02:	4b25      	ldr	r3, [pc, #148]	; (84a98 <udd_ep_trans_done+0x178>)
   84a04:	701a      	strb	r2, [r3, #0]
   84a06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84a0a:	b662      	cpsie	i
   84a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84a0e:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   84a12:	f005 0507 	and.w	r5, r5, #7
   84a16:	2108      	movs	r1, #8
   84a18:	40a9      	lsls	r1, r5
   84a1a:	428a      	cmp	r2, r1
   84a1c:	d8c3      	bhi.n	849a6 <udd_ep_trans_done+0x86>
   84a1e:	e7c0      	b.n	849a2 <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   84a20:	b92d      	cbnz	r5, 84a2e <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   84a22:	2101      	movs	r1, #1
   84a24:	4a1c      	ldr	r2, [pc, #112]	; (84a98 <udd_ep_trans_done+0x178>)
   84a26:	7011      	strb	r1, [r2, #0]
   84a28:	f3bf 8f5f 	dmb	sy
   84a2c:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84a2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84a32:	4917      	ldr	r1, [pc, #92]	; (84a90 <udd_ep_trans_done+0x170>)
   84a34:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   84a38:	68d1      	ldr	r1, [r2, #12]
   84a3a:	6091      	str	r1, [r2, #8]
   84a3c:	0142      	lsls	r2, r0, #5
   84a3e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84a42:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   84a46:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   84a4a:	f011 0f08 	tst.w	r1, #8
   84a4e:	d008      	beq.n	84a62 <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   84a50:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84a54:	4c0e      	ldr	r4, [pc, #56]	; (84a90 <udd_ep_trans_done+0x170>)
   84a56:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   84a5a:	7d09      	ldrb	r1, [r1, #20]
   84a5c:	f011 0f02 	tst.w	r1, #2
   84a60:	d109      	bne.n	84a76 <udd_ep_trans_done+0x156>
   84a62:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   84a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   84a68:	2100      	movs	r1, #0
   84a6a:	4809      	ldr	r0, [pc, #36]	; (84a90 <udd_ep_trans_done+0x170>)
   84a6c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   84a70:	4b0b      	ldr	r3, [pc, #44]	; (84aa0 <udd_ep_trans_done+0x180>)
   84a72:	4798      	blx	r3
   84a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   84a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84a7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   84a7e:	4b07      	ldr	r3, [pc, #28]	; (84a9c <udd_ep_trans_done+0x17c>)
   84a80:	6919      	ldr	r1, [r3, #16]
   84a82:	f44f 7280 	mov.w	r2, #256	; 0x100
   84a86:	fa02 f000 	lsl.w	r0, r2, r0
   84a8a:	4308      	orrs	r0, r1
   84a8c:	6118      	str	r0, [r3, #16]
			return;
   84a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84a90:	20002414 	.word	0x20002414
   84a94:	400a4300 	.word	0x400a4300
   84a98:	20000a7c 	.word	0x20000a7c
   84a9c:	400a4000 	.word	0x400a4000
   84aa0:	000848e9 	.word	0x000848e9

00084aa4 <UDPHS_Handler>:
{
   84aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   84aa8:	201d      	movs	r0, #29
   84aaa:	4ba6      	ldr	r3, [pc, #664]	; (84d44 <UDPHS_Handler+0x2a0>)
   84aac:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84aae:	4ba6      	ldr	r3, [pc, #664]	; (84d48 <UDPHS_Handler+0x2a4>)
   84ab0:	4798      	blx	r3
   84ab2:	b920      	cbnz	r0, 84abe <UDPHS_Handler+0x1a>
   84ab4:	4ba5      	ldr	r3, [pc, #660]	; (84d4c <UDPHS_Handler+0x2a8>)
   84ab6:	695b      	ldr	r3, [r3, #20]
   84ab8:	f013 0f02 	tst.w	r3, #2
   84abc:	d00f      	beq.n	84ade <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   84abe:	4ba3      	ldr	r3, [pc, #652]	; (84d4c <UDPHS_Handler+0x2a8>)
   84ac0:	695b      	ldr	r3, [r3, #20]
   84ac2:	f013 0f08 	tst.w	r3, #8
   84ac6:	d015      	beq.n	84af4 <UDPHS_Handler+0x50>
		udd_ack_sof();
   84ac8:	4ba0      	ldr	r3, [pc, #640]	; (84d4c <UDPHS_Handler+0x2a8>)
   84aca:	2208      	movs	r2, #8
   84acc:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84ace:	695b      	ldr	r3, [r3, #20]
   84ad0:	f013 0f01 	tst.w	r3, #1
   84ad4:	d00b      	beq.n	84aee <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   84ad6:	4b9e      	ldr	r3, [pc, #632]	; (84d50 <UDPHS_Handler+0x2ac>)
   84ad8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   84ade:	b672      	cpsid	i
   84ae0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84ae4:	2200      	movs	r2, #0
   84ae6:	4b9b      	ldr	r3, [pc, #620]	; (84d54 <UDPHS_Handler+0x2b0>)
   84ae8:	701a      	strb	r2, [r3, #0]
		return;
   84aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   84aee:	4b9a      	ldr	r3, [pc, #616]	; (84d58 <UDPHS_Handler+0x2b4>)
   84af0:	4798      	blx	r3
   84af2:	e7f0      	b.n	84ad6 <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   84af4:	4b95      	ldr	r3, [pc, #596]	; (84d4c <UDPHS_Handler+0x2a8>)
   84af6:	695b      	ldr	r3, [r3, #20]
   84af8:	f013 0f04 	tst.w	r3, #4
   84afc:	d137      	bne.n	84b6e <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   84afe:	4a93      	ldr	r2, [pc, #588]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b00:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   84b04:	6952      	ldr	r2, [r2, #20]
   84b06:	f412 7f80 	tst.w	r2, #256	; 0x100
   84b0a:	d029      	beq.n	84b60 <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   84b0c:	4a8f      	ldr	r2, [pc, #572]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84b12:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   84b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84b1a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   84b1e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   84b22:	d12b      	bne.n	84b7c <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   84b24:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84b28:	d006      	beq.n	84b38 <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   84b2a:	4a88      	ldr	r2, [pc, #544]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b2c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84b30:	f412 6f80 	tst.w	r2, #1024	; 0x400
   84b34:	f040 808f 	bne.w	84c56 <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   84b38:	f413 7f00 	tst.w	r3, #512	; 0x200
   84b3c:	f040 808f 	bne.w	84c5e <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   84b40:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84b44:	d004      	beq.n	84b50 <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   84b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   84b4a:	4a80      	ldr	r2, [pc, #512]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b4c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   84b50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   84b54:	f040 813c 	bne.w	84dd0 <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   84b58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   84b5c:	f040 814e 	bne.w	84dfc <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   84b60:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84b62:	497a      	ldr	r1, [pc, #488]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b64:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84b68:	f44f 7c80 	mov.w	ip, #256	; 0x100
   84b6c:	e199      	b.n	84ea2 <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   84b6e:	2204      	movs	r2, #4
   84b70:	4b76      	ldr	r3, [pc, #472]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b72:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   84b74:	4b78      	ldr	r3, [pc, #480]	; (84d58 <UDPHS_Handler+0x2b4>)
   84b76:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84b7c:	4b77      	ldr	r3, [pc, #476]	; (84d5c <UDPHS_Handler+0x2b8>)
   84b7e:	781b      	ldrb	r3, [r3, #0]
   84b80:	2b00      	cmp	r3, #0
   84b82:	d141      	bne.n	84c08 <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   84b84:	4b71      	ldr	r3, [pc, #452]	; (84d4c <UDPHS_Handler+0x2a8>)
   84b86:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84b8a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84b8e:	2b08      	cmp	r3, #8
   84b90:	d13f      	bne.n	84c12 <UDPHS_Handler+0x16e>
   84b92:	4a73      	ldr	r2, [pc, #460]	; (84d60 <UDPHS_Handler+0x2bc>)
   84b94:	4b73      	ldr	r3, [pc, #460]	; (84d64 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   84b96:	4874      	ldr	r0, [pc, #464]	; (84d68 <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84b98:	f813 1b01 	ldrb.w	r1, [r3], #1
   84b9c:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84ba0:	4283      	cmp	r3, r0
   84ba2:	d1f9      	bne.n	84b98 <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   84ba4:	4b71      	ldr	r3, [pc, #452]	; (84d6c <UDPHS_Handler+0x2c8>)
   84ba6:	4798      	blx	r3
   84ba8:	2800      	cmp	r0, #0
   84baa:	d03b      	beq.n	84c24 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   84bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84bb0:	4b66      	ldr	r3, [pc, #408]	; (84d4c <UDPHS_Handler+0x2a8>)
   84bb2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   84bb6:	4b6e      	ldr	r3, [pc, #440]	; (84d70 <UDPHS_Handler+0x2cc>)
   84bb8:	f993 3000 	ldrsb.w	r3, [r3]
   84bbc:	2b00      	cmp	r3, #0
   84bbe:	db3a      	blt.n	84c36 <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84bc0:	4b6b      	ldr	r3, [pc, #428]	; (84d70 <UDPHS_Handler+0x2cc>)
   84bc2:	88db      	ldrh	r3, [r3, #6]
   84bc4:	2b00      	cmp	r3, #0
   84bc6:	d042      	beq.n	84c4e <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84bc8:	2200      	movs	r2, #0
   84bca:	4b6a      	ldr	r3, [pc, #424]	; (84d74 <UDPHS_Handler+0x2d0>)
   84bcc:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84bce:	4b6a      	ldr	r3, [pc, #424]	; (84d78 <UDPHS_Handler+0x2d4>)
   84bd0:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84bd2:	2101      	movs	r1, #1
   84bd4:	4b61      	ldr	r3, [pc, #388]	; (84d5c <UDPHS_Handler+0x2b8>)
   84bd6:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   84bd8:	495c      	ldr	r1, [pc, #368]	; (84d4c <UDPHS_Handler+0x2a8>)
   84bda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   84bde:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84be2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84be6:	b672      	cpsid	i
   84be8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84bec:	4c59      	ldr	r4, [pc, #356]	; (84d54 <UDPHS_Handler+0x2b0>)
   84bee:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   84bf0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84bf4:	2b00      	cmp	r3, #0
   84bf6:	f040 8266 	bne.w	850c6 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   84bfa:	2201      	movs	r2, #1
   84bfc:	7022      	strb	r2, [r4, #0]
   84bfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84c02:	b662      	cpsie	i
   84c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   84c08:	4b5c      	ldr	r3, [pc, #368]	; (84d7c <UDPHS_Handler+0x2d8>)
   84c0a:	4798      	blx	r3
		udd_ctrl_init();
   84c0c:	4b5c      	ldr	r3, [pc, #368]	; (84d80 <UDPHS_Handler+0x2dc>)
   84c0e:	4798      	blx	r3
   84c10:	e7b8      	b.n	84b84 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   84c12:	4b5c      	ldr	r3, [pc, #368]	; (84d84 <UDPHS_Handler+0x2e0>)
   84c14:	4798      	blx	r3
		udd_ack_setup_received(0);
   84c16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84c1a:	4b4c      	ldr	r3, [pc, #304]	; (84d4c <UDPHS_Handler+0x2a8>)
   84c1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   84c24:	4b57      	ldr	r3, [pc, #348]	; (84d84 <UDPHS_Handler+0x2e0>)
   84c26:	4798      	blx	r3
		udd_ack_setup_received(0);
   84c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84c2c:	4b47      	ldr	r3, [pc, #284]	; (84d4c <UDPHS_Handler+0x2a8>)
   84c2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   84c36:	2300      	movs	r3, #0
   84c38:	4a4e      	ldr	r2, [pc, #312]	; (84d74 <UDPHS_Handler+0x2d0>)
   84c3a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84c3c:	4a4e      	ldr	r2, [pc, #312]	; (84d78 <UDPHS_Handler+0x2d4>)
   84c3e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84c40:	2202      	movs	r2, #2
   84c42:	4b46      	ldr	r3, [pc, #280]	; (84d5c <UDPHS_Handler+0x2b8>)
   84c44:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84c46:	4b50      	ldr	r3, [pc, #320]	; (84d88 <UDPHS_Handler+0x2e4>)
   84c48:	4798      	blx	r3
   84c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   84c4e:	4b4f      	ldr	r3, [pc, #316]	; (84d8c <UDPHS_Handler+0x2e8>)
   84c50:	4798      	blx	r3
   84c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   84c56:	4b4c      	ldr	r3, [pc, #304]	; (84d88 <UDPHS_Handler+0x2e4>)
   84c58:	4798      	blx	r3
   84c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84c5e:	4b3f      	ldr	r3, [pc, #252]	; (84d5c <UDPHS_Handler+0x2b8>)
   84c60:	781b      	ldrb	r3, [r3, #0]
   84c62:	2b01      	cmp	r3, #1
   84c64:	d00c      	beq.n	84c80 <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84c66:	2b02      	cmp	r3, #2
   84c68:	d004      	beq.n	84c74 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84c6a:	2b04      	cmp	r3, #4
   84c6c:	d002      	beq.n	84c74 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   84c6e:	4b45      	ldr	r3, [pc, #276]	; (84d84 <UDPHS_Handler+0x2e0>)
   84c70:	4798      	blx	r3
   84c72:	e001      	b.n	84c78 <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   84c74:	4b41      	ldr	r3, [pc, #260]	; (84d7c <UDPHS_Handler+0x2d8>)
   84c76:	4798      	blx	r3
		udd_ctrl_init();
   84c78:	4b41      	ldr	r3, [pc, #260]	; (84d80 <UDPHS_Handler+0x2dc>)
   84c7a:	4798      	blx	r3
   84c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   84c80:	4b32      	ldr	r3, [pc, #200]	; (84d4c <UDPHS_Handler+0x2a8>)
   84c82:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   84c86:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84c8a:	4b39      	ldr	r3, [pc, #228]	; (84d70 <UDPHS_Handler+0x2cc>)
   84c8c:	899b      	ldrh	r3, [r3, #12]
   84c8e:	4a3a      	ldr	r2, [pc, #232]	; (84d78 <UDPHS_Handler+0x2d4>)
   84c90:	8814      	ldrh	r4, [r2, #0]
   84c92:	1822      	adds	r2, r4, r0
   84c94:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84c96:	bfbc      	itt	lt
   84c98:	1b1b      	sublt	r3, r3, r4
   84c9a:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84c9c:	4b34      	ldr	r3, [pc, #208]	; (84d70 <UDPHS_Handler+0x2cc>)
   84c9e:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   84ca0:	b178      	cbz	r0, 84cc2 <UDPHS_Handler+0x21e>
   84ca2:	1e63      	subs	r3, r4, #1
   84ca4:	441a      	add	r2, r3
   84ca6:	4b2f      	ldr	r3, [pc, #188]	; (84d64 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   84ca8:	f813 1b01 	ldrb.w	r1, [r3], #1
   84cac:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   84cb0:	b2d9      	uxtb	r1, r3
   84cb2:	4281      	cmp	r1, r0
   84cb4:	d3f8      	bcc.n	84ca8 <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   84cb6:	4404      	add	r4, r0
   84cb8:	b2a4      	uxth	r4, r4
   84cba:	4b2f      	ldr	r3, [pc, #188]	; (84d78 <UDPHS_Handler+0x2d4>)
   84cbc:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84cbe:	2840      	cmp	r0, #64	; 0x40
   84cc0:	d00e      	beq.n	84ce0 <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84cc2:	4b2b      	ldr	r3, [pc, #172]	; (84d70 <UDPHS_Handler+0x2cc>)
   84cc4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84cc6:	695b      	ldr	r3, [r3, #20]
   84cc8:	b10b      	cbz	r3, 84cce <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   84cca:	4798      	blx	r3
   84ccc:	b380      	cbz	r0, 84d30 <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   84cce:	f44f 7200 	mov.w	r2, #512	; 0x200
   84cd2:	4b1e      	ldr	r3, [pc, #120]	; (84d4c <UDPHS_Handler+0x2a8>)
   84cd4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   84cd8:	4b2c      	ldr	r3, [pc, #176]	; (84d8c <UDPHS_Handler+0x2e8>)
   84cda:	4798      	blx	r3
   84cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   84ce0:	4b23      	ldr	r3, [pc, #140]	; (84d70 <UDPHS_Handler+0x2cc>)
   84ce2:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   84ce4:	4b23      	ldr	r3, [pc, #140]	; (84d74 <UDPHS_Handler+0x2d0>)
   84ce6:	881b      	ldrh	r3, [r3, #0]
   84ce8:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   84cea:	429a      	cmp	r2, r3
   84cec:	dde9      	ble.n	84cc2 <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84cee:	4b20      	ldr	r3, [pc, #128]	; (84d70 <UDPHS_Handler+0x2cc>)
   84cf0:	899b      	ldrh	r3, [r3, #12]
   84cf2:	42a3      	cmp	r3, r4
   84cf4:	d04c      	beq.n	84d90 <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   84cf6:	4a15      	ldr	r2, [pc, #84]	; (84d4c <UDPHS_Handler+0x2a8>)
   84cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
   84cfc:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   84d00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84d04:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d08:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84d0c:	b672      	cpsid	i
   84d0e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d12:	2400      	movs	r4, #0
   84d14:	480f      	ldr	r0, [pc, #60]	; (84d54 <UDPHS_Handler+0x2b0>)
   84d16:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   84d18:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84d1c:	2b00      	cmp	r3, #0
   84d1e:	f040 81d2 	bne.w	850c6 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   84d22:	2201      	movs	r2, #1
   84d24:	7002      	strb	r2, [r0, #0]
   84d26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d2a:	b662      	cpsie	i
   84d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   84d30:	4b14      	ldr	r3, [pc, #80]	; (84d84 <UDPHS_Handler+0x2e0>)
   84d32:	4798      	blx	r3
				udd_ack_out_received(0);
   84d34:	f44f 7200 	mov.w	r2, #512	; 0x200
   84d38:	4b04      	ldr	r3, [pc, #16]	; (84d4c <UDPHS_Handler+0x2a8>)
   84d3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d42:	bf00      	nop
   84d44:	000844b5 	.word	0x000844b5
   84d48:	00084545 	.word	0x00084545
   84d4c:	400a4000 	.word	0x400a4000
   84d50:	0008139d 	.word	0x0008139d
   84d54:	20000a7c 	.word	0x20000a7c
   84d58:	00082761 	.word	0x00082761
   84d5c:	20002410 	.word	0x20002410
   84d60:	200029a7 	.word	0x200029a7
   84d64:	20180000 	.word	0x20180000
   84d68:	20180008 	.word	0x20180008
   84d6c:	000827a1 	.word	0x000827a1
   84d70:	200029a8 	.word	0x200029a8
   84d74:	2000240e 	.word	0x2000240e
   84d78:	2000240c 	.word	0x2000240c
   84d7c:	00084771 	.word	0x00084771
   84d80:	000846b1 	.word	0x000846b1
   84d84:	00084705 	.word	0x00084705
   84d88:	00084781 	.word	0x00084781
   84d8c:	0008471d 	.word	0x0008471d
		if (!udd_g_ctrlreq.over_under_run) {
   84d90:	4bb0      	ldr	r3, [pc, #704]	; (85054 <UDPHS_Handler+0x5b0>)
   84d92:	695b      	ldr	r3, [r3, #20]
   84d94:	b153      	cbz	r3, 84dac <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   84d96:	4798      	blx	r3
   84d98:	b188      	cbz	r0, 84dbe <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84d9a:	49af      	ldr	r1, [pc, #700]	; (85058 <UDPHS_Handler+0x5b4>)
   84d9c:	4aaf      	ldr	r2, [pc, #700]	; (8505c <UDPHS_Handler+0x5b8>)
   84d9e:	880b      	ldrh	r3, [r1, #0]
   84da0:	8810      	ldrh	r0, [r2, #0]
   84da2:	4403      	add	r3, r0
   84da4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84da6:	2300      	movs	r3, #0
   84da8:	8013      	strh	r3, [r2, #0]
   84daa:	e7a4      	b.n	84cf6 <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   84dac:	4bac      	ldr	r3, [pc, #688]	; (85060 <UDPHS_Handler+0x5bc>)
   84dae:	4798      	blx	r3
			udd_ack_out_received(0);
   84db0:	f44f 7200 	mov.w	r2, #512	; 0x200
   84db4:	4bab      	ldr	r3, [pc, #684]	; (85064 <UDPHS_Handler+0x5c0>)
   84db6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   84dbe:	4ba8      	ldr	r3, [pc, #672]	; (85060 <UDPHS_Handler+0x5bc>)
   84dc0:	4798      	blx	r3
			udd_ack_out_received(0);
   84dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
   84dc6:	4ba7      	ldr	r3, [pc, #668]	; (85064 <UDPHS_Handler+0x5c0>)
   84dc8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   84dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   84dd0:	4ba4      	ldr	r3, [pc, #656]	; (85064 <UDPHS_Handler+0x5c0>)
   84dd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84dd6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   84dda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84dde:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84de2:	f040 8170 	bne.w	850c6 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84de6:	4ba0      	ldr	r3, [pc, #640]	; (85068 <UDPHS_Handler+0x5c4>)
   84de8:	781b      	ldrb	r3, [r3, #0]
   84dea:	2b03      	cmp	r3, #3
   84dec:	f040 816b 	bne.w	850c6 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   84df0:	2220      	movs	r2, #32
   84df2:	4b9c      	ldr	r3, [pc, #624]	; (85064 <UDPHS_Handler+0x5c0>)
   84df4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   84dfc:	4b99      	ldr	r3, [pc, #612]	; (85064 <UDPHS_Handler+0x5c0>)
   84dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84e02:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   84e06:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84e0a:	f413 7f00 	tst.w	r3, #512	; 0x200
   84e0e:	f040 815a 	bne.w	850c6 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84e12:	4b95      	ldr	r3, [pc, #596]	; (85068 <UDPHS_Handler+0x5c4>)
   84e14:	781b      	ldrb	r3, [r3, #0]
   84e16:	2b01      	cmp	r3, #1
   84e18:	d008      	beq.n	84e2c <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84e1a:	2b04      	cmp	r3, #4
   84e1c:	f040 8153 	bne.w	850c6 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   84e20:	2220      	movs	r2, #32
   84e22:	4b90      	ldr	r3, [pc, #576]	; (85064 <UDPHS_Handler+0x5c0>)
   84e24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   84e2c:	4b8f      	ldr	r3, [pc, #572]	; (8506c <UDPHS_Handler+0x5c8>)
   84e2e:	4798      	blx	r3
   84e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   84e34:	4b8e      	ldr	r3, [pc, #568]	; (85070 <UDPHS_Handler+0x5cc>)
   84e36:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   84e3a:	68da      	ldr	r2, [r3, #12]
   84e3c:	f012 0f01 	tst.w	r2, #1
   84e40:	f040 8141 	bne.w	850c6 <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   84e44:	4987      	ldr	r1, [pc, #540]	; (85064 <UDPHS_Handler+0x5c0>)
   84e46:	690a      	ldr	r2, [r1, #16]
   84e48:	ea22 0606 	bic.w	r6, r2, r6
   84e4c:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84e4e:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   84e50:	0c1b      	lsrs	r3, r3, #16
   84e52:	d008      	beq.n	84e66 <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   84e54:	4a87      	ldr	r2, [pc, #540]	; (85074 <UDPHS_Handler+0x5d0>)
   84e56:	006c      	lsls	r4, r5, #1
   84e58:	1965      	adds	r5, r4, r5
   84e5a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   84e5e:	68e9      	ldr	r1, [r5, #12]
   84e60:	1acb      	subs	r3, r1, r3
   84e62:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   84e64:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   84e66:	4b84      	ldr	r3, [pc, #528]	; (85078 <UDPHS_Handler+0x5d4>)
   84e68:	4798      	blx	r3
   84e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   84e6e:	0163      	lsls	r3, r4, #5
   84e70:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84e74:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84e7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84e80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   84e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   84e88:	4602      	mov	r2, r0
   84e8a:	2100      	movs	r1, #0
   84e8c:	4879      	ldr	r0, [pc, #484]	; (85074 <UDPHS_Handler+0x5d0>)
   84e8e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   84e92:	4b7a      	ldr	r3, [pc, #488]	; (8507c <UDPHS_Handler+0x5d8>)
   84e94:	4798      	blx	r3
   84e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e9a:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84e9c:	2b07      	cmp	r3, #7
   84e9e:	f000 80fd 	beq.w	8509c <UDPHS_Handler+0x5f8>
   84ea2:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   84ea4:	461c      	mov	r4, r3
   84ea6:	1e5d      	subs	r5, r3, #1
   84ea8:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84eaa:	690f      	ldr	r7, [r1, #16]
   84eac:	fa0e f605 	lsl.w	r6, lr, r5
   84eb0:	4237      	tst	r7, r6
   84eb2:	d002      	beq.n	84eba <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84eb4:	694a      	ldr	r2, [r1, #20]
   84eb6:	4216      	tst	r6, r2
   84eb8:	d1bc      	bne.n	84e34 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84eba:	690f      	ldr	r7, [r1, #16]
   84ebc:	fa0c f604 	lsl.w	r6, ip, r4
   84ec0:	4237      	tst	r7, r6
   84ec2:	d0ea      	beq.n	84e9a <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84ec4:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ec8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84ecc:	f412 6f00 	tst.w	r2, #2048	; 0x800
   84ed0:	d006      	beq.n	84ee0 <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84ed2:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ed6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84eda:	f412 6f00 	tst.w	r2, #2048	; 0x800
   84ede:	d0c6      	beq.n	84e6e <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84ee0:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ee4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84ee8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   84eec:	d0d5      	beq.n	84e9a <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   84eee:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ef2:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84ef6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84efa:	d1ce      	bne.n	84e9a <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84efc:	4b59      	ldr	r3, [pc, #356]	; (85064 <UDPHS_Handler+0x5c0>)
   84efe:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   84f02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84f06:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84f0a:	691a      	ldr	r2, [r3, #16]
   84f0c:	ea22 0606 	bic.w	r6, r2, r6
   84f10:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84f12:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   84f16:	4b57      	ldr	r3, [pc, #348]	; (85074 <UDPHS_Handler+0x5d0>)
   84f18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   84f1c:	f898 2014 	ldrb.w	r2, [r8, #20]
   84f20:	f36f 0282 	bfc	r2, #2, #1
   84f24:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   84f2c:	f023 0302 	bic.w	r3, r3, #2
   84f30:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84f34:	2320      	movs	r3, #32
   84f36:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   84f3a:	2340      	movs	r3, #64	; 0x40
   84f3c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   84f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   84f44:	2210      	movs	r2, #16
   84f46:	4b47      	ldr	r3, [pc, #284]	; (85064 <UDPHS_Handler+0x5c0>)
   84f48:	619a      	str	r2, [r3, #24]
   84f4a:	4d4a      	ldr	r5, [pc, #296]	; (85074 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f4c:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   84f4e:	2701      	movs	r7, #1
   84f50:	4e4a      	ldr	r6, [pc, #296]	; (8507c <UDPHS_Handler+0x5d8>)
   84f52:	3401      	adds	r4, #1
   84f54:	b2e4      	uxtb	r4, r4
   84f56:	4622      	mov	r2, r4
   84f58:	4639      	mov	r1, r7
   84f5a:	4628      	mov	r0, r5
   84f5c:	47b0      	blx	r6
   84f5e:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f60:	2c06      	cmp	r4, #6
   84f62:	d1f6      	bne.n	84f52 <UDPHS_Handler+0x4ae>
		udc_reset();
   84f64:	4b46      	ldr	r3, [pc, #280]	; (85080 <UDPHS_Handler+0x5dc>)
   84f66:	4798      	blx	r3
	udd_configure_address(0);
   84f68:	4b3e      	ldr	r3, [pc, #248]	; (85064 <UDPHS_Handler+0x5c0>)
   84f6a:	681a      	ldr	r2, [r3, #0]
   84f6c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84f70:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84f72:	681a      	ldr	r2, [r3, #0]
   84f74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84f78:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84f7a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84f7e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84f82:	f022 0203 	bic.w	r2, r2, #3
   84f86:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   84f8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84f8e:	2201      	movs	r2, #1
   84f90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f94:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84f98:	b672      	cpsid	i
   84f9a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f9e:	2000      	movs	r0, #0
   84fa0:	4938      	ldr	r1, [pc, #224]	; (85084 <UDPHS_Handler+0x5e0>)
   84fa2:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   84fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84fa8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84fac:	f44f 7100 	mov.w	r1, #512	; 0x200
   84fb0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84fb4:	6919      	ldr	r1, [r3, #16]
   84fb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   84fba:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84fbc:	b92a      	cbnz	r2, 84fca <UDPHS_Handler+0x526>
		cpu_irq_enable();
   84fbe:	2201      	movs	r2, #1
   84fc0:	4b30      	ldr	r3, [pc, #192]	; (85084 <UDPHS_Handler+0x5e0>)
   84fc2:	701a      	strb	r2, [r3, #0]
   84fc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84fc8:	b662      	cpsie	i
		udd_ctrl_init();
   84fca:	4b2f      	ldr	r3, [pc, #188]	; (85088 <UDPHS_Handler+0x5e4>)
   84fcc:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84fce:	4b25      	ldr	r3, [pc, #148]	; (85064 <UDPHS_Handler+0x5c0>)
   84fd0:	691a      	ldr	r2, [r3, #16]
   84fd2:	f042 0208 	orr.w	r2, r2, #8
   84fd6:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84fd8:	691a      	ldr	r2, [r3, #16]
   84fda:	f042 0204 	orr.w	r2, r2, #4
   84fde:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84fe0:	691a      	ldr	r2, [r3, #16]
   84fe2:	f042 0202 	orr.w	r2, r2, #2
   84fe6:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   84fec:	4b1d      	ldr	r3, [pc, #116]	; (85064 <UDPHS_Handler+0x5c0>)
   84fee:	2220      	movs	r2, #32
   84ff0:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84ff2:	691a      	ldr	r2, [r3, #16]
   84ff4:	f022 0202 	bic.w	r2, r2, #2
   84ff8:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84ffa:	691a      	ldr	r2, [r3, #16]
   84ffc:	f042 0220 	orr.w	r2, r2, #32
   85000:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   85002:	2202      	movs	r2, #2
   85004:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   85006:	201d      	movs	r0, #29
   85008:	4b20      	ldr	r3, [pc, #128]	; (8508c <UDPHS_Handler+0x5e8>)
   8500a:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   8500c:	4b20      	ldr	r3, [pc, #128]	; (85090 <UDPHS_Handler+0x5ec>)
   8500e:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   85010:	2000      	movs	r0, #0
   85012:	4b20      	ldr	r3, [pc, #128]	; (85094 <UDPHS_Handler+0x5f0>)
   85014:	4798      	blx	r3
		goto udd_interrupt_end;
   85016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   8501a:	2001      	movs	r0, #1
   8501c:	4b1d      	ldr	r3, [pc, #116]	; (85094 <UDPHS_Handler+0x5f0>)
   8501e:	4798      	blx	r3
		udd_ack_suspend();
   85020:	4b10      	ldr	r3, [pc, #64]	; (85064 <UDPHS_Handler+0x5c0>)
   85022:	2202      	movs	r2, #2
   85024:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   85026:	2220      	movs	r2, #32
   85028:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   8502a:	691a      	ldr	r2, [r3, #16]
   8502c:	f022 0220 	bic.w	r2, r2, #32
   85030:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   85032:	691a      	ldr	r2, [r3, #16]
   85034:	f042 0202 	orr.w	r2, r2, #2
   85038:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   8503a:	691a      	ldr	r2, [r3, #16]
   8503c:	f042 0208 	orr.w	r2, r2, #8
   85040:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   85042:	691a      	ldr	r2, [r3, #16]
   85044:	f042 0204 	orr.w	r2, r2, #4
   85048:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   8504a:	4b13      	ldr	r3, [pc, #76]	; (85098 <UDPHS_Handler+0x5f4>)
   8504c:	4798      	blx	r3
		goto udd_interrupt_end;
   8504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85052:	bf00      	nop
   85054:	200029a8 	.word	0x200029a8
   85058:	2000240e 	.word	0x2000240e
   8505c:	2000240c 	.word	0x2000240c
   85060:	00084705 	.word	0x00084705
   85064:	400a4000 	.word	0x400a4000
   85068:	20002410 	.word	0x20002410
   8506c:	0008471d 	.word	0x0008471d
   85070:	400a4300 	.word	0x400a4300
   85074:	20002414 	.word	0x20002414
   85078:	00084921 	.word	0x00084921
   8507c:	000848e9 	.word	0x000848e9
   85080:	00082705 	.word	0x00082705
   85084:	20000a7c 	.word	0x20000a7c
   85088:	000846b1 	.word	0x000846b1
   8508c:	000844e9 	.word	0x000844e9
   85090:	00081385 	.word	0x00081385
   85094:	00084641 	.word	0x00084641
   85098:	00081391 	.word	0x00081391
	if (Is_udd_reset()) {
   8509c:	4b0b      	ldr	r3, [pc, #44]	; (850cc <UDPHS_Handler+0x628>)
   8509e:	695b      	ldr	r3, [r3, #20]
   850a0:	f013 0f10 	tst.w	r3, #16
   850a4:	f47f af4e 	bne.w	84f44 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   850a8:	4b08      	ldr	r3, [pc, #32]	; (850cc <UDPHS_Handler+0x628>)
   850aa:	691b      	ldr	r3, [r3, #16]
   850ac:	f013 0f02 	tst.w	r3, #2
   850b0:	d004      	beq.n	850bc <UDPHS_Handler+0x618>
   850b2:	4b06      	ldr	r3, [pc, #24]	; (850cc <UDPHS_Handler+0x628>)
   850b4:	695b      	ldr	r3, [r3, #20]
   850b6:	f013 0f02 	tst.w	r3, #2
   850ba:	d197      	bne.n	84fec <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   850bc:	4b03      	ldr	r3, [pc, #12]	; (850cc <UDPHS_Handler+0x628>)
   850be:	695b      	ldr	r3, [r3, #20]
   850c0:	f013 0f20 	tst.w	r3, #32
   850c4:	d1a9      	bne.n	8501a <UDPHS_Handler+0x576>
   850c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   850ca:	bf00      	nop
   850cc:	400a4000 	.word	0x400a4000

000850d0 <udd_disable>:
{
   850d0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   850d2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   850d6:	b672      	cpsid	i
   850d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   850dc:	4e13      	ldr	r6, [pc, #76]	; (8512c <udd_disable+0x5c>)
   850de:	2400      	movs	r4, #0
   850e0:	7034      	strb	r4, [r6, #0]
	udd_reset_periph();
   850e2:	4a13      	ldr	r2, [pc, #76]	; (85130 <udd_disable+0x60>)
   850e4:	6813      	ldr	r3, [r2, #0]
   850e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   850ea:	6013      	str	r3, [r2, #0]
	sysclk_disable_usb();
   850ec:	4b11      	ldr	r3, [pc, #68]	; (85134 <udd_disable+0x64>)
   850ee:	4798      	blx	r3
	pmc_disable_periph_clk(ID_UDPHS);
   850f0:	201d      	movs	r0, #29
   850f2:	4b11      	ldr	r3, [pc, #68]	; (85138 <udd_disable+0x68>)
   850f4:	4798      	blx	r3
	udd_sleep_mode(false);
   850f6:	4620      	mov	r0, r4
   850f8:	4b10      	ldr	r3, [pc, #64]	; (8513c <udd_disable+0x6c>)
   850fa:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   850fc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85100:	b672      	cpsid	i
   85102:	f3bf 8f5f 	dmb	sy
   85106:	7034      	strb	r4, [r6, #0]
	--sleepmgr_locks[mode];
   85108:	490d      	ldr	r1, [pc, #52]	; (85140 <udd_disable+0x70>)
   8510a:	78ca      	ldrb	r2, [r1, #3]
   8510c:	3a01      	subs	r2, #1
   8510e:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   85110:	b923      	cbnz	r3, 8511c <udd_disable+0x4c>
		cpu_irq_enable();
   85112:	2201      	movs	r2, #1
   85114:	7032      	strb	r2, [r6, #0]
   85116:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8511a:	b662      	cpsie	i
	if (cpu_irq_is_enabled_flags(flags))
   8511c:	b92d      	cbnz	r5, 8512a <udd_disable+0x5a>
		cpu_irq_enable();
   8511e:	2201      	movs	r2, #1
   85120:	4b02      	ldr	r3, [pc, #8]	; (8512c <udd_disable+0x5c>)
   85122:	701a      	strb	r2, [r3, #0]
   85124:	f3bf 8f5f 	dmb	sy
   85128:	b662      	cpsie	i
   8512a:	bd70      	pop	{r4, r5, r6, pc}
   8512c:	20000a7c 	.word	0x20000a7c
   85130:	400a4000 	.word	0x400a4000
   85134:	00083d15 	.word	0x00083d15
   85138:	000844e9 	.word	0x000844e9
   8513c:	00084641 	.word	0x00084641
   85140:	20002994 	.word	0x20002994

00085144 <udd_attach>:
{
   85144:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85146:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   8514a:	b672      	cpsid	i
   8514c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85150:	2200      	movs	r2, #0
   85152:	4b1d      	ldr	r3, [pc, #116]	; (851c8 <udd_attach+0x84>)
   85154:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   85156:	2001      	movs	r0, #1
   85158:	4b1c      	ldr	r3, [pc, #112]	; (851cc <udd_attach+0x88>)
   8515a:	4798      	blx	r3
	udd_enable_periph_ck();
   8515c:	201d      	movs	r0, #29
   8515e:	4b1c      	ldr	r3, [pc, #112]	; (851d0 <udd_attach+0x8c>)
   85160:	4798      	blx	r3
	udd_attach_device();
   85162:	4b1c      	ldr	r3, [pc, #112]	; (851d4 <udd_attach+0x90>)
   85164:	681a      	ldr	r2, [r3, #0]
   85166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8516a:	601a      	str	r2, [r3, #0]
   8516c:	681a      	ldr	r2, [r3, #0]
   8516e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   85172:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   85174:	691a      	ldr	r2, [r3, #16]
   85176:	f042 0210 	orr.w	r2, r2, #16
   8517a:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   8517c:	691a      	ldr	r2, [r3, #16]
   8517e:	f042 0202 	orr.w	r2, r2, #2
   85182:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   85184:	691a      	ldr	r2, [r3, #16]
   85186:	f042 0220 	orr.w	r2, r2, #32
   8518a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   8518c:	691a      	ldr	r2, [r3, #16]
   8518e:	f042 0208 	orr.w	r2, r2, #8
   85192:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   85194:	691a      	ldr	r2, [r3, #16]
   85196:	f042 0204 	orr.w	r2, r2, #4
   8519a:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   8519c:	2208      	movs	r2, #8
   8519e:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   851a0:	2204      	movs	r2, #4
   851a2:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   851a4:	2210      	movs	r2, #16
   851a6:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   851a8:	2202      	movs	r2, #2
   851aa:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   851ac:	2220      	movs	r2, #32
   851ae:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   851b0:	201d      	movs	r0, #29
   851b2:	4b09      	ldr	r3, [pc, #36]	; (851d8 <udd_attach+0x94>)
   851b4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   851b6:	b92c      	cbnz	r4, 851c4 <udd_attach+0x80>
		cpu_irq_enable();
   851b8:	2201      	movs	r2, #1
   851ba:	4b03      	ldr	r3, [pc, #12]	; (851c8 <udd_attach+0x84>)
   851bc:	701a      	strb	r2, [r3, #0]
   851be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   851c2:	b662      	cpsie	i
   851c4:	bd10      	pop	{r4, pc}
   851c6:	bf00      	nop
   851c8:	20000a7c 	.word	0x20000a7c
   851cc:	00084641 	.word	0x00084641
   851d0:	000844b5 	.word	0x000844b5
   851d4:	400a4000 	.word	0x400a4000
   851d8:	000844e9 	.word	0x000844e9

000851dc <udd_enable>:
{
   851dc:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   851de:	4b2a      	ldr	r3, [pc, #168]	; (85288 <udd_enable+0xac>)
   851e0:	4798      	blx	r3
	udd_enable_periph_ck();
   851e2:	201d      	movs	r0, #29
   851e4:	4b29      	ldr	r3, [pc, #164]	; (8528c <udd_enable+0xb0>)
   851e6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   851e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   851ec:	b672      	cpsid	i
   851ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   851f2:	2200      	movs	r2, #0
   851f4:	4b26      	ldr	r3, [pc, #152]	; (85290 <udd_enable+0xb4>)
   851f6:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   851f8:	4926      	ldr	r1, [pc, #152]	; (85294 <udd_enable+0xb8>)
   851fa:	680b      	ldr	r3, [r1, #0]
   851fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85200:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   85202:	4b25      	ldr	r3, [pc, #148]	; (85298 <udd_enable+0xbc>)
   85204:	2150      	movs	r1, #80	; 0x50
   85206:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8520a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8520e:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   85210:	4822      	ldr	r0, [pc, #136]	; (8529c <udd_enable+0xc0>)
   85212:	0053      	lsls	r3, r2, #1
   85214:	1899      	adds	r1, r3, r2
   85216:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   8521a:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   8521c:	4413      	add	r3, r2
   8521e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   85222:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   85226:	f36f 0182 	bfc	r1, #2, #1
   8522a:	7519      	strb	r1, [r3, #20]
   8522c:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8522e:	2a06      	cmp	r2, #6
   85230:	d1ef      	bne.n	85212 <udd_enable+0x36>
	udd_high_speed_enable();
   85232:	4a18      	ldr	r2, [pc, #96]	; (85294 <udd_enable+0xb8>)
   85234:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85238:	f023 0303 	bic.w	r3, r3, #3
   8523c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   85240:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   85244:	4b16      	ldr	r3, [pc, #88]	; (852a0 <udd_enable+0xc4>)
   85246:	4798      	blx	r3
	udd_b_idle = false;
   85248:	2200      	movs	r2, #0
   8524a:	4b16      	ldr	r3, [pc, #88]	; (852a4 <udd_enable+0xc8>)
   8524c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8524e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85252:	b672      	cpsid	i
   85254:	f3bf 8f5f 	dmb	sy
   85258:	490d      	ldr	r1, [pc, #52]	; (85290 <udd_enable+0xb4>)
   8525a:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
   8525c:	4912      	ldr	r1, [pc, #72]	; (852a8 <udd_enable+0xcc>)
   8525e:	78ca      	ldrb	r2, [r1, #3]
   85260:	3201      	adds	r2, #1
   85262:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   85264:	b92b      	cbnz	r3, 85272 <udd_enable+0x96>
		cpu_irq_enable();
   85266:	2201      	movs	r2, #1
   85268:	4b09      	ldr	r3, [pc, #36]	; (85290 <udd_enable+0xb4>)
   8526a:	701a      	strb	r2, [r3, #0]
   8526c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85270:	b662      	cpsie	i
	udd_attach();
   85272:	4b0e      	ldr	r3, [pc, #56]	; (852ac <udd_enable+0xd0>)
   85274:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   85276:	b92c      	cbnz	r4, 85284 <udd_enable+0xa8>
		cpu_irq_enable();
   85278:	2201      	movs	r2, #1
   8527a:	4b05      	ldr	r3, [pc, #20]	; (85290 <udd_enable+0xb4>)
   8527c:	701a      	strb	r2, [r3, #0]
   8527e:	f3bf 8f5f 	dmb	sy
   85282:	b662      	cpsie	i
   85284:	bd10      	pop	{r4, pc}
   85286:	bf00      	nop
   85288:	00083ce1 	.word	0x00083ce1
   8528c:	000844b5 	.word	0x000844b5
   85290:	20000a7c 	.word	0x20000a7c
   85294:	400a4000 	.word	0x400a4000
   85298:	e000e100 	.word	0xe000e100
   8529c:	20002414 	.word	0x20002414
   852a0:	00084531 	.word	0x00084531
   852a4:	2000240a 	.word	0x2000240a
   852a8:	20002994 	.word	0x20002994
   852ac:	00085145 	.word	0x00085145

000852b0 <udd_detach>:
{
   852b0:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   852b2:	201d      	movs	r0, #29
   852b4:	4b08      	ldr	r3, [pc, #32]	; (852d8 <udd_detach+0x28>)
   852b6:	4798      	blx	r3
	udd_detach_device();
   852b8:	4b08      	ldr	r3, [pc, #32]	; (852dc <udd_detach+0x2c>)
   852ba:	681a      	ldr	r2, [r3, #0]
   852bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   852c0:	601a      	str	r2, [r3, #0]
   852c2:	681a      	ldr	r2, [r3, #0]
   852c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   852c8:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   852ca:	201d      	movs	r0, #29
   852cc:	4b04      	ldr	r3, [pc, #16]	; (852e0 <udd_detach+0x30>)
   852ce:	4798      	blx	r3
	udd_sleep_mode(false);
   852d0:	2000      	movs	r0, #0
   852d2:	4b04      	ldr	r3, [pc, #16]	; (852e4 <udd_detach+0x34>)
   852d4:	4798      	blx	r3
   852d6:	bd08      	pop	{r3, pc}
   852d8:	000844b5 	.word	0x000844b5
   852dc:	400a4000 	.word	0x400a4000
   852e0:	000844e9 	.word	0x000844e9
   852e4:	00084641 	.word	0x00084641

000852e8 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   852e8:	4b02      	ldr	r3, [pc, #8]	; (852f4 <udd_is_high_speed+0xc>)
   852ea:	6958      	ldr	r0, [r3, #20]
}
   852ec:	f000 0001 	and.w	r0, r0, #1
   852f0:	4770      	bx	lr
   852f2:	bf00      	nop
   852f4:	400a4000 	.word	0x400a4000

000852f8 <udd_set_address>:
	udd_disable_address();
   852f8:	4b08      	ldr	r3, [pc, #32]	; (8531c <udd_set_address+0x24>)
   852fa:	681a      	ldr	r2, [r3, #0]
   852fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   85300:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   85302:	681a      	ldr	r2, [r3, #0]
   85304:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8530c:	4302      	orrs	r2, r0
   8530e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85310:	681a      	ldr	r2, [r3, #0]
   85312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85316:	601a      	str	r2, [r3, #0]
   85318:	4770      	bx	lr
   8531a:	bf00      	nop
   8531c:	400a4000 	.word	0x400a4000

00085320 <udd_getaddress>:
	return udd_get_configured_address();
   85320:	4b02      	ldr	r3, [pc, #8]	; (8532c <udd_getaddress+0xc>)
   85322:	6818      	ldr	r0, [r3, #0]
}
   85324:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85328:	4770      	bx	lr
   8532a:	bf00      	nop
   8532c:	400a4000 	.word	0x400a4000

00085330 <udd_get_frame_number>:
	return udd_frame_number();
   85330:	4b02      	ldr	r3, [pc, #8]	; (8533c <udd_get_frame_number+0xc>)
   85332:	6858      	ldr	r0, [r3, #4]
}
   85334:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   85338:	4770      	bx	lr
   8533a:	bf00      	nop
   8533c:	400a4000 	.word	0x400a4000

00085340 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   85340:	4b02      	ldr	r3, [pc, #8]	; (8534c <udd_get_micro_frame_number+0xc>)
   85342:	6858      	ldr	r0, [r3, #4]
}
   85344:	f000 0007 	and.w	r0, r0, #7
   85348:	4770      	bx	lr
   8534a:	bf00      	nop
   8534c:	400a4000 	.word	0x400a4000

00085350 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   85350:	4b01      	ldr	r3, [pc, #4]	; (85358 <udd_set_setup_payload+0x8>)
   85352:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85354:	8199      	strh	r1, [r3, #12]
   85356:	4770      	bx	lr
   85358:	200029a8 	.word	0x200029a8

0008535c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8535c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85360:	2a06      	cmp	r2, #6
   85362:	d900      	bls.n	85366 <udd_ep_free+0xa>
   85364:	4770      	bx	lr
{
   85366:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   85368:	0153      	lsls	r3, r2, #5
   8536a:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   8536e:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   85372:	2101      	movs	r1, #1
   85374:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   85378:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   8537a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   8537e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   85382:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85386:	1e56      	subs	r6, r2, #1
   85388:	4c07      	ldr	r4, [pc, #28]	; (853a8 <udd_ep_free+0x4c>)
   8538a:	fa06 f501 	lsl.w	r5, r6, r1
   8538e:	19a8      	adds	r0, r5, r6
   85390:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85394:	4b05      	ldr	r3, [pc, #20]	; (853ac <udd_ep_free+0x50>)
   85396:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85398:	4435      	add	r5, r6
   8539a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8539e:	7d23      	ldrb	r3, [r4, #20]
   853a0:	f36f 0382 	bfc	r3, #2, #1
   853a4:	7523      	strb	r3, [r4, #20]
   853a6:	bd70      	pop	{r4, r5, r6, pc}
   853a8:	20002414 	.word	0x20002414
   853ac:	000848e9 	.word	0x000848e9

000853b0 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   853b0:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   853b4:	0143      	lsls	r3, r0, #5
   853b6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   853ba:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   853be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   853c2:	f013 0f20 	tst.w	r3, #32
   853c6:	d109      	bne.n	853dc <udd_ep_is_halted+0x2c>
   853c8:	3801      	subs	r0, #1
   853ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   853ce:	4b04      	ldr	r3, [pc, #16]	; (853e0 <udd_ep_is_halted+0x30>)
   853d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   853d4:	7d00      	ldrb	r0, [r0, #20]
   853d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
   853da:	4770      	bx	lr
   853dc:	2001      	movs	r0, #1
}
   853de:	4770      	bx	lr
   853e0:	20002414 	.word	0x20002414

000853e4 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   853e4:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   853e8:	2b06      	cmp	r3, #6
   853ea:	d852      	bhi.n	85492 <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   853ec:	015a      	lsls	r2, r3, #5
   853ee:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   853f2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   853f6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   853fa:	f012 0f20 	tst.w	r2, #32
   853fe:	d14a      	bne.n	85496 <udd_ep_set_halt+0xb2>
{
   85400:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   85402:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85404:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   85408:	4a26      	ldr	r2, [pc, #152]	; (854a4 <udd_ep_set_halt+0xc0>)
   8540a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8540e:	7d12      	ldrb	r2, [r2, #20]
   85410:	f012 0f04 	tst.w	r2, #4
   85414:	d141      	bne.n	8549a <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   85416:	f012 0f01 	tst.w	r2, #1
   8541a:	d141      	bne.n	854a0 <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8541c:	f010 0f80 	tst.w	r0, #128	; 0x80
   85420:	d113      	bne.n	8544a <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   85422:	015b      	lsls	r3, r3, #5
   85424:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85428:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8542c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   85430:	f022 0202 	bic.w	r2, r2, #2
   85434:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   85438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8543c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   85440:	2220      	movs	r2, #32
   85442:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   85446:	2001      	movs	r0, #1
   85448:	e028      	b.n	8549c <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8544a:	015a      	lsls	r2, r3, #5
   8544c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85450:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85454:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85458:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   8545c:	d0e1      	beq.n	85422 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   8545e:	4a11      	ldr	r2, [pc, #68]	; (854a4 <udd_ep_set_halt+0xc0>)
   85460:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   85464:	f101 0210 	add.w	r2, r1, #16
   85468:	7d09      	ldrb	r1, [r1, #20]
   8546a:	f041 0104 	orr.w	r1, r1, #4
   8546e:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   85470:	490d      	ldr	r1, [pc, #52]	; (854a8 <udd_ep_set_halt+0xc4>)
   85472:	f103 0208 	add.w	r2, r3, #8
   85476:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   8547a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8547e:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   85480:	6908      	ldr	r0, [r1, #16]
   85482:	f44f 7280 	mov.w	r2, #256	; 0x100
   85486:	fa02 f303 	lsl.w	r3, r2, r3
   8548a:	4303      	orrs	r3, r0
   8548c:	610b      	str	r3, [r1, #16]
			return true;
   8548e:	2001      	movs	r0, #1
   85490:	e004      	b.n	8549c <udd_ep_set_halt+0xb8>
		return false;
   85492:	2000      	movs	r0, #0
   85494:	4770      	bx	lr
		return true; // Already STALL
   85496:	2001      	movs	r0, #1
   85498:	4770      	bx	lr
   8549a:	2001      	movs	r0, #1
}
   8549c:	bc10      	pop	{r4}
   8549e:	4770      	bx	lr
		return false; // Job on going, stall impossible
   854a0:	2000      	movs	r0, #0
   854a2:	e7fb      	b.n	8549c <udd_ep_set_halt+0xb8>
   854a4:	20002414 	.word	0x20002414
   854a8:	400a4000 	.word	0x400a4000

000854ac <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   854ac:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   854b0:	2806      	cmp	r0, #6
   854b2:	d864      	bhi.n	8557e <udd_ep_clear_halt+0xd2>
{
   854b4:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   854b6:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   854b8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   854bc:	4b37      	ldr	r3, [pc, #220]	; (8559c <udd_ep_clear_halt+0xf0>)
   854be:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   854c2:	7d1b      	ldrb	r3, [r3, #20]
   854c4:	f013 0f04 	tst.w	r3, #4
   854c8:	d05b      	beq.n	85582 <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   854ca:	460b      	mov	r3, r1
   854cc:	4933      	ldr	r1, [pc, #204]	; (8559c <udd_ep_clear_halt+0xf0>)
   854ce:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   854d2:	7d19      	ldrb	r1, [r3, #20]
   854d4:	f36f 0182 	bfc	r1, #2, #1
   854d8:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   854da:	4b31      	ldr	r3, [pc, #196]	; (855a0 <udd_ep_clear_halt+0xf4>)
   854dc:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   854e0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   854e4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   854e8:	6919      	ldr	r1, [r3, #16]
   854ea:	f44f 7480 	mov.w	r4, #256	; 0x100
   854ee:	4084      	lsls	r4, r0
   854f0:	ea21 0104 	bic.w	r1, r1, r4
   854f4:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   854f6:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   854fa:	f013 0f20 	tst.w	r3, #32
   854fe:	d024      	beq.n	8554a <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   85500:	0143      	lsls	r3, r0, #5
   85502:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85506:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8550a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8550e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85512:	d00b      	beq.n	8552c <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   85514:	0143      	lsls	r3, r0, #5
   85516:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8551a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8551e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85522:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   85526:	2140      	movs	r1, #64	; 0x40
   85528:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   8552c:	0143      	lsls	r3, r0, #5
   8552e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85532:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85536:	2120      	movs	r1, #32
   85538:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   8553c:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   8553e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   85542:	f043 0302 	orr.w	r3, r3, #2
   85546:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   8554a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   8554e:	4913      	ldr	r1, [pc, #76]	; (8559c <udd_ep_clear_halt+0xf0>)
   85550:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85554:	7d1b      	ldrb	r3, [r3, #20]
   85556:	f013 0f01 	tst.w	r3, #1
   8555a:	d101      	bne.n	85560 <udd_ep_clear_halt+0xb4>
	return true;
   8555c:	2001      	movs	r0, #1
   8555e:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   85560:	4608      	mov	r0, r1
   85562:	0051      	lsls	r1, r2, #1
   85564:	188b      	adds	r3, r1, r2
   85566:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   8556a:	7d1c      	ldrb	r4, [r3, #20]
   8556c:	f36f 0400 	bfc	r4, #0, #1
   85570:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   85572:	440a      	add	r2, r1
   85574:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   85578:	4798      	blx	r3
	return true;
   8557a:	2001      	movs	r0, #1
   8557c:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   8557e:	2000      	movs	r0, #0
   85580:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   85582:	0143      	lsls	r3, r0, #5
   85584:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85588:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8558c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85590:	f013 0f20 	tst.w	r3, #32
   85594:	d1b4      	bne.n	85500 <udd_ep_clear_halt+0x54>
	return true;
   85596:	2001      	movs	r0, #1
}
   85598:	bd38      	pop	{r3, r4, r5, pc}
   8559a:	bf00      	nop
   8559c:	20002414 	.word	0x20002414
   855a0:	400a4000 	.word	0x400a4000

000855a4 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   855a4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   855a8:	2806      	cmp	r0, #6
   855aa:	d861      	bhi.n	85670 <udd_ep_run+0xcc>
{
   855ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   855ae:	0144      	lsls	r4, r0, #5
   855b0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   855b4:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   855b8:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   855bc:	f014 0f01 	tst.w	r4, #1
   855c0:	d058      	beq.n	85674 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   855c2:	0144      	lsls	r4, r0, #5
   855c4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   855c8:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   855cc:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   855d0:	f014 0f20 	tst.w	r4, #32
   855d4:	d150      	bne.n	85678 <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   855d6:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   855d8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   855dc:	4d29      	ldr	r5, [pc, #164]	; (85684 <udd_ep_run+0xe0>)
   855de:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   855e2:	7d2d      	ldrb	r5, [r5, #20]
   855e4:	f015 0f04 	tst.w	r5, #4
   855e8:	d148      	bne.n	8567c <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   855ea:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   855ee:	b672      	cpsid	i
   855f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   855f4:	f04f 0e00 	mov.w	lr, #0
   855f8:	4e23      	ldr	r6, [pc, #140]	; (85688 <udd_ep_run+0xe4>)
   855fa:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   855fe:	f015 0f01 	tst.w	r5, #1
   85602:	d008      	beq.n	85616 <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   85604:	2f00      	cmp	r7, #0
   85606:	d13b      	bne.n	85680 <udd_ep_run+0xdc>
		cpu_irq_enable();
   85608:	2201      	movs	r2, #1
   8560a:	7032      	strb	r2, [r6, #0]
   8560c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85610:	b662      	cpsie	i
		return false; // Job already on going
   85612:	4670      	mov	r0, lr
   85614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   85616:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8561a:	4e1a      	ldr	r6, [pc, #104]	; (85684 <udd_ep_run+0xe0>)
   8561c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85620:	7d2e      	ldrb	r6, [r5, #20]
   85622:	f046 0601 	orr.w	r6, r6, #1
   85626:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85628:	b92f      	cbnz	r7, 85636 <udd_ep_run+0x92>
		cpu_irq_enable();
   8562a:	2601      	movs	r6, #1
   8562c:	4d16      	ldr	r5, [pc, #88]	; (85688 <udd_ep_run+0xe4>)
   8562e:	702e      	strb	r6, [r5, #0]
   85630:	f3bf 8f5f 	dmb	sy
   85634:	b662      	cpsie	i
	ptr_job->buf = buf;
   85636:	4f13      	ldr	r7, [pc, #76]	; (85684 <udd_ep_run+0xe0>)
   85638:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8563c:	00ed      	lsls	r5, r5, #3
   8563e:	197e      	adds	r6, r7, r5
   85640:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   85642:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   85644:	2200      	movs	r2, #0
   85646:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   85648:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   8564a:	9a06      	ldr	r2, [sp, #24]
   8564c:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8564e:	b911      	cbnz	r1, 85656 <udd_ep_run+0xb2>
   85650:	fab3 f183 	clz	r1, r3
   85654:	0949      	lsrs	r1, r1, #5
   85656:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   8565a:	4b0a      	ldr	r3, [pc, #40]	; (85684 <udd_ep_run+0xe0>)
   8565c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   85660:	7d23      	ldrb	r3, [r4, #20]
   85662:	f361 0341 	bfi	r3, r1, #1, #1
   85666:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   85668:	4b08      	ldr	r3, [pc, #32]	; (8568c <udd_ep_run+0xe8>)
   8566a:	4798      	blx	r3
	return true;
   8566c:	2001      	movs	r0, #1
   8566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   85670:	2000      	movs	r0, #0
   85672:	4770      	bx	lr
		return false; // Endpoint is halted
   85674:	2000      	movs	r0, #0
   85676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85678:	2000      	movs	r0, #0
   8567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8567c:	2000      	movs	r0, #0
   8567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   85680:	2000      	movs	r0, #0
}
   85682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85684:	20002414 	.word	0x20002414
   85688:	20000a7c 	.word	0x20000a7c
   8568c:	00084921 	.word	0x00084921

00085690 <udd_ep_alloc>:
{
   85690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85694:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85696:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   8569a:	2e06      	cmp	r6, #6
   8569c:	f200 812a 	bhi.w	858f4 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   856a0:	0173      	lsls	r3, r6, #5
   856a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   856a6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   856aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   856ae:	f013 0301 	ands.w	r3, r3, #1
   856b2:	f040 8124 	bne.w	858fe <udd_ep_alloc+0x26e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   856b6:	f001 0403 	and.w	r4, r1, #3
   856ba:	2c02      	cmp	r4, #2
   856bc:	d03f      	beq.n	8573e <udd_ep_alloc+0xae>
   856be:	2c03      	cmp	r4, #3
   856c0:	d04b      	beq.n	8575a <udd_ep_alloc+0xca>
   856c2:	2c01      	cmp	r4, #1
   856c4:	d001      	beq.n	856ca <udd_ep_alloc+0x3a>
		return false;
   856c6:	2300      	movs	r3, #0
   856c8:	e115      	b.n	858f6 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   856ca:	b136      	cbz	r6, 856da <udd_ep_alloc+0x4a>
   856cc:	1ef7      	subs	r7, r6, #3
   856ce:	b2ff      	uxtb	r7, r7
   856d0:	2f01      	cmp	r7, #1
   856d2:	bf94      	ite	ls
   856d4:	2700      	movls	r7, #0
   856d6:	2701      	movhi	r7, #1
   856d8:	e000      	b.n	856dc <udd_ep_alloc+0x4c>
   856da:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   856dc:	f04f 0c02 	mov.w	ip, #2
	if (b_iso_hbw) {
   856e0:	b3a7      	cbz	r7, 8574c <udd_ep_alloc+0xbc>
		switch(MaxEndpointSize & (0x3u << 11)) {
   856e2:	f402 54c0 	and.w	r4, r2, #6144	; 0x1800
   856e6:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   856ea:	d03a      	beq.n	85762 <udd_ep_alloc+0xd2>
			nb_tran = 1;
   856ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   856f0:	bf0c      	ite	eq
   856f2:	f04f 0e03 	moveq.w	lr, #3
   856f6:	f04f 0e01 	movne.w	lr, #1
		MaxEndpointSize &= ~(0x3u << 11);
   856fa:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   856fe:	b292      	uxth	r2, r2
   85700:	0174      	lsls	r4, r6, #5
   85702:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85706:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8570a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   8570e:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
   85712:	f025 0503 	bic.w	r5, r5, #3
   85716:	0109      	lsls	r1, r1, #4
   85718:	f001 0130 	and.w	r1, r1, #48	; 0x30
   8571c:	b240      	sxtb	r0, r0
   8571e:	2800      	cmp	r0, #0
   85720:	bfac      	ite	ge
   85722:	4618      	movge	r0, r3
   85724:	2008      	movlt	r0, #8
   85726:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   8572a:	fa1f f888 	uxth.w	r8, r8
   8572e:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   85732:	d319      	bcc.n	85768 <udd_ep_alloc+0xd8>
   85734:	2a08      	cmp	r2, #8
   85736:	d932      	bls.n	8579e <udd_ep_alloc+0x10e>
   85738:	0052      	lsls	r2, r2, #1
   8573a:	3a01      	subs	r2, #1
   8573c:	e016      	b.n	8576c <udd_ep_alloc+0xdc>
	bool b_iso_hbw = false;
   8573e:	2700      	movs	r7, #0
   85740:	2e03      	cmp	r6, #3
   85742:	bf34      	ite	cc
   85744:	f04f 0c02 	movcc.w	ip, #2
   85748:	f04f 0c01 	movcs.w	ip, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8574c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85750:	f040 80d7 	bne.w	85902 <udd_ep_alloc+0x272>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   85754:	f04f 0e00 	mov.w	lr, #0
   85758:	e7d2      	b.n	85700 <udd_ep_alloc+0x70>
	bool b_iso_hbw = false;
   8575a:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8575c:	f04f 0c01 	mov.w	ip, #1
   85760:	e7be      	b.n	856e0 <udd_ep_alloc+0x50>
			nb_tran = 2;
   85762:	f04f 0e02 	mov.w	lr, #2
   85766:	e7c8      	b.n	856fa <udd_ep_alloc+0x6a>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85768:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8576c:	fab2 f282 	clz	r2, r2
   85770:	ea41 1c8c 	orr.w	ip, r1, ip, lsl #6
   85774:	ea4c 0c00 	orr.w	ip, ip, r0
   85778:	f1c2 021c 	rsb	r2, r2, #28
   8577c:	ea4c 0202 	orr.w	r2, ip, r2
   85780:	b10f      	cbz	r7, 85786 <udd_ep_alloc+0xf6>
   85782:	ea4f 230e 	mov.w	r3, lr, lsl #8
   85786:	4313      	orrs	r3, r2
   85788:	f3c3 0309 	ubfx	r3, r3, #0, #10
   8578c:	432b      	orrs	r3, r5
   8578e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   85792:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   85796:	2b00      	cmp	r3, #0
   85798:	db03      	blt.n	857a2 <udd_ep_alloc+0x112>
		return false;
   8579a:	2300      	movs	r3, #0
   8579c:	e0ab      	b.n	858f6 <udd_ep_alloc+0x266>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8579e:	220f      	movs	r2, #15
   857a0:	e7e4      	b.n	8576c <udd_ep_alloc+0xdc>
	udd_enable_endpoint(ep);
   857a2:	2301      	movs	r3, #1
   857a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   857a8:	2306      	movs	r3, #6
   857aa:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   857ac:	4857      	ldr	r0, [pc, #348]	; (8590c <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   857ae:	2401      	movs	r4, #1
   857b0:	e003      	b.n	857ba <udd_ep_alloc+0x12a>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   857b2:	3b01      	subs	r3, #1
   857b4:	b2db      	uxtb	r3, r3
   857b6:	429e      	cmp	r6, r3
   857b8:	d81e      	bhi.n	857f8 <udd_ep_alloc+0x168>
		if (Is_udd_endpoint_enabled(i)) {
   857ba:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   857be:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   857c2:	f012 0f01 	tst.w	r2, #1
   857c6:	d0f4      	beq.n	857b2 <udd_ep_alloc+0x122>
   857c8:	015a      	lsls	r2, r3, #5
   857ca:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   857ce:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   857d2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   857d6:	f3c1 1181 	ubfx	r1, r1, #6, #2
   857da:	005d      	lsls	r5, r3, #1
   857dc:	40a9      	lsls	r1, r5
   857de:	430f      	orrs	r7, r1
   857e0:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   857e2:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   857e6:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   857ea:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   857ee:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   857f2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   857f6:	e7dc      	b.n	857b2 <udd_ep_alloc+0x122>
   857f8:	0075      	lsls	r5, r6, #1
   857fa:	4634      	mov	r4, r6
   857fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   85800:	4b43      	ldr	r3, [pc, #268]	; (85910 <udd_ep_alloc+0x280>)
   85802:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   85806:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   85808:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   8580c:	f8df a104 	ldr.w	sl, [pc, #260]	; 85914 <udd_ep_alloc+0x284>
   85810:	e021      	b.n	85856 <udd_ep_alloc+0x1c6>
			if (NULL == ptr_job->call_trans) {
   85812:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   85816:	4a3e      	ldr	r2, [pc, #248]	; (85910 <udd_ep_alloc+0x280>)
   85818:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   8581c:	2c00      	cmp	r4, #0
   8581e:	d072      	beq.n	85906 <udd_ep_alloc+0x276>
			if (Is_udd_endpoint_in(i)) {
   85820:	f10e 0308 	add.w	r3, lr, #8
   85824:	015b      	lsls	r3, r3, #5
   85826:	4a39      	ldr	r2, [pc, #228]	; (8590c <udd_ep_alloc+0x27c>)
   85828:	58d3      	ldr	r3, [r2, r3]
   8582a:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   8582e:	bf18      	it	ne
   85830:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85834:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   85838:	4b35      	ldr	r3, [pc, #212]	; (85910 <udd_ep_alloc+0x280>)
   8583a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   8583e:	4602      	mov	r2, r0
   85840:	68c9      	ldr	r1, [r1, #12]
   85842:	2001      	movs	r0, #1
   85844:	47a0      	blx	r4
			return false;
   85846:	2300      	movs	r3, #0
   85848:	e055      	b.n	858f6 <udd_ep_alloc+0x266>
   8584a:	3502      	adds	r5, #2
   8584c:	3401      	adds	r4, #1
   8584e:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85850:	b2e3      	uxtb	r3, r4
   85852:	2b06      	cmp	r3, #6
   85854:	d84c      	bhi.n	858f0 <udd_ep_alloc+0x260>
   85856:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   85858:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   8585a:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   8585e:	f012 0203 	ands.w	r2, r2, #3
   85862:	d0f2      	beq.n	8584a <udd_ep_alloc+0x1ba>
   85864:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   85866:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   8586a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   8586e:	f893 b014 	ldrb.w	fp, [r3, #20]
   85872:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   85876:	f36f 0b00 	bfc	fp, #0, #1
   8587a:	f883 b014 	strb.w	fp, [r3, #20]
   8587e:	0163      	lsls	r3, r4, #5
   85880:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85884:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   85888:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   8588c:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   85890:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   85894:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   85898:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   8589c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   858a0:	2a00      	cmp	r2, #0
   858a2:	dab6      	bge.n	85812 <udd_ep_alloc+0x182>
		udd_enable_endpoint_bank_autoswitch(i);
   858a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   858a8:	f042 0202 	orr.w	r2, r2, #2
   858ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   858b0:	f1bc 0f00 	cmp.w	ip, #0
   858b4:	d0c9      	beq.n	8584a <udd_ep_alloc+0x1ba>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   858b6:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   858ba:	f856 2c08 	ldr.w	r2, [r6, #-8]
   858be:	1a9a      	subs	r2, r3, r2
   858c0:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   858c4:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   858c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   858cc:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   858d0:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   858d4:	f856 1c18 	ldr.w	r1, [r6, #-24]
   858d8:	9100      	str	r1, [sp, #0]
   858da:	1a9b      	subs	r3, r3, r2
   858dc:	f856 1c14 	ldr.w	r1, [r6, #-20]
   858e0:	440a      	add	r2, r1
   858e2:	f3ce 0140 	ubfx	r1, lr, #1, #1
   858e6:	47d0      	blx	sl
			if (!b_restart) {
   858e8:	4603      	mov	r3, r0
   858ea:	2800      	cmp	r0, #0
   858ec:	d1ad      	bne.n	8584a <udd_ep_alloc+0x1ba>
   858ee:	e002      	b.n	858f6 <udd_ep_alloc+0x266>
	return true;
   858f0:	2301      	movs	r3, #1
   858f2:	e000      	b.n	858f6 <udd_ep_alloc+0x266>
		return false;
   858f4:	2300      	movs	r3, #0
}
   858f6:	4618      	mov	r0, r3
   858f8:	b003      	add	sp, #12
   858fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   858fe:	2300      	movs	r3, #0
   85900:	e7f9      	b.n	858f6 <udd_ep_alloc+0x266>
		return false;
   85902:	2300      	movs	r3, #0
   85904:	e7f7      	b.n	858f6 <udd_ep_alloc+0x266>
				return false;
   85906:	2300      	movs	r3, #0
   85908:	e7f5      	b.n	858f6 <udd_ep_alloc+0x266>
   8590a:	bf00      	nop
   8590c:	400a4000 	.word	0x400a4000
   85910:	20002414 	.word	0x20002414
   85914:	000855a5 	.word	0x000855a5

00085918 <udd_ep_abort>:
{
   85918:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8591a:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8591e:	4b13      	ldr	r3, [pc, #76]	; (8596c <udd_ep_abort+0x54>)
   85920:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   85924:	2100      	movs	r1, #0
   85926:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   85928:	f010 0f80 	tst.w	r0, #128	; 0x80
   8592c:	d116      	bne.n	8595c <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8592e:	1e50      	subs	r0, r2, #1
   85930:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85934:	2101      	movs	r1, #1
   85936:	4b0e      	ldr	r3, [pc, #56]	; (85970 <udd_ep_abort+0x58>)
   85938:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   8593c:	4b0d      	ldr	r3, [pc, #52]	; (85974 <udd_ep_abort+0x5c>)
   8593e:	4798      	blx	r3
   85940:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   85942:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   85946:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   8594a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8594e:	d1fa      	bne.n	85946 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   85950:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   85954:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85958:	d1f3      	bne.n	85942 <udd_ep_abort+0x2a>
   8595a:	e7e8      	b.n	8592e <udd_ep_abort+0x16>
   8595c:	4906      	ldr	r1, [pc, #24]	; (85978 <udd_ep_abort+0x60>)
   8595e:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   85962:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   85966:	4601      	mov	r1, r0
   85968:	e7f2      	b.n	85950 <udd_ep_abort+0x38>
   8596a:	bf00      	nop
   8596c:	400a4300 	.word	0x400a4300
   85970:	20002414 	.word	0x20002414
   85974:	000848e9 	.word	0x000848e9
   85978:	400a4000 	.word	0x400a4000

0008597c <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   8597c:	4a07      	ldr	r2, [pc, #28]	; (8599c <udd_test_mode_j+0x20>)
   8597e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85982:	f023 0303 	bic.w	r3, r3, #3
   85986:	f043 0302 	orr.w	r3, r3, #2
   8598a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8598e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85992:	f043 0304 	orr.w	r3, r3, #4
   85996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   8599a:	4770      	bx	lr
   8599c:	400a4000 	.word	0x400a4000

000859a0 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   859a0:	4a07      	ldr	r2, [pc, #28]	; (859c0 <udd_test_mode_k+0x20>)
   859a2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   859a6:	f023 0303 	bic.w	r3, r3, #3
   859aa:	f043 0302 	orr.w	r3, r3, #2
   859ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   859b2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   859b6:	f043 0308 	orr.w	r3, r3, #8
   859ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   859be:	4770      	bx	lr
   859c0:	400a4000 	.word	0x400a4000

000859c4 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   859c4:	4a04      	ldr	r2, [pc, #16]	; (859d8 <udd_test_mode_se0_nak+0x14>)
   859c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   859ca:	f023 0303 	bic.w	r3, r3, #3
   859ce:	f043 0302 	orr.w	r3, r3, #2
   859d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   859d6:	4770      	bx	lr
   859d8:	400a4000 	.word	0x400a4000

000859dc <udd_test_mode_packet>:
{
   859dc:	b430      	push	{r4, r5}
   859de:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   859e0:	466c      	mov	r4, sp
   859e2:	4d20      	ldr	r5, [pc, #128]	; (85a64 <udd_test_mode_packet+0x88>)
   859e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   859e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   859e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   859ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   859ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   859ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   859f0:	e895 0003 	ldmia.w	r5, {r0, r1}
   859f4:	f844 0b04 	str.w	r0, [r4], #4
   859f8:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   859fa:	4b1b      	ldr	r3, [pc, #108]	; (85a68 <udd_test_mode_packet+0x8c>)
   859fc:	2101      	movs	r1, #1
   859fe:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85a02:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85a06:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   85a0a:	f022 0203 	bic.w	r2, r2, #3
   85a0e:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   85a12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85a16:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   85a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85a1e:	f022 0203 	bic.w	r2, r2, #3
   85a22:	f042 0202 	orr.w	r2, r2, #2
   85a26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85a2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   85a2e:	f042 0210 	orr.w	r2, r2, #16
   85a32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   85a36:	4a0d      	ldr	r2, [pc, #52]	; (85a6c <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   85a38:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   85a3a:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   85a3e:	f813 1b01 	ldrb.w	r1, [r3], #1
   85a42:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   85a46:	4283      	cmp	r3, r0
   85a48:	d1f9      	bne.n	85a3e <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   85a4a:	4b07      	ldr	r3, [pc, #28]	; (85a68 <udd_test_mode_packet+0x8c>)
   85a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85a50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85a58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85a5c:	b00e      	add	sp, #56	; 0x38
   85a5e:	bc30      	pop	{r4, r5}
   85a60:	4770      	bx	lr
   85a62:	bf00      	nop
   85a64:	0008c5f8 	.word	0x0008c5f8
   85a68:	400a4000 	.word	0x400a4000
   85a6c:	2017ffff 	.word	0x2017ffff

00085a70 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   85a70:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   85a72:	010b      	lsls	r3, r1, #4
   85a74:	4293      	cmp	r3, r2
   85a76:	d914      	bls.n	85aa2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85a78:	00c9      	lsls	r1, r1, #3
   85a7a:	084b      	lsrs	r3, r1, #1
   85a7c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85a80:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   85a84:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85a86:	1e5c      	subs	r4, r3, #1
   85a88:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85a8c:	428c      	cmp	r4, r1
   85a8e:	d901      	bls.n	85a94 <usart_set_async_baudrate+0x24>
		return 1;
   85a90:	2001      	movs	r0, #1
   85a92:	e017      	b.n	85ac4 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   85a94:	6841      	ldr	r1, [r0, #4]
   85a96:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   85a9a:	6041      	str	r1, [r0, #4]
   85a9c:	e00c      	b.n	85ab8 <usart_set_async_baudrate+0x48>
		return 1;
   85a9e:	2001      	movs	r0, #1
   85aa0:	e010      	b.n	85ac4 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85aa2:	0859      	lsrs	r1, r3, #1
   85aa4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85aa8:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   85aac:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85aae:	1e5c      	subs	r4, r3, #1
   85ab0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85ab4:	428c      	cmp	r4, r1
   85ab6:	d8f2      	bhi.n	85a9e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   85ab8:	0412      	lsls	r2, r2, #16
   85aba:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   85abe:	431a      	orrs	r2, r3
   85ac0:	6202      	str	r2, [r0, #32]

	return 0;
   85ac2:	2000      	movs	r0, #0
}
   85ac4:	bc10      	pop	{r4}
   85ac6:	4770      	bx	lr

00085ac8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   85ac8:	4b0a      	ldr	r3, [pc, #40]	; (85af4 <usart_reset+0x2c>)
   85aca:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   85ace:	2300      	movs	r3, #0
   85ad0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   85ad2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85ad4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   85ad6:	2388      	movs	r3, #136	; 0x88
   85ad8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   85ada:	2324      	movs	r3, #36	; 0x24
   85adc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   85ade:	f44f 7380 	mov.w	r3, #256	; 0x100
   85ae2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   85ae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   85ae8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   85aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   85aee:	6003      	str	r3, [r0, #0]
   85af0:	4770      	bx	lr
   85af2:	bf00      	nop
   85af4:	55534100 	.word	0x55534100

00085af8 <usart_init_rs232>:
{
   85af8:	b570      	push	{r4, r5, r6, lr}
   85afa:	4605      	mov	r5, r0
   85afc:	460c      	mov	r4, r1
   85afe:	4616      	mov	r6, r2
	usart_reset(p_usart);
   85b00:	4b0f      	ldr	r3, [pc, #60]	; (85b40 <usart_init_rs232+0x48>)
   85b02:	4798      	blx	r3
	ul_reg_val = 0;
   85b04:	2200      	movs	r2, #0
   85b06:	4b0f      	ldr	r3, [pc, #60]	; (85b44 <usart_init_rs232+0x4c>)
   85b08:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   85b0a:	b1a4      	cbz	r4, 85b36 <usart_init_rs232+0x3e>
   85b0c:	4632      	mov	r2, r6
   85b0e:	6821      	ldr	r1, [r4, #0]
   85b10:	4628      	mov	r0, r5
   85b12:	4b0d      	ldr	r3, [pc, #52]	; (85b48 <usart_init_rs232+0x50>)
   85b14:	4798      	blx	r3
   85b16:	4602      	mov	r2, r0
   85b18:	b978      	cbnz	r0, 85b3a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85b1a:	6863      	ldr	r3, [r4, #4]
   85b1c:	68a1      	ldr	r1, [r4, #8]
   85b1e:	430b      	orrs	r3, r1
   85b20:	6921      	ldr	r1, [r4, #16]
   85b22:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85b24:	68e1      	ldr	r1, [r4, #12]
   85b26:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85b28:	4906      	ldr	r1, [pc, #24]	; (85b44 <usart_init_rs232+0x4c>)
   85b2a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   85b2c:	6869      	ldr	r1, [r5, #4]
   85b2e:	430b      	orrs	r3, r1
   85b30:	606b      	str	r3, [r5, #4]
}
   85b32:	4610      	mov	r0, r2
   85b34:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85b36:	2201      	movs	r2, #1
   85b38:	e7fb      	b.n	85b32 <usart_init_rs232+0x3a>
   85b3a:	2201      	movs	r2, #1
   85b3c:	e7f9      	b.n	85b32 <usart_init_rs232+0x3a>
   85b3e:	bf00      	nop
   85b40:	00085ac9 	.word	0x00085ac9
   85b44:	200024a4 	.word	0x200024a4
   85b48:	00085a71 	.word	0x00085a71

00085b4c <usart_init_sync_master>:
{
   85b4c:	b570      	push	{r4, r5, r6, lr}
   85b4e:	4604      	mov	r4, r0
   85b50:	460e      	mov	r6, r1
   85b52:	4615      	mov	r5, r2
	usart_reset(p_usart);
   85b54:	4b15      	ldr	r3, [pc, #84]	; (85bac <usart_init_sync_master+0x60>)
   85b56:	4798      	blx	r3
	ul_reg_val = 0;
   85b58:	2200      	movs	r2, #0
   85b5a:	4b15      	ldr	r3, [pc, #84]	; (85bb0 <usart_init_sync_master+0x64>)
   85b5c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   85b5e:	b306      	cbz	r6, 85ba2 <usart_init_sync_master+0x56>
   85b60:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   85b62:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   85b66:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85b6a:	1e51      	subs	r1, r2, #1
   85b6c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   85b70:	4299      	cmp	r1, r3
   85b72:	d818      	bhi.n	85ba6 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85b74:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85b76:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   85b78:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   85b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85b80:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   85b82:	6873      	ldr	r3, [r6, #4]
   85b84:	68b2      	ldr	r2, [r6, #8]
   85b86:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   85b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   85b8c:	6932      	ldr	r2, [r6, #16]
   85b8e:	4313      	orrs	r3, r2
   85b90:	68f2      	ldr	r2, [r6, #12]
   85b92:	4313      	orrs	r3, r2
   85b94:	4a06      	ldr	r2, [pc, #24]	; (85bb0 <usart_init_sync_master+0x64>)
   85b96:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   85b98:	6862      	ldr	r2, [r4, #4]
   85b9a:	4313      	orrs	r3, r2
   85b9c:	6063      	str	r3, [r4, #4]
	return 0;
   85b9e:	2000      	movs	r0, #0
   85ba0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85ba2:	2001      	movs	r0, #1
   85ba4:	bd70      	pop	{r4, r5, r6, pc}
   85ba6:	2001      	movs	r0, #1
}
   85ba8:	bd70      	pop	{r4, r5, r6, pc}
   85baa:	bf00      	nop
   85bac:	00085ac9 	.word	0x00085ac9
   85bb0:	200024a8 	.word	0x200024a8

00085bb4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   85bb4:	2340      	movs	r3, #64	; 0x40
   85bb6:	6003      	str	r3, [r0, #0]
   85bb8:	4770      	bx	lr

00085bba <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   85bba:	2380      	movs	r3, #128	; 0x80
   85bbc:	6003      	str	r3, [r0, #0]
   85bbe:	4770      	bx	lr

00085bc0 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   85bc0:	2310      	movs	r3, #16
   85bc2:	6003      	str	r3, [r0, #0]
   85bc4:	4770      	bx	lr

00085bc6 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   85bc6:	2320      	movs	r3, #32
   85bc8:	6003      	str	r3, [r0, #0]
   85bca:	4770      	bx	lr

00085bcc <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   85bcc:	6081      	str	r1, [r0, #8]
   85bce:	4770      	bx	lr

00085bd0 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   85bd0:	60c1      	str	r1, [r0, #12]
   85bd2:	4770      	bx	lr

00085bd4 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   85bd4:	6900      	ldr	r0, [r0, #16]
}
   85bd6:	4770      	bx	lr

00085bd8 <usart_get_status>:
	return p_usart->US_CSR;
   85bd8:	6940      	ldr	r0, [r0, #20]
}
   85bda:	4770      	bx	lr

00085bdc <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   85bdc:	6940      	ldr	r0, [r0, #20]
}
   85bde:	f3c0 2040 	ubfx	r0, r0, #9, #1
   85be2:	4770      	bx	lr

00085be4 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85be4:	6943      	ldr	r3, [r0, #20]
   85be6:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   85bea:	bf1d      	ittte	ne
   85bec:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   85bf0:	61c1      	strne	r1, [r0, #28]
	return 0;
   85bf2:	2000      	movne	r0, #0
		return 1;
   85bf4:	2001      	moveq	r0, #1
}
   85bf6:	4770      	bx	lr

00085bf8 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85bf8:	6943      	ldr	r3, [r0, #20]
   85bfa:	f013 0f02 	tst.w	r3, #2
   85bfe:	d0fb      	beq.n	85bf8 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   85c00:	f3c1 0108 	ubfx	r1, r1, #0, #9
   85c04:	61c1      	str	r1, [r0, #28]
}
   85c06:	2000      	movs	r0, #0
   85c08:	4770      	bx	lr

00085c0a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   85c0a:	6943      	ldr	r3, [r0, #20]
   85c0c:	f013 0f01 	tst.w	r3, #1
   85c10:	d005      	beq.n	85c1e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   85c12:	6983      	ldr	r3, [r0, #24]
   85c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
   85c18:	600b      	str	r3, [r1, #0]
	return 0;
   85c1a:	2000      	movs	r0, #0
   85c1c:	4770      	bx	lr
		return 1;
   85c1e:	2001      	movs	r0, #1
}
   85c20:	4770      	bx	lr

00085c22 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   85c22:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   85c24:	23ac      	movs	r3, #172	; 0xac
   85c26:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   85c28:	680b      	ldr	r3, [r1, #0]
   85c2a:	684a      	ldr	r2, [r1, #4]
   85c2c:	fbb3 f3f2 	udiv	r3, r3, r2
   85c30:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   85c32:	1e5c      	subs	r4, r3, #1
   85c34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   85c38:	4294      	cmp	r4, r2
   85c3a:	d80b      	bhi.n	85c54 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   85c3c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   85c3e:	688b      	ldr	r3, [r1, #8]
   85c40:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   85c42:	f240 2302 	movw	r3, #514	; 0x202
   85c46:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   85c4a:	2350      	movs	r3, #80	; 0x50
   85c4c:	6003      	str	r3, [r0, #0]

	return 0;
   85c4e:	2000      	movs	r0, #0
}
   85c50:	bc10      	pop	{r4}
   85c52:	4770      	bx	lr
		return 1;
   85c54:	2001      	movs	r0, #1
   85c56:	e7fb      	b.n	85c50 <uart_init+0x2e>

00085c58 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   85c58:	6943      	ldr	r3, [r0, #20]
   85c5a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   85c5e:	bf1a      	itte	ne
   85c60:	61c1      	strne	r1, [r0, #28]
	return 0;
   85c62:	2000      	movne	r0, #0
		return 1;
   85c64:	2001      	moveq	r0, #1
}
   85c66:	4770      	bx	lr

00085c68 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   85c68:	6943      	ldr	r3, [r0, #20]
   85c6a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   85c6e:	bf1d      	ittte	ne
   85c70:	6983      	ldrne	r3, [r0, #24]
   85c72:	700b      	strbne	r3, [r1, #0]
	return 0;
   85c74:	2000      	movne	r0, #0
		return 1;
   85c76:	2001      	moveq	r0, #1
}
   85c78:	4770      	bx	lr

00085c7a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   85c7a:	e7fe      	b.n	85c7a <Dummy_Handler>

00085c7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   85c7c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   85c7e:	4b1c      	ldr	r3, [pc, #112]	; (85cf0 <Reset_Handler+0x74>)
   85c80:	4a1c      	ldr	r2, [pc, #112]	; (85cf4 <Reset_Handler+0x78>)
   85c82:	429a      	cmp	r2, r3
   85c84:	d010      	beq.n	85ca8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   85c86:	4b1c      	ldr	r3, [pc, #112]	; (85cf8 <Reset_Handler+0x7c>)
   85c88:	4a19      	ldr	r2, [pc, #100]	; (85cf0 <Reset_Handler+0x74>)
   85c8a:	429a      	cmp	r2, r3
   85c8c:	d20c      	bcs.n	85ca8 <Reset_Handler+0x2c>
   85c8e:	3b01      	subs	r3, #1
   85c90:	1a9b      	subs	r3, r3, r2
   85c92:	f023 0303 	bic.w	r3, r3, #3
   85c96:	3304      	adds	r3, #4
   85c98:	4413      	add	r3, r2
   85c9a:	4916      	ldr	r1, [pc, #88]	; (85cf4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   85c9c:	f851 0b04 	ldr.w	r0, [r1], #4
   85ca0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   85ca4:	429a      	cmp	r2, r3
   85ca6:	d1f9      	bne.n	85c9c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   85ca8:	4b14      	ldr	r3, [pc, #80]	; (85cfc <Reset_Handler+0x80>)
   85caa:	4a15      	ldr	r2, [pc, #84]	; (85d00 <Reset_Handler+0x84>)
   85cac:	429a      	cmp	r2, r3
   85cae:	d20a      	bcs.n	85cc6 <Reset_Handler+0x4a>
   85cb0:	3b01      	subs	r3, #1
   85cb2:	1a9b      	subs	r3, r3, r2
   85cb4:	f023 0303 	bic.w	r3, r3, #3
   85cb8:	3304      	adds	r3, #4
   85cba:	4413      	add	r3, r2
		*pDest++ = 0;
   85cbc:	2100      	movs	r1, #0
   85cbe:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   85cc2:	4293      	cmp	r3, r2
   85cc4:	d1fb      	bne.n	85cbe <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   85cc6:	4b0f      	ldr	r3, [pc, #60]	; (85d04 <Reset_Handler+0x88>)
   85cc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   85ccc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85cd0:	490d      	ldr	r1, [pc, #52]	; (85d08 <Reset_Handler+0x8c>)
   85cd2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   85cd4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   85cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85cdc:	d203      	bcs.n	85ce6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   85cde:	688b      	ldr	r3, [r1, #8]
   85ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85ce4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   85ce6:	4b09      	ldr	r3, [pc, #36]	; (85d0c <Reset_Handler+0x90>)
   85ce8:	4798      	blx	r3

	/* Branch to main function */
	main();
   85cea:	4b09      	ldr	r3, [pc, #36]	; (85d10 <Reset_Handler+0x94>)
   85cec:	4798      	blx	r3
   85cee:	e7fe      	b.n	85cee <Reset_Handler+0x72>
   85cf0:	20000000 	.word	0x20000000
   85cf4:	0008c9ac 	.word	0x0008c9ac
   85cf8:	20001458 	.word	0x20001458
   85cfc:	200029e8 	.word	0x200029e8
   85d00:	20001458 	.word	0x20001458
   85d04:	00080000 	.word	0x00080000
   85d08:	e000ed00 	.word	0xe000ed00
   85d0c:	000864b5 	.word	0x000864b5
   85d10:	00085f89 	.word	0x00085f89

00085d14 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85d14:	4b3d      	ldr	r3, [pc, #244]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85d18:	f003 0303 	and.w	r3, r3, #3
   85d1c:	2b03      	cmp	r3, #3
   85d1e:	d80e      	bhi.n	85d3e <SystemCoreClockUpdate+0x2a>
   85d20:	e8df f003 	tbb	[pc, r3]
   85d24:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85d28:	4b39      	ldr	r3, [pc, #228]	; (85e10 <SystemCoreClockUpdate+0xfc>)
   85d2a:	695b      	ldr	r3, [r3, #20]
   85d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85d30:	bf14      	ite	ne
   85d32:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85d36:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   85d3a:	4b36      	ldr	r3, [pc, #216]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d3c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85d3e:	4b33      	ldr	r3, [pc, #204]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85d46:	2b70      	cmp	r3, #112	; 0x70
   85d48:	d057      	beq.n	85dfa <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   85d4a:	4b30      	ldr	r3, [pc, #192]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85d4e:	4931      	ldr	r1, [pc, #196]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d50:	f3c2 1202 	ubfx	r2, r2, #4, #3
   85d54:	680b      	ldr	r3, [r1, #0]
   85d56:	40d3      	lsrs	r3, r2
   85d58:	600b      	str	r3, [r1, #0]
   85d5a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85d5c:	4b2b      	ldr	r3, [pc, #172]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d5e:	6a1b      	ldr	r3, [r3, #32]
   85d60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85d64:	d003      	beq.n	85d6e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85d66:	4a2c      	ldr	r2, [pc, #176]	; (85e18 <SystemCoreClockUpdate+0x104>)
   85d68:	4b2a      	ldr	r3, [pc, #168]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d6a:	601a      	str	r2, [r3, #0]
   85d6c:	e7e7      	b.n	85d3e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85d6e:	4a2b      	ldr	r2, [pc, #172]	; (85e1c <SystemCoreClockUpdate+0x108>)
   85d70:	4b28      	ldr	r3, [pc, #160]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d72:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85d74:	4b25      	ldr	r3, [pc, #148]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d76:	6a1b      	ldr	r3, [r3, #32]
   85d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85d7c:	2b10      	cmp	r3, #16
   85d7e:	d005      	beq.n	85d8c <SystemCoreClockUpdate+0x78>
   85d80:	2b20      	cmp	r3, #32
   85d82:	d1dc      	bne.n	85d3e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   85d84:	4a24      	ldr	r2, [pc, #144]	; (85e18 <SystemCoreClockUpdate+0x104>)
   85d86:	4b23      	ldr	r3, [pc, #140]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d88:	601a      	str	r2, [r3, #0]
				break;
   85d8a:	e7d8      	b.n	85d3e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   85d8c:	4a24      	ldr	r2, [pc, #144]	; (85e20 <SystemCoreClockUpdate+0x10c>)
   85d8e:	4b21      	ldr	r3, [pc, #132]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85d90:	601a      	str	r2, [r3, #0]
				break;
   85d92:	e7d4      	b.n	85d3e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85d94:	4b1d      	ldr	r3, [pc, #116]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85d96:	6a1b      	ldr	r3, [r3, #32]
   85d98:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85d9c:	d00c      	beq.n	85db8 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85d9e:	4a1e      	ldr	r2, [pc, #120]	; (85e18 <SystemCoreClockUpdate+0x104>)
   85da0:	4b1c      	ldr	r3, [pc, #112]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85da2:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85da4:	4b19      	ldr	r3, [pc, #100]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85da8:	f003 0303 	and.w	r3, r3, #3
   85dac:	2b02      	cmp	r3, #2
   85dae:	d016      	beq.n	85dde <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85db0:	4a1c      	ldr	r2, [pc, #112]	; (85e24 <SystemCoreClockUpdate+0x110>)
   85db2:	4b18      	ldr	r3, [pc, #96]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85db4:	601a      	str	r2, [r3, #0]
   85db6:	e7c2      	b.n	85d3e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85db8:	4a18      	ldr	r2, [pc, #96]	; (85e1c <SystemCoreClockUpdate+0x108>)
   85dba:	4b16      	ldr	r3, [pc, #88]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85dbc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85dbe:	4b13      	ldr	r3, [pc, #76]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85dc0:	6a1b      	ldr	r3, [r3, #32]
   85dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85dc6:	2b10      	cmp	r3, #16
   85dc8:	d005      	beq.n	85dd6 <SystemCoreClockUpdate+0xc2>
   85dca:	2b20      	cmp	r3, #32
   85dcc:	d1ea      	bne.n	85da4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   85dce:	4a12      	ldr	r2, [pc, #72]	; (85e18 <SystemCoreClockUpdate+0x104>)
   85dd0:	4b10      	ldr	r3, [pc, #64]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85dd2:	601a      	str	r2, [r3, #0]
				break;
   85dd4:	e7e6      	b.n	85da4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   85dd6:	4a12      	ldr	r2, [pc, #72]	; (85e20 <SystemCoreClockUpdate+0x10c>)
   85dd8:	4b0e      	ldr	r3, [pc, #56]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85dda:	601a      	str	r2, [r3, #0]
				break;
   85ddc:	e7e2      	b.n	85da4 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85dde:	4a0b      	ldr	r2, [pc, #44]	; (85e0c <SystemCoreClockUpdate+0xf8>)
   85de0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85de2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   85de4:	480b      	ldr	r0, [pc, #44]	; (85e14 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85de6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   85dea:	6803      	ldr	r3, [r0, #0]
   85dec:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85df0:	b2d2      	uxtb	r2, r2
   85df2:	fbb3 f3f2 	udiv	r3, r3, r2
   85df6:	6003      	str	r3, [r0, #0]
   85df8:	e7a1      	b.n	85d3e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   85dfa:	4a06      	ldr	r2, [pc, #24]	; (85e14 <SystemCoreClockUpdate+0x100>)
   85dfc:	6813      	ldr	r3, [r2, #0]
   85dfe:	490a      	ldr	r1, [pc, #40]	; (85e28 <SystemCoreClockUpdate+0x114>)
   85e00:	fba1 1303 	umull	r1, r3, r1, r3
   85e04:	085b      	lsrs	r3, r3, #1
   85e06:	6013      	str	r3, [r2, #0]
   85e08:	4770      	bx	lr
   85e0a:	bf00      	nop
   85e0c:	400e0400 	.word	0x400e0400
   85e10:	400e1210 	.word	0x400e1210
   85e14:	20000a80 	.word	0x20000a80
   85e18:	00b71b00 	.word	0x00b71b00
   85e1c:	003d0900 	.word	0x003d0900
   85e20:	007a1200 	.word	0x007a1200
   85e24:	0e4e1c00 	.word	0x0e4e1c00
   85e28:	aaaaaaab 	.word	0xaaaaaaab

00085e2c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   85e2c:	4b0a      	ldr	r3, [pc, #40]	; (85e58 <_sbrk+0x2c>)
   85e2e:	681b      	ldr	r3, [r3, #0]
   85e30:	b153      	cbz	r3, 85e48 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   85e32:	4b09      	ldr	r3, [pc, #36]	; (85e58 <_sbrk+0x2c>)
   85e34:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   85e36:	181a      	adds	r2, r3, r0
   85e38:	4908      	ldr	r1, [pc, #32]	; (85e5c <_sbrk+0x30>)
   85e3a:	4291      	cmp	r1, r2
   85e3c:	db08      	blt.n	85e50 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   85e3e:	4610      	mov	r0, r2
   85e40:	4a05      	ldr	r2, [pc, #20]	; (85e58 <_sbrk+0x2c>)
   85e42:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   85e44:	4618      	mov	r0, r3
   85e46:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   85e48:	4a05      	ldr	r2, [pc, #20]	; (85e60 <_sbrk+0x34>)
   85e4a:	4b03      	ldr	r3, [pc, #12]	; (85e58 <_sbrk+0x2c>)
   85e4c:	601a      	str	r2, [r3, #0]
   85e4e:	e7f0      	b.n	85e32 <_sbrk+0x6>
		return (caddr_t) -1;	
   85e50:	f04f 30ff 	mov.w	r0, #4294967295
}
   85e54:	4770      	bx	lr
   85e56:	bf00      	nop
   85e58:	200024ac 	.word	0x200024ac
   85e5c:	2007fffc 	.word	0x2007fffc
   85e60:	20084000 	.word	0x20084000

00085e64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85e64:	f04f 30ff 	mov.w	r0, #4294967295
   85e68:	4770      	bx	lr

00085e6a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   85e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   85e6e:	604b      	str	r3, [r1, #4]

	return 0;
}
   85e70:	2000      	movs	r0, #0
   85e72:	4770      	bx	lr

00085e74 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85e74:	2001      	movs	r0, #1
   85e76:	4770      	bx	lr

00085e78 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85e78:	2000      	movs	r0, #0
   85e7a:	4770      	bx	lr

00085e7c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   85e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   85e7e:	b083      	sub	sp, #12
   85e80:	4604      	mov	r4, r0
   85e82:	460d      	mov	r5, r1
	uint32_t val = 0;
   85e84:	2300      	movs	r3, #0
   85e86:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   85e88:	4b19      	ldr	r3, [pc, #100]	; (85ef0 <usart_serial_getchar+0x74>)
   85e8a:	4298      	cmp	r0, r3
   85e8c:	d00a      	beq.n	85ea4 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   85e8e:	4b19      	ldr	r3, [pc, #100]	; (85ef4 <usart_serial_getchar+0x78>)
   85e90:	4298      	cmp	r0, r3
   85e92:	d00f      	beq.n	85eb4 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   85e94:	4b18      	ldr	r3, [pc, #96]	; (85ef8 <usart_serial_getchar+0x7c>)
   85e96:	4298      	cmp	r0, r3
   85e98:	d016      	beq.n	85ec8 <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   85e9a:	4b18      	ldr	r3, [pc, #96]	; (85efc <usart_serial_getchar+0x80>)
   85e9c:	429c      	cmp	r4, r3
   85e9e:	d01d      	beq.n	85edc <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   85ea0:	b003      	add	sp, #12
   85ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   85ea4:	461f      	mov	r7, r3
   85ea6:	4e16      	ldr	r6, [pc, #88]	; (85f00 <usart_serial_getchar+0x84>)
   85ea8:	4629      	mov	r1, r5
   85eaa:	4638      	mov	r0, r7
   85eac:	47b0      	blx	r6
   85eae:	2800      	cmp	r0, #0
   85eb0:	d1fa      	bne.n	85ea8 <usart_serial_getchar+0x2c>
   85eb2:	e7f2      	b.n	85e9a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   85eb4:	461e      	mov	r6, r3
   85eb6:	4c13      	ldr	r4, [pc, #76]	; (85f04 <usart_serial_getchar+0x88>)
   85eb8:	a901      	add	r1, sp, #4
   85eba:	4630      	mov	r0, r6
   85ebc:	47a0      	blx	r4
   85ebe:	2800      	cmp	r0, #0
   85ec0:	d1fa      	bne.n	85eb8 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   85ec2:	9b01      	ldr	r3, [sp, #4]
   85ec4:	702b      	strb	r3, [r5, #0]
   85ec6:	e7eb      	b.n	85ea0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   85ec8:	461e      	mov	r6, r3
   85eca:	4c0e      	ldr	r4, [pc, #56]	; (85f04 <usart_serial_getchar+0x88>)
   85ecc:	a901      	add	r1, sp, #4
   85ece:	4630      	mov	r0, r6
   85ed0:	47a0      	blx	r4
   85ed2:	2800      	cmp	r0, #0
   85ed4:	d1fa      	bne.n	85ecc <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   85ed6:	9b01      	ldr	r3, [sp, #4]
   85ed8:	702b      	strb	r3, [r5, #0]
   85eda:	e7e1      	b.n	85ea0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   85edc:	461e      	mov	r6, r3
   85ede:	4c09      	ldr	r4, [pc, #36]	; (85f04 <usart_serial_getchar+0x88>)
   85ee0:	a901      	add	r1, sp, #4
   85ee2:	4630      	mov	r0, r6
   85ee4:	47a0      	blx	r4
   85ee6:	2800      	cmp	r0, #0
   85ee8:	d1fa      	bne.n	85ee0 <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   85eea:	9b01      	ldr	r3, [sp, #4]
   85eec:	702b      	strb	r3, [r5, #0]
}
   85eee:	e7d7      	b.n	85ea0 <usart_serial_getchar+0x24>
   85ef0:	400e0600 	.word	0x400e0600
   85ef4:	40090000 	.word	0x40090000
   85ef8:	40094000 	.word	0x40094000
   85efc:	40098000 	.word	0x40098000
   85f00:	00085c69 	.word	0x00085c69
   85f04:	00085c0b 	.word	0x00085c0b

00085f08 <usart_serial_putchar>:
{
   85f08:	b570      	push	{r4, r5, r6, lr}
   85f0a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   85f0c:	4b18      	ldr	r3, [pc, #96]	; (85f70 <usart_serial_putchar+0x68>)
   85f0e:	4298      	cmp	r0, r3
   85f10:	d00a      	beq.n	85f28 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   85f12:	4b18      	ldr	r3, [pc, #96]	; (85f74 <usart_serial_putchar+0x6c>)
   85f14:	4298      	cmp	r0, r3
   85f16:	d010      	beq.n	85f3a <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   85f18:	4b17      	ldr	r3, [pc, #92]	; (85f78 <usart_serial_putchar+0x70>)
   85f1a:	4298      	cmp	r0, r3
   85f1c:	d016      	beq.n	85f4c <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   85f1e:	4b17      	ldr	r3, [pc, #92]	; (85f7c <usart_serial_putchar+0x74>)
   85f20:	4298      	cmp	r0, r3
   85f22:	d01c      	beq.n	85f5e <usart_serial_putchar+0x56>
	return 0;
   85f24:	2000      	movs	r0, #0
}
   85f26:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   85f28:	461e      	mov	r6, r3
   85f2a:	4d15      	ldr	r5, [pc, #84]	; (85f80 <usart_serial_putchar+0x78>)
   85f2c:	4621      	mov	r1, r4
   85f2e:	4630      	mov	r0, r6
   85f30:	47a8      	blx	r5
   85f32:	2800      	cmp	r0, #0
   85f34:	d1fa      	bne.n	85f2c <usart_serial_putchar+0x24>
		return 1;
   85f36:	2001      	movs	r0, #1
   85f38:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85f3a:	461e      	mov	r6, r3
   85f3c:	4d11      	ldr	r5, [pc, #68]	; (85f84 <usart_serial_putchar+0x7c>)
   85f3e:	4621      	mov	r1, r4
   85f40:	4630      	mov	r0, r6
   85f42:	47a8      	blx	r5
   85f44:	2800      	cmp	r0, #0
   85f46:	d1fa      	bne.n	85f3e <usart_serial_putchar+0x36>
		return 1;
   85f48:	2001      	movs	r0, #1
   85f4a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85f4c:	461e      	mov	r6, r3
   85f4e:	4d0d      	ldr	r5, [pc, #52]	; (85f84 <usart_serial_putchar+0x7c>)
   85f50:	4621      	mov	r1, r4
   85f52:	4630      	mov	r0, r6
   85f54:	47a8      	blx	r5
   85f56:	2800      	cmp	r0, #0
   85f58:	d1fa      	bne.n	85f50 <usart_serial_putchar+0x48>
		return 1;
   85f5a:	2001      	movs	r0, #1
   85f5c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   85f5e:	461e      	mov	r6, r3
   85f60:	4d08      	ldr	r5, [pc, #32]	; (85f84 <usart_serial_putchar+0x7c>)
   85f62:	4621      	mov	r1, r4
   85f64:	4630      	mov	r0, r6
   85f66:	47a8      	blx	r5
   85f68:	2800      	cmp	r0, #0
   85f6a:	d1fa      	bne.n	85f62 <usart_serial_putchar+0x5a>
		return 1;
   85f6c:	2001      	movs	r0, #1
   85f6e:	bd70      	pop	{r4, r5, r6, pc}
   85f70:	400e0600 	.word	0x400e0600
   85f74:	40090000 	.word	0x40090000
   85f78:	40094000 	.word	0x40094000
   85f7c:	40098000 	.word	0x40098000
   85f80:	00085c59 	.word	0x00085c59
   85f84:	00085be5 	.word	0x00085be5

00085f88 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   85f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85f8c:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   85f8e:	2110      	movs	r1, #16
   85f90:	eb0d 0001 	add.w	r0, sp, r1
   85f94:	4b54      	ldr	r3, [pc, #336]	; (860e8 <main+0x160>)
   85f96:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   85f98:	2008      	movs	r0, #8
   85f9a:	4d54      	ldr	r5, [pc, #336]	; (860ec <main+0x164>)
   85f9c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   85f9e:	4c54      	ldr	r4, [pc, #336]	; (860f0 <main+0x168>)
   85fa0:	4b54      	ldr	r3, [pc, #336]	; (860f4 <main+0x16c>)
   85fa2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   85fa4:	4a54      	ldr	r2, [pc, #336]	; (860f8 <main+0x170>)
   85fa6:	4b55      	ldr	r3, [pc, #340]	; (860fc <main+0x174>)
   85fa8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   85faa:	4a55      	ldr	r2, [pc, #340]	; (86100 <main+0x178>)
   85fac:	4b55      	ldr	r3, [pc, #340]	; (86104 <main+0x17c>)
   85fae:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   85fb0:	4b55      	ldr	r3, [pc, #340]	; (86108 <main+0x180>)
   85fb2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   85fb4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   85fb8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   85fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85fbe:	9303      	str	r3, [sp, #12]
   85fc0:	2008      	movs	r0, #8
   85fc2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   85fc4:	a901      	add	r1, sp, #4
   85fc6:	4620      	mov	r0, r4
   85fc8:	4b50      	ldr	r3, [pc, #320]	; (8610c <main+0x184>)
   85fca:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   85fcc:	4d50      	ldr	r5, [pc, #320]	; (86110 <main+0x188>)
   85fce:	682b      	ldr	r3, [r5, #0]
   85fd0:	2100      	movs	r1, #0
   85fd2:	6898      	ldr	r0, [r3, #8]
   85fd4:	4c4f      	ldr	r4, [pc, #316]	; (86114 <main+0x18c>)
   85fd6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   85fd8:	682b      	ldr	r3, [r5, #0]
   85fda:	2100      	movs	r1, #0
   85fdc:	6858      	ldr	r0, [r3, #4]
   85fde:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   85fe0:	2101      	movs	r1, #1
   85fe2:	4b4d      	ldr	r3, [pc, #308]	; (86118 <main+0x190>)
   85fe4:	7019      	strb	r1, [r3, #0]
   85fe6:	f3bf 8f5f 	dmb	sy
   85fea:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   85fec:	4b4b      	ldr	r3, [pc, #300]	; (8611c <main+0x194>)
   85fee:	2200      	movs	r2, #0
   85ff0:	701a      	strb	r2, [r3, #0]
   85ff2:	705a      	strb	r2, [r3, #1]
   85ff4:	709a      	strb	r2, [r3, #2]
   85ff6:	70da      	strb	r2, [r3, #3]
   85ff8:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   85ffa:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85ffc:	4b48      	ldr	r3, [pc, #288]	; (86120 <main+0x198>)
   85ffe:	4798      	blx	r3
	board_init();
   86000:	4b48      	ldr	r3, [pc, #288]	; (86124 <main+0x19c>)
   86002:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   86004:	4b48      	ldr	r3, [pc, #288]	; (86128 <main+0x1a0>)
   86006:	4798      	blx	r3
   86008:	ad04      	add	r5, sp, #16
   8600a:	4c48      	ldr	r4, [pc, #288]	; (8612c <main+0x1a4>)
   8600c:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   86010:	4f47      	ldr	r7, [pc, #284]	; (86130 <main+0x1a8>)
   86012:	4e48      	ldr	r6, [pc, #288]	; (86134 <main+0x1ac>)
   86014:	f855 2b04 	ldr.w	r2, [r5], #4
   86018:	4639      	mov	r1, r7
   8601a:	4620      	mov	r0, r4
   8601c:	47b0      	blx	r6
   8601e:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   86020:	45a0      	cmp	r8, r4
   86022:	d1f7      	bne.n	86014 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   86024:	4c41      	ldr	r4, [pc, #260]	; (8612c <main+0x1a4>)
   86026:	2600      	movs	r6, #0
   86028:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   8602c:	4a42      	ldr	r2, [pc, #264]	; (86138 <main+0x1b0>)
   8602e:	4943      	ldr	r1, [pc, #268]	; (8613c <main+0x1b4>)
   86030:	4843      	ldr	r0, [pc, #268]	; (86140 <main+0x1b8>)
   86032:	4f44      	ldr	r7, [pc, #272]	; (86144 <main+0x1bc>)
   86034:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   86036:	4621      	mov	r1, r4
   86038:	4843      	ldr	r0, [pc, #268]	; (86148 <main+0x1c0>)
   8603a:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   8603c:	2009      	movs	r0, #9
   8603e:	4b2b      	ldr	r3, [pc, #172]	; (860ec <main+0x164>)
   86040:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   86042:	4d42      	ldr	r5, [pc, #264]	; (8614c <main+0x1c4>)
   86044:	4629      	mov	r1, r5
   86046:	2029      	movs	r0, #41	; 0x29
   86048:	4c41      	ldr	r4, [pc, #260]	; (86150 <main+0x1c8>)
   8604a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   8604c:	4629      	mov	r1, r5
   8604e:	202a      	movs	r0, #42	; 0x2a
   86050:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   86052:	4629      	mov	r1, r5
   86054:	202b      	movs	r0, #43	; 0x2b
   86056:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   86058:	4629      	mov	r1, r5
   8605a:	202c      	movs	r0, #44	; 0x2c
   8605c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8605e:	4629      	mov	r1, r5
   86060:	202d      	movs	r0, #45	; 0x2d
   86062:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   86064:	4629      	mov	r1, r5
   86066:	202e      	movs	r0, #46	; 0x2e
   86068:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8606a:	4629      	mov	r1, r5
   8606c:	202f      	movs	r0, #47	; 0x2f
   8606e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   86070:	4629      	mov	r1, r5
   86072:	2030      	movs	r0, #48	; 0x30
   86074:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   86076:	4629      	mov	r1, r5
   86078:	2033      	movs	r0, #51	; 0x33
   8607a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8607c:	4629      	mov	r1, r5
   8607e:	2037      	movs	r0, #55	; 0x37
   86080:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   86082:	4629      	mov	r1, r5
   86084:	2034      	movs	r0, #52	; 0x34
   86086:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   86088:	4832      	ldr	r0, [pc, #200]	; (86154 <main+0x1cc>)
   8608a:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   8608c:	4c32      	ldr	r4, [pc, #200]	; (86158 <main+0x1d0>)
   8608e:	4a33      	ldr	r2, [pc, #204]	; (8615c <main+0x1d4>)
   86090:	4631      	mov	r1, r6
   86092:	4620      	mov	r0, r4
   86094:	4b32      	ldr	r3, [pc, #200]	; (86160 <main+0x1d8>)
   86096:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   86098:	4a32      	ldr	r2, [pc, #200]	; (86164 <main+0x1dc>)
   8609a:	4631      	mov	r1, r6
   8609c:	4620      	mov	r0, r4
   8609e:	4b32      	ldr	r3, [pc, #200]	; (86168 <main+0x1e0>)
   860a0:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   860a2:	4a32      	ldr	r2, [pc, #200]	; (8616c <main+0x1e4>)
   860a4:	4631      	mov	r1, r6
   860a6:	4620      	mov	r0, r4
   860a8:	4b31      	ldr	r3, [pc, #196]	; (86170 <main+0x1e8>)
   860aa:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   860ac:	2203      	movs	r2, #3
   860ae:	4631      	mov	r1, r6
   860b0:	4620      	mov	r0, r4
   860b2:	4b30      	ldr	r3, [pc, #192]	; (86174 <main+0x1ec>)
   860b4:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   860b6:	4b30      	ldr	r3, [pc, #192]	; (86178 <main+0x1f0>)
   860b8:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   860ba:	4b30      	ldr	r3, [pc, #192]	; (8617c <main+0x1f4>)
   860bc:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   860be:	2204      	movs	r2, #4
   860c0:	4b2f      	ldr	r3, [pc, #188]	; (86180 <main+0x1f8>)
   860c2:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   860c4:	4630      	mov	r0, r6
   860c6:	4b2f      	ldr	r3, [pc, #188]	; (86184 <main+0x1fc>)
   860c8:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   860ca:	482f      	ldr	r0, [pc, #188]	; (86188 <main+0x200>)
   860cc:	47b8      	blx	r7
	naeusb_register_handlers();
   860ce:	4b2f      	ldr	r3, [pc, #188]	; (8618c <main+0x204>)
   860d0:	4798      	blx	r3
	naeusart_register_handlers();
   860d2:	4b2f      	ldr	r3, [pc, #188]	; (86190 <main+0x208>)
   860d4:	4798      	blx	r3
	openadc_register_handlers();
   860d6:	4b2f      	ldr	r3, [pc, #188]	; (86194 <main+0x20c>)
   860d8:	4798      	blx	r3
	mpsse_register_handlers();
   860da:	4b2f      	ldr	r3, [pc, #188]	; (86198 <main+0x210>)
   860dc:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   860de:	4d2f      	ldr	r5, [pc, #188]	; (8619c <main+0x214>)
		MPSSE_main_sendrecv_byte();
   860e0:	4c2f      	ldr	r4, [pc, #188]	; (861a0 <main+0x218>)
		cdc_send_to_pc();
   860e2:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
   860e4:	47a0      	blx	r4
   860e6:	e7fc      	b.n	860e2 <main+0x15a>
   860e8:	00083c0d 	.word	0x00083c0d
   860ec:	000844b5 	.word	0x000844b5
   860f0:	400e0600 	.word	0x400e0600
   860f4:	200029a4 	.word	0x200029a4
   860f8:	00085f09 	.word	0x00085f09
   860fc:	200029a0 	.word	0x200029a0
   86100:	00085e7d 	.word	0x00085e7d
   86104:	2000299c 	.word	0x2000299c
   86108:	05b8d800 	.word	0x05b8d800
   8610c:	00085c23 	.word	0x00085c23
   86110:	20000aa8 	.word	0x20000aa8
   86114:	000866b5 	.word	0x000866b5
   86118:	20000a7c 	.word	0x20000a7c
   8611c:	20002994 	.word	0x20002994
   86120:	00083d25 	.word	0x00083d25
   86124:	00083fd5 	.word	0x00083fd5
   86128:	000838d1 	.word	0x000838d1
   8612c:	20000a84 	.word	0x20000a84
   86130:	0008c630 	.word	0x0008c630
   86134:	00086855 	.word	0x00086855
   86138:	0008c638 	.word	0x0008c638
   8613c:	0008c644 	.word	0x0008c644
   86140:	0008c650 	.word	0x0008c650
   86144:	00086505 	.word	0x00086505
   86148:	0008c684 	.word	0x0008c684
   8614c:	08000001 	.word	0x08000001
   86150:	00084171 	.word	0x00084171
   86154:	0008c698 	.word	0x0008c698
   86158:	400e0000 	.word	0x400e0000
   8615c:	01010100 	.word	0x01010100
   86160:	00084045 	.word	0x00084045
   86164:	01030101 	.word	0x01030101
   86168:	00084051 	.word	0x00084051
   8616c:	00040002 	.word	0x00040002
   86170:	0008405d 	.word	0x0008405d
   86174:	00084069 	.word	0x00084069
   86178:	00083c5d 	.word	0x00083c5d
   8617c:	000826f9 	.word	0x000826f9
   86180:	400e0400 	.word	0x400e0400
   86184:	0008451d 	.word	0x0008451d
   86188:	0008c6b8 	.word	0x0008c6b8
   8618c:	000815e5 	.word	0x000815e5
   86190:	0008228d 	.word	0x0008228d
   86194:	00081ddd 	.word	0x00081ddd
   86198:	000819c1 	.word	0x000819c1
   8619c:	000824ed 	.word	0x000824ed
   861a0:	000819e1 	.word	0x000819e1

000861a4 <__aeabi_uldivmod>:
   861a4:	b953      	cbnz	r3, 861bc <__aeabi_uldivmod+0x18>
   861a6:	b94a      	cbnz	r2, 861bc <__aeabi_uldivmod+0x18>
   861a8:	2900      	cmp	r1, #0
   861aa:	bf08      	it	eq
   861ac:	2800      	cmpeq	r0, #0
   861ae:	bf1c      	itt	ne
   861b0:	f04f 31ff 	movne.w	r1, #4294967295
   861b4:	f04f 30ff 	movne.w	r0, #4294967295
   861b8:	f000 b97a 	b.w	864b0 <__aeabi_idiv0>
   861bc:	f1ad 0c08 	sub.w	ip, sp, #8
   861c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   861c4:	f000 f806 	bl	861d4 <__udivmoddi4>
   861c8:	f8dd e004 	ldr.w	lr, [sp, #4]
   861cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   861d0:	b004      	add	sp, #16
   861d2:	4770      	bx	lr

000861d4 <__udivmoddi4>:
   861d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   861d8:	468c      	mov	ip, r1
   861da:	460e      	mov	r6, r1
   861dc:	4604      	mov	r4, r0
   861de:	9d08      	ldr	r5, [sp, #32]
   861e0:	2b00      	cmp	r3, #0
   861e2:	d150      	bne.n	86286 <__udivmoddi4+0xb2>
   861e4:	428a      	cmp	r2, r1
   861e6:	4617      	mov	r7, r2
   861e8:	d96c      	bls.n	862c4 <__udivmoddi4+0xf0>
   861ea:	fab2 fe82 	clz	lr, r2
   861ee:	f1be 0f00 	cmp.w	lr, #0
   861f2:	d00b      	beq.n	8620c <__udivmoddi4+0x38>
   861f4:	f1ce 0c20 	rsb	ip, lr, #32
   861f8:	fa01 f60e 	lsl.w	r6, r1, lr
   861fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   86200:	fa02 f70e 	lsl.w	r7, r2, lr
   86204:	ea4c 0c06 	orr.w	ip, ip, r6
   86208:	fa00 f40e 	lsl.w	r4, r0, lr
   8620c:	0c3a      	lsrs	r2, r7, #16
   8620e:	fbbc f9f2 	udiv	r9, ip, r2
   86212:	b2bb      	uxth	r3, r7
   86214:	fb02 cc19 	mls	ip, r2, r9, ip
   86218:	fb09 fa03 	mul.w	sl, r9, r3
   8621c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86220:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86224:	45b2      	cmp	sl, r6
   86226:	d90a      	bls.n	8623e <__udivmoddi4+0x6a>
   86228:	19f6      	adds	r6, r6, r7
   8622a:	f109 31ff 	add.w	r1, r9, #4294967295
   8622e:	f080 8125 	bcs.w	8647c <__udivmoddi4+0x2a8>
   86232:	45b2      	cmp	sl, r6
   86234:	f240 8122 	bls.w	8647c <__udivmoddi4+0x2a8>
   86238:	f1a9 0902 	sub.w	r9, r9, #2
   8623c:	443e      	add	r6, r7
   8623e:	eba6 060a 	sub.w	r6, r6, sl
   86242:	fbb6 f0f2 	udiv	r0, r6, r2
   86246:	fb02 6610 	mls	r6, r2, r0, r6
   8624a:	fb00 f303 	mul.w	r3, r0, r3
   8624e:	b2a4      	uxth	r4, r4
   86250:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86254:	42a3      	cmp	r3, r4
   86256:	d909      	bls.n	8626c <__udivmoddi4+0x98>
   86258:	19e4      	adds	r4, r4, r7
   8625a:	f100 32ff 	add.w	r2, r0, #4294967295
   8625e:	f080 810b 	bcs.w	86478 <__udivmoddi4+0x2a4>
   86262:	42a3      	cmp	r3, r4
   86264:	f240 8108 	bls.w	86478 <__udivmoddi4+0x2a4>
   86268:	3802      	subs	r0, #2
   8626a:	443c      	add	r4, r7
   8626c:	2100      	movs	r1, #0
   8626e:	1ae4      	subs	r4, r4, r3
   86270:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86274:	2d00      	cmp	r5, #0
   86276:	d062      	beq.n	8633e <__udivmoddi4+0x16a>
   86278:	2300      	movs	r3, #0
   8627a:	fa24 f40e 	lsr.w	r4, r4, lr
   8627e:	602c      	str	r4, [r5, #0]
   86280:	606b      	str	r3, [r5, #4]
   86282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86286:	428b      	cmp	r3, r1
   86288:	d907      	bls.n	8629a <__udivmoddi4+0xc6>
   8628a:	2d00      	cmp	r5, #0
   8628c:	d055      	beq.n	8633a <__udivmoddi4+0x166>
   8628e:	2100      	movs	r1, #0
   86290:	e885 0041 	stmia.w	r5, {r0, r6}
   86294:	4608      	mov	r0, r1
   86296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8629a:	fab3 f183 	clz	r1, r3
   8629e:	2900      	cmp	r1, #0
   862a0:	f040 808f 	bne.w	863c2 <__udivmoddi4+0x1ee>
   862a4:	42b3      	cmp	r3, r6
   862a6:	d302      	bcc.n	862ae <__udivmoddi4+0xda>
   862a8:	4282      	cmp	r2, r0
   862aa:	f200 80fc 	bhi.w	864a6 <__udivmoddi4+0x2d2>
   862ae:	1a84      	subs	r4, r0, r2
   862b0:	eb66 0603 	sbc.w	r6, r6, r3
   862b4:	2001      	movs	r0, #1
   862b6:	46b4      	mov	ip, r6
   862b8:	2d00      	cmp	r5, #0
   862ba:	d040      	beq.n	8633e <__udivmoddi4+0x16a>
   862bc:	e885 1010 	stmia.w	r5, {r4, ip}
   862c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   862c4:	b912      	cbnz	r2, 862cc <__udivmoddi4+0xf8>
   862c6:	2701      	movs	r7, #1
   862c8:	fbb7 f7f2 	udiv	r7, r7, r2
   862cc:	fab7 fe87 	clz	lr, r7
   862d0:	f1be 0f00 	cmp.w	lr, #0
   862d4:	d135      	bne.n	86342 <__udivmoddi4+0x16e>
   862d6:	2101      	movs	r1, #1
   862d8:	1bf6      	subs	r6, r6, r7
   862da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   862de:	fa1f f887 	uxth.w	r8, r7
   862e2:	fbb6 f2fc 	udiv	r2, r6, ip
   862e6:	fb0c 6612 	mls	r6, ip, r2, r6
   862ea:	fb08 f002 	mul.w	r0, r8, r2
   862ee:	0c23      	lsrs	r3, r4, #16
   862f0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   862f4:	42b0      	cmp	r0, r6
   862f6:	d907      	bls.n	86308 <__udivmoddi4+0x134>
   862f8:	19f6      	adds	r6, r6, r7
   862fa:	f102 33ff 	add.w	r3, r2, #4294967295
   862fe:	d202      	bcs.n	86306 <__udivmoddi4+0x132>
   86300:	42b0      	cmp	r0, r6
   86302:	f200 80d2 	bhi.w	864aa <__udivmoddi4+0x2d6>
   86306:	461a      	mov	r2, r3
   86308:	1a36      	subs	r6, r6, r0
   8630a:	fbb6 f0fc 	udiv	r0, r6, ip
   8630e:	fb0c 6610 	mls	r6, ip, r0, r6
   86312:	fb08 f800 	mul.w	r8, r8, r0
   86316:	b2a3      	uxth	r3, r4
   86318:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8631c:	45a0      	cmp	r8, r4
   8631e:	d907      	bls.n	86330 <__udivmoddi4+0x15c>
   86320:	19e4      	adds	r4, r4, r7
   86322:	f100 33ff 	add.w	r3, r0, #4294967295
   86326:	d202      	bcs.n	8632e <__udivmoddi4+0x15a>
   86328:	45a0      	cmp	r8, r4
   8632a:	f200 80b9 	bhi.w	864a0 <__udivmoddi4+0x2cc>
   8632e:	4618      	mov	r0, r3
   86330:	eba4 0408 	sub.w	r4, r4, r8
   86334:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86338:	e79c      	b.n	86274 <__udivmoddi4+0xa0>
   8633a:	4629      	mov	r1, r5
   8633c:	4628      	mov	r0, r5
   8633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86342:	fa07 f70e 	lsl.w	r7, r7, lr
   86346:	f1ce 0320 	rsb	r3, lr, #32
   8634a:	fa26 f203 	lsr.w	r2, r6, r3
   8634e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86352:	fbb2 f1fc 	udiv	r1, r2, ip
   86356:	fa1f f887 	uxth.w	r8, r7
   8635a:	fb0c 2211 	mls	r2, ip, r1, r2
   8635e:	fa06 f60e 	lsl.w	r6, r6, lr
   86362:	fa20 f303 	lsr.w	r3, r0, r3
   86366:	fb01 f908 	mul.w	r9, r1, r8
   8636a:	4333      	orrs	r3, r6
   8636c:	0c1e      	lsrs	r6, r3, #16
   8636e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86372:	45b1      	cmp	r9, r6
   86374:	fa00 f40e 	lsl.w	r4, r0, lr
   86378:	d909      	bls.n	8638e <__udivmoddi4+0x1ba>
   8637a:	19f6      	adds	r6, r6, r7
   8637c:	f101 32ff 	add.w	r2, r1, #4294967295
   86380:	f080 808c 	bcs.w	8649c <__udivmoddi4+0x2c8>
   86384:	45b1      	cmp	r9, r6
   86386:	f240 8089 	bls.w	8649c <__udivmoddi4+0x2c8>
   8638a:	3902      	subs	r1, #2
   8638c:	443e      	add	r6, r7
   8638e:	eba6 0609 	sub.w	r6, r6, r9
   86392:	fbb6 f0fc 	udiv	r0, r6, ip
   86396:	fb0c 6210 	mls	r2, ip, r0, r6
   8639a:	fb00 f908 	mul.w	r9, r0, r8
   8639e:	b29e      	uxth	r6, r3
   863a0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   863a4:	45b1      	cmp	r9, r6
   863a6:	d907      	bls.n	863b8 <__udivmoddi4+0x1e4>
   863a8:	19f6      	adds	r6, r6, r7
   863aa:	f100 33ff 	add.w	r3, r0, #4294967295
   863ae:	d271      	bcs.n	86494 <__udivmoddi4+0x2c0>
   863b0:	45b1      	cmp	r9, r6
   863b2:	d96f      	bls.n	86494 <__udivmoddi4+0x2c0>
   863b4:	3802      	subs	r0, #2
   863b6:	443e      	add	r6, r7
   863b8:	eba6 0609 	sub.w	r6, r6, r9
   863bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   863c0:	e78f      	b.n	862e2 <__udivmoddi4+0x10e>
   863c2:	f1c1 0720 	rsb	r7, r1, #32
   863c6:	fa22 f807 	lsr.w	r8, r2, r7
   863ca:	408b      	lsls	r3, r1
   863cc:	ea48 0303 	orr.w	r3, r8, r3
   863d0:	fa26 f407 	lsr.w	r4, r6, r7
   863d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   863d8:	fbb4 f9fe 	udiv	r9, r4, lr
   863dc:	fa1f fc83 	uxth.w	ip, r3
   863e0:	fb0e 4419 	mls	r4, lr, r9, r4
   863e4:	408e      	lsls	r6, r1
   863e6:	fa20 f807 	lsr.w	r8, r0, r7
   863ea:	fb09 fa0c 	mul.w	sl, r9, ip
   863ee:	ea48 0806 	orr.w	r8, r8, r6
   863f2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   863f6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   863fa:	45a2      	cmp	sl, r4
   863fc:	fa02 f201 	lsl.w	r2, r2, r1
   86400:	fa00 f601 	lsl.w	r6, r0, r1
   86404:	d908      	bls.n	86418 <__udivmoddi4+0x244>
   86406:	18e4      	adds	r4, r4, r3
   86408:	f109 30ff 	add.w	r0, r9, #4294967295
   8640c:	d244      	bcs.n	86498 <__udivmoddi4+0x2c4>
   8640e:	45a2      	cmp	sl, r4
   86410:	d942      	bls.n	86498 <__udivmoddi4+0x2c4>
   86412:	f1a9 0902 	sub.w	r9, r9, #2
   86416:	441c      	add	r4, r3
   86418:	eba4 040a 	sub.w	r4, r4, sl
   8641c:	fbb4 f0fe 	udiv	r0, r4, lr
   86420:	fb0e 4410 	mls	r4, lr, r0, r4
   86424:	fb00 fc0c 	mul.w	ip, r0, ip
   86428:	fa1f f888 	uxth.w	r8, r8
   8642c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86430:	45a4      	cmp	ip, r4
   86432:	d907      	bls.n	86444 <__udivmoddi4+0x270>
   86434:	18e4      	adds	r4, r4, r3
   86436:	f100 3eff 	add.w	lr, r0, #4294967295
   8643a:	d229      	bcs.n	86490 <__udivmoddi4+0x2bc>
   8643c:	45a4      	cmp	ip, r4
   8643e:	d927      	bls.n	86490 <__udivmoddi4+0x2bc>
   86440:	3802      	subs	r0, #2
   86442:	441c      	add	r4, r3
   86444:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86448:	fba0 8902 	umull	r8, r9, r0, r2
   8644c:	eba4 0c0c 	sub.w	ip, r4, ip
   86450:	45cc      	cmp	ip, r9
   86452:	46c2      	mov	sl, r8
   86454:	46ce      	mov	lr, r9
   86456:	d315      	bcc.n	86484 <__udivmoddi4+0x2b0>
   86458:	d012      	beq.n	86480 <__udivmoddi4+0x2ac>
   8645a:	b155      	cbz	r5, 86472 <__udivmoddi4+0x29e>
   8645c:	ebb6 030a 	subs.w	r3, r6, sl
   86460:	eb6c 060e 	sbc.w	r6, ip, lr
   86464:	fa06 f707 	lsl.w	r7, r6, r7
   86468:	40cb      	lsrs	r3, r1
   8646a:	431f      	orrs	r7, r3
   8646c:	40ce      	lsrs	r6, r1
   8646e:	602f      	str	r7, [r5, #0]
   86470:	606e      	str	r6, [r5, #4]
   86472:	2100      	movs	r1, #0
   86474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86478:	4610      	mov	r0, r2
   8647a:	e6f7      	b.n	8626c <__udivmoddi4+0x98>
   8647c:	4689      	mov	r9, r1
   8647e:	e6de      	b.n	8623e <__udivmoddi4+0x6a>
   86480:	4546      	cmp	r6, r8
   86482:	d2ea      	bcs.n	8645a <__udivmoddi4+0x286>
   86484:	ebb8 0a02 	subs.w	sl, r8, r2
   86488:	eb69 0e03 	sbc.w	lr, r9, r3
   8648c:	3801      	subs	r0, #1
   8648e:	e7e4      	b.n	8645a <__udivmoddi4+0x286>
   86490:	4670      	mov	r0, lr
   86492:	e7d7      	b.n	86444 <__udivmoddi4+0x270>
   86494:	4618      	mov	r0, r3
   86496:	e78f      	b.n	863b8 <__udivmoddi4+0x1e4>
   86498:	4681      	mov	r9, r0
   8649a:	e7bd      	b.n	86418 <__udivmoddi4+0x244>
   8649c:	4611      	mov	r1, r2
   8649e:	e776      	b.n	8638e <__udivmoddi4+0x1ba>
   864a0:	3802      	subs	r0, #2
   864a2:	443c      	add	r4, r7
   864a4:	e744      	b.n	86330 <__udivmoddi4+0x15c>
   864a6:	4608      	mov	r0, r1
   864a8:	e706      	b.n	862b8 <__udivmoddi4+0xe4>
   864aa:	3a02      	subs	r2, #2
   864ac:	443e      	add	r6, r7
   864ae:	e72b      	b.n	86308 <__udivmoddi4+0x134>

000864b0 <__aeabi_idiv0>:
   864b0:	4770      	bx	lr
   864b2:	bf00      	nop

000864b4 <__libc_init_array>:
   864b4:	b570      	push	{r4, r5, r6, lr}
   864b6:	4e0f      	ldr	r6, [pc, #60]	; (864f4 <__libc_init_array+0x40>)
   864b8:	4d0f      	ldr	r5, [pc, #60]	; (864f8 <__libc_init_array+0x44>)
   864ba:	1b76      	subs	r6, r6, r5
   864bc:	10b6      	asrs	r6, r6, #2
   864be:	bf18      	it	ne
   864c0:	2400      	movne	r4, #0
   864c2:	d005      	beq.n	864d0 <__libc_init_array+0x1c>
   864c4:	3401      	adds	r4, #1
   864c6:	f855 3b04 	ldr.w	r3, [r5], #4
   864ca:	4798      	blx	r3
   864cc:	42a6      	cmp	r6, r4
   864ce:	d1f9      	bne.n	864c4 <__libc_init_array+0x10>
   864d0:	4e0a      	ldr	r6, [pc, #40]	; (864fc <__libc_init_array+0x48>)
   864d2:	4d0b      	ldr	r5, [pc, #44]	; (86500 <__libc_init_array+0x4c>)
   864d4:	f006 fa54 	bl	8c980 <_init>
   864d8:	1b76      	subs	r6, r6, r5
   864da:	10b6      	asrs	r6, r6, #2
   864dc:	bf18      	it	ne
   864de:	2400      	movne	r4, #0
   864e0:	d006      	beq.n	864f0 <__libc_init_array+0x3c>
   864e2:	3401      	adds	r4, #1
   864e4:	f855 3b04 	ldr.w	r3, [r5], #4
   864e8:	4798      	blx	r3
   864ea:	42a6      	cmp	r6, r4
   864ec:	d1f9      	bne.n	864e2 <__libc_init_array+0x2e>
   864ee:	bd70      	pop	{r4, r5, r6, pc}
   864f0:	bd70      	pop	{r4, r5, r6, pc}
   864f2:	bf00      	nop
   864f4:	0008c98c 	.word	0x0008c98c
   864f8:	0008c98c 	.word	0x0008c98c
   864fc:	0008c994 	.word	0x0008c994
   86500:	0008c98c 	.word	0x0008c98c

00086504 <iprintf>:
   86504:	b40f      	push	{r0, r1, r2, r3}
   86506:	b510      	push	{r4, lr}
   86508:	4b07      	ldr	r3, [pc, #28]	; (86528 <iprintf+0x24>)
   8650a:	b082      	sub	sp, #8
   8650c:	ac04      	add	r4, sp, #16
   8650e:	f854 2b04 	ldr.w	r2, [r4], #4
   86512:	6818      	ldr	r0, [r3, #0]
   86514:	4623      	mov	r3, r4
   86516:	6881      	ldr	r1, [r0, #8]
   86518:	9401      	str	r4, [sp, #4]
   8651a:	f001 fce1 	bl	87ee0 <_vfiprintf_r>
   8651e:	b002      	add	sp, #8
   86520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   86524:	b004      	add	sp, #16
   86526:	4770      	bx	lr
   86528:	20000aa8 	.word	0x20000aa8

0008652c <memcpy>:
   8652c:	4684      	mov	ip, r0
   8652e:	ea41 0300 	orr.w	r3, r1, r0
   86532:	f013 0303 	ands.w	r3, r3, #3
   86536:	d149      	bne.n	865cc <memcpy+0xa0>
   86538:	3a40      	subs	r2, #64	; 0x40
   8653a:	d323      	bcc.n	86584 <memcpy+0x58>
   8653c:	680b      	ldr	r3, [r1, #0]
   8653e:	6003      	str	r3, [r0, #0]
   86540:	684b      	ldr	r3, [r1, #4]
   86542:	6043      	str	r3, [r0, #4]
   86544:	688b      	ldr	r3, [r1, #8]
   86546:	6083      	str	r3, [r0, #8]
   86548:	68cb      	ldr	r3, [r1, #12]
   8654a:	60c3      	str	r3, [r0, #12]
   8654c:	690b      	ldr	r3, [r1, #16]
   8654e:	6103      	str	r3, [r0, #16]
   86550:	694b      	ldr	r3, [r1, #20]
   86552:	6143      	str	r3, [r0, #20]
   86554:	698b      	ldr	r3, [r1, #24]
   86556:	6183      	str	r3, [r0, #24]
   86558:	69cb      	ldr	r3, [r1, #28]
   8655a:	61c3      	str	r3, [r0, #28]
   8655c:	6a0b      	ldr	r3, [r1, #32]
   8655e:	6203      	str	r3, [r0, #32]
   86560:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86562:	6243      	str	r3, [r0, #36]	; 0x24
   86564:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86566:	6283      	str	r3, [r0, #40]	; 0x28
   86568:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8656a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8656c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8656e:	6303      	str	r3, [r0, #48]	; 0x30
   86570:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86572:	6343      	str	r3, [r0, #52]	; 0x34
   86574:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86576:	6383      	str	r3, [r0, #56]	; 0x38
   86578:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8657a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8657c:	3040      	adds	r0, #64	; 0x40
   8657e:	3140      	adds	r1, #64	; 0x40
   86580:	3a40      	subs	r2, #64	; 0x40
   86582:	d2db      	bcs.n	8653c <memcpy+0x10>
   86584:	3230      	adds	r2, #48	; 0x30
   86586:	d30b      	bcc.n	865a0 <memcpy+0x74>
   86588:	680b      	ldr	r3, [r1, #0]
   8658a:	6003      	str	r3, [r0, #0]
   8658c:	684b      	ldr	r3, [r1, #4]
   8658e:	6043      	str	r3, [r0, #4]
   86590:	688b      	ldr	r3, [r1, #8]
   86592:	6083      	str	r3, [r0, #8]
   86594:	68cb      	ldr	r3, [r1, #12]
   86596:	60c3      	str	r3, [r0, #12]
   86598:	3010      	adds	r0, #16
   8659a:	3110      	adds	r1, #16
   8659c:	3a10      	subs	r2, #16
   8659e:	d2f3      	bcs.n	86588 <memcpy+0x5c>
   865a0:	320c      	adds	r2, #12
   865a2:	d305      	bcc.n	865b0 <memcpy+0x84>
   865a4:	f851 3b04 	ldr.w	r3, [r1], #4
   865a8:	f840 3b04 	str.w	r3, [r0], #4
   865ac:	3a04      	subs	r2, #4
   865ae:	d2f9      	bcs.n	865a4 <memcpy+0x78>
   865b0:	3204      	adds	r2, #4
   865b2:	d008      	beq.n	865c6 <memcpy+0x9a>
   865b4:	07d2      	lsls	r2, r2, #31
   865b6:	bf1c      	itt	ne
   865b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   865bc:	f800 3b01 	strbne.w	r3, [r0], #1
   865c0:	d301      	bcc.n	865c6 <memcpy+0x9a>
   865c2:	880b      	ldrh	r3, [r1, #0]
   865c4:	8003      	strh	r3, [r0, #0]
   865c6:	4660      	mov	r0, ip
   865c8:	4770      	bx	lr
   865ca:	bf00      	nop
   865cc:	2a08      	cmp	r2, #8
   865ce:	d313      	bcc.n	865f8 <memcpy+0xcc>
   865d0:	078b      	lsls	r3, r1, #30
   865d2:	d0b1      	beq.n	86538 <memcpy+0xc>
   865d4:	f010 0303 	ands.w	r3, r0, #3
   865d8:	d0ae      	beq.n	86538 <memcpy+0xc>
   865da:	f1c3 0304 	rsb	r3, r3, #4
   865de:	1ad2      	subs	r2, r2, r3
   865e0:	07db      	lsls	r3, r3, #31
   865e2:	bf1c      	itt	ne
   865e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   865e8:	f800 3b01 	strbne.w	r3, [r0], #1
   865ec:	d3a4      	bcc.n	86538 <memcpy+0xc>
   865ee:	f831 3b02 	ldrh.w	r3, [r1], #2
   865f2:	f820 3b02 	strh.w	r3, [r0], #2
   865f6:	e79f      	b.n	86538 <memcpy+0xc>
   865f8:	3a04      	subs	r2, #4
   865fa:	d3d9      	bcc.n	865b0 <memcpy+0x84>
   865fc:	3a01      	subs	r2, #1
   865fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   86602:	f800 3b01 	strb.w	r3, [r0], #1
   86606:	d2f9      	bcs.n	865fc <memcpy+0xd0>
   86608:	780b      	ldrb	r3, [r1, #0]
   8660a:	7003      	strb	r3, [r0, #0]
   8660c:	784b      	ldrb	r3, [r1, #1]
   8660e:	7043      	strb	r3, [r0, #1]
   86610:	788b      	ldrb	r3, [r1, #2]
   86612:	7083      	strb	r3, [r0, #2]
   86614:	4660      	mov	r0, ip
   86616:	4770      	bx	lr

00086618 <memset>:
   86618:	b470      	push	{r4, r5, r6}
   8661a:	0786      	lsls	r6, r0, #30
   8661c:	d046      	beq.n	866ac <memset+0x94>
   8661e:	1e54      	subs	r4, r2, #1
   86620:	2a00      	cmp	r2, #0
   86622:	d041      	beq.n	866a8 <memset+0x90>
   86624:	b2ca      	uxtb	r2, r1
   86626:	4603      	mov	r3, r0
   86628:	e002      	b.n	86630 <memset+0x18>
   8662a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8662e:	d33b      	bcc.n	866a8 <memset+0x90>
   86630:	f803 2b01 	strb.w	r2, [r3], #1
   86634:	079d      	lsls	r5, r3, #30
   86636:	d1f8      	bne.n	8662a <memset+0x12>
   86638:	2c03      	cmp	r4, #3
   8663a:	d92e      	bls.n	8669a <memset+0x82>
   8663c:	b2cd      	uxtb	r5, r1
   8663e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86642:	2c0f      	cmp	r4, #15
   86644:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86648:	d919      	bls.n	8667e <memset+0x66>
   8664a:	4626      	mov	r6, r4
   8664c:	f103 0210 	add.w	r2, r3, #16
   86650:	3e10      	subs	r6, #16
   86652:	2e0f      	cmp	r6, #15
   86654:	f842 5c10 	str.w	r5, [r2, #-16]
   86658:	f842 5c0c 	str.w	r5, [r2, #-12]
   8665c:	f842 5c08 	str.w	r5, [r2, #-8]
   86660:	f842 5c04 	str.w	r5, [r2, #-4]
   86664:	f102 0210 	add.w	r2, r2, #16
   86668:	d8f2      	bhi.n	86650 <memset+0x38>
   8666a:	f1a4 0210 	sub.w	r2, r4, #16
   8666e:	f022 020f 	bic.w	r2, r2, #15
   86672:	f004 040f 	and.w	r4, r4, #15
   86676:	3210      	adds	r2, #16
   86678:	2c03      	cmp	r4, #3
   8667a:	4413      	add	r3, r2
   8667c:	d90d      	bls.n	8669a <memset+0x82>
   8667e:	461e      	mov	r6, r3
   86680:	4622      	mov	r2, r4
   86682:	3a04      	subs	r2, #4
   86684:	2a03      	cmp	r2, #3
   86686:	f846 5b04 	str.w	r5, [r6], #4
   8668a:	d8fa      	bhi.n	86682 <memset+0x6a>
   8668c:	1f22      	subs	r2, r4, #4
   8668e:	f022 0203 	bic.w	r2, r2, #3
   86692:	3204      	adds	r2, #4
   86694:	4413      	add	r3, r2
   86696:	f004 0403 	and.w	r4, r4, #3
   8669a:	b12c      	cbz	r4, 866a8 <memset+0x90>
   8669c:	b2c9      	uxtb	r1, r1
   8669e:	441c      	add	r4, r3
   866a0:	f803 1b01 	strb.w	r1, [r3], #1
   866a4:	429c      	cmp	r4, r3
   866a6:	d1fb      	bne.n	866a0 <memset+0x88>
   866a8:	bc70      	pop	{r4, r5, r6}
   866aa:	4770      	bx	lr
   866ac:	4614      	mov	r4, r2
   866ae:	4603      	mov	r3, r0
   866b0:	e7c2      	b.n	86638 <memset+0x20>
   866b2:	bf00      	nop

000866b4 <setbuf>:
   866b4:	2900      	cmp	r1, #0
   866b6:	bf0c      	ite	eq
   866b8:	2202      	moveq	r2, #2
   866ba:	2200      	movne	r2, #0
   866bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   866c0:	f000 b800 	b.w	866c4 <setvbuf>

000866c4 <setvbuf>:
   866c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   866c8:	4d61      	ldr	r5, [pc, #388]	; (86850 <setvbuf+0x18c>)
   866ca:	b083      	sub	sp, #12
   866cc:	682d      	ldr	r5, [r5, #0]
   866ce:	4604      	mov	r4, r0
   866d0:	460f      	mov	r7, r1
   866d2:	4690      	mov	r8, r2
   866d4:	461e      	mov	r6, r3
   866d6:	b115      	cbz	r5, 866de <setvbuf+0x1a>
   866d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   866da:	2b00      	cmp	r3, #0
   866dc:	d064      	beq.n	867a8 <setvbuf+0xe4>
   866de:	f1b8 0f02 	cmp.w	r8, #2
   866e2:	d006      	beq.n	866f2 <setvbuf+0x2e>
   866e4:	f1b8 0f01 	cmp.w	r8, #1
   866e8:	f200 809f 	bhi.w	8682a <setvbuf+0x166>
   866ec:	2e00      	cmp	r6, #0
   866ee:	f2c0 809c 	blt.w	8682a <setvbuf+0x166>
   866f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   866f4:	07d8      	lsls	r0, r3, #31
   866f6:	d534      	bpl.n	86762 <setvbuf+0x9e>
   866f8:	4621      	mov	r1, r4
   866fa:	4628      	mov	r0, r5
   866fc:	f003 fb3e 	bl	89d7c <_fflush_r>
   86700:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86702:	b141      	cbz	r1, 86716 <setvbuf+0x52>
   86704:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86708:	4299      	cmp	r1, r3
   8670a:	d002      	beq.n	86712 <setvbuf+0x4e>
   8670c:	4628      	mov	r0, r5
   8670e:	f003 fcb3 	bl	8a078 <_free_r>
   86712:	2300      	movs	r3, #0
   86714:	6323      	str	r3, [r4, #48]	; 0x30
   86716:	2200      	movs	r2, #0
   86718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8671c:	61a2      	str	r2, [r4, #24]
   8671e:	6062      	str	r2, [r4, #4]
   86720:	061a      	lsls	r2, r3, #24
   86722:	d43a      	bmi.n	8679a <setvbuf+0xd6>
   86724:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   86728:	f023 0303 	bic.w	r3, r3, #3
   8672c:	f1b8 0f02 	cmp.w	r8, #2
   86730:	81a3      	strh	r3, [r4, #12]
   86732:	d01d      	beq.n	86770 <setvbuf+0xac>
   86734:	ab01      	add	r3, sp, #4
   86736:	466a      	mov	r2, sp
   86738:	4621      	mov	r1, r4
   8673a:	4628      	mov	r0, r5
   8673c:	f003 ff48 	bl	8a5d0 <__swhatbuf_r>
   86740:	89a3      	ldrh	r3, [r4, #12]
   86742:	4318      	orrs	r0, r3
   86744:	81a0      	strh	r0, [r4, #12]
   86746:	2e00      	cmp	r6, #0
   86748:	d132      	bne.n	867b0 <setvbuf+0xec>
   8674a:	9e00      	ldr	r6, [sp, #0]
   8674c:	4630      	mov	r0, r6
   8674e:	f003 ffb7 	bl	8a6c0 <malloc>
   86752:	4607      	mov	r7, r0
   86754:	2800      	cmp	r0, #0
   86756:	d06b      	beq.n	86830 <setvbuf+0x16c>
   86758:	89a3      	ldrh	r3, [r4, #12]
   8675a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8675e:	81a3      	strh	r3, [r4, #12]
   86760:	e028      	b.n	867b4 <setvbuf+0xf0>
   86762:	89a3      	ldrh	r3, [r4, #12]
   86764:	0599      	lsls	r1, r3, #22
   86766:	d4c7      	bmi.n	866f8 <setvbuf+0x34>
   86768:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8676a:	f003 ff2d 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   8676e:	e7c3      	b.n	866f8 <setvbuf+0x34>
   86770:	2500      	movs	r5, #0
   86772:	2600      	movs	r6, #0
   86774:	2001      	movs	r0, #1
   86776:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86778:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8677c:	f043 0302 	orr.w	r3, r3, #2
   86780:	60a6      	str	r6, [r4, #8]
   86782:	07ce      	lsls	r6, r1, #31
   86784:	81a3      	strh	r3, [r4, #12]
   86786:	6160      	str	r0, [r4, #20]
   86788:	6022      	str	r2, [r4, #0]
   8678a:	6122      	str	r2, [r4, #16]
   8678c:	d401      	bmi.n	86792 <setvbuf+0xce>
   8678e:	0598      	lsls	r0, r3, #22
   86790:	d53e      	bpl.n	86810 <setvbuf+0x14c>
   86792:	4628      	mov	r0, r5
   86794:	b003      	add	sp, #12
   86796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8679a:	6921      	ldr	r1, [r4, #16]
   8679c:	4628      	mov	r0, r5
   8679e:	f003 fc6b 	bl	8a078 <_free_r>
   867a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   867a6:	e7bd      	b.n	86724 <setvbuf+0x60>
   867a8:	4628      	mov	r0, r5
   867aa:	f003 fb3f 	bl	89e2c <__sinit>
   867ae:	e796      	b.n	866de <setvbuf+0x1a>
   867b0:	2f00      	cmp	r7, #0
   867b2:	d0cb      	beq.n	8674c <setvbuf+0x88>
   867b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   867b6:	2b00      	cmp	r3, #0
   867b8:	d033      	beq.n	86822 <setvbuf+0x15e>
   867ba:	9b00      	ldr	r3, [sp, #0]
   867bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   867c0:	429e      	cmp	r6, r3
   867c2:	bf1c      	itt	ne
   867c4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   867c8:	81a2      	strhne	r2, [r4, #12]
   867ca:	f1b8 0f01 	cmp.w	r8, #1
   867ce:	bf04      	itt	eq
   867d0:	f042 0201 	orreq.w	r2, r2, #1
   867d4:	81a2      	strheq	r2, [r4, #12]
   867d6:	b292      	uxth	r2, r2
   867d8:	f012 0308 	ands.w	r3, r2, #8
   867dc:	6027      	str	r7, [r4, #0]
   867de:	6127      	str	r7, [r4, #16]
   867e0:	6166      	str	r6, [r4, #20]
   867e2:	d00e      	beq.n	86802 <setvbuf+0x13e>
   867e4:	07d1      	lsls	r1, r2, #31
   867e6:	d51a      	bpl.n	8681e <setvbuf+0x15a>
   867e8:	2300      	movs	r3, #0
   867ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
   867ec:	4276      	negs	r6, r6
   867ee:	f015 0501 	ands.w	r5, r5, #1
   867f2:	61a6      	str	r6, [r4, #24]
   867f4:	60a3      	str	r3, [r4, #8]
   867f6:	d009      	beq.n	8680c <setvbuf+0x148>
   867f8:	2500      	movs	r5, #0
   867fa:	4628      	mov	r0, r5
   867fc:	b003      	add	sp, #12
   867fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86802:	60a3      	str	r3, [r4, #8]
   86804:	6e65      	ldr	r5, [r4, #100]	; 0x64
   86806:	f015 0501 	ands.w	r5, r5, #1
   8680a:	d1f5      	bne.n	867f8 <setvbuf+0x134>
   8680c:	0593      	lsls	r3, r2, #22
   8680e:	d4c0      	bmi.n	86792 <setvbuf+0xce>
   86810:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86812:	f003 fedb 	bl	8a5cc <__retarget_lock_release_recursive>
   86816:	4628      	mov	r0, r5
   86818:	b003      	add	sp, #12
   8681a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8681e:	60a6      	str	r6, [r4, #8]
   86820:	e7f0      	b.n	86804 <setvbuf+0x140>
   86822:	4628      	mov	r0, r5
   86824:	f003 fb02 	bl	89e2c <__sinit>
   86828:	e7c7      	b.n	867ba <setvbuf+0xf6>
   8682a:	f04f 35ff 	mov.w	r5, #4294967295
   8682e:	e7b0      	b.n	86792 <setvbuf+0xce>
   86830:	f8dd 9000 	ldr.w	r9, [sp]
   86834:	45b1      	cmp	r9, r6
   86836:	d004      	beq.n	86842 <setvbuf+0x17e>
   86838:	4648      	mov	r0, r9
   8683a:	f003 ff41 	bl	8a6c0 <malloc>
   8683e:	4607      	mov	r7, r0
   86840:	b920      	cbnz	r0, 8684c <setvbuf+0x188>
   86842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86846:	f04f 35ff 	mov.w	r5, #4294967295
   8684a:	e792      	b.n	86772 <setvbuf+0xae>
   8684c:	464e      	mov	r6, r9
   8684e:	e783      	b.n	86758 <setvbuf+0x94>
   86850:	20000aa8 	.word	0x20000aa8

00086854 <sprintf>:
   86854:	b40e      	push	{r1, r2, r3}
   86856:	4601      	mov	r1, r0
   86858:	b5f0      	push	{r4, r5, r6, r7, lr}
   8685a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8685e:	f44f 7702 	mov.w	r7, #520	; 0x208
   86862:	f64f 76ff 	movw	r6, #65535	; 0xffff
   86866:	b09c      	sub	sp, #112	; 0x70
   86868:	ac21      	add	r4, sp, #132	; 0x84
   8686a:	f854 2b04 	ldr.w	r2, [r4], #4
   8686e:	4b0b      	ldr	r3, [pc, #44]	; (8689c <sprintf+0x48>)
   86870:	9102      	str	r1, [sp, #8]
   86872:	9106      	str	r1, [sp, #24]
   86874:	6818      	ldr	r0, [r3, #0]
   86876:	a902      	add	r1, sp, #8
   86878:	4623      	mov	r3, r4
   8687a:	9401      	str	r4, [sp, #4]
   8687c:	f8ad 7014 	strh.w	r7, [sp, #20]
   86880:	9504      	str	r5, [sp, #16]
   86882:	9507      	str	r5, [sp, #28]
   86884:	f8ad 6016 	strh.w	r6, [sp, #22]
   86888:	f000 f86a 	bl	86960 <_svfprintf_r>
   8688c:	2200      	movs	r2, #0
   8688e:	9b02      	ldr	r3, [sp, #8]
   86890:	701a      	strb	r2, [r3, #0]
   86892:	b01c      	add	sp, #112	; 0x70
   86894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   86898:	b003      	add	sp, #12
   8689a:	4770      	bx	lr
   8689c:	20000aa8 	.word	0x20000aa8

000868a0 <strlen>:
   868a0:	f020 0103 	bic.w	r1, r0, #3
   868a4:	f010 0003 	ands.w	r0, r0, #3
   868a8:	f1c0 0000 	rsb	r0, r0, #0
   868ac:	f851 3b04 	ldr.w	r3, [r1], #4
   868b0:	f100 0c04 	add.w	ip, r0, #4
   868b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   868b8:	f06f 0200 	mvn.w	r2, #0
   868bc:	bf1c      	itt	ne
   868be:	fa22 f20c 	lsrne.w	r2, r2, ip
   868c2:	4313      	orrne	r3, r2
   868c4:	f04f 0c01 	mov.w	ip, #1
   868c8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   868cc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   868d0:	eba3 020c 	sub.w	r2, r3, ip
   868d4:	ea22 0203 	bic.w	r2, r2, r3
   868d8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   868dc:	bf04      	itt	eq
   868de:	f851 3b04 	ldreq.w	r3, [r1], #4
   868e2:	3004      	addeq	r0, #4
   868e4:	d0f4      	beq.n	868d0 <strlen+0x30>
   868e6:	f1c2 0100 	rsb	r1, r2, #0
   868ea:	ea02 0201 	and.w	r2, r2, r1
   868ee:	fab2 f282 	clz	r2, r2
   868f2:	f1c2 021f 	rsb	r2, r2, #31
   868f6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   868fa:	4770      	bx	lr

000868fc <strncpy>:
   868fc:	ea40 0301 	orr.w	r3, r0, r1
   86900:	f013 0f03 	tst.w	r3, #3
   86904:	b470      	push	{r4, r5, r6}
   86906:	4603      	mov	r3, r0
   86908:	d024      	beq.n	86954 <strncpy+0x58>
   8690a:	b1a2      	cbz	r2, 86936 <strncpy+0x3a>
   8690c:	780c      	ldrb	r4, [r1, #0]
   8690e:	3a01      	subs	r2, #1
   86910:	701c      	strb	r4, [r3, #0]
   86912:	3101      	adds	r1, #1
   86914:	3301      	adds	r3, #1
   86916:	b13c      	cbz	r4, 86928 <strncpy+0x2c>
   86918:	b16a      	cbz	r2, 86936 <strncpy+0x3a>
   8691a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8691e:	3a01      	subs	r2, #1
   86920:	f803 4b01 	strb.w	r4, [r3], #1
   86924:	2c00      	cmp	r4, #0
   86926:	d1f7      	bne.n	86918 <strncpy+0x1c>
   86928:	b12a      	cbz	r2, 86936 <strncpy+0x3a>
   8692a:	2100      	movs	r1, #0
   8692c:	441a      	add	r2, r3
   8692e:	f803 1b01 	strb.w	r1, [r3], #1
   86932:	429a      	cmp	r2, r3
   86934:	d1fb      	bne.n	8692e <strncpy+0x32>
   86936:	bc70      	pop	{r4, r5, r6}
   86938:	4770      	bx	lr
   8693a:	460e      	mov	r6, r1
   8693c:	f851 5b04 	ldr.w	r5, [r1], #4
   86940:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86944:	ea24 0405 	bic.w	r4, r4, r5
   86948:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   8694c:	d105      	bne.n	8695a <strncpy+0x5e>
   8694e:	3a04      	subs	r2, #4
   86950:	f843 5b04 	str.w	r5, [r3], #4
   86954:	2a03      	cmp	r2, #3
   86956:	d8f0      	bhi.n	8693a <strncpy+0x3e>
   86958:	e7d7      	b.n	8690a <strncpy+0xe>
   8695a:	4631      	mov	r1, r6
   8695c:	e7d6      	b.n	8690c <strncpy+0x10>
   8695e:	bf00      	nop

00086960 <_svfprintf_r>:
   86960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86964:	b0c3      	sub	sp, #268	; 0x10c
   86966:	460c      	mov	r4, r1
   86968:	910b      	str	r1, [sp, #44]	; 0x2c
   8696a:	4692      	mov	sl, r2
   8696c:	930f      	str	r3, [sp, #60]	; 0x3c
   8696e:	900c      	str	r0, [sp, #48]	; 0x30
   86970:	f003 fe18 	bl	8a5a4 <_localeconv_r>
   86974:	6803      	ldr	r3, [r0, #0]
   86976:	4618      	mov	r0, r3
   86978:	931a      	str	r3, [sp, #104]	; 0x68
   8697a:	f7ff ff91 	bl	868a0 <strlen>
   8697e:	89a3      	ldrh	r3, [r4, #12]
   86980:	9019      	str	r0, [sp, #100]	; 0x64
   86982:	0619      	lsls	r1, r3, #24
   86984:	d503      	bpl.n	8698e <_svfprintf_r+0x2e>
   86986:	6923      	ldr	r3, [r4, #16]
   86988:	2b00      	cmp	r3, #0
   8698a:	f001 8035 	beq.w	879f8 <_svfprintf_r+0x1098>
   8698e:	2300      	movs	r3, #0
   86990:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   86994:	46c8      	mov	r8, r9
   86996:	9315      	str	r3, [sp, #84]	; 0x54
   86998:	9313      	str	r3, [sp, #76]	; 0x4c
   8699a:	9314      	str	r3, [sp, #80]	; 0x50
   8699c:	9318      	str	r3, [sp, #96]	; 0x60
   8699e:	931b      	str	r3, [sp, #108]	; 0x6c
   869a0:	9309      	str	r3, [sp, #36]	; 0x24
   869a2:	9316      	str	r3, [sp, #88]	; 0x58
   869a4:	9317      	str	r3, [sp, #92]	; 0x5c
   869a6:	9327      	str	r3, [sp, #156]	; 0x9c
   869a8:	9326      	str	r3, [sp, #152]	; 0x98
   869aa:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   869ae:	f89a 3000 	ldrb.w	r3, [sl]
   869b2:	4654      	mov	r4, sl
   869b4:	b1eb      	cbz	r3, 869f2 <_svfprintf_r+0x92>
   869b6:	2b25      	cmp	r3, #37	; 0x25
   869b8:	d102      	bne.n	869c0 <_svfprintf_r+0x60>
   869ba:	e01a      	b.n	869f2 <_svfprintf_r+0x92>
   869bc:	2b25      	cmp	r3, #37	; 0x25
   869be:	d003      	beq.n	869c8 <_svfprintf_r+0x68>
   869c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   869c4:	2b00      	cmp	r3, #0
   869c6:	d1f9      	bne.n	869bc <_svfprintf_r+0x5c>
   869c8:	eba4 050a 	sub.w	r5, r4, sl
   869cc:	b18d      	cbz	r5, 869f2 <_svfprintf_r+0x92>
   869ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   869d0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   869d2:	3301      	adds	r3, #1
   869d4:	442a      	add	r2, r5
   869d6:	2b07      	cmp	r3, #7
   869d8:	f8c8 a000 	str.w	sl, [r8]
   869dc:	f8c8 5004 	str.w	r5, [r8, #4]
   869e0:	9227      	str	r2, [sp, #156]	; 0x9c
   869e2:	9326      	str	r3, [sp, #152]	; 0x98
   869e4:	f300 808a 	bgt.w	86afc <_svfprintf_r+0x19c>
   869e8:	f108 0808 	add.w	r8, r8, #8
   869ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   869ee:	442b      	add	r3, r5
   869f0:	9309      	str	r3, [sp, #36]	; 0x24
   869f2:	7823      	ldrb	r3, [r4, #0]
   869f4:	2b00      	cmp	r3, #0
   869f6:	f000 8089 	beq.w	86b0c <_svfprintf_r+0x1ac>
   869fa:	2300      	movs	r3, #0
   869fc:	f04f 30ff 	mov.w	r0, #4294967295
   86a00:	461a      	mov	r2, r3
   86a02:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86a06:	4619      	mov	r1, r3
   86a08:	930d      	str	r3, [sp, #52]	; 0x34
   86a0a:	469b      	mov	fp, r3
   86a0c:	7863      	ldrb	r3, [r4, #1]
   86a0e:	f104 0a01 	add.w	sl, r4, #1
   86a12:	900a      	str	r0, [sp, #40]	; 0x28
   86a14:	f10a 0a01 	add.w	sl, sl, #1
   86a18:	f1a3 0020 	sub.w	r0, r3, #32
   86a1c:	2858      	cmp	r0, #88	; 0x58
   86a1e:	f200 83b7 	bhi.w	87190 <_svfprintf_r+0x830>
   86a22:	e8df f010 	tbh	[pc, r0, lsl #1]
   86a26:	034c      	.short	0x034c
   86a28:	03b503b5 	.word	0x03b503b5
   86a2c:	03b50354 	.word	0x03b50354
   86a30:	03b503b5 	.word	0x03b503b5
   86a34:	03b503b5 	.word	0x03b503b5
   86a38:	005903b5 	.word	0x005903b5
   86a3c:	03b50359 	.word	0x03b50359
   86a40:	02140066 	.word	0x02140066
   86a44:	022f03b5 	.word	0x022f03b5
   86a48:	03a503a5 	.word	0x03a503a5
   86a4c:	03a503a5 	.word	0x03a503a5
   86a50:	03a503a5 	.word	0x03a503a5
   86a54:	03a503a5 	.word	0x03a503a5
   86a58:	03b503a5 	.word	0x03b503a5
   86a5c:	03b503b5 	.word	0x03b503b5
   86a60:	03b503b5 	.word	0x03b503b5
   86a64:	03b503b5 	.word	0x03b503b5
   86a68:	03b503b5 	.word	0x03b503b5
   86a6c:	028b03b5 	.word	0x028b03b5
   86a70:	03b502d3 	.word	0x03b502d3
   86a74:	03b502d3 	.word	0x03b502d3
   86a78:	03b503b5 	.word	0x03b503b5
   86a7c:	031b03b5 	.word	0x031b03b5
   86a80:	03b503b5 	.word	0x03b503b5
   86a84:	03b50320 	.word	0x03b50320
   86a88:	03b503b5 	.word	0x03b503b5
   86a8c:	03b503b5 	.word	0x03b503b5
   86a90:	03b50234 	.word	0x03b50234
   86a94:	024b03b5 	.word	0x024b03b5
   86a98:	03b503b5 	.word	0x03b503b5
   86a9c:	03b503b5 	.word	0x03b503b5
   86aa0:	03b503b5 	.word	0x03b503b5
   86aa4:	03b503b5 	.word	0x03b503b5
   86aa8:	03b503b5 	.word	0x03b503b5
   86aac:	039e0276 	.word	0x039e0276
   86ab0:	02d302d3 	.word	0x02d302d3
   86ab4:	036302d3 	.word	0x036302d3
   86ab8:	03b5039e 	.word	0x03b5039e
   86abc:	036803b5 	.word	0x036803b5
   86ac0:	037503b5 	.word	0x037503b5
   86ac4:	038c01dd 	.word	0x038c01dd
   86ac8:	03b5035e 	.word	0x03b5035e
   86acc:	03b501f2 	.word	0x03b501f2
   86ad0:	03b50087 	.word	0x03b50087
   86ad4:	033203b5 	.word	0x033203b5
   86ad8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86ada:	6823      	ldr	r3, [r4, #0]
   86adc:	4618      	mov	r0, r3
   86ade:	930d      	str	r3, [sp, #52]	; 0x34
   86ae0:	4623      	mov	r3, r4
   86ae2:	2800      	cmp	r0, #0
   86ae4:	f103 0304 	add.w	r3, r3, #4
   86ae8:	930f      	str	r3, [sp, #60]	; 0x3c
   86aea:	da04      	bge.n	86af6 <_svfprintf_r+0x196>
   86aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86aee:	425b      	negs	r3, r3
   86af0:	930d      	str	r3, [sp, #52]	; 0x34
   86af2:	f04b 0b04 	orr.w	fp, fp, #4
   86af6:	f89a 3000 	ldrb.w	r3, [sl]
   86afa:	e78b      	b.n	86a14 <_svfprintf_r+0xb4>
   86afc:	aa25      	add	r2, sp, #148	; 0x94
   86afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b00:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b02:	f004 fe5b 	bl	8b7bc <__ssprint_r>
   86b06:	b940      	cbnz	r0, 86b1a <_svfprintf_r+0x1ba>
   86b08:	46c8      	mov	r8, r9
   86b0a:	e76f      	b.n	869ec <_svfprintf_r+0x8c>
   86b0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   86b0e:	b123      	cbz	r3, 86b1a <_svfprintf_r+0x1ba>
   86b10:	980c      	ldr	r0, [sp, #48]	; 0x30
   86b12:	aa25      	add	r2, sp, #148	; 0x94
   86b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b16:	f004 fe51 	bl	8b7bc <__ssprint_r>
   86b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86b1c:	899b      	ldrh	r3, [r3, #12]
   86b1e:	f013 0f40 	tst.w	r3, #64	; 0x40
   86b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b24:	bf18      	it	ne
   86b26:	f04f 33ff 	movne.w	r3, #4294967295
   86b2a:	9309      	str	r3, [sp, #36]	; 0x24
   86b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   86b2e:	b043      	add	sp, #268	; 0x10c
   86b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b34:	f01b 0f20 	tst.w	fp, #32
   86b38:	9311      	str	r3, [sp, #68]	; 0x44
   86b3a:	f040 81af 	bne.w	86e9c <_svfprintf_r+0x53c>
   86b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86b40:	f01b 0f10 	tst.w	fp, #16
   86b44:	4613      	mov	r3, r2
   86b46:	f040 859a 	bne.w	8767e <_svfprintf_r+0xd1e>
   86b4a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86b4e:	f000 8596 	beq.w	8767e <_svfprintf_r+0xd1e>
   86b52:	2500      	movs	r5, #0
   86b54:	2301      	movs	r3, #1
   86b56:	8814      	ldrh	r4, [r2, #0]
   86b58:	3204      	adds	r2, #4
   86b5a:	920f      	str	r2, [sp, #60]	; 0x3c
   86b5c:	2200      	movs	r2, #0
   86b5e:	4617      	mov	r7, r2
   86b60:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   86b64:	990a      	ldr	r1, [sp, #40]	; 0x28
   86b66:	1c4a      	adds	r2, r1, #1
   86b68:	f000 8210 	beq.w	86f8c <_svfprintf_r+0x62c>
   86b6c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   86b70:	9207      	str	r2, [sp, #28]
   86b72:	ea54 0205 	orrs.w	r2, r4, r5
   86b76:	f040 820f 	bne.w	86f98 <_svfprintf_r+0x638>
   86b7a:	2900      	cmp	r1, #0
   86b7c:	f040 8431 	bne.w	873e2 <_svfprintf_r+0xa82>
   86b80:	2b00      	cmp	r3, #0
   86b82:	f040 8539 	bne.w	875f8 <_svfprintf_r+0xc98>
   86b86:	f01b 0301 	ands.w	r3, fp, #1
   86b8a:	930e      	str	r3, [sp, #56]	; 0x38
   86b8c:	f000 8662 	beq.w	87854 <_svfprintf_r+0xef4>
   86b90:	2330      	movs	r3, #48	; 0x30
   86b92:	ae42      	add	r6, sp, #264	; 0x108
   86b94:	f806 3d41 	strb.w	r3, [r6, #-65]!
   86b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86b9c:	4293      	cmp	r3, r2
   86b9e:	bfb8      	it	lt
   86ba0:	4613      	movlt	r3, r2
   86ba2:	9308      	str	r3, [sp, #32]
   86ba4:	2300      	movs	r3, #0
   86ba6:	9312      	str	r3, [sp, #72]	; 0x48
   86ba8:	b117      	cbz	r7, 86bb0 <_svfprintf_r+0x250>
   86baa:	9b08      	ldr	r3, [sp, #32]
   86bac:	3301      	adds	r3, #1
   86bae:	9308      	str	r3, [sp, #32]
   86bb0:	9b07      	ldr	r3, [sp, #28]
   86bb2:	f013 0302 	ands.w	r3, r3, #2
   86bb6:	9310      	str	r3, [sp, #64]	; 0x40
   86bb8:	d002      	beq.n	86bc0 <_svfprintf_r+0x260>
   86bba:	9b08      	ldr	r3, [sp, #32]
   86bbc:	3302      	adds	r3, #2
   86bbe:	9308      	str	r3, [sp, #32]
   86bc0:	9b07      	ldr	r3, [sp, #28]
   86bc2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   86bc6:	f040 8310 	bne.w	871ea <_svfprintf_r+0x88a>
   86bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86bcc:	9a08      	ldr	r2, [sp, #32]
   86bce:	eba3 0b02 	sub.w	fp, r3, r2
   86bd2:	f1bb 0f00 	cmp.w	fp, #0
   86bd6:	f340 8308 	ble.w	871ea <_svfprintf_r+0x88a>
   86bda:	f1bb 0f10 	cmp.w	fp, #16
   86bde:	f340 87b2 	ble.w	87b46 <_svfprintf_r+0x11e6>
   86be2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86be4:	4643      	mov	r3, r8
   86be6:	4621      	mov	r1, r4
   86be8:	46a8      	mov	r8, r5
   86bea:	2710      	movs	r7, #16
   86bec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86bee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86bf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86bf2:	e006      	b.n	86c02 <_svfprintf_r+0x2a2>
   86bf4:	f1ab 0b10 	sub.w	fp, fp, #16
   86bf8:	f1bb 0f10 	cmp.w	fp, #16
   86bfc:	f103 0308 	add.w	r3, r3, #8
   86c00:	dd18      	ble.n	86c34 <_svfprintf_r+0x2d4>
   86c02:	3201      	adds	r2, #1
   86c04:	48ab      	ldr	r0, [pc, #684]	; (86eb4 <_svfprintf_r+0x554>)
   86c06:	3110      	adds	r1, #16
   86c08:	2a07      	cmp	r2, #7
   86c0a:	9127      	str	r1, [sp, #156]	; 0x9c
   86c0c:	9226      	str	r2, [sp, #152]	; 0x98
   86c0e:	e883 0081 	stmia.w	r3, {r0, r7}
   86c12:	ddef      	ble.n	86bf4 <_svfprintf_r+0x294>
   86c14:	aa25      	add	r2, sp, #148	; 0x94
   86c16:	4629      	mov	r1, r5
   86c18:	4620      	mov	r0, r4
   86c1a:	f004 fdcf 	bl	8b7bc <__ssprint_r>
   86c1e:	2800      	cmp	r0, #0
   86c20:	f47f af7b 	bne.w	86b1a <_svfprintf_r+0x1ba>
   86c24:	f1ab 0b10 	sub.w	fp, fp, #16
   86c28:	f1bb 0f10 	cmp.w	fp, #16
   86c2c:	464b      	mov	r3, r9
   86c2e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86c30:	9a26      	ldr	r2, [sp, #152]	; 0x98
   86c32:	dce6      	bgt.n	86c02 <_svfprintf_r+0x2a2>
   86c34:	4645      	mov	r5, r8
   86c36:	460c      	mov	r4, r1
   86c38:	4698      	mov	r8, r3
   86c3a:	3201      	adds	r2, #1
   86c3c:	4b9d      	ldr	r3, [pc, #628]	; (86eb4 <_svfprintf_r+0x554>)
   86c3e:	445c      	add	r4, fp
   86c40:	2a07      	cmp	r2, #7
   86c42:	9427      	str	r4, [sp, #156]	; 0x9c
   86c44:	9226      	str	r2, [sp, #152]	; 0x98
   86c46:	e888 0808 	stmia.w	r8, {r3, fp}
   86c4a:	f300 82c3 	bgt.w	871d4 <_svfprintf_r+0x874>
   86c4e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86c52:	f108 0808 	add.w	r8, r8, #8
   86c56:	b187      	cbz	r7, 86c7a <_svfprintf_r+0x31a>
   86c58:	2101      	movs	r1, #1
   86c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c5c:	440c      	add	r4, r1
   86c5e:	440b      	add	r3, r1
   86c60:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   86c64:	2b07      	cmp	r3, #7
   86c66:	9427      	str	r4, [sp, #156]	; 0x9c
   86c68:	9326      	str	r3, [sp, #152]	; 0x98
   86c6a:	f8c8 1004 	str.w	r1, [r8, #4]
   86c6e:	f8c8 2000 	str.w	r2, [r8]
   86c72:	f300 83cd 	bgt.w	87410 <_svfprintf_r+0xab0>
   86c76:	f108 0808 	add.w	r8, r8, #8
   86c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86c7c:	b17b      	cbz	r3, 86c9e <_svfprintf_r+0x33e>
   86c7e:	2102      	movs	r1, #2
   86c80:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86c82:	440c      	add	r4, r1
   86c84:	3301      	adds	r3, #1
   86c86:	aa1e      	add	r2, sp, #120	; 0x78
   86c88:	2b07      	cmp	r3, #7
   86c8a:	9427      	str	r4, [sp, #156]	; 0x9c
   86c8c:	9326      	str	r3, [sp, #152]	; 0x98
   86c8e:	f8c8 1004 	str.w	r1, [r8, #4]
   86c92:	f8c8 2000 	str.w	r2, [r8]
   86c96:	f300 8411 	bgt.w	874bc <_svfprintf_r+0xb5c>
   86c9a:	f108 0808 	add.w	r8, r8, #8
   86c9e:	2d80      	cmp	r5, #128	; 0x80
   86ca0:	f000 8304 	beq.w	872ac <_svfprintf_r+0x94c>
   86ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86ca8:	1a9f      	subs	r7, r3, r2
   86caa:	2f00      	cmp	r7, #0
   86cac:	dd37      	ble.n	86d1e <_svfprintf_r+0x3be>
   86cae:	2f10      	cmp	r7, #16
   86cb0:	f340 8679 	ble.w	879a6 <_svfprintf_r+0x1046>
   86cb4:	4d80      	ldr	r5, [pc, #512]	; (86eb8 <_svfprintf_r+0x558>)
   86cb6:	4642      	mov	r2, r8
   86cb8:	4621      	mov	r1, r4
   86cba:	46b0      	mov	r8, r6
   86cbc:	f04f 0b10 	mov.w	fp, #16
   86cc0:	462e      	mov	r6, r5
   86cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86cc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   86cc8:	e004      	b.n	86cd4 <_svfprintf_r+0x374>
   86cca:	3f10      	subs	r7, #16
   86ccc:	2f10      	cmp	r7, #16
   86cce:	f102 0208 	add.w	r2, r2, #8
   86cd2:	dd15      	ble.n	86d00 <_svfprintf_r+0x3a0>
   86cd4:	3301      	adds	r3, #1
   86cd6:	3110      	adds	r1, #16
   86cd8:	2b07      	cmp	r3, #7
   86cda:	9127      	str	r1, [sp, #156]	; 0x9c
   86cdc:	9326      	str	r3, [sp, #152]	; 0x98
   86cde:	e882 0840 	stmia.w	r2, {r6, fp}
   86ce2:	ddf2      	ble.n	86cca <_svfprintf_r+0x36a>
   86ce4:	aa25      	add	r2, sp, #148	; 0x94
   86ce6:	4629      	mov	r1, r5
   86ce8:	4620      	mov	r0, r4
   86cea:	f004 fd67 	bl	8b7bc <__ssprint_r>
   86cee:	2800      	cmp	r0, #0
   86cf0:	f47f af13 	bne.w	86b1a <_svfprintf_r+0x1ba>
   86cf4:	3f10      	subs	r7, #16
   86cf6:	2f10      	cmp	r7, #16
   86cf8:	464a      	mov	r2, r9
   86cfa:	9927      	ldr	r1, [sp, #156]	; 0x9c
   86cfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cfe:	dce9      	bgt.n	86cd4 <_svfprintf_r+0x374>
   86d00:	4635      	mov	r5, r6
   86d02:	460c      	mov	r4, r1
   86d04:	4646      	mov	r6, r8
   86d06:	4690      	mov	r8, r2
   86d08:	3301      	adds	r3, #1
   86d0a:	443c      	add	r4, r7
   86d0c:	2b07      	cmp	r3, #7
   86d0e:	9427      	str	r4, [sp, #156]	; 0x9c
   86d10:	9326      	str	r3, [sp, #152]	; 0x98
   86d12:	e888 00a0 	stmia.w	r8, {r5, r7}
   86d16:	f300 8370 	bgt.w	873fa <_svfprintf_r+0xa9a>
   86d1a:	f108 0808 	add.w	r8, r8, #8
   86d1e:	9b07      	ldr	r3, [sp, #28]
   86d20:	05df      	lsls	r7, r3, #23
   86d22:	f100 8264 	bmi.w	871ee <_svfprintf_r+0x88e>
   86d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d28:	990e      	ldr	r1, [sp, #56]	; 0x38
   86d2a:	3301      	adds	r3, #1
   86d2c:	440c      	add	r4, r1
   86d2e:	2b07      	cmp	r3, #7
   86d30:	9427      	str	r4, [sp, #156]	; 0x9c
   86d32:	f8c8 6000 	str.w	r6, [r8]
   86d36:	f8c8 1004 	str.w	r1, [r8, #4]
   86d3a:	9326      	str	r3, [sp, #152]	; 0x98
   86d3c:	f300 83b3 	bgt.w	874a6 <_svfprintf_r+0xb46>
   86d40:	f108 0808 	add.w	r8, r8, #8
   86d44:	9b07      	ldr	r3, [sp, #28]
   86d46:	075b      	lsls	r3, r3, #29
   86d48:	d53b      	bpl.n	86dc2 <_svfprintf_r+0x462>
   86d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86d4c:	9a08      	ldr	r2, [sp, #32]
   86d4e:	1a9d      	subs	r5, r3, r2
   86d50:	2d00      	cmp	r5, #0
   86d52:	dd36      	ble.n	86dc2 <_svfprintf_r+0x462>
   86d54:	2d10      	cmp	r5, #16
   86d56:	f340 8721 	ble.w	87b9c <_svfprintf_r+0x123c>
   86d5a:	2610      	movs	r6, #16
   86d5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86d60:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   86d64:	e004      	b.n	86d70 <_svfprintf_r+0x410>
   86d66:	3d10      	subs	r5, #16
   86d68:	2d10      	cmp	r5, #16
   86d6a:	f108 0808 	add.w	r8, r8, #8
   86d6e:	dd16      	ble.n	86d9e <_svfprintf_r+0x43e>
   86d70:	3301      	adds	r3, #1
   86d72:	4a50      	ldr	r2, [pc, #320]	; (86eb4 <_svfprintf_r+0x554>)
   86d74:	3410      	adds	r4, #16
   86d76:	2b07      	cmp	r3, #7
   86d78:	9427      	str	r4, [sp, #156]	; 0x9c
   86d7a:	9326      	str	r3, [sp, #152]	; 0x98
   86d7c:	e888 0044 	stmia.w	r8, {r2, r6}
   86d80:	ddf1      	ble.n	86d66 <_svfprintf_r+0x406>
   86d82:	aa25      	add	r2, sp, #148	; 0x94
   86d84:	4659      	mov	r1, fp
   86d86:	4638      	mov	r0, r7
   86d88:	f004 fd18 	bl	8b7bc <__ssprint_r>
   86d8c:	2800      	cmp	r0, #0
   86d8e:	f47f aec4 	bne.w	86b1a <_svfprintf_r+0x1ba>
   86d92:	3d10      	subs	r5, #16
   86d94:	2d10      	cmp	r5, #16
   86d96:	46c8      	mov	r8, r9
   86d98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86d9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86d9c:	dce8      	bgt.n	86d70 <_svfprintf_r+0x410>
   86d9e:	3301      	adds	r3, #1
   86da0:	4a44      	ldr	r2, [pc, #272]	; (86eb4 <_svfprintf_r+0x554>)
   86da2:	442c      	add	r4, r5
   86da4:	2b07      	cmp	r3, #7
   86da6:	9427      	str	r4, [sp, #156]	; 0x9c
   86da8:	9326      	str	r3, [sp, #152]	; 0x98
   86daa:	e888 0024 	stmia.w	r8, {r2, r5}
   86dae:	dd08      	ble.n	86dc2 <_svfprintf_r+0x462>
   86db0:	aa25      	add	r2, sp, #148	; 0x94
   86db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86db4:	980c      	ldr	r0, [sp, #48]	; 0x30
   86db6:	f004 fd01 	bl	8b7bc <__ssprint_r>
   86dba:	2800      	cmp	r0, #0
   86dbc:	f47f aead 	bne.w	86b1a <_svfprintf_r+0x1ba>
   86dc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   86dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86dc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86dc6:	9908      	ldr	r1, [sp, #32]
   86dc8:	428a      	cmp	r2, r1
   86dca:	bfac      	ite	ge
   86dcc:	189b      	addge	r3, r3, r2
   86dce:	185b      	addlt	r3, r3, r1
   86dd0:	9309      	str	r3, [sp, #36]	; 0x24
   86dd2:	2c00      	cmp	r4, #0
   86dd4:	f040 82fb 	bne.w	873ce <_svfprintf_r+0xa6e>
   86dd8:	2300      	movs	r3, #0
   86dda:	46c8      	mov	r8, r9
   86ddc:	9326      	str	r3, [sp, #152]	; 0x98
   86dde:	e5e6      	b.n	869ae <_svfprintf_r+0x4e>
   86de0:	9311      	str	r3, [sp, #68]	; 0x44
   86de2:	f01b 0320 	ands.w	r3, fp, #32
   86de6:	f040 8145 	bne.w	87074 <_svfprintf_r+0x714>
   86dea:	f01b 0210 	ands.w	r2, fp, #16
   86dee:	f040 8466 	bne.w	876be <_svfprintf_r+0xd5e>
   86df2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   86df6:	f000 8462 	beq.w	876be <_svfprintf_r+0xd5e>
   86dfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   86dfc:	4613      	mov	r3, r2
   86dfe:	460a      	mov	r2, r1
   86e00:	3204      	adds	r2, #4
   86e02:	880c      	ldrh	r4, [r1, #0]
   86e04:	2500      	movs	r5, #0
   86e06:	920f      	str	r2, [sp, #60]	; 0x3c
   86e08:	e6a8      	b.n	86b5c <_svfprintf_r+0x1fc>
   86e0a:	2500      	movs	r5, #0
   86e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86e0e:	9311      	str	r3, [sp, #68]	; 0x44
   86e10:	6816      	ldr	r6, [r2, #0]
   86e12:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   86e16:	1d14      	adds	r4, r2, #4
   86e18:	2e00      	cmp	r6, #0
   86e1a:	f000 86cd 	beq.w	87bb8 <_svfprintf_r+0x1258>
   86e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e20:	1c53      	adds	r3, r2, #1
   86e22:	f000 861b 	beq.w	87a5c <_svfprintf_r+0x10fc>
   86e26:	4629      	mov	r1, r5
   86e28:	4630      	mov	r0, r6
   86e2a:	f003 ff09 	bl	8ac40 <memchr>
   86e2e:	2800      	cmp	r0, #0
   86e30:	f000 870d 	beq.w	87c4e <_svfprintf_r+0x12ee>
   86e34:	1b83      	subs	r3, r0, r6
   86e36:	950a      	str	r5, [sp, #40]	; 0x28
   86e38:	930e      	str	r3, [sp, #56]	; 0x38
   86e3a:	940f      	str	r4, [sp, #60]	; 0x3c
   86e3c:	f8cd b01c 	str.w	fp, [sp, #28]
   86e40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86e44:	9308      	str	r3, [sp, #32]
   86e46:	9512      	str	r5, [sp, #72]	; 0x48
   86e48:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86e4c:	e6ac      	b.n	86ba8 <_svfprintf_r+0x248>
   86e4e:	f89a 3000 	ldrb.w	r3, [sl]
   86e52:	f10a 0401 	add.w	r4, sl, #1
   86e56:	2b2a      	cmp	r3, #42	; 0x2a
   86e58:	f000 87c2 	beq.w	87de0 <_svfprintf_r+0x1480>
   86e5c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86e60:	2809      	cmp	r0, #9
   86e62:	46a2      	mov	sl, r4
   86e64:	f200 8718 	bhi.w	87c98 <_svfprintf_r+0x1338>
   86e68:	2300      	movs	r3, #0
   86e6a:	461c      	mov	r4, r3
   86e6c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   86e70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   86e74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   86e78:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   86e7c:	2809      	cmp	r0, #9
   86e7e:	d9f5      	bls.n	86e6c <_svfprintf_r+0x50c>
   86e80:	940a      	str	r4, [sp, #40]	; 0x28
   86e82:	e5c9      	b.n	86a18 <_svfprintf_r+0xb8>
   86e84:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   86e88:	f89a 3000 	ldrb.w	r3, [sl]
   86e8c:	e5c2      	b.n	86a14 <_svfprintf_r+0xb4>
   86e8e:	f04b 0b10 	orr.w	fp, fp, #16
   86e92:	f01b 0f20 	tst.w	fp, #32
   86e96:	9311      	str	r3, [sp, #68]	; 0x44
   86e98:	f43f ae51 	beq.w	86b3e <_svfprintf_r+0x1de>
   86e9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86e9e:	3407      	adds	r4, #7
   86ea0:	f024 0307 	bic.w	r3, r4, #7
   86ea4:	f103 0208 	add.w	r2, r3, #8
   86ea8:	e9d3 4500 	ldrd	r4, r5, [r3]
   86eac:	920f      	str	r2, [sp, #60]	; 0x3c
   86eae:	2301      	movs	r3, #1
   86eb0:	e654      	b.n	86b5c <_svfprintf_r+0x1fc>
   86eb2:	bf00      	nop
   86eb4:	0008c720 	.word	0x0008c720
   86eb8:	0008c730 	.word	0x0008c730
   86ebc:	9311      	str	r3, [sp, #68]	; 0x44
   86ebe:	2a00      	cmp	r2, #0
   86ec0:	f040 87ad 	bne.w	87e1e <_svfprintf_r+0x14be>
   86ec4:	4bbe      	ldr	r3, [pc, #760]	; (871c0 <_svfprintf_r+0x860>)
   86ec6:	f01b 0f20 	tst.w	fp, #32
   86eca:	9318      	str	r3, [sp, #96]	; 0x60
   86ecc:	f040 80e7 	bne.w	8709e <_svfprintf_r+0x73e>
   86ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86ed2:	f01b 0f10 	tst.w	fp, #16
   86ed6:	4613      	mov	r3, r2
   86ed8:	f040 83d8 	bne.w	8768c <_svfprintf_r+0xd2c>
   86edc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86ee0:	f000 83d4 	beq.w	8768c <_svfprintf_r+0xd2c>
   86ee4:	2500      	movs	r5, #0
   86ee6:	3304      	adds	r3, #4
   86ee8:	8814      	ldrh	r4, [r2, #0]
   86eea:	930f      	str	r3, [sp, #60]	; 0x3c
   86eec:	f01b 0f01 	tst.w	fp, #1
   86ef0:	f000 80e3 	beq.w	870ba <_svfprintf_r+0x75a>
   86ef4:	ea54 0305 	orrs.w	r3, r4, r5
   86ef8:	f000 80df 	beq.w	870ba <_svfprintf_r+0x75a>
   86efc:	2330      	movs	r3, #48	; 0x30
   86efe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   86f02:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   86f06:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   86f0a:	f04b 0b02 	orr.w	fp, fp, #2
   86f0e:	2302      	movs	r3, #2
   86f10:	e624      	b.n	86b5c <_svfprintf_r+0x1fc>
   86f12:	2201      	movs	r2, #1
   86f14:	9311      	str	r3, [sp, #68]	; 0x44
   86f16:	2300      	movs	r3, #0
   86f18:	4611      	mov	r1, r2
   86f1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86f1c:	9208      	str	r2, [sp, #32]
   86f1e:	6802      	ldr	r2, [r0, #0]
   86f20:	461f      	mov	r7, r3
   86f22:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   86f26:	930a      	str	r3, [sp, #40]	; 0x28
   86f28:	9312      	str	r3, [sp, #72]	; 0x48
   86f2a:	1d03      	adds	r3, r0, #4
   86f2c:	f8cd b01c 	str.w	fp, [sp, #28]
   86f30:	910e      	str	r1, [sp, #56]	; 0x38
   86f32:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   86f36:	930f      	str	r3, [sp, #60]	; 0x3c
   86f38:	ae28      	add	r6, sp, #160	; 0xa0
   86f3a:	e639      	b.n	86bb0 <_svfprintf_r+0x250>
   86f3c:	9311      	str	r3, [sp, #68]	; 0x44
   86f3e:	2a00      	cmp	r2, #0
   86f40:	f040 8784 	bne.w	87e4c <_svfprintf_r+0x14ec>
   86f44:	f04b 0b10 	orr.w	fp, fp, #16
   86f48:	f01b 0f20 	tst.w	fp, #32
   86f4c:	f040 8475 	bne.w	8783a <_svfprintf_r+0xeda>
   86f50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   86f52:	f01b 0f10 	tst.w	fp, #16
   86f56:	4613      	mov	r3, r2
   86f58:	f040 839d 	bne.w	87696 <_svfprintf_r+0xd36>
   86f5c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   86f60:	f000 8399 	beq.w	87696 <_svfprintf_r+0xd36>
   86f64:	f9b2 4000 	ldrsh.w	r4, [r2]
   86f68:	3304      	adds	r3, #4
   86f6a:	17e5      	asrs	r5, r4, #31
   86f6c:	930f      	str	r3, [sp, #60]	; 0x3c
   86f6e:	4622      	mov	r2, r4
   86f70:	462b      	mov	r3, r5
   86f72:	2a00      	cmp	r2, #0
   86f74:	f173 0300 	sbcs.w	r3, r3, #0
   86f78:	f2c0 8398 	blt.w	876ac <_svfprintf_r+0xd4c>
   86f7c:	990a      	ldr	r1, [sp, #40]	; 0x28
   86f7e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   86f82:	1c4a      	adds	r2, r1, #1
   86f84:	f04f 0301 	mov.w	r3, #1
   86f88:	f47f adf0 	bne.w	86b6c <_svfprintf_r+0x20c>
   86f8c:	ea54 0205 	orrs.w	r2, r4, r5
   86f90:	f000 8229 	beq.w	873e6 <_svfprintf_r+0xa86>
   86f94:	f8cd b01c 	str.w	fp, [sp, #28]
   86f98:	2b01      	cmp	r3, #1
   86f9a:	f000 830e 	beq.w	875ba <_svfprintf_r+0xc5a>
   86f9e:	2b02      	cmp	r3, #2
   86fa0:	f040 829c 	bne.w	874dc <_svfprintf_r+0xb7c>
   86fa4:	464e      	mov	r6, r9
   86fa6:	9818      	ldr	r0, [sp, #96]	; 0x60
   86fa8:	0923      	lsrs	r3, r4, #4
   86faa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86fae:	0929      	lsrs	r1, r5, #4
   86fb0:	f004 020f 	and.w	r2, r4, #15
   86fb4:	460d      	mov	r5, r1
   86fb6:	461c      	mov	r4, r3
   86fb8:	5c83      	ldrb	r3, [r0, r2]
   86fba:	f806 3d01 	strb.w	r3, [r6, #-1]!
   86fbe:	ea54 0305 	orrs.w	r3, r4, r5
   86fc2:	d1f1      	bne.n	86fa8 <_svfprintf_r+0x648>
   86fc4:	eba9 0306 	sub.w	r3, r9, r6
   86fc8:	930e      	str	r3, [sp, #56]	; 0x38
   86fca:	e5e5      	b.n	86b98 <_svfprintf_r+0x238>
   86fcc:	9311      	str	r3, [sp, #68]	; 0x44
   86fce:	2a00      	cmp	r2, #0
   86fd0:	f040 8738 	bne.w	87e44 <_svfprintf_r+0x14e4>
   86fd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   86fd6:	f01b 0f08 	tst.w	fp, #8
   86fda:	f104 0407 	add.w	r4, r4, #7
   86fde:	f000 84cf 	beq.w	87980 <_svfprintf_r+0x1020>
   86fe2:	f024 0307 	bic.w	r3, r4, #7
   86fe6:	f103 0208 	add.w	r2, r3, #8
   86fea:	920f      	str	r2, [sp, #60]	; 0x3c
   86fec:	681a      	ldr	r2, [r3, #0]
   86fee:	685b      	ldr	r3, [r3, #4]
   86ff0:	9215      	str	r2, [sp, #84]	; 0x54
   86ff2:	9314      	str	r3, [sp, #80]	; 0x50
   86ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   86ff6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   86ff8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   86ffc:	4628      	mov	r0, r5
   86ffe:	4621      	mov	r1, r4
   87000:	f04f 32ff 	mov.w	r2, #4294967295
   87004:	4b6f      	ldr	r3, [pc, #444]	; (871c4 <_svfprintf_r+0x864>)
   87006:	f005 faa5 	bl	8c554 <__aeabi_dcmpun>
   8700a:	2800      	cmp	r0, #0
   8700c:	f040 8434 	bne.w	87878 <_svfprintf_r+0xf18>
   87010:	4628      	mov	r0, r5
   87012:	4621      	mov	r1, r4
   87014:	f04f 32ff 	mov.w	r2, #4294967295
   87018:	4b6a      	ldr	r3, [pc, #424]	; (871c4 <_svfprintf_r+0x864>)
   8701a:	f005 fa7d 	bl	8c518 <__aeabi_dcmple>
   8701e:	2800      	cmp	r0, #0
   87020:	f040 842a 	bne.w	87878 <_svfprintf_r+0xf18>
   87024:	a815      	add	r0, sp, #84	; 0x54
   87026:	c80d      	ldmia	r0, {r0, r2, r3}
   87028:	9914      	ldr	r1, [sp, #80]	; 0x50
   8702a:	f005 fa6b 	bl	8c504 <__aeabi_dcmplt>
   8702e:	2800      	cmp	r0, #0
   87030:	f040 85d4 	bne.w	87bdc <_svfprintf_r+0x127c>
   87034:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87038:	2303      	movs	r3, #3
   8703a:	461a      	mov	r2, r3
   8703c:	9308      	str	r3, [sp, #32]
   8703e:	2300      	movs	r3, #0
   87040:	4e61      	ldr	r6, [pc, #388]	; (871c8 <_svfprintf_r+0x868>)
   87042:	4619      	mov	r1, r3
   87044:	930a      	str	r3, [sp, #40]	; 0x28
   87046:	4b61      	ldr	r3, [pc, #388]	; (871cc <_svfprintf_r+0x86c>)
   87048:	920e      	str	r2, [sp, #56]	; 0x38
   8704a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8704c:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   87050:	9007      	str	r0, [sp, #28]
   87052:	9112      	str	r1, [sp, #72]	; 0x48
   87054:	2a47      	cmp	r2, #71	; 0x47
   87056:	bfd8      	it	le
   87058:	461e      	movle	r6, r3
   8705a:	e5a5      	b.n	86ba8 <_svfprintf_r+0x248>
   8705c:	f04b 0b08 	orr.w	fp, fp, #8
   87060:	f89a 3000 	ldrb.w	r3, [sl]
   87064:	e4d6      	b.n	86a14 <_svfprintf_r+0xb4>
   87066:	f04b 0b10 	orr.w	fp, fp, #16
   8706a:	9311      	str	r3, [sp, #68]	; 0x44
   8706c:	f01b 0320 	ands.w	r3, fp, #32
   87070:	f43f aebb 	beq.w	86dea <_svfprintf_r+0x48a>
   87074:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87076:	3407      	adds	r4, #7
   87078:	f024 0307 	bic.w	r3, r4, #7
   8707c:	f103 0208 	add.w	r2, r3, #8
   87080:	e9d3 4500 	ldrd	r4, r5, [r3]
   87084:	920f      	str	r2, [sp, #60]	; 0x3c
   87086:	2300      	movs	r3, #0
   87088:	e568      	b.n	86b5c <_svfprintf_r+0x1fc>
   8708a:	9311      	str	r3, [sp, #68]	; 0x44
   8708c:	2a00      	cmp	r2, #0
   8708e:	f040 86c2 	bne.w	87e16 <_svfprintf_r+0x14b6>
   87092:	4b4f      	ldr	r3, [pc, #316]	; (871d0 <_svfprintf_r+0x870>)
   87094:	f01b 0f20 	tst.w	fp, #32
   87098:	9318      	str	r3, [sp, #96]	; 0x60
   8709a:	f43f af19 	beq.w	86ed0 <_svfprintf_r+0x570>
   8709e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   870a0:	f01b 0f01 	tst.w	fp, #1
   870a4:	f104 0407 	add.w	r4, r4, #7
   870a8:	f024 0307 	bic.w	r3, r4, #7
   870ac:	f103 0208 	add.w	r2, r3, #8
   870b0:	920f      	str	r2, [sp, #60]	; 0x3c
   870b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   870b6:	f47f af1d 	bne.w	86ef4 <_svfprintf_r+0x594>
   870ba:	2302      	movs	r3, #2
   870bc:	e54e      	b.n	86b5c <_svfprintf_r+0x1fc>
   870be:	f89a 3000 	ldrb.w	r3, [sl]
   870c2:	2900      	cmp	r1, #0
   870c4:	f47f aca6 	bne.w	86a14 <_svfprintf_r+0xb4>
   870c8:	2201      	movs	r2, #1
   870ca:	2120      	movs	r1, #32
   870cc:	e4a2      	b.n	86a14 <_svfprintf_r+0xb4>
   870ce:	f04b 0b01 	orr.w	fp, fp, #1
   870d2:	f89a 3000 	ldrb.w	r3, [sl]
   870d6:	e49d      	b.n	86a14 <_svfprintf_r+0xb4>
   870d8:	f89a 3000 	ldrb.w	r3, [sl]
   870dc:	2201      	movs	r2, #1
   870de:	212b      	movs	r1, #43	; 0x2b
   870e0:	e498      	b.n	86a14 <_svfprintf_r+0xb4>
   870e2:	f04b 0b20 	orr.w	fp, fp, #32
   870e6:	f89a 3000 	ldrb.w	r3, [sl]
   870ea:	e493      	b.n	86a14 <_svfprintf_r+0xb4>
   870ec:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   870f0:	f89a 3000 	ldrb.w	r3, [sl]
   870f4:	e48e      	b.n	86a14 <_svfprintf_r+0xb4>
   870f6:	f89a 3000 	ldrb.w	r3, [sl]
   870fa:	2b6c      	cmp	r3, #108	; 0x6c
   870fc:	bf03      	ittte	eq
   870fe:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   87102:	f04b 0b20 	orreq.w	fp, fp, #32
   87106:	f10a 0a01 	addeq.w	sl, sl, #1
   8710a:	f04b 0b10 	orrne.w	fp, fp, #16
   8710e:	e481      	b.n	86a14 <_svfprintf_r+0xb4>
   87110:	2a00      	cmp	r2, #0
   87112:	f040 867c 	bne.w	87e0e <_svfprintf_r+0x14ae>
   87116:	f01b 0f20 	tst.w	fp, #32
   8711a:	f040 8452 	bne.w	879c2 <_svfprintf_r+0x1062>
   8711e:	f01b 0f10 	tst.w	fp, #16
   87122:	f040 8438 	bne.w	87996 <_svfprintf_r+0x1036>
   87126:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8712a:	f000 8434 	beq.w	87996 <_svfprintf_r+0x1036>
   8712e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87130:	6813      	ldr	r3, [r2, #0]
   87132:	3204      	adds	r2, #4
   87134:	920f      	str	r2, [sp, #60]	; 0x3c
   87136:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8713a:	801a      	strh	r2, [r3, #0]
   8713c:	e437      	b.n	869ae <_svfprintf_r+0x4e>
   8713e:	2378      	movs	r3, #120	; 0x78
   87140:	2230      	movs	r2, #48	; 0x30
   87142:	980f      	ldr	r0, [sp, #60]	; 0x3c
   87144:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   87148:	9311      	str	r3, [sp, #68]	; 0x44
   8714a:	1d03      	adds	r3, r0, #4
   8714c:	930f      	str	r3, [sp, #60]	; 0x3c
   8714e:	4b20      	ldr	r3, [pc, #128]	; (871d0 <_svfprintf_r+0x870>)
   87150:	6804      	ldr	r4, [r0, #0]
   87152:	9318      	str	r3, [sp, #96]	; 0x60
   87154:	f04b 0b02 	orr.w	fp, fp, #2
   87158:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   8715c:	2500      	movs	r5, #0
   8715e:	2302      	movs	r3, #2
   87160:	e4fc      	b.n	86b5c <_svfprintf_r+0x1fc>
   87162:	9311      	str	r3, [sp, #68]	; 0x44
   87164:	2a00      	cmp	r2, #0
   87166:	f43f aeef 	beq.w	86f48 <_svfprintf_r+0x5e8>
   8716a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8716e:	e6eb      	b.n	86f48 <_svfprintf_r+0x5e8>
   87170:	2000      	movs	r0, #0
   87172:	4604      	mov	r4, r0
   87174:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   87178:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8717c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   87180:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   87184:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   87188:	2809      	cmp	r0, #9
   8718a:	d9f5      	bls.n	87178 <_svfprintf_r+0x818>
   8718c:	940d      	str	r4, [sp, #52]	; 0x34
   8718e:	e443      	b.n	86a18 <_svfprintf_r+0xb8>
   87190:	9311      	str	r3, [sp, #68]	; 0x44
   87192:	2a00      	cmp	r2, #0
   87194:	f040 864a 	bne.w	87e2c <_svfprintf_r+0x14cc>
   87198:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8719a:	2a00      	cmp	r2, #0
   8719c:	f43f acb6 	beq.w	86b0c <_svfprintf_r+0x1ac>
   871a0:	2300      	movs	r3, #0
   871a2:	2101      	movs	r1, #1
   871a4:	461f      	mov	r7, r3
   871a6:	9108      	str	r1, [sp, #32]
   871a8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   871ac:	f8cd b01c 	str.w	fp, [sp, #28]
   871b0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   871b4:	930a      	str	r3, [sp, #40]	; 0x28
   871b6:	9312      	str	r3, [sp, #72]	; 0x48
   871b8:	910e      	str	r1, [sp, #56]	; 0x38
   871ba:	ae28      	add	r6, sp, #160	; 0xa0
   871bc:	e4f8      	b.n	86bb0 <_svfprintf_r+0x250>
   871be:	bf00      	nop
   871c0:	0008c6ec 	.word	0x0008c6ec
   871c4:	7fefffff 	.word	0x7fefffff
   871c8:	0008c6e0 	.word	0x0008c6e0
   871cc:	0008c6dc 	.word	0x0008c6dc
   871d0:	0008c700 	.word	0x0008c700
   871d4:	aa25      	add	r2, sp, #148	; 0x94
   871d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   871d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   871da:	f004 faef 	bl	8b7bc <__ssprint_r>
   871de:	2800      	cmp	r0, #0
   871e0:	f47f ac9b 	bne.w	86b1a <_svfprintf_r+0x1ba>
   871e4:	46c8      	mov	r8, r9
   871e6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   871ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   871ec:	e533      	b.n	86c56 <_svfprintf_r+0x2f6>
   871ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   871f0:	2b65      	cmp	r3, #101	; 0x65
   871f2:	f340 809a 	ble.w	8732a <_svfprintf_r+0x9ca>
   871f6:	a815      	add	r0, sp, #84	; 0x54
   871f8:	c80d      	ldmia	r0, {r0, r2, r3}
   871fa:	9914      	ldr	r1, [sp, #80]	; 0x50
   871fc:	f005 f978 	bl	8c4f0 <__aeabi_dcmpeq>
   87200:	2800      	cmp	r0, #0
   87202:	f000 8193 	beq.w	8752c <_svfprintf_r+0xbcc>
   87206:	2101      	movs	r1, #1
   87208:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8720a:	4ab5      	ldr	r2, [pc, #724]	; (874e0 <_svfprintf_r+0xb80>)
   8720c:	440b      	add	r3, r1
   8720e:	440c      	add	r4, r1
   87210:	2b07      	cmp	r3, #7
   87212:	9427      	str	r4, [sp, #156]	; 0x9c
   87214:	9326      	str	r3, [sp, #152]	; 0x98
   87216:	f8c8 1004 	str.w	r1, [r8, #4]
   8721a:	f8c8 2000 	str.w	r2, [r8]
   8721e:	f300 83c6 	bgt.w	879ae <_svfprintf_r+0x104e>
   87222:	f108 0808 	add.w	r8, r8, #8
   87226:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87228:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8722a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8722c:	4293      	cmp	r3, r2
   8722e:	db03      	blt.n	87238 <_svfprintf_r+0x8d8>
   87230:	9b07      	ldr	r3, [sp, #28]
   87232:	07dd      	lsls	r5, r3, #31
   87234:	f57f ad86 	bpl.w	86d44 <_svfprintf_r+0x3e4>
   87238:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8723a:	9919      	ldr	r1, [sp, #100]	; 0x64
   8723c:	3301      	adds	r3, #1
   8723e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   87240:	440c      	add	r4, r1
   87242:	2b07      	cmp	r3, #7
   87244:	f8c8 2000 	str.w	r2, [r8]
   87248:	f8c8 1004 	str.w	r1, [r8, #4]
   8724c:	9427      	str	r4, [sp, #156]	; 0x9c
   8724e:	9326      	str	r3, [sp, #152]	; 0x98
   87250:	f300 83c4 	bgt.w	879dc <_svfprintf_r+0x107c>
   87254:	f108 0808 	add.w	r8, r8, #8
   87258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8725a:	1e5e      	subs	r6, r3, #1
   8725c:	2e00      	cmp	r6, #0
   8725e:	f77f ad71 	ble.w	86d44 <_svfprintf_r+0x3e4>
   87262:	2e10      	cmp	r6, #16
   87264:	f340 8575 	ble.w	87d52 <_svfprintf_r+0x13f2>
   87268:	4622      	mov	r2, r4
   8726a:	2710      	movs	r7, #16
   8726c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8726e:	4d9d      	ldr	r5, [pc, #628]	; (874e4 <_svfprintf_r+0xb84>)
   87270:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87274:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87276:	e005      	b.n	87284 <_svfprintf_r+0x924>
   87278:	f108 0808 	add.w	r8, r8, #8
   8727c:	3e10      	subs	r6, #16
   8727e:	2e10      	cmp	r6, #16
   87280:	f340 8225 	ble.w	876ce <_svfprintf_r+0xd6e>
   87284:	3301      	adds	r3, #1
   87286:	3210      	adds	r2, #16
   87288:	2b07      	cmp	r3, #7
   8728a:	9227      	str	r2, [sp, #156]	; 0x9c
   8728c:	9326      	str	r3, [sp, #152]	; 0x98
   8728e:	e888 00a0 	stmia.w	r8, {r5, r7}
   87292:	ddf1      	ble.n	87278 <_svfprintf_r+0x918>
   87294:	aa25      	add	r2, sp, #148	; 0x94
   87296:	4621      	mov	r1, r4
   87298:	4658      	mov	r0, fp
   8729a:	f004 fa8f 	bl	8b7bc <__ssprint_r>
   8729e:	2800      	cmp	r0, #0
   872a0:	f47f ac3b 	bne.w	86b1a <_svfprintf_r+0x1ba>
   872a4:	46c8      	mov	r8, r9
   872a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   872a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872aa:	e7e7      	b.n	8727c <_svfprintf_r+0x91c>
   872ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   872ae:	9a08      	ldr	r2, [sp, #32]
   872b0:	1a9f      	subs	r7, r3, r2
   872b2:	2f00      	cmp	r7, #0
   872b4:	f77f acf6 	ble.w	86ca4 <_svfprintf_r+0x344>
   872b8:	2f10      	cmp	r7, #16
   872ba:	f340 84a8 	ble.w	87c0e <_svfprintf_r+0x12ae>
   872be:	4d89      	ldr	r5, [pc, #548]	; (874e4 <_svfprintf_r+0xb84>)
   872c0:	4642      	mov	r2, r8
   872c2:	4621      	mov	r1, r4
   872c4:	46b0      	mov	r8, r6
   872c6:	f04f 0b10 	mov.w	fp, #16
   872ca:	462e      	mov	r6, r5
   872cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   872ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   872d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   872d2:	e004      	b.n	872de <_svfprintf_r+0x97e>
   872d4:	3f10      	subs	r7, #16
   872d6:	2f10      	cmp	r7, #16
   872d8:	f102 0208 	add.w	r2, r2, #8
   872dc:	dd15      	ble.n	8730a <_svfprintf_r+0x9aa>
   872de:	3301      	adds	r3, #1
   872e0:	3110      	adds	r1, #16
   872e2:	2b07      	cmp	r3, #7
   872e4:	9127      	str	r1, [sp, #156]	; 0x9c
   872e6:	9326      	str	r3, [sp, #152]	; 0x98
   872e8:	e882 0840 	stmia.w	r2, {r6, fp}
   872ec:	ddf2      	ble.n	872d4 <_svfprintf_r+0x974>
   872ee:	aa25      	add	r2, sp, #148	; 0x94
   872f0:	4629      	mov	r1, r5
   872f2:	4620      	mov	r0, r4
   872f4:	f004 fa62 	bl	8b7bc <__ssprint_r>
   872f8:	2800      	cmp	r0, #0
   872fa:	f47f ac0e 	bne.w	86b1a <_svfprintf_r+0x1ba>
   872fe:	3f10      	subs	r7, #16
   87300:	2f10      	cmp	r7, #16
   87302:	464a      	mov	r2, r9
   87304:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87306:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87308:	dce9      	bgt.n	872de <_svfprintf_r+0x97e>
   8730a:	4635      	mov	r5, r6
   8730c:	460c      	mov	r4, r1
   8730e:	4646      	mov	r6, r8
   87310:	4690      	mov	r8, r2
   87312:	3301      	adds	r3, #1
   87314:	443c      	add	r4, r7
   87316:	2b07      	cmp	r3, #7
   87318:	9427      	str	r4, [sp, #156]	; 0x9c
   8731a:	9326      	str	r3, [sp, #152]	; 0x98
   8731c:	e888 00a0 	stmia.w	r8, {r5, r7}
   87320:	f300 829e 	bgt.w	87860 <_svfprintf_r+0xf00>
   87324:	f108 0808 	add.w	r8, r8, #8
   87328:	e4bc      	b.n	86ca4 <_svfprintf_r+0x344>
   8732a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8732c:	2b01      	cmp	r3, #1
   8732e:	f340 824f 	ble.w	877d0 <_svfprintf_r+0xe70>
   87332:	2301      	movs	r3, #1
   87334:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87336:	441c      	add	r4, r3
   87338:	441f      	add	r7, r3
   8733a:	2f07      	cmp	r7, #7
   8733c:	9427      	str	r4, [sp, #156]	; 0x9c
   8733e:	f8c8 6000 	str.w	r6, [r8]
   87342:	9726      	str	r7, [sp, #152]	; 0x98
   87344:	f8c8 3004 	str.w	r3, [r8, #4]
   87348:	f300 825f 	bgt.w	8780a <_svfprintf_r+0xeaa>
   8734c:	f108 0808 	add.w	r8, r8, #8
   87350:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87352:	3701      	adds	r7, #1
   87354:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87356:	4414      	add	r4, r2
   87358:	2f07      	cmp	r7, #7
   8735a:	9427      	str	r4, [sp, #156]	; 0x9c
   8735c:	9726      	str	r7, [sp, #152]	; 0x98
   8735e:	f8c8 3000 	str.w	r3, [r8]
   87362:	f8c8 2004 	str.w	r2, [r8, #4]
   87366:	f300 825c 	bgt.w	87822 <_svfprintf_r+0xec2>
   8736a:	f108 0808 	add.w	r8, r8, #8
   8736e:	a815      	add	r0, sp, #84	; 0x54
   87370:	c80d      	ldmia	r0, {r0, r2, r3}
   87372:	9914      	ldr	r1, [sp, #80]	; 0x50
   87374:	f005 f8bc 	bl	8c4f0 <__aeabi_dcmpeq>
   87378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8737a:	2800      	cmp	r0, #0
   8737c:	f040 8141 	bne.w	87602 <_svfprintf_r+0xca2>
   87380:	3b01      	subs	r3, #1
   87382:	3701      	adds	r7, #1
   87384:	3601      	adds	r6, #1
   87386:	441c      	add	r4, r3
   87388:	2f07      	cmp	r7, #7
   8738a:	f8c8 6000 	str.w	r6, [r8]
   8738e:	9726      	str	r7, [sp, #152]	; 0x98
   87390:	9427      	str	r4, [sp, #156]	; 0x9c
   87392:	f8c8 3004 	str.w	r3, [r8, #4]
   87396:	f300 8166 	bgt.w	87666 <_svfprintf_r+0xd06>
   8739a:	f108 0808 	add.w	r8, r8, #8
   8739e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   873a0:	3701      	adds	r7, #1
   873a2:	4414      	add	r4, r2
   873a4:	ab21      	add	r3, sp, #132	; 0x84
   873a6:	2f07      	cmp	r7, #7
   873a8:	9427      	str	r4, [sp, #156]	; 0x9c
   873aa:	9726      	str	r7, [sp, #152]	; 0x98
   873ac:	f8c8 2004 	str.w	r2, [r8, #4]
   873b0:	f8c8 3000 	str.w	r3, [r8]
   873b4:	f77f acc4 	ble.w	86d40 <_svfprintf_r+0x3e0>
   873b8:	aa25      	add	r2, sp, #148	; 0x94
   873ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   873bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   873be:	f004 f9fd 	bl	8b7bc <__ssprint_r>
   873c2:	2800      	cmp	r0, #0
   873c4:	f47f aba9 	bne.w	86b1a <_svfprintf_r+0x1ba>
   873c8:	46c8      	mov	r8, r9
   873ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   873cc:	e4ba      	b.n	86d44 <_svfprintf_r+0x3e4>
   873ce:	aa25      	add	r2, sp, #148	; 0x94
   873d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   873d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   873d4:	f004 f9f2 	bl	8b7bc <__ssprint_r>
   873d8:	2800      	cmp	r0, #0
   873da:	f43f acfd 	beq.w	86dd8 <_svfprintf_r+0x478>
   873de:	f7ff bb9c 	b.w	86b1a <_svfprintf_r+0x1ba>
   873e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
   873e6:	2b01      	cmp	r3, #1
   873e8:	f000 817e 	beq.w	876e8 <_svfprintf_r+0xd88>
   873ec:	2b02      	cmp	r3, #2
   873ee:	d171      	bne.n	874d4 <_svfprintf_r+0xb74>
   873f0:	f8cd b01c 	str.w	fp, [sp, #28]
   873f4:	2400      	movs	r4, #0
   873f6:	2500      	movs	r5, #0
   873f8:	e5d4      	b.n	86fa4 <_svfprintf_r+0x644>
   873fa:	aa25      	add	r2, sp, #148	; 0x94
   873fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   873fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   87400:	f004 f9dc 	bl	8b7bc <__ssprint_r>
   87404:	2800      	cmp	r0, #0
   87406:	f47f ab88 	bne.w	86b1a <_svfprintf_r+0x1ba>
   8740a:	46c8      	mov	r8, r9
   8740c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8740e:	e486      	b.n	86d1e <_svfprintf_r+0x3be>
   87410:	aa25      	add	r2, sp, #148	; 0x94
   87412:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87414:	980c      	ldr	r0, [sp, #48]	; 0x30
   87416:	f004 f9d1 	bl	8b7bc <__ssprint_r>
   8741a:	2800      	cmp	r0, #0
   8741c:	f47f ab7d 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87420:	46c8      	mov	r8, r9
   87422:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87424:	e429      	b.n	86c7a <_svfprintf_r+0x31a>
   87426:	2001      	movs	r0, #1
   87428:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8742a:	4a2d      	ldr	r2, [pc, #180]	; (874e0 <_svfprintf_r+0xb80>)
   8742c:	4403      	add	r3, r0
   8742e:	4404      	add	r4, r0
   87430:	2b07      	cmp	r3, #7
   87432:	9427      	str	r4, [sp, #156]	; 0x9c
   87434:	9326      	str	r3, [sp, #152]	; 0x98
   87436:	f8c8 0004 	str.w	r0, [r8, #4]
   8743a:	f8c8 2000 	str.w	r2, [r8]
   8743e:	f340 82d8 	ble.w	879f2 <_svfprintf_r+0x1092>
   87442:	aa25      	add	r2, sp, #148	; 0x94
   87444:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87446:	980c      	ldr	r0, [sp, #48]	; 0x30
   87448:	f004 f9b8 	bl	8b7bc <__ssprint_r>
   8744c:	2800      	cmp	r0, #0
   8744e:	f47f ab64 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87452:	46c8      	mov	r8, r9
   87454:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87456:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87458:	b929      	cbnz	r1, 87466 <_svfprintf_r+0xb06>
   8745a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8745c:	b91b      	cbnz	r3, 87466 <_svfprintf_r+0xb06>
   8745e:	9b07      	ldr	r3, [sp, #28]
   87460:	07d8      	lsls	r0, r3, #31
   87462:	f57f ac6f 	bpl.w	86d44 <_svfprintf_r+0x3e4>
   87466:	9819      	ldr	r0, [sp, #100]	; 0x64
   87468:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8746a:	4602      	mov	r2, r0
   8746c:	3301      	adds	r3, #1
   8746e:	4422      	add	r2, r4
   87470:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   87472:	2b07      	cmp	r3, #7
   87474:	9227      	str	r2, [sp, #156]	; 0x9c
   87476:	f8c8 4000 	str.w	r4, [r8]
   8747a:	f8c8 0004 	str.w	r0, [r8, #4]
   8747e:	9326      	str	r3, [sp, #152]	; 0x98
   87480:	f300 8431 	bgt.w	87ce6 <_svfprintf_r+0x1386>
   87484:	f108 0808 	add.w	r8, r8, #8
   87488:	2900      	cmp	r1, #0
   8748a:	f2c0 8409 	blt.w	87ca0 <_svfprintf_r+0x1340>
   8748e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87490:	3301      	adds	r3, #1
   87492:	188c      	adds	r4, r1, r2
   87494:	2b07      	cmp	r3, #7
   87496:	9427      	str	r4, [sp, #156]	; 0x9c
   87498:	9326      	str	r3, [sp, #152]	; 0x98
   8749a:	f8c8 6000 	str.w	r6, [r8]
   8749e:	f8c8 1004 	str.w	r1, [r8, #4]
   874a2:	f77f ac4d 	ble.w	86d40 <_svfprintf_r+0x3e0>
   874a6:	aa25      	add	r2, sp, #148	; 0x94
   874a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874aa:	980c      	ldr	r0, [sp, #48]	; 0x30
   874ac:	f004 f986 	bl	8b7bc <__ssprint_r>
   874b0:	2800      	cmp	r0, #0
   874b2:	f47f ab32 	bne.w	86b1a <_svfprintf_r+0x1ba>
   874b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   874b8:	46c8      	mov	r8, r9
   874ba:	e443      	b.n	86d44 <_svfprintf_r+0x3e4>
   874bc:	aa25      	add	r2, sp, #148	; 0x94
   874be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   874c2:	f004 f97b 	bl	8b7bc <__ssprint_r>
   874c6:	2800      	cmp	r0, #0
   874c8:	f47f ab27 	bne.w	86b1a <_svfprintf_r+0x1ba>
   874cc:	46c8      	mov	r8, r9
   874ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   874d0:	f7ff bbe5 	b.w	86c9e <_svfprintf_r+0x33e>
   874d4:	2400      	movs	r4, #0
   874d6:	2500      	movs	r5, #0
   874d8:	f8cd b01c 	str.w	fp, [sp, #28]
   874dc:	4649      	mov	r1, r9
   874de:	e004      	b.n	874ea <_svfprintf_r+0xb8a>
   874e0:	0008c71c 	.word	0x0008c71c
   874e4:	0008c730 	.word	0x0008c730
   874e8:	4631      	mov	r1, r6
   874ea:	08e2      	lsrs	r2, r4, #3
   874ec:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   874f0:	08e8      	lsrs	r0, r5, #3
   874f2:	f004 0307 	and.w	r3, r4, #7
   874f6:	4605      	mov	r5, r0
   874f8:	4614      	mov	r4, r2
   874fa:	3330      	adds	r3, #48	; 0x30
   874fc:	ea54 0205 	orrs.w	r2, r4, r5
   87500:	f801 3c01 	strb.w	r3, [r1, #-1]
   87504:	f101 36ff 	add.w	r6, r1, #4294967295
   87508:	d1ee      	bne.n	874e8 <_svfprintf_r+0xb88>
   8750a:	9a07      	ldr	r2, [sp, #28]
   8750c:	07d2      	lsls	r2, r2, #31
   8750e:	f57f ad59 	bpl.w	86fc4 <_svfprintf_r+0x664>
   87512:	2b30      	cmp	r3, #48	; 0x30
   87514:	f43f ad56 	beq.w	86fc4 <_svfprintf_r+0x664>
   87518:	2330      	movs	r3, #48	; 0x30
   8751a:	3902      	subs	r1, #2
   8751c:	f806 3c01 	strb.w	r3, [r6, #-1]
   87520:	eba9 0301 	sub.w	r3, r9, r1
   87524:	930e      	str	r3, [sp, #56]	; 0x38
   87526:	460e      	mov	r6, r1
   87528:	f7ff bb36 	b.w	86b98 <_svfprintf_r+0x238>
   8752c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8752e:	2900      	cmp	r1, #0
   87530:	f77f af79 	ble.w	87426 <_svfprintf_r+0xac6>
   87534:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87538:	4293      	cmp	r3, r2
   8753a:	bfa8      	it	ge
   8753c:	4613      	movge	r3, r2
   8753e:	2b00      	cmp	r3, #0
   87540:	461f      	mov	r7, r3
   87542:	dd0b      	ble.n	8755c <_svfprintf_r+0xbfc>
   87544:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87546:	443c      	add	r4, r7
   87548:	3301      	adds	r3, #1
   8754a:	2b07      	cmp	r3, #7
   8754c:	9427      	str	r4, [sp, #156]	; 0x9c
   8754e:	e888 00c0 	stmia.w	r8, {r6, r7}
   87552:	9326      	str	r3, [sp, #152]	; 0x98
   87554:	f300 82fb 	bgt.w	87b4e <_svfprintf_r+0x11ee>
   87558:	f108 0808 	add.w	r8, r8, #8
   8755c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8755e:	2f00      	cmp	r7, #0
   87560:	bfa8      	it	ge
   87562:	1bdb      	subge	r3, r3, r7
   87564:	2b00      	cmp	r3, #0
   87566:	461f      	mov	r7, r3
   87568:	f340 80d7 	ble.w	8771a <_svfprintf_r+0xdba>
   8756c:	2b10      	cmp	r3, #16
   8756e:	f340 8434 	ble.w	87dda <_svfprintf_r+0x147a>
   87572:	4dba      	ldr	r5, [pc, #744]	; (8785c <_svfprintf_r+0xefc>)
   87574:	4642      	mov	r2, r8
   87576:	4621      	mov	r1, r4
   87578:	46b0      	mov	r8, r6
   8757a:	f04f 0b10 	mov.w	fp, #16
   8757e:	462e      	mov	r6, r5
   87580:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87582:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87584:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87586:	e004      	b.n	87592 <_svfprintf_r+0xc32>
   87588:	3208      	adds	r2, #8
   8758a:	3f10      	subs	r7, #16
   8758c:	2f10      	cmp	r7, #16
   8758e:	f340 80b5 	ble.w	876fc <_svfprintf_r+0xd9c>
   87592:	3301      	adds	r3, #1
   87594:	3110      	adds	r1, #16
   87596:	2b07      	cmp	r3, #7
   87598:	9127      	str	r1, [sp, #156]	; 0x9c
   8759a:	9326      	str	r3, [sp, #152]	; 0x98
   8759c:	e882 0840 	stmia.w	r2, {r6, fp}
   875a0:	ddf2      	ble.n	87588 <_svfprintf_r+0xc28>
   875a2:	aa25      	add	r2, sp, #148	; 0x94
   875a4:	4629      	mov	r1, r5
   875a6:	4620      	mov	r0, r4
   875a8:	f004 f908 	bl	8b7bc <__ssprint_r>
   875ac:	2800      	cmp	r0, #0
   875ae:	f47f aab4 	bne.w	86b1a <_svfprintf_r+0x1ba>
   875b2:	464a      	mov	r2, r9
   875b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   875b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   875b8:	e7e7      	b.n	8758a <_svfprintf_r+0xc2a>
   875ba:	2d00      	cmp	r5, #0
   875bc:	bf08      	it	eq
   875be:	2c0a      	cmpeq	r4, #10
   875c0:	f0c0 8090 	bcc.w	876e4 <_svfprintf_r+0xd84>
   875c4:	464e      	mov	r6, r9
   875c6:	4620      	mov	r0, r4
   875c8:	4629      	mov	r1, r5
   875ca:	220a      	movs	r2, #10
   875cc:	2300      	movs	r3, #0
   875ce:	f7fe fde9 	bl	861a4 <__aeabi_uldivmod>
   875d2:	3230      	adds	r2, #48	; 0x30
   875d4:	f806 2d01 	strb.w	r2, [r6, #-1]!
   875d8:	4620      	mov	r0, r4
   875da:	4629      	mov	r1, r5
   875dc:	2300      	movs	r3, #0
   875de:	220a      	movs	r2, #10
   875e0:	f7fe fde0 	bl	861a4 <__aeabi_uldivmod>
   875e4:	4604      	mov	r4, r0
   875e6:	460d      	mov	r5, r1
   875e8:	ea54 0305 	orrs.w	r3, r4, r5
   875ec:	d1eb      	bne.n	875c6 <_svfprintf_r+0xc66>
   875ee:	eba9 0306 	sub.w	r3, r9, r6
   875f2:	930e      	str	r3, [sp, #56]	; 0x38
   875f4:	f7ff bad0 	b.w	86b98 <_svfprintf_r+0x238>
   875f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875fa:	464e      	mov	r6, r9
   875fc:	930e      	str	r3, [sp, #56]	; 0x38
   875fe:	f7ff bacb 	b.w	86b98 <_svfprintf_r+0x238>
   87602:	1e5e      	subs	r6, r3, #1
   87604:	2e00      	cmp	r6, #0
   87606:	f77f aeca 	ble.w	8739e <_svfprintf_r+0xa3e>
   8760a:	2e10      	cmp	r6, #16
   8760c:	f340 83e3 	ble.w	87dd6 <_svfprintf_r+0x1476>
   87610:	4622      	mov	r2, r4
   87612:	f04f 0b10 	mov.w	fp, #16
   87616:	4d91      	ldr	r5, [pc, #580]	; (8785c <_svfprintf_r+0xefc>)
   87618:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8761a:	e004      	b.n	87626 <_svfprintf_r+0xcc6>
   8761c:	3e10      	subs	r6, #16
   8761e:	2e10      	cmp	r6, #16
   87620:	f108 0808 	add.w	r8, r8, #8
   87624:	dd15      	ble.n	87652 <_svfprintf_r+0xcf2>
   87626:	3701      	adds	r7, #1
   87628:	3210      	adds	r2, #16
   8762a:	2f07      	cmp	r7, #7
   8762c:	9227      	str	r2, [sp, #156]	; 0x9c
   8762e:	9726      	str	r7, [sp, #152]	; 0x98
   87630:	e888 0820 	stmia.w	r8, {r5, fp}
   87634:	ddf2      	ble.n	8761c <_svfprintf_r+0xcbc>
   87636:	aa25      	add	r2, sp, #148	; 0x94
   87638:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8763a:	4620      	mov	r0, r4
   8763c:	f004 f8be 	bl	8b7bc <__ssprint_r>
   87640:	2800      	cmp	r0, #0
   87642:	f47f aa6a 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87646:	3e10      	subs	r6, #16
   87648:	2e10      	cmp	r6, #16
   8764a:	46c8      	mov	r8, r9
   8764c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8764e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87650:	dce9      	bgt.n	87626 <_svfprintf_r+0xcc6>
   87652:	4614      	mov	r4, r2
   87654:	3701      	adds	r7, #1
   87656:	4434      	add	r4, r6
   87658:	2f07      	cmp	r7, #7
   8765a:	9427      	str	r4, [sp, #156]	; 0x9c
   8765c:	9726      	str	r7, [sp, #152]	; 0x98
   8765e:	e888 0060 	stmia.w	r8, {r5, r6}
   87662:	f77f ae9a 	ble.w	8739a <_svfprintf_r+0xa3a>
   87666:	aa25      	add	r2, sp, #148	; 0x94
   87668:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8766a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8766c:	f004 f8a6 	bl	8b7bc <__ssprint_r>
   87670:	2800      	cmp	r0, #0
   87672:	f47f aa52 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87676:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87678:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8767a:	46c8      	mov	r8, r9
   8767c:	e68f      	b.n	8739e <_svfprintf_r+0xa3e>
   8767e:	3204      	adds	r2, #4
   87680:	681c      	ldr	r4, [r3, #0]
   87682:	2500      	movs	r5, #0
   87684:	2301      	movs	r3, #1
   87686:	920f      	str	r2, [sp, #60]	; 0x3c
   87688:	f7ff ba68 	b.w	86b5c <_svfprintf_r+0x1fc>
   8768c:	681c      	ldr	r4, [r3, #0]
   8768e:	3304      	adds	r3, #4
   87690:	930f      	str	r3, [sp, #60]	; 0x3c
   87692:	2500      	movs	r5, #0
   87694:	e42a      	b.n	86eec <_svfprintf_r+0x58c>
   87696:	681c      	ldr	r4, [r3, #0]
   87698:	3304      	adds	r3, #4
   8769a:	17e5      	asrs	r5, r4, #31
   8769c:	4622      	mov	r2, r4
   8769e:	930f      	str	r3, [sp, #60]	; 0x3c
   876a0:	462b      	mov	r3, r5
   876a2:	2a00      	cmp	r2, #0
   876a4:	f173 0300 	sbcs.w	r3, r3, #0
   876a8:	f6bf ac68 	bge.w	86f7c <_svfprintf_r+0x61c>
   876ac:	272d      	movs	r7, #45	; 0x2d
   876ae:	4264      	negs	r4, r4
   876b0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   876b4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   876b8:	2301      	movs	r3, #1
   876ba:	f7ff ba53 	b.w	86b64 <_svfprintf_r+0x204>
   876be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   876c0:	2500      	movs	r5, #0
   876c2:	460a      	mov	r2, r1
   876c4:	3204      	adds	r2, #4
   876c6:	680c      	ldr	r4, [r1, #0]
   876c8:	920f      	str	r2, [sp, #60]	; 0x3c
   876ca:	f7ff ba47 	b.w	86b5c <_svfprintf_r+0x1fc>
   876ce:	4614      	mov	r4, r2
   876d0:	3301      	adds	r3, #1
   876d2:	4434      	add	r4, r6
   876d4:	2b07      	cmp	r3, #7
   876d6:	9427      	str	r4, [sp, #156]	; 0x9c
   876d8:	9326      	str	r3, [sp, #152]	; 0x98
   876da:	e888 0060 	stmia.w	r8, {r5, r6}
   876de:	f77f ab2f 	ble.w	86d40 <_svfprintf_r+0x3e0>
   876e2:	e6e0      	b.n	874a6 <_svfprintf_r+0xb46>
   876e4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   876e8:	2301      	movs	r3, #1
   876ea:	ae42      	add	r6, sp, #264	; 0x108
   876ec:	3430      	adds	r4, #48	; 0x30
   876ee:	f8cd b01c 	str.w	fp, [sp, #28]
   876f2:	f806 4d41 	strb.w	r4, [r6, #-65]!
   876f6:	930e      	str	r3, [sp, #56]	; 0x38
   876f8:	f7ff ba4e 	b.w	86b98 <_svfprintf_r+0x238>
   876fc:	4635      	mov	r5, r6
   876fe:	460c      	mov	r4, r1
   87700:	4646      	mov	r6, r8
   87702:	4690      	mov	r8, r2
   87704:	3301      	adds	r3, #1
   87706:	443c      	add	r4, r7
   87708:	2b07      	cmp	r3, #7
   8770a:	9427      	str	r4, [sp, #156]	; 0x9c
   8770c:	9326      	str	r3, [sp, #152]	; 0x98
   8770e:	e888 00a0 	stmia.w	r8, {r5, r7}
   87712:	f300 8246 	bgt.w	87ba2 <_svfprintf_r+0x1242>
   87716:	f108 0808 	add.w	r8, r8, #8
   8771a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8771c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8771e:	429a      	cmp	r2, r3
   87720:	db45      	blt.n	877ae <_svfprintf_r+0xe4e>
   87722:	9b07      	ldr	r3, [sp, #28]
   87724:	07d9      	lsls	r1, r3, #31
   87726:	d442      	bmi.n	877ae <_svfprintf_r+0xe4e>
   87728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8772a:	9812      	ldr	r0, [sp, #72]	; 0x48
   8772c:	1a9a      	subs	r2, r3, r2
   8772e:	1a1d      	subs	r5, r3, r0
   87730:	4295      	cmp	r5, r2
   87732:	bfa8      	it	ge
   87734:	4615      	movge	r5, r2
   87736:	2d00      	cmp	r5, #0
   87738:	dd0e      	ble.n	87758 <_svfprintf_r+0xdf8>
   8773a:	9926      	ldr	r1, [sp, #152]	; 0x98
   8773c:	4406      	add	r6, r0
   8773e:	3101      	adds	r1, #1
   87740:	442c      	add	r4, r5
   87742:	2907      	cmp	r1, #7
   87744:	f8c8 6000 	str.w	r6, [r8]
   87748:	9427      	str	r4, [sp, #156]	; 0x9c
   8774a:	f8c8 5004 	str.w	r5, [r8, #4]
   8774e:	9126      	str	r1, [sp, #152]	; 0x98
   87750:	f300 8216 	bgt.w	87b80 <_svfprintf_r+0x1220>
   87754:	f108 0808 	add.w	r8, r8, #8
   87758:	2d00      	cmp	r5, #0
   8775a:	bfb4      	ite	lt
   8775c:	4616      	movlt	r6, r2
   8775e:	1b56      	subge	r6, r2, r5
   87760:	2e00      	cmp	r6, #0
   87762:	f77f aaef 	ble.w	86d44 <_svfprintf_r+0x3e4>
   87766:	2e10      	cmp	r6, #16
   87768:	f340 82f3 	ble.w	87d52 <_svfprintf_r+0x13f2>
   8776c:	4622      	mov	r2, r4
   8776e:	2710      	movs	r7, #16
   87770:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87772:	4d3a      	ldr	r5, [pc, #232]	; (8785c <_svfprintf_r+0xefc>)
   87774:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87778:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8777a:	e004      	b.n	87786 <_svfprintf_r+0xe26>
   8777c:	f108 0808 	add.w	r8, r8, #8
   87780:	3e10      	subs	r6, #16
   87782:	2e10      	cmp	r6, #16
   87784:	dda3      	ble.n	876ce <_svfprintf_r+0xd6e>
   87786:	3301      	adds	r3, #1
   87788:	3210      	adds	r2, #16
   8778a:	2b07      	cmp	r3, #7
   8778c:	9227      	str	r2, [sp, #156]	; 0x9c
   8778e:	9326      	str	r3, [sp, #152]	; 0x98
   87790:	e888 00a0 	stmia.w	r8, {r5, r7}
   87794:	ddf2      	ble.n	8777c <_svfprintf_r+0xe1c>
   87796:	aa25      	add	r2, sp, #148	; 0x94
   87798:	4621      	mov	r1, r4
   8779a:	4658      	mov	r0, fp
   8779c:	f004 f80e 	bl	8b7bc <__ssprint_r>
   877a0:	2800      	cmp	r0, #0
   877a2:	f47f a9ba 	bne.w	86b1a <_svfprintf_r+0x1ba>
   877a6:	46c8      	mov	r8, r9
   877a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   877aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877ac:	e7e8      	b.n	87780 <_svfprintf_r+0xe20>
   877ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877b0:	9819      	ldr	r0, [sp, #100]	; 0x64
   877b2:	3301      	adds	r3, #1
   877b4:	991a      	ldr	r1, [sp, #104]	; 0x68
   877b6:	4404      	add	r4, r0
   877b8:	2b07      	cmp	r3, #7
   877ba:	9427      	str	r4, [sp, #156]	; 0x9c
   877bc:	f8c8 1000 	str.w	r1, [r8]
   877c0:	f8c8 0004 	str.w	r0, [r8, #4]
   877c4:	9326      	str	r3, [sp, #152]	; 0x98
   877c6:	f300 81cf 	bgt.w	87b68 <_svfprintf_r+0x1208>
   877ca:	f108 0808 	add.w	r8, r8, #8
   877ce:	e7ab      	b.n	87728 <_svfprintf_r+0xdc8>
   877d0:	9b07      	ldr	r3, [sp, #28]
   877d2:	07da      	lsls	r2, r3, #31
   877d4:	f53f adad 	bmi.w	87332 <_svfprintf_r+0x9d2>
   877d8:	2301      	movs	r3, #1
   877da:	9f26      	ldr	r7, [sp, #152]	; 0x98
   877dc:	441c      	add	r4, r3
   877de:	441f      	add	r7, r3
   877e0:	2f07      	cmp	r7, #7
   877e2:	9427      	str	r4, [sp, #156]	; 0x9c
   877e4:	f8c8 6000 	str.w	r6, [r8]
   877e8:	9726      	str	r7, [sp, #152]	; 0x98
   877ea:	f8c8 3004 	str.w	r3, [r8, #4]
   877ee:	f77f add4 	ble.w	8739a <_svfprintf_r+0xa3a>
   877f2:	aa25      	add	r2, sp, #148	; 0x94
   877f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   877f8:	f003 ffe0 	bl	8b7bc <__ssprint_r>
   877fc:	2800      	cmp	r0, #0
   877fe:	f47f a98c 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87802:	46c8      	mov	r8, r9
   87804:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87806:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87808:	e5c9      	b.n	8739e <_svfprintf_r+0xa3e>
   8780a:	aa25      	add	r2, sp, #148	; 0x94
   8780c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8780e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87810:	f003 ffd4 	bl	8b7bc <__ssprint_r>
   87814:	2800      	cmp	r0, #0
   87816:	f47f a980 	bne.w	86b1a <_svfprintf_r+0x1ba>
   8781a:	46c8      	mov	r8, r9
   8781c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8781e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87820:	e596      	b.n	87350 <_svfprintf_r+0x9f0>
   87822:	aa25      	add	r2, sp, #148	; 0x94
   87824:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87826:	980c      	ldr	r0, [sp, #48]	; 0x30
   87828:	f003 ffc8 	bl	8b7bc <__ssprint_r>
   8782c:	2800      	cmp	r0, #0
   8782e:	f47f a974 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87832:	46c8      	mov	r8, r9
   87834:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87836:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87838:	e599      	b.n	8736e <_svfprintf_r+0xa0e>
   8783a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8783c:	3407      	adds	r4, #7
   8783e:	f024 0407 	bic.w	r4, r4, #7
   87842:	f104 0108 	add.w	r1, r4, #8
   87846:	e9d4 2300 	ldrd	r2, r3, [r4]
   8784a:	910f      	str	r1, [sp, #60]	; 0x3c
   8784c:	4614      	mov	r4, r2
   8784e:	461d      	mov	r5, r3
   87850:	f7ff bb8f 	b.w	86f72 <_svfprintf_r+0x612>
   87854:	464e      	mov	r6, r9
   87856:	f7ff b99f 	b.w	86b98 <_svfprintf_r+0x238>
   8785a:	bf00      	nop
   8785c:	0008c730 	.word	0x0008c730
   87860:	aa25      	add	r2, sp, #148	; 0x94
   87862:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87864:	980c      	ldr	r0, [sp, #48]	; 0x30
   87866:	f003 ffa9 	bl	8b7bc <__ssprint_r>
   8786a:	2800      	cmp	r0, #0
   8786c:	f47f a955 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87870:	46c8      	mov	r8, r9
   87872:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87874:	f7ff ba16 	b.w	86ca4 <_svfprintf_r+0x344>
   87878:	9c15      	ldr	r4, [sp, #84]	; 0x54
   8787a:	4622      	mov	r2, r4
   8787c:	4620      	mov	r0, r4
   8787e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   87880:	4623      	mov	r3, r4
   87882:	4621      	mov	r1, r4
   87884:	f004 fe66 	bl	8c554 <__aeabi_dcmpun>
   87888:	2800      	cmp	r0, #0
   8788a:	f040 8273 	bne.w	87d74 <_svfprintf_r+0x1414>
   8788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87890:	3301      	adds	r3, #1
   87892:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87894:	f023 0320 	bic.w	r3, r3, #32
   87898:	930e      	str	r3, [sp, #56]	; 0x38
   8789a:	f000 819c 	beq.w	87bd6 <_svfprintf_r+0x1276>
   8789e:	2b47      	cmp	r3, #71	; 0x47
   878a0:	f000 80d6 	beq.w	87a50 <_svfprintf_r+0x10f0>
   878a4:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   878a8:	9307      	str	r3, [sp, #28]
   878aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   878ac:	1e1f      	subs	r7, r3, #0
   878ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
   878b0:	9308      	str	r3, [sp, #32]
   878b2:	bfb7      	itett	lt
   878b4:	463b      	movlt	r3, r7
   878b6:	2300      	movge	r3, #0
   878b8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   878bc:	232d      	movlt	r3, #45	; 0x2d
   878be:	9310      	str	r3, [sp, #64]	; 0x40
   878c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   878c2:	2b66      	cmp	r3, #102	; 0x66
   878c4:	f000 8190 	beq.w	87be8 <_svfprintf_r+0x1288>
   878c8:	2b46      	cmp	r3, #70	; 0x46
   878ca:	f000 80a4 	beq.w	87a16 <_svfprintf_r+0x10b6>
   878ce:	2002      	movs	r0, #2
   878d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   878d2:	a923      	add	r1, sp, #140	; 0x8c
   878d4:	2b45      	cmp	r3, #69	; 0x45
   878d6:	bf0a      	itet	eq
   878d8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   878da:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   878dc:	1c5d      	addeq	r5, r3, #1
   878de:	e88d 0021 	stmia.w	sp, {r0, r5}
   878e2:	9104      	str	r1, [sp, #16]
   878e4:	a820      	add	r0, sp, #128	; 0x80
   878e6:	a91f      	add	r1, sp, #124	; 0x7c
   878e8:	463b      	mov	r3, r7
   878ea:	9003      	str	r0, [sp, #12]
   878ec:	9a08      	ldr	r2, [sp, #32]
   878ee:	9102      	str	r1, [sp, #8]
   878f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   878f2:	f001 fa85 	bl	88e00 <_dtoa_r>
   878f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   878f8:	4606      	mov	r6, r0
   878fa:	2b67      	cmp	r3, #103	; 0x67
   878fc:	f040 81ba 	bne.w	87c74 <_svfprintf_r+0x1314>
   87900:	f01b 0f01 	tst.w	fp, #1
   87904:	f000 8223 	beq.w	87d4e <_svfprintf_r+0x13ee>
   87908:	1974      	adds	r4, r6, r5
   8790a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8790c:	9808      	ldr	r0, [sp, #32]
   8790e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87910:	4639      	mov	r1, r7
   87912:	f004 fded 	bl	8c4f0 <__aeabi_dcmpeq>
   87916:	2800      	cmp	r0, #0
   87918:	f040 8124 	bne.w	87b64 <_svfprintf_r+0x1204>
   8791c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8791e:	42a3      	cmp	r3, r4
   87920:	d206      	bcs.n	87930 <_svfprintf_r+0xfd0>
   87922:	2130      	movs	r1, #48	; 0x30
   87924:	1c5a      	adds	r2, r3, #1
   87926:	9223      	str	r2, [sp, #140]	; 0x8c
   87928:	7019      	strb	r1, [r3, #0]
   8792a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8792c:	429c      	cmp	r4, r3
   8792e:	d8f9      	bhi.n	87924 <_svfprintf_r+0xfc4>
   87930:	1b9b      	subs	r3, r3, r6
   87932:	9313      	str	r3, [sp, #76]	; 0x4c
   87934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87936:	2b47      	cmp	r3, #71	; 0x47
   87938:	f000 80a2 	beq.w	87a80 <_svfprintf_r+0x1120>
   8793c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8793e:	2b65      	cmp	r3, #101	; 0x65
   87940:	f340 81a7 	ble.w	87c92 <_svfprintf_r+0x1332>
   87944:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87946:	2b66      	cmp	r3, #102	; 0x66
   87948:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8794a:	9312      	str	r3, [sp, #72]	; 0x48
   8794c:	f000 8171 	beq.w	87c32 <_svfprintf_r+0x12d2>
   87950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87952:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87954:	4619      	mov	r1, r3
   87956:	4291      	cmp	r1, r2
   87958:	f300 815d 	bgt.w	87c16 <_svfprintf_r+0x12b6>
   8795c:	f01b 0f01 	tst.w	fp, #1
   87960:	f040 81f0 	bne.w	87d44 <_svfprintf_r+0x13e4>
   87964:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87968:	9308      	str	r3, [sp, #32]
   8796a:	2367      	movs	r3, #103	; 0x67
   8796c:	920e      	str	r2, [sp, #56]	; 0x38
   8796e:	9311      	str	r3, [sp, #68]	; 0x44
   87970:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87972:	2b00      	cmp	r3, #0
   87974:	d17d      	bne.n	87a72 <_svfprintf_r+0x1112>
   87976:	930a      	str	r3, [sp, #40]	; 0x28
   87978:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8797c:	f7ff b914 	b.w	86ba8 <_svfprintf_r+0x248>
   87980:	f024 0407 	bic.w	r4, r4, #7
   87984:	6823      	ldr	r3, [r4, #0]
   87986:	9315      	str	r3, [sp, #84]	; 0x54
   87988:	6863      	ldr	r3, [r4, #4]
   8798a:	9314      	str	r3, [sp, #80]	; 0x50
   8798c:	f104 0308 	add.w	r3, r4, #8
   87990:	930f      	str	r3, [sp, #60]	; 0x3c
   87992:	f7ff bb2f 	b.w	86ff4 <_svfprintf_r+0x694>
   87996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87998:	6813      	ldr	r3, [r2, #0]
   8799a:	3204      	adds	r2, #4
   8799c:	920f      	str	r2, [sp, #60]	; 0x3c
   8799e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   879a0:	601a      	str	r2, [r3, #0]
   879a2:	f7ff b804 	b.w	869ae <_svfprintf_r+0x4e>
   879a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   879a8:	4daf      	ldr	r5, [pc, #700]	; (87c68 <_svfprintf_r+0x1308>)
   879aa:	f7ff b9ad 	b.w	86d08 <_svfprintf_r+0x3a8>
   879ae:	aa25      	add	r2, sp, #148	; 0x94
   879b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   879b4:	f003 ff02 	bl	8b7bc <__ssprint_r>
   879b8:	2800      	cmp	r0, #0
   879ba:	f47f a8ae 	bne.w	86b1a <_svfprintf_r+0x1ba>
   879be:	46c8      	mov	r8, r9
   879c0:	e431      	b.n	87226 <_svfprintf_r+0x8c6>
   879c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   879c4:	4613      	mov	r3, r2
   879c6:	3304      	adds	r3, #4
   879c8:	930f      	str	r3, [sp, #60]	; 0x3c
   879ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879cc:	6811      	ldr	r1, [r2, #0]
   879ce:	17dd      	asrs	r5, r3, #31
   879d0:	461a      	mov	r2, r3
   879d2:	462b      	mov	r3, r5
   879d4:	e9c1 2300 	strd	r2, r3, [r1]
   879d8:	f7fe bfe9 	b.w	869ae <_svfprintf_r+0x4e>
   879dc:	aa25      	add	r2, sp, #148	; 0x94
   879de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   879e2:	f003 feeb 	bl	8b7bc <__ssprint_r>
   879e6:	2800      	cmp	r0, #0
   879e8:	f47f a897 	bne.w	86b1a <_svfprintf_r+0x1ba>
   879ec:	46c8      	mov	r8, r9
   879ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   879f0:	e432      	b.n	87258 <_svfprintf_r+0x8f8>
   879f2:	f108 0808 	add.w	r8, r8, #8
   879f6:	e52f      	b.n	87458 <_svfprintf_r+0xaf8>
   879f8:	2140      	movs	r1, #64	; 0x40
   879fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   879fc:	f002 fe68 	bl	8a6d0 <_malloc_r>
   87a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87a02:	6010      	str	r0, [r2, #0]
   87a04:	6110      	str	r0, [r2, #16]
   87a06:	2800      	cmp	r0, #0
   87a08:	f000 8214 	beq.w	87e34 <_svfprintf_r+0x14d4>
   87a0c:	2340      	movs	r3, #64	; 0x40
   87a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87a10:	6153      	str	r3, [r2, #20]
   87a12:	f7fe bfbc 	b.w	8698e <_svfprintf_r+0x2e>
   87a16:	2003      	movs	r0, #3
   87a18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87a1a:	a923      	add	r1, sp, #140	; 0x8c
   87a1c:	e88d 0011 	stmia.w	sp, {r0, r4}
   87a20:	9104      	str	r1, [sp, #16]
   87a22:	a820      	add	r0, sp, #128	; 0x80
   87a24:	a91f      	add	r1, sp, #124	; 0x7c
   87a26:	9003      	str	r0, [sp, #12]
   87a28:	9a08      	ldr	r2, [sp, #32]
   87a2a:	463b      	mov	r3, r7
   87a2c:	9102      	str	r1, [sp, #8]
   87a2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a30:	f001 f9e6 	bl	88e00 <_dtoa_r>
   87a34:	4625      	mov	r5, r4
   87a36:	4606      	mov	r6, r0
   87a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87a3a:	1974      	adds	r4, r6, r5
   87a3c:	2b46      	cmp	r3, #70	; 0x46
   87a3e:	f47f af64 	bne.w	8790a <_svfprintf_r+0xfaa>
   87a42:	7833      	ldrb	r3, [r6, #0]
   87a44:	2b30      	cmp	r3, #48	; 0x30
   87a46:	f000 8187 	beq.w	87d58 <_svfprintf_r+0x13f8>
   87a4a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   87a4c:	442c      	add	r4, r5
   87a4e:	e75c      	b.n	8790a <_svfprintf_r+0xfaa>
   87a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a52:	2b00      	cmp	r3, #0
   87a54:	bf08      	it	eq
   87a56:	2301      	moveq	r3, #1
   87a58:	930a      	str	r3, [sp, #40]	; 0x28
   87a5a:	e723      	b.n	878a4 <_svfprintf_r+0xf44>
   87a5c:	4630      	mov	r0, r6
   87a5e:	950a      	str	r5, [sp, #40]	; 0x28
   87a60:	f7fe ff1e 	bl	868a0 <strlen>
   87a64:	940f      	str	r4, [sp, #60]	; 0x3c
   87a66:	900e      	str	r0, [sp, #56]	; 0x38
   87a68:	f8cd b01c 	str.w	fp, [sp, #28]
   87a6c:	4603      	mov	r3, r0
   87a6e:	f7ff b9e7 	b.w	86e40 <_svfprintf_r+0x4e0>
   87a72:	272d      	movs	r7, #45	; 0x2d
   87a74:	2300      	movs	r3, #0
   87a76:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   87a7a:	930a      	str	r3, [sp, #40]	; 0x28
   87a7c:	f7ff b895 	b.w	86baa <_svfprintf_r+0x24a>
   87a80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87a82:	461a      	mov	r2, r3
   87a84:	9312      	str	r3, [sp, #72]	; 0x48
   87a86:	3303      	adds	r3, #3
   87a88:	db04      	blt.n	87a94 <_svfprintf_r+0x1134>
   87a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a8c:	4619      	mov	r1, r3
   87a8e:	4291      	cmp	r1, r2
   87a90:	f6bf af5e 	bge.w	87950 <_svfprintf_r+0xff0>
   87a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87a96:	3b02      	subs	r3, #2
   87a98:	9311      	str	r3, [sp, #68]	; 0x44
   87a9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87a9c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   87aa0:	3b01      	subs	r3, #1
   87aa2:	2b00      	cmp	r3, #0
   87aa4:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   87aa8:	bfb4      	ite	lt
   87aaa:	222d      	movlt	r2, #45	; 0x2d
   87aac:	222b      	movge	r2, #43	; 0x2b
   87aae:	931f      	str	r3, [sp, #124]	; 0x7c
   87ab0:	bfb8      	it	lt
   87ab2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   87ab4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   87ab8:	bfb8      	it	lt
   87aba:	f1c3 0301 	rsblt	r3, r3, #1
   87abe:	2b09      	cmp	r3, #9
   87ac0:	f340 811f 	ble.w	87d02 <_svfprintf_r+0x13a2>
   87ac4:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   87ac8:	4601      	mov	r1, r0
   87aca:	4c68      	ldr	r4, [pc, #416]	; (87c6c <_svfprintf_r+0x130c>)
   87acc:	e000      	b.n	87ad0 <_svfprintf_r+0x1170>
   87ace:	4611      	mov	r1, r2
   87ad0:	fb84 5203 	smull	r5, r2, r4, r3
   87ad4:	17dd      	asrs	r5, r3, #31
   87ad6:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   87ada:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   87ade:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   87ae2:	3230      	adds	r2, #48	; 0x30
   87ae4:	2d09      	cmp	r5, #9
   87ae6:	f801 2c01 	strb.w	r2, [r1, #-1]
   87aea:	462b      	mov	r3, r5
   87aec:	f101 32ff 	add.w	r2, r1, #4294967295
   87af0:	dced      	bgt.n	87ace <_svfprintf_r+0x116e>
   87af2:	3330      	adds	r3, #48	; 0x30
   87af4:	3902      	subs	r1, #2
   87af6:	b2dc      	uxtb	r4, r3
   87af8:	4288      	cmp	r0, r1
   87afa:	f802 4c01 	strb.w	r4, [r2, #-1]
   87afe:	f240 8192 	bls.w	87e26 <_svfprintf_r+0x14c6>
   87b02:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   87b06:	4613      	mov	r3, r2
   87b08:	e001      	b.n	87b0e <_svfprintf_r+0x11ae>
   87b0a:	f813 4b01 	ldrb.w	r4, [r3], #1
   87b0e:	4283      	cmp	r3, r0
   87b10:	f801 4b01 	strb.w	r4, [r1], #1
   87b14:	d1f9      	bne.n	87b0a <_svfprintf_r+0x11aa>
   87b16:	3301      	adds	r3, #1
   87b18:	1a9b      	subs	r3, r3, r2
   87b1a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   87b1e:	4413      	add	r3, r2
   87b20:	aa21      	add	r2, sp, #132	; 0x84
   87b22:	1a9b      	subs	r3, r3, r2
   87b24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87b26:	931b      	str	r3, [sp, #108]	; 0x6c
   87b28:	2a01      	cmp	r2, #1
   87b2a:	4413      	add	r3, r2
   87b2c:	930e      	str	r3, [sp, #56]	; 0x38
   87b2e:	f340 8148 	ble.w	87dc2 <_svfprintf_r+0x1462>
   87b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87b34:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87b36:	4413      	add	r3, r2
   87b38:	930e      	str	r3, [sp, #56]	; 0x38
   87b3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87b3e:	9308      	str	r3, [sp, #32]
   87b40:	2300      	movs	r3, #0
   87b42:	9312      	str	r3, [sp, #72]	; 0x48
   87b44:	e714      	b.n	87970 <_svfprintf_r+0x1010>
   87b46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b48:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87b4a:	f7ff b876 	b.w	86c3a <_svfprintf_r+0x2da>
   87b4e:	aa25      	add	r2, sp, #148	; 0x94
   87b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b52:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b54:	f003 fe32 	bl	8b7bc <__ssprint_r>
   87b58:	2800      	cmp	r0, #0
   87b5a:	f47e afde 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87b5e:	46c8      	mov	r8, r9
   87b60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b62:	e4fb      	b.n	8755c <_svfprintf_r+0xbfc>
   87b64:	4623      	mov	r3, r4
   87b66:	e6e3      	b.n	87930 <_svfprintf_r+0xfd0>
   87b68:	aa25      	add	r2, sp, #148	; 0x94
   87b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b6c:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b6e:	f003 fe25 	bl	8b7bc <__ssprint_r>
   87b72:	2800      	cmp	r0, #0
   87b74:	f47e afd1 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87b78:	46c8      	mov	r8, r9
   87b7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87b7c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b7e:	e5d3      	b.n	87728 <_svfprintf_r+0xdc8>
   87b80:	aa25      	add	r2, sp, #148	; 0x94
   87b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b84:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b86:	f003 fe19 	bl	8b7bc <__ssprint_r>
   87b8a:	2800      	cmp	r0, #0
   87b8c:	f47e afc5 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87b90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b94:	46c8      	mov	r8, r9
   87b96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b98:	1a9a      	subs	r2, r3, r2
   87b9a:	e5dd      	b.n	87758 <_svfprintf_r+0xdf8>
   87b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87b9e:	f7ff b8fe 	b.w	86d9e <_svfprintf_r+0x43e>
   87ba2:	aa25      	add	r2, sp, #148	; 0x94
   87ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87ba6:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ba8:	f003 fe08 	bl	8b7bc <__ssprint_r>
   87bac:	2800      	cmp	r0, #0
   87bae:	f47e afb4 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87bb2:	46c8      	mov	r8, r9
   87bb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87bb6:	e5b0      	b.n	8771a <_svfprintf_r+0xdba>
   87bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87bba:	4637      	mov	r7, r6
   87bbc:	2b06      	cmp	r3, #6
   87bbe:	bf28      	it	cs
   87bc0:	2306      	movcs	r3, #6
   87bc2:	960a      	str	r6, [sp, #40]	; 0x28
   87bc4:	9612      	str	r6, [sp, #72]	; 0x48
   87bc6:	9308      	str	r3, [sp, #32]
   87bc8:	940f      	str	r4, [sp, #60]	; 0x3c
   87bca:	f8cd b01c 	str.w	fp, [sp, #28]
   87bce:	930e      	str	r3, [sp, #56]	; 0x38
   87bd0:	4e27      	ldr	r6, [pc, #156]	; (87c70 <_svfprintf_r+0x1310>)
   87bd2:	f7fe bfe9 	b.w	86ba8 <_svfprintf_r+0x248>
   87bd6:	2306      	movs	r3, #6
   87bd8:	930a      	str	r3, [sp, #40]	; 0x28
   87bda:	e663      	b.n	878a4 <_svfprintf_r+0xf44>
   87bdc:	232d      	movs	r3, #45	; 0x2d
   87bde:	461f      	mov	r7, r3
   87be0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87be4:	f7ff ba28 	b.w	87038 <_svfprintf_r+0x6d8>
   87be8:	2003      	movs	r0, #3
   87bea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87bec:	a923      	add	r1, sp, #140	; 0x8c
   87bee:	e88d 0011 	stmia.w	sp, {r0, r4}
   87bf2:	9104      	str	r1, [sp, #16]
   87bf4:	a820      	add	r0, sp, #128	; 0x80
   87bf6:	a91f      	add	r1, sp, #124	; 0x7c
   87bf8:	9003      	str	r0, [sp, #12]
   87bfa:	9a08      	ldr	r2, [sp, #32]
   87bfc:	463b      	mov	r3, r7
   87bfe:	9102      	str	r1, [sp, #8]
   87c00:	980c      	ldr	r0, [sp, #48]	; 0x30
   87c02:	f001 f8fd 	bl	88e00 <_dtoa_r>
   87c06:	4625      	mov	r5, r4
   87c08:	4606      	mov	r6, r0
   87c0a:	1904      	adds	r4, r0, r4
   87c0c:	e719      	b.n	87a42 <_svfprintf_r+0x10e2>
   87c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87c10:	4d15      	ldr	r5, [pc, #84]	; (87c68 <_svfprintf_r+0x1308>)
   87c12:	f7ff bb7e 	b.w	87312 <_svfprintf_r+0x9b2>
   87c16:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87c1a:	4413      	add	r3, r2
   87c1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87c1e:	930e      	str	r3, [sp, #56]	; 0x38
   87c20:	2a00      	cmp	r2, #0
   87c22:	f340 80c7 	ble.w	87db4 <_svfprintf_r+0x1454>
   87c26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87c2a:	9308      	str	r3, [sp, #32]
   87c2c:	2367      	movs	r3, #103	; 0x67
   87c2e:	9311      	str	r3, [sp, #68]	; 0x44
   87c30:	e69e      	b.n	87970 <_svfprintf_r+0x1010>
   87c32:	2b00      	cmp	r3, #0
   87c34:	f340 80e1 	ble.w	87dfa <_svfprintf_r+0x149a>
   87c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87c3a:	2a00      	cmp	r2, #0
   87c3c:	f040 80b0 	bne.w	87da0 <_svfprintf_r+0x1440>
   87c40:	f01b 0f01 	tst.w	fp, #1
   87c44:	f040 80ac 	bne.w	87da0 <_svfprintf_r+0x1440>
   87c48:	9308      	str	r3, [sp, #32]
   87c4a:	930e      	str	r3, [sp, #56]	; 0x38
   87c4c:	e690      	b.n	87970 <_svfprintf_r+0x1010>
   87c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87c50:	940f      	str	r4, [sp, #60]	; 0x3c
   87c52:	9308      	str	r3, [sp, #32]
   87c54:	930e      	str	r3, [sp, #56]	; 0x38
   87c56:	900a      	str	r0, [sp, #40]	; 0x28
   87c58:	f8cd b01c 	str.w	fp, [sp, #28]
   87c5c:	9012      	str	r0, [sp, #72]	; 0x48
   87c5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87c62:	f7fe bfa1 	b.w	86ba8 <_svfprintf_r+0x248>
   87c66:	bf00      	nop
   87c68:	0008c730 	.word	0x0008c730
   87c6c:	66666667 	.word	0x66666667
   87c70:	0008c714 	.word	0x0008c714
   87c74:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87c76:	2b47      	cmp	r3, #71	; 0x47
   87c78:	f47f ae46 	bne.w	87908 <_svfprintf_r+0xfa8>
   87c7c:	f01b 0f01 	tst.w	fp, #1
   87c80:	f47f aeda 	bne.w	87a38 <_svfprintf_r+0x10d8>
   87c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87c86:	1b9b      	subs	r3, r3, r6
   87c88:	9313      	str	r3, [sp, #76]	; 0x4c
   87c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87c8c:	2b47      	cmp	r3, #71	; 0x47
   87c8e:	f43f aef7 	beq.w	87a80 <_svfprintf_r+0x1120>
   87c92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87c94:	9312      	str	r3, [sp, #72]	; 0x48
   87c96:	e700      	b.n	87a9a <_svfprintf_r+0x113a>
   87c98:	2000      	movs	r0, #0
   87c9a:	900a      	str	r0, [sp, #40]	; 0x28
   87c9c:	f7fe bebc 	b.w	86a18 <_svfprintf_r+0xb8>
   87ca0:	424f      	negs	r7, r1
   87ca2:	3110      	adds	r1, #16
   87ca4:	da35      	bge.n	87d12 <_svfprintf_r+0x13b2>
   87ca6:	2410      	movs	r4, #16
   87ca8:	4d6a      	ldr	r5, [pc, #424]	; (87e54 <_svfprintf_r+0x14f4>)
   87caa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87cae:	e004      	b.n	87cba <_svfprintf_r+0x135a>
   87cb0:	f108 0808 	add.w	r8, r8, #8
   87cb4:	3f10      	subs	r7, #16
   87cb6:	2f10      	cmp	r7, #16
   87cb8:	dd2c      	ble.n	87d14 <_svfprintf_r+0x13b4>
   87cba:	3301      	adds	r3, #1
   87cbc:	3210      	adds	r2, #16
   87cbe:	2b07      	cmp	r3, #7
   87cc0:	9227      	str	r2, [sp, #156]	; 0x9c
   87cc2:	9326      	str	r3, [sp, #152]	; 0x98
   87cc4:	f8c8 5000 	str.w	r5, [r8]
   87cc8:	f8c8 4004 	str.w	r4, [r8, #4]
   87ccc:	ddf0      	ble.n	87cb0 <_svfprintf_r+0x1350>
   87cce:	aa25      	add	r2, sp, #148	; 0x94
   87cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87cd2:	4658      	mov	r0, fp
   87cd4:	f003 fd72 	bl	8b7bc <__ssprint_r>
   87cd8:	2800      	cmp	r0, #0
   87cda:	f47e af1e 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87cde:	46c8      	mov	r8, r9
   87ce0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ce4:	e7e6      	b.n	87cb4 <_svfprintf_r+0x1354>
   87ce6:	aa25      	add	r2, sp, #148	; 0x94
   87ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87cea:	980c      	ldr	r0, [sp, #48]	; 0x30
   87cec:	f003 fd66 	bl	8b7bc <__ssprint_r>
   87cf0:	2800      	cmp	r0, #0
   87cf2:	f47e af12 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87cf6:	46c8      	mov	r8, r9
   87cf8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87cfa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87cfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87cfe:	f7ff bbc3 	b.w	87488 <_svfprintf_r+0xb28>
   87d02:	2230      	movs	r2, #48	; 0x30
   87d04:	4413      	add	r3, r2
   87d06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   87d0a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   87d0e:	ab22      	add	r3, sp, #136	; 0x88
   87d10:	e706      	b.n	87b20 <_svfprintf_r+0x11c0>
   87d12:	4d50      	ldr	r5, [pc, #320]	; (87e54 <_svfprintf_r+0x14f4>)
   87d14:	3301      	adds	r3, #1
   87d16:	443a      	add	r2, r7
   87d18:	2b07      	cmp	r3, #7
   87d1a:	e888 00a0 	stmia.w	r8, {r5, r7}
   87d1e:	9227      	str	r2, [sp, #156]	; 0x9c
   87d20:	9326      	str	r3, [sp, #152]	; 0x98
   87d22:	f108 0808 	add.w	r8, r8, #8
   87d26:	f77f abb2 	ble.w	8748e <_svfprintf_r+0xb2e>
   87d2a:	aa25      	add	r2, sp, #148	; 0x94
   87d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87d30:	f003 fd44 	bl	8b7bc <__ssprint_r>
   87d34:	2800      	cmp	r0, #0
   87d36:	f47e aef0 	bne.w	86b1a <_svfprintf_r+0x1ba>
   87d3a:	46c8      	mov	r8, r9
   87d3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87d3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d40:	f7ff bba5 	b.w	8748e <_svfprintf_r+0xb2e>
   87d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d46:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87d48:	4413      	add	r3, r2
   87d4a:	930e      	str	r3, [sp, #56]	; 0x38
   87d4c:	e76b      	b.n	87c26 <_svfprintf_r+0x12c6>
   87d4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87d50:	e5ee      	b.n	87930 <_svfprintf_r+0xfd0>
   87d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d54:	4d3f      	ldr	r5, [pc, #252]	; (87e54 <_svfprintf_r+0x14f4>)
   87d56:	e4bb      	b.n	876d0 <_svfprintf_r+0xd70>
   87d58:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87d5a:	9808      	ldr	r0, [sp, #32]
   87d5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87d5e:	4639      	mov	r1, r7
   87d60:	f004 fbc6 	bl	8c4f0 <__aeabi_dcmpeq>
   87d64:	2800      	cmp	r0, #0
   87d66:	f47f ae70 	bne.w	87a4a <_svfprintf_r+0x10ea>
   87d6a:	f1c5 0501 	rsb	r5, r5, #1
   87d6e:	951f      	str	r5, [sp, #124]	; 0x7c
   87d70:	442c      	add	r4, r5
   87d72:	e5ca      	b.n	8790a <_svfprintf_r+0xfaa>
   87d74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87d76:	4e38      	ldr	r6, [pc, #224]	; (87e58 <_svfprintf_r+0x14f8>)
   87d78:	2b00      	cmp	r3, #0
   87d7a:	bfbe      	ittt	lt
   87d7c:	232d      	movlt	r3, #45	; 0x2d
   87d7e:	461f      	movlt	r7, r3
   87d80:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   87d84:	f04f 0303 	mov.w	r3, #3
   87d88:	461a      	mov	r2, r3
   87d8a:	9308      	str	r3, [sp, #32]
   87d8c:	f04f 0300 	mov.w	r3, #0
   87d90:	bfa8      	it	ge
   87d92:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   87d96:	4619      	mov	r1, r3
   87d98:	930a      	str	r3, [sp, #40]	; 0x28
   87d9a:	4b30      	ldr	r3, [pc, #192]	; (87e5c <_svfprintf_r+0x14fc>)
   87d9c:	f7ff b954 	b.w	87048 <_svfprintf_r+0x6e8>
   87da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87da2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87da4:	4413      	add	r3, r2
   87da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87da8:	441a      	add	r2, r3
   87daa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87dae:	920e      	str	r2, [sp, #56]	; 0x38
   87db0:	9308      	str	r3, [sp, #32]
   87db2:	e5dd      	b.n	87970 <_svfprintf_r+0x1010>
   87db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87db6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87db8:	f1c3 0301 	rsb	r3, r3, #1
   87dbc:	441a      	add	r2, r3
   87dbe:	4613      	mov	r3, r2
   87dc0:	e7c3      	b.n	87d4a <_svfprintf_r+0x13ea>
   87dc2:	f01b 0301 	ands.w	r3, fp, #1
   87dc6:	9312      	str	r3, [sp, #72]	; 0x48
   87dc8:	f47f aeb3 	bne.w	87b32 <_svfprintf_r+0x11d2>
   87dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87dd2:	9308      	str	r3, [sp, #32]
   87dd4:	e5cc      	b.n	87970 <_svfprintf_r+0x1010>
   87dd6:	4d1f      	ldr	r5, [pc, #124]	; (87e54 <_svfprintf_r+0x14f4>)
   87dd8:	e43c      	b.n	87654 <_svfprintf_r+0xcf4>
   87dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ddc:	4d1d      	ldr	r5, [pc, #116]	; (87e54 <_svfprintf_r+0x14f4>)
   87dde:	e491      	b.n	87704 <_svfprintf_r+0xda4>
   87de0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   87de2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   87de6:	6828      	ldr	r0, [r5, #0]
   87de8:	46a2      	mov	sl, r4
   87dea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   87dee:	900a      	str	r0, [sp, #40]	; 0x28
   87df0:	4628      	mov	r0, r5
   87df2:	3004      	adds	r0, #4
   87df4:	900f      	str	r0, [sp, #60]	; 0x3c
   87df6:	f7fe be0d 	b.w	86a14 <_svfprintf_r+0xb4>
   87dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87dfc:	b913      	cbnz	r3, 87e04 <_svfprintf_r+0x14a4>
   87dfe:	f01b 0f01 	tst.w	fp, #1
   87e02:	d002      	beq.n	87e0a <_svfprintf_r+0x14aa>
   87e04:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87e06:	3301      	adds	r3, #1
   87e08:	e7cd      	b.n	87da6 <_svfprintf_r+0x1446>
   87e0a:	2301      	movs	r3, #1
   87e0c:	e71c      	b.n	87c48 <_svfprintf_r+0x12e8>
   87e0e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e12:	f7ff b980 	b.w	87116 <_svfprintf_r+0x7b6>
   87e16:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e1a:	f7ff b93a 	b.w	87092 <_svfprintf_r+0x732>
   87e1e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e22:	f7ff b84f 	b.w	86ec4 <_svfprintf_r+0x564>
   87e26:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   87e2a:	e679      	b.n	87b20 <_svfprintf_r+0x11c0>
   87e2c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e30:	f7ff b9b2 	b.w	87198 <_svfprintf_r+0x838>
   87e34:	f04f 32ff 	mov.w	r2, #4294967295
   87e38:	230c      	movs	r3, #12
   87e3a:	9209      	str	r2, [sp, #36]	; 0x24
   87e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87e3e:	6013      	str	r3, [r2, #0]
   87e40:	f7fe be74 	b.w	86b2c <_svfprintf_r+0x1cc>
   87e44:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e48:	f7ff b8c4 	b.w	86fd4 <_svfprintf_r+0x674>
   87e4c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   87e50:	f7ff b878 	b.w	86f44 <_svfprintf_r+0x5e4>
   87e54:	0008c730 	.word	0x0008c730
   87e58:	0008c6e8 	.word	0x0008c6e8
   87e5c:	0008c6e4 	.word	0x0008c6e4

00087e60 <__sprint_r.part.0>:
   87e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87e64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   87e66:	4693      	mov	fp, r2
   87e68:	049c      	lsls	r4, r3, #18
   87e6a:	d52f      	bpl.n	87ecc <__sprint_r.part.0+0x6c>
   87e6c:	6893      	ldr	r3, [r2, #8]
   87e6e:	6812      	ldr	r2, [r2, #0]
   87e70:	b353      	cbz	r3, 87ec8 <__sprint_r.part.0+0x68>
   87e72:	460e      	mov	r6, r1
   87e74:	4607      	mov	r7, r0
   87e76:	f102 0908 	add.w	r9, r2, #8
   87e7a:	e919 0420 	ldmdb	r9, {r5, sl}
   87e7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   87e82:	d017      	beq.n	87eb4 <__sprint_r.part.0+0x54>
   87e84:	2400      	movs	r4, #0
   87e86:	3d04      	subs	r5, #4
   87e88:	e001      	b.n	87e8e <__sprint_r.part.0+0x2e>
   87e8a:	45a0      	cmp	r8, r4
   87e8c:	d010      	beq.n	87eb0 <__sprint_r.part.0+0x50>
   87e8e:	4632      	mov	r2, r6
   87e90:	f855 1f04 	ldr.w	r1, [r5, #4]!
   87e94:	4638      	mov	r0, r7
   87e96:	f002 f86b 	bl	89f70 <_fputwc_r>
   87e9a:	1c43      	adds	r3, r0, #1
   87e9c:	f104 0401 	add.w	r4, r4, #1
   87ea0:	d1f3      	bne.n	87e8a <__sprint_r.part.0+0x2a>
   87ea2:	2300      	movs	r3, #0
   87ea4:	f8cb 3008 	str.w	r3, [fp, #8]
   87ea8:	f8cb 3004 	str.w	r3, [fp, #4]
   87eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87eb0:	f8db 3008 	ldr.w	r3, [fp, #8]
   87eb4:	f02a 0a03 	bic.w	sl, sl, #3
   87eb8:	eba3 030a 	sub.w	r3, r3, sl
   87ebc:	f8cb 3008 	str.w	r3, [fp, #8]
   87ec0:	f109 0908 	add.w	r9, r9, #8
   87ec4:	2b00      	cmp	r3, #0
   87ec6:	d1d8      	bne.n	87e7a <__sprint_r.part.0+0x1a>
   87ec8:	2000      	movs	r0, #0
   87eca:	e7ea      	b.n	87ea2 <__sprint_r.part.0+0x42>
   87ecc:	f002 f9ba 	bl	8a244 <__sfvwrite_r>
   87ed0:	2300      	movs	r3, #0
   87ed2:	f8cb 3008 	str.w	r3, [fp, #8]
   87ed6:	f8cb 3004 	str.w	r3, [fp, #4]
   87eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ede:	bf00      	nop

00087ee0 <_vfiprintf_r>:
   87ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ee4:	b0ad      	sub	sp, #180	; 0xb4
   87ee6:	461d      	mov	r5, r3
   87ee8:	468b      	mov	fp, r1
   87eea:	4690      	mov	r8, r2
   87eec:	9307      	str	r3, [sp, #28]
   87eee:	9006      	str	r0, [sp, #24]
   87ef0:	b118      	cbz	r0, 87efa <_vfiprintf_r+0x1a>
   87ef2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87ef4:	2b00      	cmp	r3, #0
   87ef6:	f000 80f3 	beq.w	880e0 <_vfiprintf_r+0x200>
   87efa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   87efe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   87f02:	07df      	lsls	r7, r3, #31
   87f04:	b281      	uxth	r1, r0
   87f06:	d402      	bmi.n	87f0e <_vfiprintf_r+0x2e>
   87f08:	058e      	lsls	r6, r1, #22
   87f0a:	f140 80fc 	bpl.w	88106 <_vfiprintf_r+0x226>
   87f0e:	048c      	lsls	r4, r1, #18
   87f10:	d40a      	bmi.n	87f28 <_vfiprintf_r+0x48>
   87f12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   87f16:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   87f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87f1e:	f8ab 100c 	strh.w	r1, [fp, #12]
   87f22:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   87f26:	b289      	uxth	r1, r1
   87f28:	0708      	lsls	r0, r1, #28
   87f2a:	f140 80b3 	bpl.w	88094 <_vfiprintf_r+0x1b4>
   87f2e:	f8db 3010 	ldr.w	r3, [fp, #16]
   87f32:	2b00      	cmp	r3, #0
   87f34:	f000 80ae 	beq.w	88094 <_vfiprintf_r+0x1b4>
   87f38:	f001 031a 	and.w	r3, r1, #26
   87f3c:	2b0a      	cmp	r3, #10
   87f3e:	f000 80b5 	beq.w	880ac <_vfiprintf_r+0x1cc>
   87f42:	2300      	movs	r3, #0
   87f44:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   87f48:	46d1      	mov	r9, sl
   87f4a:	930b      	str	r3, [sp, #44]	; 0x2c
   87f4c:	9303      	str	r3, [sp, #12]
   87f4e:	9311      	str	r3, [sp, #68]	; 0x44
   87f50:	9310      	str	r3, [sp, #64]	; 0x40
   87f52:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87f56:	f8cd b010 	str.w	fp, [sp, #16]
   87f5a:	f898 3000 	ldrb.w	r3, [r8]
   87f5e:	4644      	mov	r4, r8
   87f60:	b1fb      	cbz	r3, 87fa2 <_vfiprintf_r+0xc2>
   87f62:	2b25      	cmp	r3, #37	; 0x25
   87f64:	d102      	bne.n	87f6c <_vfiprintf_r+0x8c>
   87f66:	e01c      	b.n	87fa2 <_vfiprintf_r+0xc2>
   87f68:	2b25      	cmp	r3, #37	; 0x25
   87f6a:	d003      	beq.n	87f74 <_vfiprintf_r+0x94>
   87f6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87f70:	2b00      	cmp	r3, #0
   87f72:	d1f9      	bne.n	87f68 <_vfiprintf_r+0x88>
   87f74:	eba4 0508 	sub.w	r5, r4, r8
   87f78:	b19d      	cbz	r5, 87fa2 <_vfiprintf_r+0xc2>
   87f7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   87f7e:	3301      	adds	r3, #1
   87f80:	442a      	add	r2, r5
   87f82:	2b07      	cmp	r3, #7
   87f84:	f8c9 8000 	str.w	r8, [r9]
   87f88:	f8c9 5004 	str.w	r5, [r9, #4]
   87f8c:	9211      	str	r2, [sp, #68]	; 0x44
   87f8e:	9310      	str	r3, [sp, #64]	; 0x40
   87f90:	dd7a      	ble.n	88088 <_vfiprintf_r+0x1a8>
   87f92:	2a00      	cmp	r2, #0
   87f94:	f040 84b5 	bne.w	88902 <_vfiprintf_r+0xa22>
   87f98:	46d1      	mov	r9, sl
   87f9a:	9b03      	ldr	r3, [sp, #12]
   87f9c:	9210      	str	r2, [sp, #64]	; 0x40
   87f9e:	442b      	add	r3, r5
   87fa0:	9303      	str	r3, [sp, #12]
   87fa2:	7823      	ldrb	r3, [r4, #0]
   87fa4:	2b00      	cmp	r3, #0
   87fa6:	f000 83e5 	beq.w	88774 <_vfiprintf_r+0x894>
   87faa:	2000      	movs	r0, #0
   87fac:	f04f 0300 	mov.w	r3, #0
   87fb0:	f104 0801 	add.w	r8, r4, #1
   87fb4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   87fb8:	7862      	ldrb	r2, [r4, #1]
   87fba:	4606      	mov	r6, r0
   87fbc:	4605      	mov	r5, r0
   87fbe:	4603      	mov	r3, r0
   87fc0:	f04f 34ff 	mov.w	r4, #4294967295
   87fc4:	f108 0801 	add.w	r8, r8, #1
   87fc8:	f1a2 0120 	sub.w	r1, r2, #32
   87fcc:	2958      	cmp	r1, #88	; 0x58
   87fce:	f200 82d9 	bhi.w	88584 <_vfiprintf_r+0x6a4>
   87fd2:	e8df f011 	tbh	[pc, r1, lsl #1]
   87fd6:	0228      	.short	0x0228
   87fd8:	02d702d7 	.word	0x02d702d7
   87fdc:	02d70230 	.word	0x02d70230
   87fe0:	02d702d7 	.word	0x02d702d7
   87fe4:	02d702d7 	.word	0x02d702d7
   87fe8:	00a002d7 	.word	0x00a002d7
   87fec:	02d70288 	.word	0x02d70288
   87ff0:	02b800a8 	.word	0x02b800a8
   87ff4:	01a602d7 	.word	0x01a602d7
   87ff8:	01ab01ab 	.word	0x01ab01ab
   87ffc:	01ab01ab 	.word	0x01ab01ab
   88000:	01ab01ab 	.word	0x01ab01ab
   88004:	01ab01ab 	.word	0x01ab01ab
   88008:	02d701ab 	.word	0x02d701ab
   8800c:	02d702d7 	.word	0x02d702d7
   88010:	02d702d7 	.word	0x02d702d7
   88014:	02d702d7 	.word	0x02d702d7
   88018:	02d702d7 	.word	0x02d702d7
   8801c:	01b902d7 	.word	0x01b902d7
   88020:	02d702d7 	.word	0x02d702d7
   88024:	02d702d7 	.word	0x02d702d7
   88028:	02d702d7 	.word	0x02d702d7
   8802c:	02d702d7 	.word	0x02d702d7
   88030:	02d702d7 	.word	0x02d702d7
   88034:	02d7019e 	.word	0x02d7019e
   88038:	02d702d7 	.word	0x02d702d7
   8803c:	02d702d7 	.word	0x02d702d7
   88040:	02d701a2 	.word	0x02d701a2
   88044:	025a02d7 	.word	0x025a02d7
   88048:	02d702d7 	.word	0x02d702d7
   8804c:	02d702d7 	.word	0x02d702d7
   88050:	02d702d7 	.word	0x02d702d7
   88054:	02d702d7 	.word	0x02d702d7
   88058:	02d702d7 	.word	0x02d702d7
   8805c:	02220261 	.word	0x02220261
   88060:	02d702d7 	.word	0x02d702d7
   88064:	027602d7 	.word	0x027602d7
   88068:	02d70222 	.word	0x02d70222
   8806c:	027b02d7 	.word	0x027b02d7
   88070:	01fc02d7 	.word	0x01fc02d7
   88074:	02100189 	.word	0x02100189
   88078:	02d702d2 	.word	0x02d702d2
   8807c:	02d70295 	.word	0x02d70295
   88080:	02d700ad 	.word	0x02d700ad
   88084:	023502d7 	.word	0x023502d7
   88088:	f109 0908 	add.w	r9, r9, #8
   8808c:	9b03      	ldr	r3, [sp, #12]
   8808e:	442b      	add	r3, r5
   88090:	9303      	str	r3, [sp, #12]
   88092:	e786      	b.n	87fa2 <_vfiprintf_r+0xc2>
   88094:	4659      	mov	r1, fp
   88096:	9806      	ldr	r0, [sp, #24]
   88098:	f000 fdaa 	bl	88bf0 <__swsetup_r>
   8809c:	bb18      	cbnz	r0, 880e6 <_vfiprintf_r+0x206>
   8809e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   880a2:	f001 031a 	and.w	r3, r1, #26
   880a6:	2b0a      	cmp	r3, #10
   880a8:	f47f af4b 	bne.w	87f42 <_vfiprintf_r+0x62>
   880ac:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   880b0:	2b00      	cmp	r3, #0
   880b2:	f6ff af46 	blt.w	87f42 <_vfiprintf_r+0x62>
   880b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   880ba:	07db      	lsls	r3, r3, #31
   880bc:	d405      	bmi.n	880ca <_vfiprintf_r+0x1ea>
   880be:	058f      	lsls	r7, r1, #22
   880c0:	d403      	bmi.n	880ca <_vfiprintf_r+0x1ea>
   880c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   880c6:	f002 fa81 	bl	8a5cc <__retarget_lock_release_recursive>
   880ca:	462b      	mov	r3, r5
   880cc:	4642      	mov	r2, r8
   880ce:	4659      	mov	r1, fp
   880d0:	9806      	ldr	r0, [sp, #24]
   880d2:	f000 fd49 	bl	88b68 <__sbprintf>
   880d6:	9003      	str	r0, [sp, #12]
   880d8:	9803      	ldr	r0, [sp, #12]
   880da:	b02d      	add	sp, #180	; 0xb4
   880dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880e0:	f001 fea4 	bl	89e2c <__sinit>
   880e4:	e709      	b.n	87efa <_vfiprintf_r+0x1a>
   880e6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   880ea:	07d9      	lsls	r1, r3, #31
   880ec:	d404      	bmi.n	880f8 <_vfiprintf_r+0x218>
   880ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   880f2:	059a      	lsls	r2, r3, #22
   880f4:	f140 84ae 	bpl.w	88a54 <_vfiprintf_r+0xb74>
   880f8:	f04f 33ff 	mov.w	r3, #4294967295
   880fc:	9303      	str	r3, [sp, #12]
   880fe:	9803      	ldr	r0, [sp, #12]
   88100:	b02d      	add	sp, #180	; 0xb4
   88102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88106:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8810a:	f002 fa5d 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   8810e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   88112:	b281      	uxth	r1, r0
   88114:	e6fb      	b.n	87f0e <_vfiprintf_r+0x2e>
   88116:	9907      	ldr	r1, [sp, #28]
   88118:	460a      	mov	r2, r1
   8811a:	680d      	ldr	r5, [r1, #0]
   8811c:	3204      	adds	r2, #4
   8811e:	2d00      	cmp	r5, #0
   88120:	9207      	str	r2, [sp, #28]
   88122:	da02      	bge.n	8812a <_vfiprintf_r+0x24a>
   88124:	426d      	negs	r5, r5
   88126:	f043 0304 	orr.w	r3, r3, #4
   8812a:	f898 2000 	ldrb.w	r2, [r8]
   8812e:	e749      	b.n	87fc4 <_vfiprintf_r+0xe4>
   88130:	9508      	str	r5, [sp, #32]
   88132:	069e      	lsls	r6, r3, #26
   88134:	f100 845a 	bmi.w	889ec <_vfiprintf_r+0xb0c>
   88138:	9907      	ldr	r1, [sp, #28]
   8813a:	06dd      	lsls	r5, r3, #27
   8813c:	460a      	mov	r2, r1
   8813e:	f100 83ef 	bmi.w	88920 <_vfiprintf_r+0xa40>
   88142:	0658      	lsls	r0, r3, #25
   88144:	f140 83ec 	bpl.w	88920 <_vfiprintf_r+0xa40>
   88148:	2700      	movs	r7, #0
   8814a:	2201      	movs	r2, #1
   8814c:	880e      	ldrh	r6, [r1, #0]
   8814e:	3104      	adds	r1, #4
   88150:	9107      	str	r1, [sp, #28]
   88152:	f04f 0100 	mov.w	r1, #0
   88156:	2500      	movs	r5, #0
   88158:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   8815c:	1c61      	adds	r1, r4, #1
   8815e:	f000 8117 	beq.w	88390 <_vfiprintf_r+0x4b0>
   88162:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   88166:	9102      	str	r1, [sp, #8]
   88168:	ea56 0107 	orrs.w	r1, r6, r7
   8816c:	f040 8115 	bne.w	8839a <_vfiprintf_r+0x4ba>
   88170:	2c00      	cmp	r4, #0
   88172:	f040 835b 	bne.w	8882c <_vfiprintf_r+0x94c>
   88176:	2a00      	cmp	r2, #0
   88178:	f040 83b6 	bne.w	888e8 <_vfiprintf_r+0xa08>
   8817c:	f013 0301 	ands.w	r3, r3, #1
   88180:	9305      	str	r3, [sp, #20]
   88182:	f000 8455 	beq.w	88a30 <_vfiprintf_r+0xb50>
   88186:	2330      	movs	r3, #48	; 0x30
   88188:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8818c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   88190:	9b05      	ldr	r3, [sp, #20]
   88192:	42a3      	cmp	r3, r4
   88194:	bfb8      	it	lt
   88196:	4623      	movlt	r3, r4
   88198:	9301      	str	r3, [sp, #4]
   8819a:	b10d      	cbz	r5, 881a0 <_vfiprintf_r+0x2c0>
   8819c:	3301      	adds	r3, #1
   8819e:	9301      	str	r3, [sp, #4]
   881a0:	9b02      	ldr	r3, [sp, #8]
   881a2:	f013 0302 	ands.w	r3, r3, #2
   881a6:	9309      	str	r3, [sp, #36]	; 0x24
   881a8:	d002      	beq.n	881b0 <_vfiprintf_r+0x2d0>
   881aa:	9b01      	ldr	r3, [sp, #4]
   881ac:	3302      	adds	r3, #2
   881ae:	9301      	str	r3, [sp, #4]
   881b0:	9b02      	ldr	r3, [sp, #8]
   881b2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   881b6:	930a      	str	r3, [sp, #40]	; 0x28
   881b8:	f040 8215 	bne.w	885e6 <_vfiprintf_r+0x706>
   881bc:	9b08      	ldr	r3, [sp, #32]
   881be:	9a01      	ldr	r2, [sp, #4]
   881c0:	1a9d      	subs	r5, r3, r2
   881c2:	2d00      	cmp	r5, #0
   881c4:	f340 820f 	ble.w	885e6 <_vfiprintf_r+0x706>
   881c8:	2d10      	cmp	r5, #16
   881ca:	f340 8484 	ble.w	88ad6 <_vfiprintf_r+0xbf6>
   881ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   881d0:	46ce      	mov	lr, r9
   881d2:	2710      	movs	r7, #16
   881d4:	46a1      	mov	r9, r4
   881d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   881d8:	4ec5      	ldr	r6, [pc, #788]	; (884f0 <_vfiprintf_r+0x610>)
   881da:	4619      	mov	r1, r3
   881dc:	9c06      	ldr	r4, [sp, #24]
   881de:	e007      	b.n	881f0 <_vfiprintf_r+0x310>
   881e0:	f101 0c02 	add.w	ip, r1, #2
   881e4:	4601      	mov	r1, r0
   881e6:	f10e 0e08 	add.w	lr, lr, #8
   881ea:	3d10      	subs	r5, #16
   881ec:	2d10      	cmp	r5, #16
   881ee:	dd11      	ble.n	88214 <_vfiprintf_r+0x334>
   881f0:	1c48      	adds	r0, r1, #1
   881f2:	3210      	adds	r2, #16
   881f4:	2807      	cmp	r0, #7
   881f6:	9211      	str	r2, [sp, #68]	; 0x44
   881f8:	e88e 00c0 	stmia.w	lr, {r6, r7}
   881fc:	9010      	str	r0, [sp, #64]	; 0x40
   881fe:	ddef      	ble.n	881e0 <_vfiprintf_r+0x300>
   88200:	2a00      	cmp	r2, #0
   88202:	f040 81d9 	bne.w	885b8 <_vfiprintf_r+0x6d8>
   88206:	3d10      	subs	r5, #16
   88208:	2d10      	cmp	r5, #16
   8820a:	4611      	mov	r1, r2
   8820c:	f04f 0c01 	mov.w	ip, #1
   88210:	46d6      	mov	lr, sl
   88212:	dced      	bgt.n	881f0 <_vfiprintf_r+0x310>
   88214:	464c      	mov	r4, r9
   88216:	4661      	mov	r1, ip
   88218:	46f1      	mov	r9, lr
   8821a:	442a      	add	r2, r5
   8821c:	2907      	cmp	r1, #7
   8821e:	9211      	str	r2, [sp, #68]	; 0x44
   88220:	f8c9 6000 	str.w	r6, [r9]
   88224:	f8c9 5004 	str.w	r5, [r9, #4]
   88228:	9110      	str	r1, [sp, #64]	; 0x40
   8822a:	f300 82eb 	bgt.w	88804 <_vfiprintf_r+0x924>
   8822e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88232:	f109 0908 	add.w	r9, r9, #8
   88236:	1c48      	adds	r0, r1, #1
   88238:	2d00      	cmp	r5, #0
   8823a:	f040 81dc 	bne.w	885f6 <_vfiprintf_r+0x716>
   8823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88240:	2b00      	cmp	r3, #0
   88242:	f000 81f6 	beq.w	88632 <_vfiprintf_r+0x752>
   88246:	2102      	movs	r1, #2
   88248:	ab0e      	add	r3, sp, #56	; 0x38
   8824a:	440a      	add	r2, r1
   8824c:	2807      	cmp	r0, #7
   8824e:	9211      	str	r2, [sp, #68]	; 0x44
   88250:	9010      	str	r0, [sp, #64]	; 0x40
   88252:	f8c9 1004 	str.w	r1, [r9, #4]
   88256:	f8c9 3000 	str.w	r3, [r9]
   8825a:	f340 81e6 	ble.w	8862a <_vfiprintf_r+0x74a>
   8825e:	2a00      	cmp	r2, #0
   88260:	f040 8395 	bne.w	8898e <_vfiprintf_r+0xaae>
   88264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88266:	2001      	movs	r0, #1
   88268:	2b80      	cmp	r3, #128	; 0x80
   8826a:	4611      	mov	r1, r2
   8826c:	46d1      	mov	r9, sl
   8826e:	f040 81e4 	bne.w	8863a <_vfiprintf_r+0x75a>
   88272:	9b08      	ldr	r3, [sp, #32]
   88274:	9d01      	ldr	r5, [sp, #4]
   88276:	1b5e      	subs	r6, r3, r5
   88278:	2e00      	cmp	r6, #0
   8827a:	f340 81de 	ble.w	8863a <_vfiprintf_r+0x75a>
   8827e:	2e10      	cmp	r6, #16
   88280:	f340 843c 	ble.w	88afc <_vfiprintf_r+0xc1c>
   88284:	46cc      	mov	ip, r9
   88286:	2710      	movs	r7, #16
   88288:	46a1      	mov	r9, r4
   8828a:	4d9a      	ldr	r5, [pc, #616]	; (884f4 <_vfiprintf_r+0x614>)
   8828c:	9c06      	ldr	r4, [sp, #24]
   8828e:	e007      	b.n	882a0 <_vfiprintf_r+0x3c0>
   88290:	f101 0e02 	add.w	lr, r1, #2
   88294:	4601      	mov	r1, r0
   88296:	f10c 0c08 	add.w	ip, ip, #8
   8829a:	3e10      	subs	r6, #16
   8829c:	2e10      	cmp	r6, #16
   8829e:	dd11      	ble.n	882c4 <_vfiprintf_r+0x3e4>
   882a0:	1c48      	adds	r0, r1, #1
   882a2:	3210      	adds	r2, #16
   882a4:	2807      	cmp	r0, #7
   882a6:	9211      	str	r2, [sp, #68]	; 0x44
   882a8:	e88c 00a0 	stmia.w	ip, {r5, r7}
   882ac:	9010      	str	r0, [sp, #64]	; 0x40
   882ae:	ddef      	ble.n	88290 <_vfiprintf_r+0x3b0>
   882b0:	2a00      	cmp	r2, #0
   882b2:	f040 829b 	bne.w	887ec <_vfiprintf_r+0x90c>
   882b6:	3e10      	subs	r6, #16
   882b8:	2e10      	cmp	r6, #16
   882ba:	f04f 0e01 	mov.w	lr, #1
   882be:	4611      	mov	r1, r2
   882c0:	46d4      	mov	ip, sl
   882c2:	dced      	bgt.n	882a0 <_vfiprintf_r+0x3c0>
   882c4:	464c      	mov	r4, r9
   882c6:	46e1      	mov	r9, ip
   882c8:	4432      	add	r2, r6
   882ca:	f1be 0f07 	cmp.w	lr, #7
   882ce:	9211      	str	r2, [sp, #68]	; 0x44
   882d0:	e889 0060 	stmia.w	r9, {r5, r6}
   882d4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   882d8:	f300 8366 	bgt.w	889a8 <_vfiprintf_r+0xac8>
   882dc:	f109 0908 	add.w	r9, r9, #8
   882e0:	f10e 0001 	add.w	r0, lr, #1
   882e4:	4671      	mov	r1, lr
   882e6:	e1a8      	b.n	8863a <_vfiprintf_r+0x75a>
   882e8:	9508      	str	r5, [sp, #32]
   882ea:	f013 0220 	ands.w	r2, r3, #32
   882ee:	f040 8389 	bne.w	88a04 <_vfiprintf_r+0xb24>
   882f2:	f013 0110 	ands.w	r1, r3, #16
   882f6:	f040 8319 	bne.w	8892c <_vfiprintf_r+0xa4c>
   882fa:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   882fe:	f000 8315 	beq.w	8892c <_vfiprintf_r+0xa4c>
   88302:	9807      	ldr	r0, [sp, #28]
   88304:	460a      	mov	r2, r1
   88306:	4601      	mov	r1, r0
   88308:	3104      	adds	r1, #4
   8830a:	8806      	ldrh	r6, [r0, #0]
   8830c:	2700      	movs	r7, #0
   8830e:	9107      	str	r1, [sp, #28]
   88310:	e71f      	b.n	88152 <_vfiprintf_r+0x272>
   88312:	9508      	str	r5, [sp, #32]
   88314:	f043 0310 	orr.w	r3, r3, #16
   88318:	e7e7      	b.n	882ea <_vfiprintf_r+0x40a>
   8831a:	9508      	str	r5, [sp, #32]
   8831c:	f043 0310 	orr.w	r3, r3, #16
   88320:	e707      	b.n	88132 <_vfiprintf_r+0x252>
   88322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   88326:	f898 2000 	ldrb.w	r2, [r8]
   8832a:	e64b      	b.n	87fc4 <_vfiprintf_r+0xe4>
   8832c:	2500      	movs	r5, #0
   8832e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88332:	f818 2b01 	ldrb.w	r2, [r8], #1
   88336:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8833a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8833e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88342:	2909      	cmp	r1, #9
   88344:	d9f5      	bls.n	88332 <_vfiprintf_r+0x452>
   88346:	e63f      	b.n	87fc8 <_vfiprintf_r+0xe8>
   88348:	9508      	str	r5, [sp, #32]
   8834a:	2800      	cmp	r0, #0
   8834c:	f040 8402 	bne.w	88b54 <_vfiprintf_r+0xc74>
   88350:	f043 0310 	orr.w	r3, r3, #16
   88354:	069e      	lsls	r6, r3, #26
   88356:	f100 833d 	bmi.w	889d4 <_vfiprintf_r+0xaf4>
   8835a:	9907      	ldr	r1, [sp, #28]
   8835c:	06dd      	lsls	r5, r3, #27
   8835e:	460a      	mov	r2, r1
   88360:	f100 82f0 	bmi.w	88944 <_vfiprintf_r+0xa64>
   88364:	0658      	lsls	r0, r3, #25
   88366:	f140 82ed 	bpl.w	88944 <_vfiprintf_r+0xa64>
   8836a:	f9b1 6000 	ldrsh.w	r6, [r1]
   8836e:	3204      	adds	r2, #4
   88370:	17f7      	asrs	r7, r6, #31
   88372:	4630      	mov	r0, r6
   88374:	4639      	mov	r1, r7
   88376:	9207      	str	r2, [sp, #28]
   88378:	2800      	cmp	r0, #0
   8837a:	f171 0200 	sbcs.w	r2, r1, #0
   8837e:	f2c0 835a 	blt.w	88a36 <_vfiprintf_r+0xb56>
   88382:	1c61      	adds	r1, r4, #1
   88384:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88388:	f04f 0201 	mov.w	r2, #1
   8838c:	f47f aee9 	bne.w	88162 <_vfiprintf_r+0x282>
   88390:	ea56 0107 	orrs.w	r1, r6, r7
   88394:	f000 824b 	beq.w	8882e <_vfiprintf_r+0x94e>
   88398:	9302      	str	r3, [sp, #8]
   8839a:	2a01      	cmp	r2, #1
   8839c:	f000 828a 	beq.w	888b4 <_vfiprintf_r+0x9d4>
   883a0:	2a02      	cmp	r2, #2
   883a2:	f040 825a 	bne.w	8885a <_vfiprintf_r+0x97a>
   883a6:	46d3      	mov	fp, sl
   883a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   883aa:	0933      	lsrs	r3, r6, #4
   883ac:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   883b0:	0939      	lsrs	r1, r7, #4
   883b2:	f006 020f 	and.w	r2, r6, #15
   883b6:	460f      	mov	r7, r1
   883b8:	461e      	mov	r6, r3
   883ba:	5c83      	ldrb	r3, [r0, r2]
   883bc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   883c0:	ea56 0307 	orrs.w	r3, r6, r7
   883c4:	d1f1      	bne.n	883aa <_vfiprintf_r+0x4ca>
   883c6:	ebaa 030b 	sub.w	r3, sl, fp
   883ca:	9305      	str	r3, [sp, #20]
   883cc:	e6e0      	b.n	88190 <_vfiprintf_r+0x2b0>
   883ce:	2800      	cmp	r0, #0
   883d0:	f040 83bd 	bne.w	88b4e <_vfiprintf_r+0xc6e>
   883d4:	0699      	lsls	r1, r3, #26
   883d6:	f100 8359 	bmi.w	88a8c <_vfiprintf_r+0xbac>
   883da:	06da      	lsls	r2, r3, #27
   883dc:	f100 80e5 	bmi.w	885aa <_vfiprintf_r+0x6ca>
   883e0:	065b      	lsls	r3, r3, #25
   883e2:	f140 80e2 	bpl.w	885aa <_vfiprintf_r+0x6ca>
   883e6:	9a07      	ldr	r2, [sp, #28]
   883e8:	6813      	ldr	r3, [r2, #0]
   883ea:	3204      	adds	r2, #4
   883ec:	9207      	str	r2, [sp, #28]
   883ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   883f2:	801a      	strh	r2, [r3, #0]
   883f4:	e5b1      	b.n	87f5a <_vfiprintf_r+0x7a>
   883f6:	2278      	movs	r2, #120	; 0x78
   883f8:	2130      	movs	r1, #48	; 0x30
   883fa:	9508      	str	r5, [sp, #32]
   883fc:	9d07      	ldr	r5, [sp, #28]
   883fe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   88402:	1d2a      	adds	r2, r5, #4
   88404:	9207      	str	r2, [sp, #28]
   88406:	4a3c      	ldr	r2, [pc, #240]	; (884f8 <_vfiprintf_r+0x618>)
   88408:	682e      	ldr	r6, [r5, #0]
   8840a:	920b      	str	r2, [sp, #44]	; 0x2c
   8840c:	f043 0302 	orr.w	r3, r3, #2
   88410:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   88414:	2700      	movs	r7, #0
   88416:	2202      	movs	r2, #2
   88418:	e69b      	b.n	88152 <_vfiprintf_r+0x272>
   8841a:	9508      	str	r5, [sp, #32]
   8841c:	2800      	cmp	r0, #0
   8841e:	d099      	beq.n	88354 <_vfiprintf_r+0x474>
   88420:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88424:	e796      	b.n	88354 <_vfiprintf_r+0x474>
   88426:	f898 2000 	ldrb.w	r2, [r8]
   8842a:	2e00      	cmp	r6, #0
   8842c:	f47f adca 	bne.w	87fc4 <_vfiprintf_r+0xe4>
   88430:	2001      	movs	r0, #1
   88432:	2620      	movs	r6, #32
   88434:	e5c6      	b.n	87fc4 <_vfiprintf_r+0xe4>
   88436:	f043 0301 	orr.w	r3, r3, #1
   8843a:	f898 2000 	ldrb.w	r2, [r8]
   8843e:	e5c1      	b.n	87fc4 <_vfiprintf_r+0xe4>
   88440:	9508      	str	r5, [sp, #32]
   88442:	2800      	cmp	r0, #0
   88444:	f040 8380 	bne.w	88b48 <_vfiprintf_r+0xc68>
   88448:	492b      	ldr	r1, [pc, #172]	; (884f8 <_vfiprintf_r+0x618>)
   8844a:	910b      	str	r1, [sp, #44]	; 0x2c
   8844c:	069f      	lsls	r7, r3, #26
   8844e:	f100 82e5 	bmi.w	88a1c <_vfiprintf_r+0xb3c>
   88452:	9807      	ldr	r0, [sp, #28]
   88454:	06de      	lsls	r6, r3, #27
   88456:	4601      	mov	r1, r0
   88458:	f100 826f 	bmi.w	8893a <_vfiprintf_r+0xa5a>
   8845c:	065d      	lsls	r5, r3, #25
   8845e:	f140 826c 	bpl.w	8893a <_vfiprintf_r+0xa5a>
   88462:	2700      	movs	r7, #0
   88464:	3104      	adds	r1, #4
   88466:	8806      	ldrh	r6, [r0, #0]
   88468:	9107      	str	r1, [sp, #28]
   8846a:	07d8      	lsls	r0, r3, #31
   8846c:	f140 8220 	bpl.w	888b0 <_vfiprintf_r+0x9d0>
   88470:	ea56 0107 	orrs.w	r1, r6, r7
   88474:	f000 821c 	beq.w	888b0 <_vfiprintf_r+0x9d0>
   88478:	2130      	movs	r1, #48	; 0x30
   8847a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8847e:	f043 0302 	orr.w	r3, r3, #2
   88482:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   88486:	2202      	movs	r2, #2
   88488:	e663      	b.n	88152 <_vfiprintf_r+0x272>
   8848a:	9508      	str	r5, [sp, #32]
   8848c:	2800      	cmp	r0, #0
   8848e:	f040 8355 	bne.w	88b3c <_vfiprintf_r+0xc5c>
   88492:	491a      	ldr	r1, [pc, #104]	; (884fc <_vfiprintf_r+0x61c>)
   88494:	910b      	str	r1, [sp, #44]	; 0x2c
   88496:	e7d9      	b.n	8844c <_vfiprintf_r+0x56c>
   88498:	2201      	movs	r2, #1
   8849a:	9807      	ldr	r0, [sp, #28]
   8849c:	4611      	mov	r1, r2
   8849e:	9201      	str	r2, [sp, #4]
   884a0:	6802      	ldr	r2, [r0, #0]
   884a2:	f04f 0400 	mov.w	r4, #0
   884a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   884aa:	4602      	mov	r2, r0
   884ac:	3204      	adds	r2, #4
   884ae:	9508      	str	r5, [sp, #32]
   884b0:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   884b4:	9105      	str	r1, [sp, #20]
   884b6:	9207      	str	r2, [sp, #28]
   884b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   884bc:	9302      	str	r3, [sp, #8]
   884be:	2400      	movs	r4, #0
   884c0:	e66e      	b.n	881a0 <_vfiprintf_r+0x2c0>
   884c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   884c6:	f898 2000 	ldrb.w	r2, [r8]
   884ca:	e57b      	b.n	87fc4 <_vfiprintf_r+0xe4>
   884cc:	f898 2000 	ldrb.w	r2, [r8]
   884d0:	2a6c      	cmp	r2, #108	; 0x6c
   884d2:	bf03      	ittte	eq
   884d4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   884d8:	f043 0320 	orreq.w	r3, r3, #32
   884dc:	f108 0801 	addeq.w	r8, r8, #1
   884e0:	f043 0310 	orrne.w	r3, r3, #16
   884e4:	e56e      	b.n	87fc4 <_vfiprintf_r+0xe4>
   884e6:	f898 2000 	ldrb.w	r2, [r8]
   884ea:	2001      	movs	r0, #1
   884ec:	262b      	movs	r6, #43	; 0x2b
   884ee:	e569      	b.n	87fc4 <_vfiprintf_r+0xe4>
   884f0:	0008c740 	.word	0x0008c740
   884f4:	0008c750 	.word	0x0008c750
   884f8:	0008c700 	.word	0x0008c700
   884fc:	0008c6ec 	.word	0x0008c6ec
   88500:	f04f 0200 	mov.w	r2, #0
   88504:	9907      	ldr	r1, [sp, #28]
   88506:	9508      	str	r5, [sp, #32]
   88508:	f8d1 b000 	ldr.w	fp, [r1]
   8850c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88510:	1d0d      	adds	r5, r1, #4
   88512:	f1bb 0f00 	cmp.w	fp, #0
   88516:	f000 82e4 	beq.w	88ae2 <_vfiprintf_r+0xc02>
   8851a:	1c67      	adds	r7, r4, #1
   8851c:	f000 82c3 	beq.w	88aa6 <_vfiprintf_r+0xbc6>
   88520:	4622      	mov	r2, r4
   88522:	2100      	movs	r1, #0
   88524:	4658      	mov	r0, fp
   88526:	9301      	str	r3, [sp, #4]
   88528:	f002 fb8a 	bl	8ac40 <memchr>
   8852c:	9b01      	ldr	r3, [sp, #4]
   8852e:	2800      	cmp	r0, #0
   88530:	f000 82e8 	beq.w	88b04 <_vfiprintf_r+0xc24>
   88534:	eba0 020b 	sub.w	r2, r0, fp
   88538:	9507      	str	r5, [sp, #28]
   8853a:	9205      	str	r2, [sp, #20]
   8853c:	9302      	str	r3, [sp, #8]
   8853e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88542:	2400      	movs	r4, #0
   88544:	e624      	b.n	88190 <_vfiprintf_r+0x2b0>
   88546:	f898 2000 	ldrb.w	r2, [r8]
   8854a:	f108 0701 	add.w	r7, r8, #1
   8854e:	2a2a      	cmp	r2, #42	; 0x2a
   88550:	f000 82e9 	beq.w	88b26 <_vfiprintf_r+0xc46>
   88554:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88558:	2909      	cmp	r1, #9
   8855a:	46b8      	mov	r8, r7
   8855c:	f04f 0400 	mov.w	r4, #0
   88560:	f63f ad32 	bhi.w	87fc8 <_vfiprintf_r+0xe8>
   88564:	f818 2b01 	ldrb.w	r2, [r8], #1
   88568:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8856c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   88570:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88574:	2909      	cmp	r1, #9
   88576:	d9f5      	bls.n	88564 <_vfiprintf_r+0x684>
   88578:	e526      	b.n	87fc8 <_vfiprintf_r+0xe8>
   8857a:	f043 0320 	orr.w	r3, r3, #32
   8857e:	f898 2000 	ldrb.w	r2, [r8]
   88582:	e51f      	b.n	87fc4 <_vfiprintf_r+0xe4>
   88584:	9508      	str	r5, [sp, #32]
   88586:	2800      	cmp	r0, #0
   88588:	f040 82db 	bne.w	88b42 <_vfiprintf_r+0xc62>
   8858c:	2a00      	cmp	r2, #0
   8858e:	f000 80f1 	beq.w	88774 <_vfiprintf_r+0x894>
   88592:	2101      	movs	r1, #1
   88594:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88598:	f04f 0200 	mov.w	r2, #0
   8859c:	9101      	str	r1, [sp, #4]
   8859e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   885a2:	9105      	str	r1, [sp, #20]
   885a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   885a8:	e788      	b.n	884bc <_vfiprintf_r+0x5dc>
   885aa:	9a07      	ldr	r2, [sp, #28]
   885ac:	6813      	ldr	r3, [r2, #0]
   885ae:	3204      	adds	r2, #4
   885b0:	9207      	str	r2, [sp, #28]
   885b2:	9a03      	ldr	r2, [sp, #12]
   885b4:	601a      	str	r2, [r3, #0]
   885b6:	e4d0      	b.n	87f5a <_vfiprintf_r+0x7a>
   885b8:	aa0f      	add	r2, sp, #60	; 0x3c
   885ba:	9904      	ldr	r1, [sp, #16]
   885bc:	4620      	mov	r0, r4
   885be:	f7ff fc4f 	bl	87e60 <__sprint_r.part.0>
   885c2:	2800      	cmp	r0, #0
   885c4:	f040 8143 	bne.w	8884e <_vfiprintf_r+0x96e>
   885c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   885ca:	46d6      	mov	lr, sl
   885cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   885ce:	f101 0c01 	add.w	ip, r1, #1
   885d2:	e60a      	b.n	881ea <_vfiprintf_r+0x30a>
   885d4:	aa0f      	add	r2, sp, #60	; 0x3c
   885d6:	9904      	ldr	r1, [sp, #16]
   885d8:	9806      	ldr	r0, [sp, #24]
   885da:	f7ff fc41 	bl	87e60 <__sprint_r.part.0>
   885de:	2800      	cmp	r0, #0
   885e0:	f040 8135 	bne.w	8884e <_vfiprintf_r+0x96e>
   885e4:	46d1      	mov	r9, sl
   885e6:	9910      	ldr	r1, [sp, #64]	; 0x40
   885e8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   885ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   885ee:	1c48      	adds	r0, r1, #1
   885f0:	2d00      	cmp	r5, #0
   885f2:	f43f ae24 	beq.w	8823e <_vfiprintf_r+0x35e>
   885f6:	2101      	movs	r1, #1
   885f8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   885fc:	440a      	add	r2, r1
   885fe:	2807      	cmp	r0, #7
   88600:	9211      	str	r2, [sp, #68]	; 0x44
   88602:	9010      	str	r0, [sp, #64]	; 0x40
   88604:	f8c9 1004 	str.w	r1, [r9, #4]
   88608:	f8c9 5000 	str.w	r5, [r9]
   8860c:	f340 8109 	ble.w	88822 <_vfiprintf_r+0x942>
   88610:	2a00      	cmp	r2, #0
   88612:	f040 81af 	bne.w	88974 <_vfiprintf_r+0xa94>
   88616:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88618:	2b00      	cmp	r3, #0
   8861a:	f43f ae23 	beq.w	88264 <_vfiprintf_r+0x384>
   8861e:	2202      	movs	r2, #2
   88620:	4608      	mov	r0, r1
   88622:	46d1      	mov	r9, sl
   88624:	ab0e      	add	r3, sp, #56	; 0x38
   88626:	921d      	str	r2, [sp, #116]	; 0x74
   88628:	931c      	str	r3, [sp, #112]	; 0x70
   8862a:	4601      	mov	r1, r0
   8862c:	f109 0908 	add.w	r9, r9, #8
   88630:	3001      	adds	r0, #1
   88632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88634:	2b80      	cmp	r3, #128	; 0x80
   88636:	f43f ae1c 	beq.w	88272 <_vfiprintf_r+0x392>
   8863a:	9b05      	ldr	r3, [sp, #20]
   8863c:	1ae4      	subs	r4, r4, r3
   8863e:	2c00      	cmp	r4, #0
   88640:	dd2f      	ble.n	886a2 <_vfiprintf_r+0x7c2>
   88642:	2c10      	cmp	r4, #16
   88644:	f340 8220 	ble.w	88a88 <_vfiprintf_r+0xba8>
   88648:	46ce      	mov	lr, r9
   8864a:	2610      	movs	r6, #16
   8864c:	4db2      	ldr	r5, [pc, #712]	; (88918 <_vfiprintf_r+0xa38>)
   8864e:	9f06      	ldr	r7, [sp, #24]
   88650:	f8dd 9010 	ldr.w	r9, [sp, #16]
   88654:	e006      	b.n	88664 <_vfiprintf_r+0x784>
   88656:	1c88      	adds	r0, r1, #2
   88658:	4619      	mov	r1, r3
   8865a:	f10e 0e08 	add.w	lr, lr, #8
   8865e:	3c10      	subs	r4, #16
   88660:	2c10      	cmp	r4, #16
   88662:	dd10      	ble.n	88686 <_vfiprintf_r+0x7a6>
   88664:	1c4b      	adds	r3, r1, #1
   88666:	3210      	adds	r2, #16
   88668:	2b07      	cmp	r3, #7
   8866a:	9211      	str	r2, [sp, #68]	; 0x44
   8866c:	e88e 0060 	stmia.w	lr, {r5, r6}
   88670:	9310      	str	r3, [sp, #64]	; 0x40
   88672:	ddf0      	ble.n	88656 <_vfiprintf_r+0x776>
   88674:	2a00      	cmp	r2, #0
   88676:	d165      	bne.n	88744 <_vfiprintf_r+0x864>
   88678:	3c10      	subs	r4, #16
   8867a:	2c10      	cmp	r4, #16
   8867c:	f04f 0001 	mov.w	r0, #1
   88680:	4611      	mov	r1, r2
   88682:	46d6      	mov	lr, sl
   88684:	dcee      	bgt.n	88664 <_vfiprintf_r+0x784>
   88686:	46f1      	mov	r9, lr
   88688:	4422      	add	r2, r4
   8868a:	2807      	cmp	r0, #7
   8868c:	9211      	str	r2, [sp, #68]	; 0x44
   8868e:	f8c9 5000 	str.w	r5, [r9]
   88692:	f8c9 4004 	str.w	r4, [r9, #4]
   88696:	9010      	str	r0, [sp, #64]	; 0x40
   88698:	f300 8085 	bgt.w	887a6 <_vfiprintf_r+0x8c6>
   8869c:	f109 0908 	add.w	r9, r9, #8
   886a0:	3001      	adds	r0, #1
   886a2:	9905      	ldr	r1, [sp, #20]
   886a4:	2807      	cmp	r0, #7
   886a6:	440a      	add	r2, r1
   886a8:	9211      	str	r2, [sp, #68]	; 0x44
   886aa:	f8c9 b000 	str.w	fp, [r9]
   886ae:	f8c9 1004 	str.w	r1, [r9, #4]
   886b2:	9010      	str	r0, [sp, #64]	; 0x40
   886b4:	f340 8082 	ble.w	887bc <_vfiprintf_r+0x8dc>
   886b8:	2a00      	cmp	r2, #0
   886ba:	f040 8118 	bne.w	888ee <_vfiprintf_r+0xa0e>
   886be:	9b02      	ldr	r3, [sp, #8]
   886c0:	9210      	str	r2, [sp, #64]	; 0x40
   886c2:	0758      	lsls	r0, r3, #29
   886c4:	d535      	bpl.n	88732 <_vfiprintf_r+0x852>
   886c6:	9b08      	ldr	r3, [sp, #32]
   886c8:	9901      	ldr	r1, [sp, #4]
   886ca:	1a5c      	subs	r4, r3, r1
   886cc:	2c00      	cmp	r4, #0
   886ce:	f340 80e7 	ble.w	888a0 <_vfiprintf_r+0x9c0>
   886d2:	46d1      	mov	r9, sl
   886d4:	2c10      	cmp	r4, #16
   886d6:	f340 820d 	ble.w	88af4 <_vfiprintf_r+0xc14>
   886da:	2510      	movs	r5, #16
   886dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   886de:	4e8f      	ldr	r6, [pc, #572]	; (8891c <_vfiprintf_r+0xa3c>)
   886e0:	9f06      	ldr	r7, [sp, #24]
   886e2:	f8dd b010 	ldr.w	fp, [sp, #16]
   886e6:	e006      	b.n	886f6 <_vfiprintf_r+0x816>
   886e8:	1c88      	adds	r0, r1, #2
   886ea:	4619      	mov	r1, r3
   886ec:	f109 0908 	add.w	r9, r9, #8
   886f0:	3c10      	subs	r4, #16
   886f2:	2c10      	cmp	r4, #16
   886f4:	dd11      	ble.n	8871a <_vfiprintf_r+0x83a>
   886f6:	1c4b      	adds	r3, r1, #1
   886f8:	3210      	adds	r2, #16
   886fa:	2b07      	cmp	r3, #7
   886fc:	9211      	str	r2, [sp, #68]	; 0x44
   886fe:	f8c9 6000 	str.w	r6, [r9]
   88702:	f8c9 5004 	str.w	r5, [r9, #4]
   88706:	9310      	str	r3, [sp, #64]	; 0x40
   88708:	ddee      	ble.n	886e8 <_vfiprintf_r+0x808>
   8870a:	bb42      	cbnz	r2, 8875e <_vfiprintf_r+0x87e>
   8870c:	3c10      	subs	r4, #16
   8870e:	2c10      	cmp	r4, #16
   88710:	f04f 0001 	mov.w	r0, #1
   88714:	4611      	mov	r1, r2
   88716:	46d1      	mov	r9, sl
   88718:	dced      	bgt.n	886f6 <_vfiprintf_r+0x816>
   8871a:	4422      	add	r2, r4
   8871c:	2807      	cmp	r0, #7
   8871e:	9211      	str	r2, [sp, #68]	; 0x44
   88720:	f8c9 6000 	str.w	r6, [r9]
   88724:	f8c9 4004 	str.w	r4, [r9, #4]
   88728:	9010      	str	r0, [sp, #64]	; 0x40
   8872a:	dd51      	ble.n	887d0 <_vfiprintf_r+0x8f0>
   8872c:	2a00      	cmp	r2, #0
   8872e:	f040 819a 	bne.w	88a66 <_vfiprintf_r+0xb86>
   88732:	9b03      	ldr	r3, [sp, #12]
   88734:	9a08      	ldr	r2, [sp, #32]
   88736:	9901      	ldr	r1, [sp, #4]
   88738:	428a      	cmp	r2, r1
   8873a:	bfac      	ite	ge
   8873c:	189b      	addge	r3, r3, r2
   8873e:	185b      	addlt	r3, r3, r1
   88740:	9303      	str	r3, [sp, #12]
   88742:	e04e      	b.n	887e2 <_vfiprintf_r+0x902>
   88744:	aa0f      	add	r2, sp, #60	; 0x3c
   88746:	4649      	mov	r1, r9
   88748:	4638      	mov	r0, r7
   8874a:	f7ff fb89 	bl	87e60 <__sprint_r.part.0>
   8874e:	2800      	cmp	r0, #0
   88750:	f040 813e 	bne.w	889d0 <_vfiprintf_r+0xaf0>
   88754:	9910      	ldr	r1, [sp, #64]	; 0x40
   88756:	46d6      	mov	lr, sl
   88758:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8875a:	1c48      	adds	r0, r1, #1
   8875c:	e77f      	b.n	8865e <_vfiprintf_r+0x77e>
   8875e:	aa0f      	add	r2, sp, #60	; 0x3c
   88760:	4659      	mov	r1, fp
   88762:	4638      	mov	r0, r7
   88764:	f7ff fb7c 	bl	87e60 <__sprint_r.part.0>
   88768:	b960      	cbnz	r0, 88784 <_vfiprintf_r+0x8a4>
   8876a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8876c:	46d1      	mov	r9, sl
   8876e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88770:	1c48      	adds	r0, r1, #1
   88772:	e7bd      	b.n	886f0 <_vfiprintf_r+0x810>
   88774:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88776:	f8dd b010 	ldr.w	fp, [sp, #16]
   8877a:	2b00      	cmp	r3, #0
   8877c:	f040 81ca 	bne.w	88b14 <_vfiprintf_r+0xc34>
   88780:	2300      	movs	r3, #0
   88782:	9310      	str	r3, [sp, #64]	; 0x40
   88784:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88788:	f013 0f01 	tst.w	r3, #1
   8878c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   88790:	d102      	bne.n	88798 <_vfiprintf_r+0x8b8>
   88792:	059a      	lsls	r2, r3, #22
   88794:	f140 80dd 	bpl.w	88952 <_vfiprintf_r+0xa72>
   88798:	065b      	lsls	r3, r3, #25
   8879a:	f53f acad 	bmi.w	880f8 <_vfiprintf_r+0x218>
   8879e:	9803      	ldr	r0, [sp, #12]
   887a0:	b02d      	add	sp, #180	; 0xb4
   887a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887a6:	2a00      	cmp	r2, #0
   887a8:	f040 8105 	bne.w	889b6 <_vfiprintf_r+0xad6>
   887ac:	2301      	movs	r3, #1
   887ae:	46d1      	mov	r9, sl
   887b0:	9a05      	ldr	r2, [sp, #20]
   887b2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   887b6:	921d      	str	r2, [sp, #116]	; 0x74
   887b8:	9211      	str	r2, [sp, #68]	; 0x44
   887ba:	9310      	str	r3, [sp, #64]	; 0x40
   887bc:	f109 0908 	add.w	r9, r9, #8
   887c0:	9b02      	ldr	r3, [sp, #8]
   887c2:	0759      	lsls	r1, r3, #29
   887c4:	d504      	bpl.n	887d0 <_vfiprintf_r+0x8f0>
   887c6:	9b08      	ldr	r3, [sp, #32]
   887c8:	9901      	ldr	r1, [sp, #4]
   887ca:	1a5c      	subs	r4, r3, r1
   887cc:	2c00      	cmp	r4, #0
   887ce:	dc81      	bgt.n	886d4 <_vfiprintf_r+0x7f4>
   887d0:	9b03      	ldr	r3, [sp, #12]
   887d2:	9908      	ldr	r1, [sp, #32]
   887d4:	9801      	ldr	r0, [sp, #4]
   887d6:	4281      	cmp	r1, r0
   887d8:	bfac      	ite	ge
   887da:	185b      	addge	r3, r3, r1
   887dc:	181b      	addlt	r3, r3, r0
   887de:	9303      	str	r3, [sp, #12]
   887e0:	bb72      	cbnz	r2, 88840 <_vfiprintf_r+0x960>
   887e2:	2300      	movs	r3, #0
   887e4:	46d1      	mov	r9, sl
   887e6:	9310      	str	r3, [sp, #64]	; 0x40
   887e8:	f7ff bbb7 	b.w	87f5a <_vfiprintf_r+0x7a>
   887ec:	aa0f      	add	r2, sp, #60	; 0x3c
   887ee:	9904      	ldr	r1, [sp, #16]
   887f0:	4620      	mov	r0, r4
   887f2:	f7ff fb35 	bl	87e60 <__sprint_r.part.0>
   887f6:	bb50      	cbnz	r0, 8884e <_vfiprintf_r+0x96e>
   887f8:	9910      	ldr	r1, [sp, #64]	; 0x40
   887fa:	46d4      	mov	ip, sl
   887fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   887fe:	f101 0e01 	add.w	lr, r1, #1
   88802:	e54a      	b.n	8829a <_vfiprintf_r+0x3ba>
   88804:	2a00      	cmp	r2, #0
   88806:	f47f aee5 	bne.w	885d4 <_vfiprintf_r+0x6f4>
   8880a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   8880e:	2900      	cmp	r1, #0
   88810:	f000 811a 	beq.w	88a48 <_vfiprintf_r+0xb68>
   88814:	2201      	movs	r2, #1
   88816:	46d1      	mov	r9, sl
   88818:	4610      	mov	r0, r2
   8881a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   8881e:	921d      	str	r2, [sp, #116]	; 0x74
   88820:	911c      	str	r1, [sp, #112]	; 0x70
   88822:	4601      	mov	r1, r0
   88824:	f109 0908 	add.w	r9, r9, #8
   88828:	3001      	adds	r0, #1
   8882a:	e508      	b.n	8823e <_vfiprintf_r+0x35e>
   8882c:	9b02      	ldr	r3, [sp, #8]
   8882e:	2a01      	cmp	r2, #1
   88830:	f000 8097 	beq.w	88962 <_vfiprintf_r+0xa82>
   88834:	2a02      	cmp	r2, #2
   88836:	d10d      	bne.n	88854 <_vfiprintf_r+0x974>
   88838:	9302      	str	r3, [sp, #8]
   8883a:	2600      	movs	r6, #0
   8883c:	2700      	movs	r7, #0
   8883e:	e5b2      	b.n	883a6 <_vfiprintf_r+0x4c6>
   88840:	aa0f      	add	r2, sp, #60	; 0x3c
   88842:	9904      	ldr	r1, [sp, #16]
   88844:	9806      	ldr	r0, [sp, #24]
   88846:	f7ff fb0b 	bl	87e60 <__sprint_r.part.0>
   8884a:	2800      	cmp	r0, #0
   8884c:	d0c9      	beq.n	887e2 <_vfiprintf_r+0x902>
   8884e:	f8dd b010 	ldr.w	fp, [sp, #16]
   88852:	e797      	b.n	88784 <_vfiprintf_r+0x8a4>
   88854:	2600      	movs	r6, #0
   88856:	2700      	movs	r7, #0
   88858:	9302      	str	r3, [sp, #8]
   8885a:	4651      	mov	r1, sl
   8885c:	e000      	b.n	88860 <_vfiprintf_r+0x980>
   8885e:	4659      	mov	r1, fp
   88860:	08f2      	lsrs	r2, r6, #3
   88862:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   88866:	08f8      	lsrs	r0, r7, #3
   88868:	f006 0307 	and.w	r3, r6, #7
   8886c:	4607      	mov	r7, r0
   8886e:	4616      	mov	r6, r2
   88870:	3330      	adds	r3, #48	; 0x30
   88872:	ea56 0207 	orrs.w	r2, r6, r7
   88876:	f801 3c01 	strb.w	r3, [r1, #-1]
   8887a:	f101 3bff 	add.w	fp, r1, #4294967295
   8887e:	d1ee      	bne.n	8885e <_vfiprintf_r+0x97e>
   88880:	9a02      	ldr	r2, [sp, #8]
   88882:	07d6      	lsls	r6, r2, #31
   88884:	f57f ad9f 	bpl.w	883c6 <_vfiprintf_r+0x4e6>
   88888:	2b30      	cmp	r3, #48	; 0x30
   8888a:	f43f ad9c 	beq.w	883c6 <_vfiprintf_r+0x4e6>
   8888e:	2330      	movs	r3, #48	; 0x30
   88890:	3902      	subs	r1, #2
   88892:	f80b 3c01 	strb.w	r3, [fp, #-1]
   88896:	ebaa 0301 	sub.w	r3, sl, r1
   8889a:	9305      	str	r3, [sp, #20]
   8889c:	468b      	mov	fp, r1
   8889e:	e477      	b.n	88190 <_vfiprintf_r+0x2b0>
   888a0:	9b03      	ldr	r3, [sp, #12]
   888a2:	9a08      	ldr	r2, [sp, #32]
   888a4:	428a      	cmp	r2, r1
   888a6:	bfac      	ite	ge
   888a8:	189b      	addge	r3, r3, r2
   888aa:	185b      	addlt	r3, r3, r1
   888ac:	9303      	str	r3, [sp, #12]
   888ae:	e798      	b.n	887e2 <_vfiprintf_r+0x902>
   888b0:	2202      	movs	r2, #2
   888b2:	e44e      	b.n	88152 <_vfiprintf_r+0x272>
   888b4:	2f00      	cmp	r7, #0
   888b6:	bf08      	it	eq
   888b8:	2e0a      	cmpeq	r6, #10
   888ba:	d351      	bcc.n	88960 <_vfiprintf_r+0xa80>
   888bc:	46d3      	mov	fp, sl
   888be:	4630      	mov	r0, r6
   888c0:	4639      	mov	r1, r7
   888c2:	220a      	movs	r2, #10
   888c4:	2300      	movs	r3, #0
   888c6:	f7fd fc6d 	bl	861a4 <__aeabi_uldivmod>
   888ca:	3230      	adds	r2, #48	; 0x30
   888cc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   888d0:	4630      	mov	r0, r6
   888d2:	4639      	mov	r1, r7
   888d4:	2300      	movs	r3, #0
   888d6:	220a      	movs	r2, #10
   888d8:	f7fd fc64 	bl	861a4 <__aeabi_uldivmod>
   888dc:	4606      	mov	r6, r0
   888de:	460f      	mov	r7, r1
   888e0:	ea56 0307 	orrs.w	r3, r6, r7
   888e4:	d1eb      	bne.n	888be <_vfiprintf_r+0x9de>
   888e6:	e56e      	b.n	883c6 <_vfiprintf_r+0x4e6>
   888e8:	9405      	str	r4, [sp, #20]
   888ea:	46d3      	mov	fp, sl
   888ec:	e450      	b.n	88190 <_vfiprintf_r+0x2b0>
   888ee:	aa0f      	add	r2, sp, #60	; 0x3c
   888f0:	9904      	ldr	r1, [sp, #16]
   888f2:	9806      	ldr	r0, [sp, #24]
   888f4:	f7ff fab4 	bl	87e60 <__sprint_r.part.0>
   888f8:	2800      	cmp	r0, #0
   888fa:	d1a8      	bne.n	8884e <_vfiprintf_r+0x96e>
   888fc:	46d1      	mov	r9, sl
   888fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88900:	e75e      	b.n	887c0 <_vfiprintf_r+0x8e0>
   88902:	aa0f      	add	r2, sp, #60	; 0x3c
   88904:	9904      	ldr	r1, [sp, #16]
   88906:	9806      	ldr	r0, [sp, #24]
   88908:	f7ff faaa 	bl	87e60 <__sprint_r.part.0>
   8890c:	2800      	cmp	r0, #0
   8890e:	d19e      	bne.n	8884e <_vfiprintf_r+0x96e>
   88910:	46d1      	mov	r9, sl
   88912:	f7ff bbbb 	b.w	8808c <_vfiprintf_r+0x1ac>
   88916:	bf00      	nop
   88918:	0008c750 	.word	0x0008c750
   8891c:	0008c740 	.word	0x0008c740
   88920:	3104      	adds	r1, #4
   88922:	6816      	ldr	r6, [r2, #0]
   88924:	2700      	movs	r7, #0
   88926:	2201      	movs	r2, #1
   88928:	9107      	str	r1, [sp, #28]
   8892a:	e412      	b.n	88152 <_vfiprintf_r+0x272>
   8892c:	9807      	ldr	r0, [sp, #28]
   8892e:	2700      	movs	r7, #0
   88930:	4601      	mov	r1, r0
   88932:	3104      	adds	r1, #4
   88934:	6806      	ldr	r6, [r0, #0]
   88936:	9107      	str	r1, [sp, #28]
   88938:	e40b      	b.n	88152 <_vfiprintf_r+0x272>
   8893a:	680e      	ldr	r6, [r1, #0]
   8893c:	3104      	adds	r1, #4
   8893e:	9107      	str	r1, [sp, #28]
   88940:	2700      	movs	r7, #0
   88942:	e592      	b.n	8846a <_vfiprintf_r+0x58a>
   88944:	6816      	ldr	r6, [r2, #0]
   88946:	3204      	adds	r2, #4
   88948:	17f7      	asrs	r7, r6, #31
   8894a:	9207      	str	r2, [sp, #28]
   8894c:	4630      	mov	r0, r6
   8894e:	4639      	mov	r1, r7
   88950:	e512      	b.n	88378 <_vfiprintf_r+0x498>
   88952:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88956:	f001 fe39 	bl	8a5cc <__retarget_lock_release_recursive>
   8895a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8895e:	e71b      	b.n	88798 <_vfiprintf_r+0x8b8>
   88960:	9b02      	ldr	r3, [sp, #8]
   88962:	9302      	str	r3, [sp, #8]
   88964:	2301      	movs	r3, #1
   88966:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8896a:	3630      	adds	r6, #48	; 0x30
   8896c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   88970:	9305      	str	r3, [sp, #20]
   88972:	e40d      	b.n	88190 <_vfiprintf_r+0x2b0>
   88974:	aa0f      	add	r2, sp, #60	; 0x3c
   88976:	9904      	ldr	r1, [sp, #16]
   88978:	9806      	ldr	r0, [sp, #24]
   8897a:	f7ff fa71 	bl	87e60 <__sprint_r.part.0>
   8897e:	2800      	cmp	r0, #0
   88980:	f47f af65 	bne.w	8884e <_vfiprintf_r+0x96e>
   88984:	9910      	ldr	r1, [sp, #64]	; 0x40
   88986:	46d1      	mov	r9, sl
   88988:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8898a:	1c48      	adds	r0, r1, #1
   8898c:	e457      	b.n	8823e <_vfiprintf_r+0x35e>
   8898e:	aa0f      	add	r2, sp, #60	; 0x3c
   88990:	9904      	ldr	r1, [sp, #16]
   88992:	9806      	ldr	r0, [sp, #24]
   88994:	f7ff fa64 	bl	87e60 <__sprint_r.part.0>
   88998:	2800      	cmp	r0, #0
   8899a:	f47f af58 	bne.w	8884e <_vfiprintf_r+0x96e>
   8899e:	9910      	ldr	r1, [sp, #64]	; 0x40
   889a0:	46d1      	mov	r9, sl
   889a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   889a4:	1c48      	adds	r0, r1, #1
   889a6:	e644      	b.n	88632 <_vfiprintf_r+0x752>
   889a8:	2a00      	cmp	r2, #0
   889aa:	f040 8087 	bne.w	88abc <_vfiprintf_r+0xbdc>
   889ae:	2001      	movs	r0, #1
   889b0:	4611      	mov	r1, r2
   889b2:	46d1      	mov	r9, sl
   889b4:	e641      	b.n	8863a <_vfiprintf_r+0x75a>
   889b6:	aa0f      	add	r2, sp, #60	; 0x3c
   889b8:	9904      	ldr	r1, [sp, #16]
   889ba:	9806      	ldr	r0, [sp, #24]
   889bc:	f7ff fa50 	bl	87e60 <__sprint_r.part.0>
   889c0:	2800      	cmp	r0, #0
   889c2:	f47f af44 	bne.w	8884e <_vfiprintf_r+0x96e>
   889c6:	9810      	ldr	r0, [sp, #64]	; 0x40
   889c8:	46d1      	mov	r9, sl
   889ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   889cc:	3001      	adds	r0, #1
   889ce:	e668      	b.n	886a2 <_vfiprintf_r+0x7c2>
   889d0:	46cb      	mov	fp, r9
   889d2:	e6d7      	b.n	88784 <_vfiprintf_r+0x8a4>
   889d4:	9d07      	ldr	r5, [sp, #28]
   889d6:	3507      	adds	r5, #7
   889d8:	f025 0507 	bic.w	r5, r5, #7
   889dc:	f105 0208 	add.w	r2, r5, #8
   889e0:	e9d5 0100 	ldrd	r0, r1, [r5]
   889e4:	9207      	str	r2, [sp, #28]
   889e6:	4606      	mov	r6, r0
   889e8:	460f      	mov	r7, r1
   889ea:	e4c5      	b.n	88378 <_vfiprintf_r+0x498>
   889ec:	9d07      	ldr	r5, [sp, #28]
   889ee:	3507      	adds	r5, #7
   889f0:	f025 0207 	bic.w	r2, r5, #7
   889f4:	f102 0108 	add.w	r1, r2, #8
   889f8:	e9d2 6700 	ldrd	r6, r7, [r2]
   889fc:	9107      	str	r1, [sp, #28]
   889fe:	2201      	movs	r2, #1
   88a00:	f7ff bba7 	b.w	88152 <_vfiprintf_r+0x272>
   88a04:	9d07      	ldr	r5, [sp, #28]
   88a06:	3507      	adds	r5, #7
   88a08:	f025 0207 	bic.w	r2, r5, #7
   88a0c:	f102 0108 	add.w	r1, r2, #8
   88a10:	e9d2 6700 	ldrd	r6, r7, [r2]
   88a14:	9107      	str	r1, [sp, #28]
   88a16:	2200      	movs	r2, #0
   88a18:	f7ff bb9b 	b.w	88152 <_vfiprintf_r+0x272>
   88a1c:	9d07      	ldr	r5, [sp, #28]
   88a1e:	3507      	adds	r5, #7
   88a20:	f025 0107 	bic.w	r1, r5, #7
   88a24:	f101 0008 	add.w	r0, r1, #8
   88a28:	9007      	str	r0, [sp, #28]
   88a2a:	e9d1 6700 	ldrd	r6, r7, [r1]
   88a2e:	e51c      	b.n	8846a <_vfiprintf_r+0x58a>
   88a30:	46d3      	mov	fp, sl
   88a32:	f7ff bbad 	b.w	88190 <_vfiprintf_r+0x2b0>
   88a36:	252d      	movs	r5, #45	; 0x2d
   88a38:	4276      	negs	r6, r6
   88a3a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   88a3e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   88a42:	2201      	movs	r2, #1
   88a44:	f7ff bb8a 	b.w	8815c <_vfiprintf_r+0x27c>
   88a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a4a:	b9b3      	cbnz	r3, 88a7a <_vfiprintf_r+0xb9a>
   88a4c:	4611      	mov	r1, r2
   88a4e:	2001      	movs	r0, #1
   88a50:	46d1      	mov	r9, sl
   88a52:	e5f2      	b.n	8863a <_vfiprintf_r+0x75a>
   88a54:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88a58:	f001 fdb8 	bl	8a5cc <__retarget_lock_release_recursive>
   88a5c:	f04f 33ff 	mov.w	r3, #4294967295
   88a60:	9303      	str	r3, [sp, #12]
   88a62:	f7ff bb4c 	b.w	880fe <_vfiprintf_r+0x21e>
   88a66:	aa0f      	add	r2, sp, #60	; 0x3c
   88a68:	9904      	ldr	r1, [sp, #16]
   88a6a:	9806      	ldr	r0, [sp, #24]
   88a6c:	f7ff f9f8 	bl	87e60 <__sprint_r.part.0>
   88a70:	2800      	cmp	r0, #0
   88a72:	f47f aeec 	bne.w	8884e <_vfiprintf_r+0x96e>
   88a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88a78:	e6aa      	b.n	887d0 <_vfiprintf_r+0x8f0>
   88a7a:	2202      	movs	r2, #2
   88a7c:	ab0e      	add	r3, sp, #56	; 0x38
   88a7e:	921d      	str	r2, [sp, #116]	; 0x74
   88a80:	931c      	str	r3, [sp, #112]	; 0x70
   88a82:	2001      	movs	r0, #1
   88a84:	46d1      	mov	r9, sl
   88a86:	e5d0      	b.n	8862a <_vfiprintf_r+0x74a>
   88a88:	4d34      	ldr	r5, [pc, #208]	; (88b5c <_vfiprintf_r+0xc7c>)
   88a8a:	e5fd      	b.n	88688 <_vfiprintf_r+0x7a8>
   88a8c:	9a07      	ldr	r2, [sp, #28]
   88a8e:	4613      	mov	r3, r2
   88a90:	3304      	adds	r3, #4
   88a92:	9307      	str	r3, [sp, #28]
   88a94:	9b03      	ldr	r3, [sp, #12]
   88a96:	6811      	ldr	r1, [r2, #0]
   88a98:	17dd      	asrs	r5, r3, #31
   88a9a:	461a      	mov	r2, r3
   88a9c:	462b      	mov	r3, r5
   88a9e:	e9c1 2300 	strd	r2, r3, [r1]
   88aa2:	f7ff ba5a 	b.w	87f5a <_vfiprintf_r+0x7a>
   88aa6:	4658      	mov	r0, fp
   88aa8:	9507      	str	r5, [sp, #28]
   88aaa:	9302      	str	r3, [sp, #8]
   88aac:	f7fd fef8 	bl	868a0 <strlen>
   88ab0:	2400      	movs	r4, #0
   88ab2:	9005      	str	r0, [sp, #20]
   88ab4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88ab8:	f7ff bb6a 	b.w	88190 <_vfiprintf_r+0x2b0>
   88abc:	aa0f      	add	r2, sp, #60	; 0x3c
   88abe:	9904      	ldr	r1, [sp, #16]
   88ac0:	9806      	ldr	r0, [sp, #24]
   88ac2:	f7ff f9cd 	bl	87e60 <__sprint_r.part.0>
   88ac6:	2800      	cmp	r0, #0
   88ac8:	f47f aec1 	bne.w	8884e <_vfiprintf_r+0x96e>
   88acc:	9910      	ldr	r1, [sp, #64]	; 0x40
   88ace:	46d1      	mov	r9, sl
   88ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88ad2:	1c48      	adds	r0, r1, #1
   88ad4:	e5b1      	b.n	8863a <_vfiprintf_r+0x75a>
   88ad6:	9910      	ldr	r1, [sp, #64]	; 0x40
   88ad8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88ada:	3101      	adds	r1, #1
   88adc:	4e20      	ldr	r6, [pc, #128]	; (88b60 <_vfiprintf_r+0xc80>)
   88ade:	f7ff bb9c 	b.w	8821a <_vfiprintf_r+0x33a>
   88ae2:	2c06      	cmp	r4, #6
   88ae4:	bf28      	it	cs
   88ae6:	2406      	movcs	r4, #6
   88ae8:	9507      	str	r5, [sp, #28]
   88aea:	9405      	str	r4, [sp, #20]
   88aec:	9401      	str	r4, [sp, #4]
   88aee:	f8df b074 	ldr.w	fp, [pc, #116]	; 88b64 <_vfiprintf_r+0xc84>
   88af2:	e4e3      	b.n	884bc <_vfiprintf_r+0x5dc>
   88af4:	9810      	ldr	r0, [sp, #64]	; 0x40
   88af6:	4e1a      	ldr	r6, [pc, #104]	; (88b60 <_vfiprintf_r+0xc80>)
   88af8:	3001      	adds	r0, #1
   88afa:	e60e      	b.n	8871a <_vfiprintf_r+0x83a>
   88afc:	4686      	mov	lr, r0
   88afe:	4d17      	ldr	r5, [pc, #92]	; (88b5c <_vfiprintf_r+0xc7c>)
   88b00:	f7ff bbe2 	b.w	882c8 <_vfiprintf_r+0x3e8>
   88b04:	9405      	str	r4, [sp, #20]
   88b06:	9507      	str	r5, [sp, #28]
   88b08:	9302      	str	r3, [sp, #8]
   88b0a:	4604      	mov	r4, r0
   88b0c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88b10:	f7ff bb3e 	b.w	88190 <_vfiprintf_r+0x2b0>
   88b14:	9806      	ldr	r0, [sp, #24]
   88b16:	aa0f      	add	r2, sp, #60	; 0x3c
   88b18:	4659      	mov	r1, fp
   88b1a:	f7ff f9a1 	bl	87e60 <__sprint_r.part.0>
   88b1e:	2800      	cmp	r0, #0
   88b20:	f43f ae2e 	beq.w	88780 <_vfiprintf_r+0x8a0>
   88b24:	e62e      	b.n	88784 <_vfiprintf_r+0x8a4>
   88b26:	9907      	ldr	r1, [sp, #28]
   88b28:	f898 2001 	ldrb.w	r2, [r8, #1]
   88b2c:	680c      	ldr	r4, [r1, #0]
   88b2e:	3104      	adds	r1, #4
   88b30:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   88b34:	46b8      	mov	r8, r7
   88b36:	9107      	str	r1, [sp, #28]
   88b38:	f7ff ba44 	b.w	87fc4 <_vfiprintf_r+0xe4>
   88b3c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b40:	e4a7      	b.n	88492 <_vfiprintf_r+0x5b2>
   88b42:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b46:	e521      	b.n	8858c <_vfiprintf_r+0x6ac>
   88b48:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b4c:	e47c      	b.n	88448 <_vfiprintf_r+0x568>
   88b4e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b52:	e43f      	b.n	883d4 <_vfiprintf_r+0x4f4>
   88b54:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b58:	f7ff bbfa 	b.w	88350 <_vfiprintf_r+0x470>
   88b5c:	0008c750 	.word	0x0008c750
   88b60:	0008c740 	.word	0x0008c740
   88b64:	0008c714 	.word	0x0008c714

00088b68 <__sbprintf>:
   88b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   88b6c:	460c      	mov	r4, r1
   88b6e:	f04f 0e00 	mov.w	lr, #0
   88b72:	f44f 6580 	mov.w	r5, #1024	; 0x400
   88b76:	4606      	mov	r6, r0
   88b78:	4617      	mov	r7, r2
   88b7a:	4698      	mov	r8, r3
   88b7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   88b7e:	89e3      	ldrh	r3, [r4, #14]
   88b80:	8989      	ldrh	r1, [r1, #12]
   88b82:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   88b86:	f021 0102 	bic.w	r1, r1, #2
   88b8a:	9219      	str	r2, [sp, #100]	; 0x64
   88b8c:	f8ad 300e 	strh.w	r3, [sp, #14]
   88b90:	69e2      	ldr	r2, [r4, #28]
   88b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   88b94:	f8ad 100c 	strh.w	r1, [sp, #12]
   88b98:	a816      	add	r0, sp, #88	; 0x58
   88b9a:	a91a      	add	r1, sp, #104	; 0x68
   88b9c:	f8cd e018 	str.w	lr, [sp, #24]
   88ba0:	9207      	str	r2, [sp, #28]
   88ba2:	9309      	str	r3, [sp, #36]	; 0x24
   88ba4:	9100      	str	r1, [sp, #0]
   88ba6:	9104      	str	r1, [sp, #16]
   88ba8:	9502      	str	r5, [sp, #8]
   88baa:	9505      	str	r5, [sp, #20]
   88bac:	f001 fd08 	bl	8a5c0 <__retarget_lock_init_recursive>
   88bb0:	4643      	mov	r3, r8
   88bb2:	463a      	mov	r2, r7
   88bb4:	4669      	mov	r1, sp
   88bb6:	4630      	mov	r0, r6
   88bb8:	f7ff f992 	bl	87ee0 <_vfiprintf_r>
   88bbc:	1e05      	subs	r5, r0, #0
   88bbe:	db07      	blt.n	88bd0 <__sbprintf+0x68>
   88bc0:	4630      	mov	r0, r6
   88bc2:	4669      	mov	r1, sp
   88bc4:	f001 f8da 	bl	89d7c <_fflush_r>
   88bc8:	2800      	cmp	r0, #0
   88bca:	bf18      	it	ne
   88bcc:	f04f 35ff 	movne.w	r5, #4294967295
   88bd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88bd4:	065b      	lsls	r3, r3, #25
   88bd6:	d503      	bpl.n	88be0 <__sbprintf+0x78>
   88bd8:	89a3      	ldrh	r3, [r4, #12]
   88bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88bde:	81a3      	strh	r3, [r4, #12]
   88be0:	9816      	ldr	r0, [sp, #88]	; 0x58
   88be2:	f001 fcef 	bl	8a5c4 <__retarget_lock_close_recursive>
   88be6:	4628      	mov	r0, r5
   88be8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   88bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00088bf0 <__swsetup_r>:
   88bf0:	b538      	push	{r3, r4, r5, lr}
   88bf2:	4b30      	ldr	r3, [pc, #192]	; (88cb4 <__swsetup_r+0xc4>)
   88bf4:	4605      	mov	r5, r0
   88bf6:	6818      	ldr	r0, [r3, #0]
   88bf8:	460c      	mov	r4, r1
   88bfa:	b110      	cbz	r0, 88c02 <__swsetup_r+0x12>
   88bfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88bfe:	2b00      	cmp	r3, #0
   88c00:	d038      	beq.n	88c74 <__swsetup_r+0x84>
   88c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   88c06:	b293      	uxth	r3, r2
   88c08:	0718      	lsls	r0, r3, #28
   88c0a:	d50c      	bpl.n	88c26 <__swsetup_r+0x36>
   88c0c:	6920      	ldr	r0, [r4, #16]
   88c0e:	b1a8      	cbz	r0, 88c3c <__swsetup_r+0x4c>
   88c10:	f013 0201 	ands.w	r2, r3, #1
   88c14:	d01e      	beq.n	88c54 <__swsetup_r+0x64>
   88c16:	2200      	movs	r2, #0
   88c18:	6963      	ldr	r3, [r4, #20]
   88c1a:	60a2      	str	r2, [r4, #8]
   88c1c:	425b      	negs	r3, r3
   88c1e:	61a3      	str	r3, [r4, #24]
   88c20:	b1f0      	cbz	r0, 88c60 <__swsetup_r+0x70>
   88c22:	2000      	movs	r0, #0
   88c24:	bd38      	pop	{r3, r4, r5, pc}
   88c26:	06d9      	lsls	r1, r3, #27
   88c28:	d53b      	bpl.n	88ca2 <__swsetup_r+0xb2>
   88c2a:	0758      	lsls	r0, r3, #29
   88c2c:	d425      	bmi.n	88c7a <__swsetup_r+0x8a>
   88c2e:	6920      	ldr	r0, [r4, #16]
   88c30:	f042 0308 	orr.w	r3, r2, #8
   88c34:	81a3      	strh	r3, [r4, #12]
   88c36:	b29b      	uxth	r3, r3
   88c38:	2800      	cmp	r0, #0
   88c3a:	d1e9      	bne.n	88c10 <__swsetup_r+0x20>
   88c3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   88c40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88c44:	d0e4      	beq.n	88c10 <__swsetup_r+0x20>
   88c46:	4628      	mov	r0, r5
   88c48:	4621      	mov	r1, r4
   88c4a:	f001 fcef 	bl	8a62c <__smakebuf_r>
   88c4e:	89a3      	ldrh	r3, [r4, #12]
   88c50:	6920      	ldr	r0, [r4, #16]
   88c52:	e7dd      	b.n	88c10 <__swsetup_r+0x20>
   88c54:	0799      	lsls	r1, r3, #30
   88c56:	bf58      	it	pl
   88c58:	6962      	ldrpl	r2, [r4, #20]
   88c5a:	60a2      	str	r2, [r4, #8]
   88c5c:	2800      	cmp	r0, #0
   88c5e:	d1e0      	bne.n	88c22 <__swsetup_r+0x32>
   88c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88c64:	061a      	lsls	r2, r3, #24
   88c66:	d5dd      	bpl.n	88c24 <__swsetup_r+0x34>
   88c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88c6c:	81a3      	strh	r3, [r4, #12]
   88c6e:	f04f 30ff 	mov.w	r0, #4294967295
   88c72:	bd38      	pop	{r3, r4, r5, pc}
   88c74:	f001 f8da 	bl	89e2c <__sinit>
   88c78:	e7c3      	b.n	88c02 <__swsetup_r+0x12>
   88c7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88c7c:	b151      	cbz	r1, 88c94 <__swsetup_r+0xa4>
   88c7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   88c82:	4299      	cmp	r1, r3
   88c84:	d004      	beq.n	88c90 <__swsetup_r+0xa0>
   88c86:	4628      	mov	r0, r5
   88c88:	f001 f9f6 	bl	8a078 <_free_r>
   88c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   88c90:	2300      	movs	r3, #0
   88c92:	6323      	str	r3, [r4, #48]	; 0x30
   88c94:	2300      	movs	r3, #0
   88c96:	6920      	ldr	r0, [r4, #16]
   88c98:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   88c9c:	e884 0009 	stmia.w	r4, {r0, r3}
   88ca0:	e7c6      	b.n	88c30 <__swsetup_r+0x40>
   88ca2:	2309      	movs	r3, #9
   88ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   88ca8:	602b      	str	r3, [r5, #0]
   88caa:	f04f 30ff 	mov.w	r0, #4294967295
   88cae:	81a2      	strh	r2, [r4, #12]
   88cb0:	bd38      	pop	{r3, r4, r5, pc}
   88cb2:	bf00      	nop
   88cb4:	20000aa8 	.word	0x20000aa8

00088cb8 <register_fini>:
   88cb8:	4b02      	ldr	r3, [pc, #8]	; (88cc4 <register_fini+0xc>)
   88cba:	b113      	cbz	r3, 88cc2 <register_fini+0xa>
   88cbc:	4802      	ldr	r0, [pc, #8]	; (88cc8 <register_fini+0x10>)
   88cbe:	f000 b805 	b.w	88ccc <atexit>
   88cc2:	4770      	bx	lr
   88cc4:	00000000 	.word	0x00000000
   88cc8:	00089ea5 	.word	0x00089ea5

00088ccc <atexit>:
   88ccc:	2300      	movs	r3, #0
   88cce:	4601      	mov	r1, r0
   88cd0:	461a      	mov	r2, r3
   88cd2:	4618      	mov	r0, r3
   88cd4:	f002 be94 	b.w	8ba00 <__register_exitproc>

00088cd8 <quorem>:
   88cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88cdc:	6903      	ldr	r3, [r0, #16]
   88cde:	690f      	ldr	r7, [r1, #16]
   88ce0:	b083      	sub	sp, #12
   88ce2:	429f      	cmp	r7, r3
   88ce4:	f300 8088 	bgt.w	88df8 <quorem+0x120>
   88ce8:	3f01      	subs	r7, #1
   88cea:	f101 0614 	add.w	r6, r1, #20
   88cee:	f100 0a14 	add.w	sl, r0, #20
   88cf2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   88cf6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   88cfa:	3301      	adds	r3, #1
   88cfc:	fbb2 f8f3 	udiv	r8, r2, r3
   88d00:	00bb      	lsls	r3, r7, #2
   88d02:	9300      	str	r3, [sp, #0]
   88d04:	eb06 0903 	add.w	r9, r6, r3
   88d08:	4453      	add	r3, sl
   88d0a:	9301      	str	r3, [sp, #4]
   88d0c:	f1b8 0f00 	cmp.w	r8, #0
   88d10:	d03b      	beq.n	88d8a <quorem+0xb2>
   88d12:	2300      	movs	r3, #0
   88d14:	46b4      	mov	ip, r6
   88d16:	461c      	mov	r4, r3
   88d18:	46d6      	mov	lr, sl
   88d1a:	f85c 2b04 	ldr.w	r2, [ip], #4
   88d1e:	f8de 5000 	ldr.w	r5, [lr]
   88d22:	fa1f fb82 	uxth.w	fp, r2
   88d26:	fb08 330b 	mla	r3, r8, fp, r3
   88d2a:	0c12      	lsrs	r2, r2, #16
   88d2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   88d30:	fb08 bb02 	mla	fp, r8, r2, fp
   88d34:	b29a      	uxth	r2, r3
   88d36:	1aa2      	subs	r2, r4, r2
   88d38:	b2ab      	uxth	r3, r5
   88d3a:	fa1f f48b 	uxth.w	r4, fp
   88d3e:	441a      	add	r2, r3
   88d40:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   88d44:	eb04 4422 	add.w	r4, r4, r2, asr #16
   88d48:	b292      	uxth	r2, r2
   88d4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   88d4e:	45e1      	cmp	r9, ip
   88d50:	f84e 2b04 	str.w	r2, [lr], #4
   88d54:	ea4f 4424 	mov.w	r4, r4, asr #16
   88d58:	ea4f 431b 	mov.w	r3, fp, lsr #16
   88d5c:	d2dd      	bcs.n	88d1a <quorem+0x42>
   88d5e:	9b00      	ldr	r3, [sp, #0]
   88d60:	f85a 3003 	ldr.w	r3, [sl, r3]
   88d64:	b98b      	cbnz	r3, 88d8a <quorem+0xb2>
   88d66:	9c01      	ldr	r4, [sp, #4]
   88d68:	1f23      	subs	r3, r4, #4
   88d6a:	459a      	cmp	sl, r3
   88d6c:	d20c      	bcs.n	88d88 <quorem+0xb0>
   88d6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   88d72:	b94b      	cbnz	r3, 88d88 <quorem+0xb0>
   88d74:	f1a4 0308 	sub.w	r3, r4, #8
   88d78:	e002      	b.n	88d80 <quorem+0xa8>
   88d7a:	681a      	ldr	r2, [r3, #0]
   88d7c:	3b04      	subs	r3, #4
   88d7e:	b91a      	cbnz	r2, 88d88 <quorem+0xb0>
   88d80:	459a      	cmp	sl, r3
   88d82:	f107 37ff 	add.w	r7, r7, #4294967295
   88d86:	d3f8      	bcc.n	88d7a <quorem+0xa2>
   88d88:	6107      	str	r7, [r0, #16]
   88d8a:	4604      	mov	r4, r0
   88d8c:	f002 fa0c 	bl	8b1a8 <__mcmp>
   88d90:	2800      	cmp	r0, #0
   88d92:	db2d      	blt.n	88df0 <quorem+0x118>
   88d94:	4655      	mov	r5, sl
   88d96:	2300      	movs	r3, #0
   88d98:	f108 0801 	add.w	r8, r8, #1
   88d9c:	f856 1b04 	ldr.w	r1, [r6], #4
   88da0:	6828      	ldr	r0, [r5, #0]
   88da2:	b28a      	uxth	r2, r1
   88da4:	1a9a      	subs	r2, r3, r2
   88da6:	0c0b      	lsrs	r3, r1, #16
   88da8:	b281      	uxth	r1, r0
   88daa:	440a      	add	r2, r1
   88dac:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   88db0:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88db4:	b292      	uxth	r2, r2
   88db6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88dba:	45b1      	cmp	r9, r6
   88dbc:	f845 2b04 	str.w	r2, [r5], #4
   88dc0:	ea4f 4323 	mov.w	r3, r3, asr #16
   88dc4:	d2ea      	bcs.n	88d9c <quorem+0xc4>
   88dc6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   88dca:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   88dce:	b97a      	cbnz	r2, 88df0 <quorem+0x118>
   88dd0:	1f1a      	subs	r2, r3, #4
   88dd2:	4592      	cmp	sl, r2
   88dd4:	d20b      	bcs.n	88dee <quorem+0x116>
   88dd6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   88dda:	b942      	cbnz	r2, 88dee <quorem+0x116>
   88ddc:	3b08      	subs	r3, #8
   88dde:	e002      	b.n	88de6 <quorem+0x10e>
   88de0:	681a      	ldr	r2, [r3, #0]
   88de2:	3b04      	subs	r3, #4
   88de4:	b91a      	cbnz	r2, 88dee <quorem+0x116>
   88de6:	459a      	cmp	sl, r3
   88de8:	f107 37ff 	add.w	r7, r7, #4294967295
   88dec:	d3f8      	bcc.n	88de0 <quorem+0x108>
   88dee:	6127      	str	r7, [r4, #16]
   88df0:	4640      	mov	r0, r8
   88df2:	b003      	add	sp, #12
   88df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88df8:	2000      	movs	r0, #0
   88dfa:	b003      	add	sp, #12
   88dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00088e00 <_dtoa_r>:
   88e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e04:	6c05      	ldr	r5, [r0, #64]	; 0x40
   88e06:	b09b      	sub	sp, #108	; 0x6c
   88e08:	4604      	mov	r4, r0
   88e0a:	4692      	mov	sl, r2
   88e0c:	469b      	mov	fp, r3
   88e0e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   88e10:	b14d      	cbz	r5, 88e26 <_dtoa_r+0x26>
   88e12:	2301      	movs	r3, #1
   88e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88e16:	4629      	mov	r1, r5
   88e18:	4093      	lsls	r3, r2
   88e1a:	60ab      	str	r3, [r5, #8]
   88e1c:	606a      	str	r2, [r5, #4]
   88e1e:	f001 ffeb 	bl	8adf8 <_Bfree>
   88e22:	2300      	movs	r3, #0
   88e24:	6423      	str	r3, [r4, #64]	; 0x40
   88e26:	f1bb 0f00 	cmp.w	fp, #0
   88e2a:	465d      	mov	r5, fp
   88e2c:	db35      	blt.n	88e9a <_dtoa_r+0x9a>
   88e2e:	2300      	movs	r3, #0
   88e30:	6033      	str	r3, [r6, #0]
   88e32:	4b9d      	ldr	r3, [pc, #628]	; (890a8 <_dtoa_r+0x2a8>)
   88e34:	43ab      	bics	r3, r5
   88e36:	d015      	beq.n	88e64 <_dtoa_r+0x64>
   88e38:	2200      	movs	r2, #0
   88e3a:	2300      	movs	r3, #0
   88e3c:	4650      	mov	r0, sl
   88e3e:	4659      	mov	r1, fp
   88e40:	f003 fb56 	bl	8c4f0 <__aeabi_dcmpeq>
   88e44:	4680      	mov	r8, r0
   88e46:	2800      	cmp	r0, #0
   88e48:	d02d      	beq.n	88ea6 <_dtoa_r+0xa6>
   88e4a:	2301      	movs	r3, #1
   88e4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88e4e:	6013      	str	r3, [r2, #0]
   88e50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88e52:	2b00      	cmp	r3, #0
   88e54:	f000 80bd 	beq.w	88fd2 <_dtoa_r+0x1d2>
   88e58:	4894      	ldr	r0, [pc, #592]	; (890ac <_dtoa_r+0x2ac>)
   88e5a:	6018      	str	r0, [r3, #0]
   88e5c:	3801      	subs	r0, #1
   88e5e:	b01b      	add	sp, #108	; 0x6c
   88e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e64:	f242 730f 	movw	r3, #9999	; 0x270f
   88e68:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88e6a:	6013      	str	r3, [r2, #0]
   88e6c:	f1ba 0f00 	cmp.w	sl, #0
   88e70:	d10d      	bne.n	88e8e <_dtoa_r+0x8e>
   88e72:	f3c5 0513 	ubfx	r5, r5, #0, #20
   88e76:	b955      	cbnz	r5, 88e8e <_dtoa_r+0x8e>
   88e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88e7a:	488d      	ldr	r0, [pc, #564]	; (890b0 <_dtoa_r+0x2b0>)
   88e7c:	2b00      	cmp	r3, #0
   88e7e:	d0ee      	beq.n	88e5e <_dtoa_r+0x5e>
   88e80:	f100 0308 	add.w	r3, r0, #8
   88e84:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   88e86:	6013      	str	r3, [r2, #0]
   88e88:	b01b      	add	sp, #108	; 0x6c
   88e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88e90:	4888      	ldr	r0, [pc, #544]	; (890b4 <_dtoa_r+0x2b4>)
   88e92:	2b00      	cmp	r3, #0
   88e94:	d0e3      	beq.n	88e5e <_dtoa_r+0x5e>
   88e96:	1cc3      	adds	r3, r0, #3
   88e98:	e7f4      	b.n	88e84 <_dtoa_r+0x84>
   88e9a:	2301      	movs	r3, #1
   88e9c:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   88ea0:	6033      	str	r3, [r6, #0]
   88ea2:	46ab      	mov	fp, r5
   88ea4:	e7c5      	b.n	88e32 <_dtoa_r+0x32>
   88ea6:	aa18      	add	r2, sp, #96	; 0x60
   88ea8:	ab19      	add	r3, sp, #100	; 0x64
   88eaa:	9201      	str	r2, [sp, #4]
   88eac:	9300      	str	r3, [sp, #0]
   88eae:	4652      	mov	r2, sl
   88eb0:	465b      	mov	r3, fp
   88eb2:	4620      	mov	r0, r4
   88eb4:	f002 fa22 	bl	8b2fc <__d2b>
   88eb8:	0d2b      	lsrs	r3, r5, #20
   88eba:	4681      	mov	r9, r0
   88ebc:	d071      	beq.n	88fa2 <_dtoa_r+0x1a2>
   88ebe:	4650      	mov	r0, sl
   88ec0:	f3cb 0213 	ubfx	r2, fp, #0, #20
   88ec4:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   88ec8:	9f18      	ldr	r7, [sp, #96]	; 0x60
   88eca:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   88ece:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   88ed2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   88ed6:	2200      	movs	r2, #0
   88ed8:	4b77      	ldr	r3, [pc, #476]	; (890b8 <_dtoa_r+0x2b8>)
   88eda:	f002 feed 	bl	8bcb8 <__aeabi_dsub>
   88ede:	a36c      	add	r3, pc, #432	; (adr r3, 89090 <_dtoa_r+0x290>)
   88ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
   88ee4:	f003 f89c 	bl	8c020 <__aeabi_dmul>
   88ee8:	a36b      	add	r3, pc, #428	; (adr r3, 89098 <_dtoa_r+0x298>)
   88eea:	e9d3 2300 	ldrd	r2, r3, [r3]
   88eee:	f002 fee5 	bl	8bcbc <__adddf3>
   88ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   88ef6:	4630      	mov	r0, r6
   88ef8:	f003 f82c 	bl	8bf54 <__aeabi_i2d>
   88efc:	a368      	add	r3, pc, #416	; (adr r3, 890a0 <_dtoa_r+0x2a0>)
   88efe:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f02:	f003 f88d 	bl	8c020 <__aeabi_dmul>
   88f06:	4602      	mov	r2, r0
   88f08:	460b      	mov	r3, r1
   88f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88f0e:	f002 fed5 	bl	8bcbc <__adddf3>
   88f12:	e9cd 0104 	strd	r0, r1, [sp, #16]
   88f16:	f003 fb33 	bl	8c580 <__aeabi_d2iz>
   88f1a:	2200      	movs	r2, #0
   88f1c:	9002      	str	r0, [sp, #8]
   88f1e:	2300      	movs	r3, #0
   88f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   88f24:	f003 faee 	bl	8c504 <__aeabi_dcmplt>
   88f28:	2800      	cmp	r0, #0
   88f2a:	f040 816d 	bne.w	89208 <_dtoa_r+0x408>
   88f2e:	9d02      	ldr	r5, [sp, #8]
   88f30:	2d16      	cmp	r5, #22
   88f32:	f200 8157 	bhi.w	891e4 <_dtoa_r+0x3e4>
   88f36:	4961      	ldr	r1, [pc, #388]	; (890bc <_dtoa_r+0x2bc>)
   88f38:	4652      	mov	r2, sl
   88f3a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   88f3e:	465b      	mov	r3, fp
   88f40:	e9d1 0100 	ldrd	r0, r1, [r1]
   88f44:	f003 fafc 	bl	8c540 <__aeabi_dcmpgt>
   88f48:	2800      	cmp	r0, #0
   88f4a:	f000 81be 	beq.w	892ca <_dtoa_r+0x4ca>
   88f4e:	1e6b      	subs	r3, r5, #1
   88f50:	9302      	str	r3, [sp, #8]
   88f52:	2300      	movs	r3, #0
   88f54:	930e      	str	r3, [sp, #56]	; 0x38
   88f56:	1bbf      	subs	r7, r7, r6
   88f58:	1e7b      	subs	r3, r7, #1
   88f5a:	9308      	str	r3, [sp, #32]
   88f5c:	f100 814e 	bmi.w	891fc <_dtoa_r+0x3fc>
   88f60:	2300      	movs	r3, #0
   88f62:	930a      	str	r3, [sp, #40]	; 0x28
   88f64:	9b02      	ldr	r3, [sp, #8]
   88f66:	2b00      	cmp	r3, #0
   88f68:	f2c0 813f 	blt.w	891ea <_dtoa_r+0x3ea>
   88f6c:	9a08      	ldr	r2, [sp, #32]
   88f6e:	930d      	str	r3, [sp, #52]	; 0x34
   88f70:	4611      	mov	r1, r2
   88f72:	4419      	add	r1, r3
   88f74:	2300      	movs	r3, #0
   88f76:	9108      	str	r1, [sp, #32]
   88f78:	930c      	str	r3, [sp, #48]	; 0x30
   88f7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88f7c:	2b09      	cmp	r3, #9
   88f7e:	d82a      	bhi.n	88fd6 <_dtoa_r+0x1d6>
   88f80:	2b05      	cmp	r3, #5
   88f82:	f340 8658 	ble.w	89c36 <_dtoa_r+0xe36>
   88f86:	2500      	movs	r5, #0
   88f88:	3b04      	subs	r3, #4
   88f8a:	9324      	str	r3, [sp, #144]	; 0x90
   88f8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88f8e:	3b02      	subs	r3, #2
   88f90:	2b03      	cmp	r3, #3
   88f92:	f200 863f 	bhi.w	89c14 <_dtoa_r+0xe14>
   88f96:	e8df f013 	tbh	[pc, r3, lsl #1]
   88f9a:	03ce      	.short	0x03ce
   88f9c:	03d902c3 	.word	0x03d902c3
   88fa0:	045b      	.short	0x045b
   88fa2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   88fa4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   88fa6:	443e      	add	r6, r7
   88fa8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   88fac:	2b20      	cmp	r3, #32
   88fae:	f340 8187 	ble.w	892c0 <_dtoa_r+0x4c0>
   88fb2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   88fb6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   88fba:	409d      	lsls	r5, r3
   88fbc:	fa2a f000 	lsr.w	r0, sl, r0
   88fc0:	4328      	orrs	r0, r5
   88fc2:	f002 ffb7 	bl	8bf34 <__aeabi_ui2d>
   88fc6:	2301      	movs	r3, #1
   88fc8:	3e01      	subs	r6, #1
   88fca:	9314      	str	r3, [sp, #80]	; 0x50
   88fcc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   88fd0:	e781      	b.n	88ed6 <_dtoa_r+0xd6>
   88fd2:	483b      	ldr	r0, [pc, #236]	; (890c0 <_dtoa_r+0x2c0>)
   88fd4:	e743      	b.n	88e5e <_dtoa_r+0x5e>
   88fd6:	2100      	movs	r1, #0
   88fd8:	4620      	mov	r0, r4
   88fda:	6461      	str	r1, [r4, #68]	; 0x44
   88fdc:	9125      	str	r1, [sp, #148]	; 0x94
   88fde:	f001 fee5 	bl	8adac <_Balloc>
   88fe2:	f04f 33ff 	mov.w	r3, #4294967295
   88fe6:	9307      	str	r3, [sp, #28]
   88fe8:	930f      	str	r3, [sp, #60]	; 0x3c
   88fea:	2301      	movs	r3, #1
   88fec:	9a25      	ldr	r2, [sp, #148]	; 0x94
   88fee:	9004      	str	r0, [sp, #16]
   88ff0:	6420      	str	r0, [r4, #64]	; 0x40
   88ff2:	9224      	str	r2, [sp, #144]	; 0x90
   88ff4:	930b      	str	r3, [sp, #44]	; 0x2c
   88ff6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   88ff8:	2b00      	cmp	r3, #0
   88ffa:	f2c0 80d3 	blt.w	891a4 <_dtoa_r+0x3a4>
   88ffe:	9a02      	ldr	r2, [sp, #8]
   89000:	2a0e      	cmp	r2, #14
   89002:	f300 80cf 	bgt.w	891a4 <_dtoa_r+0x3a4>
   89006:	4b2d      	ldr	r3, [pc, #180]	; (890bc <_dtoa_r+0x2bc>)
   89008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8900c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89010:	e9cd 2308 	strd	r2, r3, [sp, #32]
   89014:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89016:	2b00      	cmp	r3, #0
   89018:	f2c0 83b4 	blt.w	89784 <_dtoa_r+0x984>
   8901c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   89020:	4650      	mov	r0, sl
   89022:	462a      	mov	r2, r5
   89024:	4633      	mov	r3, r6
   89026:	4659      	mov	r1, fp
   89028:	f003 f924 	bl	8c274 <__aeabi_ddiv>
   8902c:	f003 faa8 	bl	8c580 <__aeabi_d2iz>
   89030:	4680      	mov	r8, r0
   89032:	f002 ff8f 	bl	8bf54 <__aeabi_i2d>
   89036:	462a      	mov	r2, r5
   89038:	4633      	mov	r3, r6
   8903a:	f002 fff1 	bl	8c020 <__aeabi_dmul>
   8903e:	4602      	mov	r2, r0
   89040:	460b      	mov	r3, r1
   89042:	4650      	mov	r0, sl
   89044:	4659      	mov	r1, fp
   89046:	f002 fe37 	bl	8bcb8 <__aeabi_dsub>
   8904a:	9e07      	ldr	r6, [sp, #28]
   8904c:	9f04      	ldr	r7, [sp, #16]
   8904e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   89052:	2e01      	cmp	r6, #1
   89054:	703d      	strb	r5, [r7, #0]
   89056:	4602      	mov	r2, r0
   89058:	460b      	mov	r3, r1
   8905a:	f107 0501 	add.w	r5, r7, #1
   8905e:	d064      	beq.n	8912a <_dtoa_r+0x32a>
   89060:	2200      	movs	r2, #0
   89062:	4b18      	ldr	r3, [pc, #96]	; (890c4 <_dtoa_r+0x2c4>)
   89064:	f002 ffdc 	bl	8c020 <__aeabi_dmul>
   89068:	2200      	movs	r2, #0
   8906a:	2300      	movs	r3, #0
   8906c:	4606      	mov	r6, r0
   8906e:	460f      	mov	r7, r1
   89070:	f003 fa3e 	bl	8c4f0 <__aeabi_dcmpeq>
   89074:	2800      	cmp	r0, #0
   89076:	f040 8082 	bne.w	8917e <_dtoa_r+0x37e>
   8907a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8907e:	f04f 0a00 	mov.w	sl, #0
   89082:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   89086:	f04f 0b00 	mov.w	fp, #0
   8908a:	940b      	str	r4, [sp, #44]	; 0x2c
   8908c:	e029      	b.n	890e2 <_dtoa_r+0x2e2>
   8908e:	bf00      	nop
   89090:	636f4361 	.word	0x636f4361
   89094:	3fd287a7 	.word	0x3fd287a7
   89098:	8b60c8b3 	.word	0x8b60c8b3
   8909c:	3fc68a28 	.word	0x3fc68a28
   890a0:	509f79fb 	.word	0x509f79fb
   890a4:	3fd34413 	.word	0x3fd34413
   890a8:	7ff00000 	.word	0x7ff00000
   890ac:	0008c71d 	.word	0x0008c71d
   890b0:	0008c760 	.word	0x0008c760
   890b4:	0008c76c 	.word	0x0008c76c
   890b8:	3ff80000 	.word	0x3ff80000
   890bc:	0008c7a8 	.word	0x0008c7a8
   890c0:	0008c71c 	.word	0x0008c71c
   890c4:	40240000 	.word	0x40240000
   890c8:	2200      	movs	r2, #0
   890ca:	4b81      	ldr	r3, [pc, #516]	; (892d0 <_dtoa_r+0x4d0>)
   890cc:	f002 ffa8 	bl	8c020 <__aeabi_dmul>
   890d0:	4652      	mov	r2, sl
   890d2:	465b      	mov	r3, fp
   890d4:	4606      	mov	r6, r0
   890d6:	460f      	mov	r7, r1
   890d8:	f003 fa0a 	bl	8c4f0 <__aeabi_dcmpeq>
   890dc:	2800      	cmp	r0, #0
   890de:	f040 83ba 	bne.w	89856 <_dtoa_r+0xa56>
   890e2:	4642      	mov	r2, r8
   890e4:	464b      	mov	r3, r9
   890e6:	4630      	mov	r0, r6
   890e8:	4639      	mov	r1, r7
   890ea:	f003 f8c3 	bl	8c274 <__aeabi_ddiv>
   890ee:	f003 fa47 	bl	8c580 <__aeabi_d2iz>
   890f2:	4604      	mov	r4, r0
   890f4:	f002 ff2e 	bl	8bf54 <__aeabi_i2d>
   890f8:	4642      	mov	r2, r8
   890fa:	464b      	mov	r3, r9
   890fc:	f002 ff90 	bl	8c020 <__aeabi_dmul>
   89100:	4602      	mov	r2, r0
   89102:	460b      	mov	r3, r1
   89104:	4630      	mov	r0, r6
   89106:	4639      	mov	r1, r7
   89108:	f002 fdd6 	bl	8bcb8 <__aeabi_dsub>
   8910c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   89110:	f805 6b01 	strb.w	r6, [r5], #1
   89114:	9e04      	ldr	r6, [sp, #16]
   89116:	9f07      	ldr	r7, [sp, #28]
   89118:	1bae      	subs	r6, r5, r6
   8911a:	42be      	cmp	r6, r7
   8911c:	4602      	mov	r2, r0
   8911e:	460b      	mov	r3, r1
   89120:	d1d2      	bne.n	890c8 <_dtoa_r+0x2c8>
   89122:	46a0      	mov	r8, r4
   89124:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89128:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8912a:	4610      	mov	r0, r2
   8912c:	4619      	mov	r1, r3
   8912e:	f002 fdc5 	bl	8bcbc <__adddf3>
   89132:	4606      	mov	r6, r0
   89134:	460f      	mov	r7, r1
   89136:	4602      	mov	r2, r0
   89138:	460b      	mov	r3, r1
   8913a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8913e:	f003 f9e1 	bl	8c504 <__aeabi_dcmplt>
   89142:	b948      	cbnz	r0, 89158 <_dtoa_r+0x358>
   89144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89148:	4632      	mov	r2, r6
   8914a:	463b      	mov	r3, r7
   8914c:	f003 f9d0 	bl	8c4f0 <__aeabi_dcmpeq>
   89150:	b1a8      	cbz	r0, 8917e <_dtoa_r+0x37e>
   89152:	f018 0f01 	tst.w	r8, #1
   89156:	d012      	beq.n	8917e <_dtoa_r+0x37e>
   89158:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8915c:	1e6b      	subs	r3, r5, #1
   8915e:	9a04      	ldr	r2, [sp, #16]
   89160:	e004      	b.n	8916c <_dtoa_r+0x36c>
   89162:	429a      	cmp	r2, r3
   89164:	f000 8402 	beq.w	8996c <_dtoa_r+0xb6c>
   89168:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   8916c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   89170:	f103 0501 	add.w	r5, r3, #1
   89174:	d0f5      	beq.n	89162 <_dtoa_r+0x362>
   89176:	f108 0801 	add.w	r8, r8, #1
   8917a:	f883 8000 	strb.w	r8, [r3]
   8917e:	4649      	mov	r1, r9
   89180:	4620      	mov	r0, r4
   89182:	f001 fe39 	bl	8adf8 <_Bfree>
   89186:	2200      	movs	r2, #0
   89188:	9b02      	ldr	r3, [sp, #8]
   8918a:	702a      	strb	r2, [r5, #0]
   8918c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8918e:	3301      	adds	r3, #1
   89190:	6013      	str	r3, [r2, #0]
   89192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89194:	2b00      	cmp	r3, #0
   89196:	f000 839f 	beq.w	898d8 <_dtoa_r+0xad8>
   8919a:	9804      	ldr	r0, [sp, #16]
   8919c:	601d      	str	r5, [r3, #0]
   8919e:	b01b      	add	sp, #108	; 0x6c
   891a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   891a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   891a6:	2a00      	cmp	r2, #0
   891a8:	d03e      	beq.n	89228 <_dtoa_r+0x428>
   891aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   891ac:	2a01      	cmp	r2, #1
   891ae:	f340 8311 	ble.w	897d4 <_dtoa_r+0x9d4>
   891b2:	9b07      	ldr	r3, [sp, #28]
   891b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   891b6:	1e5f      	subs	r7, r3, #1
   891b8:	42ba      	cmp	r2, r7
   891ba:	f2c0 8390 	blt.w	898de <_dtoa_r+0xade>
   891be:	1bd7      	subs	r7, r2, r7
   891c0:	9b07      	ldr	r3, [sp, #28]
   891c2:	2b00      	cmp	r3, #0
   891c4:	f2c0 848c 	blt.w	89ae0 <_dtoa_r+0xce0>
   891c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   891ca:	9b07      	ldr	r3, [sp, #28]
   891cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   891ce:	2101      	movs	r1, #1
   891d0:	441a      	add	r2, r3
   891d2:	920a      	str	r2, [sp, #40]	; 0x28
   891d4:	9a08      	ldr	r2, [sp, #32]
   891d6:	4620      	mov	r0, r4
   891d8:	441a      	add	r2, r3
   891da:	9208      	str	r2, [sp, #32]
   891dc:	f001 fea8 	bl	8af30 <__i2b>
   891e0:	4606      	mov	r6, r0
   891e2:	e023      	b.n	8922c <_dtoa_r+0x42c>
   891e4:	2301      	movs	r3, #1
   891e6:	930e      	str	r3, [sp, #56]	; 0x38
   891e8:	e6b5      	b.n	88f56 <_dtoa_r+0x156>
   891ea:	2300      	movs	r3, #0
   891ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   891ee:	930d      	str	r3, [sp, #52]	; 0x34
   891f0:	9b02      	ldr	r3, [sp, #8]
   891f2:	1ad2      	subs	r2, r2, r3
   891f4:	425b      	negs	r3, r3
   891f6:	920a      	str	r2, [sp, #40]	; 0x28
   891f8:	930c      	str	r3, [sp, #48]	; 0x30
   891fa:	e6be      	b.n	88f7a <_dtoa_r+0x17a>
   891fc:	f1c7 0301 	rsb	r3, r7, #1
   89200:	930a      	str	r3, [sp, #40]	; 0x28
   89202:	2300      	movs	r3, #0
   89204:	9308      	str	r3, [sp, #32]
   89206:	e6ad      	b.n	88f64 <_dtoa_r+0x164>
   89208:	9d02      	ldr	r5, [sp, #8]
   8920a:	4628      	mov	r0, r5
   8920c:	f002 fea2 	bl	8bf54 <__aeabi_i2d>
   89210:	4602      	mov	r2, r0
   89212:	460b      	mov	r3, r1
   89214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89218:	f003 f96a 	bl	8c4f0 <__aeabi_dcmpeq>
   8921c:	2800      	cmp	r0, #0
   8921e:	f47f ae86 	bne.w	88f2e <_dtoa_r+0x12e>
   89222:	1e6b      	subs	r3, r5, #1
   89224:	9302      	str	r3, [sp, #8]
   89226:	e682      	b.n	88f2e <_dtoa_r+0x12e>
   89228:	ad0a      	add	r5, sp, #40	; 0x28
   8922a:	cde0      	ldmia	r5, {r5, r6, r7}
   8922c:	2d00      	cmp	r5, #0
   8922e:	dd0c      	ble.n	8924a <_dtoa_r+0x44a>
   89230:	9908      	ldr	r1, [sp, #32]
   89232:	2900      	cmp	r1, #0
   89234:	460b      	mov	r3, r1
   89236:	dd08      	ble.n	8924a <_dtoa_r+0x44a>
   89238:	42a9      	cmp	r1, r5
   8923a:	bfa8      	it	ge
   8923c:	462b      	movge	r3, r5
   8923e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89240:	1aed      	subs	r5, r5, r3
   89242:	1ad2      	subs	r2, r2, r3
   89244:	1acb      	subs	r3, r1, r3
   89246:	920a      	str	r2, [sp, #40]	; 0x28
   89248:	9308      	str	r3, [sp, #32]
   8924a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8924c:	b1d3      	cbz	r3, 89284 <_dtoa_r+0x484>
   8924e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89250:	2b00      	cmp	r3, #0
   89252:	f000 82b8 	beq.w	897c6 <_dtoa_r+0x9c6>
   89256:	2f00      	cmp	r7, #0
   89258:	dd10      	ble.n	8927c <_dtoa_r+0x47c>
   8925a:	4631      	mov	r1, r6
   8925c:	463a      	mov	r2, r7
   8925e:	4620      	mov	r0, r4
   89260:	f001 ff02 	bl	8b068 <__pow5mult>
   89264:	464a      	mov	r2, r9
   89266:	4601      	mov	r1, r0
   89268:	4606      	mov	r6, r0
   8926a:	4620      	mov	r0, r4
   8926c:	f001 fe6a 	bl	8af44 <__multiply>
   89270:	4603      	mov	r3, r0
   89272:	4649      	mov	r1, r9
   89274:	4620      	mov	r0, r4
   89276:	4699      	mov	r9, r3
   89278:	f001 fdbe 	bl	8adf8 <_Bfree>
   8927c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8927e:	1bda      	subs	r2, r3, r7
   89280:	f040 82a2 	bne.w	897c8 <_dtoa_r+0x9c8>
   89284:	2101      	movs	r1, #1
   89286:	4620      	mov	r0, r4
   89288:	f001 fe52 	bl	8af30 <__i2b>
   8928c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8928e:	4680      	mov	r8, r0
   89290:	2b00      	cmp	r3, #0
   89292:	dd1f      	ble.n	892d4 <_dtoa_r+0x4d4>
   89294:	4601      	mov	r1, r0
   89296:	461a      	mov	r2, r3
   89298:	4620      	mov	r0, r4
   8929a:	f001 fee5 	bl	8b068 <__pow5mult>
   8929e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892a0:	4680      	mov	r8, r0
   892a2:	2b01      	cmp	r3, #1
   892a4:	f340 8255 	ble.w	89752 <_dtoa_r+0x952>
   892a8:	2300      	movs	r3, #0
   892aa:	930c      	str	r3, [sp, #48]	; 0x30
   892ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   892b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   892b4:	6918      	ldr	r0, [r3, #16]
   892b6:	f001 fdeb 	bl	8ae90 <__hi0bits>
   892ba:	f1c0 0020 	rsb	r0, r0, #32
   892be:	e013      	b.n	892e8 <_dtoa_r+0x4e8>
   892c0:	f1c3 0520 	rsb	r5, r3, #32
   892c4:	fa0a f005 	lsl.w	r0, sl, r5
   892c8:	e67b      	b.n	88fc2 <_dtoa_r+0x1c2>
   892ca:	900e      	str	r0, [sp, #56]	; 0x38
   892cc:	e643      	b.n	88f56 <_dtoa_r+0x156>
   892ce:	bf00      	nop
   892d0:	40240000 	.word	0x40240000
   892d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   892d6:	2b01      	cmp	r3, #1
   892d8:	f340 8285 	ble.w	897e6 <_dtoa_r+0x9e6>
   892dc:	2300      	movs	r3, #0
   892de:	930c      	str	r3, [sp, #48]	; 0x30
   892e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   892e2:	2001      	movs	r0, #1
   892e4:	2b00      	cmp	r3, #0
   892e6:	d1e1      	bne.n	892ac <_dtoa_r+0x4ac>
   892e8:	9a08      	ldr	r2, [sp, #32]
   892ea:	4410      	add	r0, r2
   892ec:	f010 001f 	ands.w	r0, r0, #31
   892f0:	f000 80a1 	beq.w	89436 <_dtoa_r+0x636>
   892f4:	f1c0 0320 	rsb	r3, r0, #32
   892f8:	2b04      	cmp	r3, #4
   892fa:	f340 8486 	ble.w	89c0a <_dtoa_r+0xe0a>
   892fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89300:	f1c0 001c 	rsb	r0, r0, #28
   89304:	4403      	add	r3, r0
   89306:	930a      	str	r3, [sp, #40]	; 0x28
   89308:	4613      	mov	r3, r2
   8930a:	4403      	add	r3, r0
   8930c:	4405      	add	r5, r0
   8930e:	9308      	str	r3, [sp, #32]
   89310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89312:	2b00      	cmp	r3, #0
   89314:	dd05      	ble.n	89322 <_dtoa_r+0x522>
   89316:	4649      	mov	r1, r9
   89318:	461a      	mov	r2, r3
   8931a:	4620      	mov	r0, r4
   8931c:	f001 fef4 	bl	8b108 <__lshift>
   89320:	4681      	mov	r9, r0
   89322:	9b08      	ldr	r3, [sp, #32]
   89324:	2b00      	cmp	r3, #0
   89326:	dd05      	ble.n	89334 <_dtoa_r+0x534>
   89328:	4641      	mov	r1, r8
   8932a:	461a      	mov	r2, r3
   8932c:	4620      	mov	r0, r4
   8932e:	f001 feeb 	bl	8b108 <__lshift>
   89332:	4680      	mov	r8, r0
   89334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89336:	2b00      	cmp	r3, #0
   89338:	f040 8086 	bne.w	89448 <_dtoa_r+0x648>
   8933c:	9b07      	ldr	r3, [sp, #28]
   8933e:	2b00      	cmp	r3, #0
   89340:	f340 8264 	ble.w	8980c <_dtoa_r+0xa0c>
   89344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89346:	2b00      	cmp	r3, #0
   89348:	f000 8098 	beq.w	8947c <_dtoa_r+0x67c>
   8934c:	2d00      	cmp	r5, #0
   8934e:	dd05      	ble.n	8935c <_dtoa_r+0x55c>
   89350:	4631      	mov	r1, r6
   89352:	462a      	mov	r2, r5
   89354:	4620      	mov	r0, r4
   89356:	f001 fed7 	bl	8b108 <__lshift>
   8935a:	4606      	mov	r6, r0
   8935c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8935e:	2b00      	cmp	r3, #0
   89360:	f040 8336 	bne.w	899d0 <_dtoa_r+0xbd0>
   89364:	9608      	str	r6, [sp, #32]
   89366:	9b07      	ldr	r3, [sp, #28]
   89368:	9a04      	ldr	r2, [sp, #16]
   8936a:	3b01      	subs	r3, #1
   8936c:	18d3      	adds	r3, r2, r3
   8936e:	930b      	str	r3, [sp, #44]	; 0x2c
   89370:	4617      	mov	r7, r2
   89372:	f00a 0301 	and.w	r3, sl, #1
   89376:	46c2      	mov	sl, r8
   89378:	f8dd b020 	ldr.w	fp, [sp, #32]
   8937c:	930c      	str	r3, [sp, #48]	; 0x30
   8937e:	4651      	mov	r1, sl
   89380:	4648      	mov	r0, r9
   89382:	f7ff fca9 	bl	88cd8 <quorem>
   89386:	4631      	mov	r1, r6
   89388:	4605      	mov	r5, r0
   8938a:	4648      	mov	r0, r9
   8938c:	f001 ff0c 	bl	8b1a8 <__mcmp>
   89390:	465a      	mov	r2, fp
   89392:	9007      	str	r0, [sp, #28]
   89394:	4651      	mov	r1, sl
   89396:	4620      	mov	r0, r4
   89398:	f001 ff22 	bl	8b1e0 <__mdiff>
   8939c:	68c2      	ldr	r2, [r0, #12]
   8939e:	4680      	mov	r8, r0
   893a0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   893a4:	2a00      	cmp	r2, #0
   893a6:	f040 8229 	bne.w	897fc <_dtoa_r+0x9fc>
   893aa:	4601      	mov	r1, r0
   893ac:	4648      	mov	r0, r9
   893ae:	930a      	str	r3, [sp, #40]	; 0x28
   893b0:	f001 fefa 	bl	8b1a8 <__mcmp>
   893b4:	4641      	mov	r1, r8
   893b6:	9008      	str	r0, [sp, #32]
   893b8:	4620      	mov	r0, r4
   893ba:	f001 fd1d 	bl	8adf8 <_Bfree>
   893be:	9a08      	ldr	r2, [sp, #32]
   893c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893c2:	b932      	cbnz	r2, 893d2 <_dtoa_r+0x5d2>
   893c4:	9924      	ldr	r1, [sp, #144]	; 0x90
   893c6:	b921      	cbnz	r1, 893d2 <_dtoa_r+0x5d2>
   893c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   893ca:	2a00      	cmp	r2, #0
   893cc:	f000 83ee 	beq.w	89bac <_dtoa_r+0xdac>
   893d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   893d2:	9907      	ldr	r1, [sp, #28]
   893d4:	2900      	cmp	r1, #0
   893d6:	f2c0 829f 	blt.w	89918 <_dtoa_r+0xb18>
   893da:	d105      	bne.n	893e8 <_dtoa_r+0x5e8>
   893dc:	9924      	ldr	r1, [sp, #144]	; 0x90
   893de:	b919      	cbnz	r1, 893e8 <_dtoa_r+0x5e8>
   893e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   893e2:	2900      	cmp	r1, #0
   893e4:	f000 8298 	beq.w	89918 <_dtoa_r+0xb18>
   893e8:	2a00      	cmp	r2, #0
   893ea:	f300 8305 	bgt.w	899f8 <_dtoa_r+0xbf8>
   893ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   893f0:	f107 0801 	add.w	r8, r7, #1
   893f4:	4297      	cmp	r7, r2
   893f6:	703b      	strb	r3, [r7, #0]
   893f8:	4645      	mov	r5, r8
   893fa:	f000 830b 	beq.w	89a14 <_dtoa_r+0xc14>
   893fe:	4649      	mov	r1, r9
   89400:	2300      	movs	r3, #0
   89402:	220a      	movs	r2, #10
   89404:	4620      	mov	r0, r4
   89406:	f001 fd01 	bl	8ae0c <__multadd>
   8940a:	455e      	cmp	r6, fp
   8940c:	4681      	mov	r9, r0
   8940e:	4631      	mov	r1, r6
   89410:	f04f 0300 	mov.w	r3, #0
   89414:	f04f 020a 	mov.w	r2, #10
   89418:	4620      	mov	r0, r4
   8941a:	f000 81e9 	beq.w	897f0 <_dtoa_r+0x9f0>
   8941e:	f001 fcf5 	bl	8ae0c <__multadd>
   89422:	4659      	mov	r1, fp
   89424:	4606      	mov	r6, r0
   89426:	2300      	movs	r3, #0
   89428:	220a      	movs	r2, #10
   8942a:	4620      	mov	r0, r4
   8942c:	f001 fcee 	bl	8ae0c <__multadd>
   89430:	4647      	mov	r7, r8
   89432:	4683      	mov	fp, r0
   89434:	e7a3      	b.n	8937e <_dtoa_r+0x57e>
   89436:	201c      	movs	r0, #28
   89438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8943a:	4405      	add	r5, r0
   8943c:	4403      	add	r3, r0
   8943e:	930a      	str	r3, [sp, #40]	; 0x28
   89440:	9b08      	ldr	r3, [sp, #32]
   89442:	4403      	add	r3, r0
   89444:	9308      	str	r3, [sp, #32]
   89446:	e763      	b.n	89310 <_dtoa_r+0x510>
   89448:	4641      	mov	r1, r8
   8944a:	4648      	mov	r0, r9
   8944c:	f001 feac 	bl	8b1a8 <__mcmp>
   89450:	2800      	cmp	r0, #0
   89452:	f6bf af73 	bge.w	8933c <_dtoa_r+0x53c>
   89456:	9f02      	ldr	r7, [sp, #8]
   89458:	4649      	mov	r1, r9
   8945a:	2300      	movs	r3, #0
   8945c:	220a      	movs	r2, #10
   8945e:	4620      	mov	r0, r4
   89460:	3f01      	subs	r7, #1
   89462:	9702      	str	r7, [sp, #8]
   89464:	f001 fcd2 	bl	8ae0c <__multadd>
   89468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8946a:	4681      	mov	r9, r0
   8946c:	2b00      	cmp	r3, #0
   8946e:	f040 83b5 	bne.w	89bdc <_dtoa_r+0xddc>
   89472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89474:	2b00      	cmp	r3, #0
   89476:	f340 83be 	ble.w	89bf6 <_dtoa_r+0xdf6>
   8947a:	9307      	str	r3, [sp, #28]
   8947c:	f8dd a010 	ldr.w	sl, [sp, #16]
   89480:	9f07      	ldr	r7, [sp, #28]
   89482:	4655      	mov	r5, sl
   89484:	e006      	b.n	89494 <_dtoa_r+0x694>
   89486:	4649      	mov	r1, r9
   89488:	2300      	movs	r3, #0
   8948a:	220a      	movs	r2, #10
   8948c:	4620      	mov	r0, r4
   8948e:	f001 fcbd 	bl	8ae0c <__multadd>
   89492:	4681      	mov	r9, r0
   89494:	4641      	mov	r1, r8
   89496:	4648      	mov	r0, r9
   89498:	f7ff fc1e 	bl	88cd8 <quorem>
   8949c:	3030      	adds	r0, #48	; 0x30
   8949e:	f805 0b01 	strb.w	r0, [r5], #1
   894a2:	eba5 030a 	sub.w	r3, r5, sl
   894a6:	42bb      	cmp	r3, r7
   894a8:	dbed      	blt.n	89486 <_dtoa_r+0x686>
   894aa:	9b04      	ldr	r3, [sp, #16]
   894ac:	9a07      	ldr	r2, [sp, #28]
   894ae:	4682      	mov	sl, r0
   894b0:	2a01      	cmp	r2, #1
   894b2:	bfac      	ite	ge
   894b4:	189b      	addge	r3, r3, r2
   894b6:	3301      	addlt	r3, #1
   894b8:	f04f 0b00 	mov.w	fp, #0
   894bc:	461d      	mov	r5, r3
   894be:	4649      	mov	r1, r9
   894c0:	2201      	movs	r2, #1
   894c2:	4620      	mov	r0, r4
   894c4:	f001 fe20 	bl	8b108 <__lshift>
   894c8:	4641      	mov	r1, r8
   894ca:	4681      	mov	r9, r0
   894cc:	f001 fe6c 	bl	8b1a8 <__mcmp>
   894d0:	2800      	cmp	r0, #0
   894d2:	f340 823f 	ble.w	89954 <_dtoa_r+0xb54>
   894d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   894da:	1e6b      	subs	r3, r5, #1
   894dc:	9904      	ldr	r1, [sp, #16]
   894de:	e004      	b.n	894ea <_dtoa_r+0x6ea>
   894e0:	428b      	cmp	r3, r1
   894e2:	f000 81ae 	beq.w	89842 <_dtoa_r+0xa42>
   894e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   894ea:	2a39      	cmp	r2, #57	; 0x39
   894ec:	f103 0501 	add.w	r5, r3, #1
   894f0:	d0f6      	beq.n	894e0 <_dtoa_r+0x6e0>
   894f2:	3201      	adds	r2, #1
   894f4:	701a      	strb	r2, [r3, #0]
   894f6:	4641      	mov	r1, r8
   894f8:	4620      	mov	r0, r4
   894fa:	f001 fc7d 	bl	8adf8 <_Bfree>
   894fe:	2e00      	cmp	r6, #0
   89500:	f43f ae3d 	beq.w	8917e <_dtoa_r+0x37e>
   89504:	f1bb 0f00 	cmp.w	fp, #0
   89508:	d005      	beq.n	89516 <_dtoa_r+0x716>
   8950a:	45b3      	cmp	fp, r6
   8950c:	d003      	beq.n	89516 <_dtoa_r+0x716>
   8950e:	4659      	mov	r1, fp
   89510:	4620      	mov	r0, r4
   89512:	f001 fc71 	bl	8adf8 <_Bfree>
   89516:	4631      	mov	r1, r6
   89518:	4620      	mov	r0, r4
   8951a:	f001 fc6d 	bl	8adf8 <_Bfree>
   8951e:	e62e      	b.n	8917e <_dtoa_r+0x37e>
   89520:	2300      	movs	r3, #0
   89522:	930b      	str	r3, [sp, #44]	; 0x2c
   89524:	9b02      	ldr	r3, [sp, #8]
   89526:	9a25      	ldr	r2, [sp, #148]	; 0x94
   89528:	4413      	add	r3, r2
   8952a:	930f      	str	r3, [sp, #60]	; 0x3c
   8952c:	3301      	adds	r3, #1
   8952e:	2b01      	cmp	r3, #1
   89530:	461f      	mov	r7, r3
   89532:	461e      	mov	r6, r3
   89534:	bfb8      	it	lt
   89536:	2701      	movlt	r7, #1
   89538:	9307      	str	r3, [sp, #28]
   8953a:	2100      	movs	r1, #0
   8953c:	2f17      	cmp	r7, #23
   8953e:	6461      	str	r1, [r4, #68]	; 0x44
   89540:	d90a      	bls.n	89558 <_dtoa_r+0x758>
   89542:	2201      	movs	r2, #1
   89544:	2304      	movs	r3, #4
   89546:	005b      	lsls	r3, r3, #1
   89548:	f103 0014 	add.w	r0, r3, #20
   8954c:	4287      	cmp	r7, r0
   8954e:	4611      	mov	r1, r2
   89550:	f102 0201 	add.w	r2, r2, #1
   89554:	d2f7      	bcs.n	89546 <_dtoa_r+0x746>
   89556:	6461      	str	r1, [r4, #68]	; 0x44
   89558:	4620      	mov	r0, r4
   8955a:	f001 fc27 	bl	8adac <_Balloc>
   8955e:	2e0e      	cmp	r6, #14
   89560:	9004      	str	r0, [sp, #16]
   89562:	6420      	str	r0, [r4, #64]	; 0x40
   89564:	f63f ad47 	bhi.w	88ff6 <_dtoa_r+0x1f6>
   89568:	2d00      	cmp	r5, #0
   8956a:	f43f ad44 	beq.w	88ff6 <_dtoa_r+0x1f6>
   8956e:	9902      	ldr	r1, [sp, #8]
   89570:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   89574:	2900      	cmp	r1, #0
   89576:	f340 8203 	ble.w	89980 <_dtoa_r+0xb80>
   8957a:	4bb9      	ldr	r3, [pc, #740]	; (89860 <_dtoa_r+0xa60>)
   8957c:	f001 020f 	and.w	r2, r1, #15
   89580:	110d      	asrs	r5, r1, #4
   89582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89586:	06e9      	lsls	r1, r5, #27
   89588:	e9d3 6700 	ldrd	r6, r7, [r3]
   8958c:	f140 81af 	bpl.w	898ee <_dtoa_r+0xaee>
   89590:	4bb4      	ldr	r3, [pc, #720]	; (89864 <_dtoa_r+0xa64>)
   89592:	4650      	mov	r0, sl
   89594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89598:	4659      	mov	r1, fp
   8959a:	f002 fe6b 	bl	8c274 <__aeabi_ddiv>
   8959e:	f04f 0a03 	mov.w	sl, #3
   895a2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   895a6:	f005 050f 	and.w	r5, r5, #15
   895aa:	b18d      	cbz	r5, 895d0 <_dtoa_r+0x7d0>
   895ac:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 89864 <_dtoa_r+0xa64>
   895b0:	07ea      	lsls	r2, r5, #31
   895b2:	d509      	bpl.n	895c8 <_dtoa_r+0x7c8>
   895b4:	e9d8 2300 	ldrd	r2, r3, [r8]
   895b8:	4630      	mov	r0, r6
   895ba:	4639      	mov	r1, r7
   895bc:	f002 fd30 	bl	8c020 <__aeabi_dmul>
   895c0:	4606      	mov	r6, r0
   895c2:	460f      	mov	r7, r1
   895c4:	f10a 0a01 	add.w	sl, sl, #1
   895c8:	106d      	asrs	r5, r5, #1
   895ca:	f108 0808 	add.w	r8, r8, #8
   895ce:	d1ef      	bne.n	895b0 <_dtoa_r+0x7b0>
   895d0:	463b      	mov	r3, r7
   895d2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   895d6:	4632      	mov	r2, r6
   895d8:	f002 fe4c 	bl	8c274 <__aeabi_ddiv>
   895dc:	4607      	mov	r7, r0
   895de:	4688      	mov	r8, r1
   895e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   895e2:	b143      	cbz	r3, 895f6 <_dtoa_r+0x7f6>
   895e4:	2200      	movs	r2, #0
   895e6:	4ba0      	ldr	r3, [pc, #640]	; (89868 <_dtoa_r+0xa68>)
   895e8:	4638      	mov	r0, r7
   895ea:	4641      	mov	r1, r8
   895ec:	f002 ff8a 	bl	8c504 <__aeabi_dcmplt>
   895f0:	2800      	cmp	r0, #0
   895f2:	f040 8287 	bne.w	89b04 <_dtoa_r+0xd04>
   895f6:	4650      	mov	r0, sl
   895f8:	f002 fcac 	bl	8bf54 <__aeabi_i2d>
   895fc:	463a      	mov	r2, r7
   895fe:	4643      	mov	r3, r8
   89600:	f002 fd0e 	bl	8c020 <__aeabi_dmul>
   89604:	4b99      	ldr	r3, [pc, #612]	; (8986c <_dtoa_r+0xa6c>)
   89606:	2200      	movs	r2, #0
   89608:	f002 fb58 	bl	8bcbc <__adddf3>
   8960c:	9b07      	ldr	r3, [sp, #28]
   8960e:	4605      	mov	r5, r0
   89610:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89614:	2b00      	cmp	r3, #0
   89616:	f000 813f 	beq.w	89898 <_dtoa_r+0xa98>
   8961a:	9b02      	ldr	r3, [sp, #8]
   8961c:	9315      	str	r3, [sp, #84]	; 0x54
   8961e:	9b07      	ldr	r3, [sp, #28]
   89620:	9312      	str	r3, [sp, #72]	; 0x48
   89622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89624:	2b00      	cmp	r3, #0
   89626:	f000 81fb 	beq.w	89a20 <_dtoa_r+0xc20>
   8962a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8962c:	4b8c      	ldr	r3, [pc, #560]	; (89860 <_dtoa_r+0xa60>)
   8962e:	2000      	movs	r0, #0
   89630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89634:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89638:	498d      	ldr	r1, [pc, #564]	; (89870 <_dtoa_r+0xa70>)
   8963a:	f002 fe1b 	bl	8c274 <__aeabi_ddiv>
   8963e:	462a      	mov	r2, r5
   89640:	4633      	mov	r3, r6
   89642:	f002 fb39 	bl	8bcb8 <__aeabi_dsub>
   89646:	4682      	mov	sl, r0
   89648:	468b      	mov	fp, r1
   8964a:	4638      	mov	r0, r7
   8964c:	4641      	mov	r1, r8
   8964e:	f002 ff97 	bl	8c580 <__aeabi_d2iz>
   89652:	4605      	mov	r5, r0
   89654:	f002 fc7e 	bl	8bf54 <__aeabi_i2d>
   89658:	4602      	mov	r2, r0
   8965a:	460b      	mov	r3, r1
   8965c:	4638      	mov	r0, r7
   8965e:	4641      	mov	r1, r8
   89660:	f002 fb2a 	bl	8bcb8 <__aeabi_dsub>
   89664:	3530      	adds	r5, #48	; 0x30
   89666:	fa5f f885 	uxtb.w	r8, r5
   8966a:	9d04      	ldr	r5, [sp, #16]
   8966c:	4606      	mov	r6, r0
   8966e:	460f      	mov	r7, r1
   89670:	f885 8000 	strb.w	r8, [r5]
   89674:	4602      	mov	r2, r0
   89676:	460b      	mov	r3, r1
   89678:	4650      	mov	r0, sl
   8967a:	4659      	mov	r1, fp
   8967c:	3501      	adds	r5, #1
   8967e:	f002 ff5f 	bl	8c540 <__aeabi_dcmpgt>
   89682:	2800      	cmp	r0, #0
   89684:	d154      	bne.n	89730 <_dtoa_r+0x930>
   89686:	4632      	mov	r2, r6
   89688:	463b      	mov	r3, r7
   8968a:	2000      	movs	r0, #0
   8968c:	4976      	ldr	r1, [pc, #472]	; (89868 <_dtoa_r+0xa68>)
   8968e:	f002 fb13 	bl	8bcb8 <__aeabi_dsub>
   89692:	4602      	mov	r2, r0
   89694:	460b      	mov	r3, r1
   89696:	4650      	mov	r0, sl
   89698:	4659      	mov	r1, fp
   8969a:	f002 ff51 	bl	8c540 <__aeabi_dcmpgt>
   8969e:	2800      	cmp	r0, #0
   896a0:	f040 8270 	bne.w	89b84 <_dtoa_r+0xd84>
   896a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   896a6:	2a01      	cmp	r2, #1
   896a8:	f000 8112 	beq.w	898d0 <_dtoa_r+0xad0>
   896ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   896ae:	9a04      	ldr	r2, [sp, #16]
   896b0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   896b4:	4413      	add	r3, r2
   896b6:	4699      	mov	r9, r3
   896b8:	e00f      	b.n	896da <_dtoa_r+0x8da>
   896ba:	4632      	mov	r2, r6
   896bc:	463b      	mov	r3, r7
   896be:	2000      	movs	r0, #0
   896c0:	4969      	ldr	r1, [pc, #420]	; (89868 <_dtoa_r+0xa68>)
   896c2:	f002 faf9 	bl	8bcb8 <__aeabi_dsub>
   896c6:	4652      	mov	r2, sl
   896c8:	465b      	mov	r3, fp
   896ca:	f002 ff1b 	bl	8c504 <__aeabi_dcmplt>
   896ce:	2800      	cmp	r0, #0
   896d0:	f040 8256 	bne.w	89b80 <_dtoa_r+0xd80>
   896d4:	454d      	cmp	r5, r9
   896d6:	f000 80f9 	beq.w	898cc <_dtoa_r+0xacc>
   896da:	4650      	mov	r0, sl
   896dc:	4659      	mov	r1, fp
   896de:	2200      	movs	r2, #0
   896e0:	4b64      	ldr	r3, [pc, #400]	; (89874 <_dtoa_r+0xa74>)
   896e2:	f002 fc9d 	bl	8c020 <__aeabi_dmul>
   896e6:	2200      	movs	r2, #0
   896e8:	4b62      	ldr	r3, [pc, #392]	; (89874 <_dtoa_r+0xa74>)
   896ea:	4682      	mov	sl, r0
   896ec:	468b      	mov	fp, r1
   896ee:	4630      	mov	r0, r6
   896f0:	4639      	mov	r1, r7
   896f2:	f002 fc95 	bl	8c020 <__aeabi_dmul>
   896f6:	460f      	mov	r7, r1
   896f8:	4606      	mov	r6, r0
   896fa:	f002 ff41 	bl	8c580 <__aeabi_d2iz>
   896fe:	4680      	mov	r8, r0
   89700:	f002 fc28 	bl	8bf54 <__aeabi_i2d>
   89704:	4602      	mov	r2, r0
   89706:	460b      	mov	r3, r1
   89708:	4630      	mov	r0, r6
   8970a:	4639      	mov	r1, r7
   8970c:	f002 fad4 	bl	8bcb8 <__aeabi_dsub>
   89710:	f108 0830 	add.w	r8, r8, #48	; 0x30
   89714:	fa5f f888 	uxtb.w	r8, r8
   89718:	f805 8b01 	strb.w	r8, [r5], #1
   8971c:	4652      	mov	r2, sl
   8971e:	465b      	mov	r3, fp
   89720:	4606      	mov	r6, r0
   89722:	460f      	mov	r7, r1
   89724:	f002 feee 	bl	8c504 <__aeabi_dcmplt>
   89728:	2800      	cmp	r0, #0
   8972a:	d0c6      	beq.n	896ba <_dtoa_r+0x8ba>
   8972c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89730:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89732:	9302      	str	r3, [sp, #8]
   89734:	e523      	b.n	8917e <_dtoa_r+0x37e>
   89736:	2300      	movs	r3, #0
   89738:	930b      	str	r3, [sp, #44]	; 0x2c
   8973a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8973c:	2b00      	cmp	r3, #0
   8973e:	f340 80dd 	ble.w	898fc <_dtoa_r+0xafc>
   89742:	461f      	mov	r7, r3
   89744:	461e      	mov	r6, r3
   89746:	930f      	str	r3, [sp, #60]	; 0x3c
   89748:	9307      	str	r3, [sp, #28]
   8974a:	e6f6      	b.n	8953a <_dtoa_r+0x73a>
   8974c:	2301      	movs	r3, #1
   8974e:	930b      	str	r3, [sp, #44]	; 0x2c
   89750:	e7f3      	b.n	8973a <_dtoa_r+0x93a>
   89752:	f1ba 0f00 	cmp.w	sl, #0
   89756:	f47f ada7 	bne.w	892a8 <_dtoa_r+0x4a8>
   8975a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8975e:	2b00      	cmp	r3, #0
   89760:	f47f adbc 	bne.w	892dc <_dtoa_r+0x4dc>
   89764:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   89768:	0d3f      	lsrs	r7, r7, #20
   8976a:	053f      	lsls	r7, r7, #20
   8976c:	2f00      	cmp	r7, #0
   8976e:	f000 820d 	beq.w	89b8c <_dtoa_r+0xd8c>
   89772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89774:	3301      	adds	r3, #1
   89776:	930a      	str	r3, [sp, #40]	; 0x28
   89778:	9b08      	ldr	r3, [sp, #32]
   8977a:	3301      	adds	r3, #1
   8977c:	9308      	str	r3, [sp, #32]
   8977e:	2301      	movs	r3, #1
   89780:	930c      	str	r3, [sp, #48]	; 0x30
   89782:	e5ad      	b.n	892e0 <_dtoa_r+0x4e0>
   89784:	9b07      	ldr	r3, [sp, #28]
   89786:	2b00      	cmp	r3, #0
   89788:	f73f ac48 	bgt.w	8901c <_dtoa_r+0x21c>
   8978c:	f040 8222 	bne.w	89bd4 <_dtoa_r+0xdd4>
   89790:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89794:	2200      	movs	r2, #0
   89796:	4b38      	ldr	r3, [pc, #224]	; (89878 <_dtoa_r+0xa78>)
   89798:	f002 fc42 	bl	8c020 <__aeabi_dmul>
   8979c:	4652      	mov	r2, sl
   8979e:	465b      	mov	r3, fp
   897a0:	f002 fec4 	bl	8c52c <__aeabi_dcmpge>
   897a4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   897a8:	4646      	mov	r6, r8
   897aa:	2800      	cmp	r0, #0
   897ac:	d041      	beq.n	89832 <_dtoa_r+0xa32>
   897ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
   897b0:	9d04      	ldr	r5, [sp, #16]
   897b2:	43db      	mvns	r3, r3
   897b4:	9302      	str	r3, [sp, #8]
   897b6:	4641      	mov	r1, r8
   897b8:	4620      	mov	r0, r4
   897ba:	f001 fb1d 	bl	8adf8 <_Bfree>
   897be:	2e00      	cmp	r6, #0
   897c0:	f43f acdd 	beq.w	8917e <_dtoa_r+0x37e>
   897c4:	e6a7      	b.n	89516 <_dtoa_r+0x716>
   897c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   897c8:	4649      	mov	r1, r9
   897ca:	4620      	mov	r0, r4
   897cc:	f001 fc4c 	bl	8b068 <__pow5mult>
   897d0:	4681      	mov	r9, r0
   897d2:	e557      	b.n	89284 <_dtoa_r+0x484>
   897d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   897d6:	2a00      	cmp	r2, #0
   897d8:	f000 8188 	beq.w	89aec <_dtoa_r+0xcec>
   897dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   897e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   897e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   897e4:	e4f2      	b.n	891cc <_dtoa_r+0x3cc>
   897e6:	f1ba 0f00 	cmp.w	sl, #0
   897ea:	f47f ad77 	bne.w	892dc <_dtoa_r+0x4dc>
   897ee:	e7b4      	b.n	8975a <_dtoa_r+0x95a>
   897f0:	f001 fb0c 	bl	8ae0c <__multadd>
   897f4:	4647      	mov	r7, r8
   897f6:	4606      	mov	r6, r0
   897f8:	4683      	mov	fp, r0
   897fa:	e5c0      	b.n	8937e <_dtoa_r+0x57e>
   897fc:	4601      	mov	r1, r0
   897fe:	4620      	mov	r0, r4
   89800:	9308      	str	r3, [sp, #32]
   89802:	f001 faf9 	bl	8adf8 <_Bfree>
   89806:	2201      	movs	r2, #1
   89808:	9b08      	ldr	r3, [sp, #32]
   8980a:	e5e2      	b.n	893d2 <_dtoa_r+0x5d2>
   8980c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8980e:	2b02      	cmp	r3, #2
   89810:	f77f ad98 	ble.w	89344 <_dtoa_r+0x544>
   89814:	9b07      	ldr	r3, [sp, #28]
   89816:	2b00      	cmp	r3, #0
   89818:	d1c9      	bne.n	897ae <_dtoa_r+0x9ae>
   8981a:	4641      	mov	r1, r8
   8981c:	2205      	movs	r2, #5
   8981e:	4620      	mov	r0, r4
   89820:	f001 faf4 	bl	8ae0c <__multadd>
   89824:	4601      	mov	r1, r0
   89826:	4680      	mov	r8, r0
   89828:	4648      	mov	r0, r9
   8982a:	f001 fcbd 	bl	8b1a8 <__mcmp>
   8982e:	2800      	cmp	r0, #0
   89830:	ddbd      	ble.n	897ae <_dtoa_r+0x9ae>
   89832:	2331      	movs	r3, #49	; 0x31
   89834:	9a02      	ldr	r2, [sp, #8]
   89836:	9904      	ldr	r1, [sp, #16]
   89838:	3201      	adds	r2, #1
   8983a:	9202      	str	r2, [sp, #8]
   8983c:	700b      	strb	r3, [r1, #0]
   8983e:	1c4d      	adds	r5, r1, #1
   89840:	e7b9      	b.n	897b6 <_dtoa_r+0x9b6>
   89842:	2331      	movs	r3, #49	; 0x31
   89844:	9a02      	ldr	r2, [sp, #8]
   89846:	3201      	adds	r2, #1
   89848:	9202      	str	r2, [sp, #8]
   8984a:	9a04      	ldr	r2, [sp, #16]
   8984c:	7013      	strb	r3, [r2, #0]
   8984e:	e652      	b.n	894f6 <_dtoa_r+0x6f6>
   89850:	2301      	movs	r3, #1
   89852:	930b      	str	r3, [sp, #44]	; 0x2c
   89854:	e666      	b.n	89524 <_dtoa_r+0x724>
   89856:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8985a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8985c:	e48f      	b.n	8917e <_dtoa_r+0x37e>
   8985e:	bf00      	nop
   89860:	0008c7a8 	.word	0x0008c7a8
   89864:	0008c780 	.word	0x0008c780
   89868:	3ff00000 	.word	0x3ff00000
   8986c:	401c0000 	.word	0x401c0000
   89870:	3fe00000 	.word	0x3fe00000
   89874:	40240000 	.word	0x40240000
   89878:	40140000 	.word	0x40140000
   8987c:	4650      	mov	r0, sl
   8987e:	f002 fb69 	bl	8bf54 <__aeabi_i2d>
   89882:	463a      	mov	r2, r7
   89884:	4643      	mov	r3, r8
   89886:	f002 fbcb 	bl	8c020 <__aeabi_dmul>
   8988a:	2200      	movs	r2, #0
   8988c:	4bc1      	ldr	r3, [pc, #772]	; (89b94 <_dtoa_r+0xd94>)
   8988e:	f002 fa15 	bl	8bcbc <__adddf3>
   89892:	4605      	mov	r5, r0
   89894:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89898:	4641      	mov	r1, r8
   8989a:	2200      	movs	r2, #0
   8989c:	4bbe      	ldr	r3, [pc, #760]	; (89b98 <_dtoa_r+0xd98>)
   8989e:	4638      	mov	r0, r7
   898a0:	f002 fa0a 	bl	8bcb8 <__aeabi_dsub>
   898a4:	462a      	mov	r2, r5
   898a6:	4633      	mov	r3, r6
   898a8:	4682      	mov	sl, r0
   898aa:	468b      	mov	fp, r1
   898ac:	f002 fe48 	bl	8c540 <__aeabi_dcmpgt>
   898b0:	4680      	mov	r8, r0
   898b2:	2800      	cmp	r0, #0
   898b4:	f040 8110 	bne.w	89ad8 <_dtoa_r+0xcd8>
   898b8:	462a      	mov	r2, r5
   898ba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   898be:	4650      	mov	r0, sl
   898c0:	4659      	mov	r1, fp
   898c2:	f002 fe1f 	bl	8c504 <__aeabi_dcmplt>
   898c6:	b118      	cbz	r0, 898d0 <_dtoa_r+0xad0>
   898c8:	4646      	mov	r6, r8
   898ca:	e770      	b.n	897ae <_dtoa_r+0x9ae>
   898cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   898d0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   898d4:	f7ff bb8f 	b.w	88ff6 <_dtoa_r+0x1f6>
   898d8:	9804      	ldr	r0, [sp, #16]
   898da:	f7ff bac0 	b.w	88e5e <_dtoa_r+0x5e>
   898de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   898e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   898e2:	1afb      	subs	r3, r7, r3
   898e4:	441a      	add	r2, r3
   898e6:	970c      	str	r7, [sp, #48]	; 0x30
   898e8:	920d      	str	r2, [sp, #52]	; 0x34
   898ea:	2700      	movs	r7, #0
   898ec:	e468      	b.n	891c0 <_dtoa_r+0x3c0>
   898ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   898f2:	f04f 0a02 	mov.w	sl, #2
   898f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   898fa:	e656      	b.n	895aa <_dtoa_r+0x7aa>
   898fc:	2100      	movs	r1, #0
   898fe:	2301      	movs	r3, #1
   89900:	4620      	mov	r0, r4
   89902:	6461      	str	r1, [r4, #68]	; 0x44
   89904:	9325      	str	r3, [sp, #148]	; 0x94
   89906:	f001 fa51 	bl	8adac <_Balloc>
   8990a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8990c:	9004      	str	r0, [sp, #16]
   8990e:	9307      	str	r3, [sp, #28]
   89910:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89912:	6420      	str	r0, [r4, #64]	; 0x40
   89914:	930f      	str	r3, [sp, #60]	; 0x3c
   89916:	e627      	b.n	89568 <_dtoa_r+0x768>
   89918:	2a00      	cmp	r2, #0
   8991a:	46d0      	mov	r8, sl
   8991c:	f8cd b020 	str.w	fp, [sp, #32]
   89920:	469a      	mov	sl, r3
   89922:	dd11      	ble.n	89948 <_dtoa_r+0xb48>
   89924:	4649      	mov	r1, r9
   89926:	2201      	movs	r2, #1
   89928:	4620      	mov	r0, r4
   8992a:	f001 fbed 	bl	8b108 <__lshift>
   8992e:	4641      	mov	r1, r8
   89930:	4681      	mov	r9, r0
   89932:	f001 fc39 	bl	8b1a8 <__mcmp>
   89936:	2800      	cmp	r0, #0
   89938:	f340 8145 	ble.w	89bc6 <_dtoa_r+0xdc6>
   8993c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   89940:	f000 8105 	beq.w	89b4e <_dtoa_r+0xd4e>
   89944:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   89948:	46b3      	mov	fp, r6
   8994a:	f887 a000 	strb.w	sl, [r7]
   8994e:	1c7d      	adds	r5, r7, #1
   89950:	9e08      	ldr	r6, [sp, #32]
   89952:	e5d0      	b.n	894f6 <_dtoa_r+0x6f6>
   89954:	d104      	bne.n	89960 <_dtoa_r+0xb60>
   89956:	f01a 0f01 	tst.w	sl, #1
   8995a:	d001      	beq.n	89960 <_dtoa_r+0xb60>
   8995c:	e5bb      	b.n	894d6 <_dtoa_r+0x6d6>
   8995e:	4615      	mov	r5, r2
   89960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89964:	1e6a      	subs	r2, r5, #1
   89966:	2b30      	cmp	r3, #48	; 0x30
   89968:	d0f9      	beq.n	8995e <_dtoa_r+0xb5e>
   8996a:	e5c4      	b.n	894f6 <_dtoa_r+0x6f6>
   8996c:	2230      	movs	r2, #48	; 0x30
   8996e:	9904      	ldr	r1, [sp, #16]
   89970:	700a      	strb	r2, [r1, #0]
   89972:	9a02      	ldr	r2, [sp, #8]
   89974:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   89978:	3201      	adds	r2, #1
   8997a:	9202      	str	r2, [sp, #8]
   8997c:	f7ff bbfb 	b.w	89176 <_dtoa_r+0x376>
   89980:	f000 80bb 	beq.w	89afa <_dtoa_r+0xcfa>
   89984:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89988:	9b02      	ldr	r3, [sp, #8]
   8998a:	f04f 0a02 	mov.w	sl, #2
   8998e:	425d      	negs	r5, r3
   89990:	4b82      	ldr	r3, [pc, #520]	; (89b9c <_dtoa_r+0xd9c>)
   89992:	f005 020f 	and.w	r2, r5, #15
   89996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8999a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8999e:	f002 fb3f 	bl	8c020 <__aeabi_dmul>
   899a2:	112d      	asrs	r5, r5, #4
   899a4:	4607      	mov	r7, r0
   899a6:	4688      	mov	r8, r1
   899a8:	f43f ae1a 	beq.w	895e0 <_dtoa_r+0x7e0>
   899ac:	4e7c      	ldr	r6, [pc, #496]	; (89ba0 <_dtoa_r+0xda0>)
   899ae:	07eb      	lsls	r3, r5, #31
   899b0:	d509      	bpl.n	899c6 <_dtoa_r+0xbc6>
   899b2:	e9d6 2300 	ldrd	r2, r3, [r6]
   899b6:	4638      	mov	r0, r7
   899b8:	4641      	mov	r1, r8
   899ba:	f002 fb31 	bl	8c020 <__aeabi_dmul>
   899be:	4607      	mov	r7, r0
   899c0:	4688      	mov	r8, r1
   899c2:	f10a 0a01 	add.w	sl, sl, #1
   899c6:	106d      	asrs	r5, r5, #1
   899c8:	f106 0608 	add.w	r6, r6, #8
   899cc:	d1ef      	bne.n	899ae <_dtoa_r+0xbae>
   899ce:	e607      	b.n	895e0 <_dtoa_r+0x7e0>
   899d0:	6871      	ldr	r1, [r6, #4]
   899d2:	4620      	mov	r0, r4
   899d4:	f001 f9ea 	bl	8adac <_Balloc>
   899d8:	4605      	mov	r5, r0
   899da:	6933      	ldr	r3, [r6, #16]
   899dc:	f106 010c 	add.w	r1, r6, #12
   899e0:	3302      	adds	r3, #2
   899e2:	009a      	lsls	r2, r3, #2
   899e4:	300c      	adds	r0, #12
   899e6:	f7fc fda1 	bl	8652c <memcpy>
   899ea:	4629      	mov	r1, r5
   899ec:	2201      	movs	r2, #1
   899ee:	4620      	mov	r0, r4
   899f0:	f001 fb8a 	bl	8b108 <__lshift>
   899f4:	9008      	str	r0, [sp, #32]
   899f6:	e4b6      	b.n	89366 <_dtoa_r+0x566>
   899f8:	2b39      	cmp	r3, #57	; 0x39
   899fa:	f8cd b020 	str.w	fp, [sp, #32]
   899fe:	46d0      	mov	r8, sl
   89a00:	f000 80a5 	beq.w	89b4e <_dtoa_r+0xd4e>
   89a04:	f103 0a01 	add.w	sl, r3, #1
   89a08:	46b3      	mov	fp, r6
   89a0a:	f887 a000 	strb.w	sl, [r7]
   89a0e:	1c7d      	adds	r5, r7, #1
   89a10:	9e08      	ldr	r6, [sp, #32]
   89a12:	e570      	b.n	894f6 <_dtoa_r+0x6f6>
   89a14:	465a      	mov	r2, fp
   89a16:	46d0      	mov	r8, sl
   89a18:	46b3      	mov	fp, r6
   89a1a:	469a      	mov	sl, r3
   89a1c:	4616      	mov	r6, r2
   89a1e:	e54e      	b.n	894be <_dtoa_r+0x6be>
   89a20:	9812      	ldr	r0, [sp, #72]	; 0x48
   89a22:	495e      	ldr	r1, [pc, #376]	; (89b9c <_dtoa_r+0xd9c>)
   89a24:	462a      	mov	r2, r5
   89a26:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89a2a:	4633      	mov	r3, r6
   89a2c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89a30:	f002 faf6 	bl	8c020 <__aeabi_dmul>
   89a34:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   89a38:	4638      	mov	r0, r7
   89a3a:	4641      	mov	r1, r8
   89a3c:	f002 fda0 	bl	8c580 <__aeabi_d2iz>
   89a40:	4605      	mov	r5, r0
   89a42:	f002 fa87 	bl	8bf54 <__aeabi_i2d>
   89a46:	4602      	mov	r2, r0
   89a48:	460b      	mov	r3, r1
   89a4a:	4638      	mov	r0, r7
   89a4c:	4641      	mov	r1, r8
   89a4e:	f002 f933 	bl	8bcb8 <__aeabi_dsub>
   89a52:	4606      	mov	r6, r0
   89a54:	9812      	ldr	r0, [sp, #72]	; 0x48
   89a56:	9a04      	ldr	r2, [sp, #16]
   89a58:	3530      	adds	r5, #48	; 0x30
   89a5a:	2801      	cmp	r0, #1
   89a5c:	7015      	strb	r5, [r2, #0]
   89a5e:	460f      	mov	r7, r1
   89a60:	f102 0501 	add.w	r5, r2, #1
   89a64:	d026      	beq.n	89ab4 <_dtoa_r+0xcb4>
   89a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89a68:	9a04      	ldr	r2, [sp, #16]
   89a6a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   89a6e:	4413      	add	r3, r2
   89a70:	f04f 0a00 	mov.w	sl, #0
   89a74:	4699      	mov	r9, r3
   89a76:	f8df b130 	ldr.w	fp, [pc, #304]	; 89ba8 <_dtoa_r+0xda8>
   89a7a:	4652      	mov	r2, sl
   89a7c:	465b      	mov	r3, fp
   89a7e:	4630      	mov	r0, r6
   89a80:	4639      	mov	r1, r7
   89a82:	f002 facd 	bl	8c020 <__aeabi_dmul>
   89a86:	460f      	mov	r7, r1
   89a88:	4606      	mov	r6, r0
   89a8a:	f002 fd79 	bl	8c580 <__aeabi_d2iz>
   89a8e:	4680      	mov	r8, r0
   89a90:	f002 fa60 	bl	8bf54 <__aeabi_i2d>
   89a94:	4602      	mov	r2, r0
   89a96:	460b      	mov	r3, r1
   89a98:	4630      	mov	r0, r6
   89a9a:	4639      	mov	r1, r7
   89a9c:	f002 f90c 	bl	8bcb8 <__aeabi_dsub>
   89aa0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   89aa4:	f805 8b01 	strb.w	r8, [r5], #1
   89aa8:	454d      	cmp	r5, r9
   89aaa:	4606      	mov	r6, r0
   89aac:	460f      	mov	r7, r1
   89aae:	d1e4      	bne.n	89a7a <_dtoa_r+0xc7a>
   89ab0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89ab4:	2200      	movs	r2, #0
   89ab6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   89aba:	4b3a      	ldr	r3, [pc, #232]	; (89ba4 <_dtoa_r+0xda4>)
   89abc:	f002 f8fe 	bl	8bcbc <__adddf3>
   89ac0:	4632      	mov	r2, r6
   89ac2:	463b      	mov	r3, r7
   89ac4:	f002 fd1e 	bl	8c504 <__aeabi_dcmplt>
   89ac8:	2800      	cmp	r0, #0
   89aca:	d046      	beq.n	89b5a <_dtoa_r+0xd5a>
   89acc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89ace:	9302      	str	r3, [sp, #8]
   89ad0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   89ad4:	f7ff bb42 	b.w	8915c <_dtoa_r+0x35c>
   89ad8:	f04f 0800 	mov.w	r8, #0
   89adc:	4646      	mov	r6, r8
   89ade:	e6a8      	b.n	89832 <_dtoa_r+0xa32>
   89ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89ae2:	9a07      	ldr	r2, [sp, #28]
   89ae4:	1a9d      	subs	r5, r3, r2
   89ae6:	2300      	movs	r3, #0
   89ae8:	f7ff bb70 	b.w	891cc <_dtoa_r+0x3cc>
   89aec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89aee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   89af0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89af4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   89af6:	f7ff bb69 	b.w	891cc <_dtoa_r+0x3cc>
   89afa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   89afe:	f04f 0a02 	mov.w	sl, #2
   89b02:	e56d      	b.n	895e0 <_dtoa_r+0x7e0>
   89b04:	9b07      	ldr	r3, [sp, #28]
   89b06:	2b00      	cmp	r3, #0
   89b08:	f43f aeb8 	beq.w	8987c <_dtoa_r+0xa7c>
   89b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89b0e:	2b00      	cmp	r3, #0
   89b10:	f77f aede 	ble.w	898d0 <_dtoa_r+0xad0>
   89b14:	2200      	movs	r2, #0
   89b16:	4b24      	ldr	r3, [pc, #144]	; (89ba8 <_dtoa_r+0xda8>)
   89b18:	4638      	mov	r0, r7
   89b1a:	4641      	mov	r1, r8
   89b1c:	f002 fa80 	bl	8c020 <__aeabi_dmul>
   89b20:	4607      	mov	r7, r0
   89b22:	4688      	mov	r8, r1
   89b24:	f10a 0001 	add.w	r0, sl, #1
   89b28:	f002 fa14 	bl	8bf54 <__aeabi_i2d>
   89b2c:	463a      	mov	r2, r7
   89b2e:	4643      	mov	r3, r8
   89b30:	f002 fa76 	bl	8c020 <__aeabi_dmul>
   89b34:	2200      	movs	r2, #0
   89b36:	4b17      	ldr	r3, [pc, #92]	; (89b94 <_dtoa_r+0xd94>)
   89b38:	f002 f8c0 	bl	8bcbc <__adddf3>
   89b3c:	9a02      	ldr	r2, [sp, #8]
   89b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89b40:	3a01      	subs	r2, #1
   89b42:	4605      	mov	r5, r0
   89b44:	9215      	str	r2, [sp, #84]	; 0x54
   89b46:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89b4a:	9312      	str	r3, [sp, #72]	; 0x48
   89b4c:	e569      	b.n	89622 <_dtoa_r+0x822>
   89b4e:	2239      	movs	r2, #57	; 0x39
   89b50:	46b3      	mov	fp, r6
   89b52:	703a      	strb	r2, [r7, #0]
   89b54:	9e08      	ldr	r6, [sp, #32]
   89b56:	1c7d      	adds	r5, r7, #1
   89b58:	e4bf      	b.n	894da <_dtoa_r+0x6da>
   89b5a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   89b5e:	2000      	movs	r0, #0
   89b60:	4910      	ldr	r1, [pc, #64]	; (89ba4 <_dtoa_r+0xda4>)
   89b62:	f002 f8a9 	bl	8bcb8 <__aeabi_dsub>
   89b66:	4632      	mov	r2, r6
   89b68:	463b      	mov	r3, r7
   89b6a:	f002 fce9 	bl	8c540 <__aeabi_dcmpgt>
   89b6e:	b908      	cbnz	r0, 89b74 <_dtoa_r+0xd74>
   89b70:	e6ae      	b.n	898d0 <_dtoa_r+0xad0>
   89b72:	4615      	mov	r5, r2
   89b74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89b78:	1e6a      	subs	r2, r5, #1
   89b7a:	2b30      	cmp	r3, #48	; 0x30
   89b7c:	d0f9      	beq.n	89b72 <_dtoa_r+0xd72>
   89b7e:	e5d7      	b.n	89730 <_dtoa_r+0x930>
   89b80:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89b86:	9302      	str	r3, [sp, #8]
   89b88:	f7ff bae8 	b.w	8915c <_dtoa_r+0x35c>
   89b8c:	970c      	str	r7, [sp, #48]	; 0x30
   89b8e:	f7ff bba7 	b.w	892e0 <_dtoa_r+0x4e0>
   89b92:	bf00      	nop
   89b94:	401c0000 	.word	0x401c0000
   89b98:	40140000 	.word	0x40140000
   89b9c:	0008c7a8 	.word	0x0008c7a8
   89ba0:	0008c780 	.word	0x0008c780
   89ba4:	3fe00000 	.word	0x3fe00000
   89ba8:	40240000 	.word	0x40240000
   89bac:	2b39      	cmp	r3, #57	; 0x39
   89bae:	f8cd b020 	str.w	fp, [sp, #32]
   89bb2:	46d0      	mov	r8, sl
   89bb4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   89bb8:	469a      	mov	sl, r3
   89bba:	d0c8      	beq.n	89b4e <_dtoa_r+0xd4e>
   89bbc:	f1bb 0f00 	cmp.w	fp, #0
   89bc0:	f73f aec0 	bgt.w	89944 <_dtoa_r+0xb44>
   89bc4:	e6c0      	b.n	89948 <_dtoa_r+0xb48>
   89bc6:	f47f aebf 	bne.w	89948 <_dtoa_r+0xb48>
   89bca:	f01a 0f01 	tst.w	sl, #1
   89bce:	f43f aebb 	beq.w	89948 <_dtoa_r+0xb48>
   89bd2:	e6b3      	b.n	8993c <_dtoa_r+0xb3c>
   89bd4:	f04f 0800 	mov.w	r8, #0
   89bd8:	4646      	mov	r6, r8
   89bda:	e5e8      	b.n	897ae <_dtoa_r+0x9ae>
   89bdc:	4631      	mov	r1, r6
   89bde:	2300      	movs	r3, #0
   89be0:	220a      	movs	r2, #10
   89be2:	4620      	mov	r0, r4
   89be4:	f001 f912 	bl	8ae0c <__multadd>
   89be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89bea:	4606      	mov	r6, r0
   89bec:	2b00      	cmp	r3, #0
   89bee:	dd07      	ble.n	89c00 <_dtoa_r+0xe00>
   89bf0:	9307      	str	r3, [sp, #28]
   89bf2:	f7ff bbab 	b.w	8934c <_dtoa_r+0x54c>
   89bf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89bf8:	2b02      	cmp	r3, #2
   89bfa:	dc1f      	bgt.n	89c3c <_dtoa_r+0xe3c>
   89bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89bfe:	e43c      	b.n	8947a <_dtoa_r+0x67a>
   89c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89c02:	2b02      	cmp	r3, #2
   89c04:	dc1a      	bgt.n	89c3c <_dtoa_r+0xe3c>
   89c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89c08:	e7f2      	b.n	89bf0 <_dtoa_r+0xdf0>
   89c0a:	f43f ab81 	beq.w	89310 <_dtoa_r+0x510>
   89c0e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89c12:	e411      	b.n	89438 <_dtoa_r+0x638>
   89c14:	2500      	movs	r5, #0
   89c16:	4620      	mov	r0, r4
   89c18:	6465      	str	r5, [r4, #68]	; 0x44
   89c1a:	4629      	mov	r1, r5
   89c1c:	f001 f8c6 	bl	8adac <_Balloc>
   89c20:	f04f 33ff 	mov.w	r3, #4294967295
   89c24:	9307      	str	r3, [sp, #28]
   89c26:	930f      	str	r3, [sp, #60]	; 0x3c
   89c28:	2301      	movs	r3, #1
   89c2a:	9004      	str	r0, [sp, #16]
   89c2c:	9525      	str	r5, [sp, #148]	; 0x94
   89c2e:	6420      	str	r0, [r4, #64]	; 0x40
   89c30:	930b      	str	r3, [sp, #44]	; 0x2c
   89c32:	f7ff b9e0 	b.w	88ff6 <_dtoa_r+0x1f6>
   89c36:	2501      	movs	r5, #1
   89c38:	f7ff b9a8 	b.w	88f8c <_dtoa_r+0x18c>
   89c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89c3e:	9307      	str	r3, [sp, #28]
   89c40:	e5e8      	b.n	89814 <_dtoa_r+0xa14>
   89c42:	bf00      	nop

00089c44 <__sflush_r>:
   89c44:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   89c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89c4c:	b29a      	uxth	r2, r3
   89c4e:	460d      	mov	r5, r1
   89c50:	0711      	lsls	r1, r2, #28
   89c52:	4680      	mov	r8, r0
   89c54:	d43a      	bmi.n	89ccc <__sflush_r+0x88>
   89c56:	686a      	ldr	r2, [r5, #4]
   89c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   89c5c:	2a00      	cmp	r2, #0
   89c5e:	81ab      	strh	r3, [r5, #12]
   89c60:	dd70      	ble.n	89d44 <__sflush_r+0x100>
   89c62:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89c64:	2c00      	cmp	r4, #0
   89c66:	d04a      	beq.n	89cfe <__sflush_r+0xba>
   89c68:	2200      	movs	r2, #0
   89c6a:	b29b      	uxth	r3, r3
   89c6c:	f8d8 6000 	ldr.w	r6, [r8]
   89c70:	f8c8 2000 	str.w	r2, [r8]
   89c74:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   89c78:	d068      	beq.n	89d4c <__sflush_r+0x108>
   89c7a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   89c7c:	075f      	lsls	r7, r3, #29
   89c7e:	d505      	bpl.n	89c8c <__sflush_r+0x48>
   89c80:	6869      	ldr	r1, [r5, #4]
   89c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89c84:	1a52      	subs	r2, r2, r1
   89c86:	b10b      	cbz	r3, 89c8c <__sflush_r+0x48>
   89c88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89c8a:	1ad2      	subs	r2, r2, r3
   89c8c:	2300      	movs	r3, #0
   89c8e:	69e9      	ldr	r1, [r5, #28]
   89c90:	4640      	mov	r0, r8
   89c92:	47a0      	blx	r4
   89c94:	1c44      	adds	r4, r0, #1
   89c96:	d03d      	beq.n	89d14 <__sflush_r+0xd0>
   89c98:	2100      	movs	r1, #0
   89c9a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   89c9e:	692a      	ldr	r2, [r5, #16]
   89ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   89ca4:	81ab      	strh	r3, [r5, #12]
   89ca6:	04db      	lsls	r3, r3, #19
   89ca8:	6069      	str	r1, [r5, #4]
   89caa:	602a      	str	r2, [r5, #0]
   89cac:	d448      	bmi.n	89d40 <__sflush_r+0xfc>
   89cae:	6b29      	ldr	r1, [r5, #48]	; 0x30
   89cb0:	f8c8 6000 	str.w	r6, [r8]
   89cb4:	b319      	cbz	r1, 89cfe <__sflush_r+0xba>
   89cb6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   89cba:	4299      	cmp	r1, r3
   89cbc:	d002      	beq.n	89cc4 <__sflush_r+0x80>
   89cbe:	4640      	mov	r0, r8
   89cc0:	f000 f9da 	bl	8a078 <_free_r>
   89cc4:	2000      	movs	r0, #0
   89cc6:	6328      	str	r0, [r5, #48]	; 0x30
   89cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89ccc:	692e      	ldr	r6, [r5, #16]
   89cce:	b1b6      	cbz	r6, 89cfe <__sflush_r+0xba>
   89cd0:	0791      	lsls	r1, r2, #30
   89cd2:	bf18      	it	ne
   89cd4:	2300      	movne	r3, #0
   89cd6:	682c      	ldr	r4, [r5, #0]
   89cd8:	bf08      	it	eq
   89cda:	696b      	ldreq	r3, [r5, #20]
   89cdc:	602e      	str	r6, [r5, #0]
   89cde:	1ba4      	subs	r4, r4, r6
   89ce0:	60ab      	str	r3, [r5, #8]
   89ce2:	e00a      	b.n	89cfa <__sflush_r+0xb6>
   89ce4:	4623      	mov	r3, r4
   89ce6:	4632      	mov	r2, r6
   89ce8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   89cea:	69e9      	ldr	r1, [r5, #28]
   89cec:	4640      	mov	r0, r8
   89cee:	47b8      	blx	r7
   89cf0:	2800      	cmp	r0, #0
   89cf2:	eba4 0400 	sub.w	r4, r4, r0
   89cf6:	4406      	add	r6, r0
   89cf8:	dd04      	ble.n	89d04 <__sflush_r+0xc0>
   89cfa:	2c00      	cmp	r4, #0
   89cfc:	dcf2      	bgt.n	89ce4 <__sflush_r+0xa0>
   89cfe:	2000      	movs	r0, #0
   89d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89d04:	89ab      	ldrh	r3, [r5, #12]
   89d06:	f04f 30ff 	mov.w	r0, #4294967295
   89d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89d0e:	81ab      	strh	r3, [r5, #12]
   89d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89d14:	f8d8 4000 	ldr.w	r4, [r8]
   89d18:	2c1d      	cmp	r4, #29
   89d1a:	d8f3      	bhi.n	89d04 <__sflush_r+0xc0>
   89d1c:	4b16      	ldr	r3, [pc, #88]	; (89d78 <__sflush_r+0x134>)
   89d1e:	40e3      	lsrs	r3, r4
   89d20:	43db      	mvns	r3, r3
   89d22:	f013 0301 	ands.w	r3, r3, #1
   89d26:	d1ed      	bne.n	89d04 <__sflush_r+0xc0>
   89d28:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   89d2c:	6929      	ldr	r1, [r5, #16]
   89d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   89d32:	81aa      	strh	r2, [r5, #12]
   89d34:	04d2      	lsls	r2, r2, #19
   89d36:	606b      	str	r3, [r5, #4]
   89d38:	6029      	str	r1, [r5, #0]
   89d3a:	d5b8      	bpl.n	89cae <__sflush_r+0x6a>
   89d3c:	2c00      	cmp	r4, #0
   89d3e:	d1b6      	bne.n	89cae <__sflush_r+0x6a>
   89d40:	6528      	str	r0, [r5, #80]	; 0x50
   89d42:	e7b4      	b.n	89cae <__sflush_r+0x6a>
   89d44:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   89d46:	2a00      	cmp	r2, #0
   89d48:	dc8b      	bgt.n	89c62 <__sflush_r+0x1e>
   89d4a:	e7d8      	b.n	89cfe <__sflush_r+0xba>
   89d4c:	2301      	movs	r3, #1
   89d4e:	69e9      	ldr	r1, [r5, #28]
   89d50:	4640      	mov	r0, r8
   89d52:	47a0      	blx	r4
   89d54:	1c43      	adds	r3, r0, #1
   89d56:	4602      	mov	r2, r0
   89d58:	d002      	beq.n	89d60 <__sflush_r+0x11c>
   89d5a:	89ab      	ldrh	r3, [r5, #12]
   89d5c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89d5e:	e78d      	b.n	89c7c <__sflush_r+0x38>
   89d60:	f8d8 3000 	ldr.w	r3, [r8]
   89d64:	2b00      	cmp	r3, #0
   89d66:	d0f8      	beq.n	89d5a <__sflush_r+0x116>
   89d68:	2b1d      	cmp	r3, #29
   89d6a:	d001      	beq.n	89d70 <__sflush_r+0x12c>
   89d6c:	2b16      	cmp	r3, #22
   89d6e:	d1c9      	bne.n	89d04 <__sflush_r+0xc0>
   89d70:	f8c8 6000 	str.w	r6, [r8]
   89d74:	e7c3      	b.n	89cfe <__sflush_r+0xba>
   89d76:	bf00      	nop
   89d78:	20400001 	.word	0x20400001

00089d7c <_fflush_r>:
   89d7c:	b538      	push	{r3, r4, r5, lr}
   89d7e:	460d      	mov	r5, r1
   89d80:	4604      	mov	r4, r0
   89d82:	b108      	cbz	r0, 89d88 <_fflush_r+0xc>
   89d84:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89d86:	b1bb      	cbz	r3, 89db8 <_fflush_r+0x3c>
   89d88:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   89d8c:	b188      	cbz	r0, 89db2 <_fflush_r+0x36>
   89d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   89d90:	07db      	lsls	r3, r3, #31
   89d92:	d401      	bmi.n	89d98 <_fflush_r+0x1c>
   89d94:	0581      	lsls	r1, r0, #22
   89d96:	d517      	bpl.n	89dc8 <_fflush_r+0x4c>
   89d98:	4620      	mov	r0, r4
   89d9a:	4629      	mov	r1, r5
   89d9c:	f7ff ff52 	bl	89c44 <__sflush_r>
   89da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   89da2:	4604      	mov	r4, r0
   89da4:	07da      	lsls	r2, r3, #31
   89da6:	d402      	bmi.n	89dae <_fflush_r+0x32>
   89da8:	89ab      	ldrh	r3, [r5, #12]
   89daa:	059b      	lsls	r3, r3, #22
   89dac:	d507      	bpl.n	89dbe <_fflush_r+0x42>
   89dae:	4620      	mov	r0, r4
   89db0:	bd38      	pop	{r3, r4, r5, pc}
   89db2:	4604      	mov	r4, r0
   89db4:	4620      	mov	r0, r4
   89db6:	bd38      	pop	{r3, r4, r5, pc}
   89db8:	f000 f838 	bl	89e2c <__sinit>
   89dbc:	e7e4      	b.n	89d88 <_fflush_r+0xc>
   89dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   89dc0:	f000 fc04 	bl	8a5cc <__retarget_lock_release_recursive>
   89dc4:	4620      	mov	r0, r4
   89dc6:	bd38      	pop	{r3, r4, r5, pc}
   89dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   89dca:	f000 fbfd 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   89dce:	e7e3      	b.n	89d98 <_fflush_r+0x1c>

00089dd0 <_cleanup_r>:
   89dd0:	4901      	ldr	r1, [pc, #4]	; (89dd8 <_cleanup_r+0x8>)
   89dd2:	f000 bbb1 	b.w	8a538 <_fwalk_reent>
   89dd6:	bf00      	nop
   89dd8:	0008bb49 	.word	0x0008bb49

00089ddc <std.isra.0>:
   89ddc:	2300      	movs	r3, #0
   89dde:	b510      	push	{r4, lr}
   89de0:	4604      	mov	r4, r0
   89de2:	8181      	strh	r1, [r0, #12]
   89de4:	81c2      	strh	r2, [r0, #14]
   89de6:	6003      	str	r3, [r0, #0]
   89de8:	6043      	str	r3, [r0, #4]
   89dea:	6083      	str	r3, [r0, #8]
   89dec:	6643      	str	r3, [r0, #100]	; 0x64
   89dee:	6103      	str	r3, [r0, #16]
   89df0:	6143      	str	r3, [r0, #20]
   89df2:	6183      	str	r3, [r0, #24]
   89df4:	4619      	mov	r1, r3
   89df6:	2208      	movs	r2, #8
   89df8:	305c      	adds	r0, #92	; 0x5c
   89dfa:	f7fc fc0d 	bl	86618 <memset>
   89dfe:	4807      	ldr	r0, [pc, #28]	; (89e1c <std.isra.0+0x40>)
   89e00:	4907      	ldr	r1, [pc, #28]	; (89e20 <std.isra.0+0x44>)
   89e02:	4a08      	ldr	r2, [pc, #32]	; (89e24 <std.isra.0+0x48>)
   89e04:	4b08      	ldr	r3, [pc, #32]	; (89e28 <std.isra.0+0x4c>)
   89e06:	6220      	str	r0, [r4, #32]
   89e08:	61e4      	str	r4, [r4, #28]
   89e0a:	6261      	str	r1, [r4, #36]	; 0x24
   89e0c:	62a2      	str	r2, [r4, #40]	; 0x28
   89e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
   89e10:	f104 0058 	add.w	r0, r4, #88	; 0x58
   89e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89e18:	f000 bbd2 	b.w	8a5c0 <__retarget_lock_init_recursive>
   89e1c:	0008b735 	.word	0x0008b735
   89e20:	0008b759 	.word	0x0008b759
   89e24:	0008b795 	.word	0x0008b795
   89e28:	0008b7b5 	.word	0x0008b7b5

00089e2c <__sinit>:
   89e2c:	b510      	push	{r4, lr}
   89e2e:	4604      	mov	r4, r0
   89e30:	4814      	ldr	r0, [pc, #80]	; (89e84 <__sinit+0x58>)
   89e32:	f000 fbc9 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   89e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   89e38:	b9fa      	cbnz	r2, 89e7a <__sinit+0x4e>
   89e3a:	2003      	movs	r0, #3
   89e3c:	4912      	ldr	r1, [pc, #72]	; (89e88 <__sinit+0x5c>)
   89e3e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   89e42:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   89e46:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   89e4a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   89e4e:	63e1      	str	r1, [r4, #60]	; 0x3c
   89e50:	6860      	ldr	r0, [r4, #4]
   89e52:	2104      	movs	r1, #4
   89e54:	f7ff ffc2 	bl	89ddc <std.isra.0>
   89e58:	68a0      	ldr	r0, [r4, #8]
   89e5a:	2201      	movs	r2, #1
   89e5c:	2109      	movs	r1, #9
   89e5e:	f7ff ffbd 	bl	89ddc <std.isra.0>
   89e62:	68e0      	ldr	r0, [r4, #12]
   89e64:	2202      	movs	r2, #2
   89e66:	2112      	movs	r1, #18
   89e68:	f7ff ffb8 	bl	89ddc <std.isra.0>
   89e6c:	2301      	movs	r3, #1
   89e6e:	4805      	ldr	r0, [pc, #20]	; (89e84 <__sinit+0x58>)
   89e70:	63a3      	str	r3, [r4, #56]	; 0x38
   89e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89e76:	f000 bba9 	b.w	8a5cc <__retarget_lock_release_recursive>
   89e7a:	4802      	ldr	r0, [pc, #8]	; (89e84 <__sinit+0x58>)
   89e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   89e80:	f000 bba4 	b.w	8a5cc <__retarget_lock_release_recursive>
   89e84:	200029cc 	.word	0x200029cc
   89e88:	00089dd1 	.word	0x00089dd1

00089e8c <__sfp_lock_acquire>:
   89e8c:	4801      	ldr	r0, [pc, #4]	; (89e94 <__sfp_lock_acquire+0x8>)
   89e8e:	f000 bb9b 	b.w	8a5c8 <__retarget_lock_acquire_recursive>
   89e92:	bf00      	nop
   89e94:	200029e0 	.word	0x200029e0

00089e98 <__sfp_lock_release>:
   89e98:	4801      	ldr	r0, [pc, #4]	; (89ea0 <__sfp_lock_release+0x8>)
   89e9a:	f000 bb97 	b.w	8a5cc <__retarget_lock_release_recursive>
   89e9e:	bf00      	nop
   89ea0:	200029e0 	.word	0x200029e0

00089ea4 <__libc_fini_array>:
   89ea4:	b538      	push	{r3, r4, r5, lr}
   89ea6:	4c0a      	ldr	r4, [pc, #40]	; (89ed0 <__libc_fini_array+0x2c>)
   89ea8:	4d0a      	ldr	r5, [pc, #40]	; (89ed4 <__libc_fini_array+0x30>)
   89eaa:	1b64      	subs	r4, r4, r5
   89eac:	10a4      	asrs	r4, r4, #2
   89eae:	d00a      	beq.n	89ec6 <__libc_fini_array+0x22>
   89eb0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   89eb4:	3b01      	subs	r3, #1
   89eb6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   89eba:	3c01      	subs	r4, #1
   89ebc:	f855 3904 	ldr.w	r3, [r5], #-4
   89ec0:	4798      	blx	r3
   89ec2:	2c00      	cmp	r4, #0
   89ec4:	d1f9      	bne.n	89eba <__libc_fini_array+0x16>
   89ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89eca:	f002 bd63 	b.w	8c994 <_fini>
   89ece:	bf00      	nop
   89ed0:	0008c9a4 	.word	0x0008c9a4
   89ed4:	0008c9a0 	.word	0x0008c9a0

00089ed8 <__fputwc>:
   89ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   89edc:	b083      	sub	sp, #12
   89ede:	4607      	mov	r7, r0
   89ee0:	4688      	mov	r8, r1
   89ee2:	4614      	mov	r4, r2
   89ee4:	f000 fb50 	bl	8a588 <__locale_mb_cur_max>
   89ee8:	2801      	cmp	r0, #1
   89eea:	d033      	beq.n	89f54 <__fputwc+0x7c>
   89eec:	4642      	mov	r2, r8
   89eee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   89ef2:	a901      	add	r1, sp, #4
   89ef4:	4638      	mov	r0, r7
   89ef6:	f001 fd37 	bl	8b968 <_wcrtomb_r>
   89efa:	1c42      	adds	r2, r0, #1
   89efc:	4606      	mov	r6, r0
   89efe:	d022      	beq.n	89f46 <__fputwc+0x6e>
   89f00:	b390      	cbz	r0, 89f68 <__fputwc+0x90>
   89f02:	f89d 1004 	ldrb.w	r1, [sp, #4]
   89f06:	2500      	movs	r5, #0
   89f08:	f10d 0904 	add.w	r9, sp, #4
   89f0c:	e008      	b.n	89f20 <__fputwc+0x48>
   89f0e:	6823      	ldr	r3, [r4, #0]
   89f10:	1c5a      	adds	r2, r3, #1
   89f12:	6022      	str	r2, [r4, #0]
   89f14:	7019      	strb	r1, [r3, #0]
   89f16:	3501      	adds	r5, #1
   89f18:	42b5      	cmp	r5, r6
   89f1a:	d225      	bcs.n	89f68 <__fputwc+0x90>
   89f1c:	f815 1009 	ldrb.w	r1, [r5, r9]
   89f20:	68a3      	ldr	r3, [r4, #8]
   89f22:	3b01      	subs	r3, #1
   89f24:	2b00      	cmp	r3, #0
   89f26:	60a3      	str	r3, [r4, #8]
   89f28:	daf1      	bge.n	89f0e <__fputwc+0x36>
   89f2a:	69a2      	ldr	r2, [r4, #24]
   89f2c:	4293      	cmp	r3, r2
   89f2e:	db01      	blt.n	89f34 <__fputwc+0x5c>
   89f30:	290a      	cmp	r1, #10
   89f32:	d1ec      	bne.n	89f0e <__fputwc+0x36>
   89f34:	4622      	mov	r2, r4
   89f36:	4638      	mov	r0, r7
   89f38:	f001 fcbe 	bl	8b8b8 <__swbuf_r>
   89f3c:	1c43      	adds	r3, r0, #1
   89f3e:	d1ea      	bne.n	89f16 <__fputwc+0x3e>
   89f40:	b003      	add	sp, #12
   89f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89f46:	89a3      	ldrh	r3, [r4, #12]
   89f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89f4c:	81a3      	strh	r3, [r4, #12]
   89f4e:	b003      	add	sp, #12
   89f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   89f54:	f108 33ff 	add.w	r3, r8, #4294967295
   89f58:	2bfe      	cmp	r3, #254	; 0xfe
   89f5a:	d8c7      	bhi.n	89eec <__fputwc+0x14>
   89f5c:	fa5f f188 	uxtb.w	r1, r8
   89f60:	4606      	mov	r6, r0
   89f62:	f88d 1004 	strb.w	r1, [sp, #4]
   89f66:	e7ce      	b.n	89f06 <__fputwc+0x2e>
   89f68:	4640      	mov	r0, r8
   89f6a:	b003      	add	sp, #12
   89f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00089f70 <_fputwc_r>:
   89f70:	b530      	push	{r4, r5, lr}
   89f72:	6e53      	ldr	r3, [r2, #100]	; 0x64
   89f74:	4614      	mov	r4, r2
   89f76:	f013 0f01 	tst.w	r3, #1
   89f7a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   89f7e:	b083      	sub	sp, #12
   89f80:	4605      	mov	r5, r0
   89f82:	b29a      	uxth	r2, r3
   89f84:	d101      	bne.n	89f8a <_fputwc_r+0x1a>
   89f86:	0590      	lsls	r0, r2, #22
   89f88:	d51c      	bpl.n	89fc4 <_fputwc_r+0x54>
   89f8a:	0490      	lsls	r0, r2, #18
   89f8c:	d406      	bmi.n	89f9c <_fputwc_r+0x2c>
   89f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   89f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   89f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   89f98:	81a3      	strh	r3, [r4, #12]
   89f9a:	6662      	str	r2, [r4, #100]	; 0x64
   89f9c:	4628      	mov	r0, r5
   89f9e:	4622      	mov	r2, r4
   89fa0:	f7ff ff9a 	bl	89ed8 <__fputwc>
   89fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89fa6:	4605      	mov	r5, r0
   89fa8:	07da      	lsls	r2, r3, #31
   89faa:	d402      	bmi.n	89fb2 <_fputwc_r+0x42>
   89fac:	89a3      	ldrh	r3, [r4, #12]
   89fae:	059b      	lsls	r3, r3, #22
   89fb0:	d502      	bpl.n	89fb8 <_fputwc_r+0x48>
   89fb2:	4628      	mov	r0, r5
   89fb4:	b003      	add	sp, #12
   89fb6:	bd30      	pop	{r4, r5, pc}
   89fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89fba:	f000 fb07 	bl	8a5cc <__retarget_lock_release_recursive>
   89fbe:	4628      	mov	r0, r5
   89fc0:	b003      	add	sp, #12
   89fc2:	bd30      	pop	{r4, r5, pc}
   89fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   89fc6:	9101      	str	r1, [sp, #4]
   89fc8:	f000 fafe 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   89fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89fd0:	9901      	ldr	r1, [sp, #4]
   89fd2:	b29a      	uxth	r2, r3
   89fd4:	e7d9      	b.n	89f8a <_fputwc_r+0x1a>
   89fd6:	bf00      	nop

00089fd8 <_malloc_trim_r>:
   89fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89fda:	460c      	mov	r4, r1
   89fdc:	4f23      	ldr	r7, [pc, #140]	; (8a06c <_malloc_trim_r+0x94>)
   89fde:	4606      	mov	r6, r0
   89fe0:	f000 fed8 	bl	8ad94 <__malloc_lock>
   89fe4:	68bb      	ldr	r3, [r7, #8]
   89fe6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   89fea:	685d      	ldr	r5, [r3, #4]
   89fec:	310f      	adds	r1, #15
   89fee:	f025 0503 	bic.w	r5, r5, #3
   89ff2:	4429      	add	r1, r5
   89ff4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   89ff8:	f021 010f 	bic.w	r1, r1, #15
   89ffc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8a000:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a004:	db07      	blt.n	8a016 <_malloc_trim_r+0x3e>
   8a006:	2100      	movs	r1, #0
   8a008:	4630      	mov	r0, r6
   8a00a:	f001 fb81 	bl	8b710 <_sbrk_r>
   8a00e:	68bb      	ldr	r3, [r7, #8]
   8a010:	442b      	add	r3, r5
   8a012:	4298      	cmp	r0, r3
   8a014:	d004      	beq.n	8a020 <_malloc_trim_r+0x48>
   8a016:	4630      	mov	r0, r6
   8a018:	f000 fec2 	bl	8ada0 <__malloc_unlock>
   8a01c:	2000      	movs	r0, #0
   8a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a020:	4261      	negs	r1, r4
   8a022:	4630      	mov	r0, r6
   8a024:	f001 fb74 	bl	8b710 <_sbrk_r>
   8a028:	3001      	adds	r0, #1
   8a02a:	d00d      	beq.n	8a048 <_malloc_trim_r+0x70>
   8a02c:	4b10      	ldr	r3, [pc, #64]	; (8a070 <_malloc_trim_r+0x98>)
   8a02e:	68ba      	ldr	r2, [r7, #8]
   8a030:	6819      	ldr	r1, [r3, #0]
   8a032:	1b2d      	subs	r5, r5, r4
   8a034:	f045 0501 	orr.w	r5, r5, #1
   8a038:	4630      	mov	r0, r6
   8a03a:	1b09      	subs	r1, r1, r4
   8a03c:	6055      	str	r5, [r2, #4]
   8a03e:	6019      	str	r1, [r3, #0]
   8a040:	f000 feae 	bl	8ada0 <__malloc_unlock>
   8a044:	2001      	movs	r0, #1
   8a046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a048:	2100      	movs	r1, #0
   8a04a:	4630      	mov	r0, r6
   8a04c:	f001 fb60 	bl	8b710 <_sbrk_r>
   8a050:	68ba      	ldr	r2, [r7, #8]
   8a052:	1a83      	subs	r3, r0, r2
   8a054:	2b0f      	cmp	r3, #15
   8a056:	ddde      	ble.n	8a016 <_malloc_trim_r+0x3e>
   8a058:	4c06      	ldr	r4, [pc, #24]	; (8a074 <_malloc_trim_r+0x9c>)
   8a05a:	4905      	ldr	r1, [pc, #20]	; (8a070 <_malloc_trim_r+0x98>)
   8a05c:	6824      	ldr	r4, [r4, #0]
   8a05e:	f043 0301 	orr.w	r3, r3, #1
   8a062:	1b00      	subs	r0, r0, r4
   8a064:	6053      	str	r3, [r2, #4]
   8a066:	6008      	str	r0, [r1, #0]
   8a068:	e7d5      	b.n	8a016 <_malloc_trim_r+0x3e>
   8a06a:	bf00      	nop
   8a06c:	20001048 	.word	0x20001048
   8a070:	200024b0 	.word	0x200024b0
   8a074:	20001450 	.word	0x20001450

0008a078 <_free_r>:
   8a078:	2900      	cmp	r1, #0
   8a07a:	d044      	beq.n	8a106 <_free_r+0x8e>
   8a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a080:	460d      	mov	r5, r1
   8a082:	4680      	mov	r8, r0
   8a084:	f000 fe86 	bl	8ad94 <__malloc_lock>
   8a088:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8a08c:	4969      	ldr	r1, [pc, #420]	; (8a234 <_free_r+0x1bc>)
   8a08e:	f1a5 0408 	sub.w	r4, r5, #8
   8a092:	f027 0301 	bic.w	r3, r7, #1
   8a096:	18e2      	adds	r2, r4, r3
   8a098:	688e      	ldr	r6, [r1, #8]
   8a09a:	6850      	ldr	r0, [r2, #4]
   8a09c:	42b2      	cmp	r2, r6
   8a09e:	f020 0003 	bic.w	r0, r0, #3
   8a0a2:	d05e      	beq.n	8a162 <_free_r+0xea>
   8a0a4:	07fe      	lsls	r6, r7, #31
   8a0a6:	6050      	str	r0, [r2, #4]
   8a0a8:	d40b      	bmi.n	8a0c2 <_free_r+0x4a>
   8a0aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8a0ae:	f101 0e08 	add.w	lr, r1, #8
   8a0b2:	1be4      	subs	r4, r4, r7
   8a0b4:	68a5      	ldr	r5, [r4, #8]
   8a0b6:	443b      	add	r3, r7
   8a0b8:	4575      	cmp	r5, lr
   8a0ba:	d06d      	beq.n	8a198 <_free_r+0x120>
   8a0bc:	68e7      	ldr	r7, [r4, #12]
   8a0be:	60ef      	str	r7, [r5, #12]
   8a0c0:	60bd      	str	r5, [r7, #8]
   8a0c2:	1815      	adds	r5, r2, r0
   8a0c4:	686d      	ldr	r5, [r5, #4]
   8a0c6:	07ed      	lsls	r5, r5, #31
   8a0c8:	d53e      	bpl.n	8a148 <_free_r+0xd0>
   8a0ca:	f043 0201 	orr.w	r2, r3, #1
   8a0ce:	6062      	str	r2, [r4, #4]
   8a0d0:	50e3      	str	r3, [r4, r3]
   8a0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a0d6:	d217      	bcs.n	8a108 <_free_r+0x90>
   8a0d8:	2201      	movs	r2, #1
   8a0da:	08db      	lsrs	r3, r3, #3
   8a0dc:	1098      	asrs	r0, r3, #2
   8a0de:	684d      	ldr	r5, [r1, #4]
   8a0e0:	4413      	add	r3, r2
   8a0e2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8a0e6:	4082      	lsls	r2, r0
   8a0e8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8a0ec:	432a      	orrs	r2, r5
   8a0ee:	3808      	subs	r0, #8
   8a0f0:	60e0      	str	r0, [r4, #12]
   8a0f2:	60a7      	str	r7, [r4, #8]
   8a0f4:	604a      	str	r2, [r1, #4]
   8a0f6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8a0fa:	60fc      	str	r4, [r7, #12]
   8a0fc:	4640      	mov	r0, r8
   8a0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a102:	f000 be4d 	b.w	8ada0 <__malloc_unlock>
   8a106:	4770      	bx	lr
   8a108:	0a5a      	lsrs	r2, r3, #9
   8a10a:	2a04      	cmp	r2, #4
   8a10c:	d852      	bhi.n	8a1b4 <_free_r+0x13c>
   8a10e:	099a      	lsrs	r2, r3, #6
   8a110:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8a114:	00ff      	lsls	r7, r7, #3
   8a116:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8a11a:	19c8      	adds	r0, r1, r7
   8a11c:	59ca      	ldr	r2, [r1, r7]
   8a11e:	3808      	subs	r0, #8
   8a120:	4290      	cmp	r0, r2
   8a122:	d04f      	beq.n	8a1c4 <_free_r+0x14c>
   8a124:	6851      	ldr	r1, [r2, #4]
   8a126:	f021 0103 	bic.w	r1, r1, #3
   8a12a:	428b      	cmp	r3, r1
   8a12c:	d232      	bcs.n	8a194 <_free_r+0x11c>
   8a12e:	6892      	ldr	r2, [r2, #8]
   8a130:	4290      	cmp	r0, r2
   8a132:	d1f7      	bne.n	8a124 <_free_r+0xac>
   8a134:	68c3      	ldr	r3, [r0, #12]
   8a136:	60a0      	str	r0, [r4, #8]
   8a138:	60e3      	str	r3, [r4, #12]
   8a13a:	609c      	str	r4, [r3, #8]
   8a13c:	60c4      	str	r4, [r0, #12]
   8a13e:	4640      	mov	r0, r8
   8a140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a144:	f000 be2c 	b.w	8ada0 <__malloc_unlock>
   8a148:	6895      	ldr	r5, [r2, #8]
   8a14a:	4f3b      	ldr	r7, [pc, #236]	; (8a238 <_free_r+0x1c0>)
   8a14c:	4403      	add	r3, r0
   8a14e:	42bd      	cmp	r5, r7
   8a150:	d040      	beq.n	8a1d4 <_free_r+0x15c>
   8a152:	68d0      	ldr	r0, [r2, #12]
   8a154:	f043 0201 	orr.w	r2, r3, #1
   8a158:	60e8      	str	r0, [r5, #12]
   8a15a:	6085      	str	r5, [r0, #8]
   8a15c:	6062      	str	r2, [r4, #4]
   8a15e:	50e3      	str	r3, [r4, r3]
   8a160:	e7b7      	b.n	8a0d2 <_free_r+0x5a>
   8a162:	07ff      	lsls	r7, r7, #31
   8a164:	4403      	add	r3, r0
   8a166:	d407      	bmi.n	8a178 <_free_r+0x100>
   8a168:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8a16c:	1b64      	subs	r4, r4, r5
   8a16e:	68e2      	ldr	r2, [r4, #12]
   8a170:	68a0      	ldr	r0, [r4, #8]
   8a172:	442b      	add	r3, r5
   8a174:	60c2      	str	r2, [r0, #12]
   8a176:	6090      	str	r0, [r2, #8]
   8a178:	4a30      	ldr	r2, [pc, #192]	; (8a23c <_free_r+0x1c4>)
   8a17a:	f043 0001 	orr.w	r0, r3, #1
   8a17e:	6812      	ldr	r2, [r2, #0]
   8a180:	6060      	str	r0, [r4, #4]
   8a182:	4293      	cmp	r3, r2
   8a184:	608c      	str	r4, [r1, #8]
   8a186:	d3b9      	bcc.n	8a0fc <_free_r+0x84>
   8a188:	4b2d      	ldr	r3, [pc, #180]	; (8a240 <_free_r+0x1c8>)
   8a18a:	4640      	mov	r0, r8
   8a18c:	6819      	ldr	r1, [r3, #0]
   8a18e:	f7ff ff23 	bl	89fd8 <_malloc_trim_r>
   8a192:	e7b3      	b.n	8a0fc <_free_r+0x84>
   8a194:	4610      	mov	r0, r2
   8a196:	e7cd      	b.n	8a134 <_free_r+0xbc>
   8a198:	1811      	adds	r1, r2, r0
   8a19a:	6849      	ldr	r1, [r1, #4]
   8a19c:	07c9      	lsls	r1, r1, #31
   8a19e:	d444      	bmi.n	8a22a <_free_r+0x1b2>
   8a1a0:	6891      	ldr	r1, [r2, #8]
   8a1a2:	4403      	add	r3, r0
   8a1a4:	68d2      	ldr	r2, [r2, #12]
   8a1a6:	f043 0001 	orr.w	r0, r3, #1
   8a1aa:	60ca      	str	r2, [r1, #12]
   8a1ac:	6091      	str	r1, [r2, #8]
   8a1ae:	6060      	str	r0, [r4, #4]
   8a1b0:	50e3      	str	r3, [r4, r3]
   8a1b2:	e7a3      	b.n	8a0fc <_free_r+0x84>
   8a1b4:	2a14      	cmp	r2, #20
   8a1b6:	d816      	bhi.n	8a1e6 <_free_r+0x16e>
   8a1b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8a1bc:	00ff      	lsls	r7, r7, #3
   8a1be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8a1c2:	e7aa      	b.n	8a11a <_free_r+0xa2>
   8a1c4:	2301      	movs	r3, #1
   8a1c6:	10aa      	asrs	r2, r5, #2
   8a1c8:	684d      	ldr	r5, [r1, #4]
   8a1ca:	4093      	lsls	r3, r2
   8a1cc:	432b      	orrs	r3, r5
   8a1ce:	604b      	str	r3, [r1, #4]
   8a1d0:	4603      	mov	r3, r0
   8a1d2:	e7b0      	b.n	8a136 <_free_r+0xbe>
   8a1d4:	f043 0201 	orr.w	r2, r3, #1
   8a1d8:	614c      	str	r4, [r1, #20]
   8a1da:	610c      	str	r4, [r1, #16]
   8a1dc:	60e5      	str	r5, [r4, #12]
   8a1de:	60a5      	str	r5, [r4, #8]
   8a1e0:	6062      	str	r2, [r4, #4]
   8a1e2:	50e3      	str	r3, [r4, r3]
   8a1e4:	e78a      	b.n	8a0fc <_free_r+0x84>
   8a1e6:	2a54      	cmp	r2, #84	; 0x54
   8a1e8:	d806      	bhi.n	8a1f8 <_free_r+0x180>
   8a1ea:	0b1a      	lsrs	r2, r3, #12
   8a1ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8a1f0:	00ff      	lsls	r7, r7, #3
   8a1f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8a1f6:	e790      	b.n	8a11a <_free_r+0xa2>
   8a1f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8a1fc:	d806      	bhi.n	8a20c <_free_r+0x194>
   8a1fe:	0bda      	lsrs	r2, r3, #15
   8a200:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8a204:	00ff      	lsls	r7, r7, #3
   8a206:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8a20a:	e786      	b.n	8a11a <_free_r+0xa2>
   8a20c:	f240 5054 	movw	r0, #1364	; 0x554
   8a210:	4282      	cmp	r2, r0
   8a212:	d806      	bhi.n	8a222 <_free_r+0x1aa>
   8a214:	0c9a      	lsrs	r2, r3, #18
   8a216:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8a21a:	00ff      	lsls	r7, r7, #3
   8a21c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8a220:	e77b      	b.n	8a11a <_free_r+0xa2>
   8a222:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8a226:	257e      	movs	r5, #126	; 0x7e
   8a228:	e777      	b.n	8a11a <_free_r+0xa2>
   8a22a:	f043 0101 	orr.w	r1, r3, #1
   8a22e:	6061      	str	r1, [r4, #4]
   8a230:	6013      	str	r3, [r2, #0]
   8a232:	e763      	b.n	8a0fc <_free_r+0x84>
   8a234:	20001048 	.word	0x20001048
   8a238:	20001050 	.word	0x20001050
   8a23c:	20001454 	.word	0x20001454
   8a240:	200024e0 	.word	0x200024e0

0008a244 <__sfvwrite_r>:
   8a244:	6893      	ldr	r3, [r2, #8]
   8a246:	2b00      	cmp	r3, #0
   8a248:	d071      	beq.n	8a32e <__sfvwrite_r+0xea>
   8a24a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a24e:	898b      	ldrh	r3, [r1, #12]
   8a250:	b083      	sub	sp, #12
   8a252:	460c      	mov	r4, r1
   8a254:	0719      	lsls	r1, r3, #28
   8a256:	9000      	str	r0, [sp, #0]
   8a258:	4616      	mov	r6, r2
   8a25a:	d525      	bpl.n	8a2a8 <__sfvwrite_r+0x64>
   8a25c:	6922      	ldr	r2, [r4, #16]
   8a25e:	b31a      	cbz	r2, 8a2a8 <__sfvwrite_r+0x64>
   8a260:	f013 0002 	ands.w	r0, r3, #2
   8a264:	6835      	ldr	r5, [r6, #0]
   8a266:	d02b      	beq.n	8a2c0 <__sfvwrite_r+0x7c>
   8a268:	f04f 0900 	mov.w	r9, #0
   8a26c:	46b0      	mov	r8, r6
   8a26e:	464f      	mov	r7, r9
   8a270:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8a534 <__sfvwrite_r+0x2f0>
   8a274:	2f00      	cmp	r7, #0
   8a276:	d055      	beq.n	8a324 <__sfvwrite_r+0xe0>
   8a278:	4557      	cmp	r7, sl
   8a27a:	463b      	mov	r3, r7
   8a27c:	464a      	mov	r2, r9
   8a27e:	bf28      	it	cs
   8a280:	4653      	movcs	r3, sl
   8a282:	69e1      	ldr	r1, [r4, #28]
   8a284:	9800      	ldr	r0, [sp, #0]
   8a286:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a288:	47b0      	blx	r6
   8a28a:	2800      	cmp	r0, #0
   8a28c:	dd56      	ble.n	8a33c <__sfvwrite_r+0xf8>
   8a28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a292:	4481      	add	r9, r0
   8a294:	1a1b      	subs	r3, r3, r0
   8a296:	1a3f      	subs	r7, r7, r0
   8a298:	f8c8 3008 	str.w	r3, [r8, #8]
   8a29c:	2b00      	cmp	r3, #0
   8a29e:	d1e9      	bne.n	8a274 <__sfvwrite_r+0x30>
   8a2a0:	2000      	movs	r0, #0
   8a2a2:	b003      	add	sp, #12
   8a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a2a8:	4621      	mov	r1, r4
   8a2aa:	9800      	ldr	r0, [sp, #0]
   8a2ac:	f7fe fca0 	bl	88bf0 <__swsetup_r>
   8a2b0:	2800      	cmp	r0, #0
   8a2b2:	f040 8135 	bne.w	8a520 <__sfvwrite_r+0x2dc>
   8a2b6:	89a3      	ldrh	r3, [r4, #12]
   8a2b8:	6835      	ldr	r5, [r6, #0]
   8a2ba:	f013 0002 	ands.w	r0, r3, #2
   8a2be:	d1d3      	bne.n	8a268 <__sfvwrite_r+0x24>
   8a2c0:	f013 0901 	ands.w	r9, r3, #1
   8a2c4:	d144      	bne.n	8a350 <__sfvwrite_r+0x10c>
   8a2c6:	464f      	mov	r7, r9
   8a2c8:	9601      	str	r6, [sp, #4]
   8a2ca:	b337      	cbz	r7, 8a31a <__sfvwrite_r+0xd6>
   8a2cc:	059a      	lsls	r2, r3, #22
   8a2ce:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8a2d2:	f140 8085 	bpl.w	8a3e0 <__sfvwrite_r+0x19c>
   8a2d6:	4547      	cmp	r7, r8
   8a2d8:	46c3      	mov	fp, r8
   8a2da:	f0c0 80ad 	bcc.w	8a438 <__sfvwrite_r+0x1f4>
   8a2de:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a2e2:	f040 80ae 	bne.w	8a442 <__sfvwrite_r+0x1fe>
   8a2e6:	46ba      	mov	sl, r7
   8a2e8:	6820      	ldr	r0, [r4, #0]
   8a2ea:	465a      	mov	r2, fp
   8a2ec:	4649      	mov	r1, r9
   8a2ee:	f000 fced 	bl	8accc <memmove>
   8a2f2:	68a2      	ldr	r2, [r4, #8]
   8a2f4:	6823      	ldr	r3, [r4, #0]
   8a2f6:	eba2 0208 	sub.w	r2, r2, r8
   8a2fa:	445b      	add	r3, fp
   8a2fc:	60a2      	str	r2, [r4, #8]
   8a2fe:	6023      	str	r3, [r4, #0]
   8a300:	9a01      	ldr	r2, [sp, #4]
   8a302:	44d1      	add	r9, sl
   8a304:	6893      	ldr	r3, [r2, #8]
   8a306:	eba7 070a 	sub.w	r7, r7, sl
   8a30a:	eba3 030a 	sub.w	r3, r3, sl
   8a30e:	6093      	str	r3, [r2, #8]
   8a310:	2b00      	cmp	r3, #0
   8a312:	d0c5      	beq.n	8a2a0 <__sfvwrite_r+0x5c>
   8a314:	89a3      	ldrh	r3, [r4, #12]
   8a316:	2f00      	cmp	r7, #0
   8a318:	d1d8      	bne.n	8a2cc <__sfvwrite_r+0x88>
   8a31a:	f8d5 9000 	ldr.w	r9, [r5]
   8a31e:	686f      	ldr	r7, [r5, #4]
   8a320:	3508      	adds	r5, #8
   8a322:	e7d2      	b.n	8a2ca <__sfvwrite_r+0x86>
   8a324:	f8d5 9000 	ldr.w	r9, [r5]
   8a328:	686f      	ldr	r7, [r5, #4]
   8a32a:	3508      	adds	r5, #8
   8a32c:	e7a2      	b.n	8a274 <__sfvwrite_r+0x30>
   8a32e:	2000      	movs	r0, #0
   8a330:	4770      	bx	lr
   8a332:	4621      	mov	r1, r4
   8a334:	9800      	ldr	r0, [sp, #0]
   8a336:	f7ff fd21 	bl	89d7c <_fflush_r>
   8a33a:	b378      	cbz	r0, 8a39c <__sfvwrite_r+0x158>
   8a33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a340:	f04f 30ff 	mov.w	r0, #4294967295
   8a344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a348:	81a3      	strh	r3, [r4, #12]
   8a34a:	b003      	add	sp, #12
   8a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a350:	4681      	mov	r9, r0
   8a352:	4633      	mov	r3, r6
   8a354:	464e      	mov	r6, r9
   8a356:	46a8      	mov	r8, r5
   8a358:	469a      	mov	sl, r3
   8a35a:	464d      	mov	r5, r9
   8a35c:	b356      	cbz	r6, 8a3b4 <__sfvwrite_r+0x170>
   8a35e:	2800      	cmp	r0, #0
   8a360:	d032      	beq.n	8a3c8 <__sfvwrite_r+0x184>
   8a362:	45b1      	cmp	r9, r6
   8a364:	46cb      	mov	fp, r9
   8a366:	bf28      	it	cs
   8a368:	46b3      	movcs	fp, r6
   8a36a:	6820      	ldr	r0, [r4, #0]
   8a36c:	6923      	ldr	r3, [r4, #16]
   8a36e:	465f      	mov	r7, fp
   8a370:	4298      	cmp	r0, r3
   8a372:	6962      	ldr	r2, [r4, #20]
   8a374:	d904      	bls.n	8a380 <__sfvwrite_r+0x13c>
   8a376:	68a3      	ldr	r3, [r4, #8]
   8a378:	4413      	add	r3, r2
   8a37a:	459b      	cmp	fp, r3
   8a37c:	f300 80a8 	bgt.w	8a4d0 <__sfvwrite_r+0x28c>
   8a380:	4593      	cmp	fp, r2
   8a382:	db4d      	blt.n	8a420 <__sfvwrite_r+0x1dc>
   8a384:	4613      	mov	r3, r2
   8a386:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a388:	462a      	mov	r2, r5
   8a38a:	69e1      	ldr	r1, [r4, #28]
   8a38c:	9800      	ldr	r0, [sp, #0]
   8a38e:	47b8      	blx	r7
   8a390:	1e07      	subs	r7, r0, #0
   8a392:	ddd3      	ble.n	8a33c <__sfvwrite_r+0xf8>
   8a394:	ebb9 0907 	subs.w	r9, r9, r7
   8a398:	d0cb      	beq.n	8a332 <__sfvwrite_r+0xee>
   8a39a:	2001      	movs	r0, #1
   8a39c:	f8da 3008 	ldr.w	r3, [sl, #8]
   8a3a0:	443d      	add	r5, r7
   8a3a2:	1bdb      	subs	r3, r3, r7
   8a3a4:	1bf6      	subs	r6, r6, r7
   8a3a6:	f8ca 3008 	str.w	r3, [sl, #8]
   8a3aa:	2b00      	cmp	r3, #0
   8a3ac:	f43f af78 	beq.w	8a2a0 <__sfvwrite_r+0x5c>
   8a3b0:	2e00      	cmp	r6, #0
   8a3b2:	d1d4      	bne.n	8a35e <__sfvwrite_r+0x11a>
   8a3b4:	f108 0308 	add.w	r3, r8, #8
   8a3b8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a3bc:	4698      	mov	r8, r3
   8a3be:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a3c2:	3308      	adds	r3, #8
   8a3c4:	2e00      	cmp	r6, #0
   8a3c6:	d0f7      	beq.n	8a3b8 <__sfvwrite_r+0x174>
   8a3c8:	4632      	mov	r2, r6
   8a3ca:	210a      	movs	r1, #10
   8a3cc:	4628      	mov	r0, r5
   8a3ce:	f000 fc37 	bl	8ac40 <memchr>
   8a3d2:	2800      	cmp	r0, #0
   8a3d4:	f000 80a1 	beq.w	8a51a <__sfvwrite_r+0x2d6>
   8a3d8:	3001      	adds	r0, #1
   8a3da:	eba0 0905 	sub.w	r9, r0, r5
   8a3de:	e7c0      	b.n	8a362 <__sfvwrite_r+0x11e>
   8a3e0:	6820      	ldr	r0, [r4, #0]
   8a3e2:	6923      	ldr	r3, [r4, #16]
   8a3e4:	4298      	cmp	r0, r3
   8a3e6:	d802      	bhi.n	8a3ee <__sfvwrite_r+0x1aa>
   8a3e8:	6963      	ldr	r3, [r4, #20]
   8a3ea:	429f      	cmp	r7, r3
   8a3ec:	d25d      	bcs.n	8a4aa <__sfvwrite_r+0x266>
   8a3ee:	45b8      	cmp	r8, r7
   8a3f0:	bf28      	it	cs
   8a3f2:	46b8      	movcs	r8, r7
   8a3f4:	4649      	mov	r1, r9
   8a3f6:	4642      	mov	r2, r8
   8a3f8:	f000 fc68 	bl	8accc <memmove>
   8a3fc:	68a3      	ldr	r3, [r4, #8]
   8a3fe:	6822      	ldr	r2, [r4, #0]
   8a400:	eba3 0308 	sub.w	r3, r3, r8
   8a404:	4442      	add	r2, r8
   8a406:	60a3      	str	r3, [r4, #8]
   8a408:	6022      	str	r2, [r4, #0]
   8a40a:	b10b      	cbz	r3, 8a410 <__sfvwrite_r+0x1cc>
   8a40c:	46c2      	mov	sl, r8
   8a40e:	e777      	b.n	8a300 <__sfvwrite_r+0xbc>
   8a410:	4621      	mov	r1, r4
   8a412:	9800      	ldr	r0, [sp, #0]
   8a414:	f7ff fcb2 	bl	89d7c <_fflush_r>
   8a418:	2800      	cmp	r0, #0
   8a41a:	d18f      	bne.n	8a33c <__sfvwrite_r+0xf8>
   8a41c:	46c2      	mov	sl, r8
   8a41e:	e76f      	b.n	8a300 <__sfvwrite_r+0xbc>
   8a420:	465a      	mov	r2, fp
   8a422:	4629      	mov	r1, r5
   8a424:	f000 fc52 	bl	8accc <memmove>
   8a428:	68a2      	ldr	r2, [r4, #8]
   8a42a:	6823      	ldr	r3, [r4, #0]
   8a42c:	eba2 020b 	sub.w	r2, r2, fp
   8a430:	445b      	add	r3, fp
   8a432:	60a2      	str	r2, [r4, #8]
   8a434:	6023      	str	r3, [r4, #0]
   8a436:	e7ad      	b.n	8a394 <__sfvwrite_r+0x150>
   8a438:	46b8      	mov	r8, r7
   8a43a:	46ba      	mov	sl, r7
   8a43c:	46bb      	mov	fp, r7
   8a43e:	6820      	ldr	r0, [r4, #0]
   8a440:	e753      	b.n	8a2ea <__sfvwrite_r+0xa6>
   8a442:	6962      	ldr	r2, [r4, #20]
   8a444:	6820      	ldr	r0, [r4, #0]
   8a446:	6921      	ldr	r1, [r4, #16]
   8a448:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8a44c:	eba0 0a01 	sub.w	sl, r0, r1
   8a450:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8a454:	f10a 0001 	add.w	r0, sl, #1
   8a458:	ea4f 0868 	mov.w	r8, r8, asr #1
   8a45c:	4438      	add	r0, r7
   8a45e:	4540      	cmp	r0, r8
   8a460:	4642      	mov	r2, r8
   8a462:	bf84      	itt	hi
   8a464:	4680      	movhi	r8, r0
   8a466:	4642      	movhi	r2, r8
   8a468:	055b      	lsls	r3, r3, #21
   8a46a:	d544      	bpl.n	8a4f6 <__sfvwrite_r+0x2b2>
   8a46c:	4611      	mov	r1, r2
   8a46e:	9800      	ldr	r0, [sp, #0]
   8a470:	f000 f92e 	bl	8a6d0 <_malloc_r>
   8a474:	4683      	mov	fp, r0
   8a476:	2800      	cmp	r0, #0
   8a478:	d055      	beq.n	8a526 <__sfvwrite_r+0x2e2>
   8a47a:	4652      	mov	r2, sl
   8a47c:	6921      	ldr	r1, [r4, #16]
   8a47e:	f7fc f855 	bl	8652c <memcpy>
   8a482:	89a3      	ldrh	r3, [r4, #12]
   8a484:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a48c:	81a3      	strh	r3, [r4, #12]
   8a48e:	eb0b 000a 	add.w	r0, fp, sl
   8a492:	eba8 030a 	sub.w	r3, r8, sl
   8a496:	f8c4 b010 	str.w	fp, [r4, #16]
   8a49a:	f8c4 8014 	str.w	r8, [r4, #20]
   8a49e:	6020      	str	r0, [r4, #0]
   8a4a0:	60a3      	str	r3, [r4, #8]
   8a4a2:	46b8      	mov	r8, r7
   8a4a4:	46ba      	mov	sl, r7
   8a4a6:	46bb      	mov	fp, r7
   8a4a8:	e71f      	b.n	8a2ea <__sfvwrite_r+0xa6>
   8a4aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8a4ae:	42ba      	cmp	r2, r7
   8a4b0:	bf28      	it	cs
   8a4b2:	463a      	movcs	r2, r7
   8a4b4:	fb92 f2f3 	sdiv	r2, r2, r3
   8a4b8:	69e1      	ldr	r1, [r4, #28]
   8a4ba:	fb03 f302 	mul.w	r3, r3, r2
   8a4be:	9800      	ldr	r0, [sp, #0]
   8a4c0:	464a      	mov	r2, r9
   8a4c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a4c4:	47b0      	blx	r6
   8a4c6:	f1b0 0a00 	subs.w	sl, r0, #0
   8a4ca:	f73f af19 	bgt.w	8a300 <__sfvwrite_r+0xbc>
   8a4ce:	e735      	b.n	8a33c <__sfvwrite_r+0xf8>
   8a4d0:	461a      	mov	r2, r3
   8a4d2:	4629      	mov	r1, r5
   8a4d4:	9301      	str	r3, [sp, #4]
   8a4d6:	f000 fbf9 	bl	8accc <memmove>
   8a4da:	6822      	ldr	r2, [r4, #0]
   8a4dc:	9b01      	ldr	r3, [sp, #4]
   8a4de:	4621      	mov	r1, r4
   8a4e0:	441a      	add	r2, r3
   8a4e2:	6022      	str	r2, [r4, #0]
   8a4e4:	9800      	ldr	r0, [sp, #0]
   8a4e6:	f7ff fc49 	bl	89d7c <_fflush_r>
   8a4ea:	9b01      	ldr	r3, [sp, #4]
   8a4ec:	2800      	cmp	r0, #0
   8a4ee:	f47f af25 	bne.w	8a33c <__sfvwrite_r+0xf8>
   8a4f2:	461f      	mov	r7, r3
   8a4f4:	e74e      	b.n	8a394 <__sfvwrite_r+0x150>
   8a4f6:	9800      	ldr	r0, [sp, #0]
   8a4f8:	f000 ff54 	bl	8b3a4 <_realloc_r>
   8a4fc:	4683      	mov	fp, r0
   8a4fe:	2800      	cmp	r0, #0
   8a500:	d1c5      	bne.n	8a48e <__sfvwrite_r+0x24a>
   8a502:	9d00      	ldr	r5, [sp, #0]
   8a504:	6921      	ldr	r1, [r4, #16]
   8a506:	4628      	mov	r0, r5
   8a508:	f7ff fdb6 	bl	8a078 <_free_r>
   8a50c:	220c      	movs	r2, #12
   8a50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a512:	602a      	str	r2, [r5, #0]
   8a514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a518:	e712      	b.n	8a340 <__sfvwrite_r+0xfc>
   8a51a:	f106 0901 	add.w	r9, r6, #1
   8a51e:	e720      	b.n	8a362 <__sfvwrite_r+0x11e>
   8a520:	f04f 30ff 	mov.w	r0, #4294967295
   8a524:	e6bd      	b.n	8a2a2 <__sfvwrite_r+0x5e>
   8a526:	220c      	movs	r2, #12
   8a528:	9900      	ldr	r1, [sp, #0]
   8a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a52e:	600a      	str	r2, [r1, #0]
   8a530:	e706      	b.n	8a340 <__sfvwrite_r+0xfc>
   8a532:	bf00      	nop
   8a534:	7ffffc00 	.word	0x7ffffc00

0008a538 <_fwalk_reent>:
   8a538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a53c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8a540:	d01e      	beq.n	8a580 <_fwalk_reent+0x48>
   8a542:	4688      	mov	r8, r1
   8a544:	4607      	mov	r7, r0
   8a546:	f04f 0900 	mov.w	r9, #0
   8a54a:	6875      	ldr	r5, [r6, #4]
   8a54c:	68b4      	ldr	r4, [r6, #8]
   8a54e:	3d01      	subs	r5, #1
   8a550:	d410      	bmi.n	8a574 <_fwalk_reent+0x3c>
   8a552:	89a3      	ldrh	r3, [r4, #12]
   8a554:	3d01      	subs	r5, #1
   8a556:	2b01      	cmp	r3, #1
   8a558:	d908      	bls.n	8a56c <_fwalk_reent+0x34>
   8a55a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a55e:	3301      	adds	r3, #1
   8a560:	d004      	beq.n	8a56c <_fwalk_reent+0x34>
   8a562:	4621      	mov	r1, r4
   8a564:	4638      	mov	r0, r7
   8a566:	47c0      	blx	r8
   8a568:	ea49 0900 	orr.w	r9, r9, r0
   8a56c:	1c6b      	adds	r3, r5, #1
   8a56e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a572:	d1ee      	bne.n	8a552 <_fwalk_reent+0x1a>
   8a574:	6836      	ldr	r6, [r6, #0]
   8a576:	2e00      	cmp	r6, #0
   8a578:	d1e7      	bne.n	8a54a <_fwalk_reent+0x12>
   8a57a:	4648      	mov	r0, r9
   8a57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a580:	46b1      	mov	r9, r6
   8a582:	4648      	mov	r0, r9
   8a584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008a588 <__locale_mb_cur_max>:
   8a588:	4b04      	ldr	r3, [pc, #16]	; (8a59c <__locale_mb_cur_max+0x14>)
   8a58a:	4a05      	ldr	r2, [pc, #20]	; (8a5a0 <__locale_mb_cur_max+0x18>)
   8a58c:	681b      	ldr	r3, [r3, #0]
   8a58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8a590:	2b00      	cmp	r3, #0
   8a592:	bf08      	it	eq
   8a594:	4613      	moveq	r3, r2
   8a596:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a59a:	4770      	bx	lr
   8a59c:	20000aa8 	.word	0x20000aa8
   8a5a0:	20000edc 	.word	0x20000edc

0008a5a4 <_localeconv_r>:
   8a5a4:	4a04      	ldr	r2, [pc, #16]	; (8a5b8 <_localeconv_r+0x14>)
   8a5a6:	4b05      	ldr	r3, [pc, #20]	; (8a5bc <_localeconv_r+0x18>)
   8a5a8:	6812      	ldr	r2, [r2, #0]
   8a5aa:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8a5ac:	2800      	cmp	r0, #0
   8a5ae:	bf08      	it	eq
   8a5b0:	4618      	moveq	r0, r3
   8a5b2:	30f0      	adds	r0, #240	; 0xf0
   8a5b4:	4770      	bx	lr
   8a5b6:	bf00      	nop
   8a5b8:	20000aa8 	.word	0x20000aa8
   8a5bc:	20000edc 	.word	0x20000edc

0008a5c0 <__retarget_lock_init_recursive>:
   8a5c0:	4770      	bx	lr
   8a5c2:	bf00      	nop

0008a5c4 <__retarget_lock_close_recursive>:
   8a5c4:	4770      	bx	lr
   8a5c6:	bf00      	nop

0008a5c8 <__retarget_lock_acquire_recursive>:
   8a5c8:	4770      	bx	lr
   8a5ca:	bf00      	nop

0008a5cc <__retarget_lock_release_recursive>:
   8a5cc:	4770      	bx	lr
   8a5ce:	bf00      	nop

0008a5d0 <__swhatbuf_r>:
   8a5d0:	b570      	push	{r4, r5, r6, lr}
   8a5d2:	460c      	mov	r4, r1
   8a5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a5d8:	b090      	sub	sp, #64	; 0x40
   8a5da:	2900      	cmp	r1, #0
   8a5dc:	4615      	mov	r5, r2
   8a5de:	461e      	mov	r6, r3
   8a5e0:	db14      	blt.n	8a60c <__swhatbuf_r+0x3c>
   8a5e2:	aa01      	add	r2, sp, #4
   8a5e4:	f001 fb12 	bl	8bc0c <_fstat_r>
   8a5e8:	2800      	cmp	r0, #0
   8a5ea:	db0f      	blt.n	8a60c <__swhatbuf_r+0x3c>
   8a5ec:	9a02      	ldr	r2, [sp, #8]
   8a5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a5f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a5f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a5fa:	fab2 f282 	clz	r2, r2
   8a5fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a602:	0952      	lsrs	r2, r2, #5
   8a604:	6032      	str	r2, [r6, #0]
   8a606:	602b      	str	r3, [r5, #0]
   8a608:	b010      	add	sp, #64	; 0x40
   8a60a:	bd70      	pop	{r4, r5, r6, pc}
   8a60c:	2300      	movs	r3, #0
   8a60e:	89a2      	ldrh	r2, [r4, #12]
   8a610:	6033      	str	r3, [r6, #0]
   8a612:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8a616:	d004      	beq.n	8a622 <__swhatbuf_r+0x52>
   8a618:	2240      	movs	r2, #64	; 0x40
   8a61a:	4618      	mov	r0, r3
   8a61c:	602a      	str	r2, [r5, #0]
   8a61e:	b010      	add	sp, #64	; 0x40
   8a620:	bd70      	pop	{r4, r5, r6, pc}
   8a622:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a626:	602b      	str	r3, [r5, #0]
   8a628:	b010      	add	sp, #64	; 0x40
   8a62a:	bd70      	pop	{r4, r5, r6, pc}

0008a62c <__smakebuf_r>:
   8a62c:	898a      	ldrh	r2, [r1, #12]
   8a62e:	460b      	mov	r3, r1
   8a630:	0792      	lsls	r2, r2, #30
   8a632:	d506      	bpl.n	8a642 <__smakebuf_r+0x16>
   8a634:	2101      	movs	r1, #1
   8a636:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8a63a:	6159      	str	r1, [r3, #20]
   8a63c:	601a      	str	r2, [r3, #0]
   8a63e:	611a      	str	r2, [r3, #16]
   8a640:	4770      	bx	lr
   8a642:	b5f0      	push	{r4, r5, r6, r7, lr}
   8a644:	b083      	sub	sp, #12
   8a646:	ab01      	add	r3, sp, #4
   8a648:	466a      	mov	r2, sp
   8a64a:	460c      	mov	r4, r1
   8a64c:	4606      	mov	r6, r0
   8a64e:	f7ff ffbf 	bl	8a5d0 <__swhatbuf_r>
   8a652:	9900      	ldr	r1, [sp, #0]
   8a654:	4605      	mov	r5, r0
   8a656:	4630      	mov	r0, r6
   8a658:	f000 f83a 	bl	8a6d0 <_malloc_r>
   8a65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a660:	b1d8      	cbz	r0, 8a69a <__smakebuf_r+0x6e>
   8a662:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8a666:	4f15      	ldr	r7, [pc, #84]	; (8a6bc <__smakebuf_r+0x90>)
   8a668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a66c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8a66e:	81a3      	strh	r3, [r4, #12]
   8a670:	6020      	str	r0, [r4, #0]
   8a672:	6120      	str	r0, [r4, #16]
   8a674:	6161      	str	r1, [r4, #20]
   8a676:	b91a      	cbnz	r2, 8a680 <__smakebuf_r+0x54>
   8a678:	432b      	orrs	r3, r5
   8a67a:	81a3      	strh	r3, [r4, #12]
   8a67c:	b003      	add	sp, #12
   8a67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8a680:	4630      	mov	r0, r6
   8a682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a686:	f001 fad5 	bl	8bc34 <_isatty_r>
   8a68a:	b1a0      	cbz	r0, 8a6b6 <__smakebuf_r+0x8a>
   8a68c:	89a3      	ldrh	r3, [r4, #12]
   8a68e:	f023 0303 	bic.w	r3, r3, #3
   8a692:	f043 0301 	orr.w	r3, r3, #1
   8a696:	b21b      	sxth	r3, r3
   8a698:	e7ee      	b.n	8a678 <__smakebuf_r+0x4c>
   8a69a:	059a      	lsls	r2, r3, #22
   8a69c:	d4ee      	bmi.n	8a67c <__smakebuf_r+0x50>
   8a69e:	2101      	movs	r1, #1
   8a6a0:	f023 0303 	bic.w	r3, r3, #3
   8a6a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a6a8:	f043 0302 	orr.w	r3, r3, #2
   8a6ac:	81a3      	strh	r3, [r4, #12]
   8a6ae:	6161      	str	r1, [r4, #20]
   8a6b0:	6022      	str	r2, [r4, #0]
   8a6b2:	6122      	str	r2, [r4, #16]
   8a6b4:	e7e2      	b.n	8a67c <__smakebuf_r+0x50>
   8a6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a6ba:	e7dd      	b.n	8a678 <__smakebuf_r+0x4c>
   8a6bc:	00089dd1 	.word	0x00089dd1

0008a6c0 <malloc>:
   8a6c0:	4b02      	ldr	r3, [pc, #8]	; (8a6cc <malloc+0xc>)
   8a6c2:	4601      	mov	r1, r0
   8a6c4:	6818      	ldr	r0, [r3, #0]
   8a6c6:	f000 b803 	b.w	8a6d0 <_malloc_r>
   8a6ca:	bf00      	nop
   8a6cc:	20000aa8 	.word	0x20000aa8

0008a6d0 <_malloc_r>:
   8a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a6d4:	f101 060b 	add.w	r6, r1, #11
   8a6d8:	2e16      	cmp	r6, #22
   8a6da:	b083      	sub	sp, #12
   8a6dc:	4605      	mov	r5, r0
   8a6de:	f240 809e 	bls.w	8a81e <_malloc_r+0x14e>
   8a6e2:	f036 0607 	bics.w	r6, r6, #7
   8a6e6:	f100 80bd 	bmi.w	8a864 <_malloc_r+0x194>
   8a6ea:	42b1      	cmp	r1, r6
   8a6ec:	f200 80ba 	bhi.w	8a864 <_malloc_r+0x194>
   8a6f0:	f000 fb50 	bl	8ad94 <__malloc_lock>
   8a6f4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8a6f8:	f0c0 8285 	bcc.w	8ac06 <_malloc_r+0x536>
   8a6fc:	0a73      	lsrs	r3, r6, #9
   8a6fe:	f000 80b8 	beq.w	8a872 <_malloc_r+0x1a2>
   8a702:	2b04      	cmp	r3, #4
   8a704:	f200 816c 	bhi.w	8a9e0 <_malloc_r+0x310>
   8a708:	09b3      	lsrs	r3, r6, #6
   8a70a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a70e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8a712:	00c1      	lsls	r1, r0, #3
   8a714:	4fb8      	ldr	r7, [pc, #736]	; (8a9f8 <_malloc_r+0x328>)
   8a716:	4439      	add	r1, r7
   8a718:	684c      	ldr	r4, [r1, #4]
   8a71a:	3908      	subs	r1, #8
   8a71c:	42a1      	cmp	r1, r4
   8a71e:	d106      	bne.n	8a72e <_malloc_r+0x5e>
   8a720:	e00c      	b.n	8a73c <_malloc_r+0x6c>
   8a722:	2a00      	cmp	r2, #0
   8a724:	f280 80ab 	bge.w	8a87e <_malloc_r+0x1ae>
   8a728:	68e4      	ldr	r4, [r4, #12]
   8a72a:	42a1      	cmp	r1, r4
   8a72c:	d006      	beq.n	8a73c <_malloc_r+0x6c>
   8a72e:	6863      	ldr	r3, [r4, #4]
   8a730:	f023 0303 	bic.w	r3, r3, #3
   8a734:	1b9a      	subs	r2, r3, r6
   8a736:	2a0f      	cmp	r2, #15
   8a738:	ddf3      	ble.n	8a722 <_malloc_r+0x52>
   8a73a:	4670      	mov	r0, lr
   8a73c:	693c      	ldr	r4, [r7, #16]
   8a73e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8aa0c <_malloc_r+0x33c>
   8a742:	4574      	cmp	r4, lr
   8a744:	f000 819e 	beq.w	8aa84 <_malloc_r+0x3b4>
   8a748:	6863      	ldr	r3, [r4, #4]
   8a74a:	f023 0303 	bic.w	r3, r3, #3
   8a74e:	1b9a      	subs	r2, r3, r6
   8a750:	2a0f      	cmp	r2, #15
   8a752:	f300 8183 	bgt.w	8aa5c <_malloc_r+0x38c>
   8a756:	2a00      	cmp	r2, #0
   8a758:	f8c7 e014 	str.w	lr, [r7, #20]
   8a75c:	f8c7 e010 	str.w	lr, [r7, #16]
   8a760:	f280 8091 	bge.w	8a886 <_malloc_r+0x1b6>
   8a764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a768:	f080 8154 	bcs.w	8aa14 <_malloc_r+0x344>
   8a76c:	2201      	movs	r2, #1
   8a76e:	08db      	lsrs	r3, r3, #3
   8a770:	6879      	ldr	r1, [r7, #4]
   8a772:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8a776:	4413      	add	r3, r2
   8a778:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8a77c:	fa02 f20c 	lsl.w	r2, r2, ip
   8a780:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8a784:	430a      	orrs	r2, r1
   8a786:	f1ac 0108 	sub.w	r1, ip, #8
   8a78a:	60e1      	str	r1, [r4, #12]
   8a78c:	f8c4 8008 	str.w	r8, [r4, #8]
   8a790:	607a      	str	r2, [r7, #4]
   8a792:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8a796:	f8c8 400c 	str.w	r4, [r8, #12]
   8a79a:	2401      	movs	r4, #1
   8a79c:	1083      	asrs	r3, r0, #2
   8a79e:	409c      	lsls	r4, r3
   8a7a0:	4294      	cmp	r4, r2
   8a7a2:	d87d      	bhi.n	8a8a0 <_malloc_r+0x1d0>
   8a7a4:	4214      	tst	r4, r2
   8a7a6:	d106      	bne.n	8a7b6 <_malloc_r+0xe6>
   8a7a8:	f020 0003 	bic.w	r0, r0, #3
   8a7ac:	0064      	lsls	r4, r4, #1
   8a7ae:	4214      	tst	r4, r2
   8a7b0:	f100 0004 	add.w	r0, r0, #4
   8a7b4:	d0fa      	beq.n	8a7ac <_malloc_r+0xdc>
   8a7b6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8a7ba:	46cc      	mov	ip, r9
   8a7bc:	4680      	mov	r8, r0
   8a7be:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8a7c2:	459c      	cmp	ip, r3
   8a7c4:	d107      	bne.n	8a7d6 <_malloc_r+0x106>
   8a7c6:	e15f      	b.n	8aa88 <_malloc_r+0x3b8>
   8a7c8:	2a00      	cmp	r2, #0
   8a7ca:	f280 816d 	bge.w	8aaa8 <_malloc_r+0x3d8>
   8a7ce:	68db      	ldr	r3, [r3, #12]
   8a7d0:	459c      	cmp	ip, r3
   8a7d2:	f000 8159 	beq.w	8aa88 <_malloc_r+0x3b8>
   8a7d6:	6859      	ldr	r1, [r3, #4]
   8a7d8:	f021 0103 	bic.w	r1, r1, #3
   8a7dc:	1b8a      	subs	r2, r1, r6
   8a7de:	2a0f      	cmp	r2, #15
   8a7e0:	ddf2      	ble.n	8a7c8 <_malloc_r+0xf8>
   8a7e2:	68dc      	ldr	r4, [r3, #12]
   8a7e4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a7e8:	f046 0801 	orr.w	r8, r6, #1
   8a7ec:	4628      	mov	r0, r5
   8a7ee:	441e      	add	r6, r3
   8a7f0:	f042 0501 	orr.w	r5, r2, #1
   8a7f4:	f8c3 8004 	str.w	r8, [r3, #4]
   8a7f8:	f8cc 400c 	str.w	r4, [ip, #12]
   8a7fc:	f8c4 c008 	str.w	ip, [r4, #8]
   8a800:	617e      	str	r6, [r7, #20]
   8a802:	613e      	str	r6, [r7, #16]
   8a804:	f8c6 e00c 	str.w	lr, [r6, #12]
   8a808:	f8c6 e008 	str.w	lr, [r6, #8]
   8a80c:	6075      	str	r5, [r6, #4]
   8a80e:	505a      	str	r2, [r3, r1]
   8a810:	9300      	str	r3, [sp, #0]
   8a812:	f000 fac5 	bl	8ada0 <__malloc_unlock>
   8a816:	9b00      	ldr	r3, [sp, #0]
   8a818:	f103 0408 	add.w	r4, r3, #8
   8a81c:	e01e      	b.n	8a85c <_malloc_r+0x18c>
   8a81e:	2910      	cmp	r1, #16
   8a820:	d820      	bhi.n	8a864 <_malloc_r+0x194>
   8a822:	f000 fab7 	bl	8ad94 <__malloc_lock>
   8a826:	2610      	movs	r6, #16
   8a828:	2318      	movs	r3, #24
   8a82a:	2002      	movs	r0, #2
   8a82c:	4f72      	ldr	r7, [pc, #456]	; (8a9f8 <_malloc_r+0x328>)
   8a82e:	443b      	add	r3, r7
   8a830:	685c      	ldr	r4, [r3, #4]
   8a832:	f1a3 0208 	sub.w	r2, r3, #8
   8a836:	4294      	cmp	r4, r2
   8a838:	f000 812f 	beq.w	8aa9a <_malloc_r+0x3ca>
   8a83c:	6863      	ldr	r3, [r4, #4]
   8a83e:	68e1      	ldr	r1, [r4, #12]
   8a840:	f023 0303 	bic.w	r3, r3, #3
   8a844:	4423      	add	r3, r4
   8a846:	685a      	ldr	r2, [r3, #4]
   8a848:	68a6      	ldr	r6, [r4, #8]
   8a84a:	f042 0201 	orr.w	r2, r2, #1
   8a84e:	60f1      	str	r1, [r6, #12]
   8a850:	4628      	mov	r0, r5
   8a852:	608e      	str	r6, [r1, #8]
   8a854:	605a      	str	r2, [r3, #4]
   8a856:	f000 faa3 	bl	8ada0 <__malloc_unlock>
   8a85a:	3408      	adds	r4, #8
   8a85c:	4620      	mov	r0, r4
   8a85e:	b003      	add	sp, #12
   8a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a864:	2400      	movs	r4, #0
   8a866:	230c      	movs	r3, #12
   8a868:	4620      	mov	r0, r4
   8a86a:	602b      	str	r3, [r5, #0]
   8a86c:	b003      	add	sp, #12
   8a86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a872:	2040      	movs	r0, #64	; 0x40
   8a874:	f44f 7100 	mov.w	r1, #512	; 0x200
   8a878:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8a87c:	e74a      	b.n	8a714 <_malloc_r+0x44>
   8a87e:	4423      	add	r3, r4
   8a880:	685a      	ldr	r2, [r3, #4]
   8a882:	68e1      	ldr	r1, [r4, #12]
   8a884:	e7e0      	b.n	8a848 <_malloc_r+0x178>
   8a886:	4423      	add	r3, r4
   8a888:	685a      	ldr	r2, [r3, #4]
   8a88a:	4628      	mov	r0, r5
   8a88c:	f042 0201 	orr.w	r2, r2, #1
   8a890:	605a      	str	r2, [r3, #4]
   8a892:	3408      	adds	r4, #8
   8a894:	f000 fa84 	bl	8ada0 <__malloc_unlock>
   8a898:	4620      	mov	r0, r4
   8a89a:	b003      	add	sp, #12
   8a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a8a0:	68bc      	ldr	r4, [r7, #8]
   8a8a2:	6863      	ldr	r3, [r4, #4]
   8a8a4:	f023 0803 	bic.w	r8, r3, #3
   8a8a8:	45b0      	cmp	r8, r6
   8a8aa:	d304      	bcc.n	8a8b6 <_malloc_r+0x1e6>
   8a8ac:	eba8 0306 	sub.w	r3, r8, r6
   8a8b0:	2b0f      	cmp	r3, #15
   8a8b2:	f300 8085 	bgt.w	8a9c0 <_malloc_r+0x2f0>
   8a8b6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8aa10 <_malloc_r+0x340>
   8a8ba:	4b50      	ldr	r3, [pc, #320]	; (8a9fc <_malloc_r+0x32c>)
   8a8bc:	f8d9 2000 	ldr.w	r2, [r9]
   8a8c0:	681b      	ldr	r3, [r3, #0]
   8a8c2:	3201      	adds	r2, #1
   8a8c4:	4433      	add	r3, r6
   8a8c6:	eb04 0a08 	add.w	sl, r4, r8
   8a8ca:	f000 8154 	beq.w	8ab76 <_malloc_r+0x4a6>
   8a8ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8a8d2:	330f      	adds	r3, #15
   8a8d4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8a8d8:	f02b 0b0f 	bic.w	fp, fp, #15
   8a8dc:	4659      	mov	r1, fp
   8a8de:	4628      	mov	r0, r5
   8a8e0:	f000 ff16 	bl	8b710 <_sbrk_r>
   8a8e4:	1c41      	adds	r1, r0, #1
   8a8e6:	4602      	mov	r2, r0
   8a8e8:	f000 80fb 	beq.w	8aae2 <_malloc_r+0x412>
   8a8ec:	4582      	cmp	sl, r0
   8a8ee:	f200 80f6 	bhi.w	8aade <_malloc_r+0x40e>
   8a8f2:	4b43      	ldr	r3, [pc, #268]	; (8aa00 <_malloc_r+0x330>)
   8a8f4:	6819      	ldr	r1, [r3, #0]
   8a8f6:	4459      	add	r1, fp
   8a8f8:	6019      	str	r1, [r3, #0]
   8a8fa:	f000 814c 	beq.w	8ab96 <_malloc_r+0x4c6>
   8a8fe:	f8d9 0000 	ldr.w	r0, [r9]
   8a902:	3001      	adds	r0, #1
   8a904:	bf1b      	ittet	ne
   8a906:	eba2 0a0a 	subne.w	sl, r2, sl
   8a90a:	4451      	addne	r1, sl
   8a90c:	f8c9 2000 	streq.w	r2, [r9]
   8a910:	6019      	strne	r1, [r3, #0]
   8a912:	f012 0107 	ands.w	r1, r2, #7
   8a916:	f000 8114 	beq.w	8ab42 <_malloc_r+0x472>
   8a91a:	f1c1 0008 	rsb	r0, r1, #8
   8a91e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8a922:	4402      	add	r2, r0
   8a924:	3108      	adds	r1, #8
   8a926:	eb02 090b 	add.w	r9, r2, fp
   8a92a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8a92e:	eba1 0909 	sub.w	r9, r1, r9
   8a932:	4649      	mov	r1, r9
   8a934:	4628      	mov	r0, r5
   8a936:	9301      	str	r3, [sp, #4]
   8a938:	9200      	str	r2, [sp, #0]
   8a93a:	f000 fee9 	bl	8b710 <_sbrk_r>
   8a93e:	1c43      	adds	r3, r0, #1
   8a940:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8a944:	f000 8142 	beq.w	8abcc <_malloc_r+0x4fc>
   8a948:	1a80      	subs	r0, r0, r2
   8a94a:	4448      	add	r0, r9
   8a94c:	f040 0001 	orr.w	r0, r0, #1
   8a950:	6819      	ldr	r1, [r3, #0]
   8a952:	42bc      	cmp	r4, r7
   8a954:	4449      	add	r1, r9
   8a956:	60ba      	str	r2, [r7, #8]
   8a958:	6019      	str	r1, [r3, #0]
   8a95a:	6050      	str	r0, [r2, #4]
   8a95c:	d017      	beq.n	8a98e <_malloc_r+0x2be>
   8a95e:	f1b8 0f0f 	cmp.w	r8, #15
   8a962:	f240 80fa 	bls.w	8ab5a <_malloc_r+0x48a>
   8a966:	f04f 0c05 	mov.w	ip, #5
   8a96a:	6862      	ldr	r2, [r4, #4]
   8a96c:	f1a8 000c 	sub.w	r0, r8, #12
   8a970:	f020 0007 	bic.w	r0, r0, #7
   8a974:	f002 0201 	and.w	r2, r2, #1
   8a978:	eb04 0e00 	add.w	lr, r4, r0
   8a97c:	4302      	orrs	r2, r0
   8a97e:	280f      	cmp	r0, #15
   8a980:	6062      	str	r2, [r4, #4]
   8a982:	f8ce c004 	str.w	ip, [lr, #4]
   8a986:	f8ce c008 	str.w	ip, [lr, #8]
   8a98a:	f200 8116 	bhi.w	8abba <_malloc_r+0x4ea>
   8a98e:	4b1d      	ldr	r3, [pc, #116]	; (8aa04 <_malloc_r+0x334>)
   8a990:	68bc      	ldr	r4, [r7, #8]
   8a992:	681a      	ldr	r2, [r3, #0]
   8a994:	4291      	cmp	r1, r2
   8a996:	bf88      	it	hi
   8a998:	6019      	strhi	r1, [r3, #0]
   8a99a:	4b1b      	ldr	r3, [pc, #108]	; (8aa08 <_malloc_r+0x338>)
   8a99c:	681a      	ldr	r2, [r3, #0]
   8a99e:	4291      	cmp	r1, r2
   8a9a0:	6862      	ldr	r2, [r4, #4]
   8a9a2:	bf88      	it	hi
   8a9a4:	6019      	strhi	r1, [r3, #0]
   8a9a6:	f022 0203 	bic.w	r2, r2, #3
   8a9aa:	4296      	cmp	r6, r2
   8a9ac:	eba2 0306 	sub.w	r3, r2, r6
   8a9b0:	d801      	bhi.n	8a9b6 <_malloc_r+0x2e6>
   8a9b2:	2b0f      	cmp	r3, #15
   8a9b4:	dc04      	bgt.n	8a9c0 <_malloc_r+0x2f0>
   8a9b6:	4628      	mov	r0, r5
   8a9b8:	f000 f9f2 	bl	8ada0 <__malloc_unlock>
   8a9bc:	2400      	movs	r4, #0
   8a9be:	e74d      	b.n	8a85c <_malloc_r+0x18c>
   8a9c0:	f046 0201 	orr.w	r2, r6, #1
   8a9c4:	f043 0301 	orr.w	r3, r3, #1
   8a9c8:	4426      	add	r6, r4
   8a9ca:	6062      	str	r2, [r4, #4]
   8a9cc:	4628      	mov	r0, r5
   8a9ce:	60be      	str	r6, [r7, #8]
   8a9d0:	3408      	adds	r4, #8
   8a9d2:	6073      	str	r3, [r6, #4]
   8a9d4:	f000 f9e4 	bl	8ada0 <__malloc_unlock>
   8a9d8:	4620      	mov	r0, r4
   8a9da:	b003      	add	sp, #12
   8a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9e0:	2b14      	cmp	r3, #20
   8a9e2:	d970      	bls.n	8aac6 <_malloc_r+0x3f6>
   8a9e4:	2b54      	cmp	r3, #84	; 0x54
   8a9e6:	f200 80a2 	bhi.w	8ab2e <_malloc_r+0x45e>
   8a9ea:	0b33      	lsrs	r3, r6, #12
   8a9ec:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8a9f0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8a9f4:	00c1      	lsls	r1, r0, #3
   8a9f6:	e68d      	b.n	8a714 <_malloc_r+0x44>
   8a9f8:	20001048 	.word	0x20001048
   8a9fc:	200024e0 	.word	0x200024e0
   8aa00:	200024b0 	.word	0x200024b0
   8aa04:	200024d8 	.word	0x200024d8
   8aa08:	200024dc 	.word	0x200024dc
   8aa0c:	20001050 	.word	0x20001050
   8aa10:	20001450 	.word	0x20001450
   8aa14:	0a5a      	lsrs	r2, r3, #9
   8aa16:	2a04      	cmp	r2, #4
   8aa18:	d95b      	bls.n	8aad2 <_malloc_r+0x402>
   8aa1a:	2a14      	cmp	r2, #20
   8aa1c:	f200 80ae 	bhi.w	8ab7c <_malloc_r+0x4ac>
   8aa20:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8aa24:	00c9      	lsls	r1, r1, #3
   8aa26:	325b      	adds	r2, #91	; 0x5b
   8aa28:	eb07 0c01 	add.w	ip, r7, r1
   8aa2c:	5879      	ldr	r1, [r7, r1]
   8aa2e:	f1ac 0c08 	sub.w	ip, ip, #8
   8aa32:	458c      	cmp	ip, r1
   8aa34:	f000 8088 	beq.w	8ab48 <_malloc_r+0x478>
   8aa38:	684a      	ldr	r2, [r1, #4]
   8aa3a:	f022 0203 	bic.w	r2, r2, #3
   8aa3e:	4293      	cmp	r3, r2
   8aa40:	d273      	bcs.n	8ab2a <_malloc_r+0x45a>
   8aa42:	6889      	ldr	r1, [r1, #8]
   8aa44:	458c      	cmp	ip, r1
   8aa46:	d1f7      	bne.n	8aa38 <_malloc_r+0x368>
   8aa48:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8aa4c:	687a      	ldr	r2, [r7, #4]
   8aa4e:	60e3      	str	r3, [r4, #12]
   8aa50:	f8c4 c008 	str.w	ip, [r4, #8]
   8aa54:	609c      	str	r4, [r3, #8]
   8aa56:	f8cc 400c 	str.w	r4, [ip, #12]
   8aa5a:	e69e      	b.n	8a79a <_malloc_r+0xca>
   8aa5c:	f046 0c01 	orr.w	ip, r6, #1
   8aa60:	f042 0101 	orr.w	r1, r2, #1
   8aa64:	4426      	add	r6, r4
   8aa66:	f8c4 c004 	str.w	ip, [r4, #4]
   8aa6a:	4628      	mov	r0, r5
   8aa6c:	617e      	str	r6, [r7, #20]
   8aa6e:	613e      	str	r6, [r7, #16]
   8aa70:	f8c6 e00c 	str.w	lr, [r6, #12]
   8aa74:	f8c6 e008 	str.w	lr, [r6, #8]
   8aa78:	6071      	str	r1, [r6, #4]
   8aa7a:	50e2      	str	r2, [r4, r3]
   8aa7c:	f000 f990 	bl	8ada0 <__malloc_unlock>
   8aa80:	3408      	adds	r4, #8
   8aa82:	e6eb      	b.n	8a85c <_malloc_r+0x18c>
   8aa84:	687a      	ldr	r2, [r7, #4]
   8aa86:	e688      	b.n	8a79a <_malloc_r+0xca>
   8aa88:	f108 0801 	add.w	r8, r8, #1
   8aa8c:	f018 0f03 	tst.w	r8, #3
   8aa90:	f10c 0c08 	add.w	ip, ip, #8
   8aa94:	f47f ae93 	bne.w	8a7be <_malloc_r+0xee>
   8aa98:	e02d      	b.n	8aaf6 <_malloc_r+0x426>
   8aa9a:	68dc      	ldr	r4, [r3, #12]
   8aa9c:	42a3      	cmp	r3, r4
   8aa9e:	bf08      	it	eq
   8aaa0:	3002      	addeq	r0, #2
   8aaa2:	f43f ae4b 	beq.w	8a73c <_malloc_r+0x6c>
   8aaa6:	e6c9      	b.n	8a83c <_malloc_r+0x16c>
   8aaa8:	461c      	mov	r4, r3
   8aaaa:	4419      	add	r1, r3
   8aaac:	684a      	ldr	r2, [r1, #4]
   8aaae:	68db      	ldr	r3, [r3, #12]
   8aab0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8aab4:	f042 0201 	orr.w	r2, r2, #1
   8aab8:	604a      	str	r2, [r1, #4]
   8aaba:	4628      	mov	r0, r5
   8aabc:	60f3      	str	r3, [r6, #12]
   8aabe:	609e      	str	r6, [r3, #8]
   8aac0:	f000 f96e 	bl	8ada0 <__malloc_unlock>
   8aac4:	e6ca      	b.n	8a85c <_malloc_r+0x18c>
   8aac6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8aaca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8aace:	00c1      	lsls	r1, r0, #3
   8aad0:	e620      	b.n	8a714 <_malloc_r+0x44>
   8aad2:	099a      	lsrs	r2, r3, #6
   8aad4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8aad8:	00c9      	lsls	r1, r1, #3
   8aada:	3238      	adds	r2, #56	; 0x38
   8aadc:	e7a4      	b.n	8aa28 <_malloc_r+0x358>
   8aade:	42bc      	cmp	r4, r7
   8aae0:	d054      	beq.n	8ab8c <_malloc_r+0x4bc>
   8aae2:	68bc      	ldr	r4, [r7, #8]
   8aae4:	6862      	ldr	r2, [r4, #4]
   8aae6:	f022 0203 	bic.w	r2, r2, #3
   8aaea:	e75e      	b.n	8a9aa <_malloc_r+0x2da>
   8aaec:	f859 3908 	ldr.w	r3, [r9], #-8
   8aaf0:	4599      	cmp	r9, r3
   8aaf2:	f040 8086 	bne.w	8ac02 <_malloc_r+0x532>
   8aaf6:	f010 0f03 	tst.w	r0, #3
   8aafa:	f100 30ff 	add.w	r0, r0, #4294967295
   8aafe:	d1f5      	bne.n	8aaec <_malloc_r+0x41c>
   8ab00:	687b      	ldr	r3, [r7, #4]
   8ab02:	ea23 0304 	bic.w	r3, r3, r4
   8ab06:	607b      	str	r3, [r7, #4]
   8ab08:	0064      	lsls	r4, r4, #1
   8ab0a:	429c      	cmp	r4, r3
   8ab0c:	f63f aec8 	bhi.w	8a8a0 <_malloc_r+0x1d0>
   8ab10:	2c00      	cmp	r4, #0
   8ab12:	f43f aec5 	beq.w	8a8a0 <_malloc_r+0x1d0>
   8ab16:	421c      	tst	r4, r3
   8ab18:	4640      	mov	r0, r8
   8ab1a:	f47f ae4c 	bne.w	8a7b6 <_malloc_r+0xe6>
   8ab1e:	0064      	lsls	r4, r4, #1
   8ab20:	421c      	tst	r4, r3
   8ab22:	f100 0004 	add.w	r0, r0, #4
   8ab26:	d0fa      	beq.n	8ab1e <_malloc_r+0x44e>
   8ab28:	e645      	b.n	8a7b6 <_malloc_r+0xe6>
   8ab2a:	468c      	mov	ip, r1
   8ab2c:	e78c      	b.n	8aa48 <_malloc_r+0x378>
   8ab2e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8ab32:	d815      	bhi.n	8ab60 <_malloc_r+0x490>
   8ab34:	0bf3      	lsrs	r3, r6, #15
   8ab36:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8ab3a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8ab3e:	00c1      	lsls	r1, r0, #3
   8ab40:	e5e8      	b.n	8a714 <_malloc_r+0x44>
   8ab42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8ab46:	e6ee      	b.n	8a926 <_malloc_r+0x256>
   8ab48:	2101      	movs	r1, #1
   8ab4a:	687b      	ldr	r3, [r7, #4]
   8ab4c:	1092      	asrs	r2, r2, #2
   8ab4e:	fa01 f202 	lsl.w	r2, r1, r2
   8ab52:	431a      	orrs	r2, r3
   8ab54:	607a      	str	r2, [r7, #4]
   8ab56:	4663      	mov	r3, ip
   8ab58:	e779      	b.n	8aa4e <_malloc_r+0x37e>
   8ab5a:	2301      	movs	r3, #1
   8ab5c:	6053      	str	r3, [r2, #4]
   8ab5e:	e72a      	b.n	8a9b6 <_malloc_r+0x2e6>
   8ab60:	f240 5254 	movw	r2, #1364	; 0x554
   8ab64:	4293      	cmp	r3, r2
   8ab66:	d822      	bhi.n	8abae <_malloc_r+0x4de>
   8ab68:	0cb3      	lsrs	r3, r6, #18
   8ab6a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8ab6e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8ab72:	00c1      	lsls	r1, r0, #3
   8ab74:	e5ce      	b.n	8a714 <_malloc_r+0x44>
   8ab76:	f103 0b10 	add.w	fp, r3, #16
   8ab7a:	e6af      	b.n	8a8dc <_malloc_r+0x20c>
   8ab7c:	2a54      	cmp	r2, #84	; 0x54
   8ab7e:	d829      	bhi.n	8abd4 <_malloc_r+0x504>
   8ab80:	0b1a      	lsrs	r2, r3, #12
   8ab82:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8ab86:	00c9      	lsls	r1, r1, #3
   8ab88:	326e      	adds	r2, #110	; 0x6e
   8ab8a:	e74d      	b.n	8aa28 <_malloc_r+0x358>
   8ab8c:	4b20      	ldr	r3, [pc, #128]	; (8ac10 <_malloc_r+0x540>)
   8ab8e:	6819      	ldr	r1, [r3, #0]
   8ab90:	4459      	add	r1, fp
   8ab92:	6019      	str	r1, [r3, #0]
   8ab94:	e6b3      	b.n	8a8fe <_malloc_r+0x22e>
   8ab96:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8ab9a:	2800      	cmp	r0, #0
   8ab9c:	f47f aeaf 	bne.w	8a8fe <_malloc_r+0x22e>
   8aba0:	eb08 030b 	add.w	r3, r8, fp
   8aba4:	68ba      	ldr	r2, [r7, #8]
   8aba6:	f043 0301 	orr.w	r3, r3, #1
   8abaa:	6053      	str	r3, [r2, #4]
   8abac:	e6ef      	b.n	8a98e <_malloc_r+0x2be>
   8abae:	207f      	movs	r0, #127	; 0x7f
   8abb0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8abb4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8abb8:	e5ac      	b.n	8a714 <_malloc_r+0x44>
   8abba:	f104 0108 	add.w	r1, r4, #8
   8abbe:	4628      	mov	r0, r5
   8abc0:	9300      	str	r3, [sp, #0]
   8abc2:	f7ff fa59 	bl	8a078 <_free_r>
   8abc6:	9b00      	ldr	r3, [sp, #0]
   8abc8:	6819      	ldr	r1, [r3, #0]
   8abca:	e6e0      	b.n	8a98e <_malloc_r+0x2be>
   8abcc:	2001      	movs	r0, #1
   8abce:	f04f 0900 	mov.w	r9, #0
   8abd2:	e6bd      	b.n	8a950 <_malloc_r+0x280>
   8abd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8abd8:	d805      	bhi.n	8abe6 <_malloc_r+0x516>
   8abda:	0bda      	lsrs	r2, r3, #15
   8abdc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8abe0:	00c9      	lsls	r1, r1, #3
   8abe2:	3277      	adds	r2, #119	; 0x77
   8abe4:	e720      	b.n	8aa28 <_malloc_r+0x358>
   8abe6:	f240 5154 	movw	r1, #1364	; 0x554
   8abea:	428a      	cmp	r2, r1
   8abec:	d805      	bhi.n	8abfa <_malloc_r+0x52a>
   8abee:	0c9a      	lsrs	r2, r3, #18
   8abf0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8abf4:	00c9      	lsls	r1, r1, #3
   8abf6:	327c      	adds	r2, #124	; 0x7c
   8abf8:	e716      	b.n	8aa28 <_malloc_r+0x358>
   8abfa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8abfe:	227e      	movs	r2, #126	; 0x7e
   8ac00:	e712      	b.n	8aa28 <_malloc_r+0x358>
   8ac02:	687b      	ldr	r3, [r7, #4]
   8ac04:	e780      	b.n	8ab08 <_malloc_r+0x438>
   8ac06:	08f0      	lsrs	r0, r6, #3
   8ac08:	f106 0308 	add.w	r3, r6, #8
   8ac0c:	e60e      	b.n	8a82c <_malloc_r+0x15c>
   8ac0e:	bf00      	nop
   8ac10:	200024b0 	.word	0x200024b0

0008ac14 <__ascii_mbtowc>:
   8ac14:	b082      	sub	sp, #8
   8ac16:	b149      	cbz	r1, 8ac2c <__ascii_mbtowc+0x18>
   8ac18:	b15a      	cbz	r2, 8ac32 <__ascii_mbtowc+0x1e>
   8ac1a:	b16b      	cbz	r3, 8ac38 <__ascii_mbtowc+0x24>
   8ac1c:	7813      	ldrb	r3, [r2, #0]
   8ac1e:	600b      	str	r3, [r1, #0]
   8ac20:	7812      	ldrb	r2, [r2, #0]
   8ac22:	1c10      	adds	r0, r2, #0
   8ac24:	bf18      	it	ne
   8ac26:	2001      	movne	r0, #1
   8ac28:	b002      	add	sp, #8
   8ac2a:	4770      	bx	lr
   8ac2c:	a901      	add	r1, sp, #4
   8ac2e:	2a00      	cmp	r2, #0
   8ac30:	d1f3      	bne.n	8ac1a <__ascii_mbtowc+0x6>
   8ac32:	4610      	mov	r0, r2
   8ac34:	b002      	add	sp, #8
   8ac36:	4770      	bx	lr
   8ac38:	f06f 0001 	mvn.w	r0, #1
   8ac3c:	e7f4      	b.n	8ac28 <__ascii_mbtowc+0x14>
   8ac3e:	bf00      	nop

0008ac40 <memchr>:
   8ac40:	0783      	lsls	r3, r0, #30
   8ac42:	b470      	push	{r4, r5, r6}
   8ac44:	b2cd      	uxtb	r5, r1
   8ac46:	d03d      	beq.n	8acc4 <memchr+0x84>
   8ac48:	1e54      	subs	r4, r2, #1
   8ac4a:	b30a      	cbz	r2, 8ac90 <memchr+0x50>
   8ac4c:	7803      	ldrb	r3, [r0, #0]
   8ac4e:	42ab      	cmp	r3, r5
   8ac50:	d01f      	beq.n	8ac92 <memchr+0x52>
   8ac52:	1c43      	adds	r3, r0, #1
   8ac54:	e005      	b.n	8ac62 <memchr+0x22>
   8ac56:	f114 34ff 	adds.w	r4, r4, #4294967295
   8ac5a:	d319      	bcc.n	8ac90 <memchr+0x50>
   8ac5c:	7802      	ldrb	r2, [r0, #0]
   8ac5e:	42aa      	cmp	r2, r5
   8ac60:	d017      	beq.n	8ac92 <memchr+0x52>
   8ac62:	f013 0f03 	tst.w	r3, #3
   8ac66:	4618      	mov	r0, r3
   8ac68:	f103 0301 	add.w	r3, r3, #1
   8ac6c:	d1f3      	bne.n	8ac56 <memchr+0x16>
   8ac6e:	2c03      	cmp	r4, #3
   8ac70:	d811      	bhi.n	8ac96 <memchr+0x56>
   8ac72:	b34c      	cbz	r4, 8acc8 <memchr+0x88>
   8ac74:	7803      	ldrb	r3, [r0, #0]
   8ac76:	42ab      	cmp	r3, r5
   8ac78:	d00b      	beq.n	8ac92 <memchr+0x52>
   8ac7a:	4404      	add	r4, r0
   8ac7c:	1c43      	adds	r3, r0, #1
   8ac7e:	e002      	b.n	8ac86 <memchr+0x46>
   8ac80:	7802      	ldrb	r2, [r0, #0]
   8ac82:	42aa      	cmp	r2, r5
   8ac84:	d005      	beq.n	8ac92 <memchr+0x52>
   8ac86:	429c      	cmp	r4, r3
   8ac88:	4618      	mov	r0, r3
   8ac8a:	f103 0301 	add.w	r3, r3, #1
   8ac8e:	d1f7      	bne.n	8ac80 <memchr+0x40>
   8ac90:	2000      	movs	r0, #0
   8ac92:	bc70      	pop	{r4, r5, r6}
   8ac94:	4770      	bx	lr
   8ac96:	0209      	lsls	r1, r1, #8
   8ac98:	b289      	uxth	r1, r1
   8ac9a:	4329      	orrs	r1, r5
   8ac9c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8aca0:	6803      	ldr	r3, [r0, #0]
   8aca2:	4606      	mov	r6, r0
   8aca4:	404b      	eors	r3, r1
   8aca6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8acaa:	ea22 0303 	bic.w	r3, r2, r3
   8acae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8acb2:	f100 0004 	add.w	r0, r0, #4
   8acb6:	d103      	bne.n	8acc0 <memchr+0x80>
   8acb8:	3c04      	subs	r4, #4
   8acba:	2c03      	cmp	r4, #3
   8acbc:	d8f0      	bhi.n	8aca0 <memchr+0x60>
   8acbe:	e7d8      	b.n	8ac72 <memchr+0x32>
   8acc0:	4630      	mov	r0, r6
   8acc2:	e7d7      	b.n	8ac74 <memchr+0x34>
   8acc4:	4614      	mov	r4, r2
   8acc6:	e7d2      	b.n	8ac6e <memchr+0x2e>
   8acc8:	4620      	mov	r0, r4
   8acca:	e7e2      	b.n	8ac92 <memchr+0x52>

0008accc <memmove>:
   8accc:	4288      	cmp	r0, r1
   8acce:	b5f0      	push	{r4, r5, r6, r7, lr}
   8acd0:	d90d      	bls.n	8acee <memmove+0x22>
   8acd2:	188b      	adds	r3, r1, r2
   8acd4:	4298      	cmp	r0, r3
   8acd6:	d20a      	bcs.n	8acee <memmove+0x22>
   8acd8:	1884      	adds	r4, r0, r2
   8acda:	2a00      	cmp	r2, #0
   8acdc:	d051      	beq.n	8ad82 <memmove+0xb6>
   8acde:	4622      	mov	r2, r4
   8ace0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8ace4:	4299      	cmp	r1, r3
   8ace6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8acea:	d1f9      	bne.n	8ace0 <memmove+0x14>
   8acec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8acee:	2a0f      	cmp	r2, #15
   8acf0:	d948      	bls.n	8ad84 <memmove+0xb8>
   8acf2:	ea41 0300 	orr.w	r3, r1, r0
   8acf6:	079b      	lsls	r3, r3, #30
   8acf8:	d146      	bne.n	8ad88 <memmove+0xbc>
   8acfa:	4615      	mov	r5, r2
   8acfc:	f100 0410 	add.w	r4, r0, #16
   8ad00:	f101 0310 	add.w	r3, r1, #16
   8ad04:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8ad08:	3d10      	subs	r5, #16
   8ad0a:	f844 6c10 	str.w	r6, [r4, #-16]
   8ad0e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8ad12:	2d0f      	cmp	r5, #15
   8ad14:	f844 6c0c 	str.w	r6, [r4, #-12]
   8ad18:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8ad1c:	f104 0410 	add.w	r4, r4, #16
   8ad20:	f844 6c18 	str.w	r6, [r4, #-24]
   8ad24:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ad28:	f103 0310 	add.w	r3, r3, #16
   8ad2c:	f844 6c14 	str.w	r6, [r4, #-20]
   8ad30:	d8e8      	bhi.n	8ad04 <memmove+0x38>
   8ad32:	f1a2 0310 	sub.w	r3, r2, #16
   8ad36:	f023 030f 	bic.w	r3, r3, #15
   8ad3a:	f002 0e0f 	and.w	lr, r2, #15
   8ad3e:	3310      	adds	r3, #16
   8ad40:	f1be 0f03 	cmp.w	lr, #3
   8ad44:	4419      	add	r1, r3
   8ad46:	4403      	add	r3, r0
   8ad48:	d921      	bls.n	8ad8e <memmove+0xc2>
   8ad4a:	460e      	mov	r6, r1
   8ad4c:	4674      	mov	r4, lr
   8ad4e:	1f1d      	subs	r5, r3, #4
   8ad50:	f856 7b04 	ldr.w	r7, [r6], #4
   8ad54:	3c04      	subs	r4, #4
   8ad56:	2c03      	cmp	r4, #3
   8ad58:	f845 7f04 	str.w	r7, [r5, #4]!
   8ad5c:	d8f8      	bhi.n	8ad50 <memmove+0x84>
   8ad5e:	f1ae 0404 	sub.w	r4, lr, #4
   8ad62:	f024 0403 	bic.w	r4, r4, #3
   8ad66:	3404      	adds	r4, #4
   8ad68:	4421      	add	r1, r4
   8ad6a:	4423      	add	r3, r4
   8ad6c:	f002 0203 	and.w	r2, r2, #3
   8ad70:	b162      	cbz	r2, 8ad8c <memmove+0xc0>
   8ad72:	3b01      	subs	r3, #1
   8ad74:	440a      	add	r2, r1
   8ad76:	f811 4b01 	ldrb.w	r4, [r1], #1
   8ad7a:	428a      	cmp	r2, r1
   8ad7c:	f803 4f01 	strb.w	r4, [r3, #1]!
   8ad80:	d1f9      	bne.n	8ad76 <memmove+0xaa>
   8ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ad84:	4603      	mov	r3, r0
   8ad86:	e7f3      	b.n	8ad70 <memmove+0xa4>
   8ad88:	4603      	mov	r3, r0
   8ad8a:	e7f2      	b.n	8ad72 <memmove+0xa6>
   8ad8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ad8e:	4672      	mov	r2, lr
   8ad90:	e7ee      	b.n	8ad70 <memmove+0xa4>
   8ad92:	bf00      	nop

0008ad94 <__malloc_lock>:
   8ad94:	4801      	ldr	r0, [pc, #4]	; (8ad9c <__malloc_lock+0x8>)
   8ad96:	f7ff bc17 	b.w	8a5c8 <__retarget_lock_acquire_recursive>
   8ad9a:	bf00      	nop
   8ad9c:	200029d0 	.word	0x200029d0

0008ada0 <__malloc_unlock>:
   8ada0:	4801      	ldr	r0, [pc, #4]	; (8ada8 <__malloc_unlock+0x8>)
   8ada2:	f7ff bc13 	b.w	8a5cc <__retarget_lock_release_recursive>
   8ada6:	bf00      	nop
   8ada8:	200029d0 	.word	0x200029d0

0008adac <_Balloc>:
   8adac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8adae:	b570      	push	{r4, r5, r6, lr}
   8adb0:	4605      	mov	r5, r0
   8adb2:	460c      	mov	r4, r1
   8adb4:	b14b      	cbz	r3, 8adca <_Balloc+0x1e>
   8adb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8adba:	b180      	cbz	r0, 8adde <_Balloc+0x32>
   8adbc:	6802      	ldr	r2, [r0, #0]
   8adbe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8adc2:	2300      	movs	r3, #0
   8adc4:	6103      	str	r3, [r0, #16]
   8adc6:	60c3      	str	r3, [r0, #12]
   8adc8:	bd70      	pop	{r4, r5, r6, pc}
   8adca:	2221      	movs	r2, #33	; 0x21
   8adcc:	2104      	movs	r1, #4
   8adce:	f000 fe79 	bl	8bac4 <_calloc_r>
   8add2:	64e8      	str	r0, [r5, #76]	; 0x4c
   8add4:	4603      	mov	r3, r0
   8add6:	2800      	cmp	r0, #0
   8add8:	d1ed      	bne.n	8adb6 <_Balloc+0xa>
   8adda:	2000      	movs	r0, #0
   8addc:	bd70      	pop	{r4, r5, r6, pc}
   8adde:	2101      	movs	r1, #1
   8ade0:	fa01 f604 	lsl.w	r6, r1, r4
   8ade4:	1d72      	adds	r2, r6, #5
   8ade6:	4628      	mov	r0, r5
   8ade8:	0092      	lsls	r2, r2, #2
   8adea:	f000 fe6b 	bl	8bac4 <_calloc_r>
   8adee:	2800      	cmp	r0, #0
   8adf0:	d0f3      	beq.n	8adda <_Balloc+0x2e>
   8adf2:	6044      	str	r4, [r0, #4]
   8adf4:	6086      	str	r6, [r0, #8]
   8adf6:	e7e4      	b.n	8adc2 <_Balloc+0x16>

0008adf8 <_Bfree>:
   8adf8:	b131      	cbz	r1, 8ae08 <_Bfree+0x10>
   8adfa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8adfc:	684a      	ldr	r2, [r1, #4]
   8adfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8ae02:	6008      	str	r0, [r1, #0]
   8ae04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8ae08:	4770      	bx	lr
   8ae0a:	bf00      	nop

0008ae0c <__multadd>:
   8ae0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8ae0e:	460c      	mov	r4, r1
   8ae10:	4605      	mov	r5, r0
   8ae12:	f04f 0e00 	mov.w	lr, #0
   8ae16:	690e      	ldr	r6, [r1, #16]
   8ae18:	b083      	sub	sp, #12
   8ae1a:	f101 0714 	add.w	r7, r1, #20
   8ae1e:	6838      	ldr	r0, [r7, #0]
   8ae20:	f10e 0e01 	add.w	lr, lr, #1
   8ae24:	b281      	uxth	r1, r0
   8ae26:	fb02 3301 	mla	r3, r2, r1, r3
   8ae2a:	0c01      	lsrs	r1, r0, #16
   8ae2c:	0c18      	lsrs	r0, r3, #16
   8ae2e:	fb02 0101 	mla	r1, r2, r1, r0
   8ae32:	b29b      	uxth	r3, r3
   8ae34:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8ae38:	4576      	cmp	r6, lr
   8ae3a:	f847 3b04 	str.w	r3, [r7], #4
   8ae3e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8ae42:	dcec      	bgt.n	8ae1e <__multadd+0x12>
   8ae44:	b13b      	cbz	r3, 8ae56 <__multadd+0x4a>
   8ae46:	68a2      	ldr	r2, [r4, #8]
   8ae48:	4296      	cmp	r6, r2
   8ae4a:	da07      	bge.n	8ae5c <__multadd+0x50>
   8ae4c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8ae50:	3601      	adds	r6, #1
   8ae52:	6153      	str	r3, [r2, #20]
   8ae54:	6126      	str	r6, [r4, #16]
   8ae56:	4620      	mov	r0, r4
   8ae58:	b003      	add	sp, #12
   8ae5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ae5c:	6861      	ldr	r1, [r4, #4]
   8ae5e:	4628      	mov	r0, r5
   8ae60:	3101      	adds	r1, #1
   8ae62:	9301      	str	r3, [sp, #4]
   8ae64:	f7ff ffa2 	bl	8adac <_Balloc>
   8ae68:	4607      	mov	r7, r0
   8ae6a:	6922      	ldr	r2, [r4, #16]
   8ae6c:	f104 010c 	add.w	r1, r4, #12
   8ae70:	3202      	adds	r2, #2
   8ae72:	0092      	lsls	r2, r2, #2
   8ae74:	300c      	adds	r0, #12
   8ae76:	f7fb fb59 	bl	8652c <memcpy>
   8ae7a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8ae7c:	6861      	ldr	r1, [r4, #4]
   8ae7e:	9b01      	ldr	r3, [sp, #4]
   8ae80:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8ae84:	6020      	str	r0, [r4, #0]
   8ae86:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8ae8a:	463c      	mov	r4, r7
   8ae8c:	e7de      	b.n	8ae4c <__multadd+0x40>
   8ae8e:	bf00      	nop

0008ae90 <__hi0bits>:
   8ae90:	0c02      	lsrs	r2, r0, #16
   8ae92:	0412      	lsls	r2, r2, #16
   8ae94:	4603      	mov	r3, r0
   8ae96:	b9b2      	cbnz	r2, 8aec6 <__hi0bits+0x36>
   8ae98:	0403      	lsls	r3, r0, #16
   8ae9a:	2010      	movs	r0, #16
   8ae9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8aea0:	bf04      	itt	eq
   8aea2:	021b      	lsleq	r3, r3, #8
   8aea4:	3008      	addeq	r0, #8
   8aea6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8aeaa:	bf04      	itt	eq
   8aeac:	011b      	lsleq	r3, r3, #4
   8aeae:	3004      	addeq	r0, #4
   8aeb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8aeb4:	bf04      	itt	eq
   8aeb6:	009b      	lsleq	r3, r3, #2
   8aeb8:	3002      	addeq	r0, #2
   8aeba:	2b00      	cmp	r3, #0
   8aebc:	db02      	blt.n	8aec4 <__hi0bits+0x34>
   8aebe:	005b      	lsls	r3, r3, #1
   8aec0:	d403      	bmi.n	8aeca <__hi0bits+0x3a>
   8aec2:	2020      	movs	r0, #32
   8aec4:	4770      	bx	lr
   8aec6:	2000      	movs	r0, #0
   8aec8:	e7e8      	b.n	8ae9c <__hi0bits+0xc>
   8aeca:	3001      	adds	r0, #1
   8aecc:	4770      	bx	lr
   8aece:	bf00      	nop

0008aed0 <__lo0bits>:
   8aed0:	6803      	ldr	r3, [r0, #0]
   8aed2:	4601      	mov	r1, r0
   8aed4:	f013 0207 	ands.w	r2, r3, #7
   8aed8:	d007      	beq.n	8aeea <__lo0bits+0x1a>
   8aeda:	07da      	lsls	r2, r3, #31
   8aedc:	d421      	bmi.n	8af22 <__lo0bits+0x52>
   8aede:	0798      	lsls	r0, r3, #30
   8aee0:	d421      	bmi.n	8af26 <__lo0bits+0x56>
   8aee2:	089b      	lsrs	r3, r3, #2
   8aee4:	600b      	str	r3, [r1, #0]
   8aee6:	2002      	movs	r0, #2
   8aee8:	4770      	bx	lr
   8aeea:	b298      	uxth	r0, r3
   8aeec:	b198      	cbz	r0, 8af16 <__lo0bits+0x46>
   8aeee:	4610      	mov	r0, r2
   8aef0:	f013 0fff 	tst.w	r3, #255	; 0xff
   8aef4:	bf04      	itt	eq
   8aef6:	0a1b      	lsreq	r3, r3, #8
   8aef8:	3008      	addeq	r0, #8
   8aefa:	071a      	lsls	r2, r3, #28
   8aefc:	bf04      	itt	eq
   8aefe:	091b      	lsreq	r3, r3, #4
   8af00:	3004      	addeq	r0, #4
   8af02:	079a      	lsls	r2, r3, #30
   8af04:	bf04      	itt	eq
   8af06:	089b      	lsreq	r3, r3, #2
   8af08:	3002      	addeq	r0, #2
   8af0a:	07da      	lsls	r2, r3, #31
   8af0c:	d407      	bmi.n	8af1e <__lo0bits+0x4e>
   8af0e:	085b      	lsrs	r3, r3, #1
   8af10:	d104      	bne.n	8af1c <__lo0bits+0x4c>
   8af12:	2020      	movs	r0, #32
   8af14:	4770      	bx	lr
   8af16:	0c1b      	lsrs	r3, r3, #16
   8af18:	2010      	movs	r0, #16
   8af1a:	e7e9      	b.n	8aef0 <__lo0bits+0x20>
   8af1c:	3001      	adds	r0, #1
   8af1e:	600b      	str	r3, [r1, #0]
   8af20:	4770      	bx	lr
   8af22:	2000      	movs	r0, #0
   8af24:	4770      	bx	lr
   8af26:	085b      	lsrs	r3, r3, #1
   8af28:	600b      	str	r3, [r1, #0]
   8af2a:	2001      	movs	r0, #1
   8af2c:	4770      	bx	lr
   8af2e:	bf00      	nop

0008af30 <__i2b>:
   8af30:	b510      	push	{r4, lr}
   8af32:	460c      	mov	r4, r1
   8af34:	2101      	movs	r1, #1
   8af36:	f7ff ff39 	bl	8adac <_Balloc>
   8af3a:	2201      	movs	r2, #1
   8af3c:	6144      	str	r4, [r0, #20]
   8af3e:	6102      	str	r2, [r0, #16]
   8af40:	bd10      	pop	{r4, pc}
   8af42:	bf00      	nop

0008af44 <__multiply>:
   8af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8af48:	690c      	ldr	r4, [r1, #16]
   8af4a:	6915      	ldr	r5, [r2, #16]
   8af4c:	b083      	sub	sp, #12
   8af4e:	42ac      	cmp	r4, r5
   8af50:	468b      	mov	fp, r1
   8af52:	4616      	mov	r6, r2
   8af54:	da04      	bge.n	8af60 <__multiply+0x1c>
   8af56:	4622      	mov	r2, r4
   8af58:	46b3      	mov	fp, r6
   8af5a:	462c      	mov	r4, r5
   8af5c:	460e      	mov	r6, r1
   8af5e:	4615      	mov	r5, r2
   8af60:	f8db 3008 	ldr.w	r3, [fp, #8]
   8af64:	eb04 0805 	add.w	r8, r4, r5
   8af68:	f8db 1004 	ldr.w	r1, [fp, #4]
   8af6c:	4598      	cmp	r8, r3
   8af6e:	bfc8      	it	gt
   8af70:	3101      	addgt	r1, #1
   8af72:	f7ff ff1b 	bl	8adac <_Balloc>
   8af76:	f100 0914 	add.w	r9, r0, #20
   8af7a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8af7e:	45d1      	cmp	r9, sl
   8af80:	9000      	str	r0, [sp, #0]
   8af82:	d205      	bcs.n	8af90 <__multiply+0x4c>
   8af84:	464b      	mov	r3, r9
   8af86:	2100      	movs	r1, #0
   8af88:	f843 1b04 	str.w	r1, [r3], #4
   8af8c:	459a      	cmp	sl, r3
   8af8e:	d8fb      	bhi.n	8af88 <__multiply+0x44>
   8af90:	f106 0c14 	add.w	ip, r6, #20
   8af94:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8af98:	f10b 0b14 	add.w	fp, fp, #20
   8af9c:	459c      	cmp	ip, r3
   8af9e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8afa2:	d24b      	bcs.n	8b03c <__multiply+0xf8>
   8afa4:	f8cd a004 	str.w	sl, [sp, #4]
   8afa8:	469a      	mov	sl, r3
   8afaa:	f8dc 5000 	ldr.w	r5, [ip]
   8afae:	b2af      	uxth	r7, r5
   8afb0:	b1e7      	cbz	r7, 8afec <__multiply+0xa8>
   8afb2:	464d      	mov	r5, r9
   8afb4:	465e      	mov	r6, fp
   8afb6:	2100      	movs	r1, #0
   8afb8:	f856 2b04 	ldr.w	r2, [r6], #4
   8afbc:	6828      	ldr	r0, [r5, #0]
   8afbe:	b293      	uxth	r3, r2
   8afc0:	b284      	uxth	r4, r0
   8afc2:	0c12      	lsrs	r2, r2, #16
   8afc4:	fb07 4303 	mla	r3, r7, r3, r4
   8afc8:	0c00      	lsrs	r0, r0, #16
   8afca:	fb07 0202 	mla	r2, r7, r2, r0
   8afce:	440b      	add	r3, r1
   8afd0:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8afd4:	b29b      	uxth	r3, r3
   8afd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8afda:	45b6      	cmp	lr, r6
   8afdc:	f845 3b04 	str.w	r3, [r5], #4
   8afe0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8afe4:	d8e8      	bhi.n	8afb8 <__multiply+0x74>
   8afe6:	6029      	str	r1, [r5, #0]
   8afe8:	f8dc 5000 	ldr.w	r5, [ip]
   8afec:	0c2d      	lsrs	r5, r5, #16
   8afee:	d01d      	beq.n	8b02c <__multiply+0xe8>
   8aff0:	f8d9 3000 	ldr.w	r3, [r9]
   8aff4:	4648      	mov	r0, r9
   8aff6:	461c      	mov	r4, r3
   8aff8:	4659      	mov	r1, fp
   8affa:	2200      	movs	r2, #0
   8affc:	880e      	ldrh	r6, [r1, #0]
   8affe:	0c24      	lsrs	r4, r4, #16
   8b000:	fb05 4406 	mla	r4, r5, r6, r4
   8b004:	b29b      	uxth	r3, r3
   8b006:	4422      	add	r2, r4
   8b008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b00c:	f840 3b04 	str.w	r3, [r0], #4
   8b010:	f851 3b04 	ldr.w	r3, [r1], #4
   8b014:	6804      	ldr	r4, [r0, #0]
   8b016:	0c1b      	lsrs	r3, r3, #16
   8b018:	b2a6      	uxth	r6, r4
   8b01a:	fb05 6303 	mla	r3, r5, r3, r6
   8b01e:	458e      	cmp	lr, r1
   8b020:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8b024:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8b028:	d8e8      	bhi.n	8affc <__multiply+0xb8>
   8b02a:	6003      	str	r3, [r0, #0]
   8b02c:	f10c 0c04 	add.w	ip, ip, #4
   8b030:	45e2      	cmp	sl, ip
   8b032:	f109 0904 	add.w	r9, r9, #4
   8b036:	d8b8      	bhi.n	8afaa <__multiply+0x66>
   8b038:	f8dd a004 	ldr.w	sl, [sp, #4]
   8b03c:	f1b8 0f00 	cmp.w	r8, #0
   8b040:	dd0b      	ble.n	8b05a <__multiply+0x116>
   8b042:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8b046:	f1aa 0a04 	sub.w	sl, sl, #4
   8b04a:	b11b      	cbz	r3, 8b054 <__multiply+0x110>
   8b04c:	e005      	b.n	8b05a <__multiply+0x116>
   8b04e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b052:	b913      	cbnz	r3, 8b05a <__multiply+0x116>
   8b054:	f1b8 0801 	subs.w	r8, r8, #1
   8b058:	d1f9      	bne.n	8b04e <__multiply+0x10a>
   8b05a:	9800      	ldr	r0, [sp, #0]
   8b05c:	f8c0 8010 	str.w	r8, [r0, #16]
   8b060:	b003      	add	sp, #12
   8b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b066:	bf00      	nop

0008b068 <__pow5mult>:
   8b068:	f012 0303 	ands.w	r3, r2, #3
   8b06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b070:	4614      	mov	r4, r2
   8b072:	4607      	mov	r7, r0
   8b074:	d12e      	bne.n	8b0d4 <__pow5mult+0x6c>
   8b076:	460d      	mov	r5, r1
   8b078:	10a4      	asrs	r4, r4, #2
   8b07a:	d01c      	beq.n	8b0b6 <__pow5mult+0x4e>
   8b07c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8b07e:	b396      	cbz	r6, 8b0e6 <__pow5mult+0x7e>
   8b080:	07e3      	lsls	r3, r4, #31
   8b082:	f04f 0800 	mov.w	r8, #0
   8b086:	d406      	bmi.n	8b096 <__pow5mult+0x2e>
   8b088:	1064      	asrs	r4, r4, #1
   8b08a:	d014      	beq.n	8b0b6 <__pow5mult+0x4e>
   8b08c:	6830      	ldr	r0, [r6, #0]
   8b08e:	b1a8      	cbz	r0, 8b0bc <__pow5mult+0x54>
   8b090:	4606      	mov	r6, r0
   8b092:	07e3      	lsls	r3, r4, #31
   8b094:	d5f8      	bpl.n	8b088 <__pow5mult+0x20>
   8b096:	4632      	mov	r2, r6
   8b098:	4629      	mov	r1, r5
   8b09a:	4638      	mov	r0, r7
   8b09c:	f7ff ff52 	bl	8af44 <__multiply>
   8b0a0:	b1b5      	cbz	r5, 8b0d0 <__pow5mult+0x68>
   8b0a2:	686a      	ldr	r2, [r5, #4]
   8b0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b0a6:	1064      	asrs	r4, r4, #1
   8b0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b0ac:	6029      	str	r1, [r5, #0]
   8b0ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b0b2:	4605      	mov	r5, r0
   8b0b4:	d1ea      	bne.n	8b08c <__pow5mult+0x24>
   8b0b6:	4628      	mov	r0, r5
   8b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b0bc:	4632      	mov	r2, r6
   8b0be:	4631      	mov	r1, r6
   8b0c0:	4638      	mov	r0, r7
   8b0c2:	f7ff ff3f 	bl	8af44 <__multiply>
   8b0c6:	6030      	str	r0, [r6, #0]
   8b0c8:	f8c0 8000 	str.w	r8, [r0]
   8b0cc:	4606      	mov	r6, r0
   8b0ce:	e7e0      	b.n	8b092 <__pow5mult+0x2a>
   8b0d0:	4605      	mov	r5, r0
   8b0d2:	e7d9      	b.n	8b088 <__pow5mult+0x20>
   8b0d4:	4a0b      	ldr	r2, [pc, #44]	; (8b104 <__pow5mult+0x9c>)
   8b0d6:	3b01      	subs	r3, #1
   8b0d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b0dc:	2300      	movs	r3, #0
   8b0de:	f7ff fe95 	bl	8ae0c <__multadd>
   8b0e2:	4605      	mov	r5, r0
   8b0e4:	e7c8      	b.n	8b078 <__pow5mult+0x10>
   8b0e6:	2101      	movs	r1, #1
   8b0e8:	4638      	mov	r0, r7
   8b0ea:	f7ff fe5f 	bl	8adac <_Balloc>
   8b0ee:	f240 2171 	movw	r1, #625	; 0x271
   8b0f2:	2201      	movs	r2, #1
   8b0f4:	2300      	movs	r3, #0
   8b0f6:	6141      	str	r1, [r0, #20]
   8b0f8:	6102      	str	r2, [r0, #16]
   8b0fa:	4606      	mov	r6, r0
   8b0fc:	64b8      	str	r0, [r7, #72]	; 0x48
   8b0fe:	6003      	str	r3, [r0, #0]
   8b100:	e7be      	b.n	8b080 <__pow5mult+0x18>
   8b102:	bf00      	nop
   8b104:	0008c870 	.word	0x0008c870

0008b108 <__lshift>:
   8b108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b10c:	690b      	ldr	r3, [r1, #16]
   8b10e:	1154      	asrs	r4, r2, #5
   8b110:	eb04 0803 	add.w	r8, r4, r3
   8b114:	688b      	ldr	r3, [r1, #8]
   8b116:	f108 0501 	add.w	r5, r8, #1
   8b11a:	429d      	cmp	r5, r3
   8b11c:	460e      	mov	r6, r1
   8b11e:	4691      	mov	r9, r2
   8b120:	4607      	mov	r7, r0
   8b122:	6849      	ldr	r1, [r1, #4]
   8b124:	dd04      	ble.n	8b130 <__lshift+0x28>
   8b126:	005b      	lsls	r3, r3, #1
   8b128:	429d      	cmp	r5, r3
   8b12a:	f101 0101 	add.w	r1, r1, #1
   8b12e:	dcfa      	bgt.n	8b126 <__lshift+0x1e>
   8b130:	4638      	mov	r0, r7
   8b132:	f7ff fe3b 	bl	8adac <_Balloc>
   8b136:	2c00      	cmp	r4, #0
   8b138:	f100 0314 	add.w	r3, r0, #20
   8b13c:	dd06      	ble.n	8b14c <__lshift+0x44>
   8b13e:	2100      	movs	r1, #0
   8b140:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8b144:	f843 1b04 	str.w	r1, [r3], #4
   8b148:	429a      	cmp	r2, r3
   8b14a:	d1fb      	bne.n	8b144 <__lshift+0x3c>
   8b14c:	6934      	ldr	r4, [r6, #16]
   8b14e:	f106 0114 	add.w	r1, r6, #20
   8b152:	f019 091f 	ands.w	r9, r9, #31
   8b156:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8b15a:	d01d      	beq.n	8b198 <__lshift+0x90>
   8b15c:	2200      	movs	r2, #0
   8b15e:	f1c9 0c20 	rsb	ip, r9, #32
   8b162:	680c      	ldr	r4, [r1, #0]
   8b164:	fa04 f409 	lsl.w	r4, r4, r9
   8b168:	4314      	orrs	r4, r2
   8b16a:	f843 4b04 	str.w	r4, [r3], #4
   8b16e:	f851 2b04 	ldr.w	r2, [r1], #4
   8b172:	458e      	cmp	lr, r1
   8b174:	fa22 f20c 	lsr.w	r2, r2, ip
   8b178:	d8f3      	bhi.n	8b162 <__lshift+0x5a>
   8b17a:	601a      	str	r2, [r3, #0]
   8b17c:	b10a      	cbz	r2, 8b182 <__lshift+0x7a>
   8b17e:	f108 0502 	add.w	r5, r8, #2
   8b182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b184:	6872      	ldr	r2, [r6, #4]
   8b186:	3d01      	subs	r5, #1
   8b188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b18c:	6105      	str	r5, [r0, #16]
   8b18e:	6031      	str	r1, [r6, #0]
   8b190:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8b194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b198:	3b04      	subs	r3, #4
   8b19a:	f851 2b04 	ldr.w	r2, [r1], #4
   8b19e:	458e      	cmp	lr, r1
   8b1a0:	f843 2f04 	str.w	r2, [r3, #4]!
   8b1a4:	d8f9      	bhi.n	8b19a <__lshift+0x92>
   8b1a6:	e7ec      	b.n	8b182 <__lshift+0x7a>

0008b1a8 <__mcmp>:
   8b1a8:	b430      	push	{r4, r5}
   8b1aa:	690b      	ldr	r3, [r1, #16]
   8b1ac:	4605      	mov	r5, r0
   8b1ae:	6900      	ldr	r0, [r0, #16]
   8b1b0:	1ac0      	subs	r0, r0, r3
   8b1b2:	d10f      	bne.n	8b1d4 <__mcmp+0x2c>
   8b1b4:	009b      	lsls	r3, r3, #2
   8b1b6:	3514      	adds	r5, #20
   8b1b8:	3114      	adds	r1, #20
   8b1ba:	4419      	add	r1, r3
   8b1bc:	442b      	add	r3, r5
   8b1be:	e001      	b.n	8b1c4 <__mcmp+0x1c>
   8b1c0:	429d      	cmp	r5, r3
   8b1c2:	d207      	bcs.n	8b1d4 <__mcmp+0x2c>
   8b1c4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b1c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b1cc:	4294      	cmp	r4, r2
   8b1ce:	d0f7      	beq.n	8b1c0 <__mcmp+0x18>
   8b1d0:	d302      	bcc.n	8b1d8 <__mcmp+0x30>
   8b1d2:	2001      	movs	r0, #1
   8b1d4:	bc30      	pop	{r4, r5}
   8b1d6:	4770      	bx	lr
   8b1d8:	f04f 30ff 	mov.w	r0, #4294967295
   8b1dc:	e7fa      	b.n	8b1d4 <__mcmp+0x2c>
   8b1de:	bf00      	nop

0008b1e0 <__mdiff>:
   8b1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b1e4:	690c      	ldr	r4, [r1, #16]
   8b1e6:	4689      	mov	r9, r1
   8b1e8:	6911      	ldr	r1, [r2, #16]
   8b1ea:	4692      	mov	sl, r2
   8b1ec:	1a64      	subs	r4, r4, r1
   8b1ee:	2c00      	cmp	r4, #0
   8b1f0:	d117      	bne.n	8b222 <__mdiff+0x42>
   8b1f2:	0089      	lsls	r1, r1, #2
   8b1f4:	f109 0714 	add.w	r7, r9, #20
   8b1f8:	f102 0614 	add.w	r6, r2, #20
   8b1fc:	187b      	adds	r3, r7, r1
   8b1fe:	4431      	add	r1, r6
   8b200:	e001      	b.n	8b206 <__mdiff+0x26>
   8b202:	429f      	cmp	r7, r3
   8b204:	d265      	bcs.n	8b2d2 <__mdiff+0xf2>
   8b206:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b20a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b20e:	4295      	cmp	r5, r2
   8b210:	d0f7      	beq.n	8b202 <__mdiff+0x22>
   8b212:	d267      	bcs.n	8b2e4 <__mdiff+0x104>
   8b214:	464b      	mov	r3, r9
   8b216:	46bb      	mov	fp, r7
   8b218:	46d1      	mov	r9, sl
   8b21a:	4637      	mov	r7, r6
   8b21c:	469a      	mov	sl, r3
   8b21e:	2401      	movs	r4, #1
   8b220:	e005      	b.n	8b22e <__mdiff+0x4e>
   8b222:	db61      	blt.n	8b2e8 <__mdiff+0x108>
   8b224:	2400      	movs	r4, #0
   8b226:	f109 0714 	add.w	r7, r9, #20
   8b22a:	f10a 0b14 	add.w	fp, sl, #20
   8b22e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8b232:	f7ff fdbb 	bl	8adac <_Balloc>
   8b236:	465d      	mov	r5, fp
   8b238:	f04f 0800 	mov.w	r8, #0
   8b23c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8b240:	f8da 3010 	ldr.w	r3, [sl, #16]
   8b244:	463e      	mov	r6, r7
   8b246:	60c4      	str	r4, [r0, #12]
   8b248:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8b24c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8b250:	f100 0414 	add.w	r4, r0, #20
   8b254:	f856 9b04 	ldr.w	r9, [r6], #4
   8b258:	f855 2b04 	ldr.w	r2, [r5], #4
   8b25c:	fa1f f389 	uxth.w	r3, r9
   8b260:	4443      	add	r3, r8
   8b262:	fa1f f882 	uxth.w	r8, r2
   8b266:	0c12      	lsrs	r2, r2, #16
   8b268:	eba3 0308 	sub.w	r3, r3, r8
   8b26c:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8b270:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8b274:	b29b      	uxth	r3, r3
   8b276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b27a:	45ac      	cmp	ip, r5
   8b27c:	f844 3b04 	str.w	r3, [r4], #4
   8b280:	ea4f 4822 	mov.w	r8, r2, asr #16
   8b284:	d8e6      	bhi.n	8b254 <__mdiff+0x74>
   8b286:	42b7      	cmp	r7, r6
   8b288:	d917      	bls.n	8b2ba <__mdiff+0xda>
   8b28a:	46a4      	mov	ip, r4
   8b28c:	4635      	mov	r5, r6
   8b28e:	f855 3b04 	ldr.w	r3, [r5], #4
   8b292:	b299      	uxth	r1, r3
   8b294:	4441      	add	r1, r8
   8b296:	140a      	asrs	r2, r1, #16
   8b298:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b29c:	b289      	uxth	r1, r1
   8b29e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8b2a2:	42af      	cmp	r7, r5
   8b2a4:	f84c 3b04 	str.w	r3, [ip], #4
   8b2a8:	ea4f 4822 	mov.w	r8, r2, asr #16
   8b2ac:	d8ef      	bhi.n	8b28e <__mdiff+0xae>
   8b2ae:	43f6      	mvns	r6, r6
   8b2b0:	4437      	add	r7, r6
   8b2b2:	f027 0703 	bic.w	r7, r7, #3
   8b2b6:	3704      	adds	r7, #4
   8b2b8:	443c      	add	r4, r7
   8b2ba:	3c04      	subs	r4, #4
   8b2bc:	b92b      	cbnz	r3, 8b2ca <__mdiff+0xea>
   8b2be:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8b2c2:	f10e 3eff 	add.w	lr, lr, #4294967295
   8b2c6:	2b00      	cmp	r3, #0
   8b2c8:	d0f9      	beq.n	8b2be <__mdiff+0xde>
   8b2ca:	f8c0 e010 	str.w	lr, [r0, #16]
   8b2ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b2d2:	2100      	movs	r1, #0
   8b2d4:	f7ff fd6a 	bl	8adac <_Balloc>
   8b2d8:	2201      	movs	r2, #1
   8b2da:	2300      	movs	r3, #0
   8b2dc:	6102      	str	r2, [r0, #16]
   8b2de:	6143      	str	r3, [r0, #20]
   8b2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b2e4:	46b3      	mov	fp, r6
   8b2e6:	e7a2      	b.n	8b22e <__mdiff+0x4e>
   8b2e8:	464b      	mov	r3, r9
   8b2ea:	f109 0b14 	add.w	fp, r9, #20
   8b2ee:	f102 0714 	add.w	r7, r2, #20
   8b2f2:	4691      	mov	r9, r2
   8b2f4:	2401      	movs	r4, #1
   8b2f6:	469a      	mov	sl, r3
   8b2f8:	e799      	b.n	8b22e <__mdiff+0x4e>
   8b2fa:	bf00      	nop

0008b2fc <__d2b>:
   8b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b2fe:	2101      	movs	r1, #1
   8b300:	b083      	sub	sp, #12
   8b302:	461c      	mov	r4, r3
   8b304:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8b308:	4616      	mov	r6, r2
   8b30a:	f7ff fd4f 	bl	8adac <_Balloc>
   8b30e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8b312:	4607      	mov	r7, r0
   8b314:	b10d      	cbz	r5, 8b31a <__d2b+0x1e>
   8b316:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8b31a:	9401      	str	r4, [sp, #4]
   8b31c:	b306      	cbz	r6, 8b360 <__d2b+0x64>
   8b31e:	a802      	add	r0, sp, #8
   8b320:	f840 6d08 	str.w	r6, [r0, #-8]!
   8b324:	f7ff fdd4 	bl	8aed0 <__lo0bits>
   8b328:	2800      	cmp	r0, #0
   8b32a:	d130      	bne.n	8b38e <__d2b+0x92>
   8b32c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8b330:	617a      	str	r2, [r7, #20]
   8b332:	2b00      	cmp	r3, #0
   8b334:	bf0c      	ite	eq
   8b336:	2101      	moveq	r1, #1
   8b338:	2102      	movne	r1, #2
   8b33a:	61bb      	str	r3, [r7, #24]
   8b33c:	6139      	str	r1, [r7, #16]
   8b33e:	b9d5      	cbnz	r5, 8b376 <__d2b+0x7a>
   8b340:	9a08      	ldr	r2, [sp, #32]
   8b342:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8b346:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b34a:	6010      	str	r0, [r2, #0]
   8b34c:	6918      	ldr	r0, [r3, #16]
   8b34e:	f7ff fd9f 	bl	8ae90 <__hi0bits>
   8b352:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8b354:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8b358:	6018      	str	r0, [r3, #0]
   8b35a:	4638      	mov	r0, r7
   8b35c:	b003      	add	sp, #12
   8b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b360:	a801      	add	r0, sp, #4
   8b362:	f7ff fdb5 	bl	8aed0 <__lo0bits>
   8b366:	2201      	movs	r2, #1
   8b368:	9b01      	ldr	r3, [sp, #4]
   8b36a:	4611      	mov	r1, r2
   8b36c:	3020      	adds	r0, #32
   8b36e:	613a      	str	r2, [r7, #16]
   8b370:	617b      	str	r3, [r7, #20]
   8b372:	2d00      	cmp	r5, #0
   8b374:	d0e4      	beq.n	8b340 <__d2b+0x44>
   8b376:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b37a:	9a08      	ldr	r2, [sp, #32]
   8b37c:	4403      	add	r3, r0
   8b37e:	6013      	str	r3, [r2, #0]
   8b380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8b382:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b386:	6018      	str	r0, [r3, #0]
   8b388:	4638      	mov	r0, r7
   8b38a:	b003      	add	sp, #12
   8b38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b38e:	9b01      	ldr	r3, [sp, #4]
   8b390:	f1c0 0220 	rsb	r2, r0, #32
   8b394:	9900      	ldr	r1, [sp, #0]
   8b396:	fa03 f202 	lsl.w	r2, r3, r2
   8b39a:	430a      	orrs	r2, r1
   8b39c:	40c3      	lsrs	r3, r0
   8b39e:	9301      	str	r3, [sp, #4]
   8b3a0:	617a      	str	r2, [r7, #20]
   8b3a2:	e7c6      	b.n	8b332 <__d2b+0x36>

0008b3a4 <_realloc_r>:
   8b3a4:	2900      	cmp	r1, #0
   8b3a6:	f000 8094 	beq.w	8b4d2 <_realloc_r+0x12e>
   8b3aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b3ae:	460c      	mov	r4, r1
   8b3b0:	4615      	mov	r5, r2
   8b3b2:	b083      	sub	sp, #12
   8b3b4:	4680      	mov	r8, r0
   8b3b6:	f105 060b 	add.w	r6, r5, #11
   8b3ba:	f7ff fceb 	bl	8ad94 <__malloc_lock>
   8b3be:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8b3c2:	2e16      	cmp	r6, #22
   8b3c4:	f02e 0703 	bic.w	r7, lr, #3
   8b3c8:	f1a4 0908 	sub.w	r9, r4, #8
   8b3cc:	d83c      	bhi.n	8b448 <_realloc_r+0xa4>
   8b3ce:	2210      	movs	r2, #16
   8b3d0:	4616      	mov	r6, r2
   8b3d2:	42b5      	cmp	r5, r6
   8b3d4:	d83d      	bhi.n	8b452 <_realloc_r+0xae>
   8b3d6:	4297      	cmp	r7, r2
   8b3d8:	da43      	bge.n	8b462 <_realloc_r+0xbe>
   8b3da:	4bc6      	ldr	r3, [pc, #792]	; (8b6f4 <_realloc_r+0x350>)
   8b3dc:	eb09 0007 	add.w	r0, r9, r7
   8b3e0:	6899      	ldr	r1, [r3, #8]
   8b3e2:	4288      	cmp	r0, r1
   8b3e4:	f000 80c3 	beq.w	8b56e <_realloc_r+0x1ca>
   8b3e8:	6843      	ldr	r3, [r0, #4]
   8b3ea:	f023 0101 	bic.w	r1, r3, #1
   8b3ee:	4401      	add	r1, r0
   8b3f0:	6849      	ldr	r1, [r1, #4]
   8b3f2:	07c9      	lsls	r1, r1, #31
   8b3f4:	d54d      	bpl.n	8b492 <_realloc_r+0xee>
   8b3f6:	f01e 0f01 	tst.w	lr, #1
   8b3fa:	f000 809b 	beq.w	8b534 <_realloc_r+0x190>
   8b3fe:	4629      	mov	r1, r5
   8b400:	4640      	mov	r0, r8
   8b402:	f7ff f965 	bl	8a6d0 <_malloc_r>
   8b406:	4605      	mov	r5, r0
   8b408:	2800      	cmp	r0, #0
   8b40a:	d03b      	beq.n	8b484 <_realloc_r+0xe0>
   8b40c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b410:	f1a0 0208 	sub.w	r2, r0, #8
   8b414:	f023 0301 	bic.w	r3, r3, #1
   8b418:	444b      	add	r3, r9
   8b41a:	429a      	cmp	r2, r3
   8b41c:	f000 812b 	beq.w	8b676 <_realloc_r+0x2d2>
   8b420:	1f3a      	subs	r2, r7, #4
   8b422:	2a24      	cmp	r2, #36	; 0x24
   8b424:	f200 8118 	bhi.w	8b658 <_realloc_r+0x2b4>
   8b428:	2a13      	cmp	r2, #19
   8b42a:	f200 80eb 	bhi.w	8b604 <_realloc_r+0x260>
   8b42e:	4603      	mov	r3, r0
   8b430:	4622      	mov	r2, r4
   8b432:	6811      	ldr	r1, [r2, #0]
   8b434:	6019      	str	r1, [r3, #0]
   8b436:	6851      	ldr	r1, [r2, #4]
   8b438:	6059      	str	r1, [r3, #4]
   8b43a:	6892      	ldr	r2, [r2, #8]
   8b43c:	609a      	str	r2, [r3, #8]
   8b43e:	4621      	mov	r1, r4
   8b440:	4640      	mov	r0, r8
   8b442:	f7fe fe19 	bl	8a078 <_free_r>
   8b446:	e01d      	b.n	8b484 <_realloc_r+0xe0>
   8b448:	f026 0607 	bic.w	r6, r6, #7
   8b44c:	2e00      	cmp	r6, #0
   8b44e:	4632      	mov	r2, r6
   8b450:	dabf      	bge.n	8b3d2 <_realloc_r+0x2e>
   8b452:	2500      	movs	r5, #0
   8b454:	230c      	movs	r3, #12
   8b456:	4628      	mov	r0, r5
   8b458:	f8c8 3000 	str.w	r3, [r8]
   8b45c:	b003      	add	sp, #12
   8b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b462:	4625      	mov	r5, r4
   8b464:	1bbb      	subs	r3, r7, r6
   8b466:	2b0f      	cmp	r3, #15
   8b468:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b46c:	d81d      	bhi.n	8b4aa <_realloc_r+0x106>
   8b46e:	f002 0201 	and.w	r2, r2, #1
   8b472:	433a      	orrs	r2, r7
   8b474:	eb09 0107 	add.w	r1, r9, r7
   8b478:	f8c9 2004 	str.w	r2, [r9, #4]
   8b47c:	684b      	ldr	r3, [r1, #4]
   8b47e:	f043 0301 	orr.w	r3, r3, #1
   8b482:	604b      	str	r3, [r1, #4]
   8b484:	4640      	mov	r0, r8
   8b486:	f7ff fc8b 	bl	8ada0 <__malloc_unlock>
   8b48a:	4628      	mov	r0, r5
   8b48c:	b003      	add	sp, #12
   8b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b492:	f023 0303 	bic.w	r3, r3, #3
   8b496:	18f9      	adds	r1, r7, r3
   8b498:	4291      	cmp	r1, r2
   8b49a:	db1d      	blt.n	8b4d8 <_realloc_r+0x134>
   8b49c:	68c3      	ldr	r3, [r0, #12]
   8b49e:	6882      	ldr	r2, [r0, #8]
   8b4a0:	4625      	mov	r5, r4
   8b4a2:	60d3      	str	r3, [r2, #12]
   8b4a4:	460f      	mov	r7, r1
   8b4a6:	609a      	str	r2, [r3, #8]
   8b4a8:	e7dc      	b.n	8b464 <_realloc_r+0xc0>
   8b4aa:	f002 0201 	and.w	r2, r2, #1
   8b4ae:	eb09 0106 	add.w	r1, r9, r6
   8b4b2:	f043 0301 	orr.w	r3, r3, #1
   8b4b6:	4332      	orrs	r2, r6
   8b4b8:	f8c9 2004 	str.w	r2, [r9, #4]
   8b4bc:	444f      	add	r7, r9
   8b4be:	604b      	str	r3, [r1, #4]
   8b4c0:	687b      	ldr	r3, [r7, #4]
   8b4c2:	3108      	adds	r1, #8
   8b4c4:	f043 0301 	orr.w	r3, r3, #1
   8b4c8:	607b      	str	r3, [r7, #4]
   8b4ca:	4640      	mov	r0, r8
   8b4cc:	f7fe fdd4 	bl	8a078 <_free_r>
   8b4d0:	e7d8      	b.n	8b484 <_realloc_r+0xe0>
   8b4d2:	4611      	mov	r1, r2
   8b4d4:	f7ff b8fc 	b.w	8a6d0 <_malloc_r>
   8b4d8:	f01e 0f01 	tst.w	lr, #1
   8b4dc:	d18f      	bne.n	8b3fe <_realloc_r+0x5a>
   8b4de:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b4e2:	eba9 0a01 	sub.w	sl, r9, r1
   8b4e6:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b4ea:	f021 0103 	bic.w	r1, r1, #3
   8b4ee:	440b      	add	r3, r1
   8b4f0:	443b      	add	r3, r7
   8b4f2:	4293      	cmp	r3, r2
   8b4f4:	db26      	blt.n	8b544 <_realloc_r+0x1a0>
   8b4f6:	4655      	mov	r5, sl
   8b4f8:	68c1      	ldr	r1, [r0, #12]
   8b4fa:	6880      	ldr	r0, [r0, #8]
   8b4fc:	1f3a      	subs	r2, r7, #4
   8b4fe:	60c1      	str	r1, [r0, #12]
   8b500:	6088      	str	r0, [r1, #8]
   8b502:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b506:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b50a:	2a24      	cmp	r2, #36	; 0x24
   8b50c:	60c1      	str	r1, [r0, #12]
   8b50e:	6088      	str	r0, [r1, #8]
   8b510:	d826      	bhi.n	8b560 <_realloc_r+0x1bc>
   8b512:	2a13      	cmp	r2, #19
   8b514:	f240 8081 	bls.w	8b61a <_realloc_r+0x276>
   8b518:	6821      	ldr	r1, [r4, #0]
   8b51a:	2a1b      	cmp	r2, #27
   8b51c:	f8ca 1008 	str.w	r1, [sl, #8]
   8b520:	6861      	ldr	r1, [r4, #4]
   8b522:	f8ca 100c 	str.w	r1, [sl, #12]
   8b526:	f200 80ad 	bhi.w	8b684 <_realloc_r+0x2e0>
   8b52a:	f104 0008 	add.w	r0, r4, #8
   8b52e:	f10a 0210 	add.w	r2, sl, #16
   8b532:	e074      	b.n	8b61e <_realloc_r+0x27a>
   8b534:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b538:	eba9 0a03 	sub.w	sl, r9, r3
   8b53c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b540:	f021 0103 	bic.w	r1, r1, #3
   8b544:	187b      	adds	r3, r7, r1
   8b546:	4293      	cmp	r3, r2
   8b548:	f6ff af59 	blt.w	8b3fe <_realloc_r+0x5a>
   8b54c:	4655      	mov	r5, sl
   8b54e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b552:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b556:	1f3a      	subs	r2, r7, #4
   8b558:	2a24      	cmp	r2, #36	; 0x24
   8b55a:	60c1      	str	r1, [r0, #12]
   8b55c:	6088      	str	r0, [r1, #8]
   8b55e:	d9d8      	bls.n	8b512 <_realloc_r+0x16e>
   8b560:	4621      	mov	r1, r4
   8b562:	4628      	mov	r0, r5
   8b564:	461f      	mov	r7, r3
   8b566:	46d1      	mov	r9, sl
   8b568:	f7ff fbb0 	bl	8accc <memmove>
   8b56c:	e77a      	b.n	8b464 <_realloc_r+0xc0>
   8b56e:	6841      	ldr	r1, [r0, #4]
   8b570:	f106 0010 	add.w	r0, r6, #16
   8b574:	f021 0b03 	bic.w	fp, r1, #3
   8b578:	44bb      	add	fp, r7
   8b57a:	4583      	cmp	fp, r0
   8b57c:	da58      	bge.n	8b630 <_realloc_r+0x28c>
   8b57e:	f01e 0f01 	tst.w	lr, #1
   8b582:	f47f af3c 	bne.w	8b3fe <_realloc_r+0x5a>
   8b586:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b58a:	eba9 0a01 	sub.w	sl, r9, r1
   8b58e:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b592:	f021 0103 	bic.w	r1, r1, #3
   8b596:	448b      	add	fp, r1
   8b598:	4558      	cmp	r0, fp
   8b59a:	dcd3      	bgt.n	8b544 <_realloc_r+0x1a0>
   8b59c:	4655      	mov	r5, sl
   8b59e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b5a2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8b5a6:	1f3a      	subs	r2, r7, #4
   8b5a8:	2a24      	cmp	r2, #36	; 0x24
   8b5aa:	60c1      	str	r1, [r0, #12]
   8b5ac:	6088      	str	r0, [r1, #8]
   8b5ae:	f200 808d 	bhi.w	8b6cc <_realloc_r+0x328>
   8b5b2:	2a13      	cmp	r2, #19
   8b5b4:	f240 8087 	bls.w	8b6c6 <_realloc_r+0x322>
   8b5b8:	6821      	ldr	r1, [r4, #0]
   8b5ba:	2a1b      	cmp	r2, #27
   8b5bc:	f8ca 1008 	str.w	r1, [sl, #8]
   8b5c0:	6861      	ldr	r1, [r4, #4]
   8b5c2:	f8ca 100c 	str.w	r1, [sl, #12]
   8b5c6:	f200 8088 	bhi.w	8b6da <_realloc_r+0x336>
   8b5ca:	f104 0108 	add.w	r1, r4, #8
   8b5ce:	f10a 0210 	add.w	r2, sl, #16
   8b5d2:	6808      	ldr	r0, [r1, #0]
   8b5d4:	6010      	str	r0, [r2, #0]
   8b5d6:	6848      	ldr	r0, [r1, #4]
   8b5d8:	6050      	str	r0, [r2, #4]
   8b5da:	6889      	ldr	r1, [r1, #8]
   8b5dc:	6091      	str	r1, [r2, #8]
   8b5de:	ebab 0206 	sub.w	r2, fp, r6
   8b5e2:	eb0a 0106 	add.w	r1, sl, r6
   8b5e6:	f042 0201 	orr.w	r2, r2, #1
   8b5ea:	6099      	str	r1, [r3, #8]
   8b5ec:	604a      	str	r2, [r1, #4]
   8b5ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b5f2:	4640      	mov	r0, r8
   8b5f4:	f003 0301 	and.w	r3, r3, #1
   8b5f8:	431e      	orrs	r6, r3
   8b5fa:	f8ca 6004 	str.w	r6, [sl, #4]
   8b5fe:	f7ff fbcf 	bl	8ada0 <__malloc_unlock>
   8b602:	e742      	b.n	8b48a <_realloc_r+0xe6>
   8b604:	6823      	ldr	r3, [r4, #0]
   8b606:	2a1b      	cmp	r2, #27
   8b608:	6003      	str	r3, [r0, #0]
   8b60a:	6863      	ldr	r3, [r4, #4]
   8b60c:	6043      	str	r3, [r0, #4]
   8b60e:	d827      	bhi.n	8b660 <_realloc_r+0x2bc>
   8b610:	f100 0308 	add.w	r3, r0, #8
   8b614:	f104 0208 	add.w	r2, r4, #8
   8b618:	e70b      	b.n	8b432 <_realloc_r+0x8e>
   8b61a:	4620      	mov	r0, r4
   8b61c:	462a      	mov	r2, r5
   8b61e:	6801      	ldr	r1, [r0, #0]
   8b620:	461f      	mov	r7, r3
   8b622:	6011      	str	r1, [r2, #0]
   8b624:	6841      	ldr	r1, [r0, #4]
   8b626:	46d1      	mov	r9, sl
   8b628:	6051      	str	r1, [r2, #4]
   8b62a:	6883      	ldr	r3, [r0, #8]
   8b62c:	6093      	str	r3, [r2, #8]
   8b62e:	e719      	b.n	8b464 <_realloc_r+0xc0>
   8b630:	ebab 0b06 	sub.w	fp, fp, r6
   8b634:	eb09 0106 	add.w	r1, r9, r6
   8b638:	f04b 0201 	orr.w	r2, fp, #1
   8b63c:	6099      	str	r1, [r3, #8]
   8b63e:	604a      	str	r2, [r1, #4]
   8b640:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b644:	4640      	mov	r0, r8
   8b646:	f003 0301 	and.w	r3, r3, #1
   8b64a:	431e      	orrs	r6, r3
   8b64c:	f844 6c04 	str.w	r6, [r4, #-4]
   8b650:	f7ff fba6 	bl	8ada0 <__malloc_unlock>
   8b654:	4625      	mov	r5, r4
   8b656:	e718      	b.n	8b48a <_realloc_r+0xe6>
   8b658:	4621      	mov	r1, r4
   8b65a:	f7ff fb37 	bl	8accc <memmove>
   8b65e:	e6ee      	b.n	8b43e <_realloc_r+0x9a>
   8b660:	68a3      	ldr	r3, [r4, #8]
   8b662:	2a24      	cmp	r2, #36	; 0x24
   8b664:	6083      	str	r3, [r0, #8]
   8b666:	68e3      	ldr	r3, [r4, #12]
   8b668:	60c3      	str	r3, [r0, #12]
   8b66a:	d018      	beq.n	8b69e <_realloc_r+0x2fa>
   8b66c:	f100 0310 	add.w	r3, r0, #16
   8b670:	f104 0210 	add.w	r2, r4, #16
   8b674:	e6dd      	b.n	8b432 <_realloc_r+0x8e>
   8b676:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b67a:	4625      	mov	r5, r4
   8b67c:	f023 0303 	bic.w	r3, r3, #3
   8b680:	441f      	add	r7, r3
   8b682:	e6ef      	b.n	8b464 <_realloc_r+0xc0>
   8b684:	68a1      	ldr	r1, [r4, #8]
   8b686:	2a24      	cmp	r2, #36	; 0x24
   8b688:	f8ca 1010 	str.w	r1, [sl, #16]
   8b68c:	68e1      	ldr	r1, [r4, #12]
   8b68e:	f8ca 1014 	str.w	r1, [sl, #20]
   8b692:	d00d      	beq.n	8b6b0 <_realloc_r+0x30c>
   8b694:	f104 0010 	add.w	r0, r4, #16
   8b698:	f10a 0218 	add.w	r2, sl, #24
   8b69c:	e7bf      	b.n	8b61e <_realloc_r+0x27a>
   8b69e:	6922      	ldr	r2, [r4, #16]
   8b6a0:	f100 0318 	add.w	r3, r0, #24
   8b6a4:	6102      	str	r2, [r0, #16]
   8b6a6:	6961      	ldr	r1, [r4, #20]
   8b6a8:	f104 0218 	add.w	r2, r4, #24
   8b6ac:	6141      	str	r1, [r0, #20]
   8b6ae:	e6c0      	b.n	8b432 <_realloc_r+0x8e>
   8b6b0:	6922      	ldr	r2, [r4, #16]
   8b6b2:	f104 0018 	add.w	r0, r4, #24
   8b6b6:	f8ca 2018 	str.w	r2, [sl, #24]
   8b6ba:	6961      	ldr	r1, [r4, #20]
   8b6bc:	f10a 0220 	add.w	r2, sl, #32
   8b6c0:	f8ca 101c 	str.w	r1, [sl, #28]
   8b6c4:	e7ab      	b.n	8b61e <_realloc_r+0x27a>
   8b6c6:	4621      	mov	r1, r4
   8b6c8:	462a      	mov	r2, r5
   8b6ca:	e782      	b.n	8b5d2 <_realloc_r+0x22e>
   8b6cc:	4621      	mov	r1, r4
   8b6ce:	4628      	mov	r0, r5
   8b6d0:	9301      	str	r3, [sp, #4]
   8b6d2:	f7ff fafb 	bl	8accc <memmove>
   8b6d6:	9b01      	ldr	r3, [sp, #4]
   8b6d8:	e781      	b.n	8b5de <_realloc_r+0x23a>
   8b6da:	68a1      	ldr	r1, [r4, #8]
   8b6dc:	2a24      	cmp	r2, #36	; 0x24
   8b6de:	f8ca 1010 	str.w	r1, [sl, #16]
   8b6e2:	68e1      	ldr	r1, [r4, #12]
   8b6e4:	f8ca 1014 	str.w	r1, [sl, #20]
   8b6e8:	d006      	beq.n	8b6f8 <_realloc_r+0x354>
   8b6ea:	f104 0110 	add.w	r1, r4, #16
   8b6ee:	f10a 0218 	add.w	r2, sl, #24
   8b6f2:	e76e      	b.n	8b5d2 <_realloc_r+0x22e>
   8b6f4:	20001048 	.word	0x20001048
   8b6f8:	6922      	ldr	r2, [r4, #16]
   8b6fa:	f104 0118 	add.w	r1, r4, #24
   8b6fe:	f8ca 2018 	str.w	r2, [sl, #24]
   8b702:	6960      	ldr	r0, [r4, #20]
   8b704:	f10a 0220 	add.w	r2, sl, #32
   8b708:	f8ca 001c 	str.w	r0, [sl, #28]
   8b70c:	e761      	b.n	8b5d2 <_realloc_r+0x22e>
   8b70e:	bf00      	nop

0008b710 <_sbrk_r>:
   8b710:	b538      	push	{r3, r4, r5, lr}
   8b712:	2300      	movs	r3, #0
   8b714:	4c06      	ldr	r4, [pc, #24]	; (8b730 <_sbrk_r+0x20>)
   8b716:	4605      	mov	r5, r0
   8b718:	4608      	mov	r0, r1
   8b71a:	6023      	str	r3, [r4, #0]
   8b71c:	f7fa fb86 	bl	85e2c <_sbrk>
   8b720:	1c43      	adds	r3, r0, #1
   8b722:	d000      	beq.n	8b726 <_sbrk_r+0x16>
   8b724:	bd38      	pop	{r3, r4, r5, pc}
   8b726:	6823      	ldr	r3, [r4, #0]
   8b728:	2b00      	cmp	r3, #0
   8b72a:	d0fb      	beq.n	8b724 <_sbrk_r+0x14>
   8b72c:	602b      	str	r3, [r5, #0]
   8b72e:	bd38      	pop	{r3, r4, r5, pc}
   8b730:	200029e4 	.word	0x200029e4

0008b734 <__sread>:
   8b734:	b510      	push	{r4, lr}
   8b736:	460c      	mov	r4, r1
   8b738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b73c:	f000 faa2 	bl	8bc84 <_read_r>
   8b740:	2800      	cmp	r0, #0
   8b742:	db03      	blt.n	8b74c <__sread+0x18>
   8b744:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8b746:	4403      	add	r3, r0
   8b748:	6523      	str	r3, [r4, #80]	; 0x50
   8b74a:	bd10      	pop	{r4, pc}
   8b74c:	89a3      	ldrh	r3, [r4, #12]
   8b74e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8b752:	81a3      	strh	r3, [r4, #12]
   8b754:	bd10      	pop	{r4, pc}
   8b756:	bf00      	nop

0008b758 <__swrite>:
   8b758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b75c:	460c      	mov	r4, r1
   8b75e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8b762:	461f      	mov	r7, r3
   8b764:	05cb      	lsls	r3, r1, #23
   8b766:	4616      	mov	r6, r2
   8b768:	4605      	mov	r5, r0
   8b76a:	d507      	bpl.n	8b77c <__swrite+0x24>
   8b76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b770:	2302      	movs	r3, #2
   8b772:	2200      	movs	r2, #0
   8b774:	f000 fa70 	bl	8bc58 <_lseek_r>
   8b778:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8b77c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8b780:	81a1      	strh	r1, [r4, #12]
   8b782:	463b      	mov	r3, r7
   8b784:	4632      	mov	r2, r6
   8b786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b78a:	4628      	mov	r0, r5
   8b78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8b790:	f000 b920 	b.w	8b9d4 <_write_r>

0008b794 <__sseek>:
   8b794:	b510      	push	{r4, lr}
   8b796:	460c      	mov	r4, r1
   8b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b79c:	f000 fa5c 	bl	8bc58 <_lseek_r>
   8b7a0:	89a3      	ldrh	r3, [r4, #12]
   8b7a2:	1c42      	adds	r2, r0, #1
   8b7a4:	bf0e      	itee	eq
   8b7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8b7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8b7ae:	6520      	strne	r0, [r4, #80]	; 0x50
   8b7b0:	81a3      	strh	r3, [r4, #12]
   8b7b2:	bd10      	pop	{r4, pc}

0008b7b4 <__sclose>:
   8b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b7b8:	f000 b9b4 	b.w	8bb24 <_close_r>

0008b7bc <__ssprint_r>:
   8b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b7c0:	6893      	ldr	r3, [r2, #8]
   8b7c2:	b083      	sub	sp, #12
   8b7c4:	4690      	mov	r8, r2
   8b7c6:	2b00      	cmp	r3, #0
   8b7c8:	d070      	beq.n	8b8ac <__ssprint_r+0xf0>
   8b7ca:	4682      	mov	sl, r0
   8b7cc:	460c      	mov	r4, r1
   8b7ce:	6817      	ldr	r7, [r2, #0]
   8b7d0:	688d      	ldr	r5, [r1, #8]
   8b7d2:	6808      	ldr	r0, [r1, #0]
   8b7d4:	e042      	b.n	8b85c <__ssprint_r+0xa0>
   8b7d6:	89a3      	ldrh	r3, [r4, #12]
   8b7d8:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b7dc:	d02e      	beq.n	8b83c <__ssprint_r+0x80>
   8b7de:	6965      	ldr	r5, [r4, #20]
   8b7e0:	6921      	ldr	r1, [r4, #16]
   8b7e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8b7e6:	eba0 0b01 	sub.w	fp, r0, r1
   8b7ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8b7ee:	f10b 0001 	add.w	r0, fp, #1
   8b7f2:	106d      	asrs	r5, r5, #1
   8b7f4:	4430      	add	r0, r6
   8b7f6:	42a8      	cmp	r0, r5
   8b7f8:	462a      	mov	r2, r5
   8b7fa:	bf84      	itt	hi
   8b7fc:	4605      	movhi	r5, r0
   8b7fe:	462a      	movhi	r2, r5
   8b800:	055b      	lsls	r3, r3, #21
   8b802:	d538      	bpl.n	8b876 <__ssprint_r+0xba>
   8b804:	4611      	mov	r1, r2
   8b806:	4650      	mov	r0, sl
   8b808:	f7fe ff62 	bl	8a6d0 <_malloc_r>
   8b80c:	2800      	cmp	r0, #0
   8b80e:	d03c      	beq.n	8b88a <__ssprint_r+0xce>
   8b810:	465a      	mov	r2, fp
   8b812:	6921      	ldr	r1, [r4, #16]
   8b814:	9001      	str	r0, [sp, #4]
   8b816:	f7fa fe89 	bl	8652c <memcpy>
   8b81a:	89a2      	ldrh	r2, [r4, #12]
   8b81c:	9b01      	ldr	r3, [sp, #4]
   8b81e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b826:	81a2      	strh	r2, [r4, #12]
   8b828:	eba5 020b 	sub.w	r2, r5, fp
   8b82c:	eb03 000b 	add.w	r0, r3, fp
   8b830:	6165      	str	r5, [r4, #20]
   8b832:	46b3      	mov	fp, r6
   8b834:	4635      	mov	r5, r6
   8b836:	6123      	str	r3, [r4, #16]
   8b838:	6020      	str	r0, [r4, #0]
   8b83a:	60a2      	str	r2, [r4, #8]
   8b83c:	465a      	mov	r2, fp
   8b83e:	4649      	mov	r1, r9
   8b840:	f7ff fa44 	bl	8accc <memmove>
   8b844:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b848:	68a2      	ldr	r2, [r4, #8]
   8b84a:	6820      	ldr	r0, [r4, #0]
   8b84c:	1b55      	subs	r5, r2, r5
   8b84e:	4458      	add	r0, fp
   8b850:	1b9e      	subs	r6, r3, r6
   8b852:	60a5      	str	r5, [r4, #8]
   8b854:	6020      	str	r0, [r4, #0]
   8b856:	f8c8 6008 	str.w	r6, [r8, #8]
   8b85a:	b33e      	cbz	r6, 8b8ac <__ssprint_r+0xf0>
   8b85c:	687e      	ldr	r6, [r7, #4]
   8b85e:	463b      	mov	r3, r7
   8b860:	3708      	adds	r7, #8
   8b862:	2e00      	cmp	r6, #0
   8b864:	d0fa      	beq.n	8b85c <__ssprint_r+0xa0>
   8b866:	42ae      	cmp	r6, r5
   8b868:	f8d3 9000 	ldr.w	r9, [r3]
   8b86c:	46ab      	mov	fp, r5
   8b86e:	d2b2      	bcs.n	8b7d6 <__ssprint_r+0x1a>
   8b870:	4635      	mov	r5, r6
   8b872:	46b3      	mov	fp, r6
   8b874:	e7e2      	b.n	8b83c <__ssprint_r+0x80>
   8b876:	4650      	mov	r0, sl
   8b878:	f7ff fd94 	bl	8b3a4 <_realloc_r>
   8b87c:	4603      	mov	r3, r0
   8b87e:	2800      	cmp	r0, #0
   8b880:	d1d2      	bne.n	8b828 <__ssprint_r+0x6c>
   8b882:	6921      	ldr	r1, [r4, #16]
   8b884:	4650      	mov	r0, sl
   8b886:	f7fe fbf7 	bl	8a078 <_free_r>
   8b88a:	230c      	movs	r3, #12
   8b88c:	2200      	movs	r2, #0
   8b88e:	f04f 30ff 	mov.w	r0, #4294967295
   8b892:	f8ca 3000 	str.w	r3, [sl]
   8b896:	89a3      	ldrh	r3, [r4, #12]
   8b898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b89c:	81a3      	strh	r3, [r4, #12]
   8b89e:	f8c8 2008 	str.w	r2, [r8, #8]
   8b8a2:	f8c8 2004 	str.w	r2, [r8, #4]
   8b8a6:	b003      	add	sp, #12
   8b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b8ac:	2000      	movs	r0, #0
   8b8ae:	f8c8 0004 	str.w	r0, [r8, #4]
   8b8b2:	b003      	add	sp, #12
   8b8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008b8b8 <__swbuf_r>:
   8b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b8ba:	460d      	mov	r5, r1
   8b8bc:	4614      	mov	r4, r2
   8b8be:	4606      	mov	r6, r0
   8b8c0:	b110      	cbz	r0, 8b8c8 <__swbuf_r+0x10>
   8b8c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b8c4:	2b00      	cmp	r3, #0
   8b8c6:	d04b      	beq.n	8b960 <__swbuf_r+0xa8>
   8b8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b8cc:	69a3      	ldr	r3, [r4, #24]
   8b8ce:	b291      	uxth	r1, r2
   8b8d0:	0708      	lsls	r0, r1, #28
   8b8d2:	60a3      	str	r3, [r4, #8]
   8b8d4:	d539      	bpl.n	8b94a <__swbuf_r+0x92>
   8b8d6:	6923      	ldr	r3, [r4, #16]
   8b8d8:	2b00      	cmp	r3, #0
   8b8da:	d036      	beq.n	8b94a <__swbuf_r+0x92>
   8b8dc:	b2ed      	uxtb	r5, r5
   8b8de:	0489      	lsls	r1, r1, #18
   8b8e0:	462f      	mov	r7, r5
   8b8e2:	d515      	bpl.n	8b910 <__swbuf_r+0x58>
   8b8e4:	6822      	ldr	r2, [r4, #0]
   8b8e6:	6961      	ldr	r1, [r4, #20]
   8b8e8:	1ad3      	subs	r3, r2, r3
   8b8ea:	428b      	cmp	r3, r1
   8b8ec:	da1c      	bge.n	8b928 <__swbuf_r+0x70>
   8b8ee:	3301      	adds	r3, #1
   8b8f0:	68a1      	ldr	r1, [r4, #8]
   8b8f2:	1c50      	adds	r0, r2, #1
   8b8f4:	3901      	subs	r1, #1
   8b8f6:	60a1      	str	r1, [r4, #8]
   8b8f8:	6020      	str	r0, [r4, #0]
   8b8fa:	7015      	strb	r5, [r2, #0]
   8b8fc:	6962      	ldr	r2, [r4, #20]
   8b8fe:	429a      	cmp	r2, r3
   8b900:	d01a      	beq.n	8b938 <__swbuf_r+0x80>
   8b902:	89a3      	ldrh	r3, [r4, #12]
   8b904:	07db      	lsls	r3, r3, #31
   8b906:	d501      	bpl.n	8b90c <__swbuf_r+0x54>
   8b908:	2d0a      	cmp	r5, #10
   8b90a:	d015      	beq.n	8b938 <__swbuf_r+0x80>
   8b90c:	4638      	mov	r0, r7
   8b90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b910:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8b912:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b916:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8b91a:	81a2      	strh	r2, [r4, #12]
   8b91c:	6822      	ldr	r2, [r4, #0]
   8b91e:	6661      	str	r1, [r4, #100]	; 0x64
   8b920:	6961      	ldr	r1, [r4, #20]
   8b922:	1ad3      	subs	r3, r2, r3
   8b924:	428b      	cmp	r3, r1
   8b926:	dbe2      	blt.n	8b8ee <__swbuf_r+0x36>
   8b928:	4621      	mov	r1, r4
   8b92a:	4630      	mov	r0, r6
   8b92c:	f7fe fa26 	bl	89d7c <_fflush_r>
   8b930:	b940      	cbnz	r0, 8b944 <__swbuf_r+0x8c>
   8b932:	2301      	movs	r3, #1
   8b934:	6822      	ldr	r2, [r4, #0]
   8b936:	e7db      	b.n	8b8f0 <__swbuf_r+0x38>
   8b938:	4621      	mov	r1, r4
   8b93a:	4630      	mov	r0, r6
   8b93c:	f7fe fa1e 	bl	89d7c <_fflush_r>
   8b940:	2800      	cmp	r0, #0
   8b942:	d0e3      	beq.n	8b90c <__swbuf_r+0x54>
   8b944:	f04f 37ff 	mov.w	r7, #4294967295
   8b948:	e7e0      	b.n	8b90c <__swbuf_r+0x54>
   8b94a:	4621      	mov	r1, r4
   8b94c:	4630      	mov	r0, r6
   8b94e:	f7fd f94f 	bl	88bf0 <__swsetup_r>
   8b952:	2800      	cmp	r0, #0
   8b954:	d1f6      	bne.n	8b944 <__swbuf_r+0x8c>
   8b956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b95a:	6923      	ldr	r3, [r4, #16]
   8b95c:	b291      	uxth	r1, r2
   8b95e:	e7bd      	b.n	8b8dc <__swbuf_r+0x24>
   8b960:	f7fe fa64 	bl	89e2c <__sinit>
   8b964:	e7b0      	b.n	8b8c8 <__swbuf_r+0x10>
   8b966:	bf00      	nop

0008b968 <_wcrtomb_r>:
   8b968:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b96a:	4606      	mov	r6, r0
   8b96c:	b085      	sub	sp, #20
   8b96e:	461f      	mov	r7, r3
   8b970:	b189      	cbz	r1, 8b996 <_wcrtomb_r+0x2e>
   8b972:	4c10      	ldr	r4, [pc, #64]	; (8b9b4 <_wcrtomb_r+0x4c>)
   8b974:	4d10      	ldr	r5, [pc, #64]	; (8b9b8 <_wcrtomb_r+0x50>)
   8b976:	6824      	ldr	r4, [r4, #0]
   8b978:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8b97a:	2c00      	cmp	r4, #0
   8b97c:	bf08      	it	eq
   8b97e:	462c      	moveq	r4, r5
   8b980:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8b984:	47a0      	blx	r4
   8b986:	1c43      	adds	r3, r0, #1
   8b988:	d103      	bne.n	8b992 <_wcrtomb_r+0x2a>
   8b98a:	2200      	movs	r2, #0
   8b98c:	238a      	movs	r3, #138	; 0x8a
   8b98e:	603a      	str	r2, [r7, #0]
   8b990:	6033      	str	r3, [r6, #0]
   8b992:	b005      	add	sp, #20
   8b994:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b996:	460c      	mov	r4, r1
   8b998:	4a06      	ldr	r2, [pc, #24]	; (8b9b4 <_wcrtomb_r+0x4c>)
   8b99a:	4d07      	ldr	r5, [pc, #28]	; (8b9b8 <_wcrtomb_r+0x50>)
   8b99c:	6811      	ldr	r1, [r2, #0]
   8b99e:	4622      	mov	r2, r4
   8b9a0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8b9a2:	a901      	add	r1, sp, #4
   8b9a4:	2c00      	cmp	r4, #0
   8b9a6:	bf08      	it	eq
   8b9a8:	462c      	moveq	r4, r5
   8b9aa:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8b9ae:	47a0      	blx	r4
   8b9b0:	e7e9      	b.n	8b986 <_wcrtomb_r+0x1e>
   8b9b2:	bf00      	nop
   8b9b4:	20000aa8 	.word	0x20000aa8
   8b9b8:	20000edc 	.word	0x20000edc

0008b9bc <__ascii_wctomb>:
   8b9bc:	b119      	cbz	r1, 8b9c6 <__ascii_wctomb+0xa>
   8b9be:	2aff      	cmp	r2, #255	; 0xff
   8b9c0:	d803      	bhi.n	8b9ca <__ascii_wctomb+0xe>
   8b9c2:	700a      	strb	r2, [r1, #0]
   8b9c4:	2101      	movs	r1, #1
   8b9c6:	4608      	mov	r0, r1
   8b9c8:	4770      	bx	lr
   8b9ca:	238a      	movs	r3, #138	; 0x8a
   8b9cc:	f04f 31ff 	mov.w	r1, #4294967295
   8b9d0:	6003      	str	r3, [r0, #0]
   8b9d2:	e7f8      	b.n	8b9c6 <__ascii_wctomb+0xa>

0008b9d4 <_write_r>:
   8b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b9d6:	460e      	mov	r6, r1
   8b9d8:	2500      	movs	r5, #0
   8b9da:	4c08      	ldr	r4, [pc, #32]	; (8b9fc <_write_r+0x28>)
   8b9dc:	4611      	mov	r1, r2
   8b9de:	4607      	mov	r7, r0
   8b9e0:	461a      	mov	r2, r3
   8b9e2:	4630      	mov	r0, r6
   8b9e4:	6025      	str	r5, [r4, #0]
   8b9e6:	f7f8 fa8b 	bl	83f00 <_write>
   8b9ea:	1c43      	adds	r3, r0, #1
   8b9ec:	d000      	beq.n	8b9f0 <_write_r+0x1c>
   8b9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b9f0:	6823      	ldr	r3, [r4, #0]
   8b9f2:	2b00      	cmp	r3, #0
   8b9f4:	d0fb      	beq.n	8b9ee <_write_r+0x1a>
   8b9f6:	603b      	str	r3, [r7, #0]
   8b9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b9fa:	bf00      	nop
   8b9fc:	200029e4 	.word	0x200029e4

0008ba00 <__register_exitproc>:
   8ba00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ba04:	4d2c      	ldr	r5, [pc, #176]	; (8bab8 <__register_exitproc+0xb8>)
   8ba06:	4606      	mov	r6, r0
   8ba08:	6828      	ldr	r0, [r5, #0]
   8ba0a:	4698      	mov	r8, r3
   8ba0c:	460f      	mov	r7, r1
   8ba0e:	4691      	mov	r9, r2
   8ba10:	f7fe fdda 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   8ba14:	4b29      	ldr	r3, [pc, #164]	; (8babc <__register_exitproc+0xbc>)
   8ba16:	681c      	ldr	r4, [r3, #0]
   8ba18:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8ba1c:	2b00      	cmp	r3, #0
   8ba1e:	d03e      	beq.n	8ba9e <__register_exitproc+0x9e>
   8ba20:	685a      	ldr	r2, [r3, #4]
   8ba22:	2a1f      	cmp	r2, #31
   8ba24:	dc1c      	bgt.n	8ba60 <__register_exitproc+0x60>
   8ba26:	f102 0e01 	add.w	lr, r2, #1
   8ba2a:	b176      	cbz	r6, 8ba4a <__register_exitproc+0x4a>
   8ba2c:	2101      	movs	r1, #1
   8ba2e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8ba32:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8ba36:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8ba3a:	4091      	lsls	r1, r2
   8ba3c:	4308      	orrs	r0, r1
   8ba3e:	2e02      	cmp	r6, #2
   8ba40:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8ba44:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8ba48:	d023      	beq.n	8ba92 <__register_exitproc+0x92>
   8ba4a:	3202      	adds	r2, #2
   8ba4c:	f8c3 e004 	str.w	lr, [r3, #4]
   8ba50:	6828      	ldr	r0, [r5, #0]
   8ba52:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8ba56:	f7fe fdb9 	bl	8a5cc <__retarget_lock_release_recursive>
   8ba5a:	2000      	movs	r0, #0
   8ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ba60:	4b17      	ldr	r3, [pc, #92]	; (8bac0 <__register_exitproc+0xc0>)
   8ba62:	b30b      	cbz	r3, 8baa8 <__register_exitproc+0xa8>
   8ba64:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8ba68:	f7fe fe2a 	bl	8a6c0 <malloc>
   8ba6c:	4603      	mov	r3, r0
   8ba6e:	b1d8      	cbz	r0, 8baa8 <__register_exitproc+0xa8>
   8ba70:	2000      	movs	r0, #0
   8ba72:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8ba76:	f04f 0e01 	mov.w	lr, #1
   8ba7a:	6058      	str	r0, [r3, #4]
   8ba7c:	6019      	str	r1, [r3, #0]
   8ba7e:	4602      	mov	r2, r0
   8ba80:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8ba84:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8ba88:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8ba8c:	2e00      	cmp	r6, #0
   8ba8e:	d0dc      	beq.n	8ba4a <__register_exitproc+0x4a>
   8ba90:	e7cc      	b.n	8ba2c <__register_exitproc+0x2c>
   8ba92:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8ba96:	4301      	orrs	r1, r0
   8ba98:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8ba9c:	e7d5      	b.n	8ba4a <__register_exitproc+0x4a>
   8ba9e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8baa2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8baa6:	e7bb      	b.n	8ba20 <__register_exitproc+0x20>
   8baa8:	6828      	ldr	r0, [r5, #0]
   8baaa:	f7fe fd8f 	bl	8a5cc <__retarget_lock_release_recursive>
   8baae:	f04f 30ff 	mov.w	r0, #4294967295
   8bab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8bab6:	bf00      	nop
   8bab8:	20000ed8 	.word	0x20000ed8
   8babc:	0008c6d8 	.word	0x0008c6d8
   8bac0:	0008a6c1 	.word	0x0008a6c1

0008bac4 <_calloc_r>:
   8bac4:	b510      	push	{r4, lr}
   8bac6:	fb02 f101 	mul.w	r1, r2, r1
   8baca:	f7fe fe01 	bl	8a6d0 <_malloc_r>
   8bace:	4604      	mov	r4, r0
   8bad0:	b1d8      	cbz	r0, 8bb0a <_calloc_r+0x46>
   8bad2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8bad6:	f022 0203 	bic.w	r2, r2, #3
   8bada:	3a04      	subs	r2, #4
   8badc:	2a24      	cmp	r2, #36	; 0x24
   8bade:	d818      	bhi.n	8bb12 <_calloc_r+0x4e>
   8bae0:	2a13      	cmp	r2, #19
   8bae2:	d914      	bls.n	8bb0e <_calloc_r+0x4a>
   8bae4:	2300      	movs	r3, #0
   8bae6:	2a1b      	cmp	r2, #27
   8bae8:	6003      	str	r3, [r0, #0]
   8baea:	6043      	str	r3, [r0, #4]
   8baec:	d916      	bls.n	8bb1c <_calloc_r+0x58>
   8baee:	2a24      	cmp	r2, #36	; 0x24
   8baf0:	6083      	str	r3, [r0, #8]
   8baf2:	60c3      	str	r3, [r0, #12]
   8baf4:	bf11      	iteee	ne
   8baf6:	f100 0210 	addne.w	r2, r0, #16
   8bafa:	6103      	streq	r3, [r0, #16]
   8bafc:	6143      	streq	r3, [r0, #20]
   8bafe:	f100 0218 	addeq.w	r2, r0, #24
   8bb02:	2300      	movs	r3, #0
   8bb04:	6013      	str	r3, [r2, #0]
   8bb06:	6053      	str	r3, [r2, #4]
   8bb08:	6093      	str	r3, [r2, #8]
   8bb0a:	4620      	mov	r0, r4
   8bb0c:	bd10      	pop	{r4, pc}
   8bb0e:	4602      	mov	r2, r0
   8bb10:	e7f7      	b.n	8bb02 <_calloc_r+0x3e>
   8bb12:	2100      	movs	r1, #0
   8bb14:	f7fa fd80 	bl	86618 <memset>
   8bb18:	4620      	mov	r0, r4
   8bb1a:	bd10      	pop	{r4, pc}
   8bb1c:	f100 0208 	add.w	r2, r0, #8
   8bb20:	e7ef      	b.n	8bb02 <_calloc_r+0x3e>
   8bb22:	bf00      	nop

0008bb24 <_close_r>:
   8bb24:	b538      	push	{r3, r4, r5, lr}
   8bb26:	2300      	movs	r3, #0
   8bb28:	4c06      	ldr	r4, [pc, #24]	; (8bb44 <_close_r+0x20>)
   8bb2a:	4605      	mov	r5, r0
   8bb2c:	4608      	mov	r0, r1
   8bb2e:	6023      	str	r3, [r4, #0]
   8bb30:	f7fa f998 	bl	85e64 <_close>
   8bb34:	1c43      	adds	r3, r0, #1
   8bb36:	d000      	beq.n	8bb3a <_close_r+0x16>
   8bb38:	bd38      	pop	{r3, r4, r5, pc}
   8bb3a:	6823      	ldr	r3, [r4, #0]
   8bb3c:	2b00      	cmp	r3, #0
   8bb3e:	d0fb      	beq.n	8bb38 <_close_r+0x14>
   8bb40:	602b      	str	r3, [r5, #0]
   8bb42:	bd38      	pop	{r3, r4, r5, pc}
   8bb44:	200029e4 	.word	0x200029e4

0008bb48 <_fclose_r>:
   8bb48:	b570      	push	{r4, r5, r6, lr}
   8bb4a:	b159      	cbz	r1, 8bb64 <_fclose_r+0x1c>
   8bb4c:	4605      	mov	r5, r0
   8bb4e:	460c      	mov	r4, r1
   8bb50:	b110      	cbz	r0, 8bb58 <_fclose_r+0x10>
   8bb52:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bb54:	2b00      	cmp	r3, #0
   8bb56:	d03c      	beq.n	8bbd2 <_fclose_r+0x8a>
   8bb58:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bb5a:	07d8      	lsls	r0, r3, #31
   8bb5c:	d505      	bpl.n	8bb6a <_fclose_r+0x22>
   8bb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bb62:	b92b      	cbnz	r3, 8bb70 <_fclose_r+0x28>
   8bb64:	2600      	movs	r6, #0
   8bb66:	4630      	mov	r0, r6
   8bb68:	bd70      	pop	{r4, r5, r6, pc}
   8bb6a:	89a3      	ldrh	r3, [r4, #12]
   8bb6c:	0599      	lsls	r1, r3, #22
   8bb6e:	d53c      	bpl.n	8bbea <_fclose_r+0xa2>
   8bb70:	4621      	mov	r1, r4
   8bb72:	4628      	mov	r0, r5
   8bb74:	f7fe f866 	bl	89c44 <__sflush_r>
   8bb78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bb7a:	4606      	mov	r6, r0
   8bb7c:	b133      	cbz	r3, 8bb8c <_fclose_r+0x44>
   8bb7e:	69e1      	ldr	r1, [r4, #28]
   8bb80:	4628      	mov	r0, r5
   8bb82:	4798      	blx	r3
   8bb84:	2800      	cmp	r0, #0
   8bb86:	bfb8      	it	lt
   8bb88:	f04f 36ff 	movlt.w	r6, #4294967295
   8bb8c:	89a3      	ldrh	r3, [r4, #12]
   8bb8e:	061a      	lsls	r2, r3, #24
   8bb90:	d422      	bmi.n	8bbd8 <_fclose_r+0x90>
   8bb92:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bb94:	b141      	cbz	r1, 8bba8 <_fclose_r+0x60>
   8bb96:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bb9a:	4299      	cmp	r1, r3
   8bb9c:	d002      	beq.n	8bba4 <_fclose_r+0x5c>
   8bb9e:	4628      	mov	r0, r5
   8bba0:	f7fe fa6a 	bl	8a078 <_free_r>
   8bba4:	2300      	movs	r3, #0
   8bba6:	6323      	str	r3, [r4, #48]	; 0x30
   8bba8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bbaa:	b121      	cbz	r1, 8bbb6 <_fclose_r+0x6e>
   8bbac:	4628      	mov	r0, r5
   8bbae:	f7fe fa63 	bl	8a078 <_free_r>
   8bbb2:	2300      	movs	r3, #0
   8bbb4:	6463      	str	r3, [r4, #68]	; 0x44
   8bbb6:	f7fe f969 	bl	89e8c <__sfp_lock_acquire>
   8bbba:	2200      	movs	r2, #0
   8bbbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bbbe:	81a2      	strh	r2, [r4, #12]
   8bbc0:	07db      	lsls	r3, r3, #31
   8bbc2:	d50e      	bpl.n	8bbe2 <_fclose_r+0x9a>
   8bbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bbc6:	f7fe fcfd 	bl	8a5c4 <__retarget_lock_close_recursive>
   8bbca:	f7fe f965 	bl	89e98 <__sfp_lock_release>
   8bbce:	4630      	mov	r0, r6
   8bbd0:	bd70      	pop	{r4, r5, r6, pc}
   8bbd2:	f7fe f92b 	bl	89e2c <__sinit>
   8bbd6:	e7bf      	b.n	8bb58 <_fclose_r+0x10>
   8bbd8:	6921      	ldr	r1, [r4, #16]
   8bbda:	4628      	mov	r0, r5
   8bbdc:	f7fe fa4c 	bl	8a078 <_free_r>
   8bbe0:	e7d7      	b.n	8bb92 <_fclose_r+0x4a>
   8bbe2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bbe4:	f7fe fcf2 	bl	8a5cc <__retarget_lock_release_recursive>
   8bbe8:	e7ec      	b.n	8bbc4 <_fclose_r+0x7c>
   8bbea:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bbec:	f7fe fcec 	bl	8a5c8 <__retarget_lock_acquire_recursive>
   8bbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bbf4:	2b00      	cmp	r3, #0
   8bbf6:	d1bb      	bne.n	8bb70 <_fclose_r+0x28>
   8bbf8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8bbfa:	f016 0601 	ands.w	r6, r6, #1
   8bbfe:	d1b1      	bne.n	8bb64 <_fclose_r+0x1c>
   8bc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bc02:	f7fe fce3 	bl	8a5cc <__retarget_lock_release_recursive>
   8bc06:	4630      	mov	r0, r6
   8bc08:	bd70      	pop	{r4, r5, r6, pc}
   8bc0a:	bf00      	nop

0008bc0c <_fstat_r>:
   8bc0c:	b570      	push	{r4, r5, r6, lr}
   8bc0e:	460d      	mov	r5, r1
   8bc10:	2300      	movs	r3, #0
   8bc12:	4c07      	ldr	r4, [pc, #28]	; (8bc30 <_fstat_r+0x24>)
   8bc14:	4606      	mov	r6, r0
   8bc16:	4611      	mov	r1, r2
   8bc18:	4628      	mov	r0, r5
   8bc1a:	6023      	str	r3, [r4, #0]
   8bc1c:	f7fa f925 	bl	85e6a <_fstat>
   8bc20:	1c43      	adds	r3, r0, #1
   8bc22:	d000      	beq.n	8bc26 <_fstat_r+0x1a>
   8bc24:	bd70      	pop	{r4, r5, r6, pc}
   8bc26:	6823      	ldr	r3, [r4, #0]
   8bc28:	2b00      	cmp	r3, #0
   8bc2a:	d0fb      	beq.n	8bc24 <_fstat_r+0x18>
   8bc2c:	6033      	str	r3, [r6, #0]
   8bc2e:	bd70      	pop	{r4, r5, r6, pc}
   8bc30:	200029e4 	.word	0x200029e4

0008bc34 <_isatty_r>:
   8bc34:	b538      	push	{r3, r4, r5, lr}
   8bc36:	2300      	movs	r3, #0
   8bc38:	4c06      	ldr	r4, [pc, #24]	; (8bc54 <_isatty_r+0x20>)
   8bc3a:	4605      	mov	r5, r0
   8bc3c:	4608      	mov	r0, r1
   8bc3e:	6023      	str	r3, [r4, #0]
   8bc40:	f7fa f918 	bl	85e74 <_isatty>
   8bc44:	1c43      	adds	r3, r0, #1
   8bc46:	d000      	beq.n	8bc4a <_isatty_r+0x16>
   8bc48:	bd38      	pop	{r3, r4, r5, pc}
   8bc4a:	6823      	ldr	r3, [r4, #0]
   8bc4c:	2b00      	cmp	r3, #0
   8bc4e:	d0fb      	beq.n	8bc48 <_isatty_r+0x14>
   8bc50:	602b      	str	r3, [r5, #0]
   8bc52:	bd38      	pop	{r3, r4, r5, pc}
   8bc54:	200029e4 	.word	0x200029e4

0008bc58 <_lseek_r>:
   8bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc5a:	460e      	mov	r6, r1
   8bc5c:	2500      	movs	r5, #0
   8bc5e:	4c08      	ldr	r4, [pc, #32]	; (8bc80 <_lseek_r+0x28>)
   8bc60:	4611      	mov	r1, r2
   8bc62:	4607      	mov	r7, r0
   8bc64:	461a      	mov	r2, r3
   8bc66:	4630      	mov	r0, r6
   8bc68:	6025      	str	r5, [r4, #0]
   8bc6a:	f7fa f905 	bl	85e78 <_lseek>
   8bc6e:	1c43      	adds	r3, r0, #1
   8bc70:	d000      	beq.n	8bc74 <_lseek_r+0x1c>
   8bc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc74:	6823      	ldr	r3, [r4, #0]
   8bc76:	2b00      	cmp	r3, #0
   8bc78:	d0fb      	beq.n	8bc72 <_lseek_r+0x1a>
   8bc7a:	603b      	str	r3, [r7, #0]
   8bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc7e:	bf00      	nop
   8bc80:	200029e4 	.word	0x200029e4

0008bc84 <_read_r>:
   8bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc86:	460e      	mov	r6, r1
   8bc88:	2500      	movs	r5, #0
   8bc8a:	4c08      	ldr	r4, [pc, #32]	; (8bcac <_read_r+0x28>)
   8bc8c:	4611      	mov	r1, r2
   8bc8e:	4607      	mov	r7, r0
   8bc90:	461a      	mov	r2, r3
   8bc92:	4630      	mov	r0, r6
   8bc94:	6025      	str	r5, [r4, #0]
   8bc96:	f7f8 f915 	bl	83ec4 <_read>
   8bc9a:	1c43      	adds	r3, r0, #1
   8bc9c:	d000      	beq.n	8bca0 <_read_r+0x1c>
   8bc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bca0:	6823      	ldr	r3, [r4, #0]
   8bca2:	2b00      	cmp	r3, #0
   8bca4:	d0fb      	beq.n	8bc9e <_read_r+0x1a>
   8bca6:	603b      	str	r3, [r7, #0]
   8bca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bcaa:	bf00      	nop
   8bcac:	200029e4 	.word	0x200029e4

0008bcb0 <__aeabi_drsub>:
   8bcb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8bcb4:	e002      	b.n	8bcbc <__adddf3>
   8bcb6:	bf00      	nop

0008bcb8 <__aeabi_dsub>:
   8bcb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008bcbc <__adddf3>:
   8bcbc:	b530      	push	{r4, r5, lr}
   8bcbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8bcc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8bcc6:	ea94 0f05 	teq	r4, r5
   8bcca:	bf08      	it	eq
   8bccc:	ea90 0f02 	teqeq	r0, r2
   8bcd0:	bf1f      	itttt	ne
   8bcd2:	ea54 0c00 	orrsne.w	ip, r4, r0
   8bcd6:	ea55 0c02 	orrsne.w	ip, r5, r2
   8bcda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8bcde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8bce2:	f000 80e2 	beq.w	8beaa <__adddf3+0x1ee>
   8bce6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8bcea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8bcee:	bfb8      	it	lt
   8bcf0:	426d      	neglt	r5, r5
   8bcf2:	dd0c      	ble.n	8bd0e <__adddf3+0x52>
   8bcf4:	442c      	add	r4, r5
   8bcf6:	ea80 0202 	eor.w	r2, r0, r2
   8bcfa:	ea81 0303 	eor.w	r3, r1, r3
   8bcfe:	ea82 0000 	eor.w	r0, r2, r0
   8bd02:	ea83 0101 	eor.w	r1, r3, r1
   8bd06:	ea80 0202 	eor.w	r2, r0, r2
   8bd0a:	ea81 0303 	eor.w	r3, r1, r3
   8bd0e:	2d36      	cmp	r5, #54	; 0x36
   8bd10:	bf88      	it	hi
   8bd12:	bd30      	pophi	{r4, r5, pc}
   8bd14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bd18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bd1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8bd20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8bd24:	d002      	beq.n	8bd2c <__adddf3+0x70>
   8bd26:	4240      	negs	r0, r0
   8bd28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bd2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8bd30:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8bd34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8bd38:	d002      	beq.n	8bd40 <__adddf3+0x84>
   8bd3a:	4252      	negs	r2, r2
   8bd3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bd40:	ea94 0f05 	teq	r4, r5
   8bd44:	f000 80a7 	beq.w	8be96 <__adddf3+0x1da>
   8bd48:	f1a4 0401 	sub.w	r4, r4, #1
   8bd4c:	f1d5 0e20 	rsbs	lr, r5, #32
   8bd50:	db0d      	blt.n	8bd6e <__adddf3+0xb2>
   8bd52:	fa02 fc0e 	lsl.w	ip, r2, lr
   8bd56:	fa22 f205 	lsr.w	r2, r2, r5
   8bd5a:	1880      	adds	r0, r0, r2
   8bd5c:	f141 0100 	adc.w	r1, r1, #0
   8bd60:	fa03 f20e 	lsl.w	r2, r3, lr
   8bd64:	1880      	adds	r0, r0, r2
   8bd66:	fa43 f305 	asr.w	r3, r3, r5
   8bd6a:	4159      	adcs	r1, r3
   8bd6c:	e00e      	b.n	8bd8c <__adddf3+0xd0>
   8bd6e:	f1a5 0520 	sub.w	r5, r5, #32
   8bd72:	f10e 0e20 	add.w	lr, lr, #32
   8bd76:	2a01      	cmp	r2, #1
   8bd78:	fa03 fc0e 	lsl.w	ip, r3, lr
   8bd7c:	bf28      	it	cs
   8bd7e:	f04c 0c02 	orrcs.w	ip, ip, #2
   8bd82:	fa43 f305 	asr.w	r3, r3, r5
   8bd86:	18c0      	adds	r0, r0, r3
   8bd88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8bd8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bd90:	d507      	bpl.n	8bda2 <__adddf3+0xe6>
   8bd92:	f04f 0e00 	mov.w	lr, #0
   8bd96:	f1dc 0c00 	rsbs	ip, ip, #0
   8bd9a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8bd9e:	eb6e 0101 	sbc.w	r1, lr, r1
   8bda2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8bda6:	d31b      	bcc.n	8bde0 <__adddf3+0x124>
   8bda8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8bdac:	d30c      	bcc.n	8bdc8 <__adddf3+0x10c>
   8bdae:	0849      	lsrs	r1, r1, #1
   8bdb0:	ea5f 0030 	movs.w	r0, r0, rrx
   8bdb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8bdb8:	f104 0401 	add.w	r4, r4, #1
   8bdbc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8bdc0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8bdc4:	f080 809a 	bcs.w	8befc <__adddf3+0x240>
   8bdc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8bdcc:	bf08      	it	eq
   8bdce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8bdd2:	f150 0000 	adcs.w	r0, r0, #0
   8bdd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bdda:	ea41 0105 	orr.w	r1, r1, r5
   8bdde:	bd30      	pop	{r4, r5, pc}
   8bde0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8bde4:	4140      	adcs	r0, r0
   8bde6:	eb41 0101 	adc.w	r1, r1, r1
   8bdea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8bdee:	f1a4 0401 	sub.w	r4, r4, #1
   8bdf2:	d1e9      	bne.n	8bdc8 <__adddf3+0x10c>
   8bdf4:	f091 0f00 	teq	r1, #0
   8bdf8:	bf04      	itt	eq
   8bdfa:	4601      	moveq	r1, r0
   8bdfc:	2000      	moveq	r0, #0
   8bdfe:	fab1 f381 	clz	r3, r1
   8be02:	bf08      	it	eq
   8be04:	3320      	addeq	r3, #32
   8be06:	f1a3 030b 	sub.w	r3, r3, #11
   8be0a:	f1b3 0220 	subs.w	r2, r3, #32
   8be0e:	da0c      	bge.n	8be2a <__adddf3+0x16e>
   8be10:	320c      	adds	r2, #12
   8be12:	dd08      	ble.n	8be26 <__adddf3+0x16a>
   8be14:	f102 0c14 	add.w	ip, r2, #20
   8be18:	f1c2 020c 	rsb	r2, r2, #12
   8be1c:	fa01 f00c 	lsl.w	r0, r1, ip
   8be20:	fa21 f102 	lsr.w	r1, r1, r2
   8be24:	e00c      	b.n	8be40 <__adddf3+0x184>
   8be26:	f102 0214 	add.w	r2, r2, #20
   8be2a:	bfd8      	it	le
   8be2c:	f1c2 0c20 	rsble	ip, r2, #32
   8be30:	fa01 f102 	lsl.w	r1, r1, r2
   8be34:	fa20 fc0c 	lsr.w	ip, r0, ip
   8be38:	bfdc      	itt	le
   8be3a:	ea41 010c 	orrle.w	r1, r1, ip
   8be3e:	4090      	lslle	r0, r2
   8be40:	1ae4      	subs	r4, r4, r3
   8be42:	bfa2      	ittt	ge
   8be44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8be48:	4329      	orrge	r1, r5
   8be4a:	bd30      	popge	{r4, r5, pc}
   8be4c:	ea6f 0404 	mvn.w	r4, r4
   8be50:	3c1f      	subs	r4, #31
   8be52:	da1c      	bge.n	8be8e <__adddf3+0x1d2>
   8be54:	340c      	adds	r4, #12
   8be56:	dc0e      	bgt.n	8be76 <__adddf3+0x1ba>
   8be58:	f104 0414 	add.w	r4, r4, #20
   8be5c:	f1c4 0220 	rsb	r2, r4, #32
   8be60:	fa20 f004 	lsr.w	r0, r0, r4
   8be64:	fa01 f302 	lsl.w	r3, r1, r2
   8be68:	ea40 0003 	orr.w	r0, r0, r3
   8be6c:	fa21 f304 	lsr.w	r3, r1, r4
   8be70:	ea45 0103 	orr.w	r1, r5, r3
   8be74:	bd30      	pop	{r4, r5, pc}
   8be76:	f1c4 040c 	rsb	r4, r4, #12
   8be7a:	f1c4 0220 	rsb	r2, r4, #32
   8be7e:	fa20 f002 	lsr.w	r0, r0, r2
   8be82:	fa01 f304 	lsl.w	r3, r1, r4
   8be86:	ea40 0003 	orr.w	r0, r0, r3
   8be8a:	4629      	mov	r1, r5
   8be8c:	bd30      	pop	{r4, r5, pc}
   8be8e:	fa21 f004 	lsr.w	r0, r1, r4
   8be92:	4629      	mov	r1, r5
   8be94:	bd30      	pop	{r4, r5, pc}
   8be96:	f094 0f00 	teq	r4, #0
   8be9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8be9e:	bf06      	itte	eq
   8bea0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8bea4:	3401      	addeq	r4, #1
   8bea6:	3d01      	subne	r5, #1
   8bea8:	e74e      	b.n	8bd48 <__adddf3+0x8c>
   8beaa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8beae:	bf18      	it	ne
   8beb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8beb4:	d029      	beq.n	8bf0a <__adddf3+0x24e>
   8beb6:	ea94 0f05 	teq	r4, r5
   8beba:	bf08      	it	eq
   8bebc:	ea90 0f02 	teqeq	r0, r2
   8bec0:	d005      	beq.n	8bece <__adddf3+0x212>
   8bec2:	ea54 0c00 	orrs.w	ip, r4, r0
   8bec6:	bf04      	itt	eq
   8bec8:	4619      	moveq	r1, r3
   8beca:	4610      	moveq	r0, r2
   8becc:	bd30      	pop	{r4, r5, pc}
   8bece:	ea91 0f03 	teq	r1, r3
   8bed2:	bf1e      	ittt	ne
   8bed4:	2100      	movne	r1, #0
   8bed6:	2000      	movne	r0, #0
   8bed8:	bd30      	popne	{r4, r5, pc}
   8beda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8bede:	d105      	bne.n	8beec <__adddf3+0x230>
   8bee0:	0040      	lsls	r0, r0, #1
   8bee2:	4149      	adcs	r1, r1
   8bee4:	bf28      	it	cs
   8bee6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8beea:	bd30      	pop	{r4, r5, pc}
   8beec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8bef0:	bf3c      	itt	cc
   8bef2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8bef6:	bd30      	popcc	{r4, r5, pc}
   8bef8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8befc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8bf00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8bf04:	f04f 0000 	mov.w	r0, #0
   8bf08:	bd30      	pop	{r4, r5, pc}
   8bf0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8bf0e:	bf1a      	itte	ne
   8bf10:	4619      	movne	r1, r3
   8bf12:	4610      	movne	r0, r2
   8bf14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8bf18:	bf1c      	itt	ne
   8bf1a:	460b      	movne	r3, r1
   8bf1c:	4602      	movne	r2, r0
   8bf1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8bf22:	bf06      	itte	eq
   8bf24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8bf28:	ea91 0f03 	teqeq	r1, r3
   8bf2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8bf30:	bd30      	pop	{r4, r5, pc}
   8bf32:	bf00      	nop

0008bf34 <__aeabi_ui2d>:
   8bf34:	f090 0f00 	teq	r0, #0
   8bf38:	bf04      	itt	eq
   8bf3a:	2100      	moveq	r1, #0
   8bf3c:	4770      	bxeq	lr
   8bf3e:	b530      	push	{r4, r5, lr}
   8bf40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bf44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bf48:	f04f 0500 	mov.w	r5, #0
   8bf4c:	f04f 0100 	mov.w	r1, #0
   8bf50:	e750      	b.n	8bdf4 <__adddf3+0x138>
   8bf52:	bf00      	nop

0008bf54 <__aeabi_i2d>:
   8bf54:	f090 0f00 	teq	r0, #0
   8bf58:	bf04      	itt	eq
   8bf5a:	2100      	moveq	r1, #0
   8bf5c:	4770      	bxeq	lr
   8bf5e:	b530      	push	{r4, r5, lr}
   8bf60:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bf64:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bf68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8bf6c:	bf48      	it	mi
   8bf6e:	4240      	negmi	r0, r0
   8bf70:	f04f 0100 	mov.w	r1, #0
   8bf74:	e73e      	b.n	8bdf4 <__adddf3+0x138>
   8bf76:	bf00      	nop

0008bf78 <__aeabi_f2d>:
   8bf78:	0042      	lsls	r2, r0, #1
   8bf7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8bf7e:	ea4f 0131 	mov.w	r1, r1, rrx
   8bf82:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8bf86:	bf1f      	itttt	ne
   8bf88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8bf8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8bf90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8bf94:	4770      	bxne	lr
   8bf96:	f092 0f00 	teq	r2, #0
   8bf9a:	bf14      	ite	ne
   8bf9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8bfa0:	4770      	bxeq	lr
   8bfa2:	b530      	push	{r4, r5, lr}
   8bfa4:	f44f 7460 	mov.w	r4, #896	; 0x380
   8bfa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bfac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8bfb0:	e720      	b.n	8bdf4 <__adddf3+0x138>
   8bfb2:	bf00      	nop

0008bfb4 <__aeabi_ul2d>:
   8bfb4:	ea50 0201 	orrs.w	r2, r0, r1
   8bfb8:	bf08      	it	eq
   8bfba:	4770      	bxeq	lr
   8bfbc:	b530      	push	{r4, r5, lr}
   8bfbe:	f04f 0500 	mov.w	r5, #0
   8bfc2:	e00a      	b.n	8bfda <__aeabi_l2d+0x16>

0008bfc4 <__aeabi_l2d>:
   8bfc4:	ea50 0201 	orrs.w	r2, r0, r1
   8bfc8:	bf08      	it	eq
   8bfca:	4770      	bxeq	lr
   8bfcc:	b530      	push	{r4, r5, lr}
   8bfce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8bfd2:	d502      	bpl.n	8bfda <__aeabi_l2d+0x16>
   8bfd4:	4240      	negs	r0, r0
   8bfd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bfda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bfde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bfe2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8bfe6:	f43f aedc 	beq.w	8bda2 <__adddf3+0xe6>
   8bfea:	f04f 0203 	mov.w	r2, #3
   8bfee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8bff2:	bf18      	it	ne
   8bff4:	3203      	addne	r2, #3
   8bff6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8bffa:	bf18      	it	ne
   8bffc:	3203      	addne	r2, #3
   8bffe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c002:	f1c2 0320 	rsb	r3, r2, #32
   8c006:	fa00 fc03 	lsl.w	ip, r0, r3
   8c00a:	fa20 f002 	lsr.w	r0, r0, r2
   8c00e:	fa01 fe03 	lsl.w	lr, r1, r3
   8c012:	ea40 000e 	orr.w	r0, r0, lr
   8c016:	fa21 f102 	lsr.w	r1, r1, r2
   8c01a:	4414      	add	r4, r2
   8c01c:	e6c1      	b.n	8bda2 <__adddf3+0xe6>
   8c01e:	bf00      	nop

0008c020 <__aeabi_dmul>:
   8c020:	b570      	push	{r4, r5, r6, lr}
   8c022:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c026:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c02a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c02e:	bf1d      	ittte	ne
   8c030:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c034:	ea94 0f0c 	teqne	r4, ip
   8c038:	ea95 0f0c 	teqne	r5, ip
   8c03c:	f000 f8de 	bleq	8c1fc <__aeabi_dmul+0x1dc>
   8c040:	442c      	add	r4, r5
   8c042:	ea81 0603 	eor.w	r6, r1, r3
   8c046:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c04a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c04e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c052:	bf18      	it	ne
   8c054:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c060:	d038      	beq.n	8c0d4 <__aeabi_dmul+0xb4>
   8c062:	fba0 ce02 	umull	ip, lr, r0, r2
   8c066:	f04f 0500 	mov.w	r5, #0
   8c06a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c06e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c072:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c076:	f04f 0600 	mov.w	r6, #0
   8c07a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c07e:	f09c 0f00 	teq	ip, #0
   8c082:	bf18      	it	ne
   8c084:	f04e 0e01 	orrne.w	lr, lr, #1
   8c088:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c08c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c090:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c094:	d204      	bcs.n	8c0a0 <__aeabi_dmul+0x80>
   8c096:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c09a:	416d      	adcs	r5, r5
   8c09c:	eb46 0606 	adc.w	r6, r6, r6
   8c0a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c0a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c0a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c0ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c0b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c0b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c0b8:	bf88      	it	hi
   8c0ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c0be:	d81e      	bhi.n	8c0fe <__aeabi_dmul+0xde>
   8c0c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c0c4:	bf08      	it	eq
   8c0c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c0ca:	f150 0000 	adcs.w	r0, r0, #0
   8c0ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c0d2:	bd70      	pop	{r4, r5, r6, pc}
   8c0d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c0d8:	ea46 0101 	orr.w	r1, r6, r1
   8c0dc:	ea40 0002 	orr.w	r0, r0, r2
   8c0e0:	ea81 0103 	eor.w	r1, r1, r3
   8c0e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c0e8:	bfc2      	ittt	gt
   8c0ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c0ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c0f2:	bd70      	popgt	{r4, r5, r6, pc}
   8c0f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c0f8:	f04f 0e00 	mov.w	lr, #0
   8c0fc:	3c01      	subs	r4, #1
   8c0fe:	f300 80ab 	bgt.w	8c258 <__aeabi_dmul+0x238>
   8c102:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c106:	bfde      	ittt	le
   8c108:	2000      	movle	r0, #0
   8c10a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c10e:	bd70      	pople	{r4, r5, r6, pc}
   8c110:	f1c4 0400 	rsb	r4, r4, #0
   8c114:	3c20      	subs	r4, #32
   8c116:	da35      	bge.n	8c184 <__aeabi_dmul+0x164>
   8c118:	340c      	adds	r4, #12
   8c11a:	dc1b      	bgt.n	8c154 <__aeabi_dmul+0x134>
   8c11c:	f104 0414 	add.w	r4, r4, #20
   8c120:	f1c4 0520 	rsb	r5, r4, #32
   8c124:	fa00 f305 	lsl.w	r3, r0, r5
   8c128:	fa20 f004 	lsr.w	r0, r0, r4
   8c12c:	fa01 f205 	lsl.w	r2, r1, r5
   8c130:	ea40 0002 	orr.w	r0, r0, r2
   8c134:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c13c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c140:	fa21 f604 	lsr.w	r6, r1, r4
   8c144:	eb42 0106 	adc.w	r1, r2, r6
   8c148:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c14c:	bf08      	it	eq
   8c14e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c152:	bd70      	pop	{r4, r5, r6, pc}
   8c154:	f1c4 040c 	rsb	r4, r4, #12
   8c158:	f1c4 0520 	rsb	r5, r4, #32
   8c15c:	fa00 f304 	lsl.w	r3, r0, r4
   8c160:	fa20 f005 	lsr.w	r0, r0, r5
   8c164:	fa01 f204 	lsl.w	r2, r1, r4
   8c168:	ea40 0002 	orr.w	r0, r0, r2
   8c16c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c170:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c174:	f141 0100 	adc.w	r1, r1, #0
   8c178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c17c:	bf08      	it	eq
   8c17e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c182:	bd70      	pop	{r4, r5, r6, pc}
   8c184:	f1c4 0520 	rsb	r5, r4, #32
   8c188:	fa00 f205 	lsl.w	r2, r0, r5
   8c18c:	ea4e 0e02 	orr.w	lr, lr, r2
   8c190:	fa20 f304 	lsr.w	r3, r0, r4
   8c194:	fa01 f205 	lsl.w	r2, r1, r5
   8c198:	ea43 0302 	orr.w	r3, r3, r2
   8c19c:	fa21 f004 	lsr.w	r0, r1, r4
   8c1a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c1a4:	fa21 f204 	lsr.w	r2, r1, r4
   8c1a8:	ea20 0002 	bic.w	r0, r0, r2
   8c1ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c1b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c1b4:	bf08      	it	eq
   8c1b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c1ba:	bd70      	pop	{r4, r5, r6, pc}
   8c1bc:	f094 0f00 	teq	r4, #0
   8c1c0:	d10f      	bne.n	8c1e2 <__aeabi_dmul+0x1c2>
   8c1c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c1c6:	0040      	lsls	r0, r0, #1
   8c1c8:	eb41 0101 	adc.w	r1, r1, r1
   8c1cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c1d0:	bf08      	it	eq
   8c1d2:	3c01      	subeq	r4, #1
   8c1d4:	d0f7      	beq.n	8c1c6 <__aeabi_dmul+0x1a6>
   8c1d6:	ea41 0106 	orr.w	r1, r1, r6
   8c1da:	f095 0f00 	teq	r5, #0
   8c1de:	bf18      	it	ne
   8c1e0:	4770      	bxne	lr
   8c1e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c1e6:	0052      	lsls	r2, r2, #1
   8c1e8:	eb43 0303 	adc.w	r3, r3, r3
   8c1ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c1f0:	bf08      	it	eq
   8c1f2:	3d01      	subeq	r5, #1
   8c1f4:	d0f7      	beq.n	8c1e6 <__aeabi_dmul+0x1c6>
   8c1f6:	ea43 0306 	orr.w	r3, r3, r6
   8c1fa:	4770      	bx	lr
   8c1fc:	ea94 0f0c 	teq	r4, ip
   8c200:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c204:	bf18      	it	ne
   8c206:	ea95 0f0c 	teqne	r5, ip
   8c20a:	d00c      	beq.n	8c226 <__aeabi_dmul+0x206>
   8c20c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c210:	bf18      	it	ne
   8c212:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c216:	d1d1      	bne.n	8c1bc <__aeabi_dmul+0x19c>
   8c218:	ea81 0103 	eor.w	r1, r1, r3
   8c21c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c220:	f04f 0000 	mov.w	r0, #0
   8c224:	bd70      	pop	{r4, r5, r6, pc}
   8c226:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c22a:	bf06      	itte	eq
   8c22c:	4610      	moveq	r0, r2
   8c22e:	4619      	moveq	r1, r3
   8c230:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c234:	d019      	beq.n	8c26a <__aeabi_dmul+0x24a>
   8c236:	ea94 0f0c 	teq	r4, ip
   8c23a:	d102      	bne.n	8c242 <__aeabi_dmul+0x222>
   8c23c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c240:	d113      	bne.n	8c26a <__aeabi_dmul+0x24a>
   8c242:	ea95 0f0c 	teq	r5, ip
   8c246:	d105      	bne.n	8c254 <__aeabi_dmul+0x234>
   8c248:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c24c:	bf1c      	itt	ne
   8c24e:	4610      	movne	r0, r2
   8c250:	4619      	movne	r1, r3
   8c252:	d10a      	bne.n	8c26a <__aeabi_dmul+0x24a>
   8c254:	ea81 0103 	eor.w	r1, r1, r3
   8c258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c25c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c260:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c264:	f04f 0000 	mov.w	r0, #0
   8c268:	bd70      	pop	{r4, r5, r6, pc}
   8c26a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c26e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c272:	bd70      	pop	{r4, r5, r6, pc}

0008c274 <__aeabi_ddiv>:
   8c274:	b570      	push	{r4, r5, r6, lr}
   8c276:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c27a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c27e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c282:	bf1d      	ittte	ne
   8c284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c288:	ea94 0f0c 	teqne	r4, ip
   8c28c:	ea95 0f0c 	teqne	r5, ip
   8c290:	f000 f8a7 	bleq	8c3e2 <__aeabi_ddiv+0x16e>
   8c294:	eba4 0405 	sub.w	r4, r4, r5
   8c298:	ea81 0e03 	eor.w	lr, r1, r3
   8c29c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c2a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c2a4:	f000 8088 	beq.w	8c3b8 <__aeabi_ddiv+0x144>
   8c2a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c2ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c2b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c2b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c2b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c2bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c2c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c2c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c2c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c2cc:	429d      	cmp	r5, r3
   8c2ce:	bf08      	it	eq
   8c2d0:	4296      	cmpeq	r6, r2
   8c2d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c2d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c2da:	d202      	bcs.n	8c2e2 <__aeabi_ddiv+0x6e>
   8c2dc:	085b      	lsrs	r3, r3, #1
   8c2de:	ea4f 0232 	mov.w	r2, r2, rrx
   8c2e2:	1ab6      	subs	r6, r6, r2
   8c2e4:	eb65 0503 	sbc.w	r5, r5, r3
   8c2e8:	085b      	lsrs	r3, r3, #1
   8c2ea:	ea4f 0232 	mov.w	r2, r2, rrx
   8c2ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c2f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c2f6:	ebb6 0e02 	subs.w	lr, r6, r2
   8c2fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c2fe:	bf22      	ittt	cs
   8c300:	1ab6      	subcs	r6, r6, r2
   8c302:	4675      	movcs	r5, lr
   8c304:	ea40 000c 	orrcs.w	r0, r0, ip
   8c308:	085b      	lsrs	r3, r3, #1
   8c30a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c30e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c312:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c316:	bf22      	ittt	cs
   8c318:	1ab6      	subcs	r6, r6, r2
   8c31a:	4675      	movcs	r5, lr
   8c31c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c320:	085b      	lsrs	r3, r3, #1
   8c322:	ea4f 0232 	mov.w	r2, r2, rrx
   8c326:	ebb6 0e02 	subs.w	lr, r6, r2
   8c32a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c32e:	bf22      	ittt	cs
   8c330:	1ab6      	subcs	r6, r6, r2
   8c332:	4675      	movcs	r5, lr
   8c334:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c338:	085b      	lsrs	r3, r3, #1
   8c33a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c33e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c342:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c346:	bf22      	ittt	cs
   8c348:	1ab6      	subcs	r6, r6, r2
   8c34a:	4675      	movcs	r5, lr
   8c34c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c350:	ea55 0e06 	orrs.w	lr, r5, r6
   8c354:	d018      	beq.n	8c388 <__aeabi_ddiv+0x114>
   8c356:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c35a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c35e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c362:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c366:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c36a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c36e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c372:	d1c0      	bne.n	8c2f6 <__aeabi_ddiv+0x82>
   8c374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c378:	d10b      	bne.n	8c392 <__aeabi_ddiv+0x11e>
   8c37a:	ea41 0100 	orr.w	r1, r1, r0
   8c37e:	f04f 0000 	mov.w	r0, #0
   8c382:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c386:	e7b6      	b.n	8c2f6 <__aeabi_ddiv+0x82>
   8c388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c38c:	bf04      	itt	eq
   8c38e:	4301      	orreq	r1, r0
   8c390:	2000      	moveq	r0, #0
   8c392:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c396:	bf88      	it	hi
   8c398:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c39c:	f63f aeaf 	bhi.w	8c0fe <__aeabi_dmul+0xde>
   8c3a0:	ebb5 0c03 	subs.w	ip, r5, r3
   8c3a4:	bf04      	itt	eq
   8c3a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c3aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c3ae:	f150 0000 	adcs.w	r0, r0, #0
   8c3b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c3b6:	bd70      	pop	{r4, r5, r6, pc}
   8c3b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c3bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c3c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c3c4:	bfc2      	ittt	gt
   8c3c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c3ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c3ce:	bd70      	popgt	{r4, r5, r6, pc}
   8c3d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c3d4:	f04f 0e00 	mov.w	lr, #0
   8c3d8:	3c01      	subs	r4, #1
   8c3da:	e690      	b.n	8c0fe <__aeabi_dmul+0xde>
   8c3dc:	ea45 0e06 	orr.w	lr, r5, r6
   8c3e0:	e68d      	b.n	8c0fe <__aeabi_dmul+0xde>
   8c3e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c3e6:	ea94 0f0c 	teq	r4, ip
   8c3ea:	bf08      	it	eq
   8c3ec:	ea95 0f0c 	teqeq	r5, ip
   8c3f0:	f43f af3b 	beq.w	8c26a <__aeabi_dmul+0x24a>
   8c3f4:	ea94 0f0c 	teq	r4, ip
   8c3f8:	d10a      	bne.n	8c410 <__aeabi_ddiv+0x19c>
   8c3fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c3fe:	f47f af34 	bne.w	8c26a <__aeabi_dmul+0x24a>
   8c402:	ea95 0f0c 	teq	r5, ip
   8c406:	f47f af25 	bne.w	8c254 <__aeabi_dmul+0x234>
   8c40a:	4610      	mov	r0, r2
   8c40c:	4619      	mov	r1, r3
   8c40e:	e72c      	b.n	8c26a <__aeabi_dmul+0x24a>
   8c410:	ea95 0f0c 	teq	r5, ip
   8c414:	d106      	bne.n	8c424 <__aeabi_ddiv+0x1b0>
   8c416:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c41a:	f43f aefd 	beq.w	8c218 <__aeabi_dmul+0x1f8>
   8c41e:	4610      	mov	r0, r2
   8c420:	4619      	mov	r1, r3
   8c422:	e722      	b.n	8c26a <__aeabi_dmul+0x24a>
   8c424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c428:	bf18      	it	ne
   8c42a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c42e:	f47f aec5 	bne.w	8c1bc <__aeabi_dmul+0x19c>
   8c432:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c436:	f47f af0d 	bne.w	8c254 <__aeabi_dmul+0x234>
   8c43a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c43e:	f47f aeeb 	bne.w	8c218 <__aeabi_dmul+0x1f8>
   8c442:	e712      	b.n	8c26a <__aeabi_dmul+0x24a>

0008c444 <__gedf2>:
   8c444:	f04f 3cff 	mov.w	ip, #4294967295
   8c448:	e006      	b.n	8c458 <__cmpdf2+0x4>
   8c44a:	bf00      	nop

0008c44c <__ledf2>:
   8c44c:	f04f 0c01 	mov.w	ip, #1
   8c450:	e002      	b.n	8c458 <__cmpdf2+0x4>
   8c452:	bf00      	nop

0008c454 <__cmpdf2>:
   8c454:	f04f 0c01 	mov.w	ip, #1
   8c458:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c45c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c468:	bf18      	it	ne
   8c46a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c46e:	d01b      	beq.n	8c4a8 <__cmpdf2+0x54>
   8c470:	b001      	add	sp, #4
   8c472:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c476:	bf0c      	ite	eq
   8c478:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c47c:	ea91 0f03 	teqne	r1, r3
   8c480:	bf02      	ittt	eq
   8c482:	ea90 0f02 	teqeq	r0, r2
   8c486:	2000      	moveq	r0, #0
   8c488:	4770      	bxeq	lr
   8c48a:	f110 0f00 	cmn.w	r0, #0
   8c48e:	ea91 0f03 	teq	r1, r3
   8c492:	bf58      	it	pl
   8c494:	4299      	cmppl	r1, r3
   8c496:	bf08      	it	eq
   8c498:	4290      	cmpeq	r0, r2
   8c49a:	bf2c      	ite	cs
   8c49c:	17d8      	asrcs	r0, r3, #31
   8c49e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c4a2:	f040 0001 	orr.w	r0, r0, #1
   8c4a6:	4770      	bx	lr
   8c4a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c4ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c4b0:	d102      	bne.n	8c4b8 <__cmpdf2+0x64>
   8c4b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c4b6:	d107      	bne.n	8c4c8 <__cmpdf2+0x74>
   8c4b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c4bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c4c0:	d1d6      	bne.n	8c470 <__cmpdf2+0x1c>
   8c4c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c4c6:	d0d3      	beq.n	8c470 <__cmpdf2+0x1c>
   8c4c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c4cc:	4770      	bx	lr
   8c4ce:	bf00      	nop

0008c4d0 <__aeabi_cdrcmple>:
   8c4d0:	4684      	mov	ip, r0
   8c4d2:	4610      	mov	r0, r2
   8c4d4:	4662      	mov	r2, ip
   8c4d6:	468c      	mov	ip, r1
   8c4d8:	4619      	mov	r1, r3
   8c4da:	4663      	mov	r3, ip
   8c4dc:	e000      	b.n	8c4e0 <__aeabi_cdcmpeq>
   8c4de:	bf00      	nop

0008c4e0 <__aeabi_cdcmpeq>:
   8c4e0:	b501      	push	{r0, lr}
   8c4e2:	f7ff ffb7 	bl	8c454 <__cmpdf2>
   8c4e6:	2800      	cmp	r0, #0
   8c4e8:	bf48      	it	mi
   8c4ea:	f110 0f00 	cmnmi.w	r0, #0
   8c4ee:	bd01      	pop	{r0, pc}

0008c4f0 <__aeabi_dcmpeq>:
   8c4f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c4f4:	f7ff fff4 	bl	8c4e0 <__aeabi_cdcmpeq>
   8c4f8:	bf0c      	ite	eq
   8c4fa:	2001      	moveq	r0, #1
   8c4fc:	2000      	movne	r0, #0
   8c4fe:	f85d fb08 	ldr.w	pc, [sp], #8
   8c502:	bf00      	nop

0008c504 <__aeabi_dcmplt>:
   8c504:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c508:	f7ff ffea 	bl	8c4e0 <__aeabi_cdcmpeq>
   8c50c:	bf34      	ite	cc
   8c50e:	2001      	movcc	r0, #1
   8c510:	2000      	movcs	r0, #0
   8c512:	f85d fb08 	ldr.w	pc, [sp], #8
   8c516:	bf00      	nop

0008c518 <__aeabi_dcmple>:
   8c518:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c51c:	f7ff ffe0 	bl	8c4e0 <__aeabi_cdcmpeq>
   8c520:	bf94      	ite	ls
   8c522:	2001      	movls	r0, #1
   8c524:	2000      	movhi	r0, #0
   8c526:	f85d fb08 	ldr.w	pc, [sp], #8
   8c52a:	bf00      	nop

0008c52c <__aeabi_dcmpge>:
   8c52c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c530:	f7ff ffce 	bl	8c4d0 <__aeabi_cdrcmple>
   8c534:	bf94      	ite	ls
   8c536:	2001      	movls	r0, #1
   8c538:	2000      	movhi	r0, #0
   8c53a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c53e:	bf00      	nop

0008c540 <__aeabi_dcmpgt>:
   8c540:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c544:	f7ff ffc4 	bl	8c4d0 <__aeabi_cdrcmple>
   8c548:	bf34      	ite	cc
   8c54a:	2001      	movcc	r0, #1
   8c54c:	2000      	movcs	r0, #0
   8c54e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c552:	bf00      	nop

0008c554 <__aeabi_dcmpun>:
   8c554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c55c:	d102      	bne.n	8c564 <__aeabi_dcmpun+0x10>
   8c55e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c562:	d10a      	bne.n	8c57a <__aeabi_dcmpun+0x26>
   8c564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c56c:	d102      	bne.n	8c574 <__aeabi_dcmpun+0x20>
   8c56e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c572:	d102      	bne.n	8c57a <__aeabi_dcmpun+0x26>
   8c574:	f04f 0000 	mov.w	r0, #0
   8c578:	4770      	bx	lr
   8c57a:	f04f 0001 	mov.w	r0, #1
   8c57e:	4770      	bx	lr

0008c580 <__aeabi_d2iz>:
   8c580:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c584:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c588:	d215      	bcs.n	8c5b6 <__aeabi_d2iz+0x36>
   8c58a:	d511      	bpl.n	8c5b0 <__aeabi_d2iz+0x30>
   8c58c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c590:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c594:	d912      	bls.n	8c5bc <__aeabi_d2iz+0x3c>
   8c596:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c59a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c59e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c5a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c5a6:	fa23 f002 	lsr.w	r0, r3, r2
   8c5aa:	bf18      	it	ne
   8c5ac:	4240      	negne	r0, r0
   8c5ae:	4770      	bx	lr
   8c5b0:	f04f 0000 	mov.w	r0, #0
   8c5b4:	4770      	bx	lr
   8c5b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c5ba:	d105      	bne.n	8c5c8 <__aeabi_d2iz+0x48>
   8c5bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c5c0:	bf08      	it	eq
   8c5c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c5c6:	4770      	bx	lr
   8c5c8:	f04f 0000 	mov.w	r0, #0
   8c5cc:	4770      	bx	lr
   8c5ce:	bf00      	nop

0008c5d0 <BUILD_DATE>:
   8c5d0:	6f4e 2076 3820 3220 3230 0031               Nov  8 2021.

0008c5dc <BUILD_TIME>:
   8c5dc:	3531 333a 3a35 3933 0000 0000 5743 494c     15:35:39....CWLI
   8c5ec:	4554 415f 5256 5349 0050 0000 0000 0000     TE_AVRISP.......
   8c5fc:	0000 0000 aa00 aaaa aaaa aaaa eeaa eeee     ................
   8c60c:	eeee eeee feee ffff ffff ffff ffff ffff     ................
   8c61c:	7fff dfbf f7ef fdfb 7efc dfbf f7ef fdfb     .........~......
   8c62c:	007e 0000 3025 7838 0000 0000 6f4e 2076     ~...%08x....Nov 
   8c63c:	3820 3220 3230 0031 3531 333a 3a35 3134      8 2021.15:35:41
   8c64c:	0000 0000 6843 7069 6857 7369 6570 6572     ....ChipWhispere
   8c65c:	2d72 694c 6574 4f20 6c6e 6e69 2e65 4620     r-Lite Online. F
   8c66c:	7269 776d 7261 2065 7562 6c69 3a64 2520     irmware build: %
   8c67c:	2f73 7325 000a 0000 6553 6972 6c61 6e20     s/%s....Serial n
   8c68c:	6d75 6562 3a72 2520 0a73 0000 6553 7474     umber: %s...Sett
   8c69c:	6e69 2067 7075 4620 4750 2041 6f43 6d6d     ing up FPGA Comm
   8c6ac:	6e75 6369 7461 6f69 0a6e 0000 7645 6e65     unication...Even
   8c6bc:	2074 6f4c 706f 4520 746e 7265 6465 202c     t Loop Entered, 
   8c6cc:	6177 7469 6e69 2e67 2e2e 000a               waiting.....

0008c6d8 <_global_impure_ptr>:
   8c6d8:	0ab0 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   8c6e8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   8c6f8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   8c708:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   8c718:	296c 0000 0030 0000                         l)..0...

0008c720 <blanks.7223>:
   8c720:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c730 <zeroes.7224>:
   8c730:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008c740 <blanks.7217>:
   8c740:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008c750 <zeroes.7218>:
   8c750:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8c760:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   8c770:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0008c780 <__mprec_bigtens>:
   8c780:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8c790:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8c7a0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008c7a8 <__mprec_tens>:
   8c7a8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8c7b8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8c7c8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8c7d8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8c7e8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8c7f8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8c808:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8c818:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8c828:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8c838:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8c848:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8c858:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8c868:	9db4 79d9 7843 44ea                         ...yCx.D

0008c870 <p05.6055>:
   8c870:	0005 0000 0019 0000 007d 0000               ........}...

0008c87c <_ctype_>:
   8c87c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8c88c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8c89c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8c8ac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8c8bc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8c8cc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8c8dc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8c8ec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8c8fc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008c980 <_init>:
   8c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c982:	bf00      	nop
   8c984:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c986:	bc08      	pop	{r3}
   8c988:	469e      	mov	lr, r3
   8c98a:	4770      	bx	lr

0008c98c <__init_array_start>:
   8c98c:	00088cb9 	.word	0x00088cb9

0008c990 <__frame_dummy_init_array_entry>:
   8c990:	000800e1                                ....

0008c994 <_fini>:
   8c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c996:	bf00      	nop
   8c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8c99a:	bc08      	pop	{r3}
   8c99c:	469e      	mov	lr, r3
   8c99e:	4770      	bx	lr

0008c9a0 <__fini_array_start>:
   8c9a0:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	20000a80 	.word	0x20000a80

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c5 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	0008050d 000803b5 00080139 0008013d     ........9...=...
200001d0:	000803a5                                ....

200001d4 <mpsse_udi_apis>:
200001d4:	20000a68 20000a68                       h.. h.. 

200001dc <udc_config>:
200001dc:	20000394 200001fc 20000394 200003a8     ... ... ... ... 
200001ec:	200001f4 00000000                       ... ....

200001f4 <udc_config_hs>:
200001f4:	200002cc 200003b4                       ... ... 

200001fc <udc_config_lsfs>:
200001fc:	20000204 200003b4                       ... ... 

20000204 <udc_desc_fs>:
20000204:	00620209 80000103 000409fa ffff0200     ..b.............
20000214:	050700ff 00400281 02050700 00004002     ......@......@..
20000224:	02010b08 00010202 00010409 01020201     ................
20000234:	00240500 24040110 24050202 05020106     ..$....$...$....
20000244:	02030124 03830507 09100040 02000204     $.......@.......
20000254:	0000000a 02850507 07000040 40020605     ........@......@
20000264:	00000000                                ....

20000268 <udc_desc_fs_mpsse>:
20000268:	00370209 80000102 000409fa ffff0200     ..7.............
20000278:	050700ff 00400281 02050700 00004002     ......@......@..
20000288:	00010409 ffffff02 85050700 00020002     ................
20000298:	02060507 00000200 00000000 00000000     ................
	...

200002cc <udc_desc_hs>:
200002cc:	00620209 80000103 000409fa ffff0200     ..b.............
200002dc:	050700ff 02000281 02050700 00020002     ................
200002ec:	02010b08 00010202 00010409 01020201     ................
200002fc:	00240500 24040110 24050202 05020106     ..$....$...$....
2000030c:	02030124 03830507 09100040 02000204     $.......@.......
2000031c:	0000000a 02850507 07000200 00020605     ................
2000032c:	00000002                                ....

20000330 <udc_desc_hs_mpsse>:
20000330:	00370209 80000102 000409fa ffff0200     ..7.............
20000340:	050700ff 02000281 02050700 00020002     ................
20000350:	00010409 ffffff02 85050700 00020002     ................
20000360:	02060507 00000200 00000000 00000000     ................
	...

20000394 <udc_device_desc>:
20000394:	02000112 40000000 ace22b3e 02010100     .......@>+......
200003a4:	00000103                                ....

200003a8 <udc_device_qual>:
200003a8:	0200060a 40000000 00000001              .......@....

200003b4 <udi_apis>:
200003b4:	20000a68 200001ac 200001c0              h.. ... ... 

200003c0 <avrispmkIIfreqs>:
200003c0:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200003d0:	0007a120 0003d090 0001e848 00017882      .......H....x..
200003e0:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
200003f0:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000400:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000410:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000420:	000099f1 00009586 00008d68 0000861f     ........h.......
20000430:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000440:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000450:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000460:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
20000470:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
20000480:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
20000490:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200004a0:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200004b0:	00001be1 00001a99 0000194e 00001822     ........N..."...
200004c0:	000016f7 000015e7 000014ef 000013e5     ................
200004d0:	00001306 00001219 00001142 00001071     ........B...q...
200004e0:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
200004f0:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000500:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000510:	000008d1 00000868 00000804 000007a4     ....h...........
20000520:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000530:	00000603 000005bc 00000576 00000535     ........v...5...
20000540:	000004f7 000004bc 00000483 0000044d     ............M...
20000550:	00000419 000003e8 000003b9 0000038d     ................
20000560:	00000362 0000033a 00000313 000002ee     b...:...........
20000570:	000002cb 000002aa 0000028a 0000026b     ............k...
20000580:	0000024e 00000233 00000218 000001ff     N...3...........
20000590:	000001e7 000001d1 000001bb 000001a6     ................
200005a0:	00000192 00000180 0000016e 0000015d     ........n...]...
200005b0:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200005c0:	00000112 00000105 000000f9 000000ee     ................
200005d0:	000000e2 000000d8 000000ce 000000c4     ................
200005e0:	000000bb 000000b2 000000aa 000000a2     ................
200005f0:	0000009a 00000093 0000008c 00000086     ................
20000600:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000610:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000620:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000630:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000640:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000650 <main_b_vendor_enable>:
20000650:	00000101                                         .

20000651 <MPSSE_TRANSACTION_LOCK>:
20000651:	00000001                                         ...

20000654 <usart0_driver>:
20000654:	40090000 00000000 00000000 00000000     ...@............
	...
200008f0:	00000009                                ....

200008f4 <MS_BOS_PACKET>:
200008f4:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000904:	65d29c4c 8a649e9d 0300009f 0100aa06     L..e..d.........
20000914:	00000000                                ....

20000918 <MS_OS_DESC>:
20000918:	0000000a 06030000 000800aa 00000002     ................
20000928:	001400a0 49570003 4253554e 00000000     ......WINUSB....
20000938:	00000000 00840000 00070004 0044002a     ............*.D.
20000948:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
20000958:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
20000968:	00440049 00000073 007b0050 00410030     I.D.s...P.{.0.A.
20000978:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
20000988:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
20000998:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
200009a8:	00320036 00410030 00450043 00420032     6.2.0.A.C.E.2.B.
200009b8:	00450033 0000007d 00000000              3.E.}.......

200009c4 <udc_string_desc>:
200009c4:	00000300 00000000 00000000 00000000     ................
	...

20000a08 <udc_string_desc_languageid>:
20000a08:	04090304                                ....

20000a0c <udc_string_manufacturer_name>:
20000a0c:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000a1c:	636e4920 0000002e                        Inc....

20000a24 <udc_string_product_name>:
20000a24:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000a34:	00006574                                te..

20000a38 <xram>:
20000a38:	60000000                                ...`

20000a3c <ParameterTable>:
20000a3c:	81000180 01900001 01019100 94170192     ................
20000a4c:	03982101 01039e06 a40001a1 00200003              .!............

20000a5a <XPROG_Param_EEPageSize>:
20000a5a:	01c00020                                          .

20000a5c <XPROG_Param_NVMBase>:
20000a5c:	010001c0                                ....

20000a60 <XPROG_Param_NVMCMDRegAddr>:
20000a60:	00003233                                         3

20000a61 <XPROG_Param_NVMCSRRegAddr>:
20000a61:	f4000032                                         2..

20000a64 <defaultTimeoutTicks>:
20000a64:	000001f4                                ....

20000a68 <udi_api_vendor>:
20000a68:	00083dad 00083dd1 00083de9 00083da1     .=...=...=...=..
20000a78:	00000000                                ....

20000a7c <g_interrupt_enabled>:
20000a7c:	00000001                                ....

20000a80 <SystemCoreClock>:
20000a80:	003d0900                                ..=.

20000a84 <usb_serial_number>:
20000a84:	30303030 30303030 30303030 44414544     000000000000DEAD
20000a94:	46454542 00000000 00000000 00000000     BEEF............
20000aa4:	00000000                                ....

20000aa8 <_impure_ptr>:
20000aa8:	20000ab0 00000000                       ... ....

20000ab0 <impure_data>:
20000ab0:	00000000 20000d9c 20000e04 20000e6c     ....... ... l.. 
	...
20000b58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000b68:	0005deec 0000000b 00000000 00000000     ................
	...

20000ed8 <__atexit_recursive_mutex>:
20000ed8:	200029c0                                .). 

20000edc <__global_locale>:
20000edc:	00000043 00000000 00000000 00000000     C...............
	...
20000efc:	00000043 00000000 00000000 00000000     C...............
	...
20000f1c:	00000043 00000000 00000000 00000000     C...............
	...
20000f3c:	00000043 00000000 00000000 00000000     C...............
	...
20000f5c:	00000043 00000000 00000000 00000000     C...............
	...
20000f7c:	00000043 00000000 00000000 00000000     C...............
	...
20000f9c:	00000043 00000000 00000000 00000000     C...............
	...
20000fbc:	0008b9bd 0008ac15 00000000 0008c87c     ............|...
20000fcc:	0008c77c 0008c64c 0008c64c 0008c64c     |...L...L...L...
20000fdc:	0008c64c 0008c64c 0008c64c 0008c64c     L...L...L...L...
20000fec:	0008c64c 0008c64c ffffffff ffffffff     L...L...........
20000ffc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20001024:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20001048 <__malloc_av_>:
	...
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 
200010c0:	200010b8 200010b8 200010c0 200010c0     ... ... ... ... 
200010d0:	200010c8 200010c8 200010d0 200010d0     ... ... ... ... 
200010e0:	200010d8 200010d8 200010e0 200010e0     ... ... ... ... 
200010f0:	200010e8 200010e8 200010f0 200010f0     ... ... ... ... 
20001100:	200010f8 200010f8 20001100 20001100     ... ... ... ... 
20001110:	20001108 20001108 20001110 20001110     ... ... ... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 
20001350:	20001348 20001348 20001350 20001350     H.. H.. P.. P.. 
20001360:	20001358 20001358 20001360 20001360     X.. X.. `.. `.. 
20001370:	20001368 20001368 20001370 20001370     h.. h.. p.. p.. 
20001380:	20001378 20001378 20001380 20001380     x.. x.. ... ... 
20001390:	20001388 20001388 20001390 20001390     ... ... ... ... 
200013a0:	20001398 20001398 200013a0 200013a0     ... ... ... ... 
200013b0:	200013a8 200013a8 200013b0 200013b0     ... ... ... ... 
200013c0:	200013b8 200013b8 200013c0 200013c0     ... ... ... ... 
200013d0:	200013c8 200013c8 200013d0 200013d0     ... ... ... ... 
200013e0:	200013d8 200013d8 200013e0 200013e0     ... ... ... ... 
200013f0:	200013e8 200013e8 200013f0 200013f0     ... ... ... ... 
20001400:	200013f8 200013f8 20001400 20001400     ... ... ... ... 
20001410:	20001408 20001408 20001410 20001410     ... ... ... ... 
20001420:	20001418 20001418 20001420 20001420     ... ...  ..  .. 
20001430:	20001428 20001428 20001430 20001430     (.. (.. 0.. 0.. 
20001440:	20001438 20001438 20001440 20001440     8.. 8.. @.. @.. 

20001450 <__malloc_sbrk_base>:
20001450:	ffffffff                                ....

20001454 <__malloc_trim_threshold>:
20001454:	00020000                                ....
