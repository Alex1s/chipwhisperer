
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d1ec  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d1ec  0008d1ec  0001d1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000010c0  20000000  0008d1f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001b10  200010c0  0008e2b4  000210c0  2**2
                  ALLOC
  4 .stack        00002000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  000210e9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003db3b  00000000  00000000  00021135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000097ce  00000000  00000000  0005ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000c736  00000000  00000000  0006843e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000014f0  00000000  00000000  00074b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001e18  00000000  00000000  00076064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00021fe4  00000000  00000000  00077e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00031d96  00000000  00000000  00099e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00060456  00000000  00000000  000cbbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004708  00000000  00000000  0012c04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 20 08 20 1d 58 08 00 1b 58 08 00 1b 58 08 00     . . .X...X...X..
   80010:	1b 58 08 00 1b 58 08 00 1b 58 08 00 00 00 00 00     .X...X...X......
	...
   8002c:	1b 58 08 00 1b 58 08 00 00 00 00 00 1b 58 08 00     .X...X.......X..
   8003c:	1b 58 08 00 1b 58 08 00 1b 58 08 00 1b 58 08 00     .X...X...X...X..
   8004c:	1b 58 08 00 1b 58 08 00 1b 58 08 00 1b 58 08 00     .X...X...X...X..
   8005c:	1b 58 08 00 1b 58 08 00 1b 58 08 00 15 3f 08 00     .X...X...X...?..
   8006c:	29 3f 08 00 1b 58 08 00 41 20 08 00 61 20 08 00     )?...X..A ..a ..
   8007c:	81 20 08 00 1b 58 08 00 1b 58 08 00 1b 58 08 00     . ...X...X...X..
   8008c:	1b 58 08 00 1b 58 08 00 1b 58 08 00 75 2e 08 00     .X...X...X..u...
   8009c:	1b 58 08 00 1b 58 08 00 1b 58 08 00 1b 58 08 00     .X...X...X...X..
   800ac:	1b 58 08 00 1b 58 08 00 c1 46 08 00 1b 58 08 00     .X...X...F...X..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200010c0 	.word	0x200010c0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d1f4 	.word	0x0008d1f4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200010c4 	.word	0x200010c4
   800f8:	0008d1f4 	.word	0x0008d1f4

000800fc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   800fc:	4a02      	ldr	r2, [pc, #8]	; (80108 <udi_cdc_comm_disable+0xc>)
   800fe:	7813      	ldrb	r3, [r2, #0]
   80100:	3b01      	subs	r3, #1
   80102:	b2db      	uxtb	r3, r3
   80104:	7013      	strb	r3, [r2, #0]
}
   80106:	4770      	bx	lr
   80108:	200010e7 	.word	0x200010e7

0008010c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   8010c:	2000      	movs	r0, #0
   8010e:	4770      	bx	lr

00080110 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80110:	2000      	movs	r0, #0
   80112:	4770      	bx	lr

00080114 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80114:	4a1e      	ldr	r2, [pc, #120]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80116:	7813      	ldrb	r3, [r2, #0]
   80118:	f992 2000 	ldrsb.w	r2, [r2]
   8011c:	2a00      	cmp	r2, #0
   8011e:	db05      	blt.n	8012c <udi_cdc_comm_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80120:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80124:	2b20      	cmp	r3, #32
   80126:	d01a      	beq.n	8015e <udi_cdc_comm_setup+0x4a>
	return false;  // request Not supported
   80128:	2000      	movs	r0, #0
   8012a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8012c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80130:	2b20      	cmp	r3, #32
   80132:	d001      	beq.n	80138 <udi_cdc_comm_setup+0x24>
	return false;  // request Not supported
   80134:	2000      	movs	r0, #0
   80136:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80138:	4b15      	ldr	r3, [pc, #84]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8013a:	785b      	ldrb	r3, [r3, #1]
   8013c:	2b21      	cmp	r3, #33	; 0x21
   8013e:	d001      	beq.n	80144 <udi_cdc_comm_setup+0x30>
	return false;  // request Not supported
   80140:	2000      	movs	r0, #0
   80142:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80144:	4b12      	ldr	r3, [pc, #72]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80146:	88db      	ldrh	r3, [r3, #6]
   80148:	2b07      	cmp	r3, #7
   8014a:	d001      	beq.n	80150 <udi_cdc_comm_setup+0x3c>
					return false; // Error for USB host
   8014c:	2000      	movs	r0, #0
   8014e:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80150:	4b0f      	ldr	r3, [pc, #60]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80152:	4a10      	ldr	r2, [pc, #64]	; (80194 <udi_cdc_comm_setup+0x80>)
   80154:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80156:	2207      	movs	r2, #7
   80158:	819a      	strh	r2, [r3, #12]
				return true;
   8015a:	2001      	movs	r0, #1
   8015c:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   8015e:	4b0c      	ldr	r3, [pc, #48]	; (80190 <udi_cdc_comm_setup+0x7c>)
   80160:	7858      	ldrb	r0, [r3, #1]
   80162:	2820      	cmp	r0, #32
   80164:	d004      	beq.n	80170 <udi_cdc_comm_setup+0x5c>
   80166:	2822      	cmp	r0, #34	; 0x22
   80168:	bf14      	ite	ne
   8016a:	2000      	movne	r0, #0
   8016c:	2001      	moveq	r0, #1
   8016e:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80170:	4b07      	ldr	r3, [pc, #28]	; (80190 <udi_cdc_comm_setup+0x7c>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80172:	88db      	ldrh	r3, [r3, #6]
   80174:	2b07      	cmp	r3, #7
   80176:	d001      	beq.n	8017c <udi_cdc_comm_setup+0x68>
					return false; // Error for USB host
   80178:	2000      	movs	r0, #0
}
   8017a:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   8017c:	4b04      	ldr	r3, [pc, #16]	; (80190 <udi_cdc_comm_setup+0x7c>)
   8017e:	4a06      	ldr	r2, [pc, #24]	; (80198 <udi_cdc_comm_setup+0x84>)
   80180:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   80182:	4a04      	ldr	r2, [pc, #16]	; (80194 <udi_cdc_comm_setup+0x80>)
   80184:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   80186:	2207      	movs	r2, #7
   80188:	819a      	strh	r2, [r3, #12]
				return true;
   8018a:	2001      	movs	r0, #1
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	20002b90 	.word	0x20002b90
   80194:	200010e0 	.word	0x200010e0
   80198:	000803b1 	.word	0x000803b1

0008019c <udi_cdc_comm_enable>:
{
   8019c:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   8019e:	2400      	movs	r4, #0
   801a0:	4b11      	ldr	r3, [pc, #68]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801a2:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801a4:	4b11      	ldr	r3, [pc, #68]	; (801ec <udi_cdc_comm_enable+0x50>)
   801a6:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801a8:	4b11      	ldr	r3, [pc, #68]	; (801f0 <udi_cdc_comm_enable+0x54>)
   801aa:	22a1      	movs	r2, #161	; 0xa1
   801ac:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801ae:	2220      	movs	r2, #32
   801b0:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801b2:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801b4:	2201      	movs	r2, #1
   801b6:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801b8:	2202      	movs	r2, #2
   801ba:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801bc:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <udi_cdc_comm_enable+0x58>)
   801c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801c4:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801c6:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801c8:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801ca:	2308      	movs	r3, #8
   801cc:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801ce:	4620      	mov	r0, r4
   801d0:	4b09      	ldr	r3, [pc, #36]	; (801f8 <udi_cdc_comm_enable+0x5c>)
   801d2:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801d4:	4620      	mov	r0, r4
   801d6:	4b09      	ldr	r3, [pc, #36]	; (801fc <udi_cdc_comm_enable+0x60>)
   801d8:	4798      	blx	r3
   801da:	b120      	cbz	r0, 801e6 <udi_cdc_comm_enable+0x4a>
	udi_cdc_nb_comm_enabled++;
   801dc:	4a02      	ldr	r2, [pc, #8]	; (801e8 <udi_cdc_comm_enable+0x4c>)
   801de:	7813      	ldrb	r3, [r2, #0]
   801e0:	3301      	adds	r3, #1
   801e2:	b2db      	uxtb	r3, r3
   801e4:	7013      	strb	r3, [r2, #0]
}
   801e6:	bd10      	pop	{r4, pc}
   801e8:	200010e7 	.word	0x200010e7
   801ec:	200014fc 	.word	0x200014fc
   801f0:	20001914 	.word	0x20001914
   801f4:	200010e0 	.word	0x200010e0
   801f8:	000815f1 	.word	0x000815f1
   801fc:	0008154d 	.word	0x0008154d

00080200 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   80200:	4b42      	ldr	r3, [pc, #264]	; (8030c <udi_cdc_tx_send+0x10c>)
   80202:	781b      	ldrb	r3, [r3, #0]
   80204:	b103      	cbz	r3, 80208 <udi_cdc_tx_send+0x8>
   80206:	4770      	bx	lr
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8020c:	4b40      	ldr	r3, [pc, #256]	; (80310 <udi_cdc_tx_send+0x110>)
   8020e:	4798      	blx	r3
   80210:	2800      	cmp	r0, #0
   80212:	d045      	beq.n	802a0 <udi_cdc_tx_send+0xa0>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80214:	4b3f      	ldr	r3, [pc, #252]	; (80314 <udi_cdc_tx_send+0x114>)
   80216:	881c      	ldrh	r4, [r3, #0]
   80218:	4b3f      	ldr	r3, [pc, #252]	; (80318 <udi_cdc_tx_send+0x118>)
   8021a:	4798      	blx	r3
   8021c:	4284      	cmp	r4, r0
   8021e:	d03d      	beq.n	8029c <udi_cdc_tx_send+0x9c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80220:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80224:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80226:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8022a:	4b3c      	ldr	r3, [pc, #240]	; (8031c <udi_cdc_tx_send+0x11c>)
   8022c:	2200      	movs	r2, #0
   8022e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80230:	4b3b      	ldr	r3, [pc, #236]	; (80320 <udi_cdc_tx_send+0x120>)
   80232:	781b      	ldrb	r3, [r3, #0]
   80234:	b2dc      	uxtb	r4, r3
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80236:	4a3b      	ldr	r2, [pc, #236]	; (80324 <udi_cdc_tx_send+0x124>)
   80238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   8023c:	2b00      	cmp	r3, #0
   8023e:	d036      	beq.n	802ae <udi_cdc_tx_send+0xae>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   80240:	4b39      	ldr	r3, [pc, #228]	; (80328 <udi_cdc_tx_send+0x128>)
   80242:	2200      	movs	r2, #0
   80244:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80246:	4b39      	ldr	r3, [pc, #228]	; (8032c <udi_cdc_tx_send+0x12c>)
   80248:	781b      	ldrb	r3, [r3, #0]
   8024a:	2b00      	cmp	r3, #0
   8024c:	d14c      	bne.n	802e8 <udi_cdc_tx_send+0xe8>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8024e:	fab4 f384 	clz	r3, r4
   80252:	095b      	lsrs	r3, r3, #5
   80254:	4a32      	ldr	r2, [pc, #200]	; (80320 <udi_cdc_tx_send+0x120>)
   80256:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80258:	4b2c      	ldr	r3, [pc, #176]	; (8030c <udi_cdc_tx_send+0x10c>)
   8025a:	2201      	movs	r2, #1
   8025c:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8025e:	b925      	cbnz	r5, 8026a <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   80260:	4b2e      	ldr	r3, [pc, #184]	; (8031c <udi_cdc_tx_send+0x11c>)
   80262:	701a      	strb	r2, [r3, #0]
   80264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80268:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8026a:	4626      	mov	r6, r4
   8026c:	4b2d      	ldr	r3, [pc, #180]	; (80324 <udi_cdc_tx_send+0x124>)
   8026e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80276:	bf14      	ite	ne
   80278:	2501      	movne	r5, #1
   8027a:	2500      	moveq	r5, #0
	if (b_short_packet) {
   8027c:	d138      	bne.n	802f0 <udi_cdc_tx_send+0xf0>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   8027e:	4b25      	ldr	r3, [pc, #148]	; (80314 <udi_cdc_tx_send+0x114>)
   80280:	2200      	movs	r2, #0
   80282:	801a      	strh	r2, [r3, #0]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   80284:	4b2a      	ldr	r3, [pc, #168]	; (80330 <udi_cdc_tx_send+0x130>)
   80286:	9300      	str	r3, [sp, #0]
   80288:	4b26      	ldr	r3, [pc, #152]	; (80324 <udi_cdc_tx_send+0x124>)
   8028a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   8028e:	4a29      	ldr	r2, [pc, #164]	; (80334 <udi_cdc_tx_send+0x134>)
   80290:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   80294:	4629      	mov	r1, r5
   80296:	2085      	movs	r0, #133	; 0x85
   80298:	4c27      	ldr	r4, [pc, #156]	; (80338 <udi_cdc_tx_send+0x138>)
   8029a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   8029c:	b002      	add	sp, #8
   8029e:	bd70      	pop	{r4, r5, r6, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802a0:	4b1c      	ldr	r3, [pc, #112]	; (80314 <udi_cdc_tx_send+0x114>)
   802a2:	881c      	ldrh	r4, [r3, #0]
   802a4:	4b25      	ldr	r3, [pc, #148]	; (8033c <udi_cdc_tx_send+0x13c>)
   802a6:	4798      	blx	r3
   802a8:	4284      	cmp	r4, r0
   802aa:	d1b9      	bne.n	80220 <udi_cdc_tx_send+0x20>
   802ac:	e7f6      	b.n	8029c <udi_cdc_tx_send+0x9c>
		sof_zlp_counter++;
   802ae:	4a1e      	ldr	r2, [pc, #120]	; (80328 <udi_cdc_tx_send+0x128>)
   802b0:	8813      	ldrh	r3, [r2, #0]
   802b2:	3301      	adds	r3, #1
   802b4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802b6:	4b16      	ldr	r3, [pc, #88]	; (80310 <udi_cdc_tx_send+0x110>)
   802b8:	4798      	blx	r3
   802ba:	b918      	cbnz	r0, 802c4 <udi_cdc_tx_send+0xc4>
   802bc:	4b1a      	ldr	r3, [pc, #104]	; (80328 <udi_cdc_tx_send+0x128>)
   802be:	881b      	ldrh	r3, [r3, #0]
   802c0:	2b63      	cmp	r3, #99	; 0x63
   802c2:	d908      	bls.n	802d6 <udi_cdc_tx_send+0xd6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802c4:	4b12      	ldr	r3, [pc, #72]	; (80310 <udi_cdc_tx_send+0x110>)
   802c6:	4798      	blx	r3
   802c8:	2800      	cmp	r0, #0
   802ca:	d0b9      	beq.n	80240 <udi_cdc_tx_send+0x40>
   802cc:	4b16      	ldr	r3, [pc, #88]	; (80328 <udi_cdc_tx_send+0x128>)
   802ce:	881b      	ldrh	r3, [r3, #0]
   802d0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802d4:	d2b4      	bcs.n	80240 <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802d6:	2d00      	cmp	r5, #0
   802d8:	d1e0      	bne.n	8029c <udi_cdc_tx_send+0x9c>
		cpu_irq_enable();
   802da:	4b10      	ldr	r3, [pc, #64]	; (8031c <udi_cdc_tx_send+0x11c>)
   802dc:	2201      	movs	r2, #1
   802de:	701a      	strb	r2, [r3, #0]
   802e0:	f3bf 8f5f 	dmb	sy
   802e4:	b662      	cpsie	i
}
   802e6:	e7d9      	b.n	8029c <udi_cdc_tx_send+0x9c>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802e8:	fab4 f484 	clz	r4, r4
   802ec:	0964      	lsrs	r4, r4, #5
   802ee:	e7b3      	b.n	80258 <udi_cdc_tx_send+0x58>
		if (udd_is_high_speed()) {
   802f0:	4b07      	ldr	r3, [pc, #28]	; (80310 <udi_cdc_tx_send+0x110>)
   802f2:	4798      	blx	r3
   802f4:	b120      	cbz	r0, 80300 <udi_cdc_tx_send+0x100>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802f6:	4b08      	ldr	r3, [pc, #32]	; (80318 <udi_cdc_tx_send+0x118>)
   802f8:	4798      	blx	r3
   802fa:	4b06      	ldr	r3, [pc, #24]	; (80314 <udi_cdc_tx_send+0x114>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	e7c1      	b.n	80284 <udi_cdc_tx_send+0x84>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   80300:	4b0e      	ldr	r3, [pc, #56]	; (8033c <udi_cdc_tx_send+0x13c>)
   80302:	4798      	blx	r3
   80304:	4b03      	ldr	r3, [pc, #12]	; (80314 <udi_cdc_tx_send+0x114>)
   80306:	8018      	strh	r0, [r3, #0]
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x84>
   8030a:	bf00      	nop
   8030c:	20001910 	.word	0x20001910
   80310:	00084e65 	.word	0x00084e65
   80314:	2000190c 	.word	0x2000190c
   80318:	00084ebd 	.word	0x00084ebd
   8031c:	200006e6 	.word	0x200006e6
   80320:	20001908 	.word	0x20001908
   80324:	20001904 	.word	0x20001904
   80328:	200010dc 	.word	0x200010dc
   8032c:	20001500 	.word	0x20001500
   80330:	00080341 	.word	0x00080341
   80334:	20001504 	.word	0x20001504
   80338:	00085121 	.word	0x00085121
   8033c:	00084ead 	.word	0x00084ead

00080340 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   80340:	b100      	cbz	r0, 80344 <udi_cdc_data_sent+0x4>
   80342:	4770      	bx	lr
{
   80344:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80346:	4b07      	ldr	r3, [pc, #28]	; (80364 <udi_cdc_data_sent+0x24>)
   80348:	781b      	ldrb	r3, [r3, #0]
   8034a:	fab3 f383 	clz	r3, r3
   8034e:	095b      	lsrs	r3, r3, #5
   80350:	4a05      	ldr	r2, [pc, #20]	; (80368 <udi_cdc_data_sent+0x28>)
   80352:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <udi_cdc_data_sent+0x2c>)
   80358:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <udi_cdc_data_sent+0x30>)
   8035c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <udi_cdc_data_sent+0x34>)
   80360:	4798      	blx	r3
}
   80362:	bd08      	pop	{r3, pc}
   80364:	20001908 	.word	0x20001908
   80368:	20001904 	.word	0x20001904
   8036c:	20001500 	.word	0x20001500
   80370:	20001910 	.word	0x20001910
   80374:	00080201 	.word	0x00080201

00080378 <udi_cdc_data_sof_notify>:
{
   80378:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   8037a:	2000      	movs	r0, #0
   8037c:	4b01      	ldr	r3, [pc, #4]	; (80384 <udi_cdc_data_sof_notify+0xc>)
   8037e:	4798      	blx	r3
}
   80380:	bd08      	pop	{r3, pc}
   80382:	bf00      	nop
   80384:	00080201 	.word	0x00080201

00080388 <udi_cdc_data_disable>:
{
   80388:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   8038a:	4a06      	ldr	r2, [pc, #24]	; (803a4 <udi_cdc_data_disable+0x1c>)
   8038c:	7813      	ldrb	r3, [r2, #0]
   8038e:	3b01      	subs	r3, #1
   80390:	b2db      	uxtb	r3, r3
   80392:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   80394:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   80396:	4b04      	ldr	r3, [pc, #16]	; (803a8 <udi_cdc_data_disable+0x20>)
   80398:	4798      	blx	r3
	udi_cdc_data_running = false;
   8039a:	4b04      	ldr	r3, [pc, #16]	; (803ac <udi_cdc_data_disable+0x24>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
}
   803a0:	bd08      	pop	{r3, pc}
   803a2:	bf00      	nop
   803a4:	200010e8 	.word	0x200010e8
   803a8:	0008155d 	.word	0x0008155d
   803ac:	200010de 	.word	0x200010de

000803b0 <udi_cdc_line_coding_received>:
{
   803b0:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803b2:	4902      	ldr	r1, [pc, #8]	; (803bc <udi_cdc_line_coding_received+0xc>)
   803b4:	2000      	movs	r0, #0
   803b6:	4b02      	ldr	r3, [pc, #8]	; (803c0 <udi_cdc_line_coding_received+0x10>)
   803b8:	4798      	blx	r3
}
   803ba:	bd08      	pop	{r3, pc}
   803bc:	200010e0 	.word	0x200010e0
   803c0:	000815f1 	.word	0x000815f1

000803c4 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   803c8:	b672      	cpsid	i
   803ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803ce:	4b0b      	ldr	r3, [pc, #44]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   803d4:	4b0a      	ldr	r3, [pc, #40]	; (80400 <udi_cdc_multi_get_nb_received_data+0x3c>)
   803d6:	8818      	ldrh	r0, [r3, #0]
   803d8:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   803da:	4a0a      	ldr	r2, [pc, #40]	; (80404 <udi_cdc_multi_get_nb_received_data+0x40>)
   803dc:	7812      	ldrb	r2, [r2, #0]
   803de:	b2d2      	uxtb	r2, r2
   803e0:	4809      	ldr	r0, [pc, #36]	; (80408 <udi_cdc_multi_get_nb_received_data+0x44>)
   803e2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   803e6:	b280      	uxth	r0, r0
   803e8:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   803ea:	b929      	cbnz	r1, 803f8 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_multi_get_nb_received_data+0x38>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
   803f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   803f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   803f8:	4770      	bx	lr
   803fa:	bf00      	nop
   803fc:	200006e6 	.word	0x200006e6
   80400:	200014f4 	.word	0x200014f4
   80404:	200014f0 	.word	0x200014f0
   80408:	200014ec 	.word	0x200014ec

0008040c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   8040c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8040e:	4b03      	ldr	r3, [pc, #12]	; (8041c <udi_cdc_multi_is_rx_ready+0x10>)
   80410:	4798      	blx	r3
}
   80412:	3800      	subs	r0, #0
   80414:	bf18      	it	ne
   80416:	2001      	movne	r0, #1
   80418:	bd08      	pop	{r3, pc}
   8041a:	bf00      	nop
   8041c:	000803c5 	.word	0x000803c5

00080420 <udi_cdc_rx_start>:
{
   80420:	b510      	push	{r4, lr}
   80422:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80424:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
   8042a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8042e:	4b21      	ldr	r3, [pc, #132]	; (804b4 <udi_cdc_rx_start+0x94>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80434:	4b20      	ldr	r3, [pc, #128]	; (804b8 <udi_cdc_rx_start+0x98>)
   80436:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80438:	4b20      	ldr	r3, [pc, #128]	; (804bc <udi_cdc_rx_start+0x9c>)
   8043a:	781b      	ldrb	r3, [r3, #0]
   8043c:	bb5b      	cbnz	r3, 80496 <udi_cdc_rx_start+0x76>
   8043e:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80440:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80442:	881a      	ldrh	r2, [r3, #0]
   80444:	b292      	uxth	r2, r2
   80446:	4b1f      	ldr	r3, [pc, #124]	; (804c4 <udi_cdc_rx_start+0xa4>)
   80448:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8044c:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
   8044e:	429a      	cmp	r2, r3
   80450:	d321      	bcc.n	80496 <udi_cdc_rx_start+0x76>
	udi_cdc_rx_pos[port] = 0;
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <udi_cdc_rx_start+0xa0>)
   80454:	2200      	movs	r2, #0
   80456:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   80458:	fab4 f384 	clz	r3, r4
   8045c:	095b      	lsrs	r3, r3, #5
   8045e:	4a16      	ldr	r2, [pc, #88]	; (804b8 <udi_cdc_rx_start+0x98>)
   80460:	7013      	strb	r3, [r2, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   80462:	4b16      	ldr	r3, [pc, #88]	; (804bc <udi_cdc_rx_start+0x9c>)
   80464:	2201      	movs	r2, #1
   80466:	701a      	strb	r2, [r3, #0]
	if (cpu_irq_is_enabled_flags(flags))
   80468:	b921      	cbnz	r1, 80474 <udi_cdc_rx_start+0x54>
		cpu_irq_enable();
   8046a:	4b12      	ldr	r3, [pc, #72]	; (804b4 <udi_cdc_rx_start+0x94>)
   8046c:	701a      	strb	r2, [r3, #0]
   8046e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80472:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   80474:	2000      	movs	r0, #0
   80476:	4b14      	ldr	r3, [pc, #80]	; (804c8 <udi_cdc_rx_start+0xa8>)
   80478:	4798      	blx	r3
   8047a:	b9a8      	cbnz	r0, 804a8 <udi_cdc_rx_start+0x88>
	return udd_ep_run(ep,
   8047c:	4b13      	ldr	r3, [pc, #76]	; (804cc <udi_cdc_rx_start+0xac>)
   8047e:	9300      	str	r3, [sp, #0]
   80480:	f44f 7300 	mov.w	r3, #512	; 0x200
   80484:	4a12      	ldr	r2, [pc, #72]	; (804d0 <udi_cdc_rx_start+0xb0>)
   80486:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8048a:	2101      	movs	r1, #1
   8048c:	2006      	movs	r0, #6
   8048e:	4c11      	ldr	r4, [pc, #68]	; (804d4 <udi_cdc_rx_start+0xb4>)
   80490:	47a0      	blx	r4
}
   80492:	b002      	add	sp, #8
   80494:	bd10      	pop	{r4, pc}
	if (cpu_irq_is_enabled_flags(flags))
   80496:	b959      	cbnz	r1, 804b0 <udi_cdc_rx_start+0x90>
		cpu_irq_enable();
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <udi_cdc_rx_start+0x94>)
   8049a:	2201      	movs	r2, #1
   8049c:	701a      	strb	r2, [r3, #0]
   8049e:	f3bf 8f5f 	dmb	sy
   804a2:	b662      	cpsie	i
		return false;
   804a4:	2000      	movs	r0, #0
}
   804a6:	e7f4      	b.n	80492 <udi_cdc_rx_start+0x72>
		UDI_CDC_RX_NOTIFY(port);
   804a8:	2000      	movs	r0, #0
   804aa:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <udi_cdc_rx_start+0xb8>)
   804ac:	4798      	blx	r3
   804ae:	e7e5      	b.n	8047c <udi_cdc_rx_start+0x5c>
		return false;
   804b0:	2000      	movs	r0, #0
   804b2:	e7ee      	b.n	80492 <udi_cdc_rx_start+0x72>
   804b4:	200006e6 	.word	0x200006e6
   804b8:	200014f0 	.word	0x200014f0
   804bc:	200014f8 	.word	0x200014f8
   804c0:	200014f4 	.word	0x200014f4
   804c4:	200014ec 	.word	0x200014ec
   804c8:	0008040d 	.word	0x0008040d
   804cc:	0008056d 	.word	0x0008056d
   804d0:	200010ec 	.word	0x200010ec
   804d4:	00085121 	.word	0x00085121
   804d8:	00081569 	.word	0x00081569

000804dc <udi_cdc_data_enable>:
{
   804dc:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   804de:	2400      	movs	r4, #0
   804e0:	4b15      	ldr	r3, [pc, #84]	; (80538 <udi_cdc_data_enable+0x5c>)
   804e2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   804e4:	4b15      	ldr	r3, [pc, #84]	; (8053c <udi_cdc_data_enable+0x60>)
   804e6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   804e8:	4b15      	ldr	r3, [pc, #84]	; (80540 <udi_cdc_data_enable+0x64>)
   804ea:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   804ec:	4b15      	ldr	r3, [pc, #84]	; (80544 <udi_cdc_data_enable+0x68>)
   804ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   804f0:	4b15      	ldr	r3, [pc, #84]	; (80548 <udi_cdc_data_enable+0x6c>)
   804f2:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   804f4:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   804f6:	4b15      	ldr	r3, [pc, #84]	; (8054c <udi_cdc_data_enable+0x70>)
   804f8:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   804fa:	4620      	mov	r0, r4
   804fc:	4b14      	ldr	r3, [pc, #80]	; (80550 <udi_cdc_data_enable+0x74>)
   804fe:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80500:	4b14      	ldr	r3, [pc, #80]	; (80554 <udi_cdc_data_enable+0x78>)
   80502:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80504:	4b14      	ldr	r3, [pc, #80]	; (80558 <udi_cdc_data_enable+0x7c>)
   80506:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80508:	4b14      	ldr	r3, [pc, #80]	; (8055c <udi_cdc_data_enable+0x80>)
   8050a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8050c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8050e:	4b14      	ldr	r3, [pc, #80]	; (80560 <udi_cdc_data_enable+0x84>)
   80510:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80512:	4620      	mov	r0, r4
   80514:	4b13      	ldr	r3, [pc, #76]	; (80564 <udi_cdc_data_enable+0x88>)
   80516:	4798      	blx	r3
   80518:	b140      	cbz	r0, 8052c <udi_cdc_data_enable+0x50>
	udi_cdc_nb_data_enabled++;
   8051a:	4a07      	ldr	r2, [pc, #28]	; (80538 <udi_cdc_data_enable+0x5c>)
   8051c:	7813      	ldrb	r3, [r2, #0]
   8051e:	3301      	adds	r3, #1
   80520:	b2db      	uxtb	r3, r3
   80522:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80524:	7813      	ldrb	r3, [r2, #0]
   80526:	b2db      	uxtb	r3, r3
   80528:	2b01      	cmp	r3, #1
   8052a:	d000      	beq.n	8052e <udi_cdc_data_enable+0x52>
}
   8052c:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   8052e:	4b0e      	ldr	r3, [pc, #56]	; (80568 <udi_cdc_data_enable+0x8c>)
   80530:	2201      	movs	r2, #1
   80532:	701a      	strb	r2, [r3, #0]
   80534:	e7fa      	b.n	8052c <udi_cdc_data_enable+0x50>
   80536:	bf00      	nop
   80538:	200010e8 	.word	0x200010e8
   8053c:	20001910 	.word	0x20001910
   80540:	20001500 	.word	0x20001500
   80544:	20001908 	.word	0x20001908
   80548:	20001904 	.word	0x20001904
   8054c:	2000190c 	.word	0x2000190c
   80550:	00080201 	.word	0x00080201
   80554:	200014f8 	.word	0x200014f8
   80558:	200014f0 	.word	0x200014f0
   8055c:	200014ec 	.word	0x200014ec
   80560:	200014f4 	.word	0x200014f4
   80564:	00080421 	.word	0x00080421
   80568:	200010de 	.word	0x200010de

0008056c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   8056c:	b9f8      	cbnz	r0, 805ae <udi_cdc_data_received+0x42>
{
   8056e:	b530      	push	{r4, r5, lr}
   80570:	b083      	sub	sp, #12
   80572:	4615      	mov	r5, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   80574:	4b0e      	ldr	r3, [pc, #56]	; (805b0 <udi_cdc_data_received+0x44>)
   80576:	781c      	ldrb	r4, [r3, #0]
   80578:	fab4 f484 	clz	r4, r4
   8057c:	0964      	lsrs	r4, r4, #5
	if (!n) {
   8057e:	b151      	cbz	r1, 80596 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   80580:	b289      	uxth	r1, r1
   80582:	4b0c      	ldr	r3, [pc, #48]	; (805b4 <udi_cdc_data_received+0x48>)
   80584:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   80588:	2000      	movs	r0, #0
   8058a:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <udi_cdc_data_received+0x4c>)
   8058c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   8058e:	4b0b      	ldr	r3, [pc, #44]	; (805bc <udi_cdc_data_received+0x50>)
   80590:	4798      	blx	r3
}
   80592:	b003      	add	sp, #12
   80594:	bd30      	pop	{r4, r5, pc}
		udd_ep_run( ep,
   80596:	4b0a      	ldr	r3, [pc, #40]	; (805c0 <udi_cdc_data_received+0x54>)
   80598:	9300      	str	r3, [sp, #0]
   8059a:	f44f 7300 	mov.w	r3, #512	; 0x200
   8059e:	4a09      	ldr	r2, [pc, #36]	; (805c4 <udi_cdc_data_received+0x58>)
   805a0:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805a4:	2101      	movs	r1, #1
   805a6:	4628      	mov	r0, r5
   805a8:	4c07      	ldr	r4, [pc, #28]	; (805c8 <udi_cdc_data_received+0x5c>)
   805aa:	47a0      	blx	r4
		return;
   805ac:	e7f1      	b.n	80592 <udi_cdc_data_received+0x26>
   805ae:	4770      	bx	lr
   805b0:	200014f0 	.word	0x200014f0
   805b4:	200014ec 	.word	0x200014ec
   805b8:	200014f8 	.word	0x200014f8
   805bc:	00080421 	.word	0x00080421
   805c0:	0008056d 	.word	0x0008056d
   805c4:	200010ec 	.word	0x200010ec
   805c8:	00085121 	.word	0x00085121

000805cc <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   805cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   805d0:	4688      	mov	r8, r1
   805d2:	4617      	mov	r7, r2
	cpu_irq_disable();
   805d4:	4e21      	ldr	r6, [pc, #132]	; (8065c <udi_cdc_multi_read_buf+0x90>)
   805d6:	f04f 0b00 	mov.w	fp, #0
   805da:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   805dc:	4d20      	ldr	r5, [pc, #128]	; (80660 <udi_cdc_multi_read_buf+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   805de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80678 <udi_cdc_multi_read_buf+0xac>
   805e2:	e00a      	b.n	805fa <udi_cdc_multi_read_buf+0x2e>
		cpu_irq_enable();
   805e4:	2001      	movs	r0, #1
   805e6:	7030      	strb	r0, [r6, #0]
   805e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ec:	b662      	cpsie	i
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
   805ee:	428a      	cmp	r2, r1
   805f0:	d816      	bhi.n	80620 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
   805f2:	4b1c      	ldr	r3, [pc, #112]	; (80664 <udi_cdc_multi_read_buf+0x98>)
   805f4:	781b      	ldrb	r3, [r3, #0]
   805f6:	2b00      	cmp	r3, #0
   805f8:	d02d      	beq.n	80656 <udi_cdc_multi_read_buf+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   805fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80604:	f886 a000 	strb.w	sl, [r6]
	pos = udi_cdc_rx_pos[port];
   80608:	8829      	ldrh	r1, [r5, #0]
   8060a:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8060c:	f899 3000 	ldrb.w	r3, [r9]
   80610:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80612:	4a15      	ldr	r2, [pc, #84]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80614:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   80618:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8061a:	2800      	cmp	r0, #0
   8061c:	d1e7      	bne.n	805ee <udi_cdc_multi_read_buf+0x22>
   8061e:	e7e1      	b.n	805e4 <udi_cdc_multi_read_buf+0x18>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80620:	4a11      	ldr	r2, [pc, #68]	; (80668 <udi_cdc_multi_read_buf+0x9c>)
   80622:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   80626:	b2a4      	uxth	r4, r4
   80628:	1a64      	subs	r4, r4, r1
	if (copy_nb>size) {
   8062a:	42bc      	cmp	r4, r7
   8062c:	bf28      	it	cs
   8062e:	463c      	movcs	r4, r7
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80630:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   80634:	4622      	mov	r2, r4
   80636:	4b0d      	ldr	r3, [pc, #52]	; (8066c <udi_cdc_multi_read_buf+0xa0>)
   80638:	4419      	add	r1, r3
   8063a:	4640      	mov	r0, r8
   8063c:	4b0c      	ldr	r3, [pc, #48]	; (80670 <udi_cdc_multi_read_buf+0xa4>)
   8063e:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80640:	882b      	ldrh	r3, [r5, #0]
   80642:	4423      	add	r3, r4
   80644:	b29b      	uxth	r3, r3
   80646:	802b      	strh	r3, [r5, #0]
	ptr_buf += copy_nb;
   80648:	44a0      	add	r8, r4
	size -= copy_nb;
   8064a:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_start(port);
   8064c:	4658      	mov	r0, fp
   8064e:	4b09      	ldr	r3, [pc, #36]	; (80674 <udi_cdc_multi_read_buf+0xa8>)
   80650:	4798      	blx	r3

	if (size) {
   80652:	2f00      	cmp	r7, #0
   80654:	d1d1      	bne.n	805fa <udi_cdc_multi_read_buf+0x2e>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80656:	4638      	mov	r0, r7
   80658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8065c:	200006e6 	.word	0x200006e6
   80660:	200014f4 	.word	0x200014f4
   80664:	200010de 	.word	0x200010de
   80668:	200014ec 	.word	0x200014ec
   8066c:	200010ec 	.word	0x200010ec
   80670:	000860f9 	.word	0x000860f9
   80674:	00080421 	.word	0x00080421
   80678:	200014f0 	.word	0x200014f0

0008067c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
   8067c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8067e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80682:	b672      	cpsid	i
   80684:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80688:	4b14      	ldr	r3, [pc, #80]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   8068a:	2100      	movs	r1, #0
   8068c:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8068e:	4b14      	ldr	r3, [pc, #80]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   80690:	781b      	ldrb	r3, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   80692:	4914      	ldr	r1, [pc, #80]	; (806e4 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80694:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80698:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8069c:	d00a      	beq.n	806b4 <udi_cdc_multi_get_free_tx_buffer+0x38>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8069e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806a2:	b92a      	cbnz	r2, 806b0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806a4:	4b0d      	ldr	r3, [pc, #52]	; (806dc <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806a6:	2201      	movs	r2, #1
   806a8:	701a      	strb	r2, [r3, #0]
   806aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806ae:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806b0:	bc10      	pop	{r4}
   806b2:	4770      	bx	lr
   806b4:	b2dc      	uxtb	r4, r3
		if ((!udi_cdc_tx_trans_ongoing[port])
   806b6:	4b0c      	ldr	r3, [pc, #48]	; (806e8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806b8:	781b      	ldrb	r3, [r3, #0]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d1ef      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806be:	4b0b      	ldr	r3, [pc, #44]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c0:	781b      	ldrb	r3, [r3, #0]
   806c2:	2b00      	cmp	r3, #0
   806c4:	d1eb      	bne.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <udi_cdc_multi_get_free_tx_buffer+0x70>)
   806c8:	2101      	movs	r1, #1
   806ca:	7019      	strb	r1, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806cc:	fab4 f484 	clz	r4, r4
   806d0:	0964      	lsrs	r4, r4, #5
   806d2:	4b03      	ldr	r3, [pc, #12]	; (806e0 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806d4:	701c      	strb	r4, [r3, #0]
			buf_sel_nb = 0;
   806d6:	2000      	movs	r0, #0
   806d8:	e7e1      	b.n	8069e <udi_cdc_multi_get_free_tx_buffer+0x22>
   806da:	bf00      	nop
   806dc:	200006e6 	.word	0x200006e6
   806e0:	20001908 	.word	0x20001908
   806e4:	20001904 	.word	0x20001904
   806e8:	20001910 	.word	0x20001910
   806ec:	20001500 	.word	0x20001500

000806f0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   806f0:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   806f2:	4b03      	ldr	r3, [pc, #12]	; (80700 <udi_cdc_multi_is_tx_ready+0x10>)
   806f4:	4798      	blx	r3
}
   806f6:	3800      	subs	r0, #0
   806f8:	bf18      	it	ne
   806fa:	2001      	movne	r0, #1
   806fc:	bd08      	pop	{r3, pc}
   806fe:	bf00      	nop
   80700:	0008067d 	.word	0x0008067d

00080704 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80708:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8070a:	4b1a      	ldr	r3, [pc, #104]	; (80774 <udi_cdc_multi_putc+0x70>)
   8070c:	799d      	ldrb	r5, [r3, #6]
   8070e:	2d09      	cmp	r5, #9
   80710:	bf14      	ite	ne
   80712:	2500      	movne	r5, #0
   80714:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80716:	4e18      	ldr	r6, [pc, #96]	; (80778 <udi_cdc_multi_putc+0x74>)
	cpu_irq_disable();
   80718:	4f18      	ldr	r7, [pc, #96]	; (8077c <udi_cdc_multi_putc+0x78>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8071a:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8078c <udi_cdc_multi_putc+0x88>
   8071e:	e01d      	b.n	8075c <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80720:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80724:	b672      	cpsid	i
   80726:	f3bf 8f5f 	dmb	sy
   8072a:	2300      	movs	r3, #0
   8072c:	703b      	strb	r3, [r7, #0]
   8072e:	f898 2000 	ldrb.w	r2, [r8]
   80732:	b2d1      	uxtb	r1, r2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80734:	4b12      	ldr	r3, [pc, #72]	; (80780 <udi_cdc_multi_putc+0x7c>)
   80736:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   8073a:	f102 0c01 	add.w	ip, r2, #1
   8073e:	f823 c011 	strh.w	ip, [r3, r1, lsl #1]
   80742:	4b10      	ldr	r3, [pc, #64]	; (80784 <udi_cdc_multi_putc+0x80>)
   80744:	eb03 2341 	add.w	r3, r3, r1, lsl #9
   80748:	549c      	strb	r4, [r3, r2]
	if (cpu_irq_is_enabled_flags(flags))
   8074a:	b920      	cbnz	r0, 80756 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   8074c:	2301      	movs	r3, #1
   8074e:	703b      	strb	r3, [r7, #0]
   80750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80754:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80756:	b15d      	cbz	r5, 80770 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80758:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   8075a:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8075c:	2000      	movs	r0, #0
   8075e:	47b0      	blx	r6
   80760:	2800      	cmp	r0, #0
   80762:	d1dd      	bne.n	80720 <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80764:	4b08      	ldr	r3, [pc, #32]	; (80788 <udi_cdc_multi_putc+0x84>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	2b00      	cmp	r3, #0
   8076a:	d1f7      	bne.n	8075c <udi_cdc_multi_putc+0x58>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
   8076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
   80770:	2001      	movs	r0, #1
   80772:	e7fb      	b.n	8076c <udi_cdc_multi_putc+0x68>
   80774:	200010e0 	.word	0x200010e0
   80778:	000806f1 	.word	0x000806f1
   8077c:	200006e6 	.word	0x200006e6
   80780:	20001904 	.word	0x20001904
   80784:	20001504 	.word	0x20001504
   80788:	200010de 	.word	0x200010de
   8078c:	20001908 	.word	0x20001908

00080790 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   80790:	b510      	push	{r4, lr}
	gpio_configure_pin(PIN_FPGA_CCLK_GPIO, PIN_FPGA_CCLK_USART_FLAGS);
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80792:	4c18      	ldr	r4, [pc, #96]	; (807f4 <fpga_program_setup1+0x64>)
   80794:	4620      	mov	r0, r4
   80796:	4b18      	ldr	r3, [pc, #96]	; (807f8 <fpga_program_setup1+0x68>)
   80798:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8079a:	2380      	movs	r3, #128	; 0x80
   8079c:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8079e:	6863      	ldr	r3, [r4, #4]
   807a0:	f043 0301 	orr.w	r3, r3, #1
   807a4:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   807a6:	6863      	ldr	r3, [r4, #4]
   807a8:	f043 0310 	orr.w	r3, r3, #16
   807ac:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   807ae:	6863      	ldr	r3, [r4, #4]
   807b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   807b4:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   807b6:	2200      	movs	r2, #0
   807b8:	4611      	mov	r1, r2
   807ba:	4620      	mov	r0, r4
   807bc:	4b0f      	ldr	r3, [pc, #60]	; (807fc <fpga_program_setup1+0x6c>)
   807be:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   807c0:	2201      	movs	r2, #1
   807c2:	2100      	movs	r1, #0
   807c4:	4620      	mov	r0, r4
   807c6:	4b0e      	ldr	r3, [pc, #56]	; (80800 <fpga_program_setup1+0x70>)
   807c8:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(1000000, sysclk_get_cpu_hz()));
   807ca:	490e      	ldr	r1, [pc, #56]	; (80804 <fpga_program_setup1+0x74>)
   807cc:	480e      	ldr	r0, [pc, #56]	; (80808 <fpga_program_setup1+0x78>)
   807ce:	4b0f      	ldr	r3, [pc, #60]	; (8080c <fpga_program_setup1+0x7c>)
   807d0:	4798      	blx	r3
   807d2:	b2c2      	uxtb	r2, r0
   807d4:	2100      	movs	r1, #0
   807d6:	4620      	mov	r0, r4
   807d8:	4b0d      	ldr	r3, [pc, #52]	; (80810 <fpga_program_setup1+0x80>)
   807da:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   807dc:	2301      	movs	r3, #1
   807de:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   807e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807e4:	200e      	movs	r0, #14
   807e6:	4c0b      	ldr	r4, [pc, #44]	; (80814 <fpga_program_setup1+0x84>)
   807e8:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   807ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807ee:	200f      	movs	r0, #15
   807f0:	47a0      	blx	r4
	#endif
#endif
}
   807f2:	bd10      	pop	{r4, pc}
   807f4:	40008000 	.word	0x40008000
   807f8:	00084121 	.word	0x00084121
   807fc:	000841a3 	.word	0x000841a3
   80800:	000841c1 	.word	0x000841c1
   80804:	05b8d800 	.word	0x05b8d800
   80808:	000f4240 	.word	0x000f4240
   8080c:	000841df 	.word	0x000841df
   80810:	000841f5 	.word	0x000841f5
   80814:	00083d59 	.word	0x00083d59

00080818 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80818:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8081a:	2008      	movs	r0, #8
   8081c:	4b01      	ldr	r3, [pc, #4]	; (80824 <fpga_program_setup2+0xc>)
   8081e:	4798      	blx	r3
}
   80820:	bd08      	pop	{r3, pc}
   80822:	bf00      	nop
   80824:	00083d25 	.word	0x00083d25

00080828 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80828:	b510      	push	{r4, lr}
   8082a:	4601      	mov	r1, r0
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8082c:	2300      	movs	r3, #0
   8082e:	461a      	mov	r2, r3
   80830:	4801      	ldr	r0, [pc, #4]	; (80838 <fpga_program_sendbyte+0x10>)
   80832:	4c02      	ldr	r4, [pc, #8]	; (8083c <fpga_program_sendbyte+0x14>)
   80834:	47a0      	blx	r4
		#endif
	#endif
}
   80836:	bd10      	pop	{r4, pc}
   80838:	40008000 	.word	0x40008000
   8083c:	0008416f 	.word	0x0008416f

00080840 <ISPProtocol_ProgramMemory>:
 *  words or pages of data to the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ProgramMemory(uint8_t V2Command, uint8_t * buffer)
{
   80840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80844:	b08d      	sub	sp, #52	; 0x34
   80846:	9103      	str	r1, [sp, #12]
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   80848:	4b92      	ldr	r3, [pc, #584]	; (80a94 <ISPProtocol_ProgramMemory+0x254>)
   8084a:	8999      	ldrh	r1, [r3, #12]
   8084c:	2909      	cmp	r1, #9
   8084e:	d005      	beq.n	8085c <ISPProtocol_ProgramMemory+0x1c>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80850:	4891      	ldr	r0, [pc, #580]	; (80a98 <ISPProtocol_ProgramMemory+0x258>)
   80852:	4b92      	ldr	r3, [pc, #584]	; (80a9c <ISPProtocol_ProgramMemory+0x25c>)
   80854:	4798      	blx	r3
	//printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   80856:	b00d      	add	sp, #52	; 0x34
   80858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8085c:	4683      	mov	fp, r0
	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   8085e:	4b8d      	ldr	r3, [pc, #564]	; (80a94 <ISPProtocol_ProgramMemory+0x254>)
   80860:	689a      	ldr	r2, [r3, #8]
   80862:	ab09      	add	r3, sp, #36	; 0x24
   80864:	6810      	ldr	r0, [r2, #0]
   80866:	6851      	ldr	r1, [r2, #4]
   80868:	c303      	stmia	r3!, {r0, r1}
   8086a:	8912      	ldrh	r2, [r2, #8]
   8086c:	801a      	strh	r2, [r3, #0]
	if (Write_Memory_Params.BytesToWrite > 256)
   8086e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   80872:	9305      	str	r3, [sp, #20]
   80874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80878:	d813      	bhi.n	808a2 <ISPProtocol_ProgramMemory+0x62>
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   8087a:	f1bb 0f13 	cmp.w	fp, #19
   8087e:	bf0c      	ite	eq
   80880:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   80884:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   80888:	9306      	str	r3, [sp, #24]
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   8088a:	4b85      	ldr	r3, [pc, #532]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   8088c:	681b      	ldr	r3, [r3, #0]
   8088e:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80890:	9b05      	ldr	r3, [sp, #20]
   80892:	2b00      	cmp	r3, #0
   80894:	d043      	beq.n	8091e <ISPProtocol_ProgramMemory+0xde>
   80896:	2400      	movs	r4, #0
	uint16_t PollAddress       = 0;
   80898:	9404      	str	r4, [sp, #16]
			MustLoadExtendedAddress = false;
   8089a:	4627      	mov	r7, r4
   8089c:	f8cd b008 	str.w	fp, [sp, #8]
   808a0:	e0a6      	b.n	809f0 <ISPProtocol_ProgramMemory+0x1b0>
		avrisp_status_payload[0] = V2Command;
   808a2:	4b80      	ldr	r3, [pc, #512]	; (80aa4 <ISPProtocol_ProgramMemory+0x264>)
   808a4:	f883 b000 	strb.w	fp, [r3]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   808a8:	22c0      	movs	r2, #192	; 0xc0
   808aa:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   808ac:	4b7e      	ldr	r3, [pc, #504]	; (80aa8 <ISPProtocol_ProgramMemory+0x268>)
   808ae:	2202      	movs	r2, #2
   808b0:	801a      	strh	r2, [r3, #0]
		return;
   808b2:	e7d0      	b.n	80856 <ISPProtocol_ProgramMemory+0x16>
			ISPTarget_LoadExtendedAddress();
   808b4:	4b7d      	ldr	r3, [pc, #500]	; (80aac <ISPProtocol_ProgramMemory+0x26c>)
   808b6:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   808b8:	4b7d      	ldr	r3, [pc, #500]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   808ba:	701f      	strb	r7, [r3, #0]
   808bc:	e0a3      	b.n	80a06 <ISPProtocol_ProgramMemory+0x1c6>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   808be:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   808c2:	f043 0308 	orr.w	r3, r3, #8
   808c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   808ca:	4b75      	ldr	r3, [pc, #468]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   808cc:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   808ce:	f018 0f01 	tst.w	r8, #1
   808d2:	f000 80d4 	beq.w	80a7e <ISPProtocol_ProgramMemory+0x23e>
			PollAddress = (CurrentAddress & 0xFFFF);
   808d6:	9304      	str	r3, [sp, #16]
			CurrentAddress++;
   808d8:	4a71      	ldr	r2, [pc, #452]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   808da:	6813      	ldr	r3, [r2, #0]
   808dc:	3301      	adds	r3, #1
   808de:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   808e0:	9a02      	ldr	r2, [sp, #8]
   808e2:	2a13      	cmp	r2, #19
   808e4:	d17f      	bne.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
   808e6:	b29b      	uxth	r3, r3
   808e8:	2b00      	cmp	r3, #0
   808ea:	d17c      	bne.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
			  MustLoadExtendedAddress = true;
   808ec:	2301      	movs	r3, #1
   808ee:	4a70      	ldr	r2, [pc, #448]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   808f0:	7013      	strb	r3, [r2, #0]
   808f2:	e078      	b.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
   808f4:	9304      	str	r3, [sp, #16]
   808f6:	e061      	b.n	809bc <ISPProtocol_ProgramMemory+0x17c>
			PollAddress = (CurrentAddress & 0xFFFF);
   808f8:	9304      	str	r3, [sp, #16]
   808fa:	e06d      	b.n	809d8 <ISPProtocol_ProgramMemory+0x198>
   808fc:	f8dd b008 	ldr.w	fp, [sp, #8]
   80900:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80902:	f89d 5026 	ldrb.w	r5, [sp, #38]	; 0x26
   80906:	f99d 4026 	ldrsb.w	r4, [sp, #38]	; 0x26
   8090a:	2c00      	cmp	r4, #0
   8090c:	db0e      	blt.n	8092c <ISPProtocol_ProgramMemory+0xec>
	avrisp_status_payload[0] = V2Command;
   8090e:	4a65      	ldr	r2, [pc, #404]	; (80aa4 <ISPProtocol_ProgramMemory+0x264>)
   80910:	f882 b000 	strb.w	fp, [r2]
	avrisp_status_payload[1] = ProgrammingStatus;
   80914:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80916:	4b64      	ldr	r3, [pc, #400]	; (80aa8 <ISPProtocol_ProgramMemory+0x268>)
   80918:	2202      	movs	r2, #2
   8091a:	801a      	strh	r2, [r3, #0]
   8091c:	e79b      	b.n	80856 <ISPProtocol_ProgramMemory+0x16>
	uint16_t PollAddress       = 0;
   8091e:	9b05      	ldr	r3, [sp, #20]
   80920:	9304      	str	r3, [sp, #16]
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80922:	2300      	movs	r3, #0
   80924:	e7ed      	b.n	80902 <ISPProtocol_ProgramMemory+0xc2>
   80926:	f8dd b008 	ldr.w	fp, [sp, #8]
   8092a:	e7ea      	b.n	80902 <ISPProtocol_ProgramMemory+0xc2>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   8092c:	4f61      	ldr	r7, [pc, #388]	; (80ab4 <ISPProtocol_ProgramMemory+0x274>)
   8092e:	2300      	movs	r3, #0
   80930:	461a      	mov	r2, r3
   80932:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80936:	4638      	mov	r0, r7
   80938:	4e5f      	ldr	r6, [pc, #380]	; (80ab8 <ISPProtocol_ProgramMemory+0x278>)
   8093a:	47b0      	blx	r6
   8093c:	2300      	movs	r3, #0
   8093e:	461a      	mov	r2, r3
   80940:	9907      	ldr	r1, [sp, #28]
   80942:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80946:	4638      	mov	r0, r7
   80948:	47b0      	blx	r6
   8094a:	2300      	movs	r3, #0
   8094c:	461a      	mov	r2, r3
   8094e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80952:	4638      	mov	r0, r7
   80954:	47b0      	blx	r6
   80956:	2300      	movs	r3, #0
   80958:	461a      	mov	r2, r3
   8095a:	4619      	mov	r1, r3
   8095c:	4638      	mov	r0, r7
   8095e:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80960:	f015 0f20 	tst.w	r5, #32
   80964:	d007      	beq.n	80976 <ISPProtocol_ProgramMemory+0x136>
   80966:	9b04      	ldr	r3, [sp, #16]
   80968:	b92b      	cbnz	r3, 80976 <ISPProtocol_ProgramMemory+0x136>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   8096a:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   8096e:	f043 0310 	orr.w	r3, r3, #16
   80972:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80976:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   8097a:	9300      	str	r3, [sp, #0]
   8097c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80980:	9a06      	ldr	r2, [sp, #24]
   80982:	9904      	ldr	r1, [sp, #16]
   80984:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80988:	4c4c      	ldr	r4, [pc, #304]	; (80abc <ISPProtocol_ProgramMemory+0x27c>)
   8098a:	47a0      	blx	r4
   8098c:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   8098e:	f1bb 0f13 	cmp.w	fp, #19
   80992:	d1bc      	bne.n	8090e <ISPProtocol_ProgramMemory+0xce>
   80994:	4a42      	ldr	r2, [pc, #264]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   80996:	8812      	ldrh	r2, [r2, #0]
   80998:	2a00      	cmp	r2, #0
   8099a:	d1b8      	bne.n	8090e <ISPProtocol_ProgramMemory+0xce>
		  MustLoadExtendedAddress = true;
   8099c:	4a44      	ldr	r2, [pc, #272]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   8099e:	2101      	movs	r1, #1
   809a0:	7011      	strb	r1, [r2, #0]
   809a2:	e7b4      	b.n	8090e <ISPProtocol_ProgramMemory+0xce>
			CurrentAddress++;
   809a4:	4a3e      	ldr	r2, [pc, #248]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   809a6:	6813      	ldr	r3, [r2, #0]
   809a8:	3301      	adds	r3, #1
   809aa:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   809ac:	e01b      	b.n	809e6 <ISPProtocol_ProgramMemory+0x1a6>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   809ae:	f018 0f01 	tst.w	r8, #1
   809b2:	d067      	beq.n	80a84 <ISPProtocol_ProgramMemory+0x244>
   809b4:	e010      	b.n	809d8 <ISPProtocol_ProgramMemory+0x198>
   809b6:	f018 0f01 	tst.w	r8, #1
   809ba:	d10d      	bne.n	809d8 <ISPProtocol_ProgramMemory+0x198>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   809bc:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   809c0:	9300      	str	r3, [sp, #0]
   809c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   809c6:	9a06      	ldr	r2, [sp, #24]
   809c8:	9904      	ldr	r1, [sp, #16]
   809ca:	4640      	mov	r0, r8
   809cc:	4d3b      	ldr	r5, [pc, #236]	; (80abc <ISPProtocol_ProgramMemory+0x27c>)
   809ce:	47a8      	blx	r5
			if (ProgrammingStatus != STATUS_CMD_OK)
   809d0:	4603      	mov	r3, r0
   809d2:	2800      	cmp	r0, #0
   809d4:	d1a7      	bne.n	80926 <ISPProtocol_ProgramMemory+0xe6>
			PollAddress = 0;
   809d6:	9704      	str	r7, [sp, #16]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   809d8:	f014 0f01 	tst.w	r4, #1
   809dc:	f47f af7c 	bne.w	808d8 <ISPProtocol_ProgramMemory+0x98>
   809e0:	9b02      	ldr	r3, [sp, #8]
   809e2:	2b15      	cmp	r3, #21
   809e4:	d0de      	beq.n	809a4 <ISPProtocol_ProgramMemory+0x164>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   809e6:	3401      	adds	r4, #1
   809e8:	b2a4      	uxth	r4, r4
   809ea:	9b05      	ldr	r3, [sp, #20]
   809ec:	42a3      	cmp	r3, r4
   809ee:	d085      	beq.n	808fc <ISPProtocol_ProgramMemory+0xbc>
		uint8_t ByteToWrite     = *(NextWriteByte++);
   809f0:	9b03      	ldr	r3, [sp, #12]
   809f2:	f813 bb01 	ldrb.w	fp, [r3], #1
   809f6:	9303      	str	r3, [sp, #12]
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   809f8:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   809fc:	4b2c      	ldr	r3, [pc, #176]	; (80ab0 <ISPProtocol_ProgramMemory+0x270>)
   809fe:	781b      	ldrb	r3, [r3, #0]
   80a00:	2b00      	cmp	r3, #0
   80a02:	f47f af57 	bne.w	808b4 <ISPProtocol_ProgramMemory+0x74>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80a06:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   80a0a:	4e2a      	ldr	r6, [pc, #168]	; (80ab4 <ISPProtocol_ProgramMemory+0x274>)
   80a0c:	463b      	mov	r3, r7
   80a0e:	463a      	mov	r2, r7
   80a10:	4649      	mov	r1, r9
   80a12:	4630      	mov	r0, r6
   80a14:	4d28      	ldr	r5, [pc, #160]	; (80ab8 <ISPProtocol_ProgramMemory+0x278>)
   80a16:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80a18:	f8df a084 	ldr.w	sl, [pc, #132]	; 80aa0 <ISPProtocol_ProgramMemory+0x260>
   80a1c:	463b      	mov	r3, r7
   80a1e:	463a      	mov	r2, r7
   80a20:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80a24:	4630      	mov	r0, r6
   80a26:	47a8      	blx	r5
   80a28:	463b      	mov	r3, r7
   80a2a:	463a      	mov	r2, r7
   80a2c:	f89a 1000 	ldrb.w	r1, [sl]
   80a30:	4630      	mov	r0, r6
   80a32:	47a8      	blx	r5
   80a34:	463b      	mov	r3, r7
   80a36:	463a      	mov	r2, r7
   80a38:	4659      	mov	r1, fp
   80a3a:	4630      	mov	r0, r6
   80a3c:	47a8      	blx	r5
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80a3e:	9b02      	ldr	r3, [sp, #8]
   80a40:	2b13      	cmp	r3, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80a42:	bf04      	itt	eq
   80a44:	f089 0908 	eoreq.w	r9, r9, #8
   80a48:	f88d 9028 	strbeq.w	r9, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80a4c:	9b04      	ldr	r3, [sp, #16]
   80a4e:	2b00      	cmp	r3, #0
   80a50:	d1b1      	bne.n	809b6 <ISPProtocol_ProgramMemory+0x176>
   80a52:	9b06      	ldr	r3, [sp, #24]
   80a54:	455b      	cmp	r3, fp
   80a56:	d0aa      	beq.n	809ae <ISPProtocol_ProgramMemory+0x16e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80a58:	f014 0f01 	tst.w	r4, #1
   80a5c:	d003      	beq.n	80a66 <ISPProtocol_ProgramMemory+0x226>
   80a5e:	9b02      	ldr	r3, [sp, #8]
   80a60:	2b13      	cmp	r3, #19
   80a62:	f43f af2c 	beq.w	808be <ISPProtocol_ProgramMemory+0x7e>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80a66:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a6a:	f023 0308 	bic.w	r3, r3, #8
   80a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a72:	4b0b      	ldr	r3, [pc, #44]	; (80aa0 <ISPProtocol_ProgramMemory+0x260>)
   80a74:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a76:	f018 0f01 	tst.w	r8, #1
   80a7a:	f47f af3d 	bne.w	808f8 <ISPProtocol_ProgramMemory+0xb8>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80a7e:	2b00      	cmp	r3, #0
   80a80:	f47f af38 	bne.w	808f4 <ISPProtocol_ProgramMemory+0xb4>
   80a84:	f018 0f08 	tst.w	r8, #8
   80a88:	d198      	bne.n	809bc <ISPProtocol_ProgramMemory+0x17c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80a8a:	f028 0806 	bic.w	r8, r8, #6
   80a8e:	f048 0802 	orr.w	r8, r8, #2
   80a92:	e793      	b.n	809bc <ISPProtocol_ProgramMemory+0x17c>
   80a94:	20002b90 	.word	0x20002b90
   80a98:	0008cc4c 	.word	0x0008cc4c
   80a9c:	000860d1 	.word	0x000860d1
   80aa0:	20002b70 	.word	0x20002b70
   80aa4:	20002b50 	.word	0x20002b50
   80aa8:	20002b4e 	.word	0x20002b4e
   80aac:	00081121 	.word	0x00081121
   80ab0:	20002b4c 	.word	0x20002b4c
   80ab4:	40008000 	.word	0x40008000
   80ab8:	0008416f 	.word	0x0008416f
   80abc:	00081161 	.word	0x00081161

00080ac0 <ISPProtocol_ReadMemory>:
 *  words or pages of data from the attached device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadMemory(uint8_t V2Command, uint8_t * buffer)
{
   80ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac4:	b085      	sub	sp, #20
   80ac6:	9000      	str	r0, [sp, #0]
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80ac8:	4b45      	ldr	r3, [pc, #276]	; (80be0 <ISPProtocol_ReadMemory+0x120>)
   80aca:	899b      	ldrh	r3, [r3, #12]
   80acc:	2b03      	cmp	r3, #3
   80ace:	d118      	bne.n	80b02 <ISPProtocol_ReadMemory+0x42>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80ad0:	4b43      	ldr	r3, [pc, #268]	; (80be0 <ISPProtocol_ReadMemory+0x120>)
   80ad2:	689b      	ldr	r3, [r3, #8]
   80ad4:	681b      	ldr	r3, [r3, #0]
   80ad6:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80ad8:	4a42      	ldr	r2, [pc, #264]	; (80be4 <ISPProtocol_ReadMemory+0x124>)
   80ada:	9800      	ldr	r0, [sp, #0]
   80adc:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80ade:	20c0      	movs	r0, #192	; 0xc0
   80ae0:	7050      	strb	r0, [r2, #1]
	avrisp_status_payload_size = 2;
   80ae2:	4a41      	ldr	r2, [pc, #260]	; (80be8 <ISPProtocol_ReadMemory+0x128>)
   80ae4:	2002      	movs	r0, #2
   80ae6:	8010      	strh	r0, [r2, #0]
		
	//printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80ae8:	b29b      	uxth	r3, r3
   80aea:	9301      	str	r3, [sp, #4]
   80aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80af0:	d872      	bhi.n	80bd8 <ISPProtocol_ReadMemory+0x118>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80af2:	2b00      	cmp	r3, #0
   80af4:	d06a      	beq.n	80bcc <ISPProtocol_ReadMemory+0x10c>
   80af6:	f101 38ff 	add.w	r8, r1, #4294967295
   80afa:	2700      	movs	r7, #0
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
			MustLoadExtendedAddress = false;
   80afc:	463e      	mov	r6, r7
   80afe:	4c3b      	ldr	r4, [pc, #236]	; (80bec <ISPProtocol_ReadMemory+0x12c>)
   80b00:	e026      	b.n	80b50 <ISPProtocol_ReadMemory+0x90>
		printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80b02:	4619      	mov	r1, r3
   80b04:	483a      	ldr	r0, [pc, #232]	; (80bf0 <ISPProtocol_ReadMemory+0x130>)
   80b06:	4b3b      	ldr	r3, [pc, #236]	; (80bf4 <ISPProtocol_ReadMemory+0x134>)
   80b08:	4798      	blx	r3
		return;
   80b0a:	e065      	b.n	80bd8 <ISPProtocol_ReadMemory+0x118>
			ISPTarget_LoadExtendedAddress();
   80b0c:	4b3a      	ldr	r3, [pc, #232]	; (80bf8 <ISPProtocol_ReadMemory+0x138>)
   80b0e:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80b10:	4b3a      	ldr	r3, [pc, #232]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b12:	701e      	strb	r6, [r3, #0]
   80b14:	e022      	b.n	80b5c <ISPProtocol_ReadMemory+0x9c>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80b16:	f089 0908 	eor.w	r9, r9, #8
   80b1a:	f88d 900e 	strb.w	r9, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80b1e:	f01b 0f01 	tst.w	fp, #1
   80b22:	d010      	beq.n	80b46 <ISPProtocol_ReadMemory+0x86>
		{
			CurrentAddress++;
   80b24:	4a36      	ldr	r2, [pc, #216]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80b26:	6813      	ldr	r3, [r2, #0]
   80b28:	3301      	adds	r3, #1
   80b2a:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80b2c:	e006      	b.n	80b3c <ISPProtocol_ReadMemory+0x7c>
			CurrentAddress++;
   80b2e:	4a34      	ldr	r2, [pc, #208]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80b30:	6813      	ldr	r3, [r2, #0]
   80b32:	3301      	adds	r3, #1
   80b34:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80b36:	9a00      	ldr	r2, [sp, #0]
   80b38:	2a16      	cmp	r2, #22
   80b3a:	d004      	beq.n	80b46 <ISPProtocol_ReadMemory+0x86>
   80b3c:	b29b      	uxth	r3, r3
   80b3e:	b913      	cbnz	r3, 80b46 <ISPProtocol_ReadMemory+0x86>
			  MustLoadExtendedAddress = true;
   80b40:	2301      	movs	r3, #1
   80b42:	4a2e      	ldr	r2, [pc, #184]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b44:	7013      	strb	r3, [r2, #0]
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80b46:	3701      	adds	r7, #1
   80b48:	b2bb      	uxth	r3, r7
   80b4a:	9a01      	ldr	r2, [sp, #4]
   80b4c:	429a      	cmp	r2, r3
   80b4e:	d93d      	bls.n	80bcc <ISPProtocol_ReadMemory+0x10c>
   80b50:	fa1f fb87 	uxth.w	fp, r7
		if (MustLoadExtendedAddress)
   80b54:	4b29      	ldr	r3, [pc, #164]	; (80bfc <ISPProtocol_ReadMemory+0x13c>)
   80b56:	781b      	ldrb	r3, [r3, #0]
   80b58:	2b00      	cmp	r3, #0
   80b5a:	d1d7      	bne.n	80b0c <ISPProtocol_ReadMemory+0x4c>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80b5c:	f89d 900e 	ldrb.w	r9, [sp, #14]
   80b60:	4633      	mov	r3, r6
   80b62:	4632      	mov	r2, r6
   80b64:	4649      	mov	r1, r9
   80b66:	4620      	mov	r0, r4
   80b68:	4d26      	ldr	r5, [pc, #152]	; (80c04 <ISPProtocol_ReadMemory+0x144>)
   80b6a:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b6c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80c00 <ISPProtocol_ReadMemory+0x140>
   80b70:	4633      	mov	r3, r6
   80b72:	4632      	mov	r2, r6
   80b74:	f89a 1001 	ldrb.w	r1, [sl, #1]
   80b78:	4620      	mov	r0, r4
   80b7a:	47a8      	blx	r5
   80b7c:	4633      	mov	r3, r6
   80b7e:	4632      	mov	r2, r6
   80b80:	f89a 1000 	ldrb.w	r1, [sl]
   80b84:	4620      	mov	r0, r4
   80b86:	47a8      	blx	r5
   80b88:	4633      	mov	r3, r6
   80b8a:	4632      	mov	r2, r6
   80b8c:	4631      	mov	r1, r6
   80b8e:	4620      	mov	r0, r4
   80b90:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80b92:	6923      	ldr	r3, [r4, #16]
   80b94:	f413 7f00 	tst.w	r3, #512	; 0x200
   80b98:	d0fb      	beq.n	80b92 <ISPProtocol_ReadMemory+0xd2>
			uint32_t ReceivedByte;
			usart_getchar(AVRISP_USART, &ReceivedByte);
#else
			uint16_t ReceivedByte;
			uint8_t _;
			spi_read(SPI, &ReceivedByte, &_);
   80b9a:	f10d 0209 	add.w	r2, sp, #9
   80b9e:	f10d 010a 	add.w	r1, sp, #10
   80ba2:	4620      	mov	r0, r4
   80ba4:	4b18      	ldr	r3, [pc, #96]	; (80c08 <ISPProtocol_ReadMemory+0x148>)
   80ba6:	4798      	blx	r3
#endif		
			#if defined(INVERTED_ISP_MISO)
			return ~ReceivedByte;
			#else
			return  ReceivedByte;
   80ba8:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80bac:	f808 3f01 	strb.w	r3, [r8, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80bb0:	9b00      	ldr	r3, [sp, #0]
   80bb2:	2b14      	cmp	r3, #20
   80bb4:	d0af      	beq.n	80b16 <ISPProtocol_ReadMemory+0x56>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80bb6:	f01b 0f01 	tst.w	fp, #1
   80bba:	d1b8      	bne.n	80b2e <ISPProtocol_ReadMemory+0x6e>
   80bbc:	9b00      	ldr	r3, [sp, #0]
   80bbe:	2b16      	cmp	r3, #22
   80bc0:	d1c1      	bne.n	80b46 <ISPProtocol_ReadMemory+0x86>
			CurrentAddress++;
   80bc2:	4a0f      	ldr	r2, [pc, #60]	; (80c00 <ISPProtocol_ReadMemory+0x140>)
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	3301      	adds	r3, #1
   80bc8:	6013      	str	r3, [r2, #0]
			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80bca:	e7bc      	b.n	80b46 <ISPProtocol_ReadMemory+0x86>
		}
	}

	//printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80bcc:	4b05      	ldr	r3, [pc, #20]	; (80be4 <ISPProtocol_ReadMemory+0x124>)
   80bce:	2200      	movs	r2, #0
   80bd0:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80bd2:	4b05      	ldr	r3, [pc, #20]	; (80be8 <ISPProtocol_ReadMemory+0x128>)
   80bd4:	2202      	movs	r2, #2
   80bd6:	801a      	strh	r2, [r3, #0]
}
   80bd8:	b005      	add	sp, #20
   80bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80bde:	bf00      	nop
   80be0:	20002b90 	.word	0x20002b90
   80be4:	20002b50 	.word	0x20002b50
   80be8:	20002b4e 	.word	0x20002b4e
   80bec:	40008000 	.word	0x40008000
   80bf0:	0008cbf4 	.word	0x0008cbf4
   80bf4:	000860d1 	.word	0x000860d1
   80bf8:	00081121 	.word	0x00081121
   80bfc:	20002b4c 	.word	0x20002b4c
   80c00:	20002b70 	.word	0x20002b70
   80c04:	0008416f 	.word	0x0008416f
   80c08:	00084141 	.word	0x00084141

00080c0c <ISPProtocol_ReadFuseLockSigOSCCAL>:
 *  reading the requested configuration byte from the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_ReadFuseLockSigOSCCAL(uint8_t V2Command)
{
   80c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c10:	b085      	sub	sp, #20
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80c12:	4b21      	ldr	r3, [pc, #132]	; (80c98 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c14:	8999      	ldrh	r1, [r3, #12]
   80c16:	2905      	cmp	r1, #5
   80c18:	d139      	bne.n	80c8e <ISPProtocol_ReadFuseLockSigOSCCAL+0x82>
   80c1a:	4607      	mov	r7, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80c1c:	4b1e      	ldr	r3, [pc, #120]	; (80c98 <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80c1e:	689b      	ldr	r3, [r3, #8]
   80c20:	6818      	ldr	r0, [r3, #0]
   80c22:	9002      	str	r0, [sp, #8]
   80c24:	791a      	ldrb	r2, [r3, #4]
   80c26:	f88d 200c 	strb.w	r2, [sp, #12]
   80c2a:	f893 b000 	ldrb.w	fp, [r3]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80c2e:	f10d 0609 	add.w	r6, sp, #9
   80c32:	ad01      	add	r5, sp, #4
   80c34:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80c38:	4c18      	ldr	r4, [pc, #96]	; (80c9c <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80c3a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80cb0 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa4>
			spi_read(SPI, &ReceivedByte, &_);
   80c3e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80cb4 <ISPProtocol_ReadFuseLockSigOSCCAL+0xa8>
		  spi_write(SPI, data, 0, 0);
   80c42:	2300      	movs	r3, #0
   80c44:	461a      	mov	r2, r3
   80c46:	f816 1b01 	ldrb.w	r1, [r6], #1
   80c4a:	4620      	mov	r0, r4
   80c4c:	47c8      	blx	r9
   80c4e:	6923      	ldr	r3, [r4, #16]
   80c50:	f413 7f00 	tst.w	r3, #512	; 0x200
   80c54:	d0fb      	beq.n	80c4e <ISPProtocol_ReadFuseLockSigOSCCAL+0x42>
			spi_read(SPI, &ReceivedByte, &_);
   80c56:	f10d 0201 	add.w	r2, sp, #1
   80c5a:	f10d 0102 	add.w	r1, sp, #2
   80c5e:	4620      	mov	r0, r4
   80c60:	47c0      	blx	r8
			return  ReceivedByte;
   80c62:	f89d 3002 	ldrb.w	r3, [sp, #2]
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80c66:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80c6a:	4555      	cmp	r5, sl
   80c6c:	d1e9      	bne.n	80c42 <ISPProtocol_ReadFuseLockSigOSCCAL+0x36>

	avrisp_status_payload[0] = V2Command;
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>)
   80c70:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80c72:	2200      	movs	r2, #0
   80c74:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80c76:	a904      	add	r1, sp, #16
   80c78:	448b      	add	fp, r1
   80c7a:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80c7e:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80c80:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80c82:	4b08      	ldr	r3, [pc, #32]	; (80ca4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>)
   80c84:	2204      	movs	r2, #4
   80c86:	801a      	strh	r2, [r3, #0]
}
   80c88:	b005      	add	sp, #20
   80c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80c8e:	4806      	ldr	r0, [pc, #24]	; (80ca8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x9c>)
   80c90:	4b06      	ldr	r3, [pc, #24]	; (80cac <ISPProtocol_ReadFuseLockSigOSCCAL+0xa0>)
   80c92:	4798      	blx	r3
		return;
   80c94:	e7f8      	b.n	80c88 <ISPProtocol_ReadFuseLockSigOSCCAL+0x7c>
   80c96:	bf00      	nop
   80c98:	20002b90 	.word	0x20002b90
   80c9c:	40008000 	.word	0x40008000
   80ca0:	20002b50 	.word	0x20002b50
   80ca4:	20002b4e 	.word	0x20002b4e
   80ca8:	0008cc4c 	.word	0x0008cc4c
   80cac:	000860d1 	.word	0x000860d1
   80cb0:	0008416f 	.word	0x0008416f
   80cb4:	00084141 	.word	0x00084141

00080cb8 <ISPProtocol_WriteFuseLock>:
 *  byte to the device.
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
void ISPProtocol_WriteFuseLock(uint8_t V2Command)
{
   80cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80cbc:	b083      	sub	sp, #12
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80cbe:	4b13      	ldr	r3, [pc, #76]	; (80d0c <ISPProtocol_WriteFuseLock+0x54>)
   80cc0:	8999      	ldrh	r1, [r3, #12]
   80cc2:	2904      	cmp	r1, #4
   80cc4:	d11d      	bne.n	80d02 <ISPProtocol_WriteFuseLock+0x4a>
   80cc6:	4605      	mov	r5, r0
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80cc8:	4b10      	ldr	r3, [pc, #64]	; (80d0c <ISPProtocol_WriteFuseLock+0x54>)
   80cca:	689b      	ldr	r3, [r3, #8]
   80ccc:	681b      	ldr	r3, [r3, #0]
   80cce:	9301      	str	r3, [sp, #4]

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80cd0:	ac01      	add	r4, sp, #4
   80cd2:	f10d 0908 	add.w	r9, sp, #8
		  spi_write(SPI, data, 0, 0);
   80cd6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80d24 <ISPProtocol_WriteFuseLock+0x6c>
   80cda:	2700      	movs	r7, #0
   80cdc:	4e0c      	ldr	r6, [pc, #48]	; (80d10 <ISPProtocol_WriteFuseLock+0x58>)
   80cde:	463b      	mov	r3, r7
   80ce0:	463a      	mov	r2, r7
   80ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
   80ce6:	4640      	mov	r0, r8
   80ce8:	47b0      	blx	r6
   80cea:	454c      	cmp	r4, r9
   80cec:	d1f7      	bne.n	80cde <ISPProtocol_WriteFuseLock+0x26>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80cee:	4b09      	ldr	r3, [pc, #36]	; (80d14 <ISPProtocol_WriteFuseLock+0x5c>)
   80cf0:	701d      	strb	r5, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80cf2:	2200      	movs	r2, #0
   80cf4:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80cf6:	4b08      	ldr	r3, [pc, #32]	; (80d18 <ISPProtocol_WriteFuseLock+0x60>)
   80cf8:	2202      	movs	r2, #2
   80cfa:	801a      	strh	r2, [r3, #0]
}
   80cfc:	b003      	add	sp, #12
   80cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d02:	4806      	ldr	r0, [pc, #24]	; (80d1c <ISPProtocol_WriteFuseLock+0x64>)
   80d04:	4b06      	ldr	r3, [pc, #24]	; (80d20 <ISPProtocol_WriteFuseLock+0x68>)
   80d06:	4798      	blx	r3
		return;
   80d08:	e7f8      	b.n	80cfc <ISPProtocol_WriteFuseLock+0x44>
   80d0a:	bf00      	nop
   80d0c:	20002b90 	.word	0x20002b90
   80d10:	0008416f 	.word	0x0008416f
   80d14:	20002b50 	.word	0x20002b50
   80d18:	20002b4e 	.word	0x20002b4e
   80d1c:	0008cc4c 	.word	0x0008cc4c
   80d20:	000860d1 	.word	0x000860d1
   80d24:	40008000 	.word	0x40008000

00080d28 <ISPProtocol_SPIMulti>:
/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
	//Not implemented for this device, alternative methods of accessing SPI interface present
	;
}
   80d28:	4770      	bx	lr
	...

00080d2c <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80d2c:	b900      	cbnz	r0, 80d30 <ISPProtocol_DelayMS+0x4>
   80d2e:	4770      	bx	lr
{
   80d30:	b538      	push	{r3, r4, r5, lr}
   80d32:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80d34:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80d38:	2300      	movs	r3, #0
   80d3a:	4806      	ldr	r0, [pc, #24]	; (80d54 <ISPProtocol_DelayMS+0x28>)
   80d3c:	f243 64af 	movw	r4, #13999	; 0x36af
   80d40:	2500      	movs	r5, #0
   80d42:	fbe0 4501 	umlal	r4, r5, r0, r1
   80d46:	4620      	mov	r0, r4
   80d48:	4629      	mov	r1, r5
   80d4a:	4c03      	ldr	r4, [pc, #12]	; (80d58 <ISPProtocol_DelayMS+0x2c>)
   80d4c:	47a0      	blx	r4
   80d4e:	4b03      	ldr	r3, [pc, #12]	; (80d5c <ISPProtocol_DelayMS+0x30>)
   80d50:	4798      	blx	r3
}
   80d52:	bd38      	pop	{r3, r4, r5, pc}
   80d54:	05b8d800 	.word	0x05b8d800
   80d58:	00085d91 	.word	0x00085d91
   80d5c:	20000087 	.word	0x20000087

00080d60 <ISPProtocol_EnterISPMode>:
{
   80d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d64:	b08b      	sub	sp, #44	; 0x2c
	if (udd_g_ctrlreq.payload_size != 11){
   80d66:	4b42      	ldr	r3, [pc, #264]	; (80e70 <ISPProtocol_EnterISPMode+0x110>)
   80d68:	8999      	ldrh	r1, [r3, #12]
   80d6a:	290b      	cmp	r1, #11
   80d6c:	d003      	beq.n	80d76 <ISPProtocol_EnterISPMode+0x16>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80d6e:	4841      	ldr	r0, [pc, #260]	; (80e74 <ISPProtocol_EnterISPMode+0x114>)
   80d70:	4b41      	ldr	r3, [pc, #260]	; (80e78 <ISPProtocol_EnterISPMode+0x118>)
   80d72:	4798      	blx	r3
		return;
   80d74:	e074      	b.n	80e60 <ISPProtocol_EnterISPMode+0x100>
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80d76:	4b3e      	ldr	r3, [pc, #248]	; (80e70 <ISPProtocol_EnterISPMode+0x110>)
   80d78:	689b      	ldr	r3, [r3, #8]
   80d7a:	aa07      	add	r2, sp, #28
   80d7c:	6818      	ldr	r0, [r3, #0]
   80d7e:	6859      	ldr	r1, [r3, #4]
   80d80:	c203      	stmia	r2!, {r0, r1}
   80d82:	8918      	ldrh	r0, [r3, #8]
   80d84:	7a99      	ldrb	r1, [r3, #10]
   80d86:	8010      	strh	r0, [r2, #0]
   80d88:	7091      	strb	r1, [r2, #2]
   80d8a:	785e      	ldrb	r6, [r3, #1]
   80d8c:	9603      	str	r6, [sp, #12]
   80d8e:	7898      	ldrb	r0, [r3, #2]
   80d90:	78dc      	ldrb	r4, [r3, #3]
   80d92:	f893 b004 	ldrb.w	fp, [r3, #4]
   80d96:	795a      	ldrb	r2, [r3, #5]
   80d98:	9202      	str	r2, [sp, #8]
   80d9a:	799b      	ldrb	r3, [r3, #6]
   80d9c:	9301      	str	r3, [sp, #4]
	CurrentAddress = 0;
   80d9e:	4b37      	ldr	r3, [pc, #220]	; (80e7c <ISPProtocol_EnterISPMode+0x11c>)
   80da0:	2200      	movs	r2, #0
   80da2:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80da4:	4d36      	ldr	r5, [pc, #216]	; (80e80 <ISPProtocol_EnterISPMode+0x120>)
   80da6:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80da8:	4b36      	ldr	r3, [pc, #216]	; (80e84 <ISPProtocol_EnterISPMode+0x124>)
   80daa:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80dac:	2001      	movs	r0, #1
   80dae:	4b36      	ldr	r3, [pc, #216]	; (80e88 <ISPProtocol_EnterISPMode+0x128>)
   80db0:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80db2:	4630      	mov	r0, r6
   80db4:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80db6:	f104 38ff 	add.w	r8, r4, #4294967295
   80dba:	fa5f f888 	uxtb.w	r8, r8
   80dbe:	b114      	cbz	r4, 80dc6 <ISPProtocol_EnterISPMode+0x66>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80dc0:	462f      	mov	r7, r5
   80dc2:	4c32      	ldr	r4, [pc, #200]	; (80e8c <ISPProtocol_EnterISPMode+0x12c>)
   80dc4:	e01c      	b.n	80e00 <ISPProtocol_EnterISPMode+0xa0>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80dc6:	24c0      	movs	r4, #192	; 0xc0
   80dc8:	e03f      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80dca:	9b01      	ldr	r3, [sp, #4]
   80dcc:	2b00      	cmp	r3, #0
   80dce:	d03b      	beq.n	80e48 <ISPProtocol_EnterISPMode+0xe8>
   80dd0:	aa0a      	add	r2, sp, #40	; 0x28
   80dd2:	18d3      	adds	r3, r2, r3
   80dd4:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80dd8:	9a02      	ldr	r2, [sp, #8]
   80dda:	4293      	cmp	r3, r2
   80ddc:	d034      	beq.n	80e48 <ISPProtocol_EnterISPMode+0xe8>
			ISPTarget_ChangeTargetResetLine(false);
   80dde:	2000      	movs	r0, #0
   80de0:	4d29      	ldr	r5, [pc, #164]	; (80e88 <ISPProtocol_EnterISPMode+0x128>)
   80de2:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80de4:	9e03      	ldr	r6, [sp, #12]
   80de6:	4630      	mov	r0, r6
   80de8:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80dea:	2001      	movs	r0, #1
   80dec:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80dee:	4630      	mov	r0, r6
   80df0:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80df2:	f108 38ff 	add.w	r8, r8, #4294967295
   80df6:	fa5f f888 	uxtb.w	r8, r8
   80dfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   80dfe:	d034      	beq.n	80e6a <ISPProtocol_EnterISPMode+0x10a>
   80e00:	4b23      	ldr	r3, [pc, #140]	; (80e90 <ISPProtocol_EnterISPMode+0x130>)
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	b37b      	cbz	r3, 80e66 <ISPProtocol_EnterISPMode+0x106>
   80e06:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80e0a:	ad06      	add	r5, sp, #24
   80e0c:	f10d 0a1c 	add.w	sl, sp, #28
   80e10:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80ea4 <ISPProtocol_EnterISPMode+0x144>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80e14:	4658      	mov	r0, fp
   80e16:	47b8      	blx	r7
   80e18:	2300      	movs	r3, #0
   80e1a:	461a      	mov	r2, r3
   80e1c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80e20:	4620      	mov	r0, r4
   80e22:	47c8      	blx	r9
   80e24:	6923      	ldr	r3, [r4, #16]
   80e26:	f413 7f00 	tst.w	r3, #512	; 0x200
   80e2a:	d0fb      	beq.n	80e24 <ISPProtocol_EnterISPMode+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80e2c:	f10d 0215 	add.w	r2, sp, #21
   80e30:	f10d 0116 	add.w	r1, sp, #22
   80e34:	4620      	mov	r0, r4
   80e36:	4b17      	ldr	r3, [pc, #92]	; (80e94 <ISPProtocol_EnterISPMode+0x134>)
   80e38:	4798      	blx	r3
			return  ReceivedByte;
   80e3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80e3e:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80e42:	4555      	cmp	r5, sl
   80e44:	d1e6      	bne.n	80e14 <ISPProtocol_EnterISPMode+0xb4>
   80e46:	e7c0      	b.n	80dca <ISPProtocol_EnterISPMode+0x6a>
			ResponseStatus = STATUS_CMD_OK;
   80e48:	2400      	movs	r4, #0
	printf("AVRPROG: Enter ISP Mode: %x\n", ResponseStatus);
   80e4a:	4621      	mov	r1, r4
   80e4c:	4812      	ldr	r0, [pc, #72]	; (80e98 <ISPProtocol_EnterISPMode+0x138>)
   80e4e:	4b0a      	ldr	r3, [pc, #40]	; (80e78 <ISPProtocol_EnterISPMode+0x118>)
   80e50:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80e52:	4b12      	ldr	r3, [pc, #72]	; (80e9c <ISPProtocol_EnterISPMode+0x13c>)
   80e54:	2210      	movs	r2, #16
   80e56:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80e58:	705c      	strb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   80e5a:	4b11      	ldr	r3, [pc, #68]	; (80ea0 <ISPProtocol_EnterISPMode+0x140>)
   80e5c:	2202      	movs	r2, #2
   80e5e:	801a      	strh	r2, [r3, #0]
}
   80e60:	b00b      	add	sp, #44	; 0x2c
   80e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80e66:	24c0      	movs	r4, #192	; 0xc0
   80e68:	e7ef      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
   80e6a:	24c0      	movs	r4, #192	; 0xc0
   80e6c:	e7ed      	b.n	80e4a <ISPProtocol_EnterISPMode+0xea>
   80e6e:	bf00      	nop
   80e70:	20002b90 	.word	0x20002b90
   80e74:	0008cc4c 	.word	0x0008cc4c
   80e78:	000860d1 	.word	0x000860d1
   80e7c:	20002b70 	.word	0x20002b70
   80e80:	00080d2d 	.word	0x00080d2d
   80e84:	00080fa1 	.word	0x00080fa1
   80e88:	00081061 	.word	0x00081061
   80e8c:	40008000 	.word	0x40008000
   80e90:	20002b78 	.word	0x20002b78
   80e94:	00084141 	.word	0x00084141
   80e98:	0008cc1c 	.word	0x0008cc1c
   80e9c:	20002b50 	.word	0x20002b50
   80ea0:	20002b4e 	.word	0x20002b4e
   80ea4:	0008416f 	.word	0x0008416f

00080ea8 <ISPProtocol_LeaveISPMode>:
{
   80ea8:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.payload_size != 2){
   80eaa:	4b0f      	ldr	r3, [pc, #60]	; (80ee8 <ISPProtocol_LeaveISPMode+0x40>)
   80eac:	8999      	ldrh	r1, [r3, #12]
   80eae:	2902      	cmp	r1, #2
   80eb0:	d003      	beq.n	80eba <ISPProtocol_LeaveISPMode+0x12>
		printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80eb2:	480e      	ldr	r0, [pc, #56]	; (80eec <ISPProtocol_LeaveISPMode+0x44>)
   80eb4:	4b0e      	ldr	r3, [pc, #56]	; (80ef0 <ISPProtocol_LeaveISPMode+0x48>)
   80eb6:	4798      	blx	r3
}
   80eb8:	bd38      	pop	{r3, r4, r5, pc}
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80eba:	4b0b      	ldr	r3, [pc, #44]	; (80ee8 <ISPProtocol_LeaveISPMode+0x40>)
   80ebc:	689b      	ldr	r3, [r3, #8]
   80ebe:	881d      	ldrh	r5, [r3, #0]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80ec0:	b2e8      	uxtb	r0, r5
   80ec2:	4c0c      	ldr	r4, [pc, #48]	; (80ef4 <ISPProtocol_LeaveISPMode+0x4c>)
   80ec4:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80ec6:	2000      	movs	r0, #0
   80ec8:	4b0b      	ldr	r3, [pc, #44]	; (80ef8 <ISPProtocol_LeaveISPMode+0x50>)
   80eca:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80ecc:	4b0b      	ldr	r3, [pc, #44]	; (80efc <ISPProtocol_LeaveISPMode+0x54>)
   80ece:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80ed0:	0a28      	lsrs	r0, r5, #8
   80ed2:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80ed4:	4b0a      	ldr	r3, [pc, #40]	; (80f00 <ISPProtocol_LeaveISPMode+0x58>)
   80ed6:	2211      	movs	r2, #17
   80ed8:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80eda:	2200      	movs	r2, #0
   80edc:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80ede:	4b09      	ldr	r3, [pc, #36]	; (80f04 <ISPProtocol_LeaveISPMode+0x5c>)
   80ee0:	2202      	movs	r2, #2
   80ee2:	801a      	strh	r2, [r3, #0]
   80ee4:	e7e8      	b.n	80eb8 <ISPProtocol_LeaveISPMode+0x10>
   80ee6:	bf00      	nop
   80ee8:	20002b90 	.word	0x20002b90
   80eec:	0008cc4c 	.word	0x0008cc4c
   80ef0:	000860d1 	.word	0x000860d1
   80ef4:	00080d2d 	.word	0x00080d2d
   80ef8:	00081061 	.word	0x00081061
   80efc:	00081049 	.word	0x00081049
   80f00:	20002b50 	.word	0x20002b50
   80f04:	20002b4e 	.word	0x20002b4e

00080f08 <ISPProtocol_ChipErase>:
{
   80f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80f0c:	b082      	sub	sp, #8
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   80f0e:	4b1b      	ldr	r3, [pc, #108]	; (80f7c <ISPProtocol_ChipErase+0x74>)
   80f10:	8999      	ldrh	r1, [r3, #12]
   80f12:	2906      	cmp	r1, #6
   80f14:	d12a      	bne.n	80f6c <ISPProtocol_ChipErase+0x64>
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   80f16:	4b19      	ldr	r3, [pc, #100]	; (80f7c <ISPProtocol_ChipErase+0x74>)
   80f18:	689b      	ldr	r3, [r3, #8]
   80f1a:	6818      	ldr	r0, [r3, #0]
   80f1c:	9000      	str	r0, [sp, #0]
   80f1e:	889a      	ldrh	r2, [r3, #4]
   80f20:	f8ad 2004 	strh.w	r2, [sp, #4]
   80f24:	f893 a000 	ldrb.w	sl, [r3]
   80f28:	f893 9001 	ldrb.w	r9, [r3, #1]
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   80f2c:	f10d 0402 	add.w	r4, sp, #2
   80f30:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   80f34:	4f12      	ldr	r7, [pc, #72]	; (80f80 <ISPProtocol_ChipErase+0x78>)
   80f36:	2600      	movs	r6, #0
   80f38:	4d12      	ldr	r5, [pc, #72]	; (80f84 <ISPProtocol_ChipErase+0x7c>)
   80f3a:	4633      	mov	r3, r6
   80f3c:	4632      	mov	r2, r6
   80f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
   80f42:	4638      	mov	r0, r7
   80f44:	47a8      	blx	r5
   80f46:	4544      	cmp	r4, r8
   80f48:	d1f7      	bne.n	80f3a <ISPProtocol_ChipErase+0x32>
	if (!(Erase_Chip_Params.PollMethod))
   80f4a:	f1b9 0f00 	cmp.w	r9, #0
   80f4e:	d111      	bne.n	80f74 <ISPProtocol_ChipErase+0x6c>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   80f50:	4650      	mov	r0, sl
   80f52:	4b0d      	ldr	r3, [pc, #52]	; (80f88 <ISPProtocol_ChipErase+0x80>)
   80f54:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   80f56:	4b0d      	ldr	r3, [pc, #52]	; (80f8c <ISPProtocol_ChipErase+0x84>)
   80f58:	2212      	movs	r2, #18
   80f5a:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f5c:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   80f60:	4b0b      	ldr	r3, [pc, #44]	; (80f90 <ISPProtocol_ChipErase+0x88>)
   80f62:	2202      	movs	r2, #2
   80f64:	801a      	strh	r2, [r3, #0]
}
   80f66:	b002      	add	sp, #8
   80f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("AVRPROG: Erase: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
   80f6c:	4809      	ldr	r0, [pc, #36]	; (80f94 <ISPProtocol_ChipErase+0x8c>)
   80f6e:	4b0a      	ldr	r3, [pc, #40]	; (80f98 <ISPProtocol_ChipErase+0x90>)
   80f70:	4798      	blx	r3
		return;
   80f72:	e7f8      	b.n	80f66 <ISPProtocol_ChipErase+0x5e>
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   80f74:	4b09      	ldr	r3, [pc, #36]	; (80f9c <ISPProtocol_ChipErase+0x94>)
   80f76:	4798      	blx	r3
   80f78:	4681      	mov	r9, r0
   80f7a:	e7ec      	b.n	80f56 <ISPProtocol_ChipErase+0x4e>
   80f7c:	20002b90 	.word	0x20002b90
   80f80:	40008000 	.word	0x40008000
   80f84:	0008416f 	.word	0x0008416f
   80f88:	00080d2d 	.word	0x00080d2d
   80f8c:	20002b50 	.word	0x20002b50
   80f90:	20002b4e 	.word	0x20002b4e
   80f94:	0008cc3c 	.word	0x0008cc3c
   80f98:	000860d1 	.word	0x000860d1
   80f9c:	000810a5 	.word	0x000810a5

00080fa0 <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   80fa0:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   80fa2:	2098      	movs	r0, #152	; 0x98
   80fa4:	4b1e      	ldr	r3, [pc, #120]	; (81020 <ISPTarget_EnableTargetISP+0x80>)
   80fa6:	4798      	blx	r3
   80fa8:	4b1e      	ldr	r3, [pc, #120]	; (81024 <ISPTarget_EnableTargetISP+0x84>)
   80faa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   80fae:	4c1e      	ldr	r4, [pc, #120]	; (81028 <ISPTarget_EnableTargetISP+0x88>)
   80fb0:	4620      	mov	r0, r4
   80fb2:	4b1e      	ldr	r3, [pc, #120]	; (8102c <ISPTarget_EnableTargetISP+0x8c>)
   80fb4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80fb6:	2380      	movs	r3, #128	; 0x80
   80fb8:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80fba:	6863      	ldr	r3, [r4, #4]
   80fbc:	f043 0301 	orr.w	r3, r3, #1
   80fc0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80fc2:	6863      	ldr	r3, [r4, #4]
   80fc4:	f043 0310 	orr.w	r3, r3, #16
   80fc8:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80fca:	6863      	ldr	r3, [r4, #4]
   80fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80fd0:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   80fd2:	4917      	ldr	r1, [pc, #92]	; (81030 <ISPTarget_EnableTargetISP+0x90>)
   80fd4:	4628      	mov	r0, r5
   80fd6:	4b17      	ldr	r3, [pc, #92]	; (81034 <ISPTarget_EnableTargetISP+0x94>)
   80fd8:	4798      	blx	r3
	if (bauddiv < 0){
		bauddiv = 255;
   80fda:	1e04      	subs	r4, r0, #0
   80fdc:	bfb8      	it	lt
   80fde:	24ff      	movlt	r4, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   80fe0:	4d11      	ldr	r5, [pc, #68]	; (81028 <ISPTarget_EnableTargetISP+0x88>)
   80fe2:	2200      	movs	r2, #0
   80fe4:	4611      	mov	r1, r2
   80fe6:	4628      	mov	r0, r5
   80fe8:	4b13      	ldr	r3, [pc, #76]	; (81038 <ISPTarget_EnableTargetISP+0x98>)
   80fea:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80fec:	2201      	movs	r2, #1
   80fee:	2100      	movs	r1, #0
   80ff0:	4628      	mov	r0, r5
   80ff2:	4b12      	ldr	r3, [pc, #72]	; (8103c <ISPTarget_EnableTargetISP+0x9c>)
   80ff4:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   80ff6:	b2e2      	uxtb	r2, r4
   80ff8:	2100      	movs	r1, #0
   80ffa:	4628      	mov	r0, r5
   80ffc:	4b10      	ldr	r3, [pc, #64]	; (81040 <ISPTarget_EnableTargetISP+0xa0>)
   80ffe:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81000:	2301      	movs	r3, #1
   81002:	602b      	str	r3, [r5, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   81004:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81008:	200e      	movs	r0, #14
   8100a:	4c0e      	ldr	r4, [pc, #56]	; (81044 <ISPTarget_EnableTargetISP+0xa4>)
   8100c:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   8100e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81012:	200d      	movs	r0, #13
   81014:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81016:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8101a:	200f      	movs	r0, #15
   8101c:	47a0      	blx	r4
#endif

}
   8101e:	bd38      	pop	{r3, r4, r5, pc}
   81020:	00082395 	.word	0x00082395
   81024:	200002ec 	.word	0x200002ec
   81028:	40008000 	.word	0x40008000
   8102c:	00084121 	.word	0x00084121
   81030:	05b8d800 	.word	0x05b8d800
   81034:	000841df 	.word	0x000841df
   81038:	000841a3 	.word	0x000841a3
   8103c:	000841c1 	.word	0x000841c1
   81040:	000841f5 	.word	0x000841f5
   81044:	00083d59 	.word	0x00083d59

00081048 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81048:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8104a:	4803      	ldr	r0, [pc, #12]	; (81058 <ISPTarget_DisableTargetISP+0x10>)
   8104c:	2302      	movs	r3, #2
   8104e:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   81050:	4b02      	ldr	r3, [pc, #8]	; (8105c <ISPTarget_DisableTargetISP+0x14>)
   81052:	4798      	blx	r3
#endif
}
   81054:	bd08      	pop	{r3, pc}
   81056:	bf00      	nop
   81058:	40008000 	.word	0x40008000
   8105c:	00084131 	.word	0x00084131

00081060 <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   81060:	b508      	push	{r3, lr}
	if (ResetTarget)
   81062:	b180      	cbz	r0, 81086 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81064:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81068:	2011      	movs	r0, #17
   8106a:	4b0a      	ldr	r3, [pc, #40]	; (81094 <ISPTarget_ChangeTargetResetLine+0x34>)
   8106c:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8106e:	209e      	movs	r0, #158	; 0x9e
   81070:	4b09      	ldr	r3, [pc, #36]	; (81098 <ISPTarget_ChangeTargetResetLine+0x38>)
   81072:	4798      	blx	r3
   81074:	b918      	cbnz	r0, 8107e <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81076:	2011      	movs	r0, #17
   81078:	4b08      	ldr	r3, [pc, #32]	; (8109c <ISPTarget_ChangeTargetResetLine+0x3c>)
   8107a:	4798      	blx	r3
   8107c:	e008      	b.n	81090 <ISPTarget_ChangeTargetResetLine+0x30>
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8107e:	2011      	movs	r0, #17
   81080:	4b07      	ldr	r3, [pc, #28]	; (810a0 <ISPTarget_ChangeTargetResetLine+0x40>)
   81082:	4798      	blx	r3
   81084:	e004      	b.n	81090 <ISPTarget_ChangeTargetResetLine+0x30>
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81086:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8108a:	2011      	movs	r0, #17
   8108c:	4b01      	ldr	r3, [pc, #4]	; (81094 <ISPTarget_ChangeTargetResetLine+0x34>)
   8108e:	4798      	blx	r3
	}
}
   81090:	bd08      	pop	{r3, pc}
   81092:	bf00      	nop
   81094:	00083d59 	.word	0x00083d59
   81098:	00082395 	.word	0x00082395
   8109c:	00083d25 	.word	0x00083d25
   810a0:	00083d3f 	.word	0x00083d3f

000810a4 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   810a4:	b570      	push	{r4, r5, r6, lr}
   810a6:	b082      	sub	sp, #8
   810a8:	4c19      	ldr	r4, [pc, #100]	; (81110 <ISPTarget_WaitWhileTargetBusy+0x6c>)
   810aa:	2600      	movs	r6, #0
   810ac:	4d19      	ldr	r5, [pc, #100]	; (81114 <ISPTarget_WaitWhileTargetBusy+0x70>)
   810ae:	4633      	mov	r3, r6
   810b0:	4632      	mov	r2, r6
   810b2:	21f0      	movs	r1, #240	; 0xf0
   810b4:	4620      	mov	r0, r4
   810b6:	47a8      	blx	r5
   810b8:	4633      	mov	r3, r6
   810ba:	4632      	mov	r2, r6
   810bc:	4631      	mov	r1, r6
   810be:	4620      	mov	r0, r4
   810c0:	47a8      	blx	r5
   810c2:	4633      	mov	r3, r6
   810c4:	4632      	mov	r2, r6
   810c6:	4631      	mov	r1, r6
   810c8:	4620      	mov	r0, r4
   810ca:	47a8      	blx	r5
   810cc:	4633      	mov	r3, r6
   810ce:	4632      	mov	r2, r6
   810d0:	4631      	mov	r1, r6
   810d2:	4620      	mov	r0, r4
   810d4:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   810d6:	6923      	ldr	r3, [r4, #16]
   810d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   810dc:	d0fb      	beq.n	810d6 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   810de:	f10d 0205 	add.w	r2, sp, #5
   810e2:	f10d 0106 	add.w	r1, sp, #6
   810e6:	4620      	mov	r0, r4
   810e8:	4b0b      	ldr	r3, [pc, #44]	; (81118 <ISPTarget_WaitWhileTargetBusy+0x74>)
   810ea:	4798      	blx	r3
			return  ReceivedByte;
   810ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   810f0:	f010 0001 	ands.w	r0, r0, #1
   810f4:	d005      	beq.n	81102 <ISPTarget_WaitWhileTargetBusy+0x5e>
   810f6:	4b09      	ldr	r3, [pc, #36]	; (8111c <ISPTarget_WaitWhileTargetBusy+0x78>)
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	2b00      	cmp	r3, #0
   810fc:	d1d7      	bne.n	810ae <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   810fe:	2081      	movs	r0, #129	; 0x81
   81100:	e004      	b.n	8110c <ISPTarget_WaitWhileTargetBusy+0x68>
   81102:	4b06      	ldr	r3, [pc, #24]	; (8111c <ISPTarget_WaitWhileTargetBusy+0x78>)
   81104:	681b      	ldr	r3, [r3, #0]
   81106:	2b00      	cmp	r3, #0
   81108:	bf08      	it	eq
   8110a:	2081      	moveq	r0, #129	; 0x81
}
   8110c:	b002      	add	sp, #8
   8110e:	bd70      	pop	{r4, r5, r6, pc}
   81110:	40008000 	.word	0x40008000
   81114:	0008416f 	.word	0x0008416f
   81118:	00084141 	.word	0x00084141
   8111c:	20002b78 	.word	0x20002b78

00081120 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81120:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81122:	4d0c      	ldr	r5, [pc, #48]	; (81154 <ISPTarget_LoadExtendedAddress+0x34>)
   81124:	2300      	movs	r3, #0
   81126:	461a      	mov	r2, r3
   81128:	214d      	movs	r1, #77	; 0x4d
   8112a:	4628      	mov	r0, r5
   8112c:	4c0a      	ldr	r4, [pc, #40]	; (81158 <ISPTarget_LoadExtendedAddress+0x38>)
   8112e:	47a0      	blx	r4
   81130:	2300      	movs	r3, #0
   81132:	461a      	mov	r2, r3
   81134:	4619      	mov	r1, r3
   81136:	4628      	mov	r0, r5
   81138:	47a0      	blx	r4
   8113a:	2300      	movs	r3, #0
   8113c:	461a      	mov	r2, r3
   8113e:	4907      	ldr	r1, [pc, #28]	; (8115c <ISPTarget_LoadExtendedAddress+0x3c>)
   81140:	7889      	ldrb	r1, [r1, #2]
   81142:	4628      	mov	r0, r5
   81144:	47a0      	blx	r4
   81146:	2300      	movs	r3, #0
   81148:	461a      	mov	r2, r3
   8114a:	4619      	mov	r1, r3
   8114c:	4628      	mov	r0, r5
   8114e:	47a0      	blx	r4
	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
	ISPTarget_SendByte(0x00);
	ISPTarget_SendByte(CurrentAddress >> 16);
	ISPTarget_SendByte(0x00);
}
   81150:	bd38      	pop	{r3, r4, r5, pc}
   81152:	bf00      	nop
   81154:	40008000 	.word	0x40008000
   81158:	0008416f 	.word	0x0008416f
   8115c:	20002b70 	.word	0x20002b70

00081160 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81164:	b082      	sub	sp, #8
   81166:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8116a:	f000 047e 	and.w	r4, r0, #126	; 0x7e
   8116e:	2c20      	cmp	r4, #32
   81170:	dc18      	bgt.n	811a4 <ISPTarget_WaitForProgComplete+0x44>
   81172:	460e      	mov	r6, r1
   81174:	4617      	mov	r7, r2
   81176:	2c01      	cmp	r4, #1
   81178:	dd5b      	ble.n	81232 <ISPTarget_WaitForProgComplete+0xd2>
   8117a:	3c02      	subs	r4, #2
   8117c:	2c1e      	cmp	r4, #30
   8117e:	d85a      	bhi.n	81236 <ISPTarget_WaitForProgComplete+0xd6>
   81180:	e8df f004 	tbb	[pc, r4]
   81184:	591e5919 	.word	0x591e5919
   81188:	59545959 	.word	0x59545959
   8118c:	59595959 	.word	0x59595959
   81190:	59195959 	.word	0x59195959
   81194:	59595959 	.word	0x59595959
   81198:	59595959 	.word	0x59595959
   8119c:	59595959 	.word	0x59595959
   811a0:	5959      	.short	0x5959
   811a2:	1e          	.byte	0x1e
   811a3:	00          	.byte	0x00
   811a4:	2c40      	cmp	r4, #64	; 0x40
   811a6:	d041      	beq.n	8122c <ISPTarget_WaitForProgComplete+0xcc>
   811a8:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   811aa:	4b24      	ldr	r3, [pc, #144]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   811ac:	2264      	movs	r2, #100	; 0x64
   811ae:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   811b0:	b002      	add	sp, #8
   811b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ISPProtocol_DelayMS(DelayMS);
   811b6:	4618      	mov	r0, r3
   811b8:	4b21      	ldr	r3, [pc, #132]	; (81240 <ISPTarget_WaitForProgComplete+0xe0>)
   811ba:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   811bc:	2000      	movs	r0, #0
			break;
   811be:	e7f4      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
				ISPTarget_SendByte(PollAddress >> 8);
   811c0:	ea4f 2a11 	mov.w	sl, r1, lsr #8
   811c4:	4c1f      	ldr	r4, [pc, #124]	; (81244 <ISPTarget_WaitForProgComplete+0xe4>)
   811c6:	f04f 0900 	mov.w	r9, #0
   811ca:	4d1f      	ldr	r5, [pc, #124]	; (81248 <ISPTarget_WaitForProgComplete+0xe8>)
   811cc:	464b      	mov	r3, r9
   811ce:	464a      	mov	r2, r9
   811d0:	4641      	mov	r1, r8
   811d2:	4620      	mov	r0, r4
   811d4:	47a8      	blx	r5
   811d6:	464b      	mov	r3, r9
   811d8:	464a      	mov	r2, r9
   811da:	4651      	mov	r1, sl
   811dc:	4620      	mov	r0, r4
   811de:	47a8      	blx	r5
   811e0:	464b      	mov	r3, r9
   811e2:	464a      	mov	r2, r9
   811e4:	b2f1      	uxtb	r1, r6
   811e6:	4620      	mov	r0, r4
   811e8:	47a8      	blx	r5
   811ea:	464b      	mov	r3, r9
   811ec:	464a      	mov	r2, r9
   811ee:	4649      	mov	r1, r9
   811f0:	4620      	mov	r0, r4
   811f2:	47a8      	blx	r5
   811f4:	6923      	ldr	r3, [r4, #16]
   811f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   811fa:	d0fb      	beq.n	811f4 <ISPTarget_WaitForProgComplete+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   811fc:	f10d 0205 	add.w	r2, sp, #5
   81200:	f10d 0106 	add.w	r1, sp, #6
   81204:	4620      	mov	r0, r4
   81206:	4b11      	ldr	r3, [pc, #68]	; (8124c <ISPTarget_WaitForProgComplete+0xec>)
   81208:	4798      	blx	r3
			return  ReceivedByte;
   8120a:	f89d 3006 	ldrb.w	r3, [sp, #6]
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   8120e:	429f      	cmp	r7, r3
   81210:	d105      	bne.n	8121e <ISPTarget_WaitForProgComplete+0xbe>
   81212:	4b0a      	ldr	r3, [pc, #40]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   81214:	681b      	ldr	r3, [r3, #0]
   81216:	2b00      	cmp	r3, #0
   81218:	d1d8      	bne.n	811cc <ISPTarget_WaitForProgComplete+0x6c>
			  ProgrammingStatus = STATUS_CMD_TOUT;
   8121a:	2080      	movs	r0, #128	; 0x80
   8121c:	e7c5      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
			if (!(TimeoutTicksRemaining))
   8121e:	4b07      	ldr	r3, [pc, #28]	; (8123c <ISPTarget_WaitForProgComplete+0xdc>)
   81220:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81222:	2b00      	cmp	r3, #0
   81224:	bf14      	ite	ne
   81226:	2000      	movne	r0, #0
   81228:	2080      	moveq	r0, #128	; 0x80
   8122a:	e7be      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   8122c:	4b08      	ldr	r3, [pc, #32]	; (81250 <ISPTarget_WaitForProgComplete+0xf0>)
   8122e:	4798      	blx	r3
			break;
   81230:	e7bb      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81232:	2000      	movs	r0, #0
   81234:	e7b9      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
   81236:	2000      	movs	r0, #0
   81238:	e7b7      	b.n	811aa <ISPTarget_WaitForProgComplete+0x4a>
   8123a:	bf00      	nop
   8123c:	20002b78 	.word	0x20002b78
   81240:	00080d2d 	.word	0x00080d2d
   81244:	40008000 	.word	0x40008000
   81248:	0008416f 	.word	0x0008416f
   8124c:	00084141 	.word	0x00084141
   81250:	000810a5 	.word	0x000810a5

00081254 <naeusb_add_in_handler>:
COMPILER_WORD_ALIGNED
uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers >= 16)
   81254:	4b06      	ldr	r3, [pc, #24]	; (81270 <naeusb_add_in_handler+0x1c>)
   81256:	781b      	ldrb	r3, [r3, #0]
   81258:	2b0f      	cmp	r3, #15
   8125a:	d807      	bhi.n	8126c <naeusb_add_in_handler+0x18>
        return false;
    
    naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   8125c:	1c59      	adds	r1, r3, #1
   8125e:	4a04      	ldr	r2, [pc, #16]	; (81270 <naeusb_add_in_handler+0x1c>)
   81260:	7011      	strb	r1, [r2, #0]
   81262:	4a04      	ldr	r2, [pc, #16]	; (81274 <naeusb_add_in_handler+0x20>)
   81264:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   81268:	2001      	movs	r0, #1
   8126a:	4770      	bx	lr
        return false;
   8126c:	2000      	movs	r0, #0
}
   8126e:	4770      	bx	lr
   81270:	20001960 	.word	0x20001960
   81274:	20001920 	.word	0x20001920

00081278 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers >= 16)
   81278:	4b06      	ldr	r3, [pc, #24]	; (81294 <naeusb_add_out_handler+0x1c>)
   8127a:	781b      	ldrb	r3, [r3, #0]
   8127c:	2b0f      	cmp	r3, #15
   8127e:	d807      	bhi.n	81290 <naeusb_add_out_handler+0x18>
        return false;
    
    naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81280:	1c59      	adds	r1, r3, #1
   81282:	4a04      	ldr	r2, [pc, #16]	; (81294 <naeusb_add_out_handler+0x1c>)
   81284:	7011      	strb	r1, [r2, #0]
   81286:	4a04      	ldr	r2, [pc, #16]	; (81298 <naeusb_add_out_handler+0x20>)
   81288:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return true;
   8128c:	2001      	movs	r0, #1
   8128e:	4770      	bx	lr
        return false;
   81290:	2000      	movs	r0, #0
}
   81292:	4770      	bx	lr
   81294:	20001961 	.word	0x20001961
   81298:	20001964 	.word	0x20001964

0008129c <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   8129c:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   8129e:	4b01      	ldr	r3, [pc, #4]	; (812a4 <main_suspend_action+0x8>)
   812a0:	4798      	blx	r3
}
   812a2:	bd08      	pop	{r3, pc}
   812a4:	00083069 	.word	0x00083069

000812a8 <main_resume_action>:

void main_resume_action(void)
{
   812a8:	b508      	push	{r3, lr}
    ui_wakeup();
   812aa:	4b01      	ldr	r3, [pc, #4]	; (812b0 <main_resume_action+0x8>)
   812ac:	4798      	blx	r3
}
   812ae:	bd08      	pop	{r3, pc}
   812b0:	00083085 	.word	0x00083085

000812b4 <main_sof_action>:

void main_sof_action(void)
{
   812b4:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   812b6:	4b04      	ldr	r3, [pc, #16]	; (812c8 <main_sof_action+0x14>)
   812b8:	781b      	ldrb	r3, [r3, #0]
   812ba:	b903      	cbnz	r3, 812be <main_sof_action+0xa>
        return;
    ui_process(udd_get_frame_number());
}
   812bc:	bd08      	pop	{r3, pc}
    ui_process(udd_get_frame_number());
   812be:	4b03      	ldr	r3, [pc, #12]	; (812cc <main_sof_action+0x18>)
   812c0:	4798      	blx	r3
   812c2:	4b03      	ldr	r3, [pc, #12]	; (812d0 <main_sof_action+0x1c>)
   812c4:	4798      	blx	r3
   812c6:	e7f9      	b.n	812bc <main_sof_action+0x8>
   812c8:	2000057c 	.word	0x2000057c
   812cc:	00084ead 	.word	0x00084ead
   812d0:	0008309d 	.word	0x0008309d

000812d4 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   812d4:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   812d6:	2401      	movs	r4, #1
   812d8:	4b04      	ldr	r3, [pc, #16]	; (812ec <main_vendor_enable+0x18>)
   812da:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   812dc:	4a04      	ldr	r2, [pc, #16]	; (812f0 <main_vendor_enable+0x1c>)
   812de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   812e2:	4804      	ldr	r0, [pc, #16]	; (812f4 <main_vendor_enable+0x20>)
   812e4:	4b04      	ldr	r3, [pc, #16]	; (812f8 <main_vendor_enable+0x24>)
   812e6:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   812e8:	4620      	mov	r0, r4
   812ea:	bd10      	pop	{r4, pc}
   812ec:	2000057c 	.word	0x2000057c
   812f0:	00081939 	.word	0x00081939
   812f4:	20001fd8 	.word	0x20001fd8
   812f8:	0008322d 	.word	0x0008322d

000812fc <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   812fc:	4b01      	ldr	r3, [pc, #4]	; (81304 <main_vendor_disable+0x8>)
   812fe:	2200      	movs	r2, #0
   81300:	701a      	strb	r2, [r3, #0]
}
   81302:	4770      	bx	lr
   81304:	2000057c 	.word	0x2000057c

00081308 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81308:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   8130a:	4b0f      	ldr	r3, [pc, #60]	; (81348 <main_setup_out_received+0x40>)
   8130c:	4a0f      	ldr	r2, [pc, #60]	; (8134c <main_setup_out_received+0x44>)
   8130e:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81310:	88da      	ldrh	r2, [r3, #6]
   81312:	2a40      	cmp	r2, #64	; 0x40
   81314:	bf28      	it	cs
   81316:	2240      	movcs	r2, #64	; 0x40
   81318:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8131a:	4b0d      	ldr	r3, [pc, #52]	; (81350 <main_setup_out_received+0x48>)
   8131c:	781d      	ldrb	r5, [r3, #0]
   8131e:	b18d      	cbz	r5, 81344 <main_setup_out_received+0x3c>
   81320:	4b0c      	ldr	r3, [pc, #48]	; (81354 <main_setup_out_received+0x4c>)
   81322:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   81326:	1e6a      	subs	r2, r5, #1
   81328:	b2d2      	uxtb	r2, r2
   8132a:	1aad      	subs	r5, r5, r2
   8132c:	3b04      	subs	r3, #4
   8132e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   81332:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81336:	4798      	blx	r3
        if (handler_status == true) {
   81338:	4603      	mov	r3, r0
   8133a:	b908      	cbnz	r0, 81340 <main_setup_out_received+0x38>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8133c:	42ac      	cmp	r4, r5
   8133e:	d1f8      	bne.n	81332 <main_setup_out_received+0x2a>
        }
    }

    return false;

}
   81340:	4618      	mov	r0, r3
   81342:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81344:	2300      	movs	r3, #0
   81346:	e7fb      	b.n	81340 <main_setup_out_received+0x38>
   81348:	20002b90 	.word	0x20002b90
   8134c:	20001f98 	.word	0x20001f98
   81350:	20001961 	.word	0x20001961
   81354:	20001964 	.word	0x20001964

00081358 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81358:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8135a:	4b0b      	ldr	r3, [pc, #44]	; (81388 <main_setup_in_received+0x30>)
   8135c:	781d      	ldrb	r5, [r3, #0]
   8135e:	b18d      	cbz	r5, 81384 <main_setup_in_received+0x2c>
   81360:	4b0a      	ldr	r3, [pc, #40]	; (8138c <main_setup_in_received+0x34>)
   81362:	eb03 0485 	add.w	r4, r3, r5, lsl #2
   81366:	1e6a      	subs	r2, r5, #1
   81368:	b2d2      	uxtb	r2, r2
   8136a:	1aad      	subs	r5, r5, r2
   8136c:	3b04      	subs	r3, #4
   8136e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81372:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81376:	4798      	blx	r3
        if (handler_status == true) {
   81378:	4603      	mov	r3, r0
   8137a:	b908      	cbnz	r0, 81380 <main_setup_in_received+0x28>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8137c:	42ac      	cmp	r4, r5
   8137e:	d1f8      	bne.n	81372 <main_setup_in_received+0x1a>
        }
    }

    return false;

   81380:	4618      	mov	r0, r3
   81382:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81384:	2300      	movs	r3, #0
   81386:	e7fb      	b.n	81380 <main_setup_in_received+0x28>
   81388:	20001960 	.word	0x20001960
   8138c:	20001920 	.word	0x20001920

00081390 <naeusb_cdc_settings_out>:
extern volatile bool usart_x_enabled[UDI_CDC_PORT_NB];

void naeusb_cdc_settings_out(void)
{
    for (uint8_t i = 0; i < UDI_CDC_PORT_NB; i++) {
        if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81390:	4b04      	ldr	r3, [pc, #16]	; (813a4 <naeusb_cdc_settings_out+0x14>)
   81392:	885b      	ldrh	r3, [r3, #2]
   81394:	f013 0f01 	tst.w	r3, #1
            cdc_settings_change[i] = 1;
   81398:	4b03      	ldr	r3, [pc, #12]	; (813a8 <naeusb_cdc_settings_out+0x18>)
   8139a:	bf14      	ite	ne
   8139c:	2201      	movne	r2, #1
        } else {
            cdc_settings_change[i] = 0;
   8139e:	2200      	moveq	r2, #0
   813a0:	701a      	strb	r2, [r3, #0]
        }
    }
}
   813a2:	4770      	bx	lr
   813a4:	20002b90 	.word	0x20002b90
   813a8:	20000580 	.word	0x20000580

000813ac <naeusb_setup_out_received>:
        
}

bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   813ac:	4b08      	ldr	r3, [pc, #32]	; (813d0 <naeusb_setup_out_received+0x24>)
   813ae:	785b      	ldrb	r3, [r3, #1]
   813b0:	2b22      	cmp	r3, #34	; 0x22
   813b2:	d003      	beq.n	813bc <naeusb_setup_out_received+0x10>
   813b4:	2b31      	cmp	r3, #49	; 0x31
   813b6:	d006      	beq.n	813c6 <naeusb_setup_out_received+0x1a>
   813b8:	2000      	movs	r0, #0
   813ba:	4770      	bx	lr
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   813bc:	4b04      	ldr	r3, [pc, #16]	; (813d0 <naeusb_setup_out_received+0x24>)
   813be:	4a05      	ldr	r2, [pc, #20]	; (813d4 <naeusb_setup_out_received+0x28>)
   813c0:	611a      	str	r2, [r3, #16]
            return true;
   813c2:	2001      	movs	r0, #1
   813c4:	4770      	bx	lr
            break;
        case REQ_CDC_SETTINGS_EN:
            udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   813c6:	4b02      	ldr	r3, [pc, #8]	; (813d0 <naeusb_setup_out_received+0x24>)
   813c8:	4a03      	ldr	r2, [pc, #12]	; (813d8 <naeusb_setup_out_received+0x2c>)
   813ca:	611a      	str	r2, [r3, #16]
            return true;
   813cc:	2001      	movs	r0, #1
            break;
    }
    return false;
}
   813ce:	4770      	bx	lr
   813d0:	20002b90 	.word	0x20002b90
   813d4:	000813dd 	.word	0x000813dd
   813d8:	00081391 	.word	0x00081391

000813dc <naeusb_sam_cfg_out>:
{
   813dc:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   813de:	4b22      	ldr	r3, [pc, #136]	; (81468 <naeusb_sam_cfg_out+0x8c>)
   813e0:	789b      	ldrb	r3, [r3, #2]
   813e2:	3b01      	subs	r3, #1
   813e4:	2b10      	cmp	r3, #16
   813e6:	d814      	bhi.n	81412 <naeusb_sam_cfg_out+0x36>
   813e8:	e8df f003 	tbb	[pc, r3]
   813ec:	13181409 	.word	0x13181409
   813f0:	13131313 	.word	0x13131313
   813f4:	13131313 	.word	0x13131313
   813f8:	2c131313 	.word	0x2c131313
   813fc:	3b          	.byte	0x3b
   813fd:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   813fe:	203e      	movs	r0, #62	; 0x3e
   81400:	4b1a      	ldr	r3, [pc, #104]	; (8146c <naeusb_sam_cfg_out+0x90>)
   81402:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   81404:	4c1a      	ldr	r4, [pc, #104]	; (81470 <naeusb_sam_cfg_out+0x94>)
   81406:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81408:	2800      	cmp	r0, #0
   8140a:	d0fc      	beq.n	81406 <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   8140c:	2010      	movs	r0, #16
   8140e:	4b19      	ldr	r3, [pc, #100]	; (81474 <naeusb_sam_cfg_out+0x98>)
   81410:	4798      	blx	r3
}
   81412:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81414:	2010      	movs	r0, #16
   81416:	4b18      	ldr	r3, [pc, #96]	; (81478 <naeusb_sam_cfg_out+0x9c>)
   81418:	4798      	blx	r3
        break;
   8141a:	e7fa      	b.n	81412 <naeusb_sam_cfg_out+0x36>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   8141c:	2201      	movs	r2, #1
   8141e:	210c      	movs	r1, #12
   81420:	4816      	ldr	r0, [pc, #88]	; (8147c <naeusb_sam_cfg_out+0xa0>)
   81422:	4b17      	ldr	r3, [pc, #92]	; (81480 <naeusb_sam_cfg_out+0xa4>)
   81424:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81426:	4b17      	ldr	r3, [pc, #92]	; (81484 <naeusb_sam_cfg_out+0xa8>)
   81428:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8142a:	4b17      	ldr	r3, [pc, #92]	; (81488 <naeusb_sam_cfg_out+0xac>)
   8142c:	685a      	ldr	r2, [r3, #4]
   8142e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81432:	d1fb      	bne.n	8142c <naeusb_sam_cfg_out+0x50>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81434:	4a14      	ldr	r2, [pc, #80]	; (81488 <naeusb_sam_cfg_out+0xac>)
   81436:	6813      	ldr	r3, [r2, #0]
   81438:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8143c:	f043 0305 	orr.w	r3, r3, #5
   81440:	6013      	str	r3, [r2, #0]
        while(1);
   81442:	e7fe      	b.n	81442 <naeusb_sam_cfg_out+0x66>
   81444:	4b0f      	ldr	r3, [pc, #60]	; (81484 <naeusb_sam_cfg_out+0xa8>)
   81446:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81448:	4b0f      	ldr	r3, [pc, #60]	; (81488 <naeusb_sam_cfg_out+0xac>)
   8144a:	685a      	ldr	r2, [r3, #4]
   8144c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81450:	d1fb      	bne.n	8144a <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81452:	4a0d      	ldr	r2, [pc, #52]	; (81488 <naeusb_sam_cfg_out+0xac>)
   81454:	6813      	ldr	r3, [r2, #0]
   81456:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8145a:	f043 0305 	orr.w	r3, r3, #5
   8145e:	6013      	str	r3, [r2, #0]
        while(1);
   81460:	e7fe      	b.n	81460 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   81462:	4b0a      	ldr	r3, [pc, #40]	; (8148c <naeusb_sam_cfg_out+0xb0>)
   81464:	4798      	blx	r3
}
   81466:	e7d4      	b.n	81412 <naeusb_sam_cfg_out+0x36>
   81468:	20002b90 	.word	0x20002b90
   8146c:	00083ffd 	.word	0x00083ffd
   81470:	00084025 	.word	0x00084025
   81474:	00083f3d 	.word	0x00083f3d
   81478:	00083f9d 	.word	0x00083f9d
   8147c:	400e0800 	.word	0x400e0800
   81480:	00082e99 	.word	0x00082e99
   81484:	00084e2d 	.word	0x00084e2d
   81488:	400e1200 	.word	0x400e1200
   8148c:	000820cd 	.word	0x000820cd

00081490 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81490:	4b05      	ldr	r3, [pc, #20]	; (814a8 <naeusb_fw_version_in+0x18>)
   81492:	2200      	movs	r2, #0
   81494:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   81496:	2132      	movs	r1, #50	; 0x32
   81498:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8149a:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   8149c:	4a03      	ldr	r2, [pc, #12]	; (814ac <naeusb_fw_version_in+0x1c>)
   8149e:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   814a0:	2303      	movs	r3, #3
   814a2:	8193      	strh	r3, [r2, #12]
}
   814a4:	2001      	movs	r0, #1
   814a6:	4770      	bx	lr
   814a8:	20001f58 	.word	0x20001f58
   814ac:	20002b90 	.word	0x20002b90

000814b0 <naeusb_build_date_in>:
{
   814b0:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   814b2:	4c0a      	ldr	r4, [pc, #40]	; (814dc <naeusb_build_date_in+0x2c>)
   814b4:	2240      	movs	r2, #64	; 0x40
   814b6:	490a      	ldr	r1, [pc, #40]	; (814e0 <naeusb_build_date_in+0x30>)
   814b8:	4620      	mov	r0, r4
   814ba:	4d0a      	ldr	r5, [pc, #40]	; (814e4 <naeusb_build_date_in+0x34>)
   814bc:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   814be:	2320      	movs	r3, #32
   814c0:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   814c2:	2237      	movs	r2, #55	; 0x37
   814c4:	4908      	ldr	r1, [pc, #32]	; (814e8 <naeusb_build_date_in+0x38>)
   814c6:	f104 0009 	add.w	r0, r4, #9
   814ca:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   814cc:	4d07      	ldr	r5, [pc, #28]	; (814ec <naeusb_build_date_in+0x3c>)
   814ce:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   814d0:	4620      	mov	r0, r4
   814d2:	4b07      	ldr	r3, [pc, #28]	; (814f0 <naeusb_build_date_in+0x40>)
   814d4:	4798      	blx	r3
   814d6:	81a8      	strh	r0, [r5, #12]
}
   814d8:	2001      	movs	r0, #1
   814da:	bd38      	pop	{r3, r4, r5, pc}
   814dc:	20001f58 	.word	0x20001f58
   814e0:	0008cc74 	.word	0x0008cc74
   814e4:	000864d5 	.word	0x000864d5
   814e8:	0008cc68 	.word	0x0008cc68
   814ec:	20002b90 	.word	0x20002b90
   814f0:	00086479 	.word	0x00086479

000814f4 <naeusb_cdc_settings_in>:
        respbuf[i] = cdc_settings_change[i];
   814f4:	4b04      	ldr	r3, [pc, #16]	; (81508 <naeusb_cdc_settings_in+0x14>)
   814f6:	781b      	ldrb	r3, [r3, #0]
   814f8:	4a04      	ldr	r2, [pc, #16]	; (8150c <naeusb_cdc_settings_in+0x18>)
   814fa:	7013      	strb	r3, [r2, #0]
    udd_g_ctrlreq.payload = respbuf;
   814fc:	4b04      	ldr	r3, [pc, #16]	; (81510 <naeusb_cdc_settings_in+0x1c>)
   814fe:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = UDI_CDC_PORT_NB;
   81500:	2001      	movs	r0, #1
   81502:	8198      	strh	r0, [r3, #12]
}
   81504:	4770      	bx	lr
   81506:	bf00      	nop
   81508:	20000580 	.word	0x20000580
   8150c:	20001f58 	.word	0x20001f58
   81510:	20002b90 	.word	0x20002b90

00081514 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   81514:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81516:	4b09      	ldr	r3, [pc, #36]	; (8153c <naeusb_setup_in_received+0x28>)
   81518:	785b      	ldrb	r3, [r3, #1]
   8151a:	2b31      	cmp	r3, #49	; 0x31
   8151c:	d00b      	beq.n	81536 <naeusb_setup_in_received+0x22>
   8151e:	2b40      	cmp	r3, #64	; 0x40
   81520:	d006      	beq.n	81530 <naeusb_setup_in_received+0x1c>
   81522:	2b17      	cmp	r3, #23
   81524:	d001      	beq.n	8152a <naeusb_setup_in_received+0x16>
   81526:	2000      	movs	r0, #0
        case REQ_CDC_SETTINGS_EN:
            return naeusb_cdc_settings_in();
            break;
    }
    return false;
}
   81528:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   8152a:	4b05      	ldr	r3, [pc, #20]	; (81540 <naeusb_setup_in_received+0x2c>)
   8152c:	4798      	blx	r3
   8152e:	e7fb      	b.n	81528 <naeusb_setup_in_received+0x14>
            return naeusb_build_date_in();
   81530:	4b04      	ldr	r3, [pc, #16]	; (81544 <naeusb_setup_in_received+0x30>)
   81532:	4798      	blx	r3
   81534:	e7f8      	b.n	81528 <naeusb_setup_in_received+0x14>
            return naeusb_cdc_settings_in();
   81536:	4b04      	ldr	r3, [pc, #16]	; (81548 <naeusb_setup_in_received+0x34>)
   81538:	4798      	blx	r3
   8153a:	e7f5      	b.n	81528 <naeusb_setup_in_received+0x14>
   8153c:	20002b90 	.word	0x20002b90
   81540:	00081491 	.word	0x00081491
   81544:	000814b1 	.word	0x000814b1
   81548:	000814f5 	.word	0x000814f5

0008154c <cdc_enable>:
{
   8154c:	4603      	mov	r3, r0
    enable_cdc_transfer[port] = true;
   8154e:	2001      	movs	r0, #1
   81550:	4a01      	ldr	r2, [pc, #4]	; (81558 <cdc_enable+0xc>)
   81552:	54d0      	strb	r0, [r2, r3]
}
   81554:	4770      	bx	lr
   81556:	bf00      	nop
   81558:	200019a4 	.word	0x200019a4

0008155c <cdc_disable>:
    enable_cdc_transfer[port] = false;
   8155c:	4b01      	ldr	r3, [pc, #4]	; (81564 <cdc_disable+0x8>)
   8155e:	2200      	movs	r2, #0
   81560:	541a      	strb	r2, [r3, r0]
}
   81562:	4770      	bx	lr
   81564:	200019a4 	.word	0x200019a4

00081568 <my_callback_rx_notify>:
    if (enable_cdc_transfer[port] && usart_x_enabled[port]) {
   81568:	4b1a      	ldr	r3, [pc, #104]	; (815d4 <my_callback_rx_notify+0x6c>)
   8156a:	5c1b      	ldrb	r3, [r3, r0]
   8156c:	2b00      	cmp	r3, #0
   8156e:	d02f      	beq.n	815d0 <my_callback_rx_notify+0x68>
{
   81570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81574:	4681      	mov	r9, r0
    if (enable_cdc_transfer[port] && usart_x_enabled[port]) {
   81576:	4b18      	ldr	r3, [pc, #96]	; (815d8 <my_callback_rx_notify+0x70>)
   81578:	5c1b      	ldrb	r3, [r3, r0]
   8157a:	b90b      	cbnz	r3, 81580 <my_callback_rx_notify+0x18>
}
   8157c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   81580:	4b16      	ldr	r3, [pc, #88]	; (815dc <my_callback_rx_notify+0x74>)
   81582:	4798      	blx	r3
        while (num_char > 0) {
   81584:	4604      	mov	r4, r0
   81586:	2800      	cmp	r0, #0
   81588:	d0f8      	beq.n	8157c <my_callback_rx_notify+0x14>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8158a:	4e15      	ldr	r6, [pc, #84]	; (815e0 <my_callback_rx_notify+0x78>)
   8158c:	f8df a058 	ldr.w	sl, [pc, #88]	; 815e8 <my_callback_rx_notify+0x80>
                usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   81590:	f8df 8058 	ldr.w	r8, [pc, #88]	; 815ec <my_callback_rx_notify+0x84>
   81594:	e005      	b.n	815a2 <my_callback_rx_notify+0x3a>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   81596:	4648      	mov	r0, r9
   81598:	4b10      	ldr	r3, [pc, #64]	; (815dc <my_callback_rx_notify+0x74>)
   8159a:	4798      	blx	r3
        while (num_char > 0) {
   8159c:	4604      	mov	r4, r0
   8159e:	2800      	cmp	r0, #0
   815a0:	d0ec      	beq.n	8157c <my_callback_rx_notify+0x14>
            num_char = (num_char > 512) ? 512 : num_char;
   815a2:	4625      	mov	r5, r4
   815a4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   815a8:	bf28      	it	cs
   815aa:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   815ae:	462a      	mov	r2, r5
   815b0:	4631      	mov	r1, r6
   815b2:	4648      	mov	r0, r9
   815b4:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   815b6:	2c00      	cmp	r4, #0
   815b8:	d0ed      	beq.n	81596 <my_callback_rx_notify+0x2e>
   815ba:	2400      	movs	r4, #0
                usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
   815bc:	4f09      	ldr	r7, [pc, #36]	; (815e4 <my_callback_rx_notify+0x7c>)
   815be:	5d32      	ldrb	r2, [r6, r4]
   815c0:	2100      	movs	r1, #0
   815c2:	4640      	mov	r0, r8
   815c4:	47b8      	blx	r7
            for (uint16_t i = 0; i < num_char; i++) {
   815c6:	3401      	adds	r4, #1
   815c8:	b2a4      	uxth	r4, r4
   815ca:	42ac      	cmp	r4, r5
   815cc:	d3f7      	bcc.n	815be <my_callback_rx_notify+0x56>
   815ce:	e7e2      	b.n	81596 <my_callback_rx_notify+0x2e>
   815d0:	4770      	bx	lr
   815d2:	bf00      	nop
   815d4:	200019a4 	.word	0x200019a4
   815d8:	20001bc4 	.word	0x20001bc4
   815dc:	000803c5 	.word	0x000803c5
   815e0:	200019a8 	.word	0x200019a8
   815e4:	00081ef5 	.word	0x00081ef5
   815e8:	000805cd 	.word	0x000805cd
   815ec:	40090000 	.word	0x40090000

000815f0 <my_callback_config>:
    if (enable_cdc_transfer[port] && cdc_settings_change[port]) {
   815f0:	4b33      	ldr	r3, [pc, #204]	; (816c0 <my_callback_config+0xd0>)
   815f2:	5c1b      	ldrb	r3, [r3, r0]
   815f4:	2b00      	cmp	r3, #0
   815f6:	d061      	beq.n	816bc <my_callback_config+0xcc>
   815f8:	4b32      	ldr	r3, [pc, #200]	; (816c4 <my_callback_config+0xd4>)
   815fa:	5c1b      	ldrb	r3, [r3, r0]
   815fc:	2b00      	cmp	r3, #0
   815fe:	d05d      	beq.n	816bc <my_callback_config+0xcc>
        usart_x_enabled[port] = true;
   81600:	4b31      	ldr	r3, [pc, #196]	; (816c8 <my_callback_config+0xd8>)
   81602:	2201      	movs	r2, #1
   81604:	541a      	strb	r2, [r3, r0]
        if (cfg->bDataBits < 5)
   81606:	798b      	ldrb	r3, [r1, #6]
   81608:	2b04      	cmp	r3, #4
   8160a:	d957      	bls.n	816bc <my_callback_config+0xcc>
        if (cfg->bCharFormat > 2)
   8160c:	790a      	ldrb	r2, [r1, #4]
   8160e:	2a02      	cmp	r2, #2
   81610:	d854      	bhi.n	816bc <my_callback_config+0xcc>
{
   81612:	b510      	push	{r4, lr}
   81614:	b086      	sub	sp, #24
        usartopts.baudrate = cfg->dwDTERate;
   81616:	680c      	ldr	r4, [r1, #0]
   81618:	9400      	str	r4, [sp, #0]
        usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8161a:	2400      	movs	r4, #0
   8161c:	9404      	str	r4, [sp, #16]
        usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
   8161e:	0312      	lsls	r2, r2, #12
   81620:	9203      	str	r2, [sp, #12]
        usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
   81622:	3b05      	subs	r3, #5
   81624:	019b      	lsls	r3, r3, #6
   81626:	9301      	str	r3, [sp, #4]
        switch(cfg->bParityType) {
   81628:	794b      	ldrb	r3, [r1, #5]
   8162a:	2b04      	cmp	r3, #4
   8162c:	d808      	bhi.n	81640 <my_callback_config+0x50>
   8162e:	e8df f003 	tbb	[pc, r3]
   81632:	0903      	.short	0x0903
   81634:	100d      	.short	0x100d
   81636:	14          	.byte	0x14
   81637:	00          	.byte	0x00
            usartopts.parity_type = US_MR_PAR_NO;
   81638:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8163c:	9302      	str	r3, [sp, #8]
        if (port == 0)
   8163e:	b180      	cbz	r0, 81662 <my_callback_config+0x72>
}
   81640:	b006      	add	sp, #24
   81642:	bd10      	pop	{r4, pc}
            usartopts.parity_type = US_MR_PAR_ODD;
   81644:	f44f 7300 	mov.w	r3, #512	; 0x200
   81648:	9302      	str	r3, [sp, #8]
            break;
   8164a:	e7f8      	b.n	8163e <my_callback_config+0x4e>
            usartopts.parity_type = US_MR_PAR_EVEN;
   8164c:	2300      	movs	r3, #0
   8164e:	9302      	str	r3, [sp, #8]
            break;
   81650:	e7f5      	b.n	8163e <my_callback_config+0x4e>
            usartopts.parity_type = US_MR_PAR_MARK;
   81652:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81656:	9302      	str	r3, [sp, #8]
            break;
   81658:	e7f1      	b.n	8163e <my_callback_config+0x4e>
            usartopts.parity_type = US_MR_PAR_SPACE;
   8165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8165e:	9302      	str	r3, [sp, #8]
            break;
   81660:	e7ed      	b.n	8163e <my_callback_config+0x4e>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81662:	200d      	movs	r0, #13
   81664:	4b19      	ldr	r3, [pc, #100]	; (816cc <my_callback_config+0xdc>)
   81666:	4798      	blx	r3
            init_circ_buf(&usb_usart_circ_buf);
   81668:	4819      	ldr	r0, [pc, #100]	; (816d0 <my_callback_config+0xe0>)
   8166a:	4c1a      	ldr	r4, [pc, #104]	; (816d4 <my_callback_config+0xe4>)
   8166c:	47a0      	blx	r4
            init_circ_buf(&tx0buf);
   8166e:	481a      	ldr	r0, [pc, #104]	; (816d8 <my_callback_config+0xe8>)
   81670:	47a0      	blx	r4
            init_circ_buf(&rx0buf);
   81672:	481a      	ldr	r0, [pc, #104]	; (816dc <my_callback_config+0xec>)
   81674:	47a0      	blx	r4
            usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
   81676:	4c1a      	ldr	r4, [pc, #104]	; (816e0 <my_callback_config+0xf0>)
   81678:	4a1a      	ldr	r2, [pc, #104]	; (816e4 <my_callback_config+0xf4>)
   8167a:	4669      	mov	r1, sp
   8167c:	4620      	mov	r0, r4
   8167e:	4b1a      	ldr	r3, [pc, #104]	; (816e8 <my_callback_config+0xf8>)
   81680:	4798      	blx	r3
            usart_enable_rx(USART0);
   81682:	4620      	mov	r0, r4
   81684:	4b19      	ldr	r3, [pc, #100]	; (816ec <my_callback_config+0xfc>)
   81686:	4798      	blx	r3
            usart_enable_tx(USART0);
   81688:	4620      	mov	r0, r4
   8168a:	4b19      	ldr	r3, [pc, #100]	; (816f0 <my_callback_config+0x100>)
   8168c:	4798      	blx	r3
            usart_enable_interrupt(USART0, UART_IER_RXRDY);
   8168e:	2101      	movs	r1, #1
   81690:	4620      	mov	r0, r4
   81692:	4b18      	ldr	r3, [pc, #96]	; (816f4 <my_callback_config+0x104>)
   81694:	4798      	blx	r3
            gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81696:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8169a:	2013      	movs	r0, #19
   8169c:	4c16      	ldr	r4, [pc, #88]	; (816f8 <my_callback_config+0x108>)
   8169e:	47a0      	blx	r4
            gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   816a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816a4:	2012      	movs	r0, #18
   816a6:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   816a8:	4b14      	ldr	r3, [pc, #80]	; (816fc <my_callback_config+0x10c>)
   816aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   816ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   816b2:	2150      	movs	r1, #80	; 0x50
   816b4:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   816b8:	601a      	str	r2, [r3, #0]
}
   816ba:	e7c1      	b.n	81640 <my_callback_config+0x50>
   816bc:	4770      	bx	lr
   816be:	bf00      	nop
   816c0:	200019a4 	.word	0x200019a4
   816c4:	20000580 	.word	0x20000580
   816c8:	20001bc4 	.word	0x20001bc4
   816cc:	00084095 	.word	0x00084095
   816d0:	20002728 	.word	0x20002728
   816d4:	00082f79 	.word	0x00082f79
   816d8:	20002a78 	.word	0x20002a78
   816dc:	200024ac 	.word	0x200024ac
   816e0:	40090000 	.word	0x40090000
   816e4:	05b8d800 	.word	0x05b8d800
   816e8:	0008569d 	.word	0x0008569d
   816ec:	00085761 	.word	0x00085761
   816f0:	00085755 	.word	0x00085755
   816f4:	0008576d 	.word	0x0008576d
   816f8:	00083d59 	.word	0x00083d59
   816fc:	e000e100 	.word	0xe000e100

00081700 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81700:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81702:	4803      	ldr	r0, [pc, #12]	; (81710 <naeusb_register_handlers+0x10>)
   81704:	4b03      	ldr	r3, [pc, #12]	; (81714 <naeusb_register_handlers+0x14>)
   81706:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81708:	4803      	ldr	r0, [pc, #12]	; (81718 <naeusb_register_handlers+0x18>)
   8170a:	4b04      	ldr	r3, [pc, #16]	; (8171c <naeusb_register_handlers+0x1c>)
   8170c:	4798      	blx	r3
   8170e:	bd08      	pop	{r3, pc}
   81710:	00081515 	.word	0x00081515
   81714:	00081255 	.word	0x00081255
   81718:	000813ad 	.word	0x000813ad
   8171c:	00081279 	.word	0x00081279

00081720 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81720:	b508      	push	{r3, lr}

    switch(udd_g_ctrlreq.req.wValue){
   81722:	4b0b      	ldr	r3, [pc, #44]	; (81750 <openadc_progfpga_bulk+0x30>)
   81724:	885b      	ldrh	r3, [r3, #2]
   81726:	2ba1      	cmp	r3, #161	; 0xa1
   81728:	d007      	beq.n	8173a <openadc_progfpga_bulk+0x1a>
   8172a:	2ba2      	cmp	r3, #162	; 0xa2
   8172c:	d00b      	beq.n	81746 <openadc_progfpga_bulk+0x26>
   8172e:	2ba0      	cmp	r3, #160	; 0xa0
   81730:	d000      	beq.n	81734 <openadc_progfpga_bulk+0x14>
        break;

    default:
        break;
    }
}
   81732:	bd08      	pop	{r3, pc}
        fpga_program_setup1();
   81734:	4b07      	ldr	r3, [pc, #28]	; (81754 <openadc_progfpga_bulk+0x34>)
   81736:	4798      	blx	r3
        break;
   81738:	e7fb      	b.n	81732 <openadc_progfpga_bulk+0x12>
        fpga_program_setup2();
   8173a:	4b07      	ldr	r3, [pc, #28]	; (81758 <openadc_progfpga_bulk+0x38>)
   8173c:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   8173e:	4b07      	ldr	r3, [pc, #28]	; (8175c <openadc_progfpga_bulk+0x3c>)
   81740:	220a      	movs	r2, #10
   81742:	701a      	strb	r2, [r3, #0]
        break;
   81744:	e7f5      	b.n	81732 <openadc_progfpga_bulk+0x12>
        blockendpoint_usage = bep_emem;
   81746:	4b05      	ldr	r3, [pc, #20]	; (8175c <openadc_progfpga_bulk+0x3c>)
   81748:	2200      	movs	r2, #0
   8174a:	701a      	strb	r2, [r3, #0]
}
   8174c:	e7f1      	b.n	81732 <openadc_progfpga_bulk+0x12>
   8174e:	bf00      	nop
   81750:	20002b90 	.word	0x20002b90
   81754:	00080791 	.word	0x00080791
   81758:	00080819 	.word	0x00080819
   8175c:	20001ba8 	.word	0x20001ba8

00081760 <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   81760:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   81762:	4b20      	ldr	r3, [pc, #128]	; (817e4 <openadc_setup_out_received+0x84>)
   81764:	2200      	movs	r2, #0
   81766:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81768:	4b1f      	ldr	r3, [pc, #124]	; (817e8 <openadc_setup_out_received+0x88>)
   8176a:	785b      	ldrb	r3, [r3, #1]
   8176c:	3b10      	subs	r3, #16
   8176e:	2b06      	cmp	r3, #6
   81770:	d836      	bhi.n	817e0 <openadc_setup_out_received+0x80>
   81772:	e8df f003 	tbb	[pc, r3]
   81776:	1a04      	.short	0x1a04
   81778:	3535250f 	.word	0x3535250f
   8177c:	30          	.byte	0x30
   8177d:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8177e:	2006      	movs	r0, #6
   81780:	4b1a      	ldr	r3, [pc, #104]	; (817ec <openadc_setup_out_received+0x8c>)
   81782:	4798      	blx	r3
   81784:	b908      	cbnz	r0, 8178a <openadc_setup_out_received+0x2a>

    default:
        return false;
    }

    return false;
   81786:	2000      	movs	r0, #0
   81788:	e029      	b.n	817de <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   8178a:	4b17      	ldr	r3, [pc, #92]	; (817e8 <openadc_setup_out_received+0x88>)
   8178c:	4a18      	ldr	r2, [pc, #96]	; (817f0 <openadc_setup_out_received+0x90>)
   8178e:	611a      	str	r2, [r3, #16]
            return true;
   81790:	2001      	movs	r0, #1
   81792:	e024      	b.n	817de <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   81794:	2006      	movs	r0, #6
   81796:	4b15      	ldr	r3, [pc, #84]	; (817ec <openadc_setup_out_received+0x8c>)
   81798:	4798      	blx	r3
   8179a:	b908      	cbnz	r0, 817a0 <openadc_setup_out_received+0x40>
    return false;
   8179c:	2000      	movs	r0, #0
   8179e:	e01e      	b.n	817de <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   817a0:	4b11      	ldr	r3, [pc, #68]	; (817e8 <openadc_setup_out_received+0x88>)
   817a2:	4a14      	ldr	r2, [pc, #80]	; (817f4 <openadc_setup_out_received+0x94>)
   817a4:	611a      	str	r2, [r3, #16]
            return true;
   817a6:	2001      	movs	r0, #1
   817a8:	e019      	b.n	817de <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   817aa:	2006      	movs	r0, #6
   817ac:	4b0f      	ldr	r3, [pc, #60]	; (817ec <openadc_setup_out_received+0x8c>)
   817ae:	4798      	blx	r3
   817b0:	b908      	cbnz	r0, 817b6 <openadc_setup_out_received+0x56>
    return false;
   817b2:	2000      	movs	r0, #0
   817b4:	e013      	b.n	817de <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   817b6:	4b0c      	ldr	r3, [pc, #48]	; (817e8 <openadc_setup_out_received+0x88>)
   817b8:	4a0f      	ldr	r2, [pc, #60]	; (817f8 <openadc_setup_out_received+0x98>)
   817ba:	611a      	str	r2, [r3, #16]
            return true;
   817bc:	2001      	movs	r0, #1
   817be:	e00e      	b.n	817de <openadc_setup_out_received+0x7e>
        if (FPGA_setlock(fpga_usblocked)){
   817c0:	2006      	movs	r0, #6
   817c2:	4b0a      	ldr	r3, [pc, #40]	; (817ec <openadc_setup_out_received+0x8c>)
   817c4:	4798      	blx	r3
   817c6:	b908      	cbnz	r0, 817cc <openadc_setup_out_received+0x6c>
    return false;
   817c8:	2000      	movs	r0, #0
   817ca:	e008      	b.n	817de <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   817cc:	4b06      	ldr	r3, [pc, #24]	; (817e8 <openadc_setup_out_received+0x88>)
   817ce:	4a0b      	ldr	r2, [pc, #44]	; (817fc <openadc_setup_out_received+0x9c>)
   817d0:	611a      	str	r2, [r3, #16]
            return true;
   817d2:	2001      	movs	r0, #1
   817d4:	e003      	b.n	817de <openadc_setup_out_received+0x7e>
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   817d6:	4b04      	ldr	r3, [pc, #16]	; (817e8 <openadc_setup_out_received+0x88>)
   817d8:	4a09      	ldr	r2, [pc, #36]	; (81800 <openadc_setup_out_received+0xa0>)
   817da:	611a      	str	r2, [r3, #16]
        return true;
   817dc:	2001      	movs	r0, #1
}
   817de:	bd08      	pop	{r3, pc}
    switch(udd_g_ctrlreq.req.bRequest){
   817e0:	2000      	movs	r0, #0
   817e2:	e7fc      	b.n	817de <openadc_setup_out_received+0x7e>
   817e4:	20001ba8 	.word	0x20001ba8
   817e8:	20002b90 	.word	0x20002b90
   817ec:	000820a1 	.word	0x000820a1
   817f0:	000818cd 	.word	0x000818cd
   817f4:	00081835 	.word	0x00081835
   817f8:	00081805 	.word	0x00081805
   817fc:	00081879 	.word	0x00081879
   81800:	00081721 	.word	0x00081721

00081804 <openadc_writemem_bulk>:
{
   81804:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81806:	4b07      	ldr	r3, [pc, #28]	; (81824 <openadc_writemem_bulk+0x20>)
   81808:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   8180a:	4b07      	ldr	r3, [pc, #28]	; (81828 <openadc_writemem_bulk+0x24>)
   8180c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   8180e:	2504      	movs	r5, #4
   81810:	4c06      	ldr	r4, [pc, #24]	; (8182c <openadc_writemem_bulk+0x28>)
   81812:	4628      	mov	r0, r5
   81814:	47a0      	blx	r4
   81816:	2800      	cmp	r0, #0
   81818:	d0fb      	beq.n	81812 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   8181a:	4630      	mov	r0, r6
   8181c:	4b04      	ldr	r3, [pc, #16]	; (81830 <openadc_writemem_bulk+0x2c>)
   8181e:	4798      	blx	r3
}
   81820:	bd70      	pop	{r4, r5, r6, pc}
   81822:	bf00      	nop
   81824:	20001f98 	.word	0x20001f98
   81828:	000820cd 	.word	0x000820cd
   8182c:	000820a1 	.word	0x000820a1
   81830:	000820e5 	.word	0x000820e5

00081834 <openadc_readmem_ctrl>:
{
   81834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81836:	4b0a      	ldr	r3, [pc, #40]	; (81860 <openadc_readmem_ctrl+0x2c>)
   81838:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8183a:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   8183c:	4b09      	ldr	r3, [pc, #36]	; (81864 <openadc_readmem_ctrl+0x30>)
   8183e:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   81840:	2505      	movs	r5, #5
   81842:	4c09      	ldr	r4, [pc, #36]	; (81868 <openadc_readmem_ctrl+0x34>)
   81844:	4628      	mov	r0, r5
   81846:	47a0      	blx	r4
   81848:	2800      	cmp	r0, #0
   8184a:	d0fb      	beq.n	81844 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   8184c:	4638      	mov	r0, r7
   8184e:	4b07      	ldr	r3, [pc, #28]	; (8186c <openadc_readmem_ctrl+0x38>)
   81850:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   81852:	4b07      	ldr	r3, [pc, #28]	; (81870 <openadc_readmem_ctrl+0x3c>)
   81854:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   81858:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   8185a:	4b06      	ldr	r3, [pc, #24]	; (81874 <openadc_readmem_ctrl+0x40>)
   8185c:	601e      	str	r6, [r3, #0]
}
   8185e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81860:	20001f98 	.word	0x20001f98
   81864:	000820cd 	.word	0x000820cd
   81868:	000820a1 	.word	0x000820a1
   8186c:	000820e5 	.word	0x000820e5
   81870:	20001bac 	.word	0x20001bac
   81874:	20001bb0 	.word	0x20001bb0

00081878 <openadc_writemem_ctrl>:
{
   81878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8187a:	4b0e      	ldr	r3, [pc, #56]	; (818b4 <openadc_writemem_ctrl+0x3c>)
   8187c:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8187e:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   81880:	4b0d      	ldr	r3, [pc, #52]	; (818b8 <openadc_writemem_ctrl+0x40>)
   81882:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   81884:	2601      	movs	r6, #1
   81886:	4d0d      	ldr	r5, [pc, #52]	; (818bc <openadc_writemem_ctrl+0x44>)
   81888:	4630      	mov	r0, r6
   8188a:	47a8      	blx	r5
   8188c:	2800      	cmp	r0, #0
   8188e:	d0fb      	beq.n	81888 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   81890:	4638      	mov	r0, r7
   81892:	4b0b      	ldr	r3, [pc, #44]	; (818c0 <openadc_writemem_ctrl+0x48>)
   81894:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   81896:	b14c      	cbz	r4, 818ac <openadc_writemem_ctrl+0x34>
   81898:	4a0a      	ldr	r2, [pc, #40]	; (818c4 <openadc_writemem_ctrl+0x4c>)
   8189a:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   8189c:	4d0a      	ldr	r5, [pc, #40]	; (818c8 <openadc_writemem_ctrl+0x50>)
   8189e:	6829      	ldr	r1, [r5, #0]
   818a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   818a4:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   818a6:	3301      	adds	r3, #1
   818a8:	429c      	cmp	r4, r3
   818aa:	d1f8      	bne.n	8189e <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   818ac:	4b02      	ldr	r3, [pc, #8]	; (818b8 <openadc_writemem_ctrl+0x40>)
   818ae:	4798      	blx	r3
}
   818b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818b2:	bf00      	nop
   818b4:	20001f98 	.word	0x20001f98
   818b8:	000820cd 	.word	0x000820cd
   818bc:	000820a1 	.word	0x000820a1
   818c0:	000820e5 	.word	0x000820e5
   818c4:	20001f9f 	.word	0x20001f9f
   818c8:	20000584 	.word	0x20000584

000818cc <openadc_readmem_bulk>:
{
   818cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   818ce:	4b0a      	ldr	r3, [pc, #40]	; (818f8 <openadc_readmem_bulk+0x2c>)
   818d0:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   818d2:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   818d4:	4b09      	ldr	r3, [pc, #36]	; (818fc <openadc_readmem_bulk+0x30>)
   818d6:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   818d8:	2502      	movs	r5, #2
   818da:	4c09      	ldr	r4, [pc, #36]	; (81900 <openadc_readmem_bulk+0x34>)
   818dc:	4628      	mov	r0, r5
   818de:	47a0      	blx	r4
   818e0:	2800      	cmp	r0, #0
   818e2:	d0fb      	beq.n	818dc <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   818e4:	4638      	mov	r0, r7
   818e6:	4b07      	ldr	r3, [pc, #28]	; (81904 <openadc_readmem_bulk+0x38>)
   818e8:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   818ea:	4a07      	ldr	r2, [pc, #28]	; (81908 <openadc_readmem_bulk+0x3c>)
   818ec:	4631      	mov	r1, r6
   818ee:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   818f2:	4b06      	ldr	r3, [pc, #24]	; (8190c <openadc_readmem_bulk+0x40>)
   818f4:	4798      	blx	r3
}
   818f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818f8:	20001f98 	.word	0x20001f98
   818fc:	000820cd 	.word	0x000820cd
   81900:	000820a1 	.word	0x000820a1
   81904:	000820e5 	.word	0x000820e5
   81908:	00081911 	.word	0x00081911
   8190c:	00083211 	.word	0x00083211

00081910 <main_vendor_bulk_in_received>:
{
   81910:	b510      	push	{r4, lr}
   81912:	4604      	mov	r4, r0
    FPGA_releaselock();
   81914:	4b05      	ldr	r3, [pc, #20]	; (8192c <main_vendor_bulk_in_received+0x1c>)
   81916:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81918:	b104      	cbz	r4, 8191c <main_vendor_bulk_in_received+0xc>
}
   8191a:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   8191c:	4b04      	ldr	r3, [pc, #16]	; (81930 <main_vendor_bulk_in_received+0x20>)
   8191e:	4798      	blx	r3
   81920:	2802      	cmp	r0, #2
   81922:	d1fa      	bne.n	8191a <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   81924:	2000      	movs	r0, #0
   81926:	4b03      	ldr	r3, [pc, #12]	; (81934 <main_vendor_bulk_in_received+0x24>)
   81928:	4798      	blx	r3
   8192a:	e7f6      	b.n	8191a <main_vendor_bulk_in_received+0xa>
   8192c:	000820cd 	.word	0x000820cd
   81930:	000820d9 	.word	0x000820d9
   81934:	000820a1 	.word	0x000820a1

00081938 <main_vendor_bulk_out_received>:
{
   81938:	b570      	push	{r4, r5, r6, lr}
   8193a:	4605      	mov	r5, r0
   8193c:	460c      	mov	r4, r1
    FPGA_releaselock();
   8193e:	4b19      	ldr	r3, [pc, #100]	; (819a4 <main_vendor_bulk_out_received+0x6c>)
   81940:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   81942:	b9bd      	cbnz	r5, 81974 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   81944:	4b18      	ldr	r3, [pc, #96]	; (819a8 <main_vendor_bulk_out_received+0x70>)
   81946:	781b      	ldrb	r3, [r3, #0]
   81948:	b9f3      	cbnz	r3, 81988 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8194a:	b144      	cbz	r4, 8195e <main_vendor_bulk_out_received+0x26>
   8194c:	4a17      	ldr	r2, [pc, #92]	; (819ac <main_vendor_bulk_out_received+0x74>)
            xram[i] = main_buf_loopback[i];
   8194e:	4d18      	ldr	r5, [pc, #96]	; (819b0 <main_vendor_bulk_out_received+0x78>)
   81950:	6829      	ldr	r1, [r5, #0]
   81952:	f812 0b01 	ldrb.w	r0, [r2], #1
   81956:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81958:	3301      	adds	r3, #1
   8195a:	429c      	cmp	r4, r3
   8195c:	d1f8      	bne.n	81950 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   8195e:	4b15      	ldr	r3, [pc, #84]	; (819b4 <main_vendor_bulk_out_received+0x7c>)
   81960:	4798      	blx	r3
   81962:	2804      	cmp	r0, #4
   81964:	d00d      	beq.n	81982 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   81966:	4a14      	ldr	r2, [pc, #80]	; (819b8 <main_vendor_bulk_out_received+0x80>)
   81968:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8196c:	480f      	ldr	r0, [pc, #60]	; (819ac <main_vendor_bulk_out_received+0x74>)
   8196e:	4b13      	ldr	r3, [pc, #76]	; (819bc <main_vendor_bulk_out_received+0x84>)
   81970:	4798      	blx	r3
}
   81972:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   81974:	4a10      	ldr	r2, [pc, #64]	; (819b8 <main_vendor_bulk_out_received+0x80>)
   81976:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8197a:	480c      	ldr	r0, [pc, #48]	; (819ac <main_vendor_bulk_out_received+0x74>)
   8197c:	4b0f      	ldr	r3, [pc, #60]	; (819bc <main_vendor_bulk_out_received+0x84>)
   8197e:	4798      	blx	r3
        return;
   81980:	e7f7      	b.n	81972 <main_vendor_bulk_out_received+0x3a>
            FPGA_releaselock();
   81982:	4b08      	ldr	r3, [pc, #32]	; (819a4 <main_vendor_bulk_out_received+0x6c>)
   81984:	4798      	blx	r3
   81986:	e7ee      	b.n	81966 <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81988:	2b0a      	cmp	r3, #10
   8198a:	d1ec      	bne.n	81966 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8198c:	2c00      	cmp	r4, #0
   8198e:	d0ea      	beq.n	81966 <main_vendor_bulk_out_received+0x2e>
   81990:	4d06      	ldr	r5, [pc, #24]	; (819ac <main_vendor_bulk_out_received+0x74>)
   81992:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   81994:	4e0a      	ldr	r6, [pc, #40]	; (819c0 <main_vendor_bulk_out_received+0x88>)
   81996:	f815 0b01 	ldrb.w	r0, [r5], #1
   8199a:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   8199c:	42a5      	cmp	r5, r4
   8199e:	d1fa      	bne.n	81996 <main_vendor_bulk_out_received+0x5e>
   819a0:	e7e1      	b.n	81966 <main_vendor_bulk_out_received+0x2e>
   819a2:	bf00      	nop
   819a4:	000820cd 	.word	0x000820cd
   819a8:	20001ba8 	.word	0x20001ba8
   819ac:	20001fd8 	.word	0x20001fd8
   819b0:	20000584 	.word	0x20000584
   819b4:	000820d9 	.word	0x000820d9
   819b8:	00081939 	.word	0x00081939
   819bc:	0008322d 	.word	0x0008322d
   819c0:	00080829 	.word	0x00080829

000819c4 <openadc_setup_in_received>:
{
   819c4:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   819c6:	4b13      	ldr	r3, [pc, #76]	; (81a14 <openadc_setup_in_received+0x50>)
   819c8:	785b      	ldrb	r3, [r3, #1]
   819ca:	2b12      	cmp	r3, #18
   819cc:	d003      	beq.n	819d6 <openadc_setup_in_received+0x12>
   819ce:	2b15      	cmp	r3, #21
   819d0:	d00e      	beq.n	819f0 <openadc_setup_in_received+0x2c>
   819d2:	2000      	movs	r0, #0
}
   819d4:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   819d6:	4a0f      	ldr	r2, [pc, #60]	; (81a14 <openadc_setup_in_received+0x50>)
   819d8:	4b0f      	ldr	r3, [pc, #60]	; (81a18 <openadc_setup_in_received+0x54>)
   819da:	681b      	ldr	r3, [r3, #0]
   819dc:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   819de:	4b0f      	ldr	r3, [pc, #60]	; (81a1c <openadc_setup_in_received+0x58>)
   819e0:	6819      	ldr	r1, [r3, #0]
   819e2:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   819e4:	2200      	movs	r2, #0
   819e6:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   819e8:	4b0d      	ldr	r3, [pc, #52]	; (81a20 <openadc_setup_in_received+0x5c>)
   819ea:	4798      	blx	r3
        return true;
   819ec:	2001      	movs	r0, #1
   819ee:	e7f1      	b.n	819d4 <openadc_setup_in_received+0x10>
        respbuf[0] = FPGA_ISDONE();
   819f0:	200a      	movs	r0, #10
   819f2:	4b0c      	ldr	r3, [pc, #48]	; (81a24 <openadc_setup_in_received+0x60>)
   819f4:	4798      	blx	r3
   819f6:	4b0c      	ldr	r3, [pc, #48]	; (81a28 <openadc_setup_in_received+0x64>)
   819f8:	3800      	subs	r0, #0
   819fa:	bf18      	it	ne
   819fc:	2001      	movne	r0, #1
   819fe:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   81a00:	2200      	movs	r2, #0
   81a02:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81a04:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81a06:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81a08:	4a02      	ldr	r2, [pc, #8]	; (81a14 <openadc_setup_in_received+0x50>)
   81a0a:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81a0c:	2304      	movs	r3, #4
   81a0e:	8193      	strh	r3, [r2, #12]
        return true;
   81a10:	2001      	movs	r0, #1
   81a12:	e7df      	b.n	819d4 <openadc_setup_in_received+0x10>
   81a14:	20002b90 	.word	0x20002b90
   81a18:	20001bac 	.word	0x20001bac
   81a1c:	20001bb0 	.word	0x20001bb0
   81a20:	000820cd 	.word	0x000820cd
   81a24:	00083d09 	.word	0x00083d09
   81a28:	20001f58 	.word	0x20001f58

00081a2c <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81a2c:	b508      	push	{r3, lr}
    FPGA_releaselock();
   81a2e:	4b04      	ldr	r3, [pc, #16]	; (81a40 <openadc_register_handlers+0x14>)
   81a30:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81a32:	4804      	ldr	r0, [pc, #16]	; (81a44 <openadc_register_handlers+0x18>)
   81a34:	4b04      	ldr	r3, [pc, #16]	; (81a48 <openadc_register_handlers+0x1c>)
   81a36:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81a38:	4804      	ldr	r0, [pc, #16]	; (81a4c <openadc_register_handlers+0x20>)
   81a3a:	4b05      	ldr	r3, [pc, #20]	; (81a50 <openadc_register_handlers+0x24>)
   81a3c:	4798      	blx	r3
   81a3e:	bd08      	pop	{r3, pc}
   81a40:	000820cd 	.word	0x000820cd
   81a44:	000819c5 	.word	0x000819c5
   81a48:	00081255 	.word	0x00081255
   81a4c:	00081761 	.word	0x00081761
   81a50:	00081279 	.word	0x00081279

00081a54 <usart_setup_out_received>:
	V2Protocol_ProcessCommand();
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81a54:	4b10      	ldr	r3, [pc, #64]	; (81a98 <usart_setup_out_received+0x44>)
   81a56:	785b      	ldrb	r3, [r3, #1]
   81a58:	3b1a      	subs	r3, #26
   81a5a:	2b07      	cmp	r3, #7
   81a5c:	d819      	bhi.n	81a92 <usart_setup_out_received+0x3e>
   81a5e:	e8df f003 	tbb	[pc, r3]
   81a62:	0409      	.short	0x0409
   81a64:	18181818 	.word	0x18181818
   81a68:	130e      	.short	0x130e
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81a6a:	4b0b      	ldr	r3, [pc, #44]	; (81a98 <usart_setup_out_received+0x44>)
   81a6c:	4a0b      	ldr	r2, [pc, #44]	; (81a9c <usart_setup_out_received+0x48>)
   81a6e:	611a      	str	r2, [r3, #16]
        return true;
   81a70:	2001      	movs	r0, #1
   81a72:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81a74:	4b08      	ldr	r3, [pc, #32]	; (81a98 <usart_setup_out_received+0x44>)
   81a76:	4a0a      	ldr	r2, [pc, #40]	; (81aa0 <usart_setup_out_received+0x4c>)
   81a78:	611a      	str	r2, [r3, #16]
        return true;
   81a7a:	2001      	movs	r0, #1
   81a7c:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   81a7e:	4b06      	ldr	r3, [pc, #24]	; (81a98 <usart_setup_out_received+0x44>)
   81a80:	4a08      	ldr	r2, [pc, #32]	; (81aa4 <usart_setup_out_received+0x50>)
   81a82:	611a      	str	r2, [r3, #16]
        return true;
   81a84:	2001      	movs	r0, #1
   81a86:	4770      	bx	lr

		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   81a88:	4b03      	ldr	r3, [pc, #12]	; (81a98 <usart_setup_out_received+0x44>)
   81a8a:	4a07      	ldr	r2, [pc, #28]	; (81aa8 <usart_setup_out_received+0x54>)
   81a8c:	611a      	str	r2, [r3, #16]
        return true;
   81a8e:	2001      	movs	r0, #1
   81a90:	4770      	bx	lr
    switch(udd_g_ctrlreq.req.bRequest) {
   81a92:	2000      	movs	r0, #0
    }
    return false;
}
   81a94:	4770      	bx	lr
   81a96:	bf00      	nop
   81a98:	20002b90 	.word	0x20002b90
   81a9c:	00081afd 	.word	0x00081afd
   81aa0:	00081ac5 	.word	0x00081ac5
   81aa4:	00081aad 	.word	0x00081aad
   81aa8:	00081ab9 	.word	0x00081ab9

00081aac <ctrl_xmega_program_void>:
{
   81aac:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   81aae:	4b01      	ldr	r3, [pc, #4]	; (81ab4 <ctrl_xmega_program_void+0x8>)
   81ab0:	4798      	blx	r3
}
   81ab2:	bd08      	pop	{r3, pc}
   81ab4:	000827c1 	.word	0x000827c1

00081ab8 <ctrl_avr_program_void>:
{
   81ab8:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   81aba:	4b01      	ldr	r3, [pc, #4]	; (81ac0 <ctrl_avr_program_void+0x8>)
   81abc:	4798      	blx	r3
}
   81abe:	bd08      	pop	{r3, pc}
   81ac0:	0008210d 	.word	0x0008210d

00081ac4 <ctrl_usart_cb_data>:
{		
   81ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81ac6:	4b0a      	ldr	r3, [pc, #40]	; (81af0 <ctrl_usart_cb_data+0x2c>)
   81ac8:	88da      	ldrh	r2, [r3, #6]
   81aca:	899b      	ldrh	r3, [r3, #12]
   81acc:	4293      	cmp	r3, r2
   81ace:	d30d      	bcc.n	81aec <ctrl_usart_cb_data+0x28>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81ad0:	b162      	cbz	r2, 81aec <ctrl_usart_cb_data+0x28>
   81ad2:	2400      	movs	r4, #0
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   81ad4:	4d06      	ldr	r5, [pc, #24]	; (81af0 <ctrl_usart_cb_data+0x2c>)
   81ad6:	4f07      	ldr	r7, [pc, #28]	; (81af4 <ctrl_usart_cb_data+0x30>)
   81ad8:	4e07      	ldr	r6, [pc, #28]	; (81af8 <ctrl_usart_cb_data+0x34>)
   81ada:	68ab      	ldr	r3, [r5, #8]
   81adc:	5d1a      	ldrb	r2, [r3, r4]
   81ade:	2100      	movs	r1, #0
   81ae0:	4638      	mov	r0, r7
   81ae2:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81ae4:	3401      	adds	r4, #1
   81ae6:	88eb      	ldrh	r3, [r5, #6]
   81ae8:	42a3      	cmp	r3, r4
   81aea:	dcf6      	bgt.n	81ada <ctrl_usart_cb_data+0x16>
}
   81aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81aee:	bf00      	nop
   81af0:	20002b90 	.word	0x20002b90
   81af4:	40090000 	.word	0x40090000
   81af8:	00081ef5 	.word	0x00081ef5

00081afc <ctrl_usart_cb>:
{
   81afc:	b508      	push	{r3, lr}
	ctrl_usart(USART_TARGET, false);
   81afe:	2100      	movs	r1, #0
   81b00:	4801      	ldr	r0, [pc, #4]	; (81b08 <ctrl_usart_cb+0xc>)
   81b02:	4b02      	ldr	r3, [pc, #8]	; (81b0c <ctrl_usart_cb+0x10>)
   81b04:	4798      	blx	r3
}
   81b06:	bd08      	pop	{r3, pc}
   81b08:	40090000 	.word	0x40090000
   81b0c:	00081bb5 	.word	0x00081bb5

00081b10 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81b14:	4b18      	ldr	r3, [pc, #96]	; (81b78 <usart_setup_in_received+0x68>)
   81b16:	785b      	ldrb	r3, [r3, #1]
   81b18:	3b1a      	subs	r3, #26
   81b1a:	2b07      	cmp	r3, #7
   81b1c:	d828      	bhi.n	81b70 <usart_setup_in_received+0x60>
   81b1e:	e8df f003 	tbb	[pc, r3]
   81b22:	1c04      	.short	0x1c04
   81b24:	27272727 	.word	0x27272727
   81b28:	2421      	.short	0x2421
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81b2a:	4b13      	ldr	r3, [pc, #76]	; (81b78 <usart_setup_in_received+0x68>)
   81b2c:	88db      	ldrh	r3, [r3, #6]
   81b2e:	2400      	movs	r4, #0
   81b30:	b16b      	cbz	r3, 81b4e <usart_setup_in_received+0x3e>
   81b32:	4d12      	ldr	r5, [pc, #72]	; (81b7c <usart_setup_in_received+0x6c>)
   81b34:	2400      	movs	r4, #0
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81b36:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81b84 <usart_setup_in_received+0x74>
   81b3a:	4f11      	ldr	r7, [pc, #68]	; (81b80 <usart_setup_in_received+0x70>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81b3c:	4e0e      	ldr	r6, [pc, #56]	; (81b78 <usart_setup_in_received+0x68>)
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81b3e:	4640      	mov	r0, r8
   81b40:	47b8      	blx	r7
   81b42:	f805 0b01 	strb.w	r0, [r5], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81b46:	3401      	adds	r4, #1
   81b48:	88f3      	ldrh	r3, [r6, #6]
   81b4a:	42a3      	cmp	r3, r4
   81b4c:	d8f7      	bhi.n	81b3e <usart_setup_in_received+0x2e>
        }
        udd_g_ctrlreq.payload = respbuf;
   81b4e:	4b0a      	ldr	r3, [pc, #40]	; (81b78 <usart_setup_in_received+0x68>)
   81b50:	4a0a      	ldr	r2, [pc, #40]	; (81b7c <usart_setup_in_received+0x6c>)
   81b52:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81b54:	819c      	strh	r4, [r3, #12]
        return true;
   81b56:	2001      	movs	r0, #1
   81b58:	e00b      	b.n	81b72 <usart_setup_in_received+0x62>
        return ctrl_usart(USART_TARGET, true);
   81b5a:	2101      	movs	r1, #1
   81b5c:	4809      	ldr	r0, [pc, #36]	; (81b84 <usart_setup_in_received+0x74>)
   81b5e:	4b0a      	ldr	r3, [pc, #40]	; (81b88 <usart_setup_in_received+0x78>)
   81b60:	4798      	blx	r3
   81b62:	e006      	b.n	81b72 <usart_setup_in_received+0x62>
        break;
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   81b64:	4b09      	ldr	r3, [pc, #36]	; (81b8c <usart_setup_in_received+0x7c>)
   81b66:	4798      	blx	r3
   81b68:	e003      	b.n	81b72 <usart_setup_in_received+0x62>
        break;
        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   81b6a:	4b09      	ldr	r3, [pc, #36]	; (81b90 <usart_setup_in_received+0x80>)
   81b6c:	4798      	blx	r3
   81b6e:	e000      	b.n	81b72 <usart_setup_in_received+0x62>
    switch(udd_g_ctrlreq.req.bRequest) {
   81b70:	2000      	movs	r0, #0
        break;
    }
    return false;
}
   81b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81b76:	bf00      	nop
   81b78:	20002b90 	.word	0x20002b90
   81b7c:	20001f58 	.word	0x20001f58
   81b80:	00081f89 	.word	0x00081f89
   81b84:	40090000 	.word	0x40090000
   81b88:	00081bb5 	.word	0x00081bb5
   81b8c:	000827c1 	.word	0x000827c1
   81b90:	0008210d 	.word	0x0008210d

00081b94 <naeusart_register_handlers>:

// naeusart because I wouldn't be surpised if usart_register_handlers collides with something
void naeusart_register_handlers(void)
{
   81b94:	b508      	push	{r3, lr}
    naeusb_add_in_handler(usart_setup_in_received);
   81b96:	4803      	ldr	r0, [pc, #12]	; (81ba4 <naeusart_register_handlers+0x10>)
   81b98:	4b03      	ldr	r3, [pc, #12]	; (81ba8 <naeusart_register_handlers+0x14>)
   81b9a:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   81b9c:	4803      	ldr	r0, [pc, #12]	; (81bac <naeusart_register_handlers+0x18>)
   81b9e:	4b04      	ldr	r3, [pc, #16]	; (81bb0 <naeusart_register_handlers+0x1c>)
   81ba0:	4798      	blx	r3
   81ba2:	bd08      	pop	{r3, pc}
   81ba4:	00081b11 	.word	0x00081b11
   81ba8:	00081255 	.word	0x00081255
   81bac:	00081a55 	.word	0x00081a55
   81bb0:	00081279 	.word	0x00081279

00081bb4 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   81bb4:	b570      	push	{r4, r5, r6, lr}
   81bb6:	b086      	sub	sp, #24
   81bb8:	4605      	mov	r5, r0
   81bba:	460c      	mov	r4, r1
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81bbc:	4b92      	ldr	r3, [pc, #584]	; (81e08 <ctrl_usart+0x254>)
   81bbe:	789b      	ldrb	r3, [r3, #2]
   81bc0:	3b10      	subs	r3, #16
   81bc2:	2b08      	cmp	r3, #8
   81bc4:	f200 817c 	bhi.w	81ec0 <ctrl_usart+0x30c>
   81bc8:	e8df f013 	tbh	[pc, r3, lsl #1]
   81bcc:	00950009 	.word	0x00950009
   81bd0:	017a00d6 	.word	0x017a00d6
   81bd4:	017a00e3 	.word	0x017a00e3
   81bd8:	017a017a 	.word	0x017a017a
   81bdc:	0116      	.short	0x0116
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81bde:	b134      	cbz	r4, 81bee <ctrl_usart+0x3a>
				if (udd_g_ctrlreq.req.wLength == 4){
   81be0:	4b89      	ldr	r3, [pc, #548]	; (81e08 <ctrl_usart+0x254>)
   81be2:	88dc      	ldrh	r4, [r3, #6]
   81be4:	2c04      	cmp	r4, #4
   81be6:	bf14      	ite	ne
   81be8:	2000      	movne	r0, #0
   81bea:	2001      	moveq	r0, #1
   81bec:	e169      	b.n	81ec2 <ctrl_usart+0x30e>
					word2buf(ctrlbuffer, baud);
					*/
					return true;
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   81bee:	4b86      	ldr	r3, [pc, #536]	; (81e08 <ctrl_usart+0x254>)
   81bf0:	88db      	ldrh	r3, [r3, #6]
   81bf2:	2b07      	cmp	r3, #7
   81bf4:	d001      	beq.n	81bfa <ctrl_usart+0x46>
				}
			}
			break;		
	}
	
	return false;
   81bf6:	4620      	mov	r0, r4
   81bf8:	e163      	b.n	81ec2 <ctrl_usart+0x30e>
						buf2word(baud, udd_g_ctrlreq.payload);	
   81bfa:	4b83      	ldr	r3, [pc, #524]	; (81e08 <ctrl_usart+0x254>)
   81bfc:	689b      	ldr	r3, [r3, #8]
   81bfe:	681a      	ldr	r2, [r3, #0]
						usartopts.baudrate = baud;
   81c00:	9200      	str	r2, [sp, #0]
						switch(udd_g_ctrlreq.payload[4])
   81c02:	791a      	ldrb	r2, [r3, #4]
   81c04:	2a01      	cmp	r2, #1
   81c06:	d00e      	beq.n	81c26 <ctrl_usart+0x72>
   81c08:	2a02      	cmp	r2, #2
   81c0a:	d010      	beq.n	81c2e <ctrl_usart+0x7a>
   81c0c:	b112      	cbz	r2, 81c14 <ctrl_usart+0x60>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81c0e:	2200      	movs	r2, #0
   81c10:	9203      	str	r2, [sp, #12]
   81c12:	e000      	b.n	81c16 <ctrl_usart+0x62>
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81c14:	9203      	str	r2, [sp, #12]
						switch(udd_g_ctrlreq.payload[5])
   81c16:	795a      	ldrb	r2, [r3, #5]
   81c18:	2a04      	cmp	r2, #4
   81c1a:	d828      	bhi.n	81c6e <ctrl_usart+0xba>
   81c1c:	e8df f002 	tbb	[pc, r2]
   81c20:	1f1c180b 	.word	0x1f1c180b
   81c24:	23          	.byte	0x23
   81c25:	00          	.byte	0x00
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81c2a:	9203      	str	r2, [sp, #12]
								break;
   81c2c:	e7f3      	b.n	81c16 <ctrl_usart+0x62>
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81c32:	9203      	str	r2, [sp, #12]
								break;
   81c34:	e7ef      	b.n	81c16 <ctrl_usart+0x62>
								usartopts.parity_type = US_MR_PAR_NO;
   81c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81c3a:	9202      	str	r2, [sp, #8]
						switch(udd_g_ctrlreq.payload[6])
   81c3c:	799b      	ldrb	r3, [r3, #6]
   81c3e:	2b06      	cmp	r3, #6
   81c40:	d02d      	beq.n	81c9e <ctrl_usart+0xea>
   81c42:	2b07      	cmp	r3, #7
   81c44:	d02e      	beq.n	81ca4 <ctrl_usart+0xf0>
   81c46:	2b05      	cmp	r3, #5
   81c48:	d015      	beq.n	81c76 <ctrl_usart+0xc2>
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81c4a:	23c0      	movs	r3, #192	; 0xc0
   81c4c:	9301      	str	r3, [sp, #4]
   81c4e:	e014      	b.n	81c7a <ctrl_usart+0xc6>
								usartopts.parity_type = US_MR_PAR_ODD;
   81c50:	f44f 7200 	mov.w	r2, #512	; 0x200
   81c54:	9202      	str	r2, [sp, #8]
								break;
   81c56:	e7f1      	b.n	81c3c <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_EVEN;
   81c58:	2200      	movs	r2, #0
   81c5a:	9202      	str	r2, [sp, #8]
								break;
   81c5c:	e7ee      	b.n	81c3c <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_MARK;
   81c5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   81c62:	9202      	str	r2, [sp, #8]
								break;
   81c64:	e7ea      	b.n	81c3c <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_SPACE;
   81c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81c6a:	9202      	str	r2, [sp, #8]
								break;							
   81c6c:	e7e6      	b.n	81c3c <ctrl_usart+0x88>
								usartopts.parity_type = US_MR_PAR_NO;
   81c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81c72:	9202      	str	r2, [sp, #8]
   81c74:	e7e2      	b.n	81c3c <ctrl_usart+0x88>
								usartopts.char_length = US_MR_CHRL_5_BIT;
   81c76:	2300      	movs	r3, #0
   81c78:	9301      	str	r3, [sp, #4]
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81c7a:	2300      	movs	r3, #0
   81c7c:	9304      	str	r3, [sp, #16]
						if (usart == USART0)
   81c7e:	4b63      	ldr	r3, [pc, #396]	; (81e0c <ctrl_usart+0x258>)
   81c80:	429d      	cmp	r5, r3
   81c82:	d012      	beq.n	81caa <ctrl_usart+0xf6>
						} else if (usart == USART1)
   81c84:	4b62      	ldr	r3, [pc, #392]	; (81e10 <ctrl_usart+0x25c>)
   81c86:	429d      	cmp	r5, r3
   81c88:	d01d      	beq.n	81cc6 <ctrl_usart+0x112>
						} else if (usart == USART2)
   81c8a:	4b62      	ldr	r3, [pc, #392]	; (81e14 <ctrl_usart+0x260>)
   81c8c:	429d      	cmp	r5, r3
   81c8e:	d026      	beq.n	81cde <ctrl_usart+0x12a>
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   81c90:	4a61      	ldr	r2, [pc, #388]	; (81e18 <ctrl_usart+0x264>)
   81c92:	4669      	mov	r1, sp
   81c94:	4628      	mov	r0, r5
   81c96:	4b61      	ldr	r3, [pc, #388]	; (81e1c <ctrl_usart+0x268>)
   81c98:	4798      	blx	r3
	return false;
   81c9a:	4620      	mov	r0, r4
   81c9c:	e111      	b.n	81ec2 <ctrl_usart+0x30e>
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81c9e:	2340      	movs	r3, #64	; 0x40
   81ca0:	9301      	str	r3, [sp, #4]
								break;
   81ca2:	e7ea      	b.n	81c7a <ctrl_usart+0xc6>
								usartopts.char_length = US_MR_CHRL_7_BIT;
   81ca4:	2380      	movs	r3, #128	; 0x80
   81ca6:	9301      	str	r3, [sp, #4]
								break;					
   81ca8:	e7e7      	b.n	81c7a <ctrl_usart+0xc6>
   81caa:	200d      	movs	r0, #13
   81cac:	4b5c      	ldr	r3, [pc, #368]	; (81e20 <ctrl_usart+0x26c>)
   81cae:	4798      	blx	r3
							init_circ_buf(&usb_usart_circ_buf);
   81cb0:	485c      	ldr	r0, [pc, #368]	; (81e24 <ctrl_usart+0x270>)
   81cb2:	4e5d      	ldr	r6, [pc, #372]	; (81e28 <ctrl_usart+0x274>)
   81cb4:	47b0      	blx	r6
							init_circ_buf(&tx0buf);
   81cb6:	485d      	ldr	r0, [pc, #372]	; (81e2c <ctrl_usart+0x278>)
   81cb8:	47b0      	blx	r6
							init_circ_buf(&rx0buf);
   81cba:	485d      	ldr	r0, [pc, #372]	; (81e30 <ctrl_usart+0x27c>)
   81cbc:	47b0      	blx	r6
							usart_x_enabled[0] = true;
   81cbe:	4b5d      	ldr	r3, [pc, #372]	; (81e34 <ctrl_usart+0x280>)
   81cc0:	2201      	movs	r2, #1
   81cc2:	701a      	strb	r2, [r3, #0]
   81cc4:	e7e4      	b.n	81c90 <ctrl_usart+0xdc>
   81cc6:	200e      	movs	r0, #14
   81cc8:	4b55      	ldr	r3, [pc, #340]	; (81e20 <ctrl_usart+0x26c>)
   81cca:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   81ccc:	485a      	ldr	r0, [pc, #360]	; (81e38 <ctrl_usart+0x284>)
   81cce:	4e56      	ldr	r6, [pc, #344]	; (81e28 <ctrl_usart+0x274>)
   81cd0:	47b0      	blx	r6
							init_circ_buf(&rx1buf);
   81cd2:	485a      	ldr	r0, [pc, #360]	; (81e3c <ctrl_usart+0x288>)
   81cd4:	47b0      	blx	r6
							usart_x_enabled[1] = true;
   81cd6:	4b57      	ldr	r3, [pc, #348]	; (81e34 <ctrl_usart+0x280>)
   81cd8:	2201      	movs	r2, #1
   81cda:	705a      	strb	r2, [r3, #1]
   81cdc:	e7d8      	b.n	81c90 <ctrl_usart+0xdc>
   81cde:	200f      	movs	r0, #15
   81ce0:	4b4f      	ldr	r3, [pc, #316]	; (81e20 <ctrl_usart+0x26c>)
   81ce2:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81ce4:	4856      	ldr	r0, [pc, #344]	; (81e40 <ctrl_usart+0x28c>)
   81ce6:	4e50      	ldr	r6, [pc, #320]	; (81e28 <ctrl_usart+0x274>)
   81ce8:	47b0      	blx	r6
							init_circ_buf(&rx2buf);
   81cea:	4856      	ldr	r0, [pc, #344]	; (81e44 <ctrl_usart+0x290>)
   81cec:	47b0      	blx	r6
							usart_x_enabled[2] = true;
   81cee:	4b51      	ldr	r3, [pc, #324]	; (81e34 <ctrl_usart+0x280>)
   81cf0:	2201      	movs	r2, #1
   81cf2:	709a      	strb	r2, [r3, #2]
   81cf4:	e7cc      	b.n	81c90 <ctrl_usart+0xdc>
			if (directionIn == false){
   81cf6:	b10c      	cbz	r4, 81cfc <ctrl_usart+0x148>
	return false;
   81cf8:	2000      	movs	r0, #0
   81cfa:	e0e2      	b.n	81ec2 <ctrl_usart+0x30e>
				usart_enable_rx(usart);
   81cfc:	4b52      	ldr	r3, [pc, #328]	; (81e48 <ctrl_usart+0x294>)
   81cfe:	4798      	blx	r3
				usart_enable_tx(usart);
   81d00:	4628      	mov	r0, r5
   81d02:	4b52      	ldr	r3, [pc, #328]	; (81e4c <ctrl_usart+0x298>)
   81d04:	4798      	blx	r3
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   81d06:	2101      	movs	r1, #1
   81d08:	4628      	mov	r0, r5
   81d0a:	4b51      	ldr	r3, [pc, #324]	; (81e50 <ctrl_usart+0x29c>)
   81d0c:	4798      	blx	r3
				if (usart == USART0){
   81d0e:	4b3f      	ldr	r3, [pc, #252]	; (81e0c <ctrl_usart+0x258>)
   81d10:	429d      	cmp	r5, r3
   81d12:	d007      	beq.n	81d24 <ctrl_usart+0x170>
				} else if (usart == USART1) {
   81d14:	4b3e      	ldr	r3, [pc, #248]	; (81e10 <ctrl_usart+0x25c>)
   81d16:	429d      	cmp	r5, r3
   81d18:	d018      	beq.n	81d4c <ctrl_usart+0x198>
				} else if (usart == USART2) {
   81d1a:	4b3e      	ldr	r3, [pc, #248]	; (81e14 <ctrl_usart+0x260>)
   81d1c:	429d      	cmp	r5, r3
   81d1e:	d020      	beq.n	81d62 <ctrl_usart+0x1ae>
	return false;
   81d20:	4620      	mov	r0, r4
   81d22:	e0ce      	b.n	81ec2 <ctrl_usart+0x30e>
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81d24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d28:	2013      	movs	r0, #19
   81d2a:	4d4a      	ldr	r5, [pc, #296]	; (81e54 <ctrl_usart+0x2a0>)
   81d2c:	47a8      	blx	r5
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81d2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d32:	2012      	movs	r0, #18
   81d34:	47a8      	blx	r5
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81d36:	4b48      	ldr	r3, [pc, #288]	; (81e58 <ctrl_usart+0x2a4>)
   81d38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81d3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81d40:	2150      	movs	r1, #80	; 0x50
   81d42:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81d46:	601a      	str	r2, [r3, #0]
	return false;
   81d48:	4620      	mov	r0, r4
}
   81d4a:	e0ba      	b.n	81ec2 <ctrl_usart+0x30e>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81d4c:	4b42      	ldr	r3, [pc, #264]	; (81e58 <ctrl_usart+0x2a4>)
   81d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81d52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81d56:	2150      	movs	r1, #80	; 0x50
   81d58:	f883 130e 	strb.w	r1, [r3, #782]	; 0x30e
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81d5c:	601a      	str	r2, [r3, #0]
   81d5e:	4620      	mov	r0, r4
}
   81d60:	e0af      	b.n	81ec2 <ctrl_usart+0x30e>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81d62:	4b3d      	ldr	r3, [pc, #244]	; (81e58 <ctrl_usart+0x2a4>)
   81d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81d6c:	2150      	movs	r1, #80	; 0x50
   81d6e:	f883 130f 	strb.w	r1, [r3, #783]	; 0x30f
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81d72:	601a      	str	r2, [r3, #0]
   81d74:	4620      	mov	r0, r4
}
   81d76:	e0a4      	b.n	81ec2 <ctrl_usart+0x30e>
			if (directionIn == false){
   81d78:	b10c      	cbz	r4, 81d7e <ctrl_usart+0x1ca>
	return false;
   81d7a:	2000      	movs	r0, #0
   81d7c:	e0a1      	b.n	81ec2 <ctrl_usart+0x30e>
				usart_disable_rx(usart);
   81d7e:	4e37      	ldr	r6, [pc, #220]	; (81e5c <ctrl_usart+0x2a8>)
   81d80:	47b0      	blx	r6
				usart_disable_rx(usart);
   81d82:	4628      	mov	r0, r5
   81d84:	47b0      	blx	r6
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81d86:	2103      	movs	r1, #3
   81d88:	4628      	mov	r0, r5
   81d8a:	4b35      	ldr	r3, [pc, #212]	; (81e60 <ctrl_usart+0x2ac>)
   81d8c:	4798      	blx	r3
	return false;
   81d8e:	4620      	mov	r0, r4
   81d90:	e097      	b.n	81ec2 <ctrl_usart+0x30e>
			if (directionIn){
   81d92:	2c00      	cmp	r4, #0
   81d94:	f000 8097 	beq.w	81ec6 <ctrl_usart+0x312>
				if (udd_g_ctrlreq.req.wLength == 4){
   81d98:	4b1b      	ldr	r3, [pc, #108]	; (81e08 <ctrl_usart+0x254>)
   81d9a:	88db      	ldrh	r3, [r3, #6]
   81d9c:	2b04      	cmp	r3, #4
   81d9e:	d001      	beq.n	81da4 <ctrl_usart+0x1f0>
	return false;
   81da0:	2000      	movs	r0, #0
   81da2:	e08e      	b.n	81ec2 <ctrl_usart+0x30e>
					udd_g_ctrlreq.payload = ctrlbuffer;
   81da4:	4b18      	ldr	r3, [pc, #96]	; (81e08 <ctrl_usart+0x254>)
   81da6:	492f      	ldr	r1, [pc, #188]	; (81e64 <ctrl_usart+0x2b0>)
   81da8:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81daa:	2104      	movs	r1, #4
   81dac:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   81dae:	4b17      	ldr	r3, [pc, #92]	; (81e0c <ctrl_usart+0x258>)
   81db0:	4298      	cmp	r0, r3
   81db2:	d012      	beq.n	81dda <ctrl_usart+0x226>
					} else if (usart == USART1){
   81db4:	4b16      	ldr	r3, [pc, #88]	; (81e10 <ctrl_usart+0x25c>)
   81db6:	4298      	cmp	r0, r3
   81db8:	d014      	beq.n	81de4 <ctrl_usart+0x230>
					} else if (usart == USART2){
   81dba:	4b16      	ldr	r3, [pc, #88]	; (81e14 <ctrl_usart+0x260>)
   81dbc:	4298      	cmp	r0, r3
   81dbe:	d016      	beq.n	81dee <ctrl_usart+0x23a>
					word2buf(ctrlbuffer, cnt);
   81dc0:	4b28      	ldr	r3, [pc, #160]	; (81e64 <ctrl_usart+0x2b0>)
   81dc2:	701a      	strb	r2, [r3, #0]
   81dc4:	f3c2 2107 	ubfx	r1, r2, #8, #8
   81dc8:	7059      	strb	r1, [r3, #1]
   81dca:	f3c2 4107 	ubfx	r1, r2, #16, #8
   81dce:	7099      	strb	r1, [r3, #2]
   81dd0:	f3c2 6007 	ubfx	r0, r2, #24, #8
   81dd4:	70d8      	strb	r0, [r3, #3]
					return true;
   81dd6:	4620      	mov	r0, r4
   81dd8:	e073      	b.n	81ec2 <ctrl_usart+0x30e>
						cnt = circ_buf_count(&rx0buf);
   81dda:	4815      	ldr	r0, [pc, #84]	; (81e30 <ctrl_usart+0x27c>)
   81ddc:	4b22      	ldr	r3, [pc, #136]	; (81e68 <ctrl_usart+0x2b4>)
   81dde:	4798      	blx	r3
   81de0:	4602      	mov	r2, r0
   81de2:	e7ed      	b.n	81dc0 <ctrl_usart+0x20c>
						cnt = circ_buf_count(&rx1buf);
   81de4:	4815      	ldr	r0, [pc, #84]	; (81e3c <ctrl_usart+0x288>)
   81de6:	4b20      	ldr	r3, [pc, #128]	; (81e68 <ctrl_usart+0x2b4>)
   81de8:	4798      	blx	r3
   81dea:	4602      	mov	r2, r0
   81dec:	e7e8      	b.n	81dc0 <ctrl_usart+0x20c>
						cnt = circ_buf_count(&rx2buf);
   81dee:	4815      	ldr	r0, [pc, #84]	; (81e44 <ctrl_usart+0x290>)
   81df0:	4b1d      	ldr	r3, [pc, #116]	; (81e68 <ctrl_usart+0x2b4>)
   81df2:	4798      	blx	r3
   81df4:	4602      	mov	r2, r0
   81df6:	e7e3      	b.n	81dc0 <ctrl_usart+0x20c>
			if (directionIn){
   81df8:	2c00      	cmp	r4, #0
   81dfa:	d066      	beq.n	81eca <ctrl_usart+0x316>
				if (udd_g_ctrlreq.req.wLength == 4){
   81dfc:	4b02      	ldr	r3, [pc, #8]	; (81e08 <ctrl_usart+0x254>)
   81dfe:	88db      	ldrh	r3, [r3, #6]
   81e00:	2b04      	cmp	r3, #4
   81e02:	d033      	beq.n	81e6c <ctrl_usart+0x2b8>
	return false;
   81e04:	2000      	movs	r0, #0
   81e06:	e05c      	b.n	81ec2 <ctrl_usart+0x30e>
   81e08:	20002b90 	.word	0x20002b90
   81e0c:	40090000 	.word	0x40090000
   81e10:	40094000 	.word	0x40094000
   81e14:	40098000 	.word	0x40098000
   81e18:	05b8d800 	.word	0x05b8d800
   81e1c:	0008569d 	.word	0x0008569d
   81e20:	00084095 	.word	0x00084095
   81e24:	20002728 	.word	0x20002728
   81e28:	00082f79 	.word	0x00082f79
   81e2c:	20002a78 	.word	0x20002a78
   81e30:	200024ac 	.word	0x200024ac
   81e34:	20001bc4 	.word	0x20001bc4
   81e38:	20002654 	.word	0x20002654
   81e3c:	200029a4 	.word	0x200029a4
   81e40:	200023d8 	.word	0x200023d8
   81e44:	200028d0 	.word	0x200028d0
   81e48:	00085761 	.word	0x00085761
   81e4c:	00085755 	.word	0x00085755
   81e50:	0008576d 	.word	0x0008576d
   81e54:	00083d59 	.word	0x00083d59
   81e58:	e000e100 	.word	0xe000e100
   81e5c:	00085767 	.word	0x00085767
   81e60:	00085771 	.word	0x00085771
   81e64:	20001bb4 	.word	0x20001bb4
   81e68:	0008302d 	.word	0x0008302d
					udd_g_ctrlreq.payload = ctrlbuffer;
   81e6c:	4b18      	ldr	r3, [pc, #96]	; (81ed0 <ctrl_usart+0x31c>)
   81e6e:	4919      	ldr	r1, [pc, #100]	; (81ed4 <ctrl_usart+0x320>)
   81e70:	6099      	str	r1, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81e72:	2104      	movs	r1, #4
   81e74:	8199      	strh	r1, [r3, #12]
					if (usart == USART0){
   81e76:	4b18      	ldr	r3, [pc, #96]	; (81ed8 <ctrl_usart+0x324>)
   81e78:	4298      	cmp	r0, r3
   81e7a:	d012      	beq.n	81ea2 <ctrl_usart+0x2ee>
					} else if (usart == USART1){
   81e7c:	4b17      	ldr	r3, [pc, #92]	; (81edc <ctrl_usart+0x328>)
   81e7e:	4298      	cmp	r0, r3
   81e80:	d014      	beq.n	81eac <ctrl_usart+0x2f8>
					} else if (usart == USART2){
   81e82:	4b17      	ldr	r3, [pc, #92]	; (81ee0 <ctrl_usart+0x32c>)
   81e84:	4298      	cmp	r0, r3
   81e86:	d016      	beq.n	81eb6 <ctrl_usart+0x302>
					word2buf(ctrlbuffer, cnt);
   81e88:	4b12      	ldr	r3, [pc, #72]	; (81ed4 <ctrl_usart+0x320>)
   81e8a:	701a      	strb	r2, [r3, #0]
   81e8c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   81e90:	7059      	strb	r1, [r3, #1]
   81e92:	f3c2 4107 	ubfx	r1, r2, #16, #8
   81e96:	7099      	strb	r1, [r3, #2]
   81e98:	f3c2 6007 	ubfx	r0, r2, #24, #8
   81e9c:	70d8      	strb	r0, [r3, #3]
					return true;
   81e9e:	4620      	mov	r0, r4
   81ea0:	e00f      	b.n	81ec2 <ctrl_usart+0x30e>
						cnt = circ_buf_count(&tx0buf);
   81ea2:	4810      	ldr	r0, [pc, #64]	; (81ee4 <ctrl_usart+0x330>)
   81ea4:	4b10      	ldr	r3, [pc, #64]	; (81ee8 <ctrl_usart+0x334>)
   81ea6:	4798      	blx	r3
   81ea8:	4602      	mov	r2, r0
   81eaa:	e7ed      	b.n	81e88 <ctrl_usart+0x2d4>
						cnt = circ_buf_count(&tx1buf);
   81eac:	480f      	ldr	r0, [pc, #60]	; (81eec <ctrl_usart+0x338>)
   81eae:	4b0e      	ldr	r3, [pc, #56]	; (81ee8 <ctrl_usart+0x334>)
   81eb0:	4798      	blx	r3
   81eb2:	4602      	mov	r2, r0
   81eb4:	e7e8      	b.n	81e88 <ctrl_usart+0x2d4>
						cnt = circ_buf_count(&tx2buf);
   81eb6:	480e      	ldr	r0, [pc, #56]	; (81ef0 <ctrl_usart+0x33c>)
   81eb8:	4b0b      	ldr	r3, [pc, #44]	; (81ee8 <ctrl_usart+0x334>)
   81eba:	4798      	blx	r3
   81ebc:	4602      	mov	r2, r0
   81ebe:	e7e3      	b.n	81e88 <ctrl_usart+0x2d4>
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81ec0:	2000      	movs	r0, #0
}
   81ec2:	b006      	add	sp, #24
   81ec4:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   81ec6:	4620      	mov	r0, r4
   81ec8:	e7fb      	b.n	81ec2 <ctrl_usart+0x30e>
   81eca:	4620      	mov	r0, r4
   81ecc:	e7f9      	b.n	81ec2 <ctrl_usart+0x30e>
   81ece:	bf00      	nop
   81ed0:	20002b90 	.word	0x20002b90
   81ed4:	20001bb4 	.word	0x20001bb4
   81ed8:	40090000 	.word	0x40090000
   81edc:	40094000 	.word	0x40094000
   81ee0:	40098000 	.word	0x40098000
   81ee4:	20002a78 	.word	0x20002a78
   81ee8:	0008302d 	.word	0x0008302d
   81eec:	20002654 	.word	0x20002654
   81ef0:	200023d8 	.word	0x200023d8

00081ef4 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81ef4:	b538      	push	{r3, r4, r5, lr}
   81ef6:	4604      	mov	r4, r0
   81ef8:	4613      	mov	r3, r2
	if (txbuf == NULL){
   81efa:	460d      	mov	r5, r1
   81efc:	b159      	cbz	r1, 81f16 <usart_driver_putchar+0x22>
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81efe:	2200      	movs	r2, #0
   81f00:	4619      	mov	r1, r3
   81f02:	4628      	mov	r0, r5
   81f04:	4b16      	ldr	r3, [pc, #88]	; (81f60 <usart_driver_putchar+0x6c>)
   81f06:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81f08:	4620      	mov	r0, r4
   81f0a:	4b16      	ldr	r3, [pc, #88]	; (81f64 <usart_driver_putchar+0x70>)
   81f0c:	4798      	blx	r3
   81f0e:	f010 0f02 	tst.w	r0, #2
   81f12:	d011      	beq.n	81f38 <usart_driver_putchar+0x44>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
			usart_putchar(usart, get_from_circ_buf(txbuf));
		usart_enable_interrupt(usart, US_CSR_TXRDY);
	}
}
   81f14:	bd38      	pop	{r3, r4, r5, pc}
		if (usart == USART0) txbuf = &tx0buf;
   81f16:	4a14      	ldr	r2, [pc, #80]	; (81f68 <usart_driver_putchar+0x74>)
   81f18:	4290      	cmp	r0, r2
   81f1a:	d009      	beq.n	81f30 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81f1c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   81f20:	4290      	cmp	r0, r2
   81f22:	d007      	beq.n	81f34 <usart_driver_putchar+0x40>
		else if (usart == USART2) txbuf = &tx2buf;
   81f24:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   81f28:	4290      	cmp	r0, r2
   81f2a:	d1f3      	bne.n	81f14 <usart_driver_putchar+0x20>
   81f2c:	4d0f      	ldr	r5, [pc, #60]	; (81f6c <usart_driver_putchar+0x78>)
   81f2e:	e7e6      	b.n	81efe <usart_driver_putchar+0xa>
		if (usart == USART0) txbuf = &tx0buf;
   81f30:	4d0f      	ldr	r5, [pc, #60]	; (81f70 <usart_driver_putchar+0x7c>)
   81f32:	e7e4      	b.n	81efe <usart_driver_putchar+0xa>
		else if (usart == USART1) txbuf = &tx1buf;
   81f34:	4d0f      	ldr	r5, [pc, #60]	; (81f74 <usart_driver_putchar+0x80>)
   81f36:	e7e2      	b.n	81efe <usart_driver_putchar+0xa>
		if ((usart_get_status(usart) & US_CSR_TXRDY))
   81f38:	4620      	mov	r0, r4
   81f3a:	4b0f      	ldr	r3, [pc, #60]	; (81f78 <usart_driver_putchar+0x84>)
   81f3c:	4798      	blx	r3
   81f3e:	f010 0f02 	tst.w	r0, #2
   81f42:	d104      	bne.n	81f4e <usart_driver_putchar+0x5a>
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81f44:	2102      	movs	r1, #2
   81f46:	4620      	mov	r0, r4
   81f48:	4b0c      	ldr	r3, [pc, #48]	; (81f7c <usart_driver_putchar+0x88>)
   81f4a:	4798      	blx	r3
   81f4c:	e7e2      	b.n	81f14 <usart_driver_putchar+0x20>
			usart_putchar(usart, get_from_circ_buf(txbuf));
   81f4e:	4628      	mov	r0, r5
   81f50:	4b0b      	ldr	r3, [pc, #44]	; (81f80 <usart_driver_putchar+0x8c>)
   81f52:	4798      	blx	r3
   81f54:	4601      	mov	r1, r0
   81f56:	4620      	mov	r0, r4
   81f58:	4b0a      	ldr	r3, [pc, #40]	; (81f84 <usart_driver_putchar+0x90>)
   81f5a:	4798      	blx	r3
   81f5c:	e7f2      	b.n	81f44 <usart_driver_putchar+0x50>
   81f5e:	bf00      	nop
   81f60:	00082f85 	.word	0x00082f85
   81f64:	00085775 	.word	0x00085775
   81f68:	40090000 	.word	0x40090000
   81f6c:	200023d8 	.word	0x200023d8
   81f70:	20002a78 	.word	0x20002a78
   81f74:	20002654 	.word	0x20002654
   81f78:	00085779 	.word	0x00085779
   81f7c:	0008576d 	.word	0x0008576d
   81f80:	00082fd9 	.word	0x00082fd9
   81f84:	00085799 	.word	0x00085799

00081f88 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81f88:	b508      	push	{r3, lr}
	tcirc_buf * rxbuf = NULL;	 
	if (rxbuf == NULL){
			if (usart == USART0) rxbuf = &rx0buf;
   81f8a:	4b0a      	ldr	r3, [pc, #40]	; (81fb4 <usart_driver_getchar+0x2c>)
   81f8c:	4298      	cmp	r0, r3
   81f8e:	d00b      	beq.n	81fa8 <usart_driver_getchar+0x20>
			else if (usart == USART1) rxbuf = &rx1buf;
   81f90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   81f94:	4298      	cmp	r0, r3
   81f96:	d009      	beq.n	81fac <usart_driver_getchar+0x24>
			else if (usart == USART2) rxbuf = &rx2buf;
   81f98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   81f9c:	4298      	cmp	r0, r3
   81f9e:	d107      	bne.n	81fb0 <usart_driver_getchar+0x28>
   81fa0:	4805      	ldr	r0, [pc, #20]	; (81fb8 <usart_driver_getchar+0x30>)
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
	}
	return get_from_circ_buf(rxbuf);
   81fa2:	4b06      	ldr	r3, [pc, #24]	; (81fbc <usart_driver_getchar+0x34>)
   81fa4:	4798      	blx	r3
}
   81fa6:	bd08      	pop	{r3, pc}
			if (usart == USART0) rxbuf = &rx0buf;
   81fa8:	4805      	ldr	r0, [pc, #20]	; (81fc0 <usart_driver_getchar+0x38>)
   81faa:	e7fa      	b.n	81fa2 <usart_driver_getchar+0x1a>
			else if (usart == USART1) rxbuf = &rx1buf;
   81fac:	4805      	ldr	r0, [pc, #20]	; (81fc4 <usart_driver_getchar+0x3c>)
   81fae:	e7f8      	b.n	81fa2 <usart_driver_getchar+0x1a>
			else return 0xFF;
   81fb0:	20ff      	movs	r0, #255	; 0xff
   81fb2:	e7f8      	b.n	81fa6 <usart_driver_getchar+0x1e>
   81fb4:	40090000 	.word	0x40090000
   81fb8:	200028d0 	.word	0x200028d0
   81fbc:	00082fd9 	.word	0x00082fd9
   81fc0:	200024ac 	.word	0x200024ac
   81fc4:	200029a4 	.word	0x200029a4

00081fc8 <generic_isr>:


void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fcc:	4607      	mov	r7, r0
   81fce:	460e      	mov	r6, r1
   81fd0:	4615      	mov	r5, r2
	uint32_t status;
	status = usart_get_status(usart);
   81fd2:	4b14      	ldr	r3, [pc, #80]	; (82024 <generic_isr+0x5c>)
   81fd4:	4798      	blx	r3
   81fd6:	4604      	mov	r4, r0
	if (status & US_CSR_RXRDY){
   81fd8:	f010 0f01 	tst.w	r0, #1
   81fdc:	d104      	bne.n	81fe8 <generic_isr+0x20>
		add_to_circ_buf(rxbuf, temp, false);
		//add_to_circ_buf(&usb_usart_circ_buf, temp, false);
		udi_cdc_multi_putc(0, temp);
	}
	
	if (status & US_CSR_TXRDY){
   81fde:	f014 0f02 	tst.w	r4, #2
   81fe2:	d10e      	bne.n	82002 <generic_isr+0x3a>
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81fe8:	69b9      	ldr	r1, [r7, #24]
   81fea:	f3c1 0808 	ubfx	r8, r1, #0, #9
		add_to_circ_buf(rxbuf, temp, false);
   81fee:	2200      	movs	r2, #0
   81ff0:	b2c9      	uxtb	r1, r1
   81ff2:	4630      	mov	r0, r6
   81ff4:	4b0c      	ldr	r3, [pc, #48]	; (82028 <generic_isr+0x60>)
   81ff6:	4798      	blx	r3
		udi_cdc_multi_putc(0, temp);
   81ff8:	4641      	mov	r1, r8
   81ffa:	2000      	movs	r0, #0
   81ffc:	4b0b      	ldr	r3, [pc, #44]	; (8202c <generic_isr+0x64>)
   81ffe:	4798      	blx	r3
   82000:	e7ed      	b.n	81fde <generic_isr+0x16>
		if (circ_buf_has_char(txbuf)){
   82002:	4628      	mov	r0, r5
   82004:	4b0a      	ldr	r3, [pc, #40]	; (82030 <generic_isr+0x68>)
   82006:	4798      	blx	r3
   82008:	b138      	cbz	r0, 8201a <generic_isr+0x52>
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   8200a:	4628      	mov	r0, r5
   8200c:	4b09      	ldr	r3, [pc, #36]	; (82034 <generic_isr+0x6c>)
   8200e:	4798      	blx	r3
   82010:	4601      	mov	r1, r0
   82012:	4638      	mov	r0, r7
   82014:	4b08      	ldr	r3, [pc, #32]	; (82038 <generic_isr+0x70>)
   82016:	4798      	blx	r3
   82018:	e7e4      	b.n	81fe4 <generic_isr+0x1c>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   8201a:	2102      	movs	r1, #2
   8201c:	4638      	mov	r0, r7
   8201e:	4b07      	ldr	r3, [pc, #28]	; (8203c <generic_isr+0x74>)
   82020:	4798      	blx	r3
}
   82022:	e7df      	b.n	81fe4 <generic_isr+0x1c>
   82024:	00085779 	.word	0x00085779
   82028:	00082f85 	.word	0x00082f85
   8202c:	00080705 	.word	0x00080705
   82030:	00083021 	.word	0x00083021
   82034:	00082fd9 	.word	0x00082fd9
   82038:	00085799 	.word	0x00085799
   8203c:	00085771 	.word	0x00085771

00082040 <USART0_Handler>:

ISR(USART0_Handler)
{
   82040:	b508      	push	{r3, lr}
	generic_isr(USART0, &rx0buf, &tx0buf);
   82042:	4a03      	ldr	r2, [pc, #12]	; (82050 <USART0_Handler+0x10>)
   82044:	4903      	ldr	r1, [pc, #12]	; (82054 <USART0_Handler+0x14>)
   82046:	4804      	ldr	r0, [pc, #16]	; (82058 <USART0_Handler+0x18>)
   82048:	4b04      	ldr	r3, [pc, #16]	; (8205c <USART0_Handler+0x1c>)
   8204a:	4798      	blx	r3
}
   8204c:	bd08      	pop	{r3, pc}
   8204e:	bf00      	nop
   82050:	20002a78 	.word	0x20002a78
   82054:	200024ac 	.word	0x200024ac
   82058:	40090000 	.word	0x40090000
   8205c:	00081fc9 	.word	0x00081fc9

00082060 <USART1_Handler>:

ISR(USART1_Handler)
{
   82060:	b508      	push	{r3, lr}
	generic_isr(USART1, &rx1buf, &tx1buf);
   82062:	4a03      	ldr	r2, [pc, #12]	; (82070 <USART1_Handler+0x10>)
   82064:	4903      	ldr	r1, [pc, #12]	; (82074 <USART1_Handler+0x14>)
   82066:	4804      	ldr	r0, [pc, #16]	; (82078 <USART1_Handler+0x18>)
   82068:	4b04      	ldr	r3, [pc, #16]	; (8207c <USART1_Handler+0x1c>)
   8206a:	4798      	blx	r3
}
   8206c:	bd08      	pop	{r3, pc}
   8206e:	bf00      	nop
   82070:	20002654 	.word	0x20002654
   82074:	200029a4 	.word	0x200029a4
   82078:	40094000 	.word	0x40094000
   8207c:	00081fc9 	.word	0x00081fc9

00082080 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   82080:	b508      	push	{r3, lr}
	generic_isr(USART2, &rx2buf, &tx2buf);
   82082:	4a03      	ldr	r2, [pc, #12]	; (82090 <USART2_Handler+0x10>)
   82084:	4903      	ldr	r1, [pc, #12]	; (82094 <USART2_Handler+0x14>)
   82086:	4804      	ldr	r0, [pc, #16]	; (82098 <USART2_Handler+0x18>)
   82088:	4b04      	ldr	r3, [pc, #16]	; (8209c <USART2_Handler+0x1c>)
   8208a:	4798      	blx	r3
}
   8208c:	bd08      	pop	{r3, pc}
   8208e:	bf00      	nop
   82090:	200023d8 	.word	0x200023d8
   82094:	200028d0 	.word	0x200028d0
   82098:	40098000 	.word	0x40098000
   8209c:	00081fc9 	.word	0x00081fc9

000820a0 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   820a0:	b510      	push	{r4, lr}
   820a2:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   820a4:	4b06      	ldr	r3, [pc, #24]	; (820c0 <FPGA_setlock+0x20>)
   820a6:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   820a8:	4b06      	ldr	r3, [pc, #24]	; (820c4 <FPGA_setlock+0x24>)
   820aa:	781b      	ldrb	r3, [r3, #0]
   820ac:	b933      	cbnz	r3, 820bc <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   820ae:	4b05      	ldr	r3, [pc, #20]	; (820c4 <FPGA_setlock+0x24>)
   820b0:	701c      	strb	r4, [r3, #0]
    ret = 1;
   820b2:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   820b4:	4b04      	ldr	r3, [pc, #16]	; (820c8 <FPGA_setlock+0x28>)
   820b6:	4798      	blx	r3
  return ret;
}
   820b8:	4620      	mov	r0, r4
   820ba:	bd10      	pop	{r4, pc}
  int ret = 0;
   820bc:	2400      	movs	r4, #0
   820be:	e7f9      	b.n	820b4 <FPGA_setlock+0x14>
   820c0:	00083a41 	.word	0x00083a41
   820c4:	20001bc8 	.word	0x20001bc8
   820c8:	00083a7d 	.word	0x00083a7d

000820cc <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   820cc:	4b01      	ldr	r3, [pc, #4]	; (820d4 <FPGA_releaselock+0x8>)
   820ce:	2200      	movs	r2, #0
   820d0:	701a      	strb	r2, [r3, #0]
}
   820d2:	4770      	bx	lr
   820d4:	20001bc8 	.word	0x20001bc8

000820d8 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   820d8:	4b01      	ldr	r3, [pc, #4]	; (820e0 <FPGA_lockstatus+0x8>)
   820da:	7818      	ldrb	r0, [r3, #0]
}
   820dc:	4770      	bx	lr
   820de:	bf00      	nop
   820e0:	20001bc8 	.word	0x20001bc8

000820e4 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   820e4:	b508      	push	{r3, lr}
   820e6:	4601      	mov	r1, r0
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   820e8:	4804      	ldr	r0, [pc, #16]	; (820fc <FPGA_setaddr+0x18>)
   820ea:	4b05      	ldr	r3, [pc, #20]	; (82100 <FPGA_setaddr+0x1c>)
   820ec:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   820ee:	2035      	movs	r0, #53	; 0x35
   820f0:	4b04      	ldr	r3, [pc, #16]	; (82104 <FPGA_setaddr+0x20>)
   820f2:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   820f4:	2035      	movs	r0, #53	; 0x35
   820f6:	4b04      	ldr	r3, [pc, #16]	; (82108 <FPGA_setaddr+0x24>)
   820f8:	4798      	blx	r3
	#endif
}
   820fa:	bd08      	pop	{r3, pc}
   820fc:	400e0e00 	.word	0x400e0e00
   82100:	00083cfd 	.word	0x00083cfd
   82104:	00083d3f 	.word	0x00083d3f
   82108:	00083d25 	.word	0x00083d25

0008210c <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   8210c:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   8210e:	4b7e      	ldr	r3, [pc, #504]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   82110:	789c      	ldrb	r4, [r3, #2]
   82112:	4b7e      	ldr	r3, [pc, #504]	; (8230c <V2Protocol_ProcessCommand+0x200>)
   82114:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   82116:	4b7e      	ldr	r3, [pc, #504]	; (82310 <V2Protocol_ProcessCommand+0x204>)
   82118:	4798      	blx	r3

	switch (V2Command)
   8211a:	1e63      	subs	r3, r4, #1
   8211c:	2b21      	cmp	r3, #33	; 0x21
   8211e:	f200 80e8 	bhi.w	822f2 <V2Protocol_ProcessCommand+0x1e6>
   82122:	e8df f013 	tbh	[pc, r3, lsl #1]
   82126:	0022      	.short	0x0022
   82128:	00370037 	.word	0x00370037
   8212c:	00e600e6 	.word	0x00e600e6
   82130:	00e6006c 	.word	0x00e6006c
   82134:	00e600e6 	.word	0x00e600e6
   82138:	00e6008b 	.word	0x00e6008b
   8213c:	00e600e6 	.word	0x00e600e6
   82140:	00e600e6 	.word	0x00e600e6
   82144:	00970093 	.word	0x00970093
   82148:	009b00a7 	.word	0x009b00a7
   8214c:	009b00a1 	.word	0x009b00a1
   82150:	00b000a1 	.word	0x00b000a1
   82154:	00b000ab 	.word	0x00b000ab
   82158:	00ab00ab 	.word	0x00ab00ab
   8215c:	00b500ab 	.word	0x00b500ab
   82160:	00e600e6 	.word	0x00e600e6
   82164:	00d300b9 	.word	0x00d300b9
   82168:	00c3      	.short	0x00c3
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   8216a:	4b68      	ldr	r3, [pc, #416]	; (8230c <V2Protocol_ProcessCommand+0x200>)
   8216c:	2200      	movs	r2, #0
   8216e:	705a      	strb	r2, [r3, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   82170:	220d      	movs	r2, #13
   82172:	709a      	strb	r2, [r3, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   82174:	4c67      	ldr	r4, [pc, #412]	; (82314 <V2Protocol_ProcessCommand+0x208>)
   82176:	cc07      	ldmia	r4!, {r0, r1, r2}
   82178:	f8c3 0003 	str.w	r0, [r3, #3]
   8217c:	f8c3 1007 	str.w	r1, [r3, #7]
   82180:	f8c3 200b 	str.w	r2, [r3, #11]
   82184:	7822      	ldrb	r2, [r4, #0]
   82186:	73da      	strb	r2, [r3, #15]
	udd_g_ctrlreq.payload = status_payload;
   82188:	4a5f      	ldr	r2, [pc, #380]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   8218a:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   8218c:	2310      	movs	r3, #16
   8218e:	8193      	strh	r3, [r2, #12]
	return true;
   82190:	2001      	movs	r0, #1
}
   82192:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   82194:	4b5c      	ldr	r3, [pc, #368]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   82196:	689b      	ldr	r3, [r3, #8]
   82198:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   8219a:	2c02      	cmp	r4, #2
   8219c:	d00c      	beq.n	821b8 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   8219e:	4b5e      	ldr	r3, [pc, #376]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   821a0:	2202      	movs	r2, #2
   821a2:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   821a4:	4628      	mov	r0, r5
   821a6:	4b5d      	ldr	r3, [pc, #372]	; (8231c <V2Protocol_ProcessCommand+0x210>)
   821a8:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   821aa:	2c03      	cmp	r4, #3
   821ac:	d017      	beq.n	821de <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   821ae:	4b5c      	ldr	r3, [pc, #368]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   821b0:	22c0      	movs	r2, #192	; 0xc0
   821b2:	705a      	strb	r2, [r3, #1]
	return true;
   821b4:	2001      	movs	r0, #1
   821b6:	e7ec      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   821b8:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   821ba:	4b57      	ldr	r3, [pc, #348]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   821bc:	2202      	movs	r2, #2
   821be:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   821c0:	4628      	mov	r0, r5
   821c2:	4b56      	ldr	r3, [pc, #344]	; (8231c <V2Protocol_ProcessCommand+0x210>)
   821c4:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   821c6:	f010 0f02 	tst.w	r0, #2
   821ca:	d0f0      	beq.n	821ae <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   821cc:	4b54      	ldr	r3, [pc, #336]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   821ce:	2200      	movs	r2, #0
   821d0:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   821d2:	4621      	mov	r1, r4
   821d4:	4628      	mov	r0, r5
   821d6:	4b53      	ldr	r3, [pc, #332]	; (82324 <V2Protocol_ProcessCommand+0x218>)
   821d8:	4798      	blx	r3
	return true;
   821da:	2001      	movs	r0, #1
		V2Params_SetParameterValue(ParamID, ParamValue);
   821dc:	e7d9      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   821de:	f010 0f01 	tst.w	r0, #1
   821e2:	d0e4      	beq.n	821ae <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   821e4:	4c4e      	ldr	r4, [pc, #312]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   821e6:	2300      	movs	r3, #0
   821e8:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   821ea:	4628      	mov	r0, r5
   821ec:	4b4e      	ldr	r3, [pc, #312]	; (82328 <V2Protocol_ProcessCommand+0x21c>)
   821ee:	4798      	blx	r3
   821f0:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   821f2:	4a49      	ldr	r2, [pc, #292]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   821f4:	8813      	ldrh	r3, [r2, #0]
   821f6:	3301      	adds	r3, #1
   821f8:	8013      	strh	r3, [r2, #0]
	return true;
   821fa:	2001      	movs	r0, #1
		avrisp_status_payload_size += 1;
   821fc:	e7c9      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   821fe:	4b42      	ldr	r3, [pc, #264]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   82200:	689b      	ldr	r3, [r3, #8]
   82202:	78da      	ldrb	r2, [r3, #3]
   82204:	7899      	ldrb	r1, [r3, #2]
   82206:	0409      	lsls	r1, r1, #16
   82208:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   8220c:	781a      	ldrb	r2, [r3, #0]
   8220e:	4311      	orrs	r1, r2
   82210:	785b      	ldrb	r3, [r3, #1]
   82212:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   82216:	4b45      	ldr	r3, [pc, #276]	; (8232c <V2Protocol_ProcessCommand+0x220>)
   82218:	6019      	str	r1, [r3, #0]

	if (CurrentAddress & (1UL << 31))
   8221a:	2900      	cmp	r1, #0
   8221c:	db0a      	blt.n	82234 <V2Protocol_ProcessCommand+0x128>
	  MustLoadExtendedAddress = true;
	  
	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
   8221e:	4844      	ldr	r0, [pc, #272]	; (82330 <V2Protocol_ProcessCommand+0x224>)
   82220:	4b44      	ldr	r3, [pc, #272]	; (82334 <V2Protocol_ProcessCommand+0x228>)
   82222:	4798      	blx	r3

	avrisp_status_payload[1] = STATUS_CMD_OK;
   82224:	4b3e      	ldr	r3, [pc, #248]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   82226:	2200      	movs	r2, #0
   82228:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8222a:	4b3b      	ldr	r3, [pc, #236]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   8222c:	2202      	movs	r2, #2
   8222e:	801a      	strh	r2, [r3, #0]
	return true;
   82230:	2001      	movs	r0, #1
}
   82232:	e7ae      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
	  MustLoadExtendedAddress = true;
   82234:	4b40      	ldr	r3, [pc, #256]	; (82338 <V2Protocol_ProcessCommand+0x22c>)
   82236:	2201      	movs	r2, #1
   82238:	701a      	strb	r2, [r3, #0]
   8223a:	e7f0      	b.n	8221e <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8223c:	4b38      	ldr	r3, [pc, #224]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   8223e:	2200      	movs	r2, #0
   82240:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   82242:	4b35      	ldr	r3, [pc, #212]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   82244:	2202      	movs	r2, #2
   82246:	801a      	strh	r2, [r3, #0]
	return true;
   82248:	2001      	movs	r0, #1
}
   8224a:	e7a2      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_EnterISPMode();
   8224c:	4b3b      	ldr	r3, [pc, #236]	; (8233c <V2Protocol_ProcessCommand+0x230>)
   8224e:	4798      	blx	r3
	return true;
   82250:	2001      	movs	r0, #1
			break;
   82252:	e79e      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_LeaveISPMode();
   82254:	4b3a      	ldr	r3, [pc, #232]	; (82340 <V2Protocol_ProcessCommand+0x234>)
   82256:	4798      	blx	r3
	return true;
   82258:	2001      	movs	r0, #1
			break;
   8225a:	e79a      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   8225c:	4939      	ldr	r1, [pc, #228]	; (82344 <V2Protocol_ProcessCommand+0x238>)
   8225e:	4620      	mov	r0, r4
   82260:	4b39      	ldr	r3, [pc, #228]	; (82348 <V2Protocol_ProcessCommand+0x23c>)
   82262:	4798      	blx	r3
	return true;
   82264:	2001      	movs	r0, #1
			break;
   82266:	e794      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   82268:	4936      	ldr	r1, [pc, #216]	; (82344 <V2Protocol_ProcessCommand+0x238>)
   8226a:	4620      	mov	r0, r4
   8226c:	4b37      	ldr	r3, [pc, #220]	; (8234c <V2Protocol_ProcessCommand+0x240>)
   8226e:	4798      	blx	r3
	return true;
   82270:	2001      	movs	r0, #1
			break;
   82272:	e78e      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ChipErase();
   82274:	4b36      	ldr	r3, [pc, #216]	; (82350 <V2Protocol_ProcessCommand+0x244>)
   82276:	4798      	blx	r3
	return true;
   82278:	2001      	movs	r0, #1
			break;
   8227a:	e78a      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   8227c:	4620      	mov	r0, r4
   8227e:	4b35      	ldr	r3, [pc, #212]	; (82354 <V2Protocol_ProcessCommand+0x248>)
   82280:	4798      	blx	r3
	return true;
   82282:	2001      	movs	r0, #1
			break;
   82284:	e785      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_WriteFuseLock(V2Command);
   82286:	4620      	mov	r0, r4
   82288:	4b33      	ldr	r3, [pc, #204]	; (82358 <V2Protocol_ProcessCommand+0x24c>)
   8228a:	4798      	blx	r3
	return true;
   8228c:	2001      	movs	r0, #1
			break;
   8228e:	e780      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			ISPProtocol_SPIMulti();
   82290:	4b32      	ldr	r3, [pc, #200]	; (8235c <V2Protocol_ProcessCommand+0x250>)
   82292:	4798      	blx	r3
	return true;
   82294:	2001      	movs	r0, #1
			break;
   82296:	e77c      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			udd_g_ctrlreq.payload = avrisp_status_payload;
   82298:	4a1b      	ldr	r2, [pc, #108]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   8229a:	4b21      	ldr	r3, [pc, #132]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   8229c:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   8229e:	4b1e      	ldr	r3, [pc, #120]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   822a0:	8819      	ldrh	r1, [r3, #0]
   822a2:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   822a4:	2200      	movs	r2, #0
   822a6:	801a      	strh	r2, [r3, #0]
			return true;
   822a8:	2001      	movs	r0, #1
   822aa:	e772      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   822ac:	4a16      	ldr	r2, [pc, #88]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   822ae:	8853      	ldrh	r3, [r2, #2]
   822b0:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   822b2:	88d2      	ldrh	r2, [r2, #6]
   822b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   822b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   822bc:	dc21      	bgt.n	82302 <V2Protocol_ProcessCommand+0x1f6>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   822be:	4912      	ldr	r1, [pc, #72]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   822c0:	4b20      	ldr	r3, [pc, #128]	; (82344 <V2Protocol_ProcessCommand+0x238>)
   822c2:	4403      	add	r3, r0
   822c4:	608b      	str	r3, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   822c6:	818a      	strh	r2, [r1, #12]
			return true;
   822c8:	2001      	movs	r0, #1
   822ca:	e762      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   822cc:	4a0e      	ldr	r2, [pc, #56]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   822ce:	8853      	ldrh	r3, [r2, #2]
   822d0:	0a18      	lsrs	r0, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   822d2:	88d2      	ldrh	r2, [r2, #6]
   822d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
   822d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   822dc:	dd01      	ble.n	822e2 <V2Protocol_ProcessCommand+0x1d6>
				return false;
   822de:	2000      	movs	r0, #0
   822e0:	e757      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   822e2:	4b09      	ldr	r3, [pc, #36]	; (82308 <V2Protocol_ProcessCommand+0x1fc>)
   822e4:	6899      	ldr	r1, [r3, #8]
   822e6:	4b17      	ldr	r3, [pc, #92]	; (82344 <V2Protocol_ProcessCommand+0x238>)
   822e8:	4418      	add	r0, r3
   822ea:	4b1d      	ldr	r3, [pc, #116]	; (82360 <V2Protocol_ProcessCommand+0x254>)
   822ec:	4798      	blx	r3
			return true;
   822ee:	2001      	movs	r0, #1
   822f0:	e74f      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   822f2:	4b0b      	ldr	r3, [pc, #44]	; (82320 <V2Protocol_ProcessCommand+0x214>)
   822f4:	22c9      	movs	r2, #201	; 0xc9
   822f6:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   822f8:	4b07      	ldr	r3, [pc, #28]	; (82318 <V2Protocol_ProcessCommand+0x20c>)
   822fa:	2202      	movs	r2, #2
   822fc:	801a      	strh	r2, [r3, #0]
	return true;
   822fe:	2001      	movs	r0, #1
}
   82300:	e747      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
				return false;
   82302:	2000      	movs	r0, #0
   82304:	e745      	b.n	82192 <V2Protocol_ProcessCommand+0x86>
   82306:	bf00      	nop
   82308:	20002b90 	.word	0x20002b90
   8230c:	20001ccc 	.word	0x20001ccc
   82310:	00082e19 	.word	0x00082e19
   82314:	0008cc80 	.word	0x0008cc80
   82318:	20002b4e 	.word	0x20002b4e
   8231c:	00082381 	.word	0x00082381
   82320:	20002b50 	.word	0x20002b50
   82324:	000823a9 	.word	0x000823a9
   82328:	00082395 	.word	0x00082395
   8232c:	20002b70 	.word	0x20002b70
   82330:	0008cc90 	.word	0x0008cc90
   82334:	000860d1 	.word	0x000860d1
   82338:	20002b4c 	.word	0x20002b4c
   8233c:	00080d61 	.word	0x00080d61
   82340:	00080ea9 	.word	0x00080ea9
   82344:	20001bcc 	.word	0x20001bcc
   82348:	00080841 	.word	0x00080841
   8234c:	00080ac1 	.word	0x00080ac1
   82350:	00080f09 	.word	0x00080f09
   82354:	00080c0d 	.word	0x00080c0d
   82358:	00080cb9 	.word	0x00080cb9
   8235c:	00080d29 	.word	0x00080d29
   82360:	000860f9 	.word	0x000860f9

00082364 <V2Params_GetParamFromTable>:
 *  \param[in] ParamID  Parameter ID to find in the table
 *
 *  \return Pointer to the associated parameter information from the parameter table if found, NULL otherwise
 */
static ParameterItem_t* const V2Params_GetParamFromTable(const uint8_t ParamID)
{
   82364:	4602      	mov	r2, r0
	ParameterItem_t* CurrTableItem = ParameterTable;
   82366:	4805      	ldr	r0, [pc, #20]	; (8237c <V2Params_GetParamFromTable+0x18>)

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82368:	f100 011e 	add.w	r1, r0, #30
	{
		if (ParamID == CurrTableItem->ParamID)
   8236c:	7803      	ldrb	r3, [r0, #0]
   8236e:	4293      	cmp	r3, r2
   82370:	d003      	beq.n	8237a <V2Params_GetParamFromTable+0x16>
		  return CurrTableItem;

		CurrTableItem++;
   82372:	3003      	adds	r0, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   82374:	4288      	cmp	r0, r1
   82376:	d1f9      	bne.n	8236c <V2Params_GetParamFromTable+0x8>
	}

	return NULL;
   82378:	2000      	movs	r0, #0
}
   8237a:	4770      	bx	lr
   8237c:	20000588 	.word	0x20000588

00082380 <V2Params_GetParameterPrivileges>:
{
   82380:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82382:	4b03      	ldr	r3, [pc, #12]	; (82390 <V2Params_GetParameterPrivileges+0x10>)
   82384:	4798      	blx	r3
	if (ParamInfo == NULL)
   82386:	b108      	cbz	r0, 8238c <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   82388:	7840      	ldrb	r0, [r0, #1]
}
   8238a:	bd08      	pop	{r3, pc}
	  return 0;
   8238c:	2000      	movs	r0, #0
   8238e:	e7fc      	b.n	8238a <V2Params_GetParameterPrivileges+0xa>
   82390:	00082365 	.word	0x00082365

00082394 <V2Params_GetParameterValue>:
{
   82394:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   82396:	4b03      	ldr	r3, [pc, #12]	; (823a4 <V2Params_GetParameterValue+0x10>)
   82398:	4798      	blx	r3
	if (ParamInfo == NULL)
   8239a:	b108      	cbz	r0, 823a0 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   8239c:	7880      	ldrb	r0, [r0, #2]
}
   8239e:	bd08      	pop	{r3, pc}
	  return 0;
   823a0:	2000      	movs	r0, #0
   823a2:	e7fc      	b.n	8239e <V2Params_GetParameterValue+0xa>
   823a4:	00082365 	.word	0x00082365

000823a8 <V2Params_SetParameterValue>:
{
   823a8:	b510      	push	{r4, lr}
   823aa:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   823ac:	4b02      	ldr	r3, [pc, #8]	; (823b8 <V2Params_SetParameterValue+0x10>)
   823ae:	4798      	blx	r3
	if (ParamInfo == NULL)
   823b0:	b100      	cbz	r0, 823b4 <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   823b2:	7084      	strb	r4, [r0, #2]
}
   823b4:	bd10      	pop	{r4, pc}
   823b6:	bf00      	nop
   823b8:	00082365 	.word	0x00082365

000823bc <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   823bc:	b538      	push	{r3, r4, r5, lr}
   823be:	4604      	mov	r4, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   823c0:	b2c0      	uxtb	r0, r0
   823c2:	4d05      	ldr	r5, [pc, #20]	; (823d8 <XMEGANVM_SendAddress+0x1c>)
   823c4:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   823c6:	f3c4 2007 	ubfx	r0, r4, #8, #8
   823ca:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   823cc:	f3c4 4007 	ubfx	r0, r4, #16, #8
   823d0:	47a8      	blx	r5
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   823d2:	0e20      	lsrs	r0, r4, #24
   823d4:	47a8      	blx	r5
}
   823d6:	bd38      	pop	{r3, r4, r5, pc}
   823d8:	00082c49 	.word	0x00082c49

000823dc <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   823dc:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   823de:	4b03      	ldr	r3, [pc, #12]	; (823ec <XMEGANVM_SendNVMRegAddress+0x10>)
   823e0:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   823e2:	4318      	orrs	r0, r3
   823e4:	4b02      	ldr	r3, [pc, #8]	; (823f0 <XMEGANVM_SendNVMRegAddress+0x14>)
   823e6:	4798      	blx	r3
}
   823e8:	bd08      	pop	{r3, pc}
   823ea:	bf00      	nop
   823ec:	200005a8 	.word	0x200005a8
   823f0:	000823bd 	.word	0x000823bd

000823f4 <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   823f4:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   823f6:	4e07      	ldr	r6, [pc, #28]	; (82414 <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   823f8:	4d07      	ldr	r5, [pc, #28]	; (82418 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   823fa:	4c08      	ldr	r4, [pc, #32]	; (8241c <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   823fc:	2080      	movs	r0, #128	; 0x80
   823fe:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82400:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   82402:	6823      	ldr	r3, [r4, #0]
   82404:	b123      	cbz	r3, 82410 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   82406:	f010 0f02 	tst.w	r0, #2
   8240a:	d0f7      	beq.n	823fc <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   8240c:	2001      	movs	r0, #1
   8240e:	e000      	b.n	82412 <XMEGANVM_WaitWhileNVMBusBusy+0x1e>
		  return false;
   82410:	2000      	movs	r0, #0
		}
	}
}
   82412:	bd70      	pop	{r4, r5, r6, pc}
   82414:	00082c49 	.word	0x00082c49
   82418:	00082c75 	.word	0x00082c75
   8241c:	20002b78 	.word	0x20002b78

00082420 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   82420:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82422:	206b      	movs	r0, #107	; 0x6b
   82424:	4b09      	ldr	r3, [pc, #36]	; (8244c <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   82426:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   82428:	200f      	movs	r0, #15
   8242a:	4b09      	ldr	r3, [pc, #36]	; (82450 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   8242c:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8242e:	4e07      	ldr	r6, [pc, #28]	; (8244c <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82430:	4d08      	ldr	r5, [pc, #32]	; (82454 <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   82432:	4c09      	ldr	r4, [pc, #36]	; (82458 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   82434:	2020      	movs	r0, #32
   82436:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   82438:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   8243a:	6823      	ldr	r3, [r4, #0]
   8243c:	b123      	cbz	r3, 82448 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   8243e:	f010 0f80 	tst.w	r0, #128	; 0x80
   82442:	d1f7      	bne.n	82434 <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   82444:	2001      	movs	r0, #1
   82446:	e000      	b.n	8244a <XMEGANVM_WaitWhileNVMControllerBusy+0x2a>
		  return false;
   82448:	2000      	movs	r0, #0
		}
	}
}
   8244a:	bd70      	pop	{r4, r5, r6, pc}
   8244c:	00082c49 	.word	0x00082c49
   82450:	000823dd 	.word	0x000823dd
   82454:	00082c75 	.word	0x00082c75
   82458:	20002b78 	.word	0x20002b78

0008245c <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   8245c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82460:	b083      	sub	sp, #12
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   82462:	4b1a      	ldr	r3, [pc, #104]	; (824cc <XMEGANVM_EnablePDI+0x70>)
   82464:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   82466:	20c1      	movs	r0, #193	; 0xc1
   82468:	4c19      	ldr	r4, [pc, #100]	; (824d0 <XMEGANVM_EnablePDI+0x74>)
   8246a:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   8246c:	2059      	movs	r0, #89	; 0x59
   8246e:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   82470:	20c2      	movs	r0, #194	; 0xc2
   82472:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   82474:	2002      	movs	r0, #2
   82476:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   82478:	20e0      	movs	r0, #224	; 0xe0
   8247a:	47a0      	blx	r4
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   8247c:	f10d 0407 	add.w	r4, sp, #7
   82480:	46e9      	mov	r9, sp
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   82482:	f04f 0812 	mov.w	r8, #18
   82486:	2789      	movs	r7, #137	; 0x89
   82488:	4e11      	ldr	r6, [pc, #68]	; (824d0 <XMEGANVM_EnablePDI+0x74>)
   8248a:	f88d 8000 	strb.w	r8, [sp]
   8248e:	f88d 7001 	strb.w	r7, [sp, #1]
   82492:	23ab      	movs	r3, #171	; 0xab
   82494:	f88d 3002 	strb.w	r3, [sp, #2]
   82498:	2345      	movs	r3, #69	; 0x45
   8249a:	f88d 3003 	strb.w	r3, [sp, #3]
   8249e:	23cd      	movs	r3, #205	; 0xcd
   824a0:	f88d 3004 	strb.w	r3, [sp, #4]
   824a4:	23d8      	movs	r3, #216	; 0xd8
   824a6:	f88d 3005 	strb.w	r3, [sp, #5]
   824aa:	2388      	movs	r3, #136	; 0x88
   824ac:	f88d 3006 	strb.w	r3, [sp, #6]
   824b0:	23ff      	movs	r3, #255	; 0xff
   824b2:	f88d 3007 	strb.w	r3, [sp, #7]
   824b6:	7820      	ldrb	r0, [r4, #0]
   824b8:	47b0      	blx	r6
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   824ba:	454c      	cmp	r4, r9
   824bc:	f104 34ff 	add.w	r4, r4, #4294967295
   824c0:	d1e3      	bne.n	8248a <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   824c2:	4b04      	ldr	r3, [pc, #16]	; (824d4 <XMEGANVM_EnablePDI+0x78>)
   824c4:	4798      	blx	r3
}
   824c6:	b003      	add	sp, #12
   824c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   824cc:	00082d15 	.word	0x00082d15
   824d0:	00082c49 	.word	0x00082c49
   824d4:	000823f5 	.word	0x000823f5

000824d8 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   824d8:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   824da:	4b09      	ldr	r3, [pc, #36]	; (82500 <XMEGANVM_DisablePDI+0x28>)
   824dc:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   824de:	4c09      	ldr	r4, [pc, #36]	; (82504 <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   824e0:	4d09      	ldr	r5, [pc, #36]	; (82508 <XMEGANVM_DisablePDI+0x30>)
   824e2:	4e0a      	ldr	r6, [pc, #40]	; (8250c <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   824e4:	20c1      	movs	r0, #193	; 0xc1
   824e6:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   824e8:	2000      	movs	r0, #0
   824ea:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   824ec:	2081      	movs	r0, #129	; 0x81
   824ee:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   824f0:	47a8      	blx	r5
   824f2:	b110      	cbz	r0, 824fa <XMEGANVM_DisablePDI+0x22>
   824f4:	6833      	ldr	r3, [r6, #0]
   824f6:	2b00      	cmp	r3, #0
   824f8:	d1f4      	bne.n	824e4 <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   824fa:	4b05      	ldr	r3, [pc, #20]	; (82510 <XMEGANVM_DisablePDI+0x38>)
   824fc:	4798      	blx	r3
}
   824fe:	bd70      	pop	{r4, r5, r6, pc}
   82500:	000823f5 	.word	0x000823f5
   82504:	00082c49 	.word	0x00082c49
   82508:	00082c75 	.word	0x00082c75
   8250c:	20002b78 	.word	0x20002b78
   82510:	00082bed 	.word	0x00082bed

00082514 <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   82514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82516:	4606      	mov	r6, r0
   82518:	460c      	mov	r4, r1
   8251a:	4615      	mov	r5, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8251c:	4b1c      	ldr	r3, [pc, #112]	; (82590 <XMEGANVM_ReadMemory+0x7c>)
   8251e:	4798      	blx	r3
   82520:	4603      	mov	r3, r0
   82522:	b908      	cbnz	r0, 82528 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   82524:	4618      	mov	r0, r3
   82526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82528:	204c      	movs	r0, #76	; 0x4c
   8252a:	4f1a      	ldr	r7, [pc, #104]	; (82594 <XMEGANVM_ReadMemory+0x80>)
   8252c:	47b8      	blx	r7
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8252e:	200a      	movs	r0, #10
   82530:	4b19      	ldr	r3, [pc, #100]	; (82598 <XMEGANVM_ReadMemory+0x84>)
   82532:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   82534:	2043      	movs	r0, #67	; 0x43
   82536:	47b8      	blx	r7
	if (ReadSize > 1)
   82538:	2d01      	cmp	r5, #1
   8253a:	d919      	bls.n	82570 <XMEGANVM_ReadMemory+0x5c>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8253c:	206b      	movs	r0, #107	; 0x6b
   8253e:	47b8      	blx	r7
		XMEGANVM_SendAddress(ReadAddress);
   82540:	4630      	mov	r0, r6
   82542:	4b16      	ldr	r3, [pc, #88]	; (8259c <XMEGANVM_ReadMemory+0x88>)
   82544:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82546:	20a0      	movs	r0, #160	; 0xa0
   82548:	47b8      	blx	r7
		XPROGTarget_SendByte(ReadSize - 1);
   8254a:	1e68      	subs	r0, r5, #1
   8254c:	b2c0      	uxtb	r0, r0
   8254e:	47b8      	blx	r7
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82550:	2024      	movs	r0, #36	; 0x24
   82552:	47b8      	blx	r7
		while (ReadSize-- && TimeoutTicksRemaining)
   82554:	3d01      	subs	r5, #1
   82556:	b2ad      	uxth	r5, r5
   82558:	3501      	adds	r5, #1
   8255a:	4425      	add	r5, r4
   8255c:	4e10      	ldr	r6, [pc, #64]	; (825a0 <XMEGANVM_ReadMemory+0x8c>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8255e:	4f11      	ldr	r7, [pc, #68]	; (825a4 <XMEGANVM_ReadMemory+0x90>)
		while (ReadSize-- && TimeoutTicksRemaining)
   82560:	6833      	ldr	r3, [r6, #0]
   82562:	b173      	cbz	r3, 82582 <XMEGANVM_ReadMemory+0x6e>
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   82564:	47b8      	blx	r7
   82566:	f804 0b01 	strb.w	r0, [r4], #1
		while (ReadSize-- && TimeoutTicksRemaining)
   8256a:	42ac      	cmp	r4, r5
   8256c:	d1f8      	bne.n	82560 <XMEGANVM_ReadMemory+0x4c>
   8256e:	e008      	b.n	82582 <XMEGANVM_ReadMemory+0x6e>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82570:	200c      	movs	r0, #12
   82572:	4b08      	ldr	r3, [pc, #32]	; (82594 <XMEGANVM_ReadMemory+0x80>)
   82574:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   82576:	4630      	mov	r0, r6
   82578:	4b08      	ldr	r3, [pc, #32]	; (8259c <XMEGANVM_ReadMemory+0x88>)
   8257a:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8257c:	4b09      	ldr	r3, [pc, #36]	; (825a4 <XMEGANVM_ReadMemory+0x90>)
   8257e:	4798      	blx	r3
   82580:	7020      	strb	r0, [r4, #0]
	return (TimeoutTicksRemaining > 0);
   82582:	4b07      	ldr	r3, [pc, #28]	; (825a0 <XMEGANVM_ReadMemory+0x8c>)
   82584:	681b      	ldr	r3, [r3, #0]
   82586:	3b00      	subs	r3, #0
   82588:	bf18      	it	ne
   8258a:	2301      	movne	r3, #1
   8258c:	e7ca      	b.n	82524 <XMEGANVM_ReadMemory+0x10>
   8258e:	bf00      	nop
   82590:	00082421 	.word	0x00082421
   82594:	00082c49 	.word	0x00082c49
   82598:	000823dd 	.word	0x000823dd
   8259c:	000823bd 	.word	0x000823bd
   825a0:	20002b78 	.word	0x20002b78
   825a4:	00082c75 	.word	0x00082c75

000825a8 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   825a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825ac:	4607      	mov	r7, r0
   825ae:	4688      	mov	r8, r1
   825b0:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   825b2:	4b0b      	ldr	r3, [pc, #44]	; (825e0 <XMEGANVM_WriteByteMemory+0x38>)
   825b4:	4798      	blx	r3
   825b6:	4605      	mov	r5, r0
   825b8:	b910      	cbnz	r0, 825c0 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   825ba:	4628      	mov	r0, r5
   825bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825c0:	204c      	movs	r0, #76	; 0x4c
   825c2:	4c08      	ldr	r4, [pc, #32]	; (825e4 <XMEGANVM_WriteByteMemory+0x3c>)
   825c4:	47a0      	blx	r4
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   825c6:	200a      	movs	r0, #10
   825c8:	4b07      	ldr	r3, [pc, #28]	; (825e8 <XMEGANVM_WriteByteMemory+0x40>)
   825ca:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   825cc:	4638      	mov	r0, r7
   825ce:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   825d0:	204c      	movs	r0, #76	; 0x4c
   825d2:	47a0      	blx	r4
	XMEGANVM_SendAddress(WriteAddress);
   825d4:	4640      	mov	r0, r8
   825d6:	4b05      	ldr	r3, [pc, #20]	; (825ec <XMEGANVM_WriteByteMemory+0x44>)
   825d8:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   825da:	4630      	mov	r0, r6
   825dc:	47a0      	blx	r4
	return true;
   825de:	e7ec      	b.n	825ba <XMEGANVM_WriteByteMemory+0x12>
   825e0:	00082421 	.word	0x00082421
   825e4:	00082c49 	.word	0x00082c49
   825e8:	000823dd 	.word	0x000823dd
   825ec:	000823bd 	.word	0x000823bd

000825f0 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   825f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   825f4:	4681      	mov	r9, r0
   825f6:	4617      	mov	r7, r2
   825f8:	461c      	mov	r4, r3
   825fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   825fc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (PageMode & XPROG_PAGEMODE_ERASE)
   82600:	f013 0f01 	tst.w	r3, #1
   82604:	d108      	bne.n	82618 <XMEGANVM_WritePageMemory+0x28>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   82606:	b9f6      	cbnz	r6, 82646 <XMEGANVM_WritePageMemory+0x56>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   82608:	f014 0f02 	tst.w	r4, #2
   8260c:	d13f      	bne.n	8268e <XMEGANVM_WritePageMemory+0x9e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   8260e:	f04f 0a01 	mov.w	sl, #1
}
   82612:	4650      	mov	r0, sl
   82614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82618:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8261a:	4b27      	ldr	r3, [pc, #156]	; (826b8 <XMEGANVM_WritePageMemory+0xc8>)
   8261c:	4798      	blx	r3
   8261e:	4682      	mov	sl, r0
   82620:	2800      	cmp	r0, #0
   82622:	d0f6      	beq.n	82612 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82624:	204c      	movs	r0, #76	; 0x4c
   82626:	f8df a09c 	ldr.w	sl, [pc, #156]	; 826c4 <XMEGANVM_WritePageMemory+0xd4>
   8262a:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8262c:	200a      	movs	r0, #10
   8262e:	f8df b08c 	ldr.w	fp, [pc, #140]	; 826bc <XMEGANVM_WritePageMemory+0xcc>
   82632:	47d8      	blx	fp
		XPROGTarget_SendByte(EraseBuffCommand);
   82634:	4640      	mov	r0, r8
   82636:	47d0      	blx	sl
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82638:	204c      	movs	r0, #76	; 0x4c
   8263a:	47d0      	blx	sl
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8263c:	200b      	movs	r0, #11
   8263e:	47d8      	blx	fp
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   82640:	2001      	movs	r0, #1
   82642:	47d0      	blx	sl
   82644:	e7df      	b.n	82606 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82646:	4b1c      	ldr	r3, [pc, #112]	; (826b8 <XMEGANVM_WritePageMemory+0xc8>)
   82648:	4798      	blx	r3
   8264a:	4682      	mov	sl, r0
   8264c:	2800      	cmp	r0, #0
   8264e:	d0e0      	beq.n	82612 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82650:	204c      	movs	r0, #76	; 0x4c
   82652:	f8df 8070 	ldr.w	r8, [pc, #112]	; 826c4 <XMEGANVM_WritePageMemory+0xd4>
   82656:	47c0      	blx	r8
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82658:	200a      	movs	r0, #10
   8265a:	4b18      	ldr	r3, [pc, #96]	; (826bc <XMEGANVM_WritePageMemory+0xcc>)
   8265c:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   8265e:	4648      	mov	r0, r9
   82660:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82662:	206b      	movs	r0, #107	; 0x6b
   82664:	47c0      	blx	r8
		XMEGANVM_SendAddress(WriteAddress);
   82666:	980a      	ldr	r0, [sp, #40]	; 0x28
   82668:	4b15      	ldr	r3, [pc, #84]	; (826c0 <XMEGANVM_WritePageMemory+0xd0>)
   8266a:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8266c:	20a0      	movs	r0, #160	; 0xa0
   8266e:	47c0      	blx	r8
		XPROGTarget_SendByte(WriteSize - 1);
   82670:	1e70      	subs	r0, r6, #1
   82672:	b2c0      	uxtb	r0, r0
   82674:	47c0      	blx	r8
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   82676:	2064      	movs	r0, #100	; 0x64
   82678:	47c0      	blx	r8
		while (WriteSize--)
   8267a:	3e01      	subs	r6, #1
   8267c:	b2b6      	uxth	r6, r6
   8267e:	3601      	adds	r6, #1
   82680:	442e      	add	r6, r5
		  XPROGTarget_SendByte(*(WriteBuffer++));
   82682:	f815 0b01 	ldrb.w	r0, [r5], #1
   82686:	47c0      	blx	r8
		while (WriteSize--)
   82688:	42b5      	cmp	r5, r6
   8268a:	d1fa      	bne.n	82682 <XMEGANVM_WritePageMemory+0x92>
   8268c:	e7bc      	b.n	82608 <XMEGANVM_WritePageMemory+0x18>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   8268e:	4b0a      	ldr	r3, [pc, #40]	; (826b8 <XMEGANVM_WritePageMemory+0xc8>)
   82690:	4798      	blx	r3
   82692:	4682      	mov	sl, r0
   82694:	2800      	cmp	r0, #0
   82696:	d0bc      	beq.n	82612 <XMEGANVM_WritePageMemory+0x22>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82698:	204c      	movs	r0, #76	; 0x4c
   8269a:	4c0a      	ldr	r4, [pc, #40]	; (826c4 <XMEGANVM_WritePageMemory+0xd4>)
   8269c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8269e:	200a      	movs	r0, #10
   826a0:	4b06      	ldr	r3, [pc, #24]	; (826bc <XMEGANVM_WritePageMemory+0xcc>)
   826a2:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   826a4:	4638      	mov	r0, r7
   826a6:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826a8:	204c      	movs	r0, #76	; 0x4c
   826aa:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   826ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   826ae:	4b04      	ldr	r3, [pc, #16]	; (826c0 <XMEGANVM_WritePageMemory+0xd0>)
   826b0:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   826b2:	2000      	movs	r0, #0
   826b4:	47a0      	blx	r4
   826b6:	e7ac      	b.n	82612 <XMEGANVM_WritePageMemory+0x22>
   826b8:	00082421 	.word	0x00082421
   826bc:	000823dd 	.word	0x000823dd
   826c0:	000823bd 	.word	0x000823bd
   826c4:	00082c49 	.word	0x00082c49

000826c8 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   826c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826ca:	4604      	mov	r4, r0
   826cc:	460d      	mov	r5, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   826ce:	4b36      	ldr	r3, [pc, #216]	; (827a8 <XMEGANVM_EraseMemory+0xe0>)
   826d0:	4798      	blx	r3
   826d2:	4603      	mov	r3, r0
   826d4:	b1a8      	cbz	r0, 82702 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   826d6:	2c40      	cmp	r4, #64	; 0x40
   826d8:	d015      	beq.n	82706 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   826da:	2c30      	cmp	r4, #48	; 0x30
   826dc:	d022      	beq.n	82724 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826de:	204c      	movs	r0, #76	; 0x4c
   826e0:	4e32      	ldr	r6, [pc, #200]	; (827ac <XMEGANVM_EraseMemory+0xe4>)
   826e2:	47b0      	blx	r6
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   826e4:	200a      	movs	r0, #10
   826e6:	4b32      	ldr	r3, [pc, #200]	; (827b0 <XMEGANVM_EraseMemory+0xe8>)
   826e8:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   826ea:	4620      	mov	r0, r4
   826ec:	47b0      	blx	r6

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   826ee:	204c      	movs	r0, #76	; 0x4c
   826f0:	47b0      	blx	r6
		XMEGANVM_SendAddress(Address);
   826f2:	4628      	mov	r0, r5
   826f4:	4b2f      	ldr	r3, [pc, #188]	; (827b4 <XMEGANVM_EraseMemory+0xec>)
   826f6:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   826f8:	2000      	movs	r0, #0
   826fa:	47b0      	blx	r6
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   826fc:	4b2e      	ldr	r3, [pc, #184]	; (827b8 <XMEGANVM_EraseMemory+0xf0>)
   826fe:	4798      	blx	r3
   82700:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   82702:	4618      	mov	r0, r3
   82704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82706:	204c      	movs	r0, #76	; 0x4c
   82708:	4c28      	ldr	r4, [pc, #160]	; (827ac <XMEGANVM_EraseMemory+0xe4>)
   8270a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8270c:	200a      	movs	r0, #10
   8270e:	4d28      	ldr	r5, [pc, #160]	; (827b0 <XMEGANVM_EraseMemory+0xe8>)
   82710:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   82712:	2040      	movs	r0, #64	; 0x40
   82714:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82716:	204c      	movs	r0, #76	; 0x4c
   82718:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8271a:	200b      	movs	r0, #11
   8271c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8271e:	2001      	movs	r0, #1
   82720:	47a0      	blx	r4
   82722:	e7eb      	b.n	826fc <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82724:	204c      	movs	r0, #76	; 0x4c
   82726:	4c21      	ldr	r4, [pc, #132]	; (827ac <XMEGANVM_EraseMemory+0xe4>)
   82728:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8272a:	200a      	movs	r0, #10
   8272c:	4e20      	ldr	r6, [pc, #128]	; (827b0 <XMEGANVM_EraseMemory+0xe8>)
   8272e:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   82730:	2036      	movs	r0, #54	; 0x36
   82732:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   82734:	204c      	movs	r0, #76	; 0x4c
   82736:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   82738:	200b      	movs	r0, #11
   8273a:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   8273c:	2001      	movs	r0, #1
   8273e:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   82740:	4b19      	ldr	r3, [pc, #100]	; (827a8 <XMEGANVM_EraseMemory+0xe0>)
   82742:	4798      	blx	r3
   82744:	4603      	mov	r3, r0
   82746:	2800      	cmp	r0, #0
   82748:	d0db      	beq.n	82702 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8274a:	204c      	movs	r0, #76	; 0x4c
   8274c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   8274e:	200a      	movs	r0, #10
   82750:	47b0      	blx	r6
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   82752:	2033      	movs	r0, #51	; 0x33
   82754:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   82756:	206b      	movs	r0, #107	; 0x6b
   82758:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   8275a:	4628      	mov	r0, r5
   8275c:	4b15      	ldr	r3, [pc, #84]	; (827b4 <XMEGANVM_EraseMemory+0xec>)
   8275e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   82760:	20a0      	movs	r0, #160	; 0xa0
   82762:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   82764:	4d15      	ldr	r5, [pc, #84]	; (827bc <XMEGANVM_EraseMemory+0xf4>)
   82766:	7828      	ldrb	r0, [r5, #0]
   82768:	3801      	subs	r0, #1
   8276a:	b2c0      	uxtb	r0, r0
   8276c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   8276e:	2064      	movs	r0, #100	; 0x64
   82770:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   82772:	882b      	ldrh	r3, [r5, #0]
   82774:	b14b      	cbz	r3, 8278a <XMEGANVM_EraseMemory+0xc2>
   82776:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   82778:	4627      	mov	r7, r4
   8277a:	4e0c      	ldr	r6, [pc, #48]	; (827ac <XMEGANVM_EraseMemory+0xe4>)
   8277c:	4638      	mov	r0, r7
   8277e:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   82780:	1c63      	adds	r3, r4, #1
   82782:	b2dc      	uxtb	r4, r3
   82784:	882a      	ldrh	r2, [r5, #0]
   82786:	42a2      	cmp	r2, r4
   82788:	d8f8      	bhi.n	8277c <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8278a:	204c      	movs	r0, #76	; 0x4c
   8278c:	4c07      	ldr	r4, [pc, #28]	; (827ac <XMEGANVM_EraseMemory+0xe4>)
   8278e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   82790:	200a      	movs	r0, #10
   82792:	4d07      	ldr	r5, [pc, #28]	; (827b0 <XMEGANVM_EraseMemory+0xe8>)
   82794:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   82796:	2030      	movs	r0, #48	; 0x30
   82798:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8279a:	204c      	movs	r0, #76	; 0x4c
   8279c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   8279e:	200b      	movs	r0, #11
   827a0:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   827a2:	2001      	movs	r0, #1
   827a4:	47a0      	blx	r4
   827a6:	e7a9      	b.n	826fc <XMEGANVM_EraseMemory+0x34>
   827a8:	00082421 	.word	0x00082421
   827ac:	00082c49 	.word	0x00082c49
   827b0:	000823dd 	.word	0x000823dd
   827b4:	000823bd 	.word	0x000823bd
   827b8:	000823f5 	.word	0x000823f5
   827bc:	200005a6 	.word	0x200005a6

000827c0 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   827c0:	b570      	push	{r4, r5, r6, lr}
   827c2:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   827c4:	4b8f      	ldr	r3, [pc, #572]	; (82a04 <XPROGProtocol_Command+0x244>)
   827c6:	8859      	ldrh	r1, [r3, #2]
   827c8:	b2cb      	uxtb	r3, r1
   827ca:	4a8f      	ldr	r2, [pc, #572]	; (82a08 <XPROGProtocol_Command+0x248>)
   827cc:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   827ce:	3b01      	subs	r3, #1
   827d0:	2b21      	cmp	r3, #33	; 0x21
   827d2:	d82b      	bhi.n	8282c <XPROGProtocol_Command+0x6c>
   827d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   827d8:	002f0022 	.word	0x002f0022
   827dc:	00730037 	.word	0x00730037
   827e0:	00e600c2 	.word	0x00e600c2
   827e4:	002a00e9 	.word	0x002a00e9
   827e8:	002a002a 	.word	0x002a002a
   827ec:	002a002a 	.word	0x002a002a
   827f0:	002a002a 	.word	0x002a002a
   827f4:	002a002a 	.word	0x002a002a
   827f8:	002a002a 	.word	0x002a002a
   827fc:	002a002a 	.word	0x002a002a
   82800:	002a002a 	.word	0x002a002a
   82804:	002a002a 	.word	0x002a002a
   82808:	002a002a 	.word	0x002a002a
   8280c:	002a002a 	.word	0x002a002a
   82810:	002a002a 	.word	0x002a002a
   82814:	017c002a 	.word	0x017c002a
   82818:	016b015c 	.word	0x016b015c
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   8281c:	4b7b      	ldr	r3, [pc, #492]	; (82a0c <XPROGProtocol_Command+0x24c>)
   8281e:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   82820:	4b7b      	ldr	r3, [pc, #492]	; (82a10 <XPROGProtocol_Command+0x250>)
   82822:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   82824:	f080 0001 	eor.w	r0, r0, #1
   82828:	4b7a      	ldr	r3, [pc, #488]	; (82a14 <XPROGProtocol_Command+0x254>)
   8282a:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   8282c:	4b7a      	ldr	r3, [pc, #488]	; (82a18 <XPROGProtocol_Command+0x258>)
   8282e:	4798      	blx	r3
	return false;
   82830:	2000      	movs	r0, #0
}
   82832:	b004      	add	sp, #16
   82834:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   82836:	4b75      	ldr	r3, [pc, #468]	; (82a0c <XPROGProtocol_Command+0x24c>)
   82838:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   8283a:	4b78      	ldr	r3, [pc, #480]	; (82a1c <XPROGProtocol_Command+0x25c>)
   8283c:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   8283e:	4b75      	ldr	r3, [pc, #468]	; (82a14 <XPROGProtocol_Command+0x254>)
   82840:	2200      	movs	r2, #0
   82842:	701a      	strb	r2, [r3, #0]
}
   82844:	e7f2      	b.n	8282c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   82846:	4b71      	ldr	r3, [pc, #452]	; (82a0c <XPROGProtocol_Command+0x24c>)
   82848:	4798      	blx	r3

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   8284a:	4b72      	ldr	r3, [pc, #456]	; (82a14 <XPROGProtocol_Command+0x254>)
   8284c:	2200      	movs	r2, #0
   8284e:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   82850:	4b6c      	ldr	r3, [pc, #432]	; (82a04 <XPROGProtocol_Command+0x244>)
   82852:	899b      	ldrh	r3, [r3, #12]
   82854:	2b04      	cmp	r3, #4
   82856:	d915      	bls.n	82884 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   82858:	4b6a      	ldr	r3, [pc, #424]	; (82a04 <XPROGProtocol_Command+0x244>)
   8285a:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8285c:	791a      	ldrb	r2, [r3, #4]
   8285e:	78d9      	ldrb	r1, [r3, #3]
   82860:	0409      	lsls	r1, r1, #16
   82862:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   82866:	785a      	ldrb	r2, [r3, #1]
   82868:	4311      	orrs	r1, r2
   8286a:	789a      	ldrb	r2, [r3, #2]
   8286c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   82870:	781b      	ldrb	r3, [r3, #0]
   82872:	3b01      	subs	r3, #1
   82874:	2b07      	cmp	r3, #7
   82876:	d81e      	bhi.n	828b6 <XPROGProtocol_Command+0xf6>
   82878:	e8df f003 	tbb	[pc, r3]
   8287c:	1311081f 	.word	0x1311081f
   82880:	1b191715 	.word	0x1b191715
		XPROG_Status = XPROG_ERR_FAILED;
   82884:	4b63      	ldr	r3, [pc, #396]	; (82a14 <XPROGProtocol_Command+0x254>)
   82886:	2201      	movs	r2, #1
   82888:	701a      	strb	r2, [r3, #0]
		return;
   8288a:	e7cf      	b.n	8282c <XPROGProtocol_Command+0x6c>
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   8288c:	2020      	movs	r0, #32
		EraseCommand = XMEGA_NVM_CMD_NOOP;
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   8288e:	4b64      	ldr	r3, [pc, #400]	; (82a20 <XPROGProtocol_Command+0x260>)
   82890:	4798      	blx	r3
   82892:	2800      	cmp	r0, #0
   82894:	d1ca      	bne.n	8282c <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   82896:	4b5f      	ldr	r3, [pc, #380]	; (82a14 <XPROGProtocol_Command+0x254>)
   82898:	2203      	movs	r2, #3
   8289a:	701a      	strb	r2, [r3, #0]
   8289c:	e7c6      	b.n	8282c <XPROGProtocol_Command+0x6c>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   8289e:	2068      	movs	r0, #104	; 0x68
		break;
   828a0:	e7f5      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   828a2:	2030      	movs	r0, #48	; 0x30
		break;
   828a4:	e7f3      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   828a6:	2022      	movs	r0, #34	; 0x22
		break;
   828a8:	e7f1      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   828aa:	202a      	movs	r0, #42	; 0x2a
		break;
   828ac:	e7ef      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   828ae:	2032      	movs	r0, #50	; 0x32
		break;
   828b0:	e7ed      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   828b2:	2018      	movs	r0, #24
		break;
   828b4:	e7eb      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   828b6:	2000      	movs	r0, #0
		break;
   828b8:	e7e9      	b.n	8288e <XPROGProtocol_Command+0xce>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   828ba:	2040      	movs	r0, #64	; 0x40
   828bc:	e7e7      	b.n	8288e <XPROGProtocol_Command+0xce>
			start_timeoutcnt();
   828be:	4b53      	ldr	r3, [pc, #332]	; (82a0c <XPROGProtocol_Command+0x24c>)
   828c0:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   828c2:	4b54      	ldr	r3, [pc, #336]	; (82a14 <XPROGProtocol_Command+0x254>)
   828c4:	2200      	movs	r2, #0
   828c6:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   828c8:	4b4e      	ldr	r3, [pc, #312]	; (82a04 <XPROGProtocol_Command+0x244>)
   828ca:	88db      	ldrh	r3, [r3, #6]
   828cc:	2b07      	cmp	r3, #7
   828ce:	d802      	bhi.n	828d6 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   828d0:	4b50      	ldr	r3, [pc, #320]	; (82a14 <XPROGProtocol_Command+0x254>)
   828d2:	2201      	movs	r2, #1
   828d4:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   828d6:	4b4b      	ldr	r3, [pc, #300]	; (82a04 <XPROGProtocol_Command+0x244>)
   828d8:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   828da:	795a      	ldrb	r2, [r3, #5]
   828dc:	7919      	ldrb	r1, [r3, #4]
   828de:	0409      	lsls	r1, r1, #16
   828e0:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   828e4:	789a      	ldrb	r2, [r3, #2]
   828e6:	4311      	orrs	r1, r2
   828e8:	78da      	ldrb	r2, [r3, #3]
   828ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   828ee:	781a      	ldrb	r2, [r3, #0]
   828f0:	3a01      	subs	r2, #1
   828f2:	2a05      	cmp	r2, #5
   828f4:	d82e      	bhi.n	82954 <XPROGProtocol_Command+0x194>
   828f6:	e8df f012 	tbh	[pc, r2, lsl #1]
   828fa:	00fd      	.short	0x00fd
   828fc:	0101000e 	.word	0x0101000e
   82900:	00060105 	.word	0x00060105
   82904:	0029      	.short	0x0029
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82906:	2008      	movs	r0, #8
	}

	/* Send the appropriate memory write commands to the device, indicate timeout if occurred */
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
												   PageMode, Address,outbuf, Length)))          ||
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   82908:	4b46      	ldr	r3, [pc, #280]	; (82a24 <XPROGProtocol_Command+0x264>)
   8290a:	781a      	ldrb	r2, [r3, #0]
   8290c:	4b46      	ldr	r3, [pc, #280]	; (82a28 <XPROGProtocol_Command+0x268>)
   8290e:	4798      	blx	r3
   82910:	2800      	cmp	r0, #0
   82912:	d18b      	bne.n	8282c <XPROGProtocol_Command+0x6c>
   82914:	e016      	b.n	82944 <XPROGProtocol_Command+0x184>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82916:	2526      	movs	r5, #38	; 0x26
   82918:	2023      	movs	r0, #35	; 0x23
   8291a:	222c      	movs	r2, #44	; 0x2c
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   8291c:	79de      	ldrb	r6, [r3, #7]
   8291e:	799c      	ldrb	r4, [r3, #6]
   82920:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82924:	785b      	ldrb	r3, [r3, #1]
   82926:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   8292a:	bf28      	it	cs
   8292c:	f44f 7480 	movcs.w	r4, #256	; 0x100
   82930:	9402      	str	r4, [sp, #8]
   82932:	4c3c      	ldr	r4, [pc, #240]	; (82a24 <XPROGProtocol_Command+0x264>)
   82934:	9401      	str	r4, [sp, #4]
   82936:	9100      	str	r1, [sp, #0]
   82938:	4629      	mov	r1, r5
   8293a:	4c3c      	ldr	r4, [pc, #240]	; (82a2c <XPROGProtocol_Command+0x26c>)
   8293c:	47a0      	blx	r4
   8293e:	2800      	cmp	r0, #0
   82940:	f47f af74 	bne.w	8282c <XPROGProtocol_Command+0x6c>
	{
		XPROG_Status = XPROG_ERR_TIMEOUT;
   82944:	4b33      	ldr	r3, [pc, #204]	; (82a14 <XPROGProtocol_Command+0x254>)
   82946:	2203      	movs	r2, #3
   82948:	701a      	strb	r2, [r3, #0]
   8294a:	e76f      	b.n	8282c <XPROGProtocol_Command+0x6c>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   8294c:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   8294e:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   82950:	221a      	movs	r2, #26
		break;
   82952:	e7e3      	b.n	8291c <XPROGProtocol_Command+0x15c>
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   82954:	222e      	movs	r2, #46	; 0x2e
   82956:	2526      	movs	r5, #38	; 0x26
   82958:	2023      	movs	r0, #35	; 0x23
   8295a:	e7df      	b.n	8291c <XPROGProtocol_Command+0x15c>
			start_timeoutcnt();
   8295c:	4b2b      	ldr	r3, [pc, #172]	; (82a0c <XPROGProtocol_Command+0x24c>)
   8295e:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   82960:	4b2c      	ldr	r3, [pc, #176]	; (82a14 <XPROGProtocol_Command+0x254>)
   82962:	2200      	movs	r2, #0
   82964:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82966:	4b27      	ldr	r3, [pc, #156]	; (82a04 <XPROGProtocol_Command+0x244>)
   82968:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   8296a:	798b      	ldrb	r3, [r1, #6]
   8296c:	794a      	ldrb	r2, [r1, #5]
   8296e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   82972:	7908      	ldrb	r0, [r1, #4]
   82974:	78cb      	ldrb	r3, [r1, #3]
   82976:	041b      	lsls	r3, r3, #16
   82978:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   8297c:	7848      	ldrb	r0, [r1, #1]
   8297e:	4303      	orrs	r3, r0
   82980:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   82982:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   82986:	bf28      	it	cs
   82988:	f44f 7280 	movcs.w	r2, #256	; 0x100
   8298c:	4925      	ldr	r1, [pc, #148]	; (82a24 <XPROGProtocol_Command+0x264>)
   8298e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82992:	4b27      	ldr	r3, [pc, #156]	; (82a30 <XPROGProtocol_Command+0x270>)
   82994:	4798      	blx	r3
   82996:	2800      	cmp	r0, #0
   82998:	f47f af48 	bne.w	8282c <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   8299c:	4b1d      	ldr	r3, [pc, #116]	; (82a14 <XPROGProtocol_Command+0x254>)
   8299e:	2203      	movs	r2, #3
   829a0:	701a      	strb	r2, [r3, #0]
   829a2:	e743      	b.n	8282c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   829a4:	4b19      	ldr	r3, [pc, #100]	; (82a0c <XPROGProtocol_Command+0x24c>)
   829a6:	4798      	blx	r3
			break;
   829a8:	e740      	b.n	8282c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   829aa:	4b18      	ldr	r3, [pc, #96]	; (82a0c <XPROGProtocol_Command+0x24c>)
   829ac:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   829ae:	4b19      	ldr	r3, [pc, #100]	; (82a14 <XPROGProtocol_Command+0x254>)
   829b0:	2200      	movs	r2, #0
   829b2:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   829b4:	4b13      	ldr	r3, [pc, #76]	; (82a04 <XPROGProtocol_Command+0x244>)
   829b6:	8999      	ldrh	r1, [r3, #12]
   829b8:	2901      	cmp	r1, #1
   829ba:	d90b      	bls.n	829d4 <XPROGProtocol_Command+0x214>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   829bc:	4b11      	ldr	r3, [pc, #68]	; (82a04 <XPROGProtocol_Command+0x244>)
   829be:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   829c0:	7813      	ldrb	r3, [r2, #0]
   829c2:	3b01      	subs	r3, #1
   829c4:	2b07      	cmp	r3, #7
   829c6:	d85f      	bhi.n	82a88 <XPROGProtocol_Command+0x2c8>
   829c8:	e8df f003 	tbb	[pc, r3]
   829cc:	47433608 	.word	0x47433608
   829d0:	4b5e5e5e 	.word	0x4b5e5e5e
		XPROG_Status = XPROG_ERR_FAILED;
   829d4:	4b0f      	ldr	r3, [pc, #60]	; (82a14 <XPROGProtocol_Command+0x254>)
   829d6:	2201      	movs	r2, #1
   829d8:	701a      	strb	r2, [r3, #0]
		return;
   829da:	e727      	b.n	8282c <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   829dc:	2904      	cmp	r1, #4
   829de:	d90c      	bls.n	829fa <XPROGProtocol_Command+0x23a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   829e0:	7911      	ldrb	r1, [r2, #4]
   829e2:	78d3      	ldrb	r3, [r2, #3]
   829e4:	041b      	lsls	r3, r3, #16
   829e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   829ea:	7851      	ldrb	r1, [r2, #1]
   829ec:	430b      	orrs	r3, r1
   829ee:	7892      	ldrb	r2, [r2, #2]
   829f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   829f4:	4a0f      	ldr	r2, [pc, #60]	; (82a34 <XPROGProtocol_Command+0x274>)
   829f6:	6013      	str	r3, [r2, #0]
			break;
   829f8:	e718      	b.n	8282c <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   829fa:	4b06      	ldr	r3, [pc, #24]	; (82a14 <XPROGProtocol_Command+0x254>)
   829fc:	2201      	movs	r2, #1
   829fe:	701a      	strb	r2, [r3, #0]
				return;
   82a00:	e714      	b.n	8282c <XPROGProtocol_Command+0x6c>
   82a02:	bf00      	nop
   82a04:	20002b90 	.word	0x20002b90
   82a08:	20001cec 	.word	0x20001cec
   82a0c:	00082e19 	.word	0x00082e19
   82a10:	0008245d 	.word	0x0008245d
   82a14:	20002b74 	.word	0x20002b74
   82a18:	00082e61 	.word	0x00082e61
   82a1c:	000824d9 	.word	0x000824d9
   82a20:	000826c9 	.word	0x000826c9
   82a24:	20001cf0 	.word	0x20001cf0
   82a28:	000825a9 	.word	0x000825a9
   82a2c:	000825f1 	.word	0x000825f1
   82a30:	00082515 	.word	0x00082515
   82a34:	200005a8 	.word	0x200005a8
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   82a38:	2902      	cmp	r1, #2
   82a3a:	d906      	bls.n	82a4a <XPROGProtocol_Command+0x28a>
				XPROG_Status = XPROG_ERR_FAILED;
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   82a3c:	7891      	ldrb	r1, [r2, #2]
   82a3e:	7853      	ldrb	r3, [r2, #1]
   82a40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   82a44:	4a30      	ldr	r2, [pc, #192]	; (82b08 <XPROGProtocol_Command+0x348>)
   82a46:	8013      	strh	r3, [r2, #0]
			break;
   82a48:	e6f0      	b.n	8282c <XPROGProtocol_Command+0x6c>
				XPROG_Status = XPROG_ERR_FAILED;
   82a4a:	4b30      	ldr	r3, [pc, #192]	; (82b0c <XPROGProtocol_Command+0x34c>)
   82a4c:	2201      	movs	r2, #1
   82a4e:	701a      	strb	r2, [r3, #0]
				return;
   82a50:	e6ec      	b.n	8282c <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   82a52:	7852      	ldrb	r2, [r2, #1]
   82a54:	4b2e      	ldr	r3, [pc, #184]	; (82b10 <XPROGProtocol_Command+0x350>)
   82a56:	701a      	strb	r2, [r3, #0]
			break;
   82a58:	e6e8      	b.n	8282c <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   82a5a:	7852      	ldrb	r2, [r2, #1]
   82a5c:	4b2d      	ldr	r3, [pc, #180]	; (82b14 <XPROGProtocol_Command+0x354>)
   82a5e:	701a      	strb	r2, [r3, #0]
			break;
   82a60:	e6e4      	b.n	8282c <XPROGProtocol_Command+0x6c>
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   82a62:	2904      	cmp	r1, #4
   82a64:	d803      	bhi.n	82a6e <XPROGProtocol_Command+0x2ae>
				XPROG_Status = XPROG_ERR_FAILED;
   82a66:	4b29      	ldr	r3, [pc, #164]	; (82b0c <XPROGProtocol_Command+0x34c>)
   82a68:	2201      	movs	r2, #1
   82a6a:	701a      	strb	r2, [r3, #0]
				return;
   82a6c:	e6de      	b.n	8282c <XPROGProtocol_Command+0x6c>
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   82a6e:	7911      	ldrb	r1, [r2, #4]
   82a70:	78d3      	ldrb	r3, [r2, #3]
   82a72:	041b      	lsls	r3, r3, #16
   82a74:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   82a78:	7851      	ldrb	r1, [r2, #1]
   82a7a:	430b      	orrs	r3, r1
   82a7c:	7890      	ldrb	r0, [r2, #2]
   82a7e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   82a82:	4b25      	ldr	r3, [pc, #148]	; (82b18 <XPROGProtocol_Command+0x358>)
   82a84:	4798      	blx	r3
			break;
   82a86:	e6d1      	b.n	8282c <XPROGProtocol_Command+0x6c>
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   82a88:	4b20      	ldr	r3, [pc, #128]	; (82b0c <XPROGProtocol_Command+0x34c>)
   82a8a:	2201      	movs	r2, #1
   82a8c:	701a      	strb	r2, [r3, #0]
			break;
   82a8e:	e6cd      	b.n	8282c <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82a90:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   82a92:	4b22      	ldr	r3, [pc, #136]	; (82b1c <XPROGProtocol_Command+0x35c>)
   82a94:	88db      	ldrh	r3, [r3, #6]
   82a96:	eb03 2111 	add.w	r1, r3, r1, lsr #8
   82a9a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82a9e:	dc27      	bgt.n	82af0 <XPROGProtocol_Command+0x330>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   82aa0:	491e      	ldr	r1, [pc, #120]	; (82b1c <XPROGProtocol_Command+0x35c>)
   82aa2:	4a1f      	ldr	r2, [pc, #124]	; (82b20 <XPROGProtocol_Command+0x360>)
   82aa4:	4402      	add	r2, r0
   82aa6:	608a      	str	r2, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82aa8:	818b      	strh	r3, [r1, #12]
			return true;
   82aaa:	2001      	movs	r0, #1
   82aac:	e6c1      	b.n	82832 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   82aae:	0a08      	lsrs	r0, r1, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   82ab0:	4b1a      	ldr	r3, [pc, #104]	; (82b1c <XPROGProtocol_Command+0x35c>)
   82ab2:	88da      	ldrh	r2, [r3, #6]
   82ab4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
   82ab8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   82abc:	dd01      	ble.n	82ac2 <XPROGProtocol_Command+0x302>
				return false;
   82abe:	2000      	movs	r0, #0
   82ac0:	e6b7      	b.n	82832 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   82ac2:	6899      	ldr	r1, [r3, #8]
   82ac4:	4b16      	ldr	r3, [pc, #88]	; (82b20 <XPROGProtocol_Command+0x360>)
   82ac6:	4418      	add	r0, r3
   82ac8:	4b16      	ldr	r3, [pc, #88]	; (82b24 <XPROGProtocol_Command+0x364>)
   82aca:	4798      	blx	r3
			return true;
   82acc:	2001      	movs	r0, #1
   82ace:	e6b0      	b.n	82832 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   82ad0:	4a15      	ldr	r2, [pc, #84]	; (82b28 <XPROGProtocol_Command+0x368>)
   82ad2:	4b0e      	ldr	r3, [pc, #56]	; (82b0c <XPROGProtocol_Command+0x34c>)
   82ad4:	781b      	ldrb	r3, [r3, #0]
   82ad6:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   82ad8:	4b14      	ldr	r3, [pc, #80]	; (82b2c <XPROGProtocol_Command+0x36c>)
   82ada:	681b      	ldr	r3, [r3, #0]
   82adc:	fab3 f383 	clz	r3, r3
   82ae0:	095b      	lsrs	r3, r3, #5
   82ae2:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   82ae4:	4b0d      	ldr	r3, [pc, #52]	; (82b1c <XPROGProtocol_Command+0x35c>)
   82ae6:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   82ae8:	2203      	movs	r2, #3
   82aea:	819a      	strh	r2, [r3, #12]
			return true;
   82aec:	2001      	movs	r0, #1
   82aee:	e6a0      	b.n	82832 <XPROGProtocol_Command+0x72>
				return false;
   82af0:	2000      	movs	r0, #0
   82af2:	e69e      	b.n	82832 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   82af4:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   82af6:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   82af8:	2224      	movs	r2, #36	; 0x24
   82afa:	e70f      	b.n	8291c <XPROGProtocol_Command+0x15c>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   82afc:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   82afe:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   82b00:	2235      	movs	r2, #53	; 0x35
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   82b02:	e70b      	b.n	8291c <XPROGProtocol_Command+0x15c>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   82b04:	204c      	movs	r0, #76	; 0x4c
   82b06:	e6ff      	b.n	82908 <XPROGProtocol_Command+0x148>
   82b08:	200005a6 	.word	0x200005a6
   82b0c:	20002b74 	.word	0x20002b74
   82b10:	200005ac 	.word	0x200005ac
   82b14:	200005ad 	.word	0x200005ad
   82b18:	00082da9 	.word	0x00082da9
   82b1c:	20002b90 	.word	0x20002b90
   82b20:	20001cf0 	.word	0x20001cf0
   82b24:	000860f9 	.word	0x000860f9
   82b28:	20001cec 	.word	0x20001cec
   82b2c:	20002b78 	.word	0x20002b78

00082b30 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   82b30:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   82b32:	4d0b      	ldr	r5, [pc, #44]	; (82b60 <XPROGTarget_SetRxMode+0x30>)
   82b34:	4c0b      	ldr	r4, [pc, #44]	; (82b64 <XPROGTarget_SetRxMode+0x34>)
   82b36:	4628      	mov	r0, r5
   82b38:	47a0      	blx	r4
   82b3a:	2800      	cmp	r0, #0
   82b3c:	d0fb      	beq.n	82b36 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   82b3e:	4c08      	ldr	r4, [pc, #32]	; (82b60 <XPROGTarget_SetRxMode+0x30>)
   82b40:	4620      	mov	r0, r4
   82b42:	4b09      	ldr	r3, [pc, #36]	; (82b68 <XPROGTarget_SetRxMode+0x38>)
   82b44:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   82b46:	4620      	mov	r0, r4
   82b48:	4b08      	ldr	r3, [pc, #32]	; (82b6c <XPROGTarget_SetRxMode+0x3c>)
   82b4a:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82b4c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b50:	2014      	movs	r0, #20
   82b52:	4b07      	ldr	r3, [pc, #28]	; (82b70 <XPROGTarget_SetRxMode+0x40>)
   82b54:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   82b56:	4b07      	ldr	r3, [pc, #28]	; (82b74 <XPROGTarget_SetRxMode+0x44>)
   82b58:	2200      	movs	r2, #0
   82b5a:	701a      	strb	r2, [r3, #0]
}
   82b5c:	bd38      	pop	{r3, r4, r5, pc}
   82b5e:	bf00      	nop
   82b60:	40094000 	.word	0x40094000
   82b64:	0008577d 	.word	0x0008577d
   82b68:	0008575b 	.word	0x0008575b
   82b6c:	00085761 	.word	0x00085761
   82b70:	00083d59 	.word	0x00083d59
   82b74:	20001df0 	.word	0x20001df0

00082b78 <XPROGTarget_SetTxMode>:
{
   82b78:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82b7a:	2518      	movs	r5, #24
   82b7c:	4c14      	ldr	r4, [pc, #80]	; (82bd0 <XPROGTarget_SetTxMode+0x58>)
   82b7e:	4e15      	ldr	r6, [pc, #84]	; (82bd4 <XPROGTarget_SetTxMode+0x5c>)
   82b80:	4628      	mov	r0, r5
   82b82:	47a0      	blx	r4
   82b84:	b110      	cbz	r0, 82b8c <XPROGTarget_SetTxMode+0x14>
   82b86:	6833      	ldr	r3, [r6, #0]
   82b88:	2b00      	cmp	r3, #0
   82b8a:	d1f9      	bne.n	82b80 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82b8c:	2518      	movs	r5, #24
   82b8e:	4c10      	ldr	r4, [pc, #64]	; (82bd0 <XPROGTarget_SetTxMode+0x58>)
   82b90:	4e10      	ldr	r6, [pc, #64]	; (82bd4 <XPROGTarget_SetTxMode+0x5c>)
   82b92:	4628      	mov	r0, r5
   82b94:	47a0      	blx	r4
   82b96:	b910      	cbnz	r0, 82b9e <XPROGTarget_SetTxMode+0x26>
   82b98:	6833      	ldr	r3, [r6, #0]
   82b9a:	2b00      	cmp	r3, #0
   82b9c:	d1f9      	bne.n	82b92 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82b9e:	2518      	movs	r5, #24
   82ba0:	4c0b      	ldr	r4, [pc, #44]	; (82bd0 <XPROGTarget_SetTxMode+0x58>)
   82ba2:	4e0c      	ldr	r6, [pc, #48]	; (82bd4 <XPROGTarget_SetTxMode+0x5c>)
   82ba4:	4628      	mov	r0, r5
   82ba6:	47a0      	blx	r4
   82ba8:	b110      	cbz	r0, 82bb0 <XPROGTarget_SetTxMode+0x38>
   82baa:	6833      	ldr	r3, [r6, #0]
   82bac:	2b00      	cmp	r3, #0
   82bae:	d1f9      	bne.n	82ba4 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   82bb0:	4c09      	ldr	r4, [pc, #36]	; (82bd8 <XPROGTarget_SetTxMode+0x60>)
   82bb2:	4620      	mov	r0, r4
   82bb4:	4b09      	ldr	r3, [pc, #36]	; (82bdc <XPROGTarget_SetTxMode+0x64>)
   82bb6:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   82bb8:	4620      	mov	r0, r4
   82bba:	4b09      	ldr	r3, [pc, #36]	; (82be0 <XPROGTarget_SetTxMode+0x68>)
   82bbc:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   82bbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82bc2:	2014      	movs	r0, #20
   82bc4:	4b07      	ldr	r3, [pc, #28]	; (82be4 <XPROGTarget_SetTxMode+0x6c>)
   82bc6:	4798      	blx	r3
	IsSending = true;
   82bc8:	4b07      	ldr	r3, [pc, #28]	; (82be8 <XPROGTarget_SetTxMode+0x70>)
   82bca:	2201      	movs	r2, #1
   82bcc:	701a      	strb	r2, [r3, #0]
}
   82bce:	bd70      	pop	{r4, r5, r6, pc}
   82bd0:	00083d09 	.word	0x00083d09
   82bd4:	20002b78 	.word	0x20002b78
   82bd8:	40094000 	.word	0x40094000
   82bdc:	00085767 	.word	0x00085767
   82be0:	00085755 	.word	0x00085755
   82be4:	00083d59 	.word	0x00083d59
   82be8:	20001df0 	.word	0x20001df0

00082bec <XPROGTarget_DisableTargetPDI>:
{
   82bec:	b510      	push	{r4, lr}
	if (IsSending)
   82bee:	4b0f      	ldr	r3, [pc, #60]	; (82c2c <XPROGTarget_DisableTargetPDI+0x40>)
   82bf0:	781b      	ldrb	r3, [r3, #0]
   82bf2:	b9bb      	cbnz	r3, 82c24 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   82bf4:	4c0e      	ldr	r4, [pc, #56]	; (82c30 <XPROGTarget_DisableTargetPDI+0x44>)
   82bf6:	4620      	mov	r0, r4
   82bf8:	4b0e      	ldr	r3, [pc, #56]	; (82c34 <XPROGTarget_DisableTargetPDI+0x48>)
   82bfa:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   82bfc:	4620      	mov	r0, r4
   82bfe:	4b0e      	ldr	r3, [pc, #56]	; (82c38 <XPROGTarget_DisableTargetPDI+0x4c>)
   82c00:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   82c02:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c06:	2018      	movs	r0, #24
   82c08:	4c0c      	ldr	r4, [pc, #48]	; (82c3c <XPROGTarget_DisableTargetPDI+0x50>)
   82c0a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82c0c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c10:	2015      	movs	r0, #21
   82c12:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   82c14:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c18:	2014      	movs	r0, #20
   82c1a:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   82c1c:	200e      	movs	r0, #14
   82c1e:	4b08      	ldr	r3, [pc, #32]	; (82c40 <XPROGTarget_DisableTargetPDI+0x54>)
   82c20:	4798      	blx	r3
}
   82c22:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   82c24:	4b07      	ldr	r3, [pc, #28]	; (82c44 <XPROGTarget_DisableTargetPDI+0x58>)
   82c26:	4798      	blx	r3
   82c28:	e7e4      	b.n	82bf4 <XPROGTarget_DisableTargetPDI+0x8>
   82c2a:	bf00      	nop
   82c2c:	20001df0 	.word	0x20001df0
   82c30:	40094000 	.word	0x40094000
   82c34:	00085767 	.word	0x00085767
   82c38:	0008575b 	.word	0x0008575b
   82c3c:	00083d59 	.word	0x00083d59
   82c40:	000840c1 	.word	0x000840c1
   82c44:	00082b31 	.word	0x00082b31

00082c48 <XPROGTarget_SendByte>:
{
   82c48:	b510      	push	{r4, lr}
   82c4a:	4604      	mov	r4, r0
	if (!(IsSending))
   82c4c:	4b05      	ldr	r3, [pc, #20]	; (82c64 <XPROGTarget_SendByte+0x1c>)
   82c4e:	781b      	ldrb	r3, [r3, #0]
   82c50:	b123      	cbz	r3, 82c5c <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   82c52:	4621      	mov	r1, r4
   82c54:	4804      	ldr	r0, [pc, #16]	; (82c68 <XPROGTarget_SendByte+0x20>)
   82c56:	4b05      	ldr	r3, [pc, #20]	; (82c6c <XPROGTarget_SendByte+0x24>)
   82c58:	4798      	blx	r3
}
   82c5a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   82c5c:	4b04      	ldr	r3, [pc, #16]	; (82c70 <XPROGTarget_SendByte+0x28>)
   82c5e:	4798      	blx	r3
   82c60:	e7f7      	b.n	82c52 <XPROGTarget_SendByte+0xa>
   82c62:	bf00      	nop
   82c64:	20001df0 	.word	0x20001df0
   82c68:	40094000 	.word	0x40094000
   82c6c:	00085799 	.word	0x00085799
   82c70:	00082b79 	.word	0x00082b79

00082c74 <XPROGTarget_ReceiveByte>:
{
   82c74:	b570      	push	{r4, r5, r6, lr}
   82c76:	b082      	sub	sp, #8
	if (IsSending)
   82c78:	4b0a      	ldr	r3, [pc, #40]	; (82ca4 <XPROGTarget_ReceiveByte+0x30>)
   82c7a:	781b      	ldrb	r3, [r3, #0]
   82c7c:	b973      	cbnz	r3, 82c9c <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   82c7e:	4d0a      	ldr	r5, [pc, #40]	; (82ca8 <XPROGTarget_ReceiveByte+0x34>)
   82c80:	4c0a      	ldr	r4, [pc, #40]	; (82cac <XPROGTarget_ReceiveByte+0x38>)
   82c82:	4e0b      	ldr	r6, [pc, #44]	; (82cb0 <XPROGTarget_ReceiveByte+0x3c>)
   82c84:	a901      	add	r1, sp, #4
   82c86:	4628      	mov	r0, r5
   82c88:	47a0      	blx	r4
   82c8a:	2801      	cmp	r0, #1
   82c8c:	d102      	bne.n	82c94 <XPROGTarget_ReceiveByte+0x20>
   82c8e:	6833      	ldr	r3, [r6, #0]
   82c90:	2b00      	cmp	r3, #0
   82c92:	d1f7      	bne.n	82c84 <XPROGTarget_ReceiveByte+0x10>
}
   82c94:	f89d 0004 	ldrb.w	r0, [sp, #4]
   82c98:	b002      	add	sp, #8
   82c9a:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   82c9c:	4b05      	ldr	r3, [pc, #20]	; (82cb4 <XPROGTarget_ReceiveByte+0x40>)
   82c9e:	4798      	blx	r3
   82ca0:	e7ed      	b.n	82c7e <XPROGTarget_ReceiveByte+0xa>
   82ca2:	bf00      	nop
   82ca4:	20001df0 	.word	0x20001df0
   82ca8:	40094000 	.word	0x40094000
   82cac:	000857ab 	.word	0x000857ab
   82cb0:	20002b78 	.word	0x20002b78
   82cb4:	00082b31 	.word	0x00082b31

00082cb8 <XPROGTarget_SendIdle>:
{
   82cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   82cba:	4b12      	ldr	r3, [pc, #72]	; (82d04 <XPROGTarget_SendIdle+0x4c>)
   82cbc:	781b      	ldrb	r3, [r3, #0]
   82cbe:	b123      	cbz	r3, 82cca <XPROGTarget_SendIdle+0x12>
{
   82cc0:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82cc2:	2518      	movs	r5, #24
   82cc4:	4c10      	ldr	r4, [pc, #64]	; (82d08 <XPROGTarget_SendIdle+0x50>)
   82cc6:	4e11      	ldr	r6, [pc, #68]	; (82d0c <XPROGTarget_SendIdle+0x54>)
   82cc8:	e006      	b.n	82cd8 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   82cca:	4b11      	ldr	r3, [pc, #68]	; (82d10 <XPROGTarget_SendIdle+0x58>)
   82ccc:	4798      	blx	r3
   82cce:	e7f7      	b.n	82cc0 <XPROGTarget_SendIdle+0x8>
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   82cd0:	3f01      	subs	r7, #1
   82cd2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   82cd6:	d013      	beq.n	82d00 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82cd8:	4628      	mov	r0, r5
   82cda:	47a0      	blx	r4
   82cdc:	b110      	cbz	r0, 82ce4 <XPROGTarget_SendIdle+0x2c>
   82cde:	6833      	ldr	r3, [r6, #0]
   82ce0:	2b00      	cmp	r3, #0
   82ce2:	d1f9      	bne.n	82cd8 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82ce4:	4628      	mov	r0, r5
   82ce6:	47a0      	blx	r4
   82ce8:	b910      	cbnz	r0, 82cf0 <XPROGTarget_SendIdle+0x38>
   82cea:	6833      	ldr	r3, [r6, #0]
   82cec:	2b00      	cmp	r3, #0
   82cee:	d1f9      	bne.n	82ce4 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   82cf0:	4628      	mov	r0, r5
   82cf2:	47a0      	blx	r4
   82cf4:	2800      	cmp	r0, #0
   82cf6:	d0eb      	beq.n	82cd0 <XPROGTarget_SendIdle+0x18>
   82cf8:	6833      	ldr	r3, [r6, #0]
   82cfa:	2b00      	cmp	r3, #0
   82cfc:	d1f8      	bne.n	82cf0 <XPROGTarget_SendIdle+0x38>
   82cfe:	e7e7      	b.n	82cd0 <XPROGTarget_SendIdle+0x18>
}
   82d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d02:	bf00      	nop
   82d04:	20001df0 	.word	0x20001df0
   82d08:	00083d09 	.word	0x00083d09
   82d0c:	20002b78 	.word	0x20002b78
   82d10:	00082b79 	.word	0x00082b79

00082d14 <XPROGTarget_EnableTargetPDI>:
{
   82d14:	b570      	push	{r4, r5, r6, lr}
   82d16:	b086      	sub	sp, #24
	IsSending = false;
   82d18:	2500      	movs	r5, #0
   82d1a:	4b19      	ldr	r3, [pc, #100]	; (82d80 <XPROGTarget_EnableTargetPDI+0x6c>)
   82d1c:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   82d1e:	200e      	movs	r0, #14
   82d20:	4b18      	ldr	r3, [pc, #96]	; (82d84 <XPROGTarget_EnableTargetPDI+0x70>)
   82d22:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   82d24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d28:	2014      	movs	r0, #20
   82d2a:	4c17      	ldr	r4, [pc, #92]	; (82d88 <XPROGTarget_EnableTargetPDI+0x74>)
   82d2c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   82d2e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82d32:	2015      	movs	r0, #21
   82d34:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   82d36:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82d3a:	2018      	movs	r0, #24
   82d3c:	47a0      	blx	r4
	delay_us(50);
   82d3e:	f240 1057 	movw	r0, #343	; 0x157
   82d42:	4e12      	ldr	r6, [pc, #72]	; (82d8c <XPROGTarget_EnableTargetPDI+0x78>)
   82d44:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   82d46:	2014      	movs	r0, #20
   82d48:	4b11      	ldr	r3, [pc, #68]	; (82d90 <XPROGTarget_EnableTargetPDI+0x7c>)
   82d4a:	4798      	blx	r3
	delay_us(10);
   82d4c:	2045      	movs	r0, #69	; 0x45
   82d4e:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   82d50:	9502      	str	r5, [sp, #8]
   82d52:	9504      	str	r5, [sp, #16]
   82d54:	9505      	str	r5, [sp, #20]
   82d56:	4b0f      	ldr	r3, [pc, #60]	; (82d94 <XPROGTarget_EnableTargetPDI+0x80>)
   82d58:	9300      	str	r3, [sp, #0]
   82d5a:	23c0      	movs	r3, #192	; 0xc0
   82d5c:	9301      	str	r3, [sp, #4]
   82d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82d62:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   82d64:	4a0c      	ldr	r2, [pc, #48]	; (82d98 <XPROGTarget_EnableTargetPDI+0x84>)
   82d66:	4669      	mov	r1, sp
   82d68:	480c      	ldr	r0, [pc, #48]	; (82d9c <XPROGTarget_EnableTargetPDI+0x88>)
   82d6a:	4b0d      	ldr	r3, [pc, #52]	; (82da0 <XPROGTarget_EnableTargetPDI+0x8c>)
   82d6c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   82d6e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82d72:	2018      	movs	r0, #24
   82d74:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82d76:	4c0b      	ldr	r4, [pc, #44]	; (82da4 <XPROGTarget_EnableTargetPDI+0x90>)
   82d78:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   82d7a:	47a0      	blx	r4
}
   82d7c:	b006      	add	sp, #24
   82d7e:	bd70      	pop	{r4, r5, r6, pc}
   82d80:	20001df0 	.word	0x20001df0
   82d84:	00084095 	.word	0x00084095
   82d88:	00083d59 	.word	0x00083d59
   82d8c:	20000087 	.word	0x20000087
   82d90:	00083d25 	.word	0x00083d25
   82d94:	0007a120 	.word	0x0007a120
   82d98:	0b71b000 	.word	0x0b71b000
   82d9c:	40094000 	.word	0x40094000
   82da0:	000856ed 	.word	0x000856ed
   82da4:	00082cb9 	.word	0x00082cb9

00082da8 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   82da8:	4b01      	ldr	r3, [pc, #4]	; (82db0 <set_timeout+0x8>)
   82daa:	6018      	str	r0, [r3, #0]
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}
   82dac:	4770      	bx	lr
   82dae:	bf00      	nop
   82db0:	200005b0 	.word	0x200005b0

00082db4 <setup_timeoutcnt>:

void setup_timeoutcnt(void)
{
   82db4:	b538      	push	{r3, r4, r5, lr}
   82db6:	2016      	movs	r0, #22
   82db8:	4b10      	ldr	r3, [pc, #64]	; (82dfc <setup_timeoutcnt+0x48>)
   82dba:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   82dbc:	4b10      	ldr	r3, [pc, #64]	; (82e00 <setup_timeoutcnt+0x4c>)
   82dbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   82dc2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82dc6:	2510      	movs	r5, #16
   82dc8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82dcc:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   82dce:	4c0d      	ldr	r4, [pc, #52]	; (82e04 <setup_timeoutcnt+0x50>)
   82dd0:	f24c 0201 	movw	r2, #49153	; 0xc001
   82dd4:	2100      	movs	r1, #0
   82dd6:	4620      	mov	r0, r4
   82dd8:	4b0b      	ldr	r3, [pc, #44]	; (82e08 <setup_timeoutcnt+0x54>)
   82dda:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   82ddc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   82de0:	2100      	movs	r1, #0
   82de2:	4620      	mov	r0, r4
   82de4:	4b09      	ldr	r3, [pc, #36]	; (82e0c <setup_timeoutcnt+0x58>)
   82de6:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   82de8:	462a      	mov	r2, r5
   82dea:	2100      	movs	r1, #0
   82dec:	4620      	mov	r0, r4
   82dee:	4b08      	ldr	r3, [pc, #32]	; (82e10 <setup_timeoutcnt+0x5c>)
   82df0:	4798      	blx	r3
	
	timerEnabled = true;
   82df2:	4b08      	ldr	r3, [pc, #32]	; (82e14 <setup_timeoutcnt+0x60>)
   82df4:	2201      	movs	r2, #1
   82df6:	701a      	strb	r2, [r3, #0]
}
   82df8:	bd38      	pop	{r3, r4, r5, pc}
   82dfa:	bf00      	nop
   82dfc:	00084095 	.word	0x00084095
   82e00:	e000e100 	.word	0xe000e100
   82e04:	40080000 	.word	0x40080000
   82e08:	00082ee9 	.word	0x00082ee9
   82e0c:	00082f13 	.word	0x00082f13
   82e10:	00082f1b 	.word	0x00082f1b
   82e14:	20001df1 	.word	0x20001df1

00082e18 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   82e18:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   82e1a:	4b0a      	ldr	r3, [pc, #40]	; (82e44 <start_timeoutcnt+0x2c>)
   82e1c:	781b      	ldrb	r3, [r3, #0]
   82e1e:	b16b      	cbz	r3, 82e3c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82e20:	4c09      	ldr	r4, [pc, #36]	; (82e48 <start_timeoutcnt+0x30>)
   82e22:	2100      	movs	r1, #0
   82e24:	4620      	mov	r0, r4
   82e26:	4b09      	ldr	r3, [pc, #36]	; (82e4c <start_timeoutcnt+0x34>)
   82e28:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   82e2a:	4b09      	ldr	r3, [pc, #36]	; (82e50 <start_timeoutcnt+0x38>)
   82e2c:	681a      	ldr	r2, [r3, #0]
   82e2e:	4b09      	ldr	r3, [pc, #36]	; (82e54 <start_timeoutcnt+0x3c>)
   82e30:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   82e32:	2100      	movs	r1, #0
   82e34:	4620      	mov	r0, r4
   82e36:	4b08      	ldr	r3, [pc, #32]	; (82e58 <start_timeoutcnt+0x40>)
   82e38:	4798      	blx	r3
}
   82e3a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   82e3c:	4b07      	ldr	r3, [pc, #28]	; (82e5c <start_timeoutcnt+0x44>)
   82e3e:	4798      	blx	r3
   82e40:	e7ee      	b.n	82e20 <start_timeoutcnt+0x8>
   82e42:	bf00      	nop
   82e44:	20001df1 	.word	0x20001df1
   82e48:	40080000 	.word	0x40080000
   82e4c:	00082f0b 	.word	0x00082f0b
   82e50:	200005b0 	.word	0x200005b0
   82e54:	20002b78 	.word	0x20002b78
   82e58:	00082f03 	.word	0x00082f03
   82e5c:	00082db5 	.word	0x00082db5

00082e60 <stop_timeoutcnt>:

void stop_timeoutcnt(void)
{
   82e60:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   82e62:	2100      	movs	r1, #0
   82e64:	4801      	ldr	r0, [pc, #4]	; (82e6c <stop_timeoutcnt+0xc>)
   82e66:	4b02      	ldr	r3, [pc, #8]	; (82e70 <stop_timeoutcnt+0x10>)
   82e68:	4798      	blx	r3
}
   82e6a:	bd08      	pop	{r3, pc}
   82e6c:	40080000 	.word	0x40080000
   82e70:	00082f0b 	.word	0x00082f0b

00082e74 <TC0_Handler>:

ISR(TC0_Handler)
{
   82e74:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   82e76:	4b05      	ldr	r3, [pc, #20]	; (82e8c <TC0_Handler+0x18>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	b113      	cbz	r3, 82e82 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   82e7c:	3b01      	subs	r3, #1
   82e7e:	4a03      	ldr	r2, [pc, #12]	; (82e8c <TC0_Handler+0x18>)
   82e80:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   82e82:	2100      	movs	r1, #0
   82e84:	4802      	ldr	r0, [pc, #8]	; (82e90 <TC0_Handler+0x1c>)
   82e86:	4b03      	ldr	r3, [pc, #12]	; (82e94 <TC0_Handler+0x20>)
   82e88:	4798      	blx	r3
}
   82e8a:	bd08      	pop	{r3, pc}
   82e8c:	20002b78 	.word	0x20002b78
   82e90:	40080000 	.word	0x40080000
   82e94:	00082f23 	.word	0x00082f23

00082e98 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82e98:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82e9a:	f1a1 030e 	sub.w	r3, r1, #14
   82e9e:	2b01      	cmp	r3, #1
   82ea0:	d91a      	bls.n	82ed8 <efc_perform_command+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ea2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   82ea6:	b672      	cpsid	i
   82ea8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82eac:	4b0c      	ldr	r3, [pc, #48]	; (82ee0 <efc_perform_command+0x48>)
   82eae:	2500      	movs	r5, #0
   82eb0:	701d      	strb	r5, [r3, #0]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82eb2:	0212      	lsls	r2, r2, #8
   82eb4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   82eb8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82ebc:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82ebe:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   82ec0:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   82ec4:	4b07      	ldr	r3, [pc, #28]	; (82ee4 <efc_perform_command+0x4c>)
   82ec6:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   82ec8:	b92c      	cbnz	r4, 82ed6 <efc_perform_command+0x3e>
		cpu_irq_enable();
   82eca:	4b05      	ldr	r3, [pc, #20]	; (82ee0 <efc_perform_command+0x48>)
   82ecc:	2201      	movs	r2, #1
   82ece:	701a      	strb	r2, [r3, #0]
   82ed0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82ed4:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   82ed6:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   82ed8:	f04f 30ff 	mov.w	r0, #4294967295
   82edc:	e7fb      	b.n	82ed6 <efc_perform_command+0x3e>
   82ede:	bf00      	nop
   82ee0:	200006e6 	.word	0x200006e6
   82ee4:	2000006d 	.word	0x2000006d

00082ee8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   82ee8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82eea:	018b      	lsls	r3, r1, #6
   82eec:	eb00 1181 	add.w	r1, r0, r1, lsl #6

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   82ef0:	2402      	movs	r4, #2
   82ef2:	50c4      	str	r4, [r0, r3]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   82ef4:	f04f 33ff 	mov.w	r3, #4294967295
   82ef8:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   82efa:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   82efc:	604a      	str	r2, [r1, #4]
}
   82efe:	bc10      	pop	{r4}
   82f00:	4770      	bx	lr

00082f02 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   82f02:	0189      	lsls	r1, r1, #6
   82f04:	2305      	movs	r3, #5
   82f06:	5043      	str	r3, [r0, r1]
}
   82f08:	4770      	bx	lr

00082f0a <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   82f0a:	0189      	lsls	r1, r1, #6
   82f0c:	2302      	movs	r3, #2
   82f0e:	5043      	str	r3, [r0, r1]
}
   82f10:	4770      	bx	lr

00082f12 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82f12:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   82f16:	61c2      	str	r2, [r0, #28]
}
   82f18:	4770      	bx	lr

00082f1a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82f1a:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   82f1e:	6242      	str	r2, [r0, #36]	; 0x24
}
   82f20:	4770      	bx	lr

00082f22 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82f22:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   82f26:	6a00      	ldr	r0, [r0, #32]
}
   82f28:	4770      	bx	lr
	...

00082f2c <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82f2c:	b570      	push	{r4, r5, r6, lr}
   82f2e:	b086      	sub	sp, #24
   82f30:	4604      	mov	r4, r0
   82f32:	460d      	mov	r5, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f34:	2304      	movs	r3, #4
   82f36:	9300      	str	r3, [sp, #0]
   82f38:	ab02      	add	r3, sp, #8
   82f3a:	220f      	movs	r2, #15
   82f3c:	210e      	movs	r1, #14
   82f3e:	480c      	ldr	r0, [pc, #48]	; (82f70 <flash_read_unique_id+0x44>)
   82f40:	4e0c      	ldr	r6, [pc, #48]	; (82f74 <flash_read_unique_id+0x48>)
   82f42:	47b0      	blx	r6
   82f44:	b980      	cbnz	r0, 82f68 <flash_read_unique_id+0x3c>
   82f46:	4603      	mov	r3, r0
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82f48:	462e      	mov	r6, r5
   82f4a:	2d04      	cmp	r5, #4
   82f4c:	bf28      	it	cs
   82f4e:	2604      	movcs	r6, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f50:	b165      	cbz	r5, 82f6c <flash_read_unique_id+0x40>
   82f52:	a902      	add	r1, sp, #8
   82f54:	1f22      	subs	r2, r4, #4
		pul_data[ul_idx] = uid_buf[ul_idx];
   82f56:	f851 4b04 	ldr.w	r4, [r1], #4
   82f5a:	f842 4f04 	str.w	r4, [r2, #4]!
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f5e:	3301      	adds	r3, #1
   82f60:	429e      	cmp	r6, r3
   82f62:	d8f8      	bhi.n	82f56 <flash_read_unique_id+0x2a>
	}

	return FLASH_RC_OK;
}
   82f64:	b006      	add	sp, #24
   82f66:	bd70      	pop	{r4, r5, r6, pc}
		return FLASH_RC_ERROR;
   82f68:	2010      	movs	r0, #16
   82f6a:	e7fb      	b.n	82f64 <flash_read_unique_id+0x38>
	return FLASH_RC_OK;
   82f6c:	4628      	mov	r0, r5
   82f6e:	e7f9      	b.n	82f64 <flash_read_unique_id+0x38>
   82f70:	400e0800 	.word	0x400e0800
   82f74:	20000001 	.word	0x20000001

00082f78 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   82f78:	2300      	movs	r3, #0
   82f7a:	6043      	str	r3, [r0, #4]
   82f7c:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   82f7e:	6083      	str	r3, [r0, #8]
}
   82f80:	4770      	bx	lr
	...

00082f84 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   82f84:	b410      	push	{r4}
  __ASM volatile ("cpsid i");
   82f86:	b672      	cpsid	i
   82f88:	f3bf 8f5f 	dmb	sy
    // Add char to buffer
	cpu_irq_disable();
   82f8c:	4b11      	ldr	r3, [pc, #68]	; (82fd4 <add_to_circ_buf+0x50>)
   82f8e:	2400      	movs	r4, #0
   82f90:	701c      	strb	r4, [r3, #0]
    unsigned int newhead = cbuf->head;
   82f92:	6804      	ldr	r4, [r0, #0]
    newhead++;
   82f94:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   82f96:	2cc8      	cmp	r4, #200	; 0xc8
   82f98:	bf28      	it	cs
   82f9a:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   82f9c:	6843      	ldr	r3, [r0, #4]
   82f9e:	42a3      	cmp	r3, r4
   82fa0:	d10b      	bne.n	82fba <add_to_circ_buf+0x36>
    {
        if (!block)
   82fa2:	2a00      	cmp	r2, #0
   82fa4:	d1fa      	bne.n	82f9c <add_to_circ_buf+0x18>
        {
            cbuf->dropped++;
   82fa6:	6883      	ldr	r3, [r0, #8]
   82fa8:	3301      	adds	r3, #1
   82faa:	6083      	str	r3, [r0, #8]
			cpu_irq_enable();
   82fac:	4b09      	ldr	r3, [pc, #36]	; (82fd4 <add_to_circ_buf+0x50>)
   82fae:	2201      	movs	r2, #1
   82fb0:	701a      	strb	r2, [r3, #0]
   82fb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   82fb6:	b662      	cpsie	i
            return;
   82fb8:	e009      	b.n	82fce <add_to_circ_buf+0x4a>
        //TODO: Need to add processing here if you want a blocking
		//      function.
        
    }

    cbuf->buf[cbuf->head] = ch;
   82fba:	6803      	ldr	r3, [r0, #0]
   82fbc:	4403      	add	r3, r0
   82fbe:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   82fc0:	6004      	str	r4, [r0, #0]
	cpu_irq_enable();
   82fc2:	4b04      	ldr	r3, [pc, #16]	; (82fd4 <add_to_circ_buf+0x50>)
   82fc4:	2201      	movs	r2, #1
   82fc6:	701a      	strb	r2, [r3, #0]
   82fc8:	f3bf 8f5f 	dmb	sy
   82fcc:	b662      	cpsie	i
}
   82fce:	bc10      	pop	{r4}
   82fd0:	4770      	bx	lr
   82fd2:	bf00      	nop
   82fd4:	200006e6 	.word	0x200006e6

00082fd8 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   82fd8:	4602      	mov	r2, r0
  __ASM volatile ("cpsid i");
   82fda:	b672      	cpsid	i
   82fdc:	f3bf 8f5f 	dmb	sy
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
	cpu_irq_disable();
   82fe0:	4b0e      	ldr	r3, [pc, #56]	; (8301c <get_from_circ_buf+0x44>)
   82fe2:	2100      	movs	r1, #0
   82fe4:	7019      	strb	r1, [r3, #0]
    unsigned int newtail = cbuf->tail;
   82fe6:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];
   82fe8:	18c1      	adds	r1, r0, r3
   82fea:	7b08      	ldrb	r0, [r1, #12]

    if (newtail == cbuf->head) {
   82fec:	6811      	ldr	r1, [r2, #0]
   82fee:	4299      	cmp	r1, r3
   82ff0:	d00b      	beq.n	8300a <get_from_circ_buf+0x32>
		cpu_irq_enable();
        return SERIAL_ERR;
	}

    newtail++;
   82ff2:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   82ff4:	2bc8      	cmp	r3, #200	; 0xc8
   82ff6:	bf28      	it	cs
   82ff8:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   82ffa:	6053      	str	r3, [r2, #4]

	cpu_irq_enable();
   82ffc:	4b07      	ldr	r3, [pc, #28]	; (8301c <get_from_circ_buf+0x44>)
   82ffe:	2201      	movs	r2, #1
   83000:	701a      	strb	r2, [r3, #0]
   83002:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83006:	b662      	cpsie	i
    return retval;
}
   83008:	4770      	bx	lr
		cpu_irq_enable();
   8300a:	4b04      	ldr	r3, [pc, #16]	; (8301c <get_from_circ_buf+0x44>)
   8300c:	2201      	movs	r2, #1
   8300e:	701a      	strb	r2, [r3, #0]
   83010:	f3bf 8f5f 	dmb	sy
   83014:	b662      	cpsie	i
        return SERIAL_ERR;
   83016:	20ff      	movs	r0, #255	; 0xff
   83018:	4770      	bx	lr
   8301a:	bf00      	nop
   8301c:	200006e6 	.word	0x200006e6

00083020 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   83020:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   83022:	6840      	ldr	r0, [r0, #4]
}
   83024:	1ac0      	subs	r0, r0, r3
   83026:	bf18      	it	ne
   83028:	2001      	movne	r0, #1
   8302a:	4770      	bx	lr

0008302c <circ_buf_count>:
  __ASM volatile ("cpsid i");
   8302c:	b672      	cpsid	i
   8302e:	f3bf 8f5f 	dmb	sy
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

	cpu_irq_disable();
   83032:	4b07      	ldr	r3, [pc, #28]	; (83050 <circ_buf_count+0x24>)
   83034:	2200      	movs	r2, #0
   83036:	701a      	strb	r2, [r3, #0]
    count = cbuf->head;
   83038:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8303a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8303c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   8303e:	bf48      	it	mi
   83040:	30c8      	addmi	r0, #200	; 0xc8
		
	cpu_irq_enable();
   83042:	4b03      	ldr	r3, [pc, #12]	; (83050 <circ_buf_count+0x24>)
   83044:	2201      	movs	r2, #1
   83046:	701a      	strb	r2, [r3, #0]
   83048:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8304c:	b662      	cpsie	i
    return (unsigned int)count;
}
   8304e:	4770      	bx	lr
   83050:	200006e6 	.word	0x200006e6

00083054 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   83054:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   83056:	2006      	movs	r0, #6
   83058:	4c02      	ldr	r4, [pc, #8]	; (83064 <ui_init+0x10>)
   8305a:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   8305c:	2007      	movs	r0, #7
   8305e:	47a0      	blx	r4
}
   83060:	bd10      	pop	{r4, pc}
   83062:	bf00      	nop
   83064:	00083be9 	.word	0x00083be9

00083068 <ui_powerdown>:

void ui_powerdown(void)
{
   83068:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   8306a:	2006      	movs	r0, #6
   8306c:	4c03      	ldr	r4, [pc, #12]	; (8307c <ui_powerdown+0x14>)
   8306e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   83070:	2007      	movs	r0, #7
   83072:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   83074:	201d      	movs	r0, #29
   83076:	4b02      	ldr	r3, [pc, #8]	; (83080 <ui_powerdown+0x18>)
   83078:	4798      	blx	r3
		
}
   8307a:	bd10      	pop	{r4, pc}
   8307c:	00083be9 	.word	0x00083be9
   83080:	00083d3f 	.word	0x00083d3f

00083084 <ui_wakeup>:

void ui_wakeup(void)
{
   83084:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   83086:	2006      	movs	r0, #6
   83088:	4b02      	ldr	r3, [pc, #8]	; (83094 <ui_wakeup+0x10>)
   8308a:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   8308c:	201d      	movs	r0, #29
   8308e:	4b02      	ldr	r3, [pc, #8]	; (83098 <ui_wakeup+0x14>)
   83090:	4798      	blx	r3
}
   83092:	bd08      	pop	{r3, pc}
   83094:	00083c0d 	.word	0x00083c0d
   83098:	00083d25 	.word	0x00083d25

0008309c <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   8309c:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   8309e:	4b0b      	ldr	r3, [pc, #44]	; (830cc <ui_process+0x30>)
   830a0:	fba3 2300 	umull	r2, r3, r3, r0
   830a4:	099b      	lsrs	r3, r3, #6
   830a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   830aa:	fb02 0013 	mls	r0, r2, r3, r0
   830ae:	b280      	uxth	r0, r0
   830b0:	b118      	cbz	r0, 830ba <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   830b2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   830b6:	d004      	beq.n	830c2 <ui_process+0x26>
		LED_Off(LED0_GPIO);
	}
}
   830b8:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   830ba:	2006      	movs	r0, #6
   830bc:	4b04      	ldr	r3, [pc, #16]	; (830d0 <ui_process+0x34>)
   830be:	4798      	blx	r3
	if ((framenumber % 1000) == 500) {
   830c0:	e7fa      	b.n	830b8 <ui_process+0x1c>
		LED_Off(LED0_GPIO);
   830c2:	2006      	movs	r0, #6
   830c4:	4b03      	ldr	r3, [pc, #12]	; (830d4 <ui_process+0x38>)
   830c6:	4798      	blx	r3
}
   830c8:	e7f6      	b.n	830b8 <ui_process+0x1c>
   830ca:	bf00      	nop
   830cc:	10624dd3 	.word	0x10624dd3
   830d0:	00083c0d 	.word	0x00083c0d
   830d4:	00083be9 	.word	0x00083be9

000830d8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   830d8:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   830da:	203e      	movs	r0, #62	; 0x3e
   830dc:	4b07      	ldr	r3, [pc, #28]	; (830fc <sysclk_enable_usb+0x24>)
   830de:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   830e0:	4c07      	ldr	r4, [pc, #28]	; (83100 <sysclk_enable_usb+0x28>)
   830e2:	47a0      	blx	r4
   830e4:	2800      	cmp	r0, #0
   830e6:	d0fc      	beq.n	830e2 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   830e8:	4b06      	ldr	r3, [pc, #24]	; (83104 <sysclk_enable_usb+0x2c>)
   830ea:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   830ee:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   830f0:	4c05      	ldr	r4, [pc, #20]	; (83108 <sysclk_enable_usb+0x30>)
   830f2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   830f4:	2800      	cmp	r0, #0
   830f6:	d0fc      	beq.n	830f2 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   830f8:	bd10      	pop	{r4, pc}
   830fa:	bf00      	nop
   830fc:	00083ffd 	.word	0x00083ffd
   83100:	00084025 	.word	0x00084025
   83104:	400e0400 	.word	0x400e0400
   83108:	00084085 	.word	0x00084085

0008310c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8310c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8310e:	4812      	ldr	r0, [pc, #72]	; (83158 <sysclk_init+0x4c>)
   83110:	4b12      	ldr	r3, [pc, #72]	; (8315c <sysclk_init+0x50>)
   83112:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83114:	203e      	movs	r0, #62	; 0x3e
   83116:	4b12      	ldr	r3, [pc, #72]	; (83160 <sysclk_init+0x54>)
   83118:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8311a:	4c12      	ldr	r4, [pc, #72]	; (83164 <sysclk_init+0x58>)
   8311c:	47a0      	blx	r4
   8311e:	2800      	cmp	r0, #0
   83120:	d0fc      	beq.n	8311c <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83122:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83126:	4b10      	ldr	r3, [pc, #64]	; (83168 <sysclk_init+0x5c>)
   83128:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8312a:	4c10      	ldr	r4, [pc, #64]	; (8316c <sysclk_init+0x60>)
   8312c:	47a0      	blx	r4
   8312e:	2800      	cmp	r0, #0
   83130:	d0fc      	beq.n	8312c <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   83132:	4b0f      	ldr	r3, [pc, #60]	; (83170 <sysclk_init+0x64>)
   83134:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83136:	4b0f      	ldr	r3, [pc, #60]	; (83174 <sysclk_init+0x68>)
   83138:	4a0f      	ldr	r2, [pc, #60]	; (83178 <sysclk_init+0x6c>)
   8313a:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   8313c:	4c0f      	ldr	r4, [pc, #60]	; (8317c <sysclk_init+0x70>)
   8313e:	47a0      	blx	r4
   83140:	2800      	cmp	r0, #0
   83142:	d0fc      	beq.n	8313e <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83144:	2010      	movs	r0, #16
   83146:	4b0e      	ldr	r3, [pc, #56]	; (83180 <sysclk_init+0x74>)
   83148:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8314a:	4b0e      	ldr	r3, [pc, #56]	; (83184 <sysclk_init+0x78>)
   8314c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8314e:	4802      	ldr	r0, [pc, #8]	; (83158 <sysclk_init+0x4c>)
   83150:	4b02      	ldr	r3, [pc, #8]	; (8315c <sysclk_init+0x50>)
   83152:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83154:	bd10      	pop	{r4, pc}
   83156:	bf00      	nop
   83158:	05b8d800 	.word	0x05b8d800
   8315c:	20000139 	.word	0x20000139
   83160:	00083ffd 	.word	0x00083ffd
   83164:	00084025 	.word	0x00084025
   83168:	00084045 	.word	0x00084045
   8316c:	00084035 	.word	0x00084035
   83170:	00084065 	.word	0x00084065
   83174:	400e0400 	.word	0x400e0400
   83178:	200f3f01 	.word	0x200f3f01
   8317c:	00084075 	.word	0x00084075
   83180:	00083f9d 	.word	0x00083f9d
   83184:	000858b9 	.word	0x000858b9

00083188 <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   83188:	4b01      	ldr	r3, [pc, #4]	; (83190 <udi_vendor_getsetting+0x8>)
   8318a:	7818      	ldrb	r0, [r3, #0]
   8318c:	4770      	bx	lr
   8318e:	bf00      	nop
   83190:	20001df2 	.word	0x20001df2

00083194 <udi_vendor_enable>:
{
   83194:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83196:	4b05      	ldr	r3, [pc, #20]	; (831ac <udi_vendor_enable+0x18>)
   83198:	4798      	blx	r3
   8319a:	78c3      	ldrb	r3, [r0, #3]
   8319c:	4a04      	ldr	r2, [pc, #16]	; (831b0 <udi_vendor_enable+0x1c>)
   8319e:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   831a0:	b10b      	cbz	r3, 831a6 <udi_vendor_enable+0x12>
	return true;
   831a2:	2001      	movs	r0, #1
}
   831a4:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   831a6:	4b03      	ldr	r3, [pc, #12]	; (831b4 <udi_vendor_enable+0x20>)
   831a8:	4798      	blx	r3
   831aa:	e7fb      	b.n	831a4 <udi_vendor_enable+0x10>
   831ac:	000833c9 	.word	0x000833c9
   831b0:	20001df2 	.word	0x20001df2
   831b4:	000812d5 	.word	0x000812d5

000831b8 <udi_vendor_disable>:
{
   831b8:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   831ba:	4b03      	ldr	r3, [pc, #12]	; (831c8 <udi_vendor_disable+0x10>)
   831bc:	781b      	ldrb	r3, [r3, #0]
   831be:	b103      	cbz	r3, 831c2 <udi_vendor_disable+0xa>
}
   831c0:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   831c2:	4b02      	ldr	r3, [pc, #8]	; (831cc <udi_vendor_disable+0x14>)
   831c4:	4798      	blx	r3
}
   831c6:	e7fb      	b.n	831c0 <udi_vendor_disable+0x8>
   831c8:	20001df2 	.word	0x20001df2
   831cc:	000812fd 	.word	0x000812fd

000831d0 <udi_vendor_setup>:
{
   831d0:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   831d2:	4a0c      	ldr	r2, [pc, #48]	; (83204 <udi_vendor_setup+0x34>)
   831d4:	7813      	ldrb	r3, [r2, #0]
   831d6:	f992 2000 	ldrsb.w	r2, [r2]
   831da:	2a00      	cmp	r2, #0
   831dc:	db06      	blt.n	831ec <udi_vendor_setup+0x1c>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   831de:	f003 0360 	and.w	r3, r3, #96	; 0x60
   831e2:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   831e4:	bf18      	it	ne
   831e6:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   831e8:	d009      	beq.n	831fe <udi_vendor_setup+0x2e>
}
   831ea:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   831ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
   831f0:	2b40      	cmp	r3, #64	; 0x40
	return false; // Not supported request
   831f2:	bf18      	it	ne
   831f4:	2000      	movne	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   831f6:	d1f8      	bne.n	831ea <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   831f8:	4b03      	ldr	r3, [pc, #12]	; (83208 <udi_vendor_setup+0x38>)
   831fa:	4798      	blx	r3
   831fc:	e7f5      	b.n	831ea <udi_vendor_setup+0x1a>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   831fe:	4b03      	ldr	r3, [pc, #12]	; (8320c <udi_vendor_setup+0x3c>)
   83200:	4798      	blx	r3
   83202:	e7f2      	b.n	831ea <udi_vendor_setup+0x1a>
   83204:	20002b90 	.word	0x20002b90
   83208:	00081359 	.word	0x00081359
   8320c:	00081309 	.word	0x00081309

00083210 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83210:	b510      	push	{r4, lr}
   83212:	b082      	sub	sp, #8
   83214:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83216:	9200      	str	r2, [sp, #0]
   83218:	4602      	mov	r2, r0
   8321a:	2100      	movs	r1, #0
   8321c:	2081      	movs	r0, #129	; 0x81
   8321e:	4c02      	ldr	r4, [pc, #8]	; (83228 <udi_vendor_bulk_in_run+0x18>)
   83220:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   83222:	b002      	add	sp, #8
   83224:	bd10      	pop	{r4, pc}
   83226:	bf00      	nop
   83228:	00085121 	.word	0x00085121

0008322c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8322c:	b510      	push	{r4, lr}
   8322e:	b082      	sub	sp, #8
   83230:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83232:	9200      	str	r2, [sp, #0]
   83234:	4602      	mov	r2, r0
   83236:	2100      	movs	r1, #0
   83238:	2002      	movs	r0, #2
   8323a:	4c02      	ldr	r4, [pc, #8]	; (83244 <udi_vendor_bulk_out_run+0x18>)
   8323c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8323e:	b002      	add	sp, #8
   83240:	bd10      	pop	{r4, pc}
   83242:	bf00      	nop
   83244:	00085121 	.word	0x00085121

00083248 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83248:	4b0b      	ldr	r3, [pc, #44]	; (83278 <udc_next_desc_in_iface+0x30>)
   8324a:	681b      	ldr	r3, [r3, #0]
   8324c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8324e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   83250:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   83252:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83254:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   83256:	4290      	cmp	r0, r2
   83258:	d20a      	bcs.n	83270 <udc_next_desc_in_iface+0x28>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8325a:	7843      	ldrb	r3, [r0, #1]
   8325c:	2b04      	cmp	r3, #4
   8325e:	d009      	beq.n	83274 <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   83260:	428b      	cmp	r3, r1
   83262:	d008      	beq.n	83276 <udc_next_desc_in_iface+0x2e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   83264:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83266:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   83268:	4290      	cmp	r0, r2
   8326a:	d3f6      	bcc.n	8325a <udc_next_desc_in_iface+0x12>
	}
	return NULL; // No specific descriptor found
   8326c:	2000      	movs	r0, #0
   8326e:	4770      	bx	lr
   83270:	2000      	movs	r0, #0
   83272:	4770      	bx	lr
   83274:	2000      	movs	r0, #0
}
   83276:	4770      	bx	lr
   83278:	20001dfc 	.word	0x20001dfc

0008327c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8327c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8327e:	4b03      	ldr	r3, [pc, #12]	; (8328c <udc_valid_address+0x10>)
   83280:	7898      	ldrb	r0, [r3, #2]
   83282:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   83286:	4b02      	ldr	r3, [pc, #8]	; (83290 <udc_valid_address+0x14>)
   83288:	4798      	blx	r3
}
   8328a:	bd08      	pop	{r3, pc}
   8328c:	20002b90 	.word	0x20002b90
   83290:	00084e75 	.word	0x00084e75

00083294 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   83294:	4b18      	ldr	r3, [pc, #96]	; (832f8 <udc_update_iface_desc+0x64>)
   83296:	781b      	ldrb	r3, [r3, #0]
   83298:	b33b      	cbz	r3, 832ea <udc_update_iface_desc+0x56>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8329a:	4b18      	ldr	r3, [pc, #96]	; (832fc <udc_update_iface_desc+0x68>)
   8329c:	681b      	ldr	r3, [r3, #0]
   8329e:	681b      	ldr	r3, [r3, #0]
   832a0:	791a      	ldrb	r2, [r3, #4]
   832a2:	4282      	cmp	r2, r0
   832a4:	d923      	bls.n	832ee <udc_update_iface_desc+0x5a>
{
   832a6:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   832a8:	4a15      	ldr	r2, [pc, #84]	; (83300 <udc_update_iface_desc+0x6c>)
   832aa:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   832ac:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   832ae:	441c      	add	r4, r3
	while (ptr_end_desc >
   832b0:	42a3      	cmp	r3, r4
   832b2:	d21e      	bcs.n	832f2 <udc_update_iface_desc+0x5e>
   832b4:	2500      	movs	r5, #0
   832b6:	2601      	movs	r6, #1
   832b8:	e004      	b.n	832c4 <udc_update_iface_desc+0x30>
				udc_ptr_iface->bLength);
   832ba:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   832bc:	4413      	add	r3, r2
	while (ptr_end_desc >
   832be:	4635      	mov	r5, r6
   832c0:	42a3      	cmp	r3, r4
   832c2:	d20d      	bcs.n	832e0 <udc_update_iface_desc+0x4c>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   832c4:	785a      	ldrb	r2, [r3, #1]
   832c6:	2a04      	cmp	r2, #4
   832c8:	d1f7      	bne.n	832ba <udc_update_iface_desc+0x26>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   832ca:	789a      	ldrb	r2, [r3, #2]
   832cc:	4282      	cmp	r2, r0
   832ce:	d1f4      	bne.n	832ba <udc_update_iface_desc+0x26>
   832d0:	78da      	ldrb	r2, [r3, #3]
   832d2:	428a      	cmp	r2, r1
   832d4:	d1f1      	bne.n	832ba <udc_update_iface_desc+0x26>
   832d6:	b10d      	cbz	r5, 832dc <udc_update_iface_desc+0x48>
   832d8:	4a09      	ldr	r2, [pc, #36]	; (83300 <udc_update_iface_desc+0x6c>)
   832da:	6013      	str	r3, [r2, #0]
				return true; // Interface found
   832dc:	2001      	movs	r0, #1
   832de:	e002      	b.n	832e6 <udc_update_iface_desc+0x52>
   832e0:	4a07      	ldr	r2, [pc, #28]	; (83300 <udc_update_iface_desc+0x6c>)
   832e2:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   832e4:	2000      	movs	r0, #0
}
   832e6:	bc70      	pop	{r4, r5, r6}
   832e8:	4770      	bx	lr
		return false;
   832ea:	2000      	movs	r0, #0
   832ec:	4770      	bx	lr
		return false;
   832ee:	2000      	movs	r0, #0
}
   832f0:	4770      	bx	lr
	return false; // Interface not found
   832f2:	2000      	movs	r0, #0
   832f4:	e7f7      	b.n	832e6 <udc_update_iface_desc+0x52>
   832f6:	bf00      	nop
   832f8:	20001df9 	.word	0x20001df9
   832fc:	20001dfc 	.word	0x20001dfc
   83300:	20001e00 	.word	0x20001e00

00083304 <udc_iface_disable>:
{
   83304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83308:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   8330a:	2100      	movs	r1, #0
   8330c:	4b12      	ldr	r3, [pc, #72]	; (83358 <udc_iface_disable+0x54>)
   8330e:	4798      	blx	r3
   83310:	4680      	mov	r8, r0
   83312:	b1f0      	cbz	r0, 83352 <udc_iface_disable+0x4e>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83314:	4b11      	ldr	r3, [pc, #68]	; (8335c <udc_iface_disable+0x58>)
   83316:	681b      	ldr	r3, [r3, #0]
   83318:	685b      	ldr	r3, [r3, #4]
   8331a:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8331e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   83322:	4798      	blx	r3
   83324:	4601      	mov	r1, r0
   83326:	4620      	mov	r0, r4
   83328:	4b0b      	ldr	r3, [pc, #44]	; (83358 <udc_iface_disable+0x54>)
   8332a:	4798      	blx	r3
   8332c:	4680      	mov	r8, r0
   8332e:	b180      	cbz	r0, 83352 <udc_iface_disable+0x4e>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83330:	4b0b      	ldr	r3, [pc, #44]	; (83360 <udc_iface_disable+0x5c>)
   83332:	681c      	ldr	r4, [r3, #0]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83334:	2605      	movs	r6, #5
   83336:	4d0b      	ldr	r5, [pc, #44]	; (83364 <udc_iface_disable+0x60>)
			udd_ep_free(ep_desc->bEndpointAddress);
   83338:	4f0b      	ldr	r7, [pc, #44]	; (83368 <udc_iface_disable+0x64>)
   8333a:	e001      	b.n	83340 <udc_iface_disable+0x3c>
   8333c:	7880      	ldrb	r0, [r0, #2]
   8333e:	47b8      	blx	r7
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83340:	4631      	mov	r1, r6
   83342:	4620      	mov	r0, r4
   83344:	47a8      	blx	r5
			if (NULL == ep_desc) {
   83346:	4604      	mov	r4, r0
   83348:	2800      	cmp	r0, #0
   8334a:	d1f7      	bne.n	8333c <udc_iface_disable+0x38>
	udi_api->disable();
   8334c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   83350:	4798      	blx	r3
}
   83352:	4640      	mov	r0, r8
   83354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83358:	00083295 	.word	0x00083295
   8335c:	20001dfc 	.word	0x20001dfc
   83360:	20001e00 	.word	0x20001e00
   83364:	00083249 	.word	0x00083249
   83368:	00084ed9 	.word	0x00084ed9

0008336c <udc_iface_enable>:
{
   8336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83370:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83372:	4b10      	ldr	r3, [pc, #64]	; (833b4 <udc_iface_enable+0x48>)
   83374:	4798      	blx	r3
   83376:	4603      	mov	r3, r0
   83378:	b1c8      	cbz	r0, 833ae <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8337a:	4b0f      	ldr	r3, [pc, #60]	; (833b8 <udc_iface_enable+0x4c>)
   8337c:	681c      	ldr	r4, [r3, #0]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8337e:	2605      	movs	r6, #5
   83380:	4d0e      	ldr	r5, [pc, #56]	; (833bc <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83382:	4f0f      	ldr	r7, [pc, #60]	; (833c0 <udc_iface_enable+0x54>)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   83384:	4631      	mov	r1, r6
   83386:	4620      	mov	r0, r4
   83388:	47a8      	blx	r5
		if (NULL == ep_desc)
   8338a:	4604      	mov	r4, r0
   8338c:	b138      	cbz	r0, 8339e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8338e:	8882      	ldrh	r2, [r0, #4]
   83390:	78c1      	ldrb	r1, [r0, #3]
   83392:	7880      	ldrb	r0, [r0, #2]
   83394:	47b8      	blx	r7
   83396:	4603      	mov	r3, r0
   83398:	2800      	cmp	r0, #0
   8339a:	d1f3      	bne.n	83384 <udc_iface_enable+0x18>
   8339c:	e007      	b.n	833ae <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8339e:	4b09      	ldr	r3, [pc, #36]	; (833c4 <udc_iface_enable+0x58>)
   833a0:	681b      	ldr	r3, [r3, #0]
   833a2:	685b      	ldr	r3, [r3, #4]
   833a4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   833a8:	681b      	ldr	r3, [r3, #0]
   833aa:	4798      	blx	r3
   833ac:	4603      	mov	r3, r0
}
   833ae:	4618      	mov	r0, r3
   833b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   833b4:	00083295 	.word	0x00083295
   833b8:	20001e00 	.word	0x20001e00
   833bc:	00083249 	.word	0x00083249
   833c0:	0008521d 	.word	0x0008521d
   833c4:	20001dfc 	.word	0x20001dfc

000833c8 <udc_get_interface_desc>:
}
   833c8:	4b01      	ldr	r3, [pc, #4]	; (833d0 <udc_get_interface_desc+0x8>)
   833ca:	6818      	ldr	r0, [r3, #0]
   833cc:	4770      	bx	lr
   833ce:	bf00      	nop
   833d0:	20001e00 	.word	0x20001e00

000833d4 <udc_start>:
{
   833d4:	b508      	push	{r3, lr}
	udd_enable();
   833d6:	4b01      	ldr	r3, [pc, #4]	; (833dc <udc_start+0x8>)
   833d8:	4798      	blx	r3
}
   833da:	bd08      	pop	{r3, pc}
   833dc:	00084d59 	.word	0x00084d59

000833e0 <udc_reset>:
{
   833e0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   833e2:	4b0d      	ldr	r3, [pc, #52]	; (83418 <udc_reset+0x38>)
   833e4:	781b      	ldrb	r3, [r3, #0]
   833e6:	b183      	cbz	r3, 8340a <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   833e8:	4b0c      	ldr	r3, [pc, #48]	; (8341c <udc_reset+0x3c>)
   833ea:	681b      	ldr	r3, [r3, #0]
   833ec:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   833ee:	791b      	ldrb	r3, [r3, #4]
   833f0:	b15b      	cbz	r3, 8340a <udc_reset+0x2a>
   833f2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   833f4:	4e0a      	ldr	r6, [pc, #40]	; (83420 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   833f6:	4d09      	ldr	r5, [pc, #36]	; (8341c <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   833f8:	b2e0      	uxtb	r0, r4
   833fa:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   833fc:	3401      	adds	r4, #1
   833fe:	682b      	ldr	r3, [r5, #0]
   83400:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   83402:	791a      	ldrb	r2, [r3, #4]
   83404:	b2e3      	uxtb	r3, r4
   83406:	429a      	cmp	r2, r3
   83408:	d8f6      	bhi.n	833f8 <udc_reset+0x18>
	udc_num_configuration = 0;
   8340a:	2300      	movs	r3, #0
   8340c:	4a02      	ldr	r2, [pc, #8]	; (83418 <udc_reset+0x38>)
   8340e:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   83410:	4a04      	ldr	r2, [pc, #16]	; (83424 <udc_reset+0x44>)
   83412:	8013      	strh	r3, [r2, #0]
}
   83414:	bd70      	pop	{r4, r5, r6, pc}
   83416:	bf00      	nop
   83418:	20001df9 	.word	0x20001df9
   8341c:	20001dfc 	.word	0x20001dfc
   83420:	00083305 	.word	0x00083305
   83424:	20001df4 	.word	0x20001df4

00083428 <udc_sof_notify>:
{
   83428:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   8342a:	4b0e      	ldr	r3, [pc, #56]	; (83464 <udc_sof_notify+0x3c>)
   8342c:	781b      	ldrb	r3, [r3, #0]
   8342e:	b1bb      	cbz	r3, 83460 <udc_sof_notify+0x38>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83430:	4b0d      	ldr	r3, [pc, #52]	; (83468 <udc_sof_notify+0x40>)
   83432:	681a      	ldr	r2, [r3, #0]
   83434:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83436:	791b      	ldrb	r3, [r3, #4]
   83438:	b193      	cbz	r3, 83460 <udc_sof_notify+0x38>
   8343a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8343c:	4d0a      	ldr	r5, [pc, #40]	; (83468 <udc_sof_notify+0x40>)
   8343e:	e006      	b.n	8344e <udc_sof_notify+0x26>
   83440:	682a      	ldr	r2, [r5, #0]
   83442:	3401      	adds	r4, #1
   83444:	6813      	ldr	r3, [r2, #0]
		for (iface_num = 0;
   83446:	7919      	ldrb	r1, [r3, #4]
   83448:	b2e3      	uxtb	r3, r4
   8344a:	4299      	cmp	r1, r3
   8344c:	d908      	bls.n	83460 <udc_sof_notify+0x38>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8344e:	b2e3      	uxtb	r3, r4
   83450:	6852      	ldr	r2, [r2, #4]
   83452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   83456:	691b      	ldr	r3, [r3, #16]
   83458:	2b00      	cmp	r3, #0
   8345a:	d0f1      	beq.n	83440 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   8345c:	4798      	blx	r3
   8345e:	e7ef      	b.n	83440 <udc_sof_notify+0x18>
}
   83460:	bd38      	pop	{r3, r4, r5, pc}
   83462:	bf00      	nop
   83464:	20001df9 	.word	0x20001df9
   83468:	20001dfc 	.word	0x20001dfc

0008346c <udc_process_setup>:
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
static uint8_t null_mem[64] = {0};
bool udc_process_setup(void)
{
   8346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   83470:	4b91      	ldr	r3, [pc, #580]	; (836b8 <udc_process_setup+0x24c>)
   83472:	2200      	movs	r2, #0
   83474:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   83476:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83478:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8347a:	881b      	ldrh	r3, [r3, #0]
   8347c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   83480:	d01b      	beq.n	834ba <udc_process_setup+0x4e>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
		return true;
	}

	if (Udd_setup_is_in()) {
   83482:	4b8d      	ldr	r3, [pc, #564]	; (836b8 <udc_process_setup+0x24c>)
   83484:	781a      	ldrb	r2, [r3, #0]
   83486:	f993 3000 	ldrsb.w	r3, [r3]
   8348a:	2b00      	cmp	r3, #0
   8348c:	db1b      	blt.n	834c6 <udc_process_setup+0x5a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8348e:	f012 0f60 	tst.w	r2, #96	; 0x60
   83492:	f000 8147 	beq.w	83724 <udc_process_setup+0x2b8>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   83496:	4b88      	ldr	r3, [pc, #544]	; (836b8 <udc_process_setup+0x24c>)
   83498:	781b      	ldrb	r3, [r3, #0]
   8349a:	f003 031f 	and.w	r3, r3, #31
   8349e:	2b01      	cmp	r3, #1
   834a0:	f000 8245 	beq.w	8392e <udc_process_setup+0x4c2>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   834a4:	4b84      	ldr	r3, [pc, #528]	; (836b8 <udc_process_setup+0x24c>)
   834a6:	781b      	ldrb	r3, [r3, #0]
   834a8:	f003 031f 	and.w	r3, r3, #31
   834ac:	2b02      	cmp	r3, #2
   834ae:	f000 8291 	beq.w	839d4 <udc_process_setup+0x568>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   834b2:	2300      	movs	r3, #0
#endif
}
   834b4:	4618      	mov	r0, r3
   834b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   834ba:	21ae      	movs	r1, #174	; 0xae
   834bc:	487f      	ldr	r0, [pc, #508]	; (836bc <udc_process_setup+0x250>)
   834be:	4b80      	ldr	r3, [pc, #512]	; (836c0 <udc_process_setup+0x254>)
   834c0:	4798      	blx	r3
		return true;
   834c2:	2301      	movs	r3, #1
   834c4:	e7f6      	b.n	834b4 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   834c6:	4b7c      	ldr	r3, [pc, #496]	; (836b8 <udc_process_setup+0x24c>)
   834c8:	88db      	ldrh	r3, [r3, #6]
   834ca:	2b00      	cmp	r3, #0
   834cc:	f000 82ae 	beq.w	83a2c <udc_process_setup+0x5c0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   834d0:	f012 0f60 	tst.w	r2, #96	; 0x60
   834d4:	d1df      	bne.n	83496 <udc_process_setup+0x2a>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   834d6:	f012 021f 	ands.w	r2, r2, #31
   834da:	f040 80c1 	bne.w	83660 <udc_process_setup+0x1f4>
			switch (udd_g_ctrlreq.req.bRequest) {
   834de:	4a76      	ldr	r2, [pc, #472]	; (836b8 <udc_process_setup+0x24c>)
   834e0:	7852      	ldrb	r2, [r2, #1]
   834e2:	2a06      	cmp	r2, #6
   834e4:	d00b      	beq.n	834fe <udc_process_setup+0x92>
   834e6:	2a08      	cmp	r2, #8
   834e8:	f000 80b2 	beq.w	83650 <udc_process_setup+0x1e4>
   834ec:	2a00      	cmp	r2, #0
   834ee:	d1d2      	bne.n	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   834f0:	2b02      	cmp	r3, #2
   834f2:	d1d0      	bne.n	83496 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   834f4:	2102      	movs	r1, #2
   834f6:	4873      	ldr	r0, [pc, #460]	; (836c4 <udc_process_setup+0x258>)
   834f8:	4b71      	ldr	r3, [pc, #452]	; (836c0 <udc_process_setup+0x254>)
   834fa:	4798      	blx	r3
	return true;
   834fc:	e12f      	b.n	8375e <udc_process_setup+0x2f2>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   834fe:	4b6e      	ldr	r3, [pc, #440]	; (836b8 <udc_process_setup+0x24c>)
   83500:	885a      	ldrh	r2, [r3, #2]
   83502:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83504:	0a13      	lsrs	r3, r2, #8
   83506:	3b01      	subs	r3, #1
   83508:	2b0e      	cmp	r3, #14
   8350a:	f200 8209 	bhi.w	83920 <udc_process_setup+0x4b4>
   8350e:	e8df f013 	tbh	[pc, r3, lsl #1]
   83512:	000f      	.short	0x000f
   83514:	007a0023 	.word	0x007a0023
   83518:	02070207 	.word	0x02070207
   8351c:	00520044 	.word	0x00520044
   83520:	02070207 	.word	0x02070207
   83524:	02070207 	.word	0x02070207
   83528:	02070207 	.word	0x02070207
   8352c:	00750207 	.word	0x00750207
		if (!udd_is_high_speed()) {
   83530:	4b65      	ldr	r3, [pc, #404]	; (836c8 <udc_process_setup+0x25c>)
   83532:	4798      	blx	r3
   83534:	b928      	cbnz	r0, 83542 <udc_process_setup+0xd6>
				(uint8_t *) udc_config.confdev_hs,
   83536:	4b65      	ldr	r3, [pc, #404]	; (836cc <udc_process_setup+0x260>)
   83538:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   8353a:	7801      	ldrb	r1, [r0, #0]
   8353c:	4b60      	ldr	r3, [pc, #384]	; (836c0 <udc_process_setup+0x254>)
   8353e:	4798      	blx	r3
   83540:	e030      	b.n	835a4 <udc_process_setup+0x138>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   83542:	4b62      	ldr	r3, [pc, #392]	; (836cc <udc_process_setup+0x260>)
   83544:	681a      	ldr	r2, [r3, #0]
   83546:	2110      	movs	r1, #16
   83548:	7091      	strb	r1, [r2, #2]
   8354a:	2102      	movs	r1, #2
   8354c:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8354e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   83550:	7801      	ldrb	r1, [r0, #0]
   83552:	4b5b      	ldr	r3, [pc, #364]	; (836c0 <udc_process_setup+0x254>)
   83554:	4798      	blx	r3
   83556:	e025      	b.n	835a4 <udc_process_setup+0x138>
		if (udd_is_high_speed()) {
   83558:	4b5b      	ldr	r3, [pc, #364]	; (836c8 <udc_process_setup+0x25c>)
   8355a:	4798      	blx	r3
   8355c:	b180      	cbz	r0, 83580 <udc_process_setup+0x114>
			if (conf_num >= udc_config.confdev_hs->
   8355e:	4b5b      	ldr	r3, [pc, #364]	; (836cc <udc_process_setup+0x260>)
   83560:	689b      	ldr	r3, [r3, #8]
   83562:	7c5b      	ldrb	r3, [r3, #17]
   83564:	42a3      	cmp	r3, r4
   83566:	d996      	bls.n	83496 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83568:	4b58      	ldr	r3, [pc, #352]	; (836cc <udc_process_setup+0x260>)
   8356a:	691b      	ldr	r3, [r3, #16]
   8356c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83570:	8841      	ldrh	r1, [r0, #2]
   83572:	4b53      	ldr	r3, [pc, #332]	; (836c0 <udc_process_setup+0x254>)
   83574:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83576:	4b50      	ldr	r3, [pc, #320]	; (836b8 <udc_process_setup+0x24c>)
   83578:	689b      	ldr	r3, [r3, #8]
   8357a:	2202      	movs	r2, #2
   8357c:	705a      	strb	r2, [r3, #1]
		break;
   8357e:	e011      	b.n	835a4 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   83580:	4b52      	ldr	r3, [pc, #328]	; (836cc <udc_process_setup+0x260>)
   83582:	681b      	ldr	r3, [r3, #0]
   83584:	7c5b      	ldrb	r3, [r3, #17]
   83586:	42a3      	cmp	r3, r4
   83588:	d985      	bls.n	83496 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8358a:	4b50      	ldr	r3, [pc, #320]	; (836cc <udc_process_setup+0x260>)
   8358c:	685b      	ldr	r3, [r3, #4]
   8358e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83592:	8841      	ldrh	r1, [r0, #2]
   83594:	4b4a      	ldr	r3, [pc, #296]	; (836c0 <udc_process_setup+0x254>)
   83596:	4798      	blx	r3
   83598:	e7ed      	b.n	83576 <udc_process_setup+0x10a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8359a:	4b4c      	ldr	r3, [pc, #304]	; (836cc <udc_process_setup+0x260>)
   8359c:	68d8      	ldr	r0, [r3, #12]
   8359e:	7801      	ldrb	r1, [r0, #0]
   835a0:	4b47      	ldr	r3, [pc, #284]	; (836c0 <udc_process_setup+0x254>)
   835a2:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   835a4:	4b44      	ldr	r3, [pc, #272]	; (836b8 <udc_process_setup+0x24c>)
   835a6:	88da      	ldrh	r2, [r3, #6]
   835a8:	899b      	ldrh	r3, [r3, #12]
   835aa:	4293      	cmp	r3, r2
   835ac:	f240 80d7 	bls.w	8375e <udc_process_setup+0x2f2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   835b0:	4b41      	ldr	r3, [pc, #260]	; (836b8 <udc_process_setup+0x24c>)
   835b2:	819a      	strh	r2, [r3, #12]
   835b4:	e0d3      	b.n	8375e <udc_process_setup+0x2f2>
		if (!udd_is_high_speed()) {
   835b6:	4b44      	ldr	r3, [pc, #272]	; (836c8 <udc_process_setup+0x25c>)
   835b8:	4798      	blx	r3
   835ba:	b988      	cbnz	r0, 835e0 <udc_process_setup+0x174>
			if (conf_num >= udc_config.confdev_hs->
   835bc:	4b43      	ldr	r3, [pc, #268]	; (836cc <udc_process_setup+0x260>)
   835be:	689b      	ldr	r3, [r3, #8]
   835c0:	7c5b      	ldrb	r3, [r3, #17]
   835c2:	42a3      	cmp	r3, r4
   835c4:	f67f af67 	bls.w	83496 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   835c8:	4b40      	ldr	r3, [pc, #256]	; (836cc <udc_process_setup+0x260>)
   835ca:	691b      	ldr	r3, [r3, #16]
   835cc:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   835d0:	8841      	ldrh	r1, [r0, #2]
   835d2:	4b3b      	ldr	r3, [pc, #236]	; (836c0 <udc_process_setup+0x254>)
   835d4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   835d6:	4b38      	ldr	r3, [pc, #224]	; (836b8 <udc_process_setup+0x24c>)
   835d8:	689b      	ldr	r3, [r3, #8]
   835da:	2207      	movs	r2, #7
   835dc:	705a      	strb	r2, [r3, #1]
		break;
   835de:	e7e1      	b.n	835a4 <udc_process_setup+0x138>
			if (conf_num >= udc_config.confdev_lsfs->
   835e0:	4b3a      	ldr	r3, [pc, #232]	; (836cc <udc_process_setup+0x260>)
   835e2:	681b      	ldr	r3, [r3, #0]
   835e4:	7c5b      	ldrb	r3, [r3, #17]
   835e6:	42a3      	cmp	r3, r4
   835e8:	f67f af55 	bls.w	83496 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   835ec:	4b37      	ldr	r3, [pc, #220]	; (836cc <udc_process_setup+0x260>)
   835ee:	685b      	ldr	r3, [r3, #4]
   835f0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   835f4:	8841      	ldrh	r1, [r0, #2]
   835f6:	4b32      	ldr	r3, [pc, #200]	; (836c0 <udc_process_setup+0x254>)
   835f8:	4798      	blx	r3
   835fa:	e7ec      	b.n	835d6 <udc_process_setup+0x16a>
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   835fc:	2121      	movs	r1, #33	; 0x21
   835fe:	4834      	ldr	r0, [pc, #208]	; (836d0 <udc_process_setup+0x264>)
   83600:	4b2f      	ldr	r3, [pc, #188]	; (836c0 <udc_process_setup+0x254>)
   83602:	4798      	blx	r3
		break;
   83604:	e7ce      	b.n	835a4 <udc_process_setup+0x138>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83606:	b2d2      	uxtb	r2, r2
   83608:	2a03      	cmp	r2, #3
   8360a:	f63f af44 	bhi.w	83496 <udc_process_setup+0x2a>
   8360e:	e8df f002 	tbb	[pc, r2]
   83612:	1914      	.short	0x1914
   83614:	021c      	.short	0x021c
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83616:	2020      	movs	r0, #32
   83618:	4a2e      	ldr	r2, [pc, #184]	; (836d4 <udc_process_setup+0x268>)
		for(i = 0; i < str_length; i++) {
   8361a:	4613      	mov	r3, r2
   8361c:	492e      	ldr	r1, [pc, #184]	; (836d8 <udc_process_setup+0x26c>)
   8361e:	4402      	add	r2, r0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83620:	f813 4b01 	ldrb.w	r4, [r3], #1
   83624:	f821 4f02 	strh.w	r4, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   83628:	429a      	cmp	r2, r3
   8362a:	d1f9      	bne.n	83620 <udc_process_setup+0x1b4>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8362c:	0041      	lsls	r1, r0, #1
   8362e:	3102      	adds	r1, #2
   83630:	4829      	ldr	r0, [pc, #164]	; (836d8 <udc_process_setup+0x26c>)
   83632:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   83634:	4b22      	ldr	r3, [pc, #136]	; (836c0 <udc_process_setup+0x254>)
   83636:	4798      	blx	r3
   83638:	e7b4      	b.n	835a4 <udc_process_setup+0x138>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8363a:	2104      	movs	r1, #4
   8363c:	4827      	ldr	r0, [pc, #156]	; (836dc <udc_process_setup+0x270>)
   8363e:	4b20      	ldr	r3, [pc, #128]	; (836c0 <udc_process_setup+0x254>)
   83640:	4798      	blx	r3
	if (str_length) {
   83642:	e7af      	b.n	835a4 <udc_process_setup+0x138>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83644:	2015      	movs	r0, #21
		str = udc_string_manufacturer_name;
   83646:	4a26      	ldr	r2, [pc, #152]	; (836e0 <udc_process_setup+0x274>)
   83648:	e7e7      	b.n	8361a <udc_process_setup+0x1ae>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8364a:	2012      	movs	r0, #18
		str = udc_string_product_name;
   8364c:	4a25      	ldr	r2, [pc, #148]	; (836e4 <udc_process_setup+0x278>)
   8364e:	e7e4      	b.n	8361a <udc_process_setup+0x1ae>
	if (udd_g_ctrlreq.req.wLength != 1) {
   83650:	2b01      	cmp	r3, #1
   83652:	f47f af20 	bne.w	83496 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
   83656:	2101      	movs	r1, #1
   83658:	4823      	ldr	r0, [pc, #140]	; (836e8 <udc_process_setup+0x27c>)
   8365a:	4b19      	ldr	r3, [pc, #100]	; (836c0 <udc_process_setup+0x254>)
   8365c:	4798      	blx	r3
	return true;
   8365e:	e07e      	b.n	8375e <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83660:	2a01      	cmp	r2, #1
   83662:	d149      	bne.n	836f8 <udc_process_setup+0x28c>
			switch (udd_g_ctrlreq.req.bRequest) {
   83664:	4a14      	ldr	r2, [pc, #80]	; (836b8 <udc_process_setup+0x24c>)
   83666:	7852      	ldrb	r2, [r2, #1]
   83668:	2a0a      	cmp	r2, #10
   8366a:	f47f af14 	bne.w	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8366e:	2b01      	cmp	r3, #1
   83670:	f47f af11 	bne.w	83496 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   83674:	4b1c      	ldr	r3, [pc, #112]	; (836e8 <udc_process_setup+0x27c>)
   83676:	781b      	ldrb	r3, [r3, #0]
   83678:	2b00      	cmp	r3, #0
   8367a:	f43f af0c 	beq.w	83496 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8367e:	4b0e      	ldr	r3, [pc, #56]	; (836b8 <udc_process_setup+0x24c>)
   83680:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83682:	4b1a      	ldr	r3, [pc, #104]	; (836ec <udc_process_setup+0x280>)
   83684:	681d      	ldr	r5, [r3, #0]
   83686:	682b      	ldr	r3, [r5, #0]
   83688:	791b      	ldrb	r3, [r3, #4]
   8368a:	42a3      	cmp	r3, r4
   8368c:	f67f af03 	bls.w	83496 <udc_process_setup+0x2a>
	if (!udc_update_iface_desc(iface_num, 0)) {
   83690:	2100      	movs	r1, #0
   83692:	4620      	mov	r0, r4
   83694:	4b16      	ldr	r3, [pc, #88]	; (836f0 <udc_process_setup+0x284>)
   83696:	4798      	blx	r3
   83698:	2800      	cmp	r0, #0
   8369a:	f43f aefc 	beq.w	83496 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8369e:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   836a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   836a4:	68db      	ldr	r3, [r3, #12]
   836a6:	4798      	blx	r3
   836a8:	4b12      	ldr	r3, [pc, #72]	; (836f4 <udc_process_setup+0x288>)
   836aa:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   836ac:	2101      	movs	r1, #1
   836ae:	4618      	mov	r0, r3
   836b0:	4b03      	ldr	r3, [pc, #12]	; (836c0 <udc_process_setup+0x254>)
   836b2:	4798      	blx	r3
	return true;
   836b4:	e053      	b.n	8375e <udc_process_setup+0x2f2>
   836b6:	bf00      	nop
   836b8:	20002b90 	.word	0x20002b90
   836bc:	2000063c 	.word	0x2000063c
   836c0:	00084ecd 	.word	0x00084ecd
   836c4:	20001df4 	.word	0x20001df4
   836c8:	00084e65 	.word	0x00084e65
   836cc:	200001d0 	.word	0x200001d0
   836d0:	0008ccac 	.word	0x0008ccac
   836d4:	200006ec 	.word	0x200006ec
   836d8:	200005c8 	.word	0x200005c8
   836dc:	2000060c 	.word	0x2000060c
   836e0:	20000610 	.word	0x20000610
   836e4:	20000628 	.word	0x20000628
   836e8:	20001df9 	.word	0x20001df9
   836ec:	20001dfc 	.word	0x20001dfc
   836f0:	00083295 	.word	0x00083295
   836f4:	20001df8 	.word	0x20001df8
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   836f8:	2a02      	cmp	r2, #2
   836fa:	f47f aecc 	bne.w	83496 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   836fe:	4a93      	ldr	r2, [pc, #588]	; (8394c <udc_process_setup+0x4e0>)
   83700:	7852      	ldrb	r2, [r2, #1]
   83702:	2a00      	cmp	r2, #0
   83704:	f47f aec7 	bne.w	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83708:	2b02      	cmp	r3, #2
   8370a:	f47f aec4 	bne.w	83496 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8370e:	4b8f      	ldr	r3, [pc, #572]	; (8394c <udc_process_setup+0x4e0>)
   83710:	7918      	ldrb	r0, [r3, #4]
   83712:	4b8f      	ldr	r3, [pc, #572]	; (83950 <udc_process_setup+0x4e4>)
   83714:	4798      	blx	r3
   83716:	4b8f      	ldr	r3, [pc, #572]	; (83954 <udc_process_setup+0x4e8>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83718:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8371a:	2102      	movs	r1, #2
   8371c:	4618      	mov	r0, r3
   8371e:	4b8e      	ldr	r3, [pc, #568]	; (83958 <udc_process_setup+0x4ec>)
   83720:	4798      	blx	r3
	return true;
   83722:	e01c      	b.n	8375e <udc_process_setup+0x2f2>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83724:	f012 021f 	ands.w	r2, r2, #31
   83728:	f040 80b1 	bne.w	8388e <udc_process_setup+0x422>
			switch (udd_g_ctrlreq.req.bRequest) {
   8372c:	4b87      	ldr	r3, [pc, #540]	; (8394c <udc_process_setup+0x4e0>)
   8372e:	785b      	ldrb	r3, [r3, #1]
   83730:	3b01      	subs	r3, #1
   83732:	2b08      	cmp	r3, #8
   83734:	f200 80ab 	bhi.w	8388e <udc_process_setup+0x422>
   83738:	e8df f013 	tbh	[pc, r3, lsl #1]
   8373c:	00a90013 	.word	0x00a90013
   83740:	00a90023 	.word	0x00a90023
   83744:	00a90009 	.word	0x00a90009
   83748:	00a900a9 	.word	0x00a900a9
   8374c:	0054      	.short	0x0054
	if (udd_g_ctrlreq.req.wLength) {
   8374e:	4b7f      	ldr	r3, [pc, #508]	; (8394c <udc_process_setup+0x4e0>)
   83750:	88db      	ldrh	r3, [r3, #6]
   83752:	2b00      	cmp	r3, #0
   83754:	f47f ae9f 	bne.w	83496 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
   83758:	4b7c      	ldr	r3, [pc, #496]	; (8394c <udc_process_setup+0x4e0>)
   8375a:	4a80      	ldr	r2, [pc, #512]	; (8395c <udc_process_setup+0x4f0>)
   8375c:	611a      	str	r2, [r3, #16]
			return true;
   8375e:	2301      	movs	r3, #1
   83760:	e6a8      	b.n	834b4 <udc_process_setup+0x48>
	if (udd_g_ctrlreq.req.wLength) {
   83762:	4b7a      	ldr	r3, [pc, #488]	; (8394c <udc_process_setup+0x4e0>)
   83764:	88db      	ldrh	r3, [r3, #6]
   83766:	2b00      	cmp	r3, #0
   83768:	f47f ae95 	bne.w	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   8376c:	4b77      	ldr	r3, [pc, #476]	; (8394c <udc_process_setup+0x4e0>)
   8376e:	885b      	ldrh	r3, [r3, #2]
   83770:	2b01      	cmp	r3, #1
   83772:	f47f ae90 	bne.w	83496 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83776:	4a7a      	ldr	r2, [pc, #488]	; (83960 <udc_process_setup+0x4f4>)
   83778:	8813      	ldrh	r3, [r2, #0]
   8377a:	f023 0302 	bic.w	r3, r3, #2
   8377e:	8013      	strh	r3, [r2, #0]
		return true;
   83780:	e7ed      	b.n	8375e <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   83782:	4b72      	ldr	r3, [pc, #456]	; (8394c <udc_process_setup+0x4e0>)
   83784:	88db      	ldrh	r3, [r3, #6]
   83786:	2b00      	cmp	r3, #0
   83788:	f47f ae85 	bne.w	83496 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
   8378c:	4b6f      	ldr	r3, [pc, #444]	; (8394c <udc_process_setup+0x4e0>)
   8378e:	885b      	ldrh	r3, [r3, #2]
   83790:	2b02      	cmp	r3, #2
   83792:	f47f ae80 	bne.w	83496 <udc_process_setup+0x2a>
		if (!udd_is_high_speed()) {
   83796:	4b73      	ldr	r3, [pc, #460]	; (83964 <udc_process_setup+0x4f8>)
   83798:	4798      	blx	r3
   8379a:	2800      	cmp	r0, #0
   8379c:	f43f ae7b 	beq.w	83496 <udc_process_setup+0x2a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   837a0:	4b6a      	ldr	r3, [pc, #424]	; (8394c <udc_process_setup+0x4e0>)
   837a2:	791b      	ldrb	r3, [r3, #4]
   837a4:	2b00      	cmp	r3, #0
   837a6:	f47f ae76 	bne.w	83496 <udc_process_setup+0x2a>
		udc_reset();
   837aa:	4b6f      	ldr	r3, [pc, #444]	; (83968 <udc_process_setup+0x4fc>)
   837ac:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   837ae:	4b67      	ldr	r3, [pc, #412]	; (8394c <udc_process_setup+0x4e0>)
   837b0:	889b      	ldrh	r3, [r3, #4]
   837b2:	0a1b      	lsrs	r3, r3, #8
   837b4:	3b01      	subs	r3, #1
   837b6:	2b03      	cmp	r3, #3
   837b8:	f200 80b7 	bhi.w	8392a <udc_process_setup+0x4be>
   837bc:	e8df f003 	tbb	[pc, r3]
   837c0:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   837c4:	4b61      	ldr	r3, [pc, #388]	; (8394c <udc_process_setup+0x4e0>)
   837c6:	4a69      	ldr	r2, [pc, #420]	; (8396c <udc_process_setup+0x500>)
   837c8:	611a      	str	r2, [r3, #16]
			return true;
   837ca:	e7c8      	b.n	8375e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   837cc:	4b5f      	ldr	r3, [pc, #380]	; (8394c <udc_process_setup+0x4e0>)
   837ce:	4a68      	ldr	r2, [pc, #416]	; (83970 <udc_process_setup+0x504>)
   837d0:	611a      	str	r2, [r3, #16]
			return true;
   837d2:	e7c4      	b.n	8375e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   837d4:	4b5d      	ldr	r3, [pc, #372]	; (8394c <udc_process_setup+0x4e0>)
   837d6:	4a67      	ldr	r2, [pc, #412]	; (83974 <udc_process_setup+0x508>)
   837d8:	611a      	str	r2, [r3, #16]
			return true;
   837da:	e7c0      	b.n	8375e <udc_process_setup+0x2f2>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   837dc:	4b5b      	ldr	r3, [pc, #364]	; (8394c <udc_process_setup+0x4e0>)
   837de:	4a66      	ldr	r2, [pc, #408]	; (83978 <udc_process_setup+0x50c>)
   837e0:	611a      	str	r2, [r3, #16]
			return true;
   837e2:	e7bc      	b.n	8375e <udc_process_setup+0x2f2>
	if (udd_g_ctrlreq.req.wLength) {
   837e4:	4b59      	ldr	r3, [pc, #356]	; (8394c <udc_process_setup+0x4e0>)
   837e6:	88db      	ldrh	r3, [r3, #6]
   837e8:	2b00      	cmp	r3, #0
   837ea:	f47f ae54 	bne.w	83496 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
   837ee:	4b63      	ldr	r3, [pc, #396]	; (8397c <udc_process_setup+0x510>)
   837f0:	4798      	blx	r3
   837f2:	2800      	cmp	r0, #0
   837f4:	f43f ae4f 	beq.w	83496 <udc_process_setup+0x2a>
	if (udd_is_high_speed()) {
   837f8:	4b5a      	ldr	r3, [pc, #360]	; (83964 <udc_process_setup+0x4f8>)
   837fa:	4798      	blx	r3
   837fc:	2800      	cmp	r0, #0
   837fe:	d034      	beq.n	8386a <udc_process_setup+0x3fe>
				udc_config.confdev_hs->bNumConfigurations) {
   83800:	4b5f      	ldr	r3, [pc, #380]	; (83980 <udc_process_setup+0x514>)
   83802:	689b      	ldr	r3, [r3, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83804:	7c5a      	ldrb	r2, [r3, #17]
   83806:	4b51      	ldr	r3, [pc, #324]	; (8394c <udc_process_setup+0x4e0>)
   83808:	789b      	ldrb	r3, [r3, #2]
   8380a:	429a      	cmp	r2, r3
   8380c:	f4ff ae43 	bcc.w	83496 <udc_process_setup+0x2a>
	udc_reset();
   83810:	4b55      	ldr	r3, [pc, #340]	; (83968 <udc_process_setup+0x4fc>)
   83812:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83814:	4b4d      	ldr	r3, [pc, #308]	; (8394c <udc_process_setup+0x4e0>)
   83816:	789b      	ldrb	r3, [r3, #2]
   83818:	4a5a      	ldr	r2, [pc, #360]	; (83984 <udc_process_setup+0x518>)
   8381a:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   8381c:	2b00      	cmp	r3, #0
   8381e:	d09e      	beq.n	8375e <udc_process_setup+0x2f2>
	if (udd_is_high_speed()) {
   83820:	4b50      	ldr	r3, [pc, #320]	; (83964 <udc_process_setup+0x4f8>)
   83822:	4798      	blx	r3
   83824:	2800      	cmp	r0, #0
   83826:	d028      	beq.n	8387a <udc_process_setup+0x40e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83828:	4b56      	ldr	r3, [pc, #344]	; (83984 <udc_process_setup+0x518>)
   8382a:	781b      	ldrb	r3, [r3, #0]
   8382c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   83830:	3a01      	subs	r2, #1
   83832:	4b53      	ldr	r3, [pc, #332]	; (83980 <udc_process_setup+0x514>)
   83834:	691b      	ldr	r3, [r3, #16]
   83836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8383a:	4a53      	ldr	r2, [pc, #332]	; (83988 <udc_process_setup+0x51c>)
   8383c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8383e:	681b      	ldr	r3, [r3, #0]
   83840:	791b      	ldrb	r3, [r3, #4]
   83842:	2b00      	cmp	r3, #0
   83844:	d08b      	beq.n	8375e <udc_process_setup+0x2f2>
   83846:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   83848:	4626      	mov	r6, r4
   8384a:	4d50      	ldr	r5, [pc, #320]	; (8398c <udc_process_setup+0x520>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8384c:	4f4e      	ldr	r7, [pc, #312]	; (83988 <udc_process_setup+0x51c>)
		if (!udc_iface_enable(iface_num, 0)) {
   8384e:	4631      	mov	r1, r6
   83850:	b2e0      	uxtb	r0, r4
   83852:	47a8      	blx	r5
   83854:	2800      	cmp	r0, #0
   83856:	f43f ae1e 	beq.w	83496 <udc_process_setup+0x2a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8385a:	3401      	adds	r4, #1
   8385c:	683b      	ldr	r3, [r7, #0]
   8385e:	681b      	ldr	r3, [r3, #0]
   83860:	791a      	ldrb	r2, [r3, #4]
   83862:	b2e3      	uxtb	r3, r4
   83864:	429a      	cmp	r2, r3
   83866:	d8f2      	bhi.n	8384e <udc_process_setup+0x3e2>
   83868:	e779      	b.n	8375e <udc_process_setup+0x2f2>
				udc_config.confdev_lsfs->bNumConfigurations) {
   8386a:	4b45      	ldr	r3, [pc, #276]	; (83980 <udc_process_setup+0x514>)
   8386c:	681b      	ldr	r3, [r3, #0]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8386e:	7c5a      	ldrb	r2, [r3, #17]
   83870:	4b36      	ldr	r3, [pc, #216]	; (8394c <udc_process_setup+0x4e0>)
   83872:	789b      	ldrb	r3, [r3, #2]
   83874:	429a      	cmp	r2, r3
   83876:	d2cb      	bcs.n	83810 <udc_process_setup+0x3a4>
   83878:	e60d      	b.n	83496 <udc_process_setup+0x2a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8387a:	4b42      	ldr	r3, [pc, #264]	; (83984 <udc_process_setup+0x518>)
   8387c:	781b      	ldrb	r3, [r3, #0]
   8387e:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
   83882:	3a01      	subs	r2, #1
   83884:	4b3e      	ldr	r3, [pc, #248]	; (83980 <udc_process_setup+0x514>)
   83886:	685b      	ldr	r3, [r3, #4]
   83888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8388c:	e7d5      	b.n	8383a <udc_process_setup+0x3ce>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8388e:	2a01      	cmp	r2, #1
   83890:	d01a      	beq.n	838c8 <udc_process_setup+0x45c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83892:	2a02      	cmp	r2, #2
   83894:	f47f adff 	bne.w	83496 <udc_process_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
   83898:	4b2c      	ldr	r3, [pc, #176]	; (8394c <udc_process_setup+0x4e0>)
   8389a:	785b      	ldrb	r3, [r3, #1]
   8389c:	2b01      	cmp	r3, #1
   8389e:	d031      	beq.n	83904 <udc_process_setup+0x498>
   838a0:	2b03      	cmp	r3, #3
   838a2:	f47f adf8 	bne.w	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   838a6:	4a29      	ldr	r2, [pc, #164]	; (8394c <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   838a8:	88d3      	ldrh	r3, [r2, #6]
   838aa:	8852      	ldrh	r2, [r2, #2]
   838ac:	4313      	orrs	r3, r2
   838ae:	b29b      	uxth	r3, r3
   838b0:	2b00      	cmp	r3, #0
   838b2:	f47f adf0 	bne.w	83496 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   838b6:	4c25      	ldr	r4, [pc, #148]	; (8394c <udc_process_setup+0x4e0>)
   838b8:	7920      	ldrb	r0, [r4, #4]
   838ba:	4b35      	ldr	r3, [pc, #212]	; (83990 <udc_process_setup+0x524>)
   838bc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   838be:	7920      	ldrb	r0, [r4, #4]
   838c0:	4b34      	ldr	r3, [pc, #208]	; (83994 <udc_process_setup+0x528>)
   838c2:	4798      	blx	r3
   838c4:	4603      	mov	r3, r0
   838c6:	e02c      	b.n	83922 <udc_process_setup+0x4b6>
			switch (udd_g_ctrlreq.req.bRequest) {
   838c8:	4b20      	ldr	r3, [pc, #128]	; (8394c <udc_process_setup+0x4e0>)
   838ca:	785b      	ldrb	r3, [r3, #1]
   838cc:	2b0b      	cmp	r3, #11
   838ce:	f47f ade2 	bne.w	83496 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wLength) {
   838d2:	4b1e      	ldr	r3, [pc, #120]	; (8394c <udc_process_setup+0x4e0>)
   838d4:	88db      	ldrh	r3, [r3, #6]
   838d6:	2b00      	cmp	r3, #0
   838d8:	f47f addd 	bne.w	83496 <udc_process_setup+0x2a>
	if (!udc_num_configuration) {
   838dc:	4b29      	ldr	r3, [pc, #164]	; (83984 <udc_process_setup+0x518>)
   838de:	781b      	ldrb	r3, [r3, #0]
   838e0:	2b00      	cmp	r3, #0
   838e2:	f43f add8 	beq.w	83496 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   838e6:	4b19      	ldr	r3, [pc, #100]	; (8394c <udc_process_setup+0x4e0>)
   838e8:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   838ea:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   838ec:	4620      	mov	r0, r4
   838ee:	4b2a      	ldr	r3, [pc, #168]	; (83998 <udc_process_setup+0x52c>)
   838f0:	4798      	blx	r3
   838f2:	2800      	cmp	r0, #0
   838f4:	f43f adcf 	beq.w	83496 <udc_process_setup+0x2a>
	return udc_iface_enable(iface_num, setting_num);
   838f8:	b2e9      	uxtb	r1, r5
   838fa:	4620      	mov	r0, r4
   838fc:	4b23      	ldr	r3, [pc, #140]	; (8398c <udc_process_setup+0x520>)
   838fe:	4798      	blx	r3
   83900:	4603      	mov	r3, r0
   83902:	e00e      	b.n	83922 <udc_process_setup+0x4b6>
	if (udd_g_ctrlreq.req.wLength) {
   83904:	4a11      	ldr	r2, [pc, #68]	; (8394c <udc_process_setup+0x4e0>)
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83906:	88d3      	ldrh	r3, [r2, #6]
   83908:	8852      	ldrh	r2, [r2, #2]
   8390a:	4313      	orrs	r3, r2
   8390c:	b29b      	uxth	r3, r3
   8390e:	2b00      	cmp	r3, #0
   83910:	f47f adc1 	bne.w	83496 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83914:	4b0d      	ldr	r3, [pc, #52]	; (8394c <udc_process_setup+0x4e0>)
   83916:	7918      	ldrb	r0, [r3, #4]
   83918:	4b20      	ldr	r3, [pc, #128]	; (8399c <udc_process_setup+0x530>)
   8391a:	4798      	blx	r3
   8391c:	4603      	mov	r3, r0
   8391e:	e000      	b.n	83922 <udc_process_setup+0x4b6>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83920:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   83922:	2b00      	cmp	r3, #0
   83924:	f47f adc6 	bne.w	834b4 <udc_process_setup+0x48>
   83928:	e5b5      	b.n	83496 <udc_process_setup+0x2a>
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8392a:	2300      	movs	r3, #0
   8392c:	e7f9      	b.n	83922 <udc_process_setup+0x4b6>
	if (0 == udc_num_configuration) {
   8392e:	4b15      	ldr	r3, [pc, #84]	; (83984 <udc_process_setup+0x518>)
   83930:	781b      	ldrb	r3, [r3, #0]
   83932:	2b00      	cmp	r3, #0
   83934:	d07c      	beq.n	83a30 <udc_process_setup+0x5c4>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83936:	4b05      	ldr	r3, [pc, #20]	; (8394c <udc_process_setup+0x4e0>)
   83938:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8393a:	4b13      	ldr	r3, [pc, #76]	; (83988 <udc_process_setup+0x51c>)
   8393c:	681d      	ldr	r5, [r3, #0]
   8393e:	682b      	ldr	r3, [r5, #0]
   83940:	791b      	ldrb	r3, [r3, #4]
   83942:	42a3      	cmp	r3, r4
   83944:	d82c      	bhi.n	839a0 <udc_process_setup+0x534>
	return false;
   83946:	2300      	movs	r3, #0
   83948:	e5b4      	b.n	834b4 <udc_process_setup+0x48>
   8394a:	bf00      	nop
   8394c:	20002b90 	.word	0x20002b90
   83950:	00084f31 	.word	0x00084f31
   83954:	20001df6 	.word	0x20001df6
   83958:	00084ecd 	.word	0x00084ecd
   8395c:	0008327d 	.word	0x0008327d
   83960:	20001df4 	.word	0x20001df4
   83964:	00084e65 	.word	0x00084e65
   83968:	000833e1 	.word	0x000833e1
   8396c:	00085519 	.word	0x00085519
   83970:	0008553d 	.word	0x0008553d
   83974:	00085561 	.word	0x00085561
   83978:	00085579 	.word	0x00085579
   8397c:	00084e9d 	.word	0x00084e9d
   83980:	200001d0 	.word	0x200001d0
   83984:	20001df9 	.word	0x20001df9
   83988:	20001dfc 	.word	0x20001dfc
   8398c:	0008336d 	.word	0x0008336d
   83990:	000854a5 	.word	0x000854a5
   83994:	00084f65 	.word	0x00084f65
   83998:	00083305 	.word	0x00083305
   8399c:	00085029 	.word	0x00085029
	if (!udc_update_iface_desc(iface_num, 0)) {
   839a0:	2100      	movs	r1, #0
   839a2:	4620      	mov	r0, r4
   839a4:	4b23      	ldr	r3, [pc, #140]	; (83a34 <udc_process_setup+0x5c8>)
   839a6:	4798      	blx	r3
   839a8:	2800      	cmp	r0, #0
   839aa:	f43f ad7b 	beq.w	834a4 <udc_process_setup+0x38>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   839ae:	686b      	ldr	r3, [r5, #4]
   839b0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   839b4:	68eb      	ldr	r3, [r5, #12]
   839b6:	4798      	blx	r3
   839b8:	4601      	mov	r1, r0
   839ba:	4620      	mov	r0, r4
   839bc:	4b1d      	ldr	r3, [pc, #116]	; (83a34 <udc_process_setup+0x5c8>)
   839be:	4798      	blx	r3
   839c0:	2800      	cmp	r0, #0
   839c2:	f43f ad6f 	beq.w	834a4 <udc_process_setup+0x38>
	return udi_api->setup();
   839c6:	68ab      	ldr	r3, [r5, #8]
   839c8:	4798      	blx	r3
		if (udc_req_iface()) {
   839ca:	4603      	mov	r3, r0
   839cc:	2800      	cmp	r0, #0
   839ce:	f47f ad71 	bne.w	834b4 <udc_process_setup+0x48>
   839d2:	e567      	b.n	834a4 <udc_process_setup+0x38>
	if (0 == udc_num_configuration) {
   839d4:	4b18      	ldr	r3, [pc, #96]	; (83a38 <udc_process_setup+0x5cc>)
   839d6:	781b      	ldrb	r3, [r3, #0]
   839d8:	b323      	cbz	r3, 83a24 <udc_process_setup+0x5b8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   839da:	4b18      	ldr	r3, [pc, #96]	; (83a3c <udc_process_setup+0x5d0>)
   839dc:	681a      	ldr	r2, [r3, #0]
   839de:	6813      	ldr	r3, [r2, #0]
   839e0:	791b      	ldrb	r3, [r3, #4]
   839e2:	b30b      	cbz	r3, 83a28 <udc_process_setup+0x5bc>
   839e4:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   839e6:	4e13      	ldr	r6, [pc, #76]	; (83a34 <udc_process_setup+0x5c8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   839e8:	4f14      	ldr	r7, [pc, #80]	; (83a3c <udc_process_setup+0x5d0>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   839ea:	b2ec      	uxtb	r4, r5
   839ec:	6853      	ldr	r3, [r2, #4]
   839ee:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   839f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   839f6:	4798      	blx	r3
   839f8:	4601      	mov	r1, r0
   839fa:	4620      	mov	r0, r4
   839fc:	47b0      	blx	r6
   839fe:	4603      	mov	r3, r0
   83a00:	2800      	cmp	r0, #0
   83a02:	f43f ad57 	beq.w	834b4 <udc_process_setup+0x48>
		if (udi_api->setup()) {
   83a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83a0a:	4798      	blx	r3
   83a0c:	4603      	mov	r3, r0
   83a0e:	2800      	cmp	r0, #0
   83a10:	f47f ad50 	bne.w	834b4 <udc_process_setup+0x48>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83a14:	683a      	ldr	r2, [r7, #0]
   83a16:	3501      	adds	r5, #1
   83a18:	6811      	ldr	r1, [r2, #0]
   83a1a:	7908      	ldrb	r0, [r1, #4]
   83a1c:	b2e9      	uxtb	r1, r5
   83a1e:	4288      	cmp	r0, r1
   83a20:	d8e3      	bhi.n	839ea <udc_process_setup+0x57e>
   83a22:	e547      	b.n	834b4 <udc_process_setup+0x48>
		return false; // The device is not is configured state yet
   83a24:	2300      	movs	r3, #0
   83a26:	e545      	b.n	834b4 <udc_process_setup+0x48>
	return false;
   83a28:	2300      	movs	r3, #0
   83a2a:	e543      	b.n	834b4 <udc_process_setup+0x48>
			return false; // Error from USB host
   83a2c:	2300      	movs	r3, #0
   83a2e:	e541      	b.n	834b4 <udc_process_setup+0x48>
	return false;
   83a30:	2300      	movs	r3, #0
   83a32:	e53f      	b.n	834b4 <udc_process_setup+0x48>
   83a34:	00083295 	.word	0x00083295
   83a38:	20001df9 	.word	0x20001df9
   83a3c:	20001dfc 	.word	0x20001dfc

00083a40 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   83a40:	4b0b      	ldr	r3, [pc, #44]	; (83a70 <cpu_irq_enter_critical+0x30>)
   83a42:	681b      	ldr	r3, [r3, #0]
   83a44:	b95b      	cbnz	r3, 83a5e <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83a46:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   83a4a:	b96b      	cbnz	r3, 83a68 <cpu_irq_enter_critical+0x28>
  __ASM volatile ("cpsid i");
   83a4c:	b672      	cpsid	i
   83a4e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   83a52:	4b08      	ldr	r3, [pc, #32]	; (83a74 <cpu_irq_enter_critical+0x34>)
   83a54:	2200      	movs	r2, #0
   83a56:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   83a58:	4b07      	ldr	r3, [pc, #28]	; (83a78 <cpu_irq_enter_critical+0x38>)
   83a5a:	2201      	movs	r2, #1
   83a5c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = false;
		}

	}

	cpu_irq_critical_section_counter++;
   83a5e:	4a04      	ldr	r2, [pc, #16]	; (83a70 <cpu_irq_enter_critical+0x30>)
   83a60:	6813      	ldr	r3, [r2, #0]
   83a62:	3301      	adds	r3, #1
   83a64:	6013      	str	r3, [r2, #0]
}
   83a66:	4770      	bx	lr
			cpu_irq_prev_interrupt_state = false;
   83a68:	4b03      	ldr	r3, [pc, #12]	; (83a78 <cpu_irq_enter_critical+0x38>)
   83a6a:	2200      	movs	r2, #0
   83a6c:	701a      	strb	r2, [r3, #0]
   83a6e:	e7f6      	b.n	83a5e <cpu_irq_enter_critical+0x1e>
   83a70:	20001e04 	.word	0x20001e04
   83a74:	200006e6 	.word	0x200006e6
   83a78:	20001e08 	.word	0x20001e08

00083a7c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   83a7c:	4b07      	ldr	r3, [pc, #28]	; (83a9c <cpu_irq_leave_critical+0x20>)
   83a7e:	681a      	ldr	r2, [r3, #0]
   83a80:	3a01      	subs	r2, #1
   83a82:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   83a84:	681b      	ldr	r3, [r3, #0]
   83a86:	b943      	cbnz	r3, 83a9a <cpu_irq_leave_critical+0x1e>
   83a88:	4b05      	ldr	r3, [pc, #20]	; (83aa0 <cpu_irq_leave_critical+0x24>)
   83a8a:	781b      	ldrb	r3, [r3, #0]
   83a8c:	b12b      	cbz	r3, 83a9a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   83a8e:	4b05      	ldr	r3, [pc, #20]	; (83aa4 <cpu_irq_leave_critical+0x28>)
   83a90:	2201      	movs	r2, #1
   83a92:	701a      	strb	r2, [r3, #0]
   83a94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83a98:	b662      	cpsie	i
	}
}
   83a9a:	4770      	bx	lr
   83a9c:	20001e04 	.word	0x20001e04
   83aa0:	20001e08 	.word	0x20001e08
   83aa4:	200006e6 	.word	0x200006e6

00083aa8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   83aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   83aac:	b980      	cbnz	r0, 83ad0 <_read+0x28>
   83aae:	460c      	mov	r4, r1
   83ab0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   83ab2:	2a00      	cmp	r2, #0
   83ab4:	dd0f      	ble.n	83ad6 <_read+0x2e>
   83ab6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   83ab8:	4e08      	ldr	r6, [pc, #32]	; (83adc <_read+0x34>)
   83aba:	4d09      	ldr	r5, [pc, #36]	; (83ae0 <_read+0x38>)
   83abc:	6830      	ldr	r0, [r6, #0]
   83abe:	682b      	ldr	r3, [r5, #0]
   83ac0:	4621      	mov	r1, r4
   83ac2:	4798      	blx	r3
		ptr++;
   83ac4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   83ac6:	42bc      	cmp	r4, r7
   83ac8:	d1f8      	bne.n	83abc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   83aca:	4640      	mov	r0, r8
   83acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83ad0:	f04f 38ff 	mov.w	r8, #4294967295
   83ad4:	e7f9      	b.n	83aca <_read+0x22>
	int nChars = 0;
   83ad6:	4680      	mov	r8, r0
   83ad8:	e7f7      	b.n	83aca <_read+0x22>
   83ada:	bf00      	nop
   83adc:	20002b8c 	.word	0x20002b8c
   83ae0:	20002b84 	.word	0x20002b84

00083ae4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83ae4:	3801      	subs	r0, #1
   83ae6:	2802      	cmp	r0, #2
   83ae8:	d81a      	bhi.n	83b20 <_write+0x3c>
{
   83aea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83aee:	460e      	mov	r6, r1
   83af0:	4617      	mov	r7, r2
		return -1;
	}

	for (; len != 0; --len) {
   83af2:	b1c2      	cbz	r2, 83b26 <_write+0x42>
   83af4:	1e4d      	subs	r5, r1, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83af6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 83b34 <_write+0x50>
   83afa:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83b38 <_write+0x54>
   83afe:	f8d9 0000 	ldr.w	r0, [r9]
   83b02:	462c      	mov	r4, r5
   83b04:	f8d8 3000 	ldr.w	r3, [r8]
   83b08:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   83b0c:	4798      	blx	r3
   83b0e:	2800      	cmp	r0, #0
   83b10:	db0b      	blt.n	83b2a <_write+0x46>
			return -1;
		}
		++nChars;
   83b12:	3402      	adds	r4, #2
   83b14:	1ba0      	subs	r0, r4, r6
	for (; len != 0; --len) {
   83b16:	43eb      	mvns	r3, r5
   83b18:	443b      	add	r3, r7
   83b1a:	42f3      	cmn	r3, r6
   83b1c:	d1ef      	bne.n	83afe <_write+0x1a>
   83b1e:	e006      	b.n	83b2e <_write+0x4a>
		return -1;
   83b20:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return nChars;
}
   83b24:	4770      	bx	lr
	int nChars = 0;
   83b26:	4610      	mov	r0, r2
   83b28:	e001      	b.n	83b2e <_write+0x4a>
			return -1;
   83b2a:	f04f 30ff 	mov.w	r0, #4294967295
}
   83b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b32:	bf00      	nop
   83b34:	20002b8c 	.word	0x20002b8c
   83b38:	20002b88 	.word	0x20002b88

00083b3c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   83b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83b3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b42:	2006      	movs	r0, #6
   83b44:	4c17      	ldr	r4, [pc, #92]	; (83ba4 <iopins_normal+0x68>)
   83b46:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83b48:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b4c:	2007      	movs	r0, #7
   83b4e:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   83b50:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83b54:	201d      	movs	r0, #29
   83b56:	47a0      	blx	r4
	board_power(0);
   83b58:	201d      	movs	r0, #29
   83b5a:	4b13      	ldr	r3, [pc, #76]	; (83ba8 <iopins_normal+0x6c>)
   83b5c:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   83b5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b62:	2008      	movs	r0, #8
   83b64:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   83b66:	2008      	movs	r0, #8
   83b68:	4e10      	ldr	r6, [pc, #64]	; (83bac <iopins_normal+0x70>)
   83b6a:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   83b6c:	4f10      	ldr	r7, [pc, #64]	; (83bb0 <iopins_normal+0x74>)
   83b6e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   83b72:	21ff      	movs	r1, #255	; 0xff
   83b74:	4638      	mov	r0, r7
   83b76:	4d0f      	ldr	r5, [pc, #60]	; (83bb4 <iopins_normal+0x78>)
   83b78:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   83b7a:	21ff      	movs	r1, #255	; 0xff
   83b7c:	4638      	mov	r0, r7
   83b7e:	4b0e      	ldr	r3, [pc, #56]	; (83bb8 <iopins_normal+0x7c>)
   83b80:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   83b82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83b86:	2035      	movs	r0, #53	; 0x35
   83b88:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   83b8a:	2035      	movs	r0, #53	; 0x35
   83b8c:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83b92:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   83b96:	4809      	ldr	r0, [pc, #36]	; (83bbc <iopins_normal+0x80>)
   83b98:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   83b9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83b9e:	201b      	movs	r0, #27
   83ba0:	47a0      	blx	r4
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   83ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ba4:	00083d59 	.word	0x00083d59
   83ba8:	00083d3f 	.word	0x00083d3f
   83bac:	00083d25 	.word	0x00083d25
   83bb0:	400e0e00 	.word	0x400e0e00
   83bb4:	00083e29 	.word	0x00083e29
   83bb8:	00083cf7 	.word	0x00083cf7
   83bbc:	400e0c00 	.word	0x400e0c00

00083bc0 <board_init>:

void board_init(void)
{
   83bc0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83bc2:	4b06      	ldr	r3, [pc, #24]	; (83bdc <board_init+0x1c>)
   83bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83bc8:	605a      	str	r2, [r3, #4]
   83bca:	200a      	movs	r0, #10
   83bcc:	4c04      	ldr	r4, [pc, #16]	; (83be0 <board_init+0x20>)
   83bce:	47a0      	blx	r4
   83bd0:	200b      	movs	r0, #11
   83bd2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   83bd4:	4b03      	ldr	r3, [pc, #12]	; (83be4 <board_init+0x24>)
   83bd6:	4798      	blx	r3

}
   83bd8:	bd10      	pop	{r4, pc}
   83bda:	bf00      	nop
   83bdc:	400e1250 	.word	0x400e1250
   83be0:	00084095 	.word	0x00084095
   83be4:	00083b3d 	.word	0x00083b3d

00083be8 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   83be8:	b510      	push	{r4, lr}
   83bea:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83bec:	2806      	cmp	r0, #6
   83bee:	d002      	beq.n	83bf6 <LED_Off+0xe>
   83bf0:	2c07      	cmp	r4, #7
   83bf2:	d004      	beq.n	83bfe <LED_Off+0x16>
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   83bf4:	bd10      	pop	{r4, pc}
				gpio_set_pin_low(led_gpio);
   83bf6:	2006      	movs	r0, #6
   83bf8:	4b03      	ldr	r3, [pc, #12]	; (83c08 <LED_Off+0x20>)
   83bfa:	4798      	blx	r3
   83bfc:	e7f8      	b.n	83bf0 <LED_Off+0x8>
   83bfe:	2007      	movs	r0, #7
   83c00:	4b01      	ldr	r3, [pc, #4]	; (83c08 <LED_Off+0x20>)
   83c02:	4798      	blx	r3
}
   83c04:	e7f6      	b.n	83bf4 <LED_Off+0xc>
   83c06:	bf00      	nop
   83c08:	00083d3f 	.word	0x00083d3f

00083c0c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   83c0c:	b510      	push	{r4, lr}
   83c0e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   83c10:	2806      	cmp	r0, #6
   83c12:	d002      	beq.n	83c1a <LED_On+0xe>
   83c14:	2c07      	cmp	r4, #7
   83c16:	d004      	beq.n	83c22 <LED_On+0x16>
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   83c18:	bd10      	pop	{r4, pc}
				gpio_set_pin_high(led_gpio);
   83c1a:	2006      	movs	r0, #6
   83c1c:	4b03      	ldr	r3, [pc, #12]	; (83c2c <LED_On+0x20>)
   83c1e:	4798      	blx	r3
   83c20:	e7f8      	b.n	83c14 <LED_On+0x8>
   83c22:	2007      	movs	r0, #7
   83c24:	4b01      	ldr	r3, [pc, #4]	; (83c2c <LED_On+0x20>)
   83c26:	4798      	blx	r3
}
   83c28:	e7f6      	b.n	83c18 <LED_On+0xc>
   83c2a:	bf00      	nop
   83c2c:	00083d25 	.word	0x00083d25

00083c30 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83c30:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83c34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83c38:	670a      	str	r2, [r1, #112]	; 0x70
}
   83c3a:	4770      	bx	lr

00083c3c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83c3c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83c40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83c44:	674a      	str	r2, [r1, #116]	; 0x74
}
   83c46:	4770      	bx	lr

00083c48 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83c48:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83c4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83c50:	678a      	str	r2, [r1, #120]	; 0x78
}
   83c52:	4770      	bx	lr

00083c54 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83c54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83c58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83c5c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   83c60:	4770      	bx	lr

00083c62 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83c62:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83c64:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   83c68:	d015      	beq.n	83c96 <pio_set_peripheral+0x34>
   83c6a:	d80a      	bhi.n	83c82 <pio_set_peripheral+0x20>
   83c6c:	b191      	cbz	r1, 83c94 <pio_set_peripheral+0x32>
   83c6e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   83c72:	d10e      	bne.n	83c92 <pio_set_peripheral+0x30>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83c74:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83c76:	6f03      	ldr	r3, [r0, #112]	; 0x70
   83c78:	400b      	ands	r3, r1
   83c7a:	ea23 0302 	bic.w	r3, r3, r2
   83c7e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83c80:	e007      	b.n	83c92 <pio_set_peripheral+0x30>
	switch (ul_type) {
   83c82:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   83c86:	d005      	beq.n	83c94 <pio_set_peripheral+0x32>
   83c88:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
   83c8c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   83c90:	d000      	beq.n	83c94 <pio_set_peripheral+0x32>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83c92:	6042      	str	r2, [r0, #4]
}
   83c94:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   83c96:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83c98:	4313      	orrs	r3, r2
   83c9a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   83c9c:	e7f9      	b.n	83c92 <pio_set_peripheral+0x30>

00083c9e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   83c9e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83ca0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   83ca4:	bf14      	ite	ne
   83ca6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83ca8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83caa:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83cae:	bf14      	ite	ne
   83cb0:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   83cb2:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83cb4:	f012 0f02 	tst.w	r2, #2
   83cb8:	d004      	beq.n	83cc4 <pio_set_input+0x26>
		p_pio->PIO_SCIFSR = ul_mask;
   83cba:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   83cbe:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   83cc0:	6001      	str	r1, [r0, #0]
}
   83cc2:	4770      	bx	lr
		if (ul_attribute & PIO_DEBOUNCE) {
   83cc4:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   83cc8:	bf18      	it	ne
   83cca:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
   83cce:	e7f6      	b.n	83cbe <pio_set_input+0x20>

00083cd0 <pio_set_output>:
{
   83cd0:	b410      	push	{r4}
   83cd2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   83cd4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   83cd6:	b144      	cbz	r4, 83cea <pio_set_output+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83cd8:	6641      	str	r1, [r0, #100]	; 0x64
	if (ul_multidrive_enable) {
   83cda:	b143      	cbz	r3, 83cee <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   83cdc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   83cde:	b142      	cbz	r2, 83cf2 <pio_set_output+0x22>
		p_pio->PIO_SODR = ul_mask;
   83ce0:	6301      	str	r1, [r0, #48]	; 0x30
	p_pio->PIO_OER = ul_mask;
   83ce2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   83ce4:	6001      	str	r1, [r0, #0]
}
   83ce6:	bc10      	pop	{r4}
   83ce8:	4770      	bx	lr
		p_pio->PIO_PUDR = ul_mask;
   83cea:	6601      	str	r1, [r0, #96]	; 0x60
   83cec:	e7f5      	b.n	83cda <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   83cee:	6541      	str	r1, [r0, #84]	; 0x54
   83cf0:	e7f5      	b.n	83cde <pio_set_output+0xe>
		p_pio->PIO_CODR = ul_mask;
   83cf2:	6341      	str	r1, [r0, #52]	; 0x34
   83cf4:	e7f5      	b.n	83ce2 <pio_set_output+0x12>

00083cf6 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   83cf6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
   83cfa:	4770      	bx	lr

00083cfc <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   83cfc:	6381      	str	r1, [r0, #56]	; 0x38
}
   83cfe:	4770      	bx	lr

00083d00 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83d00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83d02:	4770      	bx	lr

00083d04 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83d04:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83d06:	4770      	bx	lr

00083d08 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83d08:	0943      	lsrs	r3, r0, #5
   83d0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d0e:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83d12:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83d16:	f000 001f 	and.w	r0, r0, #31
   83d1a:	fa23 f000 	lsr.w	r0, r3, r0
}
   83d1e:	f000 0001 	and.w	r0, r0, #1
   83d22:	4770      	bx	lr

00083d24 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83d24:	0943      	lsrs	r3, r0, #5
   83d26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d2a:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83d2e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83d30:	f000 001f 	and.w	r0, r0, #31
   83d34:	2201      	movs	r2, #1
   83d36:	fa02 f000 	lsl.w	r0, r2, r0
   83d3a:	6318      	str	r0, [r3, #48]	; 0x30
}
   83d3c:	4770      	bx	lr

00083d3e <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83d3e:	0943      	lsrs	r3, r0, #5
   83d40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d44:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83d48:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83d4a:	f000 001f 	and.w	r0, r0, #31
   83d4e:	2201      	movs	r2, #1
   83d50:	fa02 f000 	lsl.w	r0, r2, r0
   83d54:	6358      	str	r0, [r3, #52]	; 0x34
}
   83d56:	4770      	bx	lr

00083d58 <pio_configure_pin>:
{
   83d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   83d5a:	b083      	sub	sp, #12
   83d5c:	460e      	mov	r6, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83d5e:	0943      	lsrs	r3, r0, #5
   83d60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83d64:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83d68:	025d      	lsls	r5, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83d6a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   83d6e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83d72:	d032      	beq.n	83dda <pio_configure_pin+0x82>
   83d74:	d818      	bhi.n	83da8 <pio_configure_pin+0x50>
   83d76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83d7a:	d01d      	beq.n	83db8 <pio_configure_pin+0x60>
   83d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83d80:	bf18      	it	ne
   83d82:	2000      	movne	r0, #0
   83d84:	d116      	bne.n	83db4 <pio_configure_pin+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83d86:	f000 001f 	and.w	r0, r0, #31
   83d8a:	2401      	movs	r4, #1
   83d8c:	4084      	lsls	r4, r0
   83d8e:	4622      	mov	r2, r4
   83d90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83d94:	4628      	mov	r0, r5
   83d96:	4b21      	ldr	r3, [pc, #132]	; (83e1c <pio_configure_pin+0xc4>)
   83d98:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83d9a:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83d9e:	bf12      	itee	ne
   83da0:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83da2:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83da4:	2001      	moveq	r0, #1
   83da6:	e005      	b.n	83db4 <pio_configure_pin+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83da8:	f001 43e0 	and.w	r3, r1, #1879048192	; 0x70000000
   83dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83db0:	d01e      	beq.n	83df0 <pio_configure_pin+0x98>
   83db2:	2000      	movs	r0, #0
}
   83db4:	b003      	add	sp, #12
   83db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83db8:	f000 001f 	and.w	r0, r0, #31
   83dbc:	2401      	movs	r4, #1
   83dbe:	4084      	lsls	r4, r0
   83dc0:	4622      	mov	r2, r4
   83dc2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83dc6:	4628      	mov	r0, r5
   83dc8:	4b14      	ldr	r3, [pc, #80]	; (83e1c <pio_configure_pin+0xc4>)
   83dca:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83dcc:	f016 0001 	ands.w	r0, r6, #1
		p_pio->PIO_PUER = ul_mask;
   83dd0:	bf12      	itee	ne
   83dd2:	666c      	strne	r4, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83dd4:	662c      	streq	r4, [r5, #96]	; 0x60
	return 1;
   83dd6:	2001      	moveq	r0, #1
   83dd8:	e7ec      	b.n	83db4 <pio_configure_pin+0x5c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83dda:	f000 011f 	and.w	r1, r0, #31
   83dde:	2401      	movs	r4, #1
   83de0:	4632      	mov	r2, r6
   83de2:	fa04 f101 	lsl.w	r1, r4, r1
   83de6:	4628      	mov	r0, r5
   83de8:	4b0d      	ldr	r3, [pc, #52]	; (83e20 <pio_configure_pin+0xc8>)
   83dea:	4798      	blx	r3
	return 1;
   83dec:	4620      	mov	r0, r4
		break;
   83dee:	e7e1      	b.n	83db4 <pio_configure_pin+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83df0:	f001 5260 	and.w	r2, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83df4:	f000 011f 	and.w	r1, r0, #31
   83df8:	2701      	movs	r7, #1
   83dfa:	ea06 0307 	and.w	r3, r6, r7
   83dfe:	9300      	str	r3, [sp, #0]
   83e00:	f3c6 0380 	ubfx	r3, r6, #2, #1
   83e04:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83e08:	bf14      	ite	ne
   83e0a:	2200      	movne	r2, #0
   83e0c:	2201      	moveq	r2, #1
   83e0e:	fa07 f101 	lsl.w	r1, r7, r1
   83e12:	4628      	mov	r0, r5
   83e14:	4c03      	ldr	r4, [pc, #12]	; (83e24 <pio_configure_pin+0xcc>)
   83e16:	47a0      	blx	r4
	return 1;
   83e18:	4638      	mov	r0, r7
		break;
   83e1a:	e7cb      	b.n	83db4 <pio_configure_pin+0x5c>
   83e1c:	00083c63 	.word	0x00083c63
   83e20:	00083c9f 	.word	0x00083c9f
   83e24:	00083cd1 	.word	0x00083cd1

00083e28 <pio_configure_pin_group>:
{
   83e28:	b570      	push	{r4, r5, r6, lr}
   83e2a:	b082      	sub	sp, #8
   83e2c:	4605      	mov	r5, r0
   83e2e:	460e      	mov	r6, r1
   83e30:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   83e32:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   83e36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83e3a:	d029      	beq.n	83e90 <pio_configure_pin_group+0x68>
   83e3c:	d814      	bhi.n	83e68 <pio_configure_pin_group+0x40>
   83e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83e42:	d019      	beq.n	83e78 <pio_configure_pin_group+0x50>
   83e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83e48:	bf18      	it	ne
   83e4a:	2000      	movne	r0, #0
   83e4c:	d112      	bne.n	83e74 <pio_configure_pin_group+0x4c>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83e4e:	460a      	mov	r2, r1
   83e50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83e54:	4628      	mov	r0, r5
   83e56:	4b18      	ldr	r3, [pc, #96]	; (83eb8 <pio_configure_pin_group+0x90>)
   83e58:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83e5a:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83e5e:	bf12      	itee	ne
   83e60:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83e62:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83e64:	2001      	moveq	r0, #1
   83e66:	e005      	b.n	83e74 <pio_configure_pin_group+0x4c>
	switch (ul_flags & PIO_TYPE_Msk) {
   83e68:	f002 43e0 	and.w	r3, r2, #1879048192	; 0x70000000
   83e6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83e70:	d012      	beq.n	83e98 <pio_configure_pin_group+0x70>
   83e72:	2000      	movs	r0, #0
}
   83e74:	b002      	add	sp, #8
   83e76:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83e78:	460a      	mov	r2, r1
   83e7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83e7e:	4b0e      	ldr	r3, [pc, #56]	; (83eb8 <pio_configure_pin_group+0x90>)
   83e80:	4798      	blx	r3
	if (ul_pull_up_enable) {
   83e82:	f014 0001 	ands.w	r0, r4, #1
		p_pio->PIO_PUER = ul_mask;
   83e86:	bf12      	itee	ne
   83e88:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83e8a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   83e8c:	2001      	moveq	r0, #1
   83e8e:	e7f1      	b.n	83e74 <pio_configure_pin_group+0x4c>
		pio_set_input(p_pio, ul_mask, ul_flags);
   83e90:	4b0a      	ldr	r3, [pc, #40]	; (83ebc <pio_configure_pin_group+0x94>)
   83e92:	4798      	blx	r3
	return 1;
   83e94:	2001      	movs	r0, #1
		break;
   83e96:	e7ed      	b.n	83e74 <pio_configure_pin_group+0x4c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83e98:	f002 5260 	and.w	r2, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83e9c:	f004 0301 	and.w	r3, r4, #1
   83ea0:	9300      	str	r3, [sp, #0]
   83ea2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   83ea6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   83eaa:	bf14      	ite	ne
   83eac:	2200      	movne	r2, #0
   83eae:	2201      	moveq	r2, #1
   83eb0:	4c03      	ldr	r4, [pc, #12]	; (83ec0 <pio_configure_pin_group+0x98>)
   83eb2:	47a0      	blx	r4
	return 1;
   83eb4:	2001      	movs	r0, #1
		break;
   83eb6:	e7dd      	b.n	83e74 <pio_configure_pin_group+0x4c>
   83eb8:	00083c63 	.word	0x00083c63
   83ebc:	00083c9f 	.word	0x00083c9f
   83ec0:	00083cd1 	.word	0x00083cd1

00083ec4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ec8:	4604      	mov	r4, r0
   83eca:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83ecc:	4b0e      	ldr	r3, [pc, #56]	; (83f08 <pio_handler_process+0x44>)
   83ece:	4798      	blx	r3
   83ed0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83ed2:	4620      	mov	r0, r4
   83ed4:	4b0d      	ldr	r3, [pc, #52]	; (83f0c <pio_handler_process+0x48>)
   83ed6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83ed8:	4005      	ands	r5, r0
   83eda:	d013      	beq.n	83f04 <pio_handler_process+0x40>
   83edc:	4c0c      	ldr	r4, [pc, #48]	; (83f10 <pio_handler_process+0x4c>)
   83ede:	f104 0860 	add.w	r8, r4, #96	; 0x60
   83ee2:	e003      	b.n	83eec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83ee4:	4544      	cmp	r4, r8
   83ee6:	d00d      	beq.n	83f04 <pio_handler_process+0x40>
		while (status != 0) {
   83ee8:	3410      	adds	r4, #16
   83eea:	b15d      	cbz	r5, 83f04 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   83eec:	6820      	ldr	r0, [r4, #0]
   83eee:	42b0      	cmp	r0, r6
   83ef0:	d1f8      	bne.n	83ee4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83ef2:	6861      	ldr	r1, [r4, #4]
   83ef4:	4229      	tst	r1, r5
   83ef6:	d0f5      	beq.n	83ee4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83ef8:	68e3      	ldr	r3, [r4, #12]
   83efa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   83efc:	6863      	ldr	r3, [r4, #4]
   83efe:	ea25 0503 	bic.w	r5, r5, r3
   83f02:	e7ef      	b.n	83ee4 <pio_handler_process+0x20>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f08:	00083d01 	.word	0x00083d01
   83f0c:	00083d05 	.word	0x00083d05
   83f10:	20001e0c 	.word	0x20001e0c

00083f14 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83f14:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   83f16:	210a      	movs	r1, #10
   83f18:	4801      	ldr	r0, [pc, #4]	; (83f20 <PIOA_Handler+0xc>)
   83f1a:	4b02      	ldr	r3, [pc, #8]	; (83f24 <PIOA_Handler+0x10>)
   83f1c:	4798      	blx	r3
}
   83f1e:	bd08      	pop	{r3, pc}
   83f20:	400e0c00 	.word	0x400e0c00
   83f24:	00083ec5 	.word	0x00083ec5

00083f28 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83f28:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   83f2a:	210b      	movs	r1, #11
   83f2c:	4801      	ldr	r0, [pc, #4]	; (83f34 <PIOB_Handler+0xc>)
   83f2e:	4b02      	ldr	r3, [pc, #8]	; (83f38 <PIOB_Handler+0x10>)
   83f30:	4798      	blx	r3
}
   83f32:	bd08      	pop	{r3, pc}
   83f34:	400e0e00 	.word	0x400e0e00
   83f38:	00083ec5 	.word	0x00083ec5

00083f3c <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83f3c:	4a16      	ldr	r2, [pc, #88]	; (83f98 <pmc_switch_mck_to_mainck+0x5c>)
   83f3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83f40:	f023 0303 	bic.w	r3, r3, #3
   83f44:	f043 0301 	orr.w	r3, r3, #1
   83f48:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83f4a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83f4c:	f013 0f08 	tst.w	r3, #8
   83f50:	d10a      	bne.n	83f68 <pmc_switch_mck_to_mainck+0x2c>
   83f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83f56:	4910      	ldr	r1, [pc, #64]	; (83f98 <pmc_switch_mck_to_mainck+0x5c>)
   83f58:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83f5a:	f012 0f08 	tst.w	r2, #8
   83f5e:	d103      	bne.n	83f68 <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83f60:	3b01      	subs	r3, #1
   83f62:	d1f9      	bne.n	83f58 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   83f64:	2001      	movs	r0, #1
   83f66:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83f68:	4a0b      	ldr	r2, [pc, #44]	; (83f98 <pmc_switch_mck_to_mainck+0x5c>)
   83f6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83f70:	4303      	orrs	r3, r0
   83f72:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83f74:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83f76:	f010 0008 	ands.w	r0, r0, #8
   83f7a:	d10a      	bne.n	83f92 <pmc_switch_mck_to_mainck+0x56>
   83f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83f80:	4905      	ldr	r1, [pc, #20]	; (83f98 <pmc_switch_mck_to_mainck+0x5c>)
   83f82:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83f84:	f012 0f08 	tst.w	r2, #8
   83f88:	d105      	bne.n	83f96 <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83f8a:	3b01      	subs	r3, #1
   83f8c:	d1f9      	bne.n	83f82 <pmc_switch_mck_to_mainck+0x46>
			return 1;
   83f8e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83f90:	4770      	bx	lr
	return 0;
   83f92:	2000      	movs	r0, #0
   83f94:	4770      	bx	lr
   83f96:	4770      	bx	lr
   83f98:	400e0400 	.word	0x400e0400

00083f9c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83f9c:	4a16      	ldr	r2, [pc, #88]	; (83ff8 <pmc_switch_mck_to_pllack+0x5c>)
   83f9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   83fa4:	4303      	orrs	r3, r0
   83fa6:	6313      	str	r3, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83fa8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83faa:	f013 0f08 	tst.w	r3, #8
   83fae:	d10a      	bne.n	83fc6 <pmc_switch_mck_to_pllack+0x2a>
   83fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83fb4:	4910      	ldr	r1, [pc, #64]	; (83ff8 <pmc_switch_mck_to_pllack+0x5c>)
   83fb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83fb8:	f012 0f08 	tst.w	r2, #8
   83fbc:	d103      	bne.n	83fc6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83fbe:	3b01      	subs	r3, #1
   83fc0:	d1f9      	bne.n	83fb6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   83fc2:	2001      	movs	r0, #1
   83fc4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83fc6:	4a0c      	ldr	r2, [pc, #48]	; (83ff8 <pmc_switch_mck_to_pllack+0x5c>)
   83fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83fca:	f023 0303 	bic.w	r3, r3, #3
   83fce:	f043 0302 	orr.w	r3, r3, #2
   83fd2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83fd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
   83fd6:	f010 0008 	ands.w	r0, r0, #8
   83fda:	d10a      	bne.n	83ff2 <pmc_switch_mck_to_pllack+0x56>
   83fdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83fe0:	4905      	ldr	r1, [pc, #20]	; (83ff8 <pmc_switch_mck_to_pllack+0x5c>)
   83fe2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83fe4:	f012 0f08 	tst.w	r2, #8
   83fe8:	d105      	bne.n	83ff6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83fea:	3b01      	subs	r3, #1
   83fec:	d1f9      	bne.n	83fe2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   83fee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   83ff0:	4770      	bx	lr
	return 0;
   83ff2:	2000      	movs	r0, #0
   83ff4:	4770      	bx	lr
   83ff6:	4770      	bx	lr
   83ff8:	400e0400 	.word	0x400e0400

00083ffc <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   83ffc:	4908      	ldr	r1, [pc, #32]	; (84020 <pmc_osc_enable_main_xtal+0x24>)
   83ffe:	6a0a      	ldr	r2, [r1, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84000:	0203      	lsls	r3, r0, #8
   84002:	b29b      	uxth	r3, r3
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84004:	f022 0203 	bic.w	r2, r2, #3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84008:	4313      	orrs	r3, r2
   8400a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8400e:	f043 0301 	orr.w	r3, r3, #1
	PMC->CKGR_MOR = mor;
   84012:	620b      	str	r3, [r1, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84014:	460a      	mov	r2, r1
   84016:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84018:	f013 0f01 	tst.w	r3, #1
   8401c:	d0fb      	beq.n	84016 <pmc_osc_enable_main_xtal+0x1a>
}
   8401e:	4770      	bx	lr
   84020:	400e0400 	.word	0x400e0400

00084024 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84024:	4b02      	ldr	r3, [pc, #8]	; (84030 <pmc_osc_is_ready_main_xtal+0xc>)
   84026:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84028:	f000 0001 	and.w	r0, r0, #1
   8402c:	4770      	bx	lr
   8402e:	bf00      	nop
   84030:	400e0400 	.word	0x400e0400

00084034 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84034:	4b02      	ldr	r3, [pc, #8]	; (84040 <pmc_osc_is_ready_mainck+0xc>)
   84036:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84038:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8403c:	4770      	bx	lr
   8403e:	bf00      	nop
   84040:	400e0400 	.word	0x400e0400

00084044 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84044:	4b06      	ldr	r3, [pc, #24]	; (84060 <pmc_mainck_osc_select+0x1c>)
   84046:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84048:	b130      	cbz	r0, 84058 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
   8404a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8404e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84052:	4a03      	ldr	r2, [pc, #12]	; (84060 <pmc_mainck_osc_select+0x1c>)
   84054:	6213      	str	r3, [r2, #32]
}
   84056:	4770      	bx	lr
		mor &= ~CKGR_MOR_MOSCSEL;
   84058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8405c:	e7f7      	b.n	8404e <pmc_mainck_osc_select+0xa>
   8405e:	bf00      	nop
   84060:	400e0400 	.word	0x400e0400

00084064 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84064:	4b02      	ldr	r3, [pc, #8]	; (84070 <pmc_disable_pllack+0xc>)
   84066:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8406a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8406c:	4770      	bx	lr
   8406e:	bf00      	nop
   84070:	400e0400 	.word	0x400e0400

00084074 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84074:	4b02      	ldr	r3, [pc, #8]	; (84080 <pmc_is_locked_pllack+0xc>)
   84076:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84078:	f000 0002 	and.w	r0, r0, #2
   8407c:	4770      	bx	lr
   8407e:	bf00      	nop
   84080:	400e0400 	.word	0x400e0400

00084084 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84084:	4b02      	ldr	r3, [pc, #8]	; (84090 <pmc_is_locked_upll+0xc>)
   84086:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84088:	f000 0040 	and.w	r0, r0, #64	; 0x40
   8408c:	4770      	bx	lr
   8408e:	bf00      	nop
   84090:	400e0400 	.word	0x400e0400

00084094 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84094:	281d      	cmp	r0, #29
   84096:	d80c      	bhi.n	840b2 <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84098:	4b08      	ldr	r3, [pc, #32]	; (840bc <pmc_enable_periph_clk+0x28>)
   8409a:	699a      	ldr	r2, [r3, #24]
   8409c:	2301      	movs	r3, #1
   8409e:	4083      	lsls	r3, r0
   840a0:	4393      	bics	r3, r2
   840a2:	d008      	beq.n	840b6 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
   840a4:	2301      	movs	r3, #1
   840a6:	fa03 f000 	lsl.w	r0, r3, r0
   840aa:	4b04      	ldr	r3, [pc, #16]	; (840bc <pmc_enable_periph_clk+0x28>)
   840ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   840ae:	2000      	movs	r0, #0
   840b0:	4770      	bx	lr
		return 1;
   840b2:	2001      	movs	r0, #1
   840b4:	4770      	bx	lr
	return 0;
   840b6:	2000      	movs	r0, #0
}
   840b8:	4770      	bx	lr
   840ba:	bf00      	nop
   840bc:	400e0400 	.word	0x400e0400

000840c0 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   840c0:	281d      	cmp	r0, #29
   840c2:	d80e      	bhi.n	840e2 <pmc_disable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   840c4:	4b08      	ldr	r3, [pc, #32]	; (840e8 <pmc_disable_periph_clk+0x28>)
   840c6:	699a      	ldr	r2, [r3, #24]
   840c8:	2301      	movs	r3, #1
   840ca:	4083      	lsls	r3, r0
   840cc:	4393      	bics	r3, r2
   840ce:	d001      	beq.n	840d4 <pmc_disable_periph_clk+0x14>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   840d0:	2000      	movs	r0, #0
}
   840d2:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   840d4:	2301      	movs	r3, #1
   840d6:	fa03 f000 	lsl.w	r0, r3, r0
   840da:	4b03      	ldr	r3, [pc, #12]	; (840e8 <pmc_disable_periph_clk+0x28>)
   840dc:	6158      	str	r0, [r3, #20]
	return 0;
   840de:	2000      	movs	r0, #0
   840e0:	4770      	bx	lr
		return 1;
   840e2:	2001      	movs	r0, #1
   840e4:	4770      	bx	lr
   840e6:	bf00      	nop
   840e8:	400e0400 	.word	0x400e0400

000840ec <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   840ec:	f44f 7380 	mov.w	r3, #256	; 0x100
   840f0:	4083      	lsls	r3, r0
   840f2:	4a01      	ldr	r2, [pc, #4]	; (840f8 <pmc_enable_pck+0xc>)
   840f4:	6013      	str	r3, [r2, #0]
}
   840f6:	4770      	bx	lr
   840f8:	400e0400 	.word	0x400e0400

000840fc <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   840fc:	4b03      	ldr	r3, [pc, #12]	; (8410c <pmc_set_fast_startup_input+0x10>)
   840fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84100:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84104:	4310      	orrs	r0, r2
   84106:	6718      	str	r0, [r3, #112]	; 0x70
}
   84108:	4770      	bx	lr
   8410a:	bf00      	nop
   8410c:	400e0400 	.word	0x400e0400

00084110 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84110:	4b02      	ldr	r3, [pc, #8]	; (8411c <pmc_is_wakeup_clocks_restored+0xc>)
   84112:	7818      	ldrb	r0, [r3, #0]
}
   84114:	f080 0001 	eor.w	r0, r0, #1
   84118:	4770      	bx	lr
   8411a:	bf00      	nop
   8411c:	20001e7c 	.word	0x20001e7c

00084120 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   84120:	b508      	push	{r3, lr}
   84122:	2014      	movs	r0, #20
   84124:	4b01      	ldr	r3, [pc, #4]	; (8412c <spi_enable_clock+0xc>)
   84126:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   84128:	bd08      	pop	{r3, pc}
   8412a:	bf00      	nop
   8412c:	00084095 	.word	0x00084095

00084130 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   84130:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   84132:	2014      	movs	r0, #20
   84134:	4b01      	ldr	r3, [pc, #4]	; (8413c <spi_disable_clock+0xc>)
   84136:	4798      	blx	r3
		}
	#endif
#elif SAM4L
	sysclk_disable_peripheral_clock(p_spi);
#endif
}
   84138:	bd08      	pop	{r3, pc}
   8413a:	bf00      	nop
   8413c:	000840c1 	.word	0x000840c1

00084140 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   84140:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   84142:	f643 2399 	movw	r3, #15001	; 0x3a99
   84146:	6904      	ldr	r4, [r0, #16]
   84148:	f014 0f01 	tst.w	r4, #1
   8414c:	d103      	bne.n	84156 <spi_read+0x16>
		if (!timeout--) {
   8414e:	3b01      	subs	r3, #1
   84150:	d1f9      	bne.n	84146 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   84152:	2001      	movs	r0, #1
   84154:	e009      	b.n	8416a <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   84156:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   84158:	6840      	ldr	r0, [r0, #4]
   8415a:	f010 0f02 	tst.w	r0, #2
	if (spi_get_peripheral_select_mode(p_spi)) {
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   8415e:	bf1c      	itt	ne
   84160:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   84164:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   84166:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   84168:	2000      	movs	r0, #0
}
   8416a:	bc10      	pop	{r4}
   8416c:	4770      	bx	lr

0008416e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8416e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   84170:	f643 2499 	movw	r4, #15001	; 0x3a99
   84174:	6905      	ldr	r5, [r0, #16]
   84176:	f015 0f02 	tst.w	r5, #2
   8417a:	d103      	bne.n	84184 <spi_write+0x16>
		if (!timeout--) {
   8417c:	3c01      	subs	r4, #1
   8417e:	d1f9      	bne.n	84174 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   84180:	2001      	movs	r0, #1
   84182:	e00c      	b.n	8419e <spi_write+0x30>
   84184:	6844      	ldr	r4, [r0, #4]
   84186:	f014 0f02 	tst.w	r4, #2
   8418a:	d006      	beq.n	8419a <spi_write+0x2c>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8418c:	0412      	lsls	r2, r2, #16
   8418e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   84192:	4311      	orrs	r1, r2
		if (uc_last) {
   84194:	b10b      	cbz	r3, 8419a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   84196:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   8419a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   8419c:	2000      	movs	r0, #0
}
   8419e:	bc30      	pop	{r4, r5}
   841a0:	4770      	bx	lr

000841a2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   841a2:	b132      	cbz	r2, 841b2 <spi_set_clock_polarity+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   841a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   841a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   841aa:	f043 0301 	orr.w	r3, r3, #1
   841ae:	6303      	str	r3, [r0, #48]	; 0x30
   841b0:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   841b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   841b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   841b8:	f023 0301 	bic.w	r3, r3, #1
   841bc:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   841be:	4770      	bx	lr

000841c0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   841c0:	b132      	cbz	r2, 841d0 <spi_set_clock_phase+0x10>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   841c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   841c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   841c8:	f043 0302 	orr.w	r3, r3, #2
   841cc:	6303      	str	r3, [r0, #48]	; 0x30
   841ce:	4770      	bx	lr
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   841d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   841d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   841d6:	f023 0302 	bic.w	r3, r3, #2
   841da:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   841dc:	4770      	bx	lr

000841de <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   841de:	1e43      	subs	r3, r0, #1
   841e0:	440b      	add	r3, r1
   841e2:	fbb3 f0f0 	udiv	r0, r3, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   841e6:	1e43      	subs	r3, r0, #1
   841e8:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   841ea:	bf94      	ite	ls
   841ec:	b200      	sxthls	r0, r0
		return -1;
   841ee:	f04f 30ff 	movhi.w	r0, #4294967295
}
   841f2:	4770      	bx	lr

000841f4 <spi_set_baudrate_div>:
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   841f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   841f8:	6b08      	ldr	r0, [r1, #48]	; 0x30
   841fa:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
   841fe:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84200:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   84206:	630b      	str	r3, [r1, #48]	; 0x30
}
   84208:	4770      	bx	lr
	...

0008420c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   8420c:	4603      	mov	r3, r0
   8420e:	b9c0      	cbnz	r0, 84242 <udd_sleep_mode+0x36>
   84210:	4a18      	ldr	r2, [pc, #96]	; (84274 <udd_sleep_mode+0x68>)
   84212:	7812      	ldrb	r2, [r2, #0]
   84214:	b192      	cbz	r2, 8423c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84216:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8421a:	b672      	cpsid	i
   8421c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84220:	4a15      	ldr	r2, [pc, #84]	; (84278 <udd_sleep_mode+0x6c>)
   84222:	2100      	movs	r1, #0
   84224:	7011      	strb	r1, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84226:	4915      	ldr	r1, [pc, #84]	; (8427c <udd_sleep_mode+0x70>)
   84228:	788a      	ldrb	r2, [r1, #2]
   8422a:	3a01      	subs	r2, #1
   8422c:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8422e:	b928      	cbnz	r0, 8423c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   84230:	4a11      	ldr	r2, [pc, #68]	; (84278 <udd_sleep_mode+0x6c>)
   84232:	2101      	movs	r1, #1
   84234:	7011      	strb	r1, [r2, #0]
   84236:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8423a:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8423c:	4a0d      	ldr	r2, [pc, #52]	; (84274 <udd_sleep_mode+0x68>)
   8423e:	7013      	strb	r3, [r2, #0]
}
   84240:	4770      	bx	lr
	if (b_idle && !udd_b_idle) {
   84242:	4a0c      	ldr	r2, [pc, #48]	; (84274 <udd_sleep_mode+0x68>)
   84244:	7812      	ldrb	r2, [r2, #0]
   84246:	2a00      	cmp	r2, #0
   84248:	d1f8      	bne.n	8423c <udd_sleep_mode+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8424a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   8424e:	b672      	cpsid	i
   84250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84254:	4a08      	ldr	r2, [pc, #32]	; (84278 <udd_sleep_mode+0x6c>)
   84256:	2100      	movs	r1, #0
   84258:	7011      	strb	r1, [r2, #0]
	++sleepmgr_locks[mode];
   8425a:	4908      	ldr	r1, [pc, #32]	; (8427c <udd_sleep_mode+0x70>)
   8425c:	788a      	ldrb	r2, [r1, #2]
   8425e:	3201      	adds	r2, #1
   84260:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84262:	2800      	cmp	r0, #0
   84264:	d1ea      	bne.n	8423c <udd_sleep_mode+0x30>
		cpu_irq_enable();
   84266:	4a04      	ldr	r2, [pc, #16]	; (84278 <udd_sleep_mode+0x6c>)
   84268:	2101      	movs	r1, #1
   8426a:	7011      	strb	r1, [r2, #0]
   8426c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84270:	b662      	cpsie	i
}
   84272:	e7e3      	b.n	8423c <udd_sleep_mode+0x30>
   84274:	20001e7e 	.word	0x20001e7e
   84278:	200006e6 	.word	0x200006e6
   8427c:	20002b7c 	.word	0x20002b7c

00084280 <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84280:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84284:	b672      	cpsid	i
   84286:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8428a:	4a0e      	ldr	r2, [pc, #56]	; (842c4 <udd_ctrl_init+0x44>)
   8428c:	2100      	movs	r1, #0
   8428e:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84290:	4a0d      	ldr	r2, [pc, #52]	; (842c8 <udd_ctrl_init+0x48>)
   84292:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84296:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8429a:	b92b      	cbnz	r3, 842a8 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   8429c:	4b09      	ldr	r3, [pc, #36]	; (842c4 <udd_ctrl_init+0x44>)
   8429e:	2201      	movs	r2, #1
   842a0:	701a      	strb	r2, [r3, #0]
   842a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842a6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   842a8:	4b07      	ldr	r3, [pc, #28]	; (842c8 <udd_ctrl_init+0x48>)
   842aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   842ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   842b2:	4a06      	ldr	r2, [pc, #24]	; (842cc <udd_ctrl_init+0x4c>)
   842b4:	2300      	movs	r3, #0
   842b6:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   842b8:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   842ba:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   842bc:	4a04      	ldr	r2, [pc, #16]	; (842d0 <udd_ctrl_init+0x50>)
   842be:	7013      	strb	r3, [r2, #0]
}
   842c0:	4770      	bx	lr
   842c2:	bf00      	nop
   842c4:	200006e6 	.word	0x200006e6
   842c8:	400a4000 	.word	0x400a4000
   842cc:	20002b90 	.word	0x20002b90
   842d0:	20001e84 	.word	0x20001e84

000842d4 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   842d4:	4b03      	ldr	r3, [pc, #12]	; (842e4 <udd_ctrl_stall_data+0x10>)
   842d6:	2205      	movs	r2, #5
   842d8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   842da:	4b03      	ldr	r3, [pc, #12]	; (842e8 <udd_ctrl_stall_data+0x14>)
   842dc:	2220      	movs	r2, #32
   842de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   842e2:	4770      	bx	lr
   842e4:	20001e84 	.word	0x20001e84
   842e8:	400a4000 	.word	0x400a4000

000842ec <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   842ec:	4b11      	ldr	r3, [pc, #68]	; (84334 <udd_ctrl_send_zlp_in+0x48>)
   842ee:	2203      	movs	r2, #3
   842f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   842f6:	b672      	cpsid	i
   842f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842fc:	4b0e      	ldr	r3, [pc, #56]	; (84338 <udd_ctrl_send_zlp_in+0x4c>)
   842fe:	2200      	movs	r2, #0
   84300:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84302:	4b0e      	ldr	r3, [pc, #56]	; (8433c <udd_ctrl_send_zlp_in+0x50>)
   84304:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84308:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8430c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84310:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84314:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8431c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84320:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84324:	b929      	cbnz	r1, 84332 <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84326:	4b04      	ldr	r3, [pc, #16]	; (84338 <udd_ctrl_send_zlp_in+0x4c>)
   84328:	2201      	movs	r2, #1
   8432a:	701a      	strb	r2, [r3, #0]
   8432c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84330:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
   84332:	4770      	bx	lr
   84334:	20001e84 	.word	0x20001e84
   84338:	200006e6 	.word	0x200006e6
   8433c:	400a4000 	.word	0x400a4000

00084340 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   84340:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   84342:	4b02      	ldr	r3, [pc, #8]	; (8434c <udd_ctrl_endofrequest+0xc>)
   84344:	691b      	ldr	r3, [r3, #16]
   84346:	b103      	cbz	r3, 8434a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84348:	4798      	blx	r3
	}
}
   8434a:	bd08      	pop	{r3, pc}
   8434c:	20002b90 	.word	0x20002b90

00084350 <udd_ctrl_in_sent>:
{
   84350:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84352:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84356:	b672      	cpsid	i
   84358:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8435c:	4a4c      	ldr	r2, [pc, #304]	; (84490 <udd_ctrl_in_sent+0x140>)
   8435e:	2100      	movs	r1, #0
   84360:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   84362:	4a4c      	ldr	r2, [pc, #304]	; (84494 <udd_ctrl_in_sent+0x144>)
   84364:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84368:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   8436c:	b92b      	cbnz	r3, 8437a <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   8436e:	4b48      	ldr	r3, [pc, #288]	; (84490 <udd_ctrl_in_sent+0x140>)
   84370:	2201      	movs	r2, #1
   84372:	701a      	strb	r2, [r3, #0]
   84374:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84378:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8437a:	4b47      	ldr	r3, [pc, #284]	; (84498 <udd_ctrl_in_sent+0x148>)
   8437c:	781b      	ldrb	r3, [r3, #0]
   8437e:	2b03      	cmp	r3, #3
   84380:	d05a      	beq.n	84438 <udd_ctrl_in_sent+0xe8>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84382:	4b46      	ldr	r3, [pc, #280]	; (8449c <udd_ctrl_in_sent+0x14c>)
   84384:	881b      	ldrh	r3, [r3, #0]
   84386:	4a46      	ldr	r2, [pc, #280]	; (844a0 <udd_ctrl_in_sent+0x150>)
   84388:	8994      	ldrh	r4, [r2, #12]
   8438a:	1ae4      	subs	r4, r4, r3
   8438c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8438e:	b9c4      	cbnz	r4, 843c2 <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84390:	4a44      	ldr	r2, [pc, #272]	; (844a4 <udd_ctrl_in_sent+0x154>)
   84392:	8811      	ldrh	r1, [r2, #0]
   84394:	440b      	add	r3, r1
   84396:	b29b      	uxth	r3, r3
   84398:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8439a:	4a41      	ldr	r2, [pc, #260]	; (844a0 <udd_ctrl_in_sent+0x150>)
   8439c:	88d2      	ldrh	r2, [r2, #6]
   8439e:	429a      	cmp	r2, r3
   843a0:	d04f      	beq.n	84442 <udd_ctrl_in_sent+0xf2>
				|| b_shortpacket) {
   843a2:	4b41      	ldr	r3, [pc, #260]	; (844a8 <udd_ctrl_in_sent+0x158>)
   843a4:	781b      	ldrb	r3, [r3, #0]
   843a6:	2b00      	cmp	r3, #0
   843a8:	d14b      	bne.n	84442 <udd_ctrl_in_sent+0xf2>
		if ((!udd_g_ctrlreq.over_under_run)
   843aa:	4b3d      	ldr	r3, [pc, #244]	; (844a0 <udd_ctrl_in_sent+0x150>)
   843ac:	695b      	ldr	r3, [r3, #20]
   843ae:	2b00      	cmp	r3, #0
   843b0:	d06c      	beq.n	8448c <udd_ctrl_in_sent+0x13c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   843b2:	4798      	blx	r3
   843b4:	2800      	cmp	r0, #0
   843b6:	d069      	beq.n	8448c <udd_ctrl_in_sent+0x13c>
			udd_ctrl_payload_buf_cnt = 0;
   843b8:	4b38      	ldr	r3, [pc, #224]	; (8449c <udd_ctrl_in_sent+0x14c>)
   843ba:	2200      	movs	r2, #0
   843bc:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   843be:	4b38      	ldr	r3, [pc, #224]	; (844a0 <udd_ctrl_in_sent+0x150>)
   843c0:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   843c2:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = true;
   843c4:	bf92      	itee	ls
   843c6:	2201      	movls	r2, #1
		b_shortpacket = false;
   843c8:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   843ca:	2440      	movhi	r4, #64	; 0x40
   843cc:	4b36      	ldr	r3, [pc, #216]	; (844a8 <udd_ctrl_in_sent+0x158>)
   843ce:	701a      	strb	r2, [r3, #0]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   843d0:	4b33      	ldr	r3, [pc, #204]	; (844a0 <udd_ctrl_in_sent+0x150>)
   843d2:	689a      	ldr	r2, [r3, #8]
   843d4:	4b31      	ldr	r3, [pc, #196]	; (8449c <udd_ctrl_in_sent+0x14c>)
   843d6:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   843d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   843dc:	b672      	cpsid	i
   843de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   843e2:	4b2b      	ldr	r3, [pc, #172]	; (84490 <udd_ctrl_in_sent+0x140>)
   843e4:	2100      	movs	r1, #0
   843e6:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   843e8:	4b2a      	ldr	r3, [pc, #168]	; (84494 <udd_ctrl_in_sent+0x144>)
   843ea:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   843ee:	f413 7f00 	tst.w	r3, #512	; 0x200
   843f2:	d140      	bne.n	84476 <udd_ctrl_in_sent+0x126>
	for (i = 0; i < nb_remain; i++) {
   843f4:	b14c      	cbz	r4, 8440a <udd_ctrl_in_sent+0xba>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   843f6:	4402      	add	r2, r0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   843f8:	4b2c      	ldr	r3, [pc, #176]	; (844ac <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   843fa:	4619      	mov	r1, r3
   843fc:	3301      	adds	r3, #1
   843fe:	f812 0b01 	ldrb.w	r0, [r2], #1
   84402:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < nb_remain; i++) {
   84404:	b2d9      	uxtb	r1, r3
   84406:	42a1      	cmp	r1, r4
   84408:	d3f7      	bcc.n	843fa <udd_ctrl_in_sent+0xaa>
	udd_ctrl_payload_buf_cnt += nb_remain;
   8440a:	4a24      	ldr	r2, [pc, #144]	; (8449c <udd_ctrl_in_sent+0x14c>)
   8440c:	8813      	ldrh	r3, [r2, #0]
   8440e:	441c      	add	r4, r3
   84410:	8014      	strh	r4, [r2, #0]
	udd_ack_in_send(0);
   84412:	4b20      	ldr	r3, [pc, #128]	; (84494 <udd_ctrl_in_sent+0x144>)
   84414:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84418:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8441c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84420:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84424:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84428:	bb7d      	cbnz	r5, 8448a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   8442a:	4b19      	ldr	r3, [pc, #100]	; (84490 <udd_ctrl_in_sent+0x140>)
   8442c:	2201      	movs	r2, #1
   8442e:	701a      	strb	r2, [r3, #0]
   84430:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84434:	b662      	cpsie	i
}
   84436:	e028      	b.n	8448a <udd_ctrl_in_sent+0x13a>
		udd_ctrl_endofrequest();
   84438:	4b1d      	ldr	r3, [pc, #116]	; (844b0 <udd_ctrl_in_sent+0x160>)
   8443a:	4798      	blx	r3
		udd_ctrl_init();
   8443c:	4b1d      	ldr	r3, [pc, #116]	; (844b4 <udd_ctrl_in_sent+0x164>)
   8443e:	4798      	blx	r3
		return;
   84440:	e023      	b.n	8448a <udd_ctrl_in_sent+0x13a>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84442:	4b15      	ldr	r3, [pc, #84]	; (84498 <udd_ctrl_in_sent+0x148>)
   84444:	2204      	movs	r2, #4
   84446:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84448:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   8444c:	b672      	cpsid	i
   8444e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84452:	4b0f      	ldr	r3, [pc, #60]	; (84490 <udd_ctrl_in_sent+0x140>)
   84454:	2200      	movs	r2, #0
   84456:	701a      	strb	r2, [r3, #0]
	udd_ack_nak_in(0);
   84458:	4b0e      	ldr	r3, [pc, #56]	; (84494 <udd_ctrl_in_sent+0x144>)
   8445a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8445e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   84462:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84466:	b981      	cbnz	r1, 8448a <udd_ctrl_in_sent+0x13a>
		cpu_irq_enable();
   84468:	4b09      	ldr	r3, [pc, #36]	; (84490 <udd_ctrl_in_sent+0x140>)
   8446a:	2201      	movs	r2, #1
   8446c:	701a      	strb	r2, [r3, #0]
   8446e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84472:	b662      	cpsie	i
}
   84474:	e009      	b.n	8448a <udd_ctrl_in_sent+0x13a>
	if (cpu_irq_is_enabled_flags(flags))
   84476:	b92d      	cbnz	r5, 84484 <udd_ctrl_in_sent+0x134>
		cpu_irq_enable();
   84478:	4b05      	ldr	r3, [pc, #20]	; (84490 <udd_ctrl_in_sent+0x140>)
   8447a:	2201      	movs	r2, #1
   8447c:	701a      	strb	r2, [r3, #0]
   8447e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84482:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84484:	4b04      	ldr	r3, [pc, #16]	; (84498 <udd_ctrl_in_sent+0x148>)
   84486:	2204      	movs	r2, #4
   84488:	701a      	strb	r2, [r3, #0]
}
   8448a:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   8448c:	2201      	movs	r2, #1
   8448e:	e79d      	b.n	843cc <udd_ctrl_in_sent+0x7c>
   84490:	200006e6 	.word	0x200006e6
   84494:	400a4000 	.word	0x400a4000
   84498:	20001e84 	.word	0x20001e84
   8449c:	20001e80 	.word	0x20001e80
   844a0:	20002b90 	.word	0x20002b90
   844a4:	20001e82 	.word	0x20001e82
   844a8:	20001e7d 	.word	0x20001e7d
   844ac:	20180000 	.word	0x20180000
   844b0:	00084341 	.word	0x00084341
   844b4:	00084281 	.word	0x00084281

000844b8 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   844b8:	b538      	push	{r3, r4, r5, lr}
   844ba:	4603      	mov	r3, r0
   844bc:	4608      	mov	r0, r1
	if (ptr_job->busy == false) {
   844be:	7d19      	ldrb	r1, [r3, #20]
   844c0:	f011 0f01 	tst.w	r1, #1
   844c4:	d011      	beq.n	844ea <udd_ep_finish_job+0x32>
		return; // No on-going job
	}
	ptr_job->busy = false;
   844c6:	7d19      	ldrb	r1, [r3, #20]
   844c8:	f36f 0100 	bfc	r1, #0, #1
   844cc:	7519      	strb	r1, [r3, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   844ce:	681c      	ldr	r4, [r3, #0]
   844d0:	b15c      	cbz	r4, 844ea <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   844d2:	f102 0108 	add.w	r1, r2, #8
   844d6:	0149      	lsls	r1, r1, #5
   844d8:	4d04      	ldr	r5, [pc, #16]	; (844ec <udd_ep_finish_job+0x34>)
   844da:	5869      	ldr	r1, [r5, r1]
   844dc:	f011 0f08 	tst.w	r1, #8
		ep_num |= USB_EP_DIR_IN;
   844e0:	bf18      	it	ne
   844e2:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   844e6:	6899      	ldr	r1, [r3, #8]
   844e8:	47a0      	blx	r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   844ea:	bd38      	pop	{r3, r4, r5, pc}
   844ec:	400a4000 	.word	0x400a4000

000844f0 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   844f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   844f2:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   844f4:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   844f6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   844fa:	496c      	ldr	r1, [pc, #432]	; (846ac <udd_ep_trans_done+0x1bc>)
   844fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84500:	7d09      	ldrb	r1, [r1, #20]
   84502:	f011 0f01 	tst.w	r1, #1
   84506:	f000 80ca 	beq.w	8469e <udd_ep_trans_done+0x1ae>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8450a:	4601      	mov	r1, r0
   8450c:	4867      	ldr	r0, [pc, #412]	; (846ac <udd_ep_trans_done+0x1bc>)
   8450e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84512:	68cd      	ldr	r5, [r1, #12]
   84514:	6888      	ldr	r0, [r1, #8]
   84516:	4285      	cmp	r5, r0
   84518:	f000 80a6 	beq.w	84668 <udd_ep_trans_done+0x178>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8451c:	1b40      	subs	r0, r0, r5

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8451e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   84522:	d863      	bhi.n	845ec <udd_ep_trans_done+0xfc>
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   84524:	0404      	lsls	r4, r0, #16
		}
		if (Is_udd_endpoint_in(ep)) {
   84526:	0151      	lsls	r1, r2, #5
   84528:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8452c:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84530:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   84534:	f016 0f08 	tst.w	r6, #8
   84538:	d014      	beq.n	84564 <udd_ep_trans_done+0x74>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   8453a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8453e:	f006 0607 	and.w	r6, r6, #7
   84542:	2108      	movs	r1, #8
   84544:	40b1      	lsls	r1, r6
   84546:	3901      	subs	r1, #1
   84548:	4201      	tst	r1, r0
   8454a:	d068      	beq.n	8461e <udd_ep_trans_done+0x12e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8454c:	f044 0408 	orr.w	r4, r4, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84550:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84554:	4e55      	ldr	r6, [pc, #340]	; (846ac <udd_ep_trans_done+0x1bc>)
   84556:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   8455a:	7d0e      	ldrb	r6, [r1, #20]
   8455c:	f36f 0641 	bfc	r6, #1, #1
   84560:	750e      	strb	r6, [r1, #20]
   84562:	e05c      	b.n	8461e <udd_ep_trans_done+0x12e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84564:	0151      	lsls	r1, r2, #5
   84566:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8456a:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8456e:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   84572:	f3c6 1601 	ubfx	r6, r6, #4, #2
   84576:	2e01      	cmp	r6, #1
   84578:	d14f      	bne.n	8461a <udd_ep_trans_done+0x12a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8457a:	f8d1 6100 	ldr.w	r6, [r1, #256]	; 0x100
   8457e:	f006 0607 	and.w	r6, r6, #7
   84582:	2108      	movs	r1, #8
   84584:	40b1      	lsls	r1, r6
   84586:	4281      	cmp	r1, r0
   84588:	d247      	bcs.n	8461a <udd_ep_trans_done+0x12a>
   8458a:	e048      	b.n	8461e <udd_ep_trans_done+0x12e>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8458c:	f044 0421 	orr.w	r4, r4, #33	; 0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84590:	608c      	str	r4, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   84592:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84596:	4a45      	ldr	r2, [pc, #276]	; (846ac <udd_ep_trans_done+0x1bc>)
   84598:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8459c:	68d1      	ldr	r1, [r2, #12]
   8459e:	4401      	add	r1, r0
   845a0:	60d1      	str	r1, [r2, #12]
			ptr_job->buf_load = next_trans;
   845a2:	6110      	str	r0, [r2, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   845a4:	4a42      	ldr	r2, [pc, #264]	; (846b0 <udd_ep_trans_done+0x1c0>)
   845a6:	6911      	ldr	r1, [r2, #16]
   845a8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   845ac:	fa00 f303 	lsl.w	r3, r0, r3
   845b0:	430b      	orrs	r3, r1
   845b2:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   845b4:	2d00      	cmp	r5, #0
   845b6:	d172      	bne.n	8469e <udd_ep_trans_done+0x1ae>
		cpu_irq_enable();
   845b8:	4b3e      	ldr	r3, [pc, #248]	; (846b4 <udd_ep_trans_done+0x1c4>)
   845ba:	2201      	movs	r2, #1
   845bc:	701a      	strb	r2, [r3, #0]
   845be:	f3bf 8f5f 	dmb	sy
   845c2:	b662      	cpsie	i
}
   845c4:	e06b      	b.n	8469e <udd_ep_trans_done+0x1ae>
	if (Is_udd_endpoint_in(ep)) {
		if (ptr_job->b_shortpacket) {
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   845c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   845ca:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   845ce:	4b38      	ldr	r3, [pc, #224]	; (846b0 <udd_ep_trans_done+0x1c0>)
   845d0:	6919      	ldr	r1, [r3, #16]
   845d2:	f44f 7080 	mov.w	r0, #256	; 0x100
   845d6:	fa00 f202 	lsl.w	r2, r0, r2
   845da:	430a      	orrs	r2, r1
   845dc:	611a      	str	r2, [r3, #16]
			return;
   845de:	e05e      	b.n	8469e <udd_ep_trans_done+0x1ae>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   845e0:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   845e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   845e8:	2400      	movs	r4, #0
   845ea:	e018      	b.n	8461e <udd_ep_trans_done+0x12e>
		if (Is_udd_endpoint_in(ep)) {
   845ec:	0151      	lsls	r1, r2, #5
   845ee:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   845f2:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   845f6:	f8d1 4100 	ldr.w	r4, [r1, #256]	; 0x100
   845fa:	f014 0408 	ands.w	r4, r4, #8
   845fe:	d1ef      	bne.n	845e0 <udd_ep_trans_done+0xf0>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84600:	0151      	lsls	r1, r2, #5
   84602:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   84606:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   8460a:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   8460e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   84612:	2801      	cmp	r0, #1
   84614:	d044      	beq.n	846a0 <udd_ep_trans_done+0x1b0>
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84616:	f44f 3080 	mov.w	r0, #65536	; 0x10000
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8461a:	f044 0414 	orr.w	r4, r4, #20
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8461e:	4926      	ldr	r1, [pc, #152]	; (846b8 <udd_ep_trans_done+0x1c8>)
   84620:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   84624:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   84628:	4f20      	ldr	r7, [pc, #128]	; (846ac <udd_ep_trans_done+0x1bc>)
   8462a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8462e:	6876      	ldr	r6, [r6, #4]
   84630:	4435      	add	r5, r6
   84632:	604d      	str	r5, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84634:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   84638:	b672      	cpsid	i
   8463a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8463e:	4e1d      	ldr	r6, [pc, #116]	; (846b4 <udd_ep_trans_done+0x1c4>)
   84640:	2700      	movs	r7, #0
   84642:	7037      	strb	r7, [r6, #0]
		if (!(udd_endpoint_dma_get_status(ep)
   84644:	68ce      	ldr	r6, [r1, #12]
   84646:	f016 0f10 	tst.w	r6, #16
   8464a:	d09f      	beq.n	8458c <udd_ep_trans_done+0x9c>
	if (cpu_irq_is_enabled_flags(flags))
   8464c:	b92d      	cbnz	r5, 8465a <udd_ep_trans_done+0x16a>
		cpu_irq_enable();
   8464e:	4919      	ldr	r1, [pc, #100]	; (846b4 <udd_ep_trans_done+0x1c4>)
   84650:	2001      	movs	r0, #1
   84652:	7008      	strb	r0, [r1, #0]
   84654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84658:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt;
   8465a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   8465e:	4813      	ldr	r0, [pc, #76]	; (846ac <udd_ep_trans_done+0x1bc>)
   84660:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84664:	68c8      	ldr	r0, [r1, #12]
   84666:	6088      	str	r0, [r1, #8]
	if (Is_udd_endpoint_in(ep)) {
   84668:	0151      	lsls	r1, r2, #5
   8466a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   8466e:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   84672:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   84676:	f010 0f08 	tst.w	r0, #8
   8467a:	d008      	beq.n	8468e <udd_ep_trans_done+0x19e>
		if (ptr_job->b_shortpacket) {
   8467c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   84680:	4c0a      	ldr	r4, [pc, #40]	; (846ac <udd_ep_trans_done+0x1bc>)
   84682:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84686:	7d00      	ldrb	r0, [r0, #20]
   84688:	f010 0f02 	tst.w	r0, #2
   8468c:	d19b      	bne.n	845c6 <udd_ep_trans_done+0xd6>
	ptr_job = &udd_ep_job[ep - 1];
   8468e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   84692:	2100      	movs	r1, #0
   84694:	4805      	ldr	r0, [pc, #20]	; (846ac <udd_ep_trans_done+0x1bc>)
   84696:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   8469a:	4b08      	ldr	r3, [pc, #32]	; (846bc <udd_ep_trans_done+0x1cc>)
   8469c:	4798      	blx	r3
}
   8469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   846a0:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   846a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   846a8:	e7b9      	b.n	8461e <udd_ep_trans_done+0x12e>
   846aa:	bf00      	nop
   846ac:	20001e88 	.word	0x20001e88
   846b0:	400a4000 	.word	0x400a4000
   846b4:	200006e6 	.word	0x200006e6
   846b8:	400a4300 	.word	0x400a4300
   846bc:	000844b9 	.word	0x000844b9

000846c0 <UDPHS_Handler>:
{
   846c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   846c4:	201d      	movs	r0, #29
   846c6:	4ba0      	ldr	r3, [pc, #640]	; (84948 <UDPHS_Handler+0x288>)
   846c8:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   846ca:	4ba0      	ldr	r3, [pc, #640]	; (8494c <UDPHS_Handler+0x28c>)
   846cc:	4798      	blx	r3
   846ce:	b920      	cbnz	r0, 846da <UDPHS_Handler+0x1a>
   846d0:	4b9f      	ldr	r3, [pc, #636]	; (84950 <UDPHS_Handler+0x290>)
   846d2:	695b      	ldr	r3, [r3, #20]
   846d4:	f013 0f02 	tst.w	r3, #2
   846d8:	d041      	beq.n	8475e <UDPHS_Handler+0x9e>
	if (Is_udd_sof()) {
   846da:	4b9d      	ldr	r3, [pc, #628]	; (84950 <UDPHS_Handler+0x290>)
   846dc:	695b      	ldr	r3, [r3, #20]
   846de:	f013 0f08 	tst.w	r3, #8
   846e2:	d143      	bne.n	8476c <UDPHS_Handler+0xac>
	if (Is_udd_msof()) {
   846e4:	4b9a      	ldr	r3, [pc, #616]	; (84950 <UDPHS_Handler+0x290>)
   846e6:	695b      	ldr	r3, [r3, #20]
   846e8:	f013 0f04 	tst.w	r3, #4
   846ec:	d14c      	bne.n	84788 <UDPHS_Handler+0xc8>
	uint32_t status = udd_get_endpoint_status(0);
   846ee:	4a98      	ldr	r2, [pc, #608]	; (84950 <UDPHS_Handler+0x290>)
   846f0:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   846f4:	6952      	ldr	r2, [r2, #20]
   846f6:	f412 7f80 	tst.w	r2, #256	; 0x100
   846fa:	d029      	beq.n	84750 <UDPHS_Handler+0x90>
	udd_disable_nak_in_interrupt(0);
   846fc:	4a94      	ldr	r2, [pc, #592]	; (84950 <UDPHS_Handler+0x290>)
   846fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84702:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   84706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8470a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8470e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   84712:	d13f      	bne.n	84794 <UDPHS_Handler+0xd4>
	if (Is_udd_endpoint_status_in_sent(status)
   84714:	f413 6f80 	tst.w	r3, #1024	; 0x400
   84718:	d006      	beq.n	84728 <UDPHS_Handler+0x68>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8471a:	4a8d      	ldr	r2, [pc, #564]	; (84950 <UDPHS_Handler+0x290>)
   8471c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84720:	f412 6f80 	tst.w	r2, #1024	; 0x400
   84724:	f040 809e 	bne.w	84864 <UDPHS_Handler+0x1a4>
	if (Is_udd_endpoint_status_out_received(status)) {
   84728:	f413 7f00 	tst.w	r3, #512	; 0x200
   8472c:	f040 809d 	bne.w	8486a <UDPHS_Handler+0x1aa>
	if (Is_udd_endpoint_status_stall(status)) {
   84730:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84734:	d004      	beq.n	84740 <UDPHS_Handler+0x80>
		udd_ack_stall(0);
   84736:	4a86      	ldr	r2, [pc, #536]	; (84950 <UDPHS_Handler+0x290>)
   84738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8473c:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   84740:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   84744:	f040 8144 	bne.w	849d0 <UDPHS_Handler+0x310>
	if (Is_udd_endpoint_status_nak_in(status)) {
   84748:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8474c:	f040 8155 	bne.w	849fa <UDPHS_Handler+0x33a>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84750:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84752:	497f      	ldr	r1, [pc, #508]	; (84950 <UDPHS_Handler+0x290>)
   84754:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84758:	f44f 7e80 	mov.w	lr, #256	; 0x100
   8475c:	e19c      	b.n	84a98 <UDPHS_Handler+0x3d8>
  __ASM volatile ("cpsid i");
   8475e:	b672      	cpsid	i
   84760:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84764:	4b7b      	ldr	r3, [pc, #492]	; (84954 <UDPHS_Handler+0x294>)
   84766:	2200      	movs	r2, #0
   84768:	701a      	strb	r2, [r3, #0]
		return;
   8476a:	e008      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ack_sof();
   8476c:	4b78      	ldr	r3, [pc, #480]	; (84950 <UDPHS_Handler+0x290>)
   8476e:	2208      	movs	r2, #8
   84770:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84772:	695b      	ldr	r3, [r3, #20]
   84774:	f013 0f01 	tst.w	r3, #1
   84778:	d003      	beq.n	84782 <UDPHS_Handler+0xc2>
		UDC_SOF_EVENT();
   8477a:	4b77      	ldr	r3, [pc, #476]	; (84958 <UDPHS_Handler+0x298>)
   8477c:	4798      	blx	r3
}
   8477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   84782:	4b76      	ldr	r3, [pc, #472]	; (8495c <UDPHS_Handler+0x29c>)
   84784:	4798      	blx	r3
   84786:	e7f8      	b.n	8477a <UDPHS_Handler+0xba>
		udd_ack_msof();
   84788:	4b71      	ldr	r3, [pc, #452]	; (84950 <UDPHS_Handler+0x290>)
   8478a:	2204      	movs	r2, #4
   8478c:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8478e:	4b73      	ldr	r3, [pc, #460]	; (8495c <UDPHS_Handler+0x29c>)
   84790:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84792:	e7f4      	b.n	8477e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84794:	4b72      	ldr	r3, [pc, #456]	; (84960 <UDPHS_Handler+0x2a0>)
   84796:	781b      	ldrb	r3, [r3, #0]
   84798:	2b00      	cmp	r3, #0
   8479a:	d140      	bne.n	8481e <UDPHS_Handler+0x15e>
	if (8 != udd_byte_count(0)) {
   8479c:	4b6c      	ldr	r3, [pc, #432]	; (84950 <UDPHS_Handler+0x290>)
   8479e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   847a2:	f3c3 530a 	ubfx	r3, r3, #20, #11
   847a6:	2b08      	cmp	r3, #8
   847a8:	d13e      	bne.n	84828 <UDPHS_Handler+0x168>
   847aa:	4a6e      	ldr	r2, [pc, #440]	; (84964 <UDPHS_Handler+0x2a4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   847ac:	4b6e      	ldr	r3, [pc, #440]	; (84968 <UDPHS_Handler+0x2a8>)
	for (i = 0; i < 8; i++) {
   847ae:	486f      	ldr	r0, [pc, #444]	; (8496c <UDPHS_Handler+0x2ac>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   847b0:	4619      	mov	r1, r3
   847b2:	3301      	adds	r3, #1
   847b4:	7809      	ldrb	r1, [r1, #0]
   847b6:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   847ba:	4283      	cmp	r3, r0
   847bc:	d1f8      	bne.n	847b0 <UDPHS_Handler+0xf0>
	if (udc_process_setup() == false) {
   847be:	4b6c      	ldr	r3, [pc, #432]	; (84970 <UDPHS_Handler+0x2b0>)
   847c0:	4798      	blx	r3
   847c2:	2800      	cmp	r0, #0
   847c4:	d038      	beq.n	84838 <UDPHS_Handler+0x178>
	udd_ack_setup_received(0);
   847c6:	4b62      	ldr	r3, [pc, #392]	; (84950 <UDPHS_Handler+0x290>)
   847c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   847cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   847d0:	4b68      	ldr	r3, [pc, #416]	; (84974 <UDPHS_Handler+0x2b4>)
   847d2:	f993 3000 	ldrsb.w	r3, [r3]
   847d6:	2b00      	cmp	r3, #0
   847d8:	db36      	blt.n	84848 <UDPHS_Handler+0x188>
		if (0 == udd_g_ctrlreq.req.wLength) {
   847da:	4b66      	ldr	r3, [pc, #408]	; (84974 <UDPHS_Handler+0x2b4>)
   847dc:	88db      	ldrh	r3, [r3, #6]
   847de:	2b00      	cmp	r3, #0
   847e0:	d03d      	beq.n	8485e <UDPHS_Handler+0x19e>
		udd_ctrl_prev_payload_buf_cnt = 0;
   847e2:	2300      	movs	r3, #0
   847e4:	4a64      	ldr	r2, [pc, #400]	; (84978 <UDPHS_Handler+0x2b8>)
   847e6:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   847e8:	4a64      	ldr	r2, [pc, #400]	; (8497c <UDPHS_Handler+0x2bc>)
   847ea:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   847ec:	4a5c      	ldr	r2, [pc, #368]	; (84960 <UDPHS_Handler+0x2a0>)
   847ee:	2101      	movs	r1, #1
   847f0:	7011      	strb	r1, [r2, #0]
		udd_ack_nak_in(0);
   847f2:	4a57      	ldr	r2, [pc, #348]	; (84950 <UDPHS_Handler+0x290>)
   847f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   847f8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   847fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84800:	b672      	cpsid	i
   84802:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84806:	4c53      	ldr	r4, [pc, #332]	; (84954 <UDPHS_Handler+0x294>)
   84808:	7023      	strb	r3, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8480a:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   8480e:	2800      	cmp	r0, #0
   84810:	d1b5      	bne.n	8477e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   84812:	2201      	movs	r2, #1
   84814:	7022      	strb	r2, [r4, #0]
   84816:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8481a:	b662      	cpsie	i
}
   8481c:	e7af      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ctrl_endofrequest();
   8481e:	4b58      	ldr	r3, [pc, #352]	; (84980 <UDPHS_Handler+0x2c0>)
   84820:	4798      	blx	r3
		udd_ctrl_init();
   84822:	4b58      	ldr	r3, [pc, #352]	; (84984 <UDPHS_Handler+0x2c4>)
   84824:	4798      	blx	r3
   84826:	e7b9      	b.n	8479c <UDPHS_Handler+0xdc>
		udd_ctrl_stall_data();
   84828:	4b57      	ldr	r3, [pc, #348]	; (84988 <UDPHS_Handler+0x2c8>)
   8482a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8482c:	4b48      	ldr	r3, [pc, #288]	; (84950 <UDPHS_Handler+0x290>)
   8482e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84832:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84836:	e7a2      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ctrl_stall_data();
   84838:	4b53      	ldr	r3, [pc, #332]	; (84988 <UDPHS_Handler+0x2c8>)
   8483a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8483c:	4b44      	ldr	r3, [pc, #272]	; (84950 <UDPHS_Handler+0x290>)
   8483e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84842:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84846:	e79a      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84848:	2300      	movs	r3, #0
   8484a:	4a4b      	ldr	r2, [pc, #300]	; (84978 <UDPHS_Handler+0x2b8>)
   8484c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8484e:	4a4b      	ldr	r2, [pc, #300]	; (8497c <UDPHS_Handler+0x2bc>)
   84850:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84852:	4b43      	ldr	r3, [pc, #268]	; (84960 <UDPHS_Handler+0x2a0>)
   84854:	2202      	movs	r2, #2
   84856:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84858:	4b4c      	ldr	r3, [pc, #304]	; (8498c <UDPHS_Handler+0x2cc>)
   8485a:	4798      	blx	r3
   8485c:	e78f      	b.n	8477e <UDPHS_Handler+0xbe>
			udd_ctrl_send_zlp_in();
   8485e:	4b4c      	ldr	r3, [pc, #304]	; (84990 <UDPHS_Handler+0x2d0>)
   84860:	4798      	blx	r3
			return;
   84862:	e78c      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ctrl_in_sent();
   84864:	4b49      	ldr	r3, [pc, #292]	; (8498c <UDPHS_Handler+0x2cc>)
   84866:	4798      	blx	r3
		return true;
   84868:	e789      	b.n	8477e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8486a:	4b3d      	ldr	r3, [pc, #244]	; (84960 <UDPHS_Handler+0x2a0>)
   8486c:	781b      	ldrb	r3, [r3, #0]
   8486e:	2b01      	cmp	r3, #1
   84870:	d00b      	beq.n	8488a <UDPHS_Handler+0x1ca>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84872:	2b02      	cmp	r3, #2
   84874:	d001      	beq.n	8487a <UDPHS_Handler+0x1ba>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84876:	2b04      	cmp	r3, #4
   84878:	d104      	bne.n	84884 <UDPHS_Handler+0x1c4>
			udd_ctrl_endofrequest();
   8487a:	4b41      	ldr	r3, [pc, #260]	; (84980 <UDPHS_Handler+0x2c0>)
   8487c:	4798      	blx	r3
		udd_ctrl_init();
   8487e:	4b41      	ldr	r3, [pc, #260]	; (84984 <UDPHS_Handler+0x2c4>)
   84880:	4798      	blx	r3
		return;
   84882:	e77c      	b.n	8477e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   84884:	4b40      	ldr	r3, [pc, #256]	; (84988 <UDPHS_Handler+0x2c8>)
   84886:	4798      	blx	r3
   84888:	e7f9      	b.n	8487e <UDPHS_Handler+0x1be>
	nb_data = udd_byte_count(0);
   8488a:	4b31      	ldr	r3, [pc, #196]	; (84950 <UDPHS_Handler+0x290>)
   8488c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   84890:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84894:	4b37      	ldr	r3, [pc, #220]	; (84974 <UDPHS_Handler+0x2b4>)
   84896:	899b      	ldrh	r3, [r3, #12]
   84898:	4a38      	ldr	r2, [pc, #224]	; (8497c <UDPHS_Handler+0x2bc>)
   8489a:	8814      	ldrh	r4, [r2, #0]
   8489c:	1822      	adds	r2, r4, r0
   8489e:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   848a0:	bfbc      	itt	lt
   848a2:	1b1b      	sublt	r3, r3, r4
   848a4:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   848a6:	4b33      	ldr	r3, [pc, #204]	; (84974 <UDPHS_Handler+0x2b4>)
   848a8:	689a      	ldr	r2, [r3, #8]
   848aa:	4422      	add	r2, r4
	for (i = 0; i < nb_data; i++) {
   848ac:	b170      	cbz	r0, 848cc <UDPHS_Handler+0x20c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   848ae:	4b2e      	ldr	r3, [pc, #184]	; (84968 <UDPHS_Handler+0x2a8>)
		*ptr_dest++ = *ptr_src++;
   848b0:	4619      	mov	r1, r3
   848b2:	3301      	adds	r3, #1
   848b4:	7809      	ldrb	r1, [r1, #0]
   848b6:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < nb_data; i++) {
   848ba:	b2d9      	uxtb	r1, r3
   848bc:	4281      	cmp	r1, r0
   848be:	d3f7      	bcc.n	848b0 <UDPHS_Handler+0x1f0>
	udd_ctrl_payload_buf_cnt += nb_data;
   848c0:	4404      	add	r4, r0
   848c2:	b2a4      	uxth	r4, r4
   848c4:	4b2d      	ldr	r3, [pc, #180]	; (8497c <UDPHS_Handler+0x2bc>)
   848c6:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   848c8:	2840      	cmp	r0, #64	; 0x40
   848ca:	d00d      	beq.n	848e8 <UDPHS_Handler+0x228>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   848cc:	4b29      	ldr	r3, [pc, #164]	; (84974 <UDPHS_Handler+0x2b4>)
   848ce:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   848d0:	695b      	ldr	r3, [r3, #20]
   848d2:	b10b      	cbz	r3, 848d8 <UDPHS_Handler+0x218>
			if (!udd_g_ctrlreq.over_under_run()) {
   848d4:	4798      	blx	r3
   848d6:	b370      	cbz	r0, 84936 <UDPHS_Handler+0x276>
		udd_ack_out_received(0);
   848d8:	4b1d      	ldr	r3, [pc, #116]	; (84950 <UDPHS_Handler+0x290>)
   848da:	f44f 7200 	mov.w	r2, #512	; 0x200
   848de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   848e2:	4b2b      	ldr	r3, [pc, #172]	; (84990 <UDPHS_Handler+0x2d0>)
   848e4:	4798      	blx	r3
		return;
   848e6:	e74a      	b.n	8477e <UDPHS_Handler+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   848e8:	4b22      	ldr	r3, [pc, #136]	; (84974 <UDPHS_Handler+0x2b4>)
   848ea:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   848ec:	4b22      	ldr	r3, [pc, #136]	; (84978 <UDPHS_Handler+0x2b8>)
   848ee:	881b      	ldrh	r3, [r3, #0]
   848f0:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   848f2:	429a      	cmp	r2, r3
   848f4:	ddea      	ble.n	848cc <UDPHS_Handler+0x20c>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   848f6:	4b1f      	ldr	r3, [pc, #124]	; (84974 <UDPHS_Handler+0x2b4>)
   848f8:	899b      	ldrh	r3, [r3, #12]
   848fa:	42a3      	cmp	r3, r4
   848fc:	d04a      	beq.n	84994 <UDPHS_Handler+0x2d4>
	udd_ack_out_received(0);
   848fe:	4b14      	ldr	r3, [pc, #80]	; (84950 <UDPHS_Handler+0x290>)
   84900:	f44f 7200 	mov.w	r2, #512	; 0x200
   84904:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_ack_nak_in(0);
   84908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8490c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84910:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84914:	b672      	cpsid	i
   84916:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8491a:	480e      	ldr	r0, [pc, #56]	; (84954 <UDPHS_Handler+0x294>)
   8491c:	2400      	movs	r4, #0
   8491e:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   84920:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84924:	2900      	cmp	r1, #0
   84926:	f47f af2a 	bne.w	8477e <UDPHS_Handler+0xbe>
		cpu_irq_enable();
   8492a:	2201      	movs	r2, #1
   8492c:	7002      	strb	r2, [r0, #0]
   8492e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84932:	b662      	cpsie	i
}
   84934:	e723      	b.n	8477e <UDPHS_Handler+0xbe>
				udd_ctrl_stall_data();
   84936:	4b14      	ldr	r3, [pc, #80]	; (84988 <UDPHS_Handler+0x2c8>)
   84938:	4798      	blx	r3
				udd_ack_out_received(0);
   8493a:	4b05      	ldr	r3, [pc, #20]	; (84950 <UDPHS_Handler+0x290>)
   8493c:	f44f 7200 	mov.w	r2, #512	; 0x200
   84940:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   84944:	e71b      	b.n	8477e <UDPHS_Handler+0xbe>
   84946:	bf00      	nop
   84948:	00084095 	.word	0x00084095
   8494c:	00084111 	.word	0x00084111
   84950:	400a4000 	.word	0x400a4000
   84954:	200006e6 	.word	0x200006e6
   84958:	000812b5 	.word	0x000812b5
   8495c:	00083429 	.word	0x00083429
   84960:	20001e84 	.word	0x20001e84
   84964:	20002b8f 	.word	0x20002b8f
   84968:	20180000 	.word	0x20180000
   8496c:	20180008 	.word	0x20180008
   84970:	0008346d 	.word	0x0008346d
   84974:	20002b90 	.word	0x20002b90
   84978:	20001e82 	.word	0x20001e82
   8497c:	20001e80 	.word	0x20001e80
   84980:	00084341 	.word	0x00084341
   84984:	00084281 	.word	0x00084281
   84988:	000842d5 	.word	0x000842d5
   8498c:	00084351 	.word	0x00084351
   84990:	000842ed 	.word	0x000842ed
		if (!udd_g_ctrlreq.over_under_run) {
   84994:	4b9d      	ldr	r3, [pc, #628]	; (84c0c <UDPHS_Handler+0x54c>)
   84996:	695b      	ldr	r3, [r3, #20]
   84998:	b153      	cbz	r3, 849b0 <UDPHS_Handler+0x2f0>
		if (!udd_g_ctrlreq.over_under_run()) {
   8499a:	4798      	blx	r3
   8499c:	b180      	cbz	r0, 849c0 <UDPHS_Handler+0x300>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8499e:	499c      	ldr	r1, [pc, #624]	; (84c10 <UDPHS_Handler+0x550>)
   849a0:	4a9c      	ldr	r2, [pc, #624]	; (84c14 <UDPHS_Handler+0x554>)
   849a2:	880b      	ldrh	r3, [r1, #0]
   849a4:	8810      	ldrh	r0, [r2, #0]
   849a6:	4403      	add	r3, r0
   849a8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   849aa:	2300      	movs	r3, #0
   849ac:	8013      	strh	r3, [r2, #0]
   849ae:	e7a6      	b.n	848fe <UDPHS_Handler+0x23e>
			udd_ctrl_stall_data();
   849b0:	4b99      	ldr	r3, [pc, #612]	; (84c18 <UDPHS_Handler+0x558>)
   849b2:	4798      	blx	r3
			udd_ack_out_received(0);
   849b4:	4b99      	ldr	r3, [pc, #612]	; (84c1c <UDPHS_Handler+0x55c>)
   849b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   849ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   849be:	e6de      	b.n	8477e <UDPHS_Handler+0xbe>
			udd_ctrl_stall_data();
   849c0:	4b95      	ldr	r3, [pc, #596]	; (84c18 <UDPHS_Handler+0x558>)
   849c2:	4798      	blx	r3
			udd_ack_out_received(0);
   849c4:	4b95      	ldr	r3, [pc, #596]	; (84c1c <UDPHS_Handler+0x55c>)
   849c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   849ca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   849ce:	e6d6      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ack_nak_out(0);
   849d0:	4b92      	ldr	r3, [pc, #584]	; (84c1c <UDPHS_Handler+0x55c>)
   849d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   849d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   849da:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   849de:	f413 6f80 	tst.w	r3, #1024	; 0x400
   849e2:	f47f aecc 	bne.w	8477e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   849e6:	4b8e      	ldr	r3, [pc, #568]	; (84c20 <UDPHS_Handler+0x560>)
   849e8:	781b      	ldrb	r3, [r3, #0]
   849ea:	2b03      	cmp	r3, #3
   849ec:	f47f aec7 	bne.w	8477e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   849f0:	4b8a      	ldr	r3, [pc, #552]	; (84c1c <UDPHS_Handler+0x55c>)
   849f2:	2220      	movs	r2, #32
   849f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   849f8:	e6c1      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ack_nak_in(0);
   849fa:	4b88      	ldr	r3, [pc, #544]	; (84c1c <UDPHS_Handler+0x55c>)
   849fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84a00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   84a04:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84a08:	f413 7f00 	tst.w	r3, #512	; 0x200
   84a0c:	f47f aeb7 	bne.w	8477e <UDPHS_Handler+0xbe>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84a10:	4b83      	ldr	r3, [pc, #524]	; (84c20 <UDPHS_Handler+0x560>)
   84a12:	781b      	ldrb	r3, [r3, #0]
   84a14:	2b01      	cmp	r3, #1
   84a16:	d007      	beq.n	84a28 <UDPHS_Handler+0x368>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84a18:	2b04      	cmp	r3, #4
   84a1a:	f47f aeb0 	bne.w	8477e <UDPHS_Handler+0xbe>
		udd_enable_stall_handshake(0);
   84a1e:	4b7f      	ldr	r3, [pc, #508]	; (84c1c <UDPHS_Handler+0x55c>)
   84a20:	2220      	movs	r2, #32
   84a22:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84a26:	e6aa      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ctrl_send_zlp_in();
   84a28:	4b7e      	ldr	r3, [pc, #504]	; (84c24 <UDPHS_Handler+0x564>)
   84a2a:	4798      	blx	r3
   84a2c:	e6a7      	b.n	8477e <UDPHS_Handler+0xbe>
			if (udd_endpoint_dma_get_status(ep)
   84a2e:	4b7e      	ldr	r3, [pc, #504]	; (84c28 <UDPHS_Handler+0x568>)
   84a30:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   84a34:	68d9      	ldr	r1, [r3, #12]
   84a36:	f011 0f01 	tst.w	r1, #1
   84a3a:	f47f aea0 	bne.w	8477e <UDPHS_Handler+0xbe>
			udd_disable_endpoint_dma_interrupt(ep);
   84a3e:	4877      	ldr	r0, [pc, #476]	; (84c1c <UDPHS_Handler+0x55c>)
   84a40:	6901      	ldr	r1, [r0, #16]
   84a42:	ea21 0606 	bic.w	r6, r1, r6
   84a46:	6106      	str	r6, [r0, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84a48:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   84a4a:	0c1b      	lsrs	r3, r3, #16
   84a4c:	d008      	beq.n	84a60 <UDPHS_Handler+0x3a0>
				ptr_job->buf_cnt -= nb_remaining;
   84a4e:	4977      	ldr	r1, [pc, #476]	; (84c2c <UDPHS_Handler+0x56c>)
   84a50:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   84a54:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   84a58:	68e0      	ldr	r0, [r4, #12]
   84a5a:	1ac3      	subs	r3, r0, r3
   84a5c:	60e3      	str	r3, [r4, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   84a5e:	60a3      	str	r3, [r4, #8]
			udd_ep_trans_done(ep);
   84a60:	4610      	mov	r0, r2
   84a62:	4b73      	ldr	r3, [pc, #460]	; (84c30 <UDPHS_Handler+0x570>)
   84a64:	4798      	blx	r3
			return true;
   84a66:	e68a      	b.n	8477e <UDPHS_Handler+0xbe>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   84a68:	0163      	lsls	r3, r4, #5
   84a6a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84a6e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84a76:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84a7a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   84a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   84a82:	2100      	movs	r1, #0
   84a84:	4869      	ldr	r0, [pc, #420]	; (84c2c <UDPHS_Handler+0x56c>)
   84a86:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   84a8a:	4b6a      	ldr	r3, [pc, #424]	; (84c34 <UDPHS_Handler+0x574>)
   84a8c:	4798      	blx	r3
				return true;
   84a8e:	e676      	b.n	8477e <UDPHS_Handler+0xbe>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84a90:	3301      	adds	r3, #1
   84a92:	2b07      	cmp	r3, #7
   84a94:	f000 80dc 	beq.w	84c50 <UDPHS_Handler+0x590>
   84a98:	b2da      	uxtb	r2, r3
		ptr_job = &udd_ep_job[ep - 1];
   84a9a:	461c      	mov	r4, r3
   84a9c:	1e5d      	subs	r5, r3, #1
   84a9e:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84aa0:	690f      	ldr	r7, [r1, #16]
   84aa2:	fa0c f605 	lsl.w	r6, ip, r5
   84aa6:	4237      	tst	r7, r6
   84aa8:	d002      	beq.n	84ab0 <UDPHS_Handler+0x3f0>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84aaa:	6948      	ldr	r0, [r1, #20]
   84aac:	4206      	tst	r6, r0
   84aae:	d1be      	bne.n	84a2e <UDPHS_Handler+0x36e>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84ab0:	690f      	ldr	r7, [r1, #16]
   84ab2:	fa0e f604 	lsl.w	r6, lr, r4
   84ab6:	4237      	tst	r7, r6
   84ab8:	d0ea      	beq.n	84a90 <UDPHS_Handler+0x3d0>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84aba:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   84abe:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
   84ac2:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84ac6:	d006      	beq.n	84ad6 <UDPHS_Handler+0x416>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84ac8:	eb01 1044 	add.w	r0, r1, r4, lsl #5
   84acc:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   84ad0:	f410 6f00 	tst.w	r0, #2048	; 0x800
   84ad4:	d0c8      	beq.n	84a68 <UDPHS_Handler+0x3a8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84ad6:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ada:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   84ade:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   84ae2:	d0d5      	beq.n	84a90 <UDPHS_Handler+0x3d0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84ae4:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   84ae8:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84aec:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84af0:	d1ce      	bne.n	84a90 <UDPHS_Handler+0x3d0>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84af2:	4b4a      	ldr	r3, [pc, #296]	; (84c1c <UDPHS_Handler+0x55c>)
   84af4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   84af8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84afc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   84b00:	691a      	ldr	r2, [r3, #16]
   84b02:	ea22 0606 	bic.w	r6, r2, r6
   84b06:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84b08:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   84b0c:	4b47      	ldr	r3, [pc, #284]	; (84c2c <UDPHS_Handler+0x56c>)
   84b0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   84b12:	f898 3014 	ldrb.w	r3, [r8, #20]
   84b16:	f36f 0382 	bfc	r3, #2, #1
   84b1a:	f888 3014 	strb.w	r3, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84b1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   84b22:	f023 0302 	bic.w	r3, r3, #2
   84b26:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   84b2a:	2320      	movs	r3, #32
   84b2c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   84b30:	2340      	movs	r3, #64	; 0x40
   84b32:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				//dbg_print("exHalt%x ", ep);
				return true;
   84b36:	e622      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ack_reset();
   84b38:	4b38      	ldr	r3, [pc, #224]	; (84c1c <UDPHS_Handler+0x55c>)
   84b3a:	2210      	movs	r2, #16
   84b3c:	619a      	str	r2, [r3, #24]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84b3e:	4d3b      	ldr	r5, [pc, #236]	; (84c2c <UDPHS_Handler+0x56c>)
   84b40:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   84b42:	2701      	movs	r7, #1
   84b44:	4e3b      	ldr	r6, [pc, #236]	; (84c34 <UDPHS_Handler+0x574>)
   84b46:	3401      	adds	r4, #1
   84b48:	b2e4      	uxtb	r4, r4
   84b4a:	4622      	mov	r2, r4
   84b4c:	4639      	mov	r1, r7
   84b4e:	4628      	mov	r0, r5
   84b50:	47b0      	blx	r6
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84b52:	3518      	adds	r5, #24
   84b54:	2c06      	cmp	r4, #6
   84b56:	d1f6      	bne.n	84b46 <UDPHS_Handler+0x486>
		udc_reset();
   84b58:	4b37      	ldr	r3, [pc, #220]	; (84c38 <UDPHS_Handler+0x578>)
   84b5a:	4798      	blx	r3
	udd_configure_address(0);
   84b5c:	4b2f      	ldr	r3, [pc, #188]	; (84c1c <UDPHS_Handler+0x55c>)
   84b5e:	681a      	ldr	r2, [r3, #0]
   84b60:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84b64:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84b66:	681a      	ldr	r2, [r3, #0]
   84b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84b6c:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84b6e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84b72:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   84b76:	f022 0203 	bic.w	r2, r2, #3
   84b7a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   84b7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84b82:	2201      	movs	r2, #1
   84b84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84b88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84b8c:	b672      	cpsid	i
   84b8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84b92:	4a2a      	ldr	r2, [pc, #168]	; (84c3c <UDPHS_Handler+0x57c>)
   84b94:	2000      	movs	r0, #0
   84b96:	7010      	strb	r0, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   84b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84b9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
   84ba4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84ba8:	691a      	ldr	r2, [r3, #16]
   84baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84bae:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   84bb0:	b929      	cbnz	r1, 84bbe <UDPHS_Handler+0x4fe>
		cpu_irq_enable();
   84bb2:	4b22      	ldr	r3, [pc, #136]	; (84c3c <UDPHS_Handler+0x57c>)
   84bb4:	2201      	movs	r2, #1
   84bb6:	701a      	strb	r2, [r3, #0]
   84bb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84bbc:	b662      	cpsie	i
		udd_ctrl_init();
   84bbe:	4b20      	ldr	r3, [pc, #128]	; (84c40 <UDPHS_Handler+0x580>)
   84bc0:	4798      	blx	r3
		udd_enable_sof_interrupt();
   84bc2:	4b16      	ldr	r3, [pc, #88]	; (84c1c <UDPHS_Handler+0x55c>)
   84bc4:	691a      	ldr	r2, [r3, #16]
   84bc6:	f042 0208 	orr.w	r2, r2, #8
   84bca:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84bcc:	691a      	ldr	r2, [r3, #16]
   84bce:	f042 0204 	orr.w	r2, r2, #4
   84bd2:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84bd4:	691a      	ldr	r2, [r3, #16]
   84bd6:	f042 0202 	orr.w	r2, r2, #2
   84bda:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   84bdc:	e5cf      	b.n	8477e <UDPHS_Handler+0xbe>
		udd_ack_wake_up();
   84bde:	4b0f      	ldr	r3, [pc, #60]	; (84c1c <UDPHS_Handler+0x55c>)
   84be0:	2220      	movs	r2, #32
   84be2:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   84be4:	691a      	ldr	r2, [r3, #16]
   84be6:	f022 0202 	bic.w	r2, r2, #2
   84bea:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   84bec:	691a      	ldr	r2, [r3, #16]
   84bee:	f042 0220 	orr.w	r2, r2, #32
   84bf2:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   84bf4:	2202      	movs	r2, #2
   84bf6:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   84bf8:	201d      	movs	r0, #29
   84bfa:	4b12      	ldr	r3, [pc, #72]	; (84c44 <UDPHS_Handler+0x584>)
   84bfc:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   84bfe:	4b12      	ldr	r3, [pc, #72]	; (84c48 <UDPHS_Handler+0x588>)
   84c00:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84c02:	2000      	movs	r0, #0
   84c04:	4b11      	ldr	r3, [pc, #68]	; (84c4c <UDPHS_Handler+0x58c>)
   84c06:	4798      	blx	r3
		goto udd_interrupt_end;
   84c08:	e5b9      	b.n	8477e <UDPHS_Handler+0xbe>
   84c0a:	bf00      	nop
   84c0c:	20002b90 	.word	0x20002b90
   84c10:	20001e82 	.word	0x20001e82
   84c14:	20001e80 	.word	0x20001e80
   84c18:	000842d5 	.word	0x000842d5
   84c1c:	400a4000 	.word	0x400a4000
   84c20:	20001e84 	.word	0x20001e84
   84c24:	000842ed 	.word	0x000842ed
   84c28:	400a4300 	.word	0x400a4300
   84c2c:	20001e88 	.word	0x20001e88
   84c30:	000844f1 	.word	0x000844f1
   84c34:	000844b9 	.word	0x000844b9
   84c38:	000833e1 	.word	0x000833e1
   84c3c:	200006e6 	.word	0x200006e6
   84c40:	00084281 	.word	0x00084281
   84c44:	000840c1 	.word	0x000840c1
   84c48:	0008129d 	.word	0x0008129d
   84c4c:	0008420d 	.word	0x0008420d
	if (Is_udd_reset()) {
   84c50:	4b18      	ldr	r3, [pc, #96]	; (84cb4 <UDPHS_Handler+0x5f4>)
   84c52:	695b      	ldr	r3, [r3, #20]
   84c54:	f013 0f10 	tst.w	r3, #16
   84c58:	f47f af6e 	bne.w	84b38 <UDPHS_Handler+0x478>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84c5c:	4b15      	ldr	r3, [pc, #84]	; (84cb4 <UDPHS_Handler+0x5f4>)
   84c5e:	691b      	ldr	r3, [r3, #16]
   84c60:	f013 0f02 	tst.w	r3, #2
   84c64:	d004      	beq.n	84c70 <UDPHS_Handler+0x5b0>
   84c66:	4b13      	ldr	r3, [pc, #76]	; (84cb4 <UDPHS_Handler+0x5f4>)
   84c68:	695b      	ldr	r3, [r3, #20]
   84c6a:	f013 0f02 	tst.w	r3, #2
   84c6e:	d1b6      	bne.n	84bde <UDPHS_Handler+0x51e>
	if (Is_udd_wake_up()) {
   84c70:	4b10      	ldr	r3, [pc, #64]	; (84cb4 <UDPHS_Handler+0x5f4>)
   84c72:	695b      	ldr	r3, [r3, #20]
   84c74:	f013 0f20 	tst.w	r3, #32
   84c78:	f43f ad81 	beq.w	8477e <UDPHS_Handler+0xbe>
		udd_sleep_mode(true); // Enter in IDLE mode
   84c7c:	2001      	movs	r0, #1
   84c7e:	4b0e      	ldr	r3, [pc, #56]	; (84cb8 <UDPHS_Handler+0x5f8>)
   84c80:	4798      	blx	r3
		udd_ack_suspend();
   84c82:	4b0c      	ldr	r3, [pc, #48]	; (84cb4 <UDPHS_Handler+0x5f4>)
   84c84:	2202      	movs	r2, #2
   84c86:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   84c88:	2220      	movs	r2, #32
   84c8a:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   84c8c:	691a      	ldr	r2, [r3, #16]
   84c8e:	f022 0220 	bic.w	r2, r2, #32
   84c92:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   84c94:	691a      	ldr	r2, [r3, #16]
   84c96:	f042 0202 	orr.w	r2, r2, #2
   84c9a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   84c9c:	691a      	ldr	r2, [r3, #16]
   84c9e:	f042 0208 	orr.w	r2, r2, #8
   84ca2:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   84ca4:	691a      	ldr	r2, [r3, #16]
   84ca6:	f042 0204 	orr.w	r2, r2, #4
   84caa:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   84cac:	4b03      	ldr	r3, [pc, #12]	; (84cbc <UDPHS_Handler+0x5fc>)
   84cae:	4798      	blx	r3
		goto udd_interrupt_end;
   84cb0:	e565      	b.n	8477e <UDPHS_Handler+0xbe>
   84cb2:	bf00      	nop
   84cb4:	400a4000 	.word	0x400a4000
   84cb8:	0008420d 	.word	0x0008420d
   84cbc:	000812a9 	.word	0x000812a9

00084cc0 <udd_attach>:
{
   84cc0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84cc2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84cc6:	b672      	cpsid	i
   84cc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84ccc:	4b1d      	ldr	r3, [pc, #116]	; (84d44 <udd_attach+0x84>)
   84cce:	2200      	movs	r2, #0
   84cd0:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   84cd2:	2001      	movs	r0, #1
   84cd4:	4b1c      	ldr	r3, [pc, #112]	; (84d48 <udd_attach+0x88>)
   84cd6:	4798      	blx	r3
	udd_enable_periph_ck();
   84cd8:	201d      	movs	r0, #29
   84cda:	4b1c      	ldr	r3, [pc, #112]	; (84d4c <udd_attach+0x8c>)
   84cdc:	4798      	blx	r3
	udd_attach_device();
   84cde:	4b1c      	ldr	r3, [pc, #112]	; (84d50 <udd_attach+0x90>)
   84ce0:	681a      	ldr	r2, [r3, #0]
   84ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   84ce6:	601a      	str	r2, [r3, #0]
   84ce8:	681a      	ldr	r2, [r3, #0]
   84cea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   84cee:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84cf0:	691a      	ldr	r2, [r3, #16]
   84cf2:	f042 0210 	orr.w	r2, r2, #16
   84cf6:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   84cf8:	691a      	ldr	r2, [r3, #16]
   84cfa:	f042 0202 	orr.w	r2, r2, #2
   84cfe:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   84d00:	691a      	ldr	r2, [r3, #16]
   84d02:	f042 0220 	orr.w	r2, r2, #32
   84d06:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   84d08:	691a      	ldr	r2, [r3, #16]
   84d0a:	f042 0208 	orr.w	r2, r2, #8
   84d0e:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   84d10:	691a      	ldr	r2, [r3, #16]
   84d12:	f042 0204 	orr.w	r2, r2, #4
   84d16:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   84d18:	2208      	movs	r2, #8
   84d1a:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84d1c:	2204      	movs	r2, #4
   84d1e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84d20:	2210      	movs	r2, #16
   84d22:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84d24:	2202      	movs	r2, #2
   84d26:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84d28:	2220      	movs	r2, #32
   84d2a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   84d2c:	201d      	movs	r0, #29
   84d2e:	4b09      	ldr	r3, [pc, #36]	; (84d54 <udd_attach+0x94>)
   84d30:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84d32:	b92c      	cbnz	r4, 84d40 <udd_attach+0x80>
		cpu_irq_enable();
   84d34:	4b03      	ldr	r3, [pc, #12]	; (84d44 <udd_attach+0x84>)
   84d36:	2201      	movs	r2, #1
   84d38:	701a      	strb	r2, [r3, #0]
   84d3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84d3e:	b662      	cpsie	i
}
   84d40:	bd10      	pop	{r4, pc}
   84d42:	bf00      	nop
   84d44:	200006e6 	.word	0x200006e6
   84d48:	0008420d 	.word	0x0008420d
   84d4c:	00084095 	.word	0x00084095
   84d50:	400a4000 	.word	0x400a4000
   84d54:	000840c1 	.word	0x000840c1

00084d58 <udd_enable>:
{
   84d58:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   84d5a:	4b2a      	ldr	r3, [pc, #168]	; (84e04 <udd_enable+0xac>)
   84d5c:	4798      	blx	r3
	udd_enable_periph_ck();
   84d5e:	201d      	movs	r0, #29
   84d60:	4b29      	ldr	r3, [pc, #164]	; (84e08 <udd_enable+0xb0>)
   84d62:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84d64:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   84d68:	b672      	cpsid	i
   84d6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d6e:	2300      	movs	r3, #0
   84d70:	4a26      	ldr	r2, [pc, #152]	; (84e0c <udd_enable+0xb4>)
   84d72:	7013      	strb	r3, [r2, #0]
	udd_enable_periph();
   84d74:	4926      	ldr	r1, [pc, #152]	; (84e10 <udd_enable+0xb8>)
   84d76:	680a      	ldr	r2, [r1, #0]
   84d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84d7c:	600a      	str	r2, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84d7e:	4a25      	ldr	r2, [pc, #148]	; (84e14 <udd_enable+0xbc>)
   84d80:	2150      	movs	r1, #80	; 0x50
   84d82:	f882 131d 	strb.w	r1, [r2, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84d86:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   84d8a:	6011      	str	r1, [r2, #0]
		udd_ep_job[i].busy = false;
   84d8c:	4822      	ldr	r0, [pc, #136]	; (84e18 <udd_enable+0xc0>)
   84d8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84d92:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   84d96:	7d12      	ldrb	r2, [r2, #20]
		udd_ep_job[i].stall_requested = false;
   84d98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   84d9c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   84da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   84da4:	f36f 0282 	bfc	r2, #2, #1
   84da8:	750a      	strb	r2, [r1, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84daa:	3301      	adds	r3, #1
   84dac:	2b06      	cmp	r3, #6
   84dae:	d1ee      	bne.n	84d8e <udd_enable+0x36>
	udd_high_speed_enable();
   84db0:	4a17      	ldr	r2, [pc, #92]	; (84e10 <udd_enable+0xb8>)
   84db2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   84db6:	f023 0303 	bic.w	r3, r3, #3
   84dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84dbe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84dc2:	4b16      	ldr	r3, [pc, #88]	; (84e1c <udd_enable+0xc4>)
   84dc4:	4798      	blx	r3
	udd_b_idle = false;
   84dc6:	2300      	movs	r3, #0
   84dc8:	4a15      	ldr	r2, [pc, #84]	; (84e20 <udd_enable+0xc8>)
   84dca:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84dcc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i");
   84dd0:	b672      	cpsid	i
   84dd2:	f3bf 8f5f 	dmb	sy
   84dd6:	4a0d      	ldr	r2, [pc, #52]	; (84e0c <udd_enable+0xb4>)
   84dd8:	7013      	strb	r3, [r2, #0]
   84dda:	4a12      	ldr	r2, [pc, #72]	; (84e24 <udd_enable+0xcc>)
   84ddc:	78d3      	ldrb	r3, [r2, #3]
   84dde:	3301      	adds	r3, #1
   84de0:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84de2:	b929      	cbnz	r1, 84df0 <udd_enable+0x98>
		cpu_irq_enable();
   84de4:	4b09      	ldr	r3, [pc, #36]	; (84e0c <udd_enable+0xb4>)
   84de6:	2201      	movs	r2, #1
   84de8:	701a      	strb	r2, [r3, #0]
   84dea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84dee:	b662      	cpsie	i
	udd_attach();
   84df0:	4b0d      	ldr	r3, [pc, #52]	; (84e28 <udd_enable+0xd0>)
   84df2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   84df4:	b92c      	cbnz	r4, 84e02 <udd_enable+0xaa>
		cpu_irq_enable();
   84df6:	4b05      	ldr	r3, [pc, #20]	; (84e0c <udd_enable+0xb4>)
   84df8:	2201      	movs	r2, #1
   84dfa:	701a      	strb	r2, [r3, #0]
   84dfc:	f3bf 8f5f 	dmb	sy
   84e00:	b662      	cpsie	i
}
   84e02:	bd10      	pop	{r4, pc}
   84e04:	000830d9 	.word	0x000830d9
   84e08:	00084095 	.word	0x00084095
   84e0c:	200006e6 	.word	0x200006e6
   84e10:	400a4000 	.word	0x400a4000
   84e14:	e000e100 	.word	0xe000e100
   84e18:	20001e88 	.word	0x20001e88
   84e1c:	000840fd 	.word	0x000840fd
   84e20:	20001e7e 	.word	0x20001e7e
   84e24:	20002b7c 	.word	0x20002b7c
   84e28:	00084cc1 	.word	0x00084cc1

00084e2c <udd_detach>:
{
   84e2c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   84e2e:	201d      	movs	r0, #29
   84e30:	4b08      	ldr	r3, [pc, #32]	; (84e54 <udd_detach+0x28>)
   84e32:	4798      	blx	r3
	udd_detach_device();
   84e34:	4b08      	ldr	r3, [pc, #32]	; (84e58 <udd_detach+0x2c>)
   84e36:	681a      	ldr	r2, [r3, #0]
   84e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84e3c:	601a      	str	r2, [r3, #0]
   84e3e:	681a      	ldr	r2, [r3, #0]
   84e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84e44:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   84e46:	201d      	movs	r0, #29
   84e48:	4b04      	ldr	r3, [pc, #16]	; (84e5c <udd_detach+0x30>)
   84e4a:	4798      	blx	r3
	udd_sleep_mode(false);
   84e4c:	2000      	movs	r0, #0
   84e4e:	4b04      	ldr	r3, [pc, #16]	; (84e60 <udd_detach+0x34>)
   84e50:	4798      	blx	r3
}
   84e52:	bd08      	pop	{r3, pc}
   84e54:	00084095 	.word	0x00084095
   84e58:	400a4000 	.word	0x400a4000
   84e5c:	000840c1 	.word	0x000840c1
   84e60:	0008420d 	.word	0x0008420d

00084e64 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84e64:	4b02      	ldr	r3, [pc, #8]	; (84e70 <udd_is_high_speed+0xc>)
   84e66:	6958      	ldr	r0, [r3, #20]
}
   84e68:	f000 0001 	and.w	r0, r0, #1
   84e6c:	4770      	bx	lr
   84e6e:	bf00      	nop
   84e70:	400a4000 	.word	0x400a4000

00084e74 <udd_set_address>:
	udd_disable_address();
   84e74:	4b08      	ldr	r3, [pc, #32]	; (84e98 <udd_set_address+0x24>)
   84e76:	681a      	ldr	r2, [r3, #0]
   84e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84e7c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   84e7e:	681a      	ldr	r2, [r3, #0]
   84e80:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84e84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84e88:	4302      	orrs	r2, r0
   84e8a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84e8c:	681a      	ldr	r2, [r3, #0]
   84e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84e92:	601a      	str	r2, [r3, #0]
}
   84e94:	4770      	bx	lr
   84e96:	bf00      	nop
   84e98:	400a4000 	.word	0x400a4000

00084e9c <udd_getaddress>:
	return udd_get_configured_address();
   84e9c:	4b02      	ldr	r3, [pc, #8]	; (84ea8 <udd_getaddress+0xc>)
   84e9e:	6818      	ldr	r0, [r3, #0]
}
   84ea0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84ea4:	4770      	bx	lr
   84ea6:	bf00      	nop
   84ea8:	400a4000 	.word	0x400a4000

00084eac <udd_get_frame_number>:
	return udd_frame_number();
   84eac:	4b02      	ldr	r3, [pc, #8]	; (84eb8 <udd_get_frame_number+0xc>)
   84eae:	6858      	ldr	r0, [r3, #4]
}
   84eb0:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84eb4:	4770      	bx	lr
   84eb6:	bf00      	nop
   84eb8:	400a4000 	.word	0x400a4000

00084ebc <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84ebc:	4b02      	ldr	r3, [pc, #8]	; (84ec8 <udd_get_micro_frame_number+0xc>)
   84ebe:	6858      	ldr	r0, [r3, #4]
}
   84ec0:	f000 0007 	and.w	r0, r0, #7
   84ec4:	4770      	bx	lr
   84ec6:	bf00      	nop
   84ec8:	400a4000 	.word	0x400a4000

00084ecc <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84ecc:	4b01      	ldr	r3, [pc, #4]	; (84ed4 <udd_set_setup_payload+0x8>)
   84ece:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84ed0:	8199      	strh	r1, [r3, #12]
}
   84ed2:	4770      	bx	lr
   84ed4:	20002b90 	.word	0x20002b90

00084ed8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84ed8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84edc:	2a06      	cmp	r2, #6
   84ede:	d900      	bls.n	84ee2 <udd_ep_free+0xa>
   84ee0:	4770      	bx	lr
{
   84ee2:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   84ee4:	0153      	lsls	r3, r2, #5
   84ee6:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   84eea:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   84eee:	2101      	movs	r1, #1
   84ef0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	udd_configure_endpoint_bank(ep_index, 0);
   84ef4:	4603      	mov	r3, r0
   84ef6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   84efa:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   84efe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84f02:	1e55      	subs	r5, r2, #1
   84f04:	4c08      	ldr	r4, [pc, #32]	; (84f28 <udd_ep_free+0x50>)
   84f06:	fa05 f601 	lsl.w	r6, r5, r1
   84f0a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   84f0e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   84f12:	4b06      	ldr	r3, [pc, #24]	; (84f2c <udd_ep_free+0x54>)
   84f14:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84f16:	4435      	add	r5, r6
   84f18:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   84f1c:	7d23      	ldrb	r3, [r4, #20]
   84f1e:	f36f 0382 	bfc	r3, #2, #1
   84f22:	7523      	strb	r3, [r4, #20]
}
   84f24:	bd70      	pop	{r4, r5, r6, pc}
   84f26:	bf00      	nop
   84f28:	20001e88 	.word	0x20001e88
   84f2c:	000844b9 	.word	0x000844b9

00084f30 <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84f30:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   84f34:	0143      	lsls	r3, r0, #5
   84f36:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84f3a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84f3e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   84f42:	f013 0f20 	tst.w	r3, #32
   84f46:	d109      	bne.n	84f5c <udd_ep_is_halted+0x2c>
   84f48:	3801      	subs	r0, #1
   84f4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   84f4e:	4b04      	ldr	r3, [pc, #16]	; (84f60 <udd_ep_is_halted+0x30>)
   84f50:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   84f54:	7d00      	ldrb	r0, [r0, #20]
   84f56:	f3c0 0080 	ubfx	r0, r0, #2, #1
   84f5a:	4770      	bx	lr
   84f5c:	2001      	movs	r0, #1
}
   84f5e:	4770      	bx	lr
   84f60:	20001e88 	.word	0x20001e88

00084f64 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84f64:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84f68:	2b06      	cmp	r3, #6
   84f6a:	d851      	bhi.n	85010 <udd_ep_set_halt+0xac>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84f6c:	015a      	lsls	r2, r3, #5
   84f6e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84f72:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84f76:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84f7a:	f012 0f20 	tst.w	r2, #32
   84f7e:	d149      	bne.n	85014 <udd_ep_set_halt+0xb0>
{
   84f80:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   84f82:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84f84:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   84f88:	4a25      	ldr	r2, [pc, #148]	; (85020 <udd_ep_set_halt+0xbc>)
   84f8a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   84f8e:	7d12      	ldrb	r2, [r2, #20]
   84f90:	f012 0f04 	tst.w	r2, #4
   84f94:	d140      	bne.n	85018 <udd_ep_set_halt+0xb4>
	if (ptr_job->busy == true) {
   84f96:	f012 0f01 	tst.w	r2, #1
   84f9a:	d13f      	bne.n	8501c <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84f9c:	f010 0f80 	tst.w	r0, #128	; 0x80
   84fa0:	d114      	bne.n	84fcc <udd_ep_set_halt+0x68>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84fa2:	015b      	lsls	r3, r3, #5
   84fa4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   84fa8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   84fac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   84fb0:	f022 0202 	bic.w	r2, r2, #2
   84fb4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   84fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84fbc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   84fc0:	2220      	movs	r2, #32
   84fc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   84fc6:	2001      	movs	r0, #1
}
   84fc8:	bc10      	pop	{r4}
   84fca:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84fcc:	015a      	lsls	r2, r3, #5
   84fce:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   84fd2:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   84fd6:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   84fda:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   84fde:	d0e0      	beq.n	84fa2 <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   84fe0:	4a0f      	ldr	r2, [pc, #60]	; (85020 <udd_ep_set_halt+0xbc>)
   84fe2:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   84fe6:	7d0a      	ldrb	r2, [r1, #20]
   84fe8:	f042 0204 	orr.w	r2, r2, #4
   84fec:	750a      	strb	r2, [r1, #20]
			udd_enable_bank_interrupt(ep_index);
   84fee:	490d      	ldr	r1, [pc, #52]	; (85024 <udd_ep_set_halt+0xc0>)
   84ff0:	f103 0208 	add.w	r2, r3, #8
   84ff4:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   84ff8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84ffc:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   84ffe:	6908      	ldr	r0, [r1, #16]
   85000:	f44f 7280 	mov.w	r2, #256	; 0x100
   85004:	fa02 f303 	lsl.w	r3, r2, r3
   85008:	4303      	orrs	r3, r0
   8500a:	610b      	str	r3, [r1, #16]
			return true;
   8500c:	2001      	movs	r0, #1
   8500e:	e7db      	b.n	84fc8 <udd_ep_set_halt+0x64>
		return false;
   85010:	2000      	movs	r0, #0
   85012:	4770      	bx	lr
		return true; // Already STALL
   85014:	2001      	movs	r0, #1
}
   85016:	4770      	bx	lr
		return true; // Already STALL
   85018:	2001      	movs	r0, #1
   8501a:	e7d5      	b.n	84fc8 <udd_ep_set_halt+0x64>
		return false; // Job on going, stall impossible
   8501c:	2000      	movs	r0, #0
   8501e:	e7d3      	b.n	84fc8 <udd_ep_set_halt+0x64>
   85020:	20001e88 	.word	0x20001e88
   85024:	400a4000 	.word	0x400a4000

00085028 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   85028:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   8502c:	2806      	cmp	r0, #6
   8502e:	d862      	bhi.n	850f6 <udd_ep_clear_halt+0xce>
{
   85030:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   85032:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   85034:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   85038:	4b37      	ldr	r3, [pc, #220]	; (85118 <udd_ep_clear_halt+0xf0>)
   8503a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   8503e:	7d1b      	ldrb	r3, [r3, #20]
   85040:	f013 0f04 	tst.w	r3, #4
   85044:	d05b      	beq.n	850fe <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   85046:	460b      	mov	r3, r1
   85048:	4933      	ldr	r1, [pc, #204]	; (85118 <udd_ep_clear_halt+0xf0>)
   8504a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   8504e:	7d19      	ldrb	r1, [r3, #20]
   85050:	f36f 0182 	bfc	r1, #2, #1
   85054:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   85056:	4b31      	ldr	r3, [pc, #196]	; (8511c <udd_ep_clear_halt+0xf4>)
   85058:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   8505c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   85060:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   85064:	6919      	ldr	r1, [r3, #16]
   85066:	f44f 7480 	mov.w	r4, #256	; 0x100
   8506a:	4084      	lsls	r4, r0
   8506c:	ea21 0104 	bic.w	r1, r1, r4
   85070:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   85072:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   85076:	f013 0f20 	tst.w	r3, #32
   8507a:	d024      	beq.n	850c6 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   8507c:	0143      	lsls	r3, r0, #5
   8507e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85082:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85086:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8508a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8508e:	d00b      	beq.n	850a8 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   85090:	0143      	lsls	r3, r0, #5
   85092:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85096:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8509a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   8509e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   850a2:	2140      	movs	r1, #64	; 0x40
   850a4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   850a8:	0143      	lsls	r3, r0, #5
   850aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   850ae:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   850b2:	2120      	movs	r1, #32
   850b4:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_enable_endpoint_bank_autoswitch(ep);
   850b8:	4618      	mov	r0, r3
   850ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   850be:	f043 0302 	orr.w	r3, r3, #2
   850c2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   850c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   850ca:	4913      	ldr	r1, [pc, #76]	; (85118 <udd_ep_clear_halt+0xf0>)
   850cc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   850d0:	7d1b      	ldrb	r3, [r3, #20]
   850d2:	f013 0f01 	tst.w	r3, #1
   850d6:	d010      	beq.n	850fa <udd_ep_clear_halt+0xd2>
			ptr_job->busy = false;
   850d8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   850dc:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   850e0:	7d18      	ldrb	r0, [r3, #20]
   850e2:	f36f 0000 	bfc	r0, #0, #1
   850e6:	7518      	strb	r0, [r3, #20]
			ptr_job->call_nohalt();
   850e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   850ec:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   850f0:	4798      	blx	r3
	return true;
   850f2:	2001      	movs	r0, #1
   850f4:	e002      	b.n	850fc <udd_ep_clear_halt+0xd4>
		return false;
   850f6:	2000      	movs	r0, #0
}
   850f8:	4770      	bx	lr
	return true;
   850fa:	2001      	movs	r0, #1
}
   850fc:	bd38      	pop	{r3, r4, r5, pc}
	if (Is_udd_endpoint_stall_requested(ep)) {
   850fe:	0143      	lsls	r3, r0, #5
   85100:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85104:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85108:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8510c:	f013 0f20 	tst.w	r3, #32
   85110:	d1b4      	bne.n	8507c <udd_ep_clear_halt+0x54>
	return true;
   85112:	2001      	movs	r0, #1
   85114:	e7f2      	b.n	850fc <udd_ep_clear_halt+0xd4>
   85116:	bf00      	nop
   85118:	20001e88 	.word	0x20001e88
   8511c:	400a4000 	.word	0x400a4000

00085120 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   85120:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   85124:	2806      	cmp	r0, #6
   85126:	d868      	bhi.n	851fa <udd_ep_run+0xda>
{
   85128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   8512a:	0144      	lsls	r4, r0, #5
   8512c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85130:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85134:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   85138:	f014 0f01 	tst.w	r4, #1
   8513c:	d05f      	beq.n	851fe <udd_ep_run+0xde>
			|| Is_udd_endpoint_stall_requested(ep)
   8513e:	0144      	lsls	r4, r0, #5
   85140:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85144:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85148:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   8514c:	f014 0f20 	tst.w	r4, #32
   85150:	d157      	bne.n	85202 <udd_ep_run+0xe2>
	ptr_job = &udd_ep_job[ep - 1];
   85152:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   85154:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   85158:	4d2d      	ldr	r5, [pc, #180]	; (85210 <udd_ep_run+0xf0>)
   8515a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   8515e:	7d2d      	ldrb	r5, [r5, #20]
   85160:	f015 0f04 	tst.w	r5, #4
   85164:	d14f      	bne.n	85206 <udd_ep_run+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85166:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   8516a:	b672      	cpsid	i
   8516c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85170:	4d28      	ldr	r5, [pc, #160]	; (85214 <udd_ep_run+0xf4>)
   85172:	2600      	movs	r6, #0
   85174:	702e      	strb	r6, [r5, #0]
	if (ptr_job->busy == true) {
   85176:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8517a:	4e25      	ldr	r6, [pc, #148]	; (85210 <udd_ep_run+0xf0>)
   8517c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85180:	7d2d      	ldrb	r5, [r5, #20]
   85182:	f015 0f01 	tst.w	r5, #1
   85186:	d121      	bne.n	851cc <udd_ep_run+0xac>
	ptr_job->busy = true;
   85188:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   8518c:	4e20      	ldr	r6, [pc, #128]	; (85210 <udd_ep_run+0xf0>)
   8518e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85192:	7d2e      	ldrb	r6, [r5, #20]
   85194:	f046 0601 	orr.w	r6, r6, #1
   85198:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8519a:	b92f      	cbnz	r7, 851a8 <udd_ep_run+0x88>
		cpu_irq_enable();
   8519c:	4d1d      	ldr	r5, [pc, #116]	; (85214 <udd_ep_run+0xf4>)
   8519e:	2601      	movs	r6, #1
   851a0:	702e      	strb	r6, [r5, #0]
   851a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   851a6:	b662      	cpsie	i
	ptr_job->buf = buf;
   851a8:	4e19      	ldr	r6, [pc, #100]	; (85210 <udd_ep_run+0xf0>)
   851aa:	eb04 0744 	add.w	r7, r4, r4, lsl #1
   851ae:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
   851b2:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
   851b4:	60ab      	str	r3, [r5, #8]
	ptr_job->buf_cnt = 0;
   851b6:	2200      	movs	r2, #0
   851b8:	60ea      	str	r2, [r5, #12]
	ptr_job->buf_load = 0;
   851ba:	612a      	str	r2, [r5, #16]
	ptr_job->call_trans = callback;
   851bc:	9a06      	ldr	r2, [sp, #24]
   851be:	f846 2037 	str.w	r2, [r6, r7, lsl #3]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   851c2:	b961      	cbnz	r1, 851de <udd_ep_run+0xbe>
   851c4:	fab3 f383 	clz	r3, r3
   851c8:	095b      	lsrs	r3, r3, #5
   851ca:	e009      	b.n	851e0 <udd_ep_run+0xc0>
	if (cpu_irq_is_enabled_flags(flags))
   851cc:	b9ef      	cbnz	r7, 8520a <udd_ep_run+0xea>
		cpu_irq_enable();
   851ce:	4b11      	ldr	r3, [pc, #68]	; (85214 <udd_ep_run+0xf4>)
   851d0:	2201      	movs	r2, #1
   851d2:	701a      	strb	r2, [r3, #0]
   851d4:	f3bf 8f5f 	dmb	sy
   851d8:	b662      	cpsie	i
		return false; // Job already on going
   851da:	2000      	movs	r0, #0
}
   851dc:	e010      	b.n	85200 <udd_ep_run+0xe0>
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   851de:	2301      	movs	r3, #1
   851e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   851e4:	4a0a      	ldr	r2, [pc, #40]	; (85210 <udd_ep_run+0xf0>)
   851e6:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   851ea:	7d22      	ldrb	r2, [r4, #20]
   851ec:	f363 0241 	bfi	r2, r3, #1, #1
   851f0:	7522      	strb	r2, [r4, #20]
	udd_ep_trans_done(ep);
   851f2:	4b09      	ldr	r3, [pc, #36]	; (85218 <udd_ep_run+0xf8>)
   851f4:	4798      	blx	r3
	return true;
   851f6:	2001      	movs	r0, #1
   851f8:	e002      	b.n	85200 <udd_ep_run+0xe0>
		return false;
   851fa:	2000      	movs	r0, #0
}
   851fc:	4770      	bx	lr
		return false; // Endpoint is halted
   851fe:	2000      	movs	r0, #0
}
   85200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
   85202:	2000      	movs	r0, #0
   85204:	e7fc      	b.n	85200 <udd_ep_run+0xe0>
   85206:	2000      	movs	r0, #0
   85208:	e7fa      	b.n	85200 <udd_ep_run+0xe0>
		return false; // Job already on going
   8520a:	2000      	movs	r0, #0
   8520c:	e7f8      	b.n	85200 <udd_ep_run+0xe0>
   8520e:	bf00      	nop
   85210:	20001e88 	.word	0x20001e88
   85214:	200006e6 	.word	0x200006e6
   85218:	000844f1 	.word	0x000844f1

0008521c <udd_ep_alloc>:
{
   8521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85220:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85222:	f000 050f 	and.w	r5, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   85226:	2d06      	cmp	r5, #6
   85228:	f200 812a 	bhi.w	85480 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   8522c:	016c      	lsls	r4, r5, #5
   8522e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85232:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85236:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   8523a:	f014 0401 	ands.w	r4, r4, #1
   8523e:	f040 8123 	bne.w	85488 <udd_ep_alloc+0x26c>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85242:	f001 0c03 	and.w	ip, r1, #3
   85246:	f1bc 0f02 	cmp.w	ip, #2
   8524a:	d05e      	beq.n	8530a <udd_ep_alloc+0xee>
   8524c:	f1bc 0f03 	cmp.w	ip, #3
   85250:	d064      	beq.n	8531c <udd_ep_alloc+0x100>
   85252:	f1bc 0f01 	cmp.w	ip, #1
   85256:	d001      	beq.n	8525c <udd_ep_alloc+0x40>
   85258:	2000      	movs	r0, #0
   8525a:	e112      	b.n	85482 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8525c:	2d00      	cmp	r5, #0
   8525e:	d052      	beq.n	85306 <udd_ep_alloc+0xea>
   85260:	1eeb      	subs	r3, r5, #3
   85262:	b2db      	uxtb	r3, r3
   85264:	2b01      	cmp	r3, #1
   85266:	bf94      	ite	ls
   85268:	2300      	movls	r3, #0
   8526a:	2301      	movhi	r3, #1
	if (b_iso_hbw) {
   8526c:	469e      	mov	lr, r3
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8526e:	f04f 0802 	mov.w	r8, #2
	if (b_iso_hbw) {
   85272:	2b00      	cmp	r3, #0
   85274:	d054      	beq.n	85320 <udd_ep_alloc+0x104>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85276:	f402 53c0 	and.w	r3, r2, #6144	; 0x1800
   8527a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8527e:	d04a      	beq.n	85316 <udd_ep_alloc+0xfa>
   85280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   85284:	bf08      	it	eq
   85286:	f04f 0c03 	moveq.w	ip, #3
		MaxEndpointSize &= ~(0x3u << 11);
   8528a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   8528e:	b292      	uxth	r2, r2
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85290:	f04f 0802 	mov.w	r8, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85294:	016f      	lsls	r7, r5, #5
   85296:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
   8529a:	f507 2720 	add.w	r7, r7, #655360	; 0xa0000
   8529e:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
   852a2:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
   852a6:	f026 0603 	bic.w	r6, r6, #3
   852aa:	010b      	lsls	r3, r1, #4
   852ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
   852b0:	f010 0f80 	tst.w	r0, #128	; 0x80
   852b4:	bf0c      	ite	eq
   852b6:	4621      	moveq	r1, r4
   852b8:	2108      	movne	r1, #8
   852ba:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   852be:	d237      	bcs.n	85330 <udd_ep_alloc+0x114>
   852c0:	2a08      	cmp	r2, #8
   852c2:	bf38      	it	cc
   852c4:	2208      	movcc	r2, #8
   852c6:	0052      	lsls	r2, r2, #1
   852c8:	3a01      	subs	r2, #1
   852ca:	fab2 f282 	clz	r2, r2
   852ce:	f1c2 021c 	rsb	r2, r2, #28
   852d2:	4333      	orrs	r3, r6
   852d4:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   852d8:	430b      	orrs	r3, r1
   852da:	f1be 0f00 	cmp.w	lr, #0
   852de:	d001      	beq.n	852e4 <udd_ep_alloc+0xc8>
   852e0:	ea4f 240c 	mov.w	r4, ip, lsl #8
   852e4:	431a      	orrs	r2, r3
   852e6:	4322      	orrs	r2, r4
   852e8:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   852ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   852f0:	2b00      	cmp	r3, #0
   852f2:	f280 80cd 	bge.w	85490 <udd_ep_alloc+0x274>
	udd_enable_endpoint(ep);
   852f6:	2301      	movs	r3, #1
   852f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   852fc:	2306      	movs	r3, #6
	ep_allocated = 0;
   852fe:	2600      	movs	r6, #0
		if (Is_udd_endpoint_enabled(i)) {
   85300:	4865      	ldr	r0, [pc, #404]	; (85498 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   85302:	2401      	movs	r4, #1
   85304:	e01b      	b.n	8533e <udd_ep_alloc+0x122>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85306:	2300      	movs	r3, #0
   85308:	e7b0      	b.n	8526c <udd_ep_alloc+0x50>
		nb_bank = UDD_BULK_NB_BANK(ep);
   8530a:	2d03      	cmp	r5, #3
   8530c:	bf34      	ite	cc
   8530e:	46e0      	movcc	r8, ip
   85310:	f04f 0801 	movcs.w	r8, #1
   85314:	e004      	b.n	85320 <udd_ep_alloc+0x104>
			nb_tran = 2;
   85316:	f04f 0c02 	mov.w	ip, #2
   8531a:	e7b6      	b.n	8528a <udd_ep_alloc+0x6e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8531c:	f04f 0801 	mov.w	r8, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   85320:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85324:	f040 80b2 	bne.w	8548c <udd_ep_alloc+0x270>
   85328:	f04f 0e00 	mov.w	lr, #0
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8532c:	46f4      	mov	ip, lr
   8532e:	e7b1      	b.n	85294 <udd_ep_alloc+0x78>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85330:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85334:	e7c9      	b.n	852ca <udd_ep_alloc+0xae>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85336:	3b01      	subs	r3, #1
   85338:	b2db      	uxtb	r3, r3
   8533a:	429d      	cmp	r5, r3
   8533c:	d81e      	bhi.n	8537c <udd_ep_alloc+0x160>
		if (Is_udd_endpoint_enabled(i)) {
   8533e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   85342:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85346:	f012 0f01 	tst.w	r2, #1
   8534a:	d0f4      	beq.n	85336 <udd_ep_alloc+0x11a>
			bank = udd_get_endpoint_bank(i);
   8534c:	015a      	lsls	r2, r3, #5
   8534e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85352:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85356:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   8535a:	f3c1 1181 	ubfx	r1, r1, #6, #2
   8535e:	005f      	lsls	r7, r3, #1
   85360:	40b9      	lsls	r1, r7
   85362:	430e      	orrs	r6, r1
   85364:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   85366:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   8536a:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   8536e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85372:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85376:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   8537a:	e7dc      	b.n	85336 <udd_ep_alloc+0x11a>
   8537c:	462c      	mov	r4, r5
   8537e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   85382:	4d46      	ldr	r5, [pc, #280]	; (8549c <udd_ep_alloc+0x280>)
   85384:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		bool b_restart = ptr_job->busy;
   85388:	4f44      	ldr	r7, [pc, #272]	; (8549c <udd_ep_alloc+0x280>)
		udd_enable_endpoint(i);
   8538a:	f04f 0801 	mov.w	r8, #1
			b_restart = udd_ep_run(i,
   8538e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 854a0 <udd_ep_alloc+0x284>
   85392:	e023      	b.n	853dc <udd_ep_alloc+0x1c0>
			if (NULL == ptr_job->call_trans) {
   85394:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   85398:	4a40      	ldr	r2, [pc, #256]	; (8549c <udd_ep_alloc+0x280>)
   8539a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   8539e:	2c00      	cmp	r4, #0
   853a0:	d078      	beq.n	85494 <udd_ep_alloc+0x278>
			if (Is_udd_endpoint_in(i)) {
   853a2:	f10c 0c08 	add.w	ip, ip, #8
   853a6:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
   853aa:	4b3b      	ldr	r3, [pc, #236]	; (85498 <udd_ep_alloc+0x27c>)
   853ac:	f853 300c 	ldr.w	r3, [r3, ip]
   853b0:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   853b4:	bf18      	it	ne
   853b6:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   853ba:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   853be:	4b37      	ldr	r3, [pc, #220]	; (8549c <udd_ep_alloc+0x280>)
   853c0:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   853c4:	4602      	mov	r2, r0
   853c6:	f8de 100c 	ldr.w	r1, [lr, #12]
   853ca:	2001      	movs	r0, #1
   853cc:	47a0      	blx	r4
			return false;
   853ce:	2000      	movs	r0, #0
   853d0:	e057      	b.n	85482 <udd_ep_alloc+0x266>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   853d2:	3401      	adds	r4, #1
   853d4:	3518      	adds	r5, #24
   853d6:	b2e3      	uxtb	r3, r4
   853d8:	2b06      	cmp	r3, #6
   853da:	d84f      	bhi.n	8547c <udd_ep_alloc+0x260>
   853dc:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   853de:	46a4      	mov	ip, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   853e0:	0063      	lsls	r3, r4, #1
   853e2:	fa46 f303 	asr.w	r3, r6, r3
		if (bank == 0) {
   853e6:	f013 0203 	ands.w	r2, r3, #3
   853ea:	d0f2      	beq.n	853d2 <udd_ep_alloc+0x1b6>
   853ec:	f104 3eff 	add.w	lr, r4, #4294967295
		bool b_restart = ptr_job->busy;
   853f0:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   853f4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   853f8:	7d0b      	ldrb	r3, [r1, #20]
   853fa:	f003 0a01 	and.w	sl, r3, #1
		ptr_job->busy = false;
   853fe:	f36f 0300 	bfc	r3, #0, #1
   85402:	750b      	strb	r3, [r1, #20]
		udd_configure_endpoint_bank(i, bank);
   85404:	0163      	lsls	r3, r4, #5
   85406:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8540a:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   8540e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   85412:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85416:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
   8541a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   8541e:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   85422:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85426:	2a00      	cmp	r2, #0
   85428:	dab4      	bge.n	85394 <udd_ep_alloc+0x178>
		udd_enable_endpoint_bank_autoswitch(i);
   8542a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   8542e:	f042 0202 	orr.w	r2, r2, #2
   85432:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   85436:	f1ba 0f00 	cmp.w	sl, #0
   8543a:	d0ca      	beq.n	853d2 <udd_ep_alloc+0x1b6>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8543c:	f855 bc0c 	ldr.w	fp, [r5, #-12]
   85440:	f855 2c08 	ldr.w	r2, [r5, #-8]
   85444:	ebab 0102 	sub.w	r1, fp, r2
   85448:	f845 1c0c 	str.w	r1, [r5, #-12]
			b_restart = udd_ep_run(i,
   8544c:	f855 3c10 	ldr.w	r3, [r5, #-16]
   85450:	eb02 0a03 	add.w	sl, r2, r3
   85454:	f855 2c14 	ldr.w	r2, [r5, #-20]
					ptr_job->b_shortpacket,
   85458:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   8545c:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   85460:	f89e c014 	ldrb.w	ip, [lr, #20]
			b_restart = udd_ep_run(i,
   85464:	f855 3c18 	ldr.w	r3, [r5, #-24]
   85468:	9300      	str	r3, [sp, #0]
   8546a:	ebaa 030b 	sub.w	r3, sl, fp
   8546e:	440a      	add	r2, r1
   85470:	f3cc 0140 	ubfx	r1, ip, #1, #1
   85474:	47c8      	blx	r9
			if (!b_restart) {
   85476:	2800      	cmp	r0, #0
   85478:	d1ab      	bne.n	853d2 <udd_ep_alloc+0x1b6>
   8547a:	e002      	b.n	85482 <udd_ep_alloc+0x266>
	return true;
   8547c:	2001      	movs	r0, #1
   8547e:	e000      	b.n	85482 <udd_ep_alloc+0x266>
		return false;
   85480:	2000      	movs	r0, #0
}
   85482:	b003      	add	sp, #12
   85484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   85488:	2000      	movs	r0, #0
   8548a:	e7fa      	b.n	85482 <udd_ep_alloc+0x266>
		return false;
   8548c:	2000      	movs	r0, #0
   8548e:	e7f8      	b.n	85482 <udd_ep_alloc+0x266>
		return false;
   85490:	2000      	movs	r0, #0
   85492:	e7f6      	b.n	85482 <udd_ep_alloc+0x266>
				return false;
   85494:	2000      	movs	r0, #0
   85496:	e7f4      	b.n	85482 <udd_ep_alloc+0x266>
   85498:	400a4000 	.word	0x400a4000
   8549c:	20001e88 	.word	0x20001e88
   854a0:	00085121 	.word	0x00085121

000854a4 <udd_ep_abort>:
{
   854a4:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   854a6:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   854aa:	4b18      	ldr	r3, [pc, #96]	; (8550c <udd_ep_abort+0x68>)
   854ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   854b0:	2100      	movs	r1, #0
   854b2:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   854b4:	f010 0f80 	tst.w	r0, #128	; 0x80
   854b8:	d109      	bne.n	854ce <udd_ep_abort+0x2a>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   854ba:	1e50      	subs	r0, r2, #1
   854bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   854c0:	2101      	movs	r1, #1
   854c2:	4b13      	ldr	r3, [pc, #76]	; (85510 <udd_ep_abort+0x6c>)
   854c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   854c8:	4b12      	ldr	r3, [pc, #72]	; (85514 <udd_ep_abort+0x70>)
   854ca:	4798      	blx	r3
}
   854cc:	bd10      	pop	{r4, pc}
		for(;udd_nb_busy_bank(ep_index);) {
   854ce:	0151      	lsls	r1, r2, #5
   854d0:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   854d4:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   854d8:	f8d1 111c 	ldr.w	r1, [r1, #284]	; 0x11c
   854dc:	f411 2f40 	tst.w	r1, #786432	; 0xc0000
   854e0:	d0eb      	beq.n	854ba <udd_ep_abort+0x16>
			udd_kill_last_in_bank(ep_index);
   854e2:	0153      	lsls	r3, r2, #5
   854e4:	f103 2140 	add.w	r1, r3, #1073758208	; 0x40004000
   854e8:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
   854ec:	f501 748a 	add.w	r4, r1, #276	; 0x114
   854f0:	f44f 7000 	mov.w	r0, #512	; 0x200
   854f4:	6020      	str	r0, [r4, #0]
			while(Is_udd_kill_last(ep_index));
   854f6:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   854fa:	f413 7f00 	tst.w	r3, #512	; 0x200
   854fe:	d1fa      	bne.n	854f6 <udd_ep_abort+0x52>
		for(;udd_nb_busy_bank(ep_index);) {
   85500:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   85504:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   85508:	d1f4      	bne.n	854f4 <udd_ep_abort+0x50>
   8550a:	e7d6      	b.n	854ba <udd_ep_abort+0x16>
   8550c:	400a4300 	.word	0x400a4300
   85510:	20001e88 	.word	0x20001e88
   85514:	000844b9 	.word	0x000844b9

00085518 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   85518:	4a07      	ldr	r2, [pc, #28]	; (85538 <udd_test_mode_j+0x20>)
   8551a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8551e:	f023 0303 	bic.w	r3, r3, #3
   85522:	f043 0302 	orr.w	r3, r3, #2
   85526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8552a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   8552e:	f043 0304 	orr.w	r3, r3, #4
   85532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85536:	4770      	bx	lr
   85538:	400a4000 	.word	0x400a4000

0008553c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8553c:	4a07      	ldr	r2, [pc, #28]	; (8555c <udd_test_mode_k+0x20>)
   8553e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85542:	f023 0303 	bic.w	r3, r3, #3
   85546:	f043 0302 	orr.w	r3, r3, #2
   8554a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8554e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85552:	f043 0308 	orr.w	r3, r3, #8
   85556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8555a:	4770      	bx	lr
   8555c:	400a4000 	.word	0x400a4000

00085560 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   85560:	4a04      	ldr	r2, [pc, #16]	; (85574 <udd_test_mode_se0_nak+0x14>)
   85562:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85566:	f023 0303 	bic.w	r3, r3, #3
   8556a:	f043 0302 	orr.w	r3, r3, #2
   8556e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85572:	4770      	bx	lr
   85574:	400a4000 	.word	0x400a4000

00085578 <udd_test_mode_packet>:
{
   85578:	b430      	push	{r4, r5}
   8557a:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   8557c:	466c      	mov	r4, sp
   8557e:	4d21      	ldr	r5, [pc, #132]	; (85604 <udd_test_mode_packet+0x8c>)
   85580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8558a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8558c:	e895 0003 	ldmia.w	r5, {r0, r1}
   85590:	f844 0b04 	str.w	r0, [r4], #4
   85594:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   85596:	4b1c      	ldr	r3, [pc, #112]	; (85608 <udd_test_mode_packet+0x90>)
   85598:	2101      	movs	r1, #1
   8559a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8559e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   855a2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   855a6:	f022 0203 	bic.w	r2, r2, #3
   855aa:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   855ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   855b2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   855b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   855ba:	f022 0203 	bic.w	r2, r2, #3
   855be:	f042 0202 	orr.w	r2, r2, #2
   855c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   855c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   855ca:	f042 0210 	orr.w	r2, r2, #16
   855ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	ptr_src = test_packet;
   855d2:	466b      	mov	r3, sp
   855d4:	480d      	ldr	r0, [pc, #52]	; (8560c <udd_test_mode_packet+0x94>)
   855d6:	aa0e      	add	r2, sp, #56	; 0x38
   855d8:	1a80      	subs	r0, r0, r2
	for (i = 0; i < sizeof(test_packet); i++) {
   855da:	f10d 0435 	add.w	r4, sp, #53	; 0x35
   855de:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   855e0:	f813 1b01 	ldrb.w	r1, [r3], #1
   855e4:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   855e6:	42a3      	cmp	r3, r4
   855e8:	d1f9      	bne.n	855de <udd_test_mode_packet+0x66>
	udd_ack_in_send(0);
   855ea:	4b07      	ldr	r3, [pc, #28]	; (85608 <udd_test_mode_packet+0x90>)
   855ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   855f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   855f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   855f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   855fc:	b00e      	add	sp, #56	; 0x38
   855fe:	bc30      	pop	{r4, r5}
   85600:	4770      	bx	lr
   85602:	bf00      	nop
   85604:	0008ccd0 	.word	0x0008ccd0
   85608:	400a4000 	.word	0x400a4000
   8560c:	20180038 	.word	0x20180038

00085610 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   85610:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   85612:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
   85616:	d214      	bcs.n	85642 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85618:	00c9      	lsls	r1, r1, #3
   8561a:	084b      	lsrs	r3, r1, #1
   8561c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   85620:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   85624:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85626:	1e5c      	subs	r4, r3, #1
   85628:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8562c:	428c      	cmp	r4, r1
   8562e:	d901      	bls.n	85634 <usart_set_async_baudrate+0x24>
		return 1;
   85630:	2001      	movs	r0, #1
   85632:	e018      	b.n	85666 <usart_set_async_baudrate+0x56>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   85634:	6841      	ldr	r1, [r0, #4]
   85636:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8563a:	6041      	str	r1, [r0, #4]
   8563c:	e00d      	b.n	8565a <usart_set_async_baudrate+0x4a>
		return 1;
   8563e:	2001      	movs	r0, #1
   85640:	e011      	b.n	85666 <usart_set_async_baudrate+0x56>
   85642:	010c      	lsls	r4, r1, #4
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   85644:	0863      	lsrs	r3, r4, #1
   85646:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   8564a:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
   8564e:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   85650:	1e5c      	subs	r4, r3, #1
   85652:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   85656:	428c      	cmp	r4, r1
   85658:	d8f1      	bhi.n	8563e <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8565a:	0412      	lsls	r2, r2, #16
   8565c:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   85660:	431a      	orrs	r2, r3
   85662:	6202      	str	r2, [r0, #32]

	return 0;
   85664:	2000      	movs	r0, #0
}
   85666:	bc10      	pop	{r4}
   85668:	4770      	bx	lr
	...

0008566c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8566c:	4b0a      	ldr	r3, [pc, #40]	; (85698 <usart_reset+0x2c>)
   8566e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   85672:	2300      	movs	r3, #0
   85674:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   85676:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85678:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8567a:	2388      	movs	r3, #136	; 0x88
   8567c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8567e:	2324      	movs	r3, #36	; 0x24
   85680:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   85682:	f44f 7380 	mov.w	r3, #256	; 0x100
   85686:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   85688:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   8568c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   8568e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   85692:	6003      	str	r3, [r0, #0]
}
   85694:	4770      	bx	lr
   85696:	bf00      	nop
   85698:	55534100 	.word	0x55534100

0008569c <usart_init_rs232>:
{
   8569c:	b570      	push	{r4, r5, r6, lr}
   8569e:	4605      	mov	r5, r0
   856a0:	460c      	mov	r4, r1
   856a2:	4616      	mov	r6, r2
	usart_reset(p_usart);
   856a4:	4b0e      	ldr	r3, [pc, #56]	; (856e0 <usart_init_rs232+0x44>)
   856a6:	4798      	blx	r3
	ul_reg_val = 0;
   856a8:	4b0e      	ldr	r3, [pc, #56]	; (856e4 <usart_init_rs232+0x48>)
   856aa:	2200      	movs	r2, #0
   856ac:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   856ae:	b194      	cbz	r4, 856d6 <usart_init_rs232+0x3a>
   856b0:	4632      	mov	r2, r6
   856b2:	6821      	ldr	r1, [r4, #0]
   856b4:	4628      	mov	r0, r5
   856b6:	4b0c      	ldr	r3, [pc, #48]	; (856e8 <usart_init_rs232+0x4c>)
   856b8:	4798      	blx	r3
   856ba:	b970      	cbnz	r0, 856da <usart_init_rs232+0x3e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   856bc:	6863      	ldr	r3, [r4, #4]
   856be:	68a2      	ldr	r2, [r4, #8]
   856c0:	4313      	orrs	r3, r2
   856c2:	6922      	ldr	r2, [r4, #16]
   856c4:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   856c6:	68e2      	ldr	r2, [r4, #12]
   856c8:	4313      	orrs	r3, r2
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   856ca:	4a06      	ldr	r2, [pc, #24]	; (856e4 <usart_init_rs232+0x48>)
   856cc:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   856ce:	686a      	ldr	r2, [r5, #4]
   856d0:	4313      	orrs	r3, r2
   856d2:	606b      	str	r3, [r5, #4]
}
   856d4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   856d6:	2001      	movs	r0, #1
   856d8:	e7fc      	b.n	856d4 <usart_init_rs232+0x38>
   856da:	2001      	movs	r0, #1
   856dc:	e7fa      	b.n	856d4 <usart_init_rs232+0x38>
   856de:	bf00      	nop
   856e0:	0008566d 	.word	0x0008566d
   856e4:	20001f18 	.word	0x20001f18
   856e8:	00085611 	.word	0x00085611

000856ec <usart_init_sync_master>:
{
   856ec:	b570      	push	{r4, r5, r6, lr}
   856ee:	4606      	mov	r6, r0
   856f0:	460d      	mov	r5, r1
   856f2:	4614      	mov	r4, r2
	usart_reset(p_usart);
   856f4:	4b15      	ldr	r3, [pc, #84]	; (8574c <usart_init_sync_master+0x60>)
   856f6:	4798      	blx	r3
	ul_reg_val = 0;
   856f8:	4b15      	ldr	r3, [pc, #84]	; (85750 <usart_init_sync_master+0x64>)
   856fa:	2200      	movs	r2, #0
   856fc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   856fe:	b305      	cbz	r5, 85742 <usart_init_sync_master+0x56>
   85700:	682b      	ldr	r3, [r5, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   85702:	eb04 0253 	add.w	r2, r4, r3, lsr #1
   85706:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8570a:	1e51      	subs	r1, r2, #1
   8570c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   85710:	4299      	cmp	r1, r3
   85712:	d818      	bhi.n	85746 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   85714:	6232      	str	r2, [r6, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85716:	6873      	ldr	r3, [r6, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   85718:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   8571c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   85720:	6073      	str	r3, [r6, #4]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   85722:	686b      	ldr	r3, [r5, #4]
   85724:	68ea      	ldr	r2, [r5, #12]
   85726:	4313      	orrs	r3, r2
   85728:	68aa      	ldr	r2, [r5, #8]
   8572a:	4313      	orrs	r3, r2
   8572c:	692a      	ldr	r2, [r5, #16]
   8572e:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   85730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   85734:	4a06      	ldr	r2, [pc, #24]	; (85750 <usart_init_sync_master+0x64>)
   85736:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   85738:	6872      	ldr	r2, [r6, #4]
   8573a:	4313      	orrs	r3, r2
   8573c:	6073      	str	r3, [r6, #4]
	return 0;
   8573e:	2000      	movs	r0, #0
}
   85740:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   85742:	2001      	movs	r0, #1
   85744:	e7fc      	b.n	85740 <usart_init_sync_master+0x54>
   85746:	2001      	movs	r0, #1
   85748:	e7fa      	b.n	85740 <usart_init_sync_master+0x54>
   8574a:	bf00      	nop
   8574c:	0008566d 	.word	0x0008566d
   85750:	20001f1c 	.word	0x20001f1c

00085754 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   85754:	2340      	movs	r3, #64	; 0x40
   85756:	6003      	str	r3, [r0, #0]
}
   85758:	4770      	bx	lr

0008575a <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8575a:	2380      	movs	r3, #128	; 0x80
   8575c:	6003      	str	r3, [r0, #0]
}
   8575e:	4770      	bx	lr

00085760 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   85760:	2310      	movs	r3, #16
   85762:	6003      	str	r3, [r0, #0]
}
   85764:	4770      	bx	lr

00085766 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   85766:	2320      	movs	r3, #32
   85768:	6003      	str	r3, [r0, #0]
}
   8576a:	4770      	bx	lr

0008576c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   8576c:	6081      	str	r1, [r0, #8]
}
   8576e:	4770      	bx	lr

00085770 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   85770:	60c1      	str	r1, [r0, #12]
}
   85772:	4770      	bx	lr

00085774 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   85774:	6900      	ldr	r0, [r0, #16]
}
   85776:	4770      	bx	lr

00085778 <usart_get_status>:
	return p_usart->US_CSR;
   85778:	6940      	ldr	r0, [r0, #20]
}
   8577a:	4770      	bx	lr

0008577c <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   8577c:	6940      	ldr	r0, [r0, #20]
}
   8577e:	f3c0 2040 	ubfx	r0, r0, #9, #1
   85782:	4770      	bx	lr

00085784 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85784:	6943      	ldr	r3, [r0, #20]
   85786:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   8578a:	bf1d      	ittte	ne
   8578c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   85790:	61c1      	strne	r1, [r0, #28]
	return 0;
   85792:	2000      	movne	r0, #0
		return 1;
   85794:	2001      	moveq	r0, #1
}
   85796:	4770      	bx	lr

00085798 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85798:	6943      	ldr	r3, [r0, #20]
   8579a:	f013 0f02 	tst.w	r3, #2
   8579e:	d0fb      	beq.n	85798 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   857a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   857a4:	61c1      	str	r1, [r0, #28]
}
   857a6:	2000      	movs	r0, #0
   857a8:	4770      	bx	lr

000857aa <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   857aa:	6943      	ldr	r3, [r0, #20]
   857ac:	f013 0f01 	tst.w	r3, #1
   857b0:	d005      	beq.n	857be <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   857b2:	6983      	ldr	r3, [r0, #24]
   857b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   857b8:	600b      	str	r3, [r1, #0]
	return 0;
   857ba:	2000      	movs	r0, #0
   857bc:	4770      	bx	lr
		return 1;
   857be:	2001      	movs	r0, #1
}
   857c0:	4770      	bx	lr

000857c2 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   857c2:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   857c4:	23ac      	movs	r3, #172	; 0xac
   857c6:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   857c8:	680b      	ldr	r3, [r1, #0]
   857ca:	684a      	ldr	r2, [r1, #4]
   857cc:	fbb3 f3f2 	udiv	r3, r3, r2
   857d0:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   857d2:	1e5c      	subs	r4, r3, #1
   857d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   857d8:	4294      	cmp	r4, r2
   857da:	d80b      	bhi.n	857f4 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   857dc:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   857de:	688b      	ldr	r3, [r1, #8]
   857e0:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   857e2:	f240 2302 	movw	r3, #514	; 0x202
   857e6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   857ea:	2350      	movs	r3, #80	; 0x50
   857ec:	6003      	str	r3, [r0, #0]

	return 0;
   857ee:	2000      	movs	r0, #0
}
   857f0:	bc10      	pop	{r4}
   857f2:	4770      	bx	lr
		return 1;
   857f4:	2001      	movs	r0, #1
   857f6:	e7fb      	b.n	857f0 <uart_init+0x2e>

000857f8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   857f8:	6943      	ldr	r3, [r0, #20]
   857fa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   857fe:	bf1a      	itte	ne
   85800:	61c1      	strne	r1, [r0, #28]
	return 0;
   85802:	2000      	movne	r0, #0
		return 1;
   85804:	2001      	moveq	r0, #1
}
   85806:	4770      	bx	lr

00085808 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   85808:	6943      	ldr	r3, [r0, #20]
   8580a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8580e:	bf1d      	ittte	ne
   85810:	6983      	ldrne	r3, [r0, #24]
   85812:	700b      	strbne	r3, [r1, #0]
	return 0;
   85814:	2000      	movne	r0, #0
		return 1;
   85816:	2001      	moveq	r0, #1
}
   85818:	4770      	bx	lr

0008581a <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   8581a:	e7fe      	b.n	8581a <Dummy_Handler>

0008581c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8581c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8581e:	4a1d      	ldr	r2, [pc, #116]	; (85894 <Reset_Handler+0x78>)
   85820:	4b1d      	ldr	r3, [pc, #116]	; (85898 <Reset_Handler+0x7c>)
   85822:	429a      	cmp	r2, r3
   85824:	d011      	beq.n	8584a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
   85826:	461a      	mov	r2, r3
   85828:	4b1c      	ldr	r3, [pc, #112]	; (8589c <Reset_Handler+0x80>)
   8582a:	429a      	cmp	r2, r3
   8582c:	d20d      	bcs.n	8584a <Reset_Handler+0x2e>
   8582e:	4611      	mov	r1, r2
   85830:	3b01      	subs	r3, #1
   85832:	1a9b      	subs	r3, r3, r2
   85834:	f023 0303 	bic.w	r3, r3, #3
   85838:	3304      	adds	r3, #4
   8583a:	4a16      	ldr	r2, [pc, #88]	; (85894 <Reset_Handler+0x78>)
   8583c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
   8583e:	f852 0b04 	ldr.w	r0, [r2], #4
   85842:	f841 0b04 	str.w	r0, [r1], #4
		for (; pDest < &_erelocate;) {
   85846:	429a      	cmp	r2, r3
   85848:	d1f9      	bne.n	8583e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8584a:	4a15      	ldr	r2, [pc, #84]	; (858a0 <Reset_Handler+0x84>)
   8584c:	4b15      	ldr	r3, [pc, #84]	; (858a4 <Reset_Handler+0x88>)
   8584e:	429a      	cmp	r2, r3
   85850:	d20a      	bcs.n	85868 <Reset_Handler+0x4c>
   85852:	3b01      	subs	r3, #1
   85854:	1a9b      	subs	r3, r3, r2
   85856:	f023 0303 	bic.w	r3, r3, #3
   8585a:	3304      	adds	r3, #4
   8585c:	4413      	add	r3, r2
		*pDest++ = 0;
   8585e:	2100      	movs	r1, #0
   85860:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   85864:	4293      	cmp	r3, r2
   85866:	d1fb      	bne.n	85860 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   85868:	4b0f      	ldr	r3, [pc, #60]	; (858a8 <Reset_Handler+0x8c>)
   8586a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8586e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85872:	490e      	ldr	r1, [pc, #56]	; (858ac <Reset_Handler+0x90>)
   85874:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   85876:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8587a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   8587e:	d203      	bcs.n	85888 <Reset_Handler+0x6c>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   85880:	688b      	ldr	r3, [r1, #8]
   85882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85886:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   85888:	4b09      	ldr	r3, [pc, #36]	; (858b0 <Reset_Handler+0x94>)
   8588a:	4798      	blx	r3

	/* Branch to main function */
	main();
   8588c:	4b09      	ldr	r3, [pc, #36]	; (858b4 <Reset_Handler+0x98>)
   8588e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   85890:	e7fe      	b.n	85890 <Reset_Handler+0x74>
   85892:	bf00      	nop
   85894:	0008d1f4 	.word	0x0008d1f4
   85898:	20000000 	.word	0x20000000
   8589c:	200010c0 	.word	0x200010c0
   858a0:	200010c0 	.word	0x200010c0
   858a4:	20002bd0 	.word	0x20002bd0
   858a8:	00080000 	.word	0x00080000
   858ac:	e000ed00 	.word	0xe000ed00
   858b0:	00086089 	.word	0x00086089
   858b4:	00085b41 	.word	0x00085b41

000858b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   858b8:	4b3d      	ldr	r3, [pc, #244]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   858ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   858bc:	f002 0303 	and.w	r3, r2, #3
   858c0:	2b01      	cmp	r3, #1
   858c2:	d032      	beq.n	8592a <SystemCoreClockUpdate+0x72>
   858c4:	f012 0f02 	tst.w	r2, #2
   858c8:	d11b      	bne.n	85902 <SystemCoreClockUpdate+0x4a>
   858ca:	b953      	cbnz	r3, 858e2 <SystemCoreClockUpdate+0x2a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   858cc:	4b39      	ldr	r3, [pc, #228]	; (859b4 <SystemCoreClockUpdate+0xfc>)
   858ce:	695b      	ldr	r3, [r3, #20]
   858d0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   858d4:	4b38      	ldr	r3, [pc, #224]	; (859b8 <SystemCoreClockUpdate+0x100>)
   858d6:	bf14      	ite	ne
   858d8:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   858dc:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   858e0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   858e2:	4b33      	ldr	r3, [pc, #204]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   858e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   858e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   858ea:	2b70      	cmp	r3, #112	; 0x70
   858ec:	d058      	beq.n	859a0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   858ee:	4b30      	ldr	r3, [pc, #192]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   858f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   858f2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   858f6:	4b30      	ldr	r3, [pc, #192]	; (859b8 <SystemCoreClockUpdate+0x100>)
   858f8:	681b      	ldr	r3, [r3, #0]
   858fa:	40d3      	lsrs	r3, r2
   858fc:	4a2e      	ldr	r2, [pc, #184]	; (859b8 <SystemCoreClockUpdate+0x100>)
   858fe:	6013      	str	r3, [r2, #0]
			                           PMC_MCKR_PRES_Pos);
	}
}
   85900:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85902:	4b2b      	ldr	r3, [pc, #172]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   85904:	6a1b      	ldr	r3, [r3, #32]
   85906:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8590a:	d12a      	bne.n	85962 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8590c:	4b2a      	ldr	r3, [pc, #168]	; (859b8 <SystemCoreClockUpdate+0x100>)
   8590e:	4a2b      	ldr	r2, [pc, #172]	; (859bc <SystemCoreClockUpdate+0x104>)
   85910:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85912:	4b27      	ldr	r3, [pc, #156]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   85914:	6a1b      	ldr	r3, [r3, #32]
   85916:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8591a:	2b10      	cmp	r3, #16
   8591c:	d02e      	beq.n	8597c <SystemCoreClockUpdate+0xc4>
   8591e:	2b20      	cmp	r3, #32
   85920:	d122      	bne.n	85968 <SystemCoreClockUpdate+0xb0>
				SystemCoreClock *= 3U;
   85922:	4b25      	ldr	r3, [pc, #148]	; (859b8 <SystemCoreClockUpdate+0x100>)
   85924:	4a26      	ldr	r2, [pc, #152]	; (859c0 <SystemCoreClockUpdate+0x108>)
   85926:	601a      	str	r2, [r3, #0]
				break;
   85928:	e01e      	b.n	85968 <SystemCoreClockUpdate+0xb0>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8592a:	4b21      	ldr	r3, [pc, #132]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   8592c:	6a1b      	ldr	r3, [r3, #32]
   8592e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   85932:	d003      	beq.n	8593c <SystemCoreClockUpdate+0x84>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85934:	4b20      	ldr	r3, [pc, #128]	; (859b8 <SystemCoreClockUpdate+0x100>)
   85936:	4a22      	ldr	r2, [pc, #136]	; (859c0 <SystemCoreClockUpdate+0x108>)
   85938:	601a      	str	r2, [r3, #0]
   8593a:	e7d2      	b.n	858e2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8593c:	4b1e      	ldr	r3, [pc, #120]	; (859b8 <SystemCoreClockUpdate+0x100>)
   8593e:	4a1f      	ldr	r2, [pc, #124]	; (859bc <SystemCoreClockUpdate+0x104>)
   85940:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85942:	4b1b      	ldr	r3, [pc, #108]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   85944:	6a1b      	ldr	r3, [r3, #32]
   85946:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8594a:	2b10      	cmp	r3, #16
   8594c:	d005      	beq.n	8595a <SystemCoreClockUpdate+0xa2>
   8594e:	2b20      	cmp	r3, #32
   85950:	d1c7      	bne.n	858e2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   85952:	4b19      	ldr	r3, [pc, #100]	; (859b8 <SystemCoreClockUpdate+0x100>)
   85954:	4a1a      	ldr	r2, [pc, #104]	; (859c0 <SystemCoreClockUpdate+0x108>)
   85956:	601a      	str	r2, [r3, #0]
				break;
   85958:	e7c3      	b.n	858e2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8595a:	4b17      	ldr	r3, [pc, #92]	; (859b8 <SystemCoreClockUpdate+0x100>)
   8595c:	4a19      	ldr	r2, [pc, #100]	; (859c4 <SystemCoreClockUpdate+0x10c>)
   8595e:	601a      	str	r2, [r3, #0]
				break;
   85960:	e7bf      	b.n	858e2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85962:	4b15      	ldr	r3, [pc, #84]	; (859b8 <SystemCoreClockUpdate+0x100>)
   85964:	4a16      	ldr	r2, [pc, #88]	; (859c0 <SystemCoreClockUpdate+0x108>)
   85966:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85968:	4b11      	ldr	r3, [pc, #68]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   8596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8596c:	f003 0303 	and.w	r3, r3, #3
   85970:	2b02      	cmp	r3, #2
   85972:	d007      	beq.n	85984 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85974:	4b10      	ldr	r3, [pc, #64]	; (859b8 <SystemCoreClockUpdate+0x100>)
   85976:	4a14      	ldr	r2, [pc, #80]	; (859c8 <SystemCoreClockUpdate+0x110>)
   85978:	601a      	str	r2, [r3, #0]
   8597a:	e7b2      	b.n	858e2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8597c:	4b0e      	ldr	r3, [pc, #56]	; (859b8 <SystemCoreClockUpdate+0x100>)
   8597e:	4a11      	ldr	r2, [pc, #68]	; (859c4 <SystemCoreClockUpdate+0x10c>)
   85980:	601a      	str	r2, [r3, #0]
				break;
   85982:	e7f1      	b.n	85968 <SystemCoreClockUpdate+0xb0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85984:	4a0a      	ldr	r2, [pc, #40]	; (859b0 <SystemCoreClockUpdate+0xf8>)
   85986:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85988:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8598a:	480b      	ldr	r0, [pc, #44]	; (859b8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8598c:	f3c1 410a 	ubfx	r1, r1, #16, #11
   85990:	6803      	ldr	r3, [r0, #0]
   85992:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85996:	b2d2      	uxtb	r2, r2
   85998:	fbb3 f3f2 	udiv	r3, r3, r2
   8599c:	6003      	str	r3, [r0, #0]
   8599e:	e7a0      	b.n	858e2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   859a0:	4b05      	ldr	r3, [pc, #20]	; (859b8 <SystemCoreClockUpdate+0x100>)
   859a2:	681b      	ldr	r3, [r3, #0]
   859a4:	4a09      	ldr	r2, [pc, #36]	; (859cc <SystemCoreClockUpdate+0x114>)
   859a6:	fba2 2303 	umull	r2, r3, r2, r3
   859aa:	085b      	lsrs	r3, r3, #1
   859ac:	e7a6      	b.n	858fc <SystemCoreClockUpdate+0x44>
   859ae:	bf00      	nop
   859b0:	400e0400 	.word	0x400e0400
   859b4:	400e1210 	.word	0x400e1210
   859b8:	200006e8 	.word	0x200006e8
   859bc:	003d0900 	.word	0x003d0900
   859c0:	00b71b00 	.word	0x00b71b00
   859c4:	007a1200 	.word	0x007a1200
   859c8:	0e4e1c00 	.word	0x0e4e1c00
   859cc:	aaaaaaab 	.word	0xaaaaaaab

000859d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   859d0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   859d2:	4a09      	ldr	r2, [pc, #36]	; (859f8 <_sbrk+0x28>)
   859d4:	6812      	ldr	r2, [r2, #0]
   859d6:	b15a      	cbz	r2, 859f0 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   859d8:	4a07      	ldr	r2, [pc, #28]	; (859f8 <_sbrk+0x28>)
   859da:	6810      	ldr	r0, [r2, #0]

	if (((int)prev_heap + incr) > ramend) {
   859dc:	18c1      	adds	r1, r0, r3
   859de:	4a07      	ldr	r2, [pc, #28]	; (859fc <_sbrk+0x2c>)
   859e0:	4291      	cmp	r1, r2
		return (caddr_t) -1;	
	}

	heap += incr;
   859e2:	bfdd      	ittte	le
   859e4:	460b      	movle	r3, r1
   859e6:	4a04      	ldrle	r2, [pc, #16]	; (859f8 <_sbrk+0x28>)
   859e8:	6013      	strle	r3, [r2, #0]
		return (caddr_t) -1;	
   859ea:	f04f 30ff 	movgt.w	r0, #4294967295

	return (caddr_t) prev_heap;
}
   859ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   859f0:	4a01      	ldr	r2, [pc, #4]	; (859f8 <_sbrk+0x28>)
   859f2:	4903      	ldr	r1, [pc, #12]	; (85a00 <_sbrk+0x30>)
   859f4:	6011      	str	r1, [r2, #0]
   859f6:	e7ef      	b.n	859d8 <_sbrk+0x8>
   859f8:	20001f20 	.word	0x20001f20
   859fc:	2007fffc 	.word	0x2007fffc
   85a00:	20082000 	.word	0x20082000

00085a04 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   85a04:	f04f 30ff 	mov.w	r0, #4294967295
   85a08:	4770      	bx	lr

00085a0a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   85a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   85a0e:	604b      	str	r3, [r1, #4]

	return 0;
}
   85a10:	2000      	movs	r0, #0
   85a12:	4770      	bx	lr

00085a14 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   85a14:	2001      	movs	r0, #1
   85a16:	4770      	bx	lr

00085a18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   85a18:	2000      	movs	r0, #0
   85a1a:	4770      	bx	lr

00085a1c <_exit>:

extern void _exit(int status)
{
   85a1c:	b508      	push	{r3, lr}
   85a1e:	4601      	mov	r1, r0
	printf("Exiting with status %d.\n", status);
   85a20:	4801      	ldr	r0, [pc, #4]	; (85a28 <_exit+0xc>)
   85a22:	4b02      	ldr	r3, [pc, #8]	; (85a2c <_exit+0x10>)
   85a24:	4798      	blx	r3

	for (;;);
   85a26:	e7fe      	b.n	85a26 <_exit+0xa>
   85a28:	0008cd08 	.word	0x0008cd08
   85a2c:	000860d1 	.word	0x000860d1

00085a30 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   85a30:	4770      	bx	lr

00085a32 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   85a32:	f04f 30ff 	mov.w	r0, #4294967295
   85a36:	4770      	bx	lr

00085a38 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   85a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   85a3a:	b083      	sub	sp, #12
   85a3c:	4605      	mov	r5, r0
   85a3e:	460c      	mov	r4, r1
	uint32_t val = 0;
   85a40:	2300      	movs	r3, #0
   85a42:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   85a44:	4b18      	ldr	r3, [pc, #96]	; (85aa8 <usart_serial_getchar+0x70>)
   85a46:	4298      	cmp	r0, r3
   85a48:	d010      	beq.n	85a6c <usart_serial_getchar+0x34>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   85a4a:	4b18      	ldr	r3, [pc, #96]	; (85aac <usart_serial_getchar+0x74>)
   85a4c:	4298      	cmp	r0, r3
   85a4e:	d021      	beq.n	85a94 <usart_serial_getchar+0x5c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   85a50:	4b17      	ldr	r3, [pc, #92]	; (85ab0 <usart_serial_getchar+0x78>)
   85a52:	4298      	cmp	r0, r3
   85a54:	d111      	bne.n	85a7a <usart_serial_getchar+0x42>
		while (usart_read(p_usart, &val));
   85a56:	461e      	mov	r6, r3
   85a58:	4d16      	ldr	r5, [pc, #88]	; (85ab4 <usart_serial_getchar+0x7c>)
   85a5a:	a901      	add	r1, sp, #4
   85a5c:	4630      	mov	r0, r6
   85a5e:	47a8      	blx	r5
   85a60:	2800      	cmp	r0, #0
   85a62:	d1fa      	bne.n	85a5a <usart_serial_getchar+0x22>
		*data = (uint8_t)(val & 0xFF);
   85a64:	9b01      	ldr	r3, [sp, #4]
   85a66:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   85a68:	b003      	add	sp, #12
   85a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   85a6c:	461f      	mov	r7, r3
   85a6e:	4e12      	ldr	r6, [pc, #72]	; (85ab8 <usart_serial_getchar+0x80>)
   85a70:	4621      	mov	r1, r4
   85a72:	4638      	mov	r0, r7
   85a74:	47b0      	blx	r6
   85a76:	2800      	cmp	r0, #0
   85a78:	d1fa      	bne.n	85a70 <usart_serial_getchar+0x38>
	if (USART2 == p_usart) {
   85a7a:	4b10      	ldr	r3, [pc, #64]	; (85abc <usart_serial_getchar+0x84>)
   85a7c:	429d      	cmp	r5, r3
   85a7e:	d1f3      	bne.n	85a68 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   85a80:	461e      	mov	r6, r3
   85a82:	4d0c      	ldr	r5, [pc, #48]	; (85ab4 <usart_serial_getchar+0x7c>)
   85a84:	a901      	add	r1, sp, #4
   85a86:	4630      	mov	r0, r6
   85a88:	47a8      	blx	r5
   85a8a:	2800      	cmp	r0, #0
   85a8c:	d1fa      	bne.n	85a84 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
   85a8e:	9b01      	ldr	r3, [sp, #4]
   85a90:	7023      	strb	r3, [r4, #0]
}
   85a92:	e7e9      	b.n	85a68 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
   85a94:	461e      	mov	r6, r3
   85a96:	4d07      	ldr	r5, [pc, #28]	; (85ab4 <usart_serial_getchar+0x7c>)
   85a98:	a901      	add	r1, sp, #4
   85a9a:	4630      	mov	r0, r6
   85a9c:	47a8      	blx	r5
   85a9e:	2800      	cmp	r0, #0
   85aa0:	d1fa      	bne.n	85a98 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   85aa2:	9b01      	ldr	r3, [sp, #4]
   85aa4:	7023      	strb	r3, [r4, #0]
	if (USART2 == p_usart) {
   85aa6:	e7df      	b.n	85a68 <usart_serial_getchar+0x30>
   85aa8:	400e0600 	.word	0x400e0600
   85aac:	40090000 	.word	0x40090000
   85ab0:	40094000 	.word	0x40094000
   85ab4:	000857ab 	.word	0x000857ab
   85ab8:	00085809 	.word	0x00085809
   85abc:	40098000 	.word	0x40098000

00085ac0 <usart_serial_putchar>:
{
   85ac0:	b570      	push	{r4, r5, r6, lr}
   85ac2:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   85ac4:	4b18      	ldr	r3, [pc, #96]	; (85b28 <usart_serial_putchar+0x68>)
   85ac6:	4298      	cmp	r0, r3
   85ac8:	d00a      	beq.n	85ae0 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   85aca:	4b18      	ldr	r3, [pc, #96]	; (85b2c <usart_serial_putchar+0x6c>)
   85acc:	4298      	cmp	r0, r3
   85ace:	d010      	beq.n	85af2 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   85ad0:	4b17      	ldr	r3, [pc, #92]	; (85b30 <usart_serial_putchar+0x70>)
   85ad2:	4298      	cmp	r0, r3
   85ad4:	d016      	beq.n	85b04 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   85ad6:	4b17      	ldr	r3, [pc, #92]	; (85b34 <usart_serial_putchar+0x74>)
   85ad8:	4298      	cmp	r0, r3
   85ada:	d01c      	beq.n	85b16 <usart_serial_putchar+0x56>
	return 0;
   85adc:	2000      	movs	r0, #0
}
   85ade:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   85ae0:	461e      	mov	r6, r3
   85ae2:	4d15      	ldr	r5, [pc, #84]	; (85b38 <usart_serial_putchar+0x78>)
   85ae4:	4621      	mov	r1, r4
   85ae6:	4630      	mov	r0, r6
   85ae8:	47a8      	blx	r5
   85aea:	2800      	cmp	r0, #0
   85aec:	d1fa      	bne.n	85ae4 <usart_serial_putchar+0x24>
		return 1;
   85aee:	2001      	movs	r0, #1
   85af0:	e7f5      	b.n	85ade <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85af2:	461e      	mov	r6, r3
   85af4:	4d11      	ldr	r5, [pc, #68]	; (85b3c <usart_serial_putchar+0x7c>)
   85af6:	4621      	mov	r1, r4
   85af8:	4630      	mov	r0, r6
   85afa:	47a8      	blx	r5
   85afc:	2800      	cmp	r0, #0
   85afe:	d1fa      	bne.n	85af6 <usart_serial_putchar+0x36>
		return 1;
   85b00:	2001      	movs	r0, #1
   85b02:	e7ec      	b.n	85ade <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85b04:	461e      	mov	r6, r3
   85b06:	4d0d      	ldr	r5, [pc, #52]	; (85b3c <usart_serial_putchar+0x7c>)
   85b08:	4621      	mov	r1, r4
   85b0a:	4630      	mov	r0, r6
   85b0c:	47a8      	blx	r5
   85b0e:	2800      	cmp	r0, #0
   85b10:	d1fa      	bne.n	85b08 <usart_serial_putchar+0x48>
		return 1;
   85b12:	2001      	movs	r0, #1
   85b14:	e7e3      	b.n	85ade <usart_serial_putchar+0x1e>
		while (usart_write(p_usart, c)!=0);
   85b16:	461e      	mov	r6, r3
   85b18:	4d08      	ldr	r5, [pc, #32]	; (85b3c <usart_serial_putchar+0x7c>)
   85b1a:	4621      	mov	r1, r4
   85b1c:	4630      	mov	r0, r6
   85b1e:	47a8      	blx	r5
   85b20:	2800      	cmp	r0, #0
   85b22:	d1fa      	bne.n	85b1a <usart_serial_putchar+0x5a>
		return 1;
   85b24:	2001      	movs	r0, #1
   85b26:	e7da      	b.n	85ade <usart_serial_putchar+0x1e>
   85b28:	400e0600 	.word	0x400e0600
   85b2c:	40090000 	.word	0x40090000
   85b30:	40094000 	.word	0x40094000
   85b34:	40098000 	.word	0x40098000
   85b38:	000857f9 	.word	0x000857f9
   85b3c:	00085785 	.word	0x00085785

00085b40 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   85b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b44:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   85b46:	2110      	movs	r1, #16
   85b48:	eb0d 0001 	add.w	r0, sp, r1
   85b4c:	4b5d      	ldr	r3, [pc, #372]	; (85cc4 <main+0x184>)
   85b4e:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   85b50:	2008      	movs	r0, #8
   85b52:	4d5d      	ldr	r5, [pc, #372]	; (85cc8 <main+0x188>)
   85b54:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   85b56:	4c5d      	ldr	r4, [pc, #372]	; (85ccc <main+0x18c>)
   85b58:	4b5d      	ldr	r3, [pc, #372]	; (85cd0 <main+0x190>)
   85b5a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   85b5c:	4b5d      	ldr	r3, [pc, #372]	; (85cd4 <main+0x194>)
   85b5e:	4a5e      	ldr	r2, [pc, #376]	; (85cd8 <main+0x198>)
   85b60:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   85b62:	4b5e      	ldr	r3, [pc, #376]	; (85cdc <main+0x19c>)
   85b64:	4a5e      	ldr	r2, [pc, #376]	; (85ce0 <main+0x1a0>)
   85b66:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   85b68:	4b5e      	ldr	r3, [pc, #376]	; (85ce4 <main+0x1a4>)
   85b6a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   85b6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   85b70:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   85b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85b76:	9303      	str	r3, [sp, #12]
   85b78:	2008      	movs	r0, #8
   85b7a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   85b7c:	a901      	add	r1, sp, #4
   85b7e:	4620      	mov	r0, r4
   85b80:	4b59      	ldr	r3, [pc, #356]	; (85ce8 <main+0x1a8>)
   85b82:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   85b84:	4d59      	ldr	r5, [pc, #356]	; (85cec <main+0x1ac>)
   85b86:	682b      	ldr	r3, [r5, #0]
   85b88:	2100      	movs	r1, #0
   85b8a:	6898      	ldr	r0, [r3, #8]
   85b8c:	4c58      	ldr	r4, [pc, #352]	; (85cf0 <main+0x1b0>)
   85b8e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   85b90:	682b      	ldr	r3, [r5, #0]
   85b92:	2100      	movs	r1, #0
   85b94:	6858      	ldr	r0, [r3, #4]
   85b96:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   85b98:	2101      	movs	r1, #1
   85b9a:	4b56      	ldr	r3, [pc, #344]	; (85cf4 <main+0x1b4>)
   85b9c:	7019      	strb	r1, [r3, #0]
   85b9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85ba2:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   85ba4:	4b54      	ldr	r3, [pc, #336]	; (85cf8 <main+0x1b8>)
   85ba6:	2200      	movs	r2, #0
   85ba8:	701a      	strb	r2, [r3, #0]
   85baa:	705a      	strb	r2, [r3, #1]
   85bac:	709a      	strb	r2, [r3, #2]
   85bae:	70da      	strb	r2, [r3, #3]
   85bb0:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   85bb2:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   85bb4:	4b51      	ldr	r3, [pc, #324]	; (85cfc <main+0x1bc>)
   85bb6:	4798      	blx	r3
	board_init();
   85bb8:	4b51      	ldr	r3, [pc, #324]	; (85d00 <main+0x1c0>)
   85bba:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   85bbc:	4b51      	ldr	r3, [pc, #324]	; (85d04 <main+0x1c4>)
   85bbe:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   85bc0:	ac04      	add	r4, sp, #16
   85bc2:	4d51      	ldr	r5, [pc, #324]	; (85d08 <main+0x1c8>)
   85bc4:	f10d 0820 	add.w	r8, sp, #32
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   85bc8:	4f50      	ldr	r7, [pc, #320]	; (85d0c <main+0x1cc>)
   85bca:	4e51      	ldr	r6, [pc, #324]	; (85d10 <main+0x1d0>)
   85bcc:	f854 2b04 	ldr.w	r2, [r4], #4
   85bd0:	4639      	mov	r1, r7
   85bd2:	4628      	mov	r0, r5
   85bd4:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
   85bd6:	3508      	adds	r5, #8
   85bd8:	4544      	cmp	r4, r8
   85bda:	d1f7      	bne.n	85bcc <main+0x8c>
	}
	usb_serial_number[32] = 0;
   85bdc:	4c4a      	ldr	r4, [pc, #296]	; (85d08 <main+0x1c8>)
   85bde:	2600      	movs	r6, #0
   85be0:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   85be4:	4a4b      	ldr	r2, [pc, #300]	; (85d14 <main+0x1d4>)
   85be6:	494c      	ldr	r1, [pc, #304]	; (85d18 <main+0x1d8>)
   85be8:	484c      	ldr	r0, [pc, #304]	; (85d1c <main+0x1dc>)
   85bea:	4f4d      	ldr	r7, [pc, #308]	; (85d20 <main+0x1e0>)
   85bec:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   85bee:	4621      	mov	r1, r4
   85bf0:	484c      	ldr	r0, [pc, #304]	; (85d24 <main+0x1e4>)
   85bf2:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   85bf4:	2009      	movs	r0, #9
   85bf6:	4b34      	ldr	r3, [pc, #208]	; (85cc8 <main+0x188>)
   85bf8:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   85bfa:	4d4b      	ldr	r5, [pc, #300]	; (85d28 <main+0x1e8>)
   85bfc:	4629      	mov	r1, r5
   85bfe:	2029      	movs	r0, #41	; 0x29
   85c00:	4c4a      	ldr	r4, [pc, #296]	; (85d2c <main+0x1ec>)
   85c02:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   85c04:	4629      	mov	r1, r5
   85c06:	202a      	movs	r0, #42	; 0x2a
   85c08:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   85c0a:	4629      	mov	r1, r5
   85c0c:	202b      	movs	r0, #43	; 0x2b
   85c0e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   85c10:	4629      	mov	r1, r5
   85c12:	202c      	movs	r0, #44	; 0x2c
   85c14:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   85c16:	4629      	mov	r1, r5
   85c18:	202d      	movs	r0, #45	; 0x2d
   85c1a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   85c1c:	4629      	mov	r1, r5
   85c1e:	202e      	movs	r0, #46	; 0x2e
   85c20:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   85c22:	4629      	mov	r1, r5
   85c24:	202f      	movs	r0, #47	; 0x2f
   85c26:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   85c28:	4629      	mov	r1, r5
   85c2a:	2030      	movs	r0, #48	; 0x30
   85c2c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   85c2e:	4629      	mov	r1, r5
   85c30:	2033      	movs	r0, #51	; 0x33
   85c32:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   85c34:	4629      	mov	r1, r5
   85c36:	2037      	movs	r0, #55	; 0x37
   85c38:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   85c3a:	4629      	mov	r1, r5
   85c3c:	2034      	movs	r0, #52	; 0x34
   85c3e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   85c40:	483b      	ldr	r0, [pc, #236]	; (85d30 <main+0x1f0>)
   85c42:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   85c44:	4c3b      	ldr	r4, [pc, #236]	; (85d34 <main+0x1f4>)
   85c46:	4a3c      	ldr	r2, [pc, #240]	; (85d38 <main+0x1f8>)
   85c48:	4631      	mov	r1, r6
   85c4a:	4620      	mov	r0, r4
   85c4c:	4b3b      	ldr	r3, [pc, #236]	; (85d3c <main+0x1fc>)
   85c4e:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   85c50:	4a3b      	ldr	r2, [pc, #236]	; (85d40 <main+0x200>)
   85c52:	4631      	mov	r1, r6
   85c54:	4620      	mov	r0, r4
   85c56:	4b3b      	ldr	r3, [pc, #236]	; (85d44 <main+0x204>)
   85c58:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   85c5a:	4a3b      	ldr	r2, [pc, #236]	; (85d48 <main+0x208>)
   85c5c:	4631      	mov	r1, r6
   85c5e:	4620      	mov	r0, r4
   85c60:	4b3a      	ldr	r3, [pc, #232]	; (85d4c <main+0x20c>)
   85c62:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   85c64:	2203      	movs	r2, #3
   85c66:	4631      	mov	r1, r6
   85c68:	4620      	mov	r0, r4
   85c6a:	4b39      	ldr	r3, [pc, #228]	; (85d50 <main+0x210>)
   85c6c:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   85c6e:	4b39      	ldr	r3, [pc, #228]	; (85d54 <main+0x214>)
   85c70:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   85c72:	4b39      	ldr	r3, [pc, #228]	; (85d58 <main+0x218>)
   85c74:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   85c76:	4b39      	ldr	r3, [pc, #228]	; (85d5c <main+0x21c>)
   85c78:	2204      	movs	r2, #4
   85c7a:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   85c7c:	4630      	mov	r0, r6
   85c7e:	4b38      	ldr	r3, [pc, #224]	; (85d60 <main+0x220>)
   85c80:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   85c82:	4838      	ldr	r0, [pc, #224]	; (85d64 <main+0x224>)
   85c84:	47b8      	blx	r7
	naeusb_register_handlers();
   85c86:	4b38      	ldr	r3, [pc, #224]	; (85d68 <main+0x228>)
   85c88:	4798      	blx	r3
	naeusart_register_handlers();
   85c8a:	4b38      	ldr	r3, [pc, #224]	; (85d6c <main+0x22c>)
   85c8c:	4798      	blx	r3
	openadc_register_handlers();
   85c8e:	4b38      	ldr	r3, [pc, #224]	; (85d70 <main+0x230>)
   85c90:	4798      	blx	r3
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	extern volatile bool enable_cdc_transfer[2];
	extern volatile bool usart_x_enabled[4];
	extern tcirc_buf usb_usart_circ_buf;
	init_circ_buf(&usb_usart_circ_buf);
   85c92:	4838      	ldr	r0, [pc, #224]	; (85d74 <main+0x234>)
   85c94:	4b38      	ldr	r3, [pc, #224]	; (85d78 <main+0x238>)
   85c96:	4798      	blx	r3
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   85c98:	4c38      	ldr	r4, [pc, #224]	; (85d7c <main+0x23c>)
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
				uint16_t i = 0;
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   85c9a:	4f39      	ldr	r7, [pc, #228]	; (85d80 <main+0x240>)
		if (enable_cdc_transfer[0] && usart_x_enabled[0]) {
   85c9c:	4a39      	ldr	r2, [pc, #228]	; (85d84 <main+0x244>)
   85c9e:	7823      	ldrb	r3, [r4, #0]
   85ca0:	2b00      	cmp	r3, #0
   85ca2:	d0fc      	beq.n	85c9e <main+0x15e>
   85ca4:	7813      	ldrb	r3, [r2, #0]
   85ca6:	2b00      	cmp	r3, #0
   85ca8:	d0f9      	beq.n	85c9e <main+0x15e>
			while (circ_buf_has_char(&usb_usart_circ_buf)) {
   85caa:	4d32      	ldr	r5, [pc, #200]	; (85d74 <main+0x234>)
   85cac:	4e36      	ldr	r6, [pc, #216]	; (85d88 <main+0x248>)
   85cae:	4628      	mov	r0, r5
   85cb0:	47b0      	blx	r6
   85cb2:	2800      	cmp	r0, #0
   85cb4:	d0f2      	beq.n	85c9c <main+0x15c>
				udi_cdc_multi_putc(0, get_from_circ_buf(&usb_usart_circ_buf));
   85cb6:	4628      	mov	r0, r5
   85cb8:	47b8      	blx	r7
   85cba:	4601      	mov	r1, r0
   85cbc:	2000      	movs	r0, #0
   85cbe:	4b33      	ldr	r3, [pc, #204]	; (85d8c <main+0x24c>)
   85cc0:	4798      	blx	r3
   85cc2:	e7f4      	b.n	85cae <main+0x16e>
   85cc4:	00082f2d 	.word	0x00082f2d
   85cc8:	00084095 	.word	0x00084095
   85ccc:	400e0600 	.word	0x400e0600
   85cd0:	20002b8c 	.word	0x20002b8c
   85cd4:	20002b88 	.word	0x20002b88
   85cd8:	00085ac1 	.word	0x00085ac1
   85cdc:	20002b84 	.word	0x20002b84
   85ce0:	00085a39 	.word	0x00085a39
   85ce4:	05b8d800 	.word	0x05b8d800
   85ce8:	000857c3 	.word	0x000857c3
   85cec:	20000710 	.word	0x20000710
   85cf0:	00086285 	.word	0x00086285
   85cf4:	200006e6 	.word	0x200006e6
   85cf8:	20002b7c 	.word	0x20002b7c
   85cfc:	0008310d 	.word	0x0008310d
   85d00:	00083bc1 	.word	0x00083bc1
   85d04:	00082bed 	.word	0x00082bed
   85d08:	200006ec 	.word	0x200006ec
   85d0c:	0008cd24 	.word	0x0008cd24
   85d10:	00086435 	.word	0x00086435
   85d14:	0008cd2c 	.word	0x0008cd2c
   85d18:	0008cd38 	.word	0x0008cd38
   85d1c:	0008cd44 	.word	0x0008cd44
   85d20:	000860d1 	.word	0x000860d1
   85d24:	0008cd78 	.word	0x0008cd78
   85d28:	08000001 	.word	0x08000001
   85d2c:	00083d59 	.word	0x00083d59
   85d30:	0008cd8c 	.word	0x0008cd8c
   85d34:	400e0000 	.word	0x400e0000
   85d38:	01010100 	.word	0x01010100
   85d3c:	00083c31 	.word	0x00083c31
   85d40:	01030101 	.word	0x01030101
   85d44:	00083c3d 	.word	0x00083c3d
   85d48:	00040002 	.word	0x00040002
   85d4c:	00083c49 	.word	0x00083c49
   85d50:	00083c55 	.word	0x00083c55
   85d54:	00083055 	.word	0x00083055
   85d58:	000833d5 	.word	0x000833d5
   85d5c:	400e0400 	.word	0x400e0400
   85d60:	000840ed 	.word	0x000840ed
   85d64:	0008cdac 	.word	0x0008cdac
   85d68:	00081701 	.word	0x00081701
   85d6c:	00081b95 	.word	0x00081b95
   85d70:	00081a2d 	.word	0x00081a2d
   85d74:	20002728 	.word	0x20002728
   85d78:	00082f79 	.word	0x00082f79
   85d7c:	200019a4 	.word	0x200019a4
   85d80:	00082fd9 	.word	0x00082fd9
   85d84:	20001bc4 	.word	0x20001bc4
   85d88:	00083021 	.word	0x00083021
   85d8c:	00080705 	.word	0x00080705

00085d90 <__aeabi_uldivmod>:
   85d90:	b953      	cbnz	r3, 85da8 <__aeabi_uldivmod+0x18>
   85d92:	b94a      	cbnz	r2, 85da8 <__aeabi_uldivmod+0x18>
   85d94:	2900      	cmp	r1, #0
   85d96:	bf08      	it	eq
   85d98:	2800      	cmpeq	r0, #0
   85d9a:	bf1c      	itt	ne
   85d9c:	f04f 31ff 	movne.w	r1, #4294967295
   85da0:	f04f 30ff 	movne.w	r0, #4294967295
   85da4:	f000 b96e 	b.w	86084 <__aeabi_idiv0>
   85da8:	f1ad 0c08 	sub.w	ip, sp, #8
   85dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85db0:	f000 f806 	bl	85dc0 <__udivmoddi4>
   85db4:	f8dd e004 	ldr.w	lr, [sp, #4]
   85db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85dbc:	b004      	add	sp, #16
   85dbe:	4770      	bx	lr

00085dc0 <__udivmoddi4>:
   85dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85dc4:	9e08      	ldr	r6, [sp, #32]
   85dc6:	460d      	mov	r5, r1
   85dc8:	4604      	mov	r4, r0
   85dca:	468e      	mov	lr, r1
   85dcc:	2b00      	cmp	r3, #0
   85dce:	f040 8083 	bne.w	85ed8 <__udivmoddi4+0x118>
   85dd2:	428a      	cmp	r2, r1
   85dd4:	4617      	mov	r7, r2
   85dd6:	d947      	bls.n	85e68 <__udivmoddi4+0xa8>
   85dd8:	fab2 f382 	clz	r3, r2
   85ddc:	b14b      	cbz	r3, 85df2 <__udivmoddi4+0x32>
   85dde:	f1c3 0120 	rsb	r1, r3, #32
   85de2:	fa05 fe03 	lsl.w	lr, r5, r3
   85de6:	fa20 f101 	lsr.w	r1, r0, r1
   85dea:	409f      	lsls	r7, r3
   85dec:	ea41 0e0e 	orr.w	lr, r1, lr
   85df0:	409c      	lsls	r4, r3
   85df2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85df6:	fbbe fcf8 	udiv	ip, lr, r8
   85dfa:	fa1f f987 	uxth.w	r9, r7
   85dfe:	fb08 e21c 	mls	r2, r8, ip, lr
   85e02:	fb0c f009 	mul.w	r0, ip, r9
   85e06:	0c21      	lsrs	r1, r4, #16
   85e08:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   85e0c:	4290      	cmp	r0, r2
   85e0e:	d90a      	bls.n	85e26 <__udivmoddi4+0x66>
   85e10:	18ba      	adds	r2, r7, r2
   85e12:	f10c 31ff 	add.w	r1, ip, #4294967295
   85e16:	f080 8118 	bcs.w	8604a <__udivmoddi4+0x28a>
   85e1a:	4290      	cmp	r0, r2
   85e1c:	f240 8115 	bls.w	8604a <__udivmoddi4+0x28a>
   85e20:	f1ac 0c02 	sub.w	ip, ip, #2
   85e24:	443a      	add	r2, r7
   85e26:	1a12      	subs	r2, r2, r0
   85e28:	fbb2 f0f8 	udiv	r0, r2, r8
   85e2c:	fb08 2210 	mls	r2, r8, r0, r2
   85e30:	fb00 f109 	mul.w	r1, r0, r9
   85e34:	b2a4      	uxth	r4, r4
   85e36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   85e3a:	42a1      	cmp	r1, r4
   85e3c:	d909      	bls.n	85e52 <__udivmoddi4+0x92>
   85e3e:	193c      	adds	r4, r7, r4
   85e40:	f100 32ff 	add.w	r2, r0, #4294967295
   85e44:	f080 8103 	bcs.w	8604e <__udivmoddi4+0x28e>
   85e48:	42a1      	cmp	r1, r4
   85e4a:	f240 8100 	bls.w	8604e <__udivmoddi4+0x28e>
   85e4e:	3802      	subs	r0, #2
   85e50:	443c      	add	r4, r7
   85e52:	1a64      	subs	r4, r4, r1
   85e54:	2100      	movs	r1, #0
   85e56:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85e5a:	b11e      	cbz	r6, 85e64 <__udivmoddi4+0xa4>
   85e5c:	2200      	movs	r2, #0
   85e5e:	40dc      	lsrs	r4, r3
   85e60:	e9c6 4200 	strd	r4, r2, [r6]
   85e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85e68:	b902      	cbnz	r2, 85e6c <__udivmoddi4+0xac>
   85e6a:	deff      	udf	#255	; 0xff
   85e6c:	fab2 f382 	clz	r3, r2
   85e70:	2b00      	cmp	r3, #0
   85e72:	d14f      	bne.n	85f14 <__udivmoddi4+0x154>
   85e74:	1a8d      	subs	r5, r1, r2
   85e76:	2101      	movs	r1, #1
   85e78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   85e7c:	fa1f f882 	uxth.w	r8, r2
   85e80:	fbb5 fcfe 	udiv	ip, r5, lr
   85e84:	fb0e 551c 	mls	r5, lr, ip, r5
   85e88:	fb08 f00c 	mul.w	r0, r8, ip
   85e8c:	0c22      	lsrs	r2, r4, #16
   85e8e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   85e92:	42a8      	cmp	r0, r5
   85e94:	d907      	bls.n	85ea6 <__udivmoddi4+0xe6>
   85e96:	197d      	adds	r5, r7, r5
   85e98:	f10c 32ff 	add.w	r2, ip, #4294967295
   85e9c:	d202      	bcs.n	85ea4 <__udivmoddi4+0xe4>
   85e9e:	42a8      	cmp	r0, r5
   85ea0:	f200 80e9 	bhi.w	86076 <__udivmoddi4+0x2b6>
   85ea4:	4694      	mov	ip, r2
   85ea6:	1a2d      	subs	r5, r5, r0
   85ea8:	fbb5 f0fe 	udiv	r0, r5, lr
   85eac:	fb0e 5510 	mls	r5, lr, r0, r5
   85eb0:	fb08 f800 	mul.w	r8, r8, r0
   85eb4:	b2a4      	uxth	r4, r4
   85eb6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   85eba:	45a0      	cmp	r8, r4
   85ebc:	d907      	bls.n	85ece <__udivmoddi4+0x10e>
   85ebe:	193c      	adds	r4, r7, r4
   85ec0:	f100 32ff 	add.w	r2, r0, #4294967295
   85ec4:	d202      	bcs.n	85ecc <__udivmoddi4+0x10c>
   85ec6:	45a0      	cmp	r8, r4
   85ec8:	f200 80d9 	bhi.w	8607e <__udivmoddi4+0x2be>
   85ecc:	4610      	mov	r0, r2
   85ece:	eba4 0408 	sub.w	r4, r4, r8
   85ed2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   85ed6:	e7c0      	b.n	85e5a <__udivmoddi4+0x9a>
   85ed8:	428b      	cmp	r3, r1
   85eda:	d908      	bls.n	85eee <__udivmoddi4+0x12e>
   85edc:	2e00      	cmp	r6, #0
   85ede:	f000 80b1 	beq.w	86044 <__udivmoddi4+0x284>
   85ee2:	2100      	movs	r1, #0
   85ee4:	e9c6 0500 	strd	r0, r5, [r6]
   85ee8:	4608      	mov	r0, r1
   85eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85eee:	fab3 f183 	clz	r1, r3
   85ef2:	2900      	cmp	r1, #0
   85ef4:	d14b      	bne.n	85f8e <__udivmoddi4+0x1ce>
   85ef6:	42ab      	cmp	r3, r5
   85ef8:	d302      	bcc.n	85f00 <__udivmoddi4+0x140>
   85efa:	4282      	cmp	r2, r0
   85efc:	f200 80b9 	bhi.w	86072 <__udivmoddi4+0x2b2>
   85f00:	1a84      	subs	r4, r0, r2
   85f02:	eb65 0303 	sbc.w	r3, r5, r3
   85f06:	2001      	movs	r0, #1
   85f08:	469e      	mov	lr, r3
   85f0a:	2e00      	cmp	r6, #0
   85f0c:	d0aa      	beq.n	85e64 <__udivmoddi4+0xa4>
   85f0e:	e9c6 4e00 	strd	r4, lr, [r6]
   85f12:	e7a7      	b.n	85e64 <__udivmoddi4+0xa4>
   85f14:	409f      	lsls	r7, r3
   85f16:	f1c3 0220 	rsb	r2, r3, #32
   85f1a:	40d1      	lsrs	r1, r2
   85f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   85f20:	fbb1 f0fe 	udiv	r0, r1, lr
   85f24:	fa1f f887 	uxth.w	r8, r7
   85f28:	fb0e 1110 	mls	r1, lr, r0, r1
   85f2c:	fa24 f202 	lsr.w	r2, r4, r2
   85f30:	409d      	lsls	r5, r3
   85f32:	fb00 fc08 	mul.w	ip, r0, r8
   85f36:	432a      	orrs	r2, r5
   85f38:	0c15      	lsrs	r5, r2, #16
   85f3a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   85f3e:	45ac      	cmp	ip, r5
   85f40:	fa04 f403 	lsl.w	r4, r4, r3
   85f44:	d909      	bls.n	85f5a <__udivmoddi4+0x19a>
   85f46:	197d      	adds	r5, r7, r5
   85f48:	f100 31ff 	add.w	r1, r0, #4294967295
   85f4c:	f080 808f 	bcs.w	8606e <__udivmoddi4+0x2ae>
   85f50:	45ac      	cmp	ip, r5
   85f52:	f240 808c 	bls.w	8606e <__udivmoddi4+0x2ae>
   85f56:	3802      	subs	r0, #2
   85f58:	443d      	add	r5, r7
   85f5a:	eba5 050c 	sub.w	r5, r5, ip
   85f5e:	fbb5 f1fe 	udiv	r1, r5, lr
   85f62:	fb0e 5c11 	mls	ip, lr, r1, r5
   85f66:	fb01 f908 	mul.w	r9, r1, r8
   85f6a:	b295      	uxth	r5, r2
   85f6c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   85f70:	45a9      	cmp	r9, r5
   85f72:	d907      	bls.n	85f84 <__udivmoddi4+0x1c4>
   85f74:	197d      	adds	r5, r7, r5
   85f76:	f101 32ff 	add.w	r2, r1, #4294967295
   85f7a:	d274      	bcs.n	86066 <__udivmoddi4+0x2a6>
   85f7c:	45a9      	cmp	r9, r5
   85f7e:	d972      	bls.n	86066 <__udivmoddi4+0x2a6>
   85f80:	3902      	subs	r1, #2
   85f82:	443d      	add	r5, r7
   85f84:	eba5 0509 	sub.w	r5, r5, r9
   85f88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   85f8c:	e778      	b.n	85e80 <__udivmoddi4+0xc0>
   85f8e:	f1c1 0720 	rsb	r7, r1, #32
   85f92:	408b      	lsls	r3, r1
   85f94:	fa22 fc07 	lsr.w	ip, r2, r7
   85f98:	ea4c 0c03 	orr.w	ip, ip, r3
   85f9c:	fa25 f407 	lsr.w	r4, r5, r7
   85fa0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   85fa4:	fbb4 f9fe 	udiv	r9, r4, lr
   85fa8:	fa1f f88c 	uxth.w	r8, ip
   85fac:	fb0e 4419 	mls	r4, lr, r9, r4
   85fb0:	fa20 f307 	lsr.w	r3, r0, r7
   85fb4:	fb09 fa08 	mul.w	sl, r9, r8
   85fb8:	408d      	lsls	r5, r1
   85fba:	431d      	orrs	r5, r3
   85fbc:	0c2b      	lsrs	r3, r5, #16
   85fbe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   85fc2:	45a2      	cmp	sl, r4
   85fc4:	fa02 f201 	lsl.w	r2, r2, r1
   85fc8:	fa00 f301 	lsl.w	r3, r0, r1
   85fcc:	d909      	bls.n	85fe2 <__udivmoddi4+0x222>
   85fce:	eb1c 0404 	adds.w	r4, ip, r4
   85fd2:	f109 30ff 	add.w	r0, r9, #4294967295
   85fd6:	d248      	bcs.n	8606a <__udivmoddi4+0x2aa>
   85fd8:	45a2      	cmp	sl, r4
   85fda:	d946      	bls.n	8606a <__udivmoddi4+0x2aa>
   85fdc:	f1a9 0902 	sub.w	r9, r9, #2
   85fe0:	4464      	add	r4, ip
   85fe2:	eba4 040a 	sub.w	r4, r4, sl
   85fe6:	fbb4 f0fe 	udiv	r0, r4, lr
   85fea:	fb0e 4410 	mls	r4, lr, r0, r4
   85fee:	fb00 fa08 	mul.w	sl, r0, r8
   85ff2:	b2ad      	uxth	r5, r5
   85ff4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   85ff8:	45a2      	cmp	sl, r4
   85ffa:	d908      	bls.n	8600e <__udivmoddi4+0x24e>
   85ffc:	eb1c 0404 	adds.w	r4, ip, r4
   86000:	f100 35ff 	add.w	r5, r0, #4294967295
   86004:	d22d      	bcs.n	86062 <__udivmoddi4+0x2a2>
   86006:	45a2      	cmp	sl, r4
   86008:	d92b      	bls.n	86062 <__udivmoddi4+0x2a2>
   8600a:	3802      	subs	r0, #2
   8600c:	4464      	add	r4, ip
   8600e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86012:	fba0 8902 	umull	r8, r9, r0, r2
   86016:	eba4 040a 	sub.w	r4, r4, sl
   8601a:	454c      	cmp	r4, r9
   8601c:	46c6      	mov	lr, r8
   8601e:	464d      	mov	r5, r9
   86020:	d319      	bcc.n	86056 <__udivmoddi4+0x296>
   86022:	d016      	beq.n	86052 <__udivmoddi4+0x292>
   86024:	b15e      	cbz	r6, 8603e <__udivmoddi4+0x27e>
   86026:	ebb3 020e 	subs.w	r2, r3, lr
   8602a:	eb64 0405 	sbc.w	r4, r4, r5
   8602e:	fa04 f707 	lsl.w	r7, r4, r7
   86032:	fa22 f301 	lsr.w	r3, r2, r1
   86036:	431f      	orrs	r7, r3
   86038:	40cc      	lsrs	r4, r1
   8603a:	e9c6 7400 	strd	r7, r4, [r6]
   8603e:	2100      	movs	r1, #0
   86040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86044:	4631      	mov	r1, r6
   86046:	4630      	mov	r0, r6
   86048:	e70c      	b.n	85e64 <__udivmoddi4+0xa4>
   8604a:	468c      	mov	ip, r1
   8604c:	e6eb      	b.n	85e26 <__udivmoddi4+0x66>
   8604e:	4610      	mov	r0, r2
   86050:	e6ff      	b.n	85e52 <__udivmoddi4+0x92>
   86052:	4543      	cmp	r3, r8
   86054:	d2e6      	bcs.n	86024 <__udivmoddi4+0x264>
   86056:	ebb8 0e02 	subs.w	lr, r8, r2
   8605a:	eb69 050c 	sbc.w	r5, r9, ip
   8605e:	3801      	subs	r0, #1
   86060:	e7e0      	b.n	86024 <__udivmoddi4+0x264>
   86062:	4628      	mov	r0, r5
   86064:	e7d3      	b.n	8600e <__udivmoddi4+0x24e>
   86066:	4611      	mov	r1, r2
   86068:	e78c      	b.n	85f84 <__udivmoddi4+0x1c4>
   8606a:	4681      	mov	r9, r0
   8606c:	e7b9      	b.n	85fe2 <__udivmoddi4+0x222>
   8606e:	4608      	mov	r0, r1
   86070:	e773      	b.n	85f5a <__udivmoddi4+0x19a>
   86072:	4608      	mov	r0, r1
   86074:	e749      	b.n	85f0a <__udivmoddi4+0x14a>
   86076:	f1ac 0c02 	sub.w	ip, ip, #2
   8607a:	443d      	add	r5, r7
   8607c:	e713      	b.n	85ea6 <__udivmoddi4+0xe6>
   8607e:	3802      	subs	r0, #2
   86080:	443c      	add	r4, r7
   86082:	e724      	b.n	85ece <__udivmoddi4+0x10e>

00086084 <__aeabi_idiv0>:
   86084:	4770      	bx	lr
   86086:	bf00      	nop

00086088 <__libc_init_array>:
   86088:	b570      	push	{r4, r5, r6, lr}
   8608a:	4e0d      	ldr	r6, [pc, #52]	; (860c0 <__libc_init_array+0x38>)
   8608c:	4d0d      	ldr	r5, [pc, #52]	; (860c4 <__libc_init_array+0x3c>)
   8608e:	1b76      	subs	r6, r6, r5
   86090:	10b6      	asrs	r6, r6, #2
   86092:	d006      	beq.n	860a2 <__libc_init_array+0x1a>
   86094:	2400      	movs	r4, #0
   86096:	f855 3b04 	ldr.w	r3, [r5], #4
   8609a:	3401      	adds	r4, #1
   8609c:	4798      	blx	r3
   8609e:	42a6      	cmp	r6, r4
   860a0:	d1f9      	bne.n	86096 <__libc_init_array+0xe>
   860a2:	4e09      	ldr	r6, [pc, #36]	; (860c8 <__libc_init_array+0x40>)
   860a4:	4d09      	ldr	r5, [pc, #36]	; (860cc <__libc_init_array+0x44>)
   860a6:	f007 f88f 	bl	8d1c8 <_init>
   860aa:	1b76      	subs	r6, r6, r5
   860ac:	10b6      	asrs	r6, r6, #2
   860ae:	d006      	beq.n	860be <__libc_init_array+0x36>
   860b0:	2400      	movs	r4, #0
   860b2:	f855 3b04 	ldr.w	r3, [r5], #4
   860b6:	3401      	adds	r4, #1
   860b8:	4798      	blx	r3
   860ba:	42a6      	cmp	r6, r4
   860bc:	d1f9      	bne.n	860b2 <__libc_init_array+0x2a>
   860be:	bd70      	pop	{r4, r5, r6, pc}
   860c0:	0008d1d4 	.word	0x0008d1d4
   860c4:	0008d1d4 	.word	0x0008d1d4
   860c8:	0008d1dc 	.word	0x0008d1dc
   860cc:	0008d1d4 	.word	0x0008d1d4

000860d0 <iprintf>:
   860d0:	b40f      	push	{r0, r1, r2, r3}
   860d2:	b500      	push	{lr}
   860d4:	4907      	ldr	r1, [pc, #28]	; (860f4 <iprintf+0x24>)
   860d6:	b083      	sub	sp, #12
   860d8:	ab04      	add	r3, sp, #16
   860da:	6808      	ldr	r0, [r1, #0]
   860dc:	f853 2b04 	ldr.w	r2, [r3], #4
   860e0:	6881      	ldr	r1, [r0, #8]
   860e2:	9301      	str	r3, [sp, #4]
   860e4:	f002 f80e 	bl	88104 <_vfiprintf_r>
   860e8:	b003      	add	sp, #12
   860ea:	f85d eb04 	ldr.w	lr, [sp], #4
   860ee:	b004      	add	sp, #16
   860f0:	4770      	bx	lr
   860f2:	bf00      	nop
   860f4:	20000710 	.word	0x20000710

000860f8 <memcpy>:
   860f8:	4684      	mov	ip, r0
   860fa:	ea41 0300 	orr.w	r3, r1, r0
   860fe:	f013 0303 	ands.w	r3, r3, #3
   86102:	d149      	bne.n	86198 <memcpy+0xa0>
   86104:	3a40      	subs	r2, #64	; 0x40
   86106:	d323      	bcc.n	86150 <memcpy+0x58>
   86108:	680b      	ldr	r3, [r1, #0]
   8610a:	6003      	str	r3, [r0, #0]
   8610c:	684b      	ldr	r3, [r1, #4]
   8610e:	6043      	str	r3, [r0, #4]
   86110:	688b      	ldr	r3, [r1, #8]
   86112:	6083      	str	r3, [r0, #8]
   86114:	68cb      	ldr	r3, [r1, #12]
   86116:	60c3      	str	r3, [r0, #12]
   86118:	690b      	ldr	r3, [r1, #16]
   8611a:	6103      	str	r3, [r0, #16]
   8611c:	694b      	ldr	r3, [r1, #20]
   8611e:	6143      	str	r3, [r0, #20]
   86120:	698b      	ldr	r3, [r1, #24]
   86122:	6183      	str	r3, [r0, #24]
   86124:	69cb      	ldr	r3, [r1, #28]
   86126:	61c3      	str	r3, [r0, #28]
   86128:	6a0b      	ldr	r3, [r1, #32]
   8612a:	6203      	str	r3, [r0, #32]
   8612c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8612e:	6243      	str	r3, [r0, #36]	; 0x24
   86130:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86132:	6283      	str	r3, [r0, #40]	; 0x28
   86134:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86136:	62c3      	str	r3, [r0, #44]	; 0x2c
   86138:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8613a:	6303      	str	r3, [r0, #48]	; 0x30
   8613c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8613e:	6343      	str	r3, [r0, #52]	; 0x34
   86140:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86142:	6383      	str	r3, [r0, #56]	; 0x38
   86144:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86146:	63c3      	str	r3, [r0, #60]	; 0x3c
   86148:	3040      	adds	r0, #64	; 0x40
   8614a:	3140      	adds	r1, #64	; 0x40
   8614c:	3a40      	subs	r2, #64	; 0x40
   8614e:	d2db      	bcs.n	86108 <memcpy+0x10>
   86150:	3230      	adds	r2, #48	; 0x30
   86152:	d30b      	bcc.n	8616c <memcpy+0x74>
   86154:	680b      	ldr	r3, [r1, #0]
   86156:	6003      	str	r3, [r0, #0]
   86158:	684b      	ldr	r3, [r1, #4]
   8615a:	6043      	str	r3, [r0, #4]
   8615c:	688b      	ldr	r3, [r1, #8]
   8615e:	6083      	str	r3, [r0, #8]
   86160:	68cb      	ldr	r3, [r1, #12]
   86162:	60c3      	str	r3, [r0, #12]
   86164:	3010      	adds	r0, #16
   86166:	3110      	adds	r1, #16
   86168:	3a10      	subs	r2, #16
   8616a:	d2f3      	bcs.n	86154 <memcpy+0x5c>
   8616c:	320c      	adds	r2, #12
   8616e:	d305      	bcc.n	8617c <memcpy+0x84>
   86170:	f851 3b04 	ldr.w	r3, [r1], #4
   86174:	f840 3b04 	str.w	r3, [r0], #4
   86178:	3a04      	subs	r2, #4
   8617a:	d2f9      	bcs.n	86170 <memcpy+0x78>
   8617c:	3204      	adds	r2, #4
   8617e:	d008      	beq.n	86192 <memcpy+0x9a>
   86180:	07d2      	lsls	r2, r2, #31
   86182:	bf1c      	itt	ne
   86184:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86188:	f800 3b01 	strbne.w	r3, [r0], #1
   8618c:	d301      	bcc.n	86192 <memcpy+0x9a>
   8618e:	880b      	ldrh	r3, [r1, #0]
   86190:	8003      	strh	r3, [r0, #0]
   86192:	4660      	mov	r0, ip
   86194:	4770      	bx	lr
   86196:	bf00      	nop
   86198:	2a08      	cmp	r2, #8
   8619a:	d313      	bcc.n	861c4 <memcpy+0xcc>
   8619c:	078b      	lsls	r3, r1, #30
   8619e:	d0b1      	beq.n	86104 <memcpy+0xc>
   861a0:	f010 0303 	ands.w	r3, r0, #3
   861a4:	d0ae      	beq.n	86104 <memcpy+0xc>
   861a6:	f1c3 0304 	rsb	r3, r3, #4
   861aa:	1ad2      	subs	r2, r2, r3
   861ac:	07db      	lsls	r3, r3, #31
   861ae:	bf1c      	itt	ne
   861b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   861b4:	f800 3b01 	strbne.w	r3, [r0], #1
   861b8:	d3a4      	bcc.n	86104 <memcpy+0xc>
   861ba:	f831 3b02 	ldrh.w	r3, [r1], #2
   861be:	f820 3b02 	strh.w	r3, [r0], #2
   861c2:	e79f      	b.n	86104 <memcpy+0xc>
   861c4:	3a04      	subs	r2, #4
   861c6:	d3d9      	bcc.n	8617c <memcpy+0x84>
   861c8:	3a01      	subs	r2, #1
   861ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   861ce:	f800 3b01 	strb.w	r3, [r0], #1
   861d2:	d2f9      	bcs.n	861c8 <memcpy+0xd0>
   861d4:	780b      	ldrb	r3, [r1, #0]
   861d6:	7003      	strb	r3, [r0, #0]
   861d8:	784b      	ldrb	r3, [r1, #1]
   861da:	7043      	strb	r3, [r0, #1]
   861dc:	788b      	ldrb	r3, [r1, #2]
   861de:	7083      	strb	r3, [r0, #2]
   861e0:	4660      	mov	r0, ip
   861e2:	4770      	bx	lr

000861e4 <memset>:
   861e4:	b4f0      	push	{r4, r5, r6, r7}
   861e6:	0786      	lsls	r6, r0, #30
   861e8:	d046      	beq.n	86278 <memset+0x94>
   861ea:	1e54      	subs	r4, r2, #1
   861ec:	2a00      	cmp	r2, #0
   861ee:	d03c      	beq.n	8626a <memset+0x86>
   861f0:	4603      	mov	r3, r0
   861f2:	b2ca      	uxtb	r2, r1
   861f4:	e001      	b.n	861fa <memset+0x16>
   861f6:	3c01      	subs	r4, #1
   861f8:	d337      	bcc.n	8626a <memset+0x86>
   861fa:	f803 2b01 	strb.w	r2, [r3], #1
   861fe:	079d      	lsls	r5, r3, #30
   86200:	d1f9      	bne.n	861f6 <memset+0x12>
   86202:	2c03      	cmp	r4, #3
   86204:	d92a      	bls.n	8625c <memset+0x78>
   86206:	b2cd      	uxtb	r5, r1
   86208:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8620c:	2c0f      	cmp	r4, #15
   8620e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86212:	d934      	bls.n	8627e <memset+0x9a>
   86214:	f1a4 0210 	sub.w	r2, r4, #16
   86218:	f022 0c0f 	bic.w	ip, r2, #15
   8621c:	f103 0720 	add.w	r7, r3, #32
   86220:	0916      	lsrs	r6, r2, #4
   86222:	4467      	add	r7, ip
   86224:	f103 0210 	add.w	r2, r3, #16
   86228:	e942 5504 	strd	r5, r5, [r2, #-16]
   8622c:	e942 5502 	strd	r5, r5, [r2, #-8]
   86230:	3210      	adds	r2, #16
   86232:	42ba      	cmp	r2, r7
   86234:	d1f8      	bne.n	86228 <memset+0x44>
   86236:	1c72      	adds	r2, r6, #1
   86238:	f014 0f0c 	tst.w	r4, #12
   8623c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86240:	f004 060f 	and.w	r6, r4, #15
   86244:	d013      	beq.n	8626e <memset+0x8a>
   86246:	1f33      	subs	r3, r6, #4
   86248:	f023 0303 	bic.w	r3, r3, #3
   8624c:	3304      	adds	r3, #4
   8624e:	4413      	add	r3, r2
   86250:	f842 5b04 	str.w	r5, [r2], #4
   86254:	4293      	cmp	r3, r2
   86256:	d1fb      	bne.n	86250 <memset+0x6c>
   86258:	f006 0403 	and.w	r4, r6, #3
   8625c:	b12c      	cbz	r4, 8626a <memset+0x86>
   8625e:	b2ca      	uxtb	r2, r1
   86260:	441c      	add	r4, r3
   86262:	f803 2b01 	strb.w	r2, [r3], #1
   86266:	429c      	cmp	r4, r3
   86268:	d1fb      	bne.n	86262 <memset+0x7e>
   8626a:	bcf0      	pop	{r4, r5, r6, r7}
   8626c:	4770      	bx	lr
   8626e:	4634      	mov	r4, r6
   86270:	4613      	mov	r3, r2
   86272:	2c00      	cmp	r4, #0
   86274:	d1f3      	bne.n	8625e <memset+0x7a>
   86276:	e7f8      	b.n	8626a <memset+0x86>
   86278:	4614      	mov	r4, r2
   8627a:	4603      	mov	r3, r0
   8627c:	e7c1      	b.n	86202 <memset+0x1e>
   8627e:	461a      	mov	r2, r3
   86280:	4626      	mov	r6, r4
   86282:	e7e0      	b.n	86246 <memset+0x62>

00086284 <setbuf>:
   86284:	2900      	cmp	r1, #0
   86286:	bf0c      	ite	eq
   86288:	2202      	moveq	r2, #2
   8628a:	2200      	movne	r2, #0
   8628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86290:	f000 b800 	b.w	86294 <setvbuf>

00086294 <setvbuf>:
   86294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86298:	4d65      	ldr	r5, [pc, #404]	; (86430 <setvbuf+0x19c>)
   8629a:	4604      	mov	r4, r0
   8629c:	f8d5 9000 	ldr.w	r9, [r5]
   862a0:	460f      	mov	r7, r1
   862a2:	4690      	mov	r8, r2
   862a4:	461e      	mov	r6, r3
   862a6:	b083      	sub	sp, #12
   862a8:	f1b9 0f00 	cmp.w	r9, #0
   862ac:	d003      	beq.n	862b6 <setvbuf+0x22>
   862ae:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   862b2:	2b00      	cmp	r3, #0
   862b4:	d079      	beq.n	863aa <setvbuf+0x116>
   862b6:	f1b8 0f02 	cmp.w	r8, #2
   862ba:	d006      	beq.n	862ca <setvbuf+0x36>
   862bc:	f1b8 0f01 	cmp.w	r8, #1
   862c0:	f200 80a3 	bhi.w	8640a <setvbuf+0x176>
   862c4:	2e00      	cmp	r6, #0
   862c6:	f2c0 80a0 	blt.w	8640a <setvbuf+0x176>
   862ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   862cc:	07d9      	lsls	r1, r3, #31
   862ce:	d552      	bpl.n	86376 <setvbuf+0xe2>
   862d0:	4621      	mov	r1, r4
   862d2:	4648      	mov	r0, r9
   862d4:	f003 fef4 	bl	8a0c0 <_fflush_r>
   862d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   862da:	b141      	cbz	r1, 862ee <setvbuf+0x5a>
   862dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   862e0:	4299      	cmp	r1, r3
   862e2:	d002      	beq.n	862ea <setvbuf+0x56>
   862e4:	4648      	mov	r0, r9
   862e6:	f004 f86b 	bl	8a3c0 <_free_r>
   862ea:	2300      	movs	r3, #0
   862ec:	6323      	str	r3, [r4, #48]	; 0x30
   862ee:	2300      	movs	r3, #0
   862f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   862f4:	61a3      	str	r3, [r4, #24]
   862f6:	6063      	str	r3, [r4, #4]
   862f8:	062b      	lsls	r3, r5, #24
   862fa:	d465      	bmi.n	863c8 <setvbuf+0x134>
   862fc:	f425 654a 	bic.w	r5, r5, #3232	; 0xca0
   86300:	f025 0503 	bic.w	r5, r5, #3
   86304:	f1b8 0f02 	cmp.w	r8, #2
   86308:	81a5      	strh	r5, [r4, #12]
   8630a:	d064      	beq.n	863d6 <setvbuf+0x142>
   8630c:	ab01      	add	r3, sp, #4
   8630e:	466a      	mov	r2, sp
   86310:	4621      	mov	r1, r4
   86312:	4648      	mov	r0, r9
   86314:	f004 fb06 	bl	8a924 <__swhatbuf_r>
   86318:	89a3      	ldrh	r3, [r4, #12]
   8631a:	4318      	orrs	r0, r3
   8631c:	81a0      	strh	r0, [r4, #12]
   8631e:	2e00      	cmp	r6, #0
   86320:	d030      	beq.n	86384 <setvbuf+0xf0>
   86322:	2f00      	cmp	r7, #0
   86324:	d02f      	beq.n	86386 <setvbuf+0xf2>
   86326:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   8632a:	2b00      	cmp	r3, #0
   8632c:	d039      	beq.n	863a2 <setvbuf+0x10e>
   8632e:	9b00      	ldr	r3, [sp, #0]
   86330:	e9c4 7604 	strd	r7, r6, [r4, #16]
   86334:	42b3      	cmp	r3, r6
   86336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8633a:	6027      	str	r7, [r4, #0]
   8633c:	bf1c      	itt	ne
   8633e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   86342:	81a3      	strhne	r3, [r4, #12]
   86344:	f1b8 0f01 	cmp.w	r8, #1
   86348:	bf04      	itt	eq
   8634a:	f043 0301 	orreq.w	r3, r3, #1
   8634e:	81a3      	strheq	r3, [r4, #12]
   86350:	b29a      	uxth	r2, r3
   86352:	f013 0308 	ands.w	r3, r3, #8
   86356:	d02c      	beq.n	863b2 <setvbuf+0x11e>
   86358:	07d1      	lsls	r1, r2, #31
   8635a:	d554      	bpl.n	86406 <setvbuf+0x172>
   8635c:	2100      	movs	r1, #0
   8635e:	4276      	negs	r6, r6
   86360:	61a6      	str	r6, [r4, #24]
   86362:	6e66      	ldr	r6, [r4, #100]	; 0x64
   86364:	60a1      	str	r1, [r4, #8]
   86366:	f016 0601 	ands.w	r6, r6, #1
   8636a:	d027      	beq.n	863bc <setvbuf+0x128>
   8636c:	2600      	movs	r6, #0
   8636e:	4630      	mov	r0, r6
   86370:	b003      	add	sp, #12
   86372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86376:	89a3      	ldrh	r3, [r4, #12]
   86378:	059a      	lsls	r2, r3, #22
   8637a:	d4a9      	bmi.n	862d0 <setvbuf+0x3c>
   8637c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8637e:	f004 facd 	bl	8a91c <__retarget_lock_acquire_recursive>
   86382:	e7a5      	b.n	862d0 <setvbuf+0x3c>
   86384:	9e00      	ldr	r6, [sp, #0]
   86386:	4630      	mov	r0, r6
   86388:	f004 fb44 	bl	8aa14 <malloc>
   8638c:	4607      	mov	r7, r0
   8638e:	2800      	cmp	r0, #0
   86390:	d03e      	beq.n	86410 <setvbuf+0x17c>
   86392:	89a3      	ldrh	r3, [r4, #12]
   86394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86398:	81a3      	strh	r3, [r4, #12]
   8639a:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   8639e:	2b00      	cmp	r3, #0
   863a0:	d1c5      	bne.n	8632e <setvbuf+0x9a>
   863a2:	4648      	mov	r0, r9
   863a4:	f003 fee8 	bl	8a178 <__sinit>
   863a8:	e7c1      	b.n	8632e <setvbuf+0x9a>
   863aa:	4648      	mov	r0, r9
   863ac:	f003 fee4 	bl	8a178 <__sinit>
   863b0:	e781      	b.n	862b6 <setvbuf+0x22>
   863b2:	60a3      	str	r3, [r4, #8]
   863b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   863b6:	f016 0601 	ands.w	r6, r6, #1
   863ba:	d1d7      	bne.n	8636c <setvbuf+0xd8>
   863bc:	0593      	lsls	r3, r2, #22
   863be:	d51b      	bpl.n	863f8 <setvbuf+0x164>
   863c0:	4630      	mov	r0, r6
   863c2:	b003      	add	sp, #12
   863c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   863c8:	4648      	mov	r0, r9
   863ca:	6921      	ldr	r1, [r4, #16]
   863cc:	f003 fff8 	bl	8a3c0 <_free_r>
   863d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   863d4:	e792      	b.n	862fc <setvbuf+0x68>
   863d6:	2600      	movs	r6, #0
   863d8:	2300      	movs	r3, #0
   863da:	2101      	movs	r1, #1
   863dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   863de:	f045 0502 	orr.w	r5, r5, #2
   863e2:	60a3      	str	r3, [r4, #8]
   863e4:	07d7      	lsls	r7, r2, #31
   863e6:	f104 0343 	add.w	r3, r4, #67	; 0x43
   863ea:	81a5      	strh	r5, [r4, #12]
   863ec:	6161      	str	r1, [r4, #20]
   863ee:	6023      	str	r3, [r4, #0]
   863f0:	6123      	str	r3, [r4, #16]
   863f2:	d4e5      	bmi.n	863c0 <setvbuf+0x12c>
   863f4:	05a8      	lsls	r0, r5, #22
   863f6:	d4e3      	bmi.n	863c0 <setvbuf+0x12c>
   863f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   863fa:	f004 fa91 	bl	8a920 <__retarget_lock_release_recursive>
   863fe:	4630      	mov	r0, r6
   86400:	b003      	add	sp, #12
   86402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86406:	60a6      	str	r6, [r4, #8]
   86408:	e7d4      	b.n	863b4 <setvbuf+0x120>
   8640a:	f04f 36ff 	mov.w	r6, #4294967295
   8640e:	e7d7      	b.n	863c0 <setvbuf+0x12c>
   86410:	9d00      	ldr	r5, [sp, #0]
   86412:	42b5      	cmp	r5, r6
   86414:	d004      	beq.n	86420 <setvbuf+0x18c>
   86416:	4628      	mov	r0, r5
   86418:	f004 fafc 	bl	8aa14 <malloc>
   8641c:	4607      	mov	r7, r0
   8641e:	b920      	cbnz	r0, 8642a <setvbuf+0x196>
   86420:	f04f 36ff 	mov.w	r6, #4294967295
   86424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   86428:	e7d6      	b.n	863d8 <setvbuf+0x144>
   8642a:	462e      	mov	r6, r5
   8642c:	e7b1      	b.n	86392 <setvbuf+0xfe>
   8642e:	bf00      	nop
   86430:	20000710 	.word	0x20000710

00086434 <sprintf>:
   86434:	b40e      	push	{r1, r2, r3}
   86436:	4601      	mov	r1, r0
   86438:	b530      	push	{r4, r5, lr}
   8643a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8643e:	b09c      	sub	sp, #112	; 0x70
   86440:	ab1f      	add	r3, sp, #124	; 0x7c
   86442:	480b      	ldr	r0, [pc, #44]	; (86470 <sprintf+0x3c>)
   86444:	f853 2b04 	ldr.w	r2, [r3], #4
   86448:	4d0a      	ldr	r5, [pc, #40]	; (86474 <sprintf+0x40>)
   8644a:	9102      	str	r1, [sp, #8]
   8644c:	9106      	str	r1, [sp, #24]
   8644e:	6800      	ldr	r0, [r0, #0]
   86450:	a902      	add	r1, sp, #8
   86452:	9301      	str	r3, [sp, #4]
   86454:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86458:	9407      	str	r4, [sp, #28]
   8645a:	f000 f86f 	bl	8653c <_svfprintf_r>
   8645e:	2200      	movs	r2, #0
   86460:	9b02      	ldr	r3, [sp, #8]
   86462:	701a      	strb	r2, [r3, #0]
   86464:	b01c      	add	sp, #112	; 0x70
   86466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   8646a:	b003      	add	sp, #12
   8646c:	4770      	bx	lr
   8646e:	bf00      	nop
   86470:	20000710 	.word	0x20000710
   86474:	ffff0208 	.word	0xffff0208

00086478 <strlen>:
   86478:	f020 0103 	bic.w	r1, r0, #3
   8647c:	f010 0003 	ands.w	r0, r0, #3
   86480:	f1c0 0000 	rsb	r0, r0, #0
   86484:	f851 3b04 	ldr.w	r3, [r1], #4
   86488:	f100 0c04 	add.w	ip, r0, #4
   8648c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86490:	f06f 0200 	mvn.w	r2, #0
   86494:	bf1c      	itt	ne
   86496:	fa22 f20c 	lsrne.w	r2, r2, ip
   8649a:	4313      	orrne	r3, r2
   8649c:	f04f 0c01 	mov.w	ip, #1
   864a0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   864a4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   864a8:	eba3 020c 	sub.w	r2, r3, ip
   864ac:	ea22 0203 	bic.w	r2, r2, r3
   864b0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   864b4:	bf04      	itt	eq
   864b6:	f851 3b04 	ldreq.w	r3, [r1], #4
   864ba:	3004      	addeq	r0, #4
   864bc:	d0f4      	beq.n	864a8 <strlen+0x30>
   864be:	f1c2 0100 	rsb	r1, r2, #0
   864c2:	ea02 0201 	and.w	r2, r2, r1
   864c6:	fab2 f282 	clz	r2, r2
   864ca:	f1c2 021f 	rsb	r2, r2, #31
   864ce:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   864d2:	4770      	bx	lr

000864d4 <strncpy>:
   864d4:	b470      	push	{r4, r5, r6}
   864d6:	ea40 0401 	orr.w	r4, r0, r1
   864da:	07a3      	lsls	r3, r4, #30
   864dc:	d122      	bne.n	86524 <strncpy+0x50>
   864de:	2a03      	cmp	r2, #3
   864e0:	d920      	bls.n	86524 <strncpy+0x50>
   864e2:	460b      	mov	r3, r1
   864e4:	4604      	mov	r4, r0
   864e6:	4619      	mov	r1, r3
   864e8:	f853 6b04 	ldr.w	r6, [r3], #4
   864ec:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   864f0:	ea25 0506 	bic.w	r5, r5, r6
   864f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   864f8:	d115      	bne.n	86526 <strncpy+0x52>
   864fa:	3a04      	subs	r2, #4
   864fc:	2a03      	cmp	r2, #3
   864fe:	4619      	mov	r1, r3
   86500:	f844 6b04 	str.w	r6, [r4], #4
   86504:	d8ef      	bhi.n	864e6 <strncpy+0x12>
   86506:	1e4d      	subs	r5, r1, #1
   86508:	b152      	cbz	r2, 86520 <strncpy+0x4c>
   8650a:	4623      	mov	r3, r4
   8650c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   86510:	1e56      	subs	r6, r2, #1
   86512:	f803 1b01 	strb.w	r1, [r3], #1
   86516:	b141      	cbz	r1, 8652a <strncpy+0x56>
   86518:	4632      	mov	r2, r6
   8651a:	461c      	mov	r4, r3
   8651c:	2a00      	cmp	r2, #0
   8651e:	d1f4      	bne.n	8650a <strncpy+0x36>
   86520:	bc70      	pop	{r4, r5, r6}
   86522:	4770      	bx	lr
   86524:	4604      	mov	r4, r0
   86526:	1e4d      	subs	r5, r1, #1
   86528:	e7ee      	b.n	86508 <strncpy+0x34>
   8652a:	4422      	add	r2, r4
   8652c:	2e00      	cmp	r6, #0
   8652e:	d0f7      	beq.n	86520 <strncpy+0x4c>
   86530:	f803 1b01 	strb.w	r1, [r3], #1
   86534:	4293      	cmp	r3, r2
   86536:	d1fb      	bne.n	86530 <strncpy+0x5c>
   86538:	bc70      	pop	{r4, r5, r6}
   8653a:	4770      	bx	lr

0008653c <_svfprintf_r>:
   8653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86540:	b0d7      	sub	sp, #348	; 0x15c
   86542:	468b      	mov	fp, r1
   86544:	4617      	mov	r7, r2
   86546:	930e      	str	r3, [sp, #56]	; 0x38
   86548:	4681      	mov	r9, r0
   8654a:	f004 f9df 	bl	8a90c <_localeconv_r>
   8654e:	6803      	ldr	r3, [r0, #0]
   86550:	4618      	mov	r0, r3
   86552:	9318      	str	r3, [sp, #96]	; 0x60
   86554:	f7ff ff90 	bl	86478 <strlen>
   86558:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8655c:	9017      	str	r0, [sp, #92]	; 0x5c
   8655e:	061d      	lsls	r5, r3, #24
   86560:	d504      	bpl.n	8656c <_svfprintf_r+0x30>
   86562:	f8db 3010 	ldr.w	r3, [fp, #16]
   86566:	2b00      	cmp	r3, #0
   86568:	f000 87df 	beq.w	8752a <_svfprintf_r+0xfee>
   8656c:	2300      	movs	r3, #0
   8656e:	2100      	movs	r1, #0
   86570:	2200      	movs	r2, #0
   86572:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   86576:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   8657a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   8657e:	9313      	str	r3, [sp, #76]	; 0x4c
   86580:	9319      	str	r3, [sp, #100]	; 0x64
   86582:	930a      	str	r3, [sp, #40]	; 0x28
   86584:	ab2d      	add	r3, sp, #180	; 0xb4
   86586:	4698      	mov	r8, r3
   86588:	932a      	str	r3, [sp, #168]	; 0xa8
   8658a:	783b      	ldrb	r3, [r7, #0]
   8658c:	46da      	mov	sl, fp
   8658e:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   86592:	2b00      	cmp	r3, #0
   86594:	f000 81a4 	beq.w	868e0 <_svfprintf_r+0x3a4>
   86598:	463c      	mov	r4, r7
   8659a:	e004      	b.n	865a6 <_svfprintf_r+0x6a>
   8659c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   865a0:	2b00      	cmp	r3, #0
   865a2:	f000 80fd 	beq.w	867a0 <_svfprintf_r+0x264>
   865a6:	2b25      	cmp	r3, #37	; 0x25
   865a8:	d1f8      	bne.n	8659c <_svfprintf_r+0x60>
   865aa:	1be5      	subs	r5, r4, r7
   865ac:	f040 80fb 	bne.w	867a6 <_svfprintf_r+0x26a>
   865b0:	7823      	ldrb	r3, [r4, #0]
   865b2:	2b00      	cmp	r3, #0
   865b4:	f000 8194 	beq.w	868e0 <_svfprintf_r+0x3a4>
   865b8:	2300      	movs	r3, #0
   865ba:	930b      	str	r3, [sp, #44]	; 0x2c
   865bc:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   865c0:	9307      	str	r3, [sp, #28]
   865c2:	f04f 33ff 	mov.w	r3, #4294967295
   865c6:	7866      	ldrb	r6, [r4, #1]
   865c8:	f104 0b01 	add.w	fp, r4, #1
   865cc:	2120      	movs	r1, #32
   865ce:	242b      	movs	r4, #43	; 0x2b
   865d0:	9309      	str	r3, [sp, #36]	; 0x24
   865d2:	f10b 0b01 	add.w	fp, fp, #1
   865d6:	f1a6 0320 	sub.w	r3, r6, #32
   865da:	2b5a      	cmp	r3, #90	; 0x5a
   865dc:	f200 80ff 	bhi.w	867de <_svfprintf_r+0x2a2>
   865e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   865e4:	00fd02bc 	.word	0x00fd02bc
   865e8:	02b500fd 	.word	0x02b500fd
   865ec:	00fd00fd 	.word	0x00fd00fd
   865f0:	029100fd 	.word	0x029100fd
   865f4:	00fd00fd 	.word	0x00fd00fd
   865f8:	02e7006a 	.word	0x02e7006a
   865fc:	023400fd 	.word	0x023400fd
   86600:	00fd02cd 	.word	0x00fd02cd
   86604:	005b02c6 	.word	0x005b02c6
   86608:	005b005b 	.word	0x005b005b
   8660c:	005b005b 	.word	0x005b005b
   86610:	005b005b 	.word	0x005b005b
   86614:	005b005b 	.word	0x005b005b
   86618:	00fd00fd 	.word	0x00fd00fd
   8661c:	00fd00fd 	.word	0x00fd00fd
   86620:	00fd00fd 	.word	0x00fd00fd
   86624:	019000fd 	.word	0x019000fd
   86628:	01f700fd 	.word	0x01f700fd
   8662c:	0190007c 	.word	0x0190007c
   86630:	01900190 	.word	0x01900190
   86634:	00fd00fd 	.word	0x00fd00fd
   86638:	00fd00fd 	.word	0x00fd00fd
   8663c:	00fd028a 	.word	0x00fd028a
   86640:	00a900fd 	.word	0x00a900fd
   86644:	00fd00fd 	.word	0x00fd00fd
   86648:	020b00fd 	.word	0x020b00fd
   8664c:	023b00fd 	.word	0x023b00fd
   86650:	00fd00fd 	.word	0x00fd00fd
   86654:	00fd0781 	.word	0x00fd0781
   86658:	00fd00fd 	.word	0x00fd00fd
   8665c:	00fd00fd 	.word	0x00fd00fd
   86660:	00fd00fd 	.word	0x00fd00fd
   86664:	019000fd 	.word	0x019000fd
   86668:	01f700fd 	.word	0x01f700fd
   8666c:	01900080 	.word	0x01900080
   86670:	01900190 	.word	0x01900190
   86674:	00800280 	.word	0x00800280
   86678:	00fd0075 	.word	0x00fd0075
   8667c:	00fd0276 	.word	0x00fd0276
   86680:	00ad025e 	.word	0x00ad025e
   86684:	0075024c 	.word	0x0075024c
   86688:	020b00fd 	.word	0x020b00fd
   8668c:	075b0072 	.word	0x075b0072
   86690:	00fd00fd 	.word	0x00fd00fd
   86694:	00fd075f 	.word	0x00fd075f
   86698:	0072      	.short	0x0072
   8669a:	2200      	movs	r2, #0
   8669c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   866a0:	f81b 6b01 	ldrb.w	r6, [fp], #1
   866a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   866a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   866ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   866b0:	2b09      	cmp	r3, #9
   866b2:	d9f5      	bls.n	866a0 <_svfprintf_r+0x164>
   866b4:	920b      	str	r2, [sp, #44]	; 0x2c
   866b6:	e78e      	b.n	865d6 <_svfprintf_r+0x9a>
   866b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   866ba:	f853 2b04 	ldr.w	r2, [r3], #4
   866be:	2a00      	cmp	r2, #0
   866c0:	920b      	str	r2, [sp, #44]	; 0x2c
   866c2:	930e      	str	r3, [sp, #56]	; 0x38
   866c4:	f2c0 81bf 	blt.w	86a46 <_svfprintf_r+0x50a>
   866c8:	f89b 6000 	ldrb.w	r6, [fp]
   866cc:	e781      	b.n	865d2 <_svfprintf_r+0x96>
   866ce:	9b07      	ldr	r3, [sp, #28]
   866d0:	f89b 6000 	ldrb.w	r6, [fp]
   866d4:	f043 0320 	orr.w	r3, r3, #32
   866d8:	9307      	str	r3, [sp, #28]
   866da:	e77a      	b.n	865d2 <_svfprintf_r+0x96>
   866dc:	9b07      	ldr	r3, [sp, #28]
   866de:	f043 0310 	orr.w	r3, r3, #16
   866e2:	9307      	str	r3, [sp, #28]
   866e4:	9b07      	ldr	r3, [sp, #28]
   866e6:	069c      	lsls	r4, r3, #26
   866e8:	f140 8162 	bpl.w	869b0 <_svfprintf_r+0x474>
   866ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   866ee:	3307      	adds	r3, #7
   866f0:	f023 0307 	bic.w	r3, r3, #7
   866f4:	4619      	mov	r1, r3
   866f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   866fa:	4614      	mov	r4, r2
   866fc:	461d      	mov	r5, r3
   866fe:	910e      	str	r1, [sp, #56]	; 0x38
   86700:	2a00      	cmp	r2, #0
   86702:	f173 0300 	sbcs.w	r3, r3, #0
   86706:	f2c0 85ab 	blt.w	87260 <_svfprintf_r+0xd24>
   8670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8670c:	3301      	adds	r3, #1
   8670e:	9b07      	ldr	r3, [sp, #28]
   86710:	f000 8414 	beq.w	86f3c <_svfprintf_r+0xa00>
   86714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86718:	ea54 0205 	orrs.w	r2, r4, r5
   8671c:	9308      	str	r3, [sp, #32]
   8671e:	f040 840e 	bne.w	86f3e <_svfprintf_r+0xa02>
   86722:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86724:	2a00      	cmp	r2, #0
   86726:	f040 840f 	bne.w	86f48 <_svfprintf_r+0xa0c>
   8672a:	9307      	str	r3, [sp, #28]
   8672c:	2300      	movs	r3, #0
   8672e:	af56      	add	r7, sp, #344	; 0x158
   86730:	9309      	str	r3, [sp, #36]	; 0x24
   86732:	930c      	str	r3, [sp, #48]	; 0x30
   86734:	e26b      	b.n	86c0e <_svfprintf_r+0x6d2>
   86736:	9b07      	ldr	r3, [sp, #28]
   86738:	f043 0310 	orr.w	r3, r3, #16
   8673c:	9307      	str	r3, [sp, #28]
   8673e:	9b07      	ldr	r3, [sp, #28]
   86740:	069a      	lsls	r2, r3, #26
   86742:	f140 8126 	bpl.w	86992 <_svfprintf_r+0x456>
   86746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86748:	3307      	adds	r3, #7
   8674a:	f023 0307 	bic.w	r3, r3, #7
   8674e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86752:	930e      	str	r3, [sp, #56]	; 0x38
   86754:	9b07      	ldr	r3, [sp, #28]
   86756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   8675a:	9308      	str	r3, [sp, #32]
   8675c:	2300      	movs	r3, #0
   8675e:	2200      	movs	r2, #0
   86760:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86764:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86766:	4611      	mov	r1, r2
   86768:	3101      	adds	r1, #1
   8676a:	f000 8231 	beq.w	86bd0 <_svfprintf_r+0x694>
   8676e:	9908      	ldr	r1, [sp, #32]
   86770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86774:	9107      	str	r1, [sp, #28]
   86776:	ea54 0105 	orrs.w	r1, r4, r5
   8677a:	f040 8227 	bne.w	86bcc <_svfprintf_r+0x690>
   8677e:	2a00      	cmp	r2, #0
   86780:	f040 837d 	bne.w	86e7e <_svfprintf_r+0x942>
   86784:	2b00      	cmp	r3, #0
   86786:	d1d1      	bne.n	8672c <_svfprintf_r+0x1f0>
   86788:	9b08      	ldr	r3, [sp, #32]
   8678a:	f013 0301 	ands.w	r3, r3, #1
   8678e:	930c      	str	r3, [sp, #48]	; 0x30
   86790:	f000 8590 	beq.w	872b4 <_svfprintf_r+0xd78>
   86794:	2330      	movs	r3, #48	; 0x30
   86796:	f20d 1757 	addw	r7, sp, #343	; 0x157
   8679a:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   8679e:	e236      	b.n	86c0e <_svfprintf_r+0x6d2>
   867a0:	1be5      	subs	r5, r4, r7
   867a2:	f000 809d 	beq.w	868e0 <_svfprintf_r+0x3a4>
   867a6:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   867aa:	3301      	adds	r3, #1
   867ac:	442a      	add	r2, r5
   867ae:	2b07      	cmp	r3, #7
   867b0:	e9c8 7500 	strd	r7, r5, [r8]
   867b4:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   867b8:	dc06      	bgt.n	867c8 <_svfprintf_r+0x28c>
   867ba:	f108 0808 	add.w	r8, r8, #8
   867be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   867c0:	7823      	ldrb	r3, [r4, #0]
   867c2:	442a      	add	r2, r5
   867c4:	920a      	str	r2, [sp, #40]	; 0x28
   867c6:	e6f4      	b.n	865b2 <_svfprintf_r+0x76>
   867c8:	4651      	mov	r1, sl
   867ca:	4648      	mov	r0, r9
   867cc:	aa2a      	add	r2, sp, #168	; 0xa8
   867ce:	f005 fa9f 	bl	8bd10 <__ssprint_r>
   867d2:	2800      	cmp	r0, #0
   867d4:	f041 83ce 	bne.w	87f74 <_svfprintf_r+0x1a38>
   867d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   867dc:	e7ef      	b.n	867be <_svfprintf_r+0x282>
   867de:	2e00      	cmp	r6, #0
   867e0:	d07e      	beq.n	868e0 <_svfprintf_r+0x3a4>
   867e2:	2300      	movs	r3, #0
   867e4:	2101      	movs	r1, #1
   867e6:	461a      	mov	r2, r3
   867e8:	9108      	str	r1, [sp, #32]
   867ea:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   867ee:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   867f2:	930d      	str	r3, [sp, #52]	; 0x34
   867f4:	9309      	str	r3, [sp, #36]	; 0x24
   867f6:	9312      	str	r3, [sp, #72]	; 0x48
   867f8:	9316      	str	r3, [sp, #88]	; 0x58
   867fa:	9310      	str	r3, [sp, #64]	; 0x40
   867fc:	910c      	str	r1, [sp, #48]	; 0x30
   867fe:	af3d      	add	r7, sp, #244	; 0xf4
   86800:	9b07      	ldr	r3, [sp, #28]
   86802:	f013 0302 	ands.w	r3, r3, #2
   86806:	d002      	beq.n	8680e <_svfprintf_r+0x2d2>
   86808:	9908      	ldr	r1, [sp, #32]
   8680a:	3102      	adds	r1, #2
   8680c:	9108      	str	r1, [sp, #32]
   8680e:	9907      	ldr	r1, [sp, #28]
   86810:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86814:	910f      	str	r1, [sp, #60]	; 0x3c
   86816:	d105      	bne.n	86824 <_svfprintf_r+0x2e8>
   86818:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8681a:	9808      	ldr	r0, [sp, #32]
   8681c:	1a0d      	subs	r5, r1, r0
   8681e:	2d00      	cmp	r5, #0
   86820:	f300 834b 	bgt.w	86eba <_svfprintf_r+0x97e>
   86824:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86826:	b172      	cbz	r2, 86846 <_svfprintf_r+0x30a>
   86828:	2001      	movs	r0, #1
   8682a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8682c:	4404      	add	r4, r0
   8682e:	4402      	add	r2, r0
   86830:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86834:	2a07      	cmp	r2, #7
   86836:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8683a:	e9c8 1000 	strd	r1, r0, [r8]
   8683e:	f300 83cd 	bgt.w	86fdc <_svfprintf_r+0xaa0>
   86842:	f108 0808 	add.w	r8, r8, #8
   86846:	b16b      	cbz	r3, 86864 <_svfprintf_r+0x328>
   86848:	2102      	movs	r1, #2
   8684a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8684c:	440c      	add	r4, r1
   8684e:	3301      	adds	r3, #1
   86850:	aa23      	add	r2, sp, #140	; 0x8c
   86852:	2b07      	cmp	r3, #7
   86854:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86858:	e9c8 2100 	strd	r2, r1, [r8]
   8685c:	f300 83cc 	bgt.w	86ff8 <_svfprintf_r+0xabc>
   86860:	f108 0808 	add.w	r8, r8, #8
   86864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86866:	2b80      	cmp	r3, #128	; 0x80
   86868:	f000 8234 	beq.w	86cd4 <_svfprintf_r+0x798>
   8686c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8686e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86870:	1a9d      	subs	r5, r3, r2
   86872:	2d00      	cmp	r5, #0
   86874:	f300 826e 	bgt.w	86d54 <_svfprintf_r+0x818>
   86878:	9b07      	ldr	r3, [sp, #28]
   8687a:	05d9      	lsls	r1, r3, #23
   8687c:	f100 81d5 	bmi.w	86c2a <_svfprintf_r+0x6ee>
   86880:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86882:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86884:	3301      	adds	r3, #1
   86886:	4414      	add	r4, r2
   86888:	2b07      	cmp	r3, #7
   8688a:	e9c8 7200 	strd	r7, r2, [r8]
   8688e:	942c      	str	r4, [sp, #176]	; 0xb0
   86890:	932b      	str	r3, [sp, #172]	; 0xac
   86892:	f300 8397 	bgt.w	86fc4 <_svfprintf_r+0xa88>
   86896:	f108 0808 	add.w	r8, r8, #8
   8689a:	9b07      	ldr	r3, [sp, #28]
   8689c:	0759      	lsls	r1, r3, #29
   8689e:	d505      	bpl.n	868ac <_svfprintf_r+0x370>
   868a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   868a2:	9a08      	ldr	r2, [sp, #32]
   868a4:	1a9d      	subs	r5, r3, r2
   868a6:	2d00      	cmp	r5, #0
   868a8:	f300 83b2 	bgt.w	87010 <_svfprintf_r+0xad4>
   868ac:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   868b0:	9908      	ldr	r1, [sp, #32]
   868b2:	428a      	cmp	r2, r1
   868b4:	bfac      	ite	ge
   868b6:	189b      	addge	r3, r3, r2
   868b8:	185b      	addlt	r3, r3, r1
   868ba:	930a      	str	r3, [sp, #40]	; 0x28
   868bc:	2c00      	cmp	r4, #0
   868be:	f040 827d 	bne.w	86dbc <_svfprintf_r+0x880>
   868c2:	2300      	movs	r3, #0
   868c4:	932b      	str	r3, [sp, #172]	; 0xac
   868c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   868c8:	b11b      	cbz	r3, 868d2 <_svfprintf_r+0x396>
   868ca:	4648      	mov	r0, r9
   868cc:	990d      	ldr	r1, [sp, #52]	; 0x34
   868ce:	f003 fd77 	bl	8a3c0 <_free_r>
   868d2:	465f      	mov	r7, fp
   868d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   868d8:	783b      	ldrb	r3, [r7, #0]
   868da:	2b00      	cmp	r3, #0
   868dc:	f47f ae5c 	bne.w	86598 <_svfprintf_r+0x5c>
   868e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   868e2:	46d3      	mov	fp, sl
   868e4:	2b00      	cmp	r3, #0
   868e6:	f041 824b 	bne.w	87d80 <_svfprintf_r+0x1844>
   868ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   868ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   868f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   868f4:	bf18      	it	ne
   868f6:	f04f 33ff 	movne.w	r3, #4294967295
   868fa:	930a      	str	r3, [sp, #40]	; 0x28
   868fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   868fe:	b057      	add	sp, #348	; 0x15c
   86900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86906:	3307      	adds	r3, #7
   86908:	f023 0307 	bic.w	r3, r3, #7
   8690c:	4619      	mov	r1, r3
   8690e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86912:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86916:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8691a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   8691e:	461d      	mov	r5, r3
   86920:	4618      	mov	r0, r3
   86922:	910e      	str	r1, [sp, #56]	; 0x38
   86924:	f04f 32ff 	mov.w	r2, #4294967295
   86928:	4621      	mov	r1, r4
   8692a:	4ba4      	ldr	r3, [pc, #656]	; (86bbc <_svfprintf_r+0x680>)
   8692c:	f006 f924 	bl	8cb78 <__aeabi_dcmpun>
   86930:	2800      	cmp	r0, #0
   86932:	f040 84d9 	bne.w	872e8 <_svfprintf_r+0xdac>
   86936:	4628      	mov	r0, r5
   86938:	4621      	mov	r1, r4
   8693a:	f04f 32ff 	mov.w	r2, #4294967295
   8693e:	4b9f      	ldr	r3, [pc, #636]	; (86bbc <_svfprintf_r+0x680>)
   86940:	f006 f8fc 	bl	8cb3c <__aeabi_dcmple>
   86944:	2800      	cmp	r0, #0
   86946:	f040 84cf 	bne.w	872e8 <_svfprintf_r+0xdac>
   8694a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8694e:	2200      	movs	r2, #0
   86950:	2300      	movs	r3, #0
   86952:	f006 f8e9 	bl	8cb28 <__aeabi_dcmplt>
   86956:	2800      	cmp	r0, #0
   86958:	f041 800e 	bne.w	87978 <_svfprintf_r+0x143c>
   8695c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86960:	2003      	movs	r0, #3
   86962:	2100      	movs	r1, #0
   86964:	4f96      	ldr	r7, [pc, #600]	; (86bc0 <_svfprintf_r+0x684>)
   86966:	4b97      	ldr	r3, [pc, #604]	; (86bc4 <_svfprintf_r+0x688>)
   86968:	9008      	str	r0, [sp, #32]
   8696a:	910d      	str	r1, [sp, #52]	; 0x34
   8696c:	2e47      	cmp	r6, #71	; 0x47
   8696e:	bfc8      	it	gt
   86970:	461f      	movgt	r7, r3
   86972:	9c07      	ldr	r4, [sp, #28]
   86974:	900c      	str	r0, [sp, #48]	; 0x30
   86976:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   8697a:	9407      	str	r4, [sp, #28]
   8697c:	9109      	str	r1, [sp, #36]	; 0x24
   8697e:	9112      	str	r1, [sp, #72]	; 0x48
   86980:	9116      	str	r1, [sp, #88]	; 0x58
   86982:	9110      	str	r1, [sp, #64]	; 0x40
   86984:	2a00      	cmp	r2, #0
   86986:	f43f af3b 	beq.w	86800 <_svfprintf_r+0x2c4>
   8698a:	9b08      	ldr	r3, [sp, #32]
   8698c:	3301      	adds	r3, #1
   8698e:	9308      	str	r3, [sp, #32]
   86990:	e736      	b.n	86800 <_svfprintf_r+0x2c4>
   86992:	9b07      	ldr	r3, [sp, #28]
   86994:	06db      	lsls	r3, r3, #27
   86996:	f100 849c 	bmi.w	872d2 <_svfprintf_r+0xd96>
   8699a:	9b07      	ldr	r3, [sp, #28]
   8699c:	065f      	lsls	r7, r3, #25
   8699e:	f140 87b2 	bpl.w	87906 <_svfprintf_r+0x13ca>
   869a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869a4:	2500      	movs	r5, #0
   869a6:	f853 4b04 	ldr.w	r4, [r3], #4
   869aa:	930e      	str	r3, [sp, #56]	; 0x38
   869ac:	b2a4      	uxth	r4, r4
   869ae:	e6d1      	b.n	86754 <_svfprintf_r+0x218>
   869b0:	9b07      	ldr	r3, [sp, #28]
   869b2:	06d8      	lsls	r0, r3, #27
   869b4:	f100 8568 	bmi.w	87488 <_svfprintf_r+0xf4c>
   869b8:	9b07      	ldr	r3, [sp, #28]
   869ba:	0659      	lsls	r1, r3, #25
   869bc:	f140 87be 	bpl.w	8793c <_svfprintf_r+0x1400>
   869c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869c2:	f853 4b04 	ldr.w	r4, [r3], #4
   869c6:	b224      	sxth	r4, r4
   869c8:	17e5      	asrs	r5, r4, #31
   869ca:	930e      	str	r3, [sp, #56]	; 0x38
   869cc:	4622      	mov	r2, r4
   869ce:	462b      	mov	r3, r5
   869d0:	e696      	b.n	86700 <_svfprintf_r+0x1c4>
   869d2:	2100      	movs	r1, #0
   869d4:	2401      	movs	r4, #1
   869d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   869d8:	460a      	mov	r2, r1
   869da:	f853 0b04 	ldr.w	r0, [r3], #4
   869de:	9408      	str	r4, [sp, #32]
   869e0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   869e4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   869e8:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   869ec:	9109      	str	r1, [sp, #36]	; 0x24
   869ee:	9112      	str	r1, [sp, #72]	; 0x48
   869f0:	9116      	str	r1, [sp, #88]	; 0x58
   869f2:	9110      	str	r1, [sp, #64]	; 0x40
   869f4:	940c      	str	r4, [sp, #48]	; 0x30
   869f6:	af3d      	add	r7, sp, #244	; 0xf4
   869f8:	e702      	b.n	86800 <_svfprintf_r+0x2c4>
   869fa:	2500      	movs	r5, #0
   869fc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   869fe:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   86a02:	f854 7b04 	ldr.w	r7, [r4], #4
   86a06:	2f00      	cmp	r7, #0
   86a08:	f000 859f 	beq.w	8754a <_svfprintf_r+0x100e>
   86a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86a0e:	4613      	mov	r3, r2
   86a10:	3301      	adds	r3, #1
   86a12:	f000 8770 	beq.w	878f6 <_svfprintf_r+0x13ba>
   86a16:	4629      	mov	r1, r5
   86a18:	4638      	mov	r0, r7
   86a1a:	f004 fac7 	bl	8afac <memchr>
   86a1e:	900d      	str	r0, [sp, #52]	; 0x34
   86a20:	2800      	cmp	r0, #0
   86a22:	f001 80b9 	beq.w	87b98 <_svfprintf_r+0x165c>
   86a26:	462b      	mov	r3, r5
   86a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86a2a:	9509      	str	r5, [sp, #36]	; 0x24
   86a2c:	1bd2      	subs	r2, r2, r7
   86a2e:	920c      	str	r2, [sp, #48]	; 0x30
   86a30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86a34:	9208      	str	r2, [sp, #32]
   86a36:	940e      	str	r4, [sp, #56]	; 0x38
   86a38:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86a3c:	930d      	str	r3, [sp, #52]	; 0x34
   86a3e:	9312      	str	r3, [sp, #72]	; 0x48
   86a40:	9316      	str	r3, [sp, #88]	; 0x58
   86a42:	9310      	str	r3, [sp, #64]	; 0x40
   86a44:	e79e      	b.n	86984 <_svfprintf_r+0x448>
   86a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86a48:	425b      	negs	r3, r3
   86a4a:	930b      	str	r3, [sp, #44]	; 0x2c
   86a4c:	9b07      	ldr	r3, [sp, #28]
   86a4e:	f89b 6000 	ldrb.w	r6, [fp]
   86a52:	f043 0304 	orr.w	r3, r3, #4
   86a56:	9307      	str	r3, [sp, #28]
   86a58:	e5bb      	b.n	865d2 <_svfprintf_r+0x96>
   86a5a:	9b07      	ldr	r3, [sp, #28]
   86a5c:	f043 0310 	orr.w	r3, r3, #16
   86a60:	9308      	str	r3, [sp, #32]
   86a62:	9b08      	ldr	r3, [sp, #32]
   86a64:	069d      	lsls	r5, r3, #26
   86a66:	f140 83ea 	bpl.w	8723e <_svfprintf_r+0xd02>
   86a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a6c:	3307      	adds	r3, #7
   86a6e:	f023 0307 	bic.w	r3, r3, #7
   86a72:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86a76:	930e      	str	r3, [sp, #56]	; 0x38
   86a78:	2301      	movs	r3, #1
   86a7a:	e670      	b.n	8675e <_svfprintf_r+0x222>
   86a7c:	f647 0230 	movw	r2, #30768	; 0x7830
   86a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a82:	9907      	ldr	r1, [sp, #28]
   86a84:	f853 4b04 	ldr.w	r4, [r3], #4
   86a88:	f041 0102 	orr.w	r1, r1, #2
   86a8c:	930e      	str	r3, [sp, #56]	; 0x38
   86a8e:	4b4e      	ldr	r3, [pc, #312]	; (86bc8 <_svfprintf_r+0x68c>)
   86a90:	2500      	movs	r5, #0
   86a92:	9319      	str	r3, [sp, #100]	; 0x64
   86a94:	2678      	movs	r6, #120	; 0x78
   86a96:	2302      	movs	r3, #2
   86a98:	9108      	str	r1, [sp, #32]
   86a9a:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   86a9e:	e65e      	b.n	8675e <_svfprintf_r+0x222>
   86aa0:	9b07      	ldr	r3, [sp, #28]
   86aa2:	069d      	lsls	r5, r3, #26
   86aa4:	f100 8408 	bmi.w	872b8 <_svfprintf_r+0xd7c>
   86aa8:	9b07      	ldr	r3, [sp, #28]
   86aaa:	06dc      	lsls	r4, r3, #27
   86aac:	f100 86e1 	bmi.w	87872 <_svfprintf_r+0x1336>
   86ab0:	9b07      	ldr	r3, [sp, #28]
   86ab2:	0658      	lsls	r0, r3, #25
   86ab4:	f100 8795 	bmi.w	879e2 <_svfprintf_r+0x14a6>
   86ab8:	9b07      	ldr	r3, [sp, #28]
   86aba:	0599      	lsls	r1, r3, #22
   86abc:	f140 86d9 	bpl.w	87872 <_svfprintf_r+0x1336>
   86ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
   86ac4:	f853 2b04 	ldr.w	r2, [r3], #4
   86ac8:	465f      	mov	r7, fp
   86aca:	7011      	strb	r1, [r2, #0]
   86acc:	930e      	str	r3, [sp, #56]	; 0x38
   86ace:	e703      	b.n	868d8 <_svfprintf_r+0x39c>
   86ad0:	f89b 6000 	ldrb.w	r6, [fp]
   86ad4:	9b07      	ldr	r3, [sp, #28]
   86ad6:	2e6c      	cmp	r6, #108	; 0x6c
   86ad8:	f000 8508 	beq.w	874ec <_svfprintf_r+0xfb0>
   86adc:	f043 0310 	orr.w	r3, r3, #16
   86ae0:	9307      	str	r3, [sp, #28]
   86ae2:	e576      	b.n	865d2 <_svfprintf_r+0x96>
   86ae4:	f89b 6000 	ldrb.w	r6, [fp]
   86ae8:	9b07      	ldr	r3, [sp, #28]
   86aea:	2e68      	cmp	r6, #104	; 0x68
   86aec:	f000 8507 	beq.w	874fe <_svfprintf_r+0xfc2>
   86af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86af4:	9307      	str	r3, [sp, #28]
   86af6:	e56c      	b.n	865d2 <_svfprintf_r+0x96>
   86af8:	9b07      	ldr	r3, [sp, #28]
   86afa:	f89b 6000 	ldrb.w	r6, [fp]
   86afe:	f043 0308 	orr.w	r3, r3, #8
   86b02:	9307      	str	r3, [sp, #28]
   86b04:	e565      	b.n	865d2 <_svfprintf_r+0x96>
   86b06:	4648      	mov	r0, r9
   86b08:	f003 ff00 	bl	8a90c <_localeconv_r>
   86b0c:	6843      	ldr	r3, [r0, #4]
   86b0e:	4618      	mov	r0, r3
   86b10:	931c      	str	r3, [sp, #112]	; 0x70
   86b12:	f7ff fcb1 	bl	86478 <strlen>
   86b16:	4603      	mov	r3, r0
   86b18:	4648      	mov	r0, r9
   86b1a:	461d      	mov	r5, r3
   86b1c:	931d      	str	r3, [sp, #116]	; 0x74
   86b1e:	f003 fef5 	bl	8a90c <_localeconv_r>
   86b22:	6882      	ldr	r2, [r0, #8]
   86b24:	2120      	movs	r1, #32
   86b26:	921a      	str	r2, [sp, #104]	; 0x68
   86b28:	2d00      	cmp	r5, #0
   86b2a:	f43f adcd 	beq.w	866c8 <_svfprintf_r+0x18c>
   86b2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86b30:	2b00      	cmp	r3, #0
   86b32:	f43f adc9 	beq.w	866c8 <_svfprintf_r+0x18c>
   86b36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86b38:	781b      	ldrb	r3, [r3, #0]
   86b3a:	2b00      	cmp	r3, #0
   86b3c:	f43f adc4 	beq.w	866c8 <_svfprintf_r+0x18c>
   86b40:	9b07      	ldr	r3, [sp, #28]
   86b42:	f89b 6000 	ldrb.w	r6, [fp]
   86b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86b4a:	9307      	str	r3, [sp, #28]
   86b4c:	e541      	b.n	865d2 <_svfprintf_r+0x96>
   86b4e:	9b07      	ldr	r3, [sp, #28]
   86b50:	f89b 6000 	ldrb.w	r6, [fp]
   86b54:	f043 0301 	orr.w	r3, r3, #1
   86b58:	9307      	str	r3, [sp, #28]
   86b5a:	e53a      	b.n	865d2 <_svfprintf_r+0x96>
   86b5c:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   86b60:	2b00      	cmp	r3, #0
   86b62:	f47f adb1 	bne.w	866c8 <_svfprintf_r+0x18c>
   86b66:	f89b 6000 	ldrb.w	r6, [fp]
   86b6a:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86b6e:	e530      	b.n	865d2 <_svfprintf_r+0x96>
   86b70:	9b07      	ldr	r3, [sp, #28]
   86b72:	f89b 6000 	ldrb.w	r6, [fp]
   86b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86b7a:	9307      	str	r3, [sp, #28]
   86b7c:	e529      	b.n	865d2 <_svfprintf_r+0x96>
   86b7e:	465a      	mov	r2, fp
   86b80:	f812 6b01 	ldrb.w	r6, [r2], #1
   86b84:	2e2a      	cmp	r6, #42	; 0x2a
   86b86:	f001 8251 	beq.w	8802c <_svfprintf_r+0x1af0>
   86b8a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86b8e:	2b09      	cmp	r3, #9
   86b90:	4693      	mov	fp, r2
   86b92:	bf98      	it	ls
   86b94:	2200      	movls	r2, #0
   86b96:	f201 80ef 	bhi.w	87d78 <_svfprintf_r+0x183c>
   86b9a:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86b9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86ba2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86ba6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86baa:	2b09      	cmp	r3, #9
   86bac:	d9f5      	bls.n	86b9a <_svfprintf_r+0x65e>
   86bae:	9209      	str	r2, [sp, #36]	; 0x24
   86bb0:	e511      	b.n	865d6 <_svfprintf_r+0x9a>
   86bb2:	f89b 6000 	ldrb.w	r6, [fp]
   86bb6:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   86bba:	e50a      	b.n	865d2 <_svfprintf_r+0x96>
   86bbc:	7fefffff 	.word	0x7fefffff
   86bc0:	0008cdd0 	.word	0x0008cdd0
   86bc4:	0008cdd4 	.word	0x0008cdd4
   86bc8:	0008cde0 	.word	0x0008cde0
   86bcc:	9a07      	ldr	r2, [sp, #28]
   86bce:	9208      	str	r2, [sp, #32]
   86bd0:	2b01      	cmp	r3, #1
   86bd2:	f000 81b4 	beq.w	86f3e <_svfprintf_r+0xa02>
   86bd6:	2b02      	cmp	r3, #2
   86bd8:	f000 8159 	beq.w	86e8e <_svfprintf_r+0x952>
   86bdc:	af56      	add	r7, sp, #344	; 0x158
   86bde:	08e2      	lsrs	r2, r4, #3
   86be0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86be4:	08e9      	lsrs	r1, r5, #3
   86be6:	f004 0307 	and.w	r3, r4, #7
   86bea:	460d      	mov	r5, r1
   86bec:	4614      	mov	r4, r2
   86bee:	3330      	adds	r3, #48	; 0x30
   86bf0:	ea54 0105 	orrs.w	r1, r4, r5
   86bf4:	463a      	mov	r2, r7
   86bf6:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86bfa:	d1f0      	bne.n	86bde <_svfprintf_r+0x6a2>
   86bfc:	9908      	ldr	r1, [sp, #32]
   86bfe:	4608      	mov	r0, r1
   86c00:	07c0      	lsls	r0, r0, #31
   86c02:	f100 82b8 	bmi.w	87176 <_svfprintf_r+0xc3a>
   86c06:	ab56      	add	r3, sp, #344	; 0x158
   86c08:	1bdb      	subs	r3, r3, r7
   86c0a:	9107      	str	r1, [sp, #28]
   86c0c:	930c      	str	r3, [sp, #48]	; 0x30
   86c0e:	2300      	movs	r3, #0
   86c10:	9909      	ldr	r1, [sp, #36]	; 0x24
   86c12:	930d      	str	r3, [sp, #52]	; 0x34
   86c14:	9312      	str	r3, [sp, #72]	; 0x48
   86c16:	9316      	str	r3, [sp, #88]	; 0x58
   86c18:	9310      	str	r3, [sp, #64]	; 0x40
   86c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86c1c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86c20:	428b      	cmp	r3, r1
   86c22:	bfb8      	it	lt
   86c24:	460b      	movlt	r3, r1
   86c26:	9308      	str	r3, [sp, #32]
   86c28:	e6ac      	b.n	86984 <_svfprintf_r+0x448>
   86c2a:	2e65      	cmp	r6, #101	; 0x65
   86c2c:	f340 80d8 	ble.w	86de0 <_svfprintf_r+0x8a4>
   86c30:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c34:	2200      	movs	r2, #0
   86c36:	2300      	movs	r3, #0
   86c38:	f005 ff6c 	bl	8cb14 <__aeabi_dcmpeq>
   86c3c:	2800      	cmp	r0, #0
   86c3e:	f000 821e 	beq.w	8707e <_svfprintf_r+0xb42>
   86c42:	2101      	movs	r1, #1
   86c44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86c46:	4ac5      	ldr	r2, [pc, #788]	; (86f5c <_svfprintf_r+0xa20>)
   86c48:	440b      	add	r3, r1
   86c4a:	440c      	add	r4, r1
   86c4c:	2b07      	cmp	r3, #7
   86c4e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86c52:	e9c8 2100 	strd	r2, r1, [r8]
   86c56:	f300 85bb 	bgt.w	877d0 <_svfprintf_r+0x1294>
   86c5a:	f108 0808 	add.w	r8, r8, #8
   86c5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86c60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86c62:	4293      	cmp	r3, r2
   86c64:	f280 8321 	bge.w	872aa <_svfprintf_r+0xd6e>
   86c68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86c6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86c6c:	3301      	adds	r3, #1
   86c6e:	9918      	ldr	r1, [sp, #96]	; 0x60
   86c70:	4414      	add	r4, r2
   86c72:	2b07      	cmp	r3, #7
   86c74:	e9c8 1200 	strd	r1, r2, [r8]
   86c78:	942c      	str	r4, [sp, #176]	; 0xb0
   86c7a:	932b      	str	r3, [sp, #172]	; 0xac
   86c7c:	f300 8448 	bgt.w	87510 <_svfprintf_r+0xfd4>
   86c80:	f108 0808 	add.w	r8, r8, #8
   86c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86c86:	1e5d      	subs	r5, r3, #1
   86c88:	2d00      	cmp	r5, #0
   86c8a:	f77f ae06 	ble.w	8689a <_svfprintf_r+0x35e>
   86c8e:	2d10      	cmp	r5, #16
   86c90:	f340 85c7 	ble.w	87822 <_svfprintf_r+0x12e6>
   86c94:	4fb2      	ldr	r7, [pc, #712]	; (86f60 <_svfprintf_r+0xa24>)
   86c96:	2610      	movs	r6, #16
   86c98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86c9a:	970f      	str	r7, [sp, #60]	; 0x3c
   86c9c:	e005      	b.n	86caa <_svfprintf_r+0x76e>
   86c9e:	f108 0808 	add.w	r8, r8, #8
   86ca2:	3d10      	subs	r5, #16
   86ca4:	2d10      	cmp	r5, #16
   86ca6:	f340 85bf 	ble.w	87828 <_svfprintf_r+0x12ec>
   86caa:	3301      	adds	r3, #1
   86cac:	3410      	adds	r4, #16
   86cae:	2b07      	cmp	r3, #7
   86cb0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86cb4:	e9c8 7600 	strd	r7, r6, [r8]
   86cb8:	ddf1      	ble.n	86c9e <_svfprintf_r+0x762>
   86cba:	4651      	mov	r1, sl
   86cbc:	4648      	mov	r0, r9
   86cbe:	aa2a      	add	r2, sp, #168	; 0xa8
   86cc0:	f005 f826 	bl	8bd10 <__ssprint_r>
   86cc4:	2800      	cmp	r0, #0
   86cc6:	f040 8081 	bne.w	86dcc <_svfprintf_r+0x890>
   86cca:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   86cce:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86cd2:	e7e6      	b.n	86ca2 <_svfprintf_r+0x766>
   86cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86cd6:	9a08      	ldr	r2, [sp, #32]
   86cd8:	1a9d      	subs	r5, r3, r2
   86cda:	2d00      	cmp	r5, #0
   86cdc:	f77f adc6 	ble.w	8686c <_svfprintf_r+0x330>
   86ce0:	2d10      	cmp	r5, #16
   86ce2:	f341 8069 	ble.w	87db8 <_svfprintf_r+0x187c>
   86ce6:	489e      	ldr	r0, [pc, #632]	; (86f60 <_svfprintf_r+0xa24>)
   86ce8:	4621      	mov	r1, r4
   86cea:	2310      	movs	r3, #16
   86cec:	4604      	mov	r4, r0
   86cee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86cf0:	900f      	str	r0, [sp, #60]	; 0x3c
   86cf2:	e004      	b.n	86cfe <_svfprintf_r+0x7c2>
   86cf4:	3d10      	subs	r5, #16
   86cf6:	2d10      	cmp	r5, #16
   86cf8:	f108 0808 	add.w	r8, r8, #8
   86cfc:	dd17      	ble.n	86d2e <_svfprintf_r+0x7f2>
   86cfe:	3201      	adds	r2, #1
   86d00:	3110      	adds	r1, #16
   86d02:	2a07      	cmp	r2, #7
   86d04:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86d08:	e9c8 4300 	strd	r4, r3, [r8]
   86d0c:	ddf2      	ble.n	86cf4 <_svfprintf_r+0x7b8>
   86d0e:	4651      	mov	r1, sl
   86d10:	4648      	mov	r0, r9
   86d12:	aa2a      	add	r2, sp, #168	; 0xa8
   86d14:	f004 fffc 	bl	8bd10 <__ssprint_r>
   86d18:	2800      	cmp	r0, #0
   86d1a:	d157      	bne.n	86dcc <_svfprintf_r+0x890>
   86d1c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86d20:	3d10      	subs	r5, #16
   86d22:	2d10      	cmp	r5, #16
   86d24:	f04f 0310 	mov.w	r3, #16
   86d28:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d2c:	dce7      	bgt.n	86cfe <_svfprintf_r+0x7c2>
   86d2e:	460c      	mov	r4, r1
   86d30:	3201      	adds	r2, #1
   86d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86d34:	442c      	add	r4, r5
   86d36:	2a07      	cmp	r2, #7
   86d38:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86d3c:	e9c8 3500 	strd	r3, r5, [r8]
   86d40:	f300 858a 	bgt.w	87858 <_svfprintf_r+0x131c>
   86d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86d48:	f108 0808 	add.w	r8, r8, #8
   86d4c:	1a9d      	subs	r5, r3, r2
   86d4e:	2d00      	cmp	r5, #0
   86d50:	f77f ad92 	ble.w	86878 <_svfprintf_r+0x33c>
   86d54:	2d10      	cmp	r5, #16
   86d56:	f340 860a 	ble.w	8796e <_svfprintf_r+0x1432>
   86d5a:	4881      	ldr	r0, [pc, #516]	; (86f60 <_svfprintf_r+0xa24>)
   86d5c:	4621      	mov	r1, r4
   86d5e:	2310      	movs	r3, #16
   86d60:	4604      	mov	r4, r0
   86d62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86d64:	900f      	str	r0, [sp, #60]	; 0x3c
   86d66:	e004      	b.n	86d72 <_svfprintf_r+0x836>
   86d68:	3d10      	subs	r5, #16
   86d6a:	2d10      	cmp	r5, #16
   86d6c:	f108 0808 	add.w	r8, r8, #8
   86d70:	dd16      	ble.n	86da0 <_svfprintf_r+0x864>
   86d72:	3201      	adds	r2, #1
   86d74:	3110      	adds	r1, #16
   86d76:	2a07      	cmp	r2, #7
   86d78:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   86d7c:	e9c8 4300 	strd	r4, r3, [r8]
   86d80:	ddf2      	ble.n	86d68 <_svfprintf_r+0x82c>
   86d82:	4651      	mov	r1, sl
   86d84:	4648      	mov	r0, r9
   86d86:	aa2a      	add	r2, sp, #168	; 0xa8
   86d88:	f004 ffc2 	bl	8bd10 <__ssprint_r>
   86d8c:	b9f0      	cbnz	r0, 86dcc <_svfprintf_r+0x890>
   86d8e:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86d92:	3d10      	subs	r5, #16
   86d94:	2d10      	cmp	r5, #16
   86d96:	f04f 0310 	mov.w	r3, #16
   86d9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d9e:	dce8      	bgt.n	86d72 <_svfprintf_r+0x836>
   86da0:	460c      	mov	r4, r1
   86da2:	3201      	adds	r2, #1
   86da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86da6:	442c      	add	r4, r5
   86da8:	2a07      	cmp	r2, #7
   86daa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86dae:	e9c8 3500 	strd	r3, r5, [r8]
   86db2:	f300 8237 	bgt.w	87224 <_svfprintf_r+0xce8>
   86db6:	f108 0808 	add.w	r8, r8, #8
   86dba:	e55d      	b.n	86878 <_svfprintf_r+0x33c>
   86dbc:	4651      	mov	r1, sl
   86dbe:	4648      	mov	r0, r9
   86dc0:	aa2a      	add	r2, sp, #168	; 0xa8
   86dc2:	f004 ffa5 	bl	8bd10 <__ssprint_r>
   86dc6:	2800      	cmp	r0, #0
   86dc8:	f43f ad7b 	beq.w	868c2 <_svfprintf_r+0x386>
   86dcc:	46d3      	mov	fp, sl
   86dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86dd0:	2b00      	cmp	r3, #0
   86dd2:	f43f ad8a 	beq.w	868ea <_svfprintf_r+0x3ae>
   86dd6:	4648      	mov	r0, r9
   86dd8:	990d      	ldr	r1, [sp, #52]	; 0x34
   86dda:	f003 faf1 	bl	8a3c0 <_free_r>
   86dde:	e584      	b.n	868ea <_svfprintf_r+0x3ae>
   86de0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86de2:	2b01      	cmp	r3, #1
   86de4:	f340 81d5 	ble.w	87192 <_svfprintf_r+0xc56>
   86de8:	2301      	movs	r3, #1
   86dea:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   86dec:	441c      	add	r4, r3
   86dee:	441d      	add	r5, r3
   86df0:	2d07      	cmp	r5, #7
   86df2:	942c      	str	r4, [sp, #176]	; 0xb0
   86df4:	f8c8 7000 	str.w	r7, [r8]
   86df8:	952b      	str	r5, [sp, #172]	; 0xac
   86dfa:	f8c8 3004 	str.w	r3, [r8, #4]
   86dfe:	f300 823a 	bgt.w	87276 <_svfprintf_r+0xd3a>
   86e02:	f108 0808 	add.w	r8, r8, #8
   86e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86e08:	3501      	adds	r5, #1
   86e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86e0c:	441c      	add	r4, r3
   86e0e:	2d07      	cmp	r5, #7
   86e10:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86e14:	e9c8 2300 	strd	r2, r3, [r8]
   86e18:	f300 823a 	bgt.w	87290 <_svfprintf_r+0xd54>
   86e1c:	f108 0808 	add.w	r8, r8, #8
   86e20:	2300      	movs	r3, #0
   86e22:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86e26:	2200      	movs	r2, #0
   86e28:	f005 fe74 	bl	8cb14 <__aeabi_dcmpeq>
   86e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86e2e:	2800      	cmp	r0, #0
   86e30:	f040 81cd 	bne.w	871ce <_svfprintf_r+0xc92>
   86e34:	3b01      	subs	r3, #1
   86e36:	3501      	adds	r5, #1
   86e38:	3701      	adds	r7, #1
   86e3a:	441c      	add	r4, r3
   86e3c:	2d07      	cmp	r5, #7
   86e3e:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86e42:	f8c8 7000 	str.w	r7, [r8]
   86e46:	f8c8 3004 	str.w	r3, [r8, #4]
   86e4a:	f300 84dc 	bgt.w	87806 <_svfprintf_r+0x12ca>
   86e4e:	f108 0808 	add.w	r8, r8, #8
   86e52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   86e54:	3501      	adds	r5, #1
   86e56:	4414      	add	r4, r2
   86e58:	ab26      	add	r3, sp, #152	; 0x98
   86e5a:	2d07      	cmp	r5, #7
   86e5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   86e60:	e9c8 3200 	strd	r3, r2, [r8]
   86e64:	f77f ad17 	ble.w	86896 <_svfprintf_r+0x35a>
   86e68:	4651      	mov	r1, sl
   86e6a:	4648      	mov	r0, r9
   86e6c:	aa2a      	add	r2, sp, #168	; 0xa8
   86e6e:	f004 ff4f 	bl	8bd10 <__ssprint_r>
   86e72:	2800      	cmp	r0, #0
   86e74:	d1aa      	bne.n	86dcc <_svfprintf_r+0x890>
   86e76:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86e78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e7c:	e50d      	b.n	8689a <_svfprintf_r+0x35e>
   86e7e:	2b01      	cmp	r3, #1
   86e80:	f000 87ca 	beq.w	87e18 <_svfprintf_r+0x18dc>
   86e84:	2b02      	cmp	r3, #2
   86e86:	9b07      	ldr	r3, [sp, #28]
   86e88:	9308      	str	r3, [sp, #32]
   86e8a:	f47f aea7 	bne.w	86bdc <_svfprintf_r+0x6a0>
   86e8e:	9819      	ldr	r0, [sp, #100]	; 0x64
   86e90:	af56      	add	r7, sp, #344	; 0x158
   86e92:	0923      	lsrs	r3, r4, #4
   86e94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   86e98:	0929      	lsrs	r1, r5, #4
   86e9a:	f004 020f 	and.w	r2, r4, #15
   86e9e:	460d      	mov	r5, r1
   86ea0:	461c      	mov	r4, r3
   86ea2:	5c83      	ldrb	r3, [r0, r2]
   86ea4:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86ea8:	ea54 0305 	orrs.w	r3, r4, r5
   86eac:	d1f1      	bne.n	86e92 <_svfprintf_r+0x956>
   86eae:	9b08      	ldr	r3, [sp, #32]
   86eb0:	9307      	str	r3, [sp, #28]
   86eb2:	ab56      	add	r3, sp, #344	; 0x158
   86eb4:	1bdb      	subs	r3, r3, r7
   86eb6:	930c      	str	r3, [sp, #48]	; 0x30
   86eb8:	e6a9      	b.n	86c0e <_svfprintf_r+0x6d2>
   86eba:	2d10      	cmp	r5, #16
   86ebc:	f340 8668 	ble.w	87b90 <_svfprintf_r+0x1654>
   86ec0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   86ec4:	931e      	str	r3, [sp, #120]	; 0x78
   86ec6:	460b      	mov	r3, r1
   86ec8:	4639      	mov	r1, r7
   86eca:	2410      	movs	r4, #16
   86ecc:	4637      	mov	r7, r6
   86ece:	4656      	mov	r6, sl
   86ed0:	46ca      	mov	sl, r9
   86ed2:	4689      	mov	r9, r1
   86ed4:	e004      	b.n	86ee0 <_svfprintf_r+0x9a4>
   86ed6:	3d10      	subs	r5, #16
   86ed8:	2d10      	cmp	r5, #16
   86eda:	f108 0808 	add.w	r8, r8, #8
   86ede:	dd17      	ble.n	86f10 <_svfprintf_r+0x9d4>
   86ee0:	3201      	adds	r2, #1
   86ee2:	4920      	ldr	r1, [pc, #128]	; (86f64 <_svfprintf_r+0xa28>)
   86ee4:	3310      	adds	r3, #16
   86ee6:	2a07      	cmp	r2, #7
   86ee8:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   86eec:	e9c8 1400 	strd	r1, r4, [r8]
   86ef0:	ddf1      	ble.n	86ed6 <_svfprintf_r+0x99a>
   86ef2:	4631      	mov	r1, r6
   86ef4:	4650      	mov	r0, sl
   86ef6:	aa2a      	add	r2, sp, #168	; 0xa8
   86ef8:	f004 ff0a 	bl	8bd10 <__ssprint_r>
   86efc:	2800      	cmp	r0, #0
   86efe:	f040 8458 	bne.w	877b2 <_svfprintf_r+0x1276>
   86f02:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   86f06:	3d10      	subs	r5, #16
   86f08:	2d10      	cmp	r5, #16
   86f0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f0e:	dce7      	bgt.n	86ee0 <_svfprintf_r+0x9a4>
   86f10:	4648      	mov	r0, r9
   86f12:	46d1      	mov	r9, sl
   86f14:	46b2      	mov	sl, r6
   86f16:	463e      	mov	r6, r7
   86f18:	4607      	mov	r7, r0
   86f1a:	4619      	mov	r1, r3
   86f1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86f1e:	194c      	adds	r4, r1, r5
   86f20:	3201      	adds	r2, #1
   86f22:	4910      	ldr	r1, [pc, #64]	; (86f64 <_svfprintf_r+0xa28>)
   86f24:	2a07      	cmp	r2, #7
   86f26:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86f2a:	e9c8 1500 	strd	r1, r5, [r8]
   86f2e:	f300 841f 	bgt.w	87770 <_svfprintf_r+0x1234>
   86f32:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86f36:	f108 0808 	add.w	r8, r8, #8
   86f3a:	e474      	b.n	86826 <_svfprintf_r+0x2ea>
   86f3c:	9308      	str	r3, [sp, #32]
   86f3e:	2d00      	cmp	r5, #0
   86f40:	bf08      	it	eq
   86f42:	2c0a      	cmpeq	r4, #10
   86f44:	f080 83d0 	bcs.w	876e8 <_svfprintf_r+0x11ac>
   86f48:	9b08      	ldr	r3, [sp, #32]
   86f4a:	3430      	adds	r4, #48	; 0x30
   86f4c:	9307      	str	r3, [sp, #28]
   86f4e:	2301      	movs	r3, #1
   86f50:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   86f54:	930c      	str	r3, [sp, #48]	; 0x30
   86f56:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86f5a:	e658      	b.n	86c0e <_svfprintf_r+0x6d2>
   86f5c:	0008ce10 	.word	0x0008ce10
   86f60:	0008ce24 	.word	0x0008ce24
   86f64:	0008ce14 	.word	0x0008ce14
   86f68:	4651      	mov	r1, sl
   86f6a:	4648      	mov	r0, r9
   86f6c:	aa2a      	add	r2, sp, #168	; 0xa8
   86f6e:	f004 fecf 	bl	8bd10 <__ssprint_r>
   86f72:	2800      	cmp	r0, #0
   86f74:	f47f af2a 	bne.w	86dcc <_svfprintf_r+0x890>
   86f78:	9a24      	ldr	r2, [sp, #144]	; 0x90
   86f7a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86f7c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f80:	2a00      	cmp	r2, #0
   86f82:	f040 847f 	bne.w	87884 <_svfprintf_r+0x1348>
   86f86:	9b07      	ldr	r3, [sp, #28]
   86f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86f8a:	f003 0301 	and.w	r3, r3, #1
   86f8e:	4313      	orrs	r3, r2
   86f90:	f43f ac83 	beq.w	8689a <_svfprintf_r+0x35e>
   86f94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86f98:	3301      	adds	r3, #1
   86f9a:	9918      	ldr	r1, [sp, #96]	; 0x60
   86f9c:	4414      	add	r4, r2
   86f9e:	2b07      	cmp	r3, #7
   86fa0:	e9c8 1200 	strd	r1, r2, [r8]
   86fa4:	942c      	str	r4, [sp, #176]	; 0xb0
   86fa6:	932b      	str	r3, [sp, #172]	; 0xac
   86fa8:	f300 8524 	bgt.w	879f4 <_svfprintf_r+0x14b8>
   86fac:	f108 0808 	add.w	r8, r8, #8
   86fb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86fb2:	3301      	adds	r3, #1
   86fb4:	4414      	add	r4, r2
   86fb6:	2b07      	cmp	r3, #7
   86fb8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86fbc:	e9c8 7200 	strd	r7, r2, [r8]
   86fc0:	f77f ac69 	ble.w	86896 <_svfprintf_r+0x35a>
   86fc4:	4651      	mov	r1, sl
   86fc6:	4648      	mov	r0, r9
   86fc8:	aa2a      	add	r2, sp, #168	; 0xa8
   86fca:	f004 fea1 	bl	8bd10 <__ssprint_r>
   86fce:	2800      	cmp	r0, #0
   86fd0:	f47f aefc 	bne.w	86dcc <_svfprintf_r+0x890>
   86fd4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86fd6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86fda:	e45e      	b.n	8689a <_svfprintf_r+0x35e>
   86fdc:	4651      	mov	r1, sl
   86fde:	4648      	mov	r0, r9
   86fe0:	aa2a      	add	r2, sp, #168	; 0xa8
   86fe2:	931e      	str	r3, [sp, #120]	; 0x78
   86fe4:	f004 fe94 	bl	8bd10 <__ssprint_r>
   86fe8:	2800      	cmp	r0, #0
   86fea:	f47f aeef 	bne.w	86dcc <_svfprintf_r+0x890>
   86fee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86ff0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86ff2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86ff6:	e426      	b.n	86846 <_svfprintf_r+0x30a>
   86ff8:	4651      	mov	r1, sl
   86ffa:	4648      	mov	r0, r9
   86ffc:	aa2a      	add	r2, sp, #168	; 0xa8
   86ffe:	f004 fe87 	bl	8bd10 <__ssprint_r>
   87002:	2800      	cmp	r0, #0
   87004:	f47f aee2 	bne.w	86dcc <_svfprintf_r+0x890>
   87008:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8700a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8700e:	e429      	b.n	86864 <_svfprintf_r+0x328>
   87010:	2d10      	cmp	r5, #16
   87012:	f340 86be 	ble.w	87d92 <_svfprintf_r+0x1856>
   87016:	2610      	movs	r6, #16
   87018:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8701a:	e004      	b.n	87026 <_svfprintf_r+0xaea>
   8701c:	3d10      	subs	r5, #16
   8701e:	2d10      	cmp	r5, #16
   87020:	f108 0808 	add.w	r8, r8, #8
   87024:	dd17      	ble.n	87056 <_svfprintf_r+0xb1a>
   87026:	3301      	adds	r3, #1
   87028:	4aad      	ldr	r2, [pc, #692]	; (872e0 <_svfprintf_r+0xda4>)
   8702a:	3410      	adds	r4, #16
   8702c:	2b07      	cmp	r3, #7
   8702e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87032:	e9c8 2600 	strd	r2, r6, [r8]
   87036:	ddf1      	ble.n	8701c <_svfprintf_r+0xae0>
   87038:	4651      	mov	r1, sl
   8703a:	4648      	mov	r0, r9
   8703c:	aa2a      	add	r2, sp, #168	; 0xa8
   8703e:	f004 fe67 	bl	8bd10 <__ssprint_r>
   87042:	2800      	cmp	r0, #0
   87044:	f47f aec2 	bne.w	86dcc <_svfprintf_r+0x890>
   87048:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8704c:	3d10      	subs	r5, #16
   8704e:	2d10      	cmp	r5, #16
   87050:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87054:	dce7      	bgt.n	87026 <_svfprintf_r+0xaea>
   87056:	3301      	adds	r3, #1
   87058:	4aa1      	ldr	r2, [pc, #644]	; (872e0 <_svfprintf_r+0xda4>)
   8705a:	442c      	add	r4, r5
   8705c:	2b07      	cmp	r3, #7
   8705e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87062:	e9c8 2500 	strd	r2, r5, [r8]
   87066:	f77f ac21 	ble.w	868ac <_svfprintf_r+0x370>
   8706a:	4651      	mov	r1, sl
   8706c:	4648      	mov	r0, r9
   8706e:	aa2a      	add	r2, sp, #168	; 0xa8
   87070:	f004 fe4e 	bl	8bd10 <__ssprint_r>
   87074:	2800      	cmp	r0, #0
   87076:	f47f aea9 	bne.w	86dcc <_svfprintf_r+0x890>
   8707a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8707c:	e416      	b.n	868ac <_svfprintf_r+0x370>
   8707e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87080:	2a00      	cmp	r2, #0
   87082:	f340 8386 	ble.w	87792 <_svfprintf_r+0x1256>
   87086:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8708a:	4293      	cmp	r3, r2
   8708c:	bfa8      	it	ge
   8708e:	4613      	movge	r3, r2
   87090:	2b00      	cmp	r3, #0
   87092:	461d      	mov	r5, r3
   87094:	dd0b      	ble.n	870ae <_svfprintf_r+0xb72>
   87096:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87098:	442c      	add	r4, r5
   8709a:	3301      	adds	r3, #1
   8709c:	2b07      	cmp	r3, #7
   8709e:	e9c8 7500 	strd	r7, r5, [r8]
   870a2:	942c      	str	r4, [sp, #176]	; 0xb0
   870a4:	932b      	str	r3, [sp, #172]	; 0xac
   870a6:	f300 851e 	bgt.w	87ae6 <_svfprintf_r+0x15aa>
   870aa:	f108 0808 	add.w	r8, r8, #8
   870ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   870b0:	2d00      	cmp	r5, #0
   870b2:	bfa8      	it	ge
   870b4:	1b5b      	subge	r3, r3, r5
   870b6:	2b00      	cmp	r3, #0
   870b8:	461d      	mov	r5, r3
   870ba:	f300 8256 	bgt.w	8756a <_svfprintf_r+0x102e>
   870be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   870c0:	443b      	add	r3, r7
   870c2:	461e      	mov	r6, r3
   870c4:	9b07      	ldr	r3, [sp, #28]
   870c6:	055b      	lsls	r3, r3, #21
   870c8:	f100 8277 	bmi.w	875ba <_svfprintf_r+0x107e>
   870cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   870ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   870d0:	4293      	cmp	r3, r2
   870d2:	db03      	blt.n	870dc <_svfprintf_r+0xba0>
   870d4:	9a07      	ldr	r2, [sp, #28]
   870d6:	07d5      	lsls	r5, r2, #31
   870d8:	f140 847a 	bpl.w	879d0 <_svfprintf_r+0x1494>
   870dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   870de:	9917      	ldr	r1, [sp, #92]	; 0x5c
   870e0:	3201      	adds	r2, #1
   870e2:	9818      	ldr	r0, [sp, #96]	; 0x60
   870e4:	440c      	add	r4, r1
   870e6:	2a07      	cmp	r2, #7
   870e8:	e9c8 0100 	strd	r0, r1, [r8]
   870ec:	942c      	str	r4, [sp, #176]	; 0xb0
   870ee:	922b      	str	r2, [sp, #172]	; 0xac
   870f0:	f300 8506 	bgt.w	87b00 <_svfprintf_r+0x15c4>
   870f4:	f108 0808 	add.w	r8, r8, #8
   870f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   870fa:	18bd      	adds	r5, r7, r2
   870fc:	1bad      	subs	r5, r5, r6
   870fe:	1ad3      	subs	r3, r2, r3
   87100:	429d      	cmp	r5, r3
   87102:	bfa8      	it	ge
   87104:	461d      	movge	r5, r3
   87106:	2d00      	cmp	r5, #0
   87108:	dd0b      	ble.n	87122 <_svfprintf_r+0xbe6>
   8710a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8710c:	442c      	add	r4, r5
   8710e:	3201      	adds	r2, #1
   87110:	2a07      	cmp	r2, #7
   87112:	e9c8 6500 	strd	r6, r5, [r8]
   87116:	942c      	str	r4, [sp, #176]	; 0xb0
   87118:	922b      	str	r2, [sp, #172]	; 0xac
   8711a:	f300 855f 	bgt.w	87bdc <_svfprintf_r+0x16a0>
   8711e:	f108 0808 	add.w	r8, r8, #8
   87122:	2d00      	cmp	r5, #0
   87124:	bfb4      	ite	lt
   87126:	461d      	movlt	r5, r3
   87128:	1b5d      	subge	r5, r3, r5
   8712a:	2d00      	cmp	r5, #0
   8712c:	f77f abb5 	ble.w	8689a <_svfprintf_r+0x35e>
   87130:	2d10      	cmp	r5, #16
   87132:	f340 8376 	ble.w	87822 <_svfprintf_r+0x12e6>
   87136:	4f6b      	ldr	r7, [pc, #428]	; (872e4 <_svfprintf_r+0xda8>)
   87138:	2610      	movs	r6, #16
   8713a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8713c:	970f      	str	r7, [sp, #60]	; 0x3c
   8713e:	e005      	b.n	8714c <_svfprintf_r+0xc10>
   87140:	f108 0808 	add.w	r8, r8, #8
   87144:	3d10      	subs	r5, #16
   87146:	2d10      	cmp	r5, #16
   87148:	f340 836e 	ble.w	87828 <_svfprintf_r+0x12ec>
   8714c:	3301      	adds	r3, #1
   8714e:	3410      	adds	r4, #16
   87150:	2b07      	cmp	r3, #7
   87152:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87156:	e9c8 7600 	strd	r7, r6, [r8]
   8715a:	ddf1      	ble.n	87140 <_svfprintf_r+0xc04>
   8715c:	4651      	mov	r1, sl
   8715e:	4648      	mov	r0, r9
   87160:	aa2a      	add	r2, sp, #168	; 0xa8
   87162:	f004 fdd5 	bl	8bd10 <__ssprint_r>
   87166:	2800      	cmp	r0, #0
   87168:	f47f ae30 	bne.w	86dcc <_svfprintf_r+0x890>
   8716c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87170:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87174:	e7e6      	b.n	87144 <_svfprintf_r+0xc08>
   87176:	2b30      	cmp	r3, #48	; 0x30
   87178:	f43f ae99 	beq.w	86eae <_svfprintf_r+0x972>
   8717c:	2330      	movs	r3, #48	; 0x30
   8717e:	3a02      	subs	r2, #2
   87180:	f807 3c01 	strb.w	r3, [r7, #-1]
   87184:	9908      	ldr	r1, [sp, #32]
   87186:	ab56      	add	r3, sp, #344	; 0x158
   87188:	1a9b      	subs	r3, r3, r2
   8718a:	4617      	mov	r7, r2
   8718c:	9107      	str	r1, [sp, #28]
   8718e:	930c      	str	r3, [sp, #48]	; 0x30
   87190:	e53d      	b.n	86c0e <_svfprintf_r+0x6d2>
   87192:	9b07      	ldr	r3, [sp, #28]
   87194:	07d8      	lsls	r0, r3, #31
   87196:	f53f ae27 	bmi.w	86de8 <_svfprintf_r+0x8ac>
   8719a:	2301      	movs	r3, #1
   8719c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   8719e:	441c      	add	r4, r3
   871a0:	441d      	add	r5, r3
   871a2:	2d07      	cmp	r5, #7
   871a4:	942c      	str	r4, [sp, #176]	; 0xb0
   871a6:	f8c8 7000 	str.w	r7, [r8]
   871aa:	952b      	str	r5, [sp, #172]	; 0xac
   871ac:	f8c8 3004 	str.w	r3, [r8, #4]
   871b0:	f77f ae4d 	ble.w	86e4e <_svfprintf_r+0x912>
   871b4:	4651      	mov	r1, sl
   871b6:	4648      	mov	r0, r9
   871b8:	aa2a      	add	r2, sp, #168	; 0xa8
   871ba:	f004 fda9 	bl	8bd10 <__ssprint_r>
   871be:	2800      	cmp	r0, #0
   871c0:	f47f ae04 	bne.w	86dcc <_svfprintf_r+0x890>
   871c4:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   871c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   871cc:	e641      	b.n	86e52 <_svfprintf_r+0x916>
   871ce:	1e5e      	subs	r6, r3, #1
   871d0:	2e00      	cmp	r6, #0
   871d2:	f77f ae3e 	ble.w	86e52 <_svfprintf_r+0x916>
   871d6:	2e10      	cmp	r6, #16
   871d8:	f340 871e 	ble.w	88018 <_svfprintf_r+0x1adc>
   871dc:	4b41      	ldr	r3, [pc, #260]	; (872e4 <_svfprintf_r+0xda8>)
   871de:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   871e2:	2710      	movs	r7, #16
   871e4:	46d3      	mov	fp, sl
   871e6:	930f      	str	r3, [sp, #60]	; 0x3c
   871e8:	46ca      	mov	sl, r9
   871ea:	4699      	mov	r9, r3
   871ec:	e005      	b.n	871fa <_svfprintf_r+0xcbe>
   871ee:	f108 0808 	add.w	r8, r8, #8
   871f2:	3e10      	subs	r6, #16
   871f4:	2e10      	cmp	r6, #16
   871f6:	f340 82f8 	ble.w	877ea <_svfprintf_r+0x12ae>
   871fa:	3501      	adds	r5, #1
   871fc:	3410      	adds	r4, #16
   871fe:	2d07      	cmp	r5, #7
   87200:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87204:	e9c8 9700 	strd	r9, r7, [r8]
   87208:	ddf1      	ble.n	871ee <_svfprintf_r+0xcb2>
   8720a:	4659      	mov	r1, fp
   8720c:	4650      	mov	r0, sl
   8720e:	aa2a      	add	r2, sp, #168	; 0xa8
   87210:	f004 fd7e 	bl	8bd10 <__ssprint_r>
   87214:	2800      	cmp	r0, #0
   87216:	f040 85cc 	bne.w	87db2 <_svfprintf_r+0x1876>
   8721a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8721e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87222:	e7e6      	b.n	871f2 <_svfprintf_r+0xcb6>
   87224:	4651      	mov	r1, sl
   87226:	4648      	mov	r0, r9
   87228:	aa2a      	add	r2, sp, #168	; 0xa8
   8722a:	f004 fd71 	bl	8bd10 <__ssprint_r>
   8722e:	2800      	cmp	r0, #0
   87230:	f47f adcc 	bne.w	86dcc <_svfprintf_r+0x890>
   87234:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87236:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8723a:	f7ff bb1d 	b.w	86878 <_svfprintf_r+0x33c>
   8723e:	9b08      	ldr	r3, [sp, #32]
   87240:	06dc      	lsls	r4, r3, #27
   87242:	f100 8119 	bmi.w	87478 <_svfprintf_r+0xf3c>
   87246:	9b08      	ldr	r3, [sp, #32]
   87248:	0658      	lsls	r0, r3, #25
   8724a:	f140 8368 	bpl.w	8791e <_svfprintf_r+0x13e2>
   8724e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87250:	2301      	movs	r3, #1
   87252:	f852 4b04 	ldr.w	r4, [r2], #4
   87256:	2500      	movs	r5, #0
   87258:	920e      	str	r2, [sp, #56]	; 0x38
   8725a:	b2a4      	uxth	r4, r4
   8725c:	f7ff ba7f 	b.w	8675e <_svfprintf_r+0x222>
   87260:	232d      	movs	r3, #45	; 0x2d
   87262:	9a07      	ldr	r2, [sp, #28]
   87264:	4264      	negs	r4, r4
   87266:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8726a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8726e:	2301      	movs	r3, #1
   87270:	9208      	str	r2, [sp, #32]
   87272:	f7ff ba77 	b.w	86764 <_svfprintf_r+0x228>
   87276:	4651      	mov	r1, sl
   87278:	4648      	mov	r0, r9
   8727a:	aa2a      	add	r2, sp, #168	; 0xa8
   8727c:	f004 fd48 	bl	8bd10 <__ssprint_r>
   87280:	2800      	cmp	r0, #0
   87282:	f47f ada3 	bne.w	86dcc <_svfprintf_r+0x890>
   87286:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8728a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8728e:	e5ba      	b.n	86e06 <_svfprintf_r+0x8ca>
   87290:	4651      	mov	r1, sl
   87292:	4648      	mov	r0, r9
   87294:	aa2a      	add	r2, sp, #168	; 0xa8
   87296:	f004 fd3b 	bl	8bd10 <__ssprint_r>
   8729a:	2800      	cmp	r0, #0
   8729c:	f47f ad96 	bne.w	86dcc <_svfprintf_r+0x890>
   872a0:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   872a4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   872a8:	e5ba      	b.n	86e20 <_svfprintf_r+0x8e4>
   872aa:	9b07      	ldr	r3, [sp, #28]
   872ac:	07da      	lsls	r2, r3, #31
   872ae:	f57f aaf4 	bpl.w	8689a <_svfprintf_r+0x35e>
   872b2:	e4d9      	b.n	86c68 <_svfprintf_r+0x72c>
   872b4:	af56      	add	r7, sp, #344	; 0x158
   872b6:	e4aa      	b.n	86c0e <_svfprintf_r+0x6d2>
   872b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872ba:	465f      	mov	r7, fp
   872bc:	f853 1b04 	ldr.w	r1, [r3], #4
   872c0:	930e      	str	r3, [sp, #56]	; 0x38
   872c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   872c4:	17dd      	asrs	r5, r3, #31
   872c6:	461a      	mov	r2, r3
   872c8:	462b      	mov	r3, r5
   872ca:	e9c1 2300 	strd	r2, r3, [r1]
   872ce:	f7ff bb03 	b.w	868d8 <_svfprintf_r+0x39c>
   872d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872d4:	2500      	movs	r5, #0
   872d6:	f853 4b04 	ldr.w	r4, [r3], #4
   872da:	930e      	str	r3, [sp, #56]	; 0x38
   872dc:	f7ff ba3a 	b.w	86754 <_svfprintf_r+0x218>
   872e0:	0008ce14 	.word	0x0008ce14
   872e4:	0008ce24 	.word	0x0008ce24
   872e8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   872ec:	460b      	mov	r3, r1
   872ee:	4602      	mov	r2, r0
   872f0:	f005 fc42 	bl	8cb78 <__aeabi_dcmpun>
   872f4:	4601      	mov	r1, r0
   872f6:	2800      	cmp	r0, #0
   872f8:	f040 8643 	bne.w	87f82 <_svfprintf_r+0x1a46>
   872fc:	2e61      	cmp	r6, #97	; 0x61
   872fe:	f000 8586 	beq.w	87e0e <_svfprintf_r+0x18d2>
   87302:	2e41      	cmp	r6, #65	; 0x41
   87304:	f000 847a 	beq.w	87bfc <_svfprintf_r+0x16c0>
   87308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8730a:	f026 0520 	bic.w	r5, r6, #32
   8730e:	1c5a      	adds	r2, r3, #1
   87310:	9508      	str	r5, [sp, #32]
   87312:	f000 837d 	beq.w	87a10 <_svfprintf_r+0x14d4>
   87316:	2d47      	cmp	r5, #71	; 0x47
   87318:	f000 859e 	beq.w	87e58 <_svfprintf_r+0x191c>
   8731c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87320:	9b07      	ldr	r3, [sp, #28]
   87322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87326:	9312      	str	r3, [sp, #72]	; 0x48
   87328:	460b      	mov	r3, r1
   8732a:	2b00      	cmp	r3, #0
   8732c:	f2c0 85ba 	blt.w	87ea4 <_svfprintf_r+0x1968>
   87330:	2200      	movs	r2, #0
   87332:	930f      	str	r3, [sp, #60]	; 0x3c
   87334:	921e      	str	r2, [sp, #120]	; 0x78
   87336:	920d      	str	r2, [sp, #52]	; 0x34
   87338:	900c      	str	r0, [sp, #48]	; 0x30
   8733a:	2d46      	cmp	r5, #70	; 0x46
   8733c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8733e:	f000 8407 	beq.w	87b50 <_svfprintf_r+0x1614>
   87342:	2d45      	cmp	r5, #69	; 0x45
   87344:	f04f 0002 	mov.w	r0, #2
   87348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8734a:	f040 83e7 	bne.w	87b1c <_svfprintf_r+0x15e0>
   8734e:	9909      	ldr	r1, [sp, #36]	; 0x24
   87350:	9000      	str	r0, [sp, #0]
   87352:	1c4c      	adds	r4, r1, #1
   87354:	a928      	add	r1, sp, #160	; 0xa0
   87356:	a825      	add	r0, sp, #148	; 0x94
   87358:	9104      	str	r1, [sp, #16]
   8735a:	a924      	add	r1, sp, #144	; 0x90
   8735c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87360:	9401      	str	r4, [sp, #4]
   87362:	4648      	mov	r0, r9
   87364:	f001 feb0 	bl	890c8 <_dtoa_r>
   87368:	4607      	mov	r7, r0
   8736a:	4404      	add	r4, r0
   8736c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8736e:	9d07      	ldr	r5, [sp, #28]
   87370:	9307      	str	r3, [sp, #28]
   87372:	2200      	movs	r2, #0
   87374:	2300      	movs	r3, #0
   87376:	980c      	ldr	r0, [sp, #48]	; 0x30
   87378:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8737a:	f005 fbcb 	bl	8cb14 <__aeabi_dcmpeq>
   8737e:	2800      	cmp	r0, #0
   87380:	f000 8398 	beq.w	87ab4 <_svfprintf_r+0x1578>
   87384:	4623      	mov	r3, r4
   87386:	1bdb      	subs	r3, r3, r7
   87388:	9313      	str	r3, [sp, #76]	; 0x4c
   8738a:	9b08      	ldr	r3, [sp, #32]
   8738c:	2b47      	cmp	r3, #71	; 0x47
   8738e:	f000 835e 	beq.w	87a4e <_svfprintf_r+0x1512>
   87392:	9b08      	ldr	r3, [sp, #32]
   87394:	2b46      	cmp	r3, #70	; 0x46
   87396:	f000 840b 	beq.w	87bb0 <_svfprintf_r+0x1674>
   8739a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8739c:	9310      	str	r3, [sp, #64]	; 0x40
   8739e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   873a0:	9a08      	ldr	r2, [sp, #32]
   873a2:	3b01      	subs	r3, #1
   873a4:	2a41      	cmp	r2, #65	; 0x41
   873a6:	9324      	str	r3, [sp, #144]	; 0x90
   873a8:	f000 85ad 	beq.w	87f06 <_svfprintf_r+0x19ca>
   873ac:	2100      	movs	r1, #0
   873ae:	b2f2      	uxtb	r2, r6
   873b0:	2b00      	cmp	r3, #0
   873b2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   873b6:	bfb6      	itet	lt
   873b8:	222d      	movlt	r2, #45	; 0x2d
   873ba:	222b      	movge	r2, #43	; 0x2b
   873bc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   873be:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   873c2:	bfb8      	it	lt
   873c4:	f1c3 0301 	rsblt	r3, r3, #1
   873c8:	2b09      	cmp	r3, #9
   873ca:	f340 85a2 	ble.w	87f12 <_svfprintf_r+0x19d6>
   873ce:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   873d2:	4672      	mov	r2, lr
   873d4:	469c      	mov	ip, r3
   873d6:	4cbf      	ldr	r4, [pc, #764]	; (876d4 <_svfprintf_r+0x1198>)
   873d8:	4660      	mov	r0, ip
   873da:	4611      	mov	r1, r2
   873dc:	fb84 230c 	smull	r2, r3, r4, ip
   873e0:	ea4f 72ec 	mov.w	r2, ip, asr #31
   873e4:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   873e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   873ec:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   873f0:	3330      	adds	r3, #48	; 0x30
   873f2:	2863      	cmp	r0, #99	; 0x63
   873f4:	4694      	mov	ip, r2
   873f6:	f801 3c01 	strb.w	r3, [r1, #-1]
   873fa:	f101 32ff 	add.w	r2, r1, #4294967295
   873fe:	dceb      	bgt.n	873d8 <_svfprintf_r+0xe9c>
   87400:	4663      	mov	r3, ip
   87402:	3330      	adds	r3, #48	; 0x30
   87404:	b2d8      	uxtb	r0, r3
   87406:	1e8b      	subs	r3, r1, #2
   87408:	459e      	cmp	lr, r3
   8740a:	f802 0c01 	strb.w	r0, [r2, #-1]
   8740e:	f240 862c 	bls.w	8806a <_svfprintf_r+0x1b2e>
   87412:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87416:	e001      	b.n	8741c <_svfprintf_r+0xee0>
   87418:	f812 0b01 	ldrb.w	r0, [r2], #1
   8741c:	4596      	cmp	lr, r2
   8741e:	f803 0b01 	strb.w	r0, [r3], #1
   87422:	d1f9      	bne.n	87418 <_svfprintf_r+0xedc>
   87424:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87428:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   8742c:	1a5b      	subs	r3, r3, r1
   8742e:	4413      	add	r3, r2
   87430:	aa26      	add	r2, sp, #152	; 0x98
   87432:	1a9b      	subs	r3, r3, r2
   87434:	931b      	str	r3, [sp, #108]	; 0x6c
   87436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87438:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8743a:	2b01      	cmp	r3, #1
   8743c:	441a      	add	r2, r3
   8743e:	920c      	str	r2, [sp, #48]	; 0x30
   87440:	f340 85cc 	ble.w	87fdc <_svfprintf_r+0x1aa0>
   87444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87448:	4413      	add	r3, r2
   8744a:	930c      	str	r3, [sp, #48]	; 0x30
   8744c:	2300      	movs	r3, #0
   8744e:	9312      	str	r3, [sp, #72]	; 0x48
   87450:	9316      	str	r3, [sp, #88]	; 0x58
   87452:	9310      	str	r3, [sp, #64]	; 0x40
   87454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87456:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   8745a:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   8745e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87462:	9207      	str	r2, [sp, #28]
   87464:	9308      	str	r3, [sp, #32]
   87466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87468:	2b00      	cmp	r3, #0
   8746a:	f040 8317 	bne.w	87a9c <_svfprintf_r+0x1560>
   8746e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87472:	9309      	str	r3, [sp, #36]	; 0x24
   87474:	f7ff ba86 	b.w	86984 <_svfprintf_r+0x448>
   87478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8747a:	2301      	movs	r3, #1
   8747c:	f852 4b04 	ldr.w	r4, [r2], #4
   87480:	2500      	movs	r5, #0
   87482:	920e      	str	r2, [sp, #56]	; 0x38
   87484:	f7ff b96b 	b.w	8675e <_svfprintf_r+0x222>
   87488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8748a:	f853 4b04 	ldr.w	r4, [r3], #4
   8748e:	17e5      	asrs	r5, r4, #31
   87490:	930e      	str	r3, [sp, #56]	; 0x38
   87492:	4622      	mov	r2, r4
   87494:	462b      	mov	r3, r5
   87496:	f7ff b933 	b.w	86700 <_svfprintf_r+0x1c4>
   8749a:	9b07      	ldr	r3, [sp, #28]
   8749c:	9308      	str	r3, [sp, #32]
   8749e:	f7ff bae0 	b.w	86a62 <_svfprintf_r+0x526>
   874a2:	4b8d      	ldr	r3, [pc, #564]	; (876d8 <_svfprintf_r+0x119c>)
   874a4:	9319      	str	r3, [sp, #100]	; 0x64
   874a6:	9b07      	ldr	r3, [sp, #28]
   874a8:	0699      	lsls	r1, r3, #26
   874aa:	f140 80fe 	bpl.w	876aa <_svfprintf_r+0x116e>
   874ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874b0:	3307      	adds	r3, #7
   874b2:	f023 0307 	bic.w	r3, r3, #7
   874b6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   874ba:	930e      	str	r3, [sp, #56]	; 0x38
   874bc:	9a07      	ldr	r2, [sp, #28]
   874be:	07d7      	lsls	r7, r2, #31
   874c0:	d50a      	bpl.n	874d8 <_svfprintf_r+0xf9c>
   874c2:	ea54 0305 	orrs.w	r3, r4, r5
   874c6:	d007      	beq.n	874d8 <_svfprintf_r+0xf9c>
   874c8:	2330      	movs	r3, #48	; 0x30
   874ca:	f042 0202 	orr.w	r2, r2, #2
   874ce:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   874d2:	9207      	str	r2, [sp, #28]
   874d4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   874d8:	9a07      	ldr	r2, [sp, #28]
   874da:	2302      	movs	r3, #2
   874dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   874e0:	9208      	str	r2, [sp, #32]
   874e2:	f7ff b93c 	b.w	8675e <_svfprintf_r+0x222>
   874e6:	4b7d      	ldr	r3, [pc, #500]	; (876dc <_svfprintf_r+0x11a0>)
   874e8:	9319      	str	r3, [sp, #100]	; 0x64
   874ea:	e7dc      	b.n	874a6 <_svfprintf_r+0xf6a>
   874ec:	f043 0320 	orr.w	r3, r3, #32
   874f0:	f89b 6001 	ldrb.w	r6, [fp, #1]
   874f4:	9307      	str	r3, [sp, #28]
   874f6:	f10b 0b01 	add.w	fp, fp, #1
   874fa:	f7ff b86a 	b.w	865d2 <_svfprintf_r+0x96>
   874fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   87502:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87506:	9307      	str	r3, [sp, #28]
   87508:	f10b 0b01 	add.w	fp, fp, #1
   8750c:	f7ff b861 	b.w	865d2 <_svfprintf_r+0x96>
   87510:	4651      	mov	r1, sl
   87512:	4648      	mov	r0, r9
   87514:	aa2a      	add	r2, sp, #168	; 0xa8
   87516:	f004 fbfb 	bl	8bd10 <__ssprint_r>
   8751a:	2800      	cmp	r0, #0
   8751c:	f47f ac56 	bne.w	86dcc <_svfprintf_r+0x890>
   87520:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87522:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87526:	f7ff bbad 	b.w	86c84 <_svfprintf_r+0x748>
   8752a:	2140      	movs	r1, #64	; 0x40
   8752c:	4648      	mov	r0, r9
   8752e:	f003 fa79 	bl	8aa24 <_malloc_r>
   87532:	f8cb 0000 	str.w	r0, [fp]
   87536:	f8cb 0010 	str.w	r0, [fp, #16]
   8753a:	2800      	cmp	r0, #0
   8753c:	f000 858d 	beq.w	8805a <_svfprintf_r+0x1b1e>
   87540:	2340      	movs	r3, #64	; 0x40
   87542:	f8cb 3014 	str.w	r3, [fp, #20]
   87546:	f7ff b811 	b.w	8656c <_svfprintf_r+0x30>
   8754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8754c:	463a      	mov	r2, r7
   8754e:	2b06      	cmp	r3, #6
   87550:	bf28      	it	cs
   87552:	2306      	movcs	r3, #6
   87554:	9709      	str	r7, [sp, #36]	; 0x24
   87556:	9712      	str	r7, [sp, #72]	; 0x48
   87558:	9716      	str	r7, [sp, #88]	; 0x58
   8755a:	9710      	str	r7, [sp, #64]	; 0x40
   8755c:	970d      	str	r7, [sp, #52]	; 0x34
   8755e:	9308      	str	r3, [sp, #32]
   87560:	4f5f      	ldr	r7, [pc, #380]	; (876e0 <_svfprintf_r+0x11a4>)
   87562:	940e      	str	r4, [sp, #56]	; 0x38
   87564:	930c      	str	r3, [sp, #48]	; 0x30
   87566:	f7ff ba0d 	b.w	86984 <_svfprintf_r+0x448>
   8756a:	2b10      	cmp	r3, #16
   8756c:	f340 8558 	ble.w	88020 <_svfprintf_r+0x1ae4>
   87570:	4651      	mov	r1, sl
   87572:	4a5c      	ldr	r2, [pc, #368]	; (876e4 <_svfprintf_r+0x11a8>)
   87574:	46ca      	mov	sl, r9
   87576:	9709      	str	r7, [sp, #36]	; 0x24
   87578:	2610      	movs	r6, #16
   8757a:	4617      	mov	r7, r2
   8757c:	4689      	mov	r9, r1
   8757e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87580:	920f      	str	r2, [sp, #60]	; 0x3c
   87582:	e005      	b.n	87590 <_svfprintf_r+0x1054>
   87584:	f108 0808 	add.w	r8, r8, #8
   87588:	3d10      	subs	r5, #16
   8758a:	2d10      	cmp	r5, #16
   8758c:	f340 81fa 	ble.w	87984 <_svfprintf_r+0x1448>
   87590:	3301      	adds	r3, #1
   87592:	3410      	adds	r4, #16
   87594:	2b07      	cmp	r3, #7
   87596:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8759a:	e9c8 7600 	strd	r7, r6, [r8]
   8759e:	ddf1      	ble.n	87584 <_svfprintf_r+0x1048>
   875a0:	4649      	mov	r1, r9
   875a2:	4650      	mov	r0, sl
   875a4:	aa2a      	add	r2, sp, #168	; 0xa8
   875a6:	f004 fbb3 	bl	8bd10 <__ssprint_r>
   875aa:	2800      	cmp	r0, #0
   875ac:	f040 83fd 	bne.w	87daa <_svfprintf_r+0x186e>
   875b0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   875b4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875b8:	e7e6      	b.n	87588 <_svfprintf_r+0x104c>
   875ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   875bc:	4642      	mov	r2, r8
   875be:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   875c2:	18fb      	adds	r3, r7, r3
   875c4:	9309      	str	r3, [sp, #36]	; 0x24
   875c6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   875ca:	970f      	str	r7, [sp, #60]	; 0x3c
   875cc:	4620      	mov	r0, r4
   875ce:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   875d2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   875d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   875d6:	f1b8 0f00 	cmp.w	r8, #0
   875da:	d02d      	beq.n	87638 <_svfprintf_r+0x10fc>
   875dc:	bb7b      	cbnz	r3, 8763e <_svfprintf_r+0x1102>
   875de:	3f01      	subs	r7, #1
   875e0:	f108 38ff 	add.w	r8, r8, #4294967295
   875e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   875e6:	991c      	ldr	r1, [sp, #112]	; 0x70
   875e8:	3301      	adds	r3, #1
   875ea:	4458      	add	r0, fp
   875ec:	2b07      	cmp	r3, #7
   875ee:	e9c2 1b00 	strd	r1, fp, [r2]
   875f2:	902c      	str	r0, [sp, #176]	; 0xb0
   875f4:	932b      	str	r3, [sp, #172]	; 0xac
   875f6:	dc62      	bgt.n	876be <_svfprintf_r+0x1182>
   875f8:	3208      	adds	r2, #8
   875fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   875fc:	783b      	ldrb	r3, [r7, #0]
   875fe:	1b8d      	subs	r5, r1, r6
   87600:	429d      	cmp	r5, r3
   87602:	bfa8      	it	ge
   87604:	461d      	movge	r5, r3
   87606:	2d00      	cmp	r5, #0
   87608:	dd0b      	ble.n	87622 <_svfprintf_r+0x10e6>
   8760a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8760c:	4428      	add	r0, r5
   8760e:	3301      	adds	r3, #1
   87610:	2b07      	cmp	r3, #7
   87612:	e9c2 6500 	strd	r6, r5, [r2]
   87616:	902c      	str	r0, [sp, #176]	; 0xb0
   87618:	932b      	str	r3, [sp, #172]	; 0xac
   8761a:	f300 8111 	bgt.w	87840 <_svfprintf_r+0x1304>
   8761e:	783b      	ldrb	r3, [r7, #0]
   87620:	3208      	adds	r2, #8
   87622:	2d00      	cmp	r5, #0
   87624:	bfb4      	ite	lt
   87626:	461d      	movlt	r5, r3
   87628:	1b5d      	subge	r5, r3, r5
   8762a:	2d00      	cmp	r5, #0
   8762c:	dc0b      	bgt.n	87646 <_svfprintf_r+0x110a>
   8762e:	441e      	add	r6, r3
   87630:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87632:	f1b8 0f00 	cmp.w	r8, #0
   87636:	d1d1      	bne.n	875dc <_svfprintf_r+0x10a0>
   87638:	2b00      	cmp	r3, #0
   8763a:	f000 81f9 	beq.w	87a30 <_svfprintf_r+0x14f4>
   8763e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87640:	3b01      	subs	r3, #1
   87642:	9312      	str	r3, [sp, #72]	; 0x48
   87644:	e7ce      	b.n	875e4 <_svfprintf_r+0x10a8>
   87646:	2d10      	cmp	r5, #16
   87648:	f340 84c5 	ble.w	87fd6 <_svfprintf_r+0x1a9a>
   8764c:	992b      	ldr	r1, [sp, #172]	; 0xac
   8764e:	2410      	movs	r4, #16
   87650:	460b      	mov	r3, r1
   87652:	e004      	b.n	8765e <_svfprintf_r+0x1122>
   87654:	3d10      	subs	r5, #16
   87656:	2d10      	cmp	r5, #16
   87658:	f102 0208 	add.w	r2, r2, #8
   8765c:	dd16      	ble.n	8768c <_svfprintf_r+0x1150>
   8765e:	3301      	adds	r3, #1
   87660:	4920      	ldr	r1, [pc, #128]	; (876e4 <_svfprintf_r+0x11a8>)
   87662:	3010      	adds	r0, #16
   87664:	2b07      	cmp	r3, #7
   87666:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8766a:	e9c2 1400 	strd	r1, r4, [r2]
   8766e:	ddf1      	ble.n	87654 <_svfprintf_r+0x1118>
   87670:	4651      	mov	r1, sl
   87672:	4648      	mov	r0, r9
   87674:	aa2a      	add	r2, sp, #168	; 0xa8
   87676:	f004 fb4b 	bl	8bd10 <__ssprint_r>
   8767a:	2800      	cmp	r0, #0
   8767c:	f47f aba6 	bne.w	86dcc <_svfprintf_r+0x890>
   87680:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   87684:	3d10      	subs	r5, #16
   87686:	2d10      	cmp	r5, #16
   87688:	aa2d      	add	r2, sp, #180	; 0xb4
   8768a:	dce8      	bgt.n	8765e <_svfprintf_r+0x1122>
   8768c:	4619      	mov	r1, r3
   8768e:	1c4b      	adds	r3, r1, #1
   87690:	4914      	ldr	r1, [pc, #80]	; (876e4 <_svfprintf_r+0x11a8>)
   87692:	4428      	add	r0, r5
   87694:	2b07      	cmp	r3, #7
   87696:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8769a:	e9c2 1500 	strd	r1, r5, [r2]
   8769e:	f300 8215 	bgt.w	87acc <_svfprintf_r+0x1590>
   876a2:	783b      	ldrb	r3, [r7, #0]
   876a4:	3208      	adds	r2, #8
   876a6:	441e      	add	r6, r3
   876a8:	e7c2      	b.n	87630 <_svfprintf_r+0x10f4>
   876aa:	9b07      	ldr	r3, [sp, #28]
   876ac:	06da      	lsls	r2, r3, #27
   876ae:	f140 8084 	bpl.w	877ba <_svfprintf_r+0x127e>
   876b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876b4:	2500      	movs	r5, #0
   876b6:	f853 4b04 	ldr.w	r4, [r3], #4
   876ba:	930e      	str	r3, [sp, #56]	; 0x38
   876bc:	e6fe      	b.n	874bc <_svfprintf_r+0xf80>
   876be:	4651      	mov	r1, sl
   876c0:	4648      	mov	r0, r9
   876c2:	aa2a      	add	r2, sp, #168	; 0xa8
   876c4:	f004 fb24 	bl	8bd10 <__ssprint_r>
   876c8:	2800      	cmp	r0, #0
   876ca:	f47f ab7f 	bne.w	86dcc <_svfprintf_r+0x890>
   876ce:	982c      	ldr	r0, [sp, #176]	; 0xb0
   876d0:	aa2d      	add	r2, sp, #180	; 0xb4
   876d2:	e792      	b.n	875fa <_svfprintf_r+0x10be>
   876d4:	66666667 	.word	0x66666667
   876d8:	0008cde0 	.word	0x0008cde0
   876dc:	0008cdf4 	.word	0x0008cdf4
   876e0:	0008ce08 	.word	0x0008ce08
   876e4:	0008ce24 	.word	0x0008ce24
   876e8:	2200      	movs	r2, #0
   876ea:	9b08      	ldr	r3, [sp, #32]
   876ec:	f8cd b01c 	str.w	fp, [sp, #28]
   876f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   876f4:	960c      	str	r6, [sp, #48]	; 0x30
   876f6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   876fa:	4693      	mov	fp, r2
   876fc:	46ca      	mov	sl, r9
   876fe:	461e      	mov	r6, r3
   87700:	46c1      	mov	r9, r8
   87702:	af56      	add	r7, sp, #344	; 0x158
   87704:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87708:	e00b      	b.n	87722 <_svfprintf_r+0x11e6>
   8770a:	220a      	movs	r2, #10
   8770c:	2300      	movs	r3, #0
   8770e:	4620      	mov	r0, r4
   87710:	4629      	mov	r1, r5
   87712:	f7fe fb3d 	bl	85d90 <__aeabi_uldivmod>
   87716:	2d00      	cmp	r5, #0
   87718:	bf08      	it	eq
   8771a:	2c0a      	cmpeq	r4, #10
   8771c:	d31b      	bcc.n	87756 <_svfprintf_r+0x121a>
   8771e:	4604      	mov	r4, r0
   87720:	460d      	mov	r5, r1
   87722:	220a      	movs	r2, #10
   87724:	2300      	movs	r3, #0
   87726:	4620      	mov	r0, r4
   87728:	4629      	mov	r1, r5
   8772a:	f7fe fb31 	bl	85d90 <__aeabi_uldivmod>
   8772e:	3230      	adds	r2, #48	; 0x30
   87730:	f807 2c01 	strb.w	r2, [r7, #-1]
   87734:	f10b 0b01 	add.w	fp, fp, #1
   87738:	3f01      	subs	r7, #1
   8773a:	2e00      	cmp	r6, #0
   8773c:	d0e5      	beq.n	8770a <_svfprintf_r+0x11ce>
   8773e:	f898 3000 	ldrb.w	r3, [r8]
   87742:	459b      	cmp	fp, r3
   87744:	d1e1      	bne.n	8770a <_svfprintf_r+0x11ce>
   87746:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   8774a:	d0de      	beq.n	8770a <_svfprintf_r+0x11ce>
   8774c:	2d00      	cmp	r5, #0
   8774e:	bf08      	it	eq
   87750:	2c0a      	cmpeq	r4, #10
   87752:	f080 8128 	bcs.w	879a6 <_svfprintf_r+0x146a>
   87756:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   8775a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   8775e:	46c8      	mov	r8, r9
   87760:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   87762:	46d1      	mov	r9, sl
   87764:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87768:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   8776c:	f7ff bb9f 	b.w	86eae <_svfprintf_r+0x972>
   87770:	4651      	mov	r1, sl
   87772:	4648      	mov	r0, r9
   87774:	aa2a      	add	r2, sp, #168	; 0xa8
   87776:	931e      	str	r3, [sp, #120]	; 0x78
   87778:	f004 faca 	bl	8bd10 <__ssprint_r>
   8777c:	2800      	cmp	r0, #0
   8777e:	f47f ab25 	bne.w	86dcc <_svfprintf_r+0x890>
   87782:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87786:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87788:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8778a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8778e:	f7ff b84a 	b.w	86826 <_svfprintf_r+0x2ea>
   87792:	2001      	movs	r0, #1
   87794:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87796:	49c5      	ldr	r1, [pc, #788]	; (87aac <_svfprintf_r+0x1570>)
   87798:	4403      	add	r3, r0
   8779a:	4404      	add	r4, r0
   8779c:	2b07      	cmp	r3, #7
   8779e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877a2:	e9c8 1000 	strd	r1, r0, [r8]
   877a6:	f73f abdf 	bgt.w	86f68 <_svfprintf_r+0xa2c>
   877aa:	f108 0808 	add.w	r8, r8, #8
   877ae:	f7ff bbe7 	b.w	86f80 <_svfprintf_r+0xa44>
   877b2:	46d1      	mov	r9, sl
   877b4:	46b3      	mov	fp, r6
   877b6:	f7ff bb0a 	b.w	86dce <_svfprintf_r+0x892>
   877ba:	9b07      	ldr	r3, [sp, #28]
   877bc:	065b      	lsls	r3, r3, #25
   877be:	f140 80cb 	bpl.w	87958 <_svfprintf_r+0x141c>
   877c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877c4:	2500      	movs	r5, #0
   877c6:	f853 4b04 	ldr.w	r4, [r3], #4
   877ca:	930e      	str	r3, [sp, #56]	; 0x38
   877cc:	b2a4      	uxth	r4, r4
   877ce:	e675      	b.n	874bc <_svfprintf_r+0xf80>
   877d0:	4651      	mov	r1, sl
   877d2:	4648      	mov	r0, r9
   877d4:	aa2a      	add	r2, sp, #168	; 0xa8
   877d6:	f004 fa9b 	bl	8bd10 <__ssprint_r>
   877da:	2800      	cmp	r0, #0
   877dc:	f47f aaf6 	bne.w	86dcc <_svfprintf_r+0x890>
   877e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   877e2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   877e6:	f7ff ba3a 	b.w	86c5e <_svfprintf_r+0x722>
   877ea:	46d1      	mov	r9, sl
   877ec:	46da      	mov	sl, fp
   877ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   877f2:	3501      	adds	r5, #1
   877f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877f6:	4434      	add	r4, r6
   877f8:	2d07      	cmp	r5, #7
   877fa:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   877fe:	e9c8 3600 	strd	r3, r6, [r8]
   87802:	f77f ab24 	ble.w	86e4e <_svfprintf_r+0x912>
   87806:	4651      	mov	r1, sl
   87808:	4648      	mov	r0, r9
   8780a:	aa2a      	add	r2, sp, #168	; 0xa8
   8780c:	f004 fa80 	bl	8bd10 <__ssprint_r>
   87810:	2800      	cmp	r0, #0
   87812:	f47f aadb 	bne.w	86dcc <_svfprintf_r+0x890>
   87816:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8781a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8781e:	f7ff bb18 	b.w	86e52 <_svfprintf_r+0x916>
   87822:	4aa3      	ldr	r2, [pc, #652]	; (87ab0 <_svfprintf_r+0x1574>)
   87824:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87826:	920f      	str	r2, [sp, #60]	; 0x3c
   87828:	3301      	adds	r3, #1
   8782a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8782c:	442c      	add	r4, r5
   8782e:	2b07      	cmp	r3, #7
   87830:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87834:	e9c8 2500 	strd	r2, r5, [r8]
   87838:	f77f a82d 	ble.w	86896 <_svfprintf_r+0x35a>
   8783c:	f7ff bbc2 	b.w	86fc4 <_svfprintf_r+0xa88>
   87840:	4651      	mov	r1, sl
   87842:	4648      	mov	r0, r9
   87844:	aa2a      	add	r2, sp, #168	; 0xa8
   87846:	f004 fa63 	bl	8bd10 <__ssprint_r>
   8784a:	2800      	cmp	r0, #0
   8784c:	f47f aabe 	bne.w	86dcc <_svfprintf_r+0x890>
   87850:	783b      	ldrb	r3, [r7, #0]
   87852:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87854:	aa2d      	add	r2, sp, #180	; 0xb4
   87856:	e6e4      	b.n	87622 <_svfprintf_r+0x10e6>
   87858:	4651      	mov	r1, sl
   8785a:	4648      	mov	r0, r9
   8785c:	aa2a      	add	r2, sp, #168	; 0xa8
   8785e:	f004 fa57 	bl	8bd10 <__ssprint_r>
   87862:	2800      	cmp	r0, #0
   87864:	f47f aab2 	bne.w	86dcc <_svfprintf_r+0x890>
   87868:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8786a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8786e:	f7fe bffd 	b.w	8686c <_svfprintf_r+0x330>
   87872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87874:	990a      	ldr	r1, [sp, #40]	; 0x28
   87876:	f853 2b04 	ldr.w	r2, [r3], #4
   8787a:	465f      	mov	r7, fp
   8787c:	6011      	str	r1, [r2, #0]
   8787e:	930e      	str	r3, [sp, #56]	; 0x38
   87880:	f7ff b82a 	b.w	868d8 <_svfprintf_r+0x39c>
   87884:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87886:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87888:	3301      	adds	r3, #1
   8788a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8788c:	440c      	add	r4, r1
   8788e:	2b07      	cmp	r3, #7
   87890:	e9c8 0100 	strd	r0, r1, [r8]
   87894:	942c      	str	r4, [sp, #176]	; 0xb0
   87896:	932b      	str	r3, [sp, #172]	; 0xac
   87898:	f300 80ac 	bgt.w	879f4 <_svfprintf_r+0x14b8>
   8789c:	f108 0808 	add.w	r8, r8, #8
   878a0:	2a00      	cmp	r2, #0
   878a2:	f6bf ab85 	bge.w	86fb0 <_svfprintf_r+0xa74>
   878a6:	4255      	negs	r5, r2
   878a8:	3210      	adds	r2, #16
   878aa:	f280 83d3 	bge.w	88054 <_svfprintf_r+0x1b18>
   878ae:	4651      	mov	r1, sl
   878b0:	4a7f      	ldr	r2, [pc, #508]	; (87ab0 <_svfprintf_r+0x1574>)
   878b2:	46ca      	mov	sl, r9
   878b4:	9709      	str	r7, [sp, #36]	; 0x24
   878b6:	2610      	movs	r6, #16
   878b8:	4617      	mov	r7, r2
   878ba:	4689      	mov	r9, r1
   878bc:	920f      	str	r2, [sp, #60]	; 0x3c
   878be:	e005      	b.n	878cc <_svfprintf_r+0x1390>
   878c0:	f108 0808 	add.w	r8, r8, #8
   878c4:	3d10      	subs	r5, #16
   878c6:	2d10      	cmp	r5, #16
   878c8:	f340 82aa 	ble.w	87e20 <_svfprintf_r+0x18e4>
   878cc:	3301      	adds	r3, #1
   878ce:	3410      	adds	r4, #16
   878d0:	2b07      	cmp	r3, #7
   878d2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   878d6:	e9c8 7600 	strd	r7, r6, [r8]
   878da:	ddf1      	ble.n	878c0 <_svfprintf_r+0x1384>
   878dc:	4649      	mov	r1, r9
   878de:	4650      	mov	r0, sl
   878e0:	aa2a      	add	r2, sp, #168	; 0xa8
   878e2:	f004 fa15 	bl	8bd10 <__ssprint_r>
   878e6:	2800      	cmp	r0, #0
   878e8:	f040 825f 	bne.w	87daa <_svfprintf_r+0x186e>
   878ec:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   878f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878f4:	e7e6      	b.n	878c4 <_svfprintf_r+0x1388>
   878f6:	4638      	mov	r0, r7
   878f8:	f7fe fdbe 	bl	86478 <strlen>
   878fc:	462b      	mov	r3, r5
   878fe:	4602      	mov	r2, r0
   87900:	9509      	str	r5, [sp, #36]	; 0x24
   87902:	f7ff b894 	b.w	86a2e <_svfprintf_r+0x4f2>
   87906:	9b07      	ldr	r3, [sp, #28]
   87908:	2500      	movs	r5, #0
   8790a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8790e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87910:	f853 4b04 	ldr.w	r4, [r3], #4
   87914:	930e      	str	r3, [sp, #56]	; 0x38
   87916:	bf18      	it	ne
   87918:	b2e4      	uxtbne	r4, r4
   8791a:	f7fe bf1b 	b.w	86754 <_svfprintf_r+0x218>
   8791e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87920:	9b08      	ldr	r3, [sp, #32]
   87922:	f852 4b04 	ldr.w	r4, [r2], #4
   87926:	f413 7f00 	tst.w	r3, #512	; 0x200
   8792a:	f04f 0500 	mov.w	r5, #0
   8792e:	f04f 0301 	mov.w	r3, #1
   87932:	920e      	str	r2, [sp, #56]	; 0x38
   87934:	bf18      	it	ne
   87936:	b2e4      	uxtbne	r4, r4
   87938:	f7fe bf11 	b.w	8675e <_svfprintf_r+0x222>
   8793c:	9b07      	ldr	r3, [sp, #28]
   8793e:	f413 7f00 	tst.w	r3, #512	; 0x200
   87942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87944:	f853 4b04 	ldr.w	r4, [r3], #4
   87948:	bf18      	it	ne
   8794a:	b264      	sxtbne	r4, r4
   8794c:	17e5      	asrs	r5, r4, #31
   8794e:	930e      	str	r3, [sp, #56]	; 0x38
   87950:	4622      	mov	r2, r4
   87952:	462b      	mov	r3, r5
   87954:	f7fe bed4 	b.w	86700 <_svfprintf_r+0x1c4>
   87958:	9b07      	ldr	r3, [sp, #28]
   8795a:	2500      	movs	r5, #0
   8795c:	f413 7f00 	tst.w	r3, #512	; 0x200
   87960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87962:	f853 4b04 	ldr.w	r4, [r3], #4
   87966:	930e      	str	r3, [sp, #56]	; 0x38
   87968:	bf18      	it	ne
   8796a:	b2e4      	uxtbne	r4, r4
   8796c:	e5a6      	b.n	874bc <_svfprintf_r+0xf80>
   8796e:	4b50      	ldr	r3, [pc, #320]	; (87ab0 <_svfprintf_r+0x1574>)
   87970:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87972:	930f      	str	r3, [sp, #60]	; 0x3c
   87974:	f7ff ba15 	b.w	86da2 <_svfprintf_r+0x866>
   87978:	232d      	movs	r3, #45	; 0x2d
   8797a:	461a      	mov	r2, r3
   8797c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87980:	f7fe bfee 	b.w	86960 <_svfprintf_r+0x424>
   87984:	464a      	mov	r2, r9
   87986:	46d1      	mov	r9, sl
   87988:	4692      	mov	sl, r2
   8798a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8798c:	3301      	adds	r3, #1
   8798e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87990:	442c      	add	r4, r5
   87992:	2b07      	cmp	r3, #7
   87994:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87998:	e9c8 2500 	strd	r2, r5, [r8]
   8799c:	dc3b      	bgt.n	87a16 <_svfprintf_r+0x14da>
   8799e:	f108 0808 	add.w	r8, r8, #8
   879a2:	f7ff bb8c 	b.w	870be <_svfprintf_r+0xb82>
   879a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   879a8:	991c      	ldr	r1, [sp, #112]	; 0x70
   879aa:	1aff      	subs	r7, r7, r3
   879ac:	461a      	mov	r2, r3
   879ae:	4638      	mov	r0, r7
   879b0:	f7fe fd90 	bl	864d4 <strncpy>
   879b4:	f898 3001 	ldrb.w	r3, [r8, #1]
   879b8:	b10b      	cbz	r3, 879be <_svfprintf_r+0x1482>
   879ba:	f108 0801 	add.w	r8, r8, #1
   879be:	220a      	movs	r2, #10
   879c0:	2300      	movs	r3, #0
   879c2:	4620      	mov	r0, r4
   879c4:	4629      	mov	r1, r5
   879c6:	f7fe f9e3 	bl	85d90 <__aeabi_uldivmod>
   879ca:	f04f 0b00 	mov.w	fp, #0
   879ce:	e6a6      	b.n	8771e <_svfprintf_r+0x11e2>
   879d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   879d2:	18bd      	adds	r5, r7, r2
   879d4:	1bad      	subs	r5, r5, r6
   879d6:	1ad3      	subs	r3, r2, r3
   879d8:	429d      	cmp	r5, r3
   879da:	bfa8      	it	ge
   879dc:	461d      	movge	r5, r3
   879de:	f7ff bba0 	b.w	87122 <_svfprintf_r+0xbe6>
   879e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   879e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   879e6:	f853 2b04 	ldr.w	r2, [r3], #4
   879ea:	465f      	mov	r7, fp
   879ec:	8011      	strh	r1, [r2, #0]
   879ee:	930e      	str	r3, [sp, #56]	; 0x38
   879f0:	f7fe bf72 	b.w	868d8 <_svfprintf_r+0x39c>
   879f4:	4651      	mov	r1, sl
   879f6:	4648      	mov	r0, r9
   879f8:	aa2a      	add	r2, sp, #168	; 0xa8
   879fa:	f004 f989 	bl	8bd10 <__ssprint_r>
   879fe:	2800      	cmp	r0, #0
   87a00:	f47f a9e4 	bne.w	86dcc <_svfprintf_r+0x890>
   87a04:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87a08:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87a0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a0e:	e747      	b.n	878a0 <_svfprintf_r+0x1364>
   87a10:	2306      	movs	r3, #6
   87a12:	9309      	str	r3, [sp, #36]	; 0x24
   87a14:	e482      	b.n	8731c <_svfprintf_r+0xde0>
   87a16:	4651      	mov	r1, sl
   87a18:	4648      	mov	r0, r9
   87a1a:	aa2a      	add	r2, sp, #168	; 0xa8
   87a1c:	f004 f978 	bl	8bd10 <__ssprint_r>
   87a20:	2800      	cmp	r0, #0
   87a22:	f47f a9d3 	bne.w	86dcc <_svfprintf_r+0x890>
   87a26:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87a28:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a2c:	f7ff bb47 	b.w	870be <_svfprintf_r+0xb82>
   87a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87a32:	971a      	str	r7, [sp, #104]	; 0x68
   87a34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87a36:	4690      	mov	r8, r2
   87a38:	18fb      	adds	r3, r7, r3
   87a3a:	429e      	cmp	r6, r3
   87a3c:	4632      	mov	r2, r6
   87a3e:	bf28      	it	cs
   87a40:	461a      	movcs	r2, r3
   87a42:	4604      	mov	r4, r0
   87a44:	4616      	mov	r6, r2
   87a46:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87a4a:	f7ff bb3f 	b.w	870cc <_svfprintf_r+0xb90>
   87a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a50:	1cd8      	adds	r0, r3, #3
   87a52:	9310      	str	r3, [sp, #64]	; 0x40
   87a54:	db02      	blt.n	87a5c <_svfprintf_r+0x1520>
   87a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87a58:	4293      	cmp	r3, r2
   87a5a:	dd04      	ble.n	87a66 <_svfprintf_r+0x152a>
   87a5c:	3e02      	subs	r6, #2
   87a5e:	f026 0320 	bic.w	r3, r6, #32
   87a62:	9308      	str	r3, [sp, #32]
   87a64:	e49b      	b.n	8739e <_svfprintf_r+0xe62>
   87a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87a68:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87a6a:	428b      	cmp	r3, r1
   87a6c:	f2c0 817a 	blt.w	87d64 <_svfprintf_r+0x1828>
   87a70:	07ea      	lsls	r2, r5, #31
   87a72:	f140 8283 	bpl.w	87f7c <_svfprintf_r+0x1a40>
   87a76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87a78:	4413      	add	r3, r2
   87a7a:	930c      	str	r3, [sp, #48]	; 0x30
   87a7c:	056e      	lsls	r6, r5, #21
   87a7e:	f140 8277 	bpl.w	87f70 <_svfprintf_r+0x1a34>
   87a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87a84:	2b00      	cmp	r3, #0
   87a86:	f300 8210 	bgt.w	87eaa <_svfprintf_r+0x196e>
   87a8a:	2667      	movs	r6, #103	; 0x67
   87a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87a92:	9308      	str	r3, [sp, #32]
   87a94:	2300      	movs	r3, #0
   87a96:	9312      	str	r3, [sp, #72]	; 0x48
   87a98:	9316      	str	r3, [sp, #88]	; 0x58
   87a9a:	e4e4      	b.n	87466 <_svfprintf_r+0xf2a>
   87a9c:	222d      	movs	r2, #45	; 0x2d
   87a9e:	2300      	movs	r3, #0
   87aa0:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87aa4:	9309      	str	r3, [sp, #36]	; 0x24
   87aa6:	f7fe bf70 	b.w	8698a <_svfprintf_r+0x44e>
   87aaa:	bf00      	nop
   87aac:	0008ce10 	.word	0x0008ce10
   87ab0:	0008ce24 	.word	0x0008ce24
   87ab4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87ab6:	42a3      	cmp	r3, r4
   87ab8:	f4bf ac65 	bcs.w	87386 <_svfprintf_r+0xe4a>
   87abc:	2130      	movs	r1, #48	; 0x30
   87abe:	1c5a      	adds	r2, r3, #1
   87ac0:	9228      	str	r2, [sp, #160]	; 0xa0
   87ac2:	7019      	strb	r1, [r3, #0]
   87ac4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87ac6:	429c      	cmp	r4, r3
   87ac8:	d8f9      	bhi.n	87abe <_svfprintf_r+0x1582>
   87aca:	e45c      	b.n	87386 <_svfprintf_r+0xe4a>
   87acc:	4651      	mov	r1, sl
   87ace:	4648      	mov	r0, r9
   87ad0:	aa2a      	add	r2, sp, #168	; 0xa8
   87ad2:	f004 f91d 	bl	8bd10 <__ssprint_r>
   87ad6:	2800      	cmp	r0, #0
   87ad8:	f47f a978 	bne.w	86dcc <_svfprintf_r+0x890>
   87adc:	783b      	ldrb	r3, [r7, #0]
   87ade:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87ae0:	aa2d      	add	r2, sp, #180	; 0xb4
   87ae2:	441e      	add	r6, r3
   87ae4:	e5a4      	b.n	87630 <_svfprintf_r+0x10f4>
   87ae6:	4651      	mov	r1, sl
   87ae8:	4648      	mov	r0, r9
   87aea:	aa2a      	add	r2, sp, #168	; 0xa8
   87aec:	f004 f910 	bl	8bd10 <__ssprint_r>
   87af0:	2800      	cmp	r0, #0
   87af2:	f47f a96b 	bne.w	86dcc <_svfprintf_r+0x890>
   87af6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87af8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87afc:	f7ff bad7 	b.w	870ae <_svfprintf_r+0xb72>
   87b00:	4651      	mov	r1, sl
   87b02:	4648      	mov	r0, r9
   87b04:	aa2a      	add	r2, sp, #168	; 0xa8
   87b06:	f004 f903 	bl	8bd10 <__ssprint_r>
   87b0a:	2800      	cmp	r0, #0
   87b0c:	f47f a95e 	bne.w	86dcc <_svfprintf_r+0x890>
   87b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b12:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b14:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b18:	f7ff baee 	b.w	870f8 <_svfprintf_r+0xbbc>
   87b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87b1e:	a928      	add	r1, sp, #160	; 0xa0
   87b20:	e9cd 0400 	strd	r0, r4, [sp]
   87b24:	9104      	str	r1, [sp, #16]
   87b26:	a825      	add	r0, sp, #148	; 0x94
   87b28:	a924      	add	r1, sp, #144	; 0x90
   87b2a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87b2e:	4648      	mov	r0, r9
   87b30:	f001 faca 	bl	890c8 <_dtoa_r>
   87b34:	2d47      	cmp	r5, #71	; 0x47
   87b36:	4607      	mov	r7, r0
   87b38:	d119      	bne.n	87b6e <_svfprintf_r+0x1632>
   87b3a:	9d07      	ldr	r5, [sp, #28]
   87b3c:	462b      	mov	r3, r5
   87b3e:	07db      	lsls	r3, r3, #31
   87b40:	f100 812a 	bmi.w	87d98 <_svfprintf_r+0x185c>
   87b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87b48:	9207      	str	r2, [sp, #28]
   87b4a:	2247      	movs	r2, #71	; 0x47
   87b4c:	9208      	str	r2, [sp, #32]
   87b4e:	e41a      	b.n	87386 <_svfprintf_r+0xe4a>
   87b50:	2003      	movs	r0, #3
   87b52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87b54:	a928      	add	r1, sp, #160	; 0xa0
   87b56:	e9cd 0400 	strd	r0, r4, [sp]
   87b5a:	9104      	str	r1, [sp, #16]
   87b5c:	a825      	add	r0, sp, #148	; 0x94
   87b5e:	a924      	add	r1, sp, #144	; 0x90
   87b60:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87b66:	4648      	mov	r0, r9
   87b68:	f001 faae 	bl	890c8 <_dtoa_r>
   87b6c:	4607      	mov	r7, r0
   87b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87b70:	2d46      	cmp	r5, #70	; 0x46
   87b72:	eb07 0403 	add.w	r4, r7, r3
   87b76:	f47f abf9 	bne.w	8736c <_svfprintf_r+0xe30>
   87b7a:	783b      	ldrb	r3, [r7, #0]
   87b7c:	2b30      	cmp	r3, #48	; 0x30
   87b7e:	f000 821c 	beq.w	87fba <_svfprintf_r+0x1a7e>
   87b82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b86:	9d07      	ldr	r5, [sp, #28]
   87b88:	441c      	add	r4, r3
   87b8a:	9207      	str	r2, [sp, #28]
   87b8c:	f7ff bbf1 	b.w	87372 <_svfprintf_r+0xe36>
   87b90:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87b94:	f7ff b9c3 	b.w	86f1e <_svfprintf_r+0x9e2>
   87b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87b9a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87b9e:	9308      	str	r3, [sp, #32]
   87ba0:	930c      	str	r3, [sp, #48]	; 0x30
   87ba2:	9009      	str	r0, [sp, #36]	; 0x24
   87ba4:	940e      	str	r4, [sp, #56]	; 0x38
   87ba6:	9012      	str	r0, [sp, #72]	; 0x48
   87ba8:	9016      	str	r0, [sp, #88]	; 0x58
   87baa:	9010      	str	r0, [sp, #64]	; 0x40
   87bac:	f7fe beea 	b.w	86984 <_svfprintf_r+0x448>
   87bb0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87bb2:	2a00      	cmp	r2, #0
   87bb4:	9210      	str	r2, [sp, #64]	; 0x40
   87bb6:	f340 821b 	ble.w	87ff0 <_svfprintf_r+0x1ab4>
   87bba:	9909      	ldr	r1, [sp, #36]	; 0x24
   87bbc:	f005 0301 	and.w	r3, r5, #1
   87bc0:	430b      	orrs	r3, r1
   87bc2:	f040 819a 	bne.w	87efa <_svfprintf_r+0x19be>
   87bc6:	2666      	movs	r6, #102	; 0x66
   87bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87bca:	930c      	str	r3, [sp, #48]	; 0x30
   87bcc:	056a      	lsls	r2, r5, #21
   87bce:	f100 816d 	bmi.w	87eac <_svfprintf_r+0x1970>
   87bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87bd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87bd8:	9308      	str	r3, [sp, #32]
   87bda:	e75b      	b.n	87a94 <_svfprintf_r+0x1558>
   87bdc:	4651      	mov	r1, sl
   87bde:	4648      	mov	r0, r9
   87be0:	aa2a      	add	r2, sp, #168	; 0xa8
   87be2:	f004 f895 	bl	8bd10 <__ssprint_r>
   87be6:	2800      	cmp	r0, #0
   87be8:	f47f a8f0 	bne.w	86dcc <_svfprintf_r+0x890>
   87bec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87bee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87bf0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87bf2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87bf6:	1ad3      	subs	r3, r2, r3
   87bf8:	f7ff ba93 	b.w	87122 <_svfprintf_r+0xbe6>
   87bfc:	2330      	movs	r3, #48	; 0x30
   87bfe:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c02:	2358      	movs	r3, #88	; 0x58
   87c04:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87c08:	9b07      	ldr	r3, [sp, #28]
   87c0a:	f043 0402 	orr.w	r4, r3, #2
   87c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c10:	2b63      	cmp	r3, #99	; 0x63
   87c12:	f300 80f2 	bgt.w	87dfa <_svfprintf_r+0x18be>
   87c16:	2300      	movs	r3, #0
   87c18:	af3d      	add	r7, sp, #244	; 0xf4
   87c1a:	930d      	str	r3, [sp, #52]	; 0x34
   87c1c:	9b07      	ldr	r3, [sp, #28]
   87c1e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87c22:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87c26:	9312      	str	r3, [sp, #72]	; 0x48
   87c28:	4613      	mov	r3, r2
   87c2a:	2b00      	cmp	r3, #0
   87c2c:	f026 0520 	bic.w	r5, r6, #32
   87c30:	9407      	str	r4, [sp, #28]
   87c32:	f2c0 808d 	blt.w	87d50 <_svfprintf_r+0x1814>
   87c36:	930f      	str	r3, [sp, #60]	; 0x3c
   87c38:	2300      	movs	r3, #0
   87c3a:	9508      	str	r5, [sp, #32]
   87c3c:	910c      	str	r1, [sp, #48]	; 0x30
   87c3e:	931e      	str	r3, [sp, #120]	; 0x78
   87c40:	2e61      	cmp	r6, #97	; 0x61
   87c42:	f000 817d 	beq.w	87f40 <_svfprintf_r+0x1a04>
   87c46:	2e41      	cmp	r6, #65	; 0x41
   87c48:	f47f ab77 	bne.w	8733a <_svfprintf_r+0xdfe>
   87c4c:	aa24      	add	r2, sp, #144	; 0x90
   87c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87c50:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87c52:	f003 ffcd 	bl	8bbf0 <frexp>
   87c56:	2200      	movs	r2, #0
   87c58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87c5c:	f004 fcf2 	bl	8c644 <__aeabi_dmul>
   87c60:	4604      	mov	r4, r0
   87c62:	460d      	mov	r5, r1
   87c64:	2200      	movs	r2, #0
   87c66:	2300      	movs	r3, #0
   87c68:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87c6c:	f004 ff52 	bl	8cb14 <__aeabi_dcmpeq>
   87c70:	b108      	cbz	r0, 87c76 <_svfprintf_r+0x173a>
   87c72:	2301      	movs	r3, #1
   87c74:	9324      	str	r3, [sp, #144]	; 0x90
   87c76:	4bae      	ldr	r3, [pc, #696]	; (87f30 <_svfprintf_r+0x19f4>)
   87c78:	930c      	str	r3, [sp, #48]	; 0x30
   87c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c7c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87c80:	3b01      	subs	r3, #1
   87c82:	9613      	str	r6, [sp, #76]	; 0x4c
   87c84:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   87c88:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   87c8c:	9721      	str	r7, [sp, #132]	; 0x84
   87c8e:	46ba      	mov	sl, r7
   87c90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87c94:	4699      	mov	r9, r3
   87c96:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87c9a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   87c9e:	e006      	b.n	87cae <_svfprintf_r+0x1772>
   87ca0:	2200      	movs	r2, #0
   87ca2:	2300      	movs	r3, #0
   87ca4:	f004 ff36 	bl	8cb14 <__aeabi_dcmpeq>
   87ca8:	f109 39ff 	add.w	r9, r9, #4294967295
   87cac:	b9e8      	cbnz	r0, 87cea <_svfprintf_r+0x17ae>
   87cae:	2200      	movs	r2, #0
   87cb0:	4ba0      	ldr	r3, [pc, #640]	; (87f34 <_svfprintf_r+0x19f8>)
   87cb2:	4630      	mov	r0, r6
   87cb4:	4639      	mov	r1, r7
   87cb6:	f004 fcc5 	bl	8c644 <__aeabi_dmul>
   87cba:	460d      	mov	r5, r1
   87cbc:	4604      	mov	r4, r0
   87cbe:	f004 ff71 	bl	8cba4 <__aeabi_d2iz>
   87cc2:	4680      	mov	r8, r0
   87cc4:	f004 fc54 	bl	8c570 <__aeabi_i2d>
   87cc8:	460b      	mov	r3, r1
   87cca:	4602      	mov	r2, r0
   87ccc:	4629      	mov	r1, r5
   87cce:	4620      	mov	r0, r4
   87cd0:	f004 fb00 	bl	8c2d4 <__aeabi_dsub>
   87cd4:	f81b 3008 	ldrb.w	r3, [fp, r8]
   87cd8:	f1b9 3fff 	cmp.w	r9, #4294967295
   87cdc:	4655      	mov	r5, sl
   87cde:	4606      	mov	r6, r0
   87ce0:	460f      	mov	r7, r1
   87ce2:	464c      	mov	r4, r9
   87ce4:	f80a 3b01 	strb.w	r3, [sl], #1
   87ce8:	d1da      	bne.n	87ca0 <_svfprintf_r+0x1764>
   87cea:	4630      	mov	r0, r6
   87cec:	4639      	mov	r1, r7
   87cee:	2200      	movs	r2, #0
   87cf0:	4b91      	ldr	r3, [pc, #580]	; (87f38 <_svfprintf_r+0x19fc>)
   87cf2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   87cf6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87cf8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   87cfc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   87d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87d04:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   87d08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87d0c:	9f21      	ldr	r7, [sp, #132]	; 0x84
   87d0e:	f004 ff29 	bl	8cb64 <__aeabi_dcmpgt>
   87d12:	2800      	cmp	r0, #0
   87d14:	d155      	bne.n	87dc2 <_svfprintf_r+0x1886>
   87d16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87d1a:	2200      	movs	r2, #0
   87d1c:	4b86      	ldr	r3, [pc, #536]	; (87f38 <_svfprintf_r+0x19fc>)
   87d1e:	f004 fef9 	bl	8cb14 <__aeabi_dcmpeq>
   87d22:	b110      	cbz	r0, 87d2a <_svfprintf_r+0x17ee>
   87d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87d26:	07db      	lsls	r3, r3, #31
   87d28:	d44b      	bmi.n	87dc2 <_svfprintf_r+0x1886>
   87d2a:	2c00      	cmp	r4, #0
   87d2c:	db08      	blt.n	87d40 <_svfprintf_r+0x1804>
   87d2e:	2230      	movs	r2, #48	; 0x30
   87d30:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87d32:	1c63      	adds	r3, r4, #1
   87d34:	440b      	add	r3, r1
   87d36:	f801 2b01 	strb.w	r2, [r1], #1
   87d3a:	428b      	cmp	r3, r1
   87d3c:	d1fb      	bne.n	87d36 <_svfprintf_r+0x17fa>
   87d3e:	910f      	str	r1, [sp, #60]	; 0x3c
   87d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87d42:	9d07      	ldr	r5, [sp, #28]
   87d44:	1bdb      	subs	r3, r3, r7
   87d46:	9313      	str	r3, [sp, #76]	; 0x4c
   87d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d4a:	9307      	str	r3, [sp, #28]
   87d4c:	f7ff bb1d 	b.w	8738a <_svfprintf_r+0xe4e>
   87d50:	9508      	str	r5, [sp, #32]
   87d52:	232d      	movs	r3, #45	; 0x2d
   87d54:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87d58:	931e      	str	r3, [sp, #120]	; 0x78
   87d5a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   87d5e:	910c      	str	r1, [sp, #48]	; 0x30
   87d60:	930f      	str	r3, [sp, #60]	; 0x3c
   87d62:	e76d      	b.n	87c40 <_svfprintf_r+0x1704>
   87d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87d68:	189a      	adds	r2, r3, r2
   87d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d6c:	920c      	str	r2, [sp, #48]	; 0x30
   87d6e:	2b00      	cmp	r3, #0
   87d70:	f340 811a 	ble.w	87fa8 <_svfprintf_r+0x1a6c>
   87d74:	2667      	movs	r6, #103	; 0x67
   87d76:	e729      	b.n	87bcc <_svfprintf_r+0x1690>
   87d78:	2300      	movs	r3, #0
   87d7a:	9309      	str	r3, [sp, #36]	; 0x24
   87d7c:	f7fe bc2b 	b.w	865d6 <_svfprintf_r+0x9a>
   87d80:	4648      	mov	r0, r9
   87d82:	4651      	mov	r1, sl
   87d84:	aa2a      	add	r2, sp, #168	; 0xa8
   87d86:	f003 ffc3 	bl	8bd10 <__ssprint_r>
   87d8a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87d8e:	f7fe bdae 	b.w	868ee <_svfprintf_r+0x3b2>
   87d92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d94:	f7ff b95f 	b.w	87056 <_svfprintf_r+0xb1a>
   87d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87d9a:	9d07      	ldr	r5, [sp, #28]
   87d9c:	18fc      	adds	r4, r7, r3
   87d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87da0:	9307      	str	r3, [sp, #28]
   87da2:	2347      	movs	r3, #71	; 0x47
   87da4:	9308      	str	r3, [sp, #32]
   87da6:	f7ff bae4 	b.w	87372 <_svfprintf_r+0xe36>
   87daa:	46cb      	mov	fp, r9
   87dac:	46d1      	mov	r9, sl
   87dae:	f7ff b80e 	b.w	86dce <_svfprintf_r+0x892>
   87db2:	46d1      	mov	r9, sl
   87db4:	f7ff b80b 	b.w	86dce <_svfprintf_r+0x892>
   87db8:	4b60      	ldr	r3, [pc, #384]	; (87f3c <_svfprintf_r+0x1a00>)
   87dba:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87dbc:	930f      	str	r3, [sp, #60]	; 0x3c
   87dbe:	f7fe bfb7 	b.w	86d30 <_svfprintf_r+0x7f4>
   87dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   87dc6:	9528      	str	r5, [sp, #160]	; 0xa0
   87dc8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87dcc:	7bc9      	ldrb	r1, [r1, #15]
   87dce:	428a      	cmp	r2, r1
   87dd0:	f040 812a 	bne.w	88028 <_svfprintf_r+0x1aec>
   87dd4:	2030      	movs	r0, #48	; 0x30
   87dd6:	f803 0c01 	strb.w	r0, [r3, #-1]
   87dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87ddc:	1e5a      	subs	r2, r3, #1
   87dde:	9228      	str	r2, [sp, #160]	; 0xa0
   87de0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   87de4:	4291      	cmp	r1, r2
   87de6:	d0f6      	beq.n	87dd6 <_svfprintf_r+0x189a>
   87de8:	2a39      	cmp	r2, #57	; 0x39
   87dea:	bf0b      	itete	eq
   87dec:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   87dee:	3201      	addne	r2, #1
   87df0:	7a92      	ldrbeq	r2, [r2, #10]
   87df2:	b2d2      	uxtbne	r2, r2
   87df4:	f803 2c01 	strb.w	r2, [r3, #-1]
   87df8:	e7a2      	b.n	87d40 <_svfprintf_r+0x1804>
   87dfa:	4648      	mov	r0, r9
   87dfc:	1c59      	adds	r1, r3, #1
   87dfe:	f002 fe11 	bl	8aa24 <_malloc_r>
   87e02:	4607      	mov	r7, r0
   87e04:	2800      	cmp	r0, #0
   87e06:	f000 811d 	beq.w	88044 <_svfprintf_r+0x1b08>
   87e0a:	900d      	str	r0, [sp, #52]	; 0x34
   87e0c:	e706      	b.n	87c1c <_svfprintf_r+0x16e0>
   87e0e:	2330      	movs	r3, #48	; 0x30
   87e10:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87e14:	2378      	movs	r3, #120	; 0x78
   87e16:	e6f5      	b.n	87c04 <_svfprintf_r+0x16c8>
   87e18:	9b07      	ldr	r3, [sp, #28]
   87e1a:	9308      	str	r3, [sp, #32]
   87e1c:	f7ff b894 	b.w	86f48 <_svfprintf_r+0xa0c>
   87e20:	464a      	mov	r2, r9
   87e22:	46d1      	mov	r9, sl
   87e24:	4692      	mov	sl, r2
   87e26:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87e28:	3301      	adds	r3, #1
   87e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87e2c:	442c      	add	r4, r5
   87e2e:	2b07      	cmp	r3, #7
   87e30:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e34:	e9c8 2500 	strd	r2, r5, [r8]
   87e38:	f77f a8b8 	ble.w	86fac <_svfprintf_r+0xa70>
   87e3c:	4651      	mov	r1, sl
   87e3e:	4648      	mov	r0, r9
   87e40:	aa2a      	add	r2, sp, #168	; 0xa8
   87e42:	f003 ff65 	bl	8bd10 <__ssprint_r>
   87e46:	2800      	cmp	r0, #0
   87e48:	f47e afc0 	bne.w	86dcc <_svfprintf_r+0x890>
   87e4c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87e50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e54:	f7ff b8ac 	b.w	86fb0 <_svfprintf_r+0xa74>
   87e58:	2b00      	cmp	r3, #0
   87e5a:	bf08      	it	eq
   87e5c:	2301      	moveq	r3, #1
   87e5e:	9309      	str	r3, [sp, #36]	; 0x24
   87e60:	9b07      	ldr	r3, [sp, #28]
   87e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87e66:	9312      	str	r3, [sp, #72]	; 0x48
   87e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87e6a:	2b00      	cmp	r3, #0
   87e6c:	930c      	str	r3, [sp, #48]	; 0x30
   87e6e:	f2c0 80bd 	blt.w	87fec <_svfprintf_r+0x1ab0>
   87e72:	2402      	movs	r4, #2
   87e74:	9d09      	ldr	r5, [sp, #36]	; 0x24
   87e76:	a828      	add	r0, sp, #160	; 0xa0
   87e78:	aa25      	add	r2, sp, #148	; 0x94
   87e7a:	ab24      	add	r3, sp, #144	; 0x90
   87e7c:	e9cd 2003 	strd	r2, r0, [sp, #12]
   87e80:	e9cd 4500 	strd	r4, r5, [sp]
   87e84:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   87e88:	9302      	str	r3, [sp, #8]
   87e8a:	4622      	mov	r2, r4
   87e8c:	462b      	mov	r3, r5
   87e8e:	4648      	mov	r0, r9
   87e90:	911e      	str	r1, [sp, #120]	; 0x78
   87e92:	f001 f919 	bl	890c8 <_dtoa_r>
   87e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87e98:	4607      	mov	r7, r0
   87e9a:	930f      	str	r3, [sp, #60]	; 0x3c
   87e9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87e9e:	940c      	str	r4, [sp, #48]	; 0x30
   87ea0:	930d      	str	r3, [sp, #52]	; 0x34
   87ea2:	e64a      	b.n	87b3a <_svfprintf_r+0x15fe>
   87ea4:	2300      	movs	r3, #0
   87ea6:	930d      	str	r3, [sp, #52]	; 0x34
   87ea8:	e753      	b.n	87d52 <_svfprintf_r+0x1816>
   87eaa:	2667      	movs	r6, #103	; 0x67
   87eac:	991a      	ldr	r1, [sp, #104]	; 0x68
   87eae:	780b      	ldrb	r3, [r1, #0]
   87eb0:	2bff      	cmp	r3, #255	; 0xff
   87eb2:	f000 80de 	beq.w	88072 <_svfprintf_r+0x1b36>
   87eb6:	2400      	movs	r4, #0
   87eb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87eba:	4620      	mov	r0, r4
   87ebc:	e003      	b.n	87ec6 <_svfprintf_r+0x198a>
   87ebe:	3001      	adds	r0, #1
   87ec0:	3101      	adds	r1, #1
   87ec2:	2bff      	cmp	r3, #255	; 0xff
   87ec4:	d008      	beq.n	87ed8 <_svfprintf_r+0x199c>
   87ec6:	4293      	cmp	r3, r2
   87ec8:	da06      	bge.n	87ed8 <_svfprintf_r+0x199c>
   87eca:	1ad2      	subs	r2, r2, r3
   87ecc:	784b      	ldrb	r3, [r1, #1]
   87ece:	2b00      	cmp	r3, #0
   87ed0:	d1f5      	bne.n	87ebe <_svfprintf_r+0x1982>
   87ed2:	780b      	ldrb	r3, [r1, #0]
   87ed4:	3401      	adds	r4, #1
   87ed6:	e7f4      	b.n	87ec2 <_svfprintf_r+0x1986>
   87ed8:	911a      	str	r1, [sp, #104]	; 0x68
   87eda:	9210      	str	r2, [sp, #64]	; 0x40
   87edc:	9016      	str	r0, [sp, #88]	; 0x58
   87ede:	9412      	str	r4, [sp, #72]	; 0x48
   87ee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87ee2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87ee4:	990c      	ldr	r1, [sp, #48]	; 0x30
   87ee6:	4413      	add	r3, r2
   87ee8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   87eea:	fb02 1303 	mla	r3, r2, r3, r1
   87eee:	930c      	str	r3, [sp, #48]	; 0x30
   87ef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87ef4:	9308      	str	r3, [sp, #32]
   87ef6:	f7ff bab6 	b.w	87466 <_svfprintf_r+0xf2a>
   87efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87efc:	2666      	movs	r6, #102	; 0x66
   87efe:	18d3      	adds	r3, r2, r3
   87f00:	4419      	add	r1, r3
   87f02:	910c      	str	r1, [sp, #48]	; 0x30
   87f04:	e662      	b.n	87bcc <_svfprintf_r+0x1690>
   87f06:	f106 020f 	add.w	r2, r6, #15
   87f0a:	2101      	movs	r1, #1
   87f0c:	b2d2      	uxtb	r2, r2
   87f0e:	f7ff ba4f 	b.w	873b0 <_svfprintf_r+0xe74>
   87f12:	2900      	cmp	r1, #0
   87f14:	d167      	bne.n	87fe6 <_svfprintf_r+0x1aaa>
   87f16:	2230      	movs	r2, #48	; 0x30
   87f18:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   87f1c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   87f20:	3330      	adds	r3, #48	; 0x30
   87f22:	f802 3b01 	strb.w	r3, [r2], #1
   87f26:	ab26      	add	r3, sp, #152	; 0x98
   87f28:	1ad3      	subs	r3, r2, r3
   87f2a:	931b      	str	r3, [sp, #108]	; 0x6c
   87f2c:	f7ff ba83 	b.w	87436 <_svfprintf_r+0xefa>
   87f30:	0008cdf4 	.word	0x0008cdf4
   87f34:	40300000 	.word	0x40300000
   87f38:	3fe00000 	.word	0x3fe00000
   87f3c:	0008ce24 	.word	0x0008ce24
   87f40:	aa24      	add	r2, sp, #144	; 0x90
   87f42:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87f46:	f003 fe53 	bl	8bbf0 <frexp>
   87f4a:	2200      	movs	r2, #0
   87f4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87f50:	f004 fb78 	bl	8c644 <__aeabi_dmul>
   87f54:	4604      	mov	r4, r0
   87f56:	460d      	mov	r5, r1
   87f58:	2200      	movs	r2, #0
   87f5a:	2300      	movs	r3, #0
   87f5c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87f60:	f004 fdd8 	bl	8cb14 <__aeabi_dcmpeq>
   87f64:	b108      	cbz	r0, 87f6a <_svfprintf_r+0x1a2e>
   87f66:	2301      	movs	r3, #1
   87f68:	9324      	str	r3, [sp, #144]	; 0x90
   87f6a:	4b44      	ldr	r3, [pc, #272]	; (8807c <_svfprintf_r+0x1b40>)
   87f6c:	930c      	str	r3, [sp, #48]	; 0x30
   87f6e:	e684      	b.n	87c7a <_svfprintf_r+0x173e>
   87f70:	2667      	movs	r6, #103	; 0x67
   87f72:	e62e      	b.n	87bd2 <_svfprintf_r+0x1696>
   87f74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   87f78:	f7fe bcb9 	b.w	868ee <_svfprintf_r+0x3b2>
   87f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f7e:	930c      	str	r3, [sp, #48]	; 0x30
   87f80:	e57c      	b.n	87a7c <_svfprintf_r+0x1540>
   87f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87f84:	2003      	movs	r0, #3
   87f86:	2b00      	cmp	r3, #0
   87f88:	bfb8      	it	lt
   87f8a:	232d      	movlt	r3, #45	; 0x2d
   87f8c:	f04f 0100 	mov.w	r1, #0
   87f90:	bfba      	itte	lt
   87f92:	461a      	movlt	r2, r3
   87f94:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   87f98:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   87f9c:	4f38      	ldr	r7, [pc, #224]	; (88080 <_svfprintf_r+0x1b44>)
   87f9e:	4b39      	ldr	r3, [pc, #228]	; (88084 <_svfprintf_r+0x1b48>)
   87fa0:	9008      	str	r0, [sp, #32]
   87fa2:	910d      	str	r1, [sp, #52]	; 0x34
   87fa4:	f7fe bce2 	b.w	8696c <_svfprintf_r+0x430>
   87fa8:	f1c3 0301 	rsb	r3, r3, #1
   87fac:	441a      	add	r2, r3
   87fae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87fb2:	2667      	movs	r6, #103	; 0x67
   87fb4:	920c      	str	r2, [sp, #48]	; 0x30
   87fb6:	9308      	str	r3, [sp, #32]
   87fb8:	e56c      	b.n	87a94 <_svfprintf_r+0x1558>
   87fba:	2200      	movs	r2, #0
   87fbc:	2300      	movs	r3, #0
   87fbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87fc2:	f004 fda7 	bl	8cb14 <__aeabi_dcmpeq>
   87fc6:	2800      	cmp	r0, #0
   87fc8:	f47f addb 	bne.w	87b82 <_svfprintf_r+0x1646>
   87fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87fce:	f1c3 0301 	rsb	r3, r3, #1
   87fd2:	9324      	str	r3, [sp, #144]	; 0x90
   87fd4:	e5d6      	b.n	87b84 <_svfprintf_r+0x1648>
   87fd6:	992b      	ldr	r1, [sp, #172]	; 0xac
   87fd8:	f7ff bb59 	b.w	8768e <_svfprintf_r+0x1152>
   87fdc:	07e9      	lsls	r1, r5, #31
   87fde:	f57f aa35 	bpl.w	8744c <_svfprintf_r+0xf10>
   87fe2:	f7ff ba2f 	b.w	87444 <_svfprintf_r+0xf08>
   87fe6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87fea:	e799      	b.n	87f20 <_svfprintf_r+0x19e4>
   87fec:	900d      	str	r0, [sp, #52]	; 0x34
   87fee:	e6b0      	b.n	87d52 <_svfprintf_r+0x1816>
   87ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87ff2:	f005 0501 	and.w	r5, r5, #1
   87ff6:	4613      	mov	r3, r2
   87ff8:	432b      	orrs	r3, r5
   87ffa:	d104      	bne.n	88006 <_svfprintf_r+0x1aca>
   87ffc:	2301      	movs	r3, #1
   87ffe:	2666      	movs	r6, #102	; 0x66
   88000:	9308      	str	r3, [sp, #32]
   88002:	930c      	str	r3, [sp, #48]	; 0x30
   88004:	e546      	b.n	87a94 <_svfprintf_r+0x1558>
   88006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88008:	2666      	movs	r6, #102	; 0x66
   8800a:	3301      	adds	r3, #1
   8800c:	441a      	add	r2, r3
   8800e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88012:	920c      	str	r2, [sp, #48]	; 0x30
   88014:	9308      	str	r3, [sp, #32]
   88016:	e53d      	b.n	87a94 <_svfprintf_r+0x1558>
   88018:	4b1b      	ldr	r3, [pc, #108]	; (88088 <_svfprintf_r+0x1b4c>)
   8801a:	930f      	str	r3, [sp, #60]	; 0x3c
   8801c:	f7ff bbe9 	b.w	877f2 <_svfprintf_r+0x12b6>
   88020:	4a19      	ldr	r2, [pc, #100]	; (88088 <_svfprintf_r+0x1b4c>)
   88022:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88024:	920f      	str	r2, [sp, #60]	; 0x3c
   88026:	e4b1      	b.n	8798c <_svfprintf_r+0x1450>
   88028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8802a:	e6dd      	b.n	87de8 <_svfprintf_r+0x18ac>
   8802c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8802e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88032:	f853 0b04 	ldr.w	r0, [r3], #4
   88036:	4693      	mov	fp, r2
   88038:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8803c:	9009      	str	r0, [sp, #36]	; 0x24
   8803e:	930e      	str	r3, [sp, #56]	; 0x38
   88040:	f7fe bac7 	b.w	865d2 <_svfprintf_r+0x96>
   88044:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8804c:	f8aa 300c 	strh.w	r3, [sl, #12]
   88050:	f7fe bc4d 	b.w	868ee <_svfprintf_r+0x3b2>
   88054:	4a0c      	ldr	r2, [pc, #48]	; (88088 <_svfprintf_r+0x1b4c>)
   88056:	920f      	str	r2, [sp, #60]	; 0x3c
   88058:	e6e6      	b.n	87e28 <_svfprintf_r+0x18ec>
   8805a:	230c      	movs	r3, #12
   8805c:	f04f 32ff 	mov.w	r2, #4294967295
   88060:	f8c9 3000 	str.w	r3, [r9]
   88064:	920a      	str	r2, [sp, #40]	; 0x28
   88066:	f7fe bc49 	b.w	868fc <_svfprintf_r+0x3c0>
   8806a:	2302      	movs	r3, #2
   8806c:	931b      	str	r3, [sp, #108]	; 0x6c
   8806e:	f7ff b9e2 	b.w	87436 <_svfprintf_r+0xefa>
   88072:	2300      	movs	r3, #0
   88074:	9312      	str	r3, [sp, #72]	; 0x48
   88076:	9316      	str	r3, [sp, #88]	; 0x58
   88078:	e732      	b.n	87ee0 <_svfprintf_r+0x19a4>
   8807a:	bf00      	nop
   8807c:	0008cde0 	.word	0x0008cde0
   88080:	0008cdd8 	.word	0x0008cdd8
   88084:	0008cddc 	.word	0x0008cddc
   88088:	0008ce24 	.word	0x0008ce24

0008808c <__sprint_r.part.0>:
   8808c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88090:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88092:	4690      	mov	r8, r2
   88094:	049c      	lsls	r4, r3, #18
   88096:	d52d      	bpl.n	880f4 <__sprint_r.part.0+0x68>
   88098:	6893      	ldr	r3, [r2, #8]
   8809a:	6812      	ldr	r2, [r2, #0]
   8809c:	b343      	cbz	r3, 880f0 <__sprint_r.part.0+0x64>
   8809e:	468b      	mov	fp, r1
   880a0:	4606      	mov	r6, r0
   880a2:	f102 0908 	add.w	r9, r2, #8
   880a6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   880aa:	ea5f 079a 	movs.w	r7, sl, lsr #2
   880ae:	d015      	beq.n	880dc <__sprint_r.part.0+0x50>
   880b0:	2400      	movs	r4, #0
   880b2:	3d04      	subs	r5, #4
   880b4:	e001      	b.n	880ba <__sprint_r.part.0+0x2e>
   880b6:	42a7      	cmp	r7, r4
   880b8:	d00e      	beq.n	880d8 <__sprint_r.part.0+0x4c>
   880ba:	465a      	mov	r2, fp
   880bc:	4630      	mov	r0, r6
   880be:	f855 1f04 	ldr.w	r1, [r5, #4]!
   880c2:	f002 f8f9 	bl	8a2b8 <_fputwc_r>
   880c6:	1c43      	adds	r3, r0, #1
   880c8:	f104 0401 	add.w	r4, r4, #1
   880cc:	d1f3      	bne.n	880b6 <__sprint_r.part.0+0x2a>
   880ce:	2300      	movs	r3, #0
   880d0:	e9c8 3301 	strd	r3, r3, [r8, #4]
   880d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   880d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   880dc:	f02a 0a03 	bic.w	sl, sl, #3
   880e0:	eba3 030a 	sub.w	r3, r3, sl
   880e4:	f8c8 3008 	str.w	r3, [r8, #8]
   880e8:	f109 0908 	add.w	r9, r9, #8
   880ec:	2b00      	cmp	r3, #0
   880ee:	d1da      	bne.n	880a6 <__sprint_r.part.0+0x1a>
   880f0:	2000      	movs	r0, #0
   880f2:	e7ec      	b.n	880ce <__sprint_r.part.0+0x42>
   880f4:	f002 fa6a 	bl	8a5cc <__sfvwrite_r>
   880f8:	2300      	movs	r3, #0
   880fa:	e9c8 3301 	strd	r3, r3, [r8, #4]
   880fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88102:	bf00      	nop

00088104 <_vfiprintf_r>:
   88104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88108:	b0bb      	sub	sp, #236	; 0xec
   8810a:	461c      	mov	r4, r3
   8810c:	4689      	mov	r9, r1
   8810e:	4690      	mov	r8, r2
   88110:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88114:	b118      	cbz	r0, 8811e <_vfiprintf_r+0x1a>
   88116:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88118:	2b00      	cmp	r3, #0
   8811a:	f000 827a 	beq.w	88612 <_vfiprintf_r+0x50e>
   8811e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88122:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88126:	07de      	lsls	r6, r3, #31
   88128:	b28a      	uxth	r2, r1
   8812a:	d402      	bmi.n	88132 <_vfiprintf_r+0x2e>
   8812c:	058d      	lsls	r5, r1, #22
   8812e:	f140 851a 	bpl.w	88b66 <_vfiprintf_r+0xa62>
   88132:	0490      	lsls	r0, r2, #18
   88134:	d40a      	bmi.n	8814c <_vfiprintf_r+0x48>
   88136:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8813a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8813e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   88142:	f8a9 200c 	strh.w	r2, [r9, #12]
   88146:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   8814a:	b292      	uxth	r2, r2
   8814c:	0711      	lsls	r1, r2, #28
   8814e:	f140 80f6 	bpl.w	8833e <_vfiprintf_r+0x23a>
   88152:	f8d9 3010 	ldr.w	r3, [r9, #16]
   88156:	2b00      	cmp	r3, #0
   88158:	f000 80f1 	beq.w	8833e <_vfiprintf_r+0x23a>
   8815c:	f002 031a 	and.w	r3, r2, #26
   88160:	2b0a      	cmp	r3, #10
   88162:	f000 80fa 	beq.w	8835a <_vfiprintf_r+0x256>
   88166:	2300      	movs	r3, #0
   88168:	46cb      	mov	fp, r9
   8816a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   8816e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   88172:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   88176:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8817a:	9303      	str	r3, [sp, #12]
   8817c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   88180:	f898 3000 	ldrb.w	r3, [r8]
   88184:	2b00      	cmp	r3, #0
   88186:	f000 81ed 	beq.w	88564 <_vfiprintf_r+0x460>
   8818a:	4644      	mov	r4, r8
   8818c:	e004      	b.n	88198 <_vfiprintf_r+0x94>
   8818e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88192:	2b00      	cmp	r3, #0
   88194:	f000 8127 	beq.w	883e6 <_vfiprintf_r+0x2e2>
   88198:	2b25      	cmp	r3, #37	; 0x25
   8819a:	d1f8      	bne.n	8818e <_vfiprintf_r+0x8a>
   8819c:	ebb4 0508 	subs.w	r5, r4, r8
   881a0:	f040 8125 	bne.w	883ee <_vfiprintf_r+0x2ea>
   881a4:	7823      	ldrb	r3, [r4, #0]
   881a6:	2b00      	cmp	r3, #0
   881a8:	f000 81dc 	beq.w	88564 <_vfiprintf_r+0x460>
   881ac:	f04f 0200 	mov.w	r2, #0
   881b0:	2300      	movs	r3, #0
   881b2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   881b6:	f04f 32ff 	mov.w	r2, #4294967295
   881ba:	252b      	movs	r5, #43	; 0x2b
   881bc:	461f      	mov	r7, r3
   881be:	9302      	str	r3, [sp, #8]
   881c0:	7863      	ldrb	r3, [r4, #1]
   881c2:	f104 0801 	add.w	r8, r4, #1
   881c6:	9200      	str	r2, [sp, #0]
   881c8:	f108 0801 	add.w	r8, r8, #1
   881cc:	f1a3 0220 	sub.w	r2, r3, #32
   881d0:	2a5a      	cmp	r2, #90	; 0x5a
   881d2:	f200 8141 	bhi.w	88458 <_vfiprintf_r+0x354>
   881d6:	e8df f012 	tbh	[pc, r2, lsl #1]
   881da:	0272      	.short	0x0272
   881dc:	013f013f 	.word	0x013f013f
   881e0:	013f026d 	.word	0x013f026d
   881e4:	013f013f 	.word	0x013f013f
   881e8:	013f024b 	.word	0x013f024b
   881ec:	006a013f 	.word	0x006a013f
   881f0:	013f0227 	.word	0x013f0227
   881f4:	02310222 	.word	0x02310222
   881f8:	022c013f 	.word	0x022c013f
   881fc:	005b005b 	.word	0x005b005b
   88200:	005b005b 	.word	0x005b005b
   88204:	005b005b 	.word	0x005b005b
   88208:	005b005b 	.word	0x005b005b
   8820c:	013f005b 	.word	0x013f005b
   88210:	013f013f 	.word	0x013f013f
   88214:	013f013f 	.word	0x013f013f
   88218:	013f013f 	.word	0x013f013f
   8821c:	013f013f 	.word	0x013f013f
   88220:	007a020e 	.word	0x007a020e
   88224:	013f013f 	.word	0x013f013f
   88228:	013f013f 	.word	0x013f013f
   8822c:	013f013f 	.word	0x013f013f
   88230:	013f013f 	.word	0x013f013f
   88234:	013f013f 	.word	0x013f013f
   88238:	013f00d7 	.word	0x013f00d7
   8823c:	013f013f 	.word	0x013f013f
   88240:	013f01f2 	.word	0x013f01f2
   88244:	013f0297 	.word	0x013f0297
   88248:	0500013f 	.word	0x0500013f
   8824c:	013f013f 	.word	0x013f013f
   88250:	013f013f 	.word	0x013f013f
   88254:	013f013f 	.word	0x013f013f
   88258:	013f013f 	.word	0x013f013f
   8825c:	013f013f 	.word	0x013f013f
   88260:	007c020e 	.word	0x007c020e
   88264:	013f013f 	.word	0x013f013f
   88268:	028a013f 	.word	0x028a013f
   8826c:	0075007c 	.word	0x0075007c
   88270:	027d013f 	.word	0x027d013f
   88274:	02b6013f 	.word	0x02b6013f
   88278:	02a600d9 	.word	0x02a600d9
   8827c:	013f0075 	.word	0x013f0075
   88280:	007201f2 	.word	0x007201f2
   88284:	013f04fe 	.word	0x013f04fe
   88288:	051c013f 	.word	0x051c013f
   8828c:	0072013f 	.word	0x0072013f
   88290:	2100      	movs	r1, #0
   88292:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88296:	f818 3b01 	ldrb.w	r3, [r8], #1
   8829a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8829e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   882a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   882a6:	2a09      	cmp	r2, #9
   882a8:	d9f5      	bls.n	88296 <_vfiprintf_r+0x192>
   882aa:	9102      	str	r1, [sp, #8]
   882ac:	e78e      	b.n	881cc <_vfiprintf_r+0xc8>
   882ae:	9b04      	ldr	r3, [sp, #16]
   882b0:	f853 2b04 	ldr.w	r2, [r3], #4
   882b4:	2a00      	cmp	r2, #0
   882b6:	9202      	str	r2, [sp, #8]
   882b8:	9304      	str	r3, [sp, #16]
   882ba:	f2c0 81ad 	blt.w	88618 <_vfiprintf_r+0x514>
   882be:	f898 3000 	ldrb.w	r3, [r8]
   882c2:	e781      	b.n	881c8 <_vfiprintf_r+0xc4>
   882c4:	f898 3000 	ldrb.w	r3, [r8]
   882c8:	f047 0720 	orr.w	r7, r7, #32
   882cc:	e77c      	b.n	881c8 <_vfiprintf_r+0xc4>
   882ce:	f047 0710 	orr.w	r7, r7, #16
   882d2:	06bc      	lsls	r4, r7, #26
   882d4:	f140 8158 	bpl.w	88588 <_vfiprintf_r+0x484>
   882d8:	9c04      	ldr	r4, [sp, #16]
   882da:	3407      	adds	r4, #7
   882dc:	f024 0307 	bic.w	r3, r4, #7
   882e0:	4619      	mov	r1, r3
   882e2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   882e6:	4614      	mov	r4, r2
   882e8:	461d      	mov	r5, r3
   882ea:	9104      	str	r1, [sp, #16]
   882ec:	2a00      	cmp	r2, #0
   882ee:	f173 0300 	sbcs.w	r3, r3, #0
   882f2:	f2c0 841e 	blt.w	88b32 <_vfiprintf_r+0xa2e>
   882f6:	9b00      	ldr	r3, [sp, #0]
   882f8:	3301      	adds	r3, #1
   882fa:	f000 84f0 	beq.w	88cde <_vfiprintf_r+0xbda>
   882fe:	ea54 0305 	orrs.w	r3, r4, r5
   88302:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88306:	f000 83fc 	beq.w	88b02 <_vfiprintf_r+0x9fe>
   8830a:	2d00      	cmp	r5, #0
   8830c:	bf08      	it	eq
   8830e:	2c0a      	cmpeq	r4, #10
   88310:	f080 84a9 	bcs.w	88c66 <_vfiprintf_r+0xb62>
   88314:	2301      	movs	r3, #1
   88316:	464f      	mov	r7, r9
   88318:	3430      	adds	r4, #48	; 0x30
   8831a:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8831e:	9301      	str	r3, [sp, #4]
   88320:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88324:	e9dd 2100 	ldrd	r2, r1, [sp]
   88328:	428a      	cmp	r2, r1
   8832a:	bfb8      	it	lt
   8832c:	460a      	movlt	r2, r1
   8832e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88332:	4615      	mov	r5, r2
   88334:	2b00      	cmp	r3, #0
   88336:	f000 809d 	beq.w	88474 <_vfiprintf_r+0x370>
   8833a:	3501      	adds	r5, #1
   8833c:	e09a      	b.n	88474 <_vfiprintf_r+0x370>
   8833e:	4649      	mov	r1, r9
   88340:	9805      	ldr	r0, [sp, #20]
   88342:	f000 fdb9 	bl	88eb8 <__swsetup_r>
   88346:	2800      	cmp	r0, #0
   88348:	f040 854a 	bne.w	88de0 <_vfiprintf_r+0xcdc>
   8834c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   88350:	f002 031a 	and.w	r3, r2, #26
   88354:	2b0a      	cmp	r3, #10
   88356:	f47f af06 	bne.w	88166 <_vfiprintf_r+0x62>
   8835a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   8835e:	2b00      	cmp	r3, #0
   88360:	f6ff af01 	blt.w	88166 <_vfiprintf_r+0x62>
   88364:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88368:	07de      	lsls	r6, r3, #31
   8836a:	d402      	bmi.n	88372 <_vfiprintf_r+0x26e>
   8836c:	0595      	lsls	r5, r2, #22
   8836e:	f140 850e 	bpl.w	88d8e <_vfiprintf_r+0xc8a>
   88372:	4623      	mov	r3, r4
   88374:	4642      	mov	r2, r8
   88376:	4649      	mov	r1, r9
   88378:	9805      	ldr	r0, [sp, #20]
   8837a:	f000 fd59 	bl	88e30 <__sbprintf>
   8837e:	9003      	str	r0, [sp, #12]
   88380:	9803      	ldr	r0, [sp, #12]
   88382:	b03b      	add	sp, #236	; 0xec
   88384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88388:	f047 0710 	orr.w	r7, r7, #16
   8838c:	06b8      	lsls	r0, r7, #26
   8838e:	9c04      	ldr	r4, [sp, #16]
   88390:	f140 8109 	bpl.w	885a6 <_vfiprintf_r+0x4a2>
   88394:	3407      	adds	r4, #7
   88396:	f024 0307 	bic.w	r3, r4, #7
   8839a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8839e:	9304      	str	r3, [sp, #16]
   883a0:	2300      	movs	r3, #0
   883a2:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   883a6:	f04f 0200 	mov.w	r2, #0
   883aa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   883ae:	9a00      	ldr	r2, [sp, #0]
   883b0:	4611      	mov	r1, r2
   883b2:	3101      	adds	r1, #1
   883b4:	f000 81db 	beq.w	8876e <_vfiprintf_r+0x66a>
   883b8:	ea54 0105 	orrs.w	r1, r4, r5
   883bc:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   883c0:	f040 81d4 	bne.w	8876c <_vfiprintf_r+0x668>
   883c4:	2a00      	cmp	r2, #0
   883c6:	f040 848d 	bne.w	88ce4 <_vfiprintf_r+0xbe0>
   883ca:	2b00      	cmp	r3, #0
   883cc:	f040 839e 	bne.w	88b0c <_vfiprintf_r+0xa08>
   883d0:	f019 0301 	ands.w	r3, r9, #1
   883d4:	9301      	str	r3, [sp, #4]
   883d6:	f000 83c3 	beq.w	88b60 <_vfiprintf_r+0xa5c>
   883da:	2330      	movs	r3, #48	; 0x30
   883dc:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   883e0:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   883e4:	e79e      	b.n	88324 <_vfiprintf_r+0x220>
   883e6:	ebb4 0508 	subs.w	r5, r4, r8
   883ea:	f000 80bb 	beq.w	88564 <_vfiprintf_r+0x460>
   883ee:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   883f2:	3301      	adds	r3, #1
   883f4:	442a      	add	r2, r5
   883f6:	2b07      	cmp	r3, #7
   883f8:	e9ca 8500 	strd	r8, r5, [sl]
   883fc:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88400:	dc06      	bgt.n	88410 <_vfiprintf_r+0x30c>
   88402:	f10a 0a08 	add.w	sl, sl, #8
   88406:	9a03      	ldr	r2, [sp, #12]
   88408:	7823      	ldrb	r3, [r4, #0]
   8840a:	442a      	add	r2, r5
   8840c:	9203      	str	r2, [sp, #12]
   8840e:	e6ca      	b.n	881a6 <_vfiprintf_r+0xa2>
   88410:	2a00      	cmp	r2, #0
   88412:	f000 8372 	beq.w	88afa <_vfiprintf_r+0x9f6>
   88416:	4659      	mov	r1, fp
   88418:	9805      	ldr	r0, [sp, #20]
   8841a:	aa0e      	add	r2, sp, #56	; 0x38
   8841c:	f7ff fe36 	bl	8808c <__sprint_r.part.0>
   88420:	b950      	cbnz	r0, 88438 <_vfiprintf_r+0x334>
   88422:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88426:	e7ee      	b.n	88406 <_vfiprintf_r+0x302>
   88428:	4659      	mov	r1, fp
   8842a:	9805      	ldr	r0, [sp, #20]
   8842c:	aa0e      	add	r2, sp, #56	; 0x38
   8842e:	f7ff fe2d 	bl	8808c <__sprint_r.part.0>
   88432:	2800      	cmp	r0, #0
   88434:	f000 808d 	beq.w	88552 <_vfiprintf_r+0x44e>
   88438:	46d9      	mov	r9, fp
   8843a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8843e:	f013 0f01 	tst.w	r3, #1
   88442:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88446:	f000 8095 	beq.w	88574 <_vfiprintf_r+0x470>
   8844a:	065b      	lsls	r3, r3, #25
   8844c:	f100 84d4 	bmi.w	88df8 <_vfiprintf_r+0xcf4>
   88450:	9803      	ldr	r0, [sp, #12]
   88452:	b03b      	add	sp, #236	; 0xec
   88454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88458:	2b00      	cmp	r3, #0
   8845a:	f000 8083 	beq.w	88564 <_vfiprintf_r+0x460>
   8845e:	2501      	movs	r5, #1
   88460:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88464:	f04f 0300 	mov.w	r3, #0
   88468:	9501      	str	r5, [sp, #4]
   8846a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8846e:	ae21      	add	r6, sp, #132	; 0x84
   88470:	2300      	movs	r3, #0
   88472:	9300      	str	r3, [sp, #0]
   88474:	f017 0302 	ands.w	r3, r7, #2
   88478:	9307      	str	r3, [sp, #28]
   8847a:	bf18      	it	ne
   8847c:	3502      	addne	r5, #2
   8847e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   88482:	9306      	str	r3, [sp, #24]
   88484:	d104      	bne.n	88490 <_vfiprintf_r+0x38c>
   88486:	9b02      	ldr	r3, [sp, #8]
   88488:	1b5c      	subs	r4, r3, r5
   8848a:	2c00      	cmp	r4, #0
   8848c:	f300 8274 	bgt.w	88978 <_vfiprintf_r+0x874>
   88490:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88494:	1c48      	adds	r0, r1, #1
   88496:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   8849a:	b174      	cbz	r4, 884ba <_vfiprintf_r+0x3b6>
   8849c:	2101      	movs	r1, #1
   8849e:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   884a2:	440a      	add	r2, r1
   884a4:	2807      	cmp	r0, #7
   884a6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   884aa:	e9ca 4100 	strd	r4, r1, [sl]
   884ae:	f300 8246 	bgt.w	8893e <_vfiprintf_r+0x83a>
   884b2:	4601      	mov	r1, r0
   884b4:	f10a 0a08 	add.w	sl, sl, #8
   884b8:	3001      	adds	r0, #1
   884ba:	9b07      	ldr	r3, [sp, #28]
   884bc:	b1c3      	cbz	r3, 884f0 <_vfiprintf_r+0x3ec>
   884be:	2102      	movs	r1, #2
   884c0:	ab0d      	add	r3, sp, #52	; 0x34
   884c2:	440a      	add	r2, r1
   884c4:	2807      	cmp	r0, #7
   884c6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   884ca:	e9ca 3100 	strd	r3, r1, [sl]
   884ce:	f340 824e 	ble.w	8896e <_vfiprintf_r+0x86a>
   884d2:	2a00      	cmp	r2, #0
   884d4:	f000 830c 	beq.w	88af0 <_vfiprintf_r+0x9ec>
   884d8:	4659      	mov	r1, fp
   884da:	9805      	ldr	r0, [sp, #20]
   884dc:	aa0e      	add	r2, sp, #56	; 0x38
   884de:	f7ff fdd5 	bl	8808c <__sprint_r.part.0>
   884e2:	2800      	cmp	r0, #0
   884e4:	d1a8      	bne.n	88438 <_vfiprintf_r+0x334>
   884e6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   884ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   884ee:	1c48      	adds	r0, r1, #1
   884f0:	9b06      	ldr	r3, [sp, #24]
   884f2:	2b80      	cmp	r3, #128	; 0x80
   884f4:	f000 817e 	beq.w	887f4 <_vfiprintf_r+0x6f0>
   884f8:	e9dd 3400 	ldrd	r3, r4, [sp]
   884fc:	1b1c      	subs	r4, r3, r4
   884fe:	2c00      	cmp	r4, #0
   88500:	f300 81d3 	bgt.w	888aa <_vfiprintf_r+0x7a6>
   88504:	9b01      	ldr	r3, [sp, #4]
   88506:	2807      	cmp	r0, #7
   88508:	441a      	add	r2, r3
   8850a:	e9ca 6300 	strd	r6, r3, [sl]
   8850e:	9210      	str	r2, [sp, #64]	; 0x40
   88510:	900f      	str	r0, [sp, #60]	; 0x3c
   88512:	f340 816c 	ble.w	887ee <_vfiprintf_r+0x6ea>
   88516:	2a00      	cmp	r2, #0
   88518:	f000 8276 	beq.w	88a08 <_vfiprintf_r+0x904>
   8851c:	4659      	mov	r1, fp
   8851e:	9805      	ldr	r0, [sp, #20]
   88520:	aa0e      	add	r2, sp, #56	; 0x38
   88522:	f7ff fdb3 	bl	8808c <__sprint_r.part.0>
   88526:	2800      	cmp	r0, #0
   88528:	d186      	bne.n	88438 <_vfiprintf_r+0x334>
   8852a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8852c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88530:	0779      	lsls	r1, r7, #29
   88532:	d504      	bpl.n	8853e <_vfiprintf_r+0x43a>
   88534:	9b02      	ldr	r3, [sp, #8]
   88536:	1b5c      	subs	r4, r3, r5
   88538:	2c00      	cmp	r4, #0
   8853a:	f300 826e 	bgt.w	88a1a <_vfiprintf_r+0x916>
   8853e:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   88542:	42a9      	cmp	r1, r5
   88544:	bfac      	ite	ge
   88546:	185b      	addge	r3, r3, r1
   88548:	195b      	addlt	r3, r3, r5
   8854a:	9303      	str	r3, [sp, #12]
   8854c:	2a00      	cmp	r2, #0
   8854e:	f47f af6b 	bne.w	88428 <_vfiprintf_r+0x324>
   88552:	2300      	movs	r3, #0
   88554:	930f      	str	r3, [sp, #60]	; 0x3c
   88556:	f898 3000 	ldrb.w	r3, [r8]
   8855a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8855e:	2b00      	cmp	r3, #0
   88560:	f47f ae13 	bne.w	8818a <_vfiprintf_r+0x86>
   88564:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88566:	46d9      	mov	r9, fp
   88568:	2b00      	cmp	r3, #0
   8856a:	f040 8426 	bne.w	88dba <_vfiprintf_r+0xcb6>
   8856e:	2300      	movs	r3, #0
   88570:	930f      	str	r3, [sp, #60]	; 0x3c
   88572:	e762      	b.n	8843a <_vfiprintf_r+0x336>
   88574:	059a      	lsls	r2, r3, #22
   88576:	f53f af68 	bmi.w	8844a <_vfiprintf_r+0x346>
   8857a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8857e:	f002 f9cf 	bl	8a920 <__retarget_lock_release_recursive>
   88582:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88586:	e760      	b.n	8844a <_vfiprintf_r+0x346>
   88588:	9b04      	ldr	r3, [sp, #16]
   8858a:	06f8      	lsls	r0, r7, #27
   8858c:	f853 4b04 	ldr.w	r4, [r3], #4
   88590:	f100 8308 	bmi.w	88ba4 <_vfiprintf_r+0xaa0>
   88594:	0679      	lsls	r1, r7, #25
   88596:	f140 8302 	bpl.w	88b9e <_vfiprintf_r+0xa9a>
   8859a:	b224      	sxth	r4, r4
   8859c:	17e5      	asrs	r5, r4, #31
   8859e:	9304      	str	r3, [sp, #16]
   885a0:	4622      	mov	r2, r4
   885a2:	462b      	mov	r3, r5
   885a4:	e6a2      	b.n	882ec <_vfiprintf_r+0x1e8>
   885a6:	f854 3b04 	ldr.w	r3, [r4], #4
   885aa:	06f9      	lsls	r1, r7, #27
   885ac:	9404      	str	r4, [sp, #16]
   885ae:	f100 82f3 	bmi.w	88b98 <_vfiprintf_r+0xa94>
   885b2:	067a      	lsls	r2, r7, #25
   885b4:	f140 82ed 	bpl.w	88b92 <_vfiprintf_r+0xa8e>
   885b8:	2500      	movs	r5, #0
   885ba:	b29c      	uxth	r4, r3
   885bc:	e6f0      	b.n	883a0 <_vfiprintf_r+0x29c>
   885be:	f04f 0300 	mov.w	r3, #0
   885c2:	9c04      	ldr	r4, [sp, #16]
   885c4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   885c8:	f854 6b04 	ldr.w	r6, [r4], #4
   885cc:	2e00      	cmp	r6, #0
   885ce:	f000 8397 	beq.w	88d00 <_vfiprintf_r+0xbfc>
   885d2:	9a00      	ldr	r2, [sp, #0]
   885d4:	4613      	mov	r3, r2
   885d6:	3301      	adds	r3, #1
   885d8:	f000 831e 	beq.w	88c18 <_vfiprintf_r+0xb14>
   885dc:	2100      	movs	r1, #0
   885de:	4630      	mov	r0, r6
   885e0:	f002 fce4 	bl	8afac <memchr>
   885e4:	2800      	cmp	r0, #0
   885e6:	f000 83d8 	beq.w	88d9a <_vfiprintf_r+0xc96>
   885ea:	1b83      	subs	r3, r0, r6
   885ec:	9301      	str	r3, [sp, #4]
   885ee:	2300      	movs	r3, #0
   885f0:	9404      	str	r4, [sp, #16]
   885f2:	9300      	str	r3, [sp, #0]
   885f4:	e696      	b.n	88324 <_vfiprintf_r+0x220>
   885f6:	2501      	movs	r5, #1
   885f8:	f04f 0200 	mov.w	r2, #0
   885fc:	9c04      	ldr	r4, [sp, #16]
   885fe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88602:	f854 3b04 	ldr.w	r3, [r4], #4
   88606:	9501      	str	r5, [sp, #4]
   88608:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8860c:	9404      	str	r4, [sp, #16]
   8860e:	ae21      	add	r6, sp, #132	; 0x84
   88610:	e72e      	b.n	88470 <_vfiprintf_r+0x36c>
   88612:	f001 fdb1 	bl	8a178 <__sinit>
   88616:	e582      	b.n	8811e <_vfiprintf_r+0x1a>
   88618:	9b02      	ldr	r3, [sp, #8]
   8861a:	425b      	negs	r3, r3
   8861c:	9302      	str	r3, [sp, #8]
   8861e:	f898 3000 	ldrb.w	r3, [r8]
   88622:	f047 0704 	orr.w	r7, r7, #4
   88626:	e5cf      	b.n	881c8 <_vfiprintf_r+0xc4>
   88628:	f898 3000 	ldrb.w	r3, [r8]
   8862c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   88630:	e5ca      	b.n	881c8 <_vfiprintf_r+0xc4>
   88632:	f898 3000 	ldrb.w	r3, [r8]
   88636:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8863a:	e5c5      	b.n	881c8 <_vfiprintf_r+0xc4>
   8863c:	4641      	mov	r1, r8
   8863e:	f811 3b01 	ldrb.w	r3, [r1], #1
   88642:	2b2a      	cmp	r3, #42	; 0x2a
   88644:	f000 83dd 	beq.w	88e02 <_vfiprintf_r+0xcfe>
   88648:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8864c:	2a09      	cmp	r2, #9
   8864e:	4688      	mov	r8, r1
   88650:	bf98      	it	ls
   88652:	2100      	movls	r1, #0
   88654:	f200 83ad 	bhi.w	88db2 <_vfiprintf_r+0xcae>
   88658:	f818 3b01 	ldrb.w	r3, [r8], #1
   8865c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88660:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88664:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88668:	2a09      	cmp	r2, #9
   8866a:	d9f5      	bls.n	88658 <_vfiprintf_r+0x554>
   8866c:	9100      	str	r1, [sp, #0]
   8866e:	e5ad      	b.n	881cc <_vfiprintf_r+0xc8>
   88670:	9c05      	ldr	r4, [sp, #20]
   88672:	4620      	mov	r0, r4
   88674:	f002 f94a 	bl	8a90c <_localeconv_r>
   88678:	6843      	ldr	r3, [r0, #4]
   8867a:	4618      	mov	r0, r3
   8867c:	930a      	str	r3, [sp, #40]	; 0x28
   8867e:	f7fd fefb 	bl	86478 <strlen>
   88682:	4603      	mov	r3, r0
   88684:	4620      	mov	r0, r4
   88686:	930b      	str	r3, [sp, #44]	; 0x2c
   88688:	461c      	mov	r4, r3
   8868a:	f002 f93f 	bl	8a90c <_localeconv_r>
   8868e:	6882      	ldr	r2, [r0, #8]
   88690:	9209      	str	r2, [sp, #36]	; 0x24
   88692:	2c00      	cmp	r4, #0
   88694:	f43f ae13 	beq.w	882be <_vfiprintf_r+0x1ba>
   88698:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8869a:	2b00      	cmp	r3, #0
   8869c:	f43f ae0f 	beq.w	882be <_vfiprintf_r+0x1ba>
   886a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886a2:	781b      	ldrb	r3, [r3, #0]
   886a4:	2b00      	cmp	r3, #0
   886a6:	f43f ae0a 	beq.w	882be <_vfiprintf_r+0x1ba>
   886aa:	f898 3000 	ldrb.w	r3, [r8]
   886ae:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   886b2:	e589      	b.n	881c8 <_vfiprintf_r+0xc4>
   886b4:	f898 3000 	ldrb.w	r3, [r8]
   886b8:	f047 0701 	orr.w	r7, r7, #1
   886bc:	e584      	b.n	881c8 <_vfiprintf_r+0xc4>
   886be:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   886c2:	2b00      	cmp	r3, #0
   886c4:	f47f adfb 	bne.w	882be <_vfiprintf_r+0x1ba>
   886c8:	2320      	movs	r3, #32
   886ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   886ce:	f898 3000 	ldrb.w	r3, [r8]
   886d2:	e579      	b.n	881c8 <_vfiprintf_r+0xc4>
   886d4:	f898 3000 	ldrb.w	r3, [r8]
   886d8:	2b6c      	cmp	r3, #108	; 0x6c
   886da:	bf03      	ittte	eq
   886dc:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   886e0:	f047 0720 	orreq.w	r7, r7, #32
   886e4:	f108 0801 	addeq.w	r8, r8, #1
   886e8:	f047 0710 	orrne.w	r7, r7, #16
   886ec:	e56c      	b.n	881c8 <_vfiprintf_r+0xc4>
   886ee:	f898 3000 	ldrb.w	r3, [r8]
   886f2:	2b68      	cmp	r3, #104	; 0x68
   886f4:	bf03      	ittte	eq
   886f6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   886fa:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   886fe:	f108 0801 	addeq.w	r8, r8, #1
   88702:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88706:	e55f      	b.n	881c8 <_vfiprintf_r+0xc4>
   88708:	f047 0910 	orr.w	r9, r7, #16
   8870c:	f019 0f20 	tst.w	r9, #32
   88710:	9c04      	ldr	r4, [sp, #16]
   88712:	f000 8200 	beq.w	88b16 <_vfiprintf_r+0xa12>
   88716:	3407      	adds	r4, #7
   88718:	f024 0307 	bic.w	r3, r4, #7
   8871c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88720:	9304      	str	r3, [sp, #16]
   88722:	2301      	movs	r3, #1
   88724:	e63f      	b.n	883a6 <_vfiprintf_r+0x2a2>
   88726:	f647 0330 	movw	r3, #30768	; 0x7830
   8872a:	9c04      	ldr	r4, [sp, #16]
   8872c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88730:	f854 2b04 	ldr.w	r2, [r4], #4
   88734:	4bbf      	ldr	r3, [pc, #764]	; (88a34 <_vfiprintf_r+0x930>)
   88736:	9404      	str	r4, [sp, #16]
   88738:	9308      	str	r3, [sp, #32]
   8873a:	4614      	mov	r4, r2
   8873c:	2500      	movs	r5, #0
   8873e:	2302      	movs	r3, #2
   88740:	f047 0902 	orr.w	r9, r7, #2
   88744:	e62f      	b.n	883a6 <_vfiprintf_r+0x2a2>
   88746:	06bb      	lsls	r3, r7, #26
   88748:	f100 8232 	bmi.w	88bb0 <_vfiprintf_r+0xaac>
   8874c:	06fe      	lsls	r6, r7, #27
   8874e:	f100 82cf 	bmi.w	88cf0 <_vfiprintf_r+0xbec>
   88752:	067d      	lsls	r5, r7, #25
   88754:	f100 8301 	bmi.w	88d5a <_vfiprintf_r+0xc56>
   88758:	05bc      	lsls	r4, r7, #22
   8875a:	f140 82c9 	bpl.w	88cf0 <_vfiprintf_r+0xbec>
   8875e:	9c04      	ldr	r4, [sp, #16]
   88760:	9a03      	ldr	r2, [sp, #12]
   88762:	f854 3b04 	ldr.w	r3, [r4], #4
   88766:	701a      	strb	r2, [r3, #0]
   88768:	9404      	str	r4, [sp, #16]
   8876a:	e509      	b.n	88180 <_vfiprintf_r+0x7c>
   8876c:	46b9      	mov	r9, r7
   8876e:	2b01      	cmp	r3, #1
   88770:	f43f adcb 	beq.w	8830a <_vfiprintf_r+0x206>
   88774:	2b02      	cmp	r3, #2
   88776:	ae3a      	add	r6, sp, #232	; 0xe8
   88778:	d113      	bne.n	887a2 <_vfiprintf_r+0x69e>
   8877a:	9808      	ldr	r0, [sp, #32]
   8877c:	0923      	lsrs	r3, r4, #4
   8877e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88782:	0929      	lsrs	r1, r5, #4
   88784:	f004 020f 	and.w	r2, r4, #15
   88788:	460d      	mov	r5, r1
   8878a:	461c      	mov	r4, r3
   8878c:	5c83      	ldrb	r3, [r0, r2]
   8878e:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88792:	ea54 0305 	orrs.w	r3, r4, r5
   88796:	d1f1      	bne.n	8877c <_vfiprintf_r+0x678>
   88798:	ab3a      	add	r3, sp, #232	; 0xe8
   8879a:	1b9b      	subs	r3, r3, r6
   8879c:	464f      	mov	r7, r9
   8879e:	9301      	str	r3, [sp, #4]
   887a0:	e5c0      	b.n	88324 <_vfiprintf_r+0x220>
   887a2:	08e2      	lsrs	r2, r4, #3
   887a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   887a8:	08e9      	lsrs	r1, r5, #3
   887aa:	f004 0307 	and.w	r3, r4, #7
   887ae:	460d      	mov	r5, r1
   887b0:	4614      	mov	r4, r2
   887b2:	3330      	adds	r3, #48	; 0x30
   887b4:	ea54 0105 	orrs.w	r1, r4, r5
   887b8:	4632      	mov	r2, r6
   887ba:	f806 3d01 	strb.w	r3, [r6, #-1]!
   887be:	d1f0      	bne.n	887a2 <_vfiprintf_r+0x69e>
   887c0:	f019 0f01 	tst.w	r9, #1
   887c4:	d0e8      	beq.n	88798 <_vfiprintf_r+0x694>
   887c6:	2b30      	cmp	r3, #48	; 0x30
   887c8:	d0e6      	beq.n	88798 <_vfiprintf_r+0x694>
   887ca:	2330      	movs	r3, #48	; 0x30
   887cc:	3a02      	subs	r2, #2
   887ce:	f806 3c01 	strb.w	r3, [r6, #-1]
   887d2:	ab3a      	add	r3, sp, #232	; 0xe8
   887d4:	1a9b      	subs	r3, r3, r2
   887d6:	464f      	mov	r7, r9
   887d8:	4616      	mov	r6, r2
   887da:	9301      	str	r3, [sp, #4]
   887dc:	e5a2      	b.n	88324 <_vfiprintf_r+0x220>
   887de:	2301      	movs	r3, #1
   887e0:	9a01      	ldr	r2, [sp, #4]
   887e2:	930f      	str	r3, [sp, #60]	; 0x3c
   887e4:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   887e8:	9212      	str	r2, [sp, #72]	; 0x48
   887ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   887ee:	f10a 0a08 	add.w	sl, sl, #8
   887f2:	e69d      	b.n	88530 <_vfiprintf_r+0x42c>
   887f4:	9b02      	ldr	r3, [sp, #8]
   887f6:	1b5c      	subs	r4, r3, r5
   887f8:	2c00      	cmp	r4, #0
   887fa:	f77f ae7d 	ble.w	884f8 <_vfiprintf_r+0x3f4>
   887fe:	2c10      	cmp	r4, #16
   88800:	f340 82ea 	ble.w	88dd8 <_vfiprintf_r+0xcd4>
   88804:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88a38 <_vfiprintf_r+0x934>
   88808:	4650      	mov	r0, sl
   8880a:	9706      	str	r7, [sp, #24]
   8880c:	46b2      	mov	sl, r6
   8880e:	464e      	mov	r6, r9
   88810:	46c1      	mov	r9, r8
   88812:	46a8      	mov	r8, r5
   88814:	9d05      	ldr	r5, [sp, #20]
   88816:	e006      	b.n	88826 <_vfiprintf_r+0x722>
   88818:	f101 0c02 	add.w	ip, r1, #2
   8881c:	4619      	mov	r1, r3
   8881e:	3008      	adds	r0, #8
   88820:	3c10      	subs	r4, #16
   88822:	2c10      	cmp	r4, #16
   88824:	dd1a      	ble.n	8885c <_vfiprintf_r+0x758>
   88826:	2710      	movs	r7, #16
   88828:	1c4b      	adds	r3, r1, #1
   8882a:	3210      	adds	r2, #16
   8882c:	2b07      	cmp	r3, #7
   8882e:	9210      	str	r2, [sp, #64]	; 0x40
   88830:	6006      	str	r6, [r0, #0]
   88832:	6047      	str	r7, [r0, #4]
   88834:	930f      	str	r3, [sp, #60]	; 0x3c
   88836:	ddef      	ble.n	88818 <_vfiprintf_r+0x714>
   88838:	2a00      	cmp	r2, #0
   8883a:	d07b      	beq.n	88934 <_vfiprintf_r+0x830>
   8883c:	4659      	mov	r1, fp
   8883e:	4628      	mov	r0, r5
   88840:	aa0e      	add	r2, sp, #56	; 0x38
   88842:	f7ff fc23 	bl	8808c <__sprint_r.part.0>
   88846:	2800      	cmp	r0, #0
   88848:	f47f adf6 	bne.w	88438 <_vfiprintf_r+0x334>
   8884c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88850:	3c10      	subs	r4, #16
   88852:	2c10      	cmp	r4, #16
   88854:	a811      	add	r0, sp, #68	; 0x44
   88856:	f101 0c01 	add.w	ip, r1, #1
   8885a:	dce4      	bgt.n	88826 <_vfiprintf_r+0x722>
   8885c:	4645      	mov	r5, r8
   8885e:	46c8      	mov	r8, r9
   88860:	46b1      	mov	r9, r6
   88862:	4656      	mov	r6, sl
   88864:	4682      	mov	sl, r0
   88866:	9f06      	ldr	r7, [sp, #24]
   88868:	4422      	add	r2, r4
   8886a:	f1bc 0f07 	cmp.w	ip, #7
   8886e:	e9ca 9400 	strd	r9, r4, [sl]
   88872:	9210      	str	r2, [sp, #64]	; 0x40
   88874:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88878:	f340 817e 	ble.w	88b78 <_vfiprintf_r+0xa74>
   8887c:	2a00      	cmp	r2, #0
   8887e:	f000 825c 	beq.w	88d3a <_vfiprintf_r+0xc36>
   88882:	4659      	mov	r1, fp
   88884:	9805      	ldr	r0, [sp, #20]
   88886:	aa0e      	add	r2, sp, #56	; 0x38
   88888:	f7ff fc00 	bl	8808c <__sprint_r.part.0>
   8888c:	2800      	cmp	r0, #0
   8888e:	f47f add3 	bne.w	88438 <_vfiprintf_r+0x334>
   88892:	e9dd 3400 	ldrd	r3, r4, [sp]
   88896:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8889a:	1b1c      	subs	r4, r3, r4
   8889c:	2c00      	cmp	r4, #0
   8889e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888a2:	f101 0001 	add.w	r0, r1, #1
   888a6:	f77f ae2d 	ble.w	88504 <_vfiprintf_r+0x400>
   888aa:	2c10      	cmp	r4, #16
   888ac:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88a38 <_vfiprintf_r+0x934>
   888b0:	dd2f      	ble.n	88912 <_vfiprintf_r+0x80e>
   888b2:	46d4      	mov	ip, sl
   888b4:	46b2      	mov	sl, r6
   888b6:	464e      	mov	r6, r9
   888b8:	46c1      	mov	r9, r8
   888ba:	46a8      	mov	r8, r5
   888bc:	9d05      	ldr	r5, [sp, #20]
   888be:	e006      	b.n	888ce <_vfiprintf_r+0x7ca>
   888c0:	1c88      	adds	r0, r1, #2
   888c2:	4619      	mov	r1, r3
   888c4:	f10c 0c08 	add.w	ip, ip, #8
   888c8:	3c10      	subs	r4, #16
   888ca:	2c10      	cmp	r4, #16
   888cc:	dd1c      	ble.n	88908 <_vfiprintf_r+0x804>
   888ce:	2010      	movs	r0, #16
   888d0:	1c4b      	adds	r3, r1, #1
   888d2:	3210      	adds	r2, #16
   888d4:	2b07      	cmp	r3, #7
   888d6:	9210      	str	r2, [sp, #64]	; 0x40
   888d8:	f8cc 6000 	str.w	r6, [ip]
   888dc:	f8cc 0004 	str.w	r0, [ip, #4]
   888e0:	930f      	str	r3, [sp, #60]	; 0x3c
   888e2:	dded      	ble.n	888c0 <_vfiprintf_r+0x7bc>
   888e4:	b30a      	cbz	r2, 8892a <_vfiprintf_r+0x826>
   888e6:	4659      	mov	r1, fp
   888e8:	4628      	mov	r0, r5
   888ea:	aa0e      	add	r2, sp, #56	; 0x38
   888ec:	f7ff fbce 	bl	8808c <__sprint_r.part.0>
   888f0:	2800      	cmp	r0, #0
   888f2:	f47f ada1 	bne.w	88438 <_vfiprintf_r+0x334>
   888f6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   888fa:	3c10      	subs	r4, #16
   888fc:	2c10      	cmp	r4, #16
   888fe:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88902:	f101 0001 	add.w	r0, r1, #1
   88906:	dce2      	bgt.n	888ce <_vfiprintf_r+0x7ca>
   88908:	4645      	mov	r5, r8
   8890a:	46c8      	mov	r8, r9
   8890c:	46b1      	mov	r9, r6
   8890e:	4656      	mov	r6, sl
   88910:	46e2      	mov	sl, ip
   88912:	4422      	add	r2, r4
   88914:	2807      	cmp	r0, #7
   88916:	e9ca 9400 	strd	r9, r4, [sl]
   8891a:	9210      	str	r2, [sp, #64]	; 0x40
   8891c:	900f      	str	r0, [sp, #60]	; 0x3c
   8891e:	f300 80d3 	bgt.w	88ac8 <_vfiprintf_r+0x9c4>
   88922:	f10a 0a08 	add.w	sl, sl, #8
   88926:	3001      	adds	r0, #1
   88928:	e5ec      	b.n	88504 <_vfiprintf_r+0x400>
   8892a:	2001      	movs	r0, #1
   8892c:	4611      	mov	r1, r2
   8892e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88932:	e7c9      	b.n	888c8 <_vfiprintf_r+0x7c4>
   88934:	f04f 0c01 	mov.w	ip, #1
   88938:	4611      	mov	r1, r2
   8893a:	a811      	add	r0, sp, #68	; 0x44
   8893c:	e770      	b.n	88820 <_vfiprintf_r+0x71c>
   8893e:	2a00      	cmp	r2, #0
   88940:	f000 80d3 	beq.w	88aea <_vfiprintf_r+0x9e6>
   88944:	4659      	mov	r1, fp
   88946:	9805      	ldr	r0, [sp, #20]
   88948:	aa0e      	add	r2, sp, #56	; 0x38
   8894a:	f7ff fb9f 	bl	8808c <__sprint_r.part.0>
   8894e:	2800      	cmp	r0, #0
   88950:	f47f ad72 	bne.w	88438 <_vfiprintf_r+0x334>
   88954:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88958:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8895c:	1c48      	adds	r0, r1, #1
   8895e:	e5ac      	b.n	884ba <_vfiprintf_r+0x3b6>
   88960:	2202      	movs	r2, #2
   88962:	2001      	movs	r0, #1
   88964:	ab0d      	add	r3, sp, #52	; 0x34
   88966:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8896a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8896e:	4601      	mov	r1, r0
   88970:	f10a 0a08 	add.w	sl, sl, #8
   88974:	1c48      	adds	r0, r1, #1
   88976:	e5bb      	b.n	884f0 <_vfiprintf_r+0x3ec>
   88978:	2c10      	cmp	r4, #16
   8897a:	f340 8214 	ble.w	88da6 <_vfiprintf_r+0xca2>
   8897e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88982:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88a3c <_vfiprintf_r+0x938>
   88986:	46d4      	mov	ip, sl
   88988:	46b2      	mov	sl, r6
   8898a:	464e      	mov	r6, r9
   8898c:	46c1      	mov	r9, r8
   8898e:	46a8      	mov	r8, r5
   88990:	9d05      	ldr	r5, [sp, #20]
   88992:	e006      	b.n	889a2 <_vfiprintf_r+0x89e>
   88994:	1c99      	adds	r1, r3, #2
   88996:	4603      	mov	r3, r0
   88998:	f10c 0c08 	add.w	ip, ip, #8
   8899c:	3c10      	subs	r4, #16
   8899e:	2c10      	cmp	r4, #16
   889a0:	dd1c      	ble.n	889dc <_vfiprintf_r+0x8d8>
   889a2:	2110      	movs	r1, #16
   889a4:	1c58      	adds	r0, r3, #1
   889a6:	3210      	adds	r2, #16
   889a8:	2807      	cmp	r0, #7
   889aa:	9210      	str	r2, [sp, #64]	; 0x40
   889ac:	f8cc 6000 	str.w	r6, [ip]
   889b0:	f8cc 1004 	str.w	r1, [ip, #4]
   889b4:	900f      	str	r0, [sp, #60]	; 0x3c
   889b6:	dded      	ble.n	88994 <_vfiprintf_r+0x890>
   889b8:	b30a      	cbz	r2, 889fe <_vfiprintf_r+0x8fa>
   889ba:	4659      	mov	r1, fp
   889bc:	4628      	mov	r0, r5
   889be:	aa0e      	add	r2, sp, #56	; 0x38
   889c0:	f7ff fb64 	bl	8808c <__sprint_r.part.0>
   889c4:	2800      	cmp	r0, #0
   889c6:	f47f ad37 	bne.w	88438 <_vfiprintf_r+0x334>
   889ca:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   889ce:	3c10      	subs	r4, #16
   889d0:	2c10      	cmp	r4, #16
   889d2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   889d6:	f103 0101 	add.w	r1, r3, #1
   889da:	dce2      	bgt.n	889a2 <_vfiprintf_r+0x89e>
   889dc:	4645      	mov	r5, r8
   889de:	46c8      	mov	r8, r9
   889e0:	46b1      	mov	r9, r6
   889e2:	4656      	mov	r6, sl
   889e4:	46e2      	mov	sl, ip
   889e6:	4422      	add	r2, r4
   889e8:	2907      	cmp	r1, #7
   889ea:	e9ca 9400 	strd	r9, r4, [sl]
   889ee:	9210      	str	r2, [sp, #64]	; 0x40
   889f0:	910f      	str	r1, [sp, #60]	; 0x3c
   889f2:	f300 80a8 	bgt.w	88b46 <_vfiprintf_r+0xa42>
   889f6:	f10a 0a08 	add.w	sl, sl, #8
   889fa:	1c48      	adds	r0, r1, #1
   889fc:	e54b      	b.n	88496 <_vfiprintf_r+0x392>
   889fe:	4613      	mov	r3, r2
   88a00:	2101      	movs	r1, #1
   88a02:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88a06:	e7c9      	b.n	8899c <_vfiprintf_r+0x898>
   88a08:	0778      	lsls	r0, r7, #29
   88a0a:	920f      	str	r2, [sp, #60]	; 0x3c
   88a0c:	d554      	bpl.n	88ab8 <_vfiprintf_r+0x9b4>
   88a0e:	9b02      	ldr	r3, [sp, #8]
   88a10:	1b5c      	subs	r4, r3, r5
   88a12:	2c00      	cmp	r4, #0
   88a14:	dd50      	ble.n	88ab8 <_vfiprintf_r+0x9b4>
   88a16:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a1a:	2c10      	cmp	r4, #16
   88a1c:	f340 81d7 	ble.w	88dce <_vfiprintf_r+0xcca>
   88a20:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88a3c <_vfiprintf_r+0x938>
   88a24:	2610      	movs	r6, #16
   88a26:	464b      	mov	r3, r9
   88a28:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a2a:	46a9      	mov	r9, r5
   88a2c:	9f05      	ldr	r7, [sp, #20]
   88a2e:	461d      	mov	r5, r3
   88a30:	e00d      	b.n	88a4e <_vfiprintf_r+0x94a>
   88a32:	bf00      	nop
   88a34:	0008cde0 	.word	0x0008cde0
   88a38:	0008ce44 	.word	0x0008ce44
   88a3c:	0008ce34 	.word	0x0008ce34
   88a40:	1c88      	adds	r0, r1, #2
   88a42:	4619      	mov	r1, r3
   88a44:	f10a 0a08 	add.w	sl, sl, #8
   88a48:	3c10      	subs	r4, #16
   88a4a:	2c10      	cmp	r4, #16
   88a4c:	dd19      	ble.n	88a82 <_vfiprintf_r+0x97e>
   88a4e:	1c4b      	adds	r3, r1, #1
   88a50:	3210      	adds	r2, #16
   88a52:	2b07      	cmp	r3, #7
   88a54:	e9ca 5600 	strd	r5, r6, [sl]
   88a58:	9210      	str	r2, [sp, #64]	; 0x40
   88a5a:	930f      	str	r3, [sp, #60]	; 0x3c
   88a5c:	ddf0      	ble.n	88a40 <_vfiprintf_r+0x93c>
   88a5e:	b332      	cbz	r2, 88aae <_vfiprintf_r+0x9aa>
   88a60:	4659      	mov	r1, fp
   88a62:	4638      	mov	r0, r7
   88a64:	aa0e      	add	r2, sp, #56	; 0x38
   88a66:	f7ff fb11 	bl	8808c <__sprint_r.part.0>
   88a6a:	2800      	cmp	r0, #0
   88a6c:	f47f ace4 	bne.w	88438 <_vfiprintf_r+0x334>
   88a70:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88a74:	3c10      	subs	r4, #16
   88a76:	2c10      	cmp	r4, #16
   88a78:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88a7c:	f101 0001 	add.w	r0, r1, #1
   88a80:	dce5      	bgt.n	88a4e <_vfiprintf_r+0x94a>
   88a82:	462b      	mov	r3, r5
   88a84:	464d      	mov	r5, r9
   88a86:	4699      	mov	r9, r3
   88a88:	4422      	add	r2, r4
   88a8a:	2807      	cmp	r0, #7
   88a8c:	e9ca 9400 	strd	r9, r4, [sl]
   88a90:	9210      	str	r2, [sp, #64]	; 0x40
   88a92:	900f      	str	r0, [sp, #60]	; 0x3c
   88a94:	f77f ad53 	ble.w	8853e <_vfiprintf_r+0x43a>
   88a98:	b172      	cbz	r2, 88ab8 <_vfiprintf_r+0x9b4>
   88a9a:	4659      	mov	r1, fp
   88a9c:	9805      	ldr	r0, [sp, #20]
   88a9e:	aa0e      	add	r2, sp, #56	; 0x38
   88aa0:	f7ff faf4 	bl	8808c <__sprint_r.part.0>
   88aa4:	2800      	cmp	r0, #0
   88aa6:	f47f acc7 	bne.w	88438 <_vfiprintf_r+0x334>
   88aaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88aac:	e547      	b.n	8853e <_vfiprintf_r+0x43a>
   88aae:	2001      	movs	r0, #1
   88ab0:	4611      	mov	r1, r2
   88ab2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ab6:	e7c7      	b.n	88a48 <_vfiprintf_r+0x944>
   88ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88abc:	42aa      	cmp	r2, r5
   88abe:	bfac      	ite	ge
   88ac0:	189b      	addge	r3, r3, r2
   88ac2:	195b      	addlt	r3, r3, r5
   88ac4:	9303      	str	r3, [sp, #12]
   88ac6:	e544      	b.n	88552 <_vfiprintf_r+0x44e>
   88ac8:	2a00      	cmp	r2, #0
   88aca:	f43f ae88 	beq.w	887de <_vfiprintf_r+0x6da>
   88ace:	4659      	mov	r1, fp
   88ad0:	9805      	ldr	r0, [sp, #20]
   88ad2:	aa0e      	add	r2, sp, #56	; 0x38
   88ad4:	f7ff fada 	bl	8808c <__sprint_r.part.0>
   88ad8:	2800      	cmp	r0, #0
   88ada:	f47f acad 	bne.w	88438 <_vfiprintf_r+0x334>
   88ade:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   88ae2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ae6:	3001      	adds	r0, #1
   88ae8:	e50c      	b.n	88504 <_vfiprintf_r+0x400>
   88aea:	9b07      	ldr	r3, [sp, #28]
   88aec:	2b00      	cmp	r3, #0
   88aee:	d16b      	bne.n	88bc8 <_vfiprintf_r+0xac4>
   88af0:	2001      	movs	r0, #1
   88af2:	4611      	mov	r1, r2
   88af4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88af8:	e4fa      	b.n	884f0 <_vfiprintf_r+0x3ec>
   88afa:	920f      	str	r2, [sp, #60]	; 0x3c
   88afc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b00:	e481      	b.n	88406 <_vfiprintf_r+0x302>
   88b02:	9b00      	ldr	r3, [sp, #0]
   88b04:	2b00      	cmp	r3, #0
   88b06:	f47f ac05 	bne.w	88314 <_vfiprintf_r+0x210>
   88b0a:	464f      	mov	r7, r9
   88b0c:	2300      	movs	r3, #0
   88b0e:	ae3a      	add	r6, sp, #232	; 0xe8
   88b10:	9300      	str	r3, [sp, #0]
   88b12:	9301      	str	r3, [sp, #4]
   88b14:	e406      	b.n	88324 <_vfiprintf_r+0x220>
   88b16:	f854 2b04 	ldr.w	r2, [r4], #4
   88b1a:	f019 0f10 	tst.w	r9, #16
   88b1e:	f04f 0301 	mov.w	r3, #1
   88b22:	9404      	str	r4, [sp, #16]
   88b24:	d132      	bne.n	88b8c <_vfiprintf_r+0xa88>
   88b26:	f019 0f40 	tst.w	r9, #64	; 0x40
   88b2a:	d02b      	beq.n	88b84 <_vfiprintf_r+0xa80>
   88b2c:	2500      	movs	r5, #0
   88b2e:	b294      	uxth	r4, r2
   88b30:	e439      	b.n	883a6 <_vfiprintf_r+0x2a2>
   88b32:	232d      	movs	r3, #45	; 0x2d
   88b34:	4264      	negs	r4, r4
   88b36:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88b3a:	46b9      	mov	r9, r7
   88b3c:	f04f 0301 	mov.w	r3, #1
   88b40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88b44:	e433      	b.n	883ae <_vfiprintf_r+0x2aa>
   88b46:	2a00      	cmp	r2, #0
   88b48:	d06f      	beq.n	88c2a <_vfiprintf_r+0xb26>
   88b4a:	4659      	mov	r1, fp
   88b4c:	9805      	ldr	r0, [sp, #20]
   88b4e:	aa0e      	add	r2, sp, #56	; 0x38
   88b50:	f7ff fa9c 	bl	8808c <__sprint_r.part.0>
   88b54:	2800      	cmp	r0, #0
   88b56:	f47f ac6f 	bne.w	88438 <_vfiprintf_r+0x334>
   88b5a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b5e:	e497      	b.n	88490 <_vfiprintf_r+0x38c>
   88b60:	ae3a      	add	r6, sp, #232	; 0xe8
   88b62:	f7ff bbdf 	b.w	88324 <_vfiprintf_r+0x220>
   88b66:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88b6a:	f001 fed7 	bl	8a91c <__retarget_lock_acquire_recursive>
   88b6e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88b72:	b28a      	uxth	r2, r1
   88b74:	f7ff badd 	b.w	88132 <_vfiprintf_r+0x2e>
   88b78:	4661      	mov	r1, ip
   88b7a:	f10a 0a08 	add.w	sl, sl, #8
   88b7e:	f10c 0001 	add.w	r0, ip, #1
   88b82:	e4b9      	b.n	884f8 <_vfiprintf_r+0x3f4>
   88b84:	f419 7f00 	tst.w	r9, #512	; 0x200
   88b88:	f040 80ef 	bne.w	88d6a <_vfiprintf_r+0xc66>
   88b8c:	4614      	mov	r4, r2
   88b8e:	2500      	movs	r5, #0
   88b90:	e409      	b.n	883a6 <_vfiprintf_r+0x2a2>
   88b92:	05be      	lsls	r6, r7, #22
   88b94:	f100 80f7 	bmi.w	88d86 <_vfiprintf_r+0xc82>
   88b98:	461c      	mov	r4, r3
   88b9a:	2500      	movs	r5, #0
   88b9c:	e400      	b.n	883a0 <_vfiprintf_r+0x29c>
   88b9e:	05ba      	lsls	r2, r7, #22
   88ba0:	f100 80ea 	bmi.w	88d78 <_vfiprintf_r+0xc74>
   88ba4:	17e5      	asrs	r5, r4, #31
   88ba6:	9304      	str	r3, [sp, #16]
   88ba8:	4622      	mov	r2, r4
   88baa:	462b      	mov	r3, r5
   88bac:	f7ff bb9e 	b.w	882ec <_vfiprintf_r+0x1e8>
   88bb0:	9b03      	ldr	r3, [sp, #12]
   88bb2:	9c04      	ldr	r4, [sp, #16]
   88bb4:	17dd      	asrs	r5, r3, #31
   88bb6:	461a      	mov	r2, r3
   88bb8:	462b      	mov	r3, r5
   88bba:	f854 1b04 	ldr.w	r1, [r4], #4
   88bbe:	e9c1 2300 	strd	r2, r3, [r1]
   88bc2:	9404      	str	r4, [sp, #16]
   88bc4:	f7ff badc 	b.w	88180 <_vfiprintf_r+0x7c>
   88bc8:	2202      	movs	r2, #2
   88bca:	ab0d      	add	r3, sp, #52	; 0x34
   88bcc:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88bd0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88bd4:	e6cc      	b.n	88970 <_vfiprintf_r+0x86c>
   88bd6:	46b9      	mov	r9, r7
   88bd8:	e598      	b.n	8870c <_vfiprintf_r+0x608>
   88bda:	4a90      	ldr	r2, [pc, #576]	; (88e1c <_vfiprintf_r+0xd18>)
   88bdc:	9208      	str	r2, [sp, #32]
   88bde:	06bd      	lsls	r5, r7, #26
   88be0:	9c04      	ldr	r4, [sp, #16]
   88be2:	d530      	bpl.n	88c46 <_vfiprintf_r+0xb42>
   88be4:	3407      	adds	r4, #7
   88be6:	f024 0207 	bic.w	r2, r4, #7
   88bea:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   88bee:	9204      	str	r2, [sp, #16]
   88bf0:	07fe      	lsls	r6, r7, #31
   88bf2:	d509      	bpl.n	88c08 <_vfiprintf_r+0xb04>
   88bf4:	ea54 0205 	orrs.w	r2, r4, r5
   88bf8:	d006      	beq.n	88c08 <_vfiprintf_r+0xb04>
   88bfa:	2230      	movs	r2, #48	; 0x30
   88bfc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88c00:	f047 0702 	orr.w	r7, r7, #2
   88c04:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88c08:	2302      	movs	r3, #2
   88c0a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88c0e:	f7ff bbca 	b.w	883a6 <_vfiprintf_r+0x2a2>
   88c12:	4a83      	ldr	r2, [pc, #524]	; (88e20 <_vfiprintf_r+0xd1c>)
   88c14:	9208      	str	r2, [sp, #32]
   88c16:	e7e2      	b.n	88bde <_vfiprintf_r+0xada>
   88c18:	4630      	mov	r0, r6
   88c1a:	f7fd fc2d 	bl	86478 <strlen>
   88c1e:	2300      	movs	r3, #0
   88c20:	9404      	str	r4, [sp, #16]
   88c22:	9001      	str	r0, [sp, #4]
   88c24:	9300      	str	r3, [sp, #0]
   88c26:	f7ff bb7d 	b.w	88324 <_vfiprintf_r+0x220>
   88c2a:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88c2e:	2900      	cmp	r1, #0
   88c30:	f040 8089 	bne.w	88d46 <_vfiprintf_r+0xc42>
   88c34:	9b07      	ldr	r3, [sp, #28]
   88c36:	2b00      	cmp	r3, #0
   88c38:	f47f ae92 	bne.w	88960 <_vfiprintf_r+0x85c>
   88c3c:	4611      	mov	r1, r2
   88c3e:	2001      	movs	r0, #1
   88c40:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c44:	e458      	b.n	884f8 <_vfiprintf_r+0x3f4>
   88c46:	f854 2b04 	ldr.w	r2, [r4], #4
   88c4a:	9404      	str	r4, [sp, #16]
   88c4c:	06fc      	lsls	r4, r7, #27
   88c4e:	d407      	bmi.n	88c60 <_vfiprintf_r+0xb5c>
   88c50:	0678      	lsls	r0, r7, #25
   88c52:	d502      	bpl.n	88c5a <_vfiprintf_r+0xb56>
   88c54:	2500      	movs	r5, #0
   88c56:	b294      	uxth	r4, r2
   88c58:	e7ca      	b.n	88bf0 <_vfiprintf_r+0xaec>
   88c5a:	05b9      	lsls	r1, r7, #22
   88c5c:	f100 8089 	bmi.w	88d72 <_vfiprintf_r+0xc6e>
   88c60:	4614      	mov	r4, r2
   88c62:	2500      	movs	r5, #0
   88c64:	e7c4      	b.n	88bf0 <_vfiprintf_r+0xaec>
   88c66:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88c6a:	f8cd 9004 	str.w	r9, [sp, #4]
   88c6e:	f8cd 8018 	str.w	r8, [sp, #24]
   88c72:	2700      	movs	r7, #0
   88c74:	4698      	mov	r8, r3
   88c76:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88c7a:	ae3a      	add	r6, sp, #232	; 0xe8
   88c7c:	e00b      	b.n	88c96 <_vfiprintf_r+0xb92>
   88c7e:	220a      	movs	r2, #10
   88c80:	2300      	movs	r3, #0
   88c82:	4620      	mov	r0, r4
   88c84:	4629      	mov	r1, r5
   88c86:	f7fd f883 	bl	85d90 <__aeabi_uldivmod>
   88c8a:	2d00      	cmp	r5, #0
   88c8c:	bf08      	it	eq
   88c8e:	2c0a      	cmpeq	r4, #10
   88c90:	d319      	bcc.n	88cc6 <_vfiprintf_r+0xbc2>
   88c92:	4604      	mov	r4, r0
   88c94:	460d      	mov	r5, r1
   88c96:	220a      	movs	r2, #10
   88c98:	2300      	movs	r3, #0
   88c9a:	4620      	mov	r0, r4
   88c9c:	4629      	mov	r1, r5
   88c9e:	f7fd f877 	bl	85d90 <__aeabi_uldivmod>
   88ca2:	3230      	adds	r2, #48	; 0x30
   88ca4:	f806 2c01 	strb.w	r2, [r6, #-1]
   88ca8:	3701      	adds	r7, #1
   88caa:	3e01      	subs	r6, #1
   88cac:	f1b8 0f00 	cmp.w	r8, #0
   88cb0:	d0e5      	beq.n	88c7e <_vfiprintf_r+0xb7a>
   88cb2:	f899 3000 	ldrb.w	r3, [r9]
   88cb6:	42bb      	cmp	r3, r7
   88cb8:	d1e1      	bne.n	88c7e <_vfiprintf_r+0xb7a>
   88cba:	2fff      	cmp	r7, #255	; 0xff
   88cbc:	d0df      	beq.n	88c7e <_vfiprintf_r+0xb7a>
   88cbe:	2d00      	cmp	r5, #0
   88cc0:	bf08      	it	eq
   88cc2:	2c0a      	cmpeq	r4, #10
   88cc4:	d225      	bcs.n	88d12 <_vfiprintf_r+0xc0e>
   88cc6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   88cca:	ab3a      	add	r3, sp, #232	; 0xe8
   88ccc:	f8dd 9004 	ldr.w	r9, [sp, #4]
   88cd0:	1b9b      	subs	r3, r3, r6
   88cd2:	464f      	mov	r7, r9
   88cd4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   88cd8:	9301      	str	r3, [sp, #4]
   88cda:	f7ff bb23 	b.w	88324 <_vfiprintf_r+0x220>
   88cde:	46b9      	mov	r9, r7
   88ce0:	f7ff bb13 	b.w	8830a <_vfiprintf_r+0x206>
   88ce4:	2b01      	cmp	r3, #1
   88ce6:	46b9      	mov	r9, r7
   88ce8:	f47f ad44 	bne.w	88774 <_vfiprintf_r+0x670>
   88cec:	f7ff bb12 	b.w	88314 <_vfiprintf_r+0x210>
   88cf0:	9c04      	ldr	r4, [sp, #16]
   88cf2:	9a03      	ldr	r2, [sp, #12]
   88cf4:	f854 3b04 	ldr.w	r3, [r4], #4
   88cf8:	601a      	str	r2, [r3, #0]
   88cfa:	9404      	str	r4, [sp, #16]
   88cfc:	f7ff ba40 	b.w	88180 <_vfiprintf_r+0x7c>
   88d00:	9d00      	ldr	r5, [sp, #0]
   88d02:	4e48      	ldr	r6, [pc, #288]	; (88e24 <_vfiprintf_r+0xd20>)
   88d04:	2d06      	cmp	r5, #6
   88d06:	bf28      	it	cs
   88d08:	2506      	movcs	r5, #6
   88d0a:	9404      	str	r4, [sp, #16]
   88d0c:	9501      	str	r5, [sp, #4]
   88d0e:	f7ff bbaf 	b.w	88470 <_vfiprintf_r+0x36c>
   88d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88d14:	990a      	ldr	r1, [sp, #40]	; 0x28
   88d16:	1af6      	subs	r6, r6, r3
   88d18:	461a      	mov	r2, r3
   88d1a:	4630      	mov	r0, r6
   88d1c:	f7fd fbda 	bl	864d4 <strncpy>
   88d20:	f899 3001 	ldrb.w	r3, [r9, #1]
   88d24:	b10b      	cbz	r3, 88d2a <_vfiprintf_r+0xc26>
   88d26:	f109 0901 	add.w	r9, r9, #1
   88d2a:	220a      	movs	r2, #10
   88d2c:	2300      	movs	r3, #0
   88d2e:	4620      	mov	r0, r4
   88d30:	4629      	mov	r1, r5
   88d32:	f7fd f82d 	bl	85d90 <__aeabi_uldivmod>
   88d36:	2700      	movs	r7, #0
   88d38:	e7ab      	b.n	88c92 <_vfiprintf_r+0xb8e>
   88d3a:	2001      	movs	r0, #1
   88d3c:	4611      	mov	r1, r2
   88d3e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88d42:	f7ff bbd9 	b.w	884f8 <_vfiprintf_r+0x3f4>
   88d46:	2201      	movs	r2, #1
   88d48:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   88d4c:	4610      	mov	r0, r2
   88d4e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88d52:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88d56:	f7ff bbac 	b.w	884b2 <_vfiprintf_r+0x3ae>
   88d5a:	9c04      	ldr	r4, [sp, #16]
   88d5c:	9a03      	ldr	r2, [sp, #12]
   88d5e:	f854 3b04 	ldr.w	r3, [r4], #4
   88d62:	801a      	strh	r2, [r3, #0]
   88d64:	9404      	str	r4, [sp, #16]
   88d66:	f7ff ba0b 	b.w	88180 <_vfiprintf_r+0x7c>
   88d6a:	2500      	movs	r5, #0
   88d6c:	b2d4      	uxtb	r4, r2
   88d6e:	f7ff bb1a 	b.w	883a6 <_vfiprintf_r+0x2a2>
   88d72:	2500      	movs	r5, #0
   88d74:	b2d4      	uxtb	r4, r2
   88d76:	e73b      	b.n	88bf0 <_vfiprintf_r+0xaec>
   88d78:	b264      	sxtb	r4, r4
   88d7a:	17e5      	asrs	r5, r4, #31
   88d7c:	9304      	str	r3, [sp, #16]
   88d7e:	4622      	mov	r2, r4
   88d80:	462b      	mov	r3, r5
   88d82:	f7ff bab3 	b.w	882ec <_vfiprintf_r+0x1e8>
   88d86:	2500      	movs	r5, #0
   88d88:	b2dc      	uxtb	r4, r3
   88d8a:	f7ff bb09 	b.w	883a0 <_vfiprintf_r+0x29c>
   88d8e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88d92:	f001 fdc5 	bl	8a920 <__retarget_lock_release_recursive>
   88d96:	f7ff baec 	b.w	88372 <_vfiprintf_r+0x26e>
   88d9a:	9b00      	ldr	r3, [sp, #0]
   88d9c:	9404      	str	r4, [sp, #16]
   88d9e:	9301      	str	r3, [sp, #4]
   88da0:	9000      	str	r0, [sp, #0]
   88da2:	f7ff babf 	b.w	88324 <_vfiprintf_r+0x220>
   88da6:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88daa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 88e28 <_vfiprintf_r+0xd24>
   88dae:	3101      	adds	r1, #1
   88db0:	e619      	b.n	889e6 <_vfiprintf_r+0x8e2>
   88db2:	2200      	movs	r2, #0
   88db4:	9200      	str	r2, [sp, #0]
   88db6:	f7ff ba09 	b.w	881cc <_vfiprintf_r+0xc8>
   88dba:	4659      	mov	r1, fp
   88dbc:	9805      	ldr	r0, [sp, #20]
   88dbe:	aa0e      	add	r2, sp, #56	; 0x38
   88dc0:	f7ff f964 	bl	8808c <__sprint_r.part.0>
   88dc4:	2800      	cmp	r0, #0
   88dc6:	f43f abd2 	beq.w	8856e <_vfiprintf_r+0x46a>
   88dca:	f7ff bb36 	b.w	8843a <_vfiprintf_r+0x336>
   88dce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   88dd0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 88e28 <_vfiprintf_r+0xd24>
   88dd4:	3001      	adds	r0, #1
   88dd6:	e657      	b.n	88a88 <_vfiprintf_r+0x984>
   88dd8:	4684      	mov	ip, r0
   88dda:	f8df 9050 	ldr.w	r9, [pc, #80]	; 88e2c <_vfiprintf_r+0xd28>
   88dde:	e543      	b.n	88868 <_vfiprintf_r+0x764>
   88de0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88de4:	07db      	lsls	r3, r3, #31
   88de6:	d407      	bmi.n	88df8 <_vfiprintf_r+0xcf4>
   88de8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88dec:	059f      	lsls	r7, r3, #22
   88dee:	d403      	bmi.n	88df8 <_vfiprintf_r+0xcf4>
   88df0:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88df4:	f001 fd94 	bl	8a920 <__retarget_lock_release_recursive>
   88df8:	f04f 33ff 	mov.w	r3, #4294967295
   88dfc:	9303      	str	r3, [sp, #12]
   88dfe:	f7ff bb27 	b.w	88450 <_vfiprintf_r+0x34c>
   88e02:	9a04      	ldr	r2, [sp, #16]
   88e04:	f898 3001 	ldrb.w	r3, [r8, #1]
   88e08:	f852 0b04 	ldr.w	r0, [r2], #4
   88e0c:	4688      	mov	r8, r1
   88e0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88e12:	9000      	str	r0, [sp, #0]
   88e14:	9204      	str	r2, [sp, #16]
   88e16:	f7ff b9d7 	b.w	881c8 <_vfiprintf_r+0xc4>
   88e1a:	bf00      	nop
   88e1c:	0008cdf4 	.word	0x0008cdf4
   88e20:	0008cde0 	.word	0x0008cde0
   88e24:	0008ce08 	.word	0x0008ce08
   88e28:	0008ce34 	.word	0x0008ce34
   88e2c:	0008ce44 	.word	0x0008ce44

00088e30 <__sbprintf>:
   88e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   88e32:	460c      	mov	r4, r1
   88e34:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   88e38:	f04f 0e00 	mov.w	lr, #0
   88e3c:	4615      	mov	r5, r2
   88e3e:	4606      	mov	r6, r0
   88e40:	461f      	mov	r7, r3
   88e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   88e44:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   88e48:	89e2      	ldrh	r2, [r4, #14]
   88e4a:	8989      	ldrh	r1, [r1, #12]
   88e4c:	9319      	str	r3, [sp, #100]	; 0x64
   88e4e:	69e3      	ldr	r3, [r4, #28]
   88e50:	f8ad 200e 	strh.w	r2, [sp, #14]
   88e54:	6a62      	ldr	r2, [r4, #36]	; 0x24
   88e56:	f021 0102 	bic.w	r1, r1, #2
   88e5a:	9307      	str	r3, [sp, #28]
   88e5c:	a816      	add	r0, sp, #88	; 0x58
   88e5e:	ab1a      	add	r3, sp, #104	; 0x68
   88e60:	f8ad 100c 	strh.w	r1, [sp, #12]
   88e64:	f8cd e018 	str.w	lr, [sp, #24]
   88e68:	9209      	str	r2, [sp, #36]	; 0x24
   88e6a:	9300      	str	r3, [sp, #0]
   88e6c:	9304      	str	r3, [sp, #16]
   88e6e:	f8cd c008 	str.w	ip, [sp, #8]
   88e72:	f8cd c014 	str.w	ip, [sp, #20]
   88e76:	f001 fd4d 	bl	8a914 <__retarget_lock_init_recursive>
   88e7a:	462a      	mov	r2, r5
   88e7c:	463b      	mov	r3, r7
   88e7e:	4669      	mov	r1, sp
   88e80:	4630      	mov	r0, r6
   88e82:	f7ff f93f 	bl	88104 <_vfiprintf_r>
   88e86:	1e05      	subs	r5, r0, #0
   88e88:	db07      	blt.n	88e9a <__sbprintf+0x6a>
   88e8a:	4630      	mov	r0, r6
   88e8c:	4669      	mov	r1, sp
   88e8e:	f001 f917 	bl	8a0c0 <_fflush_r>
   88e92:	2800      	cmp	r0, #0
   88e94:	bf18      	it	ne
   88e96:	f04f 35ff 	movne.w	r5, #4294967295
   88e9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   88e9e:	065b      	lsls	r3, r3, #25
   88ea0:	d503      	bpl.n	88eaa <__sbprintf+0x7a>
   88ea2:	89a3      	ldrh	r3, [r4, #12]
   88ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88ea8:	81a3      	strh	r3, [r4, #12]
   88eaa:	9816      	ldr	r0, [sp, #88]	; 0x58
   88eac:	f001 fd34 	bl	8a918 <__retarget_lock_close_recursive>
   88eb0:	4628      	mov	r0, r5
   88eb2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   88eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00088eb8 <__swsetup_r>:
   88eb8:	b538      	push	{r3, r4, r5, lr}
   88eba:	4b32      	ldr	r3, [pc, #200]	; (88f84 <__swsetup_r+0xcc>)
   88ebc:	4605      	mov	r5, r0
   88ebe:	6818      	ldr	r0, [r3, #0]
   88ec0:	460c      	mov	r4, r1
   88ec2:	b110      	cbz	r0, 88eca <__swsetup_r+0x12>
   88ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88ec6:	2b00      	cmp	r3, #0
   88ec8:	d03c      	beq.n	88f44 <__swsetup_r+0x8c>
   88eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88ece:	0718      	lsls	r0, r3, #28
   88ed0:	b29a      	uxth	r2, r3
   88ed2:	d50c      	bpl.n	88eee <__swsetup_r+0x36>
   88ed4:	6921      	ldr	r1, [r4, #16]
   88ed6:	b1a9      	cbz	r1, 88f04 <__swsetup_r+0x4c>
   88ed8:	f012 0001 	ands.w	r0, r2, #1
   88edc:	d022      	beq.n	88f24 <__swsetup_r+0x6c>
   88ede:	2500      	movs	r5, #0
   88ee0:	6960      	ldr	r0, [r4, #20]
   88ee2:	60a5      	str	r5, [r4, #8]
   88ee4:	4240      	negs	r0, r0
   88ee6:	61a0      	str	r0, [r4, #24]
   88ee8:	b311      	cbz	r1, 88f30 <__swsetup_r+0x78>
   88eea:	2000      	movs	r0, #0
   88eec:	bd38      	pop	{r3, r4, r5, pc}
   88eee:	06d1      	lsls	r1, r2, #27
   88ef0:	d53f      	bpl.n	88f72 <__swsetup_r+0xba>
   88ef2:	0752      	lsls	r2, r2, #29
   88ef4:	d429      	bmi.n	88f4a <__swsetup_r+0x92>
   88ef6:	6921      	ldr	r1, [r4, #16]
   88ef8:	f043 0308 	orr.w	r3, r3, #8
   88efc:	81a3      	strh	r3, [r4, #12]
   88efe:	b29a      	uxth	r2, r3
   88f00:	2900      	cmp	r1, #0
   88f02:	d1e9      	bne.n	88ed8 <__swsetup_r+0x20>
   88f04:	f402 7020 	and.w	r0, r2, #640	; 0x280
   88f08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   88f0c:	d0e4      	beq.n	88ed8 <__swsetup_r+0x20>
   88f0e:	4628      	mov	r0, r5
   88f10:	4621      	mov	r1, r4
   88f12:	f001 fd35 	bl	8a980 <__smakebuf_r>
   88f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88f1a:	6921      	ldr	r1, [r4, #16]
   88f1c:	b29a      	uxth	r2, r3
   88f1e:	f012 0001 	ands.w	r0, r2, #1
   88f22:	d1dc      	bne.n	88ede <__swsetup_r+0x26>
   88f24:	0795      	lsls	r5, r2, #30
   88f26:	bf58      	it	pl
   88f28:	6960      	ldrpl	r0, [r4, #20]
   88f2a:	60a0      	str	r0, [r4, #8]
   88f2c:	2900      	cmp	r1, #0
   88f2e:	d1dc      	bne.n	88eea <__swsetup_r+0x32>
   88f30:	0612      	lsls	r2, r2, #24
   88f32:	bf58      	it	pl
   88f34:	4608      	movpl	r0, r1
   88f36:	d5d9      	bpl.n	88eec <__swsetup_r+0x34>
   88f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88f3c:	f04f 30ff 	mov.w	r0, #4294967295
   88f40:	81a3      	strh	r3, [r4, #12]
   88f42:	bd38      	pop	{r3, r4, r5, pc}
   88f44:	f001 f918 	bl	8a178 <__sinit>
   88f48:	e7bf      	b.n	88eca <__swsetup_r+0x12>
   88f4a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   88f4c:	b151      	cbz	r1, 88f64 <__swsetup_r+0xac>
   88f4e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   88f52:	4291      	cmp	r1, r2
   88f54:	d004      	beq.n	88f60 <__swsetup_r+0xa8>
   88f56:	4628      	mov	r0, r5
   88f58:	f001 fa32 	bl	8a3c0 <_free_r>
   88f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   88f60:	2200      	movs	r2, #0
   88f62:	6322      	str	r2, [r4, #48]	; 0x30
   88f64:	2200      	movs	r2, #0
   88f66:	6921      	ldr	r1, [r4, #16]
   88f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   88f6c:	e9c4 1200 	strd	r1, r2, [r4]
   88f70:	e7c2      	b.n	88ef8 <__swsetup_r+0x40>
   88f72:	2209      	movs	r2, #9
   88f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88f78:	602a      	str	r2, [r5, #0]
   88f7a:	f04f 30ff 	mov.w	r0, #4294967295
   88f7e:	81a3      	strh	r3, [r4, #12]
   88f80:	bd38      	pop	{r3, r4, r5, pc}
   88f82:	bf00      	nop
   88f84:	20000710 	.word	0x20000710

00088f88 <register_fini>:
   88f88:	4b02      	ldr	r3, [pc, #8]	; (88f94 <register_fini+0xc>)
   88f8a:	b113      	cbz	r3, 88f92 <register_fini+0xa>
   88f8c:	4802      	ldr	r0, [pc, #8]	; (88f98 <register_fini+0x10>)
   88f8e:	f000 b805 	b.w	88f9c <atexit>
   88f92:	4770      	bx	lr
   88f94:	00000000 	.word	0x00000000
   88f98:	0008a1ed 	.word	0x0008a1ed

00088f9c <atexit>:
   88f9c:	2300      	movs	r3, #0
   88f9e:	4601      	mov	r1, r0
   88fa0:	461a      	mov	r2, r3
   88fa2:	4618      	mov	r0, r3
   88fa4:	f002 bfca 	b.w	8bf3c <__register_exitproc>

00088fa8 <quorem>:
   88fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88fac:	6903      	ldr	r3, [r0, #16]
   88fae:	690d      	ldr	r5, [r1, #16]
   88fb0:	b083      	sub	sp, #12
   88fb2:	42ab      	cmp	r3, r5
   88fb4:	f2c0 8084 	blt.w	890c0 <quorem+0x118>
   88fb8:	3d01      	subs	r5, #1
   88fba:	f101 0614 	add.w	r6, r1, #20
   88fbe:	f100 0914 	add.w	r9, r0, #20
   88fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   88fc6:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   88fca:	3301      	adds	r3, #1
   88fcc:	468e      	mov	lr, r1
   88fce:	00a9      	lsls	r1, r5, #2
   88fd0:	9100      	str	r1, [sp, #0]
   88fd2:	429a      	cmp	r2, r3
   88fd4:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   88fd8:	4682      	mov	sl, r0
   88fda:	fbb2 f7f3 	udiv	r7, r2, r3
   88fde:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   88fe2:	9101      	str	r1, [sp, #4]
   88fe4:	d337      	bcc.n	89056 <quorem+0xae>
   88fe6:	2200      	movs	r2, #0
   88fe8:	46b4      	mov	ip, r6
   88fea:	4614      	mov	r4, r2
   88fec:	4648      	mov	r0, r9
   88fee:	f85c 3b04 	ldr.w	r3, [ip], #4
   88ff2:	6801      	ldr	r1, [r0, #0]
   88ff4:	fa1f fb83 	uxth.w	fp, r3
   88ff8:	fb07 220b 	mla	r2, r7, fp, r2
   88ffc:	0c1b      	lsrs	r3, r3, #16
   88ffe:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   89002:	fb07 bb03 	mla	fp, r7, r3, fp
   89006:	b293      	uxth	r3, r2
   89008:	1ae3      	subs	r3, r4, r3
   8900a:	b28a      	uxth	r2, r1
   8900c:	fa1f f48b 	uxth.w	r4, fp
   89010:	4413      	add	r3, r2
   89012:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89016:	eb04 4423 	add.w	r4, r4, r3, asr #16
   8901a:	b29b      	uxth	r3, r3
   8901c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   89020:	45e0      	cmp	r8, ip
   89022:	f840 3b04 	str.w	r3, [r0], #4
   89026:	ea4f 4424 	mov.w	r4, r4, asr #16
   8902a:	ea4f 421b 	mov.w	r2, fp, lsr #16
   8902e:	d2de      	bcs.n	88fee <quorem+0x46>
   89030:	9b00      	ldr	r3, [sp, #0]
   89032:	f859 3003 	ldr.w	r3, [r9, r3]
   89036:	b973      	cbnz	r3, 89056 <quorem+0xae>
   89038:	9b01      	ldr	r3, [sp, #4]
   8903a:	3b04      	subs	r3, #4
   8903c:	4599      	cmp	r9, r3
   8903e:	d304      	bcc.n	8904a <quorem+0xa2>
   89040:	e007      	b.n	89052 <quorem+0xaa>
   89042:	4599      	cmp	r9, r3
   89044:	f105 35ff 	add.w	r5, r5, #4294967295
   89048:	d203      	bcs.n	89052 <quorem+0xaa>
   8904a:	f853 2904 	ldr.w	r2, [r3], #-4
   8904e:	2a00      	cmp	r2, #0
   89050:	d0f7      	beq.n	89042 <quorem+0x9a>
   89052:	f8ca 5010 	str.w	r5, [sl, #16]
   89056:	4671      	mov	r1, lr
   89058:	4650      	mov	r0, sl
   8905a:	f002 fab1 	bl	8b5c0 <__mcmp>
   8905e:	2800      	cmp	r0, #0
   89060:	db2a      	blt.n	890b8 <quorem+0x110>
   89062:	4648      	mov	r0, r9
   89064:	2300      	movs	r3, #0
   89066:	3701      	adds	r7, #1
   89068:	f856 1b04 	ldr.w	r1, [r6], #4
   8906c:	6804      	ldr	r4, [r0, #0]
   8906e:	b28a      	uxth	r2, r1
   89070:	1a9a      	subs	r2, r3, r2
   89072:	0c0b      	lsrs	r3, r1, #16
   89074:	b2a1      	uxth	r1, r4
   89076:	440a      	add	r2, r1
   89078:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   8907c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89080:	b292      	uxth	r2, r2
   89082:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89086:	45b0      	cmp	r8, r6
   89088:	f840 2b04 	str.w	r2, [r0], #4
   8908c:	ea4f 4323 	mov.w	r3, r3, asr #16
   89090:	d2ea      	bcs.n	89068 <quorem+0xc0>
   89092:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89096:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   8909a:	b96a      	cbnz	r2, 890b8 <quorem+0x110>
   8909c:	3b04      	subs	r3, #4
   8909e:	4599      	cmp	r9, r3
   890a0:	d304      	bcc.n	890ac <quorem+0x104>
   890a2:	e007      	b.n	890b4 <quorem+0x10c>
   890a4:	4599      	cmp	r9, r3
   890a6:	f105 35ff 	add.w	r5, r5, #4294967295
   890aa:	d203      	bcs.n	890b4 <quorem+0x10c>
   890ac:	f853 2904 	ldr.w	r2, [r3], #-4
   890b0:	2a00      	cmp	r2, #0
   890b2:	d0f7      	beq.n	890a4 <quorem+0xfc>
   890b4:	f8ca 5010 	str.w	r5, [sl, #16]
   890b8:	4638      	mov	r0, r7
   890ba:	b003      	add	sp, #12
   890bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   890c0:	2000      	movs	r0, #0
   890c2:	b003      	add	sp, #12
   890c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000890c8 <_dtoa_r>:
   890c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   890cc:	4616      	mov	r6, r2
   890ce:	461f      	mov	r7, r3
   890d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   890d2:	b09b      	sub	sp, #108	; 0x6c
   890d4:	4604      	mov	r4, r0
   890d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   890da:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   890dc:	b141      	cbz	r1, 890f0 <_dtoa_r+0x28>
   890de:	2301      	movs	r3, #1
   890e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   890e2:	4093      	lsls	r3, r2
   890e4:	e9c1 2301 	strd	r2, r3, [r1, #4]
   890e8:	f002 f83c 	bl	8b164 <_Bfree>
   890ec:	2300      	movs	r3, #0
   890ee:	6423      	str	r3, [r4, #64]	; 0x40
   890f0:	f1b7 0900 	subs.w	r9, r7, #0
   890f4:	bfb4      	ite	lt
   890f6:	2301      	movlt	r3, #1
   890f8:	2300      	movge	r3, #0
   890fa:	602b      	str	r3, [r5, #0]
   890fc:	4b76      	ldr	r3, [pc, #472]	; (892d8 <_dtoa_r+0x210>)
   890fe:	bfbc      	itt	lt
   89100:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89104:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89108:	ea33 0309 	bics.w	r3, r3, r9
   8910c:	f000 80ab 	beq.w	89266 <_dtoa_r+0x19e>
   89110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89114:	4610      	mov	r0, r2
   89116:	4619      	mov	r1, r3
   89118:	2200      	movs	r2, #0
   8911a:	2300      	movs	r3, #0
   8911c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89120:	f003 fcf8 	bl	8cb14 <__aeabi_dcmpeq>
   89124:	4680      	mov	r8, r0
   89126:	b170      	cbz	r0, 89146 <_dtoa_r+0x7e>
   89128:	2301      	movs	r3, #1
   8912a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8912c:	6013      	str	r3, [r2, #0]
   8912e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89130:	2b00      	cmp	r3, #0
   89132:	f000 82c2 	beq.w	896ba <_dtoa_r+0x5f2>
   89136:	4869      	ldr	r0, [pc, #420]	; (892dc <_dtoa_r+0x214>)
   89138:	6018      	str	r0, [r3, #0]
   8913a:	1e43      	subs	r3, r0, #1
   8913c:	9303      	str	r3, [sp, #12]
   8913e:	9803      	ldr	r0, [sp, #12]
   89140:	b01b      	add	sp, #108	; 0x6c
   89142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89146:	aa18      	add	r2, sp, #96	; 0x60
   89148:	ab19      	add	r3, sp, #100	; 0x64
   8914a:	e9cd 3200 	strd	r3, r2, [sp]
   8914e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89152:	4620      	mov	r0, r4
   89154:	f002 fafa 	bl	8b74c <__d2b>
   89158:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8915c:	4682      	mov	sl, r0
   8915e:	f040 8098 	bne.w	89292 <_dtoa_r+0x1ca>
   89162:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   89166:	4445      	add	r5, r8
   89168:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8916c:	2820      	cmp	r0, #32
   8916e:	f340 8390 	ble.w	89892 <_dtoa_r+0x7ca>
   89172:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   89176:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8917a:	fa09 f903 	lsl.w	r9, r9, r3
   8917e:	fa26 f000 	lsr.w	r0, r6, r0
   89182:	ea49 0000 	orr.w	r0, r9, r0
   89186:	f003 f9e3 	bl	8c550 <__aeabi_ui2d>
   8918a:	2201      	movs	r2, #1
   8918c:	3d01      	subs	r5, #1
   8918e:	920f      	str	r2, [sp, #60]	; 0x3c
   89190:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89194:	2200      	movs	r2, #0
   89196:	4b52      	ldr	r3, [pc, #328]	; (892e0 <_dtoa_r+0x218>)
   89198:	f003 f89c 	bl	8c2d4 <__aeabi_dsub>
   8919c:	a348      	add	r3, pc, #288	; (adr r3, 892c0 <_dtoa_r+0x1f8>)
   8919e:	e9d3 2300 	ldrd	r2, r3, [r3]
   891a2:	f003 fa4f 	bl	8c644 <__aeabi_dmul>
   891a6:	a348      	add	r3, pc, #288	; (adr r3, 892c8 <_dtoa_r+0x200>)
   891a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   891ac:	f003 f894 	bl	8c2d8 <__adddf3>
   891b0:	4606      	mov	r6, r0
   891b2:	4628      	mov	r0, r5
   891b4:	460f      	mov	r7, r1
   891b6:	f003 f9db 	bl	8c570 <__aeabi_i2d>
   891ba:	a345      	add	r3, pc, #276	; (adr r3, 892d0 <_dtoa_r+0x208>)
   891bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   891c0:	f003 fa40 	bl	8c644 <__aeabi_dmul>
   891c4:	4602      	mov	r2, r0
   891c6:	460b      	mov	r3, r1
   891c8:	4630      	mov	r0, r6
   891ca:	4639      	mov	r1, r7
   891cc:	f003 f884 	bl	8c2d8 <__adddf3>
   891d0:	4606      	mov	r6, r0
   891d2:	460f      	mov	r7, r1
   891d4:	f003 fce6 	bl	8cba4 <__aeabi_d2iz>
   891d8:	2200      	movs	r2, #0
   891da:	4683      	mov	fp, r0
   891dc:	2300      	movs	r3, #0
   891de:	4630      	mov	r0, r6
   891e0:	4639      	mov	r1, r7
   891e2:	f003 fca1 	bl	8cb28 <__aeabi_dcmplt>
   891e6:	2800      	cmp	r0, #0
   891e8:	f040 825a 	bne.w	896a0 <_dtoa_r+0x5d8>
   891ec:	f1bb 0f16 	cmp.w	fp, #22
   891f0:	f200 8248 	bhi.w	89684 <_dtoa_r+0x5bc>
   891f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   891f8:	4b3a      	ldr	r3, [pc, #232]	; (892e4 <_dtoa_r+0x21c>)
   891fa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   891fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   89202:	f003 fc91 	bl	8cb28 <__aeabi_dcmplt>
   89206:	2800      	cmp	r0, #0
   89208:	d072      	beq.n	892f0 <_dtoa_r+0x228>
   8920a:	2300      	movs	r3, #0
   8920c:	eba8 0505 	sub.w	r5, r8, r5
   89210:	930e      	str	r3, [sp, #56]	; 0x38
   89212:	1e6b      	subs	r3, r5, #1
   89214:	f10b 3bff 	add.w	fp, fp, #4294967295
   89218:	9306      	str	r3, [sp, #24]
   8921a:	f100 823b 	bmi.w	89694 <_dtoa_r+0x5cc>
   8921e:	2300      	movs	r3, #0
   89220:	930b      	str	r3, [sp, #44]	; 0x2c
   89222:	f1bb 0f00 	cmp.w	fp, #0
   89226:	da6b      	bge.n	89300 <_dtoa_r+0x238>
   89228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8922a:	f8cd b01c 	str.w	fp, [sp, #28]
   8922e:	eba3 030b 	sub.w	r3, r3, fp
   89232:	930b      	str	r3, [sp, #44]	; 0x2c
   89234:	f1cb 0300 	rsb	r3, fp, #0
   89238:	930d      	str	r3, [sp, #52]	; 0x34
   8923a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8923c:	f04f 0b00 	mov.w	fp, #0
   89240:	2b09      	cmp	r3, #9
   89242:	d866      	bhi.n	89312 <_dtoa_r+0x24a>
   89244:	2b05      	cmp	r3, #5
   89246:	f340 8322 	ble.w	8988e <_dtoa_r+0x7c6>
   8924a:	2500      	movs	r5, #0
   8924c:	3b04      	subs	r3, #4
   8924e:	9324      	str	r3, [sp, #144]	; 0x90
   89250:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89252:	3b02      	subs	r3, #2
   89254:	2b03      	cmp	r3, #3
   89256:	f200 866e 	bhi.w	89f36 <_dtoa_r+0xe6e>
   8925a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8925e:	043b      	.short	0x043b
   89260:	042f0438 	.word	0x042f0438
   89264:	0412      	.short	0x0412
   89266:	f242 730f 	movw	r3, #9999	; 0x270f
   8926a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8926c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89270:	6013      	str	r3, [r2, #0]
   89272:	ea59 0306 	orrs.w	r3, r9, r6
   89276:	d11c      	bne.n	892b2 <_dtoa_r+0x1ea>
   89278:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8927a:	2b00      	cmp	r3, #0
   8927c:	f000 8657 	beq.w	89f2e <_dtoa_r+0xe66>
   89280:	4b19      	ldr	r3, [pc, #100]	; (892e8 <_dtoa_r+0x220>)
   89282:	9303      	str	r3, [sp, #12]
   89284:	3308      	adds	r3, #8
   89286:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89288:	9803      	ldr	r0, [sp, #12]
   8928a:	6013      	str	r3, [r2, #0]
   8928c:	b01b      	add	sp, #108	; 0x6c
   8928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89292:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89296:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8929a:	4608      	mov	r0, r1
   8929c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   892a0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   892a4:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   892a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   892ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   892b0:	e770      	b.n	89194 <_dtoa_r+0xcc>
   892b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   892b4:	2b00      	cmp	r3, #0
   892b6:	f040 83c8 	bne.w	89a4a <_dtoa_r+0x982>
   892ba:	4b0c      	ldr	r3, [pc, #48]	; (892ec <_dtoa_r+0x224>)
   892bc:	9303      	str	r3, [sp, #12]
   892be:	e73e      	b.n	8913e <_dtoa_r+0x76>
   892c0:	636f4361 	.word	0x636f4361
   892c4:	3fd287a7 	.word	0x3fd287a7
   892c8:	8b60c8b3 	.word	0x8b60c8b3
   892cc:	3fc68a28 	.word	0x3fc68a28
   892d0:	509f79fb 	.word	0x509f79fb
   892d4:	3fd34413 	.word	0x3fd34413
   892d8:	7ff00000 	.word	0x7ff00000
   892dc:	0008ce11 	.word	0x0008ce11
   892e0:	3ff80000 	.word	0x3ff80000
   892e4:	0008cfb0 	.word	0x0008cfb0
   892e8:	0008ce58 	.word	0x0008ce58
   892ec:	0008ce54 	.word	0x0008ce54
   892f0:	eba8 0505 	sub.w	r5, r8, r5
   892f4:	1e6b      	subs	r3, r5, #1
   892f6:	9306      	str	r3, [sp, #24]
   892f8:	f100 84a9 	bmi.w	89c4e <_dtoa_r+0xb86>
   892fc:	900e      	str	r0, [sp, #56]	; 0x38
   892fe:	900b      	str	r0, [sp, #44]	; 0x2c
   89300:	9b06      	ldr	r3, [sp, #24]
   89302:	445b      	add	r3, fp
   89304:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89308:	2300      	movs	r3, #0
   8930a:	930d      	str	r3, [sp, #52]	; 0x34
   8930c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8930e:	2b09      	cmp	r3, #9
   89310:	d998      	bls.n	89244 <_dtoa_r+0x17c>
   89312:	2300      	movs	r3, #0
   89314:	2501      	movs	r5, #1
   89316:	9324      	str	r3, [sp, #144]	; 0x90
   89318:	9325      	str	r3, [sp, #148]	; 0x94
   8931a:	f04f 33ff 	mov.w	r3, #4294967295
   8931e:	950c      	str	r5, [sp, #48]	; 0x30
   89320:	930a      	str	r3, [sp, #40]	; 0x28
   89322:	2100      	movs	r1, #0
   89324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89326:	6461      	str	r1, [r4, #68]	; 0x44
   89328:	9312      	str	r3, [sp, #72]	; 0x48
   8932a:	4620      	mov	r0, r4
   8932c:	f001 fef4 	bl	8b118 <_Balloc>
   89330:	9003      	str	r0, [sp, #12]
   89332:	2800      	cmp	r0, #0
   89334:	f000 8607 	beq.w	89f46 <_dtoa_r+0xe7e>
   89338:	9b03      	ldr	r3, [sp, #12]
   8933a:	6423      	str	r3, [r4, #64]	; 0x40
   8933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8933e:	2b0e      	cmp	r3, #14
   89340:	f200 80e9 	bhi.w	89516 <_dtoa_r+0x44e>
   89344:	2d00      	cmp	r5, #0
   89346:	f000 80e6 	beq.w	89516 <_dtoa_r+0x44e>
   8934a:	9907      	ldr	r1, [sp, #28]
   8934c:	2900      	cmp	r1, #0
   8934e:	f340 8452 	ble.w	89bf6 <_dtoa_r+0xb2e>
   89352:	4bb5      	ldr	r3, [pc, #724]	; (89628 <_dtoa_r+0x560>)
   89354:	f001 020f 	and.w	r2, r1, #15
   89358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8935c:	05c8      	lsls	r0, r1, #23
   8935e:	ea4f 1521 	mov.w	r5, r1, asr #4
   89362:	e9d3 6700 	ldrd	r6, r7, [r3]
   89366:	f140 83ee 	bpl.w	89b46 <_dtoa_r+0xa7e>
   8936a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8936e:	4baf      	ldr	r3, [pc, #700]	; (8962c <_dtoa_r+0x564>)
   89370:	f04f 0903 	mov.w	r9, #3
   89374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89378:	f003 fa8e 	bl	8c898 <__aeabi_ddiv>
   8937c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89380:	f005 050f 	and.w	r5, r5, #15
   89384:	b18d      	cbz	r5, 893aa <_dtoa_r+0x2e2>
   89386:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8962c <_dtoa_r+0x564>
   8938a:	07e9      	lsls	r1, r5, #31
   8938c:	d509      	bpl.n	893a2 <_dtoa_r+0x2da>
   8938e:	e9d8 2300 	ldrd	r2, r3, [r8]
   89392:	4630      	mov	r0, r6
   89394:	4639      	mov	r1, r7
   89396:	f003 f955 	bl	8c644 <__aeabi_dmul>
   8939a:	4606      	mov	r6, r0
   8939c:	460f      	mov	r7, r1
   8939e:	f109 0901 	add.w	r9, r9, #1
   893a2:	106d      	asrs	r5, r5, #1
   893a4:	f108 0808 	add.w	r8, r8, #8
   893a8:	d1ef      	bne.n	8938a <_dtoa_r+0x2c2>
   893aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   893ae:	4632      	mov	r2, r6
   893b0:	463b      	mov	r3, r7
   893b2:	f003 fa71 	bl	8c898 <__aeabi_ddiv>
   893b6:	4606      	mov	r6, r0
   893b8:	460f      	mov	r7, r1
   893ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   893bc:	b143      	cbz	r3, 893d0 <_dtoa_r+0x308>
   893be:	2200      	movs	r2, #0
   893c0:	4630      	mov	r0, r6
   893c2:	4639      	mov	r1, r7
   893c4:	4b9a      	ldr	r3, [pc, #616]	; (89630 <_dtoa_r+0x568>)
   893c6:	f003 fbaf 	bl	8cb28 <__aeabi_dcmplt>
   893ca:	2800      	cmp	r0, #0
   893cc:	f040 853b 	bne.w	89e46 <_dtoa_r+0xd7e>
   893d0:	4648      	mov	r0, r9
   893d2:	f003 f8cd 	bl	8c570 <__aeabi_i2d>
   893d6:	4632      	mov	r2, r6
   893d8:	463b      	mov	r3, r7
   893da:	f003 f933 	bl	8c644 <__aeabi_dmul>
   893de:	4b95      	ldr	r3, [pc, #596]	; (89634 <_dtoa_r+0x56c>)
   893e0:	2200      	movs	r2, #0
   893e2:	f002 ff79 	bl	8c2d8 <__adddf3>
   893e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893e8:	4680      	mov	r8, r0
   893ea:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   893ee:	2b00      	cmp	r3, #0
   893f0:	f000 83ce 	beq.w	89b90 <_dtoa_r+0xac8>
   893f4:	9b07      	ldr	r3, [sp, #28]
   893f6:	9313      	str	r3, [sp, #76]	; 0x4c
   893f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   893fa:	9310      	str	r3, [sp, #64]	; 0x40
   893fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   893fe:	2b00      	cmp	r3, #0
   89400:	f000 84b7 	beq.w	89d72 <_dtoa_r+0xcaa>
   89404:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89406:	4b88      	ldr	r3, [pc, #544]	; (89628 <_dtoa_r+0x560>)
   89408:	2000      	movs	r0, #0
   8940a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8940e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89412:	4989      	ldr	r1, [pc, #548]	; (89638 <_dtoa_r+0x570>)
   89414:	f003 fa40 	bl	8c898 <__aeabi_ddiv>
   89418:	4642      	mov	r2, r8
   8941a:	464b      	mov	r3, r9
   8941c:	f002 ff5a 	bl	8c2d4 <__aeabi_dsub>
   89420:	4602      	mov	r2, r0
   89422:	460b      	mov	r3, r1
   89424:	4630      	mov	r0, r6
   89426:	4639      	mov	r1, r7
   89428:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8942c:	f003 fbba 	bl	8cba4 <__aeabi_d2iz>
   89430:	4680      	mov	r8, r0
   89432:	f003 f89d 	bl	8c570 <__aeabi_i2d>
   89436:	4602      	mov	r2, r0
   89438:	460b      	mov	r3, r1
   8943a:	4630      	mov	r0, r6
   8943c:	4639      	mov	r1, r7
   8943e:	f002 ff49 	bl	8c2d4 <__aeabi_dsub>
   89442:	9d03      	ldr	r5, [sp, #12]
   89444:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89448:	4606      	mov	r6, r0
   8944a:	460f      	mov	r7, r1
   8944c:	4602      	mov	r2, r0
   8944e:	f805 3b01 	strb.w	r3, [r5], #1
   89452:	460b      	mov	r3, r1
   89454:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89458:	f003 fb84 	bl	8cb64 <__aeabi_dcmpgt>
   8945c:	2800      	cmp	r0, #0
   8945e:	f040 853b 	bne.w	89ed8 <_dtoa_r+0xe10>
   89462:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   89466:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8946a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8946e:	f04f 0900 	mov.w	r9, #0
   89472:	9410      	str	r4, [sp, #64]	; 0x40
   89474:	e02a      	b.n	894cc <_dtoa_r+0x404>
   89476:	f109 0901 	add.w	r9, r9, #1
   8947a:	45c1      	cmp	r9, r8
   8947c:	da48      	bge.n	89510 <_dtoa_r+0x448>
   8947e:	4650      	mov	r0, sl
   89480:	4659      	mov	r1, fp
   89482:	2200      	movs	r2, #0
   89484:	4b6d      	ldr	r3, [pc, #436]	; (8963c <_dtoa_r+0x574>)
   89486:	f003 f8dd 	bl	8c644 <__aeabi_dmul>
   8948a:	2200      	movs	r2, #0
   8948c:	4b6b      	ldr	r3, [pc, #428]	; (8963c <_dtoa_r+0x574>)
   8948e:	4682      	mov	sl, r0
   89490:	468b      	mov	fp, r1
   89492:	4630      	mov	r0, r6
   89494:	4639      	mov	r1, r7
   89496:	f003 f8d5 	bl	8c644 <__aeabi_dmul>
   8949a:	460f      	mov	r7, r1
   8949c:	4606      	mov	r6, r0
   8949e:	f003 fb81 	bl	8cba4 <__aeabi_d2iz>
   894a2:	4604      	mov	r4, r0
   894a4:	f003 f864 	bl	8c570 <__aeabi_i2d>
   894a8:	4602      	mov	r2, r0
   894aa:	460b      	mov	r3, r1
   894ac:	4630      	mov	r0, r6
   894ae:	4639      	mov	r1, r7
   894b0:	f002 ff10 	bl	8c2d4 <__aeabi_dsub>
   894b4:	3430      	adds	r4, #48	; 0x30
   894b6:	4652      	mov	r2, sl
   894b8:	465b      	mov	r3, fp
   894ba:	f805 4b01 	strb.w	r4, [r5], #1
   894be:	4606      	mov	r6, r0
   894c0:	460f      	mov	r7, r1
   894c2:	f003 fb31 	bl	8cb28 <__aeabi_dcmplt>
   894c6:	2800      	cmp	r0, #0
   894c8:	f040 8503 	bne.w	89ed2 <_dtoa_r+0xe0a>
   894cc:	4632      	mov	r2, r6
   894ce:	463b      	mov	r3, r7
   894d0:	2000      	movs	r0, #0
   894d2:	4957      	ldr	r1, [pc, #348]	; (89630 <_dtoa_r+0x568>)
   894d4:	f002 fefe 	bl	8c2d4 <__aeabi_dsub>
   894d8:	4652      	mov	r2, sl
   894da:	465b      	mov	r3, fp
   894dc:	f003 fb24 	bl	8cb28 <__aeabi_dcmplt>
   894e0:	2800      	cmp	r0, #0
   894e2:	d0c8      	beq.n	89476 <_dtoa_r+0x3ae>
   894e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   894e6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   894ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
   894ec:	9a03      	ldr	r2, [sp, #12]
   894ee:	9307      	str	r3, [sp, #28]
   894f0:	e002      	b.n	894f8 <_dtoa_r+0x430>
   894f2:	4295      	cmp	r5, r2
   894f4:	f000 84d2 	beq.w	89e9c <_dtoa_r+0xdd4>
   894f8:	46a9      	mov	r9, r5
   894fa:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   894fe:	2b39      	cmp	r3, #57	; 0x39
   89500:	d0f7      	beq.n	894f2 <_dtoa_r+0x42a>
   89502:	3301      	adds	r3, #1
   89504:	b2db      	uxtb	r3, r3
   89506:	702b      	strb	r3, [r5, #0]
   89508:	9b07      	ldr	r3, [sp, #28]
   8950a:	3301      	adds	r3, #1
   8950c:	9307      	str	r3, [sp, #28]
   8950e:	e1a0      	b.n	89852 <_dtoa_r+0x78a>
   89510:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89512:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89516:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89518:	2b00      	cmp	r3, #0
   8951a:	f2c0 8093 	blt.w	89644 <_dtoa_r+0x57c>
   8951e:	9a07      	ldr	r2, [sp, #28]
   89520:	2a0e      	cmp	r2, #14
   89522:	f300 808f 	bgt.w	89644 <_dtoa_r+0x57c>
   89526:	4b40      	ldr	r3, [pc, #256]	; (89628 <_dtoa_r+0x560>)
   89528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8952c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89530:	e9cd 2304 	strd	r2, r3, [sp, #16]
   89534:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89536:	2b00      	cmp	r3, #0
   89538:	da1a      	bge.n	89570 <_dtoa_r+0x4a8>
   8953a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8953c:	2b00      	cmp	r3, #0
   8953e:	dc17      	bgt.n	89570 <_dtoa_r+0x4a8>
   89540:	f040 833f 	bne.w	89bc2 <_dtoa_r+0xafa>
   89544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89548:	2200      	movs	r2, #0
   8954a:	4b3d      	ldr	r3, [pc, #244]	; (89640 <_dtoa_r+0x578>)
   8954c:	f003 f87a 	bl	8c644 <__aeabi_dmul>
   89550:	4602      	mov	r2, r0
   89552:	460b      	mov	r3, r1
   89554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89558:	f003 faf0 	bl	8cb3c <__aeabi_dcmple>
   8955c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   89560:	4645      	mov	r5, r8
   89562:	2800      	cmp	r0, #0
   89564:	f000 82cd 	beq.w	89b02 <_dtoa_r+0xa3a>
   89568:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8956a:	9f03      	ldr	r7, [sp, #12]
   8956c:	43de      	mvns	r6, r3
   8956e:	e2d0      	b.n	89b12 <_dtoa_r+0xa4a>
   89570:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   89574:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89578:	4632      	mov	r2, r6
   8957a:	463b      	mov	r3, r7
   8957c:	f003 f98c 	bl	8c898 <__aeabi_ddiv>
   89580:	f003 fb10 	bl	8cba4 <__aeabi_d2iz>
   89584:	4680      	mov	r8, r0
   89586:	f002 fff3 	bl	8c570 <__aeabi_i2d>
   8958a:	4632      	mov	r2, r6
   8958c:	463b      	mov	r3, r7
   8958e:	f003 f859 	bl	8c644 <__aeabi_dmul>
   89592:	460b      	mov	r3, r1
   89594:	4602      	mov	r2, r0
   89596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8959a:	f002 fe9b 	bl	8c2d4 <__aeabi_dsub>
   8959e:	9d03      	ldr	r5, [sp, #12]
   895a0:	f108 0330 	add.w	r3, r8, #48	; 0x30
   895a4:	f805 3b01 	strb.w	r3, [r5], #1
   895a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   895aa:	2b01      	cmp	r3, #1
   895ac:	f000 837f 	beq.w	89cae <_dtoa_r+0xbe6>
   895b0:	f8cd a018 	str.w	sl, [sp, #24]
   895b4:	f04f 0901 	mov.w	r9, #1
   895b8:	469b      	mov	fp, r3
   895ba:	46aa      	mov	sl, r5
   895bc:	9408      	str	r4, [sp, #32]
   895be:	e01d      	b.n	895fc <_dtoa_r+0x534>
   895c0:	4632      	mov	r2, r6
   895c2:	463b      	mov	r3, r7
   895c4:	4620      	mov	r0, r4
   895c6:	4629      	mov	r1, r5
   895c8:	f003 f966 	bl	8c898 <__aeabi_ddiv>
   895cc:	f003 faea 	bl	8cba4 <__aeabi_d2iz>
   895d0:	4680      	mov	r8, r0
   895d2:	f002 ffcd 	bl	8c570 <__aeabi_i2d>
   895d6:	4632      	mov	r2, r6
   895d8:	463b      	mov	r3, r7
   895da:	f003 f833 	bl	8c644 <__aeabi_dmul>
   895de:	f109 0901 	add.w	r9, r9, #1
   895e2:	460b      	mov	r3, r1
   895e4:	4602      	mov	r2, r0
   895e6:	4629      	mov	r1, r5
   895e8:	4620      	mov	r0, r4
   895ea:	f002 fe73 	bl	8c2d4 <__aeabi_dsub>
   895ee:	f108 0330 	add.w	r3, r8, #48	; 0x30
   895f2:	45cb      	cmp	fp, r9
   895f4:	f80a 3b01 	strb.w	r3, [sl], #1
   895f8:	f000 8355 	beq.w	89ca6 <_dtoa_r+0xbde>
   895fc:	2200      	movs	r2, #0
   895fe:	4b0f      	ldr	r3, [pc, #60]	; (8963c <_dtoa_r+0x574>)
   89600:	f003 f820 	bl	8c644 <__aeabi_dmul>
   89604:	2200      	movs	r2, #0
   89606:	2300      	movs	r3, #0
   89608:	4604      	mov	r4, r0
   8960a:	460d      	mov	r5, r1
   8960c:	f003 fa82 	bl	8cb14 <__aeabi_dcmpeq>
   89610:	2800      	cmp	r0, #0
   89612:	d0d5      	beq.n	895c0 <_dtoa_r+0x4f8>
   89614:	4655      	mov	r5, sl
   89616:	9c08      	ldr	r4, [sp, #32]
   89618:	f8dd a018 	ldr.w	sl, [sp, #24]
   8961c:	9b07      	ldr	r3, [sp, #28]
   8961e:	46a9      	mov	r9, r5
   89620:	3301      	adds	r3, #1
   89622:	9307      	str	r3, [sp, #28]
   89624:	e115      	b.n	89852 <_dtoa_r+0x78a>
   89626:	bf00      	nop
   89628:	0008cfb0 	.word	0x0008cfb0
   8962c:	0008cf88 	.word	0x0008cf88
   89630:	3ff00000 	.word	0x3ff00000
   89634:	401c0000 	.word	0x401c0000
   89638:	3fe00000 	.word	0x3fe00000
   8963c:	40240000 	.word	0x40240000
   89640:	40140000 	.word	0x40140000
   89644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89646:	2a00      	cmp	r2, #0
   89648:	d03d      	beq.n	896c6 <_dtoa_r+0x5fe>
   8964a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8964c:	2a01      	cmp	r2, #1
   8964e:	f340 82bc 	ble.w	89bca <_dtoa_r+0xb02>
   89652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89654:	1e5f      	subs	r7, r3, #1
   89656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89658:	42bb      	cmp	r3, r7
   8965a:	f2c0 826e 	blt.w	89b3a <_dtoa_r+0xa72>
   8965e:	1bdf      	subs	r7, r3, r7
   89660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89662:	2b00      	cmp	r3, #0
   89664:	f2c0 8354 	blt.w	89d10 <_dtoa_r+0xc48>
   89668:	9a06      	ldr	r2, [sp, #24]
   8966a:	4611      	mov	r1, r2
   8966c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8966e:	4419      	add	r1, r3
   89670:	4616      	mov	r6, r2
   89672:	441a      	add	r2, r3
   89674:	9106      	str	r1, [sp, #24]
   89676:	920b      	str	r2, [sp, #44]	; 0x2c
   89678:	2101      	movs	r1, #1
   8967a:	4620      	mov	r0, r4
   8967c:	f001 fe1a 	bl	8b2b4 <__i2b>
   89680:	4605      	mov	r5, r0
   89682:	e023      	b.n	896cc <_dtoa_r+0x604>
   89684:	2301      	movs	r3, #1
   89686:	eba8 0505 	sub.w	r5, r8, r5
   8968a:	930e      	str	r3, [sp, #56]	; 0x38
   8968c:	1e6b      	subs	r3, r5, #1
   8968e:	9306      	str	r3, [sp, #24]
   89690:	f57f adc5 	bpl.w	8921e <_dtoa_r+0x156>
   89694:	f1c5 0301 	rsb	r3, r5, #1
   89698:	930b      	str	r3, [sp, #44]	; 0x2c
   8969a:	2300      	movs	r3, #0
   8969c:	9306      	str	r3, [sp, #24]
   8969e:	e5c0      	b.n	89222 <_dtoa_r+0x15a>
   896a0:	4658      	mov	r0, fp
   896a2:	f002 ff65 	bl	8c570 <__aeabi_i2d>
   896a6:	4632      	mov	r2, r6
   896a8:	463b      	mov	r3, r7
   896aa:	f003 fa33 	bl	8cb14 <__aeabi_dcmpeq>
   896ae:	2800      	cmp	r0, #0
   896b0:	f47f ad9c 	bne.w	891ec <_dtoa_r+0x124>
   896b4:	f10b 3bff 	add.w	fp, fp, #4294967295
   896b8:	e598      	b.n	891ec <_dtoa_r+0x124>
   896ba:	4bc7      	ldr	r3, [pc, #796]	; (899d8 <_dtoa_r+0x910>)
   896bc:	9303      	str	r3, [sp, #12]
   896be:	9803      	ldr	r0, [sp, #12]
   896c0:	b01b      	add	sp, #108	; 0x6c
   896c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   896c6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   896c8:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   896cc:	2e00      	cmp	r6, #0
   896ce:	dd0c      	ble.n	896ea <_dtoa_r+0x622>
   896d0:	9a06      	ldr	r2, [sp, #24]
   896d2:	2a00      	cmp	r2, #0
   896d4:	dd09      	ble.n	896ea <_dtoa_r+0x622>
   896d6:	42b2      	cmp	r2, r6
   896d8:	4613      	mov	r3, r2
   896da:	bfa8      	it	ge
   896dc:	4633      	movge	r3, r6
   896de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   896e0:	1af6      	subs	r6, r6, r3
   896e2:	1ac9      	subs	r1, r1, r3
   896e4:	1ad3      	subs	r3, r2, r3
   896e6:	910b      	str	r1, [sp, #44]	; 0x2c
   896e8:	9306      	str	r3, [sp, #24]
   896ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   896ec:	b1d3      	cbz	r3, 89724 <_dtoa_r+0x65c>
   896ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   896f0:	2b00      	cmp	r3, #0
   896f2:	f000 81a3 	beq.w	89a3c <_dtoa_r+0x974>
   896f6:	2f00      	cmp	r7, #0
   896f8:	dd10      	ble.n	8971c <_dtoa_r+0x654>
   896fa:	4629      	mov	r1, r5
   896fc:	463a      	mov	r2, r7
   896fe:	4620      	mov	r0, r4
   89700:	f001 fe9e 	bl	8b440 <__pow5mult>
   89704:	4652      	mov	r2, sl
   89706:	4601      	mov	r1, r0
   89708:	4605      	mov	r5, r0
   8970a:	4620      	mov	r0, r4
   8970c:	f001 fde8 	bl	8b2e0 <__multiply>
   89710:	4603      	mov	r3, r0
   89712:	4651      	mov	r1, sl
   89714:	4620      	mov	r0, r4
   89716:	469a      	mov	sl, r3
   89718:	f001 fd24 	bl	8b164 <_Bfree>
   8971c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8971e:	1bda      	subs	r2, r3, r7
   89720:	f040 818d 	bne.w	89a3e <_dtoa_r+0x976>
   89724:	2101      	movs	r1, #1
   89726:	4620      	mov	r0, r4
   89728:	f001 fdc4 	bl	8b2b4 <__i2b>
   8972c:	f1bb 0f00 	cmp.w	fp, #0
   89730:	4680      	mov	r8, r0
   89732:	f300 80b3 	bgt.w	8989c <_dtoa_r+0x7d4>
   89736:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89738:	2b01      	cmp	r3, #1
   8973a:	f340 818a 	ble.w	89a52 <_dtoa_r+0x98a>
   8973e:	f04f 0900 	mov.w	r9, #0
   89742:	2001      	movs	r0, #1
   89744:	f1bb 0f00 	cmp.w	fp, #0
   89748:	f040 80b4 	bne.w	898b4 <_dtoa_r+0x7ec>
   8974c:	9a06      	ldr	r2, [sp, #24]
   8974e:	4410      	add	r0, r2
   89750:	f010 001f 	ands.w	r0, r0, #31
   89754:	f000 8092 	beq.w	8987c <_dtoa_r+0x7b4>
   89758:	f1c0 0320 	rsb	r3, r0, #32
   8975c:	2b04      	cmp	r3, #4
   8975e:	f340 83f9 	ble.w	89f54 <_dtoa_r+0xe8c>
   89762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89764:	f1c0 001c 	rsb	r0, r0, #28
   89768:	4403      	add	r3, r0
   8976a:	4402      	add	r2, r0
   8976c:	930b      	str	r3, [sp, #44]	; 0x2c
   8976e:	4406      	add	r6, r0
   89770:	9206      	str	r2, [sp, #24]
   89772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89774:	2b00      	cmp	r3, #0
   89776:	dd05      	ble.n	89784 <_dtoa_r+0x6bc>
   89778:	4651      	mov	r1, sl
   8977a:	461a      	mov	r2, r3
   8977c:	4620      	mov	r0, r4
   8977e:	f001 feab 	bl	8b4d8 <__lshift>
   89782:	4682      	mov	sl, r0
   89784:	9b06      	ldr	r3, [sp, #24]
   89786:	2b00      	cmp	r3, #0
   89788:	dd05      	ble.n	89796 <_dtoa_r+0x6ce>
   8978a:	4641      	mov	r1, r8
   8978c:	461a      	mov	r2, r3
   8978e:	4620      	mov	r0, r4
   89790:	f001 fea2 	bl	8b4d8 <__lshift>
   89794:	4680      	mov	r8, r0
   89796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89798:	2b00      	cmp	r3, #0
   8979a:	f040 8135 	bne.w	89a08 <_dtoa_r+0x940>
   8979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   897a0:	2b00      	cmp	r3, #0
   897a2:	f340 811b 	ble.w	899dc <_dtoa_r+0x914>
   897a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   897a8:	2b00      	cmp	r3, #0
   897aa:	f040 809a 	bne.w	898e2 <_dtoa_r+0x81a>
   897ae:	9b07      	ldr	r3, [sp, #28]
   897b0:	3301      	adds	r3, #1
   897b2:	9307      	str	r3, [sp, #28]
   897b4:	2601      	movs	r6, #1
   897b6:	9f03      	ldr	r7, [sp, #12]
   897b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   897bc:	e007      	b.n	897ce <_dtoa_r+0x706>
   897be:	4651      	mov	r1, sl
   897c0:	2300      	movs	r3, #0
   897c2:	220a      	movs	r2, #10
   897c4:	4620      	mov	r0, r4
   897c6:	f001 fcd7 	bl	8b178 <__multadd>
   897ca:	4682      	mov	sl, r0
   897cc:	3601      	adds	r6, #1
   897ce:	4641      	mov	r1, r8
   897d0:	4650      	mov	r0, sl
   897d2:	f7ff fbe9 	bl	88fa8 <quorem>
   897d6:	454e      	cmp	r6, r9
   897d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   897dc:	f807 3b01 	strb.w	r3, [r7], #1
   897e0:	dbed      	blt.n	897be <_dtoa_r+0x6f6>
   897e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   897e4:	2600      	movs	r6, #0
   897e6:	2a00      	cmp	r2, #0
   897e8:	bfcc      	ite	gt
   897ea:	4693      	movgt	fp, r2
   897ec:	f04f 0b01 	movle.w	fp, #1
   897f0:	9a03      	ldr	r2, [sp, #12]
   897f2:	4493      	add	fp, r2
   897f4:	4651      	mov	r1, sl
   897f6:	2201      	movs	r2, #1
   897f8:	4620      	mov	r0, r4
   897fa:	9304      	str	r3, [sp, #16]
   897fc:	f001 fe6c 	bl	8b4d8 <__lshift>
   89800:	4641      	mov	r1, r8
   89802:	4682      	mov	sl, r0
   89804:	f001 fedc 	bl	8b5c0 <__mcmp>
   89808:	2800      	cmp	r0, #0
   8980a:	f340 81a8 	ble.w	89b5e <_dtoa_r+0xa96>
   8980e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89812:	9a03      	ldr	r2, [sp, #12]
   89814:	f10b 3bff 	add.w	fp, fp, #4294967295
   89818:	e004      	b.n	89824 <_dtoa_r+0x75c>
   8981a:	455a      	cmp	r2, fp
   8981c:	f000 81e4 	beq.w	89be8 <_dtoa_r+0xb20>
   89820:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89824:	2b39      	cmp	r3, #57	; 0x39
   89826:	f10b 0901 	add.w	r9, fp, #1
   8982a:	d0f6      	beq.n	8981a <_dtoa_r+0x752>
   8982c:	3301      	adds	r3, #1
   8982e:	f88b 3000 	strb.w	r3, [fp]
   89832:	4641      	mov	r1, r8
   89834:	4620      	mov	r0, r4
   89836:	f001 fc95 	bl	8b164 <_Bfree>
   8983a:	b155      	cbz	r5, 89852 <_dtoa_r+0x78a>
   8983c:	b12e      	cbz	r6, 8984a <_dtoa_r+0x782>
   8983e:	42ae      	cmp	r6, r5
   89840:	d003      	beq.n	8984a <_dtoa_r+0x782>
   89842:	4631      	mov	r1, r6
   89844:	4620      	mov	r0, r4
   89846:	f001 fc8d 	bl	8b164 <_Bfree>
   8984a:	4629      	mov	r1, r5
   8984c:	4620      	mov	r0, r4
   8984e:	f001 fc89 	bl	8b164 <_Bfree>
   89852:	4651      	mov	r1, sl
   89854:	4620      	mov	r0, r4
   89856:	f001 fc85 	bl	8b164 <_Bfree>
   8985a:	2300      	movs	r3, #0
   8985c:	f889 3000 	strb.w	r3, [r9]
   89860:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89862:	461a      	mov	r2, r3
   89864:	9b07      	ldr	r3, [sp, #28]
   89866:	6013      	str	r3, [r2, #0]
   89868:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8986a:	2b00      	cmp	r3, #0
   8986c:	f43f ac67 	beq.w	8913e <_dtoa_r+0x76>
   89870:	9803      	ldr	r0, [sp, #12]
   89872:	f8c3 9000 	str.w	r9, [r3]
   89876:	b01b      	add	sp, #108	; 0x6c
   89878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8987c:	201c      	movs	r0, #28
   8987e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89880:	4406      	add	r6, r0
   89882:	4403      	add	r3, r0
   89884:	930b      	str	r3, [sp, #44]	; 0x2c
   89886:	9b06      	ldr	r3, [sp, #24]
   89888:	4403      	add	r3, r0
   8988a:	9306      	str	r3, [sp, #24]
   8988c:	e771      	b.n	89772 <_dtoa_r+0x6aa>
   8988e:	2501      	movs	r5, #1
   89890:	e4de      	b.n	89250 <_dtoa_r+0x188>
   89892:	f1c0 0020 	rsb	r0, r0, #32
   89896:	fa06 f000 	lsl.w	r0, r6, r0
   8989a:	e474      	b.n	89186 <_dtoa_r+0xbe>
   8989c:	4601      	mov	r1, r0
   8989e:	465a      	mov	r2, fp
   898a0:	4620      	mov	r0, r4
   898a2:	f001 fdcd 	bl	8b440 <__pow5mult>
   898a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   898a8:	4680      	mov	r8, r0
   898aa:	2b01      	cmp	r3, #1
   898ac:	f340 81d1 	ble.w	89c52 <_dtoa_r+0xb8a>
   898b0:	f04f 0900 	mov.w	r9, #0
   898b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   898b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   898bc:	6918      	ldr	r0, [r3, #16]
   898be:	f001 fca9 	bl	8b214 <__hi0bits>
   898c2:	f1c0 0020 	rsb	r0, r0, #32
   898c6:	e741      	b.n	8974c <_dtoa_r+0x684>
   898c8:	4629      	mov	r1, r5
   898ca:	2300      	movs	r3, #0
   898cc:	220a      	movs	r2, #10
   898ce:	4620      	mov	r0, r4
   898d0:	f001 fc52 	bl	8b178 <__multadd>
   898d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   898d6:	4605      	mov	r5, r0
   898d8:	2b00      	cmp	r3, #0
   898da:	f340 8315 	ble.w	89f08 <_dtoa_r+0xe40>
   898de:	9707      	str	r7, [sp, #28]
   898e0:	930a      	str	r3, [sp, #40]	; 0x28
   898e2:	2e00      	cmp	r6, #0
   898e4:	f300 8122 	bgt.w	89b2c <_dtoa_r+0xa64>
   898e8:	f1b9 0f00 	cmp.w	r9, #0
   898ec:	f040 81f9 	bne.w	89ce2 <_dtoa_r+0xc1a>
   898f0:	462f      	mov	r7, r5
   898f2:	9903      	ldr	r1, [sp, #12]
   898f4:	9b04      	ldr	r3, [sp, #16]
   898f6:	460e      	mov	r6, r1
   898f8:	f003 0201 	and.w	r2, r3, #1
   898fc:	1e4b      	subs	r3, r1, #1
   898fe:	9924      	ldr	r1, [sp, #144]	; 0x90
   89900:	920c      	str	r2, [sp, #48]	; 0x30
   89902:	430a      	orrs	r2, r1
   89904:	920b      	str	r2, [sp, #44]	; 0x2c
   89906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89908:	441a      	add	r2, r3
   8990a:	920a      	str	r2, [sp, #40]	; 0x28
   8990c:	4641      	mov	r1, r8
   8990e:	4650      	mov	r0, sl
   89910:	f7ff fb4a 	bl	88fa8 <quorem>
   89914:	4629      	mov	r1, r5
   89916:	4683      	mov	fp, r0
   89918:	4650      	mov	r0, sl
   8991a:	f001 fe51 	bl	8b5c0 <__mcmp>
   8991e:	463a      	mov	r2, r7
   89920:	4641      	mov	r1, r8
   89922:	4681      	mov	r9, r0
   89924:	4620      	mov	r0, r4
   89926:	f001 fe69 	bl	8b5fc <__mdiff>
   8992a:	68c2      	ldr	r2, [r0, #12]
   8992c:	4601      	mov	r1, r0
   8992e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89932:	2a00      	cmp	r2, #0
   89934:	d142      	bne.n	899bc <_dtoa_r+0x8f4>
   89936:	9006      	str	r0, [sp, #24]
   89938:	4650      	mov	r0, sl
   8993a:	9308      	str	r3, [sp, #32]
   8993c:	f001 fe40 	bl	8b5c0 <__mcmp>
   89940:	9906      	ldr	r1, [sp, #24]
   89942:	9004      	str	r0, [sp, #16]
   89944:	4620      	mov	r0, r4
   89946:	f001 fc0d 	bl	8b164 <_Bfree>
   8994a:	9a04      	ldr	r2, [sp, #16]
   8994c:	9b08      	ldr	r3, [sp, #32]
   8994e:	b91a      	cbnz	r2, 89958 <_dtoa_r+0x890>
   89950:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89952:	2900      	cmp	r1, #0
   89954:	f000 82cb 	beq.w	89eee <_dtoa_r+0xe26>
   89958:	f1b9 0f00 	cmp.w	r9, #0
   8995c:	f2c0 8185 	blt.w	89c6a <_dtoa_r+0xba2>
   89960:	9924      	ldr	r1, [sp, #144]	; 0x90
   89962:	ea41 0909 	orr.w	r9, r1, r9
   89966:	990c      	ldr	r1, [sp, #48]	; 0x30
   89968:	ea51 0109 	orrs.w	r1, r1, r9
   8996c:	f000 817d 	beq.w	89c6a <_dtoa_r+0xba2>
   89970:	2a00      	cmp	r2, #0
   89972:	f300 81d1 	bgt.w	89d18 <_dtoa_r+0xc50>
   89976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89978:	f106 0901 	add.w	r9, r6, #1
   8997c:	4296      	cmp	r6, r2
   8997e:	46cb      	mov	fp, r9
   89980:	7033      	strb	r3, [r6, #0]
   89982:	f000 81e3 	beq.w	89d4c <_dtoa_r+0xc84>
   89986:	4651      	mov	r1, sl
   89988:	2300      	movs	r3, #0
   8998a:	220a      	movs	r2, #10
   8998c:	4620      	mov	r0, r4
   8998e:	f001 fbf3 	bl	8b178 <__multadd>
   89992:	42bd      	cmp	r5, r7
   89994:	4682      	mov	sl, r0
   89996:	4629      	mov	r1, r5
   89998:	f04f 0300 	mov.w	r3, #0
   8999c:	f04f 020a 	mov.w	r2, #10
   899a0:	4620      	mov	r0, r4
   899a2:	d012      	beq.n	899ca <_dtoa_r+0x902>
   899a4:	f001 fbe8 	bl	8b178 <__multadd>
   899a8:	4639      	mov	r1, r7
   899aa:	4605      	mov	r5, r0
   899ac:	2300      	movs	r3, #0
   899ae:	220a      	movs	r2, #10
   899b0:	4620      	mov	r0, r4
   899b2:	f001 fbe1 	bl	8b178 <__multadd>
   899b6:	464e      	mov	r6, r9
   899b8:	4607      	mov	r7, r0
   899ba:	e7a7      	b.n	8990c <_dtoa_r+0x844>
   899bc:	4620      	mov	r0, r4
   899be:	9304      	str	r3, [sp, #16]
   899c0:	f001 fbd0 	bl	8b164 <_Bfree>
   899c4:	2201      	movs	r2, #1
   899c6:	9b04      	ldr	r3, [sp, #16]
   899c8:	e7c6      	b.n	89958 <_dtoa_r+0x890>
   899ca:	f001 fbd5 	bl	8b178 <__multadd>
   899ce:	464e      	mov	r6, r9
   899d0:	4605      	mov	r5, r0
   899d2:	4607      	mov	r7, r0
   899d4:	e79a      	b.n	8990c <_dtoa_r+0x844>
   899d6:	bf00      	nop
   899d8:	0008ce10 	.word	0x0008ce10
   899dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   899de:	2b02      	cmp	r3, #2
   899e0:	dc7e      	bgt.n	89ae0 <_dtoa_r+0xa18>
   899e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   899e4:	2b00      	cmp	r3, #0
   899e6:	f47f af7c 	bne.w	898e2 <_dtoa_r+0x81a>
   899ea:	4641      	mov	r1, r8
   899ec:	4650      	mov	r0, sl
   899ee:	f7ff fadb 	bl	88fa8 <quorem>
   899f2:	9a07      	ldr	r2, [sp, #28]
   899f4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   899f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   899fc:	3201      	adds	r2, #1
   899fe:	2600      	movs	r6, #0
   89a00:	9207      	str	r2, [sp, #28]
   89a02:	f80b 3b01 	strb.w	r3, [fp], #1
   89a06:	e6f5      	b.n	897f4 <_dtoa_r+0x72c>
   89a08:	4641      	mov	r1, r8
   89a0a:	4650      	mov	r0, sl
   89a0c:	f001 fdd8 	bl	8b5c0 <__mcmp>
   89a10:	2800      	cmp	r0, #0
   89a12:	f6bf aec4 	bge.w	8979e <_dtoa_r+0x6d6>
   89a16:	4651      	mov	r1, sl
   89a18:	2300      	movs	r3, #0
   89a1a:	220a      	movs	r2, #10
   89a1c:	4620      	mov	r0, r4
   89a1e:	f001 fbab 	bl	8b178 <__multadd>
   89a22:	9b07      	ldr	r3, [sp, #28]
   89a24:	4682      	mov	sl, r0
   89a26:	1e5f      	subs	r7, r3, #1
   89a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89a2a:	2b00      	cmp	r3, #0
   89a2c:	f47f af4c 	bne.w	898c8 <_dtoa_r+0x800>
   89a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89a32:	2b00      	cmp	r3, #0
   89a34:	f340 8262 	ble.w	89efc <_dtoa_r+0xe34>
   89a38:	930a      	str	r3, [sp, #40]	; 0x28
   89a3a:	e6bb      	b.n	897b4 <_dtoa_r+0x6ec>
   89a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89a3e:	4651      	mov	r1, sl
   89a40:	4620      	mov	r0, r4
   89a42:	f001 fcfd 	bl	8b440 <__pow5mult>
   89a46:	4682      	mov	sl, r0
   89a48:	e66c      	b.n	89724 <_dtoa_r+0x65c>
   89a4a:	4bba      	ldr	r3, [pc, #744]	; (89d34 <_dtoa_r+0xc6c>)
   89a4c:	9303      	str	r3, [sp, #12]
   89a4e:	3303      	adds	r3, #3
   89a50:	e419      	b.n	89286 <_dtoa_r+0x1be>
   89a52:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89a56:	2900      	cmp	r1, #0
   89a58:	f47f ae71 	bne.w	8973e <_dtoa_r+0x676>
   89a5c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89a60:	2b00      	cmp	r3, #0
   89a62:	f47f ae6c 	bne.w	8973e <_dtoa_r+0x676>
   89a66:	4bb4      	ldr	r3, [pc, #720]	; (89d38 <_dtoa_r+0xc70>)
   89a68:	4013      	ands	r3, r2
   89a6a:	2b00      	cmp	r3, #0
   89a6c:	f000 822a 	beq.w	89ec4 <_dtoa_r+0xdfc>
   89a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89a72:	f04f 0901 	mov.w	r9, #1
   89a76:	3301      	adds	r3, #1
   89a78:	930b      	str	r3, [sp, #44]	; 0x2c
   89a7a:	9b06      	ldr	r3, [sp, #24]
   89a7c:	3301      	adds	r3, #1
   89a7e:	9306      	str	r3, [sp, #24]
   89a80:	e65f      	b.n	89742 <_dtoa_r+0x67a>
   89a82:	2301      	movs	r3, #1
   89a84:	930c      	str	r3, [sp, #48]	; 0x30
   89a86:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89a88:	9a07      	ldr	r2, [sp, #28]
   89a8a:	4413      	add	r3, r2
   89a8c:	9312      	str	r3, [sp, #72]	; 0x48
   89a8e:	3301      	adds	r3, #1
   89a90:	2b01      	cmp	r3, #1
   89a92:	461e      	mov	r6, r3
   89a94:	bfb8      	it	lt
   89a96:	2601      	movlt	r6, #1
   89a98:	930a      	str	r3, [sp, #40]	; 0x28
   89a9a:	2100      	movs	r1, #0
   89a9c:	2e17      	cmp	r6, #23
   89a9e:	6461      	str	r1, [r4, #68]	; 0x44
   89aa0:	f77f ac43 	ble.w	8932a <_dtoa_r+0x262>
   89aa4:	2201      	movs	r2, #1
   89aa6:	2304      	movs	r3, #4
   89aa8:	005b      	lsls	r3, r3, #1
   89aaa:	f103 0014 	add.w	r0, r3, #20
   89aae:	42b0      	cmp	r0, r6
   89ab0:	4611      	mov	r1, r2
   89ab2:	f102 0201 	add.w	r2, r2, #1
   89ab6:	d9f7      	bls.n	89aa8 <_dtoa_r+0x9e0>
   89ab8:	6461      	str	r1, [r4, #68]	; 0x44
   89aba:	e436      	b.n	8932a <_dtoa_r+0x262>
   89abc:	2301      	movs	r3, #1
   89abe:	930c      	str	r3, [sp, #48]	; 0x30
   89ac0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89ac2:	2b00      	cmp	r3, #0
   89ac4:	dd46      	ble.n	89b54 <_dtoa_r+0xa8c>
   89ac6:	461e      	mov	r6, r3
   89ac8:	9312      	str	r3, [sp, #72]	; 0x48
   89aca:	930a      	str	r3, [sp, #40]	; 0x28
   89acc:	e7e5      	b.n	89a9a <_dtoa_r+0x9d2>
   89ace:	2300      	movs	r3, #0
   89ad0:	930c      	str	r3, [sp, #48]	; 0x30
   89ad2:	e7d8      	b.n	89a86 <_dtoa_r+0x9be>
   89ad4:	2300      	movs	r3, #0
   89ad6:	930c      	str	r3, [sp, #48]	; 0x30
   89ad8:	e7f2      	b.n	89ac0 <_dtoa_r+0x9f8>
   89ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89adc:	9707      	str	r7, [sp, #28]
   89ade:	930a      	str	r3, [sp, #40]	; 0x28
   89ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89ae2:	2b00      	cmp	r3, #0
   89ae4:	f47f ad40 	bne.w	89568 <_dtoa_r+0x4a0>
   89ae8:	4641      	mov	r1, r8
   89aea:	2205      	movs	r2, #5
   89aec:	4620      	mov	r0, r4
   89aee:	f001 fb43 	bl	8b178 <__multadd>
   89af2:	4680      	mov	r8, r0
   89af4:	4650      	mov	r0, sl
   89af6:	4641      	mov	r1, r8
   89af8:	f001 fd62 	bl	8b5c0 <__mcmp>
   89afc:	2800      	cmp	r0, #0
   89afe:	f77f ad33 	ble.w	89568 <_dtoa_r+0x4a0>
   89b02:	9f03      	ldr	r7, [sp, #12]
   89b04:	2231      	movs	r2, #49	; 0x31
   89b06:	463b      	mov	r3, r7
   89b08:	9e07      	ldr	r6, [sp, #28]
   89b0a:	f803 2b01 	strb.w	r2, [r3], #1
   89b0e:	3601      	adds	r6, #1
   89b10:	9303      	str	r3, [sp, #12]
   89b12:	4641      	mov	r1, r8
   89b14:	4620      	mov	r0, r4
   89b16:	f001 fb25 	bl	8b164 <_Bfree>
   89b1a:	1c73      	adds	r3, r6, #1
   89b1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89b20:	9307      	str	r3, [sp, #28]
   89b22:	9703      	str	r7, [sp, #12]
   89b24:	2d00      	cmp	r5, #0
   89b26:	f47f ae90 	bne.w	8984a <_dtoa_r+0x782>
   89b2a:	e692      	b.n	89852 <_dtoa_r+0x78a>
   89b2c:	4629      	mov	r1, r5
   89b2e:	4632      	mov	r2, r6
   89b30:	4620      	mov	r0, r4
   89b32:	f001 fcd1 	bl	8b4d8 <__lshift>
   89b36:	4605      	mov	r5, r0
   89b38:	e6d6      	b.n	898e8 <_dtoa_r+0x820>
   89b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89b3c:	970d      	str	r7, [sp, #52]	; 0x34
   89b3e:	1afb      	subs	r3, r7, r3
   89b40:	449b      	add	fp, r3
   89b42:	2700      	movs	r7, #0
   89b44:	e58c      	b.n	89660 <_dtoa_r+0x598>
   89b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89b4a:	f04f 0902 	mov.w	r9, #2
   89b4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   89b52:	e417      	b.n	89384 <_dtoa_r+0x2bc>
   89b54:	2301      	movs	r3, #1
   89b56:	9325      	str	r3, [sp, #148]	; 0x94
   89b58:	930a      	str	r3, [sp, #40]	; 0x28
   89b5a:	f7ff bbe2 	b.w	89322 <_dtoa_r+0x25a>
   89b5e:	d103      	bne.n	89b68 <_dtoa_r+0xaa0>
   89b60:	9b04      	ldr	r3, [sp, #16]
   89b62:	07db      	lsls	r3, r3, #31
   89b64:	f53f ae53 	bmi.w	8980e <_dtoa_r+0x746>
   89b68:	46d9      	mov	r9, fp
   89b6a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89b6e:	2b30      	cmp	r3, #48	; 0x30
   89b70:	d0fa      	beq.n	89b68 <_dtoa_r+0xaa0>
   89b72:	e65e      	b.n	89832 <_dtoa_r+0x76a>
   89b74:	4648      	mov	r0, r9
   89b76:	f002 fcfb 	bl	8c570 <__aeabi_i2d>
   89b7a:	4632      	mov	r2, r6
   89b7c:	463b      	mov	r3, r7
   89b7e:	f002 fd61 	bl	8c644 <__aeabi_dmul>
   89b82:	2200      	movs	r2, #0
   89b84:	4b6d      	ldr	r3, [pc, #436]	; (89d3c <_dtoa_r+0xc74>)
   89b86:	f002 fba7 	bl	8c2d8 <__adddf3>
   89b8a:	4680      	mov	r8, r0
   89b8c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89b90:	4630      	mov	r0, r6
   89b92:	4639      	mov	r1, r7
   89b94:	2200      	movs	r2, #0
   89b96:	4b6a      	ldr	r3, [pc, #424]	; (89d40 <_dtoa_r+0xc78>)
   89b98:	f002 fb9c 	bl	8c2d4 <__aeabi_dsub>
   89b9c:	4642      	mov	r2, r8
   89b9e:	464b      	mov	r3, r9
   89ba0:	4606      	mov	r6, r0
   89ba2:	460f      	mov	r7, r1
   89ba4:	f002 ffde 	bl	8cb64 <__aeabi_dcmpgt>
   89ba8:	2800      	cmp	r0, #0
   89baa:	f040 8187 	bne.w	89ebc <_dtoa_r+0xdf4>
   89bae:	4642      	mov	r2, r8
   89bb0:	4630      	mov	r0, r6
   89bb2:	4639      	mov	r1, r7
   89bb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   89bb8:	f002 ffb6 	bl	8cb28 <__aeabi_dcmplt>
   89bbc:	2800      	cmp	r0, #0
   89bbe:	f43f acaa 	beq.w	89516 <_dtoa_r+0x44e>
   89bc2:	f04f 0800 	mov.w	r8, #0
   89bc6:	4645      	mov	r5, r8
   89bc8:	e4ce      	b.n	89568 <_dtoa_r+0x4a0>
   89bca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89bcc:	2a00      	cmp	r2, #0
   89bce:	f000 80c3 	beq.w	89d58 <_dtoa_r+0xc90>
   89bd2:	9a06      	ldr	r2, [sp, #24]
   89bd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89bd8:	441a      	add	r2, r3
   89bda:	9206      	str	r2, [sp, #24]
   89bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89bde:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89be0:	4616      	mov	r6, r2
   89be2:	441a      	add	r2, r3
   89be4:	920b      	str	r2, [sp, #44]	; 0x2c
   89be6:	e547      	b.n	89678 <_dtoa_r+0x5b0>
   89be8:	2331      	movs	r3, #49	; 0x31
   89bea:	9a07      	ldr	r2, [sp, #28]
   89bec:	3201      	adds	r2, #1
   89bee:	9207      	str	r2, [sp, #28]
   89bf0:	9a03      	ldr	r2, [sp, #12]
   89bf2:	7013      	strb	r3, [r2, #0]
   89bf4:	e61d      	b.n	89832 <_dtoa_r+0x76a>
   89bf6:	f000 814b 	beq.w	89e90 <_dtoa_r+0xdc8>
   89bfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89bfe:	9b07      	ldr	r3, [sp, #28]
   89c00:	425d      	negs	r5, r3
   89c02:	4b50      	ldr	r3, [pc, #320]	; (89d44 <_dtoa_r+0xc7c>)
   89c04:	f005 020f 	and.w	r2, r5, #15
   89c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c10:	f002 fd18 	bl	8c644 <__aeabi_dmul>
   89c14:	112d      	asrs	r5, r5, #4
   89c16:	4606      	mov	r6, r0
   89c18:	460f      	mov	r7, r1
   89c1a:	f000 817d 	beq.w	89f18 <_dtoa_r+0xe50>
   89c1e:	2300      	movs	r3, #0
   89c20:	f04f 0902 	mov.w	r9, #2
   89c24:	f8df 8120 	ldr.w	r8, [pc, #288]	; 89d48 <_dtoa_r+0xc80>
   89c28:	07ea      	lsls	r2, r5, #31
   89c2a:	d505      	bpl.n	89c38 <_dtoa_r+0xb70>
   89c2c:	e9d8 2300 	ldrd	r2, r3, [r8]
   89c30:	f002 fd08 	bl	8c644 <__aeabi_dmul>
   89c34:	2301      	movs	r3, #1
   89c36:	4499      	add	r9, r3
   89c38:	106d      	asrs	r5, r5, #1
   89c3a:	f108 0808 	add.w	r8, r8, #8
   89c3e:	d1f3      	bne.n	89c28 <_dtoa_r+0xb60>
   89c40:	2b00      	cmp	r3, #0
   89c42:	f43f abba 	beq.w	893ba <_dtoa_r+0x2f2>
   89c46:	4606      	mov	r6, r0
   89c48:	460f      	mov	r7, r1
   89c4a:	f7ff bbb6 	b.w	893ba <_dtoa_r+0x2f2>
   89c4e:	900e      	str	r0, [sp, #56]	; 0x38
   89c50:	e520      	b.n	89694 <_dtoa_r+0x5cc>
   89c52:	9b04      	ldr	r3, [sp, #16]
   89c54:	2b00      	cmp	r3, #0
   89c56:	f47f ae2b 	bne.w	898b0 <_dtoa_r+0x7e8>
   89c5a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89c5e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89c62:	2b00      	cmp	r3, #0
   89c64:	f43f aeff 	beq.w	89a66 <_dtoa_r+0x99e>
   89c68:	e622      	b.n	898b0 <_dtoa_r+0x7e8>
   89c6a:	2a00      	cmp	r2, #0
   89c6c:	dd12      	ble.n	89c94 <_dtoa_r+0xbcc>
   89c6e:	4651      	mov	r1, sl
   89c70:	2201      	movs	r2, #1
   89c72:	4620      	mov	r0, r4
   89c74:	9304      	str	r3, [sp, #16]
   89c76:	f001 fc2f 	bl	8b4d8 <__lshift>
   89c7a:	4641      	mov	r1, r8
   89c7c:	4682      	mov	sl, r0
   89c7e:	f001 fc9f 	bl	8b5c0 <__mcmp>
   89c82:	2800      	cmp	r0, #0
   89c84:	9b04      	ldr	r3, [sp, #16]
   89c86:	f340 812c 	ble.w	89ee2 <_dtoa_r+0xe1a>
   89c8a:	2b39      	cmp	r3, #57	; 0x39
   89c8c:	f000 810c 	beq.w	89ea8 <_dtoa_r+0xde0>
   89c90:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   89c94:	46b1      	mov	r9, r6
   89c96:	f809 3b01 	strb.w	r3, [r9], #1
   89c9a:	9b07      	ldr	r3, [sp, #28]
   89c9c:	462e      	mov	r6, r5
   89c9e:	3301      	adds	r3, #1
   89ca0:	463d      	mov	r5, r7
   89ca2:	9307      	str	r3, [sp, #28]
   89ca4:	e5c5      	b.n	89832 <_dtoa_r+0x76a>
   89ca6:	4655      	mov	r5, sl
   89ca8:	9c08      	ldr	r4, [sp, #32]
   89caa:	f8dd a018 	ldr.w	sl, [sp, #24]
   89cae:	4602      	mov	r2, r0
   89cb0:	460b      	mov	r3, r1
   89cb2:	f002 fb11 	bl	8c2d8 <__adddf3>
   89cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89cba:	4606      	mov	r6, r0
   89cbc:	460f      	mov	r7, r1
   89cbe:	f002 ff51 	bl	8cb64 <__aeabi_dcmpgt>
   89cc2:	b960      	cbnz	r0, 89cde <_dtoa_r+0xc16>
   89cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89cc8:	4630      	mov	r0, r6
   89cca:	4639      	mov	r1, r7
   89ccc:	f002 ff22 	bl	8cb14 <__aeabi_dcmpeq>
   89cd0:	2800      	cmp	r0, #0
   89cd2:	f43f aca3 	beq.w	8961c <_dtoa_r+0x554>
   89cd6:	f018 0f01 	tst.w	r8, #1
   89cda:	f43f ac9f 	beq.w	8961c <_dtoa_r+0x554>
   89cde:	9a03      	ldr	r2, [sp, #12]
   89ce0:	e40a      	b.n	894f8 <_dtoa_r+0x430>
   89ce2:	4620      	mov	r0, r4
   89ce4:	6869      	ldr	r1, [r5, #4]
   89ce6:	f001 fa17 	bl	8b118 <_Balloc>
   89cea:	4606      	mov	r6, r0
   89cec:	2800      	cmp	r0, #0
   89cee:	f000 8117 	beq.w	89f20 <_dtoa_r+0xe58>
   89cf2:	692b      	ldr	r3, [r5, #16]
   89cf4:	f105 010c 	add.w	r1, r5, #12
   89cf8:	3302      	adds	r3, #2
   89cfa:	009a      	lsls	r2, r3, #2
   89cfc:	300c      	adds	r0, #12
   89cfe:	f7fc f9fb 	bl	860f8 <memcpy>
   89d02:	4631      	mov	r1, r6
   89d04:	2201      	movs	r2, #1
   89d06:	4620      	mov	r0, r4
   89d08:	f001 fbe6 	bl	8b4d8 <__lshift>
   89d0c:	4607      	mov	r7, r0
   89d0e:	e5f0      	b.n	898f2 <_dtoa_r+0x82a>
   89d10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   89d14:	1a9e      	subs	r6, r3, r2
   89d16:	e4af      	b.n	89678 <_dtoa_r+0x5b0>
   89d18:	2b39      	cmp	r3, #57	; 0x39
   89d1a:	f000 80c5 	beq.w	89ea8 <_dtoa_r+0xde0>
   89d1e:	46b1      	mov	r9, r6
   89d20:	3301      	adds	r3, #1
   89d22:	f809 3b01 	strb.w	r3, [r9], #1
   89d26:	9b07      	ldr	r3, [sp, #28]
   89d28:	462e      	mov	r6, r5
   89d2a:	3301      	adds	r3, #1
   89d2c:	463d      	mov	r5, r7
   89d2e:	9307      	str	r3, [sp, #28]
   89d30:	e57f      	b.n	89832 <_dtoa_r+0x76a>
   89d32:	bf00      	nop
   89d34:	0008ce54 	.word	0x0008ce54
   89d38:	7ff00000 	.word	0x7ff00000
   89d3c:	401c0000 	.word	0x401c0000
   89d40:	40140000 	.word	0x40140000
   89d44:	0008cfb0 	.word	0x0008cfb0
   89d48:	0008cf88 	.word	0x0008cf88
   89d4c:	9a07      	ldr	r2, [sp, #28]
   89d4e:	462e      	mov	r6, r5
   89d50:	3201      	adds	r2, #1
   89d52:	463d      	mov	r5, r7
   89d54:	9207      	str	r2, [sp, #28]
   89d56:	e54d      	b.n	897f4 <_dtoa_r+0x72c>
   89d58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   89d5a:	9a06      	ldr	r2, [sp, #24]
   89d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89d62:	441a      	add	r2, r3
   89d64:	9206      	str	r2, [sp, #24]
   89d66:	460a      	mov	r2, r1
   89d68:	441a      	add	r2, r3
   89d6a:	460e      	mov	r6, r1
   89d6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89d6e:	920b      	str	r2, [sp, #44]	; 0x2c
   89d70:	e482      	b.n	89678 <_dtoa_r+0x5b0>
   89d72:	9810      	ldr	r0, [sp, #64]	; 0x40
   89d74:	497f      	ldr	r1, [pc, #508]	; (89f74 <_dtoa_r+0xeac>)
   89d76:	4642      	mov	r2, r8
   89d78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   89d7c:	464b      	mov	r3, r9
   89d7e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89d82:	f002 fc5f 	bl	8c644 <__aeabi_dmul>
   89d86:	4602      	mov	r2, r0
   89d88:	460b      	mov	r3, r1
   89d8a:	4630      	mov	r0, r6
   89d8c:	4639      	mov	r1, r7
   89d8e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89d92:	f002 ff07 	bl	8cba4 <__aeabi_d2iz>
   89d96:	4680      	mov	r8, r0
   89d98:	f002 fbea 	bl	8c570 <__aeabi_i2d>
   89d9c:	460b      	mov	r3, r1
   89d9e:	4602      	mov	r2, r0
   89da0:	4639      	mov	r1, r7
   89da2:	4630      	mov	r0, r6
   89da4:	f002 fa96 	bl	8c2d4 <__aeabi_dsub>
   89da8:	4606      	mov	r6, r0
   89daa:	9810      	ldr	r0, [sp, #64]	; 0x40
   89dac:	9d03      	ldr	r5, [sp, #12]
   89dae:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89db2:	2801      	cmp	r0, #1
   89db4:	460f      	mov	r7, r1
   89db6:	f805 3b01 	strb.w	r3, [r5], #1
   89dba:	d01e      	beq.n	89dfa <_dtoa_r+0xd32>
   89dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   89dbe:	9a03      	ldr	r2, [sp, #12]
   89dc0:	4413      	add	r3, r2
   89dc2:	4698      	mov	r8, r3
   89dc4:	2200      	movs	r2, #0
   89dc6:	4b6c      	ldr	r3, [pc, #432]	; (89f78 <_dtoa_r+0xeb0>)
   89dc8:	4630      	mov	r0, r6
   89dca:	4639      	mov	r1, r7
   89dcc:	f002 fc3a 	bl	8c644 <__aeabi_dmul>
   89dd0:	460f      	mov	r7, r1
   89dd2:	4606      	mov	r6, r0
   89dd4:	f002 fee6 	bl	8cba4 <__aeabi_d2iz>
   89dd8:	4681      	mov	r9, r0
   89dda:	f002 fbc9 	bl	8c570 <__aeabi_i2d>
   89dde:	4602      	mov	r2, r0
   89de0:	460b      	mov	r3, r1
   89de2:	4630      	mov	r0, r6
   89de4:	4639      	mov	r1, r7
   89de6:	f002 fa75 	bl	8c2d4 <__aeabi_dsub>
   89dea:	f109 0930 	add.w	r9, r9, #48	; 0x30
   89dee:	f805 9b01 	strb.w	r9, [r5], #1
   89df2:	4545      	cmp	r5, r8
   89df4:	4606      	mov	r6, r0
   89df6:	460f      	mov	r7, r1
   89df8:	d1e4      	bne.n	89dc4 <_dtoa_r+0xcfc>
   89dfa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   89dfe:	2200      	movs	r2, #0
   89e00:	4b5e      	ldr	r3, [pc, #376]	; (89f7c <_dtoa_r+0xeb4>)
   89e02:	4640      	mov	r0, r8
   89e04:	4649      	mov	r1, r9
   89e06:	f002 fa67 	bl	8c2d8 <__adddf3>
   89e0a:	4632      	mov	r2, r6
   89e0c:	463b      	mov	r3, r7
   89e0e:	f002 fe8b 	bl	8cb28 <__aeabi_dcmplt>
   89e12:	2800      	cmp	r0, #0
   89e14:	d158      	bne.n	89ec8 <_dtoa_r+0xe00>
   89e16:	4642      	mov	r2, r8
   89e18:	464b      	mov	r3, r9
   89e1a:	2000      	movs	r0, #0
   89e1c:	4957      	ldr	r1, [pc, #348]	; (89f7c <_dtoa_r+0xeb4>)
   89e1e:	f002 fa59 	bl	8c2d4 <__aeabi_dsub>
   89e22:	4632      	mov	r2, r6
   89e24:	463b      	mov	r3, r7
   89e26:	f002 fe9d 	bl	8cb64 <__aeabi_dcmpgt>
   89e2a:	2800      	cmp	r0, #0
   89e2c:	f43f ab73 	beq.w	89516 <_dtoa_r+0x44e>
   89e30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   89e34:	46a9      	mov	r9, r5
   89e36:	2b30      	cmp	r3, #48	; 0x30
   89e38:	f105 35ff 	add.w	r5, r5, #4294967295
   89e3c:	d0f8      	beq.n	89e30 <_dtoa_r+0xd68>
   89e3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89e40:	3301      	adds	r3, #1
   89e42:	9307      	str	r3, [sp, #28]
   89e44:	e505      	b.n	89852 <_dtoa_r+0x78a>
   89e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89e48:	2b00      	cmp	r3, #0
   89e4a:	f43f ae93 	beq.w	89b74 <_dtoa_r+0xaac>
   89e4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
   89e50:	2d00      	cmp	r5, #0
   89e52:	f77f ab60 	ble.w	89516 <_dtoa_r+0x44e>
   89e56:	2200      	movs	r2, #0
   89e58:	4b47      	ldr	r3, [pc, #284]	; (89f78 <_dtoa_r+0xeb0>)
   89e5a:	4630      	mov	r0, r6
   89e5c:	4639      	mov	r1, r7
   89e5e:	f002 fbf1 	bl	8c644 <__aeabi_dmul>
   89e62:	4606      	mov	r6, r0
   89e64:	460f      	mov	r7, r1
   89e66:	f109 0001 	add.w	r0, r9, #1
   89e6a:	f002 fb81 	bl	8c570 <__aeabi_i2d>
   89e6e:	4632      	mov	r2, r6
   89e70:	463b      	mov	r3, r7
   89e72:	f002 fbe7 	bl	8c644 <__aeabi_dmul>
   89e76:	2200      	movs	r2, #0
   89e78:	4b41      	ldr	r3, [pc, #260]	; (89f80 <_dtoa_r+0xeb8>)
   89e7a:	f002 fa2d 	bl	8c2d8 <__adddf3>
   89e7e:	9a07      	ldr	r2, [sp, #28]
   89e80:	4680      	mov	r8, r0
   89e82:	3a01      	subs	r2, #1
   89e84:	9213      	str	r2, [sp, #76]	; 0x4c
   89e86:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89e8a:	9510      	str	r5, [sp, #64]	; 0x40
   89e8c:	f7ff bab6 	b.w	893fc <_dtoa_r+0x334>
   89e90:	f04f 0902 	mov.w	r9, #2
   89e94:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   89e98:	f7ff ba8f 	b.w	893ba <_dtoa_r+0x2f2>
   89e9c:	9b07      	ldr	r3, [sp, #28]
   89e9e:	3301      	adds	r3, #1
   89ea0:	9307      	str	r3, [sp, #28]
   89ea2:	2331      	movs	r3, #49	; 0x31
   89ea4:	f7ff bb2f 	b.w	89506 <_dtoa_r+0x43e>
   89ea8:	46b3      	mov	fp, r6
   89eaa:	2339      	movs	r3, #57	; 0x39
   89eac:	9a07      	ldr	r2, [sp, #28]
   89eae:	462e      	mov	r6, r5
   89eb0:	3201      	adds	r2, #1
   89eb2:	463d      	mov	r5, r7
   89eb4:	9207      	str	r2, [sp, #28]
   89eb6:	f80b 3b01 	strb.w	r3, [fp], #1
   89eba:	e4aa      	b.n	89812 <_dtoa_r+0x74a>
   89ebc:	f04f 0800 	mov.w	r8, #0
   89ec0:	4645      	mov	r5, r8
   89ec2:	e61e      	b.n	89b02 <_dtoa_r+0xa3a>
   89ec4:	4699      	mov	r9, r3
   89ec6:	e43c      	b.n	89742 <_dtoa_r+0x67a>
   89ec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89eca:	9a03      	ldr	r2, [sp, #12]
   89ecc:	9307      	str	r3, [sp, #28]
   89ece:	f7ff bb13 	b.w	894f8 <_dtoa_r+0x430>
   89ed2:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89ed6:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89eda:	46a9      	mov	r9, r5
   89edc:	3301      	adds	r3, #1
   89ede:	9307      	str	r3, [sp, #28]
   89ee0:	e4b7      	b.n	89852 <_dtoa_r+0x78a>
   89ee2:	f47f aed7 	bne.w	89c94 <_dtoa_r+0xbcc>
   89ee6:	07da      	lsls	r2, r3, #31
   89ee8:	f57f aed4 	bpl.w	89c94 <_dtoa_r+0xbcc>
   89eec:	e6cd      	b.n	89c8a <_dtoa_r+0xbc2>
   89eee:	2b39      	cmp	r3, #57	; 0x39
   89ef0:	d0da      	beq.n	89ea8 <_dtoa_r+0xde0>
   89ef2:	f1b9 0f00 	cmp.w	r9, #0
   89ef6:	f73f aecb 	bgt.w	89c90 <_dtoa_r+0xbc8>
   89efa:	e6cb      	b.n	89c94 <_dtoa_r+0xbcc>
   89efc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89efe:	2b02      	cmp	r3, #2
   89f00:	f73f adeb 	bgt.w	89ada <_dtoa_r+0xa12>
   89f04:	9707      	str	r7, [sp, #28]
   89f06:	e570      	b.n	899ea <_dtoa_r+0x922>
   89f08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f0a:	2b02      	cmp	r3, #2
   89f0c:	f73f ade5 	bgt.w	89ada <_dtoa_r+0xa12>
   89f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89f12:	9707      	str	r7, [sp, #28]
   89f14:	930a      	str	r3, [sp, #40]	; 0x28
   89f16:	e4e4      	b.n	898e2 <_dtoa_r+0x81a>
   89f18:	f04f 0902 	mov.w	r9, #2
   89f1c:	f7ff ba4d 	b.w	893ba <_dtoa_r+0x2f2>
   89f20:	4602      	mov	r2, r0
   89f22:	f240 21ea 	movw	r1, #746	; 0x2ea
   89f26:	4b17      	ldr	r3, [pc, #92]	; (89f84 <_dtoa_r+0xebc>)
   89f28:	4817      	ldr	r0, [pc, #92]	; (89f88 <_dtoa_r+0xec0>)
   89f2a:	f002 f84d 	bl	8bfc8 <__assert_func>
   89f2e:	4b17      	ldr	r3, [pc, #92]	; (89f8c <_dtoa_r+0xec4>)
   89f30:	9303      	str	r3, [sp, #12]
   89f32:	f7ff b904 	b.w	8913e <_dtoa_r+0x76>
   89f36:	2500      	movs	r5, #0
   89f38:	4620      	mov	r0, r4
   89f3a:	4629      	mov	r1, r5
   89f3c:	6465      	str	r5, [r4, #68]	; 0x44
   89f3e:	f001 f8eb 	bl	8b118 <_Balloc>
   89f42:	9003      	str	r0, [sp, #12]
   89f44:	b958      	cbnz	r0, 89f5e <_dtoa_r+0xe96>
   89f46:	2200      	movs	r2, #0
   89f48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89f4c:	4b0d      	ldr	r3, [pc, #52]	; (89f84 <_dtoa_r+0xebc>)
   89f4e:	480e      	ldr	r0, [pc, #56]	; (89f88 <_dtoa_r+0xec0>)
   89f50:	f002 f83a 	bl	8bfc8 <__assert_func>
   89f54:	f43f ac0d 	beq.w	89772 <_dtoa_r+0x6aa>
   89f58:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89f5c:	e48f      	b.n	8987e <_dtoa_r+0x7b6>
   89f5e:	f04f 33ff 	mov.w	r3, #4294967295
   89f62:	9312      	str	r3, [sp, #72]	; 0x48
   89f64:	930a      	str	r3, [sp, #40]	; 0x28
   89f66:	2301      	movs	r3, #1
   89f68:	9a03      	ldr	r2, [sp, #12]
   89f6a:	9525      	str	r5, [sp, #148]	; 0x94
   89f6c:	6422      	str	r2, [r4, #64]	; 0x40
   89f6e:	930c      	str	r3, [sp, #48]	; 0x30
   89f70:	f7ff bad1 	b.w	89516 <_dtoa_r+0x44e>
   89f74:	0008cfb0 	.word	0x0008cfb0
   89f78:	40240000 	.word	0x40240000
   89f7c:	3fe00000 	.word	0x3fe00000
   89f80:	401c0000 	.word	0x401c0000
   89f84:	0008ce64 	.word	0x0008ce64
   89f88:	0008ce78 	.word	0x0008ce78
   89f8c:	0008ce58 	.word	0x0008ce58

00089f90 <__sflush_r>:
   89f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   89f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89f98:	460d      	mov	r5, r1
   89f9a:	0711      	lsls	r1, r2, #28
   89f9c:	4680      	mov	r8, r0
   89f9e:	d447      	bmi.n	8a030 <__sflush_r+0xa0>
   89fa0:	686b      	ldr	r3, [r5, #4]
   89fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   89fa6:	2b00      	cmp	r3, #0
   89fa8:	81aa      	strh	r2, [r5, #12]
   89faa:	dd5e      	ble.n	8a06a <__sflush_r+0xda>
   89fac:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89fae:	2c00      	cmp	r4, #0
   89fb0:	d058      	beq.n	8a064 <__sflush_r+0xd4>
   89fb2:	2300      	movs	r3, #0
   89fb4:	f8d8 6000 	ldr.w	r6, [r8]
   89fb8:	f8c8 3000 	str.w	r3, [r8]
   89fbc:	b293      	uxth	r3, r2
   89fbe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   89fc2:	d156      	bne.n	8a072 <__sflush_r+0xe2>
   89fc4:	2301      	movs	r3, #1
   89fc6:	4640      	mov	r0, r8
   89fc8:	69e9      	ldr	r1, [r5, #28]
   89fca:	47a0      	blx	r4
   89fcc:	1c43      	adds	r3, r0, #1
   89fce:	d067      	beq.n	8a0a0 <__sflush_r+0x110>
   89fd0:	89ab      	ldrh	r3, [r5, #12]
   89fd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   89fd4:	075f      	lsls	r7, r3, #29
   89fd6:	d505      	bpl.n	89fe4 <__sflush_r+0x54>
   89fd8:	686a      	ldr	r2, [r5, #4]
   89fda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   89fdc:	1a80      	subs	r0, r0, r2
   89fde:	b10b      	cbz	r3, 89fe4 <__sflush_r+0x54>
   89fe0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   89fe2:	1ac0      	subs	r0, r0, r3
   89fe4:	4602      	mov	r2, r0
   89fe6:	69e9      	ldr	r1, [r5, #28]
   89fe8:	2300      	movs	r3, #0
   89fea:	4640      	mov	r0, r8
   89fec:	47a0      	blx	r4
   89fee:	1c41      	adds	r1, r0, #1
   89ff0:	d141      	bne.n	8a076 <__sflush_r+0xe6>
   89ff2:	f8d8 3000 	ldr.w	r3, [r8]
   89ff6:	2b00      	cmp	r3, #0
   89ff8:	d03d      	beq.n	8a076 <__sflush_r+0xe6>
   89ffa:	2b1d      	cmp	r3, #29
   89ffc:	d001      	beq.n	8a002 <__sflush_r+0x72>
   89ffe:	2b16      	cmp	r3, #22
   8a000:	d156      	bne.n	8a0b0 <__sflush_r+0x120>
   8a002:	2100      	movs	r1, #0
   8a004:	692a      	ldr	r2, [r5, #16]
   8a006:	89ab      	ldrh	r3, [r5, #12]
   8a008:	e9c5 2100 	strd	r2, r1, [r5]
   8a00c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a010:	81ab      	strh	r3, [r5, #12]
   8a012:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a014:	f8c8 6000 	str.w	r6, [r8]
   8a018:	b321      	cbz	r1, 8a064 <__sflush_r+0xd4>
   8a01a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a01e:	4299      	cmp	r1, r3
   8a020:	d002      	beq.n	8a028 <__sflush_r+0x98>
   8a022:	4640      	mov	r0, r8
   8a024:	f000 f9cc 	bl	8a3c0 <_free_r>
   8a028:	2000      	movs	r0, #0
   8a02a:	6328      	str	r0, [r5, #48]	; 0x30
   8a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a030:	692f      	ldr	r7, [r5, #16]
   8a032:	b1bf      	cbz	r7, 8a064 <__sflush_r+0xd4>
   8a034:	b293      	uxth	r3, r2
   8a036:	079a      	lsls	r2, r3, #30
   8a038:	bf18      	it	ne
   8a03a:	2300      	movne	r3, #0
   8a03c:	682e      	ldr	r6, [r5, #0]
   8a03e:	bf08      	it	eq
   8a040:	696b      	ldreq	r3, [r5, #20]
   8a042:	602f      	str	r7, [r5, #0]
   8a044:	1bf6      	subs	r6, r6, r7
   8a046:	60ab      	str	r3, [r5, #8]
   8a048:	e00a      	b.n	8a060 <__sflush_r+0xd0>
   8a04a:	4633      	mov	r3, r6
   8a04c:	463a      	mov	r2, r7
   8a04e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a050:	4640      	mov	r0, r8
   8a052:	69e9      	ldr	r1, [r5, #28]
   8a054:	47a0      	blx	r4
   8a056:	1e04      	subs	r4, r0, #0
   8a058:	eba6 0604 	sub.w	r6, r6, r4
   8a05c:	4427      	add	r7, r4
   8a05e:	dd17      	ble.n	8a090 <__sflush_r+0x100>
   8a060:	2e00      	cmp	r6, #0
   8a062:	dcf2      	bgt.n	8a04a <__sflush_r+0xba>
   8a064:	2000      	movs	r0, #0
   8a066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a06a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a06c:	2b00      	cmp	r3, #0
   8a06e:	dc9d      	bgt.n	89fac <__sflush_r+0x1c>
   8a070:	e7f8      	b.n	8a064 <__sflush_r+0xd4>
   8a072:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a074:	e7ae      	b.n	89fd4 <__sflush_r+0x44>
   8a076:	2100      	movs	r1, #0
   8a078:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a07c:	692a      	ldr	r2, [r5, #16]
   8a07e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a082:	81ab      	strh	r3, [r5, #12]
   8a084:	04db      	lsls	r3, r3, #19
   8a086:	e9c5 2100 	strd	r2, r1, [r5]
   8a08a:	d5c2      	bpl.n	8a012 <__sflush_r+0x82>
   8a08c:	6528      	str	r0, [r5, #80]	; 0x50
   8a08e:	e7c0      	b.n	8a012 <__sflush_r+0x82>
   8a090:	89ab      	ldrh	r3, [r5, #12]
   8a092:	f04f 30ff 	mov.w	r0, #4294967295
   8a096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a09a:	81ab      	strh	r3, [r5, #12]
   8a09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a0a0:	f8d8 3000 	ldr.w	r3, [r8]
   8a0a4:	2b00      	cmp	r3, #0
   8a0a6:	d093      	beq.n	89fd0 <__sflush_r+0x40>
   8a0a8:	2b1d      	cmp	r3, #29
   8a0aa:	d006      	beq.n	8a0ba <__sflush_r+0x12a>
   8a0ac:	2b16      	cmp	r3, #22
   8a0ae:	d004      	beq.n	8a0ba <__sflush_r+0x12a>
   8a0b0:	89ab      	ldrh	r3, [r5, #12]
   8a0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a0b6:	81ab      	strh	r3, [r5, #12]
   8a0b8:	e7d5      	b.n	8a066 <__sflush_r+0xd6>
   8a0ba:	f8c8 6000 	str.w	r6, [r8]
   8a0be:	e7d1      	b.n	8a064 <__sflush_r+0xd4>

0008a0c0 <_fflush_r>:
   8a0c0:	b538      	push	{r3, r4, r5, lr}
   8a0c2:	460c      	mov	r4, r1
   8a0c4:	4605      	mov	r5, r0
   8a0c6:	b108      	cbz	r0, 8a0cc <_fflush_r+0xc>
   8a0c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a0ca:	b1a3      	cbz	r3, 8a0f6 <_fflush_r+0x36>
   8a0cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a0d0:	b1b8      	cbz	r0, 8a102 <_fflush_r+0x42>
   8a0d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a0d4:	07db      	lsls	r3, r3, #31
   8a0d6:	d401      	bmi.n	8a0dc <_fflush_r+0x1c>
   8a0d8:	0581      	lsls	r1, r0, #22
   8a0da:	d515      	bpl.n	8a108 <_fflush_r+0x48>
   8a0dc:	4628      	mov	r0, r5
   8a0de:	4621      	mov	r1, r4
   8a0e0:	f7ff ff56 	bl	89f90 <__sflush_r>
   8a0e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a0e6:	4605      	mov	r5, r0
   8a0e8:	07da      	lsls	r2, r3, #31
   8a0ea:	d402      	bmi.n	8a0f2 <_fflush_r+0x32>
   8a0ec:	89a3      	ldrh	r3, [r4, #12]
   8a0ee:	059b      	lsls	r3, r3, #22
   8a0f0:	d50e      	bpl.n	8a110 <_fflush_r+0x50>
   8a0f2:	4628      	mov	r0, r5
   8a0f4:	bd38      	pop	{r3, r4, r5, pc}
   8a0f6:	f000 f83f 	bl	8a178 <__sinit>
   8a0fa:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a0fe:	2800      	cmp	r0, #0
   8a100:	d1e7      	bne.n	8a0d2 <_fflush_r+0x12>
   8a102:	4605      	mov	r5, r0
   8a104:	4628      	mov	r0, r5
   8a106:	bd38      	pop	{r3, r4, r5, pc}
   8a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a10a:	f000 fc07 	bl	8a91c <__retarget_lock_acquire_recursive>
   8a10e:	e7e5      	b.n	8a0dc <_fflush_r+0x1c>
   8a110:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a112:	f000 fc05 	bl	8a920 <__retarget_lock_release_recursive>
   8a116:	4628      	mov	r0, r5
   8a118:	bd38      	pop	{r3, r4, r5, pc}
   8a11a:	bf00      	nop

0008a11c <std>:
   8a11c:	2300      	movs	r3, #0
   8a11e:	b510      	push	{r4, lr}
   8a120:	4604      	mov	r4, r0
   8a122:	e9c0 3300 	strd	r3, r3, [r0]
   8a126:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a12a:	8181      	strh	r1, [r0, #12]
   8a12c:	81c2      	strh	r2, [r0, #14]
   8a12e:	4619      	mov	r1, r3
   8a130:	6083      	str	r3, [r0, #8]
   8a132:	6643      	str	r3, [r0, #100]	; 0x64
   8a134:	6183      	str	r3, [r0, #24]
   8a136:	2208      	movs	r2, #8
   8a138:	305c      	adds	r0, #92	; 0x5c
   8a13a:	f7fc f853 	bl	861e4 <memset>
   8a13e:	4807      	ldr	r0, [pc, #28]	; (8a15c <std+0x40>)
   8a140:	4907      	ldr	r1, [pc, #28]	; (8a160 <std+0x44>)
   8a142:	4a08      	ldr	r2, [pc, #32]	; (8a164 <std+0x48>)
   8a144:	4b08      	ldr	r3, [pc, #32]	; (8a168 <std+0x4c>)
   8a146:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a14a:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a14e:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a150:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a158:	f000 bbdc 	b.w	8a914 <__retarget_lock_init_recursive>
   8a15c:	0008bc85 	.word	0x0008bc85
   8a160:	0008bca9 	.word	0x0008bca9
   8a164:	0008bce9 	.word	0x0008bce9
   8a168:	0008bd09 	.word	0x0008bd09

0008a16c <_cleanup_r>:
   8a16c:	4901      	ldr	r1, [pc, #4]	; (8a174 <_cleanup_r+0x8>)
   8a16e:	f000 bba3 	b.w	8a8b8 <_fwalk_reent>
   8a172:	bf00      	nop
   8a174:	0008c089 	.word	0x0008c089

0008a178 <__sinit>:
   8a178:	b510      	push	{r4, lr}
   8a17a:	4604      	mov	r4, r0
   8a17c:	4813      	ldr	r0, [pc, #76]	; (8a1cc <__sinit+0x54>)
   8a17e:	f000 fbcd 	bl	8a91c <__retarget_lock_acquire_recursive>
   8a182:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a184:	b9ea      	cbnz	r2, 8a1c2 <__sinit+0x4a>
   8a186:	2003      	movs	r0, #3
   8a188:	4911      	ldr	r1, [pc, #68]	; (8a1d0 <__sinit+0x58>)
   8a18a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a18e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a192:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a196:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a198:	6860      	ldr	r0, [r4, #4]
   8a19a:	2104      	movs	r1, #4
   8a19c:	f7ff ffbe 	bl	8a11c <std>
   8a1a0:	68a0      	ldr	r0, [r4, #8]
   8a1a2:	2201      	movs	r2, #1
   8a1a4:	2109      	movs	r1, #9
   8a1a6:	f7ff ffb9 	bl	8a11c <std>
   8a1aa:	68e0      	ldr	r0, [r4, #12]
   8a1ac:	2202      	movs	r2, #2
   8a1ae:	2112      	movs	r1, #18
   8a1b0:	f7ff ffb4 	bl	8a11c <std>
   8a1b4:	2301      	movs	r3, #1
   8a1b6:	4805      	ldr	r0, [pc, #20]	; (8a1cc <__sinit+0x54>)
   8a1b8:	63a3      	str	r3, [r4, #56]	; 0x38
   8a1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a1be:	f000 bbaf 	b.w	8a920 <__retarget_lock_release_recursive>
   8a1c2:	4802      	ldr	r0, [pc, #8]	; (8a1cc <__sinit+0x54>)
   8a1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a1c8:	f000 bbaa 	b.w	8a920 <__retarget_lock_release_recursive>
   8a1cc:	20002bb4 	.word	0x20002bb4
   8a1d0:	0008a16d 	.word	0x0008a16d

0008a1d4 <__sfp_lock_acquire>:
   8a1d4:	4801      	ldr	r0, [pc, #4]	; (8a1dc <__sfp_lock_acquire+0x8>)
   8a1d6:	f000 bba1 	b.w	8a91c <__retarget_lock_acquire_recursive>
   8a1da:	bf00      	nop
   8a1dc:	20002bc8 	.word	0x20002bc8

0008a1e0 <__sfp_lock_release>:
   8a1e0:	4801      	ldr	r0, [pc, #4]	; (8a1e8 <__sfp_lock_release+0x8>)
   8a1e2:	f000 bb9d 	b.w	8a920 <__retarget_lock_release_recursive>
   8a1e6:	bf00      	nop
   8a1e8:	20002bc8 	.word	0x20002bc8

0008a1ec <__libc_fini_array>:
   8a1ec:	b538      	push	{r3, r4, r5, lr}
   8a1ee:	4b08      	ldr	r3, [pc, #32]	; (8a210 <__libc_fini_array+0x24>)
   8a1f0:	4d08      	ldr	r5, [pc, #32]	; (8a214 <__libc_fini_array+0x28>)
   8a1f2:	1b5b      	subs	r3, r3, r5
   8a1f4:	109c      	asrs	r4, r3, #2
   8a1f6:	d007      	beq.n	8a208 <__libc_fini_array+0x1c>
   8a1f8:	3b04      	subs	r3, #4
   8a1fa:	441d      	add	r5, r3
   8a1fc:	3c01      	subs	r4, #1
   8a1fe:	f855 3904 	ldr.w	r3, [r5], #-4
   8a202:	4798      	blx	r3
   8a204:	2c00      	cmp	r4, #0
   8a206:	d1f9      	bne.n	8a1fc <__libc_fini_array+0x10>
   8a208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a20c:	f002 bfe6 	b.w	8d1dc <_fini>
   8a210:	0008d1ec 	.word	0x0008d1ec
   8a214:	0008d1e8 	.word	0x0008d1e8

0008a218 <__fputwc>:
   8a218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a21c:	b083      	sub	sp, #12
   8a21e:	4607      	mov	r7, r0
   8a220:	4688      	mov	r8, r1
   8a222:	4614      	mov	r4, r2
   8a224:	f000 fb6c 	bl	8a900 <__locale_mb_cur_max>
   8a228:	2801      	cmp	r0, #1
   8a22a:	d103      	bne.n	8a234 <__fputwc+0x1c>
   8a22c:	f108 33ff 	add.w	r3, r8, #4294967295
   8a230:	2bfe      	cmp	r3, #254	; 0xfe
   8a232:	d933      	bls.n	8a29c <__fputwc+0x84>
   8a234:	4642      	mov	r2, r8
   8a236:	4638      	mov	r0, r7
   8a238:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a23c:	a901      	add	r1, sp, #4
   8a23e:	f001 fe3b 	bl	8beb8 <_wcrtomb_r>
   8a242:	1c42      	adds	r2, r0, #1
   8a244:	4606      	mov	r6, r0
   8a246:	d02f      	beq.n	8a2a8 <__fputwc+0x90>
   8a248:	b318      	cbz	r0, 8a292 <__fputwc+0x7a>
   8a24a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a24e:	2500      	movs	r5, #0
   8a250:	f10d 0904 	add.w	r9, sp, #4
   8a254:	e008      	b.n	8a268 <__fputwc+0x50>
   8a256:	6823      	ldr	r3, [r4, #0]
   8a258:	1c5a      	adds	r2, r3, #1
   8a25a:	6022      	str	r2, [r4, #0]
   8a25c:	7019      	strb	r1, [r3, #0]
   8a25e:	3501      	adds	r5, #1
   8a260:	42b5      	cmp	r5, r6
   8a262:	d216      	bcs.n	8a292 <__fputwc+0x7a>
   8a264:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a268:	68a3      	ldr	r3, [r4, #8]
   8a26a:	3b01      	subs	r3, #1
   8a26c:	2b00      	cmp	r3, #0
   8a26e:	60a3      	str	r3, [r4, #8]
   8a270:	daf1      	bge.n	8a256 <__fputwc+0x3e>
   8a272:	69a2      	ldr	r2, [r4, #24]
   8a274:	4293      	cmp	r3, r2
   8a276:	db01      	blt.n	8a27c <__fputwc+0x64>
   8a278:	290a      	cmp	r1, #10
   8a27a:	d1ec      	bne.n	8a256 <__fputwc+0x3e>
   8a27c:	4622      	mov	r2, r4
   8a27e:	4638      	mov	r0, r7
   8a280:	f001 fdc2 	bl	8be08 <__swbuf_r>
   8a284:	1c43      	adds	r3, r0, #1
   8a286:	d1ea      	bne.n	8a25e <__fputwc+0x46>
   8a288:	4606      	mov	r6, r0
   8a28a:	4630      	mov	r0, r6
   8a28c:	b003      	add	sp, #12
   8a28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a292:	4646      	mov	r6, r8
   8a294:	4630      	mov	r0, r6
   8a296:	b003      	add	sp, #12
   8a298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a29c:	fa5f f188 	uxtb.w	r1, r8
   8a2a0:	4606      	mov	r6, r0
   8a2a2:	f88d 1004 	strb.w	r1, [sp, #4]
   8a2a6:	e7d2      	b.n	8a24e <__fputwc+0x36>
   8a2a8:	4630      	mov	r0, r6
   8a2aa:	89a3      	ldrh	r3, [r4, #12]
   8a2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a2b0:	81a3      	strh	r3, [r4, #12]
   8a2b2:	b003      	add	sp, #12
   8a2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a2b8 <_fputwc_r>:
   8a2b8:	b530      	push	{r4, r5, lr}
   8a2ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a2bc:	4614      	mov	r4, r2
   8a2be:	f013 0f01 	tst.w	r3, #1
   8a2c2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a2c6:	4605      	mov	r5, r0
   8a2c8:	b083      	sub	sp, #12
   8a2ca:	b29a      	uxth	r2, r3
   8a2cc:	d101      	bne.n	8a2d2 <_fputwc_r+0x1a>
   8a2ce:	0598      	lsls	r0, r3, #22
   8a2d0:	d51c      	bpl.n	8a30c <_fputwc_r+0x54>
   8a2d2:	0490      	lsls	r0, r2, #18
   8a2d4:	d406      	bmi.n	8a2e4 <_fputwc_r+0x2c>
   8a2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a2d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a2dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a2e0:	81a3      	strh	r3, [r4, #12]
   8a2e2:	6662      	str	r2, [r4, #100]	; 0x64
   8a2e4:	4628      	mov	r0, r5
   8a2e6:	4622      	mov	r2, r4
   8a2e8:	f7ff ff96 	bl	8a218 <__fputwc>
   8a2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a2ee:	4605      	mov	r5, r0
   8a2f0:	07da      	lsls	r2, r3, #31
   8a2f2:	d402      	bmi.n	8a2fa <_fputwc_r+0x42>
   8a2f4:	89a3      	ldrh	r3, [r4, #12]
   8a2f6:	059b      	lsls	r3, r3, #22
   8a2f8:	d502      	bpl.n	8a300 <_fputwc_r+0x48>
   8a2fa:	4628      	mov	r0, r5
   8a2fc:	b003      	add	sp, #12
   8a2fe:	bd30      	pop	{r4, r5, pc}
   8a300:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a302:	f000 fb0d 	bl	8a920 <__retarget_lock_release_recursive>
   8a306:	4628      	mov	r0, r5
   8a308:	b003      	add	sp, #12
   8a30a:	bd30      	pop	{r4, r5, pc}
   8a30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a30e:	9101      	str	r1, [sp, #4]
   8a310:	f000 fb04 	bl	8a91c <__retarget_lock_acquire_recursive>
   8a314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a318:	9901      	ldr	r1, [sp, #4]
   8a31a:	b29a      	uxth	r2, r3
   8a31c:	e7d9      	b.n	8a2d2 <_fputwc_r+0x1a>
   8a31e:	bf00      	nop

0008a320 <_malloc_trim_r>:
   8a320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a322:	460c      	mov	r4, r1
   8a324:	4f23      	ldr	r7, [pc, #140]	; (8a3b4 <_malloc_trim_r+0x94>)
   8a326:	4606      	mov	r6, r0
   8a328:	f000 feea 	bl	8b100 <__malloc_lock>
   8a32c:	68bb      	ldr	r3, [r7, #8]
   8a32e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a332:	685d      	ldr	r5, [r3, #4]
   8a334:	310f      	adds	r1, #15
   8a336:	f025 0503 	bic.w	r5, r5, #3
   8a33a:	194b      	adds	r3, r1, r5
   8a33c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a340:	f023 030f 	bic.w	r3, r3, #15
   8a344:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a348:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a34c:	db07      	blt.n	8a35e <_malloc_trim_r+0x3e>
   8a34e:	2100      	movs	r1, #0
   8a350:	4630      	mov	r0, r6
   8a352:	f001 fc85 	bl	8bc60 <_sbrk_r>
   8a356:	68bb      	ldr	r3, [r7, #8]
   8a358:	442b      	add	r3, r5
   8a35a:	4298      	cmp	r0, r3
   8a35c:	d004      	beq.n	8a368 <_malloc_trim_r+0x48>
   8a35e:	4630      	mov	r0, r6
   8a360:	f000 fed4 	bl	8b10c <__malloc_unlock>
   8a364:	2000      	movs	r0, #0
   8a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a368:	4630      	mov	r0, r6
   8a36a:	4261      	negs	r1, r4
   8a36c:	f001 fc78 	bl	8bc60 <_sbrk_r>
   8a370:	3001      	adds	r0, #1
   8a372:	d00d      	beq.n	8a390 <_malloc_trim_r+0x70>
   8a374:	4a10      	ldr	r2, [pc, #64]	; (8a3b8 <_malloc_trim_r+0x98>)
   8a376:	68b9      	ldr	r1, [r7, #8]
   8a378:	6813      	ldr	r3, [r2, #0]
   8a37a:	1b2d      	subs	r5, r5, r4
   8a37c:	f045 0501 	orr.w	r5, r5, #1
   8a380:	4630      	mov	r0, r6
   8a382:	1b1b      	subs	r3, r3, r4
   8a384:	604d      	str	r5, [r1, #4]
   8a386:	6013      	str	r3, [r2, #0]
   8a388:	f000 fec0 	bl	8b10c <__malloc_unlock>
   8a38c:	2001      	movs	r0, #1
   8a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a390:	2100      	movs	r1, #0
   8a392:	4630      	mov	r0, r6
   8a394:	f001 fc64 	bl	8bc60 <_sbrk_r>
   8a398:	68ba      	ldr	r2, [r7, #8]
   8a39a:	1a83      	subs	r3, r0, r2
   8a39c:	2b0f      	cmp	r3, #15
   8a39e:	ddde      	ble.n	8a35e <_malloc_trim_r+0x3e>
   8a3a0:	4906      	ldr	r1, [pc, #24]	; (8a3bc <_malloc_trim_r+0x9c>)
   8a3a2:	f043 0301 	orr.w	r3, r3, #1
   8a3a6:	680c      	ldr	r4, [r1, #0]
   8a3a8:	4903      	ldr	r1, [pc, #12]	; (8a3b8 <_malloc_trim_r+0x98>)
   8a3aa:	1b00      	subs	r0, r0, r4
   8a3ac:	6053      	str	r3, [r2, #4]
   8a3ae:	6008      	str	r0, [r1, #0]
   8a3b0:	e7d5      	b.n	8a35e <_malloc_trim_r+0x3e>
   8a3b2:	bf00      	nop
   8a3b4:	20000cb0 	.word	0x20000cb0
   8a3b8:	20001f24 	.word	0x20001f24
   8a3bc:	200010b8 	.word	0x200010b8

0008a3c0 <_free_r>:
   8a3c0:	2900      	cmp	r1, #0
   8a3c2:	d05f      	beq.n	8a484 <_free_r+0xc4>
   8a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a3c6:	460c      	mov	r4, r1
   8a3c8:	4606      	mov	r6, r0
   8a3ca:	f000 fe99 	bl	8b100 <__malloc_lock>
   8a3ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a3d2:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a5c8 <_free_r+0x208>
   8a3d6:	f1a4 0008 	sub.w	r0, r4, #8
   8a3da:	f023 0101 	bic.w	r1, r3, #1
   8a3de:	1842      	adds	r2, r0, r1
   8a3e0:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a3e4:	6855      	ldr	r5, [r2, #4]
   8a3e6:	4297      	cmp	r7, r2
   8a3e8:	f025 0503 	bic.w	r5, r5, #3
   8a3ec:	f000 8089 	beq.w	8a502 <_free_r+0x142>
   8a3f0:	07df      	lsls	r7, r3, #31
   8a3f2:	6055      	str	r5, [r2, #4]
   8a3f4:	d434      	bmi.n	8a460 <_free_r+0xa0>
   8a3f6:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a3fa:	f10c 0408 	add.w	r4, ip, #8
   8a3fe:	1bc0      	subs	r0, r0, r7
   8a400:	6883      	ldr	r3, [r0, #8]
   8a402:	4439      	add	r1, r7
   8a404:	42a3      	cmp	r3, r4
   8a406:	d06a      	beq.n	8a4de <_free_r+0x11e>
   8a408:	1957      	adds	r7, r2, r5
   8a40a:	687f      	ldr	r7, [r7, #4]
   8a40c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a410:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a414:	f8ce 3008 	str.w	r3, [lr, #8]
   8a418:	07fb      	lsls	r3, r7, #31
   8a41a:	f140 8097 	bpl.w	8a54c <_free_r+0x18c>
   8a41e:	f041 0301 	orr.w	r3, r1, #1
   8a422:	6043      	str	r3, [r0, #4]
   8a424:	6011      	str	r1, [r2, #0]
   8a426:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a42a:	d234      	bcs.n	8a496 <_free_r+0xd6>
   8a42c:	2201      	movs	r2, #1
   8a42e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a432:	08cb      	lsrs	r3, r1, #3
   8a434:	0949      	lsrs	r1, r1, #5
   8a436:	4413      	add	r3, r2
   8a438:	fa02 f101 	lsl.w	r1, r2, r1
   8a43c:	4321      	orrs	r1, r4
   8a43e:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a442:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a446:	3a08      	subs	r2, #8
   8a448:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a44c:	f8cc 1004 	str.w	r1, [ip, #4]
   8a450:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a454:	60e0      	str	r0, [r4, #12]
   8a456:	4630      	mov	r0, r6
   8a458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a45c:	f000 be56 	b.w	8b10c <__malloc_unlock>
   8a460:	1953      	adds	r3, r2, r5
   8a462:	685b      	ldr	r3, [r3, #4]
   8a464:	07df      	lsls	r7, r3, #31
   8a466:	d40e      	bmi.n	8a486 <_free_r+0xc6>
   8a468:	4429      	add	r1, r5
   8a46a:	f10c 0408 	add.w	r4, ip, #8
   8a46e:	6893      	ldr	r3, [r2, #8]
   8a470:	42a3      	cmp	r3, r4
   8a472:	d073      	beq.n	8a55c <_free_r+0x19c>
   8a474:	68d4      	ldr	r4, [r2, #12]
   8a476:	f041 0201 	orr.w	r2, r1, #1
   8a47a:	60dc      	str	r4, [r3, #12]
   8a47c:	60a3      	str	r3, [r4, #8]
   8a47e:	6042      	str	r2, [r0, #4]
   8a480:	5041      	str	r1, [r0, r1]
   8a482:	e7d0      	b.n	8a426 <_free_r+0x66>
   8a484:	4770      	bx	lr
   8a486:	f041 0301 	orr.w	r3, r1, #1
   8a48a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a48e:	f844 3c04 	str.w	r3, [r4, #-4]
   8a492:	6011      	str	r1, [r2, #0]
   8a494:	d3ca      	bcc.n	8a42c <_free_r+0x6c>
   8a496:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a49a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a49e:	d24a      	bcs.n	8a536 <_free_r+0x176>
   8a4a0:	098b      	lsrs	r3, r1, #6
   8a4a2:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a4a6:	00ed      	lsls	r5, r5, #3
   8a4a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a4ac:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a4b0:	eb0c 0405 	add.w	r4, ip, r5
   8a4b4:	3c08      	subs	r4, #8
   8a4b6:	429c      	cmp	r4, r3
   8a4b8:	d059      	beq.n	8a56e <_free_r+0x1ae>
   8a4ba:	685a      	ldr	r2, [r3, #4]
   8a4bc:	f022 0203 	bic.w	r2, r2, #3
   8a4c0:	428a      	cmp	r2, r1
   8a4c2:	d902      	bls.n	8a4ca <_free_r+0x10a>
   8a4c4:	689b      	ldr	r3, [r3, #8]
   8a4c6:	429c      	cmp	r4, r3
   8a4c8:	d1f7      	bne.n	8a4ba <_free_r+0xfa>
   8a4ca:	68dc      	ldr	r4, [r3, #12]
   8a4cc:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a4d0:	60a0      	str	r0, [r4, #8]
   8a4d2:	60d8      	str	r0, [r3, #12]
   8a4d4:	4630      	mov	r0, r6
   8a4d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a4da:	f000 be17 	b.w	8b10c <__malloc_unlock>
   8a4de:	1953      	adds	r3, r2, r5
   8a4e0:	685b      	ldr	r3, [r3, #4]
   8a4e2:	07db      	lsls	r3, r3, #31
   8a4e4:	d466      	bmi.n	8a5b4 <_free_r+0x1f4>
   8a4e6:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a4ea:	4429      	add	r1, r5
   8a4ec:	f041 0401 	orr.w	r4, r1, #1
   8a4f0:	60d3      	str	r3, [r2, #12]
   8a4f2:	609a      	str	r2, [r3, #8]
   8a4f4:	6044      	str	r4, [r0, #4]
   8a4f6:	5041      	str	r1, [r0, r1]
   8a4f8:	4630      	mov	r0, r6
   8a4fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a4fe:	f000 be05 	b.w	8b10c <__malloc_unlock>
   8a502:	07db      	lsls	r3, r3, #31
   8a504:	4429      	add	r1, r5
   8a506:	d407      	bmi.n	8a518 <_free_r+0x158>
   8a508:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a50c:	1b00      	subs	r0, r0, r4
   8a50e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a512:	4421      	add	r1, r4
   8a514:	60d3      	str	r3, [r2, #12]
   8a516:	609a      	str	r2, [r3, #8]
   8a518:	4b29      	ldr	r3, [pc, #164]	; (8a5c0 <_free_r+0x200>)
   8a51a:	f041 0201 	orr.w	r2, r1, #1
   8a51e:	681b      	ldr	r3, [r3, #0]
   8a520:	6042      	str	r2, [r0, #4]
   8a522:	428b      	cmp	r3, r1
   8a524:	f8cc 0008 	str.w	r0, [ip, #8]
   8a528:	d895      	bhi.n	8a456 <_free_r+0x96>
   8a52a:	4b26      	ldr	r3, [pc, #152]	; (8a5c4 <_free_r+0x204>)
   8a52c:	4630      	mov	r0, r6
   8a52e:	6819      	ldr	r1, [r3, #0]
   8a530:	f7ff fef6 	bl	8a320 <_malloc_trim_r>
   8a534:	e78f      	b.n	8a456 <_free_r+0x96>
   8a536:	2b14      	cmp	r3, #20
   8a538:	d90a      	bls.n	8a550 <_free_r+0x190>
   8a53a:	2b54      	cmp	r3, #84	; 0x54
   8a53c:	d821      	bhi.n	8a582 <_free_r+0x1c2>
   8a53e:	0b0b      	lsrs	r3, r1, #12
   8a540:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a544:	00ed      	lsls	r5, r5, #3
   8a546:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a54a:	e7af      	b.n	8a4ac <_free_r+0xec>
   8a54c:	4429      	add	r1, r5
   8a54e:	e78e      	b.n	8a46e <_free_r+0xae>
   8a550:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a554:	00ed      	lsls	r5, r5, #3
   8a556:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a55a:	e7a7      	b.n	8a4ac <_free_r+0xec>
   8a55c:	f041 0301 	orr.w	r3, r1, #1
   8a560:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a564:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a568:	6043      	str	r3, [r0, #4]
   8a56a:	5041      	str	r1, [r0, r1]
   8a56c:	e773      	b.n	8a456 <_free_r+0x96>
   8a56e:	2501      	movs	r5, #1
   8a570:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a574:	1092      	asrs	r2, r2, #2
   8a576:	fa05 f202 	lsl.w	r2, r5, r2
   8a57a:	430a      	orrs	r2, r1
   8a57c:	f8cc 2004 	str.w	r2, [ip, #4]
   8a580:	e7a4      	b.n	8a4cc <_free_r+0x10c>
   8a582:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a586:	d806      	bhi.n	8a596 <_free_r+0x1d6>
   8a588:	0bcb      	lsrs	r3, r1, #15
   8a58a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a58e:	00ed      	lsls	r5, r5, #3
   8a590:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a594:	e78a      	b.n	8a4ac <_free_r+0xec>
   8a596:	f240 5254 	movw	r2, #1364	; 0x554
   8a59a:	4293      	cmp	r3, r2
   8a59c:	d806      	bhi.n	8a5ac <_free_r+0x1ec>
   8a59e:	0c8b      	lsrs	r3, r1, #18
   8a5a0:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a5a4:	00ed      	lsls	r5, r5, #3
   8a5a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a5aa:	e77f      	b.n	8a4ac <_free_r+0xec>
   8a5ac:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a5b0:	227e      	movs	r2, #126	; 0x7e
   8a5b2:	e77b      	b.n	8a4ac <_free_r+0xec>
   8a5b4:	f041 0301 	orr.w	r3, r1, #1
   8a5b8:	6043      	str	r3, [r0, #4]
   8a5ba:	6011      	str	r1, [r2, #0]
   8a5bc:	e74b      	b.n	8a456 <_free_r+0x96>
   8a5be:	bf00      	nop
   8a5c0:	200010bc 	.word	0x200010bc
   8a5c4:	20001f54 	.word	0x20001f54
   8a5c8:	20000cb0 	.word	0x20000cb0

0008a5cc <__sfvwrite_r>:
   8a5cc:	6893      	ldr	r3, [r2, #8]
   8a5ce:	2b00      	cmp	r3, #0
   8a5d0:	f000 80bd 	beq.w	8a74e <__sfvwrite_r+0x182>
   8a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a5d8:	4690      	mov	r8, r2
   8a5da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a5de:	460c      	mov	r4, r1
   8a5e0:	0711      	lsls	r1, r2, #28
   8a5e2:	4681      	mov	r9, r0
   8a5e4:	b083      	sub	sp, #12
   8a5e6:	b293      	uxth	r3, r2
   8a5e8:	d527      	bpl.n	8a63a <__sfvwrite_r+0x6e>
   8a5ea:	6922      	ldr	r2, [r4, #16]
   8a5ec:	b32a      	cbz	r2, 8a63a <__sfvwrite_r+0x6e>
   8a5ee:	f013 0702 	ands.w	r7, r3, #2
   8a5f2:	f8d8 5000 	ldr.w	r5, [r8]
   8a5f6:	d02f      	beq.n	8a658 <__sfvwrite_r+0x8c>
   8a5f8:	f04f 0b00 	mov.w	fp, #0
   8a5fc:	465f      	mov	r7, fp
   8a5fe:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8a8b4 <__sfvwrite_r+0x2e8>
   8a602:	2f00      	cmp	r7, #0
   8a604:	f000 8089 	beq.w	8a71a <__sfvwrite_r+0x14e>
   8a608:	4557      	cmp	r7, sl
   8a60a:	463b      	mov	r3, r7
   8a60c:	465a      	mov	r2, fp
   8a60e:	bf28      	it	cs
   8a610:	4653      	movcs	r3, sl
   8a612:	4648      	mov	r0, r9
   8a614:	69e1      	ldr	r1, [r4, #28]
   8a616:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a618:	47b0      	blx	r6
   8a61a:	2800      	cmp	r0, #0
   8a61c:	f340 808d 	ble.w	8a73a <__sfvwrite_r+0x16e>
   8a620:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a624:	4483      	add	fp, r0
   8a626:	1a1b      	subs	r3, r3, r0
   8a628:	1a3f      	subs	r7, r7, r0
   8a62a:	f8c8 3008 	str.w	r3, [r8, #8]
   8a62e:	2b00      	cmp	r3, #0
   8a630:	d1e7      	bne.n	8a602 <__sfvwrite_r+0x36>
   8a632:	2000      	movs	r0, #0
   8a634:	b003      	add	sp, #12
   8a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a63a:	4621      	mov	r1, r4
   8a63c:	4648      	mov	r0, r9
   8a63e:	f7fe fc3b 	bl	88eb8 <__swsetup_r>
   8a642:	2800      	cmp	r0, #0
   8a644:	f040 8132 	bne.w	8a8ac <__sfvwrite_r+0x2e0>
   8a648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a64c:	f8d8 5000 	ldr.w	r5, [r8]
   8a650:	b293      	uxth	r3, r2
   8a652:	f013 0702 	ands.w	r7, r3, #2
   8a656:	d1cf      	bne.n	8a5f8 <__sfvwrite_r+0x2c>
   8a658:	f013 0a01 	ands.w	sl, r3, #1
   8a65c:	d179      	bne.n	8a752 <__sfvwrite_r+0x186>
   8a65e:	4656      	mov	r6, sl
   8a660:	2e00      	cmp	r6, #0
   8a662:	d056      	beq.n	8a712 <__sfvwrite_r+0x146>
   8a664:	059a      	lsls	r2, r3, #22
   8a666:	68a7      	ldr	r7, [r4, #8]
   8a668:	f140 80bd 	bpl.w	8a7e6 <__sfvwrite_r+0x21a>
   8a66c:	42b7      	cmp	r7, r6
   8a66e:	46bb      	mov	fp, r7
   8a670:	f200 80d2 	bhi.w	8a818 <__sfvwrite_r+0x24c>
   8a674:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a678:	f000 80d0 	beq.w	8a81c <__sfvwrite_r+0x250>
   8a67c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8a680:	6822      	ldr	r2, [r4, #0]
   8a682:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8a686:	eba2 0b01 	sub.w	fp, r2, r1
   8a68a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8a68e:	f10b 0001 	add.w	r0, fp, #1
   8a692:	107f      	asrs	r7, r7, #1
   8a694:	4430      	add	r0, r6
   8a696:	42b8      	cmp	r0, r7
   8a698:	463a      	mov	r2, r7
   8a69a:	bf84      	itt	hi
   8a69c:	4607      	movhi	r7, r0
   8a69e:	463a      	movhi	r2, r7
   8a6a0:	055b      	lsls	r3, r3, #21
   8a6a2:	f140 80e7 	bpl.w	8a874 <__sfvwrite_r+0x2a8>
   8a6a6:	4611      	mov	r1, r2
   8a6a8:	4648      	mov	r0, r9
   8a6aa:	f000 f9bb 	bl	8aa24 <_malloc_r>
   8a6ae:	2800      	cmp	r0, #0
   8a6b0:	f000 80f6 	beq.w	8a8a0 <__sfvwrite_r+0x2d4>
   8a6b4:	465a      	mov	r2, fp
   8a6b6:	6921      	ldr	r1, [r4, #16]
   8a6b8:	9000      	str	r0, [sp, #0]
   8a6ba:	f7fb fd1d 	bl	860f8 <memcpy>
   8a6be:	89a2      	ldrh	r2, [r4, #12]
   8a6c0:	9b00      	ldr	r3, [sp, #0]
   8a6c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8a6c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8a6ca:	81a2      	strh	r2, [r4, #12]
   8a6cc:	eba7 020b 	sub.w	r2, r7, fp
   8a6d0:	eb03 000b 	add.w	r0, r3, fp
   8a6d4:	6167      	str	r7, [r4, #20]
   8a6d6:	46b3      	mov	fp, r6
   8a6d8:	4637      	mov	r7, r6
   8a6da:	6123      	str	r3, [r4, #16]
   8a6dc:	6020      	str	r0, [r4, #0]
   8a6de:	60a2      	str	r2, [r4, #8]
   8a6e0:	465a      	mov	r2, fp
   8a6e2:	4651      	mov	r1, sl
   8a6e4:	f000 fca2 	bl	8b02c <memmove>
   8a6e8:	68a2      	ldr	r2, [r4, #8]
   8a6ea:	6823      	ldr	r3, [r4, #0]
   8a6ec:	1bd2      	subs	r2, r2, r7
   8a6ee:	4637      	mov	r7, r6
   8a6f0:	2600      	movs	r6, #0
   8a6f2:	445b      	add	r3, fp
   8a6f4:	60a2      	str	r2, [r4, #8]
   8a6f6:	6023      	str	r3, [r4, #0]
   8a6f8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8a6fc:	44ba      	add	sl, r7
   8a6fe:	1bd7      	subs	r7, r2, r7
   8a700:	f8c8 7008 	str.w	r7, [r8, #8]
   8a704:	2f00      	cmp	r7, #0
   8a706:	d094      	beq.n	8a632 <__sfvwrite_r+0x66>
   8a708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a70c:	b29b      	uxth	r3, r3
   8a70e:	2e00      	cmp	r6, #0
   8a710:	d1a8      	bne.n	8a664 <__sfvwrite_r+0x98>
   8a712:	e9d5 a600 	ldrd	sl, r6, [r5]
   8a716:	3508      	adds	r5, #8
   8a718:	e7a2      	b.n	8a660 <__sfvwrite_r+0x94>
   8a71a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8a71e:	3508      	adds	r5, #8
   8a720:	e76f      	b.n	8a602 <__sfvwrite_r+0x36>
   8a722:	4629      	mov	r1, r5
   8a724:	465a      	mov	r2, fp
   8a726:	f000 fc81 	bl	8b02c <memmove>
   8a72a:	6823      	ldr	r3, [r4, #0]
   8a72c:	4621      	mov	r1, r4
   8a72e:	445b      	add	r3, fp
   8a730:	4648      	mov	r0, r9
   8a732:	6023      	str	r3, [r4, #0]
   8a734:	f7ff fcc4 	bl	8a0c0 <_fflush_r>
   8a738:	b358      	cbz	r0, 8a792 <__sfvwrite_r+0x1c6>
   8a73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a73e:	f04f 30ff 	mov.w	r0, #4294967295
   8a742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a746:	81a3      	strh	r3, [r4, #12]
   8a748:	b003      	add	sp, #12
   8a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a74e:	2000      	movs	r0, #0
   8a750:	4770      	bx	lr
   8a752:	463e      	mov	r6, r7
   8a754:	46aa      	mov	sl, r5
   8a756:	4638      	mov	r0, r7
   8a758:	463d      	mov	r5, r7
   8a75a:	9700      	str	r7, [sp, #0]
   8a75c:	b36e      	cbz	r6, 8a7ba <__sfvwrite_r+0x1ee>
   8a75e:	2800      	cmp	r0, #0
   8a760:	d035      	beq.n	8a7ce <__sfvwrite_r+0x202>
   8a762:	9a00      	ldr	r2, [sp, #0]
   8a764:	6820      	ldr	r0, [r4, #0]
   8a766:	6921      	ldr	r1, [r4, #16]
   8a768:	42b2      	cmp	r2, r6
   8a76a:	bf28      	it	cs
   8a76c:	4632      	movcs	r2, r6
   8a76e:	4288      	cmp	r0, r1
   8a770:	6963      	ldr	r3, [r4, #20]
   8a772:	d904      	bls.n	8a77e <__sfvwrite_r+0x1b2>
   8a774:	68a1      	ldr	r1, [r4, #8]
   8a776:	eb03 0b01 	add.w	fp, r3, r1
   8a77a:	455a      	cmp	r2, fp
   8a77c:	dcd1      	bgt.n	8a722 <__sfvwrite_r+0x156>
   8a77e:	4293      	cmp	r3, r2
   8a780:	dc6b      	bgt.n	8a85a <__sfvwrite_r+0x28e>
   8a782:	462a      	mov	r2, r5
   8a784:	4648      	mov	r0, r9
   8a786:	69e1      	ldr	r1, [r4, #28]
   8a788:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a78a:	47b8      	blx	r7
   8a78c:	f1b0 0b00 	subs.w	fp, r0, #0
   8a790:	ddd3      	ble.n	8a73a <__sfvwrite_r+0x16e>
   8a792:	9b00      	ldr	r3, [sp, #0]
   8a794:	ebb3 030b 	subs.w	r3, r3, fp
   8a798:	9300      	str	r3, [sp, #0]
   8a79a:	d057      	beq.n	8a84c <__sfvwrite_r+0x280>
   8a79c:	2001      	movs	r0, #1
   8a79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a7a2:	445d      	add	r5, fp
   8a7a4:	eba3 030b 	sub.w	r3, r3, fp
   8a7a8:	eba6 060b 	sub.w	r6, r6, fp
   8a7ac:	f8c8 3008 	str.w	r3, [r8, #8]
   8a7b0:	2b00      	cmp	r3, #0
   8a7b2:	f43f af3e 	beq.w	8a632 <__sfvwrite_r+0x66>
   8a7b6:	2e00      	cmp	r6, #0
   8a7b8:	d1d1      	bne.n	8a75e <__sfvwrite_r+0x192>
   8a7ba:	f10a 0308 	add.w	r3, sl, #8
   8a7be:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8a7c2:	469a      	mov	sl, r3
   8a7c4:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8a7c8:	3308      	adds	r3, #8
   8a7ca:	2e00      	cmp	r6, #0
   8a7cc:	d0f7      	beq.n	8a7be <__sfvwrite_r+0x1f2>
   8a7ce:	4632      	mov	r2, r6
   8a7d0:	210a      	movs	r1, #10
   8a7d2:	4628      	mov	r0, r5
   8a7d4:	f000 fbea 	bl	8afac <memchr>
   8a7d8:	2800      	cmp	r0, #0
   8a7da:	d05e      	beq.n	8a89a <__sfvwrite_r+0x2ce>
   8a7dc:	3001      	adds	r0, #1
   8a7de:	1b43      	subs	r3, r0, r5
   8a7e0:	461a      	mov	r2, r3
   8a7e2:	9300      	str	r3, [sp, #0]
   8a7e4:	e7be      	b.n	8a764 <__sfvwrite_r+0x198>
   8a7e6:	6820      	ldr	r0, [r4, #0]
   8a7e8:	6923      	ldr	r3, [r4, #16]
   8a7ea:	4298      	cmp	r0, r3
   8a7ec:	d818      	bhi.n	8a820 <__sfvwrite_r+0x254>
   8a7ee:	6962      	ldr	r2, [r4, #20]
   8a7f0:	42b2      	cmp	r2, r6
   8a7f2:	d815      	bhi.n	8a820 <__sfvwrite_r+0x254>
   8a7f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8a7f8:	42b3      	cmp	r3, r6
   8a7fa:	bf28      	it	cs
   8a7fc:	4633      	movcs	r3, r6
   8a7fe:	fb93 f3f2 	sdiv	r3, r3, r2
   8a802:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8a804:	fb02 f303 	mul.w	r3, r2, r3
   8a808:	4648      	mov	r0, r9
   8a80a:	4652      	mov	r2, sl
   8a80c:	69e1      	ldr	r1, [r4, #28]
   8a80e:	47b8      	blx	r7
   8a810:	1e07      	subs	r7, r0, #0
   8a812:	dd92      	ble.n	8a73a <__sfvwrite_r+0x16e>
   8a814:	1bf6      	subs	r6, r6, r7
   8a816:	e76f      	b.n	8a6f8 <__sfvwrite_r+0x12c>
   8a818:	4637      	mov	r7, r6
   8a81a:	46b3      	mov	fp, r6
   8a81c:	6820      	ldr	r0, [r4, #0]
   8a81e:	e75f      	b.n	8a6e0 <__sfvwrite_r+0x114>
   8a820:	42b7      	cmp	r7, r6
   8a822:	bf28      	it	cs
   8a824:	4637      	movcs	r7, r6
   8a826:	4651      	mov	r1, sl
   8a828:	463a      	mov	r2, r7
   8a82a:	f000 fbff 	bl	8b02c <memmove>
   8a82e:	68a3      	ldr	r3, [r4, #8]
   8a830:	6822      	ldr	r2, [r4, #0]
   8a832:	1bdb      	subs	r3, r3, r7
   8a834:	443a      	add	r2, r7
   8a836:	60a3      	str	r3, [r4, #8]
   8a838:	6022      	str	r2, [r4, #0]
   8a83a:	2b00      	cmp	r3, #0
   8a83c:	d1ea      	bne.n	8a814 <__sfvwrite_r+0x248>
   8a83e:	4621      	mov	r1, r4
   8a840:	4648      	mov	r0, r9
   8a842:	f7ff fc3d 	bl	8a0c0 <_fflush_r>
   8a846:	2800      	cmp	r0, #0
   8a848:	d0e4      	beq.n	8a814 <__sfvwrite_r+0x248>
   8a84a:	e776      	b.n	8a73a <__sfvwrite_r+0x16e>
   8a84c:	4621      	mov	r1, r4
   8a84e:	4648      	mov	r0, r9
   8a850:	f7ff fc36 	bl	8a0c0 <_fflush_r>
   8a854:	2800      	cmp	r0, #0
   8a856:	d0a2      	beq.n	8a79e <__sfvwrite_r+0x1d2>
   8a858:	e76f      	b.n	8a73a <__sfvwrite_r+0x16e>
   8a85a:	4629      	mov	r1, r5
   8a85c:	4693      	mov	fp, r2
   8a85e:	9201      	str	r2, [sp, #4]
   8a860:	f000 fbe4 	bl	8b02c <memmove>
   8a864:	68a1      	ldr	r1, [r4, #8]
   8a866:	6823      	ldr	r3, [r4, #0]
   8a868:	9a01      	ldr	r2, [sp, #4]
   8a86a:	1a89      	subs	r1, r1, r2
   8a86c:	441a      	add	r2, r3
   8a86e:	60a1      	str	r1, [r4, #8]
   8a870:	6022      	str	r2, [r4, #0]
   8a872:	e78e      	b.n	8a792 <__sfvwrite_r+0x1c6>
   8a874:	4648      	mov	r0, r9
   8a876:	f000 ffcb 	bl	8b810 <_realloc_r>
   8a87a:	4603      	mov	r3, r0
   8a87c:	2800      	cmp	r0, #0
   8a87e:	f47f af25 	bne.w	8a6cc <__sfvwrite_r+0x100>
   8a882:	4648      	mov	r0, r9
   8a884:	6921      	ldr	r1, [r4, #16]
   8a886:	f7ff fd9b 	bl	8a3c0 <_free_r>
   8a88a:	220c      	movs	r2, #12
   8a88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a890:	f8c9 2000 	str.w	r2, [r9]
   8a894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8a898:	e751      	b.n	8a73e <__sfvwrite_r+0x172>
   8a89a:	1c72      	adds	r2, r6, #1
   8a89c:	9200      	str	r2, [sp, #0]
   8a89e:	e761      	b.n	8a764 <__sfvwrite_r+0x198>
   8a8a0:	220c      	movs	r2, #12
   8a8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a8a6:	f8c9 2000 	str.w	r2, [r9]
   8a8aa:	e748      	b.n	8a73e <__sfvwrite_r+0x172>
   8a8ac:	f04f 30ff 	mov.w	r0, #4294967295
   8a8b0:	e6c0      	b.n	8a634 <__sfvwrite_r+0x68>
   8a8b2:	bf00      	nop
   8a8b4:	7ffffc00 	.word	0x7ffffc00

0008a8b8 <_fwalk_reent>:
   8a8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8a8bc:	4607      	mov	r7, r0
   8a8be:	4688      	mov	r8, r1
   8a8c0:	f04f 0900 	mov.w	r9, #0
   8a8c4:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8a8c8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8a8cc:	3d01      	subs	r5, #1
   8a8ce:	d410      	bmi.n	8a8f2 <_fwalk_reent+0x3a>
   8a8d0:	89a3      	ldrh	r3, [r4, #12]
   8a8d2:	3d01      	subs	r5, #1
   8a8d4:	2b01      	cmp	r3, #1
   8a8d6:	d908      	bls.n	8a8ea <_fwalk_reent+0x32>
   8a8d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8a8dc:	3301      	adds	r3, #1
   8a8de:	d004      	beq.n	8a8ea <_fwalk_reent+0x32>
   8a8e0:	4621      	mov	r1, r4
   8a8e2:	4638      	mov	r0, r7
   8a8e4:	47c0      	blx	r8
   8a8e6:	ea49 0900 	orr.w	r9, r9, r0
   8a8ea:	1c6b      	adds	r3, r5, #1
   8a8ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8a8f0:	d1ee      	bne.n	8a8d0 <_fwalk_reent+0x18>
   8a8f2:	6836      	ldr	r6, [r6, #0]
   8a8f4:	2e00      	cmp	r6, #0
   8a8f6:	d1e7      	bne.n	8a8c8 <_fwalk_reent+0x10>
   8a8f8:	4648      	mov	r0, r9
   8a8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8a8fe:	bf00      	nop

0008a900 <__locale_mb_cur_max>:
   8a900:	4b01      	ldr	r3, [pc, #4]	; (8a908 <__locale_mb_cur_max+0x8>)
   8a902:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8a906:	4770      	bx	lr
   8a908:	20000b44 	.word	0x20000b44

0008a90c <_localeconv_r>:
   8a90c:	4800      	ldr	r0, [pc, #0]	; (8a910 <_localeconv_r+0x4>)
   8a90e:	4770      	bx	lr
   8a910:	20000c34 	.word	0x20000c34

0008a914 <__retarget_lock_init_recursive>:
   8a914:	4770      	bx	lr
   8a916:	bf00      	nop

0008a918 <__retarget_lock_close_recursive>:
   8a918:	4770      	bx	lr
   8a91a:	bf00      	nop

0008a91c <__retarget_lock_acquire_recursive>:
   8a91c:	4770      	bx	lr
   8a91e:	bf00      	nop

0008a920 <__retarget_lock_release_recursive>:
   8a920:	4770      	bx	lr
   8a922:	bf00      	nop

0008a924 <__swhatbuf_r>:
   8a924:	b570      	push	{r4, r5, r6, lr}
   8a926:	460c      	mov	r4, r1
   8a928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8a92c:	4615      	mov	r5, r2
   8a92e:	2900      	cmp	r1, #0
   8a930:	461e      	mov	r6, r3
   8a932:	b096      	sub	sp, #88	; 0x58
   8a934:	db14      	blt.n	8a960 <__swhatbuf_r+0x3c>
   8a936:	466a      	mov	r2, sp
   8a938:	f001 fc20 	bl	8c17c <_fstat_r>
   8a93c:	2800      	cmp	r0, #0
   8a93e:	db0f      	blt.n	8a960 <__swhatbuf_r+0x3c>
   8a940:	9a01      	ldr	r2, [sp, #4]
   8a942:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8a94a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8a94e:	fab2 f282 	clz	r2, r2
   8a952:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8a956:	0952      	lsrs	r2, r2, #5
   8a958:	6032      	str	r2, [r6, #0]
   8a95a:	602b      	str	r3, [r5, #0]
   8a95c:	b016      	add	sp, #88	; 0x58
   8a95e:	bd70      	pop	{r4, r5, r6, pc}
   8a960:	2300      	movs	r3, #0
   8a962:	89a1      	ldrh	r1, [r4, #12]
   8a964:	6033      	str	r3, [r6, #0]
   8a966:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8a96a:	d004      	beq.n	8a976 <__swhatbuf_r+0x52>
   8a96c:	2240      	movs	r2, #64	; 0x40
   8a96e:	4618      	mov	r0, r3
   8a970:	602a      	str	r2, [r5, #0]
   8a972:	b016      	add	sp, #88	; 0x58
   8a974:	bd70      	pop	{r4, r5, r6, pc}
   8a976:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8a97a:	602b      	str	r3, [r5, #0]
   8a97c:	b016      	add	sp, #88	; 0x58
   8a97e:	bd70      	pop	{r4, r5, r6, pc}

0008a980 <__smakebuf_r>:
   8a980:	b570      	push	{r4, r5, r6, lr}
   8a982:	898b      	ldrh	r3, [r1, #12]
   8a984:	460c      	mov	r4, r1
   8a986:	079d      	lsls	r5, r3, #30
   8a988:	b082      	sub	sp, #8
   8a98a:	d507      	bpl.n	8a99c <__smakebuf_r+0x1c>
   8a98c:	2201      	movs	r2, #1
   8a98e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8a992:	614a      	str	r2, [r1, #20]
   8a994:	600b      	str	r3, [r1, #0]
   8a996:	610b      	str	r3, [r1, #16]
   8a998:	b002      	add	sp, #8
   8a99a:	bd70      	pop	{r4, r5, r6, pc}
   8a99c:	ab01      	add	r3, sp, #4
   8a99e:	466a      	mov	r2, sp
   8a9a0:	4606      	mov	r6, r0
   8a9a2:	f7ff ffbf 	bl	8a924 <__swhatbuf_r>
   8a9a6:	9900      	ldr	r1, [sp, #0]
   8a9a8:	4605      	mov	r5, r0
   8a9aa:	4630      	mov	r0, r6
   8a9ac:	f000 f83a 	bl	8aa24 <_malloc_r>
   8a9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a9b4:	b170      	cbz	r0, 8a9d4 <__smakebuf_r+0x54>
   8a9b6:	4916      	ldr	r1, [pc, #88]	; (8aa10 <__smakebuf_r+0x90>)
   8a9b8:	9a00      	ldr	r2, [sp, #0]
   8a9ba:	63f1      	str	r1, [r6, #60]	; 0x3c
   8a9bc:	9901      	ldr	r1, [sp, #4]
   8a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8a9c2:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8a9c6:	81a3      	strh	r3, [r4, #12]
   8a9c8:	6020      	str	r0, [r4, #0]
   8a9ca:	b989      	cbnz	r1, 8a9f0 <__smakebuf_r+0x70>
   8a9cc:	432b      	orrs	r3, r5
   8a9ce:	81a3      	strh	r3, [r4, #12]
   8a9d0:	b002      	add	sp, #8
   8a9d2:	bd70      	pop	{r4, r5, r6, pc}
   8a9d4:	059a      	lsls	r2, r3, #22
   8a9d6:	d4df      	bmi.n	8a998 <__smakebuf_r+0x18>
   8a9d8:	2101      	movs	r1, #1
   8a9da:	f023 0303 	bic.w	r3, r3, #3
   8a9de:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8a9e2:	f043 0302 	orr.w	r3, r3, #2
   8a9e6:	81a3      	strh	r3, [r4, #12]
   8a9e8:	6161      	str	r1, [r4, #20]
   8a9ea:	6022      	str	r2, [r4, #0]
   8a9ec:	6122      	str	r2, [r4, #16]
   8a9ee:	e7d3      	b.n	8a998 <__smakebuf_r+0x18>
   8a9f0:	4630      	mov	r0, r6
   8a9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8a9f6:	f001 fbd7 	bl	8c1a8 <_isatty_r>
   8a9fa:	b910      	cbnz	r0, 8aa02 <__smakebuf_r+0x82>
   8a9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aa00:	e7e4      	b.n	8a9cc <__smakebuf_r+0x4c>
   8aa02:	89a2      	ldrh	r2, [r4, #12]
   8aa04:	f022 0203 	bic.w	r2, r2, #3
   8aa08:	f042 0201 	orr.w	r2, r2, #1
   8aa0c:	b213      	sxth	r3, r2
   8aa0e:	e7dd      	b.n	8a9cc <__smakebuf_r+0x4c>
   8aa10:	0008a16d 	.word	0x0008a16d

0008aa14 <malloc>:
   8aa14:	4b02      	ldr	r3, [pc, #8]	; (8aa20 <malloc+0xc>)
   8aa16:	4601      	mov	r1, r0
   8aa18:	6818      	ldr	r0, [r3, #0]
   8aa1a:	f000 b803 	b.w	8aa24 <_malloc_r>
   8aa1e:	bf00      	nop
   8aa20:	20000710 	.word	0x20000710

0008aa24 <_malloc_r>:
   8aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa28:	f101 050b 	add.w	r5, r1, #11
   8aa2c:	2d16      	cmp	r5, #22
   8aa2e:	4606      	mov	r6, r0
   8aa30:	b083      	sub	sp, #12
   8aa32:	d824      	bhi.n	8aa7e <_malloc_r+0x5a>
   8aa34:	2910      	cmp	r1, #16
   8aa36:	f200 80b6 	bhi.w	8aba6 <_malloc_r+0x182>
   8aa3a:	f000 fb61 	bl	8b100 <__malloc_lock>
   8aa3e:	2510      	movs	r5, #16
   8aa40:	2002      	movs	r0, #2
   8aa42:	2318      	movs	r3, #24
   8aa44:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8af30 <_malloc_r+0x50c>
   8aa48:	4443      	add	r3, r8
   8aa4a:	685c      	ldr	r4, [r3, #4]
   8aa4c:	f1a3 0208 	sub.w	r2, r3, #8
   8aa50:	4294      	cmp	r4, r2
   8aa52:	f000 80b4 	beq.w	8abbe <_malloc_r+0x19a>
   8aa56:	6863      	ldr	r3, [r4, #4]
   8aa58:	68e1      	ldr	r1, [r4, #12]
   8aa5a:	f023 0303 	bic.w	r3, r3, #3
   8aa5e:	4423      	add	r3, r4
   8aa60:	685a      	ldr	r2, [r3, #4]
   8aa62:	68a5      	ldr	r5, [r4, #8]
   8aa64:	f042 0201 	orr.w	r2, r2, #1
   8aa68:	60e9      	str	r1, [r5, #12]
   8aa6a:	4630      	mov	r0, r6
   8aa6c:	608d      	str	r5, [r1, #8]
   8aa6e:	3408      	adds	r4, #8
   8aa70:	605a      	str	r2, [r3, #4]
   8aa72:	f000 fb4b 	bl	8b10c <__malloc_unlock>
   8aa76:	4620      	mov	r0, r4
   8aa78:	b003      	add	sp, #12
   8aa7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aa7e:	f035 0507 	bics.w	r5, r5, #7
   8aa82:	f100 8090 	bmi.w	8aba6 <_malloc_r+0x182>
   8aa86:	42a9      	cmp	r1, r5
   8aa88:	f200 808d 	bhi.w	8aba6 <_malloc_r+0x182>
   8aa8c:	f000 fb38 	bl	8b100 <__malloc_lock>
   8aa90:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8aa94:	f0c0 8185 	bcc.w	8ada2 <_malloc_r+0x37e>
   8aa98:	0a6b      	lsrs	r3, r5, #9
   8aa9a:	f000 808b 	beq.w	8abb4 <_malloc_r+0x190>
   8aa9e:	2b04      	cmp	r3, #4
   8aaa0:	f200 815b 	bhi.w	8ad5a <_malloc_r+0x336>
   8aaa4:	09ab      	lsrs	r3, r5, #6
   8aaa6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8aaaa:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8aaae:	00c1      	lsls	r1, r0, #3
   8aab0:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8af30 <_malloc_r+0x50c>
   8aab4:	4441      	add	r1, r8
   8aab6:	684c      	ldr	r4, [r1, #4]
   8aab8:	3908      	subs	r1, #8
   8aaba:	42a1      	cmp	r1, r4
   8aabc:	d106      	bne.n	8aacc <_malloc_r+0xa8>
   8aabe:	e00c      	b.n	8aada <_malloc_r+0xb6>
   8aac0:	2a00      	cmp	r2, #0
   8aac2:	f280 8122 	bge.w	8ad0a <_malloc_r+0x2e6>
   8aac6:	68e4      	ldr	r4, [r4, #12]
   8aac8:	42a1      	cmp	r1, r4
   8aaca:	d006      	beq.n	8aada <_malloc_r+0xb6>
   8aacc:	6863      	ldr	r3, [r4, #4]
   8aace:	f023 0303 	bic.w	r3, r3, #3
   8aad2:	1b5a      	subs	r2, r3, r5
   8aad4:	2a0f      	cmp	r2, #15
   8aad6:	ddf3      	ble.n	8aac0 <_malloc_r+0x9c>
   8aad8:	4638      	mov	r0, r7
   8aada:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8aade:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8af34 <_malloc_r+0x510>
   8aae2:	4564      	cmp	r4, ip
   8aae4:	d077      	beq.n	8abd6 <_malloc_r+0x1b2>
   8aae6:	6862      	ldr	r2, [r4, #4]
   8aae8:	f022 0203 	bic.w	r2, r2, #3
   8aaec:	1b53      	subs	r3, r2, r5
   8aaee:	2b0f      	cmp	r3, #15
   8aaf0:	f300 8165 	bgt.w	8adbe <_malloc_r+0x39a>
   8aaf4:	2b00      	cmp	r3, #0
   8aaf6:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8aafa:	f280 8156 	bge.w	8adaa <_malloc_r+0x386>
   8aafe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8ab02:	f080 8106 	bcs.w	8ad12 <_malloc_r+0x2ee>
   8ab06:	2101      	movs	r1, #1
   8ab08:	08d3      	lsrs	r3, r2, #3
   8ab0a:	0952      	lsrs	r2, r2, #5
   8ab0c:	440b      	add	r3, r1
   8ab0e:	fa01 f202 	lsl.w	r2, r1, r2
   8ab12:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8ab16:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8ab1a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8ab1e:	430a      	orrs	r2, r1
   8ab20:	f1ae 0108 	sub.w	r1, lr, #8
   8ab24:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8ab28:	f8c8 2004 	str.w	r2, [r8, #4]
   8ab2c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8ab30:	60fc      	str	r4, [r7, #12]
   8ab32:	2101      	movs	r1, #1
   8ab34:	1083      	asrs	r3, r0, #2
   8ab36:	4099      	lsls	r1, r3
   8ab38:	4291      	cmp	r1, r2
   8ab3a:	d853      	bhi.n	8abe4 <_malloc_r+0x1c0>
   8ab3c:	4211      	tst	r1, r2
   8ab3e:	d106      	bne.n	8ab4e <_malloc_r+0x12a>
   8ab40:	f020 0003 	bic.w	r0, r0, #3
   8ab44:	0049      	lsls	r1, r1, #1
   8ab46:	4211      	tst	r1, r2
   8ab48:	f100 0004 	add.w	r0, r0, #4
   8ab4c:	d0fa      	beq.n	8ab44 <_malloc_r+0x120>
   8ab4e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8ab52:	464c      	mov	r4, r9
   8ab54:	4686      	mov	lr, r0
   8ab56:	68e7      	ldr	r7, [r4, #12]
   8ab58:	42bc      	cmp	r4, r7
   8ab5a:	d107      	bne.n	8ab6c <_malloc_r+0x148>
   8ab5c:	e109      	b.n	8ad72 <_malloc_r+0x34e>
   8ab5e:	2b00      	cmp	r3, #0
   8ab60:	f280 8110 	bge.w	8ad84 <_malloc_r+0x360>
   8ab64:	68ff      	ldr	r7, [r7, #12]
   8ab66:	42bc      	cmp	r4, r7
   8ab68:	f000 8103 	beq.w	8ad72 <_malloc_r+0x34e>
   8ab6c:	687a      	ldr	r2, [r7, #4]
   8ab6e:	f022 0203 	bic.w	r2, r2, #3
   8ab72:	1b53      	subs	r3, r2, r5
   8ab74:	2b0f      	cmp	r3, #15
   8ab76:	ddf2      	ble.n	8ab5e <_malloc_r+0x13a>
   8ab78:	f045 0e01 	orr.w	lr, r5, #1
   8ab7c:	4630      	mov	r0, r6
   8ab7e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8ab82:	443d      	add	r5, r7
   8ab84:	f043 0601 	orr.w	r6, r3, #1
   8ab88:	f8c7 e004 	str.w	lr, [r7, #4]
   8ab8c:	60e1      	str	r1, [r4, #12]
   8ab8e:	608c      	str	r4, [r1, #8]
   8ab90:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8ab94:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8ab98:	606e      	str	r6, [r5, #4]
   8ab9a:	50bb      	str	r3, [r7, r2]
   8ab9c:	f000 fab6 	bl	8b10c <__malloc_unlock>
   8aba0:	f107 0408 	add.w	r4, r7, #8
   8aba4:	e002      	b.n	8abac <_malloc_r+0x188>
   8aba6:	230c      	movs	r3, #12
   8aba8:	2400      	movs	r4, #0
   8abaa:	6033      	str	r3, [r6, #0]
   8abac:	4620      	mov	r0, r4
   8abae:	b003      	add	sp, #12
   8abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8abb4:	f44f 7100 	mov.w	r1, #512	; 0x200
   8abb8:	2040      	movs	r0, #64	; 0x40
   8abba:	273f      	movs	r7, #63	; 0x3f
   8abbc:	e778      	b.n	8aab0 <_malloc_r+0x8c>
   8abbe:	68dc      	ldr	r4, [r3, #12]
   8abc0:	42a3      	cmp	r3, r4
   8abc2:	bf08      	it	eq
   8abc4:	3002      	addeq	r0, #2
   8abc6:	f47f af46 	bne.w	8aa56 <_malloc_r+0x32>
   8abca:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8abce:	f8df c364 	ldr.w	ip, [pc, #868]	; 8af34 <_malloc_r+0x510>
   8abd2:	4564      	cmp	r4, ip
   8abd4:	d187      	bne.n	8aae6 <_malloc_r+0xc2>
   8abd6:	2101      	movs	r1, #1
   8abd8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8abdc:	1083      	asrs	r3, r0, #2
   8abde:	4099      	lsls	r1, r3
   8abe0:	4291      	cmp	r1, r2
   8abe2:	d9ab      	bls.n	8ab3c <_malloc_r+0x118>
   8abe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8abe8:	6867      	ldr	r7, [r4, #4]
   8abea:	f027 0703 	bic.w	r7, r7, #3
   8abee:	42bd      	cmp	r5, r7
   8abf0:	d802      	bhi.n	8abf8 <_malloc_r+0x1d4>
   8abf2:	1b7b      	subs	r3, r7, r5
   8abf4:	2b0f      	cmp	r3, #15
   8abf6:	dc77      	bgt.n	8ace8 <_malloc_r+0x2c4>
   8abf8:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8af38 <_malloc_r+0x514>
   8abfc:	4bc8      	ldr	r3, [pc, #800]	; (8af20 <_malloc_r+0x4fc>)
   8abfe:	f8d9 2000 	ldr.w	r2, [r9]
   8ac02:	681b      	ldr	r3, [r3, #0]
   8ac04:	3201      	adds	r2, #1
   8ac06:	442b      	add	r3, r5
   8ac08:	eb04 0a07 	add.w	sl, r4, r7
   8ac0c:	f000 8124 	beq.w	8ae58 <_malloc_r+0x434>
   8ac10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8ac14:	330f      	adds	r3, #15
   8ac16:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8ac1a:	f02b 0b0f 	bic.w	fp, fp, #15
   8ac1e:	4659      	mov	r1, fp
   8ac20:	4630      	mov	r0, r6
   8ac22:	f001 f81d 	bl	8bc60 <_sbrk_r>
   8ac26:	1c41      	adds	r1, r0, #1
   8ac28:	4602      	mov	r2, r0
   8ac2a:	f000 80e1 	beq.w	8adf0 <_malloc_r+0x3cc>
   8ac2e:	4582      	cmp	sl, r0
   8ac30:	f200 80dc 	bhi.w	8adec <_malloc_r+0x3c8>
   8ac34:	4bbb      	ldr	r3, [pc, #748]	; (8af24 <_malloc_r+0x500>)
   8ac36:	6819      	ldr	r1, [r3, #0]
   8ac38:	4459      	add	r1, fp
   8ac3a:	4608      	mov	r0, r1
   8ac3c:	6019      	str	r1, [r3, #0]
   8ac3e:	f000 8141 	beq.w	8aec4 <_malloc_r+0x4a0>
   8ac42:	f8d9 1000 	ldr.w	r1, [r9]
   8ac46:	9301      	str	r3, [sp, #4]
   8ac48:	3101      	adds	r1, #1
   8ac4a:	bf1b      	ittet	ne
   8ac4c:	eba2 0a0a 	subne.w	sl, r2, sl
   8ac50:	4450      	addne	r0, sl
   8ac52:	f8c9 2000 	streq.w	r2, [r9]
   8ac56:	6018      	strne	r0, [r3, #0]
   8ac58:	f012 0a07 	ands.w	sl, r2, #7
   8ac5c:	f000 810a 	beq.w	8ae74 <_malloc_r+0x450>
   8ac60:	f1ca 0108 	rsb	r1, sl, #8
   8ac64:	440a      	add	r2, r1
   8ac66:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8ac6a:	4493      	add	fp, r2
   8ac6c:	3108      	adds	r1, #8
   8ac6e:	eba1 010b 	sub.w	r1, r1, fp
   8ac72:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8ac76:	4649      	mov	r1, r9
   8ac78:	4630      	mov	r0, r6
   8ac7a:	9200      	str	r2, [sp, #0]
   8ac7c:	f000 fff0 	bl	8bc60 <_sbrk_r>
   8ac80:	1c42      	adds	r2, r0, #1
   8ac82:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ac86:	f000 8143 	beq.w	8af10 <_malloc_r+0x4ec>
   8ac8a:	1a80      	subs	r0, r0, r2
   8ac8c:	eb00 0b09 	add.w	fp, r0, r9
   8ac90:	6819      	ldr	r1, [r3, #0]
   8ac92:	f04b 0001 	orr.w	r0, fp, #1
   8ac96:	4449      	add	r1, r9
   8ac98:	4544      	cmp	r4, r8
   8ac9a:	f8c8 2008 	str.w	r2, [r8, #8]
   8ac9e:	6019      	str	r1, [r3, #0]
   8aca0:	6050      	str	r0, [r2, #4]
   8aca2:	f000 811c 	beq.w	8aede <_malloc_r+0x4ba>
   8aca6:	2f0f      	cmp	r7, #15
   8aca8:	f240 811b 	bls.w	8aee2 <_malloc_r+0x4be>
   8acac:	f04f 0c05 	mov.w	ip, #5
   8acb0:	6860      	ldr	r0, [r4, #4]
   8acb2:	3f0c      	subs	r7, #12
   8acb4:	f027 0707 	bic.w	r7, r7, #7
   8acb8:	f000 0001 	and.w	r0, r0, #1
   8acbc:	4338      	orrs	r0, r7
   8acbe:	eb04 0e07 	add.w	lr, r4, r7
   8acc2:	2f0f      	cmp	r7, #15
   8acc4:	6060      	str	r0, [r4, #4]
   8acc6:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8acca:	f200 8137 	bhi.w	8af3c <_malloc_r+0x518>
   8acce:	4614      	mov	r4, r2
   8acd0:	6850      	ldr	r0, [r2, #4]
   8acd2:	4b95      	ldr	r3, [pc, #596]	; (8af28 <_malloc_r+0x504>)
   8acd4:	681a      	ldr	r2, [r3, #0]
   8acd6:	428a      	cmp	r2, r1
   8acd8:	bf38      	it	cc
   8acda:	6019      	strcc	r1, [r3, #0]
   8acdc:	4b93      	ldr	r3, [pc, #588]	; (8af2c <_malloc_r+0x508>)
   8acde:	681a      	ldr	r2, [r3, #0]
   8ace0:	428a      	cmp	r2, r1
   8ace2:	bf38      	it	cc
   8ace4:	6019      	strcc	r1, [r3, #0]
   8ace6:	e086      	b.n	8adf6 <_malloc_r+0x3d2>
   8ace8:	f045 0201 	orr.w	r2, r5, #1
   8acec:	f043 0301 	orr.w	r3, r3, #1
   8acf0:	4425      	add	r5, r4
   8acf2:	6062      	str	r2, [r4, #4]
   8acf4:	4630      	mov	r0, r6
   8acf6:	f8c8 5008 	str.w	r5, [r8, #8]
   8acfa:	3408      	adds	r4, #8
   8acfc:	606b      	str	r3, [r5, #4]
   8acfe:	f000 fa05 	bl	8b10c <__malloc_unlock>
   8ad02:	4620      	mov	r0, r4
   8ad04:	b003      	add	sp, #12
   8ad06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ad0a:	4423      	add	r3, r4
   8ad0c:	685a      	ldr	r2, [r3, #4]
   8ad0e:	68e1      	ldr	r1, [r4, #12]
   8ad10:	e6a7      	b.n	8aa62 <_malloc_r+0x3e>
   8ad12:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ad16:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ad1a:	d361      	bcc.n	8ade0 <_malloc_r+0x3bc>
   8ad1c:	2b14      	cmp	r3, #20
   8ad1e:	f200 80ba 	bhi.w	8ae96 <_malloc_r+0x472>
   8ad22:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ad26:	00c9      	lsls	r1, r1, #3
   8ad28:	335b      	adds	r3, #91	; 0x5b
   8ad2a:	eb08 0701 	add.w	r7, r8, r1
   8ad2e:	f858 1001 	ldr.w	r1, [r8, r1]
   8ad32:	3f08      	subs	r7, #8
   8ad34:	428f      	cmp	r7, r1
   8ad36:	f000 8092 	beq.w	8ae5e <_malloc_r+0x43a>
   8ad3a:	684b      	ldr	r3, [r1, #4]
   8ad3c:	f023 0303 	bic.w	r3, r3, #3
   8ad40:	4293      	cmp	r3, r2
   8ad42:	d902      	bls.n	8ad4a <_malloc_r+0x326>
   8ad44:	6889      	ldr	r1, [r1, #8]
   8ad46:	428f      	cmp	r7, r1
   8ad48:	d1f7      	bne.n	8ad3a <_malloc_r+0x316>
   8ad4a:	68cf      	ldr	r7, [r1, #12]
   8ad4c:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ad50:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ad54:	60bc      	str	r4, [r7, #8]
   8ad56:	60cc      	str	r4, [r1, #12]
   8ad58:	e6eb      	b.n	8ab32 <_malloc_r+0x10e>
   8ad5a:	2b14      	cmp	r3, #20
   8ad5c:	d959      	bls.n	8ae12 <_malloc_r+0x3ee>
   8ad5e:	2b54      	cmp	r3, #84	; 0x54
   8ad60:	f200 80a1 	bhi.w	8aea6 <_malloc_r+0x482>
   8ad64:	0b2b      	lsrs	r3, r5, #12
   8ad66:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ad6a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ad6e:	00c1      	lsls	r1, r0, #3
   8ad70:	e69e      	b.n	8aab0 <_malloc_r+0x8c>
   8ad72:	f10e 0e01 	add.w	lr, lr, #1
   8ad76:	f01e 0f03 	tst.w	lr, #3
   8ad7a:	f104 0408 	add.w	r4, r4, #8
   8ad7e:	f47f aeea 	bne.w	8ab56 <_malloc_r+0x132>
   8ad82:	e051      	b.n	8ae28 <_malloc_r+0x404>
   8ad84:	463c      	mov	r4, r7
   8ad86:	443a      	add	r2, r7
   8ad88:	6853      	ldr	r3, [r2, #4]
   8ad8a:	68f9      	ldr	r1, [r7, #12]
   8ad8c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ad90:	f043 0301 	orr.w	r3, r3, #1
   8ad94:	6053      	str	r3, [r2, #4]
   8ad96:	4630      	mov	r0, r6
   8ad98:	60e9      	str	r1, [r5, #12]
   8ad9a:	608d      	str	r5, [r1, #8]
   8ad9c:	f000 f9b6 	bl	8b10c <__malloc_unlock>
   8ada0:	e704      	b.n	8abac <_malloc_r+0x188>
   8ada2:	08e8      	lsrs	r0, r5, #3
   8ada4:	f105 0308 	add.w	r3, r5, #8
   8ada8:	e64c      	b.n	8aa44 <_malloc_r+0x20>
   8adaa:	4422      	add	r2, r4
   8adac:	6853      	ldr	r3, [r2, #4]
   8adae:	4630      	mov	r0, r6
   8adb0:	f043 0301 	orr.w	r3, r3, #1
   8adb4:	6053      	str	r3, [r2, #4]
   8adb6:	3408      	adds	r4, #8
   8adb8:	f000 f9a8 	bl	8b10c <__malloc_unlock>
   8adbc:	e6f6      	b.n	8abac <_malloc_r+0x188>
   8adbe:	f045 0701 	orr.w	r7, r5, #1
   8adc2:	f043 0101 	orr.w	r1, r3, #1
   8adc6:	4425      	add	r5, r4
   8adc8:	6067      	str	r7, [r4, #4]
   8adca:	4630      	mov	r0, r6
   8adcc:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8add0:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8add4:	6069      	str	r1, [r5, #4]
   8add6:	50a3      	str	r3, [r4, r2]
   8add8:	f000 f998 	bl	8b10c <__malloc_unlock>
   8addc:	3408      	adds	r4, #8
   8adde:	e6e5      	b.n	8abac <_malloc_r+0x188>
   8ade0:	0993      	lsrs	r3, r2, #6
   8ade2:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8ade6:	00c9      	lsls	r1, r1, #3
   8ade8:	3338      	adds	r3, #56	; 0x38
   8adea:	e79e      	b.n	8ad2a <_malloc_r+0x306>
   8adec:	4544      	cmp	r4, r8
   8adee:	d064      	beq.n	8aeba <_malloc_r+0x496>
   8adf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8adf4:	6860      	ldr	r0, [r4, #4]
   8adf6:	f020 0b03 	bic.w	fp, r0, #3
   8adfa:	455d      	cmp	r5, fp
   8adfc:	ebab 0305 	sub.w	r3, fp, r5
   8ae00:	d802      	bhi.n	8ae08 <_malloc_r+0x3e4>
   8ae02:	2b0f      	cmp	r3, #15
   8ae04:	f73f af70 	bgt.w	8ace8 <_malloc_r+0x2c4>
   8ae08:	4630      	mov	r0, r6
   8ae0a:	f000 f97f 	bl	8b10c <__malloc_unlock>
   8ae0e:	2400      	movs	r4, #0
   8ae10:	e6cc      	b.n	8abac <_malloc_r+0x188>
   8ae12:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8ae16:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8ae1a:	00c1      	lsls	r1, r0, #3
   8ae1c:	e648      	b.n	8aab0 <_malloc_r+0x8c>
   8ae1e:	f859 3908 	ldr.w	r3, [r9], #-8
   8ae22:	454b      	cmp	r3, r9
   8ae24:	f040 80a9 	bne.w	8af7a <_malloc_r+0x556>
   8ae28:	f010 0f03 	tst.w	r0, #3
   8ae2c:	f100 30ff 	add.w	r0, r0, #4294967295
   8ae30:	d1f5      	bne.n	8ae1e <_malloc_r+0x3fa>
   8ae32:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ae36:	ea23 0301 	bic.w	r3, r3, r1
   8ae3a:	f8c8 3004 	str.w	r3, [r8, #4]
   8ae3e:	0049      	lsls	r1, r1, #1
   8ae40:	4299      	cmp	r1, r3
   8ae42:	f63f aecf 	bhi.w	8abe4 <_malloc_r+0x1c0>
   8ae46:	b919      	cbnz	r1, 8ae50 <_malloc_r+0x42c>
   8ae48:	e6cc      	b.n	8abe4 <_malloc_r+0x1c0>
   8ae4a:	0049      	lsls	r1, r1, #1
   8ae4c:	f10e 0e04 	add.w	lr, lr, #4
   8ae50:	4219      	tst	r1, r3
   8ae52:	d0fa      	beq.n	8ae4a <_malloc_r+0x426>
   8ae54:	4670      	mov	r0, lr
   8ae56:	e67a      	b.n	8ab4e <_malloc_r+0x12a>
   8ae58:	f103 0b10 	add.w	fp, r3, #16
   8ae5c:	e6df      	b.n	8ac1e <_malloc_r+0x1fa>
   8ae5e:	f04f 0e01 	mov.w	lr, #1
   8ae62:	109a      	asrs	r2, r3, #2
   8ae64:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8ae68:	fa0e f202 	lsl.w	r2, lr, r2
   8ae6c:	431a      	orrs	r2, r3
   8ae6e:	f8c8 2004 	str.w	r2, [r8, #4]
   8ae72:	e76d      	b.n	8ad50 <_malloc_r+0x32c>
   8ae74:	eb02 010b 	add.w	r1, r2, fp
   8ae78:	4249      	negs	r1, r1
   8ae7a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8ae7e:	4649      	mov	r1, r9
   8ae80:	4630      	mov	r0, r6
   8ae82:	9200      	str	r2, [sp, #0]
   8ae84:	f000 feec 	bl	8bc60 <_sbrk_r>
   8ae88:	1c43      	adds	r3, r0, #1
   8ae8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8ae8e:	f47f aefc 	bne.w	8ac8a <_malloc_r+0x266>
   8ae92:	46d1      	mov	r9, sl
   8ae94:	e6fc      	b.n	8ac90 <_malloc_r+0x26c>
   8ae96:	2b54      	cmp	r3, #84	; 0x54
   8ae98:	d826      	bhi.n	8aee8 <_malloc_r+0x4c4>
   8ae9a:	0b13      	lsrs	r3, r2, #12
   8ae9c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8aea0:	00c9      	lsls	r1, r1, #3
   8aea2:	336e      	adds	r3, #110	; 0x6e
   8aea4:	e741      	b.n	8ad2a <_malloc_r+0x306>
   8aea6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8aeaa:	d826      	bhi.n	8aefa <_malloc_r+0x4d6>
   8aeac:	0beb      	lsrs	r3, r5, #15
   8aeae:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8aeb2:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8aeb6:	00c1      	lsls	r1, r0, #3
   8aeb8:	e5fa      	b.n	8aab0 <_malloc_r+0x8c>
   8aeba:	4b1a      	ldr	r3, [pc, #104]	; (8af24 <_malloc_r+0x500>)
   8aebc:	6818      	ldr	r0, [r3, #0]
   8aebe:	4458      	add	r0, fp
   8aec0:	6018      	str	r0, [r3, #0]
   8aec2:	e6be      	b.n	8ac42 <_malloc_r+0x21e>
   8aec4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8aec8:	f1bc 0f00 	cmp.w	ip, #0
   8aecc:	f47f aeb9 	bne.w	8ac42 <_malloc_r+0x21e>
   8aed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8aed4:	44bb      	add	fp, r7
   8aed6:	f04b 0001 	orr.w	r0, fp, #1
   8aeda:	6060      	str	r0, [r4, #4]
   8aedc:	e6f9      	b.n	8acd2 <_malloc_r+0x2ae>
   8aede:	4614      	mov	r4, r2
   8aee0:	e6f7      	b.n	8acd2 <_malloc_r+0x2ae>
   8aee2:	2301      	movs	r3, #1
   8aee4:	6053      	str	r3, [r2, #4]
   8aee6:	e78f      	b.n	8ae08 <_malloc_r+0x3e4>
   8aee8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8aeec:	d832      	bhi.n	8af54 <_malloc_r+0x530>
   8aeee:	0bd3      	lsrs	r3, r2, #15
   8aef0:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8aef4:	00c9      	lsls	r1, r1, #3
   8aef6:	3377      	adds	r3, #119	; 0x77
   8aef8:	e717      	b.n	8ad2a <_malloc_r+0x306>
   8aefa:	f240 5254 	movw	r2, #1364	; 0x554
   8aefe:	4293      	cmp	r3, r2
   8af00:	d832      	bhi.n	8af68 <_malloc_r+0x544>
   8af02:	0cab      	lsrs	r3, r5, #18
   8af04:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8af08:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8af0c:	00c1      	lsls	r1, r0, #3
   8af0e:	e5cf      	b.n	8aab0 <_malloc_r+0x8c>
   8af10:	f1aa 0a08 	sub.w	sl, sl, #8
   8af14:	44d3      	add	fp, sl
   8af16:	f04f 0900 	mov.w	r9, #0
   8af1a:	ebab 0b02 	sub.w	fp, fp, r2
   8af1e:	e6b7      	b.n	8ac90 <_malloc_r+0x26c>
   8af20:	20001f54 	.word	0x20001f54
   8af24:	20001f24 	.word	0x20001f24
   8af28:	20001f4c 	.word	0x20001f4c
   8af2c:	20001f50 	.word	0x20001f50
   8af30:	20000cb0 	.word	0x20000cb0
   8af34:	20000cb8 	.word	0x20000cb8
   8af38:	200010b8 	.word	0x200010b8
   8af3c:	f104 0108 	add.w	r1, r4, #8
   8af40:	4630      	mov	r0, r6
   8af42:	9300      	str	r3, [sp, #0]
   8af44:	f7ff fa3c 	bl	8a3c0 <_free_r>
   8af48:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8af4c:	9b00      	ldr	r3, [sp, #0]
   8af4e:	6860      	ldr	r0, [r4, #4]
   8af50:	6819      	ldr	r1, [r3, #0]
   8af52:	e6be      	b.n	8acd2 <_malloc_r+0x2ae>
   8af54:	f240 5154 	movw	r1, #1364	; 0x554
   8af58:	428b      	cmp	r3, r1
   8af5a:	d80a      	bhi.n	8af72 <_malloc_r+0x54e>
   8af5c:	0c93      	lsrs	r3, r2, #18
   8af5e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8af62:	00c9      	lsls	r1, r1, #3
   8af64:	337c      	adds	r3, #124	; 0x7c
   8af66:	e6e0      	b.n	8ad2a <_malloc_r+0x306>
   8af68:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8af6c:	207f      	movs	r0, #127	; 0x7f
   8af6e:	277e      	movs	r7, #126	; 0x7e
   8af70:	e59e      	b.n	8aab0 <_malloc_r+0x8c>
   8af72:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8af76:	237e      	movs	r3, #126	; 0x7e
   8af78:	e6d7      	b.n	8ad2a <_malloc_r+0x306>
   8af7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8af7e:	e75e      	b.n	8ae3e <_malloc_r+0x41a>

0008af80 <__ascii_mbtowc>:
   8af80:	b082      	sub	sp, #8
   8af82:	b149      	cbz	r1, 8af98 <__ascii_mbtowc+0x18>
   8af84:	b15a      	cbz	r2, 8af9e <__ascii_mbtowc+0x1e>
   8af86:	b16b      	cbz	r3, 8afa4 <__ascii_mbtowc+0x24>
   8af88:	7813      	ldrb	r3, [r2, #0]
   8af8a:	600b      	str	r3, [r1, #0]
   8af8c:	7812      	ldrb	r2, [r2, #0]
   8af8e:	1e10      	subs	r0, r2, #0
   8af90:	bf18      	it	ne
   8af92:	2001      	movne	r0, #1
   8af94:	b002      	add	sp, #8
   8af96:	4770      	bx	lr
   8af98:	a901      	add	r1, sp, #4
   8af9a:	2a00      	cmp	r2, #0
   8af9c:	d1f3      	bne.n	8af86 <__ascii_mbtowc+0x6>
   8af9e:	4610      	mov	r0, r2
   8afa0:	b002      	add	sp, #8
   8afa2:	4770      	bx	lr
   8afa4:	f06f 0001 	mvn.w	r0, #1
   8afa8:	e7f4      	b.n	8af94 <__ascii_mbtowc+0x14>
   8afaa:	bf00      	nop

0008afac <memchr>:
   8afac:	b470      	push	{r4, r5, r6}
   8afae:	0784      	lsls	r4, r0, #30
   8afb0:	b2cd      	uxtb	r5, r1
   8afb2:	d012      	beq.n	8afda <memchr+0x2e>
   8afb4:	4603      	mov	r3, r0
   8afb6:	1e54      	subs	r4, r2, #1
   8afb8:	b92a      	cbnz	r2, 8afc6 <memchr+0x1a>
   8afba:	e00b      	b.n	8afd4 <memchr+0x28>
   8afbc:	079a      	lsls	r2, r3, #30
   8afbe:	4618      	mov	r0, r3
   8afc0:	d00c      	beq.n	8afdc <memchr+0x30>
   8afc2:	3c01      	subs	r4, #1
   8afc4:	d306      	bcc.n	8afd4 <memchr+0x28>
   8afc6:	4618      	mov	r0, r3
   8afc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   8afcc:	42aa      	cmp	r2, r5
   8afce:	d1f5      	bne.n	8afbc <memchr+0x10>
   8afd0:	bc70      	pop	{r4, r5, r6}
   8afd2:	4770      	bx	lr
   8afd4:	2000      	movs	r0, #0
   8afd6:	bc70      	pop	{r4, r5, r6}
   8afd8:	4770      	bx	lr
   8afda:	4614      	mov	r4, r2
   8afdc:	2c03      	cmp	r4, #3
   8afde:	d80d      	bhi.n	8affc <memchr+0x50>
   8afe0:	2c00      	cmp	r4, #0
   8afe2:	d0f7      	beq.n	8afd4 <memchr+0x28>
   8afe4:	4602      	mov	r2, r0
   8afe6:	1903      	adds	r3, r0, r4
   8afe8:	e001      	b.n	8afee <memchr+0x42>
   8afea:	429a      	cmp	r2, r3
   8afec:	d0f2      	beq.n	8afd4 <memchr+0x28>
   8afee:	4610      	mov	r0, r2
   8aff0:	f812 1b01 	ldrb.w	r1, [r2], #1
   8aff4:	42a9      	cmp	r1, r5
   8aff6:	d1f8      	bne.n	8afea <memchr+0x3e>
   8aff8:	bc70      	pop	{r4, r5, r6}
   8affa:	4770      	bx	lr
   8affc:	4606      	mov	r6, r0
   8affe:	020a      	lsls	r2, r1, #8
   8b000:	b292      	uxth	r2, r2
   8b002:	432a      	orrs	r2, r5
   8b004:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b008:	6833      	ldr	r3, [r6, #0]
   8b00a:	4630      	mov	r0, r6
   8b00c:	4053      	eors	r3, r2
   8b00e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b012:	ea21 0303 	bic.w	r3, r1, r3
   8b016:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b01a:	f106 0604 	add.w	r6, r6, #4
   8b01e:	d1e1      	bne.n	8afe4 <memchr+0x38>
   8b020:	3c04      	subs	r4, #4
   8b022:	2c03      	cmp	r4, #3
   8b024:	4630      	mov	r0, r6
   8b026:	d8ef      	bhi.n	8b008 <memchr+0x5c>
   8b028:	e7da      	b.n	8afe0 <memchr+0x34>
   8b02a:	bf00      	nop

0008b02c <memmove>:
   8b02c:	4288      	cmp	r0, r1
   8b02e:	b4f0      	push	{r4, r5, r6, r7}
   8b030:	d90d      	bls.n	8b04e <memmove+0x22>
   8b032:	188b      	adds	r3, r1, r2
   8b034:	4283      	cmp	r3, r0
   8b036:	d90a      	bls.n	8b04e <memmove+0x22>
   8b038:	1884      	adds	r4, r0, r2
   8b03a:	b132      	cbz	r2, 8b04a <memmove+0x1e>
   8b03c:	4622      	mov	r2, r4
   8b03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b042:	4299      	cmp	r1, r3
   8b044:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b048:	d1f9      	bne.n	8b03e <memmove+0x12>
   8b04a:	bcf0      	pop	{r4, r5, r6, r7}
   8b04c:	4770      	bx	lr
   8b04e:	2a0f      	cmp	r2, #15
   8b050:	d80e      	bhi.n	8b070 <memmove+0x44>
   8b052:	4603      	mov	r3, r0
   8b054:	1e54      	subs	r4, r2, #1
   8b056:	2a00      	cmp	r2, #0
   8b058:	d0f7      	beq.n	8b04a <memmove+0x1e>
   8b05a:	3401      	adds	r4, #1
   8b05c:	440c      	add	r4, r1
   8b05e:	3b01      	subs	r3, #1
   8b060:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b064:	42a1      	cmp	r1, r4
   8b066:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b06a:	d1f9      	bne.n	8b060 <memmove+0x34>
   8b06c:	bcf0      	pop	{r4, r5, r6, r7}
   8b06e:	4770      	bx	lr
   8b070:	ea40 0301 	orr.w	r3, r0, r1
   8b074:	079b      	lsls	r3, r3, #30
   8b076:	d13e      	bne.n	8b0f6 <memmove+0xca>
   8b078:	f1a2 0310 	sub.w	r3, r2, #16
   8b07c:	f023 040f 	bic.w	r4, r3, #15
   8b080:	f101 0720 	add.w	r7, r1, #32
   8b084:	4427      	add	r7, r4
   8b086:	091b      	lsrs	r3, r3, #4
   8b088:	f101 0410 	add.w	r4, r1, #16
   8b08c:	f100 0510 	add.w	r5, r0, #16
   8b090:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b094:	3410      	adds	r4, #16
   8b096:	f845 6c10 	str.w	r6, [r5, #-16]
   8b09a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b09e:	3510      	adds	r5, #16
   8b0a0:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b0a4:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b0a8:	f845 6c18 	str.w	r6, [r5, #-24]
   8b0ac:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b0b0:	42bc      	cmp	r4, r7
   8b0b2:	f845 6c14 	str.w	r6, [r5, #-20]
   8b0b6:	d1eb      	bne.n	8b090 <memmove+0x64>
   8b0b8:	3301      	adds	r3, #1
   8b0ba:	f012 0f0c 	tst.w	r2, #12
   8b0be:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b0c2:	f002 040f 	and.w	r4, r2, #15
   8b0c6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b0ca:	d017      	beq.n	8b0fc <memmove+0xd0>
   8b0cc:	460e      	mov	r6, r1
   8b0ce:	3c04      	subs	r4, #4
   8b0d0:	f024 0c03 	bic.w	ip, r4, #3
   8b0d4:	08a5      	lsrs	r5, r4, #2
   8b0d6:	449c      	add	ip, r3
   8b0d8:	1f1c      	subs	r4, r3, #4
   8b0da:	f856 7b04 	ldr.w	r7, [r6], #4
   8b0de:	f844 7f04 	str.w	r7, [r4, #4]!
   8b0e2:	4564      	cmp	r4, ip
   8b0e4:	d1f9      	bne.n	8b0da <memmove+0xae>
   8b0e6:	1c6c      	adds	r4, r5, #1
   8b0e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b0ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b0f0:	f002 0203 	and.w	r2, r2, #3
   8b0f4:	e7ae      	b.n	8b054 <memmove+0x28>
   8b0f6:	4603      	mov	r3, r0
   8b0f8:	1e54      	subs	r4, r2, #1
   8b0fa:	e7ae      	b.n	8b05a <memmove+0x2e>
   8b0fc:	4622      	mov	r2, r4
   8b0fe:	e7a9      	b.n	8b054 <memmove+0x28>

0008b100 <__malloc_lock>:
   8b100:	4801      	ldr	r0, [pc, #4]	; (8b108 <__malloc_lock+0x8>)
   8b102:	f7ff bc0b 	b.w	8a91c <__retarget_lock_acquire_recursive>
   8b106:	bf00      	nop
   8b108:	20002bb8 	.word	0x20002bb8

0008b10c <__malloc_unlock>:
   8b10c:	4801      	ldr	r0, [pc, #4]	; (8b114 <__malloc_unlock+0x8>)
   8b10e:	f7ff bc07 	b.w	8a920 <__retarget_lock_release_recursive>
   8b112:	bf00      	nop
   8b114:	20002bb8 	.word	0x20002bb8

0008b118 <_Balloc>:
   8b118:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b11a:	b570      	push	{r4, r5, r6, lr}
   8b11c:	4605      	mov	r5, r0
   8b11e:	460c      	mov	r4, r1
   8b120:	b14b      	cbz	r3, 8b136 <_Balloc+0x1e>
   8b122:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b126:	b180      	cbz	r0, 8b14a <_Balloc+0x32>
   8b128:	6802      	ldr	r2, [r0, #0]
   8b12a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b12e:	2300      	movs	r3, #0
   8b130:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b134:	bd70      	pop	{r4, r5, r6, pc}
   8b136:	2221      	movs	r2, #33	; 0x21
   8b138:	2104      	movs	r1, #4
   8b13a:	f000 ff63 	bl	8c004 <_calloc_r>
   8b13e:	4603      	mov	r3, r0
   8b140:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b142:	2800      	cmp	r0, #0
   8b144:	d1ed      	bne.n	8b122 <_Balloc+0xa>
   8b146:	2000      	movs	r0, #0
   8b148:	bd70      	pop	{r4, r5, r6, pc}
   8b14a:	2101      	movs	r1, #1
   8b14c:	fa01 f604 	lsl.w	r6, r1, r4
   8b150:	1d72      	adds	r2, r6, #5
   8b152:	4628      	mov	r0, r5
   8b154:	0092      	lsls	r2, r2, #2
   8b156:	f000 ff55 	bl	8c004 <_calloc_r>
   8b15a:	2800      	cmp	r0, #0
   8b15c:	d0f3      	beq.n	8b146 <_Balloc+0x2e>
   8b15e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b162:	e7e4      	b.n	8b12e <_Balloc+0x16>

0008b164 <_Bfree>:
   8b164:	b131      	cbz	r1, 8b174 <_Bfree+0x10>
   8b166:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b168:	684a      	ldr	r2, [r1, #4]
   8b16a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b16e:	6008      	str	r0, [r1, #0]
   8b170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b174:	4770      	bx	lr
   8b176:	bf00      	nop

0008b178 <__multadd>:
   8b178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b17c:	4680      	mov	r8, r0
   8b17e:	461c      	mov	r4, r3
   8b180:	2000      	movs	r0, #0
   8b182:	460f      	mov	r7, r1
   8b184:	690e      	ldr	r6, [r1, #16]
   8b186:	3114      	adds	r1, #20
   8b188:	680d      	ldr	r5, [r1, #0]
   8b18a:	3001      	adds	r0, #1
   8b18c:	b2ab      	uxth	r3, r5
   8b18e:	fb02 4303 	mla	r3, r2, r3, r4
   8b192:	0c2c      	lsrs	r4, r5, #16
   8b194:	0c1d      	lsrs	r5, r3, #16
   8b196:	fb02 5404 	mla	r4, r2, r4, r5
   8b19a:	b29b      	uxth	r3, r3
   8b19c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b1a0:	4286      	cmp	r6, r0
   8b1a2:	f841 3b04 	str.w	r3, [r1], #4
   8b1a6:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b1aa:	dced      	bgt.n	8b188 <__multadd+0x10>
   8b1ac:	b13c      	cbz	r4, 8b1be <__multadd+0x46>
   8b1ae:	68bb      	ldr	r3, [r7, #8]
   8b1b0:	42b3      	cmp	r3, r6
   8b1b2:	dd07      	ble.n	8b1c4 <__multadd+0x4c>
   8b1b4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b1b8:	3601      	adds	r6, #1
   8b1ba:	615c      	str	r4, [r3, #20]
   8b1bc:	613e      	str	r6, [r7, #16]
   8b1be:	4638      	mov	r0, r7
   8b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b1c4:	6879      	ldr	r1, [r7, #4]
   8b1c6:	4640      	mov	r0, r8
   8b1c8:	3101      	adds	r1, #1
   8b1ca:	f7ff ffa5 	bl	8b118 <_Balloc>
   8b1ce:	4605      	mov	r5, r0
   8b1d0:	b1b0      	cbz	r0, 8b200 <__multadd+0x88>
   8b1d2:	693a      	ldr	r2, [r7, #16]
   8b1d4:	f107 010c 	add.w	r1, r7, #12
   8b1d8:	3202      	adds	r2, #2
   8b1da:	0092      	lsls	r2, r2, #2
   8b1dc:	300c      	adds	r0, #12
   8b1de:	f7fa ff8b 	bl	860f8 <memcpy>
   8b1e2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b1e6:	687a      	ldr	r2, [r7, #4]
   8b1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b1ec:	6039      	str	r1, [r7, #0]
   8b1ee:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b1f2:	462f      	mov	r7, r5
   8b1f4:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b1f8:	3601      	adds	r6, #1
   8b1fa:	615c      	str	r4, [r3, #20]
   8b1fc:	613e      	str	r6, [r7, #16]
   8b1fe:	e7de      	b.n	8b1be <__multadd+0x46>
   8b200:	4602      	mov	r2, r0
   8b202:	21b5      	movs	r1, #181	; 0xb5
   8b204:	4b01      	ldr	r3, [pc, #4]	; (8b20c <__multadd+0x94>)
   8b206:	4802      	ldr	r0, [pc, #8]	; (8b210 <__multadd+0x98>)
   8b208:	f000 fede 	bl	8bfc8 <__assert_func>
   8b20c:	0008ce64 	.word	0x0008ce64
   8b210:	0008cf04 	.word	0x0008cf04

0008b214 <__hi0bits>:
   8b214:	0c02      	lsrs	r2, r0, #16
   8b216:	0412      	lsls	r2, r2, #16
   8b218:	4603      	mov	r3, r0
   8b21a:	b9ca      	cbnz	r2, 8b250 <__hi0bits+0x3c>
   8b21c:	0403      	lsls	r3, r0, #16
   8b21e:	2010      	movs	r0, #16
   8b220:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b224:	bf04      	itt	eq
   8b226:	021b      	lsleq	r3, r3, #8
   8b228:	3008      	addeq	r0, #8
   8b22a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b22e:	bf04      	itt	eq
   8b230:	011b      	lsleq	r3, r3, #4
   8b232:	3004      	addeq	r0, #4
   8b234:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b238:	bf04      	itt	eq
   8b23a:	009b      	lsleq	r3, r3, #2
   8b23c:	3002      	addeq	r0, #2
   8b23e:	2b00      	cmp	r3, #0
   8b240:	db05      	blt.n	8b24e <__hi0bits+0x3a>
   8b242:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b246:	f100 0001 	add.w	r0, r0, #1
   8b24a:	bf08      	it	eq
   8b24c:	2020      	moveq	r0, #32
   8b24e:	4770      	bx	lr
   8b250:	2000      	movs	r0, #0
   8b252:	e7e5      	b.n	8b220 <__hi0bits+0xc>

0008b254 <__lo0bits>:
   8b254:	6803      	ldr	r3, [r0, #0]
   8b256:	4601      	mov	r1, r0
   8b258:	f013 0207 	ands.w	r2, r3, #7
   8b25c:	d007      	beq.n	8b26e <__lo0bits+0x1a>
   8b25e:	07da      	lsls	r2, r3, #31
   8b260:	d420      	bmi.n	8b2a4 <__lo0bits+0x50>
   8b262:	0798      	lsls	r0, r3, #30
   8b264:	d522      	bpl.n	8b2ac <__lo0bits+0x58>
   8b266:	085b      	lsrs	r3, r3, #1
   8b268:	2001      	movs	r0, #1
   8b26a:	600b      	str	r3, [r1, #0]
   8b26c:	4770      	bx	lr
   8b26e:	b298      	uxth	r0, r3
   8b270:	b1a8      	cbz	r0, 8b29e <__lo0bits+0x4a>
   8b272:	4610      	mov	r0, r2
   8b274:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b278:	bf04      	itt	eq
   8b27a:	0a1b      	lsreq	r3, r3, #8
   8b27c:	3008      	addeq	r0, #8
   8b27e:	071a      	lsls	r2, r3, #28
   8b280:	bf04      	itt	eq
   8b282:	091b      	lsreq	r3, r3, #4
   8b284:	3004      	addeq	r0, #4
   8b286:	079a      	lsls	r2, r3, #30
   8b288:	bf04      	itt	eq
   8b28a:	089b      	lsreq	r3, r3, #2
   8b28c:	3002      	addeq	r0, #2
   8b28e:	07da      	lsls	r2, r3, #31
   8b290:	d403      	bmi.n	8b29a <__lo0bits+0x46>
   8b292:	085b      	lsrs	r3, r3, #1
   8b294:	f100 0001 	add.w	r0, r0, #1
   8b298:	d006      	beq.n	8b2a8 <__lo0bits+0x54>
   8b29a:	600b      	str	r3, [r1, #0]
   8b29c:	4770      	bx	lr
   8b29e:	2010      	movs	r0, #16
   8b2a0:	0c1b      	lsrs	r3, r3, #16
   8b2a2:	e7e7      	b.n	8b274 <__lo0bits+0x20>
   8b2a4:	2000      	movs	r0, #0
   8b2a6:	4770      	bx	lr
   8b2a8:	2020      	movs	r0, #32
   8b2aa:	4770      	bx	lr
   8b2ac:	089b      	lsrs	r3, r3, #2
   8b2ae:	2002      	movs	r0, #2
   8b2b0:	600b      	str	r3, [r1, #0]
   8b2b2:	4770      	bx	lr

0008b2b4 <__i2b>:
   8b2b4:	b510      	push	{r4, lr}
   8b2b6:	460c      	mov	r4, r1
   8b2b8:	2101      	movs	r1, #1
   8b2ba:	f7ff ff2d 	bl	8b118 <_Balloc>
   8b2be:	4602      	mov	r2, r0
   8b2c0:	b118      	cbz	r0, 8b2ca <__i2b+0x16>
   8b2c2:	2301      	movs	r3, #1
   8b2c4:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b2c8:	bd10      	pop	{r4, pc}
   8b2ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b2ce:	4b02      	ldr	r3, [pc, #8]	; (8b2d8 <__i2b+0x24>)
   8b2d0:	4802      	ldr	r0, [pc, #8]	; (8b2dc <__i2b+0x28>)
   8b2d2:	f000 fe79 	bl	8bfc8 <__assert_func>
   8b2d6:	bf00      	nop
   8b2d8:	0008ce64 	.word	0x0008ce64
   8b2dc:	0008cf04 	.word	0x0008cf04

0008b2e0 <__multiply>:
   8b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2e4:	690d      	ldr	r5, [r1, #16]
   8b2e6:	6917      	ldr	r7, [r2, #16]
   8b2e8:	460e      	mov	r6, r1
   8b2ea:	42bd      	cmp	r5, r7
   8b2ec:	4614      	mov	r4, r2
   8b2ee:	b085      	sub	sp, #20
   8b2f0:	db05      	blt.n	8b2fe <__multiply+0x1e>
   8b2f2:	463a      	mov	r2, r7
   8b2f4:	4623      	mov	r3, r4
   8b2f6:	462f      	mov	r7, r5
   8b2f8:	460c      	mov	r4, r1
   8b2fa:	4615      	mov	r5, r2
   8b2fc:	461e      	mov	r6, r3
   8b2fe:	68a3      	ldr	r3, [r4, #8]
   8b300:	6861      	ldr	r1, [r4, #4]
   8b302:	eb07 0805 	add.w	r8, r7, r5
   8b306:	4543      	cmp	r3, r8
   8b308:	bfb8      	it	lt
   8b30a:	3101      	addlt	r1, #1
   8b30c:	f7ff ff04 	bl	8b118 <_Balloc>
   8b310:	9001      	str	r0, [sp, #4]
   8b312:	2800      	cmp	r0, #0
   8b314:	f000 8088 	beq.w	8b428 <__multiply+0x148>
   8b318:	9b01      	ldr	r3, [sp, #4]
   8b31a:	f103 0914 	add.w	r9, r3, #20
   8b31e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b322:	45d1      	cmp	r9, sl
   8b324:	d205      	bcs.n	8b332 <__multiply+0x52>
   8b326:	464b      	mov	r3, r9
   8b328:	2200      	movs	r2, #0
   8b32a:	f843 2b04 	str.w	r2, [r3], #4
   8b32e:	459a      	cmp	sl, r3
   8b330:	d8fb      	bhi.n	8b32a <__multiply+0x4a>
   8b332:	f106 0e14 	add.w	lr, r6, #20
   8b336:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b33a:	f104 0314 	add.w	r3, r4, #20
   8b33e:	45de      	cmp	lr, fp
   8b340:	461a      	mov	r2, r3
   8b342:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b346:	d23e      	bcs.n	8b3c6 <__multiply+0xe6>
   8b348:	1b3b      	subs	r3, r7, r4
   8b34a:	3b15      	subs	r3, #21
   8b34c:	f023 0303 	bic.w	r3, r3, #3
   8b350:	3304      	adds	r3, #4
   8b352:	3415      	adds	r4, #21
   8b354:	42a7      	cmp	r7, r4
   8b356:	bf38      	it	cc
   8b358:	2304      	movcc	r3, #4
   8b35a:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b35e:	4698      	mov	r8, r3
   8b360:	4692      	mov	sl, r2
   8b362:	e003      	b.n	8b36c <__multiply+0x8c>
   8b364:	45f3      	cmp	fp, lr
   8b366:	f109 0904 	add.w	r9, r9, #4
   8b36a:	d92a      	bls.n	8b3c2 <__multiply+0xe2>
   8b36c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b370:	b286      	uxth	r6, r0
   8b372:	2e00      	cmp	r6, #0
   8b374:	d138      	bne.n	8b3e8 <__multiply+0x108>
   8b376:	0c00      	lsrs	r0, r0, #16
   8b378:	d0f4      	beq.n	8b364 <__multiply+0x84>
   8b37a:	f8d9 3000 	ldr.w	r3, [r9]
   8b37e:	4654      	mov	r4, sl
   8b380:	461e      	mov	r6, r3
   8b382:	464d      	mov	r5, r9
   8b384:	f04f 0c00 	mov.w	ip, #0
   8b388:	8822      	ldrh	r2, [r4, #0]
   8b38a:	0c36      	lsrs	r6, r6, #16
   8b38c:	fb00 6602 	mla	r6, r0, r2, r6
   8b390:	b29b      	uxth	r3, r3
   8b392:	44b4      	add	ip, r6
   8b394:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b398:	f845 3b04 	str.w	r3, [r5], #4
   8b39c:	f854 3b04 	ldr.w	r3, [r4], #4
   8b3a0:	682e      	ldr	r6, [r5, #0]
   8b3a2:	0c1b      	lsrs	r3, r3, #16
   8b3a4:	b2b2      	uxth	r2, r6
   8b3a6:	fb00 2303 	mla	r3, r0, r3, r2
   8b3aa:	42a7      	cmp	r7, r4
   8b3ac:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b3b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b3b4:	d8e8      	bhi.n	8b388 <__multiply+0xa8>
   8b3b6:	45f3      	cmp	fp, lr
   8b3b8:	f849 3008 	str.w	r3, [r9, r8]
   8b3bc:	f109 0904 	add.w	r9, r9, #4
   8b3c0:	d8d4      	bhi.n	8b36c <__multiply+0x8c>
   8b3c2:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b3c6:	f1b8 0f00 	cmp.w	r8, #0
   8b3ca:	dc03      	bgt.n	8b3d4 <__multiply+0xf4>
   8b3cc:	e006      	b.n	8b3dc <__multiply+0xfc>
   8b3ce:	f1b8 0801 	subs.w	r8, r8, #1
   8b3d2:	d003      	beq.n	8b3dc <__multiply+0xfc>
   8b3d4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b3d8:	2b00      	cmp	r3, #0
   8b3da:	d0f8      	beq.n	8b3ce <__multiply+0xee>
   8b3dc:	9801      	ldr	r0, [sp, #4]
   8b3de:	f8c0 8010 	str.w	r8, [r0, #16]
   8b3e2:	b005      	add	sp, #20
   8b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b3e8:	4655      	mov	r5, sl
   8b3ea:	464c      	mov	r4, r9
   8b3ec:	2300      	movs	r3, #0
   8b3ee:	f855 1b04 	ldr.w	r1, [r5], #4
   8b3f2:	6820      	ldr	r0, [r4, #0]
   8b3f4:	b28a      	uxth	r2, r1
   8b3f6:	fa1f fc80 	uxth.w	ip, r0
   8b3fa:	fb06 c202 	mla	r2, r6, r2, ip
   8b3fe:	0c09      	lsrs	r1, r1, #16
   8b400:	0c00      	lsrs	r0, r0, #16
   8b402:	fb06 0101 	mla	r1, r6, r1, r0
   8b406:	4413      	add	r3, r2
   8b408:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b40c:	b29b      	uxth	r3, r3
   8b40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b412:	42af      	cmp	r7, r5
   8b414:	f844 3b04 	str.w	r3, [r4], #4
   8b418:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b41c:	d8e7      	bhi.n	8b3ee <__multiply+0x10e>
   8b41e:	f849 3008 	str.w	r3, [r9, r8]
   8b422:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b426:	e7a6      	b.n	8b376 <__multiply+0x96>
   8b428:	4602      	mov	r2, r0
   8b42a:	f240 115d 	movw	r1, #349	; 0x15d
   8b42e:	4b02      	ldr	r3, [pc, #8]	; (8b438 <__multiply+0x158>)
   8b430:	4802      	ldr	r0, [pc, #8]	; (8b43c <__multiply+0x15c>)
   8b432:	f000 fdc9 	bl	8bfc8 <__assert_func>
   8b436:	bf00      	nop
   8b438:	0008ce64 	.word	0x0008ce64
   8b43c:	0008cf04 	.word	0x0008cf04

0008b440 <__pow5mult>:
   8b440:	f012 0303 	ands.w	r3, r2, #3
   8b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b448:	4614      	mov	r4, r2
   8b44a:	4607      	mov	r7, r0
   8b44c:	d12e      	bne.n	8b4ac <__pow5mult+0x6c>
   8b44e:	460e      	mov	r6, r1
   8b450:	10a4      	asrs	r4, r4, #2
   8b452:	d01c      	beq.n	8b48e <__pow5mult+0x4e>
   8b454:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b456:	b395      	cbz	r5, 8b4be <__pow5mult+0x7e>
   8b458:	07e3      	lsls	r3, r4, #31
   8b45a:	f04f 0800 	mov.w	r8, #0
   8b45e:	d406      	bmi.n	8b46e <__pow5mult+0x2e>
   8b460:	1064      	asrs	r4, r4, #1
   8b462:	d014      	beq.n	8b48e <__pow5mult+0x4e>
   8b464:	6828      	ldr	r0, [r5, #0]
   8b466:	b1a8      	cbz	r0, 8b494 <__pow5mult+0x54>
   8b468:	4605      	mov	r5, r0
   8b46a:	07e3      	lsls	r3, r4, #31
   8b46c:	d5f8      	bpl.n	8b460 <__pow5mult+0x20>
   8b46e:	462a      	mov	r2, r5
   8b470:	4631      	mov	r1, r6
   8b472:	4638      	mov	r0, r7
   8b474:	f7ff ff34 	bl	8b2e0 <__multiply>
   8b478:	b1b6      	cbz	r6, 8b4a8 <__pow5mult+0x68>
   8b47a:	6871      	ldr	r1, [r6, #4]
   8b47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b47e:	1064      	asrs	r4, r4, #1
   8b480:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b484:	6032      	str	r2, [r6, #0]
   8b486:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b48a:	4606      	mov	r6, r0
   8b48c:	d1ea      	bne.n	8b464 <__pow5mult+0x24>
   8b48e:	4630      	mov	r0, r6
   8b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b494:	462a      	mov	r2, r5
   8b496:	4629      	mov	r1, r5
   8b498:	4638      	mov	r0, r7
   8b49a:	f7ff ff21 	bl	8b2e0 <__multiply>
   8b49e:	6028      	str	r0, [r5, #0]
   8b4a0:	4605      	mov	r5, r0
   8b4a2:	f8c0 8000 	str.w	r8, [r0]
   8b4a6:	e7e0      	b.n	8b46a <__pow5mult+0x2a>
   8b4a8:	4606      	mov	r6, r0
   8b4aa:	e7d9      	b.n	8b460 <__pow5mult+0x20>
   8b4ac:	4a09      	ldr	r2, [pc, #36]	; (8b4d4 <__pow5mult+0x94>)
   8b4ae:	3b01      	subs	r3, #1
   8b4b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b4b4:	2300      	movs	r3, #0
   8b4b6:	f7ff fe5f 	bl	8b178 <__multadd>
   8b4ba:	4606      	mov	r6, r0
   8b4bc:	e7c8      	b.n	8b450 <__pow5mult+0x10>
   8b4be:	f240 2171 	movw	r1, #625	; 0x271
   8b4c2:	4638      	mov	r0, r7
   8b4c4:	f7ff fef6 	bl	8b2b4 <__i2b>
   8b4c8:	2300      	movs	r3, #0
   8b4ca:	64b8      	str	r0, [r7, #72]	; 0x48
   8b4cc:	4605      	mov	r5, r0
   8b4ce:	6003      	str	r3, [r0, #0]
   8b4d0:	e7c2      	b.n	8b458 <__pow5mult+0x18>
   8b4d2:	bf00      	nop
   8b4d4:	0008d078 	.word	0x0008d078

0008b4d8 <__lshift>:
   8b4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b4dc:	690f      	ldr	r7, [r1, #16]
   8b4de:	688b      	ldr	r3, [r1, #8]
   8b4e0:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b4e4:	1c7e      	adds	r6, r7, #1
   8b4e6:	429e      	cmp	r6, r3
   8b4e8:	460d      	mov	r5, r1
   8b4ea:	4691      	mov	r9, r2
   8b4ec:	4680      	mov	r8, r0
   8b4ee:	6849      	ldr	r1, [r1, #4]
   8b4f0:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b4f4:	dd04      	ble.n	8b500 <__lshift+0x28>
   8b4f6:	005b      	lsls	r3, r3, #1
   8b4f8:	429e      	cmp	r6, r3
   8b4fa:	f101 0101 	add.w	r1, r1, #1
   8b4fe:	dcfa      	bgt.n	8b4f6 <__lshift+0x1e>
   8b500:	4640      	mov	r0, r8
   8b502:	f7ff fe09 	bl	8b118 <_Balloc>
   8b506:	2800      	cmp	r0, #0
   8b508:	d04f      	beq.n	8b5aa <__lshift+0xd2>
   8b50a:	2c00      	cmp	r4, #0
   8b50c:	f100 0114 	add.w	r1, r0, #20
   8b510:	dd0d      	ble.n	8b52e <__lshift+0x56>
   8b512:	460b      	mov	r3, r1
   8b514:	2200      	movs	r2, #0
   8b516:	3405      	adds	r4, #5
   8b518:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b51c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b520:	f843 2b04 	str.w	r2, [r3], #4
   8b524:	42a3      	cmp	r3, r4
   8b526:	d1fb      	bne.n	8b520 <__lshift+0x48>
   8b528:	f1ac 0314 	sub.w	r3, ip, #20
   8b52c:	4419      	add	r1, r3
   8b52e:	692c      	ldr	r4, [r5, #16]
   8b530:	f105 0314 	add.w	r3, r5, #20
   8b534:	f019 091f 	ands.w	r9, r9, #31
   8b538:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b53c:	d02d      	beq.n	8b59a <__lshift+0xc2>
   8b53e:	468e      	mov	lr, r1
   8b540:	f04f 0a00 	mov.w	sl, #0
   8b544:	f1c9 0220 	rsb	r2, r9, #32
   8b548:	681c      	ldr	r4, [r3, #0]
   8b54a:	fa04 f409 	lsl.w	r4, r4, r9
   8b54e:	ea44 040a 	orr.w	r4, r4, sl
   8b552:	f84e 4b04 	str.w	r4, [lr], #4
   8b556:	f853 4b04 	ldr.w	r4, [r3], #4
   8b55a:	459c      	cmp	ip, r3
   8b55c:	fa24 fa02 	lsr.w	sl, r4, r2
   8b560:	d8f2      	bhi.n	8b548 <__lshift+0x70>
   8b562:	ebac 0305 	sub.w	r3, ip, r5
   8b566:	3b15      	subs	r3, #21
   8b568:	f023 0303 	bic.w	r3, r3, #3
   8b56c:	3304      	adds	r3, #4
   8b56e:	f105 0215 	add.w	r2, r5, #21
   8b572:	4594      	cmp	ip, r2
   8b574:	bf38      	it	cc
   8b576:	2304      	movcc	r3, #4
   8b578:	f1ba 0f00 	cmp.w	sl, #0
   8b57c:	bf18      	it	ne
   8b57e:	4637      	movne	r7, r6
   8b580:	f841 a003 	str.w	sl, [r1, r3]
   8b584:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b588:	686a      	ldr	r2, [r5, #4]
   8b58a:	6107      	str	r7, [r0, #16]
   8b58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b590:	6029      	str	r1, [r5, #0]
   8b592:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b59a:	3904      	subs	r1, #4
   8b59c:	f853 2b04 	ldr.w	r2, [r3], #4
   8b5a0:	459c      	cmp	ip, r3
   8b5a2:	f841 2f04 	str.w	r2, [r1, #4]!
   8b5a6:	d8f9      	bhi.n	8b59c <__lshift+0xc4>
   8b5a8:	e7ec      	b.n	8b584 <__lshift+0xac>
   8b5aa:	4602      	mov	r2, r0
   8b5ac:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b5b0:	4b01      	ldr	r3, [pc, #4]	; (8b5b8 <__lshift+0xe0>)
   8b5b2:	4802      	ldr	r0, [pc, #8]	; (8b5bc <__lshift+0xe4>)
   8b5b4:	f000 fd08 	bl	8bfc8 <__assert_func>
   8b5b8:	0008ce64 	.word	0x0008ce64
   8b5bc:	0008cf04 	.word	0x0008cf04

0008b5c0 <__mcmp>:
   8b5c0:	b430      	push	{r4, r5}
   8b5c2:	690b      	ldr	r3, [r1, #16]
   8b5c4:	4605      	mov	r5, r0
   8b5c6:	6900      	ldr	r0, [r0, #16]
   8b5c8:	1ac0      	subs	r0, r0, r3
   8b5ca:	d111      	bne.n	8b5f0 <__mcmp+0x30>
   8b5cc:	3514      	adds	r5, #20
   8b5ce:	3114      	adds	r1, #20
   8b5d0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b5d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b5d8:	e001      	b.n	8b5de <__mcmp+0x1e>
   8b5da:	429d      	cmp	r5, r3
   8b5dc:	d208      	bcs.n	8b5f0 <__mcmp+0x30>
   8b5de:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b5e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b5e6:	428c      	cmp	r4, r1
   8b5e8:	d0f7      	beq.n	8b5da <__mcmp+0x1a>
   8b5ea:	d203      	bcs.n	8b5f4 <__mcmp+0x34>
   8b5ec:	f04f 30ff 	mov.w	r0, #4294967295
   8b5f0:	bc30      	pop	{r4, r5}
   8b5f2:	4770      	bx	lr
   8b5f4:	2001      	movs	r0, #1
   8b5f6:	bc30      	pop	{r4, r5}
   8b5f8:	4770      	bx	lr
   8b5fa:	bf00      	nop

0008b5fc <__mdiff>:
   8b5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b600:	690b      	ldr	r3, [r1, #16]
   8b602:	460c      	mov	r4, r1
   8b604:	6911      	ldr	r1, [r2, #16]
   8b606:	4690      	mov	r8, r2
   8b608:	eba3 0b01 	sub.w	fp, r3, r1
   8b60c:	f1bb 0f00 	cmp.w	fp, #0
   8b610:	d17c      	bne.n	8b70c <__mdiff+0x110>
   8b612:	f104 0614 	add.w	r6, r4, #20
   8b616:	3214      	adds	r2, #20
   8b618:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b61c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b620:	e001      	b.n	8b626 <__mdiff+0x2a>
   8b622:	429e      	cmp	r6, r3
   8b624:	d276      	bcs.n	8b714 <__mdiff+0x118>
   8b626:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b62a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b62e:	428d      	cmp	r5, r1
   8b630:	d0f7      	beq.n	8b622 <__mdiff+0x26>
   8b632:	d365      	bcc.n	8b700 <__mdiff+0x104>
   8b634:	6861      	ldr	r1, [r4, #4]
   8b636:	f7ff fd6f 	bl	8b118 <_Balloc>
   8b63a:	2800      	cmp	r0, #0
   8b63c:	d074      	beq.n	8b728 <__mdiff+0x12c>
   8b63e:	f100 0614 	add.w	r6, r0, #20
   8b642:	46b4      	mov	ip, r6
   8b644:	2300      	movs	r3, #0
   8b646:	6927      	ldr	r7, [r4, #16]
   8b648:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b64c:	f104 0a14 	add.w	sl, r4, #20
   8b650:	f108 0514 	add.w	r5, r8, #20
   8b654:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b658:	3410      	adds	r4, #16
   8b65a:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b65e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b662:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b666:	f855 bb04 	ldr.w	fp, [r5], #4
   8b66a:	b291      	uxth	r1, r2
   8b66c:	440b      	add	r3, r1
   8b66e:	fa1f f18b 	uxth.w	r1, fp
   8b672:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b676:	1a59      	subs	r1, r3, r1
   8b678:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b67c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b680:	b289      	uxth	r1, r1
   8b682:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b686:	45a9      	cmp	r9, r5
   8b688:	f84c 1b04 	str.w	r1, [ip], #4
   8b68c:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b690:	d8e7      	bhi.n	8b662 <__mdiff+0x66>
   8b692:	eba9 0208 	sub.w	r2, r9, r8
   8b696:	3a15      	subs	r2, #21
   8b698:	f108 0815 	add.w	r8, r8, #21
   8b69c:	45c1      	cmp	r9, r8
   8b69e:	f022 0403 	bic.w	r4, r2, #3
   8b6a2:	f104 0404 	add.w	r4, r4, #4
   8b6a6:	bf38      	it	cc
   8b6a8:	2404      	movcc	r4, #4
   8b6aa:	f022 0203 	bic.w	r2, r2, #3
   8b6ae:	bf38      	it	cc
   8b6b0:	2200      	movcc	r2, #0
   8b6b2:	44a2      	add	sl, r4
   8b6b4:	45d6      	cmp	lr, sl
   8b6b6:	4434      	add	r4, r6
   8b6b8:	4416      	add	r6, r2
   8b6ba:	d918      	bls.n	8b6ee <__mdiff+0xf2>
   8b6bc:	4625      	mov	r5, r4
   8b6be:	4652      	mov	r2, sl
   8b6c0:	f852 6b04 	ldr.w	r6, [r2], #4
   8b6c4:	b2b1      	uxth	r1, r6
   8b6c6:	4419      	add	r1, r3
   8b6c8:	140b      	asrs	r3, r1, #16
   8b6ca:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8b6ce:	b289      	uxth	r1, r1
   8b6d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b6d4:	4596      	cmp	lr, r2
   8b6d6:	f845 1b04 	str.w	r1, [r5], #4
   8b6da:	ea4f 4323 	mov.w	r3, r3, asr #16
   8b6de:	d8ef      	bhi.n	8b6c0 <__mdiff+0xc4>
   8b6e0:	f10e 36ff 	add.w	r6, lr, #4294967295
   8b6e4:	eba6 060a 	sub.w	r6, r6, sl
   8b6e8:	f026 0603 	bic.w	r6, r6, #3
   8b6ec:	4426      	add	r6, r4
   8b6ee:	b921      	cbnz	r1, 8b6fa <__mdiff+0xfe>
   8b6f0:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8b6f4:	3f01      	subs	r7, #1
   8b6f6:	2b00      	cmp	r3, #0
   8b6f8:	d0fa      	beq.n	8b6f0 <__mdiff+0xf4>
   8b6fa:	6107      	str	r7, [r0, #16]
   8b6fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b700:	4623      	mov	r3, r4
   8b702:	f04f 0b01 	mov.w	fp, #1
   8b706:	4644      	mov	r4, r8
   8b708:	4698      	mov	r8, r3
   8b70a:	e793      	b.n	8b634 <__mdiff+0x38>
   8b70c:	dbf8      	blt.n	8b700 <__mdiff+0x104>
   8b70e:	f04f 0b00 	mov.w	fp, #0
   8b712:	e78f      	b.n	8b634 <__mdiff+0x38>
   8b714:	2100      	movs	r1, #0
   8b716:	f7ff fcff 	bl	8b118 <_Balloc>
   8b71a:	b160      	cbz	r0, 8b736 <__mdiff+0x13a>
   8b71c:	2201      	movs	r2, #1
   8b71e:	2300      	movs	r3, #0
   8b720:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b728:	4602      	mov	r2, r0
   8b72a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8b72e:	4b05      	ldr	r3, [pc, #20]	; (8b744 <__mdiff+0x148>)
   8b730:	4805      	ldr	r0, [pc, #20]	; (8b748 <__mdiff+0x14c>)
   8b732:	f000 fc49 	bl	8bfc8 <__assert_func>
   8b736:	4602      	mov	r2, r0
   8b738:	f240 2132 	movw	r1, #562	; 0x232
   8b73c:	4b01      	ldr	r3, [pc, #4]	; (8b744 <__mdiff+0x148>)
   8b73e:	4802      	ldr	r0, [pc, #8]	; (8b748 <__mdiff+0x14c>)
   8b740:	f000 fc42 	bl	8bfc8 <__assert_func>
   8b744:	0008ce64 	.word	0x0008ce64
   8b748:	0008cf04 	.word	0x0008cf04

0008b74c <__d2b>:
   8b74c:	b570      	push	{r4, r5, r6, lr}
   8b74e:	2101      	movs	r1, #1
   8b750:	b082      	sub	sp, #8
   8b752:	4616      	mov	r6, r2
   8b754:	461d      	mov	r5, r3
   8b756:	f7ff fcdf 	bl	8b118 <_Balloc>
   8b75a:	4604      	mov	r4, r0
   8b75c:	2800      	cmp	r0, #0
   8b75e:	d04c      	beq.n	8b7fa <__d2b+0xae>
   8b760:	462b      	mov	r3, r5
   8b762:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8b766:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8b76a:	b10d      	cbz	r5, 8b770 <__d2b+0x24>
   8b76c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8b770:	2e00      	cmp	r6, #0
   8b772:	9301      	str	r3, [sp, #4]
   8b774:	d022      	beq.n	8b7bc <__d2b+0x70>
   8b776:	4668      	mov	r0, sp
   8b778:	9600      	str	r6, [sp, #0]
   8b77a:	f7ff fd6b 	bl	8b254 <__lo0bits>
   8b77e:	2800      	cmp	r0, #0
   8b780:	d037      	beq.n	8b7f2 <__d2b+0xa6>
   8b782:	9b01      	ldr	r3, [sp, #4]
   8b784:	9900      	ldr	r1, [sp, #0]
   8b786:	f1c0 0220 	rsb	r2, r0, #32
   8b78a:	fa03 f202 	lsl.w	r2, r3, r2
   8b78e:	430a      	orrs	r2, r1
   8b790:	40c3      	lsrs	r3, r0
   8b792:	9301      	str	r3, [sp, #4]
   8b794:	6162      	str	r2, [r4, #20]
   8b796:	2b00      	cmp	r3, #0
   8b798:	bf14      	ite	ne
   8b79a:	2102      	movne	r1, #2
   8b79c:	2101      	moveq	r1, #1
   8b79e:	61a3      	str	r3, [r4, #24]
   8b7a0:	6121      	str	r1, [r4, #16]
   8b7a2:	b1b5      	cbz	r5, 8b7d2 <__d2b+0x86>
   8b7a4:	9a06      	ldr	r2, [sp, #24]
   8b7a6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8b7aa:	4403      	add	r3, r0
   8b7ac:	6013      	str	r3, [r2, #0]
   8b7ae:	9b07      	ldr	r3, [sp, #28]
   8b7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8b7b4:	6018      	str	r0, [r3, #0]
   8b7b6:	4620      	mov	r0, r4
   8b7b8:	b002      	add	sp, #8
   8b7ba:	bd70      	pop	{r4, r5, r6, pc}
   8b7bc:	a801      	add	r0, sp, #4
   8b7be:	f7ff fd49 	bl	8b254 <__lo0bits>
   8b7c2:	2301      	movs	r3, #1
   8b7c4:	9a01      	ldr	r2, [sp, #4]
   8b7c6:	4619      	mov	r1, r3
   8b7c8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b7cc:	3020      	adds	r0, #32
   8b7ce:	2d00      	cmp	r5, #0
   8b7d0:	d1e8      	bne.n	8b7a4 <__d2b+0x58>
   8b7d2:	9a06      	ldr	r2, [sp, #24]
   8b7d4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8b7d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8b7dc:	6010      	str	r0, [r2, #0]
   8b7de:	6918      	ldr	r0, [r3, #16]
   8b7e0:	f7ff fd18 	bl	8b214 <__hi0bits>
   8b7e4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8b7e8:	4620      	mov	r0, r4
   8b7ea:	9b07      	ldr	r3, [sp, #28]
   8b7ec:	6019      	str	r1, [r3, #0]
   8b7ee:	b002      	add	sp, #8
   8b7f0:	bd70      	pop	{r4, r5, r6, pc}
   8b7f2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b7f6:	6162      	str	r2, [r4, #20]
   8b7f8:	e7cd      	b.n	8b796 <__d2b+0x4a>
   8b7fa:	4602      	mov	r2, r0
   8b7fc:	f240 310a 	movw	r1, #778	; 0x30a
   8b800:	4b01      	ldr	r3, [pc, #4]	; (8b808 <__d2b+0xbc>)
   8b802:	4802      	ldr	r0, [pc, #8]	; (8b80c <__d2b+0xc0>)
   8b804:	f000 fbe0 	bl	8bfc8 <__assert_func>
   8b808:	0008ce64 	.word	0x0008ce64
   8b80c:	0008cf04 	.word	0x0008cf04

0008b810 <_realloc_r>:
   8b810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b814:	4616      	mov	r6, r2
   8b816:	2900      	cmp	r1, #0
   8b818:	f000 80bd 	beq.w	8b996 <_realloc_r+0x186>
   8b81c:	f106 050b 	add.w	r5, r6, #11
   8b820:	460c      	mov	r4, r1
   8b822:	4680      	mov	r8, r0
   8b824:	f7ff fc6c 	bl	8b100 <__malloc_lock>
   8b828:	2d16      	cmp	r5, #22
   8b82a:	d85f      	bhi.n	8b8ec <_realloc_r+0xdc>
   8b82c:	2510      	movs	r5, #16
   8b82e:	462a      	mov	r2, r5
   8b830:	42ae      	cmp	r6, r5
   8b832:	d860      	bhi.n	8b8f6 <_realloc_r+0xe6>
   8b834:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8b838:	f1a4 0908 	sub.w	r9, r4, #8
   8b83c:	f021 0703 	bic.w	r7, r1, #3
   8b840:	4297      	cmp	r7, r2
   8b842:	f280 8086 	bge.w	8b952 <_realloc_r+0x142>
   8b846:	4bc9      	ldr	r3, [pc, #804]	; (8bb6c <_realloc_r+0x35c>)
   8b848:	eb09 0007 	add.w	r0, r9, r7
   8b84c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8b850:	4584      	cmp	ip, r0
   8b852:	f000 80b9 	beq.w	8b9c8 <_realloc_r+0x1b8>
   8b856:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8b85a:	f02c 0301 	bic.w	r3, ip, #1
   8b85e:	4403      	add	r3, r0
   8b860:	685b      	ldr	r3, [r3, #4]
   8b862:	07db      	lsls	r3, r3, #31
   8b864:	f100 808c 	bmi.w	8b980 <_realloc_r+0x170>
   8b868:	f02c 0c03 	bic.w	ip, ip, #3
   8b86c:	eb07 030c 	add.w	r3, r7, ip
   8b870:	4293      	cmp	r3, r2
   8b872:	f280 8115 	bge.w	8baa0 <_realloc_r+0x290>
   8b876:	07cb      	lsls	r3, r1, #31
   8b878:	d40f      	bmi.n	8b89a <_realloc_r+0x8a>
   8b87a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b87e:	eba9 0a03 	sub.w	sl, r9, r3
   8b882:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b886:	f023 0103 	bic.w	r1, r3, #3
   8b88a:	448c      	add	ip, r1
   8b88c:	44bc      	add	ip, r7
   8b88e:	4594      	cmp	ip, r2
   8b890:	da38      	bge.n	8b904 <_realloc_r+0xf4>
   8b892:	187b      	adds	r3, r7, r1
   8b894:	4293      	cmp	r3, r2
   8b896:	f280 810f 	bge.w	8bab8 <_realloc_r+0x2a8>
   8b89a:	4631      	mov	r1, r6
   8b89c:	4640      	mov	r0, r8
   8b89e:	f7ff f8c1 	bl	8aa24 <_malloc_r>
   8b8a2:	4606      	mov	r6, r0
   8b8a4:	b1e0      	cbz	r0, 8b8e0 <_realloc_r+0xd0>
   8b8a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b8aa:	f1a0 0208 	sub.w	r2, r0, #8
   8b8ae:	f023 0301 	bic.w	r3, r3, #1
   8b8b2:	444b      	add	r3, r9
   8b8b4:	4293      	cmp	r3, r2
   8b8b6:	f000 80f9 	beq.w	8baac <_realloc_r+0x29c>
   8b8ba:	1f3a      	subs	r2, r7, #4
   8b8bc:	2a24      	cmp	r2, #36	; 0x24
   8b8be:	f200 811c 	bhi.w	8bafa <_realloc_r+0x2ea>
   8b8c2:	2a13      	cmp	r2, #19
   8b8c4:	f200 80cd 	bhi.w	8ba62 <_realloc_r+0x252>
   8b8c8:	4603      	mov	r3, r0
   8b8ca:	4622      	mov	r2, r4
   8b8cc:	6811      	ldr	r1, [r2, #0]
   8b8ce:	6019      	str	r1, [r3, #0]
   8b8d0:	6851      	ldr	r1, [r2, #4]
   8b8d2:	6059      	str	r1, [r3, #4]
   8b8d4:	6892      	ldr	r2, [r2, #8]
   8b8d6:	609a      	str	r2, [r3, #8]
   8b8d8:	4621      	mov	r1, r4
   8b8da:	4640      	mov	r0, r8
   8b8dc:	f7fe fd70 	bl	8a3c0 <_free_r>
   8b8e0:	4640      	mov	r0, r8
   8b8e2:	f7ff fc13 	bl	8b10c <__malloc_unlock>
   8b8e6:	4630      	mov	r0, r6
   8b8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b8ec:	f025 0507 	bic.w	r5, r5, #7
   8b8f0:	2d00      	cmp	r5, #0
   8b8f2:	462a      	mov	r2, r5
   8b8f4:	da9c      	bge.n	8b830 <_realloc_r+0x20>
   8b8f6:	230c      	movs	r3, #12
   8b8f8:	2600      	movs	r6, #0
   8b8fa:	f8c8 3000 	str.w	r3, [r8]
   8b8fe:	4630      	mov	r0, r6
   8b900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b904:	4656      	mov	r6, sl
   8b906:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b90a:	60cb      	str	r3, [r1, #12]
   8b90c:	6099      	str	r1, [r3, #8]
   8b90e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b912:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b916:	1f3a      	subs	r2, r7, #4
   8b918:	2a24      	cmp	r2, #36	; 0x24
   8b91a:	60cb      	str	r3, [r1, #12]
   8b91c:	6099      	str	r1, [r3, #8]
   8b91e:	f200 8107 	bhi.w	8bb30 <_realloc_r+0x320>
   8b922:	2a13      	cmp	r2, #19
   8b924:	f240 8102 	bls.w	8bb2c <_realloc_r+0x31c>
   8b928:	6823      	ldr	r3, [r4, #0]
   8b92a:	2a1b      	cmp	r2, #27
   8b92c:	f8ca 3008 	str.w	r3, [sl, #8]
   8b930:	6863      	ldr	r3, [r4, #4]
   8b932:	f8ca 300c 	str.w	r3, [sl, #12]
   8b936:	f200 811b 	bhi.w	8bb70 <_realloc_r+0x360>
   8b93a:	3408      	adds	r4, #8
   8b93c:	f10a 0310 	add.w	r3, sl, #16
   8b940:	6822      	ldr	r2, [r4, #0]
   8b942:	4667      	mov	r7, ip
   8b944:	601a      	str	r2, [r3, #0]
   8b946:	6862      	ldr	r2, [r4, #4]
   8b948:	46d1      	mov	r9, sl
   8b94a:	605a      	str	r2, [r3, #4]
   8b94c:	68a2      	ldr	r2, [r4, #8]
   8b94e:	4634      	mov	r4, r6
   8b950:	609a      	str	r2, [r3, #8]
   8b952:	1b7b      	subs	r3, r7, r5
   8b954:	2b0f      	cmp	r3, #15
   8b956:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8b95a:	d821      	bhi.n	8b9a0 <_realloc_r+0x190>
   8b95c:	f002 0201 	and.w	r2, r2, #1
   8b960:	433a      	orrs	r2, r7
   8b962:	eb09 0107 	add.w	r1, r9, r7
   8b966:	f8c9 2004 	str.w	r2, [r9, #4]
   8b96a:	684b      	ldr	r3, [r1, #4]
   8b96c:	f043 0301 	orr.w	r3, r3, #1
   8b970:	604b      	str	r3, [r1, #4]
   8b972:	4626      	mov	r6, r4
   8b974:	4640      	mov	r0, r8
   8b976:	f7ff fbc9 	bl	8b10c <__malloc_unlock>
   8b97a:	4630      	mov	r0, r6
   8b97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b980:	07c9      	lsls	r1, r1, #31
   8b982:	d48a      	bmi.n	8b89a <_realloc_r+0x8a>
   8b984:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b988:	eba9 0a03 	sub.w	sl, r9, r3
   8b98c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b990:	f021 0103 	bic.w	r1, r1, #3
   8b994:	e77d      	b.n	8b892 <_realloc_r+0x82>
   8b996:	4611      	mov	r1, r2
   8b998:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b99c:	f7ff b842 	b.w	8aa24 <_malloc_r>
   8b9a0:	f002 0201 	and.w	r2, r2, #1
   8b9a4:	eb09 0105 	add.w	r1, r9, r5
   8b9a8:	f043 0301 	orr.w	r3, r3, #1
   8b9ac:	432a      	orrs	r2, r5
   8b9ae:	f8c9 2004 	str.w	r2, [r9, #4]
   8b9b2:	444f      	add	r7, r9
   8b9b4:	604b      	str	r3, [r1, #4]
   8b9b6:	687b      	ldr	r3, [r7, #4]
   8b9b8:	4640      	mov	r0, r8
   8b9ba:	f043 0301 	orr.w	r3, r3, #1
   8b9be:	3108      	adds	r1, #8
   8b9c0:	607b      	str	r3, [r7, #4]
   8b9c2:	f7fe fcfd 	bl	8a3c0 <_free_r>
   8b9c6:	e7d4      	b.n	8b972 <_realloc_r+0x162>
   8b9c8:	f8dc b004 	ldr.w	fp, [ip, #4]
   8b9cc:	f105 0010 	add.w	r0, r5, #16
   8b9d0:	f02b 0b03 	bic.w	fp, fp, #3
   8b9d4:	eb07 0c0b 	add.w	ip, r7, fp
   8b9d8:	4584      	cmp	ip, r0
   8b9da:	da4d      	bge.n	8ba78 <_realloc_r+0x268>
   8b9dc:	07c9      	lsls	r1, r1, #31
   8b9de:	f53f af5c 	bmi.w	8b89a <_realloc_r+0x8a>
   8b9e2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b9e6:	eba9 0a01 	sub.w	sl, r9, r1
   8b9ea:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b9ee:	f021 0103 	bic.w	r1, r1, #3
   8b9f2:	448b      	add	fp, r1
   8b9f4:	44bb      	add	fp, r7
   8b9f6:	4558      	cmp	r0, fp
   8b9f8:	f73f af4b 	bgt.w	8b892 <_realloc_r+0x82>
   8b9fc:	4656      	mov	r6, sl
   8b9fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   8ba02:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8ba06:	1f3a      	subs	r2, r7, #4
   8ba08:	2a24      	cmp	r2, #36	; 0x24
   8ba0a:	60c1      	str	r1, [r0, #12]
   8ba0c:	6088      	str	r0, [r1, #8]
   8ba0e:	f200 80bd 	bhi.w	8bb8c <_realloc_r+0x37c>
   8ba12:	2a13      	cmp	r2, #19
   8ba14:	f240 80b8 	bls.w	8bb88 <_realloc_r+0x378>
   8ba18:	6821      	ldr	r1, [r4, #0]
   8ba1a:	2a1b      	cmp	r2, #27
   8ba1c:	f8ca 1008 	str.w	r1, [sl, #8]
   8ba20:	6861      	ldr	r1, [r4, #4]
   8ba22:	f8ca 100c 	str.w	r1, [sl, #12]
   8ba26:	f200 80c1 	bhi.w	8bbac <_realloc_r+0x39c>
   8ba2a:	3408      	adds	r4, #8
   8ba2c:	f10a 0210 	add.w	r2, sl, #16
   8ba30:	6821      	ldr	r1, [r4, #0]
   8ba32:	6011      	str	r1, [r2, #0]
   8ba34:	6861      	ldr	r1, [r4, #4]
   8ba36:	6051      	str	r1, [r2, #4]
   8ba38:	68a1      	ldr	r1, [r4, #8]
   8ba3a:	6091      	str	r1, [r2, #8]
   8ba3c:	ebab 0205 	sub.w	r2, fp, r5
   8ba40:	eb0a 0105 	add.w	r1, sl, r5
   8ba44:	f042 0201 	orr.w	r2, r2, #1
   8ba48:	6099      	str	r1, [r3, #8]
   8ba4a:	604a      	str	r2, [r1, #4]
   8ba4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   8ba50:	4640      	mov	r0, r8
   8ba52:	f003 0301 	and.w	r3, r3, #1
   8ba56:	431d      	orrs	r5, r3
   8ba58:	f8ca 5004 	str.w	r5, [sl, #4]
   8ba5c:	f7ff fb56 	bl	8b10c <__malloc_unlock>
   8ba60:	e74d      	b.n	8b8fe <_realloc_r+0xee>
   8ba62:	6823      	ldr	r3, [r4, #0]
   8ba64:	2a1b      	cmp	r2, #27
   8ba66:	6003      	str	r3, [r0, #0]
   8ba68:	6863      	ldr	r3, [r4, #4]
   8ba6a:	6043      	str	r3, [r0, #4]
   8ba6c:	d849      	bhi.n	8bb02 <_realloc_r+0x2f2>
   8ba6e:	f104 0208 	add.w	r2, r4, #8
   8ba72:	f100 0308 	add.w	r3, r0, #8
   8ba76:	e729      	b.n	8b8cc <_realloc_r+0xbc>
   8ba78:	ebac 0205 	sub.w	r2, ip, r5
   8ba7c:	eb09 0105 	add.w	r1, r9, r5
   8ba80:	f042 0201 	orr.w	r2, r2, #1
   8ba84:	6099      	str	r1, [r3, #8]
   8ba86:	604a      	str	r2, [r1, #4]
   8ba88:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8ba8c:	4640      	mov	r0, r8
   8ba8e:	f003 0301 	and.w	r3, r3, #1
   8ba92:	431d      	orrs	r5, r3
   8ba94:	f844 5c04 	str.w	r5, [r4, #-4]
   8ba98:	f7ff fb38 	bl	8b10c <__malloc_unlock>
   8ba9c:	4626      	mov	r6, r4
   8ba9e:	e72e      	b.n	8b8fe <_realloc_r+0xee>
   8baa0:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8baa4:	461f      	mov	r7, r3
   8baa6:	60ca      	str	r2, [r1, #12]
   8baa8:	6091      	str	r1, [r2, #8]
   8baaa:	e752      	b.n	8b952 <_realloc_r+0x142>
   8baac:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bab0:	f023 0303 	bic.w	r3, r3, #3
   8bab4:	441f      	add	r7, r3
   8bab6:	e74c      	b.n	8b952 <_realloc_r+0x142>
   8bab8:	4656      	mov	r6, sl
   8baba:	f8da 100c 	ldr.w	r1, [sl, #12]
   8babe:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bac2:	1f3a      	subs	r2, r7, #4
   8bac4:	2a24      	cmp	r2, #36	; 0x24
   8bac6:	60c1      	str	r1, [r0, #12]
   8bac8:	6088      	str	r0, [r1, #8]
   8baca:	d827      	bhi.n	8bb1c <_realloc_r+0x30c>
   8bacc:	2a13      	cmp	r2, #19
   8bace:	d923      	bls.n	8bb18 <_realloc_r+0x308>
   8bad0:	6821      	ldr	r1, [r4, #0]
   8bad2:	2a1b      	cmp	r2, #27
   8bad4:	f8ca 1008 	str.w	r1, [sl, #8]
   8bad8:	6861      	ldr	r1, [r4, #4]
   8bada:	f8ca 100c 	str.w	r1, [sl, #12]
   8bade:	d82f      	bhi.n	8bb40 <_realloc_r+0x330>
   8bae0:	3408      	adds	r4, #8
   8bae2:	f10a 0210 	add.w	r2, sl, #16
   8bae6:	6821      	ldr	r1, [r4, #0]
   8bae8:	461f      	mov	r7, r3
   8baea:	6011      	str	r1, [r2, #0]
   8baec:	6863      	ldr	r3, [r4, #4]
   8baee:	46d1      	mov	r9, sl
   8baf0:	6053      	str	r3, [r2, #4]
   8baf2:	68a3      	ldr	r3, [r4, #8]
   8baf4:	4634      	mov	r4, r6
   8baf6:	6093      	str	r3, [r2, #8]
   8baf8:	e72b      	b.n	8b952 <_realloc_r+0x142>
   8bafa:	4621      	mov	r1, r4
   8bafc:	f7ff fa96 	bl	8b02c <memmove>
   8bb00:	e6ea      	b.n	8b8d8 <_realloc_r+0xc8>
   8bb02:	68a3      	ldr	r3, [r4, #8]
   8bb04:	2a24      	cmp	r2, #36	; 0x24
   8bb06:	6083      	str	r3, [r0, #8]
   8bb08:	68e3      	ldr	r3, [r4, #12]
   8bb0a:	60c3      	str	r3, [r0, #12]
   8bb0c:	d024      	beq.n	8bb58 <_realloc_r+0x348>
   8bb0e:	f104 0210 	add.w	r2, r4, #16
   8bb12:	f100 0310 	add.w	r3, r0, #16
   8bb16:	e6d9      	b.n	8b8cc <_realloc_r+0xbc>
   8bb18:	4632      	mov	r2, r6
   8bb1a:	e7e4      	b.n	8bae6 <_realloc_r+0x2d6>
   8bb1c:	4621      	mov	r1, r4
   8bb1e:	4630      	mov	r0, r6
   8bb20:	461f      	mov	r7, r3
   8bb22:	46d1      	mov	r9, sl
   8bb24:	f7ff fa82 	bl	8b02c <memmove>
   8bb28:	4634      	mov	r4, r6
   8bb2a:	e712      	b.n	8b952 <_realloc_r+0x142>
   8bb2c:	4633      	mov	r3, r6
   8bb2e:	e707      	b.n	8b940 <_realloc_r+0x130>
   8bb30:	4621      	mov	r1, r4
   8bb32:	4630      	mov	r0, r6
   8bb34:	4667      	mov	r7, ip
   8bb36:	46d1      	mov	r9, sl
   8bb38:	f7ff fa78 	bl	8b02c <memmove>
   8bb3c:	4634      	mov	r4, r6
   8bb3e:	e708      	b.n	8b952 <_realloc_r+0x142>
   8bb40:	68a1      	ldr	r1, [r4, #8]
   8bb42:	2a24      	cmp	r2, #36	; 0x24
   8bb44:	f8ca 1010 	str.w	r1, [sl, #16]
   8bb48:	68e1      	ldr	r1, [r4, #12]
   8bb4a:	f8ca 1014 	str.w	r1, [sl, #20]
   8bb4e:	d023      	beq.n	8bb98 <_realloc_r+0x388>
   8bb50:	3410      	adds	r4, #16
   8bb52:	f10a 0218 	add.w	r2, sl, #24
   8bb56:	e7c6      	b.n	8bae6 <_realloc_r+0x2d6>
   8bb58:	6923      	ldr	r3, [r4, #16]
   8bb5a:	f104 0218 	add.w	r2, r4, #24
   8bb5e:	6103      	str	r3, [r0, #16]
   8bb60:	6961      	ldr	r1, [r4, #20]
   8bb62:	f100 0318 	add.w	r3, r0, #24
   8bb66:	6141      	str	r1, [r0, #20]
   8bb68:	e6b0      	b.n	8b8cc <_realloc_r+0xbc>
   8bb6a:	bf00      	nop
   8bb6c:	20000cb0 	.word	0x20000cb0
   8bb70:	68a3      	ldr	r3, [r4, #8]
   8bb72:	2a24      	cmp	r2, #36	; 0x24
   8bb74:	f8ca 3010 	str.w	r3, [sl, #16]
   8bb78:	68e3      	ldr	r3, [r4, #12]
   8bb7a:	f8ca 3014 	str.w	r3, [sl, #20]
   8bb7e:	d021      	beq.n	8bbc4 <_realloc_r+0x3b4>
   8bb80:	3410      	adds	r4, #16
   8bb82:	f10a 0318 	add.w	r3, sl, #24
   8bb86:	e6db      	b.n	8b940 <_realloc_r+0x130>
   8bb88:	4632      	mov	r2, r6
   8bb8a:	e751      	b.n	8ba30 <_realloc_r+0x220>
   8bb8c:	4621      	mov	r1, r4
   8bb8e:	4630      	mov	r0, r6
   8bb90:	f7ff fa4c 	bl	8b02c <memmove>
   8bb94:	4b15      	ldr	r3, [pc, #84]	; (8bbec <_realloc_r+0x3dc>)
   8bb96:	e751      	b.n	8ba3c <_realloc_r+0x22c>
   8bb98:	6921      	ldr	r1, [r4, #16]
   8bb9a:	f10a 0220 	add.w	r2, sl, #32
   8bb9e:	f8ca 1018 	str.w	r1, [sl, #24]
   8bba2:	6961      	ldr	r1, [r4, #20]
   8bba4:	3418      	adds	r4, #24
   8bba6:	f8ca 101c 	str.w	r1, [sl, #28]
   8bbaa:	e79c      	b.n	8bae6 <_realloc_r+0x2d6>
   8bbac:	68a1      	ldr	r1, [r4, #8]
   8bbae:	2a24      	cmp	r2, #36	; 0x24
   8bbb0:	f8ca 1010 	str.w	r1, [sl, #16]
   8bbb4:	68e1      	ldr	r1, [r4, #12]
   8bbb6:	f8ca 1014 	str.w	r1, [sl, #20]
   8bbba:	d00d      	beq.n	8bbd8 <_realloc_r+0x3c8>
   8bbbc:	3410      	adds	r4, #16
   8bbbe:	f10a 0218 	add.w	r2, sl, #24
   8bbc2:	e735      	b.n	8ba30 <_realloc_r+0x220>
   8bbc4:	6922      	ldr	r2, [r4, #16]
   8bbc6:	f10a 0320 	add.w	r3, sl, #32
   8bbca:	f8ca 2018 	str.w	r2, [sl, #24]
   8bbce:	6962      	ldr	r2, [r4, #20]
   8bbd0:	3418      	adds	r4, #24
   8bbd2:	f8ca 201c 	str.w	r2, [sl, #28]
   8bbd6:	e6b3      	b.n	8b940 <_realloc_r+0x130>
   8bbd8:	6921      	ldr	r1, [r4, #16]
   8bbda:	f10a 0220 	add.w	r2, sl, #32
   8bbde:	f8ca 1018 	str.w	r1, [sl, #24]
   8bbe2:	6961      	ldr	r1, [r4, #20]
   8bbe4:	3418      	adds	r4, #24
   8bbe6:	f8ca 101c 	str.w	r1, [sl, #28]
   8bbea:	e721      	b.n	8ba30 <_realloc_r+0x220>
   8bbec:	20000cb0 	.word	0x20000cb0

0008bbf0 <frexp>:
   8bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bbf2:	4617      	mov	r7, r2
   8bbf4:	2200      	movs	r2, #0
   8bbf6:	f8df c060 	ldr.w	ip, [pc, #96]	; 8bc58 <frexp+0x68>
   8bbfa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bbfe:	4563      	cmp	r3, ip
   8bc00:	4604      	mov	r4, r0
   8bc02:	460d      	mov	r5, r1
   8bc04:	603a      	str	r2, [r7, #0]
   8bc06:	dc22      	bgt.n	8bc4e <frexp+0x5e>
   8bc08:	4684      	mov	ip, r0
   8bc0a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8bc0e:	d01e      	beq.n	8bc4e <frexp+0x5e>
   8bc10:	f8df c048 	ldr.w	ip, [pc, #72]	; 8bc5c <frexp+0x6c>
   8bc14:	460e      	mov	r6, r1
   8bc16:	ea01 0c0c 	and.w	ip, r1, ip
   8bc1a:	f1bc 0f00 	cmp.w	ip, #0
   8bc1e:	d109      	bne.n	8bc34 <frexp+0x44>
   8bc20:	2200      	movs	r2, #0
   8bc22:	4b0c      	ldr	r3, [pc, #48]	; (8bc54 <frexp+0x64>)
   8bc24:	f000 fd0e 	bl	8c644 <__aeabi_dmul>
   8bc28:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8bc2c:	4604      	mov	r4, r0
   8bc2e:	460e      	mov	r6, r1
   8bc30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bc34:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8bc38:	151b      	asrs	r3, r3, #20
   8bc3a:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8bc3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8bc42:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8bc46:	4413      	add	r3, r2
   8bc48:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8bc4c:	603b      	str	r3, [r7, #0]
   8bc4e:	4620      	mov	r0, r4
   8bc50:	4629      	mov	r1, r5
   8bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc54:	43500000 	.word	0x43500000
   8bc58:	7fefffff 	.word	0x7fefffff
   8bc5c:	7ff00000 	.word	0x7ff00000

0008bc60 <_sbrk_r>:
   8bc60:	2200      	movs	r2, #0
   8bc62:	b538      	push	{r3, r4, r5, lr}
   8bc64:	4d06      	ldr	r5, [pc, #24]	; (8bc80 <_sbrk_r+0x20>)
   8bc66:	4604      	mov	r4, r0
   8bc68:	4608      	mov	r0, r1
   8bc6a:	602a      	str	r2, [r5, #0]
   8bc6c:	f7f9 feb0 	bl	859d0 <_sbrk>
   8bc70:	1c43      	adds	r3, r0, #1
   8bc72:	d000      	beq.n	8bc76 <_sbrk_r+0x16>
   8bc74:	bd38      	pop	{r3, r4, r5, pc}
   8bc76:	682b      	ldr	r3, [r5, #0]
   8bc78:	2b00      	cmp	r3, #0
   8bc7a:	d0fb      	beq.n	8bc74 <_sbrk_r+0x14>
   8bc7c:	6023      	str	r3, [r4, #0]
   8bc7e:	bd38      	pop	{r3, r4, r5, pc}
   8bc80:	20002bcc 	.word	0x20002bcc

0008bc84 <__sread>:
   8bc84:	b510      	push	{r4, lr}
   8bc86:	460c      	mov	r4, r1
   8bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bc8c:	f000 fab4 	bl	8c1f8 <_read_r>
   8bc90:	2800      	cmp	r0, #0
   8bc92:	db03      	blt.n	8bc9c <__sread+0x18>
   8bc94:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bc96:	4403      	add	r3, r0
   8bc98:	6523      	str	r3, [r4, #80]	; 0x50
   8bc9a:	bd10      	pop	{r4, pc}
   8bc9c:	89a3      	ldrh	r3, [r4, #12]
   8bc9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bca2:	81a3      	strh	r3, [r4, #12]
   8bca4:	bd10      	pop	{r4, pc}
   8bca6:	bf00      	nop

0008bca8 <__swrite>:
   8bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bcac:	460c      	mov	r4, r1
   8bcae:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bcb2:	461f      	mov	r7, r3
   8bcb4:	05cb      	lsls	r3, r1, #23
   8bcb6:	4616      	mov	r6, r2
   8bcb8:	4605      	mov	r5, r0
   8bcba:	d40b      	bmi.n	8bcd4 <__swrite+0x2c>
   8bcbc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bcc0:	81a1      	strh	r1, [r4, #12]
   8bcc2:	463b      	mov	r3, r7
   8bcc4:	4632      	mov	r2, r6
   8bcc6:	4628      	mov	r0, r5
   8bcc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bcd0:	f000 b91e 	b.w	8bf10 <_write_r>
   8bcd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bcd8:	2302      	movs	r3, #2
   8bcda:	2200      	movs	r2, #0
   8bcdc:	f000 fa76 	bl	8c1cc <_lseek_r>
   8bce0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bce4:	e7ea      	b.n	8bcbc <__swrite+0x14>
   8bce6:	bf00      	nop

0008bce8 <__sseek>:
   8bce8:	b510      	push	{r4, lr}
   8bcea:	460c      	mov	r4, r1
   8bcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bcf0:	f000 fa6c 	bl	8c1cc <_lseek_r>
   8bcf4:	89a3      	ldrh	r3, [r4, #12]
   8bcf6:	1c42      	adds	r2, r0, #1
   8bcf8:	bf0e      	itee	eq
   8bcfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bcfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bd02:	6520      	strne	r0, [r4, #80]	; 0x50
   8bd04:	81a3      	strh	r3, [r4, #12]
   8bd06:	bd10      	pop	{r4, pc}

0008bd08 <__sclose>:
   8bd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bd0c:	f000 b9aa 	b.w	8c064 <_close_r>

0008bd10 <__ssprint_r>:
   8bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd14:	6893      	ldr	r3, [r2, #8]
   8bd16:	4691      	mov	r9, r2
   8bd18:	b083      	sub	sp, #12
   8bd1a:	2b00      	cmp	r3, #0
   8bd1c:	d06d      	beq.n	8bdfa <__ssprint_r+0xea>
   8bd1e:	6817      	ldr	r7, [r2, #0]
   8bd20:	4680      	mov	r8, r0
   8bd22:	460c      	mov	r4, r1
   8bd24:	6808      	ldr	r0, [r1, #0]
   8bd26:	688d      	ldr	r5, [r1, #8]
   8bd28:	3708      	adds	r7, #8
   8bd2a:	e043      	b.n	8bdb4 <__ssprint_r+0xa4>
   8bd2c:	89a3      	ldrh	r3, [r4, #12]
   8bd2e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bd32:	d02e      	beq.n	8bd92 <__ssprint_r+0x82>
   8bd34:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8bd38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bd3c:	eba0 0a01 	sub.w	sl, r0, r1
   8bd40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bd44:	eb0a 0006 	add.w	r0, sl, r6
   8bd48:	106d      	asrs	r5, r5, #1
   8bd4a:	3001      	adds	r0, #1
   8bd4c:	42a8      	cmp	r0, r5
   8bd4e:	462a      	mov	r2, r5
   8bd50:	bf84      	itt	hi
   8bd52:	4605      	movhi	r5, r0
   8bd54:	462a      	movhi	r2, r5
   8bd56:	055b      	lsls	r3, r3, #21
   8bd58:	d536      	bpl.n	8bdc8 <__ssprint_r+0xb8>
   8bd5a:	4611      	mov	r1, r2
   8bd5c:	4640      	mov	r0, r8
   8bd5e:	f7fe fe61 	bl	8aa24 <_malloc_r>
   8bd62:	2800      	cmp	r0, #0
   8bd64:	d03a      	beq.n	8bddc <__ssprint_r+0xcc>
   8bd66:	4652      	mov	r2, sl
   8bd68:	6921      	ldr	r1, [r4, #16]
   8bd6a:	9001      	str	r0, [sp, #4]
   8bd6c:	f7fa f9c4 	bl	860f8 <memcpy>
   8bd70:	89a2      	ldrh	r2, [r4, #12]
   8bd72:	9b01      	ldr	r3, [sp, #4]
   8bd74:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bd78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bd7c:	81a2      	strh	r2, [r4, #12]
   8bd7e:	eba5 020a 	sub.w	r2, r5, sl
   8bd82:	eb03 000a 	add.w	r0, r3, sl
   8bd86:	6165      	str	r5, [r4, #20]
   8bd88:	46b2      	mov	sl, r6
   8bd8a:	4635      	mov	r5, r6
   8bd8c:	6123      	str	r3, [r4, #16]
   8bd8e:	6020      	str	r0, [r4, #0]
   8bd90:	60a2      	str	r2, [r4, #8]
   8bd92:	4659      	mov	r1, fp
   8bd94:	4652      	mov	r2, sl
   8bd96:	f7ff f949 	bl	8b02c <memmove>
   8bd9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8bd9e:	68a1      	ldr	r1, [r4, #8]
   8bda0:	6820      	ldr	r0, [r4, #0]
   8bda2:	1b4d      	subs	r5, r1, r5
   8bda4:	4450      	add	r0, sl
   8bda6:	1b9e      	subs	r6, r3, r6
   8bda8:	60a5      	str	r5, [r4, #8]
   8bdaa:	6020      	str	r0, [r4, #0]
   8bdac:	f8c9 6008 	str.w	r6, [r9, #8]
   8bdb0:	b31e      	cbz	r6, 8bdfa <__ssprint_r+0xea>
   8bdb2:	3708      	adds	r7, #8
   8bdb4:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8bdb8:	2e00      	cmp	r6, #0
   8bdba:	d0fa      	beq.n	8bdb2 <__ssprint_r+0xa2>
   8bdbc:	42b5      	cmp	r5, r6
   8bdbe:	46aa      	mov	sl, r5
   8bdc0:	d9b4      	bls.n	8bd2c <__ssprint_r+0x1c>
   8bdc2:	4635      	mov	r5, r6
   8bdc4:	46b2      	mov	sl, r6
   8bdc6:	e7e4      	b.n	8bd92 <__ssprint_r+0x82>
   8bdc8:	4640      	mov	r0, r8
   8bdca:	f7ff fd21 	bl	8b810 <_realloc_r>
   8bdce:	4603      	mov	r3, r0
   8bdd0:	2800      	cmp	r0, #0
   8bdd2:	d1d4      	bne.n	8bd7e <__ssprint_r+0x6e>
   8bdd4:	4640      	mov	r0, r8
   8bdd6:	6921      	ldr	r1, [r4, #16]
   8bdd8:	f7fe faf2 	bl	8a3c0 <_free_r>
   8bddc:	230c      	movs	r3, #12
   8bdde:	2200      	movs	r2, #0
   8bde0:	f04f 30ff 	mov.w	r0, #4294967295
   8bde4:	f8c8 3000 	str.w	r3, [r8]
   8bde8:	89a3      	ldrh	r3, [r4, #12]
   8bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bdee:	81a3      	strh	r3, [r4, #12]
   8bdf0:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8bdf4:	b003      	add	sp, #12
   8bdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bdfa:	2000      	movs	r0, #0
   8bdfc:	f8c9 0004 	str.w	r0, [r9, #4]
   8be00:	b003      	add	sp, #12
   8be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be06:	bf00      	nop

0008be08 <__swbuf_r>:
   8be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8be0a:	460d      	mov	r5, r1
   8be0c:	4614      	mov	r4, r2
   8be0e:	4606      	mov	r6, r0
   8be10:	b110      	cbz	r0, 8be18 <__swbuf_r+0x10>
   8be12:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8be14:	2b00      	cmp	r3, #0
   8be16:	d043      	beq.n	8bea0 <__swbuf_r+0x98>
   8be18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8be1c:	69a3      	ldr	r3, [r4, #24]
   8be1e:	0717      	lsls	r7, r2, #28
   8be20:	60a3      	str	r3, [r4, #8]
   8be22:	b290      	uxth	r0, r2
   8be24:	d51b      	bpl.n	8be5e <__swbuf_r+0x56>
   8be26:	6923      	ldr	r3, [r4, #16]
   8be28:	b1cb      	cbz	r3, 8be5e <__swbuf_r+0x56>
   8be2a:	b2ed      	uxtb	r5, r5
   8be2c:	0481      	lsls	r1, r0, #18
   8be2e:	462f      	mov	r7, r5
   8be30:	d522      	bpl.n	8be78 <__swbuf_r+0x70>
   8be32:	6822      	ldr	r2, [r4, #0]
   8be34:	6961      	ldr	r1, [r4, #20]
   8be36:	1ad3      	subs	r3, r2, r3
   8be38:	4299      	cmp	r1, r3
   8be3a:	dd29      	ble.n	8be90 <__swbuf_r+0x88>
   8be3c:	3301      	adds	r3, #1
   8be3e:	68a1      	ldr	r1, [r4, #8]
   8be40:	1c50      	adds	r0, r2, #1
   8be42:	3901      	subs	r1, #1
   8be44:	60a1      	str	r1, [r4, #8]
   8be46:	6020      	str	r0, [r4, #0]
   8be48:	7015      	strb	r5, [r2, #0]
   8be4a:	6962      	ldr	r2, [r4, #20]
   8be4c:	429a      	cmp	r2, r3
   8be4e:	d02a      	beq.n	8bea6 <__swbuf_r+0x9e>
   8be50:	89a3      	ldrh	r3, [r4, #12]
   8be52:	07db      	lsls	r3, r3, #31
   8be54:	d501      	bpl.n	8be5a <__swbuf_r+0x52>
   8be56:	2d0a      	cmp	r5, #10
   8be58:	d025      	beq.n	8bea6 <__swbuf_r+0x9e>
   8be5a:	4638      	mov	r0, r7
   8be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8be5e:	4621      	mov	r1, r4
   8be60:	4630      	mov	r0, r6
   8be62:	f7fd f829 	bl	88eb8 <__swsetup_r>
   8be66:	bb20      	cbnz	r0, 8beb2 <__swbuf_r+0xaa>
   8be68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8be6c:	b2ed      	uxtb	r5, r5
   8be6e:	b290      	uxth	r0, r2
   8be70:	0481      	lsls	r1, r0, #18
   8be72:	462f      	mov	r7, r5
   8be74:	6923      	ldr	r3, [r4, #16]
   8be76:	d4dc      	bmi.n	8be32 <__swbuf_r+0x2a>
   8be78:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8be7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8be7e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8be82:	81a2      	strh	r2, [r4, #12]
   8be84:	6822      	ldr	r2, [r4, #0]
   8be86:	6661      	str	r1, [r4, #100]	; 0x64
   8be88:	6961      	ldr	r1, [r4, #20]
   8be8a:	1ad3      	subs	r3, r2, r3
   8be8c:	4299      	cmp	r1, r3
   8be8e:	dcd5      	bgt.n	8be3c <__swbuf_r+0x34>
   8be90:	4621      	mov	r1, r4
   8be92:	4630      	mov	r0, r6
   8be94:	f7fe f914 	bl	8a0c0 <_fflush_r>
   8be98:	b958      	cbnz	r0, 8beb2 <__swbuf_r+0xaa>
   8be9a:	2301      	movs	r3, #1
   8be9c:	6822      	ldr	r2, [r4, #0]
   8be9e:	e7ce      	b.n	8be3e <__swbuf_r+0x36>
   8bea0:	f7fe f96a 	bl	8a178 <__sinit>
   8bea4:	e7b8      	b.n	8be18 <__swbuf_r+0x10>
   8bea6:	4621      	mov	r1, r4
   8bea8:	4630      	mov	r0, r6
   8beaa:	f7fe f909 	bl	8a0c0 <_fflush_r>
   8beae:	2800      	cmp	r0, #0
   8beb0:	d0d3      	beq.n	8be5a <__swbuf_r+0x52>
   8beb2:	f04f 37ff 	mov.w	r7, #4294967295
   8beb6:	e7d0      	b.n	8be5a <__swbuf_r+0x52>

0008beb8 <_wcrtomb_r>:
   8beb8:	b570      	push	{r4, r5, r6, lr}
   8beba:	4606      	mov	r6, r0
   8bebc:	461d      	mov	r5, r3
   8bebe:	b084      	sub	sp, #16
   8bec0:	b139      	cbz	r1, 8bed2 <_wcrtomb_r+0x1a>
   8bec2:	4c0b      	ldr	r4, [pc, #44]	; (8bef0 <_wcrtomb_r+0x38>)
   8bec4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8bec8:	47a0      	blx	r4
   8beca:	1c43      	adds	r3, r0, #1
   8becc:	d00a      	beq.n	8bee4 <_wcrtomb_r+0x2c>
   8bece:	b004      	add	sp, #16
   8bed0:	bd70      	pop	{r4, r5, r6, pc}
   8bed2:	460c      	mov	r4, r1
   8bed4:	4906      	ldr	r1, [pc, #24]	; (8bef0 <_wcrtomb_r+0x38>)
   8bed6:	4622      	mov	r2, r4
   8bed8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8bedc:	a901      	add	r1, sp, #4
   8bede:	47a0      	blx	r4
   8bee0:	1c43      	adds	r3, r0, #1
   8bee2:	d1f4      	bne.n	8bece <_wcrtomb_r+0x16>
   8bee4:	2200      	movs	r2, #0
   8bee6:	238a      	movs	r3, #138	; 0x8a
   8bee8:	602a      	str	r2, [r5, #0]
   8beea:	6033      	str	r3, [r6, #0]
   8beec:	b004      	add	sp, #16
   8beee:	bd70      	pop	{r4, r5, r6, pc}
   8bef0:	20000b44 	.word	0x20000b44

0008bef4 <__ascii_wctomb>:
   8bef4:	4603      	mov	r3, r0
   8bef6:	b149      	cbz	r1, 8bf0c <__ascii_wctomb+0x18>
   8bef8:	2aff      	cmp	r2, #255	; 0xff
   8befa:	d802      	bhi.n	8bf02 <__ascii_wctomb+0xe>
   8befc:	2001      	movs	r0, #1
   8befe:	700a      	strb	r2, [r1, #0]
   8bf00:	4770      	bx	lr
   8bf02:	228a      	movs	r2, #138	; 0x8a
   8bf04:	f04f 30ff 	mov.w	r0, #4294967295
   8bf08:	601a      	str	r2, [r3, #0]
   8bf0a:	4770      	bx	lr
   8bf0c:	4608      	mov	r0, r1
   8bf0e:	4770      	bx	lr

0008bf10 <_write_r>:
   8bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bf12:	460f      	mov	r7, r1
   8bf14:	2600      	movs	r6, #0
   8bf16:	4d08      	ldr	r5, [pc, #32]	; (8bf38 <_write_r+0x28>)
   8bf18:	4611      	mov	r1, r2
   8bf1a:	4604      	mov	r4, r0
   8bf1c:	461a      	mov	r2, r3
   8bf1e:	4638      	mov	r0, r7
   8bf20:	602e      	str	r6, [r5, #0]
   8bf22:	f7f7 fddf 	bl	83ae4 <_write>
   8bf26:	1c43      	adds	r3, r0, #1
   8bf28:	d000      	beq.n	8bf2c <_write_r+0x1c>
   8bf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bf2c:	682b      	ldr	r3, [r5, #0]
   8bf2e:	2b00      	cmp	r3, #0
   8bf30:	d0fb      	beq.n	8bf2a <_write_r+0x1a>
   8bf32:	6023      	str	r3, [r4, #0]
   8bf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bf36:	bf00      	nop
   8bf38:	20002bcc 	.word	0x20002bcc

0008bf3c <__register_exitproc>:
   8bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bf40:	f8df a080 	ldr.w	sl, [pc, #128]	; 8bfc4 <__register_exitproc+0x88>
   8bf44:	4606      	mov	r6, r0
   8bf46:	f8da 0000 	ldr.w	r0, [sl]
   8bf4a:	4698      	mov	r8, r3
   8bf4c:	460f      	mov	r7, r1
   8bf4e:	4691      	mov	r9, r2
   8bf50:	f7fe fce4 	bl	8a91c <__retarget_lock_acquire_recursive>
   8bf54:	4b1a      	ldr	r3, [pc, #104]	; (8bfc0 <__register_exitproc+0x84>)
   8bf56:	681b      	ldr	r3, [r3, #0]
   8bf58:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8bf5c:	b324      	cbz	r4, 8bfa8 <__register_exitproc+0x6c>
   8bf5e:	6865      	ldr	r5, [r4, #4]
   8bf60:	2d1f      	cmp	r5, #31
   8bf62:	dc26      	bgt.n	8bfb2 <__register_exitproc+0x76>
   8bf64:	b95e      	cbnz	r6, 8bf7e <__register_exitproc+0x42>
   8bf66:	1c6b      	adds	r3, r5, #1
   8bf68:	3502      	adds	r5, #2
   8bf6a:	f8da 0000 	ldr.w	r0, [sl]
   8bf6e:	6063      	str	r3, [r4, #4]
   8bf70:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8bf74:	f7fe fcd4 	bl	8a920 <__retarget_lock_release_recursive>
   8bf78:	2000      	movs	r0, #0
   8bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bf7e:	2301      	movs	r3, #1
   8bf80:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8bf84:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8bf88:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8bf8c:	40ab      	lsls	r3, r5
   8bf8e:	431a      	orrs	r2, r3
   8bf90:	2e02      	cmp	r6, #2
   8bf92:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8bf96:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8bf9a:	d1e4      	bne.n	8bf66 <__register_exitproc+0x2a>
   8bf9c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8bfa0:	4313      	orrs	r3, r2
   8bfa2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8bfa6:	e7de      	b.n	8bf66 <__register_exitproc+0x2a>
   8bfa8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8bfac:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8bfb0:	e7d5      	b.n	8bf5e <__register_exitproc+0x22>
   8bfb2:	f8da 0000 	ldr.w	r0, [sl]
   8bfb6:	f7fe fcb3 	bl	8a920 <__retarget_lock_release_recursive>
   8bfba:	f04f 30ff 	mov.w	r0, #4294967295
   8bfbe:	e7dc      	b.n	8bf7a <__register_exitproc+0x3e>
   8bfc0:	0008cdcc 	.word	0x0008cdcc
   8bfc4:	20000b40 	.word	0x20000b40

0008bfc8 <__assert_func>:
   8bfc8:	4614      	mov	r4, r2
   8bfca:	b500      	push	{lr}
   8bfcc:	4d09      	ldr	r5, [pc, #36]	; (8bff4 <__assert_func+0x2c>)
   8bfce:	461a      	mov	r2, r3
   8bfd0:	4603      	mov	r3, r0
   8bfd2:	6828      	ldr	r0, [r5, #0]
   8bfd4:	b085      	sub	sp, #20
   8bfd6:	68c0      	ldr	r0, [r0, #12]
   8bfd8:	b144      	cbz	r4, 8bfec <__assert_func+0x24>
   8bfda:	4d07      	ldr	r5, [pc, #28]	; (8bff8 <__assert_func+0x30>)
   8bfdc:	9100      	str	r1, [sp, #0]
   8bfde:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8bfe2:	4906      	ldr	r1, [pc, #24]	; (8bffc <__assert_func+0x34>)
   8bfe4:	f000 f8b6 	bl	8c154 <fiprintf>
   8bfe8:	f000 f91c 	bl	8c224 <abort>
   8bfec:	4d04      	ldr	r5, [pc, #16]	; (8c000 <__assert_func+0x38>)
   8bfee:	462c      	mov	r4, r5
   8bff0:	e7f4      	b.n	8bfdc <__assert_func+0x14>
   8bff2:	bf00      	nop
   8bff4:	20000710 	.word	0x20000710
   8bff8:	0008d084 	.word	0x0008d084
   8bffc:	0008d094 	.word	0x0008d094
   8c000:	0008cd20 	.word	0x0008cd20

0008c004 <_calloc_r>:
   8c004:	b510      	push	{r4, lr}
   8c006:	fb02 f101 	mul.w	r1, r2, r1
   8c00a:	f7fe fd0b 	bl	8aa24 <_malloc_r>
   8c00e:	4604      	mov	r4, r0
   8c010:	b168      	cbz	r0, 8c02e <_calloc_r+0x2a>
   8c012:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c016:	f022 0203 	bic.w	r2, r2, #3
   8c01a:	3a04      	subs	r2, #4
   8c01c:	2a24      	cmp	r2, #36	; 0x24
   8c01e:	d818      	bhi.n	8c052 <_calloc_r+0x4e>
   8c020:	2a13      	cmp	r2, #19
   8c022:	d806      	bhi.n	8c032 <_calloc_r+0x2e>
   8c024:	4602      	mov	r2, r0
   8c026:	2300      	movs	r3, #0
   8c028:	e9c2 3300 	strd	r3, r3, [r2]
   8c02c:	6093      	str	r3, [r2, #8]
   8c02e:	4620      	mov	r0, r4
   8c030:	bd10      	pop	{r4, pc}
   8c032:	2300      	movs	r3, #0
   8c034:	2a1b      	cmp	r2, #27
   8c036:	e9c0 3300 	strd	r3, r3, [r0]
   8c03a:	d90f      	bls.n	8c05c <_calloc_r+0x58>
   8c03c:	2a24      	cmp	r2, #36	; 0x24
   8c03e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c042:	bf0a      	itet	eq
   8c044:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c048:	f100 0210 	addne.w	r2, r0, #16
   8c04c:	f100 0218 	addeq.w	r2, r0, #24
   8c050:	e7e9      	b.n	8c026 <_calloc_r+0x22>
   8c052:	2100      	movs	r1, #0
   8c054:	f7fa f8c6 	bl	861e4 <memset>
   8c058:	4620      	mov	r0, r4
   8c05a:	bd10      	pop	{r4, pc}
   8c05c:	f100 0208 	add.w	r2, r0, #8
   8c060:	e7e1      	b.n	8c026 <_calloc_r+0x22>
   8c062:	bf00      	nop

0008c064 <_close_r>:
   8c064:	2200      	movs	r2, #0
   8c066:	b538      	push	{r3, r4, r5, lr}
   8c068:	4d06      	ldr	r5, [pc, #24]	; (8c084 <_close_r+0x20>)
   8c06a:	4604      	mov	r4, r0
   8c06c:	4608      	mov	r0, r1
   8c06e:	602a      	str	r2, [r5, #0]
   8c070:	f7f9 fcc8 	bl	85a04 <_close>
   8c074:	1c43      	adds	r3, r0, #1
   8c076:	d000      	beq.n	8c07a <_close_r+0x16>
   8c078:	bd38      	pop	{r3, r4, r5, pc}
   8c07a:	682b      	ldr	r3, [r5, #0]
   8c07c:	2b00      	cmp	r3, #0
   8c07e:	d0fb      	beq.n	8c078 <_close_r+0x14>
   8c080:	6023      	str	r3, [r4, #0]
   8c082:	bd38      	pop	{r3, r4, r5, pc}
   8c084:	20002bcc 	.word	0x20002bcc

0008c088 <_fclose_r>:
   8c088:	b570      	push	{r4, r5, r6, lr}
   8c08a:	2900      	cmp	r1, #0
   8c08c:	d04b      	beq.n	8c126 <_fclose_r+0x9e>
   8c08e:	460c      	mov	r4, r1
   8c090:	4605      	mov	r5, r0
   8c092:	b110      	cbz	r0, 8c09a <_fclose_r+0x12>
   8c094:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c096:	2b00      	cmp	r3, #0
   8c098:	d048      	beq.n	8c12c <_fclose_r+0xa4>
   8c09a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c09c:	07d8      	lsls	r0, r3, #31
   8c09e:	d534      	bpl.n	8c10a <_fclose_r+0x82>
   8c0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c0a4:	2b00      	cmp	r3, #0
   8c0a6:	d03e      	beq.n	8c126 <_fclose_r+0x9e>
   8c0a8:	4621      	mov	r1, r4
   8c0aa:	4628      	mov	r0, r5
   8c0ac:	f7fd ff70 	bl	89f90 <__sflush_r>
   8c0b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c0b2:	4606      	mov	r6, r0
   8c0b4:	b133      	cbz	r3, 8c0c4 <_fclose_r+0x3c>
   8c0b6:	4628      	mov	r0, r5
   8c0b8:	69e1      	ldr	r1, [r4, #28]
   8c0ba:	4798      	blx	r3
   8c0bc:	2800      	cmp	r0, #0
   8c0be:	bfb8      	it	lt
   8c0c0:	f04f 36ff 	movlt.w	r6, #4294967295
   8c0c4:	89a3      	ldrh	r3, [r4, #12]
   8c0c6:	061a      	lsls	r2, r3, #24
   8c0c8:	d43b      	bmi.n	8c142 <_fclose_r+0xba>
   8c0ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c0cc:	b141      	cbz	r1, 8c0e0 <_fclose_r+0x58>
   8c0ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c0d2:	4299      	cmp	r1, r3
   8c0d4:	d002      	beq.n	8c0dc <_fclose_r+0x54>
   8c0d6:	4628      	mov	r0, r5
   8c0d8:	f7fe f972 	bl	8a3c0 <_free_r>
   8c0dc:	2300      	movs	r3, #0
   8c0de:	6323      	str	r3, [r4, #48]	; 0x30
   8c0e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c0e2:	b121      	cbz	r1, 8c0ee <_fclose_r+0x66>
   8c0e4:	4628      	mov	r0, r5
   8c0e6:	f7fe f96b 	bl	8a3c0 <_free_r>
   8c0ea:	2300      	movs	r3, #0
   8c0ec:	6463      	str	r3, [r4, #68]	; 0x44
   8c0ee:	f7fe f871 	bl	8a1d4 <__sfp_lock_acquire>
   8c0f2:	2200      	movs	r2, #0
   8c0f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c0f6:	81a2      	strh	r2, [r4, #12]
   8c0f8:	07db      	lsls	r3, r3, #31
   8c0fa:	d527      	bpl.n	8c14c <_fclose_r+0xc4>
   8c0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c0fe:	f7fe fc0b 	bl	8a918 <__retarget_lock_close_recursive>
   8c102:	f7fe f86d 	bl	8a1e0 <__sfp_lock_release>
   8c106:	4630      	mov	r0, r6
   8c108:	bd70      	pop	{r4, r5, r6, pc}
   8c10a:	89a3      	ldrh	r3, [r4, #12]
   8c10c:	0599      	lsls	r1, r3, #22
   8c10e:	d4cb      	bmi.n	8c0a8 <_fclose_r+0x20>
   8c110:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c112:	f7fe fc03 	bl	8a91c <__retarget_lock_acquire_recursive>
   8c116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c11a:	2b00      	cmp	r3, #0
   8c11c:	d1c4      	bne.n	8c0a8 <_fclose_r+0x20>
   8c11e:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c120:	f016 0601 	ands.w	r6, r6, #1
   8c124:	d008      	beq.n	8c138 <_fclose_r+0xb0>
   8c126:	2600      	movs	r6, #0
   8c128:	4630      	mov	r0, r6
   8c12a:	bd70      	pop	{r4, r5, r6, pc}
   8c12c:	f7fe f824 	bl	8a178 <__sinit>
   8c130:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c132:	07d8      	lsls	r0, r3, #31
   8c134:	d4b4      	bmi.n	8c0a0 <_fclose_r+0x18>
   8c136:	e7e8      	b.n	8c10a <_fclose_r+0x82>
   8c138:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c13a:	f7fe fbf1 	bl	8a920 <__retarget_lock_release_recursive>
   8c13e:	4630      	mov	r0, r6
   8c140:	bd70      	pop	{r4, r5, r6, pc}
   8c142:	4628      	mov	r0, r5
   8c144:	6921      	ldr	r1, [r4, #16]
   8c146:	f7fe f93b 	bl	8a3c0 <_free_r>
   8c14a:	e7be      	b.n	8c0ca <_fclose_r+0x42>
   8c14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c14e:	f7fe fbe7 	bl	8a920 <__retarget_lock_release_recursive>
   8c152:	e7d3      	b.n	8c0fc <_fclose_r+0x74>

0008c154 <fiprintf>:
   8c154:	b40e      	push	{r1, r2, r3}
   8c156:	b510      	push	{r4, lr}
   8c158:	b083      	sub	sp, #12
   8c15a:	ab05      	add	r3, sp, #20
   8c15c:	4c06      	ldr	r4, [pc, #24]	; (8c178 <fiprintf+0x24>)
   8c15e:	f853 2b04 	ldr.w	r2, [r3], #4
   8c162:	4601      	mov	r1, r0
   8c164:	6820      	ldr	r0, [r4, #0]
   8c166:	9301      	str	r3, [sp, #4]
   8c168:	f7fb ffcc 	bl	88104 <_vfiprintf_r>
   8c16c:	b003      	add	sp, #12
   8c16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c172:	b003      	add	sp, #12
   8c174:	4770      	bx	lr
   8c176:	bf00      	nop
   8c178:	20000710 	.word	0x20000710

0008c17c <_fstat_r>:
   8c17c:	b570      	push	{r4, r5, r6, lr}
   8c17e:	460c      	mov	r4, r1
   8c180:	4603      	mov	r3, r0
   8c182:	2600      	movs	r6, #0
   8c184:	4d07      	ldr	r5, [pc, #28]	; (8c1a4 <_fstat_r+0x28>)
   8c186:	4620      	mov	r0, r4
   8c188:	4611      	mov	r1, r2
   8c18a:	461c      	mov	r4, r3
   8c18c:	602e      	str	r6, [r5, #0]
   8c18e:	f7f9 fc3c 	bl	85a0a <_fstat>
   8c192:	1c43      	adds	r3, r0, #1
   8c194:	d000      	beq.n	8c198 <_fstat_r+0x1c>
   8c196:	bd70      	pop	{r4, r5, r6, pc}
   8c198:	682b      	ldr	r3, [r5, #0]
   8c19a:	2b00      	cmp	r3, #0
   8c19c:	d0fb      	beq.n	8c196 <_fstat_r+0x1a>
   8c19e:	6023      	str	r3, [r4, #0]
   8c1a0:	bd70      	pop	{r4, r5, r6, pc}
   8c1a2:	bf00      	nop
   8c1a4:	20002bcc 	.word	0x20002bcc

0008c1a8 <_isatty_r>:
   8c1a8:	2200      	movs	r2, #0
   8c1aa:	b538      	push	{r3, r4, r5, lr}
   8c1ac:	4d06      	ldr	r5, [pc, #24]	; (8c1c8 <_isatty_r+0x20>)
   8c1ae:	4604      	mov	r4, r0
   8c1b0:	4608      	mov	r0, r1
   8c1b2:	602a      	str	r2, [r5, #0]
   8c1b4:	f7f9 fc2e 	bl	85a14 <_isatty>
   8c1b8:	1c43      	adds	r3, r0, #1
   8c1ba:	d000      	beq.n	8c1be <_isatty_r+0x16>
   8c1bc:	bd38      	pop	{r3, r4, r5, pc}
   8c1be:	682b      	ldr	r3, [r5, #0]
   8c1c0:	2b00      	cmp	r3, #0
   8c1c2:	d0fb      	beq.n	8c1bc <_isatty_r+0x14>
   8c1c4:	6023      	str	r3, [r4, #0]
   8c1c6:	bd38      	pop	{r3, r4, r5, pc}
   8c1c8:	20002bcc 	.word	0x20002bcc

0008c1cc <_lseek_r>:
   8c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c1ce:	460f      	mov	r7, r1
   8c1d0:	2600      	movs	r6, #0
   8c1d2:	4d08      	ldr	r5, [pc, #32]	; (8c1f4 <_lseek_r+0x28>)
   8c1d4:	4611      	mov	r1, r2
   8c1d6:	4604      	mov	r4, r0
   8c1d8:	461a      	mov	r2, r3
   8c1da:	4638      	mov	r0, r7
   8c1dc:	602e      	str	r6, [r5, #0]
   8c1de:	f7f9 fc1b 	bl	85a18 <_lseek>
   8c1e2:	1c43      	adds	r3, r0, #1
   8c1e4:	d000      	beq.n	8c1e8 <_lseek_r+0x1c>
   8c1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c1e8:	682b      	ldr	r3, [r5, #0]
   8c1ea:	2b00      	cmp	r3, #0
   8c1ec:	d0fb      	beq.n	8c1e6 <_lseek_r+0x1a>
   8c1ee:	6023      	str	r3, [r4, #0]
   8c1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c1f2:	bf00      	nop
   8c1f4:	20002bcc 	.word	0x20002bcc

0008c1f8 <_read_r>:
   8c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c1fa:	460f      	mov	r7, r1
   8c1fc:	2600      	movs	r6, #0
   8c1fe:	4d08      	ldr	r5, [pc, #32]	; (8c220 <_read_r+0x28>)
   8c200:	4611      	mov	r1, r2
   8c202:	4604      	mov	r4, r0
   8c204:	461a      	mov	r2, r3
   8c206:	4638      	mov	r0, r7
   8c208:	602e      	str	r6, [r5, #0]
   8c20a:	f7f7 fc4d 	bl	83aa8 <_read>
   8c20e:	1c43      	adds	r3, r0, #1
   8c210:	d000      	beq.n	8c214 <_read_r+0x1c>
   8c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c214:	682b      	ldr	r3, [r5, #0]
   8c216:	2b00      	cmp	r3, #0
   8c218:	d0fb      	beq.n	8c212 <_read_r+0x1a>
   8c21a:	6023      	str	r3, [r4, #0]
   8c21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c21e:	bf00      	nop
   8c220:	20002bcc 	.word	0x20002bcc

0008c224 <abort>:
   8c224:	2006      	movs	r0, #6
   8c226:	b508      	push	{r3, lr}
   8c228:	f000 f830 	bl	8c28c <raise>
   8c22c:	2001      	movs	r0, #1
   8c22e:	f7f9 fbf5 	bl	85a1c <_exit>
   8c232:	bf00      	nop

0008c234 <_raise_r>:
   8c234:	291f      	cmp	r1, #31
   8c236:	b538      	push	{r3, r4, r5, lr}
   8c238:	4605      	mov	r5, r0
   8c23a:	d821      	bhi.n	8c280 <_raise_r+0x4c>
   8c23c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c240:	460c      	mov	r4, r1
   8c242:	b16a      	cbz	r2, 8c260 <_raise_r+0x2c>
   8c244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c248:	b153      	cbz	r3, 8c260 <_raise_r+0x2c>
   8c24a:	2b01      	cmp	r3, #1
   8c24c:	d016      	beq.n	8c27c <_raise_r+0x48>
   8c24e:	1c59      	adds	r1, r3, #1
   8c250:	d010      	beq.n	8c274 <_raise_r+0x40>
   8c252:	2500      	movs	r5, #0
   8c254:	4620      	mov	r0, r4
   8c256:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c25a:	4798      	blx	r3
   8c25c:	4628      	mov	r0, r5
   8c25e:	bd38      	pop	{r3, r4, r5, pc}
   8c260:	4628      	mov	r0, r5
   8c262:	f000 f831 	bl	8c2c8 <_getpid_r>
   8c266:	4622      	mov	r2, r4
   8c268:	4601      	mov	r1, r0
   8c26a:	4628      	mov	r0, r5
   8c26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c270:	f000 b814 	b.w	8c29c <_kill_r>
   8c274:	2316      	movs	r3, #22
   8c276:	2001      	movs	r0, #1
   8c278:	602b      	str	r3, [r5, #0]
   8c27a:	bd38      	pop	{r3, r4, r5, pc}
   8c27c:	2000      	movs	r0, #0
   8c27e:	bd38      	pop	{r3, r4, r5, pc}
   8c280:	2316      	movs	r3, #22
   8c282:	f04f 30ff 	mov.w	r0, #4294967295
   8c286:	602b      	str	r3, [r5, #0]
   8c288:	bd38      	pop	{r3, r4, r5, pc}
   8c28a:	bf00      	nop

0008c28c <raise>:
   8c28c:	4b02      	ldr	r3, [pc, #8]	; (8c298 <raise+0xc>)
   8c28e:	4601      	mov	r1, r0
   8c290:	6818      	ldr	r0, [r3, #0]
   8c292:	f7ff bfcf 	b.w	8c234 <_raise_r>
   8c296:	bf00      	nop
   8c298:	20000710 	.word	0x20000710

0008c29c <_kill_r>:
   8c29c:	b570      	push	{r4, r5, r6, lr}
   8c29e:	460c      	mov	r4, r1
   8c2a0:	4603      	mov	r3, r0
   8c2a2:	2600      	movs	r6, #0
   8c2a4:	4d07      	ldr	r5, [pc, #28]	; (8c2c4 <_kill_r+0x28>)
   8c2a6:	4620      	mov	r0, r4
   8c2a8:	4611      	mov	r1, r2
   8c2aa:	461c      	mov	r4, r3
   8c2ac:	602e      	str	r6, [r5, #0]
   8c2ae:	f7f9 fbbf 	bl	85a30 <_kill>
   8c2b2:	1c43      	adds	r3, r0, #1
   8c2b4:	d000      	beq.n	8c2b8 <_kill_r+0x1c>
   8c2b6:	bd70      	pop	{r4, r5, r6, pc}
   8c2b8:	682b      	ldr	r3, [r5, #0]
   8c2ba:	2b00      	cmp	r3, #0
   8c2bc:	d0fb      	beq.n	8c2b6 <_kill_r+0x1a>
   8c2be:	6023      	str	r3, [r4, #0]
   8c2c0:	bd70      	pop	{r4, r5, r6, pc}
   8c2c2:	bf00      	nop
   8c2c4:	20002bcc 	.word	0x20002bcc

0008c2c8 <_getpid_r>:
   8c2c8:	f7f9 bbb3 	b.w	85a32 <_getpid>

0008c2cc <__aeabi_drsub>:
   8c2cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c2d0:	e002      	b.n	8c2d8 <__adddf3>
   8c2d2:	bf00      	nop

0008c2d4 <__aeabi_dsub>:
   8c2d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c2d8 <__adddf3>:
   8c2d8:	b530      	push	{r4, r5, lr}
   8c2da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c2de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c2e2:	ea94 0f05 	teq	r4, r5
   8c2e6:	bf08      	it	eq
   8c2e8:	ea90 0f02 	teqeq	r0, r2
   8c2ec:	bf1f      	itttt	ne
   8c2ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c2f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c2f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c2fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c2fe:	f000 80e2 	beq.w	8c4c6 <__adddf3+0x1ee>
   8c302:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c30a:	bfb8      	it	lt
   8c30c:	426d      	neglt	r5, r5
   8c30e:	dd0c      	ble.n	8c32a <__adddf3+0x52>
   8c310:	442c      	add	r4, r5
   8c312:	ea80 0202 	eor.w	r2, r0, r2
   8c316:	ea81 0303 	eor.w	r3, r1, r3
   8c31a:	ea82 0000 	eor.w	r0, r2, r0
   8c31e:	ea83 0101 	eor.w	r1, r3, r1
   8c322:	ea80 0202 	eor.w	r2, r0, r2
   8c326:	ea81 0303 	eor.w	r3, r1, r3
   8c32a:	2d36      	cmp	r5, #54	; 0x36
   8c32c:	bf88      	it	hi
   8c32e:	bd30      	pophi	{r4, r5, pc}
   8c330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c334:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c33c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c340:	d002      	beq.n	8c348 <__adddf3+0x70>
   8c342:	4240      	negs	r0, r0
   8c344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c34c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c354:	d002      	beq.n	8c35c <__adddf3+0x84>
   8c356:	4252      	negs	r2, r2
   8c358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c35c:	ea94 0f05 	teq	r4, r5
   8c360:	f000 80a7 	beq.w	8c4b2 <__adddf3+0x1da>
   8c364:	f1a4 0401 	sub.w	r4, r4, #1
   8c368:	f1d5 0e20 	rsbs	lr, r5, #32
   8c36c:	db0d      	blt.n	8c38a <__adddf3+0xb2>
   8c36e:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c372:	fa22 f205 	lsr.w	r2, r2, r5
   8c376:	1880      	adds	r0, r0, r2
   8c378:	f141 0100 	adc.w	r1, r1, #0
   8c37c:	fa03 f20e 	lsl.w	r2, r3, lr
   8c380:	1880      	adds	r0, r0, r2
   8c382:	fa43 f305 	asr.w	r3, r3, r5
   8c386:	4159      	adcs	r1, r3
   8c388:	e00e      	b.n	8c3a8 <__adddf3+0xd0>
   8c38a:	f1a5 0520 	sub.w	r5, r5, #32
   8c38e:	f10e 0e20 	add.w	lr, lr, #32
   8c392:	2a01      	cmp	r2, #1
   8c394:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c398:	bf28      	it	cs
   8c39a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c39e:	fa43 f305 	asr.w	r3, r3, r5
   8c3a2:	18c0      	adds	r0, r0, r3
   8c3a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c3a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c3ac:	d507      	bpl.n	8c3be <__adddf3+0xe6>
   8c3ae:	f04f 0e00 	mov.w	lr, #0
   8c3b2:	f1dc 0c00 	rsbs	ip, ip, #0
   8c3b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c3ba:	eb6e 0101 	sbc.w	r1, lr, r1
   8c3be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c3c2:	d31b      	bcc.n	8c3fc <__adddf3+0x124>
   8c3c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c3c8:	d30c      	bcc.n	8c3e4 <__adddf3+0x10c>
   8c3ca:	0849      	lsrs	r1, r1, #1
   8c3cc:	ea5f 0030 	movs.w	r0, r0, rrx
   8c3d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c3d4:	f104 0401 	add.w	r4, r4, #1
   8c3d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c3dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c3e0:	f080 809a 	bcs.w	8c518 <__adddf3+0x240>
   8c3e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c3e8:	bf08      	it	eq
   8c3ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c3ee:	f150 0000 	adcs.w	r0, r0, #0
   8c3f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c3f6:	ea41 0105 	orr.w	r1, r1, r5
   8c3fa:	bd30      	pop	{r4, r5, pc}
   8c3fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c400:	4140      	adcs	r0, r0
   8c402:	eb41 0101 	adc.w	r1, r1, r1
   8c406:	3c01      	subs	r4, #1
   8c408:	bf28      	it	cs
   8c40a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c40e:	d2e9      	bcs.n	8c3e4 <__adddf3+0x10c>
   8c410:	f091 0f00 	teq	r1, #0
   8c414:	bf04      	itt	eq
   8c416:	4601      	moveq	r1, r0
   8c418:	2000      	moveq	r0, #0
   8c41a:	fab1 f381 	clz	r3, r1
   8c41e:	bf08      	it	eq
   8c420:	3320      	addeq	r3, #32
   8c422:	f1a3 030b 	sub.w	r3, r3, #11
   8c426:	f1b3 0220 	subs.w	r2, r3, #32
   8c42a:	da0c      	bge.n	8c446 <__adddf3+0x16e>
   8c42c:	320c      	adds	r2, #12
   8c42e:	dd08      	ble.n	8c442 <__adddf3+0x16a>
   8c430:	f102 0c14 	add.w	ip, r2, #20
   8c434:	f1c2 020c 	rsb	r2, r2, #12
   8c438:	fa01 f00c 	lsl.w	r0, r1, ip
   8c43c:	fa21 f102 	lsr.w	r1, r1, r2
   8c440:	e00c      	b.n	8c45c <__adddf3+0x184>
   8c442:	f102 0214 	add.w	r2, r2, #20
   8c446:	bfd8      	it	le
   8c448:	f1c2 0c20 	rsble	ip, r2, #32
   8c44c:	fa01 f102 	lsl.w	r1, r1, r2
   8c450:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c454:	bfdc      	itt	le
   8c456:	ea41 010c 	orrle.w	r1, r1, ip
   8c45a:	4090      	lslle	r0, r2
   8c45c:	1ae4      	subs	r4, r4, r3
   8c45e:	bfa2      	ittt	ge
   8c460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c464:	4329      	orrge	r1, r5
   8c466:	bd30      	popge	{r4, r5, pc}
   8c468:	ea6f 0404 	mvn.w	r4, r4
   8c46c:	3c1f      	subs	r4, #31
   8c46e:	da1c      	bge.n	8c4aa <__adddf3+0x1d2>
   8c470:	340c      	adds	r4, #12
   8c472:	dc0e      	bgt.n	8c492 <__adddf3+0x1ba>
   8c474:	f104 0414 	add.w	r4, r4, #20
   8c478:	f1c4 0220 	rsb	r2, r4, #32
   8c47c:	fa20 f004 	lsr.w	r0, r0, r4
   8c480:	fa01 f302 	lsl.w	r3, r1, r2
   8c484:	ea40 0003 	orr.w	r0, r0, r3
   8c488:	fa21 f304 	lsr.w	r3, r1, r4
   8c48c:	ea45 0103 	orr.w	r1, r5, r3
   8c490:	bd30      	pop	{r4, r5, pc}
   8c492:	f1c4 040c 	rsb	r4, r4, #12
   8c496:	f1c4 0220 	rsb	r2, r4, #32
   8c49a:	fa20 f002 	lsr.w	r0, r0, r2
   8c49e:	fa01 f304 	lsl.w	r3, r1, r4
   8c4a2:	ea40 0003 	orr.w	r0, r0, r3
   8c4a6:	4629      	mov	r1, r5
   8c4a8:	bd30      	pop	{r4, r5, pc}
   8c4aa:	fa21 f004 	lsr.w	r0, r1, r4
   8c4ae:	4629      	mov	r1, r5
   8c4b0:	bd30      	pop	{r4, r5, pc}
   8c4b2:	f094 0f00 	teq	r4, #0
   8c4b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c4ba:	bf06      	itte	eq
   8c4bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c4c0:	3401      	addeq	r4, #1
   8c4c2:	3d01      	subne	r5, #1
   8c4c4:	e74e      	b.n	8c364 <__adddf3+0x8c>
   8c4c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c4ca:	bf18      	it	ne
   8c4cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c4d0:	d029      	beq.n	8c526 <__adddf3+0x24e>
   8c4d2:	ea94 0f05 	teq	r4, r5
   8c4d6:	bf08      	it	eq
   8c4d8:	ea90 0f02 	teqeq	r0, r2
   8c4dc:	d005      	beq.n	8c4ea <__adddf3+0x212>
   8c4de:	ea54 0c00 	orrs.w	ip, r4, r0
   8c4e2:	bf04      	itt	eq
   8c4e4:	4619      	moveq	r1, r3
   8c4e6:	4610      	moveq	r0, r2
   8c4e8:	bd30      	pop	{r4, r5, pc}
   8c4ea:	ea91 0f03 	teq	r1, r3
   8c4ee:	bf1e      	ittt	ne
   8c4f0:	2100      	movne	r1, #0
   8c4f2:	2000      	movne	r0, #0
   8c4f4:	bd30      	popne	{r4, r5, pc}
   8c4f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c4fa:	d105      	bne.n	8c508 <__adddf3+0x230>
   8c4fc:	0040      	lsls	r0, r0, #1
   8c4fe:	4149      	adcs	r1, r1
   8c500:	bf28      	it	cs
   8c502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c506:	bd30      	pop	{r4, r5, pc}
   8c508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c50c:	bf3c      	itt	cc
   8c50e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c512:	bd30      	popcc	{r4, r5, pc}
   8c514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c51c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c520:	f04f 0000 	mov.w	r0, #0
   8c524:	bd30      	pop	{r4, r5, pc}
   8c526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c52a:	bf1a      	itte	ne
   8c52c:	4619      	movne	r1, r3
   8c52e:	4610      	movne	r0, r2
   8c530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c534:	bf1c      	itt	ne
   8c536:	460b      	movne	r3, r1
   8c538:	4602      	movne	r2, r0
   8c53a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c53e:	bf06      	itte	eq
   8c540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c544:	ea91 0f03 	teqeq	r1, r3
   8c548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c54c:	bd30      	pop	{r4, r5, pc}
   8c54e:	bf00      	nop

0008c550 <__aeabi_ui2d>:
   8c550:	f090 0f00 	teq	r0, #0
   8c554:	bf04      	itt	eq
   8c556:	2100      	moveq	r1, #0
   8c558:	4770      	bxeq	lr
   8c55a:	b530      	push	{r4, r5, lr}
   8c55c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c560:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c564:	f04f 0500 	mov.w	r5, #0
   8c568:	f04f 0100 	mov.w	r1, #0
   8c56c:	e750      	b.n	8c410 <__adddf3+0x138>
   8c56e:	bf00      	nop

0008c570 <__aeabi_i2d>:
   8c570:	f090 0f00 	teq	r0, #0
   8c574:	bf04      	itt	eq
   8c576:	2100      	moveq	r1, #0
   8c578:	4770      	bxeq	lr
   8c57a:	b530      	push	{r4, r5, lr}
   8c57c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c580:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c588:	bf48      	it	mi
   8c58a:	4240      	negmi	r0, r0
   8c58c:	f04f 0100 	mov.w	r1, #0
   8c590:	e73e      	b.n	8c410 <__adddf3+0x138>
   8c592:	bf00      	nop

0008c594 <__aeabi_f2d>:
   8c594:	0042      	lsls	r2, r0, #1
   8c596:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c59a:	ea4f 0131 	mov.w	r1, r1, rrx
   8c59e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c5a2:	bf1f      	itttt	ne
   8c5a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c5a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c5ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c5b0:	4770      	bxne	lr
   8c5b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c5b6:	bf08      	it	eq
   8c5b8:	4770      	bxeq	lr
   8c5ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c5be:	bf04      	itt	eq
   8c5c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c5c4:	4770      	bxeq	lr
   8c5c6:	b530      	push	{r4, r5, lr}
   8c5c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c5cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c5d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c5d4:	e71c      	b.n	8c410 <__adddf3+0x138>
   8c5d6:	bf00      	nop

0008c5d8 <__aeabi_ul2d>:
   8c5d8:	ea50 0201 	orrs.w	r2, r0, r1
   8c5dc:	bf08      	it	eq
   8c5de:	4770      	bxeq	lr
   8c5e0:	b530      	push	{r4, r5, lr}
   8c5e2:	f04f 0500 	mov.w	r5, #0
   8c5e6:	e00a      	b.n	8c5fe <__aeabi_l2d+0x16>

0008c5e8 <__aeabi_l2d>:
   8c5e8:	ea50 0201 	orrs.w	r2, r0, r1
   8c5ec:	bf08      	it	eq
   8c5ee:	4770      	bxeq	lr
   8c5f0:	b530      	push	{r4, r5, lr}
   8c5f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c5f6:	d502      	bpl.n	8c5fe <__aeabi_l2d+0x16>
   8c5f8:	4240      	negs	r0, r0
   8c5fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c5fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c602:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c60a:	f43f aed8 	beq.w	8c3be <__adddf3+0xe6>
   8c60e:	f04f 0203 	mov.w	r2, #3
   8c612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c616:	bf18      	it	ne
   8c618:	3203      	addne	r2, #3
   8c61a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c61e:	bf18      	it	ne
   8c620:	3203      	addne	r2, #3
   8c622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c626:	f1c2 0320 	rsb	r3, r2, #32
   8c62a:	fa00 fc03 	lsl.w	ip, r0, r3
   8c62e:	fa20 f002 	lsr.w	r0, r0, r2
   8c632:	fa01 fe03 	lsl.w	lr, r1, r3
   8c636:	ea40 000e 	orr.w	r0, r0, lr
   8c63a:	fa21 f102 	lsr.w	r1, r1, r2
   8c63e:	4414      	add	r4, r2
   8c640:	e6bd      	b.n	8c3be <__adddf3+0xe6>
   8c642:	bf00      	nop

0008c644 <__aeabi_dmul>:
   8c644:	b570      	push	{r4, r5, r6, lr}
   8c646:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c64a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c64e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c652:	bf1d      	ittte	ne
   8c654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c658:	ea94 0f0c 	teqne	r4, ip
   8c65c:	ea95 0f0c 	teqne	r5, ip
   8c660:	f000 f8de 	bleq	8c820 <__aeabi_dmul+0x1dc>
   8c664:	442c      	add	r4, r5
   8c666:	ea81 0603 	eor.w	r6, r1, r3
   8c66a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c66e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c676:	bf18      	it	ne
   8c678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c67c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c684:	d038      	beq.n	8c6f8 <__aeabi_dmul+0xb4>
   8c686:	fba0 ce02 	umull	ip, lr, r0, r2
   8c68a:	f04f 0500 	mov.w	r5, #0
   8c68e:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c696:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c69a:	f04f 0600 	mov.w	r6, #0
   8c69e:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c6a2:	f09c 0f00 	teq	ip, #0
   8c6a6:	bf18      	it	ne
   8c6a8:	f04e 0e01 	orrne.w	lr, lr, #1
   8c6ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c6b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c6b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c6b8:	d204      	bcs.n	8c6c4 <__aeabi_dmul+0x80>
   8c6ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c6be:	416d      	adcs	r5, r5
   8c6c0:	eb46 0606 	adc.w	r6, r6, r6
   8c6c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c6c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c6cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c6d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c6d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c6d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c6dc:	bf88      	it	hi
   8c6de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c6e2:	d81e      	bhi.n	8c722 <__aeabi_dmul+0xde>
   8c6e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c6e8:	bf08      	it	eq
   8c6ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c6ee:	f150 0000 	adcs.w	r0, r0, #0
   8c6f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c6f6:	bd70      	pop	{r4, r5, r6, pc}
   8c6f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c6fc:	ea46 0101 	orr.w	r1, r6, r1
   8c700:	ea40 0002 	orr.w	r0, r0, r2
   8c704:	ea81 0103 	eor.w	r1, r1, r3
   8c708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c70c:	bfc2      	ittt	gt
   8c70e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c716:	bd70      	popgt	{r4, r5, r6, pc}
   8c718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c71c:	f04f 0e00 	mov.w	lr, #0
   8c720:	3c01      	subs	r4, #1
   8c722:	f300 80ab 	bgt.w	8c87c <__aeabi_dmul+0x238>
   8c726:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c72a:	bfde      	ittt	le
   8c72c:	2000      	movle	r0, #0
   8c72e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c732:	bd70      	pople	{r4, r5, r6, pc}
   8c734:	f1c4 0400 	rsb	r4, r4, #0
   8c738:	3c20      	subs	r4, #32
   8c73a:	da35      	bge.n	8c7a8 <__aeabi_dmul+0x164>
   8c73c:	340c      	adds	r4, #12
   8c73e:	dc1b      	bgt.n	8c778 <__aeabi_dmul+0x134>
   8c740:	f104 0414 	add.w	r4, r4, #20
   8c744:	f1c4 0520 	rsb	r5, r4, #32
   8c748:	fa00 f305 	lsl.w	r3, r0, r5
   8c74c:	fa20 f004 	lsr.w	r0, r0, r4
   8c750:	fa01 f205 	lsl.w	r2, r1, r5
   8c754:	ea40 0002 	orr.w	r0, r0, r2
   8c758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c75c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c764:	fa21 f604 	lsr.w	r6, r1, r4
   8c768:	eb42 0106 	adc.w	r1, r2, r6
   8c76c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c770:	bf08      	it	eq
   8c772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c776:	bd70      	pop	{r4, r5, r6, pc}
   8c778:	f1c4 040c 	rsb	r4, r4, #12
   8c77c:	f1c4 0520 	rsb	r5, r4, #32
   8c780:	fa00 f304 	lsl.w	r3, r0, r4
   8c784:	fa20 f005 	lsr.w	r0, r0, r5
   8c788:	fa01 f204 	lsl.w	r2, r1, r4
   8c78c:	ea40 0002 	orr.w	r0, r0, r2
   8c790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c798:	f141 0100 	adc.w	r1, r1, #0
   8c79c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c7a0:	bf08      	it	eq
   8c7a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c7a6:	bd70      	pop	{r4, r5, r6, pc}
   8c7a8:	f1c4 0520 	rsb	r5, r4, #32
   8c7ac:	fa00 f205 	lsl.w	r2, r0, r5
   8c7b0:	ea4e 0e02 	orr.w	lr, lr, r2
   8c7b4:	fa20 f304 	lsr.w	r3, r0, r4
   8c7b8:	fa01 f205 	lsl.w	r2, r1, r5
   8c7bc:	ea43 0302 	orr.w	r3, r3, r2
   8c7c0:	fa21 f004 	lsr.w	r0, r1, r4
   8c7c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c7c8:	fa21 f204 	lsr.w	r2, r1, r4
   8c7cc:	ea20 0002 	bic.w	r0, r0, r2
   8c7d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c7d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c7d8:	bf08      	it	eq
   8c7da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c7de:	bd70      	pop	{r4, r5, r6, pc}
   8c7e0:	f094 0f00 	teq	r4, #0
   8c7e4:	d10f      	bne.n	8c806 <__aeabi_dmul+0x1c2>
   8c7e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c7ea:	0040      	lsls	r0, r0, #1
   8c7ec:	eb41 0101 	adc.w	r1, r1, r1
   8c7f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c7f4:	bf08      	it	eq
   8c7f6:	3c01      	subeq	r4, #1
   8c7f8:	d0f7      	beq.n	8c7ea <__aeabi_dmul+0x1a6>
   8c7fa:	ea41 0106 	orr.w	r1, r1, r6
   8c7fe:	f095 0f00 	teq	r5, #0
   8c802:	bf18      	it	ne
   8c804:	4770      	bxne	lr
   8c806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c80a:	0052      	lsls	r2, r2, #1
   8c80c:	eb43 0303 	adc.w	r3, r3, r3
   8c810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c814:	bf08      	it	eq
   8c816:	3d01      	subeq	r5, #1
   8c818:	d0f7      	beq.n	8c80a <__aeabi_dmul+0x1c6>
   8c81a:	ea43 0306 	orr.w	r3, r3, r6
   8c81e:	4770      	bx	lr
   8c820:	ea94 0f0c 	teq	r4, ip
   8c824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c828:	bf18      	it	ne
   8c82a:	ea95 0f0c 	teqne	r5, ip
   8c82e:	d00c      	beq.n	8c84a <__aeabi_dmul+0x206>
   8c830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c834:	bf18      	it	ne
   8c836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c83a:	d1d1      	bne.n	8c7e0 <__aeabi_dmul+0x19c>
   8c83c:	ea81 0103 	eor.w	r1, r1, r3
   8c840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c844:	f04f 0000 	mov.w	r0, #0
   8c848:	bd70      	pop	{r4, r5, r6, pc}
   8c84a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c84e:	bf06      	itte	eq
   8c850:	4610      	moveq	r0, r2
   8c852:	4619      	moveq	r1, r3
   8c854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c858:	d019      	beq.n	8c88e <__aeabi_dmul+0x24a>
   8c85a:	ea94 0f0c 	teq	r4, ip
   8c85e:	d102      	bne.n	8c866 <__aeabi_dmul+0x222>
   8c860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c864:	d113      	bne.n	8c88e <__aeabi_dmul+0x24a>
   8c866:	ea95 0f0c 	teq	r5, ip
   8c86a:	d105      	bne.n	8c878 <__aeabi_dmul+0x234>
   8c86c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c870:	bf1c      	itt	ne
   8c872:	4610      	movne	r0, r2
   8c874:	4619      	movne	r1, r3
   8c876:	d10a      	bne.n	8c88e <__aeabi_dmul+0x24a>
   8c878:	ea81 0103 	eor.w	r1, r1, r3
   8c87c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c888:	f04f 0000 	mov.w	r0, #0
   8c88c:	bd70      	pop	{r4, r5, r6, pc}
   8c88e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c896:	bd70      	pop	{r4, r5, r6, pc}

0008c898 <__aeabi_ddiv>:
   8c898:	b570      	push	{r4, r5, r6, lr}
   8c89a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c89e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c8a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c8a6:	bf1d      	ittte	ne
   8c8a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c8ac:	ea94 0f0c 	teqne	r4, ip
   8c8b0:	ea95 0f0c 	teqne	r5, ip
   8c8b4:	f000 f8a7 	bleq	8ca06 <__aeabi_ddiv+0x16e>
   8c8b8:	eba4 0405 	sub.w	r4, r4, r5
   8c8bc:	ea81 0e03 	eor.w	lr, r1, r3
   8c8c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c8c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c8c8:	f000 8088 	beq.w	8c9dc <__aeabi_ddiv+0x144>
   8c8cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c8d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c8d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c8d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c8dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c8e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c8e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c8e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c8ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c8f0:	429d      	cmp	r5, r3
   8c8f2:	bf08      	it	eq
   8c8f4:	4296      	cmpeq	r6, r2
   8c8f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c8fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c8fe:	d202      	bcs.n	8c906 <__aeabi_ddiv+0x6e>
   8c900:	085b      	lsrs	r3, r3, #1
   8c902:	ea4f 0232 	mov.w	r2, r2, rrx
   8c906:	1ab6      	subs	r6, r6, r2
   8c908:	eb65 0503 	sbc.w	r5, r5, r3
   8c90c:	085b      	lsrs	r3, r3, #1
   8c90e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c91a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c91e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c922:	bf22      	ittt	cs
   8c924:	1ab6      	subcs	r6, r6, r2
   8c926:	4675      	movcs	r5, lr
   8c928:	ea40 000c 	orrcs.w	r0, r0, ip
   8c92c:	085b      	lsrs	r3, r3, #1
   8c92e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c932:	ebb6 0e02 	subs.w	lr, r6, r2
   8c936:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c93a:	bf22      	ittt	cs
   8c93c:	1ab6      	subcs	r6, r6, r2
   8c93e:	4675      	movcs	r5, lr
   8c940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c944:	085b      	lsrs	r3, r3, #1
   8c946:	ea4f 0232 	mov.w	r2, r2, rrx
   8c94a:	ebb6 0e02 	subs.w	lr, r6, r2
   8c94e:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c952:	bf22      	ittt	cs
   8c954:	1ab6      	subcs	r6, r6, r2
   8c956:	4675      	movcs	r5, lr
   8c958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c95c:	085b      	lsrs	r3, r3, #1
   8c95e:	ea4f 0232 	mov.w	r2, r2, rrx
   8c962:	ebb6 0e02 	subs.w	lr, r6, r2
   8c966:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c96a:	bf22      	ittt	cs
   8c96c:	1ab6      	subcs	r6, r6, r2
   8c96e:	4675      	movcs	r5, lr
   8c970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c974:	ea55 0e06 	orrs.w	lr, r5, r6
   8c978:	d018      	beq.n	8c9ac <__aeabi_ddiv+0x114>
   8c97a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c97e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c982:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c98a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c98e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c996:	d1c0      	bne.n	8c91a <__aeabi_ddiv+0x82>
   8c998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c99c:	d10b      	bne.n	8c9b6 <__aeabi_ddiv+0x11e>
   8c99e:	ea41 0100 	orr.w	r1, r1, r0
   8c9a2:	f04f 0000 	mov.w	r0, #0
   8c9a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c9aa:	e7b6      	b.n	8c91a <__aeabi_ddiv+0x82>
   8c9ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c9b0:	bf04      	itt	eq
   8c9b2:	4301      	orreq	r1, r0
   8c9b4:	2000      	moveq	r0, #0
   8c9b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c9ba:	bf88      	it	hi
   8c9bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c9c0:	f63f aeaf 	bhi.w	8c722 <__aeabi_dmul+0xde>
   8c9c4:	ebb5 0c03 	subs.w	ip, r5, r3
   8c9c8:	bf04      	itt	eq
   8c9ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c9ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c9d2:	f150 0000 	adcs.w	r0, r0, #0
   8c9d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c9da:	bd70      	pop	{r4, r5, r6, pc}
   8c9dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c9e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c9e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c9e8:	bfc2      	ittt	gt
   8c9ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c9ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c9f2:	bd70      	popgt	{r4, r5, r6, pc}
   8c9f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c9f8:	f04f 0e00 	mov.w	lr, #0
   8c9fc:	3c01      	subs	r4, #1
   8c9fe:	e690      	b.n	8c722 <__aeabi_dmul+0xde>
   8ca00:	ea45 0e06 	orr.w	lr, r5, r6
   8ca04:	e68d      	b.n	8c722 <__aeabi_dmul+0xde>
   8ca06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ca0a:	ea94 0f0c 	teq	r4, ip
   8ca0e:	bf08      	it	eq
   8ca10:	ea95 0f0c 	teqeq	r5, ip
   8ca14:	f43f af3b 	beq.w	8c88e <__aeabi_dmul+0x24a>
   8ca18:	ea94 0f0c 	teq	r4, ip
   8ca1c:	d10a      	bne.n	8ca34 <__aeabi_ddiv+0x19c>
   8ca1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ca22:	f47f af34 	bne.w	8c88e <__aeabi_dmul+0x24a>
   8ca26:	ea95 0f0c 	teq	r5, ip
   8ca2a:	f47f af25 	bne.w	8c878 <__aeabi_dmul+0x234>
   8ca2e:	4610      	mov	r0, r2
   8ca30:	4619      	mov	r1, r3
   8ca32:	e72c      	b.n	8c88e <__aeabi_dmul+0x24a>
   8ca34:	ea95 0f0c 	teq	r5, ip
   8ca38:	d106      	bne.n	8ca48 <__aeabi_ddiv+0x1b0>
   8ca3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ca3e:	f43f aefd 	beq.w	8c83c <__aeabi_dmul+0x1f8>
   8ca42:	4610      	mov	r0, r2
   8ca44:	4619      	mov	r1, r3
   8ca46:	e722      	b.n	8c88e <__aeabi_dmul+0x24a>
   8ca48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ca4c:	bf18      	it	ne
   8ca4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8ca52:	f47f aec5 	bne.w	8c7e0 <__aeabi_dmul+0x19c>
   8ca56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8ca5a:	f47f af0d 	bne.w	8c878 <__aeabi_dmul+0x234>
   8ca5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8ca62:	f47f aeeb 	bne.w	8c83c <__aeabi_dmul+0x1f8>
   8ca66:	e712      	b.n	8c88e <__aeabi_dmul+0x24a>

0008ca68 <__gedf2>:
   8ca68:	f04f 3cff 	mov.w	ip, #4294967295
   8ca6c:	e006      	b.n	8ca7c <__cmpdf2+0x4>
   8ca6e:	bf00      	nop

0008ca70 <__ledf2>:
   8ca70:	f04f 0c01 	mov.w	ip, #1
   8ca74:	e002      	b.n	8ca7c <__cmpdf2+0x4>
   8ca76:	bf00      	nop

0008ca78 <__cmpdf2>:
   8ca78:	f04f 0c01 	mov.w	ip, #1
   8ca7c:	f84d cd04 	str.w	ip, [sp, #-4]!
   8ca80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ca84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ca88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ca8c:	bf18      	it	ne
   8ca8e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8ca92:	d01b      	beq.n	8cacc <__cmpdf2+0x54>
   8ca94:	b001      	add	sp, #4
   8ca96:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8ca9a:	bf0c      	ite	eq
   8ca9c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8caa0:	ea91 0f03 	teqne	r1, r3
   8caa4:	bf02      	ittt	eq
   8caa6:	ea90 0f02 	teqeq	r0, r2
   8caaa:	2000      	moveq	r0, #0
   8caac:	4770      	bxeq	lr
   8caae:	f110 0f00 	cmn.w	r0, #0
   8cab2:	ea91 0f03 	teq	r1, r3
   8cab6:	bf58      	it	pl
   8cab8:	4299      	cmppl	r1, r3
   8caba:	bf08      	it	eq
   8cabc:	4290      	cmpeq	r0, r2
   8cabe:	bf2c      	ite	cs
   8cac0:	17d8      	asrcs	r0, r3, #31
   8cac2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8cac6:	f040 0001 	orr.w	r0, r0, #1
   8caca:	4770      	bx	lr
   8cacc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cad4:	d102      	bne.n	8cadc <__cmpdf2+0x64>
   8cad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cada:	d107      	bne.n	8caec <__cmpdf2+0x74>
   8cadc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cae4:	d1d6      	bne.n	8ca94 <__cmpdf2+0x1c>
   8cae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8caea:	d0d3      	beq.n	8ca94 <__cmpdf2+0x1c>
   8caec:	f85d 0b04 	ldr.w	r0, [sp], #4
   8caf0:	4770      	bx	lr
   8caf2:	bf00      	nop

0008caf4 <__aeabi_cdrcmple>:
   8caf4:	4684      	mov	ip, r0
   8caf6:	4610      	mov	r0, r2
   8caf8:	4662      	mov	r2, ip
   8cafa:	468c      	mov	ip, r1
   8cafc:	4619      	mov	r1, r3
   8cafe:	4663      	mov	r3, ip
   8cb00:	e000      	b.n	8cb04 <__aeabi_cdcmpeq>
   8cb02:	bf00      	nop

0008cb04 <__aeabi_cdcmpeq>:
   8cb04:	b501      	push	{r0, lr}
   8cb06:	f7ff ffb7 	bl	8ca78 <__cmpdf2>
   8cb0a:	2800      	cmp	r0, #0
   8cb0c:	bf48      	it	mi
   8cb0e:	f110 0f00 	cmnmi.w	r0, #0
   8cb12:	bd01      	pop	{r0, pc}

0008cb14 <__aeabi_dcmpeq>:
   8cb14:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb18:	f7ff fff4 	bl	8cb04 <__aeabi_cdcmpeq>
   8cb1c:	bf0c      	ite	eq
   8cb1e:	2001      	moveq	r0, #1
   8cb20:	2000      	movne	r0, #0
   8cb22:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb26:	bf00      	nop

0008cb28 <__aeabi_dcmplt>:
   8cb28:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb2c:	f7ff ffea 	bl	8cb04 <__aeabi_cdcmpeq>
   8cb30:	bf34      	ite	cc
   8cb32:	2001      	movcc	r0, #1
   8cb34:	2000      	movcs	r0, #0
   8cb36:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb3a:	bf00      	nop

0008cb3c <__aeabi_dcmple>:
   8cb3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb40:	f7ff ffe0 	bl	8cb04 <__aeabi_cdcmpeq>
   8cb44:	bf94      	ite	ls
   8cb46:	2001      	movls	r0, #1
   8cb48:	2000      	movhi	r0, #0
   8cb4a:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb4e:	bf00      	nop

0008cb50 <__aeabi_dcmpge>:
   8cb50:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb54:	f7ff ffce 	bl	8caf4 <__aeabi_cdrcmple>
   8cb58:	bf94      	ite	ls
   8cb5a:	2001      	movls	r0, #1
   8cb5c:	2000      	movhi	r0, #0
   8cb5e:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb62:	bf00      	nop

0008cb64 <__aeabi_dcmpgt>:
   8cb64:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cb68:	f7ff ffc4 	bl	8caf4 <__aeabi_cdrcmple>
   8cb6c:	bf34      	ite	cc
   8cb6e:	2001      	movcc	r0, #1
   8cb70:	2000      	movcs	r0, #0
   8cb72:	f85d fb08 	ldr.w	pc, [sp], #8
   8cb76:	bf00      	nop

0008cb78 <__aeabi_dcmpun>:
   8cb78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cb7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb80:	d102      	bne.n	8cb88 <__aeabi_dcmpun+0x10>
   8cb82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cb86:	d10a      	bne.n	8cb9e <__aeabi_dcmpun+0x26>
   8cb88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cb8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cb90:	d102      	bne.n	8cb98 <__aeabi_dcmpun+0x20>
   8cb92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cb96:	d102      	bne.n	8cb9e <__aeabi_dcmpun+0x26>
   8cb98:	f04f 0000 	mov.w	r0, #0
   8cb9c:	4770      	bx	lr
   8cb9e:	f04f 0001 	mov.w	r0, #1
   8cba2:	4770      	bx	lr

0008cba4 <__aeabi_d2iz>:
   8cba4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cba8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cbac:	d215      	bcs.n	8cbda <__aeabi_d2iz+0x36>
   8cbae:	d511      	bpl.n	8cbd4 <__aeabi_d2iz+0x30>
   8cbb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cbb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cbb8:	d912      	bls.n	8cbe0 <__aeabi_d2iz+0x3c>
   8cbba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cbbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cbc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cbc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cbca:	fa23 f002 	lsr.w	r0, r3, r2
   8cbce:	bf18      	it	ne
   8cbd0:	4240      	negne	r0, r0
   8cbd2:	4770      	bx	lr
   8cbd4:	f04f 0000 	mov.w	r0, #0
   8cbd8:	4770      	bx	lr
   8cbda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cbde:	d105      	bne.n	8cbec <__aeabi_d2iz+0x48>
   8cbe0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8cbe4:	bf08      	it	eq
   8cbe6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cbea:	4770      	bx	lr
   8cbec:	f04f 0000 	mov.w	r0, #0
   8cbf0:	4770      	bx	lr
   8cbf2:	bf00      	nop
   8cbf4:	50525641 	.word	0x50525641
   8cbf8:	3a474f52 	.word	0x3a474f52
   8cbfc:	79615020 	.word	0x79615020
   8cc00:	64616f6c 	.word	0x64616f6c
   8cc04:	7a697320 	.word	0x7a697320
   8cc08:	203d2065 	.word	0x203d2065
   8cc0c:	202c6425 	.word	0x202c6425
   8cc10:	6f727265 	.word	0x6f727265
   8cc14:	0a3f2172 	.word	0x0a3f2172
   8cc18:	00000000 	.word	0x00000000
   8cc1c:	50525641 	.word	0x50525641
   8cc20:	3a474f52 	.word	0x3a474f52
   8cc24:	746e4520 	.word	0x746e4520
   8cc28:	49207265 	.word	0x49207265
   8cc2c:	4d205053 	.word	0x4d205053
   8cc30:	3a65646f 	.word	0x3a65646f
   8cc34:	0a782520 	.word	0x0a782520
   8cc38:	00000000 	.word	0x00000000
   8cc3c:	50525641 	.word	0x50525641
   8cc40:	3a474f52 	.word	0x3a474f52
   8cc44:	61724520 	.word	0x61724520
   8cc48:	203a6573 	.word	0x203a6573
   8cc4c:	6c796150 	.word	0x6c796150
   8cc50:	2064616f 	.word	0x2064616f
   8cc54:	657a6973 	.word	0x657a6973
   8cc58:	25203d20 	.word	0x25203d20
   8cc5c:	65202c64 	.word	0x65202c64
   8cc60:	726f7272 	.word	0x726f7272
   8cc64:	000a3f21 	.word	0x000a3f21

0008cc68 <BUILD_DATE>:
   8cc68:	206e754a 32203832 00313230              Jun 28 2021.

0008cc74 <BUILD_TIME>:
   8cc74:	353a3032 32313a38 00000000 494c5743     20:58:12....CWLI
   8cc84:	415f4554 53495256 00000050 50525641     TE_AVRISP...AVRP
   8cc94:	3a474f52 64644120 73736572 25203d20     ROG: Address = %
   8cca4:	0a783230 00000000                       02x.....

0008ccac <BOS_DESC>:
   8ccac:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8ccbc:	65d29c4c 8a649e9d 0300009f 0100ae06     L..e..d.........
	...
   8ccd8:	aaaaaa00 aaaaaaaa eeeeeeaa eeeeeeee     ................
   8cce8:	fffffeee ffffffff ffffffff dfbf7fff     ................
   8ccf8:	fdfbf7ef dfbf7efc fdfbf7ef 0000007e     .....~......~...
   8cd08:	74697845 20676e69 68746977 61747320     Exiting with sta
   8cd18:	20737574 0a2e6425 00000000 78383025     tus %d......%08x
   8cd28:	00000000 206e754a 32203832 00313230     ....Jun 28 2021.
   8cd38:	353a3032 34313a38 00000000 70696843     20:58:14....Chip
   8cd48:	73696857 65726570 694c2d72 4f206574     Whisperer-Lite O
   8cd58:	6e696c6e 46202e65 776d7269 20657261     nline. Firmware 
   8cd68:	6c697562 25203a64 73252f73 0000000a     build: %s/%s....
   8cd78:	69726553 6e206c61 65626d75 25203a72     Serial number: %
   8cd88:	00000a73 74746553 20676e69 46207075     s...Setting up F
   8cd98:	20414750 6d6d6f43 63696e75 6f697461     PGA Communicatio
   8cda8:	00000a6e 6e657645 6f4c2074 4520706f     n...Event Loop E
   8cdb8:	7265746e 202c6465 74696177 2e676e69     ntered, waiting.
   8cdc8:	000a2e2e                                ....

0008cdcc <_global_impure_ptr>:
   8cdcc:	20000718 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8cddc:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cdec:	66656463 00000000 33323130 37363534     cdef....01234567
   8cdfc:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8ce0c:	0000296c 00000030                       l)..0...

0008ce14 <blanks.7335>:
   8ce14:	20202020 20202020 20202020 20202020                     

0008ce24 <zeroes.7336>:
   8ce24:	30303030 30303030 30303030 30303030     0000000000000000

0008ce34 <blanks.7328>:
   8ce34:	20202020 20202020 20202020 20202020                     

0008ce44 <zeroes.7329>:
   8ce44:	30303030 30303030 30303030 30303030     0000000000000000
   8ce54:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ce64:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ce74:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ce84:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ce94:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8cea4:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8ceb4:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8cec4:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8ced4:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8cee4:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8cef4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8cf04:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8cf14:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8cf24:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8cf34:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8cf44:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8cf54:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8cf64:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8cf74:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....
   8cf84:	00000000                                ....

0008cf88 <__mprec_bigtens>:
   8cf88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cf98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cfa8:	7f73bf3c 75154fdd                       <.s..O.u

0008cfb0 <__mprec_tens>:
   8cfb0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cfc0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cfd0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cfe0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cff0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d000:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d010:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d020:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d030:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d040:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d050:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d060:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d070:	79d99db4 44ea7843                       ...yCx.D

0008d078 <p05.6122>:
   8d078:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d088:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d098:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d0a8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d0b8:	2520656e 25732564 00000a73              ne %d%s%s...

0008d0c4 <_ctype_>:
   8d0c4:	20202000 20202020 28282020 20282828     .         ((((( 
   8d0d4:	20202020 20202020 20202020 20202020                     
   8d0e4:	10108820 10101010 10101010 10101010      ...............
   8d0f4:	04040410 04040404 10040404 10101010     ................
   8d104:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d114:	01010101 01010101 01010101 10101010     ................
   8d124:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d134:	02020202 02020202 02020202 10101010     ................
   8d144:	00000020 00000000 00000000 00000000      ...............
	...

0008d1c8 <_init>:
   8d1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d1ca:	bf00      	nop
   8d1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d1ce:	bc08      	pop	{r3}
   8d1d0:	469e      	mov	lr, r3
   8d1d2:	4770      	bx	lr

0008d1d4 <__init_array_start>:
   8d1d4:	00088f89 	.word	0x00088f89

0008d1d8 <__frame_dummy_init_array_entry>:
   8d1d8:	000800e1                                ....

0008d1dc <_fini>:
   8d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d1de:	bf00      	nop
   8d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d1e2:	bc08      	pop	{r3}
   8d1e4:	469e      	mov	lr, r3
   8d1e6:	4770      	bx	lr

0008d1e8 <__do_global_dtors_aux_fini_array_entry>:
   8d1e8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b36b      	cbz	r3, 20000064 <efc_perform_read_sequence+0x64>
20000008:	4604      	mov	r4, r0
2000000a:	461d      	mov	r5, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000c:	6803      	ldr	r3, [r0, #0]
2000000e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000012:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000014:	b2c9      	uxtb	r1, r1
20000016:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
2000001a:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001c:	68a3      	ldr	r3, [r4, #8]
2000001e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20000020:	9801      	ldr	r0, [sp, #4]
20000022:	f010 0001 	ands.w	r0, r0, #1
20000026:	d1f9      	bne.n	2000001c <efc_perform_read_sequence+0x1c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000028:	b15e      	cbz	r6, 20000042 <efc_perform_read_sequence+0x42>
2000002a:	1f2b      	subs	r3, r5, #4
2000002c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
20000030:	3e04      	subs	r6, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000032:	f5c5 2500 	rsb	r5, r5, #524288	; 0x80000
20000036:	3504      	adds	r5, #4
20000038:	58e9      	ldr	r1, [r5, r3]
2000003a:	f843 1f04 	str.w	r1, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2000003e:	42b3      	cmp	r3, r6
20000040:	d1fa      	bne.n	20000038 <efc_perform_read_sequence+0x38>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20000042:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000044:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000048:	6062      	str	r2, [r4, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000004a:	68a3      	ldr	r3, [r4, #8]
2000004c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2000004e:	9b01      	ldr	r3, [sp, #4]
20000050:	f013 0f01 	tst.w	r3, #1
20000054:	d0f9      	beq.n	2000004a <efc_perform_read_sequence+0x4a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000056:	6823      	ldr	r3, [r4, #0]
20000058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000005c:	6023      	str	r3, [r4, #0]

	return EFC_RC_OK;
}
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
		return EFC_RC_INVALID;
20000064:	2002      	movs	r0, #2
20000066:	e7fa      	b.n	2000005e <efc_perform_read_sequence+0x5e>

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
}
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr

20000086 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000086:	f3bf 8f5f 	dmb	sy
2000008a:	3801      	subs	r0, #1
2000008c:	d1fb      	bne.n	20000086 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
2000008e:	4770      	bx	lr

20000090 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000090:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000094:	4a21      	ldr	r2, [pc, #132]	; (2000011c <SystemInit+0x8c>)
20000096:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000098:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000009c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000009e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000a6:	6a1b      	ldr	r3, [r3, #32]
200000a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000ac:	d107      	bne.n	200000be <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000ae:	4b1c      	ldr	r3, [pc, #112]	; (20000120 <SystemInit+0x90>)
200000b0:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x94>)
200000b2:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b4:	461a      	mov	r2, r3
200000b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000b8:	f013 0f01 	tst.w	r3, #1
200000bc:	d0fb      	beq.n	200000b6 <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000be:	4b18      	ldr	r3, [pc, #96]	; (20000120 <SystemInit+0x90>)
200000c0:	4a19      	ldr	r2, [pc, #100]	; (20000128 <SystemInit+0x98>)
200000c2:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c4:	461a      	mov	r2, r3
200000c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000cc:	d0fb      	beq.n	200000c6 <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000ce:	4a14      	ldr	r2, [pc, #80]	; (20000120 <SystemInit+0x90>)
200000d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d2:	f023 0303 	bic.w	r3, r3, #3
200000d6:	f043 0301 	orr.w	r3, r3, #1
200000da:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000de:	f013 0f08 	tst.w	r3, #8
200000e2:	d0fb      	beq.n	200000dc <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e4:	4b0e      	ldr	r3, [pc, #56]	; (20000120 <SystemInit+0x90>)
200000e6:	4a11      	ldr	r2, [pc, #68]	; (2000012c <SystemInit+0x9c>)
200000e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ea:	461a      	mov	r2, r3
200000ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000ee:	f013 0f02 	tst.w	r3, #2
200000f2:	d0fb      	beq.n	200000ec <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f4:	4b0a      	ldr	r3, [pc, #40]	; (20000120 <SystemInit+0x90>)
200000f6:	2211      	movs	r2, #17
200000f8:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fa:	461a      	mov	r2, r3
200000fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000fe:	f013 0f08 	tst.w	r3, #8
20000102:	d0fb      	beq.n	200000fc <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000104:	4b06      	ldr	r3, [pc, #24]	; (20000120 <SystemInit+0x90>)
20000106:	2212      	movs	r2, #18
20000108:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010a:	461a      	mov	r2, r3
2000010c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000010e:	f013 0f08 	tst.w	r3, #8
20000112:	d0fb      	beq.n	2000010c <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000114:	4b06      	ldr	r3, [pc, #24]	; (20000130 <SystemInit+0xa0>)
20000116:	4a07      	ldr	r2, [pc, #28]	; (20000134 <SystemInit+0xa4>)
20000118:	601a      	str	r2, [r3, #0]
}
2000011a:	4770      	bx	lr
2000011c:	400e0800 	.word	0x400e0800
20000120:	400e0400 	.word	0x400e0400
20000124:	00370809 	.word	0x00370809
20000128:	01370809 	.word	0x01370809
2000012c:	200f3f01 	.word	0x200f3f01
20000130:	200006e8 	.word	0x200006e8
20000134:	05b8d800 	.word	0x05b8d800

20000138 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20000138:	4b16      	ldr	r3, [pc, #88]	; (20000194 <system_init_flash+0x5c>)
2000013a:	4298      	cmp	r0, r3
2000013c:	d206      	bcs.n	2000014c <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2000013e:	2300      	movs	r3, #0
20000140:	4a15      	ldr	r2, [pc, #84]	; (20000198 <system_init_flash+0x60>)
20000142:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20000144:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000148:	6013      	str	r3, [r2, #0]
2000014a:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2000014c:	4b13      	ldr	r3, [pc, #76]	; (2000019c <system_init_flash+0x64>)
2000014e:	4298      	cmp	r0, r3
20000150:	d207      	bcs.n	20000162 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000152:	f44f 7380 	mov.w	r3, #256	; 0x100
20000156:	4a10      	ldr	r2, [pc, #64]	; (20000198 <system_init_flash+0x60>)
20000158:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000015a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000015e:	6013      	str	r3, [r2, #0]
20000160:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000162:	4b0f      	ldr	r3, [pc, #60]	; (200001a0 <system_init_flash+0x68>)
20000164:	4298      	cmp	r0, r3
20000166:	d807      	bhi.n	20000178 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000168:	f44f 7300 	mov.w	r3, #512	; 0x200
2000016c:	4a0a      	ldr	r2, [pc, #40]	; (20000198 <system_init_flash+0x60>)
2000016e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000170:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000174:	6013      	str	r3, [r2, #0]
20000176:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000178:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <system_init_flash+0x6c>)
2000017a:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000017c:	bf94      	ite	ls
2000017e:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000182:	f44f 6380 	movhi.w	r3, #1024	; 0x400
20000186:	4a04      	ldr	r2, [pc, #16]	; (20000198 <system_init_flash+0x60>)
20000188:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000018a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000018e:	6013      	str	r3, [r2, #0]
	}
}
20000190:	4770      	bx	lr
20000192:	bf00      	nop
20000194:	016e3600 	.word	0x016e3600
20000198:	400e0800 	.word	0x400e0800
2000019c:	02625a00 	.word	0x02625a00
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff

200001a8 <udi_api_cdc_comm>:
200001a8:	0008019d 000800fd 00080115 00080111     ................
200001b8:	00000000                                ....

200001bc <udi_api_cdc_data>:
200001bc:	000804dd 00080389 0008010d 00080111     ................
200001cc:	00080379                                y...

200001d0 <udc_config>:
200001d0:	200002c0 200001f0 200002c0 200002d4     ... ... ... ... 
200001e0:	200001e8 00000000                       ... ....

200001e8 <udc_config_hs>:
200001e8:	2000025c 200002e0                       \.. ... 

200001f0 <udc_config_lsfs>:
200001f0:	200001f8 200002e0                       ... ... 

200001f8 <udc_desc_fs>:
200001f8:	00620209 80000103 000409fa ffff0200     ..b.............
20000208:	050700ff 00400281 02050700 00004002     ......@......@..
20000218:	02010b08 00010202 00010409 01020201     ................
20000228:	00240500 24040110 24050202 05020106     ..$....$...$....
20000238:	02030124 03830507 09100040 02000204     $.......@.......
20000248:	0000000a 02850507 07000040 40020605     ........@......@
20000258:	00000000                                ....

2000025c <udc_desc_hs>:
2000025c:	00620209 80000103 000409fa ffff0200     ..b.............
2000026c:	050700ff 02000281 02050700 00020002     ................
2000027c:	02010b08 00010202 00010409 01020201     ................
2000028c:	00240500 24040110 24050202 05020106     ..$....$...$....
2000029c:	02030124 03830507 09100040 02000204     $.......@.......
200002ac:	0000000a 02850507 07000200 00020605     ................
200002bc:	00000002                                ....

200002c0 <udc_device_desc>:
200002c0:	02000112 40000000 ace22b3e 02010100     .......@>+......
200002d0:	00000103                                ....

200002d4 <udc_device_qual>:
200002d4:	0200060a 40000000 00000001              .......@....

200002e0 <udi_apis>:
200002e0:	200005b4 200001a8 200001bc              ... ... ... 

200002ec <avrispmkIIfreqs>:
200002ec:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200002fc:	0007a120 0003d090 0001e848 00017882      .......H....x..
2000030c:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
2000031c:	0001148d 0001069b 0000fa00 0000ee8d     ................
2000032c:	0000e41b 0000da89 0000c99d 0000c21a     ................
2000033c:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
2000034c:	000099f1 00009586 00008d68 0000861f     ........h.......
2000035c:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
2000036c:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
2000037c:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
2000038c:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
2000039c:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
200003ac:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
200003bc:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200003cc:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200003dc:	00001be1 00001a99 0000194e 00001822     ........N..."...
200003ec:	000016f7 000015e7 000014ef 000013e5     ................
200003fc:	00001306 00001219 00001142 00001071     ........B...q...
2000040c:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
2000041c:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
2000042c:	00000aae 00000a33 000009b4 00000941     ....3.......A...
2000043c:	000008d1 00000868 00000804 000007a4     ....h...........
2000044c:	0000074a 000006f3 0000069f 0000064f     J...........O...
2000045c:	00000603 000005bc 00000576 00000535     ........v...5...
2000046c:	000004f7 000004bc 00000483 0000044d     ............M...
2000047c:	00000419 000003e8 000003b9 0000038d     ................
2000048c:	00000362 0000033a 00000313 000002ee     b...:...........
2000049c:	000002cb 000002aa 0000028a 0000026b     ............k...
200004ac:	0000024e 00000233 00000218 000001ff     N...3...........
200004bc:	000001e7 000001d1 000001bb 000001a6     ................
200004cc:	00000192 00000180 0000016e 0000015d     ........n...]...
200004dc:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200004ec:	00000112 00000105 000000f9 000000ee     ................
200004fc:	000000e2 000000d8 000000ce 000000c4     ................
2000050c:	000000bb 000000b2 000000aa 000000a2     ................
2000051c:	0000009a 00000093 0000008c 00000086     ................
2000052c:	00000080 0000007a 00000074 0000006f     ....z...t...o...
2000053c:	00000069 00000064 0000005f 0000005b     i...d..._...[...
2000054c:	00000057 00000053 0000004f 0000004b     W...S...O...K...
2000055c:	00000047 00000044 00000041 0000003e     G...D...A...>...
2000056c:	0000003b 00000038 00000036 00000033     ;...8...6...3...

2000057c <main_b_vendor_enable>:
2000057c:	00000001                                ....

20000580 <cdc_settings_change>:
20000580:	00000001                                ....

20000584 <xram>:
20000584:	60000000                                ...`

20000588 <ParameterTable>:
20000588:	81000180 01900001 01019100 94170192     ................
20000598:	03982101 01039e06 a40001a1               .!............

200005a6 <XPROG_Param_EEPageSize>:
200005a6:	                                          .

200005a8 <XPROG_Param_NVMBase>:
200005a8:	010001c0                                ....

200005ac <XPROG_Param_NVMCMDRegAddr>:
200005ac:	                                         3

200005ad <XPROG_Param_NVMCSRRegAddr>:
200005ad:	                                         2..

200005b0 <defaultTimeoutTicks>:
200005b0:	000001f4                                ....

200005b4 <udi_api_vendor>:
200005b4:	00083195 000831b9 000831d1 00083189     .1...1...1...1..
200005c4:	00000000                                ....

200005c8 <udc_string_desc>:
200005c8:	00000300 00000000 00000000 00000000     ................
	...

2000060c <udc_string_desc_languageid>:
2000060c:	04090304                                ....

20000610 <udc_string_manufacturer_name>:
20000610:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000620:	636e4920 0000002e                        Inc....

20000628 <udc_string_product_name>:
20000628:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000638:	00006574                                te..

2000063c <winusb_20_desc>:
2000063c:	0000000a 06030000 000800ae 00000002     ................
2000064c:	001400a4 49570003 4253554e 00000000     ......WINUSB....
2000065c:	00000000 00880000 00070004 0044002a     ............*.D.
2000066c:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
2000067c:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
2000068c:	00440049 00000073 007b0050 00410043     I.D.s...P.{.C.A.
2000069c:	00350046 00410041 00430031 0041002d     F.5.A.A.1.C.-.A.
200006ac:	00390036 002d0041 00390034 00350039     6.9.A.-.4.9.9.5.
200006bc:	0041002d 00430042 002d0032 00410032     -.A.B.C.2.-.2.A.
200006cc:	00350045 00410037 00310035 00440041     E.5.7.A.5.1.A.D.
200006dc:	00390045 0000007d                        E.9.}.....

200006e6 <g_interrupt_enabled>:
200006e6:	                                         ..

200006e8 <SystemCoreClock>:
200006e8:	003d0900                                ..=.

200006ec <usb_serial_number>:
200006ec:	30303030 30303030 30303030 44414544     000000000000DEAD
200006fc:	46454542 00000000 00000000 00000000     BEEF............
2000070c:	00000000                                ....

20000710 <_impure_ptr>:
20000710:	20000718 00000000                       ... ....

20000718 <impure_data>:
20000718:	00000000 20000a04 20000a6c 20000ad4     ....... l.. ... 
	...
200007c0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200007d0:	0005deec 0000000b 00000000 00000000     ................
	...

20000b40 <__atexit_recursive_mutex>:
20000b40:	20002ba8                                .+. 

20000b44 <__global_locale>:
20000b44:	00000043 00000000 00000000 00000000     C...............
	...
20000b64:	00000043 00000000 00000000 00000000     C...............
	...
20000b84:	00000043 00000000 00000000 00000000     C...............
	...
20000ba4:	00000043 00000000 00000000 00000000     C...............
	...
20000bc4:	00000043 00000000 00000000 00000000     C...............
	...
20000be4:	00000043 00000000 00000000 00000000     C...............
	...
20000c04:	00000043 00000000 00000000 00000000     C...............
	...
20000c24:	0008bef5 0008af81 00000000 0008d0c4     ................
20000c34:	0008cf00 0008cd20 0008cd20 0008cd20     .... ... ... ...
20000c44:	0008cd20 0008cd20 0008cd20 0008cd20      ... ... ... ...
20000c54:	0008cd20 0008cd20 ffffffff ffffffff      ... ...........
20000c64:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000c8c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000cb0 <__malloc_av_>:
	...
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0 20000dd8 20000dd8     ... ... ... ... 
20000de8:	20000de0 20000de0 20000de8 20000de8     ... ... ... ... 
20000df8:	20000df0 20000df0 20000df8 20000df8     ... ... ... ... 
20000e08:	20000e00 20000e00 20000e08 20000e08     ... ... ... ... 
20000e18:	20000e10 20000e10 20000e18 20000e18     ... ... ... ... 
20000e28:	20000e20 20000e20 20000e28 20000e28      ..  .. (.. (.. 
20000e38:	20000e30 20000e30 20000e38 20000e38     0.. 0.. 8.. 8.. 
20000e48:	20000e40 20000e40 20000e48 20000e48     @.. @.. H.. H.. 
20000e58:	20000e50 20000e50 20000e58 20000e58     P.. P.. X.. X.. 
20000e68:	20000e60 20000e60 20000e68 20000e68     `.. `.. h.. h.. 
20000e78:	20000e70 20000e70 20000e78 20000e78     p.. p.. x.. x.. 
20000e88:	20000e80 20000e80 20000e88 20000e88     ... ... ... ... 
20000e98:	20000e90 20000e90 20000e98 20000e98     ... ... ... ... 
20000ea8:	20000ea0 20000ea0 20000ea8 20000ea8     ... ... ... ... 
20000eb8:	20000eb0 20000eb0 20000eb8 20000eb8     ... ... ... ... 
20000ec8:	20000ec0 20000ec0 20000ec8 20000ec8     ... ... ... ... 
20000ed8:	20000ed0 20000ed0 20000ed8 20000ed8     ... ... ... ... 
20000ee8:	20000ee0 20000ee0 20000ee8 20000ee8     ... ... ... ... 
20000ef8:	20000ef0 20000ef0 20000ef8 20000ef8     ... ... ... ... 
20000f08:	20000f00 20000f00 20000f08 20000f08     ... ... ... ... 
20000f18:	20000f10 20000f10 20000f18 20000f18     ... ... ... ... 
20000f28:	20000f20 20000f20 20000f28 20000f28      ..  .. (.. (.. 
20000f38:	20000f30 20000f30 20000f38 20000f38     0.. 0.. 8.. 8.. 
20000f48:	20000f40 20000f40 20000f48 20000f48     @.. @.. H.. H.. 
20000f58:	20000f50 20000f50 20000f58 20000f58     P.. P.. X.. X.. 
20000f68:	20000f60 20000f60 20000f68 20000f68     `.. `.. h.. h.. 
20000f78:	20000f70 20000f70 20000f78 20000f78     p.. p.. x.. x.. 
20000f88:	20000f80 20000f80 20000f88 20000f88     ... ... ... ... 
20000f98:	20000f90 20000f90 20000f98 20000f98     ... ... ... ... 
20000fa8:	20000fa0 20000fa0 20000fa8 20000fa8     ... ... ... ... 
20000fb8:	20000fb0 20000fb0 20000fb8 20000fb8     ... ... ... ... 
20000fc8:	20000fc0 20000fc0 20000fc8 20000fc8     ... ... ... ... 
20000fd8:	20000fd0 20000fd0 20000fd8 20000fd8     ... ... ... ... 
20000fe8:	20000fe0 20000fe0 20000fe8 20000fe8     ... ... ... ... 
20000ff8:	20000ff0 20000ff0 20000ff8 20000ff8     ... ... ... ... 
20001008:	20001000 20001000 20001008 20001008     ... ... ... ... 
20001018:	20001010 20001010 20001018 20001018     ... ... ... ... 
20001028:	20001020 20001020 20001028 20001028      ..  .. (.. (.. 
20001038:	20001030 20001030 20001038 20001038     0.. 0.. 8.. 8.. 
20001048:	20001040 20001040 20001048 20001048     @.. @.. H.. H.. 
20001058:	20001050 20001050 20001058 20001058     P.. P.. X.. X.. 
20001068:	20001060 20001060 20001068 20001068     `.. `.. h.. h.. 
20001078:	20001070 20001070 20001078 20001078     p.. p.. x.. x.. 
20001088:	20001080 20001080 20001088 20001088     ... ... ... ... 
20001098:	20001090 20001090 20001098 20001098     ... ... ... ... 
200010a8:	200010a0 200010a0 200010a8 200010a8     ... ... ... ... 

200010b8 <__malloc_sbrk_base>:
200010b8:	ffffffff                                ....

200010bc <__malloc_trim_threshold>:
200010bc:	00020000                                ....
