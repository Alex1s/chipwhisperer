
SAM3U_CW1173.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d124  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d124  0008d124  0001d124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001458  20000000  0008d12c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001394  20001458  0008e584  00021458  2**2
                  ALLOC
  4 .stack        00001504  200027ec  0008f918  00021458  2**0
                  ALLOC
  5 .mpssemem     000001c0  20080000  20080000  00030000  2**2
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00021458  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00021481  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003d8b8  00000000  00000000  000214da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000084ae  00000000  00000000  0005ed92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d506  00000000  00000000  00067240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015c8  00000000  00000000  00074746  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001700  00000000  00000000  00075d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000216c6  00000000  00000000  0007740e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028e9e  00000000  00000000  00098ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000615b3  00000000  00000000  000c1972  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004778  00000000  00000000  00122f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f0 3c 00 20 d9 63 08 00 d7 63 08 00 d7 63 08 00     .<. .c...c...c..
   80010:	d7 63 08 00 d7 63 08 00 d7 63 08 00 00 00 00 00     .c...c...c......
	...
   8002c:	d7 63 08 00 d7 63 08 00 00 00 00 00 d7 63 08 00     .c...c.......c..
   8003c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 d7 63 08 00     .c...c...c...c..
   8004c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 d7 63 08 00     .c...c...c...c..
   8005c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 89 4a 08 00     .c...c...c...J..
   8006c:	9d 4a 08 00 d7 63 08 00 85 26 08 00 d7 63 08 00     .J...c...&...c..
   8007c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 d7 63 08 00     .c...c...c...c..
   8008c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 95 42 08 00     .c...c...c...B..
   8009c:	d7 63 08 00 d7 63 08 00 d7 63 08 00 d7 63 08 00     .c...c...c...c..
   800ac:	d7 63 08 00 d7 63 08 00 01 52 08 00 d7 63 08 00     .c...c...R...c..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20001458 	.word	0x20001458
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d12c 	.word	0x0008d12c

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	0008d12c 	.word	0x0008d12c
   8011c:	2000145c 	.word	0x2000145c
   80120:	0008d12c 	.word	0x0008d12c
   80124:	00000000 	.word	0x00000000

00080128 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80128:	4a02      	ldr	r2, [pc, #8]	; (80134 <udi_cdc_comm_disable+0xc>)
   8012a:	7813      	ldrb	r3, [r2, #0]
   8012c:	3b01      	subs	r3, #1
   8012e:	b2db      	uxtb	r3, r3
   80130:	7013      	strb	r3, [r2, #0]
   80132:	4770      	bx	lr
   80134:	2000147f 	.word	0x2000147f

00080138 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80138:	2000      	movs	r0, #0
   8013a:	4770      	bx	lr

0008013c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   8013c:	2000      	movs	r0, #0
   8013e:	4770      	bx	lr

00080140 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
   80140:	4b1d      	ldr	r3, [pc, #116]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80142:	781b      	ldrb	r3, [r3, #0]
   80144:	f013 0f80 	tst.w	r3, #128	; 0x80
   80148:	d105      	bne.n	80156 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8014a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8014e:	2b20      	cmp	r3, #32
   80150:	d018      	beq.n	80184 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
   80152:	2000      	movs	r0, #0
   80154:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80156:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8015a:	2b20      	cmp	r3, #32
   8015c:	d001      	beq.n	80162 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
   8015e:	2000      	movs	r0, #0
   80160:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80164:	785b      	ldrb	r3, [r3, #1]
   80166:	2b21      	cmp	r3, #33	; 0x21
   80168:	d124      	bne.n	801b4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
   8016a:	4b13      	ldr	r3, [pc, #76]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   8016c:	88db      	ldrh	r3, [r3, #6]
   8016e:	2b07      	cmp	r3, #7
   80170:	d001      	beq.n	80176 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
   80172:	2000      	movs	r0, #0
   80174:	4770      	bx	lr
				udd_g_ctrlreq.payload =
   80176:	4b10      	ldr	r3, [pc, #64]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80178:	4a10      	ldr	r2, [pc, #64]	; (801bc <udi_cdc_comm_setup+0x7c>)
   8017a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   8017c:	2207      	movs	r2, #7
   8017e:	819a      	strh	r2, [r3, #12]
				return true;
   80180:	2001      	movs	r0, #1
   80182:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   80184:	4b0c      	ldr	r3, [pc, #48]	; (801b8 <udi_cdc_comm_setup+0x78>)
   80186:	7858      	ldrb	r0, [r3, #1]
   80188:	2820      	cmp	r0, #32
   8018a:	d004      	beq.n	80196 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
   8018c:	2822      	cmp	r0, #34	; 0x22
   8018e:	bf14      	ite	ne
   80190:	2000      	movne	r0, #0
   80192:	2001      	moveq	r0, #1
   80194:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
   80198:	88db      	ldrh	r3, [r3, #6]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d001      	beq.n	801a2 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
   8019e:	2000      	movs	r0, #0
}
   801a0:	4770      	bx	lr
				udd_g_ctrlreq.callback =
   801a2:	4b05      	ldr	r3, [pc, #20]	; (801b8 <udi_cdc_comm_setup+0x78>)
   801a4:	4a06      	ldr	r2, [pc, #24]	; (801c0 <udi_cdc_comm_setup+0x80>)
   801a6:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
   801a8:	4a04      	ldr	r2, [pc, #16]	; (801bc <udi_cdc_comm_setup+0x7c>)
   801aa:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   801ac:	2207      	movs	r2, #7
   801ae:	819a      	strh	r2, [r3, #12]
				return true;
   801b0:	2001      	movs	r0, #1
   801b2:	4770      	bx	lr
	return false;  // request Not supported
   801b4:	2000      	movs	r0, #0
   801b6:	4770      	bx	lr
   801b8:	200027ac 	.word	0x200027ac
   801bc:	20001478 	.word	0x20001478
   801c0:	000803dd 	.word	0x000803dd

000801c4 <udi_cdc_comm_enable>:
{
   801c4:	b510      	push	{r4, lr}
	udi_cdc_nb_comm_enabled = 0;
   801c6:	2400      	movs	r4, #0
   801c8:	4b12      	ldr	r3, [pc, #72]	; (80214 <udi_cdc_comm_enable+0x50>)
   801ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801cc:	4b12      	ldr	r3, [pc, #72]	; (80218 <udi_cdc_comm_enable+0x54>)
   801ce:	801c      	strh	r4, [r3, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   801d0:	4b12      	ldr	r3, [pc, #72]	; (8021c <udi_cdc_comm_enable+0x58>)
   801d2:	22a1      	movs	r2, #161	; 0xa1
   801d4:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   801d6:	2220      	movs	r2, #32
   801d8:	705a      	strb	r2, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   801da:	805c      	strh	r4, [r3, #2]
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   801dc:	2201      	movs	r2, #1
   801de:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   801e0:	2202      	movs	r2, #2
   801e2:	80da      	strh	r2, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   801e4:	811c      	strh	r4, [r3, #8]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   801e6:	490e      	ldr	r1, [pc, #56]	; (80220 <udi_cdc_comm_enable+0x5c>)
   801e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   801ec:	600b      	str	r3, [r1, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   801ee:	710c      	strb	r4, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   801f0:	714c      	strb	r4, [r1, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   801f2:	2308      	movs	r3, #8
   801f4:	718b      	strb	r3, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   801f6:	4620      	mov	r0, r4
   801f8:	4b0a      	ldr	r3, [pc, #40]	; (80224 <udi_cdc_comm_enable+0x60>)
   801fa:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   801fc:	4620      	mov	r0, r4
   801fe:	4b0a      	ldr	r3, [pc, #40]	; (80228 <udi_cdc_comm_enable+0x64>)
   80200:	4798      	blx	r3
   80202:	4602      	mov	r2, r0
   80204:	b120      	cbz	r0, 80210 <udi_cdc_comm_enable+0x4c>
	udi_cdc_nb_comm_enabled++;
   80206:	4903      	ldr	r1, [pc, #12]	; (80214 <udi_cdc_comm_enable+0x50>)
   80208:	780b      	ldrb	r3, [r1, #0]
   8020a:	3301      	adds	r3, #1
   8020c:	b2db      	uxtb	r3, r3
   8020e:	700b      	strb	r3, [r1, #0]
}
   80210:	4610      	mov	r0, r2
   80212:	bd10      	pop	{r4, pc}
   80214:	2000147f 	.word	0x2000147f
   80218:	20001894 	.word	0x20001894
   8021c:	20001cac 	.word	0x20001cac
   80220:	20001478 	.word	0x20001478
   80224:	00082b9d 	.word	0x00082b9d
   80228:	00082af1 	.word	0x00082af1

0008022c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8022c:	4b42      	ldr	r3, [pc, #264]	; (80338 <udi_cdc_tx_send+0x10c>)
   8022e:	781b      	ldrb	r3, [r3, #0]
   80230:	b103      	cbz	r3, 80234 <udi_cdc_tx_send+0x8>
   80232:	4770      	bx	lr
{
   80234:	b570      	push	{r4, r5, r6, lr}
   80236:	b082      	sub	sp, #8
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   80238:	4b40      	ldr	r3, [pc, #256]	; (8033c <udi_cdc_tx_send+0x110>)
   8023a:	4798      	blx	r3
   8023c:	2800      	cmp	r0, #0
   8023e:	d03d      	beq.n	802bc <udi_cdc_tx_send+0x90>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80240:	4b3f      	ldr	r3, [pc, #252]	; (80340 <udi_cdc_tx_send+0x114>)
   80242:	881c      	ldrh	r4, [r3, #0]
   80244:	4b3f      	ldr	r3, [pc, #252]	; (80344 <udi_cdc_tx_send+0x118>)
   80246:	4798      	blx	r3
   80248:	4284      	cmp	r4, r0
   8024a:	d072      	beq.n	80332 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8024c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   80250:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80252:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   80256:	2200      	movs	r2, #0
   80258:	4b3b      	ldr	r3, [pc, #236]	; (80348 <udi_cdc_tx_send+0x11c>)
   8025a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8025c:	4b3b      	ldr	r3, [pc, #236]	; (8034c <udi_cdc_tx_send+0x120>)
   8025e:	781c      	ldrb	r4, [r3, #0]
   80260:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80262:	4b3b      	ldr	r3, [pc, #236]	; (80350 <udi_cdc_tx_send+0x124>)
   80264:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   80268:	2b00      	cmp	r3, #0
   8026a:	d02e      	beq.n	802ca <udi_cdc_tx_send+0x9e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   8026c:	2200      	movs	r2, #0
   8026e:	4b39      	ldr	r3, [pc, #228]	; (80354 <udi_cdc_tx_send+0x128>)
   80270:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   80272:	4b39      	ldr	r3, [pc, #228]	; (80358 <udi_cdc_tx_send+0x12c>)
   80274:	781b      	ldrb	r3, [r3, #0]
   80276:	2b00      	cmp	r3, #0
   80278:	d143      	bne.n	80302 <udi_cdc_tx_send+0xd6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8027a:	fab4 f384 	clz	r3, r4
   8027e:	095b      	lsrs	r3, r3, #5
   80280:	4a32      	ldr	r2, [pc, #200]	; (8034c <udi_cdc_tx_send+0x120>)
   80282:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   80284:	2201      	movs	r2, #1
   80286:	4b2c      	ldr	r3, [pc, #176]	; (80338 <udi_cdc_tx_send+0x10c>)
   80288:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8028a:	b925      	cbnz	r5, 80296 <udi_cdc_tx_send+0x6a>
		cpu_irq_enable();
   8028c:	4b2e      	ldr	r3, [pc, #184]	; (80348 <udi_cdc_tx_send+0x11c>)
   8028e:	701a      	strb	r2, [r3, #0]
   80290:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80294:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   80296:	4626      	mov	r6, r4
   80298:	4b2d      	ldr	r3, [pc, #180]	; (80350 <udi_cdc_tx_send+0x124>)
   8029a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   802a2:	bf14      	ite	ne
   802a4:	2501      	movne	r5, #1
   802a6:	2500      	moveq	r5, #0
	if (b_short_packet) {
   802a8:	d034      	beq.n	80314 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   802aa:	4b24      	ldr	r3, [pc, #144]	; (8033c <udi_cdc_tx_send+0x110>)
   802ac:	4798      	blx	r3
   802ae:	2800      	cmp	r0, #0
   802b0:	d02b      	beq.n	8030a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   802b2:	4b24      	ldr	r3, [pc, #144]	; (80344 <udi_cdc_tx_send+0x118>)
   802b4:	4798      	blx	r3
   802b6:	4b22      	ldr	r3, [pc, #136]	; (80340 <udi_cdc_tx_send+0x114>)
   802b8:	8018      	strh	r0, [r3, #0]
   802ba:	e02e      	b.n	8031a <udi_cdc_tx_send+0xee>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   802bc:	4b20      	ldr	r3, [pc, #128]	; (80340 <udi_cdc_tx_send+0x114>)
   802be:	881c      	ldrh	r4, [r3, #0]
   802c0:	4b26      	ldr	r3, [pc, #152]	; (8035c <udi_cdc_tx_send+0x130>)
   802c2:	4798      	blx	r3
   802c4:	4284      	cmp	r4, r0
   802c6:	d1c1      	bne.n	8024c <udi_cdc_tx_send+0x20>
   802c8:	e033      	b.n	80332 <udi_cdc_tx_send+0x106>
		sof_zlp_counter++;
   802ca:	4a22      	ldr	r2, [pc, #136]	; (80354 <udi_cdc_tx_send+0x128>)
   802cc:	8813      	ldrh	r3, [r2, #0]
   802ce:	3301      	adds	r3, #1
   802d0:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802d2:	4b1a      	ldr	r3, [pc, #104]	; (8033c <udi_cdc_tx_send+0x110>)
   802d4:	4798      	blx	r3
   802d6:	b918      	cbnz	r0, 802e0 <udi_cdc_tx_send+0xb4>
   802d8:	4b1e      	ldr	r3, [pc, #120]	; (80354 <udi_cdc_tx_send+0x128>)
   802da:	881b      	ldrh	r3, [r3, #0]
   802dc:	2b63      	cmp	r3, #99	; 0x63
   802de:	d908      	bls.n	802f2 <udi_cdc_tx_send+0xc6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802e0:	4b16      	ldr	r3, [pc, #88]	; (8033c <udi_cdc_tx_send+0x110>)
   802e2:	4798      	blx	r3
   802e4:	2800      	cmp	r0, #0
   802e6:	d0c1      	beq.n	8026c <udi_cdc_tx_send+0x40>
   802e8:	4b1a      	ldr	r3, [pc, #104]	; (80354 <udi_cdc_tx_send+0x128>)
   802ea:	881b      	ldrh	r3, [r3, #0]
   802ec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802f0:	d2bc      	bcs.n	8026c <udi_cdc_tx_send+0x40>
	if (cpu_irq_is_enabled_flags(flags))
   802f2:	b9f5      	cbnz	r5, 80332 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802f4:	2201      	movs	r2, #1
   802f6:	4b14      	ldr	r3, [pc, #80]	; (80348 <udi_cdc_tx_send+0x11c>)
   802f8:	701a      	strb	r2, [r3, #0]
   802fa:	f3bf 8f5f 	dmb	sy
   802fe:	b662      	cpsie	i
   80300:	e017      	b.n	80332 <udi_cdc_tx_send+0x106>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   80302:	fab4 f484 	clz	r4, r4
   80306:	0964      	lsrs	r4, r4, #5
   80308:	e7bc      	b.n	80284 <udi_cdc_tx_send+0x58>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8030a:	4b14      	ldr	r3, [pc, #80]	; (8035c <udi_cdc_tx_send+0x130>)
   8030c:	4798      	blx	r3
   8030e:	4b0c      	ldr	r3, [pc, #48]	; (80340 <udi_cdc_tx_send+0x114>)
   80310:	8018      	strh	r0, [r3, #0]
   80312:	e002      	b.n	8031a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80314:	2200      	movs	r2, #0
   80316:	4b0a      	ldr	r3, [pc, #40]	; (80340 <udi_cdc_tx_send+0x114>)
   80318:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8031a:	4b0d      	ldr	r3, [pc, #52]	; (80350 <udi_cdc_tx_send+0x124>)
	udd_ep_run( ep,
   8031c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
   80320:	4a0f      	ldr	r2, [pc, #60]	; (80360 <udi_cdc_tx_send+0x134>)
   80322:	9200      	str	r2, [sp, #0]
   80324:	4a0f      	ldr	r2, [pc, #60]	; (80364 <udi_cdc_tx_send+0x138>)
   80326:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   8032a:	4629      	mov	r1, r5
   8032c:	2085      	movs	r0, #133	; 0x85
   8032e:	4c0e      	ldr	r4, [pc, #56]	; (80368 <udi_cdc_tx_send+0x13c>)
   80330:	47a0      	blx	r4
			udi_cdc_data_sent);
}
   80332:	b002      	add	sp, #8
   80334:	bd70      	pop	{r4, r5, r6, pc}
   80336:	bf00      	nop
   80338:	20001ca8 	.word	0x20001ca8
   8033c:	00085a45 	.word	0x00085a45
   80340:	20001ca4 	.word	0x20001ca4
   80344:	00085a9d 	.word	0x00085a9d
   80348:	20000a80 	.word	0x20000a80
   8034c:	20001ca0 	.word	0x20001ca0
   80350:	20001c9c 	.word	0x20001c9c
   80354:	20001474 	.word	0x20001474
   80358:	20001898 	.word	0x20001898
   8035c:	00085a8d 	.word	0x00085a8d
   80360:	0008036d 	.word	0x0008036d
   80364:	2000189c 	.word	0x2000189c
   80368:	00085d01 	.word	0x00085d01

0008036c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8036c:	b100      	cbz	r0, 80370 <udi_cdc_data_sent+0x4>
   8036e:	4770      	bx	lr
{
   80370:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80372:	4b07      	ldr	r3, [pc, #28]	; (80390 <udi_cdc_data_sent+0x24>)
   80374:	781b      	ldrb	r3, [r3, #0]
   80376:	fab3 f383 	clz	r3, r3
   8037a:	095b      	lsrs	r3, r3, #5
   8037c:	4a05      	ldr	r2, [pc, #20]	; (80394 <udi_cdc_data_sent+0x28>)
   8037e:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80382:	4b05      	ldr	r3, [pc, #20]	; (80398 <udi_cdc_data_sent+0x2c>)
   80384:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <udi_cdc_data_sent+0x30>)
   80388:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <udi_cdc_data_sent+0x34>)
   8038c:	4798      	blx	r3
   8038e:	bd08      	pop	{r3, pc}
   80390:	20001ca0 	.word	0x20001ca0
   80394:	20001c9c 	.word	0x20001c9c
   80398:	20001898 	.word	0x20001898
   8039c:	20001ca8 	.word	0x20001ca8
   803a0:	0008022d 	.word	0x0008022d

000803a4 <udi_cdc_data_sof_notify>:
{
   803a4:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
   803a6:	2000      	movs	r0, #0
   803a8:	4b01      	ldr	r3, [pc, #4]	; (803b0 <udi_cdc_data_sof_notify+0xc>)
   803aa:	4798      	blx	r3
   803ac:	bd08      	pop	{r3, pc}
   803ae:	bf00      	nop
   803b0:	0008022d 	.word	0x0008022d

000803b4 <udi_cdc_data_disable>:
{
   803b4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   803b6:	4a06      	ldr	r2, [pc, #24]	; (803d0 <udi_cdc_data_disable+0x1c>)
   803b8:	7813      	ldrb	r3, [r2, #0]
   803ba:	3b01      	subs	r3, #1
   803bc:	b2db      	uxtb	r3, r3
   803be:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803c0:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803c2:	4b04      	ldr	r3, [pc, #16]	; (803d4 <udi_cdc_data_disable+0x20>)
   803c4:	4798      	blx	r3
	udi_cdc_data_running = false;
   803c6:	2200      	movs	r2, #0
   803c8:	4b03      	ldr	r3, [pc, #12]	; (803d8 <udi_cdc_data_disable+0x24>)
   803ca:	701a      	strb	r2, [r3, #0]
   803cc:	bd08      	pop	{r3, pc}
   803ce:	bf00      	nop
   803d0:	20001480 	.word	0x20001480
   803d4:	00082b0d 	.word	0x00082b0d
   803d8:	20001476 	.word	0x20001476

000803dc <udi_cdc_line_coding_received>:
{
   803dc:	b508      	push	{r3, lr}
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   803de:	4902      	ldr	r1, [pc, #8]	; (803e8 <udi_cdc_line_coding_received+0xc>)
   803e0:	2000      	movs	r0, #0
   803e2:	4b02      	ldr	r3, [pc, #8]	; (803ec <udi_cdc_line_coding_received+0x10>)
   803e4:	4798      	blx	r3
   803e6:	bd08      	pop	{r3, pc}
   803e8:	20001478 	.word	0x20001478
   803ec:	00082b9d 	.word	0x00082b9d

000803f0 <udi_cdc_multi_get_nb_received_data>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   803f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   803f4:	b672      	cpsid	i
   803f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   803fa:	2100      	movs	r1, #0
   803fc:	4a0a      	ldr	r2, [pc, #40]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   803fe:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80400:	4a0a      	ldr	r2, [pc, #40]	; (8042c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80402:	8810      	ldrh	r0, [r2, #0]
   80404:	b282      	uxth	r2, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80406:	490a      	ldr	r1, [pc, #40]	; (80430 <udi_cdc_multi_get_nb_received_data+0x40>)
   80408:	7809      	ldrb	r1, [r1, #0]
   8040a:	b2c9      	uxtb	r1, r1
   8040c:	4809      	ldr	r0, [pc, #36]	; (80434 <udi_cdc_multi_get_nb_received_data+0x44>)
   8040e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
   80412:	b280      	uxth	r0, r0
   80414:	1a80      	subs	r0, r0, r2
	if (cpu_irq_is_enabled_flags(flags))
   80416:	b92b      	cbnz	r3, 80424 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80418:	2201      	movs	r2, #1
   8041a:	4b03      	ldr	r3, [pc, #12]	; (80428 <udi_cdc_multi_get_nb_received_data+0x38>)
   8041c:	701a      	strb	r2, [r3, #0]
   8041e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80422:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	20000a80 	.word	0x20000a80
   8042c:	2000188c 	.word	0x2000188c
   80430:	20001888 	.word	0x20001888
   80434:	20001884 	.word	0x20001884

00080438 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80438:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8043a:	4b03      	ldr	r3, [pc, #12]	; (80448 <udi_cdc_multi_is_rx_ready+0x10>)
   8043c:	4798      	blx	r3
}
   8043e:	3000      	adds	r0, #0
   80440:	bf18      	it	ne
   80442:	2001      	movne	r0, #1
   80444:	bd08      	pop	{r3, pc}
   80446:	bf00      	nop
   80448:	000803f1 	.word	0x000803f1

0008044c <udi_cdc_rx_start>:
{
   8044c:	b510      	push	{r4, lr}
   8044e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80450:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   80454:	b672      	cpsid	i
   80456:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8045a:	2100      	movs	r1, #0
   8045c:	4a21      	ldr	r2, [pc, #132]	; (804e4 <udi_cdc_rx_start+0x98>)
   8045e:	7011      	strb	r1, [r2, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80460:	4a21      	ldr	r2, [pc, #132]	; (804e8 <udi_cdc_rx_start+0x9c>)
   80462:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
   80464:	4a21      	ldr	r2, [pc, #132]	; (804ec <udi_cdc_rx_start+0xa0>)
   80466:	7812      	ldrb	r2, [r2, #0]
   80468:	b94a      	cbnz	r2, 8047e <udi_cdc_rx_start+0x32>
   8046a:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8046c:	4a20      	ldr	r2, [pc, #128]	; (804f0 <udi_cdc_rx_start+0xa4>)
   8046e:	8811      	ldrh	r1, [r2, #0]
   80470:	b289      	uxth	r1, r1
   80472:	4a20      	ldr	r2, [pc, #128]	; (804f4 <udi_cdc_rx_start+0xa8>)
   80474:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80478:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047a:	4291      	cmp	r1, r2
   8047c:	d20a      	bcs.n	80494 <udi_cdc_rx_start+0x48>
	if (cpu_irq_is_enabled_flags(flags))
   8047e:	2b00      	cmp	r3, #0
   80480:	d12d      	bne.n	804de <udi_cdc_rx_start+0x92>
		cpu_irq_enable();
   80482:	2201      	movs	r2, #1
   80484:	4b17      	ldr	r3, [pc, #92]	; (804e4 <udi_cdc_rx_start+0x98>)
   80486:	701a      	strb	r2, [r3, #0]
   80488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8048c:	b662      	cpsie	i
		return false;
   8048e:	2000      	movs	r0, #0
}
   80490:	b002      	add	sp, #8
   80492:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
   80494:	2100      	movs	r1, #0
   80496:	4a16      	ldr	r2, [pc, #88]	; (804f0 <udi_cdc_rx_start+0xa4>)
   80498:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   8049a:	fab4 f284 	clz	r2, r4
   8049e:	0952      	lsrs	r2, r2, #5
   804a0:	4911      	ldr	r1, [pc, #68]	; (804e8 <udi_cdc_rx_start+0x9c>)
   804a2:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
   804a4:	2101      	movs	r1, #1
   804a6:	4a11      	ldr	r2, [pc, #68]	; (804ec <udi_cdc_rx_start+0xa0>)
   804a8:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
   804aa:	b923      	cbnz	r3, 804b6 <udi_cdc_rx_start+0x6a>
		cpu_irq_enable();
   804ac:	4b0d      	ldr	r3, [pc, #52]	; (804e4 <udi_cdc_rx_start+0x98>)
   804ae:	7019      	strb	r1, [r3, #0]
   804b0:	f3bf 8f5f 	dmb	sy
   804b4:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   804b6:	2000      	movs	r0, #0
   804b8:	4b0f      	ldr	r3, [pc, #60]	; (804f8 <udi_cdc_rx_start+0xac>)
   804ba:	4798      	blx	r3
   804bc:	b958      	cbnz	r0, 804d6 <udi_cdc_rx_start+0x8a>
	return udd_ep_run(ep,
   804be:	4b0f      	ldr	r3, [pc, #60]	; (804fc <udi_cdc_rx_start+0xb0>)
   804c0:	9300      	str	r3, [sp, #0]
   804c2:	f44f 7300 	mov.w	r3, #512	; 0x200
   804c6:	4a0e      	ldr	r2, [pc, #56]	; (80500 <udi_cdc_rx_start+0xb4>)
   804c8:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   804cc:	2101      	movs	r1, #1
   804ce:	2006      	movs	r0, #6
   804d0:	4c0c      	ldr	r4, [pc, #48]	; (80504 <udi_cdc_rx_start+0xb8>)
   804d2:	47a0      	blx	r4
   804d4:	e7dc      	b.n	80490 <udi_cdc_rx_start+0x44>
		UDI_CDC_RX_NOTIFY(port);
   804d6:	2000      	movs	r0, #0
   804d8:	4b0b      	ldr	r3, [pc, #44]	; (80508 <udi_cdc_rx_start+0xbc>)
   804da:	4798      	blx	r3
   804dc:	e7ef      	b.n	804be <udi_cdc_rx_start+0x72>
		return false;
   804de:	2000      	movs	r0, #0
   804e0:	e7d6      	b.n	80490 <udi_cdc_rx_start+0x44>
   804e2:	bf00      	nop
   804e4:	20000a80 	.word	0x20000a80
   804e8:	20001888 	.word	0x20001888
   804ec:	20001890 	.word	0x20001890
   804f0:	2000188c 	.word	0x2000188c
   804f4:	20001884 	.word	0x20001884
   804f8:	00080439 	.word	0x00080439
   804fc:	000805a1 	.word	0x000805a1
   80500:	20001484 	.word	0x20001484
   80504:	00085d01 	.word	0x00085d01
   80508:	00082b25 	.word	0x00082b25

0008050c <udi_cdc_data_enable>:
{
   8050c:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
   8050e:	2400      	movs	r4, #0
   80510:	4b16      	ldr	r3, [pc, #88]	; (8056c <udi_cdc_data_enable+0x60>)
   80512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   80514:	4b16      	ldr	r3, [pc, #88]	; (80570 <udi_cdc_data_enable+0x64>)
   80516:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80518:	4b16      	ldr	r3, [pc, #88]	; (80574 <udi_cdc_data_enable+0x68>)
   8051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   8051c:	4b16      	ldr	r3, [pc, #88]	; (80578 <udi_cdc_data_enable+0x6c>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80520:	4b16      	ldr	r3, [pc, #88]	; (8057c <udi_cdc_data_enable+0x70>)
   80522:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   80524:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   80526:	4b16      	ldr	r3, [pc, #88]	; (80580 <udi_cdc_data_enable+0x74>)
   80528:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   8052a:	4620      	mov	r0, r4
   8052c:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x78>)
   8052e:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   80530:	4b15      	ldr	r3, [pc, #84]	; (80588 <udi_cdc_data_enable+0x7c>)
   80532:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   80534:	4b15      	ldr	r3, [pc, #84]	; (8058c <udi_cdc_data_enable+0x80>)
   80536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <udi_cdc_data_enable+0x84>)
   8053a:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8053c:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   8053e:	4b15      	ldr	r3, [pc, #84]	; (80594 <udi_cdc_data_enable+0x88>)
   80540:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   80542:	4620      	mov	r0, r4
   80544:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x8c>)
   80546:	4798      	blx	r3
   80548:	4601      	mov	r1, r0
   8054a:	b140      	cbz	r0, 8055e <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
   8054c:	4a07      	ldr	r2, [pc, #28]	; (8056c <udi_cdc_data_enable+0x60>)
   8054e:	7813      	ldrb	r3, [r2, #0]
   80550:	3301      	adds	r3, #1
   80552:	b2db      	uxtb	r3, r3
   80554:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	b2db      	uxtb	r3, r3
   8055a:	2b01      	cmp	r3, #1
   8055c:	d001      	beq.n	80562 <udi_cdc_data_enable+0x56>
}
   8055e:	4608      	mov	r0, r1
   80560:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
   80562:	2201      	movs	r2, #1
   80564:	4b0d      	ldr	r3, [pc, #52]	; (8059c <udi_cdc_data_enable+0x90>)
   80566:	701a      	strb	r2, [r3, #0]
   80568:	e7f9      	b.n	8055e <udi_cdc_data_enable+0x52>
   8056a:	bf00      	nop
   8056c:	20001480 	.word	0x20001480
   80570:	20001ca8 	.word	0x20001ca8
   80574:	20001898 	.word	0x20001898
   80578:	20001ca0 	.word	0x20001ca0
   8057c:	20001c9c 	.word	0x20001c9c
   80580:	20001ca4 	.word	0x20001ca4
   80584:	0008022d 	.word	0x0008022d
   80588:	20001890 	.word	0x20001890
   8058c:	20001888 	.word	0x20001888
   80590:	20001884 	.word	0x20001884
   80594:	2000188c 	.word	0x2000188c
   80598:	0008044d 	.word	0x0008044d
   8059c:	20001476 	.word	0x20001476

000805a0 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   805a0:	b9f0      	cbnz	r0, 805e0 <udi_cdc_data_received+0x40>
{
   805a2:	b510      	push	{r4, lr}
   805a4:	b082      	sub	sp, #8
   805a6:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805a8:	4b0e      	ldr	r3, [pc, #56]	; (805e4 <udi_cdc_data_received+0x44>)
   805aa:	781c      	ldrb	r4, [r3, #0]
   805ac:	fab4 f484 	clz	r4, r4
   805b0:	0964      	lsrs	r4, r4, #5
	if (!n) {
   805b2:	b151      	cbz	r1, 805ca <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805b4:	b289      	uxth	r1, r1
   805b6:	4b0c      	ldr	r3, [pc, #48]	; (805e8 <udi_cdc_data_received+0x48>)
   805b8:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805bc:	2000      	movs	r0, #0
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <udi_cdc_data_received+0x4c>)
   805c0:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805c2:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <udi_cdc_data_received+0x50>)
   805c4:	4798      	blx	r3
}
   805c6:	b002      	add	sp, #8
   805c8:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
   805ca:	4b0a      	ldr	r3, [pc, #40]	; (805f4 <udi_cdc_data_received+0x54>)
   805cc:	9300      	str	r3, [sp, #0]
   805ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x58>)
   805d4:	eb02 2244 	add.w	r2, r2, r4, lsl #9
   805d8:	2101      	movs	r1, #1
   805da:	4c08      	ldr	r4, [pc, #32]	; (805fc <udi_cdc_data_received+0x5c>)
   805dc:	47a0      	blx	r4
		return;
   805de:	e7f2      	b.n	805c6 <udi_cdc_data_received+0x26>
   805e0:	4770      	bx	lr
   805e2:	bf00      	nop
   805e4:	20001888 	.word	0x20001888
   805e8:	20001884 	.word	0x20001884
   805ec:	20001890 	.word	0x20001890
   805f0:	0008044d 	.word	0x0008044d
   805f4:	000805a1 	.word	0x000805a1
   805f8:	20001484 	.word	0x20001484
   805fc:	00085d01 	.word	0x00085d01

00080600 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   80600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80604:	4615      	mov	r5, r2
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
   80606:	4688      	mov	r8, r1
	cpu_irq_disable();
   80608:	4f20      	ldr	r7, [pc, #128]	; (8068c <udi_cdc_multi_read_buf+0x8c>)
   8060a:	f04f 0b00 	mov.w	fp, #0
   8060e:	46da      	mov	sl, fp
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80610:	4e1f      	ldr	r6, [pc, #124]	; (80690 <udi_cdc_multi_read_buf+0x90>)
	buf_sel = udi_cdc_rx_buf_sel[port];
   80612:	f8df 9094 	ldr.w	r9, [pc, #148]	; 806a8 <udi_cdc_multi_read_buf+0xa8>
   80616:	e019      	b.n	8064c <udi_cdc_multi_read_buf+0x4c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   80618:	4a1e      	ldr	r2, [pc, #120]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   8061a:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
   8061e:	b2a4      	uxth	r4, r4
   80620:	1a64      	subs	r4, r4, r1
   80622:	42ac      	cmp	r4, r5
   80624:	bf28      	it	cs
   80626:	462c      	movcs	r4, r5
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   80628:	eb01 2143 	add.w	r1, r1, r3, lsl #9
   8062c:	4622      	mov	r2, r4
   8062e:	4b1a      	ldr	r3, [pc, #104]	; (80698 <udi_cdc_multi_read_buf+0x98>)
   80630:	4419      	add	r1, r3
   80632:	4640      	mov	r0, r8
   80634:	4b19      	ldr	r3, [pc, #100]	; (8069c <udi_cdc_multi_read_buf+0x9c>)
   80636:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   80638:	8833      	ldrh	r3, [r6, #0]
   8063a:	4423      	add	r3, r4
   8063c:	b29b      	uxth	r3, r3
   8063e:	8033      	strh	r3, [r6, #0]
	ptr_buf += copy_nb;
   80640:	44a0      	add	r8, r4
	size -= copy_nb;
   80642:	1b2d      	subs	r5, r5, r4
	udi_cdc_rx_start(port);
   80644:	4658      	mov	r0, fp
   80646:	4b16      	ldr	r3, [pc, #88]	; (806a0 <udi_cdc_multi_read_buf+0xa0>)
   80648:	4798      	blx	r3

	if (size) {
   8064a:	b1dd      	cbz	r5, 80684 <udi_cdc_multi_read_buf+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8064c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   80650:	b672      	cpsid	i
   80652:	f3bf 8f5f 	dmb	sy
   80656:	f887 a000 	strb.w	sl, [r7]
	pos = udi_cdc_rx_pos[port];
   8065a:	8831      	ldrh	r1, [r6, #0]
   8065c:	b289      	uxth	r1, r1
	buf_sel = udi_cdc_rx_buf_sel[port];
   8065e:	f899 3000 	ldrb.w	r3, [r9]
   80662:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   80664:	4a0b      	ldr	r2, [pc, #44]	; (80694 <udi_cdc_multi_read_buf+0x94>)
   80666:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   8066a:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8066c:	b920      	cbnz	r0, 80678 <udi_cdc_multi_read_buf+0x78>
		cpu_irq_enable();
   8066e:	2001      	movs	r0, #1
   80670:	7038      	strb	r0, [r7, #0]
   80672:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80676:	b662      	cpsie	i
	while (again) {
   80678:	4291      	cmp	r1, r2
   8067a:	d3cd      	bcc.n	80618 <udi_cdc_multi_read_buf+0x18>
		if (!udi_cdc_data_running) {
   8067c:	4b09      	ldr	r3, [pc, #36]	; (806a4 <udi_cdc_multi_read_buf+0xa4>)
   8067e:	781b      	ldrb	r3, [r3, #0]
   80680:	2b00      	cmp	r3, #0
   80682:	d1e3      	bne.n	8064c <udi_cdc_multi_read_buf+0x4c>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   80684:	4628      	mov	r0, r5
   80686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8068a:	bf00      	nop
   8068c:	20000a80 	.word	0x20000a80
   80690:	2000188c 	.word	0x2000188c
   80694:	20001884 	.word	0x20001884
   80698:	20001484 	.word	0x20001484
   8069c:	00086c89 	.word	0x00086c89
   806a0:	0008044d 	.word	0x0008044d
   806a4:	20001476 	.word	0x20001476
   806a8:	20001888 	.word	0x20001888

000806ac <udi_cdc_multi_get_free_tx_buffer>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   806b0:	b672      	cpsid	i
   806b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   806b6:	2100      	movs	r1, #0
   806b8:	4b13      	ldr	r3, [pc, #76]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806ba:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806bc:	4b13      	ldr	r3, [pc, #76]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   806c2:	4913      	ldr	r1, [pc, #76]	; (80710 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   806c4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   806c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   806cc:	d009      	beq.n	806e2 <udi_cdc_multi_get_free_tx_buffer+0x36>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   806ce:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
	if (cpu_irq_is_enabled_flags(flags))
   806d2:	b92a      	cbnz	r2, 806e0 <udi_cdc_multi_get_free_tx_buffer+0x34>
		cpu_irq_enable();
   806d4:	2201      	movs	r2, #1
   806d6:	4b0c      	ldr	r3, [pc, #48]	; (80708 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   806d8:	701a      	strb	r2, [r3, #0]
   806da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   806de:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   806e0:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   806e2:	490c      	ldr	r1, [pc, #48]	; (80714 <udi_cdc_multi_get_free_tx_buffer+0x68>)
   806e4:	7809      	ldrb	r1, [r1, #0]
   806e6:	2900      	cmp	r1, #0
   806e8:	d1f1      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   806ea:	490b      	ldr	r1, [pc, #44]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806ec:	7809      	ldrb	r1, [r1, #0]
   806ee:	2900      	cmp	r1, #0
   806f0:	d1ed      	bne.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
			udi_cdc_tx_both_buf_to_send[port] = true;
   806f2:	2001      	movs	r0, #1
   806f4:	4908      	ldr	r1, [pc, #32]	; (80718 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   806f6:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   806f8:	fab3 f383 	clz	r3, r3
   806fc:	095b      	lsrs	r3, r3, #5
   806fe:	4903      	ldr	r1, [pc, #12]	; (8070c <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80700:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80702:	2000      	movs	r0, #0
   80704:	e7e3      	b.n	806ce <udi_cdc_multi_get_free_tx_buffer+0x22>
   80706:	bf00      	nop
   80708:	20000a80 	.word	0x20000a80
   8070c:	20001ca0 	.word	0x20001ca0
   80710:	20001c9c 	.word	0x20001c9c
   80714:	20001ca8 	.word	0x20001ca8
   80718:	20001898 	.word	0x20001898

0008071c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   8071c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   8071e:	4b03      	ldr	r3, [pc, #12]	; (8072c <udi_cdc_multi_is_tx_ready+0x10>)
   80720:	4798      	blx	r3
}
   80722:	3000      	adds	r0, #0
   80724:	bf18      	it	ne
   80726:	2001      	movne	r0, #1
   80728:	bd08      	pop	{r3, pc}
   8072a:	bf00      	nop
   8072c:	000806ad 	.word	0x000806ad

00080730 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   80736:	4b1b      	ldr	r3, [pc, #108]	; (807a4 <udi_cdc_multi_putc+0x74>)
   80738:	799d      	ldrb	r5, [r3, #6]
   8073a:	2d09      	cmp	r5, #9
   8073c:	bf14      	ite	ne
   8073e:	2500      	movne	r5, #0
   80740:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80742:	4e19      	ldr	r6, [pc, #100]	; (807a8 <udi_cdc_multi_putc+0x78>)
	cpu_irq_disable();
   80744:	4f19      	ldr	r7, [pc, #100]	; (807ac <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80746:	f8df 8074 	ldr.w	r8, [pc, #116]	; 807bc <udi_cdc_multi_putc+0x8c>
   8074a:	e01d      	b.n	80788 <udi_cdc_multi_putc+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8074c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   80750:	b672      	cpsid	i
   80752:	f3bf 8f5f 	dmb	sy
   80756:	2300      	movs	r3, #0
   80758:	703b      	strb	r3, [r7, #0]
   8075a:	f898 3000 	ldrb.w	r3, [r8]
   8075e:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   80760:	4913      	ldr	r1, [pc, #76]	; (807b0 <udi_cdc_multi_putc+0x80>)
   80762:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
   80766:	f100 0e01 	add.w	lr, r0, #1
   8076a:	f821 e013 	strh.w	lr, [r1, r3, lsl #1]
   8076e:	4911      	ldr	r1, [pc, #68]	; (807b4 <udi_cdc_multi_putc+0x84>)
   80770:	eb01 2343 	add.w	r3, r1, r3, lsl #9
   80774:	541c      	strb	r4, [r3, r0]
	if (cpu_irq_is_enabled_flags(flags))
   80776:	b922      	cbnz	r2, 80782 <udi_cdc_multi_putc+0x52>
		cpu_irq_enable();
   80778:	2301      	movs	r3, #1
   8077a:	703b      	strb	r3, [r7, #0]
   8077c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80780:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   80782:	b15d      	cbz	r5, 8079c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   80784:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
   80786:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
   80788:	2000      	movs	r0, #0
   8078a:	47b0      	blx	r6
   8078c:	2800      	cmp	r0, #0
   8078e:	d1dd      	bne.n	8074c <udi_cdc_multi_putc+0x1c>
		if (!udi_cdc_data_running) {
   80790:	4b09      	ldr	r3, [pc, #36]	; (807b8 <udi_cdc_multi_putc+0x88>)
   80792:	781b      	ldrb	r3, [r3, #0]
   80794:	2b00      	cmp	r3, #0
   80796:	d1f7      	bne.n	80788 <udi_cdc_multi_putc+0x58>
   80798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
   8079c:	2001      	movs	r0, #1
}
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a2:	bf00      	nop
   807a4:	20001478 	.word	0x20001478
   807a8:	0008071d 	.word	0x0008071d
   807ac:	20000a80 	.word	0x20000a80
   807b0:	20001c9c 	.word	0x20001c9c
   807b4:	2000189c 	.word	0x2000189c
   807b8:	20001476 	.word	0x20001476
   807bc:	20001ca0 	.word	0x20001ca0

000807c0 <switch_configurations>:
};

// hack to get around windows being unable to handle multiple configurations
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   807c0:	4b06      	ldr	r3, [pc, #24]	; (807dc <switch_configurations+0x1c>)
   807c2:	685a      	ldr	r2, [r3, #4]
   807c4:	4906      	ldr	r1, [pc, #24]	; (807e0 <switch_configurations+0x20>)
   807c6:	6011      	str	r1, [r2, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   807c8:	6859      	ldr	r1, [r3, #4]
   807ca:	4a06      	ldr	r2, [pc, #24]	; (807e4 <switch_configurations+0x24>)
   807cc:	604a      	str	r2, [r1, #4]
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   807ce:	6919      	ldr	r1, [r3, #16]
   807d0:	4805      	ldr	r0, [pc, #20]	; (807e8 <switch_configurations+0x28>)
   807d2:	6008      	str	r0, [r1, #0]
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
   807d4:	691b      	ldr	r3, [r3, #16]
   807d6:	605a      	str	r2, [r3, #4]
   807d8:	4770      	bx	lr
   807da:	bf00      	nop
   807dc:	200001dc 	.word	0x200001dc
   807e0:	20000268 	.word	0x20000268
   807e4:	200001d4 	.word	0x200001d4
   807e8:	20000330 	.word	0x20000330

000807ec <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   807ec:	2300      	movs	r3, #0
   807ee:	6043      	str	r3, [r0, #4]
   807f0:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   807f2:	6083      	str	r3, [r0, #8]
   807f4:	4770      	bx	lr

000807f6 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   807f6:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   807f8:	6804      	ldr	r4, [r0, #0]
    newhead++;
   807fa:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   807fc:	2cc8      	cmp	r4, #200	; 0xc8
   807fe:	bf28      	it	cs
   80800:	2400      	movcs	r4, #0
    while (newhead == cbuf->tail)
   80802:	6843      	ldr	r3, [r0, #4]
   80804:	42a3      	cmp	r3, r4
   80806:	d105      	bne.n	80814 <add_to_circ_buf+0x1e>
    {
        if (!block)
   80808:	2a00      	cmp	r2, #0
   8080a:	d1fa      	bne.n	80802 <add_to_circ_buf+0xc>
        {
            cbuf->dropped++;
   8080c:	6883      	ldr	r3, [r0, #8]
   8080e:	3301      	adds	r3, #1
   80810:	6083      	str	r3, [r0, #8]
            return;
   80812:	e003      	b.n	8081c <add_to_circ_buf+0x26>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   80814:	6803      	ldr	r3, [r0, #0]
   80816:	4403      	add	r3, r0
   80818:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   8081a:	6004      	str	r4, [r0, #0]
}
   8081c:	bc10      	pop	{r4}
   8081e:	4770      	bx	lr

00080820 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   80820:	4602      	mov	r2, r0
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   80822:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   80824:	6801      	ldr	r1, [r0, #0]
   80826:	428b      	cmp	r3, r1
   80828:	d007      	beq.n	8083a <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   8082a:	1c59      	adds	r1, r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   8082c:	29c8      	cmp	r1, #200	; 0xc8
   8082e:	bf28      	it	cs
   80830:	2100      	movcs	r1, #0
    uint8_t retval = cbuf->buf[newtail];
   80832:	4403      	add	r3, r0
   80834:	7b18      	ldrb	r0, [r3, #12]
    cbuf->tail = newtail;
   80836:	6051      	str	r1, [r2, #4]

    return retval;
   80838:	4770      	bx	lr
        return SERIAL_ERR;
   8083a:	20ff      	movs	r0, #255	; 0xff
}
   8083c:	4770      	bx	lr

0008083e <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8083e:	6802      	ldr	r2, [r0, #0]
    return (head != cbuf->tail);
   80840:	6840      	ldr	r0, [r0, #4]
}
   80842:	1a10      	subs	r0, r2, r0
   80844:	bf18      	it	ne
   80846:	2001      	movne	r0, #1
   80848:	4770      	bx	lr

0008084a <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   8084a:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8084c:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8084e:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   80850:	bf48      	it	mi
   80852:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   80854:	4770      	bx	lr
	...

00080858 <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   80858:	b538      	push	{r3, r4, r5, lr}
   8085a:	4605      	mov	r5, r0
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
	#else
	spi_enable_clock(SPI);
   8085c:	4c18      	ldr	r4, [pc, #96]	; (808c0 <fpga_program_spi_setup1+0x68>)
   8085e:	4620      	mov	r0, r4
   80860:	4b18      	ldr	r3, [pc, #96]	; (808c4 <fpga_program_spi_setup1+0x6c>)
   80862:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   80864:	2380      	movs	r3, #128	; 0x80
   80866:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80868:	6863      	ldr	r3, [r4, #4]
   8086a:	f043 0301 	orr.w	r3, r3, #1
   8086e:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80870:	6863      	ldr	r3, [r4, #4]
   80872:	f043 0310 	orr.w	r3, r3, #16
   80876:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80878:	6863      	ldr	r3, [r4, #4]
   8087a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8087e:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80880:	2200      	movs	r2, #0
   80882:	4611      	mov	r1, r2
   80884:	4620      	mov	r0, r4
   80886:	4b10      	ldr	r3, [pc, #64]	; (808c8 <fpga_program_spi_setup1+0x70>)
   80888:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   8088a:	2201      	movs	r2, #1
   8088c:	2100      	movs	r1, #0
   8088e:	4620      	mov	r0, r4
   80890:	4b0e      	ldr	r3, [pc, #56]	; (808cc <fpga_program_spi_setup1+0x74>)
   80892:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80894:	490e      	ldr	r1, [pc, #56]	; (808d0 <fpga_program_spi_setup1+0x78>)
   80896:	4628      	mov	r0, r5
   80898:	4b0e      	ldr	r3, [pc, #56]	; (808d4 <fpga_program_spi_setup1+0x7c>)
   8089a:	4798      	blx	r3
   8089c:	b2c2      	uxtb	r2, r0
   8089e:	2100      	movs	r1, #0
   808a0:	4620      	mov	r0, r4
   808a2:	4b0d      	ldr	r3, [pc, #52]	; (808d8 <fpga_program_spi_setup1+0x80>)
   808a4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   808a6:	2301      	movs	r3, #1
   808a8:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   808aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808ae:	200e      	movs	r0, #14
   808b0:	4c0a      	ldr	r4, [pc, #40]	; (808dc <fpga_program_spi_setup1+0x84>)
   808b2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   808b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808b8:	200f      	movs	r0, #15
   808ba:	47a0      	blx	r4
   808bc:	bd38      	pop	{r3, r4, r5, pc}
   808be:	bf00      	nop
   808c0:	40008000 	.word	0x40008000
   808c4:	00084cb1 	.word	0x00084cb1
   808c8:	00084d33 	.word	0x00084d33
   808cc:	00084d51 	.word	0x00084d51
   808d0:	05b8d800 	.word	0x05b8d800
   808d4:	00084d6f 	.word	0x00084d6f
   808d8:	00084d85 	.word	0x00084d85
   808dc:	000848cd 	.word	0x000848cd

000808e0 <fpga_program_spi_sendbyte>:
	#endif

}

void fpga_program_spi_sendbyte(uint8_t databyte)
{
   808e0:	b510      	push	{r4, lr}
	#if AVRISP_USEUART
	usart_putchar(AVRISP_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   808e2:	2300      	movs	r3, #0
   808e4:	461a      	mov	r2, r3
   808e6:	4601      	mov	r1, r0
   808e8:	4801      	ldr	r0, [pc, #4]	; (808f0 <fpga_program_spi_sendbyte+0x10>)
   808ea:	4c02      	ldr	r4, [pc, #8]	; (808f4 <fpga_program_spi_sendbyte+0x14>)
   808ec:	47a0      	blx	r4
   808ee:	bd10      	pop	{r4, pc}
   808f0:	40008000 	.word	0x40008000
   808f4:	00084cff 	.word	0x00084cff

000808f8 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   808f8:	b538      	push	{r3, r4, r5, lr}
   808fa:	4605      	mov	r5, r0
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   808fc:	2008      	movs	r0, #8
   808fe:	4b19      	ldr	r3, [pc, #100]	; (80964 <fpga_program_setup1+0x6c>)
   80900:	4798      	blx	r3
	gpio_configure_pin(PIN_FPGA_DO_GPIO, PIN_FPGA_DO_USART_FLAGS);
	
	usart_enable_tx(FPGA_PROG_USART);
	#else

	spi_enable_clock(SPI);
   80902:	4c19      	ldr	r4, [pc, #100]	; (80968 <fpga_program_setup1+0x70>)
   80904:	4620      	mov	r0, r4
   80906:	4b19      	ldr	r3, [pc, #100]	; (8096c <fpga_program_setup1+0x74>)
   80908:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   8090a:	2380      	movs	r3, #128	; 0x80
   8090c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8090e:	6863      	ldr	r3, [r4, #4]
   80910:	f043 0301 	orr.w	r3, r3, #1
   80914:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80916:	6863      	ldr	r3, [r4, #4]
   80918:	f043 0310 	orr.w	r3, r3, #16
   8091c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8091e:	6863      	ldr	r3, [r4, #4]
   80920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80924:	6063      	str	r3, [r4, #4]
	spi_reset(SPI);
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);

	spi_set_clock_polarity(SPI, 0, 0);
   80926:	2200      	movs	r2, #0
   80928:	4611      	mov	r1, r2
   8092a:	4620      	mov	r0, r4
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <fpga_program_setup1+0x78>)
   8092e:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80930:	2201      	movs	r2, #1
   80932:	2100      	movs	r1, #0
   80934:	4620      	mov	r0, r4
   80936:	4b0f      	ldr	r3, [pc, #60]	; (80974 <fpga_program_setup1+0x7c>)
   80938:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   8093a:	490f      	ldr	r1, [pc, #60]	; (80978 <fpga_program_setup1+0x80>)
   8093c:	4628      	mov	r0, r5
   8093e:	4b0f      	ldr	r3, [pc, #60]	; (8097c <fpga_program_setup1+0x84>)
   80940:	4798      	blx	r3
   80942:	b2c2      	uxtb	r2, r0
   80944:	2100      	movs	r1, #0
   80946:	4620      	mov	r0, r4
   80948:	4b0d      	ldr	r3, [pc, #52]	; (80980 <fpga_program_setup1+0x88>)
   8094a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8094c:	2301      	movs	r3, #1
   8094e:	6023      	str	r3, [r4, #0]

	spi_enable(SPI);

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80950:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80954:	200e      	movs	r0, #14
   80956:	4c0b      	ldr	r4, [pc, #44]	; (80984 <fpga_program_setup1+0x8c>)
   80958:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8095a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8095e:	200f      	movs	r0, #15
   80960:	47a0      	blx	r4
   80962:	bd38      	pop	{r3, r4, r5, pc}
   80964:	00084891 	.word	0x00084891
   80968:	40008000 	.word	0x40008000
   8096c:	00084cb1 	.word	0x00084cb1
   80970:	00084d33 	.word	0x00084d33
   80974:	00084d51 	.word	0x00084d51
   80978:	05b8d800 	.word	0x05b8d800
   8097c:	00084d6f 	.word	0x00084d6f
   80980:	00084d85 	.word	0x00084d85
   80984:	000848cd 	.word	0x000848cd

00080988 <fpga_program_setup2>:
#endif
}

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   80988:	b508      	push	{r3, lr}
    FPGA_NPROG_HIGH();
   8098a:	2008      	movs	r0, #8
   8098c:	4b01      	ldr	r3, [pc, #4]	; (80994 <fpga_program_setup2+0xc>)
   8098e:	4798      	blx	r3
   80990:	bd08      	pop	{r3, pc}
   80992:	bf00      	nop
   80994:	00084877 	.word	0x00084877

00080998 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   80998:	b510      	push	{r4, lr}
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
   8099a:	2300      	movs	r3, #0
   8099c:	461a      	mov	r2, r3
   8099e:	4601      	mov	r1, r0
   809a0:	4801      	ldr	r0, [pc, #4]	; (809a8 <fpga_program_sendbyte+0x10>)
   809a2:	4c02      	ldr	r4, [pc, #8]	; (809ac <fpga_program_sendbyte+0x14>)
   809a4:	47a0      	blx	r4
   809a6:	bd10      	pop	{r4, pc}
   809a8:	40008000 	.word	0x40008000
   809ac:	00084cff 	.word	0x00084cff

000809b0 <ISPProtocol_ProgramMemory>:
		uint8_t  ProgrammingCommands[3];
		uint8_t  PollValue1;
		uint8_t  PollValue2;
	} Write_Memory_Params; 

	if (udd_g_ctrlreq.payload_size != 9){
   809b0:	4b91      	ldr	r3, [pc, #580]	; (80bf8 <ISPProtocol_ProgramMemory+0x248>)
   809b2:	899b      	ldrh	r3, [r3, #12]
   809b4:	2b09      	cmp	r3, #9
   809b6:	d000      	beq.n	809ba <ISPProtocol_ProgramMemory+0xa>
   809b8:	4770      	bx	lr
{
   809ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809be:	b08d      	sub	sp, #52	; 0x34
   809c0:	4602      	mov	r2, r0
   809c2:	460c      	mov	r4, r1
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_Memory_Params, udd_g_ctrlreq.payload, sizeof(Write_Memory_Params));
   809c4:	4b8c      	ldr	r3, [pc, #560]	; (80bf8 <ISPProtocol_ProgramMemory+0x248>)
   809c6:	689d      	ldr	r5, [r3, #8]
   809c8:	ab09      	add	r3, sp, #36	; 0x24
   809ca:	6828      	ldr	r0, [r5, #0]
   809cc:	6869      	ldr	r1, [r5, #4]
   809ce:	c303      	stmia	r3!, {r0, r1}
   809d0:	8929      	ldrh	r1, [r5, #8]
   809d2:	8019      	strh	r1, [r3, #0]

	if (Write_Memory_Params.BytesToWrite > 256)
   809d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   809d8:	9303      	str	r3, [sp, #12]
   809da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   809de:	d909      	bls.n	809f4 <ISPProtocol_ProgramMemory+0x44>
	{
		avrisp_status_payload[0] = V2Command;
   809e0:	4b86      	ldr	r3, [pc, #536]	; (80bfc <ISPProtocol_ProgramMemory+0x24c>)
   809e2:	701a      	strb	r2, [r3, #0]
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   809e4:	22c0      	movs	r2, #192	; 0xc0
   809e6:	705a      	strb	r2, [r3, #1]
		avrisp_status_payload_size = 2;
   809e8:	2202      	movs	r2, #2
   809ea:	4b85      	ldr	r3, [pc, #532]	; (80c00 <ISPProtocol_ProgramMemory+0x250>)
   809ec:	801a      	strh	r2, [r3, #0]
	////printf("AVRPROG: Programming Done: %x\n", ProgrammingStatus);
	avrisp_status_payload[0] = V2Command;
	avrisp_status_payload[1] = ProgrammingStatus;
	avrisp_status_payload_size = 2;

}
   809ee:	b00d      	add	sp, #52	; 0x34
   809f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t  PollValue         = (V2Command == CMD_PROGRAM_FLASH_ISP) ? Write_Memory_Params.PollValue1 :
   809f4:	2a13      	cmp	r2, #19
   809f6:	bf0c      	ite	eq
   809f8:	f89d 302b 	ldrbeq.w	r3, [sp, #43]	; 0x2b
   809fc:	f89d 302c 	ldrbne.w	r3, [sp, #44]	; 0x2c
   80a00:	9304      	str	r3, [sp, #16]
   80a02:	9405      	str	r4, [sp, #20]
   80a04:	4615      	mov	r5, r2
	uint16_t PageStartAddress  = (CurrentAddress & 0xFFFF);
   80a06:	4b7f      	ldr	r3, [pc, #508]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a08:	681b      	ldr	r3, [r3, #0]
   80a0a:	9307      	str	r3, [sp, #28]
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80a0c:	9b03      	ldr	r3, [sp, #12]
   80a0e:	2b00      	cmp	r3, #0
   80a10:	d03e      	beq.n	80a90 <ISPProtocol_ProgramMemory+0xe0>
   80a12:	3b01      	subs	r3, #1
   80a14:	b29b      	uxth	r3, r3
   80a16:	3301      	adds	r3, #1
   80a18:	18e3      	adds	r3, r4, r3
   80a1a:	9306      	str	r3, [sp, #24]
   80a1c:	4627      	mov	r7, r4
   80a1e:	2300      	movs	r3, #0
   80a20:	9303      	str	r3, [sp, #12]
			MustLoadExtendedAddress = false;
   80a22:	46ab      	mov	fp, r5
   80a24:	e092      	b.n	80b4c <ISPProtocol_ProgramMemory+0x19c>
			ISPTarget_LoadExtendedAddress();
   80a26:	4b78      	ldr	r3, [pc, #480]	; (80c08 <ISPProtocol_ProgramMemory+0x258>)
   80a28:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80a2a:	4b78      	ldr	r3, [pc, #480]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80a2c:	f04f 0200 	mov.w	r2, #0
   80a30:	701a      	strb	r2, [r3, #0]
   80a32:	e099      	b.n	80b68 <ISPProtocol_ProgramMemory+0x1b8>
			  Write_Memory_Params.ProgrammingCommands[2] |=  READ_WRITE_HIGH_BYTE_MASK;
   80a34:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80a38:	f043 0308 	orr.w	r3, r3, #8
   80a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80a40:	4b70      	ldr	r3, [pc, #448]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a42:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80a44:	f019 0f01 	tst.w	r9, #1
   80a48:	f000 80c6 	beq.w	80bd8 <ISPProtocol_ProgramMemory+0x228>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a4c:	9303      	str	r3, [sp, #12]
			CurrentAddress++;
   80a4e:	4a6d      	ldr	r2, [pc, #436]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80a50:	6813      	ldr	r3, [r2, #0]
   80a52:	3301      	adds	r3, #1
   80a54:	6013      	str	r3, [r2, #0]
			if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80a56:	f1bb 0f13 	cmp.w	fp, #19
   80a5a:	d174      	bne.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80a5c:	b29b      	uxth	r3, r3
   80a5e:	2b00      	cmp	r3, #0
   80a60:	d171      	bne.n	80b46 <ISPProtocol_ProgramMemory+0x196>
			  MustLoadExtendedAddress = true;
   80a62:	2301      	movs	r3, #1
   80a64:	4a69      	ldr	r2, [pc, #420]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80a66:	7013      	strb	r3, [r2, #0]
   80a68:	e06d      	b.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80a6a:	9303      	str	r3, [sp, #12]
   80a6c:	e056      	b.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			PollAddress = (CurrentAddress & 0xFFFF);
   80a6e:	9303      	str	r3, [sp, #12]
   80a70:	e063      	b.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
   80a72:	465d      	mov	r5, fp
   80a74:	2300      	movs	r3, #0
	if (Write_Memory_Params.ProgrammingMode & PROG_MODE_COMMIT_PAGE_MASK)
   80a76:	f89d 8026 	ldrb.w	r8, [sp, #38]	; 0x26
   80a7a:	fa4f f488 	sxtb.w	r4, r8
   80a7e:	2c00      	cmp	r4, #0
   80a80:	db0a      	blt.n	80a98 <ISPProtocol_ProgramMemory+0xe8>
	avrisp_status_payload[0] = V2Command;
   80a82:	4a5e      	ldr	r2, [pc, #376]	; (80bfc <ISPProtocol_ProgramMemory+0x24c>)
   80a84:	7015      	strb	r5, [r2, #0]
	avrisp_status_payload[1] = ProgrammingStatus;
   80a86:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80a88:	2202      	movs	r2, #2
   80a8a:	4b5d      	ldr	r3, [pc, #372]	; (80c00 <ISPProtocol_ProgramMemory+0x250>)
   80a8c:	801a      	strh	r2, [r3, #0]
   80a8e:	e7ae      	b.n	809ee <ISPProtocol_ProgramMemory+0x3e>
	uint8_t  ProgrammingStatus = STATUS_CMD_OK;
   80a90:	2300      	movs	r3, #0
   80a92:	e7f0      	b.n	80a76 <ISPProtocol_ProgramMemory+0xc6>
   80a94:	465d      	mov	r5, fp
   80a96:	e7ee      	b.n	80a76 <ISPProtocol_ProgramMemory+0xc6>
		static inline void ISPTarget_SendByte(const uint8_t data)
		{
#if AVRISP_USEUART
		  usart_putchar(AVRISP_USART, data);
#else
		  spi_write(SPI, data, 0, 0);
   80a98:	4f5d      	ldr	r7, [pc, #372]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80a9a:	2300      	movs	r3, #0
   80a9c:	461a      	mov	r2, r3
   80a9e:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
   80aa2:	4638      	mov	r0, r7
   80aa4:	4e5b      	ldr	r6, [pc, #364]	; (80c14 <ISPProtocol_ProgramMemory+0x264>)
   80aa6:	47b0      	blx	r6
   80aa8:	2300      	movs	r3, #0
   80aaa:	461a      	mov	r2, r3
   80aac:	9907      	ldr	r1, [sp, #28]
   80aae:	f3c1 2107 	ubfx	r1, r1, #8, #8
   80ab2:	4638      	mov	r0, r7
   80ab4:	47b0      	blx	r6
   80ab6:	2300      	movs	r3, #0
   80ab8:	461a      	mov	r2, r3
   80aba:	f89d 101c 	ldrb.w	r1, [sp, #28]
   80abe:	4638      	mov	r0, r7
   80ac0:	47b0      	blx	r6
   80ac2:	2300      	movs	r3, #0
   80ac4:	461a      	mov	r2, r3
   80ac6:	4619      	mov	r1, r3
   80ac8:	4638      	mov	r0, r7
   80aca:	47b0      	blx	r6
		if ((Write_Memory_Params.ProgrammingMode & PROG_MODE_PAGED_VALUE_MASK) && !(PollAddress))
   80acc:	f018 0f20 	tst.w	r8, #32
   80ad0:	d007      	beq.n	80ae2 <ISPProtocol_ProgramMemory+0x132>
   80ad2:	9b03      	ldr	r3, [sp, #12]
   80ad4:	b92b      	cbnz	r3, 80ae2 <ISPProtocol_ProgramMemory+0x132>
			Write_Memory_Params.ProgrammingMode = (Write_Memory_Params.ProgrammingMode & ~PROG_MODE_PAGED_VALUE_MASK) |
   80ad6:	f024 0330 	bic.w	r3, r4, #48	; 0x30
   80ada:	f043 0310 	orr.w	r3, r3, #16
   80ade:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		ProgrammingStatus = ISPTarget_WaitForProgComplete(Write_Memory_Params.ProgrammingMode, PollAddress, PollValue,
   80ae2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80ae6:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80aea:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80aee:	9200      	str	r2, [sp, #0]
   80af0:	9a04      	ldr	r2, [sp, #16]
   80af2:	9903      	ldr	r1, [sp, #12]
   80af4:	4c48      	ldr	r4, [pc, #288]	; (80c18 <ISPProtocol_ProgramMemory+0x268>)
   80af6:	47a0      	blx	r4
   80af8:	4603      	mov	r3, r0
		if ((V2Command == CMD_PROGRAM_FLASH_ISP) && !(CurrentAddress & 0xFFFF))
   80afa:	2d13      	cmp	r5, #19
   80afc:	d1c1      	bne.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
   80afe:	4a41      	ldr	r2, [pc, #260]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80b00:	8812      	ldrh	r2, [r2, #0]
   80b02:	2a00      	cmp	r2, #0
   80b04:	d1bd      	bne.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
		  MustLoadExtendedAddress = true;
   80b06:	2101      	movs	r1, #1
   80b08:	4a40      	ldr	r2, [pc, #256]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80b0a:	7011      	strb	r1, [r2, #0]
   80b0c:	e7b9      	b.n	80a82 <ISPProtocol_ProgramMemory+0xd2>
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80b0e:	f019 0f01 	tst.w	r9, #1
   80b12:	d064      	beq.n	80bde <ISPProtocol_ProgramMemory+0x22e>
   80b14:	e011      	b.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
   80b16:	f019 0f01 	tst.w	r9, #1
   80b1a:	d10e      	bne.n	80b3a <ISPProtocol_ProgramMemory+0x18a>
			ProgrammingStatus = ISPTarget_WaitForProgComplete(ProgrammingMode, PollAddress, PollValue,
   80b1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   80b20:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
   80b24:	9200      	str	r2, [sp, #0]
   80b26:	9a04      	ldr	r2, [sp, #16]
   80b28:	9903      	ldr	r1, [sp, #12]
   80b2a:	4648      	mov	r0, r9
   80b2c:	4c3a      	ldr	r4, [pc, #232]	; (80c18 <ISPProtocol_ProgramMemory+0x268>)
   80b2e:	47a0      	blx	r4
			if (ProgrammingStatus != STATUS_CMD_OK)
   80b30:	4603      	mov	r3, r0
   80b32:	2800      	cmp	r0, #0
   80b34:	d1ae      	bne.n	80a94 <ISPProtocol_ProgramMemory+0xe4>
			PollAddress = 0;
   80b36:	2300      	movs	r3, #0
   80b38:	9303      	str	r3, [sp, #12]
		if ((CurrentByte & 0x01) || (V2Command == CMD_PROGRAM_EEPROM_ISP))
   80b3a:	f018 0f01 	tst.w	r8, #1
   80b3e:	d186      	bne.n	80a4e <ISPProtocol_ProgramMemory+0x9e>
   80b40:	f1bb 0f15 	cmp.w	fp, #21
   80b44:	d053      	beq.n	80bee <ISPProtocol_ProgramMemory+0x23e>
	for (uint16_t CurrentByte = 0; CurrentByte < Write_Memory_Params.BytesToWrite; CurrentByte++)
   80b46:	9b06      	ldr	r3, [sp, #24]
   80b48:	429f      	cmp	r7, r3
   80b4a:	d092      	beq.n	80a72 <ISPProtocol_ProgramMemory+0xc2>
   80b4c:	9b05      	ldr	r3, [sp, #20]
   80b4e:	eba7 0803 	sub.w	r8, r7, r3
   80b52:	fa1f f888 	uxth.w	r8, r8
		uint8_t ByteToWrite     = *(NextWriteByte++);
   80b56:	f817 6b01 	ldrb.w	r6, [r7], #1
		uint8_t ProgrammingMode = Write_Memory_Params.ProgrammingMode;
   80b5a:	f89d 9026 	ldrb.w	r9, [sp, #38]	; 0x26
		if (MustLoadExtendedAddress)
   80b5e:	4b2b      	ldr	r3, [pc, #172]	; (80c0c <ISPProtocol_ProgramMemory+0x25c>)
   80b60:	781b      	ldrb	r3, [r3, #0]
   80b62:	2b00      	cmp	r3, #0
   80b64:	f47f af5f 	bne.w	80a26 <ISPProtocol_ProgramMemory+0x76>
		ISPTarget_SendByte(Write_Memory_Params.ProgrammingCommands[0]);
   80b68:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   80b6c:	2300      	movs	r3, #0
   80b6e:	461a      	mov	r2, r3
   80b70:	4651      	mov	r1, sl
   80b72:	4827      	ldr	r0, [pc, #156]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b74:	4c27      	ldr	r4, [pc, #156]	; (80c14 <ISPProtocol_ProgramMemory+0x264>)
   80b76:	47a0      	blx	r4
		ISPTarget_SendByte(CurrentAddress >> 8);
   80b78:	4d22      	ldr	r5, [pc, #136]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80b7a:	2300      	movs	r3, #0
   80b7c:	461a      	mov	r2, r3
   80b7e:	7869      	ldrb	r1, [r5, #1]
   80b80:	4823      	ldr	r0, [pc, #140]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b82:	47a0      	blx	r4
   80b84:	2300      	movs	r3, #0
   80b86:	461a      	mov	r2, r3
   80b88:	7829      	ldrb	r1, [r5, #0]
   80b8a:	4821      	ldr	r0, [pc, #132]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b8c:	47a0      	blx	r4
   80b8e:	2300      	movs	r3, #0
   80b90:	461a      	mov	r2, r3
   80b92:	4631      	mov	r1, r6
   80b94:	481e      	ldr	r0, [pc, #120]	; (80c10 <ISPProtocol_ProgramMemory+0x260>)
   80b96:	47a0      	blx	r4
		if (V2Command == CMD_PROGRAM_FLASH_ISP)
   80b98:	f1bb 0f13 	cmp.w	fp, #19
		  Write_Memory_Params.ProgrammingCommands[0] ^= READ_WRITE_HIGH_BYTE_MASK;
   80b9c:	bf04      	itt	eq
   80b9e:	f08a 0a08 	eoreq.w	sl, sl, #8
   80ba2:	f88d a028 	strbeq.w	sl, [sp, #40]	; 0x28
		if (!(PollAddress) && (ByteToWrite != PollValue))
   80ba6:	9b03      	ldr	r3, [sp, #12]
   80ba8:	2b00      	cmp	r3, #0
   80baa:	d1b4      	bne.n	80b16 <ISPProtocol_ProgramMemory+0x166>
   80bac:	9b04      	ldr	r3, [sp, #16]
   80bae:	42b3      	cmp	r3, r6
   80bb0:	d0ad      	beq.n	80b0e <ISPProtocol_ProgramMemory+0x15e>
			if ((CurrentByte & 0x01) && (V2Command == CMD_PROGRAM_FLASH_ISP))
   80bb2:	f018 0f01 	tst.w	r8, #1
   80bb6:	d003      	beq.n	80bc0 <ISPProtocol_ProgramMemory+0x210>
   80bb8:	f1bb 0f13 	cmp.w	fp, #19
   80bbc:	f43f af3a 	beq.w	80a34 <ISPProtocol_ProgramMemory+0x84>
			  Write_Memory_Params.ProgrammingCommands[2] &= ~READ_WRITE_HIGH_BYTE_MASK;
   80bc0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   80bc4:	f023 0308 	bic.w	r3, r3, #8
   80bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
			PollAddress = (CurrentAddress & 0xFFFF);
   80bcc:	4b0d      	ldr	r3, [pc, #52]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80bce:	881b      	ldrh	r3, [r3, #0]
		if (!(ProgrammingMode & PROG_MODE_PAGED_WRITES_MASK))
   80bd0:	f019 0f01 	tst.w	r9, #1
   80bd4:	f47f af4b 	bne.w	80a6e <ISPProtocol_ProgramMemory+0xbe>
			if (!(PollAddress) && !(ProgrammingMode & PROG_MODE_WORD_READYBUSY_MASK))
   80bd8:	2b00      	cmp	r3, #0
   80bda:	f47f af46 	bne.w	80a6a <ISPProtocol_ProgramMemory+0xba>
   80bde:	f019 0f08 	tst.w	r9, #8
   80be2:	d19b      	bne.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			  ProgrammingMode = (ProgrammingMode & ~PROG_MODE_WORD_VALUE_MASK) | PROG_MODE_WORD_TIMEDELAY_MASK;
   80be4:	f029 0906 	bic.w	r9, r9, #6
   80be8:	f049 0902 	orr.w	r9, r9, #2
   80bec:	e796      	b.n	80b1c <ISPProtocol_ProgramMemory+0x16c>
			CurrentAddress++;
   80bee:	4a05      	ldr	r2, [pc, #20]	; (80c04 <ISPProtocol_ProgramMemory+0x254>)
   80bf0:	6813      	ldr	r3, [r2, #0]
   80bf2:	3301      	adds	r3, #1
   80bf4:	6013      	str	r3, [r2, #0]
   80bf6:	e7a6      	b.n	80b46 <ISPProtocol_ProgramMemory+0x196>
   80bf8:	200027ac 	.word	0x200027ac
   80bfc:	2000276c 	.word	0x2000276c
   80c00:	2000276a 	.word	0x2000276a
   80c04:	2000278c 	.word	0x2000278c
   80c08:	00081231 	.word	0x00081231
   80c0c:	20002768 	.word	0x20002768
   80c10:	40008000 	.word	0x40008000
   80c14:	00084cff 	.word	0x00084cff
   80c18:	00081271 	.word	0x00081271

00080c1c <ISPProtocol_ReadMemory>:
	{
		uint16_t BytesToRead;
		uint8_t  ReadMemoryCommand;
	} Read_Memory_Params;
	
	if (udd_g_ctrlreq.payload_size != 3){
   80c1c:	4b43      	ldr	r3, [pc, #268]	; (80d2c <ISPProtocol_ReadMemory+0x110>)
   80c1e:	899b      	ldrh	r3, [r3, #12]
   80c20:	2b03      	cmp	r3, #3
   80c22:	d000      	beq.n	80c26 <ISPProtocol_ReadMemory+0xa>
   80c24:	4770      	bx	lr
{
   80c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c2a:	b085      	sub	sp, #20
		//printf("AVRPROG: Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_Memory_Params, udd_g_ctrlreq.payload, sizeof(Read_Memory_Params));
   80c2c:	4b3f      	ldr	r3, [pc, #252]	; (80d2c <ISPProtocol_ReadMemory+0x110>)
   80c2e:	689b      	ldr	r3, [r3, #8]
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	9303      	str	r3, [sp, #12]

	//Default to failed status
	avrisp_status_payload[0] = V2Command;
   80c34:	4a3e      	ldr	r2, [pc, #248]	; (80d30 <ISPProtocol_ReadMemory+0x114>)
   80c36:	7010      	strb	r0, [r2, #0]
	avrisp_status_payload[1] = STATUS_CMD_FAILED;
   80c38:	24c0      	movs	r4, #192	; 0xc0
   80c3a:	7054      	strb	r4, [r2, #1]
	avrisp_status_payload_size = 2;
   80c3c:	2402      	movs	r4, #2
   80c3e:	4a3d      	ldr	r2, [pc, #244]	; (80d34 <ISPProtocol_ReadMemory+0x118>)
   80c40:	8014      	strh	r4, [r2, #0]
		
	////printf("AVRPROG: Attempting to read %d bytes\n", Read_Memory_Params.BytesToRead);

	//Woops... too long
	if (Read_Memory_Params.BytesToRead > 256)
   80c42:	b29b      	uxth	r3, r3
   80c44:	9301      	str	r3, [sp, #4]
   80c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80c4a:	d86c      	bhi.n	80d26 <ISPProtocol_ReadMemory+0x10a>
	{
		return;
	}

	/* Read each byte from the device and write them to the packet for the host */
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c4c:	2b00      	cmp	r3, #0
   80c4e:	d064      	beq.n	80d1a <ISPProtocol_ReadMemory+0xfe>
   80c50:	4682      	mov	sl, r0
   80c52:	1e4f      	subs	r7, r1, #1
   80c54:	2600      	movs	r6, #0
   80c56:	4c38      	ldr	r4, [pc, #224]	; (80d38 <ISPProtocol_ReadMemory+0x11c>)
   80c58:	46b9      	mov	r9, r7
   80c5a:	e023      	b.n	80ca4 <ISPProtocol_ReadMemory+0x88>
	{
		/* Check to see if we need to send a LOAD EXTENDED ADDRESS command to the target */
		if (MustLoadExtendedAddress)
		{
			ISPTarget_LoadExtendedAddress();
   80c5c:	4b37      	ldr	r3, [pc, #220]	; (80d3c <ISPProtocol_ReadMemory+0x120>)
   80c5e:	4798      	blx	r3
			MustLoadExtendedAddress = false;
   80c60:	4b37      	ldr	r3, [pc, #220]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80c62:	f04f 0200 	mov.w	r2, #0
   80c66:	701a      	strb	r2, [r3, #0]
   80c68:	e022      	b.n	80cb0 <ISPProtocol_ReadMemory+0x94>
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);

		/* AVR FLASH addressing requires us to modify the read command based on if we are reading a high
		 * or low byte at the current word address */
		if (V2Command == CMD_READ_FLASH_ISP)
		  Read_Memory_Params.ReadMemoryCommand ^= READ_WRITE_HIGH_BYTE_MASK;
   80c6a:	f088 0808 	eor.w	r8, r8, #8
   80c6e:	f88d 800e 	strb.w	r8, [sp, #14]

		/* EEPROM just increments the address each byte, flash needs to increment on each word and
		 * also check to ensure that a LOAD EXTENDED ADDRESS command is issued each time the extended
		 * address boundary has been crossed */
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80c72:	f01b 0f01 	tst.w	fp, #1
   80c76:	d010      	beq.n	80c9a <ISPProtocol_ReadMemory+0x7e>
		{
			CurrentAddress++;
   80c78:	4a32      	ldr	r2, [pc, #200]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80c7a:	6813      	ldr	r3, [r2, #0]
   80c7c:	3301      	adds	r3, #1
   80c7e:	6013      	str	r3, [r2, #0]
   80c80:	e006      	b.n	80c90 <ISPProtocol_ReadMemory+0x74>
   80c82:	4a30      	ldr	r2, [pc, #192]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80c84:	6813      	ldr	r3, [r2, #0]
   80c86:	3301      	adds	r3, #1
   80c88:	6013      	str	r3, [r2, #0]

			if ((V2Command != CMD_READ_EEPROM_ISP) && !(CurrentAddress & 0xFFFF))
   80c8a:	f1ba 0f16 	cmp.w	sl, #22
   80c8e:	d004      	beq.n	80c9a <ISPProtocol_ReadMemory+0x7e>
   80c90:	b29b      	uxth	r3, r3
   80c92:	b913      	cbnz	r3, 80c9a <ISPProtocol_ReadMemory+0x7e>
			  MustLoadExtendedAddress = true;
   80c94:	2301      	movs	r3, #1
   80c96:	4a2a      	ldr	r2, [pc, #168]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80c98:	7013      	strb	r3, [r2, #0]
   80c9a:	3601      	adds	r6, #1
	for (uint16_t CurrentByte = 0; CurrentByte < Read_Memory_Params.BytesToRead; CurrentByte++)
   80c9c:	b2b3      	uxth	r3, r6
   80c9e:	9a01      	ldr	r2, [sp, #4]
   80ca0:	429a      	cmp	r2, r3
   80ca2:	d93a      	bls.n	80d1a <ISPProtocol_ReadMemory+0xfe>
   80ca4:	fa1f fb86 	uxth.w	fp, r6
		if (MustLoadExtendedAddress)
   80ca8:	4b25      	ldr	r3, [pc, #148]	; (80d40 <ISPProtocol_ReadMemory+0x124>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	2b00      	cmp	r3, #0
   80cae:	d1d5      	bne.n	80c5c <ISPProtocol_ReadMemory+0x40>
		ISPTarget_SendByte(Read_Memory_Params.ReadMemoryCommand);
   80cb0:	f89d 800e 	ldrb.w	r8, [sp, #14]
   80cb4:	2300      	movs	r3, #0
   80cb6:	461a      	mov	r2, r3
   80cb8:	4641      	mov	r1, r8
   80cba:	4620      	mov	r0, r4
   80cbc:	4d22      	ldr	r5, [pc, #136]	; (80d48 <ISPProtocol_ReadMemory+0x12c>)
   80cbe:	47a8      	blx	r5
		ISPTarget_SendByte(CurrentAddress >> 8);
   80cc0:	4f20      	ldr	r7, [pc, #128]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80cc2:	2300      	movs	r3, #0
   80cc4:	461a      	mov	r2, r3
   80cc6:	7879      	ldrb	r1, [r7, #1]
   80cc8:	4620      	mov	r0, r4
   80cca:	47a8      	blx	r5
   80ccc:	2300      	movs	r3, #0
   80cce:	461a      	mov	r2, r3
   80cd0:	7839      	ldrb	r1, [r7, #0]
   80cd2:	4620      	mov	r0, r4
   80cd4:	47a8      	blx	r5
   80cd6:	2300      	movs	r3, #0
   80cd8:	461a      	mov	r2, r3
   80cda:	4619      	mov	r1, r3
   80cdc:	4620      	mov	r0, r4
   80cde:	47a8      	blx	r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80ce0:	6923      	ldr	r3, [r4, #16]
		{
			ISPTarget_SendByte(data);
#if AVRISP_USEUART
			while(usart_is_tx_empty(AVRISP_USART) == 0);
#else
			while(spi_is_tx_empty(SPI) == 0);
   80ce2:	f413 7f00 	tst.w	r3, #512	; 0x200
   80ce6:	d0fb      	beq.n	80ce0 <ISPProtocol_ReadMemory+0xc4>
			spi_read(SPI, &ReceivedByte, &_);
   80ce8:	f10d 0209 	add.w	r2, sp, #9
   80cec:	f10d 010a 	add.w	r1, sp, #10
   80cf0:	4620      	mov	r0, r4
   80cf2:	4b16      	ldr	r3, [pc, #88]	; (80d4c <ISPProtocol_ReadMemory+0x130>)
   80cf4:	4798      	blx	r3
			return  ReceivedByte;
   80cf6:	f89d 300a 	ldrb.w	r3, [sp, #10]
		buffer[CurrentByte] = ISPTarget_TransferByte(0x00);
   80cfa:	f809 3f01 	strb.w	r3, [r9, #1]!
		if (V2Command == CMD_READ_FLASH_ISP)
   80cfe:	f1ba 0f14 	cmp.w	sl, #20
   80d02:	d0b2      	beq.n	80c6a <ISPProtocol_ReadMemory+0x4e>
		if ((CurrentByte & 0x01) || (V2Command == CMD_READ_EEPROM_ISP))
   80d04:	f01b 0f01 	tst.w	fp, #1
   80d08:	d1bb      	bne.n	80c82 <ISPProtocol_ReadMemory+0x66>
   80d0a:	f1ba 0f16 	cmp.w	sl, #22
   80d0e:	d1c4      	bne.n	80c9a <ISPProtocol_ReadMemory+0x7e>
			CurrentAddress++;
   80d10:	4a0c      	ldr	r2, [pc, #48]	; (80d44 <ISPProtocol_ReadMemory+0x128>)
   80d12:	6813      	ldr	r3, [r2, #0]
   80d14:	3301      	adds	r3, #1
   80d16:	6013      	str	r3, [r2, #0]
   80d18:	e7bf      	b.n	80c9a <ISPProtocol_ReadMemory+0x7e>
		}
	}

	////printf("AVRPROG: Read %d bytes\n", Read_Memory_Params.BytesToRead);
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80d1a:	2200      	movs	r2, #0
   80d1c:	4b04      	ldr	r3, [pc, #16]	; (80d30 <ISPProtocol_ReadMemory+0x114>)
   80d1e:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80d20:	2202      	movs	r2, #2
   80d22:	4b04      	ldr	r3, [pc, #16]	; (80d34 <ISPProtocol_ReadMemory+0x118>)
   80d24:	801a      	strh	r2, [r3, #0]
}
   80d26:	b005      	add	sp, #20
   80d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80d2c:	200027ac 	.word	0x200027ac
   80d30:	2000276c 	.word	0x2000276c
   80d34:	2000276a 	.word	0x2000276a
   80d38:	40008000 	.word	0x40008000
   80d3c:	00081231 	.word	0x00081231
   80d40:	20002768 	.word	0x20002768
   80d44:	2000278c 	.word	0x2000278c
   80d48:	00084cff 	.word	0x00084cff
   80d4c:	00084cd1 	.word	0x00084cd1

00080d50 <ISPProtocol_ReadFuseLockSigOSCCAL>:
	{
		uint8_t RetByte;
		uint8_t ReadCommandBytes[4];
	} Read_FuseLockSigOSCCAL_Params;

	if (udd_g_ctrlreq.payload_size != 5){
   80d50:	4b20      	ldr	r3, [pc, #128]	; (80dd4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d52:	899b      	ldrh	r3, [r3, #12]
   80d54:	2b05      	cmp	r3, #5
   80d56:	d000      	beq.n	80d5a <ISPProtocol_ReadFuseLockSigOSCCAL+0xa>
   80d58:	4770      	bx	lr
{
   80d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d5e:	b085      	sub	sp, #20
   80d60:	4607      	mov	r7, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Read_FuseLockSigOSCCAL_Params, udd_g_ctrlreq.payload, sizeof(Read_FuseLockSigOSCCAL_Params));
   80d62:	4b1c      	ldr	r3, [pc, #112]	; (80dd4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x84>)
   80d64:	689b      	ldr	r3, [r3, #8]
   80d66:	6818      	ldr	r0, [r3, #0]
   80d68:	9002      	str	r0, [sp, #8]
   80d6a:	791a      	ldrb	r2, [r3, #4]
   80d6c:	f88d 200c 	strb.w	r2, [sp, #12]
   80d70:	f893 b000 	ldrb.w	fp, [r3]
   80d74:	f10d 0609 	add.w	r6, sp, #9
   80d78:	ad01      	add	r5, sp, #4
   80d7a:	f10d 0a08 	add.w	sl, sp, #8
		  spi_write(SPI, data, 0, 0);
   80d7e:	4c16      	ldr	r4, [pc, #88]	; (80dd8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x88>)
   80d80:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80de4 <ISPProtocol_ReadFuseLockSigOSCCAL+0x94>
			spi_read(SPI, &ReceivedByte, &_);
   80d84:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80de8 <ISPProtocol_ReadFuseLockSigOSCCAL+0x98>
		  spi_write(SPI, data, 0, 0);
   80d88:	2300      	movs	r3, #0
   80d8a:	461a      	mov	r2, r3
   80d8c:	f816 1b01 	ldrb.w	r1, [r6], #1
   80d90:	4620      	mov	r0, r4
   80d92:	47c8      	blx	r9
   80d94:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80d96:	f413 7f00 	tst.w	r3, #512	; 0x200
   80d9a:	d0fb      	beq.n	80d94 <ISPProtocol_ReadFuseLockSigOSCCAL+0x44>
			spi_read(SPI, &ReceivedByte, &_);
   80d9c:	f10d 0201 	add.w	r2, sp, #1
   80da0:	f10d 0102 	add.w	r1, sp, #2
   80da4:	4620      	mov	r0, r4
   80da6:	47c0      	blx	r8
			return  ReceivedByte;
   80da8:	f89d 3002 	ldrb.w	r3, [sp, #2]

	uint8_t ResponseBytes[4];

	/* Send the Fuse or Lock byte read commands as given by the host to the device, store response */
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
	  ResponseBytes[RByte] = ISPTarget_TransferByte(Read_FuseLockSigOSCCAL_Params.ReadCommandBytes[RByte]);
   80dac:	f805 3b01 	strb.w	r3, [r5], #1
	for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80db0:	4555      	cmp	r5, sl
   80db2:	d1e9      	bne.n	80d88 <ISPProtocol_ReadFuseLockSigOSCCAL+0x38>

	avrisp_status_payload[0] = V2Command;
   80db4:	4b09      	ldr	r3, [pc, #36]	; (80ddc <ISPProtocol_ReadFuseLockSigOSCCAL+0x8c>)
   80db6:	701f      	strb	r7, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80db8:	2200      	movs	r2, #0
   80dba:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload[2] = ResponseBytes[Read_FuseLockSigOSCCAL_Params.RetByte - 1];
   80dbc:	a904      	add	r1, sp, #16
   80dbe:	448b      	add	fp, r1
   80dc0:	f81b 1c0d 	ldrb.w	r1, [fp, #-13]
   80dc4:	7099      	strb	r1, [r3, #2]
	avrisp_status_payload[3] = STATUS_CMD_OK;
   80dc6:	70da      	strb	r2, [r3, #3]
		
	avrisp_status_payload_size = 4;	
   80dc8:	2204      	movs	r2, #4
   80dca:	4b05      	ldr	r3, [pc, #20]	; (80de0 <ISPProtocol_ReadFuseLockSigOSCCAL+0x90>)
   80dcc:	801a      	strh	r2, [r3, #0]
}
   80dce:	b005      	add	sp, #20
   80dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80dd4:	200027ac 	.word	0x200027ac
   80dd8:	40008000 	.word	0x40008000
   80ddc:	2000276c 	.word	0x2000276c
   80de0:	2000276a 	.word	0x2000276a
   80de4:	00084cff 	.word	0x00084cff
   80de8:	00084cd1 	.word	0x00084cd1

00080dec <ISPProtocol_WriteFuseLock>:
	struct
	{
		uint8_t WriteCommandBytes[4];
	} Write_FuseLockSig_Params;
	
	if (udd_g_ctrlreq.payload_size != sizeof(Write_FuseLockSig_Params)){
   80dec:	4b13      	ldr	r3, [pc, #76]	; (80e3c <ISPProtocol_WriteFuseLock+0x50>)
   80dee:	899b      	ldrh	r3, [r3, #12]
   80df0:	2b04      	cmp	r3, #4
   80df2:	d000      	beq.n	80df6 <ISPProtocol_WriteFuseLock+0xa>
   80df4:	4770      	bx	lr
{
   80df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80dfa:	b083      	sub	sp, #12
   80dfc:	4681      	mov	r9, r0
		//printf("Payload size = %d, error!?\n", udd_g_ctrlreq.payload_size);
		return;
	}

	memcpy(&Write_FuseLockSig_Params, udd_g_ctrlreq.payload, sizeof(Write_FuseLockSig_Params));
   80dfe:	4b0f      	ldr	r3, [pc, #60]	; (80e3c <ISPProtocol_WriteFuseLock+0x50>)
   80e00:	689b      	ldr	r3, [r3, #8]
   80e02:	681b      	ldr	r3, [r3, #0]
   80e04:	ac02      	add	r4, sp, #8
   80e06:	f844 3d04 	str.w	r3, [r4, #-4]!
   80e0a:	f10d 0808 	add.w	r8, sp, #8
		  spi_write(SPI, data, 0, 0);
   80e0e:	4f0c      	ldr	r7, [pc, #48]	; (80e40 <ISPProtocol_WriteFuseLock+0x54>)
   80e10:	2600      	movs	r6, #0
   80e12:	4d0c      	ldr	r5, [pc, #48]	; (80e44 <ISPProtocol_WriteFuseLock+0x58>)
   80e14:	4633      	mov	r3, r6
   80e16:	4632      	mov	r2, r6
   80e18:	f814 1b01 	ldrb.w	r1, [r4], #1
   80e1c:	4638      	mov	r0, r7
   80e1e:	47a8      	blx	r5

	/* Send the Fuse or Lock byte program commands as given by the host to the device */
	for (uint8_t SByte = 0; SByte < sizeof(Write_FuseLockSig_Params.WriteCommandBytes); SByte++) {
   80e20:	4544      	cmp	r4, r8
   80e22:	d1f7      	bne.n	80e14 <ISPProtocol_WriteFuseLock+0x28>
	  ISPTarget_SendByte(Write_FuseLockSig_Params.WriteCommandBytes[SByte]);
	}

	avrisp_status_payload[0] = V2Command;
   80e24:	4b08      	ldr	r3, [pc, #32]	; (80e48 <ISPProtocol_WriteFuseLock+0x5c>)
   80e26:	f883 9000 	strb.w	r9, [r3]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80e2a:	2200      	movs	r2, #0
   80e2c:	705a      	strb	r2, [r3, #1]
	//Supposed to be an extra status byte, but always OK so we don't bother
//	avrisp_status_payload[2] = STATUS_CMD_OK;
	
	avrisp_status_payload_size = 2;	
   80e2e:	2202      	movs	r2, #2
   80e30:	4b06      	ldr	r3, [pc, #24]	; (80e4c <ISPProtocol_WriteFuseLock+0x60>)
   80e32:	801a      	strh	r2, [r3, #0]
}
   80e34:	b003      	add	sp, #12
   80e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80e3a:	bf00      	nop
   80e3c:	200027ac 	.word	0x200027ac
   80e40:	40008000 	.word	0x40008000
   80e44:	00084cff 	.word	0x00084cff
   80e48:	2000276c 	.word	0x2000276c
   80e4c:	2000276a 	.word	0x2000276a

00080e50 <ISPProtocol_SPIMulti>:

/** Handler for the CMD_SPI_MULTI command, writing and reading arbitrary SPI data to and from the attached device. */
void ISPProtocol_SPIMulti(void)
{
   80e50:	4770      	bx	lr
	...

00080e54 <ISPProtocol_DelayMS>:
 *
 *  \param[in] DelayMS  Number of milliseconds to delay for
 */
void ISPProtocol_DelayMS(uint8_t DelayMS)
{
	if (DelayMS){delay_ms(DelayMS);};
   80e54:	b900      	cbnz	r0, 80e58 <ISPProtocol_DelayMS+0x4>
   80e56:	4770      	bx	lr
{
   80e58:	b538      	push	{r3, r4, r5, lr}
   80e5a:	4601      	mov	r1, r0
	if (DelayMS){delay_ms(DelayMS);};
   80e5c:	f243 62b0 	movw	r2, #14000	; 0x36b0
   80e60:	2300      	movs	r3, #0
   80e62:	f243 64af 	movw	r4, #13999	; 0x36af
   80e66:	2500      	movs	r5, #0
   80e68:	4804      	ldr	r0, [pc, #16]	; (80e7c <ISPProtocol_DelayMS+0x28>)
   80e6a:	fbe0 4501 	umlal	r4, r5, r0, r1
   80e6e:	4620      	mov	r0, r4
   80e70:	4629      	mov	r1, r5
   80e72:	4c03      	ldr	r4, [pc, #12]	; (80e80 <ISPProtocol_DelayMS+0x2c>)
   80e74:	47a0      	blx	r4
   80e76:	4b03      	ldr	r3, [pc, #12]	; (80e84 <ISPProtocol_DelayMS+0x30>)
   80e78:	4798      	blx	r3
   80e7a:	bd38      	pop	{r3, r4, r5, pc}
   80e7c:	05b8d800 	.word	0x05b8d800
   80e80:	00086901 	.word	0x00086901
   80e84:	20000089 	.word	0x20000089

00080e88 <ISPProtocol_EnterISPMode>:
	if (udd_g_ctrlreq.payload_size != 11){
   80e88:	4b43      	ldr	r3, [pc, #268]	; (80f98 <ISPProtocol_EnterISPMode+0x110>)
   80e8a:	899b      	ldrh	r3, [r3, #12]
   80e8c:	2b0b      	cmp	r3, #11
   80e8e:	d000      	beq.n	80e92 <ISPProtocol_EnterISPMode+0xa>
   80e90:	4770      	bx	lr
{
   80e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e96:	b08b      	sub	sp, #44	; 0x2c
	memcpy(&Enter_ISP_Params, udd_g_ctrlreq.payload, sizeof(Enter_ISP_Params));
   80e98:	4b3f      	ldr	r3, [pc, #252]	; (80f98 <ISPProtocol_EnterISPMode+0x110>)
   80e9a:	689b      	ldr	r3, [r3, #8]
   80e9c:	aa07      	add	r2, sp, #28
   80e9e:	6818      	ldr	r0, [r3, #0]
   80ea0:	6859      	ldr	r1, [r3, #4]
   80ea2:	c203      	stmia	r2!, {r0, r1}
   80ea4:	8918      	ldrh	r0, [r3, #8]
   80ea6:	7a99      	ldrb	r1, [r3, #10]
   80ea8:	8010      	strh	r0, [r2, #0]
   80eaa:	7091      	strb	r1, [r2, #2]
   80eac:	785a      	ldrb	r2, [r3, #1]
   80eae:	4616      	mov	r6, r2
   80eb0:	9203      	str	r2, [sp, #12]
   80eb2:	7898      	ldrb	r0, [r3, #2]
   80eb4:	78dc      	ldrb	r4, [r3, #3]
   80eb6:	791a      	ldrb	r2, [r3, #4]
   80eb8:	9201      	str	r2, [sp, #4]
   80eba:	795a      	ldrb	r2, [r3, #5]
   80ebc:	9202      	str	r2, [sp, #8]
   80ebe:	f893 b006 	ldrb.w	fp, [r3, #6]
	CurrentAddress = 0;
   80ec2:	2200      	movs	r2, #0
   80ec4:	4b35      	ldr	r3, [pc, #212]	; (80f9c <ISPProtocol_EnterISPMode+0x114>)
   80ec6:	601a      	str	r2, [r3, #0]
	ISPProtocol_DelayMS(Enter_ISP_Params.ExecutionDelayMS);
   80ec8:	4d35      	ldr	r5, [pc, #212]	; (80fa0 <ISPProtocol_EnterISPMode+0x118>)
   80eca:	47a8      	blx	r5
	ISPTarget_EnableTargetISP();
   80ecc:	4b35      	ldr	r3, [pc, #212]	; (80fa4 <ISPProtocol_EnterISPMode+0x11c>)
   80ece:	4798      	blx	r3
	ISPTarget_ChangeTargetResetLine(true);
   80ed0:	2001      	movs	r0, #1
   80ed2:	4b35      	ldr	r3, [pc, #212]	; (80fa8 <ISPProtocol_EnterISPMode+0x120>)
   80ed4:	4798      	blx	r3
	ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80ed6:	4630      	mov	r0, r6
   80ed8:	47a8      	blx	r5
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80eda:	f104 39ff 	add.w	r9, r4, #4294967295
   80ede:	fa5f f989 	uxtb.w	r9, r9
   80ee2:	2c00      	cmp	r4, #0
   80ee4:	d051      	beq.n	80f8a <ISPProtocol_EnterISPMode+0x102>
   80ee6:	4b31      	ldr	r3, [pc, #196]	; (80fac <ISPProtocol_EnterISPMode+0x124>)
   80ee8:	681b      	ldr	r3, [r3, #0]
   80eea:	b123      	cbz	r3, 80ef6 <ISPProtocol_EnterISPMode+0x6e>
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80eec:	4f2c      	ldr	r7, [pc, #176]	; (80fa0 <ISPProtocol_EnterISPMode+0x118>)
   80eee:	4c30      	ldr	r4, [pc, #192]	; (80fb0 <ISPProtocol_EnterISPMode+0x128>)
   80ef0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80fc0 <ISPProtocol_EnterISPMode+0x138>
   80ef4:	e01f      	b.n	80f36 <ISPProtocol_EnterISPMode+0xae>
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80ef6:	23c0      	movs	r3, #192	; 0xc0
   80ef8:	e03d      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
		if (!(Enter_ISP_Params.PollIndex) || (ResponseBytes[Enter_ISP_Params.PollIndex - 1] == Enter_ISP_Params.PollValue))
   80efa:	f1bb 0f00 	cmp.w	fp, #0
   80efe:	d039      	beq.n	80f74 <ISPProtocol_EnterISPMode+0xec>
   80f00:	ab0a      	add	r3, sp, #40	; 0x28
   80f02:	445b      	add	r3, fp
   80f04:	f813 3c11 	ldrb.w	r3, [r3, #-17]
   80f08:	9a02      	ldr	r2, [sp, #8]
   80f0a:	4293      	cmp	r3, r2
   80f0c:	d032      	beq.n	80f74 <ISPProtocol_EnterISPMode+0xec>
			ISPTarget_ChangeTargetResetLine(false);
   80f0e:	2000      	movs	r0, #0
   80f10:	4d25      	ldr	r5, [pc, #148]	; (80fa8 <ISPProtocol_EnterISPMode+0x120>)
   80f12:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80f14:	9e03      	ldr	r6, [sp, #12]
   80f16:	4630      	mov	r0, r6
   80f18:	47b8      	blx	r7
			ISPTarget_ChangeTargetResetLine(true);
   80f1a:	2001      	movs	r0, #1
   80f1c:	47a8      	blx	r5
			ISPProtocol_DelayMS(Enter_ISP_Params.PinStabDelayMS);
   80f1e:	4630      	mov	r0, r6
   80f20:	47b8      	blx	r7
	while (Enter_ISP_Params.SynchLoops-- && TimeoutTicksRemaining)
   80f22:	f109 39ff 	add.w	r9, r9, #4294967295
   80f26:	fa5f f989 	uxtb.w	r9, r9
   80f2a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   80f2e:	d02e      	beq.n	80f8e <ISPProtocol_EnterISPMode+0x106>
   80f30:	4b1e      	ldr	r3, [pc, #120]	; (80fac <ISPProtocol_EnterISPMode+0x124>)
   80f32:	681b      	ldr	r3, [r3, #0]
   80f34:	b36b      	cbz	r3, 80f92 <ISPProtocol_EnterISPMode+0x10a>
   80f36:	f10d 0623 	add.w	r6, sp, #35	; 0x23
   80f3a:	ad06      	add	r5, sp, #24
   80f3c:	f10d 081c 	add.w	r8, sp, #28
			ISPProtocol_DelayMS(Enter_ISP_Params.ByteDelay);
   80f40:	9801      	ldr	r0, [sp, #4]
   80f42:	47b8      	blx	r7
   80f44:	2300      	movs	r3, #0
   80f46:	461a      	mov	r2, r3
   80f48:	f816 1b01 	ldrb.w	r1, [r6], #1
   80f4c:	4620      	mov	r0, r4
   80f4e:	47d0      	blx	sl
   80f50:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   80f52:	f413 7f00 	tst.w	r3, #512	; 0x200
   80f56:	d0fb      	beq.n	80f50 <ISPProtocol_EnterISPMode+0xc8>
			spi_read(SPI, &ReceivedByte, &_);
   80f58:	f10d 0215 	add.w	r2, sp, #21
   80f5c:	f10d 0116 	add.w	r1, sp, #22
   80f60:	4620      	mov	r0, r4
   80f62:	4b14      	ldr	r3, [pc, #80]	; (80fb4 <ISPProtocol_EnterISPMode+0x12c>)
   80f64:	4798      	blx	r3
			return  ReceivedByte;
   80f66:	f89d 3016 	ldrb.w	r3, [sp, #22]
			ResponseBytes[RByte] = ISPTarget_TransferByte(Enter_ISP_Params.EnterProgBytes[RByte]);
   80f6a:	f805 3b01 	strb.w	r3, [r5], #1
		for (uint8_t RByte = 0; RByte < sizeof(ResponseBytes); RByte++)
   80f6e:	4545      	cmp	r5, r8
   80f70:	d1e6      	bne.n	80f40 <ISPProtocol_EnterISPMode+0xb8>
   80f72:	e7c2      	b.n	80efa <ISPProtocol_EnterISPMode+0x72>
			ResponseStatus = STATUS_CMD_OK;
   80f74:	2300      	movs	r3, #0
	avrisp_status_payload[0] = CMD_ENTER_PROGMODE_ISP;
   80f76:	4a10      	ldr	r2, [pc, #64]	; (80fb8 <ISPProtocol_EnterISPMode+0x130>)
   80f78:	2110      	movs	r1, #16
   80f7a:	7011      	strb	r1, [r2, #0]
	avrisp_status_payload[1] = ResponseStatus;
   80f7c:	7053      	strb	r3, [r2, #1]
	avrisp_status_payload_size = 2;
   80f7e:	2202      	movs	r2, #2
   80f80:	4b0e      	ldr	r3, [pc, #56]	; (80fbc <ISPProtocol_EnterISPMode+0x134>)
   80f82:	801a      	strh	r2, [r3, #0]
}
   80f84:	b00b      	add	sp, #44	; 0x2c
   80f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ResponseStatus = STATUS_CMD_FAILED;
   80f8a:	23c0      	movs	r3, #192	; 0xc0
   80f8c:	e7f3      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f8e:	23c0      	movs	r3, #192	; 0xc0
   80f90:	e7f1      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f92:	23c0      	movs	r3, #192	; 0xc0
   80f94:	e7ef      	b.n	80f76 <ISPProtocol_EnterISPMode+0xee>
   80f96:	bf00      	nop
   80f98:	200027ac 	.word	0x200027ac
   80f9c:	2000278c 	.word	0x2000278c
   80fa0:	00080e55 	.word	0x00080e55
   80fa4:	000810ad 	.word	0x000810ad
   80fa8:	0008116d 	.word	0x0008116d
   80fac:	20002794 	.word	0x20002794
   80fb0:	40008000 	.word	0x40008000
   80fb4:	00084cd1 	.word	0x00084cd1
   80fb8:	2000276c 	.word	0x2000276c
   80fbc:	2000276a 	.word	0x2000276a
   80fc0:	00084cff 	.word	0x00084cff

00080fc4 <ISPProtocol_LeaveISPMode>:
	if (udd_g_ctrlreq.payload_size != 2){
   80fc4:	4b10      	ldr	r3, [pc, #64]	; (81008 <ISPProtocol_LeaveISPMode+0x44>)
   80fc6:	899b      	ldrh	r3, [r3, #12]
   80fc8:	2b02      	cmp	r3, #2
   80fca:	d000      	beq.n	80fce <ISPProtocol_LeaveISPMode+0xa>
   80fcc:	4770      	bx	lr
{
   80fce:	b510      	push	{r4, lr}
   80fd0:	b082      	sub	sp, #8
	memcpy(&Leave_ISP_Params, udd_g_ctrlreq.payload, sizeof(Leave_ISP_Params));
   80fd2:	4b0d      	ldr	r3, [pc, #52]	; (81008 <ISPProtocol_LeaveISPMode+0x44>)
   80fd4:	689b      	ldr	r3, [r3, #8]
   80fd6:	8818      	ldrh	r0, [r3, #0]
   80fd8:	f8ad 0004 	strh.w	r0, [sp, #4]
	ISPProtocol_DelayMS(Leave_ISP_Params.PreDelayMS);
   80fdc:	b2c0      	uxtb	r0, r0
   80fde:	4c0b      	ldr	r4, [pc, #44]	; (8100c <ISPProtocol_LeaveISPMode+0x48>)
   80fe0:	47a0      	blx	r4
	ISPTarget_ChangeTargetResetLine(false);
   80fe2:	2000      	movs	r0, #0
   80fe4:	4b0a      	ldr	r3, [pc, #40]	; (81010 <ISPProtocol_LeaveISPMode+0x4c>)
   80fe6:	4798      	blx	r3
	ISPTarget_DisableTargetISP();
   80fe8:	4b0a      	ldr	r3, [pc, #40]	; (81014 <ISPProtocol_LeaveISPMode+0x50>)
   80fea:	4798      	blx	r3
	ISPProtocol_DelayMS(Leave_ISP_Params.PostDelayMS);
   80fec:	f89d 0005 	ldrb.w	r0, [sp, #5]
   80ff0:	47a0      	blx	r4
	avrisp_status_payload[0] = CMD_LEAVE_PROGMODE_ISP;
   80ff2:	4b09      	ldr	r3, [pc, #36]	; (81018 <ISPProtocol_LeaveISPMode+0x54>)
   80ff4:	2211      	movs	r2, #17
   80ff6:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = STATUS_CMD_OK;
   80ff8:	2200      	movs	r2, #0
   80ffa:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   80ffc:	2202      	movs	r2, #2
   80ffe:	4b07      	ldr	r3, [pc, #28]	; (8101c <ISPProtocol_LeaveISPMode+0x58>)
   81000:	801a      	strh	r2, [r3, #0]
}
   81002:	b002      	add	sp, #8
   81004:	bd10      	pop	{r4, pc}
   81006:	bf00      	nop
   81008:	200027ac 	.word	0x200027ac
   8100c:	00080e55 	.word	0x00080e55
   81010:	0008116d 	.word	0x0008116d
   81014:	00081155 	.word	0x00081155
   81018:	2000276c 	.word	0x2000276c
   8101c:	2000276a 	.word	0x2000276a

00081020 <ISPProtocol_ChipErase>:
	if (udd_g_ctrlreq.payload_size != sizeof(Erase_Chip_Params)){
   81020:	4b1b      	ldr	r3, [pc, #108]	; (81090 <ISPProtocol_ChipErase+0x70>)
   81022:	899b      	ldrh	r3, [r3, #12]
   81024:	2b06      	cmp	r3, #6
   81026:	d000      	beq.n	8102a <ISPProtocol_ChipErase+0xa>
   81028:	4770      	bx	lr
{
   8102a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8102e:	b082      	sub	sp, #8
	memcpy(&Erase_Chip_Params, udd_g_ctrlreq.payload, sizeof(Erase_Chip_Params));
   81030:	4b17      	ldr	r3, [pc, #92]	; (81090 <ISPProtocol_ChipErase+0x70>)
   81032:	689b      	ldr	r3, [r3, #8]
   81034:	6818      	ldr	r0, [r3, #0]
   81036:	9000      	str	r0, [sp, #0]
   81038:	889a      	ldrh	r2, [r3, #4]
   8103a:	f8ad 2004 	strh.w	r2, [sp, #4]
   8103e:	f893 a000 	ldrb.w	sl, [r3]
   81042:	f893 9001 	ldrb.w	r9, [r3, #1]
   81046:	f10d 0402 	add.w	r4, sp, #2
   8104a:	f10d 0806 	add.w	r8, sp, #6
		  spi_write(SPI, data, 0, 0);
   8104e:	4f11      	ldr	r7, [pc, #68]	; (81094 <ISPProtocol_ChipErase+0x74>)
   81050:	2600      	movs	r6, #0
   81052:	4d11      	ldr	r5, [pc, #68]	; (81098 <ISPProtocol_ChipErase+0x78>)
   81054:	4633      	mov	r3, r6
   81056:	4632      	mov	r2, r6
   81058:	f814 1b01 	ldrb.w	r1, [r4], #1
   8105c:	4638      	mov	r0, r7
   8105e:	47a8      	blx	r5
	for (uint8_t SByte = 0; SByte < sizeof(Erase_Chip_Params.EraseCommandBytes); SByte++) {
   81060:	4544      	cmp	r4, r8
   81062:	d1f7      	bne.n	81054 <ISPProtocol_ChipErase+0x34>
	if (!(Erase_Chip_Params.PollMethod))
   81064:	f1b9 0f00 	cmp.w	r9, #0
   81068:	d10d      	bne.n	81086 <ISPProtocol_ChipErase+0x66>
	  ISPProtocol_DelayMS(Erase_Chip_Params.EraseDelayMS);
   8106a:	4650      	mov	r0, sl
   8106c:	4b0b      	ldr	r3, [pc, #44]	; (8109c <ISPProtocol_ChipErase+0x7c>)
   8106e:	4798      	blx	r3
	avrisp_status_payload[0] = CMD_CHIP_ERASE_ISP;
   81070:	4b0b      	ldr	r3, [pc, #44]	; (810a0 <ISPProtocol_ChipErase+0x80>)
   81072:	2212      	movs	r2, #18
   81074:	701a      	strb	r2, [r3, #0]
	avrisp_status_payload[1] = ResponseStatus;
   81076:	f883 9001 	strb.w	r9, [r3, #1]
	avrisp_status_payload_size = 2;
   8107a:	2202      	movs	r2, #2
   8107c:	4b09      	ldr	r3, [pc, #36]	; (810a4 <ISPProtocol_ChipErase+0x84>)
   8107e:	801a      	strh	r2, [r3, #0]
}
   81080:	b002      	add	sp, #8
   81082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  ResponseStatus = ISPTarget_WaitWhileTargetBusy();
   81086:	4b08      	ldr	r3, [pc, #32]	; (810a8 <ISPProtocol_ChipErase+0x88>)
   81088:	4798      	blx	r3
   8108a:	4681      	mov	r9, r0
   8108c:	e7f0      	b.n	81070 <ISPProtocol_ChipErase+0x50>
   8108e:	bf00      	nop
   81090:	200027ac 	.word	0x200027ac
   81094:	40008000 	.word	0x40008000
   81098:	00084cff 	.word	0x00084cff
   8109c:	00080e55 	.word	0x00080e55
   810a0:	2000276c 	.word	0x2000276c
   810a4:	2000276a 	.word	0x2000276a
   810a8:	000811b1 	.word	0x000811b1

000810ac <ISPTarget_EnableTargetISP>:

/** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP speed) ready for
 *  communication with the attached target.
 */
void ISPTarget_EnableTargetISP(void)
{
   810ac:	b538      	push	{r3, r4, r5, lr}
	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
   810ae:	2098      	movs	r0, #152	; 0x98
   810b0:	4b1e      	ldr	r3, [pc, #120]	; (8112c <ISPTarget_EnableTargetISP+0x80>)
   810b2:	4798      	blx	r3
   810b4:	4b1e      	ldr	r3, [pc, #120]	; (81130 <ISPTarget_EnableTargetISP+0x84>)
   810b6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
#else
	spi_enable_clock(SPI);
   810ba:	4c1e      	ldr	r4, [pc, #120]	; (81134 <ISPTarget_EnableTargetISP+0x88>)
   810bc:	4620      	mov	r0, r4
   810be:	4b1e      	ldr	r3, [pc, #120]	; (81138 <ISPTarget_EnableTargetISP+0x8c>)
   810c0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   810c2:	2380      	movs	r3, #128	; 0x80
   810c4:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   810c6:	6863      	ldr	r3, [r4, #4]
   810c8:	f043 0301 	orr.w	r3, r3, #1
   810cc:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   810ce:	6863      	ldr	r3, [r4, #4]
   810d0:	f043 0310 	orr.w	r3, r3, #16
   810d4:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   810d6:	6863      	ldr	r3, [r4, #4]
   810d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   810dc:	6063      	str	r3, [r4, #4]
	spi_set_master_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_disable_loopback(SPI);
	
	/* Silently fail and just use faster baud if user requests something too slow */
	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
   810de:	4917      	ldr	r1, [pc, #92]	; (8113c <ISPTarget_EnableTargetISP+0x90>)
   810e0:	4628      	mov	r0, r5
   810e2:	4b17      	ldr	r3, [pc, #92]	; (81140 <ISPTarget_EnableTargetISP+0x94>)
   810e4:	4798      	blx	r3
	if (bauddiv < 0){
   810e6:	1e05      	subs	r5, r0, #0
		bauddiv = 255;
   810e8:	bfb8      	it	lt
   810ea:	25ff      	movlt	r5, #255	; 0xff
	}
	
	//printf("SPI... %d %d\n", bauddiv, sckfreq);
		
	spi_set_clock_polarity(SPI, 0, 0);
   810ec:	2200      	movs	r2, #0
   810ee:	4611      	mov	r1, r2
   810f0:	4620      	mov	r0, r4
   810f2:	4b14      	ldr	r3, [pc, #80]	; (81144 <ISPTarget_EnableTargetISP+0x98>)
   810f4:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   810f6:	2201      	movs	r2, #1
   810f8:	2100      	movs	r1, #0
   810fa:	4620      	mov	r0, r4
   810fc:	4b12      	ldr	r3, [pc, #72]	; (81148 <ISPTarget_EnableTargetISP+0x9c>)
   810fe:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, bauddiv);
   81100:	b2ea      	uxtb	r2, r5
   81102:	2100      	movs	r1, #0
   81104:	4620      	mov	r0, r4
   81106:	4b11      	ldr	r3, [pc, #68]	; (8114c <ISPTarget_EnableTargetISP+0xa0>)
   81108:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8110a:	2301      	movs	r3, #1
   8110c:	6023      	str	r3, [r4, #0]
	
	spi_enable(SPI);
	
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   8110e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81112:	200e      	movs	r0, #14
   81114:	4c0e      	ldr	r4, [pc, #56]	; (81150 <ISPTarget_EnableTargetISP+0xa4>)
   81116:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   81118:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8111c:	200d      	movs	r0, #13
   8111e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81120:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81124:	200f      	movs	r0, #15
   81126:	47a0      	blx	r4
   81128:	bd38      	pop	{r3, r4, r5, pc}
   8112a:	bf00      	nop
   8112c:	000837ad 	.word	0x000837ad
   81130:	200003c0 	.word	0x200003c0
   81134:	40008000 	.word	0x40008000
   81138:	00084cb1 	.word	0x00084cb1
   8113c:	05b8d800 	.word	0x05b8d800
   81140:	00084d6f 	.word	0x00084d6f
   81144:	00084d33 	.word	0x00084d33
   81148:	00084d51 	.word	0x00084d51
   8114c:	00084d85 	.word	0x00084d85
   81150:	000848cd 	.word	0x000848cd

00081154 <ISPTarget_DisableTargetISP>:

/** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP speed) so that no
 *  further communications can occur until the driver is re-initialized.
 */
void ISPTarget_DisableTargetISP(void)
{
   81154:	b508      	push	{r3, lr}
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   81156:	4803      	ldr	r0, [pc, #12]	; (81164 <ISPTarget_DisableTargetISP+0x10>)
   81158:	2302      	movs	r3, #2
   8115a:	6003      	str	r3, [r0, #0]
	usart_disable_tx(AVRISP_USART);
	usart_disable_rx(AVRISP_USART);
	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
#else
	spi_disable(SPI);
	spi_disable_clock(SPI);
   8115c:	4b02      	ldr	r3, [pc, #8]	; (81168 <ISPTarget_DisableTargetISP+0x14>)
   8115e:	4798      	blx	r3
   81160:	bd08      	pop	{r3, pc}
   81162:	bf00      	nop
   81164:	40008000 	.word	0x40008000
   81168:	00084cc1 	.word	0x00084cc1

0008116c <ISPTarget_ChangeTargetResetLine>:
 *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 *
 *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwise
 */
void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
{	
   8116c:	b508      	push	{r3, lr}
	if (ResetTarget)
   8116e:	b180      	cbz	r0, 81192 <ISPTarget_ChangeTargetResetLine+0x26>
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
   81170:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81174:	2011      	movs	r0, #17
   81176:	4b0a      	ldr	r3, [pc, #40]	; (811a0 <ISPTarget_ChangeTargetResetLine+0x34>)
   81178:	4798      	blx	r3

		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
   8117a:	209e      	movs	r0, #158	; 0x9e
   8117c:	4b09      	ldr	r3, [pc, #36]	; (811a4 <ISPTarget_ChangeTargetResetLine+0x38>)
   8117e:	4798      	blx	r3
   81180:	b918      	cbnz	r0, 8118a <ISPTarget_ChangeTargetResetLine+0x1e>
		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
   81182:	2011      	movs	r0, #17
   81184:	4b08      	ldr	r3, [pc, #32]	; (811a8 <ISPTarget_ChangeTargetResetLine+0x3c>)
   81186:	4798      	blx	r3
   81188:	bd08      	pop	{r3, pc}
		}else{
    	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
   8118a:	2011      	movs	r0, #17
   8118c:	4b07      	ldr	r3, [pc, #28]	; (811ac <ISPTarget_ChangeTargetResetLine+0x40>)
   8118e:	4798      	blx	r3
   81190:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
   81192:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   81196:	2011      	movs	r0, #17
   81198:	4b01      	ldr	r3, [pc, #4]	; (811a0 <ISPTarget_ChangeTargetResetLine+0x34>)
   8119a:	4798      	blx	r3
   8119c:	bd08      	pop	{r3, pc}
   8119e:	bf00      	nop
   811a0:	000848cd 	.word	0x000848cd
   811a4:	000837ad 	.word	0x000837ad
   811a8:	00084877 	.word	0x00084877
   811ac:	00084891 	.word	0x00084891

000811b0 <ISPTarget_WaitWhileTargetBusy>:
 *  BUSY flag until it is cleared, or until the command timeout period has expired.
 *
 *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_TOUT otherwise
 */
uint8_t ISPTarget_WaitWhileTargetBusy(void)
{
   811b0:	b570      	push	{r4, r5, r6, lr}
   811b2:	b082      	sub	sp, #8
   811b4:	4c1a      	ldr	r4, [pc, #104]	; (81220 <ISPTarget_WaitWhileTargetBusy+0x70>)
   811b6:	2600      	movs	r6, #0
   811b8:	4d1a      	ldr	r5, [pc, #104]	; (81224 <ISPTarget_WaitWhileTargetBusy+0x74>)
   811ba:	4633      	mov	r3, r6
   811bc:	4632      	mov	r2, r6
   811be:	21f0      	movs	r1, #240	; 0xf0
   811c0:	4620      	mov	r0, r4
   811c2:	47a8      	blx	r5
   811c4:	4633      	mov	r3, r6
   811c6:	4632      	mov	r2, r6
   811c8:	4631      	mov	r1, r6
   811ca:	4620      	mov	r0, r4
   811cc:	47a8      	blx	r5
   811ce:	4633      	mov	r3, r6
   811d0:	4632      	mov	r2, r6
   811d2:	4631      	mov	r1, r6
   811d4:	4620      	mov	r0, r4
   811d6:	47a8      	blx	r5
   811d8:	4633      	mov	r3, r6
   811da:	4632      	mov	r2, r6
   811dc:	4631      	mov	r1, r6
   811de:	4620      	mov	r0, r4
   811e0:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   811e2:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   811e4:	f413 7f00 	tst.w	r3, #512	; 0x200
   811e8:	d0fb      	beq.n	811e2 <ISPTarget_WaitWhileTargetBusy+0x32>
			spi_read(SPI, &ReceivedByte, &_);
   811ea:	f10d 0205 	add.w	r2, sp, #5
   811ee:	f10d 0106 	add.w	r1, sp, #6
   811f2:	4620      	mov	r0, r4
   811f4:	4b0c      	ldr	r3, [pc, #48]	; (81228 <ISPTarget_WaitWhileTargetBusy+0x78>)
   811f6:	4798      	blx	r3
			return  ReceivedByte;
   811f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
	{
		ISPTarget_SendByte(0xF0);
		ISPTarget_SendByte(0x00);
		ISPTarget_SendByte(0x00);
	}
	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
   811fc:	f013 0f01 	tst.w	r3, #1
   81200:	d005      	beq.n	8120e <ISPTarget_WaitWhileTargetBusy+0x5e>
   81202:	4b0a      	ldr	r3, [pc, #40]	; (8122c <ISPTarget_WaitWhileTargetBusy+0x7c>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	2b00      	cmp	r3, #0
   81208:	d1d7      	bne.n	811ba <ISPTarget_WaitWhileTargetBusy+0xa>

	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
   8120a:	2081      	movs	r0, #129	; 0x81
   8120c:	e005      	b.n	8121a <ISPTarget_WaitWhileTargetBusy+0x6a>
   8120e:	4b07      	ldr	r3, [pc, #28]	; (8122c <ISPTarget_WaitWhileTargetBusy+0x7c>)
   81210:	681b      	ldr	r3, [r3, #0]
   81212:	2b00      	cmp	r3, #0
   81214:	bf14      	ite	ne
   81216:	2000      	movne	r0, #0
   81218:	2081      	moveq	r0, #129	; 0x81
}
   8121a:	b002      	add	sp, #8
   8121c:	bd70      	pop	{r4, r5, r6, pc}
   8121e:	bf00      	nop
   81220:	40008000 	.word	0x40008000
   81224:	00084cff 	.word	0x00084cff
   81228:	00084cd1 	.word	0x00084cd1
   8122c:	20002794 	.word	0x20002794

00081230 <ISPTarget_LoadExtendedAddress>:
/** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond the
 *  64KB boundary. This sends the command with the correct address as indicated by the current address
 *  pointer variable set by the host when a SET ADDRESS command is issued.
 */
void ISPTarget_LoadExtendedAddress(void)
{
   81230:	b538      	push	{r3, r4, r5, lr}
		  spi_write(SPI, data, 0, 0);
   81232:	4d0c      	ldr	r5, [pc, #48]	; (81264 <ISPTarget_LoadExtendedAddress+0x34>)
   81234:	2300      	movs	r3, #0
   81236:	461a      	mov	r2, r3
   81238:	214d      	movs	r1, #77	; 0x4d
   8123a:	4628      	mov	r0, r5
   8123c:	4c0a      	ldr	r4, [pc, #40]	; (81268 <ISPTarget_LoadExtendedAddress+0x38>)
   8123e:	47a0      	blx	r4
   81240:	2300      	movs	r3, #0
   81242:	461a      	mov	r2, r3
   81244:	4619      	mov	r1, r3
   81246:	4628      	mov	r0, r5
   81248:	47a0      	blx	r4
   8124a:	2300      	movs	r3, #0
   8124c:	461a      	mov	r2, r3
   8124e:	4907      	ldr	r1, [pc, #28]	; (8126c <ISPTarget_LoadExtendedAddress+0x3c>)
   81250:	7889      	ldrb	r1, [r1, #2]
   81252:	4628      	mov	r0, r5
   81254:	47a0      	blx	r4
   81256:	2300      	movs	r3, #0
   81258:	461a      	mov	r2, r3
   8125a:	4619      	mov	r1, r3
   8125c:	4628      	mov	r0, r5
   8125e:	47a0      	blx	r4
   81260:	bd38      	pop	{r3, r4, r5, pc}
   81262:	bf00      	nop
   81264:	40008000 	.word	0x40008000
   81268:	00084cff 	.word	0x00084cff
   8126c:	2000278c 	.word	0x2000278c

00081270 <ISPTarget_WaitForProgComplete>:
uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
                                      const uint16_t PollAddress,
                                      const uint8_t PollValue,
                                      const uint8_t DelayMS,
                                      const uint8_t ReadMemCommand)
{
   81270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81274:	b082      	sub	sp, #8
   81276:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	uint8_t ProgrammingStatus = STATUS_CMD_OK;

	/* Determine method of Programming Complete check */
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   8127a:	f000 007e 	and.w	r0, r0, #126	; 0x7e
   8127e:	2808      	cmp	r0, #8
   81280:	d04d      	beq.n	8131e <ISPTarget_WaitForProgComplete+0xae>
   81282:	460f      	mov	r7, r1
   81284:	4690      	mov	r8, r2
   81286:	dd07      	ble.n	81298 <ISPTarget_WaitForProgComplete+0x28>
   81288:	2820      	cmp	r0, #32
   8128a:	d009      	beq.n	812a0 <ISPTarget_WaitForProgComplete+0x30>
   8128c:	2840      	cmp	r0, #64	; 0x40
   8128e:	d046      	beq.n	8131e <ISPTarget_WaitForProgComplete+0xae>
   81290:	2810      	cmp	r0, #16
   81292:	d033      	beq.n	812fc <ISPTarget_WaitForProgComplete+0x8c>
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81294:	2000      	movs	r0, #0
   81296:	e035      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
   81298:	2802      	cmp	r0, #2
   8129a:	d02f      	beq.n	812fc <ISPTarget_WaitForProgComplete+0x8c>
   8129c:	2804      	cmp	r0, #4
   8129e:	d1f9      	bne.n	81294 <ISPTarget_WaitForProgComplete+0x24>
		case PROG_MODE_WORD_VALUE_MASK:
		case PROG_MODE_PAGED_VALUE_MASK:
			do
			{
				ISPTarget_SendByte(ReadMemCommand);
				ISPTarget_SendByte(PollAddress >> 8);
   812a0:	ea4f 2a17 	mov.w	sl, r7, lsr #8
   812a4:	4c1f      	ldr	r4, [pc, #124]	; (81324 <ISPTarget_WaitForProgComplete+0xb4>)
   812a6:	2600      	movs	r6, #0
   812a8:	4d1f      	ldr	r5, [pc, #124]	; (81328 <ISPTarget_WaitForProgComplete+0xb8>)
   812aa:	4633      	mov	r3, r6
   812ac:	4632      	mov	r2, r6
   812ae:	4649      	mov	r1, r9
   812b0:	4620      	mov	r0, r4
   812b2:	47a8      	blx	r5
   812b4:	4633      	mov	r3, r6
   812b6:	4632      	mov	r2, r6
   812b8:	4651      	mov	r1, sl
   812ba:	4620      	mov	r0, r4
   812bc:	47a8      	blx	r5
   812be:	4633      	mov	r3, r6
   812c0:	4632      	mov	r2, r6
   812c2:	b2f9      	uxtb	r1, r7
   812c4:	4620      	mov	r0, r4
   812c6:	47a8      	blx	r5
   812c8:	4633      	mov	r3, r6
   812ca:	4632      	mov	r2, r6
   812cc:	4631      	mov	r1, r6
   812ce:	4620      	mov	r0, r4
   812d0:	47a8      	blx	r5
   812d2:	6923      	ldr	r3, [r4, #16]
			while(spi_is_tx_empty(SPI) == 0);
   812d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   812d8:	d0fb      	beq.n	812d2 <ISPTarget_WaitForProgComplete+0x62>
			spi_read(SPI, &ReceivedByte, &_);
   812da:	f10d 0205 	add.w	r2, sp, #5
   812de:	f10d 0106 	add.w	r1, sp, #6
   812e2:	4620      	mov	r0, r4
   812e4:	4b11      	ldr	r3, [pc, #68]	; (8132c <ISPTarget_WaitForProgComplete+0xbc>)
   812e6:	4798      	blx	r3
			return  ReceivedByte;
   812e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
				ISPTarget_SendByte(PollAddress & 0xFF);
			}
			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
   812ec:	4598      	cmp	r8, r3
   812ee:	d10f      	bne.n	81310 <ISPTarget_WaitForProgComplete+0xa0>
   812f0:	4b0f      	ldr	r3, [pc, #60]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	2b00      	cmp	r3, #0
   812f6:	d1d8      	bne.n	812aa <ISPTarget_WaitForProgComplete+0x3a>

			if (!(TimeoutTicksRemaining))
			  ProgrammingStatus = STATUS_CMD_TOUT;
   812f8:	2080      	movs	r0, #128	; 0x80
   812fa:	e003      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
			ISPProtocol_DelayMS(DelayMS);
   812fc:	4618      	mov	r0, r3
   812fe:	4b0d      	ldr	r3, [pc, #52]	; (81334 <ISPTarget_WaitForProgComplete+0xc4>)
   81300:	4798      	blx	r3
	uint8_t ProgrammingStatus = STATUS_CMD_OK;
   81302:	2000      	movs	r0, #0
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
			break;
	}

	/* Program complete - reset timeout */
	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
   81304:	2264      	movs	r2, #100	; 0x64
   81306:	4b0a      	ldr	r3, [pc, #40]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   81308:	601a      	str	r2, [r3, #0]

	return ProgrammingStatus;
}
   8130a:	b002      	add	sp, #8
   8130c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!(TimeoutTicksRemaining))
   81310:	4b07      	ldr	r3, [pc, #28]	; (81330 <ISPTarget_WaitForProgComplete+0xc0>)
   81312:	681b      	ldr	r3, [r3, #0]
			  ProgrammingStatus = STATUS_CMD_TOUT;
   81314:	2b00      	cmp	r3, #0
   81316:	bf14      	ite	ne
   81318:	2000      	movne	r0, #0
   8131a:	2080      	moveq	r0, #128	; 0x80
   8131c:	e7f2      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
   8131e:	4b06      	ldr	r3, [pc, #24]	; (81338 <ISPTarget_WaitForProgComplete+0xc8>)
   81320:	4798      	blx	r3
			break;
   81322:	e7ef      	b.n	81304 <ISPTarget_WaitForProgComplete+0x94>
   81324:	40008000 	.word	0x40008000
   81328:	00084cff 	.word	0x00084cff
   8132c:	00084cd1 	.word	0x00084cd1
   81330:	20002794 	.word	0x20002794
   81334:	00080e55 	.word	0x00080e55
   81338:	000811b1 	.word	0x000811b1

0008133c <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   8133c:	4b06      	ldr	r3, [pc, #24]	; (81358 <naeusb_add_in_handler+0x1c>)
   8133e:	781b      	ldrb	r3, [r3, #0]
   81340:	2b0f      	cmp	r3, #15
   81342:	d807      	bhi.n	81354 <naeusb_add_in_handler+0x18>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81344:	1c59      	adds	r1, r3, #1
   81346:	4a04      	ldr	r2, [pc, #16]	; (81358 <naeusb_add_in_handler+0x1c>)
   81348:	7011      	strb	r1, [r2, #0]
   8134a:	4a04      	ldr	r2, [pc, #16]	; (8135c <naeusb_add_in_handler+0x20>)
   8134c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81350:	2001      	movs	r0, #1
   81352:	4770      	bx	lr
    }
    return false;
   81354:	2000      	movs	r0, #0
    
}
   81356:	4770      	bx	lr
   81358:	20001cf8 	.word	0x20001cf8
   8135c:	20001cb8 	.word	0x20001cb8

00081360 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81360:	4b06      	ldr	r3, [pc, #24]	; (8137c <naeusb_add_out_handler+0x1c>)
   81362:	781b      	ldrb	r3, [r3, #0]
   81364:	2b0f      	cmp	r3, #15
   81366:	d807      	bhi.n	81378 <naeusb_add_out_handler+0x18>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81368:	1c59      	adds	r1, r3, #1
   8136a:	4a04      	ldr	r2, [pc, #16]	; (8137c <naeusb_add_out_handler+0x1c>)
   8136c:	7011      	strb	r1, [r2, #0]
   8136e:	4a04      	ldr	r2, [pc, #16]	; (81380 <naeusb_add_out_handler+0x20>)
   81370:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return true;
   81374:	2001      	movs	r0, #1
   81376:	4770      	bx	lr
    }
    return false;
   81378:	2000      	movs	r0, #0
    
}
   8137a:	4770      	bx	lr
   8137c:	20001cf9 	.word	0x20001cf9
   81380:	20001cfc 	.word	0x20001cfc

00081384 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   81384:	b508      	push	{r3, lr}
	active = false;
	ui_powerdown();
   81386:	4b01      	ldr	r3, [pc, #4]	; (8138c <main_suspend_action+0x8>)
   81388:	4798      	blx	r3
   8138a:	bd08      	pop	{r3, pc}
   8138c:	000843ad 	.word	0x000843ad

00081390 <main_resume_action>:
}

void main_resume_action(void)
{
   81390:	b508      	push	{r3, lr}
    ui_wakeup();
   81392:	4b01      	ldr	r3, [pc, #4]	; (81398 <main_resume_action+0x8>)
   81394:	4798      	blx	r3
   81396:	bd08      	pop	{r3, pc}
   81398:	000843c9 	.word	0x000843c9

0008139c <main_sof_action>:
}

void main_sof_action(void)
{
   8139c:	b508      	push	{r3, lr}
    if (!main_b_vendor_enable)
   8139e:	4b04      	ldr	r3, [pc, #16]	; (813b0 <main_sof_action+0x14>)
   813a0:	781b      	ldrb	r3, [r3, #0]
   813a2:	b903      	cbnz	r3, 813a6 <main_sof_action+0xa>
   813a4:	bd08      	pop	{r3, pc}
        return;
    ui_process(udd_get_frame_number());
   813a6:	4b03      	ldr	r3, [pc, #12]	; (813b4 <main_sof_action+0x18>)
   813a8:	4798      	blx	r3
   813aa:	4b03      	ldr	r3, [pc, #12]	; (813b8 <main_sof_action+0x1c>)
   813ac:	4798      	blx	r3
   813ae:	e7f9      	b.n	813a4 <main_sof_action+0x8>
   813b0:	20000650 	.word	0x20000650
   813b4:	00085a8d 	.word	0x00085a8d
   813b8:	000843e1 	.word	0x000843e1

000813bc <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   813bc:	b510      	push	{r4, lr}
    active = true;
    main_b_vendor_enable = true;
   813be:	2401      	movs	r4, #1
   813c0:	4b04      	ldr	r3, [pc, #16]	; (813d4 <main_vendor_enable+0x18>)
   813c2:	701c      	strb	r4, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   813c4:	4a04      	ldr	r2, [pc, #16]	; (813d8 <main_vendor_enable+0x1c>)
   813c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   813ca:	4804      	ldr	r0, [pc, #16]	; (813dc <main_vendor_enable+0x20>)
   813cc:	4b04      	ldr	r3, [pc, #16]	; (813e0 <main_vendor_enable+0x24>)
   813ce:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   813d0:	4620      	mov	r0, r4
   813d2:	bd10      	pop	{r4, pc}
   813d4:	20000650 	.word	0x20000650
   813d8:	000823e9 	.word	0x000823e9
   813dc:	20002368 	.word	0x20002368
   813e0:	0008457d 	.word	0x0008457d

000813e4 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   813e4:	2200      	movs	r2, #0
   813e6:	4b01      	ldr	r3, [pc, #4]	; (813ec <main_vendor_disable+0x8>)
   813e8:	701a      	strb	r2, [r3, #0]
   813ea:	4770      	bx	lr
   813ec:	20000650 	.word	0x20000650

000813f0 <main_setup_out_received>:
}

bool main_setup_out_received(void)
{
   813f0:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   813f2:	4b10      	ldr	r3, [pc, #64]	; (81434 <main_setup_out_received+0x44>)
   813f4:	4a10      	ldr	r2, [pc, #64]	; (81438 <main_setup_out_received+0x48>)
   813f6:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   813f8:	88da      	ldrh	r2, [r3, #6]
   813fa:	2a40      	cmp	r2, #64	; 0x40
   813fc:	bf28      	it	cs
   813fe:	2240      	movcs	r2, #64	; 0x40
   81400:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81402:	4b0e      	ldr	r3, [pc, #56]	; (8143c <main_setup_out_received+0x4c>)
   81404:	781b      	ldrb	r3, [r3, #0]
   81406:	b19b      	cbz	r3, 81430 <main_setup_out_received+0x40>
   81408:	4d0d      	ldr	r5, [pc, #52]	; (81440 <main_setup_out_received+0x50>)
   8140a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   8140e:	3a01      	subs	r2, #1
   81410:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   81414:	3b01      	subs	r3, #1
   81416:	b2db      	uxtb	r3, r3
   81418:	1ad3      	subs	r3, r2, r3
   8141a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_out_request_handlers[i-1]();
   8141e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81422:	4798      	blx	r3
        if (handler_status == true) {
   81424:	4603      	mov	r3, r0
   81426:	b908      	cbnz	r0, 8142c <main_setup_out_received+0x3c>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81428:	42ac      	cmp	r4, r5
   8142a:	d1f8      	bne.n	8141e <main_setup_out_received+0x2e>
        }
    }

    return false;

}
   8142c:	4618      	mov	r0, r3
   8142e:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81430:	2300      	movs	r3, #0
   81432:	e7fb      	b.n	8142c <main_setup_out_received+0x3c>
   81434:	200027ac 	.word	0x200027ac
   81438:	20002328 	.word	0x20002328
   8143c:	20001cf9 	.word	0x20001cf9
   81440:	20001cfc 	.word	0x20001cfc

00081444 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81444:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81446:	4b0c      	ldr	r3, [pc, #48]	; (81478 <main_setup_in_received+0x34>)
   81448:	781b      	ldrb	r3, [r3, #0]
   8144a:	b19b      	cbz	r3, 81474 <main_setup_in_received+0x30>
   8144c:	4d0b      	ldr	r5, [pc, #44]	; (8147c <main_setup_in_received+0x38>)
   8144e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   81452:	3a01      	subs	r2, #1
   81454:	eb05 0483 	add.w	r4, r5, r3, lsl #2
   81458:	3b01      	subs	r3, #1
   8145a:	b2db      	uxtb	r3, r3
   8145c:	1ad3      	subs	r3, r2, r3
   8145e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
        handler_status = naeusb_in_request_handlers[i-1]();
   81462:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81466:	4798      	blx	r3
        if (handler_status == true) {
   81468:	4603      	mov	r3, r0
   8146a:	b908      	cbnz	r0, 81470 <main_setup_in_received+0x2c>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8146c:	42ac      	cmp	r4, r5
   8146e:	d1f8      	bne.n	81462 <main_setup_in_received+0x1e>
        }
    }

    return false;

   81470:	4618      	mov	r0, r3
   81472:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81474:	2300      	movs	r3, #0
   81476:	e7fb      	b.n	81470 <main_setup_in_received+0x2c>
   81478:	20001cf8 	.word	0x20001cf8
   8147c:	20001cb8 	.word	0x20001cb8

00081480 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81480:	4b05      	ldr	r3, [pc, #20]	; (81498 <naeusb_setup_out_received+0x18>)
   81482:	785b      	ldrb	r3, [r3, #1]
   81484:	2b22      	cmp	r3, #34	; 0x22
   81486:	d104      	bne.n	81492 <naeusb_setup_out_received+0x12>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81488:	4a04      	ldr	r2, [pc, #16]	; (8149c <naeusb_setup_out_received+0x1c>)
   8148a:	4b03      	ldr	r3, [pc, #12]	; (81498 <naeusb_setup_out_received+0x18>)
   8148c:	611a      	str	r2, [r3, #16]
            return true;
   8148e:	2001      	movs	r0, #1
   81490:	4770      	bx	lr
            break;
    }
    return false;
   81492:	2000      	movs	r0, #0
}
   81494:	4770      	bx	lr
   81496:	bf00      	nop
   81498:	200027ac 	.word	0x200027ac
   8149c:	000814a1 	.word	0x000814a1

000814a0 <naeusb_sam_cfg_out>:
{
   814a0:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   814a2:	4b22      	ldr	r3, [pc, #136]	; (8152c <naeusb_sam_cfg_out+0x8c>)
   814a4:	789b      	ldrb	r3, [r3, #2]
   814a6:	3b01      	subs	r3, #1
   814a8:	2b10      	cmp	r3, #16
   814aa:	d83e      	bhi.n	8152a <naeusb_sam_cfg_out+0x8a>
   814ac:	e8df f003 	tbb	[pc, r3]
   814b0:	3d181409 	.word	0x3d181409
   814b4:	3d3d3d3d 	.word	0x3d3d3d3d
   814b8:	3d3d3d3d 	.word	0x3d3d3d3d
   814bc:	2c3d3d3d 	.word	0x2c3d3d3d
   814c0:	3b          	.byte	0x3b
   814c1:	00          	.byte	0x00
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   814c2:	203e      	movs	r0, #62	; 0x3e
   814c4:	4b1a      	ldr	r3, [pc, #104]	; (81530 <naeusb_sam_cfg_out+0x90>)
   814c6:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   814c8:	4c1a      	ldr	r4, [pc, #104]	; (81534 <naeusb_sam_cfg_out+0x94>)
   814ca:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   814cc:	2800      	cmp	r0, #0
   814ce:	d0fc      	beq.n	814ca <naeusb_sam_cfg_out+0x2a>
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   814d0:	2010      	movs	r0, #16
   814d2:	4b19      	ldr	r3, [pc, #100]	; (81538 <naeusb_sam_cfg_out+0x98>)
   814d4:	4798      	blx	r3
        break;
   814d6:	bd10      	pop	{r4, pc}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   814d8:	2010      	movs	r0, #16
   814da:	4b18      	ldr	r3, [pc, #96]	; (8153c <naeusb_sam_cfg_out+0x9c>)
   814dc:	4798      	blx	r3
        break;
   814de:	bd10      	pop	{r4, pc}
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   814e0:	2201      	movs	r2, #1
   814e2:	210c      	movs	r1, #12
   814e4:	4816      	ldr	r0, [pc, #88]	; (81540 <naeusb_sam_cfg_out+0xa0>)
   814e6:	4b17      	ldr	r3, [pc, #92]	; (81544 <naeusb_sam_cfg_out+0xa4>)
   814e8:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   814ea:	4b17      	ldr	r3, [pc, #92]	; (81548 <naeusb_sam_cfg_out+0xa8>)
   814ec:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   814ee:	4b17      	ldr	r3, [pc, #92]	; (8154c <naeusb_sam_cfg_out+0xac>)
   814f0:	685a      	ldr	r2, [r3, #4]
   814f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   814f6:	d1fb      	bne.n	814f0 <naeusb_sam_cfg_out+0x50>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   814f8:	4a14      	ldr	r2, [pc, #80]	; (8154c <naeusb_sam_cfg_out+0xac>)
   814fa:	6813      	ldr	r3, [r2, #0]
   814fc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81500:	f043 0305 	orr.w	r3, r3, #5
   81504:	6013      	str	r3, [r2, #0]
   81506:	e7fe      	b.n	81506 <naeusb_sam_cfg_out+0x66>
   81508:	4b0f      	ldr	r3, [pc, #60]	; (81548 <naeusb_sam_cfg_out+0xa8>)
   8150a:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   8150c:	4b0f      	ldr	r3, [pc, #60]	; (8154c <naeusb_sam_cfg_out+0xac>)
   8150e:	685a      	ldr	r2, [r3, #4]
   81510:	f412 3f00 	tst.w	r2, #131072	; 0x20000
   81514:	d1fb      	bne.n	8150e <naeusb_sam_cfg_out+0x6e>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81516:	4a0d      	ldr	r2, [pc, #52]	; (8154c <naeusb_sam_cfg_out+0xac>)
   81518:	6813      	ldr	r3, [r2, #0]
   8151a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8151e:	f043 0305 	orr.w	r3, r3, #5
   81522:	6013      	str	r3, [r2, #0]
   81524:	e7fe      	b.n	81524 <naeusb_sam_cfg_out+0x84>
        FPGA_releaselock();
   81526:	4b0a      	ldr	r3, [pc, #40]	; (81550 <naeusb_sam_cfg_out+0xb0>)
   81528:	4798      	blx	r3
   8152a:	bd10      	pop	{r4, pc}
   8152c:	200027ac 	.word	0x200027ac
   81530:	00084b79 	.word	0x00084b79
   81534:	00084ba1 	.word	0x00084ba1
   81538:	00084ab1 	.word	0x00084ab1
   8153c:	00084b15 	.word	0x00084b15
   81540:	400e0800 	.word	0x400e0800
   81544:	000842b9 	.word	0x000842b9
   81548:	00085a0d 	.word	0x00085a0d
   8154c:	400e1200 	.word	0x400e1200
   81550:	000834e5 	.word	0x000834e5

00081554 <naeusb_fw_version_in>:
    respbuf[0] = FW_VER_MAJOR;
   81554:	4b05      	ldr	r3, [pc, #20]	; (8156c <naeusb_fw_version_in+0x18>)
   81556:	2200      	movs	r2, #0
   81558:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   8155a:	2134      	movs	r1, #52	; 0x34
   8155c:	7059      	strb	r1, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   8155e:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81560:	4a03      	ldr	r2, [pc, #12]	; (81570 <naeusb_fw_version_in+0x1c>)
   81562:	6093      	str	r3, [r2, #8]
    udd_g_ctrlreq.payload_size = 3;
   81564:	2303      	movs	r3, #3
   81566:	8193      	strh	r3, [r2, #12]
}
   81568:	2001      	movs	r0, #1
   8156a:	4770      	bx	lr
   8156c:	200022e8 	.word	0x200022e8
   81570:	200027ac 	.word	0x200027ac

00081574 <naeusb_build_date_in>:
{
   81574:	b538      	push	{r3, r4, r5, lr}
    strncpy(respbuf, BUILD_TIME, 64);
   81576:	4c0a      	ldr	r4, [pc, #40]	; (815a0 <naeusb_build_date_in+0x2c>)
   81578:	2240      	movs	r2, #64	; 0x40
   8157a:	490a      	ldr	r1, [pc, #40]	; (815a4 <naeusb_build_date_in+0x30>)
   8157c:	4620      	mov	r0, r4
   8157e:	4d0a      	ldr	r5, [pc, #40]	; (815a8 <naeusb_build_date_in+0x34>)
   81580:	47a8      	blx	r5
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81582:	2320      	movs	r3, #32
   81584:	7223      	strb	r3, [r4, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81586:	2237      	movs	r2, #55	; 0x37
   81588:	4908      	ldr	r1, [pc, #32]	; (815ac <naeusb_build_date_in+0x38>)
   8158a:	f104 0009 	add.w	r0, r4, #9
   8158e:	47a8      	blx	r5
    udd_g_ctrlreq.payload = respbuf;
   81590:	4d07      	ldr	r5, [pc, #28]	; (815b0 <naeusb_build_date_in+0x3c>)
   81592:	60ac      	str	r4, [r5, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81594:	4620      	mov	r0, r4
   81596:	4b07      	ldr	r3, [pc, #28]	; (815b4 <naeusb_build_date_in+0x40>)
   81598:	4798      	blx	r3
   8159a:	81a8      	strh	r0, [r5, #12]
}
   8159c:	2001      	movs	r0, #1
   8159e:	bd38      	pop	{r3, r4, r5, pc}
   815a0:	200022e8 	.word	0x200022e8
   815a4:	0008cd3c 	.word	0x0008cd3c
   815a8:	00087059 	.word	0x00087059
   815ac:	0008cd30 	.word	0x0008cd30
   815b0:	200027ac 	.word	0x200027ac
   815b4:	00086ffd 	.word	0x00086ffd

000815b8 <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   815b8:	b508      	push	{r3, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   815ba:	4b07      	ldr	r3, [pc, #28]	; (815d8 <naeusb_setup_in_received+0x20>)
   815bc:	785b      	ldrb	r3, [r3, #1]
   815be:	2b17      	cmp	r3, #23
   815c0:	d003      	beq.n	815ca <naeusb_setup_in_received+0x12>
   815c2:	2b40      	cmp	r3, #64	; 0x40
   815c4:	d004      	beq.n	815d0 <naeusb_setup_in_received+0x18>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
            break;
    }
    return false;
   815c6:	2000      	movs	r0, #0
}
   815c8:	bd08      	pop	{r3, pc}
            return naeusb_fw_version_in();
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <naeusb_setup_in_received+0x24>)
   815cc:	4798      	blx	r3
   815ce:	bd08      	pop	{r3, pc}
            return naeusb_build_date_in();
   815d0:	4b03      	ldr	r3, [pc, #12]	; (815e0 <naeusb_setup_in_received+0x28>)
   815d2:	4798      	blx	r3
   815d4:	bd08      	pop	{r3, pc}
   815d6:	bf00      	nop
   815d8:	200027ac 	.word	0x200027ac
   815dc:	00081555 	.word	0x00081555
   815e0:	00081575 	.word	0x00081575

000815e4 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   815e4:	b508      	push	{r3, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   815e6:	4803      	ldr	r0, [pc, #12]	; (815f4 <naeusb_register_handlers+0x10>)
   815e8:	4b03      	ldr	r3, [pc, #12]	; (815f8 <naeusb_register_handlers+0x14>)
   815ea:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   815ec:	4803      	ldr	r0, [pc, #12]	; (815fc <naeusb_register_handlers+0x18>)
   815ee:	4b04      	ldr	r3, [pc, #16]	; (81600 <naeusb_register_handlers+0x1c>)
   815f0:	4798      	blx	r3
   815f2:	bd08      	pop	{r3, pc}
   815f4:	000815b9 	.word	0x000815b9
   815f8:	0008133d 	.word	0x0008133d
   815fc:	00081481 	.word	0x00081481
   81600:	00081361 	.word	0x00081361

00081604 <mpsse_tx_buffer_remaining>:
    return sizeof(MPSSE_RX_BUFFER) - MPSSE_RX_BYTES;
}

static int16_t mpsse_tx_buffer_remaining(void)
{
    return MPSSE_TX_BYTES - MPSSE_TX_IDX;
   81604:	4b03      	ldr	r3, [pc, #12]	; (81614 <mpsse_tx_buffer_remaining+0x10>)
   81606:	8818      	ldrh	r0, [r3, #0]
   81608:	4b03      	ldr	r3, [pc, #12]	; (81618 <mpsse_tx_buffer_remaining+0x14>)
   8160a:	881b      	ldrh	r3, [r3, #0]
   8160c:	1ac0      	subs	r0, r0, r3
}
   8160e:	b200      	sxth	r0, r0
   81610:	4770      	bx	lr
   81612:	bf00      	nop
   81614:	20001d42 	.word	0x20001d42
   81618:	20001d44 	.word	0x20001d44

0008161c <mpsse_setup_in_received>:


bool mpsse_setup_in_received(void)
{
    // don't handle 
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   8161c:	4b27      	ldr	r3, [pc, #156]	; (816bc <mpsse_setup_in_received+0xa0>)
   8161e:	889b      	ldrh	r3, [r3, #4]
   81620:	2b01      	cmp	r3, #1
   81622:	d001      	beq.n	81628 <mpsse_setup_in_received+0xc>
        return false;
   81624:	2000      	movs	r0, #0
   81626:	4770      	bx	lr
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA0) {
   81628:	4b24      	ldr	r3, [pc, #144]	; (816bc <mpsse_setup_in_received+0xa0>)
   8162a:	785b      	ldrb	r3, [r3, #1]
   8162c:	2ba0      	cmp	r3, #160	; 0xa0
   8162e:	d010      	beq.n	81652 <mpsse_setup_in_received+0x36>
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
        udd_g_ctrlreq.payload_size = 11;
        return true;
    }

    uint16_t wValue = udd_g_ctrlreq.req.wValue;
   81630:	4a22      	ldr	r2, [pc, #136]	; (816bc <mpsse_setup_in_received+0xa0>)
   81632:	8852      	ldrh	r2, [r2, #2]
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   81634:	2ba1      	cmp	r3, #161	; 0xa1
   81636:	d034      	beq.n	816a2 <mpsse_setup_in_received+0x86>
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   81638:	2ba2      	cmp	r3, #162	; 0xa2
   8163a:	d13d      	bne.n	816b8 <mpsse_setup_in_received+0x9c>
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   8163c:	4b20      	ldr	r3, [pc, #128]	; (816c0 <mpsse_setup_in_received+0xa4>)
   8163e:	4413      	add	r3, r2
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
   81640:	4a1e      	ldr	r2, [pc, #120]	; (816bc <mpsse_setup_in_received+0xa0>)
        addr &= ~(0b11);
   81642:	f023 0303 	bic.w	r3, r3, #3
        udd_g_ctrlreq.payload = (void *) addr;
   81646:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 256;
   81648:	f44f 7380 	mov.w	r3, #256	; 0x100
   8164c:	8193      	strh	r3, [r2, #12]
    }
    return true;
   8164e:	2001      	movs	r0, #1
   81650:	4770      	bx	lr
        MPSSE_RX_BUFFER[0] = MPSSE_CUR_CMD;
   81652:	4b1c      	ldr	r3, [pc, #112]	; (816c4 <mpsse_setup_in_received+0xa8>)
   81654:	781a      	ldrb	r2, [r3, #0]
   81656:	4b1c      	ldr	r3, [pc, #112]	; (816c8 <mpsse_setup_in_received+0xac>)
   81658:	701a      	strb	r2, [r3, #0]
        MPSSE_RX_BUFFER[1] = MPSSE_TX_IDX & 0xFF;
   8165a:	4a1c      	ldr	r2, [pc, #112]	; (816cc <mpsse_setup_in_received+0xb0>)
   8165c:	7812      	ldrb	r2, [r2, #0]
   8165e:	705a      	strb	r2, [r3, #1]
        MPSSE_RX_BUFFER[2] = MPSSE_TX_BYTES & 0xFF;
   81660:	4a1b      	ldr	r2, [pc, #108]	; (816d0 <mpsse_setup_in_received+0xb4>)
   81662:	7812      	ldrb	r2, [r2, #0]
   81664:	709a      	strb	r2, [r3, #2]
        MPSSE_RX_BUFFER[3] = MPSSE_RX_BYTES & 0xFF;
   81666:	4a1b      	ldr	r2, [pc, #108]	; (816d4 <mpsse_setup_in_received+0xb8>)
   81668:	7812      	ldrb	r2, [r2, #0]
   8166a:	70da      	strb	r2, [r3, #3]
        MPSSE_RX_BUFFER[4] = MPSSE_TRANSMISSION_LEN & 0xFF;
   8166c:	4a1a      	ldr	r2, [pc, #104]	; (816d8 <mpsse_setup_in_received+0xbc>)
   8166e:	7812      	ldrb	r2, [r2, #0]
   81670:	711a      	strb	r2, [r3, #4]
        MPSSE_RX_BUFFER[5] = MPSSE_TRANSACTION_LOCK;
   81672:	4a1a      	ldr	r2, [pc, #104]	; (816dc <mpsse_setup_in_received+0xc0>)
   81674:	7812      	ldrb	r2, [r2, #0]
   81676:	715a      	strb	r2, [r3, #5]
        MPSSE_RX_BUFFER[6] = NUM_PROCESSED_CMDS & 0xFF;
   81678:	4a19      	ldr	r2, [pc, #100]	; (816e0 <mpsse_setup_in_received+0xc4>)
   8167a:	6812      	ldr	r2, [r2, #0]
   8167c:	b2d1      	uxtb	r1, r2
   8167e:	7199      	strb	r1, [r3, #6]
        MPSSE_RX_BUFFER[7] = (NUM_PROCESSED_CMDS >> 8) & 0xFF;
   81680:	f3c2 2107 	ubfx	r1, r2, #8, #8
   81684:	71d9      	strb	r1, [r3, #7]
        MPSSE_RX_BUFFER[8] = (NUM_PROCESSED_CMDS >> 16) & 0xFF;
   81686:	f3c2 4107 	ubfx	r1, r2, #16, #8
   8168a:	7219      	strb	r1, [r3, #8]
        MPSSE_RX_BUFFER[9] = (NUM_PROCESSED_CMDS >> 24) & 0xFF;
   8168c:	0e12      	lsrs	r2, r2, #24
   8168e:	725a      	strb	r2, [r3, #9]
        MPSSE_RX_BUFFER[10] = MPSSE_LOOPBACK_ENABLED;
   81690:	4a14      	ldr	r2, [pc, #80]	; (816e4 <mpsse_setup_in_received+0xc8>)
   81692:	7812      	ldrb	r2, [r2, #0]
   81694:	729a      	strb	r2, [r3, #10]
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
   81696:	4a09      	ldr	r2, [pc, #36]	; (816bc <mpsse_setup_in_received+0xa0>)
   81698:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 11;
   8169a:	230b      	movs	r3, #11
   8169c:	8193      	strh	r3, [r2, #12]
        return true;
   8169e:	2001      	movs	r0, #1
   816a0:	4770      	bx	lr
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   816a2:	4b09      	ldr	r3, [pc, #36]	; (816c8 <mpsse_setup_in_received+0xac>)
   816a4:	4413      	add	r3, r2
        udd_g_ctrlreq.payload = (void *) addr;
   816a6:	4a05      	ldr	r2, [pc, #20]	; (816bc <mpsse_setup_in_received+0xa0>)
        addr &= ~(0b11);
   816a8:	f023 0303 	bic.w	r3, r3, #3
        udd_g_ctrlreq.payload = (void *) addr;
   816ac:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 256;
   816ae:	f44f 7380 	mov.w	r3, #256	; 0x100
   816b2:	8193      	strh	r3, [r2, #12]
    return true;
   816b4:	2001      	movs	r0, #1
   816b6:	4770      	bx	lr
   816b8:	2001      	movs	r0, #1
}
   816ba:	4770      	bx	lr
   816bc:	200027ac 	.word	0x200027ac
   816c0:	20080040 	.word	0x20080040
   816c4:	20001d3d 	.word	0x20001d3d
   816c8:	20080000 	.word	0x20080000
   816cc:	20001d44 	.word	0x20001d44
   816d0:	20001d42 	.word	0x20001d42
   816d4:	20000652 	.word	0x20000652
   816d8:	20001d40 	.word	0x20001d40
   816dc:	20000654 	.word	0x20000654
   816e0:	20001d48 	.word	0x20001d48
   816e4:	20001d3f 	.word	0x20001d3f

000816e8 <mpsse_setup_out_received>:
{
   816e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   816ea:	b083      	sub	sp, #12
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   816ec:	4b29      	ldr	r3, [pc, #164]	; (81794 <mpsse_setup_out_received+0xac>)
   816ee:	789b      	ldrb	r3, [r3, #2]
   816f0:	2b42      	cmp	r3, #66	; 0x42
   816f2:	d008      	beq.n	81706 <mpsse_setup_out_received+0x1e>
    if ((udd_g_ctrlreq.req.wIndex != 0x01) && (udd_g_ctrlreq.req.wIndex != 0x02)) {
   816f4:	4b27      	ldr	r3, [pc, #156]	; (81794 <mpsse_setup_out_received+0xac>)
   816f6:	889b      	ldrh	r3, [r3, #4]
   816f8:	3b01      	subs	r3, #1
   816fa:	b29b      	uxth	r3, r3
   816fc:	2b01      	cmp	r3, #1
   816fe:	d90e      	bls.n	8171e <mpsse_setup_out_received+0x36>
        return false;
   81700:	2000      	movs	r0, #0
}
   81702:	b003      	add	sp, #12
   81704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   81706:	4b23      	ldr	r3, [pc, #140]	; (81794 <mpsse_setup_out_received+0xac>)
   81708:	785b      	ldrb	r3, [r3, #1]
   8170a:	2b22      	cmp	r3, #34	; 0x22
   8170c:	d1f2      	bne.n	816f4 <mpsse_setup_out_received+0xc>
        udc_stop();
   8170e:	4b22      	ldr	r3, [pc, #136]	; (81798 <mpsse_setup_out_received+0xb0>)
   81710:	4798      	blx	r3
        switch_configurations();
   81712:	4b22      	ldr	r3, [pc, #136]	; (8179c <mpsse_setup_out_received+0xb4>)
   81714:	4798      	blx	r3
        udc_start();
   81716:	4b22      	ldr	r3, [pc, #136]	; (817a0 <mpsse_setup_out_received+0xb8>)
   81718:	4798      	blx	r3
        return true;
   8171a:	2001      	movs	r0, #1
   8171c:	e7f1      	b.n	81702 <mpsse_setup_out_received+0x1a>
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
   8171e:	4b1d      	ldr	r3, [pc, #116]	; (81794 <mpsse_setup_out_received+0xac>)
   81720:	785b      	ldrb	r3, [r3, #1]
   81722:	b10b      	cbz	r3, 81728 <mpsse_setup_out_received+0x40>
    return true;
   81724:	2001      	movs	r0, #1
   81726:	e7ec      	b.n	81702 <mpsse_setup_out_received+0x1a>
        memset(MPSSE_RX_BUFFER, 0, sizeof(MPSSE_RX_BUFFER));
   81728:	4e1e      	ldr	r6, [pc, #120]	; (817a4 <mpsse_setup_out_received+0xbc>)
   8172a:	2540      	movs	r5, #64	; 0x40
   8172c:	462a      	mov	r2, r5
   8172e:	2100      	movs	r1, #0
   81730:	4630      	mov	r0, r6
   81732:	4c1d      	ldr	r4, [pc, #116]	; (817a8 <mpsse_setup_out_received+0xc0>)
   81734:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER, 0, sizeof(MPSSE_TX_BUFFER));
   81736:	1977      	adds	r7, r6, r5
   81738:	462a      	mov	r2, r5
   8173a:	2100      	movs	r1, #0
   8173c:	4638      	mov	r0, r7
   8173e:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER_BAK, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   81740:	462a      	mov	r2, r5
   81742:	2100      	movs	r1, #0
   81744:	f106 0080 	add.w	r0, r6, #128	; 0x80
   81748:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
   8174a:	2006      	movs	r0, #6
   8174c:	4c17      	ldr	r4, [pc, #92]	; (817ac <mpsse_setup_out_received+0xc4>)
   8174e:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_IN);
   81750:	2085      	movs	r0, #133	; 0x85
   81752:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_DIN_GPIO, PIO_DEFAULT);
   81754:	2100      	movs	r1, #0
   81756:	200d      	movs	r0, #13
   81758:	4c15      	ldr	r4, [pc, #84]	; (817b0 <mpsse_setup_out_received+0xc8>)
   8175a:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_DOUT_GPIO, PIO_OUTPUT_0);
   8175c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81760:	200e      	movs	r0, #14
   81762:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_SCK_GPIO, PIO_OUTPUT_0);
   81764:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81768:	200f      	movs	r0, #15
   8176a:	47a0      	blx	r4
        gpio_configure_pin(MPSSE_TMS_GPIO, PIN_PDIC_OUT_FLAGS);
   8176c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81770:	2018      	movs	r0, #24
   81772:	47a0      	blx	r4
        MPSSE_TRANSACTION_LOCK = 1;
   81774:	2401      	movs	r4, #1
   81776:	4b0f      	ldr	r3, [pc, #60]	; (817b4 <mpsse_setup_out_received+0xcc>)
   81778:	701c      	strb	r4, [r3, #0]
        NUM_PROCESSED_CMDS = 0;
   8177a:	2100      	movs	r1, #0
   8177c:	4b0e      	ldr	r3, [pc, #56]	; (817b8 <mpsse_setup_out_received+0xd0>)
   8177e:	6019      	str	r1, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, false, MPSSE_TX_BUFFER, 64, mpsse_vendor_bulk_out_received);
   81780:	4b0e      	ldr	r3, [pc, #56]	; (817bc <mpsse_setup_out_received+0xd4>)
   81782:	9300      	str	r3, [sp, #0]
   81784:	462b      	mov	r3, r5
   81786:	463a      	mov	r2, r7
   81788:	2006      	movs	r0, #6
   8178a:	4d0d      	ldr	r5, [pc, #52]	; (817c0 <mpsse_setup_out_received+0xd8>)
   8178c:	47a8      	blx	r5
    return true;
   8178e:	4620      	mov	r0, r4
   81790:	e7b7      	b.n	81702 <mpsse_setup_out_received+0x1a>
   81792:	bf00      	nop
   81794:	200027ac 	.word	0x200027ac
   81798:	00082e6d 	.word	0x00082e6d
   8179c:	000807c1 	.word	0x000807c1
   817a0:	00082e19 	.word	0x00082e19
   817a4:	20080000 	.word	0x20080000
   817a8:	00086d75 	.word	0x00086d75
   817ac:	00086075 	.word	0x00086075
   817b0:	000848cd 	.word	0x000848cd
   817b4:	20000654 	.word	0x20000654
   817b8:	20001d48 	.word	0x20001d48
   817bc:	000817c5 	.word	0x000817c5
   817c0:	00085d01 	.word	0x00085d01

000817c4 <mpsse_vendor_bulk_out_received>:
}


void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   817c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   817c6:	b083      	sub	sp, #12
    // we just receive stuff here, then handle in main()
    if (UDD_EP_TRANSFER_OK != status) {
   817c8:	b1b8      	cbz	r0, 817fa <mpsse_vendor_bulk_out_received+0x36>
        // restart
        //TODO: Separate for BAK an non BAK cases
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_REQ ? MPSSE_TX_BUFFER_BAK : MPSSE_TX_BUFFER, 
   817ca:	4b1f      	ldr	r3, [pc, #124]	; (81848 <mpsse_vendor_bulk_out_received+0x84>)
   817cc:	781b      	ldrb	r3, [r3, #0]
   817ce:	2b00      	cmp	r3, #0
   817d0:	4b1e      	ldr	r3, [pc, #120]	; (8184c <mpsse_vendor_bulk_out_received+0x88>)
   817d2:	f103 0440 	add.w	r4, r3, #64	; 0x40
   817d6:	bf08      	it	eq
   817d8:	461c      	moveq	r4, r3
            64 - mpsse_tx_buffer_remaining(), mpsse_vendor_bulk_out_received);
   817da:	4b1d      	ldr	r3, [pc, #116]	; (81850 <mpsse_vendor_bulk_out_received+0x8c>)
   817dc:	4798      	blx	r3
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_REQ ? MPSSE_TX_BUFFER_BAK : MPSSE_TX_BUFFER, 
   817de:	4b1d      	ldr	r3, [pc, #116]	; (81854 <mpsse_vendor_bulk_out_received+0x90>)
   817e0:	9300      	str	r3, [sp, #0]
   817e2:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   817e6:	4622      	mov	r2, r4
   817e8:	2100      	movs	r1, #0
   817ea:	2006      	movs	r0, #6
   817ec:	4c1a      	ldr	r4, [pc, #104]	; (81858 <mpsse_vendor_bulk_out_received+0x94>)
   817ee:	47a0      	blx	r4
        MPSSE_TRANSACTION_LOCK = 1;
   817f0:	2201      	movs	r2, #1
   817f2:	4b1a      	ldr	r3, [pc, #104]	; (8185c <mpsse_vendor_bulk_out_received+0x98>)
   817f4:	701a      	strb	r2, [r3, #0]
    } else {
        MPSSE_TX_BYTES = nb_transfered;
    }
    MPSSE_TX_IDX = 0;
    MPSSE_TRANSACTION_LOCK = 0;
}
   817f6:	b003      	add	sp, #12
   817f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   817fa:	460e      	mov	r6, r1
    if (MPSSE_TX_REQ) {
   817fc:	4b12      	ldr	r3, [pc, #72]	; (81848 <mpsse_vendor_bulk_out_received+0x84>)
   817fe:	781b      	ldrb	r3, [r3, #0]
   81800:	b1f3      	cbz	r3, 81840 <mpsse_vendor_bulk_out_received+0x7c>
        MPSSE_TX_REQ = 0;
   81802:	2200      	movs	r2, #0
   81804:	4b10      	ldr	r3, [pc, #64]	; (81848 <mpsse_vendor_bulk_out_received+0x84>)
   81806:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < nb_transfered; i++) {
   81808:	b179      	cbz	r1, 8182a <mpsse_vendor_bulk_out_received+0x66>
   8180a:	4614      	mov	r4, r2
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   8180c:	4f10      	ldr	r7, [pc, #64]	; (81850 <mpsse_vendor_bulk_out_received+0x8c>)
   8180e:	4d14      	ldr	r5, [pc, #80]	; (81860 <mpsse_vendor_bulk_out_received+0x9c>)
   81810:	47b8      	blx	r7
   81812:	4420      	add	r0, r4
   81814:	192b      	adds	r3, r5, r4
   81816:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
   8181a:	b2db      	uxtb	r3, r3
   8181c:	4428      	add	r0, r5
   8181e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        for (uint16_t i = 0; i < nb_transfered; i++) {
   81822:	3401      	adds	r4, #1
   81824:	b2a4      	uxth	r4, r4
   81826:	42b4      	cmp	r4, r6
   81828:	d3f2      	bcc.n	81810 <mpsse_vendor_bulk_out_received+0x4c>
        MPSSE_TX_BYTES = mpsse_tx_buffer_remaining() + nb_transfered;
   8182a:	4b09      	ldr	r3, [pc, #36]	; (81850 <mpsse_vendor_bulk_out_received+0x8c>)
   8182c:	4798      	blx	r3
   8182e:	4430      	add	r0, r6
   81830:	4b0c      	ldr	r3, [pc, #48]	; (81864 <mpsse_vendor_bulk_out_received+0xa0>)
   81832:	8018      	strh	r0, [r3, #0]
    MPSSE_TX_IDX = 0;
   81834:	2300      	movs	r3, #0
   81836:	4a0c      	ldr	r2, [pc, #48]	; (81868 <mpsse_vendor_bulk_out_received+0xa4>)
   81838:	8013      	strh	r3, [r2, #0]
    MPSSE_TRANSACTION_LOCK = 0;
   8183a:	4a08      	ldr	r2, [pc, #32]	; (8185c <mpsse_vendor_bulk_out_received+0x98>)
   8183c:	7013      	strb	r3, [r2, #0]
   8183e:	e7da      	b.n	817f6 <mpsse_vendor_bulk_out_received+0x32>
        MPSSE_TX_BYTES = nb_transfered;
   81840:	4b08      	ldr	r3, [pc, #32]	; (81864 <mpsse_vendor_bulk_out_received+0xa0>)
   81842:	8019      	strh	r1, [r3, #0]
   81844:	e7f6      	b.n	81834 <mpsse_vendor_bulk_out_received+0x70>
   81846:	bf00      	nop
   81848:	20001d46 	.word	0x20001d46
   8184c:	20080040 	.word	0x20080040
   81850:	00081605 	.word	0x00081605
   81854:	000817c5 	.word	0x000817c5
   81858:	00085d01 	.word	0x00085d01
   8185c:	20000654 	.word	0x20000654
   81860:	20080000 	.word	0x20080000
   81864:	20001d42 	.word	0x20001d42
   81868:	20001d44 	.word	0x20001d44

0008186c <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
   8186c:	b530      	push	{r4, r5, lr}
   8186e:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
   81870:	bb00      	cbnz	r0, 818b4 <mpsse_vendor_bulk_in_received+0x48>
        // I think this is the right thing to do
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (MPSSE_RX_BYTES - nb_transferred); i++) {
   81872:	4b1a      	ldr	r3, [pc, #104]	; (818dc <mpsse_vendor_bulk_in_received+0x70>)
   81874:	f9b3 5000 	ldrsh.w	r5, [r3]
   81878:	1a6c      	subs	r4, r5, r1
   8187a:	d00b      	beq.n	81894 <mpsse_vendor_bulk_in_received+0x28>
   8187c:	2200      	movs	r2, #0
   8187e:	4613      	mov	r3, r2
        // move data to start of buffer
        // simplifies things, plus avoids buffer alignment issues
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   81880:	4817      	ldr	r0, [pc, #92]	; (818e0 <mpsse_vendor_bulk_in_received+0x74>)
   81882:	440a      	add	r2, r1
   81884:	5c82      	ldrb	r2, [r0, r2]
   81886:	b2d2      	uxtb	r2, r2
   81888:	54c2      	strb	r2, [r0, r3]
    for (uint16_t i = 0; i < (MPSSE_RX_BYTES - nb_transferred); i++) {
   8188a:	3301      	adds	r3, #1
   8188c:	b29b      	uxth	r3, r3
   8188e:	461a      	mov	r2, r3
   81890:	42a3      	cmp	r3, r4
   81892:	d3f6      	bcc.n	81882 <mpsse_vendor_bulk_in_received+0x16>
    }
    MPSSE_RX_BYTES -= nb_transferred;
   81894:	1a69      	subs	r1, r5, r1
   81896:	b20b      	sxth	r3, r1
   81898:	4a10      	ldr	r2, [pc, #64]	; (818dc <mpsse_vendor_bulk_in_received+0x70>)
   8189a:	8013      	strh	r3, [r2, #0]
    
    if (MPSSE_RX_BYTES) {
   8189c:	b9ab      	cbnz	r3, 818ca <mpsse_vendor_bulk_in_received+0x5e>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
    } else {
        MPSSE_RX_BYTES = 2;
   8189e:	2202      	movs	r2, #2
   818a0:	4b0e      	ldr	r3, [pc, #56]	; (818dc <mpsse_vendor_bulk_in_received+0x70>)
   818a2:	801a      	strh	r2, [r3, #0]
        MPSSE_RX_BUFFER[0] = 0x00;
   818a4:	4a0e      	ldr	r2, [pc, #56]	; (818e0 <mpsse_vendor_bulk_in_received+0x74>)
   818a6:	2300      	movs	r3, #0
   818a8:	7013      	strb	r3, [r2, #0]
        MPSSE_RX_BUFFER[1] = 0x00;
   818aa:	7053      	strb	r3, [r2, #1]
        MPSSE_TRANSACTION_LOCK = 0;
   818ac:	4a0d      	ldr	r2, [pc, #52]	; (818e4 <mpsse_vendor_bulk_in_received+0x78>)
   818ae:	7013      	strb	r3, [r2, #0]
    }

}
   818b0:	b003      	add	sp, #12
   818b2:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   818b4:	4b09      	ldr	r3, [pc, #36]	; (818dc <mpsse_vendor_bulk_in_received+0x70>)
   818b6:	f9b3 3000 	ldrsh.w	r3, [r3]
   818ba:	4a0b      	ldr	r2, [pc, #44]	; (818e8 <mpsse_vendor_bulk_in_received+0x7c>)
   818bc:	9200      	str	r2, [sp, #0]
   818be:	4a08      	ldr	r2, [pc, #32]	; (818e0 <mpsse_vendor_bulk_in_received+0x74>)
   818c0:	2100      	movs	r1, #0
   818c2:	2085      	movs	r0, #133	; 0x85
   818c4:	4c09      	ldr	r4, [pc, #36]	; (818ec <mpsse_vendor_bulk_in_received+0x80>)
   818c6:	47a0      	blx	r4
        return;
   818c8:	e7f2      	b.n	818b0 <mpsse_vendor_bulk_in_received+0x44>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   818ca:	4a07      	ldr	r2, [pc, #28]	; (818e8 <mpsse_vendor_bulk_in_received+0x7c>)
   818cc:	9200      	str	r2, [sp, #0]
   818ce:	4a04      	ldr	r2, [pc, #16]	; (818e0 <mpsse_vendor_bulk_in_received+0x74>)
   818d0:	2100      	movs	r1, #0
   818d2:	2085      	movs	r0, #133	; 0x85
   818d4:	4c05      	ldr	r4, [pc, #20]	; (818ec <mpsse_vendor_bulk_in_received+0x80>)
   818d6:	47a0      	blx	r4
   818d8:	e7ea      	b.n	818b0 <mpsse_vendor_bulk_in_received+0x44>
   818da:	bf00      	nop
   818dc:	20000652 	.word	0x20000652
   818e0:	20080000 	.word	0x20080000
   818e4:	20000654 	.word	0x20000654
   818e8:	0008186d 	.word	0x0008186d
   818ec:	00085d01 	.word	0x00085d01

000818f0 <mpsse_send_bit>:
{
   818f0:	b538      	push	{r3, r4, r5, lr}
    value &= 0x01;
   818f2:	f000 0401 	and.w	r4, r0, #1
    if (MPSSE_LOOPBACK_ENABLED) {
   818f6:	4b39      	ldr	r3, [pc, #228]	; (819dc <mpsse_send_bit+0xec>)
   818f8:	781d      	ldrb	r5, [r3, #0]
   818fa:	b10d      	cbz	r5, 81900 <mpsse_send_bit+0x10>
}
   818fc:	4620      	mov	r0, r4
   818fe:	bd38      	pop	{r3, r4, r5, pc}
    if (DOUT_NMATCH_SCK) { //Clock out data on IDLE->NON_IDLE
   81900:	200f      	movs	r0, #15
   81902:	4b37      	ldr	r3, [pc, #220]	; (819e0 <mpsse_send_bit+0xf0>)
   81904:	4798      	blx	r3
   81906:	2800      	cmp	r0, #0
   81908:	d139      	bne.n	8197e <mpsse_send_bit+0x8e>
   8190a:	4b36      	ldr	r3, [pc, #216]	; (819e4 <mpsse_send_bit+0xf4>)
   8190c:	781b      	ldrb	r3, [r3, #0]
   8190e:	f083 0301 	eor.w	r3, r3, #1
   81912:	f003 0301 	and.w	r3, r3, #1
   81916:	b123      	cbz	r3, 81922 <mpsse_send_bit+0x32>
        if (value) {
   81918:	2c00      	cmp	r4, #0
   8191a:	d035      	beq.n	81988 <mpsse_send_bit+0x98>
            gpio_set_pin_high(dpin);
   8191c:	200e      	movs	r0, #14
   8191e:	4b32      	ldr	r3, [pc, #200]	; (819e8 <mpsse_send_bit+0xf8>)
   81920:	4798      	blx	r3
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81922:	200f      	movs	r0, #15
   81924:	4b31      	ldr	r3, [pc, #196]	; (819ec <mpsse_send_bit+0xfc>)
   81926:	4798      	blx	r3
    if (DIN_NMATCH_SCK) { //read data on IDLE->NON_IDLE
   81928:	200f      	movs	r0, #15
   8192a:	4b2d      	ldr	r3, [pc, #180]	; (819e0 <mpsse_send_bit+0xf0>)
   8192c:	4798      	blx	r3
   8192e:	2800      	cmp	r0, #0
   81930:	d12e      	bne.n	81990 <mpsse_send_bit+0xa0>
   81932:	4b2c      	ldr	r3, [pc, #176]	; (819e4 <mpsse_send_bit+0xf4>)
   81934:	781b      	ldrb	r3, [r3, #0]
   81936:	f3c3 0380 	ubfx	r3, r3, #2, #1
   8193a:	2b00      	cmp	r3, #0
   8193c:	d12f      	bne.n	8199e <mpsse_send_bit+0xae>
    if (DOUT_NMATCH_SCK) { //Clock out data on NON_IDLE->IDLE
   8193e:	200f      	movs	r0, #15
   81940:	4b27      	ldr	r3, [pc, #156]	; (819e0 <mpsse_send_bit+0xf0>)
   81942:	4798      	blx	r3
   81944:	2800      	cmp	r0, #0
   81946:	d131      	bne.n	819ac <mpsse_send_bit+0xbc>
   81948:	4b26      	ldr	r3, [pc, #152]	; (819e4 <mpsse_send_bit+0xf4>)
   8194a:	781b      	ldrb	r3, [r3, #0]
   8194c:	f083 0301 	eor.w	r3, r3, #1
   81950:	f003 0301 	and.w	r3, r3, #1
   81954:	b123      	cbz	r3, 81960 <mpsse_send_bit+0x70>
        if (value) {
   81956:	2c00      	cmp	r4, #0
   81958:	d02d      	beq.n	819b6 <mpsse_send_bit+0xc6>
            gpio_set_pin_high(dpin);
   8195a:	200e      	movs	r0, #14
   8195c:	4b22      	ldr	r3, [pc, #136]	; (819e8 <mpsse_send_bit+0xf8>)
   8195e:	4798      	blx	r3
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81960:	200f      	movs	r0, #15
   81962:	4b22      	ldr	r3, [pc, #136]	; (819ec <mpsse_send_bit+0xfc>)
   81964:	4798      	blx	r3
    if (DIN_NMATCH_SCK) { //read data on NON_IDLE->IDLE
   81966:	200f      	movs	r0, #15
   81968:	4b1d      	ldr	r3, [pc, #116]	; (819e0 <mpsse_send_bit+0xf0>)
   8196a:	4798      	blx	r3
   8196c:	bb38      	cbnz	r0, 819be <mpsse_send_bit+0xce>
   8196e:	4b1d      	ldr	r3, [pc, #116]	; (819e4 <mpsse_send_bit+0xf4>)
   81970:	781b      	ldrb	r3, [r3, #0]
   81972:	f3c3 0380 	ubfx	r3, r3, #2, #1
   81976:	bb4b      	cbnz	r3, 819cc <mpsse_send_bit+0xdc>
    return read_value & 0x01;
   81978:	f005 0401 	and.w	r4, r5, #1
   8197c:	e7be      	b.n	818fc <mpsse_send_bit+0xc>
    if (DOUT_NMATCH_SCK) { //Clock out data on IDLE->NON_IDLE
   8197e:	4b19      	ldr	r3, [pc, #100]	; (819e4 <mpsse_send_bit+0xf4>)
   81980:	781b      	ldrb	r3, [r3, #0]
   81982:	f003 0301 	and.w	r3, r3, #1
   81986:	e7c6      	b.n	81916 <mpsse_send_bit+0x26>
            gpio_set_pin_low(dpin);
   81988:	200e      	movs	r0, #14
   8198a:	4b19      	ldr	r3, [pc, #100]	; (819f0 <mpsse_send_bit+0x100>)
   8198c:	4798      	blx	r3
   8198e:	e7c8      	b.n	81922 <mpsse_send_bit+0x32>
    if (DIN_NMATCH_SCK) { //read data on IDLE->NON_IDLE
   81990:	4b14      	ldr	r3, [pc, #80]	; (819e4 <mpsse_send_bit+0xf4>)
   81992:	781b      	ldrb	r3, [r3, #0]
   81994:	f083 0304 	eor.w	r3, r3, #4
   81998:	f3c3 0380 	ubfx	r3, r3, #2, #1
   8199c:	e7cd      	b.n	8193a <mpsse_send_bit+0x4a>
        read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   8199e:	200d      	movs	r0, #13
   819a0:	4b0f      	ldr	r3, [pc, #60]	; (819e0 <mpsse_send_bit+0xf0>)
   819a2:	4798      	blx	r3
   819a4:	1c05      	adds	r5, r0, #0
   819a6:	bf18      	it	ne
   819a8:	2501      	movne	r5, #1
   819aa:	e7c8      	b.n	8193e <mpsse_send_bit+0x4e>
    if (DOUT_NMATCH_SCK) { //Clock out data on NON_IDLE->IDLE
   819ac:	4b0d      	ldr	r3, [pc, #52]	; (819e4 <mpsse_send_bit+0xf4>)
   819ae:	781b      	ldrb	r3, [r3, #0]
   819b0:	f003 0301 	and.w	r3, r3, #1
   819b4:	e7ce      	b.n	81954 <mpsse_send_bit+0x64>
            gpio_set_pin_low(dpin);
   819b6:	200e      	movs	r0, #14
   819b8:	4b0d      	ldr	r3, [pc, #52]	; (819f0 <mpsse_send_bit+0x100>)
   819ba:	4798      	blx	r3
   819bc:	e7d0      	b.n	81960 <mpsse_send_bit+0x70>
    if (DIN_NMATCH_SCK) { //read data on NON_IDLE->IDLE
   819be:	4b09      	ldr	r3, [pc, #36]	; (819e4 <mpsse_send_bit+0xf4>)
   819c0:	781b      	ldrb	r3, [r3, #0]
   819c2:	f083 0304 	eor.w	r3, r3, #4
   819c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   819ca:	e7d4      	b.n	81976 <mpsse_send_bit+0x86>
        read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   819cc:	200d      	movs	r0, #13
   819ce:	4b04      	ldr	r3, [pc, #16]	; (819e0 <mpsse_send_bit+0xf0>)
   819d0:	4798      	blx	r3
   819d2:	1c05      	adds	r5, r0, #0
   819d4:	bf18      	it	ne
   819d6:	2501      	movne	r5, #1
   819d8:	e7ce      	b.n	81978 <mpsse_send_bit+0x88>
   819da:	bf00      	nop
   819dc:	20001d3f 	.word	0x20001d3f
   819e0:	0008485b 	.word	0x0008485b
   819e4:	20001d3d 	.word	0x20001d3d
   819e8:	00084877 	.word	0x00084877
   819ec:	000848ab 	.word	0x000848ab
   819f0:	00084891 	.word	0x00084891

000819f4 <mpsse_send_bits>:
{
   819f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (uint8_t i = 0; i < num_bits; i++) {
   819f8:	b371      	cbz	r1, 81a58 <mpsse_send_bits+0x64>
   819fa:	4606      	mov	r6, r0
   819fc:	f101 39ff 	add.w	r9, r1, #4294967295
   81a00:	fa5f f989 	uxtb.w	r9, r9
   81a04:	f1c9 0906 	rsb	r9, r9, #6
   81a08:	2407      	movs	r4, #7
   81a0a:	f04f 0a00 	mov.w	sl, #0
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81a0e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81a64 <mpsse_send_bits+0x70>
            read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   81a12:	4f13      	ldr	r7, [pc, #76]	; (81a60 <mpsse_send_bits+0x6c>)
   81a14:	e00d      	b.n	81a32 <mpsse_send_bits+0x3e>
   81a16:	fa46 f004 	asr.w	r0, r6, r4
   81a1a:	f000 0001 	and.w	r0, r0, #1
   81a1e:	47b8      	blx	r7
   81a20:	fa00 f504 	lsl.w	r5, r0, r4
   81a24:	ea45 050a 	orr.w	r5, r5, sl
   81a28:	fa5f fa85 	uxtb.w	sl, r5
   81a2c:	3c01      	subs	r4, #1
    for (uint8_t i = 0; i < num_bits; i++) {
   81a2e:	454c      	cmp	r4, r9
   81a30:	d013      	beq.n	81a5a <mpsse_send_bits+0x66>
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81a32:	f898 3000 	ldrb.w	r3, [r8]
   81a36:	f013 0f08 	tst.w	r3, #8
   81a3a:	d0ec      	beq.n	81a16 <mpsse_send_bits+0x22>
   81a3c:	f1c4 0507 	rsb	r5, r4, #7
            read_value |= mpsse_send_bit((value >> i) & 0x01) << i;
   81a40:	fa46 f005 	asr.w	r0, r6, r5
   81a44:	f000 0001 	and.w	r0, r0, #1
   81a48:	47b8      	blx	r7
   81a4a:	fa00 f505 	lsl.w	r5, r0, r5
   81a4e:	ea45 050a 	orr.w	r5, r5, sl
   81a52:	fa5f fa85 	uxtb.w	sl, r5
   81a56:	e7e9      	b.n	81a2c <mpsse_send_bits+0x38>
    uint8_t read_value = 0;
   81a58:	468a      	mov	sl, r1
}
   81a5a:	4650      	mov	r0, sl
   81a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81a60:	000818f1 	.word	0x000818f1
   81a64:	20001d3d 	.word	0x20001d3d

00081a68 <mpsse_send_byte>:
{
   81a68:	b508      	push	{r3, lr}
    return mpsse_send_bits(value, 8);
   81a6a:	2108      	movs	r1, #8
   81a6c:	4b01      	ldr	r3, [pc, #4]	; (81a74 <mpsse_send_byte+0xc>)
   81a6e:	4798      	blx	r3
}
   81a70:	bd08      	pop	{r3, pc}
   81a72:	bf00      	nop
   81a74:	000819f5 	.word	0x000819f5

00081a78 <mpsse_tms_bit_send>:
{
   81a78:	b538      	push	{r3, r4, r5, lr}
    value &= 0x01;
   81a7a:	f000 0501 	and.w	r5, r0, #1
    if (DOUT_NMATCH_SCK) { //Clock out data on IDLE->NON_IDLE
   81a7e:	200f      	movs	r0, #15
   81a80:	4b35      	ldr	r3, [pc, #212]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81a82:	4798      	blx	r3
   81a84:	2800      	cmp	r0, #0
   81a86:	d139      	bne.n	81afc <mpsse_tms_bit_send+0x84>
   81a88:	4b34      	ldr	r3, [pc, #208]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81a8a:	781b      	ldrb	r3, [r3, #0]
   81a8c:	f083 0301 	eor.w	r3, r3, #1
   81a90:	f003 0301 	and.w	r3, r3, #1
   81a94:	b123      	cbz	r3, 81aa0 <mpsse_tms_bit_send+0x28>
        if (value) {
   81a96:	2d00      	cmp	r5, #0
   81a98:	d035      	beq.n	81b06 <mpsse_tms_bit_send+0x8e>
            gpio_set_pin_high(dpin);
   81a9a:	2018      	movs	r0, #24
   81a9c:	4b30      	ldr	r3, [pc, #192]	; (81b60 <mpsse_tms_bit_send+0xe8>)
   81a9e:	4798      	blx	r3
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81aa0:	200f      	movs	r0, #15
   81aa2:	4b30      	ldr	r3, [pc, #192]	; (81b64 <mpsse_tms_bit_send+0xec>)
   81aa4:	4798      	blx	r3
    if (DIN_NMATCH_SCK) { //read data on IDLE->NON_IDLE
   81aa6:	200f      	movs	r0, #15
   81aa8:	4b2b      	ldr	r3, [pc, #172]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81aaa:	4798      	blx	r3
   81aac:	2800      	cmp	r0, #0
   81aae:	d12e      	bne.n	81b0e <mpsse_tms_bit_send+0x96>
   81ab0:	4b2a      	ldr	r3, [pc, #168]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81ab2:	781b      	ldrb	r3, [r3, #0]
   81ab4:	f3c3 0380 	ubfx	r3, r3, #2, #1
   81ab8:	2b00      	cmp	r3, #0
   81aba:	d12f      	bne.n	81b1c <mpsse_tms_bit_send+0xa4>
    uint8_t read_value = 0;
   81abc:	2400      	movs	r4, #0
    if (DOUT_NMATCH_SCK) { //Clock out data on NON_IDLE->IDLE
   81abe:	200f      	movs	r0, #15
   81ac0:	4b25      	ldr	r3, [pc, #148]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81ac2:	4798      	blx	r3
   81ac4:	2800      	cmp	r0, #0
   81ac6:	d130      	bne.n	81b2a <mpsse_tms_bit_send+0xb2>
   81ac8:	4b24      	ldr	r3, [pc, #144]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81aca:	781b      	ldrb	r3, [r3, #0]
   81acc:	f083 0301 	eor.w	r3, r3, #1
   81ad0:	f003 0301 	and.w	r3, r3, #1
   81ad4:	b123      	cbz	r3, 81ae0 <mpsse_tms_bit_send+0x68>
        if (value) {
   81ad6:	2d00      	cmp	r5, #0
   81ad8:	d02c      	beq.n	81b34 <mpsse_tms_bit_send+0xbc>
            gpio_set_pin_high(dpin);
   81ada:	2018      	movs	r0, #24
   81adc:	4b20      	ldr	r3, [pc, #128]	; (81b60 <mpsse_tms_bit_send+0xe8>)
   81ade:	4798      	blx	r3
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   81ae0:	200f      	movs	r0, #15
   81ae2:	4b20      	ldr	r3, [pc, #128]	; (81b64 <mpsse_tms_bit_send+0xec>)
   81ae4:	4798      	blx	r3
    if (DIN_NMATCH_SCK) { //read data on NON_IDLE->IDLE
   81ae6:	200f      	movs	r0, #15
   81ae8:	4b1b      	ldr	r3, [pc, #108]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81aea:	4798      	blx	r3
   81aec:	bb30      	cbnz	r0, 81b3c <mpsse_tms_bit_send+0xc4>
   81aee:	4b1b      	ldr	r3, [pc, #108]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81af0:	781b      	ldrb	r3, [r3, #0]
   81af2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   81af6:	bb43      	cbnz	r3, 81b4a <mpsse_tms_bit_send+0xd2>
}
   81af8:	4620      	mov	r0, r4
   81afa:	bd38      	pop	{r3, r4, r5, pc}
    if (DOUT_NMATCH_SCK) { //Clock out data on IDLE->NON_IDLE
   81afc:	4b17      	ldr	r3, [pc, #92]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81afe:	781b      	ldrb	r3, [r3, #0]
   81b00:	f003 0301 	and.w	r3, r3, #1
   81b04:	e7c6      	b.n	81a94 <mpsse_tms_bit_send+0x1c>
            gpio_set_pin_low(dpin);
   81b06:	2018      	movs	r0, #24
   81b08:	4b17      	ldr	r3, [pc, #92]	; (81b68 <mpsse_tms_bit_send+0xf0>)
   81b0a:	4798      	blx	r3
   81b0c:	e7c8      	b.n	81aa0 <mpsse_tms_bit_send+0x28>
    if (DIN_NMATCH_SCK) { //read data on IDLE->NON_IDLE
   81b0e:	4b13      	ldr	r3, [pc, #76]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81b10:	781b      	ldrb	r3, [r3, #0]
   81b12:	f083 0304 	eor.w	r3, r3, #4
   81b16:	f3c3 0380 	ubfx	r3, r3, #2, #1
   81b1a:	e7cd      	b.n	81ab8 <mpsse_tms_bit_send+0x40>
        read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   81b1c:	200d      	movs	r0, #13
   81b1e:	4b0e      	ldr	r3, [pc, #56]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81b20:	4798      	blx	r3
   81b22:	1c04      	adds	r4, r0, #0
   81b24:	bf18      	it	ne
   81b26:	2401      	movne	r4, #1
   81b28:	e7c9      	b.n	81abe <mpsse_tms_bit_send+0x46>
    if (DOUT_NMATCH_SCK) { //Clock out data on NON_IDLE->IDLE
   81b2a:	4b0c      	ldr	r3, [pc, #48]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81b2c:	781b      	ldrb	r3, [r3, #0]
   81b2e:	f003 0301 	and.w	r3, r3, #1
   81b32:	e7cf      	b.n	81ad4 <mpsse_tms_bit_send+0x5c>
            gpio_set_pin_low(dpin);
   81b34:	2018      	movs	r0, #24
   81b36:	4b0c      	ldr	r3, [pc, #48]	; (81b68 <mpsse_tms_bit_send+0xf0>)
   81b38:	4798      	blx	r3
   81b3a:	e7d1      	b.n	81ae0 <mpsse_tms_bit_send+0x68>
    if (DIN_NMATCH_SCK) { //read data on NON_IDLE->IDLE
   81b3c:	4b07      	ldr	r3, [pc, #28]	; (81b5c <mpsse_tms_bit_send+0xe4>)
   81b3e:	781b      	ldrb	r3, [r3, #0]
   81b40:	f083 0304 	eor.w	r3, r3, #4
   81b44:	f3c3 0380 	ubfx	r3, r3, #2, #1
   81b48:	e7d5      	b.n	81af6 <mpsse_tms_bit_send+0x7e>
        read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   81b4a:	200d      	movs	r0, #13
   81b4c:	4b02      	ldr	r3, [pc, #8]	; (81b58 <mpsse_tms_bit_send+0xe0>)
   81b4e:	4798      	blx	r3
   81b50:	1c04      	adds	r4, r0, #0
   81b52:	bf18      	it	ne
   81b54:	2401      	movne	r4, #1
   81b56:	e7cf      	b.n	81af8 <mpsse_tms_bit_send+0x80>
   81b58:	0008485b 	.word	0x0008485b
   81b5c:	20001d3d 	.word	0x20001d3d
   81b60:	00084877 	.word	0x00084877
   81b64:	000848ab 	.word	0x000848ab
   81b68:	00084891 	.word	0x00084891

00081b6c <mpsse_tms_send>:
{
   81b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b70:	4607      	mov	r7, r0
   81b72:	460e      	mov	r6, r1
    if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81b74:	4b20      	ldr	r3, [pc, #128]	; (81bf8 <mpsse_tms_send+0x8c>)
   81b76:	781b      	ldrb	r3, [r3, #0]
   81b78:	f013 0f08 	tst.w	r3, #8
        bitval = value & 0x01;
   81b7c:	bf14      	ite	ne
   81b7e:	f000 0301 	andne.w	r3, r0, #1
        bitval = (value >> 7) & 0x01;
   81b82:	09c3      	lsreq	r3, r0, #7
    if (bitval) {
   81b84:	b193      	cbz	r3, 81bac <mpsse_tms_send+0x40>
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
   81b86:	200e      	movs	r0, #14
   81b88:	4b1c      	ldr	r3, [pc, #112]	; (81bfc <mpsse_tms_send+0x90>)
   81b8a:	4798      	blx	r3
    for (uint8_t i = 1; i < num_bits; i++) {
   81b8c:	2e01      	cmp	r6, #1
   81b8e:	bf98      	it	ls
   81b90:	f04f 0a00 	movls.w	sl, #0
   81b94:	d92d      	bls.n	81bf2 <mpsse_tms_send+0x86>
   81b96:	3e02      	subs	r6, #2
   81b98:	b2f6      	uxtb	r6, r6
   81b9a:	3602      	adds	r6, #2
   81b9c:	2401      	movs	r4, #1
   81b9e:	f04f 0a00 	mov.w	sl, #0
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81ba2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 81bf8 <mpsse_tms_send+0x8c>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   81ba6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 81c04 <mpsse_tms_send+0x98>
   81baa:	e012      	b.n	81bd2 <mpsse_tms_send+0x66>
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
   81bac:	200e      	movs	r0, #14
   81bae:	4b14      	ldr	r3, [pc, #80]	; (81c00 <mpsse_tms_send+0x94>)
   81bb0:	4798      	blx	r3
   81bb2:	e7eb      	b.n	81b8c <mpsse_tms_send+0x20>
   81bb4:	f1c4 0507 	rsb	r5, r4, #7
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   81bb8:	fa47 f005 	asr.w	r0, r7, r5
   81bbc:	f000 0001 	and.w	r0, r0, #1
   81bc0:	47c0      	blx	r8
   81bc2:	40a8      	lsls	r0, r5
   81bc4:	ea40 000a 	orr.w	r0, r0, sl
   81bc8:	fa5f fa80 	uxtb.w	sl, r0
   81bcc:	3401      	adds	r4, #1
    for (uint8_t i = 1; i < num_bits; i++) {
   81bce:	42a6      	cmp	r6, r4
   81bd0:	d00f      	beq.n	81bf2 <mpsse_tms_send+0x86>
        if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81bd2:	f899 3000 	ldrb.w	r3, [r9]
   81bd6:	f013 0f08 	tst.w	r3, #8
   81bda:	d0eb      	beq.n	81bb4 <mpsse_tms_send+0x48>
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << i;
   81bdc:	fa47 f004 	asr.w	r0, r7, r4
   81be0:	f000 0001 	and.w	r0, r0, #1
   81be4:	47c0      	blx	r8
   81be6:	40a0      	lsls	r0, r4
   81be8:	ea40 000a 	orr.w	r0, r0, sl
   81bec:	fa5f fa80 	uxtb.w	sl, r0
   81bf0:	e7ec      	b.n	81bcc <mpsse_tms_send+0x60>
}
   81bf2:	4650      	mov	r0, sl
   81bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81bf8:	20001d3d 	.word	0x20001d3d
   81bfc:	00084877 	.word	0x00084877
   81c00:	00084891 	.word	0x00084891
   81c04:	00081a79 	.word	0x00081a79

00081c08 <mpsse_handle_transmission>:
{
   81c08:	b530      	push	{r4, r5, lr}
   81c0a:	b083      	sub	sp, #12
    if (MPSSE_TRANSMISSION_LEN == 0) {
   81c0c:	4b75      	ldr	r3, [pc, #468]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
   81c12:	bb33      	cbnz	r3, 81c62 <mpsse_handle_transmission+0x5a>
        if (mpsse_tx_buffer_remaining() < 2) {
   81c14:	4b74      	ldr	r3, [pc, #464]	; (81de8 <mpsse_handle_transmission+0x1e0>)
   81c16:	4798      	blx	r3
   81c18:	2801      	cmp	r0, #1
   81c1a:	dd73      	ble.n	81d04 <mpsse_handle_transmission+0xfc>
        MPSSE_TRANSMISSION_LEN = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81c1c:	4973      	ldr	r1, [pc, #460]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81c1e:	f9b1 0000 	ldrsh.w	r0, [r1]
   81c22:	b282      	uxth	r2, r0
   81c24:	1c53      	adds	r3, r2, #1
   81c26:	b21b      	sxth	r3, r3
   81c28:	800b      	strh	r3, [r1, #0]
   81c2a:	4971      	ldr	r1, [pc, #452]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81c2c:	4401      	add	r1, r0
   81c2e:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
   81c32:	b2c9      	uxtb	r1, r1
   81c34:	b208      	sxth	r0, r1
   81c36:	4c6b      	ldr	r4, [pc, #428]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81c38:	8020      	strh	r0, [r4, #0]
        if (!(MPSSE_CUR_CMD & FTDI_BIT_MODE)) {
   81c3a:	4c6e      	ldr	r4, [pc, #440]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81c3c:	7824      	ldrb	r4, [r4, #0]
   81c3e:	f014 0f02 	tst.w	r4, #2
   81c42:	d163      	bne.n	81d0c <mpsse_handle_transmission+0x104>
            MPSSE_TRANSMISSION_LEN |= MPSSE_TX_BUFFER[MPSSE_TX_IDX++] << 8;
   81c44:	3202      	adds	r2, #2
   81c46:	4969      	ldr	r1, [pc, #420]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81c48:	800a      	strh	r2, [r1, #0]
   81c4a:	4a69      	ldr	r2, [pc, #420]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81c4c:	4413      	add	r3, r2
   81c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
            MPSSE_FIRST_BIT = 1;
   81c52:	2101      	movs	r1, #1
   81c54:	4a68      	ldr	r2, [pc, #416]	; (81df8 <mpsse_handle_transmission+0x1f0>)
   81c56:	7011      	strb	r1, [r2, #0]
            MPSSE_TRANSMISSION_LEN |= MPSSE_TX_BUFFER[MPSSE_TX_IDX++] << 8;
   81c58:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            MPSSE_TRANSMISSION_LEN++; //0x00 sends 1 byte
   81c5c:	4408      	add	r0, r1
   81c5e:	4b61      	ldr	r3, [pc, #388]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81c60:	8018      	strh	r0, [r3, #0]
    if (mpsse_tx_buffer_remaining() < 1) {
   81c62:	4b61      	ldr	r3, [pc, #388]	; (81de8 <mpsse_handle_transmission+0x1e0>)
   81c64:	4798      	blx	r3
   81c66:	2800      	cmp	r0, #0
   81c68:	f340 80a3 	ble.w	81db2 <mpsse_handle_transmission+0x1aa>
    if (MPSSE_CUR_CMD & (FTDI_WRITE_TDI)) {
   81c6c:	4b61      	ldr	r3, [pc, #388]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81c6e:	781b      	ldrb	r3, [r3, #0]
   81c70:	f013 0f10 	tst.w	r3, #16
   81c74:	f000 80a5 	beq.w	81dc2 <mpsse_handle_transmission+0x1ba>
        if (MPSSE_FIRST_BIT && (!MPSSE_LOOPBACK_ENABLED)) {
   81c78:	4a5f      	ldr	r2, [pc, #380]	; (81df8 <mpsse_handle_transmission+0x1f0>)
   81c7a:	7812      	ldrb	r2, [r2, #0]
   81c7c:	b1d2      	cbz	r2, 81cb4 <mpsse_handle_transmission+0xac>
   81c7e:	4a5f      	ldr	r2, [pc, #380]	; (81dfc <mpsse_handle_transmission+0x1f4>)
   81c80:	7812      	ldrb	r2, [r2, #0]
   81c82:	b9ba      	cbnz	r2, 81cb4 <mpsse_handle_transmission+0xac>
            uint8_t value = (MPSSE_TX_BUFFER[MPSSE_TX_IDX]);
   81c84:	4a59      	ldr	r2, [pc, #356]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81c86:	f9b2 1000 	ldrsh.w	r1, [r2]
   81c8a:	4a59      	ldr	r2, [pc, #356]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81c8c:	440a      	add	r2, r1
   81c8e:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   81c92:	b2d2      	uxtb	r2, r2
            if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81c94:	f013 0f08 	tst.w	r3, #8
                bit = value & 0x01;
   81c98:	bf14      	ite	ne
   81c9a:	f002 0201 	andne.w	r2, r2, #1
                bit = value & 0x80;
   81c9e:	f002 0280 	andeq.w	r2, r2, #128	; 0x80
            if (bit) {
   81ca2:	2a00      	cmp	r2, #0
   81ca4:	f000 8089 	beq.w	81dba <mpsse_handle_transmission+0x1b2>
                gpio_set_pin_high(MPSSE_DOUT_GPIO);
   81ca8:	200e      	movs	r0, #14
   81caa:	4b55      	ldr	r3, [pc, #340]	; (81e00 <mpsse_handle_transmission+0x1f8>)
   81cac:	4798      	blx	r3
            MPSSE_FIRST_BIT = 0;
   81cae:	2200      	movs	r2, #0
   81cb0:	4b51      	ldr	r3, [pc, #324]	; (81df8 <mpsse_handle_transmission+0x1f0>)
   81cb2:	701a      	strb	r2, [r3, #0]
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[MPSSE_TX_IDX++]);
   81cb4:	4b4d      	ldr	r3, [pc, #308]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81cb6:	f9b3 2000 	ldrsh.w	r2, [r3]
   81cba:	1c51      	adds	r1, r2, #1
   81cbc:	8019      	strh	r1, [r3, #0]
   81cbe:	4b4c      	ldr	r3, [pc, #304]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81cc0:	4413      	add	r3, r2
   81cc2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
   81cc6:	4b4f      	ldr	r3, [pc, #316]	; (81e04 <mpsse_handle_transmission+0x1fc>)
   81cc8:	4798      	blx	r3
    if (MPSSE_CUR_CMD & FTDI_READ_TDO) {
   81cca:	4b4a      	ldr	r3, [pc, #296]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81ccc:	781b      	ldrb	r3, [r3, #0]
   81cce:	f013 0f20 	tst.w	r3, #32
   81cd2:	d00c      	beq.n	81cee <mpsse_handle_transmission+0xe6>
        MPSSE_RX_BUFFER[MPSSE_RX_BYTES++] = read_val;
   81cd4:	494c      	ldr	r1, [pc, #304]	; (81e08 <mpsse_handle_transmission+0x200>)
   81cd6:	f9b1 2000 	ldrsh.w	r2, [r1]
   81cda:	1c53      	adds	r3, r2, #1
   81cdc:	b29b      	uxth	r3, r3
   81cde:	800b      	strh	r3, [r1, #0]
   81ce0:	4943      	ldr	r1, [pc, #268]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81ce2:	5488      	strb	r0, [r1, r2]
    return sizeof(MPSSE_RX_BUFFER) - MPSSE_RX_BYTES;
   81ce4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
        if (mpsse_rx_buffer_remaining() > 0) {
   81ce8:	b21b      	sxth	r3, r3
   81cea:	2b00      	cmp	r3, #0
   81cec:	dd6d      	ble.n	81dca <mpsse_handle_transmission+0x1c2>
    if (--MPSSE_TRANSMISSION_LEN == 0) {
   81cee:	4a3d      	ldr	r2, [pc, #244]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81cf0:	8813      	ldrh	r3, [r2, #0]
   81cf2:	3b01      	subs	r3, #1
   81cf4:	b21b      	sxth	r3, r3
   81cf6:	8013      	strh	r3, [r2, #0]
   81cf8:	b913      	cbnz	r3, 81d00 <mpsse_handle_transmission+0xf8>
        MPSSE_CUR_CMD = 0;
   81cfa:	2200      	movs	r2, #0
   81cfc:	4b3d      	ldr	r3, [pc, #244]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81cfe:	701a      	strb	r2, [r3, #0]
}
   81d00:	b003      	add	sp, #12
   81d02:	bd30      	pop	{r4, r5, pc}
            MPSSE_TX_REQ = 1;
   81d04:	2201      	movs	r2, #1
   81d06:	4b41      	ldr	r3, [pc, #260]	; (81e0c <mpsse_handle_transmission+0x204>)
   81d08:	701a      	strb	r2, [r3, #0]
            return; //need more data
   81d0a:	e7f9      	b.n	81d00 <mpsse_handle_transmission+0xf8>
            MPSSE_TRANSMISSION_LEN++; //0x00 sends 1 byte
   81d0c:	3101      	adds	r1, #1
   81d0e:	4835      	ldr	r0, [pc, #212]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81d10:	8001      	strh	r1, [r0, #0]
            if (MPSSE_CUR_CMD & FTDI_WRITE_TMS) {
   81d12:	f014 0f40 	tst.w	r4, #64	; 0x40
   81d16:	d131      	bne.n	81d7c <mpsse_handle_transmission+0x174>
                uint8_t value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81d18:	3202      	adds	r2, #2
   81d1a:	4934      	ldr	r1, [pc, #208]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81d1c:	800a      	strh	r2, [r1, #0]
   81d1e:	4a34      	ldr	r2, [pc, #208]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81d20:	4413      	add	r3, r2
   81d22:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   81d26:	b2ed      	uxtb	r5, r5
                if (MPSSE_CUR_CMD & FTDI_LITTLE_ENDIAN) {
   81d28:	f014 0f08 	tst.w	r4, #8
                    bit = value & 0x01;
   81d2c:	bf14      	ite	ne
   81d2e:	f005 0301 	andne.w	r3, r5, #1
                    bit = value & 0x80;
   81d32:	f005 0380 	andeq.w	r3, r5, #128	; 0x80
                if (bit) {
   81d36:	2b00      	cmp	r3, #0
   81d38:	d02b      	beq.n	81d92 <mpsse_handle_transmission+0x18a>
                    gpio_set_pin_high(MPSSE_DOUT_GPIO);
   81d3a:	200e      	movs	r0, #14
   81d3c:	4b30      	ldr	r3, [pc, #192]	; (81e00 <mpsse_handle_transmission+0x1f8>)
   81d3e:	4798      	blx	r3
                read_val = mpsse_send_bits(value, MPSSE_TRANSMISSION_LEN);
   81d40:	4b28      	ldr	r3, [pc, #160]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81d42:	7819      	ldrb	r1, [r3, #0]
   81d44:	4628      	mov	r0, r5
   81d46:	4b32      	ldr	r3, [pc, #200]	; (81e10 <mpsse_handle_transmission+0x208>)
   81d48:	4798      	blx	r3
            MPSSE_TRANSMISSION_LEN = 0;
   81d4a:	2200      	movs	r2, #0
   81d4c:	4b25      	ldr	r3, [pc, #148]	; (81de4 <mpsse_handle_transmission+0x1dc>)
   81d4e:	801a      	strh	r2, [r3, #0]
            if (MPSSE_CUR_CMD & FTDI_READ_TDO) {
   81d50:	4b28      	ldr	r3, [pc, #160]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81d52:	781b      	ldrb	r3, [r3, #0]
   81d54:	f013 0f20 	tst.w	r3, #32
   81d58:	d00c      	beq.n	81d74 <mpsse_handle_transmission+0x16c>
                MPSSE_RX_BUFFER[MPSSE_RX_BYTES++] = read_val;
   81d5a:	492b      	ldr	r1, [pc, #172]	; (81e08 <mpsse_handle_transmission+0x200>)
   81d5c:	f9b1 2000 	ldrsh.w	r2, [r1]
   81d60:	1c53      	adds	r3, r2, #1
   81d62:	b29b      	uxth	r3, r3
   81d64:	800b      	strh	r3, [r1, #0]
   81d66:	4922      	ldr	r1, [pc, #136]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81d68:	5488      	strb	r0, [r1, r2]
    return sizeof(MPSSE_RX_BUFFER) - MPSSE_RX_BYTES;
   81d6a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
                if (mpsse_rx_buffer_remaining() > 0) {
   81d6e:	b21b      	sxth	r3, r3
   81d70:	2b00      	cmp	r3, #0
   81d72:	dd12      	ble.n	81d9a <mpsse_handle_transmission+0x192>
            MPSSE_CUR_CMD = 0;
   81d74:	2200      	movs	r2, #0
   81d76:	4b1f      	ldr	r3, [pc, #124]	; (81df4 <mpsse_handle_transmission+0x1ec>)
   81d78:	701a      	strb	r2, [r3, #0]
            return;
   81d7a:	e7c1      	b.n	81d00 <mpsse_handle_transmission+0xf8>
                read_val = mpsse_tms_send(MPSSE_TX_BUFFER[MPSSE_TX_IDX++], MPSSE_TRANSMISSION_LEN);
   81d7c:	3202      	adds	r2, #2
   81d7e:	481b      	ldr	r0, [pc, #108]	; (81dec <mpsse_handle_transmission+0x1e4>)
   81d80:	8002      	strh	r2, [r0, #0]
   81d82:	4a1b      	ldr	r2, [pc, #108]	; (81df0 <mpsse_handle_transmission+0x1e8>)
   81d84:	4413      	add	r3, r2
   81d86:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
   81d8a:	b2c9      	uxtb	r1, r1
   81d8c:	4b21      	ldr	r3, [pc, #132]	; (81e14 <mpsse_handle_transmission+0x20c>)
   81d8e:	4798      	blx	r3
   81d90:	e7db      	b.n	81d4a <mpsse_handle_transmission+0x142>
                    gpio_set_pin_low(MPSSE_DOUT_GPIO);
   81d92:	200e      	movs	r0, #14
   81d94:	4b20      	ldr	r3, [pc, #128]	; (81e18 <mpsse_handle_transmission+0x210>)
   81d96:	4798      	blx	r3
   81d98:	e7d2      	b.n	81d40 <mpsse_handle_transmission+0x138>
                    MPSSE_TRANSACTION_LOCK = 1;
   81d9a:	2201      	movs	r2, #1
   81d9c:	4b1f      	ldr	r3, [pc, #124]	; (81e1c <mpsse_handle_transmission+0x214>)
   81d9e:	701a      	strb	r2, [r3, #0]
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   81da0:	4b1f      	ldr	r3, [pc, #124]	; (81e20 <mpsse_handle_transmission+0x218>)
   81da2:	9300      	str	r3, [sp, #0]
   81da4:	2340      	movs	r3, #64	; 0x40
   81da6:	460a      	mov	r2, r1
   81da8:	2100      	movs	r1, #0
   81daa:	2085      	movs	r0, #133	; 0x85
   81dac:	4c1d      	ldr	r4, [pc, #116]	; (81e24 <mpsse_handle_transmission+0x21c>)
   81dae:	47a0      	blx	r4
   81db0:	e7e0      	b.n	81d74 <mpsse_handle_transmission+0x16c>
        MPSSE_TX_REQ = 1;
   81db2:	2201      	movs	r2, #1
   81db4:	4b15      	ldr	r3, [pc, #84]	; (81e0c <mpsse_handle_transmission+0x204>)
   81db6:	701a      	strb	r2, [r3, #0]
        return;
   81db8:	e7a2      	b.n	81d00 <mpsse_handle_transmission+0xf8>
                gpio_set_pin_low(MPSSE_DOUT_GPIO);
   81dba:	200e      	movs	r0, #14
   81dbc:	4b16      	ldr	r3, [pc, #88]	; (81e18 <mpsse_handle_transmission+0x210>)
   81dbe:	4798      	blx	r3
   81dc0:	e775      	b.n	81cae <mpsse_handle_transmission+0xa6>
        read_val = mpsse_send_byte(0);
   81dc2:	2000      	movs	r0, #0
   81dc4:	4b0f      	ldr	r3, [pc, #60]	; (81e04 <mpsse_handle_transmission+0x1fc>)
   81dc6:	4798      	blx	r3
   81dc8:	e77f      	b.n	81cca <mpsse_handle_transmission+0xc2>
            MPSSE_TRANSACTION_LOCK = 1;
   81dca:	2201      	movs	r2, #1
   81dcc:	4b13      	ldr	r3, [pc, #76]	; (81e1c <mpsse_handle_transmission+0x214>)
   81dce:	701a      	strb	r2, [r3, #0]
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   81dd0:	4b13      	ldr	r3, [pc, #76]	; (81e20 <mpsse_handle_transmission+0x218>)
   81dd2:	9300      	str	r3, [sp, #0]
   81dd4:	2340      	movs	r3, #64	; 0x40
   81dd6:	460a      	mov	r2, r1
   81dd8:	2100      	movs	r1, #0
   81dda:	2085      	movs	r0, #133	; 0x85
   81ddc:	4c11      	ldr	r4, [pc, #68]	; (81e24 <mpsse_handle_transmission+0x21c>)
   81dde:	47a0      	blx	r4
   81de0:	e785      	b.n	81cee <mpsse_handle_transmission+0xe6>
   81de2:	bf00      	nop
   81de4:	20001d40 	.word	0x20001d40
   81de8:	00081605 	.word	0x00081605
   81dec:	20001d44 	.word	0x20001d44
   81df0:	20080000 	.word	0x20080000
   81df4:	20001d3d 	.word	0x20001d3d
   81df8:	20001d3e 	.word	0x20001d3e
   81dfc:	20001d3f 	.word	0x20001d3f
   81e00:	00084877 	.word	0x00084877
   81e04:	00081a69 	.word	0x00081a69
   81e08:	20000652 	.word	0x20000652
   81e0c:	20001d46 	.word	0x20001d46
   81e10:	000819f5 	.word	0x000819f5
   81e14:	00081b6d 	.word	0x00081b6d
   81e18:	00084891 	.word	0x00084891
   81e1c:	20000654 	.word	0x20000654
   81e20:	0008186d 	.word	0x0008186d
   81e24:	00085d01 	.word	0x00085d01

00081e28 <mpsse_handle_special>:
{
   81e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e2c:	b085      	sub	sp, #20
    switch (MPSSE_CUR_CMD) {
   81e2e:	4b7c      	ldr	r3, [pc, #496]	; (82020 <mpsse_handle_special+0x1f8>)
   81e30:	781b      	ldrb	r3, [r3, #0]
   81e32:	3b80      	subs	r3, #128	; 0x80
   81e34:	2b0a      	cmp	r3, #10
   81e36:	f200 80ee 	bhi.w	82016 <mpsse_handle_special+0x1ee>
   81e3a:	e8df f013 	tbh	[pc, r3, lsl #1]
   81e3e:	000b      	.short	0x000b
   81e40:	0084009f 	.word	0x0084009f
   81e44:	00c300b2 	.word	0x00c300b2
   81e48:	00e000ca 	.word	0x00e000ca
   81e4c:	00ec00d0 	.word	0x00ec00d0
   81e50:	00e800ec 	.word	0x00e800ec
        if (mpsse_tx_buffer_remaining() < 2) {
   81e54:	4b73      	ldr	r3, [pc, #460]	; (82024 <mpsse_handle_special+0x1fc>)
   81e56:	4798      	blx	r3
   81e58:	2801      	cmp	r0, #1
   81e5a:	dd1a      	ble.n	81e92 <mpsse_handle_special+0x6a>
        MPSSE_CUR_CMD = 0x00;
   81e5c:	2600      	movs	r6, #0
   81e5e:	4b70      	ldr	r3, [pc, #448]	; (82020 <mpsse_handle_special+0x1f8>)
   81e60:	701e      	strb	r6, [r3, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81e62:	4871      	ldr	r0, [pc, #452]	; (82028 <mpsse_handle_special+0x200>)
   81e64:	f9b0 1000 	ldrsh.w	r1, [r0]
   81e68:	b28b      	uxth	r3, r1
   81e6a:	4a70      	ldr	r2, [pc, #448]	; (8202c <mpsse_handle_special+0x204>)
   81e6c:	4411      	add	r1, r2
   81e6e:	f891 5040 	ldrb.w	r5, [r1, #64]	; 0x40
   81e72:	b2ed      	uxtb	r5, r5
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81e74:	1c99      	adds	r1, r3, #2
   81e76:	8001      	strh	r1, [r0, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81e78:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81e7a:	b21b      	sxth	r3, r3
   81e7c:	4413      	add	r3, r2
   81e7e:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
   81e82:	b2e4      	uxtb	r4, r4
   81e84:	4f6a      	ldr	r7, [pc, #424]	; (82030 <mpsse_handle_special+0x208>)
                gpio_configure_pin(MPSSE_PINS_GPIO[i], PIO_DEFAULT);
   81e86:	46b2      	mov	sl, r6
   81e88:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8205c <mpsse_handle_special+0x234>
					gpio_configure_pin(MPSSE_PINS_GPIO[i], PIO_OUTPUT_0);
   81e8c:	f04f 5940 	mov.w	r9, #805306368	; 0x30000000
   81e90:	e00a      	b.n	81ea8 <mpsse_handle_special+0x80>
            MPSSE_TX_REQ = 1;
   81e92:	2201      	movs	r2, #1
   81e94:	4b67      	ldr	r3, [pc, #412]	; (82034 <mpsse_handle_special+0x20c>)
   81e96:	701a      	strb	r2, [r3, #0]
            return; //need to read more data in
   81e98:	e080      	b.n	81f9c <mpsse_handle_special+0x174>
                gpio_configure_pin(MPSSE_PINS_GPIO[i], PIO_DEFAULT);
   81e9a:	4651      	mov	r1, sl
   81e9c:	6838      	ldr	r0, [r7, #0]
   81e9e:	47c0      	blx	r8
   81ea0:	3601      	adds	r6, #1
   81ea2:	3704      	adds	r7, #4
        for (uint8_t i = 0; i < 5; i++) {
   81ea4:	2e05      	cmp	r6, #5
   81ea6:	d00f      	beq.n	81ec8 <mpsse_handle_special+0xa0>
            if (direction & (1 << i)) {
   81ea8:	fa44 f306 	asr.w	r3, r4, r6
   81eac:	f013 0f01 	tst.w	r3, #1
   81eb0:	d0f3      	beq.n	81e9a <mpsse_handle_special+0x72>
				if (value & (1 << i)) {
   81eb2:	fa45 f306 	asr.w	r3, r5, r6
   81eb6:	f013 0f01 	tst.w	r3, #1
					gpio_configure_pin(MPSSE_PINS_GPIO[i], PIO_OUTPUT_1);
   81eba:	bf14      	ite	ne
   81ebc:	f04f 5160 	movne.w	r1, #939524096	; 0x38000000
					gpio_configure_pin(MPSSE_PINS_GPIO[i], PIO_OUTPUT_0);
   81ec0:	4649      	moveq	r1, r9
   81ec2:	6838      	ldr	r0, [r7, #0]
   81ec4:	47c0      	blx	r8
   81ec6:	e7eb      	b.n	81ea0 <mpsse_handle_special+0x78>
        FPGA_releaselock();
   81ec8:	4b5b      	ldr	r3, [pc, #364]	; (82038 <mpsse_handle_special+0x210>)
   81eca:	4798      	blx	r3
        while(!FPGA_setlock(fpga_generic));
   81ecc:	2701      	movs	r7, #1
   81ece:	4e5b      	ldr	r6, [pc, #364]	; (8203c <mpsse_handle_special+0x214>)
   81ed0:	4638      	mov	r0, r7
   81ed2:	47b0      	blx	r6
   81ed4:	2800      	cmp	r0, #0
   81ed6:	d0fb      	beq.n	81ed0 <mpsse_handle_special+0xa8>
        FPGA_setaddr(ADDR_IOROUTE);
   81ed8:	2037      	movs	r0, #55	; 0x37
   81eda:	4b59      	ldr	r3, [pc, #356]	; (82040 <mpsse_handle_special+0x218>)
   81edc:	4798      	blx	r3
        memcpy(gpio_state, xram, 8);
   81ede:	4b59      	ldr	r3, [pc, #356]	; (82044 <mpsse_handle_special+0x21c>)
   81ee0:	681b      	ldr	r3, [r3, #0]
   81ee2:	f893 b000 	ldrb.w	fp, [r3]
   81ee6:	f893 a001 	ldrb.w	sl, [r3, #1]
   81eea:	f893 9002 	ldrb.w	r9, [r3, #2]
   81eee:	f893 8003 	ldrb.w	r8, [r3, #3]
   81ef2:	791f      	ldrb	r7, [r3, #4]
   81ef4:	795e      	ldrb	r6, [r3, #5]
   81ef6:	799a      	ldrb	r2, [r3, #6]
   81ef8:	79db      	ldrb	r3, [r3, #7]
   81efa:	9303      	str	r3, [sp, #12]
        if (direction & (1 << 6)) {
   81efc:	f014 0f40 	tst.w	r4, #64	; 0x40
   81f00:	d01e      	beq.n	81f40 <mpsse_handle_special+0x118>
            if (value & (1 << 6)) {
   81f02:	f015 0f40 	tst.w	r5, #64	; 0x40
                gpio_state[6] |= 1 << 1;
   81f06:	bf12      	itee	ne
   81f08:	f042 0403 	orrne.w	r4, r2, #3
                gpio_state[6] &= ~(1 << 1);
   81f0c:	f022 0402 	biceq.w	r4, r2, #2
   81f10:	f044 0401 	orreq.w	r4, r4, #1
        FPGA_setaddr(ADDR_IOROUTE);
   81f14:	2037      	movs	r0, #55	; 0x37
   81f16:	4b4a      	ldr	r3, [pc, #296]	; (82040 <mpsse_handle_special+0x218>)
   81f18:	4798      	blx	r3
        memcpy(xram, gpio_state, 8);
   81f1a:	4b4a      	ldr	r3, [pc, #296]	; (82044 <mpsse_handle_special+0x21c>)
   81f1c:	681b      	ldr	r3, [r3, #0]
   81f1e:	f883 b000 	strb.w	fp, [r3]
   81f22:	f883 a001 	strb.w	sl, [r3, #1]
   81f26:	f883 9002 	strb.w	r9, [r3, #2]
   81f2a:	f883 8003 	strb.w	r8, [r3, #3]
   81f2e:	711f      	strb	r7, [r3, #4]
   81f30:	715e      	strb	r6, [r3, #5]
   81f32:	719c      	strb	r4, [r3, #6]
   81f34:	f89d 200c 	ldrb.w	r2, [sp, #12]
   81f38:	71da      	strb	r2, [r3, #7]
        FPGA_releaselock();
   81f3a:	4b3f      	ldr	r3, [pc, #252]	; (82038 <mpsse_handle_special+0x210>)
   81f3c:	4798      	blx	r3
        break;
   81f3e:	e02d      	b.n	81f9c <mpsse_handle_special+0x174>
            gpio_state[6] &= ~(1 << 0);
   81f40:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
   81f44:	e7e6      	b.n	81f14 <mpsse_handle_special+0xec>
        if (mpsse_tx_buffer_remaining() < 2) {
   81f46:	4b37      	ldr	r3, [pc, #220]	; (82024 <mpsse_handle_special+0x1fc>)
   81f48:	4798      	blx	r3
   81f4a:	2801      	cmp	r0, #1
   81f4c:	dd12      	ble.n	81f74 <mpsse_handle_special+0x14c>
        MPSSE_CUR_CMD = 0x00;
   81f4e:	2200      	movs	r2, #0
   81f50:	4b33      	ldr	r3, [pc, #204]	; (82020 <mpsse_handle_special+0x1f8>)
   81f52:	701a      	strb	r2, [r3, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81f54:	4834      	ldr	r0, [pc, #208]	; (82028 <mpsse_handle_special+0x200>)
   81f56:	f9b0 1000 	ldrsh.w	r1, [r0]
   81f5a:	b28b      	uxth	r3, r1
   81f5c:	4a33      	ldr	r2, [pc, #204]	; (8202c <mpsse_handle_special+0x204>)
   81f5e:	4411      	add	r1, r2
   81f60:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81f64:	1c99      	adds	r1, r3, #2
   81f66:	8001      	strh	r1, [r0, #0]
        value = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81f68:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   81f6a:	b21b      	sxth	r3, r3
   81f6c:	4413      	add	r3, r2
   81f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        break;
   81f72:	e013      	b.n	81f9c <mpsse_handle_special+0x174>
            MPSSE_TX_REQ = 1;
   81f74:	2201      	movs	r2, #1
   81f76:	4b2f      	ldr	r3, [pc, #188]	; (82034 <mpsse_handle_special+0x20c>)
   81f78:	701a      	strb	r2, [r3, #0]
            return; //need to read more data in
   81f7a:	e00f      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_CUR_CMD = 0x00;
   81f7c:	2100      	movs	r1, #0
   81f7e:	4b28      	ldr	r3, [pc, #160]	; (82020 <mpsse_handle_special+0x1f8>)
   81f80:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[2] = 0x00;
   81f82:	4a2a      	ldr	r2, [pc, #168]	; (8202c <mpsse_handle_special+0x204>)
   81f84:	7091      	strb	r1, [r2, #2]
        MPSSE_RX_BYTES = 3;
   81f86:	2303      	movs	r3, #3
   81f88:	482f      	ldr	r0, [pc, #188]	; (82048 <mpsse_handle_special+0x220>)
   81f8a:	8003      	strh	r3, [r0, #0]
        MPSSE_TRANSACTION_LOCK = 1;
   81f8c:	2401      	movs	r4, #1
   81f8e:	482f      	ldr	r0, [pc, #188]	; (8204c <mpsse_handle_special+0x224>)
   81f90:	7004      	strb	r4, [r0, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81f92:	482f      	ldr	r0, [pc, #188]	; (82050 <mpsse_handle_special+0x228>)
   81f94:	9000      	str	r0, [sp, #0]
   81f96:	2085      	movs	r0, #133	; 0x85
   81f98:	4c2e      	ldr	r4, [pc, #184]	; (82054 <mpsse_handle_special+0x22c>)
   81f9a:	47a0      	blx	r4
}
   81f9c:	b005      	add	sp, #20
   81f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MPSSE_CUR_CMD = 0x00;
   81fa2:	2100      	movs	r1, #0
   81fa4:	4b1e      	ldr	r3, [pc, #120]	; (82020 <mpsse_handle_special+0x1f8>)
   81fa6:	7019      	strb	r1, [r3, #0]
        MPSSE_RX_BUFFER[2] = 0x01;
   81fa8:	4a20      	ldr	r2, [pc, #128]	; (8202c <mpsse_handle_special+0x204>)
   81faa:	2001      	movs	r0, #1
   81fac:	7090      	strb	r0, [r2, #2]
        MPSSE_RX_BYTES = 3;
   81fae:	2303      	movs	r3, #3
   81fb0:	4c25      	ldr	r4, [pc, #148]	; (82048 <mpsse_handle_special+0x220>)
   81fb2:	8023      	strh	r3, [r4, #0]
        MPSSE_TRANSACTION_LOCK = 1;
   81fb4:	4c25      	ldr	r4, [pc, #148]	; (8204c <mpsse_handle_special+0x224>)
   81fb6:	7020      	strb	r0, [r4, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81fb8:	4825      	ldr	r0, [pc, #148]	; (82050 <mpsse_handle_special+0x228>)
   81fba:	9000      	str	r0, [sp, #0]
   81fbc:	2085      	movs	r0, #133	; 0x85
   81fbe:	4c25      	ldr	r4, [pc, #148]	; (82054 <mpsse_handle_special+0x22c>)
   81fc0:	47a0      	blx	r4
        break;
   81fc2:	e7eb      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_LOOPBACK_ENABLED = 1;
   81fc4:	2201      	movs	r2, #1
   81fc6:	4b24      	ldr	r3, [pc, #144]	; (82058 <mpsse_handle_special+0x230>)
   81fc8:	701a      	strb	r2, [r3, #0]
        MPSSE_CUR_CMD = 0x00;
   81fca:	2200      	movs	r2, #0
   81fcc:	4b14      	ldr	r3, [pc, #80]	; (82020 <mpsse_handle_special+0x1f8>)
   81fce:	701a      	strb	r2, [r3, #0]
        break;
   81fd0:	e7e4      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_LOOPBACK_ENABLED = 0;
   81fd2:	2300      	movs	r3, #0
   81fd4:	4a20      	ldr	r2, [pc, #128]	; (82058 <mpsse_handle_special+0x230>)
   81fd6:	7013      	strb	r3, [r2, #0]
        MPSSE_CUR_CMD = 0x00;
   81fd8:	4a11      	ldr	r2, [pc, #68]	; (82020 <mpsse_handle_special+0x1f8>)
   81fda:	7013      	strb	r3, [r2, #0]
        break;
   81fdc:	e7de      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_TRANSACTION_LOCK = 1;
   81fde:	2201      	movs	r2, #1
   81fe0:	4b1a      	ldr	r3, [pc, #104]	; (8204c <mpsse_handle_special+0x224>)
   81fe2:	701a      	strb	r2, [r3, #0]
        MPSSE_CUR_CMD = 0x00;
   81fe4:	2100      	movs	r1, #0
   81fe6:	4b0e      	ldr	r3, [pc, #56]	; (82020 <mpsse_handle_special+0x1f8>)
   81fe8:	7019      	strb	r1, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, MPSSE_RX_BYTES, mpsse_vendor_bulk_in_received);
   81fea:	4b17      	ldr	r3, [pc, #92]	; (82048 <mpsse_handle_special+0x220>)
   81fec:	f9b3 3000 	ldrsh.w	r3, [r3]
   81ff0:	4a17      	ldr	r2, [pc, #92]	; (82050 <mpsse_handle_special+0x228>)
   81ff2:	9200      	str	r2, [sp, #0]
   81ff4:	4a0d      	ldr	r2, [pc, #52]	; (8202c <mpsse_handle_special+0x204>)
   81ff6:	2085      	movs	r0, #133	; 0x85
   81ff8:	4c16      	ldr	r4, [pc, #88]	; (82054 <mpsse_handle_special+0x22c>)
   81ffa:	47a0      	blx	r4
        break;
   81ffc:	e7ce      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_TX_IDX += 2;
   81ffe:	4a0a      	ldr	r2, [pc, #40]	; (82028 <mpsse_handle_special+0x200>)
   82000:	8813      	ldrh	r3, [r2, #0]
   82002:	3302      	adds	r3, #2
   82004:	8013      	strh	r3, [r2, #0]
        MPSSE_CUR_CMD = 0x00;
   82006:	2200      	movs	r2, #0
   82008:	4b05      	ldr	r3, [pc, #20]	; (82020 <mpsse_handle_special+0x1f8>)
   8200a:	701a      	strb	r2, [r3, #0]
        break;
   8200c:	e7c6      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_CUR_CMD = 0x00;
   8200e:	2200      	movs	r2, #0
   82010:	4b03      	ldr	r3, [pc, #12]	; (82020 <mpsse_handle_special+0x1f8>)
   82012:	701a      	strb	r2, [r3, #0]
        break;
   82014:	e7c2      	b.n	81f9c <mpsse_handle_special+0x174>
        MPSSE_CUR_CMD = 0x00;
   82016:	2200      	movs	r2, #0
   82018:	4b01      	ldr	r3, [pc, #4]	; (82020 <mpsse_handle_special+0x1f8>)
   8201a:	701a      	strb	r2, [r3, #0]
        break;
   8201c:	e7be      	b.n	81f9c <mpsse_handle_special+0x174>
   8201e:	bf00      	nop
   82020:	20001d3d 	.word	0x20001d3d
   82024:	00081605 	.word	0x00081605
   82028:	20001d44 	.word	0x20001d44
   8202c:	20080000 	.word	0x20080000
   82030:	0008cd48 	.word	0x0008cd48
   82034:	20001d46 	.word	0x20001d46
   82038:	000834e5 	.word	0x000834e5
   8203c:	000834b9 	.word	0x000834b9
   82040:	000834fd 	.word	0x000834fd
   82044:	20000a3c 	.word	0x20000a3c
   82048:	20000652 	.word	0x20000652
   8204c:	20000654 	.word	0x20000654
   82050:	0008186d 	.word	0x0008186d
   82054:	00085d01 	.word	0x00085d01
   82058:	20001d3f 	.word	0x20001d3f
   8205c:	000848cd 	.word	0x000848cd

00082060 <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
   82060:	b508      	push	{r3, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
   82062:	4803      	ldr	r0, [pc, #12]	; (82070 <mpsse_register_handlers+0x10>)
   82064:	4b03      	ldr	r3, [pc, #12]	; (82074 <mpsse_register_handlers+0x14>)
   82066:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
   82068:	4803      	ldr	r0, [pc, #12]	; (82078 <mpsse_register_handlers+0x18>)
   8206a:	4b04      	ldr	r3, [pc, #16]	; (8207c <mpsse_register_handlers+0x1c>)
   8206c:	4798      	blx	r3
   8206e:	bd08      	pop	{r3, pc}
   82070:	000816e9 	.word	0x000816e9
   82074:	00081361 	.word	0x00081361
   82078:	0008161d 	.word	0x0008161d
   8207c:	0008133d 	.word	0x0008133d

00082080 <MPSSE_main_sendrecv_byte>:
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
    // return;
	// if (!MPSSE_ENABLED) return;
    if (MPSSE_TRANSACTION_LOCK) {
   82080:	4b31      	ldr	r3, [pc, #196]	; (82148 <MPSSE_main_sendrecv_byte+0xc8>)
   82082:	781b      	ldrb	r3, [r3, #0]
   82084:	2b00      	cmp	r3, #0
   82086:	d15d      	bne.n	82144 <MPSSE_main_sendrecv_byte+0xc4>
{
   82088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8208c:	b082      	sub	sp, #8
        // current doing a send back to PC, so wait until that's done
        return;
    }

    if (MPSSE_TX_REQ) {
   8208e:	4b2f      	ldr	r3, [pc, #188]	; (8214c <MPSSE_main_sendrecv_byte+0xcc>)
   82090:	781b      	ldrb	r3, [r3, #0]
   82092:	b313      	cbz	r3, 820da <MPSSE_main_sendrecv_byte+0x5a>
        // command split between USB transactions,
        // so move unused data back to start and read more in
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+MPSSE_TX_IDX];
   82094:	4b2e      	ldr	r3, [pc, #184]	; (82150 <MPSSE_main_sendrecv_byte+0xd0>)
   82096:	f9b3 8000 	ldrsh.w	r8, [r3]
   8209a:	2500      	movs	r5, #0
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   8209c:	4f2d      	ldr	r7, [pc, #180]	; (82154 <MPSSE_main_sendrecv_byte+0xd4>)
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+MPSSE_TX_IDX];
   8209e:	4e2e      	ldr	r6, [pc, #184]	; (82158 <MPSSE_main_sendrecv_byte+0xd8>)
   820a0:	e008      	b.n	820b4 <MPSSE_main_sendrecv_byte+0x34>
   820a2:	eb04 0308 	add.w	r3, r4, r8
   820a6:	4433      	add	r3, r6
   820a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   820ac:	b2db      	uxtb	r3, r3
   820ae:	4434      	add	r4, r6
   820b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   820b4:	b2ac      	uxth	r4, r5
   820b6:	47b8      	blx	r7
   820b8:	3501      	adds	r5, #1
   820ba:	4284      	cmp	r4, r0
   820bc:	dbf1      	blt.n	820a2 <MPSSE_main_sendrecv_byte+0x22>
        }
        MPSSE_TRANSACTION_LOCK = 1;
   820be:	2201      	movs	r2, #1
   820c0:	4b21      	ldr	r3, [pc, #132]	; (82148 <MPSSE_main_sendrecv_byte+0xc8>)
   820c2:	701a      	strb	r2, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
            MPSSE_TX_BUFFER_BAK, 63 - mpsse_tx_buffer_remaining(), 
   820c4:	4b23      	ldr	r3, [pc, #140]	; (82154 <MPSSE_main_sendrecv_byte+0xd4>)
   820c6:	4798      	blx	r3
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   820c8:	4b24      	ldr	r3, [pc, #144]	; (8215c <MPSSE_main_sendrecv_byte+0xdc>)
   820ca:	9300      	str	r3, [sp, #0]
   820cc:	f1c0 033f 	rsb	r3, r0, #63	; 0x3f
   820d0:	4a23      	ldr	r2, [pc, #140]	; (82160 <MPSSE_main_sendrecv_byte+0xe0>)
   820d2:	2100      	movs	r1, #0
   820d4:	2006      	movs	r0, #6
   820d6:	4c23      	ldr	r4, [pc, #140]	; (82164 <MPSSE_main_sendrecv_byte+0xe4>)
   820d8:	47a0      	blx	r4
            mpsse_vendor_bulk_out_received);
    }

    // we're at end of the TX buffer, so read more in
    if (mpsse_tx_buffer_remaining() <= 0) {
   820da:	4b1e      	ldr	r3, [pc, #120]	; (82154 <MPSSE_main_sendrecv_byte+0xd4>)
   820dc:	4798      	blx	r3
   820de:	2800      	cmp	r0, #0
   820e0:	dd24      	ble.n	8212c <MPSSE_main_sendrecv_byte+0xac>
        MPSSE_TRANSACTION_LOCK = 1;
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 64, mpsse_vendor_bulk_out_received);
        return;
    }

    if (MPSSE_CUR_CMD == 0x00) {
   820e2:	4b21      	ldr	r3, [pc, #132]	; (82168 <MPSSE_main_sendrecv_byte+0xe8>)
   820e4:	781b      	ldrb	r3, [r3, #0]
   820e6:	b9b3      	cbnz	r3, 82116 <MPSSE_main_sendrecv_byte+0x96>
        MPSSE_CUR_CMD = MPSSE_TX_BUFFER[MPSSE_TX_IDX++];
   820e8:	4b19      	ldr	r3, [pc, #100]	; (82150 <MPSSE_main_sendrecv_byte+0xd0>)
   820ea:	f9b3 2000 	ldrsh.w	r2, [r3]
   820ee:	1c51      	adds	r1, r2, #1
   820f0:	8019      	strh	r1, [r3, #0]
   820f2:	4b19      	ldr	r3, [pc, #100]	; (82158 <MPSSE_main_sendrecv_byte+0xd8>)
   820f4:	441a      	add	r2, r3
   820f6:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   820fa:	b2d2      	uxtb	r2, r2
   820fc:	491a      	ldr	r1, [pc, #104]	; (82168 <MPSSE_main_sendrecv_byte+0xe8>)
   820fe:	700a      	strb	r2, [r1, #0]
        MPSSE_COMMAND_HIST[MPSSE_COMMAND_IDX++] = MPSSE_CUR_CMD;
   82100:	481a      	ldr	r0, [pc, #104]	; (8216c <MPSSE_main_sendrecv_byte+0xec>)
   82102:	7801      	ldrb	r1, [r0, #0]
   82104:	1c4c      	adds	r4, r1, #1
   82106:	7004      	strb	r4, [r0, #0]
   82108:	440b      	add	r3, r1
   8210a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
        NUM_PROCESSED_CMDS++;
   8210e:	4a18      	ldr	r2, [pc, #96]	; (82170 <MPSSE_main_sendrecv_byte+0xf0>)
   82110:	6813      	ldr	r3, [r2, #0]
   82112:	3301      	adds	r3, #1
   82114:	6013      	str	r3, [r2, #0]
    }

    if (MPSSE_CUR_CMD & 0x80) {
   82116:	4b14      	ldr	r3, [pc, #80]	; (82168 <MPSSE_main_sendrecv_byte+0xe8>)
   82118:	f993 3000 	ldrsb.w	r3, [r3]
   8211c:	2b00      	cmp	r3, #0
        mpsse_handle_special();
   8211e:	bfb4      	ite	lt
   82120:	4b14      	ldrlt	r3, [pc, #80]	; (82174 <MPSSE_main_sendrecv_byte+0xf4>)
    } else {
        mpsse_handle_transmission();
   82122:	4b15      	ldrge	r3, [pc, #84]	; (82178 <MPSSE_main_sendrecv_byte+0xf8>)
   82124:	4798      	blx	r3
    }

   82126:	b002      	add	sp, #8
   82128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MPSSE_TRANSACTION_LOCK = 1;
   8212c:	2201      	movs	r2, #1
   8212e:	4b06      	ldr	r3, [pc, #24]	; (82148 <MPSSE_main_sendrecv_byte+0xc8>)
   82130:	701a      	strb	r2, [r3, #0]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 64, mpsse_vendor_bulk_out_received);
   82132:	4b0a      	ldr	r3, [pc, #40]	; (8215c <MPSSE_main_sendrecv_byte+0xdc>)
   82134:	9300      	str	r3, [sp, #0]
   82136:	2340      	movs	r3, #64	; 0x40
   82138:	4a10      	ldr	r2, [pc, #64]	; (8217c <MPSSE_main_sendrecv_byte+0xfc>)
   8213a:	2100      	movs	r1, #0
   8213c:	2006      	movs	r0, #6
   8213e:	4c09      	ldr	r4, [pc, #36]	; (82164 <MPSSE_main_sendrecv_byte+0xe4>)
   82140:	47a0      	blx	r4
        return;
   82142:	e7f0      	b.n	82126 <MPSSE_main_sendrecv_byte+0xa6>
   82144:	4770      	bx	lr
   82146:	bf00      	nop
   82148:	20000654 	.word	0x20000654
   8214c:	20001d46 	.word	0x20001d46
   82150:	20001d44 	.word	0x20001d44
   82154:	00081605 	.word	0x00081605
   82158:	20080000 	.word	0x20080000
   8215c:	000817c5 	.word	0x000817c5
   82160:	20080080 	.word	0x20080080
   82164:	00085d01 	.word	0x00085d01
   82168:	20001d3d 	.word	0x20001d3d
   8216c:	20001d3c 	.word	0x20001d3c
   82170:	20001d48 	.word	0x20001d48
   82174:	00081e29 	.word	0x00081e29
   82178:	00081c09 	.word	0x00081c09
   8217c:	20080040 	.word	0x20080040

00082180 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   82180:	b508      	push	{r3, lr}
	uint32_t prog_freq = 1E6;
    switch(udd_g_ctrlreq.req.wValue){
   82182:	4b1b      	ldr	r3, [pc, #108]	; (821f0 <openadc_progfpga_bulk+0x70>)
   82184:	885b      	ldrh	r3, [r3, #2]
   82186:	3ba0      	subs	r3, #160	; 0xa0
   82188:	2b12      	cmp	r3, #18
   8218a:	d830      	bhi.n	821ee <openadc_progfpga_bulk+0x6e>
   8218c:	e8df f003 	tbb	[pc, r3]
   82190:	2f1a140a 	.word	0x2f1a140a
   82194:	2f2f2f2f 	.word	0x2f2f2f2f
   82198:	2f2f2f2f 	.word	0x2f2f2f2f
   8219c:	2f2f2f2f 	.word	0x2f2f2f2f
   821a0:	281e      	.short	0x281e
   821a2:	2c          	.byte	0x2c
   821a3:	00          	.byte	0x00
    case 0xA0:
        
        if (udd_g_ctrlreq.req.wLength == 4) {
   821a4:	4b12      	ldr	r3, [pc, #72]	; (821f0 <openadc_progfpga_bulk+0x70>)
   821a6:	88db      	ldrh	r3, [r3, #6]
   821a8:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   821aa:	bf06      	itte	eq
   821ac:	4b11      	ldreq	r3, [pc, #68]	; (821f4 <openadc_progfpga_bulk+0x74>)
   821ae:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   821b0:	4811      	ldrne	r0, [pc, #68]	; (821f8 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_setup1(prog_freq);
   821b2:	4b12      	ldr	r3, [pc, #72]	; (821fc <openadc_progfpga_bulk+0x7c>)
   821b4:	4798      	blx	r3
        break;
   821b6:	bd08      	pop	{r3, pc}

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   821b8:	4b11      	ldr	r3, [pc, #68]	; (82200 <openadc_progfpga_bulk+0x80>)
   821ba:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   821bc:	220a      	movs	r2, #10
   821be:	4b11      	ldr	r3, [pc, #68]	; (82204 <openadc_progfpga_bulk+0x84>)
   821c0:	701a      	strb	r2, [r3, #0]
        break;
   821c2:	bd08      	pop	{r3, pc}

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   821c4:	2200      	movs	r2, #0
   821c6:	4b0f      	ldr	r3, [pc, #60]	; (82204 <openadc_progfpga_bulk+0x84>)
   821c8:	701a      	strb	r2, [r3, #0]
        break;
   821ca:	bd08      	pop	{r3, pc}

    case 0xB0:
        if (udd_g_ctrlreq.req.wLength == 4) {
   821cc:	4b08      	ldr	r3, [pc, #32]	; (821f0 <openadc_progfpga_bulk+0x70>)
   821ce:	88db      	ldrh	r3, [r3, #6]
   821d0:	2b04      	cmp	r3, #4
            prog_freq = *(CTRLBUFFER_WORDPTR);
   821d2:	bf06      	itte	eq
   821d4:	4b07      	ldreq	r3, [pc, #28]	; (821f4 <openadc_progfpga_bulk+0x74>)
   821d6:	6818      	ldreq	r0, [r3, #0]
	uint32_t prog_freq = 1E6;
   821d8:	4807      	ldrne	r0, [pc, #28]	; (821f8 <openadc_progfpga_bulk+0x78>)
        }
        fpga_program_spi_setup1(prog_freq);
   821da:	4b0b      	ldr	r3, [pc, #44]	; (82208 <openadc_progfpga_bulk+0x88>)
   821dc:	4798      	blx	r3
        break;
   821de:	bd08      	pop	{r3, pc}

    case 0xB1:
        blockendpoint_usage = bep_fpgabitstreamspi;
   821e0:	2214      	movs	r2, #20
   821e2:	4b08      	ldr	r3, [pc, #32]	; (82204 <openadc_progfpga_bulk+0x84>)
   821e4:	701a      	strb	r2, [r3, #0]
        break;
   821e6:	bd08      	pop	{r3, pc}
    
    case 0xB2:
        /* Done */
        blockendpoint_usage = bep_emem;
   821e8:	2200      	movs	r2, #0
   821ea:	4b06      	ldr	r3, [pc, #24]	; (82204 <openadc_progfpga_bulk+0x84>)
   821ec:	701a      	strb	r2, [r3, #0]
   821ee:	bd08      	pop	{r3, pc}
   821f0:	200027ac 	.word	0x200027ac
   821f4:	20002328 	.word	0x20002328
   821f8:	000f4240 	.word	0x000f4240
   821fc:	000808f9 	.word	0x000808f9
   82200:	00080989 	.word	0x00080989
   82204:	20001d4c 	.word	0x20001d4c
   82208:	00080859 	.word	0x00080859

0008220c <openadc_setup_out_received>:
        break;
    }
    return false;
}
bool openadc_setup_out_received(void)
{
   8220c:	b508      	push	{r3, lr}
    blockendpoint_usage = bep_emem;
   8220e:	2200      	movs	r2, #0
   82210:	4b20      	ldr	r3, [pc, #128]	; (82294 <openadc_setup_out_received+0x88>)
   82212:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   82214:	4b20      	ldr	r3, [pc, #128]	; (82298 <openadc_setup_out_received+0x8c>)
   82216:	785b      	ldrb	r3, [r3, #1]
   82218:	3b10      	subs	r3, #16
   8221a:	2b06      	cmp	r3, #6
   8221c:	d82f      	bhi.n	8227e <openadc_setup_out_received+0x72>
   8221e:	e8df f003 	tbb	[pc, r3]
   82222:	1704      	.short	0x1704
   82224:	2e2e200e 	.word	0x2e2e200e
   82228:	29          	.byte	0x29
   82229:	00          	.byte	0x00
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8222a:	2006      	movs	r0, #6
   8222c:	4b1b      	ldr	r3, [pc, #108]	; (8229c <openadc_setup_out_received+0x90>)
   8222e:	4798      	blx	r3
   82230:	2800      	cmp	r0, #0
   82232:	d026      	beq.n	82282 <openadc_setup_out_received+0x76>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   82234:	4a1a      	ldr	r2, [pc, #104]	; (822a0 <openadc_setup_out_received+0x94>)
   82236:	4b18      	ldr	r3, [pc, #96]	; (82298 <openadc_setup_out_received+0x8c>)
   82238:	611a      	str	r2, [r3, #16]
            return true;
   8223a:	2001      	movs	r0, #1
   8223c:	bd08      	pop	{r3, pc}
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   8223e:	2006      	movs	r0, #6
   82240:	4b16      	ldr	r3, [pc, #88]	; (8229c <openadc_setup_out_received+0x90>)
   82242:	4798      	blx	r3
   82244:	b1f8      	cbz	r0, 82286 <openadc_setup_out_received+0x7a>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   82246:	4a17      	ldr	r2, [pc, #92]	; (822a4 <openadc_setup_out_received+0x98>)
   82248:	4b13      	ldr	r3, [pc, #76]	; (82298 <openadc_setup_out_received+0x8c>)
   8224a:	611a      	str	r2, [r3, #16]
            return true;
   8224c:	2001      	movs	r0, #1
   8224e:	bd08      	pop	{r3, pc}
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   82250:	2006      	movs	r0, #6
   82252:	4b12      	ldr	r3, [pc, #72]	; (8229c <openadc_setup_out_received+0x90>)
   82254:	4798      	blx	r3
   82256:	b1c0      	cbz	r0, 8228a <openadc_setup_out_received+0x7e>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   82258:	4a13      	ldr	r2, [pc, #76]	; (822a8 <openadc_setup_out_received+0x9c>)
   8225a:	4b0f      	ldr	r3, [pc, #60]	; (82298 <openadc_setup_out_received+0x8c>)
   8225c:	611a      	str	r2, [r3, #16]
            return true;
   8225e:	2001      	movs	r0, #1
   82260:	bd08      	pop	{r3, pc}
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   82262:	2006      	movs	r0, #6
   82264:	4b0d      	ldr	r3, [pc, #52]	; (8229c <openadc_setup_out_received+0x90>)
   82266:	4798      	blx	r3
   82268:	b188      	cbz	r0, 8228e <openadc_setup_out_received+0x82>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   8226a:	4a10      	ldr	r2, [pc, #64]	; (822ac <openadc_setup_out_received+0xa0>)
   8226c:	4b0a      	ldr	r3, [pc, #40]	; (82298 <openadc_setup_out_received+0x8c>)
   8226e:	611a      	str	r2, [r3, #16]
            return true;
   82270:	2001      	movs	r0, #1
   82272:	bd08      	pop	{r3, pc}
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   82274:	4a0e      	ldr	r2, [pc, #56]	; (822b0 <openadc_setup_out_received+0xa4>)
   82276:	4b08      	ldr	r3, [pc, #32]	; (82298 <openadc_setup_out_received+0x8c>)
   82278:	611a      	str	r2, [r3, #16]
        return true;
   8227a:	2001      	movs	r0, #1
   8227c:	bd08      	pop	{r3, pc}

    default:
        return false;
   8227e:	2000      	movs	r0, #0
   82280:	bd08      	pop	{r3, pc}
    }

    return false;
   82282:	2000      	movs	r0, #0
   82284:	bd08      	pop	{r3, pc}
   82286:	2000      	movs	r0, #0
   82288:	bd08      	pop	{r3, pc}
   8228a:	2000      	movs	r0, #0
   8228c:	bd08      	pop	{r3, pc}
   8228e:	2000      	movs	r0, #0
}
   82290:	bd08      	pop	{r3, pc}
   82292:	bf00      	nop
   82294:	20001d4c 	.word	0x20001d4c
   82298:	200027ac 	.word	0x200027ac
   8229c:	000834b9 	.word	0x000834b9
   822a0:	0008237d 	.word	0x0008237d
   822a4:	000822e5 	.word	0x000822e5
   822a8:	000822b5 	.word	0x000822b5
   822ac:	00082329 	.word	0x00082329
   822b0:	00082181 	.word	0x00082181

000822b4 <openadc_writemem_bulk>:
{
   822b4:	b570      	push	{r4, r5, r6, lr}
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   822b6:	4b07      	ldr	r3, [pc, #28]	; (822d4 <openadc_writemem_bulk+0x20>)
   822b8:	685e      	ldr	r6, [r3, #4]
    FPGA_releaselock();
   822ba:	4b07      	ldr	r3, [pc, #28]	; (822d8 <openadc_writemem_bulk+0x24>)
   822bc:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   822be:	2504      	movs	r5, #4
   822c0:	4c06      	ldr	r4, [pc, #24]	; (822dc <openadc_writemem_bulk+0x28>)
   822c2:	4628      	mov	r0, r5
   822c4:	47a0      	blx	r4
   822c6:	2800      	cmp	r0, #0
   822c8:	d0fb      	beq.n	822c2 <openadc_writemem_bulk+0xe>
    FPGA_setaddr(address);
   822ca:	4630      	mov	r0, r6
   822cc:	4b04      	ldr	r3, [pc, #16]	; (822e0 <openadc_writemem_bulk+0x2c>)
   822ce:	4798      	blx	r3
   822d0:	bd70      	pop	{r4, r5, r6, pc}
   822d2:	bf00      	nop
   822d4:	20002328 	.word	0x20002328
   822d8:	000834e5 	.word	0x000834e5
   822dc:	000834b9 	.word	0x000834b9
   822e0:	000834fd 	.word	0x000834fd

000822e4 <openadc_readmem_ctrl>:
{
   822e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   822e6:	4b0a      	ldr	r3, [pc, #40]	; (82310 <openadc_readmem_ctrl+0x2c>)
   822e8:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   822ea:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   822ec:	4b09      	ldr	r3, [pc, #36]	; (82314 <openadc_readmem_ctrl+0x30>)
   822ee:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   822f0:	2505      	movs	r5, #5
   822f2:	4c09      	ldr	r4, [pc, #36]	; (82318 <openadc_readmem_ctrl+0x34>)
   822f4:	4628      	mov	r0, r5
   822f6:	47a0      	blx	r4
   822f8:	2800      	cmp	r0, #0
   822fa:	d0fb      	beq.n	822f4 <openadc_readmem_ctrl+0x10>
    FPGA_setaddr(address);
   822fc:	4638      	mov	r0, r7
   822fe:	4b07      	ldr	r3, [pc, #28]	; (8231c <openadc_readmem_ctrl+0x38>)
   82300:	4798      	blx	r3
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   82302:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   82306:	4b06      	ldr	r3, [pc, #24]	; (82320 <openadc_readmem_ctrl+0x3c>)
   82308:	601a      	str	r2, [r3, #0]
    ctrlmemread_size = buflen;
   8230a:	4b06      	ldr	r3, [pc, #24]	; (82324 <openadc_readmem_ctrl+0x40>)
   8230c:	601e      	str	r6, [r3, #0]
   8230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82310:	20002328 	.word	0x20002328
   82314:	000834e5 	.word	0x000834e5
   82318:	000834b9 	.word	0x000834b9
   8231c:	000834fd 	.word	0x000834fd
   82320:	20001d50 	.word	0x20001d50
   82324:	20001d54 	.word	0x20001d54

00082328 <openadc_writemem_ctrl>:
{
   82328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8232a:	4b0e      	ldr	r3, [pc, #56]	; (82364 <openadc_writemem_ctrl+0x3c>)
   8232c:	681c      	ldr	r4, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8232e:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   82330:	4b0d      	ldr	r3, [pc, #52]	; (82368 <openadc_writemem_ctrl+0x40>)
   82332:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   82334:	2601      	movs	r6, #1
   82336:	4d0d      	ldr	r5, [pc, #52]	; (8236c <openadc_writemem_ctrl+0x44>)
   82338:	4630      	mov	r0, r6
   8233a:	47a8      	blx	r5
   8233c:	2800      	cmp	r0, #0
   8233e:	d0fb      	beq.n	82338 <openadc_writemem_ctrl+0x10>
    FPGA_setaddr(address);
   82340:	4638      	mov	r0, r7
   82342:	4b0b      	ldr	r3, [pc, #44]	; (82370 <openadc_writemem_ctrl+0x48>)
   82344:	4798      	blx	r3
    for(unsigned int i = 0; i < buflen; i++){
   82346:	b14c      	cbz	r4, 8235c <openadc_writemem_ctrl+0x34>
   82348:	4a0a      	ldr	r2, [pc, #40]	; (82374 <openadc_writemem_ctrl+0x4c>)
   8234a:	2300      	movs	r3, #0
        xram[i] = ctrlbuf_payload[i];
   8234c:	4d0a      	ldr	r5, [pc, #40]	; (82378 <openadc_writemem_ctrl+0x50>)
   8234e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82352:	6829      	ldr	r1, [r5, #0]
   82354:	54c8      	strb	r0, [r1, r3]
    for(unsigned int i = 0; i < buflen; i++){
   82356:	3301      	adds	r3, #1
   82358:	429c      	cmp	r4, r3
   8235a:	d1f8      	bne.n	8234e <openadc_writemem_ctrl+0x26>
    FPGA_releaselock();
   8235c:	4b02      	ldr	r3, [pc, #8]	; (82368 <openadc_writemem_ctrl+0x40>)
   8235e:	4798      	blx	r3
   82360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82362:	bf00      	nop
   82364:	20002328 	.word	0x20002328
   82368:	000834e5 	.word	0x000834e5
   8236c:	000834b9 	.word	0x000834b9
   82370:	000834fd 	.word	0x000834fd
   82374:	2000232f 	.word	0x2000232f
   82378:	20000a3c 	.word	0x20000a3c

0008237c <openadc_readmem_bulk>:
{
   8237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8237e:	4b0a      	ldr	r3, [pc, #40]	; (823a8 <openadc_readmem_bulk+0x2c>)
   82380:	681e      	ldr	r6, [r3, #0]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82382:	685f      	ldr	r7, [r3, #4]
    FPGA_releaselock();
   82384:	4b09      	ldr	r3, [pc, #36]	; (823ac <openadc_readmem_bulk+0x30>)
   82386:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   82388:	2502      	movs	r5, #2
   8238a:	4c09      	ldr	r4, [pc, #36]	; (823b0 <openadc_readmem_bulk+0x34>)
   8238c:	4628      	mov	r0, r5
   8238e:	47a0      	blx	r4
   82390:	2800      	cmp	r0, #0
   82392:	d0fb      	beq.n	8238c <openadc_readmem_bulk+0x10>
    FPGA_setaddr(address);
   82394:	4638      	mov	r0, r7
   82396:	4b07      	ldr	r3, [pc, #28]	; (823b4 <openadc_readmem_bulk+0x38>)
   82398:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   8239a:	4a07      	ldr	r2, [pc, #28]	; (823b8 <openadc_readmem_bulk+0x3c>)
   8239c:	4631      	mov	r1, r6
   8239e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   823a2:	4b06      	ldr	r3, [pc, #24]	; (823bc <openadc_readmem_bulk+0x40>)
   823a4:	4798      	blx	r3
   823a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823a8:	20002328 	.word	0x20002328
   823ac:	000834e5 	.word	0x000834e5
   823b0:	000834b9 	.word	0x000834b9
   823b4:	000834fd 	.word	0x000834fd
   823b8:	000823c1 	.word	0x000823c1
   823bc:	00084561 	.word	0x00084561

000823c0 <main_vendor_bulk_in_received>:
{
   823c0:	b510      	push	{r4, lr}
   823c2:	4604      	mov	r4, r0
    FPGA_releaselock();
   823c4:	4b05      	ldr	r3, [pc, #20]	; (823dc <main_vendor_bulk_in_received+0x1c>)
   823c6:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   823c8:	b104      	cbz	r4, 823cc <main_vendor_bulk_in_received+0xc>
   823ca:	bd10      	pop	{r4, pc}
    if (FPGA_lockstatus() == fpga_blockin){
   823cc:	4b04      	ldr	r3, [pc, #16]	; (823e0 <main_vendor_bulk_in_received+0x20>)
   823ce:	4798      	blx	r3
   823d0:	2802      	cmp	r0, #2
   823d2:	d1fa      	bne.n	823ca <main_vendor_bulk_in_received+0xa>
        FPGA_setlock(fpga_unlocked);
   823d4:	2000      	movs	r0, #0
   823d6:	4b03      	ldr	r3, [pc, #12]	; (823e4 <main_vendor_bulk_in_received+0x24>)
   823d8:	4798      	blx	r3
   823da:	e7f6      	b.n	823ca <main_vendor_bulk_in_received+0xa>
   823dc:	000834e5 	.word	0x000834e5
   823e0:	000834f1 	.word	0x000834f1
   823e4:	000834b9 	.word	0x000834b9

000823e8 <main_vendor_bulk_out_received>:
{
   823e8:	b570      	push	{r4, r5, r6, lr}
   823ea:	4605      	mov	r5, r0
   823ec:	460c      	mov	r4, r1
    FPGA_releaselock();
   823ee:	4b1f      	ldr	r3, [pc, #124]	; (8246c <main_vendor_bulk_out_received+0x84>)
   823f0:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   823f2:	b9bd      	cbnz	r5, 82424 <main_vendor_bulk_out_received+0x3c>
    if (blockendpoint_usage == bep_emem){
   823f4:	4b1e      	ldr	r3, [pc, #120]	; (82470 <main_vendor_bulk_out_received+0x88>)
   823f6:	781b      	ldrb	r3, [r3, #0]
   823f8:	b9f3      	cbnz	r3, 82438 <main_vendor_bulk_out_received+0x50>
        for(unsigned int i = 0; i < nb_transfered; i++){
   823fa:	b144      	cbz	r4, 8240e <main_vendor_bulk_out_received+0x26>
   823fc:	4a1d      	ldr	r2, [pc, #116]	; (82474 <main_vendor_bulk_out_received+0x8c>)
            xram[i] = main_buf_loopback[i];
   823fe:	4d1e      	ldr	r5, [pc, #120]	; (82478 <main_vendor_bulk_out_received+0x90>)
   82400:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   82404:	6829      	ldr	r1, [r5, #0]
   82406:	54c8      	strb	r0, [r1, r3]
        for(unsigned int i = 0; i < nb_transfered; i++){
   82408:	3301      	adds	r3, #1
   8240a:	429c      	cmp	r4, r3
   8240c:	d1f8      	bne.n	82400 <main_vendor_bulk_out_received+0x18>
        if (FPGA_lockstatus() == fpga_blockout){
   8240e:	4b1b      	ldr	r3, [pc, #108]	; (8247c <main_vendor_bulk_out_received+0x94>)
   82410:	4798      	blx	r3
   82412:	2804      	cmp	r0, #4
   82414:	d00d      	beq.n	82432 <main_vendor_bulk_out_received+0x4a>
    udi_vendor_bulk_out_run(
   82416:	4a1a      	ldr	r2, [pc, #104]	; (82480 <main_vendor_bulk_out_received+0x98>)
   82418:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8241c:	4819      	ldr	r0, [pc, #100]	; (82484 <main_vendor_bulk_out_received+0x9c>)
   8241e:	4b1a      	ldr	r3, [pc, #104]	; (82488 <main_vendor_bulk_out_received+0xa0>)
   82420:	4798      	blx	r3
   82422:	bd70      	pop	{r4, r5, r6, pc}
        udi_vendor_bulk_out_run(
   82424:	4a16      	ldr	r2, [pc, #88]	; (82480 <main_vendor_bulk_out_received+0x98>)
   82426:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8242a:	4816      	ldr	r0, [pc, #88]	; (82484 <main_vendor_bulk_out_received+0x9c>)
   8242c:	4b16      	ldr	r3, [pc, #88]	; (82488 <main_vendor_bulk_out_received+0xa0>)
   8242e:	4798      	blx	r3
        return;
   82430:	bd70      	pop	{r4, r5, r6, pc}
            FPGA_releaselock();
   82432:	4b0e      	ldr	r3, [pc, #56]	; (8246c <main_vendor_bulk_out_received+0x84>)
   82434:	4798      	blx	r3
   82436:	e7ee      	b.n	82416 <main_vendor_bulk_out_received+0x2e>
    } else if (blockendpoint_usage == bep_fpgabitstream){
   82438:	2b0a      	cmp	r3, #10
   8243a:	d00c      	beq.n	82456 <main_vendor_bulk_out_received+0x6e>
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   8243c:	2b14      	cmp	r3, #20
   8243e:	d1ea      	bne.n	82416 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82440:	2c00      	cmp	r4, #0
   82442:	d0e8      	beq.n	82416 <main_vendor_bulk_out_received+0x2e>
   82444:	4d0b      	ldr	r5, [pc, #44]	; (82474 <main_vendor_bulk_out_received+0x8c>)
   82446:	442c      	add	r4, r5
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   82448:	4e10      	ldr	r6, [pc, #64]	; (8248c <main_vendor_bulk_out_received+0xa4>)
   8244a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   8244e:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82450:	42a5      	cmp	r5, r4
   82452:	d1fa      	bne.n	8244a <main_vendor_bulk_out_received+0x62>
   82454:	e7df      	b.n	82416 <main_vendor_bulk_out_received+0x2e>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82456:	2c00      	cmp	r4, #0
   82458:	d0dd      	beq.n	82416 <main_vendor_bulk_out_received+0x2e>
   8245a:	4d06      	ldr	r5, [pc, #24]	; (82474 <main_vendor_bulk_out_received+0x8c>)
   8245c:	442c      	add	r4, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   8245e:	4e0c      	ldr	r6, [pc, #48]	; (82490 <main_vendor_bulk_out_received+0xa8>)
   82460:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   82464:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82466:	42ac      	cmp	r4, r5
   82468:	d1fa      	bne.n	82460 <main_vendor_bulk_out_received+0x78>
   8246a:	e7d4      	b.n	82416 <main_vendor_bulk_out_received+0x2e>
   8246c:	000834e5 	.word	0x000834e5
   82470:	20001d4c 	.word	0x20001d4c
   82474:	20002367 	.word	0x20002367
   82478:	20000a3c 	.word	0x20000a3c
   8247c:	000834f1 	.word	0x000834f1
   82480:	000823e9 	.word	0x000823e9
   82484:	20002368 	.word	0x20002368
   82488:	0008457d 	.word	0x0008457d
   8248c:	000808e1 	.word	0x000808e1
   82490:	00080999 	.word	0x00080999

00082494 <openadc_setup_in_received>:
{
   82494:	b508      	push	{r3, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   82496:	4b13      	ldr	r3, [pc, #76]	; (824e4 <openadc_setup_in_received+0x50>)
   82498:	785b      	ldrb	r3, [r3, #1]
   8249a:	2b12      	cmp	r3, #18
   8249c:	d003      	beq.n	824a6 <openadc_setup_in_received+0x12>
   8249e:	2b15      	cmp	r3, #21
   824a0:	d00e      	beq.n	824c0 <openadc_setup_in_received+0x2c>
    return false;
   824a2:	2000      	movs	r0, #0
}
   824a4:	bd08      	pop	{r3, pc}
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   824a6:	4a0f      	ldr	r2, [pc, #60]	; (824e4 <openadc_setup_in_received+0x50>)
   824a8:	4b0f      	ldr	r3, [pc, #60]	; (824e8 <openadc_setup_in_received+0x54>)
   824aa:	681b      	ldr	r3, [r3, #0]
   824ac:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   824ae:	4b0f      	ldr	r3, [pc, #60]	; (824ec <openadc_setup_in_received+0x58>)
   824b0:	6819      	ldr	r1, [r3, #0]
   824b2:	8191      	strh	r1, [r2, #12]
        ctrlmemread_size = 0;
   824b4:	2200      	movs	r2, #0
   824b6:	601a      	str	r2, [r3, #0]
        FPGA_releaselock();
   824b8:	4b0d      	ldr	r3, [pc, #52]	; (824f0 <openadc_setup_in_received+0x5c>)
   824ba:	4798      	blx	r3
        return true;
   824bc:	2001      	movs	r0, #1
   824be:	bd08      	pop	{r3, pc}
        respbuf[0] = FPGA_ISDONE();
   824c0:	200a      	movs	r0, #10
   824c2:	4b0c      	ldr	r3, [pc, #48]	; (824f4 <openadc_setup_in_received+0x60>)
   824c4:	4798      	blx	r3
   824c6:	4b0c      	ldr	r3, [pc, #48]	; (824f8 <openadc_setup_in_received+0x64>)
   824c8:	3000      	adds	r0, #0
   824ca:	bf18      	it	ne
   824cc:	2001      	movne	r0, #1
   824ce:	7018      	strb	r0, [r3, #0]
        respbuf[1] = 0;
   824d0:	2200      	movs	r2, #0
   824d2:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   824d4:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   824d6:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   824d8:	4a02      	ldr	r2, [pc, #8]	; (824e4 <openadc_setup_in_received+0x50>)
   824da:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   824dc:	2304      	movs	r3, #4
   824de:	8193      	strh	r3, [r2, #12]
        return true;
   824e0:	2001      	movs	r0, #1
   824e2:	bd08      	pop	{r3, pc}
   824e4:	200027ac 	.word	0x200027ac
   824e8:	20001d50 	.word	0x20001d50
   824ec:	20001d54 	.word	0x20001d54
   824f0:	000834e5 	.word	0x000834e5
   824f4:	0008485b 	.word	0x0008485b
   824f8:	200022e8 	.word	0x200022e8

000824fc <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   824fc:	b508      	push	{r3, lr}
    FPGA_releaselock();
   824fe:	4b04      	ldr	r3, [pc, #16]	; (82510 <openadc_register_handlers+0x14>)
   82500:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   82502:	4804      	ldr	r0, [pc, #16]	; (82514 <openadc_register_handlers+0x18>)
   82504:	4b04      	ldr	r3, [pc, #16]	; (82518 <openadc_register_handlers+0x1c>)
   82506:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   82508:	4804      	ldr	r0, [pc, #16]	; (8251c <openadc_register_handlers+0x20>)
   8250a:	4b05      	ldr	r3, [pc, #20]	; (82520 <openadc_register_handlers+0x24>)
   8250c:	4798      	blx	r3
   8250e:	bd08      	pop	{r3, pc}
   82510:	000834e5 	.word	0x000834e5
   82514:	00082495 	.word	0x00082495
   82518:	0008133d 	.word	0x0008133d
   8251c:	0008220d 	.word	0x0008220d
   82520:	00081361 	.word	0x00081361

00082524 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   82524:	4b16      	ldr	r3, [pc, #88]	; (82580 <usart_setup_out_received+0x5c>)
   82526:	785b      	ldrb	r3, [r3, #1]
   82528:	3b1a      	subs	r3, #26
   8252a:	2b17      	cmp	r3, #23
   8252c:	d826      	bhi.n	8257c <usart_setup_out_received+0x58>
   8252e:	e8df f003 	tbb	[pc, r3]
   82532:	0c11      	.short	0x0c11
   82534:	25252525 	.word	0x25252525
   82538:	25251b16 	.word	0x25251b16
   8253c:	25252525 	.word	0x25252525
   82540:	25252525 	.word	0x25252525
   82544:	25252525 	.word	0x25252525
   82548:	2025      	.short	0x2025
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   8254a:	4a0e      	ldr	r2, [pc, #56]	; (82584 <usart_setup_out_received+0x60>)
   8254c:	4b0c      	ldr	r3, [pc, #48]	; (82580 <usart_setup_out_received+0x5c>)
   8254e:	611a      	str	r2, [r3, #16]
        return true;
   82550:	2001      	movs	r0, #1
   82552:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   82554:	4a0c      	ldr	r2, [pc, #48]	; (82588 <usart_setup_out_received+0x64>)
   82556:	4b0a      	ldr	r3, [pc, #40]	; (82580 <usart_setup_out_received+0x5c>)
   82558:	611a      	str	r2, [r3, #16]
        return true;
   8255a:	2001      	movs	r0, #1
   8255c:	4770      	bx	lr
    case REQ_XMEGA_PROGRAM:
        /*
        udd_g_ctrlreq.payload = xmegabuffer;
        udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
        */
        udd_g_ctrlreq.callback = ctrl_xmega_program_void;
   8255e:	4a0b      	ldr	r2, [pc, #44]	; (8258c <usart_setup_out_received+0x68>)
   82560:	4b07      	ldr	r3, [pc, #28]	; (82580 <usart_setup_out_received+0x5c>)
   82562:	611a      	str	r2, [r3, #16]
        return true;
   82564:	2001      	movs	r0, #1
   82566:	4770      	bx	lr
#endif
#ifdef CW_PROG_AVR
		/* AVR Programming */
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
   82568:	4a09      	ldr	r2, [pc, #36]	; (82590 <usart_setup_out_received+0x6c>)
   8256a:	4b05      	ldr	r3, [pc, #20]	; (82580 <usart_setup_out_received+0x5c>)
   8256c:	611a      	str	r2, [r3, #16]
        return true;
   8256e:	2001      	movs	r0, #1
   82570:	4770      	bx	lr
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82572:	4a08      	ldr	r2, [pc, #32]	; (82594 <usart_setup_out_received+0x70>)
   82574:	4b02      	ldr	r3, [pc, #8]	; (82580 <usart_setup_out_received+0x5c>)
   82576:	611a      	str	r2, [r3, #16]
        return true;
   82578:	2001      	movs	r0, #1
   8257a:	4770      	bx	lr
        break;
    }
    return false;
   8257c:	2000      	movs	r0, #0
}
   8257e:	4770      	bx	lr
   82580:	200027ac 	.word	0x200027ac
   82584:	00082925 	.word	0x00082925
   82588:	0008296d 	.word	0x0008296d
   8258c:	00082599 	.word	0x00082599
   82590:	000825a5 	.word	0x000825a5
   82594:	00082931 	.word	0x00082931

00082598 <ctrl_xmega_program_void>:
{
   82598:	b508      	push	{r3, lr}
	XPROGProtocol_Command();
   8259a:	4b01      	ldr	r3, [pc, #4]	; (825a0 <ctrl_xmega_program_void+0x8>)
   8259c:	4798      	blx	r3
   8259e:	bd08      	pop	{r3, pc}
   825a0:	00083be1 	.word	0x00083be1

000825a4 <ctrl_avr_program_void>:
{
   825a4:	b508      	push	{r3, lr}
	V2Protocol_ProcessCommand();
   825a6:	4b01      	ldr	r3, [pc, #4]	; (825ac <ctrl_avr_program_void+0x8>)
   825a8:	4798      	blx	r3
   825aa:	bd08      	pop	{r3, pc}
   825ac:	00083525 	.word	0x00083525

000825b0 <usart0_enableIO>:
{
   825b0:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   825b2:	200d      	movs	r0, #13
   825b4:	4b0a      	ldr	r3, [pc, #40]	; (825e0 <usart0_enableIO+0x30>)
   825b6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   825b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825bc:	2013      	movs	r0, #19
   825be:	4c09      	ldr	r4, [pc, #36]	; (825e4 <usart0_enableIO+0x34>)
   825c0:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   825c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825c6:	2012      	movs	r0, #18
   825c8:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   825ca:	4b07      	ldr	r3, [pc, #28]	; (825e8 <usart0_enableIO+0x38>)
   825cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   825d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   825d4:	2130      	movs	r1, #48	; 0x30
   825d6:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   825da:	601a      	str	r2, [r3, #0]
   825dc:	bd10      	pop	{r4, pc}
   825de:	bf00      	nop
   825e0:	00084c11 	.word	0x00084c11
   825e4:	000848cd 	.word	0x000848cd
   825e8:	e000e100 	.word	0xe000e100

000825ec <usart_enableIO>:
{
   825ec:	b508      	push	{r3, lr}
    if (driver->usart_id == 0) {
   825ee:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   825f2:	b103      	cbz	r3, 825f6 <usart_enableIO+0xa>
   825f4:	bd08      	pop	{r3, pc}
        usart0_enableIO();
   825f6:	4b01      	ldr	r3, [pc, #4]	; (825fc <usart_enableIO+0x10>)
   825f8:	4798      	blx	r3
}
   825fa:	e7fb      	b.n	825f4 <usart_enableIO+0x8>
   825fc:	000825b1 	.word	0x000825b1

00082600 <generic_isr>:
{
   82600:	b570      	push	{r4, r5, r6, lr}
   82602:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   82604:	6800      	ldr	r0, [r0, #0]
   82606:	4b19      	ldr	r3, [pc, #100]	; (8266c <generic_isr+0x6c>)
   82608:	4798      	blx	r3
   8260a:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   8260c:	f010 0f01 	tst.w	r0, #1
   82610:	d103      	bne.n	8261a <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   82612:	f015 0f02 	tst.w	r5, #2
   82616:	d115      	bne.n	82644 <generic_isr+0x44>
   82618:	bd70      	pop	{r4, r5, r6, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   8261a:	4620      	mov	r0, r4
   8261c:	f850 3b1c 	ldr.w	r3, [r0], #28
   82620:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   82622:	b2f6      	uxtb	r6, r6
   82624:	2200      	movs	r2, #0
   82626:	4631      	mov	r1, r6
   82628:	4b11      	ldr	r3, [pc, #68]	; (82670 <generic_isr+0x70>)
   8262a:	4798      	blx	r3
        if (driver->cdc_enabled)
   8262c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82630:	f013 0f04 	tst.w	r3, #4
   82634:	d0ed      	beq.n	82612 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   82636:	2200      	movs	r2, #0
   82638:	4631      	mov	r1, r6
   8263a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   8263e:	4b0c      	ldr	r3, [pc, #48]	; (82670 <generic_isr+0x70>)
   82640:	4798      	blx	r3
   82642:	e7e6      	b.n	82612 <generic_isr+0x12>
		if (circ_buf_has_char(&driver->txbuf)){
   82644:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   82648:	4628      	mov	r0, r5
   8264a:	4b0a      	ldr	r3, [pc, #40]	; (82674 <generic_isr+0x74>)
   8264c:	4798      	blx	r3
   8264e:	b920      	cbnz	r0, 8265a <generic_isr+0x5a>
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   82650:	2102      	movs	r1, #2
   82652:	6820      	ldr	r0, [r4, #0]
   82654:	4b08      	ldr	r3, [pc, #32]	; (82678 <generic_isr+0x78>)
   82656:	4798      	blx	r3
}
   82658:	e7de      	b.n	82618 <generic_isr+0x18>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   8265a:	6824      	ldr	r4, [r4, #0]
   8265c:	4628      	mov	r0, r5
   8265e:	4b07      	ldr	r3, [pc, #28]	; (8267c <generic_isr+0x7c>)
   82660:	4798      	blx	r3
   82662:	4601      	mov	r1, r0
   82664:	4620      	mov	r0, r4
   82666:	4b06      	ldr	r3, [pc, #24]	; (82680 <generic_isr+0x80>)
   82668:	4798      	blx	r3
   8266a:	bd70      	pop	{r4, r5, r6, pc}
   8266c:	00086335 	.word	0x00086335
   82670:	000807f7 	.word	0x000807f7
   82674:	0008083f 	.word	0x0008083f
   82678:	0008632d 	.word	0x0008632d
   8267c:	00080821 	.word	0x00080821
   82680:	00086355 	.word	0x00086355

00082684 <USART0_Handler>:
{
   82684:	b508      	push	{r3, lr}
	generic_isr(&usart0_driver);
   82686:	4802      	ldr	r0, [pc, #8]	; (82690 <USART0_Handler+0xc>)
   82688:	4b02      	ldr	r3, [pc, #8]	; (82694 <USART0_Handler+0x10>)
   8268a:	4798      	blx	r3
   8268c:	bd08      	pop	{r3, pc}
   8268e:	bf00      	nop
   82690:	20000658 	.word	0x20000658
   82694:	00082601 	.word	0x00082601

00082698 <configure_usart>:
{
   82698:	b538      	push	{r3, r4, r5, lr}
   8269a:	4604      	mov	r4, r0
   8269c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    driver->usartopts.baudrate = baud;
   826a0:	6061      	str	r1, [r4, #4]
    switch(stop_bits)
   826a2:	2a01      	cmp	r2, #1
   826a4:	d00e      	beq.n	826c4 <configure_usart+0x2c>
   826a6:	b122      	cbz	r2, 826b2 <configure_usart+0x1a>
   826a8:	2a02      	cmp	r2, #2
   826aa:	d00f      	beq.n	826cc <configure_usart+0x34>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   826ac:	2200      	movs	r2, #0
   826ae:	6122      	str	r2, [r4, #16]
   826b0:	e001      	b.n	826b6 <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   826b2:	2200      	movs	r2, #0
   826b4:	6122      	str	r2, [r4, #16]
    switch(parity)
   826b6:	2b04      	cmp	r3, #4
   826b8:	d827      	bhi.n	8270a <configure_usart+0x72>
   826ba:	e8df f003 	tbb	[pc, r3]
   826be:	170b      	.short	0x170b
   826c0:	1e1b      	.short	0x1e1b
   826c2:	22          	.byte	0x22
   826c3:	00          	.byte	0x00
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   826c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   826c8:	6122      	str	r2, [r4, #16]
            break;
   826ca:	e7f4      	b.n	826b6 <configure_usart+0x1e>
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   826cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   826d0:	6122      	str	r2, [r4, #16]
            break;
   826d2:	e7f0      	b.n	826b6 <configure_usart+0x1e>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   826d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826d8:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   826da:	2806      	cmp	r0, #6
   826dc:	d036      	beq.n	8274c <configure_usart+0xb4>
   826de:	2807      	cmp	r0, #7
   826e0:	d037      	beq.n	82752 <configure_usart+0xba>
   826e2:	2805      	cmp	r0, #5
   826e4:	d015      	beq.n	82712 <configure_usart+0x7a>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   826e6:	23c0      	movs	r3, #192	; 0xc0
   826e8:	60a3      	str	r3, [r4, #8]
   826ea:	e014      	b.n	82716 <configure_usart+0x7e>
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   826ec:	f44f 7300 	mov.w	r3, #512	; 0x200
   826f0:	60e3      	str	r3, [r4, #12]
            break;
   826f2:	e7f2      	b.n	826da <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   826f4:	2300      	movs	r3, #0
   826f6:	60e3      	str	r3, [r4, #12]
            break;
   826f8:	e7ef      	b.n	826da <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   826fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   826fe:	60e3      	str	r3, [r4, #12]
            break;
   82700:	e7eb      	b.n	826da <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   82702:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82706:	60e3      	str	r3, [r4, #12]
            break;							
   82708:	e7e7      	b.n	826da <configure_usart+0x42>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   8270a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8270e:	60e3      	str	r3, [r4, #12]
   82710:	e7e3      	b.n	826da <configure_usart+0x42>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   82712:	2300      	movs	r3, #0
   82714:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   82716:	2300      	movs	r3, #0
   82718:	6163      	str	r3, [r4, #20]
    usart_enableIO(driver);
   8271a:	4620      	mov	r0, r4
   8271c:	4b0e      	ldr	r3, [pc, #56]	; (82758 <configure_usart+0xc0>)
   8271e:	4798      	blx	r3
    driver->enabled = 1;
   82720:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82724:	f043 0302 	orr.w	r3, r3, #2
   82728:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   8272c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   82730:	4d0a      	ldr	r5, [pc, #40]	; (8275c <configure_usart+0xc4>)
   82732:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   82734:	f104 001c 	add.w	r0, r4, #28
   82738:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   8273a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   8273e:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   82740:	4a07      	ldr	r2, [pc, #28]	; (82760 <configure_usart+0xc8>)
   82742:	1d21      	adds	r1, r4, #4
   82744:	6820      	ldr	r0, [r4, #0]
   82746:	4b07      	ldr	r3, [pc, #28]	; (82764 <configure_usart+0xcc>)
   82748:	4798      	blx	r3
}
   8274a:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   8274c:	2340      	movs	r3, #64	; 0x40
   8274e:	60a3      	str	r3, [r4, #8]
            break;
   82750:	e7e1      	b.n	82716 <configure_usart+0x7e>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   82752:	2380      	movs	r3, #128	; 0x80
   82754:	60a3      	str	r3, [r4, #8]
            break;					
   82756:	e7de      	b.n	82716 <configure_usart+0x7e>
   82758:	000825ed 	.word	0x000825ed
   8275c:	000807ed 	.word	0x000807ed
   82760:	05b8d800 	.word	0x05b8d800
   82764:	00086255 	.word	0x00086255

00082768 <usart_driver_putchar>:
{
   82768:	b570      	push	{r4, r5, r6, lr}
   8276a:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   8276c:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   82770:	2200      	movs	r2, #0
   82772:	4628      	mov	r0, r5
   82774:	4b0e      	ldr	r3, [pc, #56]	; (827b0 <usart_driver_putchar+0x48>)
   82776:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   82778:	6820      	ldr	r0, [r4, #0]
   8277a:	4b0e      	ldr	r3, [pc, #56]	; (827b4 <usart_driver_putchar+0x4c>)
   8277c:	4798      	blx	r3
   8277e:	f010 0f02 	tst.w	r0, #2
   82782:	d000      	beq.n	82786 <usart_driver_putchar+0x1e>
   82784:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   82786:	6820      	ldr	r0, [r4, #0]
   82788:	4b0b      	ldr	r3, [pc, #44]	; (827b8 <usart_driver_putchar+0x50>)
   8278a:	4798      	blx	r3
   8278c:	f010 0f02 	tst.w	r0, #2
   82790:	d104      	bne.n	8279c <usart_driver_putchar+0x34>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   82792:	2102      	movs	r1, #2
   82794:	6820      	ldr	r0, [r4, #0]
   82796:	4b09      	ldr	r3, [pc, #36]	; (827bc <usart_driver_putchar+0x54>)
   82798:	4798      	blx	r3
}
   8279a:	e7f3      	b.n	82784 <usart_driver_putchar+0x1c>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   8279c:	6826      	ldr	r6, [r4, #0]
   8279e:	4628      	mov	r0, r5
   827a0:	4b07      	ldr	r3, [pc, #28]	; (827c0 <usart_driver_putchar+0x58>)
   827a2:	4798      	blx	r3
   827a4:	4601      	mov	r1, r0
   827a6:	4630      	mov	r0, r6
   827a8:	4b06      	ldr	r3, [pc, #24]	; (827c4 <usart_driver_putchar+0x5c>)
   827aa:	4798      	blx	r3
   827ac:	e7f1      	b.n	82792 <usart_driver_putchar+0x2a>
   827ae:	bf00      	nop
   827b0:	000807f7 	.word	0x000807f7
   827b4:	00086331 	.word	0x00086331
   827b8:	00086335 	.word	0x00086335
   827bc:	00086329 	.word	0x00086329
   827c0:	00080821 	.word	0x00080821
   827c4:	00086355 	.word	0x00086355

000827c8 <get_nth_available_driver>:
		if (port == 0) break;
   827c8:	2800      	cmp	r0, #0
}
   827ca:	4802      	ldr	r0, [pc, #8]	; (827d4 <get_nth_available_driver+0xc>)
   827cc:	bf18      	it	ne
   827ce:	2000      	movne	r0, #0
   827d0:	4770      	bx	lr
   827d2:	bf00      	nop
   827d4:	20000658 	.word	0x20000658

000827d8 <ctrl_usart_in>:
{
   827d8:	b510      	push	{r4, lr}
   827da:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   827dc:	4b24      	ldr	r3, [pc, #144]	; (82870 <ctrl_usart_in+0x98>)
   827de:	885c      	ldrh	r4, [r3, #2]
   827e0:	0a20      	lsrs	r0, r4, #8
   827e2:	4b24      	ldr	r3, [pc, #144]	; (82874 <ctrl_usart_in+0x9c>)
   827e4:	4798      	blx	r3
    if (!driver)
   827e6:	2800      	cmp	r0, #0
   827e8:	d03f      	beq.n	8286a <ctrl_usart_in+0x92>
   827ea:	4603      	mov	r3, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   827ec:	b2e0      	uxtb	r0, r4
   827ee:	2814      	cmp	r0, #20
   827f0:	d007      	beq.n	82802 <ctrl_usart_in+0x2a>
   827f2:	2818      	cmp	r0, #24
   827f4:	d01f      	beq.n	82836 <ctrl_usart_in+0x5e>
    return false;
   827f6:	2810      	cmp	r0, #16
   827f8:	bf14      	ite	ne
   827fa:	2000      	movne	r0, #0
   827fc:	2001      	moveq	r0, #1
}
   827fe:	b002      	add	sp, #8
   82800:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   82802:	4a1b      	ldr	r2, [pc, #108]	; (82870 <ctrl_usart_in+0x98>)
   82804:	88d2      	ldrh	r2, [r2, #6]
   82806:	2a03      	cmp	r2, #3
   82808:	d801      	bhi.n	8280e <ctrl_usart_in+0x36>
            return false;
   8280a:	2000      	movs	r0, #0
   8280c:	e7f7      	b.n	827fe <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   8280e:	4a18      	ldr	r2, [pc, #96]	; (82870 <ctrl_usart_in+0x98>)
   82810:	4c19      	ldr	r4, [pc, #100]	; (82878 <ctrl_usart_in+0xa0>)
   82812:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   82814:	2104      	movs	r1, #4
   82816:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   82818:	f103 001c 	add.w	r0, r3, #28
   8281c:	4b17      	ldr	r3, [pc, #92]	; (8287c <ctrl_usart_in+0xa4>)
   8281e:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82820:	7020      	strb	r0, [r4, #0]
   82822:	f3c0 2307 	ubfx	r3, r0, #8, #8
   82826:	7063      	strb	r3, [r4, #1]
   82828:	f3c0 4307 	ubfx	r3, r0, #16, #8
   8282c:	70a3      	strb	r3, [r4, #2]
   8282e:	0e00      	lsrs	r0, r0, #24
   82830:	70e0      	strb	r0, [r4, #3]
        return true;
   82832:	2001      	movs	r0, #1
   82834:	e7e3      	b.n	827fe <ctrl_usart_in+0x26>
        if (udd_g_ctrlreq.req.wLength < 4) {
   82836:	4a0e      	ldr	r2, [pc, #56]	; (82870 <ctrl_usart_in+0x98>)
   82838:	88d2      	ldrh	r2, [r2, #6]
   8283a:	2a03      	cmp	r2, #3
   8283c:	d801      	bhi.n	82842 <ctrl_usart_in+0x6a>
            return false;
   8283e:	2000      	movs	r0, #0
   82840:	e7dd      	b.n	827fe <ctrl_usart_in+0x26>
        udd_g_ctrlreq.payload = respbuf;
   82842:	4a0b      	ldr	r2, [pc, #44]	; (82870 <ctrl_usart_in+0x98>)
   82844:	4c0c      	ldr	r4, [pc, #48]	; (82878 <ctrl_usart_in+0xa0>)
   82846:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   82848:	2104      	movs	r1, #4
   8284a:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   8284c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
   82850:	4b0a      	ldr	r3, [pc, #40]	; (8287c <ctrl_usart_in+0xa4>)
   82852:	4798      	blx	r3
        word2buf(respbuf, cnt);
   82854:	7020      	strb	r0, [r4, #0]
   82856:	f3c0 2307 	ubfx	r3, r0, #8, #8
   8285a:	7063      	strb	r3, [r4, #1]
   8285c:	f3c0 4307 	ubfx	r3, r0, #16, #8
   82860:	70a3      	strb	r3, [r4, #2]
   82862:	0e00      	lsrs	r0, r0, #24
   82864:	70e0      	strb	r0, [r4, #3]
        return true;
   82866:	2001      	movs	r0, #1
   82868:	e7c9      	b.n	827fe <ctrl_usart_in+0x26>
        return false;
   8286a:	2000      	movs	r0, #0
   8286c:	e7c7      	b.n	827fe <ctrl_usart_in+0x26>
   8286e:	bf00      	nop
   82870:	200027ac 	.word	0x200027ac
   82874:	000827c9 	.word	0x000827c9
   82878:	200022e8 	.word	0x200022e8
   8287c:	0008084b 	.word	0x0008084b

00082880 <ctrl_usart_out>:
{
   82880:	b570      	push	{r4, r5, r6, lr}
   82882:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82884:	4b1d      	ldr	r3, [pc, #116]	; (828fc <ctrl_usart_out+0x7c>)
   82886:	885c      	ldrh	r4, [r3, #2]
   82888:	0a20      	lsrs	r0, r4, #8
   8288a:	4b1d      	ldr	r3, [pc, #116]	; (82900 <ctrl_usart_out+0x80>)
   8288c:	4798      	blx	r3
    if (!driver) return;
   8288e:	b138      	cbz	r0, 828a0 <ctrl_usart_out+0x20>
   82890:	4605      	mov	r5, r0
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82892:	b2e3      	uxtb	r3, r4
   82894:	2b11      	cmp	r3, #17
   82896:	d018      	beq.n	828ca <ctrl_usart_out+0x4a>
   82898:	2b12      	cmp	r3, #18
   8289a:	d023      	beq.n	828e4 <ctrl_usart_out+0x64>
   8289c:	2b10      	cmp	r3, #16
   8289e:	d001      	beq.n	828a4 <ctrl_usart_out+0x24>
}
   828a0:	b002      	add	sp, #8
   828a2:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength != 7) return false;
   828a4:	4b15      	ldr	r3, [pc, #84]	; (828fc <ctrl_usart_out+0x7c>)
   828a6:	88db      	ldrh	r3, [r3, #6]
   828a8:	2b07      	cmp	r3, #7
   828aa:	d1f9      	bne.n	828a0 <ctrl_usart_out+0x20>
        buf2word(baud, udd_g_ctrlreq.payload);
   828ac:	4c13      	ldr	r4, [pc, #76]	; (828fc <ctrl_usart_out+0x7c>)
   828ae:	68a3      	ldr	r3, [r4, #8]
   828b0:	681e      	ldr	r6, [r3, #0]
		usart_enableIO(driver);
   828b2:	4b14      	ldr	r3, [pc, #80]	; (82904 <ctrl_usart_out+0x84>)
   828b4:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   828b6:	68a1      	ldr	r1, [r4, #8]
   828b8:	794b      	ldrb	r3, [r1, #5]
   828ba:	790a      	ldrb	r2, [r1, #4]
   828bc:	7989      	ldrb	r1, [r1, #6]
   828be:	9100      	str	r1, [sp, #0]
   828c0:	4631      	mov	r1, r6
   828c2:	4628      	mov	r0, r5
   828c4:	4c10      	ldr	r4, [pc, #64]	; (82908 <ctrl_usart_out+0x88>)
   828c6:	47a0      	blx	r4
        return true;
   828c8:	e7ea      	b.n	828a0 <ctrl_usart_out+0x20>
		usart_enableIO(driver);
   828ca:	4b0e      	ldr	r3, [pc, #56]	; (82904 <ctrl_usart_out+0x84>)
   828cc:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   828ce:	6828      	ldr	r0, [r5, #0]
   828d0:	4b0e      	ldr	r3, [pc, #56]	; (8290c <ctrl_usart_out+0x8c>)
   828d2:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   828d4:	6828      	ldr	r0, [r5, #0]
   828d6:	4b0e      	ldr	r3, [pc, #56]	; (82910 <ctrl_usart_out+0x90>)
   828d8:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   828da:	2101      	movs	r1, #1
   828dc:	6828      	ldr	r0, [r5, #0]
   828de:	4b0d      	ldr	r3, [pc, #52]	; (82914 <ctrl_usart_out+0x94>)
   828e0:	4798      	blx	r3
		return;
   828e2:	e7dd      	b.n	828a0 <ctrl_usart_out+0x20>
        usart_disable_rx(driver->usart);
   828e4:	6800      	ldr	r0, [r0, #0]
   828e6:	4b0c      	ldr	r3, [pc, #48]	; (82918 <ctrl_usart_out+0x98>)
   828e8:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   828ea:	6828      	ldr	r0, [r5, #0]
   828ec:	4b0b      	ldr	r3, [pc, #44]	; (8291c <ctrl_usart_out+0x9c>)
   828ee:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   828f0:	2103      	movs	r1, #3
   828f2:	6828      	ldr	r0, [r5, #0]
   828f4:	4b0a      	ldr	r3, [pc, #40]	; (82920 <ctrl_usart_out+0xa0>)
   828f6:	4798      	blx	r3
        return true;
   828f8:	e7d2      	b.n	828a0 <ctrl_usart_out+0x20>
   828fa:	bf00      	nop
   828fc:	200027ac 	.word	0x200027ac
   82900:	000827c9 	.word	0x000827c9
   82904:	000825ed 	.word	0x000825ed
   82908:	00082699 	.word	0x00082699
   8290c:	0008631d 	.word	0x0008631d
   82910:	00086311 	.word	0x00086311
   82914:	00086329 	.word	0x00086329
   82918:	00086323 	.word	0x00086323
   8291c:	00086317 	.word	0x00086317
   82920:	0008632d 	.word	0x0008632d

00082924 <ctrl_usart_cb>:
{
   82924:	b508      	push	{r3, lr}
	ctrl_usart_out();
   82926:	4b01      	ldr	r3, [pc, #4]	; (8292c <ctrl_usart_cb+0x8>)
   82928:	4798      	blx	r3
   8292a:	bd08      	pop	{r3, pc}
   8292c:	00082881 	.word	0x00082881

00082930 <naeusb_cdc_settings_out>:
{
   82930:	b570      	push	{r4, r5, r6, lr}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82932:	4b0c      	ldr	r3, [pc, #48]	; (82964 <naeusb_cdc_settings_out+0x34>)
   82934:	885e      	ldrh	r6, [r3, #2]
   82936:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   82938:	4d0b      	ldr	r5, [pc, #44]	; (82968 <naeusb_cdc_settings_out+0x38>)
   8293a:	4620      	mov	r0, r4
   8293c:	47a8      	blx	r5
        if (driver) {
   8293e:	b160      	cbz	r0, 8295a <naeusb_cdc_settings_out+0x2a>
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82940:	fa46 f204 	asr.w	r2, r6, r4
   82944:	f012 0f01 	tst.w	r2, #1
                driver->cdc_settings_change = 1;
   82948:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
   8294c:	bf14      	ite	ne
   8294e:	f042 0208 	orrne.w	r2, r2, #8
                driver->cdc_settings_change = 0;
   82952:	f36f 02c3 	bfceq	r2, #3, #1
   82956:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
   8295a:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < 4; i++) {
   8295c:	2c04      	cmp	r4, #4
   8295e:	d1ec      	bne.n	8293a <naeusb_cdc_settings_out+0xa>
}
   82960:	bd70      	pop	{r4, r5, r6, pc}
   82962:	bf00      	nop
   82964:	200027ac 	.word	0x200027ac
   82968:	000827c9 	.word	0x000827c9

0008296c <ctrl_usart_cb_data>:
{		
   8296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   8296e:	4b0c      	ldr	r3, [pc, #48]	; (829a0 <ctrl_usart_cb_data+0x34>)
   82970:	8858      	ldrh	r0, [r3, #2]
   82972:	0a00      	lsrs	r0, r0, #8
   82974:	4b0b      	ldr	r3, [pc, #44]	; (829a4 <ctrl_usart_cb_data+0x38>)
   82976:	4798      	blx	r3
	if (!driver) return;
   82978:	b188      	cbz	r0, 8299e <ctrl_usart_cb_data+0x32>
   8297a:	4606      	mov	r6, r0
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8297c:	4b08      	ldr	r3, [pc, #32]	; (829a0 <ctrl_usart_cb_data+0x34>)
   8297e:	88da      	ldrh	r2, [r3, #6]
   82980:	899b      	ldrh	r3, [r3, #12]
   82982:	4293      	cmp	r3, r2
   82984:	d30b      	bcc.n	8299e <ctrl_usart_cb_data+0x32>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82986:	b152      	cbz	r2, 8299e <ctrl_usart_cb_data+0x32>
   82988:	2400      	movs	r4, #0
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   8298a:	4d05      	ldr	r5, [pc, #20]	; (829a0 <ctrl_usart_cb_data+0x34>)
   8298c:	4f06      	ldr	r7, [pc, #24]	; (829a8 <ctrl_usart_cb_data+0x3c>)
   8298e:	68ab      	ldr	r3, [r5, #8]
   82990:	5d19      	ldrb	r1, [r3, r4]
   82992:	4630      	mov	r0, r6
   82994:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82996:	3401      	adds	r4, #1
   82998:	88eb      	ldrh	r3, [r5, #6]
   8299a:	42a3      	cmp	r3, r4
   8299c:	dcf7      	bgt.n	8298e <ctrl_usart_cb_data+0x22>
   8299e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   829a0:	200027ac 	.word	0x200027ac
   829a4:	000827c9 	.word	0x000827c9
   829a8:	00082769 	.word	0x00082769

000829ac <naeusart_register_handlers>:
{
   829ac:	b570      	push	{r4, r5, r6, lr}
   829ae:	2400      	movs	r4, #0
		usart_driver *driver = get_nth_available_driver(i);
   829b0:	4d09      	ldr	r5, [pc, #36]	; (829d8 <naeusart_register_handlers+0x2c>)
		usart_enableIO(driver);
   829b2:	4e0a      	ldr	r6, [pc, #40]	; (829dc <naeusart_register_handlers+0x30>)
   829b4:	e002      	b.n	829bc <naeusart_register_handlers+0x10>
   829b6:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 4; i++) {
   829b8:	2c04      	cmp	r4, #4
   829ba:	d005      	beq.n	829c8 <naeusart_register_handlers+0x1c>
		usart_driver *driver = get_nth_available_driver(i);
   829bc:	4620      	mov	r0, r4
   829be:	47a8      	blx	r5
		if (!driver) continue;
   829c0:	2800      	cmp	r0, #0
   829c2:	d0f8      	beq.n	829b6 <naeusart_register_handlers+0xa>
		usart_enableIO(driver);
   829c4:	47b0      	blx	r6
   829c6:	e7f6      	b.n	829b6 <naeusart_register_handlers+0xa>
    naeusb_add_in_handler(usart_setup_in_received);
   829c8:	4805      	ldr	r0, [pc, #20]	; (829e0 <naeusart_register_handlers+0x34>)
   829ca:	4b06      	ldr	r3, [pc, #24]	; (829e4 <naeusart_register_handlers+0x38>)
   829cc:	4798      	blx	r3
    naeusb_add_out_handler(usart_setup_out_received);
   829ce:	4806      	ldr	r0, [pc, #24]	; (829e8 <naeusart_register_handlers+0x3c>)
   829d0:	4b06      	ldr	r3, [pc, #24]	; (829ec <naeusart_register_handlers+0x40>)
   829d2:	4798      	blx	r3
   829d4:	bd70      	pop	{r4, r5, r6, pc}
   829d6:	bf00      	nop
   829d8:	000827c9 	.word	0x000827c9
   829dc:	000825ed 	.word	0x000825ed
   829e0:	00082a35 	.word	0x00082a35
   829e4:	0008133d 	.word	0x0008133d
   829e8:	00082525 	.word	0x00082525
   829ec:	00081361 	.word	0x00081361

000829f0 <naeusb_cdc_settings_in>:
{
   829f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829f2:	4d0d      	ldr	r5, [pc, #52]	; (82a28 <naeusb_cdc_settings_in+0x38>)
   829f4:	2400      	movs	r4, #0
        usart_driver *driver = get_nth_available_driver(i);
   829f6:	4f0d      	ldr	r7, [pc, #52]	; (82a2c <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   829f8:	4626      	mov	r6, r4
        usart_driver *driver = get_nth_available_driver(i);
   829fa:	4620      	mov	r0, r4
   829fc:	47b8      	blx	r7
		respbuf[i] = 0;
   829fe:	702e      	strb	r6, [r5, #0]
        if (driver)
   82a00:	b120      	cbz	r0, 82a0c <naeusb_cdc_settings_in+0x1c>
            respbuf[i] = driver->cdc_settings_change;
   82a02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82a06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   82a0a:	702b      	strb	r3, [r5, #0]
   82a0c:	3401      	adds	r4, #1
   82a0e:	3501      	adds	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   82a10:	2c04      	cmp	r4, #4
   82a12:	d1f2      	bne.n	829fa <naeusb_cdc_settings_in+0xa>
    udd_g_ctrlreq.payload = respbuf;
   82a14:	4b06      	ldr	r3, [pc, #24]	; (82a30 <naeusb_cdc_settings_in+0x40>)
   82a16:	4a04      	ldr	r2, [pc, #16]	; (82a28 <naeusb_cdc_settings_in+0x38>)
   82a18:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82a1a:	88da      	ldrh	r2, [r3, #6]
   82a1c:	2a04      	cmp	r2, #4
   82a1e:	bf28      	it	cs
   82a20:	2204      	movcs	r2, #4
   82a22:	819a      	strh	r2, [r3, #12]
}
   82a24:	2001      	movs	r0, #1
   82a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82a28:	200022e8 	.word	0x200022e8
   82a2c:	000827c9 	.word	0x000827c9
   82a30:	200027ac 	.word	0x200027ac

00082a34 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   82a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   82a38:	4b24      	ldr	r3, [pc, #144]	; (82acc <usart_setup_in_received+0x98>)
   82a3a:	785b      	ldrb	r3, [r3, #1]
   82a3c:	3b1a      	subs	r3, #26
   82a3e:	2b17      	cmp	r3, #23
   82a40:	d83d      	bhi.n	82abe <usart_setup_in_received+0x8a>
   82a42:	e8df f003 	tbb	[pc, r3]
   82a46:	0c10      	.short	0x0c10
   82a48:	3c3c3c3c 	.word	0x3c3c3c3c
   82a4c:	3c3c3430 	.word	0x3c3c3430
   82a50:	3c3c3c3c 	.word	0x3c3c3c3c
   82a54:	3c3c3c3c 	.word	0x3c3c3c3c
   82a58:	3c3c3c3c 	.word	0x3c3c3c3c
   82a5c:	383c      	.short	0x383c
    case REQ_USART0_CONFIG:
        return ctrl_usart_in();
   82a5e:	4b1c      	ldr	r3, [pc, #112]	; (82ad0 <usart_setup_in_received+0x9c>)
   82a60:	4798      	blx	r3
   82a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82a66:	4b19      	ldr	r3, [pc, #100]	; (82acc <usart_setup_in_received+0x98>)
   82a68:	8858      	ldrh	r0, [r3, #2]
   82a6a:	0a00      	lsrs	r0, r0, #8
   82a6c:	4b19      	ldr	r3, [pc, #100]	; (82ad4 <usart_setup_in_received+0xa0>)
   82a6e:	4798      	blx	r3
		if (!driver) return false;
   82a70:	b340      	cbz	r0, 82ac4 <usart_setup_in_received+0x90>
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82a72:	4b16      	ldr	r3, [pc, #88]	; (82acc <usart_setup_in_received+0x98>)
   82a74:	88db      	ldrh	r3, [r3, #6]
   82a76:	b1a3      	cbz	r3, 82aa2 <usart_setup_in_received+0x6e>
   82a78:	4d17      	ldr	r5, [pc, #92]	; (82ad8 <usart_setup_in_received+0xa4>)
   82a7a:	2400      	movs	r4, #0
    return get_from_circ_buf(&driver->rxbuf);
   82a7c:	f100 081c 	add.w	r8, r0, #28
   82a80:	4e16      	ldr	r6, [pc, #88]	; (82adc <usart_setup_in_received+0xa8>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82a82:	4f12      	ldr	r7, [pc, #72]	; (82acc <usart_setup_in_received+0x98>)
    return get_from_circ_buf(&driver->rxbuf);
   82a84:	4640      	mov	r0, r8
   82a86:	47b0      	blx	r6
            respbuf[cnt] = usart_driver_getchar(driver);
   82a88:	f805 0f01 	strb.w	r0, [r5, #1]!
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82a8c:	3401      	adds	r4, #1
   82a8e:	88fb      	ldrh	r3, [r7, #6]
   82a90:	42a3      	cmp	r3, r4
   82a92:	d8f7      	bhi.n	82a84 <usart_setup_in_received+0x50>
        }
        udd_g_ctrlreq.payload = respbuf;
   82a94:	4b0d      	ldr	r3, [pc, #52]	; (82acc <usart_setup_in_received+0x98>)
   82a96:	4a12      	ldr	r2, [pc, #72]	; (82ae0 <usart_setup_in_received+0xac>)
   82a98:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   82a9a:	819c      	strh	r4, [r3, #12]
        return true;
   82a9c:	2001      	movs	r0, #1
   82a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82aa2:	2400      	movs	r4, #0
   82aa4:	e7f6      	b.n	82a94 <usart_setup_in_received+0x60>
        break;
		
#ifdef CW_PROG_XMEGA
    case REQ_XMEGA_PROGRAM:
        return XPROGProtocol_Command();
   82aa6:	4b0f      	ldr	r3, [pc, #60]	; (82ae4 <usart_setup_in_received+0xb0>)
   82aa8:	4798      	blx	r3
   82aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif

#ifdef CW_PROG_AVR        
    case REQ_AVR_PROGRAM:
        return V2Protocol_ProcessCommand();
   82aae:	4b0e      	ldr	r3, [pc, #56]	; (82ae8 <usart_setup_in_received+0xb4>)
   82ab0:	4798      	blx	r3
   82ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
#endif
	
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
   82ab6:	4b0d      	ldr	r3, [pc, #52]	; (82aec <usart_setup_in_received+0xb8>)
   82ab8:	4798      	blx	r3
   82aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        break;
    }
    return false;
   82abe:	2000      	movs	r0, #0
   82ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!driver) return false;
   82ac4:	2000      	movs	r0, #0
}
   82ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82aca:	bf00      	nop
   82acc:	200027ac 	.word	0x200027ac
   82ad0:	000827d9 	.word	0x000827d9
   82ad4:	000827c9 	.word	0x000827c9
   82ad8:	200022e7 	.word	0x200022e7
   82adc:	00080821 	.word	0x00080821
   82ae0:	200022e8 	.word	0x200022e8
   82ae4:	00083be1 	.word	0x00083be1
   82ae8:	00083525 	.word	0x00083525
   82aec:	000829f1 	.word	0x000829f1

00082af0 <cdc_enable>:
{
   82af0:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   82af2:	4b05      	ldr	r3, [pc, #20]	; (82b08 <cdc_enable+0x18>)
   82af4:	4798      	blx	r3
    driver->cdc_enabled = 1;
   82af6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82afa:	f043 0304 	orr.w	r3, r3, #4
   82afe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
}
   82b02:	2001      	movs	r0, #1
   82b04:	bd08      	pop	{r3, pc}
   82b06:	bf00      	nop
   82b08:	000827c9 	.word	0x000827c9

00082b0c <cdc_disable>:
{
   82b0c:	b508      	push	{r3, lr}
	usart_driver *driver = get_nth_available_driver(port);
   82b0e:	4b04      	ldr	r3, [pc, #16]	; (82b20 <cdc_disable+0x14>)
   82b10:	4798      	blx	r3
    driver->cdc_enabled = 0;
   82b12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82b16:	f36f 0382 	bfc	r3, #2, #1
   82b1a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
   82b1e:	bd08      	pop	{r3, pc}
   82b20:	000827c9 	.word	0x000827c9

00082b24 <my_callback_rx_notify>:
{
   82b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82b28:	4681      	mov	r9, r0
	usart_driver *driver = get_nth_available_driver(port);
   82b2a:	4b17      	ldr	r3, [pc, #92]	; (82b88 <my_callback_rx_notify+0x64>)
   82b2c:	4798      	blx	r3
    if (driver->cdc_enabled && driver->enabled) {
   82b2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82b32:	f003 0306 	and.w	r3, r3, #6
   82b36:	2b06      	cmp	r3, #6
   82b38:	d001      	beq.n	82b3e <my_callback_rx_notify+0x1a>
   82b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82b3e:	4607      	mov	r7, r0
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   82b40:	4648      	mov	r0, r9
   82b42:	4b12      	ldr	r3, [pc, #72]	; (82b8c <my_callback_rx_notify+0x68>)
   82b44:	4798      	blx	r3
        while (num_char > 0) {
   82b46:	4605      	mov	r5, r0
   82b48:	2800      	cmp	r0, #0
   82b4a:	d0f6      	beq.n	82b3a <my_callback_rx_notify+0x16>
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82b4c:	4e10      	ldr	r6, [pc, #64]	; (82b90 <my_callback_rx_notify+0x6c>)
   82b4e:	f8df a044 	ldr.w	sl, [pc, #68]	; 82b94 <my_callback_rx_notify+0x70>
                usart_driver_putchar(driver, uart_buf[i]);
   82b52:	f8df 8044 	ldr.w	r8, [pc, #68]	; 82b98 <my_callback_rx_notify+0x74>
            num_char = (num_char > 512) ? 512 : num_char;
   82b56:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   82b5a:	bf28      	it	cs
   82b5c:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82b60:	462a      	mov	r2, r5
   82b62:	4631      	mov	r1, r6
   82b64:	4648      	mov	r0, r9
   82b66:	47d0      	blx	sl
            for (uint16_t i = 0; i < num_char; i++) {
   82b68:	b13d      	cbz	r5, 82b7a <my_callback_rx_notify+0x56>
   82b6a:	2400      	movs	r4, #0
                usart_driver_putchar(driver, uart_buf[i]);
   82b6c:	5d31      	ldrb	r1, [r6, r4]
   82b6e:	4638      	mov	r0, r7
   82b70:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   82b72:	3401      	adds	r4, #1
   82b74:	b2a4      	uxth	r4, r4
   82b76:	42a5      	cmp	r5, r4
   82b78:	d8f8      	bhi.n	82b6c <my_callback_rx_notify+0x48>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   82b7a:	4648      	mov	r0, r9
   82b7c:	4b03      	ldr	r3, [pc, #12]	; (82b8c <my_callback_rx_notify+0x68>)
   82b7e:	4798      	blx	r3
        while (num_char > 0) {
   82b80:	4605      	mov	r5, r0
   82b82:	2800      	cmp	r0, #0
   82b84:	d1e7      	bne.n	82b56 <my_callback_rx_notify+0x32>
   82b86:	e7d8      	b.n	82b3a <my_callback_rx_notify+0x16>
   82b88:	000827c9 	.word	0x000827c9
   82b8c:	000803f1 	.word	0x000803f1
   82b90:	20001d58 	.word	0x20001d58
   82b94:	00080601 	.word	0x00080601
   82b98:	00082769 	.word	0x00082769

00082b9c <my_callback_config>:
{
   82b9c:	b530      	push	{r4, r5, lr}
   82b9e:	b083      	sub	sp, #12
   82ba0:	460d      	mov	r5, r1
	usart_driver *driver = get_nth_available_driver(port);
   82ba2:	4b14      	ldr	r3, [pc, #80]	; (82bf4 <my_callback_config+0x58>)
   82ba4:	4798      	blx	r3
    if (driver->cdc_enabled) {
   82ba6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82baa:	f013 0f04 	tst.w	r3, #4
   82bae:	d003      	beq.n	82bb8 <my_callback_config+0x1c>
   82bb0:	4604      	mov	r4, r0
        switch(cfg->bParityType) {
   82bb2:	796b      	ldrb	r3, [r5, #5]
   82bb4:	2b04      	cmp	r3, #4
   82bb6:	d901      	bls.n	82bbc <my_callback_config+0x20>
}
   82bb8:	b003      	add	sp, #12
   82bba:	bd30      	pop	{r4, r5, pc}
        uint32_t baud = cfg->dwDTERate;
   82bbc:	6829      	ldr	r1, [r5, #0]
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82bbe:	79ab      	ldrb	r3, [r5, #6]
   82bc0:	3b05      	subs	r3, #5
   82bc2:	019b      	lsls	r3, r3, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82bc4:	b2db      	uxtb	r3, r3
   82bc6:	9300      	str	r3, [sp, #0]
   82bc8:	2300      	movs	r3, #0
   82bca:	461a      	mov	r2, r3
   82bcc:	4d0a      	ldr	r5, [pc, #40]	; (82bf8 <my_callback_config+0x5c>)
   82bce:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver) & UART_IER_RXRDY)) {
   82bd0:	4620      	mov	r0, r4
   82bd2:	4b0a      	ldr	r3, [pc, #40]	; (82bfc <my_callback_config+0x60>)
   82bd4:	4798      	blx	r3
   82bd6:	f010 0f01 	tst.w	r0, #1
   82bda:	d1ed      	bne.n	82bb8 <my_callback_config+0x1c>
			usart_enable_rx(driver->usart);
   82bdc:	6820      	ldr	r0, [r4, #0]
   82bde:	4b08      	ldr	r3, [pc, #32]	; (82c00 <my_callback_config+0x64>)
   82be0:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   82be2:	6820      	ldr	r0, [r4, #0]
   82be4:	4b07      	ldr	r3, [pc, #28]	; (82c04 <my_callback_config+0x68>)
   82be6:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   82be8:	2101      	movs	r1, #1
   82bea:	6820      	ldr	r0, [r4, #0]
   82bec:	4b06      	ldr	r3, [pc, #24]	; (82c08 <my_callback_config+0x6c>)
   82bee:	4798      	blx	r3
   82bf0:	e7e2      	b.n	82bb8 <my_callback_config+0x1c>
   82bf2:	bf00      	nop
   82bf4:	000827c9 	.word	0x000827c9
   82bf8:	00082699 	.word	0x00082699
   82bfc:	00086331 	.word	0x00086331
   82c00:	0008631d 	.word	0x0008631d
   82c04:	00086311 	.word	0x00086311
   82c08:	00086329 	.word	0x00086329

00082c0c <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   82c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c10:	2500      	movs	r5, #0
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
   82c12:	f8df b04c 	ldr.w	fp, [pc, #76]	; 82c60 <cdc_send_to_pc+0x54>
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled) {
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82c16:	f8df 804c 	ldr.w	r8, [pc, #76]	; 82c64 <cdc_send_to_pc+0x58>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82c1a:	f8df a04c 	ldr.w	sl, [pc, #76]	; 82c68 <cdc_send_to_pc+0x5c>
   82c1e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 82c6c <cdc_send_to_pc+0x60>
   82c22:	e00d      	b.n	82c40 <cdc_send_to_pc+0x34>
   82c24:	4620      	mov	r0, r4
   82c26:	47d0      	blx	sl
   82c28:	4601      	mov	r1, r0
   82c2a:	4638      	mov	r0, r7
   82c2c:	47c8      	blx	r9
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82c2e:	f506 74e2 	add.w	r4, r6, #452	; 0x1c4
   82c32:	4620      	mov	r0, r4
   82c34:	47c0      	blx	r8
   82c36:	2800      	cmp	r0, #0
   82c38:	d1f4      	bne.n	82c24 <cdc_send_to_pc+0x18>
   82c3a:	3501      	adds	r5, #1
	for (uint8_t i = 0; i < 4; i++) {
   82c3c:	2d04      	cmp	r5, #4
   82c3e:	d00c      	beq.n	82c5a <cdc_send_to_pc+0x4e>
   82c40:	b2ef      	uxtb	r7, r5
		usart_driver *driver = get_nth_available_driver(i);
   82c42:	4628      	mov	r0, r5
   82c44:	47d8      	blx	fp
		if (!driver) continue;
   82c46:	4606      	mov	r6, r0
   82c48:	2800      	cmp	r0, #0
   82c4a:	d0f6      	beq.n	82c3a <cdc_send_to_pc+0x2e>
		if (driver->cdc_enabled && driver->enabled) {
   82c4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
   82c50:	f003 0306 	and.w	r3, r3, #6
   82c54:	2b06      	cmp	r3, #6
   82c56:	d1f0      	bne.n	82c3a <cdc_send_to_pc+0x2e>
   82c58:	e7e9      	b.n	82c2e <cdc_send_to_pc+0x22>
			}
		}

	}
	
   82c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c5e:	bf00      	nop
   82c60:	000827c9 	.word	0x000827c9
   82c64:	0008083f 	.word	0x0008083f
   82c68:	00080821 	.word	0x00080821
   82c6c:	00080731 	.word	0x00080731

00082c70 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82c70:	4b10      	ldr	r3, [pc, #64]	; (82cb4 <udc_next_desc_in_iface+0x44>)
   82c72:	681b      	ldr	r3, [r3, #0]
   82c74:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82c76:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82c78:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82c7a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82c7c:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82c7e:	4290      	cmp	r0, r2
   82c80:	d211      	bcs.n	82ca6 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82c82:	7843      	ldrb	r3, [r0, #1]
   82c84:	2b04      	cmp	r3, #4
   82c86:	d010      	beq.n	82caa <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82c88:	428b      	cmp	r3, r1
   82c8a:	d009      	beq.n	82ca0 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82c8c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82c8e:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
   82c90:	4290      	cmp	r0, r2
   82c92:	d206      	bcs.n	82ca2 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82c94:	7843      	ldrb	r3, [r0, #1]
   82c96:	2b04      	cmp	r3, #4
   82c98:	d009      	beq.n	82cae <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
   82c9a:	428b      	cmp	r3, r1
   82c9c:	d1f6      	bne.n	82c8c <udc_next_desc_in_iface+0x1c>
   82c9e:	e007      	b.n	82cb0 <udc_next_desc_in_iface+0x40>
   82ca0:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
   82ca2:	2000      	movs	r0, #0
   82ca4:	4770      	bx	lr
   82ca6:	2000      	movs	r0, #0
   82ca8:	4770      	bx	lr
   82caa:	2000      	movs	r0, #0
   82cac:	4770      	bx	lr
   82cae:	2000      	movs	r0, #0
}
   82cb0:	4770      	bx	lr
   82cb2:	bf00      	nop
   82cb4:	20001f60 	.word	0x20001f60

00082cb8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   82cb8:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   82cba:	4b03      	ldr	r3, [pc, #12]	; (82cc8 <udc_valid_address+0x10>)
   82cbc:	7898      	ldrb	r0, [r3, #2]
   82cbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82cc2:	4b02      	ldr	r3, [pc, #8]	; (82ccc <udc_valid_address+0x14>)
   82cc4:	4798      	blx	r3
   82cc6:	bd08      	pop	{r3, pc}
   82cc8:	200027ac 	.word	0x200027ac
   82ccc:	00085a55 	.word	0x00085a55

00082cd0 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
   82cd0:	4b19      	ldr	r3, [pc, #100]	; (82d38 <udc_update_iface_desc+0x68>)
   82cd2:	781b      	ldrb	r3, [r3, #0]
   82cd4:	b34b      	cbz	r3, 82d2a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82cd6:	4b19      	ldr	r3, [pc, #100]	; (82d3c <udc_update_iface_desc+0x6c>)
   82cd8:	681b      	ldr	r3, [r3, #0]
   82cda:	681b      	ldr	r3, [r3, #0]
   82cdc:	791a      	ldrb	r2, [r3, #4]
   82cde:	4282      	cmp	r2, r0
   82ce0:	d925      	bls.n	82d2e <udc_update_iface_desc+0x5e>
{
   82ce2:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82ce4:	4a16      	ldr	r2, [pc, #88]	; (82d40 <udc_update_iface_desc+0x70>)
   82ce6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82ce8:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82cea:	441c      	add	r4, r3
	while (ptr_end_desc >
   82cec:	42a3      	cmp	r3, r4
   82cee:	d220      	bcs.n	82d32 <udc_update_iface_desc+0x62>
   82cf0:	2500      	movs	r5, #0
   82cf2:	2601      	movs	r6, #1
   82cf4:	e007      	b.n	82d06 <udc_update_iface_desc+0x36>
   82cf6:	4a12      	ldr	r2, [pc, #72]	; (82d40 <udc_update_iface_desc+0x70>)
   82cf8:	6013      	str	r3, [r2, #0]
   82cfa:	e00f      	b.n	82d1c <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
   82cfc:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82cfe:	4413      	add	r3, r2
   82d00:	4635      	mov	r5, r6
	while (ptr_end_desc >
   82d02:	42a3      	cmp	r3, r4
   82d04:	d20c      	bcs.n	82d20 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   82d06:	785a      	ldrb	r2, [r3, #1]
   82d08:	2a04      	cmp	r2, #4
   82d0a:	d1f7      	bne.n	82cfc <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82d0c:	789a      	ldrb	r2, [r3, #2]
   82d0e:	4282      	cmp	r2, r0
   82d10:	d1f4      	bne.n	82cfc <udc_update_iface_desc+0x2c>
   82d12:	78da      	ldrb	r2, [r3, #3]
   82d14:	428a      	cmp	r2, r1
   82d16:	d1f1      	bne.n	82cfc <udc_update_iface_desc+0x2c>
   82d18:	2d00      	cmp	r5, #0
   82d1a:	d1ec      	bne.n	82cf6 <udc_update_iface_desc+0x26>
				return true; // Interface found
   82d1c:	2001      	movs	r0, #1
   82d1e:	e002      	b.n	82d26 <udc_update_iface_desc+0x56>
   82d20:	4a07      	ldr	r2, [pc, #28]	; (82d40 <udc_update_iface_desc+0x70>)
   82d22:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
   82d24:	2000      	movs	r0, #0
}
   82d26:	bc70      	pop	{r4, r5, r6}
   82d28:	4770      	bx	lr
		return false;
   82d2a:	2000      	movs	r0, #0
   82d2c:	4770      	bx	lr
		return false;
   82d2e:	2000      	movs	r0, #0
   82d30:	4770      	bx	lr
	return false; // Interface not found
   82d32:	2000      	movs	r0, #0
   82d34:	e7f7      	b.n	82d26 <udc_update_iface_desc+0x56>
   82d36:	bf00      	nop
   82d38:	20001f5d 	.word	0x20001f5d
   82d3c:	20001f60 	.word	0x20001f60
   82d40:	20001f64 	.word	0x20001f64

00082d44 <udc_iface_disable>:
{
   82d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82d48:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
   82d4a:	2100      	movs	r1, #0
   82d4c:	4b13      	ldr	r3, [pc, #76]	; (82d9c <udc_iface_disable+0x58>)
   82d4e:	4798      	blx	r3
   82d50:	4680      	mov	r8, r0
   82d52:	b910      	cbnz	r0, 82d5a <udc_iface_disable+0x16>
}
   82d54:	4640      	mov	r0, r8
   82d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82d5a:	4b11      	ldr	r3, [pc, #68]	; (82da0 <udc_iface_disable+0x5c>)
   82d5c:	681b      	ldr	r3, [r3, #0]
   82d5e:	685b      	ldr	r3, [r3, #4]
   82d60:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82d64:	f8d9 300c 	ldr.w	r3, [r9, #12]
   82d68:	4798      	blx	r3
   82d6a:	4601      	mov	r1, r0
   82d6c:	4620      	mov	r0, r4
   82d6e:	4b0b      	ldr	r3, [pc, #44]	; (82d9c <udc_iface_disable+0x58>)
   82d70:	4798      	blx	r3
   82d72:	4680      	mov	r8, r0
   82d74:	2800      	cmp	r0, #0
   82d76:	d0ed      	beq.n	82d54 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82d78:	4b0a      	ldr	r3, [pc, #40]	; (82da4 <udc_iface_disable+0x60>)
   82d7a:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82d7c:	2605      	movs	r6, #5
   82d7e:	4d0a      	ldr	r5, [pc, #40]	; (82da8 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
   82d80:	4f0a      	ldr	r7, [pc, #40]	; (82dac <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82d82:	4631      	mov	r1, r6
   82d84:	4620      	mov	r0, r4
   82d86:	47a8      	blx	r5
			if (NULL == ep_desc) {
   82d88:	4604      	mov	r4, r0
   82d8a:	b110      	cbz	r0, 82d92 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
   82d8c:	7880      	ldrb	r0, [r0, #2]
   82d8e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82d90:	e7f7      	b.n	82d82 <udc_iface_disable+0x3e>
	udi_api->disable();
   82d92:	f8d9 3004 	ldr.w	r3, [r9, #4]
   82d96:	4798      	blx	r3
	return true;
   82d98:	e7dc      	b.n	82d54 <udc_iface_disable+0x10>
   82d9a:	bf00      	nop
   82d9c:	00082cd1 	.word	0x00082cd1
   82da0:	20001f60 	.word	0x20001f60
   82da4:	20001f64 	.word	0x20001f64
   82da8:	00082c71 	.word	0x00082c71
   82dac:	00085ab9 	.word	0x00085ab9

00082db0 <udc_iface_enable>:
{
   82db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82db4:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82db6:	4b10      	ldr	r3, [pc, #64]	; (82df8 <udc_iface_enable+0x48>)
   82db8:	4798      	blx	r3
   82dba:	4603      	mov	r3, r0
   82dbc:	b1c8      	cbz	r0, 82df2 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82dbe:	4b0f      	ldr	r3, [pc, #60]	; (82dfc <udc_iface_enable+0x4c>)
   82dc0:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82dc2:	2605      	movs	r6, #5
   82dc4:	4d0e      	ldr	r5, [pc, #56]	; (82e00 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82dc6:	4f0f      	ldr	r7, [pc, #60]	; (82e04 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82dc8:	4631      	mov	r1, r6
   82dca:	4620      	mov	r0, r4
   82dcc:	47a8      	blx	r5
		if (NULL == ep_desc)
   82dce:	4604      	mov	r4, r0
   82dd0:	b138      	cbz	r0, 82de2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82dd2:	8882      	ldrh	r2, [r0, #4]
   82dd4:	78c1      	ldrb	r1, [r0, #3]
   82dd6:	7880      	ldrb	r0, [r0, #2]
   82dd8:	47b8      	blx	r7
   82dda:	4603      	mov	r3, r0
   82ddc:	2800      	cmp	r0, #0
   82dde:	d1f3      	bne.n	82dc8 <udc_iface_enable+0x18>
   82de0:	e007      	b.n	82df2 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   82de2:	4b09      	ldr	r3, [pc, #36]	; (82e08 <udc_iface_enable+0x58>)
   82de4:	681b      	ldr	r3, [r3, #0]
   82de6:	685b      	ldr	r3, [r3, #4]
   82de8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   82dec:	681b      	ldr	r3, [r3, #0]
   82dee:	4798      	blx	r3
   82df0:	4603      	mov	r3, r0
}
   82df2:	4618      	mov	r0, r3
   82df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82df8:	00082cd1 	.word	0x00082cd1
   82dfc:	20001f64 	.word	0x20001f64
   82e00:	00082c71 	.word	0x00082c71
   82e04:	00085ded 	.word	0x00085ded
   82e08:	20001f60 	.word	0x20001f60

00082e0c <udc_get_interface_desc>:
}
   82e0c:	4b01      	ldr	r3, [pc, #4]	; (82e14 <udc_get_interface_desc+0x8>)
   82e0e:	6818      	ldr	r0, [r3, #0]
   82e10:	4770      	bx	lr
   82e12:	bf00      	nop
   82e14:	20001f64 	.word	0x20001f64

00082e18 <udc_start>:
{
   82e18:	b508      	push	{r3, lr}
	udd_enable();
   82e1a:	4b01      	ldr	r3, [pc, #4]	; (82e20 <udc_start+0x8>)
   82e1c:	4798      	blx	r3
   82e1e:	bd08      	pop	{r3, pc}
   82e20:	00085939 	.word	0x00085939

00082e24 <udc_reset>:
{
   82e24:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
   82e26:	4b0d      	ldr	r3, [pc, #52]	; (82e5c <udc_reset+0x38>)
   82e28:	781b      	ldrb	r3, [r3, #0]
   82e2a:	b183      	cbz	r3, 82e4e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e2c:	4b0c      	ldr	r3, [pc, #48]	; (82e60 <udc_reset+0x3c>)
   82e2e:	681b      	ldr	r3, [r3, #0]
   82e30:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82e32:	791b      	ldrb	r3, [r3, #4]
   82e34:	b15b      	cbz	r3, 82e4e <udc_reset+0x2a>
   82e36:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
   82e38:	4e0a      	ldr	r6, [pc, #40]	; (82e64 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e3a:	4d09      	ldr	r5, [pc, #36]	; (82e60 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   82e3c:	4620      	mov	r0, r4
   82e3e:	47b0      	blx	r6
				iface_num++) {
   82e40:	3401      	adds	r4, #1
   82e42:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e44:	682b      	ldr	r3, [r5, #0]
   82e46:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   82e48:	791b      	ldrb	r3, [r3, #4]
   82e4a:	42a3      	cmp	r3, r4
   82e4c:	d8f6      	bhi.n	82e3c <udc_reset+0x18>
	udc_num_configuration = 0;
   82e4e:	2300      	movs	r3, #0
   82e50:	4a02      	ldr	r2, [pc, #8]	; (82e5c <udc_reset+0x38>)
   82e52:	7013      	strb	r3, [r2, #0]
	udc_device_status =
   82e54:	4a04      	ldr	r2, [pc, #16]	; (82e68 <udc_reset+0x44>)
   82e56:	8013      	strh	r3, [r2, #0]
   82e58:	bd70      	pop	{r4, r5, r6, pc}
   82e5a:	bf00      	nop
   82e5c:	20001f5d 	.word	0x20001f5d
   82e60:	20001f60 	.word	0x20001f60
   82e64:	00082d45 	.word	0x00082d45
   82e68:	20001f58 	.word	0x20001f58

00082e6c <udc_stop>:
{
   82e6c:	b508      	push	{r3, lr}
	udd_disable();
   82e6e:	4b02      	ldr	r3, [pc, #8]	; (82e78 <udc_stop+0xc>)
   82e70:	4798      	blx	r3
	udc_reset();
   82e72:	4b02      	ldr	r3, [pc, #8]	; (82e7c <udc_stop+0x10>)
   82e74:	4798      	blx	r3
   82e76:	bd08      	pop	{r3, pc}
   82e78:	0008582d 	.word	0x0008582d
   82e7c:	00082e25 	.word	0x00082e25

00082e80 <udc_sof_notify>:
{
   82e80:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   82e82:	4b0d      	ldr	r3, [pc, #52]	; (82eb8 <udc_sof_notify+0x38>)
   82e84:	781b      	ldrb	r3, [r3, #0]
   82e86:	b1b3      	cbz	r3, 82eb6 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e88:	4b0c      	ldr	r3, [pc, #48]	; (82ebc <udc_sof_notify+0x3c>)
   82e8a:	681b      	ldr	r3, [r3, #0]
   82e8c:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82e8e:	7912      	ldrb	r2, [r2, #4]
   82e90:	b18a      	cbz	r2, 82eb6 <udc_sof_notify+0x36>
   82e92:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e94:	4d09      	ldr	r5, [pc, #36]	; (82ebc <udc_sof_notify+0x3c>)
   82e96:	e006      	b.n	82ea6 <udc_sof_notify+0x26>
				iface_num++) {
   82e98:	3401      	adds	r4, #1
   82e9a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82e9c:	682b      	ldr	r3, [r5, #0]
   82e9e:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   82ea0:	7912      	ldrb	r2, [r2, #4]
   82ea2:	42a2      	cmp	r2, r4
   82ea4:	d907      	bls.n	82eb6 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82ea6:	685b      	ldr	r3, [r3, #4]
   82ea8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   82eac:	691b      	ldr	r3, [r3, #16]
   82eae:	2b00      	cmp	r3, #0
   82eb0:	d0f2      	beq.n	82e98 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82eb2:	4798      	blx	r3
   82eb4:	e7f0      	b.n	82e98 <udc_sof_notify+0x18>
   82eb6:	bd38      	pop	{r3, r4, r5, pc}
   82eb8:	20001f5d 	.word	0x20001f5d
   82ebc:	20001f60 	.word	0x20001f60

00082ec0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   82ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   82ec2:	4b96      	ldr	r3, [pc, #600]	; (8311c <udc_process_setup+0x25c>)
   82ec4:	2200      	movs	r2, #0
   82ec6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   82ec8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82eca:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   82ecc:	881b      	ldrh	r3, [r3, #0]
   82ece:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
   82ed2:	d019      	beq.n	82f08 <udc_process_setup+0x48>
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   82ed4:	4b91      	ldr	r3, [pc, #580]	; (8311c <udc_process_setup+0x25c>)
   82ed6:	781b      	ldrb	r3, [r3, #0]
   82ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
   82edc:	d11a      	bne.n	82f14 <udc_process_setup+0x54>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82ede:	f013 0f60 	tst.w	r3, #96	; 0x60
   82ee2:	f000 8147 	beq.w	83174 <udc_process_setup+0x2b4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   82ee6:	4b8d      	ldr	r3, [pc, #564]	; (8311c <udc_process_setup+0x25c>)
   82ee8:	781b      	ldrb	r3, [r3, #0]
   82eea:	f003 031f 	and.w	r3, r3, #31
   82eee:	2b01      	cmp	r3, #1
   82ef0:	f240 81a0 	bls.w	83234 <udc_process_setup+0x374>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82ef4:	4b89      	ldr	r3, [pc, #548]	; (8311c <udc_process_setup+0x25c>)
   82ef6:	781b      	ldrb	r3, [r3, #0]
   82ef8:	f003 031f 	and.w	r3, r3, #31
   82efc:	2b02      	cmp	r3, #2
   82efe:	f000 829e 	beq.w	8343e <udc_process_setup+0x57e>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   82f02:	2300      	movs	r3, #0
#endif
}
   82f04:	4618      	mov	r0, r3
   82f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   82f08:	21aa      	movs	r1, #170	; 0xaa
   82f0a:	4885      	ldr	r0, [pc, #532]	; (83120 <udc_process_setup+0x260>)
   82f0c:	4b85      	ldr	r3, [pc, #532]	; (83124 <udc_process_setup+0x264>)
   82f0e:	4798      	blx	r3
		return true;
   82f10:	2301      	movs	r3, #1
   82f12:	e7f7      	b.n	82f04 <udc_process_setup+0x44>
		if (udd_g_ctrlreq.req.wLength == 0) {
   82f14:	4a81      	ldr	r2, [pc, #516]	; (8311c <udc_process_setup+0x25c>)
   82f16:	88d2      	ldrh	r2, [r2, #6]
   82f18:	2a00      	cmp	r2, #0
   82f1a:	f000 82b9 	beq.w	83490 <udc_process_setup+0x5d0>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82f1e:	f013 0f60 	tst.w	r3, #96	; 0x60
   82f22:	d1e0      	bne.n	82ee6 <udc_process_setup+0x26>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82f24:	f013 031f 	ands.w	r3, r3, #31
   82f28:	d107      	bne.n	82f3a <udc_process_setup+0x7a>
			switch (udd_g_ctrlreq.req.bRequest) {
   82f2a:	497c      	ldr	r1, [pc, #496]	; (8311c <udc_process_setup+0x25c>)
   82f2c:	7849      	ldrb	r1, [r1, #1]
   82f2e:	2906      	cmp	r1, #6
   82f30:	d017      	beq.n	82f62 <udc_process_setup+0xa2>
   82f32:	2908      	cmp	r1, #8
   82f34:	f000 80c0 	beq.w	830b8 <udc_process_setup+0x1f8>
   82f38:	b159      	cbz	r1, 82f52 <udc_process_setup+0x92>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82f3a:	2b01      	cmp	r3, #1
   82f3c:	f000 80c4 	beq.w	830c8 <udc_process_setup+0x208>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82f40:	2b02      	cmp	r3, #2
   82f42:	d1d0      	bne.n	82ee6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   82f44:	4b75      	ldr	r3, [pc, #468]	; (8311c <udc_process_setup+0x25c>)
   82f46:	785b      	ldrb	r3, [r3, #1]
   82f48:	2b00      	cmp	r3, #0
   82f4a:	f000 8105 	beq.w	83158 <udc_process_setup+0x298>
	return false;
   82f4e:	2300      	movs	r3, #0
   82f50:	e1ff      	b.n	83352 <udc_process_setup+0x492>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   82f52:	2a02      	cmp	r2, #2
   82f54:	f040 816e 	bne.w	83234 <udc_process_setup+0x374>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   82f58:	2102      	movs	r1, #2
   82f5a:	4873      	ldr	r0, [pc, #460]	; (83128 <udc_process_setup+0x268>)
   82f5c:	4b71      	ldr	r3, [pc, #452]	; (83124 <udc_process_setup+0x264>)
   82f5e:	4798      	blx	r3
   82f60:	e124      	b.n	831ac <udc_process_setup+0x2ec>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   82f62:	4b6e      	ldr	r3, [pc, #440]	; (8311c <udc_process_setup+0x25c>)
   82f64:	885a      	ldrh	r2, [r3, #2]
   82f66:	b2d4      	uxtb	r4, r2
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   82f68:	0a13      	lsrs	r3, r2, #8
   82f6a:	3b01      	subs	r3, #1
   82f6c:	2b0e      	cmp	r3, #14
   82f6e:	f200 825c 	bhi.w	8342a <udc_process_setup+0x56a>
   82f72:	e8df f013 	tbh	[pc, r3, lsl #1]
   82f76:	000f      	.short	0x000f
   82f78:	007b0023 	.word	0x007b0023
   82f7c:	025a025a 	.word	0x025a025a
   82f80:	00530045 	.word	0x00530045
   82f84:	025a025a 	.word	0x025a025a
   82f88:	025a025a 	.word	0x025a025a
   82f8c:	025a025a 	.word	0x025a025a
   82f90:	0076025a 	.word	0x0076025a
		if (!udd_is_high_speed()) {
   82f94:	4b65      	ldr	r3, [pc, #404]	; (8312c <udc_process_setup+0x26c>)
   82f96:	4798      	blx	r3
   82f98:	b928      	cbnz	r0, 82fa6 <udc_process_setup+0xe6>
				(uint8_t *) udc_config.confdev_hs,
   82f9a:	4b65      	ldr	r3, [pc, #404]	; (83130 <udc_process_setup+0x270>)
   82f9c:	6898      	ldr	r0, [r3, #8]
			udd_set_setup_payload(
   82f9e:	7801      	ldrb	r1, [r0, #0]
   82fa0:	4b60      	ldr	r3, [pc, #384]	; (83124 <udc_process_setup+0x264>)
   82fa2:	4798      	blx	r3
   82fa4:	e031      	b.n	8300a <udc_process_setup+0x14a>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82fa6:	4b62      	ldr	r3, [pc, #392]	; (83130 <udc_process_setup+0x270>)
   82fa8:	681a      	ldr	r2, [r3, #0]
   82faa:	2110      	movs	r1, #16
   82fac:	7091      	strb	r1, [r2, #2]
   82fae:	2102      	movs	r1, #2
   82fb0:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82fb2:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   82fb4:	7801      	ldrb	r1, [r0, #0]
   82fb6:	4b5b      	ldr	r3, [pc, #364]	; (83124 <udc_process_setup+0x264>)
   82fb8:	4798      	blx	r3
   82fba:	e026      	b.n	8300a <udc_process_setup+0x14a>
		if (udd_is_high_speed()) {
   82fbc:	4b5b      	ldr	r3, [pc, #364]	; (8312c <udc_process_setup+0x26c>)
   82fbe:	4798      	blx	r3
   82fc0:	b180      	cbz	r0, 82fe4 <udc_process_setup+0x124>
			if (conf_num >= udc_config.confdev_hs->
   82fc2:	4b5b      	ldr	r3, [pc, #364]	; (83130 <udc_process_setup+0x270>)
   82fc4:	689b      	ldr	r3, [r3, #8]
   82fc6:	7c5b      	ldrb	r3, [r3, #17]
   82fc8:	42a3      	cmp	r3, r4
   82fca:	d98c      	bls.n	82ee6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82fcc:	4b58      	ldr	r3, [pc, #352]	; (83130 <udc_process_setup+0x270>)
   82fce:	691b      	ldr	r3, [r3, #16]
   82fd0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82fd4:	8841      	ldrh	r1, [r0, #2]
   82fd6:	4b53      	ldr	r3, [pc, #332]	; (83124 <udc_process_setup+0x264>)
   82fd8:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82fda:	4b50      	ldr	r3, [pc, #320]	; (8311c <udc_process_setup+0x25c>)
   82fdc:	689b      	ldr	r3, [r3, #8]
   82fde:	2202      	movs	r2, #2
   82fe0:	705a      	strb	r2, [r3, #1]
   82fe2:	e012      	b.n	8300a <udc_process_setup+0x14a>
			if (conf_num >= udc_config.confdev_lsfs->
   82fe4:	4b52      	ldr	r3, [pc, #328]	; (83130 <udc_process_setup+0x270>)
   82fe6:	681b      	ldr	r3, [r3, #0]
   82fe8:	7c5b      	ldrb	r3, [r3, #17]
   82fea:	42a3      	cmp	r3, r4
   82fec:	f67f af7b 	bls.w	82ee6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82ff0:	4b4f      	ldr	r3, [pc, #316]	; (83130 <udc_process_setup+0x270>)
   82ff2:	685b      	ldr	r3, [r3, #4]
   82ff4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   82ff8:	8841      	ldrh	r1, [r0, #2]
   82ffa:	4b4a      	ldr	r3, [pc, #296]	; (83124 <udc_process_setup+0x264>)
   82ffc:	4798      	blx	r3
   82ffe:	e7ec      	b.n	82fda <udc_process_setup+0x11a>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83000:	4b4b      	ldr	r3, [pc, #300]	; (83130 <udc_process_setup+0x270>)
   83002:	68d8      	ldr	r0, [r3, #12]
   83004:	7801      	ldrb	r1, [r0, #0]
   83006:	4b47      	ldr	r3, [pc, #284]	; (83124 <udc_process_setup+0x264>)
   83008:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8300a:	4b44      	ldr	r3, [pc, #272]	; (8311c <udc_process_setup+0x25c>)
   8300c:	88da      	ldrh	r2, [r3, #6]
   8300e:	899b      	ldrh	r3, [r3, #12]
   83010:	4293      	cmp	r3, r2
   83012:	f240 80cb 	bls.w	831ac <udc_process_setup+0x2ec>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83016:	4b41      	ldr	r3, [pc, #260]	; (8311c <udc_process_setup+0x25c>)
   83018:	819a      	strh	r2, [r3, #12]
   8301a:	e0c7      	b.n	831ac <udc_process_setup+0x2ec>
		if (!udd_is_high_speed()) {
   8301c:	4b43      	ldr	r3, [pc, #268]	; (8312c <udc_process_setup+0x26c>)
   8301e:	4798      	blx	r3
   83020:	b988      	cbnz	r0, 83046 <udc_process_setup+0x186>
			if (conf_num >= udc_config.confdev_hs->
   83022:	4b43      	ldr	r3, [pc, #268]	; (83130 <udc_process_setup+0x270>)
   83024:	689b      	ldr	r3, [r3, #8]
   83026:	7c5b      	ldrb	r3, [r3, #17]
   83028:	42a3      	cmp	r3, r4
   8302a:	f67f af5c 	bls.w	82ee6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8302e:	4b40      	ldr	r3, [pc, #256]	; (83130 <udc_process_setup+0x270>)
   83030:	691b      	ldr	r3, [r3, #16]
   83032:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   83036:	8841      	ldrh	r1, [r0, #2]
   83038:	4b3a      	ldr	r3, [pc, #232]	; (83124 <udc_process_setup+0x264>)
   8303a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8303c:	4b37      	ldr	r3, [pc, #220]	; (8311c <udc_process_setup+0x25c>)
   8303e:	689b      	ldr	r3, [r3, #8]
   83040:	2207      	movs	r2, #7
   83042:	705a      	strb	r2, [r3, #1]
   83044:	e7e1      	b.n	8300a <udc_process_setup+0x14a>
			if (conf_num >= udc_config.confdev_lsfs->
   83046:	4b3a      	ldr	r3, [pc, #232]	; (83130 <udc_process_setup+0x270>)
   83048:	681b      	ldr	r3, [r3, #0]
   8304a:	7c5b      	ldrb	r3, [r3, #17]
   8304c:	42a3      	cmp	r3, r4
   8304e:	f67f af4a 	bls.w	82ee6 <udc_process_setup+0x26>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83052:	4b37      	ldr	r3, [pc, #220]	; (83130 <udc_process_setup+0x270>)
   83054:	685b      	ldr	r3, [r3, #4]
   83056:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			udd_set_setup_payload(
   8305a:	8841      	ldrh	r1, [r0, #2]
   8305c:	4b31      	ldr	r3, [pc, #196]	; (83124 <udc_process_setup+0x264>)
   8305e:	4798      	blx	r3
   83060:	e7ec      	b.n	8303c <udc_process_setup+0x17c>
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   83062:	2121      	movs	r1, #33	; 0x21
   83064:	4833      	ldr	r0, [pc, #204]	; (83134 <udc_process_setup+0x274>)
   83066:	4b2f      	ldr	r3, [pc, #188]	; (83124 <udc_process_setup+0x264>)
   83068:	4798      	blx	r3
   8306a:	e7ce      	b.n	8300a <udc_process_setup+0x14a>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8306c:	b2d2      	uxtb	r2, r2
   8306e:	2a03      	cmp	r2, #3
   83070:	f63f af39 	bhi.w	82ee6 <udc_process_setup+0x26>
   83074:	e8df f012 	tbh	[pc, r2, lsl #1]
   83078:	000c0007 	.word	0x000c0007
   8307c:	0004020e 	.word	0x0004020e
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83080:	2420      	movs	r4, #32
		str = udc_get_string_serial_name();
   83082:	4a2d      	ldr	r2, [pc, #180]	; (83138 <udc_process_setup+0x278>)
   83084:	e006      	b.n	83094 <udc_process_setup+0x1d4>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83086:	2104      	movs	r1, #4
   83088:	482c      	ldr	r0, [pc, #176]	; (8313c <udc_process_setup+0x27c>)
   8308a:	4b26      	ldr	r3, [pc, #152]	; (83124 <udc_process_setup+0x264>)
   8308c:	4798      	blx	r3
   8308e:	e7bc      	b.n	8300a <udc_process_setup+0x14a>
		str = udc_string_manufacturer_name;
   83090:	4a2b      	ldr	r2, [pc, #172]	; (83140 <udc_process_setup+0x280>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83092:	2415      	movs	r4, #21
   83094:	3a01      	subs	r2, #1
   83096:	492b      	ldr	r1, [pc, #172]	; (83144 <udc_process_setup+0x284>)
   83098:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8309a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   8309e:	f821 0f02 	strh.w	r0, [r1, #2]!
		for(i = 0; i < str_length; i++) {
   830a2:	3301      	adds	r3, #1
   830a4:	b2db      	uxtb	r3, r3
   830a6:	429c      	cmp	r4, r3
   830a8:	d8f7      	bhi.n	8309a <udc_process_setup+0x1da>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   830aa:	0061      	lsls	r1, r4, #1
   830ac:	3102      	adds	r1, #2
   830ae:	4825      	ldr	r0, [pc, #148]	; (83144 <udc_process_setup+0x284>)
   830b0:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
   830b2:	4b1c      	ldr	r3, [pc, #112]	; (83124 <udc_process_setup+0x264>)
   830b4:	4798      	blx	r3
   830b6:	e7a8      	b.n	8300a <udc_process_setup+0x14a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   830b8:	2a01      	cmp	r2, #1
   830ba:	f040 80bb 	bne.w	83234 <udc_process_setup+0x374>
	udd_set_setup_payload(&udc_num_configuration,1);
   830be:	2101      	movs	r1, #1
   830c0:	4821      	ldr	r0, [pc, #132]	; (83148 <udc_process_setup+0x288>)
   830c2:	4b18      	ldr	r3, [pc, #96]	; (83124 <udc_process_setup+0x264>)
   830c4:	4798      	blx	r3
   830c6:	e071      	b.n	831ac <udc_process_setup+0x2ec>
			switch (udd_g_ctrlreq.req.bRequest) {
   830c8:	4914      	ldr	r1, [pc, #80]	; (8311c <udc_process_setup+0x25c>)
   830ca:	7849      	ldrb	r1, [r1, #1]
   830cc:	290a      	cmp	r1, #10
   830ce:	f47f af37 	bne.w	82f40 <udc_process_setup+0x80>
	if (udd_g_ctrlreq.req.wLength != 1) {
   830d2:	2a01      	cmp	r2, #1
   830d4:	f040 80ae 	bne.w	83234 <udc_process_setup+0x374>
	if (!udc_num_configuration) {
   830d8:	4b1b      	ldr	r3, [pc, #108]	; (83148 <udc_process_setup+0x288>)
   830da:	781b      	ldrb	r3, [r3, #0]
   830dc:	2b00      	cmp	r3, #0
   830de:	f000 80a9 	beq.w	83234 <udc_process_setup+0x374>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   830e2:	4b0e      	ldr	r3, [pc, #56]	; (8311c <udc_process_setup+0x25c>)
   830e4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   830e6:	4b19      	ldr	r3, [pc, #100]	; (8314c <udc_process_setup+0x28c>)
   830e8:	681d      	ldr	r5, [r3, #0]
   830ea:	682b      	ldr	r3, [r5, #0]
   830ec:	791b      	ldrb	r3, [r3, #4]
   830ee:	42a3      	cmp	r3, r4
   830f0:	f240 80a0 	bls.w	83234 <udc_process_setup+0x374>
	if (!udc_update_iface_desc(iface_num, 0)) {
   830f4:	2100      	movs	r1, #0
   830f6:	4620      	mov	r0, r4
   830f8:	4b15      	ldr	r3, [pc, #84]	; (83150 <udc_process_setup+0x290>)
   830fa:	4798      	blx	r3
   830fc:	2800      	cmp	r0, #0
   830fe:	f43f aef2 	beq.w	82ee6 <udc_process_setup+0x26>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83102:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   83104:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   83108:	68db      	ldr	r3, [r3, #12]
   8310a:	4798      	blx	r3
   8310c:	4b11      	ldr	r3, [pc, #68]	; (83154 <udc_process_setup+0x294>)
   8310e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   83110:	2101      	movs	r1, #1
   83112:	4618      	mov	r0, r3
   83114:	4b03      	ldr	r3, [pc, #12]	; (83124 <udc_process_setup+0x264>)
   83116:	4798      	blx	r3
   83118:	e048      	b.n	831ac <udc_process_setup+0x2ec>
   8311a:	bf00      	nop
   8311c:	200027ac 	.word	0x200027ac
   83120:	2000091c 	.word	0x2000091c
   83124:	00085aad 	.word	0x00085aad
   83128:	20001f58 	.word	0x20001f58
   8312c:	00085a45 	.word	0x00085a45
   83130:	200001dc 	.word	0x200001dc
   83134:	200008f8 	.word	0x200008f8
   83138:	20000a88 	.word	0x20000a88
   8313c:	20000a0c 	.word	0x20000a0c
   83140:	20000a10 	.word	0x20000a10
   83144:	200009c8 	.word	0x200009c8
   83148:	20001f5d 	.word	0x20001f5d
   8314c:	20001f60 	.word	0x20001f60
   83150:	00082cd1 	.word	0x00082cd1
   83154:	20001f5c 	.word	0x20001f5c
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83158:	2a02      	cmp	r2, #2
   8315a:	f47f aecb 	bne.w	82ef4 <udc_process_setup+0x34>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8315e:	4b95      	ldr	r3, [pc, #596]	; (833b4 <udc_process_setup+0x4f4>)
   83160:	7918      	ldrb	r0, [r3, #4]
   83162:	4b95      	ldr	r3, [pc, #596]	; (833b8 <udc_process_setup+0x4f8>)
   83164:	4798      	blx	r3
   83166:	4b95      	ldr	r3, [pc, #596]	; (833bc <udc_process_setup+0x4fc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83168:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8316a:	2102      	movs	r1, #2
   8316c:	4618      	mov	r0, r3
   8316e:	4b94      	ldr	r3, [pc, #592]	; (833c0 <udc_process_setup+0x500>)
   83170:	4798      	blx	r3
   83172:	e01b      	b.n	831ac <udc_process_setup+0x2ec>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83174:	f013 031f 	ands.w	r3, r3, #31
   83178:	f040 80df 	bne.w	8333a <udc_process_setup+0x47a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8317c:	4a8d      	ldr	r2, [pc, #564]	; (833b4 <udc_process_setup+0x4f4>)
   8317e:	7852      	ldrb	r2, [r2, #1]
   83180:	3a01      	subs	r2, #1
   83182:	2a08      	cmp	r2, #8
   83184:	f200 80d9 	bhi.w	8333a <udc_process_setup+0x47a>
   83188:	e8df f012 	tbh	[pc, r2, lsl #1]
   8318c:	00d70012 	.word	0x00d70012
   83190:	00d70020 	.word	0x00d70020
   83194:	00d70009 	.word	0x00d70009
   83198:	00d700d7 	.word	0x00d700d7
   8319c:	0050      	.short	0x0050
	if (udd_g_ctrlreq.req.wLength) {
   8319e:	4b85      	ldr	r3, [pc, #532]	; (833b4 <udc_process_setup+0x4f4>)
   831a0:	88db      	ldrh	r3, [r3, #6]
   831a2:	2b00      	cmp	r3, #0
   831a4:	d146      	bne.n	83234 <udc_process_setup+0x374>
	udd_g_ctrlreq.callback = udc_valid_address;
   831a6:	4a87      	ldr	r2, [pc, #540]	; (833c4 <udc_process_setup+0x504>)
   831a8:	4b82      	ldr	r3, [pc, #520]	; (833b4 <udc_process_setup+0x4f4>)
   831aa:	611a      	str	r2, [r3, #16]
			return true;
   831ac:	2301      	movs	r3, #1
   831ae:	e6a9      	b.n	82f04 <udc_process_setup+0x44>
	if (udd_g_ctrlreq.req.wLength) {
   831b0:	4b80      	ldr	r3, [pc, #512]	; (833b4 <udc_process_setup+0x4f4>)
   831b2:	88db      	ldrh	r3, [r3, #6]
   831b4:	2b00      	cmp	r3, #0
   831b6:	d13d      	bne.n	83234 <udc_process_setup+0x374>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   831b8:	4b7e      	ldr	r3, [pc, #504]	; (833b4 <udc_process_setup+0x4f4>)
   831ba:	885b      	ldrh	r3, [r3, #2]
   831bc:	2b01      	cmp	r3, #1
   831be:	d139      	bne.n	83234 <udc_process_setup+0x374>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   831c0:	4a81      	ldr	r2, [pc, #516]	; (833c8 <udc_process_setup+0x508>)
   831c2:	8813      	ldrh	r3, [r2, #0]
   831c4:	f023 0302 	bic.w	r3, r3, #2
   831c8:	8013      	strh	r3, [r2, #0]
   831ca:	e7ef      	b.n	831ac <udc_process_setup+0x2ec>
	if (udd_g_ctrlreq.req.wLength) {
   831cc:	4b79      	ldr	r3, [pc, #484]	; (833b4 <udc_process_setup+0x4f4>)
   831ce:	88db      	ldrh	r3, [r3, #6]
   831d0:	2b00      	cmp	r3, #0
   831d2:	d12f      	bne.n	83234 <udc_process_setup+0x374>
	switch (udd_g_ctrlreq.req.wValue) {
   831d4:	4b77      	ldr	r3, [pc, #476]	; (833b4 <udc_process_setup+0x4f4>)
   831d6:	885b      	ldrh	r3, [r3, #2]
   831d8:	2b02      	cmp	r3, #2
   831da:	f040 8128 	bne.w	8342e <udc_process_setup+0x56e>
		if (!udd_is_high_speed()) {
   831de:	4b7b      	ldr	r3, [pc, #492]	; (833cc <udc_process_setup+0x50c>)
   831e0:	4798      	blx	r3
   831e2:	2800      	cmp	r0, #0
   831e4:	f43f ae7f 	beq.w	82ee6 <udc_process_setup+0x26>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   831e8:	4b72      	ldr	r3, [pc, #456]	; (833b4 <udc_process_setup+0x4f4>)
   831ea:	791b      	ldrb	r3, [r3, #4]
   831ec:	2b00      	cmp	r3, #0
   831ee:	f47f ae7a 	bne.w	82ee6 <udc_process_setup+0x26>
		udc_reset();
   831f2:	4b77      	ldr	r3, [pc, #476]	; (833d0 <udc_process_setup+0x510>)
   831f4:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   831f6:	4b6f      	ldr	r3, [pc, #444]	; (833b4 <udc_process_setup+0x4f4>)
   831f8:	889b      	ldrh	r3, [r3, #4]
   831fa:	0a1b      	lsrs	r3, r3, #8
   831fc:	3b01      	subs	r3, #1
   831fe:	2b03      	cmp	r3, #3
   83200:	f200 8117 	bhi.w	83432 <udc_process_setup+0x572>
   83204:	e8df f003 	tbb	[pc, r3]
   83208:	0e0a0602 	.word	0x0e0a0602
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8320c:	4a71      	ldr	r2, [pc, #452]	; (833d4 <udc_process_setup+0x514>)
   8320e:	4b69      	ldr	r3, [pc, #420]	; (833b4 <udc_process_setup+0x4f4>)
   83210:	611a      	str	r2, [r3, #16]
   83212:	e7cb      	b.n	831ac <udc_process_setup+0x2ec>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83214:	4a70      	ldr	r2, [pc, #448]	; (833d8 <udc_process_setup+0x518>)
   83216:	4b67      	ldr	r3, [pc, #412]	; (833b4 <udc_process_setup+0x4f4>)
   83218:	611a      	str	r2, [r3, #16]
   8321a:	e7c7      	b.n	831ac <udc_process_setup+0x2ec>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8321c:	4a6f      	ldr	r2, [pc, #444]	; (833dc <udc_process_setup+0x51c>)
   8321e:	4b65      	ldr	r3, [pc, #404]	; (833b4 <udc_process_setup+0x4f4>)
   83220:	611a      	str	r2, [r3, #16]
   83222:	e7c3      	b.n	831ac <udc_process_setup+0x2ec>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83224:	4a6e      	ldr	r2, [pc, #440]	; (833e0 <udc_process_setup+0x520>)
   83226:	4b63      	ldr	r3, [pc, #396]	; (833b4 <udc_process_setup+0x4f4>)
   83228:	611a      	str	r2, [r3, #16]
   8322a:	e7bf      	b.n	831ac <udc_process_setup+0x2ec>
	if (udd_g_ctrlreq.req.wLength) {
   8322c:	4b61      	ldr	r3, [pc, #388]	; (833b4 <udc_process_setup+0x4f4>)
   8322e:	88db      	ldrh	r3, [r3, #6]
   83230:	2b00      	cmp	r3, #0
   83232:	d02c      	beq.n	8328e <udc_process_setup+0x3ce>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   83234:	4b5f      	ldr	r3, [pc, #380]	; (833b4 <udc_process_setup+0x4f4>)
   83236:	889b      	ldrh	r3, [r3, #4]
   83238:	2b02      	cmp	r3, #2
   8323a:	f000 80fc 	beq.w	83436 <udc_process_setup+0x576>
	if (0 == udc_num_configuration) {
   8323e:	4b69      	ldr	r3, [pc, #420]	; (833e4 <udc_process_setup+0x524>)
   83240:	781b      	ldrb	r3, [r3, #0]
   83242:	2b00      	cmp	r3, #0
   83244:	f43f ae56 	beq.w	82ef4 <udc_process_setup+0x34>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83248:	4b5a      	ldr	r3, [pc, #360]	; (833b4 <udc_process_setup+0x4f4>)
   8324a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8324c:	4b66      	ldr	r3, [pc, #408]	; (833e8 <udc_process_setup+0x528>)
   8324e:	681d      	ldr	r5, [r3, #0]
   83250:	682b      	ldr	r3, [r5, #0]
   83252:	791b      	ldrb	r3, [r3, #4]
   83254:	42a3      	cmp	r3, r4
   83256:	f67f ae4d 	bls.w	82ef4 <udc_process_setup+0x34>
	if (!udc_update_iface_desc(iface_num, 0)) {
   8325a:	2100      	movs	r1, #0
   8325c:	4620      	mov	r0, r4
   8325e:	4b63      	ldr	r3, [pc, #396]	; (833ec <udc_process_setup+0x52c>)
   83260:	4798      	blx	r3
   83262:	2800      	cmp	r0, #0
   83264:	f43f ae46 	beq.w	82ef4 <udc_process_setup+0x34>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83268:	686b      	ldr	r3, [r5, #4]
   8326a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8326e:	68eb      	ldr	r3, [r5, #12]
   83270:	4798      	blx	r3
   83272:	4601      	mov	r1, r0
   83274:	4620      	mov	r0, r4
   83276:	4b5d      	ldr	r3, [pc, #372]	; (833ec <udc_process_setup+0x52c>)
   83278:	4798      	blx	r3
   8327a:	2800      	cmp	r0, #0
   8327c:	f43f ae3a 	beq.w	82ef4 <udc_process_setup+0x34>
	return udi_api->setup();
   83280:	68ab      	ldr	r3, [r5, #8]
   83282:	4798      	blx	r3
		if (udc_req_iface()) {
   83284:	4603      	mov	r3, r0
   83286:	2800      	cmp	r0, #0
   83288:	f47f ae3c 	bne.w	82f04 <udc_process_setup+0x44>
   8328c:	e632      	b.n	82ef4 <udc_process_setup+0x34>
	if (!udd_getaddress()) {
   8328e:	4b58      	ldr	r3, [pc, #352]	; (833f0 <udc_process_setup+0x530>)
   83290:	4798      	blx	r3
   83292:	2800      	cmp	r0, #0
   83294:	f43f ae27 	beq.w	82ee6 <udc_process_setup+0x26>
	if (udd_is_high_speed()) {
   83298:	4b4c      	ldr	r3, [pc, #304]	; (833cc <udc_process_setup+0x50c>)
   8329a:	4798      	blx	r3
   8329c:	2800      	cmp	r0, #0
   8329e:	d038      	beq.n	83312 <udc_process_setup+0x452>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   832a0:	4b44      	ldr	r3, [pc, #272]	; (833b4 <udc_process_setup+0x4f4>)
   832a2:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_hs->bNumConfigurations) {
   832a4:	4b53      	ldr	r3, [pc, #332]	; (833f4 <udc_process_setup+0x534>)
   832a6:	689b      	ldr	r3, [r3, #8]
   832a8:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   832aa:	429a      	cmp	r2, r3
   832ac:	f73f ae1b 	bgt.w	82ee6 <udc_process_setup+0x26>
	udc_reset();
   832b0:	4b47      	ldr	r3, [pc, #284]	; (833d0 <udc_process_setup+0x510>)
   832b2:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   832b4:	4b3f      	ldr	r3, [pc, #252]	; (833b4 <udc_process_setup+0x4f4>)
   832b6:	789b      	ldrb	r3, [r3, #2]
   832b8:	4a4a      	ldr	r2, [pc, #296]	; (833e4 <udc_process_setup+0x524>)
   832ba:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   832bc:	2b00      	cmp	r3, #0
   832be:	f43f af75 	beq.w	831ac <udc_process_setup+0x2ec>
	if (udd_is_high_speed()) {
   832c2:	4b42      	ldr	r3, [pc, #264]	; (833cc <udc_process_setup+0x50c>)
   832c4:	4798      	blx	r3
   832c6:	2800      	cmp	r0, #0
   832c8:	d02b      	beq.n	83322 <udc_process_setup+0x462>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   832ca:	4b46      	ldr	r3, [pc, #280]	; (833e4 <udc_process_setup+0x524>)
   832cc:	781b      	ldrb	r3, [r3, #0]
   832ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   832d2:	3b01      	subs	r3, #1
   832d4:	4a47      	ldr	r2, [pc, #284]	; (833f4 <udc_process_setup+0x534>)
   832d6:	6912      	ldr	r2, [r2, #16]
   832d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   832dc:	4a42      	ldr	r2, [pc, #264]	; (833e8 <udc_process_setup+0x528>)
   832de:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832e0:	4b41      	ldr	r3, [pc, #260]	; (833e8 <udc_process_setup+0x528>)
   832e2:	681b      	ldr	r3, [r3, #0]
   832e4:	681b      	ldr	r3, [r3, #0]
   832e6:	791b      	ldrb	r3, [r3, #4]
   832e8:	2b00      	cmp	r3, #0
   832ea:	f43f af5f 	beq.w	831ac <udc_process_setup+0x2ec>
   832ee:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
   832f0:	4627      	mov	r7, r4
   832f2:	4e41      	ldr	r6, [pc, #260]	; (833f8 <udc_process_setup+0x538>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832f4:	4d3c      	ldr	r5, [pc, #240]	; (833e8 <udc_process_setup+0x528>)
		if (!udc_iface_enable(iface_num, 0)) {
   832f6:	4639      	mov	r1, r7
   832f8:	4620      	mov	r0, r4
   832fa:	47b0      	blx	r6
   832fc:	2800      	cmp	r0, #0
   832fe:	f43f adf2 	beq.w	82ee6 <udc_process_setup+0x26>
			iface_num++) {
   83302:	3401      	adds	r4, #1
   83304:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83306:	682b      	ldr	r3, [r5, #0]
   83308:	681b      	ldr	r3, [r3, #0]
   8330a:	791b      	ldrb	r3, [r3, #4]
   8330c:	42a3      	cmp	r3, r4
   8330e:	d8f2      	bhi.n	832f6 <udc_process_setup+0x436>
   83310:	e74c      	b.n	831ac <udc_process_setup+0x2ec>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83312:	4b28      	ldr	r3, [pc, #160]	; (833b4 <udc_process_setup+0x4f4>)
   83314:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   83316:	4b37      	ldr	r3, [pc, #220]	; (833f4 <udc_process_setup+0x534>)
   83318:	681b      	ldr	r3, [r3, #0]
   8331a:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8331c:	429a      	cmp	r2, r3
   8331e:	ddc7      	ble.n	832b0 <udc_process_setup+0x3f0>
   83320:	e5e1      	b.n	82ee6 <udc_process_setup+0x26>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83322:	4b30      	ldr	r3, [pc, #192]	; (833e4 <udc_process_setup+0x524>)
   83324:	781b      	ldrb	r3, [r3, #0]
   83326:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8332a:	3b01      	subs	r3, #1
   8332c:	4a31      	ldr	r2, [pc, #196]	; (833f4 <udc_process_setup+0x534>)
   8332e:	6852      	ldr	r2, [r2, #4]
   83330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   83334:	4a2c      	ldr	r2, [pc, #176]	; (833e8 <udc_process_setup+0x528>)
   83336:	6013      	str	r3, [r2, #0]
   83338:	e7d2      	b.n	832e0 <udc_process_setup+0x420>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8333a:	2b01      	cmp	r3, #1
   8333c:	d00d      	beq.n	8335a <udc_process_setup+0x49a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8333e:	2b02      	cmp	r3, #2
   83340:	f47f add1 	bne.w	82ee6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   83344:	4b1b      	ldr	r3, [pc, #108]	; (833b4 <udc_process_setup+0x4f4>)
   83346:	785b      	ldrb	r3, [r3, #1]
   83348:	2b01      	cmp	r3, #1
   8334a:	d023      	beq.n	83394 <udc_process_setup+0x4d4>
   8334c:	2b03      	cmp	r3, #3
   8334e:	d059      	beq.n	83404 <udc_process_setup+0x544>
	return false;
   83350:	2300      	movs	r3, #0
		if (udc_reqstd()) {
   83352:	2b00      	cmp	r3, #0
   83354:	f47f add6 	bne.w	82f04 <udc_process_setup+0x44>
   83358:	e5c5      	b.n	82ee6 <udc_process_setup+0x26>
			switch (udd_g_ctrlreq.req.bRequest) {
   8335a:	4a16      	ldr	r2, [pc, #88]	; (833b4 <udc_process_setup+0x4f4>)
   8335c:	7852      	ldrb	r2, [r2, #1]
   8335e:	2a0b      	cmp	r2, #11
   83360:	d1ed      	bne.n	8333e <udc_process_setup+0x47e>
	if (udd_g_ctrlreq.req.wLength) {
   83362:	4b14      	ldr	r3, [pc, #80]	; (833b4 <udc_process_setup+0x4f4>)
   83364:	88db      	ldrh	r3, [r3, #6]
   83366:	2b00      	cmp	r3, #0
   83368:	f47f af64 	bne.w	83234 <udc_process_setup+0x374>
	if (!udc_num_configuration) {
   8336c:	4b1d      	ldr	r3, [pc, #116]	; (833e4 <udc_process_setup+0x524>)
   8336e:	781b      	ldrb	r3, [r3, #0]
   83370:	2b00      	cmp	r3, #0
   83372:	f43f af5f 	beq.w	83234 <udc_process_setup+0x374>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83376:	4b0f      	ldr	r3, [pc, #60]	; (833b4 <udc_process_setup+0x4f4>)
   83378:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8337a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
   8337c:	4620      	mov	r0, r4
   8337e:	4b1f      	ldr	r3, [pc, #124]	; (833fc <udc_process_setup+0x53c>)
   83380:	4798      	blx	r3
   83382:	2800      	cmp	r0, #0
   83384:	f43f adaf 	beq.w	82ee6 <udc_process_setup+0x26>
	return udc_iface_enable(iface_num, setting_num);
   83388:	b2e9      	uxtb	r1, r5
   8338a:	4620      	mov	r0, r4
   8338c:	4b1a      	ldr	r3, [pc, #104]	; (833f8 <udc_process_setup+0x538>)
   8338e:	4798      	blx	r3
   83390:	4603      	mov	r3, r0
   83392:	e7de      	b.n	83352 <udc_process_setup+0x492>
	if (udd_g_ctrlreq.req.wLength) {
   83394:	4b07      	ldr	r3, [pc, #28]	; (833b4 <udc_process_setup+0x4f4>)
   83396:	88db      	ldrh	r3, [r3, #6]
   83398:	2b00      	cmp	r3, #0
   8339a:	f47f adab 	bne.w	82ef4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8339e:	4b05      	ldr	r3, [pc, #20]	; (833b4 <udc_process_setup+0x4f4>)
   833a0:	885b      	ldrh	r3, [r3, #2]
   833a2:	2b00      	cmp	r3, #0
   833a4:	f47f ada6 	bne.w	82ef4 <udc_process_setup+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   833a8:	4b02      	ldr	r3, [pc, #8]	; (833b4 <udc_process_setup+0x4f4>)
   833aa:	7918      	ldrb	r0, [r3, #4]
   833ac:	4b14      	ldr	r3, [pc, #80]	; (83400 <udc_process_setup+0x540>)
   833ae:	4798      	blx	r3
   833b0:	4603      	mov	r3, r0
   833b2:	e7ce      	b.n	83352 <udc_process_setup+0x492>
   833b4:	200027ac 	.word	0x200027ac
   833b8:	00085b0d 	.word	0x00085b0d
   833bc:	20001f5a 	.word	0x20001f5a
   833c0:	00085aad 	.word	0x00085aad
   833c4:	00082cb9 	.word	0x00082cb9
   833c8:	20001f58 	.word	0x20001f58
   833cc:	00085a45 	.word	0x00085a45
   833d0:	00082e25 	.word	0x00082e25
   833d4:	000860d9 	.word	0x000860d9
   833d8:	000860fd 	.word	0x000860fd
   833dc:	00086121 	.word	0x00086121
   833e0:	00086139 	.word	0x00086139
   833e4:	20001f5d 	.word	0x20001f5d
   833e8:	20001f60 	.word	0x20001f60
   833ec:	00082cd1 	.word	0x00082cd1
   833f0:	00085a7d 	.word	0x00085a7d
   833f4:	200001dc 	.word	0x200001dc
   833f8:	00082db1 	.word	0x00082db1
   833fc:	00082d45 	.word	0x00082d45
   83400:	00085c09 	.word	0x00085c09
	if (udd_g_ctrlreq.req.wLength) {
   83404:	4b25      	ldr	r3, [pc, #148]	; (8349c <udc_process_setup+0x5dc>)
   83406:	88db      	ldrh	r3, [r3, #6]
   83408:	2b00      	cmp	r3, #0
   8340a:	f47f ad73 	bne.w	82ef4 <udc_process_setup+0x34>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8340e:	4b23      	ldr	r3, [pc, #140]	; (8349c <udc_process_setup+0x5dc>)
   83410:	885b      	ldrh	r3, [r3, #2]
   83412:	2b00      	cmp	r3, #0
   83414:	f47f ad6e 	bne.w	82ef4 <udc_process_setup+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83418:	4c20      	ldr	r4, [pc, #128]	; (8349c <udc_process_setup+0x5dc>)
   8341a:	7920      	ldrb	r0, [r4, #4]
   8341c:	4b20      	ldr	r3, [pc, #128]	; (834a0 <udc_process_setup+0x5e0>)
   8341e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83420:	7920      	ldrb	r0, [r4, #4]
   83422:	4b20      	ldr	r3, [pc, #128]	; (834a4 <udc_process_setup+0x5e4>)
   83424:	4798      	blx	r3
   83426:	4603      	mov	r3, r0
   83428:	e793      	b.n	83352 <udc_process_setup+0x492>
		return false;
   8342a:	2300      	movs	r3, #0
   8342c:	e791      	b.n	83352 <udc_process_setup+0x492>
		return false;
   8342e:	2300      	movs	r3, #0
   83430:	e78f      	b.n	83352 <udc_process_setup+0x492>
	return false;
   83432:	2300      	movs	r3, #0
   83434:	e78d      	b.n	83352 <udc_process_setup+0x492>
			udd_g_ctrlreq.req.wIndex = 1;
   83436:	2201      	movs	r2, #1
   83438:	4b18      	ldr	r3, [pc, #96]	; (8349c <udc_process_setup+0x5dc>)
   8343a:	809a      	strh	r2, [r3, #4]
   8343c:	e6ff      	b.n	8323e <udc_process_setup+0x37e>
	if (0 == udc_num_configuration) {
   8343e:	4b1a      	ldr	r3, [pc, #104]	; (834a8 <udc_process_setup+0x5e8>)
   83440:	781b      	ldrb	r3, [r3, #0]
   83442:	b30b      	cbz	r3, 83488 <udc_process_setup+0x5c8>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83444:	4b19      	ldr	r3, [pc, #100]	; (834ac <udc_process_setup+0x5ec>)
   83446:	681a      	ldr	r2, [r3, #0]
   83448:	6813      	ldr	r3, [r2, #0]
   8344a:	791b      	ldrb	r3, [r3, #4]
   8344c:	b1f3      	cbz	r3, 8348c <udc_process_setup+0x5cc>
   8344e:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83450:	4e17      	ldr	r6, [pc, #92]	; (834b0 <udc_process_setup+0x5f0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83452:	4f16      	ldr	r7, [pc, #88]	; (834ac <udc_process_setup+0x5ec>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83454:	6853      	ldr	r3, [r2, #4]
   83456:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8345a:	68eb      	ldr	r3, [r5, #12]
   8345c:	4798      	blx	r3
   8345e:	4601      	mov	r1, r0
   83460:	4620      	mov	r0, r4
   83462:	47b0      	blx	r6
   83464:	4603      	mov	r3, r0
   83466:	2800      	cmp	r0, #0
   83468:	f43f ad4c 	beq.w	82f04 <udc_process_setup+0x44>
		if (udi_api->setup()) {
   8346c:	68ab      	ldr	r3, [r5, #8]
   8346e:	4798      	blx	r3
   83470:	4603      	mov	r3, r0
   83472:	2800      	cmp	r0, #0
   83474:	f47f ad46 	bne.w	82f04 <udc_process_setup+0x44>
			iface_num++) {
   83478:	3401      	adds	r4, #1
   8347a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8347c:	683a      	ldr	r2, [r7, #0]
   8347e:	6811      	ldr	r1, [r2, #0]
   83480:	7909      	ldrb	r1, [r1, #4]
   83482:	42a1      	cmp	r1, r4
   83484:	d8e6      	bhi.n	83454 <udc_process_setup+0x594>
   83486:	e53d      	b.n	82f04 <udc_process_setup+0x44>
		return false; // The device is not is configured state yet
   83488:	2300      	movs	r3, #0
   8348a:	e53b      	b.n	82f04 <udc_process_setup+0x44>
	return false;
   8348c:	2300      	movs	r3, #0
   8348e:	e539      	b.n	82f04 <udc_process_setup+0x44>
			return false; // Error from USB host
   83490:	2300      	movs	r3, #0
   83492:	e537      	b.n	82f04 <udc_process_setup+0x44>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83494:	2412      	movs	r4, #18
		str = udc_string_product_name;
   83496:	4a07      	ldr	r2, [pc, #28]	; (834b4 <udc_process_setup+0x5f4>)
   83498:	e5fc      	b.n	83094 <udc_process_setup+0x1d4>
   8349a:	bf00      	nop
   8349c:	200027ac 	.word	0x200027ac
   834a0:	00086075 	.word	0x00086075
   834a4:	00085b41 	.word	0x00085b41
   834a8:	20001f5d 	.word	0x20001f5d
   834ac:	20001f60 	.word	0x20001f60
   834b0:	00082cd1 	.word	0x00082cd1
   834b4:	20000a28 	.word	0x20000a28

000834b8 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   834b8:	b510      	push	{r4, lr}
   834ba:	4604      	mov	r4, r0
  int ret = 0;
  cpu_irq_enter_critical();
   834bc:	4b06      	ldr	r3, [pc, #24]	; (834d8 <FPGA_setlock+0x20>)
   834be:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   834c0:	4b06      	ldr	r3, [pc, #24]	; (834dc <FPGA_setlock+0x24>)
   834c2:	781b      	ldrb	r3, [r3, #0]
   834c4:	b933      	cbnz	r3, 834d4 <FPGA_setlock+0x1c>
  {
    ret = 1;
    _fpga_locked = lockstatus;
   834c6:	4b05      	ldr	r3, [pc, #20]	; (834dc <FPGA_setlock+0x24>)
   834c8:	701c      	strb	r4, [r3, #0]
    ret = 1;
   834ca:	2401      	movs	r4, #1
  }
  cpu_irq_leave_critical();
   834cc:	4b04      	ldr	r3, [pc, #16]	; (834e0 <FPGA_setlock+0x28>)
   834ce:	4798      	blx	r3
  return ret;
}
   834d0:	4620      	mov	r0, r4
   834d2:	bd10      	pop	{r4, pc}
  int ret = 0;
   834d4:	2400      	movs	r4, #0
   834d6:	e7f9      	b.n	834cc <FPGA_setlock+0x14>
   834d8:	00084599 	.word	0x00084599
   834dc:	20001f68 	.word	0x20001f68
   834e0:	000845d5 	.word	0x000845d5

000834e4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   834e4:	2200      	movs	r2, #0
   834e6:	4b01      	ldr	r3, [pc, #4]	; (834ec <FPGA_releaselock+0x8>)
   834e8:	701a      	strb	r2, [r3, #0]
   834ea:	4770      	bx	lr
   834ec:	20001f68 	.word	0x20001f68

000834f0 <FPGA_lockstatus>:
}

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   834f0:	4b01      	ldr	r3, [pc, #4]	; (834f8 <FPGA_lockstatus+0x8>)
   834f2:	7818      	ldrb	r0, [r3, #0]
}
   834f4:	4770      	bx	lr
   834f6:	bf00      	nop
   834f8:	20001f68 	.word	0x20001f68

000834fc <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   834fc:	b508      	push	{r3, lr}
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
   834fe:	4601      	mov	r1, r0
   83500:	4804      	ldr	r0, [pc, #16]	; (83514 <FPGA_setaddr+0x18>)
   83502:	4b05      	ldr	r3, [pc, #20]	; (83518 <FPGA_setaddr+0x1c>)
   83504:	4798      	blx	r3
			gpio_set_pin_low(FPGA_ALE_GPIO);
   83506:	2035      	movs	r0, #53	; 0x35
   83508:	4b04      	ldr	r3, [pc, #16]	; (8351c <FPGA_setaddr+0x20>)
   8350a:	4798      	blx	r3
			gpio_set_pin_high(FPGA_ALE_GPIO);
   8350c:	2035      	movs	r0, #53	; 0x35
   8350e:	4b04      	ldr	r3, [pc, #16]	; (83520 <FPGA_setaddr+0x24>)
   83510:	4798      	blx	r3
   83512:	bd08      	pop	{r3, pc}
   83514:	400e0e00 	.word	0x400e0e00
   83518:	0008484f 	.word	0x0008484f
   8351c:	00084891 	.word	0x00084891
   83520:	00084877 	.word	0x00084877

00083524 <V2Protocol_ProcessCommand>:
/** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
 *  This routine decodes the issued command and passes off the handling of the command to the
 *  appropriate function.
 */
bool V2Protocol_ProcessCommand(void)
{
   83524:	b538      	push	{r3, r4, r5, lr}
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
   83526:	4b7b      	ldr	r3, [pc, #492]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   83528:	789c      	ldrb	r4, [r3, #2]
   8352a:	4b7b      	ldr	r3, [pc, #492]	; (83718 <V2Protocol_ProcessCommand+0x1f4>)
   8352c:	701c      	strb	r4, [r3, #0]
	uint8_t offset;

	
	/* Reset timeout counter duration and start the timer */
	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
	start_timeoutcnt();
   8352e:	4b7b      	ldr	r3, [pc, #492]	; (8371c <V2Protocol_ProcessCommand+0x1f8>)
   83530:	4798      	blx	r3

	switch (V2Command)
   83532:	1e63      	subs	r3, r4, #1
   83534:	2b21      	cmp	r3, #33	; 0x21
   83536:	f200 80e3 	bhi.w	83700 <V2Protocol_ProcessCommand+0x1dc>
   8353a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8353e:	0022      	.short	0x0022
   83540:	00370037 	.word	0x00370037
   83544:	00e100e1 	.word	0x00e100e1
   83548:	00e1006c 	.word	0x00e1006c
   8354c:	00e100e1 	.word	0x00e100e1
   83550:	00e10088 	.word	0x00e10088
   83554:	00e100e1 	.word	0x00e100e1
   83558:	00e100e1 	.word	0x00e100e1
   8355c:	00940090 	.word	0x00940090
   83560:	009800a4 	.word	0x009800a4
   83564:	0098009e 	.word	0x0098009e
   83568:	00ad009e 	.word	0x00ad009e
   8356c:	00ad00a8 	.word	0x00ad00a8
   83570:	00a800a8 	.word	0x00a800a8
   83574:	00b200a8 	.word	0x00b200a8
   83578:	00e100e1 	.word	0x00e100e1
   8357c:	00cf00b6 	.word	0x00cf00b6
   83580:	00c0      	.short	0x00c0
}

/** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
static void V2Protocol_SignOn(void)
{
	status_payload[1] = STATUS_CMD_OK;
   83582:	4c65      	ldr	r4, [pc, #404]	; (83718 <V2Protocol_ProcessCommand+0x1f4>)
   83584:	2300      	movs	r3, #0
   83586:	7063      	strb	r3, [r4, #1]
	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
   83588:	230d      	movs	r3, #13
   8358a:	70a3      	strb	r3, [r4, #2]
	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
   8358c:	4b64      	ldr	r3, [pc, #400]	; (83720 <V2Protocol_ProcessCommand+0x1fc>)
   8358e:	cb07      	ldmia	r3!, {r0, r1, r2}
   83590:	f8c4 0003 	str.w	r0, [r4, #3]
   83594:	f8c4 1007 	str.w	r1, [r4, #7]
   83598:	f8c4 200b 	str.w	r2, [r4, #11]
   8359c:	781b      	ldrb	r3, [r3, #0]
   8359e:	73e3      	strb	r3, [r4, #15]
	udd_g_ctrlreq.payload = status_payload;
   835a0:	4b5c      	ldr	r3, [pc, #368]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   835a2:	609c      	str	r4, [r3, #8]
	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
   835a4:	2210      	movs	r2, #16
   835a6:	819a      	strh	r2, [r3, #12]
	return true;
   835a8:	2001      	movs	r0, #1
   835aa:	bd38      	pop	{r3, r4, r5, pc}
 *
 *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 */
static void V2Protocol_GetSetParam(const uint8_t V2Command)
{
	uint8_t ParamID = udd_g_ctrlreq.payload[0];
   835ac:	4b59      	ldr	r3, [pc, #356]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   835ae:	689b      	ldr	r3, [r3, #8]
   835b0:	781d      	ldrb	r5, [r3, #0]
	uint8_t ParamValue;

	if (V2Command == CMD_SET_PARAMETER) {
   835b2:	2c02      	cmp	r4, #2
   835b4:	d00c      	beq.n	835d0 <V2Protocol_ProcessCommand+0xac>
	  ParamValue = udd_g_ctrlreq.payload[1];	  
	}

	avrisp_status_payload_size = 2;
   835b6:	2202      	movs	r2, #2
   835b8:	4b5a      	ldr	r3, [pc, #360]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   835ba:	801a      	strh	r2, [r3, #0]

	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   835bc:	4628      	mov	r0, r5
   835be:	4b5a      	ldr	r3, [pc, #360]	; (83728 <V2Protocol_ProcessCommand+0x204>)
   835c0:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
	{
		avrisp_status_payload[1] = STATUS_CMD_OK;
		V2Params_SetParameterValue(ParamID, ParamValue);
	}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   835c2:	2c03      	cmp	r4, #3
   835c4:	d017      	beq.n	835f6 <V2Protocol_ProcessCommand+0xd2>
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
		avrisp_status_payload_size += 1;
	}
	else
	{
		avrisp_status_payload[1] = STATUS_CMD_FAILED;
   835c6:	22c0      	movs	r2, #192	; 0xc0
   835c8:	4b58      	ldr	r3, [pc, #352]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   835ca:	705a      	strb	r2, [r3, #1]
	return true;
   835cc:	2001      	movs	r0, #1
   835ce:	bd38      	pop	{r3, r4, r5, pc}
	  ParamValue = udd_g_ctrlreq.payload[1];	  
   835d0:	785c      	ldrb	r4, [r3, #1]
	avrisp_status_payload_size = 2;
   835d2:	2202      	movs	r2, #2
   835d4:	4b53      	ldr	r3, [pc, #332]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   835d6:	801a      	strh	r2, [r3, #0]
	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
   835d8:	4628      	mov	r0, r5
   835da:	4b53      	ldr	r3, [pc, #332]	; (83728 <V2Protocol_ProcessCommand+0x204>)
   835dc:	4798      	blx	r3
	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
   835de:	f010 0f02 	tst.w	r0, #2
   835e2:	d0f0      	beq.n	835c6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   835e4:	2200      	movs	r2, #0
   835e6:	4b51      	ldr	r3, [pc, #324]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   835e8:	705a      	strb	r2, [r3, #1]
		V2Params_SetParameterValue(ParamID, ParamValue);
   835ea:	4621      	mov	r1, r4
   835ec:	4628      	mov	r0, r5
   835ee:	4b50      	ldr	r3, [pc, #320]	; (83730 <V2Protocol_ProcessCommand+0x20c>)
   835f0:	4798      	blx	r3
	return true;
   835f2:	2001      	movs	r0, #1
   835f4:	bd38      	pop	{r3, r4, r5, pc}
	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
   835f6:	f010 0f01 	tst.w	r0, #1
   835fa:	d0e4      	beq.n	835c6 <V2Protocol_ProcessCommand+0xa2>
		avrisp_status_payload[1] = STATUS_CMD_OK;
   835fc:	4c4b      	ldr	r4, [pc, #300]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   835fe:	2300      	movs	r3, #0
   83600:	7063      	strb	r3, [r4, #1]
		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
   83602:	4628      	mov	r0, r5
   83604:	4b4b      	ldr	r3, [pc, #300]	; (83734 <V2Protocol_ProcessCommand+0x210>)
   83606:	4798      	blx	r3
   83608:	70a0      	strb	r0, [r4, #2]
		avrisp_status_payload_size += 1;
   8360a:	4a46      	ldr	r2, [pc, #280]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   8360c:	8813      	ldrh	r3, [r2, #0]
   8360e:	3301      	adds	r3, #1
   83610:	8013      	strh	r3, [r2, #0]
	return true;
   83612:	2001      	movs	r0, #1
   83614:	bd38      	pop	{r3, r4, r5, pc}
 *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 *  to the attached device as required.
 */
static void V2Protocol_LoadAddress(void)
{
	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrlreq.payload[1] << 8) | (udd_g_ctrlreq.payload[0]);
   83616:	4b3f      	ldr	r3, [pc, #252]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   83618:	689a      	ldr	r2, [r3, #8]
   8361a:	78d1      	ldrb	r1, [r2, #3]
   8361c:	7893      	ldrb	r3, [r2, #2]
   8361e:	041b      	lsls	r3, r3, #16
   83620:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83624:	7811      	ldrb	r1, [r2, #0]
   83626:	430b      	orrs	r3, r1
   83628:	7852      	ldrb	r2, [r2, #1]
   8362a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   8362e:	4a42      	ldr	r2, [pc, #264]	; (83738 <V2Protocol_ProcessCommand+0x214>)
   83630:	6013      	str	r3, [r2, #0]

	if (CurrentAddress & (1UL << 31))
   83632:	2b00      	cmp	r3, #0
   83634:	db07      	blt.n	83646 <V2Protocol_ProcessCommand+0x122>
	  MustLoadExtendedAddress = true;
	  
	// printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);

	avrisp_status_payload[1] = STATUS_CMD_OK;
   83636:	2200      	movs	r2, #0
   83638:	4b3c      	ldr	r3, [pc, #240]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   8363a:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   8363c:	2202      	movs	r2, #2
   8363e:	4b39      	ldr	r3, [pc, #228]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   83640:	801a      	strh	r2, [r3, #0]
	return true;
   83642:	2001      	movs	r0, #1
   83644:	bd38      	pop	{r3, r4, r5, pc}
	  MustLoadExtendedAddress = true;
   83646:	2201      	movs	r2, #1
   83648:	4b3c      	ldr	r3, [pc, #240]	; (8373c <V2Protocol_ProcessCommand+0x218>)
   8364a:	701a      	strb	r2, [r3, #0]
   8364c:	e7f3      	b.n	83636 <V2Protocol_ProcessCommand+0x112>
	avrisp_status_payload[1] = STATUS_CMD_OK;
   8364e:	2200      	movs	r2, #0
   83650:	4b36      	ldr	r3, [pc, #216]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   83652:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   83654:	2202      	movs	r2, #2
   83656:	4b33      	ldr	r3, [pc, #204]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   83658:	801a      	strh	r2, [r3, #0]
	return true;
   8365a:	2001      	movs	r0, #1
   8365c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_EnterISPMode();
   8365e:	4b38      	ldr	r3, [pc, #224]	; (83740 <V2Protocol_ProcessCommand+0x21c>)
   83660:	4798      	blx	r3
	return true;
   83662:	2001      	movs	r0, #1
			break;
   83664:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_LeaveISPMode();
   83666:	4b37      	ldr	r3, [pc, #220]	; (83744 <V2Protocol_ProcessCommand+0x220>)
   83668:	4798      	blx	r3
	return true;
   8366a:	2001      	movs	r0, #1
			break;
   8366c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
   8366e:	4936      	ldr	r1, [pc, #216]	; (83748 <V2Protocol_ProcessCommand+0x224>)
   83670:	4620      	mov	r0, r4
   83672:	4b36      	ldr	r3, [pc, #216]	; (8374c <V2Protocol_ProcessCommand+0x228>)
   83674:	4798      	blx	r3
	return true;
   83676:	2001      	movs	r0, #1
			break;
   83678:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
   8367a:	4933      	ldr	r1, [pc, #204]	; (83748 <V2Protocol_ProcessCommand+0x224>)
   8367c:	4620      	mov	r0, r4
   8367e:	4b34      	ldr	r3, [pc, #208]	; (83750 <V2Protocol_ProcessCommand+0x22c>)
   83680:	4798      	blx	r3
	return true;
   83682:	2001      	movs	r0, #1
			break;
   83684:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ChipErase();
   83686:	4b33      	ldr	r3, [pc, #204]	; (83754 <V2Protocol_ProcessCommand+0x230>)
   83688:	4798      	blx	r3
	return true;
   8368a:	2001      	movs	r0, #1
			break;
   8368c:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
   8368e:	4620      	mov	r0, r4
   83690:	4b31      	ldr	r3, [pc, #196]	; (83758 <V2Protocol_ProcessCommand+0x234>)
   83692:	4798      	blx	r3
	return true;
   83694:	2001      	movs	r0, #1
			break;
   83696:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_WriteFuseLock(V2Command);
   83698:	4620      	mov	r0, r4
   8369a:	4b30      	ldr	r3, [pc, #192]	; (8375c <V2Protocol_ProcessCommand+0x238>)
   8369c:	4798      	blx	r3
	return true;
   8369e:	2001      	movs	r0, #1
			break;
   836a0:	bd38      	pop	{r3, r4, r5, pc}
			ISPProtocol_SPIMulti();
   836a2:	4b2f      	ldr	r3, [pc, #188]	; (83760 <V2Protocol_ProcessCommand+0x23c>)
   836a4:	4798      	blx	r3
	return true;
   836a6:	2001      	movs	r0, #1
			break;
   836a8:	bd38      	pop	{r3, r4, r5, pc}
			udd_g_ctrlreq.payload = avrisp_status_payload;
   836aa:	4a1a      	ldr	r2, [pc, #104]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   836ac:	4b1f      	ldr	r3, [pc, #124]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   836ae:	6093      	str	r3, [r2, #8]
			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
   836b0:	4b1c      	ldr	r3, [pc, #112]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   836b2:	8819      	ldrh	r1, [r3, #0]
   836b4:	8191      	strh	r1, [r2, #12]
			avrisp_status_payload_size = 0;
   836b6:	2200      	movs	r2, #0
   836b8:	801a      	strh	r2, [r3, #0]
			return true;
   836ba:	2001      	movs	r0, #1
   836bc:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   836be:	4a15      	ldr	r2, [pc, #84]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   836c0:	8853      	ldrh	r3, [r2, #2]
   836c2:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   836c4:	88d2      	ldrh	r2, [r2, #6]
   836c6:	1899      	adds	r1, r3, r2
   836c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   836cc:	dc20      	bgt.n	83710 <V2Protocol_ProcessCommand+0x1ec>
			udd_g_ctrlreq.payload = avr_rambuf + offset;
   836ce:	4811      	ldr	r0, [pc, #68]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   836d0:	491d      	ldr	r1, [pc, #116]	; (83748 <V2Protocol_ProcessCommand+0x224>)
   836d2:	440b      	add	r3, r1
   836d4:	6083      	str	r3, [r0, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   836d6:	8182      	strh	r2, [r0, #12]
			return true;
   836d8:	2001      	movs	r0, #1
   836da:	bd38      	pop	{r3, r4, r5, pc}
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   836dc:	4a0d      	ldr	r2, [pc, #52]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   836de:	8853      	ldrh	r3, [r2, #2]
   836e0:	0a1b      	lsrs	r3, r3, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
   836e2:	88d2      	ldrh	r2, [r2, #6]
   836e4:	1899      	adds	r1, r3, r2
   836e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   836ea:	dd01      	ble.n	836f0 <V2Protocol_ProcessCommand+0x1cc>
				return false;
   836ec:	2000      	movs	r0, #0
   836ee:	bd38      	pop	{r3, r4, r5, pc}
			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   836f0:	4908      	ldr	r1, [pc, #32]	; (83714 <V2Protocol_ProcessCommand+0x1f0>)
   836f2:	6889      	ldr	r1, [r1, #8]
   836f4:	4814      	ldr	r0, [pc, #80]	; (83748 <V2Protocol_ProcessCommand+0x224>)
   836f6:	4418      	add	r0, r3
   836f8:	4b1a      	ldr	r3, [pc, #104]	; (83764 <V2Protocol_ProcessCommand+0x240>)
   836fa:	4798      	blx	r3
			return true;
   836fc:	2001      	movs	r0, #1
   836fe:	bd38      	pop	{r3, r4, r5, pc}
	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
   83700:	22c9      	movs	r2, #201	; 0xc9
   83702:	4b0a      	ldr	r3, [pc, #40]	; (8372c <V2Protocol_ProcessCommand+0x208>)
   83704:	705a      	strb	r2, [r3, #1]
	avrisp_status_payload_size = 2;
   83706:	2202      	movs	r2, #2
   83708:	4b06      	ldr	r3, [pc, #24]	; (83724 <V2Protocol_ProcessCommand+0x200>)
   8370a:	801a      	strh	r2, [r3, #0]
	return true;
   8370c:	2001      	movs	r0, #1
   8370e:	bd38      	pop	{r3, r4, r5, pc}
				return false;
   83710:	2000      	movs	r0, #0
   83712:	bd38      	pop	{r3, r4, r5, pc}
   83714:	200027ac 	.word	0x200027ac
   83718:	2000206c 	.word	0x2000206c
   8371c:	00084239 	.word	0x00084239
   83720:	0008cd68 	.word	0x0008cd68
   83724:	2000276a 	.word	0x2000276a
   83728:	00083799 	.word	0x00083799
   8372c:	2000276c 	.word	0x2000276c
   83730:	000837c1 	.word	0x000837c1
   83734:	000837ad 	.word	0x000837ad
   83738:	2000278c 	.word	0x2000278c
   8373c:	20002768 	.word	0x20002768
   83740:	00080e89 	.word	0x00080e89
   83744:	00080fc5 	.word	0x00080fc5
   83748:	20001f6c 	.word	0x20001f6c
   8374c:	000809b1 	.word	0x000809b1
   83750:	00080c1d 	.word	0x00080c1d
   83754:	00081021 	.word	0x00081021
   83758:	00080d51 	.word	0x00080d51
   8375c:	00080ded 	.word	0x00080ded
   83760:	00080e51 	.word	0x00080e51
   83764:	00086c89 	.word	0x00086c89

00083768 <V2Params_GetParamFromTable>:
	ParameterItem_t* CurrTableItem = ParameterTable;

	/* Find the parameter in the parameter table if present */
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
	{
		if (ParamID == CurrTableItem->ParamID)
   83768:	4b09      	ldr	r3, [pc, #36]	; (83790 <V2Params_GetParamFromTable+0x28>)
   8376a:	781b      	ldrb	r3, [r3, #0]
   8376c:	4283      	cmp	r3, r0
   8376e:	d00a      	beq.n	83786 <V2Params_GetParamFromTable+0x1e>
		  return CurrTableItem;

		CurrTableItem++;
   83770:	4b08      	ldr	r3, [pc, #32]	; (83794 <V2Params_GetParamFromTable+0x2c>)
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   83772:	f103 011b 	add.w	r1, r3, #27
		if (ParamID == CurrTableItem->ParamID)
   83776:	781a      	ldrb	r2, [r3, #0]
   83778:	4282      	cmp	r2, r0
   8377a:	d006      	beq.n	8378a <V2Params_GetParamFromTable+0x22>
		CurrTableItem++;
   8377c:	3303      	adds	r3, #3
	for (uint8_t TableIndex = 0; TableIndex < TABLE_PARAM_COUNT; TableIndex++)
   8377e:	428b      	cmp	r3, r1
   83780:	d1f9      	bne.n	83776 <V2Params_GetParamFromTable+0xe>
	}

	return NULL;
   83782:	2000      	movs	r0, #0
   83784:	4770      	bx	lr
	ParameterItem_t* CurrTableItem = ParameterTable;
   83786:	4802      	ldr	r0, [pc, #8]	; (83790 <V2Params_GetParamFromTable+0x28>)
   83788:	4770      	bx	lr
   8378a:	4618      	mov	r0, r3
}
   8378c:	4770      	bx	lr
   8378e:	bf00      	nop
   83790:	20000a40 	.word	0x20000a40
   83794:	20000a43 	.word	0x20000a43

00083798 <V2Params_GetParameterPrivileges>:
{
   83798:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   8379a:	4b03      	ldr	r3, [pc, #12]	; (837a8 <V2Params_GetParameterPrivileges+0x10>)
   8379c:	4798      	blx	r3
	if (ParamInfo == NULL)
   8379e:	b108      	cbz	r0, 837a4 <V2Params_GetParameterPrivileges+0xc>
	return ParamInfo->ParamPrivileges;
   837a0:	7840      	ldrb	r0, [r0, #1]
   837a2:	bd08      	pop	{r3, pc}
	  return 0;
   837a4:	2000      	movs	r0, #0
}
   837a6:	bd08      	pop	{r3, pc}
   837a8:	00083769 	.word	0x00083769

000837ac <V2Params_GetParameterValue>:
{
   837ac:	b508      	push	{r3, lr}
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   837ae:	4b03      	ldr	r3, [pc, #12]	; (837bc <V2Params_GetParameterValue+0x10>)
   837b0:	4798      	blx	r3
	if (ParamInfo == NULL)
   837b2:	b108      	cbz	r0, 837b8 <V2Params_GetParameterValue+0xc>
	return ParamInfo->ParamValue;
   837b4:	7880      	ldrb	r0, [r0, #2]
   837b6:	bd08      	pop	{r3, pc}
	  return 0;
   837b8:	2000      	movs	r0, #0
}
   837ba:	bd08      	pop	{r3, pc}
   837bc:	00083769 	.word	0x00083769

000837c0 <V2Params_SetParameterValue>:
{
   837c0:	b510      	push	{r4, lr}
   837c2:	460c      	mov	r4, r1
	ParameterItem_t* const ParamInfo = V2Params_GetParamFromTable(ParamID);
   837c4:	4b02      	ldr	r3, [pc, #8]	; (837d0 <V2Params_SetParameterValue+0x10>)
   837c6:	4798      	blx	r3
	if (ParamInfo == NULL)
   837c8:	b100      	cbz	r0, 837cc <V2Params_SetParameterValue+0xc>
	ParamInfo->ParamValue = Value;
   837ca:	7084      	strb	r4, [r0, #2]
   837cc:	bd10      	pop	{r4, pc}
   837ce:	bf00      	nop
   837d0:	00083769 	.word	0x00083769

000837d4 <XMEGANVM_SendAddress>:
/** Sends the given 32-bit absolute address to the target.
 *
 *  \param[in] AbsoluteAddress  Absolute address to send to the target
 */
static void XMEGANVM_SendAddress(const uint32_t AbsoluteAddress)
{
   837d4:	b538      	push	{r3, r4, r5, lr}
   837d6:	4605      	mov	r5, r0
	/* Send the given 32-bit address to the target, LSB first */
	XPROGTarget_SendByte(AbsoluteAddress &  0xFF);
   837d8:	b2c0      	uxtb	r0, r0
   837da:	4c05      	ldr	r4, [pc, #20]	; (837f0 <XMEGANVM_SendAddress+0x1c>)
   837dc:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 8);
   837de:	f3c5 2007 	ubfx	r0, r5, #8, #8
   837e2:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 16);
   837e4:	f3c5 4007 	ubfx	r0, r5, #16, #8
   837e8:	47a0      	blx	r4
	XPROGTarget_SendByte(AbsoluteAddress >> 24);
   837ea:	0e28      	lsrs	r0, r5, #24
   837ec:	47a0      	blx	r4
   837ee:	bd38      	pop	{r3, r4, r5, pc}
   837f0:	00084069 	.word	0x00084069

000837f4 <XMEGANVM_SendNVMRegAddress>:
/** Sends the given NVM register address to the target.
 *
 *  \param[in] Register  NVM register whose absolute address is to be sent
 */
static void XMEGANVM_SendNVMRegAddress(const uint8_t Register)
{
   837f4:	b508      	push	{r3, lr}
	/* Determine the absolute register address from the NVM base memory address and the NVM register address */
	uint32_t Address = XPROG_Param_NVMBase | Register;
   837f6:	4b03      	ldr	r3, [pc, #12]	; (83804 <XMEGANVM_SendNVMRegAddress+0x10>)
   837f8:	681b      	ldr	r3, [r3, #0]

	/* Send the calculated 32-bit address to the target, LSB first */
	XMEGANVM_SendAddress(Address);
   837fa:	4318      	orrs	r0, r3
   837fc:	4b02      	ldr	r3, [pc, #8]	; (83808 <XMEGANVM_SendNVMRegAddress+0x14>)
   837fe:	4798      	blx	r3
   83800:	bd08      	pop	{r3, pc}
   83802:	bf00      	nop
   83804:	20000a60 	.word	0x20000a60
   83808:	000837d5 	.word	0x000837d5

0008380c <XMEGANVM_WaitWhileNVMBusBusy>:
 *  calculation.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMBusBusy(void)
{
   8380c:	b570      	push	{r4, r5, r6, lr}
	/* Poll the STATUS register to check to see if NVM access has been enabled */
	for (;;)
	{
		/* Send the LDCS command to read the PDI STATUS register to see the NVM bus is active */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   8380e:	4e07      	ldr	r6, [pc, #28]	; (8382c <XMEGANVM_WaitWhileNVMBusBusy+0x20>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83810:	4d07      	ldr	r5, [pc, #28]	; (83830 <XMEGANVM_WaitWhileNVMBusBusy+0x24>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0) {
   83812:	4c08      	ldr	r4, [pc, #32]	; (83834 <XMEGANVM_WaitWhileNVMBusBusy+0x28>)
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_STATUS));
   83814:	2080      	movs	r0, #128	; 0x80
   83816:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83818:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0) {
   8381a:	6823      	ldr	r3, [r4, #0]
   8381c:	b123      	cbz	r3, 83828 <XMEGANVM_WaitWhileNVMBusBusy+0x1c>
		  return false;
		}

		/* Check the status register read response to see if the NVM bus is enabled */
		if (StatusRegister & PDI_STATUS_NVM) {
   8381e:	f010 0f02 	tst.w	r0, #2
   83822:	d0f7      	beq.n	83814 <XMEGANVM_WaitWhileNVMBusBusy+0x8>
		  return true;
   83824:	2001      	movs	r0, #1
   83826:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83828:	2000      	movs	r0, #0
		}
	}
}
   8382a:	bd70      	pop	{r4, r5, r6, pc}
   8382c:	00084069 	.word	0x00084069
   83830:	00084095 	.word	0x00084095
   83834:	20002794 	.word	0x20002794

00083838 <XMEGANVM_WaitWhileNVMControllerBusy>:
 *  timeout period expires.
 *
 *  \return Boolean \c true if the NVM controller became ready within the timeout period, \c false otherwise
 */
bool XMEGANVM_WaitWhileNVMControllerBusy(void)
{
   83838:	b570      	push	{r4, r5, r6, lr}
	/* Preload the pointer register with the NVM STATUS register address to check the BUSY flag */
	XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   8383a:	206b      	movs	r0, #107	; 0x6b
   8383c:	4b09      	ldr	r3, [pc, #36]	; (83864 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)
   8383e:	4798      	blx	r3
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_STATUS);
   83840:	200f      	movs	r0, #15
   83842:	4b09      	ldr	r3, [pc, #36]	; (83868 <XMEGANVM_WaitWhileNVMControllerBusy+0x30>)
   83844:	4798      	blx	r3

	/* Poll the NVM STATUS register while the NVM controller is busy */
	for (;;)
	{
		/* Fetch the current status value via the pointer register (without auto-increment afterwards) */
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   83846:	4e07      	ldr	r6, [pc, #28]	; (83864 <XMEGANVM_WaitWhileNVMControllerBusy+0x2c>)

		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83848:	4d08      	ldr	r5, [pc, #32]	; (8386c <XMEGANVM_WaitWhileNVMControllerBusy+0x34>)

		/* We might have timed out waiting for the status register read response, check here */
		if (TimeoutTicksRemaining == 0){
   8384a:	4c09      	ldr	r4, [pc, #36]	; (83870 <XMEGANVM_WaitWhileNVMControllerBusy+0x38>)
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT, PDI_DATASIZE_1BYTE));
   8384c:	2020      	movs	r0, #32
   8384e:	47b0      	blx	r6
		uint8_t StatusRegister = XPROGTarget_ReceiveByte();
   83850:	47a8      	blx	r5
		if (TimeoutTicksRemaining == 0){
   83852:	6823      	ldr	r3, [r4, #0]
   83854:	b123      	cbz	r3, 83860 <XMEGANVM_WaitWhileNVMControllerBusy+0x28>
		  return false;
		}

		/* Check to see if the BUSY flag is still set */
		if (!(StatusRegister & (1 << 7))) {
   83856:	f010 0f80 	tst.w	r0, #128	; 0x80
   8385a:	d1f7      	bne.n	8384c <XMEGANVM_WaitWhileNVMControllerBusy+0x14>
		  return true;
   8385c:	2001      	movs	r0, #1
   8385e:	bd70      	pop	{r4, r5, r6, pc}
		  return false;
   83860:	2000      	movs	r0, #0
		}
	}
}
   83862:	bd70      	pop	{r4, r5, r6, pc}
   83864:	00084069 	.word	0x00084069
   83868:	000837f5 	.word	0x000837f5
   8386c:	00084095 	.word	0x00084095
   83870:	20002794 	.word	0x20002794

00083874 <XMEGANVM_EnablePDI>:
/** Enables the physical PDI interface on the target and enables access to the internal NVM controller.
 *
 *  \return Boolean \c true if the PDI interface was enabled successfully, \c false otherwise
 */
bool XMEGANVM_EnablePDI(void)
{
   83874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83878:	b082      	sub	sp, #8
	/* Enable PDI programming mode with the attached target */
	XPROGTarget_EnableTargetPDI();
   8387a:	4b1a      	ldr	r3, [pc, #104]	; (838e4 <XMEGANVM_EnablePDI+0x70>)
   8387c:	4798      	blx	r3

	/* Store the RESET key into the RESET PDI register to keep the XMEGA in reset */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   8387e:	20c1      	movs	r0, #193	; 0xc1
   83880:	4c19      	ldr	r4, [pc, #100]	; (838e8 <XMEGANVM_EnablePDI+0x74>)
   83882:	47a0      	blx	r4
	XPROGTarget_SendByte(PDI_RESET_KEY);
   83884:	2059      	movs	r0, #89	; 0x59
   83886:	47a0      	blx	r4

	/* Lower direction change guard time to 32 USART bits */
	XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_CTRL));
   83888:	20c2      	movs	r0, #194	; 0xc2
   8388a:	47a0      	blx	r4
	XPROGTarget_SendByte(0x02);
   8388c:	2002      	movs	r0, #2
   8388e:	47a0      	blx	r4

	/* Enable access to the XPROG NVM bus by sending the documented NVM access key to the device */
	XPROGTarget_SendByte(PDI_CMD_KEY);
   83890:	20e0      	movs	r0, #224	; 0xe0
   83892:	47a0      	blx	r4
   83894:	f10d 0407 	add.w	r4, sp, #7
   83898:	f10d 38ff 	add.w	r8, sp, #4294967295
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
	  XPROGTarget_SendByte(PDI_NVMENABLE_KEY[i - 1]);
   8389c:	2712      	movs	r7, #18
   8389e:	2689      	movs	r6, #137	; 0x89
   838a0:	4d11      	ldr	r5, [pc, #68]	; (838e8 <XMEGANVM_EnablePDI+0x74>)
   838a2:	f88d 7000 	strb.w	r7, [sp]
   838a6:	f88d 6001 	strb.w	r6, [sp, #1]
   838aa:	23ab      	movs	r3, #171	; 0xab
   838ac:	f88d 3002 	strb.w	r3, [sp, #2]
   838b0:	2345      	movs	r3, #69	; 0x45
   838b2:	f88d 3003 	strb.w	r3, [sp, #3]
   838b6:	23cd      	movs	r3, #205	; 0xcd
   838b8:	f88d 3004 	strb.w	r3, [sp, #4]
   838bc:	23d8      	movs	r3, #216	; 0xd8
   838be:	f88d 3005 	strb.w	r3, [sp, #5]
   838c2:	2388      	movs	r3, #136	; 0x88
   838c4:	f88d 3006 	strb.w	r3, [sp, #6]
   838c8:	23ff      	movs	r3, #255	; 0xff
   838ca:	f88d 3007 	strb.w	r3, [sp, #7]
   838ce:	f814 0901 	ldrb.w	r0, [r4], #-1
   838d2:	47a8      	blx	r5
	for (uint8_t i = sizeof(PDI_NVMENABLE_KEY); i > 0; i--)
   838d4:	4544      	cmp	r4, r8
   838d6:	d1e4      	bne.n	838a2 <XMEGANVM_EnablePDI+0x2e>

	/* Wait until the NVM bus becomes active */
	return XMEGANVM_WaitWhileNVMBusBusy();
   838d8:	4b04      	ldr	r3, [pc, #16]	; (838ec <XMEGANVM_EnablePDI+0x78>)
   838da:	4798      	blx	r3
}
   838dc:	b002      	add	sp, #8
   838de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   838e2:	bf00      	nop
   838e4:	00084135 	.word	0x00084135
   838e8:	00084069 	.word	0x00084069
   838ec:	0008380d 	.word	0x0008380d

000838f0 <XMEGANVM_DisablePDI>:

/** Removes access to the target's NVM controller and physically disables the target's physical PDI interface. */
void XMEGANVM_DisablePDI(void)
{
   838f0:	b570      	push	{r4, r5, r6, lr}
	XMEGANVM_WaitWhileNVMBusBusy();
   838f2:	4b09      	ldr	r3, [pc, #36]	; (83918 <XMEGANVM_DisablePDI+0x28>)
   838f4:	4798      	blx	r3
	 * change takes effect, as in some cases it takes multiple writes (silicon bug?).
	 */
	do
	{
		/* Clear reset register */
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   838f6:	4c09      	ldr	r4, [pc, #36]	; (8391c <XMEGANVM_DisablePDI+0x2c>)
		XPROGTarget_SendByte(0x00);

		/* Read back the reset register, check to see if it took effect */
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   838f8:	4d09      	ldr	r5, [pc, #36]	; (83920 <XMEGANVM_DisablePDI+0x30>)
   838fa:	4e0a      	ldr	r6, [pc, #40]	; (83924 <XMEGANVM_DisablePDI+0x34>)
		XPROGTarget_SendByte(PDI_CMD_STCS(PDI_REG_RESET));
   838fc:	20c1      	movs	r0, #193	; 0xc1
   838fe:	47a0      	blx	r4
		XPROGTarget_SendByte(0x00);
   83900:	2000      	movs	r0, #0
   83902:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_LDCS(PDI_REG_RESET));
   83904:	2081      	movs	r0, #129	; 0x81
   83906:	47a0      	blx	r4
	} while ((XPROGTarget_ReceiveByte() != 0x00) && TimeoutTicksRemaining);
   83908:	47a8      	blx	r5
   8390a:	b110      	cbz	r0, 83912 <XMEGANVM_DisablePDI+0x22>
   8390c:	6833      	ldr	r3, [r6, #0]
   8390e:	2b00      	cmp	r3, #0
   83910:	d1f4      	bne.n	838fc <XMEGANVM_DisablePDI+0xc>

	XPROGTarget_DisableTargetPDI();
   83912:	4b05      	ldr	r3, [pc, #20]	; (83928 <XMEGANVM_DisablePDI+0x38>)
   83914:	4798      	blx	r3
   83916:	bd70      	pop	{r4, r5, r6, pc}
   83918:	0008380d 	.word	0x0008380d
   8391c:	00084069 	.word	0x00084069
   83920:	00084095 	.word	0x00084095
   83924:	20002794 	.word	0x20002794
   83928:	0008400d 	.word	0x0008400d

0008392c <XMEGANVM_ReadMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_ReadMemory(const uint32_t ReadAddress,
                         uint8_t* ReadBuffer,
                         uint16_t ReadSize)
{
   8392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8392e:	4607      	mov	r7, r0
   83930:	460d      	mov	r5, r1
   83932:	4614      	mov	r4, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83934:	4b1e      	ldr	r3, [pc, #120]	; (839b0 <XMEGANVM_ReadMemory+0x84>)
   83936:	4798      	blx	r3
   83938:	4603      	mov	r3, r0
   8393a:	b908      	cbnz	r0, 83940 <XMEGANVM_ReadMemory+0x14>
		XMEGANVM_SendAddress(ReadAddress);
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
	}

	return (TimeoutTicksRemaining > 0);
}
   8393c:	4618      	mov	r0, r3
   8393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83940:	204c      	movs	r0, #76	; 0x4c
   83942:	4e1c      	ldr	r6, [pc, #112]	; (839b4 <XMEGANVM_ReadMemory+0x88>)
   83944:	47b0      	blx	r6
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83946:	200a      	movs	r0, #10
   83948:	4b1b      	ldr	r3, [pc, #108]	; (839b8 <XMEGANVM_ReadMemory+0x8c>)
   8394a:	4798      	blx	r3
	XPROGTarget_SendByte(XMEGA_NVM_CMD_READNVM);
   8394c:	2043      	movs	r0, #67	; 0x43
   8394e:	47b0      	blx	r6
	if (ReadSize > 1)
   83950:	2c01      	cmp	r4, #1
   83952:	d923      	bls.n	8399c <XMEGANVM_ReadMemory+0x70>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83954:	206b      	movs	r0, #107	; 0x6b
   83956:	47b0      	blx	r6
		XMEGANVM_SendAddress(ReadAddress);
   83958:	4638      	mov	r0, r7
   8395a:	4b18      	ldr	r3, [pc, #96]	; (839bc <XMEGANVM_ReadMemory+0x90>)
   8395c:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   8395e:	20a0      	movs	r0, #160	; 0xa0
   83960:	47b0      	blx	r6
		XPROGTarget_SendByte(ReadSize - 1);
   83962:	1e60      	subs	r0, r4, #1
   83964:	b2c0      	uxtb	r0, r0
   83966:	47b0      	blx	r6
		XPROGTarget_SendByte(PDI_CMD_LD(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83968:	2024      	movs	r0, #36	; 0x24
   8396a:	47b0      	blx	r6
		while (ReadSize-- && TimeoutTicksRemaining)
   8396c:	1e63      	subs	r3, r4, #1
   8396e:	b29b      	uxth	r3, r3
   83970:	b174      	cbz	r4, 83990 <XMEGANVM_ReadMemory+0x64>
   83972:	4a13      	ldr	r2, [pc, #76]	; (839c0 <XMEGANVM_ReadMemory+0x94>)
   83974:	6812      	ldr	r2, [r2, #0]
   83976:	b15a      	cbz	r2, 83990 <XMEGANVM_ReadMemory+0x64>
   83978:	1e6c      	subs	r4, r5, #1
   8397a:	441d      	add	r5, r3
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   8397c:	4e11      	ldr	r6, [pc, #68]	; (839c4 <XMEGANVM_ReadMemory+0x98>)
		while (ReadSize-- && TimeoutTicksRemaining)
   8397e:	4f10      	ldr	r7, [pc, #64]	; (839c0 <XMEGANVM_ReadMemory+0x94>)
		  *(ReadBuffer++) = XPROGTarget_ReceiveByte();
   83980:	47b0      	blx	r6
   83982:	f804 0f01 	strb.w	r0, [r4, #1]!
		while (ReadSize-- && TimeoutTicksRemaining)
   83986:	42ac      	cmp	r4, r5
   83988:	d002      	beq.n	83990 <XMEGANVM_ReadMemory+0x64>
   8398a:	683b      	ldr	r3, [r7, #0]
   8398c:	2b00      	cmp	r3, #0
   8398e:	d1f7      	bne.n	83980 <XMEGANVM_ReadMemory+0x54>
	return (TimeoutTicksRemaining > 0);
   83990:	4b0b      	ldr	r3, [pc, #44]	; (839c0 <XMEGANVM_ReadMemory+0x94>)
   83992:	681b      	ldr	r3, [r3, #0]
   83994:	3300      	adds	r3, #0
   83996:	bf18      	it	ne
   83998:	2301      	movne	r3, #1
   8399a:	e7cf      	b.n	8393c <XMEGANVM_ReadMemory+0x10>
		XPROGTarget_SendByte(PDI_CMD_LDS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   8399c:	200c      	movs	r0, #12
   8399e:	4b05      	ldr	r3, [pc, #20]	; (839b4 <XMEGANVM_ReadMemory+0x88>)
   839a0:	4798      	blx	r3
		XMEGANVM_SendAddress(ReadAddress);
   839a2:	4638      	mov	r0, r7
   839a4:	4b05      	ldr	r3, [pc, #20]	; (839bc <XMEGANVM_ReadMemory+0x90>)
   839a6:	4798      	blx	r3
		*(ReadBuffer++) = XPROGTarget_ReceiveByte();
   839a8:	4b06      	ldr	r3, [pc, #24]	; (839c4 <XMEGANVM_ReadMemory+0x98>)
   839aa:	4798      	blx	r3
   839ac:	7028      	strb	r0, [r5, #0]
   839ae:	e7ef      	b.n	83990 <XMEGANVM_ReadMemory+0x64>
   839b0:	00083839 	.word	0x00083839
   839b4:	00084069 	.word	0x00084069
   839b8:	000837f5 	.word	0x000837f5
   839bc:	000837d5 	.word	0x000837d5
   839c0:	20002794 	.word	0x20002794
   839c4:	00084095 	.word	0x00084095

000839c8 <XMEGANVM_WriteByteMemory>:
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_WriteByteMemory(const uint8_t WriteCommand,
                              const uint32_t WriteAddress,
                              const uint8_t data)
{
   839c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839cc:	4680      	mov	r8, r0
   839ce:	460f      	mov	r7, r1
   839d0:	4616      	mov	r6, r2
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   839d2:	4b0b      	ldr	r3, [pc, #44]	; (83a00 <XMEGANVM_WriteByteMemory+0x38>)
   839d4:	4798      	blx	r3
   839d6:	4604      	mov	r4, r0
   839d8:	b910      	cbnz	r0, 839e0 <XMEGANVM_WriteByteMemory+0x18>
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
	XMEGANVM_SendAddress(WriteAddress);
	XPROGTarget_SendByte(data);

	return true;
}
   839da:	4620      	mov	r0, r4
   839dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   839e0:	204c      	movs	r0, #76	; 0x4c
   839e2:	4d08      	ldr	r5, [pc, #32]	; (83a04 <XMEGANVM_WriteByteMemory+0x3c>)
   839e4:	47a8      	blx	r5
	XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   839e6:	200a      	movs	r0, #10
   839e8:	4b07      	ldr	r3, [pc, #28]	; (83a08 <XMEGANVM_WriteByteMemory+0x40>)
   839ea:	4798      	blx	r3
	XPROGTarget_SendByte(WriteCommand);
   839ec:	4640      	mov	r0, r8
   839ee:	47a8      	blx	r5
	XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   839f0:	204c      	movs	r0, #76	; 0x4c
   839f2:	47a8      	blx	r5
	XMEGANVM_SendAddress(WriteAddress);
   839f4:	4638      	mov	r0, r7
   839f6:	4b05      	ldr	r3, [pc, #20]	; (83a0c <XMEGANVM_WriteByteMemory+0x44>)
   839f8:	4798      	blx	r3
	XPROGTarget_SendByte(data);
   839fa:	4630      	mov	r0, r6
   839fc:	47a8      	blx	r5
	return true;
   839fe:	e7ec      	b.n	839da <XMEGANVM_WriteByteMemory+0x12>
   83a00:	00083839 	.word	0x00083839
   83a04:	00084069 	.word	0x00084069
   83a08:	000837f5 	.word	0x000837f5
   83a0c:	000837d5 	.word	0x000837d5

00083a10 <XMEGANVM_WritePageMemory>:
                              const uint8_t WritePageCommand,
                              const uint8_t PageMode,
                              const uint32_t WriteAddress,
                              const uint8_t* WriteBuffer,
                              uint16_t WriteSize)
{
   83a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a14:	4681      	mov	r9, r0
   83a16:	4617      	mov	r7, r2
   83a18:	461d      	mov	r5, r3
   83a1a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	if (PageMode & XPROG_PAGEMODE_ERASE)
   83a1e:	f013 0f01 	tst.w	r3, #1
   83a22:	d107      	bne.n	83a34 <XMEGANVM_WritePageMemory+0x24>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}

	if (WriteSize)
   83a24:	b9e6      	cbnz	r6, 83a60 <XMEGANVM_WritePageMemory+0x50>
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
		while (WriteSize--)
		  XPROGTarget_SendByte(*(WriteBuffer++));
	}

	if (PageMode & XPROG_PAGEMODE_WRITE)
   83a26:	f015 0f02 	tst.w	r5, #2
   83a2a:	d13f      	bne.n	83aac <XMEGANVM_WritePageMemory+0x9c>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendAddress(WriteAddress);
		XPROGTarget_SendByte(0x00);
	}

	return true;
   83a2c:	2401      	movs	r4, #1
}
   83a2e:	4620      	mov	r0, r4
   83a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a34:	4688      	mov	r8, r1
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83a36:	4b28      	ldr	r3, [pc, #160]	; (83ad8 <XMEGANVM_WritePageMemory+0xc8>)
   83a38:	4798      	blx	r3
   83a3a:	4604      	mov	r4, r0
   83a3c:	2800      	cmp	r0, #0
   83a3e:	d0f6      	beq.n	83a2e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83a40:	204c      	movs	r0, #76	; 0x4c
   83a42:	4c26      	ldr	r4, [pc, #152]	; (83adc <XMEGANVM_WritePageMemory+0xcc>)
   83a44:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83a46:	200a      	movs	r0, #10
   83a48:	f8df a094 	ldr.w	sl, [pc, #148]	; 83ae0 <XMEGANVM_WritePageMemory+0xd0>
   83a4c:	47d0      	blx	sl
		XPROGTarget_SendByte(EraseBuffCommand);
   83a4e:	4640      	mov	r0, r8
   83a50:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83a52:	204c      	movs	r0, #76	; 0x4c
   83a54:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83a56:	200b      	movs	r0, #11
   83a58:	47d0      	blx	sl
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83a5a:	2001      	movs	r0, #1
   83a5c:	47a0      	blx	r4
   83a5e:	e7e1      	b.n	83a24 <XMEGANVM_WritePageMemory+0x14>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83a60:	4b1d      	ldr	r3, [pc, #116]	; (83ad8 <XMEGANVM_WritePageMemory+0xc8>)
   83a62:	4798      	blx	r3
   83a64:	4604      	mov	r4, r0
   83a66:	2800      	cmp	r0, #0
   83a68:	d0e1      	beq.n	83a2e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83a6a:	204c      	movs	r0, #76	; 0x4c
   83a6c:	4c1b      	ldr	r4, [pc, #108]	; (83adc <XMEGANVM_WritePageMemory+0xcc>)
   83a6e:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83a70:	200a      	movs	r0, #10
   83a72:	4b1b      	ldr	r3, [pc, #108]	; (83ae0 <XMEGANVM_WritePageMemory+0xd0>)
   83a74:	4798      	blx	r3
		XPROGTarget_SendByte(WriteBuffCommand);
   83a76:	4648      	mov	r0, r9
   83a78:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83a7a:	206b      	movs	r0, #107	; 0x6b
   83a7c:	47a0      	blx	r4
		XMEGANVM_SendAddress(WriteAddress);
   83a7e:	9808      	ldr	r0, [sp, #32]
   83a80:	4b18      	ldr	r3, [pc, #96]	; (83ae4 <XMEGANVM_WritePageMemory+0xd4>)
   83a82:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83a84:	20a0      	movs	r0, #160	; 0xa0
   83a86:	47a0      	blx	r4
		XPROGTarget_SendByte(WriteSize - 1);
   83a88:	1e70      	subs	r0, r6, #1
   83a8a:	b2c0      	uxtb	r0, r0
   83a8c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83a8e:	2064      	movs	r0, #100	; 0x64
   83a90:	47a0      	blx	r4
   83a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83a94:	1e5c      	subs	r4, r3, #1
		while (WriteSize--)
   83a96:	3e01      	subs	r6, #1
   83a98:	b2b6      	uxth	r6, r6
   83a9a:	441e      	add	r6, r3
		  XPROGTarget_SendByte(*(WriteBuffer++));
   83a9c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 83adc <XMEGANVM_WritePageMemory+0xcc>
   83aa0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   83aa4:	47c0      	blx	r8
		while (WriteSize--)
   83aa6:	42b4      	cmp	r4, r6
   83aa8:	d1fa      	bne.n	83aa0 <XMEGANVM_WritePageMemory+0x90>
   83aaa:	e7bc      	b.n	83a26 <XMEGANVM_WritePageMemory+0x16>
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83aac:	4b0a      	ldr	r3, [pc, #40]	; (83ad8 <XMEGANVM_WritePageMemory+0xc8>)
   83aae:	4798      	blx	r3
   83ab0:	4604      	mov	r4, r0
   83ab2:	2800      	cmp	r0, #0
   83ab4:	d0bb      	beq.n	83a2e <XMEGANVM_WritePageMemory+0x1e>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ab6:	204c      	movs	r0, #76	; 0x4c
   83ab8:	4d08      	ldr	r5, [pc, #32]	; (83adc <XMEGANVM_WritePageMemory+0xcc>)
   83aba:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83abc:	200a      	movs	r0, #10
   83abe:	4b08      	ldr	r3, [pc, #32]	; (83ae0 <XMEGANVM_WritePageMemory+0xd0>)
   83ac0:	4798      	blx	r3
		XPROGTarget_SendByte(WritePageCommand);
   83ac2:	4638      	mov	r0, r7
   83ac4:	47a8      	blx	r5
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83ac6:	204c      	movs	r0, #76	; 0x4c
   83ac8:	47a8      	blx	r5
		XMEGANVM_SendAddress(WriteAddress);
   83aca:	9808      	ldr	r0, [sp, #32]
   83acc:	4b05      	ldr	r3, [pc, #20]	; (83ae4 <XMEGANVM_WritePageMemory+0xd4>)
   83ace:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83ad0:	2000      	movs	r0, #0
   83ad2:	47a8      	blx	r5
   83ad4:	e7ab      	b.n	83a2e <XMEGANVM_WritePageMemory+0x1e>
   83ad6:	bf00      	nop
   83ad8:	00083839 	.word	0x00083839
   83adc:	00084069 	.word	0x00084069
   83ae0:	000837f5 	.word	0x000837f5
   83ae4:	000837d5 	.word	0x000837d5

00083ae8 <XMEGANVM_EraseMemory>:
 *
 *  \return Boolean \c true if the command sequence complete successfully
 */
bool XMEGANVM_EraseMemory(const uint8_t EraseCommand,
                          const uint32_t Address)
{
   83ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83aea:	4604      	mov	r4, r0
   83aec:	460e      	mov	r6, r1
	/* Wait until the NVM controller is no longer busy */
	if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83aee:	4b36      	ldr	r3, [pc, #216]	; (83bc8 <XMEGANVM_EraseMemory+0xe0>)
   83af0:	4798      	blx	r3
   83af2:	4603      	mov	r3, r0
   83af4:	b1a8      	cbz	r0, 83b22 <XMEGANVM_EraseMemory+0x3a>
	  return false;

	/* EEPROM and Chip erasures are triggered differently to FLASH section erasures */
	if (EraseCommand == XMEGA_NVM_CMD_CHIPERASE)
   83af6:	2c40      	cmp	r4, #64	; 0x40
   83af8:	d015      	beq.n	83b26 <XMEGANVM_EraseMemory+0x3e>
		/* Set CMDEX bit in NVM CTRLA register to start the erase sequence */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else if (EraseCommand == XMEGA_NVM_CMD_ERASEEEPROM)
   83afa:	2c30      	cmp	r4, #48	; 0x30
   83afc:	d022      	beq.n	83b44 <XMEGANVM_EraseMemory+0x5c>
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
	}
	else
	{
		/* Send the memory erase command to the target */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83afe:	204c      	movs	r0, #76	; 0x4c
   83b00:	4d32      	ldr	r5, [pc, #200]	; (83bcc <XMEGANVM_EraseMemory+0xe4>)
   83b02:	47a8      	blx	r5
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83b04:	200a      	movs	r0, #10
   83b06:	4b32      	ldr	r3, [pc, #200]	; (83bd0 <XMEGANVM_EraseMemory+0xe8>)
   83b08:	4798      	blx	r3
		XPROGTarget_SendByte(EraseCommand);
   83b0a:	4620      	mov	r0, r4
   83b0c:	47a8      	blx	r5

		/* Other erase modes just need us to address a byte within the target memory space */
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b0e:	204c      	movs	r0, #76	; 0x4c
   83b10:	47a8      	blx	r5
		XMEGANVM_SendAddress(Address);
   83b12:	4630      	mov	r0, r6
   83b14:	4b2f      	ldr	r3, [pc, #188]	; (83bd4 <XMEGANVM_EraseMemory+0xec>)
   83b16:	4798      	blx	r3
		XPROGTarget_SendByte(0x00);
   83b18:	2000      	movs	r0, #0
   83b1a:	47a8      	blx	r5
	}

	/* Wait until the NVM bus is ready again */
	if (!(XMEGANVM_WaitWhileNVMBusBusy())) {
   83b1c:	4b2e      	ldr	r3, [pc, #184]	; (83bd8 <XMEGANVM_EraseMemory+0xf0>)
   83b1e:	4798      	blx	r3
   83b20:	4603      	mov	r3, r0
	  return false;
	}

	return true;
}
   83b22:	4618      	mov	r0, r3
   83b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b26:	204c      	movs	r0, #76	; 0x4c
   83b28:	4c28      	ldr	r4, [pc, #160]	; (83bcc <XMEGANVM_EraseMemory+0xe4>)
   83b2a:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83b2c:	200a      	movs	r0, #10
   83b2e:	4d28      	ldr	r5, [pc, #160]	; (83bd0 <XMEGANVM_EraseMemory+0xe8>)
   83b30:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83b32:	2040      	movs	r0, #64	; 0x40
   83b34:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b36:	204c      	movs	r0, #76	; 0x4c
   83b38:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83b3a:	200b      	movs	r0, #11
   83b3c:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83b3e:	2001      	movs	r0, #1
   83b40:	47a0      	blx	r4
   83b42:	e7eb      	b.n	83b1c <XMEGANVM_EraseMemory+0x34>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b44:	204c      	movs	r0, #76	; 0x4c
   83b46:	4c21      	ldr	r4, [pc, #132]	; (83bcc <XMEGANVM_EraseMemory+0xe4>)
   83b48:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83b4a:	200a      	movs	r0, #10
   83b4c:	4d20      	ldr	r5, [pc, #128]	; (83bd0 <XMEGANVM_EraseMemory+0xe8>)
   83b4e:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF);
   83b50:	2036      	movs	r0, #54	; 0x36
   83b52:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b54:	204c      	movs	r0, #76	; 0x4c
   83b56:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83b58:	200b      	movs	r0, #11
   83b5a:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83b5c:	2001      	movs	r0, #1
   83b5e:	47a0      	blx	r4
		if (!(XMEGANVM_WaitWhileNVMControllerBusy()))
   83b60:	4b19      	ldr	r3, [pc, #100]	; (83bc8 <XMEGANVM_EraseMemory+0xe0>)
   83b62:	4798      	blx	r3
   83b64:	4603      	mov	r3, r0
   83b66:	2800      	cmp	r0, #0
   83b68:	d0db      	beq.n	83b22 <XMEGANVM_EraseMemory+0x3a>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83b6a:	204c      	movs	r0, #76	; 0x4c
   83b6c:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83b6e:	200a      	movs	r0, #10
   83b70:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF);
   83b72:	2033      	movs	r0, #51	; 0x33
   83b74:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_DIRECT, PDI_DATASIZE_4BYTES));
   83b76:	206b      	movs	r0, #107	; 0x6b
   83b78:	47a0      	blx	r4
		XMEGANVM_SendAddress(Address);
   83b7a:	4630      	mov	r0, r6
   83b7c:	4b15      	ldr	r3, [pc, #84]	; (83bd4 <XMEGANVM_EraseMemory+0xec>)
   83b7e:	4798      	blx	r3
		XPROGTarget_SendByte(PDI_CMD_REPEAT(PDI_DATASIZE_1BYTE));
   83b80:	20a0      	movs	r0, #160	; 0xa0
   83b82:	47a0      	blx	r4
		XPROGTarget_SendByte(XPROG_Param_EEPageSize - 1);
   83b84:	4d15      	ldr	r5, [pc, #84]	; (83bdc <XMEGANVM_EraseMemory+0xf4>)
   83b86:	7828      	ldrb	r0, [r5, #0]
   83b88:	3801      	subs	r0, #1
   83b8a:	b2c0      	uxtb	r0, r0
   83b8c:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_ST(PDI_POINTER_INDIRECT_PI, PDI_DATASIZE_1BYTE));
   83b8e:	2064      	movs	r0, #100	; 0x64
   83b90:	47a0      	blx	r4
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83b92:	882b      	ldrh	r3, [r5, #0]
   83b94:	b14b      	cbz	r3, 83baa <XMEGANVM_EraseMemory+0xc2>
   83b96:	2400      	movs	r4, #0
		  XPROGTarget_SendByte(0x00);
   83b98:	4627      	mov	r7, r4
   83b9a:	4e0c      	ldr	r6, [pc, #48]	; (83bcc <XMEGANVM_EraseMemory+0xe4>)
   83b9c:	4638      	mov	r0, r7
   83b9e:	47b0      	blx	r6
		for (uint8_t PageByte = 0; PageByte < XPROG_Param_EEPageSize; PageByte++)
   83ba0:	3401      	adds	r4, #1
   83ba2:	b2e4      	uxtb	r4, r4
   83ba4:	882b      	ldrh	r3, [r5, #0]
   83ba6:	42a3      	cmp	r3, r4
   83ba8:	d8f8      	bhi.n	83b9c <XMEGANVM_EraseMemory+0xb4>
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83baa:	204c      	movs	r0, #76	; 0x4c
   83bac:	4c07      	ldr	r4, [pc, #28]	; (83bcc <XMEGANVM_EraseMemory+0xe4>)
   83bae:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CMD);
   83bb0:	200a      	movs	r0, #10
   83bb2:	4d07      	ldr	r5, [pc, #28]	; (83bd0 <XMEGANVM_EraseMemory+0xe8>)
   83bb4:	47a8      	blx	r5
		XPROGTarget_SendByte(EraseCommand);
   83bb6:	2030      	movs	r0, #48	; 0x30
   83bb8:	47a0      	blx	r4
		XPROGTarget_SendByte(PDI_CMD_STS(PDI_DATASIZE_4BYTES, PDI_DATASIZE_1BYTE));
   83bba:	204c      	movs	r0, #76	; 0x4c
   83bbc:	47a0      	blx	r4
		XMEGANVM_SendNVMRegAddress(XMEGA_NVM_REG_CTRLA);
   83bbe:	200b      	movs	r0, #11
   83bc0:	47a8      	blx	r5
		XPROGTarget_SendByte(XMEGA_NVM_BIT_CTRLA_CMDEX);
   83bc2:	2001      	movs	r0, #1
   83bc4:	47a0      	blx	r4
   83bc6:	e7a9      	b.n	83b1c <XMEGANVM_EraseMemory+0x34>
   83bc8:	00083839 	.word	0x00083839
   83bcc:	00084069 	.word	0x00084069
   83bd0:	000837f5 	.word	0x000837f5
   83bd4:	000837d5 	.word	0x000837d5
   83bd8:	0008380d 	.word	0x0008380d
   83bdc:	20000a5e 	.word	0x20000a5e

00083be0 <XPROGProtocol_Command>:
/** Handler for the CMD_XPROG command, which wraps up XPROG commands in a V2 wrapper which need to be
 *  removed and processed so that the underlying XPROG command can be handled.
 */
#define XMEGA_BUF_SIZE 256
bool XPROGProtocol_Command(void)
{
   83be0:	b570      	push	{r4, r5, r6, lr}
   83be2:	b084      	sub	sp, #16
	static uint8_t status_payload[4];
	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;	
   83be4:	4b8e      	ldr	r3, [pc, #568]	; (83e20 <XPROGProtocol_Command+0x240>)
   83be6:	8858      	ldrh	r0, [r3, #2]
   83be8:	b2c3      	uxtb	r3, r0
   83bea:	4a8e      	ldr	r2, [pc, #568]	; (83e24 <XPROGProtocol_Command+0x244>)
   83bec:	7013      	strb	r3, [r2, #0]
	
	static uint8_t xprog_rambuf[XMEGA_BUF_SIZE];
	uint8_t offset;
	
	switch (status_payload[0])
   83bee:	3b01      	subs	r3, #1
   83bf0:	2b21      	cmp	r3, #33	; 0x21
   83bf2:	d82b      	bhi.n	83c4c <XPROGProtocol_Command+0x6c>
   83bf4:	e8df f013 	tbh	[pc, r3, lsl #1]
   83bf8:	002f0022 	.word	0x002f0022
   83bfc:	00730037 	.word	0x00730037
   83c00:	00c900a5 	.word	0x00c900a5
   83c04:	002a00cc 	.word	0x002a00cc
   83c08:	002a002a 	.word	0x002a002a
   83c0c:	002a002a 	.word	0x002a002a
   83c10:	002a002a 	.word	0x002a002a
   83c14:	002a002a 	.word	0x002a002a
   83c18:	002a002a 	.word	0x002a002a
   83c1c:	002a002a 	.word	0x002a002a
   83c20:	002a002a 	.word	0x002a002a
   83c24:	002a002a 	.word	0x002a002a
   83c28:	002a002a 	.word	0x002a002a
   83c2c:	002a002a 	.word	0x002a002a
   83c30:	002a002a 	.word	0x002a002a
   83c34:	0160002a 	.word	0x0160002a
   83c38:	014f0141 	.word	0x014f0141
	{
		case XPROG_CMD_ENTER_PROGMODE:
			start_timeoutcnt();
   83c3c:	4b7a      	ldr	r3, [pc, #488]	; (83e28 <XPROGProtocol_Command+0x248>)
   83c3e:	4798      	blx	r3
	return false;
}
/** Handler for the XPROG ENTER_PROGMODE command to establish a connection with the attached device. */
static void XPROGProtocol_EnterXPROGMode(void)
{	
	bool NVMBusEnabled = XMEGANVM_EnablePDI();
   83c40:	4b7a      	ldr	r3, [pc, #488]	; (83e2c <XPROGProtocol_Command+0x24c>)
   83c42:	4798      	blx	r3
	XPROG_Status = NVMBusEnabled ? XPROG_ERR_OK : XPROG_ERR_FAILED;
   83c44:	f080 0001 	eor.w	r0, r0, #1
   83c48:	4b79      	ldr	r3, [pc, #484]	; (83e30 <XPROGProtocol_Command+0x250>)
   83c4a:	7018      	strb	r0, [r3, #0]
	stop_timeoutcnt();
   83c4c:	4b79      	ldr	r3, [pc, #484]	; (83e34 <XPROGProtocol_Command+0x254>)
   83c4e:	4798      	blx	r3
	return false;
   83c50:	2000      	movs	r0, #0
}
   83c52:	b004      	add	sp, #16
   83c54:	bd70      	pop	{r4, r5, r6, pc}
			start_timeoutcnt();
   83c56:	4b74      	ldr	r3, [pc, #464]	; (83e28 <XPROGProtocol_Command+0x248>)
   83c58:	4798      	blx	r3
/** Handler for the XPROG LEAVE_PROGMODE command to terminate the PDI programming connection with
 *  the attached device.
 */
static void XPROGProtocol_LeaveXPROGMode(void)
{
    XMEGANVM_DisablePDI();
   83c5a:	4b77      	ldr	r3, [pc, #476]	; (83e38 <XPROGProtocol_Command+0x258>)
   83c5c:	4798      	blx	r3
	XPROG_Status = XPROG_ERR_OK;
   83c5e:	2200      	movs	r2, #0
   83c60:	4b73      	ldr	r3, [pc, #460]	; (83e30 <XPROGProtocol_Command+0x250>)
   83c62:	701a      	strb	r2, [r3, #0]
   83c64:	e7f2      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83c66:	4b70      	ldr	r3, [pc, #448]	; (83e28 <XPROGProtocol_Command+0x248>)
   83c68:	4798      	blx	r3
}

/** Handler for the XPRG ERASE command to erase a specific memory address space in the attached device. */
static void XPROGProtocol_Erase(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83c6a:	2200      	movs	r2, #0
   83c6c:	4b70      	ldr	r3, [pc, #448]	; (83e30 <XPROGProtocol_Command+0x250>)
   83c6e:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.payload_size < 5){
   83c70:	4b6b      	ldr	r3, [pc, #428]	; (83e20 <XPROGProtocol_Command+0x240>)
   83c72:	899b      	ldrh	r3, [r3, #12]
   83c74:	2b04      	cmp	r3, #4
   83c76:	d915      	bls.n	83ca4 <XPROGProtocol_Command+0xc4>
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
   83c78:	4b69      	ldr	r3, [pc, #420]	; (83e20 <XPROGProtocol_Command+0x240>)
   83c7a:	689b      	ldr	r3, [r3, #8]
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83c7c:	791a      	ldrb	r2, [r3, #4]
   83c7e:	78d9      	ldrb	r1, [r3, #3]
   83c80:	0409      	lsls	r1, r1, #16
   83c82:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83c86:	785a      	ldrb	r2, [r3, #1]
   83c88:	4311      	orrs	r1, r2
   83c8a:	789a      	ldrb	r2, [r3, #2]
   83c8c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8

	uint8_t EraseCommand;

	/* Determine which NVM command to send to the device depending on the memory to erase */
	switch (MemoryType)
   83c90:	781b      	ldrb	r3, [r3, #0]
   83c92:	3b01      	subs	r3, #1
   83c94:	2b07      	cmp	r3, #7
   83c96:	d817      	bhi.n	83cc8 <XPROGProtocol_Command+0xe8>
   83c98:	e8df f003 	tbb	[pc, r3]
   83c9c:	0c0a0818 	.word	0x0c0a0818
   83ca0:	1412100e 	.word	0x1412100e
		XPROG_Status = XPROG_ERR_FAILED;
   83ca4:	2201      	movs	r2, #1
   83ca6:	4b62      	ldr	r3, [pc, #392]	; (83e30 <XPROGProtocol_Command+0x250>)
   83ca8:	701a      	strb	r2, [r3, #0]
   83caa:	e7cf      	b.n	83c4c <XPROGProtocol_Command+0x6c>
	{
		case XPROG_ERASE_CHIP:
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
		break;
		case XPROG_ERASE_APP:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSEC;
   83cac:	2020      	movs	r0, #32
   83cae:	e00e      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSEC;
   83cb0:	2068      	movs	r0, #104	; 0x68
   83cb2:	e00c      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROM;
   83cb4:	2030      	movs	r0, #48	; 0x30
   83cb6:	e00a      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_APP_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEAPPSECPAGE;
   83cb8:	2022      	movs	r0, #34	; 0x22
   83cba:	e008      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_BOOT_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEBOOTSECPAGE;
   83cbc:	202a      	movs	r0, #42	; 0x2a
   83cbe:	e006      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_EEPROM_PAGE:
		EraseCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGE;
   83cc0:	2032      	movs	r0, #50	; 0x32
   83cc2:	e004      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		case XPROG_ERASE_USERSIG:
		EraseCommand = XMEGA_NVM_CMD_ERASEUSERSIG;
   83cc4:	2018      	movs	r0, #24
   83cc6:	e002      	b.n	83cce <XPROGProtocol_Command+0xee>
		break;
		default:
		EraseCommand = XMEGA_NVM_CMD_NOOP;
   83cc8:	2000      	movs	r0, #0
   83cca:	e000      	b.n	83cce <XPROGProtocol_Command+0xee>
		EraseCommand = XMEGA_NVM_CMD_CHIPERASE;
   83ccc:	2040      	movs	r0, #64	; 0x40
		break;
	}

	/* Erase the target memory, indicate timeout if occurred */
	if (XMEGANVM_EraseMemory(EraseCommand, Address) == false) {
   83cce:	4b5b      	ldr	r3, [pc, #364]	; (83e3c <XPROGProtocol_Command+0x25c>)
   83cd0:	4798      	blx	r3
   83cd2:	2800      	cmp	r0, #0
   83cd4:	d1ba      	bne.n	83c4c <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;		
   83cd6:	2203      	movs	r2, #3
   83cd8:	4b55      	ldr	r3, [pc, #340]	; (83e30 <XPROGProtocol_Command+0x250>)
   83cda:	701a      	strb	r2, [r3, #0]
   83cdc:	e7b6      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83cde:	4b52      	ldr	r3, [pc, #328]	; (83e28 <XPROGProtocol_Command+0x248>)
   83ce0:	4798      	blx	r3
}

/** Handler for the XPROG WRITE_MEMORY command to write to a specific memory space within the attached device. */
static void XPROGProtocol_WriteMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83ce2:	2200      	movs	r2, #0
   83ce4:	4b52      	ldr	r3, [pc, #328]	; (83e30 <XPROGProtocol_Command+0x250>)
   83ce6:	701a      	strb	r2, [r3, #0]
	
	if (udd_g_ctrlreq.req.wLength < 8) {
   83ce8:	4b4d      	ldr	r3, [pc, #308]	; (83e20 <XPROGProtocol_Command+0x240>)
   83cea:	88db      	ldrh	r3, [r3, #6]
   83cec:	2b07      	cmp	r3, #7
   83cee:	d802      	bhi.n	83cf6 <XPROGProtocol_Command+0x116>
		XPROG_Status = XPROG_ERR_FAILED;
   83cf0:	2201      	movs	r2, #1
   83cf2:	4b4f      	ldr	r3, [pc, #316]	; (83e30 <XPROGProtocol_Command+0x250>)
   83cf4:	701a      	strb	r2, [r3, #0]
	}
	
	uint8_t MemoryType = udd_g_ctrlreq.payload[0];
   83cf6:	4b4a      	ldr	r3, [pc, #296]	; (83e20 <XPROGProtocol_Command+0x240>)
   83cf8:	689b      	ldr	r3, [r3, #8]
	uint8_t  PageMode = udd_g_ctrlreq.payload[1];
	uint32_t Address = (udd_g_ctrlreq.payload[5] << 24) | (udd_g_ctrlreq.payload[4] << 16) | (udd_g_ctrlreq.payload[3] << 8) | (udd_g_ctrlreq.payload[2]);
   83cfa:	795a      	ldrb	r2, [r3, #5]
   83cfc:	7919      	ldrb	r1, [r3, #4]
   83cfe:	0409      	lsls	r1, r1, #16
   83d00:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
   83d04:	789a      	ldrb	r2, [r3, #2]
   83d06:	4311      	orrs	r1, r2
   83d08:	78da      	ldrb	r2, [r3, #3]
   83d0a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
	bool    PagedMemory      = true;

	switch (MemoryType)
   83d0e:	781a      	ldrb	r2, [r3, #0]
   83d10:	3a01      	subs	r2, #1
   83d12:	2a05      	cmp	r2, #5
   83d14:	d811      	bhi.n	83d3a <XPROGProtocol_Command+0x15a>
   83d16:	e8df f012 	tbh	[pc, r2, lsl #1]
   83d1a:	00e1      	.short	0x00e1
   83d1c:	00e50008 	.word	0x00e50008
   83d20:	000600fd 	.word	0x000600fd
   83d24:	000c      	.short	0x000c
		case XPROG_MEM_TYPE_FUSE:
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
		PagedMemory      = false;
		break;
		case XPROG_MEM_TYPE_LOCKBITS:
		WriteCommand     = XMEGA_NVM_CMD_WRITELOCK;
   83d26:	2008      	movs	r0, #8
   83d28:	e0f5      	b.n	83f16 <XPROGProtocol_Command+0x336>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83d2a:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83d2c:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEBOOTSECPAGE;
   83d2e:	222c      	movs	r2, #44	; 0x2c
   83d30:	e0db      	b.n	83eea <XPROGProtocol_Command+0x30a>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83d32:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83d34:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEUSERSIG;
   83d36:	221a      	movs	r2, #26
   83d38:	e0d7      	b.n	83eea <XPROGProtocol_Command+0x30a>
	uint8_t WriteCommand     = XMEGA_NVM_CMD_WRITEFLASHPAGE;
   83d3a:	222e      	movs	r2, #46	; 0x2e
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83d3c:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83d3e:	2023      	movs	r0, #35	; 0x23
   83d40:	e0d3      	b.n	83eea <XPROGProtocol_Command+0x30a>
			start_timeoutcnt();
   83d42:	4b39      	ldr	r3, [pc, #228]	; (83e28 <XPROGProtocol_Command+0x248>)
   83d44:	4798      	blx	r3
/** Handler for the XPROG READ_MEMORY command to read data from a specific address space within the
 *  attached device.
 */
static void XPROGProtocol_ReadMemory(uint8_t * outbuf)
{
	XPROG_Status = XPROG_ERR_OK;
   83d46:	2200      	movs	r2, #0
   83d48:	4b39      	ldr	r3, [pc, #228]	; (83e30 <XPROGProtocol_Command+0x250>)
   83d4a:	701a      	strb	r2, [r3, #0]
	//uint8_t MemoryType = udd_g_ctrlreq.payload[0]; //Not used
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83d4c:	4b34      	ldr	r3, [pc, #208]	; (83e20 <XPROGProtocol_Command+0x240>)
   83d4e:	6899      	ldr	r1, [r3, #8]
	uint16_t Length = udd_g_ctrlreq.payload[5] | (udd_g_ctrlreq.payload[6] << 8);
   83d50:	798b      	ldrb	r3, [r1, #6]
   83d52:	794a      	ldrb	r2, [r1, #5]
   83d54:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint32_t Address = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83d58:	7908      	ldrb	r0, [r1, #4]
   83d5a:	78cb      	ldrb	r3, [r1, #3]
   83d5c:	041b      	lsls	r3, r3, #16
   83d5e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   83d62:	7848      	ldrb	r0, [r1, #1]
   83d64:	4303      	orrs	r3, r0
   83d66:	7888      	ldrb	r0, [r1, #2]
	}
	
	//printf("Reading from %x, %d\n", Address, Length);

	/* Read the PDI target's memory, indicate timeout if occurred */
	if (!(XMEGANVM_ReadMemory(Address, outbuf, Length))) {
   83d68:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83d6c:	bf28      	it	cs
   83d6e:	f44f 7280 	movcs.w	r2, #256	; 0x100
   83d72:	4933      	ldr	r1, [pc, #204]	; (83e40 <XPROGProtocol_Command+0x260>)
   83d74:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83d78:	4b32      	ldr	r3, [pc, #200]	; (83e44 <XPROGProtocol_Command+0x264>)
   83d7a:	4798      	blx	r3
   83d7c:	2800      	cmp	r0, #0
   83d7e:	f47f af65 	bne.w	83c4c <XPROGProtocol_Command+0x6c>
	  XPROG_Status = XPROG_ERR_TIMEOUT;
   83d82:	2203      	movs	r2, #3
   83d84:	4b2a      	ldr	r3, [pc, #168]	; (83e30 <XPROGProtocol_Command+0x250>)
   83d86:	701a      	strb	r2, [r3, #0]
   83d88:	e760      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83d8a:	4b27      	ldr	r3, [pc, #156]	; (83e28 <XPROGProtocol_Command+0x248>)
   83d8c:	4798      	blx	r3
			break;
   83d8e:	e75d      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			start_timeoutcnt();
   83d90:	4b25      	ldr	r3, [pc, #148]	; (83e28 <XPROGProtocol_Command+0x248>)
   83d92:	4798      	blx	r3
}


static void XPROGProtocol_SetParam(void)
{
	XPROG_Status = XPROG_ERR_OK;
   83d94:	2200      	movs	r2, #0
   83d96:	4b26      	ldr	r3, [pc, #152]	; (83e30 <XPROGProtocol_Command+0x250>)
   83d98:	701a      	strb	r2, [r3, #0]

	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
	
	//At least 2 bytes needed - parameters + value
	if (udd_g_ctrlreq.payload_size < 2){
   83d9a:	4b21      	ldr	r3, [pc, #132]	; (83e20 <XPROGProtocol_Command+0x240>)
   83d9c:	8999      	ldrh	r1, [r3, #12]
   83d9e:	2901      	cmp	r1, #1
   83da0:	d90b      	bls.n	83dba <XPROGProtocol_Command+0x1da>
	uint8_t XPROGParam = udd_g_ctrlreq.payload[0];
   83da2:	4b1f      	ldr	r3, [pc, #124]	; (83e20 <XPROGProtocol_Command+0x240>)
   83da4:	689a      	ldr	r2, [r3, #8]
		XPROG_Status = XPROG_ERR_FAILED;
		return;
	}

	/* Determine which parameter is being set, store the new parameter value */
	switch (XPROGParam)
   83da6:	7813      	ldrb	r3, [r2, #0]
   83da8:	3b01      	subs	r3, #1
   83daa:	2b07      	cmp	r3, #7
   83dac:	d861      	bhi.n	83e72 <XPROGProtocol_Command+0x292>
   83dae:	e8df f003 	tbb	[pc, r3]
   83db2:	1b08      	.short	0x1b08
   83db4:	60602c28 	.word	0x60602c28
   83db8:	3060      	.short	0x3060
		XPROG_Status = XPROG_ERR_FAILED;
   83dba:	2201      	movs	r2, #1
   83dbc:	4b1c      	ldr	r3, [pc, #112]	; (83e30 <XPROGProtocol_Command+0x250>)
   83dbe:	701a      	strb	r2, [r3, #0]
   83dc0:	e744      	b.n	83c4c <XPROGProtocol_Command+0x6c>
	{
		case XPROG_PARAM_NVMBASE:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83dc2:	2904      	cmp	r1, #4
   83dc4:	d803      	bhi.n	83dce <XPROGProtocol_Command+0x1ee>
				XPROG_Status = XPROG_ERR_FAILED;
   83dc6:	2201      	movs	r2, #1
   83dc8:	4b19      	ldr	r3, [pc, #100]	; (83e30 <XPROGProtocol_Command+0x250>)
   83dca:	701a      	strb	r2, [r3, #0]
   83dcc:	e73e      	b.n	83c4c <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_NVMBase       = (udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]);
   83dce:	7911      	ldrb	r1, [r2, #4]
   83dd0:	78d3      	ldrb	r3, [r2, #3]
   83dd2:	041b      	lsls	r3, r3, #16
   83dd4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83dd8:	7851      	ldrb	r1, [r2, #1]
   83dda:	430b      	orrs	r3, r1
   83ddc:	7892      	ldrb	r2, [r2, #2]
   83dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   83de2:	4a19      	ldr	r2, [pc, #100]	; (83e48 <XPROGProtocol_Command+0x268>)
   83de4:	6013      	str	r3, [r2, #0]
   83de6:	e731      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_EEPPAGESIZE:
			//3 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 3){
   83de8:	2902      	cmp	r1, #2
   83dea:	d803      	bhi.n	83df4 <XPROGProtocol_Command+0x214>
				XPROG_Status = XPROG_ERR_FAILED;
   83dec:	2201      	movs	r2, #1
   83dee:	4b10      	ldr	r3, [pc, #64]	; (83e30 <XPROGProtocol_Command+0x250>)
   83df0:	701a      	strb	r2, [r3, #0]
   83df2:	e72b      	b.n	83c4c <XPROGProtocol_Command+0x6c>
				return;
			}
			XPROG_Param_EEPageSize    = udd_g_ctrlreq.payload[1] | (udd_g_ctrlreq.payload[2] << 8);
   83df4:	7891      	ldrb	r1, [r2, #2]
   83df6:	7853      	ldrb	r3, [r2, #1]
   83df8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   83dfc:	4a13      	ldr	r2, [pc, #76]	; (83e4c <XPROGProtocol_Command+0x26c>)
   83dfe:	8013      	strh	r3, [r2, #0]
   83e00:	e724      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCMD_REG:
			XPROG_Param_NVMCMDRegAddr = udd_g_ctrlreq.payload[1];
   83e02:	7852      	ldrb	r2, [r2, #1]
   83e04:	4b12      	ldr	r3, [pc, #72]	; (83e50 <XPROGProtocol_Command+0x270>)
   83e06:	701a      	strb	r2, [r3, #0]
   83e08:	e720      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_NVMCSR_REG:
			XPROG_Param_NVMCSRRegAddr = udd_g_ctrlreq.payload[1];
   83e0a:	7852      	ldrb	r2, [r2, #1]
   83e0c:	4b11      	ldr	r3, [pc, #68]	; (83e54 <XPROGProtocol_Command+0x274>)
   83e0e:	701a      	strb	r2, [r3, #0]
   83e10:	e71c      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			break;
		case XPROG_PARAM_TIMEOUT:
			//5 bytes - parameters + value
			if (udd_g_ctrlreq.payload_size < 5){
   83e12:	2904      	cmp	r1, #4
   83e14:	d820      	bhi.n	83e58 <XPROGProtocol_Command+0x278>
				XPROG_Status = XPROG_ERR_FAILED;
   83e16:	2201      	movs	r2, #1
   83e18:	4b05      	ldr	r3, [pc, #20]	; (83e30 <XPROGProtocol_Command+0x250>)
   83e1a:	701a      	strb	r2, [r3, #0]
   83e1c:	e716      	b.n	83c4c <XPROGProtocol_Command+0x6c>
   83e1e:	bf00      	nop
   83e20:	200027ac 	.word	0x200027ac
   83e24:	2000208c 	.word	0x2000208c
   83e28:	00084239 	.word	0x00084239
   83e2c:	00083875 	.word	0x00083875
   83e30:	20002790 	.word	0x20002790
   83e34:	00084281 	.word	0x00084281
   83e38:	000838f1 	.word	0x000838f1
   83e3c:	00083ae9 	.word	0x00083ae9
   83e40:	20002090 	.word	0x20002090
   83e44:	0008392d 	.word	0x0008392d
   83e48:	20000a60 	.word	0x20000a60
   83e4c:	20000a5e 	.word	0x20000a5e
   83e50:	20000a64 	.word	0x20000a64
   83e54:	20000a65 	.word	0x20000a65
				return;
			}
			set_timeout((udd_g_ctrlreq.payload[4] << 24) | (udd_g_ctrlreq.payload[3] << 16) | (udd_g_ctrlreq.payload[2] << 8) | (udd_g_ctrlreq.payload[1]));
   83e58:	7911      	ldrb	r1, [r2, #4]
   83e5a:	78d3      	ldrb	r3, [r2, #3]
   83e5c:	041b      	lsls	r3, r3, #16
   83e5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   83e62:	7851      	ldrb	r1, [r2, #1]
   83e64:	430b      	orrs	r3, r1
   83e66:	7890      	ldrb	r0, [r2, #2]
   83e68:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   83e6c:	4b2f      	ldr	r3, [pc, #188]	; (83f2c <XPROGProtocol_Command+0x34c>)
   83e6e:	4798      	blx	r3
   83e70:	e6ec      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			break;
		default:
			XPROG_Status = XPROG_ERR_FAILED;
   83e72:	2201      	movs	r2, #1
   83e74:	4b2e      	ldr	r3, [pc, #184]	; (83f30 <XPROGProtocol_Command+0x350>)
   83e76:	701a      	strb	r2, [r3, #0]
   83e78:	e6e8      	b.n	83c4c <XPROGProtocol_Command+0x6c>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83e7a:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   83e7c:	4b2d      	ldr	r3, [pc, #180]	; (83f34 <XPROGProtocol_Command+0x354>)
   83e7e:	88db      	ldrh	r3, [r3, #6]
   83e80:	18c2      	adds	r2, r0, r3
   83e82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   83e86:	dc27      	bgt.n	83ed8 <XPROGProtocol_Command+0x2f8>
			udd_g_ctrlreq.payload = xprog_rambuf + offset;
   83e88:	492a      	ldr	r1, [pc, #168]	; (83f34 <XPROGProtocol_Command+0x354>)
   83e8a:	4a2b      	ldr	r2, [pc, #172]	; (83f38 <XPROGProtocol_Command+0x358>)
   83e8c:	4410      	add	r0, r2
   83e8e:	6088      	str	r0, [r1, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83e90:	818b      	strh	r3, [r1, #12]
			return true;
   83e92:	2001      	movs	r0, #1
   83e94:	e6dd      	b.n	83c52 <XPROGProtocol_Command+0x72>
			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
   83e96:	0a00      	lsrs	r0, r0, #8
			if ((offset + udd_g_ctrlreq.req.wLength) > XMEGA_BUF_SIZE){
   83e98:	4b26      	ldr	r3, [pc, #152]	; (83f34 <XPROGProtocol_Command+0x354>)
   83e9a:	88da      	ldrh	r2, [r3, #6]
   83e9c:	1883      	adds	r3, r0, r2
   83e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   83ea2:	dd01      	ble.n	83ea8 <XPROGProtocol_Command+0x2c8>
				return false;
   83ea4:	2000      	movs	r0, #0
   83ea6:	e6d4      	b.n	83c52 <XPROGProtocol_Command+0x72>
			memcpy(xprog_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
   83ea8:	4b22      	ldr	r3, [pc, #136]	; (83f34 <XPROGProtocol_Command+0x354>)
   83eaa:	6899      	ldr	r1, [r3, #8]
   83eac:	4b22      	ldr	r3, [pc, #136]	; (83f38 <XPROGProtocol_Command+0x358>)
   83eae:	4418      	add	r0, r3
   83eb0:	4b22      	ldr	r3, [pc, #136]	; (83f3c <XPROGProtocol_Command+0x35c>)
   83eb2:	4798      	blx	r3
			return true;
   83eb4:	2001      	movs	r0, #1
   83eb6:	e6cc      	b.n	83c52 <XPROGProtocol_Command+0x72>
			status_payload[1] = XPROG_Status;
   83eb8:	4a21      	ldr	r2, [pc, #132]	; (83f40 <XPROGProtocol_Command+0x360>)
   83eba:	4b1d      	ldr	r3, [pc, #116]	; (83f30 <XPROGProtocol_Command+0x350>)
   83ebc:	781b      	ldrb	r3, [r3, #0]
   83ebe:	7053      	strb	r3, [r2, #1]
			status_payload[2] = (uint8_t)(TimeoutTicksRemaining == 0);
   83ec0:	4b20      	ldr	r3, [pc, #128]	; (83f44 <XPROGProtocol_Command+0x364>)
   83ec2:	681b      	ldr	r3, [r3, #0]
   83ec4:	fab3 f383 	clz	r3, r3
   83ec8:	095b      	lsrs	r3, r3, #5
   83eca:	7093      	strb	r3, [r2, #2]
			udd_g_ctrlreq.payload = status_payload;
   83ecc:	4b19      	ldr	r3, [pc, #100]	; (83f34 <XPROGProtocol_Command+0x354>)
   83ece:	609a      	str	r2, [r3, #8]
			udd_g_ctrlreq.payload_size = 3;
   83ed0:	2203      	movs	r2, #3
   83ed2:	819a      	strh	r2, [r3, #12]
			return true;
   83ed4:	2001      	movs	r0, #1
   83ed6:	e6bc      	b.n	83c52 <XPROGProtocol_Command+0x72>
				return false;
   83ed8:	2000      	movs	r0, #0
   83eda:	e6ba      	b.n	83c52 <XPROGProtocol_Command+0x72>
	uint8_t EraseBuffCommand = XMEGA_NVM_CMD_ERASEFLASHPAGEBUFF;
   83edc:	2526      	movs	r5, #38	; 0x26
	uint8_t WriteBuffCommand = XMEGA_NVM_CMD_LOADFLASHPAGEBUFF;
   83ede:	2023      	movs	r0, #35	; 0x23
		WriteCommand     = XMEGA_NVM_CMD_WRITEAPPSECPAGE;
   83ee0:	2224      	movs	r2, #36	; 0x24
   83ee2:	e002      	b.n	83eea <XPROGProtocol_Command+0x30a>
		EraseBuffCommand = XMEGA_NVM_CMD_ERASEEEPROMPAGEBUFF;
   83ee4:	2536      	movs	r5, #54	; 0x36
		WriteBuffCommand = XMEGA_NVM_CMD_LOADEEPROMPAGEBUFF;
   83ee6:	2033      	movs	r0, #51	; 0x33
		WriteCommand     = XMEGA_NVM_CMD_ERASEWRITEEEPROMPAGE;
   83ee8:	2235      	movs	r2, #53	; 0x35
	uint16_t Length = udd_g_ctrlreq.payload[6] | (udd_g_ctrlreq.payload[7] << 8);
   83eea:	79de      	ldrb	r6, [r3, #7]
   83eec:	799c      	ldrb	r4, [r3, #6]
   83eee:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
	if ((PagedMemory && !(XMEGANVM_WritePageMemory(WriteBuffCommand, EraseBuffCommand, WriteCommand,
   83ef2:	785b      	ldrb	r3, [r3, #1]
   83ef4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   83ef8:	bf28      	it	cs
   83efa:	f44f 7480 	movcs.w	r4, #256	; 0x100
   83efe:	9402      	str	r4, [sp, #8]
   83f00:	4c0d      	ldr	r4, [pc, #52]	; (83f38 <XPROGProtocol_Command+0x358>)
   83f02:	9401      	str	r4, [sp, #4]
   83f04:	9100      	str	r1, [sp, #0]
   83f06:	4629      	mov	r1, r5
   83f08:	4c0f      	ldr	r4, [pc, #60]	; (83f48 <XPROGProtocol_Command+0x368>)
   83f0a:	47a0      	blx	r4
   83f0c:	2800      	cmp	r0, #0
   83f0e:	f47f ae9d 	bne.w	83c4c <XPROGProtocol_Command+0x6c>
   83f12:	e007      	b.n	83f24 <XPROGProtocol_Command+0x344>
		WriteCommand     = XMEGA_NVM_CMD_WRITEFUSE;
   83f14:	204c      	movs	r0, #76	; 0x4c
	     (!PagedMemory && !(XMEGANVM_WriteByteMemory(WriteCommand, Address, outbuf[0]))) )
   83f16:	4b08      	ldr	r3, [pc, #32]	; (83f38 <XPROGProtocol_Command+0x358>)
   83f18:	781a      	ldrb	r2, [r3, #0]
   83f1a:	4b0c      	ldr	r3, [pc, #48]	; (83f4c <XPROGProtocol_Command+0x36c>)
   83f1c:	4798      	blx	r3
   83f1e:	2800      	cmp	r0, #0
   83f20:	f47f ae94 	bne.w	83c4c <XPROGProtocol_Command+0x6c>
		XPROG_Status = XPROG_ERR_TIMEOUT;
   83f24:	2203      	movs	r2, #3
   83f26:	4b02      	ldr	r3, [pc, #8]	; (83f30 <XPROGProtocol_Command+0x350>)
   83f28:	701a      	strb	r2, [r3, #0]
   83f2a:	e68f      	b.n	83c4c <XPROGProtocol_Command+0x6c>
   83f2c:	000841c9 	.word	0x000841c9
   83f30:	20002790 	.word	0x20002790
   83f34:	200027ac 	.word	0x200027ac
   83f38:	20002090 	.word	0x20002090
   83f3c:	00086c89 	.word	0x00086c89
   83f40:	2000208c 	.word	0x2000208c
   83f44:	20002794 	.word	0x20002794
   83f48:	00083a11 	.word	0x00083a11
   83f4c:	000839c9 	.word	0x000839c9

00083f50 <XPROGTarget_SetRxMode>:

	IsSending = true;
}

static void XPROGTarget_SetRxMode(void)
{
   83f50:	b538      	push	{r3, r4, r5, lr}
	while(usart_is_tx_empty(USART_PDI) == 0);
   83f52:	4d0b      	ldr	r5, [pc, #44]	; (83f80 <XPROGTarget_SetRxMode+0x30>)
   83f54:	4c0b      	ldr	r4, [pc, #44]	; (83f84 <XPROGTarget_SetRxMode+0x34>)
   83f56:	4628      	mov	r0, r5
   83f58:	47a0      	blx	r4
   83f5a:	2800      	cmp	r0, #0
   83f5c:	d0fb      	beq.n	83f56 <XPROGTarget_SetRxMode+0x6>

	usart_disable_tx(USART_PDI);
   83f5e:	4c08      	ldr	r4, [pc, #32]	; (83f80 <XPROGTarget_SetRxMode+0x30>)
   83f60:	4620      	mov	r0, r4
   83f62:	4b09      	ldr	r3, [pc, #36]	; (83f88 <XPROGTarget_SetRxMode+0x38>)
   83f64:	4798      	blx	r3
	usart_enable_rx(USART_PDI);
   83f66:	4620      	mov	r0, r4
   83f68:	4b08      	ldr	r3, [pc, #32]	; (83f8c <XPROGTarget_SetRxMode+0x3c>)
   83f6a:	4798      	blx	r3
	
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   83f6c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83f70:	2014      	movs	r0, #20
   83f72:	4b07      	ldr	r3, [pc, #28]	; (83f90 <XPROGTarget_SetRxMode+0x40>)
   83f74:	4798      	blx	r3
	
#ifdef PIN_PDIDWR_GPIO
	gpio_set_pin_low(PIN_PDIDWR_GPIO);
#endif
	
	IsSending = false;
   83f76:	2200      	movs	r2, #0
   83f78:	4b06      	ldr	r3, [pc, #24]	; (83f94 <XPROGTarget_SetRxMode+0x44>)
   83f7a:	701a      	strb	r2, [r3, #0]
   83f7c:	bd38      	pop	{r3, r4, r5, pc}
   83f7e:	bf00      	nop
   83f80:	40094000 	.word	0x40094000
   83f84:	00086339 	.word	0x00086339
   83f88:	00086317 	.word	0x00086317
   83f8c:	0008631d 	.word	0x0008631d
   83f90:	000848cd 	.word	0x000848cd
   83f94:	20002190 	.word	0x20002190

00083f98 <XPROGTarget_SetTxMode>:
{
   83f98:	b570      	push	{r4, r5, r6, lr}
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83f9a:	2518      	movs	r5, #24
   83f9c:	4c14      	ldr	r4, [pc, #80]	; (83ff0 <XPROGTarget_SetTxMode+0x58>)
   83f9e:	4e15      	ldr	r6, [pc, #84]	; (83ff4 <XPROGTarget_SetTxMode+0x5c>)
   83fa0:	4628      	mov	r0, r5
   83fa2:	47a0      	blx	r4
   83fa4:	b110      	cbz	r0, 83fac <XPROGTarget_SetTxMode+0x14>
   83fa6:	6833      	ldr	r3, [r6, #0]
   83fa8:	2b00      	cmp	r3, #0
   83faa:	d1f9      	bne.n	83fa0 <XPROGTarget_SetTxMode+0x8>
	while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83fac:	2518      	movs	r5, #24
   83fae:	4c10      	ldr	r4, [pc, #64]	; (83ff0 <XPROGTarget_SetTxMode+0x58>)
   83fb0:	4e10      	ldr	r6, [pc, #64]	; (83ff4 <XPROGTarget_SetTxMode+0x5c>)
   83fb2:	4628      	mov	r0, r5
   83fb4:	47a0      	blx	r4
   83fb6:	b910      	cbnz	r0, 83fbe <XPROGTarget_SetTxMode+0x26>
   83fb8:	6833      	ldr	r3, [r6, #0]
   83fba:	2b00      	cmp	r3, #0
   83fbc:	d1f9      	bne.n	83fb2 <XPROGTarget_SetTxMode+0x1a>
	while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   83fbe:	2518      	movs	r5, #24
   83fc0:	4c0b      	ldr	r4, [pc, #44]	; (83ff0 <XPROGTarget_SetTxMode+0x58>)
   83fc2:	4e0c      	ldr	r6, [pc, #48]	; (83ff4 <XPROGTarget_SetTxMode+0x5c>)
   83fc4:	4628      	mov	r0, r5
   83fc6:	47a0      	blx	r4
   83fc8:	b110      	cbz	r0, 83fd0 <XPROGTarget_SetTxMode+0x38>
   83fca:	6833      	ldr	r3, [r6, #0]
   83fcc:	2b00      	cmp	r3, #0
   83fce:	d1f9      	bne.n	83fc4 <XPROGTarget_SetTxMode+0x2c>
	usart_disable_rx(USART_PDI);
   83fd0:	4c09      	ldr	r4, [pc, #36]	; (83ff8 <XPROGTarget_SetTxMode+0x60>)
   83fd2:	4620      	mov	r0, r4
   83fd4:	4b09      	ldr	r3, [pc, #36]	; (83ffc <XPROGTarget_SetTxMode+0x64>)
   83fd6:	4798      	blx	r3
	usart_enable_tx(USART_PDI);
   83fd8:	4620      	mov	r0, r4
   83fda:	4b09      	ldr	r3, [pc, #36]	; (84000 <XPROGTarget_SetTxMode+0x68>)
   83fdc:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_USART_FLAGS);
   83fde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83fe2:	2014      	movs	r0, #20
   83fe4:	4b07      	ldr	r3, [pc, #28]	; (84004 <XPROGTarget_SetTxMode+0x6c>)
   83fe6:	4798      	blx	r3
	IsSending = true;
   83fe8:	2201      	movs	r2, #1
   83fea:	4b07      	ldr	r3, [pc, #28]	; (84008 <XPROGTarget_SetTxMode+0x70>)
   83fec:	701a      	strb	r2, [r3, #0]
   83fee:	bd70      	pop	{r4, r5, r6, pc}
   83ff0:	0008485b 	.word	0x0008485b
   83ff4:	20002794 	.word	0x20002794
   83ff8:	40094000 	.word	0x40094000
   83ffc:	00086323 	.word	0x00086323
   84000:	00086311 	.word	0x00086311
   84004:	000848cd 	.word	0x000848cd
   84008:	20002190 	.word	0x20002190

0008400c <XPROGTarget_DisableTargetPDI>:
{
   8400c:	b510      	push	{r4, lr}
	if (IsSending)
   8400e:	4b0f      	ldr	r3, [pc, #60]	; (8404c <XPROGTarget_DisableTargetPDI+0x40>)
   84010:	781b      	ldrb	r3, [r3, #0]
   84012:	b9bb      	cbnz	r3, 84044 <XPROGTarget_DisableTargetPDI+0x38>
	usart_disable_rx(USART_PDI);
   84014:	4c0e      	ldr	r4, [pc, #56]	; (84050 <XPROGTarget_DisableTargetPDI+0x44>)
   84016:	4620      	mov	r0, r4
   84018:	4b0e      	ldr	r3, [pc, #56]	; (84054 <XPROGTarget_DisableTargetPDI+0x48>)
   8401a:	4798      	blx	r3
	usart_disable_tx(USART_PDI);
   8401c:	4620      	mov	r0, r4
   8401e:	4b0e      	ldr	r3, [pc, #56]	; (84058 <XPROGTarget_DisableTargetPDI+0x4c>)
   84020:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_IN_FLAGS);
   84022:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84026:	2018      	movs	r0, #24
   84028:	4c0c      	ldr	r4, [pc, #48]	; (8405c <XPROGTarget_DisableTargetPDI+0x50>)
   8402a:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8402c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84030:	2015      	movs	r0, #21
   84032:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_IN_FLAGS);
   84034:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84038:	2014      	movs	r0, #20
   8403a:	47a0      	blx	r4
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_disable_peripheral_clock(uint32_t ul_id)
{
	pmc_disable_periph_clk(ul_id);
   8403c:	200e      	movs	r0, #14
   8403e:	4b08      	ldr	r3, [pc, #32]	; (84060 <XPROGTarget_DisableTargetPDI+0x54>)
   84040:	4798      	blx	r3
   84042:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetRxMode();
   84044:	4b07      	ldr	r3, [pc, #28]	; (84064 <XPROGTarget_DisableTargetPDI+0x58>)
   84046:	4798      	blx	r3
   84048:	e7e4      	b.n	84014 <XPROGTarget_DisableTargetPDI+0x8>
   8404a:	bf00      	nop
   8404c:	20002190 	.word	0x20002190
   84050:	40094000 	.word	0x40094000
   84054:	00086323 	.word	0x00086323
   84058:	00086317 	.word	0x00086317
   8405c:	000848cd 	.word	0x000848cd
   84060:	00084c45 	.word	0x00084c45
   84064:	00083f51 	.word	0x00083f51

00084068 <XPROGTarget_SendByte>:
{
   84068:	b510      	push	{r4, lr}
   8406a:	4604      	mov	r4, r0
	if (!(IsSending))
   8406c:	4b05      	ldr	r3, [pc, #20]	; (84084 <XPROGTarget_SendByte+0x1c>)
   8406e:	781b      	ldrb	r3, [r3, #0]
   84070:	b123      	cbz	r3, 8407c <XPROGTarget_SendByte+0x14>
	usart_putchar(USART_PDI, data);	
   84072:	4621      	mov	r1, r4
   84074:	4804      	ldr	r0, [pc, #16]	; (84088 <XPROGTarget_SendByte+0x20>)
   84076:	4b05      	ldr	r3, [pc, #20]	; (8408c <XPROGTarget_SendByte+0x24>)
   84078:	4798      	blx	r3
   8407a:	bd10      	pop	{r4, pc}
	  XPROGTarget_SetTxMode();
   8407c:	4b04      	ldr	r3, [pc, #16]	; (84090 <XPROGTarget_SendByte+0x28>)
   8407e:	4798      	blx	r3
   84080:	e7f7      	b.n	84072 <XPROGTarget_SendByte+0xa>
   84082:	bf00      	nop
   84084:	20002190 	.word	0x20002190
   84088:	40094000 	.word	0x40094000
   8408c:	00086355 	.word	0x00086355
   84090:	00083f99 	.word	0x00083f99

00084094 <XPROGTarget_ReceiveByte>:
{
   84094:	b570      	push	{r4, r5, r6, lr}
   84096:	b082      	sub	sp, #8
	if (IsSending)
   84098:	4b0a      	ldr	r3, [pc, #40]	; (840c4 <XPROGTarget_ReceiveByte+0x30>)
   8409a:	781b      	ldrb	r3, [r3, #0]
   8409c:	b973      	cbnz	r3, 840bc <XPROGTarget_ReceiveByte+0x28>
	while((usart_read(USART_PDI, &dummy_read) == 1) && (TimeoutTicksRemaining));
   8409e:	4d0a      	ldr	r5, [pc, #40]	; (840c8 <XPROGTarget_ReceiveByte+0x34>)
   840a0:	4c0a      	ldr	r4, [pc, #40]	; (840cc <XPROGTarget_ReceiveByte+0x38>)
   840a2:	4e0b      	ldr	r6, [pc, #44]	; (840d0 <XPROGTarget_ReceiveByte+0x3c>)
   840a4:	a901      	add	r1, sp, #4
   840a6:	4628      	mov	r0, r5
   840a8:	47a0      	blx	r4
   840aa:	2801      	cmp	r0, #1
   840ac:	d102      	bne.n	840b4 <XPROGTarget_ReceiveByte+0x20>
   840ae:	6833      	ldr	r3, [r6, #0]
   840b0:	2b00      	cmp	r3, #0
   840b2:	d1f7      	bne.n	840a4 <XPROGTarget_ReceiveByte+0x10>
}
   840b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   840b8:	b002      	add	sp, #8
   840ba:	bd70      	pop	{r4, r5, r6, pc}
	  XPROGTarget_SetRxMode();
   840bc:	4b05      	ldr	r3, [pc, #20]	; (840d4 <XPROGTarget_ReceiveByte+0x40>)
   840be:	4798      	blx	r3
   840c0:	e7ed      	b.n	8409e <XPROGTarget_ReceiveByte+0xa>
   840c2:	bf00      	nop
   840c4:	20002190 	.word	0x20002190
   840c8:	40094000 	.word	0x40094000
   840cc:	00086367 	.word	0x00086367
   840d0:	20002794 	.word	0x20002794
   840d4:	00083f51 	.word	0x00083f51

000840d8 <XPROGTarget_SendIdle>:
{
   840d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(IsSending))
   840da:	4b12      	ldr	r3, [pc, #72]	; (84124 <XPROGTarget_SendIdle+0x4c>)
   840dc:	781b      	ldrb	r3, [r3, #0]
   840de:	b123      	cbz	r3, 840ea <XPROGTarget_SendIdle+0x12>
{
   840e0:	270c      	movs	r7, #12
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   840e2:	2518      	movs	r5, #24
   840e4:	4c10      	ldr	r4, [pc, #64]	; (84128 <XPROGTarget_SendIdle+0x50>)
   840e6:	4e11      	ldr	r6, [pc, #68]	; (8412c <XPROGTarget_SendIdle+0x54>)
   840e8:	e006      	b.n	840f8 <XPROGTarget_SendIdle+0x20>
	  XPROGTarget_SetTxMode();
   840ea:	4b11      	ldr	r3, [pc, #68]	; (84130 <XPROGTarget_SendIdle+0x58>)
   840ec:	4798      	blx	r3
   840ee:	e7f7      	b.n	840e0 <XPROGTarget_SendIdle+0x8>
   840f0:	1e7b      	subs	r3, r7, #1
	for (uint8_t i = 0; i < BITS_IN_USART_FRAME; i++)
   840f2:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   840f6:	d013      	beq.n	84120 <XPROGTarget_SendIdle+0x48>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   840f8:	4628      	mov	r0, r5
   840fa:	47a0      	blx	r4
   840fc:	b110      	cbz	r0, 84104 <XPROGTarget_SendIdle+0x2c>
   840fe:	6833      	ldr	r3, [r6, #0]
   84100:	2b00      	cmp	r3, #0
   84102:	d1f9      	bne.n	840f8 <XPROGTarget_SendIdle+0x20>
		while(gpio_pin_is_low(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84104:	4628      	mov	r0, r5
   84106:	47a0      	blx	r4
   84108:	b910      	cbnz	r0, 84110 <XPROGTarget_SendIdle+0x38>
   8410a:	6833      	ldr	r3, [r6, #0]
   8410c:	2b00      	cmp	r3, #0
   8410e:	d1f9      	bne.n	84104 <XPROGTarget_SendIdle+0x2c>
		while(gpio_pin_is_high(PIN_PDIC_GPIO) && TimeoutTicksRemaining);
   84110:	4628      	mov	r0, r5
   84112:	47a0      	blx	r4
   84114:	2800      	cmp	r0, #0
   84116:	d0eb      	beq.n	840f0 <XPROGTarget_SendIdle+0x18>
   84118:	6833      	ldr	r3, [r6, #0]
   8411a:	2b00      	cmp	r3, #0
   8411c:	d1f8      	bne.n	84110 <XPROGTarget_SendIdle+0x38>
   8411e:	e7e7      	b.n	840f0 <XPROGTarget_SendIdle+0x18>
}
   84120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84122:	bf00      	nop
   84124:	20002190 	.word	0x20002190
   84128:	0008485b 	.word	0x0008485b
   8412c:	20002794 	.word	0x20002794
   84130:	00083f99 	.word	0x00083f99

00084134 <XPROGTarget_EnableTargetPDI>:
{
   84134:	b570      	push	{r4, r5, r6, lr}
   84136:	b086      	sub	sp, #24
	IsSending = false;
   84138:	2500      	movs	r5, #0
   8413a:	4b19      	ldr	r3, [pc, #100]	; (841a0 <XPROGTarget_EnableTargetPDI+0x6c>)
   8413c:	701d      	strb	r5, [r3, #0]
	pmc_enable_periph_clk(ul_id);
   8413e:	200e      	movs	r0, #14
   84140:	4b18      	ldr	r3, [pc, #96]	; (841a4 <XPROGTarget_EnableTargetPDI+0x70>)
   84142:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIDTX_GPIO, PIN_PDIDTX_OUT_FLAGS);
   84144:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   84148:	2014      	movs	r0, #20
   8414a:	4c17      	ldr	r4, [pc, #92]	; (841a8 <XPROGTarget_EnableTargetPDI+0x74>)
   8414c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIDRX_GPIO, PIN_PDIDRX_FLAGS);
   8414e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   84152:	2015      	movs	r0, #21
   84154:	47a0      	blx	r4
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_OUT_FLAGS);
   84156:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8415a:	2018      	movs	r0, #24
   8415c:	47a0      	blx	r4
	delay_us(50);
   8415e:	f240 1057 	movw	r0, #343	; 0x157
   84162:	4e12      	ldr	r6, [pc, #72]	; (841ac <XPROGTarget_EnableTargetPDI+0x78>)
   84164:	47b0      	blx	r6
	gpio_set_pin_high(PIN_PDIDTX_GPIO);
   84166:	2014      	movs	r0, #20
   84168:	4b11      	ldr	r3, [pc, #68]	; (841b0 <XPROGTarget_EnableTargetPDI+0x7c>)
   8416a:	4798      	blx	r3
	delay_us(10);
   8416c:	2045      	movs	r0, #69	; 0x45
   8416e:	47b0      	blx	r6
	const sam_usart_opt_t usart_pdid_settings = {
   84170:	9502      	str	r5, [sp, #8]
   84172:	9504      	str	r5, [sp, #16]
   84174:	9505      	str	r5, [sp, #20]
   84176:	4b0f      	ldr	r3, [pc, #60]	; (841b4 <XPROGTarget_EnableTargetPDI+0x80>)
   84178:	9300      	str	r3, [sp, #0]
   8417a:	23c0      	movs	r3, #192	; 0xc0
   8417c:	9301      	str	r3, [sp, #4]
   8417e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   84182:	9303      	str	r3, [sp, #12]
	usart_init_sync_master(USART_PDI, &usart_pdid_settings, sysclk_get_main_hz());
   84184:	4a0c      	ldr	r2, [pc, #48]	; (841b8 <XPROGTarget_EnableTargetPDI+0x84>)
   84186:	4669      	mov	r1, sp
   84188:	480c      	ldr	r0, [pc, #48]	; (841bc <XPROGTarget_EnableTargetPDI+0x88>)
   8418a:	4b0d      	ldr	r3, [pc, #52]	; (841c0 <XPROGTarget_EnableTargetPDI+0x8c>)
   8418c:	4798      	blx	r3
	gpio_configure_pin(PIN_PDIC_GPIO, PIN_PDIC_USART_FLAGS);
   8418e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84192:	2018      	movs	r0, #24
   84194:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   84196:	4c0b      	ldr	r4, [pc, #44]	; (841c4 <XPROGTarget_EnableTargetPDI+0x90>)
   84198:	47a0      	blx	r4
	XPROGTarget_SendIdle();
   8419a:	47a0      	blx	r4
}
   8419c:	b006      	add	sp, #24
   8419e:	bd70      	pop	{r4, r5, r6, pc}
   841a0:	20002190 	.word	0x20002190
   841a4:	00084c11 	.word	0x00084c11
   841a8:	000848cd 	.word	0x000848cd
   841ac:	20000089 	.word	0x20000089
   841b0:	00084877 	.word	0x00084877
   841b4:	0007a120 	.word	0x0007a120
   841b8:	0b71b000 	.word	0x0b71b000
   841bc:	40094000 	.word	0x40094000
   841c0:	000862a9 	.word	0x000862a9
   841c4:	000840d9 	.word	0x000840d9

000841c8 <set_timeout>:
static uint32_t defaultTimeoutTicks = 500;
static bool timerEnabled = false;

void set_timeout(uint32_t timeoutTicks)
{
	defaultTimeoutTicks = timeoutTicks;
   841c8:	4b01      	ldr	r3, [pc, #4]	; (841d0 <set_timeout+0x8>)
   841ca:	6018      	str	r0, [r3, #0]
   841cc:	4770      	bx	lr
   841ce:	bf00      	nop
   841d0:	20000a68 	.word	0x20000a68

000841d4 <setup_timeoutcnt>:
	//printf("Timeout = %d\n", defaultTimeoutTicks);
}

void setup_timeoutcnt(void)
{
   841d4:	b538      	push	{r3, r4, r5, lr}
   841d6:	2016      	movs	r0, #22
   841d8:	4b10      	ldr	r3, [pc, #64]	; (8421c <setup_timeoutcnt+0x48>)
   841da:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   841dc:	4b10      	ldr	r3, [pc, #64]	; (84220 <setup_timeoutcnt+0x4c>)
   841de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   841e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   841e6:	2510      	movs	r5, #16
   841e8:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   841ec:	601a      	str	r2, [r3, #0]
	
	/* Configure TC interrupts for TC TC_CHANNEL_CAPTURE only */
	irq_register_handler(TC0_IRQn, 1);
	
	// Init TC to waveform mode.
	tc_init(TC0, TC_CHANNEL_TICKCNT,
   841ee:	4c0d      	ldr	r4, [pc, #52]	; (84224 <setup_timeoutcnt+0x50>)
   841f0:	f24c 0201 	movw	r2, #49153	; 0xc001
   841f4:	2100      	movs	r1, #0
   841f6:	4620      	mov	r0, r4
   841f8:	4b0b      	ldr	r3, [pc, #44]	; (84228 <setup_timeoutcnt+0x54>)
   841fa:	4798      	blx	r3
	
	// Configure waveform frequency and duty cycle.
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) /
	TC_WAVEFORM_DIVISOR /
	TC_WAVEFORM_FREQUENCY);
	tc_write_rc(TC0, TC_CHANNEL_TICKCNT, rc);
   841fc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   84200:	2100      	movs	r1, #0
   84202:	4620      	mov	r0, r4
   84204:	4b09      	ldr	r3, [pc, #36]	; (8422c <setup_timeoutcnt+0x58>)
   84206:	4798      	blx	r3
	tc_enable_interrupt(TC0, TC_CHANNEL_TICKCNT, TC_IER_CPCS);
   84208:	462a      	mov	r2, r5
   8420a:	2100      	movs	r1, #0
   8420c:	4620      	mov	r0, r4
   8420e:	4b08      	ldr	r3, [pc, #32]	; (84230 <setup_timeoutcnt+0x5c>)
   84210:	4798      	blx	r3
	
	timerEnabled = true;
   84212:	2201      	movs	r2, #1
   84214:	4b07      	ldr	r3, [pc, #28]	; (84234 <setup_timeoutcnt+0x60>)
   84216:	701a      	strb	r2, [r3, #0]
   84218:	bd38      	pop	{r3, r4, r5, pc}
   8421a:	bf00      	nop
   8421c:	00084c11 	.word	0x00084c11
   84220:	e000e100 	.word	0xe000e100
   84224:	40080000 	.word	0x40080000
   84228:	00084309 	.word	0x00084309
   8422c:	00084331 	.word	0x00084331
   84230:	00084339 	.word	0x00084339
   84234:	20002191 	.word	0x20002191

00084238 <start_timeoutcnt>:
	
	timerEnabled = false;
}

void start_timeoutcnt(void)
{
   84238:	b510      	push	{r4, lr}
	if(timerEnabled == false){
   8423a:	4b0a      	ldr	r3, [pc, #40]	; (84264 <start_timeoutcnt+0x2c>)
   8423c:	781b      	ldrb	r3, [r3, #0]
   8423e:	b16b      	cbz	r3, 8425c <start_timeoutcnt+0x24>
		setup_timeoutcnt();
	}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   84240:	4c09      	ldr	r4, [pc, #36]	; (84268 <start_timeoutcnt+0x30>)
   84242:	2100      	movs	r1, #0
   84244:	4620      	mov	r0, r4
   84246:	4b09      	ldr	r3, [pc, #36]	; (8426c <start_timeoutcnt+0x34>)
   84248:	4798      	blx	r3
	TimeoutTicksRemaining = defaultTimeoutTicks; /* x / 2500 = timeout in seconds  */
   8424a:	4b09      	ldr	r3, [pc, #36]	; (84270 <start_timeoutcnt+0x38>)
   8424c:	681a      	ldr	r2, [r3, #0]
   8424e:	4b09      	ldr	r3, [pc, #36]	; (84274 <start_timeoutcnt+0x3c>)
   84250:	601a      	str	r2, [r3, #0]
	tc_start(TC0, TC_CHANNEL_TICKCNT);
   84252:	2100      	movs	r1, #0
   84254:	4620      	mov	r0, r4
   84256:	4b08      	ldr	r3, [pc, #32]	; (84278 <start_timeoutcnt+0x40>)
   84258:	4798      	blx	r3
   8425a:	bd10      	pop	{r4, pc}
		setup_timeoutcnt();
   8425c:	4b07      	ldr	r3, [pc, #28]	; (8427c <start_timeoutcnt+0x44>)
   8425e:	4798      	blx	r3
   84260:	e7ee      	b.n	84240 <start_timeoutcnt+0x8>
   84262:	bf00      	nop
   84264:	20002191 	.word	0x20002191
   84268:	40080000 	.word	0x40080000
   8426c:	00084329 	.word	0x00084329
   84270:	20000a68 	.word	0x20000a68
   84274:	20002794 	.word	0x20002794
   84278:	00084321 	.word	0x00084321
   8427c:	000841d5 	.word	0x000841d5

00084280 <stop_timeoutcnt>:
}

void stop_timeoutcnt(void)
{
   84280:	b508      	push	{r3, lr}
	tc_stop(TC0, TC_CHANNEL_TICKCNT);
   84282:	2100      	movs	r1, #0
   84284:	4801      	ldr	r0, [pc, #4]	; (8428c <stop_timeoutcnt+0xc>)
   84286:	4b02      	ldr	r3, [pc, #8]	; (84290 <stop_timeoutcnt+0x10>)
   84288:	4798      	blx	r3
   8428a:	bd08      	pop	{r3, pc}
   8428c:	40080000 	.word	0x40080000
   84290:	00084329 	.word	0x00084329

00084294 <TC0_Handler>:
}

ISR(TC0_Handler)
{
   84294:	b508      	push	{r3, lr}
	if(TimeoutTicksRemaining){
   84296:	4b05      	ldr	r3, [pc, #20]	; (842ac <TC0_Handler+0x18>)
   84298:	681b      	ldr	r3, [r3, #0]
   8429a:	b113      	cbz	r3, 842a2 <TC0_Handler+0xe>
		TimeoutTicksRemaining--;
   8429c:	3b01      	subs	r3, #1
   8429e:	4a03      	ldr	r2, [pc, #12]	; (842ac <TC0_Handler+0x18>)
   842a0:	6013      	str	r3, [r2, #0]
	}
	tc_get_status(TC0, TC_CHANNEL_TICKCNT);
   842a2:	2100      	movs	r1, #0
   842a4:	4802      	ldr	r0, [pc, #8]	; (842b0 <TC0_Handler+0x1c>)
   842a6:	4b03      	ldr	r3, [pc, #12]	; (842b4 <TC0_Handler+0x20>)
   842a8:	4798      	blx	r3
   842aa:	bd08      	pop	{r3, pc}
   842ac:	20002794 	.word	0x20002794
   842b0:	40080000 	.word	0x40080000
   842b4:	00084341 	.word	0x00084341

000842b8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   842b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   842ba:	f1a1 030e 	sub.w	r3, r1, #14
   842be:	2b01      	cmp	r3, #1
   842c0:	d802      	bhi.n	842c8 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
   842c2:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
   842c6:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   842c8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   842cc:	b672      	cpsid	i
   842ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842d2:	2500      	movs	r5, #0
   842d4:	4b0a      	ldr	r3, [pc, #40]	; (84300 <efc_perform_command+0x48>)
   842d6:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   842d8:	0212      	lsls	r2, r2, #8
   842da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   842de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   842e2:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   842e6:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   842e8:	4311      	orrs	r1, r2
   842ea:	4b06      	ldr	r3, [pc, #24]	; (84304 <efc_perform_command+0x4c>)
   842ec:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   842ee:	2c00      	cmp	r4, #0
   842f0:	d1e9      	bne.n	842c6 <efc_perform_command+0xe>
		cpu_irq_enable();
   842f2:	2201      	movs	r2, #1
   842f4:	4b02      	ldr	r3, [pc, #8]	; (84300 <efc_perform_command+0x48>)
   842f6:	701a      	strb	r2, [r3, #0]
   842f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   842fc:	b662      	cpsie	i
   842fe:	bd38      	pop	{r3, r4, r5, pc}
   84300:	20000a80 	.word	0x20000a80
   84304:	2000006d 	.word	0x2000006d

00084308 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   84308:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8430a:	0189      	lsls	r1, r1, #6
   8430c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8430e:	2402      	movs	r4, #2
   84310:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   84312:	f04f 31ff 	mov.w	r1, #4294967295
   84316:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   84318:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8431a:	605a      	str	r2, [r3, #4]
}
   8431c:	bc10      	pop	{r4}
   8431e:	4770      	bx	lr

00084320 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   84320:	0189      	lsls	r1, r1, #6
   84322:	2305      	movs	r3, #5
   84324:	5043      	str	r3, [r0, r1]
   84326:	4770      	bx	lr

00084328 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   84328:	0189      	lsls	r1, r1, #6
   8432a:	2302      	movs	r3, #2
   8432c:	5043      	str	r3, [r0, r1]
   8432e:	4770      	bx	lr

00084330 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   84330:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   84334:	61ca      	str	r2, [r1, #28]
   84336:	4770      	bx	lr

00084338 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84338:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8433c:	624a      	str	r2, [r1, #36]	; 0x24
   8433e:	4770      	bx	lr

00084340 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   84340:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   84344:	6a08      	ldr	r0, [r1, #32]
}
   84346:	4770      	bx	lr

00084348 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   84348:	b570      	push	{r4, r5, r6, lr}
   8434a:	b086      	sub	sp, #24
   8434c:	4604      	mov	r4, r0
   8434e:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   84350:	2304      	movs	r3, #4
   84352:	9300      	str	r3, [sp, #0]
   84354:	ab02      	add	r3, sp, #8
   84356:	220f      	movs	r2, #15
   84358:	210e      	movs	r1, #14
   8435a:	480d      	ldr	r0, [pc, #52]	; (84390 <flash_read_unique_id+0x48>)
   8435c:	4d0d      	ldr	r5, [pc, #52]	; (84394 <flash_read_unique_id+0x4c>)
   8435e:	47a8      	blx	r5
   84360:	b118      	cbz	r0, 8436a <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   84362:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
   84364:	4628      	mov	r0, r5
   84366:	b006      	add	sp, #24
   84368:	bd70      	pop	{r4, r5, r6, pc}
   8436a:	4605      	mov	r5, r0
   8436c:	2e04      	cmp	r6, #4
   8436e:	bf28      	it	cs
   84370:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   84372:	b156      	cbz	r6, 8438a <flash_read_unique_id+0x42>
   84374:	aa02      	add	r2, sp, #8
   84376:	4623      	mov	r3, r4
   84378:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
   8437c:	f852 0b04 	ldr.w	r0, [r2], #4
   84380:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   84384:	428b      	cmp	r3, r1
   84386:	d1f9      	bne.n	8437c <flash_read_unique_id+0x34>
   84388:	e7ec      	b.n	84364 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
   8438a:	4635      	mov	r5, r6
   8438c:	e7ea      	b.n	84364 <flash_read_unique_id+0x1c>
   8438e:	bf00      	nop
   84390:	400e0800 	.word	0x400e0800
   84394:	20000001 	.word	0x20000001

00084398 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
   84398:	b510      	push	{r4, lr}
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   8439a:	2006      	movs	r0, #6
   8439c:	4c02      	ldr	r4, [pc, #8]	; (843a8 <ui_init+0x10>)
   8439e:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   843a0:	2007      	movs	r0, #7
   843a2:	47a0      	blx	r4
   843a4:	bd10      	pop	{r4, pc}
   843a6:	bf00      	nop
   843a8:	00084739 	.word	0x00084739

000843ac <ui_powerdown>:
}

void ui_powerdown(void)
{
   843ac:	b510      	push	{r4, lr}
	LED_Off(LED0_GPIO);
   843ae:	2006      	movs	r0, #6
   843b0:	4c03      	ldr	r4, [pc, #12]	; (843c0 <ui_powerdown+0x14>)
   843b2:	47a0      	blx	r4
	LED_Off(LED1_GPIO);
   843b4:	2007      	movs	r0, #7
   843b6:	47a0      	blx	r4
	
	// Power off FPGA
	board_power(0);
   843b8:	201d      	movs	r0, #29
   843ba:	4b02      	ldr	r3, [pc, #8]	; (843c4 <ui_powerdown+0x18>)
   843bc:	4798      	blx	r3
   843be:	bd10      	pop	{r4, pc}
   843c0:	00084739 	.word	0x00084739
   843c4:	00084891 	.word	0x00084891

000843c8 <ui_wakeup>:
		
}

void ui_wakeup(void)
{
   843c8:	b508      	push	{r3, lr}
	LED_On(LED0_GPIO);
   843ca:	2006      	movs	r0, #6
   843cc:	4b02      	ldr	r3, [pc, #8]	; (843d8 <ui_wakeup+0x10>)
   843ce:	4798      	blx	r3
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);
		board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);board_power(0);				
	}
	*/	
	
	board_power(1);
   843d0:	201d      	movs	r0, #29
   843d2:	4b02      	ldr	r3, [pc, #8]	; (843dc <ui_wakeup+0x14>)
   843d4:	4798      	blx	r3
   843d6:	bd08      	pop	{r3, pc}
   843d8:	0008475d 	.word	0x0008475d
   843dc:	00084877 	.word	0x00084877

000843e0 <ui_process>:
		LED_Off(LED1_GPIO);
	}
}

void ui_process(uint16_t framenumber)
{
   843e0:	b508      	push	{r3, lr}
	if ((framenumber % 1000) == 0) {
   843e2:	4b0b      	ldr	r3, [pc, #44]	; (84410 <ui_process+0x30>)
   843e4:	fba3 2300 	umull	r2, r3, r3, r0
   843e8:	099b      	lsrs	r3, r3, #6
   843ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   843ee:	fb02 0013 	mls	r0, r2, r3, r0
   843f2:	b280      	uxth	r0, r0
   843f4:	b118      	cbz	r0, 843fe <ui_process+0x1e>
		LED_On(LED0_GPIO);
	}
	if ((framenumber % 1000) == 500) {
   843f6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   843fa:	d004      	beq.n	84406 <ui_process+0x26>
   843fc:	bd08      	pop	{r3, pc}
		LED_On(LED0_GPIO);
   843fe:	2006      	movs	r0, #6
   84400:	4b04      	ldr	r3, [pc, #16]	; (84414 <ui_process+0x34>)
   84402:	4798      	blx	r3
   84404:	bd08      	pop	{r3, pc}
		LED_Off(LED0_GPIO);
   84406:	2006      	movs	r0, #6
   84408:	4b03      	ldr	r3, [pc, #12]	; (84418 <ui_process+0x38>)
   8440a:	4798      	blx	r3
	}
}
   8440c:	e7f6      	b.n	843fc <ui_process+0x1c>
   8440e:	bf00      	nop
   84410:	10624dd3 	.word	0x10624dd3
   84414:	0008475d 	.word	0x0008475d
   84418:	00084739 	.word	0x00084739

0008441c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8441c:	b510      	push	{r4, lr}
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8441e:	203e      	movs	r0, #62	; 0x3e
   84420:	4b07      	ldr	r3, [pc, #28]	; (84440 <sysclk_enable_usb+0x24>)
   84422:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   84424:	4c07      	ldr	r4, [pc, #28]	; (84444 <sysclk_enable_usb+0x28>)
   84426:	47a0      	blx	r4
   84428:	2800      	cmp	r0, #0
   8442a:	d0fc      	beq.n	84426 <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8442c:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
   84430:	4b05      	ldr	r3, [pc, #20]	; (84448 <sysclk_enable_usb+0x2c>)
   84432:	61da      	str	r2, [r3, #28]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_upll();
   84434:	4c05      	ldr	r4, [pc, #20]	; (8444c <sysclk_enable_usb+0x30>)
   84436:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84438:	2800      	cmp	r0, #0
   8443a:	d0fc      	beq.n	84436 <sysclk_enable_usb+0x1a>

	pll_enable_source(CONFIG_PLL1_SOURCE);
	pll_config_defaults(&pllcfg, 1);
	pll_enable(&pllcfg, 1);
	pll_wait_for_lock(1);
}
   8443c:	bd10      	pop	{r4, pc}
   8443e:	bf00      	nop
   84440:	00084b79 	.word	0x00084b79
   84444:	00084ba1 	.word	0x00084ba1
   84448:	400e0400 	.word	0x400e0400
   8444c:	00084c01 	.word	0x00084c01

00084450 <sysclk_disable_usb>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   84450:	4a02      	ldr	r2, [pc, #8]	; (8445c <sysclk_disable_usb+0xc>)
   84452:	69d3      	ldr	r3, [r2, #28]
   84454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   84458:	61d3      	str	r3, [r2, #28]
   8445a:	4770      	bx	lr
   8445c:	400e0400 	.word	0x400e0400

00084460 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   84460:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   84462:	4812      	ldr	r0, [pc, #72]	; (844ac <sysclk_init+0x4c>)
   84464:	4b12      	ldr	r3, [pc, #72]	; (844b0 <sysclk_init+0x50>)
   84466:	4798      	blx	r3
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84468:	203e      	movs	r0, #62	; 0x3e
   8446a:	4b12      	ldr	r3, [pc, #72]	; (844b4 <sysclk_init+0x54>)
   8446c:	4798      	blx	r3
		return pmc_osc_is_ready_main_xtal();
   8446e:	4c12      	ldr	r4, [pc, #72]	; (844b8 <sysclk_init+0x58>)
   84470:	47a0      	blx	r4
   84472:	2800      	cmp	r0, #0
   84474:	d0fc      	beq.n	84470 <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   84476:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8447a:	4b10      	ldr	r3, [pc, #64]	; (844bc <sysclk_init+0x5c>)
   8447c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8447e:	4c10      	ldr	r4, [pc, #64]	; (844c0 <sysclk_init+0x60>)
   84480:	47a0      	blx	r4
   84482:	2800      	cmp	r0, #0
   84484:	d0fc      	beq.n	84480 <sysclk_init+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
   84486:	4b0f      	ldr	r3, [pc, #60]	; (844c4 <sysclk_init+0x64>)
   84488:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8448a:	4a0f      	ldr	r2, [pc, #60]	; (844c8 <sysclk_init+0x68>)
   8448c:	4b0f      	ldr	r3, [pc, #60]	; (844cc <sysclk_init+0x6c>)
   8448e:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
   84490:	4c0f      	ldr	r4, [pc, #60]	; (844d0 <sysclk_init+0x70>)
   84492:	47a0      	blx	r4
   84494:	2800      	cmp	r0, #0
   84496:	d0fc      	beq.n	84492 <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84498:	2010      	movs	r0, #16
   8449a:	4b0e      	ldr	r3, [pc, #56]	; (844d4 <sysclk_init+0x74>)
   8449c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8449e:	4b0e      	ldr	r3, [pc, #56]	; (844d8 <sysclk_init+0x78>)
   844a0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   844a2:	4802      	ldr	r0, [pc, #8]	; (844ac <sysclk_init+0x4c>)
   844a4:	4b02      	ldr	r3, [pc, #8]	; (844b0 <sysclk_init+0x50>)
   844a6:	4798      	blx	r3
   844a8:	bd10      	pop	{r4, pc}
   844aa:	bf00      	nop
   844ac:	05b8d800 	.word	0x05b8d800
   844b0:	2000013d 	.word	0x2000013d
   844b4:	00084b79 	.word	0x00084b79
   844b8:	00084ba1 	.word	0x00084ba1
   844bc:	00084bc1 	.word	0x00084bc1
   844c0:	00084bb1 	.word	0x00084bb1
   844c4:	00084be1 	.word	0x00084be1
   844c8:	200f3f01 	.word	0x200f3f01
   844cc:	400e0400 	.word	0x400e0400
   844d0:	00084bf1 	.word	0x00084bf1
   844d4:	00084b15 	.word	0x00084b15
   844d8:	00086471 	.word	0x00086471

000844dc <udi_vendor_getsetting>:
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
}
   844dc:	4b01      	ldr	r3, [pc, #4]	; (844e4 <udi_vendor_getsetting+0x8>)
   844de:	7818      	ldrb	r0, [r3, #0]
   844e0:	4770      	bx	lr
   844e2:	bf00      	nop
   844e4:	20002192 	.word	0x20002192

000844e8 <udi_vendor_enable>:
{
   844e8:	b508      	push	{r3, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   844ea:	4b05      	ldr	r3, [pc, #20]	; (84500 <udi_vendor_enable+0x18>)
   844ec:	4798      	blx	r3
   844ee:	78c3      	ldrb	r3, [r0, #3]
   844f0:	4a04      	ldr	r2, [pc, #16]	; (84504 <udi_vendor_enable+0x1c>)
   844f2:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   844f4:	b10b      	cbz	r3, 844fa <udi_vendor_enable+0x12>
	return true;
   844f6:	2001      	movs	r0, #1
}
   844f8:	bd08      	pop	{r3, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   844fa:	4b03      	ldr	r3, [pc, #12]	; (84508 <udi_vendor_enable+0x20>)
   844fc:	4798      	blx	r3
   844fe:	bd08      	pop	{r3, pc}
   84500:	00082e0d 	.word	0x00082e0d
   84504:	20002192 	.word	0x20002192
   84508:	000813bd 	.word	0x000813bd

0008450c <udi_vendor_disable>:
{
   8450c:	b508      	push	{r3, lr}
	if (0 == udi_vendor_alternate_setting) {
   8450e:	4b03      	ldr	r3, [pc, #12]	; (8451c <udi_vendor_disable+0x10>)
   84510:	781b      	ldrb	r3, [r3, #0]
   84512:	b103      	cbz	r3, 84516 <udi_vendor_disable+0xa>
   84514:	bd08      	pop	{r3, pc}
		UDI_VENDOR_DISABLE_EXT();
   84516:	4b02      	ldr	r3, [pc, #8]	; (84520 <udi_vendor_disable+0x14>)
   84518:	4798      	blx	r3
}
   8451a:	e7fb      	b.n	84514 <udi_vendor_disable+0x8>
   8451c:	20002192 	.word	0x20002192
   84520:	000813e5 	.word	0x000813e5

00084524 <udi_vendor_setup>:
{
   84524:	b508      	push	{r3, lr}
	if (Udd_setup_is_in()) {
   84526:	4b0b      	ldr	r3, [pc, #44]	; (84554 <udi_vendor_setup+0x30>)
   84528:	781b      	ldrb	r3, [r3, #0]
   8452a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8452e:	d105      	bne.n	8453c <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84530:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84534:	2b40      	cmp	r3, #64	; 0x40
   84536:	d00a      	beq.n	8454e <udi_vendor_setup+0x2a>
	return false; // Not supported request
   84538:	2000      	movs	r0, #0
}
   8453a:	bd08      	pop	{r3, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8453c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84540:	2b40      	cmp	r3, #64	; 0x40
   84542:	d001      	beq.n	84548 <udi_vendor_setup+0x24>
	return false; // Not supported request
   84544:	2000      	movs	r0, #0
   84546:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84548:	4b03      	ldr	r3, [pc, #12]	; (84558 <udi_vendor_setup+0x34>)
   8454a:	4798      	blx	r3
   8454c:	bd08      	pop	{r3, pc}
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8454e:	4b03      	ldr	r3, [pc, #12]	; (8455c <udi_vendor_setup+0x38>)
   84550:	4798      	blx	r3
   84552:	bd08      	pop	{r3, pc}
   84554:	200027ac 	.word	0x200027ac
   84558:	00081445 	.word	0x00081445
   8455c:	000813f1 	.word	0x000813f1

00084560 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84560:	b510      	push	{r4, lr}
   84562:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84564:	9200      	str	r2, [sp, #0]
   84566:	460b      	mov	r3, r1
   84568:	4602      	mov	r2, r0
   8456a:	2100      	movs	r1, #0
   8456c:	2081      	movs	r0, #129	; 0x81
   8456e:	4c02      	ldr	r4, [pc, #8]	; (84578 <udi_vendor_bulk_in_run+0x18>)
   84570:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   84572:	b002      	add	sp, #8
   84574:	bd10      	pop	{r4, pc}
   84576:	bf00      	nop
   84578:	00085d01 	.word	0x00085d01

0008457c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8457c:	b510      	push	{r4, lr}
   8457e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84580:	9200      	str	r2, [sp, #0]
   84582:	460b      	mov	r3, r1
   84584:	4602      	mov	r2, r0
   84586:	2100      	movs	r1, #0
   84588:	2002      	movs	r0, #2
   8458a:	4c02      	ldr	r4, [pc, #8]	; (84594 <udi_vendor_bulk_out_run+0x18>)
   8458c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8458e:	b002      	add	sp, #8
   84590:	bd10      	pop	{r4, pc}
   84592:	bf00      	nop
   84594:	00085d01 	.word	0x00085d01

00084598 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   84598:	4b0b      	ldr	r3, [pc, #44]	; (845c8 <cpu_irq_enter_critical+0x30>)
   8459a:	681b      	ldr	r3, [r3, #0]
   8459c:	b92b      	cbnz	r3, 845aa <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8459e:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   845a2:	b13b      	cbz	r3, 845b4 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   845a4:	2200      	movs	r2, #0
   845a6:	4b09      	ldr	r3, [pc, #36]	; (845cc <cpu_irq_enter_critical+0x34>)
   845a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   845aa:	4a07      	ldr	r2, [pc, #28]	; (845c8 <cpu_irq_enter_critical+0x30>)
   845ac:	6813      	ldr	r3, [r2, #0]
   845ae:	3301      	adds	r3, #1
   845b0:	6013      	str	r3, [r2, #0]
   845b2:	4770      	bx	lr
  __ASM volatile ("cpsid i");
   845b4:	b672      	cpsid	i
   845b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   845ba:	2200      	movs	r2, #0
   845bc:	4b04      	ldr	r3, [pc, #16]	; (845d0 <cpu_irq_enter_critical+0x38>)
   845be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   845c0:	2201      	movs	r2, #1
   845c2:	4b02      	ldr	r3, [pc, #8]	; (845cc <cpu_irq_enter_critical+0x34>)
   845c4:	701a      	strb	r2, [r3, #0]
   845c6:	e7f0      	b.n	845aa <cpu_irq_enter_critical+0x12>
   845c8:	20002194 	.word	0x20002194
   845cc:	20002198 	.word	0x20002198
   845d0:	20000a80 	.word	0x20000a80

000845d4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   845d4:	4b07      	ldr	r3, [pc, #28]	; (845f4 <cpu_irq_leave_critical+0x20>)
   845d6:	681a      	ldr	r2, [r3, #0]
   845d8:	3a01      	subs	r2, #1
   845da:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   845dc:	681b      	ldr	r3, [r3, #0]
   845de:	b943      	cbnz	r3, 845f2 <cpu_irq_leave_critical+0x1e>
   845e0:	4b05      	ldr	r3, [pc, #20]	; (845f8 <cpu_irq_leave_critical+0x24>)
   845e2:	781b      	ldrb	r3, [r3, #0]
   845e4:	b12b      	cbz	r3, 845f2 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   845e6:	2201      	movs	r2, #1
   845e8:	4b04      	ldr	r3, [pc, #16]	; (845fc <cpu_irq_leave_critical+0x28>)
   845ea:	701a      	strb	r2, [r3, #0]
   845ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   845f0:	b662      	cpsie	i
   845f2:	4770      	bx	lr
   845f4:	20002194 	.word	0x20002194
   845f8:	20002198 	.word	0x20002198
   845fc:	20000a80 	.word	0x20000a80

00084600 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   84600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   84604:	b980      	cbnz	r0, 84628 <_read+0x28>
   84606:	460c      	mov	r4, r1
   84608:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8460a:	2a00      	cmp	r2, #0
   8460c:	dd0f      	ble.n	8462e <_read+0x2e>
   8460e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   84610:	4e08      	ldr	r6, [pc, #32]	; (84634 <_read+0x34>)
   84612:	4d09      	ldr	r5, [pc, #36]	; (84638 <_read+0x38>)
   84614:	6830      	ldr	r0, [r6, #0]
   84616:	4621      	mov	r1, r4
   84618:	682b      	ldr	r3, [r5, #0]
   8461a:	4798      	blx	r3
		ptr++;
   8461c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8461e:	42bc      	cmp	r4, r7
   84620:	d1f8      	bne.n	84614 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   84622:	4640      	mov	r0, r8
   84624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84628:	f04f 38ff 	mov.w	r8, #4294967295
   8462c:	e7f9      	b.n	84622 <_read+0x22>
	for (; len > 0; --len) {
   8462e:	4680      	mov	r8, r0
   84630:	e7f7      	b.n	84622 <_read+0x22>
   84632:	bf00      	nop
   84634:	200027a8 	.word	0x200027a8
   84638:	200027a0 	.word	0x200027a0

0008463c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8463c:	3801      	subs	r0, #1
   8463e:	2802      	cmp	r0, #2
   84640:	d815      	bhi.n	8466e <_write+0x32>
{
   84642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84646:	460e      	mov	r6, r1
   84648:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8464a:	b19a      	cbz	r2, 84674 <_write+0x38>
   8464c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8464e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 84688 <_write+0x4c>
   84652:	4f0c      	ldr	r7, [pc, #48]	; (84684 <_write+0x48>)
   84654:	f8d8 0000 	ldr.w	r0, [r8]
   84658:	f815 1b01 	ldrb.w	r1, [r5], #1
   8465c:	683b      	ldr	r3, [r7, #0]
   8465e:	4798      	blx	r3
   84660:	2800      	cmp	r0, #0
   84662:	db0a      	blt.n	8467a <_write+0x3e>
   84664:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   84666:	3c01      	subs	r4, #1
   84668:	d1f4      	bne.n	84654 <_write+0x18>
   8466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8466e:	f04f 30ff 	mov.w	r0, #4294967295
   84672:	4770      	bx	lr
	for (; len != 0; --len) {
   84674:	4610      	mov	r0, r2
   84676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8467a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84682:	bf00      	nop
   84684:	200027a4 	.word	0x200027a4
   84688:	200027a8 	.word	0x200027a8

0008468c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   8468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8468e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84692:	2006      	movs	r0, #6
   84694:	4c17      	ldr	r4, [pc, #92]	; (846f4 <iopins_normal+0x68>)
   84696:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   84698:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8469c:	2007      	movs	r0, #7
   8469e:	47a0      	blx	r4
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   846a0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   846a4:	201d      	movs	r0, #29
   846a6:	47a0      	blx	r4
	board_power(0);
   846a8:	201d      	movs	r0, #29
   846aa:	4b13      	ldr	r3, [pc, #76]	; (846f8 <iopins_normal+0x6c>)
   846ac:	4798      	blx	r3
	
	/* FPGA Programming pins */
	FPGA_NPROG_SETUP();
   846ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   846b2:	2008      	movs	r0, #8
   846b4:	47a0      	blx	r4
	FPGA_NPROG_HIGH();
   846b6:	2008      	movs	r0, #8
   846b8:	4e10      	ldr	r6, [pc, #64]	; (846fc <iopins_normal+0x70>)
   846ba:	47b0      	blx	r6
	
	/* FPGA External memory interface */
	//Allow sync writing to address pins
	gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   846bc:	4f10      	ldr	r7, [pc, #64]	; (84700 <iopins_normal+0x74>)
   846be:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   846c2:	21ff      	movs	r1, #255	; 0xff
   846c4:	4638      	mov	r0, r7
   846c6:	4d0f      	ldr	r5, [pc, #60]	; (84704 <iopins_normal+0x78>)
   846c8:	47a8      	blx	r5
	pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   846ca:	21ff      	movs	r1, #255	; 0xff
   846cc:	4638      	mov	r0, r7
   846ce:	4b0e      	ldr	r3, [pc, #56]	; (84708 <iopins_normal+0x7c>)
   846d0:	4798      	blx	r3
	
	//ALE pin under SW control
	gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
   846d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   846d6:	2035      	movs	r0, #53	; 0x35
   846d8:	47a0      	blx	r4
	gpio_set_pin_high(FPGA_ALE_GPIO);
   846da:	2035      	movs	r0, #53	; 0x35
   846dc:	47b0      	blx	r6

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   846de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   846e2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   846e6:	4809      	ldr	r0, [pc, #36]	; (8470c <iopins_normal+0x80>)
   846e8:	47a8      	blx	r5
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   846ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   846ee:	201b      	movs	r0, #27
   846f0:	47a0      	blx	r4
   846f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   846f4:	000848cd 	.word	0x000848cd
   846f8:	00084891 	.word	0x00084891
   846fc:	00084877 	.word	0x00084877
   84700:	400e0e00 	.word	0x400e0e00
   84704:	0008499d 	.word	0x0008499d
   84708:	00084849 	.word	0x00084849
   8470c:	400e0c00 	.word	0x400e0c00

00084710 <board_init>:
#  endif
#endif	
}

void board_init(void)
{
   84710:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   84712:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84716:	4b05      	ldr	r3, [pc, #20]	; (8472c <board_init+0x1c>)
   84718:	605a      	str	r2, [r3, #4]
   8471a:	200a      	movs	r0, #10
   8471c:	4c04      	ldr	r4, [pc, #16]	; (84730 <board_init+0x20>)
   8471e:	47a0      	blx	r4
   84720:	200b      	movs	r0, #11
   84722:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	iopins_normal();
   84724:	4b03      	ldr	r3, [pc, #12]	; (84734 <board_init+0x24>)
   84726:	4798      	blx	r3
   84728:	bd10      	pop	{r4, pc}
   8472a:	bf00      	nop
   8472c:	400e1250 	.word	0x400e1250
   84730:	00084c11 	.word	0x00084c11
   84734:	0008468d 	.word	0x0008468d

00084738 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84738:	b510      	push	{r4, lr}
   8473a:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8473c:	2806      	cmp	r0, #6
   8473e:	d002      	beq.n	84746 <LED_Off+0xe>
   84740:	2c07      	cmp	r4, #7
   84742:	d004      	beq.n	8474e <LED_Off+0x16>
   84744:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
   84746:	2006      	movs	r0, #6
   84748:	4b03      	ldr	r3, [pc, #12]	; (84758 <LED_Off+0x20>)
   8474a:	4798      	blx	r3
   8474c:	e7f8      	b.n	84740 <LED_Off+0x8>
   8474e:	2007      	movs	r0, #7
   84750:	4b01      	ldr	r3, [pc, #4]	; (84758 <LED_Off+0x20>)
   84752:	4798      	blx	r3
			} else {
				gpio_set_pin_high(led_gpio);
			}
		}
	}
}
   84754:	e7f6      	b.n	84744 <LED_Off+0xc>
   84756:	bf00      	nop
   84758:	00084891 	.word	0x00084891

0008475c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   8475c:	b510      	push	{r4, lr}
   8475e:	4604      	mov	r4, r0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84760:	2806      	cmp	r0, #6
   84762:	d002      	beq.n	8476a <LED_On+0xe>
   84764:	2c07      	cmp	r4, #7
   84766:	d004      	beq.n	84772 <LED_On+0x16>
   84768:	bd10      	pop	{r4, pc}
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
   8476a:	2006      	movs	r0, #6
   8476c:	4b03      	ldr	r3, [pc, #12]	; (8477c <LED_On+0x20>)
   8476e:	4798      	blx	r3
   84770:	e7f8      	b.n	84764 <LED_On+0x8>
   84772:	2007      	movs	r0, #7
   84774:	4b01      	ldr	r3, [pc, #4]	; (8477c <LED_On+0x20>)
   84776:	4798      	blx	r3
			} else {
				gpio_set_pin_low(led_gpio);
			}
		}
	}
}
   84778:	e7f6      	b.n	84768 <LED_On+0xc>
   8477a:	bf00      	nop
   8477c:	00084877 	.word	0x00084877

00084780 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   84780:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84788:	670a      	str	r2, [r1, #112]	; 0x70
   8478a:	4770      	bx	lr

0008478c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8478c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84790:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84794:	674a      	str	r2, [r1, #116]	; 0x74
   84796:	4770      	bx	lr

00084798 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   84798:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8479c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   847a0:	678a      	str	r2, [r1, #120]	; 0x78
   847a2:	4770      	bx	lr

000847a4 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   847a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   847a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   847ac:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   847b0:	4770      	bx	lr

000847b2 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   847b2:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   847b4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   847b8:	d016      	beq.n	847e8 <pio_set_peripheral+0x36>
   847ba:	d80b      	bhi.n	847d4 <pio_set_peripheral+0x22>
   847bc:	b149      	cbz	r1, 847d2 <pio_set_peripheral+0x20>
   847be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   847c2:	d105      	bne.n	847d0 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   847c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   847c6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   847c8:	400b      	ands	r3, r1
   847ca:	ea23 0302 	bic.w	r3, r3, r2
   847ce:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   847d0:	6042      	str	r2, [r0, #4]
   847d2:	4770      	bx	lr
	switch (ul_type) {
   847d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   847d8:	d0fb      	beq.n	847d2 <pio_set_peripheral+0x20>
   847da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   847de:	d0f8      	beq.n	847d2 <pio_set_peripheral+0x20>
   847e0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   847e4:	d1f4      	bne.n	847d0 <pio_set_peripheral+0x1e>
   847e6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   847e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   847ea:	4313      	orrs	r3, r2
   847ec:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   847ee:	e7ef      	b.n	847d0 <pio_set_peripheral+0x1e>

000847f0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   847f0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   847f2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   847f6:	bf14      	ite	ne
   847f8:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   847fa:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   847fc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   84800:	bf14      	ite	ne
   84802:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   84804:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   84806:	f012 0f02 	tst.w	r2, #2
   8480a:	d107      	bne.n	8481c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8480c:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   84810:	bf18      	it	ne
   84812:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   84816:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   84818:	6001      	str	r1, [r0, #0]
   8481a:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8481c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   84820:	e7f9      	b.n	84816 <pio_set_input+0x26>

00084822 <pio_set_output>:
{
   84822:	b410      	push	{r4}
   84824:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   84826:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   84828:	b944      	cbnz	r4, 8483c <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8482a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8482c:	b143      	cbz	r3, 84840 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8482e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   84830:	b942      	cbnz	r2, 84844 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   84832:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   84834:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   84836:	6001      	str	r1, [r0, #0]
}
   84838:	bc10      	pop	{r4}
   8483a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8483c:	6641      	str	r1, [r0, #100]	; 0x64
   8483e:	e7f5      	b.n	8482c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   84840:	6541      	str	r1, [r0, #84]	; 0x54
   84842:	e7f5      	b.n	84830 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   84844:	6301      	str	r1, [r0, #48]	; 0x30
   84846:	e7f5      	b.n	84834 <pio_set_output+0x12>

00084848 <pio_enable_output_write>:
	p_pio->PIO_OWER = ul_mask;
   84848:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
   8484c:	4770      	bx	lr

0008484e <pio_sync_output_write>:
	p_pio->PIO_ODSR = ul_mask;
   8484e:	6381      	str	r1, [r0, #56]	; 0x38
   84850:	4770      	bx	lr

00084852 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   84852:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   84854:	4770      	bx	lr

00084856 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   84856:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   84858:	4770      	bx	lr

0008485a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8485a:	0943      	lsrs	r3, r0, #5
   8485c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84860:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84864:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   84866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   84868:	f000 001f 	and.w	r0, r0, #31
   8486c:	fa23 f000 	lsr.w	r0, r3, r0
}
   84870:	f000 0001 	and.w	r0, r0, #1
   84874:	4770      	bx	lr

00084876 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84876:	0943      	lsrs	r3, r0, #5
   84878:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8487c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84880:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84882:	f000 001f 	and.w	r0, r0, #31
   84886:	2201      	movs	r2, #1
   84888:	fa02 f000 	lsl.w	r0, r2, r0
   8488c:	6318      	str	r0, [r3, #48]	; 0x30
   8488e:	4770      	bx	lr

00084890 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84890:	0943      	lsrs	r3, r0, #5
   84892:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84896:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8489a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8489c:	f000 001f 	and.w	r0, r0, #31
   848a0:	2201      	movs	r2, #1
   848a2:	fa02 f000 	lsl.w	r0, r2, r0
   848a6:	6358      	str	r0, [r3, #52]	; 0x34
   848a8:	4770      	bx	lr

000848aa <pio_toggle_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   848aa:	0943      	lsrs	r3, r0, #5
   848ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   848b0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   848b4:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   848b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   848b8:	f000 021f 	and.w	r2, r0, #31
   848bc:	2001      	movs	r0, #1
   848be:	4090      	lsls	r0, r2
   848c0:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   848c2:	bf14      	ite	ne
   848c4:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   848c6:	6318      	streq	r0, [r3, #48]	; 0x30
   848c8:	4770      	bx	lr
	...

000848cc <pio_configure_pin>:
{
   848cc:	b570      	push	{r4, r5, r6, lr}
   848ce:	b082      	sub	sp, #8
   848d0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   848d2:	0943      	lsrs	r3, r0, #5
   848d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   848d8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   848dc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   848de:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   848e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   848e6:	d031      	beq.n	8494c <pio_configure_pin+0x80>
   848e8:	d816      	bhi.n	84918 <pio_configure_pin+0x4c>
   848ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   848ee:	d01b      	beq.n	84928 <pio_configure_pin+0x5c>
   848f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   848f4:	d116      	bne.n	84924 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   848f6:	f000 001f 	and.w	r0, r0, #31
   848fa:	2601      	movs	r6, #1
   848fc:	4086      	lsls	r6, r0
   848fe:	4632      	mov	r2, r6
   84900:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84904:	4620      	mov	r0, r4
   84906:	4b22      	ldr	r3, [pc, #136]	; (84990 <pio_configure_pin+0xc4>)
   84908:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8490a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8490e:	bf14      	ite	ne
   84910:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84912:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   84914:	2001      	movs	r0, #1
   84916:	e017      	b.n	84948 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   84918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8491c:	d021      	beq.n	84962 <pio_configure_pin+0x96>
   8491e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84922:	d01e      	beq.n	84962 <pio_configure_pin+0x96>
		return 0;
   84924:	2000      	movs	r0, #0
   84926:	e00f      	b.n	84948 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84928:	f000 001f 	and.w	r0, r0, #31
   8492c:	2601      	movs	r6, #1
   8492e:	4086      	lsls	r6, r0
   84930:	4632      	mov	r2, r6
   84932:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84936:	4620      	mov	r0, r4
   84938:	4b15      	ldr	r3, [pc, #84]	; (84990 <pio_configure_pin+0xc4>)
   8493a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8493c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   84940:	bf14      	ite	ne
   84942:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84944:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   84946:	2001      	movs	r0, #1
}
   84948:	b002      	add	sp, #8
   8494a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8494c:	f000 011f 	and.w	r1, r0, #31
   84950:	2601      	movs	r6, #1
   84952:	462a      	mov	r2, r5
   84954:	fa06 f101 	lsl.w	r1, r6, r1
   84958:	4620      	mov	r0, r4
   8495a:	4b0e      	ldr	r3, [pc, #56]	; (84994 <pio_configure_pin+0xc8>)
   8495c:	4798      	blx	r3
	return 1;
   8495e:	4630      	mov	r0, r6
		break;
   84960:	e7f2      	b.n	84948 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84962:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84966:	f000 011f 	and.w	r1, r0, #31
   8496a:	2601      	movs	r6, #1
   8496c:	ea05 0306 	and.w	r3, r5, r6
   84970:	9300      	str	r3, [sp, #0]
   84972:	f3c5 0380 	ubfx	r3, r5, #2, #1
   84976:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8497a:	bf14      	ite	ne
   8497c:	2200      	movne	r2, #0
   8497e:	2201      	moveq	r2, #1
   84980:	fa06 f101 	lsl.w	r1, r6, r1
   84984:	4620      	mov	r0, r4
   84986:	4c04      	ldr	r4, [pc, #16]	; (84998 <pio_configure_pin+0xcc>)
   84988:	47a0      	blx	r4
	return 1;
   8498a:	4630      	mov	r0, r6
		break;
   8498c:	e7dc      	b.n	84948 <pio_configure_pin+0x7c>
   8498e:	bf00      	nop
   84990:	000847b3 	.word	0x000847b3
   84994:	000847f1 	.word	0x000847f1
   84998:	00084823 	.word	0x00084823

0008499c <pio_configure_pin_group>:
{
   8499c:	b570      	push	{r4, r5, r6, lr}
   8499e:	b082      	sub	sp, #8
   849a0:	4605      	mov	r5, r0
   849a2:	460e      	mov	r6, r1
   849a4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   849a6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   849aa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   849ae:	d027      	beq.n	84a00 <pio_configure_pin_group+0x64>
   849b0:	d811      	bhi.n	849d6 <pio_configure_pin_group+0x3a>
   849b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   849b6:	d016      	beq.n	849e6 <pio_configure_pin_group+0x4a>
   849b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   849bc:	d111      	bne.n	849e2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   849be:	460a      	mov	r2, r1
   849c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   849c4:	4b19      	ldr	r3, [pc, #100]	; (84a2c <pio_configure_pin_group+0x90>)
   849c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   849c8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   849cc:	bf14      	ite	ne
   849ce:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   849d0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   849d2:	2001      	movs	r0, #1
   849d4:	e012      	b.n	849fc <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   849d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   849da:	d015      	beq.n	84a08 <pio_configure_pin_group+0x6c>
   849dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   849e0:	d012      	beq.n	84a08 <pio_configure_pin_group+0x6c>
		return 0;
   849e2:	2000      	movs	r0, #0
   849e4:	e00a      	b.n	849fc <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   849e6:	460a      	mov	r2, r1
   849e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   849ec:	4b0f      	ldr	r3, [pc, #60]	; (84a2c <pio_configure_pin_group+0x90>)
   849ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   849f0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   849f4:	bf14      	ite	ne
   849f6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   849f8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   849fa:	2001      	movs	r0, #1
}
   849fc:	b002      	add	sp, #8
   849fe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   84a00:	4b0b      	ldr	r3, [pc, #44]	; (84a30 <pio_configure_pin_group+0x94>)
   84a02:	4798      	blx	r3
	return 1;
   84a04:	2001      	movs	r0, #1
		break;
   84a06:	e7f9      	b.n	849fc <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84a08:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84a0c:	f004 0301 	and.w	r3, r4, #1
   84a10:	9300      	str	r3, [sp, #0]
   84a12:	f3c4 0380 	ubfx	r3, r4, #2, #1
   84a16:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   84a1a:	bf14      	ite	ne
   84a1c:	2200      	movne	r2, #0
   84a1e:	2201      	moveq	r2, #1
   84a20:	4631      	mov	r1, r6
   84a22:	4628      	mov	r0, r5
   84a24:	4c03      	ldr	r4, [pc, #12]	; (84a34 <pio_configure_pin_group+0x98>)
   84a26:	47a0      	blx	r4
	return 1;
   84a28:	2001      	movs	r0, #1
		break;
   84a2a:	e7e7      	b.n	849fc <pio_configure_pin_group+0x60>
   84a2c:	000847b3 	.word	0x000847b3
   84a30:	000847f1 	.word	0x000847f1
   84a34:	00084823 	.word	0x00084823

00084a38 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   84a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84a3c:	4604      	mov	r4, r0
   84a3e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   84a40:	4b0e      	ldr	r3, [pc, #56]	; (84a7c <pio_handler_process+0x44>)
   84a42:	4798      	blx	r3
   84a44:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   84a46:	4620      	mov	r0, r4
   84a48:	4b0d      	ldr	r3, [pc, #52]	; (84a80 <pio_handler_process+0x48>)
   84a4a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   84a4c:	4005      	ands	r5, r0
   84a4e:	d013      	beq.n	84a78 <pio_handler_process+0x40>
   84a50:	4c0c      	ldr	r4, [pc, #48]	; (84a84 <pio_handler_process+0x4c>)
   84a52:	f104 0660 	add.w	r6, r4, #96	; 0x60
   84a56:	e003      	b.n	84a60 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   84a58:	42b4      	cmp	r4, r6
   84a5a:	d00d      	beq.n	84a78 <pio_handler_process+0x40>
   84a5c:	3410      	adds	r4, #16
		while (status != 0) {
   84a5e:	b15d      	cbz	r5, 84a78 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   84a60:	6820      	ldr	r0, [r4, #0]
   84a62:	4540      	cmp	r0, r8
   84a64:	d1f8      	bne.n	84a58 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   84a66:	6861      	ldr	r1, [r4, #4]
   84a68:	4229      	tst	r1, r5
   84a6a:	d0f5      	beq.n	84a58 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   84a6c:	68e3      	ldr	r3, [r4, #12]
   84a6e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   84a70:	6863      	ldr	r3, [r4, #4]
   84a72:	ea25 0503 	bic.w	r5, r5, r3
   84a76:	e7ef      	b.n	84a58 <pio_handler_process+0x20>
   84a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84a7c:	00084853 	.word	0x00084853
   84a80:	00084857 	.word	0x00084857
   84a84:	2000219c 	.word	0x2000219c

00084a88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   84a88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   84a8a:	210a      	movs	r1, #10
   84a8c:	4801      	ldr	r0, [pc, #4]	; (84a94 <PIOA_Handler+0xc>)
   84a8e:	4b02      	ldr	r3, [pc, #8]	; (84a98 <PIOA_Handler+0x10>)
   84a90:	4798      	blx	r3
   84a92:	bd08      	pop	{r3, pc}
   84a94:	400e0c00 	.word	0x400e0c00
   84a98:	00084a39 	.word	0x00084a39

00084a9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   84a9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   84a9e:	210b      	movs	r1, #11
   84aa0:	4801      	ldr	r0, [pc, #4]	; (84aa8 <PIOB_Handler+0xc>)
   84aa2:	4b02      	ldr	r3, [pc, #8]	; (84aac <PIOB_Handler+0x10>)
   84aa4:	4798      	blx	r3
   84aa6:	bd08      	pop	{r3, pc}
   84aa8:	400e0e00 	.word	0x400e0e00
   84aac:	00084a39 	.word	0x00084a39

00084ab0 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84ab0:	4a17      	ldr	r2, [pc, #92]	; (84b10 <pmc_switch_mck_to_mainck+0x60>)
   84ab2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84ab4:	f023 0303 	bic.w	r3, r3, #3
   84ab8:	f043 0301 	orr.w	r3, r3, #1
   84abc:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84abe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84ac0:	f013 0f08 	tst.w	r3, #8
   84ac4:	d10a      	bne.n	84adc <pmc_switch_mck_to_mainck+0x2c>
   84ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84aca:	4911      	ldr	r1, [pc, #68]	; (84b10 <pmc_switch_mck_to_mainck+0x60>)
   84acc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84ace:	f012 0f08 	tst.w	r2, #8
   84ad2:	d103      	bne.n	84adc <pmc_switch_mck_to_mainck+0x2c>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84ad4:	3b01      	subs	r3, #1
   84ad6:	d1f9      	bne.n	84acc <pmc_switch_mck_to_mainck+0x1c>
			return 1;
   84ad8:	2001      	movs	r0, #1
   84ada:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84adc:	4a0c      	ldr	r2, [pc, #48]	; (84b10 <pmc_switch_mck_to_mainck+0x60>)
   84ade:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84ae4:	4318      	orrs	r0, r3
   84ae6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84ae8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84aea:	f013 0f08 	tst.w	r3, #8
   84aee:	d10a      	bne.n	84b06 <pmc_switch_mck_to_mainck+0x56>
   84af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84af4:	4906      	ldr	r1, [pc, #24]	; (84b10 <pmc_switch_mck_to_mainck+0x60>)
   84af6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84af8:	f012 0f08 	tst.w	r2, #8
   84afc:	d105      	bne.n	84b0a <pmc_switch_mck_to_mainck+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84afe:	3b01      	subs	r3, #1
   84b00:	d1f9      	bne.n	84af6 <pmc_switch_mck_to_mainck+0x46>
			return 1;
   84b02:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   84b04:	4770      	bx	lr
	return 0;
   84b06:	2000      	movs	r0, #0
   84b08:	4770      	bx	lr
   84b0a:	2000      	movs	r0, #0
   84b0c:	4770      	bx	lr
   84b0e:	bf00      	nop
   84b10:	400e0400 	.word	0x400e0400

00084b14 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84b14:	4a17      	ldr	r2, [pc, #92]	; (84b74 <pmc_switch_mck_to_pllack+0x60>)
   84b16:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84b1c:	4318      	orrs	r0, r3
   84b1e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84b20:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84b22:	f013 0f08 	tst.w	r3, #8
   84b26:	d10a      	bne.n	84b3e <pmc_switch_mck_to_pllack+0x2a>
   84b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84b2c:	4911      	ldr	r1, [pc, #68]	; (84b74 <pmc_switch_mck_to_pllack+0x60>)
   84b2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84b30:	f012 0f08 	tst.w	r2, #8
   84b34:	d103      	bne.n	84b3e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84b36:	3b01      	subs	r3, #1
   84b38:	d1f9      	bne.n	84b2e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   84b3a:	2001      	movs	r0, #1
   84b3c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84b3e:	4a0d      	ldr	r2, [pc, #52]	; (84b74 <pmc_switch_mck_to_pllack+0x60>)
   84b40:	6b13      	ldr	r3, [r2, #48]	; 0x30
   84b42:	f023 0303 	bic.w	r3, r3, #3
   84b46:	f043 0302 	orr.w	r3, r3, #2
   84b4a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84b4c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84b4e:	f013 0f08 	tst.w	r3, #8
   84b52:	d10a      	bne.n	84b6a <pmc_switch_mck_to_pllack+0x56>
   84b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84b58:	4906      	ldr	r1, [pc, #24]	; (84b74 <pmc_switch_mck_to_pllack+0x60>)
   84b5a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84b5c:	f012 0f08 	tst.w	r2, #8
   84b60:	d105      	bne.n	84b6e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84b62:	3b01      	subs	r3, #1
   84b64:	d1f9      	bne.n	84b5a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   84b66:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   84b68:	4770      	bx	lr
	return 0;
   84b6a:	2000      	movs	r0, #0
   84b6c:	4770      	bx	lr
   84b6e:	2000      	movs	r0, #0
   84b70:	4770      	bx	lr
   84b72:	bf00      	nop
   84b74:	400e0400 	.word	0x400e0400

00084b78 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   84b78:	4a08      	ldr	r2, [pc, #32]	; (84b9c <pmc_osc_enable_main_xtal+0x24>)
   84b7a:	6a13      	ldr	r3, [r2, #32]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84b7c:	f023 0303 	bic.w	r3, r3, #3
   84b80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84b84:	f043 0301 	orr.w	r3, r3, #1
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84b88:	0200      	lsls	r0, r0, #8
   84b8a:	b280      	uxth	r0, r0
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84b8c:	4303      	orrs	r3, r0
	PMC->CKGR_MOR = mor;
   84b8e:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84b90:	6e93      	ldr	r3, [r2, #104]	; 0x68
   84b92:	f013 0f01 	tst.w	r3, #1
   84b96:	d0fb      	beq.n	84b90 <pmc_osc_enable_main_xtal+0x18>
}
   84b98:	4770      	bx	lr
   84b9a:	bf00      	nop
   84b9c:	400e0400 	.word	0x400e0400

00084ba0 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   84ba0:	4b02      	ldr	r3, [pc, #8]	; (84bac <pmc_osc_is_ready_main_xtal+0xc>)
   84ba2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84ba4:	f000 0001 	and.w	r0, r0, #1
   84ba8:	4770      	bx	lr
   84baa:	bf00      	nop
   84bac:	400e0400 	.word	0x400e0400

00084bb0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84bb0:	4b02      	ldr	r3, [pc, #8]	; (84bbc <pmc_osc_is_ready_mainck+0xc>)
   84bb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84bb4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   84bb8:	4770      	bx	lr
   84bba:	bf00      	nop
   84bbc:	400e0400 	.word	0x400e0400

00084bc0 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   84bc0:	4b06      	ldr	r3, [pc, #24]	; (84bdc <pmc_mainck_osc_select+0x1c>)
   84bc2:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   84bc4:	b930      	cbnz	r0, 84bd4 <pmc_mainck_osc_select+0x14>
		mor |=  CKGR_MOR_MOSCSEL;
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   84bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84bca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84bce:	4a03      	ldr	r2, [pc, #12]	; (84bdc <pmc_mainck_osc_select+0x1c>)
   84bd0:	6213      	str	r3, [r2, #32]
   84bd2:	4770      	bx	lr
		mor |=  CKGR_MOR_MOSCSEL;
   84bd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   84bd8:	e7f7      	b.n	84bca <pmc_mainck_osc_select+0xa>
   84bda:	bf00      	nop
   84bdc:	400e0400 	.word	0x400e0400

00084be0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84be0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84be4:	4b01      	ldr	r3, [pc, #4]	; (84bec <pmc_disable_pllack+0xc>)
   84be6:	629a      	str	r2, [r3, #40]	; 0x28
   84be8:	4770      	bx	lr
   84bea:	bf00      	nop
   84bec:	400e0400 	.word	0x400e0400

00084bf0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84bf0:	4b02      	ldr	r3, [pc, #8]	; (84bfc <pmc_is_locked_pllack+0xc>)
   84bf2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84bf4:	f000 0002 	and.w	r0, r0, #2
   84bf8:	4770      	bx	lr
   84bfa:	bf00      	nop
   84bfc:	400e0400 	.word	0x400e0400

00084c00 <pmc_is_locked_upll>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   84c00:	4b02      	ldr	r3, [pc, #8]	; (84c0c <pmc_is_locked_upll+0xc>)
   84c02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   84c04:	f000 0040 	and.w	r0, r0, #64	; 0x40
   84c08:	4770      	bx	lr
   84c0a:	bf00      	nop
   84c0c:	400e0400 	.word	0x400e0400

00084c10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84c10:	281d      	cmp	r0, #29
   84c12:	d80e      	bhi.n	84c32 <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   84c14:	281f      	cmp	r0, #31
   84c16:	d80e      	bhi.n	84c36 <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84c18:	4b09      	ldr	r3, [pc, #36]	; (84c40 <pmc_enable_periph_clk+0x30>)
   84c1a:	699a      	ldr	r2, [r3, #24]
   84c1c:	2301      	movs	r3, #1
   84c1e:	4083      	lsls	r3, r0
   84c20:	4393      	bics	r3, r2
   84c22:	d00a      	beq.n	84c3a <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   84c24:	2301      	movs	r3, #1
   84c26:	fa03 f000 	lsl.w	r0, r3, r0
   84c2a:	4b05      	ldr	r3, [pc, #20]	; (84c40 <pmc_enable_periph_clk+0x30>)
   84c2c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   84c2e:	2000      	movs	r0, #0
   84c30:	4770      	bx	lr
		return 1;
   84c32:	2001      	movs	r0, #1
   84c34:	4770      	bx	lr
	return 0;
   84c36:	2000      	movs	r0, #0
   84c38:	4770      	bx	lr
   84c3a:	2000      	movs	r0, #0
}
   84c3c:	4770      	bx	lr
   84c3e:	bf00      	nop
   84c40:	400e0400 	.word	0x400e0400

00084c44 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   84c44:	281d      	cmp	r0, #29
   84c46:	d810      	bhi.n	84c6a <pmc_disable_periph_clk+0x26>
		return 1;
	}

	if (ul_id < 32) {
   84c48:	281f      	cmp	r0, #31
   84c4a:	d810      	bhi.n	84c6e <pmc_disable_periph_clk+0x2a>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84c4c:	4b09      	ldr	r3, [pc, #36]	; (84c74 <pmc_disable_periph_clk+0x30>)
   84c4e:	699a      	ldr	r2, [r3, #24]
   84c50:	2301      	movs	r3, #1
   84c52:	4083      	lsls	r3, r0
   84c54:	4393      	bics	r3, r2
   84c56:	d001      	beq.n	84c5c <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   84c58:	2000      	movs	r0, #0
}
   84c5a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
   84c5c:	2301      	movs	r3, #1
   84c5e:	fa03 f000 	lsl.w	r0, r3, r0
   84c62:	4b04      	ldr	r3, [pc, #16]	; (84c74 <pmc_disable_periph_clk+0x30>)
   84c64:	6158      	str	r0, [r3, #20]
	return 0;
   84c66:	2000      	movs	r0, #0
   84c68:	4770      	bx	lr
		return 1;
   84c6a:	2001      	movs	r0, #1
   84c6c:	4770      	bx	lr
	return 0;
   84c6e:	2000      	movs	r0, #0
   84c70:	4770      	bx	lr
   84c72:	bf00      	nop
   84c74:	400e0400 	.word	0x400e0400

00084c78 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84c78:	f44f 7380 	mov.w	r3, #256	; 0x100
   84c7c:	fa03 f000 	lsl.w	r0, r3, r0
   84c80:	4b01      	ldr	r3, [pc, #4]	; (84c88 <pmc_enable_pck+0x10>)
   84c82:	6018      	str	r0, [r3, #0]
   84c84:	4770      	bx	lr
   84c86:	bf00      	nop
   84c88:	400e0400 	.word	0x400e0400

00084c8c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   84c8c:	4b03      	ldr	r3, [pc, #12]	; (84c9c <pmc_set_fast_startup_input+0x10>)
   84c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84c90:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84c94:	4310      	orrs	r0, r2
   84c96:	6718      	str	r0, [r3, #112]	; 0x70
   84c98:	4770      	bx	lr
   84c9a:	bf00      	nop
   84c9c:	400e0400 	.word	0x400e0400

00084ca0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84ca0:	4b02      	ldr	r3, [pc, #8]	; (84cac <pmc_is_wakeup_clocks_restored+0xc>)
   84ca2:	7818      	ldrb	r0, [r3, #0]
}
   84ca4:	f080 0001 	eor.w	r0, r0, #1
   84ca8:	4770      	bx	lr
   84caa:	bf00      	nop
   84cac:	2000220c 	.word	0x2000220c

00084cb0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   84cb0:	b508      	push	{r3, lr}
   84cb2:	2014      	movs	r0, #20
   84cb4:	4b01      	ldr	r3, [pc, #4]	; (84cbc <spi_enable_clock+0xc>)
   84cb6:	4798      	blx	r3
   84cb8:	bd08      	pop	{r3, pc}
   84cba:	bf00      	nop
   84cbc:	00084c11 	.word	0x00084c11

00084cc0 <spi_disable_clock>:
 * \brief Disable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_disable_clock(Spi *p_spi)
{
   84cc0:	b508      	push	{r3, lr}
	pmc_disable_periph_clk(ul_id);
   84cc2:	2014      	movs	r0, #20
   84cc4:	4b01      	ldr	r3, [pc, #4]	; (84ccc <spi_disable_clock+0xc>)
   84cc6:	4798      	blx	r3
   84cc8:	bd08      	pop	{r3, pc}
   84cca:	bf00      	nop
   84ccc:	00084c45 	.word	0x00084c45

00084cd0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   84cd0:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   84cd2:	f643 2399 	movw	r3, #15001	; 0x3a99
   84cd6:	6904      	ldr	r4, [r0, #16]
   84cd8:	f014 0f01 	tst.w	r4, #1
   84cdc:	d103      	bne.n	84ce6 <spi_read+0x16>
		if (!timeout--) {
   84cde:	3b01      	subs	r3, #1
   84ce0:	d1f9      	bne.n	84cd6 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   84ce2:	2001      	movs	r0, #1
   84ce4:	e009      	b.n	84cfa <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   84ce6:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   84ce8:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   84cea:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   84cee:	bf1c      	itt	ne
   84cf0:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   84cf4:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   84cf6:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   84cf8:	2000      	movs	r0, #0
}
   84cfa:	bc10      	pop	{r4}
   84cfc:	4770      	bx	lr

00084cfe <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   84cfe:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   84d00:	f643 2499 	movw	r4, #15001	; 0x3a99
   84d04:	6905      	ldr	r5, [r0, #16]
   84d06:	f015 0f02 	tst.w	r5, #2
   84d0a:	d103      	bne.n	84d14 <spi_write+0x16>
		if (!timeout--) {
   84d0c:	3c01      	subs	r4, #1
   84d0e:	d1f9      	bne.n	84d04 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   84d10:	2001      	movs	r0, #1
   84d12:	e00c      	b.n	84d2e <spi_write+0x30>
   84d14:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   84d16:	f014 0f02 	tst.w	r4, #2
   84d1a:	d006      	beq.n	84d2a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   84d1c:	0412      	lsls	r2, r2, #16
   84d1e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   84d22:	4311      	orrs	r1, r2
		if (uc_last) {
   84d24:	b10b      	cbz	r3, 84d2a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   84d26:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   84d2a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   84d2c:	2000      	movs	r0, #0
}
   84d2e:	bc30      	pop	{r4, r5}
   84d30:	4770      	bx	lr

00084d32 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   84d32:	b932      	cbnz	r2, 84d42 <spi_set_clock_polarity+0x10>
   84d34:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   84d38:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84d3a:	f023 0301 	bic.w	r3, r3, #1
   84d3e:	6303      	str	r3, [r0, #48]	; 0x30
   84d40:	4770      	bx	lr
   84d42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   84d46:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84d48:	f043 0301 	orr.w	r3, r3, #1
   84d4c:	6303      	str	r3, [r0, #48]	; 0x30
   84d4e:	4770      	bx	lr

00084d50 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   84d50:	b932      	cbnz	r2, 84d60 <spi_set_clock_phase+0x10>
   84d52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   84d56:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84d58:	f023 0302 	bic.w	r3, r3, #2
   84d5c:	6303      	str	r3, [r0, #48]	; 0x30
   84d5e:	4770      	bx	lr
   84d60:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   84d64:	6b03      	ldr	r3, [r0, #48]	; 0x30
   84d66:	f043 0302 	orr.w	r3, r3, #2
   84d6a:	6303      	str	r3, [r0, #48]	; 0x30
   84d6c:	4770      	bx	lr

00084d6e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   84d6e:	1e43      	subs	r3, r0, #1
   84d70:	4419      	add	r1, r3
   84d72:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   84d76:	1e43      	subs	r3, r0, #1
   84d78:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   84d7a:	bf94      	ite	ls
   84d7c:	b200      	sxthls	r0, r0
		return -1;
   84d7e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   84d82:	4770      	bx	lr

00084d84 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   84d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   84d88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   84d8e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   84d90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84d92:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   84d96:	630a      	str	r2, [r1, #48]	; 0x30
   84d98:	4770      	bx	lr
	...

00084d9c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
   84d9c:	4603      	mov	r3, r0
   84d9e:	b9a8      	cbnz	r0, 84dcc <udd_sleep_mode+0x30>
   84da0:	4a17      	ldr	r2, [pc, #92]	; (84e00 <udd_sleep_mode+0x64>)
   84da2:	7812      	ldrb	r2, [r2, #0]
   84da4:	b342      	cbz	r2, 84df8 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84da6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84daa:	b672      	cpsid	i
   84dac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84db0:	4914      	ldr	r1, [pc, #80]	; (84e04 <udd_sleep_mode+0x68>)
   84db2:	7008      	strb	r0, [r1, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84db4:	4814      	ldr	r0, [pc, #80]	; (84e08 <udd_sleep_mode+0x6c>)
   84db6:	7881      	ldrb	r1, [r0, #2]
   84db8:	3901      	subs	r1, #1
   84dba:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84dbc:	b9e2      	cbnz	r2, 84df8 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84dbe:	2101      	movs	r1, #1
   84dc0:	4a10      	ldr	r2, [pc, #64]	; (84e04 <udd_sleep_mode+0x68>)
   84dc2:	7011      	strb	r1, [r2, #0]
   84dc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84dc8:	b662      	cpsie	i
   84dca:	e015      	b.n	84df8 <udd_sleep_mode+0x5c>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   84dcc:	4a0c      	ldr	r2, [pc, #48]	; (84e00 <udd_sleep_mode+0x64>)
   84dce:	7812      	ldrb	r2, [r2, #0]
   84dd0:	b992      	cbnz	r2, 84df8 <udd_sleep_mode+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84dd2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84dd6:	b672      	cpsid	i
   84dd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84ddc:	2000      	movs	r0, #0
   84dde:	4909      	ldr	r1, [pc, #36]	; (84e04 <udd_sleep_mode+0x68>)
   84de0:	7008      	strb	r0, [r1, #0]
	++sleepmgr_locks[mode];
   84de2:	4809      	ldr	r0, [pc, #36]	; (84e08 <udd_sleep_mode+0x6c>)
   84de4:	7881      	ldrb	r1, [r0, #2]
   84de6:	3101      	adds	r1, #1
   84de8:	7081      	strb	r1, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84dea:	b92a      	cbnz	r2, 84df8 <udd_sleep_mode+0x5c>
		cpu_irq_enable();
   84dec:	2101      	movs	r1, #1
   84dee:	4a05      	ldr	r2, [pc, #20]	; (84e04 <udd_sleep_mode+0x68>)
   84df0:	7011      	strb	r1, [r2, #0]
   84df2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84df6:	b662      	cpsie	i
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84df8:	4a01      	ldr	r2, [pc, #4]	; (84e00 <udd_sleep_mode+0x64>)
   84dfa:	7013      	strb	r3, [r2, #0]
}
   84dfc:	4770      	bx	lr
   84dfe:	bf00      	nop
   84e00:	2000220e 	.word	0x2000220e
   84e04:	20000a80 	.word	0x20000a80
   84e08:	20002798 	.word	0x20002798

00084e0c <udd_ctrl_init>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e0c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84e10:	b672      	cpsid	i
   84e12:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e16:	2100      	movs	r1, #0
   84e18:	4a0d      	ldr	r2, [pc, #52]	; (84e50 <udd_ctrl_init+0x44>)
   84e1a:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84e20:	4a0c      	ldr	r2, [pc, #48]	; (84e54 <udd_ctrl_init+0x48>)
   84e22:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84e26:	b92b      	cbnz	r3, 84e34 <udd_ctrl_init+0x28>
		cpu_irq_enable();
   84e28:	2201      	movs	r2, #1
   84e2a:	4b09      	ldr	r3, [pc, #36]	; (84e50 <udd_ctrl_init+0x44>)
   84e2c:	701a      	strb	r2, [r3, #0]
   84e2e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84e32:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84e34:	f44f 7200 	mov.w	r2, #512	; 0x200
   84e38:	4b06      	ldr	r3, [pc, #24]	; (84e54 <udd_ctrl_init+0x48>)
   84e3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84e3e:	4a06      	ldr	r2, [pc, #24]	; (84e58 <udd_ctrl_init+0x4c>)
   84e40:	2300      	movs	r3, #0
   84e42:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84e44:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84e46:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84e48:	4a04      	ldr	r2, [pc, #16]	; (84e5c <udd_ctrl_init+0x50>)
   84e4a:	7013      	strb	r3, [r2, #0]
   84e4c:	4770      	bx	lr
   84e4e:	bf00      	nop
   84e50:	20000a80 	.word	0x20000a80
   84e54:	400a4000 	.word	0x400a4000
   84e58:	200027ac 	.word	0x200027ac
   84e5c:	20002214 	.word	0x20002214

00084e60 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84e60:	2205      	movs	r2, #5
   84e62:	4b03      	ldr	r3, [pc, #12]	; (84e70 <udd_ctrl_stall_data+0x10>)
   84e64:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   84e66:	2220      	movs	r2, #32
   84e68:	4b02      	ldr	r3, [pc, #8]	; (84e74 <udd_ctrl_stall_data+0x14>)
   84e6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84e6e:	4770      	bx	lr
   84e70:	20002214 	.word	0x20002214
   84e74:	400a4000 	.word	0x400a4000

00084e78 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84e78:	2203      	movs	r2, #3
   84e7a:	4b11      	ldr	r3, [pc, #68]	; (84ec0 <udd_ctrl_send_zlp_in+0x48>)
   84e7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84e7e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   84e82:	b672      	cpsid	i
   84e84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e88:	2100      	movs	r1, #0
   84e8a:	4b0e      	ldr	r3, [pc, #56]	; (84ec4 <udd_ctrl_send_zlp_in+0x4c>)
   84e8c:	7019      	strb	r1, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84e8e:	4b0e      	ldr	r3, [pc, #56]	; (84ec8 <udd_ctrl_send_zlp_in+0x50>)
   84e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84e94:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84e9c:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84ea0:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84ea8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   84eac:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84eb0:	b92a      	cbnz	r2, 84ebe <udd_ctrl_send_zlp_in+0x46>
		cpu_irq_enable();
   84eb2:	2201      	movs	r2, #1
   84eb4:	4b03      	ldr	r3, [pc, #12]	; (84ec4 <udd_ctrl_send_zlp_in+0x4c>)
   84eb6:	701a      	strb	r2, [r3, #0]
   84eb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84ebc:	b662      	cpsie	i
   84ebe:	4770      	bx	lr
   84ec0:	20002214 	.word	0x20002214
   84ec4:	20000a80 	.word	0x20000a80
   84ec8:	400a4000 	.word	0x400a4000

00084ecc <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   84ecc:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   84ece:	4b02      	ldr	r3, [pc, #8]	; (84ed8 <udd_ctrl_endofrequest+0xc>)
   84ed0:	691b      	ldr	r3, [r3, #16]
   84ed2:	b103      	cbz	r3, 84ed6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   84ed4:	4798      	blx	r3
   84ed6:	bd08      	pop	{r3, pc}
   84ed8:	200027ac 	.word	0x200027ac

00084edc <udd_ctrl_in_sent>:
{
   84edc:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84ede:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84ee2:	b672      	cpsid	i
   84ee4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84ee8:	2100      	movs	r1, #0
   84eea:	4a4c      	ldr	r2, [pc, #304]	; (8501c <udd_ctrl_in_sent+0x140>)
   84eec:	7011      	strb	r1, [r2, #0]
	udd_disable_in_send_interrupt(0);
   84eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
   84ef2:	4a4b      	ldr	r2, [pc, #300]	; (85020 <udd_ctrl_in_sent+0x144>)
   84ef4:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (cpu_irq_is_enabled_flags(flags))
   84ef8:	b92b      	cbnz	r3, 84f06 <udd_ctrl_in_sent+0x2a>
		cpu_irq_enable();
   84efa:	2201      	movs	r2, #1
   84efc:	4b47      	ldr	r3, [pc, #284]	; (8501c <udd_ctrl_in_sent+0x140>)
   84efe:	701a      	strb	r2, [r3, #0]
   84f00:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f04:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84f06:	4b47      	ldr	r3, [pc, #284]	; (85024 <udd_ctrl_in_sent+0x148>)
   84f08:	781b      	ldrb	r3, [r3, #0]
   84f0a:	2b03      	cmp	r3, #3
   84f0c:	d057      	beq.n	84fbe <udd_ctrl_in_sent+0xe2>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84f0e:	4b46      	ldr	r3, [pc, #280]	; (85028 <udd_ctrl_in_sent+0x14c>)
   84f10:	881b      	ldrh	r3, [r3, #0]
   84f12:	4a46      	ldr	r2, [pc, #280]	; (8502c <udd_ctrl_in_sent+0x150>)
   84f14:	8994      	ldrh	r4, [r2, #12]
   84f16:	1ae4      	subs	r4, r4, r3
   84f18:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   84f1a:	b9c4      	cbnz	r4, 84f4e <udd_ctrl_in_sent+0x72>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84f1c:	4a44      	ldr	r2, [pc, #272]	; (85030 <udd_ctrl_in_sent+0x154>)
   84f1e:	8811      	ldrh	r1, [r2, #0]
   84f20:	440b      	add	r3, r1
   84f22:	b29b      	uxth	r3, r3
   84f24:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84f26:	4a41      	ldr	r2, [pc, #260]	; (8502c <udd_ctrl_in_sent+0x150>)
   84f28:	88d2      	ldrh	r2, [r2, #6]
   84f2a:	429a      	cmp	r2, r3
   84f2c:	d04c      	beq.n	84fc8 <udd_ctrl_in_sent+0xec>
				|| b_shortpacket) {
   84f2e:	4b41      	ldr	r3, [pc, #260]	; (85034 <udd_ctrl_in_sent+0x158>)
   84f30:	781b      	ldrb	r3, [r3, #0]
   84f32:	2b00      	cmp	r3, #0
   84f34:	d148      	bne.n	84fc8 <udd_ctrl_in_sent+0xec>
		if ((!udd_g_ctrlreq.over_under_run)
   84f36:	4b3d      	ldr	r3, [pc, #244]	; (8502c <udd_ctrl_in_sent+0x150>)
   84f38:	695b      	ldr	r3, [r3, #20]
   84f3a:	2b00      	cmp	r3, #0
   84f3c:	d05f      	beq.n	84ffe <udd_ctrl_in_sent+0x122>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84f3e:	4798      	blx	r3
   84f40:	2800      	cmp	r0, #0
   84f42:	d05c      	beq.n	84ffe <udd_ctrl_in_sent+0x122>
			udd_ctrl_payload_buf_cnt = 0;
   84f44:	2200      	movs	r2, #0
   84f46:	4b38      	ldr	r3, [pc, #224]	; (85028 <udd_ctrl_in_sent+0x14c>)
   84f48:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84f4a:	4b38      	ldr	r3, [pc, #224]	; (8502c <udd_ctrl_in_sent+0x150>)
   84f4c:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84f4e:	2c3f      	cmp	r4, #63	; 0x3f
   84f50:	d955      	bls.n	84ffe <udd_ctrl_in_sent+0x122>
		b_shortpacket = false;
   84f52:	2200      	movs	r2, #0
   84f54:	4b37      	ldr	r3, [pc, #220]	; (85034 <udd_ctrl_in_sent+0x158>)
   84f56:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84f58:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f5a:	4b34      	ldr	r3, [pc, #208]	; (8502c <udd_ctrl_in_sent+0x150>)
   84f5c:	689a      	ldr	r2, [r3, #8]
   84f5e:	4b32      	ldr	r3, [pc, #200]	; (85028 <udd_ctrl_in_sent+0x14c>)
   84f60:	881d      	ldrh	r5, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84f62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i");
   84f66:	b672      	cpsid	i
   84f68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f6c:	2100      	movs	r1, #0
   84f6e:	4b2b      	ldr	r3, [pc, #172]	; (8501c <udd_ctrl_in_sent+0x140>)
   84f70:	7019      	strb	r1, [r3, #0]
	if (Is_udd_out_received(0)) {
   84f72:	4b2b      	ldr	r3, [pc, #172]	; (85020 <udd_ctrl_in_sent+0x144>)
   84f74:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84f78:	f413 7f00 	tst.w	r3, #512	; 0x200
   84f7c:	d143      	bne.n	85006 <udd_ctrl_in_sent+0x12a>
	for (i = 0; i < nb_remain; i++) {
   84f7e:	b144      	cbz	r4, 84f92 <udd_ctrl_in_sent+0xb6>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f80:	442a      	add	r2, r5
   84f82:	4b2d      	ldr	r3, [pc, #180]	; (85038 <udd_ctrl_in_sent+0x15c>)
		*ptr_dest++ = *ptr_src++;
   84f84:	f812 1b01 	ldrb.w	r1, [r2], #1
   84f88:	f803 1b01 	strb.w	r1, [r3], #1
	for (i = 0; i < nb_remain; i++) {
   84f8c:	b2d9      	uxtb	r1, r3
   84f8e:	42a1      	cmp	r1, r4
   84f90:	d3f8      	bcc.n	84f84 <udd_ctrl_in_sent+0xa8>
	udd_ctrl_payload_buf_cnt += nb_remain;
   84f92:	442c      	add	r4, r5
   84f94:	4b24      	ldr	r3, [pc, #144]	; (85028 <udd_ctrl_in_sent+0x14c>)
   84f96:	801c      	strh	r4, [r3, #0]
	udd_ack_in_send(0);
   84f98:	4b21      	ldr	r3, [pc, #132]	; (85020 <udd_ctrl_in_sent+0x144>)
   84f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84f9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   84fa6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84faa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84fae:	b928      	cbnz	r0, 84fbc <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84fb0:	2201      	movs	r2, #1
   84fb2:	4b1a      	ldr	r3, [pc, #104]	; (8501c <udd_ctrl_in_sent+0x140>)
   84fb4:	701a      	strb	r2, [r3, #0]
   84fb6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84fba:	b662      	cpsie	i
   84fbc:	bd38      	pop	{r3, r4, r5, pc}
		udd_ctrl_endofrequest();
   84fbe:	4b1f      	ldr	r3, [pc, #124]	; (8503c <udd_ctrl_in_sent+0x160>)
   84fc0:	4798      	blx	r3
		udd_ctrl_init();
   84fc2:	4b1f      	ldr	r3, [pc, #124]	; (85040 <udd_ctrl_in_sent+0x164>)
   84fc4:	4798      	blx	r3
		return;
   84fc6:	bd38      	pop	{r3, r4, r5, pc}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84fc8:	2204      	movs	r2, #4
   84fca:	4b16      	ldr	r3, [pc, #88]	; (85024 <udd_ctrl_in_sent+0x148>)
   84fcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84fce:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   84fd2:	b672      	cpsid	i
   84fd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84fd8:	2100      	movs	r1, #0
   84fda:	4a10      	ldr	r2, [pc, #64]	; (8501c <udd_ctrl_in_sent+0x140>)
   84fdc:	7011      	strb	r1, [r2, #0]
	udd_ack_nak_in(0);
   84fde:	4a10      	ldr	r2, [pc, #64]	; (85020 <udd_ctrl_in_sent+0x144>)
   84fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84fe4:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   84fe8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   84fec:	2b00      	cmp	r3, #0
   84fee:	d1e5      	bne.n	84fbc <udd_ctrl_in_sent+0xe0>
		cpu_irq_enable();
   84ff0:	2201      	movs	r2, #1
   84ff2:	4b0a      	ldr	r3, [pc, #40]	; (8501c <udd_ctrl_in_sent+0x140>)
   84ff4:	701a      	strb	r2, [r3, #0]
   84ff6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84ffa:	b662      	cpsie	i
   84ffc:	bd38      	pop	{r3, r4, r5, pc}
		b_shortpacket = true;
   84ffe:	2201      	movs	r2, #1
   85000:	4b0c      	ldr	r3, [pc, #48]	; (85034 <udd_ctrl_in_sent+0x158>)
   85002:	701a      	strb	r2, [r3, #0]
   85004:	e7a9      	b.n	84f5a <udd_ctrl_in_sent+0x7e>
	if (cpu_irq_is_enabled_flags(flags))
   85006:	b928      	cbnz	r0, 85014 <udd_ctrl_in_sent+0x138>
		cpu_irq_enable();
   85008:	2201      	movs	r2, #1
   8500a:	4b04      	ldr	r3, [pc, #16]	; (8501c <udd_ctrl_in_sent+0x140>)
   8500c:	701a      	strb	r2, [r3, #0]
   8500e:	f3bf 8f5f 	dmb	sy
   85012:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85014:	2204      	movs	r2, #4
   85016:	4b03      	ldr	r3, [pc, #12]	; (85024 <udd_ctrl_in_sent+0x148>)
   85018:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8501a:	bd38      	pop	{r3, r4, r5, pc}
   8501c:	20000a80 	.word	0x20000a80
   85020:	400a4000 	.word	0x400a4000
   85024:	20002214 	.word	0x20002214
   85028:	20002210 	.word	0x20002210
   8502c:	200027ac 	.word	0x200027ac
   85030:	20002212 	.word	0x20002212
   85034:	2000220d 	.word	0x2000220d
   85038:	20180000 	.word	0x20180000
   8503c:	00084ecd 	.word	0x00084ecd
   85040:	00084e0d 	.word	0x00084e0d

00085044 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85044:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
   85046:	7d03      	ldrb	r3, [r0, #20]
   85048:	f013 0f01 	tst.w	r3, #1
   8504c:	d013      	beq.n	85076 <udd_ep_finish_job+0x32>
   8504e:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
   85050:	7d03      	ldrb	r3, [r0, #20]
   85052:	f36f 0300 	bfc	r3, #0, #1
   85056:	7503      	strb	r3, [r0, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85058:	6804      	ldr	r4, [r0, #0]
   8505a:	b164      	cbz	r4, 85076 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   8505c:	f102 0308 	add.w	r3, r2, #8
   85060:	015b      	lsls	r3, r3, #5
   85062:	4905      	ldr	r1, [pc, #20]	; (85078 <udd_ep_finish_job+0x34>)
   85064:	58cb      	ldr	r3, [r1, r3]
   85066:	f013 0f08 	tst.w	r3, #8
		ep_num |= USB_EP_DIR_IN;
   8506a:	bf18      	it	ne
   8506c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85070:	6881      	ldr	r1, [r0, #8]
   85072:	4628      	mov	r0, r5
   85074:	47a0      	blx	r4
   85076:	bd38      	pop	{r3, r4, r5, pc}
   85078:	400a4000 	.word	0x400a4000

0008507c <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   8507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8507e:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   85080:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   85084:	4a59      	ldr	r2, [pc, #356]	; (851ec <udd_ep_trans_done+0x170>)
   85086:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8508a:	7d12      	ldrb	r2, [r2, #20]
   8508c:	f012 0f01 	tst.w	r2, #1
   85090:	f000 809e 	beq.w	851d0 <udd_ep_trans_done+0x154>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85094:	460a      	mov	r2, r1
   85096:	4955      	ldr	r1, [pc, #340]	; (851ec <udd_ep_trans_done+0x170>)
   85098:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8509c:	68d4      	ldr	r4, [r2, #12]
   8509e:	6892      	ldr	r2, [r2, #8]
   850a0:	4294      	cmp	r4, r2
   850a2:	d079      	beq.n	85198 <udd_ep_trans_done+0x11c>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   850a4:	1b12      	subs	r2, r2, r4

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   850a6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   850aa:	bf92      	itee	ls
   850ac:	0417      	lslls	r7, r2, #16
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   850ae:	f44f 3280 	movhi.w	r2, #65536	; 0x10000
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   850b2:	2700      	movhi	r7, #0
   850b4:	0141      	lsls	r1, r0, #5
   850b6:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
   850ba:	f501 2120 	add.w	r1, r1, #655360	; 0xa0000
		}
		if (Is_udd_endpoint_in(ep)) {
   850be:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   850c2:	f015 0f08 	tst.w	r5, #8
   850c6:	d014      	beq.n	850f2 <udd_ep_trans_done+0x76>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   850c8:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   850cc:	f005 0507 	and.w	r5, r5, #7
   850d0:	2108      	movs	r1, #8
   850d2:	40a9      	lsls	r1, r5
   850d4:	3901      	subs	r1, #1
   850d6:	4211      	tst	r1, r2
   850d8:	d013      	beq.n	85102 <udd_ep_trans_done+0x86>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   850da:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   850de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   850e2:	4d42      	ldr	r5, [pc, #264]	; (851ec <udd_ep_trans_done+0x170>)
   850e4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   850e8:	7d0d      	ldrb	r5, [r1, #20]
   850ea:	f36f 0541 	bfc	r5, #1, #1
   850ee:	750d      	strb	r5, [r1, #20]
   850f0:	e007      	b.n	85102 <udd_ep_trans_done+0x86>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   850f2:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   850f6:	f3c5 1501 	ubfx	r5, r5, #4, #2
   850fa:	2d01      	cmp	r5, #1
   850fc:	d035      	beq.n	8516a <udd_ep_trans_done+0xee>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   850fe:	f047 0714 	orr.w	r7, r7, #20
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85102:	493b      	ldr	r1, [pc, #236]	; (851f0 <udd_ep_trans_done+0x174>)
   85104:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   85108:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   8510c:	4e37      	ldr	r6, [pc, #220]	; (851ec <udd_ep_trans_done+0x170>)
   8510e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85112:	686d      	ldr	r5, [r5, #4]
   85114:	442c      	add	r4, r5
   85116:	604c      	str	r4, [r1, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85118:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   8511c:	b672      	cpsid	i
   8511e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85122:	2600      	movs	r6, #0
   85124:	4c33      	ldr	r4, [pc, #204]	; (851f4 <udd_ep_trans_done+0x178>)
   85126:	7026      	strb	r6, [r4, #0]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   85128:	68cc      	ldr	r4, [r1, #12]
   8512a:	f014 0f10 	tst.w	r4, #16
   8512e:	d125      	bne.n	8517c <udd_ep_trans_done+0x100>
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85130:	f047 0721 	orr.w	r7, r7, #33	; 0x21
				& UDPHS_DMASTATUS_END_TR_ST)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85134:	608f      	str	r7, [r1, #8]
			ptr_job->buf_cnt += next_trans;
   85136:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   8513a:	492c      	ldr	r1, [pc, #176]	; (851ec <udd_ep_trans_done+0x170>)
   8513c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85140:	68c8      	ldr	r0, [r1, #12]
   85142:	4410      	add	r0, r2
   85144:	60c8      	str	r0, [r1, #12]
			ptr_job->buf_load = next_trans;
   85146:	610a      	str	r2, [r1, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85148:	4a2b      	ldr	r2, [pc, #172]	; (851f8 <udd_ep_trans_done+0x17c>)
   8514a:	6911      	ldr	r1, [r2, #16]
   8514c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   85150:	fa00 f303 	lsl.w	r3, r0, r3
   85154:	430b      	orrs	r3, r1
   85156:	6113      	str	r3, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85158:	2d00      	cmp	r5, #0
   8515a:	d139      	bne.n	851d0 <udd_ep_trans_done+0x154>
		cpu_irq_enable();
   8515c:	2201      	movs	r2, #1
   8515e:	4b25      	ldr	r3, [pc, #148]	; (851f4 <udd_ep_trans_done+0x178>)
   85160:	701a      	strb	r2, [r3, #0]
   85162:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85166:	b662      	cpsie	i
   85168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   8516a:	f8d1 5100 	ldr.w	r5, [r1, #256]	; 0x100
   8516e:	f005 0507 	and.w	r5, r5, #7
   85172:	2108      	movs	r1, #8
   85174:	40a9      	lsls	r1, r5
   85176:	428a      	cmp	r2, r1
   85178:	d8c3      	bhi.n	85102 <udd_ep_trans_done+0x86>
   8517a:	e7c0      	b.n	850fe <udd_ep_trans_done+0x82>
	if (cpu_irq_is_enabled_flags(flags))
   8517c:	b92d      	cbnz	r5, 8518a <udd_ep_trans_done+0x10e>
		cpu_irq_enable();
   8517e:	2101      	movs	r1, #1
   85180:	4a1c      	ldr	r2, [pc, #112]	; (851f4 <udd_ep_trans_done+0x178>)
   85182:	7011      	strb	r1, [r2, #0]
   85184:	f3bf 8f5f 	dmb	sy
   85188:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   8518a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8518e:	4917      	ldr	r1, [pc, #92]	; (851ec <udd_ep_trans_done+0x170>)
   85190:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   85194:	68d1      	ldr	r1, [r2, #12]
   85196:	6091      	str	r1, [r2, #8]
   85198:	0142      	lsls	r2, r0, #5
   8519a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   8519e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
	}
	if (Is_udd_endpoint_in(ep)) {
   851a2:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   851a6:	f011 0f08 	tst.w	r1, #8
   851aa:	d008      	beq.n	851be <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
   851ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   851b0:	4c0e      	ldr	r4, [pc, #56]	; (851ec <udd_ep_trans_done+0x170>)
   851b2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   851b6:	7d09      	ldrb	r1, [r1, #20]
   851b8:	f011 0f02 	tst.w	r1, #2
   851bc:	d109      	bne.n	851d2 <udd_ep_trans_done+0x156>
   851be:	4602      	mov	r2, r0
	ptr_job = &udd_ep_job[ep - 1];
   851c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			udd_enable_endpoint_interrupt(ep);
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   851c4:	2100      	movs	r1, #0
   851c6:	4809      	ldr	r0, [pc, #36]	; (851ec <udd_ep_trans_done+0x170>)
   851c8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   851cc:	4b0b      	ldr	r3, [pc, #44]	; (851fc <udd_ep_trans_done+0x180>)
   851ce:	4798      	blx	r3
   851d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			udd_enable_tx_pkt_ready_interrupt(ep);
   851d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   851d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			udd_enable_endpoint_interrupt(ep);
   851da:	4b07      	ldr	r3, [pc, #28]	; (851f8 <udd_ep_trans_done+0x17c>)
   851dc:	6919      	ldr	r1, [r3, #16]
   851de:	f44f 7280 	mov.w	r2, #256	; 0x100
   851e2:	fa02 f000 	lsl.w	r0, r2, r0
   851e6:	4308      	orrs	r0, r1
   851e8:	6118      	str	r0, [r3, #16]
			return;
   851ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851ec:	20002218 	.word	0x20002218
   851f0:	400a4300 	.word	0x400a4300
   851f4:	20000a80 	.word	0x20000a80
   851f8:	400a4000 	.word	0x400a4000
   851fc:	00085045 	.word	0x00085045

00085200 <UDPHS_Handler>:
{
   85200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	udd_enable_periph_ck();
   85204:	201d      	movs	r0, #29
   85206:	4ba6      	ldr	r3, [pc, #664]	; (854a0 <UDPHS_Handler+0x2a0>)
   85208:	4798      	blx	r3
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8520a:	4ba6      	ldr	r3, [pc, #664]	; (854a4 <UDPHS_Handler+0x2a4>)
   8520c:	4798      	blx	r3
   8520e:	b920      	cbnz	r0, 8521a <UDPHS_Handler+0x1a>
   85210:	4ba5      	ldr	r3, [pc, #660]	; (854a8 <UDPHS_Handler+0x2a8>)
   85212:	695b      	ldr	r3, [r3, #20]
   85214:	f013 0f02 	tst.w	r3, #2
   85218:	d00f      	beq.n	8523a <UDPHS_Handler+0x3a>
	if (Is_udd_sof()) {
   8521a:	4ba3      	ldr	r3, [pc, #652]	; (854a8 <UDPHS_Handler+0x2a8>)
   8521c:	695b      	ldr	r3, [r3, #20]
   8521e:	f013 0f08 	tst.w	r3, #8
   85222:	d015      	beq.n	85250 <UDPHS_Handler+0x50>
		udd_ack_sof();
   85224:	4ba0      	ldr	r3, [pc, #640]	; (854a8 <UDPHS_Handler+0x2a8>)
   85226:	2208      	movs	r2, #8
   85228:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   8522a:	695b      	ldr	r3, [r3, #20]
   8522c:	f013 0f01 	tst.w	r3, #1
   85230:	d00b      	beq.n	8524a <UDPHS_Handler+0x4a>
		UDC_SOF_EVENT();
   85232:	4b9e      	ldr	r3, [pc, #632]	; (854ac <UDPHS_Handler+0x2ac>)
   85234:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   85236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __ASM volatile ("cpsid i");
   8523a:	b672      	cpsid	i
   8523c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85240:	2200      	movs	r2, #0
   85242:	4b9b      	ldr	r3, [pc, #620]	; (854b0 <UDPHS_Handler+0x2b0>)
   85244:	701a      	strb	r2, [r3, #0]
		return;
   85246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udc_sof_notify();
   8524a:	4b9a      	ldr	r3, [pc, #616]	; (854b4 <UDPHS_Handler+0x2b4>)
   8524c:	4798      	blx	r3
   8524e:	e7f0      	b.n	85232 <UDPHS_Handler+0x32>
	if (Is_udd_msof()) {
   85250:	4b95      	ldr	r3, [pc, #596]	; (854a8 <UDPHS_Handler+0x2a8>)
   85252:	695b      	ldr	r3, [r3, #20]
   85254:	f013 0f04 	tst.w	r3, #4
   85258:	d137      	bne.n	852ca <UDPHS_Handler+0xca>
	uint32_t status = udd_get_endpoint_status(0);
   8525a:	4a93      	ldr	r2, [pc, #588]	; (854a8 <UDPHS_Handler+0x2a8>)
   8525c:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
	if (!Is_udd_endpoint_interrupt(0)) {
   85260:	6952      	ldr	r2, [r2, #20]
   85262:	f412 7f80 	tst.w	r2, #256	; 0x100
   85266:	d029      	beq.n	852bc <UDPHS_Handler+0xbc>
	udd_disable_nak_in_interrupt(0);
   85268:	4a8f      	ldr	r2, [pc, #572]	; (854a8 <UDPHS_Handler+0x2a8>)
   8526a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8526e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   85276:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	if (Is_udd_endpoint_status_setup_received(status)) {
   8527a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8527e:	d12b      	bne.n	852d8 <UDPHS_Handler+0xd8>
	if (Is_udd_endpoint_status_in_sent(status)
   85280:	f413 6f80 	tst.w	r3, #1024	; 0x400
   85284:	d006      	beq.n	85294 <UDPHS_Handler+0x94>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85286:	4a88      	ldr	r2, [pc, #544]	; (854a8 <UDPHS_Handler+0x2a8>)
   85288:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   8528c:	f412 6f80 	tst.w	r2, #1024	; 0x400
   85290:	f040 808f 	bne.w	853b2 <UDPHS_Handler+0x1b2>
	if (Is_udd_endpoint_status_out_received(status)) {
   85294:	f413 7f00 	tst.w	r3, #512	; 0x200
   85298:	f040 808f 	bne.w	853ba <UDPHS_Handler+0x1ba>
	if (Is_udd_endpoint_status_stall(status)) {
   8529c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   852a0:	d004      	beq.n	852ac <UDPHS_Handler+0xac>
		udd_ack_stall(0);
   852a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   852a6:	4a80      	ldr	r2, [pc, #512]	; (854a8 <UDPHS_Handler+0x2a8>)
   852a8:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	if (Is_udd_endpoint_status_nak_out(status)) {
   852ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   852b0:	f040 813c 	bne.w	8552c <UDPHS_Handler+0x32c>
	if (Is_udd_endpoint_status_nak_in(status)) {
   852b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   852b8:	f040 814e 	bne.w	85558 <UDPHS_Handler+0x358>
	for (i = 0; i < nb_data; i++) {
   852bc:	2301      	movs	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   852be:	497a      	ldr	r1, [pc, #488]	; (854a8 <UDPHS_Handler+0x2a8>)
   852c0:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   852c4:	f44f 7c80 	mov.w	ip, #256	; 0x100
   852c8:	e199      	b.n	855fe <UDPHS_Handler+0x3fe>
		udd_ack_msof();
   852ca:	2204      	movs	r2, #4
   852cc:	4b76      	ldr	r3, [pc, #472]	; (854a8 <UDPHS_Handler+0x2a8>)
   852ce:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   852d0:	4b78      	ldr	r3, [pc, #480]	; (854b4 <UDPHS_Handler+0x2b4>)
   852d2:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   852d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   852d8:	4b77      	ldr	r3, [pc, #476]	; (854b8 <UDPHS_Handler+0x2b8>)
   852da:	781b      	ldrb	r3, [r3, #0]
   852dc:	2b00      	cmp	r3, #0
   852de:	d141      	bne.n	85364 <UDPHS_Handler+0x164>
	if (8 != udd_byte_count(0)) {
   852e0:	4b71      	ldr	r3, [pc, #452]	; (854a8 <UDPHS_Handler+0x2a8>)
   852e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   852e6:	f3c3 530a 	ubfx	r3, r3, #20, #11
   852ea:	2b08      	cmp	r3, #8
   852ec:	d13f      	bne.n	8536e <UDPHS_Handler+0x16e>
   852ee:	4a73      	ldr	r2, [pc, #460]	; (854bc <UDPHS_Handler+0x2bc>)
   852f0:	4b73      	ldr	r3, [pc, #460]	; (854c0 <UDPHS_Handler+0x2c0>)
	for (i = 0; i < 8; i++) {
   852f2:	4874      	ldr	r0, [pc, #464]	; (854c4 <UDPHS_Handler+0x2c4>)
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   852f4:	f813 1b01 	ldrb.w	r1, [r3], #1
   852f8:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   852fc:	4283      	cmp	r3, r0
   852fe:	d1f9      	bne.n	852f4 <UDPHS_Handler+0xf4>
	if (udc_process_setup() == false) {
   85300:	4b71      	ldr	r3, [pc, #452]	; (854c8 <UDPHS_Handler+0x2c8>)
   85302:	4798      	blx	r3
   85304:	2800      	cmp	r0, #0
   85306:	d03b      	beq.n	85380 <UDPHS_Handler+0x180>
	udd_ack_setup_received(0);
   85308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8530c:	4b66      	ldr	r3, [pc, #408]	; (854a8 <UDPHS_Handler+0x2a8>)
   8530e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Udd_setup_is_in()) {
   85312:	4b6e      	ldr	r3, [pc, #440]	; (854cc <UDPHS_Handler+0x2cc>)
   85314:	f993 3000 	ldrsb.w	r3, [r3]
   85318:	2b00      	cmp	r3, #0
   8531a:	db3a      	blt.n	85392 <UDPHS_Handler+0x192>
		if (0 == udd_g_ctrlreq.req.wLength) {
   8531c:	4b6b      	ldr	r3, [pc, #428]	; (854cc <UDPHS_Handler+0x2cc>)
   8531e:	88db      	ldrh	r3, [r3, #6]
   85320:	2b00      	cmp	r3, #0
   85322:	d042      	beq.n	853aa <UDPHS_Handler+0x1aa>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85324:	2200      	movs	r2, #0
   85326:	4b6a      	ldr	r3, [pc, #424]	; (854d0 <UDPHS_Handler+0x2d0>)
   85328:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8532a:	4b6a      	ldr	r3, [pc, #424]	; (854d4 <UDPHS_Handler+0x2d4>)
   8532c:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8532e:	2101      	movs	r1, #1
   85330:	4b61      	ldr	r3, [pc, #388]	; (854b8 <UDPHS_Handler+0x2b8>)
   85332:	7019      	strb	r1, [r3, #0]
		udd_ack_nak_in(0);
   85334:	495c      	ldr	r1, [pc, #368]	; (854a8 <UDPHS_Handler+0x2a8>)
   85336:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   8533a:	f8c1 0118 	str.w	r0, [r1, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8533e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85342:	b672      	cpsid	i
   85344:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85348:	4c59      	ldr	r4, [pc, #356]	; (854b0 <UDPHS_Handler+0x2b0>)
   8534a:	7022      	strb	r2, [r4, #0]
		udd_enable_nak_in_interrupt(0);
   8534c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85350:	2b00      	cmp	r3, #0
   85352:	f040 8266 	bne.w	85822 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   85356:	2201      	movs	r2, #1
   85358:	7022      	strb	r2, [r4, #0]
   8535a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8535e:	b662      	cpsie	i
   85360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_endofrequest();
   85364:	4b5c      	ldr	r3, [pc, #368]	; (854d8 <UDPHS_Handler+0x2d8>)
   85366:	4798      	blx	r3
		udd_ctrl_init();
   85368:	4b5c      	ldr	r3, [pc, #368]	; (854dc <UDPHS_Handler+0x2dc>)
   8536a:	4798      	blx	r3
   8536c:	e7b8      	b.n	852e0 <UDPHS_Handler+0xe0>
		udd_ctrl_stall_data();
   8536e:	4b5c      	ldr	r3, [pc, #368]	; (854e0 <UDPHS_Handler+0x2e0>)
   85370:	4798      	blx	r3
		udd_ack_setup_received(0);
   85372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85376:	4b4c      	ldr	r3, [pc, #304]	; (854a8 <UDPHS_Handler+0x2a8>)
   85378:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   8537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_stall_data();
   85380:	4b57      	ldr	r3, [pc, #348]	; (854e0 <UDPHS_Handler+0x2e0>)
   85382:	4798      	blx	r3
		udd_ack_setup_received(0);
   85384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85388:	4b47      	ldr	r3, [pc, #284]	; (854a8 <UDPHS_Handler+0x2a8>)
   8538a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   8538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_prev_payload_buf_cnt = 0;
   85392:	2300      	movs	r3, #0
   85394:	4a4e      	ldr	r2, [pc, #312]	; (854d0 <UDPHS_Handler+0x2d0>)
   85396:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85398:	4a4e      	ldr	r2, [pc, #312]	; (854d4 <UDPHS_Handler+0x2d4>)
   8539a:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8539c:	2202      	movs	r2, #2
   8539e:	4b46      	ldr	r3, [pc, #280]	; (854b8 <UDPHS_Handler+0x2b8>)
   853a0:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   853a2:	4b50      	ldr	r3, [pc, #320]	; (854e4 <UDPHS_Handler+0x2e4>)
   853a4:	4798      	blx	r3
   853a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_send_zlp_in();
   853aa:	4b4f      	ldr	r3, [pc, #316]	; (854e8 <UDPHS_Handler+0x2e8>)
   853ac:	4798      	blx	r3
   853ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_in_sent();
   853b2:	4b4c      	ldr	r3, [pc, #304]	; (854e4 <UDPHS_Handler+0x2e4>)
   853b4:	4798      	blx	r3
   853b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   853ba:	4b3f      	ldr	r3, [pc, #252]	; (854b8 <UDPHS_Handler+0x2b8>)
   853bc:	781b      	ldrb	r3, [r3, #0]
   853be:	2b01      	cmp	r3, #1
   853c0:	d00c      	beq.n	853dc <UDPHS_Handler+0x1dc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   853c2:	2b02      	cmp	r3, #2
   853c4:	d004      	beq.n	853d0 <UDPHS_Handler+0x1d0>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   853c6:	2b04      	cmp	r3, #4
   853c8:	d002      	beq.n	853d0 <UDPHS_Handler+0x1d0>
			udd_ctrl_stall_data();
   853ca:	4b45      	ldr	r3, [pc, #276]	; (854e0 <UDPHS_Handler+0x2e0>)
   853cc:	4798      	blx	r3
   853ce:	e001      	b.n	853d4 <UDPHS_Handler+0x1d4>
			udd_ctrl_endofrequest();
   853d0:	4b41      	ldr	r3, [pc, #260]	; (854d8 <UDPHS_Handler+0x2d8>)
   853d2:	4798      	blx	r3
		udd_ctrl_init();
   853d4:	4b41      	ldr	r3, [pc, #260]	; (854dc <UDPHS_Handler+0x2dc>)
   853d6:	4798      	blx	r3
   853d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nb_data = udd_byte_count(0);
   853dc:	4b32      	ldr	r3, [pc, #200]	; (854a8 <UDPHS_Handler+0x2a8>)
   853de:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
   853e2:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   853e6:	4b39      	ldr	r3, [pc, #228]	; (854cc <UDPHS_Handler+0x2cc>)
   853e8:	899b      	ldrh	r3, [r3, #12]
   853ea:	4a3a      	ldr	r2, [pc, #232]	; (854d4 <UDPHS_Handler+0x2d4>)
   853ec:	8814      	ldrh	r4, [r2, #0]
   853ee:	1822      	adds	r2, r4, r0
   853f0:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   853f2:	bfbc      	itt	lt
   853f4:	1b1b      	sublt	r3, r3, r4
   853f6:	b298      	uxthlt	r0, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   853f8:	4b34      	ldr	r3, [pc, #208]	; (854cc <UDPHS_Handler+0x2cc>)
   853fa:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   853fc:	b178      	cbz	r0, 8541e <UDPHS_Handler+0x21e>
   853fe:	1e63      	subs	r3, r4, #1
   85400:	441a      	add	r2, r3
   85402:	4b2f      	ldr	r3, [pc, #188]	; (854c0 <UDPHS_Handler+0x2c0>)
		*ptr_dest++ = *ptr_src++;
   85404:	f813 1b01 	ldrb.w	r1, [r3], #1
   85408:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < nb_data; i++) {
   8540c:	b2d9      	uxtb	r1, r3
   8540e:	4281      	cmp	r1, r0
   85410:	d3f8      	bcc.n	85404 <UDPHS_Handler+0x204>
	udd_ctrl_payload_buf_cnt += nb_data;
   85412:	4404      	add	r4, r0
   85414:	b2a4      	uxth	r4, r4
   85416:	4b2f      	ldr	r3, [pc, #188]	; (854d4 <UDPHS_Handler+0x2d4>)
   85418:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8541a:	2840      	cmp	r0, #64	; 0x40
   8541c:	d00e      	beq.n	8543c <UDPHS_Handler+0x23c>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8541e:	4b2b      	ldr	r3, [pc, #172]	; (854cc <UDPHS_Handler+0x2cc>)
   85420:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85422:	695b      	ldr	r3, [r3, #20]
   85424:	b10b      	cbz	r3, 8542a <UDPHS_Handler+0x22a>
			if (!udd_g_ctrlreq.over_under_run()) {
   85426:	4798      	blx	r3
   85428:	b380      	cbz	r0, 8548c <UDPHS_Handler+0x28c>
		udd_ack_out_received(0);
   8542a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8542e:	4b1e      	ldr	r3, [pc, #120]	; (854a8 <UDPHS_Handler+0x2a8>)
   85430:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85434:	4b2c      	ldr	r3, [pc, #176]	; (854e8 <UDPHS_Handler+0x2e8>)
   85436:	4798      	blx	r3
   85438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			|| (udd_g_ctrlreq.req.wLength <=
   8543c:	4b23      	ldr	r3, [pc, #140]	; (854cc <UDPHS_Handler+0x2cc>)
   8543e:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_buf_cnt +
   85440:	4b23      	ldr	r3, [pc, #140]	; (854d0 <UDPHS_Handler+0x2d0>)
   85442:	881b      	ldrh	r3, [r3, #0]
   85444:	4423      	add	r3, r4
			|| (udd_g_ctrlreq.req.wLength <=
   85446:	429a      	cmp	r2, r3
   85448:	dde9      	ble.n	8541e <UDPHS_Handler+0x21e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8544a:	4b20      	ldr	r3, [pc, #128]	; (854cc <UDPHS_Handler+0x2cc>)
   8544c:	899b      	ldrh	r3, [r3, #12]
   8544e:	42a3      	cmp	r3, r4
   85450:	d04c      	beq.n	854ec <UDPHS_Handler+0x2ec>
	udd_ack_out_received(0);
   85452:	4a15      	ldr	r2, [pc, #84]	; (854a8 <UDPHS_Handler+0x2a8>)
   85454:	f44f 7300 	mov.w	r3, #512	; 0x200
   85458:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	udd_ack_nak_in(0);
   8545c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85460:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85464:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   85468:	b672      	cpsid	i
   8546a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8546e:	2400      	movs	r4, #0
   85470:	480f      	ldr	r0, [pc, #60]	; (854b0 <UDPHS_Handler+0x2b0>)
   85472:	7004      	strb	r4, [r0, #0]
	udd_enable_nak_in_interrupt(0);
   85474:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
	if (cpu_irq_is_enabled_flags(flags))
   85478:	2b00      	cmp	r3, #0
   8547a:	f040 81d2 	bne.w	85822 <UDPHS_Handler+0x622>
		cpu_irq_enable();
   8547e:	2201      	movs	r2, #1
   85480:	7002      	strb	r2, [r0, #0]
   85482:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85486:	b662      	cpsie	i
   85488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				udd_ctrl_stall_data();
   8548c:	4b14      	ldr	r3, [pc, #80]	; (854e0 <UDPHS_Handler+0x2e0>)
   8548e:	4798      	blx	r3
				udd_ack_out_received(0);
   85490:	f44f 7200 	mov.w	r2, #512	; 0x200
   85494:	4b04      	ldr	r3, [pc, #16]	; (854a8 <UDPHS_Handler+0x2a8>)
   85496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   8549a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8549e:	bf00      	nop
   854a0:	00084c11 	.word	0x00084c11
   854a4:	00084ca1 	.word	0x00084ca1
   854a8:	400a4000 	.word	0x400a4000
   854ac:	0008139d 	.word	0x0008139d
   854b0:	20000a80 	.word	0x20000a80
   854b4:	00082e81 	.word	0x00082e81
   854b8:	20002214 	.word	0x20002214
   854bc:	200027ab 	.word	0x200027ab
   854c0:	20180000 	.word	0x20180000
   854c4:	20180008 	.word	0x20180008
   854c8:	00082ec1 	.word	0x00082ec1
   854cc:	200027ac 	.word	0x200027ac
   854d0:	20002212 	.word	0x20002212
   854d4:	20002210 	.word	0x20002210
   854d8:	00084ecd 	.word	0x00084ecd
   854dc:	00084e0d 	.word	0x00084e0d
   854e0:	00084e61 	.word	0x00084e61
   854e4:	00084edd 	.word	0x00084edd
   854e8:	00084e79 	.word	0x00084e79
		if (!udd_g_ctrlreq.over_under_run) {
   854ec:	4bb0      	ldr	r3, [pc, #704]	; (857b0 <UDPHS_Handler+0x5b0>)
   854ee:	695b      	ldr	r3, [r3, #20]
   854f0:	b153      	cbz	r3, 85508 <UDPHS_Handler+0x308>
		if (!udd_g_ctrlreq.over_under_run()) {
   854f2:	4798      	blx	r3
   854f4:	b188      	cbz	r0, 8551a <UDPHS_Handler+0x31a>
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   854f6:	49af      	ldr	r1, [pc, #700]	; (857b4 <UDPHS_Handler+0x5b4>)
   854f8:	4aaf      	ldr	r2, [pc, #700]	; (857b8 <UDPHS_Handler+0x5b8>)
   854fa:	880b      	ldrh	r3, [r1, #0]
   854fc:	8810      	ldrh	r0, [r2, #0]
   854fe:	4403      	add	r3, r0
   85500:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85502:	2300      	movs	r3, #0
   85504:	8013      	strh	r3, [r2, #0]
   85506:	e7a4      	b.n	85452 <UDPHS_Handler+0x252>
			udd_ctrl_stall_data();
   85508:	4bac      	ldr	r3, [pc, #688]	; (857bc <UDPHS_Handler+0x5bc>)
   8550a:	4798      	blx	r3
			udd_ack_out_received(0);
   8550c:	f44f 7200 	mov.w	r2, #512	; 0x200
   85510:	4bab      	ldr	r3, [pc, #684]	; (857c0 <UDPHS_Handler+0x5c0>)
   85512:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ctrl_stall_data();
   8551a:	4ba8      	ldr	r3, [pc, #672]	; (857bc <UDPHS_Handler+0x5bc>)
   8551c:	4798      	blx	r3
			udd_ack_out_received(0);
   8551e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85522:	4ba7      	ldr	r3, [pc, #668]	; (857c0 <UDPHS_Handler+0x5c0>)
   85524:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   85528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_out(0);
   8552c:	4ba4      	ldr	r3, [pc, #656]	; (857c0 <UDPHS_Handler+0x5c0>)
   8552e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85532:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_in_send(0))
   85536:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8553a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   8553e:	f040 8170 	bne.w	85822 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85542:	4ba0      	ldr	r3, [pc, #640]	; (857c4 <UDPHS_Handler+0x5c4>)
   85544:	781b      	ldrb	r3, [r3, #0]
   85546:	2b03      	cmp	r3, #3
   85548:	f040 816b 	bne.w	85822 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   8554c:	2220      	movs	r2, #32
   8554e:	4b9c      	ldr	r3, [pc, #624]	; (857c0 <UDPHS_Handler+0x5c0>)
   85550:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_nak_in(0);
   85558:	4b99      	ldr	r3, [pc, #612]	; (857c0 <UDPHS_Handler+0x5c0>)
   8555a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8555e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	if (Is_udd_out_received(0))
   85562:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85566:	f413 7f00 	tst.w	r3, #512	; 0x200
   8556a:	f040 815a 	bne.w	85822 <UDPHS_Handler+0x622>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8556e:	4b95      	ldr	r3, [pc, #596]	; (857c4 <UDPHS_Handler+0x5c4>)
   85570:	781b      	ldrb	r3, [r3, #0]
   85572:	2b01      	cmp	r3, #1
   85574:	d008      	beq.n	85588 <UDPHS_Handler+0x388>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85576:	2b04      	cmp	r3, #4
   85578:	f040 8153 	bne.w	85822 <UDPHS_Handler+0x622>
		udd_enable_stall_handshake(0);
   8557c:	2220      	movs	r2, #32
   8557e:	4b90      	ldr	r3, [pc, #576]	; (857c0 <UDPHS_Handler+0x5c0>)
   85580:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ctrl_send_zlp_in();
   85588:	4b8f      	ldr	r3, [pc, #572]	; (857c8 <UDPHS_Handler+0x5c8>)
   8558a:	4798      	blx	r3
   8558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (udd_endpoint_dma_get_status(ep)
   85590:	4b8e      	ldr	r3, [pc, #568]	; (857cc <UDPHS_Handler+0x5cc>)
   85592:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   85596:	68da      	ldr	r2, [r3, #12]
   85598:	f012 0f01 	tst.w	r2, #1
   8559c:	f040 8141 	bne.w	85822 <UDPHS_Handler+0x622>
			udd_disable_endpoint_dma_interrupt(ep);
   855a0:	4987      	ldr	r1, [pc, #540]	; (857c0 <UDPHS_Handler+0x5c0>)
   855a2:	690a      	ldr	r2, [r1, #16]
   855a4:	ea22 0606 	bic.w	r6, r2, r6
   855a8:	610e      	str	r6, [r1, #16]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   855aa:	68db      	ldr	r3, [r3, #12]
			if (nb_remaining) {
   855ac:	0c1b      	lsrs	r3, r3, #16
   855ae:	d008      	beq.n	855c2 <UDPHS_Handler+0x3c2>
				ptr_job->buf_cnt -= nb_remaining;
   855b0:	4a87      	ldr	r2, [pc, #540]	; (857d0 <UDPHS_Handler+0x5d0>)
   855b2:	006c      	lsls	r4, r5, #1
   855b4:	1965      	adds	r5, r4, r5
   855b6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   855ba:	68e9      	ldr	r1, [r5, #12]
   855bc:	1acb      	subs	r3, r1, r3
   855be:	60eb      	str	r3, [r5, #12]
				ptr_job->buf_size = ptr_job->buf_cnt;
   855c0:	60ab      	str	r3, [r5, #8]
			udd_ep_trans_done(ep);
   855c2:	4b84      	ldr	r3, [pc, #528]	; (857d4 <UDPHS_Handler+0x5d4>)
   855c4:	4798      	blx	r3
   855c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
					&& !Is_udd_tx_pkt_ready(ep)) {
				udd_disable_tx_pkt_ready_interrupt(ep);
   855ca:	0163      	lsls	r3, r4, #5
   855cc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   855d0:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   855d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   855d8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   855dc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		ptr_job = &udd_ep_job[ep - 1];
   855e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
				udd_ep_finish_job(ptr_job, false, ep);
   855e4:	4602      	mov	r2, r0
   855e6:	2100      	movs	r1, #0
   855e8:	4879      	ldr	r0, [pc, #484]	; (857d0 <UDPHS_Handler+0x5d0>)
   855ea:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   855ee:	4b7a      	ldr	r3, [pc, #488]	; (857d8 <UDPHS_Handler+0x5d8>)
   855f0:	4798      	blx	r3
   855f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   855f6:	3301      	adds	r3, #1
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   855f8:	2b07      	cmp	r3, #7
   855fa:	f000 80fd 	beq.w	857f8 <UDPHS_Handler+0x5f8>
   855fe:	b2d8      	uxtb	r0, r3
		ptr_job = &udd_ep_job[ep - 1];
   85600:	461c      	mov	r4, r3
   85602:	1e5d      	subs	r5, r3, #1
   85604:	46a8      	mov	r8, r5
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85606:	690f      	ldr	r7, [r1, #16]
   85608:	fa0e f605 	lsl.w	r6, lr, r5
   8560c:	4237      	tst	r7, r6
   8560e:	d002      	beq.n	85616 <UDPHS_Handler+0x416>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85610:	694a      	ldr	r2, [r1, #20]
   85612:	4216      	tst	r6, r2
   85614:	d1bc      	bne.n	85590 <UDPHS_Handler+0x390>
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85616:	690f      	ldr	r7, [r1, #16]
   85618:	fa0c f604 	lsl.w	r6, ip, r4
   8561c:	4237      	tst	r7, r6
   8561e:	d0ea      	beq.n	855f6 <UDPHS_Handler+0x3f6>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   85620:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85624:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85628:	f412 6f00 	tst.w	r2, #2048	; 0x800
   8562c:	d006      	beq.n	8563c <UDPHS_Handler+0x43c>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8562e:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85632:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85636:	f412 6f00 	tst.w	r2, #2048	; 0x800
   8563a:	d0c6      	beq.n	855ca <UDPHS_Handler+0x3ca>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8563c:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   85640:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85644:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   85648:	d0d5      	beq.n	855f6 <UDPHS_Handler+0x3f6>
					&& (0 == udd_nb_busy_bank(ep))) {
   8564a:	eb01 1244 	add.w	r2, r1, r4, lsl #5
   8564e:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85652:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85656:	d1ce      	bne.n	855f6 <UDPHS_Handler+0x3f6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85658:	4b59      	ldr	r3, [pc, #356]	; (857c0 <UDPHS_Handler+0x5c0>)
   8565a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   8565e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85662:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				udd_disable_endpoint_interrupt(ep);
   85666:	691a      	ldr	r2, [r3, #16]
   85668:	ea22 0606 	bic.w	r6, r2, r6
   8566c:	611e      	str	r6, [r3, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8566e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   85672:	4b57      	ldr	r3, [pc, #348]	; (857d0 <UDPHS_Handler+0x5d0>)
   85674:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   85678:	f898 2014 	ldrb.w	r2, [r8, #20]
   8567c:	f36f 0282 	bfc	r2, #2, #1
   85680:	f888 2014 	strb.w	r2, [r8, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   85684:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   85688:	f023 0302 	bic.w	r3, r3, #2
   8568c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
				udd_enable_stall_handshake(ep);
   85690:	2320      	movs	r3, #32
   85692:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				udd_reset_data_toggle(ep);
   85696:	2340      	movs	r3, #64	; 0x40
   85698:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   8569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_reset();
   856a0:	2210      	movs	r2, #16
   856a2:	4b47      	ldr	r3, [pc, #284]	; (857c0 <UDPHS_Handler+0x5c0>)
   856a4:	619a      	str	r2, [r3, #24]
   856a6:	4d4a      	ldr	r5, [pc, #296]	; (857d0 <UDPHS_Handler+0x5d0>)
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   856a8:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   856aa:	2701      	movs	r7, #1
   856ac:	4e4a      	ldr	r6, [pc, #296]	; (857d8 <UDPHS_Handler+0x5d8>)
   856ae:	3401      	adds	r4, #1
   856b0:	b2e4      	uxtb	r4, r4
   856b2:	4622      	mov	r2, r4
   856b4:	4639      	mov	r1, r7
   856b6:	4628      	mov	r0, r5
   856b8:	47b0      	blx	r6
   856ba:	3518      	adds	r5, #24
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   856bc:	2c06      	cmp	r4, #6
   856be:	d1f6      	bne.n	856ae <UDPHS_Handler+0x4ae>
		udc_reset();
   856c0:	4b46      	ldr	r3, [pc, #280]	; (857dc <UDPHS_Handler+0x5dc>)
   856c2:	4798      	blx	r3
	udd_configure_address(0);
   856c4:	4b3e      	ldr	r3, [pc, #248]	; (857c0 <UDPHS_Handler+0x5c0>)
   856c6:	681a      	ldr	r2, [r3, #0]
   856c8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   856cc:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   856ce:	681a      	ldr	r2, [r3, #0]
   856d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   856d4:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   856d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   856da:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   856de:	f022 0203 	bic.w	r2, r2, #3
   856e2:	f042 0243 	orr.w	r2, r2, #67	; 0x43
   856e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   856ea:	2201      	movs	r2, #1
   856ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   856f0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i");
   856f4:	b672      	cpsid	i
   856f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856fa:	2000      	movs	r0, #0
   856fc:	4938      	ldr	r1, [pc, #224]	; (857e0 <UDPHS_Handler+0x5e0>)
   856fe:	7008      	strb	r0, [r1, #0]
	udd_enable_setup_received_interrupt(0);
   85700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85704:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85708:	f44f 7100 	mov.w	r1, #512	; 0x200
   8570c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85710:	6919      	ldr	r1, [r3, #16]
   85712:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   85716:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
   85718:	b92a      	cbnz	r2, 85726 <UDPHS_Handler+0x526>
		cpu_irq_enable();
   8571a:	2201      	movs	r2, #1
   8571c:	4b30      	ldr	r3, [pc, #192]	; (857e0 <UDPHS_Handler+0x5e0>)
   8571e:	701a      	strb	r2, [r3, #0]
   85720:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85724:	b662      	cpsie	i
		udd_ctrl_init();
   85726:	4b2f      	ldr	r3, [pc, #188]	; (857e4 <UDPHS_Handler+0x5e4>)
   85728:	4798      	blx	r3
		udd_enable_sof_interrupt();
   8572a:	4b25      	ldr	r3, [pc, #148]	; (857c0 <UDPHS_Handler+0x5c0>)
   8572c:	691a      	ldr	r2, [r3, #16]
   8572e:	f042 0208 	orr.w	r2, r2, #8
   85732:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   85734:	691a      	ldr	r2, [r3, #16]
   85736:	f042 0204 	orr.w	r2, r2, #4
   8573a:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   8573c:	691a      	ldr	r2, [r3, #16]
   8573e:	f042 0202 	orr.w	r2, r2, #2
   85742:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
   85744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_ack_wake_up();
   85748:	4b1d      	ldr	r3, [pc, #116]	; (857c0 <UDPHS_Handler+0x5c0>)
   8574a:	2220      	movs	r2, #32
   8574c:	619a      	str	r2, [r3, #24]
		udd_disable_suspend_interrupt();
   8574e:	691a      	ldr	r2, [r3, #16]
   85750:	f022 0202 	bic.w	r2, r2, #2
   85754:	611a      	str	r2, [r3, #16]
		udd_enable_wake_up_interrupt();
   85756:	691a      	ldr	r2, [r3, #16]
   85758:	f042 0220 	orr.w	r2, r2, #32
   8575c:	611a      	str	r2, [r3, #16]
		udd_ack_suspend();
   8575e:	2202      	movs	r2, #2
   85760:	619a      	str	r2, [r3, #24]
		udd_disable_periph_ck();
   85762:	201d      	movs	r0, #29
   85764:	4b20      	ldr	r3, [pc, #128]	; (857e8 <UDPHS_Handler+0x5e8>)
   85766:	4798      	blx	r3
		UDC_SUSPEND_EVENT();
   85768:	4b20      	ldr	r3, [pc, #128]	; (857ec <UDPHS_Handler+0x5ec>)
   8576a:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
   8576c:	2000      	movs	r0, #0
   8576e:	4b20      	ldr	r3, [pc, #128]	; (857f0 <UDPHS_Handler+0x5f0>)
   85770:	4798      	blx	r3
		goto udd_interrupt_end;
   85772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		udd_sleep_mode(true); // Enter in IDLE mode
   85776:	2001      	movs	r0, #1
   85778:	4b1d      	ldr	r3, [pc, #116]	; (857f0 <UDPHS_Handler+0x5f0>)
   8577a:	4798      	blx	r3
		udd_ack_suspend();
   8577c:	4b10      	ldr	r3, [pc, #64]	; (857c0 <UDPHS_Handler+0x5c0>)
   8577e:	2202      	movs	r2, #2
   85780:	619a      	str	r2, [r3, #24]
		udd_ack_wake_up();
   85782:	2220      	movs	r2, #32
   85784:	619a      	str	r2, [r3, #24]
		udd_disable_wake_up_interrupt();
   85786:	691a      	ldr	r2, [r3, #16]
   85788:	f022 0220 	bic.w	r2, r2, #32
   8578c:	611a      	str	r2, [r3, #16]
		udd_enable_suspend_interrupt();
   8578e:	691a      	ldr	r2, [r3, #16]
   85790:	f042 0202 	orr.w	r2, r2, #2
   85794:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
   85796:	691a      	ldr	r2, [r3, #16]
   85798:	f042 0208 	orr.w	r2, r2, #8
   8579c:	611a      	str	r2, [r3, #16]
		udd_enable_msof_interrupt();
   8579e:	691a      	ldr	r2, [r3, #16]
   857a0:	f042 0204 	orr.w	r2, r2, #4
   857a4:	611a      	str	r2, [r3, #16]
		UDC_RESUME_EVENT();
   857a6:	4b13      	ldr	r3, [pc, #76]	; (857f4 <UDPHS_Handler+0x5f4>)
   857a8:	4798      	blx	r3
		goto udd_interrupt_end;
   857aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   857ae:	bf00      	nop
   857b0:	200027ac 	.word	0x200027ac
   857b4:	20002212 	.word	0x20002212
   857b8:	20002210 	.word	0x20002210
   857bc:	00084e61 	.word	0x00084e61
   857c0:	400a4000 	.word	0x400a4000
   857c4:	20002214 	.word	0x20002214
   857c8:	00084e79 	.word	0x00084e79
   857cc:	400a4300 	.word	0x400a4300
   857d0:	20002218 	.word	0x20002218
   857d4:	0008507d 	.word	0x0008507d
   857d8:	00085045 	.word	0x00085045
   857dc:	00082e25 	.word	0x00082e25
   857e0:	20000a80 	.word	0x20000a80
   857e4:	00084e0d 	.word	0x00084e0d
   857e8:	00084c45 	.word	0x00084c45
   857ec:	00081385 	.word	0x00081385
   857f0:	00084d9d 	.word	0x00084d9d
   857f4:	00081391 	.word	0x00081391
	if (Is_udd_reset()) {
   857f8:	4b0b      	ldr	r3, [pc, #44]	; (85828 <UDPHS_Handler+0x628>)
   857fa:	695b      	ldr	r3, [r3, #20]
   857fc:	f013 0f10 	tst.w	r3, #16
   85800:	f47f af4e 	bne.w	856a0 <UDPHS_Handler+0x4a0>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   85804:	4b08      	ldr	r3, [pc, #32]	; (85828 <UDPHS_Handler+0x628>)
   85806:	691b      	ldr	r3, [r3, #16]
   85808:	f013 0f02 	tst.w	r3, #2
   8580c:	d004      	beq.n	85818 <UDPHS_Handler+0x618>
   8580e:	4b06      	ldr	r3, [pc, #24]	; (85828 <UDPHS_Handler+0x628>)
   85810:	695b      	ldr	r3, [r3, #20]
   85812:	f013 0f02 	tst.w	r3, #2
   85816:	d197      	bne.n	85748 <UDPHS_Handler+0x548>
	if (Is_udd_wake_up()) {
   85818:	4b03      	ldr	r3, [pc, #12]	; (85828 <UDPHS_Handler+0x628>)
   8581a:	695b      	ldr	r3, [r3, #20]
   8581c:	f013 0f20 	tst.w	r3, #32
   85820:	d1a9      	bne.n	85776 <UDPHS_Handler+0x576>
   85822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85826:	bf00      	nop
   85828:	400a4000 	.word	0x400a4000

0008582c <udd_disable>:
{
   8582c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8582e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i");
   85832:	b672      	cpsid	i
   85834:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85838:	4e13      	ldr	r6, [pc, #76]	; (85888 <udd_disable+0x5c>)
   8583a:	2400      	movs	r4, #0
   8583c:	7034      	strb	r4, [r6, #0]
	udd_reset_periph();
   8583e:	4a13      	ldr	r2, [pc, #76]	; (8588c <udd_disable+0x60>)
   85840:	6813      	ldr	r3, [r2, #0]
   85842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   85846:	6013      	str	r3, [r2, #0]
	sysclk_disable_usb();
   85848:	4b11      	ldr	r3, [pc, #68]	; (85890 <udd_disable+0x64>)
   8584a:	4798      	blx	r3
	pmc_disable_periph_clk(ID_UDPHS);
   8584c:	201d      	movs	r0, #29
   8584e:	4b11      	ldr	r3, [pc, #68]	; (85894 <udd_disable+0x68>)
   85850:	4798      	blx	r3
	udd_sleep_mode(false);
   85852:	4620      	mov	r0, r4
   85854:	4b10      	ldr	r3, [pc, #64]	; (85898 <udd_disable+0x6c>)
   85856:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85858:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   8585c:	b672      	cpsid	i
   8585e:	f3bf 8f5f 	dmb	sy
   85862:	7034      	strb	r4, [r6, #0]
	--sleepmgr_locks[mode];
   85864:	490d      	ldr	r1, [pc, #52]	; (8589c <udd_disable+0x70>)
   85866:	78ca      	ldrb	r2, [r1, #3]
   85868:	3a01      	subs	r2, #1
   8586a:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   8586c:	b923      	cbnz	r3, 85878 <udd_disable+0x4c>
		cpu_irq_enable();
   8586e:	2201      	movs	r2, #1
   85870:	7032      	strb	r2, [r6, #0]
   85872:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85876:	b662      	cpsie	i
	if (cpu_irq_is_enabled_flags(flags))
   85878:	b92d      	cbnz	r5, 85886 <udd_disable+0x5a>
		cpu_irq_enable();
   8587a:	2201      	movs	r2, #1
   8587c:	4b02      	ldr	r3, [pc, #8]	; (85888 <udd_disable+0x5c>)
   8587e:	701a      	strb	r2, [r3, #0]
   85880:	f3bf 8f5f 	dmb	sy
   85884:	b662      	cpsie	i
   85886:	bd70      	pop	{r4, r5, r6, pc}
   85888:	20000a80 	.word	0x20000a80
   8588c:	400a4000 	.word	0x400a4000
   85890:	00084451 	.word	0x00084451
   85894:	00084c45 	.word	0x00084c45
   85898:	00084d9d 	.word	0x00084d9d
   8589c:	20002798 	.word	0x20002798

000858a0 <udd_attach>:
{
   858a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   858a6:	b672      	cpsid	i
   858a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858ac:	2200      	movs	r2, #0
   858ae:	4b1d      	ldr	r3, [pc, #116]	; (85924 <udd_attach+0x84>)
   858b0:	701a      	strb	r2, [r3, #0]
	udd_sleep_mode(true);
   858b2:	2001      	movs	r0, #1
   858b4:	4b1c      	ldr	r3, [pc, #112]	; (85928 <udd_attach+0x88>)
   858b6:	4798      	blx	r3
	udd_enable_periph_ck();
   858b8:	201d      	movs	r0, #29
   858ba:	4b1c      	ldr	r3, [pc, #112]	; (8592c <udd_attach+0x8c>)
   858bc:	4798      	blx	r3
	udd_attach_device();
   858be:	4b1c      	ldr	r3, [pc, #112]	; (85930 <udd_attach+0x90>)
   858c0:	681a      	ldr	r2, [r3, #0]
   858c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   858c6:	601a      	str	r2, [r3, #0]
   858c8:	681a      	ldr	r2, [r3, #0]
   858ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   858ce:	601a      	str	r2, [r3, #0]
	udd_enable_reset_interrupt();
   858d0:	691a      	ldr	r2, [r3, #16]
   858d2:	f042 0210 	orr.w	r2, r2, #16
   858d6:	611a      	str	r2, [r3, #16]
	udd_enable_suspend_interrupt();
   858d8:	691a      	ldr	r2, [r3, #16]
   858da:	f042 0202 	orr.w	r2, r2, #2
   858de:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
   858e0:	691a      	ldr	r2, [r3, #16]
   858e2:	f042 0220 	orr.w	r2, r2, #32
   858e6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
   858e8:	691a      	ldr	r2, [r3, #16]
   858ea:	f042 0208 	orr.w	r2, r2, #8
   858ee:	611a      	str	r2, [r3, #16]
	udd_enable_msof_interrupt();
   858f0:	691a      	ldr	r2, [r3, #16]
   858f2:	f042 0204 	orr.w	r2, r2, #4
   858f6:	611a      	str	r2, [r3, #16]
	udd_ack_sof();
   858f8:	2208      	movs	r2, #8
   858fa:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   858fc:	2204      	movs	r2, #4
   858fe:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   85900:	2210      	movs	r2, #16
   85902:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   85904:	2202      	movs	r2, #2
   85906:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   85908:	2220      	movs	r2, #32
   8590a:	619a      	str	r2, [r3, #24]
	udd_disable_periph_ck();
   8590c:	201d      	movs	r0, #29
   8590e:	4b09      	ldr	r3, [pc, #36]	; (85934 <udd_attach+0x94>)
   85910:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   85912:	b92c      	cbnz	r4, 85920 <udd_attach+0x80>
		cpu_irq_enable();
   85914:	2201      	movs	r2, #1
   85916:	4b03      	ldr	r3, [pc, #12]	; (85924 <udd_attach+0x84>)
   85918:	701a      	strb	r2, [r3, #0]
   8591a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8591e:	b662      	cpsie	i
   85920:	bd10      	pop	{r4, pc}
   85922:	bf00      	nop
   85924:	20000a80 	.word	0x20000a80
   85928:	00084d9d 	.word	0x00084d9d
   8592c:	00084c11 	.word	0x00084c11
   85930:	400a4000 	.word	0x400a4000
   85934:	00084c45 	.word	0x00084c45

00085938 <udd_enable>:
{
   85938:	b510      	push	{r4, lr}
	sysclk_enable_usb();
   8593a:	4b2a      	ldr	r3, [pc, #168]	; (859e4 <udd_enable+0xac>)
   8593c:	4798      	blx	r3
	udd_enable_periph_ck();
   8593e:	201d      	movs	r0, #29
   85940:	4b29      	ldr	r3, [pc, #164]	; (859e8 <udd_enable+0xb0>)
   85942:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85944:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i");
   85948:	b672      	cpsid	i
   8594a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8594e:	2200      	movs	r2, #0
   85950:	4b26      	ldr	r3, [pc, #152]	; (859ec <udd_enable+0xb4>)
   85952:	701a      	strb	r2, [r3, #0]
	udd_enable_periph();
   85954:	4926      	ldr	r1, [pc, #152]	; (859f0 <udd_enable+0xb8>)
   85956:	680b      	ldr	r3, [r1, #0]
   85958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8595c:	600b      	str	r3, [r1, #0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8595e:	4b25      	ldr	r3, [pc, #148]	; (859f4 <udd_enable+0xbc>)
   85960:	2150      	movs	r1, #80	; 0x50
   85962:	f883 131d 	strb.w	r1, [r3, #797]	; 0x31d
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85966:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8596a:	6019      	str	r1, [r3, #0]
		udd_ep_job[i].busy = false;
   8596c:	4822      	ldr	r0, [pc, #136]	; (859f8 <udd_enable+0xc0>)
   8596e:	0053      	lsls	r3, r2, #1
   85970:	1899      	adds	r1, r3, r2
   85972:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   85976:	7d09      	ldrb	r1, [r1, #20]
		udd_ep_job[i].stall_requested = false;
   85978:	4413      	add	r3, r2
   8597a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   8597e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   85982:	f36f 0182 	bfc	r1, #2, #1
   85986:	7519      	strb	r1, [r3, #20]
   85988:	3201      	adds	r2, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8598a:	2a06      	cmp	r2, #6
   8598c:	d1ef      	bne.n	8596e <udd_enable+0x36>
	udd_high_speed_enable();
   8598e:	4a18      	ldr	r2, [pc, #96]	; (859f0 <udd_enable+0xb8>)
   85990:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   85994:	f023 0303 	bic.w	r3, r3, #3
   85998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   8599c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   859a0:	4b16      	ldr	r3, [pc, #88]	; (859fc <udd_enable+0xc4>)
   859a2:	4798      	blx	r3
	udd_b_idle = false;
   859a4:	2200      	movs	r2, #0
   859a6:	4b16      	ldr	r3, [pc, #88]	; (85a00 <udd_enable+0xc8>)
   859a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   859aa:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i");
   859ae:	b672      	cpsid	i
   859b0:	f3bf 8f5f 	dmb	sy
   859b4:	490d      	ldr	r1, [pc, #52]	; (859ec <udd_enable+0xb4>)
   859b6:	700a      	strb	r2, [r1, #0]
	++sleepmgr_locks[mode];
   859b8:	4912      	ldr	r1, [pc, #72]	; (85a04 <udd_enable+0xcc>)
   859ba:	78ca      	ldrb	r2, [r1, #3]
   859bc:	3201      	adds	r2, #1
   859be:	70ca      	strb	r2, [r1, #3]
	if (cpu_irq_is_enabled_flags(flags))
   859c0:	b92b      	cbnz	r3, 859ce <udd_enable+0x96>
		cpu_irq_enable();
   859c2:	2201      	movs	r2, #1
   859c4:	4b09      	ldr	r3, [pc, #36]	; (859ec <udd_enable+0xb4>)
   859c6:	701a      	strb	r2, [r3, #0]
   859c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   859cc:	b662      	cpsie	i
	udd_attach();
   859ce:	4b0e      	ldr	r3, [pc, #56]	; (85a08 <udd_enable+0xd0>)
   859d0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   859d2:	b92c      	cbnz	r4, 859e0 <udd_enable+0xa8>
		cpu_irq_enable();
   859d4:	2201      	movs	r2, #1
   859d6:	4b05      	ldr	r3, [pc, #20]	; (859ec <udd_enable+0xb4>)
   859d8:	701a      	strb	r2, [r3, #0]
   859da:	f3bf 8f5f 	dmb	sy
   859de:	b662      	cpsie	i
   859e0:	bd10      	pop	{r4, pc}
   859e2:	bf00      	nop
   859e4:	0008441d 	.word	0x0008441d
   859e8:	00084c11 	.word	0x00084c11
   859ec:	20000a80 	.word	0x20000a80
   859f0:	400a4000 	.word	0x400a4000
   859f4:	e000e100 	.word	0xe000e100
   859f8:	20002218 	.word	0x20002218
   859fc:	00084c8d 	.word	0x00084c8d
   85a00:	2000220e 	.word	0x2000220e
   85a04:	20002798 	.word	0x20002798
   85a08:	000858a1 	.word	0x000858a1

00085a0c <udd_detach>:
{
   85a0c:	b508      	push	{r3, lr}
	udd_enable_periph_ck();
   85a0e:	201d      	movs	r0, #29
   85a10:	4b08      	ldr	r3, [pc, #32]	; (85a34 <udd_detach+0x28>)
   85a12:	4798      	blx	r3
	udd_detach_device();
   85a14:	4b08      	ldr	r3, [pc, #32]	; (85a38 <udd_detach+0x2c>)
   85a16:	681a      	ldr	r2, [r3, #0]
   85a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   85a1c:	601a      	str	r2, [r3, #0]
   85a1e:	681a      	ldr	r2, [r3, #0]
   85a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85a24:	601a      	str	r2, [r3, #0]
	udd_disable_periph_ck();
   85a26:	201d      	movs	r0, #29
   85a28:	4b04      	ldr	r3, [pc, #16]	; (85a3c <udd_detach+0x30>)
   85a2a:	4798      	blx	r3
	udd_sleep_mode(false);
   85a2c:	2000      	movs	r0, #0
   85a2e:	4b04      	ldr	r3, [pc, #16]	; (85a40 <udd_detach+0x34>)
   85a30:	4798      	blx	r3
   85a32:	bd08      	pop	{r3, pc}
   85a34:	00084c11 	.word	0x00084c11
   85a38:	400a4000 	.word	0x400a4000
   85a3c:	00084c45 	.word	0x00084c45
   85a40:	00084d9d 	.word	0x00084d9d

00085a44 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   85a44:	4b02      	ldr	r3, [pc, #8]	; (85a50 <udd_is_high_speed+0xc>)
   85a46:	6958      	ldr	r0, [r3, #20]
}
   85a48:	f000 0001 	and.w	r0, r0, #1
   85a4c:	4770      	bx	lr
   85a4e:	bf00      	nop
   85a50:	400a4000 	.word	0x400a4000

00085a54 <udd_set_address>:
	udd_disable_address();
   85a54:	4b08      	ldr	r3, [pc, #32]	; (85a78 <udd_set_address+0x24>)
   85a56:	681a      	ldr	r2, [r3, #0]
   85a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   85a5c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   85a5e:	681a      	ldr	r2, [r3, #0]
   85a60:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85a64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85a68:	4302      	orrs	r2, r0
   85a6a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85a6c:	681a      	ldr	r2, [r3, #0]
   85a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85a72:	601a      	str	r2, [r3, #0]
   85a74:	4770      	bx	lr
   85a76:	bf00      	nop
   85a78:	400a4000 	.word	0x400a4000

00085a7c <udd_getaddress>:
	return udd_get_configured_address();
   85a7c:	4b02      	ldr	r3, [pc, #8]	; (85a88 <udd_getaddress+0xc>)
   85a7e:	6818      	ldr	r0, [r3, #0]
}
   85a80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85a84:	4770      	bx	lr
   85a86:	bf00      	nop
   85a88:	400a4000 	.word	0x400a4000

00085a8c <udd_get_frame_number>:
	return udd_frame_number();
   85a8c:	4b02      	ldr	r3, [pc, #8]	; (85a98 <udd_get_frame_number+0xc>)
   85a8e:	6858      	ldr	r0, [r3, #4]
}
   85a90:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   85a94:	4770      	bx	lr
   85a96:	bf00      	nop
   85a98:	400a4000 	.word	0x400a4000

00085a9c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   85a9c:	4b02      	ldr	r3, [pc, #8]	; (85aa8 <udd_get_micro_frame_number+0xc>)
   85a9e:	6858      	ldr	r0, [r3, #4]
}
   85aa0:	f000 0007 	and.w	r0, r0, #7
   85aa4:	4770      	bx	lr
   85aa6:	bf00      	nop
   85aa8:	400a4000 	.word	0x400a4000

00085aac <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   85aac:	4b01      	ldr	r3, [pc, #4]	; (85ab4 <udd_set_setup_payload+0x8>)
   85aae:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85ab0:	8199      	strh	r1, [r3, #12]
   85ab2:	4770      	bx	lr
   85ab4:	200027ac 	.word	0x200027ac

00085ab8 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85ab8:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85abc:	2a06      	cmp	r2, #6
   85abe:	d900      	bls.n	85ac2 <udd_ep_free+0xa>
   85ac0:	4770      	bx	lr
{
   85ac2:	b570      	push	{r4, r5, r6, lr}
	udd_disable_endpoint(ep_index);
   85ac4:	0153      	lsls	r3, r2, #5
   85ac6:	f103 2040 	add.w	r0, r3, #1073758208	; 0x40004000
   85aca:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
   85ace:	2101      	movs	r1, #1
   85ad0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
   85ad4:	4603      	mov	r3, r0
	udd_configure_endpoint_bank(ep_index, 0);
   85ad6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   85ada:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
   85ade:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85ae2:	1e56      	subs	r6, r2, #1
   85ae4:	4c07      	ldr	r4, [pc, #28]	; (85b04 <udd_ep_free+0x4c>)
   85ae6:	fa06 f501 	lsl.w	r5, r6, r1
   85aea:	19a8      	adds	r0, r5, r6
   85aec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   85af0:	4b05      	ldr	r3, [pc, #20]	; (85b08 <udd_ep_free+0x50>)
   85af2:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85af4:	4435      	add	r5, r6
   85af6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   85afa:	7d23      	ldrb	r3, [r4, #20]
   85afc:	f36f 0382 	bfc	r3, #2, #1
   85b00:	7523      	strb	r3, [r4, #20]
   85b02:	bd70      	pop	{r4, r5, r6, pc}
   85b04:	20002218 	.word	0x20002218
   85b08:	00085045 	.word	0x00085045

00085b0c <udd_ep_is_halted>:
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85b0c:	f000 000f 	and.w	r0, r0, #15
	return (Is_udd_endpoint_stall_requested(ep_index)
   85b10:	0143      	lsls	r3, r0, #5
   85b12:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85b16:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85b1a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
			|| ptr_job->stall_requested);
   85b1e:	f013 0f20 	tst.w	r3, #32
   85b22:	d109      	bne.n	85b38 <udd_ep_is_halted+0x2c>
   85b24:	3801      	subs	r0, #1
   85b26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   85b2a:	4b04      	ldr	r3, [pc, #16]	; (85b3c <udd_ep_is_halted+0x30>)
   85b2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   85b30:	7d00      	ldrb	r0, [r0, #20]
   85b32:	f3c0 0080 	ubfx	r0, r0, #2, #1
   85b36:	4770      	bx	lr
   85b38:	2001      	movs	r0, #1
}
   85b3a:	4770      	bx	lr
   85b3c:	20002218 	.word	0x20002218

00085b40 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85b40:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85b44:	2b06      	cmp	r3, #6
   85b46:	d852      	bhi.n	85bee <udd_ep_set_halt+0xae>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   85b48:	015a      	lsls	r2, r3, #5
   85b4a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85b4e:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85b52:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85b56:	f012 0f20 	tst.w	r2, #32
   85b5a:	d14a      	bne.n	85bf2 <udd_ep_set_halt+0xb2>
{
   85b5c:	b410      	push	{r4}
	ptr_job = &udd_ep_job[ep_index - 1];
   85b5e:	1e59      	subs	r1, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85b60:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   85b64:	4a26      	ldr	r2, [pc, #152]	; (85c00 <udd_ep_set_halt+0xc0>)
   85b66:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   85b6a:	7d12      	ldrb	r2, [r2, #20]
   85b6c:	f012 0f04 	tst.w	r2, #4
   85b70:	d141      	bne.n	85bf6 <udd_ep_set_halt+0xb6>
	if (ptr_job->busy == true) {
   85b72:	f012 0f01 	tst.w	r2, #1
   85b76:	d141      	bne.n	85bfc <udd_ep_set_halt+0xbc>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85b78:	f010 0f80 	tst.w	r0, #128	; 0x80
   85b7c:	d113      	bne.n	85ba6 <udd_ep_set_halt+0x66>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   85b7e:	015b      	lsls	r3, r3, #5
   85b80:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85b84:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85b88:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   85b8c:	f022 0202 	bic.w	r2, r2, #2
   85b90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_ack_stall(ep_index);
   85b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85b98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_stall_handshake(ep_index);
   85b9c:	2220      	movs	r2, #32
   85b9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return true;
   85ba2:	2001      	movs	r0, #1
   85ba4:	e028      	b.n	85bf8 <udd_ep_set_halt+0xb8>
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85ba6:	015a      	lsls	r2, r3, #5
   85ba8:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85bac:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
   85bb0:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
   85bb4:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
   85bb8:	d0e1      	beq.n	85b7e <udd_ep_set_halt+0x3e>
			ptr_job->stall_requested = true;
   85bba:	4a11      	ldr	r2, [pc, #68]	; (85c00 <udd_ep_set_halt+0xc0>)
   85bbc:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
   85bc0:	f101 0210 	add.w	r2, r1, #16
   85bc4:	7d09      	ldrb	r1, [r1, #20]
   85bc6:	f041 0104 	orr.w	r1, r1, #4
   85bca:	7111      	strb	r1, [r2, #4]
			udd_enable_bank_interrupt(ep_index);
   85bcc:	490d      	ldr	r1, [pc, #52]	; (85c04 <udd_ep_set_halt+0xc4>)
   85bce:	f103 0208 	add.w	r2, r3, #8
   85bd2:	eb01 1242 	add.w	r2, r1, r2, lsl #5
   85bd6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   85bda:	6050      	str	r0, [r2, #4]
			udd_enable_endpoint_interrupt(ep_index);
   85bdc:	6908      	ldr	r0, [r1, #16]
   85bde:	f44f 7280 	mov.w	r2, #256	; 0x100
   85be2:	fa02 f303 	lsl.w	r3, r2, r3
   85be6:	4303      	orrs	r3, r0
   85be8:	610b      	str	r3, [r1, #16]
			return true;
   85bea:	2001      	movs	r0, #1
   85bec:	e004      	b.n	85bf8 <udd_ep_set_halt+0xb8>
		return false;
   85bee:	2000      	movs	r0, #0
   85bf0:	4770      	bx	lr
		return true; // Already STALL
   85bf2:	2001      	movs	r0, #1
   85bf4:	4770      	bx	lr
   85bf6:	2001      	movs	r0, #1
}
   85bf8:	bc10      	pop	{r4}
   85bfa:	4770      	bx	lr
		return false; // Job on going, stall impossible
   85bfc:	2000      	movs	r0, #0
   85bfe:	e7fb      	b.n	85bf8 <udd_ep_set_halt+0xb8>
   85c00:	20002218 	.word	0x20002218
   85c04:	400a4000 	.word	0x400a4000

00085c08 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
   85c08:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
   85c0c:	2806      	cmp	r0, #6
   85c0e:	d864      	bhi.n	85cda <udd_ep_clear_halt+0xd2>
{
   85c10:	b538      	push	{r3, r4, r5, lr}
	ptr_job = &udd_ep_job[ep - 1];
   85c12:	1e42      	subs	r2, r0, #1
	if (ptr_job->stall_requested) {
   85c14:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   85c18:	4b37      	ldr	r3, [pc, #220]	; (85cf8 <udd_ep_clear_halt+0xf0>)
   85c1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   85c1e:	7d1b      	ldrb	r3, [r3, #20]
   85c20:	f013 0f04 	tst.w	r3, #4
   85c24:	d05b      	beq.n	85cde <udd_ep_clear_halt+0xd6>
		ptr_job->stall_requested = false;
   85c26:	460b      	mov	r3, r1
   85c28:	4933      	ldr	r1, [pc, #204]	; (85cf8 <udd_ep_clear_halt+0xf0>)
   85c2a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85c2e:	7d19      	ldrb	r1, [r3, #20]
   85c30:	f36f 0182 	bfc	r1, #2, #1
   85c34:	7519      	strb	r1, [r3, #20]
		udd_disable_bank_interrupt(ep);
   85c36:	4b31      	ldr	r3, [pc, #196]	; (85cfc <udd_ep_clear_halt+0xf4>)
   85c38:	eb03 1540 	add.w	r5, r3, r0, lsl #5
   85c3c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   85c40:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
		udd_disable_endpoint_interrupt(ep);
   85c44:	6919      	ldr	r1, [r3, #16]
   85c46:	f44f 7480 	mov.w	r4, #256	; 0x100
   85c4a:	4084      	lsls	r4, r0
   85c4c:	ea21 0104 	bic.w	r1, r1, r4
   85c50:	6119      	str	r1, [r3, #16]
	if (Is_udd_endpoint_stall_requested(ep)) {
   85c52:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   85c56:	f013 0f20 	tst.w	r3, #32
   85c5a:	d024      	beq.n	85ca6 <udd_ep_clear_halt+0x9e>
		if (Is_udd_stall(ep)) {
   85c5c:	0143      	lsls	r3, r0, #5
   85c5e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85c62:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85c66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85c6a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85c6e:	d00b      	beq.n	85c88 <udd_ep_clear_halt+0x80>
			udd_ack_stall(ep);
   85c70:	0143      	lsls	r3, r0, #5
   85c72:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85c76:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   85c7e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
			udd_reset_data_toggle(ep);
   85c82:	2140      	movs	r1, #64	; 0x40
   85c84:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
		udd_disable_stall_handshake(ep);
   85c88:	0143      	lsls	r3, r0, #5
   85c8a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85c8e:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85c92:	2120      	movs	r1, #32
   85c94:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   85c98:	4618      	mov	r0, r3
		udd_enable_endpoint_bank_autoswitch(ep);
   85c9a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   85c9e:	f043 0302 	orr.w	r3, r3, #2
   85ca2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (ptr_job->busy == true) {
   85ca6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   85caa:	4913      	ldr	r1, [pc, #76]	; (85cf8 <udd_ep_clear_halt+0xf0>)
   85cac:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   85cb0:	7d1b      	ldrb	r3, [r3, #20]
   85cb2:	f013 0f01 	tst.w	r3, #1
   85cb6:	d101      	bne.n	85cbc <udd_ep_clear_halt+0xb4>
	return true;
   85cb8:	2001      	movs	r0, #1
   85cba:	bd38      	pop	{r3, r4, r5, pc}
			ptr_job->busy = false;
   85cbc:	4608      	mov	r0, r1
   85cbe:	0051      	lsls	r1, r2, #1
   85cc0:	188b      	adds	r3, r1, r2
   85cc2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   85cc6:	7d1c      	ldrb	r4, [r3, #20]
   85cc8:	f36f 0400 	bfc	r4, #0, #1
   85ccc:	751c      	strb	r4, [r3, #20]
			ptr_job->call_nohalt();
   85cce:	440a      	add	r2, r1
   85cd0:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
   85cd4:	4798      	blx	r3
	return true;
   85cd6:	2001      	movs	r0, #1
   85cd8:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   85cda:	2000      	movs	r0, #0
   85cdc:	4770      	bx	lr
	if (Is_udd_endpoint_stall_requested(ep)) {
   85cde:	0143      	lsls	r3, r0, #5
   85ce0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85ce4:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85ce8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85cec:	f013 0f20 	tst.w	r3, #32
   85cf0:	d1b4      	bne.n	85c5c <udd_ep_clear_halt+0x54>
	return true;
   85cf2:	2001      	movs	r0, #1
}
   85cf4:	bd38      	pop	{r3, r4, r5, pc}
   85cf6:	bf00      	nop
   85cf8:	20002218 	.word	0x20002218
   85cfc:	400a4000 	.word	0x400a4000

00085d00 <udd_ep_run>:
	ep &= USB_EP_ADDR_MASK;
   85d00:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   85d04:	2806      	cmp	r0, #6
   85d06:	d861      	bhi.n	85dcc <udd_ep_run+0xcc>
{
   85d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!Is_udd_endpoint_enabled(ep))
   85d0a:	0144      	lsls	r4, r0, #5
   85d0c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85d10:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85d14:	f8d4 410c 	ldr.w	r4, [r4, #268]	; 0x10c
   85d18:	f014 0f01 	tst.w	r4, #1
   85d1c:	d058      	beq.n	85dd0 <udd_ep_run+0xd0>
			|| Is_udd_endpoint_stall_requested(ep)
   85d1e:	0144      	lsls	r4, r0, #5
   85d20:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85d24:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
   85d28:	f8d4 411c 	ldr.w	r4, [r4, #284]	; 0x11c
   85d2c:	f014 0f20 	tst.w	r4, #32
   85d30:	d150      	bne.n	85dd4 <udd_ep_run+0xd4>
	ptr_job = &udd_ep_job[ep - 1];
   85d32:	1e44      	subs	r4, r0, #1
			|| ptr_job->stall_requested) {
   85d34:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   85d38:	4d29      	ldr	r5, [pc, #164]	; (85de0 <udd_ep_run+0xe0>)
   85d3a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   85d3e:	7d2d      	ldrb	r5, [r5, #20]
   85d40:	f015 0f04 	tst.w	r5, #4
   85d44:	d148      	bne.n	85dd8 <udd_ep_run+0xd8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85d46:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i");
   85d4a:	b672      	cpsid	i
   85d4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85d50:	f04f 0e00 	mov.w	lr, #0
   85d54:	4e23      	ldr	r6, [pc, #140]	; (85de4 <udd_ep_run+0xe4>)
   85d56:	f886 e000 	strb.w	lr, [r6]
	if (ptr_job->busy == true) {
   85d5a:	f015 0f01 	tst.w	r5, #1
   85d5e:	d008      	beq.n	85d72 <udd_ep_run+0x72>
	if (cpu_irq_is_enabled_flags(flags))
   85d60:	2f00      	cmp	r7, #0
   85d62:	d13b      	bne.n	85ddc <udd_ep_run+0xdc>
		cpu_irq_enable();
   85d64:	2201      	movs	r2, #1
   85d66:	7032      	strb	r2, [r6, #0]
   85d68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85d6c:	b662      	cpsie	i
		return false; // Job already on going
   85d6e:	4670      	mov	r0, lr
   85d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job->busy = true;
   85d72:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85d76:	4e1a      	ldr	r6, [pc, #104]	; (85de0 <udd_ep_run+0xe0>)
   85d78:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   85d7c:	7d2e      	ldrb	r6, [r5, #20]
   85d7e:	f046 0601 	orr.w	r6, r6, #1
   85d82:	752e      	strb	r6, [r5, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85d84:	b92f      	cbnz	r7, 85d92 <udd_ep_run+0x92>
		cpu_irq_enable();
   85d86:	2601      	movs	r6, #1
   85d88:	4d16      	ldr	r5, [pc, #88]	; (85de4 <udd_ep_run+0xe4>)
   85d8a:	702e      	strb	r6, [r5, #0]
   85d8c:	f3bf 8f5f 	dmb	sy
   85d90:	b662      	cpsie	i
	ptr_job->buf = buf;
   85d92:	4f13      	ldr	r7, [pc, #76]	; (85de0 <udd_ep_run+0xe0>)
   85d94:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   85d98:	00ed      	lsls	r5, r5, #3
   85d9a:	197e      	adds	r6, r7, r5
   85d9c:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   85d9e:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   85da0:	2200      	movs	r2, #0
   85da2:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   85da4:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   85da6:	9a06      	ldr	r2, [sp, #24]
   85da8:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85daa:	b911      	cbnz	r1, 85db2 <udd_ep_run+0xb2>
   85dac:	fab3 f183 	clz	r1, r3
   85db0:	0949      	lsrs	r1, r1, #5
   85db2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   85db6:	4b0a      	ldr	r3, [pc, #40]	; (85de0 <udd_ep_run+0xe0>)
   85db8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   85dbc:	7d23      	ldrb	r3, [r4, #20]
   85dbe:	f361 0341 	bfi	r3, r1, #1, #1
   85dc2:	7523      	strb	r3, [r4, #20]
	udd_ep_trans_done(ep);
   85dc4:	4b08      	ldr	r3, [pc, #32]	; (85de8 <udd_ep_run+0xe8>)
   85dc6:	4798      	blx	r3
	return true;
   85dc8:	2001      	movs	r0, #1
   85dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   85dcc:	2000      	movs	r0, #0
   85dce:	4770      	bx	lr
		return false; // Endpoint is halted
   85dd0:	2000      	movs	r0, #0
   85dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85dd4:	2000      	movs	r0, #0
   85dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85dd8:	2000      	movs	r0, #0
   85dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false; // Job already on going
   85ddc:	2000      	movs	r0, #0
}
   85dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85de0:	20002218 	.word	0x20002218
   85de4:	20000a80 	.word	0x20000a80
   85de8:	0008507d 	.word	0x0008507d

00085dec <udd_ep_alloc>:
{
   85dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85df0:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
   85df2:	f000 060f 	and.w	r6, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   85df6:	2e06      	cmp	r6, #6
   85df8:	f200 812a 	bhi.w	86050 <udd_ep_alloc+0x264>
	if (Is_udd_endpoint_enabled(ep)) {
   85dfc:	0173      	lsls	r3, r6, #5
   85dfe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85e02:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
   85e06:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85e0a:	f013 0301 	ands.w	r3, r3, #1
   85e0e:	f040 8124 	bne.w	8605a <udd_ep_alloc+0x26e>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85e12:	f001 0403 	and.w	r4, r1, #3
   85e16:	2c02      	cmp	r4, #2
   85e18:	d03f      	beq.n	85e9a <udd_ep_alloc+0xae>
   85e1a:	2c03      	cmp	r4, #3
   85e1c:	d04b      	beq.n	85eb6 <udd_ep_alloc+0xca>
   85e1e:	2c01      	cmp	r4, #1
   85e20:	d001      	beq.n	85e26 <udd_ep_alloc+0x3a>
		return false;
   85e22:	2300      	movs	r3, #0
   85e24:	e115      	b.n	86052 <udd_ep_alloc+0x266>
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85e26:	b136      	cbz	r6, 85e36 <udd_ep_alloc+0x4a>
   85e28:	1ef7      	subs	r7, r6, #3
   85e2a:	b2ff      	uxtb	r7, r7
   85e2c:	2f01      	cmp	r7, #1
   85e2e:	bf94      	ite	ls
   85e30:	2700      	movls	r7, #0
   85e32:	2701      	movhi	r7, #1
   85e34:	e000      	b.n	85e38 <udd_ep_alloc+0x4c>
   85e36:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85e38:	f04f 0c02 	mov.w	ip, #2
	if (b_iso_hbw) {
   85e3c:	b3a7      	cbz	r7, 85ea8 <udd_ep_alloc+0xbc>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85e3e:	f402 54c0 	and.w	r4, r2, #6144	; 0x1800
   85e42:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   85e46:	d03a      	beq.n	85ebe <udd_ep_alloc+0xd2>
			nb_tran = 1;
   85e48:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85e4c:	bf0c      	ite	eq
   85e4e:	f04f 0e03 	moveq.w	lr, #3
   85e52:	f04f 0e01 	movne.w	lr, #1
		MaxEndpointSize &= ~(0x3u << 11);
   85e56:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
   85e5a:	b292      	uxth	r2, r2
   85e5c:	0174      	lsls	r4, r6, #5
   85e5e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
   85e62:	f504 2420 	add.w	r4, r4, #655360	; 0xa0000
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85e66:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   85e6a:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
   85e6e:	f025 0503 	bic.w	r5, r5, #3
   85e72:	0109      	lsls	r1, r1, #4
   85e74:	f001 0130 	and.w	r1, r1, #48	; 0x30
   85e78:	b240      	sxtb	r0, r0
   85e7a:	2800      	cmp	r0, #0
   85e7c:	bfac      	ite	ge
   85e7e:	4618      	movge	r0, r3
   85e80:	2008      	movlt	r0, #8
   85e82:	f5a2 6880 	sub.w	r8, r2, #1024	; 0x400
   85e86:	fa1f f888 	uxth.w	r8, r8
   85e8a:	f5b8 4f7c 	cmp.w	r8, #64512	; 0xfc00
   85e8e:	d319      	bcc.n	85ec4 <udd_ep_alloc+0xd8>
   85e90:	2a08      	cmp	r2, #8
   85e92:	d932      	bls.n	85efa <udd_ep_alloc+0x10e>
   85e94:	0052      	lsls	r2, r2, #1
   85e96:	3a01      	subs	r2, #1
   85e98:	e016      	b.n	85ec8 <udd_ep_alloc+0xdc>
	bool b_iso_hbw = false;
   85e9a:	2700      	movs	r7, #0
   85e9c:	2e03      	cmp	r6, #3
   85e9e:	bf34      	ite	cc
   85ea0:	f04f 0c02 	movcc.w	ip, #2
   85ea4:	f04f 0c01 	movcs.w	ip, #1
	} else if (MaxEndpointSize & (0x3u << 11)) {
   85ea8:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
   85eac:	f040 80d7 	bne.w	8605e <udd_ep_alloc+0x272>
	uint8_t nb_bank, bank, nb_tran = 0, i;
   85eb0:	f04f 0e00 	mov.w	lr, #0
   85eb4:	e7d2      	b.n	85e5c <udd_ep_alloc+0x70>
	bool b_iso_hbw = false;
   85eb6:	2700      	movs	r7, #0
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85eb8:	f04f 0c01 	mov.w	ip, #1
   85ebc:	e7be      	b.n	85e3c <udd_ep_alloc+0x50>
			nb_tran = 2;
   85ebe:	f04f 0e02 	mov.w	lr, #2
   85ec2:	e7c8      	b.n	85e56 <udd_ep_alloc+0x6a>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85ec4:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85ec8:	fab2 f282 	clz	r2, r2
   85ecc:	ea41 1c8c 	orr.w	ip, r1, ip, lsl #6
   85ed0:	ea4c 0c00 	orr.w	ip, ip, r0
   85ed4:	f1c2 021c 	rsb	r2, r2, #28
   85ed8:	ea4c 0202 	orr.w	r2, ip, r2
   85edc:	b10f      	cbz	r7, 85ee2 <udd_ep_alloc+0xf6>
   85ede:	ea4f 230e 	mov.w	r3, lr, lsl #8
   85ee2:	4313      	orrs	r3, r2
   85ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   85ee8:	432b      	orrs	r3, r5
   85eea:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	if (!Is_udd_endpoint_mapped(ep)) {
   85eee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   85ef2:	2b00      	cmp	r3, #0
   85ef4:	db03      	blt.n	85efe <udd_ep_alloc+0x112>
		return false;
   85ef6:	2300      	movs	r3, #0
   85ef8:	e0ab      	b.n	86052 <udd_ep_alloc+0x266>
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85efa:	220f      	movs	r2, #15
   85efc:	e7e4      	b.n	85ec8 <udd_ep_alloc+0xdc>
	udd_enable_endpoint(ep);
   85efe:	2301      	movs	r3, #1
   85f00:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   85f04:	2306      	movs	r3, #6
   85f06:	2700      	movs	r7, #0
		if (Is_udd_endpoint_enabled(i)) {
   85f08:	4857      	ldr	r0, [pc, #348]	; (86068 <udd_ep_alloc+0x27c>)
			udd_disable_endpoint(i);
   85f0a:	2401      	movs	r4, #1
   85f0c:	e003      	b.n	85f16 <udd_ep_alloc+0x12a>
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85f0e:	3b01      	subs	r3, #1
   85f10:	b2db      	uxtb	r3, r3
   85f12:	429e      	cmp	r6, r3
   85f14:	d81e      	bhi.n	85f54 <udd_ep_alloc+0x168>
		if (Is_udd_endpoint_enabled(i)) {
   85f16:	eb00 1243 	add.w	r2, r0, r3, lsl #5
   85f1a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
   85f1e:	f012 0f01 	tst.w	r2, #1
   85f22:	d0f4      	beq.n	85f0e <udd_ep_alloc+0x122>
   85f24:	015a      	lsls	r2, r3, #5
   85f26:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
   85f2a:	f502 2220 	add.w	r2, r2, #655360	; 0xa0000
			bank = udd_get_endpoint_bank(i);
   85f2e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
			ep_allocated |=  bank << (i * 2);
   85f32:	f3c1 1181 	ubfx	r1, r1, #6, #2
   85f36:	005d      	lsls	r5, r3, #1
   85f38:	40a9      	lsls	r1, r5
   85f3a:	430f      	orrs	r7, r1
   85f3c:	b2bf      	uxth	r7, r7
			udd_disable_endpoint(i);
   85f3e:	eb00 1143 	add.w	r1, r0, r3, lsl #5
   85f42:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
			udd_configure_endpoint_bank(i, 0);
   85f46:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85f4a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
   85f4e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
   85f52:	e7dc      	b.n	85f0e <udd_ep_alloc+0x122>
   85f54:	0075      	lsls	r5, r6, #1
   85f56:	4634      	mov	r4, r6
   85f58:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   85f5c:	4b43      	ldr	r3, [pc, #268]	; (8606c <udd_ep_alloc+0x280>)
   85f5e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
		bool b_restart = ptr_job->busy;
   85f62:	4698      	mov	r8, r3
		udd_enable_endpoint(i);
   85f64:	f04f 0901 	mov.w	r9, #1
			b_restart = udd_ep_run(i,
   85f68:	f8df a104 	ldr.w	sl, [pc, #260]	; 86070 <udd_ep_alloc+0x284>
   85f6c:	e021      	b.n	85fb2 <udd_ep_alloc+0x1c6>
			if (NULL == ptr_job->call_trans) {
   85f6e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   85f72:	4a3e      	ldr	r2, [pc, #248]	; (8606c <udd_ep_alloc+0x280>)
   85f74:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   85f78:	2c00      	cmp	r4, #0
   85f7a:	d072      	beq.n	86062 <udd_ep_alloc+0x276>
			if (Is_udd_endpoint_in(i)) {
   85f7c:	f10e 0308 	add.w	r3, lr, #8
   85f80:	015b      	lsls	r3, r3, #5
   85f82:	4a39      	ldr	r2, [pc, #228]	; (86068 <udd_ep_alloc+0x27c>)
   85f84:	58d3      	ldr	r3, [r2, r3]
   85f86:	f013 0f08 	tst.w	r3, #8
				i |= USB_EP_DIR_IN;
   85f8a:	bf18      	it	ne
   85f8c:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85f90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   85f94:	4b35      	ldr	r3, [pc, #212]	; (8606c <udd_ep_alloc+0x280>)
   85f96:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   85f9a:	4602      	mov	r2, r0
   85f9c:	68c9      	ldr	r1, [r1, #12]
   85f9e:	2001      	movs	r0, #1
   85fa0:	47a0      	blx	r4
			return false;
   85fa2:	2300      	movs	r3, #0
   85fa4:	e055      	b.n	86052 <udd_ep_alloc+0x266>
   85fa6:	3502      	adds	r5, #2
   85fa8:	3401      	adds	r4, #1
   85faa:	3618      	adds	r6, #24
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85fac:	b2e3      	uxtb	r3, r4
   85fae:	2b06      	cmp	r3, #6
   85fb0:	d84c      	bhi.n	8604c <udd_ep_alloc+0x260>
   85fb2:	b2e0      	uxtb	r0, r4
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   85fb4:	46a6      	mov	lr, r4
		bank = (ep_allocated >> (i * 2)) & 0x03;
   85fb6:	fa47 f205 	asr.w	r2, r7, r5
		if (bank == 0) {
   85fba:	f012 0203 	ands.w	r2, r2, #3
   85fbe:	d0f2      	beq.n	85fa6 <udd_ep_alloc+0x1ba>
   85fc0:	1e61      	subs	r1, r4, #1
		bool b_restart = ptr_job->busy;
   85fc2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   85fc6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   85fca:	f893 b014 	ldrb.w	fp, [r3, #20]
   85fce:	f00b 0c01 	and.w	ip, fp, #1
		ptr_job->busy = false;
   85fd2:	f36f 0b00 	bfc	fp, #0, #1
   85fd6:	f883 b014 	strb.w	fp, [r3, #20]
   85fda:	0163      	lsls	r3, r4, #5
   85fdc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   85fe0:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
		udd_configure_endpoint_bank(i, bank);
   85fe4:	f8d3 b100 	ldr.w	fp, [r3, #256]	; 0x100
   85fe8:	f02b 0bc0 	bic.w	fp, fp, #192	; 0xc0
   85fec:	ea4b 1282 	orr.w	r2, fp, r2, lsl #6
   85ff0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		udd_enable_endpoint(i);
   85ff4:	f8c3 9104 	str.w	r9, [r3, #260]	; 0x104
		if (!Is_udd_endpoint_mapped(i)) {
   85ff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85ffc:	2a00      	cmp	r2, #0
   85ffe:	dab6      	bge.n	85f6e <udd_ep_alloc+0x182>
		udd_enable_endpoint_bank_autoswitch(i);
   86000:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   86004:	f042 0202 	orr.w	r2, r2, #2
   86008:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		if (b_restart) {
   8600c:	f1bc 0f00 	cmp.w	ip, #0
   86010:	d0c9      	beq.n	85fa6 <udd_ep_alloc+0x1ba>
			ptr_job->buf_cnt -= ptr_job->buf_load;
   86012:	f856 3c0c 	ldr.w	r3, [r6, #-12]
   86016:	f856 2c08 	ldr.w	r2, [r6, #-8]
   8601a:	1a9a      	subs	r2, r3, r2
   8601c:	f846 2c0c 	str.w	r2, [r6, #-12]
			b_restart = udd_ep_run(i,
   86020:	f856 3c10 	ldr.w	r3, [r6, #-16]
					ptr_job->b_shortpacket,
   86024:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   86028:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   8602c:	f891 e014 	ldrb.w	lr, [r1, #20]
			b_restart = udd_ep_run(i,
   86030:	f856 1c18 	ldr.w	r1, [r6, #-24]
   86034:	9100      	str	r1, [sp, #0]
   86036:	1a9b      	subs	r3, r3, r2
   86038:	f856 1c14 	ldr.w	r1, [r6, #-20]
   8603c:	440a      	add	r2, r1
   8603e:	f3ce 0140 	ubfx	r1, lr, #1, #1
   86042:	47d0      	blx	sl
			if (!b_restart) {
   86044:	4603      	mov	r3, r0
   86046:	2800      	cmp	r0, #0
   86048:	d1ad      	bne.n	85fa6 <udd_ep_alloc+0x1ba>
   8604a:	e002      	b.n	86052 <udd_ep_alloc+0x266>
	return true;
   8604c:	2301      	movs	r3, #1
   8604e:	e000      	b.n	86052 <udd_ep_alloc+0x266>
		return false;
   86050:	2300      	movs	r3, #0
}
   86052:	4618      	mov	r0, r3
   86054:	b003      	add	sp, #12
   86056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8605a:	2300      	movs	r3, #0
   8605c:	e7f9      	b.n	86052 <udd_ep_alloc+0x266>
		return false;
   8605e:	2300      	movs	r3, #0
   86060:	e7f7      	b.n	86052 <udd_ep_alloc+0x266>
				return false;
   86062:	2300      	movs	r3, #0
   86064:	e7f5      	b.n	86052 <udd_ep_alloc+0x266>
   86066:	bf00      	nop
   86068:	400a4000 	.word	0x400a4000
   8606c:	20002218 	.word	0x20002218
   86070:	00085d01 	.word	0x00085d01

00086074 <udd_ep_abort>:
{
   86074:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   86076:	f000 020f 	and.w	r2, r0, #15
	udd_endpoint_dma_set_control(ep_index, 0);
   8607a:	4b13      	ldr	r3, [pc, #76]	; (860c8 <udd_ep_abort+0x54>)
   8607c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   86080:	2100      	movs	r1, #0
   86082:	6099      	str	r1, [r3, #8]
	if (ep & USB_EP_DIR_IN) {
   86084:	f010 0f80 	tst.w	r0, #128	; 0x80
   86088:	d116      	bne.n	860b8 <udd_ep_abort+0x44>
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8608a:	1e50      	subs	r0, r2, #1
   8608c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   86090:	2101      	movs	r1, #1
   86092:	4b0e      	ldr	r3, [pc, #56]	; (860cc <udd_ep_abort+0x58>)
   86094:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   86098:	4b0d      	ldr	r3, [pc, #52]	; (860d0 <udd_ep_abort+0x5c>)
   8609a:	4798      	blx	r3
   8609c:	bd10      	pop	{r4, pc}
			udd_kill_last_in_bank(ep_index);
   8609e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
			while(Is_udd_kill_last(ep_index));
   860a2:	f8d1 311c 	ldr.w	r3, [r1, #284]	; 0x11c
   860a6:	f413 7f00 	tst.w	r3, #512	; 0x200
   860aa:	d1fa      	bne.n	860a2 <udd_ep_abort+0x2e>
		for(;udd_nb_busy_bank(ep_index);) {
   860ac:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   860b0:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   860b4:	d1f3      	bne.n	8609e <udd_ep_abort+0x2a>
   860b6:	e7e8      	b.n	8608a <udd_ep_abort+0x16>
   860b8:	4906      	ldr	r1, [pc, #24]	; (860d4 <udd_ep_abort+0x60>)
   860ba:	eb01 1042 	add.w	r0, r1, r2, lsl #5
			udd_kill_last_in_bank(ep_index);
   860be:	f44f 7400 	mov.w	r4, #512	; 0x200
			while(Is_udd_kill_last(ep_index));
   860c2:	4601      	mov	r1, r0
   860c4:	e7f2      	b.n	860ac <udd_ep_abort+0x38>
   860c6:	bf00      	nop
   860c8:	400a4300 	.word	0x400a4300
   860cc:	20002218 	.word	0x20002218
   860d0:	00085045 	.word	0x00085045
   860d4:	400a4000 	.word	0x400a4000

000860d8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   860d8:	4a07      	ldr	r2, [pc, #28]	; (860f8 <udd_test_mode_j+0x20>)
   860da:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   860de:	f023 0303 	bic.w	r3, r3, #3
   860e2:	f043 0302 	orr.w	r3, r3, #2
   860e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   860ea:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   860ee:	f043 0304 	orr.w	r3, r3, #4
   860f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   860f6:	4770      	bx	lr
   860f8:	400a4000 	.word	0x400a4000

000860fc <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   860fc:	4a07      	ldr	r2, [pc, #28]	; (8611c <udd_test_mode_k+0x20>)
   860fe:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86102:	f023 0303 	bic.w	r3, r3, #3
   86106:	f043 0302 	orr.w	r3, r3, #2
   8610a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8610e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86112:	f043 0308 	orr.w	r3, r3, #8
   86116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   8611a:	4770      	bx	lr
   8611c:	400a4000 	.word	0x400a4000

00086120 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86120:	4a04      	ldr	r2, [pc, #16]	; (86134 <udd_test_mode_se0_nak+0x14>)
   86122:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   86126:	f023 0303 	bic.w	r3, r3, #3
   8612a:	f043 0302 	orr.w	r3, r3, #2
   8612e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
   86132:	4770      	bx	lr
   86134:	400a4000 	.word	0x400a4000

00086138 <udd_test_mode_packet>:
{
   86138:	b430      	push	{r4, r5}
   8613a:	b08e      	sub	sp, #56	; 0x38
	const uint8_t test_packet[] = {
   8613c:	466c      	mov	r4, sp
   8613e:	4d20      	ldr	r5, [pc, #128]	; (861c0 <udd_test_mode_packet+0x88>)
   86140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   86146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   86148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8614a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8614c:	e895 0003 	ldmia.w	r5, {r0, r1}
   86150:	f844 0b04 	str.w	r0, [r4], #4
   86154:	7021      	strb	r1, [r4, #0]
	udd_disable_endpoint(0);
   86156:	4b1b      	ldr	r3, [pc, #108]	; (861c4 <udd_test_mode_packet+0x8c>)
   86158:	2101      	movs	r1, #1
   8615a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8615e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   86162:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   86166:	f022 0203 	bic.w	r2, r2, #3
   8616a:	f042 026b 	orr.w	r2, r2, #107	; 0x6b
   8616e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   86172:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	udd_enable_hs_test_mode();
   86176:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8617a:	f022 0203 	bic.w	r2, r2, #3
   8617e:	f042 0202 	orr.w	r2, r2, #2
   86182:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   86186:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   8618a:	f042 0210 	orr.w	r2, r2, #16
   8618e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   86192:	4a0d      	ldr	r2, [pc, #52]	; (861c8 <udd_test_mode_packet+0x90>)
	ptr_src = test_packet;
   86194:	466b      	mov	r3, sp
	for (i = 0; i < sizeof(test_packet); i++) {
   86196:	f10d 0035 	add.w	r0, sp, #53	; 0x35
		*ptr_dest++ = *ptr_src++;
   8619a:	f813 1b01 	ldrb.w	r1, [r3], #1
   8619e:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < sizeof(test_packet); i++) {
   861a2:	4283      	cmp	r3, r0
   861a4:	d1f9      	bne.n	8619a <udd_test_mode_packet+0x62>
	udd_ack_in_send(0);
   861a6:	4b07      	ldr	r3, [pc, #28]	; (861c4 <udd_test_mode_packet+0x8c>)
   861a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   861ac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   861b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   861b4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   861b8:	b00e      	add	sp, #56	; 0x38
   861ba:	bc30      	pop	{r4, r5}
   861bc:	4770      	bx	lr
   861be:	bf00      	nop
   861c0:	0008cd78 	.word	0x0008cd78
   861c4:	400a4000 	.word	0x400a4000
   861c8:	2017ffff 	.word	0x2017ffff

000861cc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   861cc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   861ce:	010b      	lsls	r3, r1, #4
   861d0:	4293      	cmp	r3, r2
   861d2:	d914      	bls.n	861fe <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   861d4:	00c9      	lsls	r1, r1, #3
   861d6:	084b      	lsrs	r3, r1, #1
   861d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   861dc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   861e0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   861e2:	1e5c      	subs	r4, r3, #1
   861e4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   861e8:	428c      	cmp	r4, r1
   861ea:	d901      	bls.n	861f0 <usart_set_async_baudrate+0x24>
		return 1;
   861ec:	2001      	movs	r0, #1
   861ee:	e017      	b.n	86220 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   861f0:	6841      	ldr	r1, [r0, #4]
   861f2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   861f6:	6041      	str	r1, [r0, #4]
   861f8:	e00c      	b.n	86214 <usart_set_async_baudrate+0x48>
		return 1;
   861fa:	2001      	movs	r0, #1
   861fc:	e010      	b.n	86220 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   861fe:	0859      	lsrs	r1, r3, #1
   86200:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   86204:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   86208:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8620a:	1e5c      	subs	r4, r3, #1
   8620c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   86210:	428c      	cmp	r4, r1
   86212:	d8f2      	bhi.n	861fa <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86214:	0412      	lsls	r2, r2, #16
   86216:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   8621a:	431a      	orrs	r2, r3
   8621c:	6202      	str	r2, [r0, #32]

	return 0;
   8621e:	2000      	movs	r0, #0
}
   86220:	bc10      	pop	{r4}
   86222:	4770      	bx	lr

00086224 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86224:	4b0a      	ldr	r3, [pc, #40]	; (86250 <usart_reset+0x2c>)
   86226:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   8622a:	2300      	movs	r3, #0
   8622c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   8622e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86230:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86232:	2388      	movs	r3, #136	; 0x88
   86234:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86236:	2324      	movs	r3, #36	; 0x24
   86238:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8623a:	f44f 7380 	mov.w	r3, #256	; 0x100
   8623e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   86240:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   86244:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
   86246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   8624a:	6003      	str	r3, [r0, #0]
   8624c:	4770      	bx	lr
   8624e:	bf00      	nop
   86250:	55534100 	.word	0x55534100

00086254 <usart_init_rs232>:
{
   86254:	b570      	push	{r4, r5, r6, lr}
   86256:	4605      	mov	r5, r0
   86258:	460c      	mov	r4, r1
   8625a:	4616      	mov	r6, r2
	usart_reset(p_usart);
   8625c:	4b0f      	ldr	r3, [pc, #60]	; (8629c <usart_init_rs232+0x48>)
   8625e:	4798      	blx	r3
	ul_reg_val = 0;
   86260:	2200      	movs	r2, #0
   86262:	4b0f      	ldr	r3, [pc, #60]	; (862a0 <usart_init_rs232+0x4c>)
   86264:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86266:	b1a4      	cbz	r4, 86292 <usart_init_rs232+0x3e>
   86268:	4632      	mov	r2, r6
   8626a:	6821      	ldr	r1, [r4, #0]
   8626c:	4628      	mov	r0, r5
   8626e:	4b0d      	ldr	r3, [pc, #52]	; (862a4 <usart_init_rs232+0x50>)
   86270:	4798      	blx	r3
   86272:	4602      	mov	r2, r0
   86274:	b978      	cbnz	r0, 86296 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86276:	6863      	ldr	r3, [r4, #4]
   86278:	68a1      	ldr	r1, [r4, #8]
   8627a:	430b      	orrs	r3, r1
   8627c:	6921      	ldr	r1, [r4, #16]
   8627e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86280:	68e1      	ldr	r1, [r4, #12]
   86282:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86284:	4906      	ldr	r1, [pc, #24]	; (862a0 <usart_init_rs232+0x4c>)
   86286:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   86288:	6869      	ldr	r1, [r5, #4]
   8628a:	430b      	orrs	r3, r1
   8628c:	606b      	str	r3, [r5, #4]
}
   8628e:	4610      	mov	r0, r2
   86290:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   86292:	2201      	movs	r2, #1
   86294:	e7fb      	b.n	8628e <usart_init_rs232+0x3a>
   86296:	2201      	movs	r2, #1
   86298:	e7f9      	b.n	8628e <usart_init_rs232+0x3a>
   8629a:	bf00      	nop
   8629c:	00086225 	.word	0x00086225
   862a0:	200022a8 	.word	0x200022a8
   862a4:	000861cd 	.word	0x000861cd

000862a8 <usart_init_sync_master>:
{
   862a8:	b570      	push	{r4, r5, r6, lr}
   862aa:	4604      	mov	r4, r0
   862ac:	460e      	mov	r6, r1
   862ae:	4615      	mov	r5, r2
	usart_reset(p_usart);
   862b0:	4b15      	ldr	r3, [pc, #84]	; (86308 <usart_init_sync_master+0x60>)
   862b2:	4798      	blx	r3
	ul_reg_val = 0;
   862b4:	2200      	movs	r2, #0
   862b6:	4b15      	ldr	r3, [pc, #84]	; (8630c <usart_init_sync_master+0x64>)
   862b8:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
   862ba:	b306      	cbz	r6, 862fe <usart_init_sync_master+0x56>
   862bc:	6833      	ldr	r3, [r6, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   862be:	eb05 0253 	add.w	r2, r5, r3, lsr #1
   862c2:	fbb2 f2f3 	udiv	r2, r2, r3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   862c6:	1e51      	subs	r1, r2, #1
   862c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   862cc:	4299      	cmp	r1, r3
   862ce:	d818      	bhi.n	86302 <usart_init_sync_master+0x5a>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   862d0:	6222      	str	r2, [r4, #32]
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   862d2:	6863      	ldr	r3, [r4, #4]
			US_MR_USCLKS_MCK | US_MR_SYNC;
   862d4:	f423 7398 	bic.w	r3, r3, #304	; 0x130
   862d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
   862dc:	6063      	str	r3, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   862de:	6873      	ldr	r3, [r6, #4]
   862e0:	68b2      	ldr	r2, [r6, #8]
   862e2:	4313      	orrs	r3, r2
	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
   862e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   862e8:	6932      	ldr	r2, [r6, #16]
   862ea:	4313      	orrs	r3, r2
   862ec:	68f2      	ldr	r2, [r6, #12]
   862ee:	4313      	orrs	r3, r2
   862f0:	4a06      	ldr	r2, [pc, #24]	; (8630c <usart_init_sync_master+0x64>)
   862f2:	6013      	str	r3, [r2, #0]
	p_usart->US_MR |= ul_reg_val;
   862f4:	6862      	ldr	r2, [r4, #4]
   862f6:	4313      	orrs	r3, r2
   862f8:	6063      	str	r3, [r4, #4]
	return 0;
   862fa:	2000      	movs	r0, #0
   862fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   862fe:	2001      	movs	r0, #1
   86300:	bd70      	pop	{r4, r5, r6, pc}
   86302:	2001      	movs	r0, #1
}
   86304:	bd70      	pop	{r4, r5, r6, pc}
   86306:	bf00      	nop
   86308:	00086225 	.word	0x00086225
   8630c:	200022ac 	.word	0x200022ac

00086310 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   86310:	2340      	movs	r3, #64	; 0x40
   86312:	6003      	str	r3, [r0, #0]
   86314:	4770      	bx	lr

00086316 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   86316:	2380      	movs	r3, #128	; 0x80
   86318:	6003      	str	r3, [r0, #0]
   8631a:	4770      	bx	lr

0008631c <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   8631c:	2310      	movs	r3, #16
   8631e:	6003      	str	r3, [r0, #0]
   86320:	4770      	bx	lr

00086322 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   86322:	2320      	movs	r3, #32
   86324:	6003      	str	r3, [r0, #0]
   86326:	4770      	bx	lr

00086328 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   86328:	6081      	str	r1, [r0, #8]
   8632a:	4770      	bx	lr

0008632c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   8632c:	60c1      	str	r1, [r0, #12]
   8632e:	4770      	bx	lr

00086330 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   86330:	6900      	ldr	r0, [r0, #16]
}
   86332:	4770      	bx	lr

00086334 <usart_get_status>:
	return p_usart->US_CSR;
   86334:	6940      	ldr	r0, [r0, #20]
}
   86336:	4770      	bx	lr

00086338 <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   86338:	6940      	ldr	r0, [r0, #20]
}
   8633a:	f3c0 2040 	ubfx	r0, r0, #9, #1
   8633e:	4770      	bx	lr

00086340 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86340:	6943      	ldr	r3, [r0, #20]
   86342:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   86346:	bf1d      	ittte	ne
   86348:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8634c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8634e:	2000      	movne	r0, #0
		return 1;
   86350:	2001      	moveq	r0, #1
}
   86352:	4770      	bx	lr

00086354 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86354:	6943      	ldr	r3, [r0, #20]
   86356:	f013 0f02 	tst.w	r3, #2
   8635a:	d0fb      	beq.n	86354 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   8635c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   86360:	61c1      	str	r1, [r0, #28]
}
   86362:	2000      	movs	r0, #0
   86364:	4770      	bx	lr

00086366 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   86366:	6943      	ldr	r3, [r0, #20]
   86368:	f013 0f01 	tst.w	r3, #1
   8636c:	d005      	beq.n	8637a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8636e:	6983      	ldr	r3, [r0, #24]
   86370:	f3c3 0308 	ubfx	r3, r3, #0, #9
   86374:	600b      	str	r3, [r1, #0]
	return 0;
   86376:	2000      	movs	r0, #0
   86378:	4770      	bx	lr
		return 1;
   8637a:	2001      	movs	r0, #1
}
   8637c:	4770      	bx	lr

0008637e <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8637e:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   86380:	23ac      	movs	r3, #172	; 0xac
   86382:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   86384:	680b      	ldr	r3, [r1, #0]
   86386:	684a      	ldr	r2, [r1, #4]
   86388:	fbb3 f3f2 	udiv	r3, r3, r2
   8638c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8638e:	1e5c      	subs	r4, r3, #1
   86390:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   86394:	4294      	cmp	r4, r2
   86396:	d80b      	bhi.n	863b0 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   86398:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8639a:	688b      	ldr	r3, [r1, #8]
   8639c:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8639e:	f240 2302 	movw	r3, #514	; 0x202
   863a2:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   863a6:	2350      	movs	r3, #80	; 0x50
   863a8:	6003      	str	r3, [r0, #0]

	return 0;
   863aa:	2000      	movs	r0, #0
}
   863ac:	bc10      	pop	{r4}
   863ae:	4770      	bx	lr
		return 1;
   863b0:	2001      	movs	r0, #1
   863b2:	e7fb      	b.n	863ac <uart_init+0x2e>

000863b4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   863b4:	6943      	ldr	r3, [r0, #20]
   863b6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   863ba:	bf1a      	itte	ne
   863bc:	61c1      	strne	r1, [r0, #28]
	return 0;
   863be:	2000      	movne	r0, #0
		return 1;
   863c0:	2001      	moveq	r0, #1
}
   863c2:	4770      	bx	lr

000863c4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   863c4:	6943      	ldr	r3, [r0, #20]
   863c6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   863ca:	bf1d      	ittte	ne
   863cc:	6983      	ldrne	r3, [r0, #24]
   863ce:	700b      	strbne	r3, [r1, #0]
	return 0;
   863d0:	2000      	movne	r0, #0
		return 1;
   863d2:	2001      	moveq	r0, #1
}
   863d4:	4770      	bx	lr

000863d6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   863d6:	e7fe      	b.n	863d6 <Dummy_Handler>

000863d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   863d8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   863da:	4b1c      	ldr	r3, [pc, #112]	; (8644c <Reset_Handler+0x74>)
   863dc:	4a1c      	ldr	r2, [pc, #112]	; (86450 <Reset_Handler+0x78>)
   863de:	429a      	cmp	r2, r3
   863e0:	d010      	beq.n	86404 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   863e2:	4b1c      	ldr	r3, [pc, #112]	; (86454 <Reset_Handler+0x7c>)
   863e4:	4a19      	ldr	r2, [pc, #100]	; (8644c <Reset_Handler+0x74>)
   863e6:	429a      	cmp	r2, r3
   863e8:	d20c      	bcs.n	86404 <Reset_Handler+0x2c>
   863ea:	3b01      	subs	r3, #1
   863ec:	1a9b      	subs	r3, r3, r2
   863ee:	f023 0303 	bic.w	r3, r3, #3
   863f2:	3304      	adds	r3, #4
   863f4:	4413      	add	r3, r2
   863f6:	4916      	ldr	r1, [pc, #88]	; (86450 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   863f8:	f851 0b04 	ldr.w	r0, [r1], #4
   863fc:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   86400:	429a      	cmp	r2, r3
   86402:	d1f9      	bne.n	863f8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   86404:	4b14      	ldr	r3, [pc, #80]	; (86458 <Reset_Handler+0x80>)
   86406:	4a15      	ldr	r2, [pc, #84]	; (8645c <Reset_Handler+0x84>)
   86408:	429a      	cmp	r2, r3
   8640a:	d20a      	bcs.n	86422 <Reset_Handler+0x4a>
   8640c:	3b01      	subs	r3, #1
   8640e:	1a9b      	subs	r3, r3, r2
   86410:	f023 0303 	bic.w	r3, r3, #3
   86414:	3304      	adds	r3, #4
   86416:	4413      	add	r3, r2
		*pDest++ = 0;
   86418:	2100      	movs	r1, #0
   8641a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8641e:	4293      	cmp	r3, r2
   86420:	d1fb      	bne.n	8641a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   86422:	4b0f      	ldr	r3, [pc, #60]	; (86460 <Reset_Handler+0x88>)
   86424:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   86428:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8642c:	490d      	ldr	r1, [pc, #52]	; (86464 <Reset_Handler+0x8c>)
   8642e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   86430:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   86434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   86438:	d203      	bcs.n	86442 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8643a:	688b      	ldr	r3, [r1, #8]
   8643c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   86440:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   86442:	4b09      	ldr	r3, [pc, #36]	; (86468 <Reset_Handler+0x90>)
   86444:	4798      	blx	r3

	/* Branch to main function */
	main();
   86446:	4b09      	ldr	r3, [pc, #36]	; (8646c <Reset_Handler+0x94>)
   86448:	4798      	blx	r3
   8644a:	e7fe      	b.n	8644a <Reset_Handler+0x72>
   8644c:	20000000 	.word	0x20000000
   86450:	0008d12c 	.word	0x0008d12c
   86454:	20001458 	.word	0x20001458
   86458:	200027ec 	.word	0x200027ec
   8645c:	20001458 	.word	0x20001458
   86460:	00080000 	.word	0x00080000
   86464:	e000ed00 	.word	0xe000ed00
   86468:	00086c11 	.word	0x00086c11
   8646c:	000866e5 	.word	0x000866e5

00086470 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   86470:	4b3d      	ldr	r3, [pc, #244]	; (86568 <SystemCoreClockUpdate+0xf8>)
   86472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86474:	f003 0303 	and.w	r3, r3, #3
   86478:	2b03      	cmp	r3, #3
   8647a:	d80e      	bhi.n	8649a <SystemCoreClockUpdate+0x2a>
   8647c:	e8df f003 	tbb	[pc, r3]
   86480:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86484:	4b39      	ldr	r3, [pc, #228]	; (8656c <SystemCoreClockUpdate+0xfc>)
   86486:	695b      	ldr	r3, [r3, #20]
   86488:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8648c:	bf14      	ite	ne
   8648e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   86492:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   86496:	4b36      	ldr	r3, [pc, #216]	; (86570 <SystemCoreClockUpdate+0x100>)
   86498:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8649a:	4b33      	ldr	r3, [pc, #204]	; (86568 <SystemCoreClockUpdate+0xf8>)
   8649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   864a2:	2b70      	cmp	r3, #112	; 0x70
   864a4:	d057      	beq.n	86556 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   864a6:	4b30      	ldr	r3, [pc, #192]	; (86568 <SystemCoreClockUpdate+0xf8>)
   864a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   864aa:	4931      	ldr	r1, [pc, #196]	; (86570 <SystemCoreClockUpdate+0x100>)
   864ac:	f3c2 1202 	ubfx	r2, r2, #4, #3
   864b0:	680b      	ldr	r3, [r1, #0]
   864b2:	40d3      	lsrs	r3, r2
   864b4:	600b      	str	r3, [r1, #0]
   864b6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   864b8:	4b2b      	ldr	r3, [pc, #172]	; (86568 <SystemCoreClockUpdate+0xf8>)
   864ba:	6a1b      	ldr	r3, [r3, #32]
   864bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   864c0:	d003      	beq.n	864ca <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   864c2:	4a2c      	ldr	r2, [pc, #176]	; (86574 <SystemCoreClockUpdate+0x104>)
   864c4:	4b2a      	ldr	r3, [pc, #168]	; (86570 <SystemCoreClockUpdate+0x100>)
   864c6:	601a      	str	r2, [r3, #0]
   864c8:	e7e7      	b.n	8649a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   864ca:	4a2b      	ldr	r2, [pc, #172]	; (86578 <SystemCoreClockUpdate+0x108>)
   864cc:	4b28      	ldr	r3, [pc, #160]	; (86570 <SystemCoreClockUpdate+0x100>)
   864ce:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   864d0:	4b25      	ldr	r3, [pc, #148]	; (86568 <SystemCoreClockUpdate+0xf8>)
   864d2:	6a1b      	ldr	r3, [r3, #32]
   864d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   864d8:	2b10      	cmp	r3, #16
   864da:	d005      	beq.n	864e8 <SystemCoreClockUpdate+0x78>
   864dc:	2b20      	cmp	r3, #32
   864de:	d1dc      	bne.n	8649a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   864e0:	4a24      	ldr	r2, [pc, #144]	; (86574 <SystemCoreClockUpdate+0x104>)
   864e2:	4b23      	ldr	r3, [pc, #140]	; (86570 <SystemCoreClockUpdate+0x100>)
   864e4:	601a      	str	r2, [r3, #0]
				break;
   864e6:	e7d8      	b.n	8649a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   864e8:	4a24      	ldr	r2, [pc, #144]	; (8657c <SystemCoreClockUpdate+0x10c>)
   864ea:	4b21      	ldr	r3, [pc, #132]	; (86570 <SystemCoreClockUpdate+0x100>)
   864ec:	601a      	str	r2, [r3, #0]
				break;
   864ee:	e7d4      	b.n	8649a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   864f0:	4b1d      	ldr	r3, [pc, #116]	; (86568 <SystemCoreClockUpdate+0xf8>)
   864f2:	6a1b      	ldr	r3, [r3, #32]
   864f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   864f8:	d00c      	beq.n	86514 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   864fa:	4a1e      	ldr	r2, [pc, #120]	; (86574 <SystemCoreClockUpdate+0x104>)
   864fc:	4b1c      	ldr	r3, [pc, #112]	; (86570 <SystemCoreClockUpdate+0x100>)
   864fe:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   86500:	4b19      	ldr	r3, [pc, #100]	; (86568 <SystemCoreClockUpdate+0xf8>)
   86502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86504:	f003 0303 	and.w	r3, r3, #3
   86508:	2b02      	cmp	r3, #2
   8650a:	d016      	beq.n	8653a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8650c:	4a1c      	ldr	r2, [pc, #112]	; (86580 <SystemCoreClockUpdate+0x110>)
   8650e:	4b18      	ldr	r3, [pc, #96]	; (86570 <SystemCoreClockUpdate+0x100>)
   86510:	601a      	str	r2, [r3, #0]
   86512:	e7c2      	b.n	8649a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86514:	4a18      	ldr	r2, [pc, #96]	; (86578 <SystemCoreClockUpdate+0x108>)
   86516:	4b16      	ldr	r3, [pc, #88]	; (86570 <SystemCoreClockUpdate+0x100>)
   86518:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8651a:	4b13      	ldr	r3, [pc, #76]	; (86568 <SystemCoreClockUpdate+0xf8>)
   8651c:	6a1b      	ldr	r3, [r3, #32]
   8651e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86522:	2b10      	cmp	r3, #16
   86524:	d005      	beq.n	86532 <SystemCoreClockUpdate+0xc2>
   86526:	2b20      	cmp	r3, #32
   86528:	d1ea      	bne.n	86500 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8652a:	4a12      	ldr	r2, [pc, #72]	; (86574 <SystemCoreClockUpdate+0x104>)
   8652c:	4b10      	ldr	r3, [pc, #64]	; (86570 <SystemCoreClockUpdate+0x100>)
   8652e:	601a      	str	r2, [r3, #0]
				break;
   86530:	e7e6      	b.n	86500 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   86532:	4a12      	ldr	r2, [pc, #72]	; (8657c <SystemCoreClockUpdate+0x10c>)
   86534:	4b0e      	ldr	r3, [pc, #56]	; (86570 <SystemCoreClockUpdate+0x100>)
   86536:	601a      	str	r2, [r3, #0]
				break;
   86538:	e7e2      	b.n	86500 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8653a:	4a0b      	ldr	r2, [pc, #44]	; (86568 <SystemCoreClockUpdate+0xf8>)
   8653c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8653e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   86540:	480b      	ldr	r0, [pc, #44]	; (86570 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   86542:	f3c1 410a 	ubfx	r1, r1, #16, #11
   86546:	6803      	ldr	r3, [r0, #0]
   86548:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8654c:	b2d2      	uxtb	r2, r2
   8654e:	fbb3 f3f2 	udiv	r3, r3, r2
   86552:	6003      	str	r3, [r0, #0]
   86554:	e7a1      	b.n	8649a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   86556:	4a06      	ldr	r2, [pc, #24]	; (86570 <SystemCoreClockUpdate+0x100>)
   86558:	6813      	ldr	r3, [r2, #0]
   8655a:	490a      	ldr	r1, [pc, #40]	; (86584 <SystemCoreClockUpdate+0x114>)
   8655c:	fba1 1303 	umull	r1, r3, r1, r3
   86560:	085b      	lsrs	r3, r3, #1
   86562:	6013      	str	r3, [r2, #0]
   86564:	4770      	bx	lr
   86566:	bf00      	nop
   86568:	400e0400 	.word	0x400e0400
   8656c:	400e1210 	.word	0x400e1210
   86570:	20000a84 	.word	0x20000a84
   86574:	00b71b00 	.word	0x00b71b00
   86578:	003d0900 	.word	0x003d0900
   8657c:	007a1200 	.word	0x007a1200
   86580:	0e4e1c00 	.word	0x0e4e1c00
   86584:	aaaaaaab 	.word	0xaaaaaaab

00086588 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   86588:	4b0a      	ldr	r3, [pc, #40]	; (865b4 <_sbrk+0x2c>)
   8658a:	681b      	ldr	r3, [r3, #0]
   8658c:	b153      	cbz	r3, 865a4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8658e:	4b09      	ldr	r3, [pc, #36]	; (865b4 <_sbrk+0x2c>)
   86590:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   86592:	181a      	adds	r2, r3, r0
   86594:	4908      	ldr	r1, [pc, #32]	; (865b8 <_sbrk+0x30>)
   86596:	4291      	cmp	r1, r2
   86598:	db08      	blt.n	865ac <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8659a:	4610      	mov	r0, r2
   8659c:	4a05      	ldr	r2, [pc, #20]	; (865b4 <_sbrk+0x2c>)
   8659e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   865a0:	4618      	mov	r0, r3
   865a2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   865a4:	4a05      	ldr	r2, [pc, #20]	; (865bc <_sbrk+0x34>)
   865a6:	4b03      	ldr	r3, [pc, #12]	; (865b4 <_sbrk+0x2c>)
   865a8:	601a      	str	r2, [r3, #0]
   865aa:	e7f0      	b.n	8658e <_sbrk+0x6>
		return (caddr_t) -1;	
   865ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   865b0:	4770      	bx	lr
   865b2:	bf00      	nop
   865b4:	200022b0 	.word	0x200022b0
   865b8:	2007fffc 	.word	0x2007fffc
   865bc:	200801c0 	.word	0x200801c0

000865c0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   865c0:	f04f 30ff 	mov.w	r0, #4294967295
   865c4:	4770      	bx	lr

000865c6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   865c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   865ca:	604b      	str	r3, [r1, #4]

	return 0;
}
   865cc:	2000      	movs	r0, #0
   865ce:	4770      	bx	lr

000865d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   865d0:	2001      	movs	r0, #1
   865d2:	4770      	bx	lr

000865d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   865d4:	2000      	movs	r0, #0
   865d6:	4770      	bx	lr

000865d8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   865d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   865da:	b083      	sub	sp, #12
   865dc:	4604      	mov	r4, r0
   865de:	460d      	mov	r5, r1
	uint32_t val = 0;
   865e0:	2300      	movs	r3, #0
   865e2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   865e4:	4b19      	ldr	r3, [pc, #100]	; (8664c <usart_serial_getchar+0x74>)
   865e6:	4298      	cmp	r0, r3
   865e8:	d00a      	beq.n	86600 <usart_serial_getchar+0x28>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   865ea:	4b19      	ldr	r3, [pc, #100]	; (86650 <usart_serial_getchar+0x78>)
   865ec:	4298      	cmp	r0, r3
   865ee:	d00f      	beq.n	86610 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   865f0:	4b18      	ldr	r3, [pc, #96]	; (86654 <usart_serial_getchar+0x7c>)
   865f2:	4298      	cmp	r0, r3
   865f4:	d016      	beq.n	86624 <usart_serial_getchar+0x4c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   865f6:	4b18      	ldr	r3, [pc, #96]	; (86658 <usart_serial_getchar+0x80>)
   865f8:	429c      	cmp	r4, r3
   865fa:	d01d      	beq.n	86638 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   865fc:	b003      	add	sp, #12
   865fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   86600:	461f      	mov	r7, r3
   86602:	4e16      	ldr	r6, [pc, #88]	; (8665c <usart_serial_getchar+0x84>)
   86604:	4629      	mov	r1, r5
   86606:	4638      	mov	r0, r7
   86608:	47b0      	blx	r6
   8660a:	2800      	cmp	r0, #0
   8660c:	d1fa      	bne.n	86604 <usart_serial_getchar+0x2c>
   8660e:	e7f2      	b.n	865f6 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   86610:	461e      	mov	r6, r3
   86612:	4c13      	ldr	r4, [pc, #76]	; (86660 <usart_serial_getchar+0x88>)
   86614:	a901      	add	r1, sp, #4
   86616:	4630      	mov	r0, r6
   86618:	47a0      	blx	r4
   8661a:	2800      	cmp	r0, #0
   8661c:	d1fa      	bne.n	86614 <usart_serial_getchar+0x3c>
		*data = (uint8_t)(val & 0xFF);
   8661e:	9b01      	ldr	r3, [sp, #4]
   86620:	702b      	strb	r3, [r5, #0]
   86622:	e7eb      	b.n	865fc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   86624:	461e      	mov	r6, r3
   86626:	4c0e      	ldr	r4, [pc, #56]	; (86660 <usart_serial_getchar+0x88>)
   86628:	a901      	add	r1, sp, #4
   8662a:	4630      	mov	r0, r6
   8662c:	47a0      	blx	r4
   8662e:	2800      	cmp	r0, #0
   86630:	d1fa      	bne.n	86628 <usart_serial_getchar+0x50>
		*data = (uint8_t)(val & 0xFF);
   86632:	9b01      	ldr	r3, [sp, #4]
   86634:	702b      	strb	r3, [r5, #0]
   86636:	e7e1      	b.n	865fc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   86638:	461e      	mov	r6, r3
   8663a:	4c09      	ldr	r4, [pc, #36]	; (86660 <usart_serial_getchar+0x88>)
   8663c:	a901      	add	r1, sp, #4
   8663e:	4630      	mov	r0, r6
   86640:	47a0      	blx	r4
   86642:	2800      	cmp	r0, #0
   86644:	d1fa      	bne.n	8663c <usart_serial_getchar+0x64>
		*data = (uint8_t)(val & 0xFF);
   86646:	9b01      	ldr	r3, [sp, #4]
   86648:	702b      	strb	r3, [r5, #0]
}
   8664a:	e7d7      	b.n	865fc <usart_serial_getchar+0x24>
   8664c:	400e0600 	.word	0x400e0600
   86650:	40090000 	.word	0x40090000
   86654:	40094000 	.word	0x40094000
   86658:	40098000 	.word	0x40098000
   8665c:	000863c5 	.word	0x000863c5
   86660:	00086367 	.word	0x00086367

00086664 <usart_serial_putchar>:
{
   86664:	b570      	push	{r4, r5, r6, lr}
   86666:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   86668:	4b18      	ldr	r3, [pc, #96]	; (866cc <usart_serial_putchar+0x68>)
   8666a:	4298      	cmp	r0, r3
   8666c:	d00a      	beq.n	86684 <usart_serial_putchar+0x20>
	if (USART0 == p_usart) {
   8666e:	4b18      	ldr	r3, [pc, #96]	; (866d0 <usart_serial_putchar+0x6c>)
   86670:	4298      	cmp	r0, r3
   86672:	d010      	beq.n	86696 <usart_serial_putchar+0x32>
	if (USART1 == p_usart) {
   86674:	4b17      	ldr	r3, [pc, #92]	; (866d4 <usart_serial_putchar+0x70>)
   86676:	4298      	cmp	r0, r3
   86678:	d016      	beq.n	866a8 <usart_serial_putchar+0x44>
	if (USART2 == p_usart) {
   8667a:	4b17      	ldr	r3, [pc, #92]	; (866d8 <usart_serial_putchar+0x74>)
   8667c:	4298      	cmp	r0, r3
   8667e:	d01c      	beq.n	866ba <usart_serial_putchar+0x56>
	return 0;
   86680:	2000      	movs	r0, #0
}
   86682:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   86684:	461e      	mov	r6, r3
   86686:	4d15      	ldr	r5, [pc, #84]	; (866dc <usart_serial_putchar+0x78>)
   86688:	4621      	mov	r1, r4
   8668a:	4630      	mov	r0, r6
   8668c:	47a8      	blx	r5
   8668e:	2800      	cmp	r0, #0
   86690:	d1fa      	bne.n	86688 <usart_serial_putchar+0x24>
		return 1;
   86692:	2001      	movs	r0, #1
   86694:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   86696:	461e      	mov	r6, r3
   86698:	4d11      	ldr	r5, [pc, #68]	; (866e0 <usart_serial_putchar+0x7c>)
   8669a:	4621      	mov	r1, r4
   8669c:	4630      	mov	r0, r6
   8669e:	47a8      	blx	r5
   866a0:	2800      	cmp	r0, #0
   866a2:	d1fa      	bne.n	8669a <usart_serial_putchar+0x36>
		return 1;
   866a4:	2001      	movs	r0, #1
   866a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   866a8:	461e      	mov	r6, r3
   866aa:	4d0d      	ldr	r5, [pc, #52]	; (866e0 <usart_serial_putchar+0x7c>)
   866ac:	4621      	mov	r1, r4
   866ae:	4630      	mov	r0, r6
   866b0:	47a8      	blx	r5
   866b2:	2800      	cmp	r0, #0
   866b4:	d1fa      	bne.n	866ac <usart_serial_putchar+0x48>
		return 1;
   866b6:	2001      	movs	r0, #1
   866b8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   866ba:	461e      	mov	r6, r3
   866bc:	4d08      	ldr	r5, [pc, #32]	; (866e0 <usart_serial_putchar+0x7c>)
   866be:	4621      	mov	r1, r4
   866c0:	4630      	mov	r0, r6
   866c2:	47a8      	blx	r5
   866c4:	2800      	cmp	r0, #0
   866c6:	d1fa      	bne.n	866be <usart_serial_putchar+0x5a>
		return 1;
   866c8:	2001      	movs	r0, #1
   866ca:	bd70      	pop	{r4, r5, r6, pc}
   866cc:	400e0600 	.word	0x400e0600
   866d0:	40090000 	.word	0x40090000
   866d4:	40094000 	.word	0x40094000
   866d8:	40098000 	.word	0x40098000
   866dc:	000863b5 	.word	0x000863b5
   866e0:	00086341 	.word	0x00086341

000866e4 <main>:
static void configure_console(void);

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   866e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   866e8:	b088      	sub	sp, #32
	uint32_t serial_number[4];
	
	// Read Device-ID from SAM3U. Do this before enabling interrupts etc.
	flash_read_unique_id(serial_number, sizeof(serial_number));
   866ea:	2110      	movs	r1, #16
   866ec:	eb0d 0001 	add.w	r0, sp, r1
   866f0:	4b54      	ldr	r3, [pc, #336]	; (86844 <main+0x160>)
   866f2:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   866f4:	2008      	movs	r0, #8
   866f6:	4d54      	ldr	r5, [pc, #336]	; (86848 <main+0x164>)
   866f8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   866fa:	4c54      	ldr	r4, [pc, #336]	; (8684c <main+0x168>)
   866fc:	4b54      	ldr	r3, [pc, #336]	; (86850 <main+0x16c>)
   866fe:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   86700:	4a54      	ldr	r2, [pc, #336]	; (86854 <main+0x170>)
   86702:	4b55      	ldr	r3, [pc, #340]	; (86858 <main+0x174>)
   86704:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   86706:	4a55      	ldr	r2, [pc, #340]	; (8685c <main+0x178>)
   86708:	4b55      	ldr	r3, [pc, #340]	; (86860 <main+0x17c>)
   8670a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8670c:	4b55      	ldr	r3, [pc, #340]	; (86864 <main+0x180>)
   8670e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   86710:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   86714:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   86716:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8671a:	9303      	str	r3, [sp, #12]
   8671c:	2008      	movs	r0, #8
   8671e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   86720:	a901      	add	r1, sp, #4
   86722:	4620      	mov	r0, r4
   86724:	4b50      	ldr	r3, [pc, #320]	; (86868 <main+0x184>)
   86726:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   86728:	4d50      	ldr	r5, [pc, #320]	; (8686c <main+0x188>)
   8672a:	682b      	ldr	r3, [r5, #0]
   8672c:	2100      	movs	r1, #0
   8672e:	6898      	ldr	r0, [r3, #8]
   86730:	4c4f      	ldr	r4, [pc, #316]	; (86870 <main+0x18c>)
   86732:	47a0      	blx	r4
	setbuf(stdin, NULL);
   86734:	682b      	ldr	r3, [r5, #0]
   86736:	2100      	movs	r1, #0
   86738:	6858      	ldr	r0, [r3, #4]
   8673a:	47a0      	blx	r4
		
	configure_console();

	irq_initialize_vectors();
	cpu_irq_enable();
   8673c:	2101      	movs	r1, #1
   8673e:	4b4d      	ldr	r3, [pc, #308]	; (86874 <main+0x190>)
   86740:	7019      	strb	r1, [r3, #0]
   86742:	f3bf 8f5f 	dmb	sy
   86746:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
   86748:	4b4b      	ldr	r3, [pc, #300]	; (86878 <main+0x194>)
   8674a:	2200      	movs	r2, #0
   8674c:	701a      	strb	r2, [r3, #0]
   8674e:	705a      	strb	r2, [r3, #1]
   86750:	709a      	strb	r2, [r3, #2]
   86752:	70da      	strb	r2, [r3, #3]
   86754:	711a      	strb	r2, [r3, #4]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   86756:	7159      	strb	r1, [r3, #5]

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAMD21 && !SAMR21
	sysclk_init();
   86758:	4b48      	ldr	r3, [pc, #288]	; (8687c <main+0x198>)
   8675a:	4798      	blx	r3
	board_init();
   8675c:	4b48      	ldr	r3, [pc, #288]	; (86880 <main+0x19c>)
   8675e:	4798      	blx	r3
#else
	system_init();
#endif

	//Tri-state XPROG pins
	XPROGTarget_DisableTargetPDI();
   86760:	4b48      	ldr	r3, [pc, #288]	; (86884 <main+0x1a0>)
   86762:	4798      	blx	r3
   86764:	ad04      	add	r5, sp, #16
   86766:	4c48      	ldr	r4, [pc, #288]	; (86888 <main+0x1a4>)
   86768:	f104 0820 	add.w	r8, r4, #32

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8676c:	4f47      	ldr	r7, [pc, #284]	; (8688c <main+0x1a8>)
   8676e:	4e48      	ldr	r6, [pc, #288]	; (86890 <main+0x1ac>)
   86770:	f855 2b04 	ldr.w	r2, [r5], #4
   86774:	4639      	mov	r1, r7
   86776:	4620      	mov	r0, r4
   86778:	47b0      	blx	r6
   8677a:	3408      	adds	r4, #8
	for(unsigned int i = 0; i < 4; i++){
   8677c:	45a0      	cmp	r8, r4
   8677e:	d1f7      	bne.n	86770 <main+0x8c>
	}
	usb_serial_number[32] = 0;
   86780:	4c41      	ldr	r4, [pc, #260]	; (86888 <main+0x1a4>)
   86782:	2600      	movs	r6, #0
   86784:	f884 6020 	strb.w	r6, [r4, #32]
	
	printf("ChipWhisperer-Lite Online. Firmware build: %s/%s\n", __TIME__, __DATE__);
   86788:	4a42      	ldr	r2, [pc, #264]	; (86894 <main+0x1b0>)
   8678a:	4943      	ldr	r1, [pc, #268]	; (86898 <main+0x1b4>)
   8678c:	4843      	ldr	r0, [pc, #268]	; (8689c <main+0x1b8>)
   8678e:	4f44      	ldr	r7, [pc, #272]	; (868a0 <main+0x1bc>)
   86790:	47b8      	blx	r7
	printf("Serial number: %s\n", usb_serial_number);
   86792:	4621      	mov	r1, r4
   86794:	4843      	ldr	r0, [pc, #268]	; (868a4 <main+0x1c0>)
   86796:	47b8      	blx	r7
	

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   86798:	2009      	movs	r0, #9
   8679a:	4b2b      	ldr	r3, [pc, #172]	; (86848 <main+0x164>)
   8679c:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8679e:	4d42      	ldr	r5, [pc, #264]	; (868a8 <main+0x1c4>)
   867a0:	4629      	mov	r1, r5
   867a2:	2029      	movs	r0, #41	; 0x29
   867a4:	4c41      	ldr	r4, [pc, #260]	; (868ac <main+0x1c8>)
   867a6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   867a8:	4629      	mov	r1, r5
   867aa:	202a      	movs	r0, #42	; 0x2a
   867ac:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   867ae:	4629      	mov	r1, r5
   867b0:	202b      	movs	r0, #43	; 0x2b
   867b2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   867b4:	4629      	mov	r1, r5
   867b6:	202c      	movs	r0, #44	; 0x2c
   867b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   867ba:	4629      	mov	r1, r5
   867bc:	202d      	movs	r0, #45	; 0x2d
   867be:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   867c0:	4629      	mov	r1, r5
   867c2:	202e      	movs	r0, #46	; 0x2e
   867c4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   867c6:	4629      	mov	r1, r5
   867c8:	202f      	movs	r0, #47	; 0x2f
   867ca:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);	
   867cc:	4629      	mov	r1, r5
   867ce:	2030      	movs	r0, #48	; 0x30
   867d0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   867d2:	4629      	mov	r1, r5
   867d4:	2033      	movs	r0, #51	; 0x33
   867d6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   867d8:	4629      	mov	r1, r5
   867da:	2037      	movs	r0, #55	; 0x37
   867dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   867de:	4629      	mov	r1, r5
   867e0:	2034      	movs	r0, #52	; 0x34
   867e2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
	*/	
	
	/* Configure EBI I/O for PSRAM connection */
	printf("Setting up FPGA Communication\n");
   867e4:	4832      	ldr	r0, [pc, #200]	; (868b0 <main+0x1cc>)
   867e6:	47b8      	blx	r7
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   867e8:	4c32      	ldr	r4, [pc, #200]	; (868b4 <main+0x1d0>)
   867ea:	4a33      	ldr	r2, [pc, #204]	; (868b8 <main+0x1d4>)
   867ec:	4631      	mov	r1, r6
   867ee:	4620      	mov	r0, r4
   867f0:	4b32      	ldr	r3, [pc, #200]	; (868bc <main+0x1d8>)
   867f2:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(1)
	| SMC_SETUP_NRD_SETUP(1)
	| SMC_SETUP_NCS_RD_SETUP(1));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   867f4:	4a32      	ldr	r2, [pc, #200]	; (868c0 <main+0x1dc>)
   867f6:	4631      	mov	r1, r6
   867f8:	4620      	mov	r0, r4
   867fa:	4b32      	ldr	r3, [pc, #200]	; (868c4 <main+0x1e0>)
   867fc:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(1)
	| SMC_PULSE_NRD_PULSE(3)
	| SMC_PULSE_NCS_RD_PULSE(1));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   867fe:	4a32      	ldr	r2, [pc, #200]	; (868c8 <main+0x1e4>)
   86800:	4631      	mov	r1, r6
   86802:	4620      	mov	r0, r4
   86804:	4b31      	ldr	r3, [pc, #196]	; (868cc <main+0x1e8>)
   86806:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(4));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   86808:	2203      	movs	r2, #3
   8680a:	4631      	mov	r1, r6
   8680c:	4620      	mov	r0, r4
   8680e:	4b30      	ldr	r3, [pc, #192]	; (868d0 <main+0x1ec>)
   86810:	4798      	blx	r3
	| SMC_MODE_DBW_BIT_8);
	
	ui_init();
   86812:	4b30      	ldr	r3, [pc, #192]	; (868d4 <main+0x1f0>)
   86814:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
   86816:	4b30      	ldr	r3, [pc, #192]	; (868d8 <main+0x1f4>)
   86818:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8681a:	2204      	movs	r2, #4
   8681c:	4b2f      	ldr	r3, [pc, #188]	; (868dc <main+0x1f8>)
   8681e:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   86820:	4630      	mov	r0, r6
   86822:	4b2f      	ldr	r3, [pc, #188]	; (868e0 <main+0x1fc>)
   86824:	4798      	blx	r3
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	printf("Event Loop Entered, waiting...\n");
   86826:	482f      	ldr	r0, [pc, #188]	; (868e4 <main+0x200>)
   86828:	47b8      	blx	r7
	naeusb_register_handlers();
   8682a:	4b2f      	ldr	r3, [pc, #188]	; (868e8 <main+0x204>)
   8682c:	4798      	blx	r3
	naeusart_register_handlers();
   8682e:	4b2f      	ldr	r3, [pc, #188]	; (868ec <main+0x208>)
   86830:	4798      	blx	r3
	openadc_register_handlers();
   86832:	4b2f      	ldr	r3, [pc, #188]	; (868f0 <main+0x20c>)
   86834:	4798      	blx	r3
	mpsse_register_handlers();
   86836:	4b2f      	ldr	r3, [pc, #188]	; (868f4 <main+0x210>)
   86838:	4798      	blx	r3
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {
        // if we've received stuff on USART, send it back to the PC
		cdc_send_to_pc();
   8683a:	4d2f      	ldr	r5, [pc, #188]	; (868f8 <main+0x214>)
		MPSSE_main_sendrecv_byte();
   8683c:	4c2f      	ldr	r4, [pc, #188]	; (868fc <main+0x218>)
		cdc_send_to_pc();
   8683e:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
   86840:	47a0      	blx	r4
   86842:	e7fc      	b.n	8683e <main+0x15a>
   86844:	00084349 	.word	0x00084349
   86848:	00084c11 	.word	0x00084c11
   8684c:	400e0600 	.word	0x400e0600
   86850:	200027a8 	.word	0x200027a8
   86854:	00086665 	.word	0x00086665
   86858:	200027a4 	.word	0x200027a4
   8685c:	000865d9 	.word	0x000865d9
   86860:	200027a0 	.word	0x200027a0
   86864:	05b8d800 	.word	0x05b8d800
   86868:	0008637f 	.word	0x0008637f
   8686c:	20000aac 	.word	0x20000aac
   86870:	00086e11 	.word	0x00086e11
   86874:	20000a80 	.word	0x20000a80
   86878:	20002798 	.word	0x20002798
   8687c:	00084461 	.word	0x00084461
   86880:	00084711 	.word	0x00084711
   86884:	0008400d 	.word	0x0008400d
   86888:	20000a88 	.word	0x20000a88
   8688c:	0008cdb0 	.word	0x0008cdb0
   86890:	00086fb1 	.word	0x00086fb1
   86894:	0008cdb8 	.word	0x0008cdb8
   86898:	0008cdc4 	.word	0x0008cdc4
   8689c:	0008cdd0 	.word	0x0008cdd0
   868a0:	00086c61 	.word	0x00086c61
   868a4:	0008ce04 	.word	0x0008ce04
   868a8:	08000001 	.word	0x08000001
   868ac:	000848cd 	.word	0x000848cd
   868b0:	0008ce18 	.word	0x0008ce18
   868b4:	400e0000 	.word	0x400e0000
   868b8:	01010100 	.word	0x01010100
   868bc:	00084781 	.word	0x00084781
   868c0:	01030101 	.word	0x01030101
   868c4:	0008478d 	.word	0x0008478d
   868c8:	00040002 	.word	0x00040002
   868cc:	00084799 	.word	0x00084799
   868d0:	000847a5 	.word	0x000847a5
   868d4:	00084399 	.word	0x00084399
   868d8:	00082e19 	.word	0x00082e19
   868dc:	400e0400 	.word	0x400e0400
   868e0:	00084c79 	.word	0x00084c79
   868e4:	0008ce38 	.word	0x0008ce38
   868e8:	000815e5 	.word	0x000815e5
   868ec:	000829ad 	.word	0x000829ad
   868f0:	000824fd 	.word	0x000824fd
   868f4:	00082061 	.word	0x00082061
   868f8:	00082c0d 	.word	0x00082c0d
   868fc:	00082081 	.word	0x00082081

00086900 <__aeabi_uldivmod>:
   86900:	b953      	cbnz	r3, 86918 <__aeabi_uldivmod+0x18>
   86902:	b94a      	cbnz	r2, 86918 <__aeabi_uldivmod+0x18>
   86904:	2900      	cmp	r1, #0
   86906:	bf08      	it	eq
   86908:	2800      	cmpeq	r0, #0
   8690a:	bf1c      	itt	ne
   8690c:	f04f 31ff 	movne.w	r1, #4294967295
   86910:	f04f 30ff 	movne.w	r0, #4294967295
   86914:	f000 b97a 	b.w	86c0c <__aeabi_idiv0>
   86918:	f1ad 0c08 	sub.w	ip, sp, #8
   8691c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86920:	f000 f806 	bl	86930 <__udivmoddi4>
   86924:	f8dd e004 	ldr.w	lr, [sp, #4]
   86928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8692c:	b004      	add	sp, #16
   8692e:	4770      	bx	lr

00086930 <__udivmoddi4>:
   86930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86934:	468c      	mov	ip, r1
   86936:	460e      	mov	r6, r1
   86938:	4604      	mov	r4, r0
   8693a:	9d08      	ldr	r5, [sp, #32]
   8693c:	2b00      	cmp	r3, #0
   8693e:	d150      	bne.n	869e2 <__udivmoddi4+0xb2>
   86940:	428a      	cmp	r2, r1
   86942:	4617      	mov	r7, r2
   86944:	d96c      	bls.n	86a20 <__udivmoddi4+0xf0>
   86946:	fab2 fe82 	clz	lr, r2
   8694a:	f1be 0f00 	cmp.w	lr, #0
   8694e:	d00b      	beq.n	86968 <__udivmoddi4+0x38>
   86950:	f1ce 0c20 	rsb	ip, lr, #32
   86954:	fa01 f60e 	lsl.w	r6, r1, lr
   86958:	fa20 fc0c 	lsr.w	ip, r0, ip
   8695c:	fa02 f70e 	lsl.w	r7, r2, lr
   86960:	ea4c 0c06 	orr.w	ip, ip, r6
   86964:	fa00 f40e 	lsl.w	r4, r0, lr
   86968:	0c3a      	lsrs	r2, r7, #16
   8696a:	fbbc f9f2 	udiv	r9, ip, r2
   8696e:	b2bb      	uxth	r3, r7
   86970:	fb02 cc19 	mls	ip, r2, r9, ip
   86974:	fb09 fa03 	mul.w	sl, r9, r3
   86978:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8697c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86980:	45b2      	cmp	sl, r6
   86982:	d90a      	bls.n	8699a <__udivmoddi4+0x6a>
   86984:	19f6      	adds	r6, r6, r7
   86986:	f109 31ff 	add.w	r1, r9, #4294967295
   8698a:	f080 8125 	bcs.w	86bd8 <__udivmoddi4+0x2a8>
   8698e:	45b2      	cmp	sl, r6
   86990:	f240 8122 	bls.w	86bd8 <__udivmoddi4+0x2a8>
   86994:	f1a9 0902 	sub.w	r9, r9, #2
   86998:	443e      	add	r6, r7
   8699a:	eba6 060a 	sub.w	r6, r6, sl
   8699e:	fbb6 f0f2 	udiv	r0, r6, r2
   869a2:	fb02 6610 	mls	r6, r2, r0, r6
   869a6:	fb00 f303 	mul.w	r3, r0, r3
   869aa:	b2a4      	uxth	r4, r4
   869ac:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   869b0:	42a3      	cmp	r3, r4
   869b2:	d909      	bls.n	869c8 <__udivmoddi4+0x98>
   869b4:	19e4      	adds	r4, r4, r7
   869b6:	f100 32ff 	add.w	r2, r0, #4294967295
   869ba:	f080 810b 	bcs.w	86bd4 <__udivmoddi4+0x2a4>
   869be:	42a3      	cmp	r3, r4
   869c0:	f240 8108 	bls.w	86bd4 <__udivmoddi4+0x2a4>
   869c4:	3802      	subs	r0, #2
   869c6:	443c      	add	r4, r7
   869c8:	2100      	movs	r1, #0
   869ca:	1ae4      	subs	r4, r4, r3
   869cc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   869d0:	2d00      	cmp	r5, #0
   869d2:	d062      	beq.n	86a9a <__udivmoddi4+0x16a>
   869d4:	2300      	movs	r3, #0
   869d6:	fa24 f40e 	lsr.w	r4, r4, lr
   869da:	602c      	str	r4, [r5, #0]
   869dc:	606b      	str	r3, [r5, #4]
   869de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   869e2:	428b      	cmp	r3, r1
   869e4:	d907      	bls.n	869f6 <__udivmoddi4+0xc6>
   869e6:	2d00      	cmp	r5, #0
   869e8:	d055      	beq.n	86a96 <__udivmoddi4+0x166>
   869ea:	2100      	movs	r1, #0
   869ec:	e885 0041 	stmia.w	r5, {r0, r6}
   869f0:	4608      	mov	r0, r1
   869f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   869f6:	fab3 f183 	clz	r1, r3
   869fa:	2900      	cmp	r1, #0
   869fc:	f040 808f 	bne.w	86b1e <__udivmoddi4+0x1ee>
   86a00:	42b3      	cmp	r3, r6
   86a02:	d302      	bcc.n	86a0a <__udivmoddi4+0xda>
   86a04:	4282      	cmp	r2, r0
   86a06:	f200 80fc 	bhi.w	86c02 <__udivmoddi4+0x2d2>
   86a0a:	1a84      	subs	r4, r0, r2
   86a0c:	eb66 0603 	sbc.w	r6, r6, r3
   86a10:	2001      	movs	r0, #1
   86a12:	46b4      	mov	ip, r6
   86a14:	2d00      	cmp	r5, #0
   86a16:	d040      	beq.n	86a9a <__udivmoddi4+0x16a>
   86a18:	e885 1010 	stmia.w	r5, {r4, ip}
   86a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a20:	b912      	cbnz	r2, 86a28 <__udivmoddi4+0xf8>
   86a22:	2701      	movs	r7, #1
   86a24:	fbb7 f7f2 	udiv	r7, r7, r2
   86a28:	fab7 fe87 	clz	lr, r7
   86a2c:	f1be 0f00 	cmp.w	lr, #0
   86a30:	d135      	bne.n	86a9e <__udivmoddi4+0x16e>
   86a32:	2101      	movs	r1, #1
   86a34:	1bf6      	subs	r6, r6, r7
   86a36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86a3a:	fa1f f887 	uxth.w	r8, r7
   86a3e:	fbb6 f2fc 	udiv	r2, r6, ip
   86a42:	fb0c 6612 	mls	r6, ip, r2, r6
   86a46:	fb08 f002 	mul.w	r0, r8, r2
   86a4a:	0c23      	lsrs	r3, r4, #16
   86a4c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   86a50:	42b0      	cmp	r0, r6
   86a52:	d907      	bls.n	86a64 <__udivmoddi4+0x134>
   86a54:	19f6      	adds	r6, r6, r7
   86a56:	f102 33ff 	add.w	r3, r2, #4294967295
   86a5a:	d202      	bcs.n	86a62 <__udivmoddi4+0x132>
   86a5c:	42b0      	cmp	r0, r6
   86a5e:	f200 80d2 	bhi.w	86c06 <__udivmoddi4+0x2d6>
   86a62:	461a      	mov	r2, r3
   86a64:	1a36      	subs	r6, r6, r0
   86a66:	fbb6 f0fc 	udiv	r0, r6, ip
   86a6a:	fb0c 6610 	mls	r6, ip, r0, r6
   86a6e:	fb08 f800 	mul.w	r8, r8, r0
   86a72:	b2a3      	uxth	r3, r4
   86a74:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86a78:	45a0      	cmp	r8, r4
   86a7a:	d907      	bls.n	86a8c <__udivmoddi4+0x15c>
   86a7c:	19e4      	adds	r4, r4, r7
   86a7e:	f100 33ff 	add.w	r3, r0, #4294967295
   86a82:	d202      	bcs.n	86a8a <__udivmoddi4+0x15a>
   86a84:	45a0      	cmp	r8, r4
   86a86:	f200 80b9 	bhi.w	86bfc <__udivmoddi4+0x2cc>
   86a8a:	4618      	mov	r0, r3
   86a8c:	eba4 0408 	sub.w	r4, r4, r8
   86a90:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86a94:	e79c      	b.n	869d0 <__udivmoddi4+0xa0>
   86a96:	4629      	mov	r1, r5
   86a98:	4628      	mov	r0, r5
   86a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a9e:	fa07 f70e 	lsl.w	r7, r7, lr
   86aa2:	f1ce 0320 	rsb	r3, lr, #32
   86aa6:	fa26 f203 	lsr.w	r2, r6, r3
   86aaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86aae:	fbb2 f1fc 	udiv	r1, r2, ip
   86ab2:	fa1f f887 	uxth.w	r8, r7
   86ab6:	fb0c 2211 	mls	r2, ip, r1, r2
   86aba:	fa06 f60e 	lsl.w	r6, r6, lr
   86abe:	fa20 f303 	lsr.w	r3, r0, r3
   86ac2:	fb01 f908 	mul.w	r9, r1, r8
   86ac6:	4333      	orrs	r3, r6
   86ac8:	0c1e      	lsrs	r6, r3, #16
   86aca:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86ace:	45b1      	cmp	r9, r6
   86ad0:	fa00 f40e 	lsl.w	r4, r0, lr
   86ad4:	d909      	bls.n	86aea <__udivmoddi4+0x1ba>
   86ad6:	19f6      	adds	r6, r6, r7
   86ad8:	f101 32ff 	add.w	r2, r1, #4294967295
   86adc:	f080 808c 	bcs.w	86bf8 <__udivmoddi4+0x2c8>
   86ae0:	45b1      	cmp	r9, r6
   86ae2:	f240 8089 	bls.w	86bf8 <__udivmoddi4+0x2c8>
   86ae6:	3902      	subs	r1, #2
   86ae8:	443e      	add	r6, r7
   86aea:	eba6 0609 	sub.w	r6, r6, r9
   86aee:	fbb6 f0fc 	udiv	r0, r6, ip
   86af2:	fb0c 6210 	mls	r2, ip, r0, r6
   86af6:	fb00 f908 	mul.w	r9, r0, r8
   86afa:	b29e      	uxth	r6, r3
   86afc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86b00:	45b1      	cmp	r9, r6
   86b02:	d907      	bls.n	86b14 <__udivmoddi4+0x1e4>
   86b04:	19f6      	adds	r6, r6, r7
   86b06:	f100 33ff 	add.w	r3, r0, #4294967295
   86b0a:	d271      	bcs.n	86bf0 <__udivmoddi4+0x2c0>
   86b0c:	45b1      	cmp	r9, r6
   86b0e:	d96f      	bls.n	86bf0 <__udivmoddi4+0x2c0>
   86b10:	3802      	subs	r0, #2
   86b12:	443e      	add	r6, r7
   86b14:	eba6 0609 	sub.w	r6, r6, r9
   86b18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86b1c:	e78f      	b.n	86a3e <__udivmoddi4+0x10e>
   86b1e:	f1c1 0720 	rsb	r7, r1, #32
   86b22:	fa22 f807 	lsr.w	r8, r2, r7
   86b26:	408b      	lsls	r3, r1
   86b28:	ea48 0303 	orr.w	r3, r8, r3
   86b2c:	fa26 f407 	lsr.w	r4, r6, r7
   86b30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86b34:	fbb4 f9fe 	udiv	r9, r4, lr
   86b38:	fa1f fc83 	uxth.w	ip, r3
   86b3c:	fb0e 4419 	mls	r4, lr, r9, r4
   86b40:	408e      	lsls	r6, r1
   86b42:	fa20 f807 	lsr.w	r8, r0, r7
   86b46:	fb09 fa0c 	mul.w	sl, r9, ip
   86b4a:	ea48 0806 	orr.w	r8, r8, r6
   86b4e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86b52:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86b56:	45a2      	cmp	sl, r4
   86b58:	fa02 f201 	lsl.w	r2, r2, r1
   86b5c:	fa00 f601 	lsl.w	r6, r0, r1
   86b60:	d908      	bls.n	86b74 <__udivmoddi4+0x244>
   86b62:	18e4      	adds	r4, r4, r3
   86b64:	f109 30ff 	add.w	r0, r9, #4294967295
   86b68:	d244      	bcs.n	86bf4 <__udivmoddi4+0x2c4>
   86b6a:	45a2      	cmp	sl, r4
   86b6c:	d942      	bls.n	86bf4 <__udivmoddi4+0x2c4>
   86b6e:	f1a9 0902 	sub.w	r9, r9, #2
   86b72:	441c      	add	r4, r3
   86b74:	eba4 040a 	sub.w	r4, r4, sl
   86b78:	fbb4 f0fe 	udiv	r0, r4, lr
   86b7c:	fb0e 4410 	mls	r4, lr, r0, r4
   86b80:	fb00 fc0c 	mul.w	ip, r0, ip
   86b84:	fa1f f888 	uxth.w	r8, r8
   86b88:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86b8c:	45a4      	cmp	ip, r4
   86b8e:	d907      	bls.n	86ba0 <__udivmoddi4+0x270>
   86b90:	18e4      	adds	r4, r4, r3
   86b92:	f100 3eff 	add.w	lr, r0, #4294967295
   86b96:	d229      	bcs.n	86bec <__udivmoddi4+0x2bc>
   86b98:	45a4      	cmp	ip, r4
   86b9a:	d927      	bls.n	86bec <__udivmoddi4+0x2bc>
   86b9c:	3802      	subs	r0, #2
   86b9e:	441c      	add	r4, r3
   86ba0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86ba4:	fba0 8902 	umull	r8, r9, r0, r2
   86ba8:	eba4 0c0c 	sub.w	ip, r4, ip
   86bac:	45cc      	cmp	ip, r9
   86bae:	46c2      	mov	sl, r8
   86bb0:	46ce      	mov	lr, r9
   86bb2:	d315      	bcc.n	86be0 <__udivmoddi4+0x2b0>
   86bb4:	d012      	beq.n	86bdc <__udivmoddi4+0x2ac>
   86bb6:	b155      	cbz	r5, 86bce <__udivmoddi4+0x29e>
   86bb8:	ebb6 030a 	subs.w	r3, r6, sl
   86bbc:	eb6c 060e 	sbc.w	r6, ip, lr
   86bc0:	fa06 f707 	lsl.w	r7, r6, r7
   86bc4:	40cb      	lsrs	r3, r1
   86bc6:	431f      	orrs	r7, r3
   86bc8:	40ce      	lsrs	r6, r1
   86bca:	602f      	str	r7, [r5, #0]
   86bcc:	606e      	str	r6, [r5, #4]
   86bce:	2100      	movs	r1, #0
   86bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86bd4:	4610      	mov	r0, r2
   86bd6:	e6f7      	b.n	869c8 <__udivmoddi4+0x98>
   86bd8:	4689      	mov	r9, r1
   86bda:	e6de      	b.n	8699a <__udivmoddi4+0x6a>
   86bdc:	4546      	cmp	r6, r8
   86bde:	d2ea      	bcs.n	86bb6 <__udivmoddi4+0x286>
   86be0:	ebb8 0a02 	subs.w	sl, r8, r2
   86be4:	eb69 0e03 	sbc.w	lr, r9, r3
   86be8:	3801      	subs	r0, #1
   86bea:	e7e4      	b.n	86bb6 <__udivmoddi4+0x286>
   86bec:	4670      	mov	r0, lr
   86bee:	e7d7      	b.n	86ba0 <__udivmoddi4+0x270>
   86bf0:	4618      	mov	r0, r3
   86bf2:	e78f      	b.n	86b14 <__udivmoddi4+0x1e4>
   86bf4:	4681      	mov	r9, r0
   86bf6:	e7bd      	b.n	86b74 <__udivmoddi4+0x244>
   86bf8:	4611      	mov	r1, r2
   86bfa:	e776      	b.n	86aea <__udivmoddi4+0x1ba>
   86bfc:	3802      	subs	r0, #2
   86bfe:	443c      	add	r4, r7
   86c00:	e744      	b.n	86a8c <__udivmoddi4+0x15c>
   86c02:	4608      	mov	r0, r1
   86c04:	e706      	b.n	86a14 <__udivmoddi4+0xe4>
   86c06:	3a02      	subs	r2, #2
   86c08:	443e      	add	r6, r7
   86c0a:	e72b      	b.n	86a64 <__udivmoddi4+0x134>

00086c0c <__aeabi_idiv0>:
   86c0c:	4770      	bx	lr
   86c0e:	bf00      	nop

00086c10 <__libc_init_array>:
   86c10:	b570      	push	{r4, r5, r6, lr}
   86c12:	4e0f      	ldr	r6, [pc, #60]	; (86c50 <__libc_init_array+0x40>)
   86c14:	4d0f      	ldr	r5, [pc, #60]	; (86c54 <__libc_init_array+0x44>)
   86c16:	1b76      	subs	r6, r6, r5
   86c18:	10b6      	asrs	r6, r6, #2
   86c1a:	bf18      	it	ne
   86c1c:	2400      	movne	r4, #0
   86c1e:	d005      	beq.n	86c2c <__libc_init_array+0x1c>
   86c20:	3401      	adds	r4, #1
   86c22:	f855 3b04 	ldr.w	r3, [r5], #4
   86c26:	4798      	blx	r3
   86c28:	42a6      	cmp	r6, r4
   86c2a:	d1f9      	bne.n	86c20 <__libc_init_array+0x10>
   86c2c:	4e0a      	ldr	r6, [pc, #40]	; (86c58 <__libc_init_array+0x48>)
   86c2e:	4d0b      	ldr	r5, [pc, #44]	; (86c5c <__libc_init_array+0x4c>)
   86c30:	f006 fa66 	bl	8d100 <_init>
   86c34:	1b76      	subs	r6, r6, r5
   86c36:	10b6      	asrs	r6, r6, #2
   86c38:	bf18      	it	ne
   86c3a:	2400      	movne	r4, #0
   86c3c:	d006      	beq.n	86c4c <__libc_init_array+0x3c>
   86c3e:	3401      	adds	r4, #1
   86c40:	f855 3b04 	ldr.w	r3, [r5], #4
   86c44:	4798      	blx	r3
   86c46:	42a6      	cmp	r6, r4
   86c48:	d1f9      	bne.n	86c3e <__libc_init_array+0x2e>
   86c4a:	bd70      	pop	{r4, r5, r6, pc}
   86c4c:	bd70      	pop	{r4, r5, r6, pc}
   86c4e:	bf00      	nop
   86c50:	0008d10c 	.word	0x0008d10c
   86c54:	0008d10c 	.word	0x0008d10c
   86c58:	0008d114 	.word	0x0008d114
   86c5c:	0008d10c 	.word	0x0008d10c

00086c60 <iprintf>:
   86c60:	b40f      	push	{r0, r1, r2, r3}
   86c62:	b510      	push	{r4, lr}
   86c64:	4b07      	ldr	r3, [pc, #28]	; (86c84 <iprintf+0x24>)
   86c66:	b082      	sub	sp, #8
   86c68:	ac04      	add	r4, sp, #16
   86c6a:	f854 2b04 	ldr.w	r2, [r4], #4
   86c6e:	6818      	ldr	r0, [r3, #0]
   86c70:	4623      	mov	r3, r4
   86c72:	6881      	ldr	r1, [r0, #8]
   86c74:	9401      	str	r4, [sp, #4]
   86c76:	f001 fce1 	bl	8863c <_vfiprintf_r>
   86c7a:	b002      	add	sp, #8
   86c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   86c80:	b004      	add	sp, #16
   86c82:	4770      	bx	lr
   86c84:	20000aac 	.word	0x20000aac

00086c88 <memcpy>:
   86c88:	4684      	mov	ip, r0
   86c8a:	ea41 0300 	orr.w	r3, r1, r0
   86c8e:	f013 0303 	ands.w	r3, r3, #3
   86c92:	d149      	bne.n	86d28 <memcpy+0xa0>
   86c94:	3a40      	subs	r2, #64	; 0x40
   86c96:	d323      	bcc.n	86ce0 <memcpy+0x58>
   86c98:	680b      	ldr	r3, [r1, #0]
   86c9a:	6003      	str	r3, [r0, #0]
   86c9c:	684b      	ldr	r3, [r1, #4]
   86c9e:	6043      	str	r3, [r0, #4]
   86ca0:	688b      	ldr	r3, [r1, #8]
   86ca2:	6083      	str	r3, [r0, #8]
   86ca4:	68cb      	ldr	r3, [r1, #12]
   86ca6:	60c3      	str	r3, [r0, #12]
   86ca8:	690b      	ldr	r3, [r1, #16]
   86caa:	6103      	str	r3, [r0, #16]
   86cac:	694b      	ldr	r3, [r1, #20]
   86cae:	6143      	str	r3, [r0, #20]
   86cb0:	698b      	ldr	r3, [r1, #24]
   86cb2:	6183      	str	r3, [r0, #24]
   86cb4:	69cb      	ldr	r3, [r1, #28]
   86cb6:	61c3      	str	r3, [r0, #28]
   86cb8:	6a0b      	ldr	r3, [r1, #32]
   86cba:	6203      	str	r3, [r0, #32]
   86cbc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86cbe:	6243      	str	r3, [r0, #36]	; 0x24
   86cc0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86cc2:	6283      	str	r3, [r0, #40]	; 0x28
   86cc4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86cc6:	62c3      	str	r3, [r0, #44]	; 0x2c
   86cc8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86cca:	6303      	str	r3, [r0, #48]	; 0x30
   86ccc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86cce:	6343      	str	r3, [r0, #52]	; 0x34
   86cd0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86cd2:	6383      	str	r3, [r0, #56]	; 0x38
   86cd4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86cd6:	63c3      	str	r3, [r0, #60]	; 0x3c
   86cd8:	3040      	adds	r0, #64	; 0x40
   86cda:	3140      	adds	r1, #64	; 0x40
   86cdc:	3a40      	subs	r2, #64	; 0x40
   86cde:	d2db      	bcs.n	86c98 <memcpy+0x10>
   86ce0:	3230      	adds	r2, #48	; 0x30
   86ce2:	d30b      	bcc.n	86cfc <memcpy+0x74>
   86ce4:	680b      	ldr	r3, [r1, #0]
   86ce6:	6003      	str	r3, [r0, #0]
   86ce8:	684b      	ldr	r3, [r1, #4]
   86cea:	6043      	str	r3, [r0, #4]
   86cec:	688b      	ldr	r3, [r1, #8]
   86cee:	6083      	str	r3, [r0, #8]
   86cf0:	68cb      	ldr	r3, [r1, #12]
   86cf2:	60c3      	str	r3, [r0, #12]
   86cf4:	3010      	adds	r0, #16
   86cf6:	3110      	adds	r1, #16
   86cf8:	3a10      	subs	r2, #16
   86cfa:	d2f3      	bcs.n	86ce4 <memcpy+0x5c>
   86cfc:	320c      	adds	r2, #12
   86cfe:	d305      	bcc.n	86d0c <memcpy+0x84>
   86d00:	f851 3b04 	ldr.w	r3, [r1], #4
   86d04:	f840 3b04 	str.w	r3, [r0], #4
   86d08:	3a04      	subs	r2, #4
   86d0a:	d2f9      	bcs.n	86d00 <memcpy+0x78>
   86d0c:	3204      	adds	r2, #4
   86d0e:	d008      	beq.n	86d22 <memcpy+0x9a>
   86d10:	07d2      	lsls	r2, r2, #31
   86d12:	bf1c      	itt	ne
   86d14:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d18:	f800 3b01 	strbne.w	r3, [r0], #1
   86d1c:	d301      	bcc.n	86d22 <memcpy+0x9a>
   86d1e:	880b      	ldrh	r3, [r1, #0]
   86d20:	8003      	strh	r3, [r0, #0]
   86d22:	4660      	mov	r0, ip
   86d24:	4770      	bx	lr
   86d26:	bf00      	nop
   86d28:	2a08      	cmp	r2, #8
   86d2a:	d313      	bcc.n	86d54 <memcpy+0xcc>
   86d2c:	078b      	lsls	r3, r1, #30
   86d2e:	d0b1      	beq.n	86c94 <memcpy+0xc>
   86d30:	f010 0303 	ands.w	r3, r0, #3
   86d34:	d0ae      	beq.n	86c94 <memcpy+0xc>
   86d36:	f1c3 0304 	rsb	r3, r3, #4
   86d3a:	1ad2      	subs	r2, r2, r3
   86d3c:	07db      	lsls	r3, r3, #31
   86d3e:	bf1c      	itt	ne
   86d40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d44:	f800 3b01 	strbne.w	r3, [r0], #1
   86d48:	d3a4      	bcc.n	86c94 <memcpy+0xc>
   86d4a:	f831 3b02 	ldrh.w	r3, [r1], #2
   86d4e:	f820 3b02 	strh.w	r3, [r0], #2
   86d52:	e79f      	b.n	86c94 <memcpy+0xc>
   86d54:	3a04      	subs	r2, #4
   86d56:	d3d9      	bcc.n	86d0c <memcpy+0x84>
   86d58:	3a01      	subs	r2, #1
   86d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
   86d5e:	f800 3b01 	strb.w	r3, [r0], #1
   86d62:	d2f9      	bcs.n	86d58 <memcpy+0xd0>
   86d64:	780b      	ldrb	r3, [r1, #0]
   86d66:	7003      	strb	r3, [r0, #0]
   86d68:	784b      	ldrb	r3, [r1, #1]
   86d6a:	7043      	strb	r3, [r0, #1]
   86d6c:	788b      	ldrb	r3, [r1, #2]
   86d6e:	7083      	strb	r3, [r0, #2]
   86d70:	4660      	mov	r0, ip
   86d72:	4770      	bx	lr

00086d74 <memset>:
   86d74:	b470      	push	{r4, r5, r6}
   86d76:	0786      	lsls	r6, r0, #30
   86d78:	d046      	beq.n	86e08 <memset+0x94>
   86d7a:	1e54      	subs	r4, r2, #1
   86d7c:	2a00      	cmp	r2, #0
   86d7e:	d041      	beq.n	86e04 <memset+0x90>
   86d80:	b2ca      	uxtb	r2, r1
   86d82:	4603      	mov	r3, r0
   86d84:	e002      	b.n	86d8c <memset+0x18>
   86d86:	f114 34ff 	adds.w	r4, r4, #4294967295
   86d8a:	d33b      	bcc.n	86e04 <memset+0x90>
   86d8c:	f803 2b01 	strb.w	r2, [r3], #1
   86d90:	079d      	lsls	r5, r3, #30
   86d92:	d1f8      	bne.n	86d86 <memset+0x12>
   86d94:	2c03      	cmp	r4, #3
   86d96:	d92e      	bls.n	86df6 <memset+0x82>
   86d98:	b2cd      	uxtb	r5, r1
   86d9a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86d9e:	2c0f      	cmp	r4, #15
   86da0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86da4:	d919      	bls.n	86dda <memset+0x66>
   86da6:	4626      	mov	r6, r4
   86da8:	f103 0210 	add.w	r2, r3, #16
   86dac:	3e10      	subs	r6, #16
   86dae:	2e0f      	cmp	r6, #15
   86db0:	f842 5c10 	str.w	r5, [r2, #-16]
   86db4:	f842 5c0c 	str.w	r5, [r2, #-12]
   86db8:	f842 5c08 	str.w	r5, [r2, #-8]
   86dbc:	f842 5c04 	str.w	r5, [r2, #-4]
   86dc0:	f102 0210 	add.w	r2, r2, #16
   86dc4:	d8f2      	bhi.n	86dac <memset+0x38>
   86dc6:	f1a4 0210 	sub.w	r2, r4, #16
   86dca:	f022 020f 	bic.w	r2, r2, #15
   86dce:	f004 040f 	and.w	r4, r4, #15
   86dd2:	3210      	adds	r2, #16
   86dd4:	2c03      	cmp	r4, #3
   86dd6:	4413      	add	r3, r2
   86dd8:	d90d      	bls.n	86df6 <memset+0x82>
   86dda:	461e      	mov	r6, r3
   86ddc:	4622      	mov	r2, r4
   86dde:	3a04      	subs	r2, #4
   86de0:	2a03      	cmp	r2, #3
   86de2:	f846 5b04 	str.w	r5, [r6], #4
   86de6:	d8fa      	bhi.n	86dde <memset+0x6a>
   86de8:	1f22      	subs	r2, r4, #4
   86dea:	f022 0203 	bic.w	r2, r2, #3
   86dee:	3204      	adds	r2, #4
   86df0:	4413      	add	r3, r2
   86df2:	f004 0403 	and.w	r4, r4, #3
   86df6:	b12c      	cbz	r4, 86e04 <memset+0x90>
   86df8:	b2c9      	uxtb	r1, r1
   86dfa:	441c      	add	r4, r3
   86dfc:	f803 1b01 	strb.w	r1, [r3], #1
   86e00:	429c      	cmp	r4, r3
   86e02:	d1fb      	bne.n	86dfc <memset+0x88>
   86e04:	bc70      	pop	{r4, r5, r6}
   86e06:	4770      	bx	lr
   86e08:	4614      	mov	r4, r2
   86e0a:	4603      	mov	r3, r0
   86e0c:	e7c2      	b.n	86d94 <memset+0x20>
   86e0e:	bf00      	nop

00086e10 <setbuf>:
   86e10:	2900      	cmp	r1, #0
   86e12:	bf0c      	ite	eq
   86e14:	2202      	moveq	r2, #2
   86e16:	2200      	movne	r2, #0
   86e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86e1c:	f000 b800 	b.w	86e20 <setvbuf>

00086e20 <setvbuf>:
   86e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86e24:	4d61      	ldr	r5, [pc, #388]	; (86fac <setvbuf+0x18c>)
   86e26:	b083      	sub	sp, #12
   86e28:	682d      	ldr	r5, [r5, #0]
   86e2a:	4604      	mov	r4, r0
   86e2c:	460f      	mov	r7, r1
   86e2e:	4690      	mov	r8, r2
   86e30:	461e      	mov	r6, r3
   86e32:	b115      	cbz	r5, 86e3a <setvbuf+0x1a>
   86e34:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86e36:	2b00      	cmp	r3, #0
   86e38:	d064      	beq.n	86f04 <setvbuf+0xe4>
   86e3a:	f1b8 0f02 	cmp.w	r8, #2
   86e3e:	d006      	beq.n	86e4e <setvbuf+0x2e>
   86e40:	f1b8 0f01 	cmp.w	r8, #1
   86e44:	f200 809f 	bhi.w	86f86 <setvbuf+0x166>
   86e48:	2e00      	cmp	r6, #0
   86e4a:	f2c0 809c 	blt.w	86f86 <setvbuf+0x166>
   86e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86e50:	07d8      	lsls	r0, r3, #31
   86e52:	d534      	bpl.n	86ebe <setvbuf+0x9e>
   86e54:	4621      	mov	r1, r4
   86e56:	4628      	mov	r0, r5
   86e58:	f003 fb40 	bl	8a4dc <_fflush_r>
   86e5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86e5e:	b141      	cbz	r1, 86e72 <setvbuf+0x52>
   86e60:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86e64:	4299      	cmp	r1, r3
   86e66:	d002      	beq.n	86e6e <setvbuf+0x4e>
   86e68:	4628      	mov	r0, r5
   86e6a:	f003 fcb5 	bl	8a7d8 <_free_r>
   86e6e:	2300      	movs	r3, #0
   86e70:	6323      	str	r3, [r4, #48]	; 0x30
   86e72:	2200      	movs	r2, #0
   86e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86e78:	61a2      	str	r2, [r4, #24]
   86e7a:	6062      	str	r2, [r4, #4]
   86e7c:	061a      	lsls	r2, r3, #24
   86e7e:	d43a      	bmi.n	86ef6 <setvbuf+0xd6>
   86e80:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   86e84:	f023 0303 	bic.w	r3, r3, #3
   86e88:	f1b8 0f02 	cmp.w	r8, #2
   86e8c:	81a3      	strh	r3, [r4, #12]
   86e8e:	d01d      	beq.n	86ecc <setvbuf+0xac>
   86e90:	ab01      	add	r3, sp, #4
   86e92:	466a      	mov	r2, sp
   86e94:	4621      	mov	r1, r4
   86e96:	4628      	mov	r0, r5
   86e98:	f003 ff4a 	bl	8ad30 <__swhatbuf_r>
   86e9c:	89a3      	ldrh	r3, [r4, #12]
   86e9e:	4318      	orrs	r0, r3
   86ea0:	81a0      	strh	r0, [r4, #12]
   86ea2:	2e00      	cmp	r6, #0
   86ea4:	d132      	bne.n	86f0c <setvbuf+0xec>
   86ea6:	9e00      	ldr	r6, [sp, #0]
   86ea8:	4630      	mov	r0, r6
   86eaa:	f003 ffb9 	bl	8ae20 <malloc>
   86eae:	4607      	mov	r7, r0
   86eb0:	2800      	cmp	r0, #0
   86eb2:	d06b      	beq.n	86f8c <setvbuf+0x16c>
   86eb4:	89a3      	ldrh	r3, [r4, #12]
   86eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86eba:	81a3      	strh	r3, [r4, #12]
   86ebc:	e028      	b.n	86f10 <setvbuf+0xf0>
   86ebe:	89a3      	ldrh	r3, [r4, #12]
   86ec0:	0599      	lsls	r1, r3, #22
   86ec2:	d4c7      	bmi.n	86e54 <setvbuf+0x34>
   86ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86ec6:	f003 ff2f 	bl	8ad28 <__retarget_lock_acquire_recursive>
   86eca:	e7c3      	b.n	86e54 <setvbuf+0x34>
   86ecc:	2500      	movs	r5, #0
   86ece:	2600      	movs	r6, #0
   86ed0:	2001      	movs	r0, #1
   86ed2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86ed8:	f043 0302 	orr.w	r3, r3, #2
   86edc:	60a6      	str	r6, [r4, #8]
   86ede:	07ce      	lsls	r6, r1, #31
   86ee0:	81a3      	strh	r3, [r4, #12]
   86ee2:	6160      	str	r0, [r4, #20]
   86ee4:	6022      	str	r2, [r4, #0]
   86ee6:	6122      	str	r2, [r4, #16]
   86ee8:	d401      	bmi.n	86eee <setvbuf+0xce>
   86eea:	0598      	lsls	r0, r3, #22
   86eec:	d53e      	bpl.n	86f6c <setvbuf+0x14c>
   86eee:	4628      	mov	r0, r5
   86ef0:	b003      	add	sp, #12
   86ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86ef6:	6921      	ldr	r1, [r4, #16]
   86ef8:	4628      	mov	r0, r5
   86efa:	f003 fc6d 	bl	8a7d8 <_free_r>
   86efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86f02:	e7bd      	b.n	86e80 <setvbuf+0x60>
   86f04:	4628      	mov	r0, r5
   86f06:	f003 fb41 	bl	8a58c <__sinit>
   86f0a:	e796      	b.n	86e3a <setvbuf+0x1a>
   86f0c:	2f00      	cmp	r7, #0
   86f0e:	d0cb      	beq.n	86ea8 <setvbuf+0x88>
   86f10:	6bab      	ldr	r3, [r5, #56]	; 0x38
   86f12:	2b00      	cmp	r3, #0
   86f14:	d033      	beq.n	86f7e <setvbuf+0x15e>
   86f16:	9b00      	ldr	r3, [sp, #0]
   86f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86f1c:	429e      	cmp	r6, r3
   86f1e:	bf1c      	itt	ne
   86f20:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   86f24:	81a2      	strhne	r2, [r4, #12]
   86f26:	f1b8 0f01 	cmp.w	r8, #1
   86f2a:	bf04      	itt	eq
   86f2c:	f042 0201 	orreq.w	r2, r2, #1
   86f30:	81a2      	strheq	r2, [r4, #12]
   86f32:	b292      	uxth	r2, r2
   86f34:	f012 0308 	ands.w	r3, r2, #8
   86f38:	6027      	str	r7, [r4, #0]
   86f3a:	6127      	str	r7, [r4, #16]
   86f3c:	6166      	str	r6, [r4, #20]
   86f3e:	d00e      	beq.n	86f5e <setvbuf+0x13e>
   86f40:	07d1      	lsls	r1, r2, #31
   86f42:	d51a      	bpl.n	86f7a <setvbuf+0x15a>
   86f44:	2300      	movs	r3, #0
   86f46:	6e65      	ldr	r5, [r4, #100]	; 0x64
   86f48:	4276      	negs	r6, r6
   86f4a:	f015 0501 	ands.w	r5, r5, #1
   86f4e:	61a6      	str	r6, [r4, #24]
   86f50:	60a3      	str	r3, [r4, #8]
   86f52:	d009      	beq.n	86f68 <setvbuf+0x148>
   86f54:	2500      	movs	r5, #0
   86f56:	4628      	mov	r0, r5
   86f58:	b003      	add	sp, #12
   86f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86f5e:	60a3      	str	r3, [r4, #8]
   86f60:	6e65      	ldr	r5, [r4, #100]	; 0x64
   86f62:	f015 0501 	ands.w	r5, r5, #1
   86f66:	d1f5      	bne.n	86f54 <setvbuf+0x134>
   86f68:	0593      	lsls	r3, r2, #22
   86f6a:	d4c0      	bmi.n	86eee <setvbuf+0xce>
   86f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86f6e:	f003 fedd 	bl	8ad2c <__retarget_lock_release_recursive>
   86f72:	4628      	mov	r0, r5
   86f74:	b003      	add	sp, #12
   86f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86f7a:	60a6      	str	r6, [r4, #8]
   86f7c:	e7f0      	b.n	86f60 <setvbuf+0x140>
   86f7e:	4628      	mov	r0, r5
   86f80:	f003 fb04 	bl	8a58c <__sinit>
   86f84:	e7c7      	b.n	86f16 <setvbuf+0xf6>
   86f86:	f04f 35ff 	mov.w	r5, #4294967295
   86f8a:	e7b0      	b.n	86eee <setvbuf+0xce>
   86f8c:	f8dd 9000 	ldr.w	r9, [sp]
   86f90:	45b1      	cmp	r9, r6
   86f92:	d004      	beq.n	86f9e <setvbuf+0x17e>
   86f94:	4648      	mov	r0, r9
   86f96:	f003 ff43 	bl	8ae20 <malloc>
   86f9a:	4607      	mov	r7, r0
   86f9c:	b920      	cbnz	r0, 86fa8 <setvbuf+0x188>
   86f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86fa2:	f04f 35ff 	mov.w	r5, #4294967295
   86fa6:	e792      	b.n	86ece <setvbuf+0xae>
   86fa8:	464e      	mov	r6, r9
   86faa:	e783      	b.n	86eb4 <setvbuf+0x94>
   86fac:	20000aac 	.word	0x20000aac

00086fb0 <sprintf>:
   86fb0:	b40e      	push	{r1, r2, r3}
   86fb2:	4601      	mov	r1, r0
   86fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   86fb6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   86fba:	f44f 7702 	mov.w	r7, #520	; 0x208
   86fbe:	f64f 76ff 	movw	r6, #65535	; 0xffff
   86fc2:	b09c      	sub	sp, #112	; 0x70
   86fc4:	ac21      	add	r4, sp, #132	; 0x84
   86fc6:	f854 2b04 	ldr.w	r2, [r4], #4
   86fca:	4b0b      	ldr	r3, [pc, #44]	; (86ff8 <sprintf+0x48>)
   86fcc:	9102      	str	r1, [sp, #8]
   86fce:	9106      	str	r1, [sp, #24]
   86fd0:	6818      	ldr	r0, [r3, #0]
   86fd2:	a902      	add	r1, sp, #8
   86fd4:	4623      	mov	r3, r4
   86fd6:	9401      	str	r4, [sp, #4]
   86fd8:	f8ad 7014 	strh.w	r7, [sp, #20]
   86fdc:	9504      	str	r5, [sp, #16]
   86fde:	9507      	str	r5, [sp, #28]
   86fe0:	f8ad 6016 	strh.w	r6, [sp, #22]
   86fe4:	f000 f86a 	bl	870bc <_svfprintf_r>
   86fe8:	2200      	movs	r2, #0
   86fea:	9b02      	ldr	r3, [sp, #8]
   86fec:	701a      	strb	r2, [r3, #0]
   86fee:	b01c      	add	sp, #112	; 0x70
   86ff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   86ff4:	b003      	add	sp, #12
   86ff6:	4770      	bx	lr
   86ff8:	20000aac 	.word	0x20000aac

00086ffc <strlen>:
   86ffc:	f020 0103 	bic.w	r1, r0, #3
   87000:	f010 0003 	ands.w	r0, r0, #3
   87004:	f1c0 0000 	rsb	r0, r0, #0
   87008:	f851 3b04 	ldr.w	r3, [r1], #4
   8700c:	f100 0c04 	add.w	ip, r0, #4
   87010:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   87014:	f06f 0200 	mvn.w	r2, #0
   87018:	bf1c      	itt	ne
   8701a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8701e:	4313      	orrne	r3, r2
   87020:	f04f 0c01 	mov.w	ip, #1
   87024:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   87028:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8702c:	eba3 020c 	sub.w	r2, r3, ip
   87030:	ea22 0203 	bic.w	r2, r2, r3
   87034:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   87038:	bf04      	itt	eq
   8703a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8703e:	3004      	addeq	r0, #4
   87040:	d0f4      	beq.n	8702c <strlen+0x30>
   87042:	f1c2 0100 	rsb	r1, r2, #0
   87046:	ea02 0201 	and.w	r2, r2, r1
   8704a:	fab2 f282 	clz	r2, r2
   8704e:	f1c2 021f 	rsb	r2, r2, #31
   87052:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   87056:	4770      	bx	lr

00087058 <strncpy>:
   87058:	ea40 0301 	orr.w	r3, r0, r1
   8705c:	f013 0f03 	tst.w	r3, #3
   87060:	b470      	push	{r4, r5, r6}
   87062:	4603      	mov	r3, r0
   87064:	d024      	beq.n	870b0 <strncpy+0x58>
   87066:	b1a2      	cbz	r2, 87092 <strncpy+0x3a>
   87068:	780c      	ldrb	r4, [r1, #0]
   8706a:	3a01      	subs	r2, #1
   8706c:	701c      	strb	r4, [r3, #0]
   8706e:	3101      	adds	r1, #1
   87070:	3301      	adds	r3, #1
   87072:	b13c      	cbz	r4, 87084 <strncpy+0x2c>
   87074:	b16a      	cbz	r2, 87092 <strncpy+0x3a>
   87076:	f811 4b01 	ldrb.w	r4, [r1], #1
   8707a:	3a01      	subs	r2, #1
   8707c:	f803 4b01 	strb.w	r4, [r3], #1
   87080:	2c00      	cmp	r4, #0
   87082:	d1f7      	bne.n	87074 <strncpy+0x1c>
   87084:	b12a      	cbz	r2, 87092 <strncpy+0x3a>
   87086:	2100      	movs	r1, #0
   87088:	441a      	add	r2, r3
   8708a:	f803 1b01 	strb.w	r1, [r3], #1
   8708e:	429a      	cmp	r2, r3
   87090:	d1fb      	bne.n	8708a <strncpy+0x32>
   87092:	bc70      	pop	{r4, r5, r6}
   87094:	4770      	bx	lr
   87096:	460e      	mov	r6, r1
   87098:	f851 5b04 	ldr.w	r5, [r1], #4
   8709c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   870a0:	ea24 0405 	bic.w	r4, r4, r5
   870a4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   870a8:	d105      	bne.n	870b6 <strncpy+0x5e>
   870aa:	3a04      	subs	r2, #4
   870ac:	f843 5b04 	str.w	r5, [r3], #4
   870b0:	2a03      	cmp	r2, #3
   870b2:	d8f0      	bhi.n	87096 <strncpy+0x3e>
   870b4:	e7d7      	b.n	87066 <strncpy+0xe>
   870b6:	4631      	mov	r1, r6
   870b8:	e7d6      	b.n	87068 <strncpy+0x10>
   870ba:	bf00      	nop

000870bc <_svfprintf_r>:
   870bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   870c0:	b0c3      	sub	sp, #268	; 0x10c
   870c2:	460c      	mov	r4, r1
   870c4:	910b      	str	r1, [sp, #44]	; 0x2c
   870c6:	4692      	mov	sl, r2
   870c8:	930f      	str	r3, [sp, #60]	; 0x3c
   870ca:	900c      	str	r0, [sp, #48]	; 0x30
   870cc:	f003 fe1a 	bl	8ad04 <_localeconv_r>
   870d0:	6803      	ldr	r3, [r0, #0]
   870d2:	4618      	mov	r0, r3
   870d4:	931a      	str	r3, [sp, #104]	; 0x68
   870d6:	f7ff ff91 	bl	86ffc <strlen>
   870da:	89a3      	ldrh	r3, [r4, #12]
   870dc:	9019      	str	r0, [sp, #100]	; 0x64
   870de:	0619      	lsls	r1, r3, #24
   870e0:	d503      	bpl.n	870ea <_svfprintf_r+0x2e>
   870e2:	6923      	ldr	r3, [r4, #16]
   870e4:	2b00      	cmp	r3, #0
   870e6:	f001 8035 	beq.w	88154 <_svfprintf_r+0x1098>
   870ea:	2300      	movs	r3, #0
   870ec:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   870f0:	46c8      	mov	r8, r9
   870f2:	9315      	str	r3, [sp, #84]	; 0x54
   870f4:	9313      	str	r3, [sp, #76]	; 0x4c
   870f6:	9314      	str	r3, [sp, #80]	; 0x50
   870f8:	9318      	str	r3, [sp, #96]	; 0x60
   870fa:	931b      	str	r3, [sp, #108]	; 0x6c
   870fc:	9309      	str	r3, [sp, #36]	; 0x24
   870fe:	9316      	str	r3, [sp, #88]	; 0x58
   87100:	9317      	str	r3, [sp, #92]	; 0x5c
   87102:	9327      	str	r3, [sp, #156]	; 0x9c
   87104:	9326      	str	r3, [sp, #152]	; 0x98
   87106:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8710a:	f89a 3000 	ldrb.w	r3, [sl]
   8710e:	4654      	mov	r4, sl
   87110:	b1eb      	cbz	r3, 8714e <_svfprintf_r+0x92>
   87112:	2b25      	cmp	r3, #37	; 0x25
   87114:	d102      	bne.n	8711c <_svfprintf_r+0x60>
   87116:	e01a      	b.n	8714e <_svfprintf_r+0x92>
   87118:	2b25      	cmp	r3, #37	; 0x25
   8711a:	d003      	beq.n	87124 <_svfprintf_r+0x68>
   8711c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87120:	2b00      	cmp	r3, #0
   87122:	d1f9      	bne.n	87118 <_svfprintf_r+0x5c>
   87124:	eba4 050a 	sub.w	r5, r4, sl
   87128:	b18d      	cbz	r5, 8714e <_svfprintf_r+0x92>
   8712a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8712c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8712e:	3301      	adds	r3, #1
   87130:	442a      	add	r2, r5
   87132:	2b07      	cmp	r3, #7
   87134:	f8c8 a000 	str.w	sl, [r8]
   87138:	f8c8 5004 	str.w	r5, [r8, #4]
   8713c:	9227      	str	r2, [sp, #156]	; 0x9c
   8713e:	9326      	str	r3, [sp, #152]	; 0x98
   87140:	f300 808a 	bgt.w	87258 <_svfprintf_r+0x19c>
   87144:	f108 0808 	add.w	r8, r8, #8
   87148:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8714a:	442b      	add	r3, r5
   8714c:	9309      	str	r3, [sp, #36]	; 0x24
   8714e:	7823      	ldrb	r3, [r4, #0]
   87150:	2b00      	cmp	r3, #0
   87152:	f000 8089 	beq.w	87268 <_svfprintf_r+0x1ac>
   87156:	2300      	movs	r3, #0
   87158:	f04f 30ff 	mov.w	r0, #4294967295
   8715c:	461a      	mov	r2, r3
   8715e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87162:	4619      	mov	r1, r3
   87164:	930d      	str	r3, [sp, #52]	; 0x34
   87166:	469b      	mov	fp, r3
   87168:	7863      	ldrb	r3, [r4, #1]
   8716a:	f104 0a01 	add.w	sl, r4, #1
   8716e:	900a      	str	r0, [sp, #40]	; 0x28
   87170:	f10a 0a01 	add.w	sl, sl, #1
   87174:	f1a3 0020 	sub.w	r0, r3, #32
   87178:	2858      	cmp	r0, #88	; 0x58
   8717a:	f200 83b7 	bhi.w	878ec <_svfprintf_r+0x830>
   8717e:	e8df f010 	tbh	[pc, r0, lsl #1]
   87182:	034c      	.short	0x034c
   87184:	03b503b5 	.word	0x03b503b5
   87188:	03b50354 	.word	0x03b50354
   8718c:	03b503b5 	.word	0x03b503b5
   87190:	03b503b5 	.word	0x03b503b5
   87194:	005903b5 	.word	0x005903b5
   87198:	03b50359 	.word	0x03b50359
   8719c:	02140066 	.word	0x02140066
   871a0:	022f03b5 	.word	0x022f03b5
   871a4:	03a503a5 	.word	0x03a503a5
   871a8:	03a503a5 	.word	0x03a503a5
   871ac:	03a503a5 	.word	0x03a503a5
   871b0:	03a503a5 	.word	0x03a503a5
   871b4:	03b503a5 	.word	0x03b503a5
   871b8:	03b503b5 	.word	0x03b503b5
   871bc:	03b503b5 	.word	0x03b503b5
   871c0:	03b503b5 	.word	0x03b503b5
   871c4:	03b503b5 	.word	0x03b503b5
   871c8:	028b03b5 	.word	0x028b03b5
   871cc:	03b502d3 	.word	0x03b502d3
   871d0:	03b502d3 	.word	0x03b502d3
   871d4:	03b503b5 	.word	0x03b503b5
   871d8:	031b03b5 	.word	0x031b03b5
   871dc:	03b503b5 	.word	0x03b503b5
   871e0:	03b50320 	.word	0x03b50320
   871e4:	03b503b5 	.word	0x03b503b5
   871e8:	03b503b5 	.word	0x03b503b5
   871ec:	03b50234 	.word	0x03b50234
   871f0:	024b03b5 	.word	0x024b03b5
   871f4:	03b503b5 	.word	0x03b503b5
   871f8:	03b503b5 	.word	0x03b503b5
   871fc:	03b503b5 	.word	0x03b503b5
   87200:	03b503b5 	.word	0x03b503b5
   87204:	03b503b5 	.word	0x03b503b5
   87208:	039e0276 	.word	0x039e0276
   8720c:	02d302d3 	.word	0x02d302d3
   87210:	036302d3 	.word	0x036302d3
   87214:	03b5039e 	.word	0x03b5039e
   87218:	036803b5 	.word	0x036803b5
   8721c:	037503b5 	.word	0x037503b5
   87220:	038c01dd 	.word	0x038c01dd
   87224:	03b5035e 	.word	0x03b5035e
   87228:	03b501f2 	.word	0x03b501f2
   8722c:	03b50087 	.word	0x03b50087
   87230:	033203b5 	.word	0x033203b5
   87234:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87236:	6823      	ldr	r3, [r4, #0]
   87238:	4618      	mov	r0, r3
   8723a:	930d      	str	r3, [sp, #52]	; 0x34
   8723c:	4623      	mov	r3, r4
   8723e:	2800      	cmp	r0, #0
   87240:	f103 0304 	add.w	r3, r3, #4
   87244:	930f      	str	r3, [sp, #60]	; 0x3c
   87246:	da04      	bge.n	87252 <_svfprintf_r+0x196>
   87248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8724a:	425b      	negs	r3, r3
   8724c:	930d      	str	r3, [sp, #52]	; 0x34
   8724e:	f04b 0b04 	orr.w	fp, fp, #4
   87252:	f89a 3000 	ldrb.w	r3, [sl]
   87256:	e78b      	b.n	87170 <_svfprintf_r+0xb4>
   87258:	aa25      	add	r2, sp, #148	; 0x94
   8725a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8725c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8725e:	f004 fe5d 	bl	8bf1c <__ssprint_r>
   87262:	b940      	cbnz	r0, 87276 <_svfprintf_r+0x1ba>
   87264:	46c8      	mov	r8, r9
   87266:	e76f      	b.n	87148 <_svfprintf_r+0x8c>
   87268:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8726a:	b123      	cbz	r3, 87276 <_svfprintf_r+0x1ba>
   8726c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8726e:	aa25      	add	r2, sp, #148	; 0x94
   87270:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87272:	f004 fe53 	bl	8bf1c <__ssprint_r>
   87276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87278:	899b      	ldrh	r3, [r3, #12]
   8727a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87280:	bf18      	it	ne
   87282:	f04f 33ff 	movne.w	r3, #4294967295
   87286:	9309      	str	r3, [sp, #36]	; 0x24
   87288:	9809      	ldr	r0, [sp, #36]	; 0x24
   8728a:	b043      	add	sp, #268	; 0x10c
   8728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87290:	f01b 0f20 	tst.w	fp, #32
   87294:	9311      	str	r3, [sp, #68]	; 0x44
   87296:	f040 81af 	bne.w	875f8 <_svfprintf_r+0x53c>
   8729a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8729c:	f01b 0f10 	tst.w	fp, #16
   872a0:	4613      	mov	r3, r2
   872a2:	f040 859a 	bne.w	87dda <_svfprintf_r+0xd1e>
   872a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   872aa:	f000 8596 	beq.w	87dda <_svfprintf_r+0xd1e>
   872ae:	2500      	movs	r5, #0
   872b0:	2301      	movs	r3, #1
   872b2:	8814      	ldrh	r4, [r2, #0]
   872b4:	3204      	adds	r2, #4
   872b6:	920f      	str	r2, [sp, #60]	; 0x3c
   872b8:	2200      	movs	r2, #0
   872ba:	4617      	mov	r7, r2
   872bc:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   872c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   872c2:	1c4a      	adds	r2, r1, #1
   872c4:	f000 8210 	beq.w	876e8 <_svfprintf_r+0x62c>
   872c8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   872cc:	9207      	str	r2, [sp, #28]
   872ce:	ea54 0205 	orrs.w	r2, r4, r5
   872d2:	f040 820f 	bne.w	876f4 <_svfprintf_r+0x638>
   872d6:	2900      	cmp	r1, #0
   872d8:	f040 8431 	bne.w	87b3e <_svfprintf_r+0xa82>
   872dc:	2b00      	cmp	r3, #0
   872de:	f040 8539 	bne.w	87d54 <_svfprintf_r+0xc98>
   872e2:	f01b 0301 	ands.w	r3, fp, #1
   872e6:	930e      	str	r3, [sp, #56]	; 0x38
   872e8:	f000 8662 	beq.w	87fb0 <_svfprintf_r+0xef4>
   872ec:	2330      	movs	r3, #48	; 0x30
   872ee:	ae42      	add	r6, sp, #264	; 0x108
   872f0:	f806 3d41 	strb.w	r3, [r6, #-65]!
   872f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   872f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   872f8:	4293      	cmp	r3, r2
   872fa:	bfb8      	it	lt
   872fc:	4613      	movlt	r3, r2
   872fe:	9308      	str	r3, [sp, #32]
   87300:	2300      	movs	r3, #0
   87302:	9312      	str	r3, [sp, #72]	; 0x48
   87304:	b117      	cbz	r7, 8730c <_svfprintf_r+0x250>
   87306:	9b08      	ldr	r3, [sp, #32]
   87308:	3301      	adds	r3, #1
   8730a:	9308      	str	r3, [sp, #32]
   8730c:	9b07      	ldr	r3, [sp, #28]
   8730e:	f013 0302 	ands.w	r3, r3, #2
   87312:	9310      	str	r3, [sp, #64]	; 0x40
   87314:	d002      	beq.n	8731c <_svfprintf_r+0x260>
   87316:	9b08      	ldr	r3, [sp, #32]
   87318:	3302      	adds	r3, #2
   8731a:	9308      	str	r3, [sp, #32]
   8731c:	9b07      	ldr	r3, [sp, #28]
   8731e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   87322:	f040 8310 	bne.w	87946 <_svfprintf_r+0x88a>
   87326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87328:	9a08      	ldr	r2, [sp, #32]
   8732a:	eba3 0b02 	sub.w	fp, r3, r2
   8732e:	f1bb 0f00 	cmp.w	fp, #0
   87332:	f340 8308 	ble.w	87946 <_svfprintf_r+0x88a>
   87336:	f1bb 0f10 	cmp.w	fp, #16
   8733a:	f340 87b2 	ble.w	882a2 <_svfprintf_r+0x11e6>
   8733e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87340:	4643      	mov	r3, r8
   87342:	4621      	mov	r1, r4
   87344:	46a8      	mov	r8, r5
   87346:	2710      	movs	r7, #16
   87348:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8734a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8734c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8734e:	e006      	b.n	8735e <_svfprintf_r+0x2a2>
   87350:	f1ab 0b10 	sub.w	fp, fp, #16
   87354:	f1bb 0f10 	cmp.w	fp, #16
   87358:	f103 0308 	add.w	r3, r3, #8
   8735c:	dd18      	ble.n	87390 <_svfprintf_r+0x2d4>
   8735e:	3201      	adds	r2, #1
   87360:	48ab      	ldr	r0, [pc, #684]	; (87610 <_svfprintf_r+0x554>)
   87362:	3110      	adds	r1, #16
   87364:	2a07      	cmp	r2, #7
   87366:	9127      	str	r1, [sp, #156]	; 0x9c
   87368:	9226      	str	r2, [sp, #152]	; 0x98
   8736a:	e883 0081 	stmia.w	r3, {r0, r7}
   8736e:	ddef      	ble.n	87350 <_svfprintf_r+0x294>
   87370:	aa25      	add	r2, sp, #148	; 0x94
   87372:	4629      	mov	r1, r5
   87374:	4620      	mov	r0, r4
   87376:	f004 fdd1 	bl	8bf1c <__ssprint_r>
   8737a:	2800      	cmp	r0, #0
   8737c:	f47f af7b 	bne.w	87276 <_svfprintf_r+0x1ba>
   87380:	f1ab 0b10 	sub.w	fp, fp, #16
   87384:	f1bb 0f10 	cmp.w	fp, #16
   87388:	464b      	mov	r3, r9
   8738a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8738c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8738e:	dce6      	bgt.n	8735e <_svfprintf_r+0x2a2>
   87390:	4645      	mov	r5, r8
   87392:	460c      	mov	r4, r1
   87394:	4698      	mov	r8, r3
   87396:	3201      	adds	r2, #1
   87398:	4b9d      	ldr	r3, [pc, #628]	; (87610 <_svfprintf_r+0x554>)
   8739a:	445c      	add	r4, fp
   8739c:	2a07      	cmp	r2, #7
   8739e:	9427      	str	r4, [sp, #156]	; 0x9c
   873a0:	9226      	str	r2, [sp, #152]	; 0x98
   873a2:	e888 0808 	stmia.w	r8, {r3, fp}
   873a6:	f300 82c3 	bgt.w	87930 <_svfprintf_r+0x874>
   873aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   873ae:	f108 0808 	add.w	r8, r8, #8
   873b2:	b187      	cbz	r7, 873d6 <_svfprintf_r+0x31a>
   873b4:	2101      	movs	r1, #1
   873b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   873b8:	440c      	add	r4, r1
   873ba:	440b      	add	r3, r1
   873bc:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   873c0:	2b07      	cmp	r3, #7
   873c2:	9427      	str	r4, [sp, #156]	; 0x9c
   873c4:	9326      	str	r3, [sp, #152]	; 0x98
   873c6:	f8c8 1004 	str.w	r1, [r8, #4]
   873ca:	f8c8 2000 	str.w	r2, [r8]
   873ce:	f300 83cd 	bgt.w	87b6c <_svfprintf_r+0xab0>
   873d2:	f108 0808 	add.w	r8, r8, #8
   873d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   873d8:	b17b      	cbz	r3, 873fa <_svfprintf_r+0x33e>
   873da:	2102      	movs	r1, #2
   873dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   873de:	440c      	add	r4, r1
   873e0:	3301      	adds	r3, #1
   873e2:	aa1e      	add	r2, sp, #120	; 0x78
   873e4:	2b07      	cmp	r3, #7
   873e6:	9427      	str	r4, [sp, #156]	; 0x9c
   873e8:	9326      	str	r3, [sp, #152]	; 0x98
   873ea:	f8c8 1004 	str.w	r1, [r8, #4]
   873ee:	f8c8 2000 	str.w	r2, [r8]
   873f2:	f300 8411 	bgt.w	87c18 <_svfprintf_r+0xb5c>
   873f6:	f108 0808 	add.w	r8, r8, #8
   873fa:	2d80      	cmp	r5, #128	; 0x80
   873fc:	f000 8304 	beq.w	87a08 <_svfprintf_r+0x94c>
   87400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87404:	1a9f      	subs	r7, r3, r2
   87406:	2f00      	cmp	r7, #0
   87408:	dd37      	ble.n	8747a <_svfprintf_r+0x3be>
   8740a:	2f10      	cmp	r7, #16
   8740c:	f340 8679 	ble.w	88102 <_svfprintf_r+0x1046>
   87410:	4d80      	ldr	r5, [pc, #512]	; (87614 <_svfprintf_r+0x558>)
   87412:	4642      	mov	r2, r8
   87414:	4621      	mov	r1, r4
   87416:	46b0      	mov	r8, r6
   87418:	f04f 0b10 	mov.w	fp, #16
   8741c:	462e      	mov	r6, r5
   8741e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87420:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87422:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87424:	e004      	b.n	87430 <_svfprintf_r+0x374>
   87426:	3f10      	subs	r7, #16
   87428:	2f10      	cmp	r7, #16
   8742a:	f102 0208 	add.w	r2, r2, #8
   8742e:	dd15      	ble.n	8745c <_svfprintf_r+0x3a0>
   87430:	3301      	adds	r3, #1
   87432:	3110      	adds	r1, #16
   87434:	2b07      	cmp	r3, #7
   87436:	9127      	str	r1, [sp, #156]	; 0x9c
   87438:	9326      	str	r3, [sp, #152]	; 0x98
   8743a:	e882 0840 	stmia.w	r2, {r6, fp}
   8743e:	ddf2      	ble.n	87426 <_svfprintf_r+0x36a>
   87440:	aa25      	add	r2, sp, #148	; 0x94
   87442:	4629      	mov	r1, r5
   87444:	4620      	mov	r0, r4
   87446:	f004 fd69 	bl	8bf1c <__ssprint_r>
   8744a:	2800      	cmp	r0, #0
   8744c:	f47f af13 	bne.w	87276 <_svfprintf_r+0x1ba>
   87450:	3f10      	subs	r7, #16
   87452:	2f10      	cmp	r7, #16
   87454:	464a      	mov	r2, r9
   87456:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87458:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8745a:	dce9      	bgt.n	87430 <_svfprintf_r+0x374>
   8745c:	4635      	mov	r5, r6
   8745e:	460c      	mov	r4, r1
   87460:	4646      	mov	r6, r8
   87462:	4690      	mov	r8, r2
   87464:	3301      	adds	r3, #1
   87466:	443c      	add	r4, r7
   87468:	2b07      	cmp	r3, #7
   8746a:	9427      	str	r4, [sp, #156]	; 0x9c
   8746c:	9326      	str	r3, [sp, #152]	; 0x98
   8746e:	e888 00a0 	stmia.w	r8, {r5, r7}
   87472:	f300 8370 	bgt.w	87b56 <_svfprintf_r+0xa9a>
   87476:	f108 0808 	add.w	r8, r8, #8
   8747a:	9b07      	ldr	r3, [sp, #28]
   8747c:	05df      	lsls	r7, r3, #23
   8747e:	f100 8264 	bmi.w	8794a <_svfprintf_r+0x88e>
   87482:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87484:	990e      	ldr	r1, [sp, #56]	; 0x38
   87486:	3301      	adds	r3, #1
   87488:	440c      	add	r4, r1
   8748a:	2b07      	cmp	r3, #7
   8748c:	9427      	str	r4, [sp, #156]	; 0x9c
   8748e:	f8c8 6000 	str.w	r6, [r8]
   87492:	f8c8 1004 	str.w	r1, [r8, #4]
   87496:	9326      	str	r3, [sp, #152]	; 0x98
   87498:	f300 83b3 	bgt.w	87c02 <_svfprintf_r+0xb46>
   8749c:	f108 0808 	add.w	r8, r8, #8
   874a0:	9b07      	ldr	r3, [sp, #28]
   874a2:	075b      	lsls	r3, r3, #29
   874a4:	d53b      	bpl.n	8751e <_svfprintf_r+0x462>
   874a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   874a8:	9a08      	ldr	r2, [sp, #32]
   874aa:	1a9d      	subs	r5, r3, r2
   874ac:	2d00      	cmp	r5, #0
   874ae:	dd36      	ble.n	8751e <_svfprintf_r+0x462>
   874b0:	2d10      	cmp	r5, #16
   874b2:	f340 8721 	ble.w	882f8 <_svfprintf_r+0x123c>
   874b6:	2610      	movs	r6, #16
   874b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   874ba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   874bc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   874c0:	e004      	b.n	874cc <_svfprintf_r+0x410>
   874c2:	3d10      	subs	r5, #16
   874c4:	2d10      	cmp	r5, #16
   874c6:	f108 0808 	add.w	r8, r8, #8
   874ca:	dd16      	ble.n	874fa <_svfprintf_r+0x43e>
   874cc:	3301      	adds	r3, #1
   874ce:	4a50      	ldr	r2, [pc, #320]	; (87610 <_svfprintf_r+0x554>)
   874d0:	3410      	adds	r4, #16
   874d2:	2b07      	cmp	r3, #7
   874d4:	9427      	str	r4, [sp, #156]	; 0x9c
   874d6:	9326      	str	r3, [sp, #152]	; 0x98
   874d8:	e888 0044 	stmia.w	r8, {r2, r6}
   874dc:	ddf1      	ble.n	874c2 <_svfprintf_r+0x406>
   874de:	aa25      	add	r2, sp, #148	; 0x94
   874e0:	4659      	mov	r1, fp
   874e2:	4638      	mov	r0, r7
   874e4:	f004 fd1a 	bl	8bf1c <__ssprint_r>
   874e8:	2800      	cmp	r0, #0
   874ea:	f47f aec4 	bne.w	87276 <_svfprintf_r+0x1ba>
   874ee:	3d10      	subs	r5, #16
   874f0:	2d10      	cmp	r5, #16
   874f2:	46c8      	mov	r8, r9
   874f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   874f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   874f8:	dce8      	bgt.n	874cc <_svfprintf_r+0x410>
   874fa:	3301      	adds	r3, #1
   874fc:	4a44      	ldr	r2, [pc, #272]	; (87610 <_svfprintf_r+0x554>)
   874fe:	442c      	add	r4, r5
   87500:	2b07      	cmp	r3, #7
   87502:	9427      	str	r4, [sp, #156]	; 0x9c
   87504:	9326      	str	r3, [sp, #152]	; 0x98
   87506:	e888 0024 	stmia.w	r8, {r2, r5}
   8750a:	dd08      	ble.n	8751e <_svfprintf_r+0x462>
   8750c:	aa25      	add	r2, sp, #148	; 0x94
   8750e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87510:	980c      	ldr	r0, [sp, #48]	; 0x30
   87512:	f004 fd03 	bl	8bf1c <__ssprint_r>
   87516:	2800      	cmp	r0, #0
   87518:	f47f aead 	bne.w	87276 <_svfprintf_r+0x1ba>
   8751c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87522:	9908      	ldr	r1, [sp, #32]
   87524:	428a      	cmp	r2, r1
   87526:	bfac      	ite	ge
   87528:	189b      	addge	r3, r3, r2
   8752a:	185b      	addlt	r3, r3, r1
   8752c:	9309      	str	r3, [sp, #36]	; 0x24
   8752e:	2c00      	cmp	r4, #0
   87530:	f040 82fb 	bne.w	87b2a <_svfprintf_r+0xa6e>
   87534:	2300      	movs	r3, #0
   87536:	46c8      	mov	r8, r9
   87538:	9326      	str	r3, [sp, #152]	; 0x98
   8753a:	e5e6      	b.n	8710a <_svfprintf_r+0x4e>
   8753c:	9311      	str	r3, [sp, #68]	; 0x44
   8753e:	f01b 0320 	ands.w	r3, fp, #32
   87542:	f040 8145 	bne.w	877d0 <_svfprintf_r+0x714>
   87546:	f01b 0210 	ands.w	r2, fp, #16
   8754a:	f040 8466 	bne.w	87e1a <_svfprintf_r+0xd5e>
   8754e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   87552:	f000 8462 	beq.w	87e1a <_svfprintf_r+0xd5e>
   87556:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87558:	4613      	mov	r3, r2
   8755a:	460a      	mov	r2, r1
   8755c:	3204      	adds	r2, #4
   8755e:	880c      	ldrh	r4, [r1, #0]
   87560:	2500      	movs	r5, #0
   87562:	920f      	str	r2, [sp, #60]	; 0x3c
   87564:	e6a8      	b.n	872b8 <_svfprintf_r+0x1fc>
   87566:	2500      	movs	r5, #0
   87568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8756a:	9311      	str	r3, [sp, #68]	; 0x44
   8756c:	6816      	ldr	r6, [r2, #0]
   8756e:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   87572:	1d14      	adds	r4, r2, #4
   87574:	2e00      	cmp	r6, #0
   87576:	f000 86cd 	beq.w	88314 <_svfprintf_r+0x1258>
   8757a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8757c:	1c53      	adds	r3, r2, #1
   8757e:	f000 861b 	beq.w	881b8 <_svfprintf_r+0x10fc>
   87582:	4629      	mov	r1, r5
   87584:	4630      	mov	r0, r6
   87586:	f003 ff0b 	bl	8b3a0 <memchr>
   8758a:	2800      	cmp	r0, #0
   8758c:	f000 870d 	beq.w	883aa <_svfprintf_r+0x12ee>
   87590:	1b83      	subs	r3, r0, r6
   87592:	950a      	str	r5, [sp, #40]	; 0x28
   87594:	930e      	str	r3, [sp, #56]	; 0x38
   87596:	940f      	str	r4, [sp, #60]	; 0x3c
   87598:	f8cd b01c 	str.w	fp, [sp, #28]
   8759c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   875a0:	9308      	str	r3, [sp, #32]
   875a2:	9512      	str	r5, [sp, #72]	; 0x48
   875a4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   875a8:	e6ac      	b.n	87304 <_svfprintf_r+0x248>
   875aa:	f89a 3000 	ldrb.w	r3, [sl]
   875ae:	f10a 0401 	add.w	r4, sl, #1
   875b2:	2b2a      	cmp	r3, #42	; 0x2a
   875b4:	f000 87c2 	beq.w	8853c <_svfprintf_r+0x1480>
   875b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   875bc:	2809      	cmp	r0, #9
   875be:	46a2      	mov	sl, r4
   875c0:	f200 8718 	bhi.w	883f4 <_svfprintf_r+0x1338>
   875c4:	2300      	movs	r3, #0
   875c6:	461c      	mov	r4, r3
   875c8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   875cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   875d0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   875d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   875d8:	2809      	cmp	r0, #9
   875da:	d9f5      	bls.n	875c8 <_svfprintf_r+0x50c>
   875dc:	940a      	str	r4, [sp, #40]	; 0x28
   875de:	e5c9      	b.n	87174 <_svfprintf_r+0xb8>
   875e0:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   875e4:	f89a 3000 	ldrb.w	r3, [sl]
   875e8:	e5c2      	b.n	87170 <_svfprintf_r+0xb4>
   875ea:	f04b 0b10 	orr.w	fp, fp, #16
   875ee:	f01b 0f20 	tst.w	fp, #32
   875f2:	9311      	str	r3, [sp, #68]	; 0x44
   875f4:	f43f ae51 	beq.w	8729a <_svfprintf_r+0x1de>
   875f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   875fa:	3407      	adds	r4, #7
   875fc:	f024 0307 	bic.w	r3, r4, #7
   87600:	f103 0208 	add.w	r2, r3, #8
   87604:	e9d3 4500 	ldrd	r4, r5, [r3]
   87608:	920f      	str	r2, [sp, #60]	; 0x3c
   8760a:	2301      	movs	r3, #1
   8760c:	e654      	b.n	872b8 <_svfprintf_r+0x1fc>
   8760e:	bf00      	nop
   87610:	0008cea0 	.word	0x0008cea0
   87614:	0008ceb0 	.word	0x0008ceb0
   87618:	9311      	str	r3, [sp, #68]	; 0x44
   8761a:	2a00      	cmp	r2, #0
   8761c:	f040 87ad 	bne.w	8857a <_svfprintf_r+0x14be>
   87620:	4bbe      	ldr	r3, [pc, #760]	; (8791c <_svfprintf_r+0x860>)
   87622:	f01b 0f20 	tst.w	fp, #32
   87626:	9318      	str	r3, [sp, #96]	; 0x60
   87628:	f040 80e7 	bne.w	877fa <_svfprintf_r+0x73e>
   8762c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8762e:	f01b 0f10 	tst.w	fp, #16
   87632:	4613      	mov	r3, r2
   87634:	f040 83d8 	bne.w	87de8 <_svfprintf_r+0xd2c>
   87638:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8763c:	f000 83d4 	beq.w	87de8 <_svfprintf_r+0xd2c>
   87640:	2500      	movs	r5, #0
   87642:	3304      	adds	r3, #4
   87644:	8814      	ldrh	r4, [r2, #0]
   87646:	930f      	str	r3, [sp, #60]	; 0x3c
   87648:	f01b 0f01 	tst.w	fp, #1
   8764c:	f000 80e3 	beq.w	87816 <_svfprintf_r+0x75a>
   87650:	ea54 0305 	orrs.w	r3, r4, r5
   87654:	f000 80df 	beq.w	87816 <_svfprintf_r+0x75a>
   87658:	2330      	movs	r3, #48	; 0x30
   8765a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8765e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   87662:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   87666:	f04b 0b02 	orr.w	fp, fp, #2
   8766a:	2302      	movs	r3, #2
   8766c:	e624      	b.n	872b8 <_svfprintf_r+0x1fc>
   8766e:	2201      	movs	r2, #1
   87670:	9311      	str	r3, [sp, #68]	; 0x44
   87672:	2300      	movs	r3, #0
   87674:	4611      	mov	r1, r2
   87676:	980f      	ldr	r0, [sp, #60]	; 0x3c
   87678:	9208      	str	r2, [sp, #32]
   8767a:	6802      	ldr	r2, [r0, #0]
   8767c:	461f      	mov	r7, r3
   8767e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87682:	930a      	str	r3, [sp, #40]	; 0x28
   87684:	9312      	str	r3, [sp, #72]	; 0x48
   87686:	1d03      	adds	r3, r0, #4
   87688:	f8cd b01c 	str.w	fp, [sp, #28]
   8768c:	910e      	str	r1, [sp, #56]	; 0x38
   8768e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   87692:	930f      	str	r3, [sp, #60]	; 0x3c
   87694:	ae28      	add	r6, sp, #160	; 0xa0
   87696:	e639      	b.n	8730c <_svfprintf_r+0x250>
   87698:	9311      	str	r3, [sp, #68]	; 0x44
   8769a:	2a00      	cmp	r2, #0
   8769c:	f040 8784 	bne.w	885a8 <_svfprintf_r+0x14ec>
   876a0:	f04b 0b10 	orr.w	fp, fp, #16
   876a4:	f01b 0f20 	tst.w	fp, #32
   876a8:	f040 8475 	bne.w	87f96 <_svfprintf_r+0xeda>
   876ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   876ae:	f01b 0f10 	tst.w	fp, #16
   876b2:	4613      	mov	r3, r2
   876b4:	f040 839d 	bne.w	87df2 <_svfprintf_r+0xd36>
   876b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   876bc:	f000 8399 	beq.w	87df2 <_svfprintf_r+0xd36>
   876c0:	f9b2 4000 	ldrsh.w	r4, [r2]
   876c4:	3304      	adds	r3, #4
   876c6:	17e5      	asrs	r5, r4, #31
   876c8:	930f      	str	r3, [sp, #60]	; 0x3c
   876ca:	4622      	mov	r2, r4
   876cc:	462b      	mov	r3, r5
   876ce:	2a00      	cmp	r2, #0
   876d0:	f173 0300 	sbcs.w	r3, r3, #0
   876d4:	f2c0 8398 	blt.w	87e08 <_svfprintf_r+0xd4c>
   876d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   876da:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   876de:	1c4a      	adds	r2, r1, #1
   876e0:	f04f 0301 	mov.w	r3, #1
   876e4:	f47f adf0 	bne.w	872c8 <_svfprintf_r+0x20c>
   876e8:	ea54 0205 	orrs.w	r2, r4, r5
   876ec:	f000 8229 	beq.w	87b42 <_svfprintf_r+0xa86>
   876f0:	f8cd b01c 	str.w	fp, [sp, #28]
   876f4:	2b01      	cmp	r3, #1
   876f6:	f000 830e 	beq.w	87d16 <_svfprintf_r+0xc5a>
   876fa:	2b02      	cmp	r3, #2
   876fc:	f040 829c 	bne.w	87c38 <_svfprintf_r+0xb7c>
   87700:	464e      	mov	r6, r9
   87702:	9818      	ldr	r0, [sp, #96]	; 0x60
   87704:	0923      	lsrs	r3, r4, #4
   87706:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8770a:	0929      	lsrs	r1, r5, #4
   8770c:	f004 020f 	and.w	r2, r4, #15
   87710:	460d      	mov	r5, r1
   87712:	461c      	mov	r4, r3
   87714:	5c83      	ldrb	r3, [r0, r2]
   87716:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8771a:	ea54 0305 	orrs.w	r3, r4, r5
   8771e:	d1f1      	bne.n	87704 <_svfprintf_r+0x648>
   87720:	eba9 0306 	sub.w	r3, r9, r6
   87724:	930e      	str	r3, [sp, #56]	; 0x38
   87726:	e5e5      	b.n	872f4 <_svfprintf_r+0x238>
   87728:	9311      	str	r3, [sp, #68]	; 0x44
   8772a:	2a00      	cmp	r2, #0
   8772c:	f040 8738 	bne.w	885a0 <_svfprintf_r+0x14e4>
   87730:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87732:	f01b 0f08 	tst.w	fp, #8
   87736:	f104 0407 	add.w	r4, r4, #7
   8773a:	f000 84cf 	beq.w	880dc <_svfprintf_r+0x1020>
   8773e:	f024 0307 	bic.w	r3, r4, #7
   87742:	f103 0208 	add.w	r2, r3, #8
   87746:	920f      	str	r2, [sp, #60]	; 0x3c
   87748:	681a      	ldr	r2, [r3, #0]
   8774a:	685b      	ldr	r3, [r3, #4]
   8774c:	9215      	str	r2, [sp, #84]	; 0x54
   8774e:	9314      	str	r3, [sp, #80]	; 0x50
   87750:	9b14      	ldr	r3, [sp, #80]	; 0x50
   87752:	9d15      	ldr	r5, [sp, #84]	; 0x54
   87754:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   87758:	4628      	mov	r0, r5
   8775a:	4621      	mov	r1, r4
   8775c:	f04f 32ff 	mov.w	r2, #4294967295
   87760:	4b6f      	ldr	r3, [pc, #444]	; (87920 <_svfprintf_r+0x864>)
   87762:	f005 faa7 	bl	8ccb4 <__aeabi_dcmpun>
   87766:	2800      	cmp	r0, #0
   87768:	f040 8434 	bne.w	87fd4 <_svfprintf_r+0xf18>
   8776c:	4628      	mov	r0, r5
   8776e:	4621      	mov	r1, r4
   87770:	f04f 32ff 	mov.w	r2, #4294967295
   87774:	4b6a      	ldr	r3, [pc, #424]	; (87920 <_svfprintf_r+0x864>)
   87776:	f005 fa7f 	bl	8cc78 <__aeabi_dcmple>
   8777a:	2800      	cmp	r0, #0
   8777c:	f040 842a 	bne.w	87fd4 <_svfprintf_r+0xf18>
   87780:	a815      	add	r0, sp, #84	; 0x54
   87782:	c80d      	ldmia	r0, {r0, r2, r3}
   87784:	9914      	ldr	r1, [sp, #80]	; 0x50
   87786:	f005 fa6d 	bl	8cc64 <__aeabi_dcmplt>
   8778a:	2800      	cmp	r0, #0
   8778c:	f040 85d4 	bne.w	88338 <_svfprintf_r+0x127c>
   87790:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87794:	2303      	movs	r3, #3
   87796:	461a      	mov	r2, r3
   87798:	9308      	str	r3, [sp, #32]
   8779a:	2300      	movs	r3, #0
   8779c:	4e61      	ldr	r6, [pc, #388]	; (87924 <_svfprintf_r+0x868>)
   8779e:	4619      	mov	r1, r3
   877a0:	930a      	str	r3, [sp, #40]	; 0x28
   877a2:	4b61      	ldr	r3, [pc, #388]	; (87928 <_svfprintf_r+0x86c>)
   877a4:	920e      	str	r2, [sp, #56]	; 0x38
   877a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   877a8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   877ac:	9007      	str	r0, [sp, #28]
   877ae:	9112      	str	r1, [sp, #72]	; 0x48
   877b0:	2a47      	cmp	r2, #71	; 0x47
   877b2:	bfd8      	it	le
   877b4:	461e      	movle	r6, r3
   877b6:	e5a5      	b.n	87304 <_svfprintf_r+0x248>
   877b8:	f04b 0b08 	orr.w	fp, fp, #8
   877bc:	f89a 3000 	ldrb.w	r3, [sl]
   877c0:	e4d6      	b.n	87170 <_svfprintf_r+0xb4>
   877c2:	f04b 0b10 	orr.w	fp, fp, #16
   877c6:	9311      	str	r3, [sp, #68]	; 0x44
   877c8:	f01b 0320 	ands.w	r3, fp, #32
   877cc:	f43f aebb 	beq.w	87546 <_svfprintf_r+0x48a>
   877d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   877d2:	3407      	adds	r4, #7
   877d4:	f024 0307 	bic.w	r3, r4, #7
   877d8:	f103 0208 	add.w	r2, r3, #8
   877dc:	e9d3 4500 	ldrd	r4, r5, [r3]
   877e0:	920f      	str	r2, [sp, #60]	; 0x3c
   877e2:	2300      	movs	r3, #0
   877e4:	e568      	b.n	872b8 <_svfprintf_r+0x1fc>
   877e6:	9311      	str	r3, [sp, #68]	; 0x44
   877e8:	2a00      	cmp	r2, #0
   877ea:	f040 86c2 	bne.w	88572 <_svfprintf_r+0x14b6>
   877ee:	4b4f      	ldr	r3, [pc, #316]	; (8792c <_svfprintf_r+0x870>)
   877f0:	f01b 0f20 	tst.w	fp, #32
   877f4:	9318      	str	r3, [sp, #96]	; 0x60
   877f6:	f43f af19 	beq.w	8762c <_svfprintf_r+0x570>
   877fa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   877fc:	f01b 0f01 	tst.w	fp, #1
   87800:	f104 0407 	add.w	r4, r4, #7
   87804:	f024 0307 	bic.w	r3, r4, #7
   87808:	f103 0208 	add.w	r2, r3, #8
   8780c:	920f      	str	r2, [sp, #60]	; 0x3c
   8780e:	e9d3 4500 	ldrd	r4, r5, [r3]
   87812:	f47f af1d 	bne.w	87650 <_svfprintf_r+0x594>
   87816:	2302      	movs	r3, #2
   87818:	e54e      	b.n	872b8 <_svfprintf_r+0x1fc>
   8781a:	f89a 3000 	ldrb.w	r3, [sl]
   8781e:	2900      	cmp	r1, #0
   87820:	f47f aca6 	bne.w	87170 <_svfprintf_r+0xb4>
   87824:	2201      	movs	r2, #1
   87826:	2120      	movs	r1, #32
   87828:	e4a2      	b.n	87170 <_svfprintf_r+0xb4>
   8782a:	f04b 0b01 	orr.w	fp, fp, #1
   8782e:	f89a 3000 	ldrb.w	r3, [sl]
   87832:	e49d      	b.n	87170 <_svfprintf_r+0xb4>
   87834:	f89a 3000 	ldrb.w	r3, [sl]
   87838:	2201      	movs	r2, #1
   8783a:	212b      	movs	r1, #43	; 0x2b
   8783c:	e498      	b.n	87170 <_svfprintf_r+0xb4>
   8783e:	f04b 0b20 	orr.w	fp, fp, #32
   87842:	f89a 3000 	ldrb.w	r3, [sl]
   87846:	e493      	b.n	87170 <_svfprintf_r+0xb4>
   87848:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   8784c:	f89a 3000 	ldrb.w	r3, [sl]
   87850:	e48e      	b.n	87170 <_svfprintf_r+0xb4>
   87852:	f89a 3000 	ldrb.w	r3, [sl]
   87856:	2b6c      	cmp	r3, #108	; 0x6c
   87858:	bf03      	ittte	eq
   8785a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   8785e:	f04b 0b20 	orreq.w	fp, fp, #32
   87862:	f10a 0a01 	addeq.w	sl, sl, #1
   87866:	f04b 0b10 	orrne.w	fp, fp, #16
   8786a:	e481      	b.n	87170 <_svfprintf_r+0xb4>
   8786c:	2a00      	cmp	r2, #0
   8786e:	f040 867c 	bne.w	8856a <_svfprintf_r+0x14ae>
   87872:	f01b 0f20 	tst.w	fp, #32
   87876:	f040 8452 	bne.w	8811e <_svfprintf_r+0x1062>
   8787a:	f01b 0f10 	tst.w	fp, #16
   8787e:	f040 8438 	bne.w	880f2 <_svfprintf_r+0x1036>
   87882:	f01b 0f40 	tst.w	fp, #64	; 0x40
   87886:	f000 8434 	beq.w	880f2 <_svfprintf_r+0x1036>
   8788a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8788c:	6813      	ldr	r3, [r2, #0]
   8788e:	3204      	adds	r2, #4
   87890:	920f      	str	r2, [sp, #60]	; 0x3c
   87892:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   87896:	801a      	strh	r2, [r3, #0]
   87898:	e437      	b.n	8710a <_svfprintf_r+0x4e>
   8789a:	2378      	movs	r3, #120	; 0x78
   8789c:	2230      	movs	r2, #48	; 0x30
   8789e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   878a0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   878a4:	9311      	str	r3, [sp, #68]	; 0x44
   878a6:	1d03      	adds	r3, r0, #4
   878a8:	930f      	str	r3, [sp, #60]	; 0x3c
   878aa:	4b20      	ldr	r3, [pc, #128]	; (8792c <_svfprintf_r+0x870>)
   878ac:	6804      	ldr	r4, [r0, #0]
   878ae:	9318      	str	r3, [sp, #96]	; 0x60
   878b0:	f04b 0b02 	orr.w	fp, fp, #2
   878b4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   878b8:	2500      	movs	r5, #0
   878ba:	2302      	movs	r3, #2
   878bc:	e4fc      	b.n	872b8 <_svfprintf_r+0x1fc>
   878be:	9311      	str	r3, [sp, #68]	; 0x44
   878c0:	2a00      	cmp	r2, #0
   878c2:	f43f aeef 	beq.w	876a4 <_svfprintf_r+0x5e8>
   878c6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   878ca:	e6eb      	b.n	876a4 <_svfprintf_r+0x5e8>
   878cc:	2000      	movs	r0, #0
   878ce:	4604      	mov	r4, r0
   878d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   878d4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   878d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   878dc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   878e0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   878e4:	2809      	cmp	r0, #9
   878e6:	d9f5      	bls.n	878d4 <_svfprintf_r+0x818>
   878e8:	940d      	str	r4, [sp, #52]	; 0x34
   878ea:	e443      	b.n	87174 <_svfprintf_r+0xb8>
   878ec:	9311      	str	r3, [sp, #68]	; 0x44
   878ee:	2a00      	cmp	r2, #0
   878f0:	f040 864a 	bne.w	88588 <_svfprintf_r+0x14cc>
   878f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   878f6:	2a00      	cmp	r2, #0
   878f8:	f43f acb6 	beq.w	87268 <_svfprintf_r+0x1ac>
   878fc:	2300      	movs	r3, #0
   878fe:	2101      	movs	r1, #1
   87900:	461f      	mov	r7, r3
   87902:	9108      	str	r1, [sp, #32]
   87904:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   87908:	f8cd b01c 	str.w	fp, [sp, #28]
   8790c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   87910:	930a      	str	r3, [sp, #40]	; 0x28
   87912:	9312      	str	r3, [sp, #72]	; 0x48
   87914:	910e      	str	r1, [sp, #56]	; 0x38
   87916:	ae28      	add	r6, sp, #160	; 0xa0
   87918:	e4f8      	b.n	8730c <_svfprintf_r+0x250>
   8791a:	bf00      	nop
   8791c:	0008ce6c 	.word	0x0008ce6c
   87920:	7fefffff 	.word	0x7fefffff
   87924:	0008ce60 	.word	0x0008ce60
   87928:	0008ce5c 	.word	0x0008ce5c
   8792c:	0008ce80 	.word	0x0008ce80
   87930:	aa25      	add	r2, sp, #148	; 0x94
   87932:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87934:	980c      	ldr	r0, [sp, #48]	; 0x30
   87936:	f004 faf1 	bl	8bf1c <__ssprint_r>
   8793a:	2800      	cmp	r0, #0
   8793c:	f47f ac9b 	bne.w	87276 <_svfprintf_r+0x1ba>
   87940:	46c8      	mov	r8, r9
   87942:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   87946:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87948:	e533      	b.n	873b2 <_svfprintf_r+0x2f6>
   8794a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8794c:	2b65      	cmp	r3, #101	; 0x65
   8794e:	f340 809a 	ble.w	87a86 <_svfprintf_r+0x9ca>
   87952:	a815      	add	r0, sp, #84	; 0x54
   87954:	c80d      	ldmia	r0, {r0, r2, r3}
   87956:	9914      	ldr	r1, [sp, #80]	; 0x50
   87958:	f005 f97a 	bl	8cc50 <__aeabi_dcmpeq>
   8795c:	2800      	cmp	r0, #0
   8795e:	f000 8193 	beq.w	87c88 <_svfprintf_r+0xbcc>
   87962:	2101      	movs	r1, #1
   87964:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87966:	4ab5      	ldr	r2, [pc, #724]	; (87c3c <_svfprintf_r+0xb80>)
   87968:	440b      	add	r3, r1
   8796a:	440c      	add	r4, r1
   8796c:	2b07      	cmp	r3, #7
   8796e:	9427      	str	r4, [sp, #156]	; 0x9c
   87970:	9326      	str	r3, [sp, #152]	; 0x98
   87972:	f8c8 1004 	str.w	r1, [r8, #4]
   87976:	f8c8 2000 	str.w	r2, [r8]
   8797a:	f300 83c6 	bgt.w	8810a <_svfprintf_r+0x104e>
   8797e:	f108 0808 	add.w	r8, r8, #8
   87982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   87984:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87986:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87988:	4293      	cmp	r3, r2
   8798a:	db03      	blt.n	87994 <_svfprintf_r+0x8d8>
   8798c:	9b07      	ldr	r3, [sp, #28]
   8798e:	07dd      	lsls	r5, r3, #31
   87990:	f57f ad86 	bpl.w	874a0 <_svfprintf_r+0x3e4>
   87994:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87996:	9919      	ldr	r1, [sp, #100]	; 0x64
   87998:	3301      	adds	r3, #1
   8799a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   8799c:	440c      	add	r4, r1
   8799e:	2b07      	cmp	r3, #7
   879a0:	f8c8 2000 	str.w	r2, [r8]
   879a4:	f8c8 1004 	str.w	r1, [r8, #4]
   879a8:	9427      	str	r4, [sp, #156]	; 0x9c
   879aa:	9326      	str	r3, [sp, #152]	; 0x98
   879ac:	f300 83c4 	bgt.w	88138 <_svfprintf_r+0x107c>
   879b0:	f108 0808 	add.w	r8, r8, #8
   879b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   879b6:	1e5e      	subs	r6, r3, #1
   879b8:	2e00      	cmp	r6, #0
   879ba:	f77f ad71 	ble.w	874a0 <_svfprintf_r+0x3e4>
   879be:	2e10      	cmp	r6, #16
   879c0:	f340 8575 	ble.w	884ae <_svfprintf_r+0x13f2>
   879c4:	4622      	mov	r2, r4
   879c6:	2710      	movs	r7, #16
   879c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   879ca:	4d9d      	ldr	r5, [pc, #628]	; (87c40 <_svfprintf_r+0xb84>)
   879cc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   879d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   879d2:	e005      	b.n	879e0 <_svfprintf_r+0x924>
   879d4:	f108 0808 	add.w	r8, r8, #8
   879d8:	3e10      	subs	r6, #16
   879da:	2e10      	cmp	r6, #16
   879dc:	f340 8225 	ble.w	87e2a <_svfprintf_r+0xd6e>
   879e0:	3301      	adds	r3, #1
   879e2:	3210      	adds	r2, #16
   879e4:	2b07      	cmp	r3, #7
   879e6:	9227      	str	r2, [sp, #156]	; 0x9c
   879e8:	9326      	str	r3, [sp, #152]	; 0x98
   879ea:	e888 00a0 	stmia.w	r8, {r5, r7}
   879ee:	ddf1      	ble.n	879d4 <_svfprintf_r+0x918>
   879f0:	aa25      	add	r2, sp, #148	; 0x94
   879f2:	4621      	mov	r1, r4
   879f4:	4658      	mov	r0, fp
   879f6:	f004 fa91 	bl	8bf1c <__ssprint_r>
   879fa:	2800      	cmp	r0, #0
   879fc:	f47f ac3b 	bne.w	87276 <_svfprintf_r+0x1ba>
   87a00:	46c8      	mov	r8, r9
   87a02:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87a04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87a06:	e7e7      	b.n	879d8 <_svfprintf_r+0x91c>
   87a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87a0a:	9a08      	ldr	r2, [sp, #32]
   87a0c:	1a9f      	subs	r7, r3, r2
   87a0e:	2f00      	cmp	r7, #0
   87a10:	f77f acf6 	ble.w	87400 <_svfprintf_r+0x344>
   87a14:	2f10      	cmp	r7, #16
   87a16:	f340 84a8 	ble.w	8836a <_svfprintf_r+0x12ae>
   87a1a:	4d89      	ldr	r5, [pc, #548]	; (87c40 <_svfprintf_r+0xb84>)
   87a1c:	4642      	mov	r2, r8
   87a1e:	4621      	mov	r1, r4
   87a20:	46b0      	mov	r8, r6
   87a22:	f04f 0b10 	mov.w	fp, #16
   87a26:	462e      	mov	r6, r5
   87a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87a2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87a2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87a2e:	e004      	b.n	87a3a <_svfprintf_r+0x97e>
   87a30:	3f10      	subs	r7, #16
   87a32:	2f10      	cmp	r7, #16
   87a34:	f102 0208 	add.w	r2, r2, #8
   87a38:	dd15      	ble.n	87a66 <_svfprintf_r+0x9aa>
   87a3a:	3301      	adds	r3, #1
   87a3c:	3110      	adds	r1, #16
   87a3e:	2b07      	cmp	r3, #7
   87a40:	9127      	str	r1, [sp, #156]	; 0x9c
   87a42:	9326      	str	r3, [sp, #152]	; 0x98
   87a44:	e882 0840 	stmia.w	r2, {r6, fp}
   87a48:	ddf2      	ble.n	87a30 <_svfprintf_r+0x974>
   87a4a:	aa25      	add	r2, sp, #148	; 0x94
   87a4c:	4629      	mov	r1, r5
   87a4e:	4620      	mov	r0, r4
   87a50:	f004 fa64 	bl	8bf1c <__ssprint_r>
   87a54:	2800      	cmp	r0, #0
   87a56:	f47f ac0e 	bne.w	87276 <_svfprintf_r+0x1ba>
   87a5a:	3f10      	subs	r7, #16
   87a5c:	2f10      	cmp	r7, #16
   87a5e:	464a      	mov	r2, r9
   87a60:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87a64:	dce9      	bgt.n	87a3a <_svfprintf_r+0x97e>
   87a66:	4635      	mov	r5, r6
   87a68:	460c      	mov	r4, r1
   87a6a:	4646      	mov	r6, r8
   87a6c:	4690      	mov	r8, r2
   87a6e:	3301      	adds	r3, #1
   87a70:	443c      	add	r4, r7
   87a72:	2b07      	cmp	r3, #7
   87a74:	9427      	str	r4, [sp, #156]	; 0x9c
   87a76:	9326      	str	r3, [sp, #152]	; 0x98
   87a78:	e888 00a0 	stmia.w	r8, {r5, r7}
   87a7c:	f300 829e 	bgt.w	87fbc <_svfprintf_r+0xf00>
   87a80:	f108 0808 	add.w	r8, r8, #8
   87a84:	e4bc      	b.n	87400 <_svfprintf_r+0x344>
   87a86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87a88:	2b01      	cmp	r3, #1
   87a8a:	f340 824f 	ble.w	87f2c <_svfprintf_r+0xe70>
   87a8e:	2301      	movs	r3, #1
   87a90:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87a92:	441c      	add	r4, r3
   87a94:	441f      	add	r7, r3
   87a96:	2f07      	cmp	r7, #7
   87a98:	9427      	str	r4, [sp, #156]	; 0x9c
   87a9a:	f8c8 6000 	str.w	r6, [r8]
   87a9e:	9726      	str	r7, [sp, #152]	; 0x98
   87aa0:	f8c8 3004 	str.w	r3, [r8, #4]
   87aa4:	f300 825f 	bgt.w	87f66 <_svfprintf_r+0xeaa>
   87aa8:	f108 0808 	add.w	r8, r8, #8
   87aac:	9a19      	ldr	r2, [sp, #100]	; 0x64
   87aae:	3701      	adds	r7, #1
   87ab0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87ab2:	4414      	add	r4, r2
   87ab4:	2f07      	cmp	r7, #7
   87ab6:	9427      	str	r4, [sp, #156]	; 0x9c
   87ab8:	9726      	str	r7, [sp, #152]	; 0x98
   87aba:	f8c8 3000 	str.w	r3, [r8]
   87abe:	f8c8 2004 	str.w	r2, [r8, #4]
   87ac2:	f300 825c 	bgt.w	87f7e <_svfprintf_r+0xec2>
   87ac6:	f108 0808 	add.w	r8, r8, #8
   87aca:	a815      	add	r0, sp, #84	; 0x54
   87acc:	c80d      	ldmia	r0, {r0, r2, r3}
   87ace:	9914      	ldr	r1, [sp, #80]	; 0x50
   87ad0:	f005 f8be 	bl	8cc50 <__aeabi_dcmpeq>
   87ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87ad6:	2800      	cmp	r0, #0
   87ad8:	f040 8141 	bne.w	87d5e <_svfprintf_r+0xca2>
   87adc:	3b01      	subs	r3, #1
   87ade:	3701      	adds	r7, #1
   87ae0:	3601      	adds	r6, #1
   87ae2:	441c      	add	r4, r3
   87ae4:	2f07      	cmp	r7, #7
   87ae6:	f8c8 6000 	str.w	r6, [r8]
   87aea:	9726      	str	r7, [sp, #152]	; 0x98
   87aec:	9427      	str	r4, [sp, #156]	; 0x9c
   87aee:	f8c8 3004 	str.w	r3, [r8, #4]
   87af2:	f300 8166 	bgt.w	87dc2 <_svfprintf_r+0xd06>
   87af6:	f108 0808 	add.w	r8, r8, #8
   87afa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87afc:	3701      	adds	r7, #1
   87afe:	4414      	add	r4, r2
   87b00:	ab21      	add	r3, sp, #132	; 0x84
   87b02:	2f07      	cmp	r7, #7
   87b04:	9427      	str	r4, [sp, #156]	; 0x9c
   87b06:	9726      	str	r7, [sp, #152]	; 0x98
   87b08:	f8c8 2004 	str.w	r2, [r8, #4]
   87b0c:	f8c8 3000 	str.w	r3, [r8]
   87b10:	f77f acc4 	ble.w	8749c <_svfprintf_r+0x3e0>
   87b14:	aa25      	add	r2, sp, #148	; 0x94
   87b16:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b18:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b1a:	f004 f9ff 	bl	8bf1c <__ssprint_r>
   87b1e:	2800      	cmp	r0, #0
   87b20:	f47f aba9 	bne.w	87276 <_svfprintf_r+0x1ba>
   87b24:	46c8      	mov	r8, r9
   87b26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b28:	e4ba      	b.n	874a0 <_svfprintf_r+0x3e4>
   87b2a:	aa25      	add	r2, sp, #148	; 0x94
   87b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b30:	f004 f9f4 	bl	8bf1c <__ssprint_r>
   87b34:	2800      	cmp	r0, #0
   87b36:	f43f acfd 	beq.w	87534 <_svfprintf_r+0x478>
   87b3a:	f7ff bb9c 	b.w	87276 <_svfprintf_r+0x1ba>
   87b3e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87b42:	2b01      	cmp	r3, #1
   87b44:	f000 817e 	beq.w	87e44 <_svfprintf_r+0xd88>
   87b48:	2b02      	cmp	r3, #2
   87b4a:	d171      	bne.n	87c30 <_svfprintf_r+0xb74>
   87b4c:	f8cd b01c 	str.w	fp, [sp, #28]
   87b50:	2400      	movs	r4, #0
   87b52:	2500      	movs	r5, #0
   87b54:	e5d4      	b.n	87700 <_svfprintf_r+0x644>
   87b56:	aa25      	add	r2, sp, #148	; 0x94
   87b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b5c:	f004 f9de 	bl	8bf1c <__ssprint_r>
   87b60:	2800      	cmp	r0, #0
   87b62:	f47f ab88 	bne.w	87276 <_svfprintf_r+0x1ba>
   87b66:	46c8      	mov	r8, r9
   87b68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b6a:	e486      	b.n	8747a <_svfprintf_r+0x3be>
   87b6c:	aa25      	add	r2, sp, #148	; 0x94
   87b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87b70:	980c      	ldr	r0, [sp, #48]	; 0x30
   87b72:	f004 f9d3 	bl	8bf1c <__ssprint_r>
   87b76:	2800      	cmp	r0, #0
   87b78:	f47f ab7d 	bne.w	87276 <_svfprintf_r+0x1ba>
   87b7c:	46c8      	mov	r8, r9
   87b7e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87b80:	e429      	b.n	873d6 <_svfprintf_r+0x31a>
   87b82:	2001      	movs	r0, #1
   87b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87b86:	4a2d      	ldr	r2, [pc, #180]	; (87c3c <_svfprintf_r+0xb80>)
   87b88:	4403      	add	r3, r0
   87b8a:	4404      	add	r4, r0
   87b8c:	2b07      	cmp	r3, #7
   87b8e:	9427      	str	r4, [sp, #156]	; 0x9c
   87b90:	9326      	str	r3, [sp, #152]	; 0x98
   87b92:	f8c8 0004 	str.w	r0, [r8, #4]
   87b96:	f8c8 2000 	str.w	r2, [r8]
   87b9a:	f340 82d8 	ble.w	8814e <_svfprintf_r+0x1092>
   87b9e:	aa25      	add	r2, sp, #148	; 0x94
   87ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87ba2:	980c      	ldr	r0, [sp, #48]	; 0x30
   87ba4:	f004 f9ba 	bl	8bf1c <__ssprint_r>
   87ba8:	2800      	cmp	r0, #0
   87baa:	f47f ab64 	bne.w	87276 <_svfprintf_r+0x1ba>
   87bae:	46c8      	mov	r8, r9
   87bb0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87bb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87bb4:	b929      	cbnz	r1, 87bc2 <_svfprintf_r+0xb06>
   87bb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87bb8:	b91b      	cbnz	r3, 87bc2 <_svfprintf_r+0xb06>
   87bba:	9b07      	ldr	r3, [sp, #28]
   87bbc:	07d8      	lsls	r0, r3, #31
   87bbe:	f57f ac6f 	bpl.w	874a0 <_svfprintf_r+0x3e4>
   87bc2:	9819      	ldr	r0, [sp, #100]	; 0x64
   87bc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87bc6:	4602      	mov	r2, r0
   87bc8:	3301      	adds	r3, #1
   87bca:	4422      	add	r2, r4
   87bcc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   87bce:	2b07      	cmp	r3, #7
   87bd0:	9227      	str	r2, [sp, #156]	; 0x9c
   87bd2:	f8c8 4000 	str.w	r4, [r8]
   87bd6:	f8c8 0004 	str.w	r0, [r8, #4]
   87bda:	9326      	str	r3, [sp, #152]	; 0x98
   87bdc:	f300 8431 	bgt.w	88442 <_svfprintf_r+0x1386>
   87be0:	f108 0808 	add.w	r8, r8, #8
   87be4:	2900      	cmp	r1, #0
   87be6:	f2c0 8409 	blt.w	883fc <_svfprintf_r+0x1340>
   87bea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87bec:	3301      	adds	r3, #1
   87bee:	188c      	adds	r4, r1, r2
   87bf0:	2b07      	cmp	r3, #7
   87bf2:	9427      	str	r4, [sp, #156]	; 0x9c
   87bf4:	9326      	str	r3, [sp, #152]	; 0x98
   87bf6:	f8c8 6000 	str.w	r6, [r8]
   87bfa:	f8c8 1004 	str.w	r1, [r8, #4]
   87bfe:	f77f ac4d 	ble.w	8749c <_svfprintf_r+0x3e0>
   87c02:	aa25      	add	r2, sp, #148	; 0x94
   87c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87c06:	980c      	ldr	r0, [sp, #48]	; 0x30
   87c08:	f004 f988 	bl	8bf1c <__ssprint_r>
   87c0c:	2800      	cmp	r0, #0
   87c0e:	f47f ab32 	bne.w	87276 <_svfprintf_r+0x1ba>
   87c12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87c14:	46c8      	mov	r8, r9
   87c16:	e443      	b.n	874a0 <_svfprintf_r+0x3e4>
   87c18:	aa25      	add	r2, sp, #148	; 0x94
   87c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   87c1e:	f004 f97d 	bl	8bf1c <__ssprint_r>
   87c22:	2800      	cmp	r0, #0
   87c24:	f47f ab27 	bne.w	87276 <_svfprintf_r+0x1ba>
   87c28:	46c8      	mov	r8, r9
   87c2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87c2c:	f7ff bbe5 	b.w	873fa <_svfprintf_r+0x33e>
   87c30:	2400      	movs	r4, #0
   87c32:	2500      	movs	r5, #0
   87c34:	f8cd b01c 	str.w	fp, [sp, #28]
   87c38:	4649      	mov	r1, r9
   87c3a:	e004      	b.n	87c46 <_svfprintf_r+0xb8a>
   87c3c:	0008ce9c 	.word	0x0008ce9c
   87c40:	0008ceb0 	.word	0x0008ceb0
   87c44:	4631      	mov	r1, r6
   87c46:	08e2      	lsrs	r2, r4, #3
   87c48:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   87c4c:	08e8      	lsrs	r0, r5, #3
   87c4e:	f004 0307 	and.w	r3, r4, #7
   87c52:	4605      	mov	r5, r0
   87c54:	4614      	mov	r4, r2
   87c56:	3330      	adds	r3, #48	; 0x30
   87c58:	ea54 0205 	orrs.w	r2, r4, r5
   87c5c:	f801 3c01 	strb.w	r3, [r1, #-1]
   87c60:	f101 36ff 	add.w	r6, r1, #4294967295
   87c64:	d1ee      	bne.n	87c44 <_svfprintf_r+0xb88>
   87c66:	9a07      	ldr	r2, [sp, #28]
   87c68:	07d2      	lsls	r2, r2, #31
   87c6a:	f57f ad59 	bpl.w	87720 <_svfprintf_r+0x664>
   87c6e:	2b30      	cmp	r3, #48	; 0x30
   87c70:	f43f ad56 	beq.w	87720 <_svfprintf_r+0x664>
   87c74:	2330      	movs	r3, #48	; 0x30
   87c76:	3902      	subs	r1, #2
   87c78:	f806 3c01 	strb.w	r3, [r6, #-1]
   87c7c:	eba9 0301 	sub.w	r3, r9, r1
   87c80:	930e      	str	r3, [sp, #56]	; 0x38
   87c82:	460e      	mov	r6, r1
   87c84:	f7ff bb36 	b.w	872f4 <_svfprintf_r+0x238>
   87c88:	991f      	ldr	r1, [sp, #124]	; 0x7c
   87c8a:	2900      	cmp	r1, #0
   87c8c:	f77f af79 	ble.w	87b82 <_svfprintf_r+0xac6>
   87c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87c94:	4293      	cmp	r3, r2
   87c96:	bfa8      	it	ge
   87c98:	4613      	movge	r3, r2
   87c9a:	2b00      	cmp	r3, #0
   87c9c:	461f      	mov	r7, r3
   87c9e:	dd0b      	ble.n	87cb8 <_svfprintf_r+0xbfc>
   87ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ca2:	443c      	add	r4, r7
   87ca4:	3301      	adds	r3, #1
   87ca6:	2b07      	cmp	r3, #7
   87ca8:	9427      	str	r4, [sp, #156]	; 0x9c
   87caa:	e888 00c0 	stmia.w	r8, {r6, r7}
   87cae:	9326      	str	r3, [sp, #152]	; 0x98
   87cb0:	f300 82fb 	bgt.w	882aa <_svfprintf_r+0x11ee>
   87cb4:	f108 0808 	add.w	r8, r8, #8
   87cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87cba:	2f00      	cmp	r7, #0
   87cbc:	bfa8      	it	ge
   87cbe:	1bdb      	subge	r3, r3, r7
   87cc0:	2b00      	cmp	r3, #0
   87cc2:	461f      	mov	r7, r3
   87cc4:	f340 80d7 	ble.w	87e76 <_svfprintf_r+0xdba>
   87cc8:	2b10      	cmp	r3, #16
   87cca:	f340 8434 	ble.w	88536 <_svfprintf_r+0x147a>
   87cce:	4dba      	ldr	r5, [pc, #744]	; (87fb8 <_svfprintf_r+0xefc>)
   87cd0:	4642      	mov	r2, r8
   87cd2:	4621      	mov	r1, r4
   87cd4:	46b0      	mov	r8, r6
   87cd6:	f04f 0b10 	mov.w	fp, #16
   87cda:	462e      	mov	r6, r5
   87cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87cde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87ce0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   87ce2:	e004      	b.n	87cee <_svfprintf_r+0xc32>
   87ce4:	3208      	adds	r2, #8
   87ce6:	3f10      	subs	r7, #16
   87ce8:	2f10      	cmp	r7, #16
   87cea:	f340 80b5 	ble.w	87e58 <_svfprintf_r+0xd9c>
   87cee:	3301      	adds	r3, #1
   87cf0:	3110      	adds	r1, #16
   87cf2:	2b07      	cmp	r3, #7
   87cf4:	9127      	str	r1, [sp, #156]	; 0x9c
   87cf6:	9326      	str	r3, [sp, #152]	; 0x98
   87cf8:	e882 0840 	stmia.w	r2, {r6, fp}
   87cfc:	ddf2      	ble.n	87ce4 <_svfprintf_r+0xc28>
   87cfe:	aa25      	add	r2, sp, #148	; 0x94
   87d00:	4629      	mov	r1, r5
   87d02:	4620      	mov	r0, r4
   87d04:	f004 f90a 	bl	8bf1c <__ssprint_r>
   87d08:	2800      	cmp	r0, #0
   87d0a:	f47f aab4 	bne.w	87276 <_svfprintf_r+0x1ba>
   87d0e:	464a      	mov	r2, r9
   87d10:	9927      	ldr	r1, [sp, #156]	; 0x9c
   87d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d14:	e7e7      	b.n	87ce6 <_svfprintf_r+0xc2a>
   87d16:	2d00      	cmp	r5, #0
   87d18:	bf08      	it	eq
   87d1a:	2c0a      	cmpeq	r4, #10
   87d1c:	f0c0 8090 	bcc.w	87e40 <_svfprintf_r+0xd84>
   87d20:	464e      	mov	r6, r9
   87d22:	4620      	mov	r0, r4
   87d24:	4629      	mov	r1, r5
   87d26:	220a      	movs	r2, #10
   87d28:	2300      	movs	r3, #0
   87d2a:	f7fe fde9 	bl	86900 <__aeabi_uldivmod>
   87d2e:	3230      	adds	r2, #48	; 0x30
   87d30:	f806 2d01 	strb.w	r2, [r6, #-1]!
   87d34:	4620      	mov	r0, r4
   87d36:	4629      	mov	r1, r5
   87d38:	2300      	movs	r3, #0
   87d3a:	220a      	movs	r2, #10
   87d3c:	f7fe fde0 	bl	86900 <__aeabi_uldivmod>
   87d40:	4604      	mov	r4, r0
   87d42:	460d      	mov	r5, r1
   87d44:	ea54 0305 	orrs.w	r3, r4, r5
   87d48:	d1eb      	bne.n	87d22 <_svfprintf_r+0xc66>
   87d4a:	eba9 0306 	sub.w	r3, r9, r6
   87d4e:	930e      	str	r3, [sp, #56]	; 0x38
   87d50:	f7ff bad0 	b.w	872f4 <_svfprintf_r+0x238>
   87d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87d56:	464e      	mov	r6, r9
   87d58:	930e      	str	r3, [sp, #56]	; 0x38
   87d5a:	f7ff bacb 	b.w	872f4 <_svfprintf_r+0x238>
   87d5e:	1e5e      	subs	r6, r3, #1
   87d60:	2e00      	cmp	r6, #0
   87d62:	f77f aeca 	ble.w	87afa <_svfprintf_r+0xa3e>
   87d66:	2e10      	cmp	r6, #16
   87d68:	f340 83e3 	ble.w	88532 <_svfprintf_r+0x1476>
   87d6c:	4622      	mov	r2, r4
   87d6e:	f04f 0b10 	mov.w	fp, #16
   87d72:	4d91      	ldr	r5, [pc, #580]	; (87fb8 <_svfprintf_r+0xefc>)
   87d74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87d76:	e004      	b.n	87d82 <_svfprintf_r+0xcc6>
   87d78:	3e10      	subs	r6, #16
   87d7a:	2e10      	cmp	r6, #16
   87d7c:	f108 0808 	add.w	r8, r8, #8
   87d80:	dd15      	ble.n	87dae <_svfprintf_r+0xcf2>
   87d82:	3701      	adds	r7, #1
   87d84:	3210      	adds	r2, #16
   87d86:	2f07      	cmp	r7, #7
   87d88:	9227      	str	r2, [sp, #156]	; 0x9c
   87d8a:	9726      	str	r7, [sp, #152]	; 0x98
   87d8c:	e888 0820 	stmia.w	r8, {r5, fp}
   87d90:	ddf2      	ble.n	87d78 <_svfprintf_r+0xcbc>
   87d92:	aa25      	add	r2, sp, #148	; 0x94
   87d94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87d96:	4620      	mov	r0, r4
   87d98:	f004 f8c0 	bl	8bf1c <__ssprint_r>
   87d9c:	2800      	cmp	r0, #0
   87d9e:	f47f aa6a 	bne.w	87276 <_svfprintf_r+0x1ba>
   87da2:	3e10      	subs	r6, #16
   87da4:	2e10      	cmp	r6, #16
   87da6:	46c8      	mov	r8, r9
   87da8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87daa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87dac:	dce9      	bgt.n	87d82 <_svfprintf_r+0xcc6>
   87dae:	4614      	mov	r4, r2
   87db0:	3701      	adds	r7, #1
   87db2:	4434      	add	r4, r6
   87db4:	2f07      	cmp	r7, #7
   87db6:	9427      	str	r4, [sp, #156]	; 0x9c
   87db8:	9726      	str	r7, [sp, #152]	; 0x98
   87dba:	e888 0060 	stmia.w	r8, {r5, r6}
   87dbe:	f77f ae9a 	ble.w	87af6 <_svfprintf_r+0xa3a>
   87dc2:	aa25      	add	r2, sp, #148	; 0x94
   87dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   87dc8:	f004 f8a8 	bl	8bf1c <__ssprint_r>
   87dcc:	2800      	cmp	r0, #0
   87dce:	f47f aa52 	bne.w	87276 <_svfprintf_r+0x1ba>
   87dd2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87dd4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87dd6:	46c8      	mov	r8, r9
   87dd8:	e68f      	b.n	87afa <_svfprintf_r+0xa3e>
   87dda:	3204      	adds	r2, #4
   87ddc:	681c      	ldr	r4, [r3, #0]
   87dde:	2500      	movs	r5, #0
   87de0:	2301      	movs	r3, #1
   87de2:	920f      	str	r2, [sp, #60]	; 0x3c
   87de4:	f7ff ba68 	b.w	872b8 <_svfprintf_r+0x1fc>
   87de8:	681c      	ldr	r4, [r3, #0]
   87dea:	3304      	adds	r3, #4
   87dec:	930f      	str	r3, [sp, #60]	; 0x3c
   87dee:	2500      	movs	r5, #0
   87df0:	e42a      	b.n	87648 <_svfprintf_r+0x58c>
   87df2:	681c      	ldr	r4, [r3, #0]
   87df4:	3304      	adds	r3, #4
   87df6:	17e5      	asrs	r5, r4, #31
   87df8:	4622      	mov	r2, r4
   87dfa:	930f      	str	r3, [sp, #60]	; 0x3c
   87dfc:	462b      	mov	r3, r5
   87dfe:	2a00      	cmp	r2, #0
   87e00:	f173 0300 	sbcs.w	r3, r3, #0
   87e04:	f6bf ac68 	bge.w	876d8 <_svfprintf_r+0x61c>
   87e08:	272d      	movs	r7, #45	; 0x2d
   87e0a:	4264      	negs	r4, r4
   87e0c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87e10:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   87e14:	2301      	movs	r3, #1
   87e16:	f7ff ba53 	b.w	872c0 <_svfprintf_r+0x204>
   87e1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87e1c:	2500      	movs	r5, #0
   87e1e:	460a      	mov	r2, r1
   87e20:	3204      	adds	r2, #4
   87e22:	680c      	ldr	r4, [r1, #0]
   87e24:	920f      	str	r2, [sp, #60]	; 0x3c
   87e26:	f7ff ba47 	b.w	872b8 <_svfprintf_r+0x1fc>
   87e2a:	4614      	mov	r4, r2
   87e2c:	3301      	adds	r3, #1
   87e2e:	4434      	add	r4, r6
   87e30:	2b07      	cmp	r3, #7
   87e32:	9427      	str	r4, [sp, #156]	; 0x9c
   87e34:	9326      	str	r3, [sp, #152]	; 0x98
   87e36:	e888 0060 	stmia.w	r8, {r5, r6}
   87e3a:	f77f ab2f 	ble.w	8749c <_svfprintf_r+0x3e0>
   87e3e:	e6e0      	b.n	87c02 <_svfprintf_r+0xb46>
   87e40:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87e44:	2301      	movs	r3, #1
   87e46:	ae42      	add	r6, sp, #264	; 0x108
   87e48:	3430      	adds	r4, #48	; 0x30
   87e4a:	f8cd b01c 	str.w	fp, [sp, #28]
   87e4e:	f806 4d41 	strb.w	r4, [r6, #-65]!
   87e52:	930e      	str	r3, [sp, #56]	; 0x38
   87e54:	f7ff ba4e 	b.w	872f4 <_svfprintf_r+0x238>
   87e58:	4635      	mov	r5, r6
   87e5a:	460c      	mov	r4, r1
   87e5c:	4646      	mov	r6, r8
   87e5e:	4690      	mov	r8, r2
   87e60:	3301      	adds	r3, #1
   87e62:	443c      	add	r4, r7
   87e64:	2b07      	cmp	r3, #7
   87e66:	9427      	str	r4, [sp, #156]	; 0x9c
   87e68:	9326      	str	r3, [sp, #152]	; 0x98
   87e6a:	e888 00a0 	stmia.w	r8, {r5, r7}
   87e6e:	f300 8246 	bgt.w	882fe <_svfprintf_r+0x1242>
   87e72:	f108 0808 	add.w	r8, r8, #8
   87e76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   87e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87e7a:	429a      	cmp	r2, r3
   87e7c:	db45      	blt.n	87f0a <_svfprintf_r+0xe4e>
   87e7e:	9b07      	ldr	r3, [sp, #28]
   87e80:	07d9      	lsls	r1, r3, #31
   87e82:	d442      	bmi.n	87f0a <_svfprintf_r+0xe4e>
   87e84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87e86:	9812      	ldr	r0, [sp, #72]	; 0x48
   87e88:	1a9a      	subs	r2, r3, r2
   87e8a:	1a1d      	subs	r5, r3, r0
   87e8c:	4295      	cmp	r5, r2
   87e8e:	bfa8      	it	ge
   87e90:	4615      	movge	r5, r2
   87e92:	2d00      	cmp	r5, #0
   87e94:	dd0e      	ble.n	87eb4 <_svfprintf_r+0xdf8>
   87e96:	9926      	ldr	r1, [sp, #152]	; 0x98
   87e98:	4406      	add	r6, r0
   87e9a:	3101      	adds	r1, #1
   87e9c:	442c      	add	r4, r5
   87e9e:	2907      	cmp	r1, #7
   87ea0:	f8c8 6000 	str.w	r6, [r8]
   87ea4:	9427      	str	r4, [sp, #156]	; 0x9c
   87ea6:	f8c8 5004 	str.w	r5, [r8, #4]
   87eaa:	9126      	str	r1, [sp, #152]	; 0x98
   87eac:	f300 8216 	bgt.w	882dc <_svfprintf_r+0x1220>
   87eb0:	f108 0808 	add.w	r8, r8, #8
   87eb4:	2d00      	cmp	r5, #0
   87eb6:	bfb4      	ite	lt
   87eb8:	4616      	movlt	r6, r2
   87eba:	1b56      	subge	r6, r2, r5
   87ebc:	2e00      	cmp	r6, #0
   87ebe:	f77f aaef 	ble.w	874a0 <_svfprintf_r+0x3e4>
   87ec2:	2e10      	cmp	r6, #16
   87ec4:	f340 82f3 	ble.w	884ae <_svfprintf_r+0x13f2>
   87ec8:	4622      	mov	r2, r4
   87eca:	2710      	movs	r7, #16
   87ecc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87ece:	4d3a      	ldr	r5, [pc, #232]	; (87fb8 <_svfprintf_r+0xefc>)
   87ed0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87ed4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   87ed6:	e004      	b.n	87ee2 <_svfprintf_r+0xe26>
   87ed8:	f108 0808 	add.w	r8, r8, #8
   87edc:	3e10      	subs	r6, #16
   87ede:	2e10      	cmp	r6, #16
   87ee0:	dda3      	ble.n	87e2a <_svfprintf_r+0xd6e>
   87ee2:	3301      	adds	r3, #1
   87ee4:	3210      	adds	r2, #16
   87ee6:	2b07      	cmp	r3, #7
   87ee8:	9227      	str	r2, [sp, #156]	; 0x9c
   87eea:	9326      	str	r3, [sp, #152]	; 0x98
   87eec:	e888 00a0 	stmia.w	r8, {r5, r7}
   87ef0:	ddf2      	ble.n	87ed8 <_svfprintf_r+0xe1c>
   87ef2:	aa25      	add	r2, sp, #148	; 0x94
   87ef4:	4621      	mov	r1, r4
   87ef6:	4658      	mov	r0, fp
   87ef8:	f004 f810 	bl	8bf1c <__ssprint_r>
   87efc:	2800      	cmp	r0, #0
   87efe:	f47f a9ba 	bne.w	87276 <_svfprintf_r+0x1ba>
   87f02:	46c8      	mov	r8, r9
   87f04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   87f06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f08:	e7e8      	b.n	87edc <_svfprintf_r+0xe20>
   87f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87f0c:	9819      	ldr	r0, [sp, #100]	; 0x64
   87f0e:	3301      	adds	r3, #1
   87f10:	991a      	ldr	r1, [sp, #104]	; 0x68
   87f12:	4404      	add	r4, r0
   87f14:	2b07      	cmp	r3, #7
   87f16:	9427      	str	r4, [sp, #156]	; 0x9c
   87f18:	f8c8 1000 	str.w	r1, [r8]
   87f1c:	f8c8 0004 	str.w	r0, [r8, #4]
   87f20:	9326      	str	r3, [sp, #152]	; 0x98
   87f22:	f300 81cf 	bgt.w	882c4 <_svfprintf_r+0x1208>
   87f26:	f108 0808 	add.w	r8, r8, #8
   87f2a:	e7ab      	b.n	87e84 <_svfprintf_r+0xdc8>
   87f2c:	9b07      	ldr	r3, [sp, #28]
   87f2e:	07da      	lsls	r2, r3, #31
   87f30:	f53f adad 	bmi.w	87a8e <_svfprintf_r+0x9d2>
   87f34:	2301      	movs	r3, #1
   87f36:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87f38:	441c      	add	r4, r3
   87f3a:	441f      	add	r7, r3
   87f3c:	2f07      	cmp	r7, #7
   87f3e:	9427      	str	r4, [sp, #156]	; 0x9c
   87f40:	f8c8 6000 	str.w	r6, [r8]
   87f44:	9726      	str	r7, [sp, #152]	; 0x98
   87f46:	f8c8 3004 	str.w	r3, [r8, #4]
   87f4a:	f77f add4 	ble.w	87af6 <_svfprintf_r+0xa3a>
   87f4e:	aa25      	add	r2, sp, #148	; 0x94
   87f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f52:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f54:	f003 ffe2 	bl	8bf1c <__ssprint_r>
   87f58:	2800      	cmp	r0, #0
   87f5a:	f47f a98c 	bne.w	87276 <_svfprintf_r+0x1ba>
   87f5e:	46c8      	mov	r8, r9
   87f60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87f62:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87f64:	e5c9      	b.n	87afa <_svfprintf_r+0xa3e>
   87f66:	aa25      	add	r2, sp, #148	; 0x94
   87f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f6c:	f003 ffd6 	bl	8bf1c <__ssprint_r>
   87f70:	2800      	cmp	r0, #0
   87f72:	f47f a980 	bne.w	87276 <_svfprintf_r+0x1ba>
   87f76:	46c8      	mov	r8, r9
   87f78:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87f7a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87f7c:	e596      	b.n	87aac <_svfprintf_r+0x9f0>
   87f7e:	aa25      	add	r2, sp, #148	; 0x94
   87f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87f82:	980c      	ldr	r0, [sp, #48]	; 0x30
   87f84:	f003 ffca 	bl	8bf1c <__ssprint_r>
   87f88:	2800      	cmp	r0, #0
   87f8a:	f47f a974 	bne.w	87276 <_svfprintf_r+0x1ba>
   87f8e:	46c8      	mov	r8, r9
   87f90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87f92:	9f26      	ldr	r7, [sp, #152]	; 0x98
   87f94:	e599      	b.n	87aca <_svfprintf_r+0xa0e>
   87f96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   87f98:	3407      	adds	r4, #7
   87f9a:	f024 0407 	bic.w	r4, r4, #7
   87f9e:	f104 0108 	add.w	r1, r4, #8
   87fa2:	e9d4 2300 	ldrd	r2, r3, [r4]
   87fa6:	910f      	str	r1, [sp, #60]	; 0x3c
   87fa8:	4614      	mov	r4, r2
   87faa:	461d      	mov	r5, r3
   87fac:	f7ff bb8f 	b.w	876ce <_svfprintf_r+0x612>
   87fb0:	464e      	mov	r6, r9
   87fb2:	f7ff b99f 	b.w	872f4 <_svfprintf_r+0x238>
   87fb6:	bf00      	nop
   87fb8:	0008ceb0 	.word	0x0008ceb0
   87fbc:	aa25      	add	r2, sp, #148	; 0x94
   87fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87fc0:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fc2:	f003 ffab 	bl	8bf1c <__ssprint_r>
   87fc6:	2800      	cmp	r0, #0
   87fc8:	f47f a955 	bne.w	87276 <_svfprintf_r+0x1ba>
   87fcc:	46c8      	mov	r8, r9
   87fce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   87fd0:	f7ff ba16 	b.w	87400 <_svfprintf_r+0x344>
   87fd4:	9c15      	ldr	r4, [sp, #84]	; 0x54
   87fd6:	4622      	mov	r2, r4
   87fd8:	4620      	mov	r0, r4
   87fda:	9c14      	ldr	r4, [sp, #80]	; 0x50
   87fdc:	4623      	mov	r3, r4
   87fde:	4621      	mov	r1, r4
   87fe0:	f004 fe68 	bl	8ccb4 <__aeabi_dcmpun>
   87fe4:	2800      	cmp	r0, #0
   87fe6:	f040 8273 	bne.w	884d0 <_svfprintf_r+0x1414>
   87fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fec:	3301      	adds	r3, #1
   87fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87ff0:	f023 0320 	bic.w	r3, r3, #32
   87ff4:	930e      	str	r3, [sp, #56]	; 0x38
   87ff6:	f000 819c 	beq.w	88332 <_svfprintf_r+0x1276>
   87ffa:	2b47      	cmp	r3, #71	; 0x47
   87ffc:	f000 80d6 	beq.w	881ac <_svfprintf_r+0x10f0>
   88000:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   88004:	9307      	str	r3, [sp, #28]
   88006:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88008:	1e1f      	subs	r7, r3, #0
   8800a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8800c:	9308      	str	r3, [sp, #32]
   8800e:	bfb7      	itett	lt
   88010:	463b      	movlt	r3, r7
   88012:	2300      	movge	r3, #0
   88014:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   88018:	232d      	movlt	r3, #45	; 0x2d
   8801a:	9310      	str	r3, [sp, #64]	; 0x40
   8801c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8801e:	2b66      	cmp	r3, #102	; 0x66
   88020:	f000 8190 	beq.w	88344 <_svfprintf_r+0x1288>
   88024:	2b46      	cmp	r3, #70	; 0x46
   88026:	f000 80a4 	beq.w	88172 <_svfprintf_r+0x10b6>
   8802a:	2002      	movs	r0, #2
   8802c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8802e:	a923      	add	r1, sp, #140	; 0x8c
   88030:	2b45      	cmp	r3, #69	; 0x45
   88032:	bf0a      	itet	eq
   88034:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   88036:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   88038:	1c5d      	addeq	r5, r3, #1
   8803a:	e88d 0021 	stmia.w	sp, {r0, r5}
   8803e:	9104      	str	r1, [sp, #16]
   88040:	a820      	add	r0, sp, #128	; 0x80
   88042:	a91f      	add	r1, sp, #124	; 0x7c
   88044:	463b      	mov	r3, r7
   88046:	9003      	str	r0, [sp, #12]
   88048:	9a08      	ldr	r2, [sp, #32]
   8804a:	9102      	str	r1, [sp, #8]
   8804c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8804e:	f001 fa87 	bl	89560 <_dtoa_r>
   88052:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88054:	4606      	mov	r6, r0
   88056:	2b67      	cmp	r3, #103	; 0x67
   88058:	f040 81ba 	bne.w	883d0 <_svfprintf_r+0x1314>
   8805c:	f01b 0f01 	tst.w	fp, #1
   88060:	f000 8223 	beq.w	884aa <_svfprintf_r+0x13ee>
   88064:	1974      	adds	r4, r6, r5
   88066:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88068:	9808      	ldr	r0, [sp, #32]
   8806a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8806c:	4639      	mov	r1, r7
   8806e:	f004 fdef 	bl	8cc50 <__aeabi_dcmpeq>
   88072:	2800      	cmp	r0, #0
   88074:	f040 8124 	bne.w	882c0 <_svfprintf_r+0x1204>
   88078:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8807a:	42a3      	cmp	r3, r4
   8807c:	d206      	bcs.n	8808c <_svfprintf_r+0xfd0>
   8807e:	2130      	movs	r1, #48	; 0x30
   88080:	1c5a      	adds	r2, r3, #1
   88082:	9223      	str	r2, [sp, #140]	; 0x8c
   88084:	7019      	strb	r1, [r3, #0]
   88086:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88088:	429c      	cmp	r4, r3
   8808a:	d8f9      	bhi.n	88080 <_svfprintf_r+0xfc4>
   8808c:	1b9b      	subs	r3, r3, r6
   8808e:	9313      	str	r3, [sp, #76]	; 0x4c
   88090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88092:	2b47      	cmp	r3, #71	; 0x47
   88094:	f000 80a2 	beq.w	881dc <_svfprintf_r+0x1120>
   88098:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8809a:	2b65      	cmp	r3, #101	; 0x65
   8809c:	f340 81a7 	ble.w	883ee <_svfprintf_r+0x1332>
   880a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   880a2:	2b66      	cmp	r3, #102	; 0x66
   880a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   880a6:	9312      	str	r3, [sp, #72]	; 0x48
   880a8:	f000 8171 	beq.w	8838e <_svfprintf_r+0x12d2>
   880ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   880ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   880b0:	4619      	mov	r1, r3
   880b2:	4291      	cmp	r1, r2
   880b4:	f300 815d 	bgt.w	88372 <_svfprintf_r+0x12b6>
   880b8:	f01b 0f01 	tst.w	fp, #1
   880bc:	f040 81f0 	bne.w	884a0 <_svfprintf_r+0x13e4>
   880c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   880c4:	9308      	str	r3, [sp, #32]
   880c6:	2367      	movs	r3, #103	; 0x67
   880c8:	920e      	str	r2, [sp, #56]	; 0x38
   880ca:	9311      	str	r3, [sp, #68]	; 0x44
   880cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   880ce:	2b00      	cmp	r3, #0
   880d0:	d17d      	bne.n	881ce <_svfprintf_r+0x1112>
   880d2:	930a      	str	r3, [sp, #40]	; 0x28
   880d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   880d8:	f7ff b914 	b.w	87304 <_svfprintf_r+0x248>
   880dc:	f024 0407 	bic.w	r4, r4, #7
   880e0:	6823      	ldr	r3, [r4, #0]
   880e2:	9315      	str	r3, [sp, #84]	; 0x54
   880e4:	6863      	ldr	r3, [r4, #4]
   880e6:	9314      	str	r3, [sp, #80]	; 0x50
   880e8:	f104 0308 	add.w	r3, r4, #8
   880ec:	930f      	str	r3, [sp, #60]	; 0x3c
   880ee:	f7ff bb2f 	b.w	87750 <_svfprintf_r+0x694>
   880f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   880f4:	6813      	ldr	r3, [r2, #0]
   880f6:	3204      	adds	r2, #4
   880f8:	920f      	str	r2, [sp, #60]	; 0x3c
   880fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   880fc:	601a      	str	r2, [r3, #0]
   880fe:	f7ff b804 	b.w	8710a <_svfprintf_r+0x4e>
   88102:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88104:	4daf      	ldr	r5, [pc, #700]	; (883c4 <_svfprintf_r+0x1308>)
   88106:	f7ff b9ad 	b.w	87464 <_svfprintf_r+0x3a8>
   8810a:	aa25      	add	r2, sp, #148	; 0x94
   8810c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8810e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88110:	f003 ff04 	bl	8bf1c <__ssprint_r>
   88114:	2800      	cmp	r0, #0
   88116:	f47f a8ae 	bne.w	87276 <_svfprintf_r+0x1ba>
   8811a:	46c8      	mov	r8, r9
   8811c:	e431      	b.n	87982 <_svfprintf_r+0x8c6>
   8811e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88120:	4613      	mov	r3, r2
   88122:	3304      	adds	r3, #4
   88124:	930f      	str	r3, [sp, #60]	; 0x3c
   88126:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88128:	6811      	ldr	r1, [r2, #0]
   8812a:	17dd      	asrs	r5, r3, #31
   8812c:	461a      	mov	r2, r3
   8812e:	462b      	mov	r3, r5
   88130:	e9c1 2300 	strd	r2, r3, [r1]
   88134:	f7fe bfe9 	b.w	8710a <_svfprintf_r+0x4e>
   88138:	aa25      	add	r2, sp, #148	; 0x94
   8813a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8813c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8813e:	f003 feed 	bl	8bf1c <__ssprint_r>
   88142:	2800      	cmp	r0, #0
   88144:	f47f a897 	bne.w	87276 <_svfprintf_r+0x1ba>
   88148:	46c8      	mov	r8, r9
   8814a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8814c:	e432      	b.n	879b4 <_svfprintf_r+0x8f8>
   8814e:	f108 0808 	add.w	r8, r8, #8
   88152:	e52f      	b.n	87bb4 <_svfprintf_r+0xaf8>
   88154:	2140      	movs	r1, #64	; 0x40
   88156:	980c      	ldr	r0, [sp, #48]	; 0x30
   88158:	f002 fe6a 	bl	8ae30 <_malloc_r>
   8815c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8815e:	6010      	str	r0, [r2, #0]
   88160:	6110      	str	r0, [r2, #16]
   88162:	2800      	cmp	r0, #0
   88164:	f000 8214 	beq.w	88590 <_svfprintf_r+0x14d4>
   88168:	2340      	movs	r3, #64	; 0x40
   8816a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8816c:	6153      	str	r3, [r2, #20]
   8816e:	f7fe bfbc 	b.w	870ea <_svfprintf_r+0x2e>
   88172:	2003      	movs	r0, #3
   88174:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   88176:	a923      	add	r1, sp, #140	; 0x8c
   88178:	e88d 0011 	stmia.w	sp, {r0, r4}
   8817c:	9104      	str	r1, [sp, #16]
   8817e:	a820      	add	r0, sp, #128	; 0x80
   88180:	a91f      	add	r1, sp, #124	; 0x7c
   88182:	9003      	str	r0, [sp, #12]
   88184:	9a08      	ldr	r2, [sp, #32]
   88186:	463b      	mov	r3, r7
   88188:	9102      	str	r1, [sp, #8]
   8818a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8818c:	f001 f9e8 	bl	89560 <_dtoa_r>
   88190:	4625      	mov	r5, r4
   88192:	4606      	mov	r6, r0
   88194:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88196:	1974      	adds	r4, r6, r5
   88198:	2b46      	cmp	r3, #70	; 0x46
   8819a:	f47f af64 	bne.w	88066 <_svfprintf_r+0xfaa>
   8819e:	7833      	ldrb	r3, [r6, #0]
   881a0:	2b30      	cmp	r3, #48	; 0x30
   881a2:	f000 8187 	beq.w	884b4 <_svfprintf_r+0x13f8>
   881a6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   881a8:	442c      	add	r4, r5
   881aa:	e75c      	b.n	88066 <_svfprintf_r+0xfaa>
   881ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   881ae:	2b00      	cmp	r3, #0
   881b0:	bf08      	it	eq
   881b2:	2301      	moveq	r3, #1
   881b4:	930a      	str	r3, [sp, #40]	; 0x28
   881b6:	e723      	b.n	88000 <_svfprintf_r+0xf44>
   881b8:	4630      	mov	r0, r6
   881ba:	950a      	str	r5, [sp, #40]	; 0x28
   881bc:	f7fe ff1e 	bl	86ffc <strlen>
   881c0:	940f      	str	r4, [sp, #60]	; 0x3c
   881c2:	900e      	str	r0, [sp, #56]	; 0x38
   881c4:	f8cd b01c 	str.w	fp, [sp, #28]
   881c8:	4603      	mov	r3, r0
   881ca:	f7ff b9e7 	b.w	8759c <_svfprintf_r+0x4e0>
   881ce:	272d      	movs	r7, #45	; 0x2d
   881d0:	2300      	movs	r3, #0
   881d2:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   881d6:	930a      	str	r3, [sp, #40]	; 0x28
   881d8:	f7ff b895 	b.w	87306 <_svfprintf_r+0x24a>
   881dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   881de:	461a      	mov	r2, r3
   881e0:	9312      	str	r3, [sp, #72]	; 0x48
   881e2:	3303      	adds	r3, #3
   881e4:	db04      	blt.n	881f0 <_svfprintf_r+0x1134>
   881e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   881e8:	4619      	mov	r1, r3
   881ea:	4291      	cmp	r1, r2
   881ec:	f6bf af5e 	bge.w	880ac <_svfprintf_r+0xff0>
   881f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   881f2:	3b02      	subs	r3, #2
   881f4:	9311      	str	r3, [sp, #68]	; 0x44
   881f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   881f8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   881fc:	3b01      	subs	r3, #1
   881fe:	2b00      	cmp	r3, #0
   88200:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   88204:	bfb4      	ite	lt
   88206:	222d      	movlt	r2, #45	; 0x2d
   88208:	222b      	movge	r2, #43	; 0x2b
   8820a:	931f      	str	r3, [sp, #124]	; 0x7c
   8820c:	bfb8      	it	lt
   8820e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   88210:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   88214:	bfb8      	it	lt
   88216:	f1c3 0301 	rsblt	r3, r3, #1
   8821a:	2b09      	cmp	r3, #9
   8821c:	f340 811f 	ble.w	8845e <_svfprintf_r+0x13a2>
   88220:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   88224:	4601      	mov	r1, r0
   88226:	4c68      	ldr	r4, [pc, #416]	; (883c8 <_svfprintf_r+0x130c>)
   88228:	e000      	b.n	8822c <_svfprintf_r+0x1170>
   8822a:	4611      	mov	r1, r2
   8822c:	fb84 5203 	smull	r5, r2, r4, r3
   88230:	17dd      	asrs	r5, r3, #31
   88232:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   88236:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8823a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8823e:	3230      	adds	r2, #48	; 0x30
   88240:	2d09      	cmp	r5, #9
   88242:	f801 2c01 	strb.w	r2, [r1, #-1]
   88246:	462b      	mov	r3, r5
   88248:	f101 32ff 	add.w	r2, r1, #4294967295
   8824c:	dced      	bgt.n	8822a <_svfprintf_r+0x116e>
   8824e:	3330      	adds	r3, #48	; 0x30
   88250:	3902      	subs	r1, #2
   88252:	b2dc      	uxtb	r4, r3
   88254:	4288      	cmp	r0, r1
   88256:	f802 4c01 	strb.w	r4, [r2, #-1]
   8825a:	f240 8192 	bls.w	88582 <_svfprintf_r+0x14c6>
   8825e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   88262:	4613      	mov	r3, r2
   88264:	e001      	b.n	8826a <_svfprintf_r+0x11ae>
   88266:	f813 4b01 	ldrb.w	r4, [r3], #1
   8826a:	4283      	cmp	r3, r0
   8826c:	f801 4b01 	strb.w	r4, [r1], #1
   88270:	d1f9      	bne.n	88266 <_svfprintf_r+0x11aa>
   88272:	3301      	adds	r3, #1
   88274:	1a9b      	subs	r3, r3, r2
   88276:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8827a:	4413      	add	r3, r2
   8827c:	aa21      	add	r2, sp, #132	; 0x84
   8827e:	1a9b      	subs	r3, r3, r2
   88280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88282:	931b      	str	r3, [sp, #108]	; 0x6c
   88284:	2a01      	cmp	r2, #1
   88286:	4413      	add	r3, r2
   88288:	930e      	str	r3, [sp, #56]	; 0x38
   8828a:	f340 8148 	ble.w	8851e <_svfprintf_r+0x1462>
   8828e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88290:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88292:	4413      	add	r3, r2
   88294:	930e      	str	r3, [sp, #56]	; 0x38
   88296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8829a:	9308      	str	r3, [sp, #32]
   8829c:	2300      	movs	r3, #0
   8829e:	9312      	str	r3, [sp, #72]	; 0x48
   882a0:	e714      	b.n	880cc <_svfprintf_r+0x1010>
   882a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   882a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   882a6:	f7ff b876 	b.w	87396 <_svfprintf_r+0x2da>
   882aa:	aa25      	add	r2, sp, #148	; 0x94
   882ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   882ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   882b0:	f003 fe34 	bl	8bf1c <__ssprint_r>
   882b4:	2800      	cmp	r0, #0
   882b6:	f47e afde 	bne.w	87276 <_svfprintf_r+0x1ba>
   882ba:	46c8      	mov	r8, r9
   882bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   882be:	e4fb      	b.n	87cb8 <_svfprintf_r+0xbfc>
   882c0:	4623      	mov	r3, r4
   882c2:	e6e3      	b.n	8808c <_svfprintf_r+0xfd0>
   882c4:	aa25      	add	r2, sp, #148	; 0x94
   882c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   882c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   882ca:	f003 fe27 	bl	8bf1c <__ssprint_r>
   882ce:	2800      	cmp	r0, #0
   882d0:	f47e afd1 	bne.w	87276 <_svfprintf_r+0x1ba>
   882d4:	46c8      	mov	r8, r9
   882d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   882d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   882da:	e5d3      	b.n	87e84 <_svfprintf_r+0xdc8>
   882dc:	aa25      	add	r2, sp, #148	; 0x94
   882de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   882e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   882e2:	f003 fe1b 	bl	8bf1c <__ssprint_r>
   882e6:	2800      	cmp	r0, #0
   882e8:	f47e afc5 	bne.w	87276 <_svfprintf_r+0x1ba>
   882ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   882ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882f0:	46c8      	mov	r8, r9
   882f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   882f4:	1a9a      	subs	r2, r3, r2
   882f6:	e5dd      	b.n	87eb4 <_svfprintf_r+0xdf8>
   882f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   882fa:	f7ff b8fe 	b.w	874fa <_svfprintf_r+0x43e>
   882fe:	aa25      	add	r2, sp, #148	; 0x94
   88300:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88302:	980c      	ldr	r0, [sp, #48]	; 0x30
   88304:	f003 fe0a 	bl	8bf1c <__ssprint_r>
   88308:	2800      	cmp	r0, #0
   8830a:	f47e afb4 	bne.w	87276 <_svfprintf_r+0x1ba>
   8830e:	46c8      	mov	r8, r9
   88310:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   88312:	e5b0      	b.n	87e76 <_svfprintf_r+0xdba>
   88314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88316:	4637      	mov	r7, r6
   88318:	2b06      	cmp	r3, #6
   8831a:	bf28      	it	cs
   8831c:	2306      	movcs	r3, #6
   8831e:	960a      	str	r6, [sp, #40]	; 0x28
   88320:	9612      	str	r6, [sp, #72]	; 0x48
   88322:	9308      	str	r3, [sp, #32]
   88324:	940f      	str	r4, [sp, #60]	; 0x3c
   88326:	f8cd b01c 	str.w	fp, [sp, #28]
   8832a:	930e      	str	r3, [sp, #56]	; 0x38
   8832c:	4e27      	ldr	r6, [pc, #156]	; (883cc <_svfprintf_r+0x1310>)
   8832e:	f7fe bfe9 	b.w	87304 <_svfprintf_r+0x248>
   88332:	2306      	movs	r3, #6
   88334:	930a      	str	r3, [sp, #40]	; 0x28
   88336:	e663      	b.n	88000 <_svfprintf_r+0xf44>
   88338:	232d      	movs	r3, #45	; 0x2d
   8833a:	461f      	mov	r7, r3
   8833c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   88340:	f7ff ba28 	b.w	87794 <_svfprintf_r+0x6d8>
   88344:	2003      	movs	r0, #3
   88346:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   88348:	a923      	add	r1, sp, #140	; 0x8c
   8834a:	e88d 0011 	stmia.w	sp, {r0, r4}
   8834e:	9104      	str	r1, [sp, #16]
   88350:	a820      	add	r0, sp, #128	; 0x80
   88352:	a91f      	add	r1, sp, #124	; 0x7c
   88354:	9003      	str	r0, [sp, #12]
   88356:	9a08      	ldr	r2, [sp, #32]
   88358:	463b      	mov	r3, r7
   8835a:	9102      	str	r1, [sp, #8]
   8835c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8835e:	f001 f8ff 	bl	89560 <_dtoa_r>
   88362:	4625      	mov	r5, r4
   88364:	4606      	mov	r6, r0
   88366:	1904      	adds	r4, r0, r4
   88368:	e719      	b.n	8819e <_svfprintf_r+0x10e2>
   8836a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8836c:	4d15      	ldr	r5, [pc, #84]	; (883c4 <_svfprintf_r+0x1308>)
   8836e:	f7ff bb7e 	b.w	87a6e <_svfprintf_r+0x9b2>
   88372:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88376:	4413      	add	r3, r2
   88378:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8837a:	930e      	str	r3, [sp, #56]	; 0x38
   8837c:	2a00      	cmp	r2, #0
   8837e:	f340 80c7 	ble.w	88510 <_svfprintf_r+0x1454>
   88382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88386:	9308      	str	r3, [sp, #32]
   88388:	2367      	movs	r3, #103	; 0x67
   8838a:	9311      	str	r3, [sp, #68]	; 0x44
   8838c:	e69e      	b.n	880cc <_svfprintf_r+0x1010>
   8838e:	2b00      	cmp	r3, #0
   88390:	f340 80e1 	ble.w	88556 <_svfprintf_r+0x149a>
   88394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88396:	2a00      	cmp	r2, #0
   88398:	f040 80b0 	bne.w	884fc <_svfprintf_r+0x1440>
   8839c:	f01b 0f01 	tst.w	fp, #1
   883a0:	f040 80ac 	bne.w	884fc <_svfprintf_r+0x1440>
   883a4:	9308      	str	r3, [sp, #32]
   883a6:	930e      	str	r3, [sp, #56]	; 0x38
   883a8:	e690      	b.n	880cc <_svfprintf_r+0x1010>
   883aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   883ac:	940f      	str	r4, [sp, #60]	; 0x3c
   883ae:	9308      	str	r3, [sp, #32]
   883b0:	930e      	str	r3, [sp, #56]	; 0x38
   883b2:	900a      	str	r0, [sp, #40]	; 0x28
   883b4:	f8cd b01c 	str.w	fp, [sp, #28]
   883b8:	9012      	str	r0, [sp, #72]	; 0x48
   883ba:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   883be:	f7fe bfa1 	b.w	87304 <_svfprintf_r+0x248>
   883c2:	bf00      	nop
   883c4:	0008ceb0 	.word	0x0008ceb0
   883c8:	66666667 	.word	0x66666667
   883cc:	0008ce94 	.word	0x0008ce94
   883d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   883d2:	2b47      	cmp	r3, #71	; 0x47
   883d4:	f47f ae46 	bne.w	88064 <_svfprintf_r+0xfa8>
   883d8:	f01b 0f01 	tst.w	fp, #1
   883dc:	f47f aeda 	bne.w	88194 <_svfprintf_r+0x10d8>
   883e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   883e2:	1b9b      	subs	r3, r3, r6
   883e4:	9313      	str	r3, [sp, #76]	; 0x4c
   883e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   883e8:	2b47      	cmp	r3, #71	; 0x47
   883ea:	f43f aef7 	beq.w	881dc <_svfprintf_r+0x1120>
   883ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   883f0:	9312      	str	r3, [sp, #72]	; 0x48
   883f2:	e700      	b.n	881f6 <_svfprintf_r+0x113a>
   883f4:	2000      	movs	r0, #0
   883f6:	900a      	str	r0, [sp, #40]	; 0x28
   883f8:	f7fe bebc 	b.w	87174 <_svfprintf_r+0xb8>
   883fc:	424f      	negs	r7, r1
   883fe:	3110      	adds	r1, #16
   88400:	da35      	bge.n	8846e <_svfprintf_r+0x13b2>
   88402:	2410      	movs	r4, #16
   88404:	4d6a      	ldr	r5, [pc, #424]	; (885b0 <_svfprintf_r+0x14f4>)
   88406:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8840a:	e004      	b.n	88416 <_svfprintf_r+0x135a>
   8840c:	f108 0808 	add.w	r8, r8, #8
   88410:	3f10      	subs	r7, #16
   88412:	2f10      	cmp	r7, #16
   88414:	dd2c      	ble.n	88470 <_svfprintf_r+0x13b4>
   88416:	3301      	adds	r3, #1
   88418:	3210      	adds	r2, #16
   8841a:	2b07      	cmp	r3, #7
   8841c:	9227      	str	r2, [sp, #156]	; 0x9c
   8841e:	9326      	str	r3, [sp, #152]	; 0x98
   88420:	f8c8 5000 	str.w	r5, [r8]
   88424:	f8c8 4004 	str.w	r4, [r8, #4]
   88428:	ddf0      	ble.n	8840c <_svfprintf_r+0x1350>
   8842a:	aa25      	add	r2, sp, #148	; 0x94
   8842c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8842e:	4658      	mov	r0, fp
   88430:	f003 fd74 	bl	8bf1c <__ssprint_r>
   88434:	2800      	cmp	r0, #0
   88436:	f47e af1e 	bne.w	87276 <_svfprintf_r+0x1ba>
   8843a:	46c8      	mov	r8, r9
   8843c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8843e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88440:	e7e6      	b.n	88410 <_svfprintf_r+0x1354>
   88442:	aa25      	add	r2, sp, #148	; 0x94
   88444:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88446:	980c      	ldr	r0, [sp, #48]	; 0x30
   88448:	f003 fd68 	bl	8bf1c <__ssprint_r>
   8844c:	2800      	cmp	r0, #0
   8844e:	f47e af12 	bne.w	87276 <_svfprintf_r+0x1ba>
   88452:	46c8      	mov	r8, r9
   88454:	991f      	ldr	r1, [sp, #124]	; 0x7c
   88456:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   88458:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8845a:	f7ff bbc3 	b.w	87be4 <_svfprintf_r+0xb28>
   8845e:	2230      	movs	r2, #48	; 0x30
   88460:	4413      	add	r3, r2
   88462:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   88466:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8846a:	ab22      	add	r3, sp, #136	; 0x88
   8846c:	e706      	b.n	8827c <_svfprintf_r+0x11c0>
   8846e:	4d50      	ldr	r5, [pc, #320]	; (885b0 <_svfprintf_r+0x14f4>)
   88470:	3301      	adds	r3, #1
   88472:	443a      	add	r2, r7
   88474:	2b07      	cmp	r3, #7
   88476:	e888 00a0 	stmia.w	r8, {r5, r7}
   8847a:	9227      	str	r2, [sp, #156]	; 0x9c
   8847c:	9326      	str	r3, [sp, #152]	; 0x98
   8847e:	f108 0808 	add.w	r8, r8, #8
   88482:	f77f abb2 	ble.w	87bea <_svfprintf_r+0xb2e>
   88486:	aa25      	add	r2, sp, #148	; 0x94
   88488:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8848a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8848c:	f003 fd46 	bl	8bf1c <__ssprint_r>
   88490:	2800      	cmp	r0, #0
   88492:	f47e aef0 	bne.w	87276 <_svfprintf_r+0x1ba>
   88496:	46c8      	mov	r8, r9
   88498:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8849a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8849c:	f7ff bba5 	b.w	87bea <_svfprintf_r+0xb2e>
   884a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   884a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   884a4:	4413      	add	r3, r2
   884a6:	930e      	str	r3, [sp, #56]	; 0x38
   884a8:	e76b      	b.n	88382 <_svfprintf_r+0x12c6>
   884aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   884ac:	e5ee      	b.n	8808c <_svfprintf_r+0xfd0>
   884ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   884b0:	4d3f      	ldr	r5, [pc, #252]	; (885b0 <_svfprintf_r+0x14f4>)
   884b2:	e4bb      	b.n	87e2c <_svfprintf_r+0xd70>
   884b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   884b6:	9808      	ldr	r0, [sp, #32]
   884b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   884ba:	4639      	mov	r1, r7
   884bc:	f004 fbc8 	bl	8cc50 <__aeabi_dcmpeq>
   884c0:	2800      	cmp	r0, #0
   884c2:	f47f ae70 	bne.w	881a6 <_svfprintf_r+0x10ea>
   884c6:	f1c5 0501 	rsb	r5, r5, #1
   884ca:	951f      	str	r5, [sp, #124]	; 0x7c
   884cc:	442c      	add	r4, r5
   884ce:	e5ca      	b.n	88066 <_svfprintf_r+0xfaa>
   884d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   884d2:	4e38      	ldr	r6, [pc, #224]	; (885b4 <_svfprintf_r+0x14f8>)
   884d4:	2b00      	cmp	r3, #0
   884d6:	bfbe      	ittt	lt
   884d8:	232d      	movlt	r3, #45	; 0x2d
   884da:	461f      	movlt	r7, r3
   884dc:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   884e0:	f04f 0303 	mov.w	r3, #3
   884e4:	461a      	mov	r2, r3
   884e6:	9308      	str	r3, [sp, #32]
   884e8:	f04f 0300 	mov.w	r3, #0
   884ec:	bfa8      	it	ge
   884ee:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   884f2:	4619      	mov	r1, r3
   884f4:	930a      	str	r3, [sp, #40]	; 0x28
   884f6:	4b30      	ldr	r3, [pc, #192]	; (885b8 <_svfprintf_r+0x14fc>)
   884f8:	f7ff b954 	b.w	877a4 <_svfprintf_r+0x6e8>
   884fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   884fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
   88500:	4413      	add	r3, r2
   88502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88504:	441a      	add	r2, r3
   88506:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8850a:	920e      	str	r2, [sp, #56]	; 0x38
   8850c:	9308      	str	r3, [sp, #32]
   8850e:	e5dd      	b.n	880cc <_svfprintf_r+0x1010>
   88510:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88514:	f1c3 0301 	rsb	r3, r3, #1
   88518:	441a      	add	r2, r3
   8851a:	4613      	mov	r3, r2
   8851c:	e7c3      	b.n	884a6 <_svfprintf_r+0x13ea>
   8851e:	f01b 0301 	ands.w	r3, fp, #1
   88522:	9312      	str	r3, [sp, #72]	; 0x48
   88524:	f47f aeb3 	bne.w	8828e <_svfprintf_r+0x11d2>
   88528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8852a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8852e:	9308      	str	r3, [sp, #32]
   88530:	e5cc      	b.n	880cc <_svfprintf_r+0x1010>
   88532:	4d1f      	ldr	r5, [pc, #124]	; (885b0 <_svfprintf_r+0x14f4>)
   88534:	e43c      	b.n	87db0 <_svfprintf_r+0xcf4>
   88536:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88538:	4d1d      	ldr	r5, [pc, #116]	; (885b0 <_svfprintf_r+0x14f4>)
   8853a:	e491      	b.n	87e60 <_svfprintf_r+0xda4>
   8853c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8853e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   88542:	6828      	ldr	r0, [r5, #0]
   88544:	46a2      	mov	sl, r4
   88546:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8854a:	900a      	str	r0, [sp, #40]	; 0x28
   8854c:	4628      	mov	r0, r5
   8854e:	3004      	adds	r0, #4
   88550:	900f      	str	r0, [sp, #60]	; 0x3c
   88552:	f7fe be0d 	b.w	87170 <_svfprintf_r+0xb4>
   88556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88558:	b913      	cbnz	r3, 88560 <_svfprintf_r+0x14a4>
   8855a:	f01b 0f01 	tst.w	fp, #1
   8855e:	d002      	beq.n	88566 <_svfprintf_r+0x14aa>
   88560:	9b19      	ldr	r3, [sp, #100]	; 0x64
   88562:	3301      	adds	r3, #1
   88564:	e7cd      	b.n	88502 <_svfprintf_r+0x1446>
   88566:	2301      	movs	r3, #1
   88568:	e71c      	b.n	883a4 <_svfprintf_r+0x12e8>
   8856a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8856e:	f7ff b980 	b.w	87872 <_svfprintf_r+0x7b6>
   88572:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   88576:	f7ff b93a 	b.w	877ee <_svfprintf_r+0x732>
   8857a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8857e:	f7ff b84f 	b.w	87620 <_svfprintf_r+0x564>
   88582:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   88586:	e679      	b.n	8827c <_svfprintf_r+0x11c0>
   88588:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8858c:	f7ff b9b2 	b.w	878f4 <_svfprintf_r+0x838>
   88590:	f04f 32ff 	mov.w	r2, #4294967295
   88594:	230c      	movs	r3, #12
   88596:	9209      	str	r2, [sp, #36]	; 0x24
   88598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8859a:	6013      	str	r3, [r2, #0]
   8859c:	f7fe be74 	b.w	87288 <_svfprintf_r+0x1cc>
   885a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   885a4:	f7ff b8c4 	b.w	87730 <_svfprintf_r+0x674>
   885a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   885ac:	f7ff b878 	b.w	876a0 <_svfprintf_r+0x5e4>
   885b0:	0008ceb0 	.word	0x0008ceb0
   885b4:	0008ce68 	.word	0x0008ce68
   885b8:	0008ce64 	.word	0x0008ce64

000885bc <__sprint_r.part.0>:
   885bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   885c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   885c2:	4693      	mov	fp, r2
   885c4:	049c      	lsls	r4, r3, #18
   885c6:	d52f      	bpl.n	88628 <__sprint_r.part.0+0x6c>
   885c8:	6893      	ldr	r3, [r2, #8]
   885ca:	6812      	ldr	r2, [r2, #0]
   885cc:	b353      	cbz	r3, 88624 <__sprint_r.part.0+0x68>
   885ce:	460e      	mov	r6, r1
   885d0:	4607      	mov	r7, r0
   885d2:	f102 0908 	add.w	r9, r2, #8
   885d6:	e919 0420 	ldmdb	r9, {r5, sl}
   885da:	ea5f 089a 	movs.w	r8, sl, lsr #2
   885de:	d017      	beq.n	88610 <__sprint_r.part.0+0x54>
   885e0:	2400      	movs	r4, #0
   885e2:	3d04      	subs	r5, #4
   885e4:	e001      	b.n	885ea <__sprint_r.part.0+0x2e>
   885e6:	45a0      	cmp	r8, r4
   885e8:	d010      	beq.n	8860c <__sprint_r.part.0+0x50>
   885ea:	4632      	mov	r2, r6
   885ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
   885f0:	4638      	mov	r0, r7
   885f2:	f002 f86d 	bl	8a6d0 <_fputwc_r>
   885f6:	1c43      	adds	r3, r0, #1
   885f8:	f104 0401 	add.w	r4, r4, #1
   885fc:	d1f3      	bne.n	885e6 <__sprint_r.part.0+0x2a>
   885fe:	2300      	movs	r3, #0
   88600:	f8cb 3008 	str.w	r3, [fp, #8]
   88604:	f8cb 3004 	str.w	r3, [fp, #4]
   88608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8860c:	f8db 3008 	ldr.w	r3, [fp, #8]
   88610:	f02a 0a03 	bic.w	sl, sl, #3
   88614:	eba3 030a 	sub.w	r3, r3, sl
   88618:	f8cb 3008 	str.w	r3, [fp, #8]
   8861c:	f109 0908 	add.w	r9, r9, #8
   88620:	2b00      	cmp	r3, #0
   88622:	d1d8      	bne.n	885d6 <__sprint_r.part.0+0x1a>
   88624:	2000      	movs	r0, #0
   88626:	e7ea      	b.n	885fe <__sprint_r.part.0+0x42>
   88628:	f002 f9bc 	bl	8a9a4 <__sfvwrite_r>
   8862c:	2300      	movs	r3, #0
   8862e:	f8cb 3008 	str.w	r3, [fp, #8]
   88632:	f8cb 3004 	str.w	r3, [fp, #4]
   88636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8863a:	bf00      	nop

0008863c <_vfiprintf_r>:
   8863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88640:	b0ad      	sub	sp, #180	; 0xb4
   88642:	461d      	mov	r5, r3
   88644:	468b      	mov	fp, r1
   88646:	4690      	mov	r8, r2
   88648:	9307      	str	r3, [sp, #28]
   8864a:	9006      	str	r0, [sp, #24]
   8864c:	b118      	cbz	r0, 88656 <_vfiprintf_r+0x1a>
   8864e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88650:	2b00      	cmp	r3, #0
   88652:	f000 80f3 	beq.w	8883c <_vfiprintf_r+0x200>
   88656:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8865a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8865e:	07df      	lsls	r7, r3, #31
   88660:	b281      	uxth	r1, r0
   88662:	d402      	bmi.n	8866a <_vfiprintf_r+0x2e>
   88664:	058e      	lsls	r6, r1, #22
   88666:	f140 80fc 	bpl.w	88862 <_vfiprintf_r+0x226>
   8866a:	048c      	lsls	r4, r1, #18
   8866c:	d40a      	bmi.n	88684 <_vfiprintf_r+0x48>
   8866e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88672:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   88676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8867a:	f8ab 100c 	strh.w	r1, [fp, #12]
   8867e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   88682:	b289      	uxth	r1, r1
   88684:	0708      	lsls	r0, r1, #28
   88686:	f140 80b3 	bpl.w	887f0 <_vfiprintf_r+0x1b4>
   8868a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8868e:	2b00      	cmp	r3, #0
   88690:	f000 80ae 	beq.w	887f0 <_vfiprintf_r+0x1b4>
   88694:	f001 031a 	and.w	r3, r1, #26
   88698:	2b0a      	cmp	r3, #10
   8869a:	f000 80b5 	beq.w	88808 <_vfiprintf_r+0x1cc>
   8869e:	2300      	movs	r3, #0
   886a0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   886a4:	46d1      	mov	r9, sl
   886a6:	930b      	str	r3, [sp, #44]	; 0x2c
   886a8:	9303      	str	r3, [sp, #12]
   886aa:	9311      	str	r3, [sp, #68]	; 0x44
   886ac:	9310      	str	r3, [sp, #64]	; 0x40
   886ae:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   886b2:	f8cd b010 	str.w	fp, [sp, #16]
   886b6:	f898 3000 	ldrb.w	r3, [r8]
   886ba:	4644      	mov	r4, r8
   886bc:	b1fb      	cbz	r3, 886fe <_vfiprintf_r+0xc2>
   886be:	2b25      	cmp	r3, #37	; 0x25
   886c0:	d102      	bne.n	886c8 <_vfiprintf_r+0x8c>
   886c2:	e01c      	b.n	886fe <_vfiprintf_r+0xc2>
   886c4:	2b25      	cmp	r3, #37	; 0x25
   886c6:	d003      	beq.n	886d0 <_vfiprintf_r+0x94>
   886c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   886cc:	2b00      	cmp	r3, #0
   886ce:	d1f9      	bne.n	886c4 <_vfiprintf_r+0x88>
   886d0:	eba4 0508 	sub.w	r5, r4, r8
   886d4:	b19d      	cbz	r5, 886fe <_vfiprintf_r+0xc2>
   886d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   886d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   886da:	3301      	adds	r3, #1
   886dc:	442a      	add	r2, r5
   886de:	2b07      	cmp	r3, #7
   886e0:	f8c9 8000 	str.w	r8, [r9]
   886e4:	f8c9 5004 	str.w	r5, [r9, #4]
   886e8:	9211      	str	r2, [sp, #68]	; 0x44
   886ea:	9310      	str	r3, [sp, #64]	; 0x40
   886ec:	dd7a      	ble.n	887e4 <_vfiprintf_r+0x1a8>
   886ee:	2a00      	cmp	r2, #0
   886f0:	f040 84b5 	bne.w	8905e <_vfiprintf_r+0xa22>
   886f4:	46d1      	mov	r9, sl
   886f6:	9b03      	ldr	r3, [sp, #12]
   886f8:	9210      	str	r2, [sp, #64]	; 0x40
   886fa:	442b      	add	r3, r5
   886fc:	9303      	str	r3, [sp, #12]
   886fe:	7823      	ldrb	r3, [r4, #0]
   88700:	2b00      	cmp	r3, #0
   88702:	f000 83e5 	beq.w	88ed0 <_vfiprintf_r+0x894>
   88706:	2000      	movs	r0, #0
   88708:	f04f 0300 	mov.w	r3, #0
   8870c:	f104 0801 	add.w	r8, r4, #1
   88710:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   88714:	7862      	ldrb	r2, [r4, #1]
   88716:	4606      	mov	r6, r0
   88718:	4605      	mov	r5, r0
   8871a:	4603      	mov	r3, r0
   8871c:	f04f 34ff 	mov.w	r4, #4294967295
   88720:	f108 0801 	add.w	r8, r8, #1
   88724:	f1a2 0120 	sub.w	r1, r2, #32
   88728:	2958      	cmp	r1, #88	; 0x58
   8872a:	f200 82d9 	bhi.w	88ce0 <_vfiprintf_r+0x6a4>
   8872e:	e8df f011 	tbh	[pc, r1, lsl #1]
   88732:	0228      	.short	0x0228
   88734:	02d702d7 	.word	0x02d702d7
   88738:	02d70230 	.word	0x02d70230
   8873c:	02d702d7 	.word	0x02d702d7
   88740:	02d702d7 	.word	0x02d702d7
   88744:	00a002d7 	.word	0x00a002d7
   88748:	02d70288 	.word	0x02d70288
   8874c:	02b800a8 	.word	0x02b800a8
   88750:	01a602d7 	.word	0x01a602d7
   88754:	01ab01ab 	.word	0x01ab01ab
   88758:	01ab01ab 	.word	0x01ab01ab
   8875c:	01ab01ab 	.word	0x01ab01ab
   88760:	01ab01ab 	.word	0x01ab01ab
   88764:	02d701ab 	.word	0x02d701ab
   88768:	02d702d7 	.word	0x02d702d7
   8876c:	02d702d7 	.word	0x02d702d7
   88770:	02d702d7 	.word	0x02d702d7
   88774:	02d702d7 	.word	0x02d702d7
   88778:	01b902d7 	.word	0x01b902d7
   8877c:	02d702d7 	.word	0x02d702d7
   88780:	02d702d7 	.word	0x02d702d7
   88784:	02d702d7 	.word	0x02d702d7
   88788:	02d702d7 	.word	0x02d702d7
   8878c:	02d702d7 	.word	0x02d702d7
   88790:	02d7019e 	.word	0x02d7019e
   88794:	02d702d7 	.word	0x02d702d7
   88798:	02d702d7 	.word	0x02d702d7
   8879c:	02d701a2 	.word	0x02d701a2
   887a0:	025a02d7 	.word	0x025a02d7
   887a4:	02d702d7 	.word	0x02d702d7
   887a8:	02d702d7 	.word	0x02d702d7
   887ac:	02d702d7 	.word	0x02d702d7
   887b0:	02d702d7 	.word	0x02d702d7
   887b4:	02d702d7 	.word	0x02d702d7
   887b8:	02220261 	.word	0x02220261
   887bc:	02d702d7 	.word	0x02d702d7
   887c0:	027602d7 	.word	0x027602d7
   887c4:	02d70222 	.word	0x02d70222
   887c8:	027b02d7 	.word	0x027b02d7
   887cc:	01fc02d7 	.word	0x01fc02d7
   887d0:	02100189 	.word	0x02100189
   887d4:	02d702d2 	.word	0x02d702d2
   887d8:	02d70295 	.word	0x02d70295
   887dc:	02d700ad 	.word	0x02d700ad
   887e0:	023502d7 	.word	0x023502d7
   887e4:	f109 0908 	add.w	r9, r9, #8
   887e8:	9b03      	ldr	r3, [sp, #12]
   887ea:	442b      	add	r3, r5
   887ec:	9303      	str	r3, [sp, #12]
   887ee:	e786      	b.n	886fe <_vfiprintf_r+0xc2>
   887f0:	4659      	mov	r1, fp
   887f2:	9806      	ldr	r0, [sp, #24]
   887f4:	f000 fdaa 	bl	8934c <__swsetup_r>
   887f8:	bb18      	cbnz	r0, 88842 <_vfiprintf_r+0x206>
   887fa:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   887fe:	f001 031a 	and.w	r3, r1, #26
   88802:	2b0a      	cmp	r3, #10
   88804:	f47f af4b 	bne.w	8869e <_vfiprintf_r+0x62>
   88808:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8880c:	2b00      	cmp	r3, #0
   8880e:	f6ff af46 	blt.w	8869e <_vfiprintf_r+0x62>
   88812:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88816:	07db      	lsls	r3, r3, #31
   88818:	d405      	bmi.n	88826 <_vfiprintf_r+0x1ea>
   8881a:	058f      	lsls	r7, r1, #22
   8881c:	d403      	bmi.n	88826 <_vfiprintf_r+0x1ea>
   8881e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88822:	f002 fa83 	bl	8ad2c <__retarget_lock_release_recursive>
   88826:	462b      	mov	r3, r5
   88828:	4642      	mov	r2, r8
   8882a:	4659      	mov	r1, fp
   8882c:	9806      	ldr	r0, [sp, #24]
   8882e:	f000 fd49 	bl	892c4 <__sbprintf>
   88832:	9003      	str	r0, [sp, #12]
   88834:	9803      	ldr	r0, [sp, #12]
   88836:	b02d      	add	sp, #180	; 0xb4
   88838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8883c:	f001 fea6 	bl	8a58c <__sinit>
   88840:	e709      	b.n	88656 <_vfiprintf_r+0x1a>
   88842:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88846:	07d9      	lsls	r1, r3, #31
   88848:	d404      	bmi.n	88854 <_vfiprintf_r+0x218>
   8884a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8884e:	059a      	lsls	r2, r3, #22
   88850:	f140 84ae 	bpl.w	891b0 <_vfiprintf_r+0xb74>
   88854:	f04f 33ff 	mov.w	r3, #4294967295
   88858:	9303      	str	r3, [sp, #12]
   8885a:	9803      	ldr	r0, [sp, #12]
   8885c:	b02d      	add	sp, #180	; 0xb4
   8885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88862:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   88866:	f002 fa5f 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8886a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8886e:	b281      	uxth	r1, r0
   88870:	e6fb      	b.n	8866a <_vfiprintf_r+0x2e>
   88872:	9907      	ldr	r1, [sp, #28]
   88874:	460a      	mov	r2, r1
   88876:	680d      	ldr	r5, [r1, #0]
   88878:	3204      	adds	r2, #4
   8887a:	2d00      	cmp	r5, #0
   8887c:	9207      	str	r2, [sp, #28]
   8887e:	da02      	bge.n	88886 <_vfiprintf_r+0x24a>
   88880:	426d      	negs	r5, r5
   88882:	f043 0304 	orr.w	r3, r3, #4
   88886:	f898 2000 	ldrb.w	r2, [r8]
   8888a:	e749      	b.n	88720 <_vfiprintf_r+0xe4>
   8888c:	9508      	str	r5, [sp, #32]
   8888e:	069e      	lsls	r6, r3, #26
   88890:	f100 845a 	bmi.w	89148 <_vfiprintf_r+0xb0c>
   88894:	9907      	ldr	r1, [sp, #28]
   88896:	06dd      	lsls	r5, r3, #27
   88898:	460a      	mov	r2, r1
   8889a:	f100 83ef 	bmi.w	8907c <_vfiprintf_r+0xa40>
   8889e:	0658      	lsls	r0, r3, #25
   888a0:	f140 83ec 	bpl.w	8907c <_vfiprintf_r+0xa40>
   888a4:	2700      	movs	r7, #0
   888a6:	2201      	movs	r2, #1
   888a8:	880e      	ldrh	r6, [r1, #0]
   888aa:	3104      	adds	r1, #4
   888ac:	9107      	str	r1, [sp, #28]
   888ae:	f04f 0100 	mov.w	r1, #0
   888b2:	2500      	movs	r5, #0
   888b4:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   888b8:	1c61      	adds	r1, r4, #1
   888ba:	f000 8117 	beq.w	88aec <_vfiprintf_r+0x4b0>
   888be:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   888c2:	9102      	str	r1, [sp, #8]
   888c4:	ea56 0107 	orrs.w	r1, r6, r7
   888c8:	f040 8115 	bne.w	88af6 <_vfiprintf_r+0x4ba>
   888cc:	2c00      	cmp	r4, #0
   888ce:	f040 835b 	bne.w	88f88 <_vfiprintf_r+0x94c>
   888d2:	2a00      	cmp	r2, #0
   888d4:	f040 83b6 	bne.w	89044 <_vfiprintf_r+0xa08>
   888d8:	f013 0301 	ands.w	r3, r3, #1
   888dc:	9305      	str	r3, [sp, #20]
   888de:	f000 8455 	beq.w	8918c <_vfiprintf_r+0xb50>
   888e2:	2330      	movs	r3, #48	; 0x30
   888e4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   888e8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   888ec:	9b05      	ldr	r3, [sp, #20]
   888ee:	42a3      	cmp	r3, r4
   888f0:	bfb8      	it	lt
   888f2:	4623      	movlt	r3, r4
   888f4:	9301      	str	r3, [sp, #4]
   888f6:	b10d      	cbz	r5, 888fc <_vfiprintf_r+0x2c0>
   888f8:	3301      	adds	r3, #1
   888fa:	9301      	str	r3, [sp, #4]
   888fc:	9b02      	ldr	r3, [sp, #8]
   888fe:	f013 0302 	ands.w	r3, r3, #2
   88902:	9309      	str	r3, [sp, #36]	; 0x24
   88904:	d002      	beq.n	8890c <_vfiprintf_r+0x2d0>
   88906:	9b01      	ldr	r3, [sp, #4]
   88908:	3302      	adds	r3, #2
   8890a:	9301      	str	r3, [sp, #4]
   8890c:	9b02      	ldr	r3, [sp, #8]
   8890e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   88912:	930a      	str	r3, [sp, #40]	; 0x28
   88914:	f040 8215 	bne.w	88d42 <_vfiprintf_r+0x706>
   88918:	9b08      	ldr	r3, [sp, #32]
   8891a:	9a01      	ldr	r2, [sp, #4]
   8891c:	1a9d      	subs	r5, r3, r2
   8891e:	2d00      	cmp	r5, #0
   88920:	f340 820f 	ble.w	88d42 <_vfiprintf_r+0x706>
   88924:	2d10      	cmp	r5, #16
   88926:	f340 8484 	ble.w	89232 <_vfiprintf_r+0xbf6>
   8892a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8892c:	46ce      	mov	lr, r9
   8892e:	2710      	movs	r7, #16
   88930:	46a1      	mov	r9, r4
   88932:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88934:	4ec5      	ldr	r6, [pc, #788]	; (88c4c <_vfiprintf_r+0x610>)
   88936:	4619      	mov	r1, r3
   88938:	9c06      	ldr	r4, [sp, #24]
   8893a:	e007      	b.n	8894c <_vfiprintf_r+0x310>
   8893c:	f101 0c02 	add.w	ip, r1, #2
   88940:	4601      	mov	r1, r0
   88942:	f10e 0e08 	add.w	lr, lr, #8
   88946:	3d10      	subs	r5, #16
   88948:	2d10      	cmp	r5, #16
   8894a:	dd11      	ble.n	88970 <_vfiprintf_r+0x334>
   8894c:	1c48      	adds	r0, r1, #1
   8894e:	3210      	adds	r2, #16
   88950:	2807      	cmp	r0, #7
   88952:	9211      	str	r2, [sp, #68]	; 0x44
   88954:	e88e 00c0 	stmia.w	lr, {r6, r7}
   88958:	9010      	str	r0, [sp, #64]	; 0x40
   8895a:	ddef      	ble.n	8893c <_vfiprintf_r+0x300>
   8895c:	2a00      	cmp	r2, #0
   8895e:	f040 81d9 	bne.w	88d14 <_vfiprintf_r+0x6d8>
   88962:	3d10      	subs	r5, #16
   88964:	2d10      	cmp	r5, #16
   88966:	4611      	mov	r1, r2
   88968:	f04f 0c01 	mov.w	ip, #1
   8896c:	46d6      	mov	lr, sl
   8896e:	dced      	bgt.n	8894c <_vfiprintf_r+0x310>
   88970:	464c      	mov	r4, r9
   88972:	4661      	mov	r1, ip
   88974:	46f1      	mov	r9, lr
   88976:	442a      	add	r2, r5
   88978:	2907      	cmp	r1, #7
   8897a:	9211      	str	r2, [sp, #68]	; 0x44
   8897c:	f8c9 6000 	str.w	r6, [r9]
   88980:	f8c9 5004 	str.w	r5, [r9, #4]
   88984:	9110      	str	r1, [sp, #64]	; 0x40
   88986:	f300 82eb 	bgt.w	88f60 <_vfiprintf_r+0x924>
   8898a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8898e:	f109 0908 	add.w	r9, r9, #8
   88992:	1c48      	adds	r0, r1, #1
   88994:	2d00      	cmp	r5, #0
   88996:	f040 81dc 	bne.w	88d52 <_vfiprintf_r+0x716>
   8899a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8899c:	2b00      	cmp	r3, #0
   8899e:	f000 81f6 	beq.w	88d8e <_vfiprintf_r+0x752>
   889a2:	2102      	movs	r1, #2
   889a4:	ab0e      	add	r3, sp, #56	; 0x38
   889a6:	440a      	add	r2, r1
   889a8:	2807      	cmp	r0, #7
   889aa:	9211      	str	r2, [sp, #68]	; 0x44
   889ac:	9010      	str	r0, [sp, #64]	; 0x40
   889ae:	f8c9 1004 	str.w	r1, [r9, #4]
   889b2:	f8c9 3000 	str.w	r3, [r9]
   889b6:	f340 81e6 	ble.w	88d86 <_vfiprintf_r+0x74a>
   889ba:	2a00      	cmp	r2, #0
   889bc:	f040 8395 	bne.w	890ea <_vfiprintf_r+0xaae>
   889c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   889c2:	2001      	movs	r0, #1
   889c4:	2b80      	cmp	r3, #128	; 0x80
   889c6:	4611      	mov	r1, r2
   889c8:	46d1      	mov	r9, sl
   889ca:	f040 81e4 	bne.w	88d96 <_vfiprintf_r+0x75a>
   889ce:	9b08      	ldr	r3, [sp, #32]
   889d0:	9d01      	ldr	r5, [sp, #4]
   889d2:	1b5e      	subs	r6, r3, r5
   889d4:	2e00      	cmp	r6, #0
   889d6:	f340 81de 	ble.w	88d96 <_vfiprintf_r+0x75a>
   889da:	2e10      	cmp	r6, #16
   889dc:	f340 843c 	ble.w	89258 <_vfiprintf_r+0xc1c>
   889e0:	46cc      	mov	ip, r9
   889e2:	2710      	movs	r7, #16
   889e4:	46a1      	mov	r9, r4
   889e6:	4d9a      	ldr	r5, [pc, #616]	; (88c50 <_vfiprintf_r+0x614>)
   889e8:	9c06      	ldr	r4, [sp, #24]
   889ea:	e007      	b.n	889fc <_vfiprintf_r+0x3c0>
   889ec:	f101 0e02 	add.w	lr, r1, #2
   889f0:	4601      	mov	r1, r0
   889f2:	f10c 0c08 	add.w	ip, ip, #8
   889f6:	3e10      	subs	r6, #16
   889f8:	2e10      	cmp	r6, #16
   889fa:	dd11      	ble.n	88a20 <_vfiprintf_r+0x3e4>
   889fc:	1c48      	adds	r0, r1, #1
   889fe:	3210      	adds	r2, #16
   88a00:	2807      	cmp	r0, #7
   88a02:	9211      	str	r2, [sp, #68]	; 0x44
   88a04:	e88c 00a0 	stmia.w	ip, {r5, r7}
   88a08:	9010      	str	r0, [sp, #64]	; 0x40
   88a0a:	ddef      	ble.n	889ec <_vfiprintf_r+0x3b0>
   88a0c:	2a00      	cmp	r2, #0
   88a0e:	f040 829b 	bne.w	88f48 <_vfiprintf_r+0x90c>
   88a12:	3e10      	subs	r6, #16
   88a14:	2e10      	cmp	r6, #16
   88a16:	f04f 0e01 	mov.w	lr, #1
   88a1a:	4611      	mov	r1, r2
   88a1c:	46d4      	mov	ip, sl
   88a1e:	dced      	bgt.n	889fc <_vfiprintf_r+0x3c0>
   88a20:	464c      	mov	r4, r9
   88a22:	46e1      	mov	r9, ip
   88a24:	4432      	add	r2, r6
   88a26:	f1be 0f07 	cmp.w	lr, #7
   88a2a:	9211      	str	r2, [sp, #68]	; 0x44
   88a2c:	e889 0060 	stmia.w	r9, {r5, r6}
   88a30:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   88a34:	f300 8366 	bgt.w	89104 <_vfiprintf_r+0xac8>
   88a38:	f109 0908 	add.w	r9, r9, #8
   88a3c:	f10e 0001 	add.w	r0, lr, #1
   88a40:	4671      	mov	r1, lr
   88a42:	e1a8      	b.n	88d96 <_vfiprintf_r+0x75a>
   88a44:	9508      	str	r5, [sp, #32]
   88a46:	f013 0220 	ands.w	r2, r3, #32
   88a4a:	f040 8389 	bne.w	89160 <_vfiprintf_r+0xb24>
   88a4e:	f013 0110 	ands.w	r1, r3, #16
   88a52:	f040 8319 	bne.w	89088 <_vfiprintf_r+0xa4c>
   88a56:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   88a5a:	f000 8315 	beq.w	89088 <_vfiprintf_r+0xa4c>
   88a5e:	9807      	ldr	r0, [sp, #28]
   88a60:	460a      	mov	r2, r1
   88a62:	4601      	mov	r1, r0
   88a64:	3104      	adds	r1, #4
   88a66:	8806      	ldrh	r6, [r0, #0]
   88a68:	2700      	movs	r7, #0
   88a6a:	9107      	str	r1, [sp, #28]
   88a6c:	e71f      	b.n	888ae <_vfiprintf_r+0x272>
   88a6e:	9508      	str	r5, [sp, #32]
   88a70:	f043 0310 	orr.w	r3, r3, #16
   88a74:	e7e7      	b.n	88a46 <_vfiprintf_r+0x40a>
   88a76:	9508      	str	r5, [sp, #32]
   88a78:	f043 0310 	orr.w	r3, r3, #16
   88a7c:	e707      	b.n	8888e <_vfiprintf_r+0x252>
   88a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   88a82:	f898 2000 	ldrb.w	r2, [r8]
   88a86:	e64b      	b.n	88720 <_vfiprintf_r+0xe4>
   88a88:	2500      	movs	r5, #0
   88a8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88a8e:	f818 2b01 	ldrb.w	r2, [r8], #1
   88a92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   88a96:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   88a9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88a9e:	2909      	cmp	r1, #9
   88aa0:	d9f5      	bls.n	88a8e <_vfiprintf_r+0x452>
   88aa2:	e63f      	b.n	88724 <_vfiprintf_r+0xe8>
   88aa4:	9508      	str	r5, [sp, #32]
   88aa6:	2800      	cmp	r0, #0
   88aa8:	f040 8402 	bne.w	892b0 <_vfiprintf_r+0xc74>
   88aac:	f043 0310 	orr.w	r3, r3, #16
   88ab0:	069e      	lsls	r6, r3, #26
   88ab2:	f100 833d 	bmi.w	89130 <_vfiprintf_r+0xaf4>
   88ab6:	9907      	ldr	r1, [sp, #28]
   88ab8:	06dd      	lsls	r5, r3, #27
   88aba:	460a      	mov	r2, r1
   88abc:	f100 82f0 	bmi.w	890a0 <_vfiprintf_r+0xa64>
   88ac0:	0658      	lsls	r0, r3, #25
   88ac2:	f140 82ed 	bpl.w	890a0 <_vfiprintf_r+0xa64>
   88ac6:	f9b1 6000 	ldrsh.w	r6, [r1]
   88aca:	3204      	adds	r2, #4
   88acc:	17f7      	asrs	r7, r6, #31
   88ace:	4630      	mov	r0, r6
   88ad0:	4639      	mov	r1, r7
   88ad2:	9207      	str	r2, [sp, #28]
   88ad4:	2800      	cmp	r0, #0
   88ad6:	f171 0200 	sbcs.w	r2, r1, #0
   88ada:	f2c0 835a 	blt.w	89192 <_vfiprintf_r+0xb56>
   88ade:	1c61      	adds	r1, r4, #1
   88ae0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88ae4:	f04f 0201 	mov.w	r2, #1
   88ae8:	f47f aee9 	bne.w	888be <_vfiprintf_r+0x282>
   88aec:	ea56 0107 	orrs.w	r1, r6, r7
   88af0:	f000 824b 	beq.w	88f8a <_vfiprintf_r+0x94e>
   88af4:	9302      	str	r3, [sp, #8]
   88af6:	2a01      	cmp	r2, #1
   88af8:	f000 828a 	beq.w	89010 <_vfiprintf_r+0x9d4>
   88afc:	2a02      	cmp	r2, #2
   88afe:	f040 825a 	bne.w	88fb6 <_vfiprintf_r+0x97a>
   88b02:	46d3      	mov	fp, sl
   88b04:	980b      	ldr	r0, [sp, #44]	; 0x2c
   88b06:	0933      	lsrs	r3, r6, #4
   88b08:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   88b0c:	0939      	lsrs	r1, r7, #4
   88b0e:	f006 020f 	and.w	r2, r6, #15
   88b12:	460f      	mov	r7, r1
   88b14:	461e      	mov	r6, r3
   88b16:	5c83      	ldrb	r3, [r0, r2]
   88b18:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   88b1c:	ea56 0307 	orrs.w	r3, r6, r7
   88b20:	d1f1      	bne.n	88b06 <_vfiprintf_r+0x4ca>
   88b22:	ebaa 030b 	sub.w	r3, sl, fp
   88b26:	9305      	str	r3, [sp, #20]
   88b28:	e6e0      	b.n	888ec <_vfiprintf_r+0x2b0>
   88b2a:	2800      	cmp	r0, #0
   88b2c:	f040 83bd 	bne.w	892aa <_vfiprintf_r+0xc6e>
   88b30:	0699      	lsls	r1, r3, #26
   88b32:	f100 8359 	bmi.w	891e8 <_vfiprintf_r+0xbac>
   88b36:	06da      	lsls	r2, r3, #27
   88b38:	f100 80e5 	bmi.w	88d06 <_vfiprintf_r+0x6ca>
   88b3c:	065b      	lsls	r3, r3, #25
   88b3e:	f140 80e2 	bpl.w	88d06 <_vfiprintf_r+0x6ca>
   88b42:	9a07      	ldr	r2, [sp, #28]
   88b44:	6813      	ldr	r3, [r2, #0]
   88b46:	3204      	adds	r2, #4
   88b48:	9207      	str	r2, [sp, #28]
   88b4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   88b4e:	801a      	strh	r2, [r3, #0]
   88b50:	e5b1      	b.n	886b6 <_vfiprintf_r+0x7a>
   88b52:	2278      	movs	r2, #120	; 0x78
   88b54:	2130      	movs	r1, #48	; 0x30
   88b56:	9508      	str	r5, [sp, #32]
   88b58:	9d07      	ldr	r5, [sp, #28]
   88b5a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   88b5e:	1d2a      	adds	r2, r5, #4
   88b60:	9207      	str	r2, [sp, #28]
   88b62:	4a3c      	ldr	r2, [pc, #240]	; (88c54 <_vfiprintf_r+0x618>)
   88b64:	682e      	ldr	r6, [r5, #0]
   88b66:	920b      	str	r2, [sp, #44]	; 0x2c
   88b68:	f043 0302 	orr.w	r3, r3, #2
   88b6c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   88b70:	2700      	movs	r7, #0
   88b72:	2202      	movs	r2, #2
   88b74:	e69b      	b.n	888ae <_vfiprintf_r+0x272>
   88b76:	9508      	str	r5, [sp, #32]
   88b78:	2800      	cmp	r0, #0
   88b7a:	d099      	beq.n	88ab0 <_vfiprintf_r+0x474>
   88b7c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   88b80:	e796      	b.n	88ab0 <_vfiprintf_r+0x474>
   88b82:	f898 2000 	ldrb.w	r2, [r8]
   88b86:	2e00      	cmp	r6, #0
   88b88:	f47f adca 	bne.w	88720 <_vfiprintf_r+0xe4>
   88b8c:	2001      	movs	r0, #1
   88b8e:	2620      	movs	r6, #32
   88b90:	e5c6      	b.n	88720 <_vfiprintf_r+0xe4>
   88b92:	f043 0301 	orr.w	r3, r3, #1
   88b96:	f898 2000 	ldrb.w	r2, [r8]
   88b9a:	e5c1      	b.n	88720 <_vfiprintf_r+0xe4>
   88b9c:	9508      	str	r5, [sp, #32]
   88b9e:	2800      	cmp	r0, #0
   88ba0:	f040 8380 	bne.w	892a4 <_vfiprintf_r+0xc68>
   88ba4:	492b      	ldr	r1, [pc, #172]	; (88c54 <_vfiprintf_r+0x618>)
   88ba6:	910b      	str	r1, [sp, #44]	; 0x2c
   88ba8:	069f      	lsls	r7, r3, #26
   88baa:	f100 82e5 	bmi.w	89178 <_vfiprintf_r+0xb3c>
   88bae:	9807      	ldr	r0, [sp, #28]
   88bb0:	06de      	lsls	r6, r3, #27
   88bb2:	4601      	mov	r1, r0
   88bb4:	f100 826f 	bmi.w	89096 <_vfiprintf_r+0xa5a>
   88bb8:	065d      	lsls	r5, r3, #25
   88bba:	f140 826c 	bpl.w	89096 <_vfiprintf_r+0xa5a>
   88bbe:	2700      	movs	r7, #0
   88bc0:	3104      	adds	r1, #4
   88bc2:	8806      	ldrh	r6, [r0, #0]
   88bc4:	9107      	str	r1, [sp, #28]
   88bc6:	07d8      	lsls	r0, r3, #31
   88bc8:	f140 8220 	bpl.w	8900c <_vfiprintf_r+0x9d0>
   88bcc:	ea56 0107 	orrs.w	r1, r6, r7
   88bd0:	f000 821c 	beq.w	8900c <_vfiprintf_r+0x9d0>
   88bd4:	2130      	movs	r1, #48	; 0x30
   88bd6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   88bda:	f043 0302 	orr.w	r3, r3, #2
   88bde:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   88be2:	2202      	movs	r2, #2
   88be4:	e663      	b.n	888ae <_vfiprintf_r+0x272>
   88be6:	9508      	str	r5, [sp, #32]
   88be8:	2800      	cmp	r0, #0
   88bea:	f040 8355 	bne.w	89298 <_vfiprintf_r+0xc5c>
   88bee:	491a      	ldr	r1, [pc, #104]	; (88c58 <_vfiprintf_r+0x61c>)
   88bf0:	910b      	str	r1, [sp, #44]	; 0x2c
   88bf2:	e7d9      	b.n	88ba8 <_vfiprintf_r+0x56c>
   88bf4:	2201      	movs	r2, #1
   88bf6:	9807      	ldr	r0, [sp, #28]
   88bf8:	4611      	mov	r1, r2
   88bfa:	9201      	str	r2, [sp, #4]
   88bfc:	6802      	ldr	r2, [r0, #0]
   88bfe:	f04f 0400 	mov.w	r4, #0
   88c02:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88c06:	4602      	mov	r2, r0
   88c08:	3204      	adds	r2, #4
   88c0a:	9508      	str	r5, [sp, #32]
   88c0c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   88c10:	9105      	str	r1, [sp, #20]
   88c12:	9207      	str	r2, [sp, #28]
   88c14:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   88c18:	9302      	str	r3, [sp, #8]
   88c1a:	2400      	movs	r4, #0
   88c1c:	e66e      	b.n	888fc <_vfiprintf_r+0x2c0>
   88c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88c22:	f898 2000 	ldrb.w	r2, [r8]
   88c26:	e57b      	b.n	88720 <_vfiprintf_r+0xe4>
   88c28:	f898 2000 	ldrb.w	r2, [r8]
   88c2c:	2a6c      	cmp	r2, #108	; 0x6c
   88c2e:	bf03      	ittte	eq
   88c30:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   88c34:	f043 0320 	orreq.w	r3, r3, #32
   88c38:	f108 0801 	addeq.w	r8, r8, #1
   88c3c:	f043 0310 	orrne.w	r3, r3, #16
   88c40:	e56e      	b.n	88720 <_vfiprintf_r+0xe4>
   88c42:	f898 2000 	ldrb.w	r2, [r8]
   88c46:	2001      	movs	r0, #1
   88c48:	262b      	movs	r6, #43	; 0x2b
   88c4a:	e569      	b.n	88720 <_vfiprintf_r+0xe4>
   88c4c:	0008cec0 	.word	0x0008cec0
   88c50:	0008ced0 	.word	0x0008ced0
   88c54:	0008ce80 	.word	0x0008ce80
   88c58:	0008ce6c 	.word	0x0008ce6c
   88c5c:	f04f 0200 	mov.w	r2, #0
   88c60:	9907      	ldr	r1, [sp, #28]
   88c62:	9508      	str	r5, [sp, #32]
   88c64:	f8d1 b000 	ldr.w	fp, [r1]
   88c68:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88c6c:	1d0d      	adds	r5, r1, #4
   88c6e:	f1bb 0f00 	cmp.w	fp, #0
   88c72:	f000 82e4 	beq.w	8923e <_vfiprintf_r+0xc02>
   88c76:	1c67      	adds	r7, r4, #1
   88c78:	f000 82c3 	beq.w	89202 <_vfiprintf_r+0xbc6>
   88c7c:	4622      	mov	r2, r4
   88c7e:	2100      	movs	r1, #0
   88c80:	4658      	mov	r0, fp
   88c82:	9301      	str	r3, [sp, #4]
   88c84:	f002 fb8c 	bl	8b3a0 <memchr>
   88c88:	9b01      	ldr	r3, [sp, #4]
   88c8a:	2800      	cmp	r0, #0
   88c8c:	f000 82e8 	beq.w	89260 <_vfiprintf_r+0xc24>
   88c90:	eba0 020b 	sub.w	r2, r0, fp
   88c94:	9507      	str	r5, [sp, #28]
   88c96:	9205      	str	r2, [sp, #20]
   88c98:	9302      	str	r3, [sp, #8]
   88c9a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88c9e:	2400      	movs	r4, #0
   88ca0:	e624      	b.n	888ec <_vfiprintf_r+0x2b0>
   88ca2:	f898 2000 	ldrb.w	r2, [r8]
   88ca6:	f108 0701 	add.w	r7, r8, #1
   88caa:	2a2a      	cmp	r2, #42	; 0x2a
   88cac:	f000 82e9 	beq.w	89282 <_vfiprintf_r+0xc46>
   88cb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88cb4:	2909      	cmp	r1, #9
   88cb6:	46b8      	mov	r8, r7
   88cb8:	f04f 0400 	mov.w	r4, #0
   88cbc:	f63f ad32 	bhi.w	88724 <_vfiprintf_r+0xe8>
   88cc0:	f818 2b01 	ldrb.w	r2, [r8], #1
   88cc4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   88cc8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   88ccc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   88cd0:	2909      	cmp	r1, #9
   88cd2:	d9f5      	bls.n	88cc0 <_vfiprintf_r+0x684>
   88cd4:	e526      	b.n	88724 <_vfiprintf_r+0xe8>
   88cd6:	f043 0320 	orr.w	r3, r3, #32
   88cda:	f898 2000 	ldrb.w	r2, [r8]
   88cde:	e51f      	b.n	88720 <_vfiprintf_r+0xe4>
   88ce0:	9508      	str	r5, [sp, #32]
   88ce2:	2800      	cmp	r0, #0
   88ce4:	f040 82db 	bne.w	8929e <_vfiprintf_r+0xc62>
   88ce8:	2a00      	cmp	r2, #0
   88cea:	f000 80f1 	beq.w	88ed0 <_vfiprintf_r+0x894>
   88cee:	2101      	movs	r1, #1
   88cf0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   88cf4:	f04f 0200 	mov.w	r2, #0
   88cf8:	9101      	str	r1, [sp, #4]
   88cfa:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   88cfe:	9105      	str	r1, [sp, #20]
   88d00:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   88d04:	e788      	b.n	88c18 <_vfiprintf_r+0x5dc>
   88d06:	9a07      	ldr	r2, [sp, #28]
   88d08:	6813      	ldr	r3, [r2, #0]
   88d0a:	3204      	adds	r2, #4
   88d0c:	9207      	str	r2, [sp, #28]
   88d0e:	9a03      	ldr	r2, [sp, #12]
   88d10:	601a      	str	r2, [r3, #0]
   88d12:	e4d0      	b.n	886b6 <_vfiprintf_r+0x7a>
   88d14:	aa0f      	add	r2, sp, #60	; 0x3c
   88d16:	9904      	ldr	r1, [sp, #16]
   88d18:	4620      	mov	r0, r4
   88d1a:	f7ff fc4f 	bl	885bc <__sprint_r.part.0>
   88d1e:	2800      	cmp	r0, #0
   88d20:	f040 8143 	bne.w	88faa <_vfiprintf_r+0x96e>
   88d24:	9910      	ldr	r1, [sp, #64]	; 0x40
   88d26:	46d6      	mov	lr, sl
   88d28:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88d2a:	f101 0c01 	add.w	ip, r1, #1
   88d2e:	e60a      	b.n	88946 <_vfiprintf_r+0x30a>
   88d30:	aa0f      	add	r2, sp, #60	; 0x3c
   88d32:	9904      	ldr	r1, [sp, #16]
   88d34:	9806      	ldr	r0, [sp, #24]
   88d36:	f7ff fc41 	bl	885bc <__sprint_r.part.0>
   88d3a:	2800      	cmp	r0, #0
   88d3c:	f040 8135 	bne.w	88faa <_vfiprintf_r+0x96e>
   88d40:	46d1      	mov	r9, sl
   88d42:	9910      	ldr	r1, [sp, #64]	; 0x40
   88d44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   88d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88d4a:	1c48      	adds	r0, r1, #1
   88d4c:	2d00      	cmp	r5, #0
   88d4e:	f43f ae24 	beq.w	8899a <_vfiprintf_r+0x35e>
   88d52:	2101      	movs	r1, #1
   88d54:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   88d58:	440a      	add	r2, r1
   88d5a:	2807      	cmp	r0, #7
   88d5c:	9211      	str	r2, [sp, #68]	; 0x44
   88d5e:	9010      	str	r0, [sp, #64]	; 0x40
   88d60:	f8c9 1004 	str.w	r1, [r9, #4]
   88d64:	f8c9 5000 	str.w	r5, [r9]
   88d68:	f340 8109 	ble.w	88f7e <_vfiprintf_r+0x942>
   88d6c:	2a00      	cmp	r2, #0
   88d6e:	f040 81af 	bne.w	890d0 <_vfiprintf_r+0xa94>
   88d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88d74:	2b00      	cmp	r3, #0
   88d76:	f43f ae23 	beq.w	889c0 <_vfiprintf_r+0x384>
   88d7a:	2202      	movs	r2, #2
   88d7c:	4608      	mov	r0, r1
   88d7e:	46d1      	mov	r9, sl
   88d80:	ab0e      	add	r3, sp, #56	; 0x38
   88d82:	921d      	str	r2, [sp, #116]	; 0x74
   88d84:	931c      	str	r3, [sp, #112]	; 0x70
   88d86:	4601      	mov	r1, r0
   88d88:	f109 0908 	add.w	r9, r9, #8
   88d8c:	3001      	adds	r0, #1
   88d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88d90:	2b80      	cmp	r3, #128	; 0x80
   88d92:	f43f ae1c 	beq.w	889ce <_vfiprintf_r+0x392>
   88d96:	9b05      	ldr	r3, [sp, #20]
   88d98:	1ae4      	subs	r4, r4, r3
   88d9a:	2c00      	cmp	r4, #0
   88d9c:	dd2f      	ble.n	88dfe <_vfiprintf_r+0x7c2>
   88d9e:	2c10      	cmp	r4, #16
   88da0:	f340 8220 	ble.w	891e4 <_vfiprintf_r+0xba8>
   88da4:	46ce      	mov	lr, r9
   88da6:	2610      	movs	r6, #16
   88da8:	4db2      	ldr	r5, [pc, #712]	; (89074 <_vfiprintf_r+0xa38>)
   88daa:	9f06      	ldr	r7, [sp, #24]
   88dac:	f8dd 9010 	ldr.w	r9, [sp, #16]
   88db0:	e006      	b.n	88dc0 <_vfiprintf_r+0x784>
   88db2:	1c88      	adds	r0, r1, #2
   88db4:	4619      	mov	r1, r3
   88db6:	f10e 0e08 	add.w	lr, lr, #8
   88dba:	3c10      	subs	r4, #16
   88dbc:	2c10      	cmp	r4, #16
   88dbe:	dd10      	ble.n	88de2 <_vfiprintf_r+0x7a6>
   88dc0:	1c4b      	adds	r3, r1, #1
   88dc2:	3210      	adds	r2, #16
   88dc4:	2b07      	cmp	r3, #7
   88dc6:	9211      	str	r2, [sp, #68]	; 0x44
   88dc8:	e88e 0060 	stmia.w	lr, {r5, r6}
   88dcc:	9310      	str	r3, [sp, #64]	; 0x40
   88dce:	ddf0      	ble.n	88db2 <_vfiprintf_r+0x776>
   88dd0:	2a00      	cmp	r2, #0
   88dd2:	d165      	bne.n	88ea0 <_vfiprintf_r+0x864>
   88dd4:	3c10      	subs	r4, #16
   88dd6:	2c10      	cmp	r4, #16
   88dd8:	f04f 0001 	mov.w	r0, #1
   88ddc:	4611      	mov	r1, r2
   88dde:	46d6      	mov	lr, sl
   88de0:	dcee      	bgt.n	88dc0 <_vfiprintf_r+0x784>
   88de2:	46f1      	mov	r9, lr
   88de4:	4422      	add	r2, r4
   88de6:	2807      	cmp	r0, #7
   88de8:	9211      	str	r2, [sp, #68]	; 0x44
   88dea:	f8c9 5000 	str.w	r5, [r9]
   88dee:	f8c9 4004 	str.w	r4, [r9, #4]
   88df2:	9010      	str	r0, [sp, #64]	; 0x40
   88df4:	f300 8085 	bgt.w	88f02 <_vfiprintf_r+0x8c6>
   88df8:	f109 0908 	add.w	r9, r9, #8
   88dfc:	3001      	adds	r0, #1
   88dfe:	9905      	ldr	r1, [sp, #20]
   88e00:	2807      	cmp	r0, #7
   88e02:	440a      	add	r2, r1
   88e04:	9211      	str	r2, [sp, #68]	; 0x44
   88e06:	f8c9 b000 	str.w	fp, [r9]
   88e0a:	f8c9 1004 	str.w	r1, [r9, #4]
   88e0e:	9010      	str	r0, [sp, #64]	; 0x40
   88e10:	f340 8082 	ble.w	88f18 <_vfiprintf_r+0x8dc>
   88e14:	2a00      	cmp	r2, #0
   88e16:	f040 8118 	bne.w	8904a <_vfiprintf_r+0xa0e>
   88e1a:	9b02      	ldr	r3, [sp, #8]
   88e1c:	9210      	str	r2, [sp, #64]	; 0x40
   88e1e:	0758      	lsls	r0, r3, #29
   88e20:	d535      	bpl.n	88e8e <_vfiprintf_r+0x852>
   88e22:	9b08      	ldr	r3, [sp, #32]
   88e24:	9901      	ldr	r1, [sp, #4]
   88e26:	1a5c      	subs	r4, r3, r1
   88e28:	2c00      	cmp	r4, #0
   88e2a:	f340 80e7 	ble.w	88ffc <_vfiprintf_r+0x9c0>
   88e2e:	46d1      	mov	r9, sl
   88e30:	2c10      	cmp	r4, #16
   88e32:	f340 820d 	ble.w	89250 <_vfiprintf_r+0xc14>
   88e36:	2510      	movs	r5, #16
   88e38:	9910      	ldr	r1, [sp, #64]	; 0x40
   88e3a:	4e8f      	ldr	r6, [pc, #572]	; (89078 <_vfiprintf_r+0xa3c>)
   88e3c:	9f06      	ldr	r7, [sp, #24]
   88e3e:	f8dd b010 	ldr.w	fp, [sp, #16]
   88e42:	e006      	b.n	88e52 <_vfiprintf_r+0x816>
   88e44:	1c88      	adds	r0, r1, #2
   88e46:	4619      	mov	r1, r3
   88e48:	f109 0908 	add.w	r9, r9, #8
   88e4c:	3c10      	subs	r4, #16
   88e4e:	2c10      	cmp	r4, #16
   88e50:	dd11      	ble.n	88e76 <_vfiprintf_r+0x83a>
   88e52:	1c4b      	adds	r3, r1, #1
   88e54:	3210      	adds	r2, #16
   88e56:	2b07      	cmp	r3, #7
   88e58:	9211      	str	r2, [sp, #68]	; 0x44
   88e5a:	f8c9 6000 	str.w	r6, [r9]
   88e5e:	f8c9 5004 	str.w	r5, [r9, #4]
   88e62:	9310      	str	r3, [sp, #64]	; 0x40
   88e64:	ddee      	ble.n	88e44 <_vfiprintf_r+0x808>
   88e66:	bb42      	cbnz	r2, 88eba <_vfiprintf_r+0x87e>
   88e68:	3c10      	subs	r4, #16
   88e6a:	2c10      	cmp	r4, #16
   88e6c:	f04f 0001 	mov.w	r0, #1
   88e70:	4611      	mov	r1, r2
   88e72:	46d1      	mov	r9, sl
   88e74:	dced      	bgt.n	88e52 <_vfiprintf_r+0x816>
   88e76:	4422      	add	r2, r4
   88e78:	2807      	cmp	r0, #7
   88e7a:	9211      	str	r2, [sp, #68]	; 0x44
   88e7c:	f8c9 6000 	str.w	r6, [r9]
   88e80:	f8c9 4004 	str.w	r4, [r9, #4]
   88e84:	9010      	str	r0, [sp, #64]	; 0x40
   88e86:	dd51      	ble.n	88f2c <_vfiprintf_r+0x8f0>
   88e88:	2a00      	cmp	r2, #0
   88e8a:	f040 819a 	bne.w	891c2 <_vfiprintf_r+0xb86>
   88e8e:	9b03      	ldr	r3, [sp, #12]
   88e90:	9a08      	ldr	r2, [sp, #32]
   88e92:	9901      	ldr	r1, [sp, #4]
   88e94:	428a      	cmp	r2, r1
   88e96:	bfac      	ite	ge
   88e98:	189b      	addge	r3, r3, r2
   88e9a:	185b      	addlt	r3, r3, r1
   88e9c:	9303      	str	r3, [sp, #12]
   88e9e:	e04e      	b.n	88f3e <_vfiprintf_r+0x902>
   88ea0:	aa0f      	add	r2, sp, #60	; 0x3c
   88ea2:	4649      	mov	r1, r9
   88ea4:	4638      	mov	r0, r7
   88ea6:	f7ff fb89 	bl	885bc <__sprint_r.part.0>
   88eaa:	2800      	cmp	r0, #0
   88eac:	f040 813e 	bne.w	8912c <_vfiprintf_r+0xaf0>
   88eb0:	9910      	ldr	r1, [sp, #64]	; 0x40
   88eb2:	46d6      	mov	lr, sl
   88eb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88eb6:	1c48      	adds	r0, r1, #1
   88eb8:	e77f      	b.n	88dba <_vfiprintf_r+0x77e>
   88eba:	aa0f      	add	r2, sp, #60	; 0x3c
   88ebc:	4659      	mov	r1, fp
   88ebe:	4638      	mov	r0, r7
   88ec0:	f7ff fb7c 	bl	885bc <__sprint_r.part.0>
   88ec4:	b960      	cbnz	r0, 88ee0 <_vfiprintf_r+0x8a4>
   88ec6:	9910      	ldr	r1, [sp, #64]	; 0x40
   88ec8:	46d1      	mov	r9, sl
   88eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88ecc:	1c48      	adds	r0, r1, #1
   88ece:	e7bd      	b.n	88e4c <_vfiprintf_r+0x810>
   88ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88ed2:	f8dd b010 	ldr.w	fp, [sp, #16]
   88ed6:	2b00      	cmp	r3, #0
   88ed8:	f040 81ca 	bne.w	89270 <_vfiprintf_r+0xc34>
   88edc:	2300      	movs	r3, #0
   88ede:	9310      	str	r3, [sp, #64]	; 0x40
   88ee0:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   88ee4:	f013 0f01 	tst.w	r3, #1
   88ee8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   88eec:	d102      	bne.n	88ef4 <_vfiprintf_r+0x8b8>
   88eee:	059a      	lsls	r2, r3, #22
   88ef0:	f140 80dd 	bpl.w	890ae <_vfiprintf_r+0xa72>
   88ef4:	065b      	lsls	r3, r3, #25
   88ef6:	f53f acad 	bmi.w	88854 <_vfiprintf_r+0x218>
   88efa:	9803      	ldr	r0, [sp, #12]
   88efc:	b02d      	add	sp, #180	; 0xb4
   88efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f02:	2a00      	cmp	r2, #0
   88f04:	f040 8105 	bne.w	89112 <_vfiprintf_r+0xad6>
   88f08:	2301      	movs	r3, #1
   88f0a:	46d1      	mov	r9, sl
   88f0c:	9a05      	ldr	r2, [sp, #20]
   88f0e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   88f12:	921d      	str	r2, [sp, #116]	; 0x74
   88f14:	9211      	str	r2, [sp, #68]	; 0x44
   88f16:	9310      	str	r3, [sp, #64]	; 0x40
   88f18:	f109 0908 	add.w	r9, r9, #8
   88f1c:	9b02      	ldr	r3, [sp, #8]
   88f1e:	0759      	lsls	r1, r3, #29
   88f20:	d504      	bpl.n	88f2c <_vfiprintf_r+0x8f0>
   88f22:	9b08      	ldr	r3, [sp, #32]
   88f24:	9901      	ldr	r1, [sp, #4]
   88f26:	1a5c      	subs	r4, r3, r1
   88f28:	2c00      	cmp	r4, #0
   88f2a:	dc81      	bgt.n	88e30 <_vfiprintf_r+0x7f4>
   88f2c:	9b03      	ldr	r3, [sp, #12]
   88f2e:	9908      	ldr	r1, [sp, #32]
   88f30:	9801      	ldr	r0, [sp, #4]
   88f32:	4281      	cmp	r1, r0
   88f34:	bfac      	ite	ge
   88f36:	185b      	addge	r3, r3, r1
   88f38:	181b      	addlt	r3, r3, r0
   88f3a:	9303      	str	r3, [sp, #12]
   88f3c:	bb72      	cbnz	r2, 88f9c <_vfiprintf_r+0x960>
   88f3e:	2300      	movs	r3, #0
   88f40:	46d1      	mov	r9, sl
   88f42:	9310      	str	r3, [sp, #64]	; 0x40
   88f44:	f7ff bbb7 	b.w	886b6 <_vfiprintf_r+0x7a>
   88f48:	aa0f      	add	r2, sp, #60	; 0x3c
   88f4a:	9904      	ldr	r1, [sp, #16]
   88f4c:	4620      	mov	r0, r4
   88f4e:	f7ff fb35 	bl	885bc <__sprint_r.part.0>
   88f52:	bb50      	cbnz	r0, 88faa <_vfiprintf_r+0x96e>
   88f54:	9910      	ldr	r1, [sp, #64]	; 0x40
   88f56:	46d4      	mov	ip, sl
   88f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
   88f5a:	f101 0e01 	add.w	lr, r1, #1
   88f5e:	e54a      	b.n	889f6 <_vfiprintf_r+0x3ba>
   88f60:	2a00      	cmp	r2, #0
   88f62:	f47f aee5 	bne.w	88d30 <_vfiprintf_r+0x6f4>
   88f66:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   88f6a:	2900      	cmp	r1, #0
   88f6c:	f000 811a 	beq.w	891a4 <_vfiprintf_r+0xb68>
   88f70:	2201      	movs	r2, #1
   88f72:	46d1      	mov	r9, sl
   88f74:	4610      	mov	r0, r2
   88f76:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   88f7a:	921d      	str	r2, [sp, #116]	; 0x74
   88f7c:	911c      	str	r1, [sp, #112]	; 0x70
   88f7e:	4601      	mov	r1, r0
   88f80:	f109 0908 	add.w	r9, r9, #8
   88f84:	3001      	adds	r0, #1
   88f86:	e508      	b.n	8899a <_vfiprintf_r+0x35e>
   88f88:	9b02      	ldr	r3, [sp, #8]
   88f8a:	2a01      	cmp	r2, #1
   88f8c:	f000 8097 	beq.w	890be <_vfiprintf_r+0xa82>
   88f90:	2a02      	cmp	r2, #2
   88f92:	d10d      	bne.n	88fb0 <_vfiprintf_r+0x974>
   88f94:	9302      	str	r3, [sp, #8]
   88f96:	2600      	movs	r6, #0
   88f98:	2700      	movs	r7, #0
   88f9a:	e5b2      	b.n	88b02 <_vfiprintf_r+0x4c6>
   88f9c:	aa0f      	add	r2, sp, #60	; 0x3c
   88f9e:	9904      	ldr	r1, [sp, #16]
   88fa0:	9806      	ldr	r0, [sp, #24]
   88fa2:	f7ff fb0b 	bl	885bc <__sprint_r.part.0>
   88fa6:	2800      	cmp	r0, #0
   88fa8:	d0c9      	beq.n	88f3e <_vfiprintf_r+0x902>
   88faa:	f8dd b010 	ldr.w	fp, [sp, #16]
   88fae:	e797      	b.n	88ee0 <_vfiprintf_r+0x8a4>
   88fb0:	2600      	movs	r6, #0
   88fb2:	2700      	movs	r7, #0
   88fb4:	9302      	str	r3, [sp, #8]
   88fb6:	4651      	mov	r1, sl
   88fb8:	e000      	b.n	88fbc <_vfiprintf_r+0x980>
   88fba:	4659      	mov	r1, fp
   88fbc:	08f2      	lsrs	r2, r6, #3
   88fbe:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   88fc2:	08f8      	lsrs	r0, r7, #3
   88fc4:	f006 0307 	and.w	r3, r6, #7
   88fc8:	4607      	mov	r7, r0
   88fca:	4616      	mov	r6, r2
   88fcc:	3330      	adds	r3, #48	; 0x30
   88fce:	ea56 0207 	orrs.w	r2, r6, r7
   88fd2:	f801 3c01 	strb.w	r3, [r1, #-1]
   88fd6:	f101 3bff 	add.w	fp, r1, #4294967295
   88fda:	d1ee      	bne.n	88fba <_vfiprintf_r+0x97e>
   88fdc:	9a02      	ldr	r2, [sp, #8]
   88fde:	07d6      	lsls	r6, r2, #31
   88fe0:	f57f ad9f 	bpl.w	88b22 <_vfiprintf_r+0x4e6>
   88fe4:	2b30      	cmp	r3, #48	; 0x30
   88fe6:	f43f ad9c 	beq.w	88b22 <_vfiprintf_r+0x4e6>
   88fea:	2330      	movs	r3, #48	; 0x30
   88fec:	3902      	subs	r1, #2
   88fee:	f80b 3c01 	strb.w	r3, [fp, #-1]
   88ff2:	ebaa 0301 	sub.w	r3, sl, r1
   88ff6:	9305      	str	r3, [sp, #20]
   88ff8:	468b      	mov	fp, r1
   88ffa:	e477      	b.n	888ec <_vfiprintf_r+0x2b0>
   88ffc:	9b03      	ldr	r3, [sp, #12]
   88ffe:	9a08      	ldr	r2, [sp, #32]
   89000:	428a      	cmp	r2, r1
   89002:	bfac      	ite	ge
   89004:	189b      	addge	r3, r3, r2
   89006:	185b      	addlt	r3, r3, r1
   89008:	9303      	str	r3, [sp, #12]
   8900a:	e798      	b.n	88f3e <_vfiprintf_r+0x902>
   8900c:	2202      	movs	r2, #2
   8900e:	e44e      	b.n	888ae <_vfiprintf_r+0x272>
   89010:	2f00      	cmp	r7, #0
   89012:	bf08      	it	eq
   89014:	2e0a      	cmpeq	r6, #10
   89016:	d351      	bcc.n	890bc <_vfiprintf_r+0xa80>
   89018:	46d3      	mov	fp, sl
   8901a:	4630      	mov	r0, r6
   8901c:	4639      	mov	r1, r7
   8901e:	220a      	movs	r2, #10
   89020:	2300      	movs	r3, #0
   89022:	f7fd fc6d 	bl	86900 <__aeabi_uldivmod>
   89026:	3230      	adds	r2, #48	; 0x30
   89028:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   8902c:	4630      	mov	r0, r6
   8902e:	4639      	mov	r1, r7
   89030:	2300      	movs	r3, #0
   89032:	220a      	movs	r2, #10
   89034:	f7fd fc64 	bl	86900 <__aeabi_uldivmod>
   89038:	4606      	mov	r6, r0
   8903a:	460f      	mov	r7, r1
   8903c:	ea56 0307 	orrs.w	r3, r6, r7
   89040:	d1eb      	bne.n	8901a <_vfiprintf_r+0x9de>
   89042:	e56e      	b.n	88b22 <_vfiprintf_r+0x4e6>
   89044:	9405      	str	r4, [sp, #20]
   89046:	46d3      	mov	fp, sl
   89048:	e450      	b.n	888ec <_vfiprintf_r+0x2b0>
   8904a:	aa0f      	add	r2, sp, #60	; 0x3c
   8904c:	9904      	ldr	r1, [sp, #16]
   8904e:	9806      	ldr	r0, [sp, #24]
   89050:	f7ff fab4 	bl	885bc <__sprint_r.part.0>
   89054:	2800      	cmp	r0, #0
   89056:	d1a8      	bne.n	88faa <_vfiprintf_r+0x96e>
   89058:	46d1      	mov	r9, sl
   8905a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8905c:	e75e      	b.n	88f1c <_vfiprintf_r+0x8e0>
   8905e:	aa0f      	add	r2, sp, #60	; 0x3c
   89060:	9904      	ldr	r1, [sp, #16]
   89062:	9806      	ldr	r0, [sp, #24]
   89064:	f7ff faaa 	bl	885bc <__sprint_r.part.0>
   89068:	2800      	cmp	r0, #0
   8906a:	d19e      	bne.n	88faa <_vfiprintf_r+0x96e>
   8906c:	46d1      	mov	r9, sl
   8906e:	f7ff bbbb 	b.w	887e8 <_vfiprintf_r+0x1ac>
   89072:	bf00      	nop
   89074:	0008ced0 	.word	0x0008ced0
   89078:	0008cec0 	.word	0x0008cec0
   8907c:	3104      	adds	r1, #4
   8907e:	6816      	ldr	r6, [r2, #0]
   89080:	2700      	movs	r7, #0
   89082:	2201      	movs	r2, #1
   89084:	9107      	str	r1, [sp, #28]
   89086:	e412      	b.n	888ae <_vfiprintf_r+0x272>
   89088:	9807      	ldr	r0, [sp, #28]
   8908a:	2700      	movs	r7, #0
   8908c:	4601      	mov	r1, r0
   8908e:	3104      	adds	r1, #4
   89090:	6806      	ldr	r6, [r0, #0]
   89092:	9107      	str	r1, [sp, #28]
   89094:	e40b      	b.n	888ae <_vfiprintf_r+0x272>
   89096:	680e      	ldr	r6, [r1, #0]
   89098:	3104      	adds	r1, #4
   8909a:	9107      	str	r1, [sp, #28]
   8909c:	2700      	movs	r7, #0
   8909e:	e592      	b.n	88bc6 <_vfiprintf_r+0x58a>
   890a0:	6816      	ldr	r6, [r2, #0]
   890a2:	3204      	adds	r2, #4
   890a4:	17f7      	asrs	r7, r6, #31
   890a6:	9207      	str	r2, [sp, #28]
   890a8:	4630      	mov	r0, r6
   890aa:	4639      	mov	r1, r7
   890ac:	e512      	b.n	88ad4 <_vfiprintf_r+0x498>
   890ae:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   890b2:	f001 fe3b 	bl	8ad2c <__retarget_lock_release_recursive>
   890b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   890ba:	e71b      	b.n	88ef4 <_vfiprintf_r+0x8b8>
   890bc:	9b02      	ldr	r3, [sp, #8]
   890be:	9302      	str	r3, [sp, #8]
   890c0:	2301      	movs	r3, #1
   890c2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   890c6:	3630      	adds	r6, #48	; 0x30
   890c8:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   890cc:	9305      	str	r3, [sp, #20]
   890ce:	e40d      	b.n	888ec <_vfiprintf_r+0x2b0>
   890d0:	aa0f      	add	r2, sp, #60	; 0x3c
   890d2:	9904      	ldr	r1, [sp, #16]
   890d4:	9806      	ldr	r0, [sp, #24]
   890d6:	f7ff fa71 	bl	885bc <__sprint_r.part.0>
   890da:	2800      	cmp	r0, #0
   890dc:	f47f af65 	bne.w	88faa <_vfiprintf_r+0x96e>
   890e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   890e2:	46d1      	mov	r9, sl
   890e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   890e6:	1c48      	adds	r0, r1, #1
   890e8:	e457      	b.n	8899a <_vfiprintf_r+0x35e>
   890ea:	aa0f      	add	r2, sp, #60	; 0x3c
   890ec:	9904      	ldr	r1, [sp, #16]
   890ee:	9806      	ldr	r0, [sp, #24]
   890f0:	f7ff fa64 	bl	885bc <__sprint_r.part.0>
   890f4:	2800      	cmp	r0, #0
   890f6:	f47f af58 	bne.w	88faa <_vfiprintf_r+0x96e>
   890fa:	9910      	ldr	r1, [sp, #64]	; 0x40
   890fc:	46d1      	mov	r9, sl
   890fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89100:	1c48      	adds	r0, r1, #1
   89102:	e644      	b.n	88d8e <_vfiprintf_r+0x752>
   89104:	2a00      	cmp	r2, #0
   89106:	f040 8087 	bne.w	89218 <_vfiprintf_r+0xbdc>
   8910a:	2001      	movs	r0, #1
   8910c:	4611      	mov	r1, r2
   8910e:	46d1      	mov	r9, sl
   89110:	e641      	b.n	88d96 <_vfiprintf_r+0x75a>
   89112:	aa0f      	add	r2, sp, #60	; 0x3c
   89114:	9904      	ldr	r1, [sp, #16]
   89116:	9806      	ldr	r0, [sp, #24]
   89118:	f7ff fa50 	bl	885bc <__sprint_r.part.0>
   8911c:	2800      	cmp	r0, #0
   8911e:	f47f af44 	bne.w	88faa <_vfiprintf_r+0x96e>
   89122:	9810      	ldr	r0, [sp, #64]	; 0x40
   89124:	46d1      	mov	r9, sl
   89126:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89128:	3001      	adds	r0, #1
   8912a:	e668      	b.n	88dfe <_vfiprintf_r+0x7c2>
   8912c:	46cb      	mov	fp, r9
   8912e:	e6d7      	b.n	88ee0 <_vfiprintf_r+0x8a4>
   89130:	9d07      	ldr	r5, [sp, #28]
   89132:	3507      	adds	r5, #7
   89134:	f025 0507 	bic.w	r5, r5, #7
   89138:	f105 0208 	add.w	r2, r5, #8
   8913c:	e9d5 0100 	ldrd	r0, r1, [r5]
   89140:	9207      	str	r2, [sp, #28]
   89142:	4606      	mov	r6, r0
   89144:	460f      	mov	r7, r1
   89146:	e4c5      	b.n	88ad4 <_vfiprintf_r+0x498>
   89148:	9d07      	ldr	r5, [sp, #28]
   8914a:	3507      	adds	r5, #7
   8914c:	f025 0207 	bic.w	r2, r5, #7
   89150:	f102 0108 	add.w	r1, r2, #8
   89154:	e9d2 6700 	ldrd	r6, r7, [r2]
   89158:	9107      	str	r1, [sp, #28]
   8915a:	2201      	movs	r2, #1
   8915c:	f7ff bba7 	b.w	888ae <_vfiprintf_r+0x272>
   89160:	9d07      	ldr	r5, [sp, #28]
   89162:	3507      	adds	r5, #7
   89164:	f025 0207 	bic.w	r2, r5, #7
   89168:	f102 0108 	add.w	r1, r2, #8
   8916c:	e9d2 6700 	ldrd	r6, r7, [r2]
   89170:	9107      	str	r1, [sp, #28]
   89172:	2200      	movs	r2, #0
   89174:	f7ff bb9b 	b.w	888ae <_vfiprintf_r+0x272>
   89178:	9d07      	ldr	r5, [sp, #28]
   8917a:	3507      	adds	r5, #7
   8917c:	f025 0107 	bic.w	r1, r5, #7
   89180:	f101 0008 	add.w	r0, r1, #8
   89184:	9007      	str	r0, [sp, #28]
   89186:	e9d1 6700 	ldrd	r6, r7, [r1]
   8918a:	e51c      	b.n	88bc6 <_vfiprintf_r+0x58a>
   8918c:	46d3      	mov	fp, sl
   8918e:	f7ff bbad 	b.w	888ec <_vfiprintf_r+0x2b0>
   89192:	252d      	movs	r5, #45	; 0x2d
   89194:	4276      	negs	r6, r6
   89196:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8919a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8919e:	2201      	movs	r2, #1
   891a0:	f7ff bb8a 	b.w	888b8 <_vfiprintf_r+0x27c>
   891a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   891a6:	b9b3      	cbnz	r3, 891d6 <_vfiprintf_r+0xb9a>
   891a8:	4611      	mov	r1, r2
   891aa:	2001      	movs	r0, #1
   891ac:	46d1      	mov	r9, sl
   891ae:	e5f2      	b.n	88d96 <_vfiprintf_r+0x75a>
   891b0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   891b4:	f001 fdba 	bl	8ad2c <__retarget_lock_release_recursive>
   891b8:	f04f 33ff 	mov.w	r3, #4294967295
   891bc:	9303      	str	r3, [sp, #12]
   891be:	f7ff bb4c 	b.w	8885a <_vfiprintf_r+0x21e>
   891c2:	aa0f      	add	r2, sp, #60	; 0x3c
   891c4:	9904      	ldr	r1, [sp, #16]
   891c6:	9806      	ldr	r0, [sp, #24]
   891c8:	f7ff f9f8 	bl	885bc <__sprint_r.part.0>
   891cc:	2800      	cmp	r0, #0
   891ce:	f47f aeec 	bne.w	88faa <_vfiprintf_r+0x96e>
   891d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   891d4:	e6aa      	b.n	88f2c <_vfiprintf_r+0x8f0>
   891d6:	2202      	movs	r2, #2
   891d8:	ab0e      	add	r3, sp, #56	; 0x38
   891da:	921d      	str	r2, [sp, #116]	; 0x74
   891dc:	931c      	str	r3, [sp, #112]	; 0x70
   891de:	2001      	movs	r0, #1
   891e0:	46d1      	mov	r9, sl
   891e2:	e5d0      	b.n	88d86 <_vfiprintf_r+0x74a>
   891e4:	4d34      	ldr	r5, [pc, #208]	; (892b8 <_vfiprintf_r+0xc7c>)
   891e6:	e5fd      	b.n	88de4 <_vfiprintf_r+0x7a8>
   891e8:	9a07      	ldr	r2, [sp, #28]
   891ea:	4613      	mov	r3, r2
   891ec:	3304      	adds	r3, #4
   891ee:	9307      	str	r3, [sp, #28]
   891f0:	9b03      	ldr	r3, [sp, #12]
   891f2:	6811      	ldr	r1, [r2, #0]
   891f4:	17dd      	asrs	r5, r3, #31
   891f6:	461a      	mov	r2, r3
   891f8:	462b      	mov	r3, r5
   891fa:	e9c1 2300 	strd	r2, r3, [r1]
   891fe:	f7ff ba5a 	b.w	886b6 <_vfiprintf_r+0x7a>
   89202:	4658      	mov	r0, fp
   89204:	9507      	str	r5, [sp, #28]
   89206:	9302      	str	r3, [sp, #8]
   89208:	f7fd fef8 	bl	86ffc <strlen>
   8920c:	2400      	movs	r4, #0
   8920e:	9005      	str	r0, [sp, #20]
   89210:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   89214:	f7ff bb6a 	b.w	888ec <_vfiprintf_r+0x2b0>
   89218:	aa0f      	add	r2, sp, #60	; 0x3c
   8921a:	9904      	ldr	r1, [sp, #16]
   8921c:	9806      	ldr	r0, [sp, #24]
   8921e:	f7ff f9cd 	bl	885bc <__sprint_r.part.0>
   89222:	2800      	cmp	r0, #0
   89224:	f47f aec1 	bne.w	88faa <_vfiprintf_r+0x96e>
   89228:	9910      	ldr	r1, [sp, #64]	; 0x40
   8922a:	46d1      	mov	r9, sl
   8922c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8922e:	1c48      	adds	r0, r1, #1
   89230:	e5b1      	b.n	88d96 <_vfiprintf_r+0x75a>
   89232:	9910      	ldr	r1, [sp, #64]	; 0x40
   89234:	9a11      	ldr	r2, [sp, #68]	; 0x44
   89236:	3101      	adds	r1, #1
   89238:	4e20      	ldr	r6, [pc, #128]	; (892bc <_vfiprintf_r+0xc80>)
   8923a:	f7ff bb9c 	b.w	88976 <_vfiprintf_r+0x33a>
   8923e:	2c06      	cmp	r4, #6
   89240:	bf28      	it	cs
   89242:	2406      	movcs	r4, #6
   89244:	9507      	str	r5, [sp, #28]
   89246:	9405      	str	r4, [sp, #20]
   89248:	9401      	str	r4, [sp, #4]
   8924a:	f8df b074 	ldr.w	fp, [pc, #116]	; 892c0 <_vfiprintf_r+0xc84>
   8924e:	e4e3      	b.n	88c18 <_vfiprintf_r+0x5dc>
   89250:	9810      	ldr	r0, [sp, #64]	; 0x40
   89252:	4e1a      	ldr	r6, [pc, #104]	; (892bc <_vfiprintf_r+0xc80>)
   89254:	3001      	adds	r0, #1
   89256:	e60e      	b.n	88e76 <_vfiprintf_r+0x83a>
   89258:	4686      	mov	lr, r0
   8925a:	4d17      	ldr	r5, [pc, #92]	; (892b8 <_vfiprintf_r+0xc7c>)
   8925c:	f7ff bbe2 	b.w	88a24 <_vfiprintf_r+0x3e8>
   89260:	9405      	str	r4, [sp, #20]
   89262:	9507      	str	r5, [sp, #28]
   89264:	9302      	str	r3, [sp, #8]
   89266:	4604      	mov	r4, r0
   89268:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8926c:	f7ff bb3e 	b.w	888ec <_vfiprintf_r+0x2b0>
   89270:	9806      	ldr	r0, [sp, #24]
   89272:	aa0f      	add	r2, sp, #60	; 0x3c
   89274:	4659      	mov	r1, fp
   89276:	f7ff f9a1 	bl	885bc <__sprint_r.part.0>
   8927a:	2800      	cmp	r0, #0
   8927c:	f43f ae2e 	beq.w	88edc <_vfiprintf_r+0x8a0>
   89280:	e62e      	b.n	88ee0 <_vfiprintf_r+0x8a4>
   89282:	9907      	ldr	r1, [sp, #28]
   89284:	f898 2001 	ldrb.w	r2, [r8, #1]
   89288:	680c      	ldr	r4, [r1, #0]
   8928a:	3104      	adds	r1, #4
   8928c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   89290:	46b8      	mov	r8, r7
   89292:	9107      	str	r1, [sp, #28]
   89294:	f7ff ba44 	b.w	88720 <_vfiprintf_r+0xe4>
   89298:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8929c:	e4a7      	b.n	88bee <_vfiprintf_r+0x5b2>
   8929e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   892a2:	e521      	b.n	88ce8 <_vfiprintf_r+0x6ac>
   892a4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   892a8:	e47c      	b.n	88ba4 <_vfiprintf_r+0x568>
   892aa:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   892ae:	e43f      	b.n	88b30 <_vfiprintf_r+0x4f4>
   892b0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   892b4:	f7ff bbfa 	b.w	88aac <_vfiprintf_r+0x470>
   892b8:	0008ced0 	.word	0x0008ced0
   892bc:	0008cec0 	.word	0x0008cec0
   892c0:	0008ce94 	.word	0x0008ce94

000892c4 <__sbprintf>:
   892c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   892c8:	460c      	mov	r4, r1
   892ca:	f04f 0e00 	mov.w	lr, #0
   892ce:	f44f 6580 	mov.w	r5, #1024	; 0x400
   892d2:	4606      	mov	r6, r0
   892d4:	4617      	mov	r7, r2
   892d6:	4698      	mov	r8, r3
   892d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   892da:	89e3      	ldrh	r3, [r4, #14]
   892dc:	8989      	ldrh	r1, [r1, #12]
   892de:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   892e2:	f021 0102 	bic.w	r1, r1, #2
   892e6:	9219      	str	r2, [sp, #100]	; 0x64
   892e8:	f8ad 300e 	strh.w	r3, [sp, #14]
   892ec:	69e2      	ldr	r2, [r4, #28]
   892ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   892f0:	f8ad 100c 	strh.w	r1, [sp, #12]
   892f4:	a816      	add	r0, sp, #88	; 0x58
   892f6:	a91a      	add	r1, sp, #104	; 0x68
   892f8:	f8cd e018 	str.w	lr, [sp, #24]
   892fc:	9207      	str	r2, [sp, #28]
   892fe:	9309      	str	r3, [sp, #36]	; 0x24
   89300:	9100      	str	r1, [sp, #0]
   89302:	9104      	str	r1, [sp, #16]
   89304:	9502      	str	r5, [sp, #8]
   89306:	9505      	str	r5, [sp, #20]
   89308:	f001 fd0a 	bl	8ad20 <__retarget_lock_init_recursive>
   8930c:	4643      	mov	r3, r8
   8930e:	463a      	mov	r2, r7
   89310:	4669      	mov	r1, sp
   89312:	4630      	mov	r0, r6
   89314:	f7ff f992 	bl	8863c <_vfiprintf_r>
   89318:	1e05      	subs	r5, r0, #0
   8931a:	db07      	blt.n	8932c <__sbprintf+0x68>
   8931c:	4630      	mov	r0, r6
   8931e:	4669      	mov	r1, sp
   89320:	f001 f8dc 	bl	8a4dc <_fflush_r>
   89324:	2800      	cmp	r0, #0
   89326:	bf18      	it	ne
   89328:	f04f 35ff 	movne.w	r5, #4294967295
   8932c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89330:	065b      	lsls	r3, r3, #25
   89332:	d503      	bpl.n	8933c <__sbprintf+0x78>
   89334:	89a3      	ldrh	r3, [r4, #12]
   89336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8933a:	81a3      	strh	r3, [r4, #12]
   8933c:	9816      	ldr	r0, [sp, #88]	; 0x58
   8933e:	f001 fcf1 	bl	8ad24 <__retarget_lock_close_recursive>
   89342:	4628      	mov	r0, r5
   89344:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   89348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008934c <__swsetup_r>:
   8934c:	b538      	push	{r3, r4, r5, lr}
   8934e:	4b30      	ldr	r3, [pc, #192]	; (89410 <__swsetup_r+0xc4>)
   89350:	4605      	mov	r5, r0
   89352:	6818      	ldr	r0, [r3, #0]
   89354:	460c      	mov	r4, r1
   89356:	b110      	cbz	r0, 8935e <__swsetup_r+0x12>
   89358:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8935a:	2b00      	cmp	r3, #0
   8935c:	d038      	beq.n	893d0 <__swsetup_r+0x84>
   8935e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   89362:	b293      	uxth	r3, r2
   89364:	0718      	lsls	r0, r3, #28
   89366:	d50c      	bpl.n	89382 <__swsetup_r+0x36>
   89368:	6920      	ldr	r0, [r4, #16]
   8936a:	b1a8      	cbz	r0, 89398 <__swsetup_r+0x4c>
   8936c:	f013 0201 	ands.w	r2, r3, #1
   89370:	d01e      	beq.n	893b0 <__swsetup_r+0x64>
   89372:	2200      	movs	r2, #0
   89374:	6963      	ldr	r3, [r4, #20]
   89376:	60a2      	str	r2, [r4, #8]
   89378:	425b      	negs	r3, r3
   8937a:	61a3      	str	r3, [r4, #24]
   8937c:	b1f0      	cbz	r0, 893bc <__swsetup_r+0x70>
   8937e:	2000      	movs	r0, #0
   89380:	bd38      	pop	{r3, r4, r5, pc}
   89382:	06d9      	lsls	r1, r3, #27
   89384:	d53b      	bpl.n	893fe <__swsetup_r+0xb2>
   89386:	0758      	lsls	r0, r3, #29
   89388:	d425      	bmi.n	893d6 <__swsetup_r+0x8a>
   8938a:	6920      	ldr	r0, [r4, #16]
   8938c:	f042 0308 	orr.w	r3, r2, #8
   89390:	81a3      	strh	r3, [r4, #12]
   89392:	b29b      	uxth	r3, r3
   89394:	2800      	cmp	r0, #0
   89396:	d1e9      	bne.n	8936c <__swsetup_r+0x20>
   89398:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8939c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   893a0:	d0e4      	beq.n	8936c <__swsetup_r+0x20>
   893a2:	4628      	mov	r0, r5
   893a4:	4621      	mov	r1, r4
   893a6:	f001 fcf1 	bl	8ad8c <__smakebuf_r>
   893aa:	89a3      	ldrh	r3, [r4, #12]
   893ac:	6920      	ldr	r0, [r4, #16]
   893ae:	e7dd      	b.n	8936c <__swsetup_r+0x20>
   893b0:	0799      	lsls	r1, r3, #30
   893b2:	bf58      	it	pl
   893b4:	6962      	ldrpl	r2, [r4, #20]
   893b6:	60a2      	str	r2, [r4, #8]
   893b8:	2800      	cmp	r0, #0
   893ba:	d1e0      	bne.n	8937e <__swsetup_r+0x32>
   893bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   893c0:	061a      	lsls	r2, r3, #24
   893c2:	d5dd      	bpl.n	89380 <__swsetup_r+0x34>
   893c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   893c8:	81a3      	strh	r3, [r4, #12]
   893ca:	f04f 30ff 	mov.w	r0, #4294967295
   893ce:	bd38      	pop	{r3, r4, r5, pc}
   893d0:	f001 f8dc 	bl	8a58c <__sinit>
   893d4:	e7c3      	b.n	8935e <__swsetup_r+0x12>
   893d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   893d8:	b151      	cbz	r1, 893f0 <__swsetup_r+0xa4>
   893da:	f104 0340 	add.w	r3, r4, #64	; 0x40
   893de:	4299      	cmp	r1, r3
   893e0:	d004      	beq.n	893ec <__swsetup_r+0xa0>
   893e2:	4628      	mov	r0, r5
   893e4:	f001 f9f8 	bl	8a7d8 <_free_r>
   893e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   893ec:	2300      	movs	r3, #0
   893ee:	6323      	str	r3, [r4, #48]	; 0x30
   893f0:	2300      	movs	r3, #0
   893f2:	6920      	ldr	r0, [r4, #16]
   893f4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   893f8:	e884 0009 	stmia.w	r4, {r0, r3}
   893fc:	e7c6      	b.n	8938c <__swsetup_r+0x40>
   893fe:	2309      	movs	r3, #9
   89400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   89404:	602b      	str	r3, [r5, #0]
   89406:	f04f 30ff 	mov.w	r0, #4294967295
   8940a:	81a2      	strh	r2, [r4, #12]
   8940c:	bd38      	pop	{r3, r4, r5, pc}
   8940e:	bf00      	nop
   89410:	20000aac 	.word	0x20000aac

00089414 <register_fini>:
   89414:	4b02      	ldr	r3, [pc, #8]	; (89420 <register_fini+0xc>)
   89416:	b113      	cbz	r3, 8941e <register_fini+0xa>
   89418:	4802      	ldr	r0, [pc, #8]	; (89424 <register_fini+0x10>)
   8941a:	f000 b805 	b.w	89428 <atexit>
   8941e:	4770      	bx	lr
   89420:	00000000 	.word	0x00000000
   89424:	0008a605 	.word	0x0008a605

00089428 <atexit>:
   89428:	2300      	movs	r3, #0
   8942a:	4601      	mov	r1, r0
   8942c:	461a      	mov	r2, r3
   8942e:	4618      	mov	r0, r3
   89430:	f002 be96 	b.w	8c160 <__register_exitproc>

00089434 <quorem>:
   89434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89438:	6903      	ldr	r3, [r0, #16]
   8943a:	690f      	ldr	r7, [r1, #16]
   8943c:	b083      	sub	sp, #12
   8943e:	429f      	cmp	r7, r3
   89440:	f300 8088 	bgt.w	89554 <quorem+0x120>
   89444:	3f01      	subs	r7, #1
   89446:	f101 0614 	add.w	r6, r1, #20
   8944a:	f100 0a14 	add.w	sl, r0, #20
   8944e:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   89452:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   89456:	3301      	adds	r3, #1
   89458:	fbb2 f8f3 	udiv	r8, r2, r3
   8945c:	00bb      	lsls	r3, r7, #2
   8945e:	9300      	str	r3, [sp, #0]
   89460:	eb06 0903 	add.w	r9, r6, r3
   89464:	4453      	add	r3, sl
   89466:	9301      	str	r3, [sp, #4]
   89468:	f1b8 0f00 	cmp.w	r8, #0
   8946c:	d03b      	beq.n	894e6 <quorem+0xb2>
   8946e:	2300      	movs	r3, #0
   89470:	46b4      	mov	ip, r6
   89472:	461c      	mov	r4, r3
   89474:	46d6      	mov	lr, sl
   89476:	f85c 2b04 	ldr.w	r2, [ip], #4
   8947a:	f8de 5000 	ldr.w	r5, [lr]
   8947e:	fa1f fb82 	uxth.w	fp, r2
   89482:	fb08 330b 	mla	r3, r8, fp, r3
   89486:	0c12      	lsrs	r2, r2, #16
   89488:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   8948c:	fb08 bb02 	mla	fp, r8, r2, fp
   89490:	b29a      	uxth	r2, r3
   89492:	1aa2      	subs	r2, r4, r2
   89494:	b2ab      	uxth	r3, r5
   89496:	fa1f f48b 	uxth.w	r4, fp
   8949a:	441a      	add	r2, r3
   8949c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   894a0:	eb04 4422 	add.w	r4, r4, r2, asr #16
   894a4:	b292      	uxth	r2, r2
   894a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   894aa:	45e1      	cmp	r9, ip
   894ac:	f84e 2b04 	str.w	r2, [lr], #4
   894b0:	ea4f 4424 	mov.w	r4, r4, asr #16
   894b4:	ea4f 431b 	mov.w	r3, fp, lsr #16
   894b8:	d2dd      	bcs.n	89476 <quorem+0x42>
   894ba:	9b00      	ldr	r3, [sp, #0]
   894bc:	f85a 3003 	ldr.w	r3, [sl, r3]
   894c0:	b98b      	cbnz	r3, 894e6 <quorem+0xb2>
   894c2:	9c01      	ldr	r4, [sp, #4]
   894c4:	1f23      	subs	r3, r4, #4
   894c6:	459a      	cmp	sl, r3
   894c8:	d20c      	bcs.n	894e4 <quorem+0xb0>
   894ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   894ce:	b94b      	cbnz	r3, 894e4 <quorem+0xb0>
   894d0:	f1a4 0308 	sub.w	r3, r4, #8
   894d4:	e002      	b.n	894dc <quorem+0xa8>
   894d6:	681a      	ldr	r2, [r3, #0]
   894d8:	3b04      	subs	r3, #4
   894da:	b91a      	cbnz	r2, 894e4 <quorem+0xb0>
   894dc:	459a      	cmp	sl, r3
   894de:	f107 37ff 	add.w	r7, r7, #4294967295
   894e2:	d3f8      	bcc.n	894d6 <quorem+0xa2>
   894e4:	6107      	str	r7, [r0, #16]
   894e6:	4604      	mov	r4, r0
   894e8:	f002 fa0e 	bl	8b908 <__mcmp>
   894ec:	2800      	cmp	r0, #0
   894ee:	db2d      	blt.n	8954c <quorem+0x118>
   894f0:	4655      	mov	r5, sl
   894f2:	2300      	movs	r3, #0
   894f4:	f108 0801 	add.w	r8, r8, #1
   894f8:	f856 1b04 	ldr.w	r1, [r6], #4
   894fc:	6828      	ldr	r0, [r5, #0]
   894fe:	b28a      	uxth	r2, r1
   89500:	1a9a      	subs	r2, r3, r2
   89502:	0c0b      	lsrs	r3, r1, #16
   89504:	b281      	uxth	r1, r0
   89506:	440a      	add	r2, r1
   89508:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   8950c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89510:	b292      	uxth	r2, r2
   89512:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89516:	45b1      	cmp	r9, r6
   89518:	f845 2b04 	str.w	r2, [r5], #4
   8951c:	ea4f 4323 	mov.w	r3, r3, asr #16
   89520:	d2ea      	bcs.n	894f8 <quorem+0xc4>
   89522:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   89526:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8952a:	b97a      	cbnz	r2, 8954c <quorem+0x118>
   8952c:	1f1a      	subs	r2, r3, #4
   8952e:	4592      	cmp	sl, r2
   89530:	d20b      	bcs.n	8954a <quorem+0x116>
   89532:	f853 2c04 	ldr.w	r2, [r3, #-4]
   89536:	b942      	cbnz	r2, 8954a <quorem+0x116>
   89538:	3b08      	subs	r3, #8
   8953a:	e002      	b.n	89542 <quorem+0x10e>
   8953c:	681a      	ldr	r2, [r3, #0]
   8953e:	3b04      	subs	r3, #4
   89540:	b91a      	cbnz	r2, 8954a <quorem+0x116>
   89542:	459a      	cmp	sl, r3
   89544:	f107 37ff 	add.w	r7, r7, #4294967295
   89548:	d3f8      	bcc.n	8953c <quorem+0x108>
   8954a:	6127      	str	r7, [r4, #16]
   8954c:	4640      	mov	r0, r8
   8954e:	b003      	add	sp, #12
   89550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89554:	2000      	movs	r0, #0
   89556:	b003      	add	sp, #12
   89558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8955c:	0000      	movs	r0, r0
	...

00089560 <_dtoa_r>:
   89560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89564:	6c05      	ldr	r5, [r0, #64]	; 0x40
   89566:	b09b      	sub	sp, #108	; 0x6c
   89568:	4604      	mov	r4, r0
   8956a:	4692      	mov	sl, r2
   8956c:	469b      	mov	fp, r3
   8956e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   89570:	b14d      	cbz	r5, 89586 <_dtoa_r+0x26>
   89572:	2301      	movs	r3, #1
   89574:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89576:	4629      	mov	r1, r5
   89578:	4093      	lsls	r3, r2
   8957a:	60ab      	str	r3, [r5, #8]
   8957c:	606a      	str	r2, [r5, #4]
   8957e:	f001 ffeb 	bl	8b558 <_Bfree>
   89582:	2300      	movs	r3, #0
   89584:	6423      	str	r3, [r4, #64]	; 0x40
   89586:	f1bb 0f00 	cmp.w	fp, #0
   8958a:	465d      	mov	r5, fp
   8958c:	db35      	blt.n	895fa <_dtoa_r+0x9a>
   8958e:	2300      	movs	r3, #0
   89590:	6033      	str	r3, [r6, #0]
   89592:	4b9d      	ldr	r3, [pc, #628]	; (89808 <_dtoa_r+0x2a8>)
   89594:	43ab      	bics	r3, r5
   89596:	d015      	beq.n	895c4 <_dtoa_r+0x64>
   89598:	2200      	movs	r2, #0
   8959a:	2300      	movs	r3, #0
   8959c:	4650      	mov	r0, sl
   8959e:	4659      	mov	r1, fp
   895a0:	f003 fb56 	bl	8cc50 <__aeabi_dcmpeq>
   895a4:	4680      	mov	r8, r0
   895a6:	2800      	cmp	r0, #0
   895a8:	d02d      	beq.n	89606 <_dtoa_r+0xa6>
   895aa:	2301      	movs	r3, #1
   895ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
   895ae:	6013      	str	r3, [r2, #0]
   895b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   895b2:	2b00      	cmp	r3, #0
   895b4:	f000 80bd 	beq.w	89732 <_dtoa_r+0x1d2>
   895b8:	4894      	ldr	r0, [pc, #592]	; (8980c <_dtoa_r+0x2ac>)
   895ba:	6018      	str	r0, [r3, #0]
   895bc:	3801      	subs	r0, #1
   895be:	b01b      	add	sp, #108	; 0x6c
   895c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895c4:	f242 730f 	movw	r3, #9999	; 0x270f
   895c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   895ca:	6013      	str	r3, [r2, #0]
   895cc:	f1ba 0f00 	cmp.w	sl, #0
   895d0:	d10d      	bne.n	895ee <_dtoa_r+0x8e>
   895d2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   895d6:	b955      	cbnz	r5, 895ee <_dtoa_r+0x8e>
   895d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   895da:	488d      	ldr	r0, [pc, #564]	; (89810 <_dtoa_r+0x2b0>)
   895dc:	2b00      	cmp	r3, #0
   895de:	d0ee      	beq.n	895be <_dtoa_r+0x5e>
   895e0:	f100 0308 	add.w	r3, r0, #8
   895e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   895e6:	6013      	str	r3, [r2, #0]
   895e8:	b01b      	add	sp, #108	; 0x6c
   895ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   895f0:	4888      	ldr	r0, [pc, #544]	; (89814 <_dtoa_r+0x2b4>)
   895f2:	2b00      	cmp	r3, #0
   895f4:	d0e3      	beq.n	895be <_dtoa_r+0x5e>
   895f6:	1cc3      	adds	r3, r0, #3
   895f8:	e7f4      	b.n	895e4 <_dtoa_r+0x84>
   895fa:	2301      	movs	r3, #1
   895fc:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   89600:	6033      	str	r3, [r6, #0]
   89602:	46ab      	mov	fp, r5
   89604:	e7c5      	b.n	89592 <_dtoa_r+0x32>
   89606:	aa18      	add	r2, sp, #96	; 0x60
   89608:	ab19      	add	r3, sp, #100	; 0x64
   8960a:	9201      	str	r2, [sp, #4]
   8960c:	9300      	str	r3, [sp, #0]
   8960e:	4652      	mov	r2, sl
   89610:	465b      	mov	r3, fp
   89612:	4620      	mov	r0, r4
   89614:	f002 fa22 	bl	8ba5c <__d2b>
   89618:	0d2b      	lsrs	r3, r5, #20
   8961a:	4681      	mov	r9, r0
   8961c:	d071      	beq.n	89702 <_dtoa_r+0x1a2>
   8961e:	4650      	mov	r0, sl
   89620:	f3cb 0213 	ubfx	r2, fp, #0, #20
   89624:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   89628:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8962a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8962e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   89632:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89636:	2200      	movs	r2, #0
   89638:	4b77      	ldr	r3, [pc, #476]	; (89818 <_dtoa_r+0x2b8>)
   8963a:	f002 feed 	bl	8c418 <__aeabi_dsub>
   8963e:	a36c      	add	r3, pc, #432	; (adr r3, 897f0 <_dtoa_r+0x290>)
   89640:	e9d3 2300 	ldrd	r2, r3, [r3]
   89644:	f003 f89c 	bl	8c780 <__aeabi_dmul>
   89648:	a36b      	add	r3, pc, #428	; (adr r3, 897f8 <_dtoa_r+0x298>)
   8964a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8964e:	f002 fee5 	bl	8c41c <__adddf3>
   89652:	e9cd 0102 	strd	r0, r1, [sp, #8]
   89656:	4630      	mov	r0, r6
   89658:	f003 f82c 	bl	8c6b4 <__aeabi_i2d>
   8965c:	a368      	add	r3, pc, #416	; (adr r3, 89800 <_dtoa_r+0x2a0>)
   8965e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89662:	f003 f88d 	bl	8c780 <__aeabi_dmul>
   89666:	4602      	mov	r2, r0
   89668:	460b      	mov	r3, r1
   8966a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8966e:	f002 fed5 	bl	8c41c <__adddf3>
   89672:	e9cd 0104 	strd	r0, r1, [sp, #16]
   89676:	f003 fb33 	bl	8cce0 <__aeabi_d2iz>
   8967a:	2200      	movs	r2, #0
   8967c:	9002      	str	r0, [sp, #8]
   8967e:	2300      	movs	r3, #0
   89680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89684:	f003 faee 	bl	8cc64 <__aeabi_dcmplt>
   89688:	2800      	cmp	r0, #0
   8968a:	f040 816d 	bne.w	89968 <_dtoa_r+0x408>
   8968e:	9d02      	ldr	r5, [sp, #8]
   89690:	2d16      	cmp	r5, #22
   89692:	f200 8157 	bhi.w	89944 <_dtoa_r+0x3e4>
   89696:	4961      	ldr	r1, [pc, #388]	; (8981c <_dtoa_r+0x2bc>)
   89698:	4652      	mov	r2, sl
   8969a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8969e:	465b      	mov	r3, fp
   896a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   896a4:	f003 fafc 	bl	8cca0 <__aeabi_dcmpgt>
   896a8:	2800      	cmp	r0, #0
   896aa:	f000 81be 	beq.w	89a2a <_dtoa_r+0x4ca>
   896ae:	1e6b      	subs	r3, r5, #1
   896b0:	9302      	str	r3, [sp, #8]
   896b2:	2300      	movs	r3, #0
   896b4:	930e      	str	r3, [sp, #56]	; 0x38
   896b6:	1bbf      	subs	r7, r7, r6
   896b8:	1e7b      	subs	r3, r7, #1
   896ba:	9308      	str	r3, [sp, #32]
   896bc:	f100 814e 	bmi.w	8995c <_dtoa_r+0x3fc>
   896c0:	2300      	movs	r3, #0
   896c2:	930a      	str	r3, [sp, #40]	; 0x28
   896c4:	9b02      	ldr	r3, [sp, #8]
   896c6:	2b00      	cmp	r3, #0
   896c8:	f2c0 813f 	blt.w	8994a <_dtoa_r+0x3ea>
   896cc:	9a08      	ldr	r2, [sp, #32]
   896ce:	930d      	str	r3, [sp, #52]	; 0x34
   896d0:	4611      	mov	r1, r2
   896d2:	4419      	add	r1, r3
   896d4:	2300      	movs	r3, #0
   896d6:	9108      	str	r1, [sp, #32]
   896d8:	930c      	str	r3, [sp, #48]	; 0x30
   896da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896dc:	2b09      	cmp	r3, #9
   896de:	d82a      	bhi.n	89736 <_dtoa_r+0x1d6>
   896e0:	2b05      	cmp	r3, #5
   896e2:	f340 8658 	ble.w	8a396 <_dtoa_r+0xe36>
   896e6:	2500      	movs	r5, #0
   896e8:	3b04      	subs	r3, #4
   896ea:	9324      	str	r3, [sp, #144]	; 0x90
   896ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896ee:	3b02      	subs	r3, #2
   896f0:	2b03      	cmp	r3, #3
   896f2:	f200 863f 	bhi.w	8a374 <_dtoa_r+0xe14>
   896f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   896fa:	03ce      	.short	0x03ce
   896fc:	03d902c3 	.word	0x03d902c3
   89700:	045b      	.short	0x045b
   89702:	9f18      	ldr	r7, [sp, #96]	; 0x60
   89704:	9e19      	ldr	r6, [sp, #100]	; 0x64
   89706:	443e      	add	r6, r7
   89708:	f206 4332 	addw	r3, r6, #1074	; 0x432
   8970c:	2b20      	cmp	r3, #32
   8970e:	f340 8187 	ble.w	89a20 <_dtoa_r+0x4c0>
   89712:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   89716:	f206 4012 	addw	r0, r6, #1042	; 0x412
   8971a:	409d      	lsls	r5, r3
   8971c:	fa2a f000 	lsr.w	r0, sl, r0
   89720:	4328      	orrs	r0, r5
   89722:	f002 ffb7 	bl	8c694 <__aeabi_ui2d>
   89726:	2301      	movs	r3, #1
   89728:	3e01      	subs	r6, #1
   8972a:	9314      	str	r3, [sp, #80]	; 0x50
   8972c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89730:	e781      	b.n	89636 <_dtoa_r+0xd6>
   89732:	483b      	ldr	r0, [pc, #236]	; (89820 <_dtoa_r+0x2c0>)
   89734:	e743      	b.n	895be <_dtoa_r+0x5e>
   89736:	2100      	movs	r1, #0
   89738:	4620      	mov	r0, r4
   8973a:	6461      	str	r1, [r4, #68]	; 0x44
   8973c:	9125      	str	r1, [sp, #148]	; 0x94
   8973e:	f001 fee5 	bl	8b50c <_Balloc>
   89742:	f04f 33ff 	mov.w	r3, #4294967295
   89746:	9307      	str	r3, [sp, #28]
   89748:	930f      	str	r3, [sp, #60]	; 0x3c
   8974a:	2301      	movs	r3, #1
   8974c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8974e:	9004      	str	r0, [sp, #16]
   89750:	6420      	str	r0, [r4, #64]	; 0x40
   89752:	9224      	str	r2, [sp, #144]	; 0x90
   89754:	930b      	str	r3, [sp, #44]	; 0x2c
   89756:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89758:	2b00      	cmp	r3, #0
   8975a:	f2c0 80d3 	blt.w	89904 <_dtoa_r+0x3a4>
   8975e:	9a02      	ldr	r2, [sp, #8]
   89760:	2a0e      	cmp	r2, #14
   89762:	f300 80cf 	bgt.w	89904 <_dtoa_r+0x3a4>
   89766:	4b2d      	ldr	r3, [pc, #180]	; (8981c <_dtoa_r+0x2bc>)
   89768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8976c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89770:	e9cd 2308 	strd	r2, r3, [sp, #32]
   89774:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89776:	2b00      	cmp	r3, #0
   89778:	f2c0 83b4 	blt.w	89ee4 <_dtoa_r+0x984>
   8977c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   89780:	4650      	mov	r0, sl
   89782:	462a      	mov	r2, r5
   89784:	4633      	mov	r3, r6
   89786:	4659      	mov	r1, fp
   89788:	f003 f924 	bl	8c9d4 <__aeabi_ddiv>
   8978c:	f003 faa8 	bl	8cce0 <__aeabi_d2iz>
   89790:	4680      	mov	r8, r0
   89792:	f002 ff8f 	bl	8c6b4 <__aeabi_i2d>
   89796:	462a      	mov	r2, r5
   89798:	4633      	mov	r3, r6
   8979a:	f002 fff1 	bl	8c780 <__aeabi_dmul>
   8979e:	4602      	mov	r2, r0
   897a0:	460b      	mov	r3, r1
   897a2:	4650      	mov	r0, sl
   897a4:	4659      	mov	r1, fp
   897a6:	f002 fe37 	bl	8c418 <__aeabi_dsub>
   897aa:	9e07      	ldr	r6, [sp, #28]
   897ac:	9f04      	ldr	r7, [sp, #16]
   897ae:	f108 0530 	add.w	r5, r8, #48	; 0x30
   897b2:	2e01      	cmp	r6, #1
   897b4:	703d      	strb	r5, [r7, #0]
   897b6:	4602      	mov	r2, r0
   897b8:	460b      	mov	r3, r1
   897ba:	f107 0501 	add.w	r5, r7, #1
   897be:	d064      	beq.n	8988a <_dtoa_r+0x32a>
   897c0:	2200      	movs	r2, #0
   897c2:	4b18      	ldr	r3, [pc, #96]	; (89824 <_dtoa_r+0x2c4>)
   897c4:	f002 ffdc 	bl	8c780 <__aeabi_dmul>
   897c8:	2200      	movs	r2, #0
   897ca:	2300      	movs	r3, #0
   897cc:	4606      	mov	r6, r0
   897ce:	460f      	mov	r7, r1
   897d0:	f003 fa3e 	bl	8cc50 <__aeabi_dcmpeq>
   897d4:	2800      	cmp	r0, #0
   897d6:	f040 8082 	bne.w	898de <_dtoa_r+0x37e>
   897da:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   897de:	f04f 0a00 	mov.w	sl, #0
   897e2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   897e6:	f04f 0b00 	mov.w	fp, #0
   897ea:	940b      	str	r4, [sp, #44]	; 0x2c
   897ec:	e029      	b.n	89842 <_dtoa_r+0x2e2>
   897ee:	bf00      	nop
   897f0:	636f4361 	.word	0x636f4361
   897f4:	3fd287a7 	.word	0x3fd287a7
   897f8:	8b60c8b3 	.word	0x8b60c8b3
   897fc:	3fc68a28 	.word	0x3fc68a28
   89800:	509f79fb 	.word	0x509f79fb
   89804:	3fd34413 	.word	0x3fd34413
   89808:	7ff00000 	.word	0x7ff00000
   8980c:	0008ce9d 	.word	0x0008ce9d
   89810:	0008cee0 	.word	0x0008cee0
   89814:	0008ceec 	.word	0x0008ceec
   89818:	3ff80000 	.word	0x3ff80000
   8981c:	0008cf28 	.word	0x0008cf28
   89820:	0008ce9c 	.word	0x0008ce9c
   89824:	40240000 	.word	0x40240000
   89828:	2200      	movs	r2, #0
   8982a:	4b81      	ldr	r3, [pc, #516]	; (89a30 <_dtoa_r+0x4d0>)
   8982c:	f002 ffa8 	bl	8c780 <__aeabi_dmul>
   89830:	4652      	mov	r2, sl
   89832:	465b      	mov	r3, fp
   89834:	4606      	mov	r6, r0
   89836:	460f      	mov	r7, r1
   89838:	f003 fa0a 	bl	8cc50 <__aeabi_dcmpeq>
   8983c:	2800      	cmp	r0, #0
   8983e:	f040 83ba 	bne.w	89fb6 <_dtoa_r+0xa56>
   89842:	4642      	mov	r2, r8
   89844:	464b      	mov	r3, r9
   89846:	4630      	mov	r0, r6
   89848:	4639      	mov	r1, r7
   8984a:	f003 f8c3 	bl	8c9d4 <__aeabi_ddiv>
   8984e:	f003 fa47 	bl	8cce0 <__aeabi_d2iz>
   89852:	4604      	mov	r4, r0
   89854:	f002 ff2e 	bl	8c6b4 <__aeabi_i2d>
   89858:	4642      	mov	r2, r8
   8985a:	464b      	mov	r3, r9
   8985c:	f002 ff90 	bl	8c780 <__aeabi_dmul>
   89860:	4602      	mov	r2, r0
   89862:	460b      	mov	r3, r1
   89864:	4630      	mov	r0, r6
   89866:	4639      	mov	r1, r7
   89868:	f002 fdd6 	bl	8c418 <__aeabi_dsub>
   8986c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   89870:	f805 6b01 	strb.w	r6, [r5], #1
   89874:	9e04      	ldr	r6, [sp, #16]
   89876:	9f07      	ldr	r7, [sp, #28]
   89878:	1bae      	subs	r6, r5, r6
   8987a:	42be      	cmp	r6, r7
   8987c:	4602      	mov	r2, r0
   8987e:	460b      	mov	r3, r1
   89880:	d1d2      	bne.n	89828 <_dtoa_r+0x2c8>
   89882:	46a0      	mov	r8, r4
   89884:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89888:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8988a:	4610      	mov	r0, r2
   8988c:	4619      	mov	r1, r3
   8988e:	f002 fdc5 	bl	8c41c <__adddf3>
   89892:	4606      	mov	r6, r0
   89894:	460f      	mov	r7, r1
   89896:	4602      	mov	r2, r0
   89898:	460b      	mov	r3, r1
   8989a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8989e:	f003 f9e1 	bl	8cc64 <__aeabi_dcmplt>
   898a2:	b948      	cbnz	r0, 898b8 <_dtoa_r+0x358>
   898a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   898a8:	4632      	mov	r2, r6
   898aa:	463b      	mov	r3, r7
   898ac:	f003 f9d0 	bl	8cc50 <__aeabi_dcmpeq>
   898b0:	b1a8      	cbz	r0, 898de <_dtoa_r+0x37e>
   898b2:	f018 0f01 	tst.w	r8, #1
   898b6:	d012      	beq.n	898de <_dtoa_r+0x37e>
   898b8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   898bc:	1e6b      	subs	r3, r5, #1
   898be:	9a04      	ldr	r2, [sp, #16]
   898c0:	e004      	b.n	898cc <_dtoa_r+0x36c>
   898c2:	429a      	cmp	r2, r3
   898c4:	f000 8402 	beq.w	8a0cc <_dtoa_r+0xb6c>
   898c8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   898cc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   898d0:	f103 0501 	add.w	r5, r3, #1
   898d4:	d0f5      	beq.n	898c2 <_dtoa_r+0x362>
   898d6:	f108 0801 	add.w	r8, r8, #1
   898da:	f883 8000 	strb.w	r8, [r3]
   898de:	4649      	mov	r1, r9
   898e0:	4620      	mov	r0, r4
   898e2:	f001 fe39 	bl	8b558 <_Bfree>
   898e6:	2200      	movs	r2, #0
   898e8:	9b02      	ldr	r3, [sp, #8]
   898ea:	702a      	strb	r2, [r5, #0]
   898ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
   898ee:	3301      	adds	r3, #1
   898f0:	6013      	str	r3, [r2, #0]
   898f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   898f4:	2b00      	cmp	r3, #0
   898f6:	f000 839f 	beq.w	8a038 <_dtoa_r+0xad8>
   898fa:	9804      	ldr	r0, [sp, #16]
   898fc:	601d      	str	r5, [r3, #0]
   898fe:	b01b      	add	sp, #108	; 0x6c
   89900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89906:	2a00      	cmp	r2, #0
   89908:	d03e      	beq.n	89988 <_dtoa_r+0x428>
   8990a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8990c:	2a01      	cmp	r2, #1
   8990e:	f340 8311 	ble.w	89f34 <_dtoa_r+0x9d4>
   89912:	9b07      	ldr	r3, [sp, #28]
   89914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89916:	1e5f      	subs	r7, r3, #1
   89918:	42ba      	cmp	r2, r7
   8991a:	f2c0 8390 	blt.w	8a03e <_dtoa_r+0xade>
   8991e:	1bd7      	subs	r7, r2, r7
   89920:	9b07      	ldr	r3, [sp, #28]
   89922:	2b00      	cmp	r3, #0
   89924:	f2c0 848c 	blt.w	8a240 <_dtoa_r+0xce0>
   89928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8992a:	9b07      	ldr	r3, [sp, #28]
   8992c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8992e:	2101      	movs	r1, #1
   89930:	441a      	add	r2, r3
   89932:	920a      	str	r2, [sp, #40]	; 0x28
   89934:	9a08      	ldr	r2, [sp, #32]
   89936:	4620      	mov	r0, r4
   89938:	441a      	add	r2, r3
   8993a:	9208      	str	r2, [sp, #32]
   8993c:	f001 fea8 	bl	8b690 <__i2b>
   89940:	4606      	mov	r6, r0
   89942:	e023      	b.n	8998c <_dtoa_r+0x42c>
   89944:	2301      	movs	r3, #1
   89946:	930e      	str	r3, [sp, #56]	; 0x38
   89948:	e6b5      	b.n	896b6 <_dtoa_r+0x156>
   8994a:	2300      	movs	r3, #0
   8994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8994e:	930d      	str	r3, [sp, #52]	; 0x34
   89950:	9b02      	ldr	r3, [sp, #8]
   89952:	1ad2      	subs	r2, r2, r3
   89954:	425b      	negs	r3, r3
   89956:	920a      	str	r2, [sp, #40]	; 0x28
   89958:	930c      	str	r3, [sp, #48]	; 0x30
   8995a:	e6be      	b.n	896da <_dtoa_r+0x17a>
   8995c:	f1c7 0301 	rsb	r3, r7, #1
   89960:	930a      	str	r3, [sp, #40]	; 0x28
   89962:	2300      	movs	r3, #0
   89964:	9308      	str	r3, [sp, #32]
   89966:	e6ad      	b.n	896c4 <_dtoa_r+0x164>
   89968:	9d02      	ldr	r5, [sp, #8]
   8996a:	4628      	mov	r0, r5
   8996c:	f002 fea2 	bl	8c6b4 <__aeabi_i2d>
   89970:	4602      	mov	r2, r0
   89972:	460b      	mov	r3, r1
   89974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89978:	f003 f96a 	bl	8cc50 <__aeabi_dcmpeq>
   8997c:	2800      	cmp	r0, #0
   8997e:	f47f ae86 	bne.w	8968e <_dtoa_r+0x12e>
   89982:	1e6b      	subs	r3, r5, #1
   89984:	9302      	str	r3, [sp, #8]
   89986:	e682      	b.n	8968e <_dtoa_r+0x12e>
   89988:	ad0a      	add	r5, sp, #40	; 0x28
   8998a:	cde0      	ldmia	r5, {r5, r6, r7}
   8998c:	2d00      	cmp	r5, #0
   8998e:	dd0c      	ble.n	899aa <_dtoa_r+0x44a>
   89990:	9908      	ldr	r1, [sp, #32]
   89992:	2900      	cmp	r1, #0
   89994:	460b      	mov	r3, r1
   89996:	dd08      	ble.n	899aa <_dtoa_r+0x44a>
   89998:	42a9      	cmp	r1, r5
   8999a:	bfa8      	it	ge
   8999c:	462b      	movge	r3, r5
   8999e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   899a0:	1aed      	subs	r5, r5, r3
   899a2:	1ad2      	subs	r2, r2, r3
   899a4:	1acb      	subs	r3, r1, r3
   899a6:	920a      	str	r2, [sp, #40]	; 0x28
   899a8:	9308      	str	r3, [sp, #32]
   899aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   899ac:	b1d3      	cbz	r3, 899e4 <_dtoa_r+0x484>
   899ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   899b0:	2b00      	cmp	r3, #0
   899b2:	f000 82b8 	beq.w	89f26 <_dtoa_r+0x9c6>
   899b6:	2f00      	cmp	r7, #0
   899b8:	dd10      	ble.n	899dc <_dtoa_r+0x47c>
   899ba:	4631      	mov	r1, r6
   899bc:	463a      	mov	r2, r7
   899be:	4620      	mov	r0, r4
   899c0:	f001 ff02 	bl	8b7c8 <__pow5mult>
   899c4:	464a      	mov	r2, r9
   899c6:	4601      	mov	r1, r0
   899c8:	4606      	mov	r6, r0
   899ca:	4620      	mov	r0, r4
   899cc:	f001 fe6a 	bl	8b6a4 <__multiply>
   899d0:	4603      	mov	r3, r0
   899d2:	4649      	mov	r1, r9
   899d4:	4620      	mov	r0, r4
   899d6:	4699      	mov	r9, r3
   899d8:	f001 fdbe 	bl	8b558 <_Bfree>
   899dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   899de:	1bda      	subs	r2, r3, r7
   899e0:	f040 82a2 	bne.w	89f28 <_dtoa_r+0x9c8>
   899e4:	2101      	movs	r1, #1
   899e6:	4620      	mov	r0, r4
   899e8:	f001 fe52 	bl	8b690 <__i2b>
   899ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   899ee:	4680      	mov	r8, r0
   899f0:	2b00      	cmp	r3, #0
   899f2:	dd1f      	ble.n	89a34 <_dtoa_r+0x4d4>
   899f4:	4601      	mov	r1, r0
   899f6:	461a      	mov	r2, r3
   899f8:	4620      	mov	r0, r4
   899fa:	f001 fee5 	bl	8b7c8 <__pow5mult>
   899fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89a00:	4680      	mov	r8, r0
   89a02:	2b01      	cmp	r3, #1
   89a04:	f340 8255 	ble.w	89eb2 <_dtoa_r+0x952>
   89a08:	2300      	movs	r3, #0
   89a0a:	930c      	str	r3, [sp, #48]	; 0x30
   89a0c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89a10:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   89a14:	6918      	ldr	r0, [r3, #16]
   89a16:	f001 fdeb 	bl	8b5f0 <__hi0bits>
   89a1a:	f1c0 0020 	rsb	r0, r0, #32
   89a1e:	e013      	b.n	89a48 <_dtoa_r+0x4e8>
   89a20:	f1c3 0520 	rsb	r5, r3, #32
   89a24:	fa0a f005 	lsl.w	r0, sl, r5
   89a28:	e67b      	b.n	89722 <_dtoa_r+0x1c2>
   89a2a:	900e      	str	r0, [sp, #56]	; 0x38
   89a2c:	e643      	b.n	896b6 <_dtoa_r+0x156>
   89a2e:	bf00      	nop
   89a30:	40240000 	.word	0x40240000
   89a34:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89a36:	2b01      	cmp	r3, #1
   89a38:	f340 8285 	ble.w	89f46 <_dtoa_r+0x9e6>
   89a3c:	2300      	movs	r3, #0
   89a3e:	930c      	str	r3, [sp, #48]	; 0x30
   89a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89a42:	2001      	movs	r0, #1
   89a44:	2b00      	cmp	r3, #0
   89a46:	d1e1      	bne.n	89a0c <_dtoa_r+0x4ac>
   89a48:	9a08      	ldr	r2, [sp, #32]
   89a4a:	4410      	add	r0, r2
   89a4c:	f010 001f 	ands.w	r0, r0, #31
   89a50:	f000 80a1 	beq.w	89b96 <_dtoa_r+0x636>
   89a54:	f1c0 0320 	rsb	r3, r0, #32
   89a58:	2b04      	cmp	r3, #4
   89a5a:	f340 8486 	ble.w	8a36a <_dtoa_r+0xe0a>
   89a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89a60:	f1c0 001c 	rsb	r0, r0, #28
   89a64:	4403      	add	r3, r0
   89a66:	930a      	str	r3, [sp, #40]	; 0x28
   89a68:	4613      	mov	r3, r2
   89a6a:	4403      	add	r3, r0
   89a6c:	4405      	add	r5, r0
   89a6e:	9308      	str	r3, [sp, #32]
   89a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89a72:	2b00      	cmp	r3, #0
   89a74:	dd05      	ble.n	89a82 <_dtoa_r+0x522>
   89a76:	4649      	mov	r1, r9
   89a78:	461a      	mov	r2, r3
   89a7a:	4620      	mov	r0, r4
   89a7c:	f001 fef4 	bl	8b868 <__lshift>
   89a80:	4681      	mov	r9, r0
   89a82:	9b08      	ldr	r3, [sp, #32]
   89a84:	2b00      	cmp	r3, #0
   89a86:	dd05      	ble.n	89a94 <_dtoa_r+0x534>
   89a88:	4641      	mov	r1, r8
   89a8a:	461a      	mov	r2, r3
   89a8c:	4620      	mov	r0, r4
   89a8e:	f001 feeb 	bl	8b868 <__lshift>
   89a92:	4680      	mov	r8, r0
   89a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89a96:	2b00      	cmp	r3, #0
   89a98:	f040 8086 	bne.w	89ba8 <_dtoa_r+0x648>
   89a9c:	9b07      	ldr	r3, [sp, #28]
   89a9e:	2b00      	cmp	r3, #0
   89aa0:	f340 8264 	ble.w	89f6c <_dtoa_r+0xa0c>
   89aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89aa6:	2b00      	cmp	r3, #0
   89aa8:	f000 8098 	beq.w	89bdc <_dtoa_r+0x67c>
   89aac:	2d00      	cmp	r5, #0
   89aae:	dd05      	ble.n	89abc <_dtoa_r+0x55c>
   89ab0:	4631      	mov	r1, r6
   89ab2:	462a      	mov	r2, r5
   89ab4:	4620      	mov	r0, r4
   89ab6:	f001 fed7 	bl	8b868 <__lshift>
   89aba:	4606      	mov	r6, r0
   89abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89abe:	2b00      	cmp	r3, #0
   89ac0:	f040 8336 	bne.w	8a130 <_dtoa_r+0xbd0>
   89ac4:	9608      	str	r6, [sp, #32]
   89ac6:	9b07      	ldr	r3, [sp, #28]
   89ac8:	9a04      	ldr	r2, [sp, #16]
   89aca:	3b01      	subs	r3, #1
   89acc:	18d3      	adds	r3, r2, r3
   89ace:	930b      	str	r3, [sp, #44]	; 0x2c
   89ad0:	4617      	mov	r7, r2
   89ad2:	f00a 0301 	and.w	r3, sl, #1
   89ad6:	46c2      	mov	sl, r8
   89ad8:	f8dd b020 	ldr.w	fp, [sp, #32]
   89adc:	930c      	str	r3, [sp, #48]	; 0x30
   89ade:	4651      	mov	r1, sl
   89ae0:	4648      	mov	r0, r9
   89ae2:	f7ff fca7 	bl	89434 <quorem>
   89ae6:	4631      	mov	r1, r6
   89ae8:	4605      	mov	r5, r0
   89aea:	4648      	mov	r0, r9
   89aec:	f001 ff0c 	bl	8b908 <__mcmp>
   89af0:	465a      	mov	r2, fp
   89af2:	9007      	str	r0, [sp, #28]
   89af4:	4651      	mov	r1, sl
   89af6:	4620      	mov	r0, r4
   89af8:	f001 ff22 	bl	8b940 <__mdiff>
   89afc:	68c2      	ldr	r2, [r0, #12]
   89afe:	4680      	mov	r8, r0
   89b00:	f105 0330 	add.w	r3, r5, #48	; 0x30
   89b04:	2a00      	cmp	r2, #0
   89b06:	f040 8229 	bne.w	89f5c <_dtoa_r+0x9fc>
   89b0a:	4601      	mov	r1, r0
   89b0c:	4648      	mov	r0, r9
   89b0e:	930a      	str	r3, [sp, #40]	; 0x28
   89b10:	f001 fefa 	bl	8b908 <__mcmp>
   89b14:	4641      	mov	r1, r8
   89b16:	9008      	str	r0, [sp, #32]
   89b18:	4620      	mov	r0, r4
   89b1a:	f001 fd1d 	bl	8b558 <_Bfree>
   89b1e:	9a08      	ldr	r2, [sp, #32]
   89b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b22:	b932      	cbnz	r2, 89b32 <_dtoa_r+0x5d2>
   89b24:	9924      	ldr	r1, [sp, #144]	; 0x90
   89b26:	b921      	cbnz	r1, 89b32 <_dtoa_r+0x5d2>
   89b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b2a:	2a00      	cmp	r2, #0
   89b2c:	f000 83ee 	beq.w	8a30c <_dtoa_r+0xdac>
   89b30:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89b32:	9907      	ldr	r1, [sp, #28]
   89b34:	2900      	cmp	r1, #0
   89b36:	f2c0 829f 	blt.w	8a078 <_dtoa_r+0xb18>
   89b3a:	d105      	bne.n	89b48 <_dtoa_r+0x5e8>
   89b3c:	9924      	ldr	r1, [sp, #144]	; 0x90
   89b3e:	b919      	cbnz	r1, 89b48 <_dtoa_r+0x5e8>
   89b40:	990c      	ldr	r1, [sp, #48]	; 0x30
   89b42:	2900      	cmp	r1, #0
   89b44:	f000 8298 	beq.w	8a078 <_dtoa_r+0xb18>
   89b48:	2a00      	cmp	r2, #0
   89b4a:	f300 8305 	bgt.w	8a158 <_dtoa_r+0xbf8>
   89b4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89b50:	f107 0801 	add.w	r8, r7, #1
   89b54:	4297      	cmp	r7, r2
   89b56:	703b      	strb	r3, [r7, #0]
   89b58:	4645      	mov	r5, r8
   89b5a:	f000 830b 	beq.w	8a174 <_dtoa_r+0xc14>
   89b5e:	4649      	mov	r1, r9
   89b60:	2300      	movs	r3, #0
   89b62:	220a      	movs	r2, #10
   89b64:	4620      	mov	r0, r4
   89b66:	f001 fd01 	bl	8b56c <__multadd>
   89b6a:	455e      	cmp	r6, fp
   89b6c:	4681      	mov	r9, r0
   89b6e:	4631      	mov	r1, r6
   89b70:	f04f 0300 	mov.w	r3, #0
   89b74:	f04f 020a 	mov.w	r2, #10
   89b78:	4620      	mov	r0, r4
   89b7a:	f000 81e9 	beq.w	89f50 <_dtoa_r+0x9f0>
   89b7e:	f001 fcf5 	bl	8b56c <__multadd>
   89b82:	4659      	mov	r1, fp
   89b84:	4606      	mov	r6, r0
   89b86:	2300      	movs	r3, #0
   89b88:	220a      	movs	r2, #10
   89b8a:	4620      	mov	r0, r4
   89b8c:	f001 fcee 	bl	8b56c <__multadd>
   89b90:	4647      	mov	r7, r8
   89b92:	4683      	mov	fp, r0
   89b94:	e7a3      	b.n	89ade <_dtoa_r+0x57e>
   89b96:	201c      	movs	r0, #28
   89b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b9a:	4405      	add	r5, r0
   89b9c:	4403      	add	r3, r0
   89b9e:	930a      	str	r3, [sp, #40]	; 0x28
   89ba0:	9b08      	ldr	r3, [sp, #32]
   89ba2:	4403      	add	r3, r0
   89ba4:	9308      	str	r3, [sp, #32]
   89ba6:	e763      	b.n	89a70 <_dtoa_r+0x510>
   89ba8:	4641      	mov	r1, r8
   89baa:	4648      	mov	r0, r9
   89bac:	f001 feac 	bl	8b908 <__mcmp>
   89bb0:	2800      	cmp	r0, #0
   89bb2:	f6bf af73 	bge.w	89a9c <_dtoa_r+0x53c>
   89bb6:	9f02      	ldr	r7, [sp, #8]
   89bb8:	4649      	mov	r1, r9
   89bba:	2300      	movs	r3, #0
   89bbc:	220a      	movs	r2, #10
   89bbe:	4620      	mov	r0, r4
   89bc0:	3f01      	subs	r7, #1
   89bc2:	9702      	str	r7, [sp, #8]
   89bc4:	f001 fcd2 	bl	8b56c <__multadd>
   89bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89bca:	4681      	mov	r9, r0
   89bcc:	2b00      	cmp	r3, #0
   89bce:	f040 83b5 	bne.w	8a33c <_dtoa_r+0xddc>
   89bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   89bd4:	2b00      	cmp	r3, #0
   89bd6:	f340 83be 	ble.w	8a356 <_dtoa_r+0xdf6>
   89bda:	9307      	str	r3, [sp, #28]
   89bdc:	f8dd a010 	ldr.w	sl, [sp, #16]
   89be0:	9f07      	ldr	r7, [sp, #28]
   89be2:	4655      	mov	r5, sl
   89be4:	e006      	b.n	89bf4 <_dtoa_r+0x694>
   89be6:	4649      	mov	r1, r9
   89be8:	2300      	movs	r3, #0
   89bea:	220a      	movs	r2, #10
   89bec:	4620      	mov	r0, r4
   89bee:	f001 fcbd 	bl	8b56c <__multadd>
   89bf2:	4681      	mov	r9, r0
   89bf4:	4641      	mov	r1, r8
   89bf6:	4648      	mov	r0, r9
   89bf8:	f7ff fc1c 	bl	89434 <quorem>
   89bfc:	3030      	adds	r0, #48	; 0x30
   89bfe:	f805 0b01 	strb.w	r0, [r5], #1
   89c02:	eba5 030a 	sub.w	r3, r5, sl
   89c06:	42bb      	cmp	r3, r7
   89c08:	dbed      	blt.n	89be6 <_dtoa_r+0x686>
   89c0a:	9b04      	ldr	r3, [sp, #16]
   89c0c:	9a07      	ldr	r2, [sp, #28]
   89c0e:	4682      	mov	sl, r0
   89c10:	2a01      	cmp	r2, #1
   89c12:	bfac      	ite	ge
   89c14:	189b      	addge	r3, r3, r2
   89c16:	3301      	addlt	r3, #1
   89c18:	f04f 0b00 	mov.w	fp, #0
   89c1c:	461d      	mov	r5, r3
   89c1e:	4649      	mov	r1, r9
   89c20:	2201      	movs	r2, #1
   89c22:	4620      	mov	r0, r4
   89c24:	f001 fe20 	bl	8b868 <__lshift>
   89c28:	4641      	mov	r1, r8
   89c2a:	4681      	mov	r9, r0
   89c2c:	f001 fe6c 	bl	8b908 <__mcmp>
   89c30:	2800      	cmp	r0, #0
   89c32:	f340 823f 	ble.w	8a0b4 <_dtoa_r+0xb54>
   89c36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   89c3a:	1e6b      	subs	r3, r5, #1
   89c3c:	9904      	ldr	r1, [sp, #16]
   89c3e:	e004      	b.n	89c4a <_dtoa_r+0x6ea>
   89c40:	428b      	cmp	r3, r1
   89c42:	f000 81ae 	beq.w	89fa2 <_dtoa_r+0xa42>
   89c46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   89c4a:	2a39      	cmp	r2, #57	; 0x39
   89c4c:	f103 0501 	add.w	r5, r3, #1
   89c50:	d0f6      	beq.n	89c40 <_dtoa_r+0x6e0>
   89c52:	3201      	adds	r2, #1
   89c54:	701a      	strb	r2, [r3, #0]
   89c56:	4641      	mov	r1, r8
   89c58:	4620      	mov	r0, r4
   89c5a:	f001 fc7d 	bl	8b558 <_Bfree>
   89c5e:	2e00      	cmp	r6, #0
   89c60:	f43f ae3d 	beq.w	898de <_dtoa_r+0x37e>
   89c64:	f1bb 0f00 	cmp.w	fp, #0
   89c68:	d005      	beq.n	89c76 <_dtoa_r+0x716>
   89c6a:	45b3      	cmp	fp, r6
   89c6c:	d003      	beq.n	89c76 <_dtoa_r+0x716>
   89c6e:	4659      	mov	r1, fp
   89c70:	4620      	mov	r0, r4
   89c72:	f001 fc71 	bl	8b558 <_Bfree>
   89c76:	4631      	mov	r1, r6
   89c78:	4620      	mov	r0, r4
   89c7a:	f001 fc6d 	bl	8b558 <_Bfree>
   89c7e:	e62e      	b.n	898de <_dtoa_r+0x37e>
   89c80:	2300      	movs	r3, #0
   89c82:	930b      	str	r3, [sp, #44]	; 0x2c
   89c84:	9b02      	ldr	r3, [sp, #8]
   89c86:	9a25      	ldr	r2, [sp, #148]	; 0x94
   89c88:	4413      	add	r3, r2
   89c8a:	930f      	str	r3, [sp, #60]	; 0x3c
   89c8c:	3301      	adds	r3, #1
   89c8e:	2b01      	cmp	r3, #1
   89c90:	461f      	mov	r7, r3
   89c92:	461e      	mov	r6, r3
   89c94:	bfb8      	it	lt
   89c96:	2701      	movlt	r7, #1
   89c98:	9307      	str	r3, [sp, #28]
   89c9a:	2100      	movs	r1, #0
   89c9c:	2f17      	cmp	r7, #23
   89c9e:	6461      	str	r1, [r4, #68]	; 0x44
   89ca0:	d90a      	bls.n	89cb8 <_dtoa_r+0x758>
   89ca2:	2201      	movs	r2, #1
   89ca4:	2304      	movs	r3, #4
   89ca6:	005b      	lsls	r3, r3, #1
   89ca8:	f103 0014 	add.w	r0, r3, #20
   89cac:	4287      	cmp	r7, r0
   89cae:	4611      	mov	r1, r2
   89cb0:	f102 0201 	add.w	r2, r2, #1
   89cb4:	d2f7      	bcs.n	89ca6 <_dtoa_r+0x746>
   89cb6:	6461      	str	r1, [r4, #68]	; 0x44
   89cb8:	4620      	mov	r0, r4
   89cba:	f001 fc27 	bl	8b50c <_Balloc>
   89cbe:	2e0e      	cmp	r6, #14
   89cc0:	9004      	str	r0, [sp, #16]
   89cc2:	6420      	str	r0, [r4, #64]	; 0x40
   89cc4:	f63f ad47 	bhi.w	89756 <_dtoa_r+0x1f6>
   89cc8:	2d00      	cmp	r5, #0
   89cca:	f43f ad44 	beq.w	89756 <_dtoa_r+0x1f6>
   89cce:	9902      	ldr	r1, [sp, #8]
   89cd0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   89cd4:	2900      	cmp	r1, #0
   89cd6:	f340 8203 	ble.w	8a0e0 <_dtoa_r+0xb80>
   89cda:	4bb9      	ldr	r3, [pc, #740]	; (89fc0 <_dtoa_r+0xa60>)
   89cdc:	f001 020f 	and.w	r2, r1, #15
   89ce0:	110d      	asrs	r5, r1, #4
   89ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89ce6:	06e9      	lsls	r1, r5, #27
   89ce8:	e9d3 6700 	ldrd	r6, r7, [r3]
   89cec:	f140 81af 	bpl.w	8a04e <_dtoa_r+0xaee>
   89cf0:	4bb4      	ldr	r3, [pc, #720]	; (89fc4 <_dtoa_r+0xa64>)
   89cf2:	4650      	mov	r0, sl
   89cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89cf8:	4659      	mov	r1, fp
   89cfa:	f002 fe6b 	bl	8c9d4 <__aeabi_ddiv>
   89cfe:	f04f 0a03 	mov.w	sl, #3
   89d02:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   89d06:	f005 050f 	and.w	r5, r5, #15
   89d0a:	b18d      	cbz	r5, 89d30 <_dtoa_r+0x7d0>
   89d0c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 89fc4 <_dtoa_r+0xa64>
   89d10:	07ea      	lsls	r2, r5, #31
   89d12:	d509      	bpl.n	89d28 <_dtoa_r+0x7c8>
   89d14:	e9d8 2300 	ldrd	r2, r3, [r8]
   89d18:	4630      	mov	r0, r6
   89d1a:	4639      	mov	r1, r7
   89d1c:	f002 fd30 	bl	8c780 <__aeabi_dmul>
   89d20:	4606      	mov	r6, r0
   89d22:	460f      	mov	r7, r1
   89d24:	f10a 0a01 	add.w	sl, sl, #1
   89d28:	106d      	asrs	r5, r5, #1
   89d2a:	f108 0808 	add.w	r8, r8, #8
   89d2e:	d1ef      	bne.n	89d10 <_dtoa_r+0x7b0>
   89d30:	463b      	mov	r3, r7
   89d32:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   89d36:	4632      	mov	r2, r6
   89d38:	f002 fe4c 	bl	8c9d4 <__aeabi_ddiv>
   89d3c:	4607      	mov	r7, r0
   89d3e:	4688      	mov	r8, r1
   89d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89d42:	b143      	cbz	r3, 89d56 <_dtoa_r+0x7f6>
   89d44:	2200      	movs	r2, #0
   89d46:	4ba0      	ldr	r3, [pc, #640]	; (89fc8 <_dtoa_r+0xa68>)
   89d48:	4638      	mov	r0, r7
   89d4a:	4641      	mov	r1, r8
   89d4c:	f002 ff8a 	bl	8cc64 <__aeabi_dcmplt>
   89d50:	2800      	cmp	r0, #0
   89d52:	f040 8287 	bne.w	8a264 <_dtoa_r+0xd04>
   89d56:	4650      	mov	r0, sl
   89d58:	f002 fcac 	bl	8c6b4 <__aeabi_i2d>
   89d5c:	463a      	mov	r2, r7
   89d5e:	4643      	mov	r3, r8
   89d60:	f002 fd0e 	bl	8c780 <__aeabi_dmul>
   89d64:	4b99      	ldr	r3, [pc, #612]	; (89fcc <_dtoa_r+0xa6c>)
   89d66:	2200      	movs	r2, #0
   89d68:	f002 fb58 	bl	8c41c <__adddf3>
   89d6c:	9b07      	ldr	r3, [sp, #28]
   89d6e:	4605      	mov	r5, r0
   89d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89d74:	2b00      	cmp	r3, #0
   89d76:	f000 813f 	beq.w	89ff8 <_dtoa_r+0xa98>
   89d7a:	9b02      	ldr	r3, [sp, #8]
   89d7c:	9315      	str	r3, [sp, #84]	; 0x54
   89d7e:	9b07      	ldr	r3, [sp, #28]
   89d80:	9312      	str	r3, [sp, #72]	; 0x48
   89d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89d84:	2b00      	cmp	r3, #0
   89d86:	f000 81fb 	beq.w	8a180 <_dtoa_r+0xc20>
   89d8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89d8c:	4b8c      	ldr	r3, [pc, #560]	; (89fc0 <_dtoa_r+0xa60>)
   89d8e:	2000      	movs	r0, #0
   89d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89d94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89d98:	498d      	ldr	r1, [pc, #564]	; (89fd0 <_dtoa_r+0xa70>)
   89d9a:	f002 fe1b 	bl	8c9d4 <__aeabi_ddiv>
   89d9e:	462a      	mov	r2, r5
   89da0:	4633      	mov	r3, r6
   89da2:	f002 fb39 	bl	8c418 <__aeabi_dsub>
   89da6:	4682      	mov	sl, r0
   89da8:	468b      	mov	fp, r1
   89daa:	4638      	mov	r0, r7
   89dac:	4641      	mov	r1, r8
   89dae:	f002 ff97 	bl	8cce0 <__aeabi_d2iz>
   89db2:	4605      	mov	r5, r0
   89db4:	f002 fc7e 	bl	8c6b4 <__aeabi_i2d>
   89db8:	4602      	mov	r2, r0
   89dba:	460b      	mov	r3, r1
   89dbc:	4638      	mov	r0, r7
   89dbe:	4641      	mov	r1, r8
   89dc0:	f002 fb2a 	bl	8c418 <__aeabi_dsub>
   89dc4:	3530      	adds	r5, #48	; 0x30
   89dc6:	fa5f f885 	uxtb.w	r8, r5
   89dca:	9d04      	ldr	r5, [sp, #16]
   89dcc:	4606      	mov	r6, r0
   89dce:	460f      	mov	r7, r1
   89dd0:	f885 8000 	strb.w	r8, [r5]
   89dd4:	4602      	mov	r2, r0
   89dd6:	460b      	mov	r3, r1
   89dd8:	4650      	mov	r0, sl
   89dda:	4659      	mov	r1, fp
   89ddc:	3501      	adds	r5, #1
   89dde:	f002 ff5f 	bl	8cca0 <__aeabi_dcmpgt>
   89de2:	2800      	cmp	r0, #0
   89de4:	d154      	bne.n	89e90 <_dtoa_r+0x930>
   89de6:	4632      	mov	r2, r6
   89de8:	463b      	mov	r3, r7
   89dea:	2000      	movs	r0, #0
   89dec:	4976      	ldr	r1, [pc, #472]	; (89fc8 <_dtoa_r+0xa68>)
   89dee:	f002 fb13 	bl	8c418 <__aeabi_dsub>
   89df2:	4602      	mov	r2, r0
   89df4:	460b      	mov	r3, r1
   89df6:	4650      	mov	r0, sl
   89df8:	4659      	mov	r1, fp
   89dfa:	f002 ff51 	bl	8cca0 <__aeabi_dcmpgt>
   89dfe:	2800      	cmp	r0, #0
   89e00:	f040 8270 	bne.w	8a2e4 <_dtoa_r+0xd84>
   89e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89e06:	2a01      	cmp	r2, #1
   89e08:	f000 8112 	beq.w	8a030 <_dtoa_r+0xad0>
   89e0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89e0e:	9a04      	ldr	r2, [sp, #16]
   89e10:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   89e14:	4413      	add	r3, r2
   89e16:	4699      	mov	r9, r3
   89e18:	e00f      	b.n	89e3a <_dtoa_r+0x8da>
   89e1a:	4632      	mov	r2, r6
   89e1c:	463b      	mov	r3, r7
   89e1e:	2000      	movs	r0, #0
   89e20:	4969      	ldr	r1, [pc, #420]	; (89fc8 <_dtoa_r+0xa68>)
   89e22:	f002 faf9 	bl	8c418 <__aeabi_dsub>
   89e26:	4652      	mov	r2, sl
   89e28:	465b      	mov	r3, fp
   89e2a:	f002 ff1b 	bl	8cc64 <__aeabi_dcmplt>
   89e2e:	2800      	cmp	r0, #0
   89e30:	f040 8256 	bne.w	8a2e0 <_dtoa_r+0xd80>
   89e34:	454d      	cmp	r5, r9
   89e36:	f000 80f9 	beq.w	8a02c <_dtoa_r+0xacc>
   89e3a:	4650      	mov	r0, sl
   89e3c:	4659      	mov	r1, fp
   89e3e:	2200      	movs	r2, #0
   89e40:	4b64      	ldr	r3, [pc, #400]	; (89fd4 <_dtoa_r+0xa74>)
   89e42:	f002 fc9d 	bl	8c780 <__aeabi_dmul>
   89e46:	2200      	movs	r2, #0
   89e48:	4b62      	ldr	r3, [pc, #392]	; (89fd4 <_dtoa_r+0xa74>)
   89e4a:	4682      	mov	sl, r0
   89e4c:	468b      	mov	fp, r1
   89e4e:	4630      	mov	r0, r6
   89e50:	4639      	mov	r1, r7
   89e52:	f002 fc95 	bl	8c780 <__aeabi_dmul>
   89e56:	460f      	mov	r7, r1
   89e58:	4606      	mov	r6, r0
   89e5a:	f002 ff41 	bl	8cce0 <__aeabi_d2iz>
   89e5e:	4680      	mov	r8, r0
   89e60:	f002 fc28 	bl	8c6b4 <__aeabi_i2d>
   89e64:	4602      	mov	r2, r0
   89e66:	460b      	mov	r3, r1
   89e68:	4630      	mov	r0, r6
   89e6a:	4639      	mov	r1, r7
   89e6c:	f002 fad4 	bl	8c418 <__aeabi_dsub>
   89e70:	f108 0830 	add.w	r8, r8, #48	; 0x30
   89e74:	fa5f f888 	uxtb.w	r8, r8
   89e78:	f805 8b01 	strb.w	r8, [r5], #1
   89e7c:	4652      	mov	r2, sl
   89e7e:	465b      	mov	r3, fp
   89e80:	4606      	mov	r6, r0
   89e82:	460f      	mov	r7, r1
   89e84:	f002 feee 	bl	8cc64 <__aeabi_dcmplt>
   89e88:	2800      	cmp	r0, #0
   89e8a:	d0c6      	beq.n	89e1a <_dtoa_r+0x8ba>
   89e8c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   89e90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   89e92:	9302      	str	r3, [sp, #8]
   89e94:	e523      	b.n	898de <_dtoa_r+0x37e>
   89e96:	2300      	movs	r3, #0
   89e98:	930b      	str	r3, [sp, #44]	; 0x2c
   89e9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89e9c:	2b00      	cmp	r3, #0
   89e9e:	f340 80dd 	ble.w	8a05c <_dtoa_r+0xafc>
   89ea2:	461f      	mov	r7, r3
   89ea4:	461e      	mov	r6, r3
   89ea6:	930f      	str	r3, [sp, #60]	; 0x3c
   89ea8:	9307      	str	r3, [sp, #28]
   89eaa:	e6f6      	b.n	89c9a <_dtoa_r+0x73a>
   89eac:	2301      	movs	r3, #1
   89eae:	930b      	str	r3, [sp, #44]	; 0x2c
   89eb0:	e7f3      	b.n	89e9a <_dtoa_r+0x93a>
   89eb2:	f1ba 0f00 	cmp.w	sl, #0
   89eb6:	f47f ada7 	bne.w	89a08 <_dtoa_r+0x4a8>
   89eba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   89ebe:	2b00      	cmp	r3, #0
   89ec0:	f47f adbc 	bne.w	89a3c <_dtoa_r+0x4dc>
   89ec4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   89ec8:	0d3f      	lsrs	r7, r7, #20
   89eca:	053f      	lsls	r7, r7, #20
   89ecc:	2f00      	cmp	r7, #0
   89ece:	f000 820d 	beq.w	8a2ec <_dtoa_r+0xd8c>
   89ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89ed4:	3301      	adds	r3, #1
   89ed6:	930a      	str	r3, [sp, #40]	; 0x28
   89ed8:	9b08      	ldr	r3, [sp, #32]
   89eda:	3301      	adds	r3, #1
   89edc:	9308      	str	r3, [sp, #32]
   89ede:	2301      	movs	r3, #1
   89ee0:	930c      	str	r3, [sp, #48]	; 0x30
   89ee2:	e5ad      	b.n	89a40 <_dtoa_r+0x4e0>
   89ee4:	9b07      	ldr	r3, [sp, #28]
   89ee6:	2b00      	cmp	r3, #0
   89ee8:	f73f ac48 	bgt.w	8977c <_dtoa_r+0x21c>
   89eec:	f040 8222 	bne.w	8a334 <_dtoa_r+0xdd4>
   89ef0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89ef4:	2200      	movs	r2, #0
   89ef6:	4b38      	ldr	r3, [pc, #224]	; (89fd8 <_dtoa_r+0xa78>)
   89ef8:	f002 fc42 	bl	8c780 <__aeabi_dmul>
   89efc:	4652      	mov	r2, sl
   89efe:	465b      	mov	r3, fp
   89f00:	f002 fec4 	bl	8cc8c <__aeabi_dcmpge>
   89f04:	f8dd 801c 	ldr.w	r8, [sp, #28]
   89f08:	4646      	mov	r6, r8
   89f0a:	2800      	cmp	r0, #0
   89f0c:	d041      	beq.n	89f92 <_dtoa_r+0xa32>
   89f0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89f10:	9d04      	ldr	r5, [sp, #16]
   89f12:	43db      	mvns	r3, r3
   89f14:	9302      	str	r3, [sp, #8]
   89f16:	4641      	mov	r1, r8
   89f18:	4620      	mov	r0, r4
   89f1a:	f001 fb1d 	bl	8b558 <_Bfree>
   89f1e:	2e00      	cmp	r6, #0
   89f20:	f43f acdd 	beq.w	898de <_dtoa_r+0x37e>
   89f24:	e6a7      	b.n	89c76 <_dtoa_r+0x716>
   89f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89f28:	4649      	mov	r1, r9
   89f2a:	4620      	mov	r0, r4
   89f2c:	f001 fc4c 	bl	8b7c8 <__pow5mult>
   89f30:	4681      	mov	r9, r0
   89f32:	e557      	b.n	899e4 <_dtoa_r+0x484>
   89f34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   89f36:	2a00      	cmp	r2, #0
   89f38:	f000 8188 	beq.w	8a24c <_dtoa_r+0xcec>
   89f3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89f40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   89f42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   89f44:	e4f2      	b.n	8992c <_dtoa_r+0x3cc>
   89f46:	f1ba 0f00 	cmp.w	sl, #0
   89f4a:	f47f ad77 	bne.w	89a3c <_dtoa_r+0x4dc>
   89f4e:	e7b4      	b.n	89eba <_dtoa_r+0x95a>
   89f50:	f001 fb0c 	bl	8b56c <__multadd>
   89f54:	4647      	mov	r7, r8
   89f56:	4606      	mov	r6, r0
   89f58:	4683      	mov	fp, r0
   89f5a:	e5c0      	b.n	89ade <_dtoa_r+0x57e>
   89f5c:	4601      	mov	r1, r0
   89f5e:	4620      	mov	r0, r4
   89f60:	9308      	str	r3, [sp, #32]
   89f62:	f001 faf9 	bl	8b558 <_Bfree>
   89f66:	2201      	movs	r2, #1
   89f68:	9b08      	ldr	r3, [sp, #32]
   89f6a:	e5e2      	b.n	89b32 <_dtoa_r+0x5d2>
   89f6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f6e:	2b02      	cmp	r3, #2
   89f70:	f77f ad98 	ble.w	89aa4 <_dtoa_r+0x544>
   89f74:	9b07      	ldr	r3, [sp, #28]
   89f76:	2b00      	cmp	r3, #0
   89f78:	d1c9      	bne.n	89f0e <_dtoa_r+0x9ae>
   89f7a:	4641      	mov	r1, r8
   89f7c:	2205      	movs	r2, #5
   89f7e:	4620      	mov	r0, r4
   89f80:	f001 faf4 	bl	8b56c <__multadd>
   89f84:	4601      	mov	r1, r0
   89f86:	4680      	mov	r8, r0
   89f88:	4648      	mov	r0, r9
   89f8a:	f001 fcbd 	bl	8b908 <__mcmp>
   89f8e:	2800      	cmp	r0, #0
   89f90:	ddbd      	ble.n	89f0e <_dtoa_r+0x9ae>
   89f92:	2331      	movs	r3, #49	; 0x31
   89f94:	9a02      	ldr	r2, [sp, #8]
   89f96:	9904      	ldr	r1, [sp, #16]
   89f98:	3201      	adds	r2, #1
   89f9a:	9202      	str	r2, [sp, #8]
   89f9c:	700b      	strb	r3, [r1, #0]
   89f9e:	1c4d      	adds	r5, r1, #1
   89fa0:	e7b9      	b.n	89f16 <_dtoa_r+0x9b6>
   89fa2:	2331      	movs	r3, #49	; 0x31
   89fa4:	9a02      	ldr	r2, [sp, #8]
   89fa6:	3201      	adds	r2, #1
   89fa8:	9202      	str	r2, [sp, #8]
   89faa:	9a04      	ldr	r2, [sp, #16]
   89fac:	7013      	strb	r3, [r2, #0]
   89fae:	e652      	b.n	89c56 <_dtoa_r+0x6f6>
   89fb0:	2301      	movs	r3, #1
   89fb2:	930b      	str	r3, [sp, #44]	; 0x2c
   89fb4:	e666      	b.n	89c84 <_dtoa_r+0x724>
   89fb6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89fba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   89fbc:	e48f      	b.n	898de <_dtoa_r+0x37e>
   89fbe:	bf00      	nop
   89fc0:	0008cf28 	.word	0x0008cf28
   89fc4:	0008cf00 	.word	0x0008cf00
   89fc8:	3ff00000 	.word	0x3ff00000
   89fcc:	401c0000 	.word	0x401c0000
   89fd0:	3fe00000 	.word	0x3fe00000
   89fd4:	40240000 	.word	0x40240000
   89fd8:	40140000 	.word	0x40140000
   89fdc:	4650      	mov	r0, sl
   89fde:	f002 fb69 	bl	8c6b4 <__aeabi_i2d>
   89fe2:	463a      	mov	r2, r7
   89fe4:	4643      	mov	r3, r8
   89fe6:	f002 fbcb 	bl	8c780 <__aeabi_dmul>
   89fea:	2200      	movs	r2, #0
   89fec:	4bc1      	ldr	r3, [pc, #772]	; (8a2f4 <_dtoa_r+0xd94>)
   89fee:	f002 fa15 	bl	8c41c <__adddf3>
   89ff2:	4605      	mov	r5, r0
   89ff4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   89ff8:	4641      	mov	r1, r8
   89ffa:	2200      	movs	r2, #0
   89ffc:	4bbe      	ldr	r3, [pc, #760]	; (8a2f8 <_dtoa_r+0xd98>)
   89ffe:	4638      	mov	r0, r7
   8a000:	f002 fa0a 	bl	8c418 <__aeabi_dsub>
   8a004:	462a      	mov	r2, r5
   8a006:	4633      	mov	r3, r6
   8a008:	4682      	mov	sl, r0
   8a00a:	468b      	mov	fp, r1
   8a00c:	f002 fe48 	bl	8cca0 <__aeabi_dcmpgt>
   8a010:	4680      	mov	r8, r0
   8a012:	2800      	cmp	r0, #0
   8a014:	f040 8110 	bne.w	8a238 <_dtoa_r+0xcd8>
   8a018:	462a      	mov	r2, r5
   8a01a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8a01e:	4650      	mov	r0, sl
   8a020:	4659      	mov	r1, fp
   8a022:	f002 fe1f 	bl	8cc64 <__aeabi_dcmplt>
   8a026:	b118      	cbz	r0, 8a030 <_dtoa_r+0xad0>
   8a028:	4646      	mov	r6, r8
   8a02a:	e770      	b.n	89f0e <_dtoa_r+0x9ae>
   8a02c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a030:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8a034:	f7ff bb8f 	b.w	89756 <_dtoa_r+0x1f6>
   8a038:	9804      	ldr	r0, [sp, #16]
   8a03a:	f7ff bac0 	b.w	895be <_dtoa_r+0x5e>
   8a03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a042:	1afb      	subs	r3, r7, r3
   8a044:	441a      	add	r2, r3
   8a046:	970c      	str	r7, [sp, #48]	; 0x30
   8a048:	920d      	str	r2, [sp, #52]	; 0x34
   8a04a:	2700      	movs	r7, #0
   8a04c:	e468      	b.n	89920 <_dtoa_r+0x3c0>
   8a04e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8a052:	f04f 0a02 	mov.w	sl, #2
   8a056:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8a05a:	e656      	b.n	89d0a <_dtoa_r+0x7aa>
   8a05c:	2100      	movs	r1, #0
   8a05e:	2301      	movs	r3, #1
   8a060:	4620      	mov	r0, r4
   8a062:	6461      	str	r1, [r4, #68]	; 0x44
   8a064:	9325      	str	r3, [sp, #148]	; 0x94
   8a066:	f001 fa51 	bl	8b50c <_Balloc>
   8a06a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a06c:	9004      	str	r0, [sp, #16]
   8a06e:	9307      	str	r3, [sp, #28]
   8a070:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a072:	6420      	str	r0, [r4, #64]	; 0x40
   8a074:	930f      	str	r3, [sp, #60]	; 0x3c
   8a076:	e627      	b.n	89cc8 <_dtoa_r+0x768>
   8a078:	2a00      	cmp	r2, #0
   8a07a:	46d0      	mov	r8, sl
   8a07c:	f8cd b020 	str.w	fp, [sp, #32]
   8a080:	469a      	mov	sl, r3
   8a082:	dd11      	ble.n	8a0a8 <_dtoa_r+0xb48>
   8a084:	4649      	mov	r1, r9
   8a086:	2201      	movs	r2, #1
   8a088:	4620      	mov	r0, r4
   8a08a:	f001 fbed 	bl	8b868 <__lshift>
   8a08e:	4641      	mov	r1, r8
   8a090:	4681      	mov	r9, r0
   8a092:	f001 fc39 	bl	8b908 <__mcmp>
   8a096:	2800      	cmp	r0, #0
   8a098:	f340 8145 	ble.w	8a326 <_dtoa_r+0xdc6>
   8a09c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   8a0a0:	f000 8105 	beq.w	8a2ae <_dtoa_r+0xd4e>
   8a0a4:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   8a0a8:	46b3      	mov	fp, r6
   8a0aa:	f887 a000 	strb.w	sl, [r7]
   8a0ae:	1c7d      	adds	r5, r7, #1
   8a0b0:	9e08      	ldr	r6, [sp, #32]
   8a0b2:	e5d0      	b.n	89c56 <_dtoa_r+0x6f6>
   8a0b4:	d104      	bne.n	8a0c0 <_dtoa_r+0xb60>
   8a0b6:	f01a 0f01 	tst.w	sl, #1
   8a0ba:	d001      	beq.n	8a0c0 <_dtoa_r+0xb60>
   8a0bc:	e5bb      	b.n	89c36 <_dtoa_r+0x6d6>
   8a0be:	4615      	mov	r5, r2
   8a0c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a0c4:	1e6a      	subs	r2, r5, #1
   8a0c6:	2b30      	cmp	r3, #48	; 0x30
   8a0c8:	d0f9      	beq.n	8a0be <_dtoa_r+0xb5e>
   8a0ca:	e5c4      	b.n	89c56 <_dtoa_r+0x6f6>
   8a0cc:	2230      	movs	r2, #48	; 0x30
   8a0ce:	9904      	ldr	r1, [sp, #16]
   8a0d0:	700a      	strb	r2, [r1, #0]
   8a0d2:	9a02      	ldr	r2, [sp, #8]
   8a0d4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8a0d8:	3201      	adds	r2, #1
   8a0da:	9202      	str	r2, [sp, #8]
   8a0dc:	f7ff bbfb 	b.w	898d6 <_dtoa_r+0x376>
   8a0e0:	f000 80bb 	beq.w	8a25a <_dtoa_r+0xcfa>
   8a0e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a0e8:	9b02      	ldr	r3, [sp, #8]
   8a0ea:	f04f 0a02 	mov.w	sl, #2
   8a0ee:	425d      	negs	r5, r3
   8a0f0:	4b82      	ldr	r3, [pc, #520]	; (8a2fc <_dtoa_r+0xd9c>)
   8a0f2:	f005 020f 	and.w	r2, r5, #15
   8a0f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a0fe:	f002 fb3f 	bl	8c780 <__aeabi_dmul>
   8a102:	112d      	asrs	r5, r5, #4
   8a104:	4607      	mov	r7, r0
   8a106:	4688      	mov	r8, r1
   8a108:	f43f ae1a 	beq.w	89d40 <_dtoa_r+0x7e0>
   8a10c:	4e7c      	ldr	r6, [pc, #496]	; (8a300 <_dtoa_r+0xda0>)
   8a10e:	07eb      	lsls	r3, r5, #31
   8a110:	d509      	bpl.n	8a126 <_dtoa_r+0xbc6>
   8a112:	e9d6 2300 	ldrd	r2, r3, [r6]
   8a116:	4638      	mov	r0, r7
   8a118:	4641      	mov	r1, r8
   8a11a:	f002 fb31 	bl	8c780 <__aeabi_dmul>
   8a11e:	4607      	mov	r7, r0
   8a120:	4688      	mov	r8, r1
   8a122:	f10a 0a01 	add.w	sl, sl, #1
   8a126:	106d      	asrs	r5, r5, #1
   8a128:	f106 0608 	add.w	r6, r6, #8
   8a12c:	d1ef      	bne.n	8a10e <_dtoa_r+0xbae>
   8a12e:	e607      	b.n	89d40 <_dtoa_r+0x7e0>
   8a130:	6871      	ldr	r1, [r6, #4]
   8a132:	4620      	mov	r0, r4
   8a134:	f001 f9ea 	bl	8b50c <_Balloc>
   8a138:	4605      	mov	r5, r0
   8a13a:	6933      	ldr	r3, [r6, #16]
   8a13c:	f106 010c 	add.w	r1, r6, #12
   8a140:	3302      	adds	r3, #2
   8a142:	009a      	lsls	r2, r3, #2
   8a144:	300c      	adds	r0, #12
   8a146:	f7fc fd9f 	bl	86c88 <memcpy>
   8a14a:	4629      	mov	r1, r5
   8a14c:	2201      	movs	r2, #1
   8a14e:	4620      	mov	r0, r4
   8a150:	f001 fb8a 	bl	8b868 <__lshift>
   8a154:	9008      	str	r0, [sp, #32]
   8a156:	e4b6      	b.n	89ac6 <_dtoa_r+0x566>
   8a158:	2b39      	cmp	r3, #57	; 0x39
   8a15a:	f8cd b020 	str.w	fp, [sp, #32]
   8a15e:	46d0      	mov	r8, sl
   8a160:	f000 80a5 	beq.w	8a2ae <_dtoa_r+0xd4e>
   8a164:	f103 0a01 	add.w	sl, r3, #1
   8a168:	46b3      	mov	fp, r6
   8a16a:	f887 a000 	strb.w	sl, [r7]
   8a16e:	1c7d      	adds	r5, r7, #1
   8a170:	9e08      	ldr	r6, [sp, #32]
   8a172:	e570      	b.n	89c56 <_dtoa_r+0x6f6>
   8a174:	465a      	mov	r2, fp
   8a176:	46d0      	mov	r8, sl
   8a178:	46b3      	mov	fp, r6
   8a17a:	469a      	mov	sl, r3
   8a17c:	4616      	mov	r6, r2
   8a17e:	e54e      	b.n	89c1e <_dtoa_r+0x6be>
   8a180:	9812      	ldr	r0, [sp, #72]	; 0x48
   8a182:	495e      	ldr	r1, [pc, #376]	; (8a2fc <_dtoa_r+0xd9c>)
   8a184:	462a      	mov	r2, r5
   8a186:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8a18a:	4633      	mov	r3, r6
   8a18c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a190:	f002 faf6 	bl	8c780 <__aeabi_dmul>
   8a194:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   8a198:	4638      	mov	r0, r7
   8a19a:	4641      	mov	r1, r8
   8a19c:	f002 fda0 	bl	8cce0 <__aeabi_d2iz>
   8a1a0:	4605      	mov	r5, r0
   8a1a2:	f002 fa87 	bl	8c6b4 <__aeabi_i2d>
   8a1a6:	4602      	mov	r2, r0
   8a1a8:	460b      	mov	r3, r1
   8a1aa:	4638      	mov	r0, r7
   8a1ac:	4641      	mov	r1, r8
   8a1ae:	f002 f933 	bl	8c418 <__aeabi_dsub>
   8a1b2:	4606      	mov	r6, r0
   8a1b4:	9812      	ldr	r0, [sp, #72]	; 0x48
   8a1b6:	9a04      	ldr	r2, [sp, #16]
   8a1b8:	3530      	adds	r5, #48	; 0x30
   8a1ba:	2801      	cmp	r0, #1
   8a1bc:	7015      	strb	r5, [r2, #0]
   8a1be:	460f      	mov	r7, r1
   8a1c0:	f102 0501 	add.w	r5, r2, #1
   8a1c4:	d026      	beq.n	8a214 <_dtoa_r+0xcb4>
   8a1c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a1c8:	9a04      	ldr	r2, [sp, #16]
   8a1ca:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8a1ce:	4413      	add	r3, r2
   8a1d0:	f04f 0a00 	mov.w	sl, #0
   8a1d4:	4699      	mov	r9, r3
   8a1d6:	f8df b130 	ldr.w	fp, [pc, #304]	; 8a308 <_dtoa_r+0xda8>
   8a1da:	4652      	mov	r2, sl
   8a1dc:	465b      	mov	r3, fp
   8a1de:	4630      	mov	r0, r6
   8a1e0:	4639      	mov	r1, r7
   8a1e2:	f002 facd 	bl	8c780 <__aeabi_dmul>
   8a1e6:	460f      	mov	r7, r1
   8a1e8:	4606      	mov	r6, r0
   8a1ea:	f002 fd79 	bl	8cce0 <__aeabi_d2iz>
   8a1ee:	4680      	mov	r8, r0
   8a1f0:	f002 fa60 	bl	8c6b4 <__aeabi_i2d>
   8a1f4:	4602      	mov	r2, r0
   8a1f6:	460b      	mov	r3, r1
   8a1f8:	4630      	mov	r0, r6
   8a1fa:	4639      	mov	r1, r7
   8a1fc:	f002 f90c 	bl	8c418 <__aeabi_dsub>
   8a200:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8a204:	f805 8b01 	strb.w	r8, [r5], #1
   8a208:	454d      	cmp	r5, r9
   8a20a:	4606      	mov	r6, r0
   8a20c:	460f      	mov	r7, r1
   8a20e:	d1e4      	bne.n	8a1da <_dtoa_r+0xc7a>
   8a210:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a214:	2200      	movs	r2, #0
   8a216:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8a21a:	4b3a      	ldr	r3, [pc, #232]	; (8a304 <_dtoa_r+0xda4>)
   8a21c:	f002 f8fe 	bl	8c41c <__adddf3>
   8a220:	4632      	mov	r2, r6
   8a222:	463b      	mov	r3, r7
   8a224:	f002 fd1e 	bl	8cc64 <__aeabi_dcmplt>
   8a228:	2800      	cmp	r0, #0
   8a22a:	d046      	beq.n	8a2ba <_dtoa_r+0xd5a>
   8a22c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8a22e:	9302      	str	r3, [sp, #8]
   8a230:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8a234:	f7ff bb42 	b.w	898bc <_dtoa_r+0x35c>
   8a238:	f04f 0800 	mov.w	r8, #0
   8a23c:	4646      	mov	r6, r8
   8a23e:	e6a8      	b.n	89f92 <_dtoa_r+0xa32>
   8a240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a242:	9a07      	ldr	r2, [sp, #28]
   8a244:	1a9d      	subs	r5, r3, r2
   8a246:	2300      	movs	r3, #0
   8a248:	f7ff bb70 	b.w	8992c <_dtoa_r+0x3cc>
   8a24c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a24e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8a250:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a254:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8a256:	f7ff bb69 	b.w	8992c <_dtoa_r+0x3cc>
   8a25a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8a25e:	f04f 0a02 	mov.w	sl, #2
   8a262:	e56d      	b.n	89d40 <_dtoa_r+0x7e0>
   8a264:	9b07      	ldr	r3, [sp, #28]
   8a266:	2b00      	cmp	r3, #0
   8a268:	f43f aeb8 	beq.w	89fdc <_dtoa_r+0xa7c>
   8a26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a26e:	2b00      	cmp	r3, #0
   8a270:	f77f aede 	ble.w	8a030 <_dtoa_r+0xad0>
   8a274:	2200      	movs	r2, #0
   8a276:	4b24      	ldr	r3, [pc, #144]	; (8a308 <_dtoa_r+0xda8>)
   8a278:	4638      	mov	r0, r7
   8a27a:	4641      	mov	r1, r8
   8a27c:	f002 fa80 	bl	8c780 <__aeabi_dmul>
   8a280:	4607      	mov	r7, r0
   8a282:	4688      	mov	r8, r1
   8a284:	f10a 0001 	add.w	r0, sl, #1
   8a288:	f002 fa14 	bl	8c6b4 <__aeabi_i2d>
   8a28c:	463a      	mov	r2, r7
   8a28e:	4643      	mov	r3, r8
   8a290:	f002 fa76 	bl	8c780 <__aeabi_dmul>
   8a294:	2200      	movs	r2, #0
   8a296:	4b17      	ldr	r3, [pc, #92]	; (8a2f4 <_dtoa_r+0xd94>)
   8a298:	f002 f8c0 	bl	8c41c <__adddf3>
   8a29c:	9a02      	ldr	r2, [sp, #8]
   8a29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a2a0:	3a01      	subs	r2, #1
   8a2a2:	4605      	mov	r5, r0
   8a2a4:	9215      	str	r2, [sp, #84]	; 0x54
   8a2a6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8a2aa:	9312      	str	r3, [sp, #72]	; 0x48
   8a2ac:	e569      	b.n	89d82 <_dtoa_r+0x822>
   8a2ae:	2239      	movs	r2, #57	; 0x39
   8a2b0:	46b3      	mov	fp, r6
   8a2b2:	703a      	strb	r2, [r7, #0]
   8a2b4:	9e08      	ldr	r6, [sp, #32]
   8a2b6:	1c7d      	adds	r5, r7, #1
   8a2b8:	e4bf      	b.n	89c3a <_dtoa_r+0x6da>
   8a2ba:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8a2be:	2000      	movs	r0, #0
   8a2c0:	4910      	ldr	r1, [pc, #64]	; (8a304 <_dtoa_r+0xda4>)
   8a2c2:	f002 f8a9 	bl	8c418 <__aeabi_dsub>
   8a2c6:	4632      	mov	r2, r6
   8a2c8:	463b      	mov	r3, r7
   8a2ca:	f002 fce9 	bl	8cca0 <__aeabi_dcmpgt>
   8a2ce:	b908      	cbnz	r0, 8a2d4 <_dtoa_r+0xd74>
   8a2d0:	e6ae      	b.n	8a030 <_dtoa_r+0xad0>
   8a2d2:	4615      	mov	r5, r2
   8a2d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a2d8:	1e6a      	subs	r2, r5, #1
   8a2da:	2b30      	cmp	r3, #48	; 0x30
   8a2dc:	d0f9      	beq.n	8a2d2 <_dtoa_r+0xd72>
   8a2de:	e5d7      	b.n	89e90 <_dtoa_r+0x930>
   8a2e0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8a2e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8a2e6:	9302      	str	r3, [sp, #8]
   8a2e8:	f7ff bae8 	b.w	898bc <_dtoa_r+0x35c>
   8a2ec:	970c      	str	r7, [sp, #48]	; 0x30
   8a2ee:	f7ff bba7 	b.w	89a40 <_dtoa_r+0x4e0>
   8a2f2:	bf00      	nop
   8a2f4:	401c0000 	.word	0x401c0000
   8a2f8:	40140000 	.word	0x40140000
   8a2fc:	0008cf28 	.word	0x0008cf28
   8a300:	0008cf00 	.word	0x0008cf00
   8a304:	3fe00000 	.word	0x3fe00000
   8a308:	40240000 	.word	0x40240000
   8a30c:	2b39      	cmp	r3, #57	; 0x39
   8a30e:	f8cd b020 	str.w	fp, [sp, #32]
   8a312:	46d0      	mov	r8, sl
   8a314:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8a318:	469a      	mov	sl, r3
   8a31a:	d0c8      	beq.n	8a2ae <_dtoa_r+0xd4e>
   8a31c:	f1bb 0f00 	cmp.w	fp, #0
   8a320:	f73f aec0 	bgt.w	8a0a4 <_dtoa_r+0xb44>
   8a324:	e6c0      	b.n	8a0a8 <_dtoa_r+0xb48>
   8a326:	f47f aebf 	bne.w	8a0a8 <_dtoa_r+0xb48>
   8a32a:	f01a 0f01 	tst.w	sl, #1
   8a32e:	f43f aebb 	beq.w	8a0a8 <_dtoa_r+0xb48>
   8a332:	e6b3      	b.n	8a09c <_dtoa_r+0xb3c>
   8a334:	f04f 0800 	mov.w	r8, #0
   8a338:	4646      	mov	r6, r8
   8a33a:	e5e8      	b.n	89f0e <_dtoa_r+0x9ae>
   8a33c:	4631      	mov	r1, r6
   8a33e:	2300      	movs	r3, #0
   8a340:	220a      	movs	r2, #10
   8a342:	4620      	mov	r0, r4
   8a344:	f001 f912 	bl	8b56c <__multadd>
   8a348:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a34a:	4606      	mov	r6, r0
   8a34c:	2b00      	cmp	r3, #0
   8a34e:	dd07      	ble.n	8a360 <_dtoa_r+0xe00>
   8a350:	9307      	str	r3, [sp, #28]
   8a352:	f7ff bbab 	b.w	89aac <_dtoa_r+0x54c>
   8a356:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a358:	2b02      	cmp	r3, #2
   8a35a:	dc1f      	bgt.n	8a39c <_dtoa_r+0xe3c>
   8a35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a35e:	e43c      	b.n	89bda <_dtoa_r+0x67a>
   8a360:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a362:	2b02      	cmp	r3, #2
   8a364:	dc1a      	bgt.n	8a39c <_dtoa_r+0xe3c>
   8a366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a368:	e7f2      	b.n	8a350 <_dtoa_r+0xdf0>
   8a36a:	f43f ab81 	beq.w	89a70 <_dtoa_r+0x510>
   8a36e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a372:	e411      	b.n	89b98 <_dtoa_r+0x638>
   8a374:	2500      	movs	r5, #0
   8a376:	4620      	mov	r0, r4
   8a378:	6465      	str	r5, [r4, #68]	; 0x44
   8a37a:	4629      	mov	r1, r5
   8a37c:	f001 f8c6 	bl	8b50c <_Balloc>
   8a380:	f04f 33ff 	mov.w	r3, #4294967295
   8a384:	9307      	str	r3, [sp, #28]
   8a386:	930f      	str	r3, [sp, #60]	; 0x3c
   8a388:	2301      	movs	r3, #1
   8a38a:	9004      	str	r0, [sp, #16]
   8a38c:	9525      	str	r5, [sp, #148]	; 0x94
   8a38e:	6420      	str	r0, [r4, #64]	; 0x40
   8a390:	930b      	str	r3, [sp, #44]	; 0x2c
   8a392:	f7ff b9e0 	b.w	89756 <_dtoa_r+0x1f6>
   8a396:	2501      	movs	r5, #1
   8a398:	f7ff b9a8 	b.w	896ec <_dtoa_r+0x18c>
   8a39c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8a39e:	9307      	str	r3, [sp, #28]
   8a3a0:	e5e8      	b.n	89f74 <_dtoa_r+0xa14>
   8a3a2:	bf00      	nop

0008a3a4 <__sflush_r>:
   8a3a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a3ac:	b29a      	uxth	r2, r3
   8a3ae:	460d      	mov	r5, r1
   8a3b0:	0711      	lsls	r1, r2, #28
   8a3b2:	4680      	mov	r8, r0
   8a3b4:	d43a      	bmi.n	8a42c <__sflush_r+0x88>
   8a3b6:	686a      	ldr	r2, [r5, #4]
   8a3b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8a3bc:	2a00      	cmp	r2, #0
   8a3be:	81ab      	strh	r3, [r5, #12]
   8a3c0:	dd70      	ble.n	8a4a4 <__sflush_r+0x100>
   8a3c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a3c4:	2c00      	cmp	r4, #0
   8a3c6:	d04a      	beq.n	8a45e <__sflush_r+0xba>
   8a3c8:	2200      	movs	r2, #0
   8a3ca:	b29b      	uxth	r3, r3
   8a3cc:	f8d8 6000 	ldr.w	r6, [r8]
   8a3d0:	f8c8 2000 	str.w	r2, [r8]
   8a3d4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8a3d8:	d068      	beq.n	8a4ac <__sflush_r+0x108>
   8a3da:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8a3dc:	075f      	lsls	r7, r3, #29
   8a3de:	d505      	bpl.n	8a3ec <__sflush_r+0x48>
   8a3e0:	6869      	ldr	r1, [r5, #4]
   8a3e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a3e4:	1a52      	subs	r2, r2, r1
   8a3e6:	b10b      	cbz	r3, 8a3ec <__sflush_r+0x48>
   8a3e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a3ea:	1ad2      	subs	r2, r2, r3
   8a3ec:	2300      	movs	r3, #0
   8a3ee:	69e9      	ldr	r1, [r5, #28]
   8a3f0:	4640      	mov	r0, r8
   8a3f2:	47a0      	blx	r4
   8a3f4:	1c44      	adds	r4, r0, #1
   8a3f6:	d03d      	beq.n	8a474 <__sflush_r+0xd0>
   8a3f8:	2100      	movs	r1, #0
   8a3fa:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a3fe:	692a      	ldr	r2, [r5, #16]
   8a400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a404:	81ab      	strh	r3, [r5, #12]
   8a406:	04db      	lsls	r3, r3, #19
   8a408:	6069      	str	r1, [r5, #4]
   8a40a:	602a      	str	r2, [r5, #0]
   8a40c:	d448      	bmi.n	8a4a0 <__sflush_r+0xfc>
   8a40e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a410:	f8c8 6000 	str.w	r6, [r8]
   8a414:	b319      	cbz	r1, 8a45e <__sflush_r+0xba>
   8a416:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a41a:	4299      	cmp	r1, r3
   8a41c:	d002      	beq.n	8a424 <__sflush_r+0x80>
   8a41e:	4640      	mov	r0, r8
   8a420:	f000 f9da 	bl	8a7d8 <_free_r>
   8a424:	2000      	movs	r0, #0
   8a426:	6328      	str	r0, [r5, #48]	; 0x30
   8a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a42c:	692e      	ldr	r6, [r5, #16]
   8a42e:	b1b6      	cbz	r6, 8a45e <__sflush_r+0xba>
   8a430:	0791      	lsls	r1, r2, #30
   8a432:	bf18      	it	ne
   8a434:	2300      	movne	r3, #0
   8a436:	682c      	ldr	r4, [r5, #0]
   8a438:	bf08      	it	eq
   8a43a:	696b      	ldreq	r3, [r5, #20]
   8a43c:	602e      	str	r6, [r5, #0]
   8a43e:	1ba4      	subs	r4, r4, r6
   8a440:	60ab      	str	r3, [r5, #8]
   8a442:	e00a      	b.n	8a45a <__sflush_r+0xb6>
   8a444:	4623      	mov	r3, r4
   8a446:	4632      	mov	r2, r6
   8a448:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8a44a:	69e9      	ldr	r1, [r5, #28]
   8a44c:	4640      	mov	r0, r8
   8a44e:	47b8      	blx	r7
   8a450:	2800      	cmp	r0, #0
   8a452:	eba4 0400 	sub.w	r4, r4, r0
   8a456:	4406      	add	r6, r0
   8a458:	dd04      	ble.n	8a464 <__sflush_r+0xc0>
   8a45a:	2c00      	cmp	r4, #0
   8a45c:	dcf2      	bgt.n	8a444 <__sflush_r+0xa0>
   8a45e:	2000      	movs	r0, #0
   8a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a464:	89ab      	ldrh	r3, [r5, #12]
   8a466:	f04f 30ff 	mov.w	r0, #4294967295
   8a46a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a46e:	81ab      	strh	r3, [r5, #12]
   8a470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a474:	f8d8 4000 	ldr.w	r4, [r8]
   8a478:	2c1d      	cmp	r4, #29
   8a47a:	d8f3      	bhi.n	8a464 <__sflush_r+0xc0>
   8a47c:	4b16      	ldr	r3, [pc, #88]	; (8a4d8 <__sflush_r+0x134>)
   8a47e:	40e3      	lsrs	r3, r4
   8a480:	43db      	mvns	r3, r3
   8a482:	f013 0301 	ands.w	r3, r3, #1
   8a486:	d1ed      	bne.n	8a464 <__sflush_r+0xc0>
   8a488:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8a48c:	6929      	ldr	r1, [r5, #16]
   8a48e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8a492:	81aa      	strh	r2, [r5, #12]
   8a494:	04d2      	lsls	r2, r2, #19
   8a496:	606b      	str	r3, [r5, #4]
   8a498:	6029      	str	r1, [r5, #0]
   8a49a:	d5b8      	bpl.n	8a40e <__sflush_r+0x6a>
   8a49c:	2c00      	cmp	r4, #0
   8a49e:	d1b6      	bne.n	8a40e <__sflush_r+0x6a>
   8a4a0:	6528      	str	r0, [r5, #80]	; 0x50
   8a4a2:	e7b4      	b.n	8a40e <__sflush_r+0x6a>
   8a4a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8a4a6:	2a00      	cmp	r2, #0
   8a4a8:	dc8b      	bgt.n	8a3c2 <__sflush_r+0x1e>
   8a4aa:	e7d8      	b.n	8a45e <__sflush_r+0xba>
   8a4ac:	2301      	movs	r3, #1
   8a4ae:	69e9      	ldr	r1, [r5, #28]
   8a4b0:	4640      	mov	r0, r8
   8a4b2:	47a0      	blx	r4
   8a4b4:	1c43      	adds	r3, r0, #1
   8a4b6:	4602      	mov	r2, r0
   8a4b8:	d002      	beq.n	8a4c0 <__sflush_r+0x11c>
   8a4ba:	89ab      	ldrh	r3, [r5, #12]
   8a4bc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a4be:	e78d      	b.n	8a3dc <__sflush_r+0x38>
   8a4c0:	f8d8 3000 	ldr.w	r3, [r8]
   8a4c4:	2b00      	cmp	r3, #0
   8a4c6:	d0f8      	beq.n	8a4ba <__sflush_r+0x116>
   8a4c8:	2b1d      	cmp	r3, #29
   8a4ca:	d001      	beq.n	8a4d0 <__sflush_r+0x12c>
   8a4cc:	2b16      	cmp	r3, #22
   8a4ce:	d1c9      	bne.n	8a464 <__sflush_r+0xc0>
   8a4d0:	f8c8 6000 	str.w	r6, [r8]
   8a4d4:	e7c3      	b.n	8a45e <__sflush_r+0xba>
   8a4d6:	bf00      	nop
   8a4d8:	20400001 	.word	0x20400001

0008a4dc <_fflush_r>:
   8a4dc:	b538      	push	{r3, r4, r5, lr}
   8a4de:	460d      	mov	r5, r1
   8a4e0:	4604      	mov	r4, r0
   8a4e2:	b108      	cbz	r0, 8a4e8 <_fflush_r+0xc>
   8a4e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a4e6:	b1bb      	cbz	r3, 8a518 <_fflush_r+0x3c>
   8a4e8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8a4ec:	b188      	cbz	r0, 8a512 <_fflush_r+0x36>
   8a4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8a4f0:	07db      	lsls	r3, r3, #31
   8a4f2:	d401      	bmi.n	8a4f8 <_fflush_r+0x1c>
   8a4f4:	0581      	lsls	r1, r0, #22
   8a4f6:	d517      	bpl.n	8a528 <_fflush_r+0x4c>
   8a4f8:	4620      	mov	r0, r4
   8a4fa:	4629      	mov	r1, r5
   8a4fc:	f7ff ff52 	bl	8a3a4 <__sflush_r>
   8a500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8a502:	4604      	mov	r4, r0
   8a504:	07da      	lsls	r2, r3, #31
   8a506:	d402      	bmi.n	8a50e <_fflush_r+0x32>
   8a508:	89ab      	ldrh	r3, [r5, #12]
   8a50a:	059b      	lsls	r3, r3, #22
   8a50c:	d507      	bpl.n	8a51e <_fflush_r+0x42>
   8a50e:	4620      	mov	r0, r4
   8a510:	bd38      	pop	{r3, r4, r5, pc}
   8a512:	4604      	mov	r4, r0
   8a514:	4620      	mov	r0, r4
   8a516:	bd38      	pop	{r3, r4, r5, pc}
   8a518:	f000 f838 	bl	8a58c <__sinit>
   8a51c:	e7e4      	b.n	8a4e8 <_fflush_r+0xc>
   8a51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8a520:	f000 fc04 	bl	8ad2c <__retarget_lock_release_recursive>
   8a524:	4620      	mov	r0, r4
   8a526:	bd38      	pop	{r3, r4, r5, pc}
   8a528:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8a52a:	f000 fbfd 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8a52e:	e7e3      	b.n	8a4f8 <_fflush_r+0x1c>

0008a530 <_cleanup_r>:
   8a530:	4901      	ldr	r1, [pc, #4]	; (8a538 <_cleanup_r+0x8>)
   8a532:	f000 bbb1 	b.w	8ac98 <_fwalk_reent>
   8a536:	bf00      	nop
   8a538:	0008c2a9 	.word	0x0008c2a9

0008a53c <std.isra.0>:
   8a53c:	2300      	movs	r3, #0
   8a53e:	b510      	push	{r4, lr}
   8a540:	4604      	mov	r4, r0
   8a542:	8181      	strh	r1, [r0, #12]
   8a544:	81c2      	strh	r2, [r0, #14]
   8a546:	6003      	str	r3, [r0, #0]
   8a548:	6043      	str	r3, [r0, #4]
   8a54a:	6083      	str	r3, [r0, #8]
   8a54c:	6643      	str	r3, [r0, #100]	; 0x64
   8a54e:	6103      	str	r3, [r0, #16]
   8a550:	6143      	str	r3, [r0, #20]
   8a552:	6183      	str	r3, [r0, #24]
   8a554:	4619      	mov	r1, r3
   8a556:	2208      	movs	r2, #8
   8a558:	305c      	adds	r0, #92	; 0x5c
   8a55a:	f7fc fc0b 	bl	86d74 <memset>
   8a55e:	4807      	ldr	r0, [pc, #28]	; (8a57c <std.isra.0+0x40>)
   8a560:	4907      	ldr	r1, [pc, #28]	; (8a580 <std.isra.0+0x44>)
   8a562:	4a08      	ldr	r2, [pc, #32]	; (8a584 <std.isra.0+0x48>)
   8a564:	4b08      	ldr	r3, [pc, #32]	; (8a588 <std.isra.0+0x4c>)
   8a566:	6220      	str	r0, [r4, #32]
   8a568:	61e4      	str	r4, [r4, #28]
   8a56a:	6261      	str	r1, [r4, #36]	; 0x24
   8a56c:	62a2      	str	r2, [r4, #40]	; 0x28
   8a56e:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a570:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a578:	f000 bbd2 	b.w	8ad20 <__retarget_lock_init_recursive>
   8a57c:	0008be95 	.word	0x0008be95
   8a580:	0008beb9 	.word	0x0008beb9
   8a584:	0008bef5 	.word	0x0008bef5
   8a588:	0008bf15 	.word	0x0008bf15

0008a58c <__sinit>:
   8a58c:	b510      	push	{r4, lr}
   8a58e:	4604      	mov	r4, r0
   8a590:	4814      	ldr	r0, [pc, #80]	; (8a5e4 <__sinit+0x58>)
   8a592:	f000 fbc9 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8a596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a598:	b9fa      	cbnz	r2, 8a5da <__sinit+0x4e>
   8a59a:	2003      	movs	r0, #3
   8a59c:	4912      	ldr	r1, [pc, #72]	; (8a5e8 <__sinit+0x5c>)
   8a59e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a5a2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a5a6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8a5aa:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8a5ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a5b0:	6860      	ldr	r0, [r4, #4]
   8a5b2:	2104      	movs	r1, #4
   8a5b4:	f7ff ffc2 	bl	8a53c <std.isra.0>
   8a5b8:	68a0      	ldr	r0, [r4, #8]
   8a5ba:	2201      	movs	r2, #1
   8a5bc:	2109      	movs	r1, #9
   8a5be:	f7ff ffbd 	bl	8a53c <std.isra.0>
   8a5c2:	68e0      	ldr	r0, [r4, #12]
   8a5c4:	2202      	movs	r2, #2
   8a5c6:	2112      	movs	r1, #18
   8a5c8:	f7ff ffb8 	bl	8a53c <std.isra.0>
   8a5cc:	2301      	movs	r3, #1
   8a5ce:	4805      	ldr	r0, [pc, #20]	; (8a5e4 <__sinit+0x58>)
   8a5d0:	63a3      	str	r3, [r4, #56]	; 0x38
   8a5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a5d6:	f000 bba9 	b.w	8ad2c <__retarget_lock_release_recursive>
   8a5da:	4802      	ldr	r0, [pc, #8]	; (8a5e4 <__sinit+0x58>)
   8a5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a5e0:	f000 bba4 	b.w	8ad2c <__retarget_lock_release_recursive>
   8a5e4:	200027d0 	.word	0x200027d0
   8a5e8:	0008a531 	.word	0x0008a531

0008a5ec <__sfp_lock_acquire>:
   8a5ec:	4801      	ldr	r0, [pc, #4]	; (8a5f4 <__sfp_lock_acquire+0x8>)
   8a5ee:	f000 bb9b 	b.w	8ad28 <__retarget_lock_acquire_recursive>
   8a5f2:	bf00      	nop
   8a5f4:	200027e4 	.word	0x200027e4

0008a5f8 <__sfp_lock_release>:
   8a5f8:	4801      	ldr	r0, [pc, #4]	; (8a600 <__sfp_lock_release+0x8>)
   8a5fa:	f000 bb97 	b.w	8ad2c <__retarget_lock_release_recursive>
   8a5fe:	bf00      	nop
   8a600:	200027e4 	.word	0x200027e4

0008a604 <__libc_fini_array>:
   8a604:	b538      	push	{r3, r4, r5, lr}
   8a606:	4c0a      	ldr	r4, [pc, #40]	; (8a630 <__libc_fini_array+0x2c>)
   8a608:	4d0a      	ldr	r5, [pc, #40]	; (8a634 <__libc_fini_array+0x30>)
   8a60a:	1b64      	subs	r4, r4, r5
   8a60c:	10a4      	asrs	r4, r4, #2
   8a60e:	d00a      	beq.n	8a626 <__libc_fini_array+0x22>
   8a610:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8a614:	3b01      	subs	r3, #1
   8a616:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8a61a:	3c01      	subs	r4, #1
   8a61c:	f855 3904 	ldr.w	r3, [r5], #-4
   8a620:	4798      	blx	r3
   8a622:	2c00      	cmp	r4, #0
   8a624:	d1f9      	bne.n	8a61a <__libc_fini_array+0x16>
   8a626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a62a:	f002 bd73 	b.w	8d114 <_fini>
   8a62e:	bf00      	nop
   8a630:	0008d124 	.word	0x0008d124
   8a634:	0008d120 	.word	0x0008d120

0008a638 <__fputwc>:
   8a638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a63c:	b083      	sub	sp, #12
   8a63e:	4607      	mov	r7, r0
   8a640:	4688      	mov	r8, r1
   8a642:	4614      	mov	r4, r2
   8a644:	f000 fb50 	bl	8ace8 <__locale_mb_cur_max>
   8a648:	2801      	cmp	r0, #1
   8a64a:	d033      	beq.n	8a6b4 <__fputwc+0x7c>
   8a64c:	4642      	mov	r2, r8
   8a64e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a652:	a901      	add	r1, sp, #4
   8a654:	4638      	mov	r0, r7
   8a656:	f001 fd37 	bl	8c0c8 <_wcrtomb_r>
   8a65a:	1c42      	adds	r2, r0, #1
   8a65c:	4606      	mov	r6, r0
   8a65e:	d022      	beq.n	8a6a6 <__fputwc+0x6e>
   8a660:	b390      	cbz	r0, 8a6c8 <__fputwc+0x90>
   8a662:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a666:	2500      	movs	r5, #0
   8a668:	f10d 0904 	add.w	r9, sp, #4
   8a66c:	e008      	b.n	8a680 <__fputwc+0x48>
   8a66e:	6823      	ldr	r3, [r4, #0]
   8a670:	1c5a      	adds	r2, r3, #1
   8a672:	6022      	str	r2, [r4, #0]
   8a674:	7019      	strb	r1, [r3, #0]
   8a676:	3501      	adds	r5, #1
   8a678:	42b5      	cmp	r5, r6
   8a67a:	d225      	bcs.n	8a6c8 <__fputwc+0x90>
   8a67c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a680:	68a3      	ldr	r3, [r4, #8]
   8a682:	3b01      	subs	r3, #1
   8a684:	2b00      	cmp	r3, #0
   8a686:	60a3      	str	r3, [r4, #8]
   8a688:	daf1      	bge.n	8a66e <__fputwc+0x36>
   8a68a:	69a2      	ldr	r2, [r4, #24]
   8a68c:	4293      	cmp	r3, r2
   8a68e:	db01      	blt.n	8a694 <__fputwc+0x5c>
   8a690:	290a      	cmp	r1, #10
   8a692:	d1ec      	bne.n	8a66e <__fputwc+0x36>
   8a694:	4622      	mov	r2, r4
   8a696:	4638      	mov	r0, r7
   8a698:	f001 fcbe 	bl	8c018 <__swbuf_r>
   8a69c:	1c43      	adds	r3, r0, #1
   8a69e:	d1ea      	bne.n	8a676 <__fputwc+0x3e>
   8a6a0:	b003      	add	sp, #12
   8a6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a6a6:	89a3      	ldrh	r3, [r4, #12]
   8a6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a6ac:	81a3      	strh	r3, [r4, #12]
   8a6ae:	b003      	add	sp, #12
   8a6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a6b4:	f108 33ff 	add.w	r3, r8, #4294967295
   8a6b8:	2bfe      	cmp	r3, #254	; 0xfe
   8a6ba:	d8c7      	bhi.n	8a64c <__fputwc+0x14>
   8a6bc:	fa5f f188 	uxtb.w	r1, r8
   8a6c0:	4606      	mov	r6, r0
   8a6c2:	f88d 1004 	strb.w	r1, [sp, #4]
   8a6c6:	e7ce      	b.n	8a666 <__fputwc+0x2e>
   8a6c8:	4640      	mov	r0, r8
   8a6ca:	b003      	add	sp, #12
   8a6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a6d0 <_fputwc_r>:
   8a6d0:	b530      	push	{r4, r5, lr}
   8a6d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a6d4:	4614      	mov	r4, r2
   8a6d6:	f013 0f01 	tst.w	r3, #1
   8a6da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a6de:	b083      	sub	sp, #12
   8a6e0:	4605      	mov	r5, r0
   8a6e2:	b29a      	uxth	r2, r3
   8a6e4:	d101      	bne.n	8a6ea <_fputwc_r+0x1a>
   8a6e6:	0590      	lsls	r0, r2, #22
   8a6e8:	d51c      	bpl.n	8a724 <_fputwc_r+0x54>
   8a6ea:	0490      	lsls	r0, r2, #18
   8a6ec:	d406      	bmi.n	8a6fc <_fputwc_r+0x2c>
   8a6ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a6f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a6f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a6f8:	81a3      	strh	r3, [r4, #12]
   8a6fa:	6662      	str	r2, [r4, #100]	; 0x64
   8a6fc:	4628      	mov	r0, r5
   8a6fe:	4622      	mov	r2, r4
   8a700:	f7ff ff9a 	bl	8a638 <__fputwc>
   8a704:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a706:	4605      	mov	r5, r0
   8a708:	07da      	lsls	r2, r3, #31
   8a70a:	d402      	bmi.n	8a712 <_fputwc_r+0x42>
   8a70c:	89a3      	ldrh	r3, [r4, #12]
   8a70e:	059b      	lsls	r3, r3, #22
   8a710:	d502      	bpl.n	8a718 <_fputwc_r+0x48>
   8a712:	4628      	mov	r0, r5
   8a714:	b003      	add	sp, #12
   8a716:	bd30      	pop	{r4, r5, pc}
   8a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a71a:	f000 fb07 	bl	8ad2c <__retarget_lock_release_recursive>
   8a71e:	4628      	mov	r0, r5
   8a720:	b003      	add	sp, #12
   8a722:	bd30      	pop	{r4, r5, pc}
   8a724:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a726:	9101      	str	r1, [sp, #4]
   8a728:	f000 fafe 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8a72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a730:	9901      	ldr	r1, [sp, #4]
   8a732:	b29a      	uxth	r2, r3
   8a734:	e7d9      	b.n	8a6ea <_fputwc_r+0x1a>
   8a736:	bf00      	nop

0008a738 <_malloc_trim_r>:
   8a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a73a:	460c      	mov	r4, r1
   8a73c:	4f23      	ldr	r7, [pc, #140]	; (8a7cc <_malloc_trim_r+0x94>)
   8a73e:	4606      	mov	r6, r0
   8a740:	f000 fed8 	bl	8b4f4 <__malloc_lock>
   8a744:	68bb      	ldr	r3, [r7, #8]
   8a746:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a74a:	685d      	ldr	r5, [r3, #4]
   8a74c:	310f      	adds	r1, #15
   8a74e:	f025 0503 	bic.w	r5, r5, #3
   8a752:	4429      	add	r1, r5
   8a754:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8a758:	f021 010f 	bic.w	r1, r1, #15
   8a75c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8a760:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a764:	db07      	blt.n	8a776 <_malloc_trim_r+0x3e>
   8a766:	2100      	movs	r1, #0
   8a768:	4630      	mov	r0, r6
   8a76a:	f001 fb81 	bl	8be70 <_sbrk_r>
   8a76e:	68bb      	ldr	r3, [r7, #8]
   8a770:	442b      	add	r3, r5
   8a772:	4298      	cmp	r0, r3
   8a774:	d004      	beq.n	8a780 <_malloc_trim_r+0x48>
   8a776:	4630      	mov	r0, r6
   8a778:	f000 fec2 	bl	8b500 <__malloc_unlock>
   8a77c:	2000      	movs	r0, #0
   8a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a780:	4261      	negs	r1, r4
   8a782:	4630      	mov	r0, r6
   8a784:	f001 fb74 	bl	8be70 <_sbrk_r>
   8a788:	3001      	adds	r0, #1
   8a78a:	d00d      	beq.n	8a7a8 <_malloc_trim_r+0x70>
   8a78c:	4b10      	ldr	r3, [pc, #64]	; (8a7d0 <_malloc_trim_r+0x98>)
   8a78e:	68ba      	ldr	r2, [r7, #8]
   8a790:	6819      	ldr	r1, [r3, #0]
   8a792:	1b2d      	subs	r5, r5, r4
   8a794:	f045 0501 	orr.w	r5, r5, #1
   8a798:	4630      	mov	r0, r6
   8a79a:	1b09      	subs	r1, r1, r4
   8a79c:	6055      	str	r5, [r2, #4]
   8a79e:	6019      	str	r1, [r3, #0]
   8a7a0:	f000 feae 	bl	8b500 <__malloc_unlock>
   8a7a4:	2001      	movs	r0, #1
   8a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a7a8:	2100      	movs	r1, #0
   8a7aa:	4630      	mov	r0, r6
   8a7ac:	f001 fb60 	bl	8be70 <_sbrk_r>
   8a7b0:	68ba      	ldr	r2, [r7, #8]
   8a7b2:	1a83      	subs	r3, r0, r2
   8a7b4:	2b0f      	cmp	r3, #15
   8a7b6:	ddde      	ble.n	8a776 <_malloc_trim_r+0x3e>
   8a7b8:	4c06      	ldr	r4, [pc, #24]	; (8a7d4 <_malloc_trim_r+0x9c>)
   8a7ba:	4905      	ldr	r1, [pc, #20]	; (8a7d0 <_malloc_trim_r+0x98>)
   8a7bc:	6824      	ldr	r4, [r4, #0]
   8a7be:	f043 0301 	orr.w	r3, r3, #1
   8a7c2:	1b00      	subs	r0, r0, r4
   8a7c4:	6053      	str	r3, [r2, #4]
   8a7c6:	6008      	str	r0, [r1, #0]
   8a7c8:	e7d5      	b.n	8a776 <_malloc_trim_r+0x3e>
   8a7ca:	bf00      	nop
   8a7cc:	20001048 	.word	0x20001048
   8a7d0:	200022b4 	.word	0x200022b4
   8a7d4:	20001450 	.word	0x20001450

0008a7d8 <_free_r>:
   8a7d8:	2900      	cmp	r1, #0
   8a7da:	d044      	beq.n	8a866 <_free_r+0x8e>
   8a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a7e0:	460d      	mov	r5, r1
   8a7e2:	4680      	mov	r8, r0
   8a7e4:	f000 fe86 	bl	8b4f4 <__malloc_lock>
   8a7e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8a7ec:	4969      	ldr	r1, [pc, #420]	; (8a994 <_free_r+0x1bc>)
   8a7ee:	f1a5 0408 	sub.w	r4, r5, #8
   8a7f2:	f027 0301 	bic.w	r3, r7, #1
   8a7f6:	18e2      	adds	r2, r4, r3
   8a7f8:	688e      	ldr	r6, [r1, #8]
   8a7fa:	6850      	ldr	r0, [r2, #4]
   8a7fc:	42b2      	cmp	r2, r6
   8a7fe:	f020 0003 	bic.w	r0, r0, #3
   8a802:	d05e      	beq.n	8a8c2 <_free_r+0xea>
   8a804:	07fe      	lsls	r6, r7, #31
   8a806:	6050      	str	r0, [r2, #4]
   8a808:	d40b      	bmi.n	8a822 <_free_r+0x4a>
   8a80a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8a80e:	f101 0e08 	add.w	lr, r1, #8
   8a812:	1be4      	subs	r4, r4, r7
   8a814:	68a5      	ldr	r5, [r4, #8]
   8a816:	443b      	add	r3, r7
   8a818:	4575      	cmp	r5, lr
   8a81a:	d06d      	beq.n	8a8f8 <_free_r+0x120>
   8a81c:	68e7      	ldr	r7, [r4, #12]
   8a81e:	60ef      	str	r7, [r5, #12]
   8a820:	60bd      	str	r5, [r7, #8]
   8a822:	1815      	adds	r5, r2, r0
   8a824:	686d      	ldr	r5, [r5, #4]
   8a826:	07ed      	lsls	r5, r5, #31
   8a828:	d53e      	bpl.n	8a8a8 <_free_r+0xd0>
   8a82a:	f043 0201 	orr.w	r2, r3, #1
   8a82e:	6062      	str	r2, [r4, #4]
   8a830:	50e3      	str	r3, [r4, r3]
   8a832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8a836:	d217      	bcs.n	8a868 <_free_r+0x90>
   8a838:	2201      	movs	r2, #1
   8a83a:	08db      	lsrs	r3, r3, #3
   8a83c:	1098      	asrs	r0, r3, #2
   8a83e:	684d      	ldr	r5, [r1, #4]
   8a840:	4413      	add	r3, r2
   8a842:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8a846:	4082      	lsls	r2, r0
   8a848:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8a84c:	432a      	orrs	r2, r5
   8a84e:	3808      	subs	r0, #8
   8a850:	60e0      	str	r0, [r4, #12]
   8a852:	60a7      	str	r7, [r4, #8]
   8a854:	604a      	str	r2, [r1, #4]
   8a856:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8a85a:	60fc      	str	r4, [r7, #12]
   8a85c:	4640      	mov	r0, r8
   8a85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a862:	f000 be4d 	b.w	8b500 <__malloc_unlock>
   8a866:	4770      	bx	lr
   8a868:	0a5a      	lsrs	r2, r3, #9
   8a86a:	2a04      	cmp	r2, #4
   8a86c:	d852      	bhi.n	8a914 <_free_r+0x13c>
   8a86e:	099a      	lsrs	r2, r3, #6
   8a870:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8a874:	00ff      	lsls	r7, r7, #3
   8a876:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8a87a:	19c8      	adds	r0, r1, r7
   8a87c:	59ca      	ldr	r2, [r1, r7]
   8a87e:	3808      	subs	r0, #8
   8a880:	4290      	cmp	r0, r2
   8a882:	d04f      	beq.n	8a924 <_free_r+0x14c>
   8a884:	6851      	ldr	r1, [r2, #4]
   8a886:	f021 0103 	bic.w	r1, r1, #3
   8a88a:	428b      	cmp	r3, r1
   8a88c:	d232      	bcs.n	8a8f4 <_free_r+0x11c>
   8a88e:	6892      	ldr	r2, [r2, #8]
   8a890:	4290      	cmp	r0, r2
   8a892:	d1f7      	bne.n	8a884 <_free_r+0xac>
   8a894:	68c3      	ldr	r3, [r0, #12]
   8a896:	60a0      	str	r0, [r4, #8]
   8a898:	60e3      	str	r3, [r4, #12]
   8a89a:	609c      	str	r4, [r3, #8]
   8a89c:	60c4      	str	r4, [r0, #12]
   8a89e:	4640      	mov	r0, r8
   8a8a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8a8a4:	f000 be2c 	b.w	8b500 <__malloc_unlock>
   8a8a8:	6895      	ldr	r5, [r2, #8]
   8a8aa:	4f3b      	ldr	r7, [pc, #236]	; (8a998 <_free_r+0x1c0>)
   8a8ac:	4403      	add	r3, r0
   8a8ae:	42bd      	cmp	r5, r7
   8a8b0:	d040      	beq.n	8a934 <_free_r+0x15c>
   8a8b2:	68d0      	ldr	r0, [r2, #12]
   8a8b4:	f043 0201 	orr.w	r2, r3, #1
   8a8b8:	60e8      	str	r0, [r5, #12]
   8a8ba:	6085      	str	r5, [r0, #8]
   8a8bc:	6062      	str	r2, [r4, #4]
   8a8be:	50e3      	str	r3, [r4, r3]
   8a8c0:	e7b7      	b.n	8a832 <_free_r+0x5a>
   8a8c2:	07ff      	lsls	r7, r7, #31
   8a8c4:	4403      	add	r3, r0
   8a8c6:	d407      	bmi.n	8a8d8 <_free_r+0x100>
   8a8c8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8a8cc:	1b64      	subs	r4, r4, r5
   8a8ce:	68e2      	ldr	r2, [r4, #12]
   8a8d0:	68a0      	ldr	r0, [r4, #8]
   8a8d2:	442b      	add	r3, r5
   8a8d4:	60c2      	str	r2, [r0, #12]
   8a8d6:	6090      	str	r0, [r2, #8]
   8a8d8:	4a30      	ldr	r2, [pc, #192]	; (8a99c <_free_r+0x1c4>)
   8a8da:	f043 0001 	orr.w	r0, r3, #1
   8a8de:	6812      	ldr	r2, [r2, #0]
   8a8e0:	6060      	str	r0, [r4, #4]
   8a8e2:	4293      	cmp	r3, r2
   8a8e4:	608c      	str	r4, [r1, #8]
   8a8e6:	d3b9      	bcc.n	8a85c <_free_r+0x84>
   8a8e8:	4b2d      	ldr	r3, [pc, #180]	; (8a9a0 <_free_r+0x1c8>)
   8a8ea:	4640      	mov	r0, r8
   8a8ec:	6819      	ldr	r1, [r3, #0]
   8a8ee:	f7ff ff23 	bl	8a738 <_malloc_trim_r>
   8a8f2:	e7b3      	b.n	8a85c <_free_r+0x84>
   8a8f4:	4610      	mov	r0, r2
   8a8f6:	e7cd      	b.n	8a894 <_free_r+0xbc>
   8a8f8:	1811      	adds	r1, r2, r0
   8a8fa:	6849      	ldr	r1, [r1, #4]
   8a8fc:	07c9      	lsls	r1, r1, #31
   8a8fe:	d444      	bmi.n	8a98a <_free_r+0x1b2>
   8a900:	6891      	ldr	r1, [r2, #8]
   8a902:	4403      	add	r3, r0
   8a904:	68d2      	ldr	r2, [r2, #12]
   8a906:	f043 0001 	orr.w	r0, r3, #1
   8a90a:	60ca      	str	r2, [r1, #12]
   8a90c:	6091      	str	r1, [r2, #8]
   8a90e:	6060      	str	r0, [r4, #4]
   8a910:	50e3      	str	r3, [r4, r3]
   8a912:	e7a3      	b.n	8a85c <_free_r+0x84>
   8a914:	2a14      	cmp	r2, #20
   8a916:	d816      	bhi.n	8a946 <_free_r+0x16e>
   8a918:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8a91c:	00ff      	lsls	r7, r7, #3
   8a91e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8a922:	e7aa      	b.n	8a87a <_free_r+0xa2>
   8a924:	2301      	movs	r3, #1
   8a926:	10aa      	asrs	r2, r5, #2
   8a928:	684d      	ldr	r5, [r1, #4]
   8a92a:	4093      	lsls	r3, r2
   8a92c:	432b      	orrs	r3, r5
   8a92e:	604b      	str	r3, [r1, #4]
   8a930:	4603      	mov	r3, r0
   8a932:	e7b0      	b.n	8a896 <_free_r+0xbe>
   8a934:	f043 0201 	orr.w	r2, r3, #1
   8a938:	614c      	str	r4, [r1, #20]
   8a93a:	610c      	str	r4, [r1, #16]
   8a93c:	60e5      	str	r5, [r4, #12]
   8a93e:	60a5      	str	r5, [r4, #8]
   8a940:	6062      	str	r2, [r4, #4]
   8a942:	50e3      	str	r3, [r4, r3]
   8a944:	e78a      	b.n	8a85c <_free_r+0x84>
   8a946:	2a54      	cmp	r2, #84	; 0x54
   8a948:	d806      	bhi.n	8a958 <_free_r+0x180>
   8a94a:	0b1a      	lsrs	r2, r3, #12
   8a94c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8a950:	00ff      	lsls	r7, r7, #3
   8a952:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8a956:	e790      	b.n	8a87a <_free_r+0xa2>
   8a958:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8a95c:	d806      	bhi.n	8a96c <_free_r+0x194>
   8a95e:	0bda      	lsrs	r2, r3, #15
   8a960:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8a964:	00ff      	lsls	r7, r7, #3
   8a966:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8a96a:	e786      	b.n	8a87a <_free_r+0xa2>
   8a96c:	f240 5054 	movw	r0, #1364	; 0x554
   8a970:	4282      	cmp	r2, r0
   8a972:	d806      	bhi.n	8a982 <_free_r+0x1aa>
   8a974:	0c9a      	lsrs	r2, r3, #18
   8a976:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8a97a:	00ff      	lsls	r7, r7, #3
   8a97c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8a980:	e77b      	b.n	8a87a <_free_r+0xa2>
   8a982:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8a986:	257e      	movs	r5, #126	; 0x7e
   8a988:	e777      	b.n	8a87a <_free_r+0xa2>
   8a98a:	f043 0101 	orr.w	r1, r3, #1
   8a98e:	6061      	str	r1, [r4, #4]
   8a990:	6013      	str	r3, [r2, #0]
   8a992:	e763      	b.n	8a85c <_free_r+0x84>
   8a994:	20001048 	.word	0x20001048
   8a998:	20001050 	.word	0x20001050
   8a99c:	20001454 	.word	0x20001454
   8a9a0:	200022e4 	.word	0x200022e4

0008a9a4 <__sfvwrite_r>:
   8a9a4:	6893      	ldr	r3, [r2, #8]
   8a9a6:	2b00      	cmp	r3, #0
   8a9a8:	d071      	beq.n	8aa8e <__sfvwrite_r+0xea>
   8a9aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a9ae:	898b      	ldrh	r3, [r1, #12]
   8a9b0:	b083      	sub	sp, #12
   8a9b2:	460c      	mov	r4, r1
   8a9b4:	0719      	lsls	r1, r3, #28
   8a9b6:	9000      	str	r0, [sp, #0]
   8a9b8:	4616      	mov	r6, r2
   8a9ba:	d525      	bpl.n	8aa08 <__sfvwrite_r+0x64>
   8a9bc:	6922      	ldr	r2, [r4, #16]
   8a9be:	b31a      	cbz	r2, 8aa08 <__sfvwrite_r+0x64>
   8a9c0:	f013 0002 	ands.w	r0, r3, #2
   8a9c4:	6835      	ldr	r5, [r6, #0]
   8a9c6:	d02b      	beq.n	8aa20 <__sfvwrite_r+0x7c>
   8a9c8:	f04f 0900 	mov.w	r9, #0
   8a9cc:	46b0      	mov	r8, r6
   8a9ce:	464f      	mov	r7, r9
   8a9d0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8ac94 <__sfvwrite_r+0x2f0>
   8a9d4:	2f00      	cmp	r7, #0
   8a9d6:	d055      	beq.n	8aa84 <__sfvwrite_r+0xe0>
   8a9d8:	4557      	cmp	r7, sl
   8a9da:	463b      	mov	r3, r7
   8a9dc:	464a      	mov	r2, r9
   8a9de:	bf28      	it	cs
   8a9e0:	4653      	movcs	r3, sl
   8a9e2:	69e1      	ldr	r1, [r4, #28]
   8a9e4:	9800      	ldr	r0, [sp, #0]
   8a9e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a9e8:	47b0      	blx	r6
   8a9ea:	2800      	cmp	r0, #0
   8a9ec:	dd56      	ble.n	8aa9c <__sfvwrite_r+0xf8>
   8a9ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a9f2:	4481      	add	r9, r0
   8a9f4:	1a1b      	subs	r3, r3, r0
   8a9f6:	1a3f      	subs	r7, r7, r0
   8a9f8:	f8c8 3008 	str.w	r3, [r8, #8]
   8a9fc:	2b00      	cmp	r3, #0
   8a9fe:	d1e9      	bne.n	8a9d4 <__sfvwrite_r+0x30>
   8aa00:	2000      	movs	r0, #0
   8aa02:	b003      	add	sp, #12
   8aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aa08:	4621      	mov	r1, r4
   8aa0a:	9800      	ldr	r0, [sp, #0]
   8aa0c:	f7fe fc9e 	bl	8934c <__swsetup_r>
   8aa10:	2800      	cmp	r0, #0
   8aa12:	f040 8135 	bne.w	8ac80 <__sfvwrite_r+0x2dc>
   8aa16:	89a3      	ldrh	r3, [r4, #12]
   8aa18:	6835      	ldr	r5, [r6, #0]
   8aa1a:	f013 0002 	ands.w	r0, r3, #2
   8aa1e:	d1d3      	bne.n	8a9c8 <__sfvwrite_r+0x24>
   8aa20:	f013 0901 	ands.w	r9, r3, #1
   8aa24:	d144      	bne.n	8aab0 <__sfvwrite_r+0x10c>
   8aa26:	464f      	mov	r7, r9
   8aa28:	9601      	str	r6, [sp, #4]
   8aa2a:	b337      	cbz	r7, 8aa7a <__sfvwrite_r+0xd6>
   8aa2c:	059a      	lsls	r2, r3, #22
   8aa2e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8aa32:	f140 8085 	bpl.w	8ab40 <__sfvwrite_r+0x19c>
   8aa36:	4547      	cmp	r7, r8
   8aa38:	46c3      	mov	fp, r8
   8aa3a:	f0c0 80ad 	bcc.w	8ab98 <__sfvwrite_r+0x1f4>
   8aa3e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8aa42:	f040 80ae 	bne.w	8aba2 <__sfvwrite_r+0x1fe>
   8aa46:	46ba      	mov	sl, r7
   8aa48:	6820      	ldr	r0, [r4, #0]
   8aa4a:	465a      	mov	r2, fp
   8aa4c:	4649      	mov	r1, r9
   8aa4e:	f000 fced 	bl	8b42c <memmove>
   8aa52:	68a2      	ldr	r2, [r4, #8]
   8aa54:	6823      	ldr	r3, [r4, #0]
   8aa56:	eba2 0208 	sub.w	r2, r2, r8
   8aa5a:	445b      	add	r3, fp
   8aa5c:	60a2      	str	r2, [r4, #8]
   8aa5e:	6023      	str	r3, [r4, #0]
   8aa60:	9a01      	ldr	r2, [sp, #4]
   8aa62:	44d1      	add	r9, sl
   8aa64:	6893      	ldr	r3, [r2, #8]
   8aa66:	eba7 070a 	sub.w	r7, r7, sl
   8aa6a:	eba3 030a 	sub.w	r3, r3, sl
   8aa6e:	6093      	str	r3, [r2, #8]
   8aa70:	2b00      	cmp	r3, #0
   8aa72:	d0c5      	beq.n	8aa00 <__sfvwrite_r+0x5c>
   8aa74:	89a3      	ldrh	r3, [r4, #12]
   8aa76:	2f00      	cmp	r7, #0
   8aa78:	d1d8      	bne.n	8aa2c <__sfvwrite_r+0x88>
   8aa7a:	f8d5 9000 	ldr.w	r9, [r5]
   8aa7e:	686f      	ldr	r7, [r5, #4]
   8aa80:	3508      	adds	r5, #8
   8aa82:	e7d2      	b.n	8aa2a <__sfvwrite_r+0x86>
   8aa84:	f8d5 9000 	ldr.w	r9, [r5]
   8aa88:	686f      	ldr	r7, [r5, #4]
   8aa8a:	3508      	adds	r5, #8
   8aa8c:	e7a2      	b.n	8a9d4 <__sfvwrite_r+0x30>
   8aa8e:	2000      	movs	r0, #0
   8aa90:	4770      	bx	lr
   8aa92:	4621      	mov	r1, r4
   8aa94:	9800      	ldr	r0, [sp, #0]
   8aa96:	f7ff fd21 	bl	8a4dc <_fflush_r>
   8aa9a:	b378      	cbz	r0, 8aafc <__sfvwrite_r+0x158>
   8aa9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aaa0:	f04f 30ff 	mov.w	r0, #4294967295
   8aaa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8aaa8:	81a3      	strh	r3, [r4, #12]
   8aaaa:	b003      	add	sp, #12
   8aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aab0:	4681      	mov	r9, r0
   8aab2:	4633      	mov	r3, r6
   8aab4:	464e      	mov	r6, r9
   8aab6:	46a8      	mov	r8, r5
   8aab8:	469a      	mov	sl, r3
   8aaba:	464d      	mov	r5, r9
   8aabc:	b356      	cbz	r6, 8ab14 <__sfvwrite_r+0x170>
   8aabe:	2800      	cmp	r0, #0
   8aac0:	d032      	beq.n	8ab28 <__sfvwrite_r+0x184>
   8aac2:	45b1      	cmp	r9, r6
   8aac4:	46cb      	mov	fp, r9
   8aac6:	bf28      	it	cs
   8aac8:	46b3      	movcs	fp, r6
   8aaca:	6820      	ldr	r0, [r4, #0]
   8aacc:	6923      	ldr	r3, [r4, #16]
   8aace:	465f      	mov	r7, fp
   8aad0:	4298      	cmp	r0, r3
   8aad2:	6962      	ldr	r2, [r4, #20]
   8aad4:	d904      	bls.n	8aae0 <__sfvwrite_r+0x13c>
   8aad6:	68a3      	ldr	r3, [r4, #8]
   8aad8:	4413      	add	r3, r2
   8aada:	459b      	cmp	fp, r3
   8aadc:	f300 80a8 	bgt.w	8ac30 <__sfvwrite_r+0x28c>
   8aae0:	4593      	cmp	fp, r2
   8aae2:	db4d      	blt.n	8ab80 <__sfvwrite_r+0x1dc>
   8aae4:	4613      	mov	r3, r2
   8aae6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8aae8:	462a      	mov	r2, r5
   8aaea:	69e1      	ldr	r1, [r4, #28]
   8aaec:	9800      	ldr	r0, [sp, #0]
   8aaee:	47b8      	blx	r7
   8aaf0:	1e07      	subs	r7, r0, #0
   8aaf2:	ddd3      	ble.n	8aa9c <__sfvwrite_r+0xf8>
   8aaf4:	ebb9 0907 	subs.w	r9, r9, r7
   8aaf8:	d0cb      	beq.n	8aa92 <__sfvwrite_r+0xee>
   8aafa:	2001      	movs	r0, #1
   8aafc:	f8da 3008 	ldr.w	r3, [sl, #8]
   8ab00:	443d      	add	r5, r7
   8ab02:	1bdb      	subs	r3, r3, r7
   8ab04:	1bf6      	subs	r6, r6, r7
   8ab06:	f8ca 3008 	str.w	r3, [sl, #8]
   8ab0a:	2b00      	cmp	r3, #0
   8ab0c:	f43f af78 	beq.w	8aa00 <__sfvwrite_r+0x5c>
   8ab10:	2e00      	cmp	r6, #0
   8ab12:	d1d4      	bne.n	8aabe <__sfvwrite_r+0x11a>
   8ab14:	f108 0308 	add.w	r3, r8, #8
   8ab18:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ab1c:	4698      	mov	r8, r3
   8ab1e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8ab22:	3308      	adds	r3, #8
   8ab24:	2e00      	cmp	r6, #0
   8ab26:	d0f7      	beq.n	8ab18 <__sfvwrite_r+0x174>
   8ab28:	4632      	mov	r2, r6
   8ab2a:	210a      	movs	r1, #10
   8ab2c:	4628      	mov	r0, r5
   8ab2e:	f000 fc37 	bl	8b3a0 <memchr>
   8ab32:	2800      	cmp	r0, #0
   8ab34:	f000 80a1 	beq.w	8ac7a <__sfvwrite_r+0x2d6>
   8ab38:	3001      	adds	r0, #1
   8ab3a:	eba0 0905 	sub.w	r9, r0, r5
   8ab3e:	e7c0      	b.n	8aac2 <__sfvwrite_r+0x11e>
   8ab40:	6820      	ldr	r0, [r4, #0]
   8ab42:	6923      	ldr	r3, [r4, #16]
   8ab44:	4298      	cmp	r0, r3
   8ab46:	d802      	bhi.n	8ab4e <__sfvwrite_r+0x1aa>
   8ab48:	6963      	ldr	r3, [r4, #20]
   8ab4a:	429f      	cmp	r7, r3
   8ab4c:	d25d      	bcs.n	8ac0a <__sfvwrite_r+0x266>
   8ab4e:	45b8      	cmp	r8, r7
   8ab50:	bf28      	it	cs
   8ab52:	46b8      	movcs	r8, r7
   8ab54:	4649      	mov	r1, r9
   8ab56:	4642      	mov	r2, r8
   8ab58:	f000 fc68 	bl	8b42c <memmove>
   8ab5c:	68a3      	ldr	r3, [r4, #8]
   8ab5e:	6822      	ldr	r2, [r4, #0]
   8ab60:	eba3 0308 	sub.w	r3, r3, r8
   8ab64:	4442      	add	r2, r8
   8ab66:	60a3      	str	r3, [r4, #8]
   8ab68:	6022      	str	r2, [r4, #0]
   8ab6a:	b10b      	cbz	r3, 8ab70 <__sfvwrite_r+0x1cc>
   8ab6c:	46c2      	mov	sl, r8
   8ab6e:	e777      	b.n	8aa60 <__sfvwrite_r+0xbc>
   8ab70:	4621      	mov	r1, r4
   8ab72:	9800      	ldr	r0, [sp, #0]
   8ab74:	f7ff fcb2 	bl	8a4dc <_fflush_r>
   8ab78:	2800      	cmp	r0, #0
   8ab7a:	d18f      	bne.n	8aa9c <__sfvwrite_r+0xf8>
   8ab7c:	46c2      	mov	sl, r8
   8ab7e:	e76f      	b.n	8aa60 <__sfvwrite_r+0xbc>
   8ab80:	465a      	mov	r2, fp
   8ab82:	4629      	mov	r1, r5
   8ab84:	f000 fc52 	bl	8b42c <memmove>
   8ab88:	68a2      	ldr	r2, [r4, #8]
   8ab8a:	6823      	ldr	r3, [r4, #0]
   8ab8c:	eba2 020b 	sub.w	r2, r2, fp
   8ab90:	445b      	add	r3, fp
   8ab92:	60a2      	str	r2, [r4, #8]
   8ab94:	6023      	str	r3, [r4, #0]
   8ab96:	e7ad      	b.n	8aaf4 <__sfvwrite_r+0x150>
   8ab98:	46b8      	mov	r8, r7
   8ab9a:	46ba      	mov	sl, r7
   8ab9c:	46bb      	mov	fp, r7
   8ab9e:	6820      	ldr	r0, [r4, #0]
   8aba0:	e753      	b.n	8aa4a <__sfvwrite_r+0xa6>
   8aba2:	6962      	ldr	r2, [r4, #20]
   8aba4:	6820      	ldr	r0, [r4, #0]
   8aba6:	6921      	ldr	r1, [r4, #16]
   8aba8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8abac:	eba0 0a01 	sub.w	sl, r0, r1
   8abb0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8abb4:	f10a 0001 	add.w	r0, sl, #1
   8abb8:	ea4f 0868 	mov.w	r8, r8, asr #1
   8abbc:	4438      	add	r0, r7
   8abbe:	4540      	cmp	r0, r8
   8abc0:	4642      	mov	r2, r8
   8abc2:	bf84      	itt	hi
   8abc4:	4680      	movhi	r8, r0
   8abc6:	4642      	movhi	r2, r8
   8abc8:	055b      	lsls	r3, r3, #21
   8abca:	d544      	bpl.n	8ac56 <__sfvwrite_r+0x2b2>
   8abcc:	4611      	mov	r1, r2
   8abce:	9800      	ldr	r0, [sp, #0]
   8abd0:	f000 f92e 	bl	8ae30 <_malloc_r>
   8abd4:	4683      	mov	fp, r0
   8abd6:	2800      	cmp	r0, #0
   8abd8:	d055      	beq.n	8ac86 <__sfvwrite_r+0x2e2>
   8abda:	4652      	mov	r2, sl
   8abdc:	6921      	ldr	r1, [r4, #16]
   8abde:	f7fc f853 	bl	86c88 <memcpy>
   8abe2:	89a3      	ldrh	r3, [r4, #12]
   8abe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8abe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8abec:	81a3      	strh	r3, [r4, #12]
   8abee:	eb0b 000a 	add.w	r0, fp, sl
   8abf2:	eba8 030a 	sub.w	r3, r8, sl
   8abf6:	f8c4 b010 	str.w	fp, [r4, #16]
   8abfa:	f8c4 8014 	str.w	r8, [r4, #20]
   8abfe:	6020      	str	r0, [r4, #0]
   8ac00:	60a3      	str	r3, [r4, #8]
   8ac02:	46b8      	mov	r8, r7
   8ac04:	46ba      	mov	sl, r7
   8ac06:	46bb      	mov	fp, r7
   8ac08:	e71f      	b.n	8aa4a <__sfvwrite_r+0xa6>
   8ac0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8ac0e:	42ba      	cmp	r2, r7
   8ac10:	bf28      	it	cs
   8ac12:	463a      	movcs	r2, r7
   8ac14:	fb92 f2f3 	sdiv	r2, r2, r3
   8ac18:	69e1      	ldr	r1, [r4, #28]
   8ac1a:	fb03 f302 	mul.w	r3, r3, r2
   8ac1e:	9800      	ldr	r0, [sp, #0]
   8ac20:	464a      	mov	r2, r9
   8ac22:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8ac24:	47b0      	blx	r6
   8ac26:	f1b0 0a00 	subs.w	sl, r0, #0
   8ac2a:	f73f af19 	bgt.w	8aa60 <__sfvwrite_r+0xbc>
   8ac2e:	e735      	b.n	8aa9c <__sfvwrite_r+0xf8>
   8ac30:	461a      	mov	r2, r3
   8ac32:	4629      	mov	r1, r5
   8ac34:	9301      	str	r3, [sp, #4]
   8ac36:	f000 fbf9 	bl	8b42c <memmove>
   8ac3a:	6822      	ldr	r2, [r4, #0]
   8ac3c:	9b01      	ldr	r3, [sp, #4]
   8ac3e:	4621      	mov	r1, r4
   8ac40:	441a      	add	r2, r3
   8ac42:	6022      	str	r2, [r4, #0]
   8ac44:	9800      	ldr	r0, [sp, #0]
   8ac46:	f7ff fc49 	bl	8a4dc <_fflush_r>
   8ac4a:	9b01      	ldr	r3, [sp, #4]
   8ac4c:	2800      	cmp	r0, #0
   8ac4e:	f47f af25 	bne.w	8aa9c <__sfvwrite_r+0xf8>
   8ac52:	461f      	mov	r7, r3
   8ac54:	e74e      	b.n	8aaf4 <__sfvwrite_r+0x150>
   8ac56:	9800      	ldr	r0, [sp, #0]
   8ac58:	f000 ff54 	bl	8bb04 <_realloc_r>
   8ac5c:	4683      	mov	fp, r0
   8ac5e:	2800      	cmp	r0, #0
   8ac60:	d1c5      	bne.n	8abee <__sfvwrite_r+0x24a>
   8ac62:	9d00      	ldr	r5, [sp, #0]
   8ac64:	6921      	ldr	r1, [r4, #16]
   8ac66:	4628      	mov	r0, r5
   8ac68:	f7ff fdb6 	bl	8a7d8 <_free_r>
   8ac6c:	220c      	movs	r2, #12
   8ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac72:	602a      	str	r2, [r5, #0]
   8ac74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8ac78:	e712      	b.n	8aaa0 <__sfvwrite_r+0xfc>
   8ac7a:	f106 0901 	add.w	r9, r6, #1
   8ac7e:	e720      	b.n	8aac2 <__sfvwrite_r+0x11e>
   8ac80:	f04f 30ff 	mov.w	r0, #4294967295
   8ac84:	e6bd      	b.n	8aa02 <__sfvwrite_r+0x5e>
   8ac86:	220c      	movs	r2, #12
   8ac88:	9900      	ldr	r1, [sp, #0]
   8ac8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac8e:	600a      	str	r2, [r1, #0]
   8ac90:	e706      	b.n	8aaa0 <__sfvwrite_r+0xfc>
   8ac92:	bf00      	nop
   8ac94:	7ffffc00 	.word	0x7ffffc00

0008ac98 <_fwalk_reent>:
   8ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ac9c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8aca0:	d01e      	beq.n	8ace0 <_fwalk_reent+0x48>
   8aca2:	4688      	mov	r8, r1
   8aca4:	4607      	mov	r7, r0
   8aca6:	f04f 0900 	mov.w	r9, #0
   8acaa:	6875      	ldr	r5, [r6, #4]
   8acac:	68b4      	ldr	r4, [r6, #8]
   8acae:	3d01      	subs	r5, #1
   8acb0:	d410      	bmi.n	8acd4 <_fwalk_reent+0x3c>
   8acb2:	89a3      	ldrh	r3, [r4, #12]
   8acb4:	3d01      	subs	r5, #1
   8acb6:	2b01      	cmp	r3, #1
   8acb8:	d908      	bls.n	8accc <_fwalk_reent+0x34>
   8acba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8acbe:	3301      	adds	r3, #1
   8acc0:	d004      	beq.n	8accc <_fwalk_reent+0x34>
   8acc2:	4621      	mov	r1, r4
   8acc4:	4638      	mov	r0, r7
   8acc6:	47c0      	blx	r8
   8acc8:	ea49 0900 	orr.w	r9, r9, r0
   8accc:	1c6b      	adds	r3, r5, #1
   8acce:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8acd2:	d1ee      	bne.n	8acb2 <_fwalk_reent+0x1a>
   8acd4:	6836      	ldr	r6, [r6, #0]
   8acd6:	2e00      	cmp	r6, #0
   8acd8:	d1e7      	bne.n	8acaa <_fwalk_reent+0x12>
   8acda:	4648      	mov	r0, r9
   8acdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ace0:	46b1      	mov	r9, r6
   8ace2:	4648      	mov	r0, r9
   8ace4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008ace8 <__locale_mb_cur_max>:
   8ace8:	4b04      	ldr	r3, [pc, #16]	; (8acfc <__locale_mb_cur_max+0x14>)
   8acea:	4a05      	ldr	r2, [pc, #20]	; (8ad00 <__locale_mb_cur_max+0x18>)
   8acec:	681b      	ldr	r3, [r3, #0]
   8acee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8acf0:	2b00      	cmp	r3, #0
   8acf2:	bf08      	it	eq
   8acf4:	4613      	moveq	r3, r2
   8acf6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8acfa:	4770      	bx	lr
   8acfc:	20000aac 	.word	0x20000aac
   8ad00:	20000edc 	.word	0x20000edc

0008ad04 <_localeconv_r>:
   8ad04:	4a04      	ldr	r2, [pc, #16]	; (8ad18 <_localeconv_r+0x14>)
   8ad06:	4b05      	ldr	r3, [pc, #20]	; (8ad1c <_localeconv_r+0x18>)
   8ad08:	6812      	ldr	r2, [r2, #0]
   8ad0a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8ad0c:	2800      	cmp	r0, #0
   8ad0e:	bf08      	it	eq
   8ad10:	4618      	moveq	r0, r3
   8ad12:	30f0      	adds	r0, #240	; 0xf0
   8ad14:	4770      	bx	lr
   8ad16:	bf00      	nop
   8ad18:	20000aac 	.word	0x20000aac
   8ad1c:	20000edc 	.word	0x20000edc

0008ad20 <__retarget_lock_init_recursive>:
   8ad20:	4770      	bx	lr
   8ad22:	bf00      	nop

0008ad24 <__retarget_lock_close_recursive>:
   8ad24:	4770      	bx	lr
   8ad26:	bf00      	nop

0008ad28 <__retarget_lock_acquire_recursive>:
   8ad28:	4770      	bx	lr
   8ad2a:	bf00      	nop

0008ad2c <__retarget_lock_release_recursive>:
   8ad2c:	4770      	bx	lr
   8ad2e:	bf00      	nop

0008ad30 <__swhatbuf_r>:
   8ad30:	b570      	push	{r4, r5, r6, lr}
   8ad32:	460c      	mov	r4, r1
   8ad34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ad38:	b090      	sub	sp, #64	; 0x40
   8ad3a:	2900      	cmp	r1, #0
   8ad3c:	4615      	mov	r5, r2
   8ad3e:	461e      	mov	r6, r3
   8ad40:	db14      	blt.n	8ad6c <__swhatbuf_r+0x3c>
   8ad42:	aa01      	add	r2, sp, #4
   8ad44:	f001 fb12 	bl	8c36c <_fstat_r>
   8ad48:	2800      	cmp	r0, #0
   8ad4a:	db0f      	blt.n	8ad6c <__swhatbuf_r+0x3c>
   8ad4c:	9a02      	ldr	r2, [sp, #8]
   8ad4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8ad52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8ad56:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8ad5a:	fab2 f282 	clz	r2, r2
   8ad5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8ad62:	0952      	lsrs	r2, r2, #5
   8ad64:	6032      	str	r2, [r6, #0]
   8ad66:	602b      	str	r3, [r5, #0]
   8ad68:	b010      	add	sp, #64	; 0x40
   8ad6a:	bd70      	pop	{r4, r5, r6, pc}
   8ad6c:	2300      	movs	r3, #0
   8ad6e:	89a2      	ldrh	r2, [r4, #12]
   8ad70:	6033      	str	r3, [r6, #0]
   8ad72:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8ad76:	d004      	beq.n	8ad82 <__swhatbuf_r+0x52>
   8ad78:	2240      	movs	r2, #64	; 0x40
   8ad7a:	4618      	mov	r0, r3
   8ad7c:	602a      	str	r2, [r5, #0]
   8ad7e:	b010      	add	sp, #64	; 0x40
   8ad80:	bd70      	pop	{r4, r5, r6, pc}
   8ad82:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8ad86:	602b      	str	r3, [r5, #0]
   8ad88:	b010      	add	sp, #64	; 0x40
   8ad8a:	bd70      	pop	{r4, r5, r6, pc}

0008ad8c <__smakebuf_r>:
   8ad8c:	898a      	ldrh	r2, [r1, #12]
   8ad8e:	460b      	mov	r3, r1
   8ad90:	0792      	lsls	r2, r2, #30
   8ad92:	d506      	bpl.n	8ada2 <__smakebuf_r+0x16>
   8ad94:	2101      	movs	r1, #1
   8ad96:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8ad9a:	6159      	str	r1, [r3, #20]
   8ad9c:	601a      	str	r2, [r3, #0]
   8ad9e:	611a      	str	r2, [r3, #16]
   8ada0:	4770      	bx	lr
   8ada2:	b5f0      	push	{r4, r5, r6, r7, lr}
   8ada4:	b083      	sub	sp, #12
   8ada6:	ab01      	add	r3, sp, #4
   8ada8:	466a      	mov	r2, sp
   8adaa:	460c      	mov	r4, r1
   8adac:	4606      	mov	r6, r0
   8adae:	f7ff ffbf 	bl	8ad30 <__swhatbuf_r>
   8adb2:	9900      	ldr	r1, [sp, #0]
   8adb4:	4605      	mov	r5, r0
   8adb6:	4630      	mov	r0, r6
   8adb8:	f000 f83a 	bl	8ae30 <_malloc_r>
   8adbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8adc0:	b1d8      	cbz	r0, 8adfa <__smakebuf_r+0x6e>
   8adc2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8adc6:	4f15      	ldr	r7, [pc, #84]	; (8ae1c <__smakebuf_r+0x90>)
   8adc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8adcc:	63f7      	str	r7, [r6, #60]	; 0x3c
   8adce:	81a3      	strh	r3, [r4, #12]
   8add0:	6020      	str	r0, [r4, #0]
   8add2:	6120      	str	r0, [r4, #16]
   8add4:	6161      	str	r1, [r4, #20]
   8add6:	b91a      	cbnz	r2, 8ade0 <__smakebuf_r+0x54>
   8add8:	432b      	orrs	r3, r5
   8adda:	81a3      	strh	r3, [r4, #12]
   8addc:	b003      	add	sp, #12
   8adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8ade0:	4630      	mov	r0, r6
   8ade2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ade6:	f001 fad5 	bl	8c394 <_isatty_r>
   8adea:	b1a0      	cbz	r0, 8ae16 <__smakebuf_r+0x8a>
   8adec:	89a3      	ldrh	r3, [r4, #12]
   8adee:	f023 0303 	bic.w	r3, r3, #3
   8adf2:	f043 0301 	orr.w	r3, r3, #1
   8adf6:	b21b      	sxth	r3, r3
   8adf8:	e7ee      	b.n	8add8 <__smakebuf_r+0x4c>
   8adfa:	059a      	lsls	r2, r3, #22
   8adfc:	d4ee      	bmi.n	8addc <__smakebuf_r+0x50>
   8adfe:	2101      	movs	r1, #1
   8ae00:	f023 0303 	bic.w	r3, r3, #3
   8ae04:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ae08:	f043 0302 	orr.w	r3, r3, #2
   8ae0c:	81a3      	strh	r3, [r4, #12]
   8ae0e:	6161      	str	r1, [r4, #20]
   8ae10:	6022      	str	r2, [r4, #0]
   8ae12:	6122      	str	r2, [r4, #16]
   8ae14:	e7e2      	b.n	8addc <__smakebuf_r+0x50>
   8ae16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae1a:	e7dd      	b.n	8add8 <__smakebuf_r+0x4c>
   8ae1c:	0008a531 	.word	0x0008a531

0008ae20 <malloc>:
   8ae20:	4b02      	ldr	r3, [pc, #8]	; (8ae2c <malloc+0xc>)
   8ae22:	4601      	mov	r1, r0
   8ae24:	6818      	ldr	r0, [r3, #0]
   8ae26:	f000 b803 	b.w	8ae30 <_malloc_r>
   8ae2a:	bf00      	nop
   8ae2c:	20000aac 	.word	0x20000aac

0008ae30 <_malloc_r>:
   8ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ae34:	f101 060b 	add.w	r6, r1, #11
   8ae38:	2e16      	cmp	r6, #22
   8ae3a:	b083      	sub	sp, #12
   8ae3c:	4605      	mov	r5, r0
   8ae3e:	f240 809e 	bls.w	8af7e <_malloc_r+0x14e>
   8ae42:	f036 0607 	bics.w	r6, r6, #7
   8ae46:	f100 80bd 	bmi.w	8afc4 <_malloc_r+0x194>
   8ae4a:	42b1      	cmp	r1, r6
   8ae4c:	f200 80ba 	bhi.w	8afc4 <_malloc_r+0x194>
   8ae50:	f000 fb50 	bl	8b4f4 <__malloc_lock>
   8ae54:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8ae58:	f0c0 8285 	bcc.w	8b366 <_malloc_r+0x536>
   8ae5c:	0a73      	lsrs	r3, r6, #9
   8ae5e:	f000 80b8 	beq.w	8afd2 <_malloc_r+0x1a2>
   8ae62:	2b04      	cmp	r3, #4
   8ae64:	f200 816c 	bhi.w	8b140 <_malloc_r+0x310>
   8ae68:	09b3      	lsrs	r3, r6, #6
   8ae6a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8ae6e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8ae72:	00c1      	lsls	r1, r0, #3
   8ae74:	4fb8      	ldr	r7, [pc, #736]	; (8b158 <_malloc_r+0x328>)
   8ae76:	4439      	add	r1, r7
   8ae78:	684c      	ldr	r4, [r1, #4]
   8ae7a:	3908      	subs	r1, #8
   8ae7c:	42a1      	cmp	r1, r4
   8ae7e:	d106      	bne.n	8ae8e <_malloc_r+0x5e>
   8ae80:	e00c      	b.n	8ae9c <_malloc_r+0x6c>
   8ae82:	2a00      	cmp	r2, #0
   8ae84:	f280 80ab 	bge.w	8afde <_malloc_r+0x1ae>
   8ae88:	68e4      	ldr	r4, [r4, #12]
   8ae8a:	42a1      	cmp	r1, r4
   8ae8c:	d006      	beq.n	8ae9c <_malloc_r+0x6c>
   8ae8e:	6863      	ldr	r3, [r4, #4]
   8ae90:	f023 0303 	bic.w	r3, r3, #3
   8ae94:	1b9a      	subs	r2, r3, r6
   8ae96:	2a0f      	cmp	r2, #15
   8ae98:	ddf3      	ble.n	8ae82 <_malloc_r+0x52>
   8ae9a:	4670      	mov	r0, lr
   8ae9c:	693c      	ldr	r4, [r7, #16]
   8ae9e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8b16c <_malloc_r+0x33c>
   8aea2:	4574      	cmp	r4, lr
   8aea4:	f000 819e 	beq.w	8b1e4 <_malloc_r+0x3b4>
   8aea8:	6863      	ldr	r3, [r4, #4]
   8aeaa:	f023 0303 	bic.w	r3, r3, #3
   8aeae:	1b9a      	subs	r2, r3, r6
   8aeb0:	2a0f      	cmp	r2, #15
   8aeb2:	f300 8183 	bgt.w	8b1bc <_malloc_r+0x38c>
   8aeb6:	2a00      	cmp	r2, #0
   8aeb8:	f8c7 e014 	str.w	lr, [r7, #20]
   8aebc:	f8c7 e010 	str.w	lr, [r7, #16]
   8aec0:	f280 8091 	bge.w	8afe6 <_malloc_r+0x1b6>
   8aec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8aec8:	f080 8154 	bcs.w	8b174 <_malloc_r+0x344>
   8aecc:	2201      	movs	r2, #1
   8aece:	08db      	lsrs	r3, r3, #3
   8aed0:	6879      	ldr	r1, [r7, #4]
   8aed2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8aed6:	4413      	add	r3, r2
   8aed8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8aedc:	fa02 f20c 	lsl.w	r2, r2, ip
   8aee0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8aee4:	430a      	orrs	r2, r1
   8aee6:	f1ac 0108 	sub.w	r1, ip, #8
   8aeea:	60e1      	str	r1, [r4, #12]
   8aeec:	f8c4 8008 	str.w	r8, [r4, #8]
   8aef0:	607a      	str	r2, [r7, #4]
   8aef2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8aef6:	f8c8 400c 	str.w	r4, [r8, #12]
   8aefa:	2401      	movs	r4, #1
   8aefc:	1083      	asrs	r3, r0, #2
   8aefe:	409c      	lsls	r4, r3
   8af00:	4294      	cmp	r4, r2
   8af02:	d87d      	bhi.n	8b000 <_malloc_r+0x1d0>
   8af04:	4214      	tst	r4, r2
   8af06:	d106      	bne.n	8af16 <_malloc_r+0xe6>
   8af08:	f020 0003 	bic.w	r0, r0, #3
   8af0c:	0064      	lsls	r4, r4, #1
   8af0e:	4214      	tst	r4, r2
   8af10:	f100 0004 	add.w	r0, r0, #4
   8af14:	d0fa      	beq.n	8af0c <_malloc_r+0xdc>
   8af16:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8af1a:	46cc      	mov	ip, r9
   8af1c:	4680      	mov	r8, r0
   8af1e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8af22:	459c      	cmp	ip, r3
   8af24:	d107      	bne.n	8af36 <_malloc_r+0x106>
   8af26:	e15f      	b.n	8b1e8 <_malloc_r+0x3b8>
   8af28:	2a00      	cmp	r2, #0
   8af2a:	f280 816d 	bge.w	8b208 <_malloc_r+0x3d8>
   8af2e:	68db      	ldr	r3, [r3, #12]
   8af30:	459c      	cmp	ip, r3
   8af32:	f000 8159 	beq.w	8b1e8 <_malloc_r+0x3b8>
   8af36:	6859      	ldr	r1, [r3, #4]
   8af38:	f021 0103 	bic.w	r1, r1, #3
   8af3c:	1b8a      	subs	r2, r1, r6
   8af3e:	2a0f      	cmp	r2, #15
   8af40:	ddf2      	ble.n	8af28 <_malloc_r+0xf8>
   8af42:	68dc      	ldr	r4, [r3, #12]
   8af44:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8af48:	f046 0801 	orr.w	r8, r6, #1
   8af4c:	4628      	mov	r0, r5
   8af4e:	441e      	add	r6, r3
   8af50:	f042 0501 	orr.w	r5, r2, #1
   8af54:	f8c3 8004 	str.w	r8, [r3, #4]
   8af58:	f8cc 400c 	str.w	r4, [ip, #12]
   8af5c:	f8c4 c008 	str.w	ip, [r4, #8]
   8af60:	617e      	str	r6, [r7, #20]
   8af62:	613e      	str	r6, [r7, #16]
   8af64:	f8c6 e00c 	str.w	lr, [r6, #12]
   8af68:	f8c6 e008 	str.w	lr, [r6, #8]
   8af6c:	6075      	str	r5, [r6, #4]
   8af6e:	505a      	str	r2, [r3, r1]
   8af70:	9300      	str	r3, [sp, #0]
   8af72:	f000 fac5 	bl	8b500 <__malloc_unlock>
   8af76:	9b00      	ldr	r3, [sp, #0]
   8af78:	f103 0408 	add.w	r4, r3, #8
   8af7c:	e01e      	b.n	8afbc <_malloc_r+0x18c>
   8af7e:	2910      	cmp	r1, #16
   8af80:	d820      	bhi.n	8afc4 <_malloc_r+0x194>
   8af82:	f000 fab7 	bl	8b4f4 <__malloc_lock>
   8af86:	2610      	movs	r6, #16
   8af88:	2318      	movs	r3, #24
   8af8a:	2002      	movs	r0, #2
   8af8c:	4f72      	ldr	r7, [pc, #456]	; (8b158 <_malloc_r+0x328>)
   8af8e:	443b      	add	r3, r7
   8af90:	685c      	ldr	r4, [r3, #4]
   8af92:	f1a3 0208 	sub.w	r2, r3, #8
   8af96:	4294      	cmp	r4, r2
   8af98:	f000 812f 	beq.w	8b1fa <_malloc_r+0x3ca>
   8af9c:	6863      	ldr	r3, [r4, #4]
   8af9e:	68e1      	ldr	r1, [r4, #12]
   8afa0:	f023 0303 	bic.w	r3, r3, #3
   8afa4:	4423      	add	r3, r4
   8afa6:	685a      	ldr	r2, [r3, #4]
   8afa8:	68a6      	ldr	r6, [r4, #8]
   8afaa:	f042 0201 	orr.w	r2, r2, #1
   8afae:	60f1      	str	r1, [r6, #12]
   8afb0:	4628      	mov	r0, r5
   8afb2:	608e      	str	r6, [r1, #8]
   8afb4:	605a      	str	r2, [r3, #4]
   8afb6:	f000 faa3 	bl	8b500 <__malloc_unlock>
   8afba:	3408      	adds	r4, #8
   8afbc:	4620      	mov	r0, r4
   8afbe:	b003      	add	sp, #12
   8afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8afc4:	2400      	movs	r4, #0
   8afc6:	230c      	movs	r3, #12
   8afc8:	4620      	mov	r0, r4
   8afca:	602b      	str	r3, [r5, #0]
   8afcc:	b003      	add	sp, #12
   8afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8afd2:	2040      	movs	r0, #64	; 0x40
   8afd4:	f44f 7100 	mov.w	r1, #512	; 0x200
   8afd8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8afdc:	e74a      	b.n	8ae74 <_malloc_r+0x44>
   8afde:	4423      	add	r3, r4
   8afe0:	685a      	ldr	r2, [r3, #4]
   8afe2:	68e1      	ldr	r1, [r4, #12]
   8afe4:	e7e0      	b.n	8afa8 <_malloc_r+0x178>
   8afe6:	4423      	add	r3, r4
   8afe8:	685a      	ldr	r2, [r3, #4]
   8afea:	4628      	mov	r0, r5
   8afec:	f042 0201 	orr.w	r2, r2, #1
   8aff0:	605a      	str	r2, [r3, #4]
   8aff2:	3408      	adds	r4, #8
   8aff4:	f000 fa84 	bl	8b500 <__malloc_unlock>
   8aff8:	4620      	mov	r0, r4
   8affa:	b003      	add	sp, #12
   8affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b000:	68bc      	ldr	r4, [r7, #8]
   8b002:	6863      	ldr	r3, [r4, #4]
   8b004:	f023 0803 	bic.w	r8, r3, #3
   8b008:	45b0      	cmp	r8, r6
   8b00a:	d304      	bcc.n	8b016 <_malloc_r+0x1e6>
   8b00c:	eba8 0306 	sub.w	r3, r8, r6
   8b010:	2b0f      	cmp	r3, #15
   8b012:	f300 8085 	bgt.w	8b120 <_malloc_r+0x2f0>
   8b016:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8b170 <_malloc_r+0x340>
   8b01a:	4b50      	ldr	r3, [pc, #320]	; (8b15c <_malloc_r+0x32c>)
   8b01c:	f8d9 2000 	ldr.w	r2, [r9]
   8b020:	681b      	ldr	r3, [r3, #0]
   8b022:	3201      	adds	r2, #1
   8b024:	4433      	add	r3, r6
   8b026:	eb04 0a08 	add.w	sl, r4, r8
   8b02a:	f000 8154 	beq.w	8b2d6 <_malloc_r+0x4a6>
   8b02e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b032:	330f      	adds	r3, #15
   8b034:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b038:	f02b 0b0f 	bic.w	fp, fp, #15
   8b03c:	4659      	mov	r1, fp
   8b03e:	4628      	mov	r0, r5
   8b040:	f000 ff16 	bl	8be70 <_sbrk_r>
   8b044:	1c41      	adds	r1, r0, #1
   8b046:	4602      	mov	r2, r0
   8b048:	f000 80fb 	beq.w	8b242 <_malloc_r+0x412>
   8b04c:	4582      	cmp	sl, r0
   8b04e:	f200 80f6 	bhi.w	8b23e <_malloc_r+0x40e>
   8b052:	4b43      	ldr	r3, [pc, #268]	; (8b160 <_malloc_r+0x330>)
   8b054:	6819      	ldr	r1, [r3, #0]
   8b056:	4459      	add	r1, fp
   8b058:	6019      	str	r1, [r3, #0]
   8b05a:	f000 814c 	beq.w	8b2f6 <_malloc_r+0x4c6>
   8b05e:	f8d9 0000 	ldr.w	r0, [r9]
   8b062:	3001      	adds	r0, #1
   8b064:	bf1b      	ittet	ne
   8b066:	eba2 0a0a 	subne.w	sl, r2, sl
   8b06a:	4451      	addne	r1, sl
   8b06c:	f8c9 2000 	streq.w	r2, [r9]
   8b070:	6019      	strne	r1, [r3, #0]
   8b072:	f012 0107 	ands.w	r1, r2, #7
   8b076:	f000 8114 	beq.w	8b2a2 <_malloc_r+0x472>
   8b07a:	f1c1 0008 	rsb	r0, r1, #8
   8b07e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8b082:	4402      	add	r2, r0
   8b084:	3108      	adds	r1, #8
   8b086:	eb02 090b 	add.w	r9, r2, fp
   8b08a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8b08e:	eba1 0909 	sub.w	r9, r1, r9
   8b092:	4649      	mov	r1, r9
   8b094:	4628      	mov	r0, r5
   8b096:	9301      	str	r3, [sp, #4]
   8b098:	9200      	str	r2, [sp, #0]
   8b09a:	f000 fee9 	bl	8be70 <_sbrk_r>
   8b09e:	1c43      	adds	r3, r0, #1
   8b0a0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8b0a4:	f000 8142 	beq.w	8b32c <_malloc_r+0x4fc>
   8b0a8:	1a80      	subs	r0, r0, r2
   8b0aa:	4448      	add	r0, r9
   8b0ac:	f040 0001 	orr.w	r0, r0, #1
   8b0b0:	6819      	ldr	r1, [r3, #0]
   8b0b2:	42bc      	cmp	r4, r7
   8b0b4:	4449      	add	r1, r9
   8b0b6:	60ba      	str	r2, [r7, #8]
   8b0b8:	6019      	str	r1, [r3, #0]
   8b0ba:	6050      	str	r0, [r2, #4]
   8b0bc:	d017      	beq.n	8b0ee <_malloc_r+0x2be>
   8b0be:	f1b8 0f0f 	cmp.w	r8, #15
   8b0c2:	f240 80fa 	bls.w	8b2ba <_malloc_r+0x48a>
   8b0c6:	f04f 0c05 	mov.w	ip, #5
   8b0ca:	6862      	ldr	r2, [r4, #4]
   8b0cc:	f1a8 000c 	sub.w	r0, r8, #12
   8b0d0:	f020 0007 	bic.w	r0, r0, #7
   8b0d4:	f002 0201 	and.w	r2, r2, #1
   8b0d8:	eb04 0e00 	add.w	lr, r4, r0
   8b0dc:	4302      	orrs	r2, r0
   8b0de:	280f      	cmp	r0, #15
   8b0e0:	6062      	str	r2, [r4, #4]
   8b0e2:	f8ce c004 	str.w	ip, [lr, #4]
   8b0e6:	f8ce c008 	str.w	ip, [lr, #8]
   8b0ea:	f200 8116 	bhi.w	8b31a <_malloc_r+0x4ea>
   8b0ee:	4b1d      	ldr	r3, [pc, #116]	; (8b164 <_malloc_r+0x334>)
   8b0f0:	68bc      	ldr	r4, [r7, #8]
   8b0f2:	681a      	ldr	r2, [r3, #0]
   8b0f4:	4291      	cmp	r1, r2
   8b0f6:	bf88      	it	hi
   8b0f8:	6019      	strhi	r1, [r3, #0]
   8b0fa:	4b1b      	ldr	r3, [pc, #108]	; (8b168 <_malloc_r+0x338>)
   8b0fc:	681a      	ldr	r2, [r3, #0]
   8b0fe:	4291      	cmp	r1, r2
   8b100:	6862      	ldr	r2, [r4, #4]
   8b102:	bf88      	it	hi
   8b104:	6019      	strhi	r1, [r3, #0]
   8b106:	f022 0203 	bic.w	r2, r2, #3
   8b10a:	4296      	cmp	r6, r2
   8b10c:	eba2 0306 	sub.w	r3, r2, r6
   8b110:	d801      	bhi.n	8b116 <_malloc_r+0x2e6>
   8b112:	2b0f      	cmp	r3, #15
   8b114:	dc04      	bgt.n	8b120 <_malloc_r+0x2f0>
   8b116:	4628      	mov	r0, r5
   8b118:	f000 f9f2 	bl	8b500 <__malloc_unlock>
   8b11c:	2400      	movs	r4, #0
   8b11e:	e74d      	b.n	8afbc <_malloc_r+0x18c>
   8b120:	f046 0201 	orr.w	r2, r6, #1
   8b124:	f043 0301 	orr.w	r3, r3, #1
   8b128:	4426      	add	r6, r4
   8b12a:	6062      	str	r2, [r4, #4]
   8b12c:	4628      	mov	r0, r5
   8b12e:	60be      	str	r6, [r7, #8]
   8b130:	3408      	adds	r4, #8
   8b132:	6073      	str	r3, [r6, #4]
   8b134:	f000 f9e4 	bl	8b500 <__malloc_unlock>
   8b138:	4620      	mov	r0, r4
   8b13a:	b003      	add	sp, #12
   8b13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b140:	2b14      	cmp	r3, #20
   8b142:	d970      	bls.n	8b226 <_malloc_r+0x3f6>
   8b144:	2b54      	cmp	r3, #84	; 0x54
   8b146:	f200 80a2 	bhi.w	8b28e <_malloc_r+0x45e>
   8b14a:	0b33      	lsrs	r3, r6, #12
   8b14c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b150:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8b154:	00c1      	lsls	r1, r0, #3
   8b156:	e68d      	b.n	8ae74 <_malloc_r+0x44>
   8b158:	20001048 	.word	0x20001048
   8b15c:	200022e4 	.word	0x200022e4
   8b160:	200022b4 	.word	0x200022b4
   8b164:	200022dc 	.word	0x200022dc
   8b168:	200022e0 	.word	0x200022e0
   8b16c:	20001050 	.word	0x20001050
   8b170:	20001450 	.word	0x20001450
   8b174:	0a5a      	lsrs	r2, r3, #9
   8b176:	2a04      	cmp	r2, #4
   8b178:	d95b      	bls.n	8b232 <_malloc_r+0x402>
   8b17a:	2a14      	cmp	r2, #20
   8b17c:	f200 80ae 	bhi.w	8b2dc <_malloc_r+0x4ac>
   8b180:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8b184:	00c9      	lsls	r1, r1, #3
   8b186:	325b      	adds	r2, #91	; 0x5b
   8b188:	eb07 0c01 	add.w	ip, r7, r1
   8b18c:	5879      	ldr	r1, [r7, r1]
   8b18e:	f1ac 0c08 	sub.w	ip, ip, #8
   8b192:	458c      	cmp	ip, r1
   8b194:	f000 8088 	beq.w	8b2a8 <_malloc_r+0x478>
   8b198:	684a      	ldr	r2, [r1, #4]
   8b19a:	f022 0203 	bic.w	r2, r2, #3
   8b19e:	4293      	cmp	r3, r2
   8b1a0:	d273      	bcs.n	8b28a <_malloc_r+0x45a>
   8b1a2:	6889      	ldr	r1, [r1, #8]
   8b1a4:	458c      	cmp	ip, r1
   8b1a6:	d1f7      	bne.n	8b198 <_malloc_r+0x368>
   8b1a8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8b1ac:	687a      	ldr	r2, [r7, #4]
   8b1ae:	60e3      	str	r3, [r4, #12]
   8b1b0:	f8c4 c008 	str.w	ip, [r4, #8]
   8b1b4:	609c      	str	r4, [r3, #8]
   8b1b6:	f8cc 400c 	str.w	r4, [ip, #12]
   8b1ba:	e69e      	b.n	8aefa <_malloc_r+0xca>
   8b1bc:	f046 0c01 	orr.w	ip, r6, #1
   8b1c0:	f042 0101 	orr.w	r1, r2, #1
   8b1c4:	4426      	add	r6, r4
   8b1c6:	f8c4 c004 	str.w	ip, [r4, #4]
   8b1ca:	4628      	mov	r0, r5
   8b1cc:	617e      	str	r6, [r7, #20]
   8b1ce:	613e      	str	r6, [r7, #16]
   8b1d0:	f8c6 e00c 	str.w	lr, [r6, #12]
   8b1d4:	f8c6 e008 	str.w	lr, [r6, #8]
   8b1d8:	6071      	str	r1, [r6, #4]
   8b1da:	50e2      	str	r2, [r4, r3]
   8b1dc:	f000 f990 	bl	8b500 <__malloc_unlock>
   8b1e0:	3408      	adds	r4, #8
   8b1e2:	e6eb      	b.n	8afbc <_malloc_r+0x18c>
   8b1e4:	687a      	ldr	r2, [r7, #4]
   8b1e6:	e688      	b.n	8aefa <_malloc_r+0xca>
   8b1e8:	f108 0801 	add.w	r8, r8, #1
   8b1ec:	f018 0f03 	tst.w	r8, #3
   8b1f0:	f10c 0c08 	add.w	ip, ip, #8
   8b1f4:	f47f ae93 	bne.w	8af1e <_malloc_r+0xee>
   8b1f8:	e02d      	b.n	8b256 <_malloc_r+0x426>
   8b1fa:	68dc      	ldr	r4, [r3, #12]
   8b1fc:	42a3      	cmp	r3, r4
   8b1fe:	bf08      	it	eq
   8b200:	3002      	addeq	r0, #2
   8b202:	f43f ae4b 	beq.w	8ae9c <_malloc_r+0x6c>
   8b206:	e6c9      	b.n	8af9c <_malloc_r+0x16c>
   8b208:	461c      	mov	r4, r3
   8b20a:	4419      	add	r1, r3
   8b20c:	684a      	ldr	r2, [r1, #4]
   8b20e:	68db      	ldr	r3, [r3, #12]
   8b210:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8b214:	f042 0201 	orr.w	r2, r2, #1
   8b218:	604a      	str	r2, [r1, #4]
   8b21a:	4628      	mov	r0, r5
   8b21c:	60f3      	str	r3, [r6, #12]
   8b21e:	609e      	str	r6, [r3, #8]
   8b220:	f000 f96e 	bl	8b500 <__malloc_unlock>
   8b224:	e6ca      	b.n	8afbc <_malloc_r+0x18c>
   8b226:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b22a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8b22e:	00c1      	lsls	r1, r0, #3
   8b230:	e620      	b.n	8ae74 <_malloc_r+0x44>
   8b232:	099a      	lsrs	r2, r3, #6
   8b234:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8b238:	00c9      	lsls	r1, r1, #3
   8b23a:	3238      	adds	r2, #56	; 0x38
   8b23c:	e7a4      	b.n	8b188 <_malloc_r+0x358>
   8b23e:	42bc      	cmp	r4, r7
   8b240:	d054      	beq.n	8b2ec <_malloc_r+0x4bc>
   8b242:	68bc      	ldr	r4, [r7, #8]
   8b244:	6862      	ldr	r2, [r4, #4]
   8b246:	f022 0203 	bic.w	r2, r2, #3
   8b24a:	e75e      	b.n	8b10a <_malloc_r+0x2da>
   8b24c:	f859 3908 	ldr.w	r3, [r9], #-8
   8b250:	4599      	cmp	r9, r3
   8b252:	f040 8086 	bne.w	8b362 <_malloc_r+0x532>
   8b256:	f010 0f03 	tst.w	r0, #3
   8b25a:	f100 30ff 	add.w	r0, r0, #4294967295
   8b25e:	d1f5      	bne.n	8b24c <_malloc_r+0x41c>
   8b260:	687b      	ldr	r3, [r7, #4]
   8b262:	ea23 0304 	bic.w	r3, r3, r4
   8b266:	607b      	str	r3, [r7, #4]
   8b268:	0064      	lsls	r4, r4, #1
   8b26a:	429c      	cmp	r4, r3
   8b26c:	f63f aec8 	bhi.w	8b000 <_malloc_r+0x1d0>
   8b270:	2c00      	cmp	r4, #0
   8b272:	f43f aec5 	beq.w	8b000 <_malloc_r+0x1d0>
   8b276:	421c      	tst	r4, r3
   8b278:	4640      	mov	r0, r8
   8b27a:	f47f ae4c 	bne.w	8af16 <_malloc_r+0xe6>
   8b27e:	0064      	lsls	r4, r4, #1
   8b280:	421c      	tst	r4, r3
   8b282:	f100 0004 	add.w	r0, r0, #4
   8b286:	d0fa      	beq.n	8b27e <_malloc_r+0x44e>
   8b288:	e645      	b.n	8af16 <_malloc_r+0xe6>
   8b28a:	468c      	mov	ip, r1
   8b28c:	e78c      	b.n	8b1a8 <_malloc_r+0x378>
   8b28e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b292:	d815      	bhi.n	8b2c0 <_malloc_r+0x490>
   8b294:	0bf3      	lsrs	r3, r6, #15
   8b296:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b29a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8b29e:	00c1      	lsls	r1, r0, #3
   8b2a0:	e5e8      	b.n	8ae74 <_malloc_r+0x44>
   8b2a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8b2a6:	e6ee      	b.n	8b086 <_malloc_r+0x256>
   8b2a8:	2101      	movs	r1, #1
   8b2aa:	687b      	ldr	r3, [r7, #4]
   8b2ac:	1092      	asrs	r2, r2, #2
   8b2ae:	fa01 f202 	lsl.w	r2, r1, r2
   8b2b2:	431a      	orrs	r2, r3
   8b2b4:	607a      	str	r2, [r7, #4]
   8b2b6:	4663      	mov	r3, ip
   8b2b8:	e779      	b.n	8b1ae <_malloc_r+0x37e>
   8b2ba:	2301      	movs	r3, #1
   8b2bc:	6053      	str	r3, [r2, #4]
   8b2be:	e72a      	b.n	8b116 <_malloc_r+0x2e6>
   8b2c0:	f240 5254 	movw	r2, #1364	; 0x554
   8b2c4:	4293      	cmp	r3, r2
   8b2c6:	d822      	bhi.n	8b30e <_malloc_r+0x4de>
   8b2c8:	0cb3      	lsrs	r3, r6, #18
   8b2ca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b2ce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8b2d2:	00c1      	lsls	r1, r0, #3
   8b2d4:	e5ce      	b.n	8ae74 <_malloc_r+0x44>
   8b2d6:	f103 0b10 	add.w	fp, r3, #16
   8b2da:	e6af      	b.n	8b03c <_malloc_r+0x20c>
   8b2dc:	2a54      	cmp	r2, #84	; 0x54
   8b2de:	d829      	bhi.n	8b334 <_malloc_r+0x504>
   8b2e0:	0b1a      	lsrs	r2, r3, #12
   8b2e2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8b2e6:	00c9      	lsls	r1, r1, #3
   8b2e8:	326e      	adds	r2, #110	; 0x6e
   8b2ea:	e74d      	b.n	8b188 <_malloc_r+0x358>
   8b2ec:	4b20      	ldr	r3, [pc, #128]	; (8b370 <_malloc_r+0x540>)
   8b2ee:	6819      	ldr	r1, [r3, #0]
   8b2f0:	4459      	add	r1, fp
   8b2f2:	6019      	str	r1, [r3, #0]
   8b2f4:	e6b3      	b.n	8b05e <_malloc_r+0x22e>
   8b2f6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8b2fa:	2800      	cmp	r0, #0
   8b2fc:	f47f aeaf 	bne.w	8b05e <_malloc_r+0x22e>
   8b300:	eb08 030b 	add.w	r3, r8, fp
   8b304:	68ba      	ldr	r2, [r7, #8]
   8b306:	f043 0301 	orr.w	r3, r3, #1
   8b30a:	6053      	str	r3, [r2, #4]
   8b30c:	e6ef      	b.n	8b0ee <_malloc_r+0x2be>
   8b30e:	207f      	movs	r0, #127	; 0x7f
   8b310:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b314:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8b318:	e5ac      	b.n	8ae74 <_malloc_r+0x44>
   8b31a:	f104 0108 	add.w	r1, r4, #8
   8b31e:	4628      	mov	r0, r5
   8b320:	9300      	str	r3, [sp, #0]
   8b322:	f7ff fa59 	bl	8a7d8 <_free_r>
   8b326:	9b00      	ldr	r3, [sp, #0]
   8b328:	6819      	ldr	r1, [r3, #0]
   8b32a:	e6e0      	b.n	8b0ee <_malloc_r+0x2be>
   8b32c:	2001      	movs	r0, #1
   8b32e:	f04f 0900 	mov.w	r9, #0
   8b332:	e6bd      	b.n	8b0b0 <_malloc_r+0x280>
   8b334:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8b338:	d805      	bhi.n	8b346 <_malloc_r+0x516>
   8b33a:	0bda      	lsrs	r2, r3, #15
   8b33c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8b340:	00c9      	lsls	r1, r1, #3
   8b342:	3277      	adds	r2, #119	; 0x77
   8b344:	e720      	b.n	8b188 <_malloc_r+0x358>
   8b346:	f240 5154 	movw	r1, #1364	; 0x554
   8b34a:	428a      	cmp	r2, r1
   8b34c:	d805      	bhi.n	8b35a <_malloc_r+0x52a>
   8b34e:	0c9a      	lsrs	r2, r3, #18
   8b350:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8b354:	00c9      	lsls	r1, r1, #3
   8b356:	327c      	adds	r2, #124	; 0x7c
   8b358:	e716      	b.n	8b188 <_malloc_r+0x358>
   8b35a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b35e:	227e      	movs	r2, #126	; 0x7e
   8b360:	e712      	b.n	8b188 <_malloc_r+0x358>
   8b362:	687b      	ldr	r3, [r7, #4]
   8b364:	e780      	b.n	8b268 <_malloc_r+0x438>
   8b366:	08f0      	lsrs	r0, r6, #3
   8b368:	f106 0308 	add.w	r3, r6, #8
   8b36c:	e60e      	b.n	8af8c <_malloc_r+0x15c>
   8b36e:	bf00      	nop
   8b370:	200022b4 	.word	0x200022b4

0008b374 <__ascii_mbtowc>:
   8b374:	b082      	sub	sp, #8
   8b376:	b149      	cbz	r1, 8b38c <__ascii_mbtowc+0x18>
   8b378:	b15a      	cbz	r2, 8b392 <__ascii_mbtowc+0x1e>
   8b37a:	b16b      	cbz	r3, 8b398 <__ascii_mbtowc+0x24>
   8b37c:	7813      	ldrb	r3, [r2, #0]
   8b37e:	600b      	str	r3, [r1, #0]
   8b380:	7812      	ldrb	r2, [r2, #0]
   8b382:	1c10      	adds	r0, r2, #0
   8b384:	bf18      	it	ne
   8b386:	2001      	movne	r0, #1
   8b388:	b002      	add	sp, #8
   8b38a:	4770      	bx	lr
   8b38c:	a901      	add	r1, sp, #4
   8b38e:	2a00      	cmp	r2, #0
   8b390:	d1f3      	bne.n	8b37a <__ascii_mbtowc+0x6>
   8b392:	4610      	mov	r0, r2
   8b394:	b002      	add	sp, #8
   8b396:	4770      	bx	lr
   8b398:	f06f 0001 	mvn.w	r0, #1
   8b39c:	e7f4      	b.n	8b388 <__ascii_mbtowc+0x14>
   8b39e:	bf00      	nop

0008b3a0 <memchr>:
   8b3a0:	0783      	lsls	r3, r0, #30
   8b3a2:	b470      	push	{r4, r5, r6}
   8b3a4:	b2cd      	uxtb	r5, r1
   8b3a6:	d03d      	beq.n	8b424 <memchr+0x84>
   8b3a8:	1e54      	subs	r4, r2, #1
   8b3aa:	b30a      	cbz	r2, 8b3f0 <memchr+0x50>
   8b3ac:	7803      	ldrb	r3, [r0, #0]
   8b3ae:	42ab      	cmp	r3, r5
   8b3b0:	d01f      	beq.n	8b3f2 <memchr+0x52>
   8b3b2:	1c43      	adds	r3, r0, #1
   8b3b4:	e005      	b.n	8b3c2 <memchr+0x22>
   8b3b6:	f114 34ff 	adds.w	r4, r4, #4294967295
   8b3ba:	d319      	bcc.n	8b3f0 <memchr+0x50>
   8b3bc:	7802      	ldrb	r2, [r0, #0]
   8b3be:	42aa      	cmp	r2, r5
   8b3c0:	d017      	beq.n	8b3f2 <memchr+0x52>
   8b3c2:	f013 0f03 	tst.w	r3, #3
   8b3c6:	4618      	mov	r0, r3
   8b3c8:	f103 0301 	add.w	r3, r3, #1
   8b3cc:	d1f3      	bne.n	8b3b6 <memchr+0x16>
   8b3ce:	2c03      	cmp	r4, #3
   8b3d0:	d811      	bhi.n	8b3f6 <memchr+0x56>
   8b3d2:	b34c      	cbz	r4, 8b428 <memchr+0x88>
   8b3d4:	7803      	ldrb	r3, [r0, #0]
   8b3d6:	42ab      	cmp	r3, r5
   8b3d8:	d00b      	beq.n	8b3f2 <memchr+0x52>
   8b3da:	4404      	add	r4, r0
   8b3dc:	1c43      	adds	r3, r0, #1
   8b3de:	e002      	b.n	8b3e6 <memchr+0x46>
   8b3e0:	7802      	ldrb	r2, [r0, #0]
   8b3e2:	42aa      	cmp	r2, r5
   8b3e4:	d005      	beq.n	8b3f2 <memchr+0x52>
   8b3e6:	429c      	cmp	r4, r3
   8b3e8:	4618      	mov	r0, r3
   8b3ea:	f103 0301 	add.w	r3, r3, #1
   8b3ee:	d1f7      	bne.n	8b3e0 <memchr+0x40>
   8b3f0:	2000      	movs	r0, #0
   8b3f2:	bc70      	pop	{r4, r5, r6}
   8b3f4:	4770      	bx	lr
   8b3f6:	0209      	lsls	r1, r1, #8
   8b3f8:	b289      	uxth	r1, r1
   8b3fa:	4329      	orrs	r1, r5
   8b3fc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8b400:	6803      	ldr	r3, [r0, #0]
   8b402:	4606      	mov	r6, r0
   8b404:	404b      	eors	r3, r1
   8b406:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8b40a:	ea22 0303 	bic.w	r3, r2, r3
   8b40e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b412:	f100 0004 	add.w	r0, r0, #4
   8b416:	d103      	bne.n	8b420 <memchr+0x80>
   8b418:	3c04      	subs	r4, #4
   8b41a:	2c03      	cmp	r4, #3
   8b41c:	d8f0      	bhi.n	8b400 <memchr+0x60>
   8b41e:	e7d8      	b.n	8b3d2 <memchr+0x32>
   8b420:	4630      	mov	r0, r6
   8b422:	e7d7      	b.n	8b3d4 <memchr+0x34>
   8b424:	4614      	mov	r4, r2
   8b426:	e7d2      	b.n	8b3ce <memchr+0x2e>
   8b428:	4620      	mov	r0, r4
   8b42a:	e7e2      	b.n	8b3f2 <memchr+0x52>

0008b42c <memmove>:
   8b42c:	4288      	cmp	r0, r1
   8b42e:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b430:	d90d      	bls.n	8b44e <memmove+0x22>
   8b432:	188b      	adds	r3, r1, r2
   8b434:	4298      	cmp	r0, r3
   8b436:	d20a      	bcs.n	8b44e <memmove+0x22>
   8b438:	1884      	adds	r4, r0, r2
   8b43a:	2a00      	cmp	r2, #0
   8b43c:	d051      	beq.n	8b4e2 <memmove+0xb6>
   8b43e:	4622      	mov	r2, r4
   8b440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b444:	4299      	cmp	r1, r3
   8b446:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b44a:	d1f9      	bne.n	8b440 <memmove+0x14>
   8b44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b44e:	2a0f      	cmp	r2, #15
   8b450:	d948      	bls.n	8b4e4 <memmove+0xb8>
   8b452:	ea41 0300 	orr.w	r3, r1, r0
   8b456:	079b      	lsls	r3, r3, #30
   8b458:	d146      	bne.n	8b4e8 <memmove+0xbc>
   8b45a:	4615      	mov	r5, r2
   8b45c:	f100 0410 	add.w	r4, r0, #16
   8b460:	f101 0310 	add.w	r3, r1, #16
   8b464:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8b468:	3d10      	subs	r5, #16
   8b46a:	f844 6c10 	str.w	r6, [r4, #-16]
   8b46e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8b472:	2d0f      	cmp	r5, #15
   8b474:	f844 6c0c 	str.w	r6, [r4, #-12]
   8b478:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8b47c:	f104 0410 	add.w	r4, r4, #16
   8b480:	f844 6c18 	str.w	r6, [r4, #-24]
   8b484:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b488:	f103 0310 	add.w	r3, r3, #16
   8b48c:	f844 6c14 	str.w	r6, [r4, #-20]
   8b490:	d8e8      	bhi.n	8b464 <memmove+0x38>
   8b492:	f1a2 0310 	sub.w	r3, r2, #16
   8b496:	f023 030f 	bic.w	r3, r3, #15
   8b49a:	f002 0e0f 	and.w	lr, r2, #15
   8b49e:	3310      	adds	r3, #16
   8b4a0:	f1be 0f03 	cmp.w	lr, #3
   8b4a4:	4419      	add	r1, r3
   8b4a6:	4403      	add	r3, r0
   8b4a8:	d921      	bls.n	8b4ee <memmove+0xc2>
   8b4aa:	460e      	mov	r6, r1
   8b4ac:	4674      	mov	r4, lr
   8b4ae:	1f1d      	subs	r5, r3, #4
   8b4b0:	f856 7b04 	ldr.w	r7, [r6], #4
   8b4b4:	3c04      	subs	r4, #4
   8b4b6:	2c03      	cmp	r4, #3
   8b4b8:	f845 7f04 	str.w	r7, [r5, #4]!
   8b4bc:	d8f8      	bhi.n	8b4b0 <memmove+0x84>
   8b4be:	f1ae 0404 	sub.w	r4, lr, #4
   8b4c2:	f024 0403 	bic.w	r4, r4, #3
   8b4c6:	3404      	adds	r4, #4
   8b4c8:	4421      	add	r1, r4
   8b4ca:	4423      	add	r3, r4
   8b4cc:	f002 0203 	and.w	r2, r2, #3
   8b4d0:	b162      	cbz	r2, 8b4ec <memmove+0xc0>
   8b4d2:	3b01      	subs	r3, #1
   8b4d4:	440a      	add	r2, r1
   8b4d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   8b4da:	428a      	cmp	r2, r1
   8b4dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   8b4e0:	d1f9      	bne.n	8b4d6 <memmove+0xaa>
   8b4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b4e4:	4603      	mov	r3, r0
   8b4e6:	e7f3      	b.n	8b4d0 <memmove+0xa4>
   8b4e8:	4603      	mov	r3, r0
   8b4ea:	e7f2      	b.n	8b4d2 <memmove+0xa6>
   8b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b4ee:	4672      	mov	r2, lr
   8b4f0:	e7ee      	b.n	8b4d0 <memmove+0xa4>
   8b4f2:	bf00      	nop

0008b4f4 <__malloc_lock>:
   8b4f4:	4801      	ldr	r0, [pc, #4]	; (8b4fc <__malloc_lock+0x8>)
   8b4f6:	f7ff bc17 	b.w	8ad28 <__retarget_lock_acquire_recursive>
   8b4fa:	bf00      	nop
   8b4fc:	200027d4 	.word	0x200027d4

0008b500 <__malloc_unlock>:
   8b500:	4801      	ldr	r0, [pc, #4]	; (8b508 <__malloc_unlock+0x8>)
   8b502:	f7ff bc13 	b.w	8ad2c <__retarget_lock_release_recursive>
   8b506:	bf00      	nop
   8b508:	200027d4 	.word	0x200027d4

0008b50c <_Balloc>:
   8b50c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b50e:	b570      	push	{r4, r5, r6, lr}
   8b510:	4605      	mov	r5, r0
   8b512:	460c      	mov	r4, r1
   8b514:	b14b      	cbz	r3, 8b52a <_Balloc+0x1e>
   8b516:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b51a:	b180      	cbz	r0, 8b53e <_Balloc+0x32>
   8b51c:	6802      	ldr	r2, [r0, #0]
   8b51e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b522:	2300      	movs	r3, #0
   8b524:	6103      	str	r3, [r0, #16]
   8b526:	60c3      	str	r3, [r0, #12]
   8b528:	bd70      	pop	{r4, r5, r6, pc}
   8b52a:	2221      	movs	r2, #33	; 0x21
   8b52c:	2104      	movs	r1, #4
   8b52e:	f000 fe79 	bl	8c224 <_calloc_r>
   8b532:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b534:	4603      	mov	r3, r0
   8b536:	2800      	cmp	r0, #0
   8b538:	d1ed      	bne.n	8b516 <_Balloc+0xa>
   8b53a:	2000      	movs	r0, #0
   8b53c:	bd70      	pop	{r4, r5, r6, pc}
   8b53e:	2101      	movs	r1, #1
   8b540:	fa01 f604 	lsl.w	r6, r1, r4
   8b544:	1d72      	adds	r2, r6, #5
   8b546:	4628      	mov	r0, r5
   8b548:	0092      	lsls	r2, r2, #2
   8b54a:	f000 fe6b 	bl	8c224 <_calloc_r>
   8b54e:	2800      	cmp	r0, #0
   8b550:	d0f3      	beq.n	8b53a <_Balloc+0x2e>
   8b552:	6044      	str	r4, [r0, #4]
   8b554:	6086      	str	r6, [r0, #8]
   8b556:	e7e4      	b.n	8b522 <_Balloc+0x16>

0008b558 <_Bfree>:
   8b558:	b131      	cbz	r1, 8b568 <_Bfree+0x10>
   8b55a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b55c:	684a      	ldr	r2, [r1, #4]
   8b55e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b562:	6008      	str	r0, [r1, #0]
   8b564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b568:	4770      	bx	lr
   8b56a:	bf00      	nop

0008b56c <__multadd>:
   8b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b56e:	460c      	mov	r4, r1
   8b570:	4605      	mov	r5, r0
   8b572:	f04f 0e00 	mov.w	lr, #0
   8b576:	690e      	ldr	r6, [r1, #16]
   8b578:	b083      	sub	sp, #12
   8b57a:	f101 0714 	add.w	r7, r1, #20
   8b57e:	6838      	ldr	r0, [r7, #0]
   8b580:	f10e 0e01 	add.w	lr, lr, #1
   8b584:	b281      	uxth	r1, r0
   8b586:	fb02 3301 	mla	r3, r2, r1, r3
   8b58a:	0c01      	lsrs	r1, r0, #16
   8b58c:	0c18      	lsrs	r0, r3, #16
   8b58e:	fb02 0101 	mla	r1, r2, r1, r0
   8b592:	b29b      	uxth	r3, r3
   8b594:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8b598:	4576      	cmp	r6, lr
   8b59a:	f847 3b04 	str.w	r3, [r7], #4
   8b59e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   8b5a2:	dcec      	bgt.n	8b57e <__multadd+0x12>
   8b5a4:	b13b      	cbz	r3, 8b5b6 <__multadd+0x4a>
   8b5a6:	68a2      	ldr	r2, [r4, #8]
   8b5a8:	4296      	cmp	r6, r2
   8b5aa:	da07      	bge.n	8b5bc <__multadd+0x50>
   8b5ac:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   8b5b0:	3601      	adds	r6, #1
   8b5b2:	6153      	str	r3, [r2, #20]
   8b5b4:	6126      	str	r6, [r4, #16]
   8b5b6:	4620      	mov	r0, r4
   8b5b8:	b003      	add	sp, #12
   8b5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8b5bc:	6861      	ldr	r1, [r4, #4]
   8b5be:	4628      	mov	r0, r5
   8b5c0:	3101      	adds	r1, #1
   8b5c2:	9301      	str	r3, [sp, #4]
   8b5c4:	f7ff ffa2 	bl	8b50c <_Balloc>
   8b5c8:	4607      	mov	r7, r0
   8b5ca:	6922      	ldr	r2, [r4, #16]
   8b5cc:	f104 010c 	add.w	r1, r4, #12
   8b5d0:	3202      	adds	r2, #2
   8b5d2:	0092      	lsls	r2, r2, #2
   8b5d4:	300c      	adds	r0, #12
   8b5d6:	f7fb fb57 	bl	86c88 <memcpy>
   8b5da:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   8b5dc:	6861      	ldr	r1, [r4, #4]
   8b5de:	9b01      	ldr	r3, [sp, #4]
   8b5e0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   8b5e4:	6020      	str	r0, [r4, #0]
   8b5e6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8b5ea:	463c      	mov	r4, r7
   8b5ec:	e7de      	b.n	8b5ac <__multadd+0x40>
   8b5ee:	bf00      	nop

0008b5f0 <__hi0bits>:
   8b5f0:	0c02      	lsrs	r2, r0, #16
   8b5f2:	0412      	lsls	r2, r2, #16
   8b5f4:	4603      	mov	r3, r0
   8b5f6:	b9b2      	cbnz	r2, 8b626 <__hi0bits+0x36>
   8b5f8:	0403      	lsls	r3, r0, #16
   8b5fa:	2010      	movs	r0, #16
   8b5fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b600:	bf04      	itt	eq
   8b602:	021b      	lsleq	r3, r3, #8
   8b604:	3008      	addeq	r0, #8
   8b606:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b60a:	bf04      	itt	eq
   8b60c:	011b      	lsleq	r3, r3, #4
   8b60e:	3004      	addeq	r0, #4
   8b610:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b614:	bf04      	itt	eq
   8b616:	009b      	lsleq	r3, r3, #2
   8b618:	3002      	addeq	r0, #2
   8b61a:	2b00      	cmp	r3, #0
   8b61c:	db02      	blt.n	8b624 <__hi0bits+0x34>
   8b61e:	005b      	lsls	r3, r3, #1
   8b620:	d403      	bmi.n	8b62a <__hi0bits+0x3a>
   8b622:	2020      	movs	r0, #32
   8b624:	4770      	bx	lr
   8b626:	2000      	movs	r0, #0
   8b628:	e7e8      	b.n	8b5fc <__hi0bits+0xc>
   8b62a:	3001      	adds	r0, #1
   8b62c:	4770      	bx	lr
   8b62e:	bf00      	nop

0008b630 <__lo0bits>:
   8b630:	6803      	ldr	r3, [r0, #0]
   8b632:	4601      	mov	r1, r0
   8b634:	f013 0207 	ands.w	r2, r3, #7
   8b638:	d007      	beq.n	8b64a <__lo0bits+0x1a>
   8b63a:	07da      	lsls	r2, r3, #31
   8b63c:	d421      	bmi.n	8b682 <__lo0bits+0x52>
   8b63e:	0798      	lsls	r0, r3, #30
   8b640:	d421      	bmi.n	8b686 <__lo0bits+0x56>
   8b642:	089b      	lsrs	r3, r3, #2
   8b644:	600b      	str	r3, [r1, #0]
   8b646:	2002      	movs	r0, #2
   8b648:	4770      	bx	lr
   8b64a:	b298      	uxth	r0, r3
   8b64c:	b198      	cbz	r0, 8b676 <__lo0bits+0x46>
   8b64e:	4610      	mov	r0, r2
   8b650:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b654:	bf04      	itt	eq
   8b656:	0a1b      	lsreq	r3, r3, #8
   8b658:	3008      	addeq	r0, #8
   8b65a:	071a      	lsls	r2, r3, #28
   8b65c:	bf04      	itt	eq
   8b65e:	091b      	lsreq	r3, r3, #4
   8b660:	3004      	addeq	r0, #4
   8b662:	079a      	lsls	r2, r3, #30
   8b664:	bf04      	itt	eq
   8b666:	089b      	lsreq	r3, r3, #2
   8b668:	3002      	addeq	r0, #2
   8b66a:	07da      	lsls	r2, r3, #31
   8b66c:	d407      	bmi.n	8b67e <__lo0bits+0x4e>
   8b66e:	085b      	lsrs	r3, r3, #1
   8b670:	d104      	bne.n	8b67c <__lo0bits+0x4c>
   8b672:	2020      	movs	r0, #32
   8b674:	4770      	bx	lr
   8b676:	0c1b      	lsrs	r3, r3, #16
   8b678:	2010      	movs	r0, #16
   8b67a:	e7e9      	b.n	8b650 <__lo0bits+0x20>
   8b67c:	3001      	adds	r0, #1
   8b67e:	600b      	str	r3, [r1, #0]
   8b680:	4770      	bx	lr
   8b682:	2000      	movs	r0, #0
   8b684:	4770      	bx	lr
   8b686:	085b      	lsrs	r3, r3, #1
   8b688:	600b      	str	r3, [r1, #0]
   8b68a:	2001      	movs	r0, #1
   8b68c:	4770      	bx	lr
   8b68e:	bf00      	nop

0008b690 <__i2b>:
   8b690:	b510      	push	{r4, lr}
   8b692:	460c      	mov	r4, r1
   8b694:	2101      	movs	r1, #1
   8b696:	f7ff ff39 	bl	8b50c <_Balloc>
   8b69a:	2201      	movs	r2, #1
   8b69c:	6144      	str	r4, [r0, #20]
   8b69e:	6102      	str	r2, [r0, #16]
   8b6a0:	bd10      	pop	{r4, pc}
   8b6a2:	bf00      	nop

0008b6a4 <__multiply>:
   8b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b6a8:	690c      	ldr	r4, [r1, #16]
   8b6aa:	6915      	ldr	r5, [r2, #16]
   8b6ac:	b083      	sub	sp, #12
   8b6ae:	42ac      	cmp	r4, r5
   8b6b0:	468b      	mov	fp, r1
   8b6b2:	4616      	mov	r6, r2
   8b6b4:	da04      	bge.n	8b6c0 <__multiply+0x1c>
   8b6b6:	4622      	mov	r2, r4
   8b6b8:	46b3      	mov	fp, r6
   8b6ba:	462c      	mov	r4, r5
   8b6bc:	460e      	mov	r6, r1
   8b6be:	4615      	mov	r5, r2
   8b6c0:	f8db 3008 	ldr.w	r3, [fp, #8]
   8b6c4:	eb04 0805 	add.w	r8, r4, r5
   8b6c8:	f8db 1004 	ldr.w	r1, [fp, #4]
   8b6cc:	4598      	cmp	r8, r3
   8b6ce:	bfc8      	it	gt
   8b6d0:	3101      	addgt	r1, #1
   8b6d2:	f7ff ff1b 	bl	8b50c <_Balloc>
   8b6d6:	f100 0914 	add.w	r9, r0, #20
   8b6da:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b6de:	45d1      	cmp	r9, sl
   8b6e0:	9000      	str	r0, [sp, #0]
   8b6e2:	d205      	bcs.n	8b6f0 <__multiply+0x4c>
   8b6e4:	464b      	mov	r3, r9
   8b6e6:	2100      	movs	r1, #0
   8b6e8:	f843 1b04 	str.w	r1, [r3], #4
   8b6ec:	459a      	cmp	sl, r3
   8b6ee:	d8fb      	bhi.n	8b6e8 <__multiply+0x44>
   8b6f0:	f106 0c14 	add.w	ip, r6, #20
   8b6f4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8b6f8:	f10b 0b14 	add.w	fp, fp, #20
   8b6fc:	459c      	cmp	ip, r3
   8b6fe:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   8b702:	d24b      	bcs.n	8b79c <__multiply+0xf8>
   8b704:	f8cd a004 	str.w	sl, [sp, #4]
   8b708:	469a      	mov	sl, r3
   8b70a:	f8dc 5000 	ldr.w	r5, [ip]
   8b70e:	b2af      	uxth	r7, r5
   8b710:	b1e7      	cbz	r7, 8b74c <__multiply+0xa8>
   8b712:	464d      	mov	r5, r9
   8b714:	465e      	mov	r6, fp
   8b716:	2100      	movs	r1, #0
   8b718:	f856 2b04 	ldr.w	r2, [r6], #4
   8b71c:	6828      	ldr	r0, [r5, #0]
   8b71e:	b293      	uxth	r3, r2
   8b720:	b284      	uxth	r4, r0
   8b722:	0c12      	lsrs	r2, r2, #16
   8b724:	fb07 4303 	mla	r3, r7, r3, r4
   8b728:	0c00      	lsrs	r0, r0, #16
   8b72a:	fb07 0202 	mla	r2, r7, r2, r0
   8b72e:	440b      	add	r3, r1
   8b730:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   8b734:	b29b      	uxth	r3, r3
   8b736:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8b73a:	45b6      	cmp	lr, r6
   8b73c:	f845 3b04 	str.w	r3, [r5], #4
   8b740:	ea4f 4111 	mov.w	r1, r1, lsr #16
   8b744:	d8e8      	bhi.n	8b718 <__multiply+0x74>
   8b746:	6029      	str	r1, [r5, #0]
   8b748:	f8dc 5000 	ldr.w	r5, [ip]
   8b74c:	0c2d      	lsrs	r5, r5, #16
   8b74e:	d01d      	beq.n	8b78c <__multiply+0xe8>
   8b750:	f8d9 3000 	ldr.w	r3, [r9]
   8b754:	4648      	mov	r0, r9
   8b756:	461c      	mov	r4, r3
   8b758:	4659      	mov	r1, fp
   8b75a:	2200      	movs	r2, #0
   8b75c:	880e      	ldrh	r6, [r1, #0]
   8b75e:	0c24      	lsrs	r4, r4, #16
   8b760:	fb05 4406 	mla	r4, r5, r6, r4
   8b764:	b29b      	uxth	r3, r3
   8b766:	4422      	add	r2, r4
   8b768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b76c:	f840 3b04 	str.w	r3, [r0], #4
   8b770:	f851 3b04 	ldr.w	r3, [r1], #4
   8b774:	6804      	ldr	r4, [r0, #0]
   8b776:	0c1b      	lsrs	r3, r3, #16
   8b778:	b2a6      	uxth	r6, r4
   8b77a:	fb05 6303 	mla	r3, r5, r3, r6
   8b77e:	458e      	cmp	lr, r1
   8b780:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8b784:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8b788:	d8e8      	bhi.n	8b75c <__multiply+0xb8>
   8b78a:	6003      	str	r3, [r0, #0]
   8b78c:	f10c 0c04 	add.w	ip, ip, #4
   8b790:	45e2      	cmp	sl, ip
   8b792:	f109 0904 	add.w	r9, r9, #4
   8b796:	d8b8      	bhi.n	8b70a <__multiply+0x66>
   8b798:	f8dd a004 	ldr.w	sl, [sp, #4]
   8b79c:	f1b8 0f00 	cmp.w	r8, #0
   8b7a0:	dd0b      	ble.n	8b7ba <__multiply+0x116>
   8b7a2:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8b7a6:	f1aa 0a04 	sub.w	sl, sl, #4
   8b7aa:	b11b      	cbz	r3, 8b7b4 <__multiply+0x110>
   8b7ac:	e005      	b.n	8b7ba <__multiply+0x116>
   8b7ae:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b7b2:	b913      	cbnz	r3, 8b7ba <__multiply+0x116>
   8b7b4:	f1b8 0801 	subs.w	r8, r8, #1
   8b7b8:	d1f9      	bne.n	8b7ae <__multiply+0x10a>
   8b7ba:	9800      	ldr	r0, [sp, #0]
   8b7bc:	f8c0 8010 	str.w	r8, [r0, #16]
   8b7c0:	b003      	add	sp, #12
   8b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b7c6:	bf00      	nop

0008b7c8 <__pow5mult>:
   8b7c8:	f012 0303 	ands.w	r3, r2, #3
   8b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b7d0:	4614      	mov	r4, r2
   8b7d2:	4607      	mov	r7, r0
   8b7d4:	d12e      	bne.n	8b834 <__pow5mult+0x6c>
   8b7d6:	460d      	mov	r5, r1
   8b7d8:	10a4      	asrs	r4, r4, #2
   8b7da:	d01c      	beq.n	8b816 <__pow5mult+0x4e>
   8b7dc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   8b7de:	b396      	cbz	r6, 8b846 <__pow5mult+0x7e>
   8b7e0:	07e3      	lsls	r3, r4, #31
   8b7e2:	f04f 0800 	mov.w	r8, #0
   8b7e6:	d406      	bmi.n	8b7f6 <__pow5mult+0x2e>
   8b7e8:	1064      	asrs	r4, r4, #1
   8b7ea:	d014      	beq.n	8b816 <__pow5mult+0x4e>
   8b7ec:	6830      	ldr	r0, [r6, #0]
   8b7ee:	b1a8      	cbz	r0, 8b81c <__pow5mult+0x54>
   8b7f0:	4606      	mov	r6, r0
   8b7f2:	07e3      	lsls	r3, r4, #31
   8b7f4:	d5f8      	bpl.n	8b7e8 <__pow5mult+0x20>
   8b7f6:	4632      	mov	r2, r6
   8b7f8:	4629      	mov	r1, r5
   8b7fa:	4638      	mov	r0, r7
   8b7fc:	f7ff ff52 	bl	8b6a4 <__multiply>
   8b800:	b1b5      	cbz	r5, 8b830 <__pow5mult+0x68>
   8b802:	686a      	ldr	r2, [r5, #4]
   8b804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b806:	1064      	asrs	r4, r4, #1
   8b808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b80c:	6029      	str	r1, [r5, #0]
   8b80e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b812:	4605      	mov	r5, r0
   8b814:	d1ea      	bne.n	8b7ec <__pow5mult+0x24>
   8b816:	4628      	mov	r0, r5
   8b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b81c:	4632      	mov	r2, r6
   8b81e:	4631      	mov	r1, r6
   8b820:	4638      	mov	r0, r7
   8b822:	f7ff ff3f 	bl	8b6a4 <__multiply>
   8b826:	6030      	str	r0, [r6, #0]
   8b828:	f8c0 8000 	str.w	r8, [r0]
   8b82c:	4606      	mov	r6, r0
   8b82e:	e7e0      	b.n	8b7f2 <__pow5mult+0x2a>
   8b830:	4605      	mov	r5, r0
   8b832:	e7d9      	b.n	8b7e8 <__pow5mult+0x20>
   8b834:	4a0b      	ldr	r2, [pc, #44]	; (8b864 <__pow5mult+0x9c>)
   8b836:	3b01      	subs	r3, #1
   8b838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b83c:	2300      	movs	r3, #0
   8b83e:	f7ff fe95 	bl	8b56c <__multadd>
   8b842:	4605      	mov	r5, r0
   8b844:	e7c8      	b.n	8b7d8 <__pow5mult+0x10>
   8b846:	2101      	movs	r1, #1
   8b848:	4638      	mov	r0, r7
   8b84a:	f7ff fe5f 	bl	8b50c <_Balloc>
   8b84e:	f240 2171 	movw	r1, #625	; 0x271
   8b852:	2201      	movs	r2, #1
   8b854:	2300      	movs	r3, #0
   8b856:	6141      	str	r1, [r0, #20]
   8b858:	6102      	str	r2, [r0, #16]
   8b85a:	4606      	mov	r6, r0
   8b85c:	64b8      	str	r0, [r7, #72]	; 0x48
   8b85e:	6003      	str	r3, [r0, #0]
   8b860:	e7be      	b.n	8b7e0 <__pow5mult+0x18>
   8b862:	bf00      	nop
   8b864:	0008cff0 	.word	0x0008cff0

0008b868 <__lshift>:
   8b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b86c:	690b      	ldr	r3, [r1, #16]
   8b86e:	1154      	asrs	r4, r2, #5
   8b870:	eb04 0803 	add.w	r8, r4, r3
   8b874:	688b      	ldr	r3, [r1, #8]
   8b876:	f108 0501 	add.w	r5, r8, #1
   8b87a:	429d      	cmp	r5, r3
   8b87c:	460e      	mov	r6, r1
   8b87e:	4691      	mov	r9, r2
   8b880:	4607      	mov	r7, r0
   8b882:	6849      	ldr	r1, [r1, #4]
   8b884:	dd04      	ble.n	8b890 <__lshift+0x28>
   8b886:	005b      	lsls	r3, r3, #1
   8b888:	429d      	cmp	r5, r3
   8b88a:	f101 0101 	add.w	r1, r1, #1
   8b88e:	dcfa      	bgt.n	8b886 <__lshift+0x1e>
   8b890:	4638      	mov	r0, r7
   8b892:	f7ff fe3b 	bl	8b50c <_Balloc>
   8b896:	2c00      	cmp	r4, #0
   8b898:	f100 0314 	add.w	r3, r0, #20
   8b89c:	dd06      	ble.n	8b8ac <__lshift+0x44>
   8b89e:	2100      	movs	r1, #0
   8b8a0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   8b8a4:	f843 1b04 	str.w	r1, [r3], #4
   8b8a8:	429a      	cmp	r2, r3
   8b8aa:	d1fb      	bne.n	8b8a4 <__lshift+0x3c>
   8b8ac:	6934      	ldr	r4, [r6, #16]
   8b8ae:	f106 0114 	add.w	r1, r6, #20
   8b8b2:	f019 091f 	ands.w	r9, r9, #31
   8b8b6:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8b8ba:	d01d      	beq.n	8b8f8 <__lshift+0x90>
   8b8bc:	2200      	movs	r2, #0
   8b8be:	f1c9 0c20 	rsb	ip, r9, #32
   8b8c2:	680c      	ldr	r4, [r1, #0]
   8b8c4:	fa04 f409 	lsl.w	r4, r4, r9
   8b8c8:	4314      	orrs	r4, r2
   8b8ca:	f843 4b04 	str.w	r4, [r3], #4
   8b8ce:	f851 2b04 	ldr.w	r2, [r1], #4
   8b8d2:	458e      	cmp	lr, r1
   8b8d4:	fa22 f20c 	lsr.w	r2, r2, ip
   8b8d8:	d8f3      	bhi.n	8b8c2 <__lshift+0x5a>
   8b8da:	601a      	str	r2, [r3, #0]
   8b8dc:	b10a      	cbz	r2, 8b8e2 <__lshift+0x7a>
   8b8de:	f108 0502 	add.w	r5, r8, #2
   8b8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b8e4:	6872      	ldr	r2, [r6, #4]
   8b8e6:	3d01      	subs	r5, #1
   8b8e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b8ec:	6105      	str	r5, [r0, #16]
   8b8ee:	6031      	str	r1, [r6, #0]
   8b8f0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8b8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b8f8:	3b04      	subs	r3, #4
   8b8fa:	f851 2b04 	ldr.w	r2, [r1], #4
   8b8fe:	458e      	cmp	lr, r1
   8b900:	f843 2f04 	str.w	r2, [r3, #4]!
   8b904:	d8f9      	bhi.n	8b8fa <__lshift+0x92>
   8b906:	e7ec      	b.n	8b8e2 <__lshift+0x7a>

0008b908 <__mcmp>:
   8b908:	b430      	push	{r4, r5}
   8b90a:	690b      	ldr	r3, [r1, #16]
   8b90c:	4605      	mov	r5, r0
   8b90e:	6900      	ldr	r0, [r0, #16]
   8b910:	1ac0      	subs	r0, r0, r3
   8b912:	d10f      	bne.n	8b934 <__mcmp+0x2c>
   8b914:	009b      	lsls	r3, r3, #2
   8b916:	3514      	adds	r5, #20
   8b918:	3114      	adds	r1, #20
   8b91a:	4419      	add	r1, r3
   8b91c:	442b      	add	r3, r5
   8b91e:	e001      	b.n	8b924 <__mcmp+0x1c>
   8b920:	429d      	cmp	r5, r3
   8b922:	d207      	bcs.n	8b934 <__mcmp+0x2c>
   8b924:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b92c:	4294      	cmp	r4, r2
   8b92e:	d0f7      	beq.n	8b920 <__mcmp+0x18>
   8b930:	d302      	bcc.n	8b938 <__mcmp+0x30>
   8b932:	2001      	movs	r0, #1
   8b934:	bc30      	pop	{r4, r5}
   8b936:	4770      	bx	lr
   8b938:	f04f 30ff 	mov.w	r0, #4294967295
   8b93c:	e7fa      	b.n	8b934 <__mcmp+0x2c>
   8b93e:	bf00      	nop

0008b940 <__mdiff>:
   8b940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b944:	690c      	ldr	r4, [r1, #16]
   8b946:	4689      	mov	r9, r1
   8b948:	6911      	ldr	r1, [r2, #16]
   8b94a:	4692      	mov	sl, r2
   8b94c:	1a64      	subs	r4, r4, r1
   8b94e:	2c00      	cmp	r4, #0
   8b950:	d117      	bne.n	8b982 <__mdiff+0x42>
   8b952:	0089      	lsls	r1, r1, #2
   8b954:	f109 0714 	add.w	r7, r9, #20
   8b958:	f102 0614 	add.w	r6, r2, #20
   8b95c:	187b      	adds	r3, r7, r1
   8b95e:	4431      	add	r1, r6
   8b960:	e001      	b.n	8b966 <__mdiff+0x26>
   8b962:	429f      	cmp	r7, r3
   8b964:	d265      	bcs.n	8ba32 <__mdiff+0xf2>
   8b966:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b96a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8b96e:	4295      	cmp	r5, r2
   8b970:	d0f7      	beq.n	8b962 <__mdiff+0x22>
   8b972:	d267      	bcs.n	8ba44 <__mdiff+0x104>
   8b974:	464b      	mov	r3, r9
   8b976:	46bb      	mov	fp, r7
   8b978:	46d1      	mov	r9, sl
   8b97a:	4637      	mov	r7, r6
   8b97c:	469a      	mov	sl, r3
   8b97e:	2401      	movs	r4, #1
   8b980:	e005      	b.n	8b98e <__mdiff+0x4e>
   8b982:	db61      	blt.n	8ba48 <__mdiff+0x108>
   8b984:	2400      	movs	r4, #0
   8b986:	f109 0714 	add.w	r7, r9, #20
   8b98a:	f10a 0b14 	add.w	fp, sl, #20
   8b98e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8b992:	f7ff fdbb 	bl	8b50c <_Balloc>
   8b996:	465d      	mov	r5, fp
   8b998:	f04f 0800 	mov.w	r8, #0
   8b99c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   8b9a0:	f8da 3010 	ldr.w	r3, [sl, #16]
   8b9a4:	463e      	mov	r6, r7
   8b9a6:	60c4      	str	r4, [r0, #12]
   8b9a8:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8b9ac:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   8b9b0:	f100 0414 	add.w	r4, r0, #20
   8b9b4:	f856 9b04 	ldr.w	r9, [r6], #4
   8b9b8:	f855 2b04 	ldr.w	r2, [r5], #4
   8b9bc:	fa1f f389 	uxth.w	r3, r9
   8b9c0:	4443      	add	r3, r8
   8b9c2:	fa1f f882 	uxth.w	r8, r2
   8b9c6:	0c12      	lsrs	r2, r2, #16
   8b9c8:	eba3 0308 	sub.w	r3, r3, r8
   8b9cc:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   8b9d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   8b9d4:	b29b      	uxth	r3, r3
   8b9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b9da:	45ac      	cmp	ip, r5
   8b9dc:	f844 3b04 	str.w	r3, [r4], #4
   8b9e0:	ea4f 4822 	mov.w	r8, r2, asr #16
   8b9e4:	d8e6      	bhi.n	8b9b4 <__mdiff+0x74>
   8b9e6:	42b7      	cmp	r7, r6
   8b9e8:	d917      	bls.n	8ba1a <__mdiff+0xda>
   8b9ea:	46a4      	mov	ip, r4
   8b9ec:	4635      	mov	r5, r6
   8b9ee:	f855 3b04 	ldr.w	r3, [r5], #4
   8b9f2:	b299      	uxth	r1, r3
   8b9f4:	4441      	add	r1, r8
   8b9f6:	140a      	asrs	r2, r1, #16
   8b9f8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b9fc:	b289      	uxth	r1, r1
   8b9fe:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   8ba02:	42af      	cmp	r7, r5
   8ba04:	f84c 3b04 	str.w	r3, [ip], #4
   8ba08:	ea4f 4822 	mov.w	r8, r2, asr #16
   8ba0c:	d8ef      	bhi.n	8b9ee <__mdiff+0xae>
   8ba0e:	43f6      	mvns	r6, r6
   8ba10:	4437      	add	r7, r6
   8ba12:	f027 0703 	bic.w	r7, r7, #3
   8ba16:	3704      	adds	r7, #4
   8ba18:	443c      	add	r4, r7
   8ba1a:	3c04      	subs	r4, #4
   8ba1c:	b92b      	cbnz	r3, 8ba2a <__mdiff+0xea>
   8ba1e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8ba22:	f10e 3eff 	add.w	lr, lr, #4294967295
   8ba26:	2b00      	cmp	r3, #0
   8ba28:	d0f9      	beq.n	8ba1e <__mdiff+0xde>
   8ba2a:	f8c0 e010 	str.w	lr, [r0, #16]
   8ba2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba32:	2100      	movs	r1, #0
   8ba34:	f7ff fd6a 	bl	8b50c <_Balloc>
   8ba38:	2201      	movs	r2, #1
   8ba3a:	2300      	movs	r3, #0
   8ba3c:	6102      	str	r2, [r0, #16]
   8ba3e:	6143      	str	r3, [r0, #20]
   8ba40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba44:	46b3      	mov	fp, r6
   8ba46:	e7a2      	b.n	8b98e <__mdiff+0x4e>
   8ba48:	464b      	mov	r3, r9
   8ba4a:	f109 0b14 	add.w	fp, r9, #20
   8ba4e:	f102 0714 	add.w	r7, r2, #20
   8ba52:	4691      	mov	r9, r2
   8ba54:	2401      	movs	r4, #1
   8ba56:	469a      	mov	sl, r3
   8ba58:	e799      	b.n	8b98e <__mdiff+0x4e>
   8ba5a:	bf00      	nop

0008ba5c <__d2b>:
   8ba5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8ba5e:	2101      	movs	r1, #1
   8ba60:	b083      	sub	sp, #12
   8ba62:	461c      	mov	r4, r3
   8ba64:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8ba68:	4616      	mov	r6, r2
   8ba6a:	f7ff fd4f 	bl	8b50c <_Balloc>
   8ba6e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8ba72:	4607      	mov	r7, r0
   8ba74:	b10d      	cbz	r5, 8ba7a <__d2b+0x1e>
   8ba76:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8ba7a:	9401      	str	r4, [sp, #4]
   8ba7c:	b306      	cbz	r6, 8bac0 <__d2b+0x64>
   8ba7e:	a802      	add	r0, sp, #8
   8ba80:	f840 6d08 	str.w	r6, [r0, #-8]!
   8ba84:	f7ff fdd4 	bl	8b630 <__lo0bits>
   8ba88:	2800      	cmp	r0, #0
   8ba8a:	d130      	bne.n	8baee <__d2b+0x92>
   8ba8c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8ba90:	617a      	str	r2, [r7, #20]
   8ba92:	2b00      	cmp	r3, #0
   8ba94:	bf0c      	ite	eq
   8ba96:	2101      	moveq	r1, #1
   8ba98:	2102      	movne	r1, #2
   8ba9a:	61bb      	str	r3, [r7, #24]
   8ba9c:	6139      	str	r1, [r7, #16]
   8ba9e:	b9d5      	cbnz	r5, 8bad6 <__d2b+0x7a>
   8baa0:	9a08      	ldr	r2, [sp, #32]
   8baa2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8baa6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8baaa:	6010      	str	r0, [r2, #0]
   8baac:	6918      	ldr	r0, [r3, #16]
   8baae:	f7ff fd9f 	bl	8b5f0 <__hi0bits>
   8bab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8bab4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8bab8:	6018      	str	r0, [r3, #0]
   8baba:	4638      	mov	r0, r7
   8babc:	b003      	add	sp, #12
   8babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8bac0:	a801      	add	r0, sp, #4
   8bac2:	f7ff fdb5 	bl	8b630 <__lo0bits>
   8bac6:	2201      	movs	r2, #1
   8bac8:	9b01      	ldr	r3, [sp, #4]
   8baca:	4611      	mov	r1, r2
   8bacc:	3020      	adds	r0, #32
   8bace:	613a      	str	r2, [r7, #16]
   8bad0:	617b      	str	r3, [r7, #20]
   8bad2:	2d00      	cmp	r5, #0
   8bad4:	d0e4      	beq.n	8baa0 <__d2b+0x44>
   8bad6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8bada:	9a08      	ldr	r2, [sp, #32]
   8badc:	4403      	add	r3, r0
   8bade:	6013      	str	r3, [r2, #0]
   8bae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8bae2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8bae6:	6018      	str	r0, [r3, #0]
   8bae8:	4638      	mov	r0, r7
   8baea:	b003      	add	sp, #12
   8baec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8baee:	9b01      	ldr	r3, [sp, #4]
   8baf0:	f1c0 0220 	rsb	r2, r0, #32
   8baf4:	9900      	ldr	r1, [sp, #0]
   8baf6:	fa03 f202 	lsl.w	r2, r3, r2
   8bafa:	430a      	orrs	r2, r1
   8bafc:	40c3      	lsrs	r3, r0
   8bafe:	9301      	str	r3, [sp, #4]
   8bb00:	617a      	str	r2, [r7, #20]
   8bb02:	e7c6      	b.n	8ba92 <__d2b+0x36>

0008bb04 <_realloc_r>:
   8bb04:	2900      	cmp	r1, #0
   8bb06:	f000 8094 	beq.w	8bc32 <_realloc_r+0x12e>
   8bb0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb0e:	460c      	mov	r4, r1
   8bb10:	4615      	mov	r5, r2
   8bb12:	b083      	sub	sp, #12
   8bb14:	4680      	mov	r8, r0
   8bb16:	f105 060b 	add.w	r6, r5, #11
   8bb1a:	f7ff fceb 	bl	8b4f4 <__malloc_lock>
   8bb1e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8bb22:	2e16      	cmp	r6, #22
   8bb24:	f02e 0703 	bic.w	r7, lr, #3
   8bb28:	f1a4 0908 	sub.w	r9, r4, #8
   8bb2c:	d83c      	bhi.n	8bba8 <_realloc_r+0xa4>
   8bb2e:	2210      	movs	r2, #16
   8bb30:	4616      	mov	r6, r2
   8bb32:	42b5      	cmp	r5, r6
   8bb34:	d83d      	bhi.n	8bbb2 <_realloc_r+0xae>
   8bb36:	4297      	cmp	r7, r2
   8bb38:	da43      	bge.n	8bbc2 <_realloc_r+0xbe>
   8bb3a:	4bc6      	ldr	r3, [pc, #792]	; (8be54 <_realloc_r+0x350>)
   8bb3c:	eb09 0007 	add.w	r0, r9, r7
   8bb40:	6899      	ldr	r1, [r3, #8]
   8bb42:	4288      	cmp	r0, r1
   8bb44:	f000 80c3 	beq.w	8bcce <_realloc_r+0x1ca>
   8bb48:	6843      	ldr	r3, [r0, #4]
   8bb4a:	f023 0101 	bic.w	r1, r3, #1
   8bb4e:	4401      	add	r1, r0
   8bb50:	6849      	ldr	r1, [r1, #4]
   8bb52:	07c9      	lsls	r1, r1, #31
   8bb54:	d54d      	bpl.n	8bbf2 <_realloc_r+0xee>
   8bb56:	f01e 0f01 	tst.w	lr, #1
   8bb5a:	f000 809b 	beq.w	8bc94 <_realloc_r+0x190>
   8bb5e:	4629      	mov	r1, r5
   8bb60:	4640      	mov	r0, r8
   8bb62:	f7ff f965 	bl	8ae30 <_malloc_r>
   8bb66:	4605      	mov	r5, r0
   8bb68:	2800      	cmp	r0, #0
   8bb6a:	d03b      	beq.n	8bbe4 <_realloc_r+0xe0>
   8bb6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bb70:	f1a0 0208 	sub.w	r2, r0, #8
   8bb74:	f023 0301 	bic.w	r3, r3, #1
   8bb78:	444b      	add	r3, r9
   8bb7a:	429a      	cmp	r2, r3
   8bb7c:	f000 812b 	beq.w	8bdd6 <_realloc_r+0x2d2>
   8bb80:	1f3a      	subs	r2, r7, #4
   8bb82:	2a24      	cmp	r2, #36	; 0x24
   8bb84:	f200 8118 	bhi.w	8bdb8 <_realloc_r+0x2b4>
   8bb88:	2a13      	cmp	r2, #19
   8bb8a:	f200 80eb 	bhi.w	8bd64 <_realloc_r+0x260>
   8bb8e:	4603      	mov	r3, r0
   8bb90:	4622      	mov	r2, r4
   8bb92:	6811      	ldr	r1, [r2, #0]
   8bb94:	6019      	str	r1, [r3, #0]
   8bb96:	6851      	ldr	r1, [r2, #4]
   8bb98:	6059      	str	r1, [r3, #4]
   8bb9a:	6892      	ldr	r2, [r2, #8]
   8bb9c:	609a      	str	r2, [r3, #8]
   8bb9e:	4621      	mov	r1, r4
   8bba0:	4640      	mov	r0, r8
   8bba2:	f7fe fe19 	bl	8a7d8 <_free_r>
   8bba6:	e01d      	b.n	8bbe4 <_realloc_r+0xe0>
   8bba8:	f026 0607 	bic.w	r6, r6, #7
   8bbac:	2e00      	cmp	r6, #0
   8bbae:	4632      	mov	r2, r6
   8bbb0:	dabf      	bge.n	8bb32 <_realloc_r+0x2e>
   8bbb2:	2500      	movs	r5, #0
   8bbb4:	230c      	movs	r3, #12
   8bbb6:	4628      	mov	r0, r5
   8bbb8:	f8c8 3000 	str.w	r3, [r8]
   8bbbc:	b003      	add	sp, #12
   8bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bbc2:	4625      	mov	r5, r4
   8bbc4:	1bbb      	subs	r3, r7, r6
   8bbc6:	2b0f      	cmp	r3, #15
   8bbc8:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8bbcc:	d81d      	bhi.n	8bc0a <_realloc_r+0x106>
   8bbce:	f002 0201 	and.w	r2, r2, #1
   8bbd2:	433a      	orrs	r2, r7
   8bbd4:	eb09 0107 	add.w	r1, r9, r7
   8bbd8:	f8c9 2004 	str.w	r2, [r9, #4]
   8bbdc:	684b      	ldr	r3, [r1, #4]
   8bbde:	f043 0301 	orr.w	r3, r3, #1
   8bbe2:	604b      	str	r3, [r1, #4]
   8bbe4:	4640      	mov	r0, r8
   8bbe6:	f7ff fc8b 	bl	8b500 <__malloc_unlock>
   8bbea:	4628      	mov	r0, r5
   8bbec:	b003      	add	sp, #12
   8bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bbf2:	f023 0303 	bic.w	r3, r3, #3
   8bbf6:	18f9      	adds	r1, r7, r3
   8bbf8:	4291      	cmp	r1, r2
   8bbfa:	db1d      	blt.n	8bc38 <_realloc_r+0x134>
   8bbfc:	68c3      	ldr	r3, [r0, #12]
   8bbfe:	6882      	ldr	r2, [r0, #8]
   8bc00:	4625      	mov	r5, r4
   8bc02:	60d3      	str	r3, [r2, #12]
   8bc04:	460f      	mov	r7, r1
   8bc06:	609a      	str	r2, [r3, #8]
   8bc08:	e7dc      	b.n	8bbc4 <_realloc_r+0xc0>
   8bc0a:	f002 0201 	and.w	r2, r2, #1
   8bc0e:	eb09 0106 	add.w	r1, r9, r6
   8bc12:	f043 0301 	orr.w	r3, r3, #1
   8bc16:	4332      	orrs	r2, r6
   8bc18:	f8c9 2004 	str.w	r2, [r9, #4]
   8bc1c:	444f      	add	r7, r9
   8bc1e:	604b      	str	r3, [r1, #4]
   8bc20:	687b      	ldr	r3, [r7, #4]
   8bc22:	3108      	adds	r1, #8
   8bc24:	f043 0301 	orr.w	r3, r3, #1
   8bc28:	607b      	str	r3, [r7, #4]
   8bc2a:	4640      	mov	r0, r8
   8bc2c:	f7fe fdd4 	bl	8a7d8 <_free_r>
   8bc30:	e7d8      	b.n	8bbe4 <_realloc_r+0xe0>
   8bc32:	4611      	mov	r1, r2
   8bc34:	f7ff b8fc 	b.w	8ae30 <_malloc_r>
   8bc38:	f01e 0f01 	tst.w	lr, #1
   8bc3c:	d18f      	bne.n	8bb5e <_realloc_r+0x5a>
   8bc3e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8bc42:	eba9 0a01 	sub.w	sl, r9, r1
   8bc46:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bc4a:	f021 0103 	bic.w	r1, r1, #3
   8bc4e:	440b      	add	r3, r1
   8bc50:	443b      	add	r3, r7
   8bc52:	4293      	cmp	r3, r2
   8bc54:	db26      	blt.n	8bca4 <_realloc_r+0x1a0>
   8bc56:	4655      	mov	r5, sl
   8bc58:	68c1      	ldr	r1, [r0, #12]
   8bc5a:	6880      	ldr	r0, [r0, #8]
   8bc5c:	1f3a      	subs	r2, r7, #4
   8bc5e:	60c1      	str	r1, [r0, #12]
   8bc60:	6088      	str	r0, [r1, #8]
   8bc62:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bc66:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bc6a:	2a24      	cmp	r2, #36	; 0x24
   8bc6c:	60c1      	str	r1, [r0, #12]
   8bc6e:	6088      	str	r0, [r1, #8]
   8bc70:	d826      	bhi.n	8bcc0 <_realloc_r+0x1bc>
   8bc72:	2a13      	cmp	r2, #19
   8bc74:	f240 8081 	bls.w	8bd7a <_realloc_r+0x276>
   8bc78:	6821      	ldr	r1, [r4, #0]
   8bc7a:	2a1b      	cmp	r2, #27
   8bc7c:	f8ca 1008 	str.w	r1, [sl, #8]
   8bc80:	6861      	ldr	r1, [r4, #4]
   8bc82:	f8ca 100c 	str.w	r1, [sl, #12]
   8bc86:	f200 80ad 	bhi.w	8bde4 <_realloc_r+0x2e0>
   8bc8a:	f104 0008 	add.w	r0, r4, #8
   8bc8e:	f10a 0210 	add.w	r2, sl, #16
   8bc92:	e074      	b.n	8bd7e <_realloc_r+0x27a>
   8bc94:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bc98:	eba9 0a03 	sub.w	sl, r9, r3
   8bc9c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bca0:	f021 0103 	bic.w	r1, r1, #3
   8bca4:	187b      	adds	r3, r7, r1
   8bca6:	4293      	cmp	r3, r2
   8bca8:	f6ff af59 	blt.w	8bb5e <_realloc_r+0x5a>
   8bcac:	4655      	mov	r5, sl
   8bcae:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bcb2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bcb6:	1f3a      	subs	r2, r7, #4
   8bcb8:	2a24      	cmp	r2, #36	; 0x24
   8bcba:	60c1      	str	r1, [r0, #12]
   8bcbc:	6088      	str	r0, [r1, #8]
   8bcbe:	d9d8      	bls.n	8bc72 <_realloc_r+0x16e>
   8bcc0:	4621      	mov	r1, r4
   8bcc2:	4628      	mov	r0, r5
   8bcc4:	461f      	mov	r7, r3
   8bcc6:	46d1      	mov	r9, sl
   8bcc8:	f7ff fbb0 	bl	8b42c <memmove>
   8bccc:	e77a      	b.n	8bbc4 <_realloc_r+0xc0>
   8bcce:	6841      	ldr	r1, [r0, #4]
   8bcd0:	f106 0010 	add.w	r0, r6, #16
   8bcd4:	f021 0b03 	bic.w	fp, r1, #3
   8bcd8:	44bb      	add	fp, r7
   8bcda:	4583      	cmp	fp, r0
   8bcdc:	da58      	bge.n	8bd90 <_realloc_r+0x28c>
   8bcde:	f01e 0f01 	tst.w	lr, #1
   8bce2:	f47f af3c 	bne.w	8bb5e <_realloc_r+0x5a>
   8bce6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8bcea:	eba9 0a01 	sub.w	sl, r9, r1
   8bcee:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bcf2:	f021 0103 	bic.w	r1, r1, #3
   8bcf6:	448b      	add	fp, r1
   8bcf8:	4558      	cmp	r0, fp
   8bcfa:	dcd3      	bgt.n	8bca4 <_realloc_r+0x1a0>
   8bcfc:	4655      	mov	r5, sl
   8bcfe:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bd02:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8bd06:	1f3a      	subs	r2, r7, #4
   8bd08:	2a24      	cmp	r2, #36	; 0x24
   8bd0a:	60c1      	str	r1, [r0, #12]
   8bd0c:	6088      	str	r0, [r1, #8]
   8bd0e:	f200 808d 	bhi.w	8be2c <_realloc_r+0x328>
   8bd12:	2a13      	cmp	r2, #19
   8bd14:	f240 8087 	bls.w	8be26 <_realloc_r+0x322>
   8bd18:	6821      	ldr	r1, [r4, #0]
   8bd1a:	2a1b      	cmp	r2, #27
   8bd1c:	f8ca 1008 	str.w	r1, [sl, #8]
   8bd20:	6861      	ldr	r1, [r4, #4]
   8bd22:	f8ca 100c 	str.w	r1, [sl, #12]
   8bd26:	f200 8088 	bhi.w	8be3a <_realloc_r+0x336>
   8bd2a:	f104 0108 	add.w	r1, r4, #8
   8bd2e:	f10a 0210 	add.w	r2, sl, #16
   8bd32:	6808      	ldr	r0, [r1, #0]
   8bd34:	6010      	str	r0, [r2, #0]
   8bd36:	6848      	ldr	r0, [r1, #4]
   8bd38:	6050      	str	r0, [r2, #4]
   8bd3a:	6889      	ldr	r1, [r1, #8]
   8bd3c:	6091      	str	r1, [r2, #8]
   8bd3e:	ebab 0206 	sub.w	r2, fp, r6
   8bd42:	eb0a 0106 	add.w	r1, sl, r6
   8bd46:	f042 0201 	orr.w	r2, r2, #1
   8bd4a:	6099      	str	r1, [r3, #8]
   8bd4c:	604a      	str	r2, [r1, #4]
   8bd4e:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bd52:	4640      	mov	r0, r8
   8bd54:	f003 0301 	and.w	r3, r3, #1
   8bd58:	431e      	orrs	r6, r3
   8bd5a:	f8ca 6004 	str.w	r6, [sl, #4]
   8bd5e:	f7ff fbcf 	bl	8b500 <__malloc_unlock>
   8bd62:	e742      	b.n	8bbea <_realloc_r+0xe6>
   8bd64:	6823      	ldr	r3, [r4, #0]
   8bd66:	2a1b      	cmp	r2, #27
   8bd68:	6003      	str	r3, [r0, #0]
   8bd6a:	6863      	ldr	r3, [r4, #4]
   8bd6c:	6043      	str	r3, [r0, #4]
   8bd6e:	d827      	bhi.n	8bdc0 <_realloc_r+0x2bc>
   8bd70:	f100 0308 	add.w	r3, r0, #8
   8bd74:	f104 0208 	add.w	r2, r4, #8
   8bd78:	e70b      	b.n	8bb92 <_realloc_r+0x8e>
   8bd7a:	4620      	mov	r0, r4
   8bd7c:	462a      	mov	r2, r5
   8bd7e:	6801      	ldr	r1, [r0, #0]
   8bd80:	461f      	mov	r7, r3
   8bd82:	6011      	str	r1, [r2, #0]
   8bd84:	6841      	ldr	r1, [r0, #4]
   8bd86:	46d1      	mov	r9, sl
   8bd88:	6051      	str	r1, [r2, #4]
   8bd8a:	6883      	ldr	r3, [r0, #8]
   8bd8c:	6093      	str	r3, [r2, #8]
   8bd8e:	e719      	b.n	8bbc4 <_realloc_r+0xc0>
   8bd90:	ebab 0b06 	sub.w	fp, fp, r6
   8bd94:	eb09 0106 	add.w	r1, r9, r6
   8bd98:	f04b 0201 	orr.w	r2, fp, #1
   8bd9c:	6099      	str	r1, [r3, #8]
   8bd9e:	604a      	str	r2, [r1, #4]
   8bda0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bda4:	4640      	mov	r0, r8
   8bda6:	f003 0301 	and.w	r3, r3, #1
   8bdaa:	431e      	orrs	r6, r3
   8bdac:	f844 6c04 	str.w	r6, [r4, #-4]
   8bdb0:	f7ff fba6 	bl	8b500 <__malloc_unlock>
   8bdb4:	4625      	mov	r5, r4
   8bdb6:	e718      	b.n	8bbea <_realloc_r+0xe6>
   8bdb8:	4621      	mov	r1, r4
   8bdba:	f7ff fb37 	bl	8b42c <memmove>
   8bdbe:	e6ee      	b.n	8bb9e <_realloc_r+0x9a>
   8bdc0:	68a3      	ldr	r3, [r4, #8]
   8bdc2:	2a24      	cmp	r2, #36	; 0x24
   8bdc4:	6083      	str	r3, [r0, #8]
   8bdc6:	68e3      	ldr	r3, [r4, #12]
   8bdc8:	60c3      	str	r3, [r0, #12]
   8bdca:	d018      	beq.n	8bdfe <_realloc_r+0x2fa>
   8bdcc:	f100 0310 	add.w	r3, r0, #16
   8bdd0:	f104 0210 	add.w	r2, r4, #16
   8bdd4:	e6dd      	b.n	8bb92 <_realloc_r+0x8e>
   8bdd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bdda:	4625      	mov	r5, r4
   8bddc:	f023 0303 	bic.w	r3, r3, #3
   8bde0:	441f      	add	r7, r3
   8bde2:	e6ef      	b.n	8bbc4 <_realloc_r+0xc0>
   8bde4:	68a1      	ldr	r1, [r4, #8]
   8bde6:	2a24      	cmp	r2, #36	; 0x24
   8bde8:	f8ca 1010 	str.w	r1, [sl, #16]
   8bdec:	68e1      	ldr	r1, [r4, #12]
   8bdee:	f8ca 1014 	str.w	r1, [sl, #20]
   8bdf2:	d00d      	beq.n	8be10 <_realloc_r+0x30c>
   8bdf4:	f104 0010 	add.w	r0, r4, #16
   8bdf8:	f10a 0218 	add.w	r2, sl, #24
   8bdfc:	e7bf      	b.n	8bd7e <_realloc_r+0x27a>
   8bdfe:	6922      	ldr	r2, [r4, #16]
   8be00:	f100 0318 	add.w	r3, r0, #24
   8be04:	6102      	str	r2, [r0, #16]
   8be06:	6961      	ldr	r1, [r4, #20]
   8be08:	f104 0218 	add.w	r2, r4, #24
   8be0c:	6141      	str	r1, [r0, #20]
   8be0e:	e6c0      	b.n	8bb92 <_realloc_r+0x8e>
   8be10:	6922      	ldr	r2, [r4, #16]
   8be12:	f104 0018 	add.w	r0, r4, #24
   8be16:	f8ca 2018 	str.w	r2, [sl, #24]
   8be1a:	6961      	ldr	r1, [r4, #20]
   8be1c:	f10a 0220 	add.w	r2, sl, #32
   8be20:	f8ca 101c 	str.w	r1, [sl, #28]
   8be24:	e7ab      	b.n	8bd7e <_realloc_r+0x27a>
   8be26:	4621      	mov	r1, r4
   8be28:	462a      	mov	r2, r5
   8be2a:	e782      	b.n	8bd32 <_realloc_r+0x22e>
   8be2c:	4621      	mov	r1, r4
   8be2e:	4628      	mov	r0, r5
   8be30:	9301      	str	r3, [sp, #4]
   8be32:	f7ff fafb 	bl	8b42c <memmove>
   8be36:	9b01      	ldr	r3, [sp, #4]
   8be38:	e781      	b.n	8bd3e <_realloc_r+0x23a>
   8be3a:	68a1      	ldr	r1, [r4, #8]
   8be3c:	2a24      	cmp	r2, #36	; 0x24
   8be3e:	f8ca 1010 	str.w	r1, [sl, #16]
   8be42:	68e1      	ldr	r1, [r4, #12]
   8be44:	f8ca 1014 	str.w	r1, [sl, #20]
   8be48:	d006      	beq.n	8be58 <_realloc_r+0x354>
   8be4a:	f104 0110 	add.w	r1, r4, #16
   8be4e:	f10a 0218 	add.w	r2, sl, #24
   8be52:	e76e      	b.n	8bd32 <_realloc_r+0x22e>
   8be54:	20001048 	.word	0x20001048
   8be58:	6922      	ldr	r2, [r4, #16]
   8be5a:	f104 0118 	add.w	r1, r4, #24
   8be5e:	f8ca 2018 	str.w	r2, [sl, #24]
   8be62:	6960      	ldr	r0, [r4, #20]
   8be64:	f10a 0220 	add.w	r2, sl, #32
   8be68:	f8ca 001c 	str.w	r0, [sl, #28]
   8be6c:	e761      	b.n	8bd32 <_realloc_r+0x22e>
   8be6e:	bf00      	nop

0008be70 <_sbrk_r>:
   8be70:	b538      	push	{r3, r4, r5, lr}
   8be72:	2300      	movs	r3, #0
   8be74:	4c06      	ldr	r4, [pc, #24]	; (8be90 <_sbrk_r+0x20>)
   8be76:	4605      	mov	r5, r0
   8be78:	4608      	mov	r0, r1
   8be7a:	6023      	str	r3, [r4, #0]
   8be7c:	f7fa fb84 	bl	86588 <_sbrk>
   8be80:	1c43      	adds	r3, r0, #1
   8be82:	d000      	beq.n	8be86 <_sbrk_r+0x16>
   8be84:	bd38      	pop	{r3, r4, r5, pc}
   8be86:	6823      	ldr	r3, [r4, #0]
   8be88:	2b00      	cmp	r3, #0
   8be8a:	d0fb      	beq.n	8be84 <_sbrk_r+0x14>
   8be8c:	602b      	str	r3, [r5, #0]
   8be8e:	bd38      	pop	{r3, r4, r5, pc}
   8be90:	200027e8 	.word	0x200027e8

0008be94 <__sread>:
   8be94:	b510      	push	{r4, lr}
   8be96:	460c      	mov	r4, r1
   8be98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8be9c:	f000 faa2 	bl	8c3e4 <_read_r>
   8bea0:	2800      	cmp	r0, #0
   8bea2:	db03      	blt.n	8beac <__sread+0x18>
   8bea4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bea6:	4403      	add	r3, r0
   8bea8:	6523      	str	r3, [r4, #80]	; 0x50
   8beaa:	bd10      	pop	{r4, pc}
   8beac:	89a3      	ldrh	r3, [r4, #12]
   8beae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8beb2:	81a3      	strh	r3, [r4, #12]
   8beb4:	bd10      	pop	{r4, pc}
   8beb6:	bf00      	nop

0008beb8 <__swrite>:
   8beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bebc:	460c      	mov	r4, r1
   8bebe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bec2:	461f      	mov	r7, r3
   8bec4:	05cb      	lsls	r3, r1, #23
   8bec6:	4616      	mov	r6, r2
   8bec8:	4605      	mov	r5, r0
   8beca:	d507      	bpl.n	8bedc <__swrite+0x24>
   8becc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bed0:	2302      	movs	r3, #2
   8bed2:	2200      	movs	r2, #0
   8bed4:	f000 fa70 	bl	8c3b8 <_lseek_r>
   8bed8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bedc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bee0:	81a1      	strh	r1, [r4, #12]
   8bee2:	463b      	mov	r3, r7
   8bee4:	4632      	mov	r2, r6
   8bee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8beea:	4628      	mov	r0, r5
   8beec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bef0:	f000 b920 	b.w	8c134 <_write_r>

0008bef4 <__sseek>:
   8bef4:	b510      	push	{r4, lr}
   8bef6:	460c      	mov	r4, r1
   8bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8befc:	f000 fa5c 	bl	8c3b8 <_lseek_r>
   8bf00:	89a3      	ldrh	r3, [r4, #12]
   8bf02:	1c42      	adds	r2, r0, #1
   8bf04:	bf0e      	itee	eq
   8bf06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bf0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bf0e:	6520      	strne	r0, [r4, #80]	; 0x50
   8bf10:	81a3      	strh	r3, [r4, #12]
   8bf12:	bd10      	pop	{r4, pc}

0008bf14 <__sclose>:
   8bf14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bf18:	f000 b9b4 	b.w	8c284 <_close_r>

0008bf1c <__ssprint_r>:
   8bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bf20:	6893      	ldr	r3, [r2, #8]
   8bf22:	b083      	sub	sp, #12
   8bf24:	4690      	mov	r8, r2
   8bf26:	2b00      	cmp	r3, #0
   8bf28:	d070      	beq.n	8c00c <__ssprint_r+0xf0>
   8bf2a:	4682      	mov	sl, r0
   8bf2c:	460c      	mov	r4, r1
   8bf2e:	6817      	ldr	r7, [r2, #0]
   8bf30:	688d      	ldr	r5, [r1, #8]
   8bf32:	6808      	ldr	r0, [r1, #0]
   8bf34:	e042      	b.n	8bfbc <__ssprint_r+0xa0>
   8bf36:	89a3      	ldrh	r3, [r4, #12]
   8bf38:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8bf3c:	d02e      	beq.n	8bf9c <__ssprint_r+0x80>
   8bf3e:	6965      	ldr	r5, [r4, #20]
   8bf40:	6921      	ldr	r1, [r4, #16]
   8bf42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8bf46:	eba0 0b01 	sub.w	fp, r0, r1
   8bf4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8bf4e:	f10b 0001 	add.w	r0, fp, #1
   8bf52:	106d      	asrs	r5, r5, #1
   8bf54:	4430      	add	r0, r6
   8bf56:	42a8      	cmp	r0, r5
   8bf58:	462a      	mov	r2, r5
   8bf5a:	bf84      	itt	hi
   8bf5c:	4605      	movhi	r5, r0
   8bf5e:	462a      	movhi	r2, r5
   8bf60:	055b      	lsls	r3, r3, #21
   8bf62:	d538      	bpl.n	8bfd6 <__ssprint_r+0xba>
   8bf64:	4611      	mov	r1, r2
   8bf66:	4650      	mov	r0, sl
   8bf68:	f7fe ff62 	bl	8ae30 <_malloc_r>
   8bf6c:	2800      	cmp	r0, #0
   8bf6e:	d03c      	beq.n	8bfea <__ssprint_r+0xce>
   8bf70:	465a      	mov	r2, fp
   8bf72:	6921      	ldr	r1, [r4, #16]
   8bf74:	9001      	str	r0, [sp, #4]
   8bf76:	f7fa fe87 	bl	86c88 <memcpy>
   8bf7a:	89a2      	ldrh	r2, [r4, #12]
   8bf7c:	9b01      	ldr	r3, [sp, #4]
   8bf7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8bf82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8bf86:	81a2      	strh	r2, [r4, #12]
   8bf88:	eba5 020b 	sub.w	r2, r5, fp
   8bf8c:	eb03 000b 	add.w	r0, r3, fp
   8bf90:	6165      	str	r5, [r4, #20]
   8bf92:	46b3      	mov	fp, r6
   8bf94:	4635      	mov	r5, r6
   8bf96:	6123      	str	r3, [r4, #16]
   8bf98:	6020      	str	r0, [r4, #0]
   8bf9a:	60a2      	str	r2, [r4, #8]
   8bf9c:	465a      	mov	r2, fp
   8bf9e:	4649      	mov	r1, r9
   8bfa0:	f7ff fa44 	bl	8b42c <memmove>
   8bfa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8bfa8:	68a2      	ldr	r2, [r4, #8]
   8bfaa:	6820      	ldr	r0, [r4, #0]
   8bfac:	1b55      	subs	r5, r2, r5
   8bfae:	4458      	add	r0, fp
   8bfb0:	1b9e      	subs	r6, r3, r6
   8bfb2:	60a5      	str	r5, [r4, #8]
   8bfb4:	6020      	str	r0, [r4, #0]
   8bfb6:	f8c8 6008 	str.w	r6, [r8, #8]
   8bfba:	b33e      	cbz	r6, 8c00c <__ssprint_r+0xf0>
   8bfbc:	687e      	ldr	r6, [r7, #4]
   8bfbe:	463b      	mov	r3, r7
   8bfc0:	3708      	adds	r7, #8
   8bfc2:	2e00      	cmp	r6, #0
   8bfc4:	d0fa      	beq.n	8bfbc <__ssprint_r+0xa0>
   8bfc6:	42ae      	cmp	r6, r5
   8bfc8:	f8d3 9000 	ldr.w	r9, [r3]
   8bfcc:	46ab      	mov	fp, r5
   8bfce:	d2b2      	bcs.n	8bf36 <__ssprint_r+0x1a>
   8bfd0:	4635      	mov	r5, r6
   8bfd2:	46b3      	mov	fp, r6
   8bfd4:	e7e2      	b.n	8bf9c <__ssprint_r+0x80>
   8bfd6:	4650      	mov	r0, sl
   8bfd8:	f7ff fd94 	bl	8bb04 <_realloc_r>
   8bfdc:	4603      	mov	r3, r0
   8bfde:	2800      	cmp	r0, #0
   8bfe0:	d1d2      	bne.n	8bf88 <__ssprint_r+0x6c>
   8bfe2:	6921      	ldr	r1, [r4, #16]
   8bfe4:	4650      	mov	r0, sl
   8bfe6:	f7fe fbf7 	bl	8a7d8 <_free_r>
   8bfea:	230c      	movs	r3, #12
   8bfec:	2200      	movs	r2, #0
   8bfee:	f04f 30ff 	mov.w	r0, #4294967295
   8bff2:	f8ca 3000 	str.w	r3, [sl]
   8bff6:	89a3      	ldrh	r3, [r4, #12]
   8bff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8bffc:	81a3      	strh	r3, [r4, #12]
   8bffe:	f8c8 2008 	str.w	r2, [r8, #8]
   8c002:	f8c8 2004 	str.w	r2, [r8, #4]
   8c006:	b003      	add	sp, #12
   8c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c00c:	2000      	movs	r0, #0
   8c00e:	f8c8 0004 	str.w	r0, [r8, #4]
   8c012:	b003      	add	sp, #12
   8c014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0008c018 <__swbuf_r>:
   8c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c01a:	460d      	mov	r5, r1
   8c01c:	4614      	mov	r4, r2
   8c01e:	4606      	mov	r6, r0
   8c020:	b110      	cbz	r0, 8c028 <__swbuf_r+0x10>
   8c022:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c024:	2b00      	cmp	r3, #0
   8c026:	d04b      	beq.n	8c0c0 <__swbuf_r+0xa8>
   8c028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c02c:	69a3      	ldr	r3, [r4, #24]
   8c02e:	b291      	uxth	r1, r2
   8c030:	0708      	lsls	r0, r1, #28
   8c032:	60a3      	str	r3, [r4, #8]
   8c034:	d539      	bpl.n	8c0aa <__swbuf_r+0x92>
   8c036:	6923      	ldr	r3, [r4, #16]
   8c038:	2b00      	cmp	r3, #0
   8c03a:	d036      	beq.n	8c0aa <__swbuf_r+0x92>
   8c03c:	b2ed      	uxtb	r5, r5
   8c03e:	0489      	lsls	r1, r1, #18
   8c040:	462f      	mov	r7, r5
   8c042:	d515      	bpl.n	8c070 <__swbuf_r+0x58>
   8c044:	6822      	ldr	r2, [r4, #0]
   8c046:	6961      	ldr	r1, [r4, #20]
   8c048:	1ad3      	subs	r3, r2, r3
   8c04a:	428b      	cmp	r3, r1
   8c04c:	da1c      	bge.n	8c088 <__swbuf_r+0x70>
   8c04e:	3301      	adds	r3, #1
   8c050:	68a1      	ldr	r1, [r4, #8]
   8c052:	1c50      	adds	r0, r2, #1
   8c054:	3901      	subs	r1, #1
   8c056:	60a1      	str	r1, [r4, #8]
   8c058:	6020      	str	r0, [r4, #0]
   8c05a:	7015      	strb	r5, [r2, #0]
   8c05c:	6962      	ldr	r2, [r4, #20]
   8c05e:	429a      	cmp	r2, r3
   8c060:	d01a      	beq.n	8c098 <__swbuf_r+0x80>
   8c062:	89a3      	ldrh	r3, [r4, #12]
   8c064:	07db      	lsls	r3, r3, #31
   8c066:	d501      	bpl.n	8c06c <__swbuf_r+0x54>
   8c068:	2d0a      	cmp	r5, #10
   8c06a:	d015      	beq.n	8c098 <__swbuf_r+0x80>
   8c06c:	4638      	mov	r0, r7
   8c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c070:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8c072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c076:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8c07a:	81a2      	strh	r2, [r4, #12]
   8c07c:	6822      	ldr	r2, [r4, #0]
   8c07e:	6661      	str	r1, [r4, #100]	; 0x64
   8c080:	6961      	ldr	r1, [r4, #20]
   8c082:	1ad3      	subs	r3, r2, r3
   8c084:	428b      	cmp	r3, r1
   8c086:	dbe2      	blt.n	8c04e <__swbuf_r+0x36>
   8c088:	4621      	mov	r1, r4
   8c08a:	4630      	mov	r0, r6
   8c08c:	f7fe fa26 	bl	8a4dc <_fflush_r>
   8c090:	b940      	cbnz	r0, 8c0a4 <__swbuf_r+0x8c>
   8c092:	2301      	movs	r3, #1
   8c094:	6822      	ldr	r2, [r4, #0]
   8c096:	e7db      	b.n	8c050 <__swbuf_r+0x38>
   8c098:	4621      	mov	r1, r4
   8c09a:	4630      	mov	r0, r6
   8c09c:	f7fe fa1e 	bl	8a4dc <_fflush_r>
   8c0a0:	2800      	cmp	r0, #0
   8c0a2:	d0e3      	beq.n	8c06c <__swbuf_r+0x54>
   8c0a4:	f04f 37ff 	mov.w	r7, #4294967295
   8c0a8:	e7e0      	b.n	8c06c <__swbuf_r+0x54>
   8c0aa:	4621      	mov	r1, r4
   8c0ac:	4630      	mov	r0, r6
   8c0ae:	f7fd f94d 	bl	8934c <__swsetup_r>
   8c0b2:	2800      	cmp	r0, #0
   8c0b4:	d1f6      	bne.n	8c0a4 <__swbuf_r+0x8c>
   8c0b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c0ba:	6923      	ldr	r3, [r4, #16]
   8c0bc:	b291      	uxth	r1, r2
   8c0be:	e7bd      	b.n	8c03c <__swbuf_r+0x24>
   8c0c0:	f7fe fa64 	bl	8a58c <__sinit>
   8c0c4:	e7b0      	b.n	8c028 <__swbuf_r+0x10>
   8c0c6:	bf00      	nop

0008c0c8 <_wcrtomb_r>:
   8c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c0ca:	4606      	mov	r6, r0
   8c0cc:	b085      	sub	sp, #20
   8c0ce:	461f      	mov	r7, r3
   8c0d0:	b189      	cbz	r1, 8c0f6 <_wcrtomb_r+0x2e>
   8c0d2:	4c10      	ldr	r4, [pc, #64]	; (8c114 <_wcrtomb_r+0x4c>)
   8c0d4:	4d10      	ldr	r5, [pc, #64]	; (8c118 <_wcrtomb_r+0x50>)
   8c0d6:	6824      	ldr	r4, [r4, #0]
   8c0d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8c0da:	2c00      	cmp	r4, #0
   8c0dc:	bf08      	it	eq
   8c0de:	462c      	moveq	r4, r5
   8c0e0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c0e4:	47a0      	blx	r4
   8c0e6:	1c43      	adds	r3, r0, #1
   8c0e8:	d103      	bne.n	8c0f2 <_wcrtomb_r+0x2a>
   8c0ea:	2200      	movs	r2, #0
   8c0ec:	238a      	movs	r3, #138	; 0x8a
   8c0ee:	603a      	str	r2, [r7, #0]
   8c0f0:	6033      	str	r3, [r6, #0]
   8c0f2:	b005      	add	sp, #20
   8c0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8c0f6:	460c      	mov	r4, r1
   8c0f8:	4a06      	ldr	r2, [pc, #24]	; (8c114 <_wcrtomb_r+0x4c>)
   8c0fa:	4d07      	ldr	r5, [pc, #28]	; (8c118 <_wcrtomb_r+0x50>)
   8c0fc:	6811      	ldr	r1, [r2, #0]
   8c0fe:	4622      	mov	r2, r4
   8c100:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8c102:	a901      	add	r1, sp, #4
   8c104:	2c00      	cmp	r4, #0
   8c106:	bf08      	it	eq
   8c108:	462c      	moveq	r4, r5
   8c10a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c10e:	47a0      	blx	r4
   8c110:	e7e9      	b.n	8c0e6 <_wcrtomb_r+0x1e>
   8c112:	bf00      	nop
   8c114:	20000aac 	.word	0x20000aac
   8c118:	20000edc 	.word	0x20000edc

0008c11c <__ascii_wctomb>:
   8c11c:	b119      	cbz	r1, 8c126 <__ascii_wctomb+0xa>
   8c11e:	2aff      	cmp	r2, #255	; 0xff
   8c120:	d803      	bhi.n	8c12a <__ascii_wctomb+0xe>
   8c122:	700a      	strb	r2, [r1, #0]
   8c124:	2101      	movs	r1, #1
   8c126:	4608      	mov	r0, r1
   8c128:	4770      	bx	lr
   8c12a:	238a      	movs	r3, #138	; 0x8a
   8c12c:	f04f 31ff 	mov.w	r1, #4294967295
   8c130:	6003      	str	r3, [r0, #0]
   8c132:	e7f8      	b.n	8c126 <__ascii_wctomb+0xa>

0008c134 <_write_r>:
   8c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c136:	460e      	mov	r6, r1
   8c138:	2500      	movs	r5, #0
   8c13a:	4c08      	ldr	r4, [pc, #32]	; (8c15c <_write_r+0x28>)
   8c13c:	4611      	mov	r1, r2
   8c13e:	4607      	mov	r7, r0
   8c140:	461a      	mov	r2, r3
   8c142:	4630      	mov	r0, r6
   8c144:	6025      	str	r5, [r4, #0]
   8c146:	f7f8 fa79 	bl	8463c <_write>
   8c14a:	1c43      	adds	r3, r0, #1
   8c14c:	d000      	beq.n	8c150 <_write_r+0x1c>
   8c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c150:	6823      	ldr	r3, [r4, #0]
   8c152:	2b00      	cmp	r3, #0
   8c154:	d0fb      	beq.n	8c14e <_write_r+0x1a>
   8c156:	603b      	str	r3, [r7, #0]
   8c158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c15a:	bf00      	nop
   8c15c:	200027e8 	.word	0x200027e8

0008c160 <__register_exitproc>:
   8c160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8c164:	4d2c      	ldr	r5, [pc, #176]	; (8c218 <__register_exitproc+0xb8>)
   8c166:	4606      	mov	r6, r0
   8c168:	6828      	ldr	r0, [r5, #0]
   8c16a:	4698      	mov	r8, r3
   8c16c:	460f      	mov	r7, r1
   8c16e:	4691      	mov	r9, r2
   8c170:	f7fe fdda 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8c174:	4b29      	ldr	r3, [pc, #164]	; (8c21c <__register_exitproc+0xbc>)
   8c176:	681c      	ldr	r4, [r3, #0]
   8c178:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8c17c:	2b00      	cmp	r3, #0
   8c17e:	d03e      	beq.n	8c1fe <__register_exitproc+0x9e>
   8c180:	685a      	ldr	r2, [r3, #4]
   8c182:	2a1f      	cmp	r2, #31
   8c184:	dc1c      	bgt.n	8c1c0 <__register_exitproc+0x60>
   8c186:	f102 0e01 	add.w	lr, r2, #1
   8c18a:	b176      	cbz	r6, 8c1aa <__register_exitproc+0x4a>
   8c18c:	2101      	movs	r1, #1
   8c18e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8c192:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8c196:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8c19a:	4091      	lsls	r1, r2
   8c19c:	4308      	orrs	r0, r1
   8c19e:	2e02      	cmp	r6, #2
   8c1a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8c1a4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8c1a8:	d023      	beq.n	8c1f2 <__register_exitproc+0x92>
   8c1aa:	3202      	adds	r2, #2
   8c1ac:	f8c3 e004 	str.w	lr, [r3, #4]
   8c1b0:	6828      	ldr	r0, [r5, #0]
   8c1b2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8c1b6:	f7fe fdb9 	bl	8ad2c <__retarget_lock_release_recursive>
   8c1ba:	2000      	movs	r0, #0
   8c1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c1c0:	4b17      	ldr	r3, [pc, #92]	; (8c220 <__register_exitproc+0xc0>)
   8c1c2:	b30b      	cbz	r3, 8c208 <__register_exitproc+0xa8>
   8c1c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8c1c8:	f7fe fe2a 	bl	8ae20 <malloc>
   8c1cc:	4603      	mov	r3, r0
   8c1ce:	b1d8      	cbz	r0, 8c208 <__register_exitproc+0xa8>
   8c1d0:	2000      	movs	r0, #0
   8c1d2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8c1d6:	f04f 0e01 	mov.w	lr, #1
   8c1da:	6058      	str	r0, [r3, #4]
   8c1dc:	6019      	str	r1, [r3, #0]
   8c1de:	4602      	mov	r2, r0
   8c1e0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8c1e4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8c1e8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8c1ec:	2e00      	cmp	r6, #0
   8c1ee:	d0dc      	beq.n	8c1aa <__register_exitproc+0x4a>
   8c1f0:	e7cc      	b.n	8c18c <__register_exitproc+0x2c>
   8c1f2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8c1f6:	4301      	orrs	r1, r0
   8c1f8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8c1fc:	e7d5      	b.n	8c1aa <__register_exitproc+0x4a>
   8c1fe:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8c202:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8c206:	e7bb      	b.n	8c180 <__register_exitproc+0x20>
   8c208:	6828      	ldr	r0, [r5, #0]
   8c20a:	f7fe fd8f 	bl	8ad2c <__retarget_lock_release_recursive>
   8c20e:	f04f 30ff 	mov.w	r0, #4294967295
   8c212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c216:	bf00      	nop
   8c218:	20000ed8 	.word	0x20000ed8
   8c21c:	0008ce58 	.word	0x0008ce58
   8c220:	0008ae21 	.word	0x0008ae21

0008c224 <_calloc_r>:
   8c224:	b510      	push	{r4, lr}
   8c226:	fb02 f101 	mul.w	r1, r2, r1
   8c22a:	f7fe fe01 	bl	8ae30 <_malloc_r>
   8c22e:	4604      	mov	r4, r0
   8c230:	b1d8      	cbz	r0, 8c26a <_calloc_r+0x46>
   8c232:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c236:	f022 0203 	bic.w	r2, r2, #3
   8c23a:	3a04      	subs	r2, #4
   8c23c:	2a24      	cmp	r2, #36	; 0x24
   8c23e:	d818      	bhi.n	8c272 <_calloc_r+0x4e>
   8c240:	2a13      	cmp	r2, #19
   8c242:	d914      	bls.n	8c26e <_calloc_r+0x4a>
   8c244:	2300      	movs	r3, #0
   8c246:	2a1b      	cmp	r2, #27
   8c248:	6003      	str	r3, [r0, #0]
   8c24a:	6043      	str	r3, [r0, #4]
   8c24c:	d916      	bls.n	8c27c <_calloc_r+0x58>
   8c24e:	2a24      	cmp	r2, #36	; 0x24
   8c250:	6083      	str	r3, [r0, #8]
   8c252:	60c3      	str	r3, [r0, #12]
   8c254:	bf11      	iteee	ne
   8c256:	f100 0210 	addne.w	r2, r0, #16
   8c25a:	6103      	streq	r3, [r0, #16]
   8c25c:	6143      	streq	r3, [r0, #20]
   8c25e:	f100 0218 	addeq.w	r2, r0, #24
   8c262:	2300      	movs	r3, #0
   8c264:	6013      	str	r3, [r2, #0]
   8c266:	6053      	str	r3, [r2, #4]
   8c268:	6093      	str	r3, [r2, #8]
   8c26a:	4620      	mov	r0, r4
   8c26c:	bd10      	pop	{r4, pc}
   8c26e:	4602      	mov	r2, r0
   8c270:	e7f7      	b.n	8c262 <_calloc_r+0x3e>
   8c272:	2100      	movs	r1, #0
   8c274:	f7fa fd7e 	bl	86d74 <memset>
   8c278:	4620      	mov	r0, r4
   8c27a:	bd10      	pop	{r4, pc}
   8c27c:	f100 0208 	add.w	r2, r0, #8
   8c280:	e7ef      	b.n	8c262 <_calloc_r+0x3e>
   8c282:	bf00      	nop

0008c284 <_close_r>:
   8c284:	b538      	push	{r3, r4, r5, lr}
   8c286:	2300      	movs	r3, #0
   8c288:	4c06      	ldr	r4, [pc, #24]	; (8c2a4 <_close_r+0x20>)
   8c28a:	4605      	mov	r5, r0
   8c28c:	4608      	mov	r0, r1
   8c28e:	6023      	str	r3, [r4, #0]
   8c290:	f7fa f996 	bl	865c0 <_close>
   8c294:	1c43      	adds	r3, r0, #1
   8c296:	d000      	beq.n	8c29a <_close_r+0x16>
   8c298:	bd38      	pop	{r3, r4, r5, pc}
   8c29a:	6823      	ldr	r3, [r4, #0]
   8c29c:	2b00      	cmp	r3, #0
   8c29e:	d0fb      	beq.n	8c298 <_close_r+0x14>
   8c2a0:	602b      	str	r3, [r5, #0]
   8c2a2:	bd38      	pop	{r3, r4, r5, pc}
   8c2a4:	200027e8 	.word	0x200027e8

0008c2a8 <_fclose_r>:
   8c2a8:	b570      	push	{r4, r5, r6, lr}
   8c2aa:	b159      	cbz	r1, 8c2c4 <_fclose_r+0x1c>
   8c2ac:	4605      	mov	r5, r0
   8c2ae:	460c      	mov	r4, r1
   8c2b0:	b110      	cbz	r0, 8c2b8 <_fclose_r+0x10>
   8c2b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c2b4:	2b00      	cmp	r3, #0
   8c2b6:	d03c      	beq.n	8c332 <_fclose_r+0x8a>
   8c2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c2ba:	07d8      	lsls	r0, r3, #31
   8c2bc:	d505      	bpl.n	8c2ca <_fclose_r+0x22>
   8c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c2c2:	b92b      	cbnz	r3, 8c2d0 <_fclose_r+0x28>
   8c2c4:	2600      	movs	r6, #0
   8c2c6:	4630      	mov	r0, r6
   8c2c8:	bd70      	pop	{r4, r5, r6, pc}
   8c2ca:	89a3      	ldrh	r3, [r4, #12]
   8c2cc:	0599      	lsls	r1, r3, #22
   8c2ce:	d53c      	bpl.n	8c34a <_fclose_r+0xa2>
   8c2d0:	4621      	mov	r1, r4
   8c2d2:	4628      	mov	r0, r5
   8c2d4:	f7fe f866 	bl	8a3a4 <__sflush_r>
   8c2d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c2da:	4606      	mov	r6, r0
   8c2dc:	b133      	cbz	r3, 8c2ec <_fclose_r+0x44>
   8c2de:	69e1      	ldr	r1, [r4, #28]
   8c2e0:	4628      	mov	r0, r5
   8c2e2:	4798      	blx	r3
   8c2e4:	2800      	cmp	r0, #0
   8c2e6:	bfb8      	it	lt
   8c2e8:	f04f 36ff 	movlt.w	r6, #4294967295
   8c2ec:	89a3      	ldrh	r3, [r4, #12]
   8c2ee:	061a      	lsls	r2, r3, #24
   8c2f0:	d422      	bmi.n	8c338 <_fclose_r+0x90>
   8c2f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c2f4:	b141      	cbz	r1, 8c308 <_fclose_r+0x60>
   8c2f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c2fa:	4299      	cmp	r1, r3
   8c2fc:	d002      	beq.n	8c304 <_fclose_r+0x5c>
   8c2fe:	4628      	mov	r0, r5
   8c300:	f7fe fa6a 	bl	8a7d8 <_free_r>
   8c304:	2300      	movs	r3, #0
   8c306:	6323      	str	r3, [r4, #48]	; 0x30
   8c308:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c30a:	b121      	cbz	r1, 8c316 <_fclose_r+0x6e>
   8c30c:	4628      	mov	r0, r5
   8c30e:	f7fe fa63 	bl	8a7d8 <_free_r>
   8c312:	2300      	movs	r3, #0
   8c314:	6463      	str	r3, [r4, #68]	; 0x44
   8c316:	f7fe f969 	bl	8a5ec <__sfp_lock_acquire>
   8c31a:	2200      	movs	r2, #0
   8c31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c31e:	81a2      	strh	r2, [r4, #12]
   8c320:	07db      	lsls	r3, r3, #31
   8c322:	d50e      	bpl.n	8c342 <_fclose_r+0x9a>
   8c324:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c326:	f7fe fcfd 	bl	8ad24 <__retarget_lock_close_recursive>
   8c32a:	f7fe f965 	bl	8a5f8 <__sfp_lock_release>
   8c32e:	4630      	mov	r0, r6
   8c330:	bd70      	pop	{r4, r5, r6, pc}
   8c332:	f7fe f92b 	bl	8a58c <__sinit>
   8c336:	e7bf      	b.n	8c2b8 <_fclose_r+0x10>
   8c338:	6921      	ldr	r1, [r4, #16]
   8c33a:	4628      	mov	r0, r5
   8c33c:	f7fe fa4c 	bl	8a7d8 <_free_r>
   8c340:	e7d7      	b.n	8c2f2 <_fclose_r+0x4a>
   8c342:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c344:	f7fe fcf2 	bl	8ad2c <__retarget_lock_release_recursive>
   8c348:	e7ec      	b.n	8c324 <_fclose_r+0x7c>
   8c34a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c34c:	f7fe fcec 	bl	8ad28 <__retarget_lock_acquire_recursive>
   8c350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c354:	2b00      	cmp	r3, #0
   8c356:	d1bb      	bne.n	8c2d0 <_fclose_r+0x28>
   8c358:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c35a:	f016 0601 	ands.w	r6, r6, #1
   8c35e:	d1b1      	bne.n	8c2c4 <_fclose_r+0x1c>
   8c360:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c362:	f7fe fce3 	bl	8ad2c <__retarget_lock_release_recursive>
   8c366:	4630      	mov	r0, r6
   8c368:	bd70      	pop	{r4, r5, r6, pc}
   8c36a:	bf00      	nop

0008c36c <_fstat_r>:
   8c36c:	b570      	push	{r4, r5, r6, lr}
   8c36e:	460d      	mov	r5, r1
   8c370:	2300      	movs	r3, #0
   8c372:	4c07      	ldr	r4, [pc, #28]	; (8c390 <_fstat_r+0x24>)
   8c374:	4606      	mov	r6, r0
   8c376:	4611      	mov	r1, r2
   8c378:	4628      	mov	r0, r5
   8c37a:	6023      	str	r3, [r4, #0]
   8c37c:	f7fa f923 	bl	865c6 <_fstat>
   8c380:	1c43      	adds	r3, r0, #1
   8c382:	d000      	beq.n	8c386 <_fstat_r+0x1a>
   8c384:	bd70      	pop	{r4, r5, r6, pc}
   8c386:	6823      	ldr	r3, [r4, #0]
   8c388:	2b00      	cmp	r3, #0
   8c38a:	d0fb      	beq.n	8c384 <_fstat_r+0x18>
   8c38c:	6033      	str	r3, [r6, #0]
   8c38e:	bd70      	pop	{r4, r5, r6, pc}
   8c390:	200027e8 	.word	0x200027e8

0008c394 <_isatty_r>:
   8c394:	b538      	push	{r3, r4, r5, lr}
   8c396:	2300      	movs	r3, #0
   8c398:	4c06      	ldr	r4, [pc, #24]	; (8c3b4 <_isatty_r+0x20>)
   8c39a:	4605      	mov	r5, r0
   8c39c:	4608      	mov	r0, r1
   8c39e:	6023      	str	r3, [r4, #0]
   8c3a0:	f7fa f916 	bl	865d0 <_isatty>
   8c3a4:	1c43      	adds	r3, r0, #1
   8c3a6:	d000      	beq.n	8c3aa <_isatty_r+0x16>
   8c3a8:	bd38      	pop	{r3, r4, r5, pc}
   8c3aa:	6823      	ldr	r3, [r4, #0]
   8c3ac:	2b00      	cmp	r3, #0
   8c3ae:	d0fb      	beq.n	8c3a8 <_isatty_r+0x14>
   8c3b0:	602b      	str	r3, [r5, #0]
   8c3b2:	bd38      	pop	{r3, r4, r5, pc}
   8c3b4:	200027e8 	.word	0x200027e8

0008c3b8 <_lseek_r>:
   8c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c3ba:	460e      	mov	r6, r1
   8c3bc:	2500      	movs	r5, #0
   8c3be:	4c08      	ldr	r4, [pc, #32]	; (8c3e0 <_lseek_r+0x28>)
   8c3c0:	4611      	mov	r1, r2
   8c3c2:	4607      	mov	r7, r0
   8c3c4:	461a      	mov	r2, r3
   8c3c6:	4630      	mov	r0, r6
   8c3c8:	6025      	str	r5, [r4, #0]
   8c3ca:	f7fa f903 	bl	865d4 <_lseek>
   8c3ce:	1c43      	adds	r3, r0, #1
   8c3d0:	d000      	beq.n	8c3d4 <_lseek_r+0x1c>
   8c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c3d4:	6823      	ldr	r3, [r4, #0]
   8c3d6:	2b00      	cmp	r3, #0
   8c3d8:	d0fb      	beq.n	8c3d2 <_lseek_r+0x1a>
   8c3da:	603b      	str	r3, [r7, #0]
   8c3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c3de:	bf00      	nop
   8c3e0:	200027e8 	.word	0x200027e8

0008c3e4 <_read_r>:
   8c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c3e6:	460e      	mov	r6, r1
   8c3e8:	2500      	movs	r5, #0
   8c3ea:	4c08      	ldr	r4, [pc, #32]	; (8c40c <_read_r+0x28>)
   8c3ec:	4611      	mov	r1, r2
   8c3ee:	4607      	mov	r7, r0
   8c3f0:	461a      	mov	r2, r3
   8c3f2:	4630      	mov	r0, r6
   8c3f4:	6025      	str	r5, [r4, #0]
   8c3f6:	f7f8 f903 	bl	84600 <_read>
   8c3fa:	1c43      	adds	r3, r0, #1
   8c3fc:	d000      	beq.n	8c400 <_read_r+0x1c>
   8c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c400:	6823      	ldr	r3, [r4, #0]
   8c402:	2b00      	cmp	r3, #0
   8c404:	d0fb      	beq.n	8c3fe <_read_r+0x1a>
   8c406:	603b      	str	r3, [r7, #0]
   8c408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c40a:	bf00      	nop
   8c40c:	200027e8 	.word	0x200027e8

0008c410 <__aeabi_drsub>:
   8c410:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c414:	e002      	b.n	8c41c <__adddf3>
   8c416:	bf00      	nop

0008c418 <__aeabi_dsub>:
   8c418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c41c <__adddf3>:
   8c41c:	b530      	push	{r4, r5, lr}
   8c41e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c422:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c426:	ea94 0f05 	teq	r4, r5
   8c42a:	bf08      	it	eq
   8c42c:	ea90 0f02 	teqeq	r0, r2
   8c430:	bf1f      	itttt	ne
   8c432:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c436:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c43a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c43e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c442:	f000 80e2 	beq.w	8c60a <__adddf3+0x1ee>
   8c446:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c44a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c44e:	bfb8      	it	lt
   8c450:	426d      	neglt	r5, r5
   8c452:	dd0c      	ble.n	8c46e <__adddf3+0x52>
   8c454:	442c      	add	r4, r5
   8c456:	ea80 0202 	eor.w	r2, r0, r2
   8c45a:	ea81 0303 	eor.w	r3, r1, r3
   8c45e:	ea82 0000 	eor.w	r0, r2, r0
   8c462:	ea83 0101 	eor.w	r1, r3, r1
   8c466:	ea80 0202 	eor.w	r2, r0, r2
   8c46a:	ea81 0303 	eor.w	r3, r1, r3
   8c46e:	2d36      	cmp	r5, #54	; 0x36
   8c470:	bf88      	it	hi
   8c472:	bd30      	pophi	{r4, r5, pc}
   8c474:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c478:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c47c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c480:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c484:	d002      	beq.n	8c48c <__adddf3+0x70>
   8c486:	4240      	negs	r0, r0
   8c488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c48c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c490:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c494:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c498:	d002      	beq.n	8c4a0 <__adddf3+0x84>
   8c49a:	4252      	negs	r2, r2
   8c49c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c4a0:	ea94 0f05 	teq	r4, r5
   8c4a4:	f000 80a7 	beq.w	8c5f6 <__adddf3+0x1da>
   8c4a8:	f1a4 0401 	sub.w	r4, r4, #1
   8c4ac:	f1d5 0e20 	rsbs	lr, r5, #32
   8c4b0:	db0d      	blt.n	8c4ce <__adddf3+0xb2>
   8c4b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c4b6:	fa22 f205 	lsr.w	r2, r2, r5
   8c4ba:	1880      	adds	r0, r0, r2
   8c4bc:	f141 0100 	adc.w	r1, r1, #0
   8c4c0:	fa03 f20e 	lsl.w	r2, r3, lr
   8c4c4:	1880      	adds	r0, r0, r2
   8c4c6:	fa43 f305 	asr.w	r3, r3, r5
   8c4ca:	4159      	adcs	r1, r3
   8c4cc:	e00e      	b.n	8c4ec <__adddf3+0xd0>
   8c4ce:	f1a5 0520 	sub.w	r5, r5, #32
   8c4d2:	f10e 0e20 	add.w	lr, lr, #32
   8c4d6:	2a01      	cmp	r2, #1
   8c4d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c4dc:	bf28      	it	cs
   8c4de:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c4e2:	fa43 f305 	asr.w	r3, r3, r5
   8c4e6:	18c0      	adds	r0, r0, r3
   8c4e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c4ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c4f0:	d507      	bpl.n	8c502 <__adddf3+0xe6>
   8c4f2:	f04f 0e00 	mov.w	lr, #0
   8c4f6:	f1dc 0c00 	rsbs	ip, ip, #0
   8c4fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c4fe:	eb6e 0101 	sbc.w	r1, lr, r1
   8c502:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c506:	d31b      	bcc.n	8c540 <__adddf3+0x124>
   8c508:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c50c:	d30c      	bcc.n	8c528 <__adddf3+0x10c>
   8c50e:	0849      	lsrs	r1, r1, #1
   8c510:	ea5f 0030 	movs.w	r0, r0, rrx
   8c514:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c518:	f104 0401 	add.w	r4, r4, #1
   8c51c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c520:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c524:	f080 809a 	bcs.w	8c65c <__adddf3+0x240>
   8c528:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c52c:	bf08      	it	eq
   8c52e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c532:	f150 0000 	adcs.w	r0, r0, #0
   8c536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c53a:	ea41 0105 	orr.w	r1, r1, r5
   8c53e:	bd30      	pop	{r4, r5, pc}
   8c540:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c544:	4140      	adcs	r0, r0
   8c546:	eb41 0101 	adc.w	r1, r1, r1
   8c54a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c54e:	f1a4 0401 	sub.w	r4, r4, #1
   8c552:	d1e9      	bne.n	8c528 <__adddf3+0x10c>
   8c554:	f091 0f00 	teq	r1, #0
   8c558:	bf04      	itt	eq
   8c55a:	4601      	moveq	r1, r0
   8c55c:	2000      	moveq	r0, #0
   8c55e:	fab1 f381 	clz	r3, r1
   8c562:	bf08      	it	eq
   8c564:	3320      	addeq	r3, #32
   8c566:	f1a3 030b 	sub.w	r3, r3, #11
   8c56a:	f1b3 0220 	subs.w	r2, r3, #32
   8c56e:	da0c      	bge.n	8c58a <__adddf3+0x16e>
   8c570:	320c      	adds	r2, #12
   8c572:	dd08      	ble.n	8c586 <__adddf3+0x16a>
   8c574:	f102 0c14 	add.w	ip, r2, #20
   8c578:	f1c2 020c 	rsb	r2, r2, #12
   8c57c:	fa01 f00c 	lsl.w	r0, r1, ip
   8c580:	fa21 f102 	lsr.w	r1, r1, r2
   8c584:	e00c      	b.n	8c5a0 <__adddf3+0x184>
   8c586:	f102 0214 	add.w	r2, r2, #20
   8c58a:	bfd8      	it	le
   8c58c:	f1c2 0c20 	rsble	ip, r2, #32
   8c590:	fa01 f102 	lsl.w	r1, r1, r2
   8c594:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c598:	bfdc      	itt	le
   8c59a:	ea41 010c 	orrle.w	r1, r1, ip
   8c59e:	4090      	lslle	r0, r2
   8c5a0:	1ae4      	subs	r4, r4, r3
   8c5a2:	bfa2      	ittt	ge
   8c5a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c5a8:	4329      	orrge	r1, r5
   8c5aa:	bd30      	popge	{r4, r5, pc}
   8c5ac:	ea6f 0404 	mvn.w	r4, r4
   8c5b0:	3c1f      	subs	r4, #31
   8c5b2:	da1c      	bge.n	8c5ee <__adddf3+0x1d2>
   8c5b4:	340c      	adds	r4, #12
   8c5b6:	dc0e      	bgt.n	8c5d6 <__adddf3+0x1ba>
   8c5b8:	f104 0414 	add.w	r4, r4, #20
   8c5bc:	f1c4 0220 	rsb	r2, r4, #32
   8c5c0:	fa20 f004 	lsr.w	r0, r0, r4
   8c5c4:	fa01 f302 	lsl.w	r3, r1, r2
   8c5c8:	ea40 0003 	orr.w	r0, r0, r3
   8c5cc:	fa21 f304 	lsr.w	r3, r1, r4
   8c5d0:	ea45 0103 	orr.w	r1, r5, r3
   8c5d4:	bd30      	pop	{r4, r5, pc}
   8c5d6:	f1c4 040c 	rsb	r4, r4, #12
   8c5da:	f1c4 0220 	rsb	r2, r4, #32
   8c5de:	fa20 f002 	lsr.w	r0, r0, r2
   8c5e2:	fa01 f304 	lsl.w	r3, r1, r4
   8c5e6:	ea40 0003 	orr.w	r0, r0, r3
   8c5ea:	4629      	mov	r1, r5
   8c5ec:	bd30      	pop	{r4, r5, pc}
   8c5ee:	fa21 f004 	lsr.w	r0, r1, r4
   8c5f2:	4629      	mov	r1, r5
   8c5f4:	bd30      	pop	{r4, r5, pc}
   8c5f6:	f094 0f00 	teq	r4, #0
   8c5fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c5fe:	bf06      	itte	eq
   8c600:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c604:	3401      	addeq	r4, #1
   8c606:	3d01      	subne	r5, #1
   8c608:	e74e      	b.n	8c4a8 <__adddf3+0x8c>
   8c60a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c60e:	bf18      	it	ne
   8c610:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c614:	d029      	beq.n	8c66a <__adddf3+0x24e>
   8c616:	ea94 0f05 	teq	r4, r5
   8c61a:	bf08      	it	eq
   8c61c:	ea90 0f02 	teqeq	r0, r2
   8c620:	d005      	beq.n	8c62e <__adddf3+0x212>
   8c622:	ea54 0c00 	orrs.w	ip, r4, r0
   8c626:	bf04      	itt	eq
   8c628:	4619      	moveq	r1, r3
   8c62a:	4610      	moveq	r0, r2
   8c62c:	bd30      	pop	{r4, r5, pc}
   8c62e:	ea91 0f03 	teq	r1, r3
   8c632:	bf1e      	ittt	ne
   8c634:	2100      	movne	r1, #0
   8c636:	2000      	movne	r0, #0
   8c638:	bd30      	popne	{r4, r5, pc}
   8c63a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c63e:	d105      	bne.n	8c64c <__adddf3+0x230>
   8c640:	0040      	lsls	r0, r0, #1
   8c642:	4149      	adcs	r1, r1
   8c644:	bf28      	it	cs
   8c646:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c64a:	bd30      	pop	{r4, r5, pc}
   8c64c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c650:	bf3c      	itt	cc
   8c652:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c656:	bd30      	popcc	{r4, r5, pc}
   8c658:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c65c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c660:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c664:	f04f 0000 	mov.w	r0, #0
   8c668:	bd30      	pop	{r4, r5, pc}
   8c66a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c66e:	bf1a      	itte	ne
   8c670:	4619      	movne	r1, r3
   8c672:	4610      	movne	r0, r2
   8c674:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c678:	bf1c      	itt	ne
   8c67a:	460b      	movne	r3, r1
   8c67c:	4602      	movne	r2, r0
   8c67e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c682:	bf06      	itte	eq
   8c684:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c688:	ea91 0f03 	teqeq	r1, r3
   8c68c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c690:	bd30      	pop	{r4, r5, pc}
   8c692:	bf00      	nop

0008c694 <__aeabi_ui2d>:
   8c694:	f090 0f00 	teq	r0, #0
   8c698:	bf04      	itt	eq
   8c69a:	2100      	moveq	r1, #0
   8c69c:	4770      	bxeq	lr
   8c69e:	b530      	push	{r4, r5, lr}
   8c6a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c6a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c6a8:	f04f 0500 	mov.w	r5, #0
   8c6ac:	f04f 0100 	mov.w	r1, #0
   8c6b0:	e750      	b.n	8c554 <__adddf3+0x138>
   8c6b2:	bf00      	nop

0008c6b4 <__aeabi_i2d>:
   8c6b4:	f090 0f00 	teq	r0, #0
   8c6b8:	bf04      	itt	eq
   8c6ba:	2100      	moveq	r1, #0
   8c6bc:	4770      	bxeq	lr
   8c6be:	b530      	push	{r4, r5, lr}
   8c6c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c6c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c6c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c6cc:	bf48      	it	mi
   8c6ce:	4240      	negmi	r0, r0
   8c6d0:	f04f 0100 	mov.w	r1, #0
   8c6d4:	e73e      	b.n	8c554 <__adddf3+0x138>
   8c6d6:	bf00      	nop

0008c6d8 <__aeabi_f2d>:
   8c6d8:	0042      	lsls	r2, r0, #1
   8c6da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c6de:	ea4f 0131 	mov.w	r1, r1, rrx
   8c6e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c6e6:	bf1f      	itttt	ne
   8c6e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c6ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c6f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c6f4:	4770      	bxne	lr
   8c6f6:	f092 0f00 	teq	r2, #0
   8c6fa:	bf14      	ite	ne
   8c6fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c700:	4770      	bxeq	lr
   8c702:	b530      	push	{r4, r5, lr}
   8c704:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c70c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c710:	e720      	b.n	8c554 <__adddf3+0x138>
   8c712:	bf00      	nop

0008c714 <__aeabi_ul2d>:
   8c714:	ea50 0201 	orrs.w	r2, r0, r1
   8c718:	bf08      	it	eq
   8c71a:	4770      	bxeq	lr
   8c71c:	b530      	push	{r4, r5, lr}
   8c71e:	f04f 0500 	mov.w	r5, #0
   8c722:	e00a      	b.n	8c73a <__aeabi_l2d+0x16>

0008c724 <__aeabi_l2d>:
   8c724:	ea50 0201 	orrs.w	r2, r0, r1
   8c728:	bf08      	it	eq
   8c72a:	4770      	bxeq	lr
   8c72c:	b530      	push	{r4, r5, lr}
   8c72e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c732:	d502      	bpl.n	8c73a <__aeabi_l2d+0x16>
   8c734:	4240      	negs	r0, r0
   8c736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c73a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c73e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c742:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c746:	f43f aedc 	beq.w	8c502 <__adddf3+0xe6>
   8c74a:	f04f 0203 	mov.w	r2, #3
   8c74e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c752:	bf18      	it	ne
   8c754:	3203      	addne	r2, #3
   8c756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c75a:	bf18      	it	ne
   8c75c:	3203      	addne	r2, #3
   8c75e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c762:	f1c2 0320 	rsb	r3, r2, #32
   8c766:	fa00 fc03 	lsl.w	ip, r0, r3
   8c76a:	fa20 f002 	lsr.w	r0, r0, r2
   8c76e:	fa01 fe03 	lsl.w	lr, r1, r3
   8c772:	ea40 000e 	orr.w	r0, r0, lr
   8c776:	fa21 f102 	lsr.w	r1, r1, r2
   8c77a:	4414      	add	r4, r2
   8c77c:	e6c1      	b.n	8c502 <__adddf3+0xe6>
   8c77e:	bf00      	nop

0008c780 <__aeabi_dmul>:
   8c780:	b570      	push	{r4, r5, r6, lr}
   8c782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c78a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c78e:	bf1d      	ittte	ne
   8c790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c794:	ea94 0f0c 	teqne	r4, ip
   8c798:	ea95 0f0c 	teqne	r5, ip
   8c79c:	f000 f8de 	bleq	8c95c <__aeabi_dmul+0x1dc>
   8c7a0:	442c      	add	r4, r5
   8c7a2:	ea81 0603 	eor.w	r6, r1, r3
   8c7a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c7aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c7ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c7b2:	bf18      	it	ne
   8c7b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c7b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c7c0:	d038      	beq.n	8c834 <__aeabi_dmul+0xb4>
   8c7c2:	fba0 ce02 	umull	ip, lr, r0, r2
   8c7c6:	f04f 0500 	mov.w	r5, #0
   8c7ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c7ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c7d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c7d6:	f04f 0600 	mov.w	r6, #0
   8c7da:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c7de:	f09c 0f00 	teq	ip, #0
   8c7e2:	bf18      	it	ne
   8c7e4:	f04e 0e01 	orrne.w	lr, lr, #1
   8c7e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c7ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c7f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c7f4:	d204      	bcs.n	8c800 <__aeabi_dmul+0x80>
   8c7f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c7fa:	416d      	adcs	r5, r5
   8c7fc:	eb46 0606 	adc.w	r6, r6, r6
   8c800:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c804:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c808:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c80c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c810:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c814:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c818:	bf88      	it	hi
   8c81a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c81e:	d81e      	bhi.n	8c85e <__aeabi_dmul+0xde>
   8c820:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c824:	bf08      	it	eq
   8c826:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c82a:	f150 0000 	adcs.w	r0, r0, #0
   8c82e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c832:	bd70      	pop	{r4, r5, r6, pc}
   8c834:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c838:	ea46 0101 	orr.w	r1, r6, r1
   8c83c:	ea40 0002 	orr.w	r0, r0, r2
   8c840:	ea81 0103 	eor.w	r1, r1, r3
   8c844:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c848:	bfc2      	ittt	gt
   8c84a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c84e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c852:	bd70      	popgt	{r4, r5, r6, pc}
   8c854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c858:	f04f 0e00 	mov.w	lr, #0
   8c85c:	3c01      	subs	r4, #1
   8c85e:	f300 80ab 	bgt.w	8c9b8 <__aeabi_dmul+0x238>
   8c862:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c866:	bfde      	ittt	le
   8c868:	2000      	movle	r0, #0
   8c86a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c86e:	bd70      	pople	{r4, r5, r6, pc}
   8c870:	f1c4 0400 	rsb	r4, r4, #0
   8c874:	3c20      	subs	r4, #32
   8c876:	da35      	bge.n	8c8e4 <__aeabi_dmul+0x164>
   8c878:	340c      	adds	r4, #12
   8c87a:	dc1b      	bgt.n	8c8b4 <__aeabi_dmul+0x134>
   8c87c:	f104 0414 	add.w	r4, r4, #20
   8c880:	f1c4 0520 	rsb	r5, r4, #32
   8c884:	fa00 f305 	lsl.w	r3, r0, r5
   8c888:	fa20 f004 	lsr.w	r0, r0, r4
   8c88c:	fa01 f205 	lsl.w	r2, r1, r5
   8c890:	ea40 0002 	orr.w	r0, r0, r2
   8c894:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c89c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c8a0:	fa21 f604 	lsr.w	r6, r1, r4
   8c8a4:	eb42 0106 	adc.w	r1, r2, r6
   8c8a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c8ac:	bf08      	it	eq
   8c8ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c8b2:	bd70      	pop	{r4, r5, r6, pc}
   8c8b4:	f1c4 040c 	rsb	r4, r4, #12
   8c8b8:	f1c4 0520 	rsb	r5, r4, #32
   8c8bc:	fa00 f304 	lsl.w	r3, r0, r4
   8c8c0:	fa20 f005 	lsr.w	r0, r0, r5
   8c8c4:	fa01 f204 	lsl.w	r2, r1, r4
   8c8c8:	ea40 0002 	orr.w	r0, r0, r2
   8c8cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c8d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c8d4:	f141 0100 	adc.w	r1, r1, #0
   8c8d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c8dc:	bf08      	it	eq
   8c8de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c8e2:	bd70      	pop	{r4, r5, r6, pc}
   8c8e4:	f1c4 0520 	rsb	r5, r4, #32
   8c8e8:	fa00 f205 	lsl.w	r2, r0, r5
   8c8ec:	ea4e 0e02 	orr.w	lr, lr, r2
   8c8f0:	fa20 f304 	lsr.w	r3, r0, r4
   8c8f4:	fa01 f205 	lsl.w	r2, r1, r5
   8c8f8:	ea43 0302 	orr.w	r3, r3, r2
   8c8fc:	fa21 f004 	lsr.w	r0, r1, r4
   8c900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c904:	fa21 f204 	lsr.w	r2, r1, r4
   8c908:	ea20 0002 	bic.w	r0, r0, r2
   8c90c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c914:	bf08      	it	eq
   8c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c91a:	bd70      	pop	{r4, r5, r6, pc}
   8c91c:	f094 0f00 	teq	r4, #0
   8c920:	d10f      	bne.n	8c942 <__aeabi_dmul+0x1c2>
   8c922:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c926:	0040      	lsls	r0, r0, #1
   8c928:	eb41 0101 	adc.w	r1, r1, r1
   8c92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c930:	bf08      	it	eq
   8c932:	3c01      	subeq	r4, #1
   8c934:	d0f7      	beq.n	8c926 <__aeabi_dmul+0x1a6>
   8c936:	ea41 0106 	orr.w	r1, r1, r6
   8c93a:	f095 0f00 	teq	r5, #0
   8c93e:	bf18      	it	ne
   8c940:	4770      	bxne	lr
   8c942:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c946:	0052      	lsls	r2, r2, #1
   8c948:	eb43 0303 	adc.w	r3, r3, r3
   8c94c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c950:	bf08      	it	eq
   8c952:	3d01      	subeq	r5, #1
   8c954:	d0f7      	beq.n	8c946 <__aeabi_dmul+0x1c6>
   8c956:	ea43 0306 	orr.w	r3, r3, r6
   8c95a:	4770      	bx	lr
   8c95c:	ea94 0f0c 	teq	r4, ip
   8c960:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c964:	bf18      	it	ne
   8c966:	ea95 0f0c 	teqne	r5, ip
   8c96a:	d00c      	beq.n	8c986 <__aeabi_dmul+0x206>
   8c96c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c970:	bf18      	it	ne
   8c972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c976:	d1d1      	bne.n	8c91c <__aeabi_dmul+0x19c>
   8c978:	ea81 0103 	eor.w	r1, r1, r3
   8c97c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c980:	f04f 0000 	mov.w	r0, #0
   8c984:	bd70      	pop	{r4, r5, r6, pc}
   8c986:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c98a:	bf06      	itte	eq
   8c98c:	4610      	moveq	r0, r2
   8c98e:	4619      	moveq	r1, r3
   8c990:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c994:	d019      	beq.n	8c9ca <__aeabi_dmul+0x24a>
   8c996:	ea94 0f0c 	teq	r4, ip
   8c99a:	d102      	bne.n	8c9a2 <__aeabi_dmul+0x222>
   8c99c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c9a0:	d113      	bne.n	8c9ca <__aeabi_dmul+0x24a>
   8c9a2:	ea95 0f0c 	teq	r5, ip
   8c9a6:	d105      	bne.n	8c9b4 <__aeabi_dmul+0x234>
   8c9a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c9ac:	bf1c      	itt	ne
   8c9ae:	4610      	movne	r0, r2
   8c9b0:	4619      	movne	r1, r3
   8c9b2:	d10a      	bne.n	8c9ca <__aeabi_dmul+0x24a>
   8c9b4:	ea81 0103 	eor.w	r1, r1, r3
   8c9b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c9bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c9c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c9c4:	f04f 0000 	mov.w	r0, #0
   8c9c8:	bd70      	pop	{r4, r5, r6, pc}
   8c9ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c9ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c9d2:	bd70      	pop	{r4, r5, r6, pc}

0008c9d4 <__aeabi_ddiv>:
   8c9d4:	b570      	push	{r4, r5, r6, lr}
   8c9d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c9da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c9de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c9e2:	bf1d      	ittte	ne
   8c9e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c9e8:	ea94 0f0c 	teqne	r4, ip
   8c9ec:	ea95 0f0c 	teqne	r5, ip
   8c9f0:	f000 f8a7 	bleq	8cb42 <__aeabi_ddiv+0x16e>
   8c9f4:	eba4 0405 	sub.w	r4, r4, r5
   8c9f8:	ea81 0e03 	eor.w	lr, r1, r3
   8c9fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ca00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ca04:	f000 8088 	beq.w	8cb18 <__aeabi_ddiv+0x144>
   8ca08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8ca0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8ca10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8ca14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8ca18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8ca1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8ca20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8ca24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8ca28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8ca2c:	429d      	cmp	r5, r3
   8ca2e:	bf08      	it	eq
   8ca30:	4296      	cmpeq	r6, r2
   8ca32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8ca36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8ca3a:	d202      	bcs.n	8ca42 <__aeabi_ddiv+0x6e>
   8ca3c:	085b      	lsrs	r3, r3, #1
   8ca3e:	ea4f 0232 	mov.w	r2, r2, rrx
   8ca42:	1ab6      	subs	r6, r6, r2
   8ca44:	eb65 0503 	sbc.w	r5, r5, r3
   8ca48:	085b      	lsrs	r3, r3, #1
   8ca4a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ca4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8ca52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8ca56:	ebb6 0e02 	subs.w	lr, r6, r2
   8ca5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ca5e:	bf22      	ittt	cs
   8ca60:	1ab6      	subcs	r6, r6, r2
   8ca62:	4675      	movcs	r5, lr
   8ca64:	ea40 000c 	orrcs.w	r0, r0, ip
   8ca68:	085b      	lsrs	r3, r3, #1
   8ca6a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ca6e:	ebb6 0e02 	subs.w	lr, r6, r2
   8ca72:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ca76:	bf22      	ittt	cs
   8ca78:	1ab6      	subcs	r6, r6, r2
   8ca7a:	4675      	movcs	r5, lr
   8ca7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8ca80:	085b      	lsrs	r3, r3, #1
   8ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   8ca86:	ebb6 0e02 	subs.w	lr, r6, r2
   8ca8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ca8e:	bf22      	ittt	cs
   8ca90:	1ab6      	subcs	r6, r6, r2
   8ca92:	4675      	movcs	r5, lr
   8ca94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8ca98:	085b      	lsrs	r3, r3, #1
   8ca9a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ca9e:	ebb6 0e02 	subs.w	lr, r6, r2
   8caa2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8caa6:	bf22      	ittt	cs
   8caa8:	1ab6      	subcs	r6, r6, r2
   8caaa:	4675      	movcs	r5, lr
   8caac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8cab0:	ea55 0e06 	orrs.w	lr, r5, r6
   8cab4:	d018      	beq.n	8cae8 <__aeabi_ddiv+0x114>
   8cab6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8caba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8cabe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8cac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8cac6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8caca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8cace:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8cad2:	d1c0      	bne.n	8ca56 <__aeabi_ddiv+0x82>
   8cad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cad8:	d10b      	bne.n	8caf2 <__aeabi_ddiv+0x11e>
   8cada:	ea41 0100 	orr.w	r1, r1, r0
   8cade:	f04f 0000 	mov.w	r0, #0
   8cae2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8cae6:	e7b6      	b.n	8ca56 <__aeabi_ddiv+0x82>
   8cae8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8caec:	bf04      	itt	eq
   8caee:	4301      	orreq	r1, r0
   8caf0:	2000      	moveq	r0, #0
   8caf2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8caf6:	bf88      	it	hi
   8caf8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cafc:	f63f aeaf 	bhi.w	8c85e <__aeabi_dmul+0xde>
   8cb00:	ebb5 0c03 	subs.w	ip, r5, r3
   8cb04:	bf04      	itt	eq
   8cb06:	ebb6 0c02 	subseq.w	ip, r6, r2
   8cb0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cb0e:	f150 0000 	adcs.w	r0, r0, #0
   8cb12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cb16:	bd70      	pop	{r4, r5, r6, pc}
   8cb18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8cb1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8cb20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8cb24:	bfc2      	ittt	gt
   8cb26:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cb2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cb2e:	bd70      	popgt	{r4, r5, r6, pc}
   8cb30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cb34:	f04f 0e00 	mov.w	lr, #0
   8cb38:	3c01      	subs	r4, #1
   8cb3a:	e690      	b.n	8c85e <__aeabi_dmul+0xde>
   8cb3c:	ea45 0e06 	orr.w	lr, r5, r6
   8cb40:	e68d      	b.n	8c85e <__aeabi_dmul+0xde>
   8cb42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cb46:	ea94 0f0c 	teq	r4, ip
   8cb4a:	bf08      	it	eq
   8cb4c:	ea95 0f0c 	teqeq	r5, ip
   8cb50:	f43f af3b 	beq.w	8c9ca <__aeabi_dmul+0x24a>
   8cb54:	ea94 0f0c 	teq	r4, ip
   8cb58:	d10a      	bne.n	8cb70 <__aeabi_ddiv+0x19c>
   8cb5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8cb5e:	f47f af34 	bne.w	8c9ca <__aeabi_dmul+0x24a>
   8cb62:	ea95 0f0c 	teq	r5, ip
   8cb66:	f47f af25 	bne.w	8c9b4 <__aeabi_dmul+0x234>
   8cb6a:	4610      	mov	r0, r2
   8cb6c:	4619      	mov	r1, r3
   8cb6e:	e72c      	b.n	8c9ca <__aeabi_dmul+0x24a>
   8cb70:	ea95 0f0c 	teq	r5, ip
   8cb74:	d106      	bne.n	8cb84 <__aeabi_ddiv+0x1b0>
   8cb76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8cb7a:	f43f aefd 	beq.w	8c978 <__aeabi_dmul+0x1f8>
   8cb7e:	4610      	mov	r0, r2
   8cb80:	4619      	mov	r1, r3
   8cb82:	e722      	b.n	8c9ca <__aeabi_dmul+0x24a>
   8cb84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cb88:	bf18      	it	ne
   8cb8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cb8e:	f47f aec5 	bne.w	8c91c <__aeabi_dmul+0x19c>
   8cb92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8cb96:	f47f af0d 	bne.w	8c9b4 <__aeabi_dmul+0x234>
   8cb9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8cb9e:	f47f aeeb 	bne.w	8c978 <__aeabi_dmul+0x1f8>
   8cba2:	e712      	b.n	8c9ca <__aeabi_dmul+0x24a>

0008cba4 <__gedf2>:
   8cba4:	f04f 3cff 	mov.w	ip, #4294967295
   8cba8:	e006      	b.n	8cbb8 <__cmpdf2+0x4>
   8cbaa:	bf00      	nop

0008cbac <__ledf2>:
   8cbac:	f04f 0c01 	mov.w	ip, #1
   8cbb0:	e002      	b.n	8cbb8 <__cmpdf2+0x4>
   8cbb2:	bf00      	nop

0008cbb4 <__cmpdf2>:
   8cbb4:	f04f 0c01 	mov.w	ip, #1
   8cbb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8cbbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cbc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cbc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cbc8:	bf18      	it	ne
   8cbca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8cbce:	d01b      	beq.n	8cc08 <__cmpdf2+0x54>
   8cbd0:	b001      	add	sp, #4
   8cbd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8cbd6:	bf0c      	ite	eq
   8cbd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8cbdc:	ea91 0f03 	teqne	r1, r3
   8cbe0:	bf02      	ittt	eq
   8cbe2:	ea90 0f02 	teqeq	r0, r2
   8cbe6:	2000      	moveq	r0, #0
   8cbe8:	4770      	bxeq	lr
   8cbea:	f110 0f00 	cmn.w	r0, #0
   8cbee:	ea91 0f03 	teq	r1, r3
   8cbf2:	bf58      	it	pl
   8cbf4:	4299      	cmppl	r1, r3
   8cbf6:	bf08      	it	eq
   8cbf8:	4290      	cmpeq	r0, r2
   8cbfa:	bf2c      	ite	cs
   8cbfc:	17d8      	asrcs	r0, r3, #31
   8cbfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8cc02:	f040 0001 	orr.w	r0, r0, #1
   8cc06:	4770      	bx	lr
   8cc08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cc0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cc10:	d102      	bne.n	8cc18 <__cmpdf2+0x64>
   8cc12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cc16:	d107      	bne.n	8cc28 <__cmpdf2+0x74>
   8cc18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cc1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cc20:	d1d6      	bne.n	8cbd0 <__cmpdf2+0x1c>
   8cc22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cc26:	d0d3      	beq.n	8cbd0 <__cmpdf2+0x1c>
   8cc28:	f85d 0b04 	ldr.w	r0, [sp], #4
   8cc2c:	4770      	bx	lr
   8cc2e:	bf00      	nop

0008cc30 <__aeabi_cdrcmple>:
   8cc30:	4684      	mov	ip, r0
   8cc32:	4610      	mov	r0, r2
   8cc34:	4662      	mov	r2, ip
   8cc36:	468c      	mov	ip, r1
   8cc38:	4619      	mov	r1, r3
   8cc3a:	4663      	mov	r3, ip
   8cc3c:	e000      	b.n	8cc40 <__aeabi_cdcmpeq>
   8cc3e:	bf00      	nop

0008cc40 <__aeabi_cdcmpeq>:
   8cc40:	b501      	push	{r0, lr}
   8cc42:	f7ff ffb7 	bl	8cbb4 <__cmpdf2>
   8cc46:	2800      	cmp	r0, #0
   8cc48:	bf48      	it	mi
   8cc4a:	f110 0f00 	cmnmi.w	r0, #0
   8cc4e:	bd01      	pop	{r0, pc}

0008cc50 <__aeabi_dcmpeq>:
   8cc50:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cc54:	f7ff fff4 	bl	8cc40 <__aeabi_cdcmpeq>
   8cc58:	bf0c      	ite	eq
   8cc5a:	2001      	moveq	r0, #1
   8cc5c:	2000      	movne	r0, #0
   8cc5e:	f85d fb08 	ldr.w	pc, [sp], #8
   8cc62:	bf00      	nop

0008cc64 <__aeabi_dcmplt>:
   8cc64:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cc68:	f7ff ffea 	bl	8cc40 <__aeabi_cdcmpeq>
   8cc6c:	bf34      	ite	cc
   8cc6e:	2001      	movcc	r0, #1
   8cc70:	2000      	movcs	r0, #0
   8cc72:	f85d fb08 	ldr.w	pc, [sp], #8
   8cc76:	bf00      	nop

0008cc78 <__aeabi_dcmple>:
   8cc78:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cc7c:	f7ff ffe0 	bl	8cc40 <__aeabi_cdcmpeq>
   8cc80:	bf94      	ite	ls
   8cc82:	2001      	movls	r0, #1
   8cc84:	2000      	movhi	r0, #0
   8cc86:	f85d fb08 	ldr.w	pc, [sp], #8
   8cc8a:	bf00      	nop

0008cc8c <__aeabi_dcmpge>:
   8cc8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cc90:	f7ff ffce 	bl	8cc30 <__aeabi_cdrcmple>
   8cc94:	bf94      	ite	ls
   8cc96:	2001      	movls	r0, #1
   8cc98:	2000      	movhi	r0, #0
   8cc9a:	f85d fb08 	ldr.w	pc, [sp], #8
   8cc9e:	bf00      	nop

0008cca0 <__aeabi_dcmpgt>:
   8cca0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cca4:	f7ff ffc4 	bl	8cc30 <__aeabi_cdrcmple>
   8cca8:	bf34      	ite	cc
   8ccaa:	2001      	movcc	r0, #1
   8ccac:	2000      	movcs	r0, #0
   8ccae:	f85d fb08 	ldr.w	pc, [sp], #8
   8ccb2:	bf00      	nop

0008ccb4 <__aeabi_dcmpun>:
   8ccb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ccb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8ccbc:	d102      	bne.n	8ccc4 <__aeabi_dcmpun+0x10>
   8ccbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8ccc2:	d10a      	bne.n	8ccda <__aeabi_dcmpun+0x26>
   8ccc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8ccc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cccc:	d102      	bne.n	8ccd4 <__aeabi_dcmpun+0x20>
   8ccce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8ccd2:	d102      	bne.n	8ccda <__aeabi_dcmpun+0x26>
   8ccd4:	f04f 0000 	mov.w	r0, #0
   8ccd8:	4770      	bx	lr
   8ccda:	f04f 0001 	mov.w	r0, #1
   8ccde:	4770      	bx	lr

0008cce0 <__aeabi_d2iz>:
   8cce0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cce4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cce8:	d215      	bcs.n	8cd16 <__aeabi_d2iz+0x36>
   8ccea:	d511      	bpl.n	8cd10 <__aeabi_d2iz+0x30>
   8ccec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8ccf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8ccf4:	d912      	bls.n	8cd1c <__aeabi_d2iz+0x3c>
   8ccf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8ccfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8ccfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cd02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cd06:	fa23 f002 	lsr.w	r0, r3, r2
   8cd0a:	bf18      	it	ne
   8cd0c:	4240      	negne	r0, r0
   8cd0e:	4770      	bx	lr
   8cd10:	f04f 0000 	mov.w	r0, #0
   8cd14:	4770      	bx	lr
   8cd16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8cd1a:	d105      	bne.n	8cd28 <__aeabi_d2iz+0x48>
   8cd1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8cd20:	bf08      	it	eq
   8cd22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8cd26:	4770      	bx	lr
   8cd28:	f04f 0000 	mov.w	r0, #0
   8cd2c:	4770      	bx	lr
   8cd2e:	bf00      	nop

0008cd30 <BUILD_DATE>:
   8cd30:	6f4e 2076 3532 3220 3230 0031               Nov 25 2021.

0008cd3c <BUILD_TIME>:
   8cd3c:	3032 353a 3a39 3335 0000 0000               20:59:53....

0008cd48 <MPSSE_PINS_GPIO>:
   8cd48:	000f 0000 000d 0000 000e 0000 0018 0000     ................
   8cd58:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   8cd68:	5743 494c 4554 415f 5256 5349 0050 0000     CWLITE_AVRISP...
	...
   8cd80:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8cd90:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   8cda0:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...
   8cdb0:	3025 7838 0000 0000 6f4e 2076 3532 3220     %08x....Nov 25 2
   8cdc0:	3230 0031 3032 353a 3a39 3435 0000 0000     021.20:59:54....
   8cdd0:	6843 7069 6857 7369 6570 6572 2d72 694c     ChipWhisperer-Li
   8cde0:	6574 4f20 6c6e 6e69 2e65 4620 7269 776d     te Online. Firmw
   8cdf0:	7261 2065 7562 6c69 3a64 2520 2f73 7325     are build: %s/%s
   8ce00:	000a 0000 6553 6972 6c61 6e20 6d75 6562     ....Serial numbe
   8ce10:	3a72 2520 0a73 0000 6553 7474 6e69 2067     r: %s...Setting 
   8ce20:	7075 4620 4750 2041 6f43 6d6d 6e75 6369     up FPGA Communic
   8ce30:	7461 6f69 0a6e 0000 7645 6e65 2074 6f4c     ation...Event Lo
   8ce40:	706f 4520 746e 7265 6465 202c 6177 7469     op Entered, wait
   8ce50:	6e69 2e67 2e2e 000a                         ing.....

0008ce58 <_global_impure_ptr>:
   8ce58:	0ab0 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
   8ce68:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
   8ce78:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   8ce88:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   8ce98:	296c 0000 0030 0000                         l)..0...

0008cea0 <blanks.7223>:
   8cea0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008ceb0 <zeroes.7224>:
   8ceb0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0008cec0 <blanks.7217>:
   8cec0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008ced0 <zeroes.7218>:
   8ced0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8cee0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
   8cef0:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0008cf00 <__mprec_bigtens>:
   8cf00:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   8cf10:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   8cf20:	bf3c 7f73 4fdd 7515                         <.s..O.u

0008cf28 <__mprec_tens>:
   8cf28:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   8cf38:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   8cf48:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   8cf58:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   8cf68:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   8cf78:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   8cf88:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   8cf98:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   8cfa8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   8cfb8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   8cfc8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   8cfd8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   8cfe8:	9db4 79d9 7843 44ea                         ...yCx.D

0008cff0 <p05.6055>:
   8cff0:	0005 0000 0019 0000 007d 0000               ........}...

0008cffc <_ctype_>:
   8cffc:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8d00c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8d01c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8d02c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   8d03c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   8d04c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   8d05c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   8d06c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   8d07c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0008d100 <_init>:
   8d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d102:	bf00      	nop
   8d104:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d106:	bc08      	pop	{r3}
   8d108:	469e      	mov	lr, r3
   8d10a:	4770      	bx	lr

0008d10c <__init_array_start>:
   8d10c:	00089415 	.word	0x00089415

0008d110 <__frame_dummy_init_array_entry>:
   8d110:	000800e1                                ....

0008d114 <_fini>:
   8d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d116:	bf00      	nop
   8d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d11a:	bc08      	pop	{r3}
   8d11c:	469e      	mov	lr, r3
   8d11e:	4770      	bx	lr

0008d120 <__fini_array_start>:
   8d120:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	0007fffc 	.word	0x0007fffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 0006 	and.w	r0, r0, #6
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
	...

20000094 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000094:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000098:	4a21      	ldr	r2, [pc, #132]	; (20000120 <SystemInit+0x8c>)
2000009a:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000009c:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000a0:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200000a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
200000a6:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
200000aa:	6a1b      	ldr	r3, [r3, #32]
200000ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200000b0:	d107      	bne.n	200000c2 <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000b2:	4a1c      	ldr	r2, [pc, #112]	; (20000124 <SystemInit+0x90>)
200000b4:	4b1c      	ldr	r3, [pc, #112]	; (20000128 <SystemInit+0x94>)
200000b6:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200000b8:	461a      	mov	r2, r3
200000ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000bc:	f013 0f01 	tst.w	r3, #1
200000c0:	d0fb      	beq.n	200000ba <SystemInit+0x26>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200000c2:	4a1a      	ldr	r2, [pc, #104]	; (2000012c <SystemInit+0x98>)
200000c4:	4b18      	ldr	r3, [pc, #96]	; (20000128 <SystemInit+0x94>)
200000c6:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200000c8:	461a      	mov	r2, r3
200000ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200000d0:	d0fb      	beq.n	200000ca <SystemInit+0x36>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200000d2:	4a15      	ldr	r2, [pc, #84]	; (20000128 <SystemInit+0x94>)
200000d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
200000d6:	f023 0303 	bic.w	r3, r3, #3
200000da:	f043 0301 	orr.w	r3, r3, #1
200000de:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000e2:	f013 0f08 	tst.w	r3, #8
200000e6:	d0fb      	beq.n	200000e0 <SystemInit+0x4c>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200000e8:	4a11      	ldr	r2, [pc, #68]	; (20000130 <SystemInit+0x9c>)
200000ea:	4b0f      	ldr	r3, [pc, #60]	; (20000128 <SystemInit+0x94>)
200000ec:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200000ee:	461a      	mov	r2, r3
200000f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
200000f2:	f013 0f02 	tst.w	r3, #2
200000f6:	d0fb      	beq.n	200000f0 <SystemInit+0x5c>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200000f8:	2211      	movs	r2, #17
200000fa:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <SystemInit+0x94>)
200000fc:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200000fe:	461a      	mov	r2, r3
20000100:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000102:	f013 0f08 	tst.w	r3, #8
20000106:	d0fb      	beq.n	20000100 <SystemInit+0x6c>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000108:	2212      	movs	r2, #18
2000010a:	4b07      	ldr	r3, [pc, #28]	; (20000128 <SystemInit+0x94>)
2000010c:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000010e:	461a      	mov	r2, r3
20000110:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000112:	f013 0f08 	tst.w	r3, #8
20000116:	d0fb      	beq.n	20000110 <SystemInit+0x7c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <SystemInit+0xa0>)
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <SystemInit+0xa4>)
2000011c:	601a      	str	r2, [r3, #0]
2000011e:	4770      	bx	lr
20000120:	400e0800 	.word	0x400e0800
20000124:	00370809 	.word	0x00370809
20000128:	400e0400 	.word	0x400e0400
2000012c:	01370809 	.word	0x01370809
20000130:	200f3f01 	.word	0x200f3f01
20000134:	05b8d800 	.word	0x05b8d800
20000138:	20000a84 	.word	0x20000a84

2000013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2000013c:	4b16      	ldr	r3, [pc, #88]	; (20000198 <system_init_flash+0x5c>)
2000013e:	4298      	cmp	r0, r3
20000140:	d912      	bls.n	20000168 <system_init_flash+0x2c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20000142:	4b16      	ldr	r3, [pc, #88]	; (2000019c <system_init_flash+0x60>)
20000144:	4298      	cmp	r0, r3
20000146:	d916      	bls.n	20000176 <system_init_flash+0x3a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000148:	4b15      	ldr	r3, [pc, #84]	; (200001a0 <system_init_flash+0x64>)
2000014a:	4298      	cmp	r0, r3
2000014c:	d91b      	bls.n	20000186 <system_init_flash+0x4a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000014e:	4b15      	ldr	r3, [pc, #84]	; (200001a4 <system_init_flash+0x68>)
20000150:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000152:	bf94      	ite	ls
20000154:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000158:	f44f 6380 	movhi.w	r3, #1024	; 0x400
2000015c:	4a12      	ldr	r2, [pc, #72]	; (200001a8 <system_init_flash+0x6c>)
2000015e:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000160:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000164:	6013      	str	r3, [r2, #0]
20000166:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20000168:	2300      	movs	r3, #0
2000016a:	4a0f      	ldr	r2, [pc, #60]	; (200001a8 <system_init_flash+0x6c>)
2000016c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2000016e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000172:	6013      	str	r3, [r2, #0]
20000174:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20000176:	f44f 7380 	mov.w	r3, #256	; 0x100
2000017a:	4a0b      	ldr	r2, [pc, #44]	; (200001a8 <system_init_flash+0x6c>)
2000017c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
2000017e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000182:	6013      	str	r3, [r2, #0]
20000184:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000186:	f44f 7300 	mov.w	r3, #512	; 0x200
2000018a:	4a07      	ldr	r2, [pc, #28]	; (200001a8 <system_init_flash+0x6c>)
2000018c:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
2000018e:	f502 7200 	add.w	r2, r2, #512	; 0x200
20000192:	6013      	str	r3, [r2, #0]
20000194:	4770      	bx	lr
20000196:	bf00      	nop
20000198:	016e35ff 	.word	0x016e35ff
2000019c:	026259ff 	.word	0x026259ff
200001a0:	044aa1ff 	.word	0x044aa1ff
200001a4:	0501bcff 	.word	0x0501bcff
200001a8:	400e0800 	.word	0x400e0800

200001ac <udi_api_cdc_comm>:
200001ac:	000801c5 00080129 00080141 0008013d     ....)...A...=...
200001bc:	00000000                                ....

200001c0 <udi_api_cdc_data>:
200001c0:	0008050d 000803b5 00080139 0008013d     ........9...=...
200001d0:	000803a5                                ....

200001d4 <mpsse_udi_apis>:
200001d4:	20000a6c 20000a6c                       l.. l.. 

200001dc <udc_config>:
200001dc:	20000394 200001fc 20000394 200003a8     ... ... ... ... 
200001ec:	200001f4 00000000                       ... ....

200001f4 <udc_config_hs>:
200001f4:	200002cc 200003b4                       ... ... 

200001fc <udc_config_lsfs>:
200001fc:	20000204 200003b4                       ... ... 

20000204 <udc_desc_fs>:
20000204:	00620209 80000103 000409fa ffff0200     ..b.............
20000214:	050700ff 00400281 02050700 00004002     ......@......@..
20000224:	02010b08 00010202 00010409 01020201     ................
20000234:	00240500 24040110 24050202 05020106     ..$....$...$....
20000244:	02030124 03830507 09100040 02000204     $.......@.......
20000254:	0000000a 02850507 07000040 40020605     ........@......@
20000264:	00000000                                ....

20000268 <udc_desc_fs_mpsse>:
20000268:	00370209 80000102 000409fa ffff0200     ..7.............
20000278:	050700ff 00400281 02050700 00004002     ......@......@..
20000288:	00010409 ffffff02 85050700 00020002     ................
20000298:	02060507 00000200 00000000 00000000     ................
	...

200002cc <udc_desc_hs>:
200002cc:	00620209 80000103 000409fa ffff0200     ..b.............
200002dc:	050700ff 02000281 02050700 00020002     ................
200002ec:	02010b08 00010202 00010409 01020201     ................
200002fc:	00240500 24040110 24050202 05020106     ..$....$...$....
2000030c:	02030124 03830507 09100040 02000204     $.......@.......
2000031c:	0000000a 02850507 07000200 00020605     ................
2000032c:	00000002                                ....

20000330 <udc_desc_hs_mpsse>:
20000330:	00370209 80000102 000409fa ffff0200     ..7.............
20000340:	050700ff 02000281 02050700 00020002     ................
20000350:	00010409 ffffff02 85050700 00020002     ................
20000360:	02060507 00000200 00000000 00000000     ................
	...

20000394 <udc_device_desc>:
20000394:	02000112 40000000 ace22b3e 02010900     .......@>+......
200003a4:	00000103                                ....

200003a8 <udc_device_qual>:
200003a8:	0200060a 40000000 00000001              .......@....

200003b4 <udi_apis>:
200003b4:	20000a6c 200001ac 200001c0              l.. ... ... 

200003c0 <avrispmkIIfreqs>:
200003c0:	007a1200 003d0900 001e8480 000f4240     ..z...=.....@B..
200003d0:	0007a120 0003d090 0001e848 00017882      .......H....x..
200003e0:	00015f20 000148f3 00013568 0001240f      _...H..h5...$..
200003f0:	0001148d 0001069b 0000fa00 0000ee8d     ................
20000400:	0000e41b 0000da89 0000c99d 0000c21a     ................
20000410:	0000bb21 0000b4a3 0000a8ec 0000a39d     !...............
20000420:	000099f1 00009586 00008d68 0000861f     ........h.......
20000430:	00007f8e 00007999 0000742c 00006f36     .....y..,t..6o..
20000440:	00006aa8 0000647c 000060c0 00005ba5     .j..|d...`...[..
20000450:	0000570d 000052e5 00004f1e 00004bab     .W...R...O...K..
20000460:	00004882 000044af 00004212 00003ee1     .H...D...B...>..
20000470:	00003bfc 000038b8 0000365a 000033a8     .;...8..Z6...3..
20000480:	00003137 00002eff 00002cf7 00002ac0     71.......,...*..
20000490:	000028bf 000026eb 000024fc 00002379     .(...&...$..y#..
200004a0:	000021a4 0000202f 00001eab 00001d4a     .!../ ......J...
200004b0:	00001be1 00001a99 0000194e 00001822     ........N..."...
200004c0:	000016f7 000015e7 000014ef 000013e5     ................
200004d0:	00001306 00001219 00001142 00001071     ........B...q...
200004e0:	00000fb3 00000eef 00000e3d 00000d92     ........=.......
200004f0:	00000cee 00000c59 00000bc3 00000b35     ....Y.......5...
20000500:	00000aae 00000a33 000009b4 00000941     ....3.......A...
20000510:	000008d1 00000868 00000804 000007a4     ....h...........
20000520:	0000074a 000006f3 0000069f 0000064f     J...........O...
20000530:	00000603 000005bc 00000576 00000535     ........v...5...
20000540:	000004f7 000004bc 00000483 0000044d     ............M...
20000550:	00000419 000003e8 000003b9 0000038d     ................
20000560:	00000362 0000033a 00000313 000002ee     b...:...........
20000570:	000002cb 000002aa 0000028a 0000026b     ............k...
20000580:	0000024e 00000233 00000218 000001ff     N...3...........
20000590:	000001e7 000001d1 000001bb 000001a6     ................
200005a0:	00000192 00000180 0000016e 0000015d     ........n...]...
200005b0:	0000014c 0000013d 0000012e 00000120     L...=....... ...
200005c0:	00000112 00000105 000000f9 000000ee     ................
200005d0:	000000e2 000000d8 000000ce 000000c4     ................
200005e0:	000000bb 000000b2 000000aa 000000a2     ................
200005f0:	0000009a 00000093 0000008c 00000086     ................
20000600:	00000080 0000007a 00000074 0000006f     ....z...t...o...
20000610:	00000069 00000064 0000005f 0000005b     i...d..._...[...
20000620:	00000057 00000053 0000004f 0000004b     W...S...O...K...
20000630:	00000047 00000044 00000041 0000003e     G...D...A...>...
20000640:	0000003b 00000038 00000036 00000033     ;...8...6...3...

20000650 <main_b_vendor_enable>:
20000650:	00020001                                         ..

20000652 <MPSSE_RX_BYTES>:
20000652:	00010002                                         ..

20000654 <MPSSE_TRANSACTION_LOCK>:
20000654:	00000001                                ....

20000658 <usart0_driver>:
20000658:	40090000 00000000 00000000 00000000     ...@............
	...
200008f4:	00000009                                ....

200008f8 <MS_BOS_PACKET>:
200008f8:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000908:	65d29c4c 8a649e9d 0300009f 0100aa06     L..e..d.........
20000918:	00000000                                ....

2000091c <MS_OS_DESC>:
2000091c:	0000000a 06030000 000800aa 00000002     ................
2000092c:	001400a0 49570003 4253554e 00000000     ......WINUSB....
2000093c:	00000000 00840000 00070004 0044002a     ............*.D.
2000094c:	00760065 00630069 00490065 0074006e     e.v.i.c.e.I.n.t.
2000095c:	00720065 00610066 00650063 00550047     e.r.f.a.c.e.G.U.
2000096c:	00440049 00000073 007b0050 00410030     I.D.s...P.{.0.A.
2000097c:	00450043 00420032 00450033 0032002d     C.E.2.B.3.E.-.2.
2000098c:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
2000099c:	0032002d 00330042 002d0045 00340032     -.2.B.3.E.-.2.4.
200009ac:	00320036 00410030 00450043 00420032     6.2.0.A.C.E.2.B.
200009bc:	00450033 0000007d 00000000              3.E.}.......

200009c8 <udc_string_desc>:
200009c8:	00000300 00000000 00000000 00000000     ................
	...

20000a0c <udc_string_desc_languageid>:
20000a0c:	04090304                                ....

20000a10 <udc_string_manufacturer_name>:
20000a10:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
20000a20:	636e4920 0000002e                        Inc....

20000a28 <udc_string_product_name>:
20000a28:	70696843 73696857 65726570 694c2072     ChipWhisperer Li
20000a38:	00006574                                te..

20000a3c <xram>:
20000a3c:	60000000                                ...`

20000a40 <ParameterTable>:
20000a40:	81000180 01900001 01019100 94170192     ................
20000a50:	03982101 01039e06 a40001a1 00200003              .!............

20000a5e <XPROG_Param_EEPageSize>:
20000a5e:	01c00020                                          .

20000a60 <XPROG_Param_NVMBase>:
20000a60:	010001c0                                ....

20000a64 <XPROG_Param_NVMCMDRegAddr>:
20000a64:	00003233                                         3

20000a65 <XPROG_Param_NVMCSRRegAddr>:
20000a65:	f4000032                                         2..

20000a68 <defaultTimeoutTicks>:
20000a68:	000001f4                                ....

20000a6c <udi_api_vendor>:
20000a6c:	000844e9 0008450d 00084525 000844dd     .D...E..%E...D..
20000a7c:	00000000                                ....

20000a80 <g_interrupt_enabled>:
20000a80:	00000001                                ....

20000a84 <SystemCoreClock>:
20000a84:	003d0900                                ..=.

20000a88 <usb_serial_number>:
20000a88:	30303030 30303030 30303030 44414544     000000000000DEAD
20000a98:	46454542 00000000 00000000 00000000     BEEF............
20000aa8:	00000000                                ....

20000aac <_impure_ptr>:
20000aac:	20000ab0                                ... 

20000ab0 <impure_data>:
20000ab0:	00000000 20000d9c 20000e04 20000e6c     ....... ... l.. 
	...
20000b58:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20000b68:	0005deec 0000000b 00000000 00000000     ................
	...

20000ed8 <__atexit_recursive_mutex>:
20000ed8:	200027c4                                .'. 

20000edc <__global_locale>:
20000edc:	00000043 00000000 00000000 00000000     C...............
	...
20000efc:	00000043 00000000 00000000 00000000     C...............
	...
20000f1c:	00000043 00000000 00000000 00000000     C...............
	...
20000f3c:	00000043 00000000 00000000 00000000     C...............
	...
20000f5c:	00000043 00000000 00000000 00000000     C...............
	...
20000f7c:	00000043 00000000 00000000 00000000     C...............
	...
20000f9c:	00000043 00000000 00000000 00000000     C...............
	...
20000fbc:	0008c11d 0008b375 00000000 0008cffc     ....u...........
20000fcc:	0008cefc 0008cdcc 0008cdcc 0008cdcc     ................
20000fdc:	0008cdcc 0008cdcc 0008cdcc 0008cdcc     ................
20000fec:	0008cdcc 0008cdcc ffffffff ffffffff     ................
20000ffc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20001024:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20001048 <__malloc_av_>:
	...
20001050:	20001048 20001048 20001050 20001050     H.. H.. P.. P.. 
20001060:	20001058 20001058 20001060 20001060     X.. X.. `.. `.. 
20001070:	20001068 20001068 20001070 20001070     h.. h.. p.. p.. 
20001080:	20001078 20001078 20001080 20001080     x.. x.. ... ... 
20001090:	20001088 20001088 20001090 20001090     ... ... ... ... 
200010a0:	20001098 20001098 200010a0 200010a0     ... ... ... ... 
200010b0:	200010a8 200010a8 200010b0 200010b0     ... ... ... ... 
200010c0:	200010b8 200010b8 200010c0 200010c0     ... ... ... ... 
200010d0:	200010c8 200010c8 200010d0 200010d0     ... ... ... ... 
200010e0:	200010d8 200010d8 200010e0 200010e0     ... ... ... ... 
200010f0:	200010e8 200010e8 200010f0 200010f0     ... ... ... ... 
20001100:	200010f8 200010f8 20001100 20001100     ... ... ... ... 
20001110:	20001108 20001108 20001110 20001110     ... ... ... ... 
20001120:	20001118 20001118 20001120 20001120     ... ...  ..  .. 
20001130:	20001128 20001128 20001130 20001130     (.. (.. 0.. 0.. 
20001140:	20001138 20001138 20001140 20001140     8.. 8.. @.. @.. 
20001150:	20001148 20001148 20001150 20001150     H.. H.. P.. P.. 
20001160:	20001158 20001158 20001160 20001160     X.. X.. `.. `.. 
20001170:	20001168 20001168 20001170 20001170     h.. h.. p.. p.. 
20001180:	20001178 20001178 20001180 20001180     x.. x.. ... ... 
20001190:	20001188 20001188 20001190 20001190     ... ... ... ... 
200011a0:	20001198 20001198 200011a0 200011a0     ... ... ... ... 
200011b0:	200011a8 200011a8 200011b0 200011b0     ... ... ... ... 
200011c0:	200011b8 200011b8 200011c0 200011c0     ... ... ... ... 
200011d0:	200011c8 200011c8 200011d0 200011d0     ... ... ... ... 
200011e0:	200011d8 200011d8 200011e0 200011e0     ... ... ... ... 
200011f0:	200011e8 200011e8 200011f0 200011f0     ... ... ... ... 
20001200:	200011f8 200011f8 20001200 20001200     ... ... ... ... 
20001210:	20001208 20001208 20001210 20001210     ... ... ... ... 
20001220:	20001218 20001218 20001220 20001220     ... ...  ..  .. 
20001230:	20001228 20001228 20001230 20001230     (.. (.. 0.. 0.. 
20001240:	20001238 20001238 20001240 20001240     8.. 8.. @.. @.. 
20001250:	20001248 20001248 20001250 20001250     H.. H.. P.. P.. 
20001260:	20001258 20001258 20001260 20001260     X.. X.. `.. `.. 
20001270:	20001268 20001268 20001270 20001270     h.. h.. p.. p.. 
20001280:	20001278 20001278 20001280 20001280     x.. x.. ... ... 
20001290:	20001288 20001288 20001290 20001290     ... ... ... ... 
200012a0:	20001298 20001298 200012a0 200012a0     ... ... ... ... 
200012b0:	200012a8 200012a8 200012b0 200012b0     ... ... ... ... 
200012c0:	200012b8 200012b8 200012c0 200012c0     ... ... ... ... 
200012d0:	200012c8 200012c8 200012d0 200012d0     ... ... ... ... 
200012e0:	200012d8 200012d8 200012e0 200012e0     ... ... ... ... 
200012f0:	200012e8 200012e8 200012f0 200012f0     ... ... ... ... 
20001300:	200012f8 200012f8 20001300 20001300     ... ... ... ... 
20001310:	20001308 20001308 20001310 20001310     ... ... ... ... 
20001320:	20001318 20001318 20001320 20001320     ... ...  ..  .. 
20001330:	20001328 20001328 20001330 20001330     (.. (.. 0.. 0.. 
20001340:	20001338 20001338 20001340 20001340     8.. 8.. @.. @.. 
20001350:	20001348 20001348 20001350 20001350     H.. H.. P.. P.. 
20001360:	20001358 20001358 20001360 20001360     X.. X.. `.. `.. 
20001370:	20001368 20001368 20001370 20001370     h.. h.. p.. p.. 
20001380:	20001378 20001378 20001380 20001380     x.. x.. ... ... 
20001390:	20001388 20001388 20001390 20001390     ... ... ... ... 
200013a0:	20001398 20001398 200013a0 200013a0     ... ... ... ... 
200013b0:	200013a8 200013a8 200013b0 200013b0     ... ... ... ... 
200013c0:	200013b8 200013b8 200013c0 200013c0     ... ... ... ... 
200013d0:	200013c8 200013c8 200013d0 200013d0     ... ... ... ... 
200013e0:	200013d8 200013d8 200013e0 200013e0     ... ... ... ... 
200013f0:	200013e8 200013e8 200013f0 200013f0     ... ... ... ... 
20001400:	200013f8 200013f8 20001400 20001400     ... ... ... ... 
20001410:	20001408 20001408 20001410 20001410     ... ... ... ... 
20001420:	20001418 20001418 20001420 20001420     ... ...  ..  .. 
20001430:	20001428 20001428 20001430 20001430     (.. (.. 0.. 0.. 
20001440:	20001438 20001438 20001440 20001440     8.. 8.. @.. @.. 

20001450 <__malloc_sbrk_base>:
20001450:	ffffffff                                ....

20001454 <__malloc_trim_threshold>:
20001454:	00020000                                ....
